WEBVTT

00:00:08.800 --> 00:00:14.300
[Transcript missing]

00:00:15.920 --> 00:00:18.490
My name is Joshua Pennington,
and I'm an engineer on the

00:00:18.500 --> 00:00:19.900
Interface Builder team.

00:00:19.910 --> 00:00:22.740
And I'm going to be joined
later on by my colleague Rob.

00:00:22.800 --> 00:00:26.540
And we're here today to talk about
building apps using Storyboarding.

00:00:26.730 --> 00:00:30.470
Storyboarding is a great new way
for you to build your applications.

00:00:30.650 --> 00:00:36.150
Now, we made Storyboarding because
most applications are composed

00:00:36.560 --> 00:00:39.000
of many screens of content.

00:00:39.240 --> 00:00:42.970
And what we wanted to do is have
a way for you to view and edit

00:00:43.490 --> 00:00:47.220
your entire interface for the
entire application in one place.

00:00:47.220 --> 00:00:49.990
And so we put together a tool to do that.

00:00:49.990 --> 00:00:51.370
This is Storyboarding.

00:00:51.370 --> 00:00:54.850
And as you can see,
we display each screen of content or

00:00:55.170 --> 00:00:59.760
major component area for something
like an iPad split view controller.

00:00:59.760 --> 00:01:04.770
And we display the transitions between
the scenes in the canvas as lines.

00:01:04.770 --> 00:01:09.080
And these show the flow of information
and transitions throughout your app.

00:01:09.100 --> 00:01:10.800
application.

00:01:10.930 --> 00:01:14.100
So we're going to cover
a couple things today.

00:01:14.980 --> 00:01:18.550
We're going to start out by
talking about the key concepts of

00:01:18.550 --> 00:01:20.940
Storyboarding and what makes it unique.

00:01:21.020 --> 00:01:23.060
And then we're going to move
on and talk about how to move

00:01:23.170 --> 00:01:24.540
data through your Storyboard.

00:01:24.600 --> 00:01:27.280
Most applications involve
a lot of data transfer.

00:01:27.440 --> 00:01:30.920
You need to pass information through
the various screens of content.

00:01:31.120 --> 00:01:33.500
Then Rob's going to come on
stage and he's going to talk

00:01:33.610 --> 00:01:36.080
for a bit about the API,
and what it's like to use

00:01:36.080 --> 00:01:37.420
Storyboarding at runtime.

00:01:37.510 --> 00:01:40.320
And he's going to finish off by showing
you how you can begin to integrate

00:01:40.590 --> 00:01:43.400
Storyboards into your applications today.

00:01:43.530 --> 00:01:45.340
So, let's get started.

00:01:45.440 --> 00:01:49.430
There really are two primary concepts
that make Storyboarding unique.

00:01:49.500 --> 00:01:52.660
The first one is that of a scene.

00:01:52.800 --> 00:01:55.640
A scene represents one
screen full of content,

00:01:55.710 --> 00:02:00.160
or major component area like a pane
in the split view controller on iPad.

00:02:00.210 --> 00:02:04.220
And this is very familiar to
the existing editor affordances.

00:02:04.280 --> 00:02:05.910
You have an Interface Builder today.

00:02:06.030 --> 00:02:08.260
So, if you're familiar
with Interface Builder,

00:02:08.450 --> 00:02:10.200
this part's going to be a breeze.

00:02:10.240 --> 00:02:13.160
You can drag and drop views
in and rearrange them,

00:02:13.160 --> 00:02:15.320
and resize the controls.

00:02:15.340 --> 00:02:19.750
Once again, this is very familiar to the
existing Interface Builder.

00:02:19.870 --> 00:02:24.250
And below each scene,
we have what we call the Dock.

00:02:24.520 --> 00:02:28.540
Now, the Dock is like the top level
objects area in a Nib file.

00:02:28.540 --> 00:02:30.910
And this is where we have
the view controller that

00:02:30.960 --> 00:02:32.740
represents the scene at runtime.

00:02:32.770 --> 00:02:35.100
And you can also drag
and drop objects in.

00:02:35.240 --> 00:02:38.650
So, if you have a data source object,
you can just drag one of those from

00:02:38.650 --> 00:02:40.780
the library in and put it in there.

00:02:40.800 --> 00:02:42.920
Then you can wire up an outlet
to it and get access to it.

00:02:42.920 --> 00:02:48.160
So, that's the first concept that
is present in storyboarding,

00:02:48.190 --> 00:02:49.260
the scene.

00:02:49.320 --> 00:02:52.080
The second concept is that of a Segway.

00:02:52.300 --> 00:02:56.360
A Segway represents a transition
between one scene to another one.

00:02:56.430 --> 00:03:00.330
And it also is used to represent
the presentation of another scene.

00:03:00.470 --> 00:03:03.050
Say, for instance, with a popover.

00:03:03.350 --> 00:03:05.200
We have different types of Segways.

00:03:05.280 --> 00:03:07.580
So,
a very common one would be a Push Segway,

00:03:07.620 --> 00:03:10.410
which is where you would use a
navigation controller to slide

00:03:10.410 --> 00:03:12.680
another scene onto the screen.

00:03:12.730 --> 00:03:16.120
Or you could display a modal
view controller and slide one up.

00:03:16.150 --> 00:03:18.940
We have all the built-in
modal transition styles,

00:03:18.940 --> 00:03:21.920
such as cross dissolve and flip.

00:03:21.950 --> 00:03:25.580
And as an added benefit,
you can customize these Segways by

00:03:25.730 --> 00:03:29.850
subclassing it and overriding a method
to perform your own visual transition.

00:03:29.970 --> 00:03:32.570
So, you know, if there's not a built-in
style that you need,

00:03:32.790 --> 00:03:36.500
there's a very clearly defined
place for you to customize that.

00:03:36.530 --> 00:03:41.040
So, that's the second key concept
present in storyboarding.

00:03:41.070 --> 00:03:44.730
Most applications involve a lot
of transfer of data between the

00:03:44.730 --> 00:03:46.420
different screens of content.

00:03:46.530 --> 00:03:49.270
So, we're going to cover a couple
of those and talk about some

00:03:49.280 --> 00:03:52.680
best practices you can use for
doing this in your applications.

00:03:52.740 --> 00:03:55.910
Most applications are going to
have a lot of screens of content

00:03:55.920 --> 00:03:57.580
connected by these Segways.

00:03:57.640 --> 00:04:01.560
And you need to sometimes pass
information down to a scene

00:04:01.560 --> 00:04:04.760
that's being presented so it can
display the correct information.

00:04:04.840 --> 00:04:06.980
So, that's one form of data transfer.

00:04:07.240 --> 00:04:10.410
The second type of transfer would
be getting information back or

00:04:10.410 --> 00:04:13.660
receiving notification that an
event has occurred from a scene

00:04:13.660 --> 00:04:15.160
that's already been presented.

00:04:15.210 --> 00:04:19.200
And we use a central choke point for
all these types of data transfer.

00:04:19.240 --> 00:04:22.340
And so, if there's one thing you need
to remember about storyboarding,

00:04:22.380 --> 00:04:25.840
it's this method, prepare for Segway.

00:04:25.890 --> 00:04:29.060
This is a method on UI view
controller that is invoked

00:04:29.390 --> 00:04:33.160
on the source view controller
whenever a Segway is initiated.

00:04:33.210 --> 00:04:36.160
And this gives you the chance
to prepare for that scene,

00:04:36.270 --> 00:04:41.120
be it passing it information or
updating some state inside the scene

00:04:41.120 --> 00:04:41.960
that is doing the presentation.

00:04:41.960 --> 00:04:46.830
So, let's say you have a list of
brewing sessions and when the

00:04:46.830 --> 00:04:50.960
user taps on a table view cell,
you display the detail view controller.

00:04:50.960 --> 00:04:52.890
What's some more information about that?

00:04:52.960 --> 00:04:55.960
Well, it's really easy to
define that transition.

00:04:55.960 --> 00:05:00.230
You just connect a Segway to have a
navigation controller push across that

00:05:00.340 --> 00:05:01.960
other scene to display the details.

00:05:01.960 --> 00:05:05.960
And then to tell the detail scene
what it should be displaying,

00:05:05.960 --> 00:05:11.720
you would override prepare for Segway
on that source list view controller.

00:05:12.480 --> 00:05:18.380
And you would wire up and pass across
your object that defines whatever

00:05:18.380 --> 00:05:19.820
it is that needs to be displayed.

00:05:19.880 --> 00:05:22.220
And then that detailed view
controller could do whatever

00:05:22.220 --> 00:05:23.340
it needs to display that.

00:05:23.400 --> 00:05:27.620
So that is how we pass information
down to a scene that's being presented.

00:05:28.480 --> 00:05:31.890
Now, the second type of data transfer
is getting information back from a

00:05:31.890 --> 00:05:33.910
scene that's already been presented.

00:05:33.910 --> 00:05:36.140
So what would this look like?

00:05:36.140 --> 00:05:40.070
Well, in this example where we have
a list of brewing sessions,

00:05:40.070 --> 00:05:43.350
let's say we have an add button,
that when you tap that,

00:05:43.350 --> 00:05:45.260
we slide up an add sheet.

00:05:45.330 --> 00:05:49.710
So users can enter in information
and say maybe hit a done button

00:05:49.710 --> 00:05:54.590
to commit that to the model and
continue on with their application.

00:05:55.360 --> 00:05:58.240
So how do we get this information
back when the user hits the

00:05:58.240 --> 00:05:59.940
done button so we can continue?

00:05:59.960 --> 00:06:04.270
Well, we would use that prepare for
segue method to wire up a delegate

00:06:04.270 --> 00:06:08.350
from the add session controller
to the other view controller.

00:06:08.380 --> 00:06:12.770
And so we would create a custom
protocol on the add session scene.

00:06:12.800 --> 00:06:16.260
And this is just a standard
Objective C language mechanism.

00:06:16.310 --> 00:06:18.490
And we'd have a property
on that called delegate.

00:06:18.910 --> 00:06:22.770
And we would use prepare for
segue to wire up that delegate

00:06:22.790 --> 00:06:25.240
from the add session scene over
to the other view controller.

00:06:25.240 --> 00:06:28.250
And then we'd have an
action from the done button.

00:06:28.250 --> 00:06:31.610
And when that action is invoked
on the add session scene,

00:06:31.610 --> 00:06:35.740
it would do whatever it needs to do
to commit that object to the model.

00:06:35.750 --> 00:06:40.220
It would pull the details out of the
various fields in there and commit it to,

00:06:40.220 --> 00:06:41.660
say, a core data store.

00:06:41.920 --> 00:06:45.980
And then it would wire the
information back across the delegate.

00:06:48.110 --> 00:06:51.260
And then the original list could
do whatever it needs with it,

00:06:51.260 --> 00:06:53.160
and dismiss the controller.

00:06:53.290 --> 00:06:56.760
So that is how we bring information back.

00:06:56.890 --> 00:07:00.720
The other form of transferring
and viewing information in

00:07:00.810 --> 00:07:03.230
Storyboards is with table views.

00:07:03.380 --> 00:07:06.800
We have a great new feature
for table views in Storyboards,

00:07:06.860 --> 00:07:09.680
and that is prototype-based tables.

00:07:09.800 --> 00:07:14.280
Now, prototype-based tables allow you
to design the cells that go into

00:07:14.340 --> 00:07:19.440
a table view in Interface Builder,
and easily dequeue those at runtime.

00:07:19.580 --> 00:07:23.530
So, what this means is that you can
drag a cell out from the library in

00:07:23.580 --> 00:07:27.360
Interface Builder and configure it,
drag in some labels maybe,

00:07:27.360 --> 00:07:29.250
and add an image view or whatever.

00:07:29.430 --> 00:07:30.560
It's up to you.

00:07:30.760 --> 00:07:34.150
And then you can assign that
cell a reuse identifier.

00:07:34.320 --> 00:07:37.600
And at runtime, in the familiar table
view data source methods,

00:07:37.630 --> 00:07:40.800
you could simply ask the table view to,
make you a new cell,

00:07:40.800 --> 00:07:43.680
make you a copy of that
cell from the Storyboard.

00:07:43.680 --> 00:07:46.910
And it'll do all the work for you,
and grab that cell from the Storyboard

00:07:46.910 --> 00:07:49.670
and put it in the table view for display.

00:07:49.800 --> 00:07:52.880
So, this is really easy to use,
and it's also very efficient,

00:07:52.880 --> 00:07:56.750
because we've done some cool things
behind the scenes to avoid redundancy.

00:07:57.020 --> 00:07:59.620
We think this is really neat,
in that it's going to help you save

00:07:59.740 --> 00:08:03.120
a lot of time when you're designing
your table views in Interface Builder.

00:08:03.170 --> 00:08:07.200
That's great if you have a standard
table view where you've got a list

00:08:07.200 --> 00:08:09.670
of information that's data-driven.

00:08:09.690 --> 00:08:13.220
But, we often know what we want
to display in our table views

00:08:13.520 --> 00:08:15.680
before the application even runs.

00:08:15.680 --> 00:08:18.670
Maybe what we really want
are static table views.

00:08:18.680 --> 00:08:20.680
So, we've introduced that as well.

00:08:20.680 --> 00:08:25.340
You can now statically define
table views within a Storyboard.

00:08:25.700 --> 00:08:27.460
Yeah.

00:08:27.460 --> 00:08:28.700
I'm pretty excited about this.

00:08:28.700 --> 00:08:32.270
So what you can do is,
you can design the cells

00:08:32.500 --> 00:08:33.670
in line in the table view.

00:08:33.690 --> 00:08:36.690
You can drag in sections
and headers and footers,

00:08:36.690 --> 00:08:40.300
all the normal affordances you'd
have in a table view that's powered

00:08:40.300 --> 00:08:41.690
by a delegate and a data source.

00:08:41.770 --> 00:08:44.490
Except that, you can do it all with
an Interface Builder,

00:08:44.490 --> 00:08:47.080
so it's really quick,
and it's immediately obvious

00:08:47.140 --> 00:08:49.570
to you as you're designing it,
what it's going to look like

00:08:49.690 --> 00:08:50.700
when you hit build and run.

00:08:50.700 --> 00:08:54.700
And the beauty of it is,
you do not have to write a data source.

00:08:54.700 --> 00:08:58.510
So you can just build and run,
and what you have in the canvas in

00:08:58.510 --> 00:09:02.570
Interface Builder is going to show
up in your application at runtime.

00:09:02.700 --> 00:09:06.860
And you can even wire up outlets to
the contents of these table view cells,

00:09:06.860 --> 00:09:09.690
so you can customize them
with data at runtime,

00:09:09.700 --> 00:09:11.700
if you happen to know
how many cells you want.

00:09:11.700 --> 00:09:14.700
You can design that part
statically and fill in the details.

00:09:14.700 --> 00:09:19.700
So we've covered a couple things here
for dealing with data in Storyboards.

00:09:19.700 --> 00:09:22.680
So let's use these things
to build an application.

00:09:22.700 --> 00:09:25.700
Now, I really like coffee.

00:09:25.840 --> 00:09:26.700
A lot.

00:09:26.700 --> 00:09:29.700
And I also really like data.

00:09:29.700 --> 00:09:32.200
And I would love nothing more than
to take the two and to slam them

00:09:32.200 --> 00:09:35.570
together and make an app that I could
use to keep track of the coffees

00:09:35.640 --> 00:09:39.570
that I've tried and the various
cups of coffee that I've brewed.

00:09:39.860 --> 00:09:42.540
So let's build an application together.

00:09:42.980 --> 00:09:48.700
And this app is going to be
composed of really three main parts.

00:09:48.700 --> 00:09:50.870
So we're going to start with
the list of the brewing sessions

00:09:51.280 --> 00:09:52.700
that the users participated in.

00:09:52.700 --> 00:09:55.690
So they can refer to it later on.

00:09:55.790 --> 00:09:57.700
We're going to have an add
button that they can tap.

00:09:57.780 --> 00:10:00.640
And when that's tapped,
we'll present a controller where

00:10:00.720 --> 00:10:03.700
they can enter in information
about a brewing session.

00:10:03.700 --> 00:10:06.700
They can enter in some details about it.

00:10:06.700 --> 00:10:10.090
And when they tap on that coffee cell,
we're going to present a list

00:10:10.100 --> 00:10:13.690
of coffees so they can choose
which coffee it was they used.

00:10:13.750 --> 00:10:17.700
So with that, let's get started.

00:10:17.830 --> 00:10:20.700
So I'm going to go ahead
and start my demo over here.

00:10:20.700 --> 00:10:25.310
And I've got a new project that
I created that uses a storyboard.

00:10:30.100 --> 00:10:32.600
I'm going to resize that
to be a little bit bigger.

00:10:32.610 --> 00:10:36.000
And this is just a standard
storyboard-based project.

00:10:36.020 --> 00:10:38.700
We have these in the Xcode templates now.

00:10:38.710 --> 00:10:40.540
And we've got a blank canvas here.

00:10:40.750 --> 00:10:44.180
And this is where we're going to flesh
out the interface for our application.

00:10:44.190 --> 00:10:46.550
I'm going to add a new
scene to our application.

00:10:46.670 --> 00:10:49.840
Scenes in Interface Builder are
represented by view controllers.

00:10:49.920 --> 00:10:53.720
So I'm going to drag one out of
the library in the lower right.

00:10:53.720 --> 00:10:57.960
I'm going to scroll down and just drag
out a new table view controller to

00:10:58.080 --> 00:11:00.340
manage this list of brewing sessions.

00:11:00.410 --> 00:11:02.800
It's going to plop it down on the canvas.

00:11:03.100 --> 00:12:28.000
[Transcript missing]

00:12:28.470 --> 00:12:30.910
Now,
when the user taps on one of these cells,

00:12:31.070 --> 00:12:33.810
I want to push across our
detail view controller,

00:12:33.810 --> 00:12:35.780
using a navigation controller.

00:12:35.880 --> 00:12:38.110
So let's add a navigation
controller into the mix,

00:12:38.110 --> 00:12:39.120
so we can get that behavior.

00:12:39.120 --> 00:12:43.650
I'm going to use the new editor
embed navigation command for this.

00:12:43.650 --> 00:12:47.380
Give it a click,
editor embed navigation controller.

00:12:47.380 --> 00:12:50.420
And we've added a navigation controller.

00:12:51.890 --> 00:12:54.120
Now, you'll notice that the
Storyboard automatically

00:12:54.120 --> 00:12:55.600
showed a navigation bar for us.

00:12:55.600 --> 00:12:58.260
This is very important,
because it means that our table view

00:12:58.290 --> 00:12:59.960
is going to be the correct height.

00:13:00.130 --> 00:13:03.490
So when we design our interface,
everything's going to be lined

00:13:03.490 --> 00:13:06.580
up and perfectly arranged,
as it will be at runtime.

00:13:08.490 --> 00:13:10.540
So I'm just going to
give this guy a title.

00:13:10.540 --> 00:13:12.680
I'm going to double click the tab item.

00:13:12.700 --> 00:13:15.490
And I'm going to give
this the name of our app,

00:13:15.490 --> 00:13:16.520
Daily Buzz.

00:13:18.560 --> 00:13:21.020
All right,
now let's design that table view

00:13:21.150 --> 00:13:24.640
cell that's going to show some
information about our brewing sessions.

00:13:24.640 --> 00:13:26.240
I'm going to drag out some labels.

00:13:26.330 --> 00:13:30.620
Just going to scroll up in the
library here and drag out a new label.

00:13:31.560 --> 00:13:33.580
All right,
I'm going to resize that to be a little

00:13:33.580 --> 00:13:36.260
bit wider with the resize handle.

00:13:36.290 --> 00:13:39.040
And I'm going to duplicate
that using Command + D,

00:13:39.050 --> 00:13:41.000
and rearrange it here.

00:13:41.020 --> 00:13:43.440
That's going to be for the
temperature of the water,

00:13:43.460 --> 00:13:46.130
and I'm going to duplicate
it again for the date label,

00:13:46.150 --> 00:13:49.410
so we can know when this
brewing session took place.

00:13:50.040 --> 00:13:53.200
I'm gonna make this label a
little shorter and right aligned.

00:13:53.260 --> 00:13:56.020
I'm going to use the
attributes inspector for this.

00:13:56.350 --> 00:14:00.490
I'm gonna use the alignment control
and change that to right aligned.

00:14:01.690 --> 00:14:03.500
All right, perfect.

00:14:03.580 --> 00:14:05.850
So let's customize this label here.

00:14:06.100 --> 00:14:08.410
This is going to represent the
name of the coffee that was

00:14:08.410 --> 00:14:10.120
used in the brewing session.

00:14:10.190 --> 00:14:13.240
So I'm going to give it
some information here.

00:14:13.390 --> 00:14:14.740
Coffee name.

00:14:15.160 --> 00:14:17.100
And I think that we
should make that bold,

00:14:17.140 --> 00:14:20.340
because that's a very important
part of a brewing session.

00:14:20.410 --> 00:14:24.240
Just gonna use the font inspector
to change that to be system bold.

00:14:24.850 --> 00:14:25.960
All right.

00:14:25.970 --> 00:14:29.300
And this label here is going
to represent the temperature

00:14:29.300 --> 00:14:31.000
of the water that we used.

00:14:31.030 --> 00:14:33.910
So I'm just going to give
it some placeholder data.

00:14:37.000 --> 00:14:39.160
All right,
and do the same for the date label.

00:14:39.200 --> 00:14:46.590
OK, so like I said,
we have a subclass of TableViewCell,

00:14:46.590 --> 00:14:50.240
which has three outlets that we're
going to wire up to these labels.

00:14:50.340 --> 00:14:53.500
So when we copy this cell at runtime,
we can fill it in with the

00:14:53.500 --> 00:14:56.380
relevant information for the
particular brewing session that

00:14:56.380 --> 00:14:58.530
is being displayed by that cell.

00:14:58.680 --> 00:15:02.950
So I'm going to select a cell and change
its class in the identity inspector

00:15:03.220 --> 00:15:05.440
to be our subclass of TableViewCell.

00:15:05.440 --> 00:15:08.900
Once again, I'm going to use the
custom class inspector.

00:15:08.940 --> 00:15:12.190
And I'm going to change
that to our cell subclass.

00:15:12.610 --> 00:15:14.720
And we have those three outlets.

00:15:14.870 --> 00:15:18.690
So we can use outlets and actions just
like we always have in Interface Builder.

00:15:18.850 --> 00:15:22.830
So I'm going to wire up this outlet
that we have defined on our subclass

00:15:23.150 --> 00:15:27.540
to these labels by control dragging
from the cell and selecting the labels.

00:15:27.620 --> 00:15:30.820
So I'm going to control drag
here and choose that date label.

00:15:30.920 --> 00:15:33.870
I'm going to choose the-- oh, I'm sorry.

00:15:34.000 --> 00:15:35.120
I used the wrong subclass.

00:15:35.120 --> 00:15:37.560
It usually helps if you
choose the right one.

00:15:37.910 --> 00:15:38.320
There we go.

00:15:38.490 --> 00:15:39.560
All right.

00:15:39.670 --> 00:15:42.380
So I'm going to connect
the date label up.

00:15:42.810 --> 00:15:45.360
and choose date label.

00:15:45.360 --> 00:15:48.740
Gonna do the same for
the coffee name label.

00:15:48.740 --> 00:15:50.080
Alright.

00:15:50.080 --> 00:15:53.320
And once again for the temperature label.

00:15:55.590 --> 00:15:59.900
Okay, so we have our cell configured
here in Interface Builder,

00:15:59.930 --> 00:16:03.500
ready to be copied at runtime to
display the table view's data.

00:16:03.660 --> 00:16:08.450
So, to refer to this cell at runtime,
we need to assign it a reuse identifier,

00:16:08.520 --> 00:16:11.500
so we can have some way to access it.

00:16:11.650 --> 00:16:15.500
So, in the attributes inspector
for this table view cell,

00:16:15.560 --> 00:16:21.500
I'm going to assign it an identifier.

00:16:21.500 --> 00:16:24.610
I'm going to give it the
name BrewSessionCell.

00:16:28.400 --> 00:16:32.400
And we have everything on the
Storyboard side for this list right now.

00:16:32.470 --> 00:16:35.640
So let's hop over to that
subclass of TableViewController

00:16:35.640 --> 00:16:37.260
that manages this list.

00:16:37.340 --> 00:16:40.800
So we can fill out its
TableViewDataSource method that

00:16:40.800 --> 00:16:45.440
grabs a cell for a particular row,
so the TableView can display it.

00:16:45.440 --> 00:16:48.640
We're going to use the jump
bar to hop over to that file.

00:16:48.640 --> 00:16:51.640
And I'm going to go to
Bruce Sessions' ViewController.

00:16:51.720 --> 00:16:53.740
And we've got a really simple class here.

00:16:53.740 --> 00:16:57.370
It just grabs some information
from core data and fills out some

00:16:57.500 --> 00:16:59.940
basic TableViewDataSource methods.

00:16:59.950 --> 00:17:02.740
I'm going to paste in that
TableViewDataSource method

00:17:02.740 --> 00:17:05.040
I referred to a second ago.

00:17:05.040 --> 00:17:10.840
And what this method does is
it grabs the model object that

00:17:10.900 --> 00:17:15.560
represents a brewing session,
and it then asks the TableView for

00:17:15.630 --> 00:17:19.580
a copy of that cell we just
designed in the storyboard.

00:17:19.600 --> 00:17:23.450
And there's a property on that
subclass of that TableView cell that

00:17:23.620 --> 00:17:25.980
we can assign that model object to.

00:17:26.020 --> 00:17:29.460
And when we do so,
it's going to access those outlets we

00:17:29.460 --> 00:17:31.140
just established through those labels.

00:17:31.160 --> 00:17:33.530
And it's going to take the
details from the model object

00:17:33.540 --> 00:17:34.860
and display them on there.

00:17:34.940 --> 00:17:36.520
So it's a very straightforward process.

00:17:36.520 --> 00:17:43.340
So I'm going to hit Build and Run,
and we'll take a look.

00:17:45.960 --> 00:17:48.860
Xcode's compiling our project and
launching it in the simulator.

00:17:48.860 --> 00:17:54.520
And we can see here that
our application is launched,

00:17:54.640 --> 00:17:57.390
and it's displaying the list
of brewing sessions that are

00:17:57.390 --> 00:17:59.420
already in our core data model.

00:17:59.550 --> 00:18:03.030
So you can see how quickly we
were able to build a table view

00:18:03.340 --> 00:18:07.970
that's powered by data at runtime
and display some information.

00:18:08.490 --> 00:18:12.370
So let's continue to flesh this out
to show our detail view controller.

00:18:12.470 --> 00:18:15.280
I'm gonna quit the simulator.

00:18:15.320 --> 00:18:19.270
And I'm gonna hop back over to
that storyboard using the jump bar.

00:18:23.320 --> 00:18:26.460
Let's add another scene to represent
that detail view controller.

00:18:26.480 --> 00:18:29.540
Once again,
we just grab a new view controller out

00:18:29.620 --> 00:18:31.980
of the library and add it to the canvas.

00:18:32.330 --> 00:18:36.350
So I'm going to scroll down and
grab another table view controller.

00:18:36.600 --> 00:18:39.820
And this time,
I'm going to use a static table

00:18:39.820 --> 00:18:43.270
view to display the information,
because we already know that there's

00:18:43.340 --> 00:18:46.000
going to be three pieces of information
that we're going to display.

00:18:46.000 --> 00:18:48.990
So we can just drag out three
cells and design them there

00:18:48.990 --> 00:18:50.560
in line in the table view.

00:18:50.560 --> 00:18:53.540
What we want to have happen is,
we want to display this detail

00:18:53.770 --> 00:18:56.490
scene when the user taps on
one of these table views.

00:18:56.540 --> 00:18:58.940
To do so, we're going to create a segue.

00:18:58.960 --> 00:19:04.270
Now, segues are created just like actions
or outlets are in Interface Builder.

00:19:04.280 --> 00:19:08.280
We control drag from an event
source and choose the destination.

00:19:08.280 --> 00:19:12.990
So I'm going to control drag from that
table view cell and select our scene.

00:19:15.100 --> 00:19:17.640
Control drag,
and it's going to ask for confirmation.

00:19:17.640 --> 00:19:19.680
I'm going to choose segue.

00:19:19.680 --> 00:19:22.800
And you can see it has
created a push segue for us.

00:19:22.800 --> 00:19:26.180
Now, the storyboard automatically
chose to use a push segue,

00:19:26.180 --> 00:19:29.050
because it could tell that our
application was living in the

00:19:29.050 --> 00:19:31.040
context of a navigation controller.

00:19:31.040 --> 00:19:33.660
And that was probably
what we wanted to do.

00:19:33.660 --> 00:19:37.000
So when the user taps on that cell,
we're going to slide across

00:19:37.000 --> 00:19:39.000
that scene automatically.

00:19:39.020 --> 00:19:41.120
It's going to give this guy a title.

00:19:41.120 --> 00:19:44.430
Let's go Brew Session or Brew Details.

00:19:44.640 --> 00:19:47.700
All right,
and let's use a static table view.

00:19:47.810 --> 00:19:50.970
We can change a table view
controller to use a static table

00:19:51.040 --> 00:19:55.700
view by selecting its table view,
and in the attributes inspector,

00:19:55.820 --> 00:20:00.330
we'll change the content type from
dynamic prototypes to static cells.

00:20:00.590 --> 00:20:02.340
Let's give that a click.

00:20:02.400 --> 00:20:04.900
I would like to use a
grouped table view for this,

00:20:05.050 --> 00:20:06.980
because I like the way that looks.

00:20:06.980 --> 00:20:09.710
I'm just going to change
the style to grouped.

00:20:10.070 --> 00:20:12.740
And I'm going to start out
with just one cell for now.

00:20:12.740 --> 00:20:14.440
I'm just going to give
those two a delete.

00:20:14.540 --> 00:20:17.470
So you can see,
we're able to design the cells right

00:20:17.570 --> 00:20:20.120
there inline in Interface Builder.

00:20:20.120 --> 00:20:24.230
And this is going to look
exactly how it will at runtime.

00:20:24.480 --> 00:20:29.840
So, let's drag out a label to act as
kind of some information about

00:20:29.840 --> 00:20:31.900
what we're trying to display here.

00:20:31.930 --> 00:20:35.110
I'm gonna resize that to
give us a bit of room.

00:20:35.550 --> 00:20:39.660
And let's make this right align,
so I'm gonna use that alignment property.

00:20:39.660 --> 00:20:44.200
And I think we're gonna
give that the name Coffee.

00:20:45.200 --> 00:20:47.840
All right,
and let's make that bold as well.

00:20:47.870 --> 00:20:49.340
Gonna use the font inspector.

00:20:49.340 --> 00:20:55.000
And now we need to add a label that's
going to correspond to the value

00:20:55.010 --> 00:20:57.220
we're going to update at runtime.

00:20:57.320 --> 00:21:00.060
So I'm gonna drag out another
label and add it alongside.

00:21:00.160 --> 00:21:05.100
I'm gonna resize that as well
to make sure we have room.

00:21:06.900 --> 00:21:09.840
Let's change the text color
to something a bit lighter.

00:21:09.960 --> 00:21:12.940
Gonna choose steel, I like that color.

00:21:13.690 --> 00:21:16.740
Okay, so we've got our first cell.

00:21:16.770 --> 00:21:20.040
I would like to duplicate this
to add room for the other two

00:21:20.040 --> 00:21:23.220
pieces of information we're going
to display information about.

00:21:23.360 --> 00:21:27.440
So I'm going to select the table
view section in the jump bar.

00:21:27.480 --> 00:21:30.430
And I'm going to bump up the
number of rows from one to three.

00:21:30.620 --> 00:21:33.180
Give it two clicks.

00:21:33.220 --> 00:21:36.360
And you can see that the table view
editor automatically copied the

00:21:36.430 --> 00:21:38.940
contents of these cells for us.

00:21:41.450 --> 00:21:42.240
Yeah, it's pretty neat.

00:21:42.280 --> 00:21:44.570
I wouldn't want to do this any other way.

00:21:44.720 --> 00:21:49.400
So let's change the label on
the left here to be temperature.

00:21:49.460 --> 00:21:52.470
And I'm going to change
this bottom one to be date.

00:21:55.860 --> 00:21:58.610
I have another subclass
of TableViewController,

00:21:58.610 --> 00:22:02.180
which knows how to get the information
out of that brew session model object,

00:22:02.220 --> 00:22:06.200
much like that TableView cell,
and display it on three labels that we're

00:22:06.200 --> 00:22:08.720
going to wire up inside of our TableView.

00:22:08.850 --> 00:22:12.760
So I'm just going to change the
class of this TableViewController

00:22:12.970 --> 00:22:14.320
to be that subclass.

00:22:14.400 --> 00:22:18.070
I'm going to change that and
choose brew session details.

00:22:18.260 --> 00:22:21.880
and I'm going to control drag
from the table view controller,

00:22:21.880 --> 00:22:23.920
and select those three outlets.

00:22:23.920 --> 00:22:25.700
I'm gonna start with the coffee name.

00:22:25.810 --> 00:22:28.040
Just gonna wire that up,
choose coffee name.

00:22:28.080 --> 00:22:30.190
You can do the same for temperature.

00:22:30.320 --> 00:22:32.000
I'm gonna choose that.

00:22:32.010 --> 00:22:34.070
And for date.

00:22:36.030 --> 00:22:39.430
Okay, so we've got the
DetailViewController fleshed out.

00:22:39.540 --> 00:22:41.440
We've got our list.

00:22:41.470 --> 00:22:44.760
We have a segue that
tells it to slide across.

00:22:44.810 --> 00:22:48.390
Now all that's left is we need to tell
that DetailViewController what it's

00:22:48.490 --> 00:22:50.000
supposed to show information about.

00:22:50.000 --> 00:22:53.610
So we're going to use that piece
of API I referred to earlier,

00:22:53.610 --> 00:22:55.000
prepareForSegue.

00:22:55.000 --> 00:22:57.850
So let's hop over to our
implementation file for the

00:22:57.940 --> 00:22:59.920
list and implement that method.

00:23:00.220 --> 00:23:03.750
Now, before we do so,
we should give this segue an identifier

00:23:03.870 --> 00:23:06.000
so we can refer to it at runtime.

00:23:06.000 --> 00:23:07.940
I'm going to click on the
segue and view its inspector.

00:23:08.040 --> 00:23:12.080
Segues are just like any other
object in Interface Builder,

00:23:12.080 --> 00:23:16.000
in that you can select them and
interact with their properties.

00:23:16.000 --> 00:23:18.000
I'm going to switch over to
the Attributes Inspector.

00:23:18.000 --> 00:23:23.000
And in the identifier field,
I'm going to give it a name.

00:23:23.210 --> 00:23:24.950
ShowBrewDetails.

00:23:25.420 --> 00:23:27.000
All right.

00:23:27.000 --> 00:23:30.000
And now I'm going to hop over
to that implementation file.

00:23:30.000 --> 00:23:31.990
implementation file.

00:23:32.350 --> 00:23:34.830
I'm going to add my
prepare for segue method.

00:23:34.880 --> 00:23:37.060
Let's paste that in.

00:23:37.120 --> 00:23:40.550
All right,
so let's take a look at what this does.

00:23:40.810 --> 00:23:44.090
The first thing we do is we
check the identifier to make

00:23:44.090 --> 00:23:47.340
sure that we're interacting with
the segue that we think we are.

00:23:47.420 --> 00:23:50.140
This is a simple
future-proofing mechanism.

00:23:50.210 --> 00:23:51.780
What if you go and add a segue later on?

00:23:51.980 --> 00:23:54.370
You wouldn't want to be doing
the same setup work for that.

00:23:54.470 --> 00:23:57.270
So you always want to check for this.

00:23:57.480 --> 00:23:59.900
And then after that,
we get the model object

00:24:00.430 --> 00:24:04.760
out of our core database,
and we assign it to the detail

00:24:04.840 --> 00:24:06.800
view controller of the segue.

00:24:06.870 --> 00:24:10.880
The segue gives us all of the
context for how it's being presented,

00:24:10.880 --> 00:24:13.400
in that it has the
destination view controller.

00:24:13.470 --> 00:24:15.300
That's the scene that's being presented.

00:24:15.350 --> 00:24:17.780
In our case,
that's the detail view controller.

00:24:17.840 --> 00:24:23.080
It also contains some other information
that Rob's going to talk about later on.

00:24:23.230 --> 00:24:28.950
So we give that brewing session
object to our detail view controller,

00:24:28.950 --> 00:24:31.630
and the storyboard does the rest for us.

00:24:31.810 --> 00:24:34.510
So let's hit build and
run and take a look.

00:24:37.980 --> 00:24:39.500
So we've got our list again.

00:24:39.510 --> 00:24:43.400
And now when we tap on one
of these table view cells,

00:24:44.300 --> 00:24:46.180
We're going to see the details about it.

00:24:46.310 --> 00:24:51.330
So you can see that we were very easily
able to put together these two scenes,

00:24:51.430 --> 00:24:54.760
connect them up with a segue so that
we can get this transition at runtime

00:24:55.040 --> 00:24:56.940
using the navigation controller.

00:24:57.000 --> 00:25:01.030
And then we were able to pass context
to that scene as it's presented,

00:25:01.080 --> 00:25:03.550
so it can display the
correct information.

00:25:03.670 --> 00:25:09.860
So that's how you pass information down
into a scene that's being presented.

00:25:09.920 --> 00:25:11.840
What about the other way we talked about?

00:25:11.900 --> 00:25:16.000
What about bringing information back from
a scene that's already been presented?

00:25:16.090 --> 00:25:17.400
Let's talk about that.

00:25:17.440 --> 00:25:19.840
I've got another storyboard
that I'm going to jump to.

00:25:19.920 --> 00:25:23.920
And I've used these same fundamental
techniques of building table views

00:25:24.000 --> 00:25:27.420
and connecting segues to continue
to flesh out our coffee app.

00:25:27.530 --> 00:25:28.500
Let's take a look.

00:25:28.580 --> 00:25:32.440
So I'm going to open up this other
project here and quit the simulator.

00:25:32.560 --> 00:25:35.420
Just going to give that a quick.

00:25:35.470 --> 00:25:38.210
And I'm going to open
up that other project.

00:25:40.880 --> 00:25:43.340
And you can see here,
we have another Storyboard.

00:25:43.450 --> 00:25:46.890
And we've added a bit
of extra content to it.

00:25:47.130 --> 00:25:48.760
We've got three more scenes at the top.

00:25:48.970 --> 00:25:50.840
Let's talk about those.

00:25:50.900 --> 00:25:53.910
But first, you may notice that we
are zoomed out right now.

00:25:53.990 --> 00:25:57.130
Storyboards have the concept
of a zoom level on the canvas.

00:25:57.240 --> 00:25:59.260
So you can both zoom
into the editing level,

00:25:59.280 --> 00:26:01.120
so you can interact with the controls.

00:26:01.120 --> 00:26:05.600
And this is just a standard mode that
Interface Builder has always used.

00:26:05.650 --> 00:26:10.200
Or you can zoom out to get an overview
of all the scenes in your application.

00:26:10.250 --> 00:26:12.640
This is really good for
getting a high level conceptual

00:26:12.640 --> 00:26:16.320
overview of your application,
because it allows you to see at a

00:26:16.370 --> 00:26:19.000
glance the flow of your application.

00:26:19.120 --> 00:26:22.360
So let's take a look at what we've added.

00:26:22.440 --> 00:26:25.850
I'm going to zoom in by
double clicking on the canvas.

00:26:26.520 --> 00:26:32.220
And you'll see that we've added a plus
button here that you can tap to show a

00:26:32.280 --> 00:26:36.230
controller that allows the user to enter
in information about a brewing session.

00:26:36.240 --> 00:26:39.890
Now,
the way we've implemented this particular

00:26:39.890 --> 00:26:43.880
scene is we have a modal segue that
presents a navigation controller.

00:26:43.900 --> 00:26:50.130
And that navigation controller has the
ad scene as its root view controller.

00:26:50.700 --> 00:26:53.350
We've done this,
we've added this navigation

00:26:53.350 --> 00:26:57.170
controller as well,
so that we can use the navigation

00:26:57.170 --> 00:27:01.020
controller to slide on another screen
whenever the user taps on the coffee

00:27:01.020 --> 00:27:03.170
cell that's present in the ad scene.

00:27:03.190 --> 00:27:06.060
So, we've got this ad scene here.

00:27:06.060 --> 00:27:10.340
It's got its table view configured,
and it's got two buttons at the top.

00:27:10.380 --> 00:27:15.160
What we're going to use is we're going to
wire up two actions from those buttons to

00:27:15.160 --> 00:27:20.380
two different methods that are in our ad
session scene view controller subclass.

00:27:20.700 --> 00:27:25.900
That are going to refer back to the
list via a delegate to tell it that

00:27:26.040 --> 00:27:29.340
the user has hit cancel or done,
so it can continue on

00:27:29.340 --> 00:27:30.680
and do the correct thing.

00:27:30.700 --> 00:27:32.700
We've already implemented
that delegate here,

00:27:32.700 --> 00:27:36.000
and I'm sure you're all going to be
really curious about how to do that.

00:27:36.140 --> 00:27:37.930
So, we're going to do it in a second.

00:27:38.210 --> 00:27:40.860
But first,
we're going to wire up these two

00:27:41.110 --> 00:27:44.640
buttons to those two existing
methods in our subclass.

00:27:44.870 --> 00:27:47.980
So I'm going to control
drag from the cancel button,

00:27:47.980 --> 00:27:50.100
and choose the view controller.

00:27:50.130 --> 00:27:53.310
This is just like making an
action in Interface Builder.

00:27:53.380 --> 00:27:56.240
So I'm going to control drag,
choose the view controller,

00:27:56.270 --> 00:27:59.200
and I'm going to select
the cancel method.

00:27:59.420 --> 00:28:02.210
Going to do the same
with the done button.

00:28:02.250 --> 00:28:07.400
Going to wire that up to the scene there,
and choose done.

00:28:07.570 --> 00:28:10.070
Save that and hit build and run.

00:28:11.620 --> 00:28:14.000
And we'll take a look at what we have.

00:28:14.090 --> 00:28:16.680
So once again, we've got our list.

00:28:16.690 --> 00:28:20.140
When you tap on one of the cells,
we'll show the detail view controller.

00:28:20.170 --> 00:28:25.080
But now, when you tap on that Add button,
we present a modal view controller.

00:28:25.110 --> 00:28:28.310
And we have those two buttons
that are wired up to two methods

00:28:28.310 --> 00:28:31.120
on our add scene view controller.

00:28:31.160 --> 00:28:35.120
And those are going to communicate
back using a delegate to the list.

00:28:35.140 --> 00:28:38.890
And when they do that,
the list is going to call dismiss

00:28:38.890 --> 00:28:42.320
view controller to get rid
of the modal view controller.

00:28:42.380 --> 00:28:45.190
So let's hit cancel and take a look.

00:28:47.400 --> 00:28:49.790
So you can see, it worked.

00:28:49.890 --> 00:28:53.750
So I'm gonna quit the simulator,
and we're gonna talk about

00:28:53.830 --> 00:28:55.610
this coffees list here.

00:28:55.740 --> 00:29:00.160
I have another scene that's kind of
floating there for you in the canvas.

00:29:00.320 --> 00:29:04.860
And that's the scene that's going to
manage displaying the list of coffees.

00:29:04.890 --> 00:29:06.450
And when the user taps
on the coffee cell,

00:29:06.460 --> 00:29:08.340
we're going to show that.

00:29:08.360 --> 00:29:12.300
We're also going to talk
about how to use a delegate to

00:29:12.300 --> 00:29:14.760
relay that information back.

00:29:15.070 --> 00:29:19.380
Let's wire up a segue from the coffee
cell to this table view controller.

00:29:19.450 --> 00:29:22.880
It's going to control
drag and choose a scene,

00:29:22.930 --> 00:29:25.300
and establish a segue.

00:29:25.910 --> 00:29:29.170
So, once again, we've correctly added
a navigation bar there,

00:29:29.170 --> 00:29:31.360
and we can give it a navigation title.

00:29:31.420 --> 00:29:34.110
Gonna call it Coffees.

00:29:36.100 --> 00:29:37.090
Let's change the title.

00:29:37.100 --> 00:29:42.490
That's not what I wanted.

00:29:43.250 --> 00:29:44.600
Let's try this again.

00:29:45.400 --> 00:29:46.820
Hmm.

00:29:46.820 --> 00:29:47.770
Well, that looks like a bug.

00:29:47.780 --> 00:29:50.010
I'll take a look at that later.

00:29:51.440 --> 00:29:53.640
And we've got our coffees list.

00:29:53.780 --> 00:29:55.740
So we've got that segue.

00:29:55.760 --> 00:29:58.640
And what we really
want to have happen is,

00:29:58.700 --> 00:30:00.700
when the user taps on
that table view cell,

00:30:00.700 --> 00:30:04.230
we want to relay the
coffee that he selected,

00:30:04.230 --> 00:30:07.600
or he or she selected,
and pass that back to our add scene.

00:30:07.600 --> 00:30:09.620
So we're going to use
a delegate for that.

00:30:11.310 --> 00:30:13.950
Let's hop over to the header file for
the coffee scene and add a protocol

00:30:14.060 --> 00:30:15.640
that's going to define our delegate.

00:30:15.640 --> 00:30:17.360
All right,
so I'm going to hop over to the

00:30:17.380 --> 00:30:19.000
header file for the coffee scene.

00:30:19.000 --> 00:30:22.830
And I'm going to add a protocol
that defines our delegate.

00:30:22.880 --> 00:30:24.300
I'm going to paste that in.

00:30:24.300 --> 00:30:26.560
And this is a really simple method.

00:30:26.560 --> 00:30:30.160
We simply relay back the
coffee that the user selected.

00:30:30.160 --> 00:30:34.060
So let's add a forward
declaration for our protocol.

00:30:34.060 --> 00:30:36.980
And let's add a property.

00:30:36.980 --> 00:30:40.060
This is just a really simple delegate.

00:30:48.730 --> 00:30:48.990
And I'm going to hop over
to the implementation file.

00:30:49.630 --> 00:30:55.600
And now we're going to add the familiar
TableViewDidSelectRowAtIndexPath method,

00:30:55.690 --> 00:30:57.900
so we can be informed whenever
the TableView receives a

00:30:57.900 --> 00:30:59.080
tap on a particular row.

00:30:59.080 --> 00:31:03.240
And we're going to get the model
object that represents that coffee,

00:31:03.350 --> 00:31:05.860
and we're going to relay
it back to that delegate,

00:31:05.860 --> 00:31:09.020
using that property and that
protocol we just defined.

00:31:09.040 --> 00:31:11.620
And this really is the basis
of how you'll do this for

00:31:11.620 --> 00:31:13.070
all of your applications.

00:31:13.080 --> 00:31:17.050
So let's scroll down and
add our TableView method.

00:31:18.320 --> 00:31:21.230
Oh, whoops, first let's add our
synthesize for our delegates,

00:31:21.230 --> 00:31:23.850
so the compiler can automatically
add our accessor methods.

00:31:23.860 --> 00:31:26.750
And we'll add the method down here.

00:31:28.480 --> 00:31:32.470
So, what this does is it
asks the table views,

00:31:32.590 --> 00:31:37.140
the table view for its row,
it's got it here as a parameter,

00:31:37.160 --> 00:31:40.220
and then it asks the core data model
to get the model object for that.

00:31:40.230 --> 00:31:44.200
And we're gonna simply just call
the delegate and pass that through.

00:31:44.420 --> 00:31:46.400
All right,
so now what we want to have happen

00:31:46.400 --> 00:31:51.500
is we want to set the delegate of
this coffees list to the add scene,

00:31:51.560 --> 00:31:54.610
so that when the user taps on that,
we can pass that object there and it

00:31:54.610 --> 00:31:56.700
can commit it to the core data model.

00:31:56.880 --> 00:32:02.730
So let's hop back over to the add scene
view controllers implementation file.

00:32:04.270 --> 00:32:07.950
And we need to declare that this
class conforms to that delegate

00:32:08.100 --> 00:32:09.860
protocol we just established.

00:32:09.960 --> 00:32:12.130
So I'm going to put that in there.

00:32:12.200 --> 00:32:15.920
And now we need to implement
that delegate method that tells

00:32:16.100 --> 00:32:17.780
us the user selected a coffee.

00:32:17.780 --> 00:32:20.850
I happen to have a property here already,
selected coffee,

00:32:20.850 --> 00:32:23.760
which represents the coffee
that the user selected.

00:32:23.760 --> 00:32:26.020
So I'm going to paste
in that delegate method.

00:32:26.020 --> 00:32:29.500
And this simply sets that method,
and then it pops the view controller

00:32:29.730 --> 00:32:33.080
on the navigation controller,
so that when the user taps on it,

00:32:33.080 --> 00:32:35.720
we automatically dismiss
the coffees list.

00:32:35.720 --> 00:32:37.780
So that's pretty straightforward.

00:32:37.780 --> 00:32:42.080
So now what we need to do is we need
to wire up that delegate property.

00:32:42.100 --> 00:32:46.910
From the coffees list to the ad scene,
whenever the scene is being displayed,

00:32:46.910 --> 00:32:49.610
so when the user taps,
we can get that call back.

00:32:51.330 --> 00:32:54.560
So first,
let's go over to the Storyboard and give

00:32:54.560 --> 00:32:58.580
that segue we created an identifier,
so we can implement our

00:32:58.660 --> 00:33:00.540
prepare for segue method.

00:33:01.650 --> 00:33:06.700
All right, I'm going to select that,
and I'm going to give it an identifier.

00:33:06.740 --> 00:33:10.110
I'm going to type in show coffees,
that's a good name.

00:33:12.060 --> 00:33:13.830
And I'm going to hop
back over to that file,

00:33:13.850 --> 00:33:17.310
so we can add our
Prepare for Segway method.

00:33:20.700 --> 00:33:23.840
I'm just going to add that there.

00:33:23.850 --> 00:33:27.860
And once again,
we check the identifier of the segue

00:33:28.230 --> 00:33:32.750
to make sure that we are interacting in
response to the correct segue firing,

00:33:32.750 --> 00:33:35.540
in case we add a second
one in the future.

00:33:35.560 --> 00:33:37.760
And in this case,
we access the destination

00:33:37.760 --> 00:33:38.500
view controller.

00:33:38.600 --> 00:33:39.880
That's the coffees list.

00:33:39.900 --> 00:33:43.140
And we set its delegate
protocol back to the receiver.

00:33:43.140 --> 00:33:49.110
So I'm going to hit Build and Run,
and let's take a look.

00:33:53.010 --> 00:33:54.460
So we've got our list.

00:33:54.490 --> 00:33:58.200
I'm going to hit the Add button.

00:33:58.530 --> 00:34:02.720
And I can tap on the temperature
field and give it some value.

00:34:02.930 --> 00:34:05.980
203 is a good brewing temperature.

00:34:06.030 --> 00:34:08.620
And I'm going to tap the coffee cell.

00:34:08.680 --> 00:34:11.690
And when we do that,
we have presented a table

00:34:11.690 --> 00:34:14.070
view with a list of coffees.

00:34:14.160 --> 00:34:15.740
And when I tap on one,

00:34:16.110 --> 00:34:19.020
It's going to slide back over,
and you can see it's updated our

00:34:19.020 --> 00:34:21.230
label with the correct information.

00:34:21.330 --> 00:34:24.440
So that's how we pass
information back from a scene

00:34:24.440 --> 00:34:25.710
that's already been presented.

00:34:25.790 --> 00:34:28.030
We use a delegate.

00:34:28.460 --> 00:34:32.110
I'm going to hit Done,
and it's added it to our core data model.

00:34:32.160 --> 00:34:34.760
So you can see here at the bottom,
we have that brewing session

00:34:34.760 --> 00:34:36.070
that we just entered in.

00:34:36.480 --> 00:34:40.180
It's ready to be displayed using
the Detail View Controller.

00:34:40.280 --> 00:34:42.780
So that's it for my demo right now.

00:34:42.830 --> 00:34:46.890
And you can see that we were able to
very quickly put together an application

00:34:46.890 --> 00:34:51.200
that would have taken a very long time to
build if we had written it all in code.

00:34:51.250 --> 00:34:55.840
And we were able to use those
key concepts that I talked about.

00:34:55.900 --> 00:34:59.440
We created scenes with
segues connecting them.

00:34:59.480 --> 00:35:04.660
And then we were able to pass data to
scenes as they were being displayed.

00:35:04.690 --> 00:35:07.640
And we were able to
bring information back.

00:35:07.790 --> 00:35:09.440
So that was it for my demo.

00:35:09.750 --> 00:35:11.860
Can we go back to the slides, please?

00:35:11.860 --> 00:35:13.510
Thanks.

00:35:18.330 --> 00:35:22.690
So once again,
we used all these core principles in

00:35:22.810 --> 00:35:27.610
Storyboards to shuttle the data around
and very quickly assemble our interface.

00:35:27.750 --> 00:35:30.960
So now Rob's going to come on stage,
and he's going to talk to you

00:35:30.960 --> 00:35:34.160
about how you can interact
with Storyboards at runtime,

00:35:34.230 --> 00:35:38.140
and how you can begin to integrate
these into your applications today.

00:35:38.210 --> 00:35:39.700
Thank you.

00:35:45.680 --> 00:35:46.560
So what do you guys think?

00:35:46.600 --> 00:35:54.750
So we think it's pretty great.

00:35:54.780 --> 00:35:58.580
So, as Josh said, my name is Rob,
and today I am here to talk to you

00:35:58.580 --> 00:36:02.780
about the API for interacting with
storyboards in your source files,

00:36:02.780 --> 00:36:07.140
and how to integrate storyboards
into your applications today.

00:36:07.230 --> 00:36:09.800
So, let's start with the API.

00:36:10.190 --> 00:36:13.240
There are really three key parts to this.

00:36:13.400 --> 00:36:16.380
There's UI Storyboard,
UI View Controller,

00:36:16.490 --> 00:36:18.890
and UI Storyboard Segway.

00:36:19.460 --> 00:36:23.860
Let's start by talking
about UIStoryboard.

00:36:23.920 --> 00:36:27.370
And really,
an instance of a UIStoryboard object is a

00:36:27.370 --> 00:36:32.770
runtime representation of everything that
you've configured inside of your editor.

00:36:33.930 --> 00:36:39.770
And the way you load one of these in your
app is either by calling this method,

00:36:39.830 --> 00:36:43.180
StoryboardWithNameBundle,
on UIStoryboard,

00:36:43.210 --> 00:36:44.500
and getting back an instance.

00:36:44.530 --> 00:36:48.170
And you would typically do this if
you're trying to load some UI from

00:36:48.170 --> 00:36:52.080
the Storyboard that's not the first
thing that the user is going to see.

00:36:52.130 --> 00:36:55.360
Alternatively,
if your Storyboard does represent the

00:36:55.360 --> 00:36:59.220
starting point of your application's
user interface from launch,

00:36:59.250 --> 00:37:01.910
you could specify the name of
the file in your application's

00:37:01.980 --> 00:37:05.720
Info.plist using this key,
UIMainStoryboardFile.

00:37:05.750 --> 00:37:08.280
This behaves the same
way as it does for NIBs.

00:37:08.310 --> 00:37:11.940
And when you do that,
when your application launches,

00:37:11.970 --> 00:37:16.280
the UI application object just asks the
Info.plist for the value of this key,

00:37:16.330 --> 00:37:18.010
and calls this exact code.

00:37:18.050 --> 00:37:20.980
It's everything that you would do,
we just do it for you.

00:37:21.040 --> 00:37:25.120
Once you have a Storyboard,
what do you do with it?

00:37:25.140 --> 00:37:28.490
Well, typically,
you're going to be loading view

00:37:28.570 --> 00:37:29.210
controllers from your Storyboard.

00:37:29.300 --> 00:37:32.690
These are the scenes inside
of our editor experience.

00:37:32.720 --> 00:37:37.210
And the two ways that you do this
are by taking advantage of things

00:37:37.260 --> 00:37:38.720
that you've set up in the editor.

00:37:38.720 --> 00:37:42.720
You can either load the initial
view controller of the Storyboard,

00:37:42.720 --> 00:37:48.220
or you can set arbitrary identifiers on
view controllers inside of the editor,

00:37:48.220 --> 00:37:52.220
and load them using instantiate
view controller with identifier.

00:37:52.220 --> 00:37:58.050
A UIStoryboard, at the end of the day,
is a series of NIBs.

00:37:58.220 --> 00:37:58.980
It's a series of NIBs.

00:37:58.980 --> 00:38:02.510
And some metadata that we
can use at runtime to perform

00:38:02.510 --> 00:38:05.220
efficient loading and unloading.

00:38:05.280 --> 00:38:07.200
Why am I bringing that up?

00:38:07.210 --> 00:38:12.130
Well, for you,
this means that API that you're used

00:38:12.290 --> 00:38:16.200
to continues to work for doing your
custom initialization and setup.

00:38:16.200 --> 00:38:20.660
You can use ViewDidLoad, AwakeFromNib,
and Aniwa Coder to do things

00:38:20.660 --> 00:38:23.200
dynamically when your view
controller is about to appear.

00:38:23.200 --> 00:38:27.190
So we have a UI storyboard,
we have a view controller,

00:38:27.190 --> 00:38:29.190
now what do we do with them?

00:38:29.200 --> 00:38:32.150
In addition to everything else
that your view controllers do,

00:38:32.160 --> 00:38:36.150
they perform a critical
role in the passing of data

00:38:36.450 --> 00:38:38.200
throughout your application.

00:38:38.200 --> 00:38:42.450
Josh introduced you to PrepareForSegue,
which is your opportunity to load

00:38:42.500 --> 00:38:46.320
the view controller that's about to
present user interface to your users,

00:38:46.320 --> 00:38:48.200
and set it up before it appears.

00:38:48.200 --> 00:38:51.630
A view controller also has a
back pointer to the storyboard

00:38:51.630 --> 00:38:53.090
that it was loaded from.

00:38:53.200 --> 00:38:56.410
And what that means is that
you can use that to load other

00:38:56.410 --> 00:38:59.190
arbitrary view controllers,
and have them load your view controller.

00:38:59.220 --> 00:39:00.400
And this allows you to load
your view controller at any

00:39:00.430 --> 00:39:01.200
point in your application.

00:39:01.200 --> 00:39:06.290
This allows for some really powerful
user interfaces that adapt dynamically in

00:39:06.310 --> 00:39:08.190
response to what's going on around them.

00:39:08.300 --> 00:39:13.200
And besides interacting with
and participating in segues,

00:39:13.230 --> 00:39:16.170
view controllers also can perform them.

00:39:16.290 --> 00:39:18.640
You can set this up inside
of Interface Builder,

00:39:18.640 --> 00:39:21.720
the way that we've shown you,
by connecting actions

00:39:21.720 --> 00:39:23.140
inside of the canvas.

00:39:23.240 --> 00:39:27.100
But we've also added support in
iOS 5 for gesture recognizers.

00:39:27.250 --> 00:39:31.390
So you can perform a segue in
response to a multi-touch gesture.

00:39:31.450 --> 00:39:34.970
And in code,
you can even perform these in response

00:39:35.070 --> 00:39:38.760
to things like device motion events,
or even sound.

00:39:38.950 --> 00:39:40.860
I don't know how to do
it in response to sound,

00:39:40.860 --> 00:39:42.340
but I'm sure people in the audience do.

00:39:42.580 --> 00:39:45.700
What is a segue?

00:39:45.700 --> 00:39:45.700
Well...

00:39:46.040 --> 00:39:50.650
You'll probably be interacting
with segues in two contexts.

00:39:50.720 --> 00:39:55.840
The first is as information for
your prepare for segue method.

00:39:55.910 --> 00:39:59.290
And here,
the thing that you care about is

00:39:59.290 --> 00:40:03.600
probably the view controller that's
about to present UI to the user,

00:40:03.730 --> 00:40:08.430
and the identifier of the segue,
so that way you can know right

00:40:08.430 --> 00:40:12.550
then what segue the user initiated,
so you can perform the proper setup.

00:40:12.970 --> 00:40:14.840
We also have a subclass
of this in the frameworks,

00:40:14.900 --> 00:40:17.400
which is UI Storyboard Popover Segway.

00:40:17.400 --> 00:40:19.970
And just like it does everything
that every other Segway does,

00:40:20.130 --> 00:40:23.500
but it also lets you get to the
popover controller that's about

00:40:23.500 --> 00:40:25.280
to present the view controller.

00:40:25.280 --> 00:40:25.880
It's pretty handy.

00:40:25.900 --> 00:40:29.740
The other way that you'll
interact with Storyboard Segways

00:40:29.890 --> 00:40:31.790
is by creating them yourself.

00:40:31.790 --> 00:40:36.070
And here,
the thing that's important to know is

00:40:36.070 --> 00:40:41.320
the view controller that performed you,
the view controller whose

00:40:41.320 --> 00:40:45.100
UI you're responsible for loading,
and some point in the middle at which

00:40:45.100 --> 00:40:49.420
you can execute your own transition,
and take care of any relationships

00:40:49.520 --> 00:40:52.700
of the view controllers as
they're about to appear.

00:40:53.170 --> 00:40:55.700
And that's the API.

00:40:55.700 --> 00:40:58.690
It's pretty simple,
and it's intentionally simple.

00:40:58.690 --> 00:41:03.700
It's really representative of a beautiful
marriage between the tools and the

00:41:03.730 --> 00:41:08.810
frameworks to let you take advantage
of things you can design visually and

00:41:08.810 --> 00:41:12.290
easily inside of the editor at runtime.

00:41:13.280 --> 00:41:18.700
Now let's talk about integrating
Storyboards into your applications.

00:41:19.450 --> 00:41:23.880
So how many of you either have
an app on the store today,

00:41:23.880 --> 00:41:27.870
or are in the process of writing one
that you'd like to be on the store?

00:41:29.560 --> 00:41:32.400
No one.

00:41:32.520 --> 00:41:36.620
So we would love it if you
leave here today and start

00:41:36.750 --> 00:41:41.060
taking advantage of Storyboards
immediately in your applications.

00:41:41.100 --> 00:41:47.290
And so we've built them from day one
to be flexible and to be powerful.

00:41:47.490 --> 00:41:51.720
And if you're going to do this,
there are sort of two

00:41:51.900 --> 00:41:54.500
approaches that you might take.

00:41:54.970 --> 00:41:59.720
The first is you can rebuild
your entire UI from scratch.

00:41:59.860 --> 00:42:01.800
This isn't as crazy as it sounds.

00:42:02.050 --> 00:42:06.320
You get to get rid of a lot of
code by moving to storyboards.

00:42:06.430 --> 00:42:09.320
And less code is less bugs.

00:42:10.200 --> 00:42:16.340
Of course, if you don't want to do that,
you can also adopt them incrementally,

00:42:16.380 --> 00:42:20.300
taking advantage of storyboards
to describe new user

00:42:20.300 --> 00:42:22.700
interface for new features.

00:42:22.910 --> 00:42:26.000
And today, that's exactly what
we're going to show you.

00:42:26.050 --> 00:42:28.490
Josh is a big fan of coffee.

00:42:28.890 --> 00:42:30.090
But I'm a big fan of food.

00:42:30.220 --> 00:42:34.020
Last year,
I built this application on stage,

00:42:34.090 --> 00:42:38.250
and the reaction I got was, wow,
it's great.

00:42:38.390 --> 00:42:40.940
I have a way to view my recipes now.

00:42:41.030 --> 00:42:43.320
But I want your recipes.

00:42:43.610 --> 00:42:46.140
So today we're going to add
some functionality to it.

00:42:46.200 --> 00:42:49.130
We're going to add a
UI for sharing our recipes.

00:42:49.300 --> 00:42:52.610
What we're going to do is
take our existing application,

00:42:52.790 --> 00:42:55.620
get some user interface
defined in a storyboard,

00:42:55.700 --> 00:42:58.650
and present it to our users in a popover.

00:42:58.960 --> 00:43:02.500
This is actually a pretty typical
case that you might be interested in.

00:43:02.620 --> 00:43:05.020
So let's get started.

00:43:05.080 --> 00:43:08.500
Going to go to my
application for a second.

00:43:08.580 --> 00:43:13.120
And open in Xcode.

00:43:13.800 --> 00:43:16.980
You know, I think I want a bigger font.

00:43:17.060 --> 00:43:19.010
I'm getting a little old.

00:43:22.740 --> 00:43:24.420
So, here we go.

00:43:25.600 --> 00:43:27.940
Now,

00:43:28.300 --> 00:43:31.000
What I'm going to do here is
actually a little interesting.

00:43:31.250 --> 00:43:34.540
I'm told that social
networking is quite popular,

00:43:34.620 --> 00:43:36.090
but I'm not very social myself.

00:43:36.260 --> 00:43:40.870
So I've asked some of my colleagues to
put together the experience for sharing

00:43:41.280 --> 00:43:45.920
these recipes on a social network and
using a web service that they've set up.

00:43:46.070 --> 00:43:50.690
So what I have here is a storyboard file,
which represents the UI for doing this,

00:43:50.910 --> 00:43:53.940
and a static library that contains
all the implementations for the

00:43:53.940 --> 00:43:56.970
view controllers and everything
that's involved in doing that.

00:43:57.080 --> 00:43:59.750
I'm going to add that to my application.

00:44:06.600 --> 00:44:09.780
And I will copy them.

00:44:10.010 --> 00:44:11.490
Great.

00:44:11.510 --> 00:44:16.420
So now,
what I want to do is put a button in

00:44:16.420 --> 00:44:20.240
the toolbar that when you tap on it,
presents a popover.

00:44:20.240 --> 00:44:23.530
This is something that if you've had any
experience writing iPad applications,

00:44:23.720 --> 00:44:24.760
is pretty common.

00:44:24.760 --> 00:44:26.880
Going to go to the library.

00:44:27.440 --> 00:44:33.150
And find a bar button item,
and I'll just drag it in.

00:44:33.950 --> 00:44:38.470
And I want it on the right side,
so I'll add some space before it.

00:44:38.520 --> 00:44:40.290
There we go.

00:44:40.420 --> 00:44:42.600
I'm going to call it Share.

00:44:45.630 --> 00:44:49.470
Now, as is typical with buttons
inside of user interfaces that

00:44:49.470 --> 00:44:52.820
you design in Interface Builder,
you probably want an outlet to

00:44:52.820 --> 00:44:54.240
the button and an action from it.

00:44:54.600 --> 00:44:59.640
So, I'm going to hide the utility
area and open up the Assistant.

00:45:00.160 --> 00:45:03.270
So, as you can see,
Xcode has helpfully shown me the

00:45:03.390 --> 00:45:05.680
files owner of this particular view.

00:45:05.800 --> 00:45:10.630
So, I'm just going to control drag
from the button to the header,

00:45:10.630 --> 00:45:14.480
and I'll call this Share Button.

00:45:14.510 --> 00:45:17.080
And boom, I have an outlet.

00:45:18.040 --> 00:45:21.000
Now, I want to set up an action.

00:45:21.060 --> 00:45:25.000
I'm going to go to the Navigate menu,
and select Jump to Next Counterpart,

00:45:25.040 --> 00:45:27.400
and here's my implementation file.

00:45:28.180 --> 00:45:31.940
Now I'm going to control drag
from the button into here,

00:45:31.940 --> 00:45:33.760
and set up an IB action.

00:45:33.900 --> 00:45:35.970
I'll call it Share Action.

00:45:37.520 --> 00:45:42.000
Now, typing on stage actually
ends up being really hard,

00:45:42.140 --> 00:45:44.820
so I have some code that I'm
just going to paste in here.

00:45:46.500 --> 00:45:53.540
And what this does is we
load a storyboard from this

00:45:53.540 --> 00:45:55.650
file that we dragged in.

00:45:56.120 --> 00:45:58.860
We get the initial view
controller out of it.

00:45:58.890 --> 00:46:02.540
We take the sharing view controller
defined by that workflow,

00:46:02.640 --> 00:46:06.600
hand it a recipe,
and then present it in a popover.

00:46:07.040 --> 00:46:10.170
So let's build and run
and see what we get.

00:46:12.700 --> 00:46:15.100
and Ron, build and run.

00:46:15.100 --> 00:46:16.770
Here we go.

00:46:16.890 --> 00:46:18.970
I'm going to go to landscape.

00:46:20.030 --> 00:46:24.440
And select fillet of beef au poivre,
because I could really

00:46:24.440 --> 00:46:26.970
go for a steak right now.

00:46:27.240 --> 00:46:29.040
And I'm going to share it.

00:46:29.040 --> 00:46:31.440
So I click the button,
and here I have some

00:46:31.440 --> 00:46:34.610
UI that I didn't design,
someone else did for me,

00:46:34.610 --> 00:46:37.720
and it's going to let me
share my application with

00:46:37.820 --> 00:46:40.280
my recipe with the world.

00:46:41.140 --> 00:46:45.240
I'll select the share option,
and as you can see, here's our recipe.

00:46:45.270 --> 00:46:47.370
And now we're going to publish it.

00:46:48.910 --> 00:46:50.810
Whoa, what just happened?

00:46:50.900 --> 00:46:54.780
Let's look at that again,
'cause I think it's pretty cool.

00:46:57.720 --> 00:47:03.390
So, what we're seeing here is an
example of a custom segue.

00:47:03.890 --> 00:47:07.800
As it turns out,
I happen to have the source code

00:47:07.840 --> 00:47:10.420
that provided this UI for me.

00:47:10.530 --> 00:47:14.190
So I'm going to quit the simulator
and go back to the finder,

00:47:14.300 --> 00:47:18.190
and go to that project.

00:47:21.080 --> 00:47:25.280
And here, we have the Storyboard.

00:47:25.400 --> 00:47:27.010
Pretty simple.

00:47:27.580 --> 00:47:30.680
And you'll notice that we have
a segue here with a different

00:47:30.790 --> 00:47:32.620
icon than what we've seen before.

00:47:32.660 --> 00:47:35.940
Going to open up the utility
area and take a look at it.

00:47:36.160 --> 00:47:41.600
You'll notice it's a custom Segway,
and it has a custom class.

00:47:42.500 --> 00:47:45.560
So let's take a look at that.

00:47:45.570 --> 00:47:48.150
And it's pretty simple.

00:47:48.350 --> 00:47:50.540
We have one method, perform.

00:47:50.580 --> 00:47:52.980
As I mentioned earlier,
this is your chance to set up

00:47:52.980 --> 00:47:55.580
the relationships of the view
controllers in transition,

00:47:55.610 --> 00:47:58.660
as well as to perform
your visual transition.

00:47:59.140 --> 00:48:03.190
So here, I'm calling a C function,
which someone who is a lot better at core

00:48:03.190 --> 00:48:07.510
animation than I am put together for me.

00:48:07.920 --> 00:48:11.800
Transitioning through my navigation
controller stack after some delay.

00:48:11.940 --> 00:48:14.590
If we take a look at that,
you'll see here we're

00:48:14.590 --> 00:48:19.640
using an emitter layer,
and just adjusting the values of the

00:48:19.800 --> 00:48:23.220
particles that it's drawing as we go.

00:48:24.010 --> 00:48:27.100
And that provided for that effect.

00:48:27.180 --> 00:48:32.280
And really, that's, you know,
probably not a great idea to burn

00:48:32.280 --> 00:48:35.160
view controllers under your users.

00:48:36.080 --> 00:48:40.350
You see what you can do just by writing
relatively few lines of code in order

00:48:40.740 --> 00:48:46.110
to provide a custom visual feel as your
users navigate through your application.

00:48:46.670 --> 00:48:48.400
So what did we just see?

00:48:48.400 --> 00:48:52.250
Well, you can begin adopting storyboards
in your application without

00:48:52.250 --> 00:48:55.270
rewriting the entire thing,
just loading one to

00:48:55.270 --> 00:48:57.470
present parts of your UI.

00:48:57.880 --> 00:49:01.150
And if you have things in your
application that aren't well

00:49:01.150 --> 00:49:06.630
represented by the system transitions,
you can define them in a custom segue.

00:49:06.700 --> 00:49:08.530
Maybe you have a view
that pops out of a button,

00:49:08.740 --> 00:49:10.470
something like that.

00:49:11.280 --> 00:49:16.070
And of course, what we've gone over today
is what Storyboards are,

00:49:16.170 --> 00:49:20.140
and how you can create them and use them,
both in new applications

00:49:20.630 --> 00:49:24.190
and existing applications,
by taking advantage of

00:49:24.190 --> 00:49:26.010
our editor and our API.

00:49:26.110 --> 00:49:28.990
If you're interested in this,
you can find out more about using

00:49:28.990 --> 00:49:30.390
Interface Builder in Xcode 4.

00:49:30.580 --> 00:49:32.030
It was a session yesterday.

00:49:32.080 --> 00:49:34.460
If you were at Stumpy Experts last night,
you can hop in the Wayback

00:49:34.460 --> 00:49:35.800
Machine and go there.

00:49:35.850 --> 00:49:39.120
Otherwise, they'll be on the videos.

00:49:39.210 --> 00:49:41.000
There's also a session that's
being repeated tomorrow,

00:49:41.130 --> 00:49:44.360
What's New in Cocoa Touch,
going over all the new APIs that

00:49:44.370 --> 00:49:46.560
we have available in iOS 5.

00:49:46.630 --> 00:49:49.000
And if custom segues
are really your thing,

00:49:49.150 --> 00:49:51.910
there's a session on
Core Animation Essentials.

00:49:52.000 --> 00:49:54.910
With that, thanks guys.