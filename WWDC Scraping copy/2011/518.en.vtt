WEBVTT

00:00:10.210 --> 00:00:12.090
Good morning.

00:00:12.150 --> 00:00:16.320
Thank you for making the effort to
be here at 9:00 on a Friday morning,

00:00:16.570 --> 00:00:18.240
night after the bash.

00:00:18.330 --> 00:00:21.160
Hope you had a great time there,
and I hope you're ready to have

00:00:21.160 --> 00:00:25.190
a great time learning about how
to test your location application

00:00:25.190 --> 00:00:27.110
without leaving your chair.

00:00:27.310 --> 00:00:33.390
I'm really excited about what this
means for you and for your applications.

00:00:33.390 --> 00:00:33.390
So let's dive right in.

00:00:34.750 --> 00:00:38.980
So, we know testing is important.

00:00:39.130 --> 00:00:44.520
Testing is the barrier between
your mistakes and our mistakes and

00:00:44.520 --> 00:00:46.940
our users seeing those mistakes.

00:00:47.020 --> 00:00:51.370
It's the layer between conception
and having an idea and shipping.

00:00:51.540 --> 00:00:56.150
It's the difference between a
great idea and a great release.

00:00:56.350 --> 00:00:59.430
So, why don't we do more of it?

00:01:00.010 --> 00:01:03.140
Well,
that's kind of a philosophical question.

00:01:03.140 --> 00:01:06.210
It can be complicated,
and we're not going to

00:01:06.210 --> 00:01:07.060
get to all of that today.

00:01:07.060 --> 00:01:10.470
But we are going to talk a little
bit about why we don't do more of it.

00:01:10.730 --> 00:01:14.150
And we're going to talk a little
bit about how we can make it easier,

00:01:14.160 --> 00:01:18.780
and especially how we can make it easier
to test location-aware applications.

00:01:19.420 --> 00:01:22.890
So that's the goal of the session today,
to figure out how we can take our

00:01:23.190 --> 00:01:26.860
applications and make it so that they
work better for all of our users,

00:01:26.920 --> 00:01:30.960
no matter how they use our application,
no matter where they are,

00:01:31.020 --> 00:01:35.410
that all of our users can take
advantage of these great applications.

00:01:36.660 --> 00:01:40.960
Because the reality is that
it's a big world out there.

00:01:40.960 --> 00:01:44.960
People live in different countries,
different locales.

00:01:45.040 --> 00:01:46.350
They live in urban areas.

00:01:46.360 --> 00:01:48.950
They live in rural areas.

00:01:49.090 --> 00:01:53.750
And it's likely that you don't live in
all of those places at the same time.

00:01:53.870 --> 00:01:57.850
You live in a particular area,
and it's likely that the people that you

00:01:57.850 --> 00:02:03.150
work with and test your applications only
live in a subset of those areas as well.

00:02:03.580 --> 00:02:06.900
And to this point,
the best way to test one of these

00:02:06.960 --> 00:02:11.430
applications has been to go and drive.

00:02:11.710 --> 00:02:15.890
Now, we at Apple do a lot of driving,
and it's an important

00:02:15.890 --> 00:02:17.540
part of our testing.

00:02:17.650 --> 00:02:24.270
And it's important for us because we
need to make sure that our devices

00:02:24.270 --> 00:02:31.340
in real-world situations get more
and more accurate with each release,

00:02:31.370 --> 00:02:31.750
that our GPS works better,
that all of our different positioning

00:02:31.750 --> 00:02:31.750
technologies work well together.

00:02:32.200 --> 00:02:34.630
And while you as a developer may
have a bit of a classier car,

00:02:34.680 --> 00:02:38.740
you're still stuck with
essentially the same problem.

00:02:38.740 --> 00:02:42.980
You want to test your application,
you need to go and drive.

00:02:43.050 --> 00:02:45.170
But there are still limits to this.

00:02:45.310 --> 00:02:48.700
You're not going to be able to get
the test coverage that will allow you

00:02:48.700 --> 00:02:54.610
to be confident that your users in
other areas and other countries that

00:02:54.880 --> 00:02:59.860
maybe live way out in a rural area
or live in a really dense downtown

00:02:59.860 --> 00:03:04.610
urban core are going to have the
same experience that you're having.

00:03:04.800 --> 00:03:07.630
And so our goal when kind of
taking a look at this was to

00:03:07.940 --> 00:03:11.860
allow you to have that confidence
while sitting at your computer,

00:03:11.920 --> 00:03:15.890
while sitting in your chair,
as the title of the session indicates.

00:03:16.620 --> 00:03:19.140
So, what we're going to talk about today?

00:03:19.210 --> 00:03:22.240
We're going to talk about where we
have seen location-aware applications

00:03:22.390 --> 00:03:24.530
commonly fail in the past.

00:03:24.540 --> 00:03:25.950
I call this a cautionary tale.

00:03:25.990 --> 00:03:29.270
How can you make sure that
your application doesn't have

00:03:29.270 --> 00:03:31.280
many of those same issues?

00:03:32.000 --> 00:03:35.060
And then finally,
we're going to talk about the

00:03:35.060 --> 00:03:39.610
tools that we've added to make it
easier for you to do just that.

00:03:41.040 --> 00:03:44.930
So,
why test your location-aware application?

00:03:45.010 --> 00:03:47.730
I'm going to go through
a case study where,

00:03:47.730 --> 00:03:51.440
while the details may have been changed,
it really hits on a lot of

00:03:51.440 --> 00:03:55.420
the big themes that we see in
location-aware applications.

00:03:55.860 --> 00:04:00.230
So in case you can't really
tell from the session that I did

00:04:00.230 --> 00:04:03.010
earlier this week or from this one,
I'm really excited about the potential

00:04:03.120 --> 00:04:05.100
created by location-aware applications.

00:04:05.100 --> 00:04:09.330
I think that they provide a great
way for our devices to become more

00:04:09.370 --> 00:04:14.030
in tune with where our users are
and the environment that they're in.

00:04:14.060 --> 00:04:16.570
And we're seeing kind
of all these different,

00:04:16.630 --> 00:04:20.110
these new use cases that really
kind of wouldn't have been all

00:04:20.180 --> 00:04:22.240
that common just a few years ago.

00:04:22.800 --> 00:04:29.430
You know, social location, geocaching,
geotagging photos, you know,

00:04:29.440 --> 00:04:31.410
having fitness activities,
having my phone be able

00:04:31.420 --> 00:04:32.290
to track where I am.

00:04:32.300 --> 00:04:36.940
So I got inspired and decided to create
my own location-aware application,

00:04:36.940 --> 00:04:39.620
and I'd like to demo that for you now.

00:04:39.640 --> 00:04:41.650
So let's take a quick look at that.

00:04:41.750 --> 00:04:46.000
All right, so I'm just going to run
this application for you.

00:04:48.620 --> 00:04:50.100
So, I'm going to show you what it does.

00:04:50.100 --> 00:04:51.680
And the concept is pretty simple.

00:04:51.770 --> 00:04:55.560
It's an application that allows me
to find parks close to where I am.

00:04:55.620 --> 00:04:59.210
So, it's pretty basic right now,
but essentially what I'm going to do

00:04:59.340 --> 00:05:03.270
is I'm going to say find nearby parks,
and it's just going to show some near me.

00:05:03.620 --> 00:05:06.930
And so you can see
there's Golden Gate Park,

00:05:06.930 --> 00:05:09.600
Buena Vista, Mission Dolores.

00:05:09.750 --> 00:05:13.190
And then the other thing I can do is
ask to be reminded when I get close

00:05:13.190 --> 00:05:15.120
to one of these particular parks.

00:05:15.180 --> 00:05:17.600
I'll show you that functionality later.

00:05:18.660 --> 00:05:20.050
So that's the basic idea.

00:05:20.100 --> 00:05:23.150
It's just a very simple application
that figures out where I am,

00:05:23.500 --> 00:05:25.040
figures out which parks are nearby.

00:05:25.040 --> 00:05:29.020
Now, if I were building this application
to ship to the App Store,

00:05:29.020 --> 00:05:32.980
I would probably have some sort of
server that I would query this data from.

00:05:32.980 --> 00:05:36.350
But if we go to my application,
you can see that the way I'm

00:05:36.350 --> 00:05:40.330
storing the data is actually in
a number of property list files.

00:05:40.340 --> 00:05:45.280
So I basically just have an index
file that kind of tells me where,

00:05:45.890 --> 00:05:49.900
you know, gives me an index into
other property list files.

00:05:49.930 --> 00:05:51.970
And so I can go into the
one near San Francisco,

00:05:52.160 --> 00:05:54.920
and I can see the names of the parks
and the latitudes and longitudes.

00:05:55.020 --> 00:05:57.260
So again, a very simple approximation
of a database.

00:05:57.320 --> 00:06:01.090
But for the purposes of this example,
it will work.

00:06:01.470 --> 00:06:05.540
So, that's the basic idea of
how this application works,

00:06:05.540 --> 00:06:09.000
and this is what we're going to be
working with throughout the presentation.

00:06:09.100 --> 00:06:12.220
And as you can see,
it seems to work pretty well for me,

00:06:12.220 --> 00:06:12.690
right?

00:06:12.880 --> 00:06:16.630
You know, I'm in California,
and I say go to nearby parks,

00:06:16.730 --> 00:06:18.200
and it's working great.

00:06:18.330 --> 00:06:21.040
So,
I'm really excited with this application,

00:06:21.120 --> 00:06:25.810
and I think it's ready for prime time.

00:06:26.660 --> 00:06:30.280
I want to talk a little bit about
how we generally go from conception

00:06:30.280 --> 00:06:32.840
of an idea to the final release.

00:06:32.840 --> 00:06:35.980
You know, we go and implement something
and then as we test it,

00:06:35.980 --> 00:06:42.350
we find issues and problems come up and
we figure them out and we deal with them.

00:06:42.350 --> 00:06:45.750
And in this case, I've kind of grouped my
bugs into some categories.

00:06:45.850 --> 00:06:49.420
We've got our critical bugs,
the must-fix, the show stoppers.

00:06:49.420 --> 00:06:52.580
We've got the annoyances,
the things that our users will notice

00:06:52.580 --> 00:06:54.410
but probably aren't show stopping.

00:06:54.410 --> 00:06:57.640
Maybe it doesn't affect a large number
of people or it's a minor annoyance.

00:06:57.640 --> 00:07:01.060
And you've got the enhancements,
the things that you want to do to

00:07:01.130 --> 00:07:04.100
make your application even better.

00:07:04.400 --> 00:07:06.700
So as I develop my application,
I go through and address

00:07:06.840 --> 00:07:08.640
the really critical bugs.

00:07:08.680 --> 00:07:11.300
I go and get rid of most
of these annoyances,

00:07:11.360 --> 00:07:13.330
maybe even get through
most of the enhancements.

00:07:13.450 --> 00:07:16.670
We'll leave teleportation
for a future release.

00:07:16.970 --> 00:07:19.800
And my app is ready to go.

00:07:19.980 --> 00:07:24.130
So I submit it to the App Store,
and I'm really excited.

00:07:24.780 --> 00:07:28.700
And the next day I wake up,
I check my email,

00:07:28.860 --> 00:07:32.800
and I've got all of these complaints
from users who are just complaining

00:07:32.800 --> 00:07:35.040
that my application doesn't work.

00:07:35.120 --> 00:07:37.580
And worse than that,
I go to the app store,

00:07:37.760 --> 00:07:40.570
and people aren't very
happy there either.

00:07:41.480 --> 00:07:47.360
And I think this is one of the more
subtle points associated with testing.

00:07:47.450 --> 00:07:52.030
There's definitely a cost to testing,
but there's also a cost to not testing.

00:07:52.240 --> 00:07:55.220
There's the support cost,
dealing with these users.

00:07:55.300 --> 00:07:59.360
There's the reputation cost
of dealing with these reviews.

00:07:59.430 --> 00:08:03.540
And kind of if users try your
application once and it doesn't work,

00:08:03.620 --> 00:08:05.780
it can be hard to get them back.

00:08:06.320 --> 00:08:07.370
So where did I go wrong?

00:08:07.550 --> 00:08:08.500
What did I do?

00:08:08.600 --> 00:08:10.560
What could I have done better?

00:08:10.730 --> 00:08:15.010
Well, if we go back to my list of bugs,
the problem wasn't that

00:08:15.010 --> 00:08:16.330
I had bugs that I didn't fix.

00:08:16.390 --> 00:08:19.800
I wasn't trying to ship
poor-quality software.

00:08:19.920 --> 00:08:23.350
The problem was the bugs
that I didn't know about.

00:08:23.580 --> 00:08:26.970
And really, the issues that we see with
location-aware applications are

00:08:26.970 --> 00:08:31.370
these bugs that just are not
necessarily apparent when you're

00:08:31.370 --> 00:08:32.740
developing the application.

00:08:32.840 --> 00:08:35.140
It may work really well for
you and your environment,

00:08:35.230 --> 00:08:39.730
but without having access to this
broad range of environments where

00:08:39.730 --> 00:08:43.290
your users are using location,
it's really hard to find

00:08:43.290 --> 00:08:45.890
these issues prior to release.

00:08:46.500 --> 00:08:50.380
So what we're going to do is we're
going to go through some of these

00:08:50.630 --> 00:08:52.340
reviews that were left in the app store.

00:08:52.340 --> 00:08:53.820
We're going to figure out what's wrong.

00:08:53.840 --> 00:08:57.010
We're going to use some of
the new tools that we've added

00:08:57.190 --> 00:08:59.290
in iOS 5 to make it easier.

00:08:59.380 --> 00:09:01.540
I'm going to talk about
three main tools today.

00:09:01.730 --> 00:09:05.100
The first one is the iOS Simulator,
which has been enhanced

00:09:05.290 --> 00:09:07.440
with full location support.

00:09:07.530 --> 00:09:09.910
The second one is Xcode,
which has a lot of great

00:09:09.980 --> 00:09:11.960
new location-aware features.

00:09:12.020 --> 00:09:14.940
And the third one is the
UI Automation Framework,

00:09:14.960 --> 00:09:19.860
which is a way of creating automated
repeatable tests for your applications.

00:09:19.910 --> 00:09:24.350
All of these have new
location support in iOS 5.

00:09:25.470 --> 00:09:28.100
So, where do apps commonly fail?

00:09:28.160 --> 00:09:30.930
For the purposes of this exercise,
my application has all of

00:09:30.940 --> 00:09:32.540
these problems illustrated.

00:09:32.600 --> 00:09:35.260
So we're going to kind of go
through them and figure out what

00:09:35.260 --> 00:09:38.070
we can do to correct the problem.

00:09:38.910 --> 00:09:40.960
So first of all,
I've got a user who's complaining

00:09:40.960 --> 00:09:44.440
to me that my application
just doesn't do anything.

00:09:44.440 --> 00:09:47.500
And the only other piece
of information I have is,

00:09:47.510 --> 00:09:50.440
if I get this, is that they hit cancel
on the location prompt.

00:09:50.610 --> 00:09:56.590
So they denied authorization for my
application to use location services.

00:09:57.270 --> 00:09:59.960
Now, the thing is that this
is going to happen.

00:09:59.960 --> 00:10:03.150
Even if users pay money for your app,
even if you think they're

00:10:03.150 --> 00:10:06.890
going to be really excited,
users may hit that button by accident.

00:10:06.950 --> 00:10:11.470
They may not necessarily be sure why
your application needs to use location.

00:10:11.780 --> 00:10:13.200
It's going to happen.

00:10:13.250 --> 00:10:15.740
And if the application
just stops working,

00:10:15.770 --> 00:10:16.950
users are going to notice.

00:10:17.150 --> 00:10:21.310
And from their perspective,
your application just doesn't work.

00:10:21.420 --> 00:10:24.240
And they don't even get to see
any of the cool features that you

00:10:24.240 --> 00:10:26.510
spent all this time implementing.

00:10:26.680 --> 00:10:30.560
The best applications, as a baseline,
continue to function.

00:10:30.560 --> 00:10:33.800
As you'll see, my application doesn't.

00:10:33.800 --> 00:10:37.120
And they degrade gracefully,
and what I mean by that is providing

00:10:37.120 --> 00:10:41.720
the maximum amount of functionality
possible given the user's decision.

00:10:41.820 --> 00:10:44.780
So maybe your application
can't get the user's location,

00:10:44.830 --> 00:10:49.560
but what it can do is maybe provide
them some other way of inputting a

00:10:49.570 --> 00:10:55.880
zip code or an address or something
like that and operating on that basis.

00:10:55.900 --> 00:10:58.230
And then finally,
if you've got a feature that just really

00:10:58.330 --> 00:11:01.500
needs location in order to function,
let the user know in some way.

00:11:01.510 --> 00:11:04.640
You don't want to be intrusive,
but it's important that they're

00:11:04.640 --> 00:11:07.450
at least aware that if they
want to use your application,

00:11:07.510 --> 00:11:11.010
that they need to authorize
it in order to do so.

00:11:11.630 --> 00:11:15.740
So the tool that we're going to
use to kind of explore these sorts

00:11:15.740 --> 00:11:18.500
of issues is the IOS Simulator.

00:11:18.570 --> 00:11:22.540
And I'm really excited that in IOS 5,
the location-- sorry,

00:11:22.540 --> 00:11:28.410
the IOS Simulator is a bonafide
simulation of device location features,

00:11:28.520 --> 00:11:30.040
which is really exciting.

00:11:30.110 --> 00:11:33.300
And so what that means is you'll
get the standard location prompt

00:11:33.380 --> 00:11:34.960
just as you would on a device.

00:11:35.010 --> 00:11:38.300
This is not something
that we had in IOS 4.

00:11:38.300 --> 00:11:44.450
You will get the status bar icon up in
the status bar when it's appropriate.

00:11:44.790 --> 00:11:49.150
You will get the Location
Services menu that allows you to

00:11:49.150 --> 00:11:53.340
essentially view the behavior there,
as well as change authorization

00:11:53.490 --> 00:11:55.320
states for your application.

00:11:55.380 --> 00:11:57.820
And then finally, you get the option to
reset location warnings,

00:11:57.820 --> 00:12:00.710
which is essentially a way of
resetting the system back to

00:12:00.710 --> 00:12:06.720
its initial state location-wise,
again, just as you would on a device.

00:12:06.850 --> 00:12:10.760
So let's take a look at how we
can use the iOS simulator to

00:12:10.770 --> 00:12:13.690
take our one-star application
and get it up a little higher.

00:12:13.790 --> 00:12:15.300
So let's go back to the demo.

00:12:15.340 --> 00:12:16.970
All right,
so here's where I was before I was

00:12:16.970 --> 00:12:19.280
showing you my application working.

00:12:19.310 --> 00:12:23.370
But what I'm going to do is I'm
actually going to go into Settings,

00:12:23.370 --> 00:12:26.420
and under Location Services,
you can see Location Services are on.

00:12:26.470 --> 00:12:30.810
And my application is authorized
because I hit OK on the prompt earlier.

00:12:30.930 --> 00:12:33.130
So what I'm going to do is
I'm going to turn Location

00:12:33.130 --> 00:12:34.880
Services off for my application.

00:12:34.950 --> 00:12:37.940
Going to menu out and go back to my app.

00:12:38.350 --> 00:12:42.300
And I'm just clicking around
and it's not responding.

00:12:42.300 --> 00:12:48.820
And even worse,
if I just close it entirely...

00:12:50.270 --> 00:12:51.540
And come back to it.

00:12:51.590 --> 00:12:54.500
I launched it and I'm just
getting a black screen.

00:12:54.620 --> 00:12:57.500
So as I,
just as somebody who automatically

00:12:57.500 --> 00:13:01.640
hit OK on the location prompt,
didn't see this behavior at all.

00:13:01.770 --> 00:13:03.880
But all I had to do was make
that different decision,

00:13:03.880 --> 00:13:06.710
and now my application
just isn't working.

00:13:07.380 --> 00:13:12.300
So, one other thing I want to show you
in the simulator is the ability

00:13:12.400 --> 00:13:14.550
to reset location warnings.

00:13:14.550 --> 00:13:17.000
So I'm just going to do that now.

00:13:17.060 --> 00:13:21.180
And that will set things back to
factory defaults just for the next time.

00:13:22.050 --> 00:13:25.000
All right, so what's going on?

00:13:25.070 --> 00:13:27.340
Well,
what I'm going to do is I'm actually

00:13:27.340 --> 00:13:29.550
going to launch this in the debugger.

00:13:32.350 --> 00:13:34.260
It launches my application.

00:13:34.340 --> 00:13:37.350
Here's the prompt,
and so I'm going to hit "Don't Allow."

00:13:38.730 --> 00:13:41.840
And I'm back in this unresponsive state.

00:13:41.920 --> 00:13:45.380
So if I go back to the debugger here,
I'm just going to pause.

00:13:46.600 --> 00:15:41.900
[Transcript missing]

00:15:44.390 --> 00:15:47.750
It launches, and excellent,
this time we get a prompt saying

00:15:47.750 --> 00:15:49.290
nearby parks are unavailable.

00:15:49.410 --> 00:15:52.610
If you want to view them,
you have to authorize the application.

00:15:53.080 --> 00:15:56.060
So at this point, we may think, great,
this solves the problem.

00:15:56.150 --> 00:16:00.080
But I think what we've actually done
is we may have gone a little too far.

00:16:00.360 --> 00:16:04.340
Because if I exit the
application and then go back in,

00:16:04.340 --> 00:16:05.940
I get another prompt.

00:16:06.270 --> 00:16:08.610
In fact, if I lock the device,
say I put it in my

00:16:08.730 --> 00:16:11.400
pocket and I unlock it,
I get another prompt.

00:16:11.510 --> 00:16:14.350
So basically, every time the app is
coming to the foreground,

00:16:14.390 --> 00:16:17.350
I'm constantly telling the user, hey,
you need to turn on location

00:16:17.520 --> 00:16:19.360
services to use this application.

00:16:21.690 --> 00:16:24.910
And the user may get kind of annoyed
and may actually stop using my

00:16:24.910 --> 00:16:30.630
application if I keep pestering with
these alerts over and over again.

00:16:30.820 --> 00:16:34.430
So what would probably be better
would be to essentially localize

00:16:34.430 --> 00:16:38.210
this alert or move it into a place
that is more directly connected

00:16:38.210 --> 00:16:40.480
to the use of location features.

00:16:40.880 --> 00:16:46.370
So probably putting something into
code that runs just kind of every time

00:16:46.650 --> 00:16:50.540
the app comes to the foreground or
something like that isn't the best idea.

00:16:50.640 --> 00:16:52.730
So let's get rid of that.

00:16:53.270 --> 00:16:57.570
So if I go back to my project here,
I think what I'm going to do instead

00:16:57.570 --> 00:17:01.390
is make it so that when they click
on this Find Nearby Parks button,

00:17:01.450 --> 00:17:03.740
they get that alert instead.

00:17:03.860 --> 00:17:06.440
Because as you notice right now,
just nothing happens.

00:17:06.440 --> 00:17:08.200
It doesn't work at all.

00:17:08.300 --> 00:17:14.410
So I have my Nearby
Parks View Controller,

00:17:14.410 --> 00:17:17.000
which is essentially the class
that is driving this view.

00:17:17.280 --> 00:17:19.900
And I'm going to go
down to my table view,

00:17:20.010 --> 00:17:24.420
didSelectRowAtIndexPath delegate method.

00:17:24.460 --> 00:17:28.940
So this is a table view controller,
and this delegate method gets called

00:17:28.940 --> 00:17:33.290
whenever a button or basically
entering this table view is clicked.

00:17:33.780 --> 00:17:38.070
So it's this piece of code
here that's most relevant.

00:17:38.090 --> 00:17:49.790
And essentially, if they tap that button,
what I'm doing right now is I'm checking

00:17:49.790 --> 00:17:49.910
to see if the status is not denied,
is not restricted.

00:17:49.910 --> 00:17:49.910
I'm going to start updating location.

00:17:50.230 --> 00:17:55.130
So what I'm going to do is
I'm actually going to add an

00:17:55.130 --> 00:17:57.340
else statement into that part.

00:17:57.340 --> 00:17:59.640
And what I'm going to
do is basically saying,

00:17:59.640 --> 00:18:01.910
well,
if we are denied or we are authorized,

00:18:01.910 --> 00:18:04.640
then in that case,
I'm going to show a dialogue.

00:18:04.730 --> 00:18:07.820
So it really brings more
locality into the alert.

00:18:07.820 --> 00:18:13.770
It reminds the user at the point
when they try and use a feature

00:18:13.770 --> 00:18:15.050
that they need to enable location
services in order to use it.

00:18:18.310 --> 00:18:19.130
All right, so I go back.

00:18:19.240 --> 00:18:24.340
Notice I didn't get a prompt just by
virtue of loading the application.

00:18:24.400 --> 00:18:26.740
But I click Find Nearby Parks,
and it's telling me, hey,

00:18:26.820 --> 00:18:29.960
if you want to use this feature,
you need to authorize this application.

00:18:29.960 --> 00:18:30.860
I click it again.

00:18:30.860 --> 00:18:32.090
I get the alert again.

00:18:32.100 --> 00:18:36.700
So essentially,
whenever I try and use location services,

00:18:36.700 --> 00:18:40.300
the user gets reminded
at that point in time.

00:18:41.660 --> 00:18:47.340
One other thing I just wanted to show
you quickly is that all of the APIs,

00:18:47.470 --> 00:18:49.500
so the authorization status API,
as well as geocoding,

00:18:49.540 --> 00:18:50.740
also work in the simulator.

00:18:50.740 --> 00:18:56.790
So if I go back to Settings and
authorize this application,

00:18:57.190 --> 00:18:58.810
and go back.

00:18:58.940 --> 00:19:02.670
You can actually see that I'm
geocoding the locations as I get them.

00:19:02.810 --> 00:19:06.050
So there's full geocoding
support in the simulator as well.

00:19:07.050 --> 00:19:10.350
Before I go back to the slides,
I'm just going to reset again

00:19:10.350 --> 00:19:12.630
so we start with a clean slate.

00:19:13.410 --> 00:19:17.960
So we took this problem that
only appeared when the user

00:19:17.960 --> 00:19:19.300
denied location services.

00:19:19.350 --> 00:19:22.850
We were quickly able to test that
scenario ourselves without having

00:19:23.110 --> 00:19:26.990
to load our code onto a device,
find the problem using the debugger,

00:19:26.990 --> 00:19:28.110
and then fix it.

00:19:28.180 --> 00:19:33.100
And we fixed it in a way that is in tune
with how the user probably wants to use

00:19:33.130 --> 00:19:35.900
location services in the application.

00:19:35.900 --> 00:19:39.440
At the point when they decide
that they want to use it,

00:19:39.500 --> 00:19:41.200
that's when we present the
dialogue and let them know.

00:19:42.330 --> 00:19:43.780
So, we're up to three stars.

00:19:43.960 --> 00:19:44.490
We're getting there.

00:19:44.600 --> 00:19:47.000
We're on our way.

00:19:47.040 --> 00:19:50.360
So we have this other one-star review,
and it looks like we've

00:19:50.360 --> 00:19:53.760
got a user from France,
and my French isn't what it used to be,

00:19:53.770 --> 00:19:56.960
but I think what this user is
saying is that the application

00:19:57.030 --> 00:19:58.950
just isn't working for them.

00:19:58.960 --> 00:20:03.990
And oftentimes when we see things
like this is we see applications

00:20:03.990 --> 00:20:09.540
that were built in one region of the
world that are then used in other

00:20:09.540 --> 00:20:14.030
regions of the world where maybe the
developer hadn't really thought about

00:20:14.040 --> 00:20:16.310
or hadn't really necessarily intended.

00:20:16.640 --> 00:20:19.940
So it's important to identify
and verify any data coverage

00:20:20.000 --> 00:20:20.890
limitations that you have.

00:20:20.900 --> 00:20:23.020
And what I mean by that is that
if you're depending on some

00:20:23.140 --> 00:20:26.670
external service to provide you
things like local businesses or,

00:20:26.670 --> 00:20:31.340
in my case, I had a service that provided
me with nearby parks,

00:20:31.340 --> 00:20:35.680
anything that basically involves
location and finding some item of

00:20:35.690 --> 00:20:40.320
interest in your particular locations,
make sure you know where that

00:20:40.320 --> 00:20:42.700
works and where it doesn't work.

00:20:42.700 --> 00:20:44.950
If necessary,
find additional sources because

00:20:45.000 --> 00:20:48.690
users will download your application
and expect them to work for them.

00:20:48.750 --> 00:20:53.740
And if it doesn't, to them, you know,
it doesn't deliver on its promises.

00:20:53.890 --> 00:20:57.160
And if absolutely, you know,
if necessary, and you've got just large

00:20:57.190 --> 00:20:59.890
regions of the country,
or sorry, of the world where your

00:20:59.890 --> 00:21:02.550
application won't work,
consider appropriate regions

00:21:02.640 --> 00:21:04.240
for sale of your application.

00:21:04.280 --> 00:21:06.820
Now,
this is obviously application-specific.

00:21:06.820 --> 00:21:09.560
If you've got some sort of travel
application that's for people

00:21:09.730 --> 00:21:12.500
traveling to the United States,
it may make sense to

00:21:12.650 --> 00:21:15.260
sell that everywhere,
even if you only have data

00:21:15.260 --> 00:21:16.640
for the U.S., for example.

00:21:16.640 --> 00:21:20.450
But if your application is really
about finding local information,

00:21:20.530 --> 00:21:23.110
this is something
important to keep in mind.

00:21:24.840 --> 00:21:27.820
But in my case,
I want to figure out why this isn't

00:21:27.820 --> 00:21:29.560
working for this particular user.

00:21:29.780 --> 00:21:33.940
And I'm going to use the
support in Xcode to do that.

00:21:34.060 --> 00:21:39.040
And it's really exciting that in iOS 5,
the Xcode team has added location support

00:21:39.050 --> 00:21:42.150
to a variety of components of the IDE.

00:21:42.270 --> 00:21:46.350
They've added support in schemes,
which I'll talk about in a minute.

00:21:46.410 --> 00:21:48.720
They've added support in the debugger.

00:21:48.880 --> 00:21:52.210
And they've also added some
unit test support as well.

00:21:53.300 --> 00:21:57.510
And they allow simulation of a kind of a
variety of different types of positions.

00:21:57.600 --> 00:22:00.650
You can -- they have a variety
of pre-populated cities that

00:22:00.680 --> 00:22:02.200
you can set the location to.

00:22:02.360 --> 00:22:05.390
And they also allow specifying
custom locations through

00:22:05.550 --> 00:22:07.040
what's called a GPX file.

00:22:07.040 --> 00:22:14.120
GPX is an XML-based format for, I guess,
storing waypoints or lists of locations.

00:22:15.110 --> 00:22:19.340
And the great thing is that this works
both in the simulator and on the device.

00:22:19.440 --> 00:22:27.060
So if you need to test on a device
because there's some portion

00:22:27.060 --> 00:22:30.670
of your application that really
depends on that environment,

00:22:30.670 --> 00:22:30.670
you can still simulate locations by
using the support available in Xcode.

00:22:31.920 --> 00:22:33.260
So what is a scheme?

00:22:33.450 --> 00:22:36.440
If you've been to some of the sessions
earlier this week or you've used Xcode,

00:22:36.440 --> 00:22:37.980
you're probably pretty familiar.

00:22:37.990 --> 00:22:40.520
But a scheme is essentially
a way that specifies how your

00:22:40.580 --> 00:22:45.800
application should be built,
test, and launched, among other things.

00:22:45.850 --> 00:22:48.910
And where location mostly comes
into play and where I'm going to

00:22:49.020 --> 00:22:52.340
focus on is in the launch phase.

00:22:52.340 --> 00:22:55.050
And by using schemes,
you can essentially control the

00:22:55.120 --> 00:23:01.920
location environment that your
device sees or the simulator sees

00:23:01.920 --> 00:23:01.920
when you run the application.

00:23:02.710 --> 00:23:07.320
So this is what the scheme,
the edit scheme dialogue looks like.

00:23:07.350 --> 00:23:10.760
And if you'll notice,
under the run action,

00:23:10.840 --> 00:23:15.920
there is an option to specify the
location associated with that scheme.

00:23:15.930 --> 00:23:19.720
And so this is a pop-up menu that
allows you to select one of a

00:23:19.750 --> 00:23:23.840
number of pre-populated locations,
popular locations in the world.

00:23:23.860 --> 00:23:27.040
Or if you have GPX files
add to your project-- again,

00:23:27.040 --> 00:23:33.200
these tracks or series of locations--
you can specify one of those as well.

00:23:33.200 --> 00:23:37.970
And that allows you to
essentially pick any location in

00:23:37.970 --> 00:23:39.970
the world that you want to test.

00:23:41.100 --> 00:24:59.700
[Transcript missing]

00:24:59.940 --> 00:25:02.600
So let me give you a demo of
that and see how we can use it

00:25:02.660 --> 00:25:04.240
to solve this user's problem.

00:25:04.290 --> 00:25:06.000
All right.

00:25:06.310 --> 00:25:09.080
So, as you can see,
we're back in my project here,

00:25:09.080 --> 00:25:11.520
and I just want to zoom
in on the scheme pop-up.

00:25:11.520 --> 00:25:14.630
So I've got a number of
different schemes defined here.

00:25:14.680 --> 00:25:18.410
I'm going to select the Paris scheme
because I want to see what happens

00:25:18.410 --> 00:25:20.210
when the device is in France.

00:25:20.810 --> 00:25:26.940
So I'm going to run it
with that scheme selected.

00:25:26.940 --> 00:25:28.640
And I'm going to hit Find Nearby Parks.

00:25:28.640 --> 00:25:30.810
I'd like to use my location.

00:25:33.500 --> 00:25:36.640
And it doesn't look
like it's finding them.

00:25:36.640 --> 00:25:38.510
Let's try that again.

00:25:40.460 --> 00:25:41.890
Go back.

00:25:41.920 --> 00:25:42.890
Oh, I stopped.

00:25:42.900 --> 00:25:43.740
I stopped running it.

00:25:43.740 --> 00:25:45.710
Let's try that once more.

00:25:47.590 --> 00:25:50.560
Find nearby parks.

00:25:50.570 --> 00:25:53.300
And actually, of course,
this is what we were expecting.

00:25:53.320 --> 00:25:57.260
After all, our user was saying that
it doesn't work in France.

00:25:57.260 --> 00:26:00.250
And that's kind of odd,
because if we look at the map here,

00:26:00.270 --> 00:26:04.180
you can see that from
the device's perspective,

00:26:04.190 --> 00:26:09.300
from the simulator's perspective,
we're definitely there in

00:26:09.740 --> 00:26:13.180
France if we zoom in far enough.

00:26:13.290 --> 00:26:16.840
So the device says that we're in France,
and we think we have data coverage there,

00:26:16.880 --> 00:26:18.980
but it's just not showing up.

00:26:19.360 --> 00:26:21.300
And so I want to try,
I'm just going to go

00:26:21.300 --> 00:26:22.200
into the simulator here.

00:26:22.200 --> 00:26:28.540
Well, you know, does it work in, say,
Tokyo?

00:26:29.010 --> 00:26:30.500
So it's working now.

00:26:30.620 --> 00:26:33.000
So it looks like our
Tokyo support works fine.

00:26:33.000 --> 00:26:34.060
You can see that we're over there.

00:26:34.060 --> 00:26:38.270
So this really just appears
to be some problem with Paris.

00:26:39.120 --> 00:26:39.750
So why is that?

00:26:39.890 --> 00:26:46.220
Well, let's first of all set our
location back to Paris here.

00:26:46.310 --> 00:26:48.660
Reload, and it's not coming up.

00:26:49.010 --> 00:26:53.020
So let's go back to the code
here and see exactly how it's

00:26:53.100 --> 00:26:56.900
determining which parks are nearby.

00:26:56.970 --> 00:26:58.590
And going back to the
same delegate method,

00:26:58.600 --> 00:27:02.040
which is what happens when
the user selects a row,

00:27:02.240 --> 00:27:05.760
it essentially calls a method
that eventually determines

00:27:06.580 --> 00:27:08.480
where the nearest parks are.

00:27:08.530 --> 00:27:10.330
So let's just go there.

00:27:11.080 --> 00:27:14.830
And so when we get a location,
I'm stashing it away.

00:27:15.230 --> 00:27:17.710
And as I mentioned earlier,
I'm essentially looking up

00:27:17.760 --> 00:27:20.980
stuff in this index plist,
which then goes in forwards to one of

00:27:20.980 --> 00:27:24.690
these appropriate ones that contains
parks for an appropriate area.

00:27:25.440 --> 00:27:29.570
So if we go back here,
we're opening the index plist,

00:27:29.590 --> 00:27:32.890
and then we are enumerating through it.

00:27:33.030 --> 00:27:36.130
So let me just set a break
point here to try and see what's

00:27:36.130 --> 00:27:38.220
going on when I tap that button.

00:27:38.710 --> 00:27:41.750
So I click there, and we're stopping.

00:27:41.790 --> 00:27:43.140
We've stopped here.

00:27:43.220 --> 00:27:51.600
And I want to see-- let me just zoom
in here and make this a little bigger.

00:27:51.640 --> 00:27:53.240
Let's see.

00:27:53.300 --> 00:27:56.000
This will be fine.

00:27:56.000 --> 00:27:56.000
I just want to see--

00:27:57.470 --> 00:28:00.350
What we're seeing in this indexed plist.

00:28:00.430 --> 00:28:03.100
And so if I zoom in here, sorry,
it's a little hard to see.

00:28:03.150 --> 00:28:05.800
I can see that this
plist has three entries,

00:28:06.070 --> 00:28:08.040
Paris, San Francisco, and Tokyo.

00:28:08.340 --> 00:28:11.140
The one thing you notice here is it looks
like we've got a typo in this plist.

00:28:11.140 --> 00:28:14.230
So Paris is spelled wrong,
and so then tries to look up that plist,

00:28:14.350 --> 00:28:16.470
and so it's just not working.

00:28:16.900 --> 00:28:21.030
So what I'm going to do is I'm
going to go to my index.plist,

00:28:21.030 --> 00:28:26.800
just adjust this name here,
and rerun my application

00:28:26.800 --> 00:28:28.700
with that changed.

00:28:30.860 --> 00:28:35.190
All right, if we look at the map,
we are once again in France.

00:28:35.320 --> 00:28:36.360
I'm going to say find nearby.

00:28:36.560 --> 00:28:37.500
Still my break point here.

00:28:37.500 --> 00:28:38.280
Let's just get rid of that.

00:28:38.350 --> 00:28:40.450
And you can see that
I'm now getting results.

00:28:40.460 --> 00:28:43.240
So by being able to
specify a custom location,

00:28:43.380 --> 00:28:47.080
I was quickly able to get into
the environment of my user.

00:28:47.080 --> 00:28:49.710
And again,
while this seems like a somewhat

00:28:49.710 --> 00:28:52.880
trivial mistake to make,
those sorts of mistakes happen.

00:28:52.880 --> 00:28:57.680
And testing is the best way to get
past them and figure out exactly what's

00:28:57.680 --> 00:29:00.340
going on in our user's environment.

00:29:01.950 --> 00:29:03.340
So we're up to four stars.

00:29:03.340 --> 00:29:05.340
We're getting closer.

00:29:05.370 --> 00:29:08.170
We've got one more review to deal with.

00:29:08.780 --> 00:29:13.740
We've got a user who uses your
application in the subway who is just

00:29:13.740 --> 00:29:17.010
complaining that it can't find them.

00:29:17.650 --> 00:29:21.660
And this happens a lot more
often than I think we realize.

00:29:22.030 --> 00:29:27.590
People use iPhones and iPads and iPod
Touch devices in all sorts of locations.

00:29:27.800 --> 00:29:30.590
They use them in rural areas,
they use them under open skies,

00:29:30.920 --> 00:29:32.870
they use them in dense
urban environments,

00:29:32.870 --> 00:29:34.540
which are challenging for GPS.

00:29:34.680 --> 00:29:39.250
They use them underground,
in underground parking lots,

00:29:39.310 --> 00:29:42.680
in places that may not
have cell coverage,

00:29:42.680 --> 00:29:44.820
may not have Wi-Fi,
or may not have the ability to get GPS.

00:29:45.190 --> 00:29:49.940
So it's important to remember that
not all devices have a GPS receiver,

00:29:49.940 --> 00:29:50.710
for one.

00:29:51.020 --> 00:29:54.020
While all of our iPhone devices,
since the iPhone 3G,

00:29:54.090 --> 00:29:57.860
as well as our 3G-enabled
iPad devices do,

00:29:57.870 --> 00:30:02.050
the Wi-Fi-only iPads and our
iPod Touch devices do not.

00:30:02.520 --> 00:30:05.610
And even for those that do,
GPS will not be available.

00:30:05.760 --> 00:30:10.370
So it's important not to make assumptions
about the accuracy of positions that

00:30:10.370 --> 00:30:12.830
your application is going to receive.

00:30:12.860 --> 00:30:16.660
And where this manifests
itself most often,

00:30:16.670 --> 00:30:18.920
where we see it,
is in applications that are really

00:30:18.920 --> 00:30:20.560
trying to get the best position possible.

00:30:20.560 --> 00:30:23.510
And so what they do is they
start updating locations,

00:30:23.580 --> 00:30:26.450
they get a location back,
and they just discard locations that

00:30:26.550 --> 00:30:29.320
they don't think are good enough,
and they wait and wait and wait and wait.

00:30:30.200 --> 00:30:33.100
The problem is that you
could end up waiting forever.

00:30:33.100 --> 00:30:37.990
So the best applications function
with less accurate positions.

00:30:38.000 --> 00:30:39.030
They do the best they can.

00:30:39.040 --> 00:30:43.190
And if they really, really need a good,
a really accurate location

00:30:43.190 --> 00:30:47.110
in order to function,
you know, think about maybe turn-by-turn

00:30:47.110 --> 00:30:49.190
navigation apps or fitness apps.

00:30:49.200 --> 00:30:53.190
They let the user know about the problem,
at least, so that they're aware of it.

00:30:55.630 --> 00:31:00.450
So in order to kind of see what's
going on in this particular example,

00:31:00.480 --> 00:31:04.100
we're going to use a tool
called UI automation.

00:31:04.690 --> 00:31:10.110
So UI automation is a framework that
allows you to create repeatable,

00:31:10.170 --> 00:31:13.060
automated tests of your application.

00:31:13.070 --> 00:31:15.590
It's called UI automation,
so one of the main things it can

00:31:15.720 --> 00:31:19.280
do is test your user interface,
but it can actually do more than that.

00:31:19.320 --> 00:31:21.970
In iOS 5,
it can actually simulate changes

00:31:21.970 --> 00:31:23.760
in the device's location.

00:31:23.820 --> 00:31:26.540
The great thing about UI automation
is that it can do more than just

00:31:26.970 --> 00:31:28.660
simulate coordinate changes.

00:31:28.680 --> 00:31:32.310
It allows you control over all
aspects of the location that

00:31:32.310 --> 00:31:34.320
your application receives.

00:31:34.350 --> 00:31:38.500
The horizontal accuracy,
which is essentially how good

00:31:38.500 --> 00:31:40.360
of a position we think we have.

00:31:40.500 --> 00:31:44.480
The speed and course attributes,
if your application depends on those.

00:31:44.510 --> 00:31:49.200
The altitude and vertical accuracy,
if you depend on altitude information.

00:31:49.270 --> 00:31:53.760
How can you use this tool in order to
improve the quality of your application?

00:31:53.780 --> 00:31:56.280
Use it to test a variety of
different accuracies that

00:31:56.280 --> 00:31:58.000
your user is likely to see.

00:31:58.040 --> 00:32:00.710
Think about use cases
both common and uncommon.

00:32:00.950 --> 00:32:04.620
From there, you can come up with
kind of with test cases,

00:32:04.620 --> 00:32:08.400
and see how your application
performs in those environments.

00:32:08.840 --> 00:32:12.410
We provide these constants in
the Core Location Framework.

00:32:12.700 --> 00:32:16.380
They're called CL Location Accuracy
that are an indication of essentially,

00:32:16.600 --> 00:32:19.230
you would normally specify
them to say how accurate of a

00:32:19.230 --> 00:32:21.270
position your application desires.

00:32:21.280 --> 00:32:23.880
But these values are a good
start for testing kind of

00:32:23.880 --> 00:32:25.900
different accuracies of location.

00:32:25.940 --> 00:32:28.280
So maybe test one with
a 10-meter accuracy,

00:32:28.280 --> 00:32:31.580
100-meter accuracy, kilometer,
three kilometers.

00:32:31.580 --> 00:32:36.020
But you know best the environments that
your users are likely to be in and what's

00:32:36.020 --> 00:32:38.340
most appropriate for your use case.

00:32:39.710 --> 00:32:41.530
And then finally,
it's important to test what happens

00:32:41.600 --> 00:32:44.200
when location isn't available at all.

00:32:44.200 --> 00:32:50.790
Because it will happen,
and it could be confusing

00:32:50.790 --> 00:32:50.790
if your application doesn't
respond to that appropriately.

00:32:51.190 --> 00:32:54.280
So I'm going to show you a demo
of how we can use UI automation

00:32:54.730 --> 00:32:57.540
to diagnose this user's issue.

00:32:57.690 --> 00:32:59.300
So we're back here.

00:32:59.450 --> 00:33:03.790
So as I said in the slides,
you actually access UI automation

00:33:04.100 --> 00:33:06.000
through instruments.

00:33:06.000 --> 00:33:07.230
You may be aware of instruments.

00:33:07.300 --> 00:33:11.120
It's a tool for doing all sorts
of performance analysis and

00:33:11.120 --> 00:33:15.340
profiling on your applications,
both for the Mac and for iOS.

00:33:15.430 --> 00:33:19.380
But on iOS, we have what's called the
automation instrument.

00:33:19.630 --> 00:33:21.660
So I'm going to choose that.

00:33:21.800 --> 00:33:24.580
And essentially what
this allows us to do,

00:33:24.580 --> 00:33:33.140
it allows us to essentially run repeated
automated tests against our application,

00:33:33.200 --> 00:33:36.450
and then define pass
and failure criteria.

00:33:36.660 --> 00:33:39.440
Now before I start showing
you the location features,

00:33:39.480 --> 00:33:41.800
in order to just show you how
easy it can be to get a basic

00:33:41.910 --> 00:33:44.490
test script up and running,
I'm actually going to show you

00:33:44.620 --> 00:33:48.530
how you can do recording of the
interaction that you make with the

00:33:48.530 --> 00:33:54.570
application's user interface and then
use that as a basis for a test to run.

00:33:54.580 --> 00:33:57.420
So I'm going to hit this
Record button at the bottom here.

00:33:57.420 --> 00:33:59.230
It's reminding me I need to set a target.

00:33:59.460 --> 00:34:03.720
So I'm going to choose my
simulation demo application.

00:34:03.760 --> 00:34:08.590
And I'm going to make sure it's
launched using the 5.0 SDK.

00:34:09.680 --> 00:34:11.220
All right, so I run it.

00:34:11.520 --> 00:34:13.660
And so I'm just going to,
just as an example,

00:34:13.740 --> 00:34:16.700
click around to a few screens here.

00:34:16.800 --> 00:34:19.540
And then I'm going to click
the Find Nearby Parks button.

00:34:19.540 --> 00:34:20.580
I'm going to tap a result.

00:34:20.580 --> 00:34:21.300
I get a map back.

00:34:21.460 --> 00:34:23.540
And I'm going to click Done.

00:34:24.460 --> 00:34:27.080
All right,
so going back to instruments here,

00:34:27.300 --> 00:34:28.660
I'm just going to stop recording.

00:34:28.730 --> 00:34:32.260
You can see that as I was clicking,
it was actually creating a

00:34:32.370 --> 00:34:35.610
template script to repeat
those same actions in a test.

00:34:35.760 --> 00:34:41.520
So these bubbles here essentially
represent suggestions of how I might

00:34:41.620 --> 00:34:43.600
create a script that does this.

00:34:43.600 --> 00:34:45.850
So for now,
just to show you how this can play back,

00:34:45.850 --> 00:34:48.740
I'm going to do what's called
flattening all the suggestions,

00:34:48.740 --> 00:34:51.230
which essentially
creates a normal script.

00:34:51.310 --> 00:34:55.880
And now I'm going to run the script.

00:34:56.940 --> 00:34:59.900
So, I'm going to show you
how to test the new app.

00:34:59.900 --> 00:35:02.850
So, I'm going to go to the app
and see how it plays back.

00:35:02.900 --> 00:35:05.900
So, it's running,
and you can see it's moving

00:35:05.940 --> 00:35:07.780
between screens just as I did.

00:35:08.040 --> 00:35:10.890
It taps the nearby parks button,
brings up a map,

00:35:10.900 --> 00:35:13.820
and it hits the done button in exactly
the same way that I did before.

00:35:13.900 --> 00:35:16.550
So, instead of having to write all
this code to try and create

00:35:16.680 --> 00:35:20.760
the scenario that you want,
you can just basically perform

00:35:21.240 --> 00:35:23.770
the scenario on the device,
sorry, or on the simulator,

00:35:24.550 --> 00:35:31.260
So what I'm also going to do is I have
this test that I've created here.

00:35:31.280 --> 00:35:33.220
I'm just going to use this as an example.

00:35:33.270 --> 00:35:35.830
So with UI automation,
what you can actually do is you

00:35:35.830 --> 00:35:40.900
can use the set location API in
order to set the device's position.

00:35:40.900 --> 00:35:44.000
And so this is a way of creating that
environment that you're looking for.

00:35:44.190 --> 00:35:47.020
So just to give you an example of this,
I've got a script that is setting

00:35:47.020 --> 00:35:50.260
the location to be a variety of
different positions around the world,

00:35:50.280 --> 00:35:56.200
having a bit of a delay between
them so that we can essentially

00:35:56.260 --> 00:35:57.920
see on the map as it moves around.

00:35:58.000 --> 00:36:00.660
And then finally at the end,
I'm setting the location to

00:36:00.660 --> 00:36:04.540
be a-- saying no location,
which essentially allows you to say,

00:36:04.540 --> 00:36:06.310
stop simulating.

00:36:06.760 --> 00:36:11.030
So this is my script,
and let's start running it.

00:36:11.430 --> 00:36:15.780
And if I go to the map here,
you can see I'm in San Francisco.

00:36:16.930 --> 00:36:19.290
It then moves over to Europe.

00:36:19.380 --> 00:36:22.240
I'm now, I believe that I'm in Paris.

00:36:22.330 --> 00:36:24.990
And it's moved over to the UK.

00:36:26.530 --> 00:36:29.840
And then, all right,
it's moved over to Japan.

00:36:29.960 --> 00:36:33.360
And then the last thing that it does
is it stops simulating locations.

00:36:33.460 --> 00:36:37.400
So in maps,
that's shown by using the gray dot.

00:36:37.400 --> 00:36:40.660
But so as you can see,
as the script actions execute,

00:36:40.800 --> 00:36:45.590
the position in the simulator and on
the device is changing in real time.

00:36:46.110 --> 00:36:47.750
So this is pretty powerful stuff.

00:36:47.860 --> 00:36:50.020
So how can we use this to
debug our user's problem,

00:36:50.020 --> 00:36:53.810
which again was they're in the subway,
and they're not getting

00:36:53.890 --> 00:36:55.400
a location at all.

00:36:55.770 --> 00:36:59.900
So I'm going to go to a different
script that I built here,

00:36:59.900 --> 00:37:03.020
and I'll go through it step by step.

00:37:03.770 --> 00:37:05.700
So the first thing I'm doing
is I'm going to simulate,

00:37:05.710 --> 00:37:07.300
first of all, being in Paris.

00:37:07.510 --> 00:37:09.660
So I've got set location.

00:37:09.710 --> 00:37:12.100
But you'll notice that I'm
using a different API here,

00:37:12.120 --> 00:37:14.260
and it's called set
location with options.

00:37:14.280 --> 00:37:18.330
And what this allows you to do is
to specify the other properties

00:37:18.330 --> 00:37:20.580
associated with the location.

00:37:20.670 --> 00:37:23.650
So in this case,
I've got the latitude and the longitude,

00:37:23.650 --> 00:37:27.190
but I'm also setting the
horizontal accuracy to be 1,000

00:37:27.190 --> 00:37:29.260
and the altitude to be 20 meters.

00:37:29.460 --> 00:37:33.700
But all of the properties on CL Location
Manager can be set through this API.

00:37:34.810 --> 00:37:37.630
What I'm going to do after
that is I'm going to tap the

00:37:37.730 --> 00:37:41.060
Nearby button in the tab bar.

00:37:41.070 --> 00:37:43.890
I'm going to tap the Find Nearby Parks.

00:37:43.990 --> 00:37:45.500
I'm going to make sure it's visible,
and I'm going to tap it.

00:37:45.770 --> 00:37:49.430
And then if you look here,
what this is going to do is it's going

00:37:49.530 --> 00:37:54.370
to take a look at the table view that's
present and make sure that there is

00:37:54.370 --> 00:37:57.310
more than one cell in that table view.

00:37:58.550 --> 00:38:01.390
Now, if we go back to the application,
if we look at this,

00:38:01.390 --> 00:38:04.460
there's always going to be
one cell in that table view,

00:38:04.460 --> 00:38:06.240
and that's essentially the
Find Nearby Parks button.

00:38:06.240 --> 00:38:09.020
So in order for there to be a result,
we just want to make sure that

00:38:09.020 --> 00:38:10.840
something comes up in this situation.

00:38:10.860 --> 00:38:14.100
So if there's less than
or equal to one row,

00:38:14.100 --> 00:38:19.200
then we're going to fail the
test with uialogger.fail saying,

00:38:19.200 --> 00:38:20.720
hey, we didn't find any results.

00:38:20.820 --> 00:38:21.520
What's up with that?

00:38:21.970 --> 00:38:23.640
Otherwise,
we're going to record this as a pass.

00:38:23.640 --> 00:38:26.470
So let's see what this can do.

00:38:26.600 --> 00:38:27.860
I'm going to...

00:38:29.750 --> 00:38:32.460
Run it.

00:38:32.500 --> 00:38:35.410
And just get it starting so
it's making sure it's visible.

00:38:35.560 --> 00:38:39.040
It taps the nearby parks button,
but nothing comes up.

00:38:39.410 --> 00:38:41.220
And if we look here,
we can see that this was

00:38:41.270 --> 00:38:43.300
recorded as a test failure.

00:38:43.310 --> 00:38:46.970
And if we click on it,
you can see where it was.

00:38:47.740 --> 00:38:50.500
So, one other cool thing is you
can see it actually recorded a

00:38:50.500 --> 00:38:54.190
screenshot of what the screen
looked like when the test failed.

00:38:54.620 --> 00:38:59.810
Now, but if we go to the map,
you can see that, I mean,

00:39:00.170 --> 00:39:03.380
We're in Europe, we're in Paris,
and if we actually zoom

00:39:03.380 --> 00:39:12.400
in far enough here,
you can see the accuracy ring around

00:39:12.570 --> 00:39:12.570
the position showing that this is in
fact a one kilometer accurate position.

00:39:12.830 --> 00:39:16.020
So something has gone wrong here,
because we can see it on Maps,

00:39:16.130 --> 00:39:18.700
but we cannot see it when
we go and tap this button.

00:39:18.780 --> 00:39:21.200
And now that I'm in this scenario,
I can do the same thing,

00:39:21.410 --> 00:39:22.290
and it's not there.

00:39:23.160 --> 00:39:27.090
So, in order to debug this problem,
I'm just going to stop

00:39:27.160 --> 00:39:29.360
my simulation here,
my running of a test.

00:39:29.500 --> 00:39:33.430
I'm going to go back to my view
controller and see what's going on.

00:39:33.960 --> 00:39:38.380
And the best place to start is
essentially I'm going to set a

00:39:38.380 --> 00:39:43.630
breakpoint right in my location manager,
did update to location,

00:39:43.770 --> 00:39:45.640
from location delegate callback.

00:39:45.740 --> 00:39:48.360
So I want to see what happens there.

00:39:48.830 --> 00:39:51.860
and I'm going to -- actually,
I don't know if I can set a breakpoint

00:39:51.860 --> 00:39:53.420
while running it from instruments.

00:39:53.420 --> 00:39:57.090
One thing you'll notice here is that,
that I want to -- that is probably

00:39:57.090 --> 00:40:00.350
the source of our problems,
is that in this delegate method,

00:40:00.470 --> 00:40:05.420
we are actually checking the
horizontal accuracy on the position.

00:40:05.590 --> 00:40:09.780
And we want to make sure it's at least
-- it's a hundred meters or better.

00:40:09.900 --> 00:40:11.410
And in most environments,
or in environments

00:40:11.410 --> 00:40:14.180
where you've got a GPS,
that's going to work out really well.

00:40:14.340 --> 00:40:16.940
But the problem is that if the
user is in one of these challenging

00:40:16.970 --> 00:40:19.640
positioning environments,
they may never get a hundred

00:40:19.640 --> 00:40:21.020
meter accurate position.

00:40:21.170 --> 00:40:23.840
And so your application
will just never process that

00:40:23.880 --> 00:40:25.820
location and won't do anything.

00:40:25.950 --> 00:40:30.610
So it's probably not a good
idea to just throw out positions

00:40:30.660 --> 00:40:34.020
unilaterally based on their accuracy.

00:40:34.150 --> 00:40:36.210
It's probably smarter
to do something like,

00:40:36.210 --> 00:40:40.420
say,
set a timer to indicate to the user that,

00:40:40.510 --> 00:40:43.420
after a certain period of time,
that their position could be determined,

00:40:43.520 --> 00:40:46.760
or wait a certain period of time,
and then once that time is up,

00:40:46.760 --> 00:40:50.030
take the best position,
that is available.

00:40:50.450 --> 00:40:54.490
But what I'm going to do right now is I'm
just going to get rid of that code there.

00:40:54.810 --> 00:41:01.090
And I'm just going to just build it,
make sure it builds an Xcode.

00:41:01.290 --> 00:41:04.070
And then I'm going to
run my script again.

00:41:04.150 --> 00:41:06.200
So same script.

00:41:06.210 --> 00:41:07.770
I'm going to run it.

00:41:07.810 --> 00:41:09.340
It taps the nearby parks.

00:41:09.370 --> 00:41:11.690
And this time I got results.

00:41:12.150 --> 00:41:13.810
And if you look here,
you can see that it says

00:41:13.920 --> 00:41:16.300
successfully found a result,
and that was marked as

00:41:16.310 --> 00:41:17.600
a pass in the script.

00:41:17.670 --> 00:41:20.390
Now, I mentioned earlier that it's
probably not the best idea to

00:41:20.470 --> 00:41:24.790
throw positions away entirely,
but you may want to essentially continue

00:41:24.790 --> 00:41:27.520
trying for a certain period of time.

00:41:27.680 --> 00:41:31.050
So what I'm going to do
is in my location manager,

00:41:31.050 --> 00:41:34.310
did update to location -- sorry,
in my callback where

00:41:34.420 --> 00:41:37.400
I'm starting location,
my mistake,

00:41:38.180 --> 00:41:40.430
Essentially,
when the user taps that button,

00:41:40.490 --> 00:41:43.280
right now I'm just calling
start updating location.

00:41:43.350 --> 00:41:51.790
But what I want to do to make sure
that I don't run forever is I'm

00:41:51.790 --> 00:41:51.790
actually going to set a timer to stop
it after a certain period of time.

00:41:52.030 --> 00:41:54.950
Now, there are a number of different
ways that you can do this.

00:41:54.950 --> 00:41:58.090
I'm actually going to use what's
called a dispatch timer to show you

00:41:58.090 --> 00:41:59.900
a bit of Grand Central Dispatch.

00:42:00.010 --> 00:42:02.600
And what this is doing is
it's going to basically say,

00:42:02.700 --> 00:42:06.180
after some period of time,
and what this code is saying

00:42:06.180 --> 00:42:10.660
is 10 seconds from now,
so in 10 seconds, execute this block of

00:42:10.790 --> 00:42:14.870
code on the main queue,
so that will execute on the main thread.

00:42:15.510 --> 00:42:20.150
And so then, if that happens,
what I'm going to do is I'm

00:42:20.150 --> 00:42:22.840
going to stop updating location.

00:42:22.870 --> 00:42:26.720
And if no location was found at all,
then I'm going to pop

00:42:26.720 --> 00:42:28.580
up an alert to the user.

00:42:29.340 --> 00:42:33.440
So what I'm actually going to do
here is I'm just going to modify

00:42:33.440 --> 00:42:37.560
this scheme here for a second so that
it doesn't have any location at all.

00:42:37.810 --> 00:42:39.750
So I select none there.

00:42:40.220 --> 00:42:43.310
And now let's see what happens
with this modified application.

00:42:43.410 --> 00:42:45.210
We're going to launch it.

00:42:45.720 --> 00:42:47.930
I'm going to tap Find Nearby Parks.

00:42:47.970 --> 00:42:48.960
It still found me a park.

00:42:49.040 --> 00:42:50.750
That's interesting.

00:42:52.080 --> 00:42:53.370
Well,
you'll just have to take my word for

00:42:53.610 --> 00:42:57.330
it that if I were to-- all right,
here we go.

00:42:57.420 --> 00:42:59.600
It's going to run for 10 seconds.

00:42:59.720 --> 00:43:04.470
You can see the icon on the status
bar indicating that it's still going.

00:43:06.130 --> 00:43:09.880
If we let our 10 seconds come up,
it then stops.

00:43:10.070 --> 00:43:13.720
So that's one way that you can
basically set a timer when it expires,

00:43:13.720 --> 00:43:16.110
call stop updating location.

00:43:16.500 --> 00:43:18.190
So we've addressed this user's concern.

00:43:18.330 --> 00:43:23.540
Now, even with inaccurate positions,
the application works as we would expect.

00:43:23.660 --> 00:43:25.280
All right, so we're up to five stars.

00:43:25.430 --> 00:43:26.000
We made it.

00:43:26.150 --> 00:43:29.320
We've identified three major
problems with our application,

00:43:29.440 --> 00:43:34.960
and we used each one of the new tools in
iOS 5 to find the problem and to fix it,

00:43:35.080 --> 00:43:38.220
all without ever having to get in a car.

00:43:38.790 --> 00:43:40.930
Now,
there are a few other things that I want

00:43:40.940 --> 00:43:43.750
to tell you about in the simulator.

00:43:43.980 --> 00:43:46.680
We've added support for
background location services.

00:43:46.770 --> 00:43:50.150
So if you run an application or you
have an application that uses location

00:43:50.150 --> 00:43:53.520
even while it's in the background,
that will now work in the simulator in

00:43:53.520 --> 00:43:55.420
the same way that it would on the device.

00:43:55.420 --> 00:43:59.160
So you can move your application to
the background and continue to get

00:43:59.160 --> 00:44:02.890
updates as long as you've got the
key in your Info.plist and you've

00:44:02.890 --> 00:44:06.690
started location updates in the same
way that it does on iOS devices.

00:44:07.360 --> 00:44:10.450
As well, our two other background
location services,

00:44:10.520 --> 00:44:14.350
our Significant Location Change API,
as well as our Region Monitoring API,

00:44:14.740 --> 00:44:17.500
both also work in the
simulator and are testable.

00:44:17.500 --> 00:44:20.310
And I just want to give you a
quick demo of region monitoring

00:44:20.310 --> 00:44:22.000
to show you that that can work.

00:44:22.020 --> 00:44:24.790
Like I showed you briefly before,
we have,

00:44:24.790 --> 00:44:28.380
when I tap on one of these results,
I have this button that

00:44:28.380 --> 00:44:30.360
basically says Remind Me.

00:44:30.360 --> 00:44:34.770
And it's going to remind me when
I get close to this particular park.

00:44:34.820 --> 00:44:37.340
Now, I'm going to show you a little bit
of a demo of what that looks like.

00:44:37.360 --> 00:44:40.410
This is just kind of a basic example,
but there are a lot of different use

00:44:40.500 --> 00:44:42.320
cases for doing something similar.

00:44:42.320 --> 00:44:44.940
Maybe not with parks,
but maybe with locations that

00:44:44.940 --> 00:44:46.780
the user is more interested in.

00:44:46.800 --> 00:44:48.090
So I've got that set.

00:44:49.460 --> 00:44:52.510
Now, in my code,
I've got it set to pop up an alert

00:44:52.510 --> 00:44:55.680
view whenever I get the region
entered callback to say that

00:44:55.680 --> 00:44:56.750
I'm getting close to that park.

00:44:56.800 --> 00:45:01.400
So what I'm going to do is I'm
actually going to quit the simulator.

00:45:01.590 --> 00:45:05.240
And I'm going to use my
GoldenGate Park scheme.

00:45:05.350 --> 00:45:07.260
And if I edit the scheme,
you can actually see that I'm

00:45:07.260 --> 00:45:09.530
using this GoldenGatePark.gpx file.

00:45:09.920 --> 00:45:14.280
So I specified essentially a
custom scenario that I want to use.

00:45:14.430 --> 00:45:16.180
And if we just take a
quick look at this file,

00:45:16.280 --> 00:45:19.290
it's essentially a list of
latitudes and longitudes.

00:45:19.480 --> 00:45:22.940
So basically it goes through
them one after the other.

00:45:23.030 --> 00:45:28.060
And then that's what -- those are the
locations that your API will receive.

00:45:28.170 --> 00:45:30.420
So I'm going to run this application.

00:45:31.410 --> 00:45:35.860
And you'll notice that because I've added
essentially a region to be monitored,

00:45:35.860 --> 00:45:38.770
the location icon is still
present in the status bar.

00:45:38.930 --> 00:45:41.980
And so if we take a look at the map here,

00:45:42.520 --> 00:45:44.230
We zoom in far enough.

00:45:44.340 --> 00:45:46.640
You can see my current location.

00:45:46.800 --> 00:45:49.200
And you can see that the
location is actually moving.

00:45:49.290 --> 00:45:54.430
And it's doing that based on these
points that I had defined in that file.

00:45:54.430 --> 00:45:58.400
So basically it goes through them
one after another after another.

00:45:58.500 --> 00:46:01.160
And so we move closer
and closer to the park.

00:46:01.190 --> 00:46:03.710
It essentially goes in a loop.

00:46:05.200 --> 00:46:09.030
And you'll see we got close enough,
and my code that triggered an

00:46:09.030 --> 00:46:11.260
alert on that event came through.

00:46:11.420 --> 00:46:18.870
So this allows you to define scenarios
that allow you to test even all of

00:46:19.250 --> 00:46:23.590
our background location services,
region monitoring

00:46:23.590 --> 00:46:23.590
significant location change,
as well as just the background

00:46:23.590 --> 00:46:23.590
location API in general.

00:46:24.780 --> 00:46:25.700
All right.

00:46:25.720 --> 00:46:27.970
If you'd like more information on
any of what we've talked about,

00:46:28.000 --> 00:46:30.900
any of these tools,
or having trouble getting up and running,

00:46:30.960 --> 00:46:33.450
I'd highly encourage you
to contact Vicki Murley,

00:46:33.480 --> 00:46:35.760
who is our evangelist,
and she'd love to help

00:46:35.760 --> 00:46:37.280
you with this information.

00:46:37.450 --> 00:46:41.830
In terms of documentation,
we have our regular core location

00:46:41.830 --> 00:46:46.530
and location awareness documentation,
as well as a great UI automation

00:46:47.210 --> 00:46:50.100
reference collection that's
available on the web.

00:46:50.100 --> 00:46:50.100
And the developer forums
are always a good bet.

00:46:50.260 --> 00:46:53.330
It's Friday,
so there aren't too many sessions left,

00:46:53.500 --> 00:46:57.070
but if you want kind of a broader
perspective on what it means to

00:46:57.080 --> 00:47:00.980
build a really solid application,
I'd highly recommend this session,

00:47:01.050 --> 00:47:02.870
which is coming up at 11:30.

00:47:03.960 --> 00:47:06.320
So to sum up, testing is hard.

00:47:06.360 --> 00:47:08.660
It's not an easy thing to do
or we'll be doing more of it,

00:47:08.740 --> 00:47:10.080
but it pays off.

00:47:10.350 --> 00:47:11.690
It's worth it.

00:47:12.070 --> 00:47:15.620
It's worth it because your users
will notice and they will tell

00:47:15.620 --> 00:47:17.640
you if things aren't working.

00:47:17.740 --> 00:47:20.350
We've added three tools,
or added support to three tools,

00:47:20.520 --> 00:47:23.900
to the iOS simulator, to Xcode,
and to UI automation that are

00:47:24.050 --> 00:47:27.190
complementary to each other and
together form a comprehensive way

00:47:27.600 --> 00:47:31.240
for you to get the test coverage that
you need to make sure that your users

00:47:31.240 --> 00:47:33.780
will be able to use your application.

00:47:33.780 --> 00:47:37.000
One note, though,
always make sure that you do

00:47:37.000 --> 00:47:38.980
some testing on a real device.

00:47:39.310 --> 00:47:42.420
The simulator is great, and with iOS 5,
we've made it closer to

00:47:42.420 --> 00:47:46.520
what a device should be,
but it's always important to do

00:47:46.630 --> 00:47:49.440
the testing on that hardware,
even if only to get a sense

00:47:49.440 --> 00:47:53.390
of the real conditions that
your users are likely to see.

00:47:53.990 --> 00:47:56.050
And if you've done all this,
you've used these tools,

00:47:56.210 --> 00:47:58.060
you've found your issues,
you've debugged them,

00:47:58.200 --> 00:48:00.240
there's only one thing left to do,
which is to wait for

00:48:00.390 --> 00:48:01.250
the reviews to come in.

00:48:01.250 --> 00:48:03.140
Your users will love your application.