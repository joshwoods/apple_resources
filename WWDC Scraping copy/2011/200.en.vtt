WEBVTT

00:00:09.600 --> 00:00:10.860
Good morning.

00:00:10.860 --> 00:00:16.260
Thank you for joining me this morning,
bright and early.

00:00:16.260 --> 00:00:17.310
My name is Brett Halle.

00:00:17.310 --> 00:00:19.860
I'm the Senior Director of
Engineering responsible for

00:00:19.990 --> 00:00:22.940
Kernel and Networking Technology.

00:00:22.940 --> 00:00:25.710
Today I want to spend a few minutes and
chat with you a little bit about some

00:00:25.710 --> 00:00:31.580
of the new features and capabilities
we've put in Lion and iOS 5 as well as

00:00:31.580 --> 00:00:37.100
talk about some of the key principles
that you'll need to be thinking about

00:00:37.100 --> 00:00:39.900
as you're writing the next great app.

00:00:39.900 --> 00:00:43.420
So first I think it's worth
kind of putting ourselves in the

00:00:43.420 --> 00:00:46.950
right context that networking
has really been part of the human

00:00:47.320 --> 00:00:49.010
experience for quite a while now.

00:00:49.010 --> 00:00:52.840
Whether you go back to something
as archaic as the telegraph,

00:00:52.840 --> 00:00:57.240
you still dealt with many of the
same challenges and problems.

00:00:57.240 --> 00:00:59.410
It still was never fast enough.

00:00:59.410 --> 00:01:02.260
You had to deal with compression of data.

00:01:02.260 --> 00:01:04.540
You had to deal with data loss.

00:01:04.540 --> 00:01:09.050
You had to deal with latency issues
and being charged by the byte.

00:01:09.050 --> 00:01:12.550
The problems were very,
very similar then as they are now.

00:01:12.550 --> 00:01:15.420
Just the scale has changed.

00:01:15.420 --> 00:01:18.020
Certainly networking from the
perspective that we care about

00:01:18.160 --> 00:01:22.120
really started in the '70s,
certainly in the creation of

00:01:22.220 --> 00:01:26.110
Unix and certainly BSD and
sockets and other things.

00:01:26.510 --> 00:01:30.140
There was a lot of technology
that came together at that time,

00:01:30.280 --> 00:01:31.410
but it was all based on a model
that was based on the idea of the

00:01:31.550 --> 00:01:31.840
technology that we had at that time.

00:01:31.840 --> 00:01:35.470
It was a model where the
computers of that day were big.

00:01:35.470 --> 00:01:39.270
They took up large amounts of room,
big air conditioning,

00:01:39.500 --> 00:01:42.890
generators and other things
to help keep them alive,

00:01:43.170 --> 00:01:46.540
and a big coax cable coming
out of the back that ended

00:01:46.540 --> 00:01:48.760
up hooking into the network.

00:01:48.760 --> 00:01:51.590
There were lots of people who were
involved in administrating it and

00:01:51.590 --> 00:01:55.360
making it all work and dealing
with it when it didn't work right.

00:01:55.360 --> 00:01:59.120
It wasn't until the Macintosh
really that networking became

00:01:59.940 --> 00:02:01.420
manageable by mere humans.

00:02:01.420 --> 00:02:05.860
It was possible to hook up something
very easily using Apple Talk and

00:02:06.000 --> 00:02:09.270
hook a couple of computers or a set
of computers and printers and things

00:02:09.270 --> 00:02:13.780
together and not worry about things like
IP addresses and domain name registration

00:02:13.780 --> 00:02:15.600
or any of that kind of stuff.

00:02:15.600 --> 00:02:18.580
It was all about just hooking
the computers together and using

00:02:18.580 --> 00:02:21.760
them and taking advantage of
the services that were there.

00:02:21.790 --> 00:02:23.740
It was really remarkably easy.

00:02:23.740 --> 00:02:26.420
Not terribly fast, but remarkably easy.

00:02:26.420 --> 00:02:29.120
Along came the iMac,
and the real key advantage there

00:02:29.120 --> 00:02:33.160
was making the experience of
getting on the Internet easy.

00:02:33.160 --> 00:02:34.140
Remember the ads of the day?

00:02:34.140 --> 00:02:39.380
It was all about how quick you could
get from the box onto the Internet.

00:02:39.380 --> 00:02:42.060
If you remember,
the computers of the day,

00:02:42.080 --> 00:02:44.430
certainly in the PC world,
you had to deal with going out

00:02:44.460 --> 00:02:47.500
and buying a networking card
and dealing with configuring.

00:02:47.500 --> 00:02:50.620
I think there were things like
IRQs and all sorts of stuff that

00:02:50.710 --> 00:02:54.220
had to be configured and config
files and all sorts of stuff.

00:02:54.220 --> 00:02:56.470
The experience that we have has always,
of course,

00:02:56.470 --> 00:02:59.160
been about making that experience
easy and something that a user

00:02:59.160 --> 00:03:00.580
doesn't have to deal with.

00:03:00.580 --> 00:03:05.900
iPhone came around and fundamentally
changed the way we deal with the network.

00:03:05.900 --> 00:03:08.810
Up until that point,
things were remarkably static,

00:03:08.810 --> 00:03:12.490
but the iPhone has really changed
the way we experience the network.

00:03:12.490 --> 00:03:14.090
People take the Internet with them.

00:03:14.090 --> 00:03:15.120
It's in their pocket.

00:03:15.140 --> 00:03:17.080
They expect that experience.

00:03:17.080 --> 00:03:20.540
Certainly with the iPad,
not only do you get that experience,

00:03:20.540 --> 00:03:23.700
but you get a very immersive
multimedia experience to go with it.

00:03:23.800 --> 00:03:27.500
People expect the ability of streaming
video and being able to deal with

00:03:27.500 --> 00:03:29.510
things that are very interactive.

00:03:29.510 --> 00:03:32.780
That's all fine and interesting,
but the scope of this

00:03:32.830 --> 00:03:34.780
has grown dramatically.

00:03:34.780 --> 00:03:39.890
We're now dealing with hundreds of
millions of devices moving quickly

00:03:40.190 --> 00:03:42.770
towards billions of devices.

00:03:42.770 --> 00:03:46.790
When we started this little
exercise of networking,

00:03:46.790 --> 00:03:50.880
it was a few thousand maybe,
hundreds or thousands.

00:03:50.880 --> 00:03:54.660
We're now talking hundreds of
millions and billions of devices.

00:03:54.660 --> 00:03:57.190
It really proposes some
particularly interesting challenges.

00:03:57.190 --> 00:03:59.360
Today,
we're going to focus a little bit on

00:03:59.360 --> 00:04:04.600
the technology that all the networking
capability of our systems are based on.

00:04:04.600 --> 00:04:07.290
We're going to talk about
CoreOS networking in particular.

00:04:07.310 --> 00:04:10.340
This is where all the plumbing
is for networking and all

00:04:10.340 --> 00:04:12.120
the core capabilities are.

00:04:12.120 --> 00:04:16.720
This foundation is common,
is the same between iOS and MacÂ OS.

00:04:16.920 --> 00:04:19.480
It's actually the same
source code base that we use,

00:04:19.570 --> 00:04:20.720
the same engineers.

00:04:20.720 --> 00:04:23.740
We all build the same
technology in both these levels.

00:04:23.740 --> 00:04:27.920
The things that we're going to talk
about here really apply across the board.

00:04:27.920 --> 00:04:29.740
Certainly, the principles do.

00:04:29.760 --> 00:04:32.210
First, let's talk a little bit
about what features we've

00:04:32.210 --> 00:04:34.560
been adding to Lion and iOS.

00:04:34.560 --> 00:04:36.990
We've not really added IPv6.

00:04:36.990 --> 00:04:41.830
We actually put IPv6 in back in 10.1,
but you may have noticed,

00:04:41.840 --> 00:04:43.690
watched the news over
the past few months,

00:04:43.690 --> 00:04:47.550
that we've somehow or another
run out of IPv4 addresses,

00:04:47.550 --> 00:04:50.900
or at least kind of at the top level.

00:04:50.900 --> 00:04:53.810
The reality is it's not something to
panic about at this particular point,

00:04:53.810 --> 00:04:57.690
but it is becoming a bigger and
bigger issue that v4 address space

00:04:57.690 --> 00:05:02.350
is really running out very quickly
and that v6 is becoming more

00:05:02.350 --> 00:05:05.000
and more important by the day.

00:05:05.000 --> 00:05:10.480
You may be aware that tomorrow, in fact,
is v6 day, where a number of sites

00:05:10.670 --> 00:05:14.400
on the Internet will be
turning on v6 capability.

00:05:14.400 --> 00:05:17.600
It'll be interesting to
see how well that goes,

00:05:17.600 --> 00:05:18.900
that experiment.

00:05:19.000 --> 00:05:24.670
Again, we added v6 back in 10.1
and added support in iOS for

00:05:24.670 --> 00:05:28.900
mobile devices back in iOS 4.

00:05:28.900 --> 00:05:28.900
We've added a lot of support for
mobile devices back in iOS 4.

00:05:28.900 --> 00:05:33.920
We've added a lot of updates to this
code base with these releases coming up,

00:05:34.040 --> 00:05:40.360
particularly syncing up these code
bases with the latest from Kame and BSD.

00:05:40.360 --> 00:05:43.290
There's an enormous amount of
changes that came with that,

00:05:43.420 --> 00:05:47.350
support for a number of new features,
things like RFC 506,

00:05:47.350 --> 00:05:50.750
which allows for using
router advertisements to be

00:05:50.760 --> 00:05:55.200
able to get DNS information,
as well as support for things like

00:05:55.200 --> 00:05:58.480
DHCV v6 stateful and stateless.

00:05:58.480 --> 00:06:01.930
Stateful is DHCP like
you would expect for v4,

00:06:01.930 --> 00:06:05.840
where addresses are
vended out to the device.

00:06:05.840 --> 00:06:08.700
These are really only typically used
now in enterprise environments where

00:06:08.700 --> 00:06:10.700
they want to manage their devices.

00:06:10.700 --> 00:06:15.090
We also support DHCP v6 stateless,
which is just handing out of

00:06:15.090 --> 00:06:18.960
the ancillary information,
again, like DNS and other things that are

00:06:18.960 --> 00:06:21.970
used to help configure the device.

00:06:22.390 --> 00:06:26.080
For v6 configuration for most
people is dealt through the

00:06:26.080 --> 00:06:27.750
mechanism of router advertising.

00:06:27.840 --> 00:06:30.800
It's an awful lot easier to
deal with v6 configuration,

00:06:30.860 --> 00:06:33.940
but we've added ways to integrate
better into the enterprise

00:06:34.010 --> 00:06:35.500
and other environments.

00:06:37.920 --> 00:06:44.730
For v6 configuration for most
people is dealt through the

00:06:44.730 --> 00:06:48.960
mechanism of router advertising.

00:06:48.960 --> 00:06:55.570
It's an awful lot easier to
deal with v6 configuration,

00:06:55.620 --> 00:07:02.570
but we've added ways to integrate
better into the enterprise

00:07:02.570 --> 00:07:05.900
and other environments.

00:07:06.000 --> 00:07:09.270
so that you get anonymous connections.

00:07:09.850 --> 00:07:14.840
We've put a lot of work in the
plumbing for the system to support v6.

00:07:14.840 --> 00:07:19.160
Basically if you're using the
CF socket stream APIs or above,

00:07:19.160 --> 00:07:24.380
we'll take advantage of actually
picking the best route to use,

00:07:24.630 --> 00:07:28.570
whether v4 or v6,
based on a number of different

00:07:28.570 --> 00:07:33.430
statistical analysis things that we do
and performance analysis that we do for

00:07:33.430 --> 00:07:37.560
the connections so that we ensure that
we get the best connection v4 or v6.

00:07:37.660 --> 00:07:42.940
We don't specifically prioritize
v4 or v6 over the other,

00:07:42.940 --> 00:07:45.960
but rather actually look to see
which is the best connection.

00:07:45.960 --> 00:07:47.820
Why is this important?

00:07:47.820 --> 00:07:51.960
Because one of the challenges that
we see in v6 adoption is that there

00:07:51.960 --> 00:07:56.160
are a lot of places where while
you may have local v6 connectivity,

00:07:56.160 --> 00:08:00.310
somewhere along the way there's a
tunnel or other mechanisms that are in

00:08:00.390 --> 00:08:02.760
place that aren't working very well.

00:08:02.760 --> 00:08:06.700
They're either very slow
or they fail completely.

00:08:07.230 --> 00:08:10.570
And so using the mechanisms that
we've put into the system now,

00:08:10.650 --> 00:08:15.130
we can ensure that the user actually gets
the right experience regardless of the

00:08:15.130 --> 00:08:17.700
fact that infrastructure might be broken.

00:08:18.000 --> 00:08:21.200
There's also new APIs for
additional socket capabilities

00:08:21.200 --> 00:08:24.680
if you're writing to that level
of the system to take advantage

00:08:24.680 --> 00:08:27.020
of some V6 specific capabilities.

00:08:27.020 --> 00:08:30.040
And frankly,
we're feeling pretty comfortable

00:08:30.040 --> 00:08:33.560
about being completely
ready for V6 day tomorrow.

00:08:33.560 --> 00:08:38.680
Certainly I encourage you to try
out both Lion and iOS 5 for that.

00:08:38.700 --> 00:08:41.050
Another thing that we've been
working on is something we

00:08:41.050 --> 00:08:42.520
call Captive Network Support.

00:08:42.520 --> 00:08:47.020
Now this is something we actually
added a couple of releases ago to iOS.

00:08:47.660 --> 00:08:52.560
A captive network is something very
similar to what you see when you go

00:08:52.560 --> 00:08:56.860
to somewhere like Starbucks where
you connect to the Wi-Fi,

00:08:56.860 --> 00:09:00.200
you open your web browser,
and it comes up with a sheet

00:09:00.200 --> 00:09:04.030
that tells you to click OK to
accept the terms or maybe put in

00:09:04.140 --> 00:09:08.390
information in case it's a paid
Wi-Fi hotspot or something like that.

00:09:08.440 --> 00:09:14.080
These were designed for the experience
of a laptop where a business user

00:09:14.330 --> 00:09:17.420
would go somewhere like a hotel or
somewhere like a hotel and they would

00:09:17.420 --> 00:09:18.510
be able to access the information
or somewhere of that nature.

00:09:18.740 --> 00:09:21.040
They'd open it up and the first
thing that they would do would

00:09:21.040 --> 00:09:22.400
be to go to their web browser.

00:09:22.420 --> 00:09:28.240
The reality is with these mobile devices,
the web browser is most likely not the

00:09:28.240 --> 00:09:30.390
first connection point to the network.

00:09:30.460 --> 00:09:34.740
And the challenge with these
walled garden captive network

00:09:34.780 --> 00:09:38.620
environments is that for the user,
if they didn't go to the web browser,

00:09:38.630 --> 00:09:40.990
it would just sit there and
wait for them until they did.

00:09:41.040 --> 00:09:44.740
So we added the capability into the
system to detect when you're on a

00:09:44.740 --> 00:09:50.030
captive network and automatically
make the necessary decisions in terms

00:09:50.030 --> 00:09:54.230
of either automatically connecting
or bringing up a web sheet so that

00:09:54.390 --> 00:09:58.180
the user can interact as necessary
with the hotspot environment.

00:09:58.180 --> 00:10:00.620
We support a number of
different protocols,

00:10:00.720 --> 00:10:04.480
Whisper as well as EAP Sim and others,
depending on the

00:10:04.480 --> 00:10:05.890
environment that we're in.

00:10:05.940 --> 00:10:10.430
And the OS again is involved in
detecting these particular environments

00:10:10.740 --> 00:10:14.310
and will remember captive networks that
you've been to before and reconnect

00:10:14.400 --> 00:10:16.940
automatically the next time you go there.

00:10:16.940 --> 00:10:21.600
Support for this is now on Lion and
brings parity between Lion and iOS.

00:10:21.700 --> 00:10:26.840
We also added support
back in iOS 4 for SSL VPN.

00:10:27.280 --> 00:10:33.700
There's basically a significant amount of
OS level plumbing support to support this

00:10:33.700 --> 00:10:37.930
that we put in and we now have a number
of clients that are available on iOS,

00:10:38.220 --> 00:10:40.600
Cisco, Juniper and F5 in particular.

00:10:40.890 --> 00:10:45.980
Each of them provides their own
unique vendor specific feature set.

00:10:46.700 --> 00:10:48.780
Other clients are available
via the App Store.

00:10:48.940 --> 00:10:53.410
This plumbing is now
available on Lion as well.

00:10:54.300 --> 00:15:04.300
[Transcript missing]

00:15:04.790 --> 00:15:07.900
The area where I think that's most
interesting and certainly applies to

00:15:07.900 --> 00:15:09.700
everyone here is in the tool space.

00:15:09.700 --> 00:15:13.570
We've added a number of tools for you to
take advantage of to make your network

00:15:13.570 --> 00:15:15.600
experience and development better.

00:15:15.700 --> 00:15:17.680
One of the first ones is NetTop.

00:15:17.700 --> 00:15:21.580
I'm sure all of you are familiar
with using Top at the command line.

00:15:21.790 --> 00:15:24.900
You bring it up and you can get
a reasonably good idea of what

00:15:25.070 --> 00:15:28.700
processes are running on your system,
potentially how memory is being used,

00:15:28.850 --> 00:15:31.480
how Mach ports and
other things like that,

00:15:31.480 --> 00:15:33.540
resources are being consumed.

00:15:33.700 --> 00:15:37.840
We've ended up creating a tool
for NetTop to be able to do

00:15:37.840 --> 00:15:41.700
that kind of analysis as well
for your network experience.

00:15:41.700 --> 00:15:44.180
So you bring this up,
it'll show you all the connections

00:15:44.270 --> 00:15:47.160
that are currently active,
it'll show you a sense of what kind

00:15:47.160 --> 00:15:50.070
of traffic activity is going on,
when the new connections

00:15:50.150 --> 00:15:53.380
are being established,
so that you can see in real

00:15:53.380 --> 00:15:57.630
time what's going on during
different kinds of operations.

00:15:57.690 --> 00:16:00.960
It can be very,
very helpful to you to run NetTop and

00:16:00.960 --> 00:16:05.700
then run your application and see what's
actually going on and that the things

00:16:05.800 --> 00:16:10.610
that you're expecting to get opened up
and connected to are actually occurring.

00:16:11.470 --> 00:16:15.000
Another very important tool is
the Network Link Conditioner.

00:16:15.070 --> 00:16:21.070
The Link Conditioner is a tool you run
online which helps simulate real-world

00:16:21.070 --> 00:16:24.400
customer environments for networking.

00:16:24.400 --> 00:16:28.990
And what it does is it puts in
place basically in line to the

00:16:28.990 --> 00:16:33.080
networking stack either delays,
dropouts,

00:16:33.080 --> 00:16:38.340
other things to help simulate when
the user is out in the real world.

00:16:38.430 --> 00:16:41.470
Typically,
we all have great connections when we're

00:16:41.470 --> 00:16:42.920
working and developing our software.

00:16:43.070 --> 00:16:45.890
Certainly at Apple,
we have an awesome network.

00:16:46.050 --> 00:16:50.420
The challenge is that's really not the
network our end users are dealing with.

00:16:50.490 --> 00:16:53.520
Most likely, they're in a situation,
even like here,

00:16:53.520 --> 00:16:56.670
where there's a lot of people
competing for a limited resource,

00:16:56.670 --> 00:16:59.700
where there may be bad
connectivity or no connectivity.

00:16:59.760 --> 00:17:04.640
And that can be very difficult to
deal with when you're writing your

00:17:04.640 --> 00:17:07.880
software because you're writing
in this perfect environment.

00:17:08.100 --> 00:17:10.800
The Network Link Conditioner
allows you to select through

00:17:10.800 --> 00:17:18.470
pre-built profiles things like DSL,
Edge, 3G, and that the apps that then run

00:17:18.470 --> 00:17:23.180
during that will behave as though
you were on that kind of network,

00:17:23.480 --> 00:17:27.810
either with delays and latency or, again,
packet drops or other things so

00:17:27.810 --> 00:17:31.270
that you can make sure that your
application does the right thing.

00:17:31.280 --> 00:17:35.690
If you're writing an iOS application,
you can also use this particular

00:17:35.690 --> 00:17:37.320
tool in the simulator.

00:17:37.320 --> 00:17:41.620
It's a great opportunity to turn on the
Network Link Conditioner and simulate

00:17:41.620 --> 00:17:45.360
an Edge or cell phone environment,
run your app in the simulator,

00:17:45.490 --> 00:17:48.840
and see what's actually going to
go on when you have situations

00:17:48.840 --> 00:17:52.190
like packet drop and others to make
sure that your app deals with those

00:17:52.190 --> 00:17:54.520
error conditions appropriately.

00:17:54.540 --> 00:17:57.720
Lastly,
we have a tool that we've added for iOS,

00:17:57.720 --> 00:18:01.620
which allows you to perform
a remote packet capture.

00:18:01.650 --> 00:18:03.480
Basically,
this allows you to run your app

00:18:03.480 --> 00:18:09.500
on your iOS device hooked up to a
Lion machine and be able to grab the

00:18:09.560 --> 00:18:14.280
packets that your iOS device is seeing
and then analyze them with things like

00:18:14.400 --> 00:18:18.340
Wireshark and others to be able to,
again, kind of deal with potential

00:18:18.340 --> 00:18:21.120
errors or other challenges
that you might be seeing.

00:18:21.140 --> 00:18:23.680
Again, a very,
very helpful tool for being able

00:18:23.680 --> 00:18:27.140
to get a better sense of what your
application is actually dealing with.

00:18:27.160 --> 00:18:30.100
You can then capture all these packets,
analyze them later,

00:18:30.100 --> 00:18:34.370
or analyze them again in real time with
some of the tools that are available.

00:18:35.070 --> 00:18:38.050
I encourage you to go to a
session tomorrow which is the

00:18:38.050 --> 00:18:39.750
Cross Networking in Depth.

00:18:39.870 --> 00:18:45.150
This is tomorrow morning where we'll be
demoing these tools and giving a lot more

00:18:45.150 --> 00:18:48.970
information about how to take advantage
of them as well as a number of the other

00:18:48.970 --> 00:18:53.630
features that I've been talking about,
additional support for V6, et cetera,

00:18:53.630 --> 00:18:55.700
that is part of both Lion and iOS.

00:18:56.720 --> 00:18:59.160
I encourage you to go to a
session tomorrow which is the

00:18:59.160 --> 00:19:00.510
Cross Networking in Depth.

00:19:00.530 --> 00:19:04.090
This is tomorrow morning where we'll be
demoing these tools and giving a lot more

00:19:04.120 --> 00:19:07.690
information about how to take advantage
of them as well as a number of the other

00:19:07.690 --> 00:19:11.500
features that I've been talking about,
additional support for V6, et cetera,

00:19:11.500 --> 00:19:13.330
that is part of both Lion and iOS.

00:19:13.360 --> 00:19:16.020
And when you couple that
with the fact that there's,

00:19:16.050 --> 00:19:18.680
again,
hundreds of thousands of apps out there

00:19:18.680 --> 00:19:22.080
and the fact that the great news is,
is that a significant portion

00:19:22.150 --> 00:19:26.090
of them are now network enabled,
that we have to deal with kind

00:19:26.090 --> 00:19:29.970
of the change in the way we think
about networking and realize that

00:19:29.970 --> 00:19:33.640
mobility is no longer the exception
to the way networking is done,

00:19:33.760 --> 00:19:35.060
but it's the norm.

00:19:35.150 --> 00:19:37.750
It's the reality that we
have to deal with every day.

00:19:38.190 --> 00:19:41.390
Again,
just to kind of put it back in context,

00:19:41.390 --> 00:19:44.220
networking used to be very static.

00:19:44.220 --> 00:19:48.900
The original design of our networking
stacks that we all know and love

00:19:48.900 --> 00:19:53.000
were built on machines that were big,
that didn't get moved,

00:19:53.170 --> 00:19:57.000
where system administrators
configured everything,

00:19:57.000 --> 00:20:01.220
where you had complete control
of your networking environment.

00:20:01.220 --> 00:20:04.670
And also, you probably may remember
that in that particular time,

00:20:04.670 --> 00:20:05.710
there wasn't DHCP.

00:20:05.860 --> 00:20:07.840
So when you added a
device to your network,

00:20:07.860 --> 00:20:12.080
you had to find the guy who knew what
the available IP addresses were and

00:20:12.080 --> 00:20:16.140
what all the magic numbers were that you
had to put in your configuration files.

00:20:16.140 --> 00:20:19.560
At best, it would take you quite a
few minutes to be able to put

00:20:19.560 --> 00:20:25.020
together a network configuration,
but most likely, if you didn't know what

00:20:25.020 --> 00:20:27.620
the information was,
you had no hope.

00:20:27.620 --> 00:20:30.200
Again, everything used to be static.

00:20:30.200 --> 00:20:31.200
Certainly wasn't mobile.

00:20:31.200 --> 00:20:33.990
You're not about to put
a VAX in your pocket.

00:20:34.730 --> 00:20:37.800
The reality is of today though that
the network is no longer static.

00:20:37.800 --> 00:20:39.440
Nothing is static anymore.

00:20:39.560 --> 00:20:42.530
The configuration changes can
assume to be changed at any time.

00:20:42.900 --> 00:20:46.170
Signal strength, cell availability,
Wi-Fi ability, whether you're in a public

00:20:46.290 --> 00:20:49.580
or private Wi-Fi hotspot,
or whether you're connected to VPN.

00:20:49.580 --> 00:20:53.990
These are all part of what we deal with
now and what really poses the interesting

00:20:53.990 --> 00:20:56.140
challenges that we have to deal with.

00:20:57.880 --> 00:21:02.740
The goal for us,
both us Apple and us as the community

00:21:02.740 --> 00:21:07.960
that provides applications and
services to our collective customers,

00:21:08.120 --> 00:21:12.670
is that we need to preserve this
illusion of magic for networking.

00:21:12.800 --> 00:21:15.830
I'm sure you all are familiar
with this particular quote,

00:21:16.010 --> 00:21:18.260
but this is the challenge
that is before us.

00:21:18.570 --> 00:21:25.280
Our job is to make all that complexity of
networking seem like magic to the user.

00:21:25.500 --> 00:21:29.670
So let's talk a little bit about some
key principles that you should think

00:21:29.670 --> 00:21:34.730
about and put into play as you're working
on your next great app or you're making

00:21:34.790 --> 00:21:37.860
the next version for iOS 5 or Lion.

00:21:37.860 --> 00:21:40.910
First thing to consider,
and particularly given some

00:21:40.980 --> 00:21:47.120
of the things we talked about
yesterday with services for iCloud,

00:21:47.120 --> 00:21:50.850
is that you really want to write to
the highest level APIs that you can.

00:21:51.730 --> 00:21:54.250
You get an enormous amount
of benefit by doing so,

00:21:54.250 --> 00:21:57.320
by effectively future-proofing
your application.

00:21:57.320 --> 00:22:01.040
You allow the framework and those
level of systems to deal with the

00:22:01.040 --> 00:22:03.400
complexities of the network itself.

00:22:03.420 --> 00:22:05.950
So one of the benefits you get,
for example,

00:22:05.950 --> 00:22:09.760
today is that you shouldn't have to
deal with whether or not you're on

00:22:09.760 --> 00:22:12.100
an IPv4 network or an IPv6 network.

00:22:12.250 --> 00:22:14.950
If you write to the right
level of the system,

00:22:14.950 --> 00:22:18.620
CF network or above,
and you don't make any assumptions,

00:22:18.620 --> 00:22:22.460
which you shouldn't be doing,
you'll get this automatically,

00:22:22.460 --> 00:22:25.590
and as the Internet continues
to make this transition,

00:22:25.620 --> 00:22:26.890
you'll get it for free.

00:22:26.900 --> 00:22:30.060
Don't depend on...

00:22:31.600 --> 00:22:33.440
Transport level details.

00:22:33.440 --> 00:22:37.050
The reality is that you don't know if
the user is going to be connected to

00:22:37.170 --> 00:22:42.040
a Wi-Fi or 3G or on a laptop whether
they're on a wired connection or not.

00:22:42.090 --> 00:22:46.640
Don't ever assume anything about
those particular interfaces.

00:22:46.740 --> 00:22:53.030
The reality is they may change or you may
be fooled into what actually is going on.

00:22:53.030 --> 00:22:54.050
I'll give you an example.

00:22:54.050 --> 00:22:59.040
We happen to have shuttle buses that
are provided for us as Apple employees

00:22:59.040 --> 00:23:01.480
for getting around the Bay Area.

00:23:01.500 --> 00:23:05.910
One of the benefits is there
happens to be Wi-Fi on the bus

00:23:05.930 --> 00:23:08.310
that we can use and it's all great.

00:23:08.860 --> 00:23:12.610
From a device perspective,
I'm connecting to a local

00:23:12.610 --> 00:23:14.570
Wi-Fi that's really fast.

00:23:14.740 --> 00:23:18.190
What I don't realize from a device
perspective is right behind it

00:23:18.190 --> 00:23:22.100
is a 3G connection and all those
people on the bus are sharing it.

00:23:22.230 --> 00:23:26.000
So if I made an assumption that I'm
on Wi-Fi and I have a great connection

00:23:26.160 --> 00:23:29.050
and what's happening is somewhere
downstream I've actually got something

00:23:29.050 --> 00:23:32.100
that bottlenecks the connection,
you're going to be completely fooled.

00:23:32.100 --> 00:23:35.710
Don't assume the
transport means anything.

00:23:36.690 --> 00:23:39.410
The other benefit of writing to
the highest level API here is

00:23:39.410 --> 00:23:42.360
that you automatically get the
benefits of the framework and the

00:23:42.360 --> 00:23:44.000
infrastructure improvements that we do.

00:23:44.000 --> 00:23:47.060
We did an awful lot in iOS 5 and in Lion.

00:23:47.060 --> 00:23:49.830
Believe me,
we've got more on the plate that we

00:23:49.830 --> 00:23:54.020
are trying to deal with because of
the way that this space is growing.

00:23:54.020 --> 00:23:56.160
And we want you to be able
to take advantage of it.

00:23:56.280 --> 00:23:59.020
And writing to the highest level you can,
you'll get a lot for free.

00:23:59.880 --> 00:24:03.150
We do acknowledge, however,
that one size does not fit all.

00:24:03.160 --> 00:24:07.000
That you're going to have applications
where you have to deal with low-level

00:24:07.000 --> 00:24:08.960
APIs and low-level connections.

00:24:08.960 --> 00:24:11.460
Be aware, though,
that you're going to have to deal

00:24:11.460 --> 00:24:14.630
with some of the challenges and
complexities that come with it.

00:24:18.000 --> 00:24:20.940
One thing to consider is don't
assume that the network is free.

00:24:21.220 --> 00:24:24.100
These days the user could
be connected anywhere.

00:24:24.320 --> 00:24:28.600
So they're 3G, they may be roaming,
they may be in an environment

00:24:28.600 --> 00:24:32.240
where they're being charged by
either bandwidth or by time.

00:24:32.240 --> 00:24:36.800
The Wi-Fi certainly could be fee-based
if they're in a hotspot environment.

00:24:36.800 --> 00:24:38.300
They could be roaming.

00:24:38.300 --> 00:24:40.800
So any number of these
situations can occur.

00:24:40.910 --> 00:24:44.940
Don't assume that it's free and
therefore don't abuse the connection.

00:24:45.120 --> 00:24:49.560
Take advantage of the fact that
assuming that this costs money and

00:24:49.560 --> 00:24:53.020
that you should really try and narrow
your usage model as much as you can,

00:24:53.020 --> 00:24:54.700
but still give a great experience.

00:24:54.780 --> 00:24:58.180
But also be aware that power
isn't free here either.

00:24:58.180 --> 00:25:00.940
That when you use and
make a network connection,

00:25:00.940 --> 00:25:04.380
particularly an iOS device,
you're firing up potentially a

00:25:04.380 --> 00:25:06.810
radio that's consuming battery time.

00:25:06.880 --> 00:25:09.420
The network is also a limited resource.

00:25:09.820 --> 00:25:14.460
I'm sure people in the big hall yesterday
or today where you're in a large room,

00:25:14.460 --> 00:25:18.020
we're all trying to share
one wireless network in here.

00:25:18.020 --> 00:25:21.080
And the reality is it's
a very limited resource.

00:25:21.160 --> 00:25:23.410
If everybody just
assumes they own it all,

00:25:23.410 --> 00:25:26.200
they're going to be in for a
nasty surprise and probably

00:25:26.290 --> 00:25:27.850
a pretty bad experience.

00:25:27.860 --> 00:25:31.130
So think about the fact that from
the user that they're dealing

00:25:31.130 --> 00:25:33.050
in situations like this as well.

00:25:33.220 --> 00:25:35.880
Consider the ways you can
compress your information.

00:25:35.880 --> 00:25:39.780
How you can take,
instead of small packet, lots and lots.

00:25:39.870 --> 00:25:41.200
Lots of little small packets going out.

00:25:41.220 --> 00:25:43.990
How you can cluster your
information in transmissions so

00:25:43.990 --> 00:25:45.870
that they're much more efficient.

00:25:45.880 --> 00:25:49.940
You should also consider
caching things intelligently.

00:25:49.940 --> 00:25:53.630
If you can, possibly don't reload,
download the same information

00:25:53.630 --> 00:25:57.200
every time you connect to the
server or you connect to a service.

00:25:57.280 --> 00:26:01.650
And really consider performance as
a key part of the experience that

00:26:01.870 --> 00:26:03.980
you have for your applications.

00:26:03.980 --> 00:26:08.270
Particularly, understand the trade-off
between bandwidth and latency.

00:26:08.360 --> 00:26:11.360
Depending on your...
Depending on your application,

00:26:11.360 --> 00:26:14.880
frankly, I think in most cases,
latency is actually the most important

00:26:14.880 --> 00:26:16.190
thing that you'll want to deal with.

00:26:16.260 --> 00:26:18.440
Latency is about responsiveness.

00:26:18.440 --> 00:26:21.590
It's how quick can I get the
information there and back

00:26:21.790 --> 00:26:23.290
and be able to react to it.

00:26:23.380 --> 00:26:27.440
Bandwidth certainly is important,
particularly when, for example,

00:26:27.440 --> 00:26:29.890
you're streaming media, other things.

00:26:29.920 --> 00:26:31.790
Certainly,
bandwidth is a great thing to be

00:26:31.790 --> 00:26:34.500
able to make sure that you can
get the best experience there.

00:26:34.500 --> 00:26:37.380
But that is not what most
of us tend to deal with.

00:26:37.520 --> 00:26:40.120
And so make sure that when
you're writing... When you're

00:26:40.120 --> 00:26:42.720
writing an application,
you're considering the impacts

00:26:42.720 --> 00:26:44.820
of latency in your design model.

00:26:45.240 --> 00:26:51.870
And then beware of what
we call buffer bloat.

00:26:52.200 --> 00:26:56.680
What we're seeing in terms of the
experience on the internet as things

00:26:56.680 --> 00:27:01.940
grow is that cascading buffers,
basically it's really

00:27:01.940 --> 00:27:05.610
cheap to add a few K,
a few megabyte of buffers at various

00:27:05.620 --> 00:27:07.170
levels of the infrastructure.

00:27:07.220 --> 00:27:11.480
Each of them add, frankly,
add latency and other delay into

00:27:11.500 --> 00:27:13.840
the experience of the network.

00:27:15.280 --> 00:27:17.710
And certainly there's not a
lot you can do about that.

00:27:17.710 --> 00:27:19.810
And if you're interested, by the way,
in learning more about this,

00:27:19.920 --> 00:27:24.720
I encourage you to go to
bufferbloat.net and read up on it.

00:27:24.820 --> 00:27:27.920
But there are things that you
can do in your application to

00:27:27.920 --> 00:27:29.640
not have the same experience.

00:27:29.760 --> 00:27:32.610
Buffers are great,
but they are not the answer

00:27:32.610 --> 00:27:34.640
to your performance problems.

00:27:34.720 --> 00:27:39.500
Most of the time you can over-buffer
your applications and then end up

00:27:39.540 --> 00:27:43.760
creating increased latency and,
again, reduce the experience,

00:27:43.840 --> 00:27:45.260
the interactive experience
that you're having.

00:27:45.260 --> 00:27:50.680
One of the things that we've added
to iOS 5 and Lion is mechanisms to

00:27:50.820 --> 00:27:57.960
optimally allocate buffers as far as your
TCP connections for the best performance.

00:27:58.020 --> 00:28:00.920
We encourage you, again,
if you're writing the higher level APIs,

00:28:00.920 --> 00:28:02.420
you'll get a lot of this benefit.

00:28:02.420 --> 00:28:06.440
But as well, when you're designing
your network applications,

00:28:06.560 --> 00:28:10.220
think about the impact of putting
lots of buffers between the user

00:28:10.540 --> 00:28:13.280
experience and your network experience.

00:28:13.360 --> 00:28:15.260
Deal with network errors.

00:28:15.260 --> 00:28:19.100
Again, back in the day when
everything was very static,

00:28:19.100 --> 00:28:23.260
things didn't change an awful lot
and you could kind of get away

00:28:23.260 --> 00:28:25.410
with not worrying about this.

00:28:25.540 --> 00:28:26.350
It was a rare event.

00:28:26.420 --> 00:28:29.700
I can walk five feet down a
hallway and my network experience

00:28:30.210 --> 00:28:32.100
will change dramatically.

00:28:32.100 --> 00:28:35.520
And the reality is that connections
that I have are going to go down,

00:28:35.540 --> 00:28:39.020
packets are going to get dropped,
timeouts are going to occur.

00:28:39.020 --> 00:28:41.920
This is just the reality
of networking these days.

00:28:41.940 --> 00:28:45.260
So you've got to be able
to deal with these cases.

00:28:45.260 --> 00:28:46.020
Intelligently.

00:28:46.020 --> 00:28:50.280
Make sure as well, for example,
that you're dealing with situations on

00:28:50.350 --> 00:28:53.060
iOS that you're backgrounding correctly.

00:28:53.060 --> 00:28:57.020
Because those will potentially create
error conditions as well if you

00:28:57.210 --> 00:28:59.280
don't shut down things that you can.

00:28:59.280 --> 00:29:01.620
When you come back,
or if you do come back,

00:29:01.620 --> 00:29:05.700
you may find your connections have been
shut down for you in order to be able

00:29:05.700 --> 00:29:08.040
to deal with system resource issues.

00:29:08.080 --> 00:29:11.700
From the user's perspective,
they don't want to know

00:29:11.750 --> 00:29:13.470
about all these errors.

00:29:13.600 --> 00:29:15.110
Except in the rare cases.

00:29:15.280 --> 00:29:19.620
Where they've explicitly made a request
to do something and you can't deliver it.

00:29:19.620 --> 00:29:21.780
They shouldn't know
about all these details.

00:29:21.780 --> 00:29:24.580
Hide problems in the
network whenever possible.

00:29:24.580 --> 00:29:26.770
Deal with them yourself
and automatically.

00:29:28.300 --> 00:37:41.000
[Transcript missing]

00:37:41.390 --> 00:37:44.020
Right to the highest level APIs,
you'll get a lot for free.

00:37:44.020 --> 00:37:49.300
But if you have code that is
written to low level APIs,

00:37:49.300 --> 00:37:52.660
you need to make sure that you're
not making assumptions about address

00:37:52.660 --> 00:37:56.340
types or sizes because these days
you may get either or multiple.

00:37:56.340 --> 00:37:59.480
If you're dealing yourself
with DNS resolution,

00:37:59.480 --> 00:38:02.950
be prepared for the fact that
you're going to get multiple

00:38:02.950 --> 00:38:04.330
address responses back.

00:38:04.500 --> 00:38:08.690
You're going to get potentially
multiple V4 and multiple V6

00:38:08.690 --> 00:38:11.300
resolutions for a given DNS entry.

00:38:11.300 --> 00:38:15.940
And make sure that you're applying
the right logic for determining them.

00:38:15.940 --> 00:38:20.620
Again, we encourage you to use the higher
level APIs and we have other mechanisms

00:38:20.630 --> 00:38:24.620
that you can use to even make this
experience a little bit better.

00:38:25.500 --> 00:38:28.810
But be aware that these are the kinds of
things you're going to have to deal with.

00:38:28.990 --> 00:38:32.700
And if you have open source or
libraries that you're dependent

00:38:32.700 --> 00:38:36.820
on that are network based,
don't assume that they're V6 capable.

00:38:36.820 --> 00:38:40.410
If they're code that you have,
you may want to go back and look at them.

00:38:40.420 --> 00:38:43.620
Chances are they may be a library
you've been using for years.

00:38:43.650 --> 00:38:47.260
The rest of your app may all be ready,
but you may have one little library

00:38:47.260 --> 00:38:49.240
that you're dependent on that isn't.

00:38:49.320 --> 00:38:52.030
And this is something that
you need to be going to make a

00:38:52.030 --> 00:38:53.710
particular point of the test.

00:38:55.190 --> 00:39:00.190
Lastly, I really encourage you to
actually build a v6-only network.

00:39:00.240 --> 00:39:06.030
You can use a number of solutions
today to be able to bridge

00:39:06.030 --> 00:39:11.230
v6 into v4 backbone networks,
but at least so that your current

00:39:11.230 --> 00:39:14.420
application is dealing in a v6
environment and that the right thing

00:39:14.420 --> 00:39:17.330
happens and that you're comfortable
it's going to work when the user

00:39:17.720 --> 00:39:19.630
deals with those kinds of situations.

00:39:20.930 --> 00:39:25.220
Also, if you are providing a service
or you're looking for services,

00:39:25.220 --> 00:39:27.670
Bonjour is definitely the way to go here.

00:39:27.670 --> 00:39:29.540
It's a dynamic world again.

00:39:29.540 --> 00:39:33.180
No one ever remembers an IP address,
although I can certainly remember

00:39:33.280 --> 00:39:36.430
the time where I would have
to memorize my v4 addresses.

00:39:36.540 --> 00:39:40.390
There's no way in the world I can
possibly memorize an IPv6 address.

00:39:40.390 --> 00:39:43.870
They're big, gnarly,
and there's just no way in the world

00:39:43.870 --> 00:39:46.120
you're going to be able to do that.

00:40:11.720 --> 00:40:15.720
Thank you.

00:40:17.180 --> 00:40:22.180
Because Bonjour itself is
agnostic to the transport.

00:40:22.300 --> 00:40:26.310
And then on top of all of that on Mac OS,
you might want to be aware that there's

00:40:26.380 --> 00:40:29.850
this mechanism called the sleep proxy,
which allows you to also be

00:40:29.960 --> 00:40:31.870
a good power citizen as well.

00:40:31.900 --> 00:40:35.480
If you have a service, for example,
you know, if there's file sharing

00:40:35.480 --> 00:40:37.820
or screen sharing,
but if you have a service that

00:40:37.820 --> 00:40:41.690
you're providing for Bonjour,
you can still allow the machine

00:40:41.690 --> 00:40:44.140
to actually go fully to sleep.

00:40:44.620 --> 00:40:49.370
And the sleep proxy mechanism is
something that basically takes advantage

00:40:49.370 --> 00:40:53.650
of an Apple TV or an airport base
station to make note of the services

00:40:53.700 --> 00:40:58.430
that your device will provide and
wake it up using wake on LAN or wake

00:40:58.430 --> 00:41:03.540
on wireless capability as needed when
that particular service is requested.

00:41:03.660 --> 00:41:06.890
Again, not only make sure that
the user can find things,

00:41:06.890 --> 00:41:11.590
but that we don't have to keep these
devices running and hot 24 hours a day.

00:41:12.070 --> 00:41:15.680
Which leads right into the fact
that power is actually as important,

00:41:15.800 --> 00:41:17.840
if not more important than performance.

00:41:18.080 --> 00:41:20.830
Maybe great that the user
gets this great experience,

00:41:20.840 --> 00:41:23.000
but if the device only
lasts a few minutes,

00:41:23.070 --> 00:41:24.580
it really doesn't do any good.

00:41:24.640 --> 00:41:30.630
One of the reasons that we've pushed so
hard for the experience for things like

00:41:30.710 --> 00:41:35.390
the way applications are backgrounded and
others is because the user expects that

00:41:35.460 --> 00:41:38.160
the device is going to last all day long.

00:41:38.240 --> 00:41:41.050
And we have to make sure that
that experience is preserved.

00:41:41.720 --> 00:41:41.970
So.

00:41:41.980 --> 00:41:46.220
The fact that you're dealing with
a portable device means that you're

00:41:46.220 --> 00:41:50.650
dealing with batteries and that when
you use the network that you are very

00:41:50.820 --> 00:41:55.270
possibly either powering up the radio
or radios or keeping them hot and they

00:41:55.270 --> 00:41:57.850
certainly draw an awful lot of power.

00:41:57.940 --> 00:42:00.670
And that's fine if you're again,
the point here is to have

00:42:00.670 --> 00:42:03.110
a great network experience,
but there are things

00:42:03.160 --> 00:42:04.470
that you can do to help.

00:42:04.580 --> 00:42:08.080
For example,
don't trickle data out over time.

00:42:08.080 --> 00:42:12.000
Little bits of data, you know,
spread over time means that you're.

00:42:12.020 --> 00:42:17.030
You're effectively keeping the radio
hot or active constantly and if

00:42:17.050 --> 00:42:21.610
possible burst your data together,
reduce the amount of times that

00:42:21.610 --> 00:42:23.010
you need to bring up the radio.

00:42:23.180 --> 00:42:26.910
You really have no way of being
able to control of one that happens,

00:42:26.910 --> 00:42:31.200
but you can manage the way you deal with
your traffic and connections and such

00:42:31.200 --> 00:42:33.410
to help let the system do that better.

00:42:33.560 --> 00:42:36.130
Take advantage of push notifications.

00:42:36.200 --> 00:42:41.000
Pulling the server every little bit is
not always the right answer to do things.

00:42:41.620 --> 00:42:44.580
There are ways to do this
completely asynchronously and

00:42:44.660 --> 00:42:46.240
not keep radios and things hot.

00:42:46.460 --> 00:42:49.990
Take advantage of things like
sleep proxy on on your desktop and

00:42:50.010 --> 00:42:53.630
laptop devices for services that
you might be making available.

00:42:53.860 --> 00:42:57.760
But reachability APIs also
play a big role here.

00:42:58.110 --> 00:43:01.830
There are ways that you can use
that to determine both connectivity

00:43:01.960 --> 00:43:05.520
and stuff to make sure that you
know your experience is good and to

00:43:05.520 --> 00:43:09.450
give hints to the system so that it
knows how it's being used as well.

00:43:09.700 --> 00:43:11.220
This leads right into.

00:43:11.220 --> 00:43:14.690
Again, dealing with the fact that
change is going to happen.

00:43:14.700 --> 00:43:18.010
It's a reality of the environment
that we're in the number of the

00:43:18.330 --> 00:43:21.520
interfaces that are available,
whether you're cellular network

00:43:21.520 --> 00:43:24.250
is connected with your wife
I connected or whether both are

00:43:24.330 --> 00:43:26.240
your signal strength and quality.

00:43:26.240 --> 00:43:27.600
These things are going to change.

00:43:27.700 --> 00:43:30.440
Assume that in your design space.

00:43:30.440 --> 00:43:33.460
One thing that you can do to kind
of help yourself here is because

00:43:33.460 --> 00:43:36.590
you have need to assume that
there's going to be a lot of change.

00:43:36.670 --> 00:43:39.120
Don't leave connections
open longer than you need to

00:43:39.120 --> 00:43:40.700
because it's very problematic.

00:43:40.860 --> 00:43:44.650
It's very possible that the connection
that you had is going to get dropped

00:43:44.660 --> 00:43:48.560
because the connection actually changed
so long lived connections can be a

00:43:48.870 --> 00:43:52.530
problem unless you're ready to deal
with the implications of a change.

00:43:52.640 --> 00:43:55.930
And again,
use the reachability APIs here.

00:43:56.020 --> 00:43:59.500
It'll help you and notify you when
there are changes that are occurring

00:43:59.500 --> 00:44:02.880
in the system when you've tried to
make a connection to a particular

00:44:02.880 --> 00:44:04.760
service and that interface is down.

00:44:05.080 --> 00:44:07.940
It can let you know that the
interface is now available.

00:44:07.940 --> 00:44:09.160
Our connections are possible.

00:44:09.260 --> 00:44:10.170
So take advantage of the.

00:44:10.220 --> 00:44:14.370
So that it's not again in the user's
face and that your app just deals

00:44:14.370 --> 00:44:17.090
automatically with these situations.

00:44:17.140 --> 00:44:22.640
If you do things using the facilities
and services that are in the system,

00:44:22.640 --> 00:44:24.820
you really as an app developer,
even though I've listed

00:44:24.820 --> 00:44:27.510
a lot of challenges,
there's actually a small amount

00:44:27.510 --> 00:44:29.210
that you really should have to do.

00:44:29.220 --> 00:44:31.220
There's a lot of the
system will do for you.

00:44:31.220 --> 00:44:32.550
Take advantage of that.

00:44:32.720 --> 00:44:34.720
Let it do as much of the work as it can.

00:44:34.720 --> 00:44:38.650
The key to most of this
is not making assumptions.

00:44:38.720 --> 00:44:39.730
The only assumption.

00:44:39.780 --> 00:44:43.980
The only assumption that you can make
the only constant in life is change.

00:44:44.010 --> 00:44:45.600
It's all about networking.

00:44:45.600 --> 00:44:48.140
Everything that we do,
the experience that we provide

00:44:48.160 --> 00:44:51.460
our users is about giving them
this sense of connectedness.

00:44:51.460 --> 00:44:55.450
It's about being able to provide
network services and capabilities

00:44:55.450 --> 00:44:59.200
as part of your applications
and add value to your customers.

00:44:59.200 --> 00:45:02.260
They expect a connected
experience these days,

00:45:02.270 --> 00:45:04.260
regardless of the kind
of app that you have.

00:45:04.320 --> 00:45:07.350
So be prepared for dealing
with the changes that are

00:45:07.350 --> 00:45:09.380
part of a highly mobile world.

00:45:09.380 --> 00:45:12.090
Write your app assuming that
absolutely nothing is static

00:45:12.090 --> 00:45:13.420
when it comes to the network.

00:45:13.420 --> 00:45:15.040
Assume everything will change.

00:45:15.050 --> 00:45:16.130
And then test.

00:45:16.150 --> 00:45:18.580
Take advantage of the network
link conditioner while

00:45:18.580 --> 00:45:21.740
you're writing your code,
while you're developing your application

00:45:21.760 --> 00:45:24.140
to test during the design phase.

00:45:24.190 --> 00:45:26.520
Test in real world environments.

00:45:26.520 --> 00:45:32.910
And make sure that you create artificial
environments that will test the kind

00:45:32.910 --> 00:45:35.220
of failures that you know are coming.

00:45:36.080 --> 00:45:38.900
And it's all about, again,
helping keep that illusion

00:45:38.900 --> 00:45:40.150
of magic for networking.

00:45:40.490 --> 00:45:43.090
We all know in this room
that networking is hard.

00:45:43.090 --> 00:45:45.890
It's complicated and it's
getting more complicated given

00:45:45.890 --> 00:45:47.510
all the challenges that exist.

00:45:47.510 --> 00:45:51.470
But there's a lot that we can do
to keep this illusion of simplicity

00:45:51.590 --> 00:45:53.700
and we have got to do it together.

00:45:55.570 --> 00:45:58.950
So with that,
I want to point you to an evangelist

00:45:58.950 --> 00:46:03.660
if you've got more questions,
Paul Danbold, and certainly the various

00:46:03.660 --> 00:46:05.880
forums and services,
websites.

00:46:05.880 --> 00:46:08.340
But more importantly,
there's a couple of sessions

00:46:08.340 --> 00:46:10.000
I really encourage you to go to.

00:46:10.000 --> 00:46:14.270
Tomorrow there's a Core OS Networking
In-Depth where we'll get into some

00:46:14.270 --> 00:46:17.900
of the tools and new APIs in more
detail and give you some demos.

00:46:18.580 --> 00:46:21.220
And as well,
on Thursday there's a session on

00:46:21.220 --> 00:46:25.960
Bonjour and how to take advantage of
network discovery and connectivity.

00:46:25.960 --> 00:46:28.640
With that,
I thank you for coming and hope you

00:46:28.640 --> 00:46:30.990
have a great rest of the conference.