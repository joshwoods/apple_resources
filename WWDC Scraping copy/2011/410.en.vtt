WEBVTT

00:00:10.700 --> 00:00:13.340
I know you guys got a lot
of awesome games out there,

00:00:13.340 --> 00:00:16.780
and I want to help you by showing
you how to add multiplayer to

00:00:16.780 --> 00:00:19.650
your gaming using Game Center.

00:00:20.110 --> 00:00:23.600
So first of all, what is multi-player?

00:00:23.720 --> 00:00:25.440
Well, you can play with others
over the networks.

00:00:25.660 --> 00:00:28.550
These can be your friends,
and these can be people

00:00:28.550 --> 00:00:30.040
you never met before.

00:00:30.110 --> 00:00:33.740
Multi-player works on
both Wi-Fi and cellular,

00:00:33.740 --> 00:00:38.040
so there's no limits to when
you can do multi-player.

00:00:38.100 --> 00:00:41.000
This is a great opportunity
for social gaming.

00:00:41.050 --> 00:00:45.360
You can foster competition
among your players and have them

00:00:45.360 --> 00:00:47.950
engaged for long periods of time.

00:00:48.050 --> 00:00:51.320
This also increases the impact
of leaderboards and achievements.

00:00:51.400 --> 00:00:55.130
If I'm playing a single-player game
and I'm off in the corner there,

00:00:55.130 --> 00:00:59.120
and I get a little achievement against
killing some robot or something,

00:00:59.290 --> 00:01:00.560
so what?

00:01:00.670 --> 00:01:04.510
But if I'm playing tennis and
I ace the guy across the hall

00:01:04.510 --> 00:01:07.430
and I get the high score,
I'm going to go, "Yeah,

00:01:07.430 --> 00:01:08.770
look at that leaderboard.

00:01:09.050 --> 00:01:10.080
Look at that achievement I got.

00:01:10.080 --> 00:01:12.870
I got 10 aces against
you in that game." Now,

00:01:12.870 --> 00:01:13.630
that's awesome.

00:01:13.720 --> 00:01:16.200
That gets your players engaged.

00:01:16.270 --> 00:01:17.910
Makes it much more fun.

00:01:19.200 --> 00:01:21.340
Now, why add multiplayer?

00:01:21.450 --> 00:01:22.760
Well,
the number one reason you want to add

00:01:22.760 --> 00:01:26.090
multiplayer is this little message.

00:01:26.200 --> 00:01:28.600
This is from Notification Center.

00:01:28.650 --> 00:01:33.760
If I own this game and you don't,
and they swipe that,

00:01:33.820 --> 00:01:37.100
they're going to go right to the
store and they can buy your game.

00:01:37.210 --> 00:01:39.300
So you get free viral
marketing right there.

00:01:39.300 --> 00:01:42.000
It's easy and it's free.

00:01:42.060 --> 00:01:44.600
This will also make your game stand out.

00:01:44.760 --> 00:01:47.100
People love to play
against real opponents.

00:01:47.100 --> 00:01:49.800
Now, if you play that bot, you know,
three or four times,

00:01:49.800 --> 00:01:51.100
you're going to figure it out.

00:01:51.140 --> 00:01:52.930
But if you're playing
that guy across the hall,

00:01:53.060 --> 00:01:55.600
they're going to keep coming up
with new ways to try to beat you.

00:01:55.600 --> 00:01:57.800
And it'll just go on and on.

00:01:57.870 --> 00:02:02.180
Also, if your spouse or significant
other loves to play games,

00:02:02.180 --> 00:02:05.750
maybe your game can let
them play cooperatively.

00:02:05.940 --> 00:02:08.590
She also mentioned that many of
the top games on the App Store,

00:02:08.680 --> 00:02:11.970
if you go to the top 20 today,
I bet you you're going to find

00:02:11.970 --> 00:02:15.900
a significant number that have
a major multi-player component.

00:02:16.170 --> 00:02:20.450
And if you go to any website for gaming,
and there's a really popular

00:02:20.510 --> 00:02:23.800
game that they're talking about,
the game doesn't support multi-player.

00:02:23.910 --> 00:02:26.290
You can bet their
player is asking for it,

00:02:26.350 --> 00:02:30.900
going, "When are you going to do
multi-player?" or even debates about it.

00:02:30.900 --> 00:02:33.120
but it's a big deal for games.

00:02:33.120 --> 00:02:36.660
This will also increase
the longevity of your game.

00:02:36.690 --> 00:02:41.790
I mean, most of our games are 5, 10,
maybe even 30 hours.

00:02:41.790 --> 00:02:45.040
But once I finish that
single-player campaign,

00:02:45.040 --> 00:02:47.580
I'm just going to go on
and play the next one.

00:02:47.580 --> 00:02:51.330
But if your single-player campaign
is awesome and I can get all

00:02:51.330 --> 00:02:54.810
my buddies in the hall of my
office to come and play with me,

00:02:54.830 --> 00:02:58.020
we're going to be playing
your game for the next year,

00:02:58.050 --> 00:02:59.560
and don't you want that?

00:02:59.630 --> 00:03:02.470
I I do if I'm developing a game.

00:03:02.780 --> 00:03:04.800
And this gives your game
a chance for immortality.

00:03:04.900 --> 00:03:07.130
If you look back over
the history of gaming,

00:03:07.130 --> 00:03:11.340
the last 10 or 20 years,
think about the great gaming franchises.

00:03:11.480 --> 00:03:15.540
Heck, think about the great gaming
franchises today that are talked about.

00:03:15.690 --> 00:03:17.930
They use multiplayer.

00:03:18.960 --> 00:03:21.860
So what you're going to learn today is
how to add multiplayer to your game.

00:03:21.940 --> 00:03:24.900
We're going to talk about the
matchmaking UI that we provide.

00:03:25.010 --> 00:03:28.200
We're going to talk about how you
can do programmatic auto-matching.

00:03:28.320 --> 00:03:33.300
We're going to talk about peer-to-peer
communication and the best practices.

00:03:33.300 --> 00:03:35.850
We're going to tell you how
we can help you if you want to

00:03:35.850 --> 00:03:37.600
host your own game on a server.

00:03:37.750 --> 00:03:40.600
We're going to tell you
how to set up voice chat.

00:03:40.730 --> 00:03:43.380
And we're going to talk about some
issues you need to be aware of

00:03:43.390 --> 00:03:45.710
relating to Game Center services.

00:03:45.890 --> 00:03:49.230
So first of all, these are the styles of
multiplayer we support.

00:03:49.510 --> 00:03:53.350
We support peer-to-peer,
turn-based and server-based.

00:03:53.470 --> 00:03:56.640
In peer-to-peer, let's say you have four
players in your game.

00:03:56.640 --> 00:03:58.740
They're each going to
have a copy of your game,

00:03:58.740 --> 00:04:02.240
and they're going to communicate
with each other simultaneously,

00:04:02.370 --> 00:04:04.400
or in any way you want.

00:04:04.500 --> 00:04:06.410
In turn-based, things are more orderly.

00:04:06.640 --> 00:04:10.360
They'll progress from this player
to that player to that player,

00:04:10.470 --> 00:04:14.200
and so forth,
in a very well-ordered sequence.

00:04:14.370 --> 00:04:17.100
In server-based,
you provide your own server,

00:04:17.250 --> 00:04:20.140
you make your own rules.

00:04:20.260 --> 00:04:22.660
So let's compare these a little bit.

00:04:23.540 --> 00:04:26.360
Peer-to-peer supports
two to four players.

00:04:26.560 --> 00:04:32.480
Turn-based and server-based
are both two to 16,

00:04:32.480 --> 00:04:32.480
so they up the limit significantly.

00:04:33.090 --> 00:04:37.080
The gameplay on peer-to-peer
and server is simultaneous.

00:04:37.250 --> 00:04:39.590
Turn base is sequential.

00:04:40.890 --> 00:04:45.520
Now for hosting, on peer-to-peer,
it can be hosted on one of

00:04:45.520 --> 00:04:48.670
the devices in the game,
or it can be fully distributed.

00:04:48.860 --> 00:04:51.800
Turn-based, by its nature,
is fully distributed.

00:04:52.030 --> 00:04:55.770
And on the server, again,
it's all up to you.

00:04:56.240 --> 00:05:01.560
In communications, peer-to-peer supports
point-to-point or broadcast.

00:05:01.640 --> 00:05:07.070
Turn-base is point-to-point,
and server is, again, up to you.

00:05:07.590 --> 00:05:11.810
Now for data transmission,
for turn-based and peer-to-peer,

00:05:11.900 --> 00:05:14.500
we provide you APIs, so it's really easy.

00:05:14.500 --> 00:05:17.730
It's literally you pack something
into an NSData and send.

00:05:17.940 --> 00:05:19.900
There's nothing more to it.

00:05:20.010 --> 00:05:23.590
On server-based, unfortunately,
you have to do a little more work,

00:05:23.590 --> 00:05:26.370
but then you get the
benefit of the flexibility.

00:05:27.620 --> 00:05:30.260
So let's talk about the
basic flow of multiplayer.

00:05:30.300 --> 00:05:34.100
I've broken it into these three
categories that I kind of cutely say:

00:05:34.160 --> 00:05:37.500
get ready, get set, go.

00:05:37.610 --> 00:05:39.970
So in the get ready phase,
the first thing you've got

00:05:39.970 --> 00:05:43.500
to do to make a multiplayer
game is to pick the players.

00:05:43.690 --> 00:05:46.500
Fortunately,
we provide you two ways to do so.

00:05:46.500 --> 00:05:51.090
You can use our UI,
or you can do it programmatically

00:05:51.090 --> 00:05:53.500
and make an auto-match.

00:05:53.760 --> 00:05:56.500
Either way,
you're going to get a player list.

00:05:56.500 --> 00:05:59.740
And once you have that player list,
you wait for each of the players

00:05:59.860 --> 00:06:01.490
to connect to your device.

00:06:01.500 --> 00:06:07.300
And once they're connected,
you can set up your game and play.

00:06:07.510 --> 00:06:11.010
And the way you, at that point,
all you have to do is communicate data

00:06:11.150 --> 00:06:15.970
and observe changes in those player
state as they come and go or whatever.

00:06:16.490 --> 00:06:19.240
So let's talk about choosing players.

00:06:19.310 --> 00:06:23.600
We have this UI here that lets
you invite friends or auto-match.

00:06:23.630 --> 00:06:26.320
And if you look here,
we have examples of both.

00:06:26.420 --> 00:06:29.160
The players on the bottom
are auto-match players.

00:06:29.160 --> 00:06:33.580
They're just filled there based
on the limits you specify.

00:06:33.730 --> 00:06:36.690
If you click that invite button,
it'll take you to a picker

00:06:36.690 --> 00:06:40.310
that'll let you pick your friend,
and then they'll be added to

00:06:40.310 --> 00:06:42.190
the list like Corey is here.

00:06:43.190 --> 00:06:46.630
Now, another important point here is
that when you implement this,

00:06:46.750 --> 00:06:49.500
there's three entry points
you have to consider.

00:06:49.610 --> 00:06:53.990
The most easy to understand
entry point is in-game.

00:06:54.090 --> 00:06:58.250
You've got a button that says "Play
Multiplayer." The player presses it,

00:06:58.250 --> 00:06:59.990
and you get the UI up.

00:07:00.350 --> 00:07:04.740
Now, the other ways that, you know,
this UI will need to come up is,

00:07:04.820 --> 00:07:08.880
let's say you're in Game Center,
and you navigate to your friend's game,

00:07:09.040 --> 00:07:11.300
and you see that he's
playing Russian Bow.

00:07:11.300 --> 00:07:13.300
Well,
there's a play button in Game Center.

00:07:13.300 --> 00:07:17.450
If they hit play,
we will launch your app for you,

00:07:17.450 --> 00:07:20.300
and we'll supply the
app some information,

00:07:20.300 --> 00:07:23.650
and you have to respond
to this and put up the UI.

00:07:23.980 --> 00:07:28.410
Similarly,
when I invite my friend on their device,

00:07:28.420 --> 00:07:34.310
they're going to get a message,
an alert up, or a notification message.

00:07:34.320 --> 00:07:38.800
If they swipe play,
then we will launch your game,

00:07:38.800 --> 00:07:41.920
they will get an invite,
and they'll need to put up the UI.

00:07:41.920 --> 00:07:47.410
So in all three,
these are three different ways in

00:07:47.410 --> 00:07:47.410
which you'll need to put up the UI.

00:07:48.380 --> 00:07:50.440
So I'm going to now go through a
walkthrough of what it takes to

00:07:50.440 --> 00:07:52.540
implement multiplayer in your game.

00:07:52.670 --> 00:07:56.550
So I've gone into the pick
players and matchmaking.

00:07:57.080 --> 00:08:00.670
Once you have those,
you need to implement didChangeSate

00:08:00.760 --> 00:08:02.680
and configure your communications.

00:08:02.870 --> 00:08:07.750
And then during play,
you can send or receive data.

00:08:08.860 --> 00:08:11.900
Before we go into that,
I want to talk about GK Local Player.

00:08:11.900 --> 00:08:14.200
Some of you may have
heard of this before.

00:08:14.420 --> 00:08:16.890
This represents the user on this device.

00:08:17.150 --> 00:08:19.500
It's responsible for authentication.

00:08:19.580 --> 00:08:21.700
It provides the list of friends.

00:08:21.760 --> 00:08:26.470
But most importantly for multiplayer
is this invariant player ID.

00:08:26.740 --> 00:08:28.430
This is how you're going
to associate saves,

00:08:28.430 --> 00:08:31.700
you're going to cache data,
cache achievement progress,

00:08:31.700 --> 00:08:33.700
record high scores.

00:08:33.860 --> 00:08:36.700
And now with iCloud,
you're going to store

00:08:36.750 --> 00:08:38.690
that data on the cloud.

00:08:38.700 --> 00:08:43.700
Now, one thing I strongly recommend is
that when you store data on the cloud,

00:08:43.700 --> 00:08:48.700
include the player ID key
in the key you pass up.

00:08:48.700 --> 00:08:52.960
And the reason you want that is you may
have one iCloud account on your device,

00:08:52.960 --> 00:08:56.690
but let's say you have your kids
using your device to play games.

00:08:56.700 --> 00:08:58.670
They may have separate
Game Center accounts.

00:08:58.730 --> 00:09:00.700
So to make sure that all works smoothly,
please use the player ID to, you know,

00:09:00.700 --> 00:09:00.700
to make sure that all works smoothly.

00:09:01.210 --> 00:09:05.590
please use the player
ID to store your data.

00:09:06.870 --> 00:09:08.670
So authentication.

00:09:08.830 --> 00:09:11.780
We strongly encourage you
to authenticate at launch.

00:09:11.930 --> 00:09:15.390
If you don't do this,
operations may fail,

00:09:15.480 --> 00:09:18.020
or they will fail because
they'll return errors.

00:09:18.310 --> 00:09:20.500
Another thing to know
about authentication is

00:09:20.500 --> 00:09:21.830
it may get called later.

00:09:22.240 --> 00:09:26.100
So I'll tell you why that's
significant in a moment.

00:09:26.100 --> 00:09:29.980
So to authenticate,
you construct a local player,

00:09:30.060 --> 00:09:31.860
you call authenticate
with completion handler,

00:09:31.860 --> 00:09:34.100
and you pass in this block.

00:09:34.120 --> 00:09:36.610
And when it gets called,
you check to see if the local

00:09:36.610 --> 00:09:38.090
player is authenticated.

00:09:38.090 --> 00:09:40.820
If you do so,
you enable Game Center services.

00:09:40.890 --> 00:09:43.280
If you don't, you disable the features.

00:09:44.340 --> 00:09:46.830
Now, this block may get called later.

00:09:46.830 --> 00:09:49.740
Like, for example,
if I'm playing a game with you,

00:09:49.740 --> 00:09:52.880
and I get a phone call, well,
it's going to switch out the app,

00:09:52.880 --> 00:09:54.830
and I'm going to, you know,
talk to my mom or something.

00:09:54.840 --> 00:09:58.580
When I come back,
it has to re-authenticate.

00:09:58.580 --> 00:10:04.160
So this block holds on to anything
that it's referring to for almost

00:10:04.160 --> 00:10:06.830
the entire life of your app.

00:10:06.830 --> 00:10:06.830
So it's...

00:10:07.060 --> 00:10:09.980
Anything it's referring to will be
retained due to the way blocks work,

00:10:10.070 --> 00:10:14.350
so just be aware of that and
manage your memory appropriately.

00:10:14.610 --> 00:10:17.900
Another caution is thread safety.

00:10:17.950 --> 00:10:22.250
Multi-player APIs may not be
called back on the main thread.

00:10:22.350 --> 00:10:25.060
This includes delegate callbacks
and block-based callbacks.

00:10:25.060 --> 00:10:28.000
This is because our
APIs are asynchronous.

00:10:28.130 --> 00:10:29.840
And because of this,
you need to make sure that

00:10:29.840 --> 00:10:32.420
you synchronize access to any
data that you're talking to,

00:10:32.420 --> 00:10:35.590
or do a perform selector on main
thread to move control back to

00:10:35.590 --> 00:10:37.480
your main thread based on that.

00:10:37.570 --> 00:10:39.330
It's up to you.

00:10:40.260 --> 00:10:44.380
So now we're going to talk about
the matchmaking UI in more detail.

00:10:44.400 --> 00:10:47.730
So the features of the matchmaking UI,
we provide you the standard

00:10:47.860 --> 00:10:51.790
UI that lets you invite friends
to play the game and auto-match.

00:10:51.910 --> 00:10:55.040
But again, another really cool thing

00:10:55.320 --> 00:10:57.070
is you can rate games right here.

00:10:57.270 --> 00:10:59.360
So again,
another way that you can market your

00:10:59.360 --> 00:11:03.000
game by adopting these features.

00:11:03.140 --> 00:11:06.630
And when one player uses this UI,
if they invite someone,

00:11:06.670 --> 00:11:10.420
the friend gets a push
notification sent to their device,

00:11:10.460 --> 00:11:15.610
and they can accept or decline,
or they can buy the game

00:11:15.610 --> 00:11:15.610
if they don't have it.

00:11:17.640 --> 00:11:21.650
So now, I'm going to invite the
incomparable Jordan Ceccarelli up

00:11:21.760 --> 00:11:24.200
to demo some of these features.

00:11:24.270 --> 00:11:26.010
Thank you, Jordan.

00:11:29.210 --> 00:11:31.090
Good morning, everyone.

00:11:31.200 --> 00:11:31.980
I'm back.

00:11:32.160 --> 00:11:36.270
If you were here for the last session,
we talked a little bit about the

00:11:36.270 --> 00:11:40.900
single-player experience for Rochambeau,
which is this app here in the corner.

00:11:41.050 --> 00:11:45.020
It's our demo app that we're showing
right now to show you people how

00:11:45.100 --> 00:11:47.110
cool Game Center can be for an app.

00:11:47.420 --> 00:11:50.050
So right now,
instead of talking about single-player,

00:11:50.050 --> 00:11:52.650
we're going to talk about
a live multi-player game.

00:11:53.200 --> 00:11:58.980
So we will launch the app, and-- oh,
look at that.

00:11:59.060 --> 00:12:00.600
We've got an invite.

00:12:00.610 --> 00:12:01.340
Let's see.

00:12:01.420 --> 00:12:03.180
Jessica wants to play with us.

00:12:03.220 --> 00:12:05.060
How convenient.

00:12:06.880 --> 00:12:09.180
Jessica, if you're out there,
can you send me another one?

00:12:09.200 --> 00:12:10.640
Didn't get that one in time.

00:12:10.680 --> 00:12:14.020
Now one thing, you can barely hear it,
but if you listen very closely,

00:12:14.050 --> 00:12:18.190
you can hear a custom audio sound
play when we get this invite.

00:12:19.860 --> 00:12:21.100
Fancy.

00:12:21.150 --> 00:12:22.970
Normally,
if you've been using Game Center,

00:12:23.000 --> 00:12:26.800
you'll notice that we normally
play the trumpet sound,

00:12:26.970 --> 00:12:31.240
and we're allowing you to make
a custom sound for your invite.

00:12:31.240 --> 00:12:32.660
That's been cancelled.

00:12:32.660 --> 00:12:34.770
All right, let's do one more.

00:12:37.420 --> 00:12:38.050
There we go.

00:12:38.310 --> 00:12:39.940
Nice custom sound there.

00:12:40.120 --> 00:12:41.370
Better than the trumpets, I think.

00:12:41.580 --> 00:12:43.460
Fits the theme of the game.

00:12:43.570 --> 00:12:46.620
And here we are right in
the matchmaking sheet.

00:12:46.730 --> 00:12:48.800
So Jessica has started the game with me.

00:12:48.920 --> 00:12:52.060
And so in this case,
we want to pick rock, paper, or scissors.

00:12:52.060 --> 00:12:54.570
And it's going to -- you know,
Jessica's going to pick,

00:12:54.710 --> 00:12:56.650
I'm going to pick,
we'll play a game with each other.

00:12:56.780 --> 00:12:58.870
So Jessica always picks rock.

00:12:58.960 --> 00:12:59.800
I know this for a fact.

00:12:59.880 --> 00:13:02.140
I've looked at the leaderboards,
and I can see that that's her trend.

00:13:02.140 --> 00:13:06.090
So I'm going to pick paper
because I'm going to beat Jessica.

00:13:07.160 --> 00:13:09.700
Alas,
it turns out Jessica has picked scissors,

00:13:09.700 --> 00:13:10.680
and I have lost.

00:13:10.760 --> 00:13:12.730
So Jessica gets the crown for this.

00:13:12.790 --> 00:13:15.220
I'm a little bitter about that,
so I'm going to say no,

00:13:15.220 --> 00:13:16.470
I don't want to play again.

00:13:16.600 --> 00:13:18.100
But maybe I've come up
with a new strategy.

00:13:18.100 --> 00:13:21.880
I've realized that there is
no way Jessica can win again.

00:13:22.040 --> 00:13:26.430
So I'm going to play a multi-player game,
but this time I'm going

00:13:26.430 --> 00:13:28.330
to invite Jessica.

00:13:28.450 --> 00:13:29.820
So we'll invite a friend.

00:13:29.820 --> 00:13:31.290
Here's our friend list.

00:13:33.250 --> 00:13:34.890
Hey, she'll know.

00:13:35.170 --> 00:13:37.010
She'll know what I mean.

00:13:37.260 --> 00:13:39.440
So this is, again,
this is the matchmaking sheet.

00:13:39.470 --> 00:13:42.340
We're waiting for
Jessica to accept the game.

00:13:42.360 --> 00:13:46.060
And Jessica is now ready,
so we can play the game.

00:13:48.390 --> 00:13:51.340
So for sure,
Jessica will pick rock this time.

00:13:51.690 --> 00:13:54.660
So paper for the win.

00:13:54.930 --> 00:13:58.500
Okay, so Jessica's picked scissors
once again and gotten the crown.

00:13:58.530 --> 00:14:03.900
So directly beneath their choice,
we can see the time that they took.

00:14:03.900 --> 00:14:08.360
In the event of a tie, it would just say,
"Yay, who did it faster?" So we're

00:14:08.430 --> 00:14:09.500
not going to play again.

00:14:09.560 --> 00:14:13.040
But instead, we're going to show another
way you can start this game.

00:14:13.190 --> 00:14:16.500
We can swing by to the
actual Game Center client UI,

00:14:16.580 --> 00:14:20.020
switch over to friends,
and we'll look at Jessica here,

00:14:20.120 --> 00:14:22.960
and we have a game.

00:14:23.020 --> 00:14:25.800
Now normally, when you hit play game,
if you're in your games,

00:14:25.800 --> 00:14:28.000
it just launches the game,
you're good to go.

00:14:28.000 --> 00:14:29.750
But in this case,
we're in a friend's game sheet.

00:14:29.940 --> 00:14:32.800
So if we select play game,
it'll launch the game,

00:14:32.800 --> 00:14:34.900
and it'll go straight
into an invite sheet,

00:14:34.920 --> 00:14:38.090
and they'll be auto-selected
and ready to go.

00:14:44.510 --> 00:14:48.280
What would normally happen in this case,
you can see this today,

00:14:48.280 --> 00:14:52.460
because we ship with this functionality,
it launches a matchmaking sheet,

00:14:52.570 --> 00:14:54.660
and that person will
already be auto-selected.

00:14:54.800 --> 00:14:56.920
So from that point,
you just hit play game,

00:14:56.920 --> 00:14:58.890
they immediately go into the game.

00:14:58.970 --> 00:15:00.440
And it would look something like this.

00:15:00.660 --> 00:15:04.400
It's basically a shorter way
to get around a live game.

00:15:04.400 --> 00:15:06.540
We'll invite again.

00:15:09.710 --> 00:15:10.910
See if Jessica's up for the challenge.

00:15:11.070 --> 00:15:12.600
Third time's a charm, right?

00:15:12.780 --> 00:15:15.260
Yes!

00:15:15.740 --> 00:15:17.270
Alright.

00:15:19.590 --> 00:15:21.500
All right, this time let's go rock.

00:15:21.500 --> 00:15:23.360
Yes!

00:15:23.670 --> 00:15:25.460
All right, this is excellent.

00:15:25.490 --> 00:15:28.430
I have won, I get the crown,
so now I don't feel bad.

00:15:28.460 --> 00:15:30.530
If I were to leave right now,
I could leave a victor,

00:15:30.550 --> 00:15:33.460
even though I only won one,
but I like leaving on a high note.

00:15:33.460 --> 00:15:37.460
So, as you can see, so this game,
when you play against the computer,

00:15:37.460 --> 00:15:40.460
you'll play it a little bit, it's fun,
you'll eventually get bored,

00:15:40.460 --> 00:15:43.360
but now that I'm playing with my friend
Jessica or any of my other friends,

00:15:43.500 --> 00:15:46.460
say, in my office or my family members,
this is a game we can just keep playing,

00:15:46.460 --> 00:15:47.460
because it's fun.

00:15:47.460 --> 00:15:50.440
So, with that, now you know a little bit
how this game should work,

00:15:50.490 --> 00:15:53.470
and back to you, Christy,
you can talk about all

00:15:53.610 --> 00:15:54.440
these awesome features.

00:15:54.460 --> 00:15:55.460
Thank you.

00:15:55.460 --> 00:15:57.460
Thank you, Jordan.

00:15:57.460 --> 00:16:01.460
I can't help you with the demo gods,
but I might be able to help

00:16:01.460 --> 00:16:03.400
you with the Roshambo gods.

00:16:03.460 --> 00:16:06.260
One little advice there,
don't announce your

00:16:06.260 --> 00:16:07.440
move before you make it.

00:16:07.460 --> 00:16:11.460
Can I have the slides back, please?

00:16:11.460 --> 00:16:13.860
You don't want to stare at my iPad,
do you?

00:16:15.050 --> 00:16:16.180
Your slide's way cooler.

00:16:16.330 --> 00:16:16.540
Yes.

00:16:16.540 --> 00:16:18.700
Thank you.

00:16:18.820 --> 00:16:21.400
So now that he's showed
you how to do this,

00:16:21.450 --> 00:16:23.910
let's show you how to implement it.

00:16:24.050 --> 00:16:28.800
So there's several classes
involved doing the matchmaking UI.

00:16:28.850 --> 00:16:31.300
You make this thing
called a match request.

00:16:31.370 --> 00:16:34.900
You pass it to a
GK matchmaker view controller.

00:16:34.950 --> 00:16:41.420
Internally, it'll use a GK matchmaker,
and this will, voila, produce a GK match.

00:16:41.650 --> 00:16:43.970
And this match is the
thing that you'll use to,

00:16:43.990 --> 00:16:47.100
you know, observe your state changes
and send data back and forth.

00:16:47.180 --> 00:16:51.670
So the match is kind of what you'll live
with throughout the course of your game.

00:16:52.120 --> 00:16:55.000
So the steps to make a match
is to make the match request,

00:16:55.030 --> 00:16:58.630
initialize a matchmaker view
controller with that request,

00:16:58.880 --> 00:17:00.550
show the controller.

00:17:00.680 --> 00:17:04.000
At this point, the user can invite the
players up to max players.

00:17:04.120 --> 00:17:08.310
Auto-match will fill in the rest,
and you get your match.

00:17:08.570 --> 00:17:11.600
Let's talk about what this
match request is for a moment.

00:17:11.780 --> 00:17:13.740
Well, in match request,
you can set the minimum and

00:17:13.740 --> 00:17:15.800
maximum number of players.

00:17:15.960 --> 00:17:18.120
You can also assign player
groups and attributes.

00:17:18.300 --> 00:17:20.900
However,
we'll talk about those a little later.

00:17:21.010 --> 00:17:23.800
So for now, let's just go through
a little code example.

00:17:23.910 --> 00:17:27.910
So let's say we're talking about
two players playing together.

00:17:28.880 --> 00:17:32.080
On the initiator side,
the initiator sets up the

00:17:32.080 --> 00:17:35.420
match request and then passes
it to the view controller.

00:17:35.420 --> 00:17:40.040
So here's a simple match request
that's for two to four players.

00:17:40.040 --> 00:17:43.040
They allocate and edit
and set the properties.

00:17:43.040 --> 00:17:45.300
Now they show the
matchmaker view controller.

00:17:45.510 --> 00:17:47.180
So they allocate it.

00:17:47.200 --> 00:17:47.830
Now this is important.

00:17:47.880 --> 00:17:52.250
You need to set the matchmaker
delegate or various other callbacks

00:17:52.260 --> 00:17:55.860
that you'll want won't happen,
and then you present it.

00:17:56.530 --> 00:18:00.160
So there's a few outcomes that
can happen for the matchmaking UI.

00:18:00.200 --> 00:18:03.530
You know,
the coolest one is if the user hits play,

00:18:03.530 --> 00:18:05.640
then you'll actually get that match.

00:18:05.810 --> 00:18:08.030
This is the function that will
give you the match that you'll use

00:18:08.170 --> 00:18:09.860
throughout the rest of the game.

00:18:09.980 --> 00:18:13.070
So at this point, you need to set the
match delegate to self,

00:18:13.080 --> 00:18:16.300
and then you can set up and
get going with your game.

00:18:17.110 --> 00:18:19.760
Now, if the user happens to hit cancel,
maybe they don't like playing

00:18:19.920 --> 00:18:23.100
with that player because they
keep beating them or something,

00:18:23.170 --> 00:18:25.600
then you need to clean up your state.

00:18:25.750 --> 00:18:32.200
You know, take down the matchmaker view
controller and go back to the main menu.

00:18:32.420 --> 00:18:36.100
Similarly, if the match fails,
let's say Jordan's inviting someone

00:18:36.190 --> 00:18:40.840
who's driving through a tunnel
or has other networking issues,

00:18:40.960 --> 00:18:42.660
you'll get a failure.

00:18:42.800 --> 00:18:46.620
And you need to look at the error,
take appropriate action,

00:18:46.790 --> 00:18:50.020
and then clean up like
you would with cancel.

00:18:51.110 --> 00:18:54.520
Now, to handle invites,
we provide you this invite

00:18:54.520 --> 00:18:56.600
handler block that you set.

00:18:56.730 --> 00:18:59.300
And this is called both when
the user launches the game

00:18:59.300 --> 00:19:03.450
from the Game Center app,
or when a user's accepted an invite.

00:19:03.610 --> 00:19:06.780
In both cases,
you'll initialize a new matchmaker

00:19:06.780 --> 00:19:11.790
view controller with appropriate data,
either the requests and

00:19:11.790 --> 00:19:14.960
players or the invite info,
and then put up the UI.

00:19:15.140 --> 00:19:17.110
So to show this,

00:19:22.730 --> 00:19:24.640
You know,
here's your invite handler block.

00:19:24.700 --> 00:19:27.000
It's set on the GK Matchmaker.

00:19:27.040 --> 00:19:30.300
And by the way, the GK Matchmaker is a
shared singleton matchmaker.

00:19:30.300 --> 00:19:31.100
You don't construct them.

00:19:31.100 --> 00:19:32.140
You just use this one.

00:19:32.140 --> 00:19:34.550
And there's an interesting
feature of this block.

00:19:34.610 --> 00:19:36.170
It has two arguments.

00:19:36.170 --> 00:19:37.770
An invite or players.

00:19:37.770 --> 00:19:41.710
And only one of these will
be non-nil at any given time.

00:19:41.710 --> 00:19:43.280
And you use this to dispatch.

00:19:43.620 --> 00:19:46.630
So if you have an invite,
invite will be non-nil.

00:19:46.630 --> 00:19:49.590
If you have players,
players will be non-nil.

00:19:49.590 --> 00:19:52.490
So in this code here,
we go if you have an invite,

00:19:52.490 --> 00:19:54.440
you construct the
matchmaker view controller,

00:19:54.440 --> 00:19:58.470
init with invite, you set the delegate,
and you pose it.

00:19:58.820 --> 00:20:03.540
In your else case, if you have players,
you construct it with the match

00:20:03.540 --> 00:20:08.640
request that you've saved from before,
your players, delegate, pose it.

00:20:08.830 --> 00:20:10.790
I mean, it's pretty easy.

00:20:11.400 --> 00:20:13.510
So in summary,
you create a match request,

00:20:13.540 --> 00:20:17.360
you present the standard UI,
you handle invites.

00:20:17.360 --> 00:20:19.750
And by the way,
invites may be called at various times.

00:20:19.760 --> 00:20:22.660
Let's say you're launching your
app and an invite comes in.

00:20:22.660 --> 00:20:27.780
Well, you need to be prepared for that to
show up right after you authenticate.

00:20:27.800 --> 00:20:32.220
So don't get your game going too
far in one way before you do this.

00:20:32.430 --> 00:20:34.490
Also, it may get called during the game.

00:20:34.600 --> 00:20:36.400
Let's say I'm playing
the game with Jordan,

00:20:36.400 --> 00:20:38.750
and my other friend invites me,
and I decide, you know,

00:20:38.750 --> 00:20:40.540
I really want to play with
this other person instead.

00:20:40.540 --> 00:20:43.760
And I go, "Accept." Well,
the user has basically made a

00:20:43.770 --> 00:20:48.460
decision to exit the game with Jordan,
so you have to clean up that game and

00:20:48.650 --> 00:20:50.930
start a new one with a new player.

00:20:50.940 --> 00:20:54.920
You just need to handle
those various times.

00:20:54.920 --> 00:20:59.040
And also, the same UI works even if you
want to host the game yourself.

00:20:59.040 --> 00:21:02.330
It won't do everything for you,
but will help you out.

00:21:02.340 --> 00:21:04.230
And now I'm going to go
into programmatic automatch,

00:21:04.230 --> 00:21:07.680
which is really easy,
but it builds on these concepts.

00:21:09.430 --> 00:21:13.840
So in this case, you get rid of the
GK Matchmaker view controller,

00:21:13.840 --> 00:21:17.380
and you just have the match
request and the matchmaker.

00:21:17.520 --> 00:21:20.420
Create the match request,
you feed it to the matchmaker,

00:21:20.500 --> 00:21:21.720
and guess what?

00:21:21.830 --> 00:21:24.450
A GK match appears.

00:21:24.570 --> 00:21:26.890
So show how this is done.

00:21:28.200 --> 00:21:30.360
You basically get the shared matchmaker.

00:21:30.360 --> 00:21:34.660
You call find match for request,
and you handle the error,

00:21:34.720 --> 00:21:36.640
and if you don't have an
error and you get a match,

00:21:36.640 --> 00:21:38.050
you basically are ready to play.

00:21:40.780 --> 00:21:45.700
Now let me talk a little bit
more about this match request.

00:21:45.760 --> 00:21:48.060
You know, I didn't talk about player
groups or attributes,

00:21:48.060 --> 00:21:50.290
so let's do that now.

00:21:50.590 --> 00:21:55.180
So to understand player groups,
let's assume that you have a racing game,

00:21:55.180 --> 00:22:01.440
and you have four tracks: oval,
figure eight, curvy, and the wave.

00:22:01.500 --> 00:22:05.880
And you want to let your players choose
which track they want to compete on.

00:22:06.160 --> 00:22:08.480
So in this case,
they wish to do the figure eight.

00:22:08.520 --> 00:22:09.590
Well, you make the match request.

00:22:09.680 --> 00:22:13.430
You set the player group to figure eight,
which is an enum that you decide.

00:22:13.440 --> 00:22:17.040
You can choose any arbitrary
numbers for this that you wish.

00:22:17.090 --> 00:22:20.740
And it's that easy to
support different tracks.

00:22:20.800 --> 00:22:24.080
The other ideas for group
assignment include difficulty.

00:22:24.080 --> 00:22:29.150
If you're really not very good at a game,
or maybe you're really awesome, well,

00:22:29.250 --> 00:22:31.960
you can segregate your players by group.

00:22:32.010 --> 00:22:36.980
Maybe a game type like deathmatch,
capture the flag, or team fortress.

00:22:37.030 --> 00:22:42.460
Or if your game is really sensitive to
lag and you want to minimize latency,

00:22:42.500 --> 00:22:44.970
well, maybe you group players
from North America together,

00:22:44.980 --> 00:22:46.430
and Europe, and Asia.

00:22:46.640 --> 00:22:51.020
And that way, they have the best
chance to minimize ping.

00:22:51.060 --> 00:22:53.600
And if you use player groups,
we give you an API to check

00:22:53.600 --> 00:22:54.750
the activity on a group.

00:22:55.000 --> 00:22:58.590
So if for some reason you make 20 groups,

00:22:58.730 --> 00:23:02.890
But like, if one player goes into one
group that has no players,

00:23:02.890 --> 00:23:07.520
well, you can then shift them to
another group that's more busy.

00:23:07.520 --> 00:23:12.900
So that'll help you manage the assignment
of these groups in a dynamic way.

00:23:13.620 --> 00:23:14.490
Now, player attributes.

00:23:14.500 --> 00:23:17.000
This is sort of the
flip side of the coin.

00:23:17.070 --> 00:23:21.740
Let's say I want to play on
the red team or the blue team.

00:23:21.800 --> 00:23:23.880
I want to play in a role-playing game.

00:23:23.880 --> 00:23:27.100
I want to play a fighter,
or I want to be the little mage.

00:23:27.300 --> 00:23:31.160
Well, player attributes let you
do these kinds of things.

00:23:31.330 --> 00:23:35.210
What we do is we provide you
a 32-bit unsigned integer,

00:23:35.210 --> 00:23:38.900
and you assign that for each player,
and we OR those values

00:23:39.490 --> 00:23:41.030
together to form a match.

00:23:41.080 --> 00:23:43.380
Let me use an example of chess.

00:23:43.660 --> 00:23:48.730
Well, I really love to play black,
because I like the challenge.

00:23:48.870 --> 00:23:53.580
So my black bits are going to
be all the high order bits.

00:23:53.720 --> 00:23:56.140
Now let's say someone else likes
to play white because they want

00:23:56.140 --> 00:23:58.280
the advantage of a half move.

00:23:58.390 --> 00:24:02.200
Well, in that case,
they're going to be the low-order bits.

00:24:02.310 --> 00:24:04.740
Let's say finally, like Jordan,
he doesn't care.

00:24:04.910 --> 00:24:06.700
He'll play anyone.

00:24:06.910 --> 00:24:09.190
So we set all ones.

00:24:09.300 --> 00:24:11.490
Now we OR the values of
the players together,

00:24:11.490 --> 00:24:16.400
and if two players
OR together to form 1-1-1-1-1,

00:24:16.560 --> 00:24:17.800
you get a match.

00:24:17.860 --> 00:24:19.660
This is a really cool feature.

00:24:19.840 --> 00:24:26.620
You guys can come up with really
cool things to enhance your games.

00:24:26.830 --> 00:24:30.240
So in summary, auto-match,
you create a match request,

00:24:30.290 --> 00:24:33.180
use player groups and
attributes as desired,

00:24:33.290 --> 00:24:36.380
and then request the match,
wait for the players to connect,

00:24:36.380 --> 00:24:36.930
and play.

00:24:37.060 --> 00:24:39.990
It's that easy.

00:24:40.080 --> 00:24:42.570
Now, hosting your own server.

00:24:43.640 --> 00:24:47.270
You can use the programmatic automatter,
you can use our UI,

00:24:47.270 --> 00:24:48.820
as I've already mentioned.

00:24:48.960 --> 00:24:49.830
Now, this is important.

00:24:49.840 --> 00:24:52.300
You need to use the player
ID to track players.

00:24:52.510 --> 00:24:57.310
Typically, when you make your own server,
it might be multi-platform or something.

00:24:57.550 --> 00:24:59.600
You'll probably have
your own sign-in scheme.

00:24:59.600 --> 00:25:03.230
Well, whatever those usernames are,
they need to be associated

00:25:03.340 --> 00:25:05.870
with player IDs,
so you have to maintain that

00:25:05.870 --> 00:25:08.240
association and keep track of them.

00:25:08.370 --> 00:25:11.440
As you create matches,
you need to communicate these

00:25:11.440 --> 00:25:13.600
matched players to your server.

00:25:14.480 --> 00:25:16.820
And unfortunately,
we can't do much to help you other

00:25:16.820 --> 00:25:20.050
than using our networking classes,
but you have to implement

00:25:20.130 --> 00:25:21.370
your own networking.

00:25:22.760 --> 00:25:26.440
So, a way to summarize is
that we'll hook you up,

00:25:26.460 --> 00:25:30.370
but then you've got to provide the play.

00:25:31.400 --> 00:25:35.700
So automatching using the programmatic
automatching API is really simple.

00:25:35.780 --> 00:25:39.540
You make the match request,
you set minimum, maximum players.

00:25:39.660 --> 00:25:42.490
You get the shared matchmaker,
and you go find players

00:25:42.490 --> 00:25:44.140
hosted for match request.

00:25:44.240 --> 00:25:46.100
It's a little different
than the other one.

00:25:46.190 --> 00:25:48.610
In this case,
it's going to return a list of

00:25:48.790 --> 00:25:52.260
player IDs rather than a GK match.

00:25:52.400 --> 00:25:55.660
And you check those player IDs if
the count is greater than zero.

00:25:55.750 --> 00:25:57.500
And if so, you can start your match.

00:25:57.540 --> 00:26:00.410
If there's an error,
you have to handle the error.

00:26:00.650 --> 00:26:05.360
Now for the matchmaking UI,
there's some small changes.

00:26:05.420 --> 00:26:08.160
You make the matchmaker view controller.

00:26:08.240 --> 00:26:11.890
You set hosted to yes,
and then you're good to go.

00:26:11.980 --> 00:26:15.190
You present it.

00:26:15.190 --> 00:26:15.190
However,

00:26:15.510 --> 00:26:21.100
There's one little subtle thing here,
which is, let's say I go invite Jordan.

00:26:21.140 --> 00:26:25.540
And so I go to that picker,
I choose Jordan, it sends him an invite.

00:26:25.640 --> 00:26:27.180
He hits accept.

00:26:27.470 --> 00:26:31.050
His side is going to go
sign him onto your server.

00:26:31.520 --> 00:26:36.570
But I'm also going to get a
callback when he hits Accept,

00:26:36.570 --> 00:26:39.270
called Did Receive
Accept from Hosted Player.

00:26:39.270 --> 00:26:45.460
And when this comes in,
you need to go onto the server and

00:26:45.500 --> 00:26:46.500
check that he's actually there.

00:26:46.500 --> 00:26:50.970
And if you do so, call Set Hosted
Player Ready or Connected.

00:26:50.980 --> 00:26:54.110
And if you do this,
on the UI where it says

00:26:54.110 --> 00:26:57.480
Waiting for Jordan,
it'll go to Ready.

00:26:57.480 --> 00:27:00.270
So this is how you provide feedback that
the person is actually on the server.

00:27:00.270 --> 00:27:03.520
So this is a little thing to
help you that you have to deal

00:27:03.520 --> 00:27:05.480
with that we can't do for you.

00:27:06.460 --> 00:27:10.860
Now, on both sides, once they hit play,
you know, if there's any auto-matches,

00:27:10.860 --> 00:27:12.330
it's going to go out
and do the auto-matches,

00:27:12.340 --> 00:27:16.010
and when that's all done,
it's going to call did-find-players.

00:27:16.080 --> 00:27:19.040
At this point,
you dismiss the view controller,

00:27:19.040 --> 00:27:20.620
and you start the match.

00:27:20.710 --> 00:27:21.840
By the way,
you should do dismiss the view

00:27:21.850 --> 00:27:23.340
controller on the other version,
too.

00:27:23.340 --> 00:27:24.360
It was just not on the slide.

00:27:28.620 --> 00:27:31.800
So now we're going to talk
about peer-to-peer networking.

00:27:31.920 --> 00:27:34.850
So peer-to-peer networking
is our features to handle

00:27:34.850 --> 00:27:36.830
communications among players.

00:27:37.030 --> 00:27:40.300
This allows you to send
data and receive data.

00:27:40.380 --> 00:27:43.140
We have options for reliable
and unreliable communications,

00:27:43.140 --> 00:27:45.270
and I'll get into that in a moment.

00:27:45.430 --> 00:27:48.580
It also,
you need to handle player state changes.

00:27:48.620 --> 00:27:49.940
You know,
we've already talked a little bit

00:27:49.940 --> 00:27:52.420
about waiting for players to connect.

00:27:52.470 --> 00:27:55.450
We can also handle
disconnection mid-game.

00:27:55.560 --> 00:27:57.780
And we can even add players
to an existing game.

00:27:57.780 --> 00:28:00.810
This is a new feature for iOS 5.

00:28:01.160 --> 00:28:05.070
I also recommend you use host
selection to minimize network overhead,

00:28:05.230 --> 00:28:08.900
and I'll explain what that
is a little more in a moment.

00:28:09.240 --> 00:28:12.180
So the classes to use in
peer-to-peer multiplayer,

00:28:12.180 --> 00:28:16.600
they're used in both the wait for
players stage and the play stage.

00:28:16.700 --> 00:28:19.020
In wait for players,
you just observe state changes,

00:28:19.170 --> 00:28:23.200
and this is the right time to perform
host selection if you choose to do so.

00:28:23.300 --> 00:28:28.620
During the play stage,
you just send and receive data,

00:28:28.650 --> 00:28:32.580
and you also listen to did change
state just in case people disconnect

00:28:32.580 --> 00:28:32.580
and you've got to take some action.

00:28:33.540 --> 00:28:35.980
So let's talk about sending data.

00:28:36.050 --> 00:28:41.560
How many of you out there like games that
really lag when you play multiplayer?

00:28:41.650 --> 00:28:43.190
Anyone?

00:28:43.610 --> 00:28:43.990
Boo!

00:28:43.990 --> 00:28:45.440
Yeah, I hate that.

00:28:45.500 --> 00:28:48.680
How many of you like really fast,
responsive games?

00:28:49.050 --> 00:28:50.130
Yeah.

00:28:50.260 --> 00:28:51.930
So how do you do this?

00:28:52.360 --> 00:28:55.990
Well, you want to keep data
size as small as possible,

00:28:56.140 --> 00:28:58.130
and you want to minimize
update frequency.

00:28:58.300 --> 00:29:01.350
What that means is you may have
written this game that updates

00:29:01.440 --> 00:29:06.420
at 30 or 60 frames a second,
but you definitely don't want to send

00:29:06.780 --> 00:29:08.810
updates to your peers at that rate.

00:29:08.870 --> 00:29:10.820
That would be crazy.

00:29:11.120 --> 00:29:16.880
And if you're sending updates,
you don't want to send your entire model.

00:29:16.880 --> 00:29:19.620
Let's say we have a tennis -- go
back to the tennis game example.

00:29:19.740 --> 00:29:24.430
If I'm running across the court
to hit that backhand or forehand,

00:29:24.430 --> 00:29:28.560
you don't need to send every
animated frame of my motion.

00:29:28.890 --> 00:29:33.310
You could just send a point
maybe every fifth of a second and

00:29:33.320 --> 00:29:36.000
then let the game interpolate.

00:29:36.090 --> 00:29:41.000
So that would both keep data size
small and minimize update frequency.

00:29:42.180 --> 00:29:45.750
Now, let's get back to reliable
versus unreliable.

00:29:46.100 --> 00:29:49.860
So if we're playing tennis,
and I just beat Jordan in a game, well,

00:29:49.980 --> 00:29:56.190
it's one game in a set,
but when I send the notice that I won,

00:29:56.190 --> 00:29:59.250
then I want to get an acknowledgment.

00:29:59.280 --> 00:30:02.100
I don't want to go into the
start of the next game until

00:30:02.100 --> 00:30:03.810
his device acknowledges it.

00:30:03.910 --> 00:30:06.270
So that's what reliable means,
is that I send the data,

00:30:06.270 --> 00:30:07.820
and I'll get an acknowledgment.

00:30:08.840 --> 00:30:12.300
In contrast with unreliable data,

00:30:12.580 --> 00:30:15.460
I won't get an acknowledgement for it.

00:30:15.460 --> 00:30:18.500
It's just best possible delivery.

00:30:18.630 --> 00:30:19.980
So where would that be useful?

00:30:20.190 --> 00:30:25.260
Well, if I'm running across the court and
I'm sending the updates of position,

00:30:25.330 --> 00:30:28.300
if I were to be reliable,
I'd be moving like this.

00:30:29.510 --> 00:30:30.560
And so forth.

00:30:30.610 --> 00:30:34.490
But with Unreliable,
I'm just sending smooth updates.

00:30:34.580 --> 00:30:39.570
And if a packet gets dropped, fine,
the other side can interpolate.

00:30:42.020 --> 00:30:45.690
Now, the code here shows how to
send data to all players.

00:30:45.800 --> 00:30:47.430
What you do is you make an NSData.

00:30:47.640 --> 00:30:52.390
You should pack it tightly with your,
you know, you know, when you populate it.

00:30:52.510 --> 00:30:58.560
I recommend you don't use the, you know,
NSCoder, because they tend to, you know,

00:30:58.560 --> 00:31:00.640
make a lot -- use up a lot of space.

00:31:00.760 --> 00:31:03.630
This is a case where you need
to pack your data tightly.

00:31:03.750 --> 00:31:05.260
And you just call
sendData to all players,

00:31:05.260 --> 00:31:07.600
and then you just have
to handle the error.

00:31:07.680 --> 00:31:09.350
This is our broadcast.

00:31:09.520 --> 00:31:14.360
Now, if you want to send to a subset of
your players or do point-to-point,

00:31:14.680 --> 00:31:18.180
you do the same thing,
but you just send data to players.

00:31:18.790 --> 00:31:20.850
Receiving data is really easy.

00:31:20.950 --> 00:31:24.940
You just implement this method
on your GK match delegate.

00:31:24.940 --> 00:31:29.070
Did receive data, and you parse it.

00:31:29.200 --> 00:31:32.130
Now let's talk about waiting
for players to connect.

00:31:33.940 --> 00:31:37.280
You know, I've mentioned this
method did change state,

00:31:37.280 --> 00:31:40.180
and how you can, you know,
observe different state changes.

00:31:40.180 --> 00:31:43.060
But there's one little subtlety
here that I need to talk about,

00:31:43.060 --> 00:31:44.510
which is expected players.

00:31:44.520 --> 00:31:47.570
Now, this is a property on the match,
and it's the number of

00:31:47.570 --> 00:31:49.260
players you're waiting on.

00:31:49.260 --> 00:31:55.040
This is not all the players in the match,
but rather, let's say, you know,

00:31:55.040 --> 00:31:56.230
my four-player example.

00:31:56.250 --> 00:31:59.150
I invite Jordan to play,
and there's two auto-match players.

00:31:59.160 --> 00:32:03.450
Well, in that case,
expected number of players is two.

00:32:03.900 --> 00:32:08.090
And then as those players connect,
that'll count down one, zero,

00:32:08.320 --> 00:32:10.130
and then we're ready to go.

00:32:11.680 --> 00:32:17.120
So the way you handle this is if the
game has not already started and the

00:32:17.140 --> 00:32:20.820
match make expected players goes to zero,
that's your sign that it's

00:32:20.820 --> 00:32:22.100
time to start playing.

00:32:22.250 --> 00:32:26.280
So this little code skeleton kind
of sketches this out for you.

00:32:27.550 --> 00:32:29.960
Now some offline considerations.

00:32:30.070 --> 00:32:31.780
Players may come and go.

00:32:31.960 --> 00:32:35.060
I may be playing,
and as I've described before,

00:32:35.070 --> 00:32:36.790
I take a phone call.

00:32:36.910 --> 00:32:40.540
Somebody may lose link because
they drive through a tunnel,

00:32:40.540 --> 00:32:43.300
or they may not like the
way the game is going,

00:32:43.300 --> 00:32:46.740
and they may rage hit the
home button and go to home.

00:32:46.850 --> 00:32:51.310
Well, it's important that your game
continues in all these cases

00:32:51.310 --> 00:32:54.310
if there's remaining players,
so make sure you handle

00:32:54.310 --> 00:32:54.310
the disconnect gracefully.

00:32:56.160 --> 00:33:02.500
Now, a new feature for iOS 5 is we allow
it to reconnect for one-on-one games.

00:33:02.540 --> 00:33:06.210
What you do is you -- and this is
an opt-in because we didn't want to

00:33:06.210 --> 00:33:09.240
affect compatibility with older games.

00:33:09.240 --> 00:33:12.170
So what you do is you implement
this method should re-invite

00:33:12.170 --> 00:33:15.240
player on your match delegate,
and you just return true.

00:33:15.240 --> 00:33:17.240
It's as easy as that.

00:33:17.880 --> 00:33:20.280
We also allow you to add
players to an existing game.

00:33:20.410 --> 00:33:24.800
So if I'm playing with Jordan, I say,
"Hey, you want to come join the fun?"

00:33:24.880 --> 00:33:29.300
"Sure." Create a match request,
create a matchmaker view controller.

00:33:29.450 --> 00:33:32.920
You call add players to match,
and that's illustrated here.

00:33:32.950 --> 00:33:36.930
It's one new method,
and you can add players to the match.

00:33:38.730 --> 00:33:43.040
So let's talk about being
a good network citizen.

00:33:43.290 --> 00:33:46.840
We've talked quite a bit about
keeping network traffic to a minimum,

00:33:46.910 --> 00:33:50.430
minimizing the size of the packets,
and only sending them

00:33:50.440 --> 00:33:53.570
as often as you need to.

00:33:53.840 --> 00:33:57.940
Another level of this is choosing
the right network strategy.

00:33:57.940 --> 00:34:02.200
And we recommend you pick
a peer to act as the host.

00:34:02.340 --> 00:34:05.960
So to illustrate this,
kind of the naive way to

00:34:05.960 --> 00:34:09.700
implement peer-to-peer is
let's say we have four games,

00:34:09.710 --> 00:34:12.840
one over there, one there, one there,
and each of them have a

00:34:12.840 --> 00:34:16.270
copy of the game model,
and each of the players

00:34:16.270 --> 00:34:17.400
is taking actions.

00:34:17.440 --> 00:34:21.500
And they're just going to broadcast
their updates to each other.

00:34:21.570 --> 00:34:23.150
Well,
they may get them in different orders.

00:34:23.200 --> 00:34:24.270
They're going to get updates.

00:34:24.450 --> 00:34:25.560
They're going to update their models.

00:34:25.640 --> 00:34:27.770
But now the models may not be in sync,
you know,

00:34:27.770 --> 00:34:29.900
because of different network latencies.

00:34:29.900 --> 00:34:34.500
So you have to implement a coherency
protocol to keep the models up to date.

00:34:34.570 --> 00:34:37.300
So more traffic.

00:34:37.360 --> 00:34:38.260
So this is a mess.

00:34:38.420 --> 00:34:41.510
It's really complicated
in your game logic,

00:34:41.640 --> 00:34:43.800
and it uses a lot of bandwidth.

00:34:43.860 --> 00:34:46.280
So there's a better alternative.

00:34:46.350 --> 00:34:47.770
Pick one device.

00:34:47.960 --> 00:34:50.040
Pick the one that's on Wi-Fi.

00:34:50.290 --> 00:34:51.280
Pick the newest device.

00:34:51.350 --> 00:34:52.900
Come up with your own metric.

00:34:52.940 --> 00:34:54.500
Come up with your own way to pick one.

00:34:54.500 --> 00:34:55.900
But pick one.

00:34:55.940 --> 00:34:58.100
And make that sort of the truth.

00:34:58.160 --> 00:35:01.600
Now, each of the peers can send
their updates to that master in

00:35:01.600 --> 00:35:03.670
point-to-point communication.

00:35:03.890 --> 00:35:09.490
And then the host can broadcast
its world updates to the peers.

00:35:09.590 --> 00:35:13.130
This will at least cut your
network bandwidth in half

00:35:13.150 --> 00:35:15.200
and most likely much more.

00:35:15.200 --> 00:35:15.200
Thank you.

00:35:18.180 --> 00:35:23.340
So to summarize peer-to-peer networking,
GK Match provides all the API.

00:35:23.450 --> 00:35:27.560
You need to handle player state changes,
and I strongly encourage you

00:35:27.560 --> 00:35:29.490
to be a good network citizen.

00:35:29.830 --> 00:35:33.300
And another choice here is
consider going the extra mile

00:35:33.300 --> 00:35:35.400
and hosting your own server.

00:35:35.400 --> 00:35:39.420
So in-game voice chat.

00:35:41.220 --> 00:35:44.560
So voice chat,
it's a really cool feature.

00:35:44.560 --> 00:35:48.600
It adds a lot more
liveliness to your game.

00:35:48.600 --> 00:35:52.020
If I'm playing tennis
and I just ace my friend,

00:35:52.230 --> 00:35:55.340
if he's on the other side of the country,
it's just going to be pixels on a screen.

00:35:55.460 --> 00:36:02.350
But if we're in there in voice chat,
I can go, "Yeah, I gotcha!" That's what

00:36:02.350 --> 00:36:05.730
voice chat will give you.

00:36:07.140 --> 00:36:10.090
So this allows players
to talk to each other,

00:36:10.100 --> 00:36:13.960
and gets them more involved,
and enhances the sense of competition.

00:36:14.030 --> 00:36:18.510
It's really easy to integrate,
and we handle the networking for you.

00:36:19.810 --> 00:36:24.700
So some of the features of chat
include multiple name chats.

00:36:24.770 --> 00:36:28.080
So let's say in our tennis
example we're playing doubles,

00:36:28.180 --> 00:36:32.090
and we want to have one chat for
all the four players in the game,

00:36:32.210 --> 00:36:35.940
but I also want to have a private
chat for the red team over here.

00:36:35.960 --> 00:36:41.580
I want to be able to talk strategy
or maybe a flaw in their game.

00:36:41.660 --> 00:36:43.180
So we allow you to do both.

00:36:43.180 --> 00:36:48.260
And you can hear audio from whatever set
of chats that you wish at any given time.

00:36:48.260 --> 00:36:52.530
Now, one limitation is the
microphone is routed to only

00:36:52.540 --> 00:36:55.260
one of these chats at a time.

00:36:55.260 --> 00:36:59.630
You can adjust the volume of
a chat or mute the player.

00:37:00.290 --> 00:37:05.700
Now you handle player state feedback
via player state update handler.

00:37:07.520 --> 00:37:10.330
So to set up voice chat,
you set up an audio session,

00:37:10.330 --> 00:37:14.880
and the way you do this is
you get the shared instance.

00:37:14.880 --> 00:37:19.450
You then set category,
audio/video session category,

00:37:19.590 --> 00:37:23.030
play and record,
and then you set it as active.

00:37:23.260 --> 00:37:26.380
So once you've made your sessions,
here's a little example of what

00:37:26.380 --> 00:37:28.950
I just talked about with the tennis.

00:37:29.100 --> 00:37:33.100
So we have a main chat and
my team chat for red team.

00:37:33.250 --> 00:37:38.370
So what we do is we get voice chat
with name to get that particular chat.

00:37:38.510 --> 00:37:42.990
We stop the main chat so that they
can't hear what I'm telling my partner,

00:37:43.070 --> 00:37:45.620
and then you start the team chat.

00:37:45.620 --> 00:37:50.570
At that point,
you call make team chat active to yes,

00:37:50.650 --> 00:37:54.600
and this will route the
microphone to your team chat.

00:37:54.600 --> 00:37:59.470
And another good piece of advice
here is add audio-visual feedback

00:37:59.470 --> 00:38:01.950
that the microphone is active.

00:38:01.950 --> 00:38:05.550
So you can say set --
self-indicate microphone active.

00:38:05.550 --> 00:38:06.750
That's something you have to implement.

00:38:06.750 --> 00:38:10.900
But you might put a microphone by
your picture in the game or something.

00:38:12.750 --> 00:38:16.020
Now, handling player state changes.

00:38:16.070 --> 00:38:19.830
You know, there's player connected,
disconnected, speaking, and silent.

00:38:19.940 --> 00:38:22.680
These are here for you to

00:38:22.770 --> 00:38:24.600
You know, make your UI even richer.

00:38:24.600 --> 00:38:27.790
So if somebody's talking,
you can make little sound waves

00:38:27.790 --> 00:38:29.360
coming out of their photo.

00:38:29.550 --> 00:38:32.290
So it's really cool.

00:38:32.290 --> 00:38:32.290
You should use this.

00:38:34.430 --> 00:38:37.660
So things to consider
in multiplayer setup.

00:38:37.830 --> 00:38:41.650
Well, you set this up in iTunes Connect,
and you set up this thing

00:38:41.690 --> 00:38:46.030
called a compatibility matrix,
which will determine what versions

00:38:46.030 --> 00:38:50.660
of your game can match with
other versions of your game.

00:38:50.750 --> 00:38:55.990
And let's say I invite
Jordan to play Rochambeau.

00:38:56.360 --> 00:39:00.300
You know, if I happen to have the
latest version and he doesn't,

00:39:00.360 --> 00:39:03.340
then it'll check the
compatibility matrix,

00:39:03.460 --> 00:39:06.980
and if they aren't compatible,
then it'll offer him an

00:39:07.230 --> 00:39:09.060
update if it's available.

00:39:09.110 --> 00:39:14.780
But I can only upgrade him
to the current version,

00:39:14.810 --> 00:39:16.580
so if I'm playing some older version,
he's going to get the newer

00:39:16.580 --> 00:39:16.580
version if they're compatible.

00:39:19.400 --> 00:39:25.250
So, kind of to wrap up here,
some notes on testing.

00:39:25.770 --> 00:39:29.500
When you get your game out to players,
the last thing you want them

00:39:29.500 --> 00:39:33.700
to do is have a bad experience,
have stuff not work.

00:39:33.730 --> 00:39:37.850
It takes a lot of work to
get the stuff to work well.

00:39:37.980 --> 00:39:43.010
So you need to test on multiple devices,
iPads, iPhones, older iPhones,

00:39:43.010 --> 00:39:44.440
newer iPhones.

00:39:44.440 --> 00:39:49.940
You need to test on different accounts,
different networks.

00:39:50.020 --> 00:39:54.280
You know, in this country,
Verizon versus AT&T, for example.

00:39:54.300 --> 00:39:57.460
But test it around the world if you can,
because different carriers

00:39:57.460 --> 00:40:02.370
may have very different quirks
that may affect your gameplay.

00:40:03.710 --> 00:40:07.800
Now, testing on the simulator is limited,
so don't -- it's really not

00:40:07.800 --> 00:40:08.830
going to get you very far.

00:40:08.840 --> 00:40:11.600
You can't do invitations,
there's no voice chat,

00:40:11.680 --> 00:40:14.600
and there are no push notifications.

00:40:16.940 --> 00:40:20.910
So in summary,
multiplayer is a really popular feature.

00:40:20.920 --> 00:40:23.300
It adds longevity to your app.

00:40:23.300 --> 00:40:27.440
And I've talked about
peer-to-peer and hosted gaming.

00:40:27.670 --> 00:40:29.720
You're going to learn about
turn-based in the next session,

00:40:29.720 --> 00:40:30.790
so stick around for that.

00:40:30.820 --> 00:40:32.840
It's awesome.

00:40:32.840 --> 00:40:36.870
We talked about the basic flow,
how to use our provided matchmaker UI,

00:40:36.870 --> 00:40:40.260
some cool things you
can do with auto-match.

00:40:40.410 --> 00:40:43.650
We told you how we can help
you set up for a hosted server.

00:40:43.910 --> 00:40:47.760
We've talked about peer-to-peer
communication and best practices.

00:40:47.920 --> 00:40:50.100
I've shown you about voice chat.

00:40:50.250 --> 00:40:55.310
Talked about compatibility and
upgrades during Game Center services.

00:40:55.500 --> 00:40:58.280
And finally,
I've given my admonishment about testing.

00:40:58.440 --> 00:41:00.080
Please test.

00:41:00.200 --> 00:41:01.390
I want to love your game.

00:41:01.660 --> 00:41:04.300
I want your game to go
to the top of the charts.

00:41:04.370 --> 00:41:05.950
Good luck.

00:41:06.060 --> 00:41:10.360
For more information,
talk to Alan Schaffer.

00:41:10.840 --> 00:41:13.460
and related sessions.

00:41:13.600 --> 00:41:17.990
You know,
they're going to be the essential game

00:41:17.990 --> 00:41:19.080
technology talks repeated on Friday.

00:41:19.320 --> 00:41:21.800
and Turn-Based Gaming coming after this.

00:41:21.810 --> 00:41:25.190
And Nate is going to repeat
his session on Friday as well.

00:41:25.390 --> 00:41:26.840
So please come to those.

00:41:26.950 --> 00:41:29.090
So thank you very much.