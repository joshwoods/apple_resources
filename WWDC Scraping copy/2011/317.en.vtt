WEBVTT

00:00:12.150 --> 00:00:13.770
Greetings Xcode fans.

00:00:13.950 --> 00:00:17.940
So we are here together,
thank you for coming to this presentation

00:00:17.940 --> 00:00:23.060
to talk about device management
and app submission with Xcode 4.

00:00:23.130 --> 00:00:25.460
I should add Xcode 4.2.

00:00:25.720 --> 00:00:29.500
What you will see right now
is done using Xcode 4.2.

00:00:29.760 --> 00:00:33.340
Don't try this with 4.1,
you can try it at home.

00:00:34.970 --> 00:00:38.090
So, we will go through a few steps.

00:00:38.110 --> 00:00:40.780
We want to take you from start to finish.

00:00:41.000 --> 00:00:44.950
From I have nothing and
I'm creating a new project,

00:00:45.980 --> 00:00:48.710
to I have an old project and
I want to make something out of it.

00:00:48.940 --> 00:00:50.940
But ultimately,
I want to go to the store.

00:00:50.940 --> 00:00:54.390
So we'll go to templates,
we'll go through project settings,

00:00:54.390 --> 00:00:56.290
summary pane, a lot of things.

00:00:56.290 --> 00:01:00.520
We'll go through building and running
on the simulator and on the device.

00:01:00.520 --> 00:01:03.650
We'll show you how to better
test your application.

00:01:03.660 --> 00:01:08.660
And we'll discuss how to do a submission
to the store through an archive.

00:01:08.680 --> 00:01:12.220
Then, we would like to take you
through a few tips and tricks

00:01:12.340 --> 00:01:14.060
that you might find useful.

00:01:14.750 --> 00:01:16.100
So how do we start?

00:01:16.120 --> 00:01:19.500
As usual, templates.

00:01:19.500 --> 00:01:22.100
We re-sorted,
we rearranged a little bit the templates.

00:01:22.210 --> 00:01:26.440
You will find a few difference
compared with the previous version.

00:01:26.640 --> 00:01:29.590
We tried to match, sorry,
and you still have the

00:01:29.590 --> 00:01:31.300
same format for Mac OS X,
of course,

00:01:31.300 --> 00:01:33.260
but we'll stay focused on iOS right now.

00:01:33.340 --> 00:01:36.410
So we tried to match the
common classes of application.

00:01:36.420 --> 00:01:40.490
Master detail, like message or mail.

00:01:40.790 --> 00:01:44.670
Page-based application,
like iBook or Contact.

00:01:44.960 --> 00:01:47.780
OpenGL application,
you're all familiar with that.

00:01:47.950 --> 00:01:51.850
Tab apps, utilities, stock,
all the things.

00:01:52.280 --> 00:01:54.990
And you can, of course,
start with all close to nothing,

00:01:55.180 --> 00:01:58.280
a single view application
or an empty application,

00:01:58.300 --> 00:02:00.700
when in fact already has a window.

00:02:00.700 --> 00:02:06.260
So the first thing you will see
when you create a new project with,

00:02:06.470 --> 00:02:12.170
or a new workspace with Xcode
will be the setup of the template.

00:02:12.620 --> 00:02:15.990
There are a few things that
you can set from start.

00:02:16.100 --> 00:02:18.890
You can pick the product name.

00:02:19.080 --> 00:02:21.760
You can pick the company identifier.

00:02:21.860 --> 00:02:25.000
Combined,
they will create the bundle identifier.

00:02:25.020 --> 00:02:26.990
More on that later.

00:02:27.320 --> 00:02:31.080
You can then pick the device
family you will want to target.

00:02:31.210 --> 00:02:33.600
All the templates now
are targeting iPhone,

00:02:33.600 --> 00:02:38.300
iPod, iPad, and Universal,
which means combination of the two.

00:02:38.510 --> 00:02:40.700
You can change that later.

00:02:40.920 --> 00:02:44.290
You can then elect to use
the new storyboard feature,

00:02:44.290 --> 00:02:46.340
which we highly recommend.

00:02:46.360 --> 00:02:48.280
You can use code data.

00:02:48.290 --> 00:02:52.380
And we can set up for you
everything for unit testing.

00:02:52.480 --> 00:02:55.290
Highly recommended, as you know.

00:02:56.460 --> 00:03:00.720
Once you do that,
you end up in the summary pane.

00:03:00.780 --> 00:03:05.020
The summary pane is a simplified
version of all your settings.

00:03:05.280 --> 00:03:09.510
We did our best to try to put
there 99% of what you will use in

00:03:09.510 --> 00:03:12.070
the normal life of your project.

00:03:12.200 --> 00:03:17.580
So you see again here the identifier.

00:03:17.640 --> 00:03:20.820
This is quite important because this
is the one you will use in iTunes

00:03:20.820 --> 00:03:23.060
Connect to identify your application.

00:03:23.180 --> 00:03:26.020
So when later you will want
to upload to the store,

00:03:26.070 --> 00:03:30.890
you will need to have this matching
something on an iTunes Connect site.

00:03:32.050 --> 00:03:34.100
You then define the version number.

00:03:34.160 --> 00:03:35.390
Version number, very important.

00:03:35.520 --> 00:03:37.410
Same thing,
that's the one you will specify

00:03:37.630 --> 00:03:40.790
in the iTunes Connect portal.

00:03:41.730 --> 00:03:44.970
Again, the device family,
you can change it from here.

00:03:45.110 --> 00:03:47.600
You can reverse a choice you made before.

00:03:47.810 --> 00:03:51.600
If you move from iPhone
to iPad or Universal,

00:03:51.740 --> 00:03:55.090
we will help you set up a few
things like modifying the zip file

00:03:55.200 --> 00:03:58.850
if that's still what you're using,
and create one or two things to

00:03:58.850 --> 00:04:02.590
help you create the framework
for a Universal application.

00:04:02.780 --> 00:04:06.450
And of course, the usual things like
the deployment target,

00:04:06.730 --> 00:04:07.590
very important.

00:04:07.820 --> 00:04:12.200
You all know that you have to
use the latest SDK available,

00:04:12.250 --> 00:04:16.420
but you might want to elect to
deploy to earlier version of the iOS.

00:04:16.480 --> 00:04:18.080
In that case, this is what you will do.

00:04:18.080 --> 00:04:20.850
You will pick the deployment target.

00:04:21.070 --> 00:04:25.290
Then it will be up to you to be
sure in your source code that

00:04:25.290 --> 00:04:29.880
when you use a newer feature,
you really check that it exists

00:04:29.880 --> 00:04:29.890
on the device you're running on.

00:04:33.310 --> 00:04:35.660
Here you have to specify the
name of the storyboard you

00:04:35.660 --> 00:04:39.960
want to be loaded at first,
or the first zip file you want to use.

00:04:40.030 --> 00:04:43.820
The orientations that your
application will support.

00:04:43.860 --> 00:04:45.800
The icons.

00:04:46.000 --> 00:04:48.470
The icons are added by drag and drop.

00:04:48.750 --> 00:04:50.700
Don't be afraid to do the wrong thing.

00:04:50.780 --> 00:04:53.340
As long as it's a ping
file and the correct size,

00:04:53.420 --> 00:04:55.040
we will accept it.

00:04:55.130 --> 00:04:57.600
If the size is incorrect, we will reject.

00:04:57.760 --> 00:05:01.060
So not too many risks of mistakes here.

00:05:01.550 --> 00:05:06.760
For the initial launch images,
we will accept about any size.

00:05:06.760 --> 00:05:12.640
But we will display a warning if the size
is not optimal for the device you target.

00:05:12.680 --> 00:05:14.020
This is for the iPhone/iPad.

00:05:14.190 --> 00:05:17.710
You have the same thing for the
iPad if your app is universal.

00:05:19.590 --> 00:05:23.630
In case there is something that's missing
for your needs in the summary pane,

00:05:23.630 --> 00:05:27.980
you still have access to the
build settings by config file,

00:05:28.230 --> 00:05:32.520
target, config file for the project,
project, and the resolved values

00:05:32.520 --> 00:05:34.030
for all your settings.

00:05:34.130 --> 00:05:35.930
You can do all these changes here.

00:05:36.260 --> 00:05:40.620
You have several ways to customize
the way you want to see your settings.

00:05:40.620 --> 00:05:44.650
Simplified, accumulated, enjoy.

00:05:46.740 --> 00:05:50.880
Now that you have set up everything
you want to build and run.

00:05:51.140 --> 00:05:54.700
To do that, you click on the Run button.

00:05:54.730 --> 00:05:58.740
Xcode will build, launch the simulator,
launch your app.

00:05:58.830 --> 00:06:00.740
From a template, it will work.

00:06:00.770 --> 00:06:02.950
Later, it's up to you.

00:06:03.580 --> 00:06:06.280
Once this is done,
I'm sure you will want to

00:06:06.350 --> 00:06:09.290
then do the same on a device.

00:06:09.410 --> 00:06:13.940
For that,
I will ask Jacob Xiao to come on stage,

00:06:14.020 --> 00:06:18.910
the master of the provisioning profile,
the keeper of, well, the keys,

00:06:19.050 --> 00:06:24.060
and he will explain to you how to
set up a device to be able to run.

00:06:24.150 --> 00:06:24.660
Jacob?

00:06:25.360 --> 00:06:26.410
Thanks, Marc.

00:06:29.110 --> 00:06:32.320
So I'd like to tell you how
you can set up your device to

00:06:32.320 --> 00:06:36.340
run and test your iOS apps.

00:06:36.350 --> 00:06:39.300
Now, let's get started.

00:06:45.880 --> 00:06:50.220
So here I have a basic
photo album application.

00:06:50.260 --> 00:06:53.520
And I'll start by just
running it in the simulator.

00:06:53.550 --> 00:06:56.080
The great thing about running
in the simulator is that

00:06:56.170 --> 00:06:58.210
there's no setup required.

00:06:58.750 --> 00:07:03.360
So here's my app,
and I can flip through photos and also

00:07:04.010 --> 00:07:07.110
view those photos' location on a map.

00:07:08.010 --> 00:07:11.520
Okay, that works,
but I also have a feature in this app

00:07:11.890 --> 00:07:14.330
that's triggered by a pinch gesture.

00:07:14.330 --> 00:07:17.000
And it's really better to
test multi-touch kinds of

00:07:17.000 --> 00:07:20.550
things on a real device,
because you want to see how the

00:07:20.630 --> 00:07:22.550
gesture feels with your fingers.

00:07:23.630 --> 00:07:27.170
So how many of you have had problems
in the past with provisioning

00:07:27.170 --> 00:07:31.300
profiles and signing certificates
and getting all of that set up?

00:07:32.340 --> 00:07:34.480
Yeah, me too.

00:07:34.590 --> 00:07:36.100
Well, I have good news for you.

00:07:36.180 --> 00:07:39.960
Xcode will now do all of
this setup automatically.

00:07:40.090 --> 00:07:44.610
All you have to do is
plug in your device.

00:07:47.200 --> 00:07:50.560
And when it appears in
the Xcode organizer,

00:07:50.650 --> 00:07:52.980
just click Use for Development.

00:07:54.270 --> 00:07:57.880
Then sign in to the provisioning portal.

00:07:57.900 --> 00:08:00.600
And since this is my first
time setting things up,

00:08:00.610 --> 00:08:04.800
Xcode will even offer to create
a signing identity for me.

00:08:04.930 --> 00:08:07.000
So I'll go ahead and do that.

00:08:07.020 --> 00:08:11.110
And Xcode is now adding my device
to the portal and creating a

00:08:11.110 --> 00:08:13.320
new provisioning profile for me.

00:08:13.350 --> 00:08:16.980
This profile will include all
of my team's devices and also

00:08:16.980 --> 00:08:19.300
all of our signing identities.

00:08:19.350 --> 00:08:22.450
And it will use a wildcard app ID,
which means it can be

00:08:22.500 --> 00:08:26.510
used with any application,
regardless of the app's bundle ID.

00:08:26.710 --> 00:08:30.140
And you can see here now that
it's downloaded the profile and

00:08:30.140 --> 00:08:32.580
even copied it over to my device.

00:08:32.580 --> 00:08:33.700
And that's all I have to do.

00:08:33.860 --> 00:08:35.680
I'm ready to run.

00:08:41.070 --> 00:08:44.690
So I just choose my application,
my device here, and build and run.

00:08:44.690 --> 00:08:52.130
And now, my app's running on the device.

00:08:52.620 --> 00:08:55.160
It's just starting up here.

00:08:55.160 --> 00:08:59.440
And I can flip through my photos
and view the map just the same.

00:09:02.300 --> 00:09:04.810
And now I'll try my pinch gesture.

00:09:04.810 --> 00:09:10.510
Cool, now I can tweet my photo.

00:09:11.060 --> 00:09:14.710
But I'm not sure if the pinch gesture
is really the right gesture here,

00:09:14.860 --> 00:09:17.460
so I'm glad that I tested it.

00:09:21.310 --> 00:09:25.540
Now, there are some services for iOS that
require an exact bundle identifier

00:09:25.540 --> 00:09:27.170
in your provisioning profile.

00:09:27.330 --> 00:09:31.960
This includes GameKit,
push notifications, and in-app purchase.

00:09:32.040 --> 00:09:35.380
And you have to create a custom
profile to use any of those.

00:09:35.460 --> 00:09:38.600
Formally, you'd have to do this on the
provisioning portal site.

00:09:38.690 --> 00:09:42.830
But as of Xcode 4.2,
you can now do this in

00:09:42.880 --> 00:09:44.440
the organizer as well.

00:09:44.650 --> 00:09:49.420
Just click on Provisioning
Profiles and click New here.

00:09:49.960 --> 00:09:54.870
You can enter all of the
information that it asks for,

00:09:54.950 --> 00:09:58.850
including which of your
app IDs you want to use.

00:10:00.380 --> 00:10:05.070
Then, Xcode will communicate with
the portal and create your new

00:10:05.170 --> 00:10:07.970
custom provisioning profile.

00:10:08.900 --> 00:10:12.030
Another thing that you have to do with
provisioning profiles is renew them

00:10:12.030 --> 00:10:14.550
after they've expired in a few months.

00:10:14.550 --> 00:10:17.850
And this is also something you can do
right from within the Xcode organizer.

00:10:17.950 --> 00:10:22.060
I don't have any expiring profiles here,
but you just click on the

00:10:22.300 --> 00:10:23.960
profile and click renew.

00:10:24.600 --> 00:10:27.760
So now that you've seen how to run
your application and also how to

00:10:27.770 --> 00:10:32.620
manage profiles from within Xcode,
let's talk about unit testing.

00:10:33.220 --> 00:10:36.770
When I created this project,
I clicked the Include Unit Tests

00:10:36.770 --> 00:10:39.510
checkbox that you just saw.

00:10:39.510 --> 00:10:42.760
And that created this unit test target.

00:10:43.160 --> 00:10:45.380
Now,
the type of unit tests created by that

00:10:45.500 --> 00:10:48.240
checkbox are application unit tests.

00:10:48.400 --> 00:10:52.050
And this means that the unit tests
are actually injected into your

00:10:52.110 --> 00:10:54.440
application and then run from there.

00:10:54.650 --> 00:10:56.960
This can be useful because
you can test the model,

00:10:56.960 --> 00:10:59.550
view,
and controller parts of your application,

00:10:59.760 --> 00:11:02.710
since you're just running
in the real application.

00:11:04.640 --> 00:11:10.810
So in the test that I've set up here,
we're getting the app delegate and

00:11:10.890 --> 00:11:13.390
testing some of its properties.

00:11:14.920 --> 00:11:21.520
I also have a test that will tell the
app delegate to run an action method.

00:11:21.520 --> 00:11:26.190
And then we'll test that the
map view was actually shown.

00:11:26.530 --> 00:11:31.450
So application unit tests can be run
both on the device and on the simulator.

00:11:31.450 --> 00:11:33.560
So that it's easier for
you to see what's going on,

00:11:33.640 --> 00:11:36.300
I'll run on the simulator.

00:11:36.380 --> 00:11:40.540
Now to run the test,
just choose Product and Test.

00:11:41.240 --> 00:11:45.420
And you'll see that our application is
started up to run the tests and then

00:11:45.540 --> 00:11:47.900
terminated as soon as tests are finished.

00:11:48.070 --> 00:11:48.640
Great.

00:11:48.800 --> 00:11:51.210
Now all of our tests have passed.

00:11:51.490 --> 00:11:55.390
The alternative to application
unit tests are logic tests.

00:11:55.390 --> 00:11:58.700
And these are actually run
independently of your application

00:11:58.700 --> 00:12:00.500
and without a user interface.

00:12:00.590 --> 00:12:05.060
This can be useful for testing the model
parts of your code because you'll be

00:12:05.060 --> 00:12:10.920
running these tests independently of your
application so there's no interference.

00:12:11.000 --> 00:12:17.150
Now to create a logic test,
just go to New Target and

00:12:17.150 --> 00:12:21.410
choose Unit Testing Bundle
from the Other category.

00:12:26.280 --> 00:12:30.840
Now, I've created these new logic tests.

00:12:30.930 --> 00:12:32.790
And first of all,

00:12:33.560 --> 00:12:39.320
I'll turn off this automatic
failure because we don't want that.

00:12:39.320 --> 00:12:39.320
Then,

00:12:40.160 --> 00:12:47.200
I'll drag in some tests that I have
prepared and add them to my logic tests.

00:12:48.920 --> 00:12:53.200
So these tests test the photo class,
which is part of my model.

00:12:53.260 --> 00:12:57.180
And since logic tests are run
independently of the application,

00:12:57.210 --> 00:13:01.230
I'll have to include any classes
that I use in the unit tests.

00:13:01.440 --> 00:13:06.780
I can do that for the photo
class in the utilities.

00:13:07.590 --> 00:13:11.560
And my unit tests also use Core Location.

00:13:11.560 --> 00:13:15.810
So I'll just add the Core Location
framework to my link phase.

00:13:20.600 --> 00:13:23.600
Okay, now we're ready to run the tests.

00:13:23.640 --> 00:13:27.430
And Xcode has created this separate
scheme that includes just those

00:13:27.430 --> 00:13:31.180
logic tests that I just created,
but I'd really like to add them

00:13:31.180 --> 00:13:33.090
to my main photo album scheme.

00:13:33.210 --> 00:13:37.810
I can edit the scheme to do
that and go to the test section.

00:13:38.140 --> 00:13:42.230
Now you can see that my application
unit tests are already here.

00:13:42.280 --> 00:13:45.160
I'll add the logic tests.

00:13:45.820 --> 00:13:51.300
And now both of these sets of tests
will be run whenever I test this scheme.

00:13:51.730 --> 00:13:54.940
This section of the edit scheme
editor is also where you can

00:13:54.940 --> 00:13:57.580
turn on and off individual tests.

00:13:57.590 --> 00:13:58.860
And here's a quick tip for you.

00:13:59.090 --> 00:14:03.600
You can hold the option key
to turn all tests on or off.

00:14:04.020 --> 00:14:08.500
Okay,
now let's test all of our combined tests.

00:14:08.620 --> 00:14:11.440
Again, the application tests will run.

00:14:11.440 --> 00:14:17.400
Let's try with the iPhone simulator.

00:14:32.550 --> 00:14:35.400
It's going a little slowly this time.

00:14:35.440 --> 00:14:38.280
But while it's going,
I'll tell you about another new

00:14:38.280 --> 00:14:40.440
feature in Xcode 4 for unit tests.

00:14:40.490 --> 00:14:44.160
You can now run all of your unit
tests right from the debugger,

00:14:44.160 --> 00:14:46.900
just like you run your application tests.

00:14:46.950 --> 00:14:53.960
And this means you can add breakpoints,
just like you do to your application.

00:14:58.960 --> 00:15:02.820
In fact, for unit tests,
you can also add a breakpoint that will

00:15:02.820 --> 00:15:04.750
fire whenever your unit tests fail.

00:15:05.070 --> 00:15:09.390
To do so,
just click Add Symbolic Breakpoint.

00:15:10.410 --> 00:15:15.800
and enter send test case,
fail with exception.

00:15:23.400 --> 00:15:28.770
Now this breakpoint will be triggered
whenever one of my unit tests fail.

00:15:32.270 --> 00:15:35.480
So let's see if we can
get the simulator up.

00:15:35.730 --> 00:15:38.330
This is a beta after all.

00:15:38.590 --> 00:15:41.030
And we'll try to test again.

00:15:42.210 --> 00:15:49.750
Okay, now our application tests have run,
and our logic tests will run after that.

00:16:00.990 --> 00:16:03.300
Now all of our tests have run.

00:16:03.580 --> 00:16:06.500
Okay.

00:16:06.590 --> 00:16:10.560
Now I'll switch back to slides
and summarize what we just saw.

00:16:15.560 --> 00:16:22.140
So, I just showed you how you can set up
your device to run your application,

00:16:22.190 --> 00:16:25.560
how you can manage provisioning
profiles right from within Xcode,

00:16:25.650 --> 00:16:29.840
including some new features in Xcode 4.2,
and also how you can set up

00:16:30.050 --> 00:16:33.130
and debug your unit tests
from Xcode for your iOS apps.

00:16:33.280 --> 00:16:37.650
Now, I'd like to turn things
over to my colleague,

00:16:37.650 --> 00:16:38.470
Itai Rom.

00:16:46.400 --> 00:16:47.600
Good afternoon everybody.

00:16:47.700 --> 00:16:51.150
So today I'd like to talk to you
about two new features in Xcode

00:16:51.300 --> 00:16:55.610
4.2 that will make it really
easy to test your iOS apps.

00:16:55.820 --> 00:16:58.740
The first one of these
is application data.

00:16:58.770 --> 00:17:03.440
Until today, testing your apps using real
application data was a tedious endeavor.

00:17:03.890 --> 00:17:08.510
You either had to write custom code to
generate data whenever your app ran,

00:17:08.600 --> 00:17:10.940
and then of course remember
to disable or remove that code

00:17:11.040 --> 00:17:12.450
before you release your app.

00:17:12.450 --> 00:17:17.480
Or you could come up with complex schemes
to transfer data into your app sandbox.

00:17:17.480 --> 00:17:21.470
But with Xcode 4.2, we'll do all of that
for you automatically,

00:17:21.510 --> 00:17:23.020
and it's really easy.

00:17:23.540 --> 00:17:27.760
The other major feature
is location simulation.

00:17:28.380 --> 00:17:32.240
If you've ever had to cram your
Mac Pro into the backseat of your buddy's

00:17:32.240 --> 00:17:35.840
hatchback while he drove you around
town just so you could test your app,

00:17:35.890 --> 00:17:37.280
those days are over.

00:17:37.370 --> 00:17:41.460
Xcode 4.2 makes it really easy
to test your app in any location

00:17:41.570 --> 00:17:44.580
on the planet right from the
comfort of your own office.

00:17:44.700 --> 00:17:48.010
So let's take a look at
how these features work.

00:17:50.120 --> 00:17:54.040
So here we are in Xcode 4.2
looking at the photo album project

00:17:54.200 --> 00:17:56.390
that Jacob just showed you.

00:17:56.730 --> 00:18:00.480
Now, first we'll take a look at how we
can test with application data.

00:18:00.530 --> 00:18:04.520
If I click on the Organizer button here,
and then on the Applications

00:18:04.520 --> 00:18:09.490
tab in the Source List,
you'll see that we now have a new section

00:18:09.490 --> 00:18:13.680
in the Organizer that shows you all of
the data inside of your app sandbox.

00:18:13.680 --> 00:18:18.210
And in here you can see a couple of the
images that you saw in Jacob's demo,

00:18:18.210 --> 00:18:22.120
some other files, some metadata files,
things like that.

00:18:22.540 --> 00:18:26.440
So what I'd really like to do is to test
our app using a few additional images,

00:18:26.560 --> 00:18:27.740
because two is really not a lot.

00:18:28.010 --> 00:18:31.580
And the next step in doing
that is to download this data

00:18:31.580 --> 00:18:33.620
onto my Mac so I can edit it.

00:18:33.690 --> 00:18:39.970
So I'll click the Download button
and just save this to the

00:18:39.970 --> 00:18:42.930
desktop as appdata-sf.

00:18:45.070 --> 00:18:46.780
Now when I click save,
Xcode's actually going to

00:18:46.780 --> 00:18:51.330
download all of the data out of my
application sandbox onto my desktop,

00:18:51.330 --> 00:18:54.270
and it's going to save it
in this new bundle format.

00:18:54.700 --> 00:18:58.860
I hide Xcode, and I can edit it just like
I would any other bundle.

00:18:58.860 --> 00:19:03.850
I can right click and show
package contents in the finder,

00:19:03.890 --> 00:19:07.280
and you'll see when I look inside
that I see all of the same files

00:19:07.380 --> 00:19:08.900
I just saw in the organizer.

00:19:09.240 --> 00:19:16.010
And I can just drag in
additional data if I want,

00:19:16.010 --> 00:19:17.610
or delete things, rename things,
whatever I want to do.

00:19:18.370 --> 00:19:21.000
I haven't gotten to the good part yet.

00:19:21.120 --> 00:19:24.890
So I happen to have a
few additional images.

00:19:25.430 --> 00:19:30.200
I'm just going to drag them right in here
and I'll replace what's already there.

00:19:30.250 --> 00:19:34.610
So you can see now we've got
seven images from San Francisco.

00:19:34.830 --> 00:19:36.560
Great,
let's go back to Xcode and see how we

00:19:36.630 --> 00:19:39.300
can upload this back onto my device.

00:19:39.340 --> 00:19:42.700
I can just click the upload
button here in the organizer.

00:19:42.760 --> 00:19:46.480
And that's going to upload the data one
time so that every time I launch my app

00:19:46.610 --> 00:19:48.570
thereafter it's using the same data set.

00:19:48.580 --> 00:19:51.330
If I delete things within
my app or create new things,

00:19:51.330 --> 00:19:55.140
Xcode's never going to touch the
data set again until I click upload.

00:19:55.200 --> 00:19:58.320
But I'd rather do
something more automatic.

00:19:58.440 --> 00:20:02.370
So if I go back,
close the organizer window,

00:20:02.370 --> 00:20:02.410
and go back into Xcode.

00:20:02.750 --> 00:20:06.690
I'm going to import the app data
bundle I just created into my project.

00:20:06.720 --> 00:20:12.170
And I'll do that by right-clicking in the
project navigator and choosing Add Files.

00:20:13.170 --> 00:20:15.920
I'll select the bundle I created,
and I don't need to

00:20:16.000 --> 00:20:16.980
check any targets here.

00:20:16.980 --> 00:20:20.590
This file is not really part of
building my application at all,

00:20:20.770 --> 00:20:22.590
so I don't want to add it to any target.

00:20:22.670 --> 00:20:27.070
I'll just click Add, and now the data was
imported into my project.

00:20:27.130 --> 00:20:32.820
I can click on the Scheme Editor up here,
and Edit Scheme, so that I can now make

00:20:33.000 --> 00:20:36.580
Xcode always upload my data
every time my app launches.

00:20:36.960 --> 00:20:40.880
When I select the Run Scheme Action,
you'll see a new options

00:20:40.880 --> 00:20:43.070
tab in the Scheme Editor.

00:20:43.070 --> 00:20:46.820
And this is where you can control the
new testing features in Xcode 4.2.

00:20:46.850 --> 00:20:49.980
We'll get back to the
location pop-up in a minute.

00:20:50.030 --> 00:20:52.360
Let's take a look at this
application data pop-up.

00:20:52.400 --> 00:20:56.770
You'll see it lists all of the
app data bundles in my project,

00:20:56.860 --> 00:20:58.280
and I can just choose one.

00:20:58.340 --> 00:21:02.970
And now, every time I run this scheme,
Xcode's going to upload my app data to

00:21:03.060 --> 00:21:05.440
the device or to the simulator fresh.

00:21:05.560 --> 00:21:08.060
So if I modify anything
while I'm testing,

00:21:08.080 --> 00:21:10.940
it'll re-upload everything from scratch.

00:21:10.980 --> 00:21:13.260
So it's always in a known state.

00:21:13.260 --> 00:21:14.100
- Hooray!

00:21:18.350 --> 00:21:19.820
Now that's not all you can do.

00:21:19.840 --> 00:21:22.430
You could also go to
the test scheme action.

00:21:22.730 --> 00:21:25.330
And you might have noticed when
Jacob demoed this earlier that we

00:21:25.340 --> 00:21:27.020
have a couple of new columns in here.

00:21:27.040 --> 00:21:30.780
You can actually associate app
data with each of your tests.

00:21:30.820 --> 00:21:34.120
And you can associate a different
bundle with each test suite so that you

00:21:34.210 --> 00:21:38.010
can use different app data for all of
your different tests and actually test

00:21:38.140 --> 00:21:39.720
different things really easily that way.

00:21:39.740 --> 00:21:42.520
You can do the same thing with locations.

00:21:42.590 --> 00:21:43.570
So I'm not going to do that now.

00:21:43.580 --> 00:21:46.860
I'm just going to click OK and
keep my fingers crossed because I'm

00:21:46.860 --> 00:21:49.080
going to run in the simulator again.

00:21:50.300 --> 00:21:52.500
Let's see if this works.

00:21:52.540 --> 00:21:53.630
So there's our app.

00:21:53.810 --> 00:21:56.130
Now if you recall before,
we only had two photos.

00:21:56.240 --> 00:21:57.600
Now we have seven.

00:21:57.690 --> 00:22:00.920
So our app data was uploaded correctly.

00:22:03.300 --> 00:22:04.320
Now that's wonderful.

00:22:04.320 --> 00:22:08.510
The next thing I'd like to test is
another feature of our application.

00:22:09.160 --> 00:22:12.510
In addition to showing you a map
showing your current location,

00:22:12.620 --> 00:22:16.750
the Photo Album app will also filter
the photos that it displays to just

00:22:16.910 --> 00:22:21.420
those that were taken within a certain
distance of the user's current location.

00:22:21.460 --> 00:22:24.640
Now, since we're in San Francisco and
all the photos we've been looking

00:22:24.640 --> 00:22:27.680
at were from San Francisco,
we haven't really been testing that.

00:22:27.730 --> 00:22:31.220
And I'd like to test some other
locations to make sure it works properly.

00:22:31.280 --> 00:22:34.370
Let's take a look at how to do that.

00:22:35.290 --> 00:22:37.960
The first thing I'll need is an
app data bundle containing some

00:22:37.960 --> 00:22:39.340
photos from other locations.

00:22:39.340 --> 00:22:42.400
Now, I'll hide Xcode and take
a look here in the finder.

00:22:42.440 --> 00:22:47.550
I just so happen to have
one already prepared.

00:22:48.680 --> 00:22:52.060
And you'll see that it's
got images from New York,

00:22:52.120 --> 00:22:55.350
Paris, Rome, San Francisco, and Sydney.

00:22:55.350 --> 00:22:59.510
So we can actually want to make
sure that we can view all these

00:22:59.510 --> 00:23:01.500
photos properly in our app.

00:23:01.570 --> 00:23:06.390
I'll go back to Xcode and import
that app data into my project.

00:23:11.730 --> 00:23:14.350
Okay, so now I've got it in my project.

00:23:14.430 --> 00:23:18.880
I need to edit my scheme again
to add it to the run action.

00:23:18.960 --> 00:23:21.550
So I'll select my new app data.

00:23:21.820 --> 00:23:26.100
Okay, now, how will we actually test
photos taken from New York or

00:23:26.190 --> 00:23:27.940
Sydney without going there?

00:23:28.020 --> 00:23:31.850
That's always been sort of
problematic until Xcode 4.2.

00:23:31.860 --> 00:23:35.420
If I click on this location pop-up,
you'll see that Xcode comes

00:23:35.420 --> 00:23:37.960
with a few built-in locations
that you can choose from.

00:23:37.960 --> 00:23:42.750
Now, whenever, if I select one of these,
whenever I run my application,

00:23:42.870 --> 00:23:47.080
the simulator or the device is
going to think that I'm actually

00:23:47.080 --> 00:23:50.570
in London or Moscow or Sydney,
and my application is going to behave

00:23:50.570 --> 00:23:51.680
as it would in a different way.

00:23:51.710 --> 00:23:54.400
It would for a user who's
actually in that location.

00:23:54.480 --> 00:23:56.990
So let's go ahead and choose Sydney.

00:23:57.760 --> 00:24:00.800
And we'll click OK and run.

00:24:04.410 --> 00:24:05.500
The simulator will launch.

00:24:05.500 --> 00:24:08.180
It's going to transfer over our app data.

00:24:08.190 --> 00:24:10.590
And you'll see,
as soon as our app's launched,

00:24:10.710 --> 00:24:13.130
we're in Sydney,
as you can tell by these photos of

00:24:13.130 --> 00:24:15.180
the Opera House in the background.

00:24:15.220 --> 00:24:21.010
I can even click over to the map,
and you'll see that the map

00:24:21.560 --> 00:24:24.070
shows that we're in Sydney.

00:24:24.070 --> 00:24:26.950
So just like that, I was able to test my
app in Australia without

00:24:26.950 --> 00:24:26.950
hopping on a 17-hour flight.

00:24:28.350 --> 00:24:29.270
So that's really useful.

00:24:29.330 --> 00:24:33.820
How can I now test photos from
other locations like New York?

00:24:33.820 --> 00:24:37.120
I could quit out of my app,
go back to the scheme editor,

00:24:37.290 --> 00:24:42.190
change that location pop-up to New York,
relaunch, verify that it works.

00:24:42.420 --> 00:24:46.070
But it would be really nice if I could do
this on the fly while my app is running.

00:24:46.720 --> 00:24:50.000
So in Xcode 4.2,
that's also really easy to do.

00:24:50.020 --> 00:24:52.400
We've added a new control
here in the debug bar,

00:24:52.400 --> 00:24:54.010
which is kind of small
for some of you guys.

00:24:54.330 --> 00:24:57.710
But it looks just like the
location services icon from the

00:24:58.020 --> 00:24:59.730
status bar in an iOS device.

00:24:59.740 --> 00:25:02.340
And when you click on it
while your app's running,

00:25:02.340 --> 00:25:06.700
you'll see that it lists all of the same
items that you saw in the scheme editor.

00:25:06.700 --> 00:25:09.250
And I can just click on one
of these to be instantly

00:25:09.250 --> 00:25:11.220
transported to these locations.

00:25:11.220 --> 00:25:14.570
So let's click on New York.

00:25:14.660 --> 00:25:16.930
and our map moves over to New York.

00:25:16.940 --> 00:25:19.040
I can click done and we've
got photos from New York.

00:25:19.110 --> 00:25:20.930
It's that easy.

00:25:24.600 --> 00:25:27.530
So hopefully you guys can see how useful
this feature will be for testing all

00:25:27.530 --> 00:25:30.570
your location-aware apps in the future.

00:25:31.330 --> 00:25:33.460
Now,
the next thing to take a look at is how

00:25:33.460 --> 00:25:38.160
you might simulate a custom location.

00:25:38.170 --> 00:25:40.440
The earth is a pretty big place,
as I'm sure you're aware,

00:25:40.540 --> 00:25:42.500
and pop-up menus tend to be pretty small.

00:25:42.760 --> 00:25:46.730
So we think we've selected a pretty good
list of built-in locations in Xcode,

00:25:46.950 --> 00:25:49.670
but you might want to
test a different location.

00:25:50.050 --> 00:25:52.160
So how could you do that?

00:25:52.350 --> 00:25:57.240
Well, in Xcode 4.2,
we support the GPX file format.

00:25:57.450 --> 00:26:02.410
And I've got a few GPX files here
that I'll import into my project.

00:26:06.400 --> 00:26:09.940
and Shouyu.

00:26:09.970 --> 00:26:12.220
So here's one for Paris.

00:26:12.310 --> 00:26:15.100
And you can see this is a
really simple file format.

00:26:15.140 --> 00:26:17.580
There are a whole bunch of
ways you can generate these on

00:26:17.580 --> 00:26:20.040
web-based navigation services.

00:26:20.070 --> 00:26:22.250
GPS devices can export them.

00:26:22.700 --> 00:26:27.200
GPS tracking apps on iOS can export them.

00:26:27.230 --> 00:26:29.280
Or you could just create one
yourself in a text editor.

00:26:29.280 --> 00:26:31.560
It's pretty simple.

00:26:31.620 --> 00:26:36.570
There are two elements in this file,
an outer GPX element and one waypoint

00:26:36.570 --> 00:26:41.020
element containing the latitude and
longitude of the Eiffel Tower in Paris.

00:26:41.040 --> 00:26:43.780
This name here is optional.

00:26:43.830 --> 00:26:46.150
Here's another one for Rome.

00:26:46.490 --> 00:26:49.100
This is the location
of the Roman Colosseum.

00:26:49.190 --> 00:26:52.460
So to use these, now that I've imported
them into my project,

00:26:52.460 --> 00:26:55.680
all I have to do is build my app again,
run it in the simulator.

00:26:55.680 --> 00:26:58.630
This works on the device as well.

00:27:00.580 --> 00:27:02.250
We'll default to Sydney,
as you'll recall.

00:27:02.260 --> 00:27:05.820
That's the location we
selected in the scheme editor.

00:27:05.930 --> 00:27:09.140
But now when I pop open the
location services pop-up,

00:27:09.210 --> 00:27:12.220
we've got some additional
GPX files that we can select from.

00:27:12.250 --> 00:27:14.100
And I can just click on Paris.

00:27:14.120 --> 00:27:15.740
Now we're in Paris.

00:27:15.780 --> 00:27:18.560
As you can tell from
these Eiffel Tower photos.

00:27:18.600 --> 00:27:21.100
I can click on Rome.

00:27:21.780 --> 00:27:25.050
and now we're testing
our application in Rome.

00:27:25.050 --> 00:27:28.990
As you can tell from this lovely t-shirt,
which we could never have faked.

00:27:28.990 --> 00:27:28.990
So.

00:27:30.120 --> 00:27:33.210
It's that simple to test your
app in any location that you

00:27:33.210 --> 00:27:34.240
need to test on the planet.

00:27:34.240 --> 00:27:37.460
If you get a bug report from
a user who's located somewhere

00:27:37.460 --> 00:27:42.150
you'd never want to travel to,
you can easily do it in Xcode now.

00:27:42.670 --> 00:27:46.230
Finally, you may also want to test
situations where your user is

00:27:46.230 --> 00:27:49.640
changing location over time.

00:27:49.640 --> 00:27:51.900
And the GPX format can
handle that as well,

00:27:51.980 --> 00:27:53.100
and so can Xcode.

00:27:53.120 --> 00:27:56.840
Let's take a look at another
GPX file that I imported.

00:27:56.840 --> 00:27:59.980
This one's called train sj-sf.

00:28:00.010 --> 00:28:02.790
Now, you'll see this looks very
similar to the other GPX files,

00:28:02.940 --> 00:28:05.620
but it contains a few more waypoints.

00:28:05.650 --> 00:28:09.050
I actually recorded this on my
iPhone while riding Caltrain up to

00:28:09.050 --> 00:28:11.120
San Francisco earlier this week.

00:28:11.190 --> 00:28:15.700
So it's really actually pretty easy to
generate these just using your iPhone.

00:28:16.050 --> 00:28:20.620
The only difference between a
GPX file that simulates a path and

00:28:20.620 --> 00:28:23.940
one that just simulates a single
location is the number of waypoints.

00:28:23.950 --> 00:28:28.280
You only need to specify two,
but you can specify more if you want to.

00:28:28.290 --> 00:28:32.290
And Xcode will automatically interpolate
all of the locations in between

00:28:32.290 --> 00:28:34.120
the waypoints that you specify.

00:28:34.190 --> 00:28:39.300
So I could have created this file with
just the location of San Francisco and

00:28:39.300 --> 00:28:42.430
a location from San Jose,
and Xcode would automatically

00:28:42.430 --> 00:28:44.020
generate a path between the two.

00:28:44.050 --> 00:28:47.880
But if I provide additional waypoints,
that gives me finer-grained control

00:28:47.880 --> 00:28:50.080
over the path that Xcode simulates.

00:28:50.160 --> 00:28:52.080
So let's see how this works.

00:28:52.080 --> 00:28:57.090
I'll run my app again.

00:29:00.670 --> 00:29:01.960
Let's go to the map view.

00:29:02.080 --> 00:29:05.090
Again, we're starting out in Sydney,
but I can.

00:29:05.690 --> 00:29:09.890
Pop open the pop-up button
here and choose Train SJ to SF.

00:29:10.090 --> 00:29:12.280
And now you'll see we
start out in San Jose,

00:29:12.350 --> 00:29:16.860
and our location slowly moves up the
peninsula up towards San Francisco.

00:29:16.980 --> 00:29:19.220
So this makes it really--

00:29:24.440 --> 00:29:27.660
This makes it really easy to
test applications where you're

00:29:27.660 --> 00:29:30.100
relying on the user's position
actually changing over time,

00:29:30.100 --> 00:29:32.590
like navigation apps.

00:29:36.020 --> 00:29:37.490
Let's go back to the slides, please.

00:29:37.500 --> 00:29:42.630
So what did we just see?

00:29:42.640 --> 00:29:45.870
We just saw how Xcode
4.2 makes it really,

00:29:45.870 --> 00:29:49.580
really simple to test our
applications using real application

00:29:49.620 --> 00:29:51.800
data and simulated locations.

00:29:51.830 --> 00:29:54.600
These were really difficult
things to do before.

00:29:54.650 --> 00:29:59.610
And now it's a breeze to do this right
from the comfort of your own office.

00:30:00.890 --> 00:30:04.920
At this point, we've learned how to
create and test our app.

00:30:04.920 --> 00:30:06.560
The next step is archiving.

00:30:06.570 --> 00:30:10.000
And to show you how to do that,
I'd like to invite my colleague,

00:30:10.000 --> 00:30:11.800
Clark Cox, up on stage.

00:30:16.400 --> 00:30:18.040
Thanks, Itai.

00:30:18.040 --> 00:30:19.880
At some point,
you're going to want to get your

00:30:20.110 --> 00:30:23.700
app into someone else's hands,
whether that's an external tester,

00:30:23.700 --> 00:30:28.490
a tester internal to your company,
or even Apple's App Store reviewers.

00:30:29.060 --> 00:30:30.240
To Xcode, it's all the same.

00:30:30.240 --> 00:30:35.780
It starts with archiving.

00:30:35.780 --> 00:30:35.780
So I'd like to switch
to the demo machine.

00:30:39.100 --> 00:30:42.780
Okay, first I need to make sure that
I'm building for the device.

00:30:42.790 --> 00:30:46.910
Okay, I'm going to create an
archive by going to Product,

00:30:46.910 --> 00:30:48.100
and Archive.

00:30:48.100 --> 00:30:52.300
Xcode builds a copy of my application
and packages it up with debugging

00:30:52.300 --> 00:30:56.200
information into an XC archive bundle,
which you can see represented

00:30:56.200 --> 00:30:57.150
here in the organizer.

00:30:57.740 --> 00:31:00.870
Now let's say you're distributing
this to a beta tester.

00:31:00.870 --> 00:31:06.300
Well, all you need to do is select
the archive and click Share.

00:31:06.310 --> 00:31:08.760
Now I'm presented with
a couple of options.

00:31:08.800 --> 00:31:13.980
I can either share a single IPA file,
or I can share the entire archive.

00:31:13.980 --> 00:31:15.890
I'll get back to this option later.

00:31:15.900 --> 00:31:18.150
For now,
I just want to share an IPA file.

00:31:18.150 --> 00:31:19.740
So I choose that option.

00:31:19.740 --> 00:31:22.840
Now I need to make sure that
I'm signing with the correct

00:31:22.970 --> 00:31:24.910
profile and signing identity.

00:31:24.920 --> 00:31:27.720
As it stands now,
it happens that I'm signing with the

00:31:27.720 --> 00:31:27.720
correct profile and signing identity.

00:31:27.720 --> 00:31:30.770
Now I need to make sure that Xcode has
chosen the correct one automatically.

00:31:30.770 --> 00:31:32.800
I want to sign with my
distribution certificate and

00:31:32.800 --> 00:31:34.300
my ad hoc distribution profile.

00:31:34.340 --> 00:31:38.230
If it weren't selected automatically,
I could always choose it manually.

00:31:38.240 --> 00:31:44.690
So when I hit Next,
Xcode generates the IPA.

00:31:48.200 --> 00:31:50.270
I can save it there on my desktop.

00:31:50.270 --> 00:31:53.100
Now I can email this
file to my beta testers.

00:31:53.110 --> 00:31:56.770
They can drag it into iTunes
for syncing with their device.

00:31:57.470 --> 00:32:01.000
Now, say for instance,
I'm satisfied with the

00:32:01.000 --> 00:32:02.400
state of my application.

00:32:02.400 --> 00:32:05.170
I've reacted to any
feedback from testers,

00:32:05.210 --> 00:32:08.920
I've fixed any issues found,
and I'm ready to submit it to

00:32:08.920 --> 00:32:11.460
Apple for inclusion in the app store.

00:32:11.550 --> 00:32:13.560
Again, the process is very similar.

00:32:13.630 --> 00:32:15.180
I select the archive.

00:32:15.440 --> 00:32:17.800
This time I click Submit.

00:32:17.940 --> 00:32:21.070
I log in with my iTunes
Connect credentials.

00:32:21.760 --> 00:32:25.750
And then I'm asked to choose the
application record on iTunes Connect that

00:32:25.750 --> 00:32:27.610
corresponds to my application.

00:32:27.690 --> 00:32:30.460
In this case, I just have the one.

00:32:30.810 --> 00:32:33.120
Again, I need to make sure that I'm
signing it with the correct

00:32:33.480 --> 00:32:35.360
provisioning profile and identity.

00:32:35.360 --> 00:32:39.060
This time I want to use my app
store provisioning profile,

00:32:39.160 --> 00:32:41.000
so I'll select that there.

00:32:41.690 --> 00:32:45.820
When I click next,
Xcode uploads the app to Apple and a

00:32:45.850 --> 00:32:47.630
series of tests are performed on it.

00:32:47.680 --> 00:32:50.500
In this case,
all tests have passed and now my

00:32:50.640 --> 00:32:55.230
app is forwarded on to a human for
review for inclusion in the app store.

00:32:56.150 --> 00:33:00.120
Now what happens if, for instance,
I'm not the team agent,

00:33:00.120 --> 00:33:04.060
and therefore I don't have the authority
to submit apps on behalf of my team?

00:33:04.240 --> 00:33:06.940
Well,
we've got a solution for that as well.

00:33:07.190 --> 00:33:10.430
Again, I select the archive.

00:33:10.460 --> 00:33:12.130
I click share.

00:33:12.170 --> 00:33:14.970
This time I'm going to
share the whole archive.

00:33:16.070 --> 00:33:19.050
Now when I save this out,
it saves out the entire

00:33:19.220 --> 00:33:20.700
XC Archive bundle.

00:33:20.710 --> 00:33:23.400
I can then send that to my team agent.

00:33:23.440 --> 00:33:28.620
They can double click on it and it'll
open and import into their copy of Xcode.

00:33:28.710 --> 00:33:31.130
And then, again,
they can select it and go

00:33:31.180 --> 00:33:34.620
through the submit workflow
that I showed you earlier.

00:33:35.320 --> 00:33:37.380
They don't need to build from source.

00:33:37.390 --> 00:33:39.100
They don't need to even have the source.

00:33:39.100 --> 00:33:42.350
And more importantly,
they don't need to share their

00:33:42.350 --> 00:33:46.080
signing identity or login
credentials with anyone else.

00:33:46.100 --> 00:33:48.670
With that,
I'd like to go back to the slides.

00:33:54.210 --> 00:33:57.010
So I've showed you how using
Xcode's archive functionality,

00:33:57.010 --> 00:33:59.690
you can share built copies of
your app with other people,

00:33:59.700 --> 00:34:03.490
whether that's external testers
or other members of your team.

00:34:03.540 --> 00:34:08.400
And I've showed you how via the
submit workflow to validate and upload

00:34:08.620 --> 00:34:11.870
your application for submission.

00:34:11.920 --> 00:34:14.830
And with that,
I'd like to give it back to Marc.

00:34:18.570 --> 00:34:19.510
Thank you Clark.

00:34:19.640 --> 00:34:21.190
Thanks.

00:34:21.190 --> 00:34:24.780
So I hope you enjoyed
the presentation so far.

00:34:24.840 --> 00:34:27.550
What have we seen?

00:34:28.380 --> 00:34:28.540
We've been to

00:34:29.460 --> 00:34:35.180
All the things that Clark showed you and
the workflow was creating a new project,

00:34:35.310 --> 00:34:39.980
provisioning devices, we've seen that,
testing, simulating, archiving.

00:34:40.030 --> 00:34:45.780
Now you are all certified Xcode
4.2 experts for iOS development.

00:34:45.850 --> 00:34:49.710
We would like to share with
you a few tips and tricks.

00:34:50.840 --> 00:34:55.800
First one, a very nice feature,
the developer profile.

00:34:55.850 --> 00:35:01.520
Let's say you work from home,
from the office, on your desktop system.

00:35:01.580 --> 00:35:02.920
Everything is set up properly.

00:35:02.920 --> 00:35:06.340
You went through the step
that Jacob described earlier.

00:35:06.410 --> 00:35:08.160
And you have a signing identity.

00:35:08.160 --> 00:35:09.580
You have your provisioning profile.

00:35:09.580 --> 00:35:12.210
You can deploy, build,
run on your devices.

00:35:12.440 --> 00:35:14.080
You're extremely happy.

00:35:14.140 --> 00:35:18.330
Now, you're about to leave
home and fly to WWDC,

00:35:18.610 --> 00:35:19.680
let's say.

00:35:19.740 --> 00:35:22.500
And you want to continue
working using your laptop.

00:35:22.640 --> 00:35:27.640
So you want to set up your laptop and
be able to code sign your application,

00:35:27.660 --> 00:35:31.540
run them on the device the same
way you do on your desktop.

00:35:31.630 --> 00:35:32.980
How do you do that?

00:35:33.030 --> 00:35:34.340
It's very easy.

00:35:34.400 --> 00:35:39.520
You go to the organizer and
you select developer profile.

00:35:39.570 --> 00:35:43.380
Xcode will show you everything
relevant for a developer

00:35:43.610 --> 00:35:45.380
from the kitchen and others.

00:35:45.440 --> 00:35:49.570
That is, signing identities and the
provisioning profiles understood

00:35:49.570 --> 00:35:51.750
by your computer right now.

00:35:52.310 --> 00:35:55.890
You select at the bottom, export.

00:35:56.210 --> 00:36:00.930
And once you do that,
you'll be asked to enter a name for what

00:36:01.040 --> 00:36:03.220
you will archive and enter a password.

00:36:03.350 --> 00:36:07.780
The password is extremely important
because this is very private information.

00:36:07.880 --> 00:36:11.880
Your private key you're signing as
an entity is something very personal.

00:36:11.960 --> 00:36:15.070
And if you're signing in
the name of a corporation,

00:36:15.080 --> 00:36:16.390
very important.

00:36:16.850 --> 00:36:19.310
Once this is done,
you take this file that you

00:36:19.310 --> 00:36:22.590
created on your USB key,
network, whatever,

00:36:22.590 --> 00:36:24.490
and you put it on your laptop.

00:36:24.680 --> 00:36:27.670
You then click Import.

00:36:28.120 --> 00:36:31.380
You ask to enter the password.

00:36:31.380 --> 00:36:33.500
You select the correct file, of course.

00:36:33.520 --> 00:36:34.700
And that's it.

00:36:34.730 --> 00:36:37.860
You have synchronized your
desktop on your laptop.

00:36:37.880 --> 00:36:41.260
You don't have the dreaded no identity
file for this provisioning profile,

00:36:41.260 --> 00:36:42.720
blah, blah, blah, blah.

00:36:42.720 --> 00:36:45.010
I'm sure you've never seen that one,
but it might happen.

00:36:45.010 --> 00:36:46.660
Trust me, I've seen it.

00:36:48.640 --> 00:36:51.240
That's the best way to avoid that.

00:36:51.260 --> 00:36:52.760
That's somewhere one of the only way.

00:36:53.010 --> 00:36:55.490
And another way would be to
manually do the same thing,

00:36:55.660 --> 00:36:58.840
but why do it manually when
Xcode makes things easy for you?

00:36:59.420 --> 00:37:01.690
That's the first tip.

00:37:02.120 --> 00:37:07.500
Second one,
problems happen when I'm staying polite.

00:37:09.160 --> 00:37:12.850
You left home,
you're halfway to San Francisco,

00:37:12.850 --> 00:37:16.420
and you remember, yes,
I will have to build my application

00:37:16.420 --> 00:37:20.020
because there's something I need to
change for the demo I want to produce,

00:37:20.110 --> 00:37:23.040
but I forgot my signing identity at home.

00:37:23.090 --> 00:37:26.180
I forgot to do what we just did.

00:37:26.780 --> 00:37:30.660
How do we clean up a system
to go back to normal?

00:37:30.690 --> 00:37:31.910
I have one piece of bad news.

00:37:32.040 --> 00:37:35.200
You will need to reset up your desktop
computer when you'll be back home.

00:37:35.200 --> 00:37:36.540
But that's another discussion.

00:37:36.580 --> 00:37:39.740
You can use the developer
profile feature.

00:37:39.820 --> 00:37:44.810
To clean up a computer that has not
been used for development so far,

00:37:45.230 --> 00:37:51.370
You have to go to the developer
portal and select certificates.

00:37:53.230 --> 00:37:56.130
You will be presented with the
certificates you are using and

00:37:56.130 --> 00:38:00.540
the one for which the private key
is on your desktop system at home.

00:38:00.660 --> 00:38:02.760
You revoke it.

00:38:03.780 --> 00:38:05.480
If you don't do that,
because you don't have the

00:38:05.570 --> 00:38:08.970
private key on your laptop,
you won't be able to achieve anything.

00:38:09.070 --> 00:38:13.100
Once this is done, you go back to Xcode.

00:38:13.850 --> 00:38:15.610
And you do what Clark just described.

00:38:15.900 --> 00:38:18.780
Refresh, you'll be asked for your
identity on the portal,

00:38:18.780 --> 00:38:20.100
the developer portal.

00:38:20.140 --> 00:38:23.470
We will recreate for you a private key,
assigning identity,

00:38:23.560 --> 00:38:26.800
the provisioning profile,
download everything, you're in business.

00:38:26.860 --> 00:38:29.650
When back home,
you'll use the developer profile feature

00:38:29.650 --> 00:38:39.200
to reset properly your desktop system,
and you will be back in business.

00:38:42.230 --> 00:38:46.130
Sometimes you will want to manage
your projects and keep them in

00:38:46.130 --> 00:38:52.590
separated parts like the main
target and a static library.

00:38:53.410 --> 00:38:57.100
There is one small thing,
a problem that we saw that you

00:38:57.100 --> 00:38:59.850
guys encountered in the past,
and we want to bring

00:38:59.850 --> 00:39:01.400
your attention to that.

00:39:01.490 --> 00:39:03.590
While you're developing,
everything will be fine.

00:39:03.660 --> 00:39:07.640
You'll be able to build,
you'll be able to run on devices,

00:39:07.680 --> 00:39:08.660
and so on.

00:39:08.780 --> 00:39:13.090
But the moment you will
want to create an archive,

00:39:13.090 --> 00:39:14.740
you'll run into trouble.

00:39:14.830 --> 00:39:17.580
You need to create,
to use a static library to

00:39:17.580 --> 00:39:19.490
import it in the build phase.

00:39:19.650 --> 00:39:21.250
You're familiar with that.

00:39:21.360 --> 00:39:24.440
We encourage you, if you have problems at
the IPA generation time,

00:39:24.530 --> 00:39:27.480
to look in the project setting,
and to look at the flag code,

00:39:27.710 --> 00:39:29.200
skip install.

00:39:29.270 --> 00:39:30.320
What is it?

00:39:30.390 --> 00:39:32.900
If you say, skip install, no.

00:39:33.200 --> 00:39:38.660
Xcode will install your static library
in the archive you are creating.

00:39:38.730 --> 00:39:41.810
Then when you will want to create an IPA,
what will happen?

00:39:42.000 --> 00:39:47.690
You know that you can submit to the
store only a self-contained bundle.

00:39:48.150 --> 00:39:53.350
And you will have your dot
app for iOS in your archive.

00:39:53.530 --> 00:39:55.690
And you will also have your
static library installed.

00:39:55.910 --> 00:40:00.030
There's no way you can distribute a
static library to your user on a device.

00:40:00.150 --> 00:40:01.690
So we won't be able to create an IPA.

00:40:01.970 --> 00:40:04.780
So you need to set this flag to yes.

00:40:05.170 --> 00:40:07.440
Skip the install, please.

00:40:07.480 --> 00:40:11.080
Especially if you want to create an IPA.

00:40:11.210 --> 00:40:14.140
Small thing, but can be useful.

00:40:15.740 --> 00:40:19.310
And now you'll be able
to have an archive.

00:40:19.430 --> 00:40:22.570
So we talk about creating from templates.

00:40:22.910 --> 00:40:26.080
Sometimes you want to import
from existing projects.

00:40:26.110 --> 00:40:30.140
And now we're going back to
a new feature in Xcode 4.2,

00:40:30.160 --> 00:40:31.540
one of my favorites.

00:40:31.560 --> 00:40:33.700
I like it a lot.

00:40:33.710 --> 00:40:38.810
I imported an old project of mine,
the one that Jacob created, not of mine,

00:40:38.810 --> 00:40:40.060
but it's the same.

00:40:40.080 --> 00:40:44.600
And you see in the issue navigator
that Xcode is saying something.

00:40:44.600 --> 00:40:47.480
It's saying, eh,
they are setting that you

00:40:47.480 --> 00:40:50.920
might consider updating.

00:40:51.130 --> 00:40:54.780
If you click on this,
you'll be offered with a few choices.

00:40:54.790 --> 00:40:57.020
In this case, one,
there was not much to change,

00:40:57.020 --> 00:40:58.450
but there can be much more.

00:40:58.580 --> 00:41:03.330
In this case, what Xcode is saying is,
you have coded your iOS

00:41:03.670 --> 00:41:05.710
version that you're using.

00:41:05.810 --> 00:41:08.930
And as you know,
you have to build using the latest SDK.

00:41:09.340 --> 00:41:10.540
So why not say it?

00:41:10.850 --> 00:41:13.630
Why not use the setting that says,
use the latest SDK?

00:41:13.940 --> 00:41:16.660
That way, when you have a new
version of Xcode installed,

00:41:16.660 --> 00:41:20.560
a new version of the iOS SDK,
you don't have to update your project.

00:41:20.650 --> 00:41:21.600
That's very convenient.

00:41:21.650 --> 00:41:25.560
Xcode is offering to modernize
your setting for you.

00:41:25.620 --> 00:41:26.660
It does a little bit more.

00:41:26.660 --> 00:41:29.300
It's checking to duplicate
files in some entries.

00:41:29.360 --> 00:41:33.010
It is checking for older flags
that are not supported anymore.

00:41:33.210 --> 00:41:36.300
It's project cleaning.

00:41:36.420 --> 00:41:38.910
Thank you.

00:41:41.970 --> 00:41:45.670
Another detail, small thing.

00:41:45.900 --> 00:41:49.570
I'm sure most of you attended the
excellent presentation the other day

00:41:49.570 --> 00:41:51.580
about how do I master the schemes.

00:41:51.700 --> 00:41:54.690
Schemes are an extremely
powerful feature in Xcode 4.

00:41:54.700 --> 00:42:00.380
Schemes are created automatically
for you and if they find

00:42:00.380 --> 00:42:04.880
release and debug configuration,
we'll initialize the

00:42:05.060 --> 00:42:06.110
schemes based on that.

00:42:06.300 --> 00:42:13.500
So, when you will archive an application,
it is very likely that the scheme

00:42:13.500 --> 00:42:18.950
that will be created originally will
point to the release configuration.

00:42:19.140 --> 00:42:23.160
If you set up in the past a distribution,
which happens to a lot of us,

00:42:23.160 --> 00:42:27.040
especially with the workflow
that Xcode 3 was encouraging.

00:42:27.090 --> 00:42:30.720
If you set up a
distribution configuration,

00:42:30.760 --> 00:42:32.030
the scheme won't point to that one.

00:42:32.050 --> 00:42:35.420
So I encourage you to look into your
scheme and look at the automatic

00:42:35.420 --> 00:42:38.450
setup to check that it's right,
especially for archive.

00:42:38.450 --> 00:42:41.710
Because if you're not pointing
to the configuration you think,

00:42:41.710 --> 00:42:45.190
you will be either unable to submit
because it won't build properly,

00:42:45.190 --> 00:42:48.500
or you will submit something that
is not exactly what you want.

00:42:49.420 --> 00:42:52.310
Which would be bad, I think.

00:42:54.380 --> 00:42:55.020
And that's it.

00:42:55.280 --> 00:42:57.280
That's it for today.

00:42:57.540 --> 00:42:59.460
I hope you enjoyed the presentation.

00:42:59.520 --> 00:43:02.020
You might have a few questions.

00:43:02.020 --> 00:43:05.220
So we will enter for a few Q&A,
if that's okay with you.

00:43:05.220 --> 00:43:06.580
So I'll call the team on stage.

00:43:06.580 --> 00:43:09.210
Guys?

00:43:14.710 --> 00:43:18.490
If you have more questions, of course,
the excellent Michael Jurowicz is

00:43:18.490 --> 00:43:21.100
available to answer all of them.

00:43:21.270 --> 00:43:23.270
We have a good documentation.

00:43:23.510 --> 00:43:25.520
We have forums where
you can ask questions.

00:43:25.520 --> 00:43:28.600
I have Apple engineers replying to those.

00:43:28.600 --> 00:43:32.100
I know most of them are in the past,
but the videos will be

00:43:32.100 --> 00:43:35.010
available online at some point,
I'm sure.