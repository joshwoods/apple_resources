WEBVTT

00:00:12.760 --> 00:00:14.840
So good afternoon, everyone.

00:00:14.840 --> 00:00:18.150
My name is Jing Jin,
and today I'm here to tell you about

00:00:18.150 --> 00:00:21.960
how to create really cool effects
with CSS and the new features we

00:00:21.960 --> 00:00:25.010
added to make your life even easier.

00:00:25.850 --> 00:00:32.750
So everything I talk about today is
supported on the newest Safari on

00:00:32.750 --> 00:00:36.540
desktop and Safari on iOS,
available to you in

00:00:36.540 --> 00:00:38.470
the developer previews.

00:00:39.190 --> 00:00:43.030
And you should already have a
basic knowledge of how HTML,

00:00:43.170 --> 00:00:46.200
CSS, and JavaScript syntax works.

00:00:47.390 --> 00:00:49.800
So all that being said,
if you're sitting here already,

00:00:49.910 --> 00:00:52.740
you probably use
CSS sometime in your life.

00:00:52.740 --> 00:00:55.750
And we all know that
since CSS is plain text,

00:00:55.750 --> 00:00:59.260
it's very compact to
transfer over the network.

00:01:00.740 --> 00:01:04.760
It's also scalable compared to images.

00:01:04.890 --> 00:01:08.500
So for example,
if you had a gradient made with CSS,

00:01:08.570 --> 00:01:14.230
it would be as crisp as it was at 100%,
no matter how much the user zoomed up.

00:01:15.640 --> 00:01:20.100
And because CSS is all
interpreted by the browser,

00:01:20.130 --> 00:01:22.440
it's very optimized.

00:01:22.440 --> 00:01:26.150
And since it's plain text,
you can pretty much edit it anywhere.

00:01:27.090 --> 00:01:31.410
Now, one of the benefits of CSS is
that if a property isn't

00:01:31.480 --> 00:01:34.560
supported in an older browser,
it simply gets ignored.

00:01:34.700 --> 00:01:37.070
So you can progressively enhance
your website while staying

00:01:37.140 --> 00:01:39.860
compatible for older browsers.

00:01:40.350 --> 00:01:42.970
And lastly,
if you try to replace all of your

00:01:42.970 --> 00:01:47.730
images and plugins with CSS effects,
that means all of your site is

00:01:47.730 --> 00:01:50.790
searchable from search engines.

00:01:51.720 --> 00:01:53.930
So instead of just telling
you how great CSS is,

00:01:54.000 --> 00:01:56.470
I'd like to invite my colleague,
Matt Delaney,

00:01:56.470 --> 00:02:01.190
up to show you a demo we made
with all sorts of cool effects.

00:02:08.890 --> 00:02:09.250
Hello, everyone.

00:02:09.310 --> 00:02:10.600
My name is Matthew Delaney.

00:02:10.600 --> 00:02:14.100
And like Jing, I'm also an engineer on
the Safari WebKit team.

00:02:14.160 --> 00:02:18.990
And as you should have seen,
I'll be showing you a demo today.

00:02:19.320 --> 00:02:22.380
And so this demo is full
of CSS tips and tricks,

00:02:22.570 --> 00:02:23.790
absolutely chock-full.

00:02:23.880 --> 00:02:26.800
And so basically,
as I go through this demo,

00:02:26.800 --> 00:02:29.980
I'm going to point out all the
different CSS effects and animations

00:02:29.980 --> 00:02:32.260
that we'll later show you how to make.

00:02:32.320 --> 00:02:34.850
So when Jing and I were
going to make a demo,

00:02:34.950 --> 00:02:40.200
we were talking about how a lot of online
shopping sites have a checkout process,

00:02:40.200 --> 00:02:43.070
you know, and this checkout process is
usually quite tedious and,

00:02:43.070 --> 00:02:45.190
well, usually rather boring.

00:02:45.360 --> 00:02:51.700
So our demo is basically a take on-- our
creative take on the checkout process.

00:02:51.710 --> 00:02:57.200
And we packed it full of different
CSS effects and animations.

00:02:57.200 --> 00:02:59.670
So I'm going to show you that here now.

00:03:01.270 --> 00:03:03.600
So as a little background,
imagine you're on a kitten shopping site,

00:03:03.710 --> 00:03:04.380
for example, okay?

00:03:04.380 --> 00:03:07.970
You've just chosen all of your kittens,
and you're ready to check out.

00:03:07.980 --> 00:03:10.800
So as is typical,
you come up to your cart,

00:03:10.800 --> 00:03:13.740
and you see that you have
all four of our kittens here.

00:03:13.740 --> 00:03:16.020
We have super awesome
kitty type number one,

00:03:16.160 --> 00:03:19.380
two, three, and four,
all appropriately priced, of course.

00:03:19.380 --> 00:03:23.740
And so we've got the right cart,
and so we're ready to begin checkout.

00:03:23.740 --> 00:03:29.420
Now, what's unusual about this is that
as I go to begin my checkout,

00:03:29.420 --> 00:03:33.180
little do I know I'm actually inside
of my order's shipping package.

00:03:33.180 --> 00:03:35.140
So this is pretty cool.

00:03:35.140 --> 00:03:37.350
So what we did here was
we created a 3D box,

00:03:37.440 --> 00:03:41.480
and we gave different faces different,
basically sections of

00:03:41.480 --> 00:03:42.500
the checkout process.

00:03:42.500 --> 00:03:46.580
So what you saw was a nice sweeping
transition from the inside of

00:03:46.600 --> 00:03:49.240
the box down to this new face,
this first face of the box,

00:03:49.280 --> 00:03:52.030
which is quite apparent from
the shipping label that it's our

00:03:52.030 --> 00:03:53.240
shipping section to fill out.

00:03:53.270 --> 00:03:54.590
So let's go and do that now.

00:03:57.420 --> 00:04:00.200
Fill out my name.

00:04:00.240 --> 00:04:01.950
And let's ship them to work.

00:04:02.010 --> 00:04:04.600
I just need some more kittens at work.

00:04:04.780 --> 00:04:07.530
And--whoops.

00:04:09.500 --> 00:04:10.460
Here we go.

00:04:10.470 --> 00:04:11.740
There's our shipping address.

00:04:11.810 --> 00:04:15.440
So, now this page is-- this section
is quite interesting because

00:04:15.440 --> 00:04:17.270
it's made entirely with CSS.

00:04:17.420 --> 00:04:19.960
There are zero images
going on here at all.

00:04:19.960 --> 00:04:22.840
From--basically from the check
mark that's animating as I get

00:04:22.840 --> 00:04:27.200
a field in the form correct,
to this nice little yellow

00:04:27.620 --> 00:04:30.170
glowing animation I get when
I get a field incorrect with

00:04:30.280 --> 00:04:33.430
the wrong number of characters,
all the way to this little nice

00:04:33.430 --> 00:04:36.620
red ribbon that looks like it's
wrapping itself from around the back

00:04:36.690 --> 00:04:39.000
of the shipping label to the front.

00:04:40.400 --> 00:04:42.500
So the shipping label is one
thing in particular that we'll

00:04:42.510 --> 00:04:46.200
also show you how to make later,
along with the 3D box and the

00:04:46.200 --> 00:04:48.060
transitions of rotating the box.

00:04:48.160 --> 00:04:50.390
So let's continue on to the next section.

00:04:50.480 --> 00:04:52.110
So yet again,
a nice sweeping transition that

00:04:52.230 --> 00:04:54.180
shows us a new face of the box.

00:04:54.500 --> 00:04:57.990
As we can see here,
it's obviously the postage section.

00:04:58.140 --> 00:05:01.950
So as opposed to the usual
radio button kind of selections

00:05:01.960 --> 00:05:04.450
or whatnot you see on sites,
we actually have three

00:05:04.450 --> 00:05:06.730
stamps to choose from here.

00:05:06.930 --> 00:05:09.800
So I have standard 2-day and overnight,
I see.

00:05:09.840 --> 00:05:10.510
And watch this.

00:05:10.590 --> 00:05:14.220
As I mouse over each one of the stamps,
I get this nice effect where the

00:05:14.220 --> 00:05:16.800
stamp appears as if it's actually
peeling up off of the page.

00:05:16.800 --> 00:05:17.940
So it's pretty nice.

00:05:17.940 --> 00:05:21.710
Now, since obviously, you know,
I need these kittens ASAP,

00:05:21.800 --> 00:05:23.770
I'm going to go for overnight.

00:05:23.780 --> 00:05:28.320
So as I go to choose overnight,
watch this animation as the stamp

00:05:28.320 --> 00:05:32.700
actually peels itself off the page
and puts itself onto the package.

00:05:32.700 --> 00:05:35.940
So that was pretty cool.

00:05:45.370 --> 00:05:47.080
Now onto our third section here.

00:05:47.180 --> 00:05:51.230
We can see it's billing,
evidenced by the credit card here.

00:05:51.490 --> 00:05:52.800
It's obviously a corporate purchase.

00:05:52.950 --> 00:05:58.610
I'm going to use my Apple corporate card,
so please don't record this information.

00:06:03.600 --> 00:06:05.300
Here we go.

00:06:05.300 --> 00:06:08.900
Now this section is also of note because
there are yet again zero images here.

00:06:08.900 --> 00:06:11.410
This is made entirely with CSS,
everything from the credit card to

00:06:11.490 --> 00:06:15.440
all of the elements inside of the
credit card that we just edited.

00:06:15.440 --> 00:06:17.670
So let's go on to the next section.

00:06:18.030 --> 00:06:21.950
The fourth and final phase we see
here is our confirmation page,

00:06:21.950 --> 00:06:25.410
which is kind of in the form of
this slick-looking receipt here.

00:06:25.420 --> 00:06:28.730
So this is the usual kind of
part where we're checking we

00:06:28.730 --> 00:06:30.940
have all the right information.

00:06:30.940 --> 00:06:35.380
So let's see if we have kit number one,
two, three, and four.

00:06:35.380 --> 00:06:36.650
That's my favorite with the blue eyes.

00:06:36.660 --> 00:06:41.480
So I can see that it's shipped
to work and paid for by work.

00:06:41.600 --> 00:06:42.140
That's perfect.

00:06:42.140 --> 00:06:44.240
We've got overnight shipping.

00:06:44.240 --> 00:06:45.100
That's what we wanted.

00:06:45.100 --> 00:06:47.180
And the tax, that looks pretty good too.

00:06:47.860 --> 00:06:50.540
So just weighing in at a
very simple $4 million,

00:06:50.540 --> 00:06:53.190
we have all four of our kittens,
and we're ready to ship.

00:06:53.240 --> 00:06:57.060
So here's another thing to take note to.

00:06:57.060 --> 00:07:00.300
As I click ship it here,
as my order is processing,

00:07:00.300 --> 00:07:03.620
I get this nice nifty little animation
that fits the motif of our site,

00:07:03.620 --> 00:07:06.100
which is these paw prints
going around a circular image,

00:07:06.100 --> 00:07:08.780
which is apparently of a cat
that's processing our order.

00:07:08.780 --> 00:07:13.080
And so this is another thing that we'll
show you how to make in this talk,

00:07:13.130 --> 00:07:14.420
these nice spinners here.

00:07:14.420 --> 00:07:17.180
And if the cat would just hurry up.

00:07:17.690 --> 00:07:19.060
We get our order is complete.

00:07:19.060 --> 00:07:22.060
So it wasn't that much nicer than
the alternative checkout process.

00:07:30.270 --> 00:07:31.580
So now I'm going to hand
you back over to Jing,

00:07:31.580 --> 00:07:33.570
and she's going to show you how
to create some of these awesome

00:07:33.590 --> 00:07:35.760
CSS effects and animations.

00:07:59.800 --> 00:08:03.290
said I'm going to show you
how to do some of those today.

00:08:03.300 --> 00:08:07.160
We'll first start with taking a
look at how to create some of the

00:08:07.160 --> 00:08:09.560
graphical effects you saw there.

00:08:09.720 --> 00:08:16.050
Then I'll show you how to animate with
just a few additional lines of CSS.

00:08:16.190 --> 00:08:22.490
And lastly, I'll address what's probably
one of your top concerns.

00:08:22.490 --> 00:08:24.240
How do I make use of all these great
effects without breaking older browsers?

00:08:24.870 --> 00:08:27.770
So first, let's start with the effects.

00:08:27.850 --> 00:08:31.230
Some of you out there may be
CSS gurus and already know that you

00:08:31.230 --> 00:08:36.080
can actually manipulate your elements
in 3D space using 3D transforms.

00:08:36.100 --> 00:08:38.620
That's how we created this box.

00:08:38.670 --> 00:08:43.250
But there's also another way to create
a feel of 3D without actually using 3D,

00:08:43.390 --> 00:08:48.250
and that's using 2D effects to
create some lighting illusions.

00:08:48.670 --> 00:08:51.420
So for example,
here we have a banner that looks

00:08:51.420 --> 00:08:53.840
like it's folded over the card.

00:08:53.840 --> 00:08:58.900
And this is actually all done
with just some gradients.

00:08:59.200 --> 00:09:01.910
So we use all these properties,
but gradients are great

00:09:02.040 --> 00:09:05.170
because they're very versatile.

00:09:05.870 --> 00:09:09.340
If you remember, back in 2008,
we actually pioneered

00:09:09.340 --> 00:09:11.140
the CSS gradient syntax.

00:09:11.220 --> 00:09:14.880
And now that it's being
adopted by W3C standards body,

00:09:15.080 --> 00:09:19.330
we've updated our syntax to include
four new functions that make it

00:09:19.330 --> 00:09:21.990
easier than ever to use gradients.

00:09:23.190 --> 00:09:26.040
So let me show you how you can
use two simple linear gradients to

00:09:26.090 --> 00:09:29.110
create that ribbon-looking thing.

00:09:30.670 --> 00:09:33.360
As you can see here,
you can use gradient functions

00:09:33.810 --> 00:09:35.450
anywhere you can use images.

00:09:35.700 --> 00:09:38.980
So we use it as a background
image for our ribbon here.

00:09:39.550 --> 00:09:42.940
We can give it a starting
and ending color,

00:09:42.970 --> 00:09:45.420
tell the gradient which
position to start in,

00:09:45.420 --> 00:09:48.770
and add in as many
color stops as we need.

00:09:49.240 --> 00:09:53.560
And to position the color stops,
simply add a position after each

00:09:53.560 --> 00:09:56.360
color stop separated by a space.

00:09:57.780 --> 00:10:03.380
And with just that one additional line,
we already have this folded overlook.

00:10:03.420 --> 00:10:05.280
So what about the right side?

00:10:05.300 --> 00:10:08.580
We need kind of like a diagonal taper.

00:10:08.580 --> 00:10:12.500
That's actually just another
gradient overlapped with this one.

00:10:12.510 --> 00:10:15.240
So to create that,
just make the top gradient

00:10:15.550 --> 00:10:17.480
transparent on the right side.

00:10:17.480 --> 00:10:20.460
And below it,
we'll add a second one that's slightly

00:10:20.460 --> 00:10:25.510
rotated and has the starting and ending
colors jutted up against each other,

00:10:25.510 --> 00:10:27.540
creating a sharp edge.

00:10:27.540 --> 00:10:29.890
And here's our final effect.

00:10:30.900 --> 00:10:34.430
So like I said before,
because gradients are scalable,

00:10:34.430 --> 00:10:38.950
this means that that sharp edge
will stay just this sharp no matter

00:10:39.400 --> 00:10:41.870
how big your page gets zoomed up.

00:10:45.180 --> 00:10:47.280
So that was a linear gradient.

00:10:47.290 --> 00:10:49.920
And next, onto radial gradients.

00:10:49.940 --> 00:10:51.980
This is actually my
favorite type of gradient,

00:10:52.020 --> 00:10:54.660
because you can create
very realistic looking

00:10:54.770 --> 00:10:58.080
three-dimensional lighting effects.

00:10:58.130 --> 00:11:00.400
So for example,
the box we showed you earlier,

00:11:00.430 --> 00:11:05.510
if all we had was a background image,
it would look like this.

00:11:05.890 --> 00:11:09.980
So it's approximately the correct shape,
but it doesn't look realistic

00:11:10.420 --> 00:11:12.800
because everything is the same color.

00:11:12.800 --> 00:11:15.740
And in real life,
we have lights and shadows.

00:11:16.030 --> 00:11:20.200
So with a few simple radial gradients,
you can turn a box that looks stiff

00:11:20.520 --> 00:11:23.390
like this to a box that looks like this.

00:11:24.180 --> 00:11:26.320
Let's start making that.

00:11:26.380 --> 00:11:31.070
This time we'll use a radial
gradient on top of a cardboard image.

00:11:31.430 --> 00:11:35.500
Just like a linear gradient,
specify the start and end colors,

00:11:35.500 --> 00:11:39.970
and it will draw from the center
out to the furthest corners.

00:11:41.280 --> 00:11:43.930
Adjust the colors up a little bit,
and we have the correct

00:11:44.090 --> 00:11:46.510
shading for our box face.

00:11:48.450 --> 00:11:51.230
Now for the flaps,
all we need is to move that

00:11:51.230 --> 00:11:56.010
gradient from the center of the
element to the top of the element.

00:11:56.530 --> 00:11:58.320
And if we wanted it to
be a different shape,

00:11:58.320 --> 00:12:02.900
we can actually specify the horizontal
and vertical radii separately,

00:12:02.920 --> 00:12:05.480
making a very flat ellipse.

00:12:06.600 --> 00:12:09.440
And that's all you need,
two lines of gradients to create

00:12:09.440 --> 00:12:11.870
realistic lighting for your box.

00:12:14.570 --> 00:12:18.220
So we talked about linear gradients,
we talked about radial gradients,

00:12:18.220 --> 00:12:22.490
and now that you know how to use those,
repeating gradients are extremely easy.

00:12:22.910 --> 00:12:25.820
Just take an existing linear gradient,
add the word repeating in

00:12:25.820 --> 00:12:29.460
front of the function name,
and it will repeat throughout

00:12:29.460 --> 00:12:31.050
the rest of your element.

00:12:32.790 --> 00:12:35.320
Similarly with a radial gradient,
add repeating,

00:12:35.320 --> 00:12:37.940
and it repeats from inside out.

00:12:40.610 --> 00:12:43.170
So again,
these four new functions or gradients,

00:12:43.290 --> 00:12:45.580
as you can see,
were really simple to use.

00:12:45.600 --> 00:12:49.870
And they're available in the
newest Safari 5.1 Developer Preview

00:12:49.910 --> 00:12:52.910
and the iOS 5 Preview.

00:12:55.860 --> 00:13:00.730
Now we just created-- the last thing we
did was creating shading for our box.

00:13:00.900 --> 00:13:04.500
So let's actually create
the entire box now.

00:13:04.900 --> 00:13:08.520
To do this, as I said earlier,
we'll use 3D transforms.

00:13:08.520 --> 00:13:11.220
And if you haven't
used transforms before,

00:13:11.380 --> 00:13:15.970
it's just a CSS property that takes
different functions and manipulates your

00:13:15.990 --> 00:13:20.790
element on the page without changing
the layouts of the rest of the page.

00:13:21.170 --> 00:13:23.460
So for example,
a translateY would move your element

00:13:23.610 --> 00:13:26.740
down without affecting its neighbors.

00:13:26.740 --> 00:13:29.200
And you can string as many
of these up as you want,

00:13:29.200 --> 00:13:32.360
and they will get applied
one after another.

00:13:34.010 --> 00:13:35.580
So onto the box.

00:13:35.600 --> 00:13:37.000
Our box is an open-face box.

00:13:37.040 --> 00:13:38.780
That means we need five faces.

00:13:39.110 --> 00:13:44.700
So let's make five divs and put
them in a class called package.

00:13:44.720 --> 00:13:46.670
And since we'll just want
to make a square box,

00:13:46.750 --> 00:13:51.290
we'll make them 400 by 400 and
absolutely positioned so they're

00:13:51.370 --> 00:13:53.350
overlapped on top of each other.

00:13:54.400 --> 00:13:57.420
Now we need to move them in 3D space.

00:13:57.570 --> 00:14:00.300
So the 3D space looks like this.

00:14:00.330 --> 00:14:05.980
The y points down, x points to the right,
and z points out of the screen.

00:14:06.040 --> 00:14:09.160
So to move a face forward,
we just need to apply a

00:14:09.200 --> 00:14:11.700
positive translate z to it.

00:14:13.770 --> 00:14:18.150
Now to make one of the side faces,
what we need to do is to rotate it.

00:14:18.190 --> 00:14:23.360
And that rotation is around the y-axis,
so it's a rotate y.

00:14:23.970 --> 00:14:27.980
And note here that when you apply
a transform function to an element,

00:14:27.980 --> 00:14:31.130
it also gets applied
to the element's axis.

00:14:31.260 --> 00:14:35.800
So here the X and Z axes get
rotated along with the element.

00:14:36.710 --> 00:14:40.720
And after that, a simple translate z to
move it towards the right.

00:14:40.720 --> 00:14:42.990
And we've got our second phase.

00:14:44.800 --> 00:14:48.450
So apply the same principle to
the other three faces of the box,

00:14:48.450 --> 00:14:51.820
and you have your box
constructed in 3D space.

00:14:51.820 --> 00:14:55.770
And on your page, it will look like that.

00:14:56.620 --> 00:14:58.100
Not really worth the effort, really.

00:14:58.100 --> 00:15:00.740
So what is happening here?

00:15:00.740 --> 00:15:06.150
This is actually because we need to
apply a property called perspective.

00:15:06.220 --> 00:15:11.380
In real life, perspective is what makes
things look three-dimensional.

00:15:11.590 --> 00:15:16.320
So if you look at the left
and right edges of the room,

00:15:16.410 --> 00:15:21.130
you'll notice that they look like
they're converging to a point,

00:15:21.130 --> 00:15:21.130
but you know that they're parallel.

00:15:21.320 --> 00:15:26.070
And this distortion is what we need
on the web page for it to look 3D.

00:15:26.210 --> 00:15:32.390
So a CSS perspective property is
a value that is related to how

00:15:32.540 --> 00:15:34.960
far you are from your object.

00:15:35.130 --> 00:15:38.380
So if you're really close to your
object and have a really small value,

00:15:38.380 --> 00:15:40.220
then it looks really distorted.

00:15:40.220 --> 00:15:46.220
But as you move further and further away,
the object becomes flatter and flatter.

00:15:47.100 --> 00:15:52.240
So we probably want to apply a
perspective of about 800 to our box.

00:15:54.370 --> 00:15:59.090
Now note that perspective applies to
the transforms of the elements children.

00:15:59.310 --> 00:16:02.060
So since we were
transforming the box's face,

00:16:02.080 --> 00:16:05.560
we need to apply the perspective
to the face's parents,

00:16:05.560 --> 00:16:07.120
so the class package.

00:16:07.140 --> 00:16:10.500
And applying the perspective,
we now have a front-facing

00:16:10.500 --> 00:16:12.410
three-dimensional box.

00:16:19.380 --> 00:16:23.830
So so far, I told you how to use the
new gradient syntax to create

00:16:23.830 --> 00:16:25.110
some really cool effects.

00:16:25.120 --> 00:16:29.100
And we walked through how to use
3D transforms to create a box.

00:16:29.160 --> 00:16:32.160
But as you saw in the last slide,
the box wasn't all that exciting.

00:16:32.160 --> 00:16:36.620
It was 3D, but if you had an opaque face,
you still would see just a square.

00:16:36.670 --> 00:16:40.410
So let's add some animations to
actually make it move around.

00:16:43.950 --> 00:16:47.800
One of the animations we saw was a
rotation when you switched between

00:16:47.800 --> 00:16:49.220
different sections of the box.

00:16:49.470 --> 00:16:51.990
So let's take a look at that again.

00:16:56.460 --> 00:16:59.120
Now in terms of 3D transforms,
this is really just a

00:16:59.120 --> 00:17:02.090
rotate around the y-axis.

00:17:05.390 --> 00:17:06.920
So here's our box.

00:17:06.930 --> 00:17:11.820
The easiest way to rotate our box is to
apply the transform to the package class.

00:17:11.890 --> 00:17:14.440
But as I just said,
we need a perspective to its parent.

00:17:14.740 --> 00:17:19.320
So let's add a package container
and move the perspective definition

00:17:19.400 --> 00:17:21.680
from package to package container.

00:17:22.460 --> 00:17:25.690
Now, if we had just this,
the transforms on the faces won't work.

00:17:25.890 --> 00:17:31.180
So we need to tell package that we want
the faces to inherit the perspective.

00:17:31.260 --> 00:17:36.700
And we do that by using the transform
style property of preserve3D.

00:17:36.860 --> 00:17:41.490
So now that we have our setup,
let's do our animation.

00:17:42.650 --> 00:17:46.060
Since our animation requires one
starting state and one ending state,

00:17:46.060 --> 00:17:51.230
we can translate between the
two using a transition property.

00:17:51.640 --> 00:17:54.410
So for a transition property,
you have your starting

00:17:54.620 --> 00:17:56.670
state and ending state.

00:17:58.750 --> 00:18:02.460
And you can apply this
in many different ways,

00:18:02.460 --> 00:18:06.600
one of which is just simply changing
the class name in JavaScript.

00:18:06.710 --> 00:18:10.700
So if I change the class name from
package to package right side,

00:18:10.750 --> 00:18:15.970
then what you will see on screen is that
your package will snap to the right side.

00:18:17.020 --> 00:18:20.500
So with just one more line,
we can add a transition

00:18:20.500 --> 00:18:23.680
property that says,
I want any changes in the

00:18:23.800 --> 00:18:28.280
transform property to happen
over a one second duration.

00:18:28.310 --> 00:18:33.480
This means that when we change the class
back from package right side to package,

00:18:33.510 --> 00:18:36.670
we'll get a smooth transition.

00:18:38.610 --> 00:18:42.370
Know that when you define the transition,
it has no idea which position

00:18:42.370 --> 00:18:46.040
it's transitioning from and which
position it's transitioning to.

00:18:46.110 --> 00:18:48.920
So it really doesn't care where
your starting and ending state is.

00:18:48.930 --> 00:18:54.200
That means it's really useful if you
want to use it for the same property,

00:18:54.260 --> 00:18:55.860
but a lot of different values.

00:18:55.860 --> 00:18:58.400
So for example,
when we're rotating inside a box,

00:18:58.410 --> 00:19:02.200
using the exact same transition,
we'll just assign a different class,

00:19:02.200 --> 00:19:06.370
and it will automatically
perform the correct animation.

00:19:10.190 --> 00:19:15.150
So that's a transition applied using
JavaScript to change your classes.

00:19:15.620 --> 00:19:18.570
You can also use a transition
to perform a hover effect

00:19:18.730 --> 00:19:20.760
completely without JavaScript.

00:19:20.840 --> 00:19:24.920
So for example, if you watch the bottom
left corner of the stamp,

00:19:24.940 --> 00:19:28.270
when the user hovers over it,
it actually lifts up.

00:19:28.520 --> 00:19:33.680
This is really just a regular
class with some properties in it,

00:19:33.860 --> 00:19:37.860
and the hover pseudo class with
some changes in properties,

00:19:37.980 --> 00:19:41.960
and an addition of a transition property.

00:19:46.500 --> 00:19:49.510
So we just saw now that you can
use a transition to interpolate

00:19:49.510 --> 00:19:52.230
smoothly between two states,
either by using

00:19:52.230 --> 00:19:55.440
JavaScript to change classes,
or by just using some

00:19:55.440 --> 00:19:57.250
pseudo class selectors.

00:19:57.460 --> 00:19:59.800
But what if you wanted
something more complicated?

00:19:59.950 --> 00:20:02.900
What if, for example,
you wanted the animation we

00:20:02.900 --> 00:20:05.460
had when you selected a stamp?

00:20:06.760 --> 00:20:10.200
So as you can see here,
the stamp actually flies up in front

00:20:10.200 --> 00:20:13.030
of the box and then goes back down.

00:20:13.830 --> 00:20:16.300
We can use a keyframe animation here.

00:20:16.300 --> 00:20:19.260
And to do that,
first we need to determine what are

00:20:19.260 --> 00:20:22.690
the separate states of our animation.

00:20:23.120 --> 00:20:26.340
So for this animation,
there are three things going on.

00:20:26.430 --> 00:20:29.360
The first thing is that the
stamp is moving smoothly from the

00:20:29.530 --> 00:20:31.890
starting state to the ending state.

00:20:31.950 --> 00:20:36.720
The second thing is that the stamp
is getting a 3D transform starting

00:20:36.720 --> 00:20:40.240
at the beginning of the animation,
holding it there for a little while,

00:20:40.240 --> 00:20:43.220
and then going back down to a flat stamp.

00:20:43.220 --> 00:20:46.280
And the third thing is that it's
actually becoming bigger in the middle

00:20:46.300 --> 00:20:49.110
of the animation and smaller at the end.

00:20:51.310 --> 00:20:53.530
So let's watch that again in slow motion.

00:20:53.700 --> 00:20:58.110
See how it peels up, stays there,
gets bigger, and then comes back down.

00:21:00.640 --> 00:21:03.440
And on a timeline, it looks like this.

00:21:03.460 --> 00:21:07.890
You're moving from wherever
the middle is to the top right.

00:21:08.350 --> 00:21:11.540
Then you're doing, it's becoming flipped,
and then staying there for

00:21:11.540 --> 00:21:13.390
a quarter of the animation.

00:21:13.440 --> 00:21:17.770
And the last thing is that it's
getting bigger and smaller.

00:21:18.010 --> 00:21:21.680
So as you can see on this timeline,
we have four different frames

00:21:21.680 --> 00:21:23.160
we need to take care of.

00:21:23.210 --> 00:21:26.150
And now let's get to the actual coding.

00:21:26.870 --> 00:21:30.150
So define these frames
using the keyframe property.

00:21:30.440 --> 00:21:33.250
Give it a name so we
can refer to it later,

00:21:33.250 --> 00:21:34.990
and put those in.

00:21:35.310 --> 00:21:38.770
Notice how I didn't put in the 0% frame.

00:21:38.860 --> 00:21:42.020
And some of you who've used
keyframes before might think

00:21:42.020 --> 00:21:43.340
that's actually a mistake.

00:21:43.370 --> 00:21:45.530
But this is actually a
new feature of Safari.

00:21:45.540 --> 00:21:50.190
Any frame or any property you
don't specify explicitly in a

00:21:50.260 --> 00:21:54.800
keyframe animation gets interpolated
automatically by the browser.

00:21:54.870 --> 00:21:57.490
So this means when you have a
really complex animation where

00:21:57.490 --> 00:22:00.660
things are happening in different
orders and for different times,

00:22:00.680 --> 00:22:03.810
you can save a lot of coding.

00:22:04.000 --> 00:22:07.000
So for example, the movement we have
is a smooth movement.

00:22:07.200 --> 00:22:10.440
So all we really need to do is to
define the final position and not

00:22:10.440 --> 00:22:13.050
care about the other two keyframes.

00:22:13.980 --> 00:22:17.250
All right,
so we'll just add in the transforms

00:22:17.250 --> 00:22:21.600
for flipping the stamp up,
and then add in a scale for

00:22:21.600 --> 00:22:23.690
making it bigger at 50%.

00:22:26.250 --> 00:22:28.200
And then we need to apply it.

00:22:28.540 --> 00:22:30.520
So here we're responding to a user click.

00:22:30.720 --> 00:22:36.100
So let's just put it in JavaScript on
click handler and trigger the animation,

00:22:36.220 --> 00:22:39.290
the keyframe animation,
using the animation property.

00:22:39.300 --> 00:22:45.590
So doing this, we'll get an animation
that looks like this.

00:22:50.480 --> 00:22:53.460
So the good news is we got
most of the animation correct.

00:22:53.460 --> 00:22:56.580
The bad news is the
stamp didn't stay there.

00:22:56.580 --> 00:23:01.600
And this is actually expected
behavior in CSS animations.

00:23:01.600 --> 00:23:07.000
It means that your animation only affects
your element during the 0% to 100% state.

00:23:07.070 --> 00:23:08.760
So that means when the
animation finishes,

00:23:08.760 --> 00:23:12.280
the element will go back
to its pre-animation state.

00:23:12.860 --> 00:23:17.700
There are some handy CSS properties we
can use to prevent this from happening.

00:23:17.750 --> 00:23:20.700
And it's called an animation fill mode.

00:23:20.790 --> 00:23:25.300
So let me take a simpler example
to show what a fill mode is.

00:23:26.000 --> 00:23:29.360
Say we have a square
div that's transparent,

00:23:29.360 --> 00:23:33.620
and we wanted to wait one second,
then perform a pulsing

00:23:33.620 --> 00:23:36.070
animation over two seconds.

00:23:36.180 --> 00:23:39.050
With no fill mode,
this means that the div will

00:23:39.200 --> 00:23:43.140
stay transparent for a second,
then it will become orange, then white,

00:23:43.190 --> 00:23:45.630
then orange,
and then at the very end it will

00:23:45.740 --> 00:23:48.510
snap back to a transparent value.

00:23:56.100 --> 00:24:00.380
If we want the square to actually become
orange during the one second delay,

00:24:00.400 --> 00:24:03.240
we can apply a fill mode of backwards.

00:24:03.260 --> 00:24:07.980
This means that our square will
become orange for a second,

00:24:07.990 --> 00:24:10.820
then go to white and
orange over two seconds,

00:24:10.820 --> 00:24:13.050
then become transparent again.

00:24:21.440 --> 00:24:24.700
And if we're on the opposite,
if we want our element to stay

00:24:24.700 --> 00:24:28.720
orange after the 100% frame,
like we want for the stamp,

00:24:28.730 --> 00:24:31.700
then we need a forwards fill mode.

00:24:40.200 --> 00:24:43.440
As you can see there,
it stayed at 100% frame.

00:24:43.440 --> 00:24:46.660
Now let's apply this forward
fill mode to our stamp.

00:24:47.330 --> 00:24:50.720
just simply added in
behind everything else.

00:24:50.720 --> 00:24:57.280
And now we have a stamp animation that
correctly stays at its 100% frame.

00:25:02.530 --> 00:25:06.630
So far, I showed you how to use
transitions to perform some simple

00:25:06.630 --> 00:25:08.460
interpolation between states.

00:25:08.460 --> 00:25:13.580
Then we use a keyframe animation
to perform a more complex movement.

00:25:13.580 --> 00:25:15.770
Another great feature of
keyframe animations is that

00:25:15.770 --> 00:25:17.620
they can repeat indefinitely.

00:25:17.620 --> 00:25:21.000
So this is great for a progress
indicator when you're doing some heavy

00:25:21.000 --> 00:25:23.290
number crunching in the background.

00:25:24.710 --> 00:25:28.420
And since we all know that the web needs
more kid and child progress indicators,

00:25:28.420 --> 00:25:31.090
I want to show you how
you can create this.

00:25:31.890 --> 00:25:37.060
So there are two elements on screen here,
each one containing a poll.

00:25:37.080 --> 00:25:41.270
They're just rotating around
the center of their container.

00:25:41.810 --> 00:25:45.550
So the keyframe animation
definition for the first one is

00:25:45.550 --> 00:25:48.800
just going from 0 to 360 degrees.

00:25:48.800 --> 00:25:52.940
And since we want the second
one to be slightly offset,

00:25:53.010 --> 00:25:57.760
it'll go from 5 degrees to 365 degrees.

00:26:02.520 --> 00:26:05.160
So now we want to apply those two.

00:26:05.180 --> 00:26:08.280
We want the outside paw
to start the walk first.

00:26:08.290 --> 00:26:12.480
Then we want the inside one
to follow it after a delay.

00:26:12.580 --> 00:26:15.860
So for the inner paw,
I added a 0.4 second delay.

00:26:15.860 --> 00:26:20.240
And I told both of them that
you can rotate indefinitely.

00:26:20.240 --> 00:26:22.620
Now there's a problem here.

00:26:23.480 --> 00:26:26.680
Since animations
interpolate between frames,

00:26:26.680 --> 00:26:29.940
this means we'll get a
very smooth animation.

00:26:29.940 --> 00:26:36.060
We'll get cats on ice,
not actually walking.

00:26:36.120 --> 00:26:40.570
So to get the walking,
one way that I've seen a lot of people

00:26:40.640 --> 00:26:44.160
do is to define a lot of keyframes.

00:26:44.210 --> 00:26:47.180
So for example, you could say,
at the 10% keyframe,

00:26:47.180 --> 00:26:50.020
I want to be at 5 degrees.

00:26:50.020 --> 00:26:54.000
And at the 10.001% keyframe,
I want to be at 10 degrees.

00:26:54.040 --> 00:26:56.340
So you don't get the interpolation.

00:26:56.360 --> 00:26:58.200
But there's an easier way.

00:26:58.270 --> 00:27:00.900
Starting with the new Safari,
you can use a timing

00:27:00.980 --> 00:27:03.400
function called steps.

00:27:03.400 --> 00:27:05.740
This function takes a number.

00:27:05.740 --> 00:27:09.730
And this is the number of frames you
want to display for your animation.

00:27:10.030 --> 00:27:13.960
So I said I want my animation
to happen over five seconds,

00:27:13.960 --> 00:27:18.530
and I want it to be divided
over 10 frames evenly.

00:27:18.780 --> 00:27:21.500
This means that nothing
in between will be shown,

00:27:21.500 --> 00:27:25.070
so that you get a discrete animation.

00:27:25.190 --> 00:27:26.660
And we're done.

00:27:34.940 --> 00:27:37.730
So I showed you how you can
animate with transitions,

00:27:37.730 --> 00:27:40.220
and how you can animate
with keyframe animations.

00:27:40.220 --> 00:27:43.580
And you may be wondering,
why is there even two

00:27:43.580 --> 00:27:46.810
different properties for
pretty much just animating?

00:27:46.880 --> 00:27:51.180
Well, that's because each one is
good for a different purpose.

00:27:51.180 --> 00:27:55.600
So transitions are
really simple to define.

00:27:55.600 --> 00:27:58.250
It only takes one line,
and it doesn't care about

00:27:58.370 --> 00:27:59.940
your starting or ending state.

00:27:59.980 --> 00:28:04.560
So as I showed you in the box,
with the exact same transition,

00:28:04.560 --> 00:28:07.980
we can rotate to any side of the box.

00:28:08.520 --> 00:28:11.400
Animations, on the other hand,
require explicit definition

00:28:11.400 --> 00:28:14.130
of each of its frames,
so you can't be used to

00:28:14.290 --> 00:28:16.360
rotate that box that way.

00:28:16.520 --> 00:28:19.980
But the advantage of explicitly
defining frames is that you can

00:28:19.980 --> 00:28:24.110
get multiple frames out of it,
and you can also tell the

00:28:24.360 --> 00:28:26.700
frames to repeat or alternate.

00:28:28.100 --> 00:28:31.010
So remembering those will help you
decide when to use a transition

00:28:31.020 --> 00:28:32.660
and when to use an animation.

00:28:32.950 --> 00:28:35.470
But if you're new to all of this,
and this is a little

00:28:35.500 --> 00:28:38.690
too much to remember,
just use a transition as a rule of thumb,

00:28:38.870 --> 00:28:41.020
because it's easier,
and it usually does most

00:28:41.080 --> 00:28:42.590
of the things you want.

00:28:44.990 --> 00:28:47.660
So next,
I'd like to get Matt back up here again,

00:28:47.750 --> 00:28:50.840
because he's going to show you how
to combine transitions and animations

00:28:50.840 --> 00:28:52.570
to make something really cool.

00:28:58.700 --> 00:28:59.560
Hi again.

00:28:59.710 --> 00:29:02.610
So now that Jing has showed us how
to create all that CSS awesomeness,

00:29:02.610 --> 00:29:07.360
let's use it to build one last
great thing into our demo here.

00:29:07.630 --> 00:29:10.280
So if you recall from...

00:29:11.060 --> 00:29:14.980
The first demo,
as we got to the end page here,

00:29:14.980 --> 00:29:17.900
we had our confirmation page.

00:29:17.900 --> 00:29:21.580
And as we went to ship it, we got this.

00:29:22.060 --> 00:29:25.620
We got a nice paw print
processing kind of thing going on.

00:29:25.620 --> 00:29:29.200
And then when the order came back,
complete, we just got this rather

00:29:29.250 --> 00:29:31.600
plain text that said,
your order's complete.

00:29:31.940 --> 00:29:34.900
But how cool would it be if
instead we had an animation

00:29:34.900 --> 00:29:38.190
that went something like this?

00:29:41.750 --> 00:29:48.730
That was not a much cooler
ending to our checkout process.

00:29:48.730 --> 00:29:48.730
So let's take a look
at how to build that.

00:29:48.900 --> 00:29:51.290
So the first thing that's
important here is to note all the

00:29:51.290 --> 00:29:53.420
different parts that are going on.

00:29:53.550 --> 00:29:56.260
So I'm going to quickly
describe them to you,

00:29:56.260 --> 00:29:57.800
and then I'm going to
show you the demo again.

00:29:57.800 --> 00:30:00.760
The first thing to take note
of is that there's a truck,

00:30:00.760 --> 00:30:04.100
and it drives about two seconds
from the left side of the screen

00:30:04.110 --> 00:30:07.620
to the center of the screen,
pauses there for about a second,

00:30:07.620 --> 00:30:10.850
and then you see it drive off to
the right in about two seconds.

00:30:11.720 --> 00:30:15.760
A second part that's going
on is that the package,

00:30:15.840 --> 00:30:20.200
you see it zoom away toward the truck,
and then it fades away into the truck.

00:30:20.320 --> 00:30:23.200
And the third thing that's going on
is that you see very initially in

00:30:23.280 --> 00:30:26.470
the first second of the animation,
the boxes flaps close into

00:30:26.470 --> 00:30:28.380
themselves and close up altogether.

00:30:28.440 --> 00:30:31.230
So let's take a look one more time.

00:30:34.500 --> 00:30:39.600
[Transcript missing]

00:30:39.670 --> 00:30:42.150
So we're basically,
we're coordinating a few different things

00:30:42.160 --> 00:30:44.600
going on here in this animation overall.

00:30:44.600 --> 00:30:47.440
So timing is really important here.

00:30:47.450 --> 00:30:51.110
So we'll just think quickly
about the timing that we want for

00:30:51.110 --> 00:30:52.620
things to kind of synchronize.

00:30:52.620 --> 00:30:55.590
So the truck animation, like I said,
is basically an overall

00:30:55.590 --> 00:30:56.970
five second animation.

00:30:56.970 --> 00:30:59.390
We have two seconds in
which the truck comes in,

00:30:59.390 --> 00:31:02.140
one second in which it idles there,
and two seconds in which

00:31:02.420 --> 00:31:03.670
it goes off the page.

00:31:05.300 --> 00:31:07.300
Now at the same time,
we have that box zooming out,

00:31:07.300 --> 00:31:09.160
and we want it to be there
right when the truck gets there.

00:31:09.300 --> 00:31:11.800
So that's basically two seconds
along into the animation.

00:31:11.800 --> 00:31:14.470
Now over that third
second of the animation,

00:31:14.470 --> 00:31:15.730
it's fading away.

00:31:15.740 --> 00:31:18.260
In the very first
second of the animation,

00:31:18.360 --> 00:31:20.000
we saw that it's folding up.

00:31:20.060 --> 00:31:21.940
So we're going to keep that
all in mind and just watch

00:31:22.110 --> 00:31:23.420
one more time in slow motion.

00:31:27.190 --> 00:31:29.930
So you see it folding up
in the first second here,

00:31:30.030 --> 00:31:35.350
zooms away, then it fades away.

00:31:38.110 --> 00:31:40.250
And the truck drives off.

00:31:40.500 --> 00:31:43.540
Cool, so let's go to the code
and let's build this.

00:31:43.590 --> 00:31:46.270
So when our order is complete,
we have this callback

00:31:46.370 --> 00:31:48.270
function that executes.

00:31:48.640 --> 00:31:51.910
And previously from the first demo,
all it was doing was just

00:31:52.010 --> 00:31:55.600
removing the spinner,
the little paw spinner there,

00:31:55.650 --> 00:31:58.110
and then it was zooming in
that order complete text.

00:31:58.250 --> 00:32:01.260
So since we want to
build our animation here,

00:32:01.260 --> 00:32:03.980
let's put this aside for a second.

00:32:04.560 --> 00:32:07.760
And let's add in exactly
those three parts here for

00:32:07.760 --> 00:32:09.830
our animation that we want.

00:32:22.860 --> 00:32:25.960
So step one here is the truck.

00:32:26.000 --> 00:32:28.720
So let's dive right into this.

00:32:28.720 --> 00:32:32.040
So the first thing we need to do is
obviously add a little bit of markup

00:32:32.070 --> 00:32:34.520
to our HTML page for the truck.

00:32:34.540 --> 00:32:38.150
So I'm going to go and do
that here in our HTML page.

00:32:38.500 --> 00:33:07.000
[Transcript missing]

00:33:07.390 --> 00:33:09.090
So now that we have that
initial state there,

00:33:09.220 --> 00:33:12.830
all we need to do is add in
our keyframe at rule for the

00:33:12.930 --> 00:33:14.780
back one of our animation.

00:33:15.660 --> 00:33:17.640
So I'll do that right here.

00:33:17.670 --> 00:33:21.090
So I said the timing is really important,
so we're just going to think about

00:33:21.100 --> 00:33:25.040
for a second which keyframes we want
in order to create this animation.

00:33:25.090 --> 00:33:27.580
So we said that it takes
two seconds to drive in,

00:33:27.580 --> 00:33:30.500
so the first keyframe that we
want is where it's in the middle

00:33:30.500 --> 00:33:32.620
of the page after it's driven.

00:33:32.670 --> 00:33:34.900
So that'll be about 40% along the way.

00:33:34.900 --> 00:33:37.460
Now, at the third second
along in the animation,

00:33:37.460 --> 00:33:39.540
it should still be there
in the middle of the page,

00:33:39.540 --> 00:33:41.780
because it's basically
idled over that one second.

00:33:41.790 --> 00:33:44.000
And then the last two seconds,
it drives off the page,

00:33:44.000 --> 00:33:49.070
so that's 100%. So all we need to do
to add in here for each one of these

00:33:49.270 --> 00:34:12.550
Keyframes is, on the first one,
left at 50%, so it's roughly

00:34:12.550 --> 00:34:12.550
in the middle of the page.

00:34:12.550 --> 00:34:12.550
And yet again, for keyframe two,
we'll also have it at left 50%, so it's

00:34:12.550 --> 00:34:12.550
still there in the middle of the page.

00:34:12.550 --> 00:34:12.550
And lastly, for keyframe three,
we just need to be at left of

00:34:12.550 --> 00:34:12.550
110%, so it actually gets pushed
off the right side of the page,

00:34:12.550 --> 00:34:12.550
and yet again,
not visible to the user at the end.

00:34:13.450 --> 00:34:19.430
So now that we have our keyframe
at rule for our animation,

00:34:19.440 --> 00:34:22.240
for simplicity,
we're just going to create a class

00:34:22.240 --> 00:34:25.520
on the truck called the drive class.

00:34:26.310 --> 00:34:29.740
Which is just simply setting
the animation to choose the

00:34:29.810 --> 00:34:34.200
@ rule that we just created,
having a duration of five seconds,

00:34:34.250 --> 00:34:37.040
and using the timing
function of easeInOut.

00:34:37.140 --> 00:34:43.410
So now this is as simple in our
JavaScript to get this to trigger as...

00:34:44.130 --> 00:34:47.560
Just grabbing the truck element
from the page using getElementById,

00:34:47.560 --> 00:34:52.340
and then adding that class name drive
so that we trigger the animation.

00:34:52.450 --> 00:34:54.140
So let's take a look at that now.

00:34:54.290 --> 00:34:56.220
Make sure I save.

00:34:57.180 --> 00:34:59.480
So now since we haven't done
anything with the box just yet,

00:34:59.480 --> 00:35:00.970
it's just going to sit there.

00:35:01.020 --> 00:35:04.330
So I'm just going to very quickly open
up the Web Inspector and delete the

00:35:04.360 --> 00:35:08.080
box from the page so it doesn't get
in the way of our truck animation.

00:35:08.570 --> 00:35:12.070
There we go.

00:35:12.070 --> 00:35:12.070
And...

00:35:13.820 --> 00:35:14.700
Truck Drives.

00:35:14.700 --> 00:35:18.090
Perfect.

00:35:18.100 --> 00:35:22.080
So let's go back to step two.

00:35:25.030 --> 00:35:27.600
Now, if you didn't catch everything
there for the truck animation,

00:35:27.600 --> 00:35:31.790
it's OK, because it's completely
orthogonal to what we're going

00:35:31.790 --> 00:35:33.700
to do for steps two and three.

00:35:34.290 --> 00:35:35.570
So let's jump to step two here.

00:35:35.600 --> 00:35:40.950
So now there's a difference between
what was going on with the truck and

00:35:41.040 --> 00:35:43.500
what was going on here with the package.

00:35:43.750 --> 00:35:45.140
And Jing went over this at the end.

00:35:45.140 --> 00:35:47.880
The difference between
transitions and animations,

00:35:47.920 --> 00:35:51.020
we really don't need an animation here,
because it's very simply that we

00:35:51.020 --> 00:35:54.260
have two states of the package
that we're transitioning between.

00:35:54.330 --> 00:35:57.860
There's a starting state that we see
with the packages in front of us.

00:35:57.910 --> 00:36:01.250
And the ending state is where the
package is far away and faded out.

00:36:01.390 --> 00:36:07.460
So basically, let's go and create that
ending state now in our CSS.

00:36:13.430 --> 00:36:18.320
So we're going to create a class on the
package that we'll call Zoom and Fade.

00:36:18.410 --> 00:36:21.140
And this just defines our
ending state of the transition.

00:36:21.220 --> 00:36:24.770
And so we see here it just has simply
just a transform that puts it in the

00:36:24.770 --> 00:36:27.060
right place very far in the page.

00:36:27.160 --> 00:36:30.630
And it sets the opacity to zero
so that it's completely faded out.

00:36:31.360 --> 00:36:34.880
So now, in order to get the right
transition that we want,

00:36:34.880 --> 00:36:38.610
though, between that starting
state and the ending state,

00:36:38.610 --> 00:36:42.880
we're just going to define here
also in the class our transitions.

00:36:46.310 --> 00:36:48.590
So what we have here is we're
just basically setting the

00:36:48.680 --> 00:36:51.820
transition property on both the
transform and opacity properties.

00:36:51.840 --> 00:36:56.710
And if we keep the timing in mind again,
basically what we're trying to

00:36:56.730 --> 00:37:00.770
create here is that in the very first
second of our overall animation,

00:37:00.780 --> 00:37:04.710
we are waiting for the
box flaps to fold up.

00:37:04.840 --> 00:37:07.270
So we're going to have a
delay on the transform,

00:37:07.270 --> 00:37:10.310
be one second,
so that that happens after the flaps.

00:37:10.320 --> 00:37:12.700
And then for the opacity,
we want it to fade just afterwards,

00:37:12.700 --> 00:37:14.940
the next second,
so we'll make it two seconds delay.

00:37:15.920 --> 00:37:20.940
And then for the duration of each,
it's just one second, as we said before.

00:37:21.560 --> 00:37:24.630
So now, yet again,
triggering this in JavaScript is

00:37:24.630 --> 00:37:28.220
just as simple as setting
that class on the package.

00:37:28.250 --> 00:37:30.710
So yet again,
we get the element from the page,

00:37:30.710 --> 00:37:33.200
and we have this class name,
zoom and fade.

00:37:33.240 --> 00:37:38.370
And so with the right delays
and the right duration,

00:37:38.370 --> 00:37:44.280
we get exactly what we want in
our overall five second animation.

00:37:44.280 --> 00:37:44.280
So let's go take a look at that now.

00:37:44.280 --> 00:37:44.280
Make sure we got it right.

00:37:47.110 --> 00:37:49.750
Zooms away, fades away.

00:37:49.850 --> 00:37:51.500
Perfect.

00:37:51.650 --> 00:37:55.830
Now back to step three.

00:37:56.370 --> 00:37:58.640
If you think about it,
step three is essentially

00:37:58.640 --> 00:37:59.980
the same thing as step two.

00:37:59.980 --> 00:38:03.730
It's just a starting and ending state
that we need to transition between,

00:38:03.810 --> 00:38:06.360
but now for the package's flaps.

00:38:06.460 --> 00:38:08.040
So the starting state
is when they're open,

00:38:08.160 --> 00:38:11.200
and we have classes defined for that,
and the ending state is

00:38:11.290 --> 00:38:13.060
when it's closed in the box.

00:38:13.180 --> 00:38:17.120
So since it's really just
the same thing going on here,

00:38:17.120 --> 00:38:19.500
I'm just going to skip over it
and call my little helper function

00:38:19.500 --> 00:38:20.910
that closes the flaps for us.

00:38:20.990 --> 00:38:24.260
And that's essentially just doing
the same thing we did in step two.

00:38:25.530 --> 00:38:27.630
Now we have all of our three steps,
so we're going to go look at

00:38:27.630 --> 00:38:29.440
what that looks like and make
sure that we got it all right.

00:38:29.460 --> 00:38:34.020
But first, there was one last thing that
we have sitting over here.

00:38:34.020 --> 00:38:36.910
We commented out this function,
and we want that to come in at

00:38:36.910 --> 00:38:39.520
the end to let them know that it's
all done and the order's complete.

00:38:39.520 --> 00:38:42.350
So right now, if we just called it,
we would get it right in the

00:38:42.350 --> 00:38:45.250
beginning of our animation,
and that wouldn't look good.

00:38:45.260 --> 00:38:47.380
So we want it to happen
after our animation is done.

00:38:47.380 --> 00:38:52.220
So luckily, at our disposal,
we have a DOM event that fires

00:38:52.220 --> 00:38:54.830
on the ending of animations.

00:38:55.430 --> 00:38:58.420
So what we can do

00:38:58.940 --> 00:39:03.340
is we can add an event listener to the
truck so that when its animation ends,

00:39:03.340 --> 00:39:07.600
which is basically when that ends,
our overall animation is done,

00:39:07.650 --> 00:39:10.500
we call the function
zoomInOrderCompleteText.

00:39:10.530 --> 00:39:13.350
So that--so we're guaranteed
that that will happen right at

00:39:13.350 --> 00:39:16.300
the very end of our animation.

00:39:16.360 --> 00:39:19.530
So now let's go take a look
and make sure it all worked.

00:39:30.040 --> 00:39:32.980
So with just a few lines of CSS,
we got a much cooler

00:39:32.980 --> 00:39:35.050
animation to the end there.

00:39:40.580 --> 00:39:42.840
So you might be thinking to yourself,
this is pretty cool and all,

00:39:42.840 --> 00:39:45.600
and we can add these, you know,
sweet animations in the newer browsers,

00:39:45.600 --> 00:39:47.660
but what about the older browsers?

00:39:47.730 --> 00:39:50.790
What do we do when, you know,
perhaps we don't want it to blow up,

00:39:50.790 --> 00:39:53.950
and we don't want to break our sites
and all that compatibility stuff?

00:39:54.100 --> 00:40:00.330
So now Jing is going to show you a few
things that we have to rectify that.

00:40:00.390 --> 00:40:02.570
So Jing, come back up.

00:40:11.000 --> 00:40:14.570
So as Matt said,
I'm going to show you how you can use

00:40:14.680 --> 00:40:23.420
some CSS media queries to find out
some properties of the device and the

00:40:23.420 --> 00:40:25.910
browser you're being displayed on.

00:40:27.660 --> 00:40:34.280
So first to detect the type of media,
you can do this in HTML, CSS,

00:40:34.280 --> 00:40:35.600
or JavaScript.

00:40:35.650 --> 00:40:39.160
So in HTML,
you can use the media attribute.

00:40:39.240 --> 00:40:45.320
So the code on screen here gives you an
example of linking to the style sheet

00:40:45.320 --> 00:40:50.120
that has animations when we're being
displayed on an actual computer screen,

00:40:50.120 --> 00:40:55.690
and just having a static style for
when your web page is being printed.

00:40:56.240 --> 00:41:01.980
With CSS, instead of the media attribute,
it's just the media at rule.

00:41:01.990 --> 00:41:04.690
And this is really useful when
all you need to do is to change

00:41:04.690 --> 00:41:06.880
one or two different properties.

00:41:07.900 --> 00:41:14.120
In JavaScript, you can look for the style
media object on the window,

00:41:14.120 --> 00:41:16.310
and then query for its type.

00:41:19.020 --> 00:41:21.100
So that was detecting types of media.

00:41:21.110 --> 00:41:24.330
You can also detect
different types of displays.

00:41:24.790 --> 00:41:27.320
For example,
you may not want your web page to

00:41:27.320 --> 00:41:32.520
look the same on a small handheld
device versus a giant screen.

00:41:32.600 --> 00:41:35.870
So you can do something like,
if I am on the screen and

00:41:35.870 --> 00:41:39.110
it's larger than 800 pixels,
then I want to be in columns

00:41:39.830 --> 00:41:41.970
using the media attribute.

00:41:42.410 --> 00:41:46.180
Or you can do the same thing
using the media at rule.

00:41:46.180 --> 00:41:51.020
And with JavaScript,
you can call the match medium function

00:41:51.020 --> 00:41:56.160
and give it the exact same query you
gave the HTML and CSS and perform

00:41:56.160 --> 00:41:58.360
the appropriate JavaScript there.

00:42:01.640 --> 00:42:05.890
So the third thing you can do with
CSS media queries is to detect whether

00:42:05.890 --> 00:42:09.140
certain CSS properties are supported.

00:42:09.180 --> 00:42:12.260
This is really useful for animations,
because they're usually being

00:42:12.260 --> 00:42:15.740
applied via JavaScript anyways.

00:42:15.740 --> 00:42:19.110
So you can call match-medium again
and give it the property you're

00:42:19.110 --> 00:42:23.610
interested in in parentheses,
and only perform an animation

00:42:23.610 --> 00:42:27.060
when it's supported,
and have, in the l statement,

00:42:27.060 --> 00:42:31.000
have some fallback code
for older browsers.

00:42:34.420 --> 00:42:37.440
All right,
so let's see what we learned today.

00:42:37.440 --> 00:42:41.780
I showed you the newest syntax,
the simplified syntax for gradients,

00:42:41.990 --> 00:42:45.590
and some examples of how
to use 3D transforms.

00:42:46.140 --> 00:42:50.380
Then we animated the box we created
using the 3D transform using transitions,

00:42:50.570 --> 00:42:56.490
and did some more complex stuff
using keyframe animations.

00:42:57.740 --> 00:42:59.960
And just now,
I showed you how to use CSS media

00:43:00.030 --> 00:43:04.630
queries to customize your code
for different types of devices.

00:43:08.750 --> 00:43:12.570
So if you have more questions, as always,
feel free to contact

00:43:12.670 --> 00:43:15.840
our Safari evangelist,
Vicky Murley.

00:43:15.860 --> 00:43:17.920
And last year,
we actually had two different

00:43:17.920 --> 00:43:21.360
CSS sessions that made use of a
lot of effects that you saw today.

00:43:21.420 --> 00:43:24.520
So they're both available
on developer.apple.com,

00:43:24.520 --> 00:43:26.960
and you can download them into iTunes.

00:43:26.960 --> 00:43:30.100
Lastly, Safari Dev Center has a
lot of documentation of how

00:43:30.100 --> 00:43:32.790
all of these things work.

00:43:34.340 --> 00:43:38.010
And tomorrow we have three
more Safari sessions.

00:43:38.130 --> 00:43:43.470
So if you're an extensions developer,
everything I told you today can

00:43:43.470 --> 00:43:46.080
be used in a Safari extension.

00:43:46.090 --> 00:43:48.660
And of course,
you probably want your dynamic

00:43:48.660 --> 00:43:51.140
web app to work well offline.

00:43:51.170 --> 00:43:54.070
And lastly,
some of my colleagues will talk

00:43:54.110 --> 00:43:57.700
about how do you design your website
so that it works correctly with the

00:43:57.700 --> 00:44:00.740
newest gestures online and in iOS.

00:44:00.780 --> 00:44:01.860
So thank you very much.

00:44:01.940 --> 00:44:03.420
Enjoy the rest of your conference.