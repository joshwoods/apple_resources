WEBVTT

00:00:10.300 --> 00:00:11.040
Good afternoon.

00:00:11.080 --> 00:00:12.450
Welcome to session 109.

00:00:12.500 --> 00:00:13.540
I am Mark Piccirelli.

00:00:13.540 --> 00:00:16.400
I'm an engineer in the
Cocoa Frameworks group.

00:00:16.880 --> 00:00:18.640
Today we're going to talk
about file coordination,

00:00:18.640 --> 00:00:22.170
a new technology,
and I'm going to talk about what it is

00:00:22.300 --> 00:00:25.040
and why it's important and how to use it.

00:00:25.090 --> 00:00:27.560
First I'll actually talk about
why it's important and one

00:00:27.560 --> 00:00:29.790
of the big reasons is iCloud.

00:00:29.830 --> 00:00:33.500
It's one of the fundamental
technologies underlying it.

00:00:34.700 --> 00:00:39.100
So in iCloud storage,
the piece of iCloud where the user's

00:00:39.100 --> 00:00:43.440
own documents go back and forth,
in running on the user's system,

00:00:43.440 --> 00:00:46.700
there is our iCloud system,
a collection of agents and

00:00:46.700 --> 00:00:50.390
daemons that take care of,
you know, moving files around and on the

00:00:50.390 --> 00:00:52.720
network and off and things like that.

00:00:52.760 --> 00:00:55.510
And then there'll be
applications like yours.

00:00:55.680 --> 00:00:56.820
Actually, that's TextEdit.

00:00:56.820 --> 00:01:00.420
It's ours, but it's sample code,
so think of it as yours.

00:01:00.570 --> 00:01:03.970
So,
and then the files that are in the cloud.

00:01:05.080 --> 00:01:11.490
And what needs doing for a file that's
in the cloud is when updates come in

00:01:11.610 --> 00:01:16.800
off the network and when they're pushed,
iCloud will write the changes to

00:01:16.900 --> 00:01:21.240
the file on disk and then your
application has to read them.

00:01:21.340 --> 00:01:25.360
And likewise,
when the user changes a file,

00:01:25.360 --> 00:01:29.500
the file has to be saved on disk so that
the iCloud system can pick the changes

00:01:29.500 --> 00:01:32.580
up and send them over the network.

00:01:33.250 --> 00:01:38.720
So a lot of this was covered earlier
today in the iCloud storage overview.

00:01:41.010 --> 00:01:46.010
But what we end up with in this situation
are some problems we have to solve caused

00:01:46.010 --> 00:01:49.900
by the fact that there are multiple
processes accessing the same file.

00:01:50.000 --> 00:01:53.150
So for example,
one process writing while another is

00:01:53.150 --> 00:01:57.850
actually reading is potentially a very
bad thing as the thing that's reading

00:01:57.860 --> 00:02:01.580
reads something that's half baked
because the writing is still going on.

00:02:01.660 --> 00:02:04.950
So we have to answer the question,
how does a process know when it's

00:02:04.950 --> 00:02:07.200
safe both to read and to write?

00:02:08.250 --> 00:02:12.110
Another thing we have to answer is
the problem that iCloud will change

00:02:12.110 --> 00:02:15.350
files and then your app must read them.

00:02:15.400 --> 00:02:17.240
So we have to answer the question,
how does a process

00:02:17.350 --> 00:02:19.460
know when it must read?

00:02:20.070 --> 00:02:23.840
And the last thing is that iCloud
needs your files up to date to

00:02:23.870 --> 00:02:27.880
do conflict detection so that
as the user is editing them,

00:02:27.940 --> 00:02:32.710
there are times where iCloud has to
command your application to save the

00:02:32.710 --> 00:02:35.660
contents to disk so it can look at it.

00:02:35.680 --> 00:02:39.310
And so that raises the question,
how does a process know

00:02:39.440 --> 00:02:40.950
when it must write?

00:02:41.390 --> 00:02:46.670
The other feature that file
coordination is for is for autosave.

00:02:47.540 --> 00:02:54.630
And autosave is a new document model
for Mac OS X where the user never has to

00:02:54.680 --> 00:03:00.640
save and the window on the screen is the
file as far as the user is concerned.

00:03:00.740 --> 00:03:03.420
So and this is all just covered in
the rather excellent presentation

00:03:03.420 --> 00:03:07.590
that preceded this one,
autosave and versions in Mac OS X Lion.

00:03:08.550 --> 00:03:11.060
And so for an example of
when this is an issue,

00:03:11.060 --> 00:03:15.460
if you have a document that's open in
TextEdit and the user's editing away at

00:03:15.460 --> 00:03:19.070
it and they do something like picking
it up in Finder and dragging it into

00:03:19.070 --> 00:03:23.240
Mail to make an attachment out of it,
Mail wants to read the contents

00:03:23.240 --> 00:03:27.380
of the document but it doesn't
want to read out-of-date contents.

00:03:27.390 --> 00:03:32.430
So how does it tell TextEdit to save
the changes to the file so that it

00:03:32.460 --> 00:03:36.490
can read something that's up-to-date
and make a Mail attachment out of it?

00:03:37.490 --> 00:03:41.220
And so, you know,
autosave introduces this problem for us,

00:03:41.320 --> 00:03:43.700
the possibility of processes
reading out-of-date files,

00:03:43.700 --> 00:03:44.540
and that would be bad.

00:03:44.540 --> 00:03:46.460
So once again,
the question has to be answered,

00:03:46.460 --> 00:03:48.330
how does a process know
when it must write?

00:03:49.600 --> 00:04:49.700
[Transcript missing]

00:04:49.900 --> 00:04:53.550
And this is of course available
on both Mac OS X.7 and iOS 5.

00:04:53.660 --> 00:04:56.580
It's actually in the Foundation library.

00:04:58.020 --> 00:05:01.240
So a quick snippet of what
it looks like basically.

00:05:01.310 --> 00:05:04.880
NS File Coordinator,
the two main methods are coordinate

00:05:04.880 --> 00:05:08.520
reading at item at URL and
coordinate writing item at URL.

00:05:08.520 --> 00:05:11.350
And the basic notion is that
tell us what you're doing and

00:05:11.460 --> 00:05:12.890
we'll tell you when to do it.

00:05:14.900 --> 00:05:17.870
So a quick snippet of what
it looks like basically.

00:05:17.870 --> 00:05:21.190
NS File Coordinator,
the two main methods are coordinate

00:05:21.190 --> 00:05:24.540
reading at item at URL and
coordinate writing item at URL.

00:05:24.570 --> 00:05:27.720
And the basic notion is that
tell us what you're doing and

00:05:27.800 --> 00:05:29.900
we'll tell you when to do it.

00:05:30.120 --> 00:05:30.810
So a quick snippet of what
it looks like basically.

00:05:30.810 --> 00:05:31.620
NS File Coordinator,
the two main methods are coordinate

00:05:31.620 --> 00:05:32.440
reading at item at URL and
coordinate writing item at URL.

00:05:32.440 --> 00:05:33.170
And the basic notion is that
tell us what you're doing and

00:05:33.220 --> 00:05:33.900
we'll tell you when to do it.

00:05:35.750 --> 00:05:39.060
NS File Presenter,
just to touch on it so you

00:05:39.060 --> 00:05:42.100
know for the rest of the talk,
is the notion tell us who you are

00:05:42.100 --> 00:05:43.470
and we'll tell you what to do.

00:05:43.490 --> 00:05:49.530
So it has methods like presented item
did change and presented item did move

00:05:49.530 --> 00:05:56.380
to URL and save presented item changes
and accommodate presented item deletion.

00:05:57.870 --> 00:06:00.270
And the first two of these
are things you would think of

00:06:00.270 --> 00:06:01.600
as a notification mechanism.

00:06:01.680 --> 00:06:05.060
You register an NS file presenter
when your application is presenting a

00:06:05.070 --> 00:06:09.580
file to the user and you get to hear
about other processes coordinated

00:06:09.580 --> 00:06:10.790
file access when they're done.

00:06:10.800 --> 00:06:13.540
What's a little more novel
are the second two methods,

00:06:13.570 --> 00:06:16.800
save presented item changes and
accommodate presented item deletions.

00:06:16.800 --> 00:06:20.640
You actually get to affect other
processes coordinated file access.

00:06:21.120 --> 00:06:24.680
Another process is going to read,
you get to control what it

00:06:24.680 --> 00:06:26.720
does read by saving first.

00:06:29.030 --> 00:06:33.500
So when to use file coordinator,
when to do coordinated reads or writes.

00:06:33.500 --> 00:06:36.570
You should use it with files that the
user thinks of as files and mostly

00:06:36.570 --> 00:06:38.210
this is applicable to Mac OS X,
right,

00:06:38.320 --> 00:06:41.480
because that's where the user sees files.

00:06:41.610 --> 00:06:44.090
And when you do this,
you're coordinating with other things

00:06:44.200 --> 00:06:48.150
like the finder and other applications,
other things that are also

00:06:48.210 --> 00:06:50.370
accessing those files.

00:06:51.170 --> 00:06:53.920
And you also want to use it for iCloud
documents even though the user doesn't

00:06:53.920 --> 00:06:57.370
think of them as files in a file system,
they are.

00:06:57.460 --> 00:07:02.640
So you want to coordinate with the iCloud
daemons and system components that are

00:07:02.640 --> 00:07:05.300
also reading and writing those files.

00:07:06.730 --> 00:07:10.760
Your goal is to play well
with other processes.

00:07:10.760 --> 00:07:13.300
An important thing to do with
that is that you can't possibly

00:07:13.300 --> 00:07:15.540
enumerate what all the other
processes are going to be and you

00:07:15.540 --> 00:07:17.060
don't know what they're going to do.

00:07:17.060 --> 00:07:22.660
I'm going to be showing you,
you want to use coordinated file access.

00:07:22.660 --> 00:07:26.630
There's a specific way to do that where
you're not even really supposed to care

00:07:26.710 --> 00:07:28.940
what's happening in other processes.

00:07:29.280 --> 00:07:38.590
You want to be able to use the same
file access as you would in a file.

00:07:38.590 --> 00:07:38.590
And of course, as time goes on,
there's going to be more and more

00:07:38.590 --> 00:07:38.590
things using NS File Coordinator,
so you'll be interoperating with

00:07:38.590 --> 00:07:38.590
things that aren't even there yet.

00:07:40.100 --> 00:07:42.880
So you want to use file
coordinator when you're reading.

00:07:42.880 --> 00:07:45.760
And again, this is a,
you want to use file coordinator

00:07:45.760 --> 00:07:46.920
when you're reading files.

00:07:46.920 --> 00:07:51.950
When you're creating files, including,
for example, exporting,

00:07:52.070 --> 00:07:54.680
you have a document,
the user has a document open

00:07:54.680 --> 00:07:56.540
in a window and they export it.

00:07:56.590 --> 00:08:00.120
You want to coordinate the access,
the writing of that, so that if,

00:08:00.150 --> 00:08:02.370
for example,
something that is watching the

00:08:02.460 --> 00:08:06.050
file system starts reading just
because something appeared there,

00:08:06.080 --> 00:08:09.980
you know, its reading doesn't start
until you're writing the file.

00:08:10.000 --> 00:08:11.610
is done.

00:08:12.000 --> 00:08:16.600
Updating, as in, you know,
auto-saving documents.

00:08:16.640 --> 00:08:18.900
And copying files, Finder does this.

00:08:18.900 --> 00:08:22.620
And also moving and renaming files,
again, Finder does this.

00:08:22.760 --> 00:08:24.740
And this applies to directories too.

00:08:24.740 --> 00:08:29.830
The class's name is NSFileCoordinator,
but you want to coordinate some

00:08:29.830 --> 00:08:32.310
operations on directories also.

00:08:32.700 --> 00:08:35.770
A lot of this stuff by the way,
NS Document and UI Document already

00:08:35.770 --> 00:08:36.660
do this for you.

00:08:36.690 --> 00:08:41.460
NS Document, for example,
when it's opening or saving documents

00:08:41.460 --> 00:08:44.150
does coordinated reading or writing.

00:08:44.990 --> 00:08:48.780
So when not to use file coordinator,
like any interesting mechanism,

00:08:48.780 --> 00:08:50.050
it can be overused.

00:08:50.060 --> 00:08:52.760
So I can let you off the hook right away,
some places where you

00:08:52.760 --> 00:08:53.840
don't want to call it.

00:08:54.130 --> 00:08:57.550
Temporary files that your
process has made just for

00:08:57.620 --> 00:09:00.730
itself and also cache files,
even if they're going to

00:09:00.730 --> 00:09:03.780
stick around for a long time,
and anything private enough to

00:09:03.780 --> 00:09:06.890
your process that you know that
there's no reason for any other

00:09:06.890 --> 00:09:08.690
process to be digging around in it.

00:09:08.790 --> 00:09:12.800
So there's no reason to
coordinate with nothing.

00:09:14.210 --> 00:09:16.970
When to be a file presenter?

00:09:17.140 --> 00:09:21.900
Whenever your application is presenting a
file to the user for viewing or editing,

00:09:21.900 --> 00:09:26.730
it's going to be in a window that
stays up on the screen for a while and

00:09:26.730 --> 00:09:31.400
the user might be able to do something
with another application that will be

00:09:31.470 --> 00:09:33.460
changing it while that window is up.

00:09:33.560 --> 00:09:36.250
So, and all this, by the way,
also applies to file packages too,

00:09:36.250 --> 00:09:41.220
which are both Mac OS X and
iOS directories that appear

00:09:41.220 --> 00:09:43.920
to the user as single files.

00:09:44.890 --> 00:09:48.630
And you do this so that you
can reload the document when

00:09:48.630 --> 00:09:50.610
other processes change it.

00:09:50.610 --> 00:09:55.390
And also perhaps close the document
when other processes will delete it.

00:09:55.540 --> 00:09:59.550
So when the finder is about
to empty the trash and there's

00:09:59.550 --> 00:10:02.490
a document still open in it,
it should be closed.

00:10:02.620 --> 00:10:06.860
Otherwise it will just be a window
that's not connected to anything

00:10:06.860 --> 00:10:08.920
and great confusion results.

00:10:10.290 --> 00:10:13.910
Another thing I'm going to
mention is that there is an even

00:10:13.910 --> 00:10:16.980
-- there's another mechanism in
NS File Presenter that allows you to

00:10:17.050 --> 00:10:18.890
relinquish files to other processes.

00:10:18.960 --> 00:10:24.340
When you register in NS File Presenter,
we don't like the terminology to say

00:10:24.340 --> 00:10:30.660
that the file presenter owns the file,
but it does have sort of a right

00:10:30.750 --> 00:10:33.490
of first refusal over other things
being able to read or write to

00:10:33.490 --> 00:10:33.490
it without its permission first.

00:10:34.640 --> 00:10:36.740
This is another thing
that both NS Document and

00:10:36.740 --> 00:10:37.900
UI Document do this for you.

00:10:37.900 --> 00:10:40.700
When you open an
NS Document or UI Document,

00:10:40.700 --> 00:10:43.500
it registers itself as
an NS File Presenter.

00:10:43.580 --> 00:10:46.500
When it's closed, it deregisters itself.

00:10:46.920 --> 00:10:52.800
So NS File Coordinator,
the first big half of this API.

00:10:52.920 --> 00:10:55.560
First of all, it is a locking mechanism.

00:10:55.560 --> 00:10:58.680
If you catch me afterwards,
I can go into why we're not using

00:10:58.680 --> 00:11:01.910
other locking mechanisms that are
already there like BSD advisory

00:11:01.910 --> 00:11:03.190
locks or something like that.

00:11:03.280 --> 00:11:06.610
Actually, the release notes go enumerate
what's wrong with those.

00:11:08.480 --> 00:11:11.510
But they're still locking and we
implement pretty standard locking rules.

00:11:11.510 --> 00:11:13.980
Readers don't block readers.

00:11:13.980 --> 00:11:15.680
Readers do block writers.

00:11:15.770 --> 00:11:19.460
Writers block readers and
writers block other writers.

00:11:20.790 --> 00:11:25.000
File packages are interesting
because they're treated atomically.

00:11:25.040 --> 00:11:29.410
If you do a coordinated read of
files in a file package and something

00:11:29.420 --> 00:11:33.900
else wants to do a coordinated write
of a file in that file package,

00:11:33.900 --> 00:11:37.460
the writer will be blocked
until the reading is done.

00:11:38.400 --> 00:11:42.400
Because we want file packages to
always have consistent contents.

00:11:44.440 --> 00:11:47.260
This is already a little bit
of a power user note for you.

00:11:47.320 --> 00:11:50.570
NS file coordinators don't block
themselves so you can instantiate

00:11:50.570 --> 00:11:55.340
an NS file coordinator and use it to
do a couple of different things at

00:11:55.340 --> 00:12:00.970
once knowing that you won't create a
deadlock just within your own code.

00:12:02.450 --> 00:12:06.090
The way you create an NS file coordinator
is with the initializer in it with

00:12:06.090 --> 00:12:10.920
file presenter and we want to encourage
you to instantiate one of these per

00:12:11.080 --> 00:12:15.390
operation and by operation I mean
something kind of big and lumpy,

00:12:15.400 --> 00:12:18.360
not like opening the file is
one operation and reading the

00:12:18.450 --> 00:12:21.020
file is another operation and
closing it is another operation.

00:12:40.800 --> 00:12:42.850
And we even want you to use
NS File Coordinator if you're

00:12:42.850 --> 00:12:44.900
doing pretty big batch operations.

00:12:44.900 --> 00:12:50.510
Like when Finder is copying
a giant hierarchy of folders,

00:12:51.060 --> 00:12:54.810
which might take quite a while to do,
that's still just one

00:12:54.810 --> 00:12:58.550
NS File Coordinator that
it's using for all of that.

00:12:59.900 --> 00:13:05.900
When you create an NS File Coordinator,
you get to specify an NS File Presenter.

00:13:06.180 --> 00:13:11.620
What you're indicating when you do
that is that the NS file coordinator

00:13:11.620 --> 00:13:15.640
is being created on behalf of that
file presenter or is going to do

00:13:15.640 --> 00:13:18.040
something for that file presenter.

00:13:18.180 --> 00:13:21.060
So for example,
whenever NS document does a

00:13:21.060 --> 00:13:25.100
coordinated read or write,
it always passes itself as this.

00:13:25.300 --> 00:13:28.920
And the reason you do this is
it lets us filter out messages

00:13:28.920 --> 00:13:31.100
about your own file access.

00:13:31.100 --> 00:13:33.640
So sticking with the
example of NS document,

00:13:33.640 --> 00:13:36.230
it implements a presented
item did change,

00:13:36.230 --> 00:13:39.100
but it's not interested
about changes it did itself.

00:13:39.100 --> 00:13:42.260
And without this mechanism,
it would be pretty hard for it

00:13:42.340 --> 00:13:44.100
to filter those out actually.

00:13:44.100 --> 00:13:48.210
It also helps us break deadlocks,
getting this linkage of file coordinators

00:13:48.210 --> 00:13:50.100
and file presenters accurate.

00:13:50.100 --> 00:13:52.550
You know,
when something does a coordinated read

00:13:52.550 --> 00:13:56.700
and that causes a message for a file
presenter of that read file and the

00:13:56.700 --> 00:14:01.100
file presenter responds by doing a
coordinated write to update that file,

00:14:01.120 --> 00:14:05.580
that would be a deadlock if we
didn't know that the file presenter's

00:14:05.580 --> 00:14:08.100
writing is because of the reading.

00:14:08.100 --> 00:14:12.090
So keeping these things
hooked up prevents deadlocks.

00:14:13.950 --> 00:14:17.810
So back to those basic methods,
reading item at URL and

00:14:17.810 --> 00:14:19.780
writing item at URL.

00:14:19.780 --> 00:14:21.000
They both follow the same pattern.

00:14:21.000 --> 00:14:26.500
You pass in a block and file
coordinator invokes the block for you.

00:14:27.560 --> 00:14:31.790
What's interesting about these blocks,
by the way, is you get passed a new URL.

00:14:31.830 --> 00:14:34.490
So you passed in one URL that
you wanted to read or write.

00:14:34.490 --> 00:14:37.630
Well, while your reader or writer
is being made to wait,

00:14:37.630 --> 00:14:39.940
the file might be moved or renamed.

00:14:41.260 --> 00:14:44.970
And so you need up-to-date information
about where the file ended up before

00:14:44.970 --> 00:14:46.530
you start reading or writing it.

00:14:46.580 --> 00:14:48.100
So we pass you a new URL.

00:14:48.100 --> 00:14:52.250
And as a little bit of esoterica,
in Snow Leopard,

00:14:52.250 --> 00:14:56.660
we added NSURL caching of
all sorts of properties.

00:14:57.410 --> 00:15:00.130
And it's always been a confusing
question about when do those

00:15:00.160 --> 00:15:01.500
caches get invalidated?

00:15:01.500 --> 00:15:05.070
Happily, when you're using this,
the answer is we'll pass you

00:15:05.070 --> 00:15:08.900
a URL when something else read
or wrote while you're waiting.

00:15:09.260 --> 00:15:10.240
And it'll be a new one
even if you don't have it.

00:15:11.280 --> 00:15:15.040
And if it points to the same file,
so it'll have an empty cache

00:15:15.100 --> 00:15:17.030
without stale values in it.

00:15:18.560 --> 00:15:21.000
An interesting thing to note about
these methods is they're synchronous.

00:15:21.000 --> 00:15:26.300
So if you are going to do something
that you don't want to block the UI,

00:15:26.300 --> 00:15:30.220
you should do these on a background
thread or in a background queue.

00:15:32.650 --> 00:15:41.650
An interesting thing to note about
these methods is they're synchronous.

00:15:41.650 --> 00:15:49.830
So if you are going to do something
that you don't want to block the UI,

00:15:50.080 --> 00:15:58.300
you should do these on a background
thread or in a background queue.

00:15:59.080 --> 00:16:02.770
And it's a pretty simple example of how
to read these or how to invoke these.

00:16:03.260 --> 00:16:07.610
Here is a fictional method called
read from URL in a fictional class

00:16:07.610 --> 00:16:13.320
and it's doing a coordinated read by
first of all instantiating NS file

00:16:13.320 --> 00:16:18.770
coordinator and then it invokes the
method coordinate reading item at

00:16:18.770 --> 00:16:23.800
URL and then this might wait a while
depending on what other processes are

00:16:23.800 --> 00:16:28.980
doing but eventually it will always
call your block and you can do that.

00:16:30.000 --> 00:16:32.530
And do things like in this
simple example reading the

00:16:32.540 --> 00:16:35.670
contents of a file into an NSData.

00:16:36.920 --> 00:16:39.950
What's interesting about this API,
by the way,

00:16:40.070 --> 00:16:44.560
blocks are still kind of new and we're
still designing new APIs with them.

00:16:44.560 --> 00:16:49.040
In this one, we discovered it was most
convenient to actually require

00:16:49.040 --> 00:16:50.800
the use of a block variable.

00:16:50.800 --> 00:16:53.800
So block NSData, data equals nil.

00:16:53.800 --> 00:16:58.800
And inside the reading block,
just assigning that value

00:16:58.800 --> 00:17:03.550
and then afterwards returning
the data auto released.

00:17:04.990 --> 00:17:10.150
And then if something goes wrong,
coordinate reading item at

00:17:10.150 --> 00:17:12.460
URL might return an out error,
or I'm sorry,

00:17:12.700 --> 00:17:14.450
might return an error by reference.

00:17:14.450 --> 00:17:17.180
And when it does that, by the way,
it actually doesn't even

00:17:17.190 --> 00:17:18.520
invoke your block at all.

00:17:18.520 --> 00:17:19.600
It just sets NSError.

00:17:19.600 --> 00:17:22.740
And in combination with this
use of the block variable,

00:17:22.740 --> 00:17:25.220
it ends up being both correct and simple.

00:17:25.220 --> 00:17:29.390
But you have to,
when you're working with blocks,

00:17:29.400 --> 00:17:33.600
you'll see that experience
counts a little bit.

00:17:33.730 --> 00:17:40.090
So you'll see this ends up being
pretty simple after a while.

00:17:40.180 --> 00:17:45.580
So what might have just happened
while the block was not invoked?

00:17:45.600 --> 00:17:48.540
Well, your process might have been
waiting for other processes

00:17:48.650 --> 00:17:51.320
that were writing to the file.

00:17:51.320 --> 00:17:55.130
And by that I mean other
uses of file coordinator.

00:17:55.600 --> 00:17:58.460
And the file might have even been
moved or deleted during that time.

00:17:58.540 --> 00:18:00.760
So if you have reading code
that does error checking,

00:18:00.840 --> 00:18:04.550
it still has to do error
checking for things like the

00:18:04.650 --> 00:18:07.010
file just isn't there anymore.

00:18:08.020 --> 00:18:09.900
NSFilePresenter messaging.

00:18:09.900 --> 00:18:13.690
When it was reading the file,
it might have told an NSFilePresenter

00:18:13.790 --> 00:18:15.770
to actually update the contents.

00:18:16.730 --> 00:18:17.430
And errors.

00:18:17.610 --> 00:18:20.780
The NS File Presenter might
have tried to save the file but

00:18:21.070 --> 00:18:26.950
failed horribly so that's why
NS File Coordinator can return errors.

00:18:29.750 --> 00:18:33.800
So each of those two methods was for just
reading and writing one file at a time.

00:18:33.800 --> 00:18:37.230
We also have a couple other methods
that combine these operations.

00:18:37.230 --> 00:18:42.410
So coordinate reading item at URL and
writing item at URL all at once.

00:18:42.410 --> 00:18:46.080
And an example of when you want to
use this is when you're copying a file

00:18:46.080 --> 00:18:50.280
because you will be reading one file
and writing one file at the same time.

00:18:50.280 --> 00:18:55.560
And the reason we have these kind of
combinatorial operations in there is

00:18:55.560 --> 00:18:58.390
because it helps us avoid deadlocks.

00:18:58.520 --> 00:19:02.880
If you tried to do a coordinated
read and then a coordinated

00:19:02.880 --> 00:19:07.740
write nested inside of it,
that can cause a deadlock if some other

00:19:07.740 --> 00:19:12.450
process does a coordinated write of the
same file and then a coordinated read

00:19:12.450 --> 00:19:14.970
of the other file in the other order.

00:19:14.970 --> 00:19:19.550
So we have a couple of these methods
that just let you say what you mean

00:19:19.550 --> 00:19:22.160
more accurately to avoid trouble.

00:19:24.260 --> 00:19:27.770
And another one in this vein
is actually coordinate writing

00:19:27.770 --> 00:19:32.600
item at URL and writing item at
another URL at the same time,

00:19:32.640 --> 00:19:34.810
which is what you use for moving.

00:19:34.900 --> 00:19:39.380
So because in this model,
when you move a file,

00:19:39.380 --> 00:19:40.760
you're actually writing the two files.

00:19:40.800 --> 00:19:43.480
You are writing to the
file that you're moving,

00:19:43.590 --> 00:19:45.260
picking it up and moving,
and you're actually,

00:19:45.280 --> 00:19:47.750
if there is a file in the
way at the destination,

00:19:47.760 --> 00:19:50.820
you'll be writing to
that too by replacing it.

00:19:51.320 --> 00:19:54.700
So there's a handful
of options in this API.

00:19:54.700 --> 00:19:58.050
When you're reading a file,
you can specify that the file

00:19:58.050 --> 00:20:01.260
coordination mechanism itself
should resolve the symbolic

00:20:01.260 --> 00:20:03.330
link if there is one there.

00:20:03.330 --> 00:20:06.600
And the reason we provide this,
resolving symbolic links is not too hard,

00:20:06.630 --> 00:20:09.410
but when you're talking about
how it interacts with a locking

00:20:09.410 --> 00:20:13.300
mechanism and you might actually be
following a chain of symbolic links,

00:20:13.300 --> 00:20:16.150
that's kind of difficult to get right.

00:20:16.180 --> 00:20:19.200
So we do it for you if you so choose.

00:20:19.200 --> 00:20:21.180
And it only applies to the item itself,
by the way.

00:20:21.200 --> 00:20:26.200
Only if the file at the end of the path
is a symbolic link does this matter

00:20:26.200 --> 00:20:31.190
because we're resolving all the other
symbolic links all the time anyway.

00:20:32.820 --> 00:20:36.860
Another option is file coordinator
reading without changes.

00:20:36.860 --> 00:20:39.480
By default,
readers give NS file presenters

00:20:39.480 --> 00:20:42.020
of the file that they're
reading a chance to write.

00:20:42.020 --> 00:20:44.200
But sometimes you're not interested.

00:20:44.200 --> 00:20:48.100
I've been describing this behavior
where one process goes to read and

00:20:48.100 --> 00:20:50.580
it causes another one to write.

00:20:50.580 --> 00:20:52.180
Sometimes that's not useful.

00:20:52.180 --> 00:20:54.870
So here's an option to turn it off.

00:20:54.920 --> 00:20:56.220
And iCloud uses it.

00:20:56.460 --> 00:21:00.150
And the reason iCloud uses it is
because it's always watching the

00:21:00.310 --> 00:21:02.680
relevant files using FS events anyway.

00:21:03.480 --> 00:21:05.500
And it is doing coordinated
reads and writes,

00:21:05.540 --> 00:21:06.380
of course.

00:21:06.390 --> 00:21:10.790
But if it does a coordinated read
and it's not the latest thing that

00:21:10.790 --> 00:21:14.860
the user just edited on the screen,
that's okay because when

00:21:14.880 --> 00:21:19.040
that's auto-saved again,
iCloud will see that with FS events

00:21:19.040 --> 00:21:21.770
and just grab that and push it again.

00:21:25.140 --> 00:21:30.100
So there are writing options too on
NS File Coordinator and no options

00:21:30.100 --> 00:21:32.180
means you are updating the file.

00:21:32.180 --> 00:21:39.340
And by updating I mean something like,
you know, like a save in NS Document.

00:21:39.500 --> 00:21:42.460
So even when it's more
complicated than something like,

00:21:42.580 --> 00:21:46.000
than just simply opening the file
and writing it and then closing it,

00:21:46.000 --> 00:21:52.240
that's just one operation as far as
File Coordinator is concerned and the

00:21:52.240 --> 00:21:54.120
example is safe saving of NS Documents.

00:21:54.120 --> 00:21:58.120
All sorts of things go on but
that's just one coordinated right.

00:21:59.900 --> 00:22:03.240
It's worth mentioning that we deal
in what the user thinks of as files,

00:22:03.240 --> 00:22:06.800
not necessarily what really
are files in the file system.

00:22:06.800 --> 00:22:08.940
Even during a safe saving,
there's actually a

00:22:08.990 --> 00:22:09.960
couple of files involved.

00:22:10.000 --> 00:22:14.080
There's the one that's being overwritten
and then there's the one that's saved off

00:22:14.080 --> 00:22:16.130
to the side and then moved into place.

00:22:16.130 --> 00:22:23.410
From the point of file coordinator,
that's just one file just as the

00:22:23.410 --> 00:22:23.410
user thinks of it as one file.

00:22:24.200 --> 00:22:30.340
There are other file coordinator
options that let you say what you mean.

00:22:30.340 --> 00:22:32.100
The first one is writing for replacing.

00:22:32.100 --> 00:22:35.550
You use this when you're
creating a brand new item or

00:22:35.550 --> 00:22:37.730
you're moving an existing item.

00:22:38.900 --> 00:22:43.860
We call it writing for replacing even
when you don't necessarily know that you

00:22:43.860 --> 00:22:49.250
are replacing a file because checking
for a file to replace doesn't really

00:22:49.250 --> 00:22:52.700
work in a file system because there
are so many race conditions possible.

00:22:52.700 --> 00:22:56.580
You might check and then by
the time it really matters,

00:22:56.580 --> 00:23:01.260
a file has appeared there even
though there wasn't one before.

00:23:04.200 --> 00:23:08.700
So you just use this when
the situation warrants it,

00:23:08.710 --> 00:23:10.930
you know, very,
very simply instead of writing

00:23:10.950 --> 00:23:15.390
conditional code to figure out
whether or not to use this option.

00:23:17.090 --> 00:23:22.330
And one of the things is it causes
NS File Presenter messaging where if

00:23:22.330 --> 00:23:26.740
there is a file presenter registered
for the file that's being replaced,

00:23:26.740 --> 00:23:31.460
it will be told that this file is going
to be deleted and replaced with another

00:23:31.460 --> 00:23:35.940
one at the exact same location so it can
close a document or something like that.

00:23:36.490 --> 00:23:40.930
And we use it during NSDocuments
Save As and Save To operations,

00:23:40.930 --> 00:23:44.190
which, you know,
save a copy of the document that the user

00:23:44.200 --> 00:23:46.760
is looking at off into a brand new file.

00:23:48.540 --> 00:23:52.270
So writing for deleting is
pretty interesting because it has

00:23:52.410 --> 00:23:53.700
special handling of directories.

00:23:53.700 --> 00:23:58.960
If you say that you're doing a
coordinated write to a directory,

00:23:58.960 --> 00:24:02.640
I'm sorry, if you're doing a coordinated
write to a directory where you're

00:24:02.640 --> 00:24:04.520
using this deleting option,

00:24:04.920 --> 00:24:08.160
What that means is if something
is already reading or writing

00:24:08.160 --> 00:24:12.000
a file in that directory,
perhaps very deep in the hierarchy,

00:24:12.100 --> 00:24:13.450
we have to wait until it's done.

00:24:13.580 --> 00:24:16.610
We don't want to yank the
directory and everything it

00:24:16.610 --> 00:24:18.550
contains out from underneath that.

00:24:19.010 --> 00:24:22.000
And likewise,
if a directory is in the middle of

00:24:22.070 --> 00:24:26.200
being deleted and something else tries
to do a coordinated read or write

00:24:26.290 --> 00:24:31.700
into that thing that's being deleted,
we make that second thing wait so that,

00:24:31.850 --> 00:24:35.140
you know,
the directory will be deleted by the

00:24:35.220 --> 00:24:37.960
time it gets there but that's something,
that's the sort of error checking

00:24:37.960 --> 00:24:39.020
you're supposed to do anyway.

00:24:39.020 --> 00:24:41.860
So at least everything will be
in a consistent state by then.

00:24:43.890 --> 00:24:45.800
And again,
just like for writing for replacing,

00:24:45.800 --> 00:24:51.920
this tells NS file presenters
ahead of time that something

00:24:51.980 --> 00:24:54.800
is going to be deleted,
including if you're deleting a directory,

00:24:54.800 --> 00:24:58.240
if there are documents
open inside that directory,

00:24:58.240 --> 00:25:02.990
they will be told that they will be
deleted with the rest of the directory.

00:25:03.130 --> 00:25:07.100
So, and writing for replacing actually
does some of the same things.

00:25:07.120 --> 00:25:10.280
The distinction between writing for
deleting and writing for replacing is

00:25:10.380 --> 00:25:13.540
actually too much to go into up here.

00:25:13.540 --> 00:25:16.100
You should check out the release
notes but it has to do with

00:25:16.100 --> 00:25:23.000
if something gets moved while
something is waiting to access it.

00:25:24.350 --> 00:25:26.900
And there is also writing for moving.

00:25:26.900 --> 00:25:30.050
It has the same sort of waiting
rules as far as directories go.

00:25:30.470 --> 00:25:36.420
If a directory is being moved,
it will wait until things are done

00:25:36.420 --> 00:25:39.140
reading or writing that directory.

00:25:39.570 --> 00:25:42.120
So what's good about all this,
by the way, is that operations on giant

00:25:42.120 --> 00:25:46.330
directories containing great big
numbers of subfolders and files

00:25:46.480 --> 00:25:47.860
can just be one coordinated write.

00:25:47.940 --> 00:25:53.920
So there isn't a whole giant interprocess
communication storm going on during it.

00:25:54.060 --> 00:25:57.550
And in the example of moving,
it actually doesn't cause any

00:25:57.550 --> 00:26:01.150
additional file presenter messaging
that wouldn't happen anyway.

00:26:01.370 --> 00:26:06.340
So things like "and this file presenter
presented item did move to URL" actually

00:26:06.340 --> 00:26:09.130
happen even when this isn't used.

00:26:10.460 --> 00:26:12.680
So one last option,
and it's pretty interesting

00:26:12.680 --> 00:26:17.750
in the context of iCloud,
is File Coordinator Writing for Merging.

00:26:17.760 --> 00:26:23.910
And it tells any file presenter of a
file that you are about to write that

00:26:24.070 --> 00:26:28.910
it should write first if there are
changes that the user has made in the UI.

00:26:28.920 --> 00:26:32.050
And then what you do is
while you're writing,

00:26:32.060 --> 00:26:35.400
writing encompasses reading for
the purposes of our locking rules,

00:26:35.400 --> 00:26:39.730
but what you do in your writing
is you actually read and you can

00:26:39.730 --> 00:26:44.540
do things like conflict detection,
which is what iCloud uses.

00:26:44.540 --> 00:26:49.350
So it uses this option to make sure
that before it decides what the most

00:26:49.350 --> 00:26:53.720
up-to-date thing is for the user,
to make sure that it has all the

00:26:53.720 --> 00:26:57.960
information about what the user has just
done in an application while it's open.

00:27:01.700 --> 00:27:03.330
One last method in
NS File Coordinator worth

00:27:03.330 --> 00:27:06.590
mentioning is item at URL,
did move to URL.

00:27:06.630 --> 00:27:08.690
As I mentioned earlier,
we deal with what the

00:27:08.690 --> 00:27:09.870
user thinks of as files.

00:27:09.880 --> 00:27:12.700
And what this allows us to do,
by the way,

00:27:12.710 --> 00:27:16.660
is handle complicated case where
even though it's the same file,

00:27:16.660 --> 00:27:19.600
its name is actually changed
because of file name extensions.

00:27:19.600 --> 00:27:23.600
So to take advantage of this,
you have to tell us when it

00:27:23.600 --> 00:27:28.290
just happened by invoking it
during coordinated writing.

00:27:29.500 --> 00:27:33.670
And as an example, NS Document uses this
so that in TextEdit,

00:27:33.710 --> 00:27:36.700
if a document,
a rich text document switches

00:27:36.700 --> 00:27:40.560
between RTF and RTFD because an
attachment has been added to it,

00:27:40.630 --> 00:27:44.980
it does this so that everything
knows that this file that used to

00:27:44.980 --> 00:27:49.210
be called .RTF is now called .RTFD.

00:27:51.100 --> 00:27:53.500
Moving on to NS File Presenter.

00:27:53.500 --> 00:27:56.500
There have been plenty of
locking mechanisms before.

00:27:56.500 --> 00:27:59.840
This is sort of the more novel
half of file coordination.

00:27:59.840 --> 00:28:05.420
The basic concept is your app says what
it's showing to the user and because

00:28:05.530 --> 00:28:10.700
it's done that it gets to participate in
other processes' coordinated file access.

00:28:11.640 --> 00:28:15.430
And it actually gets notified of
uncoordinated file access too.

00:28:15.440 --> 00:28:20.440
So when you're doing things like
you have a document open in TextEdit

00:28:20.440 --> 00:28:24.200
and then you edit it with Emacs
at the same time for some reason,

00:28:24.330 --> 00:28:28.780
NS Document will actually use
NS File Presenter or because it's a

00:28:28.780 --> 00:28:32.730
file presenter will get notified of that
change even though of course Emacs is not

00:28:32.730 --> 00:28:39.500
going to be updated to use coordinated
writing anytime soon I'm sure.

00:28:40.510 --> 00:28:44.100
And the way you use it is you register
an NS file presenter and it's a protocol,

00:28:44.100 --> 00:28:50.060
not a class, and it's something that both
NS document and UI document implement.

00:28:50.580 --> 00:28:53.730
and their class methods
on NS File Coordinator for

00:28:53.800 --> 00:28:56.040
registering file presenters.

00:28:56.040 --> 00:28:58.620
I just simply add and
remove file presenter.

00:28:58.690 --> 00:29:01.290
And what's interesting about
this is you always have to

00:29:01.420 --> 00:29:05.660
invoke the removing method,
even in a garbage collected application.

00:29:05.960 --> 00:29:09.210
And the problem is that
DL is often too late.

00:29:09.210 --> 00:29:12.520
It's too indeterminate.

00:29:12.520 --> 00:29:16.900
So NS Document, for example,
does this in its close method.

00:29:16.980 --> 00:29:20.510
So after that point,
it's not interested in getting

00:29:20.510 --> 00:29:22.560
any more notifications.

00:29:24.980 --> 00:29:29.020
There's a property that you get to
implement called presented item URL and

00:29:29.150 --> 00:29:32.990
you don't tell file coordination
where the file to be presented is.

00:29:33.050 --> 00:29:37.240
File coordination will ask your
file presenter at the right time.

00:29:37.320 --> 00:29:39.720
And actually on any thread at any time.

00:29:39.720 --> 00:29:42.230
So notice that this
is an atomic property.

00:29:42.320 --> 00:29:46.270
There's no non-atomic declaration there.

00:29:47.430 --> 00:29:50.760
And there's no setter that goes with
this because you don't tell file

00:29:50.760 --> 00:29:53.860
coordination when the file is moved,
even if you have something in

00:29:53.860 --> 00:29:58.000
your application that allows
the user to move the file.

00:29:58.000 --> 00:30:00.250
You don't call set presented item at URL.

00:30:00.370 --> 00:30:05.060
What you do is you do a coordinated
file access for moving that if

00:30:05.060 --> 00:30:07.360
your app's UI supports that.

00:30:08.950 --> 00:30:12.260
Another property is called Presented
Item Operation Queue and it's the

00:30:12.260 --> 00:30:15.890
queue for all the other messages
that I'm going to talk about,

00:30:15.890 --> 00:30:18.660
what queue they get invoked on.

00:30:18.770 --> 00:30:24.660
So it's very often okay to return
NS Operation Queue main queue but

00:30:24.660 --> 00:30:27.500
very often it's not because it's
easy to create deadlocks that

00:30:27.500 --> 00:30:30.960
way as everything fights over the
main thread in your application.

00:30:31.080 --> 00:30:35.930
So NS Document actually uses
a private queue of its own

00:30:35.930 --> 00:30:39.060
for receiving these messages.

00:30:39.140 --> 00:30:43.250
So two kind of advanced things in the
NS File Presenter API are Relinquished

00:30:43.360 --> 00:30:47.780
Presented Item to Reader and
Relinquished Presented Item to Writer.

00:30:47.850 --> 00:30:52.150
And they tell your NS File Presenter
that something wants to read or write

00:30:52.260 --> 00:30:54.560
the file that you're presenting.

00:30:54.880 --> 00:31:00.400
and they are past a block and you must
invoke the past in block quickly because

00:31:00.400 --> 00:31:05.470
some other process is waiting for it,
of course.

00:31:05.780 --> 00:31:10.040
So and when you do this you get to
pass a block of your own and it will be

00:31:10.130 --> 00:31:13.820
called when the reader or writer is done.

00:31:14.920 --> 00:31:18.440
So as an example,
I'd like to call it a simple example,

00:31:18.440 --> 00:31:22.390
but if you haven't seen blocks before,
nothing is simple at first.

00:31:22.410 --> 00:31:27.320
But here we have an implementation
of a link which presented item to

00:31:27.320 --> 00:31:31.280
writer and in this fictional class,
this class has a method

00:31:31.360 --> 00:31:33.160
called wait for writer on it.

00:31:33.260 --> 00:31:37.250
And what wait for writer
does is it can do anything.

00:31:37.250 --> 00:31:41.230
It might block the UI momentarily,
hopefully doing something

00:31:41.230 --> 00:31:45.400
nice with progress indication,
or it just might make sure that this

00:31:45.810 --> 00:31:51.050
file presenter doesn't have any file
access of its own already going on.

00:31:51.060 --> 00:31:54.550
So when relinquish presented
item to writer is invoked,

00:31:54.640 --> 00:31:57.130
this object sends itself wait for writer.

00:31:57.140 --> 00:32:03.630
And it can do things like stop
looking at the file that time.

00:32:05.440 --> 00:32:11.290
One interesting thing to note,
sort of an advanced thing in NS Document,

00:32:11.500 --> 00:32:14.780
we have this perform asynchronous
file access using block.

00:32:14.800 --> 00:32:17.920
If you're wondering why is all that
machinery necessary when we have

00:32:17.920 --> 00:32:22.980
this even lower level synchronization
mechanism and it's because there

00:32:22.980 --> 00:32:26.130
are situations where you not only
want to don't look at the file,

00:32:26.130 --> 00:32:28.920
you don't want to even look
at the IVARs whose values

00:32:28.920 --> 00:32:30.700
depend on what's in the file.

00:32:31.520 --> 00:32:35.240
So that's where perform asynchronous
file access using block comes from.

00:32:35.240 --> 00:32:39.740
You can't make a decision based on a
file's modification date if it's in

00:32:39.740 --> 00:32:44.140
the middle of changing right then.

00:32:44.830 --> 00:32:49.010
With this stuff you can, you know,
make decisions based on the state of

00:32:49.170 --> 00:32:53.110
the file and then make sure other things
don't change the file while you're

00:32:53.110 --> 00:32:55.540
actually acting on those decisions.

00:32:55.660 --> 00:32:57.970
So,
and this wait for writer is an example

00:32:57.990 --> 00:32:59.860
of something that could do that.

00:33:00.610 --> 00:33:03.040
So when the object's
own file access is done,

00:33:03.220 --> 00:33:09.260
it calls this block that we passed
to it and it passes in another block,

00:33:09.260 --> 00:33:10.480
stop waiting.

00:33:10.620 --> 00:33:14.350
And when that block is invoked,
now we can call the writer.

00:33:14.350 --> 00:33:17.190
We can let the other process go.

00:33:17.420 --> 00:33:22.750
And when it is done,
the reacquirer block that we pass into

00:33:22.750 --> 00:33:30.020
it is called and at that point we can
tell our own object to stop waiting.

00:33:30.770 --> 00:33:32.410
So there are other methods
in this file presenter.

00:33:32.530 --> 00:33:36.710
So first of all, to hear about changes,
presented item did change and

00:33:36.710 --> 00:33:38.400
presented item did move to URL.

00:33:38.400 --> 00:33:41.010
So that's pretty good.

00:33:41.010 --> 00:33:44.160
That's pretty simple compared to
using something like FS events

00:33:44.210 --> 00:33:47.800
or VNode dispatch sources,
which is actually what

00:33:47.800 --> 00:33:49.250
some of this is built on.

00:33:49.260 --> 00:33:53.350
You get these messages and
as their name implies did,

00:33:53.350 --> 00:33:54.590
you catch up.

00:33:56.220 --> 00:33:59.400
So and usually this happens while
you've relinquished to a writer while

00:33:59.400 --> 00:34:03.620
your file presenter has given explicit
permission to other processes to write.

00:34:04.460 --> 00:34:08.080
But not always because again,
not everyone uses file coordination.

00:34:08.130 --> 00:34:11.610
And when you get a presented item did
change just in the middle of nowhere,

00:34:11.610 --> 00:34:15.080
you know, do the best you can just reread
the contents of the file.

00:34:15.140 --> 00:34:19.090
So if you know,
we want more and more people to

00:34:19.090 --> 00:34:21.990
use file coordination to close the
kind of race conditions that can

00:34:21.990 --> 00:34:23.620
happen when you have to do this.

00:34:27.290 --> 00:34:31.160
So a big part of NS File Presenter,
it's what makes a lot of

00:34:31.160 --> 00:34:34.650
iCloud work and also autosave,
is being able to implement this method,

00:34:34.660 --> 00:34:37.040
save presented item changes
with completion handler.

00:34:37.040 --> 00:34:40.860
So it's your indication that
something wants to read the most

00:34:40.860 --> 00:34:44.160
up-to-date contents of the file
that you're presenting to the user.

00:34:44.160 --> 00:34:47.900
And if you're doing
something like autosaving,

00:34:47.900 --> 00:34:52.400
like NS Document,
the support we just added in Lion, yes,

00:34:52.400 --> 00:34:54.640
now you should save
presented item changes.

00:34:55.340 --> 00:34:58.800
In an older NS Document application
that hasn't been updated

00:34:58.800 --> 00:35:02.700
to use autosaves in place,
we don't make it save then.

00:35:02.700 --> 00:35:05.260
We leave the user with
control over when to save.

00:35:05.260 --> 00:35:07.570
But in the newer stuff,
we get to do this.

00:35:07.580 --> 00:35:11.700
So by the way,
the implication there is that autosaving,

00:35:11.740 --> 00:35:14.740
as was introduced in
the last presentation,

00:35:14.820 --> 00:35:20.440
is actually a pretty important part
of being an iCloud application also.

00:35:21.500 --> 00:35:23.900
And what you should do when you
get this method is save the user's

00:35:23.950 --> 00:35:29.020
changes and its document example,
invoke save to URL of

00:35:29.020 --> 00:35:32.240
type for save operation,
etc., etc.

00:35:32.240 --> 00:35:34.660
And you want to be quick about this.

00:35:34.660 --> 00:35:36.940
So again, another process is waiting.

00:35:36.940 --> 00:35:39.520
So this is no time to present UI.

00:35:39.520 --> 00:35:41.620
It's no time to ask the
user if it should be saved.

00:35:41.620 --> 00:35:42.600
The answer is yes.

00:35:44.500 --> 00:35:47.890
And you don't want to block
another process while the user,

00:35:47.910 --> 00:35:52.000
they might not even be looking at that
app right then to answer the sheet

00:35:52.000 --> 00:35:53.990
if you put one up in front of them.

00:35:54.000 --> 00:35:57.980
So always invoke the completion
handler because some other poor

00:35:58.070 --> 00:36:00.620
process will be blocked until you do.

00:36:03.870 --> 00:36:05.030
So getting deleted.

00:36:05.240 --> 00:36:10.160
So if your file is open and
something does a coordinated write

00:36:10.160 --> 00:36:13.640
that says it's going to delete it,
this is the message you'll get.

00:36:13.660 --> 00:36:16.180
Accommodate presented item
deletion with completion handler.

00:36:17.320 --> 00:36:19.800
And for example, NS document,
I don't think it does this

00:36:19.810 --> 00:36:22.180
in the C that you have,
but it will any second now,

00:36:22.180 --> 00:36:24.580
will actually start closing the document.

00:36:24.580 --> 00:36:28.490
So if it's open and it's in the
trash and the user empties the trash,

00:36:28.510 --> 00:36:31.110
you know, the user dragged the
document into the trash,

00:36:31.110 --> 00:36:33.260
they went to empty the trash,
they were asked,

00:36:33.350 --> 00:36:35.000
do you really want to delete this?

00:36:35.020 --> 00:36:39.250
At that point,
it's safe to really close the document,

00:36:39.250 --> 00:36:43.230
you know,
if the user says yes to empty the trash.

00:36:45.280 --> 00:36:47.200
So, and again,
this is not a good time to present UI.

00:36:47.200 --> 00:36:50.550
It's a good time to remove UI,
but not a good time to

00:36:50.550 --> 00:36:52.130
ask the user a question.

00:36:52.260 --> 00:36:56.610
And again, don't forget that completion
handler because you will leave some

00:36:56.610 --> 00:37:01.190
other process blocked if you don't,
at least until your own process ends.

00:37:02.450 --> 00:37:03.300
So versions.

00:37:03.300 --> 00:37:07.110
In the last talk,
the NS Document Auto-Saving and Versions

00:37:07.210 --> 00:37:10.420
presentation right before this one,
you learned that we have an

00:37:10.420 --> 00:37:13.400
NS File Version class and it's very cool.

00:37:13.680 --> 00:37:16.480
We also have a way to notify you
if you're an NS File Presenter

00:37:16.480 --> 00:37:21.000
of versions being added or
removed to the file that you are

00:37:21.070 --> 00:37:23.200
presenting with methods like this.

00:37:23.330 --> 00:37:27.320
Presented item did gain
version and did lose version.

00:37:27.700 --> 00:37:43.020
And something really just for
iCloud is the presented item did

00:37:43.020 --> 00:37:43.020
resolve conflict version method.

00:37:43.020 --> 00:37:43.020
What iCloud does is when
it detects a conflict,

00:37:43.020 --> 00:37:43.020
it doesn't even really
try to resolve it for you.

00:37:43.020 --> 00:37:43.020
It just detects it.

00:37:43.260 --> 00:37:48.670
It picks a winner and it leaves the
winning document contents in the file and

00:37:48.930 --> 00:37:52.830
it picks the loser and it makes what's
called a conflict version out of it.

00:37:52.860 --> 00:37:57.170
And then it uses file coordination
in such a way that the application

00:37:57.180 --> 00:38:01.650
gets a notification that this
conflict losing version was added.

00:38:03.260 --> 00:38:05.660
So, and this is how you take care of it.

00:38:05.660 --> 00:38:08.850
And of course in NS Document we've
pretty much taken care of it for you.

00:38:08.860 --> 00:38:11.610
We put you in the versions
browser and we indicate where this

00:38:11.610 --> 00:38:13.600
came from and stuff like that.

00:38:14.560 --> 00:38:18.820
So, if you're not using NS Document,
for example, you'll probably need to,

00:38:18.870 --> 00:38:21.380
if you're not using
NS Document or UI Document,

00:38:21.390 --> 00:38:23.730
you'll probably need to learn these.

00:38:25.150 --> 00:38:26.520
Supporting iCloud.

00:38:26.520 --> 00:38:28.480
The last topic to talk about.

00:38:28.500 --> 00:38:32.100
I keep talking about NS Document does
this for you automatically.

00:38:32.100 --> 00:38:34.290
UI Document does this
automatically for you.

00:38:34.290 --> 00:38:37.030
But not all apps are document based.

00:38:37.030 --> 00:38:40.920
A bit of terminology that
we keep throwing around.

00:38:40.920 --> 00:38:43.370
I don't think marketing likes it
very much but none of us engineers

00:38:43.480 --> 00:38:45.820
have thought of a better word
so we keep calling it these.

00:38:45.820 --> 00:38:47.910
What is a shoebox application?

00:38:47.910 --> 00:38:51.620
It's an application that
does not deal in documents.

00:38:51.660 --> 00:38:54.160
It just shows the user their data.

00:38:55.100 --> 00:38:56.390
It's not files.

00:38:56.390 --> 00:39:00.180
And popular examples
are iPhoto and iTunes.

00:39:00.180 --> 00:39:04.860
You can look at the files that
your pictures or music are stored

00:39:05.180 --> 00:39:07.420
in but in general you don't.

00:39:07.420 --> 00:39:10.710
You just use the UI that
it puts up for you.

00:39:10.800 --> 00:39:17.190
And the name comes from is because it's
like a shoebox of pictures or tapes.

00:39:17.460 --> 00:39:21.520
Using NS File Presenter in shoebox apps,
you can do it.

00:39:21.650 --> 00:39:26.220
NS File Presenter,
it has the word file in its name,

00:39:26.220 --> 00:39:27.440
but that's okay.

00:39:27.440 --> 00:39:29.270
Just like NS File Manager,
NS File Wrapper,

00:39:29.270 --> 00:39:31.150
it applies to both directories and files.

00:39:31.150 --> 00:39:34.810
You can use it when you're
presenting a directory full of files,

00:39:34.810 --> 00:39:36.080
not just one file.

00:39:36.100 --> 00:39:39.750
In a particularly interesting
kind of directory are what's

00:39:39.750 --> 00:39:41.730
called iCloud weak packages.

00:39:41.730 --> 00:39:45.070
It's a directory with a
specific file name extension,

00:39:45.070 --> 00:39:46.200
W-E-A-K-P-K-G.

00:39:46.200 --> 00:39:50.430
It doesn't matter much that this is
a little unattractive as far as file

00:39:50.480 --> 00:39:54.640
name extensions go because users
aren't supposed to ever see them,

00:39:54.640 --> 00:39:55.670
right?

00:39:55.680 --> 00:39:59.600
When you're talking about a
shoebox app like iTunes or iPhoto,

00:39:59.600 --> 00:40:02.360
the user doesn't dig around in the files.

00:40:02.360 --> 00:40:05.080
So something like this.

00:40:06.100 --> 00:40:11.540
For iCloud, it'll be deep in the
user's library folder.

00:40:11.570 --> 00:40:14.300
So in iCloud,
we'll be digging around in those

00:40:14.300 --> 00:40:16.800
files and so will your application.

00:40:17.900 --> 00:41:50.400
[Transcript missing]

00:41:51.350 --> 00:41:54.330
As far as file coordination
is locking is concerned,

00:41:54.360 --> 00:41:58.090
this all comes about from the
fact that it's just another

00:41:58.090 --> 00:42:00.230
kind of file package to it.

00:42:00.270 --> 00:42:02.970
When you read anything
in that file package,

00:42:02.990 --> 00:42:06.250
nothing else is allowed to
write anywhere in that file

00:42:06.700 --> 00:42:08.760
package while you're doing that.

00:42:11.310 --> 00:42:14.180
So presenting a package,
presenting a directory like these kind

00:42:14.190 --> 00:42:18.560
of things that you'll use for shoebox
apps that interoperate with iCloud.

00:42:18.560 --> 00:42:21.710
Many of the regular methods I've
already told you about apply.

00:42:21.710 --> 00:42:25.940
Relinquish presented item to reader and
relinquish presented item to writer.

00:42:25.940 --> 00:42:30.430
You'll get these when iCloud wants to
read anything at all in the directory

00:42:30.430 --> 00:42:34.790
of your stuff and you get to fend it
off if you have something complicated

00:42:34.790 --> 00:42:38.820
going on in the user interface
until you're ready to let it go.

00:42:38.870 --> 00:42:41.180
And again,
and also save presented item to reader.

00:42:42.100 --> 00:42:45.100
So presenting item changes
with completion handler.

00:42:45.180 --> 00:42:49.070
You know, when iCloud wants to read,
if you want to take the opportunity

00:42:49.070 --> 00:42:51.930
to make sure everything is
completely up to date with

00:42:51.930 --> 00:42:55.280
what the user has done in the UI,
this is your opportunity when

00:42:55.290 --> 00:42:59.120
save presented item changes with
completion handlers invoked.

00:43:03.710 --> 00:43:07.590
So presenting package sub-items, well,
as far as the notifications go,

00:43:07.600 --> 00:43:10.920
if you have an iCloud directory
with a bunch of files in it

00:43:10.920 --> 00:43:14.090
laid out however you might,

00:43:14.400 --> 00:43:16.800
You need a more fine-grained
notification really than just

00:43:16.800 --> 00:43:18.100
presented item did change.

00:43:18.100 --> 00:43:21.860
Go dig around in everything looking to
see what iCloud just dropped off for you.

00:43:22.870 --> 00:43:25.480
So we also have methods like this,
presented item,

00:43:25.710 --> 00:43:31.540
sub-item did appear at URL and did
change and did move and accommodate

00:43:31.610 --> 00:43:33.320
presented sub-item deletion.

00:43:33.570 --> 00:43:37.730
And what's different about these compared
to methods you saw before is that

00:43:37.730 --> 00:43:40.450
they're messages about individual files.

00:43:40.460 --> 00:43:44.440
You'll get a URL that
indicates that locates a file

00:43:44.540 --> 00:43:48.530
inside your iCloud directory.

00:43:49.180 --> 00:43:52.300
This doesn't actually work on the
seed you have right now by the way,

00:43:52.300 --> 00:43:53.580
but it is definitely coming soon.

00:43:53.580 --> 00:43:59.190
The stuff you saw in the
earlier NS Document talk,

00:43:59.240 --> 00:44:03.150
most of that is really there,
but the support for iCloud directories,

00:44:03.150 --> 00:44:05.220
not quite yet, but soon.

00:44:05.220 --> 00:44:10.700
You'll also need to get notifications
about versions of packaged sub-items,

00:44:10.700 --> 00:44:14.370
so your directory full of stuff
that iCloud is digging around

00:44:14.370 --> 00:44:16.120
in while your app is also.

00:44:17.710 --> 00:44:21.100
Individual files in one of
these iCloud weak packages,

00:44:21.170 --> 00:44:23.190
one of these directories,
have their own versions,

00:44:23.380 --> 00:44:28.180
so iCloud is doing version detection
on a very fine-grained basis.

00:44:28.180 --> 00:44:32.020
And with these NS File Presenter methods,
you'll get notifications about

00:44:32.020 --> 00:44:34.020
that on a very fine-grained basis.

00:44:34.020 --> 00:44:38.200
So it did gain version, did lose version,
and did resolve conflict version.

00:44:40.020 --> 00:44:42.900
So to summarize,
we've introduced a bunch of new features

00:44:42.900 --> 00:44:46.020
in both iOS and Mac OS X.7 this week.

00:44:46.140 --> 00:44:52.130
Two in particular, iCloud and autosave,
we discovered that we could solve

00:44:52.400 --> 00:44:56.520
a lot of the problems that they
share with one new set of mechanisms

00:44:56.520 --> 00:44:58.530
for both locking and notification.

00:44:58.570 --> 00:45:02.950
And we wrap them up in a class
called NS file coordinator and in

00:45:03.070 --> 00:45:08.520
general you want to use it whenever
your application is changing files.

00:45:11.500 --> 00:45:14.180
Regardless of, well,
unless of course there

00:45:14.250 --> 00:45:17.500
are the sort of files,
you know, temporary directories,

00:45:17.500 --> 00:45:20.070
things like that,
and you want to use NS File Presenter

00:45:20.140 --> 00:45:24.820
when showing files to the user even
when the user doesn't know their files,

00:45:24.820 --> 00:45:29.700
even when they think that
they're looking at their photo

00:45:29.700 --> 00:45:29.700
library or something like that.

00:45:30.140 --> 00:45:34.640
So for more information,
Bill Dudney can answer your questions

00:45:34.640 --> 00:45:36.600
about what we've talked about today.

00:45:36.600 --> 00:45:39.380
There's the documentation,
excellent as always, up there,

00:45:39.380 --> 00:45:40.880
including release notes.

00:45:41.030 --> 00:45:45.110
There are the developer forums
and there are header files

00:45:45.110 --> 00:45:47.380
with super copious comments.

00:45:47.380 --> 00:45:52.080
They might not help you understand
why things are happening but

00:45:52.170 --> 00:45:55.080
they will definitely describe
in great detail what happens.

00:45:55.170 --> 00:45:57.770
So in the Foundation framework.

00:45:57.940 --> 00:46:00.640
Related session,
a lot of these have already happened.

00:46:00.760 --> 00:46:03.060
What's new in Cocoa,
iCloud storage overview,

00:46:03.120 --> 00:46:04.500
autosave and versions.

00:46:04.500 --> 00:46:10.520
Tomorrow at 3:15 is storing documents
in iCloud using iOS 5 which is

00:46:10.550 --> 00:46:14.900
mostly about the UI document
class that's been added to UI kit.

00:46:15.000 --> 00:46:21.170
And also on Thursday in Nob Hill you'll
hear about some of this iCloud stuff also

00:46:21.250 --> 00:46:24.490
and what's new in Core Data on Mac OS X.

00:46:24.630 --> 00:46:26.500
Thank you very much.