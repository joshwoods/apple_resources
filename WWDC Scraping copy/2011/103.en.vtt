WEBVTT

00:00:09.750 --> 00:00:11.100
Good morning.

00:00:11.100 --> 00:00:13.330
Welcome to session 103, Cocoa Autolayout.

00:00:13.420 --> 00:00:14.260
My name is Ken Ferrry.

00:00:14.380 --> 00:00:16.820
I'm an engineer in the
Cocoa Frameworks group.

00:00:16.960 --> 00:00:19.030
So today we're talking about layout.

00:00:19.100 --> 00:00:20.660
Layout means different things,
different contexts.

00:00:20.710 --> 00:00:22.650
So what do we mean for today?

00:00:22.650 --> 00:00:25.590
We're talking about the basics of
how you get content into a window

00:00:25.590 --> 00:00:26.900
where the user can see them.

00:00:27.230 --> 00:00:30.900
Every graphical environment has
some mechanism for doing this.

00:00:30.900 --> 00:00:33.990
In HTML, you have blocks,
and you're trying -- and you position

00:00:33.990 --> 00:00:35.660
them with CSS and things like that.

00:00:35.660 --> 00:00:39.870
In Java, you have components,
use layout managers, things like that.

00:00:40.230 --> 00:00:43.860
Cocoa has views, and we positioned them
through two properties.

00:00:43.880 --> 00:00:47.100
We have the frame,
and we have the autorisizing mask.

00:00:47.290 --> 00:00:50.370
And collectively,
we call this system Springs and Struts,

00:00:50.410 --> 00:00:52.640
and it's served us well for a long time.

00:00:52.770 --> 00:00:54.330
It's pretty nice.

00:00:54.370 --> 00:00:56.550
And this is what we're changing.

00:00:56.710 --> 00:00:59.620
So I hope we do a good job.

00:00:59.710 --> 00:01:02.770
To understand what we're doing,
let's call your attention

00:01:02.770 --> 00:01:06.490
to the image on the left,
where we have these blue guides.

00:01:06.600 --> 00:01:09.570
These are lines that you see in
Interface Builder when you're

00:01:09.570 --> 00:01:13.220
dragging a view around that help you
snap it into a really good position,

00:01:13.220 --> 00:01:14.740
a good initial frame.

00:01:14.800 --> 00:01:16.100
But they're temporary.

00:01:16.170 --> 00:01:17.870
They're gone as soon as
you let go of the mouse.

00:01:17.990 --> 00:01:18.820
They vanish.

00:01:18.890 --> 00:01:22.850
And what we're changing is that we want
to take those guides and invert the

00:01:22.860 --> 00:01:25.060
relationship between them and the frames.

00:01:25.220 --> 00:01:29.560
So the guides are actually what we save,
and the frames are computed

00:01:29.640 --> 00:01:31.460
at runtime from the guides.

00:01:31.530 --> 00:01:34.020
And we rename the guides
because they're persistent.

00:01:34.020 --> 00:01:37.110
We call them constraints now,
because they constrain the way the

00:01:37.110 --> 00:01:38.740
interface is allowed to change.

00:01:38.820 --> 00:01:43.020
So in this example,
what we see is that no matter

00:01:43.020 --> 00:01:45.910
what happens in this window,
the right side of this button must

00:01:45.910 --> 00:01:49.100
always be pinned to that space
to the right side of the window,

00:01:49.100 --> 00:01:50.260
and same for the top.

00:01:50.340 --> 00:01:52.420
So like I said, I mean,
this is a pretty big change.

00:01:52.420 --> 00:01:53.860
I mean,
Springs and Struts has been something

00:01:53.860 --> 00:01:56.890
we've been using for a really long time,
and we're actually happy with it.

00:01:56.920 --> 00:02:00.770
And furthermore, in other systems,
people sometimes aren't very

00:02:00.770 --> 00:02:02.100
happy with their layout systems.

00:02:02.100 --> 00:02:03.380
Some of them are very complicated.

00:02:03.400 --> 00:02:04.580
Very few people will talk
about how great Gridbag is.

00:02:04.580 --> 00:02:08.050
We'll talk about how great
Gridbag layout is in Java.

00:02:08.210 --> 00:02:10.560
So why would we do this?

00:02:10.980 --> 00:02:15.320
Well, to start to get the idea,
let's take a look at the

00:02:15.320 --> 00:02:16.930
same interface in German.

00:02:17.110 --> 00:02:20.260
It's quite a bit bigger in German,
as you can see.

00:02:20.260 --> 00:02:23.150
I probably won't try to pronounce it,
because I'll get it wrong.

00:02:23.400 --> 00:02:26.520
But the thing to realize here
is that even though it's larger,

00:02:26.590 --> 00:02:30.820
what you see drawn here as far as the
guides are exactly the same as before.

00:02:31.010 --> 00:02:33.860
So the same set of constraints
are going to serve to lay it

00:02:33.860 --> 00:02:35.460
out in English and in German.

00:02:35.500 --> 00:02:39.030
And what that means is that in
order to localize this interface,

00:02:39.120 --> 00:02:40.460
you need to find somebody
who speaks German,

00:02:40.520 --> 00:02:43.220
but you don't need to find somebody
who can also edit a nib file,

00:02:43.260 --> 00:02:47.090
which is a lot harder than finding
somebody who speaks German.

00:02:47.530 --> 00:02:50.180
Okay, but we're not doing
this for localization.

00:02:50.300 --> 00:02:52.050
In fact,
you might have gotten an impression from

00:02:52.110 --> 00:02:53.640
some of the things you've seen so far.

00:02:53.790 --> 00:02:56.500
Localization is in some ways just the
easiest thing to show you that's better.

00:02:56.500 --> 00:02:58.450
But there's a lot.

00:02:58.690 --> 00:03:01.630
So this is actually pretty important.

00:03:01.850 --> 00:03:05.220
So we want the work that you do in
Interface Builder to go a lot further.

00:03:05.220 --> 00:03:08.390
Something that you'll find in
interfaces today is that when you

00:03:08.400 --> 00:03:12.000
have a dynamic interface where the
content is not known at design time,

00:03:12.000 --> 00:03:14.400
it's hard to use Interface
Builder to do that.

00:03:14.400 --> 00:03:16.530
You might find it
easier to do it in code.

00:03:17.630 --> 00:03:20.110
But with layout,
because the constraints sort of

00:03:20.390 --> 00:03:23.380
express things that continue to be
true through the lifecycle of the app,

00:03:23.630 --> 00:03:26.500
you can continue to use Interface
Builder and bring the dynamic

00:03:26.630 --> 00:03:27.740
content in when you have it.

00:03:27.800 --> 00:03:32.720
When you can't use Interface Builder,
we want to make that situation better,

00:03:32.720 --> 00:03:33.230
too.

00:03:33.230 --> 00:03:36.120
So when you're doing in-code layout,
we think we can make this

00:03:36.120 --> 00:03:37.430
substantially better.

00:03:37.430 --> 00:03:39.940
And we have some tricks for this,
actually, that I hope you'll enjoy.

00:03:39.940 --> 00:03:43.080
Design flexibility.

00:03:43.100 --> 00:03:48.230
So if the person who's drawing a button,
decides, you know what,

00:03:48.250 --> 00:03:50.290
I need an engraving line,
or I need a shadow,

00:03:50.290 --> 00:03:54.690
or something like that, right now,
you have to go through all the code

00:03:54.700 --> 00:03:57.400
that uses that control and fix it all.

00:03:57.410 --> 00:03:59.290
And that shouldn't be necessary.

00:03:59.330 --> 00:04:03.000
That's a bad factoring of responsibility.

00:04:03.020 --> 00:04:03.830
Localization.

00:04:03.920 --> 00:04:06.500
We already talked about that,
so I'm not going to do it anymore.

00:04:06.500 --> 00:04:08.450
But we didn't talk about
resolution dependence.

00:04:08.540 --> 00:04:13.060
And this one's maybe the
most subtle of the features.

00:04:13.280 --> 00:04:16.190
In Interface Builder,
with classic Cocoa Layout,

00:04:16.190 --> 00:04:18.560
if you set the frame and you
set the autorisizing mask,

00:04:18.560 --> 00:04:21.450
there's pretty much no way that
frame can be pixel integral

00:04:21.550 --> 00:04:23.200
at all possible scale factors.

00:04:23.230 --> 00:04:25.030
And it turns out you really want that.

00:04:25.350 --> 00:04:29.410
So it turns out that the classic way of
doing Cocoa Layout in Interface Builder

00:04:29.410 --> 00:04:33.620
is sort of incompatible with at least
non-integral scale factors with high DPI.

00:04:34.620 --> 00:04:40.210
So with that, I'd like to get started on
the basics of how this works.

00:04:40.320 --> 00:04:43.100
And for that,
I'd like to bring up my colleague,

00:04:43.100 --> 00:04:46.080
Kevin-- there he is--
Kevin Cathey to show you how

00:04:46.080 --> 00:04:48.070
this works in Interface Builder.

00:04:50.380 --> 00:04:52.450
So as Ken said, my name is Kevin.

00:04:52.510 --> 00:04:55.140
I'm one of the engineers on the
Xcode and Interface Builder teams.

00:04:55.190 --> 00:04:57.590
I get the privilege of kind of
introducing you guys to some of

00:04:57.590 --> 00:05:00.990
the basic concepts of Autolayout,
and I'm going to show you guys how that

00:05:01.290 --> 00:05:02.650
works by showing it to you in Xcode.

00:05:02.910 --> 00:05:04.690
So let's get started.

00:05:05.100 --> 00:05:07.240
All right, so I've just got a basic
Cocoa application here.

00:05:07.240 --> 00:05:09.800
I haven't done anything,
just created a new template.

00:05:09.800 --> 00:05:11.990
And the first thing I like
to do is enable Autolayout

00:05:12.240 --> 00:05:14.890
for my main menu nib file.

00:05:14.920 --> 00:05:16.680
And to do that, it's really easy.

00:05:16.860 --> 00:05:18.760
There's the file inspector in Xcode.

00:05:18.760 --> 00:05:20.600
I have my nib file open.

00:05:20.640 --> 00:05:24.890
I can open the file inspector,
and there's a checkbox

00:05:24.890 --> 00:05:27.350
here called Use Autolayout.

00:05:27.350 --> 00:05:30.270
And I'm just going to go
ahead and check that out.

00:05:30.270 --> 00:05:30.270
And now my document is using Autolayout.

00:05:31.090 --> 00:05:32.270
So how does this work?

00:05:32.450 --> 00:05:36.980
So let me grab a button and drag it up
into the upper left corner of my window.

00:05:36.990 --> 00:05:40.220
You can see I'm getting the guides,
but when I let go,

00:05:40.350 --> 00:05:43.100
I've created two constraints.

00:05:43.180 --> 00:05:46.000
One here, and one here.

00:05:46.050 --> 00:05:50.220
Now, constraints, as Ken mentioned,
are relationships that occur

00:05:50.220 --> 00:05:55.000
between one or two views,
and they're relationships that must hold.

00:05:55.000 --> 00:05:57.060
One way to think about
this is we've taken these

00:05:57.210 --> 00:06:00.300
Interface Builder Aqua guides,
and we've frozen them

00:06:00.400 --> 00:06:02.020
as these relationships.

00:06:02.280 --> 00:06:06.240
Now, what's interesting about the guides,
again, is the fact that they specify

00:06:06.240 --> 00:06:09.710
some interesting spacing,
for example, between two views,

00:06:09.800 --> 00:06:10.980
or how two views align.

00:06:11.320 --> 00:06:16.240
And we want to encode that data in our
interface and always have it be true.

00:06:16.940 --> 00:06:20.280
Now, if I grab my button and
drag it to the upper right,

00:06:20.280 --> 00:06:24.740
you can see I've got different guides,
and I've created different constraints.

00:06:24.970 --> 00:06:28.280
We think that we've made it even easier
to create those simple interfaces.

00:06:28.430 --> 00:06:31.880
There's no longer a need to
set an autoresizing mask.

00:06:32.330 --> 00:06:35.460
As I'm dragging things around,
it's doing what I mean,

00:06:35.460 --> 00:06:39.490
as Max mentioned in the developer
tools kickoff yesterday.

00:06:39.800 --> 00:06:42.170
So while a lot of things with
springs and struts are possible

00:06:42.280 --> 00:06:45.340
without a layout-- actually,
everything that's possible with

00:06:45.410 --> 00:06:48.630
springs and struts is also possible
without a layout-- there's also a lot

00:06:48.730 --> 00:06:51.720
of things that aren't possible with
the auto-resizing mask that are very,

00:06:51.720 --> 00:06:53.460
very, very simple without a layout.

00:06:53.460 --> 00:06:55.790
Let me show you a really simple example.

00:06:55.790 --> 00:06:59.720
If I grab this button and center it, OK,
it stays centered.

00:06:59.720 --> 00:07:03.620
If I drag out a second button, however,
and put it next to it,

00:07:03.620 --> 00:07:05.430
I've created two constraints.

00:07:05.530 --> 00:07:08.950
One is a spacing between these
two buttons and one to the top.

00:07:09.140 --> 00:07:11.080
But this button's always centered.

00:07:11.100 --> 00:07:14.890
So if I run my application-- command-R

00:07:15.500 --> 00:07:16.680
and resize my window.

00:07:16.910 --> 00:07:18.740
You can see, sure enough,
that button is staying centered,

00:07:18.740 --> 00:07:21.240
but this button is tagging
right along with it.

00:07:21.350 --> 00:07:23.500
For those of you familiar
with the autoresizing mask,

00:07:23.530 --> 00:07:24.990
you'll know that's a bit tricky.

00:07:25.040 --> 00:07:28.640
You can't do that only
with the autoresizing mask.

00:07:29.960 --> 00:07:34.370
So I can preview resizing my window
or views by running my application,

00:07:34.370 --> 00:07:37.410
but I can also preview it really
easily in Interface Builder

00:07:37.620 --> 00:07:39.520
just by resizing my view.

00:07:39.640 --> 00:07:44.400
And you can see those constraints are
taken into account right at design time.

00:07:44.550 --> 00:07:46.900
So two things I want to point out here.

00:07:47.070 --> 00:07:50.540
First of all, I can see the constraints
that involve the views in my

00:07:50.820 --> 00:07:52.690
interface by just selecting them.

00:07:52.900 --> 00:07:55.170
So if I have this button selected,
I can see the constraints

00:07:55.170 --> 00:07:57.220
for this button,
and similarly if I have

00:07:57.220 --> 00:07:58.400
this one selected.

00:07:58.600 --> 00:08:00.900
Secondly, constraints are real objects.

00:08:00.960 --> 00:08:03.930
They appear in your Interface
Builder documents just like

00:08:03.930 --> 00:08:05.400
every other object in IB.

00:08:05.400 --> 00:08:08.900
So that means I can select them,
so I can click on this constraint,

00:08:09.100 --> 00:08:12.780
and we'll show those two views that
are involved in that relationship

00:08:12.780 --> 00:08:14.310
with the amber highlights.

00:08:14.540 --> 00:08:17.980
But I also can see them
in the document structure.

00:08:18.040 --> 00:08:21.110
For example,
if I open the jump bar for this

00:08:21.200 --> 00:08:23.950
content view of the window,
oh, there are my two buttons.

00:08:24.180 --> 00:08:27.260
And there's a new disclosure
called constraints that will

00:08:27.660 --> 00:08:31.960
show me the constraints that
involve the views of my subview.

00:08:32.110 --> 00:08:35.130
So two things to point out there.

00:08:35.480 --> 00:08:38.490
So we've talked a lot about
taking the Auto Layout guides,

00:08:38.550 --> 00:08:40.300
the Aqua guides,
and turning them into constraints,

00:08:40.440 --> 00:08:41.900
but it's not just limited to that.

00:08:41.940 --> 00:08:44.640
We always make sure that
your views have constraints.

00:08:44.690 --> 00:08:48.330
If I select these two buttons and
drag them to a spot right here,

00:08:48.340 --> 00:08:52.200
you can see I still get constraints
that make sense since it's in the

00:08:52.530 --> 00:08:54.400
upper right portion of my window.

00:08:54.460 --> 00:08:57.400
So what exactly is Xcode
doing to help you out?

00:08:57.400 --> 00:09:01.200
Very simply stated,
Xcode is picking the minimum

00:09:01.260 --> 00:09:03.400
best set of constraints.

00:09:03.400 --> 00:09:06.320
So there's lots of
possibilities for constraints.

00:09:06.320 --> 00:09:08.020
If I grab this button,
you can see there's

00:09:08.020 --> 00:09:09.810
lots of possible guides,
right?

00:09:09.990 --> 00:09:12.400
Top, bottom, baseline, center, y.

00:09:12.580 --> 00:09:14.400
And what Xcode is doing is not magic.

00:09:14.400 --> 00:09:17.050
We just look at all the
constraints that are possible,

00:09:17.050 --> 00:09:21.400
assign each one a score,
and then pick the minimum best set.

00:09:21.400 --> 00:09:25.050
And we have a simple heuristic
that baseline alignments,

00:09:25.050 --> 00:09:29.220
for example in this case,
are more interesting than, let's say,

00:09:29.220 --> 00:09:30.500
a center or a top.

00:09:30.710 --> 00:09:32.440
All right,
so we think we've made creating

00:09:32.440 --> 00:09:36.290
those simple interfaces even simpler,
but we've also made creating the

00:09:36.300 --> 00:09:38.400
advanced interfaces possible.

00:09:38.530 --> 00:09:42.040
So what I'd like to do now is build
just a simple interface with some

00:09:42.040 --> 00:09:45.600
interesting elements going on with
some of the relationships between

00:09:45.600 --> 00:09:49.380
views that maybe represent some
sort of iTunes-like interface with a

00:09:49.430 --> 00:09:52.910
table view for songs and some buttons
for adding and removing things,

00:09:52.910 --> 00:09:54.810
and maybe sharing with your friends.

00:09:54.920 --> 00:09:57.270
Legally, that is.

00:09:57.620 --> 00:09:58.600
All right, so let's build this.

00:09:58.750 --> 00:10:02.470
So I can grab these two buttons
and drag them in the bottom left.

00:10:02.590 --> 00:10:06.470
Again, you can see the constraints are
doing exactly what I would expect.

00:10:06.550 --> 00:10:10.450
I can maybe add a button for changing
the mode of my table view to sort

00:10:10.560 --> 00:10:12.980
differently or show different data.

00:10:13.090 --> 00:10:15.170
And that can be my share button.

00:10:15.350 --> 00:10:18.290
And then, of course,
we'll want an actual table view.

00:10:20.440 --> 00:10:22.940
Grab that guy, drop him in.

00:10:22.990 --> 00:10:25.330
And again, you can see how easy it is
to create these interfaces.

00:10:25.360 --> 00:10:28.840
As I'm snapping the guides,
constraints are falling into place and

00:10:28.840 --> 00:10:32.230
just doing exactly what I'm looking for.

00:10:32.990 --> 00:10:35.420
All right, so I want to change the
titles of these buttons.

00:10:35.550 --> 00:10:37.340
Now,
take a look at this button for a second.

00:10:37.500 --> 00:10:39.940
You can see there's a couple different
constraints going on right here.

00:10:39.940 --> 00:10:42.440
A bunch of different spacings
between my super view,

00:10:42.560 --> 00:10:47.360
and more interestingly,
this spacing between this other button.

00:10:47.710 --> 00:10:50.440
As Ken mentioned,
dynamism is one of the features of

00:10:50.440 --> 00:10:53.400
Autolayout where the power really shines.

00:10:53.400 --> 00:10:56.780
As the content of your interface
is changing at runtime,

00:10:56.780 --> 00:10:59.600
this interface is just flowing around it.

00:10:59.670 --> 00:11:03.280
This doesn't just help you at runtime,
but also helps you at design time.

00:11:03.580 --> 00:11:09.930
So I'm going to change the title
of this button from "button," which

00:11:09.930 --> 00:11:09.930
is not incredibly descriptive,
to "add."

00:11:10.470 --> 00:11:11.640
Now, something really
interesting happened there.

00:11:11.640 --> 00:11:14.780
Not only did the button
shrink to fit its contents,

00:11:14.910 --> 00:11:17.530
but if you're watching closely,
it also pulled this button

00:11:17.530 --> 00:11:18.900
right along with it.

00:11:18.900 --> 00:11:20.820
Let me undo and redo.

00:11:21.240 --> 00:11:24.630
And you can see that button just
gets pulled along with it because

00:11:24.750 --> 00:11:28.700
of the spacing constraint that must
hold between those two buttons.

00:11:29.730 --> 00:11:33.330
So I'm going to go ahead and set
the titles for the rest of these.

00:11:33.330 --> 00:11:35.390
And watch as I change these titles.

00:11:35.610 --> 00:11:37.050
You can see the button
is going in exactly the

00:11:37.050 --> 00:11:40.230
direction that I would expect,
given the constraints

00:11:40.340 --> 00:11:41.950
that are on that button.

00:11:43.440 --> 00:11:47.160
And there's my share button.

00:11:47.230 --> 00:11:51.380
All right, so let's go ahead and run our
app and see this guy resizing.

00:11:51.380 --> 00:11:54.180
And look, that's resizing exactly
how I would expect.

00:11:54.180 --> 00:11:54.860
No work needed.

00:11:54.870 --> 00:11:56.170
Just drag my stuff out.

00:11:56.170 --> 00:11:57.630
And it's -- hmm.

00:11:57.630 --> 00:12:00.800
It's kind of doing what I want,
but I really don't want the

00:12:00.970 --> 00:12:04.100
change mode button to overlap
with that remove button.

00:12:04.100 --> 00:12:05.800
So how might we solve that?

00:12:05.800 --> 00:12:09.040
Well, one option would be to
write a lot of code.

00:12:09.040 --> 00:12:12.590
Or what I could use is I could
insert my own additional constraint.

00:12:12.670 --> 00:12:16.080
Xcode will help you by adding
automatic constraints as you're

00:12:16.080 --> 00:12:19.160
resizing and laying out your views.

00:12:19.160 --> 00:12:22.960
But there will also be cases where you
want to specify additional relationships.

00:12:23.010 --> 00:12:24.990
So I can do that right here.

00:12:25.840 --> 00:12:31.140
can select the remove button
and the change mode button.

00:12:31.160 --> 00:12:32.690
Go up to the editor menu.

00:12:32.780 --> 00:12:37.020
And there's an add constraint
menu under the editor menu.

00:12:37.020 --> 00:12:38.760
And you can see there's a
couple of different kinds of

00:12:38.760 --> 00:12:40.390
constraints that we can add.

00:12:40.390 --> 00:12:44.180
We can add one for width, for height,
for spacings between views,

00:12:44.300 --> 00:12:48.270
for spacings to the super view,
and also making things equal widths.

00:12:48.270 --> 00:12:51.550
And Ken will go in more detail about
some of the different possibilities

00:12:51.680 --> 00:12:53.590
of constraints that are out there.

00:12:53.590 --> 00:12:54.940
These are just a few.

00:12:54.940 --> 00:12:57.560
So I want to add a horizontal
spacing constraint.

00:12:57.560 --> 00:12:59.650
What I've done here is I've
taken a relationship that's

00:12:59.700 --> 00:13:01.360
currently on the canvas,
for example,

00:13:01.510 --> 00:13:04.960
the spacing between the remove
and change mode buttons,

00:13:04.960 --> 00:13:07.920
and I've frozen that into a constraint.

00:13:07.920 --> 00:13:11.720
So as I mentioned, constraints are real
objects in my document.

00:13:11.870 --> 00:13:14.510
So I can select them,
but I can also inspect them.

00:13:14.510 --> 00:13:18.350
And constraints have some really cool
properties that are incredibly powerful.

00:13:18.360 --> 00:13:22.140
So let me open the attributes
inspector and show some of them to you.

00:13:23.010 --> 00:13:25.640
So this shows me that I have a
horizontal spacing constraint

00:13:26.250 --> 00:13:31.400
that is equal to 119 points.

00:13:31.700 --> 00:14:46.200
[Transcript missing]

00:14:48.590 --> 00:14:52.380
All right, so let's just start over.

00:14:52.540 --> 00:14:54.870
Really encourage you guys,
as you hit bugs in Xcode,

00:14:55.120 --> 00:14:57.530
because there really aren't any,
so you have to really

00:14:57.530 --> 00:14:59.100
try hard to find them.

00:14:59.220 --> 00:15:01.790
But if you find any, we really encourage
you guys to file bugs,

00:15:01.790 --> 00:15:04.100
and also to include
really reproducible steps,

00:15:04.160 --> 00:15:06.000
and that will really help us out.

00:15:06.130 --> 00:15:10.100
All right, so now I can hit Command-R and
run my application.

00:15:10.250 --> 00:15:12.440
And now when I resize my window, perfect.

00:15:12.520 --> 00:15:18.000
It stops resizing exactly how I'd expect
when that minimum distance is hit.

00:15:22.170 --> 00:15:24.560
There's one more interesting
thing going on here.

00:15:24.620 --> 00:15:28.330
If you notice,
I can't resize the window any smaller.

00:15:28.450 --> 00:15:29.530
It won't go smaller.

00:15:29.790 --> 00:15:32.460
But I've never set an actual
minimum width for my window.

00:15:32.550 --> 00:15:35.120
This is another one of the
powerful features of Auto Layout,

00:15:35.120 --> 00:15:38.970
is that as you're resizing your window,
it's taking into account the

00:15:39.060 --> 00:15:42.600
constraints in the views in that window.

00:15:42.700 --> 00:15:45.600
So as soon as the constraints in
the window can't hold anymore,

00:15:45.660 --> 00:15:48.140
the window just
automatically stops resizing.

00:15:48.210 --> 00:15:51.260
This minimum and maximum width is no
longer some static property that you

00:15:51.260 --> 00:15:55.300
have to kind of fragilely calculate
based upon maybe your largest

00:15:55.460 --> 00:15:56.700
strain that you're going to show.

00:15:56.700 --> 00:16:00.160
But rather, it's just automatic based
upon the constraints.

00:16:00.190 --> 00:16:03.300
And you can see this if we
go back in Interface Builder.

00:16:03.330 --> 00:16:04.980
And I select these views.

00:16:05.220 --> 00:16:07.820
You can see there's a spacing
here and here and here.

00:16:07.820 --> 00:16:10.720
And also,
I specified one to center that button.

00:16:10.910 --> 00:16:14.040
So all those, again,
are relationships that must hold.

00:16:14.390 --> 00:16:18.410
So in order for them to hold,
the window can't get any smaller.

00:16:19.130 --> 00:16:21.730
But is that really what
I want in this case?

00:16:21.840 --> 00:16:25.100
There's a lot of wasted space when
I size my window small over here.

00:16:25.150 --> 00:16:28.000
I kind of want the window
to be able to get smaller,

00:16:28.060 --> 00:16:31.330
but I also don't want to
break into my constraints,

00:16:31.330 --> 00:16:33.710
because constraints must hold.

00:16:33.850 --> 00:16:36.200
Constraints have a
property called priority.

00:16:36.210 --> 00:16:38.890
And that allows you to say, well,
this constraint is required

00:16:38.890 --> 00:16:42.070
in the default case,
but it's actually optional

00:16:42.120 --> 00:16:44.100
in particular cases.

00:16:44.200 --> 00:16:46.200
Let me show you how that works.

00:16:46.280 --> 00:16:48.710
So I can select this
centering constraint.

00:16:48.940 --> 00:16:52.100
And you can see there's a
field here called priority.

00:16:52.100 --> 00:16:54.760
My default,
all the constraints that you create or

00:16:54.960 --> 00:16:57.250
that Xcode helps you create are required.

00:16:57.320 --> 00:17:00.100
They have a priority of 1,000.

00:17:00.100 --> 00:17:03.540
Anything less than that means
that the constraint is optional.

00:17:03.670 --> 00:17:06.990
Autolayout will try as hard as
it can to meet that constraint,

00:17:07.150 --> 00:17:10.540
but if there's circumstances which
would prevent it from holding,

00:17:10.690 --> 00:17:14.750
then it will break since you've
specified that it's not required.

00:17:14.940 --> 00:17:18.010
Cocoa specifies a couple
of predefined priorities,

00:17:18.250 --> 00:17:20.560
kind of like NSWindow levels.

00:17:20.560 --> 00:17:22.640
And if you put your
priorities in between these,

00:17:22.640 --> 00:17:24.290
you can get particular behaviors.

00:17:24.400 --> 00:17:27.000
In this case,
I want my window to be able to resize,

00:17:27.000 --> 00:17:29.800
but not clip any of the
content of my buttons.

00:17:29.820 --> 00:17:32.900
If you'd like more information on
what those different levels are,

00:17:32.970 --> 00:17:34.690
just check out the documentation.

00:17:34.790 --> 00:17:37.630
In this particular case,
a value of 400 just falls

00:17:37.880 --> 00:17:39.140
inside of that range.

00:17:39.140 --> 00:17:43.800
Again, check out the documentation to
see more of what that means.

00:17:43.910 --> 00:17:45.300
And you can see,
if you're working in Xcode,

00:17:45.300 --> 00:17:49.800
we'll draw those constraints that
are optional with a dotted line.

00:17:50.010 --> 00:17:52.370
And just because I know you
guys are all thinking it,

00:17:52.370 --> 00:17:55.280
I'm just going to add that final
spacing constraint as well.

00:17:55.350 --> 00:17:58.000
We're going to do the same thing
by just making that greater than

00:17:58.000 --> 00:18:00.100
or equal to the standard space.

00:18:00.220 --> 00:18:03.850
And now, when I run my application,

00:18:04.130 --> 00:18:05.850
You can see that it's resizing normally.

00:18:05.970 --> 00:18:10.300
Now when I hit that minimum distance,
that centering constraint is broken,

00:18:10.330 --> 00:18:14.330
but also that other
spacing constraint is held.

00:18:14.620 --> 00:18:16.260
So just look at this interface.

00:18:16.380 --> 00:18:17.910
I mean,
it's so cool that we could do this

00:18:18.000 --> 00:18:20.060
without writing a single line of code.

00:18:20.250 --> 00:18:22.470
And that's some of the
power of Autolayout.

00:18:22.570 --> 00:18:24.500
Ken, back to you.

00:18:24.500 --> 00:18:26.500
Thank you, Kevin.

00:18:26.500 --> 00:18:27.500
Okay.

00:18:27.570 --> 00:18:28.470
So thank you very much, Kevin.

00:18:28.600 --> 00:18:32.180
Let's take a look at the API for this,
since so far we've only seen

00:18:32.180 --> 00:18:33.500
it in Interface Builder.

00:18:33.500 --> 00:18:36.550
So the one new object we have,
the guides need to be captured

00:18:36.550 --> 00:18:38.390
as NSLayoutConstraint objects.

00:18:38.500 --> 00:18:40.500
That's the only new class we have.

00:18:40.730 --> 00:18:42.500
And what has to go into it?

00:18:42.500 --> 00:18:44.500
How are you going to create these things?

00:18:44.590 --> 00:18:48.220
Well, it turns out that every single
thing you saw drawn in IB,

00:18:48.220 --> 00:18:52.110
every one of those constraints,
can be expressed pretty much as a

00:18:52.110 --> 00:18:55.940
little equation of the form y=mx+b,
where by y and x we really

00:18:55.940 --> 00:18:57.680
mean attributes of views.

00:18:57.680 --> 00:19:00.650
So for example,
if you have this relationship,

00:19:00.650 --> 00:19:05.440
we're talking about how the left side of
the Accept button should be equal to the

00:19:05.440 --> 00:19:08.130
right side of the Cancel button plus 12.

00:19:08.500 --> 00:19:11.420
And you can see how that's expressed
in one of these little equations.

00:19:11.600 --> 00:19:13.500
So this is pretty much
what we have to capture.

00:19:13.500 --> 00:19:15.540
And this is what,
if you're using it in code,

00:19:15.610 --> 00:19:17.320
this is what goes into a constraint.

00:19:17.550 --> 00:19:20.020
Besides that, as you saw,
there are just a couple

00:19:20.020 --> 00:19:21.500
more properties you need.

00:19:21.500 --> 00:19:24.500
There's the priority,
as Kevin showed you,

00:19:24.500 --> 00:19:26.420
and then there's the relationship.

00:19:26.590 --> 00:19:30.500
So is it equals,
is it greater than equal to, or what?

00:19:30.500 --> 00:19:33.560
So if that's what you need to capture,
then this is what the creation

00:19:33.640 --> 00:19:35.500
method's going to look like,
right?

00:19:35.500 --> 00:19:36.460
And that's right.

00:19:36.510 --> 00:19:40.770
So to make this particular relationship,
you're saying Accept button left

00:19:41.310 --> 00:19:42.500
equals Cancel.right plus 12.

00:19:42.500 --> 00:19:43.500
So that's normal.

00:19:43.500 --> 00:19:47.460
That's what Cocoa would usually do,
right?

00:19:48.420 --> 00:19:52.500
Except this is maybe not so good,
if you look at this.

00:19:52.500 --> 00:19:53.500
And we actually think
this is very important.

00:19:53.500 --> 00:19:56.490
So the problem is,
if you look at that code,

00:19:56.490 --> 00:19:59.890
is it very simple to tell from
what you've written there what's

00:19:59.890 --> 00:20:01.500
going to come out in the UI?

00:20:01.500 --> 00:20:02.500
And I would say no.

00:20:02.610 --> 00:20:04.500
It would take me a
long time to read that.

00:20:04.500 --> 00:20:07.500
If I were scanning through the code,
I would have a hard time with it.

00:20:07.610 --> 00:20:09.900
And it would be really easy to
blow a sign or to use the wrong

00:20:09.900 --> 00:20:11.500
attribute or something like that.

00:20:11.500 --> 00:20:13.440
And we think this is
actually pretty critical.

00:20:13.540 --> 00:20:16.500
So I'm going to try to emphasize this,
because it runs through the whole API.

00:20:16.500 --> 00:20:18.490
It's really important that
whatever you're doing with layout,

00:20:18.500 --> 00:20:20.500
you have to be able to visualize it.

00:20:20.500 --> 00:20:23.710
And linear source code that
just runs from left to right,

00:20:23.710 --> 00:20:28.350
top to bottom, is a really poor way to
visualize geometric UI.

00:20:28.600 --> 00:20:30.660
So if linear source
code is so bad for this,

00:20:30.660 --> 00:20:33.690
and you can't see what's going on,
how can you make your

00:20:33.690 --> 00:20:35.290
source code more visual?

00:20:36.300 --> 00:21:18.500
[Transcript missing]

00:21:18.700 --> 00:21:20.340
So this is actually a little language.

00:21:20.340 --> 00:21:21.800
It's a format string.

00:21:21.800 --> 00:21:23.380
We call it a visual format language.

00:21:23.380 --> 00:21:24.980
So let's go into it a little bit.

00:21:25.260 --> 00:21:28.120
So I'm going to use a slightly more
complex one just so we can break it

00:21:28.200 --> 00:21:29.920
apart and see what the pieces are.

00:21:29.920 --> 00:21:34.180
The two primary pieces, in some ways,
are a view and a connection.

00:21:34.260 --> 00:21:36.650
Views appear set off in square
brackets to make them look

00:21:36.810 --> 00:21:37.980
somewhat more rectangular.

00:21:38.060 --> 00:21:41.350
Connections are set off by hyphens
because they look like connections.

00:21:41.410 --> 00:21:43.540
In both cases,
you can put a predicate on it.

00:21:43.620 --> 00:21:46.500
Here, what this is saying-- if you
put the predicate on the view,

00:21:46.500 --> 00:21:50.060
like this, this is saying the cancel
button is width 72.

00:21:50.100 --> 00:21:54.200
The space between the cancel button
and the accept button is 12 points.

00:21:54.270 --> 00:21:58.000
And the accept button is width 50,
is what this particular string says.

00:21:58.210 --> 00:22:00.880
And this is a constraint creation method.

00:22:00.960 --> 00:22:04.640
So it returns an array of constraints,
three in this case.

00:22:04.670 --> 00:22:08.100
OK, so let me actually-- the
language is very small.

00:22:08.120 --> 00:22:11.700
It's really just driven by
what looks good on the page.

00:22:11.800 --> 00:22:13.910
And so let me go through
the whole thing by example.

00:22:13.920 --> 00:22:16.850
If you do want an actual formal grammar,
that's in the documentation.

00:22:16.980 --> 00:22:20.460
So first of all,
the original example I gave you had the

00:22:20.560 --> 00:22:22.520
hyphen but didn't have a number on there.

00:22:22.750 --> 00:22:26.280
And that's because the hyphen by
itself means the standard Aqua space.

00:22:26.340 --> 00:22:27.780
And this is very dynamic.

00:22:27.900 --> 00:22:30.720
It's based on the
individual views involved.

00:22:30.790 --> 00:22:34.710
And it's also based on-- it's
also evaluated very late.

00:22:35.090 --> 00:22:39.140
So if we actually change what the meaning
of the standard space is for a particular

00:22:39.140 --> 00:22:43.130
control or a particular situation,
this would pick it up, which is great,

00:22:43.210 --> 00:22:44.500
if that's what you mean.

00:22:44.500 --> 00:22:46.650
And if that's not what you mean,
don't use the standard space.

00:22:46.700 --> 00:22:48.720
Use the-- use something explicit.

00:22:48.720 --> 00:22:52.210
If you want to-- so
here's one showing width.

00:22:52.480 --> 00:22:55.800
So we have a view that we're saying
should be at least 60 points wide.

00:22:55.860 --> 00:22:57.740
And this one has a priority.

00:22:57.940 --> 00:23:00.380
So again, the default priority is
going to be required.

00:23:00.380 --> 00:23:05.280
But if you say it's at 700,
that means it's at strength 700.

00:23:05.890 --> 00:23:08.410
Okay, if you want to make a
connection to your super view,

00:23:08.570 --> 00:23:11.210
which is pretty common, well,
we figure if you're

00:23:11.430 --> 00:23:14.950
connecting out to the outside,
it looks kind of like a wall.

00:23:15.170 --> 00:23:18.010
So the vertical pipe
character is the wall.

00:23:18.150 --> 00:23:20.330
So here you're saying the
edge of the super view,

00:23:20.330 --> 00:23:23.180
five points, then the content view,
then five more points,

00:23:23.440 --> 00:23:25.180
then the other edge on the other side.

00:23:25.840 --> 00:23:29.750
For vertical layout,
this was clearly a question,

00:23:29.850 --> 00:23:40.730
how should we do this?

00:23:41.780 --> 00:23:41.890
But we really lucked out because
Ake Inoue was working on vertical

00:23:41.890 --> 00:23:41.890
text support in Cocoa this release,
so we figured you can just write your

00:23:41.890 --> 00:23:41.890
text just vertically right in Xcode.

00:23:42.210 --> 00:23:45.090
You can already tell that's
not what's on the slide.

00:23:45.290 --> 00:23:48.680
So what's on the slide is
that if you start it with V:,

00:23:48.930 --> 00:23:52.030
that's vertical,
and it's always red from top to bottom.

00:23:52.180 --> 00:23:55.240
So here, the thing on the left,
turn it sideways like that to

00:23:55.350 --> 00:23:56.630
see what it sort of really does.

00:23:56.640 --> 00:23:57.960
So that's not, you know,
it's not quite as good

00:23:58.060 --> 00:24:01.100
as horizontal layout,
but you can still see it pretty well.

00:24:01.100 --> 00:24:03.820
If you want to say that
two views are flush,

00:24:03.920 --> 00:24:06.310
so the space between them is zero,
just write them next to each

00:24:06.310 --> 00:24:07.400
other without the hyphen.

00:24:07.540 --> 00:24:10.000
And if you want to say that two
views should be the same width,

00:24:10.000 --> 00:24:11.240
you can do that like this.

00:24:11.300 --> 00:24:14.880
So right where you'd normally write
something like equals 30 or greater

00:24:14.960 --> 00:24:18.140
than equal to 50 or whatever,
the equals is actually optional,

00:24:18.140 --> 00:24:20.130
but I would use it in this case.

00:24:20.290 --> 00:24:22.270
Here you're saying the
yellow box is equal to the,

00:24:22.310 --> 00:24:25.550
the width of the yellow box is
equal to the width of the red box.

00:24:26.060 --> 00:24:29.330
The predicates are actually lists,
so you can comma separate them

00:24:29.340 --> 00:24:31.710
and say something like this,
so you have some view that needs

00:24:31.850 --> 00:24:34.720
to be at least 30 pixels wide,
but no more than 80.

00:24:34.720 --> 00:24:37.990
And, like I said,
it creates a whole array of them.

00:24:38.100 --> 00:24:40.740
So, and this is where it
really comes together.

00:24:40.740 --> 00:24:44.040
So, if you see this on the page,
this is laying out a whole line where

00:24:44.160 --> 00:24:47.400
it says you've got the super view,
and then the standard space,

00:24:47.400 --> 00:24:51.720
then the find, and then standard space,
find next, standard space, a find field,

00:24:51.920 --> 00:24:55.700
which is at least 20 points wide,
and then the other edge of the window.

00:24:56.090 --> 00:24:58.150
So, and you can kind of see
what that's going to do,

00:24:58.190 --> 00:24:58.570
right?

00:24:58.650 --> 00:25:02.560
I mean, just look at the correspondence
between the ASCII art and

00:25:02.560 --> 00:25:04.600
the actual visual layout.

00:25:04.770 --> 00:25:07.750
And that's what we're trying to do.

00:25:07.760 --> 00:25:11.380
So, I hope you like that,
because we think it's a lot better.

00:25:17.010 --> 00:25:21.380
OK, now one more thing you might be
wondering about this is those names.

00:25:21.380 --> 00:25:23.740
So this is a string,
and we're referring to

00:25:23.790 --> 00:25:26.350
things like cancelButton,
acceptButton.

00:25:26.700 --> 00:25:28.320
How do those mean something?

00:25:28.320 --> 00:25:30.990
And that's this views dictionary
parameter pass at the end.

00:25:31.000 --> 00:25:34.000
And the views dictionary is something
that needs to map those strings

00:25:34.000 --> 00:25:35.710
that you see to the actual object.

00:25:35.830 --> 00:25:37.480
So if you were to print
it out in debugger,

00:25:37.480 --> 00:25:40.620
you'd see the acceptButton
is some button.

00:25:40.640 --> 00:25:43.300
And because that would seem to
be a little bit of pain to make,

00:25:43.300 --> 00:25:46.180
we have some conveniences to help you do
that that I'm going to talk about some,

00:25:46.200 --> 00:25:48.670
and you can also see it
in the documentation.

00:25:48.900 --> 00:30:33.600
[Transcript missing]

00:30:33.840 --> 00:30:37.200
Now,
one of the things you might want to do is

00:30:37.200 --> 00:30:39.710
actually mutate one of these constraints,
besides just add them or

00:30:39.710 --> 00:30:40.840
remove them from a window.

00:30:40.870 --> 00:30:42.020
I didn't mention this before.

00:30:42.020 --> 00:30:45.700
I didn't say that these properties on,
I didn't say whether constraints

00:30:45.700 --> 00:30:46.600
were immutable or not.

00:30:46.620 --> 00:30:48.520
And the answer is that
they're basically immutable.

00:30:48.530 --> 00:30:51.960
You can't change much of anything,
but you can change the constant.

00:30:51.970 --> 00:30:56.110
And the reason why there's that
deviation is that it turns out to be,

00:30:56.200 --> 00:30:58.080
the primary reason,
I'll get to the slide in a minute,

00:30:58.130 --> 00:31:00.160
is that it's algorithmically important.

00:31:00.260 --> 00:31:03.840
So it turns out that we can make
incremental changes like that much

00:31:03.880 --> 00:31:07.230
more quickly than if you were to
remove constraints and add new

00:31:07.230 --> 00:31:09.620
constraints that had the same values.

00:31:09.620 --> 00:31:11.260
This is how window resize works.

00:31:11.840 --> 00:31:17.680
That is the actual, as you saw,
the way a window will stop sizing down,

00:31:17.680 --> 00:31:20.080
that's because there are certain
constraints on there that say

00:31:20.080 --> 00:31:22.860
the window wants to be this
big with a certain priority,

00:31:22.880 --> 00:31:25.560
and those priorities
are defined in our API,

00:31:25.580 --> 00:31:28.780
and that's how you work with it.

00:31:28.840 --> 00:31:30.100
Anyway, so,
but one of the things you might

00:31:30.100 --> 00:31:32.120
want to do is animate a change.

00:31:32.120 --> 00:31:36.620
And since in Cocoa previously you do this
by using the animator proxy on a view,

00:31:36.670 --> 00:31:39.180
since you can't do that anymore really,
it doesn't really help,

00:31:39.180 --> 00:31:42.660
instead use the animator
proxy on a constraint.

00:31:42.900 --> 00:33:46.100
[Transcript missing]

00:33:46.530 --> 00:33:47.240
And that's dynamic.

00:33:47.400 --> 00:33:50.800
So now if somebody says,
I want these two objects to have their

00:33:50.800 --> 00:33:54.550
baseline aligned in the controller layer,
there's still interaction with the

00:33:54.550 --> 00:33:57.640
view layer where the view can say,
well, this is what my baseline is.

00:33:57.740 --> 00:34:00.200
So it really separates things
and lets you vary the view layer

00:34:00.200 --> 00:34:01.960
independently from the controller.

00:34:01.960 --> 00:34:05.500
Another one, so alignment rects.

00:34:05.660 --> 00:34:08.160
So again,
suppose that you wanted to lay these

00:34:08.160 --> 00:34:11.800
two views down next to each other with,
say, the bottoms aligned,

00:34:11.940 --> 00:34:13.700
and you want to do it in code.

00:34:14.110 --> 00:34:15.180
You think that would be pretty easy,
right?

00:34:15.290 --> 00:34:17.620
Because you just make two rectangles
which have the same bottom.

00:34:17.620 --> 00:34:20.780
Well, that's not actually going to work,
because if you look at

00:34:20.780 --> 00:34:23.220
these red lines I'm drawing,
these are the frames

00:34:23.220 --> 00:34:24.540
of these two controls.

00:34:24.540 --> 00:34:30.220
And you can see they're not tight on
what you would think of as the content.

00:34:30.220 --> 00:34:31.460
And there are two reasons for this.

00:34:31.480 --> 00:34:33.380
In the case of the segmenting control,
you can see there's some

00:34:33.380 --> 00:34:34.420
little shadows there,
right?

00:34:34.650 --> 00:34:37.220
And a frame has to contain
all of the pixels that draw,

00:34:37.290 --> 00:34:39.390
so it just has to be big enough for that.

00:34:39.390 --> 00:34:42.060
But you don't care about
the shadow for layout.

00:34:43.640 --> 00:34:45.840
And with the button,
the issue is that it's

00:34:45.840 --> 00:34:48.790
somewhat historical,
that we haven't been able to

00:34:48.790 --> 00:34:53.210
change metrics for controls,
and this button just used to be larger.

00:34:53.610 --> 00:34:55.780
We can make things smaller,
but not bigger.

00:34:55.780 --> 00:34:57.910
So how do we work around this?

00:34:58.230 --> 00:34:59.470
Well-- not really work around.

00:34:59.480 --> 00:35:01.030
How do we deal with this?

00:35:01.160 --> 00:35:05.730
We have an API for specifying
the alignment rect of a view.

00:35:05.820 --> 00:35:07.760
And this is, again,
an overrideable view method,

00:35:07.760 --> 00:35:11.500
where you say what your insets are
from the frame to the alignment rect.

00:35:11.510 --> 00:35:13.750
And the alignment rect is
supposed to be sort of the

00:35:13.750 --> 00:35:15.820
visual extent of your control.

00:35:16.040 --> 00:35:18.470
So it's ignoring shadows,
ignoring engraving lines,

00:35:18.480 --> 00:35:19.940
ignoring things like that.

00:35:19.940 --> 00:35:21.970
It's this tight box.

00:35:22.390 --> 00:35:24.410
And here we're drawing
the baselines as well.

00:35:24.620 --> 00:35:27.020
And the reason the baselines
are drawing is that I actually

00:35:27.020 --> 00:35:31.300
generated the screenshot,
not in Keynote,

00:35:31.300 --> 00:35:33.000
but with a real live screenshot.

00:35:33.140 --> 00:35:35.200
And the way you do that is
by passing this argument,

00:35:35.210 --> 00:35:40.710
NSView show alignment rects yes in Xcode,
or wherever, on the command line.

00:35:40.790 --> 00:35:42.980
And what that'll do is it'll
make these things draw.

00:35:43.050 --> 00:35:45.710
And that's useful because
when you're designing your UI,

00:35:45.960 --> 00:35:47.720
when you're writing the
actual view subclass,

00:35:47.740 --> 00:35:50.720
you need to make sure that the alignment
rect is where you intend it to be.

00:35:50.730 --> 00:35:53.600
And all of the layout--
actually operates on this,

00:35:53.600 --> 00:35:54.390
not on the frame.

00:35:54.550 --> 00:35:56.510
So when you say you want
two things bottom aligned,

00:35:56.630 --> 00:35:59.620
you're always,
always talking about the alignment rect,

00:35:59.670 --> 00:36:02.270
not talking about the frame.

00:36:02.570 --> 00:36:04.260
And so this is the overridable method.

00:36:04.290 --> 00:36:06.990
And you don't need it unless you're
actually writing a view subclass,

00:36:07.000 --> 00:36:11.240
and unless your view subclass
has shadows or something.

00:36:11.280 --> 00:36:16.320
OK, those two are probably easier
to understand than this one.

00:36:16.320 --> 00:36:17.800
But this one's really important.

00:36:17.820 --> 00:36:20.420
So this is the intrinsic
content size of a button.

00:36:20.470 --> 00:36:25.760
This lets a view declare--
I have a natural size.

00:36:25.960 --> 00:36:26.260
OK?

00:36:26.260 --> 00:36:28.000
It's kind of like size to fit in a way,
right?

00:36:28.000 --> 00:36:30.280
It's like saying,
because of the stuff I have in me,

00:36:30.300 --> 00:36:33.140
because of my title,
because of my images, whatever,

00:36:33.140 --> 00:36:35.760
this is the best size that I can be.

00:36:35.760 --> 00:36:42.000
But we invert the relationship
between size to fit in classic

00:36:42.070 --> 00:36:46.630
Cocoa layout and with the Auto Layout in
that previously you had to say,

00:36:46.640 --> 00:36:49.200
size yourself to fit right now.

00:36:49.200 --> 00:36:51.720
Now things always size
to fit all the time.

00:36:51.830 --> 00:36:52.120
OK?

00:36:52.380 --> 00:36:54.540
So this is the overridable method.

00:36:54.540 --> 00:36:57.070
And you can do this by setting
up constraints that say,

00:36:57.160 --> 00:36:59.130
no, I actually want you to be this big.

00:36:59.140 --> 00:37:02.160
And the way that works is
that you override this method

00:37:02.270 --> 00:37:03.870
intrinsic content size.

00:37:03.890 --> 00:37:10.380
And then Cocoa will call that method,
and it'll set up constraints that say,

00:37:10.380 --> 00:37:15.140
I don't want to be bigger than this,
and I don't want to be smaller than this.

00:37:15.140 --> 00:37:17.620
And you'll see how this works.

00:37:17.620 --> 00:37:20.500
So this really reduces the burden
on the controller layer again,

00:37:20.580 --> 00:37:23.220
because in the controller code,
that means-- you saw that code I wrote

00:37:23.350 --> 00:37:24.820
to lay out that first line of buttons,
right?

00:37:24.880 --> 00:37:27.060
It means you don't have
to talk about the size.

00:37:27.080 --> 00:37:28.880
You don't have to talk about
these things you don't know about.

00:37:28.890 --> 00:37:30.960
You don't know about-- the
controller code doesn't know

00:37:30.960 --> 00:37:34.470
about alignment racks or baselines
or this intrinsic content size,

00:37:34.470 --> 00:37:35.950
and you shouldn't have to.

00:37:36.160 --> 00:37:38.840
So it makes it much faster to write
these things and to change the two

00:37:38.840 --> 00:37:42.200
different-- the view layer and the
controller layer independently.

00:37:42.920 --> 00:37:45.670
So as I was saying, though,
so the reason I was saying the way I did,

00:37:45.750 --> 00:37:47.980
that it sets up constraints
that say no bigger than this,

00:37:48.110 --> 00:37:50.540
no smaller than this,
is that even though that's true,

00:37:50.540 --> 00:37:54.370
while the view knows what that size is,
the view doesn't know

00:37:54.680 --> 00:37:56.140
how important it is.

00:37:56.260 --> 00:37:59.090
Or it can take a guess,
but the guess won't always be right.

00:37:59.220 --> 00:38:01.840
So for example, a button typically
shouldn't clip its contents,

00:38:01.840 --> 00:38:02.280
right?

00:38:02.490 --> 00:38:04.570
And in fact,
should resist the window sizing if

00:38:04.570 --> 00:38:06.490
you're trying to bring a window down.

00:38:06.490 --> 00:38:09.710
So what that means is that the prior,
we call it the compression

00:38:09.710 --> 00:38:12.280
resistance priority for that button.

00:38:12.840 --> 00:38:15.770
Should be a higher priority
than the priority with which

00:38:15.770 --> 00:38:16.710
the window size is down.

00:38:16.890 --> 00:38:18.180
And it is, by default.

00:38:18.230 --> 00:38:20.160
But sometimes,
like in this case in Finder,

00:38:20.200 --> 00:38:22.260
you actually do want to
allow a button to be clipped.

00:38:22.360 --> 00:38:25.040
And the button's not going to know that.

00:38:25.190 --> 00:38:27.360
So in that case,
you need to be able to set the priority.

00:38:27.360 --> 00:38:29.750
And that's typically something
that the controller layer does,

00:38:29.750 --> 00:38:30.460
if necessary.

00:38:30.460 --> 00:38:32.970
And then the other side of
that is that typically controls

00:38:33.020 --> 00:38:35.760
don't want to be bigger than
they really have to be either.

00:38:35.760 --> 00:38:37.920
And we call that the
content hugging priority.

00:38:37.920 --> 00:38:39.990
And I, at least,
am very proud of getting the

00:38:39.990 --> 00:38:41.370
word hugging into the API.

00:38:42.800 --> 00:38:45.310
Also, you can talk about how
strongly you want to hug,

00:38:45.310 --> 00:38:48.650
which is kind of nice.

00:38:49.300 --> 00:38:53.470
Okay,
so that's it for intrinsic content size.

00:38:53.470 --> 00:38:57.190
And I know it's a little bit abstract,
but it's really important.

00:38:57.190 --> 00:39:00.190
It's really part of this
whole layering thing.

00:39:00.300 --> 00:39:03.310
So the last thing I want to talk
about along this line is the

00:39:03.330 --> 00:39:07.200
relationship between intrinsic
content size and fitting size.

00:39:07.200 --> 00:39:09.400
Like I said,
so we don't really do size to

00:39:09.400 --> 00:39:12.070
fit anymore in this new metric,
but there's still a useful

00:39:12.180 --> 00:39:13.110
thing you might want to say.

00:39:13.220 --> 00:39:15.940
So what is the best size
for this area of the screen?

00:39:15.940 --> 00:39:16.480
Okay?

00:39:16.580 --> 00:39:17.200
But you know what?

00:39:17.200 --> 00:39:19.200
You can't possibly really mean best size.

00:39:19.200 --> 00:39:23.910
Because with Autolayout going,
the best size for something is always

00:39:23.920 --> 00:39:27.180
going to be the size it is all the time,
right?

00:39:27.360 --> 00:39:29.120
So what did you really mean?

00:39:29.480 --> 00:39:33.180
What you really meant, I think,
is if you just look at that subtree

00:39:33.180 --> 00:39:36.200
of the view you're interested
in and everything in it as well,

00:39:36.200 --> 00:39:39.430
all those constraints,
how small could that

00:39:39.630 --> 00:39:41.200
be and still be good?

00:39:41.200 --> 00:39:42.140
That's what you really mean.

00:39:42.240 --> 00:39:43.200
And we call that the best size.

00:39:43.200 --> 00:39:46.040
We call that the fitting size,
which is just an inversion of size

00:39:46.040 --> 00:39:49.170
to fit because we're returning
a size rather than doing it.

00:39:49.260 --> 00:39:52.380
But the difference here is that the
fitting size is something you can

00:39:52.520 --> 00:39:54.200
call and it uses the layout system.

00:39:54.200 --> 00:39:55.200
It invokes it.

00:39:55.220 --> 00:39:59.590
Intrinsic content size is something
you override and you feed data into it.

00:40:00.010 --> 00:40:01.900
And the intrinsic content size is
not something where you're going

00:40:01.900 --> 00:40:02.740
to be looking at your subviews.

00:40:02.850 --> 00:40:06.460
The intrinsic part of that is that
it refers to your own content,

00:40:06.540 --> 00:40:08.920
not some other view's content.

00:40:09.500 --> 00:40:10.630
Okay.

00:40:11.010 --> 00:40:13.570
So that's what I had to say on layering.

00:40:13.710 --> 00:40:15.680
Now I want to show you a
little bit about debugging,

00:40:15.730 --> 00:40:17.540
because it's going to be very important.

00:40:17.540 --> 00:40:20.490
If we have a system that's
trying to do more on your behalf,

00:40:20.700 --> 00:40:22.030
you need to be able to
tell what it's doing,

00:40:22.090 --> 00:40:25.280
and introspect, and make sure you can fix
problems if you see them.

00:40:25.380 --> 00:40:28.880
And to do that,
I'd like to do this with a demo.

00:40:29.280 --> 00:40:31.160
And it's not really just going
to be a demo for debugging,

00:40:31.160 --> 00:40:34.280
it's also going to be a demo
for all of the stuff I've

00:40:34.280 --> 00:40:36.080
been talking about just now.

00:40:36.080 --> 00:40:39.550
It's just I won't do it all right,
and then we'll have to debug it.

00:40:39.560 --> 00:40:42.060
Okay.

00:40:42.200 --> 00:40:44.910
So let's get rid of that.

00:40:48.170 --> 00:40:53.260
So this is sort of a version of sample
code that we already have up on the web.

00:40:53.300 --> 00:40:56.610
This is called Find Panel Layout.

00:40:56.780 --> 00:40:58.890
And what we're going to do is we're
going to try to lay out something that

00:40:59.230 --> 00:41:02.400
looks kind of like a standard find panel,
okay, that has a find button,

00:41:02.460 --> 00:41:04.980
a find next button,
and a field in the first row,

00:41:04.980 --> 00:41:07.360
and then a replace button,
a replace and find button,

00:41:07.360 --> 00:41:08.610
and then a replace
field in the second row.

00:41:08.840 --> 00:41:10.630
Okay,
and there's a little bit of boilerplate

00:41:10.630 --> 00:41:12.180
in here that I put in to begin with.

00:41:12.380 --> 00:41:15.000
And this is just creating... Wow,
it looks really big in this template.

00:41:15.000 --> 00:41:18.500
This is just creating the views, okay?

00:41:18.500 --> 00:41:19.820
And there's nothing really
interesting about this.

00:41:19.860 --> 00:41:21.340
This is the same as you'd
always do it before.

00:41:21.340 --> 00:41:24.620
There is actually one interesting line,
but I'm going to skip past it.

00:41:25.200 --> 00:41:27.300
Set translates auto-resizing
mask into constraints.

00:41:27.380 --> 00:41:29.080
We will talk about this later, okay?

00:41:29.080 --> 00:41:31.200
But for the most part,
this is just making a bunch

00:41:31.200 --> 00:41:32.710
of buttons and text fields.

00:41:32.750 --> 00:41:36.620
And let's see what it looks like to
actually do the layout of these guys,

00:41:36.780 --> 00:41:37.020
okay?

00:41:37.020 --> 00:41:42.180
So first of all,
we're going to create these things,

00:41:42.180 --> 00:41:45.760
and we're going to create them
using the visual format syntax,

00:41:45.760 --> 00:41:46.360
okay?

00:41:46.360 --> 00:41:51.780
And just look how reasonable this is,
I suppose, okay?

00:41:51.780 --> 00:41:54.100
So we want to say we have
the edge of the window,

00:41:54.400 --> 00:41:57.100
standard space, then the find button,
standard space,

00:41:57.180 --> 00:42:00.940
then the find next button,
then the standard space,

00:42:01.000 --> 00:42:02.960
then the find field,

00:42:04.540 --> 00:42:07.740
And we'll say that needs to
be at least 20 points wide.

00:42:07.790 --> 00:42:10.640
And then we'll have standard
space out to the edge.

00:42:10.780 --> 00:42:14.640
And I hope I don't have a typo here,
but if we do, we get to see some of that

00:42:14.640 --> 00:42:16.400
debugging support too.

00:42:16.400 --> 00:42:18.910
It gives you a nice error message
and good diagnostics if you

00:42:18.910 --> 00:42:20.320
make a mistake in the string.

00:42:20.320 --> 00:42:23.230
Okay, now besides that,
I want all of these things

00:42:23.230 --> 00:42:24.720
lined up by baseline.

00:42:24.720 --> 00:42:28.020
So I'll say layout format
in this options mask,

00:42:28.020 --> 00:42:31.000
layout format align all baseline.

00:42:31.320 --> 00:42:34.750
Metrics, I'm going to skip over,
take a look at the documentation on that.

00:42:35.150 --> 00:42:40.970
But then I do need to pass
this dictionary I talked about,

00:42:41.120 --> 00:42:48.680
this views dictionary,
which makes these strings mean something.

00:42:48.680 --> 00:42:48.680
Okay?

00:42:48.680 --> 00:42:48.680
And for that, I'm going to -- oops.

00:42:49.100 --> 00:42:52.640
We're going to use this macro
that I sort of alluded to before,

00:42:52.640 --> 00:42:55.700
which is this NSDictionary of
Variable Bindings.

00:42:55.930 --> 00:42:59.290
And what this does is this makes
a dictionary that maps find,

00:42:59.290 --> 00:43:02.730
the string find, to the find object,
the string find next to

00:43:02.990 --> 00:43:05.170
the find next object,
and like that.

00:43:05.170 --> 00:43:09.220
So it's just a fairly convenient
way to make a dictionary like this.

00:43:09.310 --> 00:43:11.880
And we'll see,
because we can continue to use

00:43:11.890 --> 00:43:15.380
the dictionary over and over,
it's pretty reasonable.

00:43:15.900 --> 00:43:18.700
Okay,
so that makes an array of constraints.

00:43:18.730 --> 00:43:19.780
Now I need to install them.

00:43:19.950 --> 00:43:24.760
So I'm going to install them on
the content view of the window.

00:43:26.330 --> 00:43:32.370
Like that.

00:43:32.370 --> 00:43:32.370
Oops.

00:43:32.370 --> 00:43:32.370
I forgot to set up hex codes
prefs the way I wanted.

00:43:33.570 --> 00:43:37.180
Okay, now, so that's the first row,
and you can kind of see.

00:43:37.180 --> 00:43:39.040
So it's a find, then find, next,
then find field.

00:43:39.190 --> 00:43:41.500
For the second row,
we'll do the same thing,

00:43:41.500 --> 00:43:46.310
except we want replace,
and replace and find,

00:43:46.310 --> 00:43:49.110
and then replace field.

00:43:51.660 --> 00:43:54.440
And then we need to do the vertical
layout so that these things

00:43:54.440 --> 00:43:56.870
have some vertical positioning.

00:43:56.870 --> 00:44:01.450
And the way we do that is so V:,
so now this is the top.

00:44:01.580 --> 00:44:04.160
Now we want the standard space,
then we'll do the find field.

00:44:04.270 --> 00:44:05.710
Oops, field.

00:44:06.010 --> 00:44:09.130
Then we'll do the standard
space and replace field.

00:44:09.400 --> 00:44:14.900
And then we'll say we want at least 20
points before the end of the window.

00:44:15.160 --> 00:44:18.180
And I will get rid of
this baseline alignment,

00:44:18.400 --> 00:44:19.620
because that would complain.

00:44:19.620 --> 00:44:23.130
And let's see how we're
doing if we run this.

00:44:23.290 --> 00:44:24.980
Okay, that looks pretty good.

00:44:24.980 --> 00:44:26.410
You know, I resize it, it stops.

00:44:26.600 --> 00:44:28.010
That's pretty much what I want.

00:44:28.010 --> 00:44:30.560
Except that -- so, you know,
hopefully that's good, right?

00:44:30.670 --> 00:44:32.700
I mean, it looks like what you wanted.

00:44:32.700 --> 00:44:35.970
But, of course, this doesn't look the way
real fine panels look.

00:44:35.970 --> 00:44:37.480
We want these two to align.

00:44:37.600 --> 00:44:38.450
So let's do that.

00:44:38.590 --> 00:44:41.430
So I could just add another
line here that specifically

00:44:41.500 --> 00:44:43.030
just align those two things.

00:44:43.030 --> 00:44:44.690
But because I already have this,
I'm going

00:44:44.750 --> 00:44:48.620
I can say I want, just as I said,
layout format align all baseline here,

00:44:48.680 --> 00:44:53.460
I can say layout format align all left to
make sure those two fields are aligned.

00:44:54.520 --> 00:44:56.400
Except I'm not actually
going to say left,

00:44:56.480 --> 00:44:58.240
I'm going to say leading.

00:44:58.300 --> 00:45:01.440
And so this is an attribute,
all of the attributes

00:45:01.480 --> 00:45:05.590
by the way are left,
right, top, bottom, middle, middle X,

00:45:05.590 --> 00:45:07.890
middle Y, and baseline.

00:45:08.200 --> 00:45:09.400
And then also leading and trailing.

00:45:09.400 --> 00:45:13.150
And I'm going to hold off on explaining
leading and trailing for a minute.

00:45:13.550 --> 00:45:16.690
Okay, but now if we run that, okay,
much better.

00:45:16.690 --> 00:45:18.410
That's pretty much
looking like what I want,

00:45:18.680 --> 00:45:20.900
except I do actually see
something a little bit weird here.

00:45:21.140 --> 00:45:23.890
Why is the Find button so wide?

00:45:24.310 --> 00:45:29.740
I can see that the whole space here
needs to be at least this big because the

00:45:29.740 --> 00:45:33.600
replace and replace and find limit it,
but why isn't the space distributed here?

00:45:33.750 --> 00:45:38.730
To do this, I want to show you
some debugging support.

00:45:38.740 --> 00:45:44.910
I could instead just figure it out,
but let's not do that.

00:45:45.240 --> 00:45:49.470
Some debugging support, first of all,
is this method, constraints affecting

00:45:49.550 --> 00:45:51.100
layout for orientation.

00:45:51.300 --> 00:45:55.160
This says I want to know all of the
constraints that are currently affecting

00:45:55.530 --> 00:45:57.910
the Find Next button's horizontal layout.

00:45:58.200 --> 00:46:00.820
This isn't the constraints
that involve the view.

00:46:00.820 --> 00:46:02.670
This is all the constraints
that are actually affecting it.

00:46:03.270 --> 00:46:07.630
That would include things like
just the size of the window,

00:46:07.690 --> 00:46:09.500
if that did affect it.

00:46:09.630 --> 00:46:11.740
I could just log these out,
and it would print out

00:46:11.740 --> 00:46:15.920
using the ASCII art syntax,
but that's not really good enough either.

00:46:15.940 --> 00:46:18.680
Like we were saying,
one of the things that's really driven

00:46:18.680 --> 00:46:20.490
us during this API is visualization.

00:46:20.490 --> 00:46:22.560
We actually have this
method on this window,

00:46:22.610 --> 00:46:23.940
VisualizeConstraints.

00:46:23.940 --> 00:46:26.570
all this, check out what you get.

00:46:27.330 --> 00:46:30.740
You get this beautiful MOV window, okay,
right at runtime,

00:46:30.850 --> 00:46:34.040
and you've basically entered, like,
a constraint debugging mode, okay?

00:46:34.040 --> 00:46:37.040
And you can see you've
got some drawing here,

00:46:37.200 --> 00:46:40.530
and what these guys are drawing is
they're actually drawing my constraints.

00:46:40.540 --> 00:46:44.480
Now, and what you can do is,
what's good about this is it

00:46:44.480 --> 00:46:47.520
really helps you figure out,
so which one's wrong?

00:46:47.560 --> 00:46:49.380
If you're just looking at a bunch
of constraints in the debugger,

00:46:49.380 --> 00:46:50.070
well, what are they?

00:46:50.160 --> 00:46:53.200
This lets you know, okay,
these are the constraints I'm looking at.

00:46:53.270 --> 00:46:55.700
Now, both of these constraints
look reasonable to me.

00:46:55.700 --> 00:46:58.590
I do want these spacings here,
but I see this button,

00:46:58.690 --> 00:47:00.300
Exercise Ambiguity.

00:47:00.380 --> 00:47:02.900
Okay,
let's click that and see what it does.

00:47:03.530 --> 00:47:05.300
Ah.

00:47:05.300 --> 00:47:05.540
OK.

00:47:05.800 --> 00:47:10.000
So what this is saying is it's saying
that given the constraints you set up,

00:47:10.060 --> 00:47:13.180
there's no difference between
this layout and that layout.

00:47:13.310 --> 00:47:15.800
It means you didn't put
enough constraints in place.

00:47:15.830 --> 00:47:19.280
And if you think about it, that's right.

00:47:19.290 --> 00:47:22.600
So you've said this total space
must be at least this big,

00:47:22.670 --> 00:47:25.600
and the Find button wants
to hug its contents,

00:47:25.640 --> 00:47:27.860
and the Find Next button
wants to hug-- oops.

00:47:27.860 --> 00:47:31.640
I forgot I couldn't click those--
wants to hug its contents.

00:47:31.710 --> 00:47:34.170
But they want to hug
equally strongly right now.

00:47:34.260 --> 00:47:36.300
So which one wins is
just kind of arbitrary.

00:47:36.390 --> 00:47:37.830
And that's when you get this.

00:47:38.000 --> 00:47:39.440
So let's fix that.

00:47:39.450 --> 00:47:41.310
OK.

00:47:41.560 --> 00:47:45.540
So we can fix that by-- oops.

00:47:46.610 --> 00:47:50.170
by saying we want the Find and the
Find Next button to have the same width,

00:47:50.170 --> 00:47:52.200
but at a pretty low priority.

00:47:52.280 --> 00:47:56.000
Because we don't want it to-- if
we had it at a full-- actually,

00:47:56.000 --> 00:47:58.010
I'll show you at a full priority.

00:47:58.020 --> 00:48:03.200
So we'll do it for the next
row of constraints as well.

00:48:05.300 --> 00:48:08.170
Okay, so we want the Find to be the same
width as the Find Next button,

00:48:08.170 --> 00:48:10.860
and the Replace button to be
the same width as the next one.

00:48:11.010 --> 00:48:13.900
But if I just make those
required constraints,

00:48:14.310 --> 00:48:15.630
Well, that's not going to do what I want,
see?

00:48:15.720 --> 00:48:19.700
Because now we just get a whole
block here that's all too wide.

00:48:19.800 --> 00:48:22.140
So really, again,
I want to use this notion of priority

00:48:22.140 --> 00:48:24.740
and say this doesn't always have to hold.

00:48:24.850 --> 00:48:28.180
But if you don't have anything else--
but once you've satisfied everything

00:48:28.180 --> 00:48:32.020
else that you really need to satisfy,
try to satisfy this too.

00:48:32.270 --> 00:48:33.110
And so now we get that.

00:48:33.200 --> 00:48:35.780
So now the Find and the
Find Next button are the same width,

00:48:35.810 --> 00:48:37.760
which is what you want in this interface.

00:48:37.870 --> 00:48:40.950
So I hope that's good.

00:48:42.460 --> 00:48:44.940
Okay,
now one more aspect of debugging that I'd

00:48:44.940 --> 00:48:47.900
like to show you before we move on is,
that's what happens if you

00:48:48.240 --> 00:48:49.580
have not enough constraints.

00:48:49.680 --> 00:48:51.390
What happens if you
have a wrong constraint?

00:48:51.660 --> 00:48:53.810
Okay,
so what would happen if I just said the

00:48:53.810 --> 00:48:56.340
Find Next button should be with 200?

00:48:56.620 --> 00:48:56.770
Okay.

00:48:56.770 --> 00:48:59.400
I run that, and indeed,
there's a constraint there,

00:48:59.400 --> 00:49:02.400
but suppose that it's wrong, okay?

00:49:02.580 --> 00:49:06.380
But you can see these constraints,
and now this one looks kind of suspect.

00:49:06.470 --> 00:49:07.360
What's that all about?

00:49:07.490 --> 00:49:09.300
If, you know, clearly,
since I just did this,

00:49:09.300 --> 00:49:12.230
I know where it came from,
but if we didn't know where it came from,

00:49:12.680 --> 00:49:14.910
if I click this,

00:49:15.830 --> 00:49:16.460
We can see it.

00:49:16.730 --> 00:49:20.260
So what I would do is I'd go and I'd call
this method visualize constraints with

00:49:20.310 --> 00:49:21.460
the constraints affecting the layout.

00:49:21.630 --> 00:49:24.290
And I can map back and forth
between what I see in the UI and the

00:49:24.290 --> 00:49:26.300
actual objects by clicking on them.

00:49:26.440 --> 00:49:29.500
And so that would let me see like, oh,
yes, this doesn't look right.

00:49:29.570 --> 00:49:31.880
This is negatively
impacting my interface.

00:49:32.030 --> 00:49:35.740
So that's a constraint which is bad.

00:49:35.740 --> 00:49:39.500
So that's letting you map from
a view is in the wrong place to

00:49:39.500 --> 00:49:39.500
here's a constraint which is wrong.

00:49:40.040 --> 00:49:43.350
Okay,
that's all I want to show you about that.

00:49:43.460 --> 00:49:46.720
Debugging typically breaks
down into a number of phases.

00:49:46.900 --> 00:49:50.820
So the first phase is given a bad layout,
you need to find a view

00:49:50.820 --> 00:49:51.940
whose frame is wrong.

00:49:52.010 --> 00:49:56.400
Okay, so something looks wrong to here's
a view that's in the wrong spot.

00:49:56.540 --> 00:49:57.940
Sometimes that's really easy, right?

00:49:57.970 --> 00:49:59.480
When we were just looking at this,
we knew these buttons

00:49:59.480 --> 00:50:00.400
were in the wrong spot.

00:50:00.450 --> 00:50:02.640
However, if it's not easy,
there are a couple of debugging

00:50:02.640 --> 00:50:03.650
things you can use to help.

00:50:03.840 --> 00:50:07.420
First, if you pass the arguments
NSShowAllViewsYes,

00:50:07.510 --> 00:50:12.040
that will make a frame draw
around every single view,

00:50:12.040 --> 00:50:15.120
which makes it easier to tell when
you have invisible views or deep

00:50:15.220 --> 00:50:17.240
containment which one's actually wrong.

00:50:17.290 --> 00:50:19.500
And you can also use
this method on NSView.

00:50:19.620 --> 00:50:21.280
Both of these have been
here for a long time.

00:50:21.330 --> 00:50:23.540
Underscore subtree description.

00:50:23.580 --> 00:50:25.780
If you use this in the debugger,
this will print out a string

00:50:25.780 --> 00:50:31.600
that gives you a nice,
concise way of seeing what all the

00:50:31.600 --> 00:50:33.480
frames are in a subtree hierarchy.

00:50:33.590 --> 00:50:34.690
Clearly, that's not API.

00:50:34.720 --> 00:50:36.690
It has an underscore,
but we do tell you about it.

00:50:36.700 --> 00:50:36.880
It's just we don't want you to get
caught up in the middle of the process.

00:50:36.880 --> 00:50:38.390
We don't want you to bake
it into your source code.

00:50:38.450 --> 00:50:39.940
We don't want you to ship it.

00:50:39.940 --> 00:50:42.480
It's been in the release
notes quite a few times.

00:50:42.500 --> 00:50:45.140
OK,
so now if you've gotten as far as here's

00:50:45.140 --> 00:50:49.120
a view which is in the wrong place,
the next thing you're going to need

00:50:49.140 --> 00:50:50.880
is here's a constraint which is wrong.

00:50:50.880 --> 00:50:52.520
OK, and this I already showed you.

00:50:52.610 --> 00:50:54.090
So we have two bits to help you do that.

00:50:54.230 --> 00:50:56.880
First, there's constraints affecting
layout for orientation.

00:50:56.910 --> 00:50:59.880
That's going to give you sort
of candidate constraints,

00:50:59.890 --> 00:51:01.480
one of which might be wrong.

00:51:01.500 --> 00:51:06.120
And then we have this visualization UI,
which can let you help understand what

00:51:06.190 --> 00:51:09.540
those candidates are and figure out
which one of them is actually incorrect.

00:51:11.100 --> 00:51:14.100
Now the last thing you need to do is once
you have a bad constraint on your hands,

00:51:14.100 --> 00:51:16.360
you need to figure out some
code which is incorrect.

00:51:16.560 --> 00:51:18.870
And we,
I sort of showed you that over there,

00:51:18.990 --> 00:51:20.840
but it was rather,
in the case I showed you,

00:51:20.840 --> 00:51:21.580
it was really easy.

00:51:21.810 --> 00:51:23.540
It was like, oh,
I just typed the wrong thing,

00:51:23.540 --> 00:51:24.760
I know where that came from.

00:51:24.960 --> 00:51:26.170
But what if it's not easy?

00:51:26.490 --> 00:51:26.690
You know?

00:51:26.950 --> 00:51:29.250
What if you've been calling
set constant a bunch of times,

00:51:29.250 --> 00:51:30.920
or like, you click on this thing
in the UI and it's like,

00:51:31.010 --> 00:51:33.400
yeah, that constraint's wrong,
but I have no idea where it came from.

00:51:33.500 --> 00:51:36.420
Okay, so for that,
what we have is we have support

00:51:36.420 --> 00:51:41.560
instruments that looks really quite a
bit like zombies or like leaks debugging.

00:51:41.560 --> 00:51:44.620
What it does is if you run,
if you start instruments and

00:51:44.620 --> 00:51:47.950
you see there's a new basic
template called Cocoa Layout,

00:51:47.960 --> 00:51:51.440
and what it'll do is it records
all of the interesting events in

00:51:51.560 --> 00:51:53.080
the lifecycle of a constraint.

00:51:53.080 --> 00:51:55.980
So it'll record creation,
it'll record being added to a window,

00:51:55.980 --> 00:51:58.260
it'll record every time
the constant is modified,

00:51:58.260 --> 00:51:59.780
which is what we're seeing here.

00:51:59.960 --> 00:52:03.160
So what you should do is
start your application,

00:52:03.160 --> 00:52:03.160
and you're going to have
a little bit of a delay.

00:52:03.160 --> 00:52:05.140
So you can start your
app under instruments,

00:52:05.590 --> 00:52:07.560
reproduce the problem,
find a bad constraint,

00:52:07.560 --> 00:52:11.600
now filter down using that search
field on the right so you can see

00:52:11.710 --> 00:52:15.000
just the constraint or constraints
that are causing you trouble.

00:52:15.040 --> 00:52:18.630
And you can filter down based on any data
that's in the description because we log

00:52:18.790 --> 00:52:21.720
out the whole description to instruments,
so anything there.

00:52:21.770 --> 00:52:25.330
And once you've got that,
then when you select them,

00:52:25.330 --> 00:52:29.000
you can see the backtrace
for each line on the right,

00:52:29.020 --> 00:52:31.360
so that lets you see backtraces
for all the places where

00:52:31.750 --> 00:52:32.920
interesting things happen.

00:52:32.920 --> 00:52:36.740
So that lets you figure out where
it came from or where it went wrong,

00:52:36.740 --> 00:52:38.910
and that's the code you have to fix.

00:52:38.920 --> 00:52:41.010
So that's the debugging support.

00:52:41.450 --> 00:52:42.570
Hope it works.

00:52:42.840 --> 00:52:43.490
We think it works.

00:52:43.780 --> 00:52:46.040
But if it doesn't, let us know.

00:52:46.040 --> 00:52:46.510
All right.

00:52:46.520 --> 00:52:48.750
The last major topic I want
to talk about is transition.

00:52:48.760 --> 00:52:49.310
Okay?

00:52:49.470 --> 00:52:53.260
So since this is such a big thing,
how do we go from where we are,

00:52:53.260 --> 00:52:56.690
which is classic Cocoa Layout,
to where we want to be,

00:52:56.690 --> 00:52:59.470
which is the new Auto Layout type stuff?

00:52:59.680 --> 00:53:02.150
So, and for this,
the key observation is that everything,

00:53:02.170 --> 00:53:04.710
and Kevin kind of mentioned this before,
everything you can represent

00:53:04.750 --> 00:53:08.200
with an autoresiizing mask,
you can also represent using constraints.

00:53:08.230 --> 00:53:08.740
Okay?

00:53:08.810 --> 00:53:10.580
So in the case of something like
this where you've got things,

00:53:10.720 --> 00:53:13.140
you're saying strut,
strut on the top right,

00:53:13.200 --> 00:53:17.450
what that says is it should be, you know,
the space from my super

00:53:17.510 --> 00:53:21.300
view to me is fixed,
and also my width and height are fixed.

00:53:21.350 --> 00:53:24.540
And that can be done as constraints.

00:53:24.570 --> 00:53:27.510
And by default,
if you just make a view in code, it is.

00:53:27.900 --> 00:53:30.190
So there's a property,
translates autoresiizing

00:53:30.190 --> 00:53:31.390
mask into constraints.

00:53:31.470 --> 00:53:34.570
And if this property is true,
then we will take that

00:53:34.570 --> 00:53:38.290
autoresiizing mask,
and we will use it as constraints.

00:53:38.300 --> 00:53:40.410
And by use it,
I mean we will actually generate

00:53:40.520 --> 00:53:42.210
constraints that map to it.

00:53:42.500 --> 00:53:46.300
And then when you call set frame,
it does actually update

00:53:46.300 --> 00:53:48.450
these particular constraints.

00:53:48.660 --> 00:53:49.760
Okay?

00:53:49.820 --> 00:53:50.900
And this is a little bit confusing.

00:53:50.900 --> 00:53:52.180
It's because it's part of the transition.

00:53:52.200 --> 00:53:53.600
Transitions are always a little messy.

00:53:53.790 --> 00:53:59.050
It'll go away when you can
stop worrying about it.

00:53:59.310 --> 00:54:03.130
Uh, right, so, uh, however,
you usually wanna turn this off

00:54:03.540 --> 00:54:05.760
because the auto-sizing mask,
if it's active,

00:54:05.760 --> 00:54:08.510
is going to completely determine
the location of your view,

00:54:08.560 --> 00:54:10.480
and that's not really gonna be a
good thing for the most part because

00:54:10.550 --> 00:54:12.080
you actually wanna use the system,
right?

00:54:12.080 --> 00:54:14.300
You want to, uh,
any other constraint you could introduce

00:54:14.400 --> 00:54:15.910
at that point would be at best redundant.

00:54:15.910 --> 00:54:17.720
It's really not gonna help.

00:54:17.720 --> 00:54:21.180
Um, so, uh, so you wanna turn that off,
generally.

00:54:21.490 --> 00:54:23.530
This was the line
I skipped past in the find,

00:54:23.530 --> 00:54:25.770
in the demo I gave you, uh,
I was turning this off.

00:54:25.770 --> 00:54:28.040
Now, an interface builder,
interface builder will

00:54:28.040 --> 00:54:30.650
already set this property to,
to know for you, and most of you usually

00:54:30.730 --> 00:54:33.140
create an interface builder,
so you don't usually have to do anything.

00:54:33.200 --> 00:54:35.890
But at least for now,
if you're creating your views in code,

00:54:35.890 --> 00:54:38.480
you do have to turn off, uh,
this translation.

00:54:39.280 --> 00:54:44.060
Okay, now the one other aspect of the
transition I want to describe is the

00:54:44.060 --> 00:54:47.600
fact that the whole thing activates
lazily on a per-window basis.

00:54:47.760 --> 00:54:50.650
So I showed you that these are
the three phases that happen

00:54:50.730 --> 00:54:52.000
when a window needs to display.

00:54:52.000 --> 00:54:54.000
If you get update constraints,
layout and display.

00:54:54.000 --> 00:54:58.760
If nobody has added a
constraint to a window at all,

00:54:58.760 --> 00:55:03.120
then these two passes don't happen,
which is just exactly the same

00:55:03.120 --> 00:55:05.360
way as it was in Snow Leopard.

00:55:05.360 --> 00:55:07.580
And what that does is it
lets us pretty much guarantee

00:55:07.580 --> 00:55:09.470
complete binary compatibility.

00:55:09.720 --> 00:55:11.910
I shouldn't say complete,
I'm just tempting the gods.

00:55:11.990 --> 00:55:16.600
But anyway, it makes it very good
for binary compatibility.

00:55:16.900 --> 00:55:19.680
But what happens is that as soon as
anybody in a window has created a

00:55:19.680 --> 00:55:25.760
constraint and adds it to a view,
then this kicks in at the window level.

00:55:25.860 --> 00:55:28.720
It doesn't really matter because,
or shouldn't matter because of

00:55:28.730 --> 00:55:31.990
the translation business that,
you know, it doesn't really matter if the

00:55:31.990 --> 00:55:33.200
window is using layout or not.

00:55:33.310 --> 00:55:35.200
But for debugging purposes,
you certainly might want to know this.

00:55:35.200 --> 00:55:36.670
know this.

00:55:36.770 --> 00:55:39.900
Okay, that is everything I want
to talk about today,

00:55:39.900 --> 00:55:43.200
except that I want to look at the review
and hopefully try to bring this together,

00:55:43.200 --> 00:55:43.250
right?

00:55:43.360 --> 00:55:45.720
Because we've looked at a lot of stuff,
but I hope I convinced you

00:55:45.780 --> 00:55:47.140
that it's a pretty good thing.

00:55:47.140 --> 00:55:52.130
So, first we were claiming that we can
reduce the need for in-code layout,

00:55:52.210 --> 00:55:54.580
that we can use IB, that it goes further.

00:55:54.580 --> 00:55:55.820
And you see why this is true?

00:55:55.820 --> 00:55:57.820
As you're changing content
and things like that,

00:55:58.000 --> 00:55:59.000
it doesn't matter.

00:55:59.000 --> 00:56:00.920
You still want the same
constraints as you said in IB,

00:56:00.920 --> 00:56:01.550
so it's fine.

00:56:01.560 --> 00:56:03.090
You can use IB for a lot more problems.

00:56:04.160 --> 00:56:08.020
If you're using in-code layout,
first we have this visual format syntax,

00:56:08.070 --> 00:56:10.850
the ASCII art that lets
you really visualize it,

00:56:10.920 --> 00:56:12.200
and it's also just shorter.

00:56:12.200 --> 00:56:15.540
And so, get through that quicker.

00:56:15.650 --> 00:56:19.100
And also, you just have to do less,
because views themselves can take a

00:56:19.390 --> 00:56:22.140
little bit more responsibility for
their layout through these things like

00:56:22.200 --> 00:56:24.960
the baseline and the intrinsic content
size and the alignment rect stuff.

00:56:25.040 --> 00:56:27.880
The design flexibility.

00:56:27.880 --> 00:56:30.980
Again,
now if you want to update your artwork

00:56:30.980 --> 00:56:35.210
or update the way a control looks,
you can do that without updating

00:56:35.320 --> 00:56:36.550
all the places that use it.

00:56:36.660 --> 00:56:38.020
This is something you've
never had in Cocoa.

00:56:38.120 --> 00:56:42.140
If you want to localize,
obviously that's much better.

00:56:42.140 --> 00:56:45.590
All you have to do is
swap the strings usually,

00:56:45.620 --> 00:56:48.230
and that works through these same
mechanisms like intrinsic content size.

00:56:48.240 --> 00:56:50.340
And you do have more expressiveness.

00:56:50.340 --> 00:56:51.980
So, Kevin was showing this to you.

00:56:51.980 --> 00:56:56.780
There are some UIs that you can create
using priority and using inequalities

00:56:56.780 --> 00:57:00.740
that you would have a hard time,
and also just peer-to-peer relationships,

00:57:00.750 --> 00:57:03.090
that you would have a hard time creating.

00:57:03.200 --> 00:57:05.160
In classic Cocoa layout.

00:57:05.160 --> 00:57:08.100
But in some sense, you know,
these bullet points don't

00:57:08.100 --> 00:57:09.360
really quite capture it,
right?

00:57:09.360 --> 00:57:12.350
I mean, what we really think is that this
is just the right way to do it.

00:57:12.350 --> 00:57:15.460
This is the right layering
that will feel good the same

00:57:15.460 --> 00:57:18.060
way as when you first learned,
say, delegation and notification

00:57:18.210 --> 00:57:20.940
or model view controller,
that these things really cohere.

00:57:20.980 --> 00:57:25.020
And that they make a good way to program.

00:57:25.020 --> 00:57:26.280
And we think it is.

00:57:26.280 --> 00:57:29.840
And our goal has been to make the best
layout system that exists anywhere,

00:57:29.840 --> 00:57:31.160
and I hope we got there.

00:57:32.660 --> 00:57:34.660
So, you know, let us know.

00:57:34.660 --> 00:57:34.660
File bugs.

00:57:34.820 --> 00:57:38.660
So, for more information,
you can talk to Bill Dudney.

00:57:38.660 --> 00:57:40.070
He's our evangelist.

00:57:40.160 --> 00:57:42.160
You can look at the documentation.

00:57:42.160 --> 00:57:43.160
We do have documentation.

00:57:43.160 --> 00:57:44.660
There's a programming guide.

00:57:44.660 --> 00:57:45.680
I don't know if you've seen it yet.

00:57:45.920 --> 00:57:48.160
Actually, I'm not even sure if it
went public until just now.

00:57:48.160 --> 00:57:51.160
We also have release notes,
and we also have sample code.

00:57:51.160 --> 00:57:52.160
You definitely want to
look at the sample code.

00:57:52.160 --> 00:57:55.290
The best way to find this stuff
is to go to the Mac developer site

00:57:55.290 --> 00:57:57.160
and to search for auto-release.

00:57:57.160 --> 00:58:00.150
I mean, auto-layout.

00:58:00.160 --> 00:58:00.690
.

00:58:02.140 --> 00:58:04.100
Sorry.

00:58:04.160 --> 00:58:06.660
If you're interested in the
basics of how we're doing this,

00:58:06.740 --> 00:58:10.630
because I didn't really tell you how this
actually works in terms of the algorithm.

00:58:10.640 --> 00:58:14.900
The algorithm comes from a
terrific paper written by Drs.

00:58:14.900 --> 00:58:19.350
Alan Borning and Greg Badros out of
the University of Washington called

00:58:19.640 --> 00:58:23.680
the Cassowary Linear Arithmetic
Constraint Solving Algorithm.

00:58:23.810 --> 00:58:25.270
And please go take a look at that.

00:58:25.280 --> 00:58:26.700
It's very interesting.

00:58:26.700 --> 00:58:28.930
And really,
the reason this is on the slide because

00:58:28.930 --> 00:58:31.240
I wanted to have a chance to thank them.

00:58:31.290 --> 00:58:32.030
And thank you to Dr.

00:58:32.220 --> 00:58:33.000
Borning and Dr.

00:58:33.000 --> 00:58:33.820
Badros.

00:58:33.870 --> 00:58:37.310
And last, the developer forums and also
the Cocoa Dev mailing list as

00:58:37.590 --> 00:58:38.760
soon as this has gone public.

00:58:38.920 --> 00:58:41.640
And you can talk about it in public.

00:58:41.910 --> 00:58:43.630
You know,
it was really hard to bring this

00:58:43.740 --> 00:58:45.440
stuff down just to a presentation.

00:58:45.460 --> 00:58:47.020
I know you're going to have questions.

00:58:47.020 --> 00:58:48.480
You should have questions.

00:58:48.480 --> 00:58:50.860
And bring them, OK?

00:58:50.860 --> 00:58:52.000
I have mail rules set up.

00:58:52.130 --> 00:58:55.860
I'll see every single question that gets
sent to one of these forums that includes

00:58:55.860 --> 00:58:58.220
a keyword like NSLayoutConstraint.

00:58:58.230 --> 00:59:00.020
OK, related sessions.

00:59:00.100 --> 00:59:00.470
Kevin's going to talk again.

00:59:00.480 --> 00:59:02.480
Just right after lunch.

00:59:02.490 --> 00:59:05.100
And he's going to do a little bit more
AutoLayout stuff in Interface Builder.

00:59:05.200 --> 00:59:07.320
And that's really what
you want to orient around.

00:59:07.390 --> 00:59:10.160
So go see that.

00:59:10.520 --> 00:59:11.120
That is it.

00:59:11.260 --> 00:59:12.900
So thank you very much for coming.

00:59:12.910 --> 00:59:15.150
And I hope you like it.