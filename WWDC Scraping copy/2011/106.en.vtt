WEBVTT

00:00:10.840 --> 00:00:17.330
Hi, welcome to session 106 System-wide
Previews with Quick Look.

00:00:17.330 --> 00:00:20.360
My name is Philippe Champeaux and
I have been working on the iOS part of

00:00:20.360 --> 00:00:22.480
Quick Look for the last three years.

00:00:22.480 --> 00:00:24.500
I will be joined on
stage by Julien Robert,

00:00:24.520 --> 00:00:28.710
who is one of the two original
inventors of the Quick Look framework.

00:00:28.860 --> 00:00:32.950
We are very excited to be
here in San Francisco today.

00:00:32.950 --> 00:00:36.540
And I hope that our terrible
French accent won't be too much

00:00:36.540 --> 00:00:38.910
of a problem for you today.

00:00:39.670 --> 00:00:42.250
So what are we going to cover today?

00:00:42.310 --> 00:00:45.400
Well, first, I will talk a bit about
what Quick Look is,

00:00:45.530 --> 00:00:48.680
how it works,
and what you can use it for.

00:00:49.000 --> 00:00:52.620
Then we will show you how you can use
Quick Look to display previews inside

00:00:52.630 --> 00:00:55.680
your iOS and Mac OS X application.

00:00:56.240 --> 00:00:58.090
After that,
I will show you how you can ask

00:00:58.120 --> 00:01:01.890
Quick Look for thumbnails for
all your documents and files.

00:01:02.170 --> 00:01:04.710
And finally,
Julien will show you how you can be part

00:01:04.740 --> 00:01:09.770
of the Quick Look process by providing
a generator for your own document types.

00:01:10.720 --> 00:01:13.450
So, what is Quick Look?

00:01:13.480 --> 00:01:15.720
Well,
the goal of the Quick Look framework

00:01:15.780 --> 00:01:19.010
is to display thumbnails
on previews of documents.

00:01:19.200 --> 00:01:22.080
By default,
we support all the basic document types:

00:01:22.120 --> 00:01:28.400
images, PDF, various text files,
QuickTime movies, audio files.

00:01:28.400 --> 00:01:32.790
We also support out-of-the-box
iWork and Office documents.

00:01:33.390 --> 00:01:36.600
In Mac OS X, Quick Look can also display
your documents if you

00:01:36.630 --> 00:01:38.140
provide a generator for them.

00:01:38.140 --> 00:01:43.600
Let me give you a few examples of places
where you can see Quick Look in action.

00:01:43.830 --> 00:01:45.860
First, you can see it in your mail.

00:01:45.910 --> 00:01:47.900
When you receive an email
with some attachments,

00:01:47.900 --> 00:01:51.100
you can preview the attachment
right inside the mail application.

00:01:51.220 --> 00:01:55.850
This is true both in Mac OS X and in iOS.

00:01:57.190 --> 00:01:59.080
Another very good example is the Finder.

00:01:59.110 --> 00:02:02.470
In this image,
you can see icons in the bottom window.

00:02:02.510 --> 00:02:06.280
You can see flat thumbnails in the
Cover Flow view on the right window.

00:02:06.390 --> 00:02:09.240
And you can see, of course,
the preview panel that you get

00:02:09.250 --> 00:02:10.790
when you press the spacebar.

00:02:12.330 --> 00:02:14.860
In iOS,
we have integrated Quick Look inside

00:02:14.860 --> 00:02:16.380
the Safari application.

00:02:16.420 --> 00:02:20.300
So if you are on the Internet browsing
to a Word document or a Pages document,

00:02:20.300 --> 00:02:21.460
you don't have to save it.

00:02:21.460 --> 00:02:22.410
You can preview it.

00:02:22.500 --> 00:02:25.480
You can view it directly inside Safari.

00:02:26.560 --> 00:02:29.420
In Mac OS X Lion,
we have also integrated Quick Look inside

00:02:29.470 --> 00:02:31.880
the dock on the Spotlight menu.

00:02:31.880 --> 00:02:34.930
So when you search for something,
if you have several matches,

00:02:34.930 --> 00:02:36.740
you can preview the matches
before opening them.

00:02:36.780 --> 00:02:38.650
It's very convenient.

00:02:39.940 --> 00:02:44.750
Quick Look is a public framework
available in your applications.

00:02:44.780 --> 00:02:48.680
This is a small Cookbook application
that we are going to use as an

00:02:48.760 --> 00:02:52.700
example during this presentation
to show you how you can integrate

00:02:52.700 --> 00:02:54.830
Quick Look inside your own applications.

00:02:54.960 --> 00:02:56.660
So how does it work?

00:02:56.720 --> 00:02:59.690
Well, Quick Look is divided
into two functional parts.

00:02:59.780 --> 00:03:02.900
First, we have the producer,
which reads the file.

00:03:02.900 --> 00:03:05.790
And then we have the consumer,
which displays the content

00:03:05.790 --> 00:03:07.440
inside your application.

00:03:08.490 --> 00:03:12.320
The goal of the producer is to translate
complex document types into something

00:03:12.320 --> 00:03:14.620
that Quick Look can understand.

00:03:14.700 --> 00:03:19.590
So it can be HTML, PDF, text,
images and movies.

00:03:20.010 --> 00:03:22.760
It uses a plug-in architecture,
so when the user wants

00:03:22.760 --> 00:03:26.840
to preview a document,
Quick Look will look for the associated

00:03:26.840 --> 00:03:29.530
plug-in and load it on demand.

00:03:30.380 --> 00:03:32.800
In Mac OS X,
we provide an Xcode template so

00:03:32.800 --> 00:03:36.500
that you can write a generator
for your own document types.

00:03:38.530 --> 00:03:42.630
The goal of the consumer is to display
the content inside your application.

00:03:42.630 --> 00:03:44.830
There are two kinds of content.

00:03:44.960 --> 00:03:47.920
First, we have rich content,
which we call previews,

00:03:48.000 --> 00:03:52.120
which are displayed in the preview panel
and the preview view in Mac OS X and

00:03:52.120 --> 00:03:54.910
in the preview controller in iOS.

00:03:55.280 --> 00:03:57.940
In Mac OS X,
we also have a second type of content,

00:03:57.940 --> 00:03:59.150
which are thumbnails.

00:03:59.160 --> 00:04:03.830
Thumbnails are just static images which
represent the content of the document.

00:04:05.710 --> 00:04:08.980
To summarize,
in Mac OS X we support previews,

00:04:08.980 --> 00:04:12.620
thumbnails and we have this
public plugin architecture.

00:04:12.620 --> 00:04:15.590
In iOS, for now,
we only support previews.

00:04:15.600 --> 00:04:18.820
We don't really need thumbnails
anyway since there is very

00:04:18.870 --> 00:04:20.890
little file manipulation in iOS.

00:04:22.160 --> 00:04:25.830
So, now that you know what Quick Look is,
we will show you how you can

00:04:25.830 --> 00:04:27.370
be a consumer for Quick Look.

00:04:27.480 --> 00:04:31.100
How you can use Quick Look to display
previews inside your application.

00:04:31.140 --> 00:04:33.980
And for that,
Julien will come on stage and show you

00:04:33.980 --> 00:04:37.100
how you can use Quick Look in Mac OS X.

00:04:37.100 --> 00:04:40.100
And I will come back after that
to show you how it works in iOS.

00:04:40.100 --> 00:04:43.900
If you are only interested in iOS,
you should still pay attention to what

00:04:43.900 --> 00:04:48.100
Julien is going to say because a lot of
stuff is common and I won't repeat it.

00:04:48.100 --> 00:04:50.100
So please welcome Julien.

00:04:54.200 --> 00:04:55.170
Thank you Philippe.

00:04:55.220 --> 00:05:03.200
So we'll see how to display previews on
Mac OS X and more specifically on Lion.

00:05:03.200 --> 00:05:08.170
So on Lion you have two choices
to display previews to the user.

00:05:08.340 --> 00:05:14.200
First one is to display using a
panel that we call a preview panel.

00:05:14.200 --> 00:05:17.480
This is a regular
subclass of an NS panel.

00:05:17.480 --> 00:05:21.200
And there is one shared
panel per application.

00:05:21.330 --> 00:05:24.910
So the policy of the panel
is to always show the current

00:05:24.990 --> 00:05:27.200
selection in the key window.

00:05:27.200 --> 00:05:30.620
So if this is changing,
the preview panel needs

00:05:30.630 --> 00:05:32.590
to be updated accordingly.

00:05:32.930 --> 00:05:38.270
But you may also want to use a
view that we call the Preview View.

00:05:38.520 --> 00:05:43.840
And it's a regular subclass of NFVue,
so obviously you can have many of

00:05:43.840 --> 00:05:46.780
these views in your application.

00:05:46.920 --> 00:05:50.740
And as opposed to the Preview panel,
you are directly in control of

00:05:50.750 --> 00:05:53.550
what's previewed in the view.

00:05:54.880 --> 00:05:58.100
But let's first talk
about the Preview Panel.

00:05:58.120 --> 00:06:01.050
In Lion, as you may have seen
in developer previews,

00:06:01.050 --> 00:06:04.940
we have a new user interface
for the Preview Panel.

00:06:05.040 --> 00:06:10.540
And I'd like to point a few new
features of this new interface.

00:06:10.540 --> 00:06:13.210
So first,
when your application is displaying

00:06:13.210 --> 00:06:18.120
the Preview Panel in your application,
and when your application

00:06:18.230 --> 00:06:20.900
goes in the background,
the Preview Panel will stay

00:06:20.900 --> 00:06:24.420
visible and will not hide anymore.

00:06:24.820 --> 00:06:30.300
We also added some swipe gestures so that
the user can easily navigate through a

00:06:30.300 --> 00:06:33.710
multi-selection in the preview panel.

00:06:33.710 --> 00:06:38.310
And this works both in the
panel and in full screen.

00:06:39.080 --> 00:06:43.250
And as you can see on the top
right of the preview panel,

00:06:43.250 --> 00:06:49.490
there is a new open button that makes
it very easy for the user to open

00:06:49.490 --> 00:06:53.060
the document inside the application.

00:06:54.140 --> 00:06:58.990
And finally, the previews are not
done in a remote process,

00:06:58.990 --> 00:07:02.290
meaning that if something
goes wrong with the preview,

00:07:02.290 --> 00:07:04.880
your application will be unaffected.

00:07:04.880 --> 00:07:10.990
So this is good for security
and for stability reasons.

00:07:11.960 --> 00:07:14.660
So let's get technical now.

00:07:14.660 --> 00:07:16.780
So to use a preview panel,
the first thing you want to

00:07:16.780 --> 00:07:22.330
do is link against Quartz and
import the Quartz framework.

00:07:22.380 --> 00:07:27.570
And you use a shared preview
panel to get this shared instance.

00:07:28.740 --> 00:07:31.240
Then you want to display the panel.

00:07:31.240 --> 00:07:34.040
Since it is a regular
subclass of NSPanel,

00:07:34.040 --> 00:07:40.040
you just use NSWindow
APIs to order it in and out.

00:07:40.040 --> 00:07:43.710
And there are also some
methods to make it full screen.

00:07:43.810 --> 00:07:47.240
The last two methods work whether
the preview panel is already

00:07:47.240 --> 00:07:50.440
visible or even if it's not.

00:07:50.530 --> 00:07:55.470
And if it's not, it will go directly into
a full screen slideshow.

00:07:57.230 --> 00:08:00.840
So as I said,
the preview panel is always displaying

00:08:00.910 --> 00:08:04.100
the current selection in the Key Window.

00:08:04.260 --> 00:08:08.730
So for example,
if the Key Window is changing, like that,

00:08:08.730 --> 00:08:13.180
you can see that the panel
is updated to reflect the new

00:08:13.180 --> 00:08:15.950
selection in the Key Window.

00:08:16.060 --> 00:08:18.410
So how does this work?

00:08:19.800 --> 00:08:24.710
Quick Look is listening for
changes in the responder chain.

00:08:24.750 --> 00:08:28.740
If something is actually changing,
it will try to find a

00:08:28.740 --> 00:08:30.690
controller for the panel.

00:08:30.710 --> 00:08:35.220
To do that,
it will walk in the responder chain

00:08:35.280 --> 00:08:38.920
and send this method to each object.

00:08:38.970 --> 00:08:43.070
The first one that will reply
with "yes" will be elected as

00:08:43.160 --> 00:08:45.610
the controller for the panel.

00:08:47.000 --> 00:08:52.660
So this controller is sent this method
to notify it that it will really

00:08:52.670 --> 00:08:55.700
begin to be controlling the panel.

00:08:55.740 --> 00:08:59.700
And that's where setup should
happen on the preview panel.

00:08:59.750 --> 00:09:04.800
And when the ownership of the preview
panel is given to another object,

00:09:04.850 --> 00:09:11.320
the previews controller is
notified using this method.

00:09:12.320 --> 00:09:17.920
So the important thing is to not assume
that you can do whatever you want

00:09:17.990 --> 00:09:20.440
with the preview panel at any time.

00:09:20.550 --> 00:09:25.340
And you are the owner only
after receiving the BEGIN method

00:09:25.340 --> 00:09:27.490
and before the END method.

00:09:28.490 --> 00:09:30.700
So, now that you are the controller
of the preview panel,

00:09:30.700 --> 00:09:34.350
you want to display content in it,
obviously.

00:09:34.690 --> 00:09:39.270
So we have very simple
data source methods.

00:09:39.270 --> 00:09:44.370
So you first return the number of
items you want to display in the panel.

00:09:44.370 --> 00:09:50.850
And then you will be called for
each index to return the item.

00:09:51.610 --> 00:09:55.600
As you can see,
this is what we call a preview item.

00:09:55.650 --> 00:10:00.350
If this is your existing data model
and you have custom objects in your

00:10:00.350 --> 00:10:05.390
application to represent files,
you can directly give them to

00:10:05.390 --> 00:10:10.300
Quick Look and to the preview panel,
providing that they implement

00:10:10.300 --> 00:10:13.190
the actual preview item protocol.

00:10:13.310 --> 00:10:15.790
So what is this protocol?

00:10:16.400 --> 00:10:18.400
It's very simple.

00:10:18.400 --> 00:10:22.580
Basically,
you just have to return the URL that

00:10:22.670 --> 00:10:25.380
points to the file you want to preview.

00:10:25.490 --> 00:10:29.690
And you may also be interested
to return a custom title to

00:10:29.690 --> 00:10:32.270
display in the preview panel.

00:10:32.700 --> 00:10:36.860
As a side note,
NSURL already implements this protocol,

00:10:36.860 --> 00:10:42.090
so you can directly give URLs to the
preview panel if that fits your needs.

00:10:42.110 --> 00:10:46.500
To open and close the panel,
we have standard shortcuts.

00:10:46.700 --> 00:10:48.830
They are Command Y and Spacebar.

00:10:48.960 --> 00:10:52.410
You can use either of those or both.

00:10:53.440 --> 00:10:56.640
Another interesting thing is
that when the preview panel

00:10:56.700 --> 00:11:00.990
is open in your application,
it's frontmost.

00:11:00.990 --> 00:11:04.660
But you may want the user
to still be able to interact

00:11:04.660 --> 00:11:07.060
with the view that is below.

00:11:07.160 --> 00:11:11.510
So in that case,
you would implement this delegate method.

00:11:11.510 --> 00:11:16.370
And if your view handles the event
in place of the preview panel,

00:11:16.370 --> 00:11:17.610
you return yes.

00:11:17.780 --> 00:11:22.200
So that the panel does
not undo the event again.

00:11:22.250 --> 00:11:27.000
So the typical use case is, for example,
if you have a table view and you

00:11:27.000 --> 00:11:31.480
want the user to be able to change
the selection with the arrow keys.

00:11:31.510 --> 00:11:34.080
So you would use this technique.

00:11:34.400 --> 00:11:45.200
[Transcript missing]

00:11:45.700 --> 00:11:50.440
So to do that, we have delegate methods
that you should implement.

00:11:50.530 --> 00:11:54.850
The first one will provide
a nice zoom effect from the

00:11:54.850 --> 00:11:57.630
item to the preview panel.

00:11:57.750 --> 00:12:01.940
And the second one,
if you return an image,

00:12:01.960 --> 00:12:06.230
this will make a crossfade from
this image to the preview panel to

00:12:06.230 --> 00:12:09.780
really make a beautiful transition.

00:12:09.810 --> 00:12:11.060
So there is a content track.

00:12:11.170 --> 00:12:13.760
So what is this content track?

00:12:14.170 --> 00:12:20.580
If this is the transition image
you return in this method,

00:12:20.660 --> 00:12:24.640
the content tracks correspond
to this area in the image.

00:12:24.680 --> 00:12:31.600
So this is really the content of
the preview that we will match to

00:12:31.600 --> 00:12:35.620
the content of the preview panel.

00:12:36.820 --> 00:12:40.560
So that's all for the preview panel and
let's talk about the preview view now.

00:12:40.560 --> 00:12:46.300
So as I say,
the preview view is just an S-view,

00:12:46.340 --> 00:12:48.840
so you can unlock it like any other view.

00:12:48.840 --> 00:12:52.440
But in Lion,
we've added an optional style

00:12:52.440 --> 00:12:56.380
parameter that lets you customize
the look of the preview view.

00:12:56.380 --> 00:12:59.190
So we currently have two styles.

00:12:59.220 --> 00:13:04.250
The first style is the default
style and we display previews

00:13:04.250 --> 00:13:06.420
with regular controls.

00:13:06.850 --> 00:13:08.800
As you may have seen in Snow Leopard.

00:13:08.800 --> 00:13:13.200
So in the example,
you can see there is a time slider

00:13:13.200 --> 00:13:15.640
at the bottom of the preview.

00:13:15.810 --> 00:13:21.800
This is more suited for full
previews with pretty large size.

00:13:21.910 --> 00:13:26.110
But you may be interested with the
new style that we introduced in Lion,

00:13:26.110 --> 00:13:29.200
which is what we call a compact style.

00:13:29.200 --> 00:13:33.610
It's more suited for smaller
previews and things like inspectors,

00:13:33.620 --> 00:13:37.530
but you may just prefer the look,
so you can use that anyway.

00:13:37.580 --> 00:13:40.460
So in the example,
you can see that the movie

00:13:40.550 --> 00:13:42.160
has rollover controls.

00:13:42.340 --> 00:13:45.660
To provide content in the preview view,
it's much simpler than the

00:13:45.670 --> 00:13:50.290
preview panel because there is a
property that you directly set.

00:13:50.300 --> 00:13:54.700
Once you've done that,
the preview view will load the preview

00:13:54.720 --> 00:13:57.300
in the background asynchronously.

00:13:57.300 --> 00:14:00.410
But the thing you don't want
to do is to assume that as

00:14:00.410 --> 00:14:03.300
soon as you set this property,
the preview is ready.

00:14:03.300 --> 00:14:07.300
Because it may take time
to generate the preview.

00:14:09.300 --> 00:14:13.890
And if the file that you are
previewing is modified while the

00:14:13.990 --> 00:14:18.810
preview view is showing its preview,
you can ask the preview view to

00:14:18.870 --> 00:14:21.460
reload by calling this method.

00:14:23.580 --> 00:14:28.580
One important aspect of the preview
is to correctly manage its lifecycle.

00:14:28.580 --> 00:14:33.300
So by default,
the preview view will be discarded

00:14:33.500 --> 00:14:37.240
when the window containing
it is closed or when it's

00:14:37.350 --> 00:14:39.100
removed from the view hierarchy.

00:14:39.100 --> 00:14:42.820
So this is good for very simple cases.

00:14:42.820 --> 00:14:48.030
But if your application manipulates
view in a bit more complicated way,

00:14:48.030 --> 00:14:51.780
or if you want to reopen the
window containing the preview,

00:14:52.680 --> 00:14:56.200
you should use manual mode instead.

00:14:57.290 --> 00:15:00.650
And there, if you do that,
you are responsible to discard

00:15:00.650 --> 00:15:05.440
the preview at the correct moment
by sending the close method.

00:15:05.550 --> 00:15:09.590
So don't forget to do
that because if you don't,

00:15:09.590 --> 00:15:14.870
some resources will not be allocated,
so you will see memory

00:15:14.870 --> 00:15:18.080
growth in your application,
which is bad.

00:15:18.100 --> 00:15:20.830
And in Lion,
we've introduced a new feature

00:15:20.830 --> 00:15:22.960
that we call seamless opening.

00:15:23.090 --> 00:15:27.540
So you may also have seen that
in the developer previews,

00:15:27.610 --> 00:15:28.800
but just to show you.

00:15:28.860 --> 00:15:34.190
So this is an icon in Finder,
and when the user double clicks on it,

00:15:34.770 --> 00:15:39.590
You see that it zooms from the
icon to the document in preview,

00:15:39.590 --> 00:15:42.650
like it zooms from the
icon to the preview panel.

00:15:42.720 --> 00:15:46.210
So it's exactly the same animation.

00:15:47.630 --> 00:15:55.600
So seamless opening is to get a smooth
transition from the icon or a preview

00:15:55.600 --> 00:15:59.100
to the full document in the application.

00:15:59.100 --> 00:16:02.860
And it integrates very well
with Quick Look and especially

00:16:02.920 --> 00:16:07.030
the new open button that there
is now in the preview panel.

00:16:07.050 --> 00:16:10.900
And the good thing about this
feature is that you can get it

00:16:10.900 --> 00:16:14.120
for free because there is no API.

00:16:14.140 --> 00:16:19.890
But there are a few conditions
that your application has to meet.

00:16:19.980 --> 00:16:26.560
First, your application needs to have a
correct usage of NS Document APIs.

00:16:26.640 --> 00:16:30.940
So there is an AppKit Lab this afternoon
if you want to check with them if

00:16:30.940 --> 00:16:33.350
you are doing the correct things.

00:16:34.320 --> 00:16:38.940
The second condition is that your
application needs to launch and

00:16:38.940 --> 00:16:41.690
open the document quickly enough.

00:16:41.700 --> 00:16:46.700
So quickly enough being
less than a second.

00:16:46.700 --> 00:16:52.260
So I'd like to make a little demo
and show you how easy it is to adopt

00:16:52.260 --> 00:16:54.700
Quick Look in a sample application.

00:16:54.700 --> 00:16:59.650
So this is our sample cookbook
application that I will

00:16:59.650 --> 00:17:01.750
briefly show you first.

00:17:02.500 --> 00:17:07.790
This is a list of recipes and
then when we click on this button,

00:17:07.830 --> 00:17:13.340
we would like to show the preview
panel with images and other stuff

00:17:13.400 --> 00:17:16.150
that correspond to the recipe.

00:17:16.360 --> 00:17:22.920
The second thing we want to do is when
we actually start making the recipe,

00:17:22.980 --> 00:17:30.500
we would like to have an illustration in
this area to make the step more obvious.

00:17:30.800 --> 00:17:34.040
To do that, we will use the preview view.

00:17:34.040 --> 00:17:38.280
So let's first add support
for the preview panel.

00:17:40.950 --> 00:17:45.760
So when we click on the top
right image in the application,

00:17:45.760 --> 00:17:48.300
this method is called.

00:17:48.320 --> 00:17:52.480
So the first thing we want to do
is to order in the preview panel.

00:17:52.610 --> 00:17:57.290
So we get the shared instance
and order it in if it's not

00:17:57.290 --> 00:18:00.120
visible or out if it is already.

00:18:00.860 --> 00:18:04.440
And the preview panel
works with a controller.

00:18:04.440 --> 00:18:07.730
So the next thing we will do is to add

00:18:07.960 --> 00:18:13.400
Method to set ourselves as a
controller for the preview panel.

00:18:13.820 --> 00:18:19.370
So we accept to be the controller
and when we actually begin to be it,

00:18:19.430 --> 00:18:23.490
we set ourselves as data
source and delegate.

00:18:24.500 --> 00:18:30.230
So we need to implement the data
source and delegate protocol.

00:18:30.230 --> 00:18:32.970
So let's just declare that we do.

00:18:34.510 --> 00:18:39.650
And then we will implement
the data source methods.

00:18:39.730 --> 00:18:43.000
So we have here an array and we
just return the number of items

00:18:43.000 --> 00:18:48.420
in this array and return the
object as the index in the array.

00:18:48.420 --> 00:18:49.760
Pretty simple.

00:18:49.780 --> 00:18:52.280
And the last thing we want to do

00:18:52.540 --> 00:18:58.340
Because Quick Look accepts
objects that implement the

00:18:58.350 --> 00:19:02.160
actual preview item protocol,
we will implement this

00:19:02.160 --> 00:19:04.390
protocol in our objects.

00:19:04.450 --> 00:19:08.390
In this case, the objects are steps.

00:19:09.200 --> 00:19:14.500
[Transcript missing]

00:19:14.970 --> 00:19:22.280
For the URL, we just return the location
of the file on the disk.

00:19:22.320 --> 00:19:28.530
For the title,
we return the name of the recipe

00:19:28.610 --> 00:19:34.480
instead of the name of an image.

00:19:35.060 --> 00:19:41.660
The interesting thing is that this object
is shared with the iOS demo application

00:19:41.660 --> 00:19:43.900
that Philippe will show you later.

00:19:44.000 --> 00:19:47.950
So since we already
implemented this protocol,

00:19:47.950 --> 00:19:49.900
he won't have to do that.

00:19:49.900 --> 00:19:54.030
So let's run now and see how it goes.

00:19:54.580 --> 00:20:06.160
So when I click here, I get my medias and
I can swipe between them.

00:20:06.160 --> 00:20:09.150
So this is a new Lion feature.

00:20:09.860 --> 00:20:11.440
So it's working okay.

00:20:11.440 --> 00:20:16.190
It's just missing the
zoom as you may have seen.

00:20:17.410 --> 00:20:20.230
So we will implement that.

00:20:20.230 --> 00:20:26.380
And to do that, we will add the delegate
methods like that.

00:20:27.220 --> 00:20:31.330
So we get the frame of our image button.

00:20:31.340 --> 00:20:37.330
Then it's just some calls to
adjust with the ratio of the image.

00:20:37.330 --> 00:20:41.690
And we convert this frame to
screen coordinates and return that.

00:20:42.550 --> 00:20:45.990
But we want also to
use a transition image.

00:20:45.990 --> 00:20:50.020
So we just return the image
in the button to have a fade

00:20:50.340 --> 00:20:52.600
from this image to the panel.

00:20:52.630 --> 00:20:55.360
And now if we try again.

00:20:57.570 --> 00:21:02.280
So we have a much nicer transition
that really highlights that

00:21:02.280 --> 00:21:05.170
the preview is from this item.

00:21:06.430 --> 00:21:10.130
So we are done with the preview
panel implementation and now we will

00:21:10.130 --> 00:21:13.210
do the preview view implementation.

00:21:14.560 --> 00:21:20.570
So the first thing we want to do
with the preview is to create it,

00:21:20.570 --> 00:21:20.570
of course.

00:21:21.900 --> 00:21:25.730
For the demo,
we will use the new style in Lion,

00:21:25.750 --> 00:21:30.530
that is Compact Style,
so we will have rollover controls.

00:21:31.590 --> 00:21:35.650
So once it's created and
added to the view hierarchy,

00:21:35.790 --> 00:21:39.620
we want to set the content
of the preview view.

00:21:39.620 --> 00:21:42.760
So to do that,
we will use bindings and bind the preview

00:21:42.760 --> 00:21:49.540
item property of the preview view to
the selected step in our table view.

00:21:49.540 --> 00:21:53.260
And we don't forget to unbind it.

00:21:53.260 --> 00:21:57.220
So that should be enough
to have our steps.

00:21:57.220 --> 00:21:57.220
Let's see.

00:21:59.280 --> 00:22:02.880
So it's working correctly,
but there are still a few

00:22:02.880 --> 00:22:04.580
things that we could improve.

00:22:04.600 --> 00:22:08.460
Well first,
the movies do not play automatically.

00:22:08.550 --> 00:22:15.420
So since the controls are on rollover,
we can't see easily that it's a movie.

00:22:15.510 --> 00:22:18.300
So we want them to start automatically.

00:22:18.310 --> 00:22:22.630
And the second thing, so if we change to
another recipe and back,

00:22:22.630 --> 00:22:29.890
it's crashing because as you can see,
it says that we try to set a preview item

00:22:29.890 --> 00:22:32.470
on the preview that's already closed.

00:22:32.560 --> 00:22:39.000
So this is the typical thing that
happens when you are using the

00:22:39.060 --> 00:22:44.300
automatic mode of the preview lifecycle.

00:22:44.810 --> 00:22:50.990
So this is a good example of
using manual mode because when

00:22:50.990 --> 00:22:54.990
we switch to another recipe,
the view is removed from the

00:22:54.990 --> 00:23:00.500
view hierarchy and it's added
again later so it's not working

00:23:00.500 --> 00:23:03.190
because it's killed automatically.

00:23:03.950 --> 00:23:06.030
So let's use that.

00:23:06.160 --> 00:23:09.710
And don't forget to close
the preview when we are done.

00:23:09.810 --> 00:23:13.390
So in this case,
that's when the application terminates.

00:23:14.230 --> 00:23:19.530
Let's also autoplay the
movies and run again.

00:23:20.640 --> 00:23:27.890
So start cooking and now you can see
that the movies play automatically.

00:23:28.790 --> 00:23:32.680
And that if I switch to
another recipe and back,

00:23:32.780 --> 00:23:34.390
it's still working.

00:23:35.340 --> 00:23:41.300
So this concludes our implementation
of Quick Look in Mac OS X.

00:23:41.330 --> 00:23:52.300
And I will just sum it up what you need
to do to implement Preview Panel Support.

00:23:52.300 --> 00:23:56.730
So first you need to import a
link against the Quartz framework.

00:23:57.250 --> 00:24:01.100
You need to add calls to open
and close the preview panel.

00:24:01.160 --> 00:24:06.400
Then you need to implement the controller
methods to get your object to be

00:24:06.400 --> 00:24:09.340
the controller of the preview panel.

00:24:09.410 --> 00:24:12.750
And of course implement
the data source methods.

00:24:13.220 --> 00:24:15.720
Once you've done that,
you will want to make

00:24:15.720 --> 00:24:21.010
sure that the selection,
when the selection is changing,

00:24:21.130 --> 00:24:25.380
you correctly update the Preview
Panel by sending reload data.

00:24:26.500 --> 00:24:30.900
Finally,
you want to have the zoom animation,

00:24:30.900 --> 00:24:36.340
so you will implement the two
delegate methods that we just showed.

00:24:36.340 --> 00:24:38.970
And that's all what you need.

00:24:38.980 --> 00:24:45.720
And to talk about previewing in iOS,
I will call back Philippe on stage.

00:24:45.910 --> 00:24:48.880
So, now that you have seen
how it works in Mac OS X,

00:24:48.960 --> 00:24:51.140
let's compare this to iOS.

00:24:51.170 --> 00:24:55.470
Well, like I said, in iOS,
it works exactly the same as

00:24:55.470 --> 00:24:57.890
in Mac OS X for the most part.

00:24:57.940 --> 00:25:01.520
And in particular, the model and the data
source are the same.

00:25:01.600 --> 00:25:05.480
What changes is the way
you present the preview.

00:25:06.080 --> 00:25:07.940
Fortunately, it is a bit easier.

00:25:08.000 --> 00:25:09.760
It is easier for two reasons.

00:25:09.760 --> 00:25:14.000
First, in iOS,
every application is full screen.

00:25:14.000 --> 00:25:16.300
So you only see one
application at a time.

00:25:16.300 --> 00:25:20.090
This means that we don't need
on iOS the Shared Preview

00:25:20.090 --> 00:25:22.380
Panel that we have in Mac OS X.

00:25:22.770 --> 00:25:27.000
The second reason is that we have those
very nice UI View Controllers in iOS.

00:25:27.090 --> 00:25:29.940
So they are very easy to
use and very powerful.

00:25:30.020 --> 00:25:33.480
So we chose to make the Preview
Panel a subclass of UI View Controller.

00:25:33.480 --> 00:25:36.070
We named it QL Preview Controller.

00:25:36.440 --> 00:25:39.660
So this means that since it is
a standard UI view controller,

00:25:39.660 --> 00:25:43.040
you will use the methods that you
already know to present them on screen.

00:25:43.110 --> 00:25:45.390
It's a very standard API.

00:25:45.420 --> 00:25:48.830
And in the end,
it will integrate perfectly

00:25:48.830 --> 00:25:51.050
in all the iOS workflows.

00:25:52.450 --> 00:25:57.680
The Preview Controller supports all the
same basic document types as in Mac OS X.

00:25:57.680 --> 00:26:01.400
It also has an open button like in Lion.

00:26:01.400 --> 00:26:03.380
As a bonus, we also support printing.

00:26:03.390 --> 00:26:06.800
If you want to add support for
printing inside your iOS application,

00:26:06.810 --> 00:26:12.360
all you have to do is present
a Preview Controller and

00:26:12.360 --> 00:26:12.360
Quick Look will take care of the rest.

00:26:14.600 --> 00:26:19.190
In iOS 5, we are introducing a new way to
navigate between multiple documents.

00:26:19.210 --> 00:26:22.910
Now when you are full-screen on the iPad,
you can swipe between items exactly

00:26:23.000 --> 00:26:24.990
like in the photo application.

00:26:25.000 --> 00:26:28.500
It says that we can swipe between all
documents supported by Quick Look.

00:26:28.500 --> 00:26:32.800
So, for example,
from a spreadsheet to an image, to a PDF,

00:26:32.800 --> 00:26:35.870
to a movie, to whatever you want.

00:26:36.320 --> 00:26:39.800
We are also introducing a new way
to navigate inside long documents.

00:26:39.800 --> 00:26:43.090
If you have, for example,
a 50-pages document,

00:26:43.220 --> 00:26:47.700
when you show the navigation bar,
you now get the thumbnail scrubber

00:26:47.700 --> 00:26:51.000
on the right side of the screen,
which lets you directly select

00:26:51.000 --> 00:26:52.600
the page that you want to go to.

00:26:52.650 --> 00:26:56.520
So if you want to go to
the bottom of the document,

00:26:56.560 --> 00:27:01.090
you don't have to scroll, unscroll,
unscroll endlessly.

00:27:01.090 --> 00:27:01.090
You can tap directly to the
page which interests you.

00:27:02.640 --> 00:27:06.090
So how do you use the Preview Controller?

00:27:06.150 --> 00:27:08.200
Well, like I said,
it's very close to the desktop.

00:27:08.200 --> 00:27:11.200
There are just a few changes
that I am going to highlight.

00:27:11.390 --> 00:27:12.410
First, you don't click against quarts.

00:27:12.450 --> 00:27:16.350
You link directly against
the Quick Look framework.

00:27:16.630 --> 00:27:20.460
Since we don't have a
shared preview panel in iOS,

00:27:20.500 --> 00:27:23.500
you have to create your
own preview controller.

00:27:23.500 --> 00:27:27.100
Create it with
QLPreviewController.alloc.init.

00:27:27.100 --> 00:27:28.560
Set yourself as data source.

00:27:28.570 --> 00:27:30.870
Optionally,
you can set yourself as delegate if you

00:27:30.870 --> 00:27:33.200
want to customize the zoom animation.

00:27:34.520 --> 00:27:37.630
To present it, since it is a subclass
of UI View Controller,

00:27:37.710 --> 00:27:42.400
you use the methods that you already
know with UI View Controllers.

00:27:42.450 --> 00:27:45.610
Either present model
View Controller animated or

00:27:45.610 --> 00:27:48.540
push View Controller animated.

00:27:48.540 --> 00:27:50.390
The one you will use
depends on your context.

00:27:50.410 --> 00:27:52.520
If you have a navigation
controller already,

00:27:52.520 --> 00:27:55.050
you should probably push the
preview controller inside

00:27:55.090 --> 00:27:56.400
the navigation controller.

00:27:56.400 --> 00:28:00.040
If you don't,
you can present modally and then the

00:28:00.040 --> 00:28:05.400
view will slide up in the iPhone and
be presented full screen on the iPad.

00:28:08.100 --> 00:28:09.630
When your Preview
Controller is on screen,

00:28:09.760 --> 00:28:11.500
you then have to provide content.

00:28:11.510 --> 00:28:16.000
And we use the exact same data
source model as in Mac OS X.

00:28:16.100 --> 00:28:18.370
The only difference is that
since we have a Preview

00:28:18.470 --> 00:28:23.550
Controller instead of a Preview Panel,
we had to rename a bit those methods.

00:28:23.810 --> 00:28:28.320
We have a number of preview items
in Preview Controller and Preview

00:28:28.320 --> 00:28:30.980
Controller preview item at index.

00:28:31.840 --> 00:28:39.220
This returns the same preview
item object that is in Mac OS X.

00:28:39.630 --> 00:28:44.470
We have the same Zoom Animation Delegate
method as on Mac OS X,

00:28:44.480 --> 00:28:47.630
which are
PreviewController.frameForPreviewItem

00:28:47.630 --> 00:28:50.360
in Source View and
PreviewController.TransitionImage

00:28:50.360 --> 00:28:53.040
for PreviewItem content-right.

00:28:53.040 --> 00:28:55.440
If you have paid attention to
what Julien said a bit earlier,

00:28:55.440 --> 00:28:58.580
you may notice that there is
a new Source View parameter

00:28:58.580 --> 00:29:00.160
in the first method.

00:29:00.170 --> 00:29:03.150
This is because in iOS,
everything can be rotated,

00:29:03.220 --> 00:29:05.680
so we really need a reference
view to make sure that we

00:29:05.690 --> 00:29:08.200
are in the good coordinate.

00:29:09.920 --> 00:29:14.980
So let me show you how it works in iOS.

00:29:15.560 --> 00:29:20.050
I'm going to use an iOS,
iPhone and iPad version of the

00:29:20.050 --> 00:29:23.430
Quick Look application that Julie used.

00:29:24.300 --> 00:29:27.590
On the desktop.

00:29:27.590 --> 00:29:30.080
So it is a very standard

00:29:30.300 --> 00:29:32.440
iOS Application.

00:29:32.600 --> 00:29:35.950
On the iPhone,
it uses a navigation controller

00:29:36.470 --> 00:29:42.000
To show first the list of recipes
and then when we click on a recipe,

00:29:42.070 --> 00:29:43.940
the list of the steps.

00:29:43.990 --> 00:29:48.870
What we want is to show the detail of the
step when you click on one of the steps.

00:29:49.120 --> 00:29:51.690
So let's do this.

00:29:51.730 --> 00:29:55.800
So first we have to create
our own Preview Controller.

00:29:55.880 --> 00:29:57.840
So we import Quick Look.

00:29:57.840 --> 00:30:00.810
We declare our controller.

00:30:02.000 --> 00:30:08.610
And then we're going to add an accessor
to create the controller on demand.

00:30:08.800 --> 00:30:12.150
Now we want to show the Preview
Controller when the user taps on one

00:30:12.150 --> 00:30:14.700
of the rows of the list of steps.

00:30:14.820 --> 00:30:18.290
So we're going to implement
the TableViewDelegate method

00:30:18.390 --> 00:30:21.520
TableViewDidSelectRowAtIndexPath.

00:30:21.610 --> 00:30:26.810
We retrieve the Preview Controller and we
push it inside the Navigation Controller.

00:30:27.610 --> 00:30:30.010
As you can see,
Xcode is not happy because

00:30:30.010 --> 00:30:39.850
we haven't implemented the
QLPreviewController data source protocol.

00:30:43.540 --> 00:30:47.800
Since Julien already
implemented the QLPrivateItem

00:30:47.800 --> 00:30:54.630
protocol in the Steps objects,
I don't have to implement them again.

00:30:55.390 --> 00:31:00.840
So we return, we use ordered steps which
contains the list of our steps.

00:31:00.840 --> 00:31:05.260
We return the number of steps
on the step at index here.

00:31:05.410 --> 00:31:09.180
So this should be enough to show

00:31:09.330 --> 00:31:15.530
If I tap on the first step,
I get the list of ingredients.

00:31:15.560 --> 00:31:17.300
But it's still not working perfectly.

00:31:17.310 --> 00:31:20.180
As you can see,
if I tap on one other step,

00:31:20.180 --> 00:31:26.190
I always see the first step.

00:31:26.190 --> 00:31:26.190
This is because before
pushing the button,

00:31:26.970 --> 00:31:30.330
To set the Preview Controller in
the Navigation Controller,

00:31:30.390 --> 00:31:33.900
I should make sure that we
are showing the correct step.

00:31:33.900 --> 00:31:38.900
I'm going to use CurrentPreviewItemIndex
to set it to the row of the index path.

00:31:38.900 --> 00:31:47.310
And now, when I tap on any of the steps,
I can see

00:31:48.520 --> 00:31:51.050
and the other speakers.

00:31:51.050 --> 00:31:54.600
Now let's have a look at the iPad.

00:31:55.140 --> 00:31:59.950
On the iPad,
we are using a USB View controller

00:31:59.980 --> 00:32:04.800
to show the list of recipes on the
left and then the steps on the right.

00:32:04.840 --> 00:32:10.200
What we want is to zoom the small image,
the plate image to full screen

00:32:10.270 --> 00:32:12.590
to show the steps full screen.

00:32:14.180 --> 00:32:16.370
In this case,
we don't want to push inside

00:32:16.370 --> 00:32:18.100
the navigation controller.

00:32:18.100 --> 00:32:20.170
We want to present manually.

00:32:20.390 --> 00:32:27.830
I'm going to delete this method
and replace it with a check.

00:32:27.860 --> 00:32:30.380
If we have a navigation controller,
we're going to push inside

00:32:30.380 --> 00:32:31.700
the navigation controller.

00:32:31.700 --> 00:32:33.300
This is the iPhone case.

00:32:33.380 --> 00:32:39.170
But if we don't have a
navigation controller,

00:32:39.170 --> 00:32:39.170
this means that we're on the iPad
and we're going to present modality.

00:32:39.890 --> 00:32:42.960
So let's try again.

00:32:43.030 --> 00:32:47.200
Now if I tap on one of the attachments,
I get the full screen preview.

00:32:47.280 --> 00:32:51.200
I can swipe between my items,
can view the videos,

00:32:51.200 --> 00:32:52.790
swipe to another one.

00:32:53.450 --> 00:32:58.010
But I still miss the zoom effect,
so I need to implement

00:32:58.010 --> 00:32:59.410
the delegate method.

00:33:01.280 --> 00:33:04.460
First, I set myself as delegate.

00:33:04.500 --> 00:33:07.590
And then I implement the
two delegate methods.

00:33:08.270 --> 00:33:12.310
What we want is to zoom from the
image from the UI Table View cell

00:33:12.600 --> 00:33:14.190
to the full screen.

00:33:14.310 --> 00:33:19.410
So I'm going first to retrieve the
index of the item from the steps.

00:33:19.530 --> 00:33:23.620
Then I retrieve the UI Table View cell
from the Table View.

00:33:23.780 --> 00:33:27.700
When I have the cell,
I can get the image view.

00:33:27.700 --> 00:33:33.060
Then I can use this image view
as source view and return the

00:33:33.060 --> 00:33:35.090
bounds of this image view.

00:33:35.250 --> 00:33:38.300
Then for the zoom,
I can return the image directly

00:33:38.300 --> 00:33:41.810
inside the image view to
have this nice transition.

00:33:42.290 --> 00:33:44.370
Let's see how it works.

00:33:44.370 --> 00:33:49.040
If I tap on one of the attachments,
I get the nice zoom effect.

00:33:51.690 --> 00:33:54.170
There are a few things that you
should and shouldn't do when

00:33:54.170 --> 00:33:56.230
you use a preview controller.

00:33:56.240 --> 00:34:01.200
First, and this one might sound obvious,
make sure that your delegate

00:34:01.200 --> 00:34:02.680
exists until the end.

00:34:02.680 --> 00:34:06.600
In particular, on the iPad,
we have two delegate methods which are

00:34:06.630 --> 00:34:08.360
called at the end of the zoom animation.

00:34:08.360 --> 00:34:10.600
First,
we have preview controller will dismiss,

00:34:10.600 --> 00:34:14.520
and at the very end,
we have preview controller did dismiss.

00:34:14.520 --> 00:34:18.200
So if you set yourself a delegate,
make sure that your delegate exists

00:34:18.200 --> 00:34:21.030
until at least did dismiss is called.

00:34:22.080 --> 00:34:24.530
Then do not set yourself
as a preview item.

00:34:24.590 --> 00:34:28.930
The reason for that is that
Quick Look will retain the preview item.

00:34:28.930 --> 00:34:32.910
So if you are a preview item yourself,
we will retain you, you will retain us,

00:34:33.010 --> 00:34:34.990
and you will enter a return cycle.

00:34:35.140 --> 00:34:40.620
So in the end,
you will leak both your ViewController

00:34:40.620 --> 00:34:40.620
and the PreviewController.

00:34:41.320 --> 00:34:44.480
Finally, do not try to customize
the navigation bar.

00:34:44.480 --> 00:34:49.200
In iOS, the top UI view controller
owns the navigation bar.

00:34:49.200 --> 00:34:51.590
So if you put something when
you push the preview controller,

00:34:51.600 --> 00:34:56.940
don't be surprised if we just remove it
and replace it by our own action button.

00:34:58.650 --> 00:35:01.840
So this concludes the previewing
part of this presentation.

00:35:01.840 --> 00:35:03.840
And now I'm going to
talk about sunnellings.

00:35:03.840 --> 00:35:07.990
And like I said at the beginning,
thumbnails only exist in Mac OS X.

00:35:09.230 --> 00:35:10.590
What are thumbnails?

00:35:10.600 --> 00:35:15.790
A thumbnail is a static image which
represents the content of a document.

00:35:15.900 --> 00:35:18.630
We have two kinds of thumbnails.

00:35:18.750 --> 00:35:20.860
First,
we have what we call flat thumbnails.

00:35:20.860 --> 00:35:25.480
On a flat thumbnail, just give a quick
overview of the content.

00:35:26.230 --> 00:35:27.680
Then we have icons.

00:35:27.690 --> 00:35:31.480
An icon is a flat thumbnail with
added decorations which emphasize

00:35:31.480 --> 00:35:33.200
the file aspect of the document.

00:35:33.200 --> 00:35:39.010
So you can see here the page curl
on the PDF or the reflection on

00:35:39.010 --> 00:35:41.810
the letterbox on the movie icon.

00:35:43.600 --> 00:35:45.990
Flats and nails can be
very high resolution,

00:35:46.040 --> 00:35:49.600
so they are perfect for
inspectors or for preview pen.

00:35:49.700 --> 00:35:52.600
And they are also very useful
if you want to integrate them

00:35:52.600 --> 00:35:57.030
inside some more fancy views like
we did with the Coverflow view.

00:35:57.970 --> 00:36:01.010
Icons, on the other hand,
are better fitted for

00:36:01.010 --> 00:36:02.480
collection of items.

00:36:02.530 --> 00:36:04.530
So if you want to show a
browser view or list view,

00:36:04.650 --> 00:36:06.790
you should use icons.

00:36:07.670 --> 00:36:11.430
Since they are much more
physical than thumbnails,

00:36:11.430 --> 00:36:14.000
they make perfect file handles.

00:36:14.000 --> 00:36:17.860
If you want to show the user
that he can click on an item

00:36:17.860 --> 00:36:23.210
or drag and drop the icon,
you should use file handles.

00:36:24.710 --> 00:36:26.840
So what are the APIs to
retrieve thumbnails?

00:36:26.840 --> 00:36:29.000
We have two APIs.

00:36:29.000 --> 00:36:32.040
First,
we have a very basic synchronous API.

00:36:32.040 --> 00:36:36.400
You just call ql_thumbnail_image_create,
you pass the URL of your file,

00:36:36.410 --> 00:36:39.600
you pass the maximum size that you need,
and you pass some options.

00:36:39.600 --> 00:36:43.600
This returns the thumbnail
as a CG image ref.

00:36:45.320 --> 00:36:47.960
As an option,
you can set icon mode to True and

00:36:47.960 --> 00:36:51.590
this will tell Quick Look to
add all the icon decorations.

00:36:52.700 --> 00:36:54.590
Be careful that this
is a synchronous API,

00:36:54.590 --> 00:36:56.360
so it may take time to return.

00:36:56.360 --> 00:37:00.170
We try to be as fast as possible,
but of course some documents

00:37:00.170 --> 00:37:06.930
are more complex than others,
and we don't control all the generators.

00:37:06.930 --> 00:37:06.930
So don't call this in the main thread.

00:37:08.000 --> 00:37:11.900
To simplify things,
we have added an asynchronous

00:37:11.900 --> 00:37:14.240
API which uses GCD.

00:37:14.270 --> 00:37:18.830
You first have to create a QLSumbnailRef
object with QLSumbnailCreate.

00:37:18.850 --> 00:37:22.190
You pass the same arguments
as the previous function,

00:37:22.190 --> 00:37:25.230
so the URL,
the maximum size and the options.

00:37:25.670 --> 00:37:30.100
And then you dispatch the request
with QLThumbnailDispatcherSync.

00:37:30.120 --> 00:37:33.610
When the completion block is called,
you can call QLThumbnailCopyImage

00:37:33.610 --> 00:37:36.120
and this will return the thumbnail.

00:37:36.240 --> 00:37:40.890
You could also call copyImage directly
without calling dispatch async,

00:37:40.930 --> 00:37:45.150
but then of course the function will
block until the thumbnail is generated.

00:37:46.040 --> 00:37:50.130
One thing that you shouldn't do is call
dispatch async and then call copyImage

00:37:50.140 --> 00:37:52.300
before the completion block is called.

00:37:52.460 --> 00:37:54.400
That just wouldn't work.

00:37:55.630 --> 00:37:59.720
You can cancel the generation of
the thumbnail with QSumnailCancel.

00:37:59.770 --> 00:38:03.740
This API also provides a nice utility
method which returns the content trait.

00:38:03.740 --> 00:38:07.310
Like Julien explained,
the content trait is the exact frame

00:38:07.310 --> 00:38:09.330
of the content inside the icon.

00:38:09.340 --> 00:38:14.340
You don't usually need this information,
but you can pass it to Quick Look with

00:38:14.340 --> 00:38:15.660
the zoom delegate method.

00:38:15.660 --> 00:38:20.820
Then Quick Look will be able to zoom
perfectly from the icon to the preview

00:38:20.820 --> 00:38:23.910
panel or from the icon to full screen.

00:38:25.340 --> 00:38:28.830
And now we are done with the
consumer part of Quick Look.

00:38:28.840 --> 00:38:31.590
And Julien will come back on stage
and show you how you can be part of

00:38:31.590 --> 00:38:35.820
the Quick Look process and write a
generator for your own documents.

00:38:36.100 --> 00:38:38.990
So let's now see how you
can extend Quick Look to

00:38:39.000 --> 00:38:41.040
support your document types.

00:38:41.070 --> 00:38:46.290
First, let's see an overview of how
Quick Look plug-ins are working.

00:38:47.300 --> 00:38:51.860
Quick Look plugins are living in the
process that is called sandboxed.

00:38:51.860 --> 00:38:58.780
This means that some
operations are not permitted,

00:38:58.780 --> 00:39:03.380
like network access or file access
to something that is not the file

00:39:03.380 --> 00:39:06.300
you are previewing or sumnaling.

00:39:06.300 --> 00:39:11.510
If something bad happens,
there will be a log in the console,

00:39:11.510 --> 00:39:13.300
so check for logs.

00:39:13.300 --> 00:39:16.730
But you shouldn't have
to do what's forbidden.

00:39:17.730 --> 00:39:21.000
So when Quick Look receives
a request from the client to

00:39:21.070 --> 00:39:27.390
generate a thumbnail or a preview,
it sends this request to the daemon,

00:39:27.390 --> 00:39:31.770
which chooses the correct
plug-in to reply to this request.

00:39:31.960 --> 00:39:39.310
The plugin generates the thumbnail or the
preview and sends it back to Quick Look,

00:39:39.370 --> 00:39:44.440
which then fulfills the request
to the client application.

00:39:45.780 --> 00:39:49.420
So let's see how you implement
your Quick Look plugin.

00:39:49.450 --> 00:39:53.950
Once you've created your new
project from the Xcode template,

00:39:53.950 --> 00:39:57.690
you will see two function prototypes
that you have to implement.

00:39:57.700 --> 00:40:00.680
One for thumbnails and one for previews.

00:40:00.690 --> 00:40:04.690
So first let's focus on thumbnails.

00:40:05.470 --> 00:40:10.630
So you have a couple of few arguments,
but the main ones are the thumbnail

00:40:10.660 --> 00:40:18.060
request and the URL pointing to the file
that you want to generate a preview for.

00:40:18.230 --> 00:40:21.740
So you have two ways to
reply to this request.

00:40:21.770 --> 00:40:26.160
The first way is if you already
have the thumbnail ready in form

00:40:26.160 --> 00:40:32.750
of an image of a data or URL,
you give it back directly

00:40:32.750 --> 00:40:36.580
using one of the set functions
and then Quick Look will

00:40:36.630 --> 00:40:39.870
send it back to the client.

00:40:39.950 --> 00:40:43.680
But the other option is if
you want to draw the thumbnail

00:40:43.680 --> 00:40:45.740
live inside your plug-in.

00:40:45.840 --> 00:40:49.360
So in this case, you create a CG context.

00:40:49.360 --> 00:40:54.600
You draw in this context like any regular
CG context and then when you are done,

00:40:54.600 --> 00:40:58.420
you flash the context to tell
Quick Look that the thumbnail

00:40:58.420 --> 00:41:00.050
is ready to send back.

00:41:02.320 --> 00:41:05.590
For previews, it is very similar.

00:41:05.600 --> 00:41:08.720
So the prototype is the same.

00:41:08.960 --> 00:41:14.590
And similarly, you have two ways to reply
to a preview request.

00:41:15.500 --> 00:41:21.100
If you already have the
preview in form of data or URL,

00:41:21.260 --> 00:41:26.790
you can directly use the set
data or set URL representation

00:41:26.960 --> 00:41:35.010
and give back your preview to
Quick Look specifying the content type

00:41:35.010 --> 00:41:35.010
of the data or URL you are giving.

00:41:35.540 --> 00:41:41.520
And the other solution is to draw the
preview live using the Create Context

00:41:41.520 --> 00:41:44.400
method and Flash Context method.

00:41:44.440 --> 00:41:47.070
Except that for previews,
you have another option,

00:41:47.080 --> 00:41:49.900
which is to create a PDF context.

00:41:49.900 --> 00:41:54.260
So this will allow you to
create a preview with multiple

00:41:54.260 --> 00:41:59.710
pages using Core Graphics,
Begin Page and End Page functions.

00:42:00.370 --> 00:42:07.500
So you flash your preview
and then you are done.

00:42:07.500 --> 00:42:12.260
So now that you've written the code,
you want your code to be actually cold.

00:42:12.290 --> 00:42:16.670
But first,
I'd like to have a brief overview of what

00:42:16.670 --> 00:42:20.710
we call document types and also UTIs.

00:42:20.900 --> 00:42:25.460
For UTIs, our unique strings that should
be unique across the system

00:42:25.460 --> 00:42:28.320
and are prefixed by vendor.

00:42:28.690 --> 00:42:34.100
They are defined in the info.playlist
of applications or plug-ins.

00:42:34.330 --> 00:42:38.000
and they are registered and
managed by Launch Services.

00:42:38.110 --> 00:42:41.970
So in our sample
Quick Cookbook application,

00:42:42.000 --> 00:42:46.040
this is an extract of the
Info.plist and this is where we

00:42:46.040 --> 00:42:50.200
define our UTI for Recipe documents.

00:42:50.200 --> 00:42:54.160
So we use com.apple.recipe.

00:42:55.220 --> 00:43:02.390
The next thing you want to do is to
get launch services know your plug-in.

00:43:02.860 --> 00:43:06.480
So you have to put it in known locations.

00:43:06.480 --> 00:43:11.540
So if your plug-in is generating
thumbnails and previews for documents

00:43:11.540 --> 00:43:16.950
that are for your own application,
you should ship it directly into the app

00:43:16.950 --> 00:43:19.800
bundle in contents library Quick Look.

00:43:19.800 --> 00:43:22.980
But if you want to ship
a standalone plug-in,

00:43:23.080 --> 00:43:29.530
you can put it in /libraryquicklook or
/tilda/libraryquicklook and it will be

00:43:29.530 --> 00:43:31.800
seen by launch services and registered.

00:43:34.160 --> 00:43:37.690
In your plugin,
you specify the UTI you are

00:43:37.690 --> 00:43:40.710
generating previews on Sunday for.

00:43:40.810 --> 00:43:45.990
In our example,
you can see that we see com.apple.recipe

00:43:46.020 --> 00:43:49.300
in our Info.plist of the generator.

00:43:49.300 --> 00:43:54.970
The generator contains some
attributes in the Info.plist and I'd

00:43:55.080 --> 00:43:58.300
like to show you a couple of them.

00:43:58.300 --> 00:44:02.300
First,
we have what we call sizing attributes.

00:44:02.300 --> 00:44:06.660
For thumbnails,
you can specify the minimum size from

00:44:06.900 --> 00:44:09.300
which the thumbnail is meaningful.

00:44:09.360 --> 00:44:14.970
Meaning that if the client requests
a thumbnail smaller than this size,

00:44:14.970 --> 00:44:20.150
we won't even code your code and we will
just say that there is no thumbnail.

00:44:20.620 --> 00:44:24.120
And for previews,
you can specify a default

00:44:24.120 --> 00:44:28.560
size that will be used for the
preview panel when it's opening.

00:44:30.390 --> 00:44:33.410
But we have also what we
call running attributes.

00:44:33.420 --> 00:44:37.780
So if your code supports
concurrent requests,

00:44:37.780 --> 00:44:41.900
you should specify it and it's a good
thing to support concurrent requests.

00:44:41.900 --> 00:44:43.280
It's better for performance.

00:44:43.300 --> 00:44:45.900
But on the opposite,
if your code needs to be

00:44:45.900 --> 00:44:49.160
run on the main thread,
which is a bad thing but sometimes

00:44:49.270 --> 00:44:53.180
you don't really have a choice,
you need to specify it

00:44:53.220 --> 00:44:55.300
to avoid some problems.

00:44:55.300 --> 00:45:01.460
And those are valid for both
thumbnail and preview generations.

00:45:02.860 --> 00:45:07.960
So I'd like to quickly talk about
what are options and properties.

00:45:07.970 --> 00:45:15.990
Options are given from us to you and
are meant to alter the generation

00:45:15.990 --> 00:45:17.980
of previews and thumbnails.

00:45:18.010 --> 00:45:21.010
So as an example,
we have the scale factor

00:45:21.030 --> 00:45:22.760
option for thumbnails.

00:45:23.210 --> 00:45:28.510
On the opposite,
properties are given by your plugin

00:45:28.510 --> 00:45:34.510
back to Quick Look to specify
and to give us hints about how to

00:45:34.510 --> 00:45:37.100
display the thumbnails or previews.

00:45:37.100 --> 00:45:43.420
As examples, for thumbnails,
you can specify a custom extension to

00:45:43.480 --> 00:45:48.100
badge on the icon or even a badge image.

00:45:48.100 --> 00:45:51.820
For previews,
you can specify a size that will

00:45:51.820 --> 00:45:54.100
be used by the preview panel.

00:45:54.100 --> 00:45:57.790
And of course,
this size takes priority over

00:45:57.790 --> 00:46:02.580
the static size that you may have
defined in the InfoDate playlist.

00:46:04.030 --> 00:46:08.100
Optionally,
you can also specify a custom display

00:46:08.100 --> 00:46:14.330
name for your preview that will be
shown in the title of the Preview Panel.

00:46:14.550 --> 00:46:20.800
I will give you a quick demo on
how to write a Quick Look plugin.

00:46:20.800 --> 00:46:24.800
I created a new project
from the Xcode template.

00:46:25.720 --> 00:46:34.600
I've added a custom utility class
to parse our recipe documents.

00:46:34.600 --> 00:46:38.910
We will first generate the thumbnail.

00:46:42.420 --> 00:46:43.650
So this is pretty simple.

00:46:43.740 --> 00:46:49.500
Using our utility methods,
we get the image inside the document

00:46:49.550 --> 00:46:54.710
and then we give it directly
to Quick Look as a CG image.

00:46:55.980 --> 00:46:58.600
So now we want to test that.

00:46:58.640 --> 00:47:01.790
And to do that,
we edit the scheme in Xcode

00:47:01.830 --> 00:47:04.170
and we add TrailManage.

00:47:04.230 --> 00:47:09.590
TrailManage is a tool that is
used to help debug Quick Look.

00:47:10.160 --> 00:47:13.500
So we add QL Manage
and we set a couple of,

00:47:13.500 --> 00:47:15.500
a few arguments.

00:47:15.870 --> 00:47:20.010
So that tells it to generate a thumbnail.

00:47:20.010 --> 00:47:24.030
And here you can see that we are
specifically giving it the path

00:47:24.250 --> 00:47:28.930
to our generator because it's not
yet registered to launch services.

00:47:29.050 --> 00:47:31.720
So we had to specify it manually.

00:47:31.720 --> 00:47:35.720
And then this is the
path to our document.

00:47:35.720 --> 00:47:37.710
So let's run it.

00:47:39.440 --> 00:47:42.700
And we have a nice
thumbnail of our recipe.

00:47:42.700 --> 00:47:51.010
So we are happy with that and we will
now implement the preview request.

00:47:53.820 --> 00:47:59.920
Similarly, I'm using our utility
methods to get the name,

00:47:59.920 --> 00:48:03.800
the content and the image of the preview.

00:48:03.910 --> 00:48:07.990
And then we are drawing
using AppKit APIs.

00:48:07.990 --> 00:48:12.040
So we have a gradient and other things.

00:48:12.160 --> 00:48:15.940
And when we are done,
we flush the CG content.

00:48:17.120 --> 00:48:21.490
To test that,
we will edit our scheme and instead

00:48:21.500 --> 00:48:26.100
of trying to get a thumbnail,
we will get a preview.

00:48:26.130 --> 00:48:35.080
So we just change the options to
get "-p" for preview and we run.

00:48:36.100 --> 00:48:40.520
And there we can see we have a nice
preview of a recipe with all steps,

00:48:40.680 --> 00:48:43.400
the image and the name.

00:48:43.420 --> 00:48:48.510
And we are happy with that,
so we can ship our plug-in.

00:48:48.590 --> 00:48:52.510
And we can go back to the slides.

00:48:56.050 --> 00:48:59.860
So just to sum it up,
when you want to create

00:48:59.860 --> 00:49:04.740
a Quick Look plugin,
you create a new project

00:49:04.820 --> 00:49:07.440
from the template in Xcode.

00:49:07.520 --> 00:49:13.140
Then you define your document type
in the Info.plist of the plugin.

00:49:13.140 --> 00:49:19.160
You implement both, or not,
but it's better to have both

00:49:19.160 --> 00:49:22.750
thumbnail and preview functions.

00:49:24.040 --> 00:49:28.510
And you can change the
attributes in your Ampho.plist.

00:49:28.580 --> 00:49:33.750
So if your code needs to be
run in the main thread or not.

00:49:34.300 --> 00:49:39.350
Then you use QLManage
to test it from Xcode.

00:49:39.350 --> 00:49:45.590
And to see all the options of QLManage,
you can see its documentation.

00:49:47.170 --> 00:49:51.270
And finally,
you want to test it in real conditions,

00:49:51.280 --> 00:49:55.330
so you deploy your plug-in and
you test it directly in Finder.

00:49:55.340 --> 00:49:59.340
And when you're good with that,
you can ship it.

00:50:01.380 --> 00:50:03.300
So where do you go from here?

00:50:03.300 --> 00:50:06.400
Well, first,
we want you to use to integrate

00:50:06.500 --> 00:50:08.300
Quick Look inside your application.

00:50:08.310 --> 00:50:11.980
If your application manipulates files,
there are no reasons for you not

00:50:11.980 --> 00:50:13.740
to show the content of the files.

00:50:13.740 --> 00:50:16.100
And Quick Look is a great way to do this.

00:50:16.120 --> 00:50:19.680
So use the preview panel,
use the preview view,

00:50:19.680 --> 00:50:22.090
use the preview controller.

00:50:22.520 --> 00:50:25.140
In Mac OS X,
ask Quick Look to provide thumbnails

00:50:25.210 --> 00:50:27.120
for all your files and documents.

00:50:27.120 --> 00:50:30.960
But don't be just a consumer,
although be part of the process.

00:50:30.960 --> 00:50:35.610
If your application creates files,
you should provide a generator for them.

00:50:35.610 --> 00:50:40.180
That will make your document
visible everywhere in Mac OS X,

00:50:40.200 --> 00:50:43.510
from the Finder to
Mail to all applications.

00:50:43.940 --> 00:50:46.800
When you do so, make sure that your
thumbnails look beautiful.

00:50:46.800 --> 00:50:49.800
You want them to look amazing in the
Finder next to all other documents.

00:50:49.800 --> 00:50:53.800
And of course, make sure that you
have good performances.

00:50:53.800 --> 00:50:55.890
Our computers are getting
faster and faster,

00:50:55.920 --> 00:50:57.800
but we don't want to waste resources.

00:51:00.320 --> 00:51:03.490
If you need more information,
you can contact our evangelist

00:51:03.490 --> 00:51:08.190
Bill Dernay or you can go
to the usual Apple website.

00:51:08.200 --> 00:51:13.200
Thank you all for coming and
have a great week at WWDC.