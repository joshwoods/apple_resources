WEBVTT

00:00:12.060 --> 00:00:13.430
Good morning.

00:00:13.600 --> 00:00:15.100
It's Friday morning.

00:00:15.170 --> 00:00:17.400
How many people are awake?

00:00:19.240 --> 00:00:22.800
It's great to see such a good-sized crowd
here on the last day of the conference.

00:00:22.860 --> 00:00:24.980
I hope you have a good day today.

00:00:24.980 --> 00:00:28.790
We have a great show this morning.

00:00:29.170 --> 00:00:31.520
I'd like to bring on Dave Payne,
Manager of

00:00:31.520 --> 00:00:37.030
Developer Tools Applications Group,
and he's going to talk about debugging.

00:00:40.800 --> 00:00:43.760
Thanks, Jeffrey.

00:00:43.920 --> 00:00:47.510
So did you all enjoy
our campus last night?

00:00:47.570 --> 00:00:49.550
Nice place, isn't it?

00:00:50.900 --> 00:00:52.900
Alright, so lots to cover this morning.

00:00:52.900 --> 00:00:54.660
Let's go ahead and get started.

00:00:54.660 --> 00:00:57.830
What we're going to cover today
is an overview of debugging

00:00:57.830 --> 00:00:59.100
on Mac OS X in general.

00:00:59.100 --> 00:01:03.430
And there's a variety
of ways to go about it.

00:01:03.540 --> 00:01:06.900
We have two integrated development
environments at this point,

00:01:06.900 --> 00:01:09.540
Project Builder and CodeWarrior.

00:01:09.540 --> 00:01:12.900
So we'll be taking a look at
debugging with both of those.

00:01:12.900 --> 00:01:17.500
First off,
we'll dive into Project Builder,

00:01:17.500 --> 00:01:22.960
take a look at some more detailed stuff
than I did in my sessions on Wednesday.

00:01:23.820 --> 00:01:29.010
Then we'll take a look at some advanced
debugging techniques that are really

00:01:29.280 --> 00:01:33.320
getting down and dirty with gdb,
the command line debugger.

00:01:33.340 --> 00:01:39.750
Then bring Metroworks on stage to take a
look at debugging in CodeWarrior Pro 6.

00:01:42.180 --> 00:01:44.600
So really,
which of these that you use depends

00:01:44.600 --> 00:01:47.100
on what you're building on Mac OS X.

00:01:47.100 --> 00:01:50.840
There's a lot of different pieces
of software that you can build.

00:01:50.870 --> 00:01:55.170
And how you debug it
depends on how you built it.

00:01:55.390 --> 00:02:00.470
You can't build the same things with
the various sets of tools at the moment.

00:02:00.600 --> 00:02:03.530
So there are different
debugging techniques depending

00:02:03.530 --> 00:02:05.200
on what you're doing.

00:02:07.380 --> 00:02:11.980
So let's first talk about the
overall debugging architecture.

00:02:12.130 --> 00:02:16.340
Both Apple and Metrowerks have worked
together to come up with mechanisms

00:02:16.340 --> 00:02:18.620
that will work with the system.

00:02:18.720 --> 00:02:22.820
Both Project Builder and CodeWarrior
do take advantage of gdb as the

00:02:22.820 --> 00:02:26.460
common debugging services substrate.

00:02:26.540 --> 00:02:32.900
gdb handles all the interaction
with the Core OS and the interaction

00:02:32.900 --> 00:02:35.440
with your target application.

00:02:35.440 --> 00:02:38.990
In the case of Project Builder,
we talk pretty directly

00:02:39.150 --> 00:02:42.320
to it on Mac OS X itself.

00:02:42.320 --> 00:02:46.960
In the case of CodeWarrior,
Apple and Metrowerks work together

00:02:46.960 --> 00:02:51.660
to design a mechanism to allow
the CodeWarrior IDE to work with

00:02:51.660 --> 00:02:54.700
debugging just as it always has.

00:02:55.070 --> 00:02:57.360
Specifically,
it's taking advantage of the

00:02:57.360 --> 00:03:03.210
Metrowerks debugging protocol to
go through and talk to a debug

00:03:03.220 --> 00:03:04.950
knob that we worked on together.

00:03:05.440 --> 00:03:08.580
The debug knob handles
communication to gdb.

00:03:08.620 --> 00:03:13.190
So the debug knob runs on the
Mac OS X machine with gdb and

00:03:13.190 --> 00:03:15.510
with your target application.

00:03:15.600 --> 00:03:19.560
Because it's going through the
Metrowerks-- it's actually a remote

00:03:19.560 --> 00:03:24.510
debugging protocol-- CodeWarrior
can work on Mac OS 9 or Mac OS X and

00:03:24.520 --> 00:03:28.060
do debugging of applications there.

00:03:28.460 --> 00:03:34.630
But again, which one you use depends
on what you're building.

00:03:34.890 --> 00:03:37.180
With Carbon applications,
you can build them as

00:03:37.180 --> 00:03:40.080
either Maco or with Pef.

00:03:40.080 --> 00:03:45.670
For all else in the system,
Maco is the primary binary

00:03:45.830 --> 00:03:47.800
format for the system.

00:03:47.800 --> 00:03:49.480
It's the native format.

00:03:49.630 --> 00:03:52.220
It's what we use for everything.

00:03:52.220 --> 00:03:55.120
So we've built the OS with
that since essentially the dawn

00:03:55.120 --> 00:04:01.940
of time from the base that we
developed it from back at Next.

00:04:02.130 --> 00:04:04.620
So all of our tools
are optimized for that,

00:04:04.630 --> 00:04:08.160
from the development tools on
through the performance tools.

00:04:08.310 --> 00:04:13.710
So you can get access to the entire
system by making Maco applications.

00:04:13.940 --> 00:04:17.810
So all of the BSD APIs are accessible,
all of your frameworks.

00:04:18.040 --> 00:04:22.870
So Cocoa, all of the Carbon frameworks
are actually implemented as

00:04:22.870 --> 00:04:24.490
Maco frameworks on the system.

00:04:24.560 --> 00:04:30.980
So you can write all different
types of applications as Maco.

00:04:30.990 --> 00:04:34.220
If you're writing--
say an I/O Kit module,

00:04:34.380 --> 00:04:41.660
so a device driver or kernel extension,
you would do that in Maco as well.

00:04:41.660 --> 00:04:47.860
You can use Maco in a Pef
application by doing a Maco plugin,

00:04:47.860 --> 00:04:51.240
a CFPlugin, that loads transparently.

00:04:51.240 --> 00:04:54.350
You don't have to know that it's Maco,
really.

00:04:54.440 --> 00:05:00.220
So the new project builder IDE fully
supports development with Maco.

00:05:00.220 --> 00:05:01.920
Gdb supports debugging of that.

00:05:01.920 --> 00:05:08.240
MetroWorks will be working to provide
a full Maco development suite as well.

00:05:08.240 --> 00:05:13.550
So you'll have that option as well
in a future release of MetroWorks.

00:05:15.330 --> 00:05:19.850
Your other option for Carbon binaries
is to develop a PEF binary.

00:05:19.880 --> 00:05:22.760
That's the native format on Mac OS 9.

00:05:22.760 --> 00:05:29.750
We've provided a code fragment manager
to load PEF containers on Mac OS X to

00:05:29.850 --> 00:05:36.140
provide transitional support for
Carbon applications coming in.

00:05:36.140 --> 00:05:39.710
You can have-- one of these
PEF binaries can actually run

00:05:39.780 --> 00:05:42.550
on both Mac OS 9 or Mac OS X.

00:05:42.630 --> 00:05:45.650
Our preference, actually,
is that you use the new bundle

00:05:45.790 --> 00:05:50.140
packaging scheme to come up with
an app package that you can take

00:05:50.220 --> 00:05:54.060
advantage of localization and
everything else from the app package.

00:05:54.060 --> 00:05:57.890
You can have a Mako binary for
Mac OS X and a PEF binary for Mac OS 9

00:05:57.890 --> 00:06:00.180
and be double-clickable on each.

00:06:00.180 --> 00:06:04.370
But PEF alone is an acceptable option.

00:06:04.500 --> 00:06:09.000
To do that today,
you would use CodeWarrior to do that.

00:06:09.190 --> 00:06:14.580
So Metrowerk has provided full
debug and support for CodeWarrior

00:06:14.590 --> 00:06:21.100
binaries running on-- or
Carbon PEF binaries running on Mac OS X.

00:06:21.190 --> 00:06:25.780
So again, Metroworks is also working to
provide Mako functionality.

00:06:25.780 --> 00:06:30.280
And in my project builder
session on Wednesday,

00:06:30.280 --> 00:06:33.450
we also demonstrated kind of a
bleeding edge functionality of

00:06:33.640 --> 00:06:37.520
generating a PEF binary from
the project builder IDE as well.

00:06:37.660 --> 00:06:39.800
So we're trying to
move in that direction.

00:06:39.800 --> 00:06:43.990
The goal is that both environments
provide all options and give

00:06:43.990 --> 00:06:46.520
you as much choice as possible.

00:06:46.860 --> 00:06:50.940
So with that introduction,
I'd like to bring on Rab Hagy,

00:06:50.940 --> 00:06:54.180
debugging engineer for Project Builder.

00:06:54.180 --> 00:07:00.120
And he'll take you through some of
the Project Builder debugging details.

00:07:00.120 --> 00:07:01.960
Thanks, Dave.

00:07:05.380 --> 00:07:06.640
Good morning, everyone.

00:07:06.640 --> 00:07:11.060
I'll be talking about Project Builder
and debugging on Mac OS X and some

00:07:11.150 --> 00:07:16.560
of the larger issues that you might
run into specific to Mac OS X.

00:07:16.700 --> 00:07:20.540
Project Builder has a number
of features for debugging,

00:07:20.540 --> 00:07:24.680
the most obvious of which is
a graphical user interface for

00:07:24.680 --> 00:07:26.830
displaying threads and stacks and such.

00:07:26.840 --> 00:07:31.660
In addition,
we have features for supporting the

00:07:31.660 --> 00:07:37.620
so-called Mac OS X platform initiatives,
mainly Carbon and its

00:07:37.620 --> 00:07:42.850
use of opaque data types,
and the semantics of the Mac OS X dynamic

00:07:43.270 --> 00:07:45.830
shared library mechanism.

00:07:46.770 --> 00:07:48.890
Uh,

00:07:49.100 --> 00:07:54.060
Because we encourage the use of
frameworks and shared libraries,

00:07:54.180 --> 00:07:59.740
Project Builder supports cross-project
debugging where one project can build the

00:08:00.220 --> 00:08:04.090
framework and another project can use it.

00:08:04.100 --> 00:08:07.400
Finally, we have full breakpoint support.

00:08:07.400 --> 00:08:10.970
We'll be talking about
each of these in turn.

00:08:11.090 --> 00:08:14.820
First let's start off
with opaque data types.

00:08:16.200 --> 00:08:19.270
Now, if you looked at
Carbon or Core Foundation,

00:08:19.300 --> 00:08:24.440
you know that many of the data types,
all you get is a reference.

00:08:24.460 --> 00:08:28.300
You don't know what the actual
structure of the data type is.

00:08:28.340 --> 00:08:32.130
And as a developer,
you can appreciate the advantages

00:08:32.250 --> 00:08:37.040
to hiding your implementation
so you can change it later on.

00:08:37.090 --> 00:08:42.730
But it's also difficult to debug with
opaque data types or abstract data

00:08:42.920 --> 00:08:46.250
types because you can't look into them.

00:08:46.340 --> 00:08:52.400
So how can we debug these
in the Mac OS X environment?

00:08:52.900 --> 00:08:57.390
Well, we have to change our
approach a little bit.

00:08:57.810 --> 00:09:00.420
Typically,
a debugger reaches in and looks

00:09:00.540 --> 00:09:04.710
at the state of data structures,
but you can't do that

00:09:04.710 --> 00:09:06.660
with opaque data types.

00:09:06.730 --> 00:09:11.340
So what we can do is we can take
advantage of the debugging system

00:09:11.340 --> 00:09:16.230
on Mac OS X and run functions
during the debugging session

00:09:16.360 --> 00:09:21.340
inside the debugged process.

00:09:21.370 --> 00:09:27.110
And these functions can inspect
and provide information about

00:09:27.120 --> 00:09:31.290
the state of these data types.

00:09:32.190 --> 00:09:36.100
Principle 1 and core
foundation is CF-SHOW,

00:09:36.210 --> 00:09:41.280
which gives a textual
representation of the CFData types,

00:09:41.350 --> 00:09:44.640
dictionaries, and strings, and so forth.

00:09:44.860 --> 00:09:48.810
In Carbon,
there are a number of functions

00:09:49.280 --> 00:09:52.980
specifically there for debugging.

00:09:53.310 --> 00:09:58.440
Some take as a parameter a
data type such as a dialog,

00:09:58.440 --> 00:10:00.200
a menu,
or a window and print out information.

00:10:00.200 --> 00:10:06.390
Some just print out information
about the application as a whole,

00:10:06.550 --> 00:10:11.660
like a print resource chain prints
all the information about the

00:10:11.660 --> 00:10:14.200
resources active at the moment.

00:10:14.200 --> 00:10:20.280
And then there's some in the QuickDraw
framework that instead of providing

00:10:20.280 --> 00:10:27.140
a textual information provide a
graphical information such as flashing

00:10:27.220 --> 00:10:31.990
a clip region or visible region,
which actually is a lot

00:10:31.990 --> 00:10:37.230
easier than looking at numbers
representing pixel positions.

00:10:40.950 --> 00:10:43.650
So now,
let's talk a bit about shared libraries.

00:10:43.660 --> 00:10:47.360
And we use the term
dynamic shared libraries,

00:10:47.360 --> 00:10:53.750
or DILIBs, on Mac OS X to emphasize
the specific semantics of

00:10:53.940 --> 00:10:56.420
shared libraries on Mac OS X.

00:10:56.420 --> 00:11:00.720
They come in, well, we say two types,
but it's more of two ways of

00:11:00.720 --> 00:11:06.330
representing on the file system,
a standalone shared library or a shared

00:11:06.330 --> 00:11:09.400
library packaged inside a framework.

00:11:09.400 --> 00:11:14.010
And if you work with shared libraries,
you know that if you have multiple

00:11:14.010 --> 00:11:17.680
versions of them on your system and
you start running your application

00:11:17.680 --> 00:11:23.380
and debugging with the wrong version,
you can waste a lot of time till

00:11:23.560 --> 00:11:25.100
you come to that realization.

00:11:25.100 --> 00:11:29.280
So how do we avoid this problem?

00:11:32.270 --> 00:11:37.310
The general question we want
to explore is that on Mac OS X,

00:11:37.430 --> 00:11:41.470
shared libraries and frameworks
are designed to be installed

00:11:41.880 --> 00:11:43.360
at a specific location.

00:11:43.360 --> 00:11:48.770
And how do you do development when
you don't want to install them?

00:11:49.800 --> 00:11:53.470
So let's look at the details
of how this process works.

00:11:53.760 --> 00:11:58.140
At build time,
when you build your shared library,

00:11:58.140 --> 00:12:02.960
part of your configuration
information you give to the build

00:12:03.090 --> 00:12:07.980
system in Project Builder is the
path where you're going to install

00:12:07.980 --> 00:12:11.460
the framework or the shared library.

00:12:11.530 --> 00:12:15.870
And that path is independent
of where you actually build it.

00:12:16.480 --> 00:12:24.600
At build time of the executable,
the static link editor, LD,

00:12:25.020 --> 00:12:31.390
takes this install path from the shared
library and records it in the executable.

00:12:31.390 --> 00:12:36.900
So that at runtime for the executable,
the dynamic editor then has a very

00:12:36.970 --> 00:12:39.360
easy way to find the shared library.

00:12:39.400 --> 00:12:43.590
It's been told, ah, here's the path,
where to look for it.

00:12:43.830 --> 00:12:47.000
So that's very efficient,
but during development,

00:12:47.020 --> 00:12:50.900
there are a couple reasons why
you wouldn't want to install

00:12:50.980 --> 00:12:54.190
your shared library or framework.

00:12:55.130 --> 00:13:02.390
The first is, as a developer,
you're probably running as your own

00:13:02.390 --> 00:13:09.930
user ID with permissions that don't
allow you to actually install or

00:13:09.930 --> 00:13:14.960
modify files inside the file system.

00:13:15.140 --> 00:13:19.420
Usually that's done as
root or administrator.

00:13:19.420 --> 00:13:23.610
The second reason you may not be
able to install a shared library is,

00:13:23.610 --> 00:13:25.570
well, you've already got one there.

00:13:25.680 --> 00:13:28.970
You've got a stable
version of your system,

00:13:29.070 --> 00:13:36.210
and you as a developer want to develop,
move forward on your own set of code.

00:13:36.210 --> 00:13:41.860
And therefore you want to develop
and run and compile with your

00:13:42.020 --> 00:13:43.890
own copy of the shared library.

00:13:45.830 --> 00:13:48.760
So at the lowest level,
here's how we can address this.

00:13:48.930 --> 00:13:58.520
There are various environment variables
that control how the dynamic link editor,

00:13:58.520 --> 00:13:59.200
DYLD,

00:13:59.430 --> 00:14:02.070
Accesses and Finds Shared Libraries.

00:14:02.070 --> 00:14:07.430
And if you do end up using these,
you should consult the manual page,

00:14:07.430 --> 00:14:12.380
man-dyld, and find out all you can do
with the dynamic link editor.

00:14:12.790 --> 00:14:17.350
If you're also going to MacHack,
it might provide some interesting tips.

00:14:17.460 --> 00:14:20.880
If you do do this,
be sure to be aware of the gdb

00:14:20.880 --> 00:14:25.850
command info shared libraries,
which prints out all the shared

00:14:25.850 --> 00:14:28.670
libraries used by the debug process.

00:14:29.470 --> 00:14:32.330
Once again,
we're just trying to save you time

00:14:32.430 --> 00:14:34.640
from debugging the wrong thing.

00:14:34.640 --> 00:14:38.310
If you use Project Builder,
we take care of all this for you so that

00:14:38.310 --> 00:14:42.980
you can just build your projects and
click the run button or the debug button

00:14:43.040 --> 00:14:45.020
and we run with the right versions.

00:14:45.170 --> 00:14:50.720
And we'll go into detail about how
to set up Project Builder to do that.

00:14:50.890 --> 00:14:55.300
As a heads up, coming down the road,
we're really encouraging

00:14:55.300 --> 00:14:57.450
using the app packaging model.

00:14:57.830 --> 00:15:01.850
And one of the things we plan to
put into the package are private

00:15:02.270 --> 00:15:05.150
frameworks used by the application.

00:15:05.180 --> 00:15:14.580
We're not quite there yet,
but the intent is the application

00:15:14.580 --> 00:15:15.820
will be completely self-contained.

00:15:18.480 --> 00:15:23.310
Now that, if you put your shared
library inside a framework,

00:15:23.380 --> 00:15:28.020
inside the packaging, it,
not only do you get the

00:15:28.020 --> 00:15:30.730
advantages of the framework,
being able to put your header

00:15:30.740 --> 00:15:37.050
files there and so forth,
but we also have the ability to

00:15:37.050 --> 00:15:38.940
put more than one copy of a shared
library inside the framework.

00:15:39.850 --> 00:15:44.700
Typically, these are binary files.

00:15:44.700 --> 00:15:47.700
The shared libraries
implement the same set of API.

00:15:47.700 --> 00:15:51.780
They're the same version,
but they're just compiled differently

00:15:52.290 --> 00:15:57.830
with different options tailored towards
specific operations you might want to do.

00:15:57.840 --> 00:16:01.830
The standard version of a shared
library is optimized code,

00:16:01.940 --> 00:16:03.350
minimal symbols.

00:16:03.360 --> 00:16:06.380
That's what's used at
runtime and for deployment.

00:16:07.380 --> 00:16:11.440
The debug version is tailored towards

00:16:11.850 --> 00:16:19.230
The development process and doing runtime
error checking at core foundation and

00:16:19.230 --> 00:16:22.120
Carbon do extra checking of parameters.

00:16:22.120 --> 00:16:26.300
They can do internal state
checking to ensure consistency

00:16:26.300 --> 00:16:28.800
that the APIs are used correctly.

00:16:28.810 --> 00:16:32.040
And finally,
there's a profiled version which is

00:16:32.060 --> 00:16:34.790
used with the Gprof profiling system.

00:16:35.220 --> 00:16:38.870
Again,
the low level environment variable that

00:16:38.870 --> 00:16:44.330
controls this is DYLD image suffix,
but Project Builder allows

00:16:44.330 --> 00:16:47.700
you to access these directly.

00:16:48.620 --> 00:16:53.060
So now we'll talk a bit more in
detail about Project Builder itself,

00:16:53.660 --> 00:16:59.150
go over how to configure things,
breakpoints, and then we'll have a demo.

00:17:01.760 --> 00:17:07.300
As we've said, Project Builder enables
cross-project debugging.

00:17:07.350 --> 00:17:11.520
And to do that,
you need to build your projects,

00:17:11.630 --> 00:17:15.980
and specifically the
products of your project,

00:17:16.110 --> 00:17:23.580
and have them put in a common
location so that we can find them

00:17:23.580 --> 00:17:23.580
at compile time and at run time.

00:17:23.900 --> 00:17:27.660
We'll go over in the demo how to do that.

00:17:27.660 --> 00:17:31.800
We use the term executable for the
thing that you're going to debug.

00:17:31.800 --> 00:17:34.800
It can be, for right now, it's a binary.

00:17:34.800 --> 00:17:40.050
It can eventually be Java or it
could be some other kind of program.

00:17:40.330 --> 00:17:42.810
You can set various
settings on the executable,

00:17:42.810 --> 00:17:46.920
such as the arguments,
essentially the command line arguments,

00:17:46.980 --> 00:17:51.480
argv and argc,
passed to the program at launch.

00:17:51.710 --> 00:17:55.600
You can also control choosing
the debugger and such.

00:17:56.970 --> 00:17:59.660
Just to go over a few
things about breakpoints,

00:17:59.920 --> 00:18:03.050
Project Builder has, of course,
standard breakpoints and

00:18:03.050 --> 00:18:05.300
files at specific locations.

00:18:05.320 --> 00:18:08.770
There are also ways to set
breakpoints on functions,

00:18:08.850 --> 00:18:12.800
just via the name of the
function symbolically.

00:18:12.850 --> 00:18:16.770
And that's useful if you want to
break inside a library function,

00:18:16.870 --> 00:18:21.110
such as Carbon,
and see why this function is being

00:18:21.260 --> 00:18:24.030
called and what the stack backtrace is.

00:18:24.300 --> 00:18:28.440
We have a summary of all the
breakpoints in your project,

00:18:28.540 --> 00:18:31.760
and the key word is here,
they're your breakpoints,

00:18:31.760 --> 00:18:36.780
and each member of the development team
has his or her own set of breakpoints

00:18:36.810 --> 00:18:39.800
that are stored independently,
but persistently.

00:18:39.800 --> 00:18:44.300
So now I'd like to bring up Dave Ewing,
who's going to help me

00:18:44.300 --> 00:18:48.640
with the... there he is,
the demo.

00:18:48.990 --> 00:18:51.640
Dave works on our Java debugger.

00:18:55.700 --> 00:18:59.820
All right, if we can have-- all right,
demo three.

00:18:59.820 --> 00:19:00.200
All right.

00:19:00.380 --> 00:19:07.600
First, let's look at the build
preferences in Project Builder.

00:19:07.600 --> 00:19:10.460
And the key here is just want to
show you that there are two settings,

00:19:10.520 --> 00:19:16.000
which are file system paths,
which are where you build.

00:19:16.000 --> 00:19:21.900
And this is very important to set for
cross project debugging and runtime

00:19:22.310 --> 00:19:26.980
settings so we can find your frameworks.

00:19:26.980 --> 00:19:28.590
OK.

00:19:29.490 --> 00:19:32.710
Now let's look at the Targets tab.

00:19:32.870 --> 00:19:38.100
A target has many settings,
and a target logically has an

00:19:38.100 --> 00:19:41.750
executable or a set of executables.

00:19:41.830 --> 00:19:47.630
You can add your own if
your project builds a

00:19:47.630 --> 00:19:48.600
and more.

00:19:48.600 --> 00:19:49.600
The project builder is a library.

00:19:49.600 --> 00:19:52.250
Or if you're working
with a legacy project,

00:19:52.250 --> 00:19:56.570
so-called, that uses the Make system,
it's an open source project,

00:19:56.670 --> 00:20:00.820
you can point Project Builder to
the executable you want to run.

00:20:00.820 --> 00:20:03.940
Down at the bottom,
you can see three tabs that control the

00:20:04.110 --> 00:20:06.630
settings for the executable arguments.

00:20:06.990 --> 00:20:11.800
Let's go to Debugger just quickly.

00:20:11.800 --> 00:20:15.880
We know, in most cases,
what debugger to use.

00:20:15.880 --> 00:20:17.110
There are various corner cases.

00:20:17.210 --> 00:20:21.820
If you're debugging Java and
you've got native code and you

00:20:21.870 --> 00:20:26.150
want to use the gdb debugger,
that's what you'd come

00:20:26.160 --> 00:20:28.040
here and select that.

00:20:28.040 --> 00:20:31.550
Then there's a Runtime tab.

00:20:31.590 --> 00:20:35.700
I should mention that this version
of Project Builder is post-DP4.

00:20:35.700 --> 00:20:38.860
The Runtime tab isn't on there.

00:20:38.860 --> 00:20:39.810
But it gives you an idea.

00:20:39.930 --> 00:20:45.860
We can now select which variants
of the system framework.

00:20:45.860 --> 00:20:46.860
Same works to use.

00:20:46.860 --> 00:20:47.780
Standard, Debugger, Profile.

00:20:47.920 --> 00:20:48.860
All right.

00:20:48.860 --> 00:20:54.670
So let's go back to the Arguments tab.

00:20:55.660 --> 00:20:56.100
Great.

00:20:56.100 --> 00:21:00.440
And we've added some arguments there,
and let's select the

00:21:00.440 --> 00:21:03.400
trace and crash option.

00:21:04.020 --> 00:21:04.920
and we'll run with it.

00:21:05.230 --> 00:21:08.700
This is appearance sample,
it's the standard example.

00:21:08.700 --> 00:21:12.890
We've just added a few features
to look at these arguments.

00:21:12.890 --> 00:21:17.250
If you see, we go to the slider,
and just move the slider a little bit.

00:21:17.260 --> 00:21:19.400
We're printing out the
value of the slider.

00:21:19.400 --> 00:21:21.850
The trace option controls that.

00:21:21.850 --> 00:21:25.960
And if we move the slider
all the way to the left,

00:21:26.050 --> 00:21:30.240
it's too big and we've crashed.

00:21:30.300 --> 00:21:34.280
Just to note how to read the output here,
it says your program is

00:21:34.280 --> 00:21:36.500
exited with a signal.

00:21:36.500 --> 00:21:41.700
That's the Unix way of
saying there was an error,

00:21:41.720 --> 00:21:46.870
in this case a bus error,
which means we've referenced some

00:21:46.870 --> 00:21:49.760
memory that we shouldn't have.

00:21:49.760 --> 00:21:51.770
All right.

00:21:51.940 --> 00:21:54.770
Let's quickly look at
the breakpoints tab.

00:21:54.920 --> 00:21:59.560
Just so you know,
list the breakpoints in a file.

00:21:59.560 --> 00:22:03.140
If you double-click on it,
it will take you to the file

00:22:03.160 --> 00:22:03.890
and show you the breakpoint.

00:22:04.030 --> 00:22:05.900
Good way to navigate.

00:22:05.900 --> 00:22:10.900
Breakpoints in Project Builder
can be enabled or disabled.

00:22:10.900 --> 00:22:15.800
A disabled breakpoint remains in
your persistent set of breakpoints,

00:22:15.990 --> 00:22:17.900
but it's not used by the debugger.

00:22:18.040 --> 00:22:24.900
It's a good way to keep breakpoints
around but not trip over them every time.

00:22:25.160 --> 00:22:28.490
Now let's fire up the debugger.

00:22:32.420 --> 00:22:34.400
Let's make it a little bigger.

00:22:34.400 --> 00:22:42.510
And we move the slider this time.

00:22:43.380 --> 00:22:49.160
Trap on the breakpoints,
get a list of threads in the

00:22:49.300 --> 00:22:51.600
stack we're in and variables.

00:22:51.600 --> 00:22:55.710
All right, let's step--

00:22:56.880 --> 00:22:59.510
Just a little bit to show you.

00:22:59.830 --> 00:23:04.680
Can you close up the console, Dave,
so we can-- there we go.

00:23:04.680 --> 00:23:09.020
You can see the local item value changed.

00:23:10.620 --> 00:23:12.480
Now this is C++ program.

00:23:12.480 --> 00:23:19.360
There's the implicit this
pointer pass to each method.

00:23:20.370 --> 00:23:26.890
The way data is displayed for C++
objects is each superclass of your...

00:23:27.610 --> 00:23:35.300
its member data is represented as kind of
a pseudo-structure that you can disclose.

00:23:35.300 --> 00:23:40.260
Now we see there's a F dialog pointer,
and if we want to look at that, we say,

00:23:40.370 --> 00:23:43.230
oops, we don't have the type
information for that.

00:23:43.330 --> 00:23:45.300
That's an opaque type.

00:23:45.300 --> 00:23:51.200
So how would we go about seeing what
information about this particular dialog?

00:23:51.300 --> 00:23:54.980
So right now,
we bring down the console and

00:23:54.980 --> 00:23:57.300
we can talk to gdb directly.

00:23:57.400 --> 00:24:01.300
And Dave's going to
enter the magic command.

00:24:01.300 --> 00:24:05.290
We tell gdb to call a function.

00:24:06.810 --> 00:24:09.680
In the inferior,
so this function is actually

00:24:09.820 --> 00:24:15.060
going to be executed by the debug
process in its address space,

00:24:15.060 --> 00:24:20.700
and gdb is going to evaluate symbolic
arguments like F dialogue and pass,

00:24:20.750 --> 00:24:25.700
essentially set up the calling
call site to call this function.

00:24:25.700 --> 00:24:32.100
And you can see now we've got some
information about the dialogue and

00:24:32.150 --> 00:24:37.540
Let's just do print resource change
just to show kind of some global

00:24:37.540 --> 00:24:42.970
information that you can get from Carbon.

00:24:56.910 --> 00:25:02.820
We're running a little short,
so let's just demo the symbolic

00:25:02.930 --> 00:25:07.560
breakpoint just to show
you how that works quickly.

00:25:07.560 --> 00:25:12.600
So you click New and you get a
text field to enter the name of a

00:25:12.600 --> 00:25:17.470
function that you'd like to break at,
and you can just select

00:25:18.350 --> 00:25:25.590
and some text in your code,
paste it in there.

00:25:25.590 --> 00:25:25.590
And now if we continue.

00:25:28.370 --> 00:25:34.300
We see that we hit that and can crawl
up the stack to find what we want.

00:25:34.320 --> 00:25:36.200
Okay, I think we're running
a little short on time,

00:25:36.300 --> 00:25:38.280
so thanks Dave.

00:25:41.120 --> 00:25:45.100
If we can go back to the slides, please.

00:25:45.110 --> 00:25:48.410
Just a note about what we're
planning in the future.

00:25:48.530 --> 00:25:52.610
Project Builders are work in progress.

00:25:52.600 --> 00:25:58.650
We know we have a large constituency
and each group has different needs.

00:25:58.700 --> 00:25:59.600
Some want low-level,
some want more high-level.

00:25:59.600 --> 00:26:06.020
We're planning to do all
that in the coming months.

00:26:06.030 --> 00:26:09.840
Dave's working on Java debugging
which is coming along.

00:26:09.920 --> 00:26:15.310
So later on we'll be giving you the
email list for feedback and we'd

00:26:15.420 --> 00:26:20.510
really appreciate any feedback on the
debugging system and specifically what

00:26:20.510 --> 00:26:25.870
features you'd uh... like to see in a
priority order so we can get into you

00:26:26.240 --> 00:26:27.480
When you need them.

00:26:27.490 --> 00:26:29.340
All right.

00:26:29.350 --> 00:26:31.520
Now I'd like to bring up Klee Dienes.

00:26:31.650 --> 00:26:38.190
He's our gdb expert.

00:26:42.800 --> 00:30:54.100
[Transcript missing]

00:30:55.190 --> 00:30:58.040
Once it's connected,
we're going to go ahead and

00:30:58.040 --> 00:31:00.280
set a breakpoint in Open,
which is the Unix system

00:31:00.280 --> 00:31:01.840
call for opening a file.

00:31:02.010 --> 00:31:04.950
And we're going to go ahead
and continue the finder.

00:31:07.200 --> 00:31:10.840
and Dave is going to do something
to cause it to open a file.

00:31:10.840 --> 00:31:13.310
And you'll see over
in the command window,

00:31:13.390 --> 00:31:15.200
the finder has stopped and opened.

00:31:15.200 --> 00:31:19.580
We're going to take a look around,
sort of snoop a bit to see where we are,

00:31:19.580 --> 00:31:21.020
maybe get a backtrace.

00:31:22.980 --> 00:31:26.970
So you can see we've gone
through some chain of C++ calls,

00:31:27.010 --> 00:31:29.190
as I wouldn't even
dream of understanding.

00:31:29.220 --> 00:31:32.690
We're going to take a
look at our registers.

00:31:34.700 --> 00:31:36.940
Take a look at our list of threads.

00:31:36.940 --> 00:31:42.440
Basically, any information you might want
about the process is there.

00:31:42.440 --> 00:31:43.960
I'm not going to go through
the whole list of commands,

00:31:44.050 --> 00:31:45.700
but there's a ton of them.

00:31:45.700 --> 00:31:53.320
You can, more interestingly,
give it some expressions to look at.

00:31:53.320 --> 00:31:53.320
So you might want to... I guess
first we'll be looking at the...

00:31:54.130 --> 00:31:56.770
You may as well finish.

00:31:56.910 --> 00:31:59.350
You can give it commands
to apply to all commands.

00:31:59.360 --> 00:32:02.950
In this case, we've gotten a backtrace
of all of the threads.

00:32:04.280 --> 00:32:05.900
Or you might want to just
give it an expression.

00:32:05.900 --> 00:32:11.240
So you might want to just tell it
to print the contents of register 3.

00:32:11.240 --> 00:32:13.250
And I'll give it to you as an integer,
which isn't very useful,

00:32:13.270 --> 00:32:15.710
so you might tell it to print it in hex.

00:32:18.390 --> 00:32:19.900
Which really still isn't all that useful.

00:32:19.900 --> 00:32:22.050
What you really want to do
is cast it to a car star and

00:32:22.070 --> 00:32:23.930
take a look at it that way.

00:32:28.740 --> 00:32:30.820
I'm not going to go too
far into the expression.

00:32:30.820 --> 00:32:34.580
Basically, anything that's a legal
C expression is also an

00:32:34.580 --> 00:32:38.760
expression that you can type here,
including function calls, commas,

00:32:38.970 --> 00:32:40.240
anything you feel like.

00:32:40.240 --> 00:32:43.460
As long as it's not a statement,
you're good to go.

00:32:43.460 --> 00:32:45.540
What I'm going to do a little
bit more interesting is,

00:32:45.540 --> 00:32:49.160
let's say I want to see all files
that have been opened by this program.

00:32:49.160 --> 00:32:53.700
I'm going to set a command
on this breakpoint,

00:32:53.720 --> 00:32:56.640
and what I'm going to do is I'm
going to tell it first to not print

00:32:56.640 --> 00:32:58.260
the breakpoint line every time.

00:32:58.970 --> 00:33:02.490
Then I'm going to tell it
to print the first argument,

00:33:02.580 --> 00:33:07.440
which I just happen to know is R3 still.

00:33:07.440 --> 00:33:08.980
And then I'm going to tell it
to just go ahead and continue

00:33:08.980 --> 00:33:14.160
without stopping for me.

00:33:14.160 --> 00:33:16.300
And now when I continue...

00:33:21.800 --> 00:33:25.640
I can see all the files and all their
gory detail that's being opened.

00:33:25.640 --> 00:33:28.450
This is interesting also just
because it's highly scriptable,

00:33:28.510 --> 00:33:32.400
so if you need to get output
logs or in some other capacity,

00:33:32.400 --> 00:33:33.300
you can do that.

00:33:33.300 --> 00:33:37.390
You'll notice a lot of those
files are not all that meaningful.

00:33:37.680 --> 00:33:41.240
They're basically an artifact
of our HFS implementation.

00:33:41.300 --> 00:33:45.870
In this case, what I'd like to do is
just focus on the plist,

00:33:45.870 --> 00:33:48.300
on our property list files.

00:33:48.300 --> 00:33:52.970
So let's add a condition to the
breakpoint that lets us filter out

00:33:52.970 --> 00:33:56.270
everything that does not end in .plist.

00:33:56.360 --> 00:33:58.870
So if we're just interested
to see which files that end

00:33:58.870 --> 00:34:02.160
in plist are getting opened,
we can actually attach a condition.

00:34:02.300 --> 00:34:06.020
In this case,
we're just going to take R3 and we're

00:34:06.020 --> 00:34:09.280
going to string compare it with .plist.

00:34:09.310 --> 00:34:11.990
And if that expression
doesn't evaluate true,

00:34:11.990 --> 00:34:15.450
in this case if it doesn't end in plist,
it's going to just skip

00:34:15.450 --> 00:34:17.260
that breakpoint entirely.

00:34:17.300 --> 00:34:21.060
Subtitles by the Amara.org community
And so now when we continue,

00:34:30.820 --> 00:34:32.940
Now we just see the plists that
are being loaded by the system.

00:34:32.940 --> 00:34:35.420
Thank you.

00:34:38.730 --> 00:34:42.800
And certainly you can come up
with more elaborate examples.

00:34:42.800 --> 00:34:44.400
I'm sure everybody will have
their own things that they

00:34:44.400 --> 00:34:46.420
might want to do with that.

00:34:46.470 --> 00:34:51.160
And really what this leads
into is how to extend gdb.

00:34:51.180 --> 00:34:55.720
And so as I mentioned before,
gdb has a configuration language.

00:34:55.740 --> 00:35:01.640
It's used by our system to configure
gdb with specific user interface things.

00:35:01.640 --> 00:35:05.540
But it's also something that you
can use on your own to extend gdb.

00:35:05.540 --> 00:35:09.940
So what I'm going to be showing is
basically a small profiling library

00:35:09.940 --> 00:35:14.340
that we-- basically I had to add to gdb
one night about 3:00 in the morning.

00:35:14.340 --> 00:35:17.210
I was desperate to figure
out a profiling problem,

00:35:17.290 --> 00:35:18.900
desperate to get something to speed up.

00:35:18.960 --> 00:35:22.410
And I just really needed to know
how long individual source lines in

00:35:22.410 --> 00:35:25.210
my program were taking to execute.

00:35:25.290 --> 00:35:27.720
So I genned up a little tiny program.

00:35:27.890 --> 00:35:31.600
Most of that's documentation
that defines two commands.

00:35:31.700 --> 00:35:35.480
One is mark,
which sets a stopwatch for CPU time.

00:35:35.540 --> 00:35:39.250
And the other is cur,
which tells you how much CPU time you've

00:35:39.250 --> 00:35:42.040
used since the last time you typed mark.

00:35:42.040 --> 00:35:48.370
Basically it just calls the getRUsage
function in the system to tell you

00:35:48.370 --> 00:35:50.340
how much CPU time has been used.

00:35:50.340 --> 00:35:51.760
And so what we're going to do is
we're going to take a look at a small

00:35:51.760 --> 00:35:58.140
program that I rigged up that's just
basically allocates 64 meg of memory

00:35:58.140 --> 00:36:00.440
and zeroes it two different ways.

00:36:00.440 --> 00:36:01.630
One way is the slow way.

00:36:01.740 --> 00:36:03.340
The other way is the fast way.

00:36:03.340 --> 00:36:04.540
And it's not a very interesting program.

00:36:04.540 --> 00:36:05.340
But when we take a look at it,
it's pretty interesting.

00:36:05.340 --> 00:36:06.890
Look at it.

00:36:08.900 --> 00:36:11.460
He's just going to load
the iProfiling library.

00:36:11.460 --> 00:36:13.140
So we take a look at main.

00:36:13.140 --> 00:36:15.170
One more.

00:36:16.390 --> 00:36:20.730
You'll see it makes a big buffer,
zeroes it the fast way,

00:36:20.730 --> 00:36:22.890
if you can list that.

00:36:28.240 --> 00:36:31.260
and then list the zeros at the slow way.

00:36:31.300 --> 00:36:34.530
And what we'll find is
that when we run this,

00:36:36.630 --> 00:36:37.600
I'm sorry?

00:36:37.600 --> 00:36:38.600
I've got a break point.

00:36:38.680 --> 00:36:39.600
Oh, I'd love a break point.

00:36:39.600 --> 00:36:40.590
Thank you.

00:36:40.600 --> 00:36:40.960
That would be very good.

00:36:43.350 --> 00:36:45.140
When we run this,
we're going to step forward

00:36:45.180 --> 00:36:48.400
to where we want to end up.

00:36:48.400 --> 00:36:50.230
We're going to step to
right before the FAST 0.

00:36:50.400 --> 00:36:52.400
We're going to set a mark.

00:36:52.400 --> 00:36:56.630
We're going to step over FAST 0.

00:37:00.260 --> 00:37:03.350
Step over, zero.

00:37:03.410 --> 00:37:07.030
We're going to allocate 64 meg,
and then we're going to type

00:37:07.080 --> 00:37:09.500
curr to see how long that took.

00:37:09.540 --> 00:37:11.740
It should take about half a second.

00:37:11.770 --> 00:37:14.080
Now we're going to reset the mark.

00:37:17.900 --> 00:37:22.000
We're going to step
over to the next line.

00:37:22.020 --> 00:37:25.760
And this one, I'm guessing,
will take about two seconds.

00:37:26.120 --> 00:37:28.430
So, you know, you can just step right
through your program,

00:37:28.430 --> 00:37:30.700
see how long each individual
function is taking,

00:37:30.850 --> 00:37:32.950
real visual way of
finding the bottlenecks.

00:37:33.010 --> 00:37:37.170
And what's interesting about this isn't
so much its use as a profiling tool,

00:37:37.170 --> 00:37:39.350
although it really saved
my butt one Sunday night.

00:37:39.360 --> 00:37:45.000
It's something that you're able to
rig up with very little effort just

00:37:45.000 --> 00:37:47.860
by adding a few commands to gdb.

00:37:47.960 --> 00:37:53.040
And I'm sure many of you will find
interesting ways to expand gdb in ways

00:37:53.190 --> 00:37:56.260
appropriate to what you're working on.

00:37:56.260 --> 00:37:59.560
You know, one thing that surprised me
just before we were putting

00:37:59.560 --> 00:38:04.160
DP4 out was one of our support
engineers sent us an email saying,

00:38:04.160 --> 00:38:08.250
"Hey, I really missed all
those max bugs commands,

00:38:08.250 --> 00:38:12.750
so I rigged up a quick max
bug compatibility library."

00:38:14.780 --> 00:38:17.940
And so, you know,
I gave it a try and I even,

00:38:17.940 --> 00:38:20.530
I tried actually many of the Mac's bugs,
most of the Mac's bugs commands

00:38:20.540 --> 00:38:23.730
that I knew and discovered actually
a good number of them work.

00:38:23.850 --> 00:38:26.480
And again, you know,
it's not so much the commands as the

00:38:26.480 --> 00:38:30.700
fact that you can add these things
pretty much however you might like.

00:38:30.700 --> 00:38:37.090
So with that,
I will turn the stage back over

00:38:37.090 --> 00:38:37.090
to Dave and I thank you very much.

00:38:42.900 --> 00:41:54.300
[Transcript missing]

00:41:57.780 --> 00:42:00.120
Well, if you were here at
our session last year,

00:42:00.120 --> 00:42:03.000
we talked about debugging on Mac OS X.

00:42:03.020 --> 00:42:06.030
And at that point,
Apple had helped us put together a

00:42:06.090 --> 00:42:11.760
debug node that let us debug remotely
from a Mac OS 9 machine to Mac OS X.

00:42:12.100 --> 00:42:18.340
And we've been busy since then
bringing CodeWarrior to Mac OS X.

00:42:18.700 --> 00:42:24.090
And so today, I'd like to talk a little
bit about what we've got now.

00:42:24.210 --> 00:42:27.650
This is all on a beta CD of
the Pro 6 tools that we've been

00:42:27.650 --> 00:42:29.390
handing out here at the show.

00:42:29.520 --> 00:42:31.660
The actual tools will
ship later this year,

00:42:31.810 --> 00:42:36.480
but the CD has tools that you can
start now building and debugging

00:42:36.480 --> 00:42:38.740
applications on Mac OS X.

00:42:38.740 --> 00:42:44.140
So what's really new in these tools
is that the IDE is fully carbonized.

00:42:44.140 --> 00:42:46.220
It runs natively on Mac OS X.

00:42:46.220 --> 00:42:48.670
You can do single machine debugging.

00:42:48.680 --> 00:42:50.930
So you can take all of
the Carbon PEF apps that

00:42:50.940 --> 00:42:53.580
you've been running on 9,
carbonize them,

00:42:53.580 --> 00:42:58.820
and use the same debugger on 10
that you've been debugging on 9.

00:42:58.820 --> 00:43:05.180
We've also done a lot more work in
two-machine debugging for this release.

00:43:05.180 --> 00:43:10.580
Before we did 9 to 9 debugging,
and we also did debugging from 9 to 10.

00:43:10.580 --> 00:43:13.230
But we've fleshed that out now
so you can really do four-way

00:43:13.230 --> 00:43:17.830
debugging from Mac OS 9 to Mac OS 9,
from 9 to 10, from 10 to 9,

00:43:17.830 --> 00:43:19.760
and also from 10 to 10.

00:43:19.760 --> 00:43:22.980
So you'll have a lot of options based on
what your host and target platform is.

00:43:22.980 --> 00:43:27.390
And as Dave talked about,
the Metrix tools right now build

00:43:27.390 --> 00:43:31.300
Carbon PEF applications for Mac OS X.

00:43:31.300 --> 00:43:35.630
Our Maco tools are in development,
and you'll see those in later releases.

00:43:35.640 --> 00:43:37.820
Right now these are designed to
transition your Carbon PEF apps

00:43:37.940 --> 00:43:42.330
that you've been building on
9 and bring them to 10 and let

00:43:42.330 --> 00:43:45.180
you debug them the same way.

00:43:45.180 --> 00:43:48.770
So with that, I'll go to a demo and show
you what you can do with the

00:43:48.770 --> 00:43:52.890
tools that are on the Pro 6 CD.

00:43:54.310 --> 00:43:57.330
The first thing I'm going
to do is start DebugNub.

00:43:57.500 --> 00:44:02.870
DebugNub is the piece of debugging
technology that Dave and Klee and his

00:44:02.900 --> 00:44:06.870
team collaborated on with Metroworks
to provide a link between the

00:44:06.870 --> 00:44:09.200
CodeWarrior debug protocols and gdb.

00:44:09.200 --> 00:44:15.070
With the tools on the CD,
you have to start DebugNub manually,

00:44:15.380 --> 00:44:18.930
but be sure and sign up to the
beta program and future releases

00:44:18.930 --> 00:44:21.520
will do this for you automatically,
so you'll have the same seamless

00:44:21.520 --> 00:44:23.190
debugging experience you have online.

00:44:23.200 --> 00:44:30.670
So now I'll start the IDE and
open up a power plant sample.

00:44:32.600 --> 00:44:36.060
Now, if any of you have tried to use
the two-machine debugger that

00:44:36.070 --> 00:44:39.600
we shipped with the 5.3 tools,
I'll show you a couple differences

00:44:39.600 --> 00:44:41.590
in doing remote debugging.

00:44:41.600 --> 00:44:46.300
The user interface for setting
up remote debugging could be kind

00:44:46.470 --> 00:44:50.600
of complicated with those tools
and wasn't very straightforward,

00:44:50.600 --> 00:44:51.600
so we've done a lot of work on that.

00:44:51.600 --> 00:44:56.620
Now, you can create a whole set of
address book-style remote connection

00:44:56.620 --> 00:45:00.580
preferences where you can name
specific remote connections,

00:45:00.630 --> 00:45:03.760
pick the debugger you're going to use,
and then enter the specific

00:45:03.760 --> 00:45:05.590
IP address for them.

00:45:05.590 --> 00:45:10.100
So, after you create a connection type,

00:45:11.410 --> 00:45:18.110
In the Remote Connections panel,
you can go to your

00:45:18.110 --> 00:45:18.110
project's target settings.

00:45:19.660 --> 00:45:22.240
and and tell it specifically,
you can enable remote debugging,

00:45:22.240 --> 00:45:25.280
and tell it specifically which connection
type you're going to work with.

00:45:25.290 --> 00:45:29.150
Also specify the remote download path,
which if you're debugging on

00:45:29.220 --> 00:45:33.320
Mac OS X needs to be a Unix-style path,
and also tell the debugger to launch

00:45:33.420 --> 00:45:37.460
a remote host application if you're
remote debugging a shared library.

00:45:37.460 --> 00:45:40.220
But for this demo,
I'm going to show single

00:45:40.220 --> 00:45:43.210
machine debugging,
so I'll leave that turned off.

00:45:46.210 --> 00:45:50.100
and go to the power plant sample.

00:45:50.100 --> 00:45:54.090
And ask it to debug.

00:45:56.500 --> 00:45:59.920
So what it's doing now is
launching your Carbon PEF app and

00:46:00.270 --> 00:46:04.910
stopping at the first breakpoint.

00:46:08.000 --> 00:46:11.800
Let me resize a couple windows.

00:46:11.800 --> 00:46:13.970
So at this point,
you're in the same CodeWarrio

00:46:13.970 --> 00:46:16.000
debugger that you've been using on 9.

00:46:16.000 --> 00:46:26.460
You can do all the normal things, step,
set breakpoints, look at variables,

00:46:26.460 --> 00:46:32.510
look at registers, processes,
all the same user interfaces

00:46:32.510 --> 00:46:32.510
here available to you.

00:46:34.490 --> 00:46:41.960
Breakpoints, run to those,
and then we continue running.

00:46:41.960 --> 00:46:47.000
We have our power plant
appearance application.

00:46:50.720 --> 00:46:57.990
find the source that creates a new
window instead of breakpoint here.

00:47:02.240 --> 00:47:04.180
And then we stop at that breakpoint.

00:47:04.280 --> 00:47:07.540
So as you can see here,
I'm not going to try and demo all

00:47:07.540 --> 00:47:10.870
the debugger features in CodeWarrior,
because you're probably

00:47:10.870 --> 00:47:11.820
familiar with them.

00:47:11.840 --> 00:47:14.340
Really,
our news here is just that all those

00:47:14.340 --> 00:47:19.090
same features are available natively on
Mac OS X for single machine debugging.

00:47:27.880 --> 00:47:31.200
So that's really the demonstration
that all the same things you've

00:47:31.260 --> 00:47:35.050
been used to doing on 9 can
now work on 10 on CodeWarrior.

00:47:35.090 --> 00:47:38.830
We're also in the future working
with Apple to provide an interface

00:47:38.830 --> 00:47:43.300
to some of the advanced gdb features
that Klee came out and talked about.

00:47:43.310 --> 00:47:46.530
So we'll be extending CodeWarrior
debugging support on 10 to let

00:47:46.540 --> 00:47:51.590
you do some of the things that gdb
makes possible on 10 that weren't

00:47:51.590 --> 00:47:54.690
really very easy to do on 9.

00:47:54.740 --> 00:47:58.260
So we'll be extending the user
interface to let you do those things

00:47:58.360 --> 00:48:00.950
from inside Code Warrior as well.

00:48:04.990 --> 00:48:07.340
Well, that's it for the CodeWarrior demo.

00:48:07.340 --> 00:48:12.610
Again, all of the tools I showed you here
are available on the Pro 6 beta CD.

00:48:12.620 --> 00:48:17.650
And that's been available
to people at our sessions.

00:48:17.700 --> 00:48:19.440
We've been handing those out at the show.

00:48:19.440 --> 00:48:21.660
And again,
please get into the beta program,

00:48:21.660 --> 00:48:26.010
because we'll have new releases
over the summer that add additional

00:48:26.020 --> 00:48:31.970
debugging support for Mac OS X and
just sort of polish up the Pro 6 tools.

00:48:32.370 --> 00:48:39.310
Be sure and also send your feedback
to our website and send that

00:48:39.310 --> 00:48:46.710
to us through the beta program.

00:48:46.900 --> 00:48:47.910
Now, here's Godfrey again.

00:48:49.800 --> 00:48:50.900
Big hands for Ken.

00:48:50.900 --> 00:48:51.980
Thank you very much, Ken.

00:48:51.980 --> 00:48:57.680
Okay, so this is just a slide
giving you some contact.

00:48:57.680 --> 00:49:00.940
I repeat the developer
tools group email address,

00:49:01.030 --> 00:49:03.780
so you can contact us with
feedback and your ideas.

00:49:03.780 --> 00:49:06.590
You can always contact me as
the technology manager for

00:49:06.590 --> 00:49:09.010
development tools at Apple,
and Ken Ryall,

00:49:09.010 --> 00:49:13.300
the core debugger engineering
lead at Metrowerks.

00:49:13.300 --> 00:49:17.960
And with that, we have one more session
in the tools track.

00:49:18.600 --> 00:49:22.020
Immediately after this one in Hall C,
we have a feedback forum for

00:49:22.180 --> 00:49:23.490
the Apple developer tools.

00:49:23.730 --> 00:49:25.320
Hope to see a good number of you there.

00:49:25.320 --> 00:49:29.800
Okay, with that, we can bring the house
lights up and start Q&A.

00:49:29.800 --> 00:49:31.710
Can I ask our presenters
to come up on stage?