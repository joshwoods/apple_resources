WEBVTT

00:00:07.550 --> 00:00:08.650
Hello and welcome.

00:00:08.760 --> 00:00:13.460
A line from one of my
favorite stories as a child.

00:00:13.520 --> 00:00:17.160
"We have so much time
and so little to see.

00:00:17.190 --> 00:00:21.620
Wait, strike that,
reverse it." Willy Wonka from

00:00:21.620 --> 00:00:23.880
Charlie and the Chocolate Factory.

00:00:24.350 --> 00:00:28.240
Let me roll up my sleeves here
because we do have a lot to talk about

00:00:28.320 --> 00:00:31.330
today and I'd like to get started.

00:00:32.190 --> 00:00:35.890
Let me give you a brief
outline of what the story was.

00:00:36.190 --> 00:00:38.210
Basically,
for the first time in a decade,

00:00:38.480 --> 00:00:42.820
Willy Wonka, an eccentric,
reclusive chocolate maker,

00:00:42.820 --> 00:00:45.600
opens his factory doors to the public.

00:00:45.700 --> 00:00:50.330
Five lucky children who find a golden
ticket in their Wonka chocolate

00:00:50.340 --> 00:00:55.110
bars receive a private tour of the
factory run by Willy Wonka and his

00:00:55.110 --> 00:00:57.900
crew of loyal Oompa Loompa workers.

00:00:58.000 --> 00:01:02.600
Now, I'm not going to tell you who
Willy Wonka is at our chocolate factory,

00:01:02.710 --> 00:01:05.910
but consider me your Oompa Loompa
guide to the wild and wonderful

00:01:05.910 --> 00:01:08.900
world of font management on Mac OS.

00:01:09.030 --> 00:01:11.580
The factory doors are open.

00:01:13.480 --> 00:01:17.840
Let's begin with a definition
of font management.

00:01:17.950 --> 00:01:24.000
From a user's perspective,
it consists of installing, activating,

00:01:24.070 --> 00:01:27.710
and deactivating fonts for use
in any number of applications,

00:01:27.710 --> 00:01:31.280
including page layout programs,
web browsers,

00:01:31.330 --> 00:01:33.740
and even the humble text editor.

00:01:33.870 --> 00:01:37.100
From a developer standpoint,
it consists of a programming

00:01:37.100 --> 00:01:43.390
interface for accessing and modifying
a central repository of font data.

00:01:43.550 --> 00:01:48.200
Application developers use it to create
standard user interface elements,

00:01:48.210 --> 00:01:50.410
like the Font Panel or the Font Menu.

00:01:51.110 --> 00:01:56.740
They also use it to map a user
selection to a reference that can

00:01:56.740 --> 00:02:01.660
be passed to the graphics system to
render text on the display or on other

00:02:01.710 --> 00:02:04.490
graphics devices like the printer.

00:02:05.330 --> 00:02:10.000
Now, the evolution of font management
on Mac OS can be divided,

00:02:10.000 --> 00:02:13.200
actually, into two distinct periods.

00:02:13.200 --> 00:02:17.920
The first period is marked by a
long series of incremental changes

00:02:18.210 --> 00:02:22.610
to a design that has remained
fundamentally unchanged since the

00:02:22.610 --> 00:02:26.190
introduction of the Macintosh in 1984.

00:02:27.180 --> 00:02:30.940
The second period is
characterized by a transition,

00:02:30.980 --> 00:02:34.030
a transition to Apple-type services.

00:02:34.060 --> 00:02:38.590
It's a completely new font architecture
that was designed from the beginning

00:02:38.970 --> 00:02:43.990
as an industrial-strength font
database management system.

00:02:44.970 --> 00:02:52.040
Now, the key point of this session
today is that this transition

00:02:52.040 --> 00:02:55.200
as of Mac OS X is complete.

00:02:55.240 --> 00:02:58.980
What you'll learn are the things as
a developer that you'll need to do

00:02:59.190 --> 00:03:03.560
to take advantage of the features
provided by this new font architecture,

00:03:03.710 --> 00:03:10.680
and also what steps you'll need to do
to remove dependencies on the old model,

00:03:10.680 --> 00:03:12.120
which has completely
gone away on Mac OS X.

00:03:16.500 --> 00:03:21.770
Traditionally, the responsibility for
managing fonts resides with

00:03:21.900 --> 00:03:26.830
the font folder and the finder,
which in turn depend on the resource

00:03:26.830 --> 00:03:33.100
manager and the font manager to populate
the database and manage that information.

00:03:34.200 --> 00:03:38.030
This design relies heavily
on the Resource Manager,

00:03:38.080 --> 00:03:43.180
which was never intended or
designed to handle the data

00:03:43.180 --> 00:03:49.750
retrieval and storage needs of
most professional font collections.

00:03:49.700 --> 00:03:59.200
[Transcript missing]

00:03:59.780 --> 00:04:01.900
The underlying implementation.

00:04:02.050 --> 00:04:05.400
They also implement their own
auxiliary font management systems,

00:04:05.550 --> 00:04:07.870
all of which has to be
synchronized with the central

00:04:07.870 --> 00:04:12.030
database through system patches,
undocumented routines,

00:04:12.230 --> 00:04:16.270
and internal data structures of the
Font Manager and Resource Manager.

00:04:20.520 --> 00:04:24.140
Now,
the existing implementation for managing

00:04:24.140 --> 00:04:29.350
the font files is a descendant of the
original font desk accessory mover,

00:04:29.350 --> 00:04:34.540
which let users manipulate the contents
of a monolithic system suitcase file.

00:04:35.920 --> 00:04:39.940
With the development of TrueType,
fonts were no longer just bitmap

00:04:39.940 --> 00:04:43.600
fonts that could fit within
the system suitcase files.

00:04:43.710 --> 00:04:47.770
They became larger, more complex,
and more numerous as

00:04:47.770 --> 00:04:50.000
people began to adopt them.

00:04:50.860 --> 00:04:54.390
When the functionality of the mover
was integrated with the finder,

00:04:54.390 --> 00:04:58.040
the Font Manager and the
Resource Manager were modified to

00:04:58.040 --> 00:05:07.180
create the illusion of a single system
suitcase file from a multitude of font

00:05:07.180 --> 00:05:07.180
files located within the fonts folder.

00:05:08.570 --> 00:05:11.460
Third-party developers, again,
as I mentioned before,

00:05:11.480 --> 00:05:13.780
reverse engineered some
of this implementation and

00:05:13.780 --> 00:05:15.600
figured out what was happening.

00:05:15.600 --> 00:05:20.910
And a lot of it was actually
documented openly within Inside Mac.

00:05:22.000 --> 00:05:28.140
They created system patches that didn't
necessarily work together very well.

00:05:28.240 --> 00:05:31.210
They duplicated functionality
that was eventually developed

00:05:31.210 --> 00:05:36.110
within the system itself and were
very fragile to changes within the

00:05:36.110 --> 00:05:38.760
implementation of the operating system.

00:05:38.970 --> 00:05:46.780
Some examples of these font management
utilities include Adobe Type Manager,

00:05:46.800 --> 00:05:48.330
Font Reserve, Master Juggler,
and Suitcase.

00:05:51.950 --> 00:05:55.720
These font management utilities really
came about because they were designed

00:05:55.720 --> 00:06:00.090
to address some of the inherent
limitations in the system suitcase model.

00:06:00.470 --> 00:06:03.930
First and foremost,
we have the limitation that all

00:06:04.120 --> 00:06:09.700
fonts must be referenced through font
resources and the font suitcase file.

00:06:10.660 --> 00:06:14.190
An example of how this
affects the regular user is

00:06:14.190 --> 00:06:20.090
Adobe Type Manager and the requirement
that PostScript Type 1 fonts,

00:06:20.090 --> 00:06:23.630
even though they stood alone as
separate outline files that ATM could

00:06:23.630 --> 00:06:28.800
render and display on screen,
required a dummy font suitcase file

00:06:28.870 --> 00:06:35.770
with at least one bitmap file in there
that was never really used to represent

00:06:35.990 --> 00:06:37.030
each outline font that was available.

00:06:38.830 --> 00:06:42.720
In addition to this,
only a fixed number of files can be

00:06:42.850 --> 00:06:49.190
installed in the Fonts folder for use
by the Font Management System on Mac OS.

00:06:49.520 --> 00:06:52.870
Most font management utilities
work around this limitation by

00:06:52.870 --> 00:06:59.440
allowing users to activate and
deactivate selectively sets of fonts.

00:07:02.120 --> 00:07:06.650
Since these font resources must
coexist in the resource chain as

00:07:06.720 --> 00:07:10.720
part of the system suitcase file,
the Font Manager and

00:07:10.720 --> 00:07:19.980
Resource Manager become involved
in resolving conflicts in the font

00:07:19.980 --> 00:07:19.980
resource identifiers and names.

00:07:20.260 --> 00:07:22.510
These changes,
these are actually physical

00:07:22.510 --> 00:07:26.130
changes to the font resources,
need to be communicated to the

00:07:26.130 --> 00:07:31.190
Font Manager through physical changes
within the font files themselves.

00:07:31.200 --> 00:07:35.160
If you've ever double clicked on a
font suitcase file in the system folder

00:07:35.160 --> 00:07:38.410
and then took a look at it later,
you might have noticed that the

00:07:38.460 --> 00:07:41.200
modification date had actually changed,
even though you didn't do anything to it.

00:07:41.200 --> 00:07:44.760
Even though there's a user interface
to actually move files in and out,

00:07:44.810 --> 00:07:48.030
a lot of times what happened was
an ID conflict had actually been

00:07:48.070 --> 00:07:50.080
resolved and your file has changed.

00:07:50.200 --> 00:07:54.810
There are obviously concerns
about maintaining the validity of

00:07:54.820 --> 00:07:59.720
your font data because of this,
so we want to move to a model

00:07:59.750 --> 00:08:03.070
where font data is not touched.

00:08:05.290 --> 00:08:09.750
And finally,
any changes within the fonts folder

00:08:10.160 --> 00:08:14.700
are often not communicated to
applications that are currently running.

00:08:14.830 --> 00:08:18.410
You would have to shut down
your applications and restart

00:08:18.410 --> 00:08:20.110
them to see these changes.

00:08:25.130 --> 00:08:29.130
Now beginning with Mac OS 8.5,
the release of Apple type

00:08:29.130 --> 00:08:31.140
services for Unicode imaging.

00:08:31.180 --> 00:08:32.550
That's a mouthful.

00:08:32.570 --> 00:08:36.940
It's ATSUI for short,
or ATS for the underlined subsystem.

00:08:37.010 --> 00:08:42.140
It introduced a text rendering engine
and font management model that was

00:08:42.140 --> 00:08:47.620
designed to handle large collections
of fonts and to handle multiple font

00:08:47.680 --> 00:08:50.950
formats and file packaging models.

00:08:52.130 --> 00:08:56.910
The Font Manager and Quick Draw Text at
that time were rewritten to

00:08:56.910 --> 00:09:01.520
integrate the ATS Glyphs cache,
a central cache of information

00:09:01.520 --> 00:09:04.270
related to the fonts,
and the Font File and

00:09:04.270 --> 00:09:08.080
Data Management system as an
adjunct to the system suitcase

00:09:08.080 --> 00:09:10.330
model of the Resource Manager.

00:09:11.470 --> 00:09:16.930
On Mac OS 9.0,
we introduced an extended set of

00:09:17.080 --> 00:09:22.090
functions to the Font Manager that
allowed developers for the first

00:09:22.110 --> 00:09:27.200
time to make use of some of the
lower level functionality of ATS.

00:09:27.390 --> 00:09:33.410
By the way, one thing that I want to make
clear is that this extended

00:09:33.410 --> 00:09:37.410
Font Manager functionality was
available both on Mac OS 9.0

00:09:37.500 --> 00:09:41.690
straight and in CarbonLib,
the first release of CarbonLib.

00:09:42.870 --> 00:09:47.830
On Mac OS X,
we've been busy porting ATS to

00:09:47.830 --> 00:09:54.300
a client server implementation,
and we've been standardizing

00:09:54.300 --> 00:09:58.500
the programming interface in
coordination with the other component

00:09:58.650 --> 00:10:01.870
frameworks of the operating system.

00:10:06.090 --> 00:10:12.000
Now the main goal of the design of
ATS was the replacement of the resource

00:10:12.000 --> 00:10:17.900
manager with ATS as the principal
intermediary to the font database.

00:10:18.460 --> 00:10:23.390
The design also allows us to hide
the implementation from third party

00:10:23.390 --> 00:10:28.200
developers by providing a programming
interface for accessing and modifying

00:10:28.200 --> 00:10:30.300
the standard font collection.

00:10:31.900 --> 00:10:37.970
By transferring the responsibility
for managing the font files,

00:10:37.970 --> 00:10:42.890
parsing the font formats,
and resolving name and

00:10:42.900 --> 00:10:45.300
identifier conflicts,

00:10:46.310 --> 00:10:51.870
We've allowed these modifications to
be handled dynamically through internal

00:10:51.870 --> 00:10:56.910
data structures of ATS and Font Manager,
rather than through exposed data

00:10:56.910 --> 00:10:59.800
structures through the Resource Manager.

00:11:01.210 --> 00:11:04.930
This information is made available
to third-party developers

00:11:05.520 --> 00:11:08.990
through the Font Access and
Data Management programming interface of

00:11:08.990 --> 00:11:13.380
the new Extended Font Manager and ATS.

00:11:14.640 --> 00:11:21.330
Another aspect of this design is the
font format independence and also for

00:11:22.000 --> 00:11:25.220
handling different storage models.

00:11:26.120 --> 00:11:31.000
What we've done is we've consolidated
the way fonts get packaged.

00:11:31.070 --> 00:11:35.330
Essentially,
font data may be stored in the standard,

00:11:35.480 --> 00:11:39.120
you might be familiar with this,
SFNT is the tag that we used in

00:11:39.140 --> 00:11:41.340
the Resource Manager in the past.

00:11:41.340 --> 00:11:48.420
A standard SFNT directory and data table
model that was developed for TrueType and

00:11:48.420 --> 00:11:54.410
also has been adopted for the OpenType
packaging model from Adobe and Microsoft.

00:11:55.640 --> 00:12:01.510
One last thing is that performance has
been improved through the use of data

00:12:01.540 --> 00:12:07.500
structures and heuristics that are
optimized for font management within ATS.

00:12:07.660 --> 00:12:11.000
And this works on multiple
platforms and operating systems.

00:12:11.000 --> 00:12:15.720
We have support on
Mac OS 9 and on Mac OS X.

00:12:19.150 --> 00:12:24.990
In terms of implementing ATS itself,
at the core of the architecture

00:12:24.990 --> 00:12:30.150
lies the open font architecture,
which provides a programming interface

00:12:30.720 --> 00:12:37.270
and a protocol for communicating
with these modular font scalers.

00:12:37.770 --> 00:12:40.590
Essentially,
the font scalers are responsible

00:12:40.930 --> 00:12:44.900
for parsing and interpreting
the font data that's specific

00:12:44.900 --> 00:12:49.850
to a particular font technology,
like TrueType or PostScript.

00:12:50.680 --> 00:12:55.700
The font scalers participate in measuring
and rendering text and translating the

00:12:55.810 --> 00:13:03.910
font data into a canonical format that
can be used on different graphic systems.

00:13:05.900 --> 00:13:11.440
The ATS Glyphs cache is shared by
all clients of ATS and is designed

00:13:11.440 --> 00:13:19.160
for high throughput of the font data,
especially in support of large glyph

00:13:19.180 --> 00:13:22.750
repertoires that are used in Asian fonts.

00:13:24.320 --> 00:13:29.630
The Font Database uses also references
to font files that may be closed as

00:13:29.720 --> 00:13:35.460
needed in order to conserve valuable
system resources and also just to

00:13:35.460 --> 00:13:40.620
allow you to handle these fonts without
keeping them open like they were in

00:13:40.620 --> 00:13:42.690
the past in the Resource Manager.

00:13:43.380 --> 00:13:47.010
There is also, thanks to this,
no predefined limit to the

00:13:47.010 --> 00:13:51.770
number of font files that may
be open or active and referenced

00:13:51.800 --> 00:13:54.690
through ATS at any single time.

00:13:55.080 --> 00:13:59.460
And finally, on Mac OS X,
the client server implementation

00:13:59.460 --> 00:14:03.650
of ATS allows us to further
reduce the load on the system by

00:14:03.650 --> 00:14:10.420
sharing more of the common data
structures and common components.

00:14:14.280 --> 00:14:18.380
Now, as you can see in this diagram,
there's no sign of the resource manager

00:14:18.610 --> 00:14:21.380
in this particular implementation.

00:14:21.540 --> 00:14:27.500
This probably represents what
you see on Mac OS X as of DP4.

00:14:27.600 --> 00:14:31.470
We have applications and
utilities linking directly

00:14:31.470 --> 00:14:34.950
to an ATS client library,
which then communicates

00:14:35.020 --> 00:14:38.500
to the ATS server,
which in turn handles the low-level

00:14:38.500 --> 00:14:43.110
details of the font formats and
packaging models on various file

00:14:43.110 --> 00:14:46.320
systems or even across the network.

00:14:46.880 --> 00:14:50.210
Applications and utilities
may also link to a particular

00:14:50.550 --> 00:14:54.650
graphic system like Quick Draw,
which is represented through

00:14:54.650 --> 00:15:03.280
the Font Manager API,
or Quartz to access their font data

00:15:03.370 --> 00:15:04.970
in a style that's closer to what
is used on that graphic system.

00:15:05.360 --> 00:15:09.420
Underneath all of this, though, however,
these graphic systems also are

00:15:09.440 --> 00:15:13.080
clients of the ATS server and
parts of the ATS client library

00:15:13.460 --> 00:15:16.300
to make use of font data.

00:15:16.350 --> 00:15:21.390
This abstraction layer allows us to
change formats or support formats,

00:15:21.940 --> 00:15:24.690
actually, as needed as things come along.

00:15:29.200 --> 00:15:35.760
Now, a fundamental assumption in ATS is
that all font data can be logically

00:15:35.870 --> 00:15:41.440
contained within one of these
SFNT directory and data table structures.

00:15:41.540 --> 00:15:44.210
This happens to be,
as I mentioned before,

00:15:44.410 --> 00:15:48.160
the native storage model for
TrueType and OpenType fonts.

00:15:48.910 --> 00:15:52.250
As such,
each font has a format identifier,

00:15:52.280 --> 00:15:57.620
a directory describing the data
tables that are present in the font,

00:15:57.620 --> 00:16:00.440
and a collection of data tables.

00:16:00.870 --> 00:16:04.830
The formats supported include
TrueType and PostScript.

00:16:04.830 --> 00:16:09.400
And within PostScript itself,
there are a multitude of variants.

00:16:09.520 --> 00:16:13.510
We also support classic
PostScript outline fonts,

00:16:13.570 --> 00:16:17.500
the CFF format fonts,
which are used in OpenType,

00:16:17.700 --> 00:16:23.970
CID keyed 2 byte font formats,
or the font format for CID keyed fonts,

00:16:24.040 --> 00:16:28.690
and other legacy formats,
including the OCF font format.

00:16:28.780 --> 00:16:30.600
That one we're actually
working on right now,

00:16:30.600 --> 00:16:34.580
so it's not available in DP4,
and we're working on

00:16:34.610 --> 00:16:36.730
OpenType support also.

00:16:41.190 --> 00:16:46.060
One thing that we've had as a
requirement was support for font file

00:16:46.060 --> 00:16:49.290
formats from other operating systems.

00:16:49.630 --> 00:16:54.520
An example of this is the
Microsoft TrueType TTC or

00:16:54.630 --> 00:16:57.100
TTF data fork files.

00:16:57.170 --> 00:17:01.900
This becomes much simpler with the
font management model provided by ATS.

00:17:02.020 --> 00:17:06.800
The storage models that we
intend to support include,

00:17:06.920 --> 00:17:09.500
although these aren't
completely guaranteed,

00:17:09.630 --> 00:17:15.090
of course, TrueType and PostScript font
suitcases and font resources.

00:17:15.670 --> 00:17:19.360
OpenType OTF and TrueType
TTC and TTF files are

00:17:19.410 --> 00:17:21.440
something we are working on.

00:17:21.510 --> 00:17:28.150
And with the emphasis on PDF data
structures and file formats within

00:17:28.150 --> 00:17:32.190
the new Quartz graphics system,
we also are working really hard

00:17:32.270 --> 00:17:37.280
with the Core graphics team to get
PDF embedded font data working properly.

00:17:37.390 --> 00:17:42.250
So that means a PDF with embedded
data should work transparently

00:17:42.260 --> 00:17:44.270
on your Mac OS X system.

00:17:48.540 --> 00:17:54.210
The programming interface, the ATS,
lets application and system developers

00:17:54.810 --> 00:17:59.890
integrate many of the enhancements
that have evolved over time.

00:18:00.260 --> 00:18:03.740
A lot of these features were
provided through the font management

00:18:03.750 --> 00:18:07.160
utilities I described earlier,
and also have been proposed or

00:18:07.220 --> 00:18:10.950
have been integrated in part in
the Finder and Fonts Folder model.

00:18:12.130 --> 00:18:14.560
Now some of these features
are actually not available at

00:18:14.560 --> 00:18:16.000
present time in the Finder.

00:18:16.000 --> 00:18:20.440
They include the ability to maintain
fonts in locations outside of

00:18:20.440 --> 00:18:24.300
a single directory associated
directly with the operating system,

00:18:24.420 --> 00:18:27.290
the fonts folder in the classic world.

00:18:28.410 --> 00:18:32.110
Users also like to create and
manage sets of fonts customized

00:18:32.480 --> 00:18:34.800
for different applications.

00:18:34.910 --> 00:18:38.980
This is something that you often do
see with font management utilities.

00:18:39.820 --> 00:18:43.260
They also want to be able to open
and close fonts while working in the

00:18:43.260 --> 00:18:46.560
middle of an application and have
those fonts immediately available.

00:18:46.750 --> 00:18:50.000
They don't want to have to
shut down their applications.

00:18:50.450 --> 00:18:53.030
And finally,
some utilities also provide the

00:18:53.090 --> 00:18:57.520
ability to share fonts over a network,
which we are actually providing

00:18:57.520 --> 00:19:05.210
transparently on Mac OS X through
these APIs and the ATS architecture.

00:19:05.940 --> 00:19:10.150
One last thing that we're working
on is we're coordinating an effort

00:19:10.150 --> 00:19:16.260
with the high-level toolbox team and
the app kit team to standardize on

00:19:16.260 --> 00:19:19.780
a user interface for managing fonts.

00:19:19.780 --> 00:19:24.020
This might integrate some of the features
within the font panel that you've

00:19:24.120 --> 00:19:28.420
seen before and the traditional fonts
menu that you're all familiar with.

00:19:32.220 --> 00:19:35.020
At this point,
I'd like to introduce my fellow

00:19:35.020 --> 00:19:38.270
comrade in arms from the type team,
Julio Gonzalez,

00:19:38.390 --> 00:19:43.870
who will demo for you some of the
features that ATS makes possible,

00:19:43.870 --> 00:19:48.300
and also some of the features that
are actually already implemented

00:19:48.470 --> 00:19:52.610
in DP4 or are planned for the
retail release of Mac OS X.

00:19:54.620 --> 00:19:58.590
Good evening.

00:19:58.670 --> 00:20:02.750
I wanted to start by talking and
showing you the different locations

00:20:02.930 --> 00:20:06.180
for the font directories in OS X.

00:20:06.870 --> 00:20:11.530
The first location the
ATS system knows about is the

00:20:11.670 --> 00:20:14.280
system library fonts location.

00:20:15.340 --> 00:20:17.850
Here we have the fonts that
are required for the basic

00:20:17.850 --> 00:20:21.290
operation of the operating system,
plus some fonts that

00:20:21.310 --> 00:20:23.770
traditionally were shipped with.

00:20:26.700 --> 00:20:33.540
Next directory that the ATS system knows
about is the local fonts directory.

00:20:34.240 --> 00:20:40.420
This location is the ideal spot for
font collections to get installed into,

00:20:40.540 --> 00:20:45.290
not so with the system directory
which is exclusive for Apple's use.

00:20:46.680 --> 00:20:49.400
The next directory it knows
about is the Network directory.

00:20:49.420 --> 00:20:52.300
Unfortunately, I'm not on the network,
I can show it to you,

00:20:52.400 --> 00:20:55.890
but this is the ideal spot for, say,
a company-wide font that is

00:20:55.890 --> 00:20:57.600
used in internal documents.

00:20:57.600 --> 00:21:03.580
The last directory that it knows
about is the User Fonts directory.

00:21:03.710 --> 00:21:05.720
Basically,
these fonts are only available to

00:21:05.720 --> 00:21:07.600
the user that is currently logged in.

00:21:07.600 --> 00:21:12.270
But the beauty of this directory
is that if the home directory

00:21:12.410 --> 00:21:16.600
resides over the network,
as you log in on a different machine,

00:21:16.600 --> 00:21:19.170
the fonts go along with you.

00:21:20.910 --> 00:21:25.460
Now, let me show you some of the new
features that we have on OS X.

00:21:25.460 --> 00:21:31.670
This is the current version of
Simple Text that is shipping with

00:21:31.670 --> 00:21:33.800
the CD that you all received.

00:21:33.800 --> 00:21:37.410
It's basically a carbonized
version of Simple Text.

00:21:37.560 --> 00:21:42.180
It doesn't do much as
far as using the new API.

00:21:42.440 --> 00:21:47.010
So, if we look at the Fonts menu,
this font menu is built

00:21:47.100 --> 00:21:49.020
using a pen rest menu.

00:21:49.240 --> 00:21:50.800
This is what you're all familiar with.

00:21:50.800 --> 00:21:56.000
It's just the assorted list of fonts that
are currently installed in the system.

00:21:56.150 --> 00:22:01.280
Now, I've taken the same version
of Simple Text and modified it

00:22:01.410 --> 00:22:07.030
to use some new APIs that were
introduced in CarbonLib 1.0 that

00:22:07.350 --> 00:22:10.070
allow you to create a new menu.

00:22:10.570 --> 00:22:14.100
One of the advantages is that
you can have a hierarchical menu.

00:22:14.180 --> 00:22:17.860
It's more compact,
it provides more information,

00:22:18.000 --> 00:22:22.730
so here you see the sub-menus which
show you the weights and stresses

00:22:22.730 --> 00:22:24.770
that accompany this font family.

00:22:25.200 --> 00:22:42.100
[Transcript missing]

00:22:42.560 --> 00:22:46.880
Another feature of this menu
that is not readily seen is

00:22:46.990 --> 00:22:49.040
automatic font activation.

00:22:49.150 --> 00:22:50.200
What do I mean by that?

00:22:50.260 --> 00:22:53.950
Typically on Mac OS 9, say,
if you wanted to install a font,

00:22:53.950 --> 00:22:56.890
you would install it
into the Fonts folder.

00:22:56.980 --> 00:23:01.200
Any running application would
have to quit and restart for

00:23:01.200 --> 00:23:03.370
you to be able to see or use it.

00:23:03.460 --> 00:23:07.070
Now, if I go back here to my disk,

00:23:07.810 --> 00:23:14.090
Pick up a font,
drop it into my user's font directory,

00:23:14.090 --> 00:23:15.620
and make sure that it got copied there.

00:23:15.660 --> 00:23:18.960
That's the user's font directory.

00:23:19.090 --> 00:23:22.610
Go back to the modified
version of Simple Text.

00:23:25.240 --> 00:23:26.100
Hello?

00:23:26.100 --> 00:23:33.320
Oh, not the font that I wanted to use,
but let's pick up a nicer one here.

00:23:33.320 --> 00:23:36.230
Yeah, sorry about that.

00:23:39.300 --> 00:23:43.460
I picked up the one below,
or the one above.

00:23:43.460 --> 00:23:47.830
So if we head back,
let me unclutter some of the mess here.

00:23:49.450 --> 00:23:50.900
There it is.

00:23:50.900 --> 00:23:55.260
So, we didn't have to quit the
application in order to see the font,

00:23:55.260 --> 00:23:58.990
and not only that, of course,
we can hopefully use it.

00:24:00.050 --> 00:24:05.270
So that's an improvement
over what we've had in OS 9.

00:24:05.710 --> 00:24:12.650
Another thing that you can do with
this activation is what Robin talked

00:24:12.740 --> 00:24:16.500
about is you can activate now fonts
anywhere outside of the scope of

00:24:16.540 --> 00:24:18.600
what the system knows to look at.

00:24:18.600 --> 00:24:21.480
So that gives us a few advantages.

00:24:21.480 --> 00:24:25.600
For example, applications that want to
ship with their own fonts.

00:24:25.620 --> 00:24:27.530
Typically,
applications have had to install fonts

00:24:27.690 --> 00:24:33.000
in the fonts folder or have shipped
with the font suitcases inside of

00:24:33.000 --> 00:24:34.600
the resource fork of the application.

00:24:34.600 --> 00:24:38.930
That second option, of course,
is not doable under OS X because we've

00:24:39.050 --> 00:24:43.130
divorced from the resource manager
altogether and we no longer look

00:24:43.130 --> 00:24:45.600
at the resource manager for fonts.

00:24:46.400 --> 00:24:50.580
You can still install the fonts
into any of the known locations,

00:24:50.580 --> 00:24:54.220
the user, local, or network directories.

00:24:54.330 --> 00:24:58.890
Which, by the way,
you can get at using Find Folder the same

00:24:58.980 --> 00:25:04.600
way that you would under classic Mac OS,
just by calling Find Folder with

00:25:04.630 --> 00:25:08.500
some new constants that are provided.

00:25:09.570 --> 00:25:13.520
A better way would be to ship the
fonts that the application wishes

00:25:13.520 --> 00:25:15.900
to use along with the application.

00:25:15.900 --> 00:25:19.600
So that's what I've done with
this version of Simple Text.

00:25:20.490 --> 00:25:23.900
If I go back to this and show
the version of simple text,

00:25:23.900 --> 00:25:27.750
I have a font folder that
lives right along it.

00:25:27.780 --> 00:25:32.070
It's got a chest font here
that I'm going to demonstrate.

00:25:33.920 --> 00:25:38.620
The directory is just at the same level
as the application as it launches.

00:25:38.640 --> 00:25:44.900
It looks for this font's directory in the
same spot as it is and activates a font.

00:25:44.900 --> 00:25:48.740
So if I go back here to the
modified version of Simple Text,

00:25:48.970 --> 00:25:53.910
Here's that font that has been activated,
so I can go ahead and use it.

00:25:56.570 --> 00:26:00.980
So that is a cleaner way of doing it,
but let me just talk about

00:26:01.030 --> 00:26:02.400
this a little bit more.

00:26:02.470 --> 00:26:04.430
This is not the most
clean way of doing it.

00:26:04.570 --> 00:26:07.970
Here the finder is showing us
the simple text application as an

00:26:07.970 --> 00:26:10.090
icon that we can double click on.

00:26:10.190 --> 00:26:13.600
In reality, this is a package,
a directory structure.

00:26:13.760 --> 00:26:16.250
Inside of this structure
is a contents directory,

00:26:16.250 --> 00:26:16.960
for example.

00:26:17.280 --> 00:26:21.260
And this would be the ideal spot
to put your fonts directory.

00:26:21.360 --> 00:26:24.180
And that way,
as you copy the finder around,

00:26:24.180 --> 00:26:29.540
move it around to another location,
your fonts would be copied alongside it.

00:26:29.670 --> 00:26:34.610
So now, how about activating
other fonts on the system?

00:26:35.770 --> 00:26:38.470
I have a tool here that
allows us to do just that.

00:26:38.890 --> 00:26:40.940
Let me bring it up.

00:26:40.940 --> 00:26:48.700
It just shows the glyphs that
the current font needs or has.

00:26:48.700 --> 00:26:50.700
Let me also bring up the font panel.

00:26:50.700 --> 00:26:54.700
This is the standard UI on the
Mac OS X for the font panel.

00:26:54.710 --> 00:26:58.700
And these are the fonts that are
available under it at the moment.

00:26:58.700 --> 00:27:04.920
I have a menu item here that
will allow me to activate any

00:27:05.060 --> 00:27:08.500
directory that I have on this.

00:27:08.860 --> 00:27:13.700
I have here a set of demo fonts.

00:27:13.700 --> 00:27:17.990
Please watch closely the
font panel underneath it as

00:27:17.990 --> 00:27:20.490
I activate that directory.

00:27:20.910 --> 00:27:21.800
Here we go.

00:27:21.800 --> 00:27:25.800
We have now a bunch of
fonts that we can now use.

00:27:25.920 --> 00:27:28.800
This was a font that was not there.

00:27:28.800 --> 00:27:30.200
It updates in the background.

00:27:30.200 --> 00:27:34.100
Apple Garamond was also not there.

00:27:34.800 --> 00:27:40.100
So you can imagine, you know, now we can,
you can have a user have a set

00:27:40.440 --> 00:27:43.310
of directories and organize
their fonts in whatever way

00:27:43.310 --> 00:27:45.600
they wish to use them and you,
as a developer,

00:27:45.600 --> 00:27:51.280
provide a UI that lets them
pick any of these folders to

00:27:51.280 --> 00:27:54.600
activate or deactivate on the fly.

00:27:55.030 --> 00:27:58.160
For the purposes of the demo,
when we use the activation

00:27:58.160 --> 00:28:01.350
routine that Robin is going to
talk to you about in a minute,

00:28:01.350 --> 00:28:02.280
you have two options.

00:28:02.320 --> 00:28:07.280
You can activate the font locally so
that only this application sees it,

00:28:07.640 --> 00:28:09.000
or globally.

00:28:09.040 --> 00:28:13.390
We chose to activate them globally.

00:28:13.390 --> 00:28:13.390
So as we quit,

00:28:13.730 --> 00:28:17.540
This demo application and go back
to our simple text application.

00:28:17.540 --> 00:28:21.270
We should be able to see them
and here they are for us to see.

00:28:22.430 --> 00:28:29.620
The last thing I want to show you is
some of the formats and packaging that

00:28:29.620 --> 00:28:31.530
Robin talked about that we now support.

00:28:31.720 --> 00:28:39.420
Some of these are, of course,
work in progress.

00:28:39.420 --> 00:28:39.420
So let me just show you some of the

00:28:40.140 --> 00:28:45.310
The fonts that were in that activate
demo fonts that I just activated.

00:28:45.440 --> 00:28:49.300
This font right here are
Windows TrueType fonts.

00:28:49.300 --> 00:28:53.800
In fact, I downloaded this from
the Microsoft website.

00:28:53.840 --> 00:28:57.300
And it's standard
TrueType Data Fork font.

00:28:57.300 --> 00:29:01.610
So no resources whatsoever in here,
SFNTs, you name it.

00:29:02.180 --> 00:29:05.070
This font here is an open type font,
a Japanese open type font,

00:29:05.120 --> 00:29:08.200
so I'll go ahead and make use of them.

00:29:08.260 --> 00:29:13.580
Oh, before I forget, notice also,
if I go back to my

00:29:13.580 --> 00:29:15.850
version of Simple Text,

00:29:16.120 --> 00:29:19.990
This font right here are,
both of them are PostScript fonts.

00:29:20.090 --> 00:29:22.600
There is no ATM installed in this system.

00:29:22.730 --> 00:29:27.770
This is part of the Mac OS system now,
Mac OS X system.

00:29:29.910 --> 00:29:37.520
So let me go back and show
you some of these fonts.

00:29:37.870 --> 00:29:41.250
This is the TrueType font from Microsoft.

00:29:44.370 --> 00:29:45.890
So it does operate.

00:29:45.890 --> 00:29:47.800
Hopefully you can see it.

00:29:47.800 --> 00:29:55.170
And now I can go ahead and try
that Japanese OpenType font.

00:29:58.610 --> 00:29:59.410
Excuse my Japanese.

00:29:59.510 --> 00:30:04.740
Hopefully it will come out right.

00:30:04.740 --> 00:30:06.180
Here we go.

00:30:06.230 --> 00:30:09.760
With that, I'll hand it back to Robin and
she'll talk some more about all

00:30:09.760 --> 00:30:13.500
of these wonderful APIs that I've
been using here for the demo.

00:30:13.500 --> 00:30:14.690
Thank you.

00:30:22.450 --> 00:30:26.700
Thanks, Julio.

00:30:26.820 --> 00:30:28.540
So let me reiterate at this point.

00:30:28.580 --> 00:30:33.580
The key point of this
session is that on Mac OS X,

00:30:33.620 --> 00:30:37.280
we've completed the transition
to the ATS font architecture.

00:30:37.370 --> 00:30:40.420
As Julio mentioned,
the resource manager is not

00:30:40.420 --> 00:30:42.620
really in the picture anymore.

00:30:45.640 --> 00:30:51.960
Now ATS organizes the font data
in a two-tier hierarchy consisting

00:30:51.960 --> 00:30:54.390
of font families and fonts.

00:30:54.630 --> 00:30:59.160
A font essentially represents a
component of a font family that is

00:30:59.240 --> 00:31:08.290
differentiated by stylistic variation or
stress like italic or weight like bold.

00:31:12.780 --> 00:31:16.150
The font family is a reference
to a collection of fonts with

00:31:16.150 --> 00:31:18.390
the same design characteristics.

00:31:18.480 --> 00:31:24.100
This is kind of a definition that
most of you are probably familiar

00:31:24.330 --> 00:31:29.850
with in terms of computing and
displaying text on a computer.

00:31:30.280 --> 00:31:34.020
This font family reference,
it's compatible with the routines of the

00:31:34.030 --> 00:31:39.340
Font Manager in Quickdraw Text and may
be used wherever a standard Quickdraw

00:31:39.340 --> 00:31:43.870
font identifier from the older days,
including the text font function

00:31:44.170 --> 00:31:47.680
that you're familiar with in
Quickdraw and the TX font field

00:31:48.240 --> 00:31:51.310
within the Quickdraw graphics port.

00:31:51.530 --> 00:32:01.100
However,
it cannot be used to access information

00:32:02.190 --> 00:32:02.210
from a FOND or font resource handle
through the resource manager routines.

00:32:02.450 --> 00:32:05.840
In addition,
a font family reference does not

00:32:05.840 --> 00:32:10.660
imply a particular script system,
nor can it be mapped through

00:32:10.750 --> 00:32:15.740
some arithmetic magic to a
particular character encoding,

00:32:15.850 --> 00:32:18.230
as was true in the past.

00:32:20.920 --> 00:32:25.440
Each component font associated with
the font family is identified by an

00:32:25.440 --> 00:32:31.230
opaque reference to a single object
registered with the font database.

00:32:31.770 --> 00:32:37.420
This font reference consists of the
individual outline and bitmap fonts that

00:32:37.600 --> 00:32:43.790
form in combination the font family.

00:32:45.170 --> 00:32:49.920
Within the ATS programming interface,
there are also compatibility

00:32:50.030 --> 00:32:54.610
routines that let you map one
of these newer references,

00:32:54.610 --> 00:32:59.590
or at least the font reference,
to an old style font family ID and a

00:32:59.590 --> 00:33:05.130
traditional quick draw style bit set.

00:33:09.370 --> 00:33:12.960
Many of the features that I'll
be describing in this section

00:33:13.040 --> 00:33:17.150
are implemented already in the
extended programming interface

00:33:17.150 --> 00:33:21.980
of the Font Manager that was
introduced with Mac OS 9.0 and

00:33:22.150 --> 00:33:24.910
the first release of CarbonLib.

00:33:25.700 --> 00:33:29.080
On Mac OS X,
particularly if you're going to be

00:33:29.080 --> 00:33:33.600
working within an environment that's
based on the Quartz graphics system,

00:33:33.630 --> 00:33:37.070
like the App Kit,
you have the option of linking

00:33:37.070 --> 00:33:39.860
directly to the new ATS framework.

00:33:39.920 --> 00:33:44.570
This is where the actual implementation
of ATS resides on Mac OS X.

00:33:49.870 --> 00:33:54.560
Now there are four basic tasks that the
programming interface needs to provide.

00:33:54.560 --> 00:33:58.780
And this is available, again,
on CarbonLib and Mac OS 9

00:33:58.780 --> 00:34:04.280
within the Font Manager and on
Mac OS X through the ATS framework.

00:34:04.380 --> 00:34:10.020
They consist of the ability to enumerate
or search for font families and fonts.

00:34:10.940 --> 00:34:16.220
Accessing information and data contained
within the font families and fonts.

00:34:16.270 --> 00:34:22.120
And a set of database related routines,
the main one being the ability

00:34:22.120 --> 00:34:24.440
to activate and deactivate fonts.

00:34:24.550 --> 00:34:27.610
And finally, we have an implementation
of a basic font menu,

00:34:27.610 --> 00:34:30.720
as Julio showed you earlier,
that replaces the Append

00:34:30.720 --> 00:34:35.470
Res Menu implementation that was
very resource manager centric.

00:34:39.760 --> 00:34:44.920
So as for enumeration, these routines,
again, allow you to iterate and search

00:34:44.920 --> 00:34:52.120
for font families and fonts using
a model that's thread safe and

00:34:52.190 --> 00:34:57.510
compatible with the preemptive
multitasking environment of Mac OS X.

00:34:57.870 --> 00:35:00.560
Four routines are usually provided.

00:35:00.560 --> 00:35:06.150
There's one to create a font or font
family iterator object that maintains the

00:35:06.150 --> 00:35:09.440
state necessary for high quality data.

00:35:09.790 --> 00:35:14.350
There's a function to
iterate to the next item,

00:35:14.350 --> 00:35:18.450
and there's one to reset the
state of the iterator object,

00:35:18.530 --> 00:35:22.170
and one to dispose of the
iterator once you're done.

00:35:25.500 --> 00:35:32.240
One additional feature that we provide on
the ATS framework is a utility function

00:35:32.680 --> 00:35:37.400
that's similar to what you see in the
Core Foundation Collections Library.

00:35:37.540 --> 00:35:41.000
Essentially,
it's the ATS font apply function.

00:35:41.080 --> 00:35:44.650
It wraps everything up so you don't
have to deal with iterators directly,

00:35:44.650 --> 00:35:49.090
and you can simply pass in a callback
routine that's applied or called

00:35:49.090 --> 00:35:52.080
for each item that's iterated.

00:35:55.460 --> 00:35:59.500
Now, here's how you create an iterator
to step through all of the fonts

00:35:59.500 --> 00:36:02.500
accessible to your application.

00:36:02.880 --> 00:36:06.740
It's essentially wrapped with
a create and dispose function.

00:36:06.830 --> 00:36:10.780
Within it, there's an inner loop that
iterates through all of the fonts.

00:36:11.030 --> 00:36:15.050
It returns the font reference that
you can use with any of the accessor

00:36:15.090 --> 00:36:17.190
functions within the library.

00:36:19.670 --> 00:36:25.420
Now as for the access routines,
what you'll want to avoid doing is

00:36:25.520 --> 00:36:30.120
using the Resource Manager routines
to access the data stored in the

00:36:30.120 --> 00:36:32.410
traditional font suitcase files.

00:36:32.530 --> 00:36:38.430
These resources include the fonts,
the F-O-N-T's, the fonts, NFN-T's,

00:36:38.430 --> 00:36:43.470
SFN-T's, and LWFN's,
a whole alphabet soup of resources.

00:36:46.090 --> 00:36:49.780
The resource-based semantics of
the old Font Manager will still be

00:36:49.940 --> 00:36:54.760
available because we didn't blow away
the old Resource Manager routines.

00:36:54.900 --> 00:36:59.360
And you'll be able to return some values,
but it will not be set up the way you're

00:36:59.370 --> 00:37:04.430
used to with the system resource chain
and all the fonts available globally.

00:37:04.630 --> 00:37:07.850
Instead,
what you want to do is use the iterator

00:37:08.060 --> 00:37:13.680
and the apply functions and also use
the ATS accessor functions that are

00:37:13.740 --> 00:37:18.700
also available in a slightly different
form within the extended font manager.

00:37:22.410 --> 00:37:27.190
In terms of the interaction between the
Font Manager and the graphics system,

00:37:27.280 --> 00:37:30.790
one thing you should avoid doing
is depending on FM swap font and

00:37:30.790 --> 00:37:34.700
the traditional resource-based
Font Manager data structures to

00:37:34.710 --> 00:37:39.290
access information such as metrics
and other metadata about the fonts.

00:37:39.300 --> 00:37:44.300
An example of this on Mac OS X is
within the FM output structure.

00:37:44.300 --> 00:37:48.980
There is a font handle field that
currently is going to be set to

00:37:48.980 --> 00:37:52.900
nil in most cases since a lot of
this font data is not going to

00:37:52.900 --> 00:37:55.190
reside within a resource handle.

00:37:55.300 --> 00:37:59.520
There are other data structures that
you're probably familiar with that

00:37:59.520 --> 00:38:03.680
also have similar resource handle
pointers or handles to resources

00:38:03.690 --> 00:38:07.830
that are probably going to be set
to nil or will definitely be set

00:38:07.830 --> 00:38:10.230
to nil in almost all of these cases.

00:38:13.780 --> 00:38:17.090
The way you get around this, of course,
is to use the accessor function

00:38:17.090 --> 00:38:21.040
that we provide through ATS and
through the extended Font Manager.

00:38:21.100 --> 00:38:23.740
They are set up so that you'll be
able to access information that

00:38:23.740 --> 00:38:27.750
you would normally have gone to
a font directly or to the font

00:38:27.750 --> 00:38:30.540
handle to retrieve this information.

00:38:30.590 --> 00:38:34.070
And we're currently working with
the various graphics systems and the

00:38:34.140 --> 00:38:39.160
teams for the Quartz and Quick Trial
graphics systems to integrate these

00:38:39.160 --> 00:38:43.400
font family and font references
into the system as accessors.

00:38:43.400 --> 00:38:46.250
So you won't have to do any sort
of conversion back and forth.

00:38:46.340 --> 00:38:50.880
You can just use these natively
within those components.

00:38:53.420 --> 00:38:57.000
I'll say this one more time:
Don't use the Resource Manager.

00:38:57.070 --> 00:39:00.060
For activation and deactivation,
people in the past have patched

00:39:00.110 --> 00:39:03.370
the Resource Manager and
Font Manager to get the work done.

00:39:03.550 --> 00:39:07.090
They have intimate knowledge about
the way the resource chain is

00:39:07.090 --> 00:39:10.370
set up and how fonts are inserted
and removed from that chain.

00:39:11.010 --> 00:39:13.300
That will no longer work.

00:39:13.790 --> 00:39:18.770
As of CarbonLib 1.0 and
Mac OS 9.0 and on Mac OS X,

00:39:18.920 --> 00:39:21.860
we provide functions that make
this so much easier for you.

00:39:22.040 --> 00:39:23.500
You should be using these.

00:39:23.600 --> 00:39:25.000
We have a whole suite of these.

00:39:25.100 --> 00:39:28.560
There's not just basic
activation and deactivation,

00:39:28.580 --> 00:39:34.110
but also ways to pass in the information,
whether it's a file or within memory.

00:39:35.560 --> 00:39:41.570
One additional thing that I like
to explain is we also provide

00:39:41.570 --> 00:39:44.530
a mechanism for notification.

00:39:44.600 --> 00:39:50.030
It's very simple in this first release,
but essentially it consists

00:39:50.810 --> 00:39:53.120
of a generation seed value.

00:39:53.400 --> 00:39:57.540
It's a global value that's stored
in the ATS server that gets updated

00:39:57.570 --> 00:40:02.050
whenever anything happens to change
the state of the font database.

00:40:02.720 --> 00:40:07.810
This means any operation that can add,
delete, or even modify the fonts or font

00:40:07.880 --> 00:40:11.780
families that are stored in the
database will trigger a change

00:40:11.830 --> 00:40:14.070
or an update to the seed value.

00:40:14.270 --> 00:40:16.500
And also,
any font family or font that happens

00:40:16.780 --> 00:40:20.430
to be touched within a particular
transaction will be tagged with the

00:40:20.490 --> 00:40:22.590
current value of the generation seed.

00:40:22.640 --> 00:40:26.000
So there are accessor functions that
allow you to retrieve this information

00:40:26.300 --> 00:40:30.540
and compare it against a cached value
that you store within your application

00:40:30.540 --> 00:40:32.550
to see what happens to the database.

00:40:32.600 --> 00:40:36.710
This provides the core
functionality for the way the

00:40:36.860 --> 00:40:39.750
updated font menu has been working.

00:40:44.080 --> 00:40:48.100
So, on Mac OS X,
as Julio described earlier,

00:40:48.100 --> 00:40:51.470
you cannot embed a font in the
resource fork of your application

00:40:52.210 --> 00:40:56.690
and assume that it's automatically
registered with the Font Manager when

00:40:56.690 --> 00:40:58.000
the application is launched.

00:40:58.000 --> 00:41:03.990
Instead, what you want to do is you want
to locate some predefined place.

00:41:04.000 --> 00:41:07.700
If you've actually carbonized your
application already and have one of

00:41:07.710 --> 00:41:12.000
those packages that Julio showed to you,
one of those .app directories,

00:41:12.000 --> 00:41:15.840
then you can use the CFFundle
routines that are available in

00:41:15.840 --> 00:41:19.990
Core Foundation to actually locate
one of the particular subfolders

00:41:19.990 --> 00:41:24.480
where you can place your fonts that's
carried around with the application

00:41:24.510 --> 00:41:29.000
whenever a user copies it and pass
that particular piece of information,

00:41:29.000 --> 00:41:33.390
the location,
as a file spec or a file ref or even

00:41:33.390 --> 00:41:39.670
a path name to the ATS routines to
activate the fonts contained within it.

00:41:40.490 --> 00:41:45.890
From that, with the ATS framework,
you'll be able to use an opaque container

00:41:45.970 --> 00:41:51.100
reference to find the fonts that are
available or that were registered with

00:41:51.190 --> 00:41:56.520
the database from within that container
or that file or memory location even.

00:41:57.230 --> 00:42:00.220
One thing I should note that
Julio mentioned earlier,

00:42:00.220 --> 00:42:03.990
he actually stole some of my thunder,
was that we have the ability

00:42:04.650 --> 00:42:10.260
when activating a particular
container to determine the context,

00:42:10.260 --> 00:42:15.070
whether it's local to the application
or global and system-wide.

00:42:15.110 --> 00:42:16.990
And so that's going to be
one of the parameters that

00:42:16.990 --> 00:42:18.090
you'll be able to pass in.

00:42:18.100 --> 00:42:22.360
The default behavior, of course,
is to make it local to the application

00:42:22.450 --> 00:42:27.100
and safe so that when an application
is normally shut down or crashes even,

00:42:27.100 --> 00:42:31.080
those fonts will be
removed from the system.

00:42:34.960 --> 00:42:39.600
The final task that the programming
interface provides or enables

00:42:39.600 --> 00:42:42.700
you to do is a basic font menu.

00:42:42.860 --> 00:42:44.630
I think I'll say this one more time.

00:42:44.730 --> 00:42:49.130
Don't use the resource manager
based routines to do this.

00:42:49.360 --> 00:42:53.200
Instead,
what you'll use are a standard set of

00:42:53.200 --> 00:42:58.250
functions that were distributed as of
CarbonLib 1.0 in the Menu Manager to

00:42:58.290 --> 00:43:00.300
create this basic font menu.

00:43:00.480 --> 00:43:04.110
And that's actually what
Julio was using within his

00:43:04.110 --> 00:43:06.960
eSimpleText that he was demoing.

00:43:07.380 --> 00:43:10.930
So they provide just a few
functions that allow you to create

00:43:10.930 --> 00:43:15.800
and dispose of a standard menu,
to update it automatically based

00:43:15.800 --> 00:43:21.820
on this generation seed and the
current state of the font database.

00:43:22.030 --> 00:43:24.850
And one key item:
Since the implementation

00:43:25.000 --> 00:43:29.110
is radically different,
or it is different anyway from

00:43:29.110 --> 00:43:31.490
the old Append/ResMenu menu,

00:43:32.110 --> 00:43:36.440
We provided a function that allows you
to map a user selection to one of these

00:43:36.440 --> 00:43:39.650
new font family or font references.

00:43:42.120 --> 00:43:44.670
So here's, real quick,
how you'd actually create

00:43:44.690 --> 00:43:46.340
one of the basic font menus.

00:43:46.460 --> 00:43:48.900
It's almost identical to
the old Append Res menu,

00:43:48.900 --> 00:43:51.470
except for the fact that
if you look down below,

00:43:51.630 --> 00:43:54.300
there's a hierarchical font menu option.

00:43:54.410 --> 00:43:57.150
So if you pass that in,
you'll actually get one of the

00:43:57.370 --> 00:43:59.200
fancy new hierarchical menus.

00:43:59.320 --> 00:44:03.760
It's not spectacular,
but it gets the job done.

00:44:03.840 --> 00:44:07.070
If you wanted to,
you can actually implement your own

00:44:07.070 --> 00:44:11.630
version of a font menu using the
standard accessor and iterator functions.

00:44:13.190 --> 00:44:15.220
Now this is what's more interesting.

00:44:15.320 --> 00:44:20.160
So given one of these hierarchical menus,
which is different from the old

00:44:20.180 --> 00:44:23.940
append res menu style where you
can simply take the item text

00:44:24.090 --> 00:44:27.570
and use the Quick Draw routine,
get FNUM, to map it back to an ID that

00:44:27.570 --> 00:44:30.100
you could pass through the
Quick Draw graphic system.

00:44:30.180 --> 00:44:34.920
Instead, we provide you this function,
Get Font Family from Menu Selection,

00:44:35.120 --> 00:44:40.300
that takes the menu handle and the item
that was selected and maps it back to a

00:44:40.370 --> 00:44:45.090
reference and a standard Quick Draw style
that then you can use with Quick Draw.

00:44:45.100 --> 00:44:48.960
So one of the benefits of this
is that in the future we could

00:44:49.450 --> 00:44:53.640
change the implementation so that
the menu items are no longer a

00:44:53.640 --> 00:44:56.100
standard Quick Draw font name.

00:44:56.100 --> 00:44:59.100
We could actually make it so
that they're customizable.

00:44:59.170 --> 00:45:00.100
Or we can change the font name.

00:45:00.100 --> 00:45:03.760
Make it possible to have both a
PostScript and a TrueType version of

00:45:03.780 --> 00:45:07.490
Helvetica present in the same font
menu and allow users to distinguish

00:45:07.490 --> 00:45:11.100
between them and use them as they want.

00:45:16.740 --> 00:45:20.890
So to wrap this up,
I'll say this one more time.

00:45:20.940 --> 00:45:25.810
Don't use the Resource Manager to
do your font management.

00:45:26.080 --> 00:45:30.070
Begin developing to the new extended
Font Manager programming interface

00:45:30.250 --> 00:45:33.100
that's available with Carbon.

00:45:33.450 --> 00:45:36.870
Also, as of DP4,
you'll be able to preview the

00:45:36.900 --> 00:45:39.980
programming interface that we have
in mind for the ATS framework.

00:45:39.980 --> 00:45:41.540
Now, just a caveat.

00:45:41.540 --> 00:45:44.850
On DP4, you won't be able to link
against these functions and

00:45:44.850 --> 00:45:46.600
you won't be able to use them.

00:45:46.600 --> 00:45:49.610
Just take a look at the header file.

00:45:49.620 --> 00:45:54.640
It's called ATS font.h and it's included
within the ATS framework itself.

00:45:54.640 --> 00:45:57.560
If you know the structure of
the new framework hierarchy,

00:45:57.560 --> 00:46:02.130
basically each of them is a modular
package that represents a component

00:46:02.130 --> 00:46:06.420
in the system with headers that
are included within that package.

00:46:08.090 --> 00:46:11.050
So again, preview those interfaces
and see what's up,

00:46:11.190 --> 00:46:13.540
what additional features we'll
be providing and exposing

00:46:13.540 --> 00:46:16.250
through the ATS architecture.

00:46:18.880 --> 00:46:21.640
Here are a couple other sessions
that you might be interested in.

00:46:21.680 --> 00:46:25.140
The text session already happened
earlier this morning and a lot

00:46:25.140 --> 00:46:26.400
of you might have already gone.

00:46:26.470 --> 00:46:29.400
But hopefully, I'm not sure about this,
that they'll have some sort

00:46:29.400 --> 00:46:34.150
of streaming capability or
something to review the lecture.

00:46:34.240 --> 00:46:38.300
There's also the Quartz session on
Friday that you'll be interested in.

00:46:38.610 --> 00:46:41.530
This goes more into the graphic
side of things and it's specific to,

00:46:41.540 --> 00:46:43.520
of course, the Quartz system.

00:46:43.620 --> 00:46:47.670
And finally, on Friday also,
there's the traditional international

00:46:47.690 --> 00:46:52.860
and text feedback forum that I'll
probably be at and so will my colleagues.

00:46:52.900 --> 00:46:57.560
And you can talk about all kinds of
other related topics in the text field.

00:46:58.800 --> 00:47:01.180
On the web,
if you don't want to get up and

00:47:01.190 --> 00:47:05.100
talk in a meeting here at WWDC,
you can actually go and take a look

00:47:05.100 --> 00:47:12.580
at the Texton International website
for our DTS technical documentation.

00:47:13.180 --> 00:47:18.920
And I'll give a plug to our fellow
group in the Apple Fonts group,

00:47:19.100 --> 00:47:23.610
which actually creates the fonts that
we ship on the system and the tools and

00:47:23.610 --> 00:47:26.340
utilities that are used to develop them.

00:47:28.600 --> 00:47:34.680
And a final quote from Willy Wonka:
"Invention is 93% perspiration,

00:47:34.770 --> 00:47:41.060
6% electricity, 4% evaporation,
and 2% butterscotch ripple."

00:47:41.180 --> 00:47:43.250
Think of it this way:
We've already gone through

00:47:43.250 --> 00:47:46.960
all the perspiration for you,
so one additional set of changes to

00:47:47.020 --> 00:47:51.670
your application and your utilities
will give you that extra magic that

00:47:51.780 --> 00:47:55.540
you'll see from our chocolate factory.

00:47:55.650 --> 00:47:57.490
Thank you very much.