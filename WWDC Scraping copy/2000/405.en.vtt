WEBVTT

00:00:10.100 --> 00:00:11.090
Is this on?

00:00:11.120 --> 00:00:13.340
Can everyone hear me?

00:00:13.470 --> 00:00:16.620
Good morning everyone.

00:00:16.620 --> 00:00:16.620
My name is Miguel Sanchez.

00:00:17.550 --> 00:00:20.240
I'm a member of the WebObjects
engineering group and with me

00:00:20.240 --> 00:00:24.040
is Mike Hoffhines who will be
helping me out during the demos.

00:00:24.140 --> 00:00:26.500
Let me get a quick read
of the audience out there.

00:00:26.500 --> 00:00:31.450
How many of you are WebObjects
developers or have used WebObjects?

00:00:31.550 --> 00:00:32.500
Good.

00:00:32.640 --> 00:00:35.290
How many of you have used Direct to Web?

00:00:35.790 --> 00:00:37.260
Okay.

00:00:37.260 --> 00:00:39.680
For those of you that haven't,
the first half of the talk will be

00:00:39.680 --> 00:00:42.700
an introduction to Direct to Web,
so don't freak out.

00:00:42.920 --> 00:00:46.200
But we'll also be talking
about some advanced features of

00:00:46.200 --> 00:00:48.260
Direct to Web for those users.

00:00:48.260 --> 00:00:51.500
Has anybody used
Direct to Web in 4.5 yet?

00:00:52.320 --> 00:00:53.300
Okay, one person.

00:00:53.300 --> 00:00:57.100
I'm going to be talking about
some of the new features we have.

00:00:57.100 --> 00:00:58.650
So what is Direct to Web?

00:00:58.920 --> 00:01:02.810
Direct to Web is a Java-based
technology for rapid development of

00:01:03.090 --> 00:01:05.290
database-driven web applications.

00:01:05.720 --> 00:01:10.300
Whenever you install
WebObjects on your system,

00:01:10.300 --> 00:01:12.930
don't go out looking for an
application called Direct to

00:01:12.930 --> 00:01:14.300
Web because you won't find it.

00:01:14.300 --> 00:01:15.300
There is no such thing.

00:01:15.300 --> 00:01:18.110
Direct to Web is really a set of things.

00:01:18.110 --> 00:01:21.400
It's a Java framework
called Direct to Web.

00:01:21.410 --> 00:01:25.020
It's a project builder wizard and a
web assistant applet that will help

00:01:25.020 --> 00:01:27.290
you configure applications at runtime.

00:01:27.300 --> 00:01:32.870
So the first thing we're going
to do is jump right into a demo.

00:01:33.480 --> 00:01:35.200
We're going to make your
head spin with demos today.

00:01:35.200 --> 00:01:38.600
We have four demos,
so I hope we don't lose you.

00:01:38.680 --> 00:01:41.710
Can we get the demo machine up on screen?

00:01:43.760 --> 00:01:47.030
So we're going to give you
a very quick demo of what

00:01:47.150 --> 00:01:50.400
Direct to Web can do for you.

00:01:50.400 --> 00:01:53.130
What we're going to do here is
create a very simple database

00:01:53.130 --> 00:01:57.480
administrative application that
uses a restaurant's database.

00:01:57.480 --> 00:02:00.600
We're going to use a restaurant's
database throughout all of our demo.

00:02:00.600 --> 00:02:04.480
The database models restaurants and
their locations and the type of food

00:02:04.480 --> 00:02:08.300
they serve and we're going to be
customizing our site along the way.

00:02:08.400 --> 00:02:12.710
So what we would start out doing
is bringing up Project Builder.

00:02:13.090 --> 00:02:15.300
and typing in the name
of our application.

00:02:15.300 --> 00:02:18.540
In this case,
it's going to be called Tengo Hambre,

00:02:18.610 --> 00:02:21.040
which in Spanish means I'm hungry.

00:02:21.040 --> 00:02:27.320
We pick the application to be
of type WebObjects application.

00:02:27.320 --> 00:02:29.710
This is the first place where
you see Direct to Web as

00:02:29.710 --> 00:02:32.320
a project builder wizard.

00:02:32.320 --> 00:02:35.230
Within project builder,
you choose your application

00:02:35.370 --> 00:02:36.940
to be of type Direct to Web.

00:02:36.940 --> 00:02:38.590
We go on.

00:02:39.200 --> 00:02:40.830
And here we specify the model.

00:02:40.900 --> 00:02:45.770
Before the demo, we created our database,
we created a Neo model,

00:02:45.770 --> 00:02:49.530
and that's pretty much the only
thing that Direct to Web requires

00:02:49.630 --> 00:02:51.500
to jumpstart the application.

00:02:51.500 --> 00:02:54.210
So Mike just picked the model,
the Tengo Hambre model.

00:02:54.300 --> 00:02:57.490
We'll be talking about the
model a little later on.

00:02:57.550 --> 00:02:59.050
And we click Next.

00:02:59.190 --> 00:02:59.980
We choose a look.

00:03:00.120 --> 00:03:01.990
I'll talk about the looks later.

00:03:02.080 --> 00:03:03.660
Neutral look, and then we launch.

00:03:03.860 --> 00:03:05.530
And that's it.

00:03:06.110 --> 00:03:10.400
Based solely on the information
you gave us in the model,

00:03:10.540 --> 00:03:19.950
Direct to Web has built this very generic
application for you with a login page.

00:03:19.950 --> 00:03:19.950
We log into the application.

00:03:22.020 --> 00:03:26.970
and it automatically knows about all of
the tables or the entities in your model,

00:03:26.970 --> 00:03:29.680
about their attributes,
and it gives you a whole set

00:03:29.680 --> 00:03:31.240
of pages to do stuff with them.

00:03:31.240 --> 00:03:35.840
You can query on them, you can insert,
delete, you can list them.

00:03:35.860 --> 00:03:38.850
So for example, we're going to look,
we're going to search on restaurants,

00:03:38.850 --> 00:03:41.460
we're going to go to the
restaurant search page,

00:03:41.500 --> 00:03:45.230
and we're going to look for restaurants
that begin with the letter M.

00:03:45.320 --> 00:03:47.370
And this is live,
we're hitting the database,

00:03:47.370 --> 00:03:50.240
we get a list page with
all the restaurants.

00:03:50.240 --> 00:03:55.530
If we wanted to delete,
we could hit the icon on the left hand,

00:03:55.530 --> 00:03:59.600
the right hand side of the screen,
or we could drill down into

00:03:59.600 --> 00:04:03.580
a more specific record,
like we're going to look

00:04:03.580 --> 00:04:06.470
into my restaurant right now,
Miguel's Mexican Food.

00:04:06.570 --> 00:04:08.740
So we get edit pages.

00:04:08.740 --> 00:04:11.680
We could,
let's say that my food chain is doing

00:04:11.780 --> 00:04:15.400
so well and my chicken fajitas are hit,
so we add a new location.

00:04:15.400 --> 00:04:19.470
Actually, we don't have any locations,
so it's my first location.

00:04:20.240 --> 00:04:23.450
So we have pages to edit,
to add objects in

00:04:23.450 --> 00:04:26.090
relationship to other objects.

00:04:26.350 --> 00:04:28.210
Okay,
we'll be talking more about all this.

00:04:28.390 --> 00:04:31.040
Right now,
what I wanted to let you know is

00:04:31.040 --> 00:04:34.360
that you get all of this for free,
just by giving us your EO model.

00:04:34.380 --> 00:04:37.240
And this is live and
hitting the database.

00:04:37.340 --> 00:04:41.350
And another thing I'd like to point out,
could we bring up the project?

00:04:45.290 --> 00:04:51.380
okay so he introduced a new location he
saved the project okay the main thing

00:04:51.380 --> 00:04:56.310
I'd like to point out here is there is
no code okay there is no here's your

00:04:56.310 --> 00:05:02.140
project and there's no reference to any
such thing as query restaurant page edit

00:05:02.140 --> 00:05:07.360
restaurant page all of these pages are
being generated generated dynamically

00:05:07.470 --> 00:05:13.320
at runtime for you okay so it's not
just a wizard that dumps code on enter

00:05:13.320 --> 00:05:17.680
your project this is all dynamic and
we that what that means is you can you

00:05:17.710 --> 00:05:22.340
can change it at runtime you can do
a lot of customization without having

00:05:22.380 --> 00:05:26.970
to write any code so we'll get back
to the slides now so that was a very

00:05:27.330 --> 00:05:30.660
very quick introduction to direct to web

00:05:32.970 --> 00:05:37.090
What kind of applications would
you want to use Direct to Web for?

00:05:37.170 --> 00:05:39.820
Well, first of all,
I think you should all consider

00:05:39.820 --> 00:05:43.670
Direct to Web as your generic
database administration application

00:05:43.670 --> 00:05:44.800
for any application you do.

00:05:44.800 --> 00:05:47.440
Without doing anything,
you have this application that

00:05:47.520 --> 00:05:51.740
gives you edit pages and query
pages and delete pages and all.

00:05:51.800 --> 00:05:55.660
This is probably the first
step to validating your model.

00:05:55.840 --> 00:05:56.800
Does it work?

00:05:56.800 --> 00:05:57.800
You don't have to write anything.

00:05:57.800 --> 00:06:00.940
You just want to make sure that
relationships point the way to

00:06:01.060 --> 00:06:04.800
what you want them to point,
that things make sense on the web.

00:06:04.800 --> 00:06:08.130
But you can also use
it to create very real,

00:06:08.130 --> 00:06:12.800
very functional intranet
and workgroup applications.

00:06:12.800 --> 00:06:14.800
This isn't just a prototyping tool.

00:06:14.800 --> 00:06:17.890
And the reason for that is
that we offer you an iterative

00:06:17.890 --> 00:06:19.800
application development cycle.

00:06:19.830 --> 00:06:21.790
Direct to Web plugs into all the data.

00:06:21.800 --> 00:06:24.800
You can use it to create different
layers that WebObjects provides you.

00:06:24.800 --> 00:06:28.760
So you're not just playing
around with prototypes here.

00:06:28.800 --> 00:06:31.630
What are the advantages
of using Direct to Web?

00:06:31.930 --> 00:06:35.790
First of all, you get a rich set of
default pages and behaviors,

00:06:36.160 --> 00:06:37.800
things you don't have to write.

00:06:37.820 --> 00:06:43.030
Hopefully this will allow you to
concentrate on your business model and

00:06:43.140 --> 00:06:45.740
the specific logic of your application.

00:06:45.800 --> 00:06:48.760
You also get something,
what we call WYSIWYG application

00:06:48.760 --> 00:06:49.740
customization.

00:06:49.860 --> 00:06:55.830
What we mean by this is that
we offer you a tool so that at

00:06:55.830 --> 00:06:59.770
runtime you can customize your
application without recompiling.

00:06:59.870 --> 00:07:03.630
It's a good starting point
for learning WebObjects.

00:07:03.840 --> 00:07:06.510
If you feel intimidated
by the learning curve,

00:07:06.510 --> 00:07:09.540
this is probably a good thing
to fire up and have a quick

00:07:09.670 --> 00:07:11.800
running application right away.

00:07:11.800 --> 00:07:14.820
And don't forget,
it offers you a layered approach

00:07:14.820 --> 00:07:16.800
to application development.

00:07:16.800 --> 00:07:17.330
If you're an experienced
WebObjects developer,

00:07:17.330 --> 00:07:17.800
you can plug in your application.

00:07:17.800 --> 00:07:21.800
You can plug into the more
advanced layers of Direct to Web.

00:07:21.800 --> 00:07:25.800
Direct to Web is not
just a prototyping tool.

00:07:26.420 --> 00:07:31.020
What is the typical development cycle
for the Direct to Web application?

00:07:31.060 --> 00:07:34.880
As we saw, we begin with a Neo model.

00:07:35.290 --> 00:07:41.010
The basis of a Direct to Web application
is a good database definition.

00:07:41.330 --> 00:07:44.960
With this we give you a default
Direct to Web application.

00:07:44.960 --> 00:07:47.640
What you saw,
you get all these pages to edit and

00:07:47.640 --> 00:07:50.160
delete and administer your database.

00:07:50.190 --> 00:07:56.990
Then you bring up a Java applet which we
call the Web Assistant and this applet

00:07:56.990 --> 00:08:01.200
runs alongside your browser and you can
tell us to configure certain things,

00:08:01.200 --> 00:08:04.190
certain things in your page
the way you want them to be.

00:08:04.200 --> 00:08:07.230
After having done this,
you have a more customized

00:08:07.370 --> 00:08:09.190
Direct to Web application.

00:08:09.190 --> 00:08:13.390
Notice that at this point you
still haven't written any code.

00:08:14.340 --> 00:08:15.700
But you can get to that.

00:08:15.700 --> 00:08:18.930
There's going to be a point where you
probably want to touch your HTML and

00:08:18.930 --> 00:08:22.190
you want to write your own Java core
or tweak some of the Java we have.

00:08:22.310 --> 00:08:23.030
You can do that.

00:08:23.200 --> 00:08:29.230
And the end result will hopefully
be a custom WebObjects application.

00:08:30.140 --> 00:08:32.770
So remember,
Direct to Web offers you different

00:08:32.940 --> 00:08:35.160
layers in which you can program.

00:08:35.160 --> 00:08:39.760
You can be at the very top
layer using a Java applet,

00:08:39.910 --> 00:08:43.860
no code, and using all the default
behavior we give you.

00:08:44.000 --> 00:08:48.470
You can also work at a middle layer
when you want to change the way

00:08:48.470 --> 00:08:51.000
your pages look with the layout.

00:08:51.000 --> 00:08:57.000
And you can get down to the guts
and write Java and do your own HTML.

00:08:57.000 --> 00:09:01.230
So we're going to focus
on layer one right now.

00:09:02.490 --> 00:09:07.000
This is the zero lines of code layer.

00:09:07.000 --> 00:09:12.140
What we ask from you right now is
to give us a model and we'll give

00:09:12.140 --> 00:09:14.040
you a lot of default behavior.

00:09:14.190 --> 00:09:16.500
First of all,
you get three different looks that

00:09:16.500 --> 00:09:18.230
you can pick with Direct to Web.

00:09:18.350 --> 00:09:21.330
You also get nine different
task pages and a web assistant

00:09:21.330 --> 00:09:23.040
to configure these with.

00:09:23.070 --> 00:09:25.950
So we're going to take
a look at the looks now.

00:09:26.350 --> 00:09:29.090
These are the types of looks
you can have in your WebObjects

00:09:29.090 --> 00:09:30.580
application by default.

00:09:30.580 --> 00:09:32.320
This is what we call the basic look.

00:09:32.390 --> 00:09:35.490
The menu bar runs across the
top and the main content of your

00:09:35.490 --> 00:09:37.300
application is in the middle.

00:09:37.300 --> 00:09:39.300
This is the list page for the basic look.

00:09:39.300 --> 00:09:42.560
We also have the neutral look,
which is the one we're going

00:09:42.560 --> 00:09:44.300
to be using in our demo here.

00:09:44.330 --> 00:09:48.910
The same functionality as the basic look,
except that the menu bar runs

00:09:48.910 --> 00:09:52.300
across the side and there's no
references to any Apple icons.

00:09:52.350 --> 00:09:56.240
This is a good starting point for
customizing your own application

00:09:56.280 --> 00:09:58.300
for your corporate look and feel.

00:09:58.300 --> 00:10:01.290
And the WebObjects look.

00:10:01.400 --> 00:10:03.840
Very similar to the neutral look,
but except that we have

00:10:03.840 --> 00:10:05.290
Apple icons here and there.

00:10:05.490 --> 00:10:09.710
For those of you that have used
Direct to Web in the previous versions,

00:10:09.710 --> 00:10:12.690
the neutral look is new for version 4.5.

00:10:13.020 --> 00:10:15.740
Once you pick the look you
want for your application,

00:10:15.770 --> 00:10:18.500
we give you task pages.

00:10:19.290 --> 00:10:21.310
With this page you'll
be able to query on,

00:10:21.310 --> 00:10:25.490
you'll be able to insert new entities,
you'll be able to associate

00:10:25.660 --> 00:10:31.100
entities and relationships
and you get all this for free.

00:10:31.360 --> 00:10:34.540
But there's going to be a point
where the default behavior we give

00:10:34.540 --> 00:10:36.100
you is not good enough for you.

00:10:36.100 --> 00:10:40.880
You want to tell us a little more about
how you want your attributes displayed,

00:10:40.900 --> 00:10:44.140
which entities you want read-only,
which ones you want read-write.

00:10:44.240 --> 00:10:47.080
For that, we offer you a web assistant,
which is a little Java applet,

00:10:47.080 --> 00:10:50.720
which we're going to show
you right in a moment,

00:10:50.810 --> 00:10:54.760
where you can tell us how you
want certain things displayed.

00:10:54.760 --> 00:10:56.680
You can make certain decisions.

00:10:56.710 --> 00:11:00.670
And you can do all this
without writing any code.

00:11:01.610 --> 00:11:04.690
So the Web Assistant allows you to
configure things like your access

00:11:04.790 --> 00:11:07.700
permissions and the entities,
the way you want to

00:11:07.700 --> 00:11:11.980
display your attributes,
and general page layout issues.

00:11:12.060 --> 00:11:15.020
This is the final application
we're working towards,

00:11:15.030 --> 00:11:16.900
the Tango Ambry application.

00:11:16.900 --> 00:11:18.600
We're going to have three pages.

00:11:18.660 --> 00:11:22.230
In the first page,
we're going to have a query page

00:11:22.230 --> 00:11:26.590
for restaurants where users can
log in and query on a particular

00:11:26.590 --> 00:11:31.000
restaurant based on a certain type
of food or where the restaurant is.

00:11:31.580 --> 00:11:34.540
After they do their query,
they would see the results of all the

00:11:34.540 --> 00:11:37.820
possible restaurants they can go to.

00:11:37.920 --> 00:11:41.340
And then they would pick a particular
restaurant and get the information

00:11:41.340 --> 00:11:44.980
such as where it is and how to
get there and the phone number.

00:11:45.100 --> 00:11:47.330
So that's what we want to get to.

00:11:47.350 --> 00:11:49.100
It's going to take us
three demos to do that,

00:11:49.100 --> 00:11:51.700
but I want you to have that in your mind.

00:11:51.760 --> 00:11:54.210
This is the model we're using.

00:11:54.880 --> 00:11:59.200
The main entities in our database are
going to be restaurants and locations.

00:11:59.370 --> 00:12:01.680
Where they are,
each location might have a different

00:12:01.680 --> 00:12:03.440
price range depending on the city.

00:12:03.590 --> 00:12:08.800
And each restaurant might prepare
more than one type of cuisine.

00:12:08.810 --> 00:12:11.690
So now we go off to demo two.

00:12:12.950 --> 00:12:16.760
In the first demo,
we created a very generic

00:12:17.110 --> 00:12:21.310
application that allowed us to
access the restaurant database that

00:12:21.310 --> 00:12:23.810
we had created prior to the demo.

00:12:24.080 --> 00:12:33.210
In this demo, wrong screen, oh no,
I'm looking at the wrong, yeah,

00:12:33.210 --> 00:12:33.210
I was looking down here, it's okay.

00:12:33.380 --> 00:12:36.000
So in this application,
we're going to start to customize,

00:12:36.010 --> 00:12:40.600
give our application a little more
the look and feel that we want.

00:12:40.760 --> 00:12:43.860
And the first thing we do is
bring up the web assistant,

00:12:43.860 --> 00:12:47.500
which is a Java applet,
runs alongside our browser.

00:12:51.000 --> 00:12:56.540
Coming up.

00:12:56.540 --> 00:13:01.040
We're running this on
Mac OS Server 1.2 with OmniWeb.

00:13:02.500 --> 00:13:04.960
So here's the Web Assistant.

00:13:05.010 --> 00:13:08.810
And the Web Assistant has different
tabs depending on the function you

00:13:08.810 --> 00:13:10.400
want to perform at that moment.

00:13:10.400 --> 00:13:12.400
So let's look at the Entities tab.

00:13:12.400 --> 00:13:15.430
If you bring up this tab,
you'll be able to tell us which

00:13:15.800 --> 00:13:18.970
entities you want to have in
your application be read/write,

00:13:18.970 --> 00:13:21.410
which ones you want to read only,
and which ones you want

00:13:21.460 --> 00:13:22.360
to hide altogether.

00:13:22.400 --> 00:13:26.400
For our purposes of the demo,
we want everything to be read/write only.

00:13:26.400 --> 00:13:29.480
We don't want the users out
on the internet changing our

00:13:29.480 --> 00:13:31.400
information on the database.

00:13:31.400 --> 00:13:37.530
The next tab you see is the Pages,
the Page tab.

00:13:38.400 --> 00:13:42.700
Here you can customize certain
attributes about your whole page.

00:13:42.700 --> 00:13:45.270
For example,
let's go to the list page on restaurants.

00:13:45.300 --> 00:13:48.730
Let's do a query.

00:13:52.700 --> 00:13:55.860
And here, notice that the live
assistant is following you,

00:13:55.860 --> 00:14:00.280
depending on the page you go to,
that's the display of the live assistant.

00:14:00.280 --> 00:14:01.720
So here you can tell us things like,
well,

00:14:01.720 --> 00:14:03.680
do you want to show the banner or not?

00:14:03.800 --> 00:14:06.260
What kind of color do you want
for the background tables?

00:14:06.260 --> 00:14:10.350
Some pages even have more than
one way of displaying themselves.

00:14:10.350 --> 00:14:13.630
For example,
you can display the results of a query in

00:14:13.630 --> 00:14:18.310
a plain list format or in a master distal
format or in a list page that shows the

00:14:18.460 --> 00:14:20.260
results in columns rather than rows.

00:14:20.260 --> 00:14:24.470
In this case, all we're going to do is
get rid of the banner.

00:14:25.670 --> 00:14:28.460
We do save and then we refresh.

00:14:28.460 --> 00:14:31.400
Notice that we changed some
configuration in the Live Assistant,

00:14:31.400 --> 00:14:34.090
we refreshed the page
and the banner is gone.

00:14:34.140 --> 00:14:36.070
By the way,
the banner was the thing that said list,

00:14:36.230 --> 00:14:40.360
not this thing which is called a
batch navigation bar and you need

00:14:40.390 --> 00:14:44.730
that because you might have more
than one page worth of results.

00:14:45.220 --> 00:14:48.480
So the next tab on the Web Assistant is
called the Properties and this

00:14:48.480 --> 00:14:51.880
is probably where you're going
to be spending most of your time.

00:14:52.940 --> 00:14:56.800
We're going now to the query page for
restaurant and the properties tab.

00:14:56.800 --> 00:15:01.750
And you'll be able to see in
the middle column right here,

00:15:02.030 --> 00:15:04.820
You'll be able to see all of the
properties that are currently

00:15:04.920 --> 00:15:06.300
displayed for that page.

00:15:06.300 --> 00:15:10.600
In this case, querying on an icon for a
restaurant does not make sense,

00:15:10.600 --> 00:15:14.570
so we want to get rid of that
so we can hide properties.

00:15:14.730 --> 00:15:18.560
We also want the name property
to be the first thing on the page

00:15:18.850 --> 00:15:21.800
so we can move it up to the top.

00:15:21.900 --> 00:15:26.670
Then we can click update on the
web assistant or save and do a

00:15:26.720 --> 00:15:31.600
refresh and we see that change
in our application at runtime.

00:15:31.610 --> 00:15:36.600
We also have, in addition to renaming
them and reordering them,

00:15:36.600 --> 00:15:41.500
we can choose to display
them using different fields.

00:15:41.500 --> 00:15:45.140
For example, in the locations,
we don't want people to query

00:15:45.140 --> 00:15:49.450
based on street address,
we want them to query based on the zip.

00:15:50.030 --> 00:15:52.040
SIP code.

00:15:52.040 --> 00:15:56.140
So we tell her, you know,
display the SIP code for this field.

00:15:56.660 --> 00:15:59.720
And then for Cuisines,
which is a too many relationship,

00:15:59.840 --> 00:16:04.330
that's a very non-intuitive way of seeing
all the types of food you can query on.

00:16:04.330 --> 00:16:10.420
We offer you a type of component
called D2W Query Too Many Relationship.

00:16:10.810 --> 00:16:14.300
Where you can tell it to use
the text description of the...

00:16:14.300 --> 00:16:17.440
Are you... You're still in locations,
Mike.

00:16:17.440 --> 00:16:18.050
I'm sorry?

00:16:18.130 --> 00:16:19.400
You're still in locations.

00:16:19.400 --> 00:16:23.690
I didn't hear you from... Yeah.

00:16:27.500 --> 00:16:31.400
So we're picking to display Cuisines
using a relationship component

00:16:31.400 --> 00:16:34.050
in a browser with one column.

00:16:36.210 --> 00:16:38.200
and we read this play.

00:16:38.200 --> 00:16:39.440
Okay.

00:16:39.440 --> 00:16:42.200
He put this in also as
a too many relationship.

00:16:42.200 --> 00:16:43.180
Okay.

00:16:43.320 --> 00:16:48.200
But what I'd like you to see here is that
you're doing all these configurations

00:16:48.200 --> 00:16:51.200
with your application at runtime
and your application is still live.

00:16:51.250 --> 00:16:56.760
There's way too many components that
we offer you here to talk about all

00:16:56.760 --> 00:16:58.200
of them during this presentation.

00:16:58.200 --> 00:17:00.030
That would take all of our time.

00:17:00.490 --> 00:17:05.200
So just go away with the idea that if you
have numbers or strings or relationships

00:17:05.200 --> 00:17:08.590
whether they're too many or too one,
we offer you different types of

00:17:08.690 --> 00:17:12.580
browsers and tables and color
strings and all of these types of

00:17:12.600 --> 00:17:15.200
configurable components for you to use.

00:17:15.200 --> 00:17:16.200
So this is our page.

00:17:16.200 --> 00:17:19.200
Now we query on American Food.

00:17:21.720 --> 00:17:23.460
See, the app is still live.

00:17:23.470 --> 00:17:29.380
We're going to configure this page to
show the locations of the restaurants.

00:17:29.390 --> 00:17:31.640
So we go to the Live Assistant.

00:17:31.730 --> 00:17:36.070
And by default we hide
relationships in list pages.

00:17:36.070 --> 00:17:38.570
So we tell it, you know,
we want to see the

00:17:38.570 --> 00:17:40.750
locations of the restaurant.

00:17:40.970 --> 00:17:45.020
And we want to use a
display-to-menu table to see them,

00:17:45.050 --> 00:17:48.280
see all the types of
components you can use,

00:17:48.280 --> 00:17:51.010
and show the city of the restaurant.

00:17:57.500 --> 00:18:00.260
So we're doing all of this
configuration at runtime.

00:18:00.300 --> 00:18:02.480
We pick a particular restaurant.

00:18:02.640 --> 00:18:05.750
Can you click on Palo Alto, for example?

00:18:06.790 --> 00:18:08.490
We're going to a restaurant inspect page.

00:18:08.600 --> 00:18:13.610
In this case, we're going to hide all
of the address attributes.

00:18:20.500 --> 00:18:24.940
And we're also going to see,
see where it says price right here?

00:18:24.960 --> 00:18:27.860
We know that in our database,
price holds two things.

00:18:27.860 --> 00:18:31.640
It not only holds the description,
such as inexpensive in this case,

00:18:31.650 --> 00:18:36.000
it also holds an icon showing a
dollar sign or two dollar signs based

00:18:36.000 --> 00:18:37.980
on how expensive the restaurant is.

00:18:38.060 --> 00:18:46.570
We can traverse to one relationships
in our pages and we can choose

00:18:46.710 --> 00:18:48.970
to display the price icon.

00:18:49.610 --> 00:18:52.100
You've got to get rid of the price first.

00:18:52.110 --> 00:18:56.270
Yeah, you can say,
I want to choose the price relationship,

00:18:56.270 --> 00:19:01.400
display its icon attribute as an image.

00:19:04.300 --> 00:19:12.610
You get a very rich set of
components that you can use here.

00:19:12.940 --> 00:19:15.280
And you might be wondering, well,
this is fine,

00:19:15.290 --> 00:19:17.760
but in the first demo you showed
us that there was no code,

00:19:17.900 --> 00:19:19.790
so where is all this information going?

00:19:19.800 --> 00:19:24.160
Well, if we bring up the project,
you see that we still have no

00:19:24.200 --> 00:19:26.740
references to any specific pages.

00:19:26.800 --> 00:19:31.240
All of that configuration you
were giving us goes into a model.

00:19:31.240 --> 00:19:33.800
We call it the D2W model.

00:19:33.800 --> 00:19:37.310
And it's nothing more than
a text file with all the

00:19:37.410 --> 00:19:39.800
rules that you're telling us.

00:19:40.000 --> 00:19:42.000
For example,
in this rule you're telling us,

00:19:42.000 --> 00:19:47.430
if you're in the task inspect and
the entity is location and what you

00:19:47.430 --> 00:19:50.980
want to display is a price.icon,
then you have to use the

00:19:50.980 --> 00:19:54.200
display image as your component.

00:19:54.200 --> 00:19:58.550
So all of this information you're
giving us using the Web Assistant is

00:19:58.630 --> 00:20:01.400
being stored in a text file.

00:20:01.400 --> 00:20:03.400
So that's the end of demo two.

00:20:11.200 --> 00:20:13.100
Can we go back to the slides?

00:20:13.100 --> 00:20:17.690
So we've been working in the first
layer of Direct to Web where without

00:20:17.690 --> 00:20:21.260
writing any code and using a Java applet
that runs alongside your browser,

00:20:21.320 --> 00:20:26.400
you get to customize a lot of things
about your page and how you want to

00:20:26.400 --> 00:20:28.890
display parts of your attributes.

00:20:31.820 --> 00:20:34.450
Now we're jumping to layer two.

00:20:34.530 --> 00:20:37.300
You might say, "Well, Miguel,
that's great, but you know what?

00:20:37.380 --> 00:20:40.460
I don't like the menu bar.

00:20:40.570 --> 00:20:44.700
I want my icon, my company's icon to
show up on all the pages.

00:20:44.700 --> 00:20:46.260
I want this banner to be here.

00:20:46.260 --> 00:20:51.130
I want this other component to
be down here." We understand.

00:20:51.230 --> 00:20:54.520
We can't guess everything that
you want right off the bat,

00:20:54.520 --> 00:20:56.700
but we give you the hooks to do that.

00:20:56.790 --> 00:20:59.660
So this is where layer two comes out.

00:20:59.760 --> 00:21:02.630
In layer two,
you can begin to customize the

00:21:02.630 --> 00:21:07.420
layout of your application,
whether it's application-wide

00:21:07.480 --> 00:21:09.390
or task-specific.

00:21:09.940 --> 00:21:12.700
For application-wide layout,
for things that you want

00:21:12.700 --> 00:21:15.670
displayed on all of your pages,
you're going to edit something

00:21:15.670 --> 00:21:16.800
called the page wrapper.

00:21:16.800 --> 00:21:20.440
The page wrapper is a piece of
HTML which is going to be inserted

00:21:20.440 --> 00:21:24.190
in your project when you create it,
which tells us how you

00:21:24.370 --> 00:21:25.800
want your pages laid out.

00:21:25.800 --> 00:21:27.800
Where does the menu go?

00:21:27.800 --> 00:21:29.800
Where does the content of the page go?

00:21:29.800 --> 00:21:32.800
So you can plug in your own
stuff into this page and say,

00:21:32.800 --> 00:21:35.800
"Well, I want this icon to show
up on all the pages.

00:21:35.800 --> 00:21:41.630
I want this banner to show up on all
the pages." And that's how you get

00:21:41.630 --> 00:21:44.420
your specific corporate look and feel.

00:21:44.600 --> 00:22:51.900
[Transcript missing]

00:22:52.960 --> 00:22:57.040
Now, how does a page know what to
do with itself at runtime?

00:22:57.290 --> 00:23:02.560
How does the rule information get
translated into something meaningful?

00:23:02.750 --> 00:23:07.030
As we saw, rules are stored in a
file in text format.

00:23:07.150 --> 00:23:11.600
For example,
here we're looking at this rule.

00:23:11.760 --> 00:23:14.560
This is very similar to
what we saw in the demo.

00:23:14.680 --> 00:23:17.010
If we're listing a
restaurant's locations,

00:23:17.010 --> 00:23:19.380
then we want to use the
display to many table.

00:23:19.650 --> 00:23:22.230
So that's a text file.

00:23:22.600 --> 00:23:27.330
To evaluate rules at runtime,
we use something called a D2W context.

00:23:27.340 --> 00:23:32.250
So all of the bindings in your
HTML template that we give you are

00:23:32.250 --> 00:23:36.490
going to have reference to keys of
the type D2W context dot something.

00:23:36.500 --> 00:23:40.360
So when you see D2W context
dot something in your WAD file,

00:23:40.420 --> 00:23:43.500
in your bindings file
for the HTML we give you,

00:23:43.500 --> 00:23:46.500
that's when the rule system kicks in.

00:23:46.500 --> 00:23:51.930
And we're going to show you
some of this in demo three.

00:23:58.300 --> 00:24:01.150
So in our second demo,
we customized the query

00:24:01.300 --> 00:24:04.420
page for restaurants,
the list page for restaurants,

00:24:04.420 --> 00:24:06.800
and the inspect page for locations.

00:24:06.890 --> 00:24:09.320
In this demo,
we're going to begin to give

00:24:09.410 --> 00:24:12.640
a more corporate look and
feel to our application.

00:24:12.740 --> 00:24:15.990
And because we start to use
our own company's resources,

00:24:16.240 --> 00:24:18.890
our images and our source code,
we need to add the

00:24:18.890 --> 00:24:22.140
framework to our project,
which is what Mike just did.

00:24:22.240 --> 00:24:25.270
The first thing we do is bring
up the page wrapper component,

00:24:25.310 --> 00:24:26.740
which is in our project.

00:24:26.840 --> 00:24:30.940
And as you can see, this tells us, well,
the layout of this application

00:24:30.940 --> 00:24:34.130
is this blue bar with a
menu and then the content.

00:24:34.240 --> 00:24:35.580
We don't want the menu.

00:24:35.660 --> 00:24:39.130
So Mike goes in there,
wipes out the menu component,

00:24:39.130 --> 00:24:41.330
and replaces it with an image.

00:24:41.920 --> 00:24:47.000
And we say that the image we want
is the logo for our application,

00:24:47.030 --> 00:24:49.870
which is a gift called Tengo Number 3.

00:24:49.960 --> 00:24:51.250
There it is.

00:24:51.320 --> 00:24:54.520
And our marketing department
decided that we also want to

00:24:54.520 --> 00:24:56.960
advertise our sponsors and our site.

00:24:57.090 --> 00:25:03.560
So across the top, below the content,
look for the content.

00:25:03.560 --> 00:25:04.760
Yeah, I lost that here.

00:25:04.760 --> 00:25:06.210
Yeah.

00:25:07.650 --> 00:25:13.040
We want to insert a reusable
component which we wrote before.

00:25:13.040 --> 00:25:16.550
It's called the add component,
the add banner.

00:25:19.340 --> 00:25:23.260
So now we've modified
the HTML surrounding our

00:25:23.300 --> 00:25:24.820
layer of application.

00:25:24.820 --> 00:25:26.810
We recompile.

00:25:30.060 --> 00:25:31.490
Notice we haven't added any code.

00:25:31.590 --> 00:25:35.150
Well, we have added a little bit of code
where we do the advertisement as

00:25:35.150 --> 00:25:37.550
you'll see once the application runs.

00:25:44.450 --> 00:25:47.400
So we log in and there it is.

00:25:47.400 --> 00:25:50.910
Our application is starting
to take more the look we want.

00:25:50.940 --> 00:25:52.770
This was a very simple change.

00:25:52.850 --> 00:25:54.740
All we did was add an icon.

00:25:54.860 --> 00:25:58.190
But what I want you to realize
is that you have the HTML there

00:25:58.190 --> 00:26:00.100
so you can do whatever you want.

00:26:00.220 --> 00:26:05.700
And we can click,
let's go to the restaurant list page.

00:26:05.800 --> 00:26:08.270
We search on restaurants.

00:26:11.210 --> 00:26:14.230
And you can see that the icon
here changes because our add

00:26:14.230 --> 00:26:17.300
component is clicking into place.

00:26:17.410 --> 00:26:19.970
So that's how you use the page
wrapper to customize the whole

00:26:20.050 --> 00:26:21.510
layout of your application.

00:26:21.540 --> 00:26:24.280
But now let's look at this list page.

00:26:24.280 --> 00:26:32.590
In our application,
we don't want this icon to show up.

00:26:33.100 --> 00:26:36.800
This icon allows you to go to the
inspect page of a particular restaurant.

00:26:36.800 --> 00:26:38.200
We don't want that to show up.

00:26:38.220 --> 00:26:40.460
In your case, it could have been
something more complex.

00:26:40.520 --> 00:26:44.700
In this case,
we don't want this column to show up.

00:26:45.020 --> 00:26:49.400
And we don't give you access in the web
assistant to get rid of that column.

00:26:49.400 --> 00:26:51.940
And you're probably going to
come across moments in your

00:26:51.940 --> 00:26:53.970
development cycle where you say,
"Oh,

00:26:53.970 --> 00:26:58.290
I really wish these guys would have given
me this checkbox in the web assistant

00:26:58.290 --> 00:27:02.030
to do this or to do that." Well,
that was a problem in previous

00:27:02.100 --> 00:27:03.580
releases of Direct to Web.

00:27:03.880 --> 00:27:06.350
I think it's much less of a
problem now because you can

00:27:06.350 --> 00:27:07.890
bring up the web assistant.

00:27:07.890 --> 00:27:11.390
Is the web assistant up?

00:27:17.000 --> 00:27:19.410
Okay.

00:27:19.410 --> 00:27:24.550
I think you have to
restart the web assistant.

00:27:30.390 --> 00:27:33.540
Yeah,
but there was also an error on startup.

00:27:33.570 --> 00:27:35.800
So just restart it here.

00:27:38.200 --> 00:27:45.980
Okay, so what we're going to do once the
web assistant comes up is we're going

00:27:45.980 --> 00:27:48.690
to go to the restaurant list page.

00:27:55.900 --> 00:27:59.560
and we're going to generate
a template for that page.

00:27:59.560 --> 00:28:02.460
And once we generate the template,
we're going to have the

00:28:02.460 --> 00:28:05.440
HTML for the template and we're
going to be able to edit it,

00:28:05.440 --> 00:28:08.280
but it's still going to be the
dynamic version of the HTML.

00:28:08.280 --> 00:28:13.940
We'll be able to do stuff to it,
but not lose the accustomed... whoops.

00:28:18.960 --> 00:28:21.900
Oh, the port to the web assistant, right?

00:28:21.900 --> 00:28:28.070
Yeah, the problem we're having here is
each time the application comes up,

00:28:28.150 --> 00:28:30.920
it comes up on a different port,
and the web assistant

00:28:30.920 --> 00:28:32.900
connects to that port.

00:28:32.900 --> 00:28:36.850
So we were restarting the app and
the application had changed its port,

00:28:36.850 --> 00:28:38.900
so it didn't know how to talk back.

00:28:38.900 --> 00:28:41.340
We thought we had set a
default for that port,

00:28:41.340 --> 00:28:42.890
but obviously we hadn't.

00:28:43.730 --> 00:28:46.250
So we're back here,
we're in the list page

00:28:46.340 --> 00:28:49.500
and we say we want,
we hope,

00:28:49.540 --> 00:28:53.320
we wish we could get to the HTML of
this piece of Direct to Web so we

00:28:53.320 --> 00:28:56.160
can get rid of this column here.

00:28:56.320 --> 00:29:02.990
So we go to the generation tab of
the Web Assistant and we choose list.

00:29:08.520 --> 00:29:12.840
and we tell it to give us the
template for this component.

00:29:12.840 --> 00:29:14.340
So that was a very simple operation.

00:29:14.440 --> 00:29:15.500
Let's see what that did.

00:29:15.590 --> 00:29:17.900
If we go to the project,

00:29:18.630 --> 00:29:23.560
We see that we have something
called neutral list template and we

00:29:23.560 --> 00:29:26.620
opened that in WebObjects Builder.

00:29:27.510 --> 00:29:32.740
Can you show a little bit of the HTML?

00:29:32.740 --> 00:29:32.740
Scroll down.

00:29:36.800 --> 00:29:40.000
Actually, first show the other view,
the display view.

00:29:40.020 --> 00:29:40.300
Yeah.

00:29:40.300 --> 00:29:43.730
But scroll down.

00:29:43.730 --> 00:29:43.730
All right.

00:29:44.480 --> 00:29:48.400
So here you have the HTML that
displays the list page.

00:29:48.400 --> 00:29:50.480
Go down a little more, a little more.

00:29:50.480 --> 00:29:53.950
But notice that there's no
reference whatsoever to your model.

00:29:54.070 --> 00:29:57.820
There's no reference to a restaurant
because this is the dynamic version of

00:29:57.910 --> 00:30:00.400
the HTML we're using in Direct to Web.

00:30:00.400 --> 00:30:04.490
And can you go back to
the bindings view now?

00:30:05.100 --> 00:30:08.270
In the binding view,
you will see a lot of references to

00:30:08.270 --> 00:30:14.200
things like D2WContext.ComponentName,
D2WContext.DisplayPropertyKeys.

00:30:14.330 --> 00:30:17.960
So at runtime, all of these things will
be evaluated for you.

00:30:18.110 --> 00:30:20.900
So, okay, so what's good about this?

00:30:20.980 --> 00:30:25.470
We're going to get rid of the column.

00:30:31.200 --> 00:30:38.490
We're going to get rid of this whole
column to select... I think that's it.

00:30:39.700 --> 00:30:41.230
Okay, and then we recompile.

00:30:41.320 --> 00:30:42.700
So we're editing the HTML.

00:30:42.700 --> 00:30:44.330
In this case we're doing
a very simple edit.

00:30:44.340 --> 00:30:46.150
We're just getting rid of a column.

00:30:46.150 --> 00:30:48.540
But it could have been something
much more complex in the way you

00:30:48.540 --> 00:30:51.180
want to lay out your display,
your list display.

00:30:51.220 --> 00:30:53.770
We recompile your application.

00:30:57.800 --> 00:31:01.800
And we're going to go once again
to the restaurant list page.

00:31:01.800 --> 00:31:08.160
Just click on restaurant, right?

00:31:11.100 --> 00:31:13.640
Okay, so we no longer see that column.

00:31:13.680 --> 00:31:15.790
Okay, so what?

00:31:16.160 --> 00:31:17.130
Right?

00:31:17.270 --> 00:31:20.610
Well, we can still use the web assistant.

00:31:20.730 --> 00:31:25.490
Go back to the web assistant and
we might have lost the port again.

00:31:27.930 --> 00:31:32.530
In previous versions of Direct to Web,
when you generated the HTML,

00:31:32.630 --> 00:31:36.200
you didn't have the dynamic
version of the HTML.

00:31:36.200 --> 00:31:39.990
You had a very static,
you had reference to the specific

00:31:40.370 --> 00:31:41.780
entity you wanted to display.

00:31:41.800 --> 00:31:44.800
So you lost all the
ability to customize it.

00:31:44.800 --> 00:31:47.990
But with templates,
you're able to access the HTML,

00:31:48.100 --> 00:31:51.910
do whatever you want to it,
but still be able to customize

00:31:51.910 --> 00:31:56.590
it using the Web Assistant,
which should come up in a minute.

00:32:02.380 --> 00:32:05.770
So we're in the list page.

00:32:05.770 --> 00:32:09.490
The redisplay of-- go to
properties for the list page.

00:32:09.520 --> 00:32:13.650
And let's say that we want
to display this column,

00:32:13.650 --> 00:32:15.350
this redisplay.

00:32:18.930 --> 00:32:24.210
Let's say that we want to display
the name of restaurants using a...

00:32:25.100 --> 00:32:28.600
A string that allows us
to configure color to it,

00:32:28.630 --> 00:32:32.620
something called a style string, bold,
italic,

00:32:32.620 --> 00:32:36.100
and then justifying it to the left.

00:32:36.100 --> 00:32:37.960
We re-display.

00:32:39.400 --> 00:32:40.400
And there you go.

00:32:40.400 --> 00:32:41.130
Okay?

00:32:41.160 --> 00:32:45.020
So you get, you don't lose the ability to
customize your pages using the

00:32:45.020 --> 00:32:48.860
Web Assistant and for those of you that
have used Direct to Web in the past,

00:32:48.860 --> 00:32:54.400
I hope you see the power here in
not losing the customizability.

00:32:54.400 --> 00:32:57.640
So,
I think this is the end of our demo two,

00:32:57.640 --> 00:32:58.370
right?

00:32:58.550 --> 00:32:59.400
Demo three?

00:32:59.400 --> 00:33:01.600
Which number are we in?

00:33:01.600 --> 00:33:02.370
I forgot.

00:33:05.550 --> 00:33:09.930
So we've just finished doing the second
layer of Direct to Web where we're

00:33:09.930 --> 00:33:13.520
changing the layout of our application.

00:33:13.820 --> 00:33:16.290
But you're all developers,
so you're probably itching to

00:33:16.350 --> 00:33:19.160
get to the Java code and plug
in your own functionality.

00:33:19.280 --> 00:33:21.310
You can do that.

00:33:22.200 --> 00:33:24.300
Okay.

00:33:24.300 --> 00:33:28.350
You can, in layer three of Direct to Web,
you can modify the behavior

00:33:28.440 --> 00:33:29.740
of your application.

00:33:29.740 --> 00:33:32.190
And we offer four ways of doing that.

00:33:32.270 --> 00:33:37.200
Something new in version four or
five is called D2W custom component.

00:33:37.310 --> 00:33:40.130
We also offer the Direct to
Web components as reusable

00:33:40.180 --> 00:33:44.200
components to use in your
application as embedded components.

00:33:44.200 --> 00:33:48.680
We offer Direct to Web API that
you can program to.

00:33:48.680 --> 00:33:51.760
And you can always generate the code.

00:33:52.280 --> 00:33:55.610
D2W Custom Component,
second time for developers

00:33:55.610 --> 00:33:56.700
to wake up here.

00:33:56.850 --> 00:33:58.820
Nguyen 45

00:33:59.810 --> 00:34:03.550
You can plug in your own
reusable component to display a

00:34:03.550 --> 00:34:05.840
particular attribute in a page.

00:34:05.860 --> 00:34:10.790
All you have to take care of is that
that component implements two keys,

00:34:10.960 --> 00:34:13.940
one called object and one called key.

00:34:13.940 --> 00:34:17.570
That's how we're going to instantiate
your component and tell you this is

00:34:17.580 --> 00:34:20.960
the object you're displaying and this
is the key you want to display right

00:34:20.960 --> 00:34:23.000
now in case it's a reusable component.

00:34:23.000 --> 00:34:26.920
Say you're displaying dates and you have
three instances of dates in your page.

00:34:26.920 --> 00:34:29.780
You need to know which particular
key we have at that moment.

00:34:29.780 --> 00:34:35.140
And then you use the Web Assistant to
configure to tell us we're going

00:34:35.140 --> 00:34:39.540
to... And for this property,
please use my component.

00:34:41.770 --> 00:34:45.280
You also have all of the
Direct to Web pages available

00:34:45.410 --> 00:34:48.190
to you as reusable components.

00:34:48.410 --> 00:34:52.150
In fact,
there is a palette in WebObjects Builder

00:34:52.150 --> 00:34:56.650
where you can just drag things into
your HTML and set up all the bindings in

00:34:56.720 --> 00:35:01.820
case you want to embed one of our list
pages in one of your more complex pages.

00:35:02.940 --> 00:35:05.840
You have API that you can program to.

00:35:05.970 --> 00:35:11.400
You can jump into the dynamic world of
Direct to Web from your applications,

00:35:11.400 --> 00:35:14.800
even if they didn't start out
being Direct to Web applications.

00:35:14.800 --> 00:35:19.800
All you have to do is add the framework
to your project and you can call methods.

00:35:19.800 --> 00:35:24.970
Let's say that you have five pages
in your application which you wrote,

00:35:25.120 --> 00:35:26.800
but you like our list page.

00:35:26.800 --> 00:35:31.280
You would like to do 80% of what you do,
but at some point have a hyperlink

00:35:31.280 --> 00:35:34.880
that jumps into the Direct to
Web list page because you don't want

00:35:34.890 --> 00:35:36.780
to rewrite all that functionality.

00:35:36.820 --> 00:35:38.800
You can do that.

00:35:38.890 --> 00:35:42.800
The key to doing that is
messaging a class called D2W.

00:35:42.800 --> 00:35:47.870
We got a static method called Factory,
which gives you the main instance

00:35:47.960 --> 00:35:49.710
of the Direct to Web class.

00:35:49.950 --> 00:35:53.500
And in that class you're going
to find a lot of methods like

00:35:53.670 --> 00:35:56.100
list page for entity name.

00:35:56.100 --> 00:36:00.290
You'll find another method called
query page for entity name,

00:36:00.390 --> 00:36:01.870
inspect page for entity name.

00:36:01.900 --> 00:36:06.730
And you give us the entity and the
session and we'll give you back the page.

00:36:06.730 --> 00:36:11.570
So from your code you can message
us and we'll give you back the

00:36:11.570 --> 00:36:14.900
page for you to jump into the
dynamic world of Direct to Web.

00:36:14.980 --> 00:36:18.760
And obviously each one of these
pages you get back is going to

00:36:18.760 --> 00:36:20.900
have its own associated API.

00:36:20.900 --> 00:36:24.310
In the case of the list page,
we have methods set data

00:36:24.390 --> 00:36:25.900
source and set next page.

00:36:25.900 --> 00:36:29.660
So for example here you can tell
us if it's a list page where are

00:36:29.740 --> 00:36:31.890
you going to get your data from?

00:36:31.990 --> 00:36:34.820
After I click return on my list page,
where do you want me to go back to?

00:36:34.950 --> 00:36:36.850
You can do that.

00:36:36.900 --> 00:36:40.870
So if it were an inspect page you
would have slightly different API.

00:36:40.870 --> 00:36:44.110
But you have API to all of the pages
in Direct to Web so that you can

00:36:44.180 --> 00:36:44.900
jump in and out of the list page.

00:36:44.900 --> 00:36:47.370
into them from your code.

00:36:50.070 --> 00:36:52.540
And finally, you can generate code.

00:36:52.540 --> 00:36:55.680
You can say, "This is all great,
but I really,

00:36:55.680 --> 00:37:00.310
really need to see the Java code
to see how you're doing this

00:37:00.310 --> 00:37:03.250
particular component." Well,
there's a button in the web

00:37:03.250 --> 00:37:05.960
assistant where you can say,
"I'm done with all the

00:37:05.960 --> 00:37:08.160
customization you give me.

00:37:08.270 --> 00:37:12.670
I click on it and we dump all the
HTML and all the Java for you to

00:37:12.670 --> 00:37:15.650
see and to touch and do whatever
you want with it." In fact,

00:37:15.760 --> 00:37:20.520
we try to remove all of the references of
Direct to Web in the Java code we have,

00:37:20.520 --> 00:37:23.790
so it's all unrolled so you can
edit it without being dependent

00:37:23.870 --> 00:37:25.340
on Direct to Web so much.

00:37:25.360 --> 00:37:30.350
The downside of this is that we're
not smart enough to reparse the

00:37:30.350 --> 00:37:36.100
code for you to be able to customize
your pages using the web assistant.

00:37:36.120 --> 00:37:38.200
So you've got to give up something.

00:37:38.200 --> 00:37:41.090
We give you the full access
to the HTML and the Java,

00:37:41.090 --> 00:37:48.790
but you can't use the web assistant to
change your pages on the fly anymore.

00:37:48.880 --> 00:37:51.690
We now go to our final demo.

00:37:53.850 --> 00:37:59.280
What we're going to do here is,
if you've been paying attention

00:37:59.280 --> 00:38:02.920
to the first page that comes up
when we bring up the application,

00:38:03.110 --> 00:38:06.860
the first thing that comes up after our
user logs in is a query all page where

00:38:06.860 --> 00:38:08.960
they can query on all the entities.

00:38:08.960 --> 00:38:11.720
This does not make sense in our demo.

00:38:11.720 --> 00:38:16.900
We want the first page to be the page
where they can query on a restaurant.

00:38:16.900 --> 00:38:25.670
So for this,
we go into the code for the login page.

00:38:25.740 --> 00:38:32.260
And we change this method to,
it used to be D2WFactory.defaultPage.

00:38:32.260 --> 00:38:36.800
We now rewrite it to be D2WFactory,
give us the Direct to Web class,

00:38:36.910 --> 00:38:38.700
and give me the query
page for the entity.

00:38:38.700 --> 00:38:40.750
That's what I want to be my default page.

00:38:40.760 --> 00:38:43.750
So when this method, default page,
is called, I want you to return the

00:38:43.750 --> 00:38:45.080
query page for a restaurant.

00:38:45.080 --> 00:38:48.840
And I want you to, that's the first thing
I want to see on my page.

00:38:48.880 --> 00:38:51.570
So we recompile the application.

00:38:51.640 --> 00:38:57.060
Again, a very trivial example,
but this could be any,

00:38:57.060 --> 00:39:00.290
this could be your code in
your method in your classes.

00:39:00.380 --> 00:39:10.070
We bring up the page, we log in,
and we get an exception.

00:39:10.140 --> 00:39:18.880
. Yeah, Direct to Web does not
come with spell checking.

00:39:18.880 --> 00:39:20.670
yet.

00:39:28.820 --> 00:39:30.640
The yet part was a joke, okay?

00:39:30.740 --> 00:39:35.390
I'm not announcing new features here.

00:39:36.410 --> 00:39:40.080
Some of you took it too seriously there.

00:39:40.180 --> 00:39:44.790
So now we log in and the default
page is our Query Restaurant page.

00:39:44.830 --> 00:39:46.400
We could have chosen any other page.

00:39:46.400 --> 00:39:47.550
This could be your page.

00:39:47.700 --> 00:39:48.540
This could be your code.

00:39:48.540 --> 00:39:49.970
That could be your button.

00:39:50.040 --> 00:39:53.010
And you could click on that
button and choose to go to

00:39:53.010 --> 00:39:54.800
another Direct to Web page.

00:39:54.800 --> 00:39:57.040
You have the ability to do that.

00:39:57.120 --> 00:39:58.330
You have the API.

00:39:58.520 --> 00:40:01.800
Now we're going to search
on American food again.

00:40:03.730 --> 00:40:06.950
We're going to pick
Cafe Max and Cupertino.

00:40:06.960 --> 00:40:11.830
And notice the street address here.

00:40:11.830 --> 00:40:17.460
We removed all of the other fields like
the city and the zip code and all that.

00:40:17.460 --> 00:40:20.550
We did that for a reason
for this part of the demo.

00:40:20.910 --> 00:40:30.010
We wrote a component that displays an
address all compacted into a little

00:40:30.700 --> 00:40:34.760
It's compacted enough to fit all here,
so we don't have different rows.

00:40:34.760 --> 00:40:37.700
We can just type address and
we'll see all of the address.

00:40:37.700 --> 00:40:42.530
But the important thing about that, that,

00:40:42.700 --> 00:40:44.990
What Mike is doing here is
getting back to the applet viewer,

00:40:44.990 --> 00:40:47.590
if you're wondering what all
that spew on the screen is.

00:40:47.710 --> 00:40:52.220
He's trying to get to the port of
the applet viewer so he can bring it

00:40:52.240 --> 00:40:54.790
up again for this part of the demo.

00:40:55.090 --> 00:40:57.990
So we're going to plug
in our own component.

00:40:58.070 --> 00:41:01.830
So imagine you're coding
along and then you say,

00:41:01.830 --> 00:41:05.230
wow, I wish I could write my own
component to display the address

00:41:05.330 --> 00:41:06.700
the way I want it to display.

00:41:06.700 --> 00:41:07.520
You can.

00:41:07.520 --> 00:41:13.710
We wrote a component where you can
display the address as a hyperlink,

00:41:13.730 --> 00:41:17.380
which takes you to Yahoo,
and you can see a

00:41:17.380 --> 00:41:19.870
Yahoo map of the address.

00:41:21.030 --> 00:41:23.960
This could be any other
component in your application.

00:41:23.960 --> 00:41:30.080
So we go to the web assistant and we say,
you know, the street address,

00:41:30.080 --> 00:41:32.830
I don't like the components you give us,
Miguel.

00:41:32.890 --> 00:41:34.580
They're good, but they're limited.

00:41:34.580 --> 00:41:36.060
I want to use my own.

00:41:36.060 --> 00:41:39.080
So you tell us, D2W custom component.

00:41:39.080 --> 00:41:42.580
And my own component
is called StreetMapper.

00:41:42.580 --> 00:41:48.180
And this component implements
the object and key bindings.

00:41:49.460 --> 00:41:53.920
You display at runtime and then
we have our component here.

00:41:54.110 --> 00:41:55.240
Don't click on it yet.

00:41:55.320 --> 00:42:00.300
So now we're showing the
address the way we want,

00:42:00.700 --> 00:42:05.440
implementing the functionality we want,
because what we wanted to do is

00:42:05.440 --> 00:42:14.120
for people to be able to click
on that and take us to Yahoo.

00:42:19.360 --> 00:42:23.070
So I think that's the end of our four,
actually that's the end

00:42:23.070 --> 00:42:24.000
of all of our demos.

00:42:24.000 --> 00:42:26.080
We have a little summary.

00:42:33.120 --> 00:42:36.660
So we've just finished customizing
our application at the third level,

00:42:36.660 --> 00:42:38.850
which is the full-- we didn't show you,
by the way,

00:42:38.910 --> 00:42:40.400
but it would have been just a CC.

00:42:40.400 --> 00:42:43.750
You bring up the web assistant
and then you click Generate Code,

00:42:43.790 --> 00:42:47.560
and we would have dumped all of
that Java and HTML for you to edit.

00:42:47.640 --> 00:42:58.020
But I mean, you've seen that before,
and you can do whatever you want with it.

00:42:58.020 --> 00:42:58.020
So in summary, Direct to Web.

00:42:58.810 --> 00:43:01.930
Java based technology
for rapid development.

00:43:01.930 --> 00:43:03.700
Keywords here are rapid.

00:43:03.700 --> 00:43:07.530
We want to do things fast for you
by providing a lot of functionality.

00:43:07.800 --> 00:43:09.530
Another keyword is database driven.

00:43:09.530 --> 00:43:14.690
All of your Direct to Web applications
start out from a model.

00:43:15.140 --> 00:43:17.560
And I guess another keyword
is web applications.

00:43:17.560 --> 00:43:18.900
By web I mean HTML.

00:43:18.920 --> 00:43:20.940
This is the HTML part of the WebObjects.

00:43:21.090 --> 00:43:25.500
The next talk, Java Client,
is where we bring up the

00:43:25.500 --> 00:43:30.930
nice Java applets which
Steve showed in his demo.

00:43:31.160 --> 00:43:34.890
How do you configure
things using Direct to Web?

00:43:34.960 --> 00:43:38.800
You can work, if you don't want to get
your hands dirty with code,

00:43:38.860 --> 00:43:42.940
you can use the Web Assistant to tell
us how you want things to be laid out,

00:43:42.940 --> 00:43:44.090
how you want things displayed.

00:43:44.090 --> 00:43:46.100
That's okay,
you don't need to do that much.

00:43:46.100 --> 00:43:50.100
You don't need to know much
of WebObjects to do that.

00:43:50.100 --> 00:43:54.100
But in 4.5 we've introduced
two powerful features.

00:43:54.100 --> 00:43:57.460
Very simple,
but I hope that the WebObjects developers

00:43:57.460 --> 00:44:02.090
out there realize how powerful these
two hooks are to your applications.

00:44:02.100 --> 00:44:07.260
You have access to the dynamic version of
the HTML using the 2W templates without

00:44:07.260 --> 00:44:12.100
losing the ability to customize your
applications using the Web Assistant.

00:44:12.100 --> 00:44:17.370
And you have a way of plugging in
your own custom components to display

00:44:17.570 --> 00:44:20.100
the attributes the way you want.

00:44:20.100 --> 00:44:22.100
And implement your own functionality.

00:44:22.100 --> 00:44:25.320
You might have a hyperlink or a button
in one of your custom components and

00:44:25.350 --> 00:44:29.810
do whatever else you want with the page
without losing the ability to customize

00:44:29.860 --> 00:44:32.100
other parts of the page dynamically.

00:44:32.100 --> 00:44:36.090
And ultimately you can
do code generation.

00:44:36.960 --> 00:44:39.900
Where do you go from here?

00:44:39.900 --> 00:44:43.460
The best place to start is
probably go to WOL Info Center.

00:44:43.460 --> 00:44:48.400
There's two new books for Direct to Web.

00:44:48.400 --> 00:44:51.320
We still have the tutorial in the
WebObjects Tools and Techniques

00:44:51.320 --> 00:44:52.900
part of the WebObjects manual.

00:44:52.900 --> 00:44:55.490
We also have a new book
written by Cliff Liu,

00:44:55.490 --> 00:44:58.170
one of our doc people,
a wonderful book called

00:44:58.250 --> 00:45:01.900
Developing WebObjects
Applications with Direct to Web.

00:45:03.060 --> 00:45:07.080
This book goes into a lot of detail about
the architecture of Direct to Web and

00:45:07.080 --> 00:45:10.800
the rule system and how it works and
the context and how you can overwrite

00:45:10.800 --> 00:45:12.900
it and how you can write your own task.

00:45:12.900 --> 00:45:16.770
A lot of stuff I didn't cover
here because it's just too much

00:45:16.770 --> 00:45:18.850
for a one hour presentation.

00:45:18.900 --> 00:45:22.210
There's also an updated reference
of all the frameworks and all

00:45:22.210 --> 00:45:23.900
the classes in Direct to Web.

00:45:23.900 --> 00:45:26.900
You now see that you have this API.

00:45:26.900 --> 00:45:30.730
The methods are explained in this.

00:45:31.900 --> 00:45:34.890
I would recommend beginning
WebObjects developer,

00:45:34.900 --> 00:45:37.080
actually anybody that
hasn't used Direct to Web,

00:45:37.080 --> 00:45:42.950
is to just bring up the movies model
which ships with our product and create

00:45:43.040 --> 00:45:46.900
a generic Direct to Web application
and start playing around with it.

00:45:46.900 --> 00:45:50.520
Configure your pages and
generate code and see all of

00:45:50.520 --> 00:45:52.740
the functionality we give you.