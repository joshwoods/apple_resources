WEBVTT

00:00:10.790 --> 00:00:15.040
Ladies and gentlemen,
please welcome Mac OS X Applications

00:00:15.040 --> 00:00:18.950
Technology Manager,
David Wright.

00:00:23.920 --> 00:00:24.320
Thank you.

00:00:24.390 --> 00:00:25.680
Good afternoon.

00:00:25.740 --> 00:00:29.040
Welcome to session 126, Cocoa Overview.

00:00:29.090 --> 00:00:32.230
I'm really excited to see how
many people are here because this

00:00:32.230 --> 00:00:34.400
technology in this session is amazing.

00:00:34.400 --> 00:00:38.300
In 1991, when I was in college,
I was taking a windowing

00:00:38.300 --> 00:00:40.820
programming class,
and I was working with

00:00:40.910 --> 00:00:42.700
X windows most of the time.

00:00:42.700 --> 00:00:46.180
So seeing what they were trying
to do to get inheritance to

00:00:46.180 --> 00:00:49.630
go was pretty interesting,
especially to someone who was barely

00:00:49.630 --> 00:00:51.120
grasping pointers at the time.

00:00:51.580 --> 00:00:54.750
And then we had a couple
weeks where we were playing

00:00:54.880 --> 00:00:58.280
with other windowing systems,
and there was this black cube,

00:00:58.280 --> 00:01:02.350
and we were told to do a
programming assignment on that.

00:01:02.510 --> 00:01:04.430
So just,
can I get a clap of hands of how many

00:01:04.430 --> 00:01:08.380
of you have used Cocoa or played with
Interface Builder or Project Builder?

00:01:08.380 --> 00:01:09.940
Yeah?

00:01:12.660 --> 00:01:15.640
I think half,
but my sound meter isn't always accurate.

00:01:15.640 --> 00:01:20.310
Well, I was playing with this program
called Interface Builder.

00:01:20.310 --> 00:01:22.930
You tell it what objects
you want to work with,

00:01:22.930 --> 00:01:26.680
and then you draw this line,
and it hooks up all this messaging.

00:01:26.680 --> 00:01:29.550
And I was just tripping out,
because it was amazing.

00:01:29.550 --> 00:01:31.470
I've never seen something like that.

00:01:31.760 --> 00:01:34.990
So then I went on to be a Mac programmer,
and in 1988,

00:01:34.990 --> 00:01:37.990
I was assigned to work on the
setup assistant for Mac OS X,

00:01:37.990 --> 00:01:40.310
which is completely written in Cocoa.

00:01:40.310 --> 00:01:44.300
And here I was back using this
amazing development environment.

00:01:44.300 --> 00:01:45.840
So I have no problems.

00:01:45.990 --> 00:01:48.270
I represent Carbon and Cocoa.

00:01:48.270 --> 00:01:49.470
Both are great.

00:01:49.600 --> 00:01:52.060
But Cocoa is like a true pleasure.

00:01:52.070 --> 00:01:55.560
It really is like driving
this amazing car that,

00:01:55.560 --> 00:01:59.560
you know, you just want to use
it as soon as you can.

00:01:59.560 --> 00:02:01.730
So without further delay,
I want to introduce you to the Cocoa API.

00:02:01.740 --> 00:02:05.660
I want to introduce Becky Willrich from
the Cocoa Application Development team.

00:02:05.660 --> 00:02:07.360
Please give her a warm welcome.

00:02:07.360 --> 00:02:15.090
Thanks, David.

00:02:21.860 --> 00:02:27.150
Gee, Toto, I don't think we're in
Redwood City anymore.

00:02:27.530 --> 00:02:30.420
So hi, my name's Becky Willrich,
and I'm here to talk to you about

00:02:30.530 --> 00:02:32.820
the Cocoa development environment.

00:02:33.070 --> 00:02:36.340
We're going to start out by
looking briefly at what Cocoa is.

00:02:36.380 --> 00:02:39.880
I'm going to show you a little bit about
how you develop a Cocoa application,

00:02:39.880 --> 00:02:42.130
and then we're going to spend
most of our time talking about

00:02:42.220 --> 00:02:44.900
the core concepts within Cocoa.

00:02:46.550 --> 00:02:50.580
So, by the time you leave this session,
you should be able to identify

00:02:50.580 --> 00:02:53.000
the main pieces within Cocoa.

00:02:53.000 --> 00:02:57.500
That includes listing the core classes
involved in every Cocoa application.

00:02:57.500 --> 00:03:01.240
We're also going to talk some about the
basic abstractions used inside of Cocoa.

00:03:01.300 --> 00:03:03.990
Now,
I would love to go into the details of

00:03:03.990 --> 00:03:06.900
Project Builder and Interface Builder.

00:03:06.960 --> 00:03:08.950
These are amazing development tools.

00:03:08.950 --> 00:03:13.200
In particular, if you've never seen IB,
you have just got to go to the session.

00:03:13.320 --> 00:03:15.640
PB and IB both have
sessions of their own,

00:03:15.640 --> 00:03:19.180
and I encourage you to go to those
because we're just not going to

00:03:19.180 --> 00:03:21.120
have time to cover them here.

00:03:22.010 --> 00:03:26.380
So hopefully you've all seen a
diagram that looks more or less

00:03:26.380 --> 00:03:28.030
like this from the keynotes.

00:03:28.220 --> 00:03:32.340
It's an example of the
OS X architecture stack.

00:03:32.350 --> 00:03:34.300
And it's pretty easy to
see where Cocoa fits in.

00:03:34.320 --> 00:03:38.600
We're one of those development
environments right up there at the top.

00:03:39.680 --> 00:03:41.940
So what is Cocoa?

00:03:41.980 --> 00:03:44.360
Cocoa is a set of frameworks
designed to work together

00:03:44.360 --> 00:03:45.920
for application development.

00:03:45.970 --> 00:03:46.720
So far, so good.

00:03:46.730 --> 00:03:48.460
It's fully featured.

00:03:48.500 --> 00:03:53.040
It has support for all of the basic
paradigms that you expect to see

00:03:53.040 --> 00:03:54.940
inside of an application environment.

00:03:54.940 --> 00:03:59.320
So support for things like cut and paste,
event handling, full widget set,

00:03:59.330 --> 00:04:01.860
full text system, all of that is there.

00:04:01.860 --> 00:04:05.780
There are also several powerful
abstractions we export to make it easier

00:04:05.890 --> 00:04:07.900
for you to write your application.

00:04:08.140 --> 00:04:09.850
But here's the main thing.

00:04:09.860 --> 00:04:11.860
When someone asks you, "What is Cocoa?

00:04:11.860 --> 00:04:16.020
What makes Cocoa different from the
rest of the stack?" There's the answer.

00:04:16.340 --> 00:04:18.310
Cocoa is objects.

00:04:18.660 --> 00:04:21.010
This is what differentiates
us from Carbon.

00:04:21.440 --> 00:04:24.970
This is what makes us
unique on this stack.

00:04:26.210 --> 00:04:28.400
So what do I mean by that?

00:04:28.400 --> 00:04:32.970
What I mean is that Cocoa is a set
of fully object-oriented frameworks.

00:04:33.060 --> 00:04:35.850
These frameworks have been
designed and implemented in

00:04:35.850 --> 00:04:38.120
objects from the ground up.

00:04:38.340 --> 00:04:41.320
The APIs are exported in
object-oriented languages,

00:04:41.320 --> 00:04:44.330
both Java and Objective-C,
and all the classes have been

00:04:44.330 --> 00:04:50.090
designed with the intent that you,
the developer, be able to simply extend

00:04:50.090 --> 00:04:52.750
them and use them easily.

00:04:53.500 --> 00:04:58.730
So, as I was preparing for this talk,
I was thinking, oh my gosh,

00:04:58.860 --> 00:05:00.240
what am I going to tell these people,
right?

00:05:00.260 --> 00:05:03.320
Here, you're all Mac programmers,
you've already learned

00:05:03.410 --> 00:05:05.890
one very large API,
how can I convince you that

00:05:06.210 --> 00:05:07.530
Cocoa is worth looking at?

00:05:07.700 --> 00:05:10.590
So, this is what I came up with.

00:05:10.690 --> 00:05:12.660
We're just going to see, take a poll,
we're going to do the

00:05:12.690 --> 00:05:15.540
little plazometer thing,
and see if you can guess how many

00:05:15.540 --> 00:05:17.960
lines of code are inside of TextEdit.

00:05:17.960 --> 00:05:21.680
TextEdit is a small Cocoa application
that does text editing,

00:05:21.680 --> 00:05:24.020
it's sort of the Cocoa world's
equivalent of simple text.

00:05:24.020 --> 00:05:27.980
So, just clap when you think
I've reached the right level.

00:05:27.980 --> 00:05:31.780
How many of you think it's
under 5,000 lines of code?

00:05:36.200 --> 00:05:38.920
twenty thousand?

00:05:38.960 --> 00:05:41.800
You guys already know the
answer to this don't you?

00:05:41.800 --> 00:05:43.200
Alright fine.

00:05:43.200 --> 00:05:43.200
Yes!

00:05:43.210 --> 00:05:44.910
Text edit is an example application.

00:05:44.990 --> 00:05:46.850
It's under five thousand lines of code.

00:05:46.850 --> 00:05:48.930
It comes in at thirty three hundred.

00:05:48.930 --> 00:05:51.850
By comparison,
simple text is seventeen thousand,

00:05:51.850 --> 00:05:52.860
eight hundred.

00:05:52.860 --> 00:05:54.870
Over five times as large.

00:05:54.880 --> 00:05:59.940
You can prove this to yourself by
looking on your DP4 CD where you can

00:05:59.940 --> 00:06:04.860
find the text edit code under system
examples... or system developer examples

00:06:05.330 --> 00:06:06.530
and just take a look for yourself.

00:06:06.650 --> 00:06:08.950
Well that's all very well and good.

00:06:09.000 --> 00:06:11.920
Text edit is, as I said,
an example program.

00:06:11.920 --> 00:06:13.610
What about a real program?

00:06:13.610 --> 00:06:14.780
What about mail?

00:06:14.780 --> 00:06:17.970
Mail, I hope you've seen in some of
the keynotes that Steve has done.

00:06:18.030 --> 00:06:21.330
He showed it at the
Macworld keynote in January.

00:06:21.330 --> 00:06:25.420
It is the premier
Cocoa app on the system.

00:06:25.420 --> 00:06:26.690
And it's a full mail client.

00:06:26.690 --> 00:06:28.640
Let's start from the other end.

00:06:28.640 --> 00:06:31.290
How many think it's over a million lines?

00:06:32.200 --> 00:06:35.660
Between a half million and one million.

00:06:35.780 --> 00:06:39.200
Between a hundred thousand
and a half million.

00:06:41.600 --> 00:06:44.460
This isn't going to work so well.

00:06:44.570 --> 00:06:47.610
Between 20,000 and 100,000.

00:06:50.040 --> 00:06:50.510
You're right.

00:06:50.620 --> 00:06:55.040
Mail comes in at 65,000 lines of code,
which to me is pretty impressive.

00:06:55.040 --> 00:06:57.160
I mean, here we've got a full
deployment application.

00:06:57.160 --> 00:06:59.520
If you attended some of
the keynotes yesterday,

00:06:59.540 --> 00:07:05.800
you were hearing line counts on the
orders of three-quarter million or

00:07:05.800 --> 00:07:05.800
1.2 million for a full production app.

00:07:06.620 --> 00:07:11.910
So let's drill a little further into
those 65,000 lines of code and mail.

00:07:12.000 --> 00:07:16.300
Of those 65,000 lines,
over a quarter of them are just comments.

00:07:16.300 --> 00:07:20.800
So we come out at under 50,000
lines of actual production code.

00:07:20.930 --> 00:07:24.430
Of those, you can further break it down
into a third of them going

00:07:24.430 --> 00:07:26.400
into the application itself.

00:07:26.510 --> 00:07:29.380
The other two-thirds is going
into a framework which is shared

00:07:29.380 --> 00:07:30.900
across several applications.

00:07:30.980 --> 00:07:33.660
So not only is Mail a
very small application,

00:07:33.660 --> 00:07:36.630
but we're actually
reusing most of the code.

00:07:37.800 --> 00:07:41.040
So, to answer the question, why Cocoa?

00:07:41.040 --> 00:07:42.960
The answer is that objects are powerful.

00:07:42.960 --> 00:07:44.810
And this is going to
read pretty much like,

00:07:44.990 --> 00:07:47.720
you know, the textbook speech on
object-oriented programming.

00:07:47.720 --> 00:07:51.560
Objects are easy to configure,
they're easy to extend via subclassing

00:07:51.680 --> 00:07:53.520
and other simple abstractions.

00:07:53.520 --> 00:07:59.910
You can export many powerful abstractions
and notions using an object architecture,

00:08:00.020 --> 00:08:02.270
and it is ideal for code reuse.

00:08:02.270 --> 00:08:05.470
The end result is that you,
the developer,

00:08:05.470 --> 00:08:06.590
can do more with less code.

00:08:08.000 --> 00:08:10.730
So when we were going
over those line counts,

00:08:10.730 --> 00:08:13.760
I was talking to a coworker of mine,
Mike Ferris.

00:08:13.930 --> 00:08:16.520
And he said, you know,
3,300 lines is actually quite a bit.

00:08:16.610 --> 00:08:18.590
We've got a lot of support
for loading different file

00:08:18.590 --> 00:08:20.060
extensions and that kind of thing.

00:08:20.060 --> 00:08:24.250
And we could actually do
text edit in quite a few--

00:08:24.450 --> 00:08:31.950
"I think I can give you
text edit in 50 lines."

00:08:32.150 --> 00:08:35.250
I said, "Yeah, right." He said, "No,
really." And we're going to take

00:08:35.300 --> 00:08:37.100
him up on that challenge here today.

00:08:37.100 --> 00:08:39.060
So with that,
I'm going to introduce Mike Ferris

00:08:39.090 --> 00:08:41.500
and turn the stage over to him.

00:08:42.100 --> 00:08:43.740
Is my mic live here?

00:08:43.740 --> 00:08:45.180
Can you all hear me?

00:08:45.240 --> 00:08:46.900
Okay.

00:08:48.390 --> 00:08:51.380
All right,
so we're going to just start by creating

00:08:51.380 --> 00:08:54.060
a brand new project in Project Builder.

00:08:54.090 --> 00:08:56.260
See, we're up on the screen here.

00:08:56.300 --> 00:09:01.300
And today I'm going to create a
document-based application using Java.

00:09:01.360 --> 00:09:04.080
So we'll choose the Java document-based
application template.

00:09:04.080 --> 00:09:10.370
And let's just call this TextEdit Lite.

00:09:13.500 --> 00:09:14.130
OK.

00:09:14.690 --> 00:09:19.210
So what we start out with here is,
as you can see, a couple of source files

00:09:19.210 --> 00:09:20.790
and a few resources.

00:09:20.840 --> 00:09:26.520
We have two user interface files,
which are interface builder nib files.

00:09:26.530 --> 00:09:29.900
And just to prove that we're not starting
with a whole bunch of canned code,

00:09:29.900 --> 00:09:32.320
I'll show you all the code
that we start with here.

00:09:32.320 --> 00:09:35.580
This is the little piece of C code that
gets us bootstrapped so that we can

00:09:35.580 --> 00:09:38.280
double-click this Java application.

00:09:38.280 --> 00:09:43.400
And then this is the document subclass,
the subclass of the NSDocument object

00:09:43.550 --> 00:09:46.220
that we start out with by default.

00:09:46.270 --> 00:09:50.770
So that's going to represent our
document in the running application?

00:09:50.830 --> 00:09:51.310
Exactly.

00:09:51.320 --> 00:09:54.200
We'll have one instance of this
object for each open document.

00:09:54.200 --> 00:09:54.640
OK.

00:09:55.000 --> 00:09:58.250
And you can see that we've started
out with just some boilerplate code.

00:09:58.260 --> 00:10:01.760
There's a few methods where we're
expected to fill some stuff in here.

00:10:01.780 --> 00:10:03.770
That's not going to leave
you with very many lines.

00:10:03.840 --> 00:10:04.320
No.

00:10:04.320 --> 00:10:06.900
We've started out with, what,
30 or so already.

00:10:06.930 --> 00:10:09.100
So I'm already behind.

00:10:09.200 --> 00:10:12.960
So first, though, let's do the interface.

00:10:13.060 --> 00:10:16.480
And we're going to build the
interface in Interface Builder.

00:10:16.730 --> 00:10:18.760
We've started out with a
nib file that's going to be

00:10:18.760 --> 00:10:20.150
instantiated once per document.

00:10:20.170 --> 00:10:21.570
It's called mydocument.nib.

00:10:21.580 --> 00:10:24.600
So we'll just open that up real
quick in Interface Builder.

00:10:24.600 --> 00:10:27.200
So this is going to be the
window that's going to display

00:10:27.220 --> 00:10:28.450
the document to the user?

00:10:28.490 --> 00:10:29.200
Exactly.

00:10:29.200 --> 00:10:30.060
OK.

00:10:30.130 --> 00:10:32.800
Now we'll get rid of the
little placeholder text here.

00:10:32.810 --> 00:10:39.060
And instead, we're going to add a text
object off of the palette.

00:10:39.510 --> 00:10:43.600
And let's bring the inspector up here
and configure this just a little bit.

00:10:43.720 --> 00:10:48.400
We'll take the border away, turn on undo,
should always be able to undo.

00:10:48.400 --> 00:10:51.880
And let's make it so that
when the window changes size,

00:10:51.880 --> 00:10:54.620
this text view will change size as well.

00:10:54.620 --> 00:10:56.900
And then let's make it
fill the window too.

00:10:57.320 --> 00:11:00.190
Okay, so starting to look a little
bit like a text editor here.

00:11:00.310 --> 00:11:03.350
Now,
the other thing that we're going to need

00:11:03.370 --> 00:11:06.210
is access to our text view from our code.

00:11:06.210 --> 00:11:10.280
So let's go to the classes
tab in Interface Builder here.

00:11:10.280 --> 00:11:12.870
And in our document class,
we've already got a

00:11:12.880 --> 00:11:15.850
pointer to the window,
but let's add another one.

00:11:15.910 --> 00:11:20.260
So let's add this instance variable
that we'll just call myTextView.

00:11:21.960 --> 00:11:27.100
And we'll go back to the Instances tab,
and let's actually make that connection.

00:11:27.100 --> 00:11:30.520
So we've told Interface Builder
that we have this instance

00:11:30.560 --> 00:11:33.660
variable called myTextView,
and that we've also told it

00:11:33.660 --> 00:11:35.540
that this is the TextView.

00:11:35.540 --> 00:11:38.420
So that's how the document's going
to be able to reach its interface?

00:11:38.720 --> 00:11:39.060
Exactly.

00:11:39.140 --> 00:11:41.660
What'll happen is when the
document loads its interface,

00:11:41.660 --> 00:11:46.000
part of the loading of this
interface file is going to cause the

00:11:46.000 --> 00:11:50.210
instance variable myTextView to be
automatically initialized to point to

00:11:50.210 --> 00:11:51.950
the TextView that came out of the nib.

00:11:52.010 --> 00:11:55.880
So when you say load the interface file,
I mean, are you generating code here?

00:11:55.880 --> 00:11:59.240
No, actually,
Interface Builder files are not code.

00:11:59.240 --> 00:12:01.020
We're not a code generator.

00:12:01.020 --> 00:12:03.930
In fact, what you're manipulating
here is all live objects,

00:12:03.930 --> 00:12:06.600
and then what happens when you
save this is it's just going

00:12:06.600 --> 00:12:08.390
to serialize all those objects.

00:12:08.700 --> 00:12:10.620
Just like Java serialization,
that kind of thing?

00:12:10.630 --> 00:12:11.220
Basically.

00:12:11.230 --> 00:12:11.560
Okay.

00:12:11.560 --> 00:12:13.920
So, all right,
we're done with the interface.

00:12:13.920 --> 00:12:15.030
We've made our connection.

00:12:15.030 --> 00:12:16.140
We've set up our TextView.

00:12:16.140 --> 00:12:19.950
Now, I'm not going to sit here
and let you watch me type.

00:12:20.040 --> 00:12:24.580
So instead, I've got kind of a pre-done
version of this class,

00:12:24.580 --> 00:12:28.900
and we'll just get rid of the
one that we came with here.

00:12:29.420 --> 00:12:33.410
And instead,
let's go and add in the one that I've

00:12:33.410 --> 00:12:35.400
already got in my Documents folder here.

00:12:35.400 --> 00:12:37.430
Now,
you better walk us through this so that,

00:12:37.440 --> 00:12:40.200
you know, we know you're not loading
libraries on the side or anything.

00:12:40.200 --> 00:12:41.160
You think I'm going to be sneaky?

00:12:41.160 --> 00:12:45.220
All right, well, let's put this in here,
and then I'll show you.

00:12:45.220 --> 00:12:48.830
Now, in fact, this is almost identical to
the code that we started with.

00:12:48.920 --> 00:12:51.940
And what I've added, I've added a couple
of instance variables.

00:12:51.940 --> 00:12:53.970
First,
we see the MyTextView instance variable,

00:12:54.060 --> 00:12:56.180
which is what we hooked
up in Interface Builder.

00:12:56.680 --> 00:13:00.720
And then we also have the
TextStorage instance variable.

00:13:00.720 --> 00:13:04.310
The TextStorage class provides
the backing store for our text.

00:13:06.720 --> 00:13:07.280
All right.

00:13:07.460 --> 00:13:10.800
Now, mostly this is all the same,
except when we get down

00:13:10.800 --> 00:13:12.170
to about this point.

00:13:12.180 --> 00:13:13.100
Let's start from the bottom.

00:13:13.100 --> 00:13:15.840
And we're just going to,
I'm not going to walk you

00:13:15.840 --> 00:13:18.190
through this line by line,
but briefly,

00:13:18.230 --> 00:13:22.370
these two methods are concerned
with saving and loading the file.

00:13:22.380 --> 00:13:25.000
I think I saw those in the template.

00:13:25.000 --> 00:13:28.610
Yeah, these two were there and empty in
the template that we started with.

00:13:28.620 --> 00:13:29.640
I've just filled them in.

00:13:29.860 --> 00:13:30.040
Okay.

00:13:30.700 --> 00:13:32.670
And notice that we're
not running save panels,

00:13:32.670 --> 00:13:35.170
we're not writing files,
we're not doing any of this.

00:13:35.220 --> 00:13:38.160
All that you really have to do
in a document app is be able to

00:13:38.160 --> 00:13:41.480
provide the data that will go on
the disk and take the data that was

00:13:41.560 --> 00:13:43.580
on the disk and initialize from it.

00:13:43.660 --> 00:13:47.380
So, we're just working at the level of a
bunch of bytes that came off the disk.

00:13:47.380 --> 00:13:49.370
We don't know how they came off the disk.

00:13:49.370 --> 00:13:50.560
They're just here.

00:13:51.970 --> 00:13:54.220
Now, the next method that we
started with in the template,

00:13:54.300 --> 00:13:57.980
just empty, and which I've filled in,
is this one.

00:13:58.050 --> 00:14:02.760
This method gets called whenever
the document loads its interface.

00:14:02.850 --> 00:14:06.540
So we're going to take that opportunity
to make sure that the text view

00:14:06.540 --> 00:14:10.640
is displaying the text that we
loaded from the disk or whatever.

00:14:10.640 --> 00:14:14.140
So we'll just take that
opportunity to sync everything up.

00:14:14.300 --> 00:14:17.690
And we do that with a new
method that I've added.

00:14:17.890 --> 00:14:21.300
So this is the one brand new
method I've added to this class.

00:14:21.300 --> 00:14:24.360
And all it does is it makes sure
that the text view is showing the

00:14:24.360 --> 00:14:26.270
contents of that text storage object.

00:14:26.310 --> 00:14:28.950
So you're just kind of updating
the backing store in the front end

00:14:29.000 --> 00:14:30.140
and keeping everything in sync.

00:14:30.210 --> 00:14:30.230
Exactly.

00:14:30.250 --> 00:14:33.640
Now, that's all the code.

00:14:33.780 --> 00:14:35.740
And we're almost ready to run this thing.

00:14:35.740 --> 00:14:39.060
But first we need to make sure that
the application knows what kind of

00:14:39.160 --> 00:14:40.430
files that it's going to deal with.

00:14:40.500 --> 00:14:43.160
We haven't told it that
it's an RTF editor yet.

00:14:43.280 --> 00:14:46.060
So we're going to go
into the target editor.

00:14:46.060 --> 00:14:48.200
And in Project Builder,
this is where you edit

00:14:48.350 --> 00:14:49.870
your info P list stuff.

00:14:49.970 --> 00:14:53.110
And if you've read some of
that system overview book,

00:14:53.110 --> 00:14:57.110
you'll know that the info P list is
where your application is going to

00:14:57.110 --> 00:15:00.800
advertise what file types it understands.

00:15:00.840 --> 00:15:04.210
Now, Finder uses this information
to know what app to launch when

00:15:04.240 --> 00:15:06.000
you double-click something.

00:15:06.050 --> 00:15:10.080
In addition,
the Cocoa document system uses it.

00:15:10.360 --> 00:15:14.450
as well to know what kind of
documents this app understands.

00:15:14.530 --> 00:15:17.100
So this is just sort of
publishing what kind of types

00:15:17.200 --> 00:15:18.550
of document you want to handle.

00:15:18.560 --> 00:15:19.550
Right.

00:15:19.580 --> 00:15:22.140
And so we give it an abstract type name,
which would just be

00:15:22.140 --> 00:15:23.680
something basically unique.

00:15:23.750 --> 00:15:28.200
We can also tell it what file
extensions this type is associated

00:15:28.200 --> 00:15:31.420
with and also what Mac OS types.

00:15:31.500 --> 00:15:34.780
Okay, so we're kind of hooking up the
extension with the type creator,

00:15:34.780 --> 00:15:36.340
with mime type, all of that.

00:15:36.420 --> 00:15:36.730
Right.

00:15:36.980 --> 00:15:37.520
Rolled together.

00:15:37.770 --> 00:15:38.260
Okay.

00:15:38.420 --> 00:15:43.040
So and then the last thing in here is
that in Cocoa Apps you have a key that

00:15:43.040 --> 00:15:47.980
tells you what class in your application
is to be used to display these documents.

00:15:48.060 --> 00:15:52.100
And in our case it's this my document
class that we are going to use.

00:15:52.190 --> 00:15:54.690
So that's it.

00:15:54.790 --> 00:15:57.530
And now I'm going to go ahead
and build and run this thing.

00:15:57.540 --> 00:15:58.800
So you're telling me you're done?

00:15:59.000 --> 00:15:59.700
I am done.

00:16:00.090 --> 00:16:04.530
I didn't see any code in there to control
the menus or -- The menus -- oh look,

00:16:04.530 --> 00:16:05.940
I didn't save the interface folder file.

00:16:05.940 --> 00:16:06.680
Okay.

00:16:06.780 --> 00:16:09.460
So the menus are already -- The menu is
already all hooked up in the template,

00:16:09.460 --> 00:16:12.540
and you get basically a standard
menu bar when you create this thing.

00:16:12.540 --> 00:16:16.070
And that includes all sorts of
menu items for dealing with cut,

00:16:16.140 --> 00:16:19.760
copy, paste,
and all the rest of that kind of stuff.

00:16:19.840 --> 00:16:21.570
Well, we'll just see, won't we?

00:16:21.620 --> 00:16:22.030
Okay.

00:16:22.250 --> 00:16:25.200
Why don't you take project
builder off the back of that?

00:16:25.260 --> 00:16:27.860
Oh yes, let's minimize that.

00:16:29.800 --> 00:16:33.090
Okay, so here's our program.

00:16:33.190 --> 00:16:35.590
Okay,
now when we were preparing for this,

00:16:35.590 --> 00:16:39.510
I created a list of some simple
text features that I would really

00:16:39.510 --> 00:16:40.760
like to see in this text editor.

00:16:40.820 --> 00:16:43.050
So if we could have the
slides back on one of these.

00:16:43.050 --> 00:16:47.010
Over there.

00:16:47.010 --> 00:16:47.010
Ah, thank you.

00:16:48.110 --> 00:16:49.340
Let's start out real simple.

00:16:49.340 --> 00:16:51.840
Just prove to me that you
can enter rich text up there.

00:16:52.110 --> 00:16:54.410
Okay,
well let's go to the font panel for that.

00:16:54.450 --> 00:16:58.190
Cocoa has a built-in font panel
that all apps can make use of,

00:16:58.190 --> 00:16:59.900
and of course it's integrated
with the text system.

00:16:59.900 --> 00:17:04.230
So we can do things like change
the font size and change the font.

00:17:04.260 --> 00:17:06.440
And can you embed a feature?

00:17:06.440 --> 00:17:07.160
Yeah, there we go.

00:17:07.160 --> 00:17:09.450
Yeah, maybe we can set that to be italic.

00:17:09.450 --> 00:17:10.610
Okay.

00:17:10.660 --> 00:17:13.850
What about pasteboard,
clipboard kind of stuff?

00:17:14.060 --> 00:17:15.350
Can you copy and paste?

00:17:15.690 --> 00:17:17.220
Sure, of course.

00:17:17.240 --> 00:17:19.900
So let's copy that and
maybe we can paste it.

00:17:19.900 --> 00:17:22.820
Maybe we can paste it a few more times.

00:17:22.960 --> 00:17:25.700
Okay, how about ruler support?

00:17:25.820 --> 00:17:29.290
Well, Cocoa also has a built-in ruler,
which also is integrated

00:17:29.290 --> 00:17:30.700
with the text system.

00:17:30.710 --> 00:17:34.200
So we can just tell it,
"Show me the ruler." And here it is.

00:17:34.200 --> 00:17:37.020
You can see that we have tab
stops and margin settings.

00:17:37.020 --> 00:17:38.440
We can set the alignment.

00:17:38.500 --> 00:17:42.810
We can do all the things you'd
expect to do from a ruler.

00:17:43.050 --> 00:17:45.350
All right, how about colored text?

00:17:45.490 --> 00:17:47.900
I didn't see you hook up
any color panel or anything.

00:17:48.050 --> 00:17:51.600
The Cocoa color panel also is
integrated with the text system,

00:17:51.600 --> 00:17:56.780
so we can just drag colors off
and set the color of the text.

00:17:56.910 --> 00:17:58.900
We can use the apply button, too.

00:17:58.900 --> 00:17:59.900
Okay.

00:17:59.900 --> 00:18:03.000
Most of the code you wrote had to do
with saving and opening documents,

00:18:03.000 --> 00:18:04.800
so let's just make sure that all works.

00:18:04.920 --> 00:18:05.900
Okay.

00:18:05.900 --> 00:18:08.900
So we can save.

00:18:08.990 --> 00:18:11.900
You'll notice that we
have a sheet already.

00:18:11.900 --> 00:18:12.900
The document system runs saved.

00:18:12.900 --> 00:18:14.930
It can save panels of
sheets like it should,

00:18:14.930 --> 00:18:16.900
so you get that all just automatically.

00:18:16.900 --> 00:18:19.900
We can just type in a file
name and tell it to save.

00:18:19.910 --> 00:18:20.900
Okay.

00:18:20.900 --> 00:18:23.420
And you'll notice that the
title bar updated to show that

00:18:23.420 --> 00:18:24.880
we've now got a named document.

00:18:24.910 --> 00:18:25.160
Okay.

00:18:25.300 --> 00:18:27.900
Why don't you close and reopen that
just to make sure we can reload files.

00:18:27.900 --> 00:18:28.900
Okay.

00:18:31.100 --> 00:18:31.700
There it is.

00:18:31.700 --> 00:18:33.720
There it is, and we just open it back up.

00:18:33.740 --> 00:18:35.600
OK.

00:18:35.600 --> 00:18:36.760
Undo.

00:18:36.760 --> 00:18:38.380
Probably need code for undo.

00:18:38.410 --> 00:18:40.380
Well, we actually,
if you were paying attention,

00:18:40.380 --> 00:18:43.660
I turned on the undo in the
interface builder file there.

00:18:43.670 --> 00:18:46.840
And the text system supports undo.

00:18:47.300 --> 00:18:51.690
In itself, but also when the text system
lives inside of a document,

00:18:51.690 --> 00:18:55.870
it'll automatically hook itself
up to the document's undo,

00:18:55.870 --> 00:18:59.720
and we'll get per document undo
in our text system automatically.

00:18:59.760 --> 00:19:02.700
So I'm just making a couple changes
here so we'll have something to undo.

00:19:02.700 --> 00:19:05.260
And you can see that I can do undo.

00:19:05.260 --> 00:19:07.860
I can do multiple
levels of undo and redo.

00:19:07.860 --> 00:19:08.970
Hmm.

00:19:13.260 --> 00:19:14.000
Let's try again.

00:19:14.010 --> 00:19:15.000
There we go.

00:19:15.020 --> 00:19:16.400
All right, that one's not really fair.

00:19:16.400 --> 00:19:18.670
I mean,
ligatures and kerning you'd only really

00:19:18.670 --> 00:19:20.920
expect on a real publishing package.

00:19:21.030 --> 00:19:23.370
Well, if you look closely,
we actually have ligatures already.

00:19:23.400 --> 00:19:27.130
The text system will use
ligatures when it's appropriate,

00:19:27.130 --> 00:19:28.040
just automatically.

00:19:28.100 --> 00:19:32.970
You can also tell it that you'd like it
not to use even the default ligatures,

00:19:32.970 --> 00:19:37.160
for example,
and so we can split that fi apart.

00:19:37.260 --> 00:19:41.290
We also have support for track kerning.

00:19:41.500 --> 00:19:46.710
So you can go ahead and just
tighten that line up a little bit.

00:19:48.810 --> 00:19:50.720
It's getting harder.

00:19:50.800 --> 00:19:51.730
Spell checking.

00:19:51.790 --> 00:19:55.030
Spell checking.

00:19:55.130 --> 00:20:00.700
Well, turns out Cocoa also has an
integrated spell checker,

00:20:00.700 --> 00:20:00.700
but to show that, we're going to have to
actually have a misspelling.

00:20:02.800 --> 00:20:05.300
OK.

00:20:05.300 --> 00:20:05.790
Whoops.

00:20:05.790 --> 00:20:07.900
And so we can just bring
up the spell panel.

00:20:07.940 --> 00:20:09.800
Just bring up the spell panel.

00:20:09.830 --> 00:20:11.140
Exactly.

00:20:11.140 --> 00:20:13.520
Now this spell panel,
like a lot of this other stuff,

00:20:13.570 --> 00:20:18.680
is pre-integrated with the text system,
but it's also available for you to use

00:20:18.680 --> 00:20:21.210
in your own ways in your Cocoa app.

00:20:21.210 --> 00:20:24.160
So we can just go ahead
and tell it to find,

00:20:24.160 --> 00:20:27.510
and it found our word,
and it even knows how it's

00:20:27.620 --> 00:20:29.030
supposed to be spelled,
so we can just correct that and move on.

00:20:29.030 --> 00:20:29.030
OK.

00:20:31.340 --> 00:20:40.920
The Cocoa Text System is based on
Unicode and is also integrated with the

00:20:40.920 --> 00:20:43.700
TSM input management stuff in Mac OS X.

00:20:43.700 --> 00:20:47.740
All I really need to do is go
up here and change to Japanese.

00:20:47.740 --> 00:20:52.000
Now I have to apologize if this turns
out to be a swear word or something.

00:20:52.000 --> 00:20:53.200
I don't actually know Japanese.

00:20:53.200 --> 00:20:55.460
It looks like the font
panel automatically picked a

00:20:55.460 --> 00:20:56.900
Japanese font for you there.

00:20:56.900 --> 00:20:57.430
Right.

00:20:57.430 --> 00:21:01.500
The text system knows what characters
can be displayed in what fonts.

00:21:01.500 --> 00:21:05.200
If you are typing in Helvetica, say,
and start typing some Japanese characters

00:21:05.200 --> 00:21:08.200
that can't be displayed in Helvetica,
it's going to go out and look for

00:21:08.200 --> 00:21:12.960
another font which is similar to
Helvetica and use that instead.

00:21:17.500 --> 00:21:19.360
A recent documents menu.

00:21:19.550 --> 00:21:21.000
That can't be standard in the template.

00:21:21.000 --> 00:21:21.700
All right.

00:21:21.700 --> 00:21:23.770
Well, in order to show that,
let me actually do a

00:21:23.770 --> 00:21:24.700
save as for this guy.

00:21:24.800 --> 00:21:26.960
So we'll have played with a couple
of different documents here.

00:21:26.960 --> 00:21:29.440
So we'll just save this guy as test two.

00:21:29.440 --> 00:21:33.010
And now you get an open recent
menu just automatically,

00:21:33.020 --> 00:21:37.110
and it's hooked up so that any
time a document is opened or saved,

00:21:37.110 --> 00:21:42.000
that document will end up in the open
recents menu for your application.

00:21:42.040 --> 00:21:45.190
So I can go over to the original
one that we saved earlier and

00:21:45.190 --> 00:21:46.820
just open that up that way.

00:21:47.210 --> 00:21:48.730
Wow.

00:21:49.730 --> 00:21:51.600
You got me.

00:21:51.840 --> 00:21:55.430
However, there is one important piece
of every application left that

00:21:55.430 --> 00:21:57.200
I'm sure you haven't hooked up.

00:21:57.340 --> 00:21:58.560
What's that?

00:21:58.640 --> 00:21:59.940
Do you have an about box?

00:22:00.190 --> 00:22:00.940
Sure.

00:22:01.090 --> 00:22:04.630
The template comes with
a standard about box,

00:22:04.630 --> 00:22:06.330
which of course you can
replace if you like,

00:22:06.330 --> 00:22:10.260
but we have an about box.

00:22:21.210 --> 00:22:21.600
That's it.

00:22:21.960 --> 00:22:24.050
Actually,
it was 51 if you count the blank lines,

00:22:24.050 --> 00:22:24.590
I think.

00:22:24.850 --> 00:22:25.220
Okay.

00:22:25.350 --> 00:22:26.220
All right.

00:22:26.360 --> 00:22:27.970
Thank you very much.

00:22:27.980 --> 00:22:28.660
No problem.

00:22:35.200 --> 00:22:38.150
If you are not now convinced
that Cocoa can do a lot for you,

00:22:38.180 --> 00:22:38.830
I give up.

00:22:38.830 --> 00:22:40.580
I don't know what else to say.

00:22:40.600 --> 00:22:44.400
I do have a couple points
I want to make about that demo.

00:22:44.400 --> 00:22:46.810
Obviously,
we are leveraging a couple different

00:22:46.830 --> 00:22:48.870
subsystems within Cocoa pretty hard.

00:22:49.010 --> 00:22:53.670
Those subsystems are the document
architecture and the text subsystem.

00:22:53.680 --> 00:22:57.240
Both of those are subsystems
of several different classes

00:22:57.240 --> 00:23:00.560
designed to work with each other,
all of them designed for

00:23:00.560 --> 00:23:02.280
subclassability and ease of use.

00:23:02.950 --> 00:23:06.250
If you are interested in them,
I highly recommend that you come to the

00:23:06.470 --> 00:23:09.580
in-depth talk on Thursday afternoon,
because Mike is going to be back

00:23:09.580 --> 00:23:12.420
talking about the document architecture,
and my manager, Ali,

00:23:12.420 --> 00:23:14.500
is going to be speaking
on the text subsystem.

00:23:14.500 --> 00:23:18.420
The other thing I want to point out
is that this is not a 4GL kind of

00:23:18.420 --> 00:23:22.720
thing where you get to take it out
of the box and use it exactly as is,

00:23:22.720 --> 00:23:25.240
or you can't use it for your purposes.

00:23:25.240 --> 00:23:28.840
To give an example of that,
the text subsystem is used by a couple

00:23:28.840 --> 00:23:32.880
different applications in DP4 and OSX.

00:23:32.880 --> 00:23:37.080
One is Mail, which uses it pretty much
without modification.

00:23:37.120 --> 00:23:39.940
Mail just wants to be able to
edit rich text for your mail.

00:23:39.940 --> 00:23:46.020
Another one is an HTML editor
that's used by the WebObjects folks.

00:23:46.020 --> 00:23:49.580
There, what they've done is they've
heavily subclassed and

00:23:49.610 --> 00:23:53.550
extended the text subsystem,
which is designed to work, as you saw,

00:23:53.550 --> 00:23:55.670
with RTF,
but they have been able to extend

00:23:55.790 --> 00:23:57.760
it to create a full HTML editor.

00:23:59.790 --> 00:24:02.660
All right, moving on,
we're going to start talking about

00:24:02.660 --> 00:24:05.210
the pieces inside of Cocoa now.

00:24:05.840 --> 00:24:08.740
There are basically two
components inside of Cocoa:

00:24:08.860 --> 00:24:10.080
Foundation and AppKit.

00:24:10.220 --> 00:24:12.740
And you can see how they lay here.

00:24:12.920 --> 00:24:14.480
Foundation is the lower level.

00:24:14.600 --> 00:24:18.800
It provides all the basic object
infrastructure that you would expect.

00:24:19.000 --> 00:24:21.800
It does not use graphics at all.

00:24:21.800 --> 00:24:26.200
And then the AppKit sits above
Foundation and also above Quartz,

00:24:26.200 --> 00:24:30.630
OpenGL, QuickTime,
the entire application services stack.

00:24:31.910 --> 00:24:37.200
So I'm going to spend a moment now
talking about Foundation in detail.

00:24:37.210 --> 00:24:39.990
As I said,
Foundation establishes the basic object

00:24:40.180 --> 00:24:43.140
paradigms within the Cocoa application.

00:24:43.190 --> 00:24:48.040
That includes all the basic classes for
storing and manipulating data as objects.

00:24:48.100 --> 00:24:51.540
It lives below the graphics layer,
and you can't actually

00:24:51.540 --> 00:24:54.840
use Foundation without the
kit to produce something,

00:24:54.840 --> 00:24:58.050
a faceless application,
something that needs to run

00:24:58.090 --> 00:24:59.670
in the background and never
presents a window to the user.

00:25:00.680 --> 00:25:03.220
So if you look at the
classes inside of Foundation,

00:25:03.220 --> 00:25:05.980
they basically fall into
these three categories.

00:25:06.090 --> 00:25:09.600
You have basic classes for storing data
and for holding the data together in

00:25:09.600 --> 00:25:11.940
collections like arrays and dictionaries.

00:25:12.160 --> 00:25:15.940
Then you have a set of classes that are
designed to act as object abstractions

00:25:15.940 --> 00:25:18.860
on top of the operating system,
so you don't have to drop down

00:25:18.860 --> 00:25:24.440
to the POSIX layer or to lower
layers in the operating system.

00:25:24.570 --> 00:25:29.010
And then finally, we have support for
internationalization and localization.

00:25:31.920 --> 00:25:33.850
So let's just start with
the storage classes.

00:25:33.960 --> 00:25:38.690
Very briefly, the leafs are NSValue,
which stores a numeric value, NSString,

00:25:38.690 --> 00:25:42.320
which stores a string, and NSData,
which can be used to store

00:25:42.320 --> 00:25:44.080
an arbitrary bag of bytes.

00:25:44.310 --> 00:25:47.010
Those can be combined
together into collections,

00:25:47.010 --> 00:25:49.900
like NSArray,
which is simply an array of objects,

00:25:49.900 --> 00:25:54.100
or NSDictionary, which stores the objects
in key-value pairs.

00:25:54.180 --> 00:25:59.540
All these classes can be combined
together in what we call a property list.

00:26:01.100 --> 00:26:03.870
And what's nice about property lists
is having combined together this

00:26:03.870 --> 00:26:07.830
fairly complex tree of objects,
you can then write it out as a plain text

00:26:07.960 --> 00:26:11.600
format and read it back in very simply.

00:26:11.600 --> 00:26:16.550
There is also an XML format in addition
to the traditional ASCII format that's

00:26:16.550 --> 00:26:18.440
available through Core Foundation.

00:26:18.440 --> 00:26:22.030
And what we've found historically is
that property lists are ideal as a small,

00:26:22.030 --> 00:26:25.860
flexible data store for
data throughout the system.

00:26:25.860 --> 00:26:27.750
Mike alluded to the Info.plist.

00:26:27.870 --> 00:26:32.160
That's a property list and is used to
configure your application and expose it,

00:26:32.160 --> 00:26:35.790
explain how it should be
represented to Finder and to the

00:26:35.790 --> 00:26:37.700
other applications on the system.

00:26:37.700 --> 00:26:42.200
We also use the property list to
store all of our user preferences.

00:26:42.370 --> 00:26:46.220
There are a number of small,
Unix-ish configuration files that

00:26:46.220 --> 00:26:48.100
are expressed as XML property lists.

00:26:48.130 --> 00:26:52.680
And we even use it as a communication
medium on the pasteboard.

00:26:53.140 --> 00:26:55.540
Property lists are really cool,
and I'd love to tell

00:26:55.620 --> 00:26:58.790
you more about it still,
but I'm not going to have time,

00:26:58.800 --> 00:27:01.950
and so I'm just going to point you to
the core foundation session where we talk

00:27:02.060 --> 00:27:04.610
about property lists in greater detail.

00:27:05.320 --> 00:27:08.800
Okay,
the next category is OS installation.

00:27:08.800 --> 00:27:11.690
There are a number of classes there
for handling things like file access.

00:27:11.710 --> 00:27:12.890
I have a list up there.

00:27:13.100 --> 00:27:15.390
Process management,
so you can keep track of the

00:27:15.570 --> 00:27:17.700
different threads in your application.

00:27:17.700 --> 00:27:21.440
You can fork off additional tasks,
and you can get the information

00:27:21.520 --> 00:27:24.940
that the operating system has
collected about your process.

00:27:25.160 --> 00:27:29.820
We also have mechanisms in
there for cross-thread and

00:27:30.010 --> 00:27:32.330
cross-process communication,
and I've just listed two.

00:27:33.330 --> 00:27:35.200
Internationalization.

00:27:35.200 --> 00:27:38.580
We consider internationalization
and localization extremely

00:27:38.660 --> 00:27:41.020
important in Cocoa,
and for that reason we've

00:27:41.180 --> 00:27:44.400
included it in the basic classes
inside of our lowest layer,

00:27:44.400 --> 00:27:45.540
which is Foundation.

00:27:45.540 --> 00:27:48.320
NSString,
which is what we use to represent

00:27:48.390 --> 00:27:52.390
all strings in the system,
stores its characters as unicars.

00:27:52.460 --> 00:27:56.240
It has support for converting
to and from all the different

00:27:56.240 --> 00:28:00.170
encodings that you would expect,
and we use it everywhere in our

00:28:00.170 --> 00:28:02.700
APIs in place of char stars.

00:28:03.730 --> 00:28:08.270
On the localization side,
we use NSBundle and NSUserDefaults.

00:28:08.380 --> 00:28:12.290
Perhaps you've heard about the
new application packaging model.

00:28:12.460 --> 00:28:15.670
NSBundle is what allows you to
go in and take the pieces apart.

00:28:15.710 --> 00:28:20.810
You can specify all of your
resource files by localization,

00:28:20.810 --> 00:28:24.170
by language as well,
and then NSBundle allows you to

00:28:24.170 --> 00:28:27.660
retrieve the proper one at runtime
based on the user's preferences.

00:28:27.760 --> 00:28:31.680
The user's preferences is
where NSUserDefaults come in.

00:28:31.700 --> 00:28:33.700
NSUserDefaults defines,
among other things,

00:28:33.700 --> 00:28:37.700
several different localization
defaults which are stored per user.

00:28:37.700 --> 00:28:41.780
So NSBundle will, for you,
look up the correct localization

00:28:41.780 --> 00:28:45.700
for the current user and load
the correct image for you.

00:28:47.170 --> 00:28:50.540
That's all the time I have
to spend on foundation.

00:28:50.540 --> 00:28:52.730
And I want to move on now to
start talking about the kit,

00:28:52.850 --> 00:28:56.320
because this is really where you're
going to see the heart of the

00:28:56.320 --> 00:28:58.740
infrastructure for your application.

00:28:59.730 --> 00:29:04.360
So the kit is where we have the entire
infrastructure for drawing and event

00:29:04.360 --> 00:29:06.390
handling in a Cocoa application.

00:29:06.590 --> 00:29:09.990
In addition to that infrastructure,
we provide all the standard controls

00:29:10.000 --> 00:29:11.870
ready to use out of the box.

00:29:11.990 --> 00:29:15.600
As you saw, there's also a sophisticated
text engine in there.

00:29:15.760 --> 00:29:17.660
All the standard dialogues are up there.

00:29:17.660 --> 00:29:21.760
We tend to call those panels,
so there are things like the color panel,

00:29:21.760 --> 00:29:24.840
save panel, font panel, open panel,
all of those things that

00:29:24.840 --> 00:29:27.600
you saw in TextEdit Lite.

00:29:27.970 --> 00:29:31.060
And as I said before,
AppKit relies on Foundation for

00:29:31.060 --> 00:29:34.860
its object structure and the
application services layer for

00:29:34.960 --> 00:29:37.300
its graphics and event handling.

00:29:38.750 --> 00:29:41.770
So what I'm going to do is walk you
through the core classes in the kit,

00:29:41.770 --> 00:29:44.030
and then we're going to spend
a little time talking about the

00:29:44.030 --> 00:29:46.370
abstractions inside the kit.

00:29:48.600 --> 00:31:00.300
[Transcript missing]

00:31:02.290 --> 00:31:07.190
One of the subclasses of
NS Responder is NS Application.

00:31:07.310 --> 00:31:10.960
NS Application is concrete,
where NS Responder was abstract.

00:31:11.050 --> 00:31:13.600
So you would never instantiate
a plain NS Responder.

00:31:13.600 --> 00:31:17.490
On the other hand,
there is a single NS Application instance

00:31:17.570 --> 00:31:19.420
in your application.

00:31:19.560 --> 00:31:23.360
This instance is what is responsible
for managing all the communication with

00:31:23.360 --> 00:31:27.960
the rest of the surrounding system,
with the dock, with the Windows Server,

00:31:28.000 --> 00:31:29.680
and so on.

00:31:30.340 --> 00:31:33.830
NS Application also maintains a
list of all the Windows inside

00:31:33.860 --> 00:31:37.240
of your application,
and it's responsible for running

00:31:37.240 --> 00:31:39.700
the app's main event loop,
run loop.

00:31:39.830 --> 00:31:42.300
And during that run loop,
what it's going to do is it's going to

00:31:42.300 --> 00:31:46.160
receive an event from the Windows Server,
take it apart, look at it, and say, "Oh,

00:31:46.210 --> 00:31:51.040
this needs to go to Window X,"
and hand it off to Window X.

00:31:51.170 --> 00:31:54.610
Which brings us to the next class,
NS Window.

00:31:55.400 --> 00:31:59.400
NSWindows reserves screen
real estate for you.

00:31:59.400 --> 00:32:02.860
NSWindows do not themselves draw,
but they handle the necessary

00:32:02.860 --> 00:32:05.860
coordination between other
windows and other applications

00:32:05.860 --> 00:32:07.400
to reserve space for you to draw.

00:32:07.560 --> 00:32:11.800
When an NSWindow receives an event,
it does the work of translating the

00:32:11.800 --> 00:32:15.980
raw event into the correct responder
method and then handing it off to the

00:32:16.050 --> 00:32:18.130
correct responder to process the event.

00:32:18.240 --> 00:32:21.380
Well, the events usually come
in one of two kinds.

00:32:21.430 --> 00:32:23.690
They either have a location
associated with them,

00:32:23.750 --> 00:32:26.410
in which case they're going to go
to whatever responder corresponds

00:32:26.480 --> 00:32:28.100
to that location inside the window.

00:32:28.200 --> 00:32:32.090
Or they're something like a key event,
which don't have a particular location.

00:32:32.200 --> 00:32:36.230
For that second kind of event,
NSWindows maintain a special instance

00:32:36.230 --> 00:32:38.580
variable called the first responder.

00:32:38.730 --> 00:32:42.460
The first responder is that
item inside the window that

00:32:42.460 --> 00:32:44.600
gets first crack at key events.

00:32:44.750 --> 00:32:47.550
And that first responder will
change as the application,

00:32:47.710 --> 00:32:49.960
as the application runs and
the user clicks in different

00:32:50.070 --> 00:32:52.350
text fields and so on.

00:32:53.800 --> 00:33:00.770
Okay, the final NS Responder subclass
I'm going to talk about is NS View.

00:33:02.010 --> 00:33:06.060
Like NS Responder,
NS View is an abstract class,

00:33:06.170 --> 00:33:10.240
and it adds the necessary structure
for drawing to the screen.

00:33:10.240 --> 00:33:12.100
It's very simple.

00:33:12.400 --> 00:33:16.590
You just override the drawRect
method on any NS View subclass,

00:33:16.850 --> 00:33:18.550
and that's where the drawing is done.

00:33:18.600 --> 00:33:22.360
The views live inside of a
hierarchy inside a window,

00:33:22.360 --> 00:33:27.010
so every view has one superview
and potentially many subviews.

00:33:27.300 --> 00:33:31.030
Subviews are automatically clipped
to their superview's bounds.

00:33:31.100 --> 00:33:34.640
And NS View is where you're
going to find all of the basic

00:33:34.640 --> 00:33:38.810
support for the UI notions that
your users are going to expect,

00:33:38.950 --> 00:33:42.280
things like drag and drop,
context-sensitive menus, tooltips.

00:33:42.360 --> 00:33:45.640
What you would do if you were
interested in one of these

00:33:45.640 --> 00:33:49.710
subsystems is you'd open up NS View,
find the set of methods that

00:33:49.830 --> 00:33:53.100
pertain to the particular piece
that you're interested in,

00:33:53.100 --> 00:33:57.450
and just override those as
directed by the documentation.

00:33:58.600 --> 00:33:59.980
So I said NSViews draw.

00:34:00.030 --> 00:34:03.270
That doesn't mean that you're kind
of left without recourse in draw

00:34:03.270 --> 00:34:06.600
rect and you suddenly find yourself
twiddling bits on the screen.

00:34:06.600 --> 00:34:11.540
We provide a number of objects inside of
the kit to help you with your drawing.

00:34:11.600 --> 00:34:13.820
At the top of the list
here we have NSImageRept,

00:34:13.860 --> 00:34:17.530
String, and AttributedString,
all of which know how to draw

00:34:17.630 --> 00:34:19.600
to a particular location.

00:34:19.610 --> 00:34:23.720
NSImage provides compositing support,
so that's how you get transparency as

00:34:23.720 --> 00:34:27.600
well as a number of special effects and
compositing images over one another.

00:34:27.600 --> 00:34:32.600
NSBezierPath gives you abstract drawing
in sort of the PostScript sense,

00:34:32.600 --> 00:34:36.600
where you're drawing lines, circles,
rectangles, paths.

00:34:36.600 --> 00:34:41.000
NSColor and NSFont allow you to
set the correct color and font

00:34:41.120 --> 00:34:43.600
in the current graphics context.

00:34:43.830 --> 00:34:47.050
And finally,
NSCell allows you to encapsulate bits of

00:34:47.100 --> 00:34:52.550
drawing for reuse in several different
locations or by several different views.

00:34:54.080 --> 00:34:57.200
We also provide a number
of concrete subclasses of

00:34:57.200 --> 00:35:00.640
NSView ready to use in the kit.

00:35:00.790 --> 00:35:04.320
NSTextView is one such that
we saw in TextEdit Lite.

00:35:04.450 --> 00:35:07.460
Here I've composited together a
number of images that show a number

00:35:07.460 --> 00:35:09.200
of the different views on the system.

00:35:09.320 --> 00:35:13.680
So in the frontmost window we
have an NSOutlineView being

00:35:13.680 --> 00:35:16.200
displayed inside an NSTabView.

00:35:16.320 --> 00:35:21.200
Behind that, you can see NS Ruler View in
an NS Text View as well.

00:35:21.320 --> 00:35:24.630
And at the very back,
we see an NS Table View being

00:35:24.700 --> 00:35:26.310
used inside of Mail.

00:35:28.050 --> 00:35:32.430
So now that I've walked you through
the basics of NS Responder and NS View,

00:35:32.690 --> 00:35:36.700
you have the pieces you need to
respond to events and to draw.

00:35:36.750 --> 00:35:39.290
At this point,
I'm going to invite my manager, Ali Ozer,

00:35:39.300 --> 00:35:41.510
up onto the stage,
and he's going to show you a simple

00:35:41.510 --> 00:35:43.740
application that uses those two pieces.

00:35:43.770 --> 00:35:45.210
Ali?

00:35:51.300 --> 00:35:55.410
OK, so my example here,
the demo I'm going to show you,

00:35:55.410 --> 00:35:58.700
is going to approach the AppKit at a
much lower level than Mike's example did.

00:35:58.710 --> 00:36:00.760
Basically, as Becky said,
we're just going to show you how

00:36:00.760 --> 00:36:04.800
to subclass NSView for the purposes
of modifying the way it draws and

00:36:04.800 --> 00:36:06.500
modifying the way it handles events.

00:36:06.500 --> 00:36:09.430
There's many other things you
can do in NSView-- tooltips,

00:36:09.570 --> 00:36:10.580
drag and drop, and et cetera.

00:36:10.580 --> 00:36:11.780
We won't go into all that.

00:36:11.810 --> 00:36:14.770
But it's going to be equally easy,
trust me.

00:36:14.860 --> 00:36:17.630
So like Mike,
we start off with Project Builder.

00:36:17.790 --> 00:36:20.350
We go ahead and create a new project.

00:36:20.760 --> 00:36:22.860
This time I'm just going to
create a Cocoa application,

00:36:22.860 --> 00:36:27.100
not a Cocoa document-based application,
because we're just creating a one-window,

00:36:27.100 --> 00:36:28.500
very simple application.

00:36:29.150 --> 00:36:31.260
It's going to ask for a project name.

00:36:31.310 --> 00:36:33.330
Let's call it Dot.

00:36:33.680 --> 00:36:36.600
Our goal here is to create
an application which,

00:36:36.600 --> 00:36:38.560
when you click somewhere,
draws a dot there.

00:36:38.560 --> 00:36:41.030
And when you click elsewhere,
it just moves the dot

00:36:41.030 --> 00:36:42.450
to wherever you clicked.

00:36:42.570 --> 00:36:42.990
So that's it.

00:36:43.000 --> 00:36:44.750
Okay, so there you go.

00:36:44.750 --> 00:36:46.970
It created a template for us.

00:36:47.030 --> 00:36:48.700
Now, in this case,
the template is really simple.

00:36:48.700 --> 00:36:49.680
We've got no classes.

00:36:49.710 --> 00:36:52.330
All we have is the main file
that Mike's application also had.

00:36:52.480 --> 00:36:53.920
And other than that,
there's nothing else.

00:36:53.920 --> 00:36:58.150
It also gives us an interface builder,
a Nib file, like Mike's program did,

00:36:58.150 --> 00:37:00.920
because all Cocoa applications
have a Nib file,

00:37:00.920 --> 00:37:02.200
at least to represent the menu.

00:37:02.200 --> 00:37:03.980
And then, of course,
it can represent windows

00:37:03.980 --> 00:37:04.950
and panels and so on.

00:37:05.000 --> 00:37:06.190
So that's all we get here.

00:37:06.400 --> 00:37:09.580
Now, again, just so that I don't end
up typing lots of code,

00:37:09.580 --> 00:37:11.640
I have the code written up already.

00:37:11.730 --> 00:37:14.980
Let's go ahead and say add files.

00:37:17.260 --> 00:37:19.960
And we have a class
file and a header file.

00:37:20.020 --> 00:37:22.840
Now, Mike showed you Java,
and I'm going to show you Objective-C.

00:37:22.840 --> 00:37:25.910
At the risk of scaring
some of you who might say,

00:37:25.910 --> 00:37:27.010
what is that?

00:37:27.420 --> 00:37:30.420
Objective-C is really,
it's the original language

00:37:30.420 --> 00:37:32.710
that Cocoa used to use,
and we've added support for

00:37:32.910 --> 00:37:34.520
Java over the last four years.

00:37:34.550 --> 00:37:38.720
Objective-C is basically a superset of C,
and it's very simple, and you'll see.

00:37:38.720 --> 00:37:41.950
It's just a little syntactic
addition to C that allows you to

00:37:41.950 --> 00:37:45.810
have a dynamic runtime and message
sending that's fairly powerful.

00:37:46.120 --> 00:37:49.710
So I'm going to add these
two files to my project.

00:37:51.730 --> 00:37:54.450
We're going to copy
them into the project.

00:37:54.550 --> 00:37:56.200
So there you go.

00:37:56.200 --> 00:37:57.600
So first I'm going to
show you the H file.

00:37:57.600 --> 00:38:02.040
The H file is where we declare
our object and tell the system,

00:38:02.040 --> 00:38:03.600
tell the compiler what it has.

00:38:03.600 --> 00:38:08.010
In this case, we're importing,
which is the same as including, Cocoa.h,

00:38:08.200 --> 00:38:10.940
which is basically what
everybody includes.

00:38:10.940 --> 00:38:16.020
And then here, this is Objective-C ways,
the way Objective-C declares an object.

00:38:16.040 --> 00:38:19.980
DotView, which is our view,
is a subclass of NSView.

00:38:20.000 --> 00:38:23.100
In addition to all the instance
variables NSView might have,

00:38:23.210 --> 00:38:27.600
and all of the functionality NSView has,
we add three new instance variables:

00:38:27.650 --> 00:38:30.580
a variable that declares
where our dot appears,

00:38:30.670 --> 00:38:33.530
a variable that declares
the color of our dot,

00:38:33.530 --> 00:38:35.090
and the radius of our dot.

00:38:35.400 --> 00:38:38.890
So we have these three
properties in our view.

00:38:39.690 --> 00:38:45.100
Now let's go to the Meet the
Class file for DotView.

00:38:46.090 --> 00:38:48.100
This indicates that's implementation.

00:38:48.140 --> 00:38:50.760
We basically first override
the initWithFrame method,

00:38:50.800 --> 00:38:55.580
which is the constructor, if you will,
for the NSView class.

00:38:55.940 --> 00:39:01.060
Here we basically tell the superview,
which is tell our superclass, NSView,

00:39:01.140 --> 00:39:02.350
to create itself.

00:39:02.360 --> 00:39:05.420
Then we simply initialize the three
instance variables that we have.

00:39:05.490 --> 00:39:07.270
It's a good idea to initialize
your instance variables,

00:39:07.270 --> 00:39:08.600
basic object-oriented programming.

00:39:08.600 --> 00:39:11.880
So we set the center point to 50,
the radius to 5.

00:39:12.040 --> 00:39:14.430
Now notice that color is another object.

00:39:14.470 --> 00:39:15.510
It's an NSObject.

00:39:15.600 --> 00:39:16.650
It's an NSColor.

00:39:16.970 --> 00:39:17.710
And Becky mentioned that.

00:39:17.760 --> 00:39:20.030
That was one of the objects
we used for drawing.

00:39:20.040 --> 00:39:22.220
We basically get one
of the prebuilt colors,

00:39:22.220 --> 00:39:24.000
a red color, and we'll retain it.

00:39:24.180 --> 00:39:28.040
Basically we hang on to it because
it's a property of this view.

00:39:28.040 --> 00:39:28.870
So that's that.

00:39:28.940 --> 00:39:34.040
And the other two things we do in this
example is draw and handleMouseUp.

00:39:34.040 --> 00:39:36.650
The drawRack method,
which Becky talked about,

00:39:36.650 --> 00:39:39.920
is basically where you override
to do your custom drawing.

00:39:39.940 --> 00:39:41.570
In this case, we simply...

00:39:43.680 --> 00:39:48.340
Get a white color and set,
and then draw our bounds.

00:39:48.610 --> 00:39:51.600
And basiopath with rect
basically draws a rectangle.

00:39:51.600 --> 00:39:53.290
In this case,
we just fill the whole bounds

00:39:53.290 --> 00:39:54.290
of our view with white.

00:39:54.340 --> 00:39:56.640
And then we go ahead,
set the color we have,

00:39:56.640 --> 00:39:59.510
in this case it's red,
and then we create a rectangle,

00:39:59.570 --> 00:40:02.780
which is equivalent to the size
of the dot we want to draw,

00:40:02.780 --> 00:40:05.440
and then we draw an oval with that shape.

00:40:05.510 --> 00:40:07.940
Now, oval, that's square,
within a square is circle,

00:40:07.940 --> 00:40:09.720
so we get a circle, and then we fill it.

00:40:09.760 --> 00:40:13.680
So these two lines draw white,
and then put the dot where the center is.

00:40:13.680 --> 00:40:15.680
And finally, our mouse-up method.

00:40:15.680 --> 00:40:18.590
Now, in NSV,
you can override methods like mouse-up,

00:40:18.590 --> 00:40:21.970
key-up, mouse-drag,
etc., to handle various events.

00:40:22.030 --> 00:40:23.880
In this case,
we're just interested in mouse-up.

00:40:23.880 --> 00:40:26.500
And all we want to do is we
take the location of the event,

00:40:26.510 --> 00:40:29.570
which is in terms of window coordinates,
and using this method,

00:40:29.620 --> 00:40:32.010
we convert it to the
current view's coordinates.

00:40:32.010 --> 00:40:35.090
And this takes care of
whether the view is scrolled,

00:40:35.100 --> 00:40:39.340
whether it's magnified, whatever,
and this gives back our center point.

00:40:39.340 --> 00:40:41.910
And then we simply call this method,
which tells the view that

00:40:41.940 --> 00:40:43.100
it needs to be refreshed.

00:40:43.220 --> 00:40:46.220
And the next, whenever it's appropriate,
the view will redraw itself,

00:40:46.220 --> 00:40:47.070
refresh itself.

00:40:47.200 --> 00:40:49.100
So that's it, as far as the code goes.

00:40:49.180 --> 00:40:51.720
Now, just like Mike did,
we also need to change

00:40:51.780 --> 00:40:53.100
our interface file.

00:40:53.100 --> 00:40:55.840
Let me hide project builder here.

00:40:56.100 --> 00:41:00.100
Now, I just opened my interface
file in interface builder.

00:41:00.100 --> 00:41:02.100
In Mike's case, he dragged a text view.

00:41:02.100 --> 00:41:05.120
In our case,
we are creating our own view,

00:41:05.120 --> 00:41:08.200
so we're going to drag this
view that says custom view.

00:41:08.400 --> 00:41:12.150
Basically, here we're saying we're not
using a pre-built object,

00:41:12.290 --> 00:41:13.720
we're using our own object.

00:41:13.720 --> 00:41:16.220
Let's make it as big as the window here.

00:41:16.220 --> 00:41:17.560
Let's make the window a little smaller.

00:41:17.700 --> 00:41:20.720
Now, we also want to tell the
system about this view.

00:41:20.720 --> 00:41:27.910
So we go to the classes tab,
we choose an S view, and we say subclass.

00:41:28.110 --> 00:41:30.000
And we specify that it's dot view.

00:41:30.010 --> 00:41:30.800
There are two ways to do this.

00:41:30.870 --> 00:41:33.040
You can either enter the class
name and properties here,

00:41:33.040 --> 00:41:34.560
or you can actually
parse the header file.

00:41:34.560 --> 00:41:36.540
In this case,
I just want to show you how you do this.

00:41:36.540 --> 00:41:39.970
So, now dot view is known to the
interface builder runtime.

00:41:39.970 --> 00:41:42.610
So we go back in here,
we bring up our inspector,

00:41:42.760 --> 00:41:47.310
and we specify that this
view is really a dot view.

00:41:47.460 --> 00:41:49.550
And as you can see,
it changed into a dot view.

00:41:49.700 --> 00:41:52.700
I think that's all we really need to do.

00:41:52.700 --> 00:41:57.530
One more thing we can do is maybe go
to the size inspector and make sure

00:41:57.650 --> 00:42:00.070
that whenever the window resizes,
the view resizes.

00:42:00.090 --> 00:42:01.440
There are a lot of other
properties you can set.

00:42:01.540 --> 00:42:02.830
This is the only one I will do.

00:42:02.830 --> 00:42:04.800
I will save, and I will hide.

00:42:04.840 --> 00:42:06.820
Let's go back into project builder.

00:42:06.840 --> 00:42:11.830
And I think we're ready to go,
so I will just say build.

00:42:15.040 --> 00:42:16.110
Okay, we're done.

00:42:16.270 --> 00:42:17.060
So let's run this.

00:42:17.060 --> 00:42:22.000
Let me hide Project Builder.

00:42:22.000 --> 00:42:23.790
So here is our application.

00:42:24.090 --> 00:42:25.600
As you can see, the view is there.

00:42:25.680 --> 00:42:28.250
The view is white because we
told to draw a white background.

00:42:28.460 --> 00:42:30.840
I hope you can see the difference
between the pattern here.

00:42:30.840 --> 00:42:33.300
And there's our dot at location 5050.

00:42:33.300 --> 00:42:35.420
So as I click around,
the dot basically moves

00:42:35.420 --> 00:42:36.390
to a new location.

00:42:36.420 --> 00:42:38.720
The center is updated,
the view is told to update,

00:42:38.720 --> 00:42:39.490
and there you go.

00:42:39.680 --> 00:42:41.720
Now if I draw in the
corner here or on the side,

00:42:41.720 --> 00:42:44.850
you see that's clipped to the bounds
of the view because automatic,

00:42:44.950 --> 00:42:46.680
by default, views will clip.

00:42:46.680 --> 00:42:49.650
In addition, if I put the dot here
and I resize my window,

00:42:49.760 --> 00:42:53.160
you see that the view is resized
and the dynamic resizing takes

00:42:53.160 --> 00:42:56.350
care of everything for you,
and the view is constantly redrawn

00:42:56.470 --> 00:42:57.980
using that drawRack method.

00:42:57.980 --> 00:42:58.520
So there you go.

00:42:58.520 --> 00:43:01.720
That's a pretty simple demo
of event and drawing handling.

00:43:01.720 --> 00:43:04.530
So... Great.

00:43:04.560 --> 00:43:05.550
Thank you.

00:43:10.600 --> 00:43:14.600
Okay, so we have one last class to talk
about in the core AppKit hierarchy,

00:43:14.600 --> 00:43:16.700
and that's NS Control.

00:43:16.700 --> 00:43:20.560
As a subclass of NS Responder,
NS Control inherits all the basic

00:43:20.990 --> 00:43:24.540
infrastructure it needs to handle events,
and as a subclass of NS View,

00:43:24.540 --> 00:43:26.940
it inherits everything it needs to draw.

00:43:27.320 --> 00:43:32.230
So control combines those two
concepts to add this notion of being

00:43:32.230 --> 00:43:35.420
triggered or activated by user events.

00:43:35.420 --> 00:43:39.940
Every control defines what it means
for that control to be activated,

00:43:39.940 --> 00:43:43.490
and at that point,
it's going to do something special.

00:43:43.500 --> 00:43:48.030
It's going to send its action
method to its target object.

00:43:48.120 --> 00:43:51.480
So target is a very special
instance variable for controls.

00:43:51.480 --> 00:43:53.770
It's usually connected
to one of your objects,

00:43:53.770 --> 00:43:57.230
whatever object you want to respond
to the control being activated.

00:43:57.350 --> 00:44:01.090
And then the action method tells
the control what method should

00:44:01.090 --> 00:44:03.090
be invoked on the target object.

00:44:03.150 --> 00:44:07.890
So some simple examples of controls are
things like buttons or text fields that

00:44:07.890 --> 00:44:12.990
need to be triggered when the button is
clicked or when the text field is edited.

00:44:15.020 --> 00:44:18.300
So, as I said,
when the control is triggered,

00:44:18.300 --> 00:44:20.790
the action method is sent
to the target object.

00:44:21.040 --> 00:44:22.540
Very simple.

00:44:22.650 --> 00:44:24.440
So what happens if the target is null?

00:44:24.590 --> 00:44:27.050
Well, this does not mean that
the action is lost.

00:44:27.290 --> 00:44:34.210
Instead, this is the control's signal
that the action needs to be sent

00:44:34.440 --> 00:44:38.080
through the responder chain,
starting with the first responder

00:44:38.080 --> 00:44:39.890
of the frontmost window.

00:44:40.070 --> 00:44:45.140
So some common examples of
null-targeted action methods

00:44:45.180 --> 00:44:46.840
would be things like cut and copy.

00:44:46.840 --> 00:44:49.330
Other menu commands
would be very similar,

00:44:49.540 --> 00:44:55.610
where you really want whatever happens
to be frontmost to respond to the action.

00:44:57.360 --> 00:45:01.260
Like NSView,
NSControl has a number of subclasses

00:45:01.330 --> 00:45:05.040
provided inside of the kit,
ready to use without modification.

00:45:05.040 --> 00:45:07.410
I've just listed some here,
starting with the very

00:45:07.410 --> 00:45:10.250
basic ones like Button,
Slider, Text Field, ColorWell.

00:45:10.260 --> 00:45:14.120
NSMatrix and NSScroller are
somewhat more sophisticated.

00:45:14.160 --> 00:45:18.030
Matrix lays out a grid or array
of buttons or text fields,

00:45:18.030 --> 00:45:19.560
whatever you want.

00:45:19.560 --> 00:45:23.510
NSScroller is what you see at the
edge of a scroll view to allow you to

00:45:23.560 --> 00:45:25.510
scroll through the view's contents.

00:45:25.540 --> 00:45:29.540
And then we have some very
sophisticated controls like NSBrowser,

00:45:29.540 --> 00:45:33.990
Table View, and Outline View,
which allow you to display

00:45:34.110 --> 00:45:36.460
huge amounts of data.

00:45:37.700 --> 00:45:41.390
So I'm going to ask Ali to come back
up here and extend dot view a little

00:45:41.390 --> 00:45:43.110
bit and show us how controls work.

00:45:43.330 --> 00:45:44.700
Ali?

00:45:45.110 --> 00:45:48.140
It's usually upper management which
changes the future set on you,

00:45:48.190 --> 00:45:50.950
but in this case,
I guess Becky is the slave driver.

00:45:50.980 --> 00:45:54.860
OK, we'll make a better dot program here.

00:45:54.860 --> 00:45:56.200
OK, so let's see.

00:45:56.250 --> 00:46:00.450
We want to do two things to dot view.

00:46:00.500 --> 00:46:04.610
It has three instance variables, center,
radius, and color.

00:46:04.810 --> 00:46:06.930
We're able to change where
it appears by clicking.

00:46:06.940 --> 00:46:10.420
Now we'd like to change the
other two attributes of the dot,

00:46:10.460 --> 00:46:12.740
its size and its color.

00:46:14.210 --> 00:46:17.910
Okay, so let's go back to our dot view.

00:46:18.350 --> 00:46:18.700
There you go.

00:46:18.700 --> 00:46:20.550
It's the same dot view we used before.

00:46:20.850 --> 00:46:24.000
Now, again,
I put the code in the oven earlier,

00:46:24.000 --> 00:46:25.450
and it seems to be ready.

00:46:25.540 --> 00:46:28.370
I will just copy-paste out of here.

00:46:28.770 --> 00:46:31.920
Back in here and I will
explain what it does.

00:46:31.920 --> 00:46:34.540
So we want to be able to
modify the attributes of dot,

00:46:34.710 --> 00:46:36.580
the dot, the radius, and the color.

00:46:36.700 --> 00:46:37.510
So we have two methods.

00:46:37.560 --> 00:46:40.260
One of them is called setRadius,
one of them is called setColor.

00:46:40.260 --> 00:46:44.970
Now, the target action methods
typically always have one argument,

00:46:44.980 --> 00:46:46.560
which is the sender.

00:46:46.560 --> 00:46:49.310
And the sender could be the UI widget,
the UI control,

00:46:49.310 --> 00:46:51.280
which caused that action to be sent.

00:46:51.300 --> 00:46:54.040
So if a button was clicked,
the button is going to be the sender?

00:46:54.040 --> 00:46:54.510
Exactly.

00:46:54.550 --> 00:46:57.080
Now, in the case of radius,
typically the control that

00:46:57.130 --> 00:47:00.040
you're going to use is going
to have a floating point value,

00:47:00.100 --> 00:47:02.350
17, 89, 42, whatever.

00:47:02.360 --> 00:47:06.960
So in this case, setRadius gets called,
and we set our radius instance

00:47:06.960 --> 00:47:10.590
variable from the floating
point value of the sender.

00:47:10.670 --> 00:47:13.120
And the sender can be a text field,
a slider, or whatever.

00:47:13.150 --> 00:47:15.460
So we just ask for its
floating point value,

00:47:15.460 --> 00:47:16.750
and that's the radius.

00:47:16.840 --> 00:47:19.360
And then just like we did earlier,
we tell the view that

00:47:19.360 --> 00:47:21.620
needs to be displayed,
because the parameter,

00:47:21.620 --> 00:47:23.140
some parameter has changed.

00:47:24.000 --> 00:47:27.320
Now,
color is a little more sophisticated.

00:47:27.520 --> 00:47:29.970
The sender is going to be
something that supplies a color,

00:47:30.080 --> 00:47:31.580
because we want the color to be changed.

00:47:31.580 --> 00:47:33.710
Now, Becky talked about NSColorView.

00:47:33.710 --> 00:47:36.070
That's one view subclass,
which is a control,

00:47:36.190 --> 00:47:37.730
which can provide colors.

00:47:37.740 --> 00:47:41.110
It's tied to the color panel,
and based on changes in the color panel,

00:47:41.110 --> 00:47:42.300
it supplies colors.

00:47:42.360 --> 00:47:45.840
And because colors are objects,
we first release, that is,

00:47:45.840 --> 00:47:48.240
deallocate the previous color we had.

00:47:48.240 --> 00:47:52.140
Then we get the new color,
again from the sender, and we retain it.

00:47:52.260 --> 00:47:53.230
We hang on to it.

00:47:53.760 --> 00:47:55.860
We use reference counting and co-co,
and basically you see

00:47:55.910 --> 00:47:56.800
that in action here.

00:47:56.930 --> 00:48:00.750
And then just like the radius method,
we tell the view, set needs display.

00:48:00.800 --> 00:48:02.790
So that's all the changes
we need to do to dot view.

00:48:02.790 --> 00:48:04.790
And we also have to change the interface,
though.

00:48:04.800 --> 00:48:09.630
So let me hide project builder,
bring interface builder back up.

00:48:09.800 --> 00:48:12.790
Okay, so here's our dot view.

00:48:12.790 --> 00:48:14.790
Let's clean up the window here.

00:48:14.950 --> 00:48:16.610
Let's move the dot view up to make room.

00:48:16.780 --> 00:48:20.760
And let's bring our palette back.

00:48:21.620 --> 00:48:24.330
As you can see,
there are some default elements here,

00:48:24.330 --> 00:48:27.000
the pre-built objects,
as I mentioned earlier.

00:48:27.050 --> 00:48:30.710
So let's use a slider
to indicate the radius.

00:48:33.860 --> 00:48:37.790
I'm going to go to the inspector here
and change the slider's properties.

00:48:37.790 --> 00:48:40.240
I'm going to make it go
from a minimum of one,

00:48:40.250 --> 00:48:43.980
default value of five, to a maximum of,
say, 300.

00:48:44.320 --> 00:48:46.630
Now, to set the color,
we're going to use a color well,

00:48:46.630 --> 00:48:48.040
which is this little widget.

00:48:48.120 --> 00:48:49.460
I'm going to put that here.

00:48:49.580 --> 00:48:52.620
This basically is fairly straightforward.

00:48:52.650 --> 00:48:53.840
It's ready to use.

00:48:53.890 --> 00:48:58.180
Now,
there are two other things we need to do,

00:48:58.180 --> 00:48:58.180
which is to tell...

00:48:59.330 --> 00:49:04.180
Tell Interface Builder what the
actions that this dot view has.

00:49:04.290 --> 00:49:09.950
And we do that by going back to our
little classes inspector here and...

00:49:10.190 --> 00:49:14.060
Control clicking to get up a context menu
and saying we're going to add actions.

00:49:14.120 --> 00:49:17.010
That will put us into this mode where
we're able to add actions and outlets.

00:49:17.090 --> 00:49:18.600
So let's add actions.

00:49:18.600 --> 00:49:21.680
The two we added were set radius.

00:49:23.560 --> 00:49:25.840
and Seth Culler.

00:49:25.850 --> 00:49:29.630
Now, as you can see, DotView now lists
Seth Culler and Seth Radius.

00:49:29.660 --> 00:49:32.720
In addition, it lists facts and print,
which are action methods

00:49:32.720 --> 00:49:34.000
inherited from View.

00:49:34.020 --> 00:49:35.780
They're always there.

00:49:35.790 --> 00:49:38.210
Okay, so I think we're done here.

00:49:38.500 --> 00:49:39.730
We want to build those connections.

00:49:40.060 --> 00:49:40.730
Pardon?

00:49:40.830 --> 00:49:41.740
Build the connections.

00:49:41.740 --> 00:49:42.740
Oh yeah, that's right.

00:49:42.740 --> 00:49:43.690
We do want to build the connections.

00:49:43.730 --> 00:49:44.740
Yes.

00:49:44.740 --> 00:49:47.530
Okay, so we told DotView what it does.

00:49:47.530 --> 00:49:48.690
We added our action things.

00:49:48.690 --> 00:49:50.260
Now we want to form the connections.

00:49:50.260 --> 00:49:52.080
Now if we didn't do this,
it would have been very

00:49:52.200 --> 00:49:53.480
apparent when I ran the program.

00:49:53.570 --> 00:49:57.480
To form connections,
you Control-click and you drag.

00:49:57.480 --> 00:49:59.300
So the slider is
connected to the DotView,

00:49:59.450 --> 00:50:02.940
and the message we want
to invoke is setRadius.

00:50:02.940 --> 00:50:05.530
And the ColorView is
connected to the DotView,

00:50:05.560 --> 00:50:08.700
and the action we want
to send is setColor.

00:50:08.700 --> 00:50:10.700
So when this is invoked,
it'll send setRadius.

00:50:10.700 --> 00:50:11.810
When that's invoked, setColor.

00:50:11.830 --> 00:50:12.960
Pretty straightforward.

00:50:12.960 --> 00:50:15.120
We'll save here and we'll hide.

00:50:15.180 --> 00:50:18.360
Let's bring project builder back.

00:50:18.450 --> 00:50:18.850
Let's build.

00:50:18.850 --> 00:50:21.750
Okay, it's done.

00:50:22.050 --> 00:50:23.620
Let's run.

00:50:28.120 --> 00:50:29.310
So there's our window.

00:50:29.320 --> 00:50:32.720
Again, this seems to be a regression,
full regression testing

00:50:32.720 --> 00:50:34.000
indicates it's still working.

00:50:34.000 --> 00:50:34.540
That's good.

00:50:34.540 --> 00:50:37.000
Let's test the radius.

00:50:37.000 --> 00:50:37.800
Oh yeah, look at that.

00:50:37.800 --> 00:50:41.540
So it says, it sets this radius,
says set needs display, yes,

00:50:41.650 --> 00:50:44.160
and the view system
eventually displays it.

00:50:44.160 --> 00:50:45.200
There you go.

00:50:45.200 --> 00:50:47.360
Let's also try the color bit.

00:50:47.420 --> 00:50:49.490
When you click on that,
the color panel pops up,

00:50:49.540 --> 00:50:52.740
because one way to modify the color
here is obviously the color panel.

00:50:52.740 --> 00:50:54.850
And as you move the
color in the color wheel,

00:50:54.850 --> 00:50:56.660
the color over there is changing.

00:50:57.540 --> 00:51:00.170
As you can see, again,
the action is being sent

00:51:00.210 --> 00:51:01.780
and everything happens.

00:51:01.780 --> 00:51:04.120
And I think that's all I want to show.

00:51:04.680 --> 00:51:04.950
Great.

00:51:04.950 --> 00:51:05.360
Thanks, Ali.

00:51:05.920 --> 00:51:06.590
Thank you.

00:51:11.400 --> 00:51:13.120
I'm telling you,
you've got to watch management.

00:51:13.120 --> 00:51:17.380
They stop coding and
everything goes well.

00:51:17.380 --> 00:51:20.800
And then they start using
terms like regression testing.

00:51:21.000 --> 00:51:24.680
Okay,
so let's move on now from talking about

00:51:24.760 --> 00:51:30.010
the basic classes inside of the kit to
talk about some of the abstractions that

00:51:30.010 --> 00:51:34.630
we use to make it possible for you to
extend the functionality already there.

00:51:35.480 --> 00:51:36.720
We already talked about one.

00:51:36.720 --> 00:51:38.160
We talked about target action.

00:51:38.160 --> 00:51:41.880
That's an abstraction provided by
controls to make it easy for you to

00:51:41.880 --> 00:51:46.720
customize the behavior when a control,
like a button, is triggered.

00:51:46.750 --> 00:51:50.870
Two others that are very important
are notification and delegation.

00:51:50.870 --> 00:51:53.150
And then finally,
I'm going to talk a little bit

00:51:53.150 --> 00:51:56.740
about some of the data abstractions
we provide direct inside the kit.

00:51:57.710 --> 00:52:02.040
So notifications is actually a
concept that comes from foundation.

00:52:02.040 --> 00:52:06.030
And we use it to broadcast
events throughout an application

00:52:06.030 --> 00:52:07.460
or to other applications.

00:52:07.460 --> 00:52:10.640
The basic idea is that when
something important happens,

00:52:10.660 --> 00:52:13.450
you want to notify other people
who are interested in it.

00:52:13.460 --> 00:52:16.670
So the kit defines a number
of custom notifications,

00:52:16.900 --> 00:52:19.200
and I've listed three of them here.

00:52:19.200 --> 00:52:23.530
Things like NSWindowWillClose,
NSApplicationWillTerminate,

00:52:23.540 --> 00:52:25.460
or NSTextDidBeginEditing.

00:52:25.610 --> 00:52:30.750
And you can see here the idea is that
some major piece inside your application

00:52:30.750 --> 00:52:33.470
is about to do something important.

00:52:34.440 --> 00:52:39.300
The way notifications work is they
rendezvous via the Notification Center.

00:52:39.330 --> 00:52:42.410
So people who are interested,
objects that are interested in

00:52:42.560 --> 00:52:46.120
hearing about these notifications,
go to the Notification Center and

00:52:46.120 --> 00:52:48.140
register themselves as observers.

00:52:48.280 --> 00:52:50.940
You would say something like,
"I'm interested in knowing

00:52:50.940 --> 00:52:54.580
when a window closes,
this is the window I'm interested in,

00:52:54.580 --> 00:52:57.720
and this is the method
that I want triggered."

00:52:58.000 --> 00:53:01.570
Posters then, when they wish to post,
go to the same notification

00:53:01.570 --> 00:53:04.430
center and say,
"Please send the notification

00:53:04.430 --> 00:53:08.140
NSWindow did close." The relevant
object is this window,

00:53:08.140 --> 00:53:15.300
and then they can also provide a
dictionary of additional information

00:53:15.300 --> 00:53:15.300
if there's any extra information they
want carried with the notification.

00:53:17.000 --> 00:53:20.280
A very similar concept is delegation.

00:53:20.300 --> 00:53:24.120
Delegation allows one object
to act on behalf of another.

00:53:24.120 --> 00:53:28.960
So several of the different
Kit classes support delegates.

00:53:29.310 --> 00:53:34.440
The idea behind this is to allow you,
the developers, to avoid subclassing just

00:53:34.440 --> 00:53:37.740
because you want to provide a
small amount of customization.

00:53:37.900 --> 00:53:42.290
We do not think it is appropriate
to subclass NSWindow just because

00:53:42.290 --> 00:53:46.090
you want to detect when the window
is closed and provide a little

00:53:46.090 --> 00:53:48.160
custom behavior at that point.

00:53:48.270 --> 00:53:52.920
By not subclassing, you can do this in a
much lighter weight way.

00:53:53.280 --> 00:53:58.020
This also allows several objects
to share a single delegate,

00:53:58.020 --> 00:53:59.790
saving on memory size.

00:54:00.090 --> 00:54:02.990
Unlike notifications which
are strictly passive,

00:54:03.240 --> 00:54:07.870
the delegate object is allowed to
affect the process as it takes place.

00:54:08.000 --> 00:54:15.790
So, whereas we have the notifications
NSWindowWillClose and NSWindowDidClose,

00:54:15.900 --> 00:54:20.000
the matching delegate
method is WindowShouldClose.

00:54:20.080 --> 00:54:23.220
So, when the window goes to close,
it will send the delegate

00:54:23.220 --> 00:54:25.000
the method WindowShouldClose.

00:54:25.010 --> 00:54:27.390
At that point,
the delegate can do whatever it wants,

00:54:27.530 --> 00:54:30.630
and ultimately will return either
"yes" meaning "allow the window to

00:54:30.630 --> 00:54:36.790
go through its closing procedure" or
"no" the window must remain on screen.

00:54:38.330 --> 00:54:41.020
So to implement a delegate,
you need to choose an object on

00:54:41.020 --> 00:54:44.080
your side to be the delegate,
and you need to choose the kit

00:54:44.080 --> 00:54:46.060
object you wish to delegate from.

00:54:46.150 --> 00:54:47.980
Look up the class for the kit object.

00:54:48.270 --> 00:54:51.980
You will find a list of delegate
methods available to you.

00:54:52.120 --> 00:54:54.720
Read the documentation and
figure out which of those

00:54:54.820 --> 00:54:59.400
methods are of interest to you,
and override only those.

00:54:59.550 --> 00:55:04.760
Once you're done with all of that,
just call kit object set delegate,

00:55:05.150 --> 00:55:07.610
passing your object's reference.

00:55:09.680 --> 00:55:10.440
Okay.

00:55:10.450 --> 00:55:12.600
Now, like I said,
delegation and notification

00:55:12.600 --> 00:55:14.130
are very similar concepts.

00:55:14.230 --> 00:55:17.740
They're ways that your objects get
informed about important things

00:55:17.830 --> 00:55:20.040
happening in the user interface.

00:55:20.120 --> 00:55:22.830
But there are some very
important differences.

00:55:23.070 --> 00:55:25.690
Notification observers
are strictly passive.

00:55:25.800 --> 00:55:29.230
They are merely being informed
that a change is taking place.

00:55:29.330 --> 00:55:34.550
Delegates, on the other hand,
are active and permitted to interfere

00:55:34.550 --> 00:55:37.690
with the process and even prevent
the change from taking place.

00:55:38.250 --> 00:55:41.870
As a side effect of this,
there will only ever be one

00:55:41.870 --> 00:55:44.400
delegate for a given kit object.

00:55:44.480 --> 00:55:47.470
On the other hand,
there are as many observers as care to

00:55:47.510 --> 00:55:49.970
register with the Notification Center.

00:55:50.290 --> 00:55:51.860
And you'll see this
difference in the naming.

00:55:51.860 --> 00:55:56.490
As I said, notifications usually have the
word "will" or "did" in the name

00:55:56.540 --> 00:56:01.430
to show that a change is about to
or has just completed taking place.

00:56:01.540 --> 00:56:05.140
Delegate methods tend to be named
"should" and have a return value

00:56:05.140 --> 00:56:09.750
that the delegate can use to prevent
or change the behavior of the

00:56:10.000 --> 00:56:13.110
change that was going to take place.

00:56:14.400 --> 00:56:18.120
That's all I have on
notifications and delegation.

00:56:18.240 --> 00:56:22.680
Now I'm going to talk a little bit about
the data abstractions inside the kit.

00:56:22.970 --> 00:56:27.380
By and large, the kit is centered around
drawing and event handling.

00:56:27.490 --> 00:56:31.760
So most of the classes in
there are subclasses of NSView,

00:56:31.760 --> 00:56:34.130
or NSResponder, as I said.

00:56:34.200 --> 00:56:37.890
However,
we do provide a few pure data objects,

00:56:37.950 --> 00:56:41.120
and those surround
these data abstractions.

00:56:41.210 --> 00:56:43.060
I've listed a few of them here.

00:56:43.170 --> 00:56:48.320
NSDocument is the central-most
class in the document architecture.

00:56:48.600 --> 00:56:53.400
It's what Mike used to represent
that text document in memory.

00:56:53.560 --> 00:56:58.930
NSImage and NSImageRep are used to
represent images and the multiple

00:56:58.930 --> 00:57:01.900
representations that they may have.

00:57:02.060 --> 00:57:05.220
NSFont is an abstract
representation of a font.

00:57:05.340 --> 00:57:09.100
NSAttributedString allows you to
store attributes over a string.

00:57:09.100 --> 00:57:11.910
So beyond just the characters,
you can mark particular regions

00:57:12.260 --> 00:57:16.960
as having particular attributes,
like italics, like a particular font.

00:57:17.010 --> 00:57:20.860
And then finally, NSColor,
which we saw in dot view,

00:57:20.860 --> 00:57:22.540
represents a color.

00:57:24.260 --> 00:57:28.510
So, when you look at a Cocoa application
and it all comes together,

00:57:28.520 --> 00:57:30.830
this is what you're going to see.

00:57:30.830 --> 00:57:35.120
There is a single
NS application instance,

00:57:35.210 --> 00:57:38.780
which handles all the communication
to the rest of the system as a whole.

00:57:38.780 --> 00:57:42.580
It also maintains the list of
windows inside of the application.

00:57:43.240 --> 00:57:48.200
NS applications have a delegate,
which you can choose to implement.

00:57:48.230 --> 00:57:51.380
NS windows have delegates, again,
which you can connect

00:57:51.480 --> 00:57:52.940
and choose to implement.

00:57:52.940 --> 00:57:58.220
And then those objects are going to
talk down to whatever data objects you

00:57:58.220 --> 00:58:02.900
use to represent your internal data,
the things that are peculiar

00:58:03.000 --> 00:58:04.580
to your application.

00:58:05.520 --> 00:58:09.000
If we take a close-up
look on that window,

00:58:09.300 --> 00:58:13.240
we can see that inside the window there
are a number of views being displayed,

00:58:13.240 --> 00:58:17.110
one of which might be a custom NS view,
like that dot view that we used.

00:58:17.130 --> 00:58:20.800
You might also have a number of
concrete subclasses of NS control

00:58:20.800 --> 00:58:24.600
that are kit objects that you're
using directly from the box.

00:58:24.600 --> 00:58:26.920
All of those are talking
down to the layer below it,

00:58:27.000 --> 00:58:29.760
which I've represented here
simply as a window delegate.

00:58:29.760 --> 00:58:31.750
It could, of course,
be several different objects

00:58:31.830 --> 00:58:33.240
of several different classes.

00:58:34.590 --> 00:58:36.900
And then off the bottom,
that talks down to your

00:58:37.160 --> 00:58:38.400
data model underneath.

00:58:41.900 --> 00:58:45.200
All right,
that's all I have to tell you today

00:58:45.320 --> 00:58:48.300
about the kit and about Foundation.

00:58:48.300 --> 00:58:50.660
But I am going to give you
a couple pointers for where

00:58:50.660 --> 00:58:52.140
to go for more information.

00:58:52.140 --> 00:58:54.280
The first of these is documentation.

00:58:54.280 --> 00:58:59.440
You would be just amazed at how much
documentation is on your DP4 CD.

00:58:59.440 --> 00:59:00.920
You can find the release notes there.

00:59:00.920 --> 00:59:03.410
There's overview documentation,
which goes through everything

00:59:03.530 --> 00:59:05.370
I've talked about here,
as well as a number of

00:59:05.500 --> 00:59:07.520
other different concepts.

00:59:07.520 --> 00:59:10.580
There are programming topics
that are covered in-depth in

00:59:10.580 --> 00:59:13.460
particular documentation files.

00:59:13.570 --> 00:59:15.570
The class references are all online.

00:59:15.570 --> 00:59:20.200
They give a complete list of all of
the methods on the different classes

00:59:20.200 --> 00:59:23.060
and what the methods are used for.

00:59:23.060 --> 00:59:25.380
And then finally,
there's a fair bit of example code,

00:59:25.430 --> 00:59:29.570
including the TextEdit application,
which I mentioned earlier.

00:59:30.430 --> 00:59:34.900
To find the documentation, look in
System Developer Documentation Cocoa.

00:59:35.070 --> 00:59:41.100
All of that is also available on the
web at developer.apple.com/techpubs.

00:59:41.430 --> 00:59:46.580
And the example code can be found in
System Developer Examples App Kit.

00:59:48.950 --> 00:59:50.730
All right, finally,
where do you go from here?

00:59:50.730 --> 00:59:54.150
These are some sessions that
I think are worth taking a look at.

00:59:54.310 --> 00:59:57.240
Cocoa In-Depth is the
follow-on session to this one.

00:59:57.240 --> 00:59:59.100
As I mentioned,
they're going to be talking

00:59:59.100 --> 01:00:02.260
about the text subsystem there,
as well as the document architecture,

01:00:02.270 --> 01:00:05.760
and a number of other more
complicated concepts that we did

01:00:05.760 --> 01:00:07.780
not have time to discuss here.

01:00:08.990 --> 01:00:11.990
Cocoa Update is where we're going
to talk about what's changed

01:00:11.990 --> 01:00:13.620
since we met here last year.

01:00:13.690 --> 01:00:16.560
Just a word of warning,
that talk does assume that you

01:00:16.560 --> 01:00:20.400
are already familiar with Cocoa as
it appeared in DP1 last year,

01:00:20.400 --> 01:00:23.430
which does not mean you should
not go just because you're

01:00:23.510 --> 01:00:25.080
not familiar with Cocoa.

01:00:25.080 --> 01:00:30.020
Just a warning that you might
find yourself in a little deep.

01:00:33.550 --> 01:00:35.140
The next line is a mistake.

01:00:35.210 --> 01:00:37.800
You're not interested in
Core Foundation Advanced.

01:00:37.800 --> 01:00:40.260
You're interested in
Core Foundation Basics.

01:00:40.260 --> 01:00:44.020
That's 124 in Hall A1
tomorrow morning at 10,

01:00:44.100 --> 01:00:44.940
I believe.

01:00:44.960 --> 01:00:48.760
And that's where you can find out
about property lists in greater detail.

01:00:48.760 --> 01:00:51.650
And then again,
Project Builder and especially

01:00:51.650 --> 01:00:56.360
Interfacer Builder are definitely worth
taking a look at if you're not familiar

01:00:56.360 --> 01:00:58.490
with them and how they are used.

01:00:58.530 --> 01:01:02.280
And I've listed their two
introductory sessions here.

01:01:05.700 --> 01:01:09.700
Finally, I'm going to invite
David Wright back up on stage.

01:01:09.890 --> 01:01:10.700
David?

01:01:10.700 --> 01:01:12.700
Ah, there we go.

01:01:12.700 --> 01:01:14.900
And he's going to take us
through the Q&A as well,

01:01:14.900 --> 01:01:21.910
so if you want to start getting
to the microphones in the aisles,

01:01:21.920 --> 01:01:22.910
that'd be great.

01:01:22.910 --> 01:01:22.910
David Wright: Great.

01:01:22.910 --> 01:01:22.910
Thanks, Becky.

01:01:22.910 --> 01:01:22.910
Thanks, you guys, for the demos.

01:01:22.910 --> 01:01:22.910
Let's give it up for him.