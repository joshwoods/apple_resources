WEBVTT

00:00:15.810 --> 00:00:18.240
In this session,
I'm going to do a quick review of

00:00:18.240 --> 00:00:21.000
what Carbon is and why it's important.

00:00:21.280 --> 00:00:24.740
We're going to go more into detail about
the transition process and what it takes

00:00:24.740 --> 00:00:26.860
to get your application carbonized.

00:00:26.920 --> 00:00:29.980
And then we'll talk about some of the
development options that you face with

00:00:29.980 --> 00:00:33.000
tools and platforms and debugging.

00:00:33.180 --> 00:00:35.420
So, what is Carbon?

00:00:35.530 --> 00:00:40.110
We'll simply put it's APIs that you
can write to in the Mac OS toolbox

00:00:40.200 --> 00:00:44.370
so that your application will
run on the 8.1 through 10.

00:00:44.710 --> 00:00:48.600
As Scott Forstall pointed out on Monday,
Carbon is a living organism.

00:00:48.600 --> 00:00:53.300
As Apple is reviewing the APIs,
developer feedback is very important

00:00:53.420 --> 00:00:56.540
and it has made a severe impact,
severe that sounds bad,

00:00:56.680 --> 00:01:00.710
a great impact on some of the
decisions that Apple has made about

00:01:00.710 --> 00:01:02.740
whether to keep or remove APIs.

00:01:02.840 --> 00:01:06.970
Some APIs have to be removed because
they just simply wouldn't work in a

00:01:06.970 --> 00:01:12.820
modern operating system environment
and some because our evaluation of how

00:01:12.820 --> 00:01:16.860
much they're being used would indicate
that we should no longer support it,

00:01:16.950 --> 00:01:20.080
but developer feedback has often
made an impact on those decisions.

00:01:20.080 --> 00:01:25.030
So this mailing list is self-subscribe
and if you go ahead and add yourself

00:01:25.120 --> 00:01:29.970
to that and begin discussing with
other developers and Apple employees

00:01:29.970 --> 00:01:32.750
that are on this mailing list,
your feedback will be very important.

00:01:32.830 --> 00:01:35.600
feedback will definitely be incorporated.

00:01:36.120 --> 00:01:37.480
So, why Carbon?

00:01:37.900 --> 00:01:39.590
Well,
I think before we talk about why Carbon,

00:01:39.590 --> 00:01:42.200
we have to review why Mac OS X.

00:01:42.230 --> 00:01:46.980
And as Scott also pointed out on Monday,
Mac OS X is bringing a lot to the

00:01:46.980 --> 00:01:52.000
Mac OS platform that simply isn't there
enough with Mac OS 8 and 9 right now.

00:01:52.000 --> 00:01:55.120
And those things are stability
because of protected memory,

00:01:55.250 --> 00:01:59.000
performance and responsiveness
because of preempted multitasking,

00:01:59.070 --> 00:02:01.890
Aqua,
which is just an amazing user experience,

00:02:02.000 --> 00:02:04.670
you've all seen that,
a virtually unlimited memory,

00:02:04.670 --> 00:02:07.620
no more finder panels,
no more having to close your app,

00:02:07.620 --> 00:02:11.000
open the panel, guess the right number,
and relaunch your app,

00:02:11.000 --> 00:02:14.260
and application packaging,
which is delivering multiple

00:02:14.260 --> 00:02:17.880
languages without having to install
a different version of the app

00:02:18.000 --> 00:02:21.000
or a different version of the OS,
and simple.

00:02:21.000 --> 00:02:23.710
All incorporated into a folder,
but to the user it looks

00:02:23.710 --> 00:02:24.950
like one finder item.

00:02:25.000 --> 00:02:26.960
So now back to why Carbon.

00:02:26.970 --> 00:02:31.000
Well, all those great things are
coming to us because of Mac OS X,

00:02:31.000 --> 00:02:33.000
but all the applications that
the user has to use are not.

00:02:33.000 --> 00:02:36.100
The applications that the users are
using for productivity are on 8 and 9,

00:02:36.160 --> 00:02:38.000
and that's where Carbon comes into play.

00:02:38.180 --> 00:02:41.110
Carbon is Apple's answer to
how we're going to incorporate

00:02:41.170 --> 00:02:45.120
these two great environments,
Mac OS 8 and 9 applications,

00:02:45.120 --> 00:02:48.060
which are so many,
and Mac OS X bringing the modern

00:02:48.060 --> 00:02:50.000
operating system environment.

00:02:50.160 --> 00:02:53.990
It gives us a great user
experience on a robust platform.

00:02:55.920 --> 00:02:57.800
So the transition process.

00:02:57.920 --> 00:03:00.310
It's pretty straightforward.

00:03:00.490 --> 00:03:02.560
I actually prefer to call
it a tune-up process.

00:03:02.600 --> 00:03:04.520
I was reviewing some of
the documentation we have,

00:03:04.520 --> 00:03:08.920
and I like this term better
because I think it's more accurate.

00:03:08.920 --> 00:03:14.110
Tune-up is kind of getting in
shape just parts of your app that

00:03:14.110 --> 00:03:16.670
need to be changed a little bit to
work better in a modern operating

00:03:16.770 --> 00:03:19.920
system environment like Mac OS X.

00:03:20.190 --> 00:03:23.170
So the first thing you're going
to want to do is use CarbonDator.

00:03:23.250 --> 00:03:25.100
I'm going to go into all
of this in more detail,

00:03:25.100 --> 00:03:27.100
but I just wanted to give
an overview of the process.

00:03:27.100 --> 00:03:31.370
CarbonDator is a tool that Apple has
made so that you can preview required

00:03:31.420 --> 00:03:34.120
changes that are going to be coming
to your application before you

00:03:34.160 --> 00:03:35.790
really start a lot of the work.

00:03:35.980 --> 00:03:38.820
Then you're going to want to
download the CarbonLive SDK,

00:03:38.880 --> 00:03:41.890
which has pretty much everything
you'll need to get going.

00:03:42.000 --> 00:03:43.440
And then you start the tune-up.

00:03:43.490 --> 00:03:44.160
Whoa, here we go.

00:03:44.290 --> 00:03:48.390
Fixing compiler errors,
using alternative or modified APIs for

00:03:48.410 --> 00:03:49.920
those that are no longer supported.

00:03:49.940 --> 00:03:53.370
and you're going to link
against Carbon stub.

00:03:53.590 --> 00:03:57.800
Then you're going to run on Mac OS 9,
which is cool, but as Mike Garcia from

00:03:57.800 --> 00:04:00.820
Quark said on Monday,
when you run on Mac OS X,

00:04:00.910 --> 00:04:02.070
it's really fun.

00:04:02.130 --> 00:04:03.850
It really is.

00:04:03.940 --> 00:04:07.460
So, CarbonDator, like I said,
allows you to preview required changes.

00:04:07.460 --> 00:04:08.360
It's very simple.

00:04:08.360 --> 00:04:11.580
You download a tool,
you drag your app onto it,

00:04:11.700 --> 00:04:15.080
CarbonDator spits out a file,
you mail that to Apple at

00:04:15.080 --> 00:04:18.460
an email address that's
specified in the documentation,

00:04:18.570 --> 00:04:22.380
and in about an hour you get back
an HTML report that gives you a

00:04:22.380 --> 00:04:26.900
detail of the APIs you're using
that are unsupported or modified.

00:04:27.160 --> 00:04:28.440
So, this was mine.

00:04:28.490 --> 00:04:32.820
I came into developer relations
last summer and before that I was

00:04:32.820 --> 00:04:35.260
working on a project in engineering.

00:04:35.260 --> 00:04:38.850
I don't know if any of you have had
the chance to see a new Macintosh

00:04:38.850 --> 00:04:42.360
boot within the past nine months,
but it starts playing a flashy

00:04:42.570 --> 00:04:46.690
movie and it allows the user to
register and get an internet account.

00:04:46.870 --> 00:04:48.010
Have any of you seen that?

00:04:48.010 --> 00:04:48.710
I don't know.

00:04:48.910 --> 00:04:49.090
Yeah?

00:04:49.090 --> 00:04:49.800
Okay, cool.

00:04:49.800 --> 00:04:51.520
That was my engineering project.

00:04:51.520 --> 00:04:54.020
I was working on the
user experience side.

00:04:54.570 --> 00:04:56.670
Another great guy was
working on the back end,

00:04:56.680 --> 00:04:59.650
the internet and registration side.

00:04:59.660 --> 00:05:03.320
So, anyway,
when I was coming to developer relations,

00:05:03.320 --> 00:05:05.200
I wanted to get a really
good feel for the experience

00:05:05.200 --> 00:05:07.720
the developers were having,
so I emailed the application to

00:05:07.720 --> 00:05:10.410
CarbonDator and this was a sample
of the report that came back.

00:05:10.480 --> 00:05:13.600
So, as you can see,
90% of the APIs that I was

00:05:13.600 --> 00:05:15.600
using were just supported.

00:05:15.600 --> 00:05:17.600
That's actually a low number.

00:05:17.600 --> 00:05:19.900
I think it's because I was
a system software engineer.

00:05:19.900 --> 00:05:22.590
So, we use APIs that, I don't know,
aren't always supported

00:05:22.950 --> 00:05:24.300
or at least publicized.

00:05:24.300 --> 00:05:26.960
So,
your application will probably report a

00:05:27.000 --> 00:05:29.480
much higher number for supported APIs.

00:05:29.480 --> 00:05:33.130
8% were unsupported and a
small percentage were either

00:05:33.130 --> 00:05:36.470
modified or not recommended,
which means in a while

00:05:36.470 --> 00:05:38.490
they would be unsupported.

00:05:40.700 --> 00:05:43.640
So after you kind of get a feel for
the changes that are going to be made,

00:05:43.770 --> 00:05:45.690
go ahead and download
the Carbon Live SDK.

00:05:45.900 --> 00:05:48.540
The contents of it are
the Carbon Porting Guide.

00:05:48.600 --> 00:05:51.260
Really, the Carbon Porting Guide is
going to be your major guide

00:05:51.260 --> 00:05:52.600
through this whole process.

00:05:52.600 --> 00:05:55.470
It's a much deeper,
in-depth discussion of the kind

00:05:55.580 --> 00:05:57.580
of stuff I'm talking about today.

00:05:57.600 --> 00:06:00.760
You'll get the latest
universal interfaces,

00:06:00.950 --> 00:06:05.010
which you'll need to keep up
with the APIs that are constantly

00:06:05.010 --> 00:06:07.600
being reviewed and set for Carbon.

00:06:07.600 --> 00:06:10.630
A lot of the APIs are still
being reviewed as to whether we

00:06:10.650 --> 00:06:12.420
will permanently support them.

00:06:12.600 --> 00:06:15.580
And then you're going to link
against one of two stubs,

00:06:15.700 --> 00:06:19.530
and I'll explain the difference
between those in a few minutes.

00:06:19.600 --> 00:06:22.830
There's the Carbon Live extension,
so that you can run your

00:06:22.830 --> 00:06:24.600
software on Mac OS 8 or 9.

00:06:24.600 --> 00:06:27.490
Documentation and sample code.

00:06:27.600 --> 00:06:29.590
So with this stuff, you're all set.

00:06:29.600 --> 00:06:31.410
You're ready to go.

00:06:31.820 --> 00:06:35.040
There are currently two SDKs
for Carbon Live shipping.

00:06:35.170 --> 00:06:39.700
Carbon Live 104 has gone GM and
is available via download from

00:06:39.700 --> 00:06:43.880
Apple's software update mechanism,
and it's available on our developer site

00:06:43.920 --> 00:06:46.210
on the public area development kits.

00:06:46.290 --> 00:06:49.370
And Carbon Live 11 is currently
under development and being

00:06:49.370 --> 00:06:52.150
seeded about every two weeks,
and you can get that from your

00:06:52.150 --> 00:06:53.680
Apple developer connection account.

00:06:53.680 --> 00:06:56.650
Once you log in,
just click download software and

00:06:56.670 --> 00:07:01.390
go to the Carbon Live section,
and the Carbon Live 11 SDK will be there.

00:07:01.850 --> 00:07:04.070
For Carbon Live,
I'm actually going to be going into

00:07:04.070 --> 00:07:09.520
depth about that much more tomorrow,
Thursday, in the Civic Center at 5:00.

00:07:09.620 --> 00:07:13.820
So if you want to learn more about
Carbon Live and Carbon on Mac OS 8 and 9,

00:07:13.820 --> 00:07:16.190
please be sure to attend that session.

00:07:16.990 --> 00:07:21.300
So, the very,
very first step about Carbonizing your

00:07:21.300 --> 00:07:23.850
application has to do with 68K code.

00:07:23.910 --> 00:07:25.160
There's just none.

00:07:25.370 --> 00:07:30.590
So there's no 68K code involved with
Mac OS X or Carbon applications.

00:07:30.860 --> 00:07:33.540
And that's all I got to say about that.

00:07:33.660 --> 00:07:37.410
So the next step, once you're there,
you're ready, you're set, go.

00:07:37.620 --> 00:07:42.660
You wave this big flag,
target API Mac Carbon.

00:07:42.790 --> 00:07:46.250
So I got to say that at first
you're going to hate this flag,

00:07:46.320 --> 00:07:49.840
because if I could say that
Universal Interfaces had a mood,

00:07:49.870 --> 00:07:52.230
when you turn this flag on,
they get really fussy.

00:07:52.480 --> 00:07:54.500
And when you go to
rebuild your application,

00:07:54.500 --> 00:07:56.810
it's just going to start
raining compiler errors.

00:07:56.870 --> 00:07:59.570
So perhaps many of you have
already experienced this.

00:07:59.670 --> 00:08:03.160
But the good news is that
they're so easy to fix.

00:08:03.160 --> 00:08:06.060
I got to be honest, they're so tedious.

00:08:06.130 --> 00:08:08.330
But ending on the good note,
they're so easy.

00:08:08.510 --> 00:08:11.390
So it's just a lot of grunt work.

00:08:11.480 --> 00:08:14.920
And in some kitchens that we
had during the past nine months,

00:08:14.920 --> 00:08:19.160
I've seen developers show up with
just agony as they see the number

00:08:19.160 --> 00:08:20.940
of compiler errors coming in.

00:08:20.990 --> 00:08:24.260
They projected like two weeks,
which the kitchen was

00:08:24.260 --> 00:08:24.960
only running a week.

00:08:25.040 --> 00:08:28.000
And we just thought, all right, well,
go for it,

00:08:28.000 --> 00:08:29.480
and call me when it's up on 10:00.

00:08:29.480 --> 00:08:29.980
Or whatever.

00:08:29.980 --> 00:08:30.470
I don't know.

00:08:30.530 --> 00:08:32.710
But two days later, they were all done.

00:08:32.720 --> 00:08:36.330
So it goes a lot faster
than most people think.

00:08:37.000 --> 00:08:38.900
So what are these compiler errors?

00:08:38.900 --> 00:08:41.440
Well, Scott Forstall referred
to them on Monday.

00:08:41.550 --> 00:08:43.650
Most of them are coming from
the fact that we've made the

00:08:43.700 --> 00:08:45.900
toolbox data structures opaque.

00:08:45.900 --> 00:08:49.740
We've kind of kicked you guys
out of touching them directly,

00:08:49.740 --> 00:08:54.400
but that's such a good thing because now
Apple can keep moving the OS forward and

00:08:54.510 --> 00:08:57.870
not break your applications every time
we have to change something in there.

00:08:57.870 --> 00:09:03.890
It also allows us to add re-entrancy
to the toolbox for thread safety.

00:09:04.000 --> 00:09:07.620
The other type of error is
generic universal proc pointers

00:09:07.820 --> 00:09:09.550
are no longer supported.

00:09:09.720 --> 00:09:14.210
Each toolbox manager now
has specifically typed UPPs.

00:09:14.720 --> 00:09:17.000
So,
to take a deeper look at some of those,

00:09:17.110 --> 00:09:20.480
graph ports and friends are the
most common errors that you'll see.

00:09:20.760 --> 00:09:24.600
On Mac OS 9, a dialog is a window,
is a graph pointer.

00:09:24.600 --> 00:09:28.000
And we all know that we're so used to
casting those and using them as such,

00:09:28.050 --> 00:09:32.600
but on Mac OS X they are not,
and therefore, Carbon, they're not.

00:09:32.720 --> 00:09:35.850
So in order to do that,
you need to use casting functions,

00:09:35.850 --> 00:09:38.950
and these are a sample of a
lot of the casting functions,

00:09:38.990 --> 00:09:43.600
or even just accessor functions that
are available in Universal Interfaces.

00:09:43.600 --> 00:09:47.100
If you want to get the
field from a record,

00:09:47.100 --> 00:09:50.460
the convention is get_record_field.

00:09:50.590 --> 00:09:52.600
So get_window_port or get_dialog_window.

00:09:52.600 --> 00:09:57.230
For specific real objects,
not just a field of an object,

00:09:57.230 --> 00:10:02.790
but ports and windows, if you have that,
you can get the containing record by

00:10:03.280 --> 00:10:07.600
using the convention get_window_from_port
or get_dialog_from_window.

00:10:07.600 --> 00:10:10.460
So these conventions are followed
throughout the Universal Interfaces,

00:10:10.460 --> 00:10:12.600
so when you're looking for
that accessor function key,

00:10:12.600 --> 00:10:15.520
accessor function, keep this in mind.

00:10:15.950 --> 00:10:18.300
So here's an example.

00:10:18.300 --> 00:10:21.560
In the top line we see what
we've all been using today.

00:10:21.560 --> 00:10:25.440
We want to get the left field
of a bounding box of a region.

00:10:25.540 --> 00:10:29.800
And so we just dereference the
region and access the field directly.

00:10:29.800 --> 00:10:31.790
But in Carbon you can
see what it becomes.

00:10:31.800 --> 00:10:36.100
You have to use the accessor
getRegionBounds and pass it a variable

00:10:36.110 --> 00:10:40.620
in which it's going to fill out
the rect with the value of the bounds.

00:10:40.960 --> 00:10:44.870
It also returns a pointer to your
variable just so you can then

00:10:44.880 --> 00:10:48.800
immediately start accessing it,
as you can see there.

00:10:48.800 --> 00:10:50.800
So there is some good news.

00:10:50.800 --> 00:10:51.640
I don't know why.

00:10:51.640 --> 00:10:53.550
I think I was tired
when I wrote this slide,

00:10:53.550 --> 00:10:54.800
but there's good news.

00:10:54.800 --> 00:10:56.730
Rects are not opaque.

00:10:56.850 --> 00:11:00.820
So I just can't even imagine the number
of compiler errors that we would be

00:11:00.860 --> 00:11:03.090
getting if we had made rects opaque.

00:11:03.240 --> 00:11:03.570
I know.

00:11:03.580 --> 00:11:03.990
All right.

00:11:04.170 --> 00:11:05.400
Universal proc pointers.

00:11:05.400 --> 00:11:06.690
Why do we still have them?

00:11:06.690 --> 00:11:10.890
Well, as you know,
they came into being when we started

00:11:10.890 --> 00:11:14.410
having two kind of runtime architectures,
PowerPC and 68K.

00:11:14.410 --> 00:11:16.490
And we still do with Mac OS X.

00:11:16.490 --> 00:11:20.840
We have CFM, which is familiar to all
of us with Mac OS 8 and 9.

00:11:21.000 --> 00:11:25.040
But when we brought in the
OS that Mac OS X is built on,

00:11:25.160 --> 00:11:27.360
Maco was its native runtime.

00:11:27.390 --> 00:11:30.550
And we still support those two runtimes.

00:11:30.550 --> 00:11:33.700
So universal proc pointers
are there to help us.

00:11:33.700 --> 00:11:37.330
But the generic routines,
new routine descriptor and dispose

00:11:37.330 --> 00:11:38.800
routine descriptor are gone.

00:11:38.810 --> 00:11:41.630
And you have to use specific
ones from the toolbox manager.

00:11:41.640 --> 00:11:42.800
So here's an example.

00:11:42.820 --> 00:11:45.930
As you can see in the top one,
we're using a new routine descriptor

00:11:45.930 --> 00:11:47.670
and dispose routine descriptor.

00:11:47.670 --> 00:11:50.330
But now, if you were to look in
the universal interfaces,

00:11:50.370 --> 00:11:53.440
you'd see these APIs,
new control action UPP and

00:11:53.440 --> 00:11:55.460
dispose control action UPP.

00:11:55.540 --> 00:12:05.080
That's an example of a a toolbox manager.

00:12:06.320 --> 00:12:09.750
So one important thing that
I wanted to be honest about is that

00:12:09.750 --> 00:12:14.120
CarbonDator does not necessarily
report these types of compiler errors.

00:12:14.120 --> 00:12:16.730
So I had one developer
come up to me and say,

00:12:16.800 --> 00:12:21.800
"CarbonDator said I only had to
change eight APIs." And I was like,

00:12:21.800 --> 00:12:25.370
"Oh." Because when he turned on the flag,
he of course started getting

00:12:25.370 --> 00:12:28.540
these other types of compiler
errors that are involved with

00:12:28.540 --> 00:12:30.480
carbonizing your application.

00:12:31.440 --> 00:12:35.080
So now we're going to kind of go down
the road that we've all been traveling to

00:12:35.080 --> 00:12:38.090
get a Mac OS 8 or 9 application on board.

00:12:38.380 --> 00:12:42.400
We're going to see that some of the
roads are closed and we have detours.

00:12:42.400 --> 00:12:45.700
And I'm just going to review
some of the highlights,

00:12:45.700 --> 00:12:50.380
ones that I have seen specifically
impact developers in the past year.

00:12:50.410 --> 00:12:53.550
Again, use your Carbon porting guide
for an in-depth coverage of

00:12:53.560 --> 00:12:57.390
pretty much all of the gotchas
that we know about at this time.

00:12:57.400 --> 00:13:01.410
The biggest one that I've seen hit
people is that the window manager

00:13:01.410 --> 00:13:03.400
port is no longer supported.

00:13:03.400 --> 00:13:06.400
So you cannot draw
globally to the screen.

00:13:06.400 --> 00:13:09.400
We do have some detours.

00:13:09.610 --> 00:13:13.390
For window dragging and resizing,
Carbon Events is supported.

00:13:13.400 --> 00:13:17.520
As Carbon Events sends your
window handler messages,

00:13:17.520 --> 00:13:20.490
you can go ahead and grab the event,
modify some parameters,

00:13:20.490 --> 00:13:22.400
and the system will
begin respecting those.

00:13:22.400 --> 00:13:26.390
So if you wanted to snap-drag the
window or do constrained resizing.

00:13:26.400 --> 00:13:28.400
Go ahead and use Carbon Events.

00:13:28.400 --> 00:13:33.400
For other types of specific drags,
the drag manager should meet your needs.

00:13:33.400 --> 00:13:35.650
We really do want you
to send us feedback,

00:13:35.650 --> 00:13:39.260
though, if your app's using the window
manager port in a way that we're

00:13:39.430 --> 00:13:41.400
not providing a workaround for.

00:13:41.400 --> 00:13:45.280
At this time, in our analysis of the way
that developers have been

00:13:45.370 --> 00:13:49.800
using the window manager port,
we don't see a compelling need to

00:13:49.880 --> 00:13:55.310
re-enable that type of user interface
capability or mechanism for you.

00:13:55.460 --> 00:13:59.530
So far, the cases that we have seen do
not fall within the Macintosh

00:13:59.530 --> 00:14:02.300
Human Interface Guidelines,
and there are an alternative

00:14:02.340 --> 00:14:03.390
to those cases that we've seen.

00:14:03.400 --> 00:14:08.390
So we're not going to be providing a
generic workaround for this mechanism.

00:14:08.400 --> 00:14:11.930
Again, if you want to give us feedback,
join that mailing list

00:14:11.930 --> 00:14:13.400
and just send it there.

00:14:15.290 --> 00:14:18.630
The Trap Manager:
So patching is completely unsupported

00:14:18.640 --> 00:14:21.040
within Carbon and Mac OS X.

00:14:21.160 --> 00:14:25.250
It works against stability
and it was 68k specific.

00:14:25.250 --> 00:14:29.890
So the new message is that
Carbon Events within an application

00:14:29.890 --> 00:14:33.450
is providing a great way to
modify the behavior of the system

00:14:33.780 --> 00:14:35.400
in a very sanctioned easy way.

00:14:36.000 --> 00:14:39.080
And for other things we're
providing hooks within the

00:14:39.090 --> 00:14:41.200
APIs that were not there before.

00:14:41.200 --> 00:14:46.260
So the message is that if you
were using patching for something,

00:14:46.440 --> 00:14:50.940
actually on the mailing list or to me,
please just send the highest level

00:14:50.940 --> 00:14:54.630
goal that you've been trying to
achieve with patching and we'll see

00:14:54.630 --> 00:14:58.000
if we can go ahead and incorporate
sanctioned official APIs within the

00:14:58.010 --> 00:15:00.200
OS that you can use to get that going.

00:15:00.200 --> 00:15:03.960
Because generic patching
is no longer supported.

00:15:04.950 --> 00:15:06.080
Help.

00:15:06.080 --> 00:15:10.140
Apple Guide Manager is unsupported
and Balloon Help is unsupported.

00:15:10.210 --> 00:15:13.500
So you may find these things just
automatically being respected

00:15:13.500 --> 00:15:16.900
on Mac OS 8 and 9 because those
technologies are still there,

00:15:16.900 --> 00:15:18.780
but on Mac OS X they're not.

00:15:18.870 --> 00:15:22.070
So the alternative is to use
Apple Help Viewer instead

00:15:22.130 --> 00:15:23.890
and to use Apple Help Tags.

00:15:23.900 --> 00:15:27.240
One thing to note is that
Apple Help Viewer was not brought

00:15:27.400 --> 00:15:31.450
back to Mac OS 8.1 in Carbon Live,
and so you have to launch

00:15:31.450 --> 00:15:33.440
your HTML help in a browser.

00:15:34.600 --> 00:15:35.760
Printing.

00:15:35.760 --> 00:15:38.000
There's a new printing
architecture in Carbon,

00:15:38.030 --> 00:15:43.310
but the APIs are so similar that
it's almost a one-for-one copy of

00:15:43.310 --> 00:15:46.590
a name change for your transition,
so it's really easy.

00:15:46.810 --> 00:15:47.780
Game Sprockets.

00:15:47.790 --> 00:15:49.600
I'm just going to touch on this.

00:15:49.600 --> 00:15:52.580
There are sessions about
gaming in this conference,

00:15:52.600 --> 00:15:56.600
but Draw Sprockets are going
to be supported post-DP4,

00:15:56.600 --> 00:15:59.600
so they're not there yet.

00:15:59.600 --> 00:16:00.890
Input Sprockets.

00:16:00.890 --> 00:16:05.270
On Mac OS X, the HID Manager is replacing
this and will be available to

00:16:05.340 --> 00:16:07.600
Carbon applications for APIs.

00:16:07.600 --> 00:16:13.560
You don't have to go down into the
Mac OS layer and access those APIs on X.

00:16:13.600 --> 00:16:14.680
Net Sprockets.

00:16:14.680 --> 00:16:18.210
We've open sourced,
so if you still want to continue using

00:16:18.210 --> 00:16:21.680
the functionality of Net Sprocket,
you can go get the source

00:16:21.680 --> 00:16:24.590
code and incorporate that
directly into your application.

00:16:24.600 --> 00:16:29.600
And on Mac OS X, Sound Sprocket is being
replaced by Core Audio.

00:16:29.600 --> 00:16:32.540
I think the Input Sprocket and
Sound Sprocket sessions are

00:16:32.540 --> 00:16:35.050
still coming within the week,
so be sure to attend

00:16:35.050 --> 00:16:36.590
those if this affects you.

00:16:38.160 --> 00:16:41.590
Networking Open transport
has changed slightly.

00:16:41.640 --> 00:16:44.240
So,
MAC TCP is not supported within Carbon.

00:16:44.240 --> 00:16:46.970
And open transport,
the basic change is that when you

00:16:46.970 --> 00:16:50.590
initialize open transport at the
beginning of your application,

00:16:50.590 --> 00:16:52.580
you now get back a context ref.

00:16:52.580 --> 00:16:54.740
And now you just start passing
that context ref as the first

00:16:54.840 --> 00:16:57.310
parameter to open transport APIs,
and that's pretty much

00:16:57.360 --> 00:16:58.430
the gist of the change.

00:16:58.460 --> 00:17:00.960
So, it's very easy.

00:17:00.960 --> 00:17:05.620
And Apple Talk APIs are not
available in the Carbon API set.

00:17:05.620 --> 00:17:10.700
So, if you are using those,
you should move over to open transport.

00:17:10.700 --> 00:17:12.260
The stacks are still there.

00:17:12.260 --> 00:17:16.620
The technology providing that
type of networking is still on 8,

00:17:16.620 --> 00:17:18.120
9, and 10.

00:17:18.160 --> 00:17:21.500
And if you wanted to go ahead and
access those AppleTalk APIs on 10,

00:17:21.500 --> 00:17:24.590
they are actually available in
the AppleTalk framework on 10.

00:17:24.710 --> 00:17:27.100
They're just not made available
through the Carbon API layer

00:17:27.100 --> 00:17:29.360
to Carbon applications.

00:17:30.230 --> 00:17:33.780
This has been said many times,
but threads in Carbon are going

00:17:33.780 --> 00:17:37.090
to remain cooperative if you've
been using thread manager threads.

00:17:37.140 --> 00:17:39.230
If you want preemptive threads,
go ahead and use the

00:17:39.320 --> 00:17:40.700
multi-processing APIs.

00:17:40.700 --> 00:17:43.810
And many people ask,
"What about pthreads?" So it's

00:17:43.850 --> 00:17:51.890
important to know that Carbon MP threads
are pretty much... Sorry,

00:17:51.890 --> 00:17:52.620
MP threads are pretty
much pthreads on Mac OS X.

00:17:52.620 --> 00:17:52.620
MP threads, pthreads.

00:17:52.890 --> 00:17:54.970
So, plugins and Carbon.

00:17:55.020 --> 00:17:59.360
Plugins must be Carbonized to work
with your Carbon application on 10.

00:17:59.360 --> 00:18:03.410
On Mac OS 8 and 9,
a Carbon application can load and run

00:18:03.420 --> 00:18:07.680
a non-Carbonized plugin because the
code fragments are prepared separately.

00:18:07.880 --> 00:18:10.790
But on 10, of course,
all software must be Carbonized.

00:18:10.800 --> 00:18:16.080
There are a lot of common memory
management architectures use zones for

00:18:16.080 --> 00:18:18.710
handling the memory of their plugins.

00:18:18.780 --> 00:18:21.760
On 8 and 9, that's still available,
so that'll work.

00:18:21.840 --> 00:18:26.270
But zones are not a concept on Mac OS X,
and so that type of memory architecture

00:18:26.270 --> 00:18:28.800
would not work for plugins on Mac OS X.

00:18:28.800 --> 00:18:32.010
CFPlugin and CFBundle are two
classes that we're providing

00:18:32.130 --> 00:18:35.130
within the core foundation,
a new set of APIs available

00:18:35.280 --> 00:18:36.790
to Carbon developers.

00:18:36.870 --> 00:18:40.800
And those sessions are coming right
after this and starting in the fall.

00:18:40.800 --> 00:18:45.800
These are actually talked about in the
advanced session of core foundation.

00:18:45.800 --> 00:18:49.560
So if this affects you,
I encourage you to go to those sessions.

00:18:50.770 --> 00:18:58.300
So, not all APIs that control stuff on
Mac OS 8 or 9 or Mac OS X can be brought

00:18:58.300 --> 00:19:00.820
up to the Carbon layer through one API.

00:19:00.820 --> 00:19:02.700
And that's mostly because
of the nature of the APIs.

00:19:02.700 --> 00:19:07.700
They just simply behave differently
on Mac OS 8 or 9 and Mac OS X.

00:19:07.700 --> 00:19:10.700
And accomplishing these purposes
is not the most pleasant

00:19:11.250 --> 00:19:14.050
thing for Carbon developers,
so before we go into it,

00:19:14.260 --> 00:19:17.700
we've provided you this pretty
picture of a fork in the road,

00:19:17.700 --> 00:19:18.700
because that's what we're about to do.

00:19:18.700 --> 00:19:19.700
We're about to fork in the road.

00:19:19.700 --> 00:19:23.700
So, let this picture in and get in a
good mood so we'll talk about this.

00:19:23.700 --> 00:19:26.700
As I said, not all APIs can be brought
up to Carbon applications.

00:19:26.700 --> 00:19:29.030
At that time,
you have to begin and branch

00:19:29.030 --> 00:19:30.700
and use OS-specific APIs.

00:19:30.700 --> 00:19:34.780
So, the basic way that you do that is
you factor all of your code that is

00:19:34.780 --> 00:19:38.800
Carbonized up into your application
and factor all of your code that

00:19:38.810 --> 00:19:42.690
will either run on 8 or 9 or on
10 down into shared libraries,

00:19:42.730 --> 00:19:48.700
and then you load those as a plug-in when
you're running on the relevant platform.

00:19:48.700 --> 00:19:51.700
The two biggest ones, well,
the first one is hardware interfaces.

00:19:51.700 --> 00:19:59.700
Hardware access is simply OS-specific,
and therefore it's not part of Carbon.

00:19:59.910 --> 00:20:02.900
The SCSI manager will
be partially supported,

00:20:02.900 --> 00:20:05.770
but that's mostly to support scanners.

00:20:05.990 --> 00:20:08.870
So for other hardware
devices on Mac OS 8 and 9,

00:20:08.870 --> 00:20:12.940
you'll continue using the Device Manager,
the Comms Toolbox, and on Mac OS X,

00:20:12.940 --> 00:20:15.360
you'll use I/O Kit.

00:20:16.630 --> 00:20:20.410
For shared memory on Mac OS 8 or 9,
you'll continue to use your

00:20:20.410 --> 00:20:22.530
current mechanism for however
you're doing shared memory.

00:20:22.540 --> 00:20:24.360
New pointers, this is a common one.

00:20:24.390 --> 00:20:28.060
Also,
attaching to a shared library that has

00:20:28.060 --> 00:20:31.460
a global data section is another one,
and that will work on 8 and 9,

00:20:31.460 --> 00:20:32.490
but not on 10.

00:20:32.620 --> 00:20:35.490
For Mac OS X,
you have to use the POSIX APIs.

00:20:35.490 --> 00:20:39.140
Again, these APIs could not be brought up
to the Carbon applications with one

00:20:39.140 --> 00:20:42.760
single "it works all the time" API,
because the nature of shared memory on

00:20:42.760 --> 00:20:45.490
the two systems is somewhat different.

00:20:45.500 --> 00:20:49.390
On Mac OS X,
you'll need to use the POSIX shared

00:20:49.390 --> 00:20:54.320
memory APIs and the semaphores
for controlling access to those.

00:20:55.820 --> 00:20:57.030
So enough with downsizing.

00:20:57.030 --> 00:20:58.660
I've been talking about
all these APIs that we've

00:20:58.660 --> 00:21:00.350
taken away or that modified.

00:21:00.440 --> 00:21:04.690
And the good news is that Carbon is also
bringing a lot of new technology to you.

00:21:04.740 --> 00:21:05.870
I'm just going to touch
on some highlights.

00:21:05.900 --> 00:21:08.350
There are sessions devoted
to each of these new things.

00:21:08.360 --> 00:21:10.300
Carbon Events was yesterday.

00:21:10.350 --> 00:21:14.110
It's an amazing technology
that dispatches events

00:21:14.190 --> 00:21:17.830
directly to your controls and
windows within an application.

00:21:17.930 --> 00:21:21.930
Completely takes care of a lot of
the default functionality that you've

00:21:21.930 --> 00:21:25.290
had to just cut and paste a lot of
code in just to get your app to keep

00:21:25.290 --> 00:21:26.970
doing what it already is doing today.

00:21:27.160 --> 00:21:31.340
That's all been put into the system
and default functionality is available.

00:21:31.340 --> 00:21:33.340
It's really easy to override.

00:21:33.340 --> 00:21:36.110
The system handlers,
you can just stack your own on top

00:21:36.110 --> 00:21:38.240
of it and override functionality.

00:21:38.240 --> 00:21:40.990
Or if you don't want to
override specific functionality,

00:21:41.090 --> 00:21:43.940
you just keep calling down
into the stack and the system

00:21:43.940 --> 00:21:45.860
handler will take care of that.

00:21:45.860 --> 00:21:48.680
And there are many more features
that make development easier.

00:21:48.680 --> 00:21:51.970
Timers are one that stand out as
one of the greatest things about it

00:21:52.080 --> 00:21:53.900
that make your development easier.

00:21:53.900 --> 00:21:56.720
for idle processing.

00:21:57.030 --> 00:21:59.840
An important thing to note about
Carbon Events is that it's not

00:21:59.840 --> 00:22:02.630
required to port your app to Carbon.

00:22:02.700 --> 00:22:04.560
So a lot of people are
concerned about that.

00:22:04.600 --> 00:22:08.710
You wouldn't have to do anything with
Carbon Events to get your application

00:22:08.710 --> 00:22:11.810
as it is over to Mac OS X or Carbon.

00:22:12.080 --> 00:22:15.810
However, a lot of the new technologies
that are being introduced,

00:22:15.810 --> 00:22:19.690
like Sheets and some printing stuff,
those are beginning to only be

00:22:19.690 --> 00:22:22.000
available through Carbon Events.

00:22:22.000 --> 00:22:23.990
But the good news is that
it's all gradual adoption.

00:22:24.000 --> 00:22:27.730
You can install one handler
and keep doing everything

00:22:27.800 --> 00:22:30.000
else via the Wait Next event.

00:22:30.040 --> 00:22:34.690
Ed Vos had gone into that in detail
yesterday in the Carbon Event sessions.

00:22:35.210 --> 00:22:39.860
Core Foundation is a set of
APIs that were factored down out of

00:22:40.010 --> 00:22:45.170
the frameworks that we had adopted
with Mac OS X's original OS from

00:22:45.170 --> 00:22:49.880
Next and now made available to
Carbon applications in its own framework.

00:22:49.880 --> 00:22:53.560
And it has a lot of services
that are good to use.

00:22:53.560 --> 00:22:56.530
Unicode strings for easier
localization is available.

00:22:56.810 --> 00:23:00.770
Collections, arrays, and dictionaries,
things we all re-implement or

00:23:00.780 --> 00:23:02.520
get from a framework today.

00:23:02.670 --> 00:23:05.940
Preferences management,
there's a class that helps you

00:23:05.940 --> 00:23:10.880
manage your preferences via
Carbon so that they just work on 8,

00:23:10.880 --> 00:23:12.340
9, or 10.

00:23:12.340 --> 00:23:16.460
XML parsing, URLs, and plugin support.

00:23:16.460 --> 00:23:19.930
And another class that I'm not
mentioning here is application packaging,

00:23:19.950 --> 00:23:22.020
the new folder hierarchy and layout.

00:23:22.140 --> 00:23:26.260
There's a class called CFBundle that
acts on your behalf as an abstraction

00:23:26.260 --> 00:23:29.440
layer to all of the resources
and locations of stuff that

00:23:29.440 --> 00:23:30.620
you've put in your application.

00:23:30.620 --> 00:23:36.870
And I pretty much see a bundle and
the preferences management class,

00:23:36.870 --> 00:23:40.770
I would go as far as to say
that those are kind of required

00:23:40.770 --> 00:23:43.660
concepts for a Carbon application.

00:23:43.660 --> 00:23:47.670
To work well in both environments,
you just simply need to use those

00:23:47.670 --> 00:23:51.220
or else when Apple goes to make
some change in the future and

00:23:51.340 --> 00:23:55.930
you're hard coding knowledge when we
provided these abstraction layers,

00:23:56.220 --> 00:23:57.460
you would break.

00:23:57.460 --> 00:24:00.600
So be sure to learn about those.

00:24:00.740 --> 00:24:04.300
And the data browser,
the long awaited data browser.

00:24:04.300 --> 00:24:06.910
This is a system control for list views.

00:24:07.020 --> 00:24:10.320
It supports the browser column
view and hierarchical list view.

00:24:10.510 --> 00:24:14.380
And it's used by many system
applications including the finder,

00:24:14.380 --> 00:24:17.910
I think file sharing, Sherlock,
and now services.

00:24:18.070 --> 00:24:20.820
So there's also a session about that.

00:24:20.820 --> 00:24:21.770
So I'm pointing to these.

00:24:21.880 --> 00:24:26.040
The core foundation, basics,
and advanced sessions are listed here.

00:24:26.040 --> 00:24:27.790
And also the data browser session.

00:24:27.820 --> 00:24:29.660
So if you're interested in
any of those technologies,

00:24:29.670 --> 00:24:30.580
please be sure to attend that.

00:24:30.580 --> 00:24:32.090
companies.

00:24:33.220 --> 00:24:39.350
So with Carbon, you used to link against
a bunch of stub libraries,

00:24:39.350 --> 00:24:43.730
but with Carbon, there's just one,
and it's Carbon Stub.

00:24:44.020 --> 00:24:48.800
It's no longer Interface Live,
Appearance Live, QuickTime Live,

00:24:48.840 --> 00:24:51.000
one stub library.

00:24:51.000 --> 00:24:53.000
On the CD that you received this week,

00:24:56.600 --> 00:24:59.490
there's a CarbonStub9 and a CarbonStub10.

00:24:59.500 --> 00:25:02.870
If any of you have been already
using the CarbonLib SDK,

00:25:03.210 --> 00:25:07.000
this is the replacement for
the CarbonLib stub library.

00:25:07.180 --> 00:25:10.500
And the reason that we did
this is because at this time,

00:25:10.550 --> 00:25:15.920
CarbonLib seeds are a
little behind on some APIs.

00:25:16.130 --> 00:25:18.500
The main one was CarbonEvents.

00:25:18.500 --> 00:25:24.000
So the APIs for CarbonEvents in
Mac OS X are a little further along.

00:25:24.090 --> 00:25:27.000
And a lot of developers were wanting
to get through it right away.

00:25:27.000 --> 00:25:30.940
So if you're going to use CarbonEvents,
you go ahead and use CarbonStub10,

00:25:31.010 --> 00:25:35.000
link against it,
and run your application on 10.

00:25:35.000 --> 00:25:38.000
If you run it on 9,
you would get link errors.

00:25:38.000 --> 00:25:40.000
But if you want to just keep
right now developing on 9,

00:25:40.000 --> 00:25:42.000
go ahead and use CarbonStub9.

00:25:42.000 --> 00:25:44.920
And you can go ahead and
use the CarbonEvents APIs.

00:25:45.030 --> 00:25:48.000
They're pretty much going to
just be name changes only.

00:25:48.000 --> 00:25:49.500
So let's talk about development options.

00:25:49.500 --> 00:25:54.000
You have a couple decisions facing you as
you proceed into all of this Carbon work.

00:25:54.000 --> 00:25:58.190
There are two run times that you'll
need to consider and think about

00:25:58.190 --> 00:26:01.000
tools and debugging techniques.

00:26:01.000 --> 00:26:04.000
So the first decision is CFM versus MacO.

00:26:04.000 --> 00:26:06.000
So there are pros and cons to each.

00:26:06.000 --> 00:26:11.300
For CFM, you will get to have a single
executable that will run on Mac OS X 8,

00:26:11.310 --> 00:26:13.000
9, and 10.

00:26:13.000 --> 00:26:17.330
On 8 and 9,
also plug-in architectures that

00:26:17.480 --> 00:26:20.350
exist today will probably just work.

00:26:21.050 --> 00:26:24.040
The drawback to CFM is that
you have limited access to

00:26:24.040 --> 00:26:28.520
Mac OS X native services,
such as the ones I already talked about,

00:26:28.520 --> 00:26:31.730
and that's when you have to begin
doing the factoring your shared

00:26:31.730 --> 00:26:33.850
libraries and loading them as plug-ins.

00:26:33.980 --> 00:26:37.730
For MacO,
if you were a Carbon MacO application

00:26:37.730 --> 00:26:41.810
running on Mac OS X,
the APIs available on 10 would just

00:26:41.950 --> 00:26:43.820
be available to your application.

00:26:43.960 --> 00:26:45.900
You don't have to do the
factor and load the plug-in.

00:26:45.960 --> 00:26:49.650
But you would be leaving Mac OS 8
and 9 behind because that runtime

00:26:49.740 --> 00:26:51.830
is not available on those platforms.

00:26:51.960 --> 00:26:55.770
So those are things to think about as you
go ahead and decide what you're going to

00:26:55.770 --> 00:26:59.900
do for your Carbon application delivery.

00:27:00.560 --> 00:27:20.300
Development Tools.

00:27:20.300 --> 00:27:20.300
Apple has just this week
announced our new project builder,

00:27:20.300 --> 00:27:20.300
and Interface Builder has been there.

00:27:20.300 --> 00:27:20.300
These are advanced tools for kind
of a next generation experience

00:27:20.300 --> 00:27:20.300
of developing your application.

00:27:20.300 --> 00:27:20.300
They do support Carbon terms.

00:27:20.400 --> 00:27:23.810
A lot of news is coming out
this week about what these

00:27:23.940 --> 00:27:26.120
tools can do and everything,
so I'm just going to touch on

00:27:26.120 --> 00:27:28.240
these and recommend that you go
to those sessions because they're

00:27:28.240 --> 00:27:30.550
just reporting on a lot of changes
and updates that they're making,

00:27:30.550 --> 00:27:34.290
speaking to future functionality
that they intend to support.

00:27:34.420 --> 00:27:37.390
And of course,
MetroWorks development tools,

00:27:37.560 --> 00:27:40.400
CodeWarrior and PowerPlant,
support Carbon.

00:27:40.400 --> 00:27:47.300
PowerPlant 2.1 and CodeWarrior Pro 6
is the release going on right now.

00:27:47.430 --> 00:27:53.290
CodeWarrior Pro 5 also supports
Carbon development pretty well.

00:27:53.530 --> 00:27:55.560
Let's see.

00:27:55.610 --> 00:27:58.640
So step one is usually you
make all your compiler changes,

00:27:58.720 --> 00:28:02.800
you modify APIs that you've changed,
and then you want to bring up the app.

00:28:02.800 --> 00:28:05.800
So usually developers go ahead
and try to start bringing it up

00:28:05.800 --> 00:28:08.360
on Mac OS 8 or 9 with CarbonLog.

00:28:08.730 --> 00:28:12.540
They get to stay on the one
platform and just keep fixing

00:28:12.650 --> 00:28:15.000
bugs there until it's going.

00:28:15.010 --> 00:28:20.910
And then they usually switch and
start bringing it over to Mac OS X.

00:28:21.170 --> 00:28:23.700
I'm starting to guess a number of things.

00:28:23.770 --> 00:28:26.310
In the kitchens,
when developers finish carbonizing

00:28:26.500 --> 00:28:30.530
their applications on 8 and 9,
they kind of get the deer with

00:28:30.540 --> 00:28:35.540
the headlights look when we say,
"Well, why don't you try to ring it

00:28:35.540 --> 00:28:37.340
up on 10?" Because they just,
I don't know.

00:28:37.670 --> 00:28:41.840
I would say that we regularly
experience about three to seven hiccups,

00:28:41.980 --> 00:28:45.300
that's what I call them,
when you try to bring them up on 10.

00:28:45.470 --> 00:28:48.350
Bugs that just didn't
show up on eight or nine.

00:28:48.440 --> 00:28:51.070
The good news is that,
as Bertrand and Scott alluded

00:28:51.130 --> 00:28:56.420
to earlier this week,
Carbon on Mac OS X is developer complete.

00:28:56.450 --> 00:28:59.450
And by that,
we mean it's a very stable environment,

00:28:59.470 --> 00:29:04.550
providing almost all functionality that
you need to carbonize your application.

00:29:04.640 --> 00:29:07.270
More and more now,
when developers are bringing

00:29:07.330 --> 00:29:11.360
their application up on 10,
the hiccups that I was talking about are

00:29:11.360 --> 00:29:16.080
actually in your code instead of ours,
which was not the case at the beginning.

00:29:16.200 --> 00:29:19.190
The most common one, of course,
is memory access.

00:29:19.280 --> 00:29:23.620
So you will not believe how many
writing tunnels have been existing in

00:29:23.620 --> 00:29:28.720
your applications on eight and nine
all this time until you run it on 10.

00:29:28.830 --> 00:29:32.980
So the other alternative is to
do all development on Mac OS X.

00:29:33.040 --> 00:29:36.670
On Project Builder and Interface Builder,
our native tools to 10,

00:29:36.670 --> 00:29:40.330
the performance tools
for Mac OS are excellent.

00:29:40.500 --> 00:29:46.260
And GDB, the native debugger on Mac OS X,
provides a UI through Project Builder

00:29:46.260 --> 00:29:48.830
for this debugging experience.

00:29:49.160 --> 00:29:51.400
So like I said,
the tools experience is changing a

00:29:51.440 --> 00:29:54.860
lot even this week as the developers
are making their announcements.

00:29:54.860 --> 00:29:57.900
In the past right now,
the common experience has been that when

00:29:57.900 --> 00:30:02.070
you bring your application over to 10,
you've had to do two machine debugging.

00:30:02.180 --> 00:30:04.120
So you have your eight and nine machine.

00:30:04.140 --> 00:30:06.290
You'd move your app over to 10.

00:30:06.510 --> 00:30:09.560
CodeWarrior's debugger would
talk over the network to GDB,

00:30:09.560 --> 00:30:11.920
and GDB would feedback information.

00:30:11.960 --> 00:30:15.740
And you'd pretty much have
your CodeWarrior experience.

00:30:15.850 --> 00:30:18.540
However, because of this,
a lot of times when

00:30:18.540 --> 00:30:21.620
the app crashed on 10,
CodeWarrior would not really be

00:30:21.620 --> 00:30:24.750
able to come through and report
the errors that you were seeing.

00:30:24.940 --> 00:30:27.220
And then you'd have to
move over to the 10 box,

00:30:27.260 --> 00:30:32.120
launch your application with GDB,
see where it crashed,

00:30:32.280 --> 00:30:33.680
and get a backtrace.

00:30:33.680 --> 00:30:37.060
And that's actually a very reliable
way to find out at least where

00:30:37.060 --> 00:30:38.920
your application is crashing.

00:30:38.920 --> 00:30:41.120
And then after that,
developers would usually then go

00:30:41.150 --> 00:30:44.710
back to the eight and nine machine
and step towards that place where

00:30:44.710 --> 00:30:49.530
they know their app was crashing so
that they could view the variables

00:30:49.530 --> 00:30:51.920
and parameters in CodeWarrior.

00:30:51.920 --> 00:30:54.310
Because GDB, again,
a lot of announcements

00:30:54.420 --> 00:30:56.910
are being made this week,
but at that time,

00:30:56.910 --> 00:31:00.560
GDB could not show you the values
of variables and parameters for a

00:31:00.560 --> 00:31:03.240
CFM application built with CodeWarrior.

00:31:03.240 --> 00:31:07.030
So that was kind of why
that process was existing.

00:31:07.080 --> 00:31:09.590
But again, a lot of this is changing.

00:31:10.120 --> 00:31:14.640
So, a bonus of getting your application
over to Mac OS X is that our

00:31:14.640 --> 00:31:18.000
experience from developers has been
that they're finding bugs faster.

00:31:18.000 --> 00:31:20.850
Like I said,
memory exceptions are the main one.

00:31:21.060 --> 00:31:22.850
I have a true story.

00:31:23.050 --> 00:31:27.690
A friend of mine works at a company,
and they had a contractor on

00:31:27.690 --> 00:31:31.000
board doing their Carbon work.

00:31:31.000 --> 00:31:34.400
And he kept saying to them,
"You should get your application

00:31:34.400 --> 00:31:38.000
on X as soon as possible." Well,
of course we should.

00:31:38.000 --> 00:31:40.000
But he knew what he was talking about.

00:31:40.000 --> 00:31:42.000
He knew the benefit that would come.

00:31:42.000 --> 00:31:46.380
So, after a while, they got it up on X,
and they kind of started realizing, "Wow,

00:31:46.380 --> 00:31:49.360
Mac OS X reveals a lot of stuff
a lot faster than Mac OS 8 or

00:31:49.360 --> 00:31:52.820
9 did." And they specifically
were looking for this one bug.

00:31:52.820 --> 00:31:54.000
It was a memory bug.

00:31:54.000 --> 00:31:56.120
And I think that they were anticipating,
you know how, like, after a while,

00:31:56.140 --> 00:31:59.340
you just start getting a feel
for how much time you know you're

00:31:59.340 --> 00:32:01.000
going to be spending on this bug?

00:32:01.190 --> 00:32:04.000
And their estimate was two hours.

00:32:04.000 --> 00:32:05.970
And, you know,
the contractor reminded them.

00:32:06.000 --> 00:32:09.000
"Try it on X." And I think
they found it in 15 minutes.

00:32:09.000 --> 00:32:11.840
So, again, you know,
getting your application on to

00:32:11.850 --> 00:32:16.000
X as soon as possible will start
a lot of time saving for this.

00:32:16.000 --> 00:32:18.570
And make your 8 and 9
code a lot more robust,

00:32:18.570 --> 00:32:18.990
too.

00:32:20.600 --> 00:32:24.230
So, the tool sessions this week,
the first one already occurred,

00:32:24.310 --> 00:32:26.220
so I'm just pointing
it out to let you know,

00:32:26.220 --> 00:32:30.220
and I hope you were able to make it
to that to hear the announcements.

00:32:30.220 --> 00:32:35.180
Right after this is a session called
Transitioning to the New Project Builder.

00:32:35.180 --> 00:32:37.080
Because you're in this room,
you're missing the first one,

00:32:37.120 --> 00:32:38.820
which is Introduction to Project Builder.

00:32:38.940 --> 00:32:42.700
My understanding is that this
session is actually targeted towards

00:32:42.700 --> 00:32:46.700
developers who are used to the
Code Warrior experience and want to

00:32:46.700 --> 00:32:49.070
understand Project Builder better.

00:32:49.140 --> 00:32:53.280
And then lastly, I want to stress enough,
session 196,

00:32:53.280 --> 00:32:57.600
Debugging Your Applications on Mac OS X,
do not miss this session.

00:32:57.600 --> 00:33:01.570
So, the Carbon Porting Guide is there,
Carbon Live is there,

00:33:01.570 --> 00:33:04.940
getting your application up
on 8 and 9 has been there.

00:33:04.940 --> 00:33:10.000
The part where we've most had to help
developers with kind of just hand-holding

00:33:10.080 --> 00:33:12.300
attention is getting their app up on 10.

00:33:12.300 --> 00:33:18.390
It's where they hit the hiccups and it's
where you need to learn new techniques.

00:33:18.400 --> 00:33:20.260
So, please don't miss that session.

00:33:22.900 --> 00:33:25.860
So like I said,
once you've got all that going,

00:33:25.940 --> 00:33:27.980
you're going to be running
your application on 8 and 9,

00:33:27.980 --> 00:33:30.330
and the fun part is
running it on Mac OS X.

00:33:30.450 --> 00:33:33.100
There are some runtime
issues to think about.

00:33:33.100 --> 00:33:40.050
The first one is that just because the
Carbon APIs are included all in one set,

00:33:40.060 --> 00:33:43.100
that doesn't mean that all of those
APIs and their implementation are

00:33:43.100 --> 00:33:45.500
available on every version of the OS.

00:33:45.670 --> 00:33:47.810
But that's how it is already today.

00:33:47.890 --> 00:33:52.670
So for example, if you were using
Nav Services on Mac OS 8.1,

00:33:52.670 --> 00:33:57.100
new APIs were introduced
to it in 1.1 on 8.5.

00:33:57.200 --> 00:34:00.580
But that doesn't mean all of a sudden
those APIs are then available on 8.1.

00:34:00.600 --> 00:34:03.580
So we're all used to doing a
Gestalt check to make sure that

00:34:03.580 --> 00:34:07.140
the latest version of a technology
is running indeed on the specific

00:34:07.140 --> 00:34:10.590
machine that you're running,
and that's true with Carbon.

00:34:10.600 --> 00:34:13.590
So all the APIs are kind of one big set.

00:34:13.590 --> 00:34:14.590
You still have to do
runtime checks on them.

00:34:14.600 --> 00:34:17.800
So you still have to do runtime checks
to make sure those APIs are available

00:34:17.800 --> 00:34:19.600
on the machine that you're running.

00:34:20.530 --> 00:34:24.400
This is kind of a picture,
Scott Forstall showed this on Monday.

00:34:24.400 --> 00:34:26.540
Carbon is a living, growing thing.

00:34:26.610 --> 00:34:29.330
And as you can see,
more and more APIs have become

00:34:29.470 --> 00:34:31.900
available with each release of the OS.

00:34:32.210 --> 00:34:33.190
And that is true.

00:34:33.440 --> 00:34:38.570
Carbon exposes those APIs to your
Carbon application when you're running

00:34:38.570 --> 00:34:41.830
on the OS that supports those APIs.

00:34:42.520 --> 00:34:44.460
And also,
the good news about Carbon is that we are

00:34:44.460 --> 00:34:51.870
indeed bringing back some technologies,
like Carbon Events, Core Foundation,

00:34:51.970 --> 00:34:55.040
Carbon Printing, Data Browser.

00:34:55.520 --> 00:34:59.640
Another issue to think about when you're
running a Carbon application is memory.

00:34:59.740 --> 00:35:02.790
So, one binary,
but running in two very different

00:35:03.030 --> 00:35:04.500
environments concerning memory.

00:35:04.500 --> 00:35:08.260
On Mac OS X, an application has
virtually unlimited memory.

00:35:08.260 --> 00:35:10.760
You should use this gestalt
to make sure of the memory

00:35:10.760 --> 00:35:12.260
environment you're running in.

00:35:12.450 --> 00:35:15.580
Be careful when using freemem.

00:35:15.580 --> 00:35:20.510
So, one common technique that developers
I know have used is they call freemem

00:35:20.510 --> 00:35:21.670
and allocate a number of different

00:35:22.100 --> 00:35:54.700
[Transcript missing]

00:35:55.430 --> 00:35:58.450
So, I was sleepy when I wrote
this slide and I was thinking,

00:35:58.470 --> 00:36:01.740
"I can't put that up today,
but be sleepy." So what does that mean?

00:36:01.830 --> 00:36:04.250
What that means is that
a Carbon application,

00:36:04.250 --> 00:36:08.280
its sleep time that's passed to wait
next event is fully supported now.

00:36:08.280 --> 00:36:13.290
It's not like you sleep but
get null events in the interim.

00:36:13.460 --> 00:36:17.290
That's just not the way
to idle time anymore.

00:36:17.300 --> 00:36:21.740
You should really use a custom
mechanism of your own if you're

00:36:21.740 --> 00:36:25.300
going to be using Carbon Lab 1.0.2,
3, or 4.

00:36:25.300 --> 00:36:32.250
Or Carbon Events Timers if you're
using Carbon Lab 1.1 or Mac OS X.

00:36:32.300 --> 00:36:38.170
That's the appropriate way to get
idle time for your application.

00:36:38.550 --> 00:36:42.300
So, some of you, because of this,
are going to be tempted to lower your

00:36:42.380 --> 00:36:46.640
sleep values down so that you can keep
getting time back on the processor.

00:36:46.710 --> 00:36:49.320
That is not recommended,
and we really do want you to

00:36:49.320 --> 00:36:50.840
switch to these other mechanisms.

00:36:50.900 --> 00:36:54.640
We're hoping that all of you will be able
to switch to passing the constant for the

00:36:54.640 --> 00:36:57.300
longest sleep time to wait next event.

00:36:57.360 --> 00:36:59.920
Because otherwise,
your application just keeps

00:36:59.920 --> 00:37:02.940
requesting time that it doesn't
necessarily always need.

00:37:02.980 --> 00:37:05.980
And in the new preemptive
environment on Mac OS X,

00:37:05.980 --> 00:37:11.330
and even on Mac OS X8 or 9,
we don't want to be seeing that happen.

00:37:11.570 --> 00:37:14.860
So I wanted to point out one
sample scenario that we had

00:37:14.860 --> 00:37:18.460
experienced that revealed the
nature of this change in Carbon.

00:37:18.780 --> 00:37:21.460
One developer,
when they launched their application,

00:37:21.460 --> 00:37:25.880
or when they pulled down their about box,
they started scrolling

00:37:25.880 --> 00:37:29.500
the credits and stuff,
and then they stopped.

00:37:29.500 --> 00:37:32.570
When they brought that app,
we were just also like, "Well,

00:37:32.700 --> 00:37:36.890
what's that?" But it turns out
that indeed this application was

00:37:36.890 --> 00:37:40.620
using or counting on null events
to do idle time processing to

00:37:40.620 --> 00:37:42.440
scroll the text in the about box.

00:37:42.500 --> 00:37:45.690
The interesting thing is that
if you started moving the mouse,

00:37:45.690 --> 00:37:49.660
the text just started scrolling normally,
but that's because the app started

00:37:49.660 --> 00:37:51.490
receiving mouse moved events.

00:37:51.500 --> 00:37:55.370
So that's kind of a symptom that
you should keep in mind when you're

00:37:55.370 --> 00:37:59.490
trying to look out for the nature
of this change with Carbon apps.

00:37:59.500 --> 00:38:04.300
We haven't confirmed this yet,
but another developer was complaining

00:38:04.310 --> 00:38:08.500
about slower processing of a
lot of data in the application,

00:38:08.500 --> 00:38:11.500
and we're suspecting that this
might also be the problem.

00:38:11.610 --> 00:38:16.170
If they're using or counting on null
events to get processing time for

00:38:16.170 --> 00:38:20.400
this huge calculation they're doing,
this would not work.

00:38:20.650 --> 00:38:23.300
That wouldn't work for
them that way anymore.

00:38:24.900 --> 00:38:27.290
So a couple sessions that
I wanted to point out,

00:38:27.600 --> 00:38:30.270
Carbon on Mac OS 8 or 9,
we'll talk about a few more

00:38:30.270 --> 00:38:34.300
runtime issues that your app will
experience when running on 8 and 9.

00:38:34.470 --> 00:38:39.010
And session 130, Carbon Level,
is a really important session to

00:38:39.020 --> 00:38:42.380
learn about some runtime issues that
will affect your Carbon application

00:38:42.410 --> 00:38:44.120
when running on Mac OS X.

00:38:44.180 --> 00:38:47.160
So I would really stress that
you make it to that session.

00:38:47.420 --> 00:38:52.160
And it's a Friday at 5:00 in this room.

00:38:52.220 --> 00:38:55.410
And I got a lot of flack
for scheduling at that time,

00:38:55.490 --> 00:38:57.530
so you all have to come,
or else I'm going to get it.

00:38:57.740 --> 00:38:58.620
So, no, I'm just kidding.

00:38:58.790 --> 00:39:03.810
But it's really critical information,
stuff that I'm not going into here

00:39:03.810 --> 00:39:06.560
because it's going to be in that session.

00:39:07.430 --> 00:39:09.510
So Carbon magic, what do I mean by that?

00:39:09.590 --> 00:39:10.560
And is it really true?

00:39:10.560 --> 00:39:13.610
Well, like I said,
in the kitchens and just

00:39:13.610 --> 00:39:15.740
talking to a lot of developers,
they kind of get this

00:39:15.740 --> 00:39:17.810
look and they're like,
let me get this straight.

00:39:18.070 --> 00:39:22.600
You're telling me that if I modify my
source code in some appropriate way,

00:39:22.660 --> 00:39:27.800
Apple's going to be able to swap out an
entire OS from underneath my application,

00:39:27.800 --> 00:39:31.210
swap in a completely new one,
and I'm just going to work?

00:39:31.320 --> 00:39:36.650
It sounds, well, magic is a strong word,
but it was the one that stuck out in

00:39:36.650 --> 00:39:38.070
my mind that this person had used.

00:39:38.170 --> 00:39:40.810
And the good news is
that with confidence,

00:39:40.810 --> 00:39:42.760
I get to say, yes, really.

00:39:42.760 --> 00:39:45.500
And I'm not just saying
this based on speculation.

00:39:45.500 --> 00:39:49.480
I'm saying it from experience
in some kitchens that we've had.

00:39:49.480 --> 00:39:52.310
And a lot of the demos that
you saw earlier this week,

00:39:52.370 --> 00:39:56.400
applications are just coming up on
10 after they do their Carbon work.

00:39:56.500 --> 00:40:00.070
Like I said, traditionally,
they're about three to seven hiccups.

00:40:00.180 --> 00:40:02.710
And it's really fun to
watch the developers' face,

00:40:02.760 --> 00:40:05.340
you know, because they're just, oh,
my gosh, you know, like here it comes up.

00:40:05.420 --> 00:40:08.900
on Mac OS X.

00:40:09.790 --> 00:40:12.300
When I first, yeah,
I started this job last summer.

00:40:12.300 --> 00:40:13.480
We had a kitchen in October.

00:40:13.480 --> 00:40:18.460
And I remember the first time, you know,
a major application came up on Mac OS X.

00:40:18.460 --> 00:40:21.900
And I was standing there, you know,
because I believed in this technology.

00:40:21.970 --> 00:40:24.140
We'd seen it working internally at Apple.

00:40:24.140 --> 00:40:27.380
But, you know, you bring in developers.

00:40:27.380 --> 00:40:28.800
And I don't know their source code.

00:40:28.800 --> 00:40:30.650
I don't know all the
stuff they've been doing.

00:40:30.660 --> 00:40:34.060
And the developer had
finished carbonizing.

00:40:34.060 --> 00:40:35.180
And we were bringing it over to X.

00:40:35.180 --> 00:40:36.440
And they had a couple of hiccups.

00:40:36.520 --> 00:40:38.600
And then it just started coming up on X.

00:40:38.700 --> 00:40:40.230
And I remember my reaction.

00:40:40.280 --> 00:40:41.240
I was like, oh, my gosh.

00:40:41.320 --> 00:40:43.740
You know, and then, of course,
I had to switch to Apple and go, oh,

00:40:43.750 --> 00:40:44.330
of course.

00:40:44.340 --> 00:40:47.170
Yeah, that, you know,
of course that would work.

00:40:47.280 --> 00:40:52.220
You know, but anyway,
over time with experience,

00:40:52.220 --> 00:40:55.100
I'd see developers with
that look on their face.

00:40:55.140 --> 00:40:59.140
The second time, I think I was like,
I'm pretty sure, you know,

00:40:59.140 --> 00:41:00.580
because I just had that experience.

00:41:00.580 --> 00:41:02.540
But now developers come in.

00:41:02.540 --> 00:41:06.560
And without any hesitation,
that happens just over

00:41:06.560 --> 00:41:08.650
and over and over again.

00:41:08.700 --> 00:41:11.850
And so it's magic.

00:41:11.860 --> 00:41:13.000
Well, it's true.

00:41:13.000 --> 00:41:13.950
It really works.

00:41:14.040 --> 00:41:16.940
So if you want to get more
information about Carbon,

00:41:16.940 --> 00:41:20.460
please be sure to see our website,
developer.apple.com.

00:41:20.460 --> 00:41:24.120
If you go to the Mac OS X section,
underneath that is a Carbon section.

00:41:24.120 --> 00:41:27.670
There's a pointer to the
SDK and documentation there.

00:41:27.680 --> 00:41:31.230
You can also get directly to the
documentation via TechPub's Carbon.

00:41:31.240 --> 00:41:34.680
Specifically, the Carbon porting guide,
which I've already mentioned,

00:41:34.680 --> 00:41:35.550
comes in the SDK.

00:41:35.640 --> 00:41:38.670
Another important resource to
keep in mind is the Carbon.

00:41:38.700 --> 00:41:41.570
That is all on the web.

00:41:41.670 --> 00:41:46.120
But that is a comprehensive
list of APIs in Carbon.

00:41:46.120 --> 00:41:50.820
APIs are still being
reviewed at this time.

00:41:50.820 --> 00:41:55.670
So if you go to the website and you see
an API and it's marked under evaluation,

00:41:55.680 --> 00:41:58.860
that means that we're still
going through API reviews,

00:41:58.860 --> 00:42:02.880
making sure that those APIs will
work in all the environments that

00:42:02.880 --> 00:42:08.460
a Carbon application will exist in,
like a modern OS, preemptive environment.

00:42:08.700 --> 00:42:09.690
Thread safety.

00:42:09.700 --> 00:42:14.070
And if so,
the API will be approved and you'll

00:42:14.070 --> 00:42:15.830
see that change to supported.

00:42:15.880 --> 00:42:19.160
But the thing to keep in mind
is that those APIs that are

00:42:19.160 --> 00:42:25.450
marked as still under evaluation,
we are not committing to support those.

00:42:25.460 --> 00:42:27.760
So you just need to know that if
you're going to go ahead and use those,

00:42:27.760 --> 00:42:31.530
that label could at some
point change to unsupported.

00:42:31.540 --> 00:42:34.400
But of course, we've been providing
workarounds and alternatives.

00:42:34.460 --> 00:42:38.230
I just wanted to be clear about
what that label means on the spec.

00:42:39.690 --> 00:42:43.100
Scott mentioned this on Monday,
but I just wanted to mention it again.

00:42:43.100 --> 00:42:45.780
If you go to this website,
developer.apple.com,

00:42:45.880 --> 00:42:48.490
go to the marketing section, programs,
Carbon.

00:42:48.530 --> 00:42:53.710
I think we have about five right now,
five consulting firms that are providing

00:42:53.710 --> 00:42:56.600
services to just port your application.

00:42:56.600 --> 00:43:01.640
So if resources are an issue,
and I know they are in this industry,

00:43:01.650 --> 00:43:05.050
and you need to get
your application ported,

00:43:05.050 --> 00:43:06.090
please be sure to visit this
website for those services.

00:43:06.660 --> 00:43:10.720
A couple other sessions that I wanted
to point you to are the High-Level

00:43:10.730 --> 00:43:13.850
Toolbox Carbon Enhancements 1 and 2.

00:43:14.320 --> 00:43:18.590
They're also going to go into the types
of changes that I was discussing today,

00:43:18.600 --> 00:43:22.590
but specific to the High-Level Toolbox,
so be sure to do those.

00:43:22.600 --> 00:43:24.820
I'm not going to guess
a percentage number,

00:43:24.820 --> 00:43:28.330
because I didn't think I had time,
but a very large percentage of

00:43:28.560 --> 00:43:32.340
the compiler errors and changes
that Carbon developers experience

00:43:32.340 --> 00:43:34.600
come from the High-Level Toolbox.

00:43:34.710 --> 00:43:38.840
So be sure to attend these sessions
because they contain critical information

00:43:38.970 --> 00:43:43.200
that you'll want to know as you proceed
with carbonizing your application.

00:43:43.660 --> 00:43:46.950
So this time we're going to move
into Q&A and I'd like to ask the

00:43:47.060 --> 00:43:49.100
panelists to come up on stage.