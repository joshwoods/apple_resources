WEBVTT

00:00:06.560 --> 00:00:09.620
I was asked to come up as the
technology manager for Mac OS X.

00:00:09.620 --> 00:00:15.780
My primary responsibility is actually
working with all the Core OS developers,

00:00:15.780 --> 00:00:18.020
including those doing
file system plug-ins,

00:00:18.120 --> 00:00:21.490
network extensions, drivers,
anything else in that area.

00:00:21.690 --> 00:00:23.480
Plus,
I also come over some additional areas.

00:00:23.500 --> 00:00:28.500
I was asked to come up here to
give a short two-minute talk.

00:00:28.830 --> 00:00:32.500
However, Brett, the main speaker,
gave me some conditions.

00:00:32.500 --> 00:00:36.500
I could not reuse my
Kentucky Fried Chicken Mach kernel joke.

00:00:36.500 --> 00:00:37.450
I couldn't do any magic tricks.

00:00:37.510 --> 00:00:41.990
I couldn't do any bad jokes
like the CoreOS Core OS.

00:00:41.990 --> 00:00:45.920
So I have another minute and a half.

00:00:47.290 --> 00:00:51.200
Now, I do actually want to stress that
I'm glad to see we actually have a

00:00:51.200 --> 00:00:53.440
fairly full room for this session.

00:00:53.600 --> 00:00:57.120
Apple views with Mac OS X the
importance of having a strong

00:00:57.120 --> 00:01:01.860
foundation for the core,
for Mac OS X having a strong foundation.

00:01:01.950 --> 00:01:05.790
As a result, we've spent the last, what,
three, four years now actually

00:01:05.790 --> 00:01:09.400
working at building up a good,
strong foundation.

00:01:09.470 --> 00:01:12.860
If you went to the Bertrand session,
you saw the one slide he had

00:01:12.860 --> 00:01:14.660
about the collapsing building.

00:01:14.740 --> 00:01:16.870
And if you know anything about
earthquakes and so forth,

00:01:16.990 --> 00:01:20.490
one of the major causes for
building collapses is actually

00:01:20.490 --> 00:01:22.490
a weak or poor foundation.

00:01:22.570 --> 00:01:25.020
We don't want our buildings collapsing.

00:01:25.260 --> 00:01:28.710
So as a result,
we're putting a strong foundation,

00:01:28.710 --> 00:01:30.380
but at the same time,
we want to make it flexible

00:01:30.380 --> 00:01:33.320
so that you can actually
enhance it with your products.

00:01:33.360 --> 00:01:35.710
If you notice this year,
we actually have several

00:01:35.720 --> 00:01:39.730
sessions dedicated to
developing down at the Core OS.

00:01:39.820 --> 00:01:42.310
Unlike last year,
we had like maybe some overview sessions,

00:01:42.470 --> 00:01:45.610
this year we have several sessions,
including several sessions

00:01:45.620 --> 00:01:47.340
dedicated to the I/O Kit.

00:01:47.410 --> 00:01:51.950
So we really believe in the importance
of you working down at that area.

00:01:52.220 --> 00:01:56.810
So to cover the Core OS and to give
you an overview of what's down there,

00:01:56.920 --> 00:01:59.100
what you can develop on,
and where you should attend

00:01:59.100 --> 00:02:02.840
the rest of the week,
I'd like to now introduce the director

00:02:02.840 --> 00:02:05.910
of the Core OS engineering team at Apple,
Brett Halle.

00:02:06.030 --> 00:02:07.390
Brett?

00:02:13.400 --> 00:02:17.940
I appreciate you being good this year.

00:02:18.210 --> 00:02:20.180
Good afternoon.

00:02:21.880 --> 00:02:24.300
So, let's start with what is Darwin?

00:02:24.300 --> 00:02:27.040
We've talked about the Core OS,
we've talked about Darwin.

00:02:27.060 --> 00:02:31.500
So I want to stress early
on here that Darwin and the

00:02:31.500 --> 00:02:34.620
Mac OS X Core OS are synonymous terms.

00:02:34.620 --> 00:02:38.520
The Darwin is the Core OS of Mac OS X.

00:02:38.550 --> 00:02:41.400
So throughout the sessions
that you'll hear this week,

00:02:41.400 --> 00:02:44.460
you'll hear these terms
used interchangeably.

00:02:44.460 --> 00:02:48.900
And I think it's important to note
that these are equivalent terms.

00:02:48.900 --> 00:02:52.880
You'll hear Darwin used usually
in reference to the fact

00:02:52.880 --> 00:02:54.440
that the OS is open sourced.

00:02:54.440 --> 00:02:56.920
You can grab the source
to the operating system.

00:02:56.960 --> 00:03:02.260
You can get the source today off
of the our open CVS repositories

00:03:02.260 --> 00:03:07.600
at www.apple.com/darwin and you can
download and access the source to the

00:03:07.670 --> 00:03:09.740
DP4 release that you've got today.

00:03:09.760 --> 00:03:11.750
So if you want to actually
see what's part of the OS,

00:03:11.750 --> 00:03:15.430
what it is that makes up the system,
it's there and available.

00:03:15.790 --> 00:03:18.880
So it's really important, again,
to stress that you will see

00:03:18.880 --> 00:03:21.330
these terms used interchangeably.

00:03:21.820 --> 00:03:24.540
So now that we know that,
how in the world do you

00:03:24.540 --> 00:03:26.020
describe what the core S is?

00:03:26.020 --> 00:03:30.450
I tried to explain to my mom,
mother-in-law, what an OS was.

00:03:30.500 --> 00:03:34.200
It's real easy to talk about
Aqua and the Finder and things.

00:03:34.250 --> 00:03:35.490
They're very visual things.

00:03:35.520 --> 00:03:37.360
But the OS isn't very visual.

00:03:37.360 --> 00:03:40.200
And in fact, if we're really,
really doing our job well,

00:03:40.200 --> 00:03:41.810
you really don't even know we're there.

00:03:41.820 --> 00:03:45.240
The whole point is that we're
supposed to make the system so stable,

00:03:45.240 --> 00:03:48.960
so robust, and just so cool that it
just does the right thing.

00:03:48.960 --> 00:03:51.390
But as a result of that, we're very,
very invisible.

00:03:51.400 --> 00:03:54.530
So I was scratching my head over
the past couple of weeks trying

00:03:54.530 --> 00:03:57.910
to describe what type of metaphors
you can use to describe an OS.

00:03:58.010 --> 00:03:59.480
And it's actually very difficult.

00:03:59.480 --> 00:04:01.490
Certainly, it's a strong foundation.

00:04:01.570 --> 00:04:04.740
It also provides plumbing for the system.

00:04:04.740 --> 00:04:09.220
It basically is responsible for all
that infrastructure stuff that you

00:04:09.280 --> 00:04:13.140
would expect as part of the system,
but you don't ever see.

00:04:13.140 --> 00:04:16.740
Most of these things in your normal
life you don't ever worry about or see,

00:04:16.740 --> 00:04:20.740
but it's really ultimately what makes
for a good building or a good system.

00:04:21.700 --> 00:04:22.830
A good environment.

00:04:23.320 --> 00:04:27.720
So what I do want to get into
though is what the technology

00:04:27.760 --> 00:04:29.140
is that makes up this system.

00:04:29.140 --> 00:04:31.790
We'll try and get away from the
metaphors a little bit and focus on

00:04:31.790 --> 00:04:33.730
exactly how this system is built.

00:04:33.880 --> 00:04:37.660
One thing that's very unusual and
interesting about the Core OS is

00:04:37.660 --> 00:04:40.960
that we've taken a very unique
approach to the architecture.

00:04:41.400 --> 00:04:46.430
Instead of just using kind of
one piece of code or one piece

00:04:46.430 --> 00:04:51.310
of technology that we developed,
we actually went out and gathered

00:04:51.770 --> 00:04:55.300
from multiple best of class
technologies in the industry.

00:04:55.780 --> 00:05:00.990
For example, we use Mach,
we use BSD cores,

00:05:01.050 --> 00:05:03.710
there's a number of other pieces
of technology that we've gone

00:05:03.800 --> 00:05:08.190
and actually gathered together to
build the Core operating system.

00:05:08.350 --> 00:05:10.240
It's also based on proven technology.

00:05:10.240 --> 00:05:15.400
A lot of this stuff has had literally
thousands of man years of investment

00:05:15.400 --> 00:05:17.300
in development and testing.

00:05:17.300 --> 00:05:19.270
So this isn't just stuff
we came up with overnight.

00:05:19.300 --> 00:05:24.300
There's been enormous amounts
of mileage on this technology.

00:05:24.300 --> 00:05:28.280
Things like BSD, of course,
runs the Yahoo websites,

00:05:28.380 --> 00:05:33.300
and they certainly take an
enormous amount of stress and hit.

00:05:33.300 --> 00:05:36.380
I think even more interesting
is there's an enormous amount of

00:05:36.480 --> 00:05:38.300
untapped potential in this core.

00:05:38.300 --> 00:05:42.300
Everybody has heard a lot about
all the excitement with the UI,

00:05:42.300 --> 00:05:44.300
with our application toolkits.

00:05:44.430 --> 00:05:47.810
And one of the things that we really
haven't stressed a lot is all that

00:05:47.810 --> 00:05:52.300
stuff that's under the covers,
that's down in the core of the system.

00:05:52.330 --> 00:05:55.190
And I think, frankly, this is where,
as we move forward for Mac OS X,

00:05:55.460 --> 00:06:00.970
where a lot of the untapped
potential exists for applications.

00:06:01.830 --> 00:06:04.700
So in terms of the services
that the Core OS provides,

00:06:04.890 --> 00:06:08.440
certainly it is responsible
for the preemption and memory

00:06:08.550 --> 00:06:10.840
protection model for the system.

00:06:10.870 --> 00:06:13.780
It actually provides
multiple address spaces.

00:06:13.880 --> 00:06:16.450
So each application that
runs on the system is in its

00:06:16.510 --> 00:06:17.780
own separate address space.

00:06:17.870 --> 00:06:20.160
So that if you have an app
that tends to go run wild,

00:06:20.220 --> 00:06:23.080
write all over memory,
it'll ultimately hit the edge.

00:06:23.190 --> 00:06:27.500
The kernel itself will actually trap
that condition and kill the application.

00:06:27.670 --> 00:06:31.350
You won't actually be in a situation
where your application can bring

00:06:31.350 --> 00:06:33.890
down other apps on the system.

00:06:35.570 --> 00:06:39.040
The Core OS supports the
application environments.

00:06:39.040 --> 00:06:43.280
Our key role in the system is to make
sure that the application environments,

00:06:43.280 --> 00:06:46.530
Carbon, Cocoa, and Classic,
run as efficiently and

00:06:46.530 --> 00:06:49.420
effectively as they can,
that we support ways for those

00:06:49.530 --> 00:06:53.500
environments to communicate with the
outside world and between themselves.

00:06:53.500 --> 00:06:58.900
Our job is to make sure those application
environments are just top-notch.

00:06:58.900 --> 00:07:00.820
The Core OS is also
processor independent.

00:07:00.960 --> 00:07:03.900
For those of you who were just
at the open source session,

00:07:03.900 --> 00:07:07.350
we demoed the Darwin,
the open source component

00:07:07.460 --> 00:07:12.200
that's available out on the net,
actually running on Intel.

00:07:12.200 --> 00:07:14.600
Now,
this is not the Core OS for Mac OS X,

00:07:14.600 --> 00:07:17.160
not all of Mac OS X,
but just the Darwin piece,

00:07:17.170 --> 00:07:21.520
the open source piece of Mac OS X is
actually up and running on Intel.

00:07:21.520 --> 00:07:23.380
We've done that,
put some effort into that to actually

00:07:23.380 --> 00:07:29.100
make sure that our OS architecture is
as flexible and as well-designed as

00:07:29.100 --> 00:07:31.500
we can because we want to make sure
that the OS is as flexible as possible.

00:07:32.560 --> 00:07:33.270
The Core OS is a very important
component of the future,

00:07:33.270 --> 00:07:36.500
and as the future progresses and
as processor technologies evolve,

00:07:36.500 --> 00:07:39.170
that we have a very
flexible architecture.

00:07:39.430 --> 00:07:40.530
It's also high performance.

00:07:40.600 --> 00:07:42.650
That's the marketing term they
insisted I put that in there,

00:07:42.660 --> 00:07:45.320
but it really is important
that we consider performance

00:07:45.390 --> 00:07:48.300
a very key part of the OS,
and we'll talk a bit more about

00:07:48.300 --> 00:07:51.200
that in terms of how we actually
support that in the system.

00:07:51.200 --> 00:07:54.090
Flexibility is also key.

00:07:54.090 --> 00:07:57.590
Because we support multiple
application environments,

00:07:57.590 --> 00:08:01.130
we deal with things such as
processor independence and an

00:08:01.130 --> 00:08:04.960
unknown quantity of new hardware
and things that come into play,

00:08:04.960 --> 00:08:08.390
flexibility as part of the
architecture is critical.

00:08:08.770 --> 00:08:11.340
And you'll find in a number of
the subsystems that that plays

00:08:11.450 --> 00:08:14.100
a very key role in how we've
approached certain problems.

00:08:14.200 --> 00:08:16.460
And of course, scalable.

00:08:16.490 --> 00:08:21.190
This same core that we use for our client
operating system is the core that we

00:08:21.300 --> 00:08:23.900
use for our server operating system.

00:08:24.020 --> 00:08:27.220
So it is pretty critical that we
have some scalability potential in

00:08:27.290 --> 00:08:29.080
the technology that exists here.

00:08:29.210 --> 00:08:31.820
Of those of you who have used
the Mac OS X server product,

00:08:32.160 --> 00:08:34.070
which is based on a
slightly older code base,

00:08:34.210 --> 00:08:36.760
but we'll be syncing up
in as we move forward,

00:08:36.760 --> 00:08:40.160
that, you know,
we perform incredibly well for things

00:08:40.160 --> 00:08:44.280
like as a web server and for stream,
as a quick time streaming server.

00:08:44.300 --> 00:08:47.340
I mean,
it's a scalability in the technology

00:08:47.340 --> 00:08:52.290
such as networking and file systems
and I/O that really make that work.

00:08:52.740 --> 00:08:54.710
And of course,
I think it's really important to know,

00:08:54.720 --> 00:08:57.460
because we're an OS,
that buzzword compliancy is

00:08:57.460 --> 00:09:00.080
a real critical part of it,
certainly if in networking.

00:09:00.120 --> 00:09:03.700
So you'll hear a lot of these today.

00:09:03.700 --> 00:09:07.600
So to look at the Core OS kind of at the
grand perspective in the architecture,

00:09:07.600 --> 00:09:10.660
you'll see,
of course I think it's kind of

00:09:10.770 --> 00:09:16.400
the proper scale that has been
applied here in terms of importance,

00:09:16.490 --> 00:09:19.880
that where we sit in the system
is below the core services.

00:09:19.880 --> 00:09:25.190
And the core services are
things such as Core Foundation,

00:09:25.190 --> 00:09:31.620
Quartz, all the services necessary to
support the graphical user interface.

00:09:31.620 --> 00:09:35.240
The application services themselves that
support Classic and Carbon and Cocoa,

00:09:35.240 --> 00:09:36.600
those are all above us.

00:09:36.600 --> 00:09:40.100
We have a very layered
system for Mac OS X,

00:09:40.100 --> 00:09:42.370
and I think that's pretty important
in terms of how you look at this.

00:09:42.460 --> 00:09:45.660
This is not just a random
collection of shared libraries.

00:09:45.660 --> 00:09:49.600
This actually follows more of
the conventional onion skin,

00:09:49.680 --> 00:09:49.680
if you will, model.

00:09:49.720 --> 00:09:56.570
Within Darwin or the Core OS,
there's a number of key technologies.

00:09:56.670 --> 00:10:01.620
The Mach microkernel, I/O Kit,
and the drivers that are part of that.

00:10:01.620 --> 00:10:05.660
The BSD kernel,
our file system support networking,

00:10:05.660 --> 00:10:07.040
including Apple Talk and IP.

00:10:07.040 --> 00:10:10.030
And we'll go into each
of these in some detail.

00:10:10.420 --> 00:10:13.060
First, let's talk a little bit about
the Mac microkernel and how

00:10:13.060 --> 00:10:15.900
it plays into the system.

00:10:15.900 --> 00:10:19.580
One needs to consider
Mac really as an OS foundation.

00:10:19.580 --> 00:10:22.770
It's responsible,
its role in the system is to manage

00:10:22.770 --> 00:10:25.540
the processor and the memory resources.

00:10:25.540 --> 00:10:30.000
It deals with scheduling, handles all the
preemptiveness in the system.

00:10:30.000 --> 00:10:32.940
It deals with the
threading of the system.

00:10:32.940 --> 00:10:36.610
I think it's very important
to note that for Mac,

00:10:36.780 --> 00:10:41.000
the threading granularity
is done at the thread level.

00:10:41.000 --> 00:10:43.550
This is particularly important
because as you write applications

00:10:43.630 --> 00:10:46.450
that are multi-threaded,
the threading services and the

00:10:46.550 --> 00:10:50.020
scheduling is handled by the
current microkernel itself.

00:10:50.020 --> 00:10:53.420
It also is responsible for memory
protection and memory management,

00:10:53.420 --> 00:10:57.720
including handling things
like backing store for VM.

00:10:57.720 --> 00:11:01.020
All of that is managed by Mac.

00:11:01.020 --> 00:11:03.830
One other aspect about processor
scheduling that I think is

00:11:03.830 --> 00:11:08.500
important to mention for Mac,
it's very critical that we've considered.

00:11:08.620 --> 00:11:11.970
From an architectural standpoint,
being able to deal with

00:11:11.970 --> 00:11:13.870
multiple processors as well.

00:11:13.940 --> 00:11:16.470
Mac is responsible for,
on a thread by thread basis,

00:11:16.470 --> 00:11:20.630
being able to schedule threads
across multiple processors.

00:11:21.960 --> 00:11:24.870
Mach is also,
because of the level that exists at,

00:11:24.960 --> 00:11:28.530
the way of communicating between
address spaces or between

00:11:28.940 --> 00:11:31.960
tasks is through IPC or RPC.

00:11:32.050 --> 00:11:34.890
And this is a very key part
of Mock's architecture.

00:11:34.980 --> 00:11:36.910
And if you get into
more detail around Mach,

00:11:36.910 --> 00:11:39.190
you'll see what a critical
role the fact that it's a

00:11:39.190 --> 00:11:40.910
message-based architecture is.

00:11:41.020 --> 00:11:43.770
Mach is policy neutral.

00:11:43.770 --> 00:11:45.540
I think it's particularly
important to note.

00:11:45.900 --> 00:11:48.160
Down at that level,
all it's really doing is managing

00:11:48.160 --> 00:11:49.290
the processor and memory.

00:11:49.290 --> 00:11:52.020
Beyond that, it doesn't worry about I/O,
it doesn't worry about users,

00:11:52.020 --> 00:11:54.020
it doesn't know anything
about file systems.

00:11:54.020 --> 00:11:57.500
Basically, it doesn't provide all those
high-level OS services.

00:11:57.500 --> 00:12:01.020
Its role in the system is just to
control the processor and memory.

00:12:01.020 --> 00:12:04.870
For Mac OS X,
the technology we used for Mach was

00:12:04.870 --> 00:12:08.990
basically Mach 3.0 plus a bunch of stuff.

00:12:09.050 --> 00:12:11.020
We based it on work that
was done in the past.

00:12:11.020 --> 00:12:15.020
We've done a lot of work on
the OSF research institute.

00:12:15.020 --> 00:12:18.540
And in fact, we did some investing,
have been investing in the research

00:12:18.540 --> 00:12:21.480
institute for a number of years,
even a couple of years before Next was

00:12:21.480 --> 00:12:24.020
acquired for evolving the Mach 3.0 work.

00:12:24.270 --> 00:12:27.520
Plus, obviously, in the past few years,
we've done quite a bit of

00:12:27.520 --> 00:12:29.020
work on this ourselves.

00:12:29.020 --> 00:12:32.090
That, as I mentioned,
inter-task communication

00:12:32.140 --> 00:12:34.020
is done through messaging.

00:12:34.020 --> 00:12:38.760
And you'll find that as part of Mach,
there's this untyped IPC and RPC model

00:12:38.760 --> 00:12:40.730
that is critical to its design.

00:12:41.720 --> 00:12:47.020
Architectural support for SMP in
real-time is another key feature of 3.0.

00:12:47.020 --> 00:12:52.020
SMP is something that was really
designed into Mach from day one.

00:12:52.020 --> 00:12:54.580
And it's something that we've
really made sure that we've

00:12:54.790 --> 00:12:56.020
continued to move forward.

00:12:56.090 --> 00:12:58.150
And you'll see, as I mentioned,
that scheduling is done on

00:12:58.150 --> 00:13:00.020
thread-by-thread basis across processors.

00:13:00.020 --> 00:13:04.990
In addition, real-time is a serious
consideration for us.

00:13:05.020 --> 00:13:08.120
There's a lot of work
yet to be done here,

00:13:08.130 --> 00:13:09.020
because real-time,
as it's been done for Mach 3.0,

00:13:09.300 --> 00:13:12.020
from the Research Institute in
CMU and others,

00:13:12.020 --> 00:13:16.020
has been focused mostly towards things
like weapon systems and stuff like that.

00:13:16.020 --> 00:13:20.020
Since we aren't really considering
using Mac OS X for nuclear deployment,

00:13:20.020 --> 00:13:24.290
our focus is very much more on how
we can take some of that real-time

00:13:24.290 --> 00:13:28.010
technology and evolve it towards
multimedia and other real-time needs,

00:13:28.010 --> 00:13:30.020
audio, things like that.

00:13:30.020 --> 00:13:33.610
So, I think that's the first
thing that we're going to do.

00:13:33.790 --> 00:13:37.760
The pager and the mechanisms for
dealing with VM are also part of Mach.

00:13:37.900 --> 00:13:40.660
So the external pager is
another key feature of 3.0,

00:13:40.660 --> 00:13:43.630
as well as a strong modular architecture.

00:13:43.700 --> 00:13:49.690
For those of you who have followed Mach,
Mach 3.0 was originally designed

00:13:49.690 --> 00:13:52.770
in the research community
to be a true microkernel,

00:13:52.840 --> 00:13:55.990
in the sense that it was all
that was responsible down at

00:13:55.990 --> 00:13:57.980
the kernel level and everything,
including all the rest

00:13:58.090 --> 00:13:59.700
of the OS services,
were up in user space.

00:13:59.700 --> 00:14:03.700
That is not a model that
we've used for Mac OS X.

00:14:03.700 --> 00:14:06.590
It is not a very efficient
way of approaching things.

00:14:06.830 --> 00:14:09.120
But that modularity that's been
designed into Mach is something

00:14:09.120 --> 00:14:10.700
that we've really tried to leverage.

00:14:10.700 --> 00:14:15.260
So you'll see that for Mac OS X,
that the OS architecture and its

00:14:15.260 --> 00:14:20.630
use of Mach more closely matches a
monolithic architecture with the way

00:14:20.630 --> 00:14:24.530
BSD and Mach and iOS system and the
file systems all tightly integrate with

00:14:24.530 --> 00:14:26.700
Mach in the same kernel address space.

00:14:26.700 --> 00:14:28.700
We do that for efficiency.

00:14:28.700 --> 00:14:31.690
And it's a very key part of our design.

00:14:31.700 --> 00:14:35.960
But we have kept the modular architecture
of Mach such that the interfaces

00:14:36.070 --> 00:14:38.690
between those components are very clean.

00:14:39.620 --> 00:14:42.450
If you're interested in finding
more about the Mac kernel,

00:14:42.450 --> 00:14:45.120
there's a session on Thursday bright
and early in the morning

00:14:45.520 --> 00:14:49.800
over in the Civic Center,
and I encourage you to go to that.

00:14:50.780 --> 00:14:54.530
So, one other aspect that I wanted
to get into here is that we've

00:14:54.530 --> 00:14:58.050
really factored performance as a
key part of the OS architecture.

00:14:58.300 --> 00:15:00.740
You'll see as you look into
the Darwin source code,

00:15:00.810 --> 00:15:03.240
or as you start playing
with some of the tools,

00:15:03.250 --> 00:15:05.700
that we've actually plumbed
the OS for performance.

00:15:05.700 --> 00:15:09.730
There's lots of counters and tools and
entry points specifically for gathering

00:15:09.790 --> 00:15:11.700
performance data and information.

00:15:11.700 --> 00:15:15.150
And this is particularly helpful for
us in terms of how we tune the system,

00:15:15.390 --> 00:15:18.390
how we evolve it, and probably, I think,
more importantly, is how you,

00:15:18.390 --> 00:15:20.540
the developer,
can get involved in making sure

00:15:20.540 --> 00:15:23.580
that your apps are using the OS in
the most efficient way possible.

00:15:23.600 --> 00:15:26.720
There are some really cool
tools available on the system,

00:15:26.790 --> 00:15:28.650
and they're shipped with DP4.

00:15:28.780 --> 00:15:33.820
And to show us a couple of these tools,
I'd like Joe Sokol,

00:15:33.910 --> 00:15:36.380
who's the manager of the
Core OS Performance Group,

00:15:36.380 --> 00:15:38.950
to join us and show us some cool stuff.

00:15:46.300 --> 00:15:47.140
Okay, am I live?

00:15:47.140 --> 00:15:47.940
Yep.

00:15:47.990 --> 00:15:49.040
All right.

00:15:49.040 --> 00:15:51.610
Yeah, so could we put the two screens up?

00:15:52.530 --> 00:15:57.060
Anyway, so I'm going to show you a couple
of tools that are not real fancy.

00:15:57.060 --> 00:15:59.040
They're command-line-based tools.

00:15:59.040 --> 00:16:03.620
We chose to do them this way so
that they'd have as little impact

00:16:03.620 --> 00:16:07.330
on the system as possible while
you're actually using the tool

00:16:07.330 --> 00:16:08.930
to kind of view what's going on.

00:16:08.940 --> 00:16:14.450
And they're used for the first
one we're going to look at is top.

00:16:14.670 --> 00:16:17.100
And, you know,
it's kind of a traditional Unix tool for

00:16:17.280 --> 00:16:19.360
looking at what's going on in the system.

00:16:20.100 --> 00:16:22.780
And what I thought I'd do is
just show you three different

00:16:22.780 --> 00:16:25.620
ways you could use this tool,
at least the one that we've done,

00:16:25.620 --> 00:16:29.520
to get some insight as to what's
going on in the system and also to

00:16:29.520 --> 00:16:35.970
help you track things like potential
memory leaks or other resource leaks.

00:16:36.080 --> 00:16:41.460
So just to get started here,
I'm going to show you how to

00:16:41.460 --> 00:16:47.870
use the tool to actually capture
a picture of all of the...

00:16:48.730 --> 00:16:53.500
resource consumption, system calls,
things like that that are used

00:16:53.500 --> 00:16:55.740
during the launch of an application.

00:16:55.850 --> 00:17:01.060
It's kind of an interesting view into
what goes on kind of system-wide,

00:17:01.060 --> 00:17:05.090
right,
outside of your own application space.

00:17:05.320 --> 00:17:08.750
So this particular option for top

00:17:10.900 --> 00:17:14.090
It's just the minus A flag,
and basically it's going to accumulate

00:17:14.090 --> 00:17:15.260
all these different counters.

00:17:15.260 --> 00:17:18.580
So there are counters
in here for page faults,

00:17:18.680 --> 00:17:22.330
page ends, BSD system calls,
Mach system calls,

00:17:22.400 --> 00:17:28.080
pretty much context switches,
pretty good view as to what's going on,

00:17:28.090 --> 00:17:32.500
the amount of CPU time,
percentage of CPU time,

00:17:32.500 --> 00:17:38.050
networking counters,
and disk counters for both numbers

00:17:38.110 --> 00:17:41.970
of IOs and the total amount of
data being read off the disk.

00:17:42.100 --> 00:17:43.120
Joe, I hate to interrupt.

00:17:43.120 --> 00:17:46.460
Just for clarity,
you might talk about this.

00:17:46.460 --> 00:17:46.600
Okay, sure.

00:17:46.600 --> 00:17:47.130
What's on your screen?

00:17:47.220 --> 00:17:49.280
So this guy over here,
the screen over here on your right,

00:17:49.280 --> 00:17:51.770
the audience right,
is where the particular

00:17:51.890 --> 00:17:55.650
tool is actually running,
and you can see all the different

00:17:55.810 --> 00:17:59.190
columns there that we're about to hit.

00:17:59.290 --> 00:18:03.790
And then over here is just going to be on
your left will be the actual application.

00:18:03.800 --> 00:18:04.560
Point size on the terminal.

00:18:04.560 --> 00:18:04.810
Excuse me?

00:18:04.820 --> 00:18:06.660
Pump up the point size on the terminal,
please.

00:18:07.910 --> 00:18:12.300
It's not going to fit width-wise,
so sorry.

00:18:12.300 --> 00:18:17.490
So over here we're going to
just launch the TextEdit app.

00:18:19.890 --> 00:18:22.680
As that launched,
we just captured a whole

00:18:22.680 --> 00:18:24.430
bunch of information.

00:18:24.430 --> 00:18:29.550
Then you could stop at this point
and basically go take a look

00:18:29.610 --> 00:18:31.360
at what you did to the system.

00:18:31.360 --> 00:18:33.200
Let's say it was your app
that you were working on.

00:18:33.200 --> 00:18:36.060
You could see not only
what your app did directly,

00:18:36.180 --> 00:18:40.560
but indirectly it may cause some of
the other system services to fire,

00:18:40.560 --> 00:18:47.800
like the Window Manager or Pasteboard
Server or some other service that

00:18:47.800 --> 00:18:51.150
is done as a separate process.

00:18:51.630 --> 00:18:56.780
Then another way to use the tool, OK,

00:18:56.820 --> 00:19:01.300
with the minus D option basically
gives you similar sets of counters,

00:19:01.300 --> 00:19:06.580
but this is now done as a
delta for each sample period.

00:19:06.580 --> 00:19:10.900
So this is a good way to see what's
going on in the system when you just

00:19:11.260 --> 00:19:16.380
grab a window and just kind of shove
it around so that you can discover

00:19:16.380 --> 00:19:20.780
what system services become active
when you're doing something like that,

00:19:20.840 --> 00:19:25.860
or if you're to go up to the menu
bar and sort of drag across there,

00:19:25.980 --> 00:19:29.210
you can see that mainly it's
going to be the app and the window

00:19:29.210 --> 00:19:32.080
manager doing something like this,
which is kind of what you'd expect.

00:19:32.140 --> 00:19:35.580
There's also a little bit of networking
traffic that's showing up there

00:19:35.580 --> 00:19:40.080
because we're actually telemedded
in remotely to the other systems,

00:19:40.080 --> 00:19:43.290
so again,
to minimize the kind of intrusion of

00:19:43.300 --> 00:19:46.810
the tool on the system that you're
actually trying to take a look at.

00:19:48.760 --> 00:19:54.200
These first two uses of the tool
are really more toward finding

00:19:54.200 --> 00:19:56.600
out performance-related things.

00:19:56.600 --> 00:19:59.480
How busy is the system when
you're launching the app?

00:19:59.670 --> 00:20:02.590
What type of resources are you using?

00:20:02.600 --> 00:20:05.600
What other services are
you getting involved?

00:20:07.600 --> 00:20:11.410
These are more hints for you to be
able to go back and play with and

00:20:11.410 --> 00:20:17.570
use these tools in terms of gaining
visibility into what's going on.

00:20:17.600 --> 00:20:24.410
The final interesting way to use
Top is as a method for watching for

00:20:24.410 --> 00:20:28.530
memory leaks and also for port leaks.

00:20:28.600 --> 00:20:35.550
Ports are the basic mechanism and
naming convention in the Mac OS X.

00:20:35.720 --> 00:20:37.780
The most common use of the
framework is to use the for

00:20:37.780 --> 00:20:39.600
establishing your IPCs and RPCs.

00:20:39.600 --> 00:20:43.600
Most of you probably won't ever
really program to that level directly,

00:20:43.600 --> 00:20:47.570
but an awful lot of the services
that you use in these frameworks

00:20:47.710 --> 00:20:52.600
indirectly cause ports to be allocated,
messages to be sent around.

00:20:52.600 --> 00:20:59.930
If you're forgetting to release those
particular uses of the framework,

00:20:59.930 --> 00:21:05.600
particular functions or whatever that
require you to close things down,

00:21:05.600 --> 00:21:12.600
this particular view of Top can help you
see that something wrong is going on.

00:21:12.940 --> 00:21:17.750
Over here, let's start this over.

00:21:20.690 --> 00:21:25.640
And again,
we'll just go ahead and launch that app.

00:21:25.720 --> 00:21:29.020
And you can see that there's a
delta columns that are showing

00:21:29.020 --> 00:21:30.120
up like on the port usage.

00:21:30.140 --> 00:21:36.600
So the window manager picked up 11 ports
due to the launch of this particular app.

00:21:36.780 --> 00:21:40.740
Some of the other guys,
TextEdit itself as it was launching,

00:21:40.840 --> 00:21:44.640
once we actually captured and
actually started to account

00:21:44.800 --> 00:21:49.760
for the stuff that's going on,
picked up an additional 37 ports.

00:21:49.860 --> 00:21:53.340
Over on the right-hand side,
you have all of the information

00:21:53.380 --> 00:21:55.120
about your memory usage.

00:21:55.120 --> 00:22:00.470
So there's--again, distinguish between--

00:22:00.710 --> 00:22:04.140
The virtual size of your applications
and the actual resident size,

00:22:04.140 --> 00:22:05.900
which is an important concept.

00:22:05.920 --> 00:22:12.440
We provide a fair number of
different views into that.

00:22:12.550 --> 00:22:15.350
The interesting one,
all the way over to the right,

00:22:15.400 --> 00:22:19.750
is again a delta, which if that were to
continue to grow over time,

00:22:19.750 --> 00:22:22.590
might be a good indication that
you have a memory leak that

00:22:22.590 --> 00:22:24.790
you'd want to do something about.

00:22:24.910 --> 00:22:26.840
When we quit the app,
then we should see most

00:22:26.950 --> 00:22:28.340
of these things disappear.

00:22:28.340 --> 00:22:31.970
Window Manager went back to
his baseline in terms of the

00:22:31.970 --> 00:22:33.720
number of ports that he's using.

00:22:33.910 --> 00:22:37.900
So when we quit that app,
everything nicely released.

00:22:38.160 --> 00:22:46.400
Looks like the dock and pasteboard
server is still hanging on to

00:22:46.400 --> 00:22:47.680
a port that was probably set up
to communicate with that app.

00:22:48.040 --> 00:22:50.580
All right, so that's about it for TOP.

00:22:50.790 --> 00:22:54.100
So those are three interesting views.

00:22:54.100 --> 00:22:59.400
And then one other tool right now,
which is a tool called SC Usage,

00:22:59.460 --> 00:23:02.290
which will give us a little
bit more of an in-depth view

00:23:02.380 --> 00:23:04.070
into exactly what's going on.

00:23:04.080 --> 00:23:08.020
This is kind of-- TOP is kind of a
nice tool for looking at things in

00:23:08.020 --> 00:23:11.810
a general way and seeing everything
that's going on in the system.

00:23:11.940 --> 00:23:16.410
But we can't provide too much detail
on every single app or every single

00:23:16.410 --> 00:23:18.830
process that's running all at once.

00:23:18.940 --> 00:23:21.920
So SC Usage is a tool that allows
us to get a little bit more

00:23:21.920 --> 00:23:23.990
visibility into what's going on.

00:23:24.100 --> 00:23:29.020
And let's just pick one
of the running apps,

00:23:29.020 --> 00:23:30.550
like the Dock.

00:23:31.400 --> 00:23:32.660
take a look at that.

00:23:32.660 --> 00:23:35.740
Of course,
these command line tools all have man

00:23:35.740 --> 00:23:41.400
pages in the system and they have little
helps that are associated with them.

00:23:41.400 --> 00:23:44.450
But if we go over here to
the dock and just start kind

00:23:44.590 --> 00:23:46.700
of playing around with it,
you get an idea.

00:23:46.700 --> 00:23:50.810
Here's all the different system
calls that are being executed,

00:23:50.900 --> 00:23:55.500
the number of system calls that
are being executed during that

00:23:55.670 --> 00:24:00.560
little bit of activity that I did
in terms of making the dock active.

00:24:00.680 --> 00:24:05.970
The tool also shows you how much time is
being spent outside of your application,

00:24:06.080 --> 00:24:08.440
so both in system idle
and in system busy.

00:24:08.440 --> 00:24:12.570
Some of that time that's accumulating
there would have been like in

00:24:12.570 --> 00:24:17.880
the window manager or other
services outside of your app.

00:24:17.880 --> 00:24:21.900
The tool will show you how many
page faults were taken for that

00:24:21.970 --> 00:24:27.120
particular application during that,
again, the time that we're sampling.

00:24:27.230 --> 00:24:31.260
It also shows down at the bottom
that we actually have three threads

00:24:31.260 --> 00:24:38.590
that make up this particular tool,
or make up the dock, and that we're going

00:24:38.790 --> 00:24:40.700
The relative priorities.

00:24:40.700 --> 00:24:44.160
These would be the scheduling
priorities in the system.

00:24:44.160 --> 00:24:46.740
And also, the cumulative wait times.

00:24:46.740 --> 00:24:50.300
So this is like a really well-behaved
application since we're not

00:24:50.420 --> 00:24:52.980
doing anything with it right now.

00:24:52.980 --> 00:24:55.320
All three threads are just
waiting for something to do.

00:24:55.320 --> 00:24:56.310
They're not polling.

00:24:56.340 --> 00:25:00.300
They're not waking up to kind of
see what's going on in the system.

00:25:00.300 --> 00:25:06.140
So a good target for everyone is to write
an app that when you're not using it,

00:25:06.140 --> 00:25:09.530
when it's just sitting there,
basically does nothing,

00:25:09.530 --> 00:25:11.260
has no impact on the system.

00:25:11.260 --> 00:25:16.360
And with this SC usage tool,
you can actually see that occurring.

00:25:16.360 --> 00:25:19.540
These tools are going to be
gone over in a little more

00:25:19.710 --> 00:25:26.340
depth in session number 195,
which is Thursday at 4:00.

00:25:26.340 --> 00:25:29.380
So I think that's enough to whet
your appetite for right now.

00:25:29.380 --> 00:25:31.720
We're going to do one more
tool a little bit later on.

00:25:31.870 --> 00:25:32.850
Thank you, Joe.

00:25:32.860 --> 00:25:33.860
Okay.

00:25:33.860 --> 00:25:34.860
Thank you.

00:25:34.860 --> 00:25:35.860
Thank you.

00:25:35.860 --> 00:25:35.860
Thank you.

00:25:41.620 --> 00:25:44.690
I think it's particularly
important to note that as you're

00:25:44.690 --> 00:25:49.010
writing applications for Mac OS X,
that there are some very important tools

00:25:49.030 --> 00:25:53.250
available in the system to give you
some idea of what the impact of your

00:25:53.250 --> 00:25:55.740
app is and ways that you can tune it.

00:25:55.890 --> 00:25:58.590
Since under Mac OS X you
don't have the issue,

00:25:58.600 --> 00:26:01.050
for example,
of having to pre-allocate the amount

00:26:01.050 --> 00:26:04.000
of memory for a given application,
things like the fact that you can

00:26:04.000 --> 00:26:06.600
actually have memory leaks that
just continue to grow and grow and

00:26:06.600 --> 00:26:11.100
grow and grow are something that you
actually need to watch for and test for

00:26:11.100 --> 00:26:13.590
before you release your applications.

00:26:14.560 --> 00:26:20.920
So, let's spend a moment now and go
over I/O Kit and our driver story.

00:26:21.050 --> 00:26:25.920
I/O Kit is a framework,
in the true sense,

00:26:26.240 --> 00:26:29.140
for easy development of device drivers.

00:26:29.140 --> 00:26:32.000
It provides the mechanisms
for plug and play,

00:26:32.000 --> 00:26:35.260
as you would expect from Apple,
but it also provides some

00:26:35.260 --> 00:26:39.000
other core services that are
necessary to support devices.

00:26:39.000 --> 00:26:44.000
Things such as power management down
at the actual architectural level,

00:26:44.130 --> 00:26:47.810
dynamic device management,
the ability for things to truly

00:26:47.910 --> 00:26:50.000
come and go in the system,
hot plug ability and such.

00:26:50.000 --> 00:26:52.890
And a very modular and
extensible environment,

00:26:52.960 --> 00:26:57.860
because we don't even know what the next
device is that might come down the chute.

00:26:58.000 --> 00:27:01.880
So we really need to be prepared
for a very flexible environment to

00:27:01.880 --> 00:27:04.000
be able to support these things.

00:27:04.940 --> 00:27:09.280
It provides the abstractions for most
of the device classes in the system.

00:27:09.510 --> 00:27:12.200
Certainly all the standard things,
things like mass storage

00:27:12.200 --> 00:27:13.950
and SCSI and ATA and stuff.

00:27:14.430 --> 00:27:18.960
I/O Kit does not provide abstractions
for some very high-level devices,

00:27:18.970 --> 00:27:20.840
things like scanners and printers.

00:27:20.900 --> 00:27:23.440
Those are actually done
within other groups,

00:27:23.560 --> 00:27:27.540
specifically as part of
the graphics environment.

00:27:27.570 --> 00:27:31.300
I believe there are a number of
sessions that go over those elsewhere.

00:27:31.360 --> 00:27:36.980
The focus for I/O Kit is primarily
in devices that actually represent

00:27:36.980 --> 00:27:40.670
tangible hardware that we touch directly.

00:27:41.790 --> 00:27:47.740
Key features of I/O Kit are, again,
it is a framework in the sense that, one,

00:27:47.740 --> 00:27:50.020
it is object-oriented,
and I think that's important

00:27:50.030 --> 00:27:53.840
to note that part of its design
architecture was to really provide

00:27:53.840 --> 00:27:57.880
this like in App Kit or in Cocoa,
to be able to have a

00:27:57.880 --> 00:27:59.850
framework to leverage off of.

00:27:59.850 --> 00:28:02.500
It deals with a lot of the standard
mundane things that you would

00:28:02.500 --> 00:28:05.260
expect that need to be done for I/O.

00:28:05.260 --> 00:28:08.350
It provides a lot of the common kernel
services that you needed to work and

00:28:08.390 --> 00:28:13.760
talk with the device and to talk and
communicate with the rest of the system.

00:28:13.760 --> 00:28:17.140
Protocol specifics, however,
are divorced from the core framework

00:28:17.140 --> 00:28:20.180
of I/O Kit and are dealt with
in something called families.

00:28:20.180 --> 00:28:23.690
Families provide the different kinds
of protocol that you would expect

00:28:23.690 --> 00:28:25.200
in very different kinds of devices.

00:28:25.450 --> 00:28:28.940
Certainly,
SCSI and audio are very opposite

00:28:28.940 --> 00:28:32.160
ends of the spectrum in terms of
the ways that you would use them.

00:28:32.160 --> 00:28:35.420
One's a bus and one is, you know,
has issues of dealing with

00:28:35.420 --> 00:28:38.640
volume and there's a whole
bunch of issues that are very,

00:28:38.640 --> 00:28:41.280
very different between these
two classes of devices.

00:28:41.280 --> 00:28:44.720
And the family portion of
I/O Kit really deals with providing

00:28:44.790 --> 00:28:48.580
mechanisms to be able to deal
with those protocol differences.

00:28:48.580 --> 00:28:52.740
The actual device specifics
themselves are captured in drivers.

00:28:52.740 --> 00:28:55.610
And this is the part that most people
will be dealing with as they port

00:28:55.610 --> 00:28:57.460
their piece of hardware to Mac OS X.

00:28:57.460 --> 00:29:02.940
Drivers are those pieces that actually
got in touch with the hardware directly.

00:29:02.940 --> 00:29:05.190
All of this, by the way,
for the most part,

00:29:05.190 --> 00:29:06.720
lives in the kernel itself.

00:29:06.720 --> 00:29:10.510
And a driver, drivers and families and
things like that tend to,

00:29:10.510 --> 00:29:12.700
are all very low level OS services.

00:29:12.700 --> 00:29:15.390
There are mechanisms that
I/O Kit provides and the

00:29:15.390 --> 00:29:19.580
families provide for being able
to communicate up to user space.

00:29:19.600 --> 00:29:23.160
Your applications in Mac OS X cannot
talk to hardware directly.

00:29:23.160 --> 00:29:26.320
You must go through I/O Kit or through
a driver or some other abstraction

00:29:26.320 --> 00:29:28.570
to be able to deal with that.

00:29:29.600 --> 00:29:33.850
In DP4, it's important to note that we,
actually a little while ago,

00:29:33.850 --> 00:29:36.030
released an early DDK.

00:29:36.160 --> 00:29:38.400
It's part of what we call
the Kernel Development Kit.

00:29:38.550 --> 00:29:41.890
There's actually a series of
services that are part of the KDK,

00:29:42.070 --> 00:29:45.660
and that was something that shipped
about two or three months ago.

00:29:45.660 --> 00:29:48.900
It is also part of DP4,
so on your disk you should see

00:29:48.900 --> 00:29:51.300
quite a bit of information on that.

00:29:51.300 --> 00:29:53.580
And it's, of course,
part of Darwin and Open Source,

00:29:53.990 --> 00:29:55.660
including things like documentation.

00:29:55.660 --> 00:29:59.660
Documentation for IOCit is done
through something called HeaderDoc.

00:29:59.660 --> 00:30:00.660
And if you were at the
Open Source session,

00:30:00.660 --> 00:30:02.660
there was a little bit
of information on that.

00:30:02.660 --> 00:30:07.460
But it's what we used to embed
documentation and services

00:30:07.540 --> 00:30:11.730
within the actual source code
itself and produce a very,

00:30:11.750 --> 00:30:15.660
very cool format for being
able to browse API information.

00:30:15.660 --> 00:30:19.520
Also, as part of DP4,
you'll see some of the early parts

00:30:19.520 --> 00:30:23.600
of some of the power management
work that we've been doing.

00:30:23.700 --> 00:30:25.660
There's a lot of stuff we've been doing.

00:30:25.660 --> 00:30:29.370
Kind of back at the lab
that isn't part of DP4 yet.

00:30:29.700 --> 00:30:34.050
That stuff is coming, but as part of DP4,
things like shutting down the display,

00:30:34.050 --> 00:30:36.890
spinning down the disks,
things like that are part

00:30:36.890 --> 00:30:37.660
of something you expect.

00:30:37.660 --> 00:30:41.460
For those of you who are interested
in more on power management,

00:30:41.460 --> 00:30:44.660
this is something that
will be coming post-DP4.

00:30:45.210 --> 00:30:49.900
There are a lot of families
that are part of I/O Kit today.

00:30:49.900 --> 00:30:53.510
And I believe we have something on
the order of eight or nine different

00:30:53.510 --> 00:30:57.910
sessions this week to go over a
number of the I/O Kit technologies,

00:30:57.910 --> 00:31:00.430
things like USB and FireWire.

00:31:00.460 --> 00:31:05.540
I encourage you to actually go to the
I/O Kit overview tomorrow afternoon.

00:31:05.540 --> 00:31:08.080
All the detailed sessions
will be described and more

00:31:08.080 --> 00:31:09.780
information about I/O Kit.

00:31:09.780 --> 00:31:14.530
We could spend the entire session
just going over this subject alone.

00:31:14.800 --> 00:32:09.800
[Transcript missing]

00:32:09.820 --> 00:32:15.880
It provides all the OS personality,
if you will,

00:32:15.880 --> 00:32:19.560
APIs and services for the system.

00:32:19.640 --> 00:32:25.270
BSD handles things like file systems
and networking in terms of it being

00:32:25.500 --> 00:32:29.430
really part of the BSD environment
in terms of how that is exposed.

00:32:29.480 --> 00:32:32.480
It provides the basic process model,
the concept of users and

00:32:32.870 --> 00:32:34.710
security within the system.

00:32:34.720 --> 00:32:39.210
It also provides the security in
terms of from both the user by user

00:32:39.210 --> 00:32:43.420
basis in terms of how it's managed
also through the file system.

00:32:43.420 --> 00:32:47.290
BSD really is responsible for
much of the very high-level view

00:32:47.300 --> 00:32:49.820
that everybody sees in the system.

00:32:49.820 --> 00:32:54.450
There's a number of pieces
that compose the BSD component,

00:32:54.520 --> 00:32:55.820
if you will.

00:32:55.820 --> 00:32:58.770
One is the system framework.

00:32:58.770 --> 00:33:05.080
This is basically the set of libraries
that actually expose the system APIs.

00:33:05.080 --> 00:33:07.180
In addition,
as part of the system framework,

00:33:07.180 --> 00:33:10.150
there's other OS personality
services that are provided,

00:33:10.200 --> 00:33:12.970
various other libraries,
things like the math library

00:33:12.970 --> 00:33:16.060
and the standard C libraries
and things like P threads.

00:33:16.060 --> 00:33:17.980
That's all part of the system framework.

00:33:18.020 --> 00:33:20.280
As you're interested more
in the system framework,

00:33:20.280 --> 00:33:24.500
we'll be talking more about that
at a BSD session later this week.

00:33:24.500 --> 00:33:28.810
There's also the BSD user environment,
which is the command line and shells

00:33:28.810 --> 00:33:33.710
and all the bazillion tools and things
that are part of that environment.

00:33:33.710 --> 00:33:36.420
This is a particularly set of powerful
facilities that are available.

00:33:36.420 --> 00:33:37.420
Brett Halle,
Joe Sokol This is a particularly

00:33:37.420 --> 00:33:39.620
set of powerful facilities
that exist in the system.

00:33:39.620 --> 00:33:43.470
These are tools and services that are
available to you as the developer.

00:33:43.470 --> 00:33:46.340
As we'll talk about later,
this is not something that we

00:33:46.340 --> 00:33:48.470
will be exposing to the end user,
of course.

00:33:48.470 --> 00:33:50.660
This is not exactly the
best user experience.

00:33:50.930 --> 00:33:53.980
There's an enormous amount of power here,
both as you're developing

00:33:53.980 --> 00:33:58.060
your applications,
just as the tools that we've shown you,

00:33:58.060 --> 00:34:01.460
for example,
and as ways to debug them and manage them

00:34:01.460 --> 00:34:05.760
and actually extend your applications
in pretty new and exciting ways.

00:34:05.760 --> 00:34:05.820
Brett Halle, Joe Sokol

00:34:07.210 --> 00:34:09.500
If you're interested in
more information on BSD,

00:34:09.500 --> 00:34:13.640
both at the kernel level and at the
BSD command line environment level,

00:34:13.640 --> 00:34:16.010
please join us on Friday, 3:30.

00:34:16.270 --> 00:34:19.450
We'll be going into a
lot more detail on that.

00:34:19.710 --> 00:34:21.740
File Systems.

00:34:21.740 --> 00:34:24.420
File systems is something that
everybody here will be dealing

00:34:24.420 --> 00:34:25.600
with in one form or another.

00:34:25.600 --> 00:34:27.380
And of course,
it's not just one file system,

00:34:27.430 --> 00:34:28.600
but a set of file systems.

00:34:28.600 --> 00:34:33.840
And this is a very powerful part
of the BSD kernel environment.

00:34:33.840 --> 00:34:41.350
It provides all the access to disk
and even network file system services.

00:34:41.990 --> 00:34:44.900
It's important to note that the file
systems architecture that we have is part

00:34:44.900 --> 00:34:46.860
of the current BSD kernel environment.

00:34:46.900 --> 00:34:49.900
So you'll find as you're
working with file systems,

00:34:49.900 --> 00:34:52.360
there's a lot of dependency
with that environment.

00:34:52.550 --> 00:34:55.200
Again,
how the process model works and how the

00:34:55.200 --> 00:34:57.670
APIs and things interact with each other.

00:34:57.900 --> 00:35:03.080
It's based on the BSD VFS architecture,
but we've extended it in order to be

00:35:03.080 --> 00:35:08.350
able to take advantage of certainly
things like HFS+ capabilities and things

00:35:08.350 --> 00:35:10.860
that we think are pretty Apple unique.

00:35:10.920 --> 00:35:14.900
The VFS design is a very
layered architecture.

00:35:14.900 --> 00:35:20.330
It has the ability to take file
systems and stack them to provide

00:35:20.330 --> 00:35:23.490
a number of unique capabilities.

00:35:24.610 --> 00:35:26.840
It also can support
numerous file system types.

00:35:27.020 --> 00:35:33.820
In fact, in DP4 we support HFS,
HFS+, UFS, ISO 9660, NFS.

00:35:34.130 --> 00:35:39.770
There's also an early version of an AFP,
Apple Share IP,

00:35:39.770 --> 00:35:42.990
file system as part of DP4.

00:35:43.540 --> 00:35:46.760
The file system,
in terms of its development environment,

00:35:46.880 --> 00:35:50.500
we package up as part of our KDK,
our kernel development kit.

00:35:50.700 --> 00:35:55.070
There's a whole series of services that
are part of doing development within the

00:35:55.070 --> 00:35:56.410
kernel in terms of ways to extend that.

00:35:56.660 --> 00:36:00.500
We'll talk more about that a
little later in this session.

00:36:00.650 --> 00:36:05.080
In DP4, I think it's important to note,
for those of you who have been

00:36:05.080 --> 00:36:08.700
following Rhapsody and Mac OS X,
that for DP4,

00:36:08.700 --> 00:36:12.500
HFS+ is our primary file system format.

00:36:12.500 --> 00:36:16.590
There's a number of APIs that have been
extended to be able to support HFS+

00:36:16.590 --> 00:36:21.270
effectively and to even extend them
to use some of the real raw power that

00:36:21.270 --> 00:36:26.270
exists in HFS+. Things like long file
names and some of the other services that

00:36:26.270 --> 00:36:32.840
are part of HFS+. As I mentioned already,
our server team has already added some

00:36:32.840 --> 00:36:36.500
support in DP4 for the Apple share IP.

00:36:36.500 --> 00:36:41.500
You should actually look into that,
but it is, to be noted,

00:36:41.500 --> 00:36:43.500
a pretty early drop of this code.

00:36:43.500 --> 00:36:45.500
This is something that we wanted
people to start working with,

00:36:45.500 --> 00:36:47.300
but it is headed to some issues.

00:36:48.860 --> 00:36:54.880
This is client, yes, absolutely,
as someone kindly pointed out.

00:36:54.880 --> 00:36:59.520
Also, there is within the file
system APIs pretty universal

00:36:59.520 --> 00:37:03.700
support for Unicode names,
specifically UTF-8.

00:37:03.700 --> 00:37:09.830
For those of you that are dealing with
this and want more information on this,

00:37:09.840 --> 00:37:12.150
be sure to go to the session.

00:37:12.620 --> 00:37:14.740
This is obviously of particular
importance to worldwide deployment.

00:37:15.030 --> 00:37:17.940
One other area in DP4 where there's
been some interesting development

00:37:17.940 --> 00:37:19.960
is permissions on removable media.

00:37:19.960 --> 00:37:24.740
Because of being based on BSD and
the BSD file system architecture,

00:37:25.010 --> 00:37:29.100
there's this concept of
BSD file system security,

00:37:29.100 --> 00:37:33.270
the concept of a user and groups
and the ability for read and write

00:37:33.270 --> 00:37:36.390
protection on a file-by-file basis.

00:37:36.510 --> 00:37:39.800
Removable media brings some
interesting problems to the space,

00:37:39.890 --> 00:37:42.400
which is when you get
the disk from somebody,

00:37:42.400 --> 00:37:45.870
what permissions and users are
actually associated with that

00:37:45.870 --> 00:37:47.790
particular removable device?

00:37:47.980 --> 00:37:51.040
There's been a lot of interesting
work done here for DP4,

00:37:51.040 --> 00:37:55.120
and I believe that will be discussed
also a bit in the file system session.

00:37:55.460 --> 00:37:58.940
This is something that we think
is obviously unique to a client

00:37:58.940 --> 00:38:02.770
system that isn't typically dealt
with on a server environment,

00:38:02.790 --> 00:38:03.790
for example.

00:38:04.170 --> 00:38:09.100
Another area of key development for
DP4 is the unified buffer cache.

00:38:09.100 --> 00:38:13.060
Again, this is kind of an OS-y,
holy grail item, but it's been very,

00:38:13.060 --> 00:38:17.390
very important to how we deal with
things like unify the way we deal

00:38:17.390 --> 00:38:22.090
with map files versus standard
read and write access to files.

00:38:22.240 --> 00:38:26.510
In typical OS architecture,
the map files are dealt with by the

00:38:26.510 --> 00:38:31.100
VM system and the read and write is
dealt with purely by the file system.

00:38:31.180 --> 00:38:33.360
There are situations where
these two views of files,

00:38:33.360 --> 00:38:35.580
particularly if two people
are accessing them in two

00:38:35.580 --> 00:38:38.220
different ways at the same time,
where they can actually

00:38:38.220 --> 00:38:40.100
become out of sync.

00:38:40.100 --> 00:38:42.630
There are lots of clever ways
that OSs have approached dealing

00:38:42.750 --> 00:38:44.100
with this particular issue.

00:38:44.100 --> 00:38:48.090
We think we've done a
particularly excellent job in

00:38:48.090 --> 00:38:50.690
dealing with this for Mac OS X.

00:38:51.000 --> 00:38:55.200
If you're interested in file systems
and how they fit into Mac OS X,

00:38:55.200 --> 00:38:57.900
please join us Wednesday at 2:00 p.m.

00:38:57.900 --> 00:39:02.060
We'll go over UBC and a number
of the other aspects and how to

00:39:02.060 --> 00:39:03.900
write a file system for Mac OS X.

00:39:03.900 --> 00:39:09.900
I'd like Joe to join us one more time and
share with us one other performance tool,

00:39:09.900 --> 00:39:13.900
particularly one that relates
directly to the file system usage.

00:39:14.960 --> 00:39:15.410
Okay.

00:39:21.640 --> 00:39:24.470
Okay, so one more tool to show today.

00:39:24.480 --> 00:39:29.620
This one, again, in terms of a strategy
that you might apply,

00:39:29.620 --> 00:39:35.490
you might have run top initially,
kind of checked out that a particular

00:39:35.490 --> 00:39:39.480
process seemed to be doing a lot of
system calls or seemed to be taking

00:39:39.480 --> 00:39:43.950
an awful long time to do something,
but maybe wasn't really

00:39:43.950 --> 00:39:47.050
banking a lot of CPU time,
right?

00:39:47.060 --> 00:39:51.240
So you might suspect that instead
of chewing up a lot of CPU,

00:39:51.360 --> 00:39:54.910
you're just waiting for IOs to occur,
and you'd probably be right.

00:39:54.920 --> 00:40:02.470
So we have a tool called FS Usage that
gives you a lot more visibility into

00:40:02.520 --> 00:40:06.630
what's going on in terms of access
to the file system and also other

00:40:06.630 --> 00:40:12.480
types of system calls that tend to
cause you to wait for things to occur.

00:40:12.480 --> 00:40:17.280
And the tool also will track,
will show you where your page faults are

00:40:17.430 --> 00:40:20.790
occurring that actually cause disk IOs,
where you actually have to go to

00:40:20.790 --> 00:40:25.560
the disk to page in as opposed to
maybe just finding it in your cache.

00:40:25.580 --> 00:40:28.810
And again,
those are instances in time that

00:40:28.970 --> 00:40:33.130
could cause your application to look
choppy if there's a lot of paging

00:40:33.130 --> 00:40:36.750
activity going on at some point,
or if you have a lot of file system

00:40:36.850 --> 00:40:41.220
activity that's concentrated in a
particular area could cause a lot

00:40:41.360 --> 00:40:47.620
of time to elapse where the app is
waiting for that IO to complete.

00:40:47.620 --> 00:40:51.980
So what we will do is,
go ahead and bring up our

00:40:51.980 --> 00:40:54.840
friend the TextEdit app again.

00:41:00.600 --> 00:41:17.500
[Transcript missing]

00:41:23.400 --> 00:41:28.200
We're going to go ahead and
take a look at text edit.

00:41:28.250 --> 00:41:31.660
And so he's just sitting
there doing nothing.

00:41:31.660 --> 00:41:36.640
But if we go over here and let's
go ahead and see about opening

00:41:36.640 --> 00:41:38.640
up some kind of a document.

00:41:38.870 --> 00:41:40.360
So what's going on there?

00:41:40.360 --> 00:41:45.400
That's probably-- that's not your
app doing all those opens and LStats,

00:41:45.400 --> 00:41:53.040
which are the equivalent of in
Git Adders and the Mac OS 9 world.

00:41:53.060 --> 00:41:56.100
That's a lot of the frameworks
actually going behind your back

00:41:56.100 --> 00:41:58.890
and doing a lot of work for you.

00:41:58.970 --> 00:42:02.050
So just that simple act
of bringing that panel,

00:42:02.140 --> 00:42:05.860
you can see we caused a whole
bunch of activity to occur.

00:42:05.860 --> 00:42:10.500
Now, what we're showing you
here over on the left

00:42:10.720 --> 00:42:15.050
The Core OS X is going to be
the actual time of day clock

00:42:15.380 --> 00:42:18.740
out to millisecond accuracy.

00:42:18.740 --> 00:42:23.980
Then you get the name of the system call
that's being executed at that point.

00:42:23.980 --> 00:42:25.640
Then some additional information.

00:42:25.810 --> 00:42:30.160
We provide the file handle,
file descriptor in Unix parlance

00:42:30.190 --> 00:42:33.600
that is being used or being returned.

00:42:33.600 --> 00:42:35.400
Then the I/O size.

00:42:35.400 --> 00:42:39.630
Again, that's an important thing to take
a look at within your own app when

00:42:39.710 --> 00:42:44.350
it actually starts making those
requests because lots of small,

00:42:44.350 --> 00:42:47.580
discrete I/Os aren't
nearly as good as nice,

00:42:47.580 --> 00:42:50.620
big, large,
fat I/Os that get a lot of work

00:42:51.100 --> 00:42:55.220
done all within a single call.

00:42:55.220 --> 00:43:01.760
We also provide up to the last
28 bytes of the path name that's

00:43:01.760 --> 00:43:03.800
being actually referenced.

00:43:03.800 --> 00:43:07.500
That will be the last 28 bytes
so that it tries to give you a

00:43:07.500 --> 00:43:07.500
sense of what the path name is.

00:43:07.500 --> 00:43:10.900
as much uniqueness as possible.

00:43:10.990 --> 00:43:15.350
Then over here in this column is the
amount of elapsed time that occurred to

00:43:15.470 --> 00:43:18.170
actually execute that particular call.

00:43:18.320 --> 00:43:23.380
If it has a W tagged on it-- I didn't
see any in this particular session

00:43:23.380 --> 00:43:26.650
yet at this point-- that would
be indicative that you actually

00:43:26.690 --> 00:43:28.720
waited for that I/O to occur.

00:43:28.720 --> 00:43:35.200
So most of these are very fast,
down in the sub-millisecond range.

00:43:35.200 --> 00:43:36.800
This is in microseconds here.

00:43:36.800 --> 00:43:40.790
So these are like in 30,
40 microsecond kinds of ranges.

00:43:40.860 --> 00:43:44.780
And then this would be the name of
the task that you're actually-- or the

00:43:44.780 --> 00:43:47.250
application that you're looking at.

00:43:47.260 --> 00:43:50.120
FS usage, you can look at multiple
applications at once.

00:43:50.120 --> 00:43:53.990
So you could be watching this along
with some of the system services

00:43:53.990 --> 00:43:57.720
if you wanted to see how they
were interacting with each other.

00:43:57.720 --> 00:44:00.780
Let's just try one more thing over here.

00:44:00.820 --> 00:44:02.790
Let's see.

00:44:05.300 --> 00:44:07.390
How about documents?

00:44:07.510 --> 00:44:08.120
Nothing there.

00:44:08.180 --> 00:44:14.320
I guess this is all
going to be binary stuff.

00:44:22.520 --> 00:44:23.500
Excuse me?

00:44:23.500 --> 00:44:24.500
The Print Setup Panel.

00:44:24.730 --> 00:44:25.500
Print Setup?

00:44:25.500 --> 00:44:26.500
Print Setup.

00:44:26.500 --> 00:44:27.610
What's that?

00:44:38.700 --> 00:44:44.330
Okay, so just bringing up the print setup
panel causes it to go find a whole

00:44:44.330 --> 00:44:47.010
bunch of stuff on the system for you.

00:44:48.420 --> 00:44:50.160
Anyway, you get the picture.

00:44:50.160 --> 00:44:54.360
The other...there's one with a...so
here's one that took a little

00:44:54.360 --> 00:44:58.230
bit longer where we're actually
syncing something out to the disk.

00:44:58.230 --> 00:45:01.090
There's actual IO that occurred there.

00:45:01.170 --> 00:45:04.930
What this tool is useful for is, one,
again, gives you a lot of visibility into

00:45:04.930 --> 00:45:06.960
what's going on in the system.

00:45:07.050 --> 00:45:10.630
You get to see some of the things
that go on when you make those

00:45:10.840 --> 00:45:15.620
very high-level toolbox kinds of
calls may actually trigger a whole

00:45:15.620 --> 00:45:18.330
bunch of stuff behind your back.

00:45:18.330 --> 00:45:23.500
It's important to know that,
that if you're having trouble

00:45:23.500 --> 00:45:27.620
kind of determining where
the performance is going,

00:45:27.620 --> 00:45:29.330
some of it might be that.

00:45:29.410 --> 00:45:35.080
This is also a useful tool for
discovering where the IO is occurring

00:45:35.080 --> 00:45:41.600
and where you're going to be actually
causing perhaps jitters or just

00:45:41.600 --> 00:45:46.470
kind of breakups in the UI in terms
of having to wait for that IO as

00:45:46.540 --> 00:45:49.410
opposed to just pure CPU usage.

00:45:49.420 --> 00:45:57.640
Again, it's a tool that's meant more for
gaining some visibility into the system.

00:45:57.640 --> 00:46:01.370
There are other tools that will be
talked about in that session number

00:46:01.370 --> 00:46:05.530
195 that will help you drill down
into your application and actually

00:46:05.560 --> 00:46:09.070
discover where in the application
these calls are being made,

00:46:09.180 --> 00:46:14.260
which would help you to either
decide how best to use them or

00:46:14.340 --> 00:46:19.180
perhaps manage to eliminate them if
they're causing too much overhead.

00:46:19.180 --> 00:46:23.010
Thank you, Joe.

00:46:29.080 --> 00:46:32.490
It should be noted that our
engineering management team in

00:46:32.490 --> 00:46:35.080
particular loves running these tools.

00:46:35.080 --> 00:46:40.190
This is a way that we actually kind
of get a handle for each build exactly

00:46:40.260 --> 00:46:43.800
where we think there might be performance
issues or things in the system.

00:46:43.920 --> 00:46:46.100
Certainly,
this is something we've found to be

00:46:46.100 --> 00:46:49.960
very useful in being able to detect
things like apps that pull or where we

00:46:49.980 --> 00:46:53.880
have leaks or where people are doing
things in a very inefficient way.

00:46:53.890 --> 00:46:57.640
I think you as a developer should know
that these tools exist and there's a lot

00:46:57.640 --> 00:47:00.430
of these cool tools in the system to use.

00:47:00.770 --> 00:47:02.980
Moving on to networking.

00:47:03.310 --> 00:47:06.670
It should be noted that
networking is also a component

00:47:06.670 --> 00:47:08.920
of the BSD kernel environment.

00:47:08.920 --> 00:47:14.420
In fact,
it's based on the BSD 4.4 TCP/IP stack.

00:47:14.420 --> 00:47:18.620
In fact, over the past year,
we've spent some time and synced

00:47:18.690 --> 00:47:20.700
that stack with FreeBSD 3.2.

00:47:20.780 --> 00:47:24.460
There's a lot of very,
very cool stuff that's been going

00:47:24.460 --> 00:47:30.520
on in the BSD community in terms
of evolution of the IP stack.

00:47:30.520 --> 00:47:35.280
It should also be noted that the
APIs for dealing with networking

00:47:35.550 --> 00:47:38.280
in Mac OS X are socket APIs.

00:47:38.280 --> 00:47:42.420
There is an OT library
specifically for IP that can be

00:47:42.420 --> 00:47:47.460
used for Carbon applications,
but the low-level services and

00:47:47.460 --> 00:47:50.360
APIs for networking are sockets.

00:47:50.850 --> 00:47:54.340
Key features of networking
for Mac OS X are IPv4 and

00:47:54.660 --> 00:47:58.120
AppleTalk multi-homing,
routing services,

00:47:58.290 --> 00:48:06.620
things like firewall and NAT are all core
services within the networking services.

00:48:06.700 --> 00:48:11.700
There's a lot of very powerful raw
services that exist as part of Mac OS X,

00:48:11.700 --> 00:48:13.620
a lot of which aren't directly used.

00:48:13.720 --> 00:48:17.700
Right now, we're exposed in DP4
from a user perspective,

00:48:17.700 --> 00:48:20.310
things that may be used more in a
server environment than they might

00:48:20.310 --> 00:48:21.700
be used in a client environment.

00:48:21.700 --> 00:48:25.570
But these are all part of
the core services that exist.

00:48:26.430 --> 00:48:30.220
Networking is also part of our
Kernel Development Kit environment.

00:48:30.370 --> 00:48:33.190
We'll talk a little bit more
about the specifics of how you

00:48:33.190 --> 00:48:37.440
do development in this area,
but it's important that we

00:48:37.440 --> 00:48:42.840
have three core technologies
that are part of the KDK:

00:48:42.840 --> 00:48:46.840
I/O, file systems, and networking.

00:48:46.840 --> 00:48:46.840
The mechanisms for being able to
get services in and out of the

00:48:46.840 --> 00:48:46.840
kernel are based on this kit.

00:48:47.330 --> 00:48:51.500
One key area where we've done
quite a bit of extension of the

00:48:51.500 --> 00:48:56.840
basic networking services are
kernel extensions for networking.

00:48:56.840 --> 00:49:03.570
Basically, the networking group has taken
the basic SOCKETS architecture

00:49:03.570 --> 00:49:07.400
and stacks and provided mechanisms
for extending those stacks in very

00:49:07.400 --> 00:49:09.070
important and interesting ways.

00:49:09.220 --> 00:49:11.870
More ways than I can get into
in this particular session,

00:49:11.870 --> 00:49:18.280
so this is where I strongly encourage
you to go to their session to see more.

00:49:18.280 --> 00:49:22.200
Another key area of
support is that for DP4,

00:49:22.200 --> 00:49:28.110
that the IP environment for both classic
and the rest of the OS are shared.

00:49:28.140 --> 00:49:33.280
If those of you that use DP3 or use
previous versions releases of Mac OS X,

00:49:33.280 --> 00:49:37.150
you actually had to set up multiple
IP addresses for the classic

00:49:37.220 --> 00:49:39.320
environment and the base system.

00:49:39.370 --> 00:49:41.180
That is no longer the case.

00:49:41.180 --> 00:49:42.360
They actually share the same network.

00:49:42.360 --> 00:49:48.140
Also, as I'd already mentioned,
there's an OT support

00:49:48.230 --> 00:49:50.050
library as part of Carbon.

00:49:50.150 --> 00:49:52.750
In fact,
if you have played it all yet with DP4,

00:49:52.750 --> 00:49:56.360
I noticed during lunch a number of
you had installed it on portables.

00:49:56.460 --> 00:50:01.990
Or you saw at the keynote,
IE5 is actually part of

00:50:02.000 --> 00:50:03.740
the release DP4 product.

00:50:03.740 --> 00:50:07.930
That all sits on top of the open
transport layers as part of Carbon,

00:50:07.930 --> 00:50:10.000
which is part of our networking services.

00:50:10.000 --> 00:50:13.980
That has really made porting of
applications to Carbon to be very,

00:50:13.980 --> 00:50:15.040
very easy.

00:50:15.040 --> 00:50:19.560
In fact,
the performance has indications that

00:50:19.560 --> 00:50:26.780
we easily meet the performance of
Mac OS 9 for these OT interfaces.

00:50:26.780 --> 00:50:31.740
In addition for DP4,
we have PPP now as part of the system.

00:50:31.740 --> 00:50:35.040
There's an early UI and control
panel for setup and connectivity.

00:50:35.040 --> 00:50:38.160
We'd certainly be interested
in your input on this.

00:50:38.310 --> 00:50:41.830
There's also some extensions as
part of the OT services for being

00:50:41.830 --> 00:50:42.200
able to use the OT services.

00:50:42.200 --> 00:50:44.310
We've also got a lot of support
for the PPP connections,

00:50:44.310 --> 00:50:47.310
and this is something that we'll be
doing more work on as we move forward.

00:50:47.310 --> 00:50:52.570
Also, DHCP client and server
services are part of DP4.

00:50:52.570 --> 00:50:56.960
You can actually set up your
DP4 system to auto configure

00:50:56.960 --> 00:51:01.740
with DHCP and even provide those
services in a server environment.

00:51:01.740 --> 00:51:04.750
That has actually been very important
in terms of being able to provide

00:51:04.750 --> 00:51:08.000
ad hoc networks where you get just
two systems that connect together.

00:51:08.170 --> 00:51:10.130
You don't have DNS services,
things like that.

00:51:10.180 --> 00:51:12.110
There's a well-defined standard for that.

00:51:12.180 --> 00:51:19.700
There's some really cool stuff
that's coming as we proceed

00:51:19.700 --> 00:51:22.310
forward in the networking domain.

00:51:22.430 --> 00:51:25.210
Support for mobility is, I think,
one of the most important

00:51:25.210 --> 00:51:26.560
ones that is on the plate.

00:51:26.710 --> 00:51:29.500
Specifically,
being able to change address

00:51:29.590 --> 00:51:33.000
or configuration or things
like that without reboot.

00:51:33.000 --> 00:51:38.960
Our intention is to take this even
beyond what has been done in Mac OS 9.

00:51:38.980 --> 00:51:40.960
This is going to take us a while,
but this is something that we're

00:51:40.960 --> 00:51:42.020
putting a lot of effort into.

00:51:42.070 --> 00:51:49.040
As part of that are also some native
Mac OS X specific network setup APIs.

00:51:49.040 --> 00:51:53.370
This has evolved from some of
the existing APIs that you may

00:51:53.450 --> 00:51:56.750
be familiar with in Mac OS 9.

00:51:56.810 --> 00:51:58.960
That's a key part of our mobility story.

00:51:58.960 --> 00:52:04.160
IPv6 and IPsec is another
key area of technology.

00:52:04.160 --> 00:52:10.830
This is certainly looking very forward
in terms of our networking technology.

00:52:10.830 --> 00:52:15.660
During the networking session,
I think Justin and his team will be

00:52:15.660 --> 00:52:19.060
going over where we're going with
that and how you can actually get

00:52:19.060 --> 00:52:20.700
your hands on some of this stuff.

00:52:22.560 --> 00:52:25.400
Whoa, looks like this one
didn't get set correctly.

00:52:25.620 --> 00:52:30.260
There is a networking session,
an overview session.

00:52:30.260 --> 00:52:32.220
Justin?

00:52:32.400 --> 00:52:42.180
Tuesday at 4:30 in this room.

00:52:43.180 --> 00:52:43.300
If you're interested in networking,
please come join us.

00:52:43.800 --> 00:54:04.200
[Transcript missing]

00:54:05.740 --> 00:54:09.990
Kernel extensions are the kernel
plug-in model that we use.

00:54:09.990 --> 00:54:12.040
They're basically called,
as you'll hear them

00:54:12.060 --> 00:54:14.380
referenced in other sessions,
KEXTs.

00:54:14.480 --> 00:54:17.670
And they're bundles that contain
a property list and the binary

00:54:17.670 --> 00:54:20.220
actually for use in the kernel.

00:54:20.240 --> 00:54:24.490
There is a service called the
KEXT manager which actually auto-loads

00:54:24.530 --> 00:54:26.130
and unloads these services as needed.

00:54:26.140 --> 00:54:32.370
This is particularly used in I/O for
when a driver is needed on demand.

00:54:32.380 --> 00:54:36.550
You plug in a USB or a FireWire
device or you have some new device

00:54:36.550 --> 00:54:38.740
that is detected at boot time.

00:54:38.760 --> 00:54:42.020
It's the KEXT manager which
auto-loads the necessary kernel

00:54:42.020 --> 00:54:44.730
extensions to be able to support that.

00:54:45.250 --> 00:54:47.090
There are a number of
manual tools as well,

00:54:47.090 --> 00:54:49.330
so as you're developing
kernel extensions,

00:54:49.330 --> 00:54:54.100
that you can actually manually load
and unload these things and protect,

00:54:54.100 --> 00:54:57.130
actually work with them and test them.

00:54:58.690 --> 00:55:02.670
Each kernel module actually
has two key entry points that

00:55:02.670 --> 00:55:06.600
are common to all of them:
an initialized, which is called "unload,"

00:55:06.630 --> 00:55:09.920
and a finalized,
called "just before unload."

00:55:10.810 --> 00:55:13.670
All other APIs are very domain-specific.

00:55:13.810 --> 00:55:16.750
So for I/O Kit,
there's a whole set of interfaces

00:55:16.750 --> 00:55:20.600
that are driven around the
family interfaces between the

00:55:20.600 --> 00:55:22.740
driver and the specific family.

00:55:23.080 --> 00:55:26.000
For the kernel extensions,
there's a whole series of interfaces

00:55:26.000 --> 00:55:29.500
that you need depending on where it is
you're plugging into the network stack.

00:55:29.610 --> 00:55:34.430
And file system is part
of the VFS plug-in model.

00:55:34.440 --> 00:55:37.470
So again,
for details on how these things work,

00:55:37.560 --> 00:55:40.320
you need to go to the specific sessions.

00:55:40.930 --> 00:55:43.630
There is also on the KDK,
which is again part of your

00:55:43.630 --> 00:55:46.480
disk and on the website,
a Hello Kernel tutorial.

00:55:46.480 --> 00:55:50.680
So if you want to actually get
familiar with how these things work,

00:55:50.750 --> 00:55:52.800
you can actually play around with it.

00:55:53.180 --> 00:55:55.800
Special things for
developing inside the kernel.

00:55:55.850 --> 00:55:57.770
At this particular point,
you need to use our tools.

00:55:57.880 --> 00:56:02.300
And mainly the issue here is
because of the way the ABIs and

00:56:02.300 --> 00:56:03.800
things work within the kernel.

00:56:03.800 --> 00:56:05.800
They're very specific.

00:56:05.800 --> 00:56:09.800
They don't have all the dynamicism
that exists in user space.

00:56:09.800 --> 00:56:12.790
We have very specific ABIs and
unfortunately need to use our tools.

00:56:12.900 --> 00:56:16.800
C++ in particular is part of I/O Kit.

00:56:16.800 --> 00:56:20.950
Until we resolve some of the ABI issues
with some of the other tool vendors,

00:56:20.950 --> 00:56:22.560
this ends up being a problem.

00:56:23.250 --> 00:56:26.740
Developing inside the kernel,
you need to do two-machine debugging.

00:56:26.990 --> 00:56:29.800
Obviously,
you're inside the kernel space.

00:56:29.820 --> 00:56:32.600
You're in a very protected context.

00:56:32.890 --> 00:56:35.790
The only way to do debugging
at this is with two machines.

00:56:35.800 --> 00:56:41.790
There are very limited programming
language features here within the kernel.

00:56:41.790 --> 00:56:45.700
As I mentioned,
I/O Kit uses C++ as the way that

00:56:45.700 --> 00:56:47.800
the frameworks are implemented.

00:56:47.800 --> 00:56:51.600
But it's a very restricted usage of C++,
something that has been

00:56:51.600 --> 00:56:53.800
actually termed as embedded C++.

00:56:53.800 --> 00:56:58.800
But there are other programming language
limitations that exist within the kernel.

00:56:58.800 --> 00:57:01.750
You are in a protected environment.

00:57:01.860 --> 00:57:04.590
There is no direct user
interaction from within the kernel.

00:57:04.880 --> 00:57:08.540
There are some interfaces and tools
for being able to do logging and to

00:57:08.540 --> 00:57:12.160
be able to pass up things from the
kernel to the user space so that you

00:57:12.160 --> 00:57:14.350
can get interesting interaction out.

00:57:14.650 --> 00:57:17.920
But primarily,
you're going to be stuck doing debugging.

00:57:19.240 --> 00:57:21.700
Resources within the
kernel are highly costly.

00:57:21.940 --> 00:57:26.100
Certainly, allocating things in
interrupt time is a no-no.

00:57:26.260 --> 00:57:29.380
Other,
they're very restricted usage situations

00:57:29.460 --> 00:57:32.100
for being able to allocate resources.

00:57:32.130 --> 00:57:35.210
And as a general rule,
anything that lives in the

00:57:35.210 --> 00:57:38.850
kernel needs to be very,
very, very conscious about the

00:57:38.850 --> 00:57:42.440
memory resources that you use,
because generally they

00:57:42.440 --> 00:57:44.160
tend to be wired resources.

00:57:44.360 --> 00:57:45.210
You're actually taking real memory
away from the rest of the system.

00:57:45.360 --> 00:57:48.000
and failures in the kernel
environment are fatal.

00:57:48.040 --> 00:57:50.490
This is why we don't want
people as a general rule to

00:57:50.490 --> 00:57:53.810
be writing kernel extensions,
because it's at this environment

00:57:54.290 --> 00:57:57.410
where you really are in
charge of the machine again,

00:57:57.410 --> 00:57:59.760
and this is a real opportunity
here to pull the rug out

00:57:59.880 --> 00:58:01.300
from under all those apps.

00:58:01.350 --> 00:58:05.300
A key goal of Mac OS X is to
provide a robust environment,

00:58:05.300 --> 00:58:09.330
and we need to make sure that code
and things that exist and run inside

00:58:09.340 --> 00:58:11.120
the kernel are as robust as possible.

00:58:11.310 --> 00:58:15.760
If you're writing code within the kernel,
you have that responsibility as well.

00:58:17.090 --> 00:58:19.290
So I want to close with some
final things to think about.

00:58:19.660 --> 00:58:25.240
One, I think I mentioned already that the
Unix experience is our intention for

00:58:25.240 --> 00:58:27.370
Mac OS X is this is to be hidden.

00:58:27.380 --> 00:58:30.980
This is not the goal of Mac OS X is
to be the next cool Unix box,

00:58:31.260 --> 00:58:32.800
although it is very cool.

00:58:32.800 --> 00:58:36.100
This is really an optional environment
for power users and developers,

00:58:36.100 --> 00:58:39.690
you folks, but it's not something we want
to expose to mom or the kids.

00:58:39.820 --> 00:58:44.480
This is not part of the new
user experience for Mac OS X.

00:58:44.970 --> 00:58:48.400
So it's very important as you're
developing applications and using all

00:58:48.400 --> 00:58:52.750
this really cool stuff that you are
very conscious not to expose that to the

00:58:52.750 --> 00:58:54.600
people that are running your software.

00:58:54.600 --> 00:58:59.050
They shouldn't have to manipulate
and edit configuration files.

00:58:59.060 --> 00:59:01.000
They should never have to
deal with the command line.

00:59:01.000 --> 00:59:02.860
Those things don't exist.

00:59:02.940 --> 00:59:07.120
And in fact, our intention is that the
terminal application for user,

00:59:07.120 --> 00:59:11.040
the user system will
actually not be included.

00:59:11.040 --> 00:59:12.820
This is something that would
be an optional install,

00:59:12.820 --> 00:59:13.940
not default install.

00:59:13.940 --> 00:59:14.870
So don't depend on it.

00:59:14.940 --> 00:59:20.050
Another key thing to think about is
using shared memory is dangerous.

00:59:20.100 --> 00:59:25.210
One of the things that we found
is people have implemented apps

00:59:25.220 --> 00:59:29.440
on Mac OS X that you're used to
Mac OS where you have access to the

00:59:29.440 --> 00:59:31.060
entire address space of the system.

00:59:31.190 --> 00:59:34.350
And so you take shortcuts about how
you communicate between separate

00:59:34.350 --> 00:59:38.660
applications or shortcuts about
how it is that you interact with

00:59:38.660 --> 00:59:40.590
multiple pieces of the system.

00:59:40.790 --> 00:59:43.690
Be very conscious of the fact
that as part of the way of

00:59:43.800 --> 00:59:45.830
keeping the system robust,
is to use some of the

00:59:45.830 --> 00:59:47.440
protection that exists there.

00:59:47.440 --> 00:59:50.470
If you go around and circumvent,
and we do have services for

00:59:50.470 --> 00:59:53.710
being able to use shared memory,
every time you do that,

00:59:53.890 --> 00:59:56.750
you're lessening the potential stability
of the system in your application.

00:59:56.760 --> 01:00:00.240
So be aware of it and just
take that into consideration.

01:00:01.690 --> 01:00:04.230
Always use the highest level
of abstraction possible.

01:00:04.340 --> 01:00:08.640
We've talked today about a lot of
really cool technology within the OS.

01:00:08.920 --> 01:00:11.340
But as a general rule,
you shouldn't start down at

01:00:11.340 --> 01:00:14.180
the bottom in terms of the
APIs and services that you use.

01:00:14.450 --> 01:00:18.260
You instead should use the application
services that exist as part of Cocoa,

01:00:18.450 --> 01:00:19.600
as part of Carbon.

01:00:19.690 --> 01:00:23.020
That allows you the greatest
amount of compatibility and the

01:00:23.020 --> 01:00:25.100
greatest amount of portability.

01:00:25.200 --> 01:00:27.980
There's going to be situations where
you need to use these services,

01:00:28.110 --> 01:00:29.050
and that's okay.

01:00:29.240 --> 01:00:31.560
But realize that you're
doing it with some cost.

01:00:31.600 --> 01:00:35.860
You may be affecting the portability
and compatibility of your applications.

01:00:35.930 --> 01:00:38.330
Carbon is a great example.

01:00:38.910 --> 01:00:40.640
open source is a powerful tool.

01:00:40.860 --> 01:00:44.500
As I mentioned,
all of this technology is open.

01:00:44.500 --> 01:00:46.180
You can get the source to it today.

01:00:46.180 --> 01:00:47.960
You get on the Darwin website.

01:00:47.960 --> 01:00:48.750
You can look at it.

01:00:48.820 --> 01:00:49.880
You can build the system.

01:00:49.880 --> 01:00:52.900
It's actually possible to build a
version of the kernel that you can

01:00:52.990 --> 01:00:55.040
replace with your existing DP4.

01:00:55.040 --> 01:00:58.360
There's only a couple of
pieces that aren't included,

01:00:58.360 --> 01:01:00.700
and those tend to be drivers,
for example,

01:01:00.700 --> 01:01:03.500
that we don't own the rights to,
things like Adaptec drivers,

01:01:03.500 --> 01:01:04.280
things like that.

01:01:04.340 --> 01:01:08.040
But all the other key technology
that's part of the OS is

01:01:08.130 --> 01:01:09.320
available as open source.

01:01:09.360 --> 01:01:12.640
That means that you can find
out about how things work by

01:01:12.640 --> 01:01:15.890
diving into it and looking,
that you can actually get involved,

01:01:15.900 --> 01:01:19.040
and we want you to get involved in
helping make this a better product.

01:01:19.040 --> 01:01:22.890
We've already gotten quite a lot
of changes and enhancements and

01:01:22.890 --> 01:01:26.600
things from the Darwin community
become part of that community.

01:01:26.600 --> 01:01:30.000
There's mailing lists and a lot
of other things that exist so

01:01:30.140 --> 01:01:32.180
that you can get involved here.

01:01:32.180 --> 01:01:36.480
This is a real unique situation
that we have in having,

01:01:36.540 --> 01:01:40.560
you know,
basically one of the primary OSs,

01:01:40.820 --> 01:01:44.070
consumer OSs, also open source,
and this is something you

01:01:44.070 --> 01:01:45.100
should take advantage of.

01:01:45.100 --> 01:01:49.000
In each of the sessions,
you'll actually hear some suggestions

01:01:49.000 --> 01:01:51.820
about ways you can get involved,
and if you go onto our website,

01:01:51.820 --> 01:01:54.870
you'll also see that there are some
interesting opportunities where if you

01:01:54.870 --> 01:01:56.660
want to get involved more and contribute,
you can.

01:01:58.590 --> 01:02:02.150
Last thing I want to leave you with
is that there's an enormous amount

01:02:02.150 --> 01:02:03.720
of potential in this technology.

01:02:03.920 --> 01:02:07.430
Everybody's busily and should be
busy right now worrying about how

01:02:07.430 --> 01:02:09.060
do I get my app onto Mac OS X.

01:02:09.180 --> 01:02:13.680
The next thing you might want to think
about is underneath Cocoa and Carbon,

01:02:13.910 --> 01:02:15.550
there's some incredible power here.

01:02:15.560 --> 01:02:18.290
And this is where I think the
next killer app is hiding.

01:02:18.380 --> 01:02:21.260
The Mac OS X and the Core OS and
all this cool technology is where

01:02:21.600 --> 01:02:25.200
we're going to be able to pull ahead
of the competition in a major way.

01:02:25.410 --> 01:02:28.800
We have barely begun to tap
some of the potential here.

01:02:28.930 --> 01:02:31.580
So something for you to think about.

01:02:31.750 --> 01:02:33.680
I want to review real
quickly the roadmap.

01:02:33.680 --> 01:02:36.060
There's a number of sessions
that you can get involved in.

01:02:36.060 --> 01:02:39.090
Open source, we already,
unfortunately already had.

01:02:39.100 --> 01:02:41.860
We talked a little bit about
the open source story and

01:02:41.860 --> 01:02:42.700
how you can get involved.

01:02:42.700 --> 01:02:43.930
There's a lot of this stuff on the web.

01:02:43.940 --> 01:02:45.840
The IOCAT overview on Tuesday.

01:02:45.840 --> 01:02:47.880
Networking overview,
we got it right here.

01:02:47.880 --> 01:02:49.460
Tuesday at 4.30.

01:02:49.460 --> 01:02:52.760
File systems, Wednesday at 2.00.

01:02:53.030 --> 01:02:54.600
There's a birds of a feather session.

01:02:54.600 --> 01:02:58.440
I believe we don't know exactly where,
what room it's in,

01:02:58.440 --> 01:03:01.360
but it's Wednesday in the
birds of a feather sessions.

01:03:01.700 --> 01:03:02.620
In the evening.

01:03:02.620 --> 01:03:05.410
And this can be a lot more
informal communication and

01:03:05.410 --> 01:03:06.620
ways that you can get involved.

01:03:06.640 --> 01:03:09.400
The Mach kernel is on Thursday at 9 a.m.

01:03:09.400 --> 01:03:13.680
The BSD kernel and user
environment is Friday at 3.30.

01:03:13.680 --> 01:03:17.680
And there's also a feedback
forum Friday afternoon.

01:03:17.680 --> 01:03:21.040
And if you've got questions,
feedback that you can provide,

01:03:21.040 --> 01:03:23.910
I would strongly encourage
your participation there.