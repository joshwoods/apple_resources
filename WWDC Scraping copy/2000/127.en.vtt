WEBVTT

00:00:14.300 --> 00:00:20.910
Please welcome David Wright,
Mac OS X Applications Technology Manager.

00:00:24.660 --> 00:00:25.180
Thank you.

00:00:25.300 --> 00:00:28.500
Welcome to session 127, Cocoa Update.

00:00:28.500 --> 00:00:30.860
I know they've got a lot of
material to tell you about

00:00:30.930 --> 00:00:33.810
since you last were using Cocoa,
so without delay, I'm just going to bring

00:00:33.820 --> 00:00:34.710
Ali Ozer on stage.

00:00:34.840 --> 00:00:38.510
Please welcome the manager
of the Cocoa framework team.

00:00:45.400 --> 00:00:46.400
Good afternoon.

00:00:46.400 --> 00:00:50.720
It's sort of late, I guess,
but not much more left of the day.

00:00:50.830 --> 00:00:56.470
Okay, so I am Ali Ozer,
the manager of the Cocoa Frameworks.

00:01:19.210 --> 00:01:19.210
Yes.

00:01:19.210 --> 00:01:19.210
So today's topics are we're going to
talk about the state of Cocoa today.

00:01:19.210 --> 00:01:19.210
That's just a few minutes.

00:01:19.210 --> 00:01:19.210
And then we're going to talk
about what's new in Cocoa,

00:01:19.210 --> 00:01:19.210
basically what has changed since
the last time we were together,

00:01:19.210 --> 00:01:19.210
which was last WWDC.

00:01:19.210 --> 00:01:19.210
And then we're also going
to talk a few minutes about

00:01:19.210 --> 00:01:19.210
some of the upcoming changes,
things we have planned

00:01:19.210 --> 00:01:19.210
for the next few months,
next few, you know,

00:01:19.210 --> 00:01:19.210
the next few releases.

00:01:19.580 --> 00:01:23.140
So first,
a few slides about the state of Cocoa.

00:01:23.300 --> 00:01:25.440
So, what has been happening?

00:01:25.530 --> 00:01:30.510
Well, the big thing,
as you might imagine, was Aqua.

00:01:30.680 --> 00:01:34.310
AppKit is all user interface classes,
a lot of user interface widgets and

00:01:34.310 --> 00:01:36.730
abstractions and helper classes.

00:01:36.890 --> 00:01:39.390
And implementing Cocoa was
a big task for us.

00:01:39.510 --> 00:01:42.620
I think we're very happy to deliver
it in Macworld and have a great demo.

00:01:42.820 --> 00:01:44.160
And since then,
we're obviously doing a lot

00:01:44.160 --> 00:01:47.480
more enhancements and polish,
and that's been a big task for us,

00:01:47.540 --> 00:01:50.800
and a big part of this talk
will be about the Aqua.

00:01:50.800 --> 00:01:56.360
We also have been continuing to integrate
better with the components in Mac OS X.

00:01:56.660 --> 00:01:59.480
Last time we were together,
we talked about how we integrated

00:01:59.480 --> 00:02:03.680
with the new kernel and DPS going
away and Quartz in its place,

00:02:03.890 --> 00:02:07.590
and since then,
Finder has been more established.

00:02:07.620 --> 00:02:10.420
We now have the new Finder
instead of Workspace.

00:02:10.420 --> 00:02:14.050
The Carbon APIs are more
established and the Carbon,

00:02:14.190 --> 00:02:16.820
there are more Carbon applications
and stuff in the system.

00:02:16.830 --> 00:02:19.560
So we've been updating the
Cocoa frameworks to work

00:02:19.650 --> 00:02:21.500
more with these elements.

00:02:21.530 --> 00:02:24.120
We've also been implementing
new features based on feedback

00:02:24.120 --> 00:02:26.970
and various other sources,
some features that

00:02:27.050 --> 00:02:28.400
we'll talk about today.

00:02:28.410 --> 00:02:31.560
And we've obviously been also fixing
bugs and improving performance,

00:02:31.620 --> 00:02:34.390
obviously changing the system,
moving components,

00:02:34.510 --> 00:02:37.300
putting new components in introduces
bugs and performance issues,

00:02:37.300 --> 00:02:39.580
and we've been constantly battling those.

00:02:39.580 --> 00:02:41.010
OK.

00:02:41.110 --> 00:02:44.620
So one thing to note about
Cocoa is that in Mac OS X,

00:02:44.620 --> 00:02:47.690
in DP4,
Cocoa is being used in a large and

00:02:47.720 --> 00:02:49.820
an increasing number of applications.

00:02:49.980 --> 00:02:51.640
So here is some of them.

00:02:51.720 --> 00:02:56.280
I mean, as you know, Mail, TextEdit,
Grab, some of the old favorites, Preview,

00:02:56.280 --> 00:02:59.680
Address Book is a new one,
which lets you manipulate your address

00:02:59.760 --> 00:03:03.660
books to be used in Mail and other cases.

00:03:03.700 --> 00:03:05.200
And also notice Image Capture.

00:03:05.200 --> 00:03:09.790
If you were at Mac OS X Keynote,
Bertrand's Keynote,

00:03:09.990 --> 00:03:12.760
Christine showed you the Image Capture
framework and she showed you the app

00:03:12.760 --> 00:03:15.940
that uses the Image Capture framework
and she took a picture of you all.

00:03:15.940 --> 00:03:19.950
And the Image Capture app is also,
for instance, a Cocoa app that uses the

00:03:19.950 --> 00:03:23.260
Image Capture framework,
which is a brand new framework available

00:03:23.460 --> 00:03:25.420
to Cocoa and Carbon applications.

00:03:25.460 --> 00:03:28.480
In the administration side,
we have Assistant, multiple users,

00:03:28.480 --> 00:03:32.180
that's a new app, and Terminal,
Installer, old stuff.

00:03:32.240 --> 00:03:35.250
And developer applications,
we have the new project builder,

00:03:35.260 --> 00:03:36.010
which is a Cocoa app.

00:03:36.070 --> 00:03:39.660
Obviously the WebObjects project
builder and interface builder

00:03:39.660 --> 00:03:42.870
are all Cocoa applications.

00:03:42.970 --> 00:03:44.080
OK.

00:03:45.500 --> 00:03:49.140
One interesting topic is Objective-C,
what happens to

00:03:49.140 --> 00:03:51.330
Objective-C moving forward.

00:03:51.330 --> 00:03:54.340
And as you might imagine,
and you've probably seen this and noticed

00:03:54.340 --> 00:03:57.990
this in the various developer previews,
we are adding new APIs and we are

00:03:57.990 --> 00:04:01.900
adding new features and we are exposing
them in both Java and Objective-C.

00:04:02.050 --> 00:04:05.430
So we have not stopped
improving Objective-C.

00:04:07.090 --> 00:04:10.820
and we do intend to support
Objective-C for the foreseeable future.

00:04:10.970 --> 00:04:15.190
So if you want to write Objective-C,
you can.

00:04:39.700 --> 00:04:39.700
And as you can imagine,
internally at Apple,

00:04:39.700 --> 00:04:39.700
we're writing applications
in both Java and Objective-C.

00:04:39.700 --> 00:04:39.700
We both obviously want to be banging
on both stacks and both APIs,

00:04:39.700 --> 00:04:39.700
and we want to improve both.

00:04:39.700 --> 00:04:39.700
So internally,
we're using both APIs to write apps.

00:04:39.700 --> 00:04:39.700
And it's possible to write large,
big applications, full-featured,

00:04:39.700 --> 00:04:39.700
using both of these languages.

00:04:40.780 --> 00:04:44.700
Okay, so now on to what's new in Cocoa.

00:04:44.700 --> 00:04:47.740
Here we're just going to go
through some of the changes,

00:04:47.740 --> 00:04:49.690
the new APIs, and so on and so forth.

00:04:49.770 --> 00:04:52.150
This is going to be the bulk of the talk.

00:04:52.670 --> 00:04:58.140
Okay, we're going to go through changes
in Aqua and changes that having the

00:04:58.140 --> 00:05:00.840
finder in the system have brought us.

00:05:00.840 --> 00:05:06.120
And then some of the changes brought
on with the Quartz and the OpenGL,

00:05:06.120 --> 00:05:08.360
the new graphic subsystems in the system.

00:05:08.500 --> 00:05:11.360
And also the Umbrella frameworks,
which you've heard about in

00:05:11.380 --> 00:05:12.820
some of the other sessions.

00:05:12.820 --> 00:05:16.300
And then we'll also cover a few of
the other new interesting features

00:05:16.300 --> 00:05:18.510
that we've added since last WWDC.

00:05:19.140 --> 00:05:19.830
So Aqua.

00:05:20.120 --> 00:05:21.940
If you were at Don Lindsey's
talk on Monday,

00:05:21.940 --> 00:05:25.080
you heard all about the
design philosophy behind Aqua,

00:05:25.080 --> 00:05:30.160
and you saw some of the really
deep thought that went into

00:05:30.160 --> 00:05:31.430
some of those elements in Aqua.

00:05:31.440 --> 00:05:34.400
And it is the new user
experience for Mac OS X.

00:05:34.400 --> 00:05:36.320
It is the user experience.

00:05:36.320 --> 00:05:41.140
It's not very tweedical, changeable,
but we hope to make it great.

00:05:43.020 --> 00:05:45.510
Aqua impacts the user
experience in multiple ways.

00:05:45.510 --> 00:05:48.920
It changes the look and
feel of existing controls,

00:05:48.920 --> 00:05:51.200
and also their sizes and
layouts in some cases.

00:05:51.200 --> 00:05:53.970
It also introduces some new interactions.

00:05:54.110 --> 00:05:56.890
It changes some of the
way menus are laid out,

00:05:56.890 --> 00:05:57.690
and so on.

00:05:59.810 --> 00:06:03.340
So the changes in the
look and layout includes,

00:06:03.410 --> 00:06:04.990
for instance, a new system font.

00:06:05.150 --> 00:06:09.570
The new system font that's used
in Aqua is Lucida Grande 13 point.

00:06:09.730 --> 00:06:12.950
And so that's the font you've been
seeing in all of the applications.

00:06:12.950 --> 00:06:15.290
There's obviously a
new background pattern.

00:06:15.300 --> 00:06:16.300
A lot of you know that.

00:06:16.300 --> 00:06:17.270
Can you see it up there?

00:06:17.490 --> 00:06:19.640
There it is, magnified,
our background pattern.

00:06:19.640 --> 00:06:22.520
This is, you know,
in the backgrounds of windows and so on,

00:06:22.520 --> 00:06:24.100
in the backgrounds of menus.

00:06:24.100 --> 00:06:26.190
We have larger controls.

00:06:26.190 --> 00:06:31.910
Now, turns out controls are not taller,
but in some cases they're wider.

00:06:32.390 --> 00:06:35.590
Because the buttons, for instance,
have longer end caps,

00:06:35.690 --> 00:06:39.100
so the cancel and okay buttons
both end up being somewhat wider.

00:06:39.180 --> 00:06:43.040
But in most cases they're not taller
than they were in the platinum space.

00:06:43.100 --> 00:06:45.720
They also have updated
inter-control spacing.

00:06:45.720 --> 00:06:48.980
Some of the spacing rules between
controls have been updated,

00:06:49.140 --> 00:06:53.100
fine-tuned, and you can read about these
in the Aqua layout guidelines.

00:06:53.100 --> 00:06:54.020
Another thing we've
changed is the layout.

00:06:54.110 --> 00:06:56.100
Another thing we've changed is
the window frames and shadows.

00:06:56.100 --> 00:06:58.770
Don't look at the cat,
look at the borders, and you can see,

00:06:58.770 --> 00:07:01.100
you know,
there's nice little buttons and so on,

00:07:01.100 --> 00:07:03.100
and we've introduced those into Aqua.

00:07:03.100 --> 00:07:06.100
And also the semi-transparent
inactive titles.

00:07:06.100 --> 00:07:10.050
And also semi-transparent
menus are also new in Aqua.

00:07:10.180 --> 00:07:13.100
In the interaction area,
we've changed a bunch of things.

00:07:13.100 --> 00:07:15.100
For instance, the menu layout.

00:07:15.310 --> 00:07:19.230
Currently the application menu
has application-centric elements,

00:07:19.230 --> 00:07:20.940
file menu, edit menu, etc.

00:07:21.210 --> 00:07:23.100
So some of the elements have moved around
from where they were in the application.

00:07:23.320 --> 00:07:26.080
From where they were in
Mac OS X server and Mac OS 9.

00:07:26.120 --> 00:07:28.100
We have pulsating buttons.

00:07:28.100 --> 00:07:30.100
I couldn't make PowerPoint pulse.

00:07:30.100 --> 00:07:32.100
I didn't try very hard, so imagine.

00:07:32.100 --> 00:07:34.060
Sheets.

00:07:34.180 --> 00:07:36.030
We have sheets,
and you've seen demos of those.

00:07:36.110 --> 00:07:38.100
We'll go over those today.

00:07:38.360 --> 00:07:40.300
We have drawers.

00:07:40.800 --> 00:07:42.000
We have dynamic resizing.

00:07:42.260 --> 00:07:45.440
As you resize that window,
the contents reflow on the fly.

00:07:45.750 --> 00:07:48.420
Similarly with split views,
as you move the split bar up

00:07:48.530 --> 00:07:51.910
and down in a splitter pane,
the both sides redraw

00:07:51.910 --> 00:07:53.740
dynamically on the fly.

00:07:53.880 --> 00:07:58.650
And we finally, of course, have the dock,
which is a very visible design

00:07:58.710 --> 00:08:01.110
element of the user experience.

00:08:01.290 --> 00:08:03.210
So some of these changes
are automatically picked

00:08:03.210 --> 00:08:04.770
up by the applications.

00:08:04.920 --> 00:08:06.580
You don't have to do any work for those.

00:08:06.610 --> 00:08:07.840
For instance, pulsating buttons.

00:08:07.840 --> 00:08:12.060
If you had a button which was set to
be the default button in a window,

00:08:12.160 --> 00:08:15.860
it will now pulsate as opposed
to draw a darker ring around it.

00:08:15.860 --> 00:08:17.510
The new system font is also picked up.

00:08:17.580 --> 00:08:19.820
If you are correctly
using the message font,

00:08:19.930 --> 00:08:23.250
which used to be charcoal,
it will now be lucida grande,

00:08:23.290 --> 00:08:26.180
except the size is not
automatically picked up.

00:08:26.180 --> 00:08:28.260
So that's one element
that's not automatic.

00:08:28.260 --> 00:08:32.190
The dynamic resizing of windows,
split bars, that's all automatic.

00:08:32.200 --> 00:08:33.700
Most views implement draw rect.

00:08:33.750 --> 00:08:38.910
Most views are quite proper in
how they refresh themselves,

00:08:38.990 --> 00:08:41.520
so dynamic resizing just works.

00:08:41.520 --> 00:08:42.960
And window frames and shadows, too.

00:08:42.960 --> 00:08:44.190
We showed those window frames.

00:08:44.280 --> 00:08:47.020
For the most part, most apps do not care
about the window frames.

00:08:47.020 --> 00:08:49.980
They're just focused on the content,
so things should work fine.

00:08:51.600 --> 00:08:53.400
Some of the changes are not so automatic.

00:08:53.420 --> 00:08:55.440
New control sizes and layout.

00:08:55.630 --> 00:08:57.550
If the buttons have gotten wider,
as you know,

00:08:57.550 --> 00:09:00.780
nibs don't automatically pick those up,
so your buttons might

00:09:00.780 --> 00:09:02.940
get clipped at the edges.

00:09:03.350 --> 00:09:05.120
Whoops.

00:09:05.120 --> 00:09:07.180
The menu layout is not
automatically picked up,

00:09:07.250 --> 00:09:10.740
so the quit items and stuff
don't move to the first menu.

00:09:10.850 --> 00:09:14.900
And sheets and drawers are new
features that you have to take explicit

00:09:15.250 --> 00:09:18.060
advantage of for your app to use them.

00:09:18.060 --> 00:09:19.800
But Interface Builder can help.

00:09:19.800 --> 00:09:22.850
So we have added a feature in the
Interface Builder where it will

00:09:22.850 --> 00:09:24.910
update your nib to a certain degree.

00:09:24.910 --> 00:09:29.070
And it helps with the menu layout,
it helps with control sizing and layout,

00:09:29.170 --> 00:09:31.060
and it also helps with the fonts.

00:09:31.060 --> 00:09:32.720
You can find this feature in this menu.

00:09:32.720 --> 00:09:35.240
You can't miss it,
because the menu is quite large.

00:09:35.390 --> 00:09:39.980
Anyway, but there's an item that says
Apply Layout Guidelines to Window.

00:09:40.030 --> 00:09:42.170
I do want to show a quick demo of this.

00:09:42.170 --> 00:09:45.190
You can switch to demo one, please.

00:09:47.850 --> 00:09:52.840
Okay, so let me go into the nibs.

00:09:52.860 --> 00:09:55.960
Okay, so what I'm going to do is I'm
just going to open a few nibs,

00:09:55.960 --> 00:09:57.340
show you how they
looked in the old world,

00:09:57.410 --> 00:09:59.160
and show you what happens
to them when they're edited.

00:09:59.160 --> 00:10:01.470
One of them is this nib here.

00:10:01.480 --> 00:10:03.180
Ignore this other title bar.

00:10:03.180 --> 00:10:04.460
This is being opened in image program.

00:10:04.460 --> 00:10:07.280
So this is the way things used
to look in Mac OS X server.

00:10:07.280 --> 00:10:10.530
It's been a long time since
some of us have seen this,

00:10:10.620 --> 00:10:14.120
but this is one of the
preferences panels.

00:10:14.120 --> 00:10:16.350
I'll now open this in Interface Builder.

00:10:17.700 --> 00:10:23.530
So as you can see,
when you open it in Interface Builder,

00:10:26.300 --> 00:10:28.260
It already ends up doing
some of the work for you.

00:10:28.380 --> 00:10:31.940
Lucida is used where charcoal
was being used because that's

00:10:31.940 --> 00:10:33.200
already set to be the message font.

00:10:33.200 --> 00:10:35.690
However,
notice that this button looks a bit tight

00:10:35.810 --> 00:10:37.190
compared to what Aqua would like to see.

00:10:37.340 --> 00:10:40.290
So if we go to the interface builder,
that big menu,

00:10:40.290 --> 00:10:43.640
say Apply Layout Guidelines to Window,
the window will grow.

00:10:43.640 --> 00:10:45.990
Now one thing it doesn't
actually do is grow the window,

00:10:45.990 --> 00:10:47.060
but the contents grow.

00:10:47.060 --> 00:10:50.210
If you make the window bigger,
you'll see that the Start button is

00:10:50.210 --> 00:10:53.580
now a more aesthetically pleasing,
wider end cap type button.

00:10:53.580 --> 00:10:56.150
The text has changed to
be 13 point or larger.

00:10:56.370 --> 00:10:59.620
And these two radio buttons
have spaced themselves a little

00:11:00.030 --> 00:11:01.480
apart to fit the guidelines.

00:11:01.600 --> 00:11:02.920
So that's one case.

00:11:02.920 --> 00:11:05.100
Let's close that one.

00:11:07.290 --> 00:11:10.800
Another case here is
this services controller.

00:11:11.020 --> 00:11:11.050
Again, let's open.

00:11:11.050 --> 00:11:12.080
This is the way it looked.

00:11:12.110 --> 00:11:15.840
This is, I think, again,
in the preferences panel.

00:11:15.880 --> 00:11:17.940
And if we open

00:11:18.650 --> 00:11:21.590
This one turns out to be actually
look almost good enough even

00:11:21.590 --> 00:11:23.160
in Aqua without any changes.

00:11:23.160 --> 00:11:25.320
You'll notice again
the button is clipped.

00:11:25.320 --> 00:11:27.600
Again, if we go ahead and say
Apply UI Guidelines,

00:11:27.600 --> 00:11:28.900
things just grow.

00:11:28.900 --> 00:11:32.960
Now notice that this command does
do a pretty good job in some cases,

00:11:32.960 --> 00:11:35.650
but in other cases where
alignments are involved,

00:11:35.650 --> 00:11:38.760
it will not go ahead and
necessarily keep the alignments.

00:11:38.880 --> 00:11:41.720
That's because it doesn't know that these
two elements are related to each other.

00:11:41.720 --> 00:11:46.360
So in those cases, you know,
do that or whatever you would like.

00:11:46.360 --> 00:11:50.590
In some cases it will actually be worse,
but it is pretty good in that it fixes

00:11:50.690 --> 00:11:55.220
fonts and a lot of other subtle things
that would be very hard to get to.

00:11:55.220 --> 00:11:57.520
So let me also open one more here.

00:11:57.570 --> 00:12:00.220
There you go, there's a sound panel.

00:12:02.050 --> 00:12:05.120
This one opens up and the sliders end
up getting clipped a lot because they

00:12:05.160 --> 00:12:07.800
got a lot fatter since last time.

00:12:07.850 --> 00:12:11.100
Apply UI guidelines and you notice
all these end up looking good.

00:12:11.140 --> 00:12:12.670
This button gets clipped a bit.

00:12:12.680 --> 00:12:15.060
Again, a little tweaking.

00:12:15.060 --> 00:12:16.740
We'll fix that.

00:12:16.790 --> 00:12:23.930
One thing that this does is,
if it sees message font at 12 point,

00:12:23.980 --> 00:12:26.440
it will fix it up to message font at 13.

00:12:26.740 --> 00:12:30.030
Another hack we added in there
is if it sees Helvetica at 12,

00:12:30.090 --> 00:12:33.360
it will actually change that
to message font at 13 point.

00:12:33.440 --> 00:12:36.450
Because a lot of old nibs,
which were created before we

00:12:36.450 --> 00:12:40.720
added the dynamic font feature,
tended to use Helvetica at 12.

00:12:40.780 --> 00:12:46.350
And we finally said, 99% of the cases,
the person really meant message font.

00:12:46.440 --> 00:12:47.960
So we're changing those as well.

00:12:48.040 --> 00:12:50.130
But if you, for instance,
explicitly use charcoal or if you

00:12:50.240 --> 00:12:53.000
explicitly use some other font,
those will not be updated.

00:12:53.060 --> 00:12:56.660
Or if you use message font at 20 point,
for instance, it will remain 20 point.

00:12:56.780 --> 00:12:59.660
Okay, can we switch back to slides,
please?

00:13:04.540 --> 00:13:05.840
Slides?

00:13:05.840 --> 00:13:07.630
Thank you.

00:13:07.810 --> 00:13:09.540
OK.

00:13:09.660 --> 00:13:12.650
So one other thing to note
here is we have this concept of

00:13:12.790 --> 00:13:16.280
platform-specific resources where
you can have the same Nib file,

00:13:16.520 --> 00:13:19.300
but optimized for one
platform or the other.

00:13:19.300 --> 00:13:22.820
To differentiate
Mac OS X from Mac OS X Server,

00:13:22.850 --> 00:13:26.470
we have added the use of
these prefixes or suffixes.

00:13:26.570 --> 00:13:28.880
So if you, for instance,
have a sketch document that nib,

00:13:28.960 --> 00:13:31.400
a Nib file,
which is your generic Nib file,

00:13:31.400 --> 00:13:35.120
if you want to have a version that's
optimized for Mac OS X Server,

00:13:35.120 --> 00:13:37.830
you could add the
-Macintosh suffix onto that,

00:13:37.940 --> 00:13:38.890
and it will be opened.

00:13:39.180 --> 00:13:41.800
It'll be used correctly
on Mac OS X Server.

00:13:41.960 --> 00:13:45.220
So this is of interest to
applications where you're

00:13:45.350 --> 00:13:47.500
compiling for both platforms,
and you want to maintain

00:13:47.500 --> 00:13:48.420
resources for both.

00:13:48.690 --> 00:13:50.940
And these can even coexist
in the resources directory,

00:13:50.940 --> 00:13:53.800
obviously, because of this naming scheme.

00:13:54.750 --> 00:13:56.650
Okay, so drawers.

00:13:56.950 --> 00:13:59.440
Now let's talk about some of the
drawer features and some of the

00:13:59.440 --> 00:14:02.690
API that you can use to control them.

00:14:02.690 --> 00:14:05.570
So drawers are views that pop in
and out from the sides of a window.

00:14:05.950 --> 00:14:09.180
And now you will see one of
the wonders of PowerPoint.

00:14:09.340 --> 00:14:11.670
Here's a mail window,
and there's a drawer.

00:14:11.690 --> 00:14:14.200
Would you like to see that again?

00:14:14.360 --> 00:14:14.620
Drawer.

00:14:14.790 --> 00:14:20.490
Okay, so PowerPoint turns out to have
some hidden nice little features.

00:14:20.490 --> 00:14:20.490
So,

00:14:21.870 --> 00:14:23.760
The drawers are attached
to the parent window.

00:14:23.760 --> 00:14:25.500
So they're like a separate
window on the side,

00:14:25.590 --> 00:14:27.640
but when you move the parent window,
they move with it.

00:14:27.730 --> 00:14:30.010
And they're implemented
as a subclass of NSObject.

00:14:30.090 --> 00:14:32.120
So they're not a window or a panel.

00:14:32.300 --> 00:14:34.680
They're abstracted away from that.

00:14:34.830 --> 00:14:39.360
So the commonly used APIs in
sDrawer are these guys.

00:14:39.360 --> 00:14:41.710
You can imagine that you want
to have an API to open a drawer,

00:14:41.710 --> 00:14:44.160
close a drawer,
and these are target action methods.

00:14:44.160 --> 00:14:46.870
So you would connect it to
your button or whatever menu

00:14:46.880 --> 00:14:48.480
item that controls the drawer.

00:14:48.740 --> 00:14:51.240
You can also tell a drawer
to open on a certain edge,

00:14:51.240 --> 00:14:53.220
left, right, bottom, whatever.

00:14:53.300 --> 00:14:56.000
You can set the parent window,
set the content view.

00:14:56.000 --> 00:14:59.940
These basically determine where a drawer
is attached and what the contents are.

00:15:00.040 --> 00:15:03.670
You can also set a preferred edge,
so when open is called,

00:15:03.710 --> 00:15:07.470
this indicates which side
the drawer should open on.

00:15:07.580 --> 00:15:10.590
And you can also ask for the state
and ask for which edge it's on.

00:15:10.730 --> 00:15:14.150
Now notice that drawer can
actually be in three states,

00:15:14.480 --> 00:15:16.870
closed, open, and in transition.

00:15:16.990 --> 00:15:18.660
And that's because it actually takes
a few minutes to open the drawer.

00:15:18.680 --> 00:15:20.480
It takes time to open,
and during that time your

00:15:20.480 --> 00:15:21.520
app can still be active.

00:15:21.560 --> 00:15:23.800
The user can still be doing things.

00:15:23.940 --> 00:15:27.200
Now it turns out Interface Builder
does provide support for drawers.

00:15:27.360 --> 00:15:29.690
So you don't actually
have to use parent window,

00:15:29.690 --> 00:15:31.390
content window type methods.

00:15:31.400 --> 00:15:34.370
You can actually hook these up in
Interface Builder to your drawer,

00:15:34.370 --> 00:15:35.970
which is actually pretty good.

00:15:38.000 --> 00:15:38.980
And this drawer also has delegate.

00:15:39.020 --> 00:15:42.140
The delegate methods tell you basically
when the drawer is about to open,

00:15:42.140 --> 00:15:43.850
when it did open, when it will open.

00:15:44.160 --> 00:15:46.320
That way if you have a drawer
but you don't want to populate

00:15:46.370 --> 00:15:49.370
the contents at launch time,
you can wait until the drawer is about

00:15:49.370 --> 00:15:50.990
to be opened and populate at that point.

00:15:51.000 --> 00:15:54.000
So pretty straightforward delegate APIs.

00:15:54.510 --> 00:15:57.000
Okay, so now we'll talk a
little bit about sheets.

00:15:57.000 --> 00:16:00.000
Sheets are the document
model panels on a window.

00:16:00.000 --> 00:16:01.010
And you saw the demos.

00:16:01.010 --> 00:16:02.990
It does a little genie
effect to come down.

00:16:02.990 --> 00:16:06.000
And it's also attached to the window.

00:16:06.710 --> 00:16:09.980
Now,
the most interesting aspect of sheets,

00:16:10.030 --> 00:16:15.000
and the hardest as well,
is the fact that they are document model.

00:16:15.000 --> 00:16:19.000
What this means is when that window,
when a window has a sheet on it,

00:16:19.000 --> 00:16:21.990
you can still interact with the
other windows in the application.

00:16:22.000 --> 00:16:25.000
You can even bring down sheets
in other windows and so on.

00:16:25.000 --> 00:16:30.330
And this goes against the model,
the modality that we have introduced

00:16:30.330 --> 00:16:35.000
in NS application and throughout
the system all these years.

00:16:36.000 --> 00:16:39.000
Suddenly you're not blocking
all the events to other windows.

00:16:39.720 --> 00:16:44.000
So one of the implications
of this is run model method.

00:16:44.000 --> 00:16:46.330
You know,
when you say run model this panel,

00:16:46.330 --> 00:16:49.990
run model this alert and so on,
it now needs to return immediately

00:16:49.990 --> 00:16:52.960
so that other sheets can be brought
down and other things would happen.

00:16:53.470 --> 00:16:57.140
Otherwise you get into a stack-based
situation where one panel is down,

00:16:57.140 --> 00:16:59.830
another panel is down,
but if you cancel this panel,

00:16:59.940 --> 00:17:02.920
your stack is sort of screwed up
and you don't know what to do.

00:17:03.200 --> 00:17:04.000
So the run model has
to return immediately.

00:17:04.520 --> 00:17:07.950
And at a later point a callback
needs to be sent to tell you that

00:17:07.950 --> 00:17:09.930
the panel has been dismissed.

00:17:10.630 --> 00:17:14.000
And that's the model we
move towards with sheets.

00:17:16.000 --> 00:17:19.160
So DP4 has the new API to support sheets.

00:17:19.180 --> 00:17:21.480
The APIs are in three
separate categories,

00:17:21.480 --> 00:17:25.140
and there might be a few more APIs we're
adding going forward from here.

00:17:25.150 --> 00:17:28.030
The APIs that are currently there
are APIs for the safe panel,

00:17:28.030 --> 00:17:31.980
which also apply to the open panel,
I believe.

00:17:32.010 --> 00:17:34.100
Functions to run alert
panels doc-modally.

00:17:34.160 --> 00:17:38.460
So these are the simple three, two,
or one-button alert panels.

00:17:38.460 --> 00:17:42.390
And API in this application
to run any window doc-modally.

00:17:42.440 --> 00:17:45.250
So you can have any panel
and run it modally this way.

00:17:45.340 --> 00:17:49.240
and it'll be attached to your window,
come down as a sheet, and so on.

00:17:49.490 --> 00:17:51.570
So, as an example,
I'm going to show you the

00:17:51.690 --> 00:17:54.960
Safe Panel API and explain
to you how this one works.

00:17:54.990 --> 00:18:00.200
The Safe Panel API... Now,
if you remember the old Safe Panel API,

00:18:00.200 --> 00:18:03.540
it used to say "run model
for directory and file" and

00:18:03.540 --> 00:18:06.400
basically you gave the first two
arguments that you would see here.

00:18:06.400 --> 00:18:12.880
Here you see "path" and "name". Now we've
added four more arguments to the method.

00:18:13.030 --> 00:18:15.410
arguments are actually
fairly straightforward.

00:18:15.410 --> 00:18:17.450
Model for window,
that is the window that the

00:18:17.570 --> 00:18:19.720
panel should be attached to.

00:18:19.720 --> 00:18:23.870
The model delegate is the object
that wants to hear about that panel.

00:18:23.930 --> 00:18:28.840
And the did end selector is the selector
that will be sent to that model delegate.

00:18:28.870 --> 00:18:32.350
The model delegate is a temporary
one-time delegate that gets created,

00:18:32.480 --> 00:18:35.290
and the only message it will
get is the did end selector

00:18:35.290 --> 00:18:36.960
when the panel is dismissed.

00:18:37.060 --> 00:18:39.580
So that's all those two are.

00:18:39.640 --> 00:18:42.790
Finally, we've added an argument that
represents arbitrary user info

00:18:42.790 --> 00:18:43.990
that you can pass in there.

00:18:43.990 --> 00:18:45.820
It can be a struct,
it can be a dictionary,

00:18:45.820 --> 00:18:48.550
it can be anything you want,
it can be null.

00:18:48.620 --> 00:18:50.840
Sometimes we found it's good
to carry state between this

00:18:50.840 --> 00:18:54.830
method and the did end selector,
and this is a convenient way to do that.

00:18:54.860 --> 00:18:57.400
So what happens is this
will put up the sheet,

00:18:57.400 --> 00:18:58.630
and that's it.

00:18:58.780 --> 00:19:01.740
When the panel is dismissed,
the did end selector you

00:19:01.740 --> 00:19:03.340
specified will be called.

00:19:03.340 --> 00:19:05.710
Now note that the did end
selector can be called anything.

00:19:05.710 --> 00:19:08.240
The interesting thing about
this selector is it's signal.

00:19:08.250 --> 00:19:10.240
It's signature,
meaning which arguments it takes.

00:19:10.310 --> 00:19:11.930
It can take a sheet.

00:19:12.040 --> 00:19:13.740
It takes a sheet,
basically the sheet that

00:19:13.740 --> 00:19:15.050
you're running modal for.

00:19:15.050 --> 00:19:18.150
It takes the return code,
that's whether it was canceled

00:19:18.200 --> 00:19:19.760
or okayed or whatever.

00:19:19.810 --> 00:19:23.520
It also takes the context info that
you passed in in the first place.

00:19:23.880 --> 00:19:27.010
Now the reason that the selector can
be named anything and you specify this

00:19:27.040 --> 00:19:30.670
is sometimes in some context you might
bring up save panel three different ways,

00:19:30.670 --> 00:19:34.740
and each one should really have
a different did end indication

00:19:34.740 --> 00:19:36.770
so that you don't have to do ifs

00:19:38.280 --> 00:19:41.940
Now the alert panel API is
also like the old one,

00:19:41.940 --> 00:19:44.470
except it's grown a few arguments.

00:19:44.590 --> 00:19:46.600
We also moved some of
the arguments around.

00:19:46.600 --> 00:19:51.080
If you've ever used NS -- whatever
it's called -- run model alert or

00:19:51.080 --> 00:19:53.160
alert run model or one of those.

00:19:53.420 --> 00:19:56.860
It used to have the title,
then the message, then the buttons,

00:19:56.860 --> 00:19:58.340
and then the arguments to the message.

00:19:58.340 --> 00:20:02.140
So it was sort of a -- the
arguments were intermixed.

00:20:02.230 --> 00:20:03.590
We've moved the arguments around.

00:20:03.710 --> 00:20:06.260
But basically the title is
the title of your alert.

00:20:06.380 --> 00:20:08.560
The three buttons -- default button,
alternate button,

00:20:08.560 --> 00:20:10.220
other button -- appear next.

00:20:10.330 --> 00:20:12.600
Then you get the dock window
and the modal delegate,

00:20:12.710 --> 00:20:14.920
and the will end and did end selectors.

00:20:14.920 --> 00:20:16.650
In this case we have two selectors.

00:20:16.930 --> 00:20:18.800
One is shown to you before
the alert is dismissed.

00:20:18.900 --> 00:20:22.520
The other one is sent to you
when the alert is dismissed.

00:20:22.650 --> 00:20:25.260
And finally we have a context
just like the other case.

00:20:25.350 --> 00:20:28.690
And then at the end we have the message,
a format string,

00:20:28.830 --> 00:20:30.600
followed by all the arguments
like in the olden days.

00:20:30.600 --> 00:20:34.410
It's just we moved those to the
end and they're all together now.

00:20:38.470 --> 00:20:43.960
OK, so the implications of Sheets goes
beyond just adding these methods,

00:20:43.960 --> 00:20:44.960
it turns out.

00:20:44.960 --> 00:20:49.410
What do you do in methods which
have traditionally put up panels

00:20:49.630 --> 00:20:53.210
to get a response from the
user and then return yes or no?

00:20:53.210 --> 00:20:55.200
And those include window should close.

00:20:55.230 --> 00:20:57.700
For instance,
when the user hits the close button,

00:20:57.700 --> 00:20:59.950
typically the delegate
gets window should close.

00:21:00.160 --> 00:21:03.770
Window should close puts up a panel,
the user responds save or don't save,

00:21:03.770 --> 00:21:07.010
and finally when the user is done,
that all returns and that

00:21:07.010 --> 00:21:09.460
method returns yes or no,
indicating that the

00:21:09.460 --> 00:21:11.580
window is safe to close.

00:21:11.620 --> 00:21:13.500
And application should
terminate is another one.

00:21:14.790 --> 00:21:18.310
Now these guys, if they run Sheets,
the Sheets will return immediately,

00:21:18.390 --> 00:21:22.510
and these guys, they don't know whether
to return yes or no,

00:21:22.570 --> 00:21:25.250
because the operation is still ongoing.

00:21:25.880 --> 00:21:30.960
Okay, so currently the thought is
if a panel needs to be put up,

00:21:31.120 --> 00:21:35.440
put up the panel and return no,
indicating do not close the window,

00:21:35.550 --> 00:21:37.450
do not terminate the application.

00:21:37.600 --> 00:21:42.500
Then in the callback, finally,
once the user is done with that panel,

00:21:42.800 --> 00:22:01.100
[Transcript missing]

00:22:03.200 --> 00:22:08.700
Now, in DP3 we had added some sheet APIs,
and we are deprecating those.

00:22:08.770 --> 00:22:11.090
They are there in DP4,
but you should not use them.

00:22:11.130 --> 00:22:13.040
They are marked that
way in the header file.

00:22:13.390 --> 00:22:16.160
These are the runModalForWindow
relative to window APIs,

00:22:16.160 --> 00:22:20.040
which assume a modal, you call it,
and then it returns type behavior.

00:22:20.200 --> 00:22:22.090
So don't use those methods.

00:22:22.170 --> 00:22:27.940
The APIs we had for a long time,
the runModal APIs, runModalForWindow,

00:22:27.940 --> 00:22:30.100
those are going to stay.

00:22:30.100 --> 00:22:33.100
Those will still run
modal panels app-modally.

00:22:33.100 --> 00:22:35.020
It appears in the middle of the screen.

00:22:35.160 --> 00:22:36.900
That's like the olden days,
and there are still cases

00:22:36.900 --> 00:22:38.100
where those are appropriate.

00:22:38.100 --> 00:22:40.790
So those APIs will stay
and you can use them.

00:22:41.120 --> 00:22:44.280
Now, one thing to note is in DP4,
NSDocument does not make

00:22:44.480 --> 00:22:45.710
full use of the new APIs.

00:22:45.840 --> 00:22:48.660
Although NSDocument will
put up sheets and so on,

00:22:48.810 --> 00:22:52.230
it doesn't make use of a
lot of the newest features,

00:22:52.370 --> 00:22:54.680
so in some cases you
might notice odd behavior.

00:22:54.840 --> 00:23:00.120
The good news is we are fixing that bug,
so if you have a NSDocument-based app,

00:23:00.120 --> 00:23:02.890
it will be fixed in the next drop.

00:23:02.940 --> 00:23:05.890
Okay, so let me demo sheets for you now.

00:23:09.560 --> 00:23:10.110
Whoa!

00:23:10.280 --> 00:23:11.610
Okay.

00:23:11.800 --> 00:23:12.970
Let's quit that.

00:23:13.000 --> 00:23:14.860
Let's quit that.

00:23:15.040 --> 00:23:16.640
Okay, so for one thing,
let me show you in the

00:23:16.640 --> 00:23:20.100
context of TextEdit some of
the subtleties of Sheets.

00:23:20.210 --> 00:23:21.500
Close this.

00:23:21.720 --> 00:23:23.740
Okay, so let me open a document.

00:23:23.740 --> 00:23:28.740
I will go.

00:23:28.740 --> 00:23:30.740
Open a release note.

00:23:33.930 --> 00:23:35.750
So now I'm going to go ahead
and attempt to save this.

00:23:35.810 --> 00:23:39.890
Note that this is an HTML file,
and TextSet does not save an HTML file.

00:23:40.010 --> 00:23:41.600
So when you try to do this,
you get this warning.

00:23:41.600 --> 00:23:42.900
Can't save HTML.

00:23:42.900 --> 00:23:44.400
Should we save as RTF?

00:23:44.400 --> 00:23:48.340
So this is like the beginning of
a chain of these doc model panels.

00:23:48.350 --> 00:23:50.580
Note that while this is up,
I can go in here,

00:23:50.580 --> 00:23:52.030
and I can continue typing.

00:23:52.030 --> 00:23:55.720
I can even try to close this window,
which will put up another panel.

00:23:56.680 --> 00:24:01.080
Anyway, for instance, down here,
if I say, supply a new name, okay,

00:24:01.390 --> 00:24:03.910
this now will drop a save
panel for me to type in.

00:24:03.910 --> 00:24:07.940
And while this guy,
I can still type and do other things in.

00:24:07.940 --> 00:24:10.250
And here I can type some file name.

00:24:10.250 --> 00:24:14.600
For instance, I can type a file name that
it won't be able to save in,

00:24:14.640 --> 00:24:16.390
because it's in slash.

00:24:17.070 --> 00:24:20.750
and it will put up another alert
telling me couldn't save as test.rtf.

00:24:20.750 --> 00:24:24.100
During this whole time,
these other windows are accessible.

00:24:24.100 --> 00:24:26.100
I can bring up new windows and so on.

00:24:26.100 --> 00:24:28.930
So basically,
you can see that there's a chain

00:24:29.060 --> 00:24:30.410
of calls here that are happening.

00:24:30.610 --> 00:24:36.880
I will show you this as an example in
the context of a simpler application now.

00:24:36.880 --> 00:24:43.860
Okay, actually, open a project.

00:24:43.870 --> 00:24:52.640
Okay, here we have a simple example.

00:24:52.640 --> 00:24:55.390
Let me actually run it for you.

00:25:02.820 --> 00:25:04.300
So here's our simple example.

00:25:04.450 --> 00:25:09.260
This example lets me type,
and then it lets me save as.

00:25:09.270 --> 00:25:12.680
So this is basically a modal panel,
but it's doc modal because I can bring

00:25:12.680 --> 00:25:15.060
up an about panel while that's up.

00:25:15.060 --> 00:25:18.740
And if I try to save it
to an illegal location,

00:25:18.830 --> 00:25:21.880
it will tell me that it couldn't save,
and it will let me try again by

00:25:21.880 --> 00:25:23.650
bringing up the save panel again.

00:25:23.660 --> 00:25:26.500
So I'll just show you the
code for this little example.

00:25:54.030 --> 00:25:54.600
Okay, other than the administrator
at the beginning,

00:25:54.600 --> 00:25:54.600
we basically have the Save As method,
and this one creates a save panel,

00:25:54.600 --> 00:25:54.600
it sets the required file type,
and then it just begins

00:25:54.600 --> 00:25:54.600
sheets for directory.

00:25:54.600 --> 00:25:54.600
That's it.

00:25:54.600 --> 00:25:54.600
And as you can see,
it's fairly straightforward.

00:25:54.600 --> 00:25:54.600
It runs modally for the window,
specifies self,

00:25:54.600 --> 00:25:54.600
and the selector is End Save Sheet.

00:25:54.600 --> 00:25:54.600
That's it.

00:25:54.600 --> 00:25:54.600
So when the save panel is done,
this method will be called.

00:25:54.640 --> 00:25:56.210
So, and there's this method here.

00:25:56.350 --> 00:25:58.780
So this method is pretty straightforward.

00:25:58.800 --> 00:26:01.370
If the code is OK,
meaning the user did not cancel,

00:26:01.500 --> 00:26:05.610
this just simply gets the file name out
of the save panel and attempts to save.

00:26:05.610 --> 00:26:08.670
This is just a local method we
have which attempts to save,

00:26:08.750 --> 00:26:10.200
returns yes or no.

00:26:10.360 --> 00:26:13.790
If the save fails,
we go ahead and we put up an alert

00:26:13.790 --> 00:26:16.950
panel and we say couldn't save,
try again, cancel.

00:26:17.070 --> 00:26:19.570
And here we specify as
a selector another one,

00:26:19.680 --> 00:26:21.620
and can't save alert.

00:26:21.620 --> 00:26:26.610
And this method itself,
if the OK button is pressed in the alert,

00:26:26.940 --> 00:26:29.380
goes back to call save as,
which is basically the

00:26:29.570 --> 00:26:31.040
thing that started this.

00:26:31.040 --> 00:26:33.200
So as you can see,
instead of having what would

00:26:33.200 --> 00:26:37.790
traditionally be a large method here,
it gets broken up into three pieces with

00:26:37.850 --> 00:26:41.180
the callbacks providing the continuation.

00:26:41.180 --> 00:26:44.660
OK.

00:26:44.660 --> 00:26:47.070
So can we go back to slides, please?

00:26:56.900 --> 00:26:57.910
Pattern Colors.

00:26:57.910 --> 00:26:59.550
Another thing we've
added is Pattern Colors.

00:26:59.560 --> 00:27:02.550
As you know, we've added the Pattern
Background support,

00:27:02.550 --> 00:27:04.790
and Quartz also has
facilities for patterns,

00:27:04.790 --> 00:27:07.970
so we've decided to bring the
Pattern feature into NSColor as

00:27:08.010 --> 00:27:09.800
a publicly available feature.

00:27:09.800 --> 00:27:12.530
So basically,
you get NSColor instances which,

00:27:12.620 --> 00:27:15.800
when painting,
use patterns instead of solid colors.

00:27:15.800 --> 00:27:17.650
To support this,
we've added a new color space,

00:27:17.650 --> 00:27:21.800
the NSPatternColor space,
and we've added two new methods:

00:27:22.020 --> 00:27:24.800
the ColorWithPatternImage
and PatternImage.

00:27:24.960 --> 00:27:29.310
So you give it an NSImage,
no matter what kind of image, PDF, JPEG,

00:27:29.400 --> 00:27:34.800
TIFF, and it creates an NSColor for you,
and you can also ask for its pattern.

00:27:36.230 --> 00:27:38.800
Now,
one thing to note about pattern colors,

00:27:38.840 --> 00:27:40.770
and this has always
been true of NS colors,

00:27:40.830 --> 00:27:43.960
but I think it's good to
repeat this every few years.

00:27:43.960 --> 00:27:47.680
Pattern colors do not have
traditional components like red,

00:27:47.680 --> 00:27:48.760
green, blue.

00:27:48.760 --> 00:27:51.280
What this means,
if you have a pattern color and

00:27:51.280 --> 00:27:53.990
you ask for the red component,
that is an error,

00:27:53.990 --> 00:27:56.040
because it just does not
have a red component.

00:27:56.040 --> 00:27:59.820
In the pattern color space,
the only component is the pattern image.

00:28:00.720 --> 00:28:02.670
So, if you have some color,
and if you don't know

00:28:02.740 --> 00:28:05.260
where that color has been,
and you want to be robust,

00:28:05.260 --> 00:28:08.950
you should convert that color to
the calibrated RGB color space,

00:28:09.030 --> 00:28:12.280
if you want to get the RGB,
and then ask for its red component.

00:28:12.280 --> 00:28:15.640
Note that that call might return null,
meaning this color cannot

00:28:15.730 --> 00:28:18.430
be represented in RGB,
in which case you should do

00:28:18.600 --> 00:28:21.890
whatever is appropriate with
the component you want to do.

00:28:21.900 --> 00:28:23.970
You should use black,
or you should just use some other color.

00:28:23.980 --> 00:28:26.820
And this is just good
programming practice with colors.

00:28:26.840 --> 00:28:29.160
And so far, we have this, of course,
with system colors,

00:28:29.160 --> 00:28:30.620
which are also not traditional.

00:28:30.640 --> 00:28:31.550
They're not traditional RGB colors.

00:28:31.560 --> 00:28:35.260
CMYK is even, with CMYKs,
you can get into this case.

00:28:37.740 --> 00:28:41.090
We've also added the
concept of a control tint.

00:28:41.110 --> 00:28:44.850
As you notice,
the buttons are that lovely blue

00:28:44.850 --> 00:28:46.980
when they're active or pulsating.

00:28:47.020 --> 00:28:51.160
And the question might come up,
if we want to change that blue a bit,

00:28:51.210 --> 00:28:55.100
if we change the tint or whatever,
what should you do if you want

00:28:55.100 --> 00:28:57.940
to have your own controls which
are not based on NSButton?

00:28:58.120 --> 00:29:00.550
Well,
instead of using NSColors explicitly,

00:29:00.550 --> 00:29:04.080
we've added the concept of color tints,
and there's two of them.

00:29:04.080 --> 00:29:06.080
The default color tint,
which represents all the blues

00:29:06.080 --> 00:29:08.670
that are around the system,
and the clear control tint,

00:29:08.740 --> 00:29:12.880
which is also used for some controls,
which appear clear.

00:29:12.880 --> 00:29:15.380
So basically,
you'd set a button's color by

00:29:15.380 --> 00:29:17.880
using one of these two values.

00:29:17.920 --> 00:29:21.010
And similarly, if you wanted to get the
NSColor corresponding to a tint,

00:29:21.010 --> 00:29:23.690
you would call this NSColor method,
which will return to

00:29:23.690 --> 00:29:26.360
you that shade of blue,
which then you can use to go ahead

00:29:26.490 --> 00:29:29.400
and create other controls or whatever.

00:29:29.400 --> 00:29:31.630
Now note that this last
method is actually not in DP4,

00:29:31.680 --> 00:29:34.170
so it's going to come
as soon as possible.

00:29:36.100 --> 00:29:38.150
So the font panel,
just a few words about that.

00:29:38.240 --> 00:29:41.310
The font panel now provides
multiple panels in it,

00:29:41.400 --> 00:29:45.860
multiple panes,
and it allows you to manage your

00:29:45.990 --> 00:29:48.000
favorites and manage collections.

00:29:48.070 --> 00:29:51.710
And we don't have any APIs in place yet,
but we're thinking that we might

00:29:51.710 --> 00:29:55.740
at some point add APIs to let
applications manage or add collections

00:29:55.740 --> 00:29:57.880
to the font panel dynamically.

00:29:58.000 --> 00:30:01.150
And one other thing to note
about this font panel is that

00:30:01.220 --> 00:30:03.770
it no longer has a set button,
so it's immediate

00:30:03.770 --> 00:30:05.000
action on your document.

00:30:05.000 --> 00:30:08.980
We were not sure of this change at
first as to how it would behave,

00:30:09.080 --> 00:30:11.980
but it seems to behave very well.

00:30:12.000 --> 00:30:15.400
It's zippy and it makes sense,
so I think it's going

00:30:15.460 --> 00:30:17.000
to be kept that way.

00:30:17.720 --> 00:30:20.470
The Safe Panel also has some
new APIs and some changes.

00:30:20.580 --> 00:30:23.200
One of the big changes is that
when it now pops up by default,

00:30:23.200 --> 00:30:24.530
it's small.

00:30:24.560 --> 00:30:27.400
We call that the simple mode,
or the unexpanded mode.

00:30:27.510 --> 00:30:31.150
There's a new API that tells you whether
the Safe Panel is expanded or not.

00:30:31.270 --> 00:30:34.150
And there's also a delegate
API that tells you it's about to

00:30:34.150 --> 00:30:35.950
expand or it's about to collapse.

00:30:36.060 --> 00:30:40.650
And this would let you maybe do more
sophisticated things to the Safe Panel,

00:30:40.770 --> 00:30:44.220
like add more accessory views
or do something if you know

00:30:44.220 --> 00:30:46.140
that it's about to expand.

00:30:46.240 --> 00:30:48.390
There's obviously also the
API that we showed you earlier

00:30:48.490 --> 00:30:50.800
for the new DocModel behavior.

00:30:50.950 --> 00:30:55.180
Okay, so I'm going to show you the
Font and Save panels now.

00:30:55.290 --> 00:30:57.290
Demo, thank you.

00:30:59.990 --> 00:31:03.280
Okay, so let's close this window.

00:31:03.280 --> 00:31:06.850
Okay, so first the font panel.

00:31:06.890 --> 00:31:09.460
There's the font panel,
and you'll notice that there's

00:31:09.460 --> 00:31:12.900
a pop-up in here which lets you
specify collections and so on.

00:31:13.020 --> 00:31:16.920
Once if I select a font here, Palatino,

00:31:17.160 --> 00:31:19.390
30 add to favorites.

00:31:19.490 --> 00:31:20.940
Go to my favorites.

00:31:21.010 --> 00:31:23.360
Now I have two because
I already added one earlier.

00:31:23.390 --> 00:31:24.830
I can go back to the fonts.

00:31:24.830 --> 00:31:28.430
I can choose another font,
New York Regular, add to favorites.

00:31:28.520 --> 00:31:29.940
It will be in my favorites.

00:31:29.940 --> 00:31:32.810
And here by one click,
I'm basically selecting that font.

00:31:32.900 --> 00:31:36.540
It's at a certain font size,
certain family, certain face.

00:31:36.570 --> 00:31:38.400
We also have the collections.

00:31:38.440 --> 00:31:40.510
I have the old fonts
collection by default.

00:31:40.560 --> 00:31:41.770
I can add a new collection.

00:31:41.840 --> 00:31:44.390
And let's say I call it Nice Fonts.

00:31:44.390 --> 00:31:47.960
I can go ahead and
choose fonts from here.

00:31:48.000 --> 00:31:50.240
Palatino, add it in there.

00:31:50.240 --> 00:31:52.080
New York, add it in there.

00:31:52.310 --> 00:31:54.180
Helvetica, add it in there.

00:31:54.180 --> 00:31:57.480
So when we go back to the fonts pane,
all fonts gives me everything.

00:31:57.480 --> 00:32:00.680
Nice Fonts gives me basically
a subset that I've chosen.

00:32:00.720 --> 00:32:03.370
And it's a good way to
categorize your fonts,

00:32:03.370 --> 00:32:05.290
especially if you happen to have

00:32:09.570 --> 00:32:12.100
Now, I said I was going to
demo the Save Panel,

00:32:12.100 --> 00:32:14.090
but I think you've already
seen the Save Panel enough.

00:32:14.160 --> 00:32:15.540
There's the Save Panel.

00:32:15.540 --> 00:32:16.690
You can expand it.

00:32:17.010 --> 00:32:17.380
There you go.

00:32:17.380 --> 00:32:18.200
That's the big version.

00:32:18.200 --> 00:32:19.600
And that's the small version.

00:32:19.600 --> 00:32:23.060
One thing to note in the big version is
that there's an Add to Favorites feature.

00:32:23.060 --> 00:32:27.450
So if I go ahead and, for some reason,
let's say I want to go System,

00:32:27.450 --> 00:32:31.020
Documentation, Developer,
I can add that to the Favorites.

00:32:31.020 --> 00:32:33.790
It now starts appearing
in my favorite places.

00:32:33.820 --> 00:32:37.800
So that's just like the Font Panel,
allows you to group the things

00:32:37.800 --> 00:32:38.960
you like to go to often.

00:32:39.430 --> 00:32:41.380
It's actually,
we also have recent places,

00:32:41.380 --> 00:32:43.940
so you can always get to a
place you've visited recently.

00:32:43.940 --> 00:32:46.400
So that's it for the Save Panel.

00:32:46.400 --> 00:32:49.760
I was thinking I should also show
you one more thing while I'm here.

00:32:49.760 --> 00:32:52.660
So let's write Hello World.

00:32:52.660 --> 00:32:55.620
Let's give ourselves a nice big font.

00:32:55.620 --> 00:32:57.960
Let's even maybe even make it bold.

00:32:59.340 --> 00:33:00.860
Let's bring up the color panel.

00:33:00.890 --> 00:33:03.460
That's one panel we
haven't shown you before.

00:33:03.540 --> 00:33:06.320
So if I obviously change
the color and drag,

00:33:06.360 --> 00:33:07.900
that does what you expect.

00:33:07.930 --> 00:33:10.640
I talked about pattern colors earlier.

00:33:10.680 --> 00:33:14.120
If you go to the system color list,
you'll notice that some

00:33:14.180 --> 00:33:18.180
colors are now patterns,
because the control color and

00:33:18.190 --> 00:33:20.500
also a window background color,
which appears here,

00:33:20.670 --> 00:33:24.290
are actually that pattern that you
see in the backgrounds of windows.

00:33:24.430 --> 00:33:27.860
If I choose that color,
by dragging on top of my text,

00:33:27.890 --> 00:33:29.330
it now starts drawing with the pattern.

00:33:29.540 --> 00:33:33.840
As you can imagine, no code changes.

00:33:33.850 --> 00:33:36.260
I don't know if you can see that,
but you can certainly see this.

00:33:36.400 --> 00:33:39.580
So basically,
most well-behaved code should

00:33:39.580 --> 00:33:42.420
start adopting and using patterns,
no problem.

00:33:42.490 --> 00:33:45.340
Sketch also, for instance,
turns out to use patterns very well.

00:33:45.380 --> 00:33:48.380
There will turn out to be
some problems in some cases.

00:33:48.380 --> 00:33:50.010
For instance,
the RTF spec does not let you

00:33:50.200 --> 00:33:53.250
store patterns for colors,
so if you save this to RTF, read it back,

00:33:53.270 --> 00:33:54.760
the patterns will be gone.

00:33:55.050 --> 00:33:57.130
But anyway, again, in some uses of text,
this might be fairly

00:33:57.170 --> 00:33:57.620
handy to have patterns.

00:33:57.710 --> 00:34:00.940
You can see that patterns
pop up like this.

00:34:00.940 --> 00:34:04.000
OK, that's it for that.

00:34:04.000 --> 00:34:05.730
Slides, please.

00:34:08.190 --> 00:34:09.340
Okay, Finder interaction.

00:34:09.340 --> 00:34:14.200
Now let's talk about some of the new
features added because of the presence

00:34:14.280 --> 00:34:17.390
of Finder and some more sophisticated
interaction with the system.

00:34:17.520 --> 00:34:21.080
Reopen events, app packaging, Info.plist,
and icons are what I'm

00:34:21.190 --> 00:34:22.390
going to talk about here.

00:34:22.520 --> 00:34:24.480
So reopen events.

00:34:24.520 --> 00:34:27.490
As you know, in the old Mac OS,

00:34:28.040 --> 00:34:31.740
One of the problems that new users
would get into was they would close

00:34:31.740 --> 00:34:35.000
the last document in an application,
then they might switch

00:34:35.050 --> 00:34:38.340
to another application,
switch back, and although the menu bar

00:34:38.340 --> 00:34:40.300
would change to indicate they
were in the new application,

00:34:40.300 --> 00:34:42.660
they might not know they were in
the new application because there

00:34:42.710 --> 00:34:44.200
was no open window to indicate this.

00:34:44.200 --> 00:34:49.180
And this was solved in Mac OS by
adding this concept of a reopen event.

00:34:49.570 --> 00:34:52.180
Whenever you go back into an application,
the application receives

00:34:52.180 --> 00:34:54.220
this Apple event,
which indicates to the app,

00:34:54.270 --> 00:34:56.900
you're being reactivated,
do something appropriate.

00:34:56.900 --> 00:35:00.750
So, Cocoa applications on 10
will receive this event.

00:35:00.750 --> 00:35:03.900
We obviously take care of it,
package it in some other format for you,

00:35:03.900 --> 00:35:06.610
and one thing we do is we send
it to you in this delegate

00:35:06.610 --> 00:35:07.890
method for an application.

00:35:07.920 --> 00:35:09.890
Applications should handle reopen.

00:35:10.170 --> 00:35:11.900
Has visible windows.

00:35:12.900 --> 00:35:16.160
So,
the idea with this is you implement it

00:35:16.160 --> 00:35:19.770
to do something custom in the case of
reopening documents or reactivating.

00:35:19.790 --> 00:35:24.210
The Has Visible Windows flag
tells you whether there are any

00:35:24.210 --> 00:35:25.630
visible windows on the screen.

00:35:25.890 --> 00:35:28.550
So if you implemented this,
probably what you would do is

00:35:28.550 --> 00:35:31.080
if Has Visible Windows is no,
you would go ahead and

00:35:31.080 --> 00:35:31.790
open a new document.

00:35:31.900 --> 00:35:34.670
Or you might choose,
if your documents were heavyweight,

00:35:34.740 --> 00:35:37.900
instead to put up an About panel
or a new document creation panel.

00:35:37.900 --> 00:35:38.930
It's up to you.

00:35:39.090 --> 00:35:42.860
If you do not implement this method,
or if you implement this

00:35:42.860 --> 00:35:45.870
method and return Yes,
which means you're not handling it,

00:35:45.870 --> 00:35:48.590
the application should handle it,
then we will simply call the

00:35:48.590 --> 00:35:51.280
application Open Untitled
File Delegate method for you,

00:35:51.280 --> 00:35:53.570
which will create a
new untitled document.

00:35:53.580 --> 00:35:57.160
And so this is something good to
add to your app if you want to be

00:35:57.160 --> 00:35:59.580
sophisticated about this handling.

00:36:02.550 --> 00:36:05.670
So we have changed the app
packaging since Mac OS X Server.

00:36:05.680 --> 00:36:08.190
In fact, we changed it twice.

00:36:09.310 --> 00:36:12.550
So this was what we had in
Mac OS X Server and in DP1.

00:36:12.550 --> 00:36:16.620
Texted it to that app, texted it,
and resources.

00:36:16.860 --> 00:36:21.110
In DP2, our heart was in the right place,
but we were a bit verbose.

00:36:21.330 --> 00:36:25.800
We have support files, executables,
Mac OS X, TextEdit, resources.

00:36:25.920 --> 00:36:29.730
And, I mean, again, the idea here was to
support multiple platforms,

00:36:29.730 --> 00:36:31.800
multiple executables, and so on.

00:36:31.800 --> 00:36:35.800
In DP3, we changed this around a bit to
make the path a little shorter,

00:36:35.800 --> 00:36:38.260
but again,
the same functionality is available.

00:36:38.340 --> 00:36:41.130
You can have multiple executables,
multiple platforms,

00:36:41.140 --> 00:36:44.510
multiple localizations,
all the same functionality is in there.

00:36:45.280 --> 00:36:47.860
So that's what we did in DP3.

00:36:47.910 --> 00:36:52.290
Now, you might look at this and say,
"How do you support this?" Well,

00:36:52.290 --> 00:36:55.280
those of you who use NSBundle know
NSBundle is your friend.

00:36:55.320 --> 00:36:59.220
It will protect you from
all of these changes.

00:36:59.260 --> 00:37:02.930
I think Scott Forstall
used a shoe store analogy,

00:37:02.930 --> 00:37:04.320
which is pretty appropriate.

00:37:04.370 --> 00:37:08.130
Good news is in DP4 we have not
changed the packaging format.

00:37:08.280 --> 00:37:11.320
And the other good news is
Project Builder will build for you

00:37:11.320 --> 00:37:13.170
the new packaging format by default.

00:37:13.200 --> 00:37:15.680
So you go to Project Builder,
you create a new application, you build,

00:37:15.750 --> 00:37:20.630
you get content/macOS/executable_name,
which is what you would want,

00:37:20.750 --> 00:37:22.200
which is what the installed app will be.

00:37:22.200 --> 00:37:24.950
The old Project Builder,
Project Builder Woe,

00:37:25.220 --> 00:37:28.340
does not build the new format
unless you specify this bundle

00:37:28.340 --> 00:37:30.070
style key in the make file.

00:37:30.380 --> 00:37:33.200
And even then, it only builds it when
you do make install.

00:37:33.200 --> 00:37:35.460
So if you're still using
the old make files,

00:37:35.460 --> 00:37:38.910
the old Project Builder,
you might want to watch out for this.

00:37:39.410 --> 00:37:41.200
Info.plist.

00:37:41.380 --> 00:37:44.070
The Info.plist is, again,
used by old bundles.

00:37:44.090 --> 00:37:46.280
You've probably heard about it
many times in many sessions.

00:37:46.280 --> 00:37:49.870
It's present in all the app packages,
Carbon or Cocoa.

00:37:49.940 --> 00:37:52.300
It's now an XML file.

00:37:52.360 --> 00:37:55.170
And the good news is the
values for these now can be

00:37:55.170 --> 00:37:58.910
directly set in Project Builder,
instead of having to create a

00:37:58.910 --> 00:38:00.560
custom Info.plist and so on.

00:38:00.720 --> 00:38:04.570
There's an application settings
pane which lets you set these.

00:38:05.510 --> 00:38:07.800
So some of the updated keys,
some of the changes that

00:38:07.800 --> 00:38:12.520
are important to you as app
developers are the CFBundle name.

00:38:12.570 --> 00:38:15.000
This is the short name
for your application.

00:38:15.000 --> 00:38:19.220
And this is the thing that appears
in the menu bar as your app name.

00:38:19.220 --> 00:38:22.580
And again,
even if your application is called

00:38:22.750 --> 00:38:26.920
foobar.exe or if it's called
Adobe Photoshop TM version 5.4,

00:38:26.920 --> 00:38:30.770
you know, you should come up with some
short name that allows you to

00:38:30.800 --> 00:38:34.560
just clearly show what the app is
without taking up too much room.

00:38:34.560 --> 00:38:37.680
This string is also shown in the
About panel when the About panel

00:38:37.680 --> 00:38:39.350
is brought up if you're using it.

00:38:39.440 --> 00:38:42.360
The CFBundle identifier is a new key.

00:38:42.750 --> 00:38:45.490
This is, again, you've heard about this,
I'm sure.

00:38:45.660 --> 00:38:48.920
It's the unique identifier, Java style.

00:38:48.920 --> 00:38:51.030
It's--one important thing about
this is not only does it uniquely

00:38:51.370 --> 00:38:54.560
identify your bundle so you can
sort through the various bundles,

00:38:54.620 --> 00:38:58.350
it will also be used by user
defaults as the app domain name.

00:38:58.540 --> 00:39:01.150
So instead of saving user
defaults under the name TextEdit,

00:39:01.160 --> 00:39:03.080
we'll save them under com.apple.com.

00:39:03.080 --> 00:39:04.060
And then we'll also
have the file.textEdit,

00:39:04.080 --> 00:39:07.370
which reduces the chances
of conflicts between various

00:39:07.500 --> 00:39:09.390
apps and various companies.

00:39:09.480 --> 00:39:12.720
And finally, we have CFBundle icon file,
which represents the icon

00:39:12.720 --> 00:39:13.710
for your application.

00:39:13.940 --> 00:39:16.560
And this is now an ICNS file.

00:39:17.510 --> 00:39:22.330
Talking about ICNS files,
icons are now represented as ICNS files.

00:39:22.350 --> 00:39:27.110
I think there's a session on ICNS files
and the various services that support it.

00:39:27.280 --> 00:39:32.520
ICNS files have multiple representations,
128 by 128, which we're saying required

00:39:32.640 --> 00:39:36.320
because it's possible that 128 by
128 icons appear in the desktop,

00:39:36.420 --> 00:39:39.160
in your dock and so on,
and you want it to look nice.

00:39:39.160 --> 00:39:42.610
We're also recommending 32 by 32.

00:39:42.670 --> 00:39:45.330
And I think also 16 by 16,
you can even add that as well,

00:39:45.350 --> 00:39:48.630
and that might appear in
the list mode in Finder.

00:39:48.640 --> 00:39:53.290
So these ICNS files have been, you know,
it hasn't been obvious how

00:39:53.290 --> 00:39:55.620
to create these in the past.

00:39:55.620 --> 00:39:56.700
I think there are multiple solutions now.

00:39:56.700 --> 00:39:59.280
One of them,
which is on your Mac OS X DP4 CD,

00:39:59.280 --> 00:40:02.920
is the Icon Composer app,
which I'll show you.

00:40:02.920 --> 00:40:04.120
Then there's a command line tool.

00:40:04.120 --> 00:40:07.180
You can take a multi-component TIFF file,
use this command line tool and

00:40:07.180 --> 00:40:09.760
get a multi-component ICNS file.

00:40:09.820 --> 00:40:11.710
And there are some third-party
solutions that are actually now

00:40:11.710 --> 00:40:14.600
out there and they are pretty good.

00:40:14.600 --> 00:40:17.440
And you would also specify... In addition
to the app icon... You would also specify

00:40:17.570 --> 00:40:21.060
the document icons the same way and you
would specify them in your Info.plist.

00:40:21.060 --> 00:40:24.750
Okay, so now I'll show you Icon Composer.

00:40:24.940 --> 00:40:26.750
Slides please.

00:40:30.660 --> 00:40:32.100
Okay, so Icon Composer.

00:40:32.100 --> 00:40:34.900
It's in System Developer Applications.

00:40:34.960 --> 00:40:35.440
There you go.

00:40:35.590 --> 00:40:38.730
Let's also bring up a Finder window.

00:40:38.910 --> 00:40:41.350
We are in our home directory.

00:40:44.600 --> 00:40:48.780
Okay, so I have a bunch of images here.

00:40:48.780 --> 00:40:50.770
Let's look at this one.

00:40:52.170 --> 00:40:52.640
There you go.

00:40:52.740 --> 00:40:54.320
That looks like a nice icon.

00:40:54.420 --> 00:40:56.900
So we'll drag that to this bucket here.

00:40:56.950 --> 00:41:00.370
Now note that, because this image is much
bigger than 128 by 128,

00:41:00.420 --> 00:41:02.440
it asks me whether it
should use a scaled version,

00:41:02.440 --> 00:41:03.980
and we'll say yes, and it puts it here.

00:41:03.980 --> 00:41:06.980
Now we should also maybe specify
this as the large version,

00:41:06.980 --> 00:41:10.260
the 32 by 32,
so let's drag this one in there as well.

00:41:10.260 --> 00:41:11.560
Now you don't have to do this.

00:41:11.560 --> 00:41:13.710
I'm actually,
if you're going to use the same one,

00:41:13.710 --> 00:41:14.920
you don't have to do this.

00:41:14.940 --> 00:41:18.710
But I'm showing that this one actually
might be a bit too small at 32 by 32.

00:41:18.820 --> 00:41:21.620
You can't really tell, you know,
that cute little face.

00:41:22.150 --> 00:41:23.540
So I have another cat image here.

00:41:23.670 --> 00:41:26.700
If we look at it,
you'll see that it's just the head,

00:41:26.830 --> 00:41:29.340
so maybe we'll drag that one in there.

00:41:31.370 --> 00:41:32.200
There you go.

00:41:32.200 --> 00:41:35.710
So now we have an ICNS thing,
ICNS file with two components in it.

00:41:35.810 --> 00:41:37.730
Let's save this file.

00:41:37.730 --> 00:41:39.700
In our home directory or
in our documents directory,

00:41:39.700 --> 00:41:44.250
we'll save it as cat picture.icns.

00:41:46.480 --> 00:41:50.190
Now one question that comes up often is,
well, how do you use this icon?

00:41:50.310 --> 00:41:53.400
Let's go ahead and also
attempt to do that.

00:41:53.400 --> 00:41:58.400
Go into Project Builder,
create a new project,

00:41:58.400 --> 00:42:00.400
new Cocoa application.

00:42:00.400 --> 00:42:03.800
Let's call it Test App.

00:42:05.850 --> 00:42:08.380
I'm not going to do anything
to the app except add an icon.

00:42:08.440 --> 00:42:13.090
Well, first thing is we have to go ahead
and in our resources add the file.

00:42:14.670 --> 00:42:20.100
So go to our Documents folder,
catpicture.icns.

00:42:20.120 --> 00:42:22.790
It should be added to our resources.

00:42:25.360 --> 00:42:30.630
Okay, now we go into our targets,
click on the test app,

00:42:31.290 --> 00:42:33.390
Go to Application Settings,
and this is where you're

00:42:33.390 --> 00:42:36.080
specifying Info.plist keys,
and we're simply going to specify that

00:42:36.560 --> 00:42:40.030
we want cat.picture.icns to be the icon.

00:42:40.290 --> 00:42:41.340
Let's just build.

00:42:41.430 --> 00:42:42.560
Let's see where this goes.

00:42:42.560 --> 00:42:46.400
Okay, it's done.

00:42:46.400 --> 00:42:48.470
So let's run this.

00:42:50.870 --> 00:42:51.700
Here's our app.

00:42:51.790 --> 00:42:55.330
If you look in the doc, there it is,
Test App, and it has the cute little cat.

00:42:55.650 --> 00:42:57.770
That wasn't as expected.

00:42:57.940 --> 00:42:59.400
Now I'll show you one more thing.

00:42:59.560 --> 00:43:05.390
Let's go back into... Where did
we put our test application?

00:43:06.480 --> 00:43:08.160
Where did we put our test application?

00:43:08.340 --> 00:43:11.340
Anybody remember?

00:43:11.470 --> 00:43:14.200
Is it documents?

00:43:14.200 --> 00:43:14.200
Okay.

00:43:15.200 --> 00:43:17.510
I can't find my test application.

00:43:17.510 --> 00:43:18.060
Well, that's okay.

00:43:18.060 --> 00:43:19.280
We'll find it at some point.

00:43:19.410 --> 00:43:20.950
I just can't.

00:43:20.950 --> 00:43:22.200
Oh, I can go back into Project Builder.

00:43:22.200 --> 00:43:26.160
Oh, it's in Tilda Test App.

00:43:26.290 --> 00:43:26.900
Oh, okay.

00:43:27.130 --> 00:43:30.340
Well,

00:43:33.490 --> 00:43:35.400
is not showing it to us, but that's okay.

00:43:35.400 --> 00:43:40.400
I think we all learned.

00:43:40.400 --> 00:43:46.070
Okay, let's go back

00:43:54.030 --> 00:43:57.760
Okay, so the graphics subsystem.

00:43:57.760 --> 00:44:00.620
We talked about the graphics
subsystem at last WWDC,

00:44:00.620 --> 00:44:05.990
and obviously the impact of removing
DPS and putting Quartz in its place.

00:44:06.000 --> 00:44:10.000
And a lot of that stuff was actually
fairly well scoped out last time.

00:44:10.000 --> 00:44:12.830
We have Beziapath APIs, NSImage APIs,
and so on.

00:44:12.930 --> 00:44:14.540
So a lot of that stuff is in place.

00:44:15.540 --> 00:44:17.900
Two new things that we've
added since then is,

00:44:17.900 --> 00:44:20.780
one is the PDF image rep,
which we talked about last time,

00:44:20.780 --> 00:44:23.740
and the other one is some changes in
NSImage that are fairly interesting.

00:44:23.740 --> 00:44:27.280
NSPDF image rep, it is an image rep,
as you can imagine.

00:44:27.280 --> 00:44:29.480
It loads and displays PDF images.

00:44:29.480 --> 00:44:30.350
That's it.

00:44:30.440 --> 00:44:31.540
So it's fairly simple.

00:44:31.540 --> 00:44:33.050
Allows NSImage to do the same.

00:44:33.060 --> 00:44:34.880
You can set the page number.

00:44:34.880 --> 00:44:37.850
As you know,
PDF files can have multiple pages,

00:44:37.850 --> 00:44:42.010
and you can tell PDF image rep,
set page 14, get the page count,

00:44:42.120 --> 00:44:43.580
as you might expect.

00:44:43.580 --> 00:44:46.910
Now, note that each page...
Each page in a PDF image rep has

00:44:46.910 --> 00:44:48.700
a...can have a different size.

00:44:48.800 --> 00:44:51.080
So that's something to watch
out for if you're actually

00:44:51.090 --> 00:44:52.510
flipping through the pages.

00:44:52.520 --> 00:44:57.220
Now, if you use a PDF image rep through
NSImage and just composite,

00:44:57.220 --> 00:44:59.660
you'll get only the first page.

00:45:01.910 --> 00:45:06.560
Quartz has the ability to,
if you have some backing store,

00:45:06.640 --> 00:45:09.330
some memory,
it can composite from that memory

00:45:09.330 --> 00:45:12.180
using certain compositing operations.

00:45:12.180 --> 00:45:14.300
And that's pretty good,
because that means if you have some image

00:45:14.300 --> 00:45:17.050
that you actually want to composite,
you no longer have to create an

00:45:17.100 --> 00:45:19.270
NSWindow backing store for it,
which is something

00:45:19.270 --> 00:45:22.720
NSImage would do for you,
but would occupy extra memory.

00:45:22.720 --> 00:45:27.140
So NSImage will now avoid creating
that backing store window if it can.

00:45:27.350 --> 00:45:32.700
And that depends on a few, you know,
what compositing mode you're using,

00:45:32.790 --> 00:45:34.350
where the image came from, and so on.

00:45:34.470 --> 00:45:38.320
But it will avoid creating,
it will not create that cache if it can.

00:45:38.360 --> 00:45:42.480
Now, if you find that this is impacting
your applications because you were

00:45:42.490 --> 00:45:46.100
somehow relying on it being cached,
you can actually do so by calling

00:45:46.100 --> 00:45:48.220
lockFocus unlockFocus first.

00:45:48.300 --> 00:45:51.760
Of course, if you call lockFocus as an
execution of your application,

00:45:51.760 --> 00:45:53.800
the image will be cached,
because that is what you wanted.

00:45:53.800 --> 00:45:55.560
There are a few other things
that will make it cached.

00:45:55.560 --> 00:45:58.600
Which are implicit in the API.

00:45:58.680 --> 00:46:01.020
But if you find that your application,
your images aren't showing,

00:46:01.020 --> 00:46:03.500
this is one thing you might want
to check into to see whether

00:46:03.530 --> 00:46:04.860
this caching is causing that.

00:46:04.920 --> 00:46:10.590
We haven't found any problems so far,
but who knows.

00:46:11.450 --> 00:46:18.700
OpenGL is another new feature
in the DP4 and in the Mac OS X.

00:46:18.800 --> 00:46:23.000
In DP4, OpenGL comes in several forms,
several libraries.

00:46:23.050 --> 00:46:26.290
The OpenGL.framework is the
basic OpenGL functionality,

00:46:26.420 --> 00:46:28.380
all of the OpenGL APIs and so on.

00:46:28.400 --> 00:46:32.390
I believe these are in terms
of core graphics concepts.

00:46:32.400 --> 00:46:34.290
There's also a Glut.framework.

00:46:34.290 --> 00:46:37.460
For those of you who know Glut,
Glut is the higher application

00:46:37.460 --> 00:46:39.390
model for OpenGL applications.

00:46:39.400 --> 00:46:43.230
Glut is actually implemented using Cocoa,
but because it's its

00:46:43.230 --> 00:46:46.400
own application model,
if you use Glut, you shouldn't be using

00:46:46.400 --> 00:46:48.400
Cocoa concepts in such an app.

00:46:48.400 --> 00:46:52.400
It's basically its own complete little
framework for writing applications.

00:46:52.400 --> 00:46:56.400
There's also the AGL.framework,
which is the AppleGL APIs.

00:46:56.400 --> 00:47:01.230
Those APIs allow a Carbon app to
execute OpenGL on both 9 and 10.

00:47:01.400 --> 00:47:02.400
Okay.

00:47:02.780 --> 00:47:07.140
We've added two new classes to the kit:
OpenGL View and OpenGL Context.

00:47:07.200 --> 00:47:09.700
OpenGL View is a subclass of
View for rendering OpenGL.

00:47:09.700 --> 00:47:11.700
It's fairly straightforward.

00:47:11.700 --> 00:47:15.200
In such a view, you can only do OpenGL.

00:47:15.270 --> 00:47:17.700
You can't mix it with 2D drawing.

00:47:17.700 --> 00:47:20.570
You basically override drawRect
and in there do OpenGL.

00:47:20.700 --> 00:47:27.670
OpenGL Context is a more low-level
access to the OpenGL concepts.

00:47:28.110 --> 00:47:31.240
There you can do more stuff with OpenGL,
like create a full-screen

00:47:31.240 --> 00:47:33.160
window and so on,
and change and tweak

00:47:33.230 --> 00:47:34.130
some other parameters.

00:47:34.140 --> 00:47:40.130
I'll show you a quick demo of this.

00:47:40.130 --> 00:47:40.130
I think those of you who've been to...

00:47:40.300 --> 00:47:42.420
We've been to Dave Springer's
talk on OpenGL.

00:47:42.420 --> 00:47:45.240
You might have also seen a similar demo.

00:47:45.240 --> 00:47:47.630
So, let's hide terminal there.

00:47:47.630 --> 00:47:49.080
We don't want that.

00:47:49.080 --> 00:47:51.480
OpenGL.

00:47:51.480 --> 00:47:54.540
So we'll run this application.

00:47:54.540 --> 00:47:56.510
So there you go.

00:47:59.020 --> 00:48:00.520
Basically, this is a Cocoa application.

00:48:00.520 --> 00:48:02.800
In there is an OpenGL view
that draws a teapot,

00:48:02.800 --> 00:48:06.670
and you can, with an NS slider,
control the aspects of that teapot.

00:48:06.770 --> 00:48:08.750
You can make it filled if you want.

00:48:08.950 --> 00:48:12.330
If you want to change the pattern,
use color.

00:48:13.630 --> 00:48:14.500
So there you go.

00:48:14.540 --> 00:48:16.000
Fairly straightforward.

00:48:16.000 --> 00:48:17.500
You might ask, how about patterns?

00:48:17.780 --> 00:48:22.100
Well, this demo doesn't support that,
but you saw something quite powerful

00:48:22.100 --> 00:48:27.000
with OpenGL and patterns in Steve's demo,
so you can actually go ahead and do that.

00:48:27.120 --> 00:48:31.760
I thought I would show
you the code for this.

00:48:31.930 --> 00:48:33.910
Let's close that.

00:48:44.080 --> 00:48:51.120
Okay.

00:48:51.120 --> 00:48:51.990
Okay, so there you go.

00:48:52.180 --> 00:48:54.940
It's basically a pretty
small application.

00:48:54.940 --> 00:48:57.170
We have a subclass of the OpenGL view.

00:48:57.330 --> 00:49:01.210
In it with frame,
we're setting a few parameters.

00:49:01.210 --> 00:49:05.480
We'll probably get rid of the
need to do this in the future.

00:49:05.830 --> 00:49:08.370
In Awake from Nib,
we basically make the current

00:49:08.510 --> 00:49:12.890
context and we set some parameters
about OpenGL that we want set.

00:49:12.920 --> 00:49:16.420
And then these are the
target action methods.

00:49:16.420 --> 00:49:18.660
Set fill mode basically
gets the fill mode.

00:49:18.760 --> 00:49:22.050
And set needs display, yes,
as you would be doing in 2D drawing.

00:49:22.110 --> 00:49:24.340
Set object color gets the color.

00:49:24.340 --> 00:49:26.310
It converts to RGB properly.

00:49:26.320 --> 00:49:30.220
And then it goes ahead and sets
the color in the OpenGL context and

00:49:30.350 --> 00:49:33.920
also then says set needs display.

00:49:34.020 --> 00:49:38.270
Set X angle, set Y angle are connected to
the sliders we showed you.

00:49:39.560 --> 00:49:42.760
and the draw-rec basically goes
ahead and draws either a solid

00:49:42.940 --> 00:49:46.980
teapot or a wire teapot based
on the setting of the fill flag.

00:49:46.980 --> 00:49:48.890
So this is a fairly new feature,
fairly fresh.

00:49:49.000 --> 00:49:49.480
Use it.

00:49:49.480 --> 00:49:52.100
Let us know how it works for you,
and let us know if there are

00:49:52.100 --> 00:49:54.220
any other additional features
or bugs that you encounter.

00:49:56.820 --> 00:49:59.300
Okay, slides please.

00:49:59.400 --> 00:50:00.700
Okay, so Umbrella Frameworks.

00:50:00.700 --> 00:50:03.750
You've heard about Umbrella
Frameworks in other contexts,

00:50:03.890 --> 00:50:04.570
I think.

00:50:04.720 --> 00:50:08.150
The concept behind Umbrella
Frameworks is to simplify the

00:50:08.150 --> 00:50:10.200
developer view of Mac OS X.

00:50:11.340 --> 00:50:13.760
Here's what Umbrella
frameworks look like.

00:50:13.820 --> 00:50:15.900
The concept is simple.

00:50:16.070 --> 00:50:20.160
If you're writing a BSD POSIX tool,
you link against system.framework.

00:50:20.230 --> 00:50:23.620
If you're writing a tool that needs
to use core foundation or Carbon core,

00:50:23.770 --> 00:50:28.360
file manager, resource manager, CFBundle,
I'm sorry, so on, you would link against

00:50:28.360 --> 00:50:31.750
core services framework,
which will, of course, bring in system.

00:50:32.350 --> 00:50:36.440
Application services brings all of
the graphics capabilities and so on.

00:50:36.540 --> 00:50:39.400
So if you have a back-end
server that just does graphics

00:50:39.800 --> 00:50:41.180
but doesn't have any UI,
you would link against core services.

00:50:41.340 --> 00:50:42.430
That might be the layer for you.

00:50:42.820 --> 00:50:44.580
Finally,
if you're a Cocoa app or a Carbon app,

00:50:44.680 --> 00:50:46.660
you link against one of the
top-level frameworks up there.

00:50:46.850 --> 00:50:49.700
Now, why do we make such a big
deal of Umbrella frameworks?

00:50:49.700 --> 00:50:53.160
Well, because in reality,
it turns out that we have many,

00:50:53.280 --> 00:50:54.800
many frameworks in the system.

00:50:54.820 --> 00:50:57.910
So here is what the
situation might look like.

00:50:58.330 --> 00:51:01.310
Some break into three,
some break into five,

00:51:01.310 --> 00:51:03.000
some break into six.

00:51:03.330 --> 00:51:05.730
Actually, the real picture is a lot
more complicated than that.

00:51:05.820 --> 00:51:07.790
So actual contents may vary.

00:51:07.820 --> 00:51:11.030
We don't want you to link against app.

00:51:11.220 --> 00:51:13.150
We don't want you to link against
the toolkit or foundation directly.

00:51:13.220 --> 00:51:16.440
We don't want you to link
against the HTML framework or

00:51:16.440 --> 00:51:19.900
the HLTV toolbox or Quick Draw,
because those all bring

00:51:19.900 --> 00:51:21.030
in other frameworks.

00:51:21.200 --> 00:51:25.470
And it's not clear that they will
bring in the frameworks that--let's

00:51:25.520 --> 00:51:29.070
say you bring--let's say you
link against a framework which,

00:51:29.100 --> 00:51:31.200
as a side effect,
brings another framework.

00:51:31.230 --> 00:51:35.130
It's not clear that that framework will
always continue bringing that framework.

00:51:35.250 --> 00:51:38.190
So if you're taking advantage of these
implicit bringing-ins of frameworks,

00:51:38.340 --> 00:51:40.090
your app might crash in a certain update.

00:51:41.200 --> 00:51:43.610
The idea is that these top-level
frameworks have a charter,

00:51:43.610 --> 00:51:46.480
and if you link against them,
your application should continue working

00:51:46.510 --> 00:51:48.140
no matter how the contents change.

00:51:48.220 --> 00:51:51.200
So we'd like you to use this picture.

00:51:51.200 --> 00:51:54.500
Now, as a Cocoa application,
you should link against Cocoa.framework,

00:51:54.500 --> 00:51:57.200
which is the new framework,
the new Umbrella framework.

00:51:57.200 --> 00:52:01.200
Cocoa framework in DP4 brings
with it AppKit and foundation,

00:52:01.200 --> 00:52:04.090
and it should also bring
in scripting at some point,

00:52:04.180 --> 00:52:05.010
which we'll do.

00:52:05.250 --> 00:52:09.020
And that will sort of be the core
Cocoa frameworks on the system.

00:52:09.580 --> 00:52:11.740
Cocoa also brings in
the frameworks below it:

00:52:11.810 --> 00:52:14.400
application services and core services.

00:52:14.400 --> 00:52:18.480
It also brings in some sub-frameworks
from the Carbon framework,

00:52:18.480 --> 00:52:20.540
because obviously in the
implementation of the AppKit,

00:52:20.540 --> 00:52:22.400
we rely on some Carbon features.

00:52:22.470 --> 00:52:25.250
However,
we don't bring in all of that blue box.

00:52:25.540 --> 00:52:28.400
We just bring in some
of the sub-frameworks.

00:52:28.540 --> 00:52:32.400
So don't rely on Carbon being there
in the context of a Cocoa app.

00:52:32.400 --> 00:52:33.400
Just some pieces are there.

00:52:33.400 --> 00:52:35.770
So if you do need to use
any Carbon APIs that are

00:52:35.770 --> 00:52:38.530
in the Carbon.framework,
also link against the

00:52:38.530 --> 00:52:40.400
Carbon.framework yourself.

00:52:40.400 --> 00:52:43.400
Now one thing to watch out
for is name collisions.

00:52:43.400 --> 00:52:48.400
Currently,
we still have a single-level namespace.

00:52:48.400 --> 00:52:51.000
Meaning if any library defines a
function that's the same as a function

00:52:51.100 --> 00:52:54.400
you defined in your application,
that is an error.

00:52:54.400 --> 00:52:57.290
And the Carbon framework,
because of some legacy APIs,

00:52:57.460 --> 00:53:01.400
has a lot of APIs which
do not have prefixes,

00:53:01.400 --> 00:53:03.400
and which might actually
be fairly commonly named.

00:53:03.400 --> 00:53:07.280
So if you find your app not
running after you build it on 10,

00:53:07.500 --> 00:53:08.370
that's one of the things to look at.

00:53:08.460 --> 00:53:13.400
And you'll usually get a warning from the
loader that this symbol had a collision.

00:53:14.940 --> 00:53:19.220
So now we'll quickly talk about some
other changes that we've introduced.

00:53:19.320 --> 00:53:20.240
User defaults.

00:53:20.420 --> 00:53:24.290
User defaults now supports new types,
NSNumber and NSState.

00:53:24.480 --> 00:53:27.620
Now one thing to note is,
before we only had strings,

00:53:27.720 --> 00:53:30.800
in addition to data array and dictionary.

00:53:30.900 --> 00:53:32.850
So when you wrote a number out,
it would actually be

00:53:32.850 --> 00:53:34.280
written out as a string.

00:53:34.400 --> 00:53:37.640
So if you, for instance,
did set integer for key,

00:53:37.730 --> 00:53:41.360
and then you called object for key,
you would get back a NSString.

00:53:41.540 --> 00:53:43.500
If you happened to assume
that was an NSString,

00:53:43.590 --> 00:53:44.780
now that might break.

00:53:44.970 --> 00:53:47.000
This is probably something
most people don't run into,

00:53:47.000 --> 00:53:50.630
but it's a good warning in any case.

00:53:51.030 --> 00:53:55.000
The defaults command has been enhanced
with some of these new options.

00:53:55.120 --> 00:54:00.560
One thing you can now do is
specify host-specific preferences.

00:54:00.680 --> 00:54:04.640
Defaults host hostname will let you
set a preference for a given host.

00:54:04.730 --> 00:54:08.440
-currenthost will let you set a
preference for this current host,

00:54:08.470 --> 00:54:10.610
so you don't have to know the name.

00:54:10.980 --> 00:54:15.820
Now note that user defaults
does not have API to set or get

00:54:16.430 --> 00:54:18.380
host-based preferences based on host.

00:54:18.570 --> 00:54:21.660
We don't think it's a feature
that will be widely used at all,

00:54:21.660 --> 00:54:25.300
so we don't think it's
necessary to expose that API.

00:54:25.430 --> 00:54:28.940
However, if there is a host-specific
thing stored in there,

00:54:28.940 --> 00:54:32.480
for instance as a result of
printing subsystem or whatever,

00:54:32.700 --> 00:54:36.370
user defaults will correctly
fetch it and give it to you.

00:54:37.510 --> 00:54:40.160
The defaults command,
some of the other enhancements,

00:54:40.160 --> 00:54:46.170
you can now write --int, --float,
--bool to explicitly specify the type.

00:54:46.200 --> 00:54:50.400
--array allows you to specify
arrays as the values and keys,

00:54:50.840 --> 00:54:54.400
and that's actually better than trying to
remember the syntax from the olden days.

00:54:54.810 --> 00:54:58.910
Another good feature is the array add,
which adds to an existing array without

00:54:58.910 --> 00:55:00.390
having to repeat all the elements.

00:55:00.390 --> 00:55:02.380
So these are some pretty nifty features.

00:55:02.400 --> 00:55:06.400
You can use read type as an option
to see the type of a given key,

00:55:06.400 --> 00:55:09.170
and you can also say defaults help,
and it'll give you all of

00:55:09.310 --> 00:55:11.380
the options that are there.

00:55:12.380 --> 00:55:14.090
So, text has a few new features.

00:55:14.140 --> 00:55:17.810
One of them is the inline, as you type,
spelling checking.

00:55:18.080 --> 00:55:20.380
Now, as you can imagine,
this uses the existing mechanisms.

00:55:20.460 --> 00:55:23.960
We had a spelling checking API with
a possibility to plug in third-party

00:55:23.960 --> 00:55:25.400
spell checkers in the back end.

00:55:25.400 --> 00:55:28.920
It uses exactly the same mechanisms.

00:55:28.920 --> 00:55:31.890
By default, it's off, but it just takes,
you know, calling

00:55:32.050 --> 00:55:35.080
setContinuousSpellCheckingEnabled,
yes, to enable it in the

00:55:35.100 --> 00:55:36.920
context of any text object.

00:55:36.930 --> 00:55:40.710
And you also have a toggle method
you might connect to a menu item.

00:55:43.100 --> 00:55:47.600
The text system can now open
Mac OS 8.9 simple text documents.

00:55:47.600 --> 00:55:50.900
So these documents can either be plain
or they can have a resource fork which

00:55:50.900 --> 00:55:53.000
indicates attributes on the text.

00:55:53.000 --> 00:55:56.870
So all of the text storage methods
that read documents will now correctly

00:55:56.870 --> 00:55:59.000
understand simple text documents.

00:55:59.000 --> 00:56:02.000
So you can actually try this in TextEdit,
open old simple text documents.

00:56:02.000 --> 00:56:04.400
Now one thing we don't do is
we don't export this format,

00:56:04.510 --> 00:56:05.990
so you can't save this format.

00:56:05.990 --> 00:56:09.700
If you try to save, you'll be warned,
you'll get a warning that it

00:56:09.700 --> 00:56:11.990
should be RTF when you're saving.

00:56:12.490 --> 00:56:17.200
We've also added a new method in
text to sort of group together a

00:56:17.200 --> 00:56:21.310
lot of the reading functionality
and to be more efficient.

00:56:21.610 --> 00:56:25.150
You specify a URL to read the file from,
you specify some options,

00:56:25.170 --> 00:56:28.320
and in return you get back the info
about the document you just read.

00:56:28.410 --> 00:56:32.720
The thing here is that it can also
read into an existing text storage,

00:56:32.810 --> 00:56:33.970
which is pretty nice.

00:56:34.100 --> 00:56:37.320
You might not have to tear down your text
storage when you're loading a document.

00:56:37.340 --> 00:56:40.070
The options dictionary,
the second argument,

00:56:40.070 --> 00:56:43.320
can include the base URL,
a default character encoding,

00:56:43.320 --> 00:56:45.340
default attributes, and so on.

00:56:45.340 --> 00:56:48.840
So what this means is,
let's say you have a file,

00:56:48.840 --> 00:56:50.790
and you just want to read it.

00:56:50.850 --> 00:56:55.140
You could specify that it should
be assumed to be Mac Roman,

00:56:55.490 --> 00:56:58.060
however if the text system figures
out that it was something else,

00:56:58.180 --> 00:56:59.250
it will use it instead.

00:56:59.280 --> 00:57:01.130
Now to find out what
encoding it really was,

00:57:01.130 --> 00:57:03.100
it will be returned to
you in the third argument,

00:57:03.230 --> 00:57:04.280
document attributes.

00:57:04.280 --> 00:57:07.280
And this comes in handy when you're
doing sophisticated encoding handling.

00:57:07.280 --> 00:57:10.630
like text edit actually allows you to do.

00:57:11.890 --> 00:57:15.170
The Document Attributes dictionary will
also return to you the document type,

00:57:15.260 --> 00:57:18.830
which will tell you whether it was HTML,
RTF, and so on.

00:57:18.830 --> 00:57:21.910
And so based on that,
you can make some decisions.

00:57:22.490 --> 00:57:24.180
Okay, input management.

00:57:24.300 --> 00:57:26.390
Input management for
Asian keyboards and stuff,

00:57:26.390 --> 00:57:28.120
you know,
when you switch to another input method,

00:57:28.300 --> 00:57:30.270
start typing Japanese,
that now goes through the

00:57:30.340 --> 00:57:33.110
text services manager,
which is shared facility

00:57:33.190 --> 00:57:36.280
under Carbon and Cocoa,
which means the same input management

00:57:36.280 --> 00:57:40.760
menu now works for Cocoa and Carbon apps,
and you can switch keyboards and

00:57:40.840 --> 00:57:42.400
stuff using the same facilities.

00:57:42.440 --> 00:57:46.720
Then the good news here
is the Cocoa APIs have not

00:57:46.720 --> 00:57:48.380
changed or been impacted,
so they will continue working.

00:57:49.810 --> 00:57:50.550
Tooltips.

00:57:50.550 --> 00:57:52.980
We now add a feature,
the ability to do finer

00:57:52.980 --> 00:57:54.140
granularity tooltips.

00:57:54.220 --> 00:57:58.210
What I mean by that is,
as you can see here, thank you,

00:57:58.430 --> 00:57:59.740
some tooltip fans out there.

00:57:59.760 --> 00:58:02.460
Yeah, before you could have one
tooltip for the whole view,

00:58:02.690 --> 00:58:03.340
and that was it.

00:58:03.460 --> 00:58:06.100
So now you can have
tooltips on each cell,

00:58:06.100 --> 00:58:07.760
which is fairly good.

00:58:07.870 --> 00:58:10.700
You can also have more dynamic tooltips.

00:58:10.700 --> 00:58:12.720
You can say, here's a rect.

00:58:12.720 --> 00:58:16.010
I want to track tooltips in this rect.

00:58:16.090 --> 00:58:19.430
So whenever a tooltip
is supposed to come up,

00:58:19.530 --> 00:58:22.400
meaning the mouse enters that
area and hovers for a while,

00:58:22.400 --> 00:58:25.440
the owner that's specified
there will get a call,

00:58:25.440 --> 00:58:28.760
that the method you see down below,
that says give me the string

00:58:28.760 --> 00:58:30.280
to show in this tooltip.

00:58:30.280 --> 00:58:32.880
And that allows you to
basically do dynamic tooltips,

00:58:32.990 --> 00:58:35.320
for instance,
if the value of that field is changing,

00:58:35.320 --> 00:58:37.950
or whether you have to load some
key from a localization file,

00:58:37.950 --> 00:58:39.900
this allows you to delay that, and so on.

00:58:39.900 --> 00:58:42.940
So it's, it's fairly fancy.

00:58:43.500 --> 00:58:48.000
Okay, so that's it as far as the
changes I'm going to talk about.

00:58:48.000 --> 00:58:49.110
You can refer to the release notes.

00:58:49.200 --> 00:58:50.500
We have a lot of information in there.

00:58:50.500 --> 00:58:53.260
The appkit.html release note,
which I opened here,

00:58:53.260 --> 00:58:56.500
shows the DP4 changes, since DP3 to DP4.

00:58:56.500 --> 00:58:58.800
We also have another
file that's fairly big.

00:58:58.860 --> 00:59:03.300
It contains all of the changes since,
I believe, next step 3.3, really, but,

00:59:03.310 --> 00:59:05.470
you know, little summaries in there.

00:59:05.470 --> 00:59:08.220
It's called appkit-pre-dp4.html.

00:59:08.220 --> 00:59:11.560
Not everything in here is documented,
so you might want to scan through

00:59:11.560 --> 00:59:14.360
this file backwards to make,
you know, when you're looking at

00:59:14.360 --> 00:59:17.290
certain changes in classes,
to make sure you don't miss anything.

00:59:17.910 --> 00:59:22.040
Foundation.html is also a release note
that refers to foundation changes.

00:59:22.140 --> 00:59:25.200
We also have examples, as you know,
in System Developer, examples.

00:59:25.320 --> 00:59:28.740
Texted and Sketch are pretty
up-to-date with lots of new features.

00:59:28.740 --> 00:59:32.530
So you can, for instance,
look at Texted as an example

00:59:32.530 --> 00:59:35.070
of full use of Sheets,
and so on.

00:59:35.380 --> 00:59:40.290
Okay, so let's talk a little bit
about upcoming changes.

00:59:40.290 --> 00:59:43.770
So Aqua Polish,
if you went to Don Lindsay's

00:59:43.770 --> 00:59:46.860
talk on Aqua on Monday,
he definitely referred to some areas

00:59:46.860 --> 00:59:50.160
of Aqua that still need tweaking,
polish, and so on.

00:59:50.300 --> 00:59:54.420
One of those areas is the
single window mode enhancements.

00:59:54.420 --> 00:59:58.060
We have some ideas on how to make
single window mode work better,

00:59:58.060 --> 01:00:02.030
and if it requires new APIs or whatever,
we'll certainly be introducing

01:00:02.140 --> 01:00:03.520
them as soon as possible.

01:00:03.520 --> 01:00:06.950
Also, if you notice, the farewells,
about boxes, a few of the components do

01:00:06.960 --> 01:00:09.510
not yet have an Aqua look,
which will be introduced.

01:00:09.560 --> 01:00:12.760
Hopefully this doesn't impact
your code at all in any way.

01:00:12.760 --> 01:00:15.620
Also, the sheet handling APIs,
we might have to add sheet handling

01:00:15.620 --> 01:00:18.520
APIs in a few other places,
and maybe NSDocument also will

01:00:18.520 --> 01:00:19.690
need to get a few methods.

01:00:19.780 --> 01:00:22.760
We haven't quite enumerated
the whole set yet.

01:00:22.760 --> 01:00:24.940
Now,
the set that's there should be enough

01:00:24.940 --> 01:00:27.070
for you to get started on using sheets.

01:00:27.600 --> 01:00:30.410
Now other stuff we're looking at,
and this is not coming necessarily

01:00:30.410 --> 01:00:33.330
next month or in the next three
months or next update or whatever,

01:00:33.330 --> 01:00:34.500
but these are in our queue.

01:00:34.500 --> 01:00:37.490
These are important to us and we want
to get these to you at some point.

01:00:37.500 --> 01:00:39.630
More Carbon and Java integration.

01:00:39.710 --> 01:00:43.500
Ability to put Carbon widgets,
Carbon panels in Cocoa apps.

01:00:43.660 --> 01:00:47.420
Ability to put Java beans, for instance,
in Cocoa apps.

01:00:47.590 --> 01:00:49.400
These are important and
we're looking at this.

01:00:49.500 --> 01:00:51.490
I used to be able to do
this in Mac OS X Server.

01:00:51.530 --> 01:00:54.530
We now have a totally
new Java infrastructure,

01:00:54.530 --> 01:00:56.460
so we have to plug into that.

01:00:56.500 --> 01:00:57.710
QuickTime.

01:00:57.710 --> 01:01:01.520
NSMovieView is not working in DP4,
but that will certainly be

01:01:01.520 --> 01:01:03.410
working as soon as possible.

01:01:03.530 --> 01:01:05.500
In addition, we'll be looking at other
QuickTime integrations.

01:01:05.500 --> 01:01:08.880
For instance, for image formats beyond
what NSImage can support,

01:01:08.940 --> 01:01:11.920
we want to go to QuickTime and
load all the image formats that

01:01:11.920 --> 01:01:13.450
QuickTime supports for you.

01:01:13.500 --> 01:01:14.350
XMLNibs.

01:01:14.440 --> 01:01:17.940
If you heard about the
Carbon support in Ivy,

01:01:18.080 --> 01:01:20.500
we're using XMLNibs there.

01:01:20.500 --> 01:01:23.500
We definitely plan to use that
for Cocoa applications as well.

01:01:23.500 --> 01:01:25.500
Don't know the timeframe.

01:01:25.680 --> 01:01:26.660
Scripting.

01:01:26.660 --> 01:01:29.450
We support scripting strongly.

01:01:29.520 --> 01:01:31.900
There are certain areas where
we haven't gotten into yet,

01:01:31.960 --> 01:01:33.500
recordability being one of them.

01:01:33.500 --> 01:01:36.500
So we're certainly thinking
about changes in those areas.

01:01:36.500 --> 01:01:38.500
Better internationalization.

01:01:38.500 --> 01:01:41.820
I get this question often
and it's definitely something

01:01:41.820 --> 01:01:43.500
near and dear to my heart.

01:01:43.500 --> 01:01:45.500
I definitely want to do this.

01:01:45.540 --> 01:01:47.680
Basically,
the ability of the text system to

01:01:47.680 --> 01:01:50.900
do bidirectional text and use some
of the more advanced features of

01:01:50.900 --> 01:01:54.500
the Apple text group is on our plate
and we plan to deliver that to you.

01:01:54.500 --> 01:01:56.770
deliver that to you.

01:01:57.620 --> 01:02:00.310
Okay, so in summary,
basically there are a lot

01:02:00.540 --> 01:02:03.400
of advancements in Cocoa,
and most of them you will get for free.

01:02:03.400 --> 01:02:06.120
We talked about some of those,
and some require adoption,

01:02:06.120 --> 01:02:08.700
so you have to do some work to get those.

01:02:08.700 --> 01:02:13.020
One good thing is many of the apps
in Mac OS X are written in Cocoa,

01:02:13.020 --> 01:02:16.290
and we intend to keep on
going that way because Cocoa,

01:02:16.350 --> 01:02:20.290
as you know, is giving us a good boost
in productivity and so on,

01:02:20.290 --> 01:02:22.500
so that's a good thing for us.

01:02:22.500 --> 01:02:24.990
We also have a lot of
enhancements and additional

01:02:25.130 --> 01:02:27.000
features planned in the future.

01:02:27.000 --> 01:02:29.910
So the group, the Cocoa group,
the people who work on

01:02:29.910 --> 01:02:32.100
AppKit and Foundation,
the group has grown recently.

01:02:32.100 --> 01:02:34.360
It's a highly energized group,
and we're really excited

01:02:34.360 --> 01:02:35.500
about working on these.

01:02:35.500 --> 01:02:39.500
Okay, before I go to the roadmap,
I have a question.

01:02:39.500 --> 01:02:43.500
Who knows what this is?

01:02:43.500 --> 01:02:48.280
Who knows what this is?

01:02:51.450 --> 01:02:56.770
Who knows what's an optical disc for?

01:02:59.900 --> 01:03:03.110
This is TextArt by
Stone Design Corporation,

01:03:03.110 --> 01:03:06.070
shipped in 1989, I believe.

01:03:10.910 --> 01:03:15.300
So, you know, I found this recently,
and the amazing thing is, you know,

01:03:15.370 --> 01:03:18.220
this shipped, I think,
very soon after Next Step 1.0 came out.

01:03:18.320 --> 01:03:22.080
It's a fully, you know, shrink-wrapped,
I believe it was shrink-wrapped, right?

01:03:22.080 --> 01:03:26.880
I mean, this is pre-the program
that came before Create?

01:03:26.880 --> 01:03:30.760
Anyway, so it was shrink-wrapped,
high-quality, you know, nice program,

01:03:30.760 --> 01:03:33.900
and it shipped very soon after
we shipped the next system.

01:03:33.900 --> 01:03:36.530
And, you know,
and despite the media cost of $50.

01:03:38.380 --> 01:03:42.290
So, anyway, and so since, you know,
this has come out,

01:03:42.390 --> 01:03:44.950
we've undergone a lot of changes.

01:03:44.960 --> 01:03:47.550
Cocoa has, you know...

01:03:48.270 --> 01:03:50.870
We've developed it over the years,
and especially in the last few years,

01:03:50.880 --> 01:03:52.620
the opportunities are now great.

01:03:52.730 --> 01:03:55.360
We have a lot of Apple technologies,
QuickTime, scripting,

01:03:55.360 --> 01:03:56.480
we're integrating into Cocoa.

01:03:56.480 --> 01:03:58.100
I think those are very exciting.

01:03:58.140 --> 01:03:59.970
A lot of things that we weren't
able to give you before.

01:04:00.330 --> 01:04:05.700
And obviously the potential for
the millions of desktops that

01:04:05.700 --> 01:04:09.990
Mac OS X will be on someday,
I think that's really exciting

01:04:10.360 --> 01:04:14.200
for developers who are thinking
of doing third-party applications,

01:04:14.200 --> 01:04:16.650
who are already doing them,
who are looking forward to shipping

01:04:16.650 --> 01:04:18.050
out the shrink-wrapped version.

01:04:18.200 --> 01:04:21.360
So I know that there are a lot
of you who have been thinking of

01:04:21.640 --> 01:04:25.100
doing third-party applications
or doing vertical applications,

01:04:25.190 --> 01:04:27.200
and there are some of you
who are probably brand new,

01:04:27.200 --> 01:04:29.140
who are just looking at
Cocoa for the first time.

01:04:29.310 --> 01:04:32.940
Anyway,
I'd really like a round of applause

01:04:32.940 --> 01:04:38.800
for all of the Cocoa developers who
stuck with us throughout the years

01:04:38.800 --> 01:04:41.890
and who just watched Cocoa grow.

01:04:42.900 --> 01:04:47.710
It's really your energy that keeps us
going at Apple and the Cocoa group.

01:04:47.820 --> 01:04:49.880
We're really excited
to see everybody here.

01:04:49.990 --> 01:04:52.880
The roadmap for sessions that
you might be interested in:

01:04:52.910 --> 01:04:54.900
the Cocoa Overview and Cocoa In-Depth.

01:04:54.900 --> 01:04:57.900
Those are the two sessions that
basically cover Cocoa basics

01:04:57.900 --> 01:05:01.900
and some not-so-basics,
but basically for people who haven't

01:05:01.900 --> 01:05:02.900
necessarily seen Cocoa before.

01:05:02.900 --> 01:05:04.860
The Overview happened yesterday.

01:05:04.970 --> 01:05:05.830
The Depth is tomorrow.

01:05:05.910 --> 01:05:09.180
Using Interface Builder tomorrow morning,
where they'll talk about some of the

01:05:09.260 --> 01:05:11.900
Carbon features and some of the new
features they've added for Cocoa.

01:05:11.930 --> 01:05:16.880
The Quartz session will talk about the
Quartz public APIs that you can use.

01:05:16.880 --> 01:05:17.830
That's on Friday.

01:05:17.950 --> 01:05:20.840
And the Aqua Feedback Forum is on Friday.

01:05:21.030 --> 01:05:22.900
That's likely to be
somewhat exciting as well,

01:05:22.900 --> 01:05:26.900
with various people expressing
their pleasure at Aqua.

01:05:27.190 --> 01:05:29.900
Okay, so what did I do with the clicker?

01:05:29.900 --> 01:05:33.390
There it is.

01:05:33.390 --> 01:05:33.390
Okay.

01:05:34.370 --> 01:05:37.540
Okay,
and so you can contact David Wright.

01:05:37.890 --> 01:05:43.310
We're also setting up a mailing list,
coco-feedback@group.apple.com.

01:05:43.380 --> 01:05:46.740
If you have any feedback or
comments about the API changes

01:05:46.740 --> 01:05:49.300
in AppKit or Foundation,
please send mail to that list.

01:05:49.330 --> 01:05:52.930
I haven't quite verified it's set up yet,
so don't do it in the next hour,

01:05:52.930 --> 01:05:55.300
but it should be there in a day or two.

01:05:55.330 --> 01:06:01.490
Okay, so I think I'm going to
invite the QA team up.