WEBVTT

00:00:08.500 --> 00:00:11.480
This is going to be a fun one,
talking about Objective-C to

00:00:11.480 --> 00:00:13.090
Java transition issues.

00:00:13.120 --> 00:00:16.490
So please give your undivided
attention to Francois Jouaux.

00:00:20.510 --> 00:00:23.910
Nice to meet you all today,
and this is going to be the

00:00:23.910 --> 00:00:27.410
most soporific hour of the day,
so bear with me and

00:00:27.410 --> 00:00:29.400
we'll make it exciting.

00:00:29.400 --> 00:00:32.780
I know there are a lot of
Objective-C zealots this

00:00:32.780 --> 00:00:35.190
afternoon in the room.

00:00:35.440 --> 00:00:37.400
Can I have a show of hands?

00:00:37.400 --> 00:00:38.360
Oh yeah.

00:00:38.400 --> 00:00:41.400
So, don't worry,
I brought a bulletproof vest.

00:00:48.400 --> 00:00:53.100
And let me introduce my bodyguard,
Ben Trumbull.

00:00:56.870 --> 00:00:58.760
Yes,
and we have Riot Shields in the back.

00:00:58.800 --> 00:01:03.510
And Ben, by the way,
will be doing the demo for us today.

00:01:06.600 --> 00:01:09.860
Okay, so what are we going to cover?

00:01:09.920 --> 00:01:14.020
This session is going to assume some
previous knowledge of WebObjects.

00:01:14.020 --> 00:01:17.570
Obviously, if you've been programming
for years in Objective-C,

00:01:17.570 --> 00:01:19.360
you know about WebObjects.

00:01:19.710 --> 00:01:24.230
We are going to cover all the different
strategies for converting Objective-C,

00:01:24.340 --> 00:01:27.600
WebScript, and Bridge Java projects.

00:01:27.600 --> 00:01:32.330
And we are going to demo all
the supplied conversion tools.

00:01:34.830 --> 00:01:40.450
What you'll learn will first make a
stop and go back on the goals of the

00:01:40.570 --> 00:01:44.810
pure Java release named WebObjects 5.

00:01:44.960 --> 00:01:47.300
will then go in detail
into who should convert,

00:01:47.350 --> 00:01:52.730
who should not,
and what API and feature changes you

00:01:52.730 --> 00:01:55.620
can expect in WebObjects Pure Java.

00:01:55.810 --> 00:01:59.240
Then we'll move into the
conversion process per se,

00:01:59.240 --> 00:02:03.070
and give you some hints
on how you can expand it.

00:02:05.650 --> 00:02:11.100
So what is this WebObjects 5 release
called WebObjects 5 for Java?

00:02:11.100 --> 00:02:13.340
I never understand why there
is this for Java afterwards,

00:02:13.350 --> 00:02:15.800
because it's in Java anyway.

00:02:16.930 --> 00:02:20.440
It is basically WebObjects
4.5 ported to Java.

00:02:20.460 --> 00:02:25.700
It is a full-featured
WebObjects 4.5 compliant,

00:02:25.720 --> 00:02:31.900
and all the framework, WebObjects, EOF,
WoE extensions, you name it, are there.

00:02:31.900 --> 00:02:35.890
It works as an add-on to WebObjects 4.5.

00:02:35.900 --> 00:02:39.900
For example,
all the developer tools are shared

00:02:39.900 --> 00:02:42.900
between 4.5 and WebObjects 5.

00:02:42.900 --> 00:02:47.300
The monitoring tools have been ported,
and the test tools have

00:02:47.460 --> 00:02:49.900
been ported as well,
so that you can use them.

00:02:49.900 --> 00:02:55.010
You can use the pure Java version
of these tools to either monitor or

00:02:55.010 --> 00:02:58.900
test the 4.5 apps or the 5.0 apps.

00:02:58.900 --> 00:03:05.860
This is a good way for us to provide bug
fixes for these tools at the same time.

00:03:05.900 --> 00:03:08.780
And finally,
there is the conversion tool we

00:03:08.780 --> 00:03:10.890
are going to talk about today.

00:03:13.330 --> 00:03:15.040
So what are the benefits?

00:03:15.160 --> 00:03:22.290
One of the most important benefits is
that it still runs where we used to run.

00:03:22.300 --> 00:03:25.780
You can still develop a
Mac OS X server on Windows,

00:03:25.830 --> 00:03:29.000
and soon you'll be able
to develop on Mac OS X.

00:03:29.020 --> 00:03:32.900
The deployment platforms
have been extended,

00:03:32.900 --> 00:03:37.000
and we now support
Linux deployment environment.

00:03:37.820 --> 00:03:43.160
We expect to have a smaller runtime
footprint by moving to Java and to

00:03:43.180 --> 00:03:48.440
let you deploy on a lot of different
platforms that we can't even think of.

00:03:48.440 --> 00:03:51.210
We're looking forward to someone
deploying on PlayStation,

00:03:51.230 --> 00:03:51.840
for example.

00:03:51.840 --> 00:03:57.380
I don't even know if
they have a VM for it.

00:03:59.180 --> 00:04:03.940
Other benefits: Well, you can expect,
and take my word for it,

00:04:04.020 --> 00:04:06.100
a better Java experience.

00:04:06.270 --> 00:04:11.230
WebObjects 5.0 is going to
run on JDK 1.1.8 by default,

00:04:11.270 --> 00:04:14.100
and will be JDK 1.2 and 1.3 compliant.

00:04:14.100 --> 00:04:18.100
We are not going to take
advantage of the newer VMs,

00:04:18.320 --> 00:04:23.790
just for backward compatibility,
but we are going to run on them.

00:04:24.800 --> 00:04:27.430
This release will allow for
much better integration with

00:04:27.540 --> 00:04:29.190
third-party development tools.

00:04:29.290 --> 00:04:35.310
We have already some experience using
optimizers and debuggers that are

00:04:35.440 --> 00:04:38.810
outside our usual development toolbox.

00:04:39.330 --> 00:04:45.390
And finally, we'll integrate much better
with any third-party products

00:04:45.390 --> 00:04:47.180
that provide the Java interface.

00:04:47.210 --> 00:04:51.090
No more bridge issues
to be concerned about.

00:04:52.890 --> 00:04:57.080
More benefits: Database connectivity
is going to be expanded.

00:04:57.080 --> 00:05:02.490
Now that we have a pure JDBC support,
we are providing a plug-in

00:05:02.520 --> 00:05:09.790
technology so that for vendors that
have a customized JDBC interface,

00:05:09.800 --> 00:05:12.770
we are able to support
these customizations.

00:05:12.790 --> 00:05:16.540
We have also ported the LDAP adapter.

00:05:18.340 --> 00:05:25.980
Okay, so when I showed marketing the
prototype of the WebObjects 5 release,

00:05:26.010 --> 00:05:30.550
which was codenamed Monet at the time,
from the French painter,

00:05:30.870 --> 00:05:33.040
They came to me and said, well, Francois,
this is great,

00:05:33.040 --> 00:05:37.140
but what are we going to do with all
our Objective-C developers that have

00:05:37.140 --> 00:05:39.820
hundreds of thousands of lines of code?

00:05:40.170 --> 00:05:42.600
Are you going to provide them
a tool to deal with this?

00:05:42.600 --> 00:05:43.480
And I said, no way.

00:05:43.650 --> 00:05:45.530
I cannot do it.

00:05:46.200 --> 00:05:52.270
This is a task that is very hard and
will never reach a 100% solution.

00:05:52.850 --> 00:05:57.880
But I went for it,
and I spent some time designing,

00:05:57.880 --> 00:06:00.100
and spent a lot of time in the dark.

00:06:00.220 --> 00:06:02.710
Then I saw the light.

00:06:08.060 --> 00:06:14.460
I came up with a very good
design for a Java converter.

00:06:14.460 --> 00:06:18.850
My claim is that we are going
to take you 80% towards a pure

00:06:18.850 --> 00:06:22.200
Java solution by using these tools.

00:06:22.720 --> 00:06:25.520
And by the way,
there will be a Java Converter t-shirt,

00:06:25.520 --> 00:06:29.170
and guess what will be at the back
of the Java Converter t-shirt?

00:06:29.270 --> 00:06:33.510
We'll have commented out
this Objective-C return.

00:06:42.700 --> 00:06:45.700
Okay, let's move on.

00:06:45.860 --> 00:06:47.750
Who should convert?

00:06:48.240 --> 00:06:51.790
Well, basically,
any Objective-C or WebScript developer

00:06:52.100 --> 00:06:56.080
that requires more deployment
solutions should consider converting.

00:06:56.110 --> 00:07:00.360
Anyone with an existing
bridge Java application

00:07:00.380 --> 00:07:02.560
should not even consider it,
should just do it,

00:07:02.570 --> 00:07:04.770
because it's going to be seamless.

00:07:05.300 --> 00:07:09.850
Anyone requiring access to more
Java standards to better Java development

00:07:09.850 --> 00:07:14.030
tools that we do not provide
should think about converting to.

00:07:16.430 --> 00:07:19.540
Who should think twice before converting?

00:07:19.650 --> 00:07:22.160
Well,
if you've been around for a long time,

00:07:22.160 --> 00:07:25.840
you've been used to take advantage
of the Objective-C goodies that we

00:07:25.890 --> 00:07:27.760
like and that we are going to lose.

00:07:27.760 --> 00:07:31.610
So if your WebObjects application
or framework contains tons

00:07:31.650 --> 00:07:37.550
of categories on our own NS*,
Wo*, or EO* classes,

00:07:37.550 --> 00:07:41.440
maybe because you want to extend them,
maybe because you want

00:07:41.530 --> 00:07:44.180
to fix your own bugs,
you name it, well,

00:07:44.180 --> 00:07:46.050
you're going to be in trouble.

00:07:46.870 --> 00:07:50.300
If you rely heavily on the
PoseAs feature for the same reasons,

00:07:50.370 --> 00:07:54.020
PoseAs is a very powerful
feature of Objective-C,

00:07:54.040 --> 00:07:56.140
and it is gone.

00:07:56.510 --> 00:07:59.730
If you use a lot of low-level
Objective-C runtime calls,

00:07:59.840 --> 00:08:02.660
this kind of functions
that you can find in the

00:08:02.760 --> 00:08:07.630
system.framework/headers/Objective-C
header files,

00:08:07.640 --> 00:08:09.500
these are all not supported.

00:08:09.500 --> 00:08:13.360
You'll have to deal with
the pure Java runtime,

00:08:13.380 --> 00:08:17.490
so runtime provided by the
JDK and the Reflect APIs.

00:08:17.600 --> 00:08:20.930
If you use low-level
C function calls or structures,

00:08:20.930 --> 00:08:22.090
you're in trouble again.

00:08:22.100 --> 00:08:24.600
You'll have to change the
structures into objects if you can,

00:08:24.600 --> 00:08:27.470
but if you don't own
these C function calls,

00:08:27.560 --> 00:08:30.910
well, you'll have to find
an equivalent in Java.

00:08:32.020 --> 00:08:34.300
And of course,
if you're already in production

00:08:34.300 --> 00:08:36.620
with your application,
it is in Objective-C,

00:08:36.620 --> 00:08:39.900
but you have deployed it,
why the hell would you want to convert?

00:08:39.900 --> 00:08:44.850
Just let it run,
let it bring you money by truckload,

00:08:44.900 --> 00:08:48.470
and concentrate on the future.

00:08:51.900 --> 00:08:52.880
The conversion process.

00:08:52.920 --> 00:08:54.270
So what does it take?

00:08:54.470 --> 00:08:57.740
So my claim again is it
will take you 80% there.

00:08:57.870 --> 00:09:01.750
Let's use a metaphor here.

00:09:01.900 --> 00:09:05.180
Let's assume you want
to repaint your house.

00:09:05.250 --> 00:09:09.460
So you could go at it with a paintbrush
and a bucket of paint and spend

00:09:09.490 --> 00:09:11.410
your summer painting your house.

00:09:11.490 --> 00:09:13.170
Well, that's not very exciting.

00:09:13.330 --> 00:09:15.680
Now, the other solution is
to hire professionals,

00:09:15.680 --> 00:09:18.310
but professionals are very expensive.

00:09:18.520 --> 00:09:22.480
We're in the 21st century,
so you could hire a army

00:09:22.530 --> 00:09:28.030
of robots that would come,
and because they are very basic robots,

00:09:28.030 --> 00:09:34.240
that would tape around the trimming and
windows of your house and spray paint it.

00:09:34.240 --> 00:09:37.640
Now,
they would paint a few bushes and trees,

00:09:37.640 --> 00:09:39.240
but what the heck?

00:09:39.240 --> 00:09:41.310
Your house is painted.

00:09:41.900 --> 00:09:43.380
And you're 80% there.

00:09:43.400 --> 00:09:46.400
All that's left for you is to remove
the tape and do the finish work.

00:09:46.400 --> 00:09:47.890
It's interesting work.

00:09:47.900 --> 00:09:50.900
That's how Java Converter works.

00:09:50.900 --> 00:09:57.060
Okay, let's start with a demo.

00:10:01.400 --> 00:10:06.860
my lovely assistant of the day,
will demo the Java converter

00:10:06.860 --> 00:10:09.650
on one of our examples,
the distributed session

00:10:09.650 --> 00:10:10.990
store application.

00:10:11.180 --> 00:10:15.200
So basically, this is a command line tool
that is written in Java.

00:10:15.200 --> 00:10:18.160
And you see that it is
first copying the project,

00:10:18.160 --> 00:10:19.900
and then moving through all the files.

00:10:19.900 --> 00:10:23.860
This is a fast G4,
so it's really hard to talk as fast.

00:10:23.940 --> 00:10:26.710
Sorry for the Japanese translators.

00:10:29.170 --> 00:10:30.660
Okay, did the job.

00:10:30.730 --> 00:10:34.180
Now,
if Ben would like to open the project,

00:10:34.290 --> 00:10:38.480
this was a project with some
web script and some on 1.m,

00:10:38.490 --> 00:10:40.020
so it's a very simple project.

00:10:40.100 --> 00:10:43.220
Ben,
do you want to open the Java version,

00:10:43.230 --> 00:10:45.100
which is one of these?

00:10:45.110 --> 00:10:47.100
Yeah?

00:10:47.180 --> 00:10:49.830
So open the pb.project.

00:10:52.730 --> 00:10:55.320
So you'll see that now you
just have Java classes,

00:10:55.320 --> 00:10:59.380
and the application.m was
changed into an application.java.

00:10:59.380 --> 00:11:02.590
You can click on it to show that
there is some Java code there.

00:11:02.650 --> 00:11:08.000
And same with the other classes.

00:11:08.010 --> 00:11:12.860
If you look at the framework bucket,
the framework bucket is now

00:11:12.860 --> 00:11:15.830
pointing to the new frameworks.

00:11:16.040 --> 00:11:17.720
and so on.

00:11:17.720 --> 00:11:20.060
So I wouldn't claim
that this code compiles,

00:11:20.060 --> 00:11:23.300
but all the grunge work is done.

00:11:23.340 --> 00:11:27.190
Now, we have another example.

00:11:28.140 --> 00:11:31.060
which is again doing
the same kind of work,

00:11:31.060 --> 00:11:33.240
but this time on a file.

00:11:33.280 --> 00:11:36.860
The file we picked is
the EOUtilities file.

00:11:36.930 --> 00:11:40.770
So open this and pick EOUtilities.m.

00:11:46.290 --> 00:11:51.480
So, again,
Java Converter is working on the file,

00:11:51.510 --> 00:11:54.260
and is going to come out with...

00:11:55.500 --> 00:12:01.300
At one point you see that there are
some post-processing calls being done.

00:12:01.300 --> 00:12:04.090
It's part of the
customization I talked about,

00:12:04.140 --> 00:12:06.490
and I will explain it
in more detail later on.

00:12:06.500 --> 00:12:16.610
If you look at the files that
have been created for us,

00:12:16.610 --> 00:12:20.490
you have two files:
one is eoutilities.java,

00:12:20.490 --> 00:12:26.380
which is actually empty,
Because most of these click on it,

00:12:26.390 --> 00:12:27.870
it should be OK.

00:12:28.200 --> 00:12:30.800
Oops, you moved it.

00:12:30.800 --> 00:12:33.340
OK, click on this.

00:12:33.340 --> 00:12:35.000
Yes, this one is interesting.

00:12:35.110 --> 00:12:37.450
So this is actually what
happens to categories.

00:12:37.500 --> 00:12:41.030
Categories are moved to static classes.

00:12:41.100 --> 00:12:42.480
You don't see the word static here.

00:12:42.480 --> 00:12:43.420
This is a bug.

00:12:43.450 --> 00:12:47.040
But basically,
the methods that were in editing context,

00:12:47.060 --> 00:12:50.430
on AO editing context,
are now moved to categories.

00:12:50.440 --> 00:12:52.710
And this is an important point.

00:12:53.760 --> 00:12:57.780
Okay, and now as a last demo,
it is a demo that is

00:12:57.790 --> 00:13:00.980
going to take much longer,
Ben is going to start in the

00:13:00.980 --> 00:13:06.190
background the conversion of the whole,
the whole extensions framework.

00:13:06.200 --> 00:13:12.150
So, this is a 5000 lines of code
freaking framework with Objective-C,

00:13:12.160 --> 00:13:18.190
WebScript, Java, EventOnClientSideJava,
and it's just going to go through it.

00:13:18.200 --> 00:13:20.120
So this is going to take a while.

00:13:20.190 --> 00:13:22.200
Let's move back to the slides now.

00:13:23.700 --> 00:13:28.640
And Ben, tell us when this is finished so
that we can look at the result.

00:13:30.910 --> 00:13:33.790
Okay, so what did you see?

00:13:34.010 --> 00:13:37.450
Java Converter has different
modes of functioning.

00:13:37.450 --> 00:13:41.850
It has a project-wide conversion mode,
a file-by-file conversion

00:13:41.850 --> 00:13:45.220
mode for touch-up work,
and an all-at-once or

00:13:45.220 --> 00:13:48.010
rich-Java-only conversion mode.

00:13:50.110 --> 00:13:52.590
So what are the different
steps you can accomplish?

00:13:52.680 --> 00:13:55.640
You can first move your
files one by one from C,

00:13:55.640 --> 00:13:58.280
Objective-C,
or WebScript to a pure Java file.

00:13:58.280 --> 00:14:03.680
You can move a whole project directory
to a pure Java product directory.

00:14:03.740 --> 00:14:07.830
You can move a product directory
to an intermediate step,

00:14:07.830 --> 00:14:10.960
which is Bridge Java,
which you can still run on 4.5.

00:14:10.980 --> 00:14:14.080
And then move it again to a
pure Java product directory.

00:14:14.080 --> 00:14:18.090
And you could do the same with files.

00:14:20.510 --> 00:14:22.890
So, why would you convert in one step?

00:14:22.980 --> 00:14:27.860
Converting in one step from an
Objective-C to a pure Java project

00:14:28.030 --> 00:14:29.810
can be done for smaller projects.

00:14:29.870 --> 00:14:33.130
You can expect a long
period of non-running.

00:14:34.700 --> 00:14:40.900
[Transcript missing]

00:14:41.530 --> 00:14:45.040
All your files are converted,
and the resources, the makefiles,

00:14:45.100 --> 00:14:47.640
and the framework
references are corrected.

00:14:47.640 --> 00:14:53.230
We need to slightly modify the component
wordfiles and the direct-to-web models,

00:14:53.230 --> 00:14:54.320
for example.

00:14:56.720 --> 00:15:05.250
Now, by the way,
this one-step procedure is the one

00:15:05.250 --> 00:15:11.190
we took for our EO Access framework.

00:15:12.110 --> 00:15:15.140
The two-step conversion is a
procedure I followed for the

00:15:15.140 --> 00:15:16.860
WebObjects framework itself.

00:15:16.880 --> 00:15:19.140
At the time,
I didn't have a conversion tool.

00:15:19.140 --> 00:15:20.420
It came after a while.

00:15:20.570 --> 00:15:25.620
So I did the 20, 30,000 lines by hand.

00:15:25.620 --> 00:15:27.830
It was not a pleasurable experience.

00:15:27.910 --> 00:15:34.170
The way I made it more
pleasurable was by porting classes

00:15:34.690 --> 00:15:40.960
files, classes, one after the other,
and keeping the app running at all time.

00:15:40.960 --> 00:15:43.960
So this is doable thanks to the bridge.

00:15:44.020 --> 00:15:47.600
You can-- we recommend this
approach for larger projects,

00:15:47.600 --> 00:15:50.470
because at all time you
keep your project running.

00:15:50.540 --> 00:15:54.110
You're just moving one file at a
time from the Objective-C world

00:15:54.290 --> 00:15:56.660
to the bridge Java world.

00:15:56.660 --> 00:15:58.420
And you keep everything in sync.

00:15:58.480 --> 00:16:03.650
You make some APIs public if
needed through all wrappers.

00:16:03.720 --> 00:16:08.290
By doing so, you can do incremental
framework conversion,

00:16:08.290 --> 00:16:11.880
and you can go down to a
class by class conversion.

00:16:11.890 --> 00:16:13.800
When I started converting
WebObjects to Java,

00:16:13.800 --> 00:16:16.980
I wasn't even sure it was going
to work in the first place.

00:16:16.980 --> 00:16:19.560
So what did I do?

00:16:19.560 --> 00:16:22.560
I started by converting
the dynamic elements.

00:16:22.560 --> 00:16:26.510
And pretty soon I had a framework
that was split between Objective-C,

00:16:26.520 --> 00:16:32.160
bridge Java, and I was applying it to an
example like Hello World.

00:16:32.160 --> 00:16:33.380
And this was still working.

00:16:33.470 --> 00:16:37.880
So I grew more confident,
and I ported the Woe Session object.

00:16:37.890 --> 00:16:40.140
Now I had the Woe Session
object on the bridge side,

00:16:40.140 --> 00:16:43.010
and so on and so on,
until one day all I had left

00:16:43.150 --> 00:16:44.560
was the Woe Application object.

00:16:44.590 --> 00:16:48.770
Now this object is the
5,000 line of code monster.

00:16:49.060 --> 00:16:52.880
Again, here there is another
approach you can take,

00:16:52.880 --> 00:16:56.280
which is to subclass this
Objective-C Java and subclass it

00:16:56.280 --> 00:16:58.000
through the bridge in BridgeJava.

00:16:58.000 --> 00:17:01.170
And at this point you can
move method per method,

00:17:01.170 --> 00:17:04.830
one by one, through the bridge,
and again,

00:17:05.380 --> 00:17:11.330
makes the conversion process much more...

00:17:12.220 --> 00:17:13.500
It's stable, I'd say.

00:17:13.520 --> 00:17:16.660
You always have something running.

00:17:16.660 --> 00:17:18.590
It takes a lot more time.

00:17:18.610 --> 00:17:21.260
But if you have a manager
breathing down your neck,

00:17:21.260 --> 00:17:24.880
asking you, well, Francois,
where are you today?

00:17:24.880 --> 00:17:28.900
You can say, well, today I have the
WoS session that is running,

00:17:28.900 --> 00:17:32.000
or whatever is your case.

00:17:32.700 --> 00:17:36.740
And once running,
your project can be converted to pure

00:17:36.850 --> 00:17:41.230
Java by using the Java converter again.

00:17:43.200 --> 00:17:47.100
Okay, so what does a resulting
pure Java code look like?

00:17:47.100 --> 00:17:49.960
Well, let's pause for a moment.

00:17:50.070 --> 00:17:51.100
How do I look like now?

00:17:51.100 --> 00:17:52.380
I look like a clown.

00:17:52.390 --> 00:17:55.700
Okay, but I'm still myself.

00:18:04.600 --> 00:18:07.540
I'm still myself, and your code is still
going to be your code.

00:18:07.580 --> 00:18:10.950
It's going to look different,
but the important part, the logic,

00:18:10.950 --> 00:18:13.110
the algorithms are still there,
and they are still yours.

00:18:13.140 --> 00:18:16.830
So please, look further than just
the language they are in,

00:18:16.840 --> 00:18:19.760
because this language
conversion can be automated.

00:18:19.760 --> 00:18:22.990
What cannot be automated is the
value you bring in the code,

00:18:22.990 --> 00:18:24.440
which is your own logic.

00:18:24.500 --> 00:18:28.270
And what we do is that
we beautify your code.

00:18:28.400 --> 00:18:30.590
Well, beautify to which standard?

00:18:30.600 --> 00:18:33.760
I'm a mellow person,
and I don't care very

00:18:33.760 --> 00:18:38.060
much about aesthetics,
but we have some people in our group that

00:18:38.060 --> 00:18:43.100
are very on top of these code standards,
and they have defined or

00:18:43.100 --> 00:18:45.190
beautified code standards.

00:18:45.310 --> 00:18:49.900
Well, if you don't like them,
use one of these beautifiers that are

00:18:49.900 --> 00:18:52.100
available on the web for Java code.

00:18:52.100 --> 00:18:53.900
There are about ten of them.

00:18:53.900 --> 00:18:58.740
So pick your own,
and make it look as you want.

00:18:58.920 --> 00:19:03.280
Now, we preserve the order in your code,
of course, otherwise what would be left?

00:19:03.280 --> 00:19:06.540
And we prefer all your comments.

00:19:07.610 --> 00:19:13.480
We as well add some comments that are
tagged so that you get three levels

00:19:13.480 --> 00:19:19.010
of conversion errors that are easily
searchable in the produced Java code.

00:19:20.800 --> 00:19:22.350
We're done, Francois.

00:19:22.410 --> 00:19:24.190
Wow, what a timing.

00:19:24.230 --> 00:19:29.100
OK, so let's look at our
WebExtensions Java project.

00:19:29.210 --> 00:19:32.550
So this is a very big
project with sub-projects.

00:19:32.600 --> 00:19:37.330
And the Java converter
dealt with them correctly.

00:19:37.360 --> 00:19:40.150
Oh, here, actually,
we have some more categories,

00:19:40.160 --> 00:19:42.190
interesting categories.

00:19:42.200 --> 00:19:45.420
Categories on objects
that are not recognized,

00:19:45.500 --> 00:19:50.180
like NSArray, NSMutableArray,
cannot be merged back

00:19:50.180 --> 00:19:52.520
into the model class,
let's say.

00:19:52.620 --> 00:19:55.990
So these categories are
transformed into static classes.

00:19:56.030 --> 00:20:00.460
These are the four ones you see at the
beginning of the project class list.

00:20:00.460 --> 00:20:04.040
Now, if you move to sub-projects,
for example-- oh,

00:20:04.040 --> 00:20:05.790
you would like to see one?

00:20:06.200 --> 00:20:08.350
Okay, click on the first one,
for example.

00:20:08.470 --> 00:20:11.310
So, it's now a helper class.

00:20:11.810 --> 00:20:15.440
And I... and this method
should actually be static,

00:20:15.450 --> 00:20:17.700
this is just a bug, we'll fix.

00:20:17.830 --> 00:20:21.350
Now if you move to the Subproject bucket,
you see that we had a

00:20:21.380 --> 00:20:22.650
bunch of Subprojects.

00:20:22.730 --> 00:20:25.610
We had client-side Java code,
well this was pure Java code,

00:20:25.610 --> 00:20:29.070
and we just didn't touch it,
because it was already in pure Java.

00:20:29.310 --> 00:20:35.120
We had some more, for example,
the more even... oh let's...

00:20:35.360 --> 00:20:39.020
The row event logging code
is interesting as well.

00:20:39.020 --> 00:20:41.470
Pretty complicated code.

00:20:41.500 --> 00:20:42.940
Can you open one of these?

00:20:42.940 --> 00:20:45.470
Let's see.

00:20:47.970 --> 00:20:49.900
Let's see what we can find here.

00:20:49.900 --> 00:20:51.900
So you see the comments are preserved.

00:20:51.900 --> 00:20:55.130
Yeah, it's not very complicated.

00:20:55.210 --> 00:21:01.060
So basically, these kind of classes,
you can expect them to compile at once.

00:21:01.060 --> 00:21:02.860
Let's move back to the top level.

00:21:02.860 --> 00:21:05.690
I'd like to show a web script file.

00:21:06.770 --> 00:21:10.780
So classes,
and look for the statistics page.

00:21:10.780 --> 00:21:13.160
I know this was a web script file.

00:21:13.800 --> 00:21:26.720
For WebScript files,
what you lose is the type

00:21:26.720 --> 00:21:30.800
declaration of the object.

00:21:30.800 --> 00:21:34.800
For all these IVARs,
you get an object type.

00:21:35.110 --> 00:21:37.800
Whenever we can restore the type, we do.

00:21:37.800 --> 00:21:41.800
For example, you see here in the middle,
there are mutable dictionary and double.

00:21:41.800 --> 00:21:47.000
Well, the Java converter is clever enough
to notice that some arithmetic

00:21:47.000 --> 00:21:48.800
operation was done on this IVAR.

00:21:48.800 --> 00:21:52.800
So it deducted that
this should be a double.

00:21:52.800 --> 00:21:56.610
So it made it a double IVAR instead
of just a plain object.

00:21:56.800 --> 00:21:59.610
So sometimes with WebScript,
it's able to restore

00:21:59.610 --> 00:22:00.800
the type of an object.

00:22:00.800 --> 00:22:03.800
Other times,
it will just leave it as an object.

00:22:03.800 --> 00:22:09.090
Okay,
well let's switch back to the slide.

00:22:09.770 --> 00:22:11.000
And let's move on.

00:22:11.120 --> 00:22:14.810
So once it is time to compile--

00:22:15.120 --> 00:22:20.440
You go through all these errors
and solve them one by one.

00:22:20.510 --> 00:22:24.300
And because most of the
errors will be the same,

00:22:24.320 --> 00:22:28.340
you're going to be able to
solve a bunch of them at a time,

00:22:28.340 --> 00:22:32.640
and more importantly,
have a consistent way of solving them.

00:22:32.780 --> 00:22:36.800
So the biggest problem I got when
I did my file-by-file conversion,

00:22:36.800 --> 00:22:41.210
converting the WebObjects framework,
was that

00:22:41.910 --> 00:22:46.200
A month down the road,
I had forgotten what type of solution

00:22:46.200 --> 00:22:48.040
I had found for a problem on day one.

00:22:48.140 --> 00:22:52.540
And I tend to solve the same
problems in different ways,

00:22:52.540 --> 00:22:55.140
and it led to very inconsistent coding.

00:22:55.140 --> 00:22:59.280
Now, when you have a tool that will
do everything up front for you,

00:22:59.320 --> 00:23:04.120
it will solve simple problems
like try-catch exception,

00:23:04.170 --> 00:23:11.630
wrapping of exceptions, and enumerations,
and so on, in a nice and consistent way.

00:23:13.510 --> 00:23:18.580
So, I claim that you know 80% there,
and that I have taken out

00:23:18.580 --> 00:23:21.160
the hassle of converting.

00:23:21.210 --> 00:23:26.400
My translation rate, personally,
was 300 lines a day.

00:23:26.550 --> 00:23:30.200
So, for example,
this project of WoE extensions

00:23:30.200 --> 00:23:38.100
that sees 4500 lines of code,
I would have done in 15 days.

00:23:38.670 --> 00:23:42.640
Java Converter just did it,
just brought me 80%

00:23:42.640 --> 00:23:44.440
there in five minutes.

00:23:44.490 --> 00:23:47.620
So that's a pretty good accomplishment,
isn't it?

00:23:53.510 --> 00:23:59.060
Okay,
let's drill down more into the issues.

00:24:00.860 --> 00:24:04.930
Some foundation classes
are not available anymore.

00:24:04.990 --> 00:24:07.300
So don't run away screaming.

00:24:07.450 --> 00:24:10.930
These are the classes you were
not using in the first place.

00:24:11.800 --> 00:24:13.780
Or you were using them
because you had to,

00:24:13.890 --> 00:24:15.760
like NSAutoReleasePool.

00:24:15.760 --> 00:24:18.410
Who is going to mourn AutoReleasePool?

00:24:19.200 --> 00:24:25.400
We have some skeptics
and some masochists here.

00:24:26.720 --> 00:24:31.700
Java lang thread is a good
alternative to NSThread.

00:24:31.700 --> 00:24:33.700
Same with Java lang string.

00:24:33.700 --> 00:24:38.820
So we removed NSThread, NSString,
and others that had exact

00:24:38.820 --> 00:24:41.800
counterparts in the Java world.

00:24:42.120 --> 00:24:46.730
The NS* structs are gone, except NSRange.

00:24:46.790 --> 00:24:50.760
We kept NSRange because it
was used in our public APIs,

00:24:50.830 --> 00:24:53.540
and we didn't want to
break our public APIs.

00:24:53.540 --> 00:24:55.900
So we kept it.

00:24:55.930 --> 00:25:01.050
But if you're using NSSize, NSPoint,
NSRect, you'd have to create your

00:25:01.050 --> 00:25:03.020
own Java object to do so.

00:25:05.990 --> 00:25:07.670
Categories issues.

00:25:07.790 --> 00:25:11.300
Let's sum up what we saw
in the demonstration.

00:25:11.340 --> 00:25:14.660
Categories on classes in the
same project are reunited.

00:25:14.700 --> 00:25:19.310
So if you implement your own class
and then lower down in a sub-project,

00:25:19.390 --> 00:25:22.880
you start adding
categories on this class,

00:25:22.880 --> 00:25:27.400
everything will be merged in one class.

00:25:28.790 --> 00:25:32.630
So you will not be able to use categories
to compartment your code anymore,

00:25:32.630 --> 00:25:34.460
like in Objective-C.

00:25:34.460 --> 00:25:39.280
Categories on external classes
are transformed in helper classes,

00:25:39.280 --> 00:25:43.090
especially categories on
classes like NSString.

00:25:43.620 --> 00:25:48.130
But the new helper classes cannot be
referenced when needed automatically,

00:25:48.160 --> 00:25:50.000
so you will still have to go back.

00:25:50.030 --> 00:25:55.500
Let's say you decide to have a category
on any string and re-implement length.

00:25:55.860 --> 00:25:58.440
Now we are going to create,
the Java converter is going to create

00:25:58.440 --> 00:26:04.800
for you an NSString under our length
class with a helper method called length.

00:26:04.800 --> 00:26:08.730
But it's not going to be able
to guess that everywhere in your

00:26:08.730 --> 00:26:11.020
code it's called length or not.

00:26:11.120 --> 00:26:15.760
So you will have to go and modify
the call into a static call there.

00:26:18.230 --> 00:26:21.420
Macros and Functions:
All macros are resolved.

00:26:21.560 --> 00:26:28.610
This is done by using the C precompiler,
and because of that,

00:26:28.610 --> 00:26:32.810
you may run into problems if
you're using if-devs a lot to

00:26:32.930 --> 00:26:36.140
solve cross-platform issues.

00:26:36.140 --> 00:26:41.130
You may have to convert several times
for every platform you're using.

00:26:42.000 --> 00:26:45.340
Exception handling is handled nicely.

00:26:45.360 --> 00:26:49.860
NSEnumerator is handled nicely as well.

00:26:49.860 --> 00:26:54.630
Same with if statement,
whether there is no test if

00:26:54.630 --> 00:26:57.130
the object is null or not.

00:26:57.820 --> 00:27:04.030
All the NSFunctions calls are gone,
and these are automatically

00:27:04.120 --> 00:27:06.370
translated when we can.

00:27:06.480 --> 00:27:10.380
In other cases,
we do not have an equivalent,

00:27:10.420 --> 00:27:13.460
so you'll be on your own.

00:27:13.490 --> 00:27:18.360
And finally, C-Function calls must
be corrected manually.

00:27:18.390 --> 00:27:22.770
We do not provide a
conversion command for fopen,

00:27:22.770 --> 00:27:24.190
for example.

00:27:26.680 --> 00:27:29.940
Some more API issues.

00:27:29.940 --> 00:27:33.810
Most of our API changes are
automatically done for you.

00:27:33.880 --> 00:27:41.220
And most of these API changes actually
occur between Objective-C and BridgeJava.

00:27:41.260 --> 00:27:45.840
Between BridgeJava and PureJava,
there is almost no API change.

00:27:45.900 --> 00:27:49.690
The change between BridgeJava
and PureJava is just an

00:27:49.740 --> 00:27:51.940
import statement change.

00:27:52.830 --> 00:27:55.200
and a couple of API challenges,
but very minimal.

00:27:55.200 --> 00:27:57.500
So don't be too concerned about this.

00:27:57.500 --> 00:28:02.420
The API you're using 95%
of the time will be there.

00:28:03.870 --> 00:28:06.700
So, as I said,
all classes have kept their bridged API,

00:28:06.700 --> 00:28:10.790
and the API changes on your
frameworks can be automated.

00:28:10.800 --> 00:28:16.980
I will explain, go more into detail on
this last point later.

00:28:18.820 --> 00:28:24.940
Okay, now, what happens when you start
an Objective-C conversion?

00:28:27.960 --> 00:28:33.740
Basically, the Java converter is
an Objective-C compiler.

00:28:33.800 --> 00:28:36.530
It's written in pure Java as well.

00:28:37.900 --> 00:28:41.590
But, and because of that,
you cannot use the

00:28:41.590 --> 00:28:44.000
GNU Objective-C grammar.

00:28:44.050 --> 00:28:48.080
It's using a grammar that
I have rewritten that is based

00:28:48.080 --> 00:28:51.880
on the GNU Objective-C grammar,
and it follows a grammar

00:28:51.880 --> 00:28:57.600
standard from Metamata,
which is a grammar used across Java,

00:28:57.600 --> 00:29:00.870
the Java world, for parsing.

00:29:01.380 --> 00:29:05.100
We provide this grammar so
that you can improve it.

00:29:05.120 --> 00:29:09.980
If you want to support
WebObjective-C syntax,

00:29:09.980 --> 00:29:13.680
like the @asm for assembly code,
if you find a way to embed

00:29:13.900 --> 00:29:17.180
assembly code in your Java program,
you have the grammar.

00:29:17.180 --> 00:29:19.020
You can do that.

00:29:20.520 --> 00:29:22.740
This is not a good C compiler.

00:29:22.740 --> 00:29:28.500
I have concentrated on converting
Objective-C to Java and not C to Java.

00:29:28.500 --> 00:29:32.580
If you rely a lot on C pointers
and pointer manipulation,

00:29:32.580 --> 00:29:35.490
well, you're going to be in trouble.

00:29:35.500 --> 00:29:42.500
So don't use that to convert
your C-based graphics library.

00:29:42.500 --> 00:29:44.490
It won't work.

00:29:45.410 --> 00:29:51.090
And as I said before,
we use CPP for macro preprocessing.

00:29:53.060 --> 00:29:54.380
Webscript conversion.

00:29:54.400 --> 00:29:57.430
Well, what is the best Webscript
parser we have here?

00:29:57.430 --> 00:29:59.300
It's Webscript itself.

00:29:59.440 --> 00:30:05.410
So I slightly modified
the Webscript parser.

00:30:05.670 --> 00:30:09.730
and extended it to generate
pseudo-Objective-C.

00:30:09.820 --> 00:30:12.720
So once I get this
pseudo-Objective-C code,

00:30:12.720 --> 00:30:18.120
I can feed it to the real Java converter
that will change it into Java code.

00:30:18.120 --> 00:30:19.360
That's basically how it works.

00:30:19.430 --> 00:30:23.080
So I had to loosen somewhat the
Objective-C grammar so that it would

00:30:23.110 --> 00:30:31.960
accept this slack WebScript coding
standard that you like.

00:30:33.890 --> 00:30:40.930
And finally, the Bridge Java conversion
is done by just feeding a

00:30:41.120 --> 00:30:47.240
Bridge Java file to a top script,
and the output is pure Java.

00:30:47.320 --> 00:30:51.930
All the imports are corrected,
the minimal API changes are applied,

00:30:51.970 --> 00:30:53.700
and that's it.

00:30:56.910 --> 00:30:59.640
Java Converter is extensible.

00:30:59.790 --> 00:31:01.770
What does it mean?

00:31:01.830 --> 00:31:04.200
As I said before-- well,
I haven't said it before,

00:31:04.200 --> 00:31:06.240
but the source code will be provided.

00:31:06.310 --> 00:31:08.760
The grammar will be provided.

00:31:09.500 --> 00:31:13.060
And for people that are
not that adventurous,

00:31:13.130 --> 00:31:19.190
we as well provide buckets, well,
script folders,

00:31:19.190 --> 00:31:22.640
where you can drop your own
scripts to enhance the pre-

00:31:22.640 --> 00:31:24.700
and post-conversion steps.

00:31:24.800 --> 00:31:29.880
So if you have put a script
in the pre-conversion folder,

00:31:29.970 --> 00:31:34.030
whatever file is fed to the
Java converter will first be

00:31:34.030 --> 00:31:36.600
passed through this script,
and the output will only be

00:31:36.620 --> 00:31:38.960
fed to the Java converter.

00:31:39.630 --> 00:31:44.500
And this way you can automate
your own framework API changes.

00:31:44.560 --> 00:31:48.200
If you have your own API changes
between Objective-C to Java,

00:31:48.200 --> 00:31:51.200
you most likely will,
you can automate them

00:31:51.200 --> 00:31:52.900
with one of these scripts.

00:31:55.620 --> 00:32:03.980
In conclusion, I went into more detail in
the WebObjects 5 environment.

00:32:05.060 --> 00:32:08.350
We demoed you a great tool
that handles much of the

00:32:08.380 --> 00:32:11.650
uninteresting work for converting.

00:32:12.000 --> 00:32:21.080
and the rest of the team will
be present at the next session.

00:32:21.250 --> 00:32:24.700
I hope most of you
will find a use for it,

00:32:24.700 --> 00:32:26.360
and that you will be very successful.

00:32:28.820 --> 00:32:35.940
Now, if you have any questions,
we will have a buff meeting,

00:32:35.940 --> 00:32:39.060
birds of a feather, later today.

00:32:41.830 --> 00:32:42.790
Across the street.

00:32:42.800 --> 00:32:46.800
Across the street, yeah.

00:32:46.800 --> 00:32:53.800
And now I want you to think different
about the conversion process.

00:32:53.800 --> 00:32:54.800
And I will take any questions.

00:32:54.800 --> 00:32:55.800
All right, thank you very much Francois.