WEBVTT

00:00:10.500 --> 00:00:11.900
My name is Andreas Wendker.

00:00:11.900 --> 00:00:15.150
I'm one of the managers in the
WebObjects engineering team,

00:00:15.160 --> 00:00:18.600
and I'm responsible for the
rapid development technologies.

00:00:18.750 --> 00:00:21.290
Right now we have two technologies
that fit into this category.

00:00:21.410 --> 00:00:23.400
It's Direct to Web and
Direct to Java Client.

00:00:23.400 --> 00:00:29.840
So I hope that most of you just
joined the last session that

00:00:29.930 --> 00:00:32.600
we gave about Direct to Web,
and it's my pleasure now to talk

00:00:32.600 --> 00:00:32.600
about Direct to Java Client.

00:00:33.180 --> 00:00:35.860
So Direct to Java Client is
one of our newest technologies.

00:00:35.860 --> 00:00:40.600
We just shipped it a few months ago
the first time in the release 4.5.

00:00:40.600 --> 00:00:42.800
And it has a very similar
purpose as Direct to Web,

00:00:42.800 --> 00:00:45.340
but it's targeted at a
different kind of applications.

00:00:45.340 --> 00:00:49.230
It's not used to create
Internet applications or Web applications

00:00:49.350 --> 00:00:50.580
that run in a Web browser.

00:00:50.630 --> 00:00:55.300
It's used to create desktop applications
that are useful in the intranet.

00:00:56.100 --> 00:00:59.360
So what I'm going to show you is
that Direct to Java Client is a very,

00:00:59.360 --> 00:01:03.000
very strong rapid development technology
for desktop business applications.

00:01:03.000 --> 00:01:09.000
You will see that Direct to Java Client
is nearly ideal for prototyping purposes.

00:01:09.000 --> 00:01:15.090
And Direct to Java Client is not just
a cool wizard that makes a nice demo.

00:01:15.090 --> 00:01:17.890
It's actually very serious stuff
that will be very helpful in

00:01:17.890 --> 00:01:20.310
your real-world applications.

00:01:20.600 --> 00:01:24.840
So what I'd like to talk about is,
I'd first like to give you a

00:01:24.840 --> 00:01:27.670
short technical introduction
into Direct to Java Client,

00:01:27.770 --> 00:01:32.490
then give a demonstration about
a typical development process,

00:01:32.700 --> 00:01:36.720
then talk about the very
important topic of customization,

00:01:36.780 --> 00:01:40.160
give another demo about an
application that uses various

00:01:40.240 --> 00:01:44.230
of our customization techniques,
and then I'll give you a few good

00:01:44.230 --> 00:01:48.100
reasons why we think you should use
Direct to Java Client and then have

00:01:48.100 --> 00:01:50.500
the summary and question and answers.

00:01:51.000 --> 00:04:53.300
[Transcript missing]

00:04:53.500 --> 00:05:49.200
[Transcript missing]

00:05:49.970 --> 00:05:54.080
To develop a Java Client
application in the traditional way,

00:05:54.380 --> 00:05:58.650
you will find you will probably
pretty much write three logical

00:05:58.820 --> 00:06:01.070
pieces for your application.

00:06:01.200 --> 00:06:03.570
First of all,
you have to create a database and

00:06:03.580 --> 00:06:06.900
you have to generate an EU model
that describes this database.

00:06:06.900 --> 00:06:09.900
You probably also want to write
some business logic for it.

00:06:09.900 --> 00:06:10.820
This is one unit.

00:06:10.900 --> 00:06:14.690
Then as a second step,
and I will not be able

00:06:14.690 --> 00:06:18.960
to show you that today,
but the second piece of your

00:06:18.990 --> 00:06:21.900
application is the user interface.

00:06:21.900 --> 00:06:26.070
We provide you with a graphical
user interface editor which

00:06:26.070 --> 00:06:28.200
is called Interface Builder,
which you can use to generate

00:06:28.500 --> 00:06:32.200
windows and to drop text fields
in it and labels and buttons and

00:06:32.200 --> 00:06:33.780
table views and all this stuff.

00:06:33.970 --> 00:06:39.900
These interface files are the
second part of your application.

00:06:39.900 --> 00:06:40.900
The second part of your application.

00:06:40.900 --> 00:06:43.040
You probably also have to
write a little bit of logic

00:06:43.250 --> 00:06:45.010
around this user interface to,
for example,

00:06:45.010 --> 00:06:46.900
react on double clicks and table views.

00:06:46.900 --> 00:06:51.900
Then a third part of your application
is what I call application logic.

00:06:52.020 --> 00:06:55.140
That is all the code that you need
to connect the various user interface

00:06:55.140 --> 00:06:56.900
components of your application.

00:06:56.900 --> 00:07:00.900
If you press a button in one window,
then another window opens.

00:07:00.900 --> 00:07:04.850
All this code that connects the
various pieces in your application.

00:07:04.900 --> 00:07:06.890
That is what I call application logic.

00:07:06.900 --> 00:07:08.900
Now there is a problem with that.

00:07:08.900 --> 00:07:09.900
This problem is that these
pieces depend on each other.

00:07:09.900 --> 00:07:10.880
You have to create a database.

00:07:10.930 --> 00:07:13.860
If you change the database,
if you change your model,

00:07:13.980 --> 00:07:15.900
then you will also have to go and
change all your interface files.

00:07:15.900 --> 00:07:19.220
If you have a localized application
with multiple interface files

00:07:19.290 --> 00:07:21.890
for the different languages,
it even gets worse.

00:07:21.900 --> 00:07:23.740
Then you have to change
multiple interface files just

00:07:23.740 --> 00:07:24.900
if you change your database.

00:07:24.900 --> 00:07:27.550
The worst case is that you might
even have to change your application

00:07:27.630 --> 00:07:30.800
logic because then you might even
have to open different windows.

00:07:30.900 --> 00:07:32.900
It depends on how complex your change is.

00:07:32.900 --> 00:07:34.690
The maintenance cost that
you have for these kinds of

00:07:34.710 --> 00:07:35.900
applications is pretty high.

00:07:35.900 --> 00:07:39.900
Another downside of this is that
unless you do a lot of work,

00:07:39.900 --> 00:07:39.900
you will have to do a lot of work.

00:07:40.230 --> 00:07:43.820
Unless you do relatively simple
API testing of your business logic,

00:07:43.930 --> 00:07:44.900
testing is pretty complicated.

00:07:44.900 --> 00:07:46.870
You need all these three pieces.

00:07:46.900 --> 00:07:48.890
You have a long bootstrapping time.

00:07:48.930 --> 00:07:51.510
You first have to sit down and
write code for all these three

00:07:51.510 --> 00:07:54.900
pieces to get something on
the screen that you can test.

00:07:55.170 --> 00:07:57.580
Obviously,
that's pretty bad for prototyping

00:07:57.600 --> 00:07:59.700
because you will waste a lot of time.

00:07:59.970 --> 00:08:05.960
When we shipped the Java Client
technology the first time in 4.0,

00:08:06.190 --> 00:08:07.900
which is one and a half years ago now,
I think,

00:08:07.900 --> 00:08:08.890
we saw that it's actually pretty good.

00:08:08.900 --> 00:08:12.900
We saw that it's actually pretty
complicated to create an application.

00:08:12.900 --> 00:08:15.900
There are lots of steps involved just
to bootstrap this development process.

00:08:15.900 --> 00:08:18.270
We wanted to do something for
you that makes it much easier

00:08:18.380 --> 00:08:20.850
to develop these applications.

00:08:20.960 --> 00:08:22.860
What we came up with is
Direct-to-Java Client.

00:08:22.900 --> 00:08:27.900
The idea behind Direct-to-Java Client
is to generate the application logic

00:08:27.900 --> 00:08:31.890
and the user interface dynamically
for you just based on the EU model

00:08:31.890 --> 00:08:33.900
like we do it in Direct-to-Web.

00:08:33.900 --> 00:08:36.100
The advantage is that you
can sit down and develop,

00:08:36.170 --> 00:08:39.840
test, and polish your business logic
without wasting any time on

00:08:39.840 --> 00:08:43.840
user interface development or
writing your application logic.

00:08:43.920 --> 00:08:45.900
You can really fully concentrate
on the business logic.

00:08:46.140 --> 00:08:51.830
When the business logic is finalized,
then you can go ahead and invest

00:08:51.830 --> 00:08:53.900
time into the user interface.

00:08:53.900 --> 00:09:01.210
The stages you go through if you
use Direct-to-Java Client is that,

00:09:01.390 --> 00:09:05.120
like in the traditional development,
you will have to create a database and a

00:09:05.120 --> 00:09:07.650
model and some business logic around it.

00:09:10.620 --> 00:09:18.310
Then you take that and stuff it into
this dynamic application engine.

00:09:18.350 --> 00:09:21.990
What you get is a default application,
very similar to what is

00:09:22.010 --> 00:09:24.590
done in Direct to Web.

00:09:24.680 --> 00:09:29.590
This default application might already
be good enough to show it to a customer.

00:09:29.640 --> 00:09:32.600
It can actually act as a
first prototype already.

00:09:32.690 --> 00:09:34.850
But you probably want to tune
it a little bit and do some

00:09:34.850 --> 00:09:36.600
relatively simple customizations.

00:09:36.600 --> 00:09:39.600
For example,
change our selection of properties

00:09:39.600 --> 00:09:41.600
that we use to query for data objects.

00:09:41.600 --> 00:09:44.500
Or you want to maybe just
change the order of text

00:09:44.500 --> 00:09:46.600
fields in the user interface.

00:09:46.600 --> 00:09:47.580
Stuff like that.

00:09:47.630 --> 00:09:51.780
For that, we provide you with a tool
which is called the Assistant,

00:09:51.870 --> 00:09:53.570
similar to Direct to Web.

00:09:53.610 --> 00:09:57.380
With this Assistant,
you can do these relatively

00:09:57.430 --> 00:09:59.590
simple customizations.

00:09:59.630 --> 00:10:02.600
You will end up with
a custom application.

00:10:02.740 --> 00:10:06.030
Our recommendation is that you
stay on this level as long as

00:10:06.030 --> 00:10:10.570
possible and first invest the time
to implement your business logic.

00:10:10.610 --> 00:10:14.600
Then when you show it to your
customer again and again,

00:10:14.600 --> 00:10:17.520
and he is finally content
with the business logic

00:10:17.660 --> 00:10:21.130
happening in your application,
then you can go ahead

00:10:21.130 --> 00:10:24.000
and polish it and make,
for example,

00:10:24.030 --> 00:10:27.490
layout changes that are very specialized.

00:10:27.610 --> 00:10:29.600
I will show you a few examples of that.

00:10:29.600 --> 00:10:32.600
How do we generate this user interface?

00:10:32.600 --> 00:10:36.230
The first thing you need to
know for that is that we,

00:10:36.230 --> 00:10:39.030
on the client side,
provide you with a bunch of

00:10:39.080 --> 00:10:40.600
objects that we call controllers.

00:10:40.600 --> 00:10:43.390
We have controllers
for all kinds of tasks.

00:10:43.650 --> 00:10:47.600
One controller is the
application object itself.

00:10:47.600 --> 00:10:50.010
The application object is the
object that is responsible for

00:10:50.090 --> 00:10:51.590
bootstrapping your application.

00:10:51.620 --> 00:10:54.000
It's the object that has the
main function that starts the

00:10:54.000 --> 00:10:59.540
application and that takes care
of opening the first windows.

00:10:59.600 --> 00:11:01.600
It's also the center point of contact.

00:11:01.600 --> 00:11:05.600
You're looking for other controllers
and other windows in your application.

00:11:05.600 --> 00:11:09.590
Then we have purely user
interface related controllers.

00:11:09.600 --> 00:11:12.200
For example,
we have a window controller that knows

00:11:12.280 --> 00:11:14.600
how to react on changes in the window.

00:11:14.600 --> 00:11:16.570
The user presses the close button.

00:11:16.690 --> 00:11:19.350
We have tab view controllers,
all this stuff.

00:11:19.680 --> 00:11:23.330
Another type of controllers
are controllers that we call

00:11:23.500 --> 00:11:25.600
entity level controllers.

00:11:25.600 --> 00:11:28.750
These entity level controllers
work with your business objects

00:11:28.750 --> 00:11:30.580
on the level of the object itself.

00:11:30.670 --> 00:11:33.590
They define how you
can query for objects,

00:11:33.600 --> 00:11:36.790
how you can edit them,
or how you display them in a table,

00:11:36.790 --> 00:11:37.560
in a list.

00:11:37.600 --> 00:11:41.200
The fourth type of controller
that we have is called

00:11:41.250 --> 00:11:43.590
property level controllers.

00:11:43.900 --> 00:11:47.970
They also deal with your business object,
but they do it just with

00:11:47.990 --> 00:11:49.600
one property at a time.

00:11:49.600 --> 00:11:52.590
For example, a text view controller that
just displays one attribute,

00:11:52.600 --> 00:11:56.570
like the name of a customer,
or action buttons, or things like that.

00:11:56.600 --> 00:11:59.600
Now, these controllers not only
know how to react on changes,

00:11:59.600 --> 00:12:03.600
they know how to react on events that
are triggered in the user interface,

00:12:03.600 --> 00:12:05.570
for example, a button click or so.

00:12:05.640 --> 00:12:08.600
They also know how to
generate the user interface.

00:12:08.600 --> 00:12:10.600
The text view controller knows
how to create a text view.

00:12:10.600 --> 00:12:13.600
The window controller knows
how to create a window.

00:12:13.850 --> 00:12:17.780
Then they also know how to
lay out the views that are

00:12:17.790 --> 00:12:20.440
generated in a reasonable way.

00:12:20.600 --> 00:12:26.030
The most important information for them
to do the layout is actually that the

00:12:26.110 --> 00:12:28.600
controllers are organized in a hierarchy.

00:12:28.600 --> 00:12:32.600
The easiest way for me to explain it is
probably by taking a look at an example.

00:12:32.720 --> 00:12:36.600
If you take a look at this window here,
you see that there's a toolbar in there.

00:12:36.710 --> 00:12:41.510
It has a text field and a tab view,
the two views in it.

00:12:41.610 --> 00:12:46.580
The root controller for a window like
this would be a window controller.

00:12:46.600 --> 00:12:49.600
Then inside this window,
we have a toolbar controller.

00:12:49.600 --> 00:12:52.560
The toolbar controller is a
subcontroller of the window controller.

00:12:52.690 --> 00:12:55.600
Then inside there,
we have a text field and a tab view.

00:12:55.600 --> 00:12:57.600
As we can see in the tab view,
we have two more views.

00:12:57.600 --> 00:13:00.570
One is for the roles,
one is for the plot summary.

00:13:00.650 --> 00:13:03.600
In the role view,
we have a table view with two columns.

00:13:03.600 --> 00:13:06.410
In the plot summary,
we have--you can't see it,

00:13:06.410 --> 00:13:08.460
but it would be reasonable to assume
that there's something like a text

00:13:08.470 --> 00:13:10.580
area that displays a larger text.

00:13:10.600 --> 00:13:16.910
The hierarchy of controllers pretty
much also reflects the view hierarchy

00:13:16.910 --> 00:13:20.600
that we generate for the user interface.

00:13:22.100 --> 00:13:25.680
We know what kind of objects
we use on the client side to

00:13:25.710 --> 00:13:28.980
generate the user interface,
but the question is still where

00:13:28.980 --> 00:13:29.910
do these objects come from?

00:13:30.020 --> 00:13:31.920
The answer is they come from the server.

00:13:31.990 --> 00:13:37.570
The reason for that is, most of all,
I would say security and second of all,

00:13:37.570 --> 00:13:39.000
performance.

00:13:39.000 --> 00:13:46.000
The user interface is generated
based on the EO model.

00:13:46.100 --> 00:13:50.000
To generate the user interface
and the hierarchy of controllers,

00:13:50.000 --> 00:13:50.990
we have to take a look at the model.

00:13:51.000 --> 00:13:54.120
This is information that we for sure
don't want to send to the client

00:13:54.130 --> 00:13:55.930
because it would be very unsecure.

00:13:56.090 --> 00:13:59.450
In addition to that,
most of the user interfaces are

00:13:59.540 --> 00:14:02.000
the same for all kinds of clients.

00:14:02.000 --> 00:14:05.130
If you generate the hierarchy of
controllers on the server side,

00:14:05.130 --> 00:14:07.930
we can do it once and then
reuse it for multiple clients.

00:14:08.120 --> 00:14:13.990
The format that we use to describe
the hierarchy of controllers is XML.

00:14:13.990 --> 00:14:14.990
I gave you an example.

00:14:14.990 --> 00:14:18.000
It's actually pretty much the
same example as this one here.

00:14:18.000 --> 00:14:21.990
We have a window controller,
a toolbar controller.

00:14:22.000 --> 00:14:25.670
This is the hierarchy of
controllers described in XML.

00:14:28.720 --> 00:14:32.340
So, like in Direct to Web,
on the server side,

00:14:32.340 --> 00:14:41.520
we use a rule system to generate this
XML description of the user interface.

00:14:42.680 --> 00:14:44.660
For now it's good enough if
you just keep in mind that the

00:14:44.660 --> 00:14:49.400
rule system is customizable,
that you can plug in your own rules.

00:14:49.600 --> 00:14:53.340
So you can plug in your own rules,
but actually we provide you with

00:14:53.470 --> 00:14:54.600
a huge set of default rules.

00:14:54.600 --> 00:14:59.080
And so these default rules analyze the
EO model and then try to come up with a

00:14:59.080 --> 00:15:01.600
reasonable user interface for the data.

00:15:01.610 --> 00:15:05.470
And the first thing they need to do is
they need to categorize the different

00:15:05.470 --> 00:15:07.600
entities that you have in your EO model.

00:15:07.810 --> 00:15:10.890
And we pretty much have three,
we distinguish between

00:15:10.890 --> 00:15:12.590
three kinds of entities.

00:15:12.600 --> 00:15:14.620
One we call the main entities,
the other one we call

00:15:14.620 --> 00:15:16.600
enumeration entities,
and for the third one

00:15:16.600 --> 00:15:18.600
we don't have a name,
just everything else.

00:15:18.770 --> 00:15:23.460
So main entities represent the
business objects that are kind of

00:15:23.460 --> 00:15:26.600
the primary objects in your database.

00:15:26.600 --> 00:15:29.820
Typical examples are a customer,
an object that's an entity

00:15:29.820 --> 00:15:31.560
that represents a customer.

00:15:31.630 --> 00:15:33.600
That's a typical main entity.

00:15:33.780 --> 00:15:36.600
But on the other side the address
is attached to the customer.

00:15:36.610 --> 00:15:37.590
Or maybe the phone number
is attached to the customer.

00:15:37.600 --> 00:15:39.520
That is kind of secondary information.

00:15:39.600 --> 00:15:41.600
This is what we call the other stuff.

00:15:41.720 --> 00:15:47.680
And then it also turns out that
most databases have a lot of

00:15:47.680 --> 00:15:47.680
different types of information.

00:15:47.970 --> 00:15:52.560
A huge number of entities that also
match the definition of a main entity,

00:15:52.560 --> 00:15:53.880
but they are much simpler.

00:15:53.930 --> 00:15:56.900
They are usually just
used for pick lists.

00:15:56.900 --> 00:15:59.660
Examples are the 52 states of America.

00:15:59.820 --> 00:16:03.410
Another example could be
a category for a movie,

00:16:03.410 --> 00:16:07.150
whether it's a drama or
whether it's a comedy.

00:16:07.290 --> 00:16:12.060
These kinds of pick lists are usually
stored in very simple database tables.

00:16:12.260 --> 00:16:16.380
The reason why we distinguish
between them is that it actually

00:16:16.380 --> 00:16:20.870
makes sense to create two different
kinds of user interfaces for

00:16:20.880 --> 00:16:23.260
these main enumeration entities.

00:16:23.360 --> 00:16:27.050
For main entities,
we create a query window that

00:16:27.170 --> 00:16:29.560
allows to search for objects.

00:16:29.670 --> 00:16:33.510
From this query window,
you can open other detail windows.

00:16:33.510 --> 00:16:36.460
If you need to select one,
we have a modal dialog for you.

00:16:36.550 --> 00:16:38.780
For enumeration entities,
we can make that much simpler

00:16:38.840 --> 00:16:41.420
because usually there are only
a few objects in the entity.

00:16:41.420 --> 00:16:45.750
There are only 52 states.

00:16:45.900 --> 00:16:48.880
So for N-Variation entities,
we create a much simpler

00:16:48.880 --> 00:16:51.770
editor window and then we need
to select a reference then.

00:16:51.800 --> 00:16:53.800
We just create a combo
box or so to display them.

00:16:53.800 --> 00:16:57.380
We don't need a full window
and a query interface for that.

00:16:58.080 --> 00:17:01.660
I'd like to also give you an
example about that and have

00:17:01.660 --> 00:17:05.000
something that looks similar to an
entity-relationship diagram here.

00:17:05.030 --> 00:17:11.070
This is pretty much a subset of
the standard movie rental example,

00:17:11.070 --> 00:17:12.950
a little bit modified to make
the example a little clearer.

00:17:13.010 --> 00:17:17.980
We have a talent in there,
we have a movie entity in there,

00:17:18.080 --> 00:17:20.090
the movie has a category,
and then attached to the movie we

00:17:20.150 --> 00:17:22.000
have a plot summary and a voting.

00:17:22.000 --> 00:17:28.000
When the default rules start
analyzing this database scheme,

00:17:28.000 --> 00:17:31.720
let's say they start with a talent photo,
these default rules will find

00:17:31.720 --> 00:17:34.000
out that the talent photo
actually depends on the talent.

00:17:34.000 --> 00:17:37.010
There's no reason to have it,
or there's no use for having a

00:17:37.010 --> 00:17:38.950
talent photo without the talent.

00:17:39.050 --> 00:17:44.000
The default rules analyze mostly the
relationships between these entities.

00:17:44.000 --> 00:17:46.900
In this case,
they become two major groups.

00:17:46.950 --> 00:17:50.930
One is the group around
the talent entity.

00:17:51.000 --> 00:17:55.000
Talent is what the default rules
identify as the main entity,

00:17:55.000 --> 00:17:58.000
and talent photo and
movie role depend on it.

00:17:58.000 --> 00:18:00.880
The second group is around the movie.

00:18:01.010 --> 00:18:03.990
The plot summary and the voting
are attached to the movie,

00:18:04.000 --> 00:18:05.990
and the movie role actually
belongs to both kinds of groups.

00:18:06.050 --> 00:18:08.710
When we edit the movie,
we want to see the information

00:18:08.710 --> 00:18:10.670
about the movie roles,
so what kind of roles

00:18:10.820 --> 00:18:12.000
are played in this movie.

00:18:12.000 --> 00:18:14.670
On the other side,
if you take a look at the talent,

00:18:14.670 --> 00:18:17.870
you also want to see what kind
of roles this talent plays.

00:18:19.110 --> 00:18:22.570
The third group is this category
which matches the definition

00:18:22.650 --> 00:18:24.240
of an enumeration entity.

00:18:24.240 --> 00:18:28.000
As you can see, it has a primary key and
then there's just a name.

00:18:28.000 --> 00:18:31.220
It could be a drama or a comedy.

00:18:31.330 --> 00:18:35.240
The default would identify
two main entities in this case

00:18:35.240 --> 00:18:37.490
and one enumeration entity.

00:18:37.740 --> 00:18:41.170
So now we have pretty much all the pieces
together to take a look at the complete

00:18:41.170 --> 00:18:43.320
Direct to Java Client architecture.

00:18:43.320 --> 00:18:45.810
It's still a three-tier architecture.

00:18:45.810 --> 00:18:48.700
We have a WebObjects application and
we have a Java Client application.

00:18:48.830 --> 00:18:51.260
But both on the server
and the client side,

00:18:51.260 --> 00:18:52.690
we have extensions.

00:18:52.810 --> 00:18:55.860
The extensions on the server side are
the rule system and the extensions

00:18:55.860 --> 00:18:59.170
on the client side are all these
EU controllers that I described before.

00:18:59.290 --> 00:19:02.400
Now, there will be a difference when the
application starts up because there

00:19:02.400 --> 00:19:05.360
is no user interface defined for the
client side like in the traditional

00:19:05.360 --> 00:19:08.700
development where you create your
interface files and interface builder.

00:19:08.800 --> 00:19:12.370
So the first thing that has to happen
is that these extensions talk to each

00:19:12.370 --> 00:19:15.110
other and the client asks the server,
"So what kind of user

00:19:15.110 --> 00:19:16.200
interface shall I display?

00:19:16.200 --> 00:19:20.190
What kind of windows shall I open
when the application starts up?"

00:19:20.280 --> 00:19:25.370
So now the rule system will take a
look at the EU model and will create

00:19:25.390 --> 00:19:29.200
this XML description of the windows
that are supposed to be shared.

00:19:29.200 --> 00:19:32.900
So the client side will keep track
of all these different windows,

00:19:32.900 --> 00:19:35.200
keep it in mind, and be able to use it.

00:19:35.200 --> 00:19:38.440
This XML description is pretty
much a template for creating

00:19:38.440 --> 00:19:40.200
a hierarchy of controllers.

00:19:40.200 --> 00:19:41.200
So the client side
will keep that in mind.

00:19:41.230 --> 00:19:43.530
And then later when the user
triggers searches on the database,

00:19:43.530 --> 00:19:45.720
you do another request to the
server side which will probably

00:19:45.720 --> 00:19:47.200
result in fetches in the database.

00:19:47.200 --> 00:19:49.680
You get business objects,
they're sent to the client,

00:19:49.680 --> 00:19:51.200
and then it's the usual stuff.

00:19:51.200 --> 00:19:54.550
So the difference between a normal or
traditionally developed application and

00:19:54.650 --> 00:19:59.200
a Direct to Java Client application is
that in addition to exchanging the data,

00:19:59.200 --> 00:20:01.150
you have to exchange
information about the object.

00:20:01.230 --> 00:20:04.200
You also have to exchange
information about the user interface.

00:20:04.200 --> 00:20:08.200
The server is responsible for generating
the user interface on the client side.

00:20:08.500 --> 00:20:12.200
Okay,
so I'd like to show you how that looks.

00:20:13.100 --> 00:20:16.330
Okay,
so what I have here is a Mac OS X server

00:20:16.430 --> 00:20:20.880
machine with WebObjects 4.5,
and I'd like to show you how to create

00:20:21.000 --> 00:20:23.100
a Direct to Java Client application.

00:20:23.100 --> 00:20:28.100
And when you joined the
Direct to Web session,

00:20:28.100 --> 00:20:32.170
you saw that we have a
wizard in Project Builder,

00:20:32.170 --> 00:20:33.100
so you just create a new project.

00:20:33.100 --> 00:20:35.370
And actually,
we didn't have the time to finish

00:20:35.400 --> 00:20:38.210
that for Direct to Java Client,
so the thing that we have

00:20:38.210 --> 00:20:41.090
is just a template that is
placed inside our examples.

00:20:41.100 --> 00:20:44.550
So if you want to start developing
a Direct to Java Client application,

00:20:44.550 --> 00:20:47.190
look inside our WebObjects
Java Client examples,

00:20:47.190 --> 00:20:51.100
and there you will find a template that
is called Direct to Java Client template.

00:20:51.100 --> 00:20:54.120
So for the purpose of the demo,
I placed it on my desktop.

00:20:54.200 --> 00:21:13.100
[Transcript missing]

00:21:13.660 --> 00:21:16.590
It's actually just a
tiny little bit modified.

00:21:16.590 --> 00:21:21.590
I just modified our standard example,
movies and renders, a tiny little bit.

00:21:21.620 --> 00:21:24.600
If you already know WebObjects,
you'll probably recognize this here.

00:21:24.600 --> 00:21:26.600
It has about 20 entities.

00:21:26.720 --> 00:21:32.270
It's not super complex,
but it's actually a

00:21:32.270 --> 00:21:36.110
decent amount of entities.

00:21:36.110 --> 00:21:37.590
Now, I'll just go ahead and
compile this application.

00:21:41.600 --> 00:21:42.440
takes a moment.

00:21:42.440 --> 00:21:47.160
That was it.

00:21:47.160 --> 00:21:47.160
Then, oops.

00:21:48.860 --> 00:21:51.960
Then I'm going to start the application.

00:21:51.960 --> 00:21:56.490
I configured my user defaults so
that it actually uses a fixed URL,

00:21:56.490 --> 00:21:58.960
so it has a fixed port number,
which you can see here.

00:21:59.000 --> 00:22:04.350
Now I'd like to switch
to screen number three.

00:22:05.870 --> 00:22:10.030
So here I have a Mac OS X DP4
machine and like in the keynote we

00:22:10.030 --> 00:22:13.970
have this icon on the desktop here
which is just the generic client

00:22:14.370 --> 00:22:18.680
pre-configured to connect to the URL that
I hard-coded here on my server side.

00:22:18.790 --> 00:22:21.790
So I just double-click the client now.

00:22:23.450 --> 00:22:25.480
And now what happens in the
background is that the server

00:22:25.670 --> 00:22:27.460
takes a look at the EU model,
analyzes it,

00:22:27.460 --> 00:22:30.300
makes assumptions about what kind of
entities are the primary entities,

00:22:30.300 --> 00:22:33.200
and then will try to create this
user interface that you probably

00:22:33.200 --> 00:22:38.370
already saw during the keynote.

00:22:39.160 --> 00:22:41.830
So, in this case,
I decided that these six entities here,

00:22:41.830 --> 00:22:45.380
Customer, Movie, Studio, Talent, Unit,
and Video, are the primary main

00:22:45.380 --> 00:22:46.940
entities of the application.

00:22:46.970 --> 00:22:49.990
And I can show you that, you know,
for all these entities,

00:22:50.020 --> 00:22:53.700
it created a different kind of
query user interface for them.

00:22:53.740 --> 00:22:56.790
So, for example,
I can go ahead and search

00:22:56.790 --> 00:22:59.510
for movies and I guess,
whatever.

00:23:04.310 --> 00:23:11.300
Andreas Wenkker:
And then there's the Star Wars movie.

00:23:11.300 --> 00:23:11.300
Now,
the database that I'm using here actually

00:23:11.300 --> 00:23:12.760
does not have the information about
the movies that we had in the keynote,

00:23:12.810 --> 00:23:15.260
so it's not going to
have a trailer component,

00:23:15.300 --> 00:23:19.300
but I'll show you later
how to plug in QuickTime.

00:23:19.300 --> 00:23:24.260
So this movie window now displays the
detailed information about the movie.

00:23:24.300 --> 00:23:26.400
So I have a few text fields that
inform me about the movie itself,

00:23:26.400 --> 00:23:27.300
the title, the category.

00:23:27.300 --> 00:23:30.910
And then down here in the tab view,
I pretty much take a look at all

00:23:31.140 --> 00:23:33.290
the relationships of this movie.

00:23:33.290 --> 00:23:37.300
So I have a plot summary, voting,
the list of directors, the roles.

00:23:37.300 --> 00:23:40.790
And if I want to take
a look at the roles,

00:23:40.860 --> 00:23:44.290
or at the talent, I can just open it.

00:23:45.160 --> 00:23:48.840
So we don't have a
photo for Harrison Ford.

00:23:48.840 --> 00:23:52.900
And he never directed any movie,
but he played actually a bunch of roles.

00:23:53.110 --> 00:23:58.150
Let me show you another movie,
which might be a little more interesting.

00:24:00.000 --> 00:24:03.140
You've seen it before, huh?

00:24:03.280 --> 00:24:04.640
So this is our UF movie.

00:24:04.650 --> 00:24:08.410
And there are a few rules in there.

00:24:08.930 --> 00:24:13.300
One of my colleagues who will
later come up for question and

00:24:13.300 --> 00:24:14.720
answers is my colleague Eric.

00:24:14.750 --> 00:24:21.710
And here we actually have a photo.

00:24:22.650 --> 00:24:24.760
Now that you've seen what kind
of application you generate,

00:24:24.760 --> 00:24:27.300
you probably would like to
know how to customize it.

00:24:27.430 --> 00:24:30.150
Like in Direct to Web,
you have this Assistant tool.

00:24:30.210 --> 00:24:35.560
The Assistant is a pretty unconventional
development tool because it's actually

00:24:35.930 --> 00:24:38.600
running inside your client application.

00:24:40.600 --> 00:24:44.690
Here it displays me, for example,
the choice of main entities

00:24:44.690 --> 00:24:47.550
and emulation entities that
were made by the default rules.

00:24:47.590 --> 00:24:49.600
So I can change this order now and,
for example,

00:24:49.600 --> 00:24:52.540
say that Studio should be more
at the top and Talent as well.

00:24:53.820 --> 00:24:57.600
So let me just apply that
and restart to clean up.

00:24:58.390 --> 00:25:00.240
So now as you can see,
the order here in the

00:25:00.240 --> 00:25:01.600
user interface changed.

00:25:01.600 --> 00:25:03.600
So we have Movie, Studio, Talent now.

00:25:04.330 --> 00:25:06.360
And then if I want to
change the attributes that

00:25:06.380 --> 00:25:08.150
I used to search for movies,

00:25:09.300 --> 00:26:00.500
[Transcript missing]

00:26:01.700 --> 00:26:12.320
Andreas Wenkker: And then Citi,
and I never know that.

00:26:12.320 --> 00:26:12.320
Credit card is really boring,
but maybe the zip code

00:26:12.320 --> 00:26:12.320
and we can remember.

00:26:12.320 --> 00:26:12.320
So now just say apply,
and let me show you.

00:26:13.980 --> 00:26:27.460
Andreas Wenkker: So, as you can see,
I changed the attributes that

00:26:27.460 --> 00:26:27.460
are used to query for movies,
and for studios, and for talent,

00:26:27.460 --> 00:26:27.460
and for the

00:26:27.970 --> 00:26:34.240
It's very simple to do these
basic kinds of customizations,

00:26:34.240 --> 00:26:40.810
changing the order of widgets
and the selection of properties

00:26:40.950 --> 00:26:44.600
that we made to search for them.

00:26:44.890 --> 00:26:48.660
Let's take a look at a movie window.

00:26:48.660 --> 00:26:51.970
The default widget that is used
for character fields in the

00:26:51.970 --> 00:26:53.640
database is a normal text field.

00:26:53.640 --> 00:26:56.440
But actually for the summary,
for plot summary,

00:26:56.470 --> 00:26:58.700
that can get pretty big.

00:26:58.740 --> 00:27:02.710
I would like to see
another widget for that.

00:27:05.040 --> 00:27:07.430
Andreas Wenkker:
Let me explain to you in a

00:27:07.430 --> 00:27:08.000
moment what I'm doing here.

00:27:08.080 --> 00:27:12.770
This delay is now that this assistant
actually derives a lot of information

00:27:12.970 --> 00:27:15.480
from the server side about the EU model.

00:27:15.520 --> 00:27:18.400
In the case of the assistant,
it actually is okay that we send

00:27:18.400 --> 00:27:20.640
the information of the EU model
to the client side because we're

00:27:20.700 --> 00:27:22.000
still in the developer models.

00:27:22.000 --> 00:27:24.980
This is not the deployment mode,
so it's no problem sending this

00:27:24.980 --> 00:27:26.980
information to the client at this time.

00:27:27.000 --> 00:27:31.110
Andreas Wenkker:
I now selected the kind of

00:27:31.110 --> 00:27:33.630
widget I want to work on.

00:27:33.630 --> 00:27:37.530
As you can see, for the plot summary,
we by default use a

00:27:37.530 --> 00:27:38.560
text field controller.

00:27:38.560 --> 00:27:41.060
I changed it now to be a text area.

00:27:41.060 --> 00:27:42.620
I can change the resizing.

00:27:42.620 --> 00:27:44.000
I want it to be resizable.

00:27:44.000 --> 00:27:46.000
I give it a minimum height.

00:27:46.000 --> 00:27:49.280
No, I don't want to show a label.

00:27:52.440 --> 00:27:54.920
So let me apply that and
then create a new window.

00:27:54.920 --> 00:27:59.540
This delay again is that now it kind
of has to bootstrap this dynamic

00:27:59.540 --> 00:28:02.040
user interface generation again.

00:28:02.040 --> 00:28:04.380
I just changed the way the
user interface is generated so

00:28:04.380 --> 00:28:07.060
it has reset all the caches,
and that's why we see this delay.

00:28:07.060 --> 00:28:09.970
So now if you take a look at it,
the movie changed, right?

00:28:09.990 --> 00:28:11.400
So now I have a completely
different widget.

00:28:11.400 --> 00:28:14.060
So these are just a few examples of,
you know,

00:28:14.060 --> 00:28:15.620
kind of customizations that you can do.

00:28:15.620 --> 00:28:17.850
You can change the order of attributes.

00:28:17.880 --> 00:28:20.040
You can choose what kind of
text fields or what kind of

00:28:20.090 --> 00:28:21.250
widgets in general are used.

00:28:21.940 --> 00:28:25.020
You can change format,
pattern strings for numbers or so.

00:28:25.020 --> 00:28:28.010
There are a bunch of customizations
that are supported in the Assistant.

00:28:30.140 --> 00:28:35.880
Okay, so actually can we go back
to the slides now please?

00:28:41.800 --> 00:28:47.360
Okay, so I'd like to talk a little more
about customization and we have,

00:28:49.160 --> 00:28:53.660
In a real-world development scenario,
there are different

00:28:53.660 --> 00:28:55.860
things you need to change.

00:28:55.860 --> 00:28:59.100
For different needs, we have different
techniques to customize.

00:28:59.290 --> 00:29:02.100
They actually get more and more complex.

00:29:02.250 --> 00:29:06.050
The first technique to
customize is the Assistant.

00:29:06.080 --> 00:29:08.100
I already showed that to you.

00:29:08.100 --> 00:29:12.080
Then we allow you to write your own
rules for the server-side rule system.

00:29:12.110 --> 00:29:13.070
We allow you to freeze XML.

00:29:13.110 --> 00:29:15.100
I'll explain in a moment what that means.

00:29:15.100 --> 00:29:18.250
We allow you to implement your
own controller classes and to

00:29:18.250 --> 00:29:20.100
plug them into the client side.

00:29:20.100 --> 00:29:22.940
Then, the last step,
we allow you to transition into

00:29:22.940 --> 00:29:26.570
the traditional development where
you create your user interfaces

00:29:26.580 --> 00:29:31.020
by hand in this interface builder,
user interface creation tool,

00:29:31.170 --> 00:29:34.090
and then just load them
on the client side.

00:29:34.150 --> 00:29:36.100
I want to talk about all
of these a little more.

00:29:36.100 --> 00:29:39.920
The Assistant I already showed you.

00:29:40.100 --> 00:29:44.160
I guess most of you have seen
the Direct to Web presentation,

00:29:44.180 --> 00:29:45.100
just the previous session.

00:29:45.100 --> 00:29:46.970
I'm going to make this pretty short.

00:29:47.100 --> 00:29:50.100
A rule is pretty much just
a question and an answer.

00:29:50.100 --> 00:29:54.550
A typical question could be,
"How many columns should be used

00:29:54.600 --> 00:29:59.100
to display ten text fields?"
A typical answer could be two.

00:29:59.220 --> 00:30:01.180
Another question is,
"What kind of windows should be

00:30:01.210 --> 00:30:04.220
displayed when the application
starts up?" The default answer

00:30:04.220 --> 00:30:06.100
for that is the query window.

00:30:06.210 --> 00:30:10.210
Other examples are, "What kind of widget,
what kind of controller should I use

00:30:10.210 --> 00:30:14.090
to work on the character field?"
The default answer is the text field.

00:30:14.110 --> 00:30:18.100
Actually, you can choose what kind
of widgets you want to use.

00:30:18.100 --> 00:30:20.100
You can even plug in your own ones.

00:30:20.270 --> 00:30:25.100
You can use rules to integrate
your own controller classes.

00:30:25.100 --> 00:30:27.100
You can use rules to
customize the layout,

00:30:27.100 --> 00:30:30.320
how many columns are supposed
to be used over the layout

00:30:30.320 --> 00:30:34.100
in rows or that's in columns,
things like that.

00:30:34.100 --> 00:30:37.800
Rules are very useful in multi-user
environments because actually

00:30:37.810 --> 00:30:40.810
the rules allow you to create
different user interfaces dependent

00:30:40.810 --> 00:30:43.090
on the user currently logged in.

00:30:43.160 --> 00:30:46.090
If you have two different
users on two different clients,

00:30:46.230 --> 00:30:49.100
you can create two different
user interfaces for them.

00:30:49.100 --> 00:30:53.760
It's also very useful for localization.

00:30:53.910 --> 00:30:58.540
You can choose different kinds of labels,
for example,

00:30:58.540 --> 00:31:02.470
depending on the language of the
user who is currently logged in.

00:31:04.000 --> 00:32:45.300
[Transcript missing]

00:32:45.960 --> 00:32:50.530
So the next level of customization
is pretty much to start writing

00:32:50.530 --> 00:32:51.970
a little bit of source code.

00:32:52.000 --> 00:32:55.500
So we allow you to write
your own controller classes.

00:32:55.500 --> 00:32:57.790
You will usually use our
classes as a base point and

00:32:57.810 --> 00:32:59.320
then subclass these classes.

00:32:59.320 --> 00:33:01.260
And for example,
if you want to support new

00:33:01.260 --> 00:33:04.380
widgets that we don't support so
far-- swing has a lot of widgets,

00:33:04.380 --> 00:33:06.870
and maybe you have your own
ones that you want to support.

00:33:06.950 --> 00:33:10.130
So for all these kinds of
support of new functionality,

00:33:10.140 --> 00:33:13.780
you will have to write some source code
that's been used on the client side.

00:33:13.780 --> 00:33:18.110
So you will write client
side controller classes.

00:33:18.170 --> 00:33:20.320
And you can do a lot of
stuff in controller classes.

00:33:20.320 --> 00:33:23.100
You can change completely
how the application works,

00:33:23.100 --> 00:33:26.190
how controllers interact,
what kind of reaction happens when you

00:33:26.190 --> 00:33:27.560
make a double click in a table viewer.

00:33:27.560 --> 00:33:29.900
So you could change all that
in the controller classes.

00:33:29.910 --> 00:33:32.700
And so in general,
it's good to add problem

00:33:32.700 --> 00:33:35.410
application specific functionality.

00:33:35.500 --> 00:33:39.000
And then the last step of
customization is-- and this is

00:33:39.000 --> 00:33:42.660
very important-- is to transition
into the traditional development,

00:33:42.660 --> 00:33:44.780
where you start with
the interface builder,

00:33:44.780 --> 00:33:47.220
create your files by hand,
and then you have the maximum

00:33:47.220 --> 00:33:48.480
control over the layout.

00:33:48.480 --> 00:33:50.840
You can place your text
fields on a pixel basis.

00:33:50.840 --> 00:33:54.380
You can have multiple interface
files for different languages,

00:33:54.380 --> 00:33:57.020
all this stuff.

00:33:57.020 --> 00:34:00.110
And then it's actually fairly easy
to plug in these traditionally

00:34:00.110 --> 00:34:03.760
developed components of your
application into the dynamically

00:34:03.800 --> 00:34:05.640
generated part of the application.

00:34:05.640 --> 00:34:07.840
So you do that, again, by writing a rule.

00:34:07.840 --> 00:34:11.080
You pretty much just
tell the server side,

00:34:11.080 --> 00:34:13.640
instead of doing this
dynamic creation of XML,

00:34:13.700 --> 00:34:17.090
sending that to the client,
just use this interface file.

00:34:17.100 --> 00:34:19.350
And the class is coming
with this interface file.

00:34:19.460 --> 00:34:22.830
So it's important to keep in mind
that it's really easy to combine

00:34:22.830 --> 00:34:27.140
the two worlds of dynamic generation
and traditional development.

00:34:29.010 --> 00:34:31.130
Okay,
so I'd like to give another demo and

00:34:31.130 --> 00:34:33.950
show you an application that makes
use of a few of these customizations.

00:34:34.000 --> 00:34:37.000
I'd need screen number two again.

00:34:37.000 --> 00:34:38.000
Perfect.

00:34:38.000 --> 00:34:44.550
So this is an application
that I already worked on.

00:34:47.930 --> 00:34:48.800
Let me just start that.

00:34:48.920 --> 00:34:51.900
Again, since my user defaults
are configured correctly,

00:34:51.900 --> 00:34:53.900
it's using the same URL now.

00:34:53.950 --> 00:34:57.900
And number five now, please.

00:34:57.900 --> 00:34:59.610
Screen number five.

00:35:03.320 --> 00:35:04.540
So this is Mac OS 9.

00:35:04.540 --> 00:35:08.540
Now I want to show you how the
application looks on Mac OS 9.

00:35:08.540 --> 00:35:12.830
I have, like on Mac OS X,
I have an icon on my desktop,

00:35:12.850 --> 00:35:14.800
which is the generic client.

00:35:14.800 --> 00:35:16.860
And this, in this case,
it again connects to

00:35:16.860 --> 00:35:19.210
the same URL as before,
but it actually uses a few

00:35:19.210 --> 00:35:22.300
client-side classes that are
old for this application.

00:35:22.300 --> 00:35:24.540
So it's,
this is not the complete generic client,

00:35:24.620 --> 00:35:26.140
it has a few classes added to it.

00:35:26.140 --> 00:35:28.620
So the first thing you will notice
is that the application startup

00:35:28.620 --> 00:35:30.370
sequence changed completely,
right?

00:35:30.370 --> 00:35:32.680
I don't get a query window,
I get a login window.

00:35:32.780 --> 00:35:35.740
So I'm forced to enter a name

00:35:36.500 --> 00:35:55.900
[Transcript missing]

00:35:56.630 --> 00:36:00.650
The next thing you might notice is
that here in this user interface,

00:36:00.650 --> 00:36:03.260
I actually have my layout customized.

00:36:03.260 --> 00:36:05.730
If you look at this lower
section here with the addresses,

00:36:05.840 --> 00:36:11.240
you see that it's not just the
standard one or two row column layout.

00:36:11.310 --> 00:36:19.470
It's beautified a little bit here
in the middle with the street and it

00:36:19.470 --> 00:36:19.470
mixes rows and columns a little bit.

00:36:19.880 --> 00:36:24.280
Another thing you might notice is that
there's a new button in the Find window

00:36:24.440 --> 00:36:26.800
which allows you to create reports.

00:36:26.810 --> 00:36:31.400
So if I click on that I get this
modal dialog where I can choose

00:36:31.800 --> 00:36:36.200
types of reports and then if I press
OK I will actually get an HTML report

00:36:36.200 --> 00:36:38.800
and display it here on my client side.

00:36:38.800 --> 00:36:41.790
I can do that with
another format as well.

00:36:41.800 --> 00:36:44.790
So I can create different
kinds of reports.

00:36:44.830 --> 00:36:49.360
Another thing you might notice is that
in the menu here we have additional menu

00:36:49.360 --> 00:36:50.800
items to export and import the database.

00:36:50.800 --> 00:36:53.800
I'm not going to show you that
because it would take too long.

00:36:53.800 --> 00:36:58.640
But you can also create
reports based on the category.

00:36:58.780 --> 00:37:04.800
So for example all the nice companies
and persons actually are this.

00:37:04.800 --> 00:37:10.030
And then as the last thing that I want
to show you there's a little info panel

00:37:10.030 --> 00:37:13.800
and this is what you've been waiting for,
right?

00:37:13.800 --> 00:37:13.800
Audience member: Hi!

00:37:13.800 --> 00:37:14.940
Thank you.

00:37:15.330 --> 00:37:16.200
So, ah!

00:37:16.280 --> 00:37:20.300
There are things... Well,
you've seen that before.

00:37:21.110 --> 00:37:24.140
So there are a bunch of
things happened here.

00:37:24.160 --> 00:37:25.590
I changed the startup sequence.

00:37:25.600 --> 00:37:28.120
I now have a login panel,
and actually something that

00:37:28.120 --> 00:37:30.950
you didn't see right now
because I just logged in once.

00:37:31.040 --> 00:37:34.310
But the application actually
stores the user preferences,

00:37:34.330 --> 00:37:37.860
the window sizes that are just
generated in the database now.

00:37:38.030 --> 00:37:41.000
I then added additional
actions in the query window.

00:37:41.020 --> 00:37:43.940
I have this report button,
and then this complete new

00:37:44.030 --> 00:37:47.180
functionality to generate HTML,
which is actually done on the

00:37:47.180 --> 00:37:49.990
server side and then sent to the
client and just displayed there.

00:37:50.070 --> 00:37:56.000
I added additional menu items and
complete new windows like the info panel.

00:37:56.010 --> 00:37:58.990
If you can go back to screen number two,
please.

00:37:58.990 --> 00:38:02.270
I know that was not in the script.

00:38:13.470 --> 00:38:13.470
So let me just show you a few things.

00:38:13.470 --> 00:38:13.470
So this is a

00:38:15.460 --> 00:38:17.140
The xml for the login window.

00:38:17.140 --> 00:38:19.050
In this case, I used frozen xml.

00:38:19.090 --> 00:38:22.640
It just has a modal dialog controller,
an action button for the

00:38:22.640 --> 00:38:24.190
cancel and the ok button.

00:38:24.190 --> 00:38:27.620
Then here you can see that
I used my own controller classes.

00:38:27.620 --> 00:38:30.780
I have my own special controller
classes that I use on the

00:38:30.780 --> 00:38:32.860
client side to do my login.

00:38:33.040 --> 00:38:36.690
Another thing that might be
interesting to point out is that

00:38:36.690 --> 00:38:39.380
there's a subproject for reports.

00:38:39.380 --> 00:38:41.870
And in here,
I have all these reports stored,

00:38:41.940 --> 00:38:46.880
so I can actually open one of
them in WebObjects builder.

00:38:48.910 --> 00:38:55.330
So I can use WebObjects
Builder to evaluate the HTML,

00:38:55.330 --> 00:38:56.540
right?

00:38:56.600 --> 00:38:58.450
This is how I did the reports.

00:38:58.480 --> 00:39:00.380
And then there are a
bunch of these components,

00:39:00.380 --> 00:39:05.460
of these four components that
contain the layout of the reports.

00:39:05.460 --> 00:39:07.140
Well, I think that should be it for now.

00:39:07.140 --> 00:39:12.460
So yeah.

00:39:12.460 --> 00:39:14.880
Now I'd like the slides back, please.

00:39:20.270 --> 00:39:22.860
So before I go into summary,
I'd like to give you a few good

00:39:22.860 --> 00:39:24.950
reasons why we think you should
use Direct-to-Java Client.

00:39:24.960 --> 00:39:29.410
And I think the most obvious reason is
that your development gets much faster.

00:39:29.420 --> 00:39:32.610
I mean, we can save you a lot of time if
you use Direct-to-Java Client.

00:39:32.620 --> 00:39:34.610
And that also means that it's
much cheaper for you to do the

00:39:34.640 --> 00:39:36.010
development of your application.

00:39:36.040 --> 00:39:40.720
Another good reason for you might
be that the learning curve to enter

00:39:40.720 --> 00:39:43.720
WebObjects development is flattened.

00:39:43.850 --> 00:39:46.680
If you're new to WebObjects
and you would have to do the

00:39:46.680 --> 00:39:49.690
traditional development process,
you would have to know

00:39:49.690 --> 00:39:50.580
about all these pieces.

00:39:50.580 --> 00:39:52.510
You would have to know how
to create interface files.

00:39:52.560 --> 00:39:54.270
You have to know how
to create a model file.

00:39:54.280 --> 00:39:57.860
And you have to know how
to write business logic,

00:39:57.860 --> 00:39:59.190
all this stuff.

00:39:59.280 --> 00:40:02.310
But with the Direct-to-Java Client,
you already get an application

00:40:02.430 --> 00:40:03.990
without knowing a lot about it.

00:40:04.130 --> 00:40:06.460
You just need a database and your model,
and that's it for now.

00:40:06.480 --> 00:40:10.260
And then once you have your application,
you can dig into all the pieces

00:40:10.260 --> 00:40:12.160
that need heavy customization.

00:40:12.160 --> 00:40:14.160
But it's a different way
of learning WebObjects.

00:40:14.160 --> 00:40:16.670
So if you're new to WebObjects,
this is a very interesting

00:40:16.670 --> 00:40:17.770
technology for you.

00:40:17.840 --> 00:40:20.280
Because your mileage will be
much bigger in the beginning.

00:40:20.280 --> 00:40:25.600
Also, since the user interface
is highly dynamic,

00:40:25.600 --> 00:40:30.340
at least unless you freeze it,
your reaction time to requirement and

00:40:30.340 --> 00:40:33.240
database changes will go down a lot.

00:40:33.280 --> 00:40:36.130
So if you modify your tables,
if you add additional

00:40:36.150 --> 00:40:38.950
attributes in the tables,
if you add additional relationships,

00:40:38.950 --> 00:40:41.990
the application will pick it up
pretty much automatically for you.

00:40:42.020 --> 00:40:44.300
So your reaction time is much faster.

00:40:44.300 --> 00:40:47.720
I also claim that the testing
time should be a little reduced.

00:40:47.840 --> 00:40:50.870
Because our controller classes
are-- we invest a lot of time in

00:40:50.920 --> 00:40:53.300
testing our controller classes
and our application logic.

00:40:53.300 --> 00:40:55.160
So you don't have to test that much.

00:40:55.160 --> 00:41:01.060
And I guess just in general,
the message is that Direct-to-Java

00:41:01.190 --> 00:41:03.470
Client allows you to focus
on your business logic.

00:41:03.600 --> 00:41:06.610
You don't waste time in doing
the same steps again and again.

00:41:06.740 --> 00:41:08.770
Drag a text field out of
a palette into a window.

00:41:08.800 --> 00:41:11.130
Customize your layout
so that it looks nice,

00:41:11.130 --> 00:41:12.060
all this stuff.

00:41:12.120 --> 00:41:12.870
This is done for you.

00:41:12.960 --> 00:41:14.800
So you can really focus
on your business logic.

00:41:14.900 --> 00:41:16.320
And this is what you're paid for.

00:41:16.530 --> 00:41:16.750
Right?

00:41:16.790 --> 00:41:17.600
So you don't waste time.

00:41:17.750 --> 00:41:17.840
Right?

00:41:17.840 --> 00:41:20.070
time with anything else.

00:41:20.490 --> 00:41:24.730
Before I go into the summary,
I'd like to comment on a statement

00:41:24.730 --> 00:41:26.940
that I heard from a couple of people.

00:41:27.010 --> 00:41:30.680
The statement is,
"Direct to Java Client," and the

00:41:30.680 --> 00:41:35.400
same is true for Direct to Web,
"is just this super-duper wizard.

00:41:35.400 --> 00:41:39.370
It makes a hell of a demo,
but in my real world scenario,

00:41:39.370 --> 00:41:42.790
I can't really use that." I wrote
down a few comments on that,

00:41:42.790 --> 00:41:45.110
and most of them I already mentioned,
so I'm not going to

00:41:45.120 --> 00:41:46.400
read them to you again.

00:41:46.540 --> 00:41:52.400
My take on this is that people who
make this statement have a fundamental

00:41:52.400 --> 00:41:54.370
misunderstanding about Direct to
Web and Direct to Java Client.

00:41:54.410 --> 00:41:57.640
This fundamental misunderstanding
is that Direct to Web and Direct to

00:41:57.640 --> 00:42:00.120
Java Client live in their own world,
and that you cannot

00:42:00.190 --> 00:42:01.390
get out of that world.

00:42:01.430 --> 00:42:02.390
That is not true.

00:42:02.480 --> 00:42:04.230
It's really easy,
both for Direct to Web and

00:42:04.270 --> 00:42:06.800
Direct to Java Client,
to transition into this traditional

00:42:06.800 --> 00:42:10.560
development where you use WebObjects to
create your own components and Interface

00:42:10.640 --> 00:42:11.370
Builder to create your own components.

00:42:11.400 --> 00:42:16.400
The two worlds can be mixed very easily.

00:42:16.400 --> 00:42:19.530
If you look at it like that,
then the Direct to Web and Direct to

00:42:19.560 --> 00:42:24.000
Java Client technologies help you a lot
bootstrapping your development process.

00:42:24.000 --> 00:42:28.330
It's really getting much quicker for you,
but if the dynamic generation

00:42:28.330 --> 00:42:31.550
is not good enough,
then you just do it in the old way.

00:42:31.560 --> 00:42:33.990
There's no problem in mixing that.

00:42:34.980 --> 00:42:37.790
You can use both Direct to
Web and Direct to Java Client

00:42:37.810 --> 00:42:39.730
for all kinds of applications.

00:42:39.750 --> 00:42:41.390
Database administration
might be very obvious.

00:42:41.400 --> 00:42:45.300
I gave you two examples here:
a movies database and address management.

00:42:45.370 --> 00:42:48.430
If you want to do some auto-processing
or billing or everything that

00:42:48.430 --> 00:42:51.290
runs in the back office area,
Direct to Java Client

00:42:51.290 --> 00:42:52.780
can help you with that.

00:42:53.500 --> 00:42:56.400
So, we still have some time.

00:42:56.400 --> 00:42:59.120
In summary,
I showed you that Direct to Java Client

00:42:59.120 --> 00:43:03.290
enables very strong rapid development
and is very useful for prototyping.

00:43:03.400 --> 00:43:08.090
You generate a lot of parts of the
application dynamically and we have

00:43:08.090 --> 00:43:12.400
a lot of predefined functionality in
the form of these controller classes.

00:43:12.400 --> 00:43:16.500
You have powerful ways of
customization for different needs and

00:43:16.800 --> 00:43:21.810
the last step of customization is to
transition to the usual development.

00:43:22.510 --> 00:43:26.260
Two more sessions that might
be interesting for you.

00:43:26.260 --> 00:43:30.000
UF synchronization, caching,
and advanced UF.

00:43:30.000 --> 00:43:32.260
You will probably not hear anything
about Direct to Web and Direct to

00:43:32.290 --> 00:43:34.750
Java Client in these sessions,
but they are about

00:43:34.750 --> 00:43:38.690
writing business logic,
so how to do validation and how

00:43:38.690 --> 00:43:42.500
to write business logic in a good,
efficient way.

00:43:42.500 --> 00:43:44.900
These two might be interesting for you.

00:43:44.900 --> 00:43:48.310
For more information,
I guess it's the usual stuff,

00:43:48.310 --> 00:43:50.010
you can go to our website.

00:43:50.320 --> 00:43:52.580
We have a lab downstairs.

00:43:52.580 --> 00:43:57.170
You all got an evaluation CD,
so just try it out.

00:43:58.740 --> 00:44:01.750
So now I'd like a few of my
colleagues to come up and be

00:44:01.780 --> 00:44:04.540
available for question and answers.