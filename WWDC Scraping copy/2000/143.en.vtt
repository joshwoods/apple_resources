WEBVTT

00:00:14.260 --> 00:00:18.550
Ladies and gentlemen,
please welcome Carbon Technology Manager,

00:00:18.550 --> 00:00:19.440
David Wright.

00:00:23.150 --> 00:00:23.960
Thank you.

00:00:23.960 --> 00:00:28.610
Welcome to session 143,
high level Toolbox Carbon Enhancements 1.

00:00:28.670 --> 00:00:32.290
So Carbon, Mac OS X,
the theme of this week.

00:00:32.310 --> 00:00:35.170
We cannot wait to get your
applications onto Mac OS X.

00:00:35.350 --> 00:00:38.310
There have already been a number of
sessions this week letting you know

00:00:38.340 --> 00:00:42.940
about some of the-- in my session,
I called them closed roads and detours.

00:00:42.940 --> 00:00:44.960
There will be a few more in this session.

00:00:45.110 --> 00:00:48.460
But we're also adding a lot of
functionality to Carbon to make

00:00:48.560 --> 00:00:50.340
your development lives easier.

00:00:50.340 --> 00:00:52.800
Again, there have already been
sessions about that this week,

00:00:53.000 --> 00:00:55.650
Carbon events being one of them.

00:00:55.660 --> 00:00:57.660
And so I was thinking
about the title of this,

00:00:57.770 --> 00:00:58.790
High Level Toolbox.

00:00:58.870 --> 00:01:00.470
What does that mean, high level?

00:01:00.480 --> 00:01:04.280
And I think another cool theme of
this week is that the high level

00:01:04.340 --> 00:01:07.800
toolbox is beginning to do more and
more on behalf of your application,

00:01:07.800 --> 00:01:09.100
thus making it even higher.

00:01:09.280 --> 00:01:13.710
So anyway, to talk more about that,
I'd like to introduce Pete Gontier

00:01:13.790 --> 00:01:14.930
from the high level toolbox team.

00:01:15.030 --> 00:01:16.730
Please welcome Pete.

00:01:27.640 --> 00:01:31.920
You've been hearing a
lot about Aqua this week.

00:01:31.920 --> 00:01:38.310
And it's certainly the case that
the High Level Toolbox is enhancing,

00:01:38.750 --> 00:01:42.780
growing and being enhanced
in order to make your jobs

00:01:42.780 --> 00:01:46.220
easier in implementing Aqua.

00:01:46.220 --> 00:01:46.220
But it's also

00:01:46.900 --> 00:01:51.860
Growing and enhancing just because
it needs to grow and enhance in

00:01:51.870 --> 00:01:53.850
order to stay a living thing.

00:01:53.900 --> 00:01:57.770
So we've added lots of features,
some of which have to do with Aqua,

00:01:57.780 --> 00:02:02.700
some of which don't,
and that's what we'll be

00:02:02.700 --> 00:02:02.700
talking about in this session.

00:02:04.960 --> 00:02:08.560
I want to approach this topic from
a couple of different directions.

00:02:08.560 --> 00:02:12.060
The first one we're calling
architectural changes.

00:02:12.380 --> 00:02:21.920
And the architectural changes have
to do with stuff that you pretty much

00:02:21.920 --> 00:02:21.920
need to do in order to adopt Carbon,
in order to Carbonize your application.

00:02:22.210 --> 00:02:26.080
And those things include such
things as the fact that window

00:02:26.080 --> 00:02:28.200
layering is now enforced.

00:02:28.200 --> 00:02:29.310
It's no longer optional.

00:02:29.520 --> 00:02:33.960
You can't choose to use it or not.

00:02:34.060 --> 00:02:38.550
You've pretty much got to live with it.

00:02:38.620 --> 00:02:43.600
Root controls are always created
for any window that has controls.

00:02:45.620 --> 00:02:47.980
MenuRef is now opaque,
which shouldn't be any surprise

00:02:47.980 --> 00:02:50.770
to anybody who's been hearing
about Carbon all this time.

00:02:50.980 --> 00:02:55.190
We've been creating more
opacity in the Toolbox.

00:02:55.320 --> 00:02:59.630
But with respect to MenuRef,
it's a matter of some

00:02:59.630 --> 00:03:06.240
interesting semantic changes
that have more to do with,

00:03:06.240 --> 00:03:08.790
or have less to do with,
accessors and more to do

00:03:08.790 --> 00:03:08.790
with your application code.

00:03:09.730 --> 00:03:13.170
And the Scrap Manager needed
a change for Carbon,

00:03:13.190 --> 00:03:17.140
and particularly for Mac OS X,
which means that CarbonLib

00:03:17.140 --> 00:03:18.590
also had to change.

00:03:18.810 --> 00:03:22.710
So we'll be talking a
little bit about that.

00:03:23.700 --> 00:03:26.110
The second category of things
I want to talk about are the cool

00:03:26.110 --> 00:03:30.420
new features we've been adding
that you aren't obligated to adopt,

00:03:30.560 --> 00:03:34.600
but once you learn about them,
you'll realize you want to adopt them.

00:03:36.650 --> 00:03:39.870
The first big category,
or the first big subcategory there,

00:03:39.870 --> 00:03:41.200
is the Menu Manager.

00:03:41.200 --> 00:03:44.430
We've been adding a lot of stuff
in recent versions of the OS to

00:03:44.900 --> 00:03:47.100
Control Manager and Window Manager.

00:03:47.230 --> 00:03:50.090
And Menu Manager has sort of
been a little bit neglected.

00:03:50.100 --> 00:03:52.000
We've added a few
features here and there,

00:03:52.130 --> 00:03:54.900
but in Carbon,
Menu Manager is really catching

00:03:54.940 --> 00:03:56.780
up in terms of feature list.

00:03:57.470 --> 00:04:02.100
We've also added a whole new
manager called the Help Tag Manager.

00:04:02.100 --> 00:04:04.670
And this is basically the
replacement for Balloon Help,

00:04:04.750 --> 00:04:06.990
and we'll be talking a
little bit about that.

00:04:08.230 --> 00:04:11.140
We've added some new
control creation APIs.

00:04:11.170 --> 00:04:13.300
They're more intuitive,
they make more sense,

00:04:13.300 --> 00:04:16.140
you don't have to worry
about overridden parameters.

00:04:16.190 --> 00:04:23.360
And there are some whole new
standard controls that we've added,

00:04:23.360 --> 00:04:23.360
mostly to support Aqua,
but partly to support you.

00:04:27.740 --> 00:04:31.200
I said something about
window layering earlier.

00:04:31.220 --> 00:04:33.650
Window layering, of course,
is done according to class,

00:04:33.760 --> 00:04:35.000
the way it always has been.

00:04:35.060 --> 00:04:41.030
So when you create windows,
you need to be very conscious of

00:04:41.030 --> 00:04:43.890
the class that you're creating,
because that will basically imply

00:04:43.890 --> 00:04:43.890
the layer the window will fall into.

00:04:47.270 --> 00:04:49.950
In addition to that,
we've also changed some existing

00:04:50.080 --> 00:04:53.560
Window Manager APIs so that they
operate within the layer of the

00:04:54.040 --> 00:04:56.200
window that you pass to those APIs.

00:04:56.200 --> 00:04:58.870
So when you call
Select Window or Send Behind,

00:04:58.990 --> 00:05:05.150
you'll find that the window is
only changed within its own layer.

00:05:05.230 --> 00:05:09.130
So if you have a document window
and you pass it to Select Window,

00:05:09.180 --> 00:05:13.330
it's not going to jump in front
of your floating palette windows.

00:05:13.330 --> 00:05:14.910
It's just going to become the
frontmost document window.

00:05:16.310 --> 00:05:19.290
The other API that's
changing is Front Window.

00:05:19.300 --> 00:05:22.300
Well, excuse me, the API that's not
changing is Front Window,

00:05:22.300 --> 00:05:25.780
and you have to watch out for that,
because when you call Front Window,

00:05:25.780 --> 00:05:28.960
you will get the Front Window,
even if it's a floating palette,

00:05:28.960 --> 00:05:30.270
irrespective of layer.

00:05:30.380 --> 00:05:36.270
So if you need to be aware of
the Front Window of the layer,

00:05:36.270 --> 00:05:41.190
you need to actually use the
specific call Get Front Window of

00:05:41.190 --> 00:05:41.190
Class instead of Front Window.

00:05:45.680 --> 00:05:50.080
In Mac OS X, because we need to plan for
future enhancements we want

00:05:50.080 --> 00:05:53.520
to do to the Control Manager,
we pretty much need to

00:05:53.520 --> 00:05:57.200
require that your windows,
which have any controls,

00:05:57.200 --> 00:05:58.840
have root controls.

00:05:59.230 --> 00:06:02.050
And basically what happens is when
you create your first control,

00:06:02.050 --> 00:06:05.090
we check to see if there's already
a root control in that window.

00:06:05.170 --> 00:06:08.120
And if there isn't,
then we create one for you.

00:06:12.440 --> 00:06:18.900
I said just now that this
is a Mac OS X feature.

00:06:18.900 --> 00:06:20.630
This might cause you
trouble if you're thinking,

00:06:20.630 --> 00:06:22.960
"Oh, no, now I have to write
conditional code to figure out,

00:06:22.960 --> 00:06:23.960
am I on Mac OS X?

00:06:23.960 --> 00:06:30.890
Is there a root control?" Well,
the simple solution is,

00:06:30.890 --> 00:06:30.890
as part of your Carbonization process,

00:06:31.190 --> 00:06:35.430
Just add a call to create root control,
and always create a root control for

00:06:35.520 --> 00:06:38.100
all of your windows that have controls.

00:06:38.260 --> 00:06:41.450
It's a simple thing to do,
and it will simplify your

00:06:41.550 --> 00:06:43.100
life in the long run.

00:06:43.120 --> 00:06:46.710
You'll always have a root
control on 9 and on 10.

00:06:48.110 --> 00:06:52.330
The one part of this is not
automatic is the root control

00:06:52.350 --> 00:06:54.810
pretty much sticks around.

00:06:54.840 --> 00:06:57.530
Once it's been created,
even if it's created automatically,

00:06:57.590 --> 00:07:02.140
it doesn't go away just because
you deleted all the child controls.

00:07:05.090 --> 00:07:11.480
Now this new mandatory root control has
some implications for the Dialog Manager.

00:07:11.480 --> 00:07:14.850
Basically,
the moral equivalent of creating

00:07:14.850 --> 00:07:19.240
a root control in a dialog is
setting the use control hierarchy

00:07:19.340 --> 00:07:24.000
bit in your dialog resource,
in your DLGX resource, I should say.

00:07:24.530 --> 00:07:27.740
But that bit really controls two things.

00:07:27.870 --> 00:07:31.400
One, it ensures that you have a
control hierarchy in your dialog.

00:07:31.400 --> 00:07:36.110
But the other thing is that it makes
all of your items into controls.

00:07:36.440 --> 00:07:39.470
And once they've become controlled,
you need to be careful about how

00:07:39.470 --> 00:07:42.310
you access your dialog items.

00:07:42.590 --> 00:07:46.270
And specifically,
you need to be careful with

00:07:46.270 --> 00:07:53.190
setDialogItemText because
it expects a control now.

00:07:53.200 --> 00:07:56.520
And that's done because of compatibility.

00:07:56.520 --> 00:07:59.820
setDialogItemText needs to search
all of the dialog item lists in

00:07:59.820 --> 00:08:03.920
all the dialogs in your application
because the API is not defined so

00:08:04.100 --> 00:08:06.400
as to allow us to do anything else.

00:08:06.520 --> 00:08:09.990
So it needs to find that control
handle in the dialog item,

00:08:09.990 --> 00:08:15.280
in the dialog that you care about,
and the only way it can do that

00:08:15.280 --> 00:08:18.290
is by taking a control wrath.

00:08:20.980 --> 00:08:25.960
Now, the really clean thing for you to do
is not do this tricky typecasting thing

00:08:25.960 --> 00:08:30.540
to make set dialog item text work.

00:08:31.000 --> 00:08:35.700
The cleaner thing to do is to just
use set control data and pass it

00:08:35.700 --> 00:08:38.370
the tag for the text of the item.

00:08:39.600 --> 00:08:43.900
And the last sort of
implication for dialogs and

00:08:43.900 --> 00:08:46.470
the mandatory root control is,
um,

00:08:47.190 --> 00:08:50.660
You basically want to set this bit
not only to make your life easier,

00:08:50.740 --> 00:08:53.900
but also because it's the only
way you can get aqua-savvy

00:08:53.900 --> 00:08:55.800
text in your edit text items.

00:08:59.140 --> 00:09:05.010
So I mentioned menu refs are now opaque,
which should be no surprise.

00:09:07.210 --> 00:09:11.650
But it's not just a matter of calling
some new accessor function instead of

00:09:11.660 --> 00:09:15.670
directly accessing the menu record.

00:09:16.310 --> 00:09:20.260
The way Get Menu used to work is that
it used to hand you back a resource

00:09:20.470 --> 00:09:23.200
handle that came from a menu resource.

00:09:23.200 --> 00:09:26.250
And it would post-process the
resource handle a little bit,

00:09:26.260 --> 00:09:28.440
but pretty much it was a resource handle.

00:09:28.500 --> 00:09:34.500
And if you called Get Menu over
and over and over again,

00:09:34.500 --> 00:09:34.500
you'd get the same handle
over and over and over again.

00:09:34.900 --> 00:09:35.750
That's no longer true.

00:09:35.800 --> 00:09:40.100
Get Menu now returns you a menu ref
which is based on the menu resource,

00:09:40.100 --> 00:09:43.800
so it's not as if you had to
throw out your menu resources.

00:09:44.140 --> 00:09:52.780
But that is basically a unique copy
of that resource used as a template.

00:09:55.400 --> 00:09:58.320
So not only can you not assume that
you've got a resource handle and

00:09:58.320 --> 00:10:01.440
you'll get the same one every time,
but you should also,

00:10:01.440 --> 00:10:05.840
instead of calling Release Resource,
which some documentation tells you to do,

00:10:05.850 --> 00:10:08.630
not many people do it,
but that's what the

00:10:09.040 --> 00:10:11.280
recommendation used to be.

00:10:11.280 --> 00:10:17.520
Now we're telling you,
go ahead and call Dispose Menu,

00:10:17.580 --> 00:10:18.690
forget about Release Resource because
the menu is not a resource.

00:10:23.340 --> 00:10:26.860
So of course there are some
accessor functions as a

00:10:27.190 --> 00:10:29.060
result of menu ref opacity.

00:10:29.060 --> 00:10:34.080
One of them is called Duplicate
Menu and it replaces the ability you

00:10:34.310 --> 00:10:38.770
used to have to use the memory manager,
say you might call hand to

00:10:38.810 --> 00:10:40.220
hand to duplicate a menu.

00:10:40.240 --> 00:10:43.190
Well you can't do that anymore because
menu refs aren't handles anymore.

00:10:43.300 --> 00:10:47.750
And then of course Copy Menu Items
provides you with the functionality

00:10:48.260 --> 00:10:51.810
you need to reach into a menu
and pull out specific items and

00:10:51.930 --> 00:10:54.180
copy them into some other menu.

00:10:54.300 --> 00:10:58.250
And of course you used to be able to
do that by simple pointer arithmetic,

00:10:58.250 --> 00:11:01.300
or actually it was complicated
pointer arithmetic.

00:11:01.300 --> 00:11:04.420
In any case we've given you an
API now so that you can reach

00:11:04.420 --> 00:11:06.050
in and do that same stuff.

00:11:10.270 --> 00:11:14.150
The Scrap Manager is,
I hesitate to say it's a new API,

00:11:14.150 --> 00:11:17.690
pretty much what it is,
is an old API with a lot of

00:11:17.690 --> 00:11:20.110
new names and a few changes.

00:11:20.740 --> 00:11:23.310
Pretty much,
you still get things from the scrap,

00:11:23.410 --> 00:11:26.630
you still put things on the scrap,
you still zero the scrap,

00:11:26.670 --> 00:11:30.000
or as we say in the new terminology,
you clear the scrap.

00:11:30.210 --> 00:11:32.640
Basically,
we had to make some changes to the

00:11:32.640 --> 00:11:36.480
Scrap Manager in order to support
the way events work on Mac OS X.

00:11:36.780 --> 00:11:41.310
On 9, your app would get a suspend event,
and if you were maintaining a

00:11:41.310 --> 00:11:45.340
private scrap that the Scrap
Manager didn't know about yet,

00:11:45.340 --> 00:11:52.810
you would take the suspend event as
your clue that it was time to export

00:11:52.810 --> 00:11:52.810
your private scrap to the public scrap.

00:11:53.500 --> 00:11:58.280
On 10, suspend events work
significantly differently.

00:11:58.280 --> 00:12:00.390
By the time you've
received a suspend event,

00:12:00.390 --> 00:12:03.580
it's very likely that your
application has already been

00:12:03.580 --> 00:12:07.840
pushed towards the background
because of preemptive multitasking.

00:12:07.980 --> 00:12:11.170
And so if you, at that point,
try to export your scrap,

00:12:11.280 --> 00:12:14.490
it won't work because
background applications can't

00:12:14.490 --> 00:12:16.240
put things on the scrap.

00:12:18.400 --> 00:12:21.060
While we were in there
making these architectural

00:12:21.060 --> 00:12:24.240
changes to the Scrap Manager,
we decided it was a good time

00:12:24.240 --> 00:12:27.510
to add some features as well,
so we added flavor flags.

00:12:27.860 --> 00:12:32.690
Flight reflects are pretty
much like the Drag Manager.

00:12:34.500 --> 00:12:35.500
Let me step back for a moment.

00:12:35.500 --> 00:12:37.400
I didn't explain the whole promise thing.

00:12:37.400 --> 00:12:43.240
So to replace the suspend event process,
we added a promise feature,

00:12:43.500 --> 00:12:46.700
which is much like the drag manager.

00:12:46.700 --> 00:12:49.010
You basically supply a callback.

00:12:49.010 --> 00:12:51.130
You associate it with a scrap.

00:12:52.130 --> 00:12:57.600
And when some other application
requests the data that you promised,

00:12:57.720 --> 00:13:02.490
you get called back and you
provide the data on the fly.

00:13:03.170 --> 00:13:06.600
Now, when you make these
promises is pretty critical.

00:13:06.600 --> 00:13:10.240
You want to make these promises
when the user performs a copy

00:13:10.240 --> 00:13:12.260
operation or cut operation.

00:13:12.470 --> 00:13:19.220
You don't have to supply
any data up front,

00:13:19.220 --> 00:13:19.220
but you do have to say,
I have data of a certain type.

00:13:19.520 --> 00:13:25.130
And you may optionally, if you know,
supply the size of the data as well,

00:13:25.130 --> 00:13:27.160
but that's optional.

00:13:27.160 --> 00:13:30.910
And the reason you want to do this at
this time is that there's really no

00:13:30.910 --> 00:13:35.170
better time to do it because otherwise
you'll just be sitting in your event loop

00:13:35.170 --> 00:13:39.240
waiting for an event to come in and by
the time you receive your suspend event,

00:13:39.370 --> 00:13:40.090
it's too late.

00:13:40.620 --> 00:13:45.380
So you really do need to do the
promising when the user issues a command.

00:13:45.700 --> 00:13:47.390
So now let's go back to Flavor Flags.

00:13:47.670 --> 00:13:51.480
Flavor Flags are also like,
work very similarly to the

00:13:51.580 --> 00:13:53.730
Flavor Flags in Drag Manager.

00:13:53.890 --> 00:13:58.250
You can specify a sender only flavor,
you can spec, excuse me,

00:13:58.300 --> 00:14:03.380
and you can test for whether a
flavor that you are pulling in

00:14:03.690 --> 00:14:06.830
from the scrap has been translated.

00:14:06.840 --> 00:14:06.840
And,

00:14:07.600 --> 00:14:11.440
The previous session we talked
about Translation Manager,

00:14:11.530 --> 00:14:14.890
and that's what that bit
is intended to be used for.

00:14:15.900 --> 00:14:18.990
We also added some
APIs for introspection.

00:14:19.310 --> 00:14:21.340
You used to be able
to look in low memory,

00:14:21.340 --> 00:14:25.100
grab the scrap handle out of low memory,
and then walk around inside the

00:14:25.100 --> 00:14:29.200
scrap handle in order to determine
what flavors were on the scrap,

00:14:29.210 --> 00:14:32.810
how big they were,
and maybe even peek at their data.

00:14:32.980 --> 00:14:37.710
Now you need to use some clean
APIs that basically tell you all

00:14:37.710 --> 00:14:41.980
the same things in a way that
we can support into the future.

00:14:45.640 --> 00:14:49.320
So I said that the menu
manager was catching up.

00:14:49.340 --> 00:14:52.650
And the menu manager is catching up
so much that we cannot cover all of

00:14:52.690 --> 00:14:57.180
the things that have been added to
the menu manager in this session.

00:14:57.180 --> 00:15:00.200
You see there's a long list there,
and we'll cover most of those things.

00:15:00.230 --> 00:15:03.480
But the last item is almost the
most important one because there are

00:15:03.610 --> 00:15:07.500
probably six or seven important things
that we just don't have time to cover.

00:15:07.530 --> 00:15:13.830
And you can learn more by looking in the
headers and experimenting with the new

00:15:13.830 --> 00:15:19.990
APIs and then maybe sending us feedback
to get the documentation finished sooner.

00:15:21.110 --> 00:15:23.910
But that's a really important
part that I wish I could cover

00:15:23.990 --> 00:15:26.500
but just don't have time for.

00:15:27.300 --> 00:15:30.550
So before I go into too much
detail about the Menu Manager,

00:15:30.560 --> 00:15:34.400
I want to bring out Guy Fullerton
to show us a demo of some

00:15:34.400 --> 00:15:37.200
of these new capabilities.

00:15:37.430 --> 00:15:38.780
Guy?

00:15:40.960 --> 00:15:43.540
So it looks like all my
dark little obsessions are

00:15:43.540 --> 00:15:45.360
coming out of the conference.

00:15:45.380 --> 00:15:47.420
Let me steal the water.

00:15:51.640 --> 00:15:54.530
So as Pete mentioned,
we've got an awful lot of new

00:15:54.530 --> 00:15:55.860
features in the Menu Manager.

00:15:55.860 --> 00:15:59.980
I'm only going to touch on a few of them,
but they're kind of the cooler ones.

00:16:00.830 --> 00:16:02.180
Got a simple little application here.

00:16:02.210 --> 00:16:04.440
I showed this off in
the Aqua Overview demo.

00:16:04.490 --> 00:16:08.120
It takes advantage of a few of
the new Menu Manager features.

00:16:08.530 --> 00:16:12.400
First one I want to touch on is
the inclusion of this font menu.

00:16:12.460 --> 00:16:14.940
This font menu is actually
implemented by the system.

00:16:15.020 --> 00:16:18.250
Your application can have any
given menu and it can call

00:16:18.300 --> 00:16:21.650
an API to tell the system,
"Please put all the standard

00:16:21.650 --> 00:16:26.040
font commands in this menu for
me." We even offer a mechanism,

00:16:26.040 --> 00:16:29.920
it's actually an option bit
that Pete will talk about,

00:16:29.940 --> 00:16:34.180
that lets us hang submenus off
of each of the fonts that has the

00:16:34.310 --> 00:16:36.900
different types of fonts available.

00:16:37.010 --> 00:16:38.090
So in this case,

00:16:38.550 --> 00:16:39.570
Oh, I don't know.

00:16:39.720 --> 00:16:41.840
Lucida has a bold and a regular version.

00:16:41.940 --> 00:16:43.980
And those are both
automatically hung off the menu.

00:16:44.090 --> 00:16:48.200
And the system will keep track of the
submenu management for you automatically.

00:16:48.200 --> 00:16:54.940
We also provide some APIs that
allow you to take a given menu

00:16:54.940 --> 00:16:58.590
selection and ask the menu manager,
"Hey, what kind of font was this?" So you

00:16:58.590 --> 00:16:58.590
can take that font and run with it.

00:16:59.200 --> 00:17:57.500
[Transcript missing]

00:17:58.600 --> 00:18:02.950
You can put different menu manager
command IDs between each item so

00:18:02.950 --> 00:18:07.140
that you can find out what the user
selected on a command ID basis.

00:18:07.270 --> 00:18:10.340
The next thing I want to do is actually
show you how I implemented that.

00:18:10.440 --> 00:18:13.210
It's actually really,
really straightforward.

00:18:14.190 --> 00:18:16.760
The first step is done
just in your menu resource,

00:18:16.760 --> 00:18:19.000
or if you're using Interface Builder,
you can do it straight

00:18:19.000 --> 00:18:20.370
in the Nib resource.

00:18:20.760 --> 00:18:26.500
This is the menu that did not have
any dynamic menu commands in it.

00:18:26.500 --> 00:18:31.090
Your dynamic menu resource, or Nib,
looks basically the same.

00:18:31.160 --> 00:18:35.490
In a dynamic menu, if you have one item
that has three variants,

00:18:35.490 --> 00:18:38.060
there are really three menu
items behind that one item.

00:18:38.170 --> 00:18:44.530
So your menu resource simply
has each of those three items.

00:18:44.530 --> 00:18:44.530
I'll take the Amplify case, for instance.

00:18:44.700 --> 00:18:49.420
Each of the items which is ultimately
going to show up as just one visible

00:18:49.420 --> 00:18:53.900
item must have the same base command key,
but you can specify different modifiers.

00:18:53.910 --> 00:18:57.360
So, for instance, the Amplify item itself
just has the command key,

00:18:57.450 --> 00:19:01.400
Amplify All is Shift Command,
and Amplify Selection is Option Command.

00:19:01.530 --> 00:19:08.020
So you build up your menu,
you save that off,

00:19:08.020 --> 00:19:08.020
and then you need to do
one step in the code.

00:19:10.100 --> 00:19:10.810
actually.

00:19:10.810 --> 00:19:13.870
So it's a very small application,
uses Carbon events to

00:19:13.870 --> 00:19:14.920
do most of the work.

00:19:14.970 --> 00:19:19.640
And one of my subroutines is a routine
that just builds up my menu bar.

00:19:19.640 --> 00:19:22.160
One thing I happen to do in
here that Pete will talk about

00:19:22.160 --> 00:19:23.190
as well is get the root menu.

00:19:23.190 --> 00:19:25.940
This is a really convenient way
to be able to get your menu bar,

00:19:25.940 --> 00:19:29.720
treat it as a menu and iterate
through things in a quick easy way.

00:19:29.760 --> 00:19:34.230
So I get my root menu and the first thing
I do is I pull the sixth menu out of

00:19:34.230 --> 00:19:35.900
it which happens to be my dynamic menu.

00:19:35.960 --> 00:19:39.310
There's a number of other ways I could
have done this but for speed I just knew

00:19:39.310 --> 00:19:40.880
it was the sixth menu and grabbed it.

00:19:40.930 --> 00:19:44.100
And then I happen to iterate
over each of the items in the

00:19:44.100 --> 00:19:47.030
menu and change an attribute,
just turn on the dynamic

00:19:47.190 --> 00:19:48.320
bit for that item.

00:19:48.320 --> 00:19:51.900
And that's really all it takes
for the dynamic stuff to work.

00:19:51.900 --> 00:19:55.790
As soon as you run, the menu manager just
does the rest of the work.

00:19:56.770 --> 00:19:59.760
So, calling this API is a
little inconvenient,

00:19:59.830 --> 00:20:03.470
and we're going to look at getting
that integrated directly into Interface

00:20:03.570 --> 00:20:06.630
Builder so that Interface Builder
will let you click a checkbox and mark

00:20:06.630 --> 00:20:09.160
an individual menu item as dynamic,
and it'll just do it all,

00:20:09.160 --> 00:20:10.360
and you won't have to do any work.

00:20:10.360 --> 00:20:13.270
You just build your menu and run it,
and it's all dynamic.

00:20:13.820 --> 00:20:15.380
And so now, Pete,
I think he's going to talk a little

00:20:15.380 --> 00:20:19.800
bit more about these APIs I've shown
you and some more stuff as well.

00:20:19.800 --> 00:20:21.800
Great.

00:20:22.040 --> 00:20:23.780
Thanks a lot, Guy.

00:20:32.150 --> 00:20:37.090
So now we're going to talk about
some APIs as sort of a backgrounder

00:20:37.090 --> 00:20:41.570
and we're going to build up
towards the exact APIs that

00:20:41.570 --> 00:20:44.030
Guy showed just now in that demo.

00:20:44.690 --> 00:20:48.590
The first ones that we're going to
talk about are the menu attribute APIs.

00:20:48.590 --> 00:20:57.010
A set of menu attributes
is just a 32-bit quantity,

00:20:57.010 --> 00:20:57.010
a bunch of flags, that

00:20:57.100 --> 00:21:00.040
Control the behavior
of an individual menu.

00:21:00.040 --> 00:21:02.940
Right now we define two attributes.

00:21:02.940 --> 00:21:05.600
One of them is to
exclude the mark column.

00:21:05.700 --> 00:21:11.140
The mark column, of course,
is that column down the left-hand side

00:21:11.140 --> 00:21:17.450
of the menu with the check mark or the
diamond or whatever other symbol you need

00:21:17.600 --> 00:21:23.400
to put in there to tell the user that a
certain mode is in effect or some item

00:21:23.400 --> 00:21:25.450
has been selected as the current item.

00:21:25.990 --> 00:21:30.460
Basically, the reason you would want
to exclude that column,

00:21:30.650 --> 00:21:34.660
the best example we have
is the Path pop-up menu

00:21:34.660 --> 00:21:37.700
that Windows supports now.

00:21:37.700 --> 00:21:40.210
There's no reason to
mark any of those items,

00:21:40.290 --> 00:21:43.510
and it's much nicer if the width
of the item is very close to the

00:21:43.670 --> 00:21:45.640
width of the title in the window.

00:21:45.890 --> 00:21:49.950
So we turn off the
Mark column for that menu.

00:21:49.980 --> 00:21:52.450
And you may encounter situations
like that in your app as well.

00:21:53.170 --> 00:21:59.820
The other bit that you can set in the
menu attributes is the auto-disable bit.

00:21:59.820 --> 00:22:05.560
This bit basically, we hope,
replaces a lot of code in your

00:22:05.760 --> 00:22:10.690
application in which you attempt
to determine whether all the

00:22:10.690 --> 00:22:13.100
items in your menu are disabled.

00:22:13.100 --> 00:22:16.090
If they are,
go ahead and disable the title.

00:22:16.360 --> 00:22:20.960
Well, if you set this bit on a menu,
the menu manager will figure all that

00:22:20.960 --> 00:22:25.480
out for you and disable the title
on the fly on an as-needed basis.

00:22:29.390 --> 00:22:33.870
So there are a couple of
APIs for accessing these bits.

00:22:34.010 --> 00:22:35.400
The first one is pretty simple.

00:22:35.400 --> 00:22:38.220
You pass it the menu you care
about and it gives you back

00:22:38.230 --> 00:22:40.020
the attributes for that menu.

00:22:40.020 --> 00:22:43.040
The second one is a
little more interesting.

00:22:43.190 --> 00:22:46.940
It has an idiom that we are
probably going to use a lot of

00:22:47.010 --> 00:22:50.020
in the future for the toolbox.

00:22:50.020 --> 00:22:52.600
And basically where you
would expect one parameter,

00:22:52.600 --> 00:22:53.530
there are two.

00:22:53.620 --> 00:22:59.300
And the first one is the attributes that
the menu manager is supposed to set.

00:22:59.300 --> 00:23:03.140
And the second one is the attributes that
the menu manager is supposed to clear.

00:23:03.140 --> 00:23:06.720
And this replaces the code in your
application where you would get the

00:23:06.830 --> 00:23:10.790
attributes and then do some bitwise
operation on those attributes and

00:23:10.900 --> 00:23:12.720
then set them back onto the menu.

00:23:12.720 --> 00:23:16.620
And of course,
that's not nearly an atomic operation.

00:23:16.770 --> 00:23:20.480
So since thread safety is the sort
of thing we try to consider when

00:23:20.480 --> 00:23:25.460
we're designing new APIs for Carbon,
that's what this sort of dual

00:23:25.460 --> 00:23:28.240
parameter strategy is all about.

00:23:31.180 --> 00:23:39.480
Now of course there are
attributes for menu items as well,

00:23:39.480 --> 00:23:39.480
and these are the attributes that
Guy was talking about when he

00:23:39.480 --> 00:23:39.480
showed you how the dynamic menu
support is implemented in his app.

00:23:42.160 --> 00:23:46.340
The first menu item attribute
is the disabled attribute.

00:23:46.340 --> 00:23:49.720
Of course,
this is an attribute that's used by

00:23:49.720 --> 00:23:52.860
disable menu item and enable menu item.

00:23:52.860 --> 00:23:56.510
There's no sort of recommendation
that you use the attribute

00:23:56.510 --> 00:23:58.240
version of this capability.

00:23:58.240 --> 00:23:59.700
The old APIs work fine.

00:23:59.820 --> 00:24:04.170
It's just that it's nice to have all
of these attributes in a single place.

00:24:04.920 --> 00:24:07.430
The second attribute is
the dynamic attribute,

00:24:07.430 --> 00:24:08.900
which Guy talked about.

00:24:08.900 --> 00:24:15.350
You turn that on and you get
that dynamic menu support.

00:24:15.350 --> 00:24:15.350
The third is

00:24:16.130 --> 00:24:21.750
A hidden attribute allows you to
hide and show individual menu items

00:24:21.750 --> 00:24:24.700
in a menu without deleting them.

00:24:24.700 --> 00:24:27.220
They are still there,
but the menu manager simply

00:24:27.220 --> 00:24:28.860
chooses not to display them.

00:24:28.910 --> 00:24:39.260
We'll get to how that can be useful in
a very specific example in a few slides.

00:24:39.260 --> 00:24:39.330
The last attribute is
the separator attribute.

00:24:40.590 --> 00:24:44.550
And the separator attribute compensates
for the fact that we still have

00:24:44.560 --> 00:24:49.650
one metacharacter in menu items,
and that is a leading hyphen.

00:24:49.660 --> 00:24:53.670
And the leading hyphen, of course,
causes the item to become a separator

00:24:53.670 --> 00:24:55.610
line instead of a chunk of text.

00:24:55.620 --> 00:24:58.950
With this attribute,
you can turn that off and have a

00:24:58.950 --> 00:25:01.420
leading hyphen in your menu items.

00:25:01.420 --> 00:25:04.420
And this would be useful if you
don't want to know what kind of

00:25:04.420 --> 00:25:06.340
data you're putting into the menu.

00:25:06.500 --> 00:25:10.120
Say it comes from the file system
or it comes from a list of resources

00:25:10.120 --> 00:25:12.060
or some database or something.

00:25:12.060 --> 00:25:15.370
And you don't want to have to process,
does this thing have a hyphen in

00:25:15.370 --> 00:25:17.680
it and do I need to do a special
hack in order to make it work?

00:25:17.720 --> 00:25:24.670
You can just put text in the item
as long as that attribute is set,

00:25:24.900 --> 00:25:28.800
you won't get items turning
into separators unintentionally.

00:25:28.800 --> 00:25:32.320
Now, there are lots of other
menu item attributes,

00:25:32.320 --> 00:25:35.000
probably as many as a half dozen more.

00:25:35.000 --> 00:25:36.440
There are lots of other
menu item attributes,

00:25:36.440 --> 00:25:36.440
probably as many as a half dozen more.

00:25:36.440 --> 00:25:40.020
They're a little more obscure,
but they're worth looking

00:25:40.020 --> 00:25:41.360
at if you have some time.

00:25:41.360 --> 00:25:44.540
Take a look at them and see if
they apply to your application.

00:25:44.540 --> 00:25:45.520
They're all commented.

00:25:45.600 --> 00:25:51.940
The APIs are much like
the menu attribute APIs,

00:25:51.940 --> 00:25:55.310
and of course, you specify a menu item,
but otherwise they're

00:25:55.310 --> 00:25:56.320
pretty much the same.

00:25:59.950 --> 00:26:03.600
So now let's talk about that
dynamic menu item attribute.

00:26:03.710 --> 00:26:07.880
Guy explained a little bit of this,
but basically you create the same old

00:26:07.880 --> 00:26:15.030
resources or you use Interface Builder
to create your menu and X menu resources.

00:26:16.190 --> 00:26:18.990
And in your XMenu resources, of course,
you specify all the modifier

00:26:18.990 --> 00:26:21.210
keys that you care about.

00:26:21.450 --> 00:26:25.750
Basically,
what you do is you specify multiple

00:26:25.760 --> 00:26:29.540
"redundant" items in your resources.

00:26:29.540 --> 00:26:31.900
They're not redundant because obviously
they have different modifiers,

00:26:31.950 --> 00:26:32.970
but they sort of look redundant.

00:26:33.050 --> 00:26:36.400
They have the same base command
character associated with them.

00:26:36.400 --> 00:26:41.550
That's how the menu manager
figures out which items to merge

00:26:41.550 --> 00:26:41.550
and which items to leave alone.

00:26:41.750 --> 00:26:45.550
And then once you've got your menus
instantiated in your application,

00:26:45.550 --> 00:26:48.490
when you set the dynamic
attribute bit on the items,

00:26:48.750 --> 00:26:51.170
that tells the menu manager, "Okay,
you should look to see if this

00:26:51.170 --> 00:26:54.520
item should be merged with
another one above or below it."

00:26:56.470 --> 00:27:01.230
And of course,
you saw only the current set of

00:27:01.230 --> 00:27:05.800
modifier keys is displayed in the menu.

00:27:07.610 --> 00:27:09.750
I guess I should also point
out the items that aren't

00:27:09.750 --> 00:27:11.020
displayed are still in the menu.

00:27:11.020 --> 00:27:15.660
So the menu manager knows to return
you the index of those items according

00:27:15.990 --> 00:27:17.860
to which modifier keys are down.

00:27:17.860 --> 00:27:24.120
So you don't have to worry about, well,
I should say, the menu manager tells you,

00:27:24.120 --> 00:27:27.870
if you've got three items in a sequence
and they're dynamic menu items,

00:27:27.910 --> 00:27:31.610
say they're items 4, 5, and 6,
if the user holds down the modifier

00:27:31.750 --> 00:27:35.430
keys associated with item 5,
menu manager tells you that

00:27:35.430 --> 00:27:38.010
the user selected item 5,
and you don't have to worry about

00:27:38.010 --> 00:27:40.910
all the fact that menu manager
hides all those other ones for you.

00:27:46.700 --> 00:27:51.060
So we did some work with
hierarchical menus as well.

00:27:51.090 --> 00:27:57.220
A while back we added some functions to
allow you to get away from overloading

00:27:57.220 --> 00:28:01.360
the semantics of existing APIs like
set item mark and set item command.

00:28:01.500 --> 00:28:08.620
You used to have to pass all sorts of
goofy stuff according to all sorts of

00:28:08.620 --> 00:28:10.790
rules that nobody wanted to remember
and everybody had to look up every time.

00:28:11.400 --> 00:28:14.810
But in the latest release of Carbon,
we are also finally

00:28:14.810 --> 00:28:18.450
eliminating pretty much,
I think, the last weird case of

00:28:18.450 --> 00:28:23.630
overloaded parameters,
and that is insert menu and passing

00:28:23.810 --> 00:28:27.040
negative 1 for the after ID.

00:28:27.040 --> 00:28:30.750
You can now basically create a menu,
decide which item to make

00:28:30.960 --> 00:28:35.050
it a hierarchical menu of,
and pass the menu handle to the

00:28:35.050 --> 00:28:37.290
menu manager and let the menu
manager worry about the rest.

00:28:37.300 --> 00:28:39.860
You don't have to worry
about what ID the menu has.

00:28:39.870 --> 00:28:41.900
You don't have to worry about
doing something special.

00:28:41.900 --> 00:28:47.680
You have a name that actually
does what it says it does.

00:28:49.540 --> 00:28:54.720
And the only time that you really
have to worry about the menu ID is

00:28:54.720 --> 00:28:58.520
if you don't take advantage of
the APIs on the following slide.

00:28:59.430 --> 00:29:02.670
We've also had menu
command IDs for a while.

00:29:02.870 --> 00:29:06.770
We had a sort of a sparse set of APIs,
but I think we are pretty much

00:29:06.870 --> 00:29:10.780
rounding out the API set for
menu command IDs in Carbon.

00:29:10.780 --> 00:29:14.110
The first interesting one
is enable menu command.

00:29:14.390 --> 00:29:20.960
And what this does is if you associate
a 32-bit command ID with an item,

00:29:21.210 --> 00:29:23.920
You can enable that item or
disable it according to its

00:29:23.920 --> 00:29:30.050
command ID without worrying about
where it is in the menu hierarchy.

00:29:30.190 --> 00:29:33.580
Basically,
this allows you to not be concerned about

00:29:33.580 --> 00:29:38.830
searching or having a list of constants
in your application that relates command

00:29:38.840 --> 00:29:41.420
IDs to items or anything like that.

00:29:42.430 --> 00:29:45.020
And we've added a couple of
other APIs that allow you to

00:29:45.310 --> 00:29:51.290
sort of query your existing menu
bar to figure out where command

00:29:51.290 --> 00:29:55.300
IDs appear in your item hierarchy.

00:29:55.480 --> 00:30:00.850
And this is going to be useful
for situations like when you have

00:30:01.240 --> 00:30:05.320
your font menu and you want to
associate the same command with

00:30:05.640 --> 00:30:07.300
all the items in your font menu.

00:30:07.300 --> 00:30:11.530
Yet you still need to look up the text
of the item of the menu that was selected

00:30:11.530 --> 00:30:17.880
because that's the font name and you need
that to obtain a font ID and use that.

00:30:21.100 --> 00:30:25.370
Speaking of the font menu,
we've added some calls to

00:30:25.370 --> 00:30:28.130
create a standard font menu.

00:30:28.670 --> 00:30:31.490
And of course you saw the demo
where you had the option of

00:30:31.490 --> 00:30:34.940
creating sort of an old style font
menu with just font names in it.

00:30:34.940 --> 00:30:39.490
Or you can create a menu with font
names and their variants hanging

00:30:39.490 --> 00:30:42.230
off the side as a hierarchical menu.

00:30:42.950 --> 00:30:45.650
And of course you make that decision
by choosing whether to pass the

00:30:46.150 --> 00:30:51.790
K-Hierarchical Font Menu option
flag to Create Standard Font Menu.

00:30:52.730 --> 00:30:56.030
Some of the other interesting
parameters to this function are

00:30:56.030 --> 00:30:58.000
the first hierarchical menu ID.

00:30:58.000 --> 00:31:06.550
If you care about where your font variant
hierarchical menus start in the ID list,

00:31:06.580 --> 00:31:10.600
this is where you can specify
where they should start.

00:31:10.600 --> 00:31:17.750
You would use this if, say for example,
you had menus starting at 128, say,

00:31:17.750 --> 00:31:19.600
and going to 150.

00:31:19.600 --> 00:31:23.630
You're pretty sure you're not going to
use 50 more menus in this application,

00:31:23.630 --> 00:31:26.140
so you could tell Menu Manager, "Okay,
start my font variant IDs at

00:31:26.140 --> 00:31:33.040
200," and I'm pretty sure there
aren't going to be any collisions.

00:31:33.500 --> 00:31:35.400
Let's see.

00:31:35.540 --> 00:31:38.270
So yes,
and the other API will allow you to,

00:31:38.270 --> 00:31:42.000
instead of getting the string out
of the menu and having to figure

00:31:42.000 --> 00:31:50.510
out what that corresponds to,
just ask directly for the font family and

00:31:50.540 --> 00:31:51.760
font style in font manager terms instead
of you having to do that yourself.

00:31:54.740 --> 00:31:57.690
So one of the other standard font
menus that we're supporting in

00:31:57.760 --> 00:32:01.420
Carbon is a standard Apple menu,
or on 10 you'd call it

00:32:01.420 --> 00:32:03.080
the application menu.

00:32:03.660 --> 00:32:07.790
You no longer need to call
append REST menu and pass

00:32:07.890 --> 00:32:11.820
DRVR to build an Apple menu.

00:32:12.220 --> 00:32:15.960
And you also obviously no longer
need to call Open Desk Accessory

00:32:15.960 --> 00:32:19.590
because that's not supported,
so you better not need it.

00:32:19.770 --> 00:32:22.250
Under CarbonLib,
we build the Apple menu and

00:32:22.250 --> 00:32:25.670
we handle selections in it,
and pretty much it just works.

00:32:25.770 --> 00:32:27.000
You don't have to worry about it.

00:32:27.040 --> 00:32:28.890
You still need to worry
about your About item,

00:32:29.100 --> 00:32:32.270
but other than that,
everything just works.

00:32:32.720 --> 00:32:35.530
Under Mac OS X,
we still build the menu for you,

00:32:35.530 --> 00:32:38.960
but we add a couple items
that you need to respond to,

00:32:39.020 --> 00:32:42.770
one of which you're probably
already responding to.

00:32:43.350 --> 00:32:47.370
Basically, the QUIT application,
pretty much everybody supports it.

00:32:47.420 --> 00:32:49.160
If you don't support it,
you really can't even shut

00:32:49.160 --> 00:32:50.200
down the Mac properly.

00:32:50.200 --> 00:32:54.520
So, you're definitely already there.

00:32:55.070 --> 00:32:57.490
You need to add a new
Apple Event Handler to handle the

00:32:57.490 --> 00:33:01.580
Preferences event that will send your
application when the user selects

00:33:01.580 --> 00:33:03.840
the Preferences item from the menu.

00:33:03.950 --> 00:33:10.870
This is pretty easy because if
you have a Preferences dialog,

00:33:10.870 --> 00:33:10.870
all you have to do is call the
existing code that brings up

00:33:10.870 --> 00:33:10.870
that dialog and you're done.

00:33:11.710 --> 00:33:16.180
If you don't have a preferences dialog,
it's perfectly reasonable for you to

00:33:16.180 --> 00:33:22.210
pass the preferences command ID to
some of those APIs I mentioned earlier

00:33:22.720 --> 00:33:27.840
to either hide the preferences menu
item or disable it as necessary.

00:33:27.840 --> 00:33:29.750
And of course,
if your application is in a

00:33:29.750 --> 00:33:32.930
state where it can't quit,
it's perfectly reasonable to disable

00:33:32.930 --> 00:33:34.630
the quit menu item for a while.

00:33:34.690 --> 00:33:39.300
And that sort of seems counterintuitive
because we built the menu,

00:33:39.410 --> 00:33:42.780
but that's sort of also why we built
that whole command ID support into

00:33:42.780 --> 00:33:46.070
the enable and disable mechanism,
because we knew that you were

00:33:46.190 --> 00:33:47.240
going to run into that problem.

00:33:47.330 --> 00:33:50.380
So go ahead and do that.

00:33:55.300 --> 00:33:59.940
So, I'm about to explain these APIs and
you're going to be wondering at the end,

00:33:59.940 --> 00:34:01.590
why did they add those APIs?

00:34:01.920 --> 00:34:03.640
And then I'll tell you.

00:34:04.150 --> 00:34:07.860
You can now clone menus.

00:34:07.860 --> 00:34:12.380
And cloning really is just
terminology for reference counting.

00:34:12.380 --> 00:34:17.050
So if you explicitly clone a menu,
you increment its reference count.

00:34:17.140 --> 00:34:20.010
If you insert a menu into a menu bar,
that implicitly increments

00:34:20.010 --> 00:34:21.430
that menu's reference count.

00:34:21.480 --> 00:34:24.800
And if you delete a menu from a menu bar,
that implicitly decrements

00:34:24.800 --> 00:34:25.960
the reference count.

00:34:26.190 --> 00:34:29.220
And of course, when you dispose the menu,
the reference count,

00:34:29.330 --> 00:34:32.040
hopefully if you've stayed
balanced all this time,

00:34:32.040 --> 00:34:35.450
the The reference count goes to zero,
and the menu goes away.

00:34:38.540 --> 00:34:41.380
Why would you need this?

00:34:41.490 --> 00:34:43.710
Well, one use is:

00:34:44.130 --> 00:34:47.540
The enhancements we've
made to Get Menu Bar.

00:34:47.570 --> 00:34:51.100
Get Menu Bar still returns
the handle that you expect,

00:34:51.100 --> 00:34:58.110
that weird packed array of strange stuff
that's kind of documented inside Mac 1,

00:34:58.110 --> 00:34:59.100
I think.

00:34:59.100 --> 00:35:04.100
You can still walk around in that handle
and extract information out of it,

00:35:04.100 --> 00:35:06.990
but at the same time you want to
use some new APIs that we've added.

00:35:07.110 --> 00:35:10.320
The Dispose Menu Bar will do the
right thing with all the menus

00:35:10.320 --> 00:35:12.180
that happen to be in that Menu Bar.

00:35:12.480 --> 00:35:18.430
Once you've gotten the Menu Bar and
all of those menu refs have their

00:35:18.470 --> 00:35:20.840
reference count incremented,
and then you dispose the Menu Bar,

00:35:20.840 --> 00:35:24.100
those menu refs will have their
reference count decremented.

00:35:24.100 --> 00:35:29.490
Duplicate Menu Bar, of course,
will increment all the reference counts

00:35:29.490 --> 00:35:35.030
of the menu refs in that Menu Bar so
that you can keep everything balanced.

00:35:35.100 --> 00:35:35.620
The thing that you want to avoid
is that you want to have a menu

00:35:35.620 --> 00:35:36.100
bar that's not a reference count.

00:35:36.100 --> 00:35:40.030
The thing that you want to avoid
is passing a Menu Bar handle to a

00:35:40.040 --> 00:35:45.350
Dispose handle because that obviously
won't give us the chance to do all

00:35:45.350 --> 00:35:47.100
of that reference count maintenance.

00:35:47.100 --> 00:35:51.290
Same goes for Hand-to-Hand.

00:35:51.490 --> 00:35:55.840
Equally, it's a similar problem in that
Memory Manager has no idea that it

00:35:55.920 --> 00:35:59.390
needs to do anything with menu refs.

00:36:02.410 --> 00:36:06.890
Another way, though,
to access the Menu Bar is Get Root Menu.

00:36:06.990 --> 00:36:12.430
And it returns to you what I think
of as sort of a virtual menu ref.

00:36:12.500 --> 00:36:16.490
The Root Menu behaves as if it's a menu,
and you can pass it to

00:36:16.650 --> 00:36:20.300
all the menu-- well,
yes, you can pass it to pretty much

00:36:20.300 --> 00:36:22.260
all the menu manager APIs.

00:36:22.260 --> 00:36:25.670
But the most important
ones are Count Menu Items,

00:36:25.800 --> 00:36:30.200
which immediately tells you how many
items there are in the Menu Bar,

00:36:30.200 --> 00:36:30.200
so you don't have to--

00:36:30.620 --> 00:36:35.040
Declare your own data type and do tricky
things to get that simple information.

00:36:35.040 --> 00:36:37.440
And the other thing it will do
is it will allow you to get the

00:36:37.490 --> 00:36:42.180
menus that are in the menu bar,
their menu refs, really easily simply by

00:36:42.180 --> 00:36:44.920
calling a new API instead of,
again,

00:36:44.920 --> 00:36:46.860
walking around in that weird handle.

00:36:49.210 --> 00:36:52.260
When you're done with the root menu,
you can just call dispose menu just

00:36:52.260 --> 00:36:54.270
like you would with any other menu ref.

00:36:54.350 --> 00:37:02.850
So what we're hoping is that if
you're in your code looking at

00:37:02.850 --> 00:37:02.850
all that weird menu bar code,

00:37:03.660 --> 00:37:07.720
Instead of changing it to use Dispose
Menu Bar or Duplicate Menu Bar,

00:37:07.750 --> 00:37:11.800
which is perfectly acceptable to do,
we're hoping that you have the

00:37:11.800 --> 00:37:20.230
alternative to simply rip that out,
use Get Root Menu and the

00:37:20.230 --> 00:37:20.300
other menu manager APIs,
and then make your maintenance

00:37:20.300 --> 00:37:20.300
life simpler over time.

00:37:25.310 --> 00:37:29.750
So it's been 15 years.

00:37:29.910 --> 00:37:34.830
15 years and we still didn't
add a way to set the menu title.

00:37:34.850 --> 00:37:37.670
In Carbon, we finally did it.

00:37:44.810 --> 00:37:47.810
So, the Help Tag Manager.

00:37:48.140 --> 00:37:51.560
There's good news and bad news
about the Help Tag Manager.

00:37:51.560 --> 00:37:55.990
The good news is it's the
replacement for Balloon Help.

00:37:56.100 --> 00:38:00.820
The bad news is you have to give
up all of those alternate names for

00:38:00.860 --> 00:38:05.250
balloon help you've made up to express
to the world what you think of it.

00:38:08.490 --> 00:38:16.900
So the Help Tag Manager is, we think,
a big improvement on Balloon Help.

00:38:16.900 --> 00:38:18.900
The first improvement is
that it's object oriented.

00:38:18.900 --> 00:38:24.210
And what that means is you can associate
a Help Tag with a Toolbox object,

00:38:24.210 --> 00:38:27.400
like a control or a
window or a menu item.

00:38:28.920 --> 00:38:31.800
The second big improvement
is the human interface.

00:38:31.950 --> 00:38:35.330
Instead of having those
big cartoony balloons,

00:38:35.330 --> 00:38:38.700
what you've got is
small yellow rectangles,

00:38:38.700 --> 00:38:42.940
just like you've seen for
I don't know how many years.

00:38:43.480 --> 00:38:47.400
But what's great about ours is that
it has that slick aqua-translucence

00:38:47.430 --> 00:38:49.670
that you see everywhere else.

00:38:52.110 --> 00:38:56.100
The content is a little
different for Help Tags.

00:38:56.250 --> 00:39:01.680
Basically what we're expecting Help Tags
to be used for is three or four words,

00:39:01.740 --> 00:39:02.820
a phrase.

00:39:03.060 --> 00:39:06.780
So suppose for example you had...

00:39:07.290 --> 00:39:09.350
You had a button with
an icon with a label,

00:39:09.350 --> 00:39:13.340
and the button was supposed
to send an email message.

00:39:14.380 --> 00:39:18.160
The button might say, on the caption,
it might say "Send" because after all

00:39:18.160 --> 00:39:22.190
it's in the context of an email message
window and so "Send" is pretty clear.

00:39:22.280 --> 00:39:29.920
If the user for some reason needs
to know what the "Send" button does,

00:39:29.960 --> 00:39:33.490
and hovered over that button waiting
for the balloon help to appear,

00:39:33.490 --> 00:39:33.490
the balloon help might
have said something like,

00:39:34.370 --> 00:39:38.730
Open a TCP/IP connection to
the SMTP server and squirt an

00:39:38.740 --> 00:39:41.860
RFC 822 message over the link.

00:39:41.860 --> 00:39:45.300
That's not what we expect in a Help Tag.

00:39:45.300 --> 00:39:49.970
What we expect in a
Help Tag is something like,

00:39:49.970 --> 00:39:49.970
"Send the current message."

00:39:51.330 --> 00:39:54.790
Now, we've added facilities for
you to leverage your existing

00:39:54.790 --> 00:39:58.140
Balloon Help content because
we know that's important.

00:39:59.290 --> 00:40:01.960
But we think that as you
experiment with that,

00:40:01.960 --> 00:40:06.200
you'll find that the content really
doesn't fit the Help Tag idiom.

00:40:06.200 --> 00:40:07.640
It's sort of a stopgap measure.

00:40:07.640 --> 00:40:10.630
You can get your help system back
up and running with Help Tags.

00:40:10.710 --> 00:40:18.520
But the more you use it,
we think the more you'll be motivated

00:40:18.520 --> 00:40:18.520
to rev your content over time.

00:40:22.320 --> 00:40:26.330
So here are some of the APIs that
you use to specify Help Tag content.

00:40:26.560 --> 00:40:28.260
I'll just talk about the first one.

00:40:28.380 --> 00:40:31.760
You pass it a control ref,
and you pass it this new data

00:40:32.180 --> 00:40:34.990
structure called HM Help Content Rack.

00:40:37.660 --> 00:40:46.450
Basically, HM Help Content Rack is a data
structure that specifies an expanding

00:40:46.450 --> 00:40:49.230
number of data types for your content.

00:40:49.390 --> 00:40:54.320
By expanding, what I mean is we hope to
add lots of data types that

00:40:54.400 --> 00:40:56.670
Help Tags support over time.

00:40:57.380 --> 00:41:02.020
Right now, the one that absolutely works
flawlessly and the one that we fully

00:41:02.020 --> 00:41:06.150
intend to keep forever is str255,
the standard Pascal string

00:41:06.300 --> 00:41:07.500
that you're used to.

00:41:07.500 --> 00:41:12.240
In the header, you may find other types,
but we recommend that you stick with

00:41:12.260 --> 00:41:17.050
str255 for now because that's the
one that's going to stay around.

00:41:17.520 --> 00:41:20.890
Some of the other interesting
fields in the HM Help Content Rack

00:41:20.890 --> 00:41:24.320
are the tag display side,
and that of course is left, right,

00:41:24.320 --> 00:41:25.300
bottom, top.

00:41:25.410 --> 00:41:31.280
So you can specify where you
expect the tag to appear relative

00:41:31.280 --> 00:41:31.280
to the object you've specified.

00:41:32.200 --> 00:41:37.980
And then the other interesting
field is the hot rack field.

00:41:38.210 --> 00:41:42.050
Now I said earlier that this
API is object oriented in the sense

00:41:42.050 --> 00:41:44.350
that it talks to Toolbox objects.

00:41:44.410 --> 00:41:49.100
And why would you need a hot rack that
could just ask the Toolbox object?

00:41:49.100 --> 00:41:49.100
Well,

00:41:49.680 --> 00:41:50.980
The relevant example is a window.

00:41:50.980 --> 00:41:57.930
If you attach a Help Tag to a window,
you may have multiple hot-wrecked

00:41:57.930 --> 00:42:02.200
areas within that window.

00:42:02.200 --> 00:42:02.200
And we'll see why that's
relevant in a few seconds.

00:42:02.910 --> 00:42:04.490
Well actually,
we'll see how you can customize

00:42:04.490 --> 00:42:05.400
that in a few seconds.

00:42:05.400 --> 00:42:08.030
It may be relevant even
if you don't customize.

00:42:08.230 --> 00:42:10.820
For example,
if you've got a window up and you're not

00:42:10.880 --> 00:42:13.490
using Control Manager for some reason,
I mean,

00:42:13.490 --> 00:42:17.710
I'm in love with Control Manager and
I can't see why anyone would avoid it.

00:42:17.710 --> 00:42:17.710
But,

00:42:17.780 --> 00:42:20.540
Some people need to.

00:42:20.580 --> 00:42:24.220
So if you're in that situation,
that's where the hot rack comes in.

00:42:27.160 --> 00:42:30.070
So I mentioned customization.

00:42:30.370 --> 00:42:34.840
These APIs are APIs you can use
to customize your help tags.

00:42:34.880 --> 00:42:42.680
Basically, you use these APIs to
sort of do lazy content,

00:42:42.760 --> 00:42:45.140
to provide lazy content.

00:42:45.260 --> 00:42:47.110
You can do two main things.

00:42:47.240 --> 00:42:52.860
You can decide, oh,
I don't want to use string A.

00:42:52.860 --> 00:42:54.740
I want to use string B.

00:42:54.810 --> 00:42:58.590
And that may have to do with
what state the window's in or

00:42:58.640 --> 00:43:03.090
what state the control's in or
something along those lines.

00:43:03.490 --> 00:43:10.880
The other thing you can do is specify
the hot rack on the fly so that

00:43:11.550 --> 00:43:14.990
So for example,
if you've got the scenario

00:43:15.090 --> 00:43:20.400
I mentioned with the window with
multiple possible hot racks,

00:43:20.400 --> 00:43:24.870
if things are moving around,
you still want to inform

00:43:24.910 --> 00:43:29.440
the Help Tag Manager when
to take down the Help Tag.

00:43:29.440 --> 00:43:35.690
And so if you're in that situation,
you need to turn to

00:43:35.690 --> 00:43:35.690
these customization APIs.

00:43:38.940 --> 00:43:41.670
So I mentioned balloon
help compatibility,

00:43:41.670 --> 00:43:46.550
and these are the APIs that you would
use to specify your existing balloon help

00:43:46.550 --> 00:43:49.500
resources as Help Tag content resources.

00:43:49.610 --> 00:43:54.410
And it does preserve your
investment in content,

00:43:54.410 --> 00:43:54.410
but

00:43:55.440 --> 00:44:00.160
It's really up to you to evaluate
whether you want to keep that content

00:44:00.530 --> 00:44:03.370
for your Help Tag implementation or not.

00:44:03.390 --> 00:44:08.370
It's really sort of the honor system,
and we hope you do the right thing.

00:44:12.700 --> 00:44:17.010
I also mentioned some new control
functions that we've added.

00:44:17.020 --> 00:44:20.570
We're going to be talking a
lot more about controls in the

00:44:20.570 --> 00:44:26.220
second session for Carbon Toolbox
Enhancements tomorrow at 9 a.m.

00:44:26.220 --> 00:44:31.120
I believe that's in A1, A2.

00:44:31.120 --> 00:44:32.780
Well,
we'll find out later in the roadmap.

00:44:32.780 --> 00:44:35.420
But basically,
we wanted to cover a couple

00:44:35.500 --> 00:44:37.360
of things in this session.

00:44:39.240 --> 00:44:41.780
It used to be when you wanted
to create a pop-up menu,

00:44:41.780 --> 00:44:46.070
you would have to basically crack open
the documentation and read a short

00:44:46.070 --> 00:44:51.310
paragraph on just about every parameter
to figure out what it really meant.

00:44:51.420 --> 00:44:52.870
It wasn't really the control.

00:44:52.880 --> 00:44:55.820
It wasn't really the refcon.

00:44:55.820 --> 00:44:56.760
It was really something else.

00:44:56.760 --> 00:45:00.940
So what we've done is for each control,
or each standard control, I should say,

00:45:00.940 --> 00:45:04.590
we've added individual creation
functions so that you can pretty

00:45:04.590 --> 00:45:08.080
much look at the prototype,
figure out the data you need to provide,

00:45:08.080 --> 00:45:08.820
and provide it.

00:45:08.860 --> 00:45:09.180
Instead.

00:45:09.250 --> 00:45:13.140
of spending a half an hour every time
you need to create a pop-up button.

00:45:14.730 --> 00:45:18.100
The other change we've made is
we've made these control creation

00:45:18.100 --> 00:45:19.690
functions return OS status.

00:45:19.700 --> 00:45:23.830
It used to be you'd call new control,
you'd get back a nil control ref,

00:45:23.960 --> 00:45:27.020
and then it would just be a big
mystery as to why it failed.

00:45:27.050 --> 00:45:32.910
Now that we return OS status,
you can at least maybe figure out, "Okay,

00:45:32.910 --> 00:45:38.250
I need to do this other thing
instead," or maybe tell the user what

00:45:38.250 --> 00:45:40.870
went wrong or something like that.

00:45:40.870 --> 00:45:40.870
It's no longer just this big mystery.

00:45:43.040 --> 00:45:45.940
I mentioned that we're going to have
some new standard controls in Mac OS X.

00:45:45.940 --> 00:45:51.500
And in fact, in Carbon in general.

00:45:51.500 --> 00:45:55.560
The first example is there
was a session this morning,

00:45:55.560 --> 00:45:57.540
and I hope you saw it,
on the data browser control.

00:45:57.540 --> 00:46:01.420
It's a really whizzy new
hierarchical list control.

00:46:01.420 --> 00:46:03.940
It has excellent user experience.

00:46:03.940 --> 00:46:09.000
It supports all sorts of
features basically for free.

00:46:09.000 --> 00:46:11.460
You get drag and drop support.

00:46:12.060 --> 00:46:14.740
You get the little
disclosure triangle support.

00:46:14.740 --> 00:46:18.190
You get the column headers and the
movable columns and the whole nine yards.

00:46:18.250 --> 00:46:23.680
Basically,
we're making finder level functionality

00:46:23.680 --> 00:46:27.420
available to your application
with respect to list management.

00:46:30.390 --> 00:46:35.510
Some of the other controls are
pretty cool in their own right,

00:46:35.510 --> 00:46:38.400
but I've got to admit the
data browser is great.

00:46:38.400 --> 00:46:43.600
The Relevance Indicator is a new
control that's basically the result of

00:46:43.600 --> 00:46:48.020
the fact that the Progress Indicator
is very different in Aqua and it no

00:46:48.140 --> 00:46:50.300
longer works as a relevance control.

00:46:50.300 --> 00:46:55.300
So we've created a new control,
and for example this is used

00:46:55.300 --> 00:47:00.440
by Sherlock to display search
results to tell you how relevant

00:47:00.580 --> 00:47:03.000
each hit is to your search.

00:47:03.200 --> 00:47:07.000
The round button is basically
intended as a navigational aid.

00:47:07.000 --> 00:47:12.310
We expect you to use it for things
like back and forward and home.

00:47:14.270 --> 00:47:17.960
The Disclosure button is something that
you will see in Navigation Services.

00:47:17.960 --> 00:47:23.690
It's basically for expanding and
contracting dialogue windows.

00:47:23.690 --> 00:47:30.030
If you have expert users who need
access to more settings than your

00:47:30.040 --> 00:47:36.060
main customer base and you don't
want to burden your main customer

00:47:36.060 --> 00:47:39.300
base with too many controls,
the Disclosure button is a way to

00:47:39.300 --> 00:47:43.620
give your expert users the opportunity
they need to twiddle the settings

00:47:43.620 --> 00:47:49.390
that they want to twiddle without
distracting your mainline customers.

00:47:50.740 --> 00:47:55.250
And then of course, in Aqua we really,
really, really want you to use

00:47:55.250 --> 00:47:57.110
the standard progress bar.

00:47:57.440 --> 00:48:00.820
And the one barrier left to
that really was we didn't have

00:48:01.020 --> 00:48:02.940
a vertical variant for it.

00:48:02.940 --> 00:48:07.560
We really want you to get away from
drawing progress bars with Quick Draw.

00:48:07.560 --> 00:48:11.620
It's never going to look good under Aqua.

00:48:11.900 --> 00:48:15.140
So, if you've got a vertical
progress bar now,

00:48:15.270 --> 00:48:16.980
now's the time.

00:48:21.420 --> 00:48:25.020
So,
we've talked about things you have to do,

00:48:25.140 --> 00:48:31.380
and we've talked about things
that you're going to want to do.

00:48:32.210 --> 00:48:35.860
The things you have to do are:
you have to watch out for

00:48:35.860 --> 00:48:35.860
mandatory window layers and
mandatory root controls.

00:48:37.640 --> 00:48:45.410
And the window layering
shouldn't be too onerous,

00:48:45.540 --> 00:48:47.200
but it is a little bit of work.

00:48:47.200 --> 00:48:50.110
And as long as you understand it,
I think you'll be OK.

00:48:50.120 --> 00:48:55.170
The root controls stuff is even easier
to deal with because all you really need

00:48:55.170 --> 00:48:59.100
to know is be aware of it for debugging.

00:48:59.100 --> 00:49:01.560
And for the most part,
you shouldn't have to make

00:49:01.560 --> 00:49:04.710
too many changes because your
code will create controls,

00:49:04.840 --> 00:49:07.840
and they'll become child
controls of the root control,

00:49:07.840 --> 00:49:10.900
and everything will
pretty much work the same.

00:49:12.610 --> 00:49:18.380
Watch out for get menu returning copies.

00:49:18.380 --> 00:49:18.380
Don't assume that it always returns
the same handle over and over again.

00:49:20.300 --> 00:49:24.430
Check out the Scrap Manager if
you have some private scrap code

00:49:24.920 --> 00:49:27.300
where you export your private
scrap during a suspend event.

00:49:27.720 --> 00:49:31.300
Look out for that.

00:49:31.510 --> 00:49:36.490
Stuff to look forward to is
all the new Menu Manager APIs.

00:49:40.780 --> 00:49:45.390
They basically enable
you to eliminate code,

00:49:45.400 --> 00:49:49.460
support Aqua without too much effort,
and then

00:49:50.700 --> 00:49:56.390
We'll keep working on them as well,
but we're pretty happy with them.

00:49:58.550 --> 00:50:02.540
Help Tags is something that is basically
really the help system of the future.

00:50:02.540 --> 00:50:06.500
It's basically the way balloon help
should have worked in the first place.

00:50:06.500 --> 00:50:08.500
And we think you'll want
to check that out as well.

00:50:08.640 --> 00:50:13.460
And then of course there are
some control manager improvements

00:50:13.550 --> 00:50:16.250
that you'll want to keep in mind.

00:50:16.250 --> 00:50:19.870
And again,
if you're interested in control manager,

00:50:19.870 --> 00:50:19.870
the Carbon Toolbox Enhancement
Session 2 tomorrow morning

00:50:19.870 --> 00:50:19.870
at 9:00 is the place to be.

00:50:21.110 --> 00:50:23.900
So with that,
I'd like to bring out Dave Wright again,

00:50:23.920 --> 00:50:26.850
and he'll wrap things up for us.

00:50:32.430 --> 00:50:34.200
Thanks, Pete.

00:50:34.310 --> 00:50:38.440
So just to take a look at where
to take feedback about this,

00:50:38.600 --> 00:50:41.780
for Carbon APIs and ways that
the Toolbox could better help you

00:50:41.780 --> 00:50:44.530
with your programming efforts,
please feel free to contact

00:50:44.910 --> 00:50:48.330
me at david.wright@apple.com.

00:50:48.330 --> 00:50:51.680
And for user interface type issues,
please contact our

00:50:51.680 --> 00:50:57.320
User Experience Technology Manager,
John Galenzi, at galenzi@apple.com.

00:50:57.430 --> 00:51:00.060
And for the roadmap, as you can see,
these Carbon Enhancement

00:51:00.120 --> 00:51:01.500
sessions are very useful.

00:51:01.500 --> 00:51:03.790
These are issues that are
going to affect you as you're

00:51:03.790 --> 00:51:05.320
Carbonizing your applications.

00:51:05.360 --> 00:51:08.780
So don't miss tomorrow's second
session about this stuff.

00:51:08.930 --> 00:51:10.340
It's in A2 at 9:00.

00:51:10.400 --> 00:51:13.350
I don't know about you,
but engineering at 9:00

00:51:13.350 --> 00:51:16.000
AM is really early,
but it's really important,

00:51:16.000 --> 00:51:17.400
so be sure to be there.

00:51:17.550 --> 00:51:20.080
Also,
be sure to go to Navigation Services,

00:51:20.080 --> 00:51:23.400
since that's the only standard
way to open and save files

00:51:23.400 --> 00:51:25.400
in a Carbon application now.

00:51:25.400 --> 00:51:25.940
And for feedback, again,
that you'd be sending to John,

00:51:25.940 --> 00:51:26.400
please contact us at gmail.com.

00:51:26.400 --> 00:51:26.400
Thank you.

00:51:27.410 --> 00:51:30.240
And if you have any questions
about John during this conference,

00:51:30.240 --> 00:51:32.400
please be sure to attend
the Aqua feedback forum,

00:51:32.710 --> 00:51:34.940
because that's where user
interface type feedback should

00:51:34.940 --> 00:51:36.390
go during this conference.

00:51:36.400 --> 00:51:40.180
And again, for programmatic type stuff,
ways that the Toolbox could help you

00:51:40.180 --> 00:51:44.070
get your Carbon application going faster
and better and concerns that you have,

00:51:44.080 --> 00:51:47.390
please attend the feedback forum
for the high-level Toolbox.

00:51:47.400 --> 00:51:51.530
So this time, I'd like to invite the
panelists to come up for Q&A,

00:51:51.530 --> 00:51:53.390
and we'll move into that.