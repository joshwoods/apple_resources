WEBVTT

00:00:09.980 --> 00:00:14.040
Ladies and gentlemen,
please welcome USB technology manager,

00:00:14.040 --> 00:00:15.780
Craig Keithley.

00:00:21.000 --> 00:00:25.600
Good afternoon everybody,
thank you for coming.

00:00:25.600 --> 00:00:27.550
Now is a very important time for us.

00:00:27.680 --> 00:00:35.970
Obviously we're emphasizing Mac OS X,
and as part of that we'll

00:00:35.970 --> 00:00:35.970
be talking about some of the
Mac OS X features for USB.

00:00:38.340 --> 00:00:41.420
I'm also going to do an overview
of Mac OS 9 to give you an

00:00:41.420 --> 00:00:45.090
insight into what automatic,
what standard USB drivers

00:00:45.090 --> 00:00:48.490
we have built into the OS,
and to give you an overview of

00:00:48.670 --> 00:00:50.640
what that architecture looks like.

00:00:50.690 --> 00:00:54.280
That's mostly meant as a refresher
because we are moving to 10.

00:00:54.300 --> 00:00:59.790
The other thing too that I decided
Monday night as we committed to making

00:00:59.790 --> 00:01:05.290
the announcement about Aladdin Installer
Maker supporting USB Software Locator

00:01:05.300 --> 00:01:09.070
is I cut out my five slides that I've
been presenting for the last couple of

00:01:09.070 --> 00:01:12.300
years about what's inside a USB device.

00:01:12.360 --> 00:01:14.300
I figure by now you already know that.

00:01:14.300 --> 00:01:16.300
What you want to know is how to
make USB Software Locator work.

00:01:16.300 --> 00:01:19.110
So we'll have some presentation on that.

00:01:19.300 --> 00:01:24.280
And at the end we will go into doing
driver development on Mac OS X.

00:01:25.160 --> 00:01:31.820
There is some difference in
USB under 9 and USB under 10.

00:01:31.820 --> 00:01:34.770
The APIs are slightly different,
the structure is slightly different,

00:01:34.770 --> 00:01:37.490
but I think you'll see that it's a
vast improvement over what we've had

00:01:37.490 --> 00:01:39.060
in driver architectures in the past.

00:01:39.420 --> 00:01:42.090
10 with I/O Kit is a great leap forward.

00:01:42.100 --> 00:01:45.350
I'll also talk to you about our
recommendations that we make to

00:01:45.420 --> 00:01:48.570
developers when they come in and
they ask us how should we create

00:01:48.570 --> 00:01:50.100
USB devices for the Macintosh.

00:01:50.200 --> 00:01:56.100
And those recommendations, by and large,
apply to both Mac OS 9 and Mac OS X.

00:01:56.100 --> 00:01:59.400
So let me talk about what
we've done in Mac OS 9.

00:01:59.940 --> 00:02:04.120
I'll go over what's new,
I'll talk about the standard drivers,

00:02:04.140 --> 00:02:06.870
and I'll give you an
overview of the architecture.

00:02:07.190 --> 00:02:08.780
So what's new in 904?

00:02:08.870 --> 00:02:10.130
Well, not a lot.

00:02:10.240 --> 00:02:11.940
I mean,
we've been fine tuning performance.

00:02:12.130 --> 00:02:14.100
We've been addressing some issues.

00:02:14.200 --> 00:02:18.390
The notable improvements,
new features in Mac OS 904

00:02:18.530 --> 00:02:22.880
and with the just released
two day ago multimedia update,

00:02:22.960 --> 00:02:25.780
our good USB audio input works very well.

00:02:25.880 --> 00:02:29.030
And we also are pleased to
announce that we built into

00:02:29.030 --> 00:02:32.900
Mac OS 9 USB controlled UPSs.

00:02:32.980 --> 00:02:34.760
So all those that you've
seen in the press releases

00:02:34.760 --> 00:02:38.760
about having USB interfaces,
not only do we have a USB driver,

00:02:38.850 --> 00:02:42.570
we also have added functionality
into our power manager to

00:02:42.590 --> 00:02:44.330
support UPSs automatically.

00:02:44.430 --> 00:02:46.340
It looks like a battery device.

00:02:46.450 --> 00:02:49.530
And it's very cool and
it's a great addition.

00:02:50.040 --> 00:02:52.000
So what's the specifics
about the audio driver?

00:02:52.050 --> 00:02:54.680
Well, if you haven't been
working with USB audio,

00:02:54.770 --> 00:02:58.630
I can tell you quite simply,
it supports multiple frequencies,

00:02:58.630 --> 00:03:00.000
multiple sampling.

00:03:00.000 --> 00:03:02.510
We use PCM format,
which is a particular way of

00:03:02.510 --> 00:03:05.000
representing the data in the data stream.

00:03:05.000 --> 00:03:12.780
We support both stereo output,
stereo input, and monophonic input.

00:03:12.780 --> 00:03:12.780
We don't today support monophonic output.

00:03:13.120 --> 00:03:16.860
We don't support vendor unique
implementations for USB audio devices.

00:03:16.870 --> 00:03:21.440
If you're going to do a USB audio device,
follow the USB specification.

00:03:21.460 --> 00:03:23.010
And you'll hear me say that
a couple of times today.

00:03:23.020 --> 00:03:25.060
That's our number one recommendation.

00:03:25.070 --> 00:03:27.780
If you're going to do a
USB device and you want it to

00:03:27.790 --> 00:03:31.030
be supported by Apple's drivers,
please, absolutely,

00:03:31.170 --> 00:03:33.640
follow the USB spec for
that class of device.

00:03:33.730 --> 00:03:38.180
That's the best way to get plug-and-play
functionality on the Macintosh.

00:03:40.000 --> 00:03:44.700
With power supplies, the major change,
aside from a USB driver,

00:03:44.850 --> 00:03:46.720
is a new power manager.

00:03:46.720 --> 00:03:50.780
And this is in 904,
it's in the new world-based Macintoshes,

00:03:50.910 --> 00:03:52.780
and it's Power Manager 2.0.

00:03:52.780 --> 00:03:56.300
And Power Manager 2.0,
which is only on the iMac, iBook,

00:03:56.300 --> 00:04:00.620
PowerMac, PowerBook families,
supports UPSs built in.

00:04:00.660 --> 00:04:04.370
This will allow you to connect any
UPS that conforms to that spec.

00:04:04.820 --> 00:04:07.100
Another one of those
great recommendations:

00:04:07.180 --> 00:04:10.420
follow the USP class specifications
will automatically work.

00:04:11.780 --> 00:04:14.200
We also exported an API.

00:04:14.200 --> 00:04:18.980
This allows third parties
that want to do UPSs,

00:04:18.980 --> 00:04:21.180
vendor specific control panels,
monitoring of specific features

00:04:21.270 --> 00:04:23.770
that aren't supported by us,
changing the thresholds.

00:04:23.770 --> 00:04:25.290
See, we have some specific thresholds.

00:04:25.300 --> 00:04:29.700
When it hits 50% of battery capacity,
put up a warning dialogue.

00:04:29.700 --> 00:04:34.700
When it reaches, I think,
10 or 20%, we do a graceful shutdown.

00:04:34.700 --> 00:04:37.630
You may want to do a lot more than that,
and you can do that by using

00:04:37.630 --> 00:04:39.840
these APIs that we've exported.

00:04:39.870 --> 00:04:42.700
It'll make for really great products,
and there have been some product

00:04:42.700 --> 00:04:44.700
announcements in recent days.

00:04:44.700 --> 00:04:48.490
I saw a press release come out from
APC yesterday that announced that

00:04:48.590 --> 00:04:53.590
they're supporting our new architecture
in Mac OS 904 and using this new

00:04:53.590 --> 00:04:56.700
USB standard to control their UPS.

00:04:56.700 --> 00:05:00.160
And they added extra software,
and they used our API to

00:05:00.230 --> 00:05:02.130
add extra functionality.

00:05:02.600 --> 00:05:07.000
By the way,
the USB UPS stuff is part of the USB DDK.

00:05:07.090 --> 00:05:10.060
So you can go take a look at that
and you can see how to expand upon

00:05:10.480 --> 00:05:12.290
the basic features that we have.

00:05:12.500 --> 00:05:14.500
So what's in Mac OS 9?

00:05:14.500 --> 00:05:20.430
Well, HID devices, keyboards, mice,
gaming, UPSs.

00:05:20.650 --> 00:05:23.500
Amazingly enough,
UPSs are actually a HID device.

00:05:23.800 --> 00:05:28.110
Mass storage, except for CD and tape,
we support a wide range of USB mass

00:05:28.110 --> 00:05:30.470
storage devices automatically.

00:05:30.500 --> 00:05:34.200
You follow USB spec, you plug it in,
our driver loads and

00:05:34.200 --> 00:05:36.500
recognizes it and supports it.

00:05:36.500 --> 00:05:43.480
We support V.90, V.25 ter,
roughly Haze compatible modems,

00:05:43.580 --> 00:05:45.500
built in support in Mac OS.

00:05:45.620 --> 00:05:48.630
You can just build your modem,
comply with the spec, plug it in,

00:05:48.630 --> 00:05:49.500
and it works.

00:05:49.500 --> 00:05:53.370
Audio, as I've already mentioned,
we have audio input and output.

00:05:53.710 --> 00:05:57.920
We both support stereo
and monophonic devices.

00:05:58.360 --> 00:06:01.090
And printing, we've had for a long while,
and this has actually turned

00:06:01.200 --> 00:06:03.390
out to be pretty powerful,
both for people who are printing

00:06:03.390 --> 00:06:07.560
to PostScript printers and who just
use our low-level printer driver

00:06:07.560 --> 00:06:11.020
with their own chooser extension
to talk directly to the printer.

00:06:11.020 --> 00:06:12.600
We supply that.

00:06:12.750 --> 00:06:15.910
You don't need to write a low-level
driver if your device complies with the

00:06:15.910 --> 00:06:17.880
USB class specification for printing.

00:06:17.880 --> 00:06:20.920
So we've added,
with the desktop printing utility,

00:06:20.960 --> 00:06:25.280
the ability to print directly to
USB-connected PostScript printers.

00:06:25.280 --> 00:06:26.940
Very nice feature.

00:06:27.610 --> 00:06:31.290
And people who are doing non-PostScript
printers can still use our class

00:06:31.420 --> 00:06:32.820
driver to talk to the printer.

00:06:32.820 --> 00:06:34.960
So they just need to
write a chooser extension.

00:06:34.960 --> 00:06:36.620
So what's in a class specification?

00:06:36.620 --> 00:06:41.060
I talk about that a lot,
and I really need to go into it in

00:06:41.060 --> 00:06:45.030
some detail to continue to encourage
people to follow those specifications.

00:06:45.060 --> 00:06:49.130
For one thing,
it details how the device behaves.

00:06:49.140 --> 00:06:51.100
You don't need to reinvent the wheel.

00:06:51.150 --> 00:06:51.860
Please don't.

00:06:51.920 --> 00:06:56.390
We use those specifications,
and quite often the discussions that

00:06:56.390 --> 00:07:00.840
take place between Apple engineering and
developer technical support and myself

00:07:00.920 --> 00:07:04.920
usually end up down to the realm of where
are we not following the specification?

00:07:04.920 --> 00:07:06.280
What can we do different?

00:07:06.360 --> 00:07:08.500
And that applies to both
Apple and the developer.

00:07:08.520 --> 00:07:09.880
We appreciate feedback.

00:07:09.970 --> 00:07:12.090
When we hear that developers
are having difficulty,

00:07:12.130 --> 00:07:16.910
they think the device meets the spec,
we really value the dialogue that we have

00:07:16.910 --> 00:07:22.220
with the developers to ensure that we
give the best possible support we can.

00:07:23.110 --> 00:07:27.440
These specifications can
be found at www.usb.org.

00:07:27.440 --> 00:07:29.830
I'll talk later about our
recommendations in detail,

00:07:29.830 --> 00:07:32.680
but for right now,
if you want to know what's in a spec,

00:07:32.910 --> 00:07:35.480
go to www.usb.org.

00:07:35.580 --> 00:07:39.180
So let me talk about the
architecture now in Mac OS 9.

00:07:39.690 --> 00:07:43.010
If you haven't heard this before,
I apologize because I'm

00:07:43.010 --> 00:07:44.870
going to go quickly,
because we have other

00:07:44.870 --> 00:07:46.680
things we want to show you.

00:07:46.710 --> 00:07:51.600
The three or four major
components are the USB manager,

00:07:51.710 --> 00:07:55.390
there's a USB expert,
a USB services library,

00:07:55.510 --> 00:07:57.940
and the USB interface module.

00:07:58.040 --> 00:07:59.240
Now I think I've got a graphic.

00:07:59.440 --> 00:08:00.620
Yes, I do.

00:08:00.710 --> 00:08:04.340
At the very bottom of this
whole architecture is actually

00:08:04.350 --> 00:08:07.560
the USB host controller.

00:08:08.030 --> 00:08:12.900
Above that is the USB interface module,
or a WIM.

00:08:13.030 --> 00:08:18.500
The WIM actually does the translation
from the basic USB commands,

00:08:18.570 --> 00:08:20.900
APIs, to the hardware.

00:08:20.900 --> 00:08:22.890
So that's our hardware abstraction
layer at that lowest level.

00:08:22.900 --> 00:08:27.890
Above that is the USB services library,
the USB manager, and the USB expert.

00:08:27.890 --> 00:08:28.870
And they all play different roles.

00:08:28.900 --> 00:08:35.270
The USB services library takes calls
from your drivers and translates them

00:08:35.810 --> 00:08:38.880
down into the USB interface module.

00:08:38.900 --> 00:08:43.760
So doing bulk reads, bulk writes,
interrupt reads, interrupt writes,

00:08:43.760 --> 00:08:47.890
and so forth, take place through the
USB services library.

00:08:48.260 --> 00:08:51.640
The USB expert and manager are
closely related in that they deal

00:08:51.640 --> 00:08:55.800
with allowing outside applications
to request information about

00:08:55.800 --> 00:08:59.090
what devices are connected,
receive notification about

00:08:59.090 --> 00:09:05.760
what devices have been removed,
locate devices and match drivers

00:09:05.890 --> 00:09:07.800
to devices when they're connected.

00:09:07.850 --> 00:09:12.160
All that layer is not necessarily
available to all clients.

00:09:12.490 --> 00:09:14.660
We couldn't prevent you,
but we really-- drivers should

00:09:14.730 --> 00:09:17.700
talk to the USB services library,
applications, shims,

00:09:17.700 --> 00:09:22.050
control panels should talk to the
expert and the manager as appropriate.

00:09:22.280 --> 00:09:24.810
Above that,
you can have either a USB shim,

00:09:24.810 --> 00:09:28.450
which is a special type of code fragment,
it's a specific type

00:09:28.510 --> 00:09:31.780
of a library actually,
that gets loaded before the init

00:09:31.780 --> 00:09:35.090
parade and allows you to set things
up if you later on in your init

00:09:35.090 --> 00:09:37.200
parade need things to happen for you.

00:09:37.460 --> 00:09:40.880
We'll give you a good example of that.

00:09:41.300 --> 00:11:46.400
[Transcript missing]

00:11:46.570 --> 00:11:48.960
We also allow for people
who have registered,

00:11:48.960 --> 00:11:52.640
either in a shim or unit table driver,
to be notified when a

00:11:52.640 --> 00:11:54.490
device is connected.

00:11:54.750 --> 00:11:58.090
That's also the responsibility
of the USB manager and expert.

00:11:58.170 --> 00:12:01.290
They cooperate in terms
of locating drivers,

00:12:01.320 --> 00:12:03.800
installing the drivers,
and notifying people above them

00:12:03.800 --> 00:12:06.490
that there has been something
connected or disconnected.

00:12:07.250 --> 00:12:10.240
When you're writing a USB device driver,

00:12:10.520 --> 00:12:13.360
The things that you need to do,
pretty much always,

00:12:13.390 --> 00:12:16.970
are select the configuration of
the device if you need something

00:12:17.050 --> 00:12:19.540
different than the first configuration.

00:12:19.540 --> 00:12:23.890
Find the interface you care about,
if it's a vendor specific driver.

00:12:24.010 --> 00:12:28.090
Find the pipes or endpoints
within that device.

00:12:28.940 --> 00:12:31.230
And then accessing those pipes.

00:12:31.280 --> 00:12:32.830
That's the responsibility of the driver.

00:12:32.910 --> 00:12:37.950
We actually think of USB device
drivers predominantly as being...

00:12:38.130 --> 00:12:40.300
Just data transport layers.

00:12:40.410 --> 00:12:45.220
So you create this driver that then will
push or pull data up to a higher level,

00:12:45.220 --> 00:12:48.590
the shim or the unit table driver.

00:12:48.590 --> 00:12:48.590
When

00:12:49.070 --> 00:12:52.160
A device is connected,
and this is one of the little

00:12:52.160 --> 00:12:54.320
magical parts of how USB works.

00:12:54.320 --> 00:12:56.660
The part that actually detects it,
the hardware portion

00:12:56.660 --> 00:12:59.220
that actually detects it,
is in the hub.

00:12:59.220 --> 00:13:02.440
The hub itself is electrically
monitoring what devices are connected,

00:13:02.440 --> 00:13:05.700
or at least that a device is
connected is a better way to put it.

00:13:05.700 --> 00:13:08.590
And our hub driver will
receive notification that a

00:13:08.590 --> 00:13:09.950
new device has been attached.

00:13:09.970 --> 00:13:11.820
And when it does,
it goes out to that device,

00:13:11.920 --> 00:13:15.070
it enumerates the device,
it examines the device,

00:13:15.360 --> 00:13:18.820
and reports what kind of
device it is up to the manager.

00:13:18.820 --> 00:13:22.960
When the manager, sorry,
the expert detects this,

00:13:22.990 --> 00:13:29.000
it will then go off and locate an
appropriate driver and send notification.

00:13:29.000 --> 00:13:32.500
As that's happening, the device itself,
the driver itself,

00:13:32.500 --> 00:13:36.040
is actually called through its
validate hardware routine to verify

00:13:36.120 --> 00:13:38.310
that this actually is a good device.

00:13:38.320 --> 00:13:41.640
It then calls the initialization routine
and the driver starts functioning.

00:13:41.640 --> 00:13:43.660
As soon as the device
driver is initialized,

00:13:43.660 --> 00:13:46.940
that's when we send notification
to people who have requested it.

00:13:47.110 --> 00:13:49.620
I described previously that
the driver is a driver.

00:13:49.630 --> 00:13:55.140
That driver matching depends upon
looking in the driver itself.

00:13:55.200 --> 00:13:58.790
Now, in Mac OS 9,
we have a driver description structure.

00:13:58.790 --> 00:14:01.300
In Mac OS X, we have an XML bundle.

00:14:01.350 --> 00:14:04.670
In many ways, functionally,
they perform the same duties.

00:14:04.900 --> 00:14:08.290
That is, they describe what's
in the device driver,

00:14:08.290 --> 00:14:14.880
which devices it supports, vendor name,
sorry, vendor ID, product ID,

00:14:15.210 --> 00:14:18.610
In 9,
the expert uses that data to determine

00:14:18.720 --> 00:14:23.630
whether the driver is vendor specific
or if it's generic or standard classes.

00:14:23.720 --> 00:14:27.490
Now so far, Apple's been the only people
providing standard device

00:14:27.590 --> 00:14:29.030
drivers and we like it that way.

00:14:29.160 --> 00:14:31.030
We'd prefer that if
you're writing drivers,

00:14:31.030 --> 00:14:33.100
please only write
vendor specific drivers.

00:14:48.950 --> 00:14:48.950
And they take precedence over
Apple's standard drivers.

00:14:48.950 --> 00:14:48.950
So if you have a device
that's a standard class,

00:14:48.950 --> 00:14:48.950
but you really want to add your own
special features or functionality,

00:14:48.950 --> 00:14:48.950
you can do that.

00:14:48.950 --> 00:14:48.950
It will take priority over
Apple's standard drivers.

00:14:50.200 --> 00:14:52.100
So what's inside of a USB driver?

00:14:52.160 --> 00:14:55.820
Well, the driver description structure
obviously with all the information,

00:14:55.820 --> 00:14:58.920
product ID, vendor ID, class, subclass,
etc.

00:14:58.960 --> 00:15:03.660
A driver dispatch table which has
entry points in for validate hardware,

00:15:03.680 --> 00:15:06.950
device initialization,
interface initialization,

00:15:07.150 --> 00:15:11.280
a notification routine where we can
send you power management messages,

00:15:11.290 --> 00:15:11.740
etc.

00:15:11.770 --> 00:15:14.040
and a finalize routine.

00:15:14.100 --> 00:15:18.300
And it's very straightforward to
take a USB driver and add these

00:15:18.300 --> 00:15:22.080
functions in and get them to work
just by those five basic entry points.

00:15:22.150 --> 00:15:26.190
One change that we did
make back in Mac OS,

00:15:26.190 --> 00:15:30.950
I think I'll say 8.6,
was that we created with

00:15:30.950 --> 00:15:36.220
USB 1.2 the ability for you,
the developer, to put multiple drivers

00:15:37.180 --> 00:15:39.050
into a single file.

00:15:39.100 --> 00:15:42.300
And we parsed through that file
looking at all of the drivers

00:15:42.370 --> 00:15:44.080
and finding the best match.

00:15:44.100 --> 00:15:47.370
So no longer, starting with 8.6 anyway,
do you need to have

00:15:47.810 --> 00:15:49.030
multiple driver files.

00:15:49.180 --> 00:15:54.230
And we would prefer you use 8.6,
use this feature in 1.2,

00:15:54.230 --> 00:15:58.160
that's a better way of saying it,
use the feature in 1.2 to

00:15:58.540 --> 00:16:01.100
contain multiple drivers.

00:16:01.100 --> 00:16:04.100
Don't put multiple driver files
in the extensions folder anymore.

00:16:04.100 --> 00:16:10.930
And what we've been telling to people
in general is we really want you to...

00:16:11.090 --> 00:16:12.760
Focus on 8.6.

00:16:12.790 --> 00:16:16.680
If somebody has 8.5 or 8.5.1,
it's a free upgrade to 8.6.

00:16:16.680 --> 00:16:18.930
You can just go to the Apple website
and tell your customers,

00:16:18.930 --> 00:16:20.950
that's where your
customers can download it.

00:16:21.040 --> 00:16:28.690
That's what we want people to do,
is to have them upgrade if

00:16:28.690 --> 00:16:29.110
they're at 8.5 or 8.5.1 to 8.6,
to at least get to USB 1.2.

00:16:29.910 --> 00:16:31.460
Inside of the driver
description structure,

00:16:31.460 --> 00:16:33.560
there's a number of important tags.

00:16:33.560 --> 00:16:37.730
And as I said,
this matches the XML bundle description

00:16:37.730 --> 00:16:40.360
in that it has a vendor and product ID.

00:16:40.360 --> 00:16:43.400
It has a class, subclass,
and protocol for the device.

00:16:43.460 --> 00:16:46.120
It has a class, subclass,
and protocol for the interface.

00:16:46.120 --> 00:16:48.640
You can match either as an
interface driver or you can

00:16:48.640 --> 00:16:50.040
match as a device driver.

00:16:50.040 --> 00:16:52.640
And we have some driver loading options.

00:16:53.060 --> 00:16:56.080
These driver loading options
allow you to tag that this driver

00:16:56.080 --> 00:17:01.260
should only be loaded for a,
as a vendor-specific driver.

00:17:01.260 --> 00:17:03.580
It shouldn't be loaded as
a standard class driver.

00:17:03.580 --> 00:17:05.400
We ask that you set
that bit appropriately.

00:17:05.400 --> 00:17:08.760
And if, whether or not it should
load as an interface driver.

00:17:08.760 --> 00:17:11.720
And there's a tag in there also
that says must match protocol.

00:17:11.720 --> 00:17:15.320
So we provide some pretty powerful
means for you to clearly define which

00:17:15.320 --> 00:17:17.280
device your driver should load for.

00:17:19.200 --> 00:17:21.080
So how do you get started with Mac OS 9?

00:17:21.210 --> 00:17:25.300
Well, go get our USB DDK from the
Apple developer website,

00:17:25.300 --> 00:17:27.860
developer.apple.com.

00:17:27.900 --> 00:17:30.340
It's got an entry point
in there for hardware.

00:17:30.530 --> 00:17:34.000
You follow that to USB and we
have a nice Getting Started page

00:17:34.000 --> 00:17:35.660
for writing USB drivers.

00:17:35.720 --> 00:17:38.280
There's also a USB mailing list,
which is on that website,

00:17:38.280 --> 00:17:39.400
that you can join in.

00:17:39.460 --> 00:17:43.390
And that is a nice collaborative
environment where a lot of developers

00:17:43.390 --> 00:17:46.100
share experiences and discuss solutions.

00:17:46.160 --> 00:17:51.280
And both myself and the USB engineering
team watch that very closely to see

00:17:51.400 --> 00:17:54.980
if there's things we should jump
in with and help with where we can.

00:17:55.100 --> 00:17:59.210
And of course,
we want you to go to the USB website,

00:17:59.210 --> 00:18:03.480
www.usb.org,
and get those specifications.

00:18:03.600 --> 00:18:04.980
I've listed the websites here.

00:18:05.060 --> 00:18:08.100
I'll stay on this slide for a few
moments if you want to copy it down.

00:18:08.100 --> 00:18:12.360
So the exact web address
for USB developers is

00:18:12.390 --> 00:18:18.100
developer.apple.com/hardware/usb/devinfo.
htm.

00:18:18.100 --> 00:18:19.990
We want you to join the mailing list.

00:18:20.110 --> 00:18:22.660
We have a link there to a page
where you can find information

00:18:22.660 --> 00:18:24.090
on joining the mailing list.

00:18:24.220 --> 00:18:27.090
And our DDK is also available.

00:18:27.310 --> 00:18:30.080
Our DDK we've been very
aggressively releasing,

00:18:30.080 --> 00:18:33.160
and I believe we will do our best
to continue in the same way we've

00:18:33.280 --> 00:18:35.070
been doing for the last two years.

00:18:35.100 --> 00:18:38.100
We get that DDK out in
beta form early for you.

00:18:38.100 --> 00:18:39.910
So you can test your devices with it.

00:18:40.100 --> 00:18:43.860
The other corollary to that
is that as ADC members,

00:18:44.210 --> 00:18:47.410
we really want you to go to the
ADC seed site and get the other

00:18:47.410 --> 00:18:49.100
updates that are available for the OS.

00:18:49.100 --> 00:18:53.150
Whether they be multimedia
update if it's released,

00:18:53.200 --> 00:18:56.010
software updates for the OS, etc.

00:18:56.100 --> 00:19:01.470
Please watch very closely USB DDK and
watch very closely the Mac OS updates

00:19:01.470 --> 00:19:04.100
as they come on the ADC seed site.

00:19:05.330 --> 00:19:08.930
One of the reasons why that's
very important to us is we hate,

00:19:08.930 --> 00:19:13.460
with a passion, hearing after we've gone
GM with an OS update,

00:19:13.480 --> 00:19:17.740
that there's all kinds of new problems
that have been revealed with that update.

00:19:17.790 --> 00:19:22.030
We want you to report those problems
to us far in advance of us going GM.

00:19:22.030 --> 00:19:24.300
That's the only opportunity
we have to fix them.

00:19:24.300 --> 00:19:28.340
So please get the DEK,
please go to the ADC seed

00:19:28.710 --> 00:19:31.090
site and get the OS updates.

00:19:31.870 --> 00:19:35.140
So that concludes my
initial presentation,

00:19:35.190 --> 00:19:36.640
and I want to invite Rich Kubuda up here.

00:19:36.640 --> 00:19:41.630
One of the things, like I said,
we pulled the inside USB hardware

00:19:41.650 --> 00:19:45.270
section to talk to you about
the USB Software Locator.

00:19:45.280 --> 00:19:48.760
You might have seen the
announcements earlier this week.

00:19:48.760 --> 00:19:57.180
We have intentionally worked very
hard to be proactive and listen to

00:19:57.270 --> 00:19:59.710
your feedback on USB Software Locator.

00:20:00.320 --> 00:20:05.310
We did research,
and we found that the reason

00:20:05.400 --> 00:20:08.780
people weren't adopting
USB Software Locator was because only

00:20:08.870 --> 00:20:10.690
the Apple installer was supported.

00:20:10.700 --> 00:20:15.000
We took that feedback, we ran with it,
and I'm pleased to announce that

00:20:15.000 --> 00:20:19.230
we will be giving out at the end
of this session today beta CDs,

00:20:19.400 --> 00:20:24.160
beta copies of the Aladdin Installer
Maker for free for USB Software Locator.

00:20:24.220 --> 00:20:26.180
This is a special deal, in fact.

00:20:26.180 --> 00:20:29.660
It's a free, for USB devices only.

00:20:30.240 --> 00:20:33.580
It's a one-year license
to Installer Maker.

00:20:33.620 --> 00:20:36.940
The CD itself is the coupon.

00:20:36.940 --> 00:20:40.820
So if you get a free CD,
hold onto that CD.

00:20:40.820 --> 00:20:46.430
If you lose that CD, that's your coupon.

00:20:46.440 --> 00:20:48.550
You've got to have that
to get the free update.

00:20:48.560 --> 00:20:50.970
So with that, Rich,
do you want to come over and do your

00:20:50.970 --> 00:20:52.600
presentation on the -- thank you.

00:20:52.600 --> 00:20:55.190
Thank you.

00:20:59.200 --> 00:23:52.900
[Transcript missing]

00:23:53.160 --> 00:23:55.090
So what do we do to get started?

00:23:55.200 --> 00:23:56.760
The first thing I'll
tell you about this is,

00:23:56.760 --> 00:23:58.650
this is probably where you
will spend most of your time,

00:23:58.660 --> 00:24:01.060
because if any of you
have used Installer Maker,

00:24:01.100 --> 00:24:03.060
it's a very simple application to run.

00:24:03.230 --> 00:24:06.640
So first of all, I would recommend that
you get the USB Tech Note,

00:24:06.640 --> 00:24:08.100
the software locator Tech Note.

00:24:08.100 --> 00:24:12.000
It is available as part of the USB DDK.

00:24:12.170 --> 00:24:16.140
It's been there since the 1.3.5 release,
it's there in the 1.4.1 release,

00:24:16.140 --> 00:24:18.450
and it will give you the important
information about the process

00:24:18.450 --> 00:24:20.960
by which you register a package.

00:24:21.100 --> 00:24:25.840
The web address is located there,
but if you already have the DDK,

00:24:25.840 --> 00:24:29.100
you will have that
Tech Note as part of the DDK.

00:24:29.100 --> 00:24:33.460
You then need to get an Apple Connect ID,
and assuming that most of you have

00:24:33.460 --> 00:24:38.100
already registered with the ADR,
or Apple Developer Relations program,

00:24:38.100 --> 00:24:39.100
you have one.

00:24:39.100 --> 00:24:42.220
So that should be very easy,
but if you don't,

00:24:42.220 --> 00:24:47.100
there is a free online registration
process by which you can get an ID.

00:24:47.100 --> 00:24:49.100
You do not have to become
paid members to get this.

00:24:49.100 --> 00:24:54.890
We just need to be able to have a way
to track you entering into the database.

00:24:55.190 --> 00:24:59.100
The next part is that we need
to have you registered with DTS.

00:24:59.100 --> 00:25:03.130
You send a request to DTS asking
that you want to be registered

00:25:03.190 --> 00:25:05.090
for a specific vendor ID.

00:25:05.200 --> 00:25:08.400
Now at this time,
we do request that the representative

00:25:08.400 --> 00:25:13.100
of the company for the specific vendor
ID be the one to register that access.

00:25:13.100 --> 00:25:17.080
Next,
you create your Installer Maker document.

00:25:17.200 --> 00:25:21.100
So you search "Running Installer Maker".
You first want to download the package.

00:25:21.100 --> 00:25:25.100
You will be getting the package as
part of the CD at the end of this talk.

00:25:25.100 --> 00:25:29.100
You also have the option of
downloading it from their site.

00:25:29.100 --> 00:25:33.100
If you do have a shim as
part of your installation,

00:25:33.100 --> 00:25:37.100
we want you to create a
very simple text file.

00:25:37.210 --> 00:25:41.000
It is named "Installed.dat".
The purpose of that is that the code

00:25:41.010 --> 00:25:45.100
resource will look for that document
and look for the name of the shim so

00:25:45.100 --> 00:25:45.100
that we know what file to activate.

00:25:45.100 --> 00:25:47.100
So that we know what file to activate.

00:25:47.100 --> 00:25:51.100
You add an installer script
which is part of this package.

00:25:51.100 --> 00:25:53.100
And then you put everything in a folder.

00:25:53.100 --> 00:25:57.080
And with this copy,
you would create a disk copy image.

00:25:57.200 --> 00:26:03.100
You would then use Installer
Maker to encode the image into bin,

00:26:03.100 --> 00:26:05.100
Mac binary, or .hqx format.

00:26:05.100 --> 00:26:09.100
And then finally place
it on an HTTP server.

00:26:09.100 --> 00:26:11.060
Or you can also do it on an FTP server.

00:26:11.170 --> 00:26:15.100
We strongly recommend that you
place it onto a web server.

00:26:15.100 --> 00:26:17.100
Primarily because a lot of
people don't know how to use it.

00:26:17.100 --> 00:26:21.170
A lot of users may be behind firewalls
and may not have their system set for

00:26:21.350 --> 00:26:23.990
passive mode to access an FTP server.

00:26:24.110 --> 00:26:28.020
The next interesting part is
using the USB editor web page.

00:26:28.100 --> 00:26:31.520
At this point,
I will do a demo to show what the

00:26:31.520 --> 00:26:34.100
USB editor web page looks like.

00:26:34.160 --> 00:26:39.280
Primarily its purpose is to provide
information about the device

00:26:39.280 --> 00:26:41.100
ID that you are going to support.

00:26:41.100 --> 00:26:45.100
And then also to indicate where the
software package will be downloaded.

00:26:45.100 --> 00:26:47.100
And you can also use it to create a file.

00:26:47.100 --> 00:26:50.200
And you can also specify information
about what protocol it is,

00:26:50.200 --> 00:26:53.490
what version of USB is required,
and other particular pieces of

00:26:53.490 --> 00:26:58.250
information to provide back for
the system to check to see that the

00:26:58.310 --> 00:27:00.090
current requirements are present.

00:27:00.100 --> 00:27:04.090
So, the simple part of testing the update
is once you have done all this,

00:27:04.090 --> 00:27:06.100
plug the device in.

00:27:06.180 --> 00:27:08.100
Assuming you have system 904.

00:27:08.100 --> 00:27:11.100
But I forgot one important step.

00:27:11.100 --> 00:27:15.130
As part of the USB software
locator toolkit,

00:27:15.260 --> 00:27:20.110
which we provide in the DDK,
we need you first to set the

00:27:20.110 --> 00:27:24.100
software update so that it will
look at a production server.

00:27:24.100 --> 00:27:28.620
We have designed our software
update process so that there

00:27:28.790 --> 00:27:30.100
are two different servers.

00:27:30.100 --> 00:27:33.100
There is a production server,
which everybody in the world will see.

00:27:33.100 --> 00:27:37.100
And then we have a staging server that
is specially designed for test processes.

00:27:37.100 --> 00:27:39.500
By default,
the software update process is designed

00:27:39.500 --> 00:27:41.100
to look for the production server.

00:27:41.170 --> 00:27:42.990
So that is all the users with 904.

00:27:43.100 --> 00:27:45.100
But we want you to be able to test this
without having your users worry about it.

00:27:45.100 --> 00:27:46.090
So, we have a software update process.

00:27:46.100 --> 00:27:48.100
But we want you to be able to test this
without having your users worry about it.

00:27:48.220 --> 00:27:51.620
So, there is an option,
but it is not provided with the

00:27:51.620 --> 00:27:55.600
system to tell you a software
update to look at a staging server

00:27:55.600 --> 00:27:58.100
and not at the production server.

00:27:58.100 --> 00:28:02.100
So, with the software locator switch,
you can set this option.

00:28:02.100 --> 00:28:04.100
You would then connect your device.

00:28:04.100 --> 00:28:06.610
And if everything is set up,
you will get the two

00:28:06.610 --> 00:28:08.100
dialogues I mentioned.

00:28:08.100 --> 00:28:10.930
And then the download process will begin.

00:28:11.340 --> 00:28:15.100
You will momentarily see
a disk copy image mounted.

00:28:15.100 --> 00:28:18.800
And a second later,
it will indicate that the software

00:28:18.800 --> 00:28:21.100
package has been downloaded.

00:28:21.160 --> 00:28:27.100
And ideally, your software driver should
be active for your device.

00:28:29.620 --> 00:28:34.910
Now for a quick demo,
could I have demo two active?

00:28:34.910 --> 00:28:34.910
Thank you.

00:28:36.320 --> 00:28:38.700
So the web page I mentioned
takes you to this,

00:28:38.700 --> 00:28:47.780
and this is where you would
enter your account name.

00:28:47.780 --> 00:28:47.780
So here we have Rich Kubota.

00:28:48.000 --> 00:28:56.100
[Transcript missing]

00:28:57.700 --> 00:29:03.140
I happen to have demonstrated
an Anchorchips site right now.

00:29:03.140 --> 00:29:04.700
So I've gone in here.

00:29:04.700 --> 00:29:12.480
I've already, if this is the first time
you would add a device,

00:29:12.480 --> 00:29:12.480
I have already created a
device for a sample USB driver.

00:29:12.840 --> 00:29:17.850
You mentioned the name of the
driver or the device you're going

00:29:17.940 --> 00:29:19.930
to support in the name field.

00:29:20.060 --> 00:29:22.700
You specify the class of the device.

00:29:22.700 --> 00:29:26.100
Now, one thing I should mention,
when you registered,

00:29:26.100 --> 00:29:31.660
you mentioned a product ID, a vendor ID,
so we've already associated this

00:29:31.660 --> 00:29:34.330
vendor ID with the record here.

00:29:34.460 --> 00:29:37.960
So now at this point,
you're here to define your product.

00:29:37.960 --> 00:29:39.830
You specify the type of class.

00:29:39.990 --> 00:29:43.840
There's a pop-up to display the various
types of classes that we support.

00:29:43.960 --> 00:29:48.950
The subclass of the product,
and for vendor specific it would be 255.

00:29:49.190 --> 00:29:52.460
The product ID field,
and this will be in decimal,

00:29:52.460 --> 00:29:55.270
not in the hex which
USBProber would display.

00:29:55.710 --> 00:29:58.460
And the protocol field and your version.

00:29:58.660 --> 00:30:00.460
You would save this information.

00:30:00.460 --> 00:30:04.380
And once you save this information,
you can now add a software.

00:30:04.470 --> 00:30:07.460
You can now add a package for
that to support the device.

00:30:07.460 --> 00:30:09.460
I've already created one here.

00:30:09.460 --> 00:30:14.020
And here you specify where the
driver will be downloaded from,

00:30:14.180 --> 00:30:15.350
what size it is.

00:30:15.710 --> 00:30:19.450
But there's also an
important part of this entry,

00:30:19.460 --> 00:30:22.460
and that is the field that
says move to production.

00:30:22.510 --> 00:30:27.210
Once you have everything working,
you would set the pop-up to yes.

00:30:27.710 --> 00:30:32.580
And it will then, next time that we're
scanning for the updates,

00:30:32.580 --> 00:30:34.460
we will see that this is now set to yes.

00:30:34.530 --> 00:30:37.710
And we will move the information
to the production server and

00:30:37.710 --> 00:30:39.290
it will be live to your users.

00:30:39.460 --> 00:30:43.460
Indicate the name of the
product in the file name field.

00:30:43.460 --> 00:30:45.460
The size of the download.

00:30:45.460 --> 00:30:49.440
And destination folder
where you want it to go.

00:30:49.460 --> 00:30:53.640
In the current process,
it's going to go to a temporary

00:30:53.640 --> 00:30:58.170
folder off the desktop and it will be
trashed the next time you reboot it.

00:30:58.610 --> 00:31:02.410
The software is required
to use the device.

00:31:02.460 --> 00:31:07.460
You want... You do not require
a restart after installation.

00:31:07.460 --> 00:31:10.460
And then you can specify the language.

00:31:10.460 --> 00:31:14.410
And then in this download URL,
you would enter the name,

00:31:14.510 --> 00:31:17.420
what the address is to
access the software package.

00:31:17.500 --> 00:31:19.460
There's the product name.

00:31:19.460 --> 00:31:26.460
And then you can specify here that you
want to require USB 1.4.1 to be present.

00:31:26.460 --> 00:31:28.460
This can be important because
by setting this field,

00:31:28.460 --> 00:31:32.460
people with 9.0 systems will not
be able to have this download.

00:31:32.460 --> 00:31:36.820
have this software package
offered as a possibility.

00:31:37.810 --> 00:31:43.300
You specify the binhex file name,
and again this can be

00:31:43.320 --> 00:31:47.720
a Mac binary file name,
and the version number of this download.

00:31:47.800 --> 00:31:50.790
You would save this information.

00:31:53.800 --> 00:31:56.560
I'm not going to save it here,
and return back.

00:31:56.560 --> 00:31:59.790
And that's pretty much the
registration process right there.

00:31:59.870 --> 00:32:04.000
At this time,
I'd like to recognize a fellow member

00:32:04.000 --> 00:32:06.230
of the USB team in the Apple directory.

00:32:06.400 --> 00:32:08.800
He's simply listed as a
senior software engineer,

00:32:08.800 --> 00:32:16.880
but for all of us,
he is the architect for the Mac,

00:32:16.990 --> 00:32:17.670
for USB on Mac OS X, Rhoaads Hollowell.

00:32:22.210 --> 00:32:24.100
So Rich, I've got great news.

00:32:24.100 --> 00:32:27.320
So MindVision has just come to
us and said that they will be

00:32:27.320 --> 00:32:30.870
adding support for USB software
locator in a very short while.

00:32:31.120 --> 00:32:34.090
So not only will the
Apple installer work,

00:32:34.180 --> 00:32:37.100
Aladdin installer maker
and MindVision as well.

00:32:37.100 --> 00:32:43.150
So I'm very pleased to congratulate
MindVision for their participation.

00:32:43.150 --> 00:32:43.150
Thanks guys.

00:32:45.940 --> 00:32:51.490
I'm here to talk about where
we are in Mac OS X with USB.

00:32:51.500 --> 00:32:56.960
A lot of this is a review of
stuff that you've seen in the

00:32:56.960 --> 00:33:00.570
I/O Kit presentation or in the Firewire
presentation because it's very,

00:33:00.700 --> 00:33:02.150
very similar.

00:33:02.550 --> 00:33:05.910
Within Mac OS X,
this is sort of an overview.

00:33:05.920 --> 00:33:10.190
Drivers, USB drivers in Mac OS X will
be using I/O Kit and will

00:33:10.500 --> 00:33:16.650
be generally written in C++,
at least the USB classes that we provide

00:33:16.740 --> 00:33:19.220
in I/O Kit in Mac OS X are in C++.

00:33:19.400 --> 00:33:22.530
I'm going to talk a little bit
about the difference between kernel

00:33:22.530 --> 00:33:26.210
mode drivers and user mode drivers,
very similar to the FireWire drivers.

00:33:26.400 --> 00:33:30.030
I'm going to talk a little
bit about how Mac OS X does

00:33:30.030 --> 00:33:32.220
driver matching and loading.

00:33:32.740 --> 00:33:36.880
about the benefits of having
blocking I/O in Mac OS X,

00:33:36.900 --> 00:33:40.760
and a little bit about the
multi-threaded drivers.

00:33:42.520 --> 00:33:45.340
Comparing Mac OS 9 and Mac OS X.

00:33:45.340 --> 00:33:50.680
In Mac OS 9, the driver description is in
the code fragment of the driver,

00:33:50.810 --> 00:33:56.510
whereas in Mac OS X, it's part of the
XML bundle for the driver.

00:33:56.940 --> 00:34:01.360
Scheduling under Mac OS 9 is all done
asynchronously with callback routines.

00:34:01.440 --> 00:34:05.890
In Mac OS X,
you're not required to use asynchronous

00:34:06.670 --> 00:34:09.400
drivers because you can do blocking I/O.

00:34:09.710 --> 00:34:14.680
Programming in Mac OS 9, we pretty much,
all of our interfaces are C interfaces.

00:34:14.680 --> 00:34:19.840
In Mac OS X, we use embedded C++,
just like the rest of I/O Kit,

00:34:19.880 --> 00:34:24.440
and it's object-oriented programming
with all the benefits therein.

00:34:24.670 --> 00:34:30.440
The driver framework inside of
Mac OS 9 is specific to USB,

00:34:30.830 --> 00:34:34.620
whereas in Mac OS X we get
all of I/O Kit to work with.

00:34:34.890 --> 00:34:39.890
So for example,
whereas in Mac OS 9 the notification of

00:34:39.890 --> 00:34:45.500
the addition or removal of USB devices
is handled by the USB manager,

00:34:45.500 --> 00:34:48.370
in Mac OS X it's handled by I/O Kit.

00:34:48.500 --> 00:34:54.920
In I/O Kit, I/O Kit provides us with many
services that were in Mac OS 9 were

00:34:54.920 --> 00:35:02.930
provided by the USB system itself,
which frees up USB to be, well,

00:35:03.190 --> 00:35:04.280
much simpler.

00:35:04.500 --> 00:35:10.040
The XML bundle in the Mac OS X driver
contains the driver information necessary

00:35:10.040 --> 00:35:12.500
for I/O Kit to match and load a driver.

00:35:12.500 --> 00:35:17.310
And because we are written in C++,
it speeds the development time

00:35:17.700 --> 00:35:18.500
by allowing us to load a driver.

00:35:18.500 --> 00:35:22.480
So we can get the driver information
that we need to be able to load a driver.

00:35:22.500 --> 00:35:26.500
So we can get the driver information
that we need to be able to load a driver.

00:35:27.460 --> 00:35:31.000
So when you're developing
a USB driver in Mac OS X,

00:35:31.170 --> 00:35:36.030
similar to FireWire drivers,
you want to ask yourself, first of all,

00:35:36.040 --> 00:35:39.930
do I need to write a kernel mode
driver or a user mode driver?

00:35:39.990 --> 00:35:44.000
Does my driver live in kernel space
where resources are expensive,

00:35:44.050 --> 00:35:49.030
or in user space where
resources are relatively cheap?

00:35:49.180 --> 00:35:53.180
And to answer this question,
you need to ask four basic questions,

00:35:53.180 --> 00:35:54.570
very similar to FireWire.

00:35:54.580 --> 00:35:56.570
Is your driver used by the kernel?

00:35:56.580 --> 00:35:58.750
If so, it needs to be a kernel driver.

00:35:58.760 --> 00:36:02.940
Is your driver used by very
many of the tasks in the system?

00:36:02.940 --> 00:36:05.560
If so, it needs to be a kernel driver.

00:36:05.560 --> 00:36:09.480
Does your driver require
access to primary interrupts?

00:36:09.740 --> 00:36:12.120
If so, it should be a kernel driver.

00:36:12.120 --> 00:36:14.990
And do you need tight
synchronization between various

00:36:15.100 --> 00:36:17.080
tasks that your driver performs?

00:36:17.280 --> 00:36:20.580
And if so, you need a kernel driver.

00:36:20.900 --> 00:36:24.440
So some concrete examples of
drivers that would be kernel mode

00:36:24.440 --> 00:36:26.640
drivers versus user mode drivers.

00:36:26.750 --> 00:36:29.970
Keyboards and mice need to be
kernel drivers because they are

00:36:29.970 --> 00:36:35.140
used by just about every task,
every user visible task in the system.

00:36:35.190 --> 00:36:40.590
A mass storage driver would need to be
a kernel mode driver because the kernel

00:36:40.590 --> 00:36:44.320
would use the mass storage for storage.

00:36:44.370 --> 00:36:47.130
Whereas a scanner driver
would be a user mode driver,

00:36:47.130 --> 00:36:50.290
or a printer driver would
be a user mode driver.

00:36:50.450 --> 00:36:55.230
A CDR driver,
again we go back to the Firewire example,

00:36:55.290 --> 00:36:59.670
the CD part of it where you're just
looking at a CD in the device would

00:36:59.830 --> 00:37:06.300
tend to be a kernel mode driver,
whereas the part of the driver that

00:37:06.300 --> 00:37:13.590
actually wrote to the CDR device
would be a user mode driver.

00:37:14.930 --> 00:37:22.520
The USB stack inside of I/O Kit shares
in the rest of the I/O Kit stack in

00:37:22.610 --> 00:37:24.790
that you can perform blocking I/O.

00:37:24.800 --> 00:37:30.000
It's multi-threaded,
and so you can block from your driver,

00:37:30.000 --> 00:37:34.800
can block without blocking
the rest of the USB system.

00:37:34.800 --> 00:37:38.370
This simplifies driver designs
by not making a requirement

00:37:38.490 --> 00:37:41.800
that you have all kinds of
callback routines in your driver,

00:37:42.010 --> 00:37:46.280
but callback routines are
available if you need them.

00:37:47.550 --> 00:37:51.840
Part of an I/O Kit driver,
and therefore a USB driver,

00:37:51.840 --> 00:37:54.500
is an XML driver description.

00:37:54.620 --> 00:37:59.640
This is a file that is originally
edited with text that contains

00:37:59.650 --> 00:38:06.770
all the information that
otherwise appears in Mac OS 9.

00:38:06.770 --> 00:38:12.890
It appears in the driver description
table and contains information

00:38:12.890 --> 00:38:18.680
such as product and vendor IDs,
class, subclass, protocol of the device,

00:38:18.860 --> 00:38:23.820
and gives the information necessary
for I/O Kit to match a driver

00:38:23.820 --> 00:38:29.220
for a particular device or a
particular interface within a device.

00:38:31.770 --> 00:38:35.540
The way driver loading works
in Mac OS X is the following:

00:38:35.610 --> 00:38:42.040
There is a hub driver attached that
is driving every hub in the system,

00:38:42.040 --> 00:38:45.200
including the root hubs.

00:38:45.440 --> 00:38:49.690
And this hub driver can detect when
a device is attached to the USB bus

00:38:49.780 --> 00:38:53.130
and it enumerates the device.

00:38:53.340 --> 00:38:58.220
It tells the controller to create
an I/O USB device object for

00:38:58.220 --> 00:39:01.790
that device and then it registers
that object with I/O Kit,

00:39:02.070 --> 00:39:08.300
causing that I/O USB device object to
become what is called in I/O Kit a nub.

00:39:08.640 --> 00:39:12.570
That nub is now looked,
we look through the system,

00:39:12.570 --> 00:39:16.510
all of the XML files basically
that are in the system and

00:39:16.510 --> 00:39:21.290
I/O Kit finds the appropriate
driver to load against that nub.

00:39:21.450 --> 00:39:26.270
It loads it, attaches it to the nub,
initializes the driver,

00:39:26.600 --> 00:39:30.200
updates the I/O registry so that this
nub now appears in the I/O registry

00:39:30.350 --> 00:39:38.220
and then the driver starts running and
can load other objects as necessary.

00:39:40.130 --> 00:39:45.050
So here's a picture of what
Mac OS kernel drivers would look like.

00:39:45.280 --> 00:39:51.980
At the bottom level we have the
USB nub for the USB controller itself,

00:39:52.040 --> 00:39:54.000
which is a PCI device.

00:39:54.030 --> 00:39:59.000
We have the PCI driver for that kernel,
which we call Apple OHCI.

00:39:59.000 --> 00:40:01.200
We have a couple of USB devices.

00:40:01.300 --> 00:40:06.600
On top of those devices we have drivers,
and because they're kernel drivers,

00:40:06.600 --> 00:40:10.140
they both,
they live below the kernel boundary.

00:40:10.240 --> 00:40:15.550
And there are other operating system
objects that might be attached to

00:40:15.550 --> 00:40:20.500
those drivers to provide service
across the kernel boundary up to

00:40:20.500 --> 00:40:23.320
the application or the user layer.

00:40:24.880 --> 00:40:28.440
A user mode driver looks
very similar for a while.

00:40:28.500 --> 00:40:34.400
You have the USB knob to which the
USB controller object driver is attached.

00:40:34.490 --> 00:40:37.630
You have a USB device,
and then the driver for that device

00:40:37.630 --> 00:40:41.800
is actually a user mode driver that
lives above the kernel boundary.

00:40:41.800 --> 00:40:45.590
For example, a scanner driver.

00:40:47.740 --> 00:40:49.360
So where does USB live?

00:40:49.500 --> 00:40:52.040
Those of you who've been to the
I/O Kit presentation or the FireWire

00:40:52.040 --> 00:40:54.890
presentation recognize this slide.

00:40:55.160 --> 00:41:03.540
The USB drivers,
the USB stack lives with I/O Kit in the

00:41:03.910 --> 00:41:08.010
In the kernel, next to the Mach kernel,
and as William said,

00:41:08.460 --> 00:41:13.130
there's a dotted line which sort of
indicates that it may be possible that

00:41:13.130 --> 00:41:18.170
a USB driver would not actually have
to use the file system or networking

00:41:18.170 --> 00:41:23.790
or the BSD kernel in order to talk to
the layers above the kernel boundary.

00:41:25.270 --> 00:41:28.520
So now if you're like me,
and I know that I am,

00:41:28.580 --> 00:41:33.250
there is a more concrete
example for how we match and

00:41:33.250 --> 00:41:36.460
load a driver would be useful.

00:41:36.820 --> 00:41:40.360
So we're going to start here
and I'm going to talk about

00:41:40.360 --> 00:41:44.860
human interface devices,
specifically mice and keyboards,

00:41:44.920 --> 00:41:49.690
because those are drivers that the source
for these two drivers is in Darwin.

00:41:49.690 --> 00:41:55.700
So you can actually look at Darwin and
follow along with what I'm saying here.

00:41:55.750 --> 00:42:01.690
So the bottom layer we have the
driver for the USB controller.

00:42:01.690 --> 00:42:05.310
The name of this class
that this object is,

00:42:05.310 --> 00:42:10.660
is Apple OHCI, and it's a subclass of the
I/O USB controller class.

00:42:10.700 --> 00:42:14.930
Once this object comes, it loads a root,
it instantiates a root hub,

00:42:15.020 --> 00:42:19.040
loads the root hub driver,
and that root hub driver then tells

00:42:19.040 --> 00:42:23.680
the controller to go out onto the
bus and find all the USB devices.

00:42:23.700 --> 00:42:25.700
So it goes out into the bus.

00:42:25.700 --> 00:42:33.670
It goes out and it finds a I/O USB,
it finds two USB devices, in this case,

00:42:33.690 --> 00:42:36.700
and instantiates what are called nubs.

00:42:36.700 --> 00:42:39.700
These are I/O USB device nubs.

00:42:39.760 --> 00:42:42.750
One of them will end up having
a name in the I/O registry of,

00:42:42.750 --> 00:42:48.450
in this case, M4848, which is the old
original Apple USB mouse,

00:42:48.690 --> 00:42:53.690
or M2452,
which is the original Apple USB keyboard.

00:42:53.700 --> 00:42:55.700
So these are not drivers.

00:42:55.700 --> 00:42:59.860
These are nubs that represent the device,
and they contain inside of their

00:42:59.870 --> 00:43:02.700
objects information about the device.

00:43:02.710 --> 00:43:06.700
The I/O Kit then tries to load
drivers for these devices,

00:43:06.700 --> 00:43:10.780
and as they are both composite devices,
the driver that gets loaded

00:43:10.790 --> 00:43:13.400
is the Apple composite driver.

00:43:13.770 --> 00:43:16.190
Each one of them gets a
separate instantiation of

00:43:16.190 --> 00:43:17.920
the Apple composite driver.

00:43:18.100 --> 00:43:22.160
The Apple composite driver then
goes out and sets and chooses

00:43:22.160 --> 00:43:25.720
a configuration in the device,
and in this case it always

00:43:25.720 --> 00:43:27.640
chooses the first configuration.

00:43:27.750 --> 00:43:32.510
And then it asks for the interfaces
that are part of that configuration.

00:43:32.680 --> 00:43:34.440
These interfaces then appear.

00:43:34.500 --> 00:43:39.530
These are nubs that the,
that are attached to the device.

00:43:39.600 --> 00:43:43.250
They contain information about the class,
subclass,

00:43:43.440 --> 00:43:46.240
protocol and so forth of the interface.

00:43:46.240 --> 00:43:48.770
And then are published to I/O Kit.

00:43:49.010 --> 00:43:53.940
I/O Kit then goes out and says, okay,
now I need drivers for these two devices.

00:43:53.940 --> 00:43:56.660
Well, for the mouse,
the driver that gets loaded

00:43:56.660 --> 00:43:58.290
is the Apple mouse driver.

00:43:58.290 --> 00:44:00.750
For the keyboard,
the driver that gets loaded

00:44:00.750 --> 00:44:02.520
is the Apple keyboard driver.

00:44:02.600 --> 00:44:06.720
The Apple mouse driver is a subclass
of the I/O HI pointing class,

00:44:06.720 --> 00:44:10.300
which in turn is a subclass
of the I/O HI device class.

00:44:10.300 --> 00:44:14.860
The keyboard, similarly,
is a subclass of I/O HI keyboard,

00:44:15.130 --> 00:44:17.250
which is a subclass of I/O HI device.

00:44:18.840 --> 00:44:22.460
So at this point we now have
a driver that knows how to

00:44:22.510 --> 00:44:27.690
get information from that,
through that interface from that device.

00:44:27.700 --> 00:44:30.660
So what is it going to
do with that information?

00:44:30.700 --> 00:44:35.810
Well within Mac OS X,
there is in this particular case,

00:44:35.810 --> 00:44:38.970
an object that was instantiated
long before this occurred,

00:44:38.970 --> 00:44:41.700
called the IOHID system.

00:44:41.700 --> 00:44:46.500
And the IOHID system tells itself,
tells the system,

00:44:46.500 --> 00:44:51.050
tells I/O Kit when it is instantiated,
that it wants to know about

00:44:51.050 --> 00:44:57.560
any device that appears that
is a subclass of IOHI device.

00:44:57.700 --> 00:45:01.090
So both of these are,
it is notified about both of them,

00:45:01.100 --> 00:45:03.700
and it attaches itself to both of them.

00:45:03.700 --> 00:45:08.700
The IOHID system has as part
of it the IOHID user client,

00:45:08.790 --> 00:45:11.700
which is the part that allows it to
pass information on to the IOHID user.

00:45:11.700 --> 00:45:13.830
So it has information
across the kernel boundary,

00:45:13.920 --> 00:45:17.700
and its client across the kernel
boundary is the window manager.

00:45:17.700 --> 00:45:22.480
So in this, so, so,
because the mouse complies

00:45:22.570 --> 00:45:25.800
to an IOHI device,
or is a subclass of IOHI device,

00:45:25.800 --> 00:45:27.700
and the keyboard is a
subclass of IOHI device,

00:45:27.730 --> 00:45:30.700
they automatically get
attached to the IOHID system,

00:45:30.700 --> 00:45:33.700
or in fact the IOHID system
gets attached to them,

00:45:33.700 --> 00:45:39.700
and we get information passed up to the
system without any other effort on the,

00:45:39.700 --> 00:45:41.690
on the part of the driver writer.

00:45:41.700 --> 00:45:42.840
Thank you.

00:45:45.580 --> 00:45:48.970
So I want to talk a little bit
about the various classes that

00:45:48.970 --> 00:45:52.100
make up the USB family in Mac OS X.

00:45:52.130 --> 00:45:56.400
The I/O USB controller class
is the heart of the USB family,

00:45:56.400 --> 00:45:59.980
and it is through this class
that the data transfer occurs

00:46:00.640 --> 00:46:02.500
to the actual hardware.

00:46:02.500 --> 00:46:07.000
This is what we would
call the WIM in Mac OS 9.

00:46:07.320 --> 00:46:14.840
The Apple OHCI driver is a particular
instantiation of this class that

00:46:14.840 --> 00:46:21.100
accesses the USB host controller driver
inside of every Mac that we have today.

00:46:24.030 --> 00:46:29.470
The I/O USB device class is a
class that gets instantiated

00:46:29.470 --> 00:46:32.610
once per device on the USB bus.

00:46:32.610 --> 00:46:36.270
And this class is responsible
for maintaining the node ID.

00:46:36.440 --> 00:46:40.010
It is matched by I/O Kit based
on USB vendor ID,

00:46:40.120 --> 00:46:41.770
product ID, and so forth.

00:46:42.180 --> 00:46:51.160
And its main job is to publish
nubs of class I/O USB interface.

00:46:51.460 --> 00:46:54.000
The IOU SB interface class.

00:46:54.050 --> 00:46:58.120
There is one of these instantiated
per interface on a particular

00:46:58.120 --> 00:47:01.380
configuration per device.

00:47:01.730 --> 00:47:06.430
and this class instantiates
and distributes to the drivers

00:47:07.090 --> 00:47:11.190
objects of type I/O/USB pipe.

00:47:12.520 --> 00:47:20.480
The IOUSB pipe class is the object that
the drivers will use to actually read

00:47:20.480 --> 00:47:25.510
and write data to and from the USB bus.

00:47:25.510 --> 00:47:28.070
There's one pipe, there's one pipe,

00:47:28.440 --> 00:47:36.240
There's one of these objects
per pipe on each interface.

00:47:36.240 --> 00:47:39.660
And this object provides the
methods for data transfer.

00:47:39.660 --> 00:47:48.710
So a driver will be attached to an
IOUSB interface nub and will ask that

00:47:48.710 --> 00:47:48.710
interface nub to give it the pipes.

00:47:49.460 --> 00:47:52.590
In our example that
I showed a minute ago,

00:47:52.590 --> 00:47:57.220
if the device is an I/O HI device,
currently in DP4,

00:47:57.380 --> 00:48:03.010
if that device is either
HI pointing or HI keyboard,

00:48:03.210 --> 00:48:06.400
then the HID system will
automatically attach to it,

00:48:06.400 --> 00:48:12.800
and there is an API that the HID system
uses to pass keyboard and mouse data

00:48:12.800 --> 00:48:18.100
up to the user space of Mac OS X.

00:48:18.320 --> 00:48:21.200
So I want to switch to demo one.

00:48:25.160 --> 00:48:28.300
And what we have here
is a system running DP4,

00:48:28.300 --> 00:48:33.670
and I wanted to show the, the, the,
the the HID stack that I was

00:48:33.670 --> 00:48:39.720
talking about using a tool that's
in DP4 called IO Registry Explorer.

00:48:39.720 --> 00:48:43.750
So with this tool, you'll see here that
we have the Apple OHCI,

00:48:43.790 --> 00:48:48.030
that is the,
the object in IO Registry Explorer,

00:48:48.030 --> 00:48:52.880
that is the driver for
the USB controller chip.

00:48:52.880 --> 00:48:56.070
And it has,
and this is the IO Service Plane,

00:48:56.110 --> 00:48:59.540
and it has four devices attached to it.

00:48:59.540 --> 00:49:03.500
It has the root hub,
it has a hub inside the keyboard,

00:49:03.500 --> 00:49:08.040
it has the keyboard,
which on my slide was M2452 or,

00:49:08.040 --> 00:49:09.480
and it has the mouse.

00:49:09.480 --> 00:49:11.860
So we will look at the mouse.

00:49:11.860 --> 00:49:16.440
The Apple USB mouse, this is, this is,
the class of this

00:49:16.440 --> 00:49:22.570
object is IO USB Device,
but its name is USB Apple Mouse.

00:49:23.000 --> 00:49:25.110
This is a nub.

00:49:25.700 --> 00:49:27.400
A driver was loaded against this nub.

00:49:27.400 --> 00:49:31.090
In this case, the name of the driver
was Apple Composite.

00:49:32.170 --> 00:49:39.260
The Apple composite driver told the
USB mouse to publish an interface.

00:49:39.460 --> 00:49:41.060
There's the interface.

00:49:41.120 --> 00:49:44.900
This interface was then published and
I/O Kit matched the driver against it.

00:49:44.960 --> 00:49:47.990
The name of the driver that was
matched against it is Apple Mouse.

00:49:48.000 --> 00:49:51.810
This Apple Mouse,
the class name is Apple Mouse.

00:49:52.240 --> 00:49:57.300
The subclass is I/O HI Pointing,
and that in turn is a

00:49:57.300 --> 00:49:59.470
subclass of I/O HI Device.

00:49:59.940 --> 00:50:03.110
So because it's an I/O HI Device,
we have the HID system that

00:50:03.420 --> 00:50:07.200
was automatically notified and
matched against the Apple Mouse.

00:50:07.200 --> 00:50:13.010
And the HID user client is then
used to pass the mouse information

00:50:13.010 --> 00:50:15.300
up to the window manager.

00:50:16.090 --> 00:50:17.380
And I think that's it for the demo.

00:50:17.880 --> 00:50:22.520
So we'll go back to the slides.

00:50:23.370 --> 00:50:25.690
That's it for me,
so I guess Craig comes back up.

00:50:25.730 --> 00:50:26.720
Thank you.

00:50:26.740 --> 00:50:28.020
Thanks, Rhoaads.

00:50:29.570 --> 00:50:34.450
So let's compare the differences
between Mac OS 9 and Mac OS X.

00:50:34.520 --> 00:50:36.920
Really not that dramatic.

00:50:37.510 --> 00:50:39.270
The APIs are essentially the same.

00:50:39.470 --> 00:50:42.720
I'm not going to claim that
the names are identical,

00:50:42.720 --> 00:50:48.140
but the basic functionality is you have
the ability to read and write on pipes.

00:50:48.140 --> 00:50:52.400
You have the ability to locate
those pipes in the interface.

00:50:52.400 --> 00:50:57.400
You can use, if you need to,
callback routines.

00:50:57.510 --> 00:51:00.920
So in many ways,
the mechanisms that you use in 9 would

00:51:00.920 --> 00:51:06.400
be the same mechanisms for communicating
with a device that you will use in 10.

00:51:06.610 --> 00:51:09.550
The driver description
mechanism of vendor ID,

00:51:09.550 --> 00:51:14.510
product ID, class, subclass protocol,
we follow the rules in

00:51:14.510 --> 00:51:19.950
the USB specification for
matching those devices.

00:51:21.870 --> 00:51:23.200
So what's in DP4?

00:51:23.210 --> 00:51:26.920
Well, as Rhoaads pointed out,
we have the keyboard and mouse.

00:51:26.920 --> 00:51:28.770
We also have USB printing
to PostScript printers.

00:51:28.790 --> 00:51:32.590
So we certainly are
going to do more later.

00:51:32.800 --> 00:51:37.330
One thing I do want to mention
though is that we're fine tuning

00:51:37.520 --> 00:51:42.790
the USB driver and object names and
expect them to change after DP4.

00:51:42.790 --> 00:51:46.370
We haven't finalized those names yet.

00:51:47.100 --> 00:51:48.760
So what's going to be in the public beta?

00:51:48.830 --> 00:51:54.000
Well, what's in DP4 plus some
basic USB mass storage.

00:51:54.000 --> 00:51:56.490
That's expected,
that's what we're planning

00:51:56.660 --> 00:52:01.000
on doing for public beta,
is to add basic USB mass storage,

00:52:01.000 --> 00:52:03.720
and that basically means
things like Zuper disks,

00:52:03.720 --> 00:52:04.890
ZIP drives, etc.

00:52:04.960 --> 00:52:07.000
Very basic USB mass storage.

00:52:07.000 --> 00:52:12.450
So beyond Mac OS X public beta,
we're going to add much of the same

00:52:12.450 --> 00:52:15.930
functionality we have in 9 to 10.

00:52:15.990 --> 00:52:18.950
So HID devices,
hopefully you've seen some of

00:52:18.950 --> 00:52:21.860
the HID Manager presentation
that talked about what we're

00:52:21.860 --> 00:52:23.000
going to be doing in Mac OS X.

00:52:23.000 --> 00:52:28.980
We will have the support in the
HID Manager for USB HID devices.

00:52:29.000 --> 00:52:34.940
So right now, as an example,
you can use the HID parser in Mac OS,

00:52:35.030 --> 00:52:39.000
the HID support library,
in Mac OS 9 to do this.

00:52:39.000 --> 00:52:42.470
The same functionality
would be achievable with

00:52:42.470 --> 00:52:46.990
the HID Manager in Mac OS X,
where you can control USB-enabled UPSs,

00:52:46.990 --> 00:52:49.000
USB-enabled displays.

00:52:49.000 --> 00:52:51.260
If you have a HID interface
in a USB display,

00:52:51.260 --> 00:52:54.770
you would be able to write a display
control panel that would use that

00:52:54.770 --> 00:52:56.970
HID interface to control the display.

00:52:57.070 --> 00:53:00.870
Gaming devices,
all the HID USB devices I've

00:53:01.030 --> 00:53:06.000
seen comply with the standard
with very rare exception,

00:53:06.050 --> 00:53:06.990
and you'll be able to use that
HID interface to control the display.

00:53:07.000 --> 00:53:11.410
use the HID manager in
Mac OS X to use that.

00:53:11.930 --> 00:53:15.850
Tablets and graphical other
pointing devices will also be

00:53:16.380 --> 00:53:18.770
accessible through the HID Manager.

00:53:18.780 --> 00:53:22.800
We're still going to have
USB printing to PostScript printers.

00:53:22.800 --> 00:53:25.720
We're going to have more
USB mass storage devices.

00:53:25.760 --> 00:53:32.880
I'm not really able to predict
exactly which ones will be just yet,

00:53:32.880 --> 00:53:34.710
but we're certainly
going to add a lot more.

00:53:34.710 --> 00:53:34.710
And we'll also support USB audio.

00:53:35.760 --> 00:53:39.780
Oh, and one last thing, that modem,
that V.90, V.25, TUR,

00:53:39.780 --> 00:53:43.590
Hayes compatible modem will
also be supported sometime

00:53:43.590 --> 00:53:46.700
after Mac OS X public beta.

00:53:46.700 --> 00:53:51.180
So what do I want you to
take away from here today?

00:53:51.290 --> 00:53:56.490
As far as Mac OS X goes,
we believe that C++, embedded C++,

00:53:56.710 --> 00:53:59.600
and I/O Kit is a great
way of writing drivers.

00:53:59.870 --> 00:54:02.980
All of our drivers use I/O Kit.

00:54:03.070 --> 00:54:04.300
We find it very powerful.

00:54:04.300 --> 00:54:08.450
If you listen to Dean Rees talk
in the I/O Kit presentation,

00:54:08.450 --> 00:54:13.850
they came up with the architecture,
and as they started writing drivers,

00:54:13.850 --> 00:54:17.560
they became more and more pleased
with the object inheritance and

00:54:17.560 --> 00:54:17.560
the ability to do blocking I/O.

00:54:18.430 --> 00:54:22.550
We also updated, as you might expect,
as you've seen on these slides,

00:54:22.630 --> 00:54:24.390
we now have a Mach kernel.

00:54:24.490 --> 00:54:29.000
We have a BSD kernel that allows
for really great driver writing.

00:54:29.000 --> 00:54:32.500
We're blocking I/O and multi-threading,
etc.

00:54:32.820 --> 00:54:36.440
And I can't tell you that you'll be
able to just take your USB drivers

00:54:36.450 --> 00:54:40.590
from 9 and directly take the
sources over into 10 and go forward,

00:54:40.970 --> 00:54:45.300
but based on your understanding
of how your Mac OS 9 driver works,

00:54:45.400 --> 00:54:51.620
the same basic fundamental mechanisms of
communicating across pipes and pushing

00:54:51.620 --> 00:54:57.700
data up to higher level objects will
be very similar in 10 as it is in 9.

00:54:57.760 --> 00:54:59.690
So how do you get started with Mac OS X?

00:54:59.880 --> 00:55:01.700
Well, DP4.

00:55:01.700 --> 00:55:05.700
Go install it, go play with it,
go look at it, go investigate it.

00:55:06.230 --> 00:55:08.100
Look at the KDK.

00:55:08.100 --> 00:55:10.300
Go take a look at the KDK.

00:55:10.440 --> 00:55:13.100
It has some example
drivers in there today.

00:55:13.100 --> 00:55:17.100
Certainly we're working on
improving the documentation.

00:55:17.100 --> 00:55:20.440
But in the meantime,
please do the I/O Kit tutorials

00:55:20.440 --> 00:55:24.500
that come with the KDK and read
through the USB header files.

00:55:24.500 --> 00:55:29.200
That'll give you a very definite
direction of where we're

00:55:29.200 --> 00:55:29.200
going and what we're doing.

00:55:29.870 --> 00:55:31.610
So what do we recommend?

00:55:31.750 --> 00:55:35.080
Well,
I don't know how to put it on the slide,

00:55:35.090 --> 00:55:43.890
but I will certainly re-emphasize,
it's very key, please, for Mac OS 9,

00:55:43.890 --> 00:55:46.240
get the USB DDK.

00:55:46.800 --> 00:55:48.160
Try it.

00:55:48.230 --> 00:55:49.560
Go to the ADC seed site.

00:55:49.560 --> 00:55:52.660
Get the OS updates that we do.

00:55:52.780 --> 00:55:53.990
Try those.

00:55:54.130 --> 00:55:56.100
Give us feedback.

00:55:56.100 --> 00:55:58.560
We really want to know what you think.

00:55:58.560 --> 00:56:00.460
We really want to get feedback.

00:56:00.740 --> 00:56:04.610
File bugs using ADC's
online bug reporting system.

00:56:04.610 --> 00:56:08.700
Let us know before we go GM,
because we can't fix a

00:56:08.870 --> 00:56:11.540
GM release after we released it.

00:56:11.540 --> 00:56:13.100
Please try the DDK.

00:56:13.100 --> 00:56:16.250
Try the ADC seed site software releases.

00:56:16.250 --> 00:56:17.760
That's very key.

00:56:19.340 --> 00:56:23.430
So what you need to do to be
successful with USB is you

00:56:23.430 --> 00:56:28.740
absolutely need to be in compliance
with the USB class specifications.

00:56:28.740 --> 00:56:31.800
Go to www.usb.org.

00:56:31.820 --> 00:56:33.540
Get the class specifications.

00:56:33.540 --> 00:56:36.560
Read them, follow them,
implement your devices to them.

00:56:36.700 --> 00:56:38.890
Follow the standard classes.

00:56:39.070 --> 00:56:43.850
Follow the USB specification and device
enumeration and power consumption and

00:56:43.850 --> 00:56:46.560
all of the communication protocols.

00:56:46.570 --> 00:56:48.200
That's absolutely crucial.

00:56:48.200 --> 00:56:50.820
We follow those specs as best we can.

00:56:50.820 --> 00:56:52.260
You should too.

00:56:52.260 --> 00:56:55.360
At least if you do,
you'll tremendously improve your

00:56:55.360 --> 00:56:59.830
development time because you'll be
able to use the standard Apple drivers.

00:56:59.990 --> 00:57:03.240
If you look at those specifications
and you find that they don't

00:57:03.280 --> 00:57:06.320
meet your needs exactly then
there's a good thing you can do.

00:57:06.320 --> 00:57:09.000
Join the USBIF implementers forum.

00:57:09.000 --> 00:57:11.400
Go to the device working groups.

00:57:11.480 --> 00:57:13.200
Tell them what you want.

00:57:13.240 --> 00:57:15.190
Participate in the voting process.

00:57:15.200 --> 00:57:19.070
Don't just look at a class specification
and decide this is not for me,

00:57:19.070 --> 00:57:20.530
it doesn't do what I want.

00:57:20.540 --> 00:57:24.170
If you feel passionately about
getting some feature put into the

00:57:24.170 --> 00:57:27.800
class specification join the EIF,
get your vendor ID,

00:57:28.410 --> 00:57:31.360
go to the device working groups,
participate in that discussion

00:57:31.360 --> 00:57:32.480
and get your features added.

00:57:32.480 --> 00:57:38.230
I heard earlier today that for
example that the video imaging live

00:57:38.730 --> 00:57:42.410
video features of USB that that
spec is still being talked about.

00:57:42.420 --> 00:57:46.980
If you want to do a USB video
device please go join the USBIF,

00:57:47.050 --> 00:57:49.270
go to the device working groups,
give your feedback on what you

00:57:49.360 --> 00:57:50.960
think video devices should be.

00:57:50.960 --> 00:57:51.850
It's important.

00:57:51.860 --> 00:57:56.460
As far as business planning stuff goes,
tell this to your marketing people.

00:57:56.460 --> 00:57:58.340
License the Mac OS.

00:57:58.340 --> 00:58:00.370
Put it on your box.

00:58:00.540 --> 00:58:04.010
Make it clear and distinct that
this works for the Macintosh.

00:58:04.020 --> 00:58:06.450
Follow the guidelines for the logo usage.

00:58:06.480 --> 00:58:08.040
Put it on your marketing collateral.

00:58:08.040 --> 00:58:09.220
Put it on your advertising.

00:58:09.220 --> 00:58:10.850
Mention it in your press releases.

00:58:10.860 --> 00:58:11.730
Do that.

00:58:11.730 --> 00:58:14.640
That's the way that we communicate
to our customers that this

00:58:14.700 --> 00:58:15.990
product works for the Mac.

00:58:16.020 --> 00:58:19.050
If your marketing people come to you
and say here's the box design and

00:58:19.280 --> 00:58:22.100
it doesn't have the Mac OS logo and
prominently displayed on the front,

00:58:22.100 --> 00:58:26.870
tell them emphatically go
get the Mac OS logo license

00:58:27.010 --> 00:58:27.860
and we can help with that.

00:58:27.860 --> 00:58:28.280
The logo license.

00:58:28.280 --> 00:58:29.250
The license is free.

00:58:29.280 --> 00:58:32.220
There's recommendations on how
to use it in terms of sizing

00:58:32.220 --> 00:58:35.680
and placement but absolutely go
get the Mac OS logo and use it.

00:58:35.740 --> 00:58:38.900
Put your products in the
Macintosh products guide.

00:58:38.900 --> 00:58:41.200
As ADC members that's free.

00:58:41.520 --> 00:58:44.320
Well, it wouldn't be expensive.

00:58:44.430 --> 00:58:46.530
It wouldn't except you have
to become an ADC member.

00:58:46.580 --> 00:58:48.870
Go become an ADC member.

00:58:48.920 --> 00:58:51.090
Get your products listed
in the products guide.

00:58:51.140 --> 00:58:55.550
We take that products guide online
database and we periodically

00:58:55.730 --> 00:58:58.720
press CDs and give those
CDs out at MacWare to the world.

00:58:58.720 --> 00:59:01.920
If you want your customers,
your potential customers to

00:59:01.920 --> 00:59:04.490
know about your products,
get them in the products guide.

00:59:04.500 --> 00:59:09.700
You'll note that on our homepage now,
www.apple.com, in the very center there's

00:59:09.710 --> 00:59:11.860
a made for Mac click spot,
a button.

00:59:11.860 --> 00:59:15.190
That takes your customers to
the Macintosh products guide.

00:59:15.200 --> 00:59:17.460
If you want your products
seen by customers,

00:59:17.640 --> 00:59:19.340
get it in the Macintosh products guide.

00:59:20.720 --> 00:59:23.260
Support the USB software locator.

00:59:23.330 --> 00:59:24.800
We've listened really hard.

00:59:24.860 --> 00:59:28.040
We've worked really hard to
understand what the issues are.

00:59:28.130 --> 00:59:32.420
We've talked to developers whose devices
aren't in the software locator and asked

00:59:32.420 --> 00:59:34.720
them to tell us what the issues were.

00:59:34.830 --> 00:59:38.460
We took that feedback and
we aggressively got Aladdin,

00:59:38.770 --> 00:59:41.730
and I'm very pleased to say
again that MindVision has stepped

00:59:41.840 --> 00:59:45.480
up and they're going to do the
same thing for their installer.

00:59:45.570 --> 00:59:47.060
You don't have to use Apple's installer.

00:59:47.210 --> 00:59:48.890
That's the feedback we heard.

00:59:48.990 --> 00:59:52.040
You didn't like using the Apple installer
to use USB software locator.

00:59:52.040 --> 00:59:54.900
We've addressed that,
and you should now have no

00:59:55.160 --> 01:00:00.040
reason for your vendor-specific
devices to not have your software

01:00:00.040 --> 01:00:02.510
on the USB software locator.

01:00:04.270 --> 01:00:06.630
So how do you make a
device class compliant?

01:00:06.680 --> 01:00:08.380
I should have put this
slide a little earlier,

01:00:08.440 --> 01:00:09.660
but I'll do it now.

01:00:09.730 --> 01:00:11.590
Join the implementers forum.

01:00:11.650 --> 01:00:14.040
They assign USB vendor IDs.

01:00:14.040 --> 01:00:17.000
We have a number of products out there,
not ours,

01:00:17.000 --> 01:00:20.000
we see a number of products out there,
where

01:00:21.490 --> 01:00:26.000
the actual product or company name
on the device is different than the

01:00:26.050 --> 01:00:27.640
vendor ID that's in the device itself.

01:00:27.640 --> 01:00:31.360
So you'll see four companies,
entirely different devices,

01:00:31.360 --> 01:00:32.990
using the same vendor ID.

01:00:33.000 --> 01:00:36.840
Well, I tell you,
with the USB software locator,

01:00:36.840 --> 01:00:38.040
we have a little bit of a problem.

01:00:38.060 --> 01:00:41.100
We try to match up your
developer connection ID,

01:00:41.100 --> 01:00:43.150
connect ID, with the vendor ID.

01:00:43.160 --> 01:00:46.450
We don't want one developer
going in and messing around

01:00:46.450 --> 01:00:48.730
with another person's software.

01:00:49.410 --> 01:00:52.860
So please go join the USBi app,
get your own unique vendor ID,

01:00:52.950 --> 01:00:53.520
and use it.

01:00:53.550 --> 01:00:56.120
Don't create a device where you
buy a chip from somebody else

01:00:56.200 --> 01:00:58.620
and just use their vendor ID.

01:00:58.620 --> 01:00:59.790
Get your own vendor ID.

01:00:59.800 --> 01:01:03.580
The other thing that they do that you
should participate in is they have

01:01:03.580 --> 01:01:05.260
these periodic compliance workshops.

01:01:05.260 --> 01:01:08.000
I think three quarters out of
the year they're in Milpitas.

01:01:08.000 --> 01:01:10.570
The fourth quarter out of
the year they're in Taiwan.

01:01:10.580 --> 01:01:13.680
And these compliant workshops are
these great events where everybody

01:01:13.680 --> 01:01:16.350
walks around with their devices,
plugs them into the OS,

01:01:16.350 --> 01:01:20.130
whatever that OS is,
ours somebody-- some of our competitors,

01:01:20.130 --> 01:01:22.480
et cetera,
and verifies that they function.

01:01:22.480 --> 01:01:25.200
And it's great feedback for us.

01:01:25.320 --> 01:01:29.150
We try to go when we've got no conflicts
with our engineering schedules to meet

01:01:29.220 --> 01:01:32.280
with the developers and see what we
can do to help make our software better

01:01:32.280 --> 01:01:33.900
and help make their devices better.

01:01:33.900 --> 01:01:37.020
Participate in the
USB device working groups.

01:01:37.040 --> 01:01:40.920
If you feel passionately,
join that process.

01:01:40.940 --> 01:01:42.460
Make your voice heard.

01:01:42.460 --> 01:01:47.040
And as I've said a couple of times,
www.usb.org.