WEBVTT

00:00:10.980 --> 00:00:11.860
My name's David O'Rourke.

00:00:11.940 --> 00:00:15.670
I have the privilege today of presenting
the directory architecture that Apple's

00:00:15.700 --> 00:00:17.660
pursuing for its future development.

00:00:17.660 --> 00:00:19.540
A little later,
Michael Dasenbrock will join me

00:00:19.540 --> 00:00:23.500
on stage to talk about something
we didn't talk about last year.

00:00:24.360 --> 00:00:27.840
The presentation today is going to cover
what are the Directory Services APIs,

00:00:27.920 --> 00:00:30.640
why should you care, why does Apple care.

00:00:30.680 --> 00:00:34.530
We're going to go into how Apple's
using the Directory Services APIs.

00:00:34.800 --> 00:00:36.740
We're going to give an overview
of how to write a plug-in.

00:00:36.740 --> 00:00:39.410
This is one of the key aspects of
Directory Services APIs that we

00:00:39.410 --> 00:00:41.840
mostly hand-waved about last year.

00:00:41.950 --> 00:00:44.640
So this year we're going
to give you some details.

00:00:44.670 --> 00:00:49.700
And then we'll have a Q&A and answer
any questions that you may have.

00:00:50.520 --> 00:00:53.690
The concept of Directory APIs is
we've heard feedback for years

00:00:53.690 --> 00:00:58.410
from Apple that customers want to
take an Apple box out of the box,

00:00:58.410 --> 00:01:02.310
plop it down, and point it at an existing
users and groups database,

00:01:02.320 --> 00:01:05.910
and not have to import or export
their data from an existing database

00:01:05.910 --> 00:01:07.970
and maintain separate databases.

00:01:11.000 --> 00:01:14.190
So this concept fits in with
Apple's policy of simplifying,

00:01:14.190 --> 00:01:16.900
in that the users don't have
to set up a separate database.

00:01:16.900 --> 00:01:20.350
And so the concept:
just allow Apple services

00:01:20.350 --> 00:01:22.410
to use customer data.

00:01:23.030 --> 00:01:26.820
So Apple's Mac OS X system
software will be based on a

00:01:26.940 --> 00:01:29.060
common directory architecture API.

00:01:29.100 --> 00:01:32.900
This common directory architecture
will allow all Apple system software,

00:01:32.900 --> 00:01:36.350
the desktop and the server,
to access directory services

00:01:36.350 --> 00:01:38.770
via plug-in architecture.

00:01:40.080 --> 00:01:43.120
So the architecture is
relatively straightforward.

00:01:43.120 --> 00:01:46.200
We have a directory access
API layer that Apple provides.

00:01:46.200 --> 00:01:48.040
And we're providing
some plug-ins ourselves.

00:01:48.100 --> 00:01:51.070
This is important because we're
using our own plug-in architecture

00:01:51.130 --> 00:01:52.740
to deliver directory access.

00:01:52.740 --> 00:01:54.350
So we know this can be done.

00:01:54.370 --> 00:01:57.160
This is not something we're
doing special case and then

00:01:57.160 --> 00:01:58.860
telling you guys to do plug-ins.

00:01:58.860 --> 00:02:01.160
We are providing an
Apple NetInfo plug-in,

00:02:01.160 --> 00:02:03.580
which is Apple's directory
service of choice.

00:02:03.580 --> 00:02:05.840
We're also providing an LDAP plug-in.

00:02:05.840 --> 00:02:07.840
That's V2,
for those of you that want to know,

00:02:07.840 --> 00:02:09.540
we might do V3 in the future.

00:02:09.540 --> 00:02:12.080
And one of the developer opportunities,
as well as being on the top

00:02:12.180 --> 00:02:14.660
with the developer solution
on top of the directory APIs,

00:02:14.730 --> 00:02:17.880
is for developers to provide
plug-ins to other directories that

00:02:17.950 --> 00:02:19.800
Apple hasn't chosen to write for.

00:02:19.800 --> 00:02:21.860
That would include Novell.

00:02:21.860 --> 00:02:24.140
That would include LDAP V3.

00:02:24.140 --> 00:02:26.510
Any directory that you want,
possibly an Oracle database.

00:02:26.560 --> 00:02:31.310
Some corporations run a proprietary
database as their back end.

00:02:31.970 --> 00:02:34.780
The API runtime is
fairly straightforward.

00:02:34.950 --> 00:02:38.360
A Directory API client makes an API call.

00:02:38.580 --> 00:02:41.740
The APIs dispatch that as
a Mach IPC request down to

00:02:41.740 --> 00:02:43.780
the Directory Access API.

00:02:43.830 --> 00:02:46.080
The Directory Access API looks
at the request,

00:02:46.350 --> 00:02:49.090
determines what plug-in is best
suited to handle the request,

00:02:49.350 --> 00:02:50.630
dispatches it to the plug-in.

00:02:50.800 --> 00:02:52.800
The plug-in performs magic.

00:02:52.800 --> 00:02:54.780
It accesses a local file,
it goes out on the network.

00:02:54.790 --> 00:02:58.370
The plug-ins have full access
to the entire Mac OS X operating

00:02:58.370 --> 00:02:59.800
system at that point.

00:02:59.800 --> 00:03:04.800
They satisfy the reply, return status,
and return the results up to the client.

00:03:06.820 --> 00:03:10.500
The Directory Services Configuration is
another part of the Directory Services.

00:03:10.500 --> 00:03:13.800
Clearly, clients need a way to enable and
disable various directory plug-ins.

00:03:13.800 --> 00:03:16.780
So,
a la the extension manager for Mac OS 9,

00:03:17.000 --> 00:03:18.800
we're going to have a
Mac OS X preference,

00:03:18.800 --> 00:03:22.800
which will allow users to turn
Directory Services on and off.

00:03:22.970 --> 00:03:25.920
The other thing this will do is,
if you've written a plug-in,

00:03:25.970 --> 00:03:29.790
this will be the way customers will
access your custom configuration.

00:03:29.790 --> 00:03:32.950
We'll have a configure button or
some menu option or something like

00:03:33.050 --> 00:03:34.800
that that the users will click on.

00:03:34.800 --> 00:03:39.090
You'll turn control over to your
code to put up an HI or do whatever's

00:03:39.090 --> 00:03:40.710
necessary to configure your plug-in.

00:03:42.530 --> 00:03:46.150
The Directory Access APIs have been
included in Functionals since DP3.

00:03:46.170 --> 00:03:47.200
They are on DP4.

00:03:47.350 --> 00:03:51.140
They are in
/system/library/framework/directory

00:03:51.140 --> 00:03:52.200
service.

00:03:52.340 --> 00:03:55.920
The API manifests itself
in five public C headers:

00:03:56.060 --> 00:03:59.040
directoryservices.h,
directoryservicesconst.h,

00:03:59.040 --> 00:04:02.100
directoryservicescustom.h,
and you can read the rest.

00:04:02.100 --> 00:04:06.800
If you link with those header files,
you have access to the client APIs.

00:04:06.800 --> 00:04:09.800
The plugin API will be made
available as an SDK shortly,

00:04:09.800 --> 00:04:13.200
but also for anybody adopting the
directory APIs to do a plugin will

00:04:13.200 --> 00:04:14.790
certainly give you an early seed.

00:04:14.800 --> 00:04:17.800
The SDK just wasn't quite
ready at the time of DP4.

00:04:17.800 --> 00:04:20.830
But both the client and the
plugin API will be part of

00:04:20.830 --> 00:04:22.800
the final release of Mac OS X.

00:04:22.800 --> 00:04:27.420
So there will be no SDK or no
additional installation if you want to

00:04:27.420 --> 00:04:30.010
install a plugin on top of Mac OS X.

00:04:31.290 --> 00:04:35.190
The APIs offer full support for read,
write, and discovery of data

00:04:35.190 --> 00:04:36.800
in a directory service.

00:04:36.800 --> 00:04:39.480
Read, for example,
would be find me a record

00:04:39.590 --> 00:04:41.210
named David of type user.

00:04:41.350 --> 00:04:43.660
Write would be update
David's phone number.

00:04:43.770 --> 00:04:47.510
Discovery would be list all the
records present in this directory.

00:04:47.770 --> 00:04:51.250
The API also offers the ability to
publish custom authentication methods.

00:04:51.310 --> 00:04:53.650
We have defined some standard
authentication methods,

00:04:53.720 --> 00:04:57.640
but you can extend the API and offer
new and never before implemented

00:04:57.640 --> 00:04:58.900
authentication mechanisms.

00:04:58.930 --> 00:05:03.300
And this also allows clients to discover
these authentication mechanisms.

00:05:03.360 --> 00:05:05.000
That's the next bullet.

00:05:05.100 --> 00:05:07.970
The API allows capabilities
for discovering of what the

00:05:07.970 --> 00:05:09.930
directory plug-ins are offering.

00:05:10.070 --> 00:05:13.240
The directory APIs are standard
C API and available from BSD,

00:05:13.240 --> 00:05:15.000
Carbon, and Cocoa on Mac OS X.

00:05:15.000 --> 00:05:19.400
So really,
we're running more to Core OS level.

00:05:19.400 --> 00:05:21.830
We're not Carbon, we're not Cocoa,
we're more down near

00:05:21.830 --> 00:05:24.200
the file system layer,
the networking API layer.

00:05:24.200 --> 00:05:26.290
So there's really no runtime issues.

00:05:26.310 --> 00:05:28.600
And you should be able to access
these APIs from pretty much anywhere.

00:05:28.660 --> 00:05:31.610
any runtime environment on top of 10.

00:05:32.730 --> 00:05:34.560
The API presents an abstraction model.

00:05:34.560 --> 00:05:38.290
The first and most important part
of the abstraction model is nodes.

00:05:38.300 --> 00:05:41.160
I thought of nodes two years
ago when we were beginning the

00:05:41.160 --> 00:05:42.310
early design of this product.

00:05:42.620 --> 00:05:44.760
Probably a better name
would have been scope.

00:05:44.940 --> 00:05:47.980
But really this allows a plug-in
to restrict its damage or

00:05:48.000 --> 00:05:49.960
how much data it's accessing.

00:05:49.960 --> 00:05:53.890
The nodes are published by the
plug-ins and the directory service

00:05:53.980 --> 00:05:56.240
represents a collection of plug-ins.

00:05:56.260 --> 00:06:01.060
Plug-ins can register zero or more nodes.

00:06:01.060 --> 00:06:04.760
It's even up to the plug-ins as to
what the semantics of the nodes are.

00:06:04.760 --> 00:06:08.190
The nodes are one-to-one mapping to
the foreign system or if one node

00:06:08.190 --> 00:06:12.060
represents an entire directory which is
actually hierarchical on the back end.

00:06:12.060 --> 00:06:14.760
It's up to the plug-in to
interpret the scope of the nodes.

00:06:14.760 --> 00:06:16.690
Nodes contain records.

00:06:16.860 --> 00:06:18.730
Records reside in a directory node.

00:06:18.820 --> 00:06:22.390
They consist of at least one name and
at least there is a keyword because

00:06:22.420 --> 00:06:24.260
records can have multiple names.

00:06:24.260 --> 00:06:25.180
I'm known as David O'Rourke.

00:06:25.270 --> 00:06:26.160
I'm known as Dave O.

00:06:26.160 --> 00:06:27.160
I'm known as David M.

00:06:27.160 --> 00:06:27.920
O'Rourke.

00:06:28.030 --> 00:06:30.880
We want the directory API to be able
to accommodate the notion of multiple

00:06:30.880 --> 00:06:33.060
names mapping to the same record.

00:06:33.160 --> 00:06:34.860
And at most one type.

00:06:34.960 --> 00:06:38.740
Types of records are examples of users,
groups, printers, servers,

00:06:38.750 --> 00:06:40.260
whatever you want for a type of record.

00:06:40.310 --> 00:06:43.620
So you have the notion of name and
you have the notion of category to

00:06:43.710 --> 00:06:45.860
deal with with record name and type.

00:06:45.950 --> 00:06:49.390
Records contain attributes and values.

00:06:49.830 --> 00:06:53.130
Attribute types would be
an example of unique ID,

00:06:53.150 --> 00:06:57.770
names, phone number,
social security number.

00:06:57.900 --> 00:06:59.970
And then attribute types contain values.

00:07:00.080 --> 00:07:02.380
So an attribute like social
security number would be

00:07:02.380 --> 00:07:04.830
a single-valued attribute,
whereas an attribute like phone

00:07:04.830 --> 00:07:05.950
number would be multi-valued.

00:07:06.000 --> 00:07:08.800
You have work, home, fax,
those sorts of examples.

00:07:08.800 --> 00:07:12.530
The API accommodates that sort
of flexibility inside the system.

00:07:12.590 --> 00:07:15.690
Values come from attributes,
and they're contained

00:07:15.690 --> 00:07:16.800
within attribute types.

00:07:16.800 --> 00:07:18.330
Values are blobs of data.

00:07:18.330 --> 00:07:20.800
The Directory Service is data agnostic.

00:07:20.880 --> 00:07:24.880
So the data is formatted in whatever
way the foreign system formats it,

00:07:24.890 --> 00:07:27.790
or whatever way the attribute type
dictates it should be formatted.

00:07:27.800 --> 00:07:33.060
The Directory Service does no policy
implementation in that particular area.

00:07:33.860 --> 00:07:34.600
Apple's adoption.

00:07:34.600 --> 00:07:35.700
This is very important.

00:07:35.740 --> 00:07:38.740
We're not telling you to do this
and adopt it for yourself and then

00:07:38.740 --> 00:07:40.410
going off and doing your own thing.

00:07:40.410 --> 00:07:43.200
Our server software as well as
our desktop software will be

00:07:43.280 --> 00:07:44.980
based on the directory APIs.

00:07:44.980 --> 00:07:49.340
The administration software for Apple's
server software is directory API-based.

00:07:49.340 --> 00:07:53.060
And the Apple's server software
products are already entirely based

00:07:53.160 --> 00:07:54.580
on the directory service APIs.

00:07:54.580 --> 00:07:59.900
So those of you fortunate enough to
perhaps participate in some early seeds

00:07:59.900 --> 00:08:04.490
of server software have already used
software on directory service APIs.

00:08:04.490 --> 00:08:07.760
Third-party enhancements or
replacements of services can

00:08:07.780 --> 00:08:09.480
leverage Apple's work in this area.

00:08:09.560 --> 00:08:14.110
This means you don't need to provide your
own administration tool to create a user.

00:08:14.110 --> 00:08:18.750
You can simply add an attribute
to a user but use Apple's tools to

00:08:18.750 --> 00:08:20.270
set up and populate the directory.

00:08:20.300 --> 00:08:22.500
You don't have to provide the
full administration suite.

00:08:22.630 --> 00:08:23.030
You could.

00:08:23.030 --> 00:08:24.390
We're not saying you shouldn't.

00:08:24.440 --> 00:08:27.210
We're just saying you don't have to know,
you no longer have to deliver

00:08:27.210 --> 00:08:30.200
the complete solution because you
can leverage Apple's software.

00:08:30.200 --> 00:08:30.840
Thank you.

00:08:30.860 --> 00:08:34.530
that we're going to be doing
using the directory APIs.

00:08:36.180 --> 00:08:39.150
Apple software products will be
configurable as to what nodes are used.

00:08:39.370 --> 00:08:41.150
What does that statement mean?

00:08:41.270 --> 00:08:43.140
That's the briefest I could get.

00:08:43.280 --> 00:08:46.900
First of all, Apple software will request
standard record types which are

00:08:46.900 --> 00:08:48.270
documented as part of the API.

00:08:48.290 --> 00:08:52.950
So we will request KDS standard
user or KDS standard printer record.

00:08:53.100 --> 00:08:57.470
This will enable directory node
plug-ins to map our standard

00:08:57.510 --> 00:09:00.410
requests onto their foreign system.

00:09:00.500 --> 00:09:02.330
The next thing

00:09:03.020 --> 00:09:06.550
we do is customers can configure
directory access via the search node.

00:09:06.640 --> 00:09:09.320
One of our plug-ins is a search node,
and this -- I could have an

00:09:09.320 --> 00:09:11.300
hour-long conversation just on this.

00:09:11.430 --> 00:09:13.260
But in essence,
the search node allows the

00:09:13.280 --> 00:09:17.360
customer to choose which directory
nodes the services are gonna use.

00:09:17.460 --> 00:09:20.400
So the idea is that if you've
added a directory for XYZ,

00:09:20.400 --> 00:09:23.540
you can go to the search
node configuration panel,

00:09:23.540 --> 00:09:26.900
and you can say,
"I wanna use active directory.

00:09:26.900 --> 00:09:30.260
I wanna then consult net info,
and then I wanna consult LDAP in that

00:09:30.260 --> 00:09:34.300
order wherever anybody wants to find
a record." Administrators can use the

00:09:34.340 --> 00:09:38.040
search node to control data access,
access controls,

00:09:38.070 --> 00:09:41.930
as well as bring new directories online.

00:09:44.260 --> 00:09:46.690
API plugin usage and development.

00:09:46.810 --> 00:09:48.840
We've developed three basic plugins.

00:09:48.910 --> 00:09:51.660
We've developed a plugin for
Apple's own directory service,

00:09:51.690 --> 00:09:52.370
NetInfo.

00:09:52.470 --> 00:09:55.980
Now, this really gives you a
dual API to use on Mac OS X.

00:09:55.980 --> 00:09:58.780
You can either use the native
NetInfo APIs to access NetInfo,

00:09:58.780 --> 00:10:00.760
or you can use the directory APIs.

00:10:00.910 --> 00:10:03.640
If you use the directory APIs,
you're insulated from us changing

00:10:03.640 --> 00:10:05.080
directory service access.

00:10:05.110 --> 00:10:08.240
If you use the NetInfo APIs,
they work with NetInfo.

00:10:08.320 --> 00:10:11.980
We've developed an LDAP plugin,
so you can access any LDAP v2 system,

00:10:12.000 --> 00:10:14.310
and we've developed a
search policy plugin.

00:10:14.360 --> 00:10:16.900
And that's what implements the
system's policy about how it

00:10:16.900 --> 00:10:19.950
goes about finding user records,
finding group records,

00:10:19.950 --> 00:10:21.460
and so on and so forth.

00:10:21.500 --> 00:10:24.350
Apple software products are being
tested with these three plugins.

00:10:24.400 --> 00:10:26.020
If you have a plugin you
want us to test with,

00:10:26.050 --> 00:10:27.030
you need to contact us.

00:10:27.060 --> 00:10:30.430
But if you can make your plugin behave
like any one of these three plugins,

00:10:30.430 --> 00:10:33.550
you're very close to being able to
have your plugin be able to work with

00:10:33.550 --> 00:10:36.480
any Apple software out of the box.

00:10:38.640 --> 00:10:41.940
The Apple desktop and server
software uses this architecture to

00:10:42.000 --> 00:10:43.900
provide customers directory choice.

00:10:43.900 --> 00:10:46.800
That's the whole point,
and that goes back to slide number one.

00:10:46.870 --> 00:10:50.340
We are actively looking for
developers to develop a plug-in.

00:10:50.470 --> 00:10:53.890
We are not going to do plug-ins to every
single directory system on the planet.

00:10:53.900 --> 00:10:56.500
If you have a custom directory
you'd like to access,

00:10:56.600 --> 00:10:59.290
we encourage you to contact
us to develop a plug-in.

00:10:59.330 --> 00:11:01.780
If you have a standard directory
you want to develop access to,

00:11:01.810 --> 00:11:04.440
there's a product opportunity
there for you to sell the

00:11:04.450 --> 00:11:06.050
product to Apple customers.

00:11:07.430 --> 00:11:09.790
At this point in time,
I'm going to stray from what we covered

00:11:09.790 --> 00:11:12.290
last year in last year's session,
and we're going to give you some details

00:11:12.300 --> 00:11:14.040
on how actually to write a plug-in.

00:11:14.040 --> 00:11:19.750
And I'd like to invite Michael Dasenbrock
up on stage at this time,

00:11:19.750 --> 00:11:19.750
and I'll be back later.

00:11:25.180 --> 00:11:26.490
Thank you, David.

00:11:26.600 --> 00:11:28.020
My name is Michael Dasenbrock.

00:11:28.160 --> 00:11:31.400
I am the lead engineer on Apple's
Directory Service project.

00:11:31.400 --> 00:11:35.000
And what I'm going to go over today
is I'm going to talk about how to

00:11:35.000 --> 00:11:37.250
build a directory service plug-in.

00:11:37.400 --> 00:11:41.700
Basically,
I'm going to give you a high-level

00:11:42.150 --> 00:11:47.810
overview of the plug-in itself,
its structure, some of the entry points,

00:11:47.810 --> 00:11:47.810
and the callback mechanisms
that are in each plug-in.

00:11:50.110 --> 00:11:52.770
Okay, first of all, what are plug-ins?

00:11:52.950 --> 00:11:57.790
Plug-ins are code-loadable
modules that use Apple's core

00:11:57.830 --> 00:12:01.360
foundations CF load function.

00:12:02.230 --> 00:12:06.480
They have seven different entry points,
which are listed here.

00:12:06.480 --> 00:12:10.770
And they also have a series of callbacks,
which we'll get into more detail later.

00:12:12.790 --> 00:12:15.040
Okay, where do you load a plug-in from?

00:12:15.090 --> 00:12:18.200
Right now there's two standard locations
for loading directory plug-ins.

00:12:18.240 --> 00:12:19.700
We do this for two reasons.

00:12:19.700 --> 00:12:23.640
We allow you to load into the
system path or into the local path.

00:12:23.720 --> 00:12:27.920
The system path is somewhat sacred and
you generally don't want to be modifying

00:12:27.920 --> 00:12:29.700
that while you're doing development.

00:12:29.700 --> 00:12:34.160
Also, it may be a read-only copy of
the OS and you may not be able

00:12:34.260 --> 00:12:36.700
to modify that particular path.

00:12:36.700 --> 00:12:41.700
So, you load from the local path
to allow you to develop that.

00:12:41.700 --> 00:12:44.700
You can blow it away when you're done
and you won't be harming the system.

00:12:44.700 --> 00:12:49.740
Each plug-in that you develop requires
that it has a DS plug extension

00:12:49.740 --> 00:12:52.370
on it to get loaded by the server.

00:12:55.040 --> 00:12:57.260
Here's an example structure of
what the Directory Service plug-in

00:12:57.360 --> 00:13:00.400
is going to look like,
or the one that you're going to write.

00:13:01.050 --> 00:13:06.170
As I stated before, it's loaded in one of
the two directory paths.

00:13:06.170 --> 00:13:09.920
And as you can see here,
what's going to be inside that is going

00:13:09.920 --> 00:13:12.420
to be your plug-in with a .dsp extension.

00:13:12.480 --> 00:13:14.430
Inside that is your plug-in.

00:13:14.430 --> 00:13:18.830
It's basically your executable,
the one that you're going to write.

00:13:18.910 --> 00:13:21.760
So that's what gets loaded
by the directory server.

00:13:21.830 --> 00:13:24.160
Also inside there is a resources folder.

00:13:24.220 --> 00:13:27.200
Inside this resources folder
is a required property list.

00:13:27.330 --> 00:13:29.860
I'll get into more detail about
what's going to be in that.

00:13:29.910 --> 00:13:32.890
As well as any additional information
that you may want for your plug-in.

00:13:32.900 --> 00:13:35.400
Say, for example,
you want some configuration information

00:13:35.400 --> 00:13:37.480
or runtime files that you need to have.

00:13:37.590 --> 00:13:39.120
It's guaranteed to go
along with your plug-in.

00:13:39.120 --> 00:13:41.250
That's a great place to put them.

00:13:43.220 --> 00:13:47.000
Okay, now here's that property list
that I was talking about earlier.

00:13:47.070 --> 00:13:48.620
The items that you see
in blue are the keys.

00:13:48.700 --> 00:13:51.240
Those are required and they
need to be in each field.

00:13:51.240 --> 00:13:53.820
And as you can see,
you can see that in the green,

00:13:53.840 --> 00:13:56.500
those are the items that
you're going to provide.

00:13:56.620 --> 00:14:00.330
And the reason why I brought this
slide up is the one issue that's

00:14:00.330 --> 00:14:05.220
going to be most particular to those
plug-in developers is the plug-in UUID.

00:14:05.290 --> 00:14:09.880
That UUID needs to be unique
to your plug-in on the

00:14:09.880 --> 00:14:11.000
system that it's loaded to.

00:14:11.480 --> 00:14:15.350
If there's a conflict during load time,
the plug-in will not get loaded and

00:14:15.350 --> 00:14:18.990
the first one with the same UUID is
loaded and the other one is not.

00:14:19.250 --> 00:14:21.790
There will be ways to detect this
and I'll get into that later.

00:14:22.050 --> 00:14:28.290
There will also be on the
SDK that's to be provided

00:14:28.290 --> 00:14:28.290
later tools to generate a UUID.

00:14:31.230 --> 00:14:33.930
Okay, how to make a directory plug-in.

00:14:34.040 --> 00:14:36.090
First of all,
the best place to start is to start

00:14:36.100 --> 00:14:39.980
with the sample source code that we're
going to provide on the upcoming SDK.

00:14:40.030 --> 00:14:43.120
You can build and install this plug-in.

00:14:43.160 --> 00:14:45.240
Once you've built this
plug-in and installed it,

00:14:45.280 --> 00:14:50.950
it gives you an idea of how to take
-- you can look at the entry points.

00:14:51.000 --> 00:14:52.880
You can look at the callback mechanisms.

00:14:52.920 --> 00:14:54.200
This is a working plug-in.

00:14:54.350 --> 00:14:57.180
It does nothing more than stub out all
of the calls that you're going to be

00:14:57.180 --> 00:15:02.810
expected to process from client data,
as well as it registers a single node.

00:15:04.120 --> 00:15:07.600
After you've got your plug-in built,
you're going to want to test it.

00:15:07.720 --> 00:15:11.900
Testing it is also going to be through
some tools that we're going to provide.

00:15:12.010 --> 00:15:18.390
We have, we're going to provide a test
app on the developer SDK.

00:15:18.660 --> 00:15:24.080
You again install it in the
locations that I spoke about earlier.

00:15:24.080 --> 00:15:29.240
To load your plugin you need to
first stop the directory server

00:15:29.240 --> 00:15:34.240
and then relaunch it because the
plugins are loaded at launch time.

00:15:34.240 --> 00:15:37.540
Right now they're not loadable on demand.

00:15:37.540 --> 00:15:38.740
That may change in the future.

00:15:38.740 --> 00:15:39.480
We haven't decided yet.

00:15:39.480 --> 00:15:43.760
And then you can verify that your plugin
is loaded by looking into the log file.

00:15:44.650 --> 00:15:48.820
Okay, again,
you can compile and build a directory

00:15:48.950 --> 00:15:51.250
service API test client that we have.

00:15:51.260 --> 00:15:55.100
It will allow you to do two things.

00:15:55.100 --> 00:15:58.890
It will allow you to test your plugin
as well as give you an idea of what

00:15:58.900 --> 00:16:02.630
clients are going to be requesting
from your plugin so that you can

00:16:02.630 --> 00:16:07.160
get an idea of how to write your
plugin to service request for data.

00:16:07.160 --> 00:16:10.820
And it gives you, again,
ideas how to use callbacks.

00:16:10.820 --> 00:16:14.580
Okay, here are the-- we'll talk
a little bit about this.

00:16:14.580 --> 00:16:16.820
We'll talk a little bit now about the
seven entry points into your plugin.

00:16:16.820 --> 00:16:18.780
First one is validate.

00:16:18.820 --> 00:16:21.020
Validate is called once at load time.

00:16:21.020 --> 00:16:22.460
It's basically kind of a handshaking.

00:16:22.480 --> 00:16:23.940
Are you who you say you are?

00:16:23.940 --> 00:16:25.740
Are you the kind of
plugin I'm looking for?

00:16:25.740 --> 00:16:26.760
Okay, I'm going to load you.

00:16:26.760 --> 00:16:29.080
After all of the plugins
have been loaded,

00:16:29.080 --> 00:16:32.460
your plugin then gets
called with initialize.

00:16:32.460 --> 00:16:38.190
This is now the time for you to
go and do any startup information

00:16:38.370 --> 00:16:41.390
or startup routines that you need
like open up networking ports,

00:16:41.390 --> 00:16:44.560
open up a database file,
spawn off threads,

00:16:44.560 --> 00:16:45.890
I'm not going to be able to do it.

00:16:46.220 --> 00:16:49.750
Once initialization has
been successfully completed,

00:16:49.910 --> 00:16:55.050
then plug-in state gets set to active,
and that gets done through

00:16:55.050 --> 00:16:57.540
the set plug-in state call.

00:16:57.770 --> 00:17:00.630
Administrators can take plug-ins
on and offline through the

00:17:00.630 --> 00:17:02.650
Directory Services control panel.

00:17:02.660 --> 00:17:05.540
And when they are taken
offline or online,

00:17:05.540 --> 00:17:08.340
it comes through this set plug-in state.

00:17:08.510 --> 00:17:11.320
And that allows you to either,
once you've been made active,

00:17:11.430 --> 00:17:14.210
to again bring things online
that were performally offline,

00:17:14.210 --> 00:17:17.380
and again take things offline
once you become inactive.

00:17:17.740 --> 00:17:19.040
Process request.

00:17:19.380 --> 00:17:21.370
This is where all the
heavy lifting gets done.

00:17:21.380 --> 00:17:24.980
Your plug-in is going to probably
do 99% of its data handling

00:17:24.980 --> 00:17:26.740
through this particular call.

00:17:27.280 --> 00:17:33.020
This is where you're going to handle,
again, all of the lookup information

00:17:33.020 --> 00:17:34.990
and all of the GET and SAT.

00:17:35.210 --> 00:17:36.420
Shutdown.

00:17:36.420 --> 00:17:38.860
This is called just before
Directory Services Server Shutdown.

00:17:38.860 --> 00:17:41.910
Gives your plug-in a chance to clean up,
close some files,

00:17:41.940 --> 00:17:43.930
shut down some network connections.

00:17:45.340 --> 00:17:48.920
Configure, we allow all the plug-ins
to configure themselves.

00:17:48.920 --> 00:17:51.670
Again,
we don't know what you're going to write.

00:17:51.740 --> 00:17:53.340
We don't know anything
about your plug-in.

00:17:53.340 --> 00:17:56.560
What happens is,
in the directory services control panel,

00:17:56.560 --> 00:18:00.620
the administrator can select your plug-in
and click on the configure button.

00:18:00.620 --> 00:18:04.490
The server then contacts your
plug-in through this API,

00:18:04.490 --> 00:18:08.020
or this entry point,
and then it's up to you.

00:18:08.020 --> 00:18:09.940
You can configure your
app in any way you want.

00:18:09.940 --> 00:18:14.360
You can simply read a simple XML file,
or you can launch an elaborate

00:18:14.360 --> 00:18:15.760
application with a great HI.

00:18:15.760 --> 00:18:20.140
And then periodic task,
for those of you who don't

00:18:20.140 --> 00:18:22.550
want to manage threads,
you just want a simple process

00:18:22.580 --> 00:18:24.730
that gets called when you get
called through the entry points,

00:18:24.740 --> 00:18:27.490
that's great,
we'll also call you periodically

00:18:27.490 --> 00:18:30.170
to do some housekeeping,
and this guarantees that

00:18:30.170 --> 00:18:31.960
you'll get some processor time.

00:18:31.960 --> 00:18:34.860
Okay, now here's those callbacks that
I was talking about before.

00:18:34.860 --> 00:18:36.470
Right now we have four callbacks.

00:18:36.480 --> 00:18:39.910
What the plug-ins need to do is
they need to register the plug-in.

00:18:39.940 --> 00:18:43.670
So they register their nodes,
making their nodes or their domains

00:18:43.670 --> 00:18:48.720
available to the directory server,
as well as taking them offline

00:18:48.720 --> 00:18:52.560
when they've been made inactive,
because they will no

00:18:52.570 --> 00:18:55.460
longer be able to accept,
or they will no longer be

00:18:55.460 --> 00:18:58.940
given any processing requests
as long as they're inactive.

00:18:58.940 --> 00:19:01.840
So this allows the node to
bring them on and offline.

00:19:01.840 --> 00:19:05.240
Unregister all is convenience called
will allow you to take them all offline

00:19:05.240 --> 00:19:06.480
without having to do them individually.

00:19:06.480 --> 00:19:08.910
And then there's a log-in callback,
which you can put in

00:19:08.910 --> 00:19:09.550
debugging information.

00:19:09.560 --> 00:19:12.720
As well as run time information
into the directory service log.

00:19:12.720 --> 00:19:14.740
Okay, just a word to the wise.

00:19:14.740 --> 00:19:17.600
Remember that your plug-ins
are going to be loaded by

00:19:17.600 --> 00:19:19.030
the directory service server.

00:19:19.100 --> 00:19:21.740
The directory service server
is running as a root process.

00:19:21.740 --> 00:19:23.870
Therefore, your plug-in is going to be
running as a root process.

00:19:23.880 --> 00:19:26.320
So you should do all
your development as root,

00:19:26.320 --> 00:19:28.940
and then test as non-root.

00:19:28.940 --> 00:19:31.080
So you know that it's
doing the right thing.

00:19:31.080 --> 00:19:35.500
It's not giving non-root owners
root access and doing bad things

00:19:35.500 --> 00:19:38.920
in the system that you normally
wouldn't do as a non-root owner.

00:19:40.110 --> 00:19:43.400
Right now,
I believe the Directory Services is

00:19:43.400 --> 00:19:46.550
locked down to read
only by administrator,

00:19:46.550 --> 00:19:49.340
or read everyone,
but write only by administrator.

00:19:49.340 --> 00:19:52.410
I believe that will be
the same with Pulse DP4.

00:19:53.680 --> 00:19:59.350
Okay, to sum up,
what you need to do next is

00:19:59.400 --> 00:20:03.190
contact your WDR representative
if you're interested in doing any

00:20:03.190 --> 00:20:04.580
directory service development.

00:20:04.580 --> 00:20:10.220
Please come and talk to us after
so we can hopefully get you,

00:20:10.220 --> 00:20:17.650
we can get you on the contact list
for early seeds of the SDK as well

00:20:17.780 --> 00:20:23.820
as get the copies of the directory
service documentation as well

00:20:23.820 --> 00:20:25.280
as the plugin API documentation.

00:20:25.280 --> 00:20:29.050
And with that,
I'll turn it back to David.

00:20:31.900 --> 00:20:35.620
- The directory services
and other Apple technology,

00:20:35.620 --> 00:20:38.990
the directory services are really
a low-level access technology,

00:20:39.000 --> 00:20:40.720
they don't necessarily dictate an H.I.

00:20:40.720 --> 00:20:41.890
or browser or anything like that.

00:20:41.940 --> 00:20:44.520
So we complement some
other Apple technologies.

00:20:44.520 --> 00:20:47.640
We provide a common framework
for higher-level software to be

00:20:47.640 --> 00:20:51.180
insulated from the particulars of
a particular directory service.

00:20:51.180 --> 00:20:53.940
One technology that we do complement
is Network Service Location,

00:20:54.060 --> 00:20:56.880
which does have a directory
service plug-in under development.

00:20:56.880 --> 00:20:59.760
So if you do a directory service plug-in,
NSL will be able to browse

00:20:59.820 --> 00:21:02.600
your directory service via
its directory service plug-in.

00:21:02.600 --> 00:21:05.340
So now you don't have to do two plug-ins,
one for NSL and one

00:21:05.360 --> 00:21:06.670
for directory services.

00:21:06.680 --> 00:21:10.520
Doing it in one place,
the whole system benefits.

00:21:10.520 --> 00:21:12.690
What are the opportunities
for you as developers,

00:21:12.690 --> 00:21:14.390
because we're all here to make money?

00:21:14.800 --> 00:23:13.600
[Transcript missing]

00:23:14.980 --> 00:23:16.370
What are some additional resources?

00:23:16.480 --> 00:23:17.900
We have the
Apple Developer Developer Connection.

00:23:17.900 --> 00:23:19.240
We're going to have our PDFs up there.

00:23:19.240 --> 00:23:21.710
We have documentation for the API,
and we have documentation

00:23:21.710 --> 00:23:22.540
for the plug-in.

00:23:22.540 --> 00:23:25.330
We'll be posting those PDFs
to Apple Developer Resources.

00:23:25.380 --> 00:23:29.870
Michael, is the API documentation in
the Frameworks subdirectory?

00:23:30.290 --> 00:23:34.460
It will be in future builds or in
wherever documentation goes in Mac OS X.

00:23:34.610 --> 00:23:38.410
Directory Service API documentation
will be available at the

00:23:38.500 --> 00:23:44.240
Apple Developer Web site and the API and
the headers are installed with DP4.

00:23:44.240 --> 00:23:46.340
You have the
Directory Service Client API.

00:23:46.340 --> 00:23:51.020
You had it in DP3 if you didn't know it,
and you currently have it in DP4.

00:23:51.020 --> 00:23:54.260
So if you want to play with it,
give us some feedback,

00:23:54.260 --> 00:23:55.870
tell us about some bugs.

00:23:55.870 --> 00:23:56.500
We'd love to see anyone playing
with the Directory Client API.

00:23:56.930 --> 00:23:58.870
Who would you contact if
you're interested in developing

00:23:58.880 --> 00:24:00.120
and need Apple's assistance?

00:24:00.120 --> 00:24:03.030
Thomas Weier is your friend
in this particular case.

00:24:03.170 --> 00:24:05.950
So contact Tom, pester him,
tell him that you need

00:24:06.020 --> 00:24:12.880
access to Davo or Michael,
and that you desperately want to develop

00:24:12.880 --> 00:24:17.210
the world's next greatest plug-in,
and you need David's time now.

00:24:17.210 --> 00:24:17.210
And we'll be happy to work with you.