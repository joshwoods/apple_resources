WEBVTT

00:00:05.650 --> 00:00:09.610
I'd like to introduce Dave Springer,
a senior OpenGL graphics engineer

00:00:09.610 --> 00:00:13.000
at Apple who's done a tremendous
amount of work with OS X,

00:00:13.000 --> 00:00:15.200
with NSGL,
and he's going to talk specifically

00:00:15.200 --> 00:00:20.730
about OpenGL on Mac OS X and the nuances
of working there and talk about some

00:00:20.730 --> 00:00:24.900
of the new architectures and give you
a lot of good code to work through.

00:00:24.900 --> 00:00:28.100
He's actually going to work through
some code with you to show exactly

00:00:28.100 --> 00:00:29.430
how you can do it with OS X.

00:00:29.430 --> 00:00:31.510
So, Dave Springer.

00:00:38.190 --> 00:00:39.100
I'm Dave.

00:00:39.100 --> 00:00:44.920
We'll talk about OpenGL on OS X.

00:00:44.980 --> 00:00:50.890
Just had a big long
talk about it on OS 9.

00:00:51.840 --> 00:00:56.560
There's three main pillars
of OpenGL and OS X.

00:00:56.590 --> 00:01:01.200
When we wrote it, we kept all these three
things in mind all the time.

00:01:02.030 --> 00:01:05.500
First thing is that we want it
to be fully integrated with OS X.

00:01:05.500 --> 00:01:08.190
We'll talk about what that means.

00:01:08.190 --> 00:01:10.870
Not, you know, a bag on the side.

00:01:10.870 --> 00:01:15.440
It's like, you get OS X and then
somehow you get to do 3D.

00:01:15.440 --> 00:01:16.810
This is fully integrated.

00:01:16.880 --> 00:01:21.060
We want to preserve the full
OpenGL programming model so that if

00:01:21.180 --> 00:01:25.300
you're already an OpenGL programmer
and you know how to do it,

00:01:25.300 --> 00:01:27.210
you still know how to do it.

00:01:27.210 --> 00:01:28.630
Nothing changed.

00:01:30.170 --> 00:01:32.290
Plus, it's got to be fast.

00:01:32.290 --> 00:01:39.040
So we made a lot of architectural
decisions inside of OpenGL on OS X.

00:01:39.040 --> 00:01:42.340
We'll talk about what some of those
are so that you get a lot of speed.

00:01:42.340 --> 00:01:44.820
And you know that OS X is
very different from OS 9.

00:01:44.820 --> 00:01:47.680
It's multitasking, it's multithreaded,
it's multiprocessor,

00:01:47.780 --> 00:01:49.190
it's multi-a lot of things.

00:01:49.190 --> 00:01:52.950
And that means that the operating
system is always in your way,

00:01:52.950 --> 00:01:54.140
slowing you down.

00:01:54.140 --> 00:01:56.260
So we had to think about that a lot.

00:01:57.580 --> 00:02:00.600
is the founder of OpenGL,
and he's been working on the

00:02:00.600 --> 00:02:04.270
development of OpenGL applications
for Mac OS X for a long time.

00:02:37.940 --> 00:02:37.940
OpenGL is a very
important part of the OS.

00:02:37.940 --> 00:02:37.940
It's a very important part of the OS.

00:02:37.940 --> 00:02:37.940
It's a very important part of the OS.

00:02:40.850 --> 00:02:41.800
Okay.

00:02:42.050 --> 00:02:44.830
OS X gives us a lot of stuff.

00:02:45.020 --> 00:02:51.370
We have multi-headed graphics,
multi-threaded, multi-processor.

00:02:51.370 --> 00:02:56.220
These are all things that come with
the OS X operating system kernel.

00:02:56.270 --> 00:03:00.120
And that means that OS X has
to do a lot of work.

00:03:00.120 --> 00:03:03.200
It takes up a lot of cycles in
the CPU to do all this stuff,

00:03:03.250 --> 00:03:05.860
so that it really works properly.

00:03:06.920 --> 00:03:11.230
We had to integrate in with all of that
so that you can preserve a lot of your

00:03:11.230 --> 00:03:14.550
performance that you used to get on OS 9,
which was none of those things.

00:03:14.610 --> 00:03:18.230
OS 9, you could own the whole
machine if you wanted to,

00:03:18.400 --> 00:03:21.640
and just kind of elbow
everything out of the way,

00:03:21.640 --> 00:03:24.370
run your game, and you're on the iron.

00:03:24.740 --> 00:03:26.900
Well, that's not really true in OS X.

00:03:26.960 --> 00:03:28.680
We've made it

00:03:29.180 --> 00:03:33.880
Just as close to that as possible,
and still preserve full OS X.

00:03:34.280 --> 00:03:37.830
So you're still fully multi-threaded,
you're still fully multi-tasking,

00:03:38.000 --> 00:03:42.520
all those little neato little Unix demons
are still running in the background,

00:03:42.520 --> 00:03:44.410
but you get your performance anyways.

00:03:46.230 --> 00:03:52.320
We've worked inside the OS X hardware
acceleration layers inside the drivers

00:03:52.910 --> 00:03:56.330
so that we are really on the iron.

00:03:57.010 --> 00:04:00.340
We have the ATI RAGE 128 fully supported.

00:04:00.660 --> 00:04:01.860
Other stuff is coming soon.

00:04:01.860 --> 00:04:04.310
It's really awesome,
and I can't tell you what it is.

00:04:06.590 --> 00:04:13.500
We support Cocoa APIs,
which Jeff showed you that was in

00:04:13.500 --> 00:04:17.240
its OpenGL view and things like that.

00:04:17.240 --> 00:04:21.840
We have full Carbon support,
so if you've written something in OS 9,

00:04:21.840 --> 00:04:24.700
you can carbonate it and
bring it over to OS 10,

00:04:24.700 --> 00:04:26.100
it'll still work.

00:04:26.100 --> 00:04:29.200
And we have GLUT as well.

00:04:29.200 --> 00:04:31.200
It's 3.7.

00:04:33.880 --> 00:04:37.220
We preserved the full
OpenGL programming model.

00:04:37.260 --> 00:04:39.430
It's kind of implicit within the API.

00:04:39.430 --> 00:04:40.800
We changed nothing.

00:04:40.800 --> 00:04:44.060
So it's still the same
OpenGL state machine.

00:04:44.060 --> 00:04:46.600
You still make polygons with vertices.

00:04:46.600 --> 00:04:47.800
You transform and light them.

00:04:47.800 --> 00:04:48.800
You stick textures to them.

00:04:48.800 --> 00:04:52.100
You render stuff.

00:04:52.230 --> 00:04:53.720
It's exactly the same.

00:04:53.760 --> 00:04:58.590
So all your OpenGL code that you wrote,
those big, beautiful applications you've

00:04:58.590 --> 00:05:02.100
labored over for so long,
can just come right over

00:05:02.100 --> 00:05:04.800
with a little bit of work.

00:05:05.360 --> 00:05:12.290
and I will be talking about
that in a few minutes.

00:05:35.440 --> 00:05:38.180
wrote high performance stuff in OS 9.

00:05:38.180 --> 00:05:40.030
You can do the same thing in OS X.

00:05:40.100 --> 00:05:43.320
It's the same model.

00:05:43.320 --> 00:05:46.220
OpenGL is fully integrated
with Cocoa and Carbon,

00:05:46.220 --> 00:05:50.890
both, so that you can write your
applications native OS X in Cocoa,

00:05:50.950 --> 00:05:54.060
or you can bring
Carbon stuff over from OS 9,

00:05:54.170 --> 00:05:57.820
or you can write Carbon apps native OS X,
too.

00:05:57.820 --> 00:06:00.580
So if you have a bunch of legacy
code that you want to rewrite,

00:06:00.580 --> 00:06:03.980
or port,
up to OS 10 you can do that as well.

00:06:06.950 --> 00:06:12.690
The optimizations in
OS X are centered around this

00:06:12.860 --> 00:06:15.140
preemptive model that we have.

00:06:15.140 --> 00:06:21.780
It really has to do with texture
paging and how we access the driver.

00:06:21.840 --> 00:06:24.010
I don't want to get into a
great deal of detail here,

00:06:24.010 --> 00:06:27.260
partly because I don't know it,
and also partly because we can

00:06:27.260 --> 00:06:32.560
leave that to Q&A later for those
of you who really want to get into

00:06:32.560 --> 00:06:36.160
how that technology really works.

00:06:36.200 --> 00:06:40.380
It is fully supported
inside the Rage 128 driver.

00:06:40.470 --> 00:06:41.940
It gives you really fast texturing.

00:06:41.940 --> 00:06:46.940
We have an excellent paging model that'll
get your textures in and out of the card.

00:06:46.940 --> 00:06:49.910
On your,
it does it kind of on your behalf.

00:06:49.920 --> 00:06:54.520
So you don't have to have fancy
texture paging algorithms and

00:06:54.520 --> 00:06:58.380
know how to do a VM system just
to make things texture mapped.

00:06:58.380 --> 00:07:00.120
We do it for you.

00:07:00.230 --> 00:07:04.150
It also works so that when your
application is running on 10,

00:07:04.150 --> 00:07:07.240
it acts like it owns
the the whole machine,

00:07:07.270 --> 00:07:09.490
which is the same as nine.

00:07:09.750 --> 00:07:12.500
But on 10 you actually
can't own the whole machine.

00:07:12.500 --> 00:07:13.700
The kernel owns it.

00:07:13.700 --> 00:07:15.140
You never can.

00:07:15.140 --> 00:07:17.840
But we made it so that
it seems like you do.

00:07:17.860 --> 00:07:21.220
So if you have two applications
running and they're both using OpenGL,

00:07:21.220 --> 00:07:23.240
they don't beat against each other.

00:07:23.240 --> 00:07:24.720
But they both perform really well.

00:07:24.720 --> 00:07:27.260
You're gonna see some degradation,
of course, 'cause you have two apps.

00:07:27.260 --> 00:07:28.660
So, you know, they go slower.

00:07:28.660 --> 00:07:29.320
Duh.

00:07:29.320 --> 00:07:33.740
But you can get it so it seems
like you have the whole machine.

00:07:33.740 --> 00:07:37.100
You don't have to do
special programming for that

00:07:38.720 --> 00:07:42.640
The APIs that we currently support,
this is in DP4 right now,

00:07:42.640 --> 00:07:47.380
so the CDs you either got or are going
to get have these extensions in them.

00:07:48.240 --> 00:07:50.660
And I'm not going to go
into a huge amount of detail

00:07:50.660 --> 00:07:51.980
on what each of these do.

00:07:51.980 --> 00:07:54.440
They're, they're documented pretty well.

00:07:54.440 --> 00:07:58.800
This is the OpenGL 1.1 API that
is on your CD right now.

00:07:58.800 --> 00:08:01.710
So you can program this
as soon as you get it.

00:08:01.800 --> 00:08:08.760
What's coming post-DP4,
so the next user seed or few seeds after,

00:08:08.840 --> 00:08:12.760
it'll be full OpenGL 1.2.2.

00:08:12.760 --> 00:08:14.440
And we'll have these
other extensions as well.

00:08:14.440 --> 00:08:17.670
I know Jeff went over some too.

00:08:17.990 --> 00:08:21.980
And again, I think in a Q&A session we
can address these in great

00:08:21.980 --> 00:08:24.420
detail if you need to know.

00:08:27.010 --> 00:08:29.940
Alright, the,
when you're programming on OS X,

00:08:30.060 --> 00:08:33.170
if you've come over from OS 9, you're

00:08:33.700 --> 00:08:34.730
You have to think about a few things.

00:08:34.790 --> 00:08:36.940
We don't have any color
index mode on OS X,

00:08:36.940 --> 00:08:44.300
so you can't do those cheats, you know,
the, when you should be using

00:08:44.300 --> 00:08:47.640
compositing and you're not,
you can't do those anymore.

00:08:47.640 --> 00:08:49.360
You really have to use compositing now.

00:08:49.360 --> 00:08:54.180
You can't go into color index mode and
use mask off planes and things like that.

00:08:54.180 --> 00:08:54.910
It's not going to work.

00:08:54.960 --> 00:08:59.400
In this, in no 8-bit color look
up mode either on OS X,

00:08:59.400 --> 00:09:04.220
so you really have to, you know,
pull up your socks, do compositing.

00:09:04.220 --> 00:09:08.540
There's no real true
single buffer window mode.

00:09:08.560 --> 00:09:11.640
There's, there's some technical reasons
for that in the Windows server.

00:09:11.640 --> 00:09:15.440
And it's really,
all really is double buffered,

00:09:15.440 --> 00:09:18.470
although in the API you can
ask for a single buffer,

00:09:18.610 --> 00:09:20.310
you just won't get it.

00:09:22.220 --> 00:09:23.740
Multiple contexts can share a drawable.

00:09:23.740 --> 00:09:26.380
That's the same as OS 9.

00:09:26.380 --> 00:09:29.070
So you can have a bunch
of OpenGL contexts all

00:09:29.070 --> 00:09:32.720
drawing into the same bit,
if you want.

00:09:33.260 --> 00:09:35.520
And we will have true
full screen support.

00:09:35.610 --> 00:09:37.860
Not in DP4, didn't make it.

00:09:37.890 --> 00:09:39.060
Sorry.

00:09:39.060 --> 00:09:40.660
It's coming soon.

00:09:40.710 --> 00:09:43.440
But that means that you
can own the whole screen.

00:09:43.440 --> 00:09:46.810
Blow away the desktop,
do cool games that are full screen.

00:09:46.820 --> 00:09:53.200
So we'll have that,
and it'll be really super fast.

00:09:53.200 --> 00:09:57.730
Just some notes on
implementation in OS X.

00:09:58.900 --> 00:10:03.760
Classic is not in DP4,
so if you have an app,

00:10:03.780 --> 00:10:06.400
an OS 9 app that you wrote and
you didn't bother to carbonate it,

00:10:06.400 --> 00:10:08.700
you're just hoping that
Classic will handle it,

00:10:08.700 --> 00:10:10.890
it's not going to work in DP4.

00:10:12.540 --> 00:10:15.860
We do have full Carbon support,
full Cocoa support,

00:10:15.860 --> 00:10:19.010
and I'll show you the level
of integration we have with

00:10:19.010 --> 00:10:20.780
Cocoa later with an example.

00:10:20.780 --> 00:10:26.120
We support GLUT 3.7,
so we ported that over,

00:10:26.120 --> 00:10:30.570
and that is a real OS X framework.

00:10:30.570 --> 00:10:34.740
It's not a carbonated
version of the one on OS X.

00:10:34.740 --> 00:10:37.040
It's a rewrite for OS X.

00:10:37.040 --> 00:10:40.280
It sits underneath Cocoa.

00:10:40.280 --> 00:10:42.220
It accesses methods inside Cocoa.

00:10:42.400 --> 00:10:44.690
It's a full native OS X.

00:10:44.690 --> 00:10:49.770
But I want to add to Jeff's note
there is we don't really encourage

00:10:49.800 --> 00:10:52.380
using GLUT for shipping applications.

00:10:52.410 --> 00:10:54.270
It's an excellent way to get started.

00:10:54.270 --> 00:10:58.630
If you're not really hip to how to
make Windows and do mouse events

00:10:58.640 --> 00:11:03.620
and OS X and stuff like that,
GLUT is a fairly easy way to get started.

00:11:03.620 --> 00:11:08.510
It's got a pretty low admission price,
and you can make Windows that have mouse

00:11:09.030 --> 00:11:11.340
control events and stuff like that.

00:11:13.010 --> 00:11:15.580
and we'll have a full screen
API that's coming soon.

00:11:15.580 --> 00:11:18.630
And that full screen API will also be
integrated back into GLUT so that you

00:11:18.710 --> 00:11:21.850
can get stuff up and running pretty fast.

00:11:22.060 --> 00:11:24.000
Okay, enough slides.

00:11:24.380 --> 00:11:32.490
Now, I want to do something here,
which is, I'm going to write some code.

00:11:36.370 --> 00:11:37.300
Okay.

00:11:37.300 --> 00:11:39.060
Can you guys switch me over?

00:11:39.060 --> 00:11:40.300
Thank you.

00:11:40.400 --> 00:11:41.580
All right.

00:11:41.580 --> 00:11:45.700
Remember how we all talk about,
I've got to take a swig of this.

00:11:46.710 --> 00:11:53.380
We all talk about how fabulous
our integration is with OS X.

00:11:53.740 --> 00:11:56.640
I want to show you how,
rather than talk about it.

00:11:56.650 --> 00:12:00.700
So I have Project Builder here.

00:12:00.700 --> 00:12:01.320
OK.

00:12:01.350 --> 00:12:03.420
No, is this, this is coming through, oh.

00:12:05.680 --> 00:12:10.480
How many of you have used Project Builder
or had any exposure to OS X at all?

00:12:10.480 --> 00:12:12.600
About half?

00:12:12.600 --> 00:12:13.600
OK.

00:12:13.810 --> 00:12:16.470
Well, there are a lot of bugs got fixed.

00:12:20.930 --> 00:12:21.740
There's still some in there.

00:12:21.800 --> 00:12:28.260
OK, so I'm going to start a new project.

00:12:28.310 --> 00:12:31.420
I'm going to make a 3D application.

00:12:33.700 --> 00:12:39.610
is the director of the
OpenGL project team.

00:12:41.380 --> 00:12:49.290
and let's call it our favorite,
the teapot.

00:12:49.290 --> 00:12:49.290
I don't know, you guys probably can't see

00:12:49.400 --> 00:12:55.030
I see this stuff way in the back there,
but bear with me for a sec.

00:12:57.120 --> 00:13:00.540
Okay, so Project Builder thinks
about it for a little while.

00:13:00.540 --> 00:13:02.850
This is,
here's the start of our application.

00:13:02.860 --> 00:13:08.740
We've got, Project Builder's made a whole
Cocoa App framework for me.

00:13:09.950 --> 00:13:17.000
Now what I'm going to do
is use Interface Builder

00:13:17.800 --> 00:13:27.010
is the director of the
OpenGL project development team.

00:13:27.010 --> 00:13:27.010
He's been working on the OpenGL project

00:13:27.280 --> 00:13:29.780
and the main menu and all
that kind of good stuff.

00:13:29.950 --> 00:13:35.040
So all I have to do to make a 3D
application is take this custom view,

00:13:35.040 --> 00:13:37.930
all right, so I'm going to stick
a custom view in there,

00:13:37.930 --> 00:13:41.800
and this big gray area here
is going to be my 3D view,

00:13:41.960 --> 00:13:43.900
in my 3D app.

00:13:44.420 --> 00:13:51.660
I have to, right now this is just a
basic view within Cocoa.

00:13:51.660 --> 00:13:55.240
So I have to tell it that
I want it to be a 3D view.

00:13:55.250 --> 00:13:57.440
I'm gonna do it in a couple steps.

00:13:57.440 --> 00:14:01.210
First I'm gonna say, alright,
I'm gonna take an NSOpenGL view,

00:14:01.210 --> 00:14:05.140
which is right there,
it's built into Interface Builder.

00:14:05.290 --> 00:14:08.150
But I also,
I need to subclass it 'cause I'm

00:14:08.150 --> 00:14:10.160
gonna do some of my own drawing.

00:14:10.220 --> 00:14:13.190
I'm gonna draw, guess what, a teapot.

00:14:14.200 --> 00:14:19.830
Okay, so I want to call this subclass
of OpenGL view a T view,

00:14:19.840 --> 00:14:25.300
and I'm going to get it to create
the H dot H and dot M file for me.

00:14:25.300 --> 00:14:28.910
And then I take the custom
view here and I say,

00:14:28.910 --> 00:14:28.910
all right,

00:14:29.770 --> 00:14:30.700
interface builder.

00:14:30.700 --> 00:14:33.260
I want you to make it
one of my TView classes.

00:14:33.280 --> 00:14:36.310
So now it says, you can't,
probably can't read that too well,

00:14:36.320 --> 00:14:37.960
but that says TView right there.

00:14:37.960 --> 00:14:41.250
So that means this view is now
one of my OpenGL view subclasses.

00:14:42.670 --> 00:14:43.240
Okay.

00:14:43.470 --> 00:14:49.070
And then I'm also going to tell it to
resize itself when the window resizes.

00:14:49.080 --> 00:14:50.650
Okay, save that.

00:14:50.650 --> 00:14:54.620
And I already made the class file,
so now I'm done.

00:14:54.680 --> 00:14:58.590
I basically just made
a 3D app and finished.

00:15:01.220 --> 00:15:02.860
Oh, quit.

00:15:02.860 --> 00:15:05.020
Interface builder.

00:15:05.110 --> 00:15:07.330
I have to do a little thing
behind the scenes here,

00:15:07.420 --> 00:15:10.110
and just don't pay attention
to this for a second.

00:15:10.200 --> 00:15:19.560
Uh-oh.

00:15:19.560 --> 00:15:22.890
Really don't pay attention
to this for a second.

00:15:27.490 --> 00:15:34.400
For some reason, Interface Builder puts
things in funny places.

00:15:34.400 --> 00:15:40.710
And, you know, well, that's

00:15:49.120 --> 00:15:51.760
Okay, this is, you know,
a little Unix shell hacking here.

00:15:51.760 --> 00:15:54.130
I'm sure you're all
very familiar with it.

00:15:54.240 --> 00:15:55.070
All right.

00:15:55.510 --> 00:16:00.230
Now,
to come back to my fabulous 3D project,

00:16:00.390 --> 00:16:04.950
I need to take those class files
that Interface Builder wrote for

00:16:05.160 --> 00:16:07.940
me and add them to the project.

00:16:07.940 --> 00:16:10.840
From what I can understand,
this is all going to be much more

00:16:10.840 --> 00:16:13.140
tightly integrated in later versions.

00:16:13.470 --> 00:16:14.300
Probably available on the web.

00:16:15.700 --> 00:16:17.350
Any project builder people here?

00:16:17.350 --> 00:16:18.530
No.

00:16:18.900 --> 00:16:21.800
Too bad.

00:16:22.980 --> 00:16:34.840
So now I have my classes here,
my 3D view, and I'm basically done.

00:16:34.840 --> 00:16:35.900
This is a 3D application.

00:16:35.900 --> 00:16:38.380
It's not real exciting yet.

00:16:40.410 --> 00:16:41.990
I know you guys are excited by code.

00:16:42.000 --> 00:16:42.960
I know you are.

00:16:42.960 --> 00:16:44.870
So, okay.

00:16:45.120 --> 00:16:48.340
Now, let me grab some,
do you guys all remember

00:16:48.340 --> 00:16:49.300
the galoping gourmet?

00:16:49.440 --> 00:16:52.590
This isn't going to work either.

00:16:52.590 --> 00:16:53.390
I've got

00:17:06.240 --> 00:17:10.020
I made some other files.

00:17:10.100 --> 00:17:12.540
I'm not going to hack
the whole thing now.

00:17:12.540 --> 00:17:14.530
So I'm going to take
these pre-built things.

00:17:15.230 --> 00:17:17.950
There are a bunch of
objects that I built.

00:17:18.040 --> 00:17:23.100
We can go through some of them that do a
lot of the 3D stuff to draw the teapot.

00:17:23.100 --> 00:17:26.190
And I'm going to add these
to the project as well.

00:17:26.700 --> 00:17:28.700
Okay, so that's done.

00:17:28.700 --> 00:17:33.260
And I have to add the thing
I always forget to add,

00:17:33.260 --> 00:17:35.210
which is this.

00:17:39.410 --> 00:17:43.340
Now,
I'm going to open my cut and paste source

00:17:43.660 --> 00:17:49.480
because isn't that what we all really do,
is we all just cut and paste.

00:17:49.480 --> 00:17:53.180
I don't think anybody ever
really types anything.

00:17:53.200 --> 00:17:59.170
Okay, copy,
and I want to go to here and...

00:17:59.300 --> 00:18:07.200
[Transcript missing]

00:18:07.680 --> 00:18:08.810
Okay, about half.

00:18:08.810 --> 00:18:09.920
C++ programmers?

00:18:09.920 --> 00:18:12.840
Nearly everybody, too bad.

00:18:12.840 --> 00:18:14.600
Straight C and stuff?

00:18:14.600 --> 00:18:16.540
Yeah, okay.

00:18:16.540 --> 00:18:18.540
Objective C is, well,
it's a little bit of a

00:18:18.720 --> 00:18:23.320
It's really object oriented,
so these are actual real method names.

00:18:23.320 --> 00:18:28.380
They're like your class
functions inside C++,

00:18:28.380 --> 00:18:33.090
only these are messaged at runtime,
so that's a big difference.

00:18:33.090 --> 00:18:35.700
Just a little side note.

00:18:35.700 --> 00:18:38.660
OK, so let me get some
implementation for that.

00:18:38.660 --> 00:18:40.670
Excuse me.

00:18:40.740 --> 00:18:42.690
First thing I'm gonna do is

00:18:43.480 --> 00:18:50.690
is, I have to include, whoops,
wrong file.

00:18:52.100 --> 00:18:54.130
: I have a problem with doing stuff live.

00:18:54.130 --> 00:18:57.610
First of all,
I have to include the standard headers,

00:18:57.740 --> 00:19:01.420
which in OS X are in OpenGL/OpenGL.h.

00:19:01.420 --> 00:19:03.530
So GL programmers here,
you've probably seen

00:19:03.530 --> 00:19:05.100
big GL there instead.

00:19:05.260 --> 00:19:09.990
So this is a, you know, it's a different,
it's always a pain.

00:19:10.120 --> 00:19:13.930
On every platform,
everybody puts their header

00:19:13.930 --> 00:19:16.200
files in a different spot.

00:19:16.200 --> 00:19:17.890
I don't know why, we just do.

00:19:17.890 --> 00:19:17.890
So, you know, you have to get over it.

00:19:20.260 --> 00:19:25.250
Okay, now I'm going to pull up
some implementation here.

00:19:25.400 --> 00:19:27.300
And I hope everybody can see this.

00:19:27.300 --> 00:19:31.440
You guys in the back,
can you see the code okay?

00:19:32.920 --> 00:19:33.800
All right.

00:19:33.800 --> 00:19:39.800
Now let me go over this real fast
and then we can build and run.

00:19:39.800 --> 00:19:47.450
This is not a super exciting program yet,
and you'll see what I mean in a minute.

00:19:47.460 --> 00:19:51.250
What happens here is you,
if you were in Jeff's talk you

00:19:51.330 --> 00:19:53.810
heard about the pixel format.

00:19:53.810 --> 00:19:57.870
That's a way to ask for a
certain kind of a drawable,

00:19:57.940 --> 00:20:02.280
in our case in OS 10 it's
a certain kind of a window,

00:20:02.280 --> 00:20:05.520
you want a particular pixel depth,
you want a Z buffer,

00:20:05.520 --> 00:20:09.530
a depth buffer stuck to it,
you want it hardware accelerated.

00:20:10.020 --> 00:20:16.340
And you send that off to the,
the Cocoa layer,

00:20:16.350 --> 00:20:18.860
which is in an OpenGL pixel format.

00:20:18.860 --> 00:20:21.090
That's this line right here.

00:20:22.160 --> 00:20:29.140
And you, it goes into the GL engine,
which queries the hardware, and says, OK,

00:20:29.160 --> 00:20:30.920
yes, I can support that.

00:20:30.920 --> 00:20:34.760
Or, here is the closest that I can get.

00:20:34.760 --> 00:20:37.980
So what I ask for here
is a depth size of one.

00:20:37.980 --> 00:20:40.980
Well, you, obviously I don't want
a one bit deep Z buffer.

00:20:40.980 --> 00:20:42.800
That would be dumb.

00:20:42.800 --> 00:20:45.450
What I'm asking for there is, is, is, is

00:20:45.800 --> 00:20:51.210
The smallest Z buffer that you have,
in this case I happen

00:20:51.210 --> 00:20:53.080
to know it's sixteen.

00:20:53.080 --> 00:20:54.630
I think we have sixteen
in thirty-two bit,

00:20:54.660 --> 00:20:56.680
and there are cards
that support different,

00:20:56.680 --> 00:20:59.750
different Z depths,
but this will give me a sixteen bit deep,

00:20:59.760 --> 00:21:00.990
deep Z buffer.

00:21:01.210 --> 00:21:04.780
I've asked for accelerated,
and this is just zero to,

00:21:04.780 --> 00:21:06.210
to terminate the list.

00:21:06.550 --> 00:21:07.500
Okay.

00:21:07.500 --> 00:21:10.160
So then I get the pixel format here.

00:21:10.160 --> 00:21:12.440
This generates one of
these pixel formats.

00:21:12.450 --> 00:21:18.100
And then,
since I'm a subclass of NSOpenGL view,

00:21:18.100 --> 00:21:24.350
let me do this, I just say, hey,
superclass, I'm all ready.

00:21:24.350 --> 00:21:26.220
I've got my pixel format.

00:21:26.220 --> 00:21:27.410
You know what the frame rect is.

00:21:27.410 --> 00:21:29.300
Go ahead and initialize yourself.

00:21:29.570 --> 00:21:29.980
Okay.

00:21:30.100 --> 00:21:31.260
That makes it 3D.

00:21:31.260 --> 00:21:32.820
Now I've hooked up everything.

00:21:32.820 --> 00:21:35.740
It takes care of hooking
up the GL context,

00:21:35.740 --> 00:21:35.740
everything I need.

00:21:36.260 --> 00:21:39.760
Then I have some responsibility
to draw something.

00:21:39.760 --> 00:21:41.750
Well,
that's done with this method right here.

00:21:41.750 --> 00:21:43.200
DrawRect.

00:21:43.280 --> 00:21:44.860
It gives me a rect to draw inside of.

00:21:44.900 --> 00:21:49.450
And all I'm going to do now, at first,
is set the clear color to green.

00:21:49.450 --> 00:21:50.980
It's RGB and alpha.

00:21:50.980 --> 00:21:54.260
And then I'm just going to say
clear the color buffer and the

00:21:54.320 --> 00:21:56.380
depth buffer and then GL finish.

00:21:56.400 --> 00:21:58.390
OK, so let's see if this works.

00:21:58.390 --> 00:22:02.360
I'm going to say build and run.

00:22:02.360 --> 00:22:08.630
And it,
it's worked before on another machine.

00:22:23.200 --> 00:22:26.170
Doing something.

00:22:26.210 --> 00:22:30.100
There it is.

00:22:30.100 --> 00:22:34.330
It's a 3D app.

00:22:35.510 --> 00:22:42.050
When you say, "Dave,
it's a green square." It's 3D.

00:22:42.050 --> 00:22:45.060
Okay.

00:22:45.060 --> 00:22:47.990
Well, let's do something more.

00:22:50.980 --> 00:22:55.410
Now what I'm going to do is
cut and paste more stuff.

00:22:55.430 --> 00:22:56.330
And I'll add a teapot.

00:22:56.410 --> 00:22:57.130
How about that?

00:22:57.280 --> 00:22:58.050
OK.

00:22:58.140 --> 00:23:02.750
I made a teapot object because, you know,
I know how to do that.

00:23:02.750 --> 00:23:07.590
And all I do here in my view,
I'm still inside my TVU object,

00:23:07.590 --> 00:23:09.750
my subclass of OpenGL view.

00:23:09.750 --> 00:23:16.750
I'm going to say I want to, teapot star,
oops.

00:23:19.650 --> 00:23:25.420
These little keyboards, you know,
they're annoying.

00:23:29.720 --> 00:23:33.880
First step in, oops.

00:23:33.890 --> 00:23:38.780
First step in making my teapot is,
in my view class, when it initializes,

00:23:38.800 --> 00:23:41.630
I'm just gonna go ahead and

00:23:43.140 --> 00:23:46.960
Make an instance of the teapot.

00:23:46.960 --> 00:23:52.680
And so in Objective-C,
this is the same as your C++ constructor.

00:23:53.270 --> 00:23:56.200
Right, so I have a teapot object that
I wrote that has constructors and

00:23:56.200 --> 00:23:58.890
destructors and stuff like that,
and except that they're not

00:23:58.900 --> 00:24:00.380
called that in Objective-C.

00:24:00.450 --> 00:24:02.720
And this is just calling the constructor.

00:24:02.720 --> 00:24:03.730
So, makes a new one.

00:24:03.790 --> 00:24:04.860
Okay?

00:24:04.860 --> 00:24:05.750
Big deal.

00:24:07.110 --> 00:24:13.340
Now I have to draw it,
but drawing it is going to get a little

00:24:13.340 --> 00:24:20.500
more complicated than my green square,
because the teapot is more complicated.

00:24:21.220 --> 00:24:23.420
The teapot object,
I implemented a draw method

00:24:23.450 --> 00:24:25.860
on the teapot object.

00:24:25.860 --> 00:24:26.410
Right here.

00:24:26.520 --> 00:24:30.760
So you just mess, send the message draw,
and it's gonna go and pump all the

00:24:30.870 --> 00:24:34.920
polygons and the texture information
and the color and stuff like that

00:24:35.000 --> 00:24:38.790
into the GL engine to draw the teapot.

00:24:38.800 --> 00:24:40.380
Pretty straight forward.

00:24:40.380 --> 00:24:45.960
Well, before that can happen,
I have to set up my 3D environment.

00:24:45.970 --> 00:24:48.500
And that's what all this stuff is.

00:24:48.500 --> 00:24:50.950
So the first thing I do, I

00:24:51.890 --> 00:24:54.310
is I need to set up a light.

00:24:54.400 --> 00:24:58.150
I'm going to put one light in this scene,
and this is how I do it.

00:24:58.220 --> 00:25:03.180
I put it somewhere in space
with the GL position parameter.

00:25:03.180 --> 00:25:05.420
Okay, and the GL position is here.

00:25:05.420 --> 00:25:07.720
It's 0, 0, 6, 6.

00:25:07.720 --> 00:25:14.200
Then I give the light some ambient
properties so it lights everything,

00:25:14.200 --> 00:25:16.380
and this is a good way
to avoid black screens,

00:25:16.380 --> 00:25:17.860
and, boy, you get them a lot in GL.

00:25:17.860 --> 00:25:21.160
Then there's the diffuse
component of the light,

00:25:21.730 --> 00:25:24.640
which is really just saying that
it's a white light by saying 1,

00:25:24.640 --> 00:25:25.440
1, 1 here.

00:25:26.790 --> 00:25:30.010
Okay,
and then I turn lighting on with this.

00:25:30.010 --> 00:25:32.960
Then I turn on the light that I made,
GL light zero.

00:25:32.960 --> 00:25:38.010
Then I have to say, okay, OpenGL,
I want you to handle all visible

00:25:38.150 --> 00:25:40.670
surface computation for me.

00:25:40.680 --> 00:25:43.390
Turn on the depth test so
that it doesn't show stuff,

00:25:43.390 --> 00:25:45.760
you know, inside out and weird like that.

00:25:45.780 --> 00:25:49.230
Then I want you to make sure the
teapot looks nice and smooth.

00:25:49.260 --> 00:25:53.050
I want you to clear the buffer,
the color buffer to all black.

00:25:53.120 --> 00:25:55.660
And that's the clear statement there.

00:25:56.700 --> 00:26:00.800
Then I'm gonna set up a
way to look at the teapot.

00:26:00.940 --> 00:26:04.190
Now I'm using glue perspective here
because it's a handy way to think

00:26:04.190 --> 00:26:08.010
about positioning the eye instead
of going straight to GL frustum,

00:26:08.020 --> 00:26:11.300
which is really a brain cramp.

00:26:38.180 --> 00:26:38.180
So I say I want a 60 degree
field of view that's,

00:26:38.180 --> 00:26:38.180
you know, like 35 millimeter camera.

00:26:38.180 --> 00:26:38.180
Then I take the drawing
rectangle that I'm given,

00:26:38.180 --> 00:26:38.180
which is the whole view,
and I figure out the

00:26:38.180 --> 00:26:38.180
aspect ratio by this.

00:26:38.180 --> 00:26:38.180
You know, it's width over height.

00:26:38.180 --> 00:26:38.180
It's pretty easy, X over Y.

00:26:38.180 --> 00:26:38.180
And then these are just parameters.

00:26:38.180 --> 00:26:38.180
You just keep changing them around
until you can see the picture.

00:26:42.560 --> 00:26:43.500
is the moderator.

00:26:44.500 --> 00:26:44.500
Okay.

00:26:44.500 --> 00:26:52.280
And then... Then, I'm going to position
the teapot in space,

00:26:52.280 --> 00:26:56.500
six units down the negative Z axis.

00:26:56.500 --> 00:27:00.220
And I always like to think of units in,
like, real, like, meters, you know.

00:27:00.220 --> 00:27:02.020
So I say six meters.

00:27:02.020 --> 00:27:05.290
So that way, when I get a black picture,
I can go and get a meter stick,

00:27:05.290 --> 00:27:07.960
and I can put it on the ground,
and I can measure six meters,

00:27:07.960 --> 00:27:11.580
and then I can stand and measure me,
and say, "Oh, that's why I have the black

00:27:11.580 --> 00:27:14.690
picture." 'Cause these six units are,

00:27:15.800 --> 00:27:27.900
[Transcript missing]

00:27:36.100 --> 00:27:48.700
[Transcript missing]

00:27:49.510 --> 00:27:51.420
does it all automatically.

00:27:51.480 --> 00:27:53.580
And that's all just from Cocoa.

00:27:55.820 --> 00:27:56.700
Okay.

00:27:56.790 --> 00:27:59.440
But it doesn't move with the mouse.

00:27:59.440 --> 00:28:01.100
Okay.

00:28:01.100 --> 00:28:05.930
So how about if I make
it move with the mouse?

00:28:05.930 --> 00:28:05.930
Yeah.

00:28:05.930 --> 00:28:05.930
Okay.

00:28:05.930 --> 00:28:05.930
Okay.

00:28:05.930 --> 00:28:05.930
All right.

00:28:08.420 --> 00:28:12.340
Fortunately, I made another object,
which is a trackball.

00:28:12.340 --> 00:28:14.990
And it's the virtual trackball.

00:28:16.870 --> 00:28:20.600
I'm going to show you
a little object for,

00:28:20.600 --> 00:28:25.090
you know,
it's the thing that takes the 2D mouse

00:28:25.090 --> 00:28:29.050
motions and turns it into 3D rotations.

00:28:29.050 --> 00:28:35.360
Actually, it turns them into quaternions,
which are really cool.

00:28:35.360 --> 00:28:38.450
I recommend you read up on those.

00:28:38.450 --> 00:28:39.370
When I figured out how to do them,
I felt really smart.

00:28:39.370 --> 00:28:39.370
It's like math.

00:28:43.600 --> 00:28:45.680
Okay,
so I'm just adding a bunch of stuff here.

00:28:45.680 --> 00:28:49.940
I'm happily copying and pasting.

00:28:49.940 --> 00:28:55.370
And what I'm doing is adding a bunch of
interface stuff onto this TVU object.

00:28:55.920 --> 00:29:03.060
The interesting thing here is that
I can add these member variables.

00:29:04.020 --> 00:29:07.720
And by the way, you know,
I'm an old Microsoft hacker,

00:29:07.840 --> 00:29:09.720
and Apple hired me.

00:29:09.870 --> 00:29:12.320
So I put M underbar in
front of all my classes.

00:29:12.420 --> 00:29:14.980
That's a real no-no in Apple, apparently.

00:29:15.890 --> 00:29:17.790
and David Y.

00:29:17.940 --> 00:29:23.670
Anyways, so I have, I'm going to put a
trackball object in here.

00:29:24.360 --> 00:29:26.300
And then I'm going to add some rotations.

00:29:26.300 --> 00:29:28.610
So before you saw that I had no rotation.

00:29:28.800 --> 00:29:31.190
I just, I just moved the teapot,
that's all with GL translate.

00:29:31.970 --> 00:29:35.940
Now what I'm going to do is I'm
going to make some rotations.

00:29:36.330 --> 00:29:40.670
GL stores its rotation in angle axis,
which is almost a

00:29:40.670 --> 00:29:44.610
quaternion but not quite,
and

00:29:45.060 --> 00:29:48.180
Well,
I'll talk to some people about that.

00:29:48.180 --> 00:29:51.980
So then I'm gonna add this
rotate by method that the

00:29:51.980 --> 00:29:56.450
trackball object is gonna call,
and I'm going to take the

00:29:56.550 --> 00:30:01.620
standard NSView methods,
that are already in Cocoa,

00:30:01.620 --> 00:30:04.560
and I'm gonna add some code,
my own code underneath them, alright.

00:30:04.590 --> 00:30:06.810
So this is mouse down, mouse up,
and mouse dragged,

00:30:06.880 --> 00:30:08.500
and I think you can probably
guess what these do.

00:30:08.500 --> 00:30:12.210
This is when the mouse is clicked,
this method gets called,

00:30:12.420 --> 00:30:15.180
and when the mouse is let up,
this gets called, and when it's dragged,

00:30:15.180 --> 00:30:19.040
this gets called,
with the events and stuff like that.

00:30:19.040 --> 00:30:23.030
So your object sits there and gets
messages from the event system in Cocoa.

00:30:24.870 --> 00:30:31.560
Alright, so let's go ahead and add the
implementation of these things.

00:30:31.560 --> 00:30:35.290
First, I have to initialize

00:30:35.700 --> 00:30:43.120
is the director of the
OpenGL project management team.

00:30:43.120 --> 00:30:43.120
Dave Springer is the director of
the OpenGL project management team.

00:30:43.120 --> 00:30:43.120
Dave Springer is the director of
the OpenGL project management team.

00:30:44.200 --> 00:30:59.700
[Transcript missing]

00:31:00.760 --> 00:31:02.920
Remember that linear algebra stuff
you were all supposed to study?

00:31:02.920 --> 00:31:05.370
Yeah, this is it.

00:31:05.440 --> 00:31:06.740
Okay?

00:31:06.740 --> 00:31:09.810
Learn it.

00:31:09.870 --> 00:31:13.140
You'll feel smarter.

00:31:16.680 --> 00:31:21.980
Alright,
now I'm going to add the rotations.

00:31:21.980 --> 00:31:23.880
One thing you have to
remember when doing OpenGL,

00:31:23.880 --> 00:31:27.920
if you've done 3D programming, you know,
you got Foley and Van Damme and

00:31:27.920 --> 00:31:31.090
you read it all and it's really
cool and you can write renders

00:31:31.210 --> 00:31:34.880
and stuff and make models and,
you know, you're cool, right?

00:31:34.880 --> 00:31:38.240
You can make 3D, it's great.

00:31:38.240 --> 00:31:42.560
Well,
the thing to remember is that in GL,

00:31:42.560 --> 00:31:45.010
the matrix functions are backwards.

00:31:45.760 --> 00:31:46.700
I don't know why.

00:31:46.700 --> 00:31:48.320
They just, they're backwards.

00:31:48.320 --> 00:31:54.130
So in normal life, you would say, OK,
first I want to take the teapot

00:31:54.130 --> 00:31:57.930
and I'm going to rotate it by
whatever rotation it currently has.

00:31:58.030 --> 00:32:00.020
Then I'm going to add the little
bit that the trackball does and then

00:32:00.020 --> 00:32:01.780
I'm going to move it away from me.

00:32:02.030 --> 00:32:02.180
All right.

00:32:02.250 --> 00:32:03.460
That's normally what you'd say.

00:32:03.460 --> 00:32:06.280
Well, in GL you have to do it backwards.

00:32:06.280 --> 00:32:10.290
So I like to think of,
if you're standing in the code at

00:32:10.290 --> 00:32:14.810
the teapot and looking backwards,
it's sort of almost forwards.

00:32:16.590 --> 00:32:17.500
Well, you can figure it out.

00:32:17.500 --> 00:32:20.370
So, all right.

00:32:20.440 --> 00:32:23.500
Let's just say that that'll work.

00:32:23.500 --> 00:32:24.490
OK.

00:32:24.650 --> 00:32:26.570
Then I'm gonna take
all this code and this,

00:32:26.760 --> 00:32:27.540
this stuff.

00:32:27.960 --> 00:32:28.220
Oops.

00:32:28.530 --> 00:32:30.210
Uh oh.

00:32:30.430 --> 00:32:37.420
I showed off my secret that
I wanted to save till the end.

00:32:42.280 --> 00:32:46.100
So let's talk about what
this code does here.

00:32:46.100 --> 00:32:49.540
The rotate by is going to be
called from the trackball object.

00:32:49.760 --> 00:32:51.180
And do you want to see
what that looks like,

00:32:51.280 --> 00:32:52.030
the trackball object?

00:32:52.070 --> 00:32:53.200
It's cool.

00:32:53.200 --> 00:32:57.110
It uses quaternions.

00:32:57.110 --> 00:32:57.110
It's like math and stuff.

00:33:06.740 --> 00:33:06.740
So, it does this junk.

00:33:06.740 --> 00:33:06.740
And then somewhere in here,

00:33:07.600 --> 00:33:09.130
It's going to call, aha.

00:33:09.130 --> 00:33:09.570
OK.

00:33:09.570 --> 00:33:12.400
It figures,
see it has stuff like ATAN too.

00:33:12.400 --> 00:33:13.320
It's cool.

00:33:16.060 --> 00:33:19.680
It's gonna, it figures out a rotation.

00:33:19.680 --> 00:33:21.620
The trackball, you know,
I don't really need to explain this,

00:33:21.620 --> 00:33:23.880
but you've got the, I'm gonna anyways.

00:33:23.880 --> 00:33:28.790
The mouse defines a 2D vector
which you then map to a sphere.

00:33:28.870 --> 00:33:30.330
is a developer at OpenGL.

00:33:30.330 --> 00:33:32.720
He's been working on
a lot of stuff for us.

00:33:32.720 --> 00:33:35.790
I'm sure he's been working
on a lot of stuff for us.

00:33:51.210 --> 00:33:52.860
Okay, so let's look back at the view.

00:33:52.860 --> 00:33:56.720
This is still my NSOpenGL view,
which is an NS view.

00:33:56.720 --> 00:33:59.960
And what I do in,
when the mouse goes down,

00:33:59.990 --> 00:34:02.100
is I tell the trackball to start.

00:34:02.390 --> 00:34:05.800
And I say, here,
here's where the mouse was clicked.

00:34:05.800 --> 00:34:07.320
So the view knows where
the mouse was clicked.

00:34:07.320 --> 00:34:09.630
The view is handling all the 2D stuff,
the mouse events and

00:34:09.630 --> 00:34:10.610
everything like that.

00:34:10.620 --> 00:34:11.860
It's coming into the view.

00:34:11.860 --> 00:34:15.930
Then I send that.

00:34:15.930 --> 00:34:15.930
I, I, I send

00:34:16.120 --> 00:34:33.820
The event is, is a, is an object,
in Cocoa.

00:34:33.820 --> 00:34:33.820
I say what's the location in the window,
so it does all the window

00:34:33.820 --> 00:34:33.820
transformation for me,
and I get an x,

00:34:33.820 --> 00:34:33.820
y that's relative to window coordinates.

00:34:33.820 --> 00:34:33.820
I give that to the trackball,
the trackball starts.

00:34:33.820 --> 00:34:33.820
Then, as I drag the trackball around,

00:34:34.010 --> 00:34:37.830
This...wait...that looks better.

00:34:39.790 --> 00:34:44.240
I say, first of all, I'm going to do some
drawing inside this view,

00:34:44.240 --> 00:34:46.700
so I have to do some
things according to Cocoa.

00:34:46.700 --> 00:34:49.590
I have to lock focus on myself.

00:34:49.590 --> 00:34:53.580
Then, track, I say trackball,

00:34:54.010 --> 00:34:57.580
Roll to the new mouse location,
because as I get these mouse dragged,

00:34:57.610 --> 00:35:00.770
it's telling me the x,
y of where the mouse is.

00:35:01.850 --> 00:35:05.670
And there's the event location window,
so I give that to trackball.

00:35:05.740 --> 00:35:08.370
Now trackball,
when trackball does roll to,

00:35:08.500 --> 00:35:11.040
it's gonna figure out
all that cool math stuff,

00:35:11.040 --> 00:35:13.720
and then it's gonna say
rotate by to this view.

00:35:13.720 --> 00:35:17.010
It's gonna message this view
back with the new rotations,

00:35:17.010 --> 00:35:18.170
which is right here.

00:35:18.350 --> 00:35:20.930
And then those get accumulated up here.

00:35:26.220 --> 00:35:28.650
So this all sounds pretty good.

00:35:28.890 --> 00:35:33.090
Let's see what happens when
the rubber meets the road.

00:35:33.100 --> 00:35:39.140
Okay.

00:35:39.220 --> 00:35:41.250
Hang on to your pocket protectors.

00:35:53.730 --> 00:35:54.080
And that's it.

00:35:54.170 --> 00:35:56.470
Now I can--oops.

00:35:56.470 --> 00:35:59.460
That was the wrong thing to do.

00:36:02.560 --> 00:36:04.000
Do you want me to get
Project Builder back alive here?

00:36:04.000 --> 00:36:05.940
I can put a brick texture map on that.

00:36:05.940 --> 00:36:06.500
Yeah.

00:36:06.590 --> 00:36:08.910
Why not?

00:36:09.440 --> 00:36:09.500
We've got time.

00:36:09.500 --> 00:36:13.470
Okay.

00:36:13.620 --> 00:36:17.620
Why is it,
why is it saying the same thing?

00:36:17.880 --> 00:36:18.680
Yeah.

00:36:18.700 --> 00:36:22.140
Yes, it's rotating with the teapot,
I think.

00:36:29.750 --> 00:36:30.200
Hang on a second.

00:36:30.200 --> 00:36:34.880
Let me get this up here and then--I've
got to finish the scripted part.

00:36:34.880 --> 00:36:35.700
And then--

00:36:39.940 --> 00:36:41.740
Because now you're asking
for stuff I haven't tried.

00:36:41.740 --> 00:36:44.920
That's really scary.

00:36:44.920 --> 00:36:46.800
This is bad enough.

00:36:46.800 --> 00:36:47.940
Alright.

00:36:47.940 --> 00:36:49.940
Let's go here.

00:36:49.940 --> 00:36:58.930
And then I put a little method
on my teapot object that says,

00:36:58.930 --> 00:36:58.930
in, in

00:37:00.200 --> 00:37:05.380
is the director of the
OpenGL project management team.

00:37:05.380 --> 00:37:05.380
Dave Springer is the director of
the OpenGL project management team.

00:37:05.380 --> 00:37:05.380
Dave Springer is the director of
the OpenGL project management team.

00:37:07.120 --> 00:37:07.490
There.

00:37:07.490 --> 00:37:08.880
See, I typed it in, too.

00:37:08.880 --> 00:37:10.440
I didn't even cut and paste.

00:37:10.440 --> 00:37:10.560
How do you like that?

00:37:10.560 --> 00:37:11.500
All right.

00:37:11.500 --> 00:37:12.500
Build and run.

00:37:12.500 --> 00:37:21.490
Okay.

00:37:29.140 --> 00:37:31.480
Okay,
so now you want me to make it so that

00:37:32.290 --> 00:37:35.370
the light doesn't move with the teapot?

00:37:39.500 --> 00:37:40.740
Well, you guys are pushy.

00:37:40.740 --> 00:37:45.180
This is, okay.

00:37:45.180 --> 00:37:47.430
Well, we have to go to Q&A.

00:37:54.210 --> 00:37:58.460
I specify the texture
inside of the teapot object,

00:37:58.460 --> 00:38:02.900
which is right here.

00:38:02.900 --> 00:38:05.270
These are the teapot coordinates.

00:38:08.930 --> 00:38:12.920
Okay, this is kind of an interesting
little Cocoa tidbit,

00:38:12.920 --> 00:38:14.140
which is,

00:38:16.150 --> 00:38:18.050
I use, there's NSBundles.

00:38:18.050 --> 00:38:21.330
People work with those before?

00:38:21.350 --> 00:38:22.950
There's CFBundles.

00:38:23.090 --> 00:38:23.930
Yeah.

00:38:23.930 --> 00:38:29.500
They're a way of accessing, see,
applications are built in

00:38:29.500 --> 00:38:31.610
what are called app wrappers,
because we don't have

00:38:31.630 --> 00:38:34.210
resource forks in OS X.

00:38:35.200 --> 00:38:40.830
So you can't just take your stuff
you need to append to your app and

00:38:40.830 --> 00:38:42.940
all your little adornments that
go with your app and stick them in

00:38:42.940 --> 00:38:44.980
a resource fork and call it good.

00:38:44.980 --> 00:38:48.100
You have to put them in the
Unix file system somewhere.

00:38:48.100 --> 00:38:52.700
Well, NSBundle and CFBundle are ways to
abstract away the fact that you

00:38:52.700 --> 00:38:56.410
have to do that on 10 and not on 9.

00:38:57.760 --> 00:39:04.630
And what I do here is I say
find the brick.rgb resource.

00:39:04.980 --> 00:39:08.220
So that's just a file
sitting in the file system.

00:39:08.220 --> 00:39:15.720
Then, I have this file called retexture,
or this function I mean called retexture,

00:39:15.720 --> 00:39:18.040
which goes and sucks
up all the RGB pixels.

00:39:20.230 --> 00:39:21.030
Excuse me.

00:39:21.100 --> 00:39:26.370
So now I have a big array,
which is my texture map.

00:39:27.480 --> 00:39:36.440
And here is where I set all the
stuff to turn the texturing on.

00:39:36.440 --> 00:39:39.520
And if you were in Jeff's talk,
you saw a lot of this stuff already.

00:39:39.520 --> 00:39:41.160
So this turns on a 2D texture.

00:39:41.160 --> 00:39:46.050
I want to repeat in S, repeat in T,
use linear filters.

00:39:46.140 --> 00:39:50.820
Then here is where I say,

00:39:51.200 --> 00:39:52.420
What the texture is.

00:39:52.420 --> 00:39:57.380
So M texture is a pointer to
that big array of RGB pixels,

00:39:57.380 --> 00:40:01.600
and this is where I tell
it to use the texture.

00:40:01.600 --> 00:40:05.600
And then I turn that switch on down here.

00:40:05.650 --> 00:40:08.820
This is the set use texture
method you saw before.

00:40:08.820 --> 00:40:09.700
So this is the implementation.

00:40:09.700 --> 00:40:11.120
I just turn a texture flag on.

00:40:11.210 --> 00:40:13.300
That's all.

00:40:20.010 --> 00:40:21.490
Okay, why don't we go to Q&A?

00:40:21.490 --> 00:40:26.000
Because I think, yeah.

00:40:26.000 --> 00:40:28.450
Okay, that's it.

00:40:28.520 --> 00:40:29.590
Let's go to Q&A.