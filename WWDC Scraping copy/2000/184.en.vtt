WEBVTT

00:00:17.850 --> 00:00:18.880
My name is Blaine Garst.

00:00:18.950 --> 00:00:23.130
I'm the manager of one of
the Java groups at Apple.

00:00:23.130 --> 00:00:28.550
And what we're going to talk
about today is Java in Depth.

00:00:29.220 --> 00:00:32.280
I want to just jump into it.

00:00:32.330 --> 00:00:35.100
I'm actually going to try
to have some fun today.

00:00:35.310 --> 00:00:37.440
So hopefully you'll
have some fun with me.

00:00:37.440 --> 00:00:41.250
We're going to try to do a
few demos and show you what's

00:00:41.250 --> 00:00:47.400
really going on inside Mac OS X,
inside the Java.

00:00:47.960 --> 00:00:53.340
The demo gods struck early.

00:00:53.430 --> 00:00:56.590
At 8:00 this morning,
the system wouldn't boot

00:00:56.600 --> 00:00:58.700
off of our boot disk.

00:00:58.700 --> 00:01:00.870
We got that figured out at 8:30.

00:01:00.920 --> 00:01:04.750
At 10:00 to 8:00,
we figured out that our login usernames

00:01:04.750 --> 00:01:08.700
weren't quite the same as what they
were the last time we ran the demo.

00:01:08.700 --> 00:01:12.630
They're striking early,
but I think by the time

00:01:12.630 --> 00:01:15.860
we get to that point,
we'll have things pretty much in control.

00:01:17.520 --> 00:01:23.230
So, so far at this conference you
heard from Steve Naroff about

00:01:23.300 --> 00:01:27.800
the overview of what we're doing,
where we've been, where we are now,

00:01:27.800 --> 00:01:30.450
and some of what we're trying to go,
where we're trying to go.

00:01:30.500 --> 00:01:34.360
You may have slipped over and listened
to the QuickTime talk after that,

00:01:34.540 --> 00:01:38.420
found out how to do really cool
graphics programming on Mac OS X,

00:01:38.500 --> 00:01:40.500
much as you do on 9.

00:01:40.500 --> 00:01:46.520
You may have gone to
Pete Steinhauer's talk on how

00:01:46.530 --> 00:01:50.650
to cook up a Java application.

00:01:50.650 --> 00:01:50.650
I'm not going to try to
repeat very much of...

00:01:50.910 --> 00:01:55.990
those previous slides nor the performance
talk either but what i do want to talk

00:01:55.990 --> 00:02:01.590
about is um some of the stuff that's
that's uh that didn't get talked about

00:02:01.590 --> 00:02:06.190
so this is the talk where you get to
ask questions where we're going to try

00:02:06.330 --> 00:02:11.690
to give you detail more detail more
type that when project builder doesn't

00:02:11.690 --> 00:02:17.800
quite do what it's supposed to be doing
for you quite yet some of the tricks

00:02:17.960 --> 00:02:23.520
we use or some of the things we have
to use in the interim until it does so

00:02:24.430 --> 00:02:25.220
It's 9 o'clock.

00:02:25.510 --> 00:02:27.000
Have you had your Java yet?

00:02:27.110 --> 00:02:29.000
Pop quiz.

00:02:29.160 --> 00:02:32.540
What do the following
screenshots all have in common?

00:02:32.670 --> 00:02:36.700
Setup Assistant,
the first program that runs

00:02:36.700 --> 00:02:38.600
after you boot Mac OS X.

00:02:38.720 --> 00:02:42.430
Network Manager,
when you find yourself in a strange

00:02:42.730 --> 00:02:45.410
and unworldly NFS environment.

00:02:45.530 --> 00:02:50.400
This is the program you
run to untangle yourself.

00:02:50.620 --> 00:02:56.990
Blast app, source code,
and a game that ships on your

00:02:57.370 --> 00:02:59.200
Ships on your CD.

00:02:59.530 --> 00:03:04.860
An applet, perhaps you're kind of
getting the idea here.

00:03:04.860 --> 00:03:08.300
JBuilder, you saw that running yesterday.

00:03:08.300 --> 00:03:10.800
It unfortunately is not
shipping on your CD,

00:03:10.800 --> 00:03:14.140
and you're supposed to go talk
to Blake if you would like to see

00:03:14.240 --> 00:03:16.290
it shipping on your CD sometime.

00:03:16.300 --> 00:03:20.300
QuickTime Digital Media,
as I mentioned before.

00:03:20.300 --> 00:03:24.280
And of course, the answer is they're
all written in Java.

00:03:24.290 --> 00:03:27.700
Now, this isn't supposed to
be all that remarkable,

00:03:27.750 --> 00:03:28.300
is it?

00:03:28.440 --> 00:03:31.470
But I think it's really kind of neat.

00:03:31.770 --> 00:03:34.720
Java, I mean,
these applications are kind of

00:03:34.720 --> 00:03:39.720
like when you walk up to Mac OS X,
they're like the walls of the house.

00:03:39.720 --> 00:03:43.190
I mean, you know, you've got a TV room,
you've got a kitchen,

00:03:43.190 --> 00:03:45.510
you've got your living room and stuff.

00:03:45.590 --> 00:03:48.810
I mean, when you're inside the house of
Mac OS X running these applications,

00:03:48.840 --> 00:03:52.500
you don't really think about how they
run or you're not really supposed to.

00:03:53.270 --> 00:03:57.150
But for the folks of
you inside this room,

00:03:57.150 --> 00:04:01.440
when the wiring is what
is important to you,

00:04:01.440 --> 00:04:04.300
that is why you're here.

00:04:04.300 --> 00:04:08.730
So what we're going to talk about is
what's inside the walls of that house,

00:04:08.730 --> 00:04:11.200
you know, the Java wiring in detail.

00:04:11.200 --> 00:04:14.890
So as a brief overview,
we're going to talk about the

00:04:14.930 --> 00:04:17.570
wiring in a certain degree of depth.

00:04:17.660 --> 00:04:22.060
We're going to talk about once
you get your app up and running.

00:04:22.060 --> 00:04:22.720
And.

00:04:23.040 --> 00:04:25.750
More or less working, you know,
how to run a little bit of

00:04:25.750 --> 00:04:28.810
profiling stuff against it,
where we'd like to go with that,

00:04:28.880 --> 00:04:31.120
where we where we think
we'll be going with that.

00:04:31.300 --> 00:04:35.730
How to do some debugging right now,
both for your benefit

00:04:35.850 --> 00:04:37.940
and possibly for ours.

00:04:39.510 --> 00:04:44.560
There are a few things that you
do to augment your applications,

00:04:44.560 --> 00:04:48.250
so we're going to try to go through a
little bit more detail on how to do that.

00:04:48.370 --> 00:04:51.400
In other words, how to use JNI in our
kind of environment,

00:04:51.550 --> 00:04:55.530
how you have to do it today versus
how we'd like to see you do it,

00:04:55.730 --> 00:04:57.400
and a few other topics.

00:04:57.400 --> 00:04:59.400
So let's just get going.

00:04:59.560 --> 00:05:03.350
When you write your Java application,
what you think about are

00:05:03.540 --> 00:05:07.820
the classes you write and,
of course, when the program is running,

00:05:07.820 --> 00:05:09.400
the data it takes up.

00:05:09.400 --> 00:05:15.400
You can't just go and read data
forever because eventually,

00:05:15.400 --> 00:05:19.400
despite what we do in terms of memory
reclamation and things like that,

00:05:19.400 --> 00:05:22.970
if you're just leaking memory
by holding onto it forever,

00:05:22.970 --> 00:05:24.380
it's not going to work.

00:05:24.410 --> 00:05:28.240
The rest of the system, however,
is a little bit more complex.

00:05:28.810 --> 00:05:29.400
So, you're going to have to do a lot of
work to get the data out of your system.

00:05:29.460 --> 00:05:33.370
What's under those covers is the stuff
that we generally worry about at Apple,

00:05:33.380 --> 00:05:37.400
and we try to make the bottom part of
this diagram as efficient as possible.

00:05:37.400 --> 00:05:42.360
So I'd just like to talk... so let
me go through the diagram first.

00:05:42.400 --> 00:05:44.680
So, of course,
you've got the JDK classes,

00:05:44.680 --> 00:05:47.860
all... I can't remember how
many thousands of them there

00:05:47.860 --> 00:05:49.400
are that you might be using.

00:05:49.400 --> 00:05:53.140
The runtime,
which does all that synchronization

00:05:53.160 --> 00:05:58.400
and garbage collection and compilation,
the compiler below that.

00:05:58.400 --> 00:05:58.790
And then the runtime,
which does all that synchronization

00:05:58.790 --> 00:05:59.400
and garbage collection and compilation,
the compiler below that.

00:05:59.480 --> 00:06:03.400
On the side, what I have in green are
JNI support libraries,

00:06:03.400 --> 00:06:05.220
both the ones that we
use to keep things going,

00:06:05.220 --> 00:06:06.400
and I just put two up there.

00:06:06.400 --> 00:06:09.390
We have about nine.

00:06:09.400 --> 00:06:12.490
And the JNI libraries that
you might be writing as well,

00:06:12.490 --> 00:06:15.400
because you're bringing across some
legacy code and stuff like that.

00:06:15.400 --> 00:06:19.300
Below us all are the frameworks
that are common to Mac OS X.

00:06:19.430 --> 00:06:24.180
Things like Carbon,
things like the kernel, things like,

00:06:24.180 --> 00:06:26.610
you know,
all that other stuff that's below

00:06:26.610 --> 00:06:28.390
us that we all are clients of.

00:06:28.400 --> 00:06:32.400
Now, private data is a little thin there.

00:06:32.400 --> 00:06:35.700
It's actually... private data
extends all the way down the

00:06:35.700 --> 00:06:37.310
side of that diagram in truth.

00:06:37.400 --> 00:06:43.400
I just wanted to put up the sort of
the Java private data in this diagram.

00:06:43.440 --> 00:06:46.400
But let's talk about the
Java VM first of all.

00:06:46.400 --> 00:06:52.320
If you were at Pete's talk yesterday,
you saw that...

00:06:52.800 --> 00:06:58.900
The Java VM framework is sort of the
fuse panel for Java inside Mac OS X.

00:06:59.030 --> 00:07:05.320
We have inside that framework
lots and lots of stuff.

00:07:05.410 --> 00:07:10.140
We have the virtual machines
that execute your Java bytecodes.

00:07:10.240 --> 00:07:13.810
We have all of our system
jars in the classes folder,

00:07:14.020 --> 00:07:15.400
things like that.

00:07:15.490 --> 00:07:19.770
We have the JNI support libraries wedged
into some other little subdirectory.

00:07:19.990 --> 00:07:23.690
We have headers because this
is a C environment for those

00:07:23.690 --> 00:07:25.520
of you writing JNI code.

00:07:25.620 --> 00:07:27.200
We have a few headers for that.

00:07:27.390 --> 00:07:30.500
Actually, probably on DP4,
a few more headers than we

00:07:30.500 --> 00:07:32.150
really need to have out there.

00:07:32.240 --> 00:07:36.590
So the ones that you should be thinking
about are pretty much just JNI.

00:07:36.860 --> 00:07:41.680
We have the Java home with the system
properties file and there's a whole

00:07:41.680 --> 00:07:46.100
bunch of stuff and I'll let you
wander around and take a look at that.

00:07:46.220 --> 00:07:54.910
But that is sort of the
moral equivalent to,

00:07:54.910 --> 00:07:56.150
if you're an MRJ programmer,
the MRJ libraries folder.

00:07:56.750 --> 00:08:02.230
So in DP4, I'll tell you the truth.

00:08:02.500 --> 00:09:19.300
[Transcript missing]

00:09:19.550 --> 00:09:25.230
So we do some trickery such that that's
all that any program that needs to

00:09:25.230 --> 00:09:27.460
do JNI ever sees when it does a link.

00:09:27.800 --> 00:09:33.820
That way, if it ever comes to pass that
you need to switch your Java VMs,

00:09:34.070 --> 00:09:39.250
you can reset that one symbolic link,
which in Macintosh terms is an

00:09:39.250 --> 00:09:43.940
alias really on HFS file systems,
to be the VM of your choice.

00:09:43.940 --> 00:09:47.390
So we ship, in some ways, three VMs.

00:09:47.440 --> 00:09:52.320
We ship Hotspot Client
Compiler as the default VM.

00:09:52.350 --> 00:09:57.770
We also have a debug version
of that same technology,

00:09:57.770 --> 00:09:59.860
and I'll tell you a little
bit about that later,

00:09:59.860 --> 00:10:02.930
and again, the classic interpreter.

00:10:02.940 --> 00:10:06.940
So there are several ways to get at that.

00:10:06.940 --> 00:10:10.040
I really hope that you'd never
have to reset that symbolic link,

00:10:10.040 --> 00:10:12.940
honestly, because we do have lots
of ways to get to it.

00:10:13.000 --> 00:10:13.940
Here are two of them.

00:10:13.940 --> 00:10:21.120
One is you can simply type
-classic or -hotspot in order to

00:10:21.180 --> 00:10:28.210
have the JNI invocation code pick
the right library to go after,

00:10:28.390 --> 00:10:31.370
load up, and initialize with.

00:10:32.010 --> 00:10:37.650
If you can't get to it via the command
line or that's inconvenient for you,

00:10:37.730 --> 00:10:40.900
you can use an environment variable.

00:10:40.950 --> 00:10:47.900
The Java JVM library environment
variable is also looked at.

00:10:47.950 --> 00:10:54.660
And in that last line,
this is the preferred way to get to the,

00:10:54.660 --> 00:10:58.900
say, the debug version of Hotspot.

00:10:59.010 --> 00:11:02.900
Now, I want to caution you,
the debug version of Hotspot is

00:11:02.900 --> 00:11:07.900
slower because it has thousands
of assertions compiled in.

00:11:07.960 --> 00:11:13.820
And so lots of C++ inlining that makes
things really fast isn't inlined,

00:11:13.820 --> 00:11:16.900
and so it's considerably slower.

00:11:16.900 --> 00:11:17.900
But you're not really going to get to it.

00:11:17.900 --> 00:11:20.890
You don't really care about
that if you're at that stage.

00:11:20.990 --> 00:11:22.900
And I'll tell you when you
might get to that stage.

00:11:22.900 --> 00:11:31.900
So here's a little bit about profiling.

00:11:33.280 --> 00:11:40.130
The JDK 1.2,
the Java 2 specification for the runtime,

00:11:40.320 --> 00:11:42.200
has a very nice interface.

00:11:42.200 --> 00:11:46.000
It's called the
Java Virtual Machine Profiling Interface.

00:11:46.050 --> 00:11:53.750
And the implementation of that for the
classic interpreter works pretty well.

00:11:54.140 --> 00:11:59.160
But the implementation for that
in the hotspot interpreter does

00:11:59.410 --> 00:12:02.000
not quite run there in your DP4.

00:12:02.070 --> 00:12:09.060
We are working really hard with our
folks in developer technical support

00:12:09.210 --> 00:12:14.830
to figure out a pathway to get you
some updates to what's on your CD.

00:12:15.070 --> 00:12:18.630
I mean, the bits that are on your
CD are about two weeks old.

00:12:18.900 --> 00:12:20.800
So that's a lifetime for us.

00:12:20.890 --> 00:12:25.960
So what we have running up on
stage and what you see on your

00:12:25.960 --> 00:12:28.780
CDs is slightly different.

00:12:28.810 --> 00:12:30.800
And it's our goal to try to
get you what we have on stage.

00:12:30.800 --> 00:12:37.800
Including some project builder stuff
out to you via the web very soon.

00:12:37.800 --> 00:12:42.760
So in the interim, however,
we're going to be working

00:12:42.760 --> 00:12:42.760
on a lot of things.

00:12:56.580 --> 00:12:56.580
So Hotspot itself is just chock
full of very interesting technology.

00:12:56.580 --> 00:12:56.580
So one of the things that makes Hotspot
really good is that it chooses which

00:12:57.340 --> 00:13:04.090
methods need to be compiled on
the fly and based on their usage

00:13:04.680 --> 00:13:09.880
patterns which methods can and
ought to be inlined inside of there.

00:13:09.880 --> 00:13:13.440
In order to do that,
it has its own sampling

00:13:13.440 --> 00:13:15.210
technology to figure out,
"Hey,

00:13:15.210 --> 00:13:18.610
what's going on?" So every now and then,
clock ticks wise,

00:13:18.770 --> 00:13:21.700
it goes and takes a look at the
stacks and figures out which

00:13:21.700 --> 00:13:23.600
methods are being interpreted.

00:13:23.690 --> 00:13:30.780
And so an interesting side effect of that
is that they've enabled that in sort of a

00:13:30.780 --> 00:13:40.070
profiling kind of a manner such that you
can get to that using the -xprof flag.

00:13:40.100 --> 00:13:44.860
So we actually have used that
recently in the past two weeks.

00:13:44.920 --> 00:13:48.720
We've used that to improve
the launch time of ADPT-based

00:13:48.720 --> 00:13:51.200
applications by two or three seconds.

00:13:51.200 --> 00:13:53.360
So what I'd like to do now is--.

00:13:53.360 --> 00:13:56.940
I'll show you a little
bit of a demo of that.

00:13:56.940 --> 00:14:01.710
And I'm going to have Jens
Alfke join me on stage now.

00:14:03.330 --> 00:14:06.290
Jens has a few demos picked up for us.

00:14:06.300 --> 00:14:11.900
But if we could get-- there we go.

00:14:11.960 --> 00:14:15.970
Let's put this one away.

00:14:16.890 --> 00:14:19.330
This demo is going to be in a terminal.

00:14:19.400 --> 00:14:22.040
We're not supposed to do that,
but it's really the only way

00:14:22.040 --> 00:14:24.240
to show off X-Prof right now.

00:14:24.380 --> 00:14:27.460
So I have a command line all set up here.

00:14:27.460 --> 00:14:30.510
What I've done is I've CD'd
into the directory of one of

00:14:30.580 --> 00:14:33.740
the silly little sample applets
that you all know and love.

00:14:33.740 --> 00:14:35.760
This one is Arctest.

00:14:35.870 --> 00:14:38.960
And I'm going to run Java command.

00:14:38.960 --> 00:14:43.200
I'm paranoid because this is a demo,
so I'm going to force it to use Hotspot.

00:14:43.300 --> 00:14:47.030
And I'm using the magic -X-Prof flag.

00:14:47.140 --> 00:14:49.760
And then the regular Java arguments,
in this case just Arctest,

00:14:49.870 --> 00:14:51.560
the name of the main class.

00:14:51.650 --> 00:14:54.400
So what's going to happen is that
it's going to launch Arctest normally,

00:14:54.400 --> 00:14:58.960
but every time a thread finishes,
it's going to spit out to the console

00:14:58.960 --> 00:15:01.300
some profiling data about that thread.

00:15:01.420 --> 00:15:03.960
So as we launch Arctest,
which is going to come

00:15:04.060 --> 00:15:07.740
up in the background,
you'll first see the main thread finish,

00:15:07.740 --> 00:15:10.440
and it dumps out some stuff there.

00:15:10.590 --> 00:15:12.160
Here's Arctest.

00:15:12.230 --> 00:15:13.140
Do a little bit of stuff with it.

00:15:13.210 --> 00:15:14.970
that we...

00:15:15.390 --> 00:15:17.670
quit Arctas,
and then all the other threads finish,

00:15:17.670 --> 00:15:20.540
and we see their profiling
information get dumped out too.

00:15:20.540 --> 00:15:22.200
So what is this stuff?

00:15:22.380 --> 00:15:24.970
It's really pretty easy to
interpret compared to the

00:15:24.970 --> 00:15:27.160
profiling output from JDK 1.1.

00:15:27.360 --> 00:15:30.160
It's not quite as in-depth,
but it's fairly easy to read.

00:15:30.160 --> 00:15:34.110
So first, we've got the thread name here,
main.

00:15:34.360 --> 00:15:36.600
And first it's going to show
us the profiling data for the

00:15:36.730 --> 00:15:39.260
stuff that got interpreted,
as opposed to the methods

00:15:39.260 --> 00:15:40.760
that were running native.

00:15:41.190 --> 00:15:45.790
It says that the thread
took 4.13 seconds,

00:15:45.950 --> 00:15:47.380
244 ticks.

00:15:47.420 --> 00:15:48.990
And this confused me at first.

00:15:49.110 --> 00:15:52.860
These are not ticks as in Mac OS ticks,
which are a sixtieth of a second.

00:15:52.910 --> 00:15:54.850
Tick here just means samples.

00:15:54.980 --> 00:15:57.930
So it depends on how
many times it sampled it.

00:15:58.540 --> 00:16:04.330
We spent 18.3% of the time that
this thread was active in JDirect

00:16:04.330 --> 00:16:08.310
library OS X dot find symbol,
which is part of the

00:16:08.310 --> 00:16:14.860
implementation of JDirect 3,
which actually is what goes out

00:16:14.910 --> 00:16:19.190
and maps the native methods to
the actual Carbon or system or

00:16:19.190 --> 00:16:19.190
whatever functions that back them up.

00:16:19.620 --> 00:16:22.740
And the numbers here mean that
we spent zero seconds inside

00:16:22.740 --> 00:16:25.430
of interpreted Java code,
or zero ticks were inside

00:16:25.430 --> 00:16:27.000
of interpreted Java code.

00:16:27.100 --> 00:16:30.310
Twenty-six ticks were
inside of native code.

00:16:30.490 --> 00:16:31.060
Which makes sense.

00:16:31.160 --> 00:16:32.570
We spent a whole bunch
of time loading Carbon,

00:16:32.570 --> 00:16:34.360
basically, is what this means.

00:16:34.360 --> 00:16:38.050
And JDirect looking at Carbon methods
and doing some JNI stuff under

00:16:38.200 --> 00:16:39.830
the hood to plug them up.

00:16:39.940 --> 00:16:43.530
Then we spent 11.3% of our
time down in view.setGeometry,

00:16:43.650 --> 00:16:47.460
which is part of the core clipping
code for heavyweight components.

00:16:47.460 --> 00:16:50.750
And again,
that was all spent down in native code.

00:16:51.100 --> 00:16:55.850
Down below here, the next group here is
for the same thread,

00:16:55.850 --> 00:16:57.800
but this is compiled code.

00:16:57.810 --> 00:17:01.070
So this is time spent in actual
methods that have been jitted or

00:17:01.160 --> 00:17:03.230
compiled into native code by Hotspot.

00:17:03.390 --> 00:17:06.060
And you can see there's
almost nothing here.

00:17:06.120 --> 00:17:07.660
The main thread just
doesn't run very long.

00:17:07.660 --> 00:17:08.950
It doesn't loop that much.

00:17:08.960 --> 00:17:11.050
It's mostly doing initialization stuff.

00:17:11.170 --> 00:17:13.430
Since that's the thread where
the app will actually create

00:17:13.510 --> 00:17:16.910
the components and initializes
the toolkit and all that stuff.

00:17:17.040 --> 00:17:20.760
So these are a bunch of little threads
that aren't doing very much stuff.

00:17:20.990 --> 00:17:24.900
AWTEventQ0, you'll find is generally
where most of the real work is

00:17:25.000 --> 00:17:26.880
happening in any Java application.

00:17:26.960 --> 00:17:29.330
That's the event dispatch thread.

00:17:30.740 --> 00:17:35.990
Here we spent 20% of our time down in
cgsgraphics.awt2quartz draw a line.

00:17:36.140 --> 00:17:38.770
And so this is where we actually
call into Quartz to draw lines.

00:17:38.820 --> 00:17:41.750
And so you'd expect, yeah,
in your typical kind of AWT type app,

00:17:41.750 --> 00:17:44.340
that's where you're going to
be spending a lot of your time.

00:17:44.420 --> 00:17:46.370
So as I said,
this is pretty straightforward stuff.

00:17:46.420 --> 00:17:49.730
It's not going to give you the entire
stack crawl of how you got to this method

00:17:49.730 --> 00:17:53.360
where you were spending all of your time,
the way the old profiler did.

00:17:53.500 --> 00:17:55.940
And it does have to be
run from a terminal,

00:17:56.000 --> 00:17:58.840
but both of those limitations
are being worked on.

00:17:58.840 --> 00:18:02.370
And I think by the time we ship,
things will be better.

00:18:04.930 --> 00:18:05.330
Thanks, Jens.

00:18:05.340 --> 00:18:07.110
Get the other slide back up.

00:18:07.120 --> 00:18:16.180
Okay, so the traditional profiling
stuff inside the Java VM,

00:18:16.180 --> 00:18:19.780
HProf,
we actually haven't run that recently,

00:18:19.780 --> 00:18:22.140
so on Classic we believe it works.

00:18:22.140 --> 00:18:26.700
So we strongly advise you
to join that mailing list,

00:18:26.830 --> 00:18:31.840
Mac OS X Java, that our DTS folks run.

00:18:31.840 --> 00:18:34.960
Alan Samuels will get up and
tell you where that's at again.

00:18:34.960 --> 00:18:40.140
And join us and help tell us
what's there and what's useful to

00:18:40.140 --> 00:18:41.840
you and share some tips on that.

00:18:45.440 --> 00:18:50.530
We strongly believe that the
JVMPI is going to be a super

00:18:50.530 --> 00:18:56.010
interface that third parties,
some of whom may be sitting

00:18:56.020 --> 00:18:59.840
in this room right now,
are going to be able to take

00:18:59.840 --> 00:19:01.400
advantage of right away.

00:19:01.410 --> 00:19:04.370
We have talked with some
folks about this already,

00:19:04.400 --> 00:19:08.180
and it's our strong hope that
we get some rather awesome

00:19:08.180 --> 00:19:10.400
tools coming onto our platform.

00:19:10.400 --> 00:19:15.220
The profiling interface lets you,
when it's fully operational,

00:19:15.220 --> 00:19:19.400
tells you all kinds of things
about object allocation,

00:19:19.400 --> 00:19:23.400
the stacks that were in existence
when objects came along.

00:19:23.400 --> 00:19:30.460
It's a very, very powerful interface,
and we think that this is going to bring

00:19:30.460 --> 00:19:36.400
development on X a leap forward compared
to some of the C-based environments

00:19:36.400 --> 00:19:40.400
where these tools are harder to use.

00:19:40.400 --> 00:19:42.990
to accomplish.

00:19:43.860 --> 00:19:47.120
So,
just as in wiring up a house or wiring

00:19:47.120 --> 00:19:50.560
up a circuit board or something,
you have debugging to do.

00:19:50.630 --> 00:19:56.020
So, again,
what you have in TP4 is a classic

00:19:56.020 --> 00:19:58.780
interpreter that we've been
shipping for a long time that has

00:19:58.780 --> 00:20:00.700
a debugger interface that works.

00:20:00.950 --> 00:20:01.700
So,
just as in wiring up a house or wiring

00:20:01.700 --> 00:20:02.880
up a circuit board or something,
you have debugging to do.

00:20:02.880 --> 00:20:03.840
So, again, with Hotspot,
we have one that almost

00:20:03.840 --> 00:20:04.700
works but doesn't quite.

00:20:04.700 --> 00:20:10.700
And so, there are folks last week working
hard on getting the debugger

00:20:10.700 --> 00:20:11.700
interface up and running.

00:20:11.730 --> 00:20:13.900
Unfortunately,
we didn't quite get it where we

00:20:14.000 --> 00:20:15.690
needed it to be for this demo today.

00:20:15.700 --> 00:20:20.700
So, I can't quite show you
JVMDI running on Hotspot today,

00:20:20.750 --> 00:20:23.700
but you can expect that that
will be there very shortly.

00:20:23.700 --> 00:20:27.000
And again, we're going to try to figure
out how to get updates to you so

00:20:27.090 --> 00:20:28.500
that you can see that as well.

00:20:28.700 --> 00:20:30.700
So, what's on your disk?

00:20:30.820 --> 00:20:32.070
is

00:20:33.120 --> 00:20:37.400
A debugger interface that
works in a classic environment.

00:20:37.480 --> 00:20:42.850
So again, you have to go to the command
line to get use of that.

00:20:42.880 --> 00:20:45.910
You have to go to JDB to see that.

00:20:46.180 --> 00:20:52.590
So you should be using JDB-T classic
to fire up the runtime and get to set

00:20:52.900 --> 00:20:55.890
breakpoints and that kind of stuff.

00:20:55.990 --> 00:20:58.270
Obviously,
we don't think this is the way you

00:20:58.270 --> 00:21:00.340
really ought to be doing debugging.

00:21:00.410 --> 00:21:06.050
And so we've been working with folks
on the project builder team to make

00:21:06.200 --> 00:21:08.600
this a much more pleasant environment.

00:21:08.690 --> 00:21:11.560
And we do have some
success stories with that.

00:21:11.740 --> 00:21:15.500
And I think Jens is going to share one
of those with you a little bit later.

00:21:15.520 --> 00:21:18.330
So the truth is,
you're going to have to find out-- if

00:21:18.330 --> 00:21:22.000
you need to do JDB-level debugging,
you're going to have to find out

00:21:22.000 --> 00:21:25.600
how to launch this thing from
the command line at the moment.

00:21:28.140 --> 00:21:32.350
So, if you happen to write
those JNI libraries,

00:21:32.390 --> 00:21:35.000
then you're writing in C.

00:21:35.020 --> 00:21:38.490
And so, it might happen that you don't
write perfect code the first time.

00:21:38.490 --> 00:21:44.870
It might happen that you'll be interested
in running GDB on that part of your

00:21:44.870 --> 00:21:48.970
program that's written in C that gets
called into across the JNI interface.

00:21:49.000 --> 00:21:53.780
In which case,
you need to learn how to launch

00:21:53.780 --> 00:21:56.780
GDB on the real Java binary.

00:21:56.780 --> 00:22:03.310
So, the real Java binary is kind of
wedged off in that little moral

00:22:03.310 --> 00:22:05.000
equivalent of MRJ libraries.

00:22:05.000 --> 00:22:08.000
It's wedged in the Java VM framework.

00:22:08.000 --> 00:22:13.960
And so, mentally concatenate the
first two lines of this slide.

00:22:13.990 --> 00:22:18.000
The font on this system,
or for the slides, wasn't all that good.

00:22:18.000 --> 00:22:18.990
So,
you might want to learn how to do that.

00:22:19.210 --> 00:22:22.620
You essentially have
to GDB the true Java,

00:22:22.620 --> 00:22:28.840
you know, bring up executable in order to
get attached to that process.

00:22:29.000 --> 00:22:31.790
There are a few things that you can do.

00:22:32.000 --> 00:22:35.970
If you run with classic,
you don't have to run with classic.

00:22:36.010 --> 00:22:39.150
But if you run with classic,
the next two lines,

00:22:39.150 --> 00:22:42.720
the call dump threads and
the call dump monitors work.

00:22:43.050 --> 00:22:46.610
And these are, to some degree,
the equivalents to some

00:22:46.610 --> 00:22:48.000
of the MRJD commands.

00:22:48.000 --> 00:22:52.650
That let you inside the runtime
and see what's going on in

00:22:52.680 --> 00:22:54.990
a little bit more detail.

00:22:55.000 --> 00:23:02.820
The last line is simply
GDB syntax for doing a backtrace

00:23:02.820 --> 00:23:06.670
on all different threads.

00:23:07.000 --> 00:23:09.870
So, that'll give you some
idea of what's going on,

00:23:09.870 --> 00:23:13.000
which ones have some of your
code in the middle of it.

00:23:14.460 --> 00:23:19.020
So I'm a little bit, I mean,
I'm optimistic, but I'm also a realist.

00:23:19.200 --> 00:23:25.380
So given that the hotspot that we have,
oh, now we're going to skip the

00:23:25.380 --> 00:23:26.400
debugging demo right now.

00:23:26.400 --> 00:23:29.370
We're going to do that
a little bit later.

00:23:29.750 --> 00:23:33.760
Given that the hotspot you
have is actually fairly young,

00:23:33.760 --> 00:23:39.450
it's very mature technology and it runs

00:23:41.300 --> 00:23:45.850
Everything we can throw at it,
except that it's not fully functional,

00:23:46.080 --> 00:23:47.280
but it's very solid.

00:23:47.280 --> 00:23:51.190
But there might be some occasions
where you'll trip across something

00:23:51.810 --> 00:23:53.800
that doesn't quite work right.

00:23:53.800 --> 00:23:57.970
So one thing you can do for us is help,
you know, for yourselves,

00:23:57.970 --> 00:24:01.390
but is determine whether or
not some strange crash you

00:24:01.390 --> 00:24:03.110
see is your fault or ours.

00:24:03.200 --> 00:24:07.290
So if your Java code crashes,
one thing that you could do right away

00:24:07.360 --> 00:24:09.970
is just try running it in Classic.

00:24:10.440 --> 00:24:15.120
Since it's a whole different technology
underneath and it may well work there.

00:24:15.170 --> 00:24:18.360
That's not proof positive
that it's our fault,

00:24:18.360 --> 00:24:21.000
but it's a good signal that it might be.

00:24:21.090 --> 00:24:26.280
So if your code runs in Classic but
doesn't with the default hotspot,

00:24:26.670 --> 00:24:31.810
you can do us a favor by running it
with that debug version of hotspot.

00:24:31.810 --> 00:24:34.460
Because, again,
there's lots of assertions in there and

00:24:34.490 --> 00:24:39.320
if there's something funky going on,
which might actually be your fault,

00:24:39.340 --> 00:24:40.300
if you're passing in something
that's not your fault,

00:24:40.300 --> 00:24:40.360
you're going to have
to run it in Classic.

00:24:40.360 --> 00:24:40.370
Blaine Garst Blaine Garst: Yeah.

00:24:40.400 --> 00:24:44.470
So if you're passing in, say,
a zero for a JNI environment pointer,

00:24:44.470 --> 00:24:48.380
the debug version of hotspot's going
to catch that and throw an assertion,

00:24:48.410 --> 00:24:51.550
whereas the compiled version
of that won't or might not.

00:24:51.700 --> 00:24:54.930
So there are some cases where it
might catch some things that are your

00:24:55.060 --> 00:24:58.960
fault and it certainly will catch
things earlier if they are our fault.

00:24:58.960 --> 00:25:03.070
And so obviously if you find
something that is our fault,

00:25:03.110 --> 00:25:04.910
we want to know about it.

00:25:05.050 --> 00:25:07.960
And so I'm putting my email address
up there right now for that.

00:25:07.960 --> 00:25:10.340
You can mail us an email
at jni.com/hotspot.

00:25:10.390 --> 00:25:14.790
me the details of that,
and I'll see that we get

00:25:14.830 --> 00:25:16.700
some attention paid to that.

00:25:16.840 --> 00:25:20.010
Clearly,
if you're on our discussion list,

00:25:20.010 --> 00:25:24.950
Mac OS X Java discussion list,
folks out there might well want to

00:25:24.950 --> 00:25:28.190
know a little bit about it also.

00:25:28.190 --> 00:25:32.710
So, again,
this is how you set up the Hotspot

00:25:36.090 --> 00:25:38.800
There is an underbar
between hotspot and debug.

00:25:38.880 --> 00:25:42.730
It's hardly visible on this monitor,
but anyway.

00:25:42.920 --> 00:25:44.690
So don't forget those underbars.

00:25:44.700 --> 00:25:47.060
They are important.

00:25:47.140 --> 00:25:51.740
OK, so again, this is a Unix environment.

00:25:52.320 --> 00:25:59.210
How many of you out there have
been exclusively MRJ programmers?

00:26:00.250 --> 00:26:01.740
Okay, there's just a few hands.

00:26:01.740 --> 00:26:03.990
And so let me try to ask
a different question.

00:26:04.110 --> 00:26:07.130
How many of you have already
programmed in sort of a

00:26:07.130 --> 00:26:09.440
UNIX or a Windows environment?

00:26:09.500 --> 00:26:10.440
The vast majority.

00:26:10.440 --> 00:26:12.160
So you all know what this
is going to be about.

00:26:12.350 --> 00:26:15.440
Okay, so how do you build, you know,
a JNI support library?

00:26:15.680 --> 00:26:18.730
You write some Java code with natives,
you compile it with Java C,

00:26:18.730 --> 00:26:23.190
you build the C header as necessary,
you then copy the C header

00:26:23.190 --> 00:26:26.770
over as your template and
start hacking in your C code.

00:26:26.770 --> 00:26:28.280
You build the library.

00:26:28.280 --> 00:26:32.330
About the only thing that's
different about this on Mac OS X is

00:26:32.330 --> 00:26:35.460
that the ending library,
you know, the end of the library

00:26:35.800 --> 00:26:38.160
There are two different types
of libraries on Mac OS X.

00:26:38.160 --> 00:26:40.940
One's called a bundle,
and the other's called-- there

00:26:40.960 --> 00:26:42.890
are several kinds of libraries.

00:26:42.940 --> 00:26:45.040
There are two types of dynamic libraries.

00:26:45.240 --> 00:26:46.960
One is called a bundle,
and the other is called

00:26:46.960 --> 00:26:48.030
a dynamic library.

00:26:48.100 --> 00:26:52.110
So we happen to like
the bundle variant of--

00:26:52.490 --> 00:26:54.890
the libraries for our purposes.

00:26:54.980 --> 00:26:58.530
And so from a command line viewpoint,
this is a very simple way

00:26:58.530 --> 00:26:59.700
to build one of those guys.

00:26:59.700 --> 00:27:01.980
You just remember the dash bundle magic.

00:27:02.100 --> 00:27:06.910
But, I mean, this is kind of messy,
and what we really want to do is put all

00:27:07.080 --> 00:27:09.480
this stuff inside of Project Builder.

00:27:09.540 --> 00:27:11.760
And so one of our friends
on the Project Builder team,

00:27:11.760 --> 00:27:16.060
Dave Ewing, has been staying up
till midnight his time,

00:27:16.060 --> 00:27:18.750
which is Denver time,
trying to make this stuff happen.

00:27:18.890 --> 00:27:21.490
So I'd like to bring Jens back
up on stage to see what some

00:27:21.670 --> 00:27:25.920
of this might look like inside
Project Builder where it belongs.

00:27:36.170 --> 00:27:38.860
Let's get the monitor.

00:27:39.090 --> 00:27:40.970
Can you put it on both screens this time?

00:27:41.090 --> 00:27:44.090
I don't know whether that's easy or not.

00:27:52.260 --> 00:27:57.200
I'm bringing up a PBX project
showing a very simple JNI example.

00:27:58.180 --> 00:28:01.980
Blaine wrote the JNI example,
and then Dave Ewing made the PBX project,

00:28:02.190 --> 00:28:07.550
so I'm just here to be
Vanna White and show it off.

00:28:07.890 --> 00:28:09.340
We have a couple of files here.

00:28:09.340 --> 00:28:13.320
We have calcengine.c,
which is our native code.

00:28:13.420 --> 00:28:16.620
It just contains a couple of JNI methods.

00:28:17.440 --> 00:28:20.440
I'm not going to go into too much
detail because there's not time in

00:28:20.440 --> 00:28:22.060
this talk to really explain JNI.

00:28:22.060 --> 00:28:25.830
A number of you have probably used it,
and there are some very good books

00:28:25.840 --> 00:28:27.800
out there and a Java soft tutorial.

00:28:27.940 --> 00:28:34.930
CalcEngine.java, then-- and besides,
you probably can't read the text on here

00:28:34.930 --> 00:28:34.930
anyway unless you're in the front row.

00:28:35.100 --> 00:28:37.160
So we have a couple of
native methods in here,

00:28:37.220 --> 00:28:40.430
which are what are going to get
bound into that native code.

00:28:40.930 --> 00:28:43.670
What's interesting in here,
and this is just the tantalizing

00:28:43.780 --> 00:28:46.590
promise because you can't
actually do this in DP4,

00:28:46.590 --> 00:28:52.360
but you're getting used to that line,
is we have three targets here.

00:28:52.460 --> 00:28:54.970
We have the Java target.

00:28:56.040 --> 00:29:00.750
which has the
calcengine.java source file.

00:29:00.750 --> 00:29:03.470
And we have a shell script here
that's been cleverly set up.

00:29:03.570 --> 00:29:07.020
So we're going to run bin sh and
we're going to run this script

00:29:07.590 --> 00:29:11.760
that calls user bin java h,
run that on calcengine.

00:29:11.910 --> 00:29:13.360
So that's the post-processing step.

00:29:13.360 --> 00:29:17.900
So after we compile the Java,
we run java h on it,

00:29:18.050 --> 00:29:21.590
which then generates the
header file declaring what

00:29:21.590 --> 00:29:21.590
the native JNI functions are.

00:29:22.310 --> 00:29:26.820
Then we have a second target
here for our JNI library itself,

00:29:26.940 --> 00:29:32.030
which is a regular kind of C target
containing the calcengine.c source file,

00:29:32.090 --> 00:29:36.590
the calcengine.h file that got
generated by the Java target.

00:29:36.750 --> 00:29:39.230
And this one,
the product type here is a library,

00:29:39.420 --> 00:29:43.760
which is going to build a regular
OS X bundle dynamic library.

00:29:44.790 --> 00:29:47.700
Then we have a third target,
and if you're used to Code Warrior,

00:29:47.700 --> 00:29:49.040
this will be second nature.

00:29:49.040 --> 00:29:51.000
We have a third target
called CalcExample,

00:29:51.000 --> 00:29:54.000
which is just an aggregate target.

00:29:54.170 --> 00:29:57.580
And the other targets
appear down in here,

00:29:57.580 --> 00:29:59.210
which means that they are linked to it.

00:29:59.350 --> 00:30:02.580
They're dependent on it,
or it's dependent on them.

00:30:02.610 --> 00:30:06.950
So building the CalcExample
target will then build first the

00:30:07.260 --> 00:30:11.920
Java target and then the JNI target
and cause everything to be generated.

00:30:12.040 --> 00:30:15.520
And as Blaine alluded to earlier,
the demo gods were not happy.

00:30:15.600 --> 00:30:19.420
We sacrificed beefy giblets to them,
but they really wanted the tuna

00:30:19.430 --> 00:30:21.140
and egg and became very angry.

00:30:21.140 --> 00:30:22.820
So we can't actually build this stuff.

00:30:22.820 --> 00:30:25.620
It's actually more like
file permission issues.

00:30:25.700 --> 00:30:27.720
But I would have shown it running.

00:30:27.900 --> 00:30:31.020
But you can just kind of imagine that,
yes, it's going to kind of

00:30:31.100 --> 00:30:33.140
run and do its stuff.

00:30:34.940 --> 00:30:39.700
We will ship this demo project in this
fabled upcoming release where we have

00:30:39.800 --> 00:30:42.840
the PBX support for doing the JNI stuff.

00:30:42.900 --> 00:30:45.900
And that's it.

00:30:48.740 --> 00:30:49.700
Did I say PBX?

00:30:49.700 --> 00:30:50.700
Yes.

00:30:50.700 --> 00:30:51.700
Okay.

00:30:51.700 --> 00:30:59.820
So, I think one thing in there that you
probably maybe noticed was that we had

00:30:59.820 --> 00:31:06.100
like four methods that were wrapped,
like add, subtract, divide, multiply.

00:31:06.100 --> 00:31:09.290
And I mean,
those were the names of the C functions,

00:31:09.290 --> 00:31:13.000
and those were in fact the names
of the native methods that were

00:31:13.000 --> 00:31:14.880
going to give you access to that.

00:31:15.030 --> 00:31:21.650
So, if you've been on MRJ before,
you know that that kind of a mapping

00:31:21.650 --> 00:31:24.350
is like kind of tedious in some ways.

00:31:24.380 --> 00:31:29.250
So,
there is in MRJ a better way to do that,

00:31:29.320 --> 00:31:32.580
and that has been called JDirect.

00:31:32.580 --> 00:31:37.790
And so, we have JDirect 3 on
Mac OS X that both helps us out

00:31:37.930 --> 00:31:40.300
and can help you out with that.

00:31:40.300 --> 00:31:43.990
And so,
JDirect 3 is pretty much the same.

00:31:44.210 --> 00:31:48.670
as JDirect 2 from your perspective,
not entirely the same,

00:31:48.710 --> 00:31:51.060
but pretty doggone the same.

00:31:51.100 --> 00:31:55.120
And that's due to the heroic
efforts of Nick Kledzik,

00:31:55.160 --> 00:31:58.970
who put together a JDirect 3 package,
which is pretty much entirely

00:31:58.970 --> 00:32:00.290
rewritten underneath.

00:32:00.540 --> 00:32:04.130
But from your perspective,
it's not going to be that much different.

00:32:04.470 --> 00:32:09.340
I will go a little bit into what
is different about JDirect 3.

00:32:09.340 --> 00:32:12.850
So, along with the metaphor,
JDirect 3 is kind of like

00:32:12.850 --> 00:32:14.390
your virtual electrician.

00:32:14.530 --> 00:32:18.200
You bring this electrician in and he
does all this wiring for you and you

00:32:18.200 --> 00:32:20.350
don't have to do very much work at all.

00:32:20.400 --> 00:32:23.210
So,
if you've got gobs of existing code or if

00:32:23.220 --> 00:32:27.890
you look under you in those C frameworks
that are below us all and find C code

00:32:28.000 --> 00:32:32.020
that's kind of interesting to you,
and this has been true in the

00:32:32.130 --> 00:32:36.400
past and it probably may well
still be true in the future,

00:32:36.400 --> 00:32:40.150
and you happen to be a little bit
decaffeinated as a programmer and don't

00:32:40.150 --> 00:32:44.360
want to write all those little methods,
even if Project Builder makes

00:32:44.360 --> 00:32:47.850
it just easy as you can think,
the solution is to let

00:32:47.850 --> 00:32:50.250
JDirect possibly write those.

00:32:50.400 --> 00:32:53.720
So,
we use C functions that glue between the

00:32:53.910 --> 00:33:01.100
native JNI argument type implementations
and the C functions that are being

00:33:01.100 --> 00:33:06.410
supplied to you somewhere else.

00:33:07.130 --> 00:33:12.880
For the AWT, as I said,
this is technology that we've

00:33:12.880 --> 00:33:15.000
been using for a long time.

00:33:15.000 --> 00:33:18.560
QuickTime also uses this technology.

00:33:18.650 --> 00:33:21.560
And so, you know, it's been there before.

00:33:21.560 --> 00:33:25.890
We know about it,
and you can count on it as well.

00:33:25.970 --> 00:33:34.130
So briefly, how do you get this virtual
electrician to do its job?

00:33:34.130 --> 00:33:34.130
And so,

00:33:34.570 --> 00:33:41.600
What it needs is the name of the
library that contains those C functions,

00:33:41.650 --> 00:33:46.120
You know, can't-- it's not going to go
grep and end M the system to

00:33:46.120 --> 00:33:47.780
find the functions for you.

00:33:47.780 --> 00:33:51.020
And you need to tell it which class
has those native declarations.

00:33:51.020 --> 00:33:52.540
That's a pretty simple contract, right?

00:33:52.640 --> 00:33:57.550
Tell it where the library is,
tell it-- tell it what functions you

00:33:57.560 --> 00:34:00.300
want written for-- on your behalf.

00:34:00.300 --> 00:34:03.800
And so,
you have to tell it in these two ways.

00:34:03.800 --> 00:34:07.990
You tell the name of the library in
a static string inside that class

00:34:07.990 --> 00:34:11.040
that has those native methods.

00:34:11.040 --> 00:34:13.780
There are other options as well.

00:34:13.780 --> 00:34:17.350
And then you tell the-- then you
hand the class itself to the,

00:34:17.350 --> 00:34:20.180
you know, to the constructor of
this Jdirect function.

00:34:20.180 --> 00:34:24.090
So, I actually have a little bit of code
here to show you how easy it is.

00:34:26.820 --> 00:34:29.820
You can read the code, right?

00:34:30.070 --> 00:34:35.970
The first line is that string,
JDirect_MacOS10.

00:34:37.240 --> 00:34:39.260
has the value prime.dialibs.

00:34:39.260 --> 00:34:43.250
Presumably,
prime has this very fancy super calc

00:34:43.250 --> 00:34:46.300
engine kind of technology underneath it.

00:34:46.640 --> 00:34:49.540
You tell,
you ask JDirect in the second line,

00:34:49.540 --> 00:34:52.620
second functional line,
to go ahead and build

00:34:52.620 --> 00:34:54.080
those stub functions.

00:34:54.080 --> 00:34:56.270
So you hand it prime.class.

00:34:56.490 --> 00:34:59.750
Now,
note that this is the prime.class itself,

00:34:59.760 --> 00:35:07.080
so you're just using that fancy 1.1.class
directive to hand it prime.class.

00:35:07.100 --> 00:35:09.950
You hand an instance of,
or hand the class description

00:35:09.950 --> 00:35:11.280
into JDirect itself.

00:35:11.280 --> 00:35:16.280
JDirect uses reflection to go find out
what methods to write native codes for,

00:35:16.280 --> 00:35:20.900
allocates some C memory,
writes some C functions in that C memory,

00:35:20.900 --> 00:35:24.220
jams them into a funky
little JNI object itself,

00:35:24.220 --> 00:35:28.830
and hands you back the handle to all
those gizmos in that thing called,

00:35:29.000 --> 00:35:31.120
that we store in linkage.

00:35:31.120 --> 00:35:33.730
So you actually need to
hold on to that object,

00:35:33.960 --> 00:35:37.080
that linkage object,
because if you're going to do that,

00:35:37.080 --> 00:35:37.080
you're going to have to
do it in a different way.

00:35:37.080 --> 00:35:39.510
If you don't,
it will be garbage collected.

00:35:39.510 --> 00:35:43.050
And if it's garbage collected and
you try to access those functions,

00:35:43.050 --> 00:35:45.510
well,
we're not going to help you with that.

00:35:45.560 --> 00:35:50.320
So the last line of this is
the actual method that we're,

00:35:50.320 --> 00:35:53.280
in this example, trying to do.

00:35:53.280 --> 00:35:55.870
If I would have had more
lines on this slide,

00:35:55.870 --> 00:36:00.050
I would have done the four methods
that were in the earlier example.

00:36:00.120 --> 00:36:06.330
So anyway, JDirect 3 is, in this example,
absolutely simple to use.

00:36:07.140 --> 00:36:11.540
So you ought to note, though,
that JDirect 3 is a rather

00:36:11.540 --> 00:36:13.610
interesting set of technology.

00:36:13.680 --> 00:36:16.950
So you can have,
there's a slight difference

00:36:16.950 --> 00:36:21.440
in the types of arguments you
can use with it in JDirect 3.

00:36:21.440 --> 00:36:24.120
You can use scalars and arrays,
and arrays of scalars,

00:36:24.120 --> 00:36:27.580
although arrays of Booleans,
I understand, aren't quite there.

00:36:27.580 --> 00:36:30.080
You cannot pass objects, however.

00:36:30.080 --> 00:36:35.120
We don't have any way to really map
objects in any intelligent fashion.

00:36:35.140 --> 00:36:39.040
What we're doing under the covers
is... In the case of arrays,

00:36:39.040 --> 00:36:42.770
is we're actually copying the
bits out of the runtime into

00:36:42.830 --> 00:36:46.630
a privately allocated memory,
rummaging with it,

00:36:46.770 --> 00:36:49.080
and then when we're done with it,
copying it back in.

00:36:49.080 --> 00:36:52.990
This is the contract that JNI has
for gaining access to arrays.

00:36:53.020 --> 00:36:57.540
So we haven't seen issues with that,
even for QuickTime.

00:36:57.540 --> 00:37:01.030
So it's just a note for you.

00:37:01.080 --> 00:37:04.230
As I mentioned earlier,
there are different ways to

00:37:04.230 --> 00:37:06.080
name different libraries.

00:37:06.080 --> 00:37:07.020
If you put that in a library,
you can name it.

00:37:07.020 --> 00:37:08.990
You can put the same string
inside of an interface,

00:37:09.020 --> 00:37:11.690
and then if your class
implements that interface,

00:37:11.690 --> 00:37:16.300
JDirect will do reflection on the
interfaces and find those strings.

00:37:16.300 --> 00:37:20.590
And so you can have several libraries
that hold the implementations of a set of

00:37:20.590 --> 00:37:23.080
methods that are described in one class.

00:37:23.080 --> 00:37:30.800
You can write code that runs on JDirect
2 in the 118 environment on MRJ.

00:37:30.800 --> 00:37:34.680
In that environment,
we tune the runtime to look

00:37:34.680 --> 00:37:38.020
for a very magic... interface.

00:37:38.020 --> 00:37:41.490
And so if you extended that interface,
we knew how to... We knew to

00:37:41.490 --> 00:37:47.020
call the invoker... Or call the
factory to do that glue bindery.

00:37:47.020 --> 00:37:51.020
We will be writing a tech note for that.

00:37:51.020 --> 00:37:55.020
And so if that's important to you,
then it is possible.

00:37:55.020 --> 00:37:56.020
It's not too bad.

00:37:56.220 --> 00:37:59.900
Again, that last line I told you about,
you have to hold onto the results

00:37:59.900 --> 00:38:04.010
of that in order to keep it working.

00:38:04.950 --> 00:38:08.870
So final note,
one of those frameworks underneath

00:38:08.870 --> 00:38:14.040
that might be interesting to
you is the Carbon framework.

00:38:14.100 --> 00:38:19.580
The toolbox has now been carbonized,
and AWT uses the carbonized toolbox.

00:38:19.640 --> 00:38:27.210
The contract there is that you cannot go
rummaging inside a lot of Carbon objects

00:38:27.550 --> 00:38:30.510
as you used to be able to do on MRJ.

00:38:30.540 --> 00:38:35.190
So you have to use the accessor
functions just like everybody else does.

00:38:35.400 --> 00:38:39.100
So in this case,
we have an example where you have to

00:38:39.100 --> 00:38:43.300
use the accessor functions instead
of going off to some magic offset

00:38:43.300 --> 00:38:45.790
and pulling out the data yourself.

00:38:48.590 --> 00:38:51.260
Finally, our diagram again.

00:38:51.260 --> 00:38:57.300
What happens when you need to take
an entire Java environment and

00:38:57.300 --> 00:39:00.540
put it inside another application?

00:39:00.930 --> 00:39:05.300
That is what we used
to do with JManager 2,

00:39:05.430 --> 00:39:09.500
and we have a successor to that,
and we don't have a name for it yet.

00:39:09.500 --> 00:39:12.500
I guess it's the embedding
story for Mac OS X.

00:39:13.500 --> 00:39:16.950
The person who can best speak
to this is none other than Jens.

00:39:16.960 --> 00:39:20.220
I'll call him back up to stage
and see if he can run you

00:39:20.220 --> 00:39:22.500
through some of these examples.

00:39:22.520 --> 00:39:25.500
He will obviously speak more
knowledgeably about it than I will.

00:39:25.500 --> 00:39:27.980
Thanks.

00:39:31.910 --> 00:39:34.780
So we talk about wiring Java into
your Carbon application.

00:39:34.870 --> 00:39:38.530
There's a little asterisk there because
we would eventually like this to be able

00:39:38.530 --> 00:39:43.020
to work for Cocoa applications as well,
but the technology to do so

00:39:43.080 --> 00:39:45.160
isn't quite available yet.

00:39:45.280 --> 00:39:47.350
So first the bad news.

00:39:47.510 --> 00:39:52.950
For all of you JManager fans,
JManager is not supported on OS X.

00:39:53.030 --> 00:39:55.440
The good news is that,
well it's actually good news that

00:39:55.500 --> 00:39:59.800
JManager 2 is not supported because
it's a very complicated API.

00:39:59.800 --> 00:40:02.840
It requires you to do a lot
of work in your application.

00:40:02.920 --> 00:40:06.180
Everybody who did it ended up doing
it in kind of slightly different

00:40:06.180 --> 00:40:09.630
ways and causing incompatibilities
for us and our developers,

00:40:09.700 --> 00:40:12.430
which is actually kind of our
fault in the design of the API.

00:40:12.530 --> 00:40:17.940
So the good news is that we have a
new API and the API is very simple

00:40:17.940 --> 00:40:22.320
because we now have a modern,
we now have a much more modern

00:40:22.320 --> 00:40:25.760
environment to work in so we don't
have the same kind of limitations

00:40:25.760 --> 00:40:27.800
we did back when we did JDirect 2.

00:40:27.800 --> 00:40:30.040
So there are a couple of different
pieces to what you need to do.

00:40:30.040 --> 00:40:34.400
First you need to obviously get
Java running and you use absolutely

00:40:34.400 --> 00:40:38.110
cross platform standard JNI,
in fact the JNI Indication

00:40:38.110 --> 00:40:39.380
API to do that.

00:40:40.670 --> 00:40:45.160
You need to describe the kind of
code that is that you want to embed.

00:40:45.380 --> 00:40:47.360
In this case,
we're talking about applets,

00:40:47.360 --> 00:40:51.010
since that's the primary target,
is the web browser or other

00:40:51.010 --> 00:40:53.600
application that can show applets.

00:40:53.600 --> 00:40:55.790
You can also use other kinds of code.

00:40:56.000 --> 00:41:01.910
You fill out a fairly simple struct
with the information about the

00:41:01.910 --> 00:41:01.910
location or the contents of the applet.

00:41:03.210 --> 00:41:07.800
Then you create a
Java control or a Java window.

00:41:07.800 --> 00:41:10.090
Yes,
we are using the control manager now.

00:41:10.180 --> 00:41:13.590
So for better or for worse,
the control manager is the

00:41:13.590 --> 00:41:18.510
sort of component story for X,
at least in Carbon.

00:41:18.630 --> 00:41:23.080
And we have a Java control that you
do by going create Java control.

00:41:23.190 --> 00:41:26.520
And that is mostly all
there is to the story.

00:41:27.510 --> 00:41:30.560
Once the control is there,
you need to be a good host to controls.

00:41:30.660 --> 00:41:34.200
You need to make sure that your controls,
in particular the Java control,

00:41:34.250 --> 00:41:35.500
get all the events that they need.

00:41:35.500 --> 00:41:39.000
And I'll talk about that
in more detail in a minute.

00:41:39.040 --> 00:41:42.750
We have a sort of preview of this in DP4,
which is mostly just a header file you

00:41:42.750 --> 00:41:45.460
can look at and start thinking about.

00:41:45.460 --> 00:41:49.060
This much promised future
add-on release will have a

00:41:49.060 --> 00:41:51.750
functional implementation of it.

00:41:54.290 --> 00:41:57.510
So the first step, as I said,
is to use JNI to start up

00:41:57.510 --> 00:41:59.440
the Java virtual machine.

00:41:59.440 --> 00:42:02.000
And this is exactly how you do it.

00:42:02.000 --> 00:42:02.790
We typed this in ourselves.

00:42:02.790 --> 00:42:05.930
We could have torn it out of
Sun's Java tutorial or any of the

00:42:05.970 --> 00:42:11.780
JNI books that are out there at
your favorite computer bookstore.

00:42:11.890 --> 00:42:15.990
First of all, we set up this Java VM in
the arg structure,

00:42:16.140 --> 00:42:19.180
which is what tells the Java virtual
machine all the different parameters

00:42:19.180 --> 00:42:23.140
it needs for starting up things
like the default heap size,

00:42:23.140 --> 00:42:26.220
stack size, things like that.

00:42:26.220 --> 00:42:28.540
And we don't care about--we're
just going to use the default.

00:42:28.540 --> 00:42:31.610
So we fill in the version number
in the struct and call JNI get

00:42:31.610 --> 00:42:32.970
default Java VM init args.

00:42:32.970 --> 00:42:37.640
And that's going to fill out the
structure for us with the default values.

00:42:37.640 --> 00:42:40.180
And if you wanted to tweak some
of those values to increase the

00:42:40.190 --> 00:42:43.210
heap size or something like that,
you could do it after that.

00:42:43.310 --> 00:42:46.820
Then all we need is JNI create Java VM.

00:42:46.920 --> 00:42:50.180
That's going to initialize the
Java VM for us and start it up.

00:42:50.220 --> 00:42:56.420
And it returns us a JVM structure,
Java VM structure,

00:42:56.420 --> 00:43:00.290
which is rarely needed,
and a JNI end structure,

00:43:00.300 --> 00:43:02.600
which is always needed for JNI calls.

00:43:02.600 --> 00:43:04.790
So we need to save that one off.

00:43:05.130 --> 00:43:09.410
Second step is making this magic
struct that tells our embedding code

00:43:09.410 --> 00:43:12.170
where the code you want to run is.

00:43:12.230 --> 00:43:14.350
In this case,
we have a simple example where we're

00:43:14.570 --> 00:43:19.200
giving it a file path to a local
applet that's in our hard disk.

00:43:19.320 --> 00:43:22.100
So we create this MRJ applet
descriptor struct.

00:43:22.160 --> 00:43:30.130
We do a bit of core foundation magic to
create a URL given a Unix style path.

00:43:30.130 --> 00:43:31.300
And we null out the
rest of the structure.

00:43:31.480 --> 00:43:36.140
If you wanted to,
you could also use a real HTTP or

00:43:36.140 --> 00:43:39.350
whatever URL to specify that.

00:43:39.400 --> 00:43:43.070
You can also provide a different
code base and doc base.

00:43:43.150 --> 00:43:47.200
You can also pass in the contents,
the raw contents of the applet tag or

00:43:47.200 --> 00:43:49.840
a pre-parsed set of applet properties.

00:43:49.910 --> 00:43:55.390
The latter will be more useful to
you if you're a web browser and

00:43:55.390 --> 00:43:55.390
you've already been parsing the HTML.

00:43:56.330 --> 00:44:00.090
The second step then is to take
this MRJ code descriptor and stuff

00:44:00.300 --> 00:44:03.830
the applet descriptor into it,
applets being only one of the ways

00:44:03.830 --> 00:44:09.480
that you can use to tell which
kind of code you want to embed.

00:44:11.390 --> 00:44:13.800
Finally, then we embed the control.

00:44:13.800 --> 00:44:17.500
We need a bounds rectangle
that will fill out

00:44:17.790 --> 00:44:22.240
And then we call Create Java Control,
passing in the JNI environment,

00:44:22.240 --> 00:44:24.300
the window we want the
control to go into,

00:44:24.300 --> 00:44:27.660
the bounding box,
and then the code descriptor.

00:44:27.960 --> 00:44:30.770
And as usual,
the last one is an out parameter that

00:44:30.770 --> 00:44:32.890
actually returns the control back to us.

00:44:33.160 --> 00:44:35.120
And that's it.

00:44:35.730 --> 00:44:38.650
Behind the scenes,
the embedding library is going

00:44:38.720 --> 00:44:41.910
to start up an applet context,
go out and load the applet,

00:44:42.160 --> 00:44:45.530
start up the appropriate threads for it,
send it the events,

00:44:45.530 --> 00:44:50.090
and do some magic stuff with AWT so
that the frame that the applet

00:44:50.170 --> 00:44:55.770
gets embedded into is actually the
control in a portion of your window.

00:44:57.720 --> 00:44:59.410
So you need to be able to run controls.

00:44:59.630 --> 00:45:03.230
And for the most part, this is kind of--

00:45:04.140 --> 00:45:07.380
Java program or Mac programming
101 type of stuff.

00:45:07.490 --> 00:45:11.180
There's actually really no extra
work to handle Windows that come up.

00:45:11.180 --> 00:45:11.800
If you--

00:45:12.090 --> 00:45:13.840
If you want the applet
to come up in a window,

00:45:13.840 --> 00:45:16.840
or if the applet opens up its
own windows after the fact,

00:45:16.870 --> 00:45:19.820
they simply pop up as
windows in your layer.

00:45:20.020 --> 00:45:24.320
And the nice thing is that Carbon's event
manager does all the work of making sure

00:45:24.320 --> 00:45:28.380
that events for those windows go to those
windows and not into your event loop.

00:45:28.490 --> 00:45:31.550
So about all you have to do is make
sure that you don't step on them.

00:45:31.650 --> 00:45:35.030
You don't inadvertently,
when you're traversing the window list,

00:45:35.030 --> 00:45:39.500
go and assume that it's one of
your windows and dereference the

00:45:39.500 --> 00:45:42.890
refcon and cast it to your struct
and try to do stuff with it.

00:45:42.960 --> 00:45:45.860
Just pay attention to which windows
are yours and which ones aren't.

00:45:46.020 --> 00:45:47.260
The same deal goes for menus.

00:45:47.260 --> 00:45:52.100
If an AWT window is active,
it will append menus to your menu bar.

00:45:52.190 --> 00:45:54.600
And it will remove them
when it becomes inactive.

00:45:54.610 --> 00:45:57.550
And if you go around traversing
the menu bar for whatever reason,

00:45:57.550 --> 00:46:02.000
you need to pay attention to which menus
belong to you and which ones don't.

00:46:02.040 --> 00:46:05.050
And there are some accessor functions
in the API that will help you

00:46:05.050 --> 00:46:09.150
determine whether or not this menu
or this window belongs to Java.

00:46:09.640 --> 00:46:12.480
For controls, you need to make sure that
all the relevant events

00:46:12.480 --> 00:46:14.460
are dispatched to controls.

00:46:14.540 --> 00:46:18.360
And in Mac Programming
101 back in the 1984 days,

00:46:18.450 --> 00:46:20.810
the only kind of things that
controls really got were clicks,

00:46:20.850 --> 00:46:25.010
because the controls were just limited
things like buttons and check boxes.

00:46:25.160 --> 00:46:27.420
With the Appearance Manager,
in the last couple of years,

00:46:27.440 --> 00:46:30.160
things have gotten a lot more
sophisticated and controls can

00:46:30.160 --> 00:46:33.070
now--they can now have focus,
they can get key presses,

00:46:33.200 --> 00:46:35.650
they can do cursor tracking
while the cursor's over them,

00:46:35.650 --> 00:46:37.860
they can do drag and drop.

00:46:38.020 --> 00:46:43.590
So there are several new calls in
controls.h that are there to allow you

00:46:43.590 --> 00:46:47.860
to pass those events into the controls.

00:46:47.860 --> 00:46:48.850
It isn't that much more work to do.

00:46:48.990 --> 00:46:51.920
There's about three more places in
your event loop where you need to

00:46:52.010 --> 00:46:53.950
do the right kind of control stuff.

00:46:54.160 --> 00:46:58.700
And the Appearance Manager SDK has
all the sample code for how

00:46:58.700 --> 00:47:00.150
to do that sort of thing.

00:47:00.270 --> 00:47:04.370
But the real--the real way to do it,
the good way to do it is to have your

00:47:04.370 --> 00:47:06.250
app adopt the new Carbon event model.

00:47:06.260 --> 00:47:09.710
If you attended any of the
sessions on that yesterday,

00:47:09.710 --> 00:47:13.270
you'll know that the Carbon event
model is incredibly cool.

00:47:13.270 --> 00:47:19.200
And it's just a vast step forward
for the way Mac applications work.

00:47:19.320 --> 00:47:22.270
Events are dispatched to the
objects that they're intended for.

00:47:22.410 --> 00:47:25.150
It's a lot more like you're
used to with Java programming,

00:47:25.170 --> 00:47:27.460
where if there's an
activate event for a window,

00:47:27.460 --> 00:47:29.520
well,
the Windows event--the Windows event

00:47:29.610 --> 00:47:31.090
handler will get that event.

00:47:31.090 --> 00:47:33.910
If there's an event for a control,
the controls event handler

00:47:33.910 --> 00:47:34.890
will get that event.

00:47:34.890 --> 00:47:38.000
There's no need for the Windows event
loop even to get involved.

00:47:38.130 --> 00:47:41.000
So you get all of this stuff
basically for free if you're

00:47:41.000 --> 00:47:42.400
using the Carbon event model.

00:47:42.480 --> 00:47:45.030
You put the control on your
window and it just runs itself.

00:47:46.520 --> 00:47:48.820
At the bottom here,
I have a list of some of the new

00:47:48.820 --> 00:47:52.760
appearance functions that you'll need
to use with an old style event loop,

00:47:52.840 --> 00:47:55.620
create root control, handle control,
click, et cetera.

00:47:55.930 --> 00:48:02.140
And if that's the way you're doing it,
then I encourage you to go out

00:48:02.140 --> 00:48:07.040
and look at the control manager
documentation that came out with the

00:48:07.040 --> 00:48:07.040
appearance manager and with OS 8.5.

00:48:07.040 --> 00:48:07.040
They're described pretty well in there.

00:48:07.770 --> 00:48:14.120
So, now I get to be my own demo boy and
run the demo back here on this machine.

00:48:19.420 --> 00:48:24.700
So I wrote an app pretty quickly
that shows off this stuff.

00:48:24.860 --> 00:48:27.420
And since I wanted to
do it pretty quickly,

00:48:27.420 --> 00:48:29.760
I used the Carbon Event Model.

00:48:29.760 --> 00:48:32.800
And what I ended up with--

00:48:34.430 --> 00:48:38.440
This is probably a little
too small for you to read.

00:48:38.580 --> 00:48:46.840
This is four pages of code,
of which the first about two and a

00:48:46.840 --> 00:48:46.840
half are some kind of generic stuff to

00:48:48.580 --> 00:48:52.570
Create a new window,
add some event handlers to the window,

00:48:52.700 --> 00:48:55.550
create a text control so we
have a text field where we

00:48:55.550 --> 00:48:59.180
can type in the applet path,
add some listeners to that,

00:48:59.390 --> 00:49:03.090
create a push button so we
can push it to run the applet.

00:49:03.690 --> 00:49:05.880
very standard Carbon event stuff.

00:49:05.950 --> 00:49:10.510
We have a window listener function,
the text control listener function,

00:49:11.540 --> 00:49:14.850
And then down here we have the meat,
and this all fits on one

00:49:14.950 --> 00:49:17.240
screen with a little type.

00:49:17.260 --> 00:49:19.490
We first have

00:49:24.610 --> 00:49:26.290
Yeah.

00:49:26.660 --> 00:49:29.100
Down here we have the
JNI invocation stuff.

00:49:29.140 --> 00:49:34.220
And this is almost exactly as it
appeared on the slide earlier.

00:49:34.480 --> 00:49:39.190
We call JNI getDefault, VM init args,
and then JNI createJavaVM.

00:49:40.050 --> 00:49:42.960
And again,
the stuff that shows the applet

00:49:43.050 --> 00:49:45.660
is almost exactly as it appears.

00:49:45.660 --> 00:49:51.990
We create a CFStringRef for the path,
the CFURLRef, and

00:49:52.910 --> 00:49:55.560
Then we call Create Java Control.

00:49:55.670 --> 00:49:57.140
And again,
I'm mostly showing the source code

00:49:57.140 --> 00:49:58.800
just to point out how small this is.

00:49:58.800 --> 00:49:59.940
There's four pages of code.

00:49:59.940 --> 00:50:03.610
It took me a very short
amount of time to write.

00:50:08.680 --> 00:50:15.480
And the application
itself looks like this.

00:50:15.540 --> 00:50:18.200
So being that it's a
Carbon Events application,

00:50:18.200 --> 00:50:20.320
we get all these behaviors
for free-- window dragging,

00:50:20.320 --> 00:50:22.100
window resizing, et cetera.

00:50:22.150 --> 00:50:24.300
Text field runs.

00:50:24.450 --> 00:50:26.960
We'll run draw test.

00:50:29.170 --> 00:50:31.700
Another one of these
silly sample applets.

00:50:31.750 --> 00:50:36.390
Push the Run button,
and here's our applet.

00:50:43.410 --> 00:50:47.250
We can resize the window.

00:50:47.250 --> 00:50:49.740
Everything redraws
itself as you'd expect.

00:50:49.870 --> 00:50:50.500
Movable.

00:50:50.500 --> 00:50:52.620
This applet doesn't
happen to do text input,

00:50:52.710 --> 00:50:54.690
but that works as well.

00:50:55.800 --> 00:51:18.500
[Transcript missing]

00:51:20.450 --> 00:51:23.970
One more thing to do though.

00:51:24.210 --> 00:51:25.840
One more thing.

00:51:26.490 --> 00:51:27.020
Yeah.

00:51:27.120 --> 00:51:29.840
The debugging demo.

00:51:29.840 --> 00:51:33.560
The debugging will not work.

00:51:33.560 --> 00:51:36.590
The demo gods were angry.

00:51:36.590 --> 00:51:36.590
Pardon?

00:51:36.590 --> 00:51:36.590
We will not be able to
build the application,

00:51:36.590 --> 00:51:36.590
so we can't run it.

00:51:36.590 --> 00:51:36.590
I tell you, hours worth of work.

00:51:37.180 --> 00:51:41.400
Jens, are you ready to swear in
front of all these people?

00:51:41.420 --> 00:51:43.040
Did debugging work?

00:51:43.040 --> 00:51:46.070
I solemnly swear that debugging worked.

00:51:46.130 --> 00:51:48.630
We were able to set breakpoints.

00:51:48.630 --> 00:51:53.730
Yay, we were even able to step through
the code and view stack traces.

00:51:53.770 --> 00:51:55.100
It was good.

00:51:57.110 --> 00:51:59.100
It truly is good.

00:51:59.110 --> 00:52:01.160
Project Builder,
which is the intro session

00:52:01.160 --> 00:52:04.100
that's going on right next to us,
which you're not seeing.

00:52:04.100 --> 00:52:04.980
You've seen a little bit
of Project Builder here.

00:52:05.110 --> 00:52:07.880
Project Builder is really looking good.

00:52:07.880 --> 00:52:12.060
We know how to hook up
debugging inside of there.

00:52:12.110 --> 00:52:15.060
Dave Ewing is really doing a
great job making all that happen.

00:52:15.100 --> 00:52:18.100
And we worked really hard to try
to get that here to show you,

00:52:18.100 --> 00:52:21.290
because we honestly don't believe
that JDB is the way for you guys

00:52:21.380 --> 00:52:23.050
to go out and debug Java stuff.

00:52:23.100 --> 00:52:24.100
Let me try it.

00:52:24.100 --> 00:52:25.350
Let me try to see that.

00:52:25.830 --> 00:52:28.260
Well, there's nothing like praying.

00:52:28.260 --> 00:52:31.300
OK, if we all bow and cross our fingers.

00:52:31.300 --> 00:52:33.030
We're just totally
living on the edge now,

00:52:33.030 --> 00:52:36.080
but if we fall down on our pants,
please apologize.

00:52:36.130 --> 00:52:37.840
We'll apologize.

00:52:38.040 --> 00:52:45.000
So if we can run this thing,
then-- so Dave,

00:52:45.050 --> 00:52:47.520
should I set the breakpoint now?

00:52:52.430 --> 00:52:53.400
It's in Project Builder.

00:52:53.400 --> 00:52:54.440
I just hit run.

00:52:54.500 --> 00:52:56.500
You need to hit debug.

00:52:56.590 --> 00:52:57.500
How would you debug?

00:52:57.500 --> 00:52:59.500
Make sure the debugger's
set to the Java debugger.

00:52:59.500 --> 00:53:00.590
Yeah.

00:53:20.300 --> 00:53:32.300
[Transcript missing]

00:53:35.320 --> 00:53:37.300
Do we have breakpoints set?

00:53:37.300 --> 00:53:39.300
It says it's waiting to connect.

00:53:39.300 --> 00:53:42.290
Is this because we're running Hotspot,
isn't it?

00:53:42.310 --> 00:53:43.740
No.

00:53:45.840 --> 00:53:48.060
Yeah, you're right.

00:53:48.060 --> 00:53:48.800
Sure.

00:53:48.930 --> 00:53:49.560
That'll help.

00:53:49.580 --> 00:53:51.680
You've got to run Java in
order to debug Java,

00:53:51.750 --> 00:53:52.800
it turns out.

00:53:52.800 --> 00:53:55.800
See, we're loading it lazily.

00:53:55.800 --> 00:53:59.040
That wasn't good, was it?

00:54:00.540 --> 00:54:03.500
Forget I tried anything.

00:54:03.500 --> 00:54:04.500
It worked great before.

00:54:04.880 --> 00:54:07.790
OK, back to the slides.

00:54:12.730 --> 00:54:17.850
Okay, so basically,
we know that we've been postponing

00:54:17.850 --> 00:54:22.890
a lot of questions until now,
so we're trying to leave a little

00:54:22.890 --> 00:54:25.740
bit of time for some questions here.

00:54:25.740 --> 00:54:28.960
So, you should remember, Java is,
you know,

00:54:28.960 --> 00:54:31.290
wired into the walls of Mac OS X.

00:54:31.400 --> 00:54:33.800
You shouldn't be shocked
at what you find on DP4,

00:54:33.800 --> 00:54:35.990
because we're going to make it better.

00:54:37.100 --> 00:54:42.930
I'm going to point everybody to
Alan Samuel to make sure that you

00:54:42.930 --> 00:54:46.710
know that he's the guy you need
to ask about all the updates.

00:54:47.280 --> 00:54:48.390
Not me.

00:54:48.610 --> 00:54:48.610
Ask him.

00:54:48.790 --> 00:54:51.070
So the take home exam,
we had a pop quiz at the beginning.

00:54:51.080 --> 00:54:54.260
Well,
I want to just carry the metaphor going,

00:54:54.360 --> 00:54:55.350
for you to take home.

00:54:55.520 --> 00:55:00.180
Write a JNI-enabled Java class,
debug your code using a profile of

00:55:00.180 --> 00:55:04.160
your code to make sure it runs fast,
throw away the JNI stuff,

00:55:04.230 --> 00:55:05.940
use JDirect instead.

00:55:05.960 --> 00:55:08.730
And finally,
since embedding is so simple, I mean,

00:55:08.730 --> 00:55:10.620
it looks like almost I can program that.

00:55:10.640 --> 00:55:14.410
And well, anyway, I don't do GUI.

00:55:14.550 --> 00:55:15.800
But it'll look simple
enough for me to use.

00:55:15.820 --> 00:55:18.630
So it ought to be simple
enough for you guys to use.

00:55:18.740 --> 00:55:22.980
Roadmap, we only got one other
Java session this year at WWDC,

00:55:22.980 --> 00:55:25.970
and it immediately follows this one.

00:55:26.100 --> 00:55:32.570
So if you have marketing style questions,
if you have kudos for

00:55:32.570 --> 00:55:36.880
us or non-kudos for us,
take those to the feedback forum

00:55:36.880 --> 00:55:41.330
to find out where we fit in
relationship to the rest of the

00:55:41.330 --> 00:55:43.540
world of Java and things like that.

00:55:43.650 --> 00:55:46.800
For this session, if you've got technical
questions about how something

00:55:46.920 --> 00:55:50.520
happens and things like that,
what I'd like to do is call

00:55:50.750 --> 00:55:53.100
up members of the Java team.

00:55:53.100 --> 00:55:56.010
You guys can hit the mics and
ask us anything else you want.