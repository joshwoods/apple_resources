WEBVTT

00:00:11.140 --> 00:00:12.600
Mac OS.

00:00:12.600 --> 00:00:15.660
Hmm, sure at that point you're already
wondering how this French guy with

00:00:15.690 --> 00:00:19.000
such a thick accent is going to
keep me awake talking about text.

00:00:19.080 --> 00:00:22.810
So maybe that will change your mind.

00:00:23.330 --> 00:00:24.160
Text on Mac OS.

00:00:24.160 --> 00:00:25.700
Actually, I prefer this one.

00:00:25.710 --> 00:00:26.910
Real text on Mac OS.

00:00:27.080 --> 00:00:30.200
So welcome to session 155,
Real Text on Mac OS.

00:00:30.200 --> 00:00:34.320
We'll be talking today about the
technologies that's going to enable

00:00:34.320 --> 00:00:39.860
you to handle Unicode text on Mac OS X,
Mac OS 9, next version of 9,

00:00:39.860 --> 00:00:42.200
and of course, CarbonLib.

00:00:42.200 --> 00:00:46.450
We'll be talking, of course,
about advanced typography

00:00:46.450 --> 00:00:47.920
on the new system.

00:00:47.920 --> 00:00:50.200
We'll be talking, too, about MLT,
the multilingual text engine.

00:00:51.570 --> 00:00:52.550
All right.

00:00:52.760 --> 00:00:56.640
Whatever platform you're developing for,
Cocoa, Carbon, or Classic,

00:00:56.700 --> 00:01:01.280
when I say actually Carbon,
I talk about CarbonLib and Mac OS Xenon.

00:01:01.340 --> 00:01:05.640
Or Java, you need to handle text,
or most applications do.

00:01:06.440 --> 00:01:09.110
There are, in my mind,
two ways to handle this.

00:01:09.290 --> 00:01:12.340
There is the hard way,
and there is the easy way.

00:01:12.400 --> 00:01:14.850
The hard way,
your application needs very fine control

00:01:15.300 --> 00:01:18.620
and very fine tuning of the style,
where the glyphs are going to

00:01:18.620 --> 00:01:20.220
be positioned on the screen.

00:01:20.270 --> 00:01:23.690
and this article the steps

00:01:24.400 --> 00:01:27.080
But you have to follow
in order to enter text.

00:01:27.100 --> 00:01:29.460
You have to do text input.

00:01:29.480 --> 00:01:32.610
It could be by different settings,
but character set conversion

00:01:32.630 --> 00:01:34.320
if you want to enter I/O.

00:01:34.380 --> 00:01:37.750
So from different encodings,
files that are coming from the net,

00:01:37.750 --> 00:01:40.500
UTF-8,
files that are coming from Windows,

00:01:40.530 --> 00:01:43.670
text manipulation and text layout,
reordering of the runs if

00:01:43.670 --> 00:01:48.480
you're doing multi-script text,
and of course, the rendering.

00:01:48.480 --> 00:01:50.400
And there is the easy way.

00:01:50.430 --> 00:01:53.620
The easy way would be to use
one or several text packages.

00:01:53.620 --> 00:01:58.660
And the text packages would actually use
one of the several layers we have there.

00:01:59.450 --> 00:02:00.690
Let's see.

00:02:00.760 --> 00:02:04.520
The text solution that we have right now
for Mac OS X and classic applications.

00:02:04.620 --> 00:02:07.120
So once again,
the different technologies I'm going

00:02:07.120 --> 00:02:11.840
to be talking about are available on 9,
CarbonLib, and OS X, of course.

00:02:11.920 --> 00:02:15.960
Here again,
I will divide that in two settings.

00:02:16.000 --> 00:02:18.020
Will be what I call the pre-Unicode.

00:02:18.060 --> 00:02:20.700
And I'm sure you have been
using one of these technologies,

00:02:20.760 --> 00:02:22.760
text input,
where you could do it with like,

00:02:22.760 --> 00:02:25.200
you know, the event record where
you get a key down.

00:02:25.250 --> 00:02:28.180
Or you could be using TSM,
Text Services Manager,

00:02:28.220 --> 00:02:30.600
if you need to enter two byte scripts.

00:02:30.950 --> 00:02:36.420
The character set conversion
has been used by TC,

00:02:36.420 --> 00:02:38.670
the text encoding converter.

00:02:38.790 --> 00:02:40.260
I'm sure you have heard about that.

00:02:40.320 --> 00:02:44.280
Text manipulation, the script manager,
the text layout, and the rendering,

00:02:44.440 --> 00:02:47.970
as you all know,
Quick Draw text and Quick Draw.

00:02:48.120 --> 00:02:52.080
Since 8.5,
we have been introducing technologies

00:02:52.500 --> 00:02:57.100
so developers can enter UniCode easily.

00:02:57.140 --> 00:03:00.380
These technologies are of
course available on Mac OS X.

00:03:00.560 --> 00:03:00.970
Text input.

00:03:01.030 --> 00:03:03.290
If you want to do Unicode input,
there is only one way,

00:03:03.290 --> 00:03:06.000
and this is to install the TSM handlers.

00:03:06.100 --> 00:03:09.060
Character set conversion, of course,
you still have to use TSC.

00:03:09.120 --> 00:03:11.910
Text manipulation,
in order to do Unicode line break,

00:03:11.910 --> 00:03:15.420
sorting, for instance,
you use the Unicode utilities.

00:03:15.480 --> 00:03:20.150
The text layout, you'll be using,
at three,

00:03:20.190 --> 00:03:24.170
Apple-type services for Unicode imaging,
which is the only way to do

00:03:24.170 --> 00:03:24.170
Unicode layout correctly.

00:03:24.600 --> 00:03:30.640
The rendering, quick draw, and of course,
moving towards new technologies, Quartz,

00:03:30.690 --> 00:03:32.750
if you're working on 10.

00:03:33.230 --> 00:03:37.300
Before we go into details and we talk
about each of these technologies,

00:03:37.370 --> 00:03:41.060
I'd like just to, like, you know,
actually I forgot about this one, sorry.

00:03:41.060 --> 00:03:44.440
For the easy way, the text packages,
you'll be using TextEdit.

00:03:44.510 --> 00:03:45.920
I'm sure you've heard
about this technology.

00:03:45.920 --> 00:03:50.040
And, of course, for UniCode, MLT,
the multilingual text engine

00:03:50.040 --> 00:03:54.220
introduced on Mac OS 9,
available on CarbonLib and on 10.

00:03:54.980 --> 00:03:57.110
So before we talk about
these technologies,

00:03:57.160 --> 00:04:00.480
I'd like just to make a quick
reminder why UniCode is important.

00:04:00.480 --> 00:04:04.290
UniCode is an industry
and Internet standard.

00:04:04.640 --> 00:04:05.980
Even Windows uses it.

00:04:06.060 --> 00:04:08.680
And no, UniCode is not a monopoly.

00:04:09.350 --> 00:04:12.200
It's the only way to
handle new languages.

00:04:12.290 --> 00:04:15.980
There is no more room in
Word Script to handle more languages.

00:04:16.080 --> 00:04:17.850
Unicode is the solution.

00:04:18.000 --> 00:04:20.760
If you want to handle the new
extensions for the big five,

00:04:20.760 --> 00:04:23.880
for instance, the Hong Kong extension,
handle the extended

00:04:23.880 --> 00:04:27.700
character sets for Roman,
or access the new gliss that have

00:04:27.750 --> 00:04:33.280
been defined in the GSX2013 standard,
the only way to do that is to use and

00:04:33.280 --> 00:04:36.140
to encode your documents in UniCode.

00:04:36.260 --> 00:04:37.930
I'll give you a quick example.

00:04:38.030 --> 00:04:40.100
Right now,
for the characters that just appeared,

00:04:40.280 --> 00:04:43.380
these characters are part of
extended Roman character set.

00:04:43.450 --> 00:04:47.540
Right now, if you use quick draw text,
the only way to render these characters

00:04:47.540 --> 00:04:49.560
is to use five different encodings.

00:04:49.640 --> 00:04:54.620
That means if your applications
want to run in Hungary,

00:04:54.690 --> 00:04:58.120
you need to find a different
font than the one that is

00:04:58.140 --> 00:04:59.600
shipping on the US system.

00:04:59.670 --> 00:05:03.200
That means to support these characters,
you need five different fonts.

00:05:03.290 --> 00:05:05.260
With UniCode,
only one font-- and I'll show you

00:05:05.260 --> 00:05:07.600
that in the demo-- is sufficient.

00:05:07.600 --> 00:05:12.100
And a font like Geneva, for instance,
is already set up for that.

00:05:12.630 --> 00:05:15.660
Before we go to the demo,
I'd like to introduce Deborah Goldsmith,

00:05:15.660 --> 00:05:19.260
who will be talking about the
different block technologies.

00:05:19.290 --> 00:05:22.040
Deborah is a manager for
the International Toolbox,

00:05:22.060 --> 00:05:26.640
which owns the ZWEE technology.

00:05:26.640 --> 00:05:26.640
Thanks.

00:05:26.640 --> 00:05:26.640
Actually.

00:05:30.610 --> 00:05:35.670
So Xavier talked a little bit
about the system components that an

00:05:35.730 --> 00:05:39.430
application can use to support UniCode,
and I'd like to talk about those

00:05:39.430 --> 00:05:40.640
in a little bit more detail.

00:05:42.720 --> 00:05:46.090
To put them in context,
here's a diagram of the flow of

00:05:46.090 --> 00:05:48.640
data in a Unicode application.

00:05:48.660 --> 00:05:52.300
First of all, you have information
coming into the program,

00:05:52.300 --> 00:05:57.130
either coming from the network or disk,
possibly the internet.

00:05:57.430 --> 00:06:00.810
If it's in a legacy encoding,
you need to use TEC to

00:06:00.820 --> 00:06:02.970
convert it into UniCode.

00:06:02.970 --> 00:06:07.840
If it's coming from the keyboard
or some other input device,

00:06:07.840 --> 00:06:12.300
use TSM, the text services manager,
to process the input and make

00:06:12.300 --> 00:06:14.840
it available to the application.

00:06:14.840 --> 00:06:18.120
After your application
has done its processing,

00:06:18.120 --> 00:06:21.670
use ATSUI,
Apple type services for UniCode imaging,

00:06:21.670 --> 00:06:24.940
to lay out and prepare
the text for display.

00:06:24.940 --> 00:06:28.440
And then finally,
you can use QuickDraw or Quartz on

00:06:28.440 --> 00:06:32.200
Mac OS X to display the characters.

00:06:32.200 --> 00:06:36.580
Now I'm going to talk about each of the
technologies in a little bit more detail.

00:06:38.130 --> 00:06:40.800
First of all, the text services manager,
which has been in

00:06:40.800 --> 00:06:46.120
Mac OS for quite a while,
since 7.1 at least, I think,

00:06:46.370 --> 00:06:48.880
It was there first for
support evasion languages,

00:06:48.880 --> 00:06:51.680
but over time it's been taking
on more and more functions.

00:06:51.680 --> 00:06:56.540
Right now, it is the only way to receive
Unicode input in your application.

00:06:56.540 --> 00:07:01.640
So it's necessary if you want to get
Unicode directly from input sources.

00:07:02.060 --> 00:07:06.370
As I already mentioned,
it supports input evasion languages

00:07:06.440 --> 00:07:09.920
that require input methods,
but it also supports other

00:07:09.990 --> 00:07:11.340
kinds of text services.

00:07:11.340 --> 00:07:17.420
Examples include spelling checkers,
hyphenation, and even speech recognition.

00:07:17.420 --> 00:07:24.640
And starting in Mac OS 8.5,
TSM added support for one-byte languages

00:07:24.640 --> 00:07:28.980
as well as the double-byte Asian scripts.

00:07:29.560 --> 00:07:34.490
New with Mac OS X and CarbonLib,
TSM now supports the Carbon Event Model.

00:07:34.600 --> 00:07:39.880
So you can continue to receive
input from TSM using Apple events,

00:07:39.880 --> 00:07:42.620
as you have in the past,
or you can now use the

00:07:42.620 --> 00:07:44.660
Carbon Event Model instead.

00:07:44.900 --> 00:07:51.170
And TSM also takes care of matching up
Unicode and non-Unicode applications with

00:07:51.260 --> 00:07:53.540
Unicode and non-Unicode input sources.

00:07:53.540 --> 00:07:57.630
So your application doesn't have
to worry about whether a particular

00:07:57.630 --> 00:08:06.200
keyboard or input method produces
Unicode or legacy character set output.

00:08:06.200 --> 00:08:08.670
TSM will take care of converting
it for you into the form you need.

00:08:10.800 --> 00:09:26.000
[Transcript missing]

00:09:27.960 --> 00:09:34.200
The UniCode utilities were new in
Mac OS 8.6 and were extended in Mac OS 9.

00:09:34.340 --> 00:09:39.030
They're equivalent to the international
text utilities and the script manager,

00:09:39.030 --> 00:09:41.580
which have been in the
Mac OS for a long time,

00:09:41.660 --> 00:09:45.300
but they're the equivalent
versions for UniCode text.

00:09:45.620 --> 00:09:50.210
They support operations like collation,
namely comparison and ordering or

00:09:50.220 --> 00:09:53.340
sorting of text in human languages.

00:09:53.340 --> 00:09:57.620
They support text breaking,
finding boundaries between

00:09:57.620 --> 00:10:02.160
text units like words,
lines, or even clusters of characters.

00:10:02.160 --> 00:10:07.040
In addition, they provide access to
information about characters,

00:10:07.040 --> 00:10:09.990
such as whether they're left
to right or right to left,

00:10:09.990 --> 00:10:11.780
or upper or lower case.

00:10:11.780 --> 00:10:15.900
And these come from the UniCode
3.0 character properties database.

00:10:15.900 --> 00:10:20.500
And finally, unlike the script manager
in international utilities,

00:10:20.500 --> 00:10:24.700
which use the model of a
script code and a region code,

00:10:24.740 --> 00:10:28.210
which are unique to the Macintosh,
the UniCode utilities

00:10:28.210 --> 00:10:31.340
use a new locale model,
which is very similar to the

00:10:31.410 --> 00:10:35.420
way that Java and Unix systems
handle international processing.

00:10:39.520 --> 00:10:42.430
ATSUI, or Apple Type Services for
Unicode Imaging,

00:10:42.440 --> 00:10:45.420
is our solution for drawing Unicode text.

00:10:45.420 --> 00:10:49.720
It was introduced in Mac OS 8.5,
and we've been extending it and

00:10:49.800 --> 00:10:53.070
improving it with each new release,
and we continue to do that.

00:10:53.080 --> 00:10:58.830
ATSUI is the only solution on the
Mac OS for direct imaging of Unicode that

00:10:58.830 --> 00:11:03.080
is handling all of the Unicode standard,
not just small pieces of it.

00:11:03.660 --> 00:11:07.650
It provides a larger character
and language repertoire,

00:11:07.720 --> 00:11:11.580
covering new languages that
you can't do any other way,

00:11:11.580 --> 00:11:16.020
plus parts of existing languages that
are hard to get to using QuickDraw.

00:11:16.020 --> 00:11:18.930
So the example you see
on the screen has Thai,

00:11:18.930 --> 00:11:22.060
Vietnamese, Greek,
and a few other characters

00:11:22.060 --> 00:11:24.040
I'll describe in a moment.

00:11:24.040 --> 00:11:29.040
The first part of the example is all from
the Lucida font that's part of Mac OS X.

00:11:29.040 --> 00:11:33.460
That's all in one font, handling Thai,
Vietnamese, and Greek, as well as Roman.

00:11:33.670 --> 00:11:38.530
The characters at the end are
characters that are in the Times font,

00:11:38.530 --> 00:11:41.160
which has been shipping on
the Mac OS for many years,

00:11:41.160 --> 00:11:44.600
but those characters can't be
gotten to through QuickDraw.

00:11:44.600 --> 00:11:49.020
They're characters that are in Unicode
and in the Windows character set,

00:11:49.020 --> 00:11:51.210
but not in the Mac character set.

00:11:51.280 --> 00:11:54.100
So even though they're in the font,
there's no way to get to them.

00:11:54.100 --> 00:11:57.720
Many times I get emails from
people using Windows systems,

00:11:57.720 --> 00:12:00.020
and they have characters
like this in them,

00:12:00.020 --> 00:12:02.650
and it's not possible to display them.

00:12:04.360 --> 00:12:08.780
Except now with UniCode and ATSUI.

00:12:08.780 --> 00:12:12.230
ATSUI also supports the full
UniCode bidirectional model,

00:12:12.290 --> 00:12:15.020
which is very complicated,
supporting languages

00:12:15.020 --> 00:12:16.300
like Hebrew and Arabic.

00:12:16.300 --> 00:12:25.860
And for languages like Arabic and
Indic languages like Devanagari,

00:12:25.860 --> 00:12:25.860
ATSUI supports complex rendering of text.

00:12:27.770 --> 00:12:31.610
ATSUI has other features besides
access to more languages.

00:12:31.710 --> 00:12:35.290
For example, for Asian text,
in QuickDraw,

00:12:35.640 --> 00:12:40.580
double byte text is required to have
the same width for every character.

00:12:40.580 --> 00:12:43.610
So every kanji or kana in Japanese,
for example,

00:12:43.740 --> 00:12:45.790
has to be the exact same width.

00:12:45.790 --> 00:12:50.540
With ATSUI, you can have proportional
double byte text.

00:12:51.070 --> 00:12:53.210
Different glyphs can be different widths.

00:12:53.210 --> 00:12:56.220
In addition,
ATSUI supports something we've had many

00:12:56.220 --> 00:13:01.100
requests for from our Asian developers,
namely vertical text.

00:13:01.250 --> 00:13:06.400
The same features of ATSI which support
complex scripts like Arabic or Thai or

00:13:06.400 --> 00:13:11.020
Devanagari also support advanced
typography for Roman languages,

00:13:11.020 --> 00:13:15.270
so you can get advanced
typographic effects.

00:13:15.480 --> 00:13:17.240
So we haven't been
sitting still with ATSUI.

00:13:17.240 --> 00:13:18.560
We've been adding new features.

00:13:18.560 --> 00:13:23.800
And new for Mac OS X are
APIs for accessing the outlines

00:13:23.800 --> 00:13:25.840
of glyphs and glyph metrics.

00:13:25.840 --> 00:13:31.000
And this is specifically meant
for applications that have used

00:13:31.000 --> 00:13:36.450
ATM to do this in the past,
since ATM is not available on Mac OS X.

00:13:39.710 --> 00:13:42.280
In the future,
we plan to do much more to ATSUI.

00:13:42.280 --> 00:13:43.780
We're working on it very actively.

00:13:43.780 --> 00:13:48.440
The first thing we're going
to do is lessen its reliance

00:13:48.440 --> 00:13:50.530
on Apple layout tables.

00:13:50.530 --> 00:13:53.650
So right now,
to do the advanced typographic effects

00:13:53.650 --> 00:13:57.140
or certain kinds of language support,
you have to have Apple advanced

00:13:57.140 --> 00:13:58.800
typography tables in your font.

00:13:58.880 --> 00:14:02.260
We're going to continue to support
those because we think they

00:14:02.370 --> 00:14:07.390
handle those functions very well,
but we want to make ATSUI work better

00:14:07.390 --> 00:14:09.930
with more different kinds of fonts.

00:14:09.930 --> 00:14:14.460
So the first thing we're going to do
is make it able to do advanced layout

00:14:14.460 --> 00:14:18.160
and language support using fonts
that have no layout tables at all,

00:14:18.230 --> 00:14:20.940
because that's what most of
the fonts out there have,

00:14:21.050 --> 00:14:22.300
no layout tables at all.

00:14:22.300 --> 00:14:25.100
In addition,
there are more and more open type

00:14:25.100 --> 00:14:28.470
fonts coming onto the market,
and we want to support those as

00:14:28.470 --> 00:14:31.360
well and take advantage of the
layout tables in those fonts.

00:14:31.360 --> 00:14:33.820
So that's something we're
going to be working on for

00:14:33.820 --> 00:14:35.600
future versions of ATSUI also.

00:14:37.710 --> 00:14:41.920
In addition, there are many developers,
such as those working on high-end

00:14:41.920 --> 00:14:45.520
page layout applications,
who need very fine control over the

00:14:45.520 --> 00:14:50.160
layout process and the positioning
of the glyphs in their applications.

00:14:50.160 --> 00:14:53.850
And we are going to be adding a
low-level layout API to ATSUI,

00:14:53.850 --> 00:14:57.590
which will give those developers
the control they need.

00:14:57.620 --> 00:14:59.770
And those are all coming
in future releases,

00:14:59.770 --> 00:15:01.670
and we're working on them right now.

00:15:03.940 --> 00:15:08.390
So now I'm going to turn the stage
back over to Xavier so he can talk

00:15:08.400 --> 00:15:10.530
about the multilingual text engine.

00:15:10.680 --> 00:15:12.210
Thank you.

00:15:12.900 --> 00:15:14.900
and the University of San Francisco.

00:15:14.900 --> 00:15:16.890
There you are.

00:15:16.900 --> 00:15:18.330
Thanks, Deborah.

00:15:21.710 --> 00:15:25.430
The multilingual text engine.

00:15:25.430 --> 00:15:29.500
So as Deborah described,
this is how your Unicode application

00:15:29.560 --> 00:15:32.820
would look right now if you
were to use these technologies.

00:15:32.820 --> 00:15:38.470
What MLTE is going to do for you is going
to try to shield you from the complexity

00:15:38.480 --> 00:15:41.800
of dealing with all these technologies.

00:15:41.800 --> 00:15:45.700
It's a Unicode text engine,
and let's see what is exactly MLTE.

00:15:45.780 --> 00:15:48.380
MLTE is a replacement for text edit.

00:15:48.390 --> 00:15:51.990
And that's important to say that
it's a replacement for text edit.

00:15:53.030 --> 00:15:54.760
I said it twice.

00:15:54.760 --> 00:15:56.370
A complete UniCode text package.

00:15:56.380 --> 00:15:58.340
And when I say complete
UniCode text package,

00:15:58.340 --> 00:16:02.120
it's because we do UniCode input,
UniCode layout, and UniCode display.

00:16:02.130 --> 00:16:06.110
We don't lose information during
the process of rendering the text

00:16:06.110 --> 00:16:08.450
from the input to the rendering.

00:16:08.660 --> 00:16:10.400
It's easy to adopt.

00:16:10.420 --> 00:16:13.280
And we have sample code, actually,
for proving that.

00:16:13.420 --> 00:16:15.520
And I encourage you,
we have some documentation

00:16:15.560 --> 00:16:20.510
slides to show,
to see the MetroX project that we have.

00:16:20.820 --> 00:16:25.380
It's one set of APIs and it's supported
on three different environments.

00:16:25.380 --> 00:16:28.280
On Mac OS X, of course, 9,
and CarbonLibre.

00:16:31.970 --> 00:16:33.570
10, 9, and CarbonLib.

00:16:33.720 --> 00:16:39.520
So that means you can go back to and
start checking out the demo that we have.

00:16:39.570 --> 00:16:42.890
You can start coding on 9 just to
find out if actually this is correct,

00:16:42.950 --> 00:16:45.560
this is a good technology
for your application.

00:16:45.600 --> 00:16:49.760
And when you use the APIs,
the same APIs are going to work on

00:16:49.760 --> 00:16:53.400
CarbonLib and then on 10 transparently.

00:16:56.470 --> 00:16:59.070
Oops, getting confused.

00:16:59.100 --> 00:17:00.070
It's written in English.

00:17:00.080 --> 00:17:05.310
For the demo,
I'd like to invite on stage John Harvey.

00:17:05.360 --> 00:17:07.350
John Harvey is the tech lead for MLTE.

00:17:07.360 --> 00:17:11.340
We've been working on MLTE for
a couple of years now.

00:17:11.340 --> 00:17:14.680
And we'll show you exactly what MLTE can
do for you from a graphical point of

00:17:14.680 --> 00:17:17.070
view and from a UniCode point of view.

00:17:19.490 --> 00:17:24.710
All right, so this is DP4 with a
couple of enhancements.

00:17:24.890 --> 00:17:26.200
This application is Champollion.

00:17:26.200 --> 00:17:29.570
You'll find it in the system demo folder.

00:17:29.640 --> 00:17:34.940
It's using right now Quick Draw Rendering
and NetSuite for the UniCode layout.

00:17:35.020 --> 00:17:37.270
Here, when you create a new document,
what's happening is that

00:17:37.270 --> 00:17:38.960
you get this default window.

00:17:39.010 --> 00:17:42.590
At that point, MLTE created,
with one call,

00:17:42.960 --> 00:17:45.990
the handlers for the drag and drop,
the handlers for TSM,

00:17:46.120 --> 00:17:48.720
so your application can
handle two byte scripts.

00:17:48.740 --> 00:17:51.500
So now you don't have to spend
time installing the TSM handlers.

00:17:51.530 --> 00:17:53.580
We get them by default.

00:17:53.590 --> 00:17:57.920
The scroll bars,
we handle active scrolling as well.

00:17:58.980 --> 00:18:00.040
So this is important to notice.

00:18:00.120 --> 00:18:02.420
This is one call, TXN new object.

00:18:02.500 --> 00:18:04.440
And it's going to do all
these things for you.

00:18:04.490 --> 00:18:07.730
All right,
so I have my little cheat sheet here.

00:18:09.460 --> 00:18:11.600
A big difference with
what you're used to,

00:18:11.630 --> 00:18:15.660
for instance, if you use simple text
or the quick draw text,

00:18:15.660 --> 00:18:18.680
here the font menu is
organized by font family.

00:18:18.710 --> 00:18:21.120
And here, for instance,
an instance like Courier.

00:18:21.180 --> 00:18:23.760
Courier has bold, bold italic,
which are different

00:18:23.760 --> 00:18:25.670
representation of this font.

00:18:25.730 --> 00:18:29.380
So here the font menu is
created automatically by MLTE.

00:18:29.420 --> 00:18:30.890
It's, once again, one API.

00:18:31.040 --> 00:18:33.440
You pass a menu handle,
and we're going to build the

00:18:33.790 --> 00:18:36.340
hierarchical font menu for you.

00:18:36.750 --> 00:18:40.140
Something new if you use it, too,
is that phones now have

00:18:40.260 --> 00:18:41.700
way more information.

00:18:41.800 --> 00:18:45.700
So not only the Unicode information,
but they have, as well,

00:18:45.700 --> 00:18:47.520
advanced typographic features.

00:18:47.630 --> 00:18:48.820
And you have two set of features.

00:18:48.930 --> 00:18:51.210
You have the first one that
are not presented here,

00:18:51.210 --> 00:18:53.180
and you have phone variations.

00:18:53.310 --> 00:18:55.930
So here, a phone, like Skia,
for instance,

00:18:55.930 --> 00:18:59.020
has different representation
for the glyphs.

00:18:59.090 --> 00:19:03.310
These representations are
formulated by the phone designer.

00:19:03.420 --> 00:19:06.290
The phone designer decided, well,
I'm going to do an instance

00:19:06.320 --> 00:19:09.110
of a Skia phone that's going
to be represented light,

00:19:09.110 --> 00:19:12.310
or extended, or bold, or super bold.

00:19:12.950 --> 00:19:17.330
So here, once again, at that point,
your application calls one API, and MLTE,

00:19:17.340 --> 00:19:19.390
the text engine,
is going to handle for you

00:19:19.390 --> 00:19:22.500
what's the current selection,
change the text,

00:19:22.500 --> 00:19:26.330
do the reflow if reflow is needed,
redo the break line.

00:19:28.920 --> 00:19:31.240
Let's see now why Unicode is important.

00:19:31.250 --> 00:19:35.020
And by default,
when you're going to use MLTE,

00:19:35.050 --> 00:19:38.810
you'll get all that support
and all the Unicode support.

00:19:38.920 --> 00:19:40.940
So here we have a Vietnamese file.

00:19:40.940 --> 00:19:43.380
This Vietnamese file
is encoded in Unicode.

00:19:43.410 --> 00:19:47.050
In this case,
it accesses a lot of the characters that

00:19:47.050 --> 00:19:49.020
are in the extended Roman character set.

00:19:49.040 --> 00:19:52.530
This file cannot be rendered
with quick draw text for the very

00:19:52.600 --> 00:19:56.200
simple reason that most of these
characters cannot be encoded if you

00:19:56.230 --> 00:19:58.850
use a Mac OS Roman character set.

00:19:59.720 --> 00:20:01.920
So for instance,
on the right of the screen,

00:20:01.920 --> 00:20:03.880
we have simple text.

00:20:03.940 --> 00:20:06.510
Here we're going to try to drag and drop

00:20:06.660 --> 00:20:08.080
Part of the text to simple text.

00:20:08.120 --> 00:20:09.620
And what can we see at that point?

00:20:09.730 --> 00:20:12.700
So first,
what happened in your application?

00:20:12.750 --> 00:20:13.980
You got a click.

00:20:14.020 --> 00:20:16.600
You send the click event to TXN click.

00:20:16.920 --> 00:20:19.900
At that point,
MLT is going to handle the rest.

00:20:19.960 --> 00:20:21.790
We're going to find out
it's a drag and drop.

00:20:22.030 --> 00:20:24.760
We're going to export different
flavors to the drag manager,

00:20:24.760 --> 00:20:27.500
so the drag manager and all the
applications can understand it.

00:20:27.610 --> 00:20:30.460
And in this case,
what we did is that we exported from

00:20:30.460 --> 00:20:35.130
UniCode and that style to something
that simple text can understand,

00:20:35.130 --> 00:20:38.830
which is Mac OS Roman text
plus style information.

00:20:39.000 --> 00:20:41.700
And here we can see that
during the translation,

00:20:41.700 --> 00:20:43.120
we used TEC, of course.

00:20:43.170 --> 00:20:46.920
As good TEC is,
it cannot render certain characters.

00:20:47.030 --> 00:20:50.320
So you can see, for instance,
on the second line, the NA,

00:20:50.390 --> 00:20:53.400
TEC has been sufficiently
clever to find out that,

00:20:53.510 --> 00:20:58.580
in fact, it could decompose the UniCode
character into Mac OS Roman characters.

00:20:58.680 --> 00:21:01.490
But then, of course, after the M,
you can see that this glyph

00:21:01.500 --> 00:21:04.320
doesn't exist and cannot be
rendered with Quick Draw text,

00:21:04.400 --> 00:21:07.770
so we place it here with a question mark.

00:21:10.350 --> 00:21:13.700
So what's the font here that we're using?

00:21:13.730 --> 00:21:17.100
This is Lucida Grande font
that is in Mac OS X.

00:21:17.160 --> 00:21:19.840
And this font has all the
extended character sets for

00:21:19.840 --> 00:21:22.690
Raman plus many other glyphs.

00:21:22.810 --> 00:21:26.190
And we can talk about that
during the Q&A if you want after.

00:21:27.850 --> 00:21:31.020
So we access the
Roman extended character set,

00:21:31.160 --> 00:21:31.910
which is good.

00:21:32.090 --> 00:21:35.660
But one thing important for customers,
too, in the Japan market is

00:21:35.670 --> 00:21:40.080
all these extensions to,
for instance, Big Five and the new GX213

00:21:40.080 --> 00:21:41.420
I've been talking about.

00:21:41.510 --> 00:21:44.400
Using Unicode and using Hatsui,
and of course, when you use MLTE,

00:21:44.400 --> 00:21:48.040
it's transparent for you,
gives you access to these new glyphs.

00:21:48.190 --> 00:21:54.080
And here, for instance, the three first,
the first three lines,

00:21:54.080 --> 00:21:56.140
can be rendered with Osaka.

00:21:56.190 --> 00:21:58.100
The Osaka font has these glyphs.

00:21:58.200 --> 00:22:01.050
But we can see that the glyphs
after cannot be rendered.

00:22:01.160 --> 00:22:05.020
They're just not present
in the Osaka font.

00:22:05.190 --> 00:22:08.360
And here, the font is Iragino,
which is a new font

00:22:08.360 --> 00:22:10.230
introduced on Mac OS X.

00:22:11.140 --> 00:22:14.230
And this is the only way
you can access these fonts.

00:22:14.350 --> 00:22:17.140
There is no other way to do that.

00:22:23.340 --> 00:22:25.540
So I didn't talk about the
last two lines actually.

00:22:25.540 --> 00:22:28.590
The last two lines are variants
of the glyphs represented

00:22:28.600 --> 00:22:32.250
in the GIS X2113 standard.

00:22:32.470 --> 00:22:36.030
The way to access VZLift actually
is just by phone variations.

00:22:36.030 --> 00:22:38.700
And I'll show you why variations
are so important and features

00:22:38.700 --> 00:22:42.700
are so important when you
display and when you layout text.

00:22:43.380 --> 00:22:46.810
So when you use MLTE,
you're going to access all the

00:22:46.810 --> 00:22:50.490
power of Hatsui and all the
power of using Unicode imaging.

00:22:50.520 --> 00:22:53.810
But a nice thing, too,
in using these technologies are

00:22:53.810 --> 00:22:55.880
the advanced typographic features.

00:22:55.910 --> 00:22:58.260
And it's just the way
the text is rendered.

00:22:58.270 --> 00:23:02.460
Right now, if you go in simple text,
you take a font like Chainsree,

00:23:02.530 --> 00:23:04.740
change the size to make
it a little bit bigger,

00:23:04.750 --> 00:23:07.810
and you type some text,
this is how it's going to look.

00:23:09.140 --> 00:23:13.900
Okay, so this is the default behavior,
and you type a R, this is the default R.

00:23:13.950 --> 00:23:16.530
Everybody's gonna get the same glyph.

00:23:16.630 --> 00:23:21.000
If you copy this text and
now we put it in Champollion,

00:23:25.190 --> 00:23:29.500
Then you get a nice long
swash from the R to the A.

00:23:29.500 --> 00:23:32.250
You get like, you know,
the ligature goes back to the A,

00:23:32.300 --> 00:23:34.050
the L as the end line swash.

00:23:34.050 --> 00:23:41.410
And this is the default that you get,
but then because we do like, you know,

00:23:41.410 --> 00:23:41.410
the layout,
and that's how it processes the text.

00:23:41.610 --> 00:23:43.850
You get this behavior,
and I think the text is

00:23:43.860 --> 00:23:45.740
rendered pretty nicely.

00:23:45.830 --> 00:23:49.740
So we can change the size,
make it bigger, smaller, of course.

00:23:49.820 --> 00:23:50.390
You can go ahead.

00:23:50.400 --> 00:23:52.310
I mean, that's nice.

00:23:57.570 --> 00:24:02.080
So here on the palette on the right,
you get the usual styles.

00:24:02.200 --> 00:24:04.900
So you can select text, type some text.

00:24:04.920 --> 00:24:09.240
And as I said,
now when you're going to be using MLTE,

00:24:09.240 --> 00:24:13.820
and because we're using , we can access
all these advanced typographic features,

00:24:14.190 --> 00:24:16.840
things that before you couldn't
access just because we didn't

00:24:16.840 --> 00:24:20.600
have the APIs and the quick draw
text is too limited to do so.

00:24:20.730 --> 00:24:23.450
So here we type some text.

00:24:23.560 --> 00:24:26.020
You can see that during the
time that John is typing,

00:24:26.160 --> 00:24:27.630
the text is changing.

00:24:27.710 --> 00:24:30.480
Because for instance,
here the S is going to change.

00:24:30.480 --> 00:24:33.750
The ligature on the E is going to move.

00:24:33.880 --> 00:24:36.260
, which means the eggs in French.

00:24:36.320 --> 00:24:38.650
You see the F changing.

00:24:39.080 --> 00:24:40.920
If you know a little bit of French,
you know that "euf" is

00:24:41.010 --> 00:24:42.000
not written like that.

00:24:42.000 --> 00:24:44.360
In fact,
there is a diphthong between the "o" and

00:24:44.360 --> 00:24:46.000
the "e." So how are you going to do that?

00:24:46.000 --> 00:24:51.280
So as I said, each font that Apple has
been shipping in the last,

00:24:51.310 --> 00:24:53.980
I don't know, many years,
has a setting of features.

00:24:54.010 --> 00:24:57.720
So here what's happening is that
Champollion gets the current

00:24:57.720 --> 00:25:01.970
selection from MLTE and asks the font,
"Give me the list of all the features

00:25:01.970 --> 00:25:03.990
that you have." And here we are.

00:25:04.130 --> 00:25:06.550
So we have a bunch of
typographic features,

00:25:06.690 --> 00:25:10.480
letter case, diacritics,
vertical position, fraction.

00:25:11.010 --> 00:25:14.060
All these things are stored in the font.

00:25:14.170 --> 00:25:16.840
So here, for instance,
we can turn on the diphthongs and hop,

00:25:16.950 --> 00:25:18.180
the layout changes.

00:25:18.260 --> 00:25:19.260
The text is the same.

00:25:19.260 --> 00:25:21.730
We didn't change what's stored as text.

00:25:21.800 --> 00:25:23.750
It's just the way the
layout is processed.

00:25:23.880 --> 00:25:25.070
Now we have a diphthong setup.

00:25:25.250 --> 00:25:27.370
So at Sue,
it's really clever to know that

00:25:27.480 --> 00:25:30.000
the O and the E has to be combined.

00:25:30.100 --> 00:25:32.870
So we have, of course,
things that are like swashes,

00:25:32.940 --> 00:25:33.700
rarely get used.

00:25:33.760 --> 00:25:38.730
And you can see the nice compartment,
the S going to the E.

00:25:39.320 --> 00:25:42.440
If you use MLTE in your application now,
you're going to be able to render text

00:25:42.550 --> 00:25:44.160
like never you've been able to do before.

00:25:44.160 --> 00:25:47.950
And it's like, you know,
you have all the power of UniCode.

00:25:47.960 --> 00:25:50.940
You're going to be able to access
the two-by script without focusing on

00:25:50.940 --> 00:25:52.510
how difficult it is to render this.

00:25:52.540 --> 00:25:54.660
And you're going to be
accessing all these features.

00:25:54.660 --> 00:25:58.710
So another nice feature that we have...

00:26:04.910 --> 00:26:08.740
A phone like Skia, for instance,
has been shipping for several years now.

00:26:08.760 --> 00:26:09.960
It has variations in size.

00:26:10.100 --> 00:26:14.690
So if we type some text,

00:26:15.300 --> 00:26:18.360
And we bring back the
typographic features.

00:26:18.360 --> 00:26:20.330
Champollion is going to
be asking to the font,

00:26:20.340 --> 00:26:22.730
to the Skia font,
give me all the variations

00:26:22.850 --> 00:26:24.680
that are stored in the font.

00:26:24.680 --> 00:26:27.700
And here at that point,
if we click on Variations,

00:26:27.700 --> 00:26:28.820
we have features as well.

00:26:28.820 --> 00:26:32.820
So here, just a click on the letter case,
we change everything to caps.

00:26:32.820 --> 00:26:36.560
And what is important here is
that the text didn't change.

00:26:36.560 --> 00:26:38.280
It's just the rendering, OK?

00:26:38.280 --> 00:26:40.360
If we select this text
and put it in simple text,

00:26:40.360 --> 00:26:44.860
for instance, you'll still have the
original text in small caps.

00:26:45.600 --> 00:26:46.420
and the variations.

00:26:46.510 --> 00:26:49.580
So here, Ski has two types of variations,
weight and width.

00:26:49.680 --> 00:26:53.170
And you can see that, you know,
just in real time, you can change the way

00:26:53.230 --> 00:26:54.580
the text is going to flow.

00:26:54.670 --> 00:26:58.420
You can change the weight,
and you can change the width.

00:26:59.000 --> 00:27:02.030
So it's kind of important
for doing layout documents,

00:27:02.120 --> 00:27:02.710
formatting.

00:27:02.860 --> 00:27:06.760
It's very nice if your kid
wants to create some flyers,

00:27:07.130 --> 00:27:08.660
things for his school.

00:27:08.670 --> 00:27:11.570
You can do a bunch of things there.

00:27:17.250 --> 00:27:19.440
So, rarely get yours.

00:27:19.770 --> 00:27:20.550
Play with it, you know.

00:27:20.550 --> 00:27:22.660
It's in system demo, Champollion.

00:27:22.660 --> 00:27:24.500
You can play, you can try with the fonts.

00:27:24.710 --> 00:27:27.180
There are a bunch of fonts that
are shipping with Mac OS X,

00:27:27.180 --> 00:27:27.700
DP4.

00:27:27.700 --> 00:27:29.410
And play with it.

00:27:29.530 --> 00:27:34.150
You'll see you have
different compartments.

00:27:34.190 --> 00:27:37.830
I mean,
I think it's going to give you an idea of

00:27:37.830 --> 00:27:37.830
what the technology is about and how you
can implement that in your application.

00:27:38.100 --> 00:27:42.620
All right,
so MLTE gives you access to UniCode,

00:27:42.650 --> 00:27:45.040
gives you access to advanced
typographic features.

00:27:45.100 --> 00:27:48.000
But as I said, too,
it's a replacement for TextEdit.

00:27:48.030 --> 00:27:52.130
And people have been asking, of course,
for many features to add to TextEdit.

00:27:52.190 --> 00:27:56.220
In this case,
most of these things are in Champollion.

00:27:56.280 --> 00:27:58.720
So one important thing
is embedded objects.

00:27:58.740 --> 00:28:01.080
MLTE supports embedded objects.

00:28:01.120 --> 00:28:01.920
And it's transparent.

00:28:02.110 --> 00:28:04.600
And if you have been
creating simple text files,

00:28:04.600 --> 00:28:07.060
read me files,
and you wanted to put a picture,

00:28:07.060 --> 00:28:09.730
because you know how annoying it
is to create the resource-picked

00:28:09.850 --> 00:28:14.500
10,000 and put the embedded character
CA in the data fork or the text.

00:28:14.500 --> 00:28:17.380
And then, of course,
if you want to ship this file to Japan,

00:28:17.420 --> 00:28:19.580
you have to change it,
because what's happening is that

00:28:19.670 --> 00:28:22.300
the CA character is the first
byte of the two-byte character.

00:28:22.300 --> 00:28:24.240
So you have to change everything again.

00:28:24.240 --> 00:28:28.270
Here, with one format,
when you're going to save MLTE,

00:28:28.380 --> 00:28:33.250
you get pictures, sounds, movies, text,
UniCode text, the features,

00:28:33.420 --> 00:28:36.120
the ligatures, all the phone variations.

00:28:36.320 --> 00:28:39.180
And here, we just have a movie,
and we can play it.

00:28:39.180 --> 00:28:41.480
You can ship back to your customers.

00:28:42.430 --> 00:28:45.000
So with the new releases,
we're adding two types

00:28:45.110 --> 00:28:46.620
for saving these movies,
which I think you're

00:28:46.620 --> 00:28:47.260
going to be interested in.

00:28:47.260 --> 00:28:51.090
Because if the movie is 50 megabytes,
well, if you flatten the movie to the

00:28:51.090 --> 00:28:54.210
disk when you save your file,
you're going to get a file of 50 megs.

00:28:54.270 --> 00:28:57.700
So a new way to do that is
to just save as a reference.

00:28:57.730 --> 00:29:00.550
And that's nice, because you're going to
be creating your document.

00:29:00.640 --> 00:29:02.300
You could ship it to your customers.

00:29:02.320 --> 00:29:04.540
And inside,
you could put a movie that is, in fact,

00:29:04.630 --> 00:29:06.780
somewhere on your network.

00:29:06.840 --> 00:29:12.120
So it could be just going on the internet
and loading the file and streaming it.

00:29:13.870 --> 00:29:16.040
So we can see,
you can save that in your document.

00:29:16.040 --> 00:29:17.400
You can type text, of course.

00:29:17.430 --> 00:29:20.580
Here, if we open a picture--

00:29:22.790 --> 00:29:23.730
We get a big picture.

00:29:23.740 --> 00:29:26.460
Let's try to get just a piece of it.

00:29:26.570 --> 00:29:27.940
So we're going to copy that.

00:29:28.060 --> 00:29:30.270
So here, the application is handling it.

00:29:30.350 --> 00:29:31.920
You paste it in the document.

00:29:32.240 --> 00:29:34.970
At that point, once again, one call.

00:29:35.050 --> 00:29:36.300
Txn paste.

00:29:36.350 --> 00:29:39.330
Txn paste is going to check
what's in the current scrap board.

00:29:39.410 --> 00:29:41.340
If it's a picture,
we're going to handle it for you.

00:29:41.610 --> 00:29:43.050
If it's a movie, we'll paste it.

00:29:43.290 --> 00:29:47.420
If it's text, we've styled resource,
like the way simple text does things,

00:29:47.420 --> 00:29:49.120
we're going to paste
this in the document.

00:29:49.180 --> 00:29:50.860
It's one call for you.

00:29:50.910 --> 00:29:54.780
And here, at that point, drag and drop,
same thing.

00:29:54.850 --> 00:29:56.240
You get a click in your application.

00:29:56.350 --> 00:29:58.620
You pass the click to the Txn object.

00:29:58.670 --> 00:30:00.580
And we're going to handle
if you are scrolling.

00:30:00.630 --> 00:30:03.730
If a click is in the scroll bar,
we're going to handle if it's

00:30:03.740 --> 00:30:06.620
the beginning of a drag and drop.

00:30:06.770 --> 00:30:09.480
So I think it's pretty powerful.

00:30:10.800 --> 00:30:14.540
Before we go to the next,
in my first slide,

00:30:14.540 --> 00:30:16.620
or maybe the second slide,
I was saying that, you know,

00:30:16.620 --> 00:30:20.260
our technologies on
10 are moving forward,

00:30:20.260 --> 00:30:22.080
and now we're trying
to implement and using,

00:30:22.080 --> 00:30:24.500
of course, like, you know,
all the power of Mac OS X.

00:30:24.500 --> 00:30:26.740
And one of the very nice
features of Mac OS X,

00:30:26.780 --> 00:30:28.690
of course, is quartz rendering.

00:30:29.360 --> 00:30:32.020
So what I'm going to show is
just something we're working on,

00:30:32.020 --> 00:30:32.500
okay?

00:30:32.500 --> 00:30:37.230
It's not finished, but here,
we're going to be using MLTE,

00:30:37.240 --> 00:30:42.250
and when we release this, we'll be using,
by default, quartz.

00:30:42.250 --> 00:30:42.250
And your application...

00:30:42.390 --> 00:30:43.030
We'll see nothing.

00:30:43.220 --> 00:30:44.910
It's just like setting a tag.

00:30:45.110 --> 00:30:47.880
And you'll be switching from
Quick Draw to cross-rendering.

00:30:47.990 --> 00:30:51.830
So here we have a document with
a special version of Champollion.

00:30:52.000 --> 00:30:54.900
And here we can see we can change--

00:30:55.240 --> 00:30:57.310
This is only like, you know,
quartz rendering.

00:30:57.390 --> 00:30:58.990
So like,
what's happening at that point is like,

00:30:59.080 --> 00:31:01.740
you know, we're triggering a CG context.

00:31:01.790 --> 00:31:05.620
And here, we're just changing the way
the shadow is going to look.

00:31:05.700 --> 00:31:07.700
So we can change the radiance, like,
you know, for a shadow.

00:31:07.700 --> 00:31:11.490
We can change the k,
which is like the coefficient for

00:31:11.490 --> 00:31:12.910
the transparency of the shadow.

00:31:12.970 --> 00:31:13.660
So here, that's cool.

00:31:13.660 --> 00:31:14.320
We cannot see it.

00:31:14.320 --> 00:31:16.420
So let's try to change the height.

00:31:16.530 --> 00:31:17.850
So here, we change the height.

00:31:18.030 --> 00:31:20.470
You can see the shadow getting away.

00:31:21.940 --> 00:31:24.100
At that point,
setting these kind of features is

00:31:24.100 --> 00:31:26.200
the same as setting a variation.

00:31:26.240 --> 00:31:27.100
It's just one set.

00:31:27.150 --> 00:31:29.890
It's like another style
attribute we're working on.

00:31:30.950 --> 00:31:32.100
You can change the angle.

00:31:32.240 --> 00:31:32.720
So look at that.

00:31:32.800 --> 00:31:33.390
You have the angle.

00:31:33.460 --> 00:31:37.510
Can we change the coefficient
for the radiation so it's darker?

00:31:40.000 --> 00:31:44.450
And here we can move the
shadow around the text.

00:31:44.530 --> 00:31:47.830
We can put it like, you know, far away.

00:31:47.990 --> 00:31:53.610
And here, of course, if you type text,
you can just type, and that's it.

00:31:53.710 --> 00:31:56.150
We're reducing quarts at that point.

00:31:56.560 --> 00:31:59.640
You'll get all the nice shadow
and the nice effects behind that.

00:31:59.700 --> 00:32:00.620
So this is coming soon.

00:32:00.770 --> 00:32:02.330
That's fine.

00:32:02.380 --> 00:32:02.670
Thank you.

00:32:11.680 --> 00:32:15.840
Let me go back to my slides now.

00:32:15.890 --> 00:32:17.520
So once again, check it out.

00:32:17.520 --> 00:32:20.680
The version that is in DP4, system,
demos,

00:32:20.680 --> 00:32:23.160
the application is called Champollion.

00:32:23.260 --> 00:32:26.800
I think the movie support is not
enabled in this specific release,

00:32:26.800 --> 00:32:28.940
but it's just coming soon.

00:32:28.940 --> 00:32:32.960
You can play with the fonts,
check out Skia, Chains 3 is there,

00:32:32.960 --> 00:32:34.200
Earthflare Text is there.

00:32:34.220 --> 00:32:35.350
You have a bunch of features.

00:32:35.370 --> 00:32:37.190
You can play with that.

00:32:39.290 --> 00:32:40.880
What can MLTE do for you?

00:32:41.040 --> 00:32:45.200
So MLTE is going to be
handling the Unicode input,

00:32:45.250 --> 00:32:47.580
the editing and the display.

00:32:47.720 --> 00:32:49.200
as a complete package.

00:32:49.220 --> 00:32:52.560
So for instance,
if you want to do like two byte input,

00:32:52.570 --> 00:32:54.320
you're not going to have
to install the TSM enders.

00:32:54.350 --> 00:32:59.370
Once again, this is created automatically
when you create a new TXN object,

00:32:59.370 --> 00:33:00.750
an MLT object.

00:33:01.100 --> 00:33:04.160
It addresses many text edit limitations,
and I have a slide on the

00:33:04.220 --> 00:33:08.070
features to show you a set
of features that we support.

00:33:08.110 --> 00:33:10.270
It handles the low level
managers transparently.

00:33:10.430 --> 00:33:12.440
So once again, same thing.

00:33:12.440 --> 00:33:15.460
When you create a TXNU object,
we're going to install the drag handlers.

00:33:15.610 --> 00:33:17.370
We're going to install the scrollers.

00:33:17.490 --> 00:33:19.890
If you want a horizontal scroll bar,
it's just a flag that

00:33:19.890 --> 00:33:21.020
you pass to the object.

00:33:21.150 --> 00:33:24.550
You want a vertical scroll bar,
it's another flag.

00:33:24.910 --> 00:33:28.040
Oh, this thing is going very fast for me.

00:33:28.040 --> 00:33:30.040
Which makes adoption very easy.

00:33:30.040 --> 00:33:32.580
And we have sample code
once again to show you that.

00:33:32.580 --> 00:33:36.120
It provides easy access to its
three advanced typographic features.

00:33:36.120 --> 00:33:38.680
Setting at three typographic
features with MLTE,

00:33:38.680 --> 00:33:41.800
it's just a matter of
setting a style attribute.

00:33:41.800 --> 00:33:44.950
It's like setting bold,
it's like setting italic.

00:33:46.060 --> 00:33:49.220
All right, let's see what other features.

00:33:49.240 --> 00:33:51.820
Last year when I did, actually,
I talked to a couple of developers.

00:33:51.820 --> 00:33:55.280
And every time you ask them,
what is the feature that you

00:33:55.280 --> 00:33:57.330
really need in a text engine?

00:33:57.400 --> 00:34:00.520
If you have to change something-- yes,
new 32K limit.

00:34:00.540 --> 00:34:02.790
I think this is on the timer.

00:34:03.150 --> 00:34:04.560
Sorry about that.

00:34:04.660 --> 00:34:08.400
So if you ask to a developer,
he will say that no 32K limit.

00:34:08.460 --> 00:34:11.530
And MLTE, of course,
handles more than 32K text.

00:34:11.680 --> 00:34:13.440
So you don't have to worry about that.

00:34:13.560 --> 00:34:17.000
The size limitation is only limited
to the memory of your application.

00:34:17.120 --> 00:34:18.160
So this is great.

00:34:19.640 --> 00:34:21.140
Tabulation support.

00:34:21.160 --> 00:34:24.150
You can now set a tab
setting per document.

00:34:24.240 --> 00:34:27.380
So you know, not like on TextEdit,
when you press tab, wow,

00:34:27.520 --> 00:34:30.440
when you press tab,
we're going to have a real tabulation.

00:34:30.460 --> 00:34:31.520
You're not going to have a space.

00:34:31.520 --> 00:34:33.350
I'm going to have to go fast.

00:34:33.380 --> 00:34:34.520
Embedded objects.

00:34:34.520 --> 00:34:36.970
We support pictures, sounds, and movies.

00:34:36.980 --> 00:34:41.010
And once again, the way to set that is
just a matter of one API,

00:34:41.010 --> 00:34:45.610
a handle on the data, wow,
a handle on the data, and that's it,

00:34:45.610 --> 00:34:46.750
you're set.

00:34:48.040 --> 00:34:48.940
Multiple undoes.

00:34:48.940 --> 00:34:51.110
We support 32 levels of undoes and redos.

00:34:51.440 --> 00:34:55.240
Once again, just a matter of simple APIs,
TXN undo, TXN redo.

00:34:55.240 --> 00:34:58.220
We support setting for
full justification support.

00:34:59.660 --> 00:35:02.100
It's one setting per document.

00:35:02.130 --> 00:35:05.380
Whoa, it's getting pretty bad.

00:35:05.420 --> 00:35:07.440
More features if I have time.

00:35:07.460 --> 00:35:09.590
Gritting/scrolling,
as I showed you in the demo.

00:35:09.810 --> 00:35:12.480
The printing and the keyboard
support is done for you.

00:35:12.520 --> 00:35:14.640
We have APIs to handle that.

00:35:14.710 --> 00:35:17.990
And if you're moving to Carbon and to 10,
for instance, you know that you have

00:35:18.000 --> 00:35:19.560
to rewrite the printing.

00:35:19.600 --> 00:35:23.880
And here, if you use MLTE,
that will be handled transparently.

00:35:23.900 --> 00:35:25.620
The I/O.

00:35:25.650 --> 00:35:29.460
We introduced a new file format, TXTN,
which is the file format that's going

00:35:29.460 --> 00:35:33.270
to be saved to the disk and that's
going to support the embedded objects

00:35:33.390 --> 00:35:36.040
that you have in your document,
the Unicode text,

00:35:36.070 --> 00:35:38.280
and all of the at-series
style attributes.

00:35:38.340 --> 00:35:41.240
So the features, the variations,
and all these things.

00:35:41.250 --> 00:35:44.880
But you can still save, of course,
if you desire, if you want to do so,

00:35:44.910 --> 00:35:48.320
as plain Unicode file,
and we'll do it automatically for you.

00:35:48.340 --> 00:35:50.840
TXTN save,
you pass an FSPEC and a flag with

00:35:50.900 --> 00:35:52.560
a type that you want to save to.

00:35:52.560 --> 00:35:54.790
And we support, of course,
the simple text format.

00:35:54.940 --> 00:35:57.420
So when you use MLTE,
you can still export data.

00:35:57.420 --> 00:36:01.860
So simple text, Apple works,
Microsoft Word can understand.

00:36:03.790 --> 00:36:06.730
There are two ways to use MLTE.

00:36:06.850 --> 00:36:10.450
And the first one is for text editing.

00:36:10.540 --> 00:36:14.550
You'll be using it for labels,
small text edit fields, or small editors.

00:36:14.660 --> 00:36:17.400
And the second way-- and we've been
adding that because last year we talked

00:36:17.400 --> 00:36:21.480
to developers and there is one thing they
wanted is static display of UniCode text.

00:36:21.580 --> 00:36:25.180
They want one API where they're
going to be able to pass a UniCode

00:36:25.220 --> 00:36:28.640
string and maybe some parameters,
a rect, and that's it,

00:36:28.690 --> 00:36:29.720
and it's going to be displayed.

00:36:29.840 --> 00:36:31.930
And this is the API to use in this case,
and I'll talk about

00:36:31.940 --> 00:36:33.370
that in my next slide.

00:36:33.500 --> 00:36:34.900
We have one API now.

00:36:34.990 --> 00:36:35.830
It takes two flavors.

00:36:35.910 --> 00:36:38.500
If you're working on Carbon IP10,
you can pass a CFString,

00:36:38.630 --> 00:36:41.830
or if you're working on 9,
you can still pass a UniCode

00:36:41.830 --> 00:36:43.700
pointer and a length pair.

00:36:43.770 --> 00:36:45.380
And it takes many options.

00:36:45.460 --> 00:36:48.880
By default, you just need to pass the
text and the rectangle,

00:36:48.880 --> 00:36:53.290
but if you want, you can pass many more,
and I'll show you that in the next slide.

00:36:53.780 --> 00:36:56.010
The text editing.

00:36:56.100 --> 00:36:58.360
It's ideal for small text
areas and text fields.

00:36:58.570 --> 00:37:03.470
It does a lot of things for
you with very few calls.

00:37:03.570 --> 00:37:06.250
It supports all that three styles, tags.

00:37:06.330 --> 00:37:09.700
And this is important if
you see the-- oh my god.

00:37:09.890 --> 00:37:15.210
And this is important because it gives
you access to a range of new style and

00:37:15.340 --> 00:37:17.860
features that you couldn't access before.

00:37:17.930 --> 00:37:22.640
So MLTE with one simple API is going
to give you access to all these things.

00:37:22.720 --> 00:37:26.420
It's easy to set and retrieve line,
words, characters from the document.

00:37:26.480 --> 00:37:28.550
Once again,
now you can call an API and get

00:37:28.630 --> 00:37:31.040
the fifth word on the second line.

00:37:31.070 --> 00:37:32.730
Just that.

00:37:33.450 --> 00:37:36.890
It takes care of the inline text input,
the layout, and the rendering.

00:37:36.890 --> 00:37:39.020
Once again,
when you initialize the text engine,

00:37:39.060 --> 00:37:44.190
we're going to install a
bunch of handlers for you,

00:37:44.250 --> 00:37:50.160
and we're going to try to make your
life really easy so you can focus on

00:37:50.160 --> 00:37:50.160
what your application is supposed to do
and not the way you should handle text.

00:37:50.160 --> 00:37:50.160
MLTE is going to handle that for you.

00:37:51.240 --> 00:37:54.870
The text editing before MLT,
just as a quick example.

00:37:54.950 --> 00:37:58.920
If you wanted to handle two byte scripts,
before you had to install-- oh my god--

00:37:59.030 --> 00:38:01.020
you had to install the TSM handlers.

00:38:01.110 --> 00:38:03.570
Then if you wanted to
support drag and drop,

00:38:03.670 --> 00:38:05.050
you have to install the drag handlers.

00:38:05.170 --> 00:38:07.680
If you wanted to create scroll bars,
you had to install the

00:38:07.680 --> 00:38:08.950
scroll bars yourself.

00:38:09.030 --> 00:38:10.220
Manage your internal scrap.

00:38:10.270 --> 00:38:13.620
And of course, manage yourself the I/O.

00:38:14.160 --> 00:38:17.320
This is something like 212 lines of code,
and we have a sample

00:38:17.320 --> 00:38:18.440
code to show you that.

00:38:18.500 --> 00:38:23.960
And this handles only basic scrolling,
basic internal script management,

00:38:24.150 --> 00:38:26.500
and very limited save and open.

00:38:26.560 --> 00:38:29.040
With MLTE, now, six lines of code.

00:38:29.280 --> 00:38:31.230
And I swear, you have to check it out.

00:38:31.330 --> 00:38:32.250
It's very easy.

00:38:32.530 --> 00:38:35.610
You can compare the two files and
find out that one code is going to

00:38:35.680 --> 00:38:39.020
do so much compared with what you
had to do before we've texted it.

00:38:39.080 --> 00:38:43.100
One code with the XNU object is going
to hand style all the drag handlers.

00:38:43.160 --> 00:38:44.580
All right.

00:38:44.620 --> 00:38:48.140
All the drag handlers and all the
things to enter the Unicode input.

00:38:48.210 --> 00:38:50.710
To manage the scrap, we have two APIs.

00:38:50.910 --> 00:38:53.600
The XN convert from public scrap,
and we're going to take

00:38:53.700 --> 00:38:56.450
whatever is on the public scrap,
convert it to something that your

00:38:56.510 --> 00:38:59.740
application and MLTE can understand,
and convert to public scrap.

00:38:59.770 --> 00:39:01.990
That's going to take whatever
is on internal scrap board

00:39:01.990 --> 00:39:03.730
of MLTE to the public scrap.

00:39:03.790 --> 00:39:05.460
And this is very cool.

00:39:05.530 --> 00:39:07.860
The XN save and open, same thing.

00:39:07.940 --> 00:39:12.030
You pass an FSPEC, a file ref,
and a file type.

00:39:12.050 --> 00:39:13.100
So we're going to find out.

00:39:13.100 --> 00:39:15.580
And we're going to be
able to open UTXT files,

00:39:15.770 --> 00:39:19.760
simple text files, plain Unicode files,
or TXTN files.

00:39:19.760 --> 00:39:23.270
And at that point,
it's just a matter of calling one API.

00:39:26.820 --> 00:39:28.340
The static text display.

00:39:28.430 --> 00:39:30.060
So people have been asking for that.

00:39:30.440 --> 00:39:33.620
TXN Draw UniCode TextBox is
the solution if you want to

00:39:33.630 --> 00:39:36.140
display mono-styled Unicode text.

00:39:36.550 --> 00:39:40.030
By default, the only parameters you
have to pass are the text,

00:39:40.030 --> 00:39:42.400
a length, or a CFString,
depending on what you do.

00:39:42.610 --> 00:39:44.930
Ooh, this is bad.

00:39:46.390 --> 00:39:49.530
So the text,
a rectangle to do the word wrap,

00:39:49.530 --> 00:39:52.240
and if you want,
you can pass a bunch of flags

00:39:52.290 --> 00:39:56.610
in the option structure,
which are-- we're going

00:39:57.100 --> 00:40:00.500
to handle vertical text,
rotation, flushness,

00:40:00.500 --> 00:40:00.500
if you want to justify the text.

00:40:01.000 --> 00:40:03.430
And if you'd like,
you can pass your own ATSUI style.

00:40:03.610 --> 00:40:04.140
You don't have to.

00:40:04.140 --> 00:40:06.000
If you don't want,
we'll take whatever is in

00:40:06.000 --> 00:40:09.120
the current graph port,
convert the font, the font size,

00:40:09.280 --> 00:40:13.760
and the style attributes to
something that ATSUI can understand.

00:40:15.660 --> 00:40:18.890
OK, my conclusion slide-- very difficult.

00:40:19.170 --> 00:40:19.840
Think different.

00:40:20.050 --> 00:40:22.120
And Unicode is more and more important.

00:40:22.250 --> 00:40:25.460
And I think we have the right
technologies now for you to use and to

00:40:25.460 --> 00:40:27.440
implement easily in your application.

00:40:27.490 --> 00:40:31.010
If you have very specific needs
and you need fine control of where

00:40:31.050 --> 00:40:33.600
the glitz should be displayed,
use Hatsui.

00:40:33.630 --> 00:40:34.660
Hatsui is the solution.

00:40:34.820 --> 00:40:38.630
It's the only way to display
Unicode text correctly.

00:40:39.210 --> 00:40:41.700
If you want something
a little bit easier,

00:40:41.750 --> 00:40:44.200
actually I should say way easier,
MLTE is the solution.

00:40:44.300 --> 00:40:47.200
MLTE is like, the text package is going
to do so much for you,

00:40:47.200 --> 00:40:50.540
it's going to shield you from
having to deal with the complexity

00:40:50.540 --> 00:40:54.380
of a toolbox for the scrolling,
with the complexity of TSM for ending

00:40:54.460 --> 00:40:56.820
two byte scripts and Unicode input.

00:40:58.670 --> 00:40:59.980
Once again, think UniCode.

00:41:00.100 --> 00:41:02.110
This is the only way
where things are going.

00:41:02.210 --> 00:41:03.840
It's not on your platform.

00:41:03.910 --> 00:41:04.560
It's Windows.

00:41:04.770 --> 00:41:06.760
It's the internet standard now.

00:41:07.060 --> 00:41:10.640
And your application at one point is
going to have to deal with UniCode.

00:41:10.720 --> 00:41:12.720
So think about our technologies.

00:41:12.790 --> 00:41:16.030
CarbonLib 9 and 10,
the same set of APIs is

00:41:16.040 --> 00:41:17.920
going to be working.

00:41:19.190 --> 00:41:20.840
Think MLTE.

00:41:20.870 --> 00:41:21.660
MLTE is great.

00:41:21.740 --> 00:41:22.660
We have sample code.

00:41:22.860 --> 00:41:24.800
I'll show you that in the documentation.

00:41:24.910 --> 00:41:27.860
Switching from text-edit implementation
to MLTE is going to reduce the

00:41:27.860 --> 00:41:29.180
number of lines in your code.

00:41:29.220 --> 00:41:33.860
MLTE is going to do many things that
you had to handle by yourself before.

00:41:33.860 --> 00:41:39.000
So it's a nice way to transition to go
to CarbonLib and move forward to 10.

00:41:39.720 --> 00:41:41.840
Before we go to the Q&A,
I'd like to show you just where

00:41:41.840 --> 00:41:43.430
you can find more information.

00:41:43.530 --> 00:41:47.610
On the developer.apple.com,
in the text services,

00:41:47.620 --> 00:41:49.640
we have a list of the
current technologies.

00:41:49.750 --> 00:41:52.480
So you'll find info on
specific topics like TSM,

00:41:52.480 --> 00:41:58.030
if you'd like, , MLT, TSC,
the text and coding converter.

00:41:58.120 --> 00:41:59.770
There is an MLT SDK available.

00:41:59.960 --> 00:42:04.910
I don't know if it's already on the net,
if it's on Apple website.

00:42:05.210 --> 00:42:06.070
I saw it last week.

00:42:06.150 --> 00:42:08.910
We had a kitchen on Sunday,
and it's great.

00:42:09.020 --> 00:42:10.450
There are, like, you know,
Carbon examples.

00:42:10.620 --> 00:42:12.860
There are examples of, like,
how to use MLT,

00:42:12.890 --> 00:42:15.680
how to create the font menu,
how to use TXNU object,

00:42:15.760 --> 00:42:19.160
how to handle the events,
even if you're using Carbon events.

00:42:19.160 --> 00:42:20.160
It's very nice.

00:42:20.160 --> 00:42:22.150
It's well documented.

00:42:24.900 --> 00:42:25.320
The roadmap.

00:42:25.520 --> 00:42:29.150
So yesterday you hope you did
go to the Carbon event model.

00:42:29.160 --> 00:42:34.100
If you didn't, there is still, like,
you know, I think some refresh.

00:42:34.100 --> 00:42:35.810
Some people are going to
have some slides after that.

00:42:35.900 --> 00:42:37.190
Mac OS X font management.

00:42:37.290 --> 00:42:40.210
This is the right place to find
out about how the Mac OS X font

00:42:40.210 --> 00:42:42.130
management is going to be going.

00:42:42.140 --> 00:42:44.450
They'll be talking about
the font objects APIs,

00:42:44.480 --> 00:42:48.570
how to access probably, like, you know,
the font tables and all these things.

00:42:48.570 --> 00:42:49.540
It's pretty nice.

00:42:50.270 --> 00:42:50.760
Quartz.

00:42:50.760 --> 00:42:54.380
Quartz will be exposing some of the
APIs that now you can use on 10.

00:42:54.380 --> 00:42:56.640
Quartz is the way to go.

00:42:56.650 --> 00:42:58.650
It's a very nice rendering engine.

00:42:58.650 --> 00:43:00.050
Our technologies will be using it.

00:43:00.080 --> 00:43:02.340
If you need more info, please go there.

00:43:02.340 --> 00:43:03.450
Advanced printing.

00:43:03.450 --> 00:43:06.410
Once again, if you move towards 10,
you know that the printer

00:43:06.750 --> 00:43:08.240
architecture is changing.

00:43:08.240 --> 00:43:10.960
Of course, if you use MLTE,
that will be transparent for you.

00:43:10.990 --> 00:43:13.820
But if you need to do your own printing,
please go there.

00:43:13.820 --> 00:43:14.810
They'll have a lot of information.

00:43:14.820 --> 00:43:16.040
Important.

00:43:16.040 --> 00:43:17.310
Session 912.

00:43:17.370 --> 00:43:20.220
It's the feedback forum
for text and internet.

00:43:20.220 --> 00:43:22.000
We'll have a bunch of engineers there.

00:43:22.000 --> 00:43:22.390
Come by.

00:43:22.570 --> 00:43:25.610
We can talk, you know, about, like,
if you have specific problems,

00:43:25.610 --> 00:43:26.890
implementation requests.

00:43:27.000 --> 00:43:30.430
It's always good to have feedback on
the technologies we're working on.

00:43:30.440 --> 00:43:33.020
Talking about feedback, we'll have,
I think,

00:43:33.130 --> 00:43:36.500
some balloons in the hall for lunch,
for international lunch.

00:43:36.500 --> 00:43:39.020
We'll have, like, three different tables.

00:43:39.020 --> 00:43:42.180
I think one for font, one for text,
and one for H3.

00:43:42.180 --> 00:43:44.430
Please come by if you have, like,
you know, once again,

00:43:44.500 --> 00:43:46.520
if you want more information
or specific requests,

00:43:46.610 --> 00:43:48.490
or it's, like,
a good way to talk to the engineers

00:43:48.490 --> 00:43:50.210
that are working on the technology.

00:43:50.220 --> 00:43:52.440
We'll have a bunch of people there.

00:43:52.440 --> 00:43:53.630
All right.

00:43:53.630 --> 00:43:55.190
Hope you liked it.

00:43:55.550 --> 00:43:58.360
Of course, we have some Q&A.