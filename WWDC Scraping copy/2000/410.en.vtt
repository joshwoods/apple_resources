WEBVTT

00:00:17.840 --> 00:00:20.540
Good morning, everyone.

00:00:20.680 --> 00:00:21.300
Please take a seat.

00:00:21.300 --> 00:00:22.430
We're about ready to get started.

00:00:22.430 --> 00:00:25.070
If you are in the overflow room,
we have plenty of room

00:00:25.070 --> 00:00:26.560
still here in the main hall.

00:00:26.600 --> 00:00:29.790
Probably the only time that's true today,
so come and take advantage of it.

00:00:29.800 --> 00:00:32.800
So glad to see you all here this morning.

00:00:32.800 --> 00:00:35.790
How many of you made it to
the community BOF last night?

00:00:35.800 --> 00:00:36.770
You have a good time?

00:00:36.770 --> 00:00:39.030
Get to meet some people,
learn a few things?

00:00:39.030 --> 00:00:39.800
Excellent.

00:00:39.800 --> 00:00:42.790
So as you can see, we got tired of having
Bill preaching at us from the aisles.

00:00:42.800 --> 00:00:46.800
We decided to just bring him up on stage
and make it a lot easier on all of us.

00:00:46.800 --> 00:00:50.730
So we're pleased to have Alex Cone
and Bill Bumgarner here from CodeFab.

00:00:50.810 --> 00:00:52.670
These people between them probably
have a good fraction of the

00:00:52.750 --> 00:00:54.800
WebObjects experience on the planet.

00:00:54.800 --> 00:00:57.990
And so we're really pleased to have them
here about how to tune the last drop of

00:00:57.990 --> 00:00:59.620
performance out of your applications.

00:00:59.840 --> 00:01:01.440
Alex and Bill.

00:01:04.920 --> 00:01:08.900
Thank you all for getting up at the
crack of dawn and getting down here.

00:01:08.900 --> 00:01:11.860
I know next time we'll make sure that
this session is later in the day so

00:01:11.860 --> 00:01:13.380
everyone can sleep in in the morning.

00:01:13.450 --> 00:01:18.970
That's the first trick to optimizing is
make sure you get a good night's sleep.

00:01:19.780 --> 00:01:26.520
Okay, so, you know, basically, you know,
this is about the good stuff.

00:01:26.590 --> 00:01:31.000
You know, you've got an opportunity to do
killer high performance application.

00:01:31.000 --> 00:01:34.900
This is when somebody wants to do the
big high transaction rate e-store that's

00:01:34.900 --> 00:01:36.830
going to make a bazillion dollars.

00:01:36.830 --> 00:01:39.320
And, you know,
this thing has actually got to work.

00:01:39.410 --> 00:01:40.240
It's got to work well.

00:01:40.240 --> 00:01:42.440
It's got to work well with a
lot of people doing a lot of

00:01:42.780 --> 00:01:44.000
transactions through this thing.

00:01:44.000 --> 00:01:48.260
And, you know, and in truth, you know,
you have to do a little bit of

00:01:48.470 --> 00:01:52.100
thinking and planning before
you can get something that works

00:01:52.100 --> 00:01:55.630
exactly the way you want it to,
to be ultra high performance

00:01:55.640 --> 00:01:59.070
and ultra reliable,
ultra scalable, and so forth.

00:01:59.100 --> 00:02:02.880
And we're going to try and give you
some good points on how to make a

00:02:02.900 --> 00:02:07.190
WebObjects app that can take all that
punishment and make it look easy.

00:02:07.190 --> 00:02:10.500
And we want to help you guys
build an application like

00:02:10.500 --> 00:02:12.350
that and make it look easy.

00:02:12.350 --> 00:02:13.600
Okay.

00:02:13.600 --> 00:02:16.090
So, this is what you're going to learn.

00:02:16.090 --> 00:02:19.170
How to do it leaner, meaner, faster,
nastier WebObjects applications

00:02:19.220 --> 00:02:20.690
that will kick everyone's butt.

00:02:20.700 --> 00:02:23.810
Most importantly, you know,
how to optimize them

00:02:23.820 --> 00:02:25.400
before you build them.

00:02:25.400 --> 00:02:28.040
And then, you know,
what to do when the application

00:02:28.120 --> 00:02:31.400
turns out to be quite as
fast as you wanted it to be.

00:02:31.400 --> 00:02:35.690
And how to get that last ounce
of performance out of it.

00:02:35.800 --> 00:04:37.100
[Transcript missing]

00:04:37.660 --> 00:04:39.060
You want to start from here?

00:04:39.120 --> 00:04:40.420
Sure.

00:04:40.510 --> 00:04:44.780
Okay, so one of the things is that with
optimization is you don't want to

00:04:44.780 --> 00:04:47.160
optimize something before it works.

00:04:47.360 --> 00:04:49.740
However,
there are some things you can do before

00:04:49.740 --> 00:04:54.890
you start coding that will lead to an
application that is both relatively

00:04:54.930 --> 00:05:00.300
optimal or at least passable as well
as something that can be optimized.

00:05:00.300 --> 00:05:04.860
One of the philosophies we
work by is to make it work,

00:05:04.860 --> 00:05:08.050
then make it work right,
and then make it fast.

00:05:08.050 --> 00:05:11.110
And it's very important
to make it fast last.

00:05:11.110 --> 00:05:16.900
A big mistake people make is trying to
optimize something before it exists.

00:05:16.900 --> 00:05:19.560
In that,
what we're going to talk about is design,

00:05:19.560 --> 00:05:24.810
what you can do in the design and in the
initial coding process to really lead to

00:05:24.810 --> 00:05:31.220
an application or a server solution that
can be scaled and managed and extended.

00:05:31.220 --> 00:05:34.220
In that, within that,
understand usage patterns.

00:05:34.220 --> 00:05:37.530
You want to optimize the
most used areas first.

00:05:37.680 --> 00:05:40.680
You really want to focus your
design around the areas that you

00:05:40.680 --> 00:05:43.380
think the users are going to use.

00:05:43.380 --> 00:05:46.680
If you're talking about a large site
and you have the budget to do it,

00:05:46.860 --> 00:05:48.090
do some use testing.

00:05:48.310 --> 00:05:51.940
Do some focus testing where you
take some--your potential user

00:05:51.940 --> 00:05:55.620
audience and run them through the
designs and get their feedback.

00:05:55.790 --> 00:05:58.740
There's companies out there that do this.

00:05:58.740 --> 00:06:00.480
The other thing is make
your entry page fast.

00:06:00.640 --> 00:06:04.160
One of the things you'll see on the web,
especially when you get nailed

00:06:04.160 --> 00:06:06.700
down by the slash.factory,
you get touted in AOL or

00:06:06.700 --> 00:06:09.850
something like that,
is that you'll get hundreds and

00:06:09.850 --> 00:06:13.360
hundreds of users that will hit
your entry page and go no deeper.

00:06:13.410 --> 00:06:16.590
Kind of depressing but it's the reality.

00:06:16.610 --> 00:06:19.180
To that end, one of the things that
Dave Newman mentioned in

00:06:19.180 --> 00:06:22.320
his security thing yesterday
which was very interesting.

00:06:22.320 --> 00:06:25.120
If you're talking about a site--well,
not even a site where there's

00:06:25.120 --> 00:06:28.110
logins but in general,
if you're talking about a site where

00:06:28.440 --> 00:06:34.100
you don't need to create a user session
when the user hits the entry page,

00:06:34.100 --> 00:06:37.600
you can avoid a tremendous amount
of overhead by not creating an

00:06:37.600 --> 00:06:41.990
individual user session when
the user hits that entry page.

00:06:42.000 --> 00:06:45.090
That can be a great boon to performance.

00:06:45.210 --> 00:06:48.550
Plan your business logic
around response generation.

00:06:48.600 --> 00:06:53.250
One of the things we commonly find
ourselves doing is we're building back

00:06:53.400 --> 00:06:56.720
end applications like entry tools,
etc.

00:06:56.720 --> 00:07:01.000
And while those are more complex,
what you really want to do is

00:07:01.000 --> 00:07:06.070
design your business logic about
how the front is going to be used.

00:07:07.360 --> 00:07:10.380
You want to avoid repeating
expensive calculations.

00:07:10.380 --> 00:07:13.600
Use caching.

00:07:13.650 --> 00:07:15.520
Just avoid the expensive ones altogether.

00:07:15.570 --> 00:07:16.690
Use less precision.

00:07:16.950 --> 00:07:18.290
Don't provide as much information.

00:07:18.350 --> 00:07:22.320
Or provide user interfaces where if the
user wants the expensive information,

00:07:22.320 --> 00:07:24.200
they have to drill down a little bit.

00:07:24.300 --> 00:07:26.740
They have to ask for it.

00:07:26.740 --> 00:07:27.970
Retain and reuse data.

00:07:27.970 --> 00:07:29.400
Know when it is out of date.

00:07:29.400 --> 00:07:30.510
That's a huge issue.

00:07:30.510 --> 00:07:33.410
There's a caching session,
EOF caching session.

00:07:33.440 --> 00:07:35.540
I recommend everyone go to that.

00:07:35.540 --> 00:07:37.060
And manage your cached data carefully.

00:07:37.080 --> 00:07:41.080
This is a huge issue as well.

00:07:41.080 --> 00:07:44.740
Think carefully about how often you
really need to refresh that data and

00:07:44.860 --> 00:07:47.200
how you're going to go about doing that.

00:07:47.200 --> 00:07:51.650
One common mistake is invalidating
your cache simultaneously across all

00:07:51.680 --> 00:07:56.470
your applications so every single app
hits the database at the same time.

00:07:56.470 --> 00:07:57.730
Bad idea.

00:07:59.020 --> 00:08:02.960
You also want to minimize
your memory footprint.

00:08:02.960 --> 00:08:04.980
By doing that,
you can run more instances,

00:08:05.040 --> 00:08:08.390
which gives you more opportunity
for scaling by spreading your

00:08:08.390 --> 00:08:10.240
traffic out across instances.

00:08:10.340 --> 00:08:12.620
Share data across your sessions.

00:08:12.680 --> 00:08:15.820
What that means is when
the application starts up,

00:08:15.900 --> 00:08:18.350
you pre-cache information.

00:08:18.430 --> 00:08:21.960
You want to clean up thoroughly,
and you want to clear transient instance

00:08:21.960 --> 00:08:23.240
variables when no longer needed.

00:08:23.240 --> 00:08:27.000
What that means is that if
you're doing Java programming,

00:08:27.000 --> 00:08:29.890
just because you have
a garbage collector,

00:08:29.890 --> 00:08:32.180
don't be a lazy programmer.

00:08:32.330 --> 00:08:38.160
When you're done with something,
set the pointers to null.

00:08:38.160 --> 00:08:38.160
Not pointers, set the variables to null.

00:08:39.300 --> 00:08:42.390
That will, not only will that
make your code cleaner,

00:08:42.400 --> 00:08:46.270
it also means that you're going to
avoid issues like using a variable that

00:08:46.270 --> 00:08:48.480
you really didn't mean to use anymore.

00:08:48.480 --> 00:08:52.020
It also means that when the
garbage collector does run,

00:08:52.020 --> 00:08:54.930
it has less of an object
graph to traverse.

00:08:55.110 --> 00:08:56.700
Use stateless components.

00:08:56.700 --> 00:09:00.970
Stateless component is a component
that literally has no state within it.

00:09:01.050 --> 00:09:04.170
It's cached by the application,
not by the session.

00:09:04.190 --> 00:09:06.590
Use shared sessions if appropriate.

00:09:06.690 --> 00:09:09.910
If you're talking about a news site,
maybe you don't need

00:09:09.920 --> 00:09:12.140
user sessions at all.

00:09:12.140 --> 00:09:14.400
And set the session timeout
value to something appropriate.

00:09:14.500 --> 00:09:16.830
You don't want these things
sitting on your server forever.

00:09:18.490 --> 00:09:22.920
You want to plan your data access,
your queries caching, cache updating.

00:09:23.180 --> 00:09:25.320
And understand your data latency.

00:09:25.460 --> 00:09:31.000
You really want to try for zero requests,
or zero data requests per response.

00:09:31.070 --> 00:09:32.940
Now, obviously, you can't do that.

00:09:32.940 --> 00:09:34.980
You're never going to achieve
zero or else your app's never

00:09:34.980 --> 00:09:36.440
going to display anything.

00:09:36.560 --> 00:09:39.590
But you really want to minimize those,
because if you can minimize

00:09:39.590 --> 00:09:41.930
the trips to the database,
you can really increase

00:09:41.930 --> 00:09:43.460
app response time.

00:09:43.540 --> 00:09:45.360
It also leads to better scaling.

00:09:45.360 --> 00:09:48.830
If you have fewer applications talking
to the database simultaneously as

00:09:48.830 --> 00:09:52.260
you hit that huge flood of traffic,
if you're doing your caching and you're

00:09:52.260 --> 00:09:56.400
sharing that data across sessions,
you can increase your scalability.

00:09:56.440 --> 00:10:00.800
Because as your traffic peaks,
you don't have sudden bursts of

00:10:00.800 --> 00:10:03.040
activity against your database.

00:10:03.070 --> 00:10:05.840
Use in-memory searches where possible.

00:10:05.880 --> 00:10:08.360
Obviously,
any time you can avoid traffic across

00:10:08.370 --> 00:10:11.180
the network in your server environment,
you're going to get a

00:10:11.180 --> 00:10:13.570
huge boost in efficiency.

00:10:13.600 --> 00:10:16.430
You want to manage your faulting
and manage your caching.

00:10:16.450 --> 00:10:19.920
Again, this is just about making
sure your data is up to date.

00:10:19.920 --> 00:10:21.970
At the same time,
making sure you're not expending

00:10:22.000 --> 00:10:25.940
huge amounts of processor time,
network bandwidth, et cetera,

00:10:25.940 --> 00:10:28.080
updating these caches.

00:10:28.120 --> 00:10:31.110
And use the shared editing
context for reference data.

00:10:31.120 --> 00:10:35.240
There's a shared editing context
functionality that was new in 4.5.

00:10:35.280 --> 00:10:39.760
This allows you to relatively
easily share data across sessions.

00:10:39.760 --> 00:10:44.210
If you've got to go to the database
and read the upcoming calendar events,

00:10:44.480 --> 00:10:46.490
every session doesn't
need a copy of that.

00:10:48.600 --> 00:10:52.340
You can use time outside your
request-response loop for housekeeping,

00:10:52.460 --> 00:10:56.330
or you can manage the time with which
you're doing the housekeeping in the

00:10:56.330 --> 00:10:58.610
request-response loop very carefully.

00:10:58.830 --> 00:11:03.190
For example, you can load reference data
at the application startup.

00:11:03.260 --> 00:11:07.980
Instead of forcing the first
person to hit the site to refresh

00:11:07.990 --> 00:11:13.030
your caches or fill your caches,
use the application "will

00:11:13.130 --> 00:11:17.230
finish launching" notification
to pre-fill those caches.

00:11:17.410 --> 00:11:20.730
You can use timers or perform
after delay to do database access

00:11:20.800 --> 00:11:23.820
or to do cache invalidation,
cache updating, etc.

00:11:23.850 --> 00:11:26.590
You've got to be a little careful with
that because of the way WebObjects

00:11:26.590 --> 00:11:27.990
works and the way threading works.

00:11:28.050 --> 00:11:30.130
You can end up with a thread issue.

00:11:30.220 --> 00:11:33.660
But there's discussions of that on
the Omni group mailing list which

00:11:33.660 --> 00:11:35.700
everyone should be subscribed to.

00:11:35.710 --> 00:11:37.840
I'm going to try to keep this high level.

00:11:37.890 --> 00:11:39.950
Serialize and lock request handling.

00:11:40.130 --> 00:11:40.970
That's very important.

00:11:40.980 --> 00:11:43.920
And this is when you get into really
advanced WebObjects programming

00:11:43.920 --> 00:11:47.810
and you start doing things like
multi-threaded cache updates,

00:11:47.990 --> 00:11:51.620
cache invalidation,
or the timers is what you want

00:11:51.780 --> 00:11:56.120
to do is you want to make sure,
and this is kind of a warning,

00:11:56.120 --> 00:11:57.220
we have scars.

00:11:57.240 --> 00:12:01.480
You want to make sure that you're locking
your request handling when you're in

00:12:01.480 --> 00:12:06.530
situations where your caches are being
updated because you could find yourself

00:12:06.580 --> 00:12:12.530
in multi-threaded situations that can
lead to some serious data destruction.

00:12:12.530 --> 00:12:15.740
And these are, again,
things that have been discussed

00:12:15.740 --> 00:12:20.640
on the OmniWeb list and we'll
not really go into them.

00:12:20.640 --> 00:12:24.670
You want to partition your functionality
into multiple applications.

00:12:24.690 --> 00:12:29.100
One of the temptations with
WebObjects is and with the ease with

00:12:29.100 --> 00:12:34.510
which it is to add functionality to
applications is to make a monolithic

00:12:34.570 --> 00:12:37.630
application that just does everything.

00:12:37.630 --> 00:12:40.860
And part of it there is
that it's very convenient.

00:12:40.860 --> 00:12:43.600
If you have a single session
for the user and that session

00:12:44.020 --> 00:12:46.420
contains everything in the world,
then it's very efficient.

00:12:46.470 --> 00:12:48.880
Well, yes it is,
but at the same time it also

00:12:48.880 --> 00:12:51.160
greatly limits your scalability.

00:12:51.160 --> 00:12:53.440
If you talk about spreading the
user session across multiple

00:12:53.440 --> 00:12:57.140
applications such as the user,
say, comes into your site and browses,

00:12:57.140 --> 00:13:00.600
that's a different application than, say,
drilling down into a

00:13:00.600 --> 00:13:02.120
product or doing searches.

00:13:02.120 --> 00:13:06.970
What this means is that you have much
greater opportunities for scalability.

00:13:07.090 --> 00:13:10.090
If you need to, if the search tool proves
to be a bottleneck,

00:13:10.170 --> 00:13:13.410
you can just run more of them
versus having to run more of

00:13:13.410 --> 00:13:16.010
your monolithic application.

00:13:17.000 --> 00:13:20.180
Move more expensive operations
from live site to data entry?

00:13:20.380 --> 00:13:22.980
That's just about building
administration tools.

00:13:22.980 --> 00:13:25.510
Think about when you're
building larger sites,

00:13:25.510 --> 00:13:28.410
building a front-end
application that the user sees.

00:13:28.410 --> 00:13:31.050
It's all optimized and
oriented to performance.

00:13:31.050 --> 00:13:34.930
Building a back-end application,
which is what the administrators see,

00:13:35.240 --> 00:13:38.910
which is optimized to flexibility and
power in manipulating the business.

00:13:38.930 --> 00:13:41.160
By doing that,
you can move your expensive

00:13:41.160 --> 00:13:43.270
operations into the back-end.

00:13:43.300 --> 00:13:48.780
If you're doing something like storing
images off on the server and you keep

00:13:48.780 --> 00:13:53.100
track of information like how big
the images are and things like that,

00:13:53.100 --> 00:13:55.670
or you've got to do other sorts
of processing that's necessary to

00:13:55.690 --> 00:13:59.060
prepare the user interface for the
person visiting your site to see,

00:13:59.060 --> 00:14:01.800
move those calculations
to the data entry time.

00:14:01.800 --> 00:14:04.420
When I upload the image,
let's calculate what the height and

00:14:04.420 --> 00:14:07.470
width of the image is and store that
information in the database rather

00:14:07.470 --> 00:14:09.090
than grabbing that at run time.

00:14:09.090 --> 00:14:11.090
There's a variety of things like that.

00:14:11.100 --> 00:14:12.230
If you can compose it in a
way that's more efficient,

00:14:12.230 --> 00:14:13.100
it's going to be a lot easier to do.

00:14:13.100 --> 00:14:16.320
You can compose images by compositing
and store them when you enter

00:14:16.380 --> 00:14:18.690
the data rather than when the
user comes to view the data,

00:14:18.700 --> 00:14:19.600
you can save time.

00:14:19.600 --> 00:14:24.670
If you construct cached HTML pages
when you're doing the data entry and

00:14:24.790 --> 00:14:29.300
thus have information pre-digested
ready for the site to work.

00:14:29.300 --> 00:14:31.810
You've got a small number of
people using the administrative

00:14:31.890 --> 00:14:33.600
application relatively infrequently.

00:14:33.600 --> 00:14:38.000
You can move functionality from
presentation time to data entry time

00:14:38.000 --> 00:14:42.900
that will significantly increase the
speed of your presentation time tool,

00:14:42.900 --> 00:14:44.890
which is actually the thing
that your speed is all about.

00:14:44.900 --> 00:14:47.400
Nobody really cares if the
admin tool is fast or not.

00:14:47.400 --> 00:14:49.090
I mean, yes,
they'll complain a little bit if it

00:14:49.090 --> 00:14:52.200
takes too long to save something,
but the real throughput that

00:14:52.200 --> 00:14:56.380
you're looking to optimize is
the thing that the customers see.

00:14:56.500 --> 00:15:01.860
One of the real benefits of the
WebObjects environment is the

00:15:01.860 --> 00:15:05.560
ease with which you can create
modules and you can assemble these

00:15:05.560 --> 00:15:07.400
modules and put them all together.

00:15:07.400 --> 00:15:09.400
That's really the last three points here.

00:15:09.400 --> 00:15:12.700
One of the things you can do
is create a different view.

00:15:12.700 --> 00:15:15.420
You can create a different view
of your data for the front end

00:15:15.430 --> 00:15:17.200
application versus the back end.

00:15:17.200 --> 00:15:19.780
If the front end application
is primarily read only,

00:15:19.780 --> 00:15:22.570
which generally they are, I mean,
if you're in a store,

00:15:22.670 --> 00:15:25.790
it's not like the customer
can edit the price.

00:15:25.980 --> 00:15:28.730
So if that's the case,
then the front end application doesn't

00:15:28.730 --> 00:15:32.260
need to have the business logic
or the expense of supporting that.

00:15:32.370 --> 00:15:35.280
So you can create an EO model
or say two EO models.

00:15:35.370 --> 00:15:39.870
One that has a very simple view of the
data that's optimized for speed and a

00:15:39.870 --> 00:15:44.860
second EO model that's used by the entry
tool application or the administration

00:15:44.860 --> 00:15:49.470
application suite that is optimized
to the functionality and the power

00:15:49.470 --> 00:15:51.900
required by the business managers.

00:15:51.960 --> 00:15:54.800
And all of this can be
leveraged through frameworks.

00:15:55.060 --> 00:15:59.890
Generally, what we're finding is that our
applications end up being extremely thin.

00:16:00.110 --> 00:16:03.000
There'll be almost no code in
the applications themselves.

00:16:03.080 --> 00:16:05.210
All they do is load a
bunch of frameworks.

00:16:05.310 --> 00:16:06.990
Everything is in the frameworks.

00:16:06.990 --> 00:16:09.980
And by doing that,
you can reuse those frameworks

00:16:09.980 --> 00:16:13.770
across as many applications as
you need to realize the site.

00:16:15.730 --> 00:16:19.520
We have minimize use of
frames and user interface.

00:16:19.600 --> 00:16:22.530
It's just an optimization,
I mean clearly frames are necessary,

00:16:22.630 --> 00:16:25.520
frames are necessary,
but frames can cause a lot of issues,

00:16:25.520 --> 00:16:28.350
they can cause a lot of extra
traffic against your site.

00:16:28.350 --> 00:16:32.150
As well when you're doing dynamic
applications where you have to update

00:16:32.150 --> 00:16:35.670
content across multiple frames,
you'll find situations where you end

00:16:35.670 --> 00:16:37.930
up having to reload the whole page,
which means you get one

00:16:37.930 --> 00:16:41.900
hit to load the frame set,
one hit to load each frame

00:16:42.070 --> 00:16:45.240
and that can be very,
very expensive.

00:16:45.240 --> 00:16:48.600
It also means that when those
hits for the frames come in,

00:16:48.600 --> 00:16:51.630
the browser, it can lead to a lot of
bugs because the browser,

00:16:51.630 --> 00:16:54.810
you don't know what order the browser
is going to load the frames in.

00:16:54.810 --> 00:16:57.130
And it's going to load both
of them simultaneously,

00:16:57.130 --> 00:17:00.880
whichever one gets there first is
going to be the first one to load.

00:17:00.880 --> 00:17:04.840
And if the user hits the stop button,
then okay, one frame loaded,

00:17:04.840 --> 00:17:06.810
the other one didn't, how do you know?

00:17:06.880 --> 00:17:07.700
You don't.

00:17:07.700 --> 00:17:09.880
So that can just be a
lot of confusion there.

00:17:09.880 --> 00:17:12.750
Use direct options wherever you can.

00:17:12.750 --> 00:17:14.880
Direct actions are wonderful.

00:17:14.880 --> 00:17:18.900
Not only do they allow for bookmarkable
sections within your application,

00:17:18.910 --> 00:17:22.440
they can also be very,
very fast because they don't go through

00:17:22.520 --> 00:17:24.460
the full request response handling.

00:17:24.510 --> 00:17:27.520
They don't have to do form
processing or things like that.

00:17:27.570 --> 00:17:30.350
You can certainly use form
values with request stack,

00:17:30.350 --> 00:17:35.480
with the direct action request handler,
but you don't have to.

00:17:35.480 --> 00:17:37.400
And beware of mixing
Java and Objective-C.

00:17:37.400 --> 00:17:42.880
Yes, certainly the environment does
support fully mixing these things

00:17:42.940 --> 00:17:45.220
in just about any way you want to.

00:17:45.220 --> 00:17:48.820
There are a couple of little subtle
limitations you can run into.

00:17:48.920 --> 00:17:51.130
However,
there are some serious performance

00:17:51.130 --> 00:17:53.610
issues with going across
that bridge between Java and

00:17:53.610 --> 00:17:56.960
Objective-C and it should be avoided.

00:17:56.990 --> 00:17:59.580
It's also very difficult to debug.

00:18:01.380 --> 00:18:04.340
Okay, so I'm going to turn it
back over to Alex here.

00:18:04.890 --> 00:18:05.340
Okay.

00:18:05.340 --> 00:18:08.430
So those are some good
pointers just sort of up front.

00:18:08.460 --> 00:18:10.420
Think about when you're
structuring your application,

00:18:10.420 --> 00:18:12.980
you're taking apart your problem
and figuring out how am I going

00:18:12.980 --> 00:18:15.320
to go about building a solution.

00:18:15.320 --> 00:18:17.520
We organize things well,
we do some good planning

00:18:17.520 --> 00:18:21.300
about database access,
and do some good planning about caching

00:18:21.300 --> 00:18:24.300
of our data in order to minimize
our round trips to the database,

00:18:24.300 --> 00:18:27.260
and we've thought through our
framework design and everything else.

00:18:27.260 --> 00:18:30.620
And the app's done and
it's up and running,

00:18:30.630 --> 00:18:34.500
but okay, you know, it's a bit of a pig.

00:18:34.500 --> 00:18:37.960
You know, let's assume maybe the opposite
situation is you've inherited a

00:18:37.980 --> 00:18:41.080
pig that somebody else has built,
and now it's time to figure

00:18:41.080 --> 00:18:42.680
out a way to make that pig fly.

00:18:42.680 --> 00:18:45.320
So this is, you know,
all the planning up front

00:18:45.440 --> 00:18:47.860
is all well and good,
but as we all know that, you know,

00:18:47.860 --> 00:18:51.190
no good plan survives contact with,
you know, the enemy or reality or your

00:18:51.190 --> 00:18:52.600
customers and what have you.

00:18:52.600 --> 00:18:54.250
You know,
there's just a limit to how much

00:18:54.250 --> 00:18:56.290
you can get right planning up front.

00:18:56.600 --> 00:18:59.060
You get halfway through this thing
and the design changes remarkably or

00:18:59.060 --> 00:19:00.600
your client calls you up and says,
"Look,

00:19:00.600 --> 00:19:02.360
our business model has changed." And,
you know,

00:19:02.360 --> 00:19:04.670
so it doesn't always end up working
out by the time you get the app

00:19:04.670 --> 00:19:07.860
written that it's exactly the way
you thought when you started out.

00:19:07.930 --> 00:19:08.970
So, okay, so it's a pig.

00:19:08.970 --> 00:19:12.320
It's a little too slow, you know,
it sucks more memory, you know,

00:19:12.320 --> 00:19:14.760
you're like, "Damn,
that's a big application instance size,

00:19:14.760 --> 00:19:15.220
isn't it?

00:19:15.220 --> 00:19:19.880
Fifty megabytes and nobody's even
started a session yet." You know,

00:19:19.880 --> 00:19:23.320
you go off and do this
request and it's like,

00:19:23.320 --> 00:19:26.050
"It's on my machine and that's
two seconds before it even started

00:19:26.050 --> 00:19:30.060
loading the browser." You know,
you're testing this out with a hundred

00:19:30.060 --> 00:19:33.800
users and the CPUs on your multiprocessor
son are pegged and it's like,

00:19:33.800 --> 00:19:37.300
"Wow." All right, now what do you do?

00:19:37.300 --> 00:19:38.040
Okay.

00:19:38.040 --> 00:19:40.360
First of all, don't be silly.

00:19:40.360 --> 00:19:44.380
All right, you know,
this seems like trivial advice

00:19:44.380 --> 00:19:46.190
here but this is actually good.

00:19:46.300 --> 00:19:50.680
We've had some situations where
we've had clients who got stuck with,

00:19:50.680 --> 00:19:53.680
you know,
they had woke caching enabled turned off,

00:19:53.680 --> 00:19:56.500
you know, for debugging purposes.

00:19:56.500 --> 00:19:56.500
And, you know, they're like, "Oh,
I'm not sure what I'm doing.

00:19:56.500 --> 00:19:57.950
I'm just going to do this." You know,
they managed to get into

00:19:57.950 --> 00:20:00.940
production with the big sites
on and caching was turned off.

00:20:00.940 --> 00:20:03.470
So every time somebody loaded
any WebObjects component,

00:20:03.470 --> 00:20:04.920
it reloaded it from disk.

00:20:04.920 --> 00:20:06.890
In fact, there's a particular
client I'm thinking of,

00:20:06.890 --> 00:20:10.310
you know, I had actually coded into
the code for the application

00:20:10.320 --> 00:20:12.420
to turn this off explicitly.

00:20:12.420 --> 00:20:13.420
In eight places.

00:20:13.420 --> 00:20:14.420
In eight places.

00:20:14.420 --> 00:20:18.620
And so, you know, everybody kept saying,
"Ah, I found it," you know,

00:20:18.620 --> 00:20:21.380
and they take this line out and
it would still be--still suck.

00:20:21.770 --> 00:20:24.780
All right.

00:20:24.780 --> 00:20:24.780
But, you know,

00:20:24.800 --> 00:27:48.800
[Transcript missing]

00:27:48.910 --> 00:27:55.100
When you got to do some fetching,
let's optimize this a bit.

00:27:55.100 --> 00:27:56.410
It seems obvious but it's
definitely a good thing.

00:27:56.410 --> 00:27:58.420
If you've got pop ups,
you've got reference data,

00:27:58.420 --> 00:28:01.310
you've got stuff that is constant
across everybody's stuff,

00:28:01.310 --> 00:28:06.580
fetch it at the application level in a
shared editing context and keep it there.

00:28:06.600 --> 00:28:10.150
It's really easy to start coding up
using the default editing context for

00:28:10.240 --> 00:28:12.540
a session and start doing stuff there.

00:28:12.540 --> 00:28:17.030
You can end up with copies of data in
every session and every editing context

00:28:17.030 --> 00:28:19.120
and you just don't need to do that.

00:28:19.330 --> 00:28:22.430
Use the session's editing context only,
and I mean only,

00:28:22.430 --> 00:28:25.430
for data that the session's
user will actually edit.

00:28:25.430 --> 00:28:28.210
If he's not actually
changing the values in it,

00:28:28.210 --> 00:28:30.920
you can share the data
with everybody else.

00:28:31.100 --> 00:28:33.680
You can have a session
specific list of things I'm

00:28:33.680 --> 00:28:38.310
interested in or what have you,
but it doesn't mean you need a session

00:28:38.310 --> 00:28:40.850
specific copy of the actual data.

00:28:41.100 --> 00:28:44.000
That's just a general good rule of thumb.

00:28:44.000 --> 00:28:44.240
Is the user just going to use
the data that's in the session?

00:28:44.240 --> 00:28:46.750
Is the user just going to edit
this piece of data in his session?

00:28:46.860 --> 00:28:52.030
No, then we don't need it in
the session editing context.

00:28:52.960 --> 00:28:56.900
Okay,
you get to the stage where you want to

00:28:57.080 --> 00:29:02.880
avoid doing fetches in order to draw
the pages that the user is looking at.

00:29:02.900 --> 00:29:06.970
A good idea is to cache and share
data that's used to draw the pages

00:29:06.970 --> 00:29:12.810
that the users are looking at and try
to keep that cached data up to date.

00:29:13.110 --> 00:29:16.800
You end up with a situation,
like we've done some financial sites

00:29:16.800 --> 00:29:20.900
where people are putting in bids and
offers and doing trades and such,

00:29:20.960 --> 00:29:24.120
so that session A, app instance A,
is going to put some data

00:29:24.120 --> 00:29:26.900
into the database that
everybody else needs to see.

00:29:26.900 --> 00:29:30.150
You need to find a good way to make
sure that everybody's information

00:29:30.150 --> 00:29:31.870
is up to date in a timely fashion.

00:29:31.910 --> 00:29:36.990
There's some really neat stuff for,
you can do inter-application

00:29:36.990 --> 00:29:39.900
messaging so that the individual
applications don't have to fetch

00:29:39.900 --> 00:29:41.900
from the database every time.

00:29:42.170 --> 00:29:46.640
There was some good work that
Dave Newman posted originally

00:29:46.640 --> 00:29:48.900
on doing snapshot updating.

00:29:48.900 --> 00:29:51.900
We've done a bunch of
stuff to modify that stuff,

00:29:51.900 --> 00:29:55.900
but that just avoids you having to go
to the database to update your data.

00:29:55.900 --> 00:29:59.900
You can also use the time
between request response loops.

00:29:59.900 --> 00:30:03.660
We mentioned up in the design session,
you can just, when nobody is actually

00:30:03.680 --> 00:30:05.740
requesting something,
go in and do a fetch and

00:30:05.820 --> 00:30:06.900
update the cached data.

00:30:06.900 --> 00:30:10.550
That's a little less efficient
than notifying the various app

00:30:10.550 --> 00:30:15.940
instances that the data has changed,
but net-net, when it comes time to handle

00:30:15.940 --> 00:30:17.900
a request for a response,
you know you've got up-to-date data.

00:30:17.900 --> 00:30:20.900
You know you've got up-to-date
data in your application.

00:30:20.900 --> 00:30:22.900
You don't have to go to the database.

00:30:22.900 --> 00:30:26.310
Of course, if you've got to get some
sort of non-object based

00:30:26.310 --> 00:30:29.900
data out of the database,
go ahead and use the raw row stuff.

00:30:29.900 --> 00:30:36.900
It's quite fast and doesn't
involve instantiating objects.

00:30:36.900 --> 00:30:40.850
Don't try and get around the whole
object mechanism using this stuff,

00:30:40.980 --> 00:30:46.900
but if you want to know if there have
been any changes to the database with,

00:30:46.900 --> 00:30:49.890
in this particular time
frame where you want to,

00:30:49.900 --> 00:30:51.200
you know,
you can use raw rows for certain

00:30:51.200 --> 00:30:52.820
specialized stuff and it's quite fast.

00:30:52.900 --> 00:30:54.610
All right.

00:30:54.900 --> 00:30:56.900
The thing that really
bites you in the butt is,

00:30:56.900 --> 00:30:59.900
you know, you have this picture of what
the application is doing.

00:30:59.900 --> 00:31:02.490
And, you know,
you think it's being very efficient

00:31:02.740 --> 00:31:05.900
because you optimized the design
before you wrote the whole thing.

00:31:05.900 --> 00:31:09.900
And it's still slow and the
database is still cranking away.

00:31:09.900 --> 00:31:12.260
So, you know,
obviously you're doing fetching where

00:31:12.260 --> 00:31:13.850
you didn't expect to do fetching.

00:31:13.900 --> 00:31:15.890
So EO-adapter debug
enabled is your friend.

00:31:15.900 --> 00:31:19.900
You know, turn this on and you'll see all
the SQL that's being generated.

00:31:19.900 --> 00:31:21.590
You go to this page and
you think there's no SQL,

00:31:21.640 --> 00:31:23.900
no queries involved in this page.

00:31:23.900 --> 00:31:25.670
And you go hit this page,
it's like query, query, query, query,

00:31:25.700 --> 00:31:27.900
query, query, query, query, query, query,
query, process, process, process.

00:31:27.900 --> 00:31:29.900
You're like,
where's this all coming from?

00:31:29.900 --> 00:31:32.270
And, you know,
it's very easy to discover that,

00:31:32.280 --> 00:31:34.900
you know,
in your WAD file you're referencing

00:31:34.900 --> 00:31:37.900
object.relationship.relationship.value.

00:31:37.910 --> 00:31:39.660
And, you know,
you're smart caching where you

00:31:39.660 --> 00:31:40.900
preloaded the data up front.

00:31:40.900 --> 00:31:44.890
You didn't use any prefetching
or anything else like that.

00:31:44.900 --> 00:31:47.900
And the data on the other end of these
relationships hasn't been fetched yet.

00:31:47.900 --> 00:31:51.150
And so you go to visit the page and
you've got some binding here and that

00:31:51.150 --> 00:31:53.900
forces several fetches in order to
get the data to answer the binding.

00:31:53.900 --> 00:31:56.330
You know, especially bad is when
you're just saying,

00:31:56.330 --> 00:31:58.240
you know,
you're like testing to see whether or

00:31:58.240 --> 00:31:59.900
not we should show this component or not.

00:31:59.900 --> 00:32:03.440
You know, does this object have,
you know, one of these things on the

00:32:03.440 --> 00:32:04.900
end of this relationship?

00:32:04.900 --> 00:32:06.830
And so you fault in the
relationship only to find out,

00:32:06.830 --> 00:32:09.900
no, it doesn't have anything and you're
not going to display anything anyway.

00:32:09.900 --> 00:32:12.390
So be very careful about, you know,
what you bind to and how you

00:32:12.390 --> 00:32:13.900
answer some of these questions.

00:32:14.090 --> 00:32:18.870
This actually raises an interesting
point about WebObjects in general.

00:32:18.980 --> 00:32:22.900
I know virtually nothing about databases.

00:32:22.900 --> 00:32:25.900
I'm lost in when I hit
a relational database.

00:32:25.900 --> 00:32:28.900
You give me a raw SQL window,
I don't know what to do.

00:32:29.230 --> 00:32:34.900
But with EOModeler, even I can set up a
really complex database,

00:32:34.900 --> 00:32:37.900
generate it, use it,
and do very useful things.

00:32:37.900 --> 00:32:39.890
Of course, I can't make it go fast.

00:32:39.900 --> 00:32:42.900
I mean, the power of these tools
can be intoxicating.

00:32:43.110 --> 00:32:45.730
It can lead you to some trouble.

00:32:45.900 --> 00:32:50.890
And these things here, you know,
using the adapter debug enable,

00:32:50.900 --> 00:32:53.900
looking at the database plans,
things like that is critical.

00:32:53.900 --> 00:32:57.700
Because it's very likely you're going
to have someone on the project like

00:32:57.710 --> 00:33:02.070
me who can make the thing work at the
object level and is going to realize an

00:33:02.070 --> 00:33:05.900
application that's just going to be a
pig in production at the database level.

00:33:05.900 --> 00:33:08.900
So, yeah,
there you are cleaning up after the pig.

00:33:08.900 --> 00:33:11.900
But one of the good things you can
do to avoid excess faulting is,

00:33:11.900 --> 00:33:15.110
when we were talking before about
having separate data models for

00:33:15.110 --> 00:33:19.190
data entry and data display,
you can have instances of, you know,

00:33:19.190 --> 00:33:21.900
like the product that you're going
to display on the screen or whatever,

00:33:21.900 --> 00:33:24.650
the article that you're going to
display on this article page that you've

00:33:24.700 --> 00:33:28.110
tuned for the runtime application,
and you do things like

00:33:28.110 --> 00:33:29.900
flatten relationships in.

00:33:29.970 --> 00:33:32.970
And so, you know,
testing to see if you have a picture,

00:33:32.970 --> 00:33:35.100
and if the article has a picture,
then we need to put it in the

00:33:35.100 --> 00:33:36.870
picture component or what have you.

00:33:36.900 --> 00:33:39.620
If it's been flattened in, you know,
we can check the value

00:33:39.620 --> 00:33:40.900
without causing faulting.

00:33:40.900 --> 00:33:43.900
If you have this thing
as a separate relation,

00:33:43.900 --> 00:33:48.340
you know, article.image,
in order to say if article.image

00:33:48.340 --> 00:33:51.900
is not equal to null,
you have to fire a fault.

00:33:51.900 --> 00:33:55.780
So you can optimize your
fetching behavior by tuning

00:33:55.780 --> 00:33:58.860
the EO model and flattening
relationships in for presentation.

00:33:58.900 --> 00:34:01.960
One of the most common mistakes
that we've had to clean up,

00:34:01.960 --> 00:34:04.900
I'm sure none of you would do this,
you're all very good,

00:34:04.900 --> 00:34:06.900
is you're building the
components up one at a time,

00:34:06.900 --> 00:34:09.590
and you think, oh, this component,
I'm going to need this pop-up

00:34:09.610 --> 00:34:11.900
list of all the states in it,
and the country.

00:34:11.900 --> 00:34:14.900
And so, like in your init method,
you write a little thing in there

00:34:14.900 --> 00:34:17.710
that does a fetch of all the states,
all objects,

00:34:17.810 --> 00:34:19.900
so that you can populate the pop-up.

00:34:19.900 --> 00:34:21.160
Because, you know,
you're just writing this one

00:34:21.160 --> 00:34:22.900
component at this moment,
you're not thinking about it.

00:34:22.900 --> 00:34:26.000
And, you know,
six other developers on the project for

00:34:26.000 --> 00:34:29.880
six other pages that have a list of all
the states also write the same thing.

00:34:29.910 --> 00:34:31.840
And so every time these
components are initialized,

00:34:31.930 --> 00:34:33.890
they go off and do the database
and fetch this stuff in.

00:34:33.930 --> 00:34:37.010
And components come out of the cache,
and then they are recreated,

00:34:37.020 --> 00:34:38.340
and they fetch in,
and components are cached

00:34:38.370 --> 00:34:38.900
in different sessions.

00:34:38.900 --> 00:34:41.890
And each one in its init is
fetching in this list of 50 states.

00:34:41.960 --> 00:34:43.900
You only need one copy.

00:34:43.900 --> 00:34:45.900
It's not like the states
change all that often.

00:34:45.900 --> 00:34:49.900
You know, you go through and you
clean all this stuff up,

00:34:49.900 --> 00:34:52.390
and you move this stuff
off to application in the

00:34:52.400 --> 00:34:53.900
shared editing context.

00:34:53.900 --> 00:34:56.900
Everybody's got a pop-up or
browsers or things like that,

00:34:56.900 --> 00:35:01.900
you know, valid regions that we ship to,
so on and so forth,

00:35:01.900 --> 00:35:03.900
can get this common reference
data out of one place,

00:35:03.900 --> 00:35:05.890
and not try and do this
stuff on each thing.

00:35:05.900 --> 00:35:07.900
If need be, you know,
fetch all the units.

00:35:07.910 --> 00:35:09.900
You can fetch, you know,
all the objects you need,

00:35:09.910 --> 00:35:13.690
and then you can use filtering, you know,
to produce the stuff that you

00:35:13.690 --> 00:35:16.880
need for each individual page.

00:35:16.910 --> 00:35:19.900
The other common mistake that
involves excess fetching is,

00:35:19.900 --> 00:35:23.230
okay, you've got this, you know,
you've got this thing in

00:35:23.230 --> 00:35:26.280
the shared editing context,
and, you know,

00:35:26.470 --> 00:35:31.600
you accidentally cause stuff to be
fetched into the sessions editing

00:35:31.600 --> 00:35:35.190
context by sort of not managing,
you know, which objects are in

00:35:35.190 --> 00:35:36.880
which editing context.

00:35:36.900 --> 00:35:39.900
You know, if you must, you know, if you,
you know,

00:35:39.900 --> 00:35:42.900
you've got to the point where the
user's going to edit some object,

00:35:42.900 --> 00:35:46.530
and you use local instance of object,
you know, to get local copies of the

00:35:46.530 --> 00:35:48.900
object without doing faulting.

00:35:48.900 --> 00:35:51.890
I mean, basically without going to
the database to get this.

00:35:51.900 --> 00:35:54.900
You know, basically it's creating a new
instance of the snapshot data

00:35:54.900 --> 00:35:58.850
in a particular editing context,
and doesn't require round

00:35:58.920 --> 00:35:59.890
trip to the database.

00:35:59.900 --> 00:36:02.900
So you carefully manage when you
move things across the boundary

00:36:02.900 --> 00:36:05.890
between the shared editing context
and the sessions editing context.

00:36:05.900 --> 00:36:10.770
And, you know,
follow this stuff all around.

00:36:10.920 --> 00:36:11.870
Have a policy.

00:36:12.070 --> 00:36:13.730
You know, these objects are all here.

00:36:13.910 --> 00:36:15.900
We'll only have this object
when we do this or whatever.

00:36:15.900 --> 00:36:19.890
And, you know, stick to it,
and that'll soup things up a bunch.

00:36:19.900 --> 00:36:21.900
Okay, optimize your EO models.

00:36:21.900 --> 00:36:27.050
Again, there's a tendency to go
batshit on your EO model or

00:36:27.050 --> 00:36:31.900
come up with like the perfect,
you know, normalized abstracted EO model

00:36:31.900 --> 00:36:34.770
with everything as an object
and so on and so forth.

00:36:34.900 --> 00:36:37.900
I mean, you know,
we had one client who had, you know,

00:36:37.900 --> 00:36:41.500
who had a table for gender objects
with a row for male and a row for

00:36:41.500 --> 00:36:44.900
female so that they could have all the
people who'd signed up for their site,

00:36:44.900 --> 00:36:48.880
you know, have a reference to either the
male object or the female object.

00:36:48.900 --> 00:36:51.870
You know, it's like, oh, please,
you know, use flags.

00:36:51.900 --> 00:36:53.900
You know,
simplify some of this stuff down.

00:36:53.900 --> 00:36:57.830
It may not make everything an object,
but, you know, they were faulting these

00:36:57.830 --> 00:36:58.900
things in all over the place.

00:36:58.900 --> 00:37:01.690
And it was like, no.

00:37:02.090 --> 00:37:03.900
Okay, the other cool thing
is EOF and inheritance.

00:37:03.940 --> 00:37:05.810
It's cool.

00:37:05.900 --> 00:37:07.900
You can do just amazing things with this.

00:37:07.910 --> 00:37:12.890
And I know I've been given the, you know,
EOF inheritance abuse award a few times.

00:37:13.400 --> 00:37:18.900
You know, think seriously about,
you know,

00:37:18.900 --> 00:37:21.900
how much of the inheritance stuff you
absolutely need to have in your model.

00:37:21.900 --> 00:37:25.880
You know, if worst comes to worst,
you can do a complex hierarchy

00:37:25.990 --> 00:37:28.880
for your editorial tool and
simplify it for your application.

00:37:28.900 --> 00:37:32.900
But there are a lot of cases in which
having a complex inheritance hierarchy,

00:37:32.900 --> 00:37:34.900
especially when you're
doing deep fetches,

00:37:34.900 --> 00:37:38.020
which is, you know,
I've got 15 types of users and

00:37:38.020 --> 00:37:40.900
I want to select all users who
haven't been here since last week.

00:37:40.900 --> 00:37:43.900
And I've got to do a fetch
against each one of the 15 tables.

00:37:43.900 --> 00:37:45.900
Even when you're doing something
like single table inheritance,

00:37:45.900 --> 00:37:47.820
it's going to do, you know,
fetch against table

00:37:47.820 --> 00:37:49.750
A where flag equals one,
fetch against table

00:37:49.750 --> 00:37:50.900
A where flag equals two.

00:37:50.900 --> 00:37:52.900
Each round trip is expensive.

00:37:52.940 --> 00:37:55.900
What you're trying to minimize is
not the data that's pulled across,

00:37:56.000 --> 00:37:57.890
but the actual number of round
trips to the data server.

00:37:57.960 --> 00:38:01.900
And so the complexity of
your inheritance hierarchy,

00:38:01.900 --> 00:38:03.900
especially when you're
using deep fetches,

00:38:03.900 --> 00:38:06.900
can cause a lot of round
trips to the data server.

00:38:06.900 --> 00:38:09.900
This again brings up another
point where a person like me

00:38:09.900 --> 00:38:11.900
can get you in a lot of trouble.

00:38:11.900 --> 00:38:14.900
I think in objects.

00:38:14.900 --> 00:38:17.900
You know, I look at a bunch of
users and I think a big,

00:38:17.900 --> 00:38:21.900
you know, an inheritance hierarchy, yeah,
that makes total sense.

00:38:21.900 --> 00:38:25.900
But EOF provides a brilliant
object-oriented interface

00:38:25.900 --> 00:38:27.900
to a relational database.

00:38:27.900 --> 00:38:30.900
And a relational database
doesn't do inheritance well.

00:38:30.900 --> 00:38:33.900
The data-oriented databases do,
but there are other issues there.

00:38:33.900 --> 00:38:38.670
So keep the object model simple,
not because the object

00:38:38.680 --> 00:38:42.280
model being simple is great,
but because it's going to make

00:38:42.290 --> 00:38:43.900
the database that much faster.

00:38:43.900 --> 00:38:45.890
And you can overload these tables too.

00:38:45.930 --> 00:38:47.320
I mean,
you can have complex objects that you

00:38:47.320 --> 00:38:51.900
use for editing and then slap over on top
of the same table a simplified object,

00:38:51.900 --> 00:38:54.030
maybe with flattened
attributes and what have you,

00:38:54.030 --> 00:38:55.900
that you use for presentation.

00:38:55.900 --> 00:38:58.780
You know, maybe we're doing on this
page some simple piece of

00:38:58.780 --> 00:39:03.900
information processing and,
you know, we can take a, you know,

00:39:03.900 --> 00:39:07.430
create a new user entity that, you know,
spans the important shared part

00:39:07.430 --> 00:39:10.900
of all the other user entities and
we'll just do a query against that.

00:39:10.900 --> 00:39:12.900
And it doesn't give us the
whole complex hierarchy,

00:39:13.020 --> 00:39:15.900
but it gives us enough information to
answer the questions that we need to do.

00:39:15.900 --> 00:39:18.890
And it's only, it doesn't have an
inheritance hierarchy at all.

00:39:18.900 --> 00:39:21.530
You know,
there's tricks you can play like

00:39:21.610 --> 00:39:23.850
that that will simplify things.

00:39:23.900 --> 00:39:28.900
You know, again, you know,
think about what you're going

00:39:28.900 --> 00:39:28.900
to use these things for.

00:39:28.900 --> 00:39:30.900
Use batch faulting where appropriate.

00:39:30.900 --> 00:39:33.820
You know, you can basically,
you're using,

00:39:33.920 --> 00:39:36.250
what this does is you sit there
and you set batch faulting in

00:39:36.250 --> 00:39:38.900
your EO model to say when you're
going to fetch this object,

00:39:38.900 --> 00:39:41.900
why don't you fetch the next
10 because we might need them.

00:39:41.900 --> 00:39:45.270
Basically what you're doing
is you're pre-populating the

00:39:45.270 --> 00:39:48.730
cache that's stored by EOF,
the snapshot dictionary of your objects.

00:39:48.900 --> 00:39:51.900
But then you need to make sure that
you're using that appropriately.

00:39:51.900 --> 00:39:55.060
If you've got two one relationships
in the same editing context and the

00:39:55.110 --> 00:39:57.890
object on the other side of the object,
you're going to need to make sure

00:39:57.900 --> 00:39:57.900
that you're using that appropriately.

00:39:57.930 --> 00:39:59.620
If you've got two one relationships
in the object on the other side

00:39:59.620 --> 00:40:00.900
of the two one relationship
is already in your cache,

00:40:00.900 --> 00:40:03.900
it'll go find that without
faulting the database.

00:40:03.900 --> 00:40:08.310
But, you know, it's not going to,
you know,

00:40:08.350 --> 00:40:10.780
if you've got a too many relationship,
it's going to have to go

00:40:10.780 --> 00:40:11.790
to the database anyway.

00:40:11.930 --> 00:40:15.270
I can't tell that it's got, you know,
all the children in there for

00:40:15.270 --> 00:40:18.820
the parent because even though,
you know, you know and I know that,

00:40:18.900 --> 00:40:20.770
you know,
all three children have already been

00:40:20.780 --> 00:40:25.120
brought into the snapshot dictionary,
you know, it doesn't really have anything

00:40:25.150 --> 00:40:28.890
that can tell to make sure that the,
you know, the list is complete.

00:40:28.960 --> 00:40:31.010
So it has to go to the database
even if the result of this is

00:40:31.150 --> 00:40:34.900
that it can satisfy the too many
relationship out of the cache.

00:40:34.900 --> 00:40:36.870
You know, use prefetching.

00:40:36.900 --> 00:40:39.280
This is, you know,
this is transmogrified from the

00:40:39.280 --> 00:40:43.900
earlier days to the current days from,
you know, hints to actual directives.

00:40:43.900 --> 00:40:45.900
And you can just say when you're
going to populate this object,

00:40:45.900 --> 00:40:47.900
you know, populate these things
on the relationship.

00:40:47.900 --> 00:40:50.660
This is useful for when you're building
up your cache to make sure that later

00:40:50.660 --> 00:40:53.900
when people start using the objects and
following the relationships to things,

00:40:53.900 --> 00:40:55.900
the objects on the other end of
the relationship are already there.

00:40:55.900 --> 00:40:58.790
And just, you know,
beware of excess complexity

00:40:58.890 --> 00:40:59.900
in your model in general.

00:40:59.900 --> 00:41:04.190
You end up with extra pointers
to various objects in there that

00:41:04.190 --> 00:41:08.890
can then cause further fetching
activities or in certain cases,

00:41:08.920 --> 00:41:11.490
excess back pointers can
prevent prefetching from working

00:41:11.560 --> 00:41:12.900
the way it's supposed to.

00:41:12.900 --> 00:41:16.840
So once you set up all this prefetching,
you got to actually watch the stuff

00:41:16.890 --> 00:41:19.980
with adapter debug enabled to make
sure that the right objects are

00:41:19.980 --> 00:41:20.900
being fetched when you expect it to.

00:41:20.900 --> 00:41:22.550
All right.

00:41:22.900 --> 00:41:24.900
So EOF does all this great stuff for you.

00:41:24.900 --> 00:41:25.880
It'll build your tables.

00:41:25.980 --> 00:41:26.880
It'll build your database.

00:41:26.910 --> 00:41:27.900
So on and so forth.

00:41:27.900 --> 00:41:28.900
You know, really nice stuff.

00:41:28.900 --> 00:41:31.900
The one thing it doesn't
do for you out of the box,

00:41:31.900 --> 00:41:33.900
it doesn't create indexes.

00:41:34.020 --> 00:41:34.690
All right.

00:41:34.920 --> 00:41:36.900
You've gone off and you've
created all these objects

00:41:36.900 --> 00:41:37.900
that have unique primary keys.

00:41:37.900 --> 00:41:40.900
You're doing all this fetching
based on unique primary keys.

00:41:40.900 --> 00:41:42.890
Create indexes on those things.

00:41:42.900 --> 00:41:44.900
Also look at your queries
and see what you're doing.

00:41:44.900 --> 00:41:47.120
People are doing these sort of
queries where they've got fields they

00:41:47.130 --> 00:41:48.900
can type in values and do a search.

00:41:48.900 --> 00:41:49.900
What are they searching on?

00:41:49.900 --> 00:41:51.860
Create indexes on those values.

00:41:51.900 --> 00:41:54.500
You can speed up your database
activity tremendously by,

00:41:54.500 --> 00:41:57.880
you know, properly indexing things.

00:41:57.900 --> 00:42:01.900
If you're not quite sure how
the database is using stuff,

00:42:01.900 --> 00:42:02.900
this is a great thing.

00:42:02.900 --> 00:42:05.900
Everybody who's not like a database
geek doesn't know about this,

00:42:05.900 --> 00:42:07.990
but this is a database
propeller head thing,

00:42:07.990 --> 00:42:08.900
you know, for sure.

00:42:08.900 --> 00:42:11.900
You know, Sybase is show plan in Oracle.

00:42:11.900 --> 00:42:12.900
It's explain plan.

00:42:12.900 --> 00:42:15.900
You turn this on and run your query,
and it says, "Well, you know,

00:42:15.900 --> 00:42:16.900
I was going to check in
this table and that table,

00:42:16.910 --> 00:42:18.900
and then I was going to
gather this information here,

00:42:18.900 --> 00:42:21.590
and then I was going to process it and
do that stuff there." And it tells you

00:42:21.680 --> 00:42:24.890
exactly how it's going to go about giving
you back the three rows of data you would

00:42:24.900 --> 00:42:26.890
actually get from your complex query.

00:42:26.980 --> 00:42:28.900
And one of the useful things
this will tell you is,

00:42:28.900 --> 00:42:31.900
you know, and then since you asked the
question in just this way,

00:42:31.900 --> 00:42:34.540
I decided not to use your
index and to do a table scan

00:42:34.580 --> 00:42:35.810
instead to get the results out.

00:42:35.900 --> 00:42:39.900
And, you know,
by sort of doing explain plan,

00:42:39.900 --> 00:42:41.880
fiddling with your
indexes and what have you,

00:42:41.990 --> 00:42:45.010
you're going to actually make sure the
database is doing what you want it to do,

00:42:45.020 --> 00:42:46.900
not what it thinks it
has to be able to do.

00:42:46.900 --> 00:42:48.880
I've got plenty of time.

00:42:48.900 --> 00:42:49.900
Yeah, we can go over.

00:42:49.900 --> 00:42:50.900
It was a two-hour session, right?

00:42:50.900 --> 00:42:51.900
Okay, no problem.

00:42:51.980 --> 00:42:55.900
No, we're getting close to the end.

00:42:55.900 --> 00:42:59.950
Other good tuning thing is, you know,
the database is running exactly

00:42:59.950 --> 00:43:00.900
the way it's supposed to.

00:43:00.900 --> 00:43:03.090
It puts most of the information
that you're going to access on a

00:43:03.090 --> 00:43:06.010
regular basis into memory cache,
and you can check that with the

00:43:06.010 --> 00:43:08.460
database statistics to find out,
is it doing that or is it going to

00:43:08.460 --> 00:43:11.850
the disk every time for your data,
and you can tune that.

00:43:11.940 --> 00:43:14.280
And also just more silliness,
and you may have to get somebody to use

00:43:14.280 --> 00:43:17.900
a database with to come in and do some,
you know, tuning in the operating system.

00:43:17.900 --> 00:43:19.990
If you've got a multiprocessor machine,
oftentimes you have to actually tell

00:43:20.020 --> 00:43:20.900
the database to use all the processors.

00:43:20.950 --> 00:43:23.500
Similarly, databases often have a
bunch of parameters about

00:43:23.500 --> 00:43:25.900
how much memory they use,
you know,

00:43:25.900 --> 00:43:27.940
how much data they put in there,
how much stored procedures

00:43:27.940 --> 00:43:28.890
they put into memory.

00:43:28.900 --> 00:43:31.900
Tune that appropriately because
you're going to have this big piece

00:43:31.900 --> 00:43:34.780
of iron that's basically sitting
there idle because the database

00:43:34.780 --> 00:43:37.900
is trying to run a little tiny
slice of memory on one processor,

00:43:37.950 --> 00:43:39.890
and it doesn't do anyone any good.

00:43:40.260 --> 00:43:42.900
Speaking from experience,
databases run really,

00:43:42.900 --> 00:43:47.880
really slow when they're tuned for, say,
512 megs of RAM, but you only have 256.

00:43:47.900 --> 00:43:50.370
So, you know,
it's a little bit of a challenge.

00:43:51.700 --> 00:47:03.900
[Transcript missing]

00:47:05.620 --> 00:47:07.500
Refactor your software.

00:47:07.640 --> 00:47:12.090
Once you get the thing built,
once it's working right,

00:47:12.270 --> 00:47:14.710
And you've found where
your bottlenecks are,

00:47:14.790 --> 00:47:18.960
start to, you know, compile anything that
does serious calculations.

00:47:18.960 --> 00:47:21.160
Look at optimizing your
calculation engines.

00:47:21.160 --> 00:47:25.300
Look at generalizing that and moving
it out of sort of the application

00:47:25.300 --> 00:47:27.460
layer and into the backend layer.

00:47:27.620 --> 00:47:31.500
And really treat it like a serious
calculation engine that you want

00:47:31.500 --> 00:47:35.580
to maximize performance of and
then use it from the upper layers.

00:47:35.660 --> 00:47:38.630
Simplify your application
and session objects.

00:47:38.850 --> 00:47:42.080
This is more,
this isn't really about optimization

00:47:42.080 --> 00:47:44.570
as much as facilitating optimization.

00:47:44.760 --> 00:47:48.680
What you want to do is if you have, say,
something that does region management,

00:47:48.680 --> 00:47:51.900
going back to the store thing
where you've got multiple regions,

00:47:52.070 --> 00:47:54.530
at the application level
and there's some complex,

00:47:54.530 --> 00:47:57.790
say, product selection or product
availability on regions.

00:47:57.810 --> 00:48:00.580
As an example, we did a record store.

00:48:00.580 --> 00:48:02.620
Record stores,
there's certain records you can't sell

00:48:02.620 --> 00:48:03.980
in certain countries in the world.

00:48:04.110 --> 00:48:05.560
So we have a region manager.

00:48:05.560 --> 00:48:09.080
We push that region manager into
an object of its own that you can

00:48:09.140 --> 00:48:11.230
access through the application.

00:48:11.300 --> 00:48:13.130
By doing that,
it moves that functionality out

00:48:13.130 --> 00:48:15.780
of the application level and it
means that as we're optimizing that

00:48:15.780 --> 00:48:18.340
and we're optimizing other things,
we're modifying something

00:48:18.340 --> 00:48:19.810
that's relatively isolated.

00:48:22.700 --> 00:48:25.720
And finally,
don't forget about the web server.

00:48:25.800 --> 00:48:29.810
Is the web server optimized
for the environment?

00:48:29.860 --> 00:48:34.020
A classic example of this is, okay,
so you're running against Apache.

00:48:34.020 --> 00:48:36.420
You've got that WebObjects
adapter in there.

00:48:36.420 --> 00:48:38.670
You've tuned your application
out to the nth degree.

00:48:38.720 --> 00:48:41.980
Oops,
you're only running five Apache servers.

00:48:42.030 --> 00:48:43.720
I did that once.

00:48:43.720 --> 00:48:44.260
Tune it.

00:48:44.350 --> 00:48:47.560
Make sure it has the appropriate
configuration for the amount

00:48:47.560 --> 00:48:49.340
of load you expect to have.

00:48:49.340 --> 00:48:53.420
Use a mixture of your
static and dynamic content.

00:48:53.570 --> 00:48:55.410
Wherever you can use static content,
again,

00:48:55.440 --> 00:48:57.330
that's just going to boost performance.

00:48:57.400 --> 00:49:02.340
Direct actions allow you to integrate the
static content with the dynamic content.

00:49:02.340 --> 00:49:07.540
If you enable, okay, in WebObjects,
one of the great things about HTTP,

00:49:07.540 --> 00:49:11.370
since it's totally stateless,
is that when you have a user having

00:49:11.370 --> 00:49:15.190
a user experience with your site,
you have to pass around a user ID,

00:49:15.260 --> 00:49:16.660
a session identifier.

00:49:16.870 --> 00:49:19.350
Well, normally, by default,
that session identifier goes back

00:49:19.350 --> 00:49:21.640
and forth in every single URL.

00:49:21.640 --> 00:49:24.940
So every time a hyperlink is
generated in the dynamic content,

00:49:24.950 --> 00:49:27.200
that hyperlink has to have this big,
long,

00:49:27.330 --> 00:49:31.440
nasty number that identifies that user
such that when the user clicks on that,

00:49:31.440 --> 00:49:35.620
WebObjects can figure out what
session to associate that hit with.

00:49:35.970 --> 00:49:38.880
Well, if you move that to the cookie,
you know,

00:49:38.880 --> 00:49:42.560
cookies have their own problems,
but pretty much they're

00:49:42.560 --> 00:49:44.080
supported everywhere now.

00:49:44.200 --> 00:49:46.540
By doing that,
pretty much all the URLs in your

00:49:46.540 --> 00:49:51.080
content no longer have to have
user-specific information in them.

00:49:51.080 --> 00:49:56.380
This allows you to integrate your
dynamic content and your static content.

00:49:56.380 --> 00:49:59.440
So, for example, again,
using a record store example,

00:49:59.440 --> 00:50:01.900
we may have static pages
that describe albums,

00:50:01.910 --> 00:50:03.960
static pages that describe artists.

00:50:04.100 --> 00:50:05.600
Well, those don't change very often.

00:50:05.600 --> 00:50:06.790
Leave them on disk as static.

00:50:06.930 --> 00:50:09.330
Let the WebObjects application
navigate over to them,

00:50:09.330 --> 00:50:12.180
have direct actions in those
pages that bring the users back

00:50:12.180 --> 00:50:13.910
into the WebObjects application.

00:50:14.080 --> 00:50:16.400
The more hits you can get
against the static stuff,

00:50:16.400 --> 00:50:17.400
the more off you are.

00:50:17.400 --> 00:50:20.390
I'm going to move quickly and do some QA.

00:50:20.650 --> 00:50:21.400
Okay.

00:50:21.400 --> 00:50:23.400
Well, we actually--do we have
10 minutes after to do QA?

00:50:23.400 --> 00:50:24.400
Fifteen.

00:50:24.830 --> 00:50:25.830
Fifteen.

00:50:25.830 --> 00:50:26.980
Great.

00:50:26.980 --> 00:50:28.600
Thank you.

00:50:28.600 --> 00:50:30.950
Optimize for fast browser display.

00:50:31.190 --> 00:50:33.940
This is another little war story here.

00:50:33.940 --> 00:50:36.710
We had a client and
the content generation,

00:50:36.710 --> 00:50:40.160
the content delivery was really,
really slow.

00:50:40.160 --> 00:50:43.940
And this was back in the days when tables
didn't really quite work right and you

00:50:43.940 --> 00:50:46.260
couldn't really specify image sizes.

00:50:46.260 --> 00:50:48.050
So, we had to do a lot of customizing.

00:50:48.060 --> 00:50:49.640
We had to do a lot of customizing.

00:50:49.640 --> 00:50:51.510
We had to do a lot of customizing.

00:50:51.510 --> 00:50:53.310
We had to do a lot of customizing.

00:50:53.310 --> 00:50:55.220
We had to do a lot of customizing.

00:50:55.260 --> 00:50:57.290
We had to do a lot of customizing.

00:50:57.380 --> 00:50:59.300
We had to do a lot of customizing.

00:50:59.360 --> 00:51:01.110
We had to do a lot of customizing.

00:51:01.260 --> 00:51:03.020
We had to do a lot of customizing.

00:51:03.020 --> 00:51:04.790
We had to do a lot of customizing.

00:51:04.800 --> 00:51:06.810
We had to do a lot of customizing.

00:51:06.990 --> 00:51:09.060
We had to do a lot of customizing.

00:51:09.060 --> 00:51:11.210
We had to do a lot of customizing.

00:51:11.210 --> 00:51:13.140
We had to do a lot of customizing.

00:51:13.140 --> 00:51:15.070
We had to do a lot of customizing.

00:51:15.070 --> 00:51:15.590
We had

00:51:16.760 --> 00:51:23.330
Smaller pages display faster.

00:51:23.460 --> 00:51:25.750
The less HTML you generate,
the faster it goes out.

00:51:25.850 --> 00:51:28.470
The less dynamic content
you're generating,

00:51:28.470 --> 00:51:29.980
the faster it goes out.

00:51:29.980 --> 00:51:32.190
You want to batch your
displays along sets of data.

00:51:32.200 --> 00:51:37.040
Not only does the user not want
to see 3,000 products all at once,

00:51:37.100 --> 00:51:39.260
this makes things go faster.

00:51:39.260 --> 00:51:42.240
Show them 10 at a time,
show them 15 at a time.

00:51:42.290 --> 00:51:43.510
Generate short URLs.

00:51:43.510 --> 00:51:46.120
This again gets back to
the spacer.gif thing.

00:51:46.120 --> 00:51:50.080
Instead of /images, use /i.

00:51:50.100 --> 00:51:53.910
This also do better with images
and just everything surrounding

00:51:53.910 --> 00:51:57.290
the static resources that are
associated with every website.

00:51:57.370 --> 00:52:01.520
Split installs and WebObjects are very,
very convenient.

00:52:01.520 --> 00:52:03.070
They're very useful.

00:52:03.140 --> 00:52:05.450
We never do them.

00:52:05.830 --> 00:52:08.130
And it's not because they don't
work or anything like that.

00:52:08.160 --> 00:52:12.020
We never do them because we put all of
our static resources as close to the

00:52:12.020 --> 00:52:14.160
top level of the web server as we can.

00:52:14.160 --> 00:52:18.770
We leave it there and it reduces
the amount of HTML we generate.

00:52:21.640 --> 00:52:23.880
You want to also improve
the structure of your HTML.

00:52:23.880 --> 00:52:26.700
Now, this isn't as much as an
optim... This is optimization,

00:52:26.700 --> 00:52:29.500
as in optimizing towards
a working application,

00:52:29.500 --> 00:52:30.480
not a fast one.

00:52:30.480 --> 00:52:34.800
Use an HTML code checker,
such as WebLint,

00:52:35.040 --> 00:52:38.730
which everyone should be on the
WebObjects mailing list at OmniGroup,

00:52:38.730 --> 00:52:40.420
www.omnigroup.com.

00:52:40.420 --> 00:52:43.170
If you're ever planning on doing
any development with WebObjects

00:52:43.180 --> 00:52:46.460
or you're even interested,
immediately sign up for that list.

00:52:46.500 --> 00:52:51.430
And the reason why I mention that
as well is because we're going to be

00:52:51.700 --> 00:52:54.720
throwing a bunch of code out there next
week when we get a chance to go back.

00:52:54.780 --> 00:52:57.340
And one of them is this
thing called WebLint.

00:52:57.380 --> 00:53:02.160
What it does is it looks through your
WebObjects HTML or your generated HTML,

00:53:02.160 --> 00:53:06.290
checks the structure of it,
makes sure everything lines up...

00:53:06.540 --> 00:53:08.690
Simplify your table structures.

00:53:08.820 --> 00:53:11.510
It's tempting to nest tables
deeper and deeper and deeper,

00:53:11.510 --> 00:53:15.000
especially when you have an object
hierarchy or a component hierarchy.

00:53:15.050 --> 00:53:16.350
You want to reuse all those components.

00:53:16.420 --> 00:53:19.580
Every component needs to guarantee
that it displays correctly so

00:53:19.580 --> 00:53:21.090
it has its own little table.

00:53:21.190 --> 00:53:22.480
That's really slow.

00:53:22.530 --> 00:53:24.780
It's really, really slow in Netscape.

00:53:24.950 --> 00:53:27.500
It's just very slow in Internet Explorer.

00:53:28.100 --> 00:53:31.390
And watch for nesting problems.

00:53:31.560 --> 00:53:33.240
especially things like nested forms.

00:53:33.240 --> 00:53:36.340
If you open a tag,
don't close the tag until you've

00:53:36.340 --> 00:53:38.480
closed every other tag inside of it.

00:53:38.530 --> 00:53:40.210
And always make sure you close the tag.

00:53:40.230 --> 00:53:44.590
In the HTML standard that
seemed to have come out of the

00:53:44.590 --> 00:53:48.380
early browser implementations,
closing a table cell,

00:53:48.380 --> 00:53:51.430
closing a table row,
even closing a table,

00:53:51.460 --> 00:53:54.380
closing forms was pretty much optional.

00:53:54.400 --> 00:54:00.020
That doesn't work when you're talking
about dynamic content generation.

00:54:00.180 --> 00:54:02.280
And it's gonna break things.

00:54:02.330 --> 00:54:05.120
And also,
when it gets back to actual performance,

00:54:05.150 --> 00:54:07.780
one of the risks there,
especially if you have forms

00:54:07.850 --> 00:54:11.340
that are mis-structured,
is that you can get incomplete

00:54:11.340 --> 00:54:15.360
data back to your application,
or you can get broken data.

00:54:15.390 --> 00:54:18.120
And you can get a performance
hit as your application goes in,

00:54:18.290 --> 00:54:21.900
oops, exception,
and has to go and deal with maintenance

00:54:22.080 --> 00:54:26.980
stuff associated with an error
condition or an exceptional state.

00:54:28.910 --> 00:54:31.750
The classic one is the overlap problem.

00:54:31.790 --> 00:54:35.430
I can't tell you how many times
we've worked with HTML producers

00:54:35.430 --> 00:54:39.690
or we have been doing the
HTML ourselves and just a simple

00:54:39.720 --> 00:54:43.200
HTML overlap where you open a form,
you open the table,

00:54:43.200 --> 00:54:45.450
then you close the form
and close the table.

00:54:45.710 --> 00:54:46.770
There's a problem there.

00:54:46.800 --> 00:54:49.280
And this can cause some serious problems.

00:54:49.300 --> 00:54:50.420
The forms don't work.

00:54:50.420 --> 00:54:51.940
The processing must be broken.

00:54:52.020 --> 00:54:53.300
The code must be broken.

00:54:53.300 --> 00:54:55.290
It's like, no, it's actually in the HTML.

00:54:55.850 --> 00:54:59.540
And one of the things to keep in mind is
that especially when you're a developer,

00:54:59.540 --> 00:55:01.020
you focus on a single component.

00:55:01.020 --> 00:55:02.220
I'm doing this component.

00:55:02.290 --> 00:55:06.530
Well, sometimes problems can span
across multiple components.

00:55:06.540 --> 00:55:10.230
And what we like to do is we check,
we use WebLint on the components

00:55:10.240 --> 00:55:14.850
themselves as well as on the
entire generated content.

00:55:14.860 --> 00:55:18.460
And for more information,
this here as well,

00:55:18.700 --> 00:55:23.940
please sign up to the OmniWeb,
OmniGroup mailing list and there will

00:55:23.940 --> 00:55:25.290
be a lot more information coming out.

00:55:25.580 --> 00:55:28.290
After WWDC, there's always discussions
on the mailing list,

00:55:28.290 --> 00:55:30.540
follows up from the sessions, etc.

00:55:30.540 --> 00:55:32.670
I'm sure Dave Newman who's making
a bunch of code available will

00:55:32.670 --> 00:55:34.480
post information there as well.

00:55:34.480 --> 00:55:36.790
Dave Newman: All right.

00:55:36.800 --> 00:55:41.430
Well, we hope this stuff was, you know,
was a good start.

00:55:43.910 --> 00:55:47.900
I hope this was a good start at
optimizing your applications.

00:55:47.900 --> 00:55:49.810
We've got some time for
a whole bunch of QA.

00:55:49.910 --> 00:55:52.880
Now, the usual who to contact.

00:55:52.930 --> 00:55:55.900
Let's do a little question and answer.

00:55:55.900 --> 00:55:58.680
First of all,
a big hand for our presenters.