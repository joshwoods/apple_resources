WEBVTT

00:00:08.540 --> 00:00:11.950
So today I'm going to talk about
basically some of the nuts and

00:00:11.950 --> 00:00:13.570
bolts features of Project Builder.

00:00:13.580 --> 00:00:17.340
And we're going to have a
few of the engineers up here.

00:00:17.340 --> 00:00:22.990
What we're going to cover in detail
is basically what should be your

00:00:22.990 --> 00:00:25.610
first day of using Project Builder.

00:00:25.620 --> 00:00:29.260
We want to talk you through
getting the code that you have

00:00:29.260 --> 00:00:31.500
into the new Project Builder.

00:00:31.500 --> 00:00:36.190
I'll cover the first bullet up there,
importing a project to Project Builder.

00:00:36.820 --> 00:00:39.340
Then Anders Bertelrud
is going to come up,

00:00:39.350 --> 00:00:43.380
one of the designers of the build system,
and talk about how we customize the build

00:00:43.380 --> 00:00:47.360
process to support some other features
that you may have in your project.

00:00:47.360 --> 00:00:52.150
And then finally, Mike Ferris,
who is the lead designer of the

00:00:52.150 --> 00:00:56.720
CFBundle objects on Mac OS X,
will talk about how you actually

00:00:56.720 --> 00:00:59.140
create those bundles for Mac OS X.

00:01:01.800 --> 00:01:06.160
So just to recap what we
covered in the last session,

00:01:06.160 --> 00:01:11.340
Project Builder sits at the
middle of a lot of other tools.

00:01:11.340 --> 00:01:15.760
It's sort of the central clearinghouse
for the developer experience.

00:01:15.760 --> 00:01:17.000
We talked to Interface Builder.

00:01:17.000 --> 00:01:19.180
We talked to the performance tools.

00:01:19.180 --> 00:01:21.980
We'll be integrating with
all the WebObjects tools.

00:01:22.000 --> 00:01:27.290
And we invoke command line compiler
and debuggers to do the real work of

00:01:27.290 --> 00:01:30.560
producing your project and debugging it.

00:01:31.930 --> 00:01:36.800
So this is what Project Builder
looks like today.

00:01:36.920 --> 00:01:40.140
In order to actually
get your code into it,

00:01:40.140 --> 00:01:45.860
we've built in some support for three
different streamline transitions,

00:01:46.040 --> 00:01:51.700
one taking a basic source code project.

00:01:52.530 --> 00:01:58.580
Taking a Project Builder Woe project,
the old pb.project files,

00:01:58.720 --> 00:02:02.100
and also we've built in
fairly recently support for

00:02:02.100 --> 00:02:04.190
importing CodeWarrior projects.

00:02:04.300 --> 00:02:06.470
So importing source directories.

00:02:06.600 --> 00:02:08.840
Importing source directories
is fairly straightforward.

00:02:08.840 --> 00:02:11.400
This is a mainline feature
of the application.

00:02:11.440 --> 00:02:14.890
So we allow you to do it not only
when you're creating a new project,

00:02:14.890 --> 00:02:18.570
but whenever you want to add some
more source code to your project.

00:02:19.300 --> 00:02:24.560
Basically, in creating a new project,
you can make the project either an

00:02:24.830 --> 00:02:28.380
empty project or any of the existing
project templates that we support.

00:02:28.630 --> 00:02:30.420
Make sure you have some targets in there.

00:02:30.520 --> 00:02:34.360
It makes it a little more convenient
when you actually import the source code.

00:02:34.360 --> 00:02:37.940
And then just grab some
folders out of the finder,

00:02:37.940 --> 00:02:41.540
drop them into our group
view of Project Builder,

00:02:41.540 --> 00:02:43.370
and you're good to go.

00:02:43.380 --> 00:02:49.280
You'll get all the factory default build
settings that you usually would have.

00:02:49.280 --> 00:02:52.260
So you may have to do some
work there if you're importing

00:02:52.260 --> 00:02:54.120
a bare source code directory.

00:02:54.120 --> 00:02:57.100
For importing pb.project files,
the old Project Builder or

00:02:57.100 --> 00:03:00.050
Project Builder Woe or whatever
we decide to call it today,

00:03:00.060 --> 00:03:05.160
we have a very sophisticated
automatic import feature.

00:03:05.230 --> 00:03:09.660
This is a feature that we
used ourselves to bring the

00:03:09.660 --> 00:03:12.560
PBX code base into our own IDE.

00:03:12.560 --> 00:03:16.270
So we initially started developing
on the old Project Builder

00:03:16.270 --> 00:03:18.360
when we got enough stuff there.

00:03:18.360 --> 00:03:19.200
We did switch the entire code base.

00:03:19.270 --> 00:03:21.640
We switched the entire team over
to developing on our own app.

00:03:21.640 --> 00:03:24.830
And we've had a lot of testing
on this because there are a lot

00:03:24.910 --> 00:03:28.470
of people who are using the old
Project Builder at Apple and need to

00:03:28.470 --> 00:03:30.520
get their code into the new system.

00:03:30.740 --> 00:03:32.010
So we've had a lot of testing.

00:03:32.010 --> 00:03:33.620
We have a lot of features on this.

00:03:33.660 --> 00:03:37.040
So if you currently
have a pb.project file,

00:03:37.040 --> 00:03:40.640
this should be a very
simple process for you.

00:03:40.640 --> 00:03:45.860
The one caveat is that if you've written
sophisticated makefile post-AML and

00:03:45.880 --> 00:03:50.300
pre-AML in old Project Builder users,
we'll know what that is.

00:03:50.300 --> 00:03:54.230
The makefile pre-AML will have
some settings of build variables.

00:03:54.300 --> 00:03:57.570
You may have to go into the
target editor and set up some

00:03:57.570 --> 00:03:59.300
of those settings yourself.

00:03:59.300 --> 00:04:02.480
And if you have sophisticated
build actions that you've

00:04:02.670 --> 00:04:05.820
put into the post-AML,
we do have support for that

00:04:05.820 --> 00:04:09.300
in the new environment,
but our model is very different.

00:04:09.340 --> 00:04:12.520
So we aren't able to give
you an automated transfer

00:04:12.570 --> 00:04:14.300
of those build actions.

00:04:14.300 --> 00:04:17.300
But we do give you a very
straightforward way to implement them.

00:04:17.300 --> 00:04:18.250
And hopefully it
shouldn't take much time,

00:04:18.760 --> 00:04:21.760
unless your project is
extremely sophisticated.

00:04:21.760 --> 00:04:24.260
We also support Code Warrior projects.

00:04:24.460 --> 00:04:28.760
The Code Warrior projects that we support
are the XML Code Warrior projects.

00:04:28.760 --> 00:04:33.760
So you'll need to output an
XML-based file from Code Warrior.

00:04:33.760 --> 00:04:37.760
And then again,
just invoke our automatic import feature.

00:04:37.860 --> 00:04:39.560
We'll bring in all of
your groups and files.

00:04:39.830 --> 00:04:42.690
We'll bring in the compatible
targets as far as we can go.

00:04:42.770 --> 00:04:44.630
Some of the rad features
and things are not,

00:04:44.660 --> 00:04:47.750
of course, in our project model,
so they don't translate over.

00:04:48.220 --> 00:04:51.310
And we'll translate
your compiler settings,

00:04:51.380 --> 00:04:54.480
again, as best we can,
given that we're running on a tool that's

00:04:54.630 --> 00:04:57.210
very different from what MetroWorks uses.

00:04:57.220 --> 00:05:01.720
And again, as you can imagine,
once you import the Code Warrior project,

00:05:01.720 --> 00:05:03.720
you'll have to tune it a little bit.

00:05:03.720 --> 00:05:07.600
You'll have to tweak some of
the settings to get some of the

00:05:07.600 --> 00:05:09.720
features that you're going to want.

00:05:09.720 --> 00:05:13.210
And as we see some of the
tuning that needs to be done,

00:05:13.220 --> 00:05:17.220
again, this is a newer feature,
we'll be adding more and more automation,

00:05:17.680 --> 00:05:21.180
and hopefully get better and better,
and eventually on par with

00:05:21.180 --> 00:05:26.150
the current level of old
Project Builder import that we have.

00:05:27.350 --> 00:05:29.640
So now I'd like to bring
up Anders Bertelrud.

00:05:29.640 --> 00:05:31.900
He's one of the designers
of our build system.

00:05:31.900 --> 00:05:35.600
And he's also the guy that's
responsible for that whizzy slide

00:05:35.600 --> 00:05:37.050
views that you see in the UI.

00:05:37.610 --> 00:05:42.100
So what we're going to do is just
cover the three ways that I just

00:05:42.100 --> 00:05:45.600
talked about of getting your
source code into Project Builder.

00:05:45.600 --> 00:05:48.900
The first way is going to be a
simple import of a source directory.

00:05:48.900 --> 00:05:52.800
We'll use the simple text
sources to show this.

00:05:52.810 --> 00:05:56.460
So the first thing that Anders is going
to do is bring up the new project.

00:05:56.460 --> 00:05:59.610
Because we want to start out with
a Carbon application because we

00:05:59.610 --> 00:06:03.520
know that simple text is going to
be eventually a Carbon application.

00:06:03.610 --> 00:06:08.060
So he'll select that and choose
a spot for it on the file system.

00:06:08.860 --> 00:06:12.290
and then we're ready to go.

00:06:12.430 --> 00:06:16.490
So what we get here is basically created
out of our project template and it does

00:06:16.630 --> 00:06:18.640
give you a lot of nice factory defaults.

00:06:18.720 --> 00:06:19.900
It gives you default target.

00:06:19.900 --> 00:06:22.500
It gives you some standard groups.

00:06:23.090 --> 00:06:27.300
But since we're going to
be importing these things,

00:06:27.300 --> 00:06:33.330
we really don't want the sources
that we put in here or the resources.

00:06:33.330 --> 00:06:34.390
So I'll just select those and
delete them from the project.

00:06:36.300 --> 00:06:42.320
And so now what we can do is we
can go out to Finder and we can

00:06:42.320 --> 00:06:45.380
grab the simple text source base

00:06:48.200 --> 00:10:10.700
[Transcript missing]

00:10:11.210 --> 00:10:15.470
So the other thing that I wanted
to show is just the way that

00:10:15.470 --> 00:10:17.200
we have imported these files.

00:10:17.200 --> 00:10:21.780
If Anders wants to just bring
up the inspector briefly.

00:10:22.160 --> 00:10:24.860
If we raise the inspector,
what we try to do is make all of

00:10:24.930 --> 00:10:26.690
these files as relative as possible.

00:10:26.750 --> 00:10:31.660
That allows you to the most flexibility
in terms of structuring your project.

00:10:31.810 --> 00:10:36.340
So we'll bring everything in as a group
relative reference if you've told us to

00:10:36.340 --> 00:10:38.340
recursively create those groups for you.

00:10:38.430 --> 00:10:40.830
And of course you're welcome
to change that to whatever

00:10:40.920 --> 00:10:42.100
kind of reference you want.

00:10:42.200 --> 00:10:46.040
But most of these imports are going
to import these relative to the path

00:10:46.090 --> 00:10:48.650
we've assigned to the particular group.

00:10:49.990 --> 00:10:53.740
So why don't we close that project.

00:10:53.840 --> 00:10:56.740
And now what we're going to
do is import the same project,

00:10:56.820 --> 00:11:00.640
but we've created an old
pb.project file in here,

00:11:00.750 --> 00:11:05.220
and we're going to import
it as a pb.project file.

00:11:05.280 --> 00:11:08.300
So it says pb.woldproject,
and what Anders has done here

00:11:08.840 --> 00:11:12.070
is brought up our file importer,
and you can select that

00:11:12.070 --> 00:11:13.020
off of the file menu.

00:11:13.020 --> 00:11:16.390
He's selecting the pb.project file.

00:11:16.750 --> 00:11:20.600
And all you have to do once you've
selected that file is just hit finish.

00:11:20.600 --> 00:11:26.840
And because we own the PB.Project model,
we go through and take every setting

00:11:26.840 --> 00:11:30.690
that we know about and translate
it over into the new project model.

00:11:30.700 --> 00:11:33.970
So again, we have the groups and files.

00:11:34.030 --> 00:11:36.660
And what you'll see here,
if you're an old Project Builder user,

00:11:36.960 --> 00:11:40.700
you'll be very used to the
hierarchy that we've set up,

00:11:40.700 --> 00:11:44.680
very much like the old
suitcases that were in PBWO.

00:11:44.680 --> 00:11:47.500
And of course,
the difference is that now you

00:11:47.590 --> 00:11:51.530
can go through and move these
files around however you want.

00:11:51.560 --> 00:11:53.520
It affects nothing in the build system.

00:11:53.520 --> 00:11:56.720
It affects nothing in the
file system unless you tell

00:11:56.720 --> 00:11:58.560
it you want it to affect it.

00:11:58.700 --> 00:12:01.520
And again,
we'll have a very similar target,

00:12:01.520 --> 00:12:04.100
so Anders can show that target setting.

00:12:04.390 --> 00:12:08.770
Basically, this is going to look very
similar with the added benefit

00:12:08.850 --> 00:12:11.890
that because we know this format,
because we have a lot

00:12:11.890 --> 00:12:14.910
more information here,
we're able to bring over a lot more

00:12:15.030 --> 00:12:19.580
of your compiler settings and build
settings that you're used to having

00:12:19.580 --> 00:12:22.130
inside of the old Project Builder.

00:12:23.550 --> 00:12:27.290
So finally,
we're going to show the newest feature,

00:12:27.290 --> 00:12:29.580
which is importing the
CodeWarrioR project.

00:12:29.660 --> 00:12:33.100
And again, we've made simple text
into a CodeWarrioR project.

00:12:33.140 --> 00:12:35.970
We've saved it out as XML.

00:12:36.060 --> 00:12:40.330
Anders will raise the
CodeWarrioR importer at this point.

00:12:40.430 --> 00:12:45.380
Select the XML file and hit finish.

00:12:47.320 --> 00:12:52.380
And what we have is, again,
Project Builder project.

00:12:52.450 --> 00:12:53.800
We've got our sources.

00:12:53.820 --> 00:12:56.160
We've got all of our
files that we expect.

00:12:56.200 --> 00:12:59.980
Again,
this is going to be paralleling whatever

00:13:00.300 --> 00:13:02.520
structure you have in CodeWarrior.

00:13:02.540 --> 00:13:05.080
The other thing that we have is, again,
a target.

00:13:05.100 --> 00:13:09.530
And since we actually have two targets
inside of the CodeWarrior project,

00:13:09.620 --> 00:13:12.240
we brought both of them
over and translated all the

00:13:12.240 --> 00:13:14.370
settings that we knew about.

00:13:15.440 --> 00:13:19.170
And again, this is going to look very
similar to the Project Builder

00:13:19.390 --> 00:13:21.670
project that you've seen before.

00:13:24.160 --> 00:13:29.550
So that's how you get your
code into Project Builder.

00:13:29.610 --> 00:13:35.550
And now I'm going to go
back to the slides and let

00:13:35.550 --> 00:13:35.550
Anders come out and talk about

00:13:36.160 --> 00:13:39.800
How you customize the build process
once you've got everything in there.

00:13:39.840 --> 00:13:41.100
Thanks, John.

00:13:41.170 --> 00:13:44.440
So now we've seen a couple of different
ways in which you can bring your

00:13:44.440 --> 00:13:46.540
source code into Project Builder.

00:13:46.600 --> 00:13:49.100
And now that we have a project,
I'm going to talk a little bit

00:13:49.100 --> 00:13:52.220
about how you can customize it.

00:13:52.420 --> 00:13:55.500
So again,
here's how Project Builder fits in.

00:13:55.500 --> 00:13:56.700
And we've seen the importing.

00:13:56.810 --> 00:13:59.970
And we're focusing on this part.

00:14:01.070 --> 00:14:04.790
So there are a couple of ways
of customizing the build.

00:14:04.800 --> 00:14:07.680
I'm going to talk about three
of them in roughly the order

00:14:07.680 --> 00:14:09.760
of increasing flexibility.

00:14:09.860 --> 00:14:13.600
First one is just editing build settings,
compiler flags, linker flags,

00:14:13.600 --> 00:14:17.010
preprocessor defines, that type of thing.

00:14:17.280 --> 00:14:21.310
If you need more flexibility,
you can actually modify how a target is

00:14:21.320 --> 00:14:25.740
built and add your own build phases to,
for example, copy files or run scripts

00:14:26.170 --> 00:14:28.220
at any point in the build.

00:14:28.460 --> 00:14:32.580
If you have a GNU based project,
for example, with its own make file or

00:14:32.730 --> 00:14:36.360
highly customized build system,
you can also, as Dave mentioned in

00:14:36.360 --> 00:14:38.550
the previous session,
you can also invoke a custom build

00:14:38.550 --> 00:14:41.310
tool to build the project that way.

00:14:42.070 --> 00:14:44.080
Editing the build settings.

00:14:44.230 --> 00:14:47.610
Again,
a Project Builder target consists of

00:14:47.830 --> 00:14:51.620
one or more build settings that do
things like compile your source files,

00:14:51.710 --> 00:14:54.040
incorporate the resources
into the product,

00:14:54.040 --> 00:14:57.410
and that finally link your
compiled sources against the

00:14:57.490 --> 00:14:59.900
frameworks and produce the output.

00:14:59.900 --> 00:15:04.900
And there are target settings that apply
to one or more of these build phases.

00:15:04.900 --> 00:15:06.860
For example, compiler flags.

00:15:06.980 --> 00:15:07.780
Do you want optimization?

00:15:07.900 --> 00:15:09.770
What kind of alignment do you want?

00:15:10.020 --> 00:15:10.850
Those sorts of things.

00:15:10.900 --> 00:15:15.890
We also have other target-based
settings such as the install location.

00:15:15.910 --> 00:15:18.900
If you intend to install this
framework somewhere on the file system,

00:15:18.900 --> 00:15:21.900
where do you intend it to go
when you build for deployment?

00:15:21.900 --> 00:15:23.810
You can also add custom settings.

00:15:23.910 --> 00:15:26.900
In the first session,
Dave showed the target settings panel.

00:15:26.900 --> 00:15:29.830
And we have a table view where
right now it's the expert mode.

00:15:29.990 --> 00:15:32.900
And so you can add really any
build setting that you want.

00:15:32.900 --> 00:15:36.890
And those will be available in the build
phases that I'm going to describe later.

00:15:36.900 --> 00:15:39.850
So this is the simplest way of
editing your project settings.

00:15:39.950 --> 00:15:43.880
Just checking switches,
entering values and tables.

00:15:43.880 --> 00:15:46.850
And for many of the projects,
this is all you ever need to do.

00:15:48.480 --> 00:15:50.000
If you need a little
bit more flexibility,

00:15:50.000 --> 00:15:54.310
you can actually add a build phase to
copy arbitrary sets of files or folders

00:15:54.810 --> 00:15:57.170
to arbitrary places in the file system.

00:15:57.250 --> 00:16:00.020
You can either copy it into
special folders inside of the

00:16:00.020 --> 00:16:01.650
bundle that you're building.

00:16:01.660 --> 00:16:03.800
For example,
if you're building an application, well,

00:16:03.800 --> 00:16:07.390
that's packaged as an
application wrapper in Mac OS X,

00:16:07.390 --> 00:16:09.750
and it has various sub-locations.

00:16:09.840 --> 00:16:11.810
So, for example,
if you're packaging frameworks

00:16:11.810 --> 00:16:14.620
together with your application,
they would go into a

00:16:14.690 --> 00:16:16.340
frameworks subfolder.

00:16:16.420 --> 00:16:21.230
and you could actually use copy
files build phase to accomplish that.

00:16:21.400 --> 00:17:51.500
[Transcript missing]

00:17:52.000 --> 00:17:54.590
The other thing you can use it
for is a post-install action.

00:17:54.740 --> 00:17:58.280
Suppose you want to change some
permissions of a particular file

00:17:58.280 --> 00:18:01.750
or suppose you want to invoke a
tool like NewTar to just package

00:18:01.750 --> 00:18:03.340
up your project or whatever.

00:18:03.500 --> 00:18:05.970
You can do anything you like with that.

00:18:06.870 --> 00:18:10.000
And finally,
the feature that Dave mentioned that

00:18:10.070 --> 00:18:15.180
we've talked about before for a project
with its own customized build system,

00:18:15.180 --> 00:18:18.380
such as, for example, a new project,
a project that you got from somewhere

00:18:18.380 --> 00:18:22.390
and you want to commit sources,
commit your changes back to that

00:18:22.390 --> 00:18:25.960
without changing the build system,
you can use a legacy target.

00:18:25.960 --> 00:18:28.660
And what you can do in this
case is to take the project,

00:18:28.660 --> 00:18:31.480
bring it into Project Builder
so you can use the editor,

00:18:31.480 --> 00:18:35.960
debugger, all those nice features,
and for the build, you say,

00:18:35.960 --> 00:18:38.360
"Go use that tool over there."
And that could be GNU Make,

00:18:38.450 --> 00:18:40.740
for example,
or it could be any other type of a tool.

00:18:40.790 --> 00:18:43.770
And in fact, you can invoke any
command you want there,

00:18:43.820 --> 00:18:45.520
but typically it will
be used for Makefiles.

00:18:45.520 --> 00:18:49.020
And so the one caveat
with this is it's great.

00:18:49.020 --> 00:18:50.020
You get a lot of flexibility.

00:18:50.020 --> 00:18:53.020
You can override the
build system completely,

00:18:53.020 --> 00:18:55.400
but of course that means that
if you add project files,

00:18:55.400 --> 00:18:57.440
Project Builder's not
going to know about that,

00:18:57.450 --> 00:18:59.900
so in that case you will still
have to edit the Makefile.

00:18:59.900 --> 00:19:03.410
So we expect most people will want
to bring their projects in through

00:19:03.410 --> 00:19:06.900
one of the importers and use it
as a full Project Builder project,

00:19:06.990 --> 00:19:11.740
but we have this legacy target feature in
case you're working with open software,

00:19:11.740 --> 00:19:13.700
things like that.

00:19:14.090 --> 00:19:19.430
So I'm going to ask Mike Ferris to
come up and help me do a demo of this.

00:19:19.470 --> 00:19:22.760
So, show off some of these features.

00:19:24.110 --> 00:19:27.240
First of all, let's go ahead and make the
simple text "target" active.

00:19:27.380 --> 00:19:29.240
It's already active.

00:19:29.260 --> 00:19:38.490
And let's go ahead and
add an icon in this case.

00:19:38.490 --> 00:19:38.490
Sorry, I'm on the wrong script here.

00:19:40.020 --> 00:19:45.280
So we imported the SimpleText project,
and if we go to the SimpleText.c file,

00:19:45.280 --> 00:19:48.150
I've taken a look at this project before,
so I happen to know that it has

00:19:48.150 --> 00:19:50.830
a special preprocessor defined
to use the new framework syntax

00:19:50.980 --> 00:19:52.430
for importing Carbon headers.

00:19:52.440 --> 00:19:55.750
That define was not set in
the CodeWarrior XML project,

00:19:55.750 --> 00:19:58.020
so let's go ahead and add that now.

00:19:58.020 --> 00:20:01.520
So let's scroll down to
the SimpleText.c there,

00:20:01.600 --> 00:20:05.430
and we'll just go ahead and
copy the string so we can paste

00:20:05.430 --> 00:20:07.670
it into the build settings.

00:20:08.590 --> 00:20:11.830
And if we switch over to the targets,

00:20:12.730 --> 00:20:13.990
And we go into the build settings.

00:20:14.140 --> 00:20:17.060
We see some build settings here,
the general settings up at the top,

00:20:17.160 --> 00:20:18.440
the install location.

00:20:18.440 --> 00:20:21.590
We have some directed user interface at
this point for the compiler settings.

00:20:21.590 --> 00:20:23.980
As Mike shows you,
you can collapse those if you

00:20:23.980 --> 00:20:25.440
don't want to see all of it.

00:20:25.580 --> 00:20:30.120
And let's go down to the build flags
at the bottom there and add a -d

00:20:30.120 --> 00:20:34.980
and then paste that preprocessor
macro into the other C flags.

00:20:35.140 --> 00:20:38.040
So we're planning on adding directed
user interface for this as well,

00:20:38.040 --> 00:20:41.440
a nice little list of all the
preprocessor macros you want to define,

00:20:41.580 --> 00:20:42.720
those kinds of things.

00:20:42.840 --> 00:20:45.650
In the meantime,
the expert mode gives you the

00:20:45.650 --> 00:20:47.990
ability to add anything you want.

00:20:48.660 --> 00:20:50.410
So that should be all we need.

00:20:50.580 --> 00:20:55.450
So let's go ahead and hit Build and
watch Simple Text Build here.

00:20:55.600 --> 00:20:57.980
So as Dave mentioned
in the first session,

00:20:58.030 --> 00:21:01.530
the top part of the pane there shows
the warnings and errors that you have.

00:21:01.730 --> 00:21:03.590
The bottom part shows
the expert settings.

00:21:03.690 --> 00:21:06.320
That part shows the expert build log.

00:21:06.350 --> 00:21:08.210
That part can actually be
collapsed if you want by just

00:21:08.280 --> 00:21:09.500
dragging the split view there.

00:21:09.500 --> 00:21:14.490
We have a couple of warnings that
I think are harmless in this case,

00:21:14.610 --> 00:21:17.540
but we do have some link errors,
and those look like the speech

00:21:17.540 --> 00:21:19.470
synthesis framework is missing.

00:21:19.500 --> 00:21:23.990
So Mike's going to go
up to the project menu.

00:21:24.330 --> 00:21:25.860
And we'll add the framework.

00:21:25.970 --> 00:21:28.640
It's a standard system framework.

00:21:28.640 --> 00:21:32.820
The open panel takes them to the
standard system location for frameworks

00:21:32.820 --> 00:21:35.400
and just choose speech synthesis.

00:21:35.470 --> 00:21:38.850
And if we build again,
so let's go ahead and add that

00:21:38.990 --> 00:21:40.640
to the simple text Mac OS target.

00:21:40.700 --> 00:21:43.980
And as you see,
it appears down in the list of frameworks

00:21:43.980 --> 00:21:46.160
that this target links against.

00:21:46.260 --> 00:21:51.790
So if we hit build again,
it should work fine this time.

00:21:51.880 --> 00:21:57.800
So it's linking to simple text.

00:21:57.840 --> 00:21:59.030
And build succeeded.

00:21:59.090 --> 00:22:00.970
So let's go ahead and run that.

00:22:05.160 --> 00:22:09.550
And so we built Simple Text after
importing it from the CodeWarrioR project

00:22:09.910 --> 00:22:13.140
that had been exported as an XML,
and we're able to get it up

00:22:13.210 --> 00:22:15.210
and running and building here.

00:22:15.870 --> 00:22:17.420
in fairly short order.

00:22:17.560 --> 00:22:19.850
That's great.

00:22:20.080 --> 00:22:24.210
Let's go ahead and take a look at
some of the other ways in which

00:22:24.210 --> 00:22:25.990
you can configure the build here.

00:22:26.230 --> 00:22:27.520
Let's add a copy-files build phase.

00:22:27.520 --> 00:22:30.850
Suppose we have a release node
file that we want to install into

00:22:30.930 --> 00:22:34.550
a particular file system location
after we build for install.

00:22:34.550 --> 00:22:38.920
Mike's going to add a new
copy-files build phase.

00:22:38.920 --> 00:22:41.560
As you can see in the pop-up there,
we list a set of standard

00:22:41.710 --> 00:22:42.740
system locations.

00:22:42.740 --> 00:22:46.600
Currently it says resources,
but you can pick anything there that's

00:22:46.600 --> 00:22:48.890
inside of the application wrapper.

00:22:49.100 --> 00:22:50.820
These are standard sub-locations.

00:22:50.850 --> 00:22:53.300
Or you can pick an absolute path,
and that's what Mike's

00:22:53.450 --> 00:22:54.870
going to do in this case.

00:22:54.960 --> 00:23:01.550
And just enter an appropriate path in the
system for Apple-provided release nodes.

00:23:01.660 --> 00:23:05.860
You won't be installing here.

00:23:05.860 --> 00:23:10.390
And we're going to check the little box
that says "copy only when installing."

00:23:14.100 --> 00:23:20.900
[Transcript missing]

00:23:23.200 --> 00:23:26.700
I'll take a look at that after the demo.

00:23:26.830 --> 00:23:29.210
All right, so we have a path.

00:23:30.970 --> 00:23:35.800
So what we need to do now is to add the
actual release note file to the project.

00:23:35.800 --> 00:23:39.060
And so under the project
menu we have add files.

00:23:39.060 --> 00:23:42.670
We're going to go ahead and add,
just have a sample RTF file there.

00:23:42.990 --> 00:23:43.900
It could be anything.

00:23:43.900 --> 00:23:46.570
And we're going to add that.

00:23:46.710 --> 00:23:51.100
And we're not going to add it to a target
in this case because we're going to drag

00:23:51.100 --> 00:23:52.900
it into our special build phase later on.

00:23:52.900 --> 00:23:55.610
So we just want to add it
to the project for now.

00:23:56.000 --> 00:23:58.290
and it's going to appear right
there under speech synthesis and

00:23:58.290 --> 00:24:02.100
we can just drag and drop it into
the files area of the target.

00:24:02.140 --> 00:24:06.300
We can drag as many files as we want,
any folders as well, and they'll all get

00:24:06.370 --> 00:24:07.600
put into that location.

00:24:07.740 --> 00:24:11.830
We can also add other copy files,
build faces if we had other locations.

00:24:13.170 --> 00:24:19.390
Okay, so now I'm going to show how we
could actually add custom build

00:24:19.480 --> 00:24:21.240
commands as part of the build.

00:24:21.410 --> 00:24:26.730
So Mike's going to add a
shell script build phase and

00:24:27.800 --> 00:24:31.640
And by default, the shell there is BenSH,
but it could be anything.

00:24:31.830 --> 00:24:33.630
You could, in fact,
invoke Perl and invoke some Perl

00:24:33.630 --> 00:24:34.850
commands as part of your build.

00:24:34.850 --> 00:24:37.470
In this case,
this may be hard for those of

00:24:37.470 --> 00:24:41.900
you sitting in the back to read,
but Mike's entering a little script that

00:24:41.900 --> 00:24:49.140
just echoes the one-line timestamp to a
log file whenever we build the project.

00:24:49.240 --> 00:24:55.420
So it just emits a log whenever
the project builds successfully.

00:24:55.420 --> 00:24:56.770
So that's all done.

00:24:56.980 --> 00:24:59.780
And we're not checking the run only
when installing box because in this

00:24:59.890 --> 00:25:05.550
case we actually want it to execute
every time we build the product.

00:25:05.550 --> 00:25:05.550
So if we just hit build,
we're going to see

00:25:07.400 --> 00:25:12.410
Then we saw some output
in the build log up there,

00:25:12.410 --> 00:25:17.750
but if we open the build log file,
we can actually see that a

00:25:17.750 --> 00:25:20.190
line was emitted to that file.

00:25:21.000 --> 00:25:21.690
So right there.

00:25:21.960 --> 00:25:25.100
So just to show it's not fake,
we'll build again and then just revert

00:25:25.190 --> 00:25:30.170
to show you that it's executing all
those commands and it's updating.

00:25:30.430 --> 00:25:34.810
So this is a powerful way in which
you can add any kind of customization

00:25:34.910 --> 00:25:37.070
you want as part of a build.

00:25:37.260 --> 00:25:40.020
And it really is quite flexible.

00:25:40.560 --> 00:25:45.650
And finally,
let's go ahead and show a legacy target.

00:25:46.030 --> 00:25:47.910
And in this case,
I'm actually not going to

00:25:47.910 --> 00:25:51.710
invoke new make to invoke make.

00:25:51.780 --> 00:25:53.600
I'm actually going to
invoke some other tool,

00:25:53.600 --> 00:25:55.400
just an arbitrary command.

00:25:55.400 --> 00:25:58.310
So Mike is creating a new
legacy make file target.

00:25:58.390 --> 00:26:00.340
Let's call it count lines.

00:26:00.480 --> 00:26:03.400
We're going to have a little command that
counts all the lines of your source code.

00:26:03.400 --> 00:26:10.280
And the default tool is bin make,
and the default parameter is the action.

00:26:10.400 --> 00:26:12.520
So if you don't change anything,
it's going to try to invoke make,

00:26:12.520 --> 00:26:14.400
which is going to look for make file.

00:26:14.400 --> 00:26:17.400
And this is probably the primary
reason you would use a legacy target.

00:26:17.400 --> 00:26:20.990
We're just going to enter a fun little
command here to just find your source

00:26:20.990 --> 00:26:25.390
files and pass them through a little
tool that's going to count the lines.

00:26:25.400 --> 00:26:31.360
So just give us an idea of
how flexible this can be.

00:26:31.400 --> 00:26:32.380
Does that look correct?

00:26:32.570 --> 00:26:33.370
Looks right.

00:26:33.400 --> 00:26:35.430
So that's going to
find our headers files,

00:26:35.430 --> 00:26:37.400
our C files, and the resource files.

00:26:37.400 --> 00:26:40.250
And so let's go ahead and
make this target active.

00:26:40.470 --> 00:26:42.400
If you notice, Mike's checking the
little check box there.

00:26:42.400 --> 00:26:44.360
And we'll just hit build
to run this target.

00:26:44.400 --> 00:26:47.020
And in this case,

00:26:47.260 --> 00:26:49.700
All it does is just count
the lines of source code.

00:26:49.830 --> 00:26:54.690
So you can actually use this for a wide
range of different uses if you want.

00:26:54.690 --> 00:26:58.910
And normally, you're not going to need to
do this to build your product,

00:26:59.060 --> 00:27:00.420
but you may want to do
this kind of thing to,

00:27:00.420 --> 00:27:03.980
for example,
package up your sources or whatever.

00:27:03.980 --> 00:27:08.350
And by dependencies,
we can also make the count lines

00:27:08.360 --> 00:27:13.080
be invoked any time the main
simple text dot o is built.

00:27:13.200 --> 00:27:16.080
So just add a dependency,
make simple text dot o

00:27:16.080 --> 00:27:20.120
be the default target,
and we can build it.

00:27:20.120 --> 00:27:23.620
And the output will
get emitted to the log,

00:27:23.620 --> 00:27:27.030
and then we'll proceed with the build.

00:27:28.050 --> 00:27:33.660
So this summarizes some of the
features of Project Builder.

00:27:33.660 --> 00:27:37.790
We're working on adding convenient UI so
that you should never have to type any

00:27:37.790 --> 00:27:39.760
of these commands if you don't want to.

00:27:39.940 --> 00:27:42.660
But the power is there underneath,
so you can do pretty much

00:27:42.660 --> 00:27:43.900
anything you'd like to.

00:27:43.980 --> 00:27:46.540
And at this point,
I'm going to hand it over to Mike,

00:27:46.710 --> 00:27:49.960
and he's going to talk a little
bit about the application features,

00:27:49.960 --> 00:27:52.890
application packaging
features of Project Builder.

00:27:52.900 --> 00:27:55.350
Mike Ferriss:
So I can't emphasize enough how

00:27:55.350 --> 00:27:59.900
important the application packaging and
the bundling structure is to Mac OS X.

00:27:59.900 --> 00:28:02.830
It's pervasive.

00:28:02.900 --> 00:28:06.900
Almost everything on the
system is packaged as a bundle.

00:28:06.900 --> 00:28:12.140
And so it was very important for us to
make sure that we had full support for

00:28:12.140 --> 00:28:14.900
building bundles in Project Builder.

00:28:14.900 --> 00:28:17.470
We've seen this slide
a couple times before,

00:28:17.470 --> 00:28:21.710
and we're going to be talking about
how Project Builder builds stuff.

00:28:22.510 --> 00:28:26.530
So I want to just briefly
talk a little bit,

00:28:26.530 --> 00:28:28.980
and then we'll get right on to the demo
because that's the most exciting part.

00:28:28.980 --> 00:28:31.420
So we'll talk a little bit
about building bundles.

00:28:31.440 --> 00:28:35.490
We'll talk a little bit about
managing your Info.plist,

00:28:35.620 --> 00:28:38.180
which is one of the main
pieces of your bundle.

00:28:38.180 --> 00:28:41.890
It provides all the metadata
that's needed to tell other

00:28:41.900 --> 00:28:44.420
subsystems what your bundle does.

00:28:44.420 --> 00:28:47.740
We'll talk a little bit
about resource handling.

00:28:47.740 --> 00:28:50.800
We'll talk about bundle resources,
which are just files

00:28:50.880 --> 00:28:52.280
that go in your bundle.

00:28:52.530 --> 00:28:57.150
as well as resource-managed
resources for Carbon Apps.

00:28:57.570 --> 00:29:00.410
And specifically,
I want to touch on localization

00:29:00.630 --> 00:29:04.180
features and how we support
that in Project Builder.

00:29:04.290 --> 00:29:07.090
And then finally,
we'll talk a little bit about how you

00:29:07.090 --> 00:29:11.980
get just random other stuff embedded
in your bundle if you need it to be.

00:29:12.420 --> 00:29:16.600
So first of all, Project Builder has full
support for building bundles.

00:29:16.690 --> 00:29:20.880
Applications, frameworks,
and bundle targets all

00:29:20.880 --> 00:29:23.300
produce bundles in the end.

00:29:23.420 --> 00:29:28.290
Bundle targets is what
you would use to build,

00:29:28.290 --> 00:29:28.290
say, a plug-in.

00:29:29.510 --> 00:29:33.400
We're going to automatically construct
the bundle as part of the build process.

00:29:33.400 --> 00:29:35.100
So you don't have to
configure that at all.

00:29:35.100 --> 00:29:38.100
If you have an application
framework or bundle target,

00:29:38.210 --> 00:29:41.810
we're going to produce
the full bundle for you.

00:29:42.220 --> 00:29:44.740
And the build system knows
where all the pieces go.

00:29:44.740 --> 00:29:46.640
And for any pieces that
you have that are custom,

00:29:46.640 --> 00:29:49.010
you can tell us where to put them.

00:29:50.180 --> 00:29:54.600
Now, the Info.plist is an XML file
that each bundle has,

00:29:54.640 --> 00:29:59.340
which declares various things that are
needed by different pieces of the system.

00:29:59.340 --> 00:30:04.800
So CFBundle, which is the core foundation
facility for dealing with bundles,

00:30:04.800 --> 00:30:06.800
uses a lot of keys in the bundle.

00:30:06.800 --> 00:30:10.270
For instance,
the executable name of the actual

00:30:10.270 --> 00:30:15.740
binary that is inside your bundle that
is the app that's supposed to be run,

00:30:15.740 --> 00:30:17.990
that's declared in the Info.plist.

00:30:19.380 --> 00:30:22.960
The finder also declares various
things that it wants to find in your

00:30:22.960 --> 00:30:27.570
Info.plist to do things like associate
documents with your application,

00:30:27.570 --> 00:30:30.940
to figure out what icon to
show for your application,

00:30:31.030 --> 00:30:32.000
and so forth.

00:30:32.060 --> 00:30:37.650
And Project Builder allows you to
manage your Info.plist completely.

00:30:37.660 --> 00:30:41.520
And we provide some custom UI for all
the common stuff that you want to do.

00:30:41.520 --> 00:30:42.930
We'll show that a little bit.

00:30:42.960 --> 00:30:48.080
And we also provide an arbitrary plist
editor if you have custom content that

00:30:48.080 --> 00:30:52.420
you need to put in your plist that
you'll use if we've forgotten something.

00:30:52.420 --> 00:30:56.400
And in the custom UI,
you can do it in the expert UI.

00:30:59.790 --> 00:31:01.700
So, okay, resources.

00:31:01.700 --> 00:31:06.700
There's two kinds of resources.

00:31:06.700 --> 00:31:08.410
The term is a little bit overloaded.

00:31:08.440 --> 00:31:11.820
Bundle resources are just files
that go inside your bundle,

00:31:11.820 --> 00:31:15.970
and resource manager resources are the
resources that you typically find in the

00:31:15.980 --> 00:31:19.080
resource fork of a Mac OS application.

00:31:20.080 --> 00:31:24.780
Both of these types of resources in
Mac OS X can be global or localizable.

00:31:24.780 --> 00:31:29.110
When they're localizable,
you have multiple versions for different

00:31:29.110 --> 00:31:31.860
languages that you're going to support.

00:31:31.860 --> 00:31:35.340
They can also be platform-specific.

00:31:35.340 --> 00:31:40.760
So if you need to have a slightly
different version of a resource for

00:31:40.760 --> 00:31:46.880
your Mac OS 9 Carbon application and
your Mac OS X Carbon application,

00:31:46.880 --> 00:31:49.320
you can still package those
all in the same bundle.

00:31:49.320 --> 00:31:49.760
And the current version of
the resource is going to be

00:31:49.760 --> 00:31:50.060
the same as the previous one.

00:31:50.060 --> 00:31:54.290
will be used depending on which
platform the app is running on.

00:31:55.100 --> 00:31:59.520
Now, Project Builder also helps you to
make sure that the bundles that you're

00:31:59.520 --> 00:32:02.160
building satisfy the requirements.

00:32:02.260 --> 00:32:07.740
And the main requirements are
that for a localizable resource,

00:32:07.790 --> 00:32:12.020
you must have a version for
your development region.

00:32:12.270 --> 00:32:14.560
Your project is going to
have a development region,

00:32:14.560 --> 00:32:17.020
so by default that's English,
but if you choose to develop

00:32:17.100 --> 00:32:19.840
your primary interface in
French or in Japanese or whatever,

00:32:19.840 --> 00:32:21.920
you can do that.

00:32:22.300 --> 00:32:25.030
The bundle knows what its
development region is.

00:32:25.030 --> 00:32:27.900
Project Builder knows what
the development region is.

00:32:27.900 --> 00:32:30.630
And it's going to make sure that,
at the very least,

00:32:30.790 --> 00:32:33.180
you have a version of each resource
for the development region.

00:32:33.180 --> 00:32:37.060
And then you can have versions
for all the other regions as well.

00:32:37.060 --> 00:32:40.980
And then finally, if you're going to have
platform-specific resources,

00:32:41.060 --> 00:32:43.730
you also must have a
platform-generic resource.

00:32:43.770 --> 00:32:47.020
And that's just in case you find
yourself running on a platform

00:32:47.020 --> 00:32:50.590
that you did not anticipate,
there'll be a version to use.

00:32:53.750 --> 00:32:57.660
Okay, and then finally, we'll cover,
like I said, other bundle content.

00:32:57.780 --> 00:33:00.780
You can use copy files build phases,
as has been mentioned before,

00:33:00.780 --> 00:33:03.050
to copy stuff into your bundle.

00:33:03.170 --> 00:33:06.710
Tools can be put into the executables
directory of your bundle if your

00:33:06.710 --> 00:33:09.880
app needs to make use of some
command line tool in some cases.

00:33:10.200 --> 00:33:12.570
You can put frameworks inside the bundle.

00:33:12.620 --> 00:33:16.730
You can put other support files,
whatever you want to put in there.

00:33:18.160 --> 00:33:19.870
All right,
now I'm going to invite Anders back

00:33:19.890 --> 00:33:22.580
up to do some of this demoing.

00:33:22.740 --> 00:33:26.200
So the first thing we're going to do,
because of course, Aqua,

00:33:26.200 --> 00:33:28.100
you have to have an icon for Aqua.

00:33:28.100 --> 00:33:31.220
So let's add an icon to simple text.

00:33:31.500 --> 00:33:36.520
Now, the CodeWarrior project did not have
the ICNS file as part of the project,

00:33:36.520 --> 00:33:38.660
so it didn't import when we
imported that CodeWarrior project,

00:33:38.680 --> 00:33:41.420
but I happen to know that
there is an ICNS file here.

00:33:41.530 --> 00:33:49.000
So Anders is going to actually go and
add that ICNS file to the project.

00:33:49.000 --> 00:33:55.750
And we'll go ahead and let it get
added to the simple text target.

00:33:57.650 --> 00:33:59.100
And OK, you see it appear there.

00:33:59.100 --> 00:34:04.190
And if we actually go to the
target editor for simple text,

00:34:06.610 --> 00:34:09.690
You'll see that it also appeared
in the bundle resources phase.

00:34:09.950 --> 00:34:13.340
In Mac OS X, icons are just files that
go inside the bundle.

00:34:13.340 --> 00:34:16.170
They're stored in the ICNS format,
but they're just separate files

00:34:16.260 --> 00:34:18.920
that sit inside the resources
directory of your bundle.

00:34:19.070 --> 00:34:23.530
So Project Builder knew to put that
file into the bundle resources phase

00:34:23.820 --> 00:34:26.380
so that it'll be copied when you build.

00:34:26.470 --> 00:34:30.760
Now the other thing, though,
is that we have to tell the info.p list

00:34:30.870 --> 00:34:34.550
about our icons so that Finder will know
that it's supposed to display it for us.

00:34:34.630 --> 00:34:37.690
Now we do that in the application
settings tab of the target.

00:34:37.760 --> 00:34:41.280
And you can see that there's
a bunch of text fields here.

00:34:41.280 --> 00:34:45.920
Anders will enter the icon
name in the icon field.

00:34:46.300 --> 00:34:49.300
And then while we're here,
maybe we can set a few other things.

00:34:49.300 --> 00:34:53.080
We should probably have a creator
code other than for question marks,

00:34:53.080 --> 00:34:54.940
so let's do that.

00:34:55.020 --> 00:34:59.130
And it's a good idea for bundles to
have an identifier string as well.

00:34:59.310 --> 00:35:02.760
Bundle identifiers are
useful for integrating with

00:35:02.870 --> 00:35:04.380
the CFPreferences facility.

00:35:04.380 --> 00:35:09.980
They're also useful for locating the
core foundation bundle instance at

00:35:09.980 --> 00:35:14.520
runtime for your application or for your
framework or for your loadable bundle.

00:35:15.540 --> 00:35:19.310
Okay, and by the way,
we recommend Java package naming

00:35:19.310 --> 00:35:25.210
conventions for the identifiers
just to ensure that uniqueness.

00:35:25.780 --> 00:35:30.190
Now, we have settings for a bunch
of stuff in the custom UI here,

00:35:30.190 --> 00:35:32.520
but there's more stuff,
and we'll be adding more

00:35:32.740 --> 00:35:35.440
custom UI in the future,
but we also have this expert mode.

00:35:35.440 --> 00:35:39.360
And this just shows you
the raw property list.

00:35:39.380 --> 00:35:42.670
You can edit stuff there arbitrarily
if you have custom content that

00:35:42.670 --> 00:35:45.620
you want to put in your plist,
because maybe your program

00:35:45.620 --> 00:35:48.360
wants to access it at runtime,
you can do that there.

00:35:48.360 --> 00:35:50.810
You'll notice that the things
that we changed in the custom

00:35:50.810 --> 00:35:52.240
UI have already showed up here.

00:35:53.140 --> 00:35:55.840
Now, we won't bother with any
other plist settings now,

00:35:55.840 --> 00:35:57.250
though.

00:35:58.720 --> 00:36:04.570
So let's move on to resources
and in particular localization.

00:36:04.890 --> 00:36:09.240
Now, Anders is going to go ahead and go
find all the rest of the .R files,

00:36:09.240 --> 00:36:11.150
because actually in
the CodeWarrio project,

00:36:11.150 --> 00:36:13.400
the only one that was part
of the project is main.R,

00:36:13.400 --> 00:36:15.880
because it just imports
all the other ones.

00:36:15.880 --> 00:36:17.320
But because we want to
do some localization,

00:36:17.320 --> 00:36:21.190
we'll go ahead and add all the
other .R files to the project,

00:36:21.220 --> 00:36:23.760
just so we have them to work with.

00:36:23.760 --> 00:36:28.390
So Anders is finding all those,
and we'll add them.

00:36:29.020 --> 00:36:34.080
Now we won't add them to any target
because the main.R is already part

00:36:34.080 --> 00:36:38.780
of our resource manager build phase,
and it just imports all the other ones.

00:36:38.810 --> 00:36:40.850
So we're not gonna bother with
adding them to the target,

00:36:40.900 --> 00:36:43.020
but now they're part of our project.

00:36:43.050 --> 00:36:47.490
There's one in particular, localized.R,
that happens to contain all of the

00:36:47.490 --> 00:36:51.820
strings that need to be localized
in simple text interfaced.

00:36:52.010 --> 00:36:55.860
So that's the one that we wanna
make a localized version of.

00:36:55.860 --> 00:37:00.100
And to do that,
we'll use the project inspector.

00:37:01.150 --> 00:37:04.510
And you can see there's a pulldown
called localization and platform.

00:37:04.560 --> 00:37:08.330
And all we need to do is say,
make this a localized resource.

00:37:08.810 --> 00:37:12.000
You'll notice that a disclosure
triangle appeared next to it,

00:37:12.000 --> 00:37:15.540
and if we disclose that,
you can see that there's basically

00:37:15.540 --> 00:37:19.630
a list of the various versions
that we have of this resource.

00:37:19.830 --> 00:37:23.060
When we first make it localized,
you're only going to have a version

00:37:23.060 --> 00:37:24.710
for your development region.

00:37:24.810 --> 00:37:28.090
But the whole point of this is
we want to localize the thing,

00:37:28.090 --> 00:37:32.760
so let's make another variant for, say,
Japanese.

00:37:34.530 --> 00:37:36.840
Now notice that it added
another line there.

00:37:36.840 --> 00:37:39.020
So we have English and Japanese now.

00:37:39.050 --> 00:37:42.470
The English version, or sorry,
the Japanese version starts out as

00:37:42.540 --> 00:37:46.000
just a copy of the English version,
but it's a separate copy.

00:37:46.000 --> 00:37:48.250
So now you can go in and
edit the Japanese version to

00:37:48.290 --> 00:37:49.770
translate it into Japanese.

00:37:49.800 --> 00:37:54.420
And the Project Builder build
system takes care of all of this.

00:37:54.540 --> 00:37:58.160
So it knows where the global resources
are supposed to go and the localized

00:37:58.160 --> 00:37:59.720
resources are supposed to go.

00:37:59.800 --> 00:38:01.600
It compiles them all separately.

00:38:01.600 --> 00:38:06.800
It puts them in the right places
and everything will be automatic.

00:38:06.800 --> 00:38:12.380
So that's just a taste of
the localization support.

00:38:13.220 --> 00:38:16.040
And finally,
let's just show one more thing,

00:38:16.040 --> 00:38:21.810
which is let's say that Simple Text had
a command line tool that it wanted

00:38:21.810 --> 00:38:23.340
to run in some circumstances.

00:38:23.340 --> 00:38:25.200
Of course,
it wouldn't show it to the user at all,

00:38:25.200 --> 00:38:28.760
but it would maybe use it in
the background to do some stuff.

00:38:28.840 --> 00:38:33.080
And you would like to have that command
line tool be part of Simple Text.

00:38:33.180 --> 00:38:36.710
So let's go ahead and
create a new target.

00:38:38.310 --> 00:38:45.340
and it will be a tool target that
we'll just call My Helper Tool.

00:38:49.620 --> 00:38:52.350
So now we have this new target,
and if you open it up,

00:38:52.350 --> 00:38:54.380
we can see that it doesn't
actually have any files in it,

00:38:54.380 --> 00:38:56.220
and we're not actually
going to build a tool now.

00:38:56.220 --> 00:39:00.240
But this would-- if we filled in
some source files to be compiled,

00:39:00.240 --> 00:39:02.810
this would build us a command line tool.

00:39:03.070 --> 00:39:07.700
Now, we want to set up a dependency
because for us to build simple

00:39:07.700 --> 00:39:09.660
text and have it be complete,
we also have to build

00:39:09.670 --> 00:39:10.700
this command line tool.

00:39:10.700 --> 00:39:13.520
So Anders will just set up the
target dependency to make sure

00:39:13.520 --> 00:39:18.000
that the helper tool builds
whenever we build simple text.

00:39:18.090 --> 00:39:21.300
And if we switch back to the files tab,

00:39:21.480 --> 00:39:25.240
When we added the tool
target in the products group,

00:39:25.240 --> 00:39:28.540
which is sort of an automatically
managed group of the project,

00:39:28.610 --> 00:39:31.830
you'll see that a line was
added for the helper tool.

00:39:31.840 --> 00:39:35.880
This line refers to the actual
tool that will be produced.

00:39:35.880 --> 00:39:38.120
It shows up in red because
we haven't built it yet,

00:39:38.170 --> 00:39:41.750
so it doesn't actually exist on the disk,
but the reference is there

00:39:41.750 --> 00:39:43.320
and we can make use of it.

00:39:43.520 --> 00:39:46.930
So we'll go back to
the simple text target,

00:39:47.610 --> 00:39:52.260
And we're going to create another
one of these copy files build phases.

00:39:52.350 --> 00:39:54.590
Now we can't use the one we did
before because this one is going

00:39:54.590 --> 00:39:56.100
to copy stuff to a different place.

00:39:56.100 --> 00:39:57.480
So we'll just do a separate one.

00:39:57.500 --> 00:40:01.500
And we did an absolute path one before.

00:40:01.500 --> 00:40:05.240
This time what we want is for
the tool to be installed into the

00:40:05.240 --> 00:40:07.490
executables area of the bundle.

00:40:07.500 --> 00:40:09.490
So we just choose executables.

00:40:09.490 --> 00:40:13.060
If you wanted it to be nested
underneath the executables somewhere,

00:40:13.060 --> 00:40:16.480
you could use that subpath field,
but we don't want to do that.

00:40:16.500 --> 00:40:20.890
We also don't want to do the only one
installing because this tool should be

00:40:20.990 --> 00:40:23.490
part of the thing whenever we build it.

00:40:23.500 --> 00:40:26.400
And finally, we have to tell it what
it's going to copy.

00:40:26.500 --> 00:40:29.470
So we just drag in the reference
for the helper tool there.

00:40:29.500 --> 00:40:33.310
And now, whenever we build Simple Text,
it'll first build that tool and

00:40:33.310 --> 00:40:36.650
then make sure that tool gets
installed into the executables of

00:40:37.090 --> 00:40:42.410
the Simple Text app package so that
Simple Text can find it at runtime.

00:40:43.090 --> 00:40:46.100
Now, this is just sort of a taste of
the degree to which we've tried to

00:40:46.160 --> 00:40:51.640
integrate the bundle packaging scheme
into Project Builder's basic model.

00:40:51.720 --> 00:40:56.150
And we can--there'll be some more
detail on some of this in the

00:40:56.150 --> 00:41:02.240
Mac OS X localization session,
especially as it applies to localizing

00:41:02.240 --> 00:41:05.330
Carbon and Cocoa applications.

00:41:05.570 --> 00:41:09.480
For now, I want to invite John back
up here one last time.

00:41:09.480 --> 00:41:11.180
And he's going to sum
some of this up for us.

00:41:11.280 --> 00:41:13.250
And then we'll do some Q&A.

00:41:13.370 --> 00:41:16.960
So what we talked about today is just
the first step in using Project Builder.

00:41:16.960 --> 00:41:21.260
There's a lot of other stuff
that we could have covered today.

00:41:21.360 --> 00:41:26.170
But we'll leave that for
now for you to explore.

00:41:27.480 --> 00:41:30.940
Again, you can take any one of these
three variants of a project,

00:41:30.940 --> 00:41:35.820
pull it into Project Builder,
use the app then to customize

00:41:35.820 --> 00:41:37.310
it however you want.

00:41:37.980 --> 00:41:40.960
And then finally,
produce one of the Mac OS X bundles,

00:41:40.960 --> 00:41:46.600
an app, a framework,
or a kernel-loadable module.

00:41:46.740 --> 00:41:51.320
So there's some support resources,
public emailing list if you

00:41:51.320 --> 00:41:54.150
have some feedback for us.

00:41:54.160 --> 00:41:59.860
And the feedback alias is
Mac OS Tools Feedback@group.apple.com.

00:41:59.940 --> 00:42:02.860
And we also have the
fee-based support with DTS.