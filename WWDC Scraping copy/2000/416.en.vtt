WEBVTT

00:00:12.800 --> 00:00:13.790
My name is Kelly Kazem.

00:00:13.800 --> 00:00:19.610
I'd like to welcome you this morning
to Designing Reusable Components.

00:00:20.300 --> 00:00:23.350
I'll have to get used to this thing.

00:00:23.540 --> 00:00:27.200
How many people here are currently
building WebObjects applications?

00:00:27.200 --> 00:00:30.200
Wow, that's cool.

00:00:30.200 --> 00:00:35.210
This session was really designed for you
to give you some practical techniques

00:00:35.300 --> 00:00:38.160
and ideas for better leveraging
the power of reusable components.

00:00:38.240 --> 00:00:45.640
How many people here are using Java as
their primary development language?

00:00:45.640 --> 00:00:48.670
How about Objective C?

00:00:49.600 --> 00:00:51.500
Any web script?

00:00:51.550 --> 00:00:52.460
A few?

00:00:52.550 --> 00:00:52.780
Okay.

00:00:53.120 --> 00:00:56.260
Well, all the examples that we're
going to go through in this

00:00:56.260 --> 00:00:59.390
session are based on Java,
but for those of you that

00:00:59.390 --> 00:01:02.140
are Objective-C programmers,
I want to make sure that you understand

00:01:02.140 --> 00:01:06.060
that everything we talk about is
applicable to all of the programming

00:01:06.060 --> 00:01:08.370
languages that we're going to talk about.

00:01:10.110 --> 00:01:12.850
The topics we're going to go through,
we're going to start with a

00:01:12.850 --> 00:01:16.680
basic architecture overview,
talk about how you take

00:01:16.680 --> 00:01:19.000
reusable components and
package them in the frameworks,

00:01:19.550 --> 00:01:25.180
show you how to put those on palettes,
talk about component

00:01:25.230 --> 00:01:28.760
synchronization in depth,
some state ideas for managing

00:01:29.150 --> 00:01:33.970
state between components,
a cool demo on dynamic

00:01:33.970 --> 00:01:37.000
reusable components,
low component content.

00:01:37.210 --> 00:01:42.190
Then we're going to finish up with some
performance debugging and design ideas.

00:01:43.580 --> 00:01:45.220
So to start this thing off,
we're going to do kind of

00:01:45.220 --> 00:01:46.200
the three amigos thing.

00:01:46.200 --> 00:01:50.300
It's going to be myself and two of
my associates doing the presentation,

00:01:50.300 --> 00:01:52.790
starting with Scott Sweet,
who's going to go into reusable

00:01:52.870 --> 00:01:58.320
component architecture and show you how
to put your components on the palettes

00:01:58.380 --> 00:02:01.290
and create frameworks out of them.

00:02:01.290 --> 00:02:01.290
Scott?

00:02:03.250 --> 00:02:04.200
Thank you.

00:02:04.200 --> 00:02:08.030
It's interesting because I just
came from Louisiana and with

00:02:08.030 --> 00:02:11.450
everybody here from international,
I was there for about a week

00:02:11.530 --> 00:02:14.610
and a half and I started talking
really funny because I started

00:02:14.610 --> 00:02:16.450
sounding like them from Louisiana.

00:02:16.640 --> 00:02:21.200
And then I come here and everybody's
international in our engineering group.

00:02:21.200 --> 00:02:24.890
So if you can imagine all the different
languages and people talking different

00:02:24.890 --> 00:02:27.700
languages all in one sentence,
it would be rather interesting.

00:02:27.700 --> 00:02:28.400
I can't do it.

00:02:28.400 --> 00:02:29.090
I'm not going to try.

00:02:29.200 --> 00:02:32.160
But anyways, with that,
one of the things about reusable

00:02:32.160 --> 00:02:34.880
components and many of you
probably are aware of it.

00:02:34.880 --> 00:02:37.200
First, most important is reusability.

00:02:37.200 --> 00:02:38.170
Obviously, that's the whole point.

00:02:38.240 --> 00:02:42.840
But one of the things to think about
is your ability to organize those

00:02:43.280 --> 00:02:48.320
components not only within an application
but across multiple applications,

00:02:48.320 --> 00:02:50.200
across an enterprise.

00:02:50.200 --> 00:02:52.200
And these are one of
the beautiful things.

00:02:52.200 --> 00:02:55.700
And as you go through the session today,
you're going to learn some bits and

00:02:55.810 --> 00:02:59.200
bytes about the advantages and how
to make sure you use design issues.

00:02:59.210 --> 00:03:00.150
Along those things.

00:03:00.210 --> 00:03:04.200
The other thing that's really
good is rapid development.

00:03:04.200 --> 00:03:08.200
I'm going to go through an example and
build some really simple components.

00:03:08.200 --> 00:03:11.490
But the idea here is once you
create a group of components,

00:03:11.490 --> 00:03:14.560
frameworks of components,
now when you start creating

00:03:14.710 --> 00:03:17.200
very complex applications,
say like a login screen

00:03:17.200 --> 00:03:20.090
and these kinds of things,
you can put a lot of

00:03:20.190 --> 00:03:24.090
functionality into those,
just drag that into your application and

00:03:24.170 --> 00:03:28.190
not have to spend a lot of time coding,
debugging, testing, etc.

00:03:29.700 --> 00:03:31.700
So let's talk about the architecture.

00:03:31.700 --> 00:03:36.170
One of the things that's important
to understand about a component

00:03:36.790 --> 00:03:40.610
is it can be a piece of a page
or it can be the entire page.

00:03:40.720 --> 00:03:43.930
So if we look on the right hand side,
I'm showing the parent

00:03:44.070 --> 00:03:47.560
component as being a full page,
but inside of that we have things like

00:03:47.640 --> 00:03:49.700
header components and footer components.

00:03:49.700 --> 00:03:54.920
And keep in mind, our original baseline
element is dynamic elements,

00:03:54.920 --> 00:03:55.700
right?

00:03:55.700 --> 00:03:58.430
And so with reusable components,
what we're doing is taking

00:03:58.850 --> 00:04:00.860
these dynamic elements,
grouping them together,

00:04:00.860 --> 00:04:03.680
and creating complex functionality.

00:04:03.700 --> 00:04:05.720
So the header and the footer,
for example,

00:04:05.720 --> 00:04:08.930
would be things like menu bar and
background color and your time and your

00:04:09.030 --> 00:04:13.040
date and all those kinds of things that
might be common across a lot of your

00:04:13.120 --> 00:04:15.700
single application or your enterprise.

00:04:15.810 --> 00:04:18.270
But then inside of that query component
is where you're going to get a lot

00:04:18.310 --> 00:04:19.680
of different kinds of elements.

00:04:19.700 --> 00:04:22.990
So you're going to get a lot of
different kinds of things that may

00:04:23.080 --> 00:04:26.330
be used across your application or
specific to a particular developer

00:04:26.740 --> 00:04:28.690
and what they're using them for.

00:04:30.030 --> 00:04:32.660
So the next question is,
what's the process?

00:04:32.730 --> 00:04:34.200
How do you do this?

00:04:34.210 --> 00:04:36.000
And the first thing and
most important thing,

00:04:36.000 --> 00:04:39.590
this is really very important,
build and test your component

00:04:39.590 --> 00:04:40.980
in your application.

00:04:41.090 --> 00:04:44.590
Don't start with the component,
put all these components

00:04:44.670 --> 00:04:46.550
into your application,
you have all these bugs,

00:04:46.550 --> 00:04:49.150
and now you've got to figure
out where it's coming from.

00:04:49.430 --> 00:04:51.840
So start in the application, build it,
test it,

00:04:51.840 --> 00:04:56.420
make sure that it actually works,
and then move it into a

00:04:56.420 --> 00:04:58.950
component environment.

00:04:59.390 --> 00:05:02.070
So then you make it a reusable component.

00:05:02.120 --> 00:05:03.090
Again, test it again.

00:05:03.090 --> 00:05:06.860
Make sure you build a little simple app,
bring that component in, wire it up,

00:05:06.900 --> 00:05:09.390
make sure it actually
works as a component,

00:05:09.390 --> 00:05:11.290
and I will do that in the
demo in a few minutes.

00:05:12.630 --> 00:05:15.940
Finally, put this into a framework.

00:05:16.290 --> 00:05:18.300
This is where you're going
to really get your power,

00:05:18.300 --> 00:05:22.490
because now what happens is you'll
have a framework with lots of objects,

00:05:22.600 --> 00:05:26.040
and these reusable components
now in that framework can be

00:05:26.040 --> 00:05:27.300
shared among all the developers.

00:05:27.300 --> 00:05:29.390
Either among your
friends or what have you,

00:05:29.430 --> 00:05:31.300
across your application and so on.

00:05:31.300 --> 00:05:35.100
The next step would be to palletize them.

00:05:35.250 --> 00:05:37.240
Now with the palletizing,
there's a couple advantages here.

00:05:37.330 --> 00:05:41.470
Palletizing your components.

00:05:41.700 --> 00:06:05.400
[Transcript missing]

00:06:06.070 --> 00:06:09.370
and then finally you're going to go
across multiple applications and this

00:06:09.370 --> 00:06:12.760
is an iterative process clearly you're
not going to do this just only once as

00:06:12.760 --> 00:06:17.480
you build your application you're going
to find places of reuse break them out

00:06:17.480 --> 00:06:19.410
as a component put it into a framework

00:06:21.770 --> 00:06:24.570
So once you have,
this is giving you an idea

00:06:24.640 --> 00:06:28.620
here of a reusable component,
the top three parts should look

00:06:28.620 --> 00:06:31.700
really familiar to you since you've
been through several sessions here.

00:06:31.700 --> 00:06:35.470
The one thing that's different about a
reusable component is the very bottom,

00:06:35.470 --> 00:06:36.700
which is the API file.

00:06:36.700 --> 00:06:41.820
And this is how you actually expose
a particular object or a particular

00:06:41.930 --> 00:06:45.810
variable to the outside world that
you're going to use for binding,

00:06:45.810 --> 00:06:48.190
and we're going to look
at that a little later.

00:06:49.600 --> 00:06:56.220
One of the very important things about
the components is your synchronization.

00:06:56.350 --> 00:06:58.440
Kelly is going to spend a
great deal of time about this,

00:06:58.510 --> 00:07:01.740
but one of the things that is important
is that WebObjects is automatically

00:07:01.740 --> 00:07:04.440
synchronizing your parent to your child.

00:07:04.500 --> 00:07:07.320
So when you're using a
component at the child level,

00:07:07.320 --> 00:07:09.950
under the covers,
WebObjects is automatically

00:07:09.950 --> 00:07:11.500
taking care of that for you.

00:07:11.670 --> 00:07:14.360
And Kelly is going to get into a
lot of detail of actually some of

00:07:14.530 --> 00:07:17.670
the advantages and disadvantages
of automatic synchronization as

00:07:17.670 --> 00:07:19.390
well as manual synchronization.

00:07:21.130 --> 00:07:25.980
Here's some code here just to
give you an idea of communicating

00:07:26.020 --> 00:07:26.990
back up to the parent.

00:07:27.030 --> 00:07:31.080
One of the things that's neat
about WebObjects is our ability to

00:07:31.080 --> 00:07:38.950
get your information at the child
level via the parent rather than

00:07:38.950 --> 00:07:38.950
actually having to have an instance
variable at the child level.

00:07:41.270 --> 00:07:43.160
Again, parent-child communication here.

00:07:43.250 --> 00:07:45.440
This is the way you would
actually traverse that and be

00:07:45.450 --> 00:07:47.850
able to get that information.

00:07:50.300 --> 00:07:53.960
Okay, so let's go ahead and ship to,
switch to machine three,

00:07:53.960 --> 00:07:55.300
my Windows machine.

00:07:55.350 --> 00:08:00.920
What I'm going to do is real quickly
create a very basic application.

00:08:02.730 --> 00:08:05.050
Now one of the first things that
I want to do here is I've got a

00:08:05.050 --> 00:08:07.750
data mile settling over here and I'm
just going to go ahead and add that.

00:08:07.950 --> 00:08:09.550
You guys probably know
how to do that already.

00:08:09.630 --> 00:08:13.030
We've seen that through several
of the sessions already.

00:08:19.100 --> 00:08:21.600
Okay, so I have my data model.

00:08:21.600 --> 00:08:24.100
I want to do this real simple,
quick stuff.

00:08:24.260 --> 00:08:25.730
Let's go ahead and create a form.

00:08:25.810 --> 00:08:29.020
Inside that form, let's go ahead and
create a little text box.

00:08:29.180 --> 00:08:31.100
Let's go ahead and add
a submit button there.

00:08:31.100 --> 00:08:35.470
Next thing I want to do is go
ahead and add a display group.

00:08:43.900 --> 00:08:49.600
Let's go ahead and take that display
group and wire it up to my entity.

00:08:49.600 --> 00:08:53.140
And now what I'm going to do is go
ahead and wire up my display group up to

00:08:53.140 --> 00:08:55.270
these two objects that I have up there.

00:08:55.300 --> 00:08:59.210
So the first one I want to do is
I'm going to do a search screen,

00:08:59.210 --> 00:09:02.160
and I'm going to search on company name.

00:09:03.070 --> 00:09:05.660
And the second thing I'm going
to go ahead and do is take my

00:09:05.660 --> 00:09:10.990
submit button and I'm going to put
that on my qualified data source.

00:09:12.350 --> 00:09:14.300
Alright, so I have my search screen now.

00:09:14.450 --> 00:09:17.950
Next thing I want to do is go ahead
and bring in a reusable component

00:09:17.950 --> 00:09:22.300
that we give you out of the box,
which is the direct-to-web stuff.

00:09:22.390 --> 00:09:24.530
So let's go ahead and add that in there.

00:09:24.540 --> 00:09:28.490
We're going to go ahead and wire this up.

00:09:34.350 --> 00:09:37.840
And what I'm interested in looking
at in the display group is an

00:09:37.840 --> 00:09:43.400
attribute called Company Name.

00:09:43.420 --> 00:09:46.390
And I'm going to go ahead and define

00:09:51.720 --> 00:09:52.700
save that.

00:09:52.930 --> 00:09:54.740
Okay, so let's just go ahead
and start with this.

00:09:54.740 --> 00:09:57.330
We're gonna go ahead and compile.

00:09:57.340 --> 00:10:00.180
So while we're doing that,
one of the things is that--one that you

00:10:00.370 --> 00:10:04.770
wanna check out is we gave you a lot of
reusable components right out of the box.

00:10:04.860 --> 00:10:08.240
I didn't go through all the
palettes up here but those of

00:10:08.240 --> 00:10:12.660
you who are new to WebObjects,
in version 4.5, we've added a lot of new

00:10:12.840 --> 00:10:14.540
stuff in the WoE extensions.

00:10:14.540 --> 00:10:17.630
Also the JavaScript stuff
that I know that you folks

00:10:17.700 --> 00:10:19.860
saw--I think it was yesterday.

00:10:19.860 --> 00:10:20.380
So check it out.

00:10:20.480 --> 00:10:22.350
Go in there,
go into the examples and see what's

00:10:22.450 --> 00:10:25.520
in there so you get an idea of some of
the things that we're actually giving

00:10:25.520 --> 00:10:27.970
you right out of the box so you don't
go off and build them on your own.

00:10:30.540 --> 00:10:33.060
Okay, so we're going to bring
up the application now.

00:10:33.180 --> 00:10:35.460
Really simple,
it's nothing really advanced.

00:10:35.460 --> 00:10:37.100
Basically, I have a search screen.

00:10:37.150 --> 00:10:39.140
It's accessing my database.

00:10:39.160 --> 00:10:41.930
The direct-to-web component
is going to display those

00:10:41.930 --> 00:10:44.380
values for me on the screen.

00:10:48.230 --> 00:10:51.760
Okay, so just to see here,
I'm going to go ahead and do a query

00:10:51.890 --> 00:10:53.200
to see that it's working properly.

00:10:53.320 --> 00:10:55.100
Okay, so we've got our basic app.

00:10:55.280 --> 00:10:59.090
Now what I want to do is turn that
search screen into a reusable component.

00:10:59.130 --> 00:11:01.100
So that's going to be my second step.

00:11:01.150 --> 00:11:04.120
So I'm going to go ahead
into my application here.

00:11:04.180 --> 00:11:08.190
I'm going to call this
thing Simple Search.

00:11:12.650 --> 00:11:14.490
I'm going to go ahead and open this up.

00:11:14.490 --> 00:11:16.420
First step,
one of the most important things in

00:11:16.420 --> 00:11:21.870
doing this is make sure you create
this component as a partial document.

00:11:22.130 --> 00:11:25.030
This gets rid of the body
tags and the head tags.

00:11:25.110 --> 00:11:28.370
And the idea here is when a component,
you've got to think about what am

00:11:28.370 --> 00:11:31.100
I dragging this into on my HTML page.

00:11:31.100 --> 00:11:33.100
And typically those
tags are already there.

00:11:33.100 --> 00:11:37.330
So making it a partial document
will take care of that.

00:11:38.690 --> 00:11:40.530
Second thing is,
I'm just going to go ahead and

00:11:40.800 --> 00:11:43.720
take this from my original.

00:11:43.730 --> 00:11:45.700
Let's go ahead and get rid of it there.

00:11:45.760 --> 00:11:48.190
Put it in my new component.

00:11:48.940 --> 00:11:52.000
Now one of the things I'm going to
do is here I notice I have my display

00:11:52.000 --> 00:11:53.800
group is specific to the application.

00:11:53.800 --> 00:11:55.800
Well I want to make a generic one.

00:11:55.800 --> 00:12:00.310
Let's just call it MyDG.

00:12:04.850 --> 00:12:11.540
And now I'm going to go ahead and
modify each of these bindings to

00:12:11.560 --> 00:12:14.610
be specific to this display group.

00:12:23.820 --> 00:12:26.700
So that's the second step.

00:12:26.790 --> 00:12:28.700
So I've got this bound
up to my component.

00:12:28.700 --> 00:12:34.030
Now the third step is exposing what I'm
interested in for binding purposes when

00:12:34.030 --> 00:12:36.550
I include this into another component.

00:12:36.700 --> 00:12:40.740
So the API editor is something
that's new in version 4.5.

00:12:40.990 --> 00:12:45.100
And one of the things that's really
cool here is it just brings up all

00:12:45.230 --> 00:12:49.700
the different variables you'd see
down here up into the API editor.

00:12:49.700 --> 00:12:53.700
So I'm going to go ahead and
make my display group required.

00:12:53.830 --> 00:12:56.290
If I go click on the validation tag,
one of the things that's real

00:12:56.410 --> 00:13:00.570
interesting is you can go in here and
make business rules that are going

00:13:00.620 --> 00:13:03.050
to be associated with validation.

00:13:03.290 --> 00:13:05.860
and then we click on the display
here what I want to do is go ahead

00:13:05.870 --> 00:13:09.450
and put a icon what I want to use
when I actually use this component

00:13:14.750 --> 00:13:16.460
Let's go ahead and save that.

00:13:16.530 --> 00:13:19.940
Okay, finally now what I want to do is
take that reusable component and

00:13:19.940 --> 00:13:23.590
put it into my first application.

00:13:30.850 --> 00:13:34.000
And we see here right away that
that component is already appearing.

00:13:34.200 --> 00:13:36.050
We'll go ahead and add that.

00:13:36.150 --> 00:13:37.860
Let's go ahead and wire that up.

00:13:37.980 --> 00:13:41.740
This is the binding that
I exposed with the API editor.

00:13:43.450 --> 00:13:48.200
And let's go ahead and rebuild our app.

00:13:48.260 --> 00:13:52.100
I do need to recompile because
I added a new component.

00:13:52.170 --> 00:13:54.700
I also added the new display group.

00:13:54.810 --> 00:13:58.110
So I will have to
actually recompile this.

00:14:00.050 --> 00:14:03.660
And now we have the same
exact application now using

00:14:03.780 --> 00:14:05.240
my reusable component.

00:14:07.320 --> 00:14:10.300
Okay, let's go back to the display now.

00:14:10.300 --> 00:14:14.300
Our presentation.

00:14:14.300 --> 00:14:14.300
Thank you.

00:14:15.320 --> 00:14:19.550
Okay, so the next step is how do
I set this up so that I can

00:14:19.550 --> 00:14:21.160
actually do reusability with it.

00:14:21.310 --> 00:14:25.200
So what we want to do is we've gone
through the step of actually debugging

00:14:25.220 --> 00:14:27.340
these at the application level.

00:14:27.440 --> 00:14:29.200
We're now going to put
it into a framework.

00:14:29.200 --> 00:14:31.200
We're going to do that
in a couple of minutes.

00:14:31.200 --> 00:14:34.340
One of the important things
with the framework is to do

00:14:34.440 --> 00:14:36.000
a step called make install.

00:14:36.200 --> 00:14:40.140
Okay, so there's one part of actually
making the actual framework

00:14:40.140 --> 00:14:44.200
itself for compiling purposes,
but then you have to install it into

00:14:44.200 --> 00:14:49.060
the directory that WebObjects uses when
the application is actually running.

00:14:49.200 --> 00:14:51.200
And so we'll actually
take a look at that.

00:14:51.200 --> 00:14:54.360
And then of course we can
palletize them if we want to.

00:14:54.600 --> 00:14:58.400
So a couple of key things for, again,
for palletizing.

00:14:58.430 --> 00:15:02.640
You know, create custom pallets that are
multiple ones for different developers.

00:15:02.670 --> 00:15:04.200
You know,
sometimes in your environment when

00:15:04.200 --> 00:15:07.040
you're doing team development,
you're going to have different

00:15:07.040 --> 00:15:09.710
kinds of developers who have
different levels of expertise,

00:15:09.710 --> 00:15:13.160
and so you can use pallets
as a means to break those up.

00:15:13.160 --> 00:15:16.220
So you can do that according
to your skill sets.

00:15:16.260 --> 00:15:18.170
The other thing is,

00:15:18.510 --> 00:15:20.720
It also really helps
you to organize things.

00:15:20.770 --> 00:15:23.640
You can create multiple
palettes based on organization.

00:15:23.780 --> 00:15:27.730
And one of the things that's really
nice you'll see here is using those

00:15:28.240 --> 00:15:30.400
custom images that will show up.

00:15:30.400 --> 00:15:33.940
So rather than it just being a picture
of a component and the name of it,

00:15:33.940 --> 00:15:36.940
you can put a picture on it and
use your graphic artist expertise

00:15:37.350 --> 00:15:39.240
there to help you along those lines.

00:15:39.240 --> 00:15:43.230
Okay, so let's go ahead and
go through that step.

00:15:47.450 --> 00:15:53.600
So what I'm interested in
actually doing at this point,

00:15:53.600 --> 00:15:56.740
let's clean this up a little bit.

00:16:00.150 --> 00:16:04.100
So I want to create a brand new project
that's actually for a framework.

00:16:04.190 --> 00:16:07.240
So let's go over here
into our project builder.

00:16:07.390 --> 00:16:10.310
And this is the drop down to
allow you to pick and choose.

00:16:10.360 --> 00:16:13.540
So when you actually create a framework,
you'll see that one of the

00:16:13.540 --> 00:16:16.780
options down here on the bottom
is WebObjects Framework as

00:16:16.780 --> 00:16:19.100
opposed to WebObjects Application.

00:16:19.100 --> 00:16:21.970
And we're going to go
ahead and put this in here.

00:16:21.970 --> 00:16:24.480
We're going to call this Reuse Framework.

00:16:28.240 --> 00:16:31.020
Okay.

00:16:31.190 --> 00:16:33.890
So now when we do the framework step,

00:16:36.750 --> 00:16:38.210
It's pretty simple, easy stuff.

00:16:38.360 --> 00:16:41.350
So what we're looking for
are three basic files.

00:16:41.480 --> 00:16:45.320
First thing we want to do is actually
pick up the Java class that's

00:16:45.450 --> 00:16:47.700
associated with the reusable component.

00:16:47.700 --> 00:16:48.700
And that's this one right here.

00:16:48.700 --> 00:16:51.700
Let's just go ahead and
drag that into my framework.

00:16:51.930 --> 00:16:56.920
The second thing that we want to do is
actually bring in the component itself.

00:16:57.340 --> 00:16:59.700
So let's drag the component in.

00:16:59.910 --> 00:17:03.790
And the third thing that we
need to have is the API file.

00:17:10.590 --> 00:17:12.850
Once we have that done,
we have our basic framework,

00:17:12.850 --> 00:17:14.380
we're going to go ahead
and bring up the build.

00:17:14.400 --> 00:17:18.200
Remember I talked about you can
compile the framework itself or

00:17:18.200 --> 00:17:20.100
you can actually do the install.

00:17:20.210 --> 00:17:23.090
And this little tag here is where
you actually would see that.

00:17:23.130 --> 00:17:24.300
This is the checkbox.

00:17:24.370 --> 00:17:25.700
So we're going to go
ahead and do install.

00:17:25.700 --> 00:17:30.010
One of the things that we'll do is both
the compile and the install for us.

00:17:42.820 --> 00:17:47.950
Okay,
so basically I've built the framework.

00:17:47.950 --> 00:17:51.330
Now it's gone ahead and actually
installed it into a directory that

00:17:51.330 --> 00:17:53.420
we're going to use in a second.

00:17:53.550 --> 00:17:56.140
So now that's that step right there.

00:17:56.290 --> 00:18:01.070
The next thing that we need to do
is put this thing onto a palette

00:18:01.190 --> 00:18:04.170
so that we can actually reuse it.

00:18:06.600 --> 00:18:09.100
So I have a palette sitting over here.

00:18:09.120 --> 00:18:12.120
Let's go ahead and make
my palette editable.

00:18:12.230 --> 00:18:18.320
And I want to go ahead and bring in that
component and put it onto my palette.

00:18:18.340 --> 00:18:20.700
So, in the file system here,

00:18:22.620 --> 00:18:25.910
The default directory that
Apple wants to go look in is

00:18:25.960 --> 00:18:27.450
Apple Local Library Frameworks.

00:18:27.550 --> 00:18:30.000
That's where it by default
will install your frameworks

00:18:30.560 --> 00:18:31.490
when you actually make them.

00:18:31.590 --> 00:18:34.890
Now you do have the option
if you wish to change that,

00:18:34.890 --> 00:18:37.400
have multiple locations and so on.

00:18:37.940 --> 00:18:40.300
and inside of here we have our
component sitting here that

00:18:40.300 --> 00:18:41.420
we want to go ahead and use.

00:18:41.430 --> 00:18:43.970
Let's just go ahead and drag that on.

00:18:44.380 --> 00:18:46.930
So we have that in our palette now.

00:18:46.930 --> 00:18:49.300
And down below I have
a logo that I've built,

00:18:49.300 --> 00:18:51.650
and we'll drag that on.

00:18:51.730 --> 00:18:54.340
Let's go ahead and save our palette.

00:18:55.580 --> 00:18:57.490
and make it read only.

00:18:57.560 --> 00:19:00.900
So now we actually have our component
on a palette that I can reuse that's

00:19:01.000 --> 00:19:04.000
actually referencing my framework now.

00:19:04.040 --> 00:19:07.460
And let's just to make sure that
this thing is actually working.

00:19:08.810 --> 00:19:12.550
We're going to come down here and
I have an application called Final.

00:19:12.570 --> 00:19:14.570
And I've already kind of pre-built
a lot of stuff here so we don't

00:19:14.620 --> 00:19:15.700
have to repeat everything.

00:19:15.700 --> 00:19:18.870
Let's go ahead and bring up Main.

00:19:19.920 --> 00:19:24.320
and we see I have some of
the things already wired up.

00:19:24.320 --> 00:19:27.040
And let's just drag my
component in off my palette.

00:19:27.120 --> 00:19:29.640
And one of the things you'll notice
here is it's adding the framework.

00:19:30.300 --> 00:19:32.770
And I'm going to take a look at the
project in a minute to understand that.

00:19:32.810 --> 00:19:39.780
But one of the things that will
happen is if the framework that

00:19:39.780 --> 00:19:41.490
the component is referencing
is not already in your project,

00:19:41.490 --> 00:19:41.490
it will add it for you.

00:19:42.570 --> 00:19:46.390
And we go ahead and wire
this up and save it.

00:19:46.400 --> 00:19:48.140
We'll go back to our project.

00:19:48.220 --> 00:19:50.400
And one thing,
I'll go ahead and bring up the inspector.

00:19:50.910 --> 00:19:53.450
Inside of here,
there's an option under Project Builder

00:19:53.600 --> 00:19:56.400
called Framework Search Order.

00:19:56.400 --> 00:19:58.910
And by default,
if you go in and look in your project,

00:19:59.010 --> 00:20:00.380
you will not see this there.

00:20:00.380 --> 00:20:03.620
So it's important that if
you're going to do that,

00:20:03.620 --> 00:20:07.240
be sure you go in and add that
default directory so that it

00:20:07.240 --> 00:20:09.180
can reference it properly.

00:20:09.180 --> 00:20:09.720
Okay.

00:20:09.720 --> 00:20:11.450
Let's go ahead and compile our app.

00:20:25.950 --> 00:20:31.230
We have the same component now running
as a reusable component from a framework.

00:20:31.270 --> 00:20:33.310
Okay?

00:20:35.150 --> 00:20:36.100
It worked!

00:20:36.100 --> 00:20:38.100
That's cool!

00:20:38.120 --> 00:20:41.190
Okay, what I'd like to do now is
to go a little bit deeper,

00:20:41.190 --> 00:20:45.590
is bring Kelly back up to go into
the inter-component synchronization.

00:20:50.410 --> 00:20:50.880
Thanks, Scott.

00:20:50.880 --> 00:20:55.040
Okay, so component synchronization.

00:20:55.140 --> 00:20:56.060
Why is it important?

00:20:56.060 --> 00:21:02.320
It's important because if you're going
to create very complex components

00:21:02.320 --> 00:21:06.940
or deeply nested components,
component synchronization plays a big

00:21:07.040 --> 00:21:10.840
part in how efficient those components
are going to execute at runtime.

00:21:10.840 --> 00:21:14.360
Obviously, you want to build very
scalable apps that run fast,

00:21:14.400 --> 00:21:19.540
and prior to WebObjects 4.0,
the framework wasn't really optimized

00:21:19.540 --> 00:21:23.450
for very deeply nested components,
and they added some support for

00:21:23.600 --> 00:21:26.340
that to make it a lot better in 4.0.

00:21:28.920 --> 00:21:33.080
So basically there's two
methods of synchronization.

00:21:33.080 --> 00:21:36.900
There's automatic synchronization,
which you're used to now.

00:21:36.990 --> 00:21:39.900
WebObjects performs
synchronization automatically

00:21:39.900 --> 00:21:41.780
between the parent and the child.

00:21:41.780 --> 00:21:44.480
There's nothing you really have
to do to implement that other

00:21:44.480 --> 00:21:45.900
than declare your bindings.

00:21:45.900 --> 00:21:51.200
However, under certain circumstances,
you could run into some performance

00:21:51.200 --> 00:21:55.900
issues if you have lots of bindings
and deeply nested components.

00:21:55.900 --> 00:22:00.900
The other type of synchronization
is called manual synchronization.

00:22:00.900 --> 00:22:03.730
This is effectively where you
disable the automatic synchronization

00:22:03.730 --> 00:22:04.890
that WebObjects will do.

00:22:04.900 --> 00:22:07.590
However,
you're going to have to do a little

00:22:07.590 --> 00:22:11.880
bit more work to decide when you
want to perform the synchronization

00:22:11.920 --> 00:22:14.900
and which variables you want to
perform the synchronization on.

00:22:15.140 --> 00:22:19.770
And it gives you just basically
more control over how it's happened.

00:22:20.970 --> 00:22:25.970
So if we look at
automatic synchronization,

00:22:25.970 --> 00:22:31.250
basically the WebObjects framework
will attempt to synchronize bindings

00:22:31.250 --> 00:22:36.980
between parent and child components
up to six times for a given iteration

00:22:36.980 --> 00:22:38.760
of the request response loop.

00:22:38.800 --> 00:22:42.490
So this can really add up to
quite a bit of overhead if you

00:22:42.490 --> 00:22:46.560
have lots of components and
lots of bindings per component.

00:22:46.800 --> 00:22:49.910
The other issue you run into is
since you don't have control over

00:22:50.030 --> 00:22:54.350
when these synchronizations occur,
if you have any kind of application

00:22:54.350 --> 00:22:57.800
logic in your accessor methods,
those are likely to be executed

00:22:57.800 --> 00:23:02.390
redundantly multiple times,
and that may be something you don't want.

00:23:04.980 --> 00:23:12.580
So if we look at an example here,
basically there's kind of three things

00:23:12.580 --> 00:23:14.660
this example wants to point out to you.

00:23:14.660 --> 00:23:21.340
And one is the fact that it's possible to

00:23:21.660 --> 00:23:30.040
Pass-in Null Values from
the Parent to the Child.

00:23:30.890 --> 00:23:35.360
Textbox in the parent component,
and you didn't enter any text into that,

00:23:35.360 --> 00:23:36.720
and you submitted.

00:23:36.720 --> 00:23:39.770
A null value may get synchronized
into the child component,

00:23:39.900 --> 00:23:43.200
and then when you go to
execute some logic on that,

00:23:43.270 --> 00:23:44.800
you're going to get a runtime exception.

00:23:44.800 --> 00:23:47.710
I've actually seen deployed
apps where that wasn't caught,

00:23:47.800 --> 00:23:50.800
because they never tested it that way.

00:23:50.800 --> 00:23:53.660
The other two things that
this shows is the fact that

00:23:53.720 --> 00:23:57.080
logic in the child component,
and actually what we see here

00:23:57.080 --> 00:24:00.800
is that child component is like
a beautify string component,

00:24:00.800 --> 00:24:04.800
so all it does is that a string
gets passed in from the parent,

00:24:04.800 --> 00:24:06.770
and what it'll do is attempt
to beautify it for you.

00:24:06.800 --> 00:24:10.260
But what'll happen is that logic
to beautify the component will be

00:24:10.260 --> 00:24:14.330
executed multiple times redundantly,
so that's something that of course is

00:24:14.390 --> 00:24:16.760
going to cause some unwanted overhead.

00:24:16.800 --> 00:24:23.800
And the third thing is the fact that...
since the synchronization is two-way,

00:24:23.800 --> 00:24:27.800
that once the child component
beautifies the string,

00:24:27.800 --> 00:24:29.780
it's going to pass it back
into the parent component,

00:24:29.810 --> 00:24:32.680
and that may be an unwanted side effect.

00:24:35.790 --> 00:24:39.180
So the first fix is to
basically check for null values.

00:24:39.180 --> 00:24:44.340
If you're going to perform some
method or operation on the instance

00:24:44.410 --> 00:24:47.740
variable in the child component
after the synchronization occurs,

00:24:47.740 --> 00:24:51.490
you definitely want to check for null
so you don't get runtime exceptions.

00:24:52.520 --> 00:24:56.780
Then to fix the other two issues,
we want to do what's called

00:24:56.800 --> 00:24:58.790
disable synchronization.

00:24:59.320 --> 00:25:00.700
That's fairly simple to do.

00:25:00.700 --> 00:25:04.810
What you do is you overwrite a
method in your child component.

00:25:04.810 --> 00:25:06.790
It's in white text there.

00:25:06.790 --> 00:25:10.180
It synchronizes variables with
bindings and have that return false.

00:25:10.380 --> 00:25:13.940
That automatically tells the framework,
the WebObjects framework,

00:25:13.940 --> 00:25:17.430
that your component's not to
be synchronized automatically.

00:25:18.110 --> 00:25:20.800
Once you go to manual synchronization,
though,

00:25:20.800 --> 00:25:25.080
you need to perform the pushing and
pulling of the attributes between

00:25:25.150 --> 00:25:27.140
the parent and the child yourself.

00:25:27.200 --> 00:25:30.690
I mean, that's where the value for
binding method comes in.

00:25:30.820 --> 00:25:34.400
Okay, so in this case,
you pass the value for binding method,

00:25:34.520 --> 00:25:38.220
the name of the attribute
in the WAD file,

00:25:38.220 --> 00:25:41.670
in this case it's a string,
and it will return the

00:25:41.680 --> 00:25:46.730
parent's bound attribute,
and you can perform some operation on it.

00:25:49.680 --> 00:25:55.080
Once you go to this manual
synchronization and you start

00:25:55.080 --> 00:25:58.700
using the value for binding,
you don't really need to have

00:25:58.700 --> 00:26:02.960
a declared instance variable in
your child component anymore.

00:26:03.100 --> 00:26:05.910
So, something to think about.

00:26:07.590 --> 00:26:12.140
The other thing is you need a way to get
values back into the parent sometime.

00:26:12.140 --> 00:26:14.110
So in this case,
you probably don't want to do it,

00:26:14.260 --> 00:26:18.320
but if you wanted to have that beautified
string passed back into the parent,

00:26:18.490 --> 00:26:21.800
you'd use a set value for binding method.

00:26:21.890 --> 00:26:24.850
And that's how you manually
push the values back from

00:26:24.850 --> 00:26:26.650
the child into the parent.

00:26:26.760 --> 00:26:30.790
Basically what you do is you just pass
it the value and the name of the binding.

00:26:35.370 --> 00:26:41.190
Another thing to consider is if
you're going to pass into the child

00:26:41.190 --> 00:26:47.670
something like an EO or a dictionary
and that child component is going

00:26:47.670 --> 00:26:49.890
to be doing operations on that

00:26:56.320 --> 00:26:57.750
object, whatever it is,
maybe you're going to call,

00:26:57.750 --> 00:26:58.580
display all of its attributes.

00:26:58.680 --> 00:27:00.130
In the case we have here,
maybe you're calling attributes

00:27:00.130 --> 00:27:04.540
on it 20 times to display name,
address, city, state.

00:27:05.090 --> 00:27:07.700
And in this example here,
what would happen is you'd be calling

00:27:07.810 --> 00:27:09.680
value for binding multiple times,
right?

00:27:09.730 --> 00:27:13.300
Once for every time the
woe string fires off.

00:27:13.850 --> 00:27:15.770
Which probably isn't too
expensive on its own,

00:27:15.950 --> 00:27:18.170
but if on the other side
there's an accessor method with

00:27:18.170 --> 00:27:20.280
some kind of business logic,
then that's going to

00:27:20.280 --> 00:27:21.720
start getting expensive.

00:27:23.190 --> 00:27:26.640
So one thing you can do
here is cache the value.

00:27:26.700 --> 00:27:31.300
Okay, so again,
you can declare an instance variable,

00:27:31.300 --> 00:27:33.870
do a value for binding,
check to see if it's null.

00:27:33.920 --> 00:27:37.280
If it's not null,
you go ahead and load the value in and

00:27:37.280 --> 00:27:40.060
then cache it in the child component.

00:27:40.120 --> 00:27:42.920
If you're going to do that, of course,
you want to remember to reset

00:27:43.020 --> 00:27:47.900
the value at the end of the
current request response loop.

00:27:47.900 --> 00:27:50.610
Append to response is a
good place to do that.

00:27:54.520 --> 00:27:56.190
And then I thought I'd
throw this in as well,

00:27:56.210 --> 00:27:58.690
we're on the subject of
manual synchronization,

00:27:59.160 --> 00:28:01.660
is the idea of caret notation.

00:28:02.220 --> 00:28:08.650
If all you have are wrapper
methods for value for binding

00:28:08.650 --> 00:28:11.940
and set value for binding,
and all they're doing is

00:28:11.940 --> 00:28:16.060
calling those two methods,
you can shorten this by using

00:28:16.060 --> 00:28:18.540
what's called caret notation.

00:28:19.330 --> 00:28:21.070
in the bindings in the child.

00:28:21.070 --> 00:28:25.040
Okay, so this saves you having to have
these wrapper methods there and

00:28:25.040 --> 00:28:27.300
all the overhead those will incur.

00:28:29.100 --> 00:28:45.900
[Transcript missing]

00:28:46.140 --> 00:28:50.100
But there's also this kind of formalized
notion of a stateless component

00:28:50.100 --> 00:28:54.880
in WebObjects where if you declare
your component to be stateless,

00:28:54.880 --> 00:28:57.470
there will only be one shared
instance of that component

00:28:57.950 --> 00:29:00.000
for all your user sessions.

00:29:00.000 --> 00:29:02.820
Or if you're running in a
multi-threaded environment,

00:29:02.820 --> 00:29:04.950
there will be a pool of these components.

00:29:05.000 --> 00:29:08.920
The benefit here, though,
is that WebObjects at runtime doesn't

00:29:08.920 --> 00:29:13.000
have to keep creating new instances
and garbage collecting these.

00:29:13.000 --> 00:29:16.000
It doesn't have to incur
the overhead for doing that.

00:29:16.000 --> 00:29:16.990
So it becomes very efficient.

00:29:17.000 --> 00:29:19.880
So this is kind of like the
best way to create the most

00:29:19.880 --> 00:29:21.880
efficient reusable component.

00:29:22.000 --> 00:29:28.900
It's important to note that you can have
instance variables in these stateless

00:29:28.900 --> 00:29:34.750
components for doing local things,
but the state is not guaranteed

00:29:34.760 --> 00:29:39.180
to be valid beyond the current
phase of the request response loop.

00:29:39.410 --> 00:29:41.300
So you want to consider that.

00:29:41.300 --> 00:29:44.220
So to make the component stateless,
you basically implement a method

00:29:44.320 --> 00:29:49.300
called isStatelessReturnTrue,
automatically your component stateless.

00:29:49.300 --> 00:29:53.960
You want to remember to implement a
reset method and clear out or null

00:29:54.240 --> 00:29:58.490
out any instance variables you have in
that component so you don't have any

00:29:58.490 --> 00:30:02.290
side effects in other sessions that
are going to access that component.

00:30:02.510 --> 00:30:08.220
And one thing I discovered as well is
once you create a stateless component,

00:30:08.220 --> 00:30:12.300
it automatically uses
manual synchronization.

00:30:12.350 --> 00:30:14.700
So if you just go ahead and
make a component stateless

00:30:14.700 --> 00:30:17.420
that wasn't stateless before,
you probably won't synchronize

00:30:17.420 --> 00:30:18.290
any of your bindings.

00:30:18.300 --> 00:30:21.140
You're going to have to
do call value for binding,

00:30:21.150 --> 00:30:22.690
set value for binding.

00:30:23.050 --> 00:30:26.300
Another thing I learned as
well is if you're going to

00:30:26.300 --> 00:30:28.780
use a stateless component,
all the components,

00:30:28.780 --> 00:30:31.920
child components of that,
need to be stateless as well.

00:30:35.690 --> 00:30:38.310
Okay, so if we're going to get into
stateless components or even

00:30:38.310 --> 00:30:41.150
stateful components sometimes,
it's nice to have some flexibility

00:30:41.160 --> 00:30:47.490
to be able to communicate and
share state outside the component.

00:30:47.730 --> 00:30:52.380
You might have multiple components
that need to share some data and

00:30:52.380 --> 00:30:56.630
just basically be able to access
data outside of the component

00:30:56.770 --> 00:30:58.950
itself and even the parent.

00:31:00.400 --> 00:31:02.820
So one thing you might want
to do is maybe the component

00:31:03.090 --> 00:31:06.760
needs to access the application,
some data in the application,

00:31:06.760 --> 00:31:08.600
to configure itself.

00:31:08.680 --> 00:31:09.730
Just an idea.

00:31:09.810 --> 00:31:11.700
So you can,
there's a convenience method on

00:31:11.700 --> 00:31:13.400
a component called application.

00:31:13.400 --> 00:31:18.350
You can call value for key,
set value for key, or just call,

00:31:18.350 --> 00:31:21.120
do a cast and call some
method on application.

00:31:21.350 --> 00:31:23.750
You need to remember though,
you might need a lock if

00:31:23.750 --> 00:31:25.500
you're running multi-threaded.

00:31:25.540 --> 00:31:28.080
Anytime you go outside your
session in a multi-threaded app,

00:31:28.250 --> 00:31:30.940
you're probably not thread safe.

00:31:31.050 --> 00:31:34.280
So, kind of remember that.

00:31:36.580 --> 00:31:39.650
Another idea is if you have
two components that need to

00:31:39.650 --> 00:31:43.840
share some kind of state,
you can set up an instance variable in

00:31:44.070 --> 00:31:48.720
the parent and access it that way using
the parent method in the component.

00:31:51.550 --> 00:31:55.290
Yet another idea that I've seen
used a lot is to use some shared

00:31:55.320 --> 00:31:57.770
state and session dictionary.

00:31:57.920 --> 00:32:01.440
When you do this,
you kind of want to be careful to

00:32:01.540 --> 00:32:04.900
have some namespace considerations
because it is a shared dictionary

00:32:04.900 --> 00:32:11.800
between all the pages and it's
possible to get the wrong values back.

00:32:16.290 --> 00:32:19.520
Another thing I've seen done that's
kind of neat is the idea of this user

00:32:19.590 --> 00:32:22.200
info dictionary and the request object.

00:32:22.270 --> 00:32:26.150
The request object,
once it comes in in the current request,

00:32:26.270 --> 00:32:29.200
is usually pretty much intact.

00:32:29.290 --> 00:32:34.820
Every single component has access to it,
so you can kind of move information

00:32:34.820 --> 00:32:39.200
around through that user info dictionary
and share information that way.

00:32:39.440 --> 00:32:42.010
Kind of a more stealthy
way of doing things.

00:32:42.200 --> 00:32:45.240
The way you'd access it
is through the context,

00:32:45.240 --> 00:32:46.200
typically.

00:32:46.200 --> 00:32:49.700
Context, you can access the request,
and then from the request you can

00:32:49.700 --> 00:32:51.390
get to the user info dictionary.

00:32:54.810 --> 00:32:58.390
Okay, with that,
I'm going to ask Bob Frank to come

00:32:58.390 --> 00:33:02.690
up and give you some demos and
talk about WoW component content,

00:33:02.710 --> 00:33:05.990
WoW switch component,
and some of the cool dynamic

00:33:05.990 --> 00:33:09.070
features of reusable components.

00:33:16.060 --> 00:33:21.350
Thank you, Kelly.

00:33:21.380 --> 00:33:25.760
I think I get to talk about what
are probably two of the least

00:33:25.760 --> 00:33:28.680
understood reusable components
that ship with WebObjects:

00:33:28.690 --> 00:33:31.040
WoSwitch component and
WoComponent content.

00:33:31.100 --> 00:33:35.800
I also think I get to do the
neatest demo of this presentation.

00:33:35.920 --> 00:33:41.910
WoSwitch component, hold on, let's see.

00:33:42.700 --> 00:35:33.300
[Transcript missing]

00:35:33.630 --> 00:35:37.520
The next component I'm
going to be talking about,

00:35:37.520 --> 00:35:40.200
I think this is very hard
to get your brain around.

00:35:40.200 --> 00:35:41.910
It's going to be a lot
easier to see in the demo.

00:35:42.000 --> 00:35:47.070
Woe component content allows
you to take a component and

00:35:47.070 --> 00:35:49.670
create a wrapper component.

00:35:50.100 --> 00:35:54.040
So that way you could have a

00:35:54.190 --> 00:35:57.860
All of your components designed
for their functionality and

00:35:57.880 --> 00:36:02.100
a set of wrapper components
designed for their user interface.

00:36:02.220 --> 00:36:07.580
And I'm going to take Scott's
application and wrap it with some

00:36:07.880 --> 00:36:12.100
user interface and you'll see
that you can put them together.

00:36:12.320 --> 00:36:14.750
Using a combination of
WoW Switch component and

00:36:14.750 --> 00:36:18.410
WoW component content,
you could easily take a very small

00:36:18.500 --> 00:36:22.320
set of components that provide a look
and feel for your entire site or a

00:36:22.510 --> 00:36:27.580
combination of sets of looks and feels
for your entire site and on the fly,

00:36:27.760 --> 00:36:31.060
at run time, swap them in and out.

00:36:31.110 --> 00:36:35.300
What you see here on this screen
is actually a very simple search

00:36:35.300 --> 00:36:37.530
field wrapped by a wrapper.

00:36:38.100 --> 00:36:42.260
And that wrapper is going
to actually provide the rest

00:36:42.260 --> 00:36:44.100
of the body for the page.

00:36:44.170 --> 00:36:47.760
And the search field is going to get
dropped into the wrapper component,

00:36:47.910 --> 00:36:49.090
which looks like this.

00:36:49.100 --> 00:36:50.100
When you have a WoW component content,
you can actually add a

00:36:50.100 --> 00:36:50.100
component to the page.

00:36:50.150 --> 00:36:53.670
So if you have a WoW component content,
the content that you have

00:36:53.730 --> 00:36:59.100
wrapped gets dropped in and in
Web Object Builder will be represented

00:36:59.100 --> 00:37:00.100
by a small little placeholder.

00:37:00.100 --> 00:37:02.040
Since it doesn't know what you're
wrapping and it doesn't know

00:37:02.040 --> 00:37:06.040
what it's going to look like,
it just has this placeholder.

00:37:06.220 --> 00:37:08.100
In fact, let's see how that works.

00:37:08.100 --> 00:37:10.100
Can we go over to the demo machine?

00:37:10.100 --> 00:37:14.540
Let me clean up a few things.

00:37:17.180 --> 00:37:26.690
I have a few things
that I have pre-built.

00:37:26.690 --> 00:37:26.690
I love NT.

00:37:31.390 --> 00:37:35.570
We have a small framework
with a few wrapper components

00:37:35.890 --> 00:37:39.490
that I have already built.

00:37:40.290 --> 00:37:56.190
In order to use it, I have to add my
framework to the project.

00:37:56.190 --> 00:37:56.190
And since I'm adding a framework
before we can go ahead and run,

00:37:56.190 --> 00:37:56.190
I'm going to have to recompile.

00:37:57.030 --> 00:38:01.240
Just to show you that
it's the same application,

00:38:01.240 --> 00:38:09.500
let me add a simple wrapper to
the components that Kelly wrote.

00:38:09.500 --> 00:38:11.670
I'm going to center this so
it looks better with mine.

00:38:11.830 --> 00:38:17.500
And add the Yaya wrapper.

00:38:17.720 --> 00:38:20.850
It may look familiar to you.

00:38:21.020 --> 00:38:24.070
Oh, and save.

00:38:26.600 --> 00:38:31.500
may look, the wrapper that we're using
may look a little bit familiar.

00:38:31.500 --> 00:38:34.170
I hope.

00:38:37.900 --> 00:38:52.400
[Transcript missing]

00:38:53.800 --> 00:38:58.630
Let's say, for instance,
you actually want to know

00:38:58.680 --> 00:39:00.670
how to do what I just did.

00:39:01.200 --> 00:39:06.730
If you have a variety
of people working on

00:39:06.750 --> 00:39:08.900
Your user interface.

00:39:08.960 --> 00:39:13.970
And you want to go ahead and
take their completed page and,

00:39:13.970 --> 00:39:17.170
well, gee, this looks like a really good.

00:39:17.200 --> 00:39:21.860
Why don't we go ahead
and use a page here.

00:39:23.620 --> 00:39:28.860
and say these are the very expensive
graphic designers that we hired.

00:39:28.990 --> 00:39:33.630
And create a component

00:39:41.910 --> 00:39:51.320
and simply take a look at the
HTML that is in the blank component.

00:39:51.340 --> 00:39:53.340
Don't care about any of it at all.

00:39:53.360 --> 00:39:58.320
Delete that and paste in the
HTML that you've been provided.

00:39:58.500 --> 00:40:00.140
Don't forget to save.

00:40:00.150 --> 00:40:00.640
And

00:40:03.600 --> 00:40:06.060
When you're done,
even with a complicated web page,

00:40:06.180 --> 00:40:10.050
WebObjectBuilder does a fairly
good job at rendering it.

00:40:10.360 --> 00:40:14.180
And specifically, I'm going to go...

00:40:14.580 --> 00:40:25.400
Let's take a look at this table right
here and insert my WoE component content.

00:40:33.500 --> 00:40:51.600
[Transcript missing]

00:40:54.390 --> 00:41:00.060
At this point,
I need to drop in a few pieces of code.

00:41:00.060 --> 00:41:02.270
And don't worry,
I'm not going to do anything

00:41:02.270 --> 00:41:05.590
magical behind the scenes,
but I will show you the

00:41:05.700 --> 00:41:09.790
finished product first,
and then go ahead and explain

00:41:09.790 --> 00:41:13.170
the few pieces that I have done.

00:41:22.400 --> 00:41:28.500
[Transcript missing]

00:41:30.700 --> 00:41:40.600
[Transcript missing]

00:41:41.330 --> 00:41:55.180
and I will be presenting the next
session on the WOComponent content that

00:41:55.180 --> 00:41:55.180
allows us to switch between various
wrappers that we have and go ahead and

00:41:56.120 --> 00:42:06.140
Use a pull-down, a woe switch right here,
a woe pop-up list that

00:42:22.200 --> 00:42:26.050
Since I added some classes,
we have to recompile.

00:42:26.110 --> 00:42:30.560
But that is all that's involved
in taking an HTML page,

00:42:30.630 --> 00:42:34.090
dropping in some component content,
and making it into a wrapper.

00:42:34.120 --> 00:42:40.100
Hopefully,
this will be nice to me this morning.

00:42:41.790 --> 00:42:44.690
The default page that
comes up has no wrapper.

00:42:45.000 --> 00:42:53.700
Down at the bottom here,
we have a variety of wrappers.

00:42:53.700 --> 00:43:05.670
The one piece of magic that isn't really
that magical that I added is this class,

00:43:05.670 --> 00:43:12.090
dynamicwrapper.java.

00:43:16.500 --> 00:43:21.540
And all it really does for the
application is it looks for the name

00:43:21.540 --> 00:43:23.200
of the wrapper that I want to use.

00:43:23.360 --> 00:43:27.940
Using that action method that
I had bound in that form,

00:43:27.960 --> 00:43:30.770
I was setting the name of
the wrapper into the session,

00:43:30.850 --> 00:43:33.040
and we were pulling out here.

00:43:33.420 --> 00:43:42.410
One nifty little piece of code that
I added just last night was the ability

00:43:42.410 --> 00:43:45.000
to take the value from your URL.

00:43:48.260 --> 00:43:53.560
and this is just done
using form value for key.

00:43:53.610 --> 00:43:57.030
Nothing very special at all.

00:43:58.880 --> 00:44:01.190
And that is the entire
demo of how to combine

00:44:01.460 --> 00:44:04.440
WoW Switch Component and WoW Wrapper.

00:44:04.440 --> 00:44:06.990
Can I go back to the presentation?

00:44:17.310 --> 00:44:22.390
One last thought on creating reusable
components and reusable toolkits in

00:44:22.390 --> 00:44:27.180
general is there's a few pieces of
code that you saw me copy and paste.

00:44:27.270 --> 00:44:31.170
There are a large amount of things
that you can do for yourself

00:44:31.200 --> 00:44:34.200
to make reusable components
even more reusable for yourself.

00:44:34.200 --> 00:44:37.250
One of the things that
I like to do is have a copy,

00:44:37.250 --> 00:44:40.730
a personal copy of a subclass
of WoW component that has a

00:44:41.160 --> 00:44:43.170
variety of convenience methods.

00:44:43.240 --> 00:44:46.220
Everybody has certain things that
you're going to find yourself

00:44:46.230 --> 00:44:48.140
re-implementing time and time again.

00:44:48.210 --> 00:44:50.860
You can carry this around with you,
even subclassing an

00:44:50.860 --> 00:44:53.510
application or session,
to provide convenience

00:44:53.620 --> 00:44:57.200
methods that you know will be
available for you everywhere.

00:44:57.200 --> 00:45:00.370
For example, if you want to go
through your application,

00:45:00.370 --> 00:45:04.160
a common example would be the ability
to set certain pages to expire and

00:45:04.160 --> 00:45:06.200
set certain pages not to expire.

00:45:06.200 --> 00:45:09.180
If you've got customer data that
you don't want the browser to cache,

00:45:09.180 --> 00:45:11.200
you could set it on a page-by-page basis.

00:45:11.200 --> 00:45:13.180
There's a few other simple examples.

00:45:13.210 --> 00:45:16.770
Going back to the previous page,
these are convenient things

00:45:17.090 --> 00:45:21.200
that over time I've found that
are re-implemented frequently.

00:45:21.350 --> 00:45:25.290
This is a...

00:45:25.720 --> 00:45:28.070
At this point,
I'd like to call back Kelly on stage

00:45:28.110 --> 00:45:33.760
and have him talk some more about
additional reusable components.

00:45:44.800 --> 00:45:47.650
Okay,
I'm going to finish this up with some

00:45:47.650 --> 00:45:55.390
tips on performance and debugging and
get into some ideas on some design ideas.

00:45:55.720 --> 00:45:58.520
Debugging.

00:45:59.070 --> 00:46:02.810
Of course we've got GDB if
you're doing Objective-C,

00:46:02.880 --> 00:46:05.740
JDB if you're doing...

00:46:05.930 --> 00:46:13.630
If you are going to use Java,
make sure you enable GDB and you also

00:46:13.710 --> 00:46:23.880
have to set other Java tool flags equal
-g in your makefile.preamble if you want

00:46:23.880 --> 00:46:23.880
to be able to access local variables.

00:46:24.630 --> 00:46:27.530
My favorite: System.out.println.

00:46:27.720 --> 00:46:31.500
Seems like half my code these
days is System.out.println.

00:46:31.600 --> 00:46:35.500
There's also LogString,
which is kind of a platform-independent

00:46:35.500 --> 00:46:38.500
way to do logging in web objects.

00:46:38.690 --> 00:46:45.500
And then there's DebugString that works
in conjunction with WoDebugEnabled,

00:46:45.500 --> 00:46:51.500
so you can set this flag at runtime and
turn your debugging on and off at will.

00:46:52.150 --> 00:46:56.010
Another technique I use if I have
deeply nested components or very

00:46:56.110 --> 00:47:02.730
complex components is to use comments to
isolate different portions of the HTML.

00:47:02.790 --> 00:47:08.020
If I'm getting some kind of
really weird browser output,

00:47:08.360 --> 00:47:11.610
sometimes it's nice to be able to go
in and just comment out sections and

00:47:11.640 --> 00:47:13.020
kind of isolate where the problem is.

00:47:13.340 --> 00:47:18.860
Another thing that I found when I was
researching this session is WoDebug.

00:47:19.100 --> 00:47:24.100
It's basically a binding attribute
that you can add to any component,

00:47:24.100 --> 00:47:27.100
whether it's a reusable
component or a dynamic element.

00:47:27.570 --> 00:47:31.440
Essentially what you do is either
in the WAD file or in the inspector,

00:47:31.440 --> 00:47:36.970
just add this attribute, set it to yes,
and what it'll do for you is log on

00:47:36.970 --> 00:47:42.100
the console all of the synchronizations
between the parent and the child.

00:47:42.100 --> 00:47:43.100
It's a very simple thing.

00:47:43.100 --> 00:47:46.870
It's a very useful feature to have.

00:47:47.100 --> 00:47:49.100
You can see the WAD file down there.

00:47:49.100 --> 00:47:53.050
You can actually see the
attribute on the child side,

00:47:53.150 --> 00:47:54.100
the attribute on the parent side.

00:47:54.100 --> 00:47:58.100
It actually shows you the values that
it's pushing and pulling both ways.

00:47:58.100 --> 00:48:04.160
It's a very useful thing to have,
to know about.

00:48:05.040 --> 00:48:09.000
Performance Tips The first two
things we already really covered:

00:48:09.000 --> 00:48:11.400
Disabled binding synchronization
of stateless components.

00:48:11.400 --> 00:48:15.290
I wanted to put them on here just kind
of check off things to think about when

00:48:15.370 --> 00:48:17.240
you're looking at performance issues.

00:48:17.280 --> 00:48:21.960
The other one that's kind of obvious
is component definition caching.

00:48:22.030 --> 00:48:26.100
By default it's turned off.

00:48:26.160 --> 00:48:29.410
So when you're in development mode,
if you make changes to your WAD file or

00:48:29.410 --> 00:48:32.860
make changes to your component template,
WebObjects will pick those

00:48:32.950 --> 00:48:35.550
changes up without you having
to restart the application,

00:48:35.550 --> 00:48:36.940
which is kind of a nice feature.

00:48:37.000 --> 00:48:41.400
But when you go to deploy,
you want to set "wo caching enabled"

00:48:41.440 --> 00:48:45.950
to "yes" on the command line,
or set the method,

00:48:46.180 --> 00:48:49.670
which I think is an application method,
to "true."

00:48:49.840 --> 00:48:52.710
That'll make your application
run a little bit faster.

00:48:52.720 --> 00:48:56.660
Although, once WebObjects determines that
the component hasn't changed,

00:48:56.660 --> 00:48:59.870
it doesn't really go and reparse
it every single time anyway.

00:48:59.870 --> 00:49:02.450
But it does check to see if
the files changed on disk,

00:49:02.530 --> 00:49:04.790
so there is a little bit of overhead.

00:49:04.800 --> 00:49:06.480
Disable various debugging modes.

00:49:06.530 --> 00:49:09.300
You know, you want to make sure your
console logging's off.

00:49:09.390 --> 00:49:10.730
That really gets expensive.

00:49:10.730 --> 00:49:13.450
If you forget to turn that stuff off,
you don't realize it's

00:49:13.450 --> 00:49:14.750
spewing all that stuff.

00:49:14.810 --> 00:49:20.570
We had a couple good sessions that
went into performance on WebObjects,

00:49:20.670 --> 00:49:24.800
and I know they covered
the WoEvent logging stuff.

00:49:24.890 --> 00:49:26.800
That's something to really consider
using when you're evaluating

00:49:26.800 --> 00:49:28.760
performance of your components.

00:49:28.820 --> 00:49:32.510
I got an example of a URL for
getting to the setup page.

00:49:32.510 --> 00:49:34.730
It's really intuitive to use.

00:49:34.810 --> 00:49:39.200
Maybe not so easy to
interpret the results,

00:49:39.200 --> 00:49:42.470
but it is pretty nifty to have.

00:49:43.650 --> 00:49:44.590
Pitfalls to avoid.

00:49:44.600 --> 00:49:48.090
These are things that I've run into and
a lot of developers that I've worked

00:49:48.090 --> 00:49:50.600
with have run into several times.

00:49:50.600 --> 00:49:51.600
I thought I'd list here.

00:49:51.600 --> 00:49:56.550
The first one, take values from request
isn't always invoked.

00:49:56.550 --> 00:49:59.540
So take values from request is
only invoked if there are form

00:49:59.540 --> 00:50:01.600
values coming in in the request.

00:50:01.600 --> 00:50:03.640
So for example,
the initial URL you submit to a

00:50:03.640 --> 00:50:07.460
WebObjects app that starts your session,
there is no take values from request

00:50:07.630 --> 00:50:10.600
method invoked on your component.

00:50:10.610 --> 00:50:13.510
So if you put logic in there
thinking that it's going to happen,

00:50:13.540 --> 00:50:15.600
you might want to think twice about that.

00:50:15.600 --> 00:50:19.140
Initializing variables too early,
especially if you're using

00:50:19.140 --> 00:50:21.600
automatic component synchronization.

00:50:21.600 --> 00:50:25.210
You might initialize a variable
that's part of a binding attribute

00:50:25.210 --> 00:50:28.820
in maybe a constructor or something
just to have it overwritten by

00:50:28.820 --> 00:50:30.600
the synchronization process.

00:50:30.600 --> 00:50:34.600
So it's best to kind of initialize
your variables on a lazy basis.

00:50:34.600 --> 00:50:37.230
Initialize them when you need them.

00:50:38.210 --> 00:50:40.520
Returning self or this
from child components,

00:50:40.630 --> 00:50:42.100
pretty common mistake.

00:50:42.250 --> 00:50:44.360
Basically,
nothing will crash when you do that,

00:50:44.360 --> 00:50:47.820
but what will happen is, for example,
you'll all of a sudden just get your

00:50:47.890 --> 00:50:52.900
child component displayed in your
browser and your main page is gone.

00:50:52.930 --> 00:50:54.950
That's pretty easy to fix.

00:50:54.950 --> 00:50:58.630
You typically want to return
null or return some new

00:50:58.640 --> 00:51:00.880
page from an action method.

00:51:01.100 --> 00:52:33.800
[Transcript missing]

00:52:34.650 --> 00:52:37.950
Another thing, it's not too common,
but you can get yourself

00:52:37.960 --> 00:52:41.280
into these retain cycles,
which are essentially circular

00:52:41.280 --> 00:52:43.340
references between objects.

00:52:43.850 --> 00:52:46.440
For instance, if you try and store
the session in a page,

00:52:46.440 --> 00:52:49.210
or you try and store the
application in a page,

00:52:49.210 --> 00:52:51.440
what will happen is,
since these objects are

00:52:51.440 --> 00:52:54.430
referencing each other,
they might not get garbage

00:52:54.430 --> 00:52:57.950
collected at the end of whatever
time it is to get rid of them.

00:52:58.020 --> 00:53:01.430
At the end of the request response
cycle or the end of the session,

00:53:01.500 --> 00:53:03.830
you'll start getting memory leaks.

00:53:03.890 --> 00:53:08.900
It's best not to do that.

00:53:09.460 --> 00:53:12.980
convenience methods and components for
like application and session and parent,

00:53:13.010 --> 00:53:14.640
things like that,
so you don't really need to store

00:53:14.640 --> 00:53:17.810
that kind of stuff in your components.

00:53:19.450 --> 00:53:22.360
A few design issues to consider
when building components.

00:53:22.450 --> 00:53:25.050
My favorite really is to take
a building block approach.

00:53:25.260 --> 00:53:29.730
Start with really small components,
build those into bigger components,

00:53:29.810 --> 00:53:31.400
and then build those into
yet bigger components.

00:53:31.440 --> 00:53:36.400
I mean, it really is kind of a cool way
to build UI and really reusable.

00:53:36.400 --> 00:53:39.480
And with the ability to create
very efficient components with

00:53:39.520 --> 00:53:43.290
some of the things we talked about,
you can really pull it off and

00:53:43.380 --> 00:53:45.400
do some kind of cool stuff.

00:53:45.400 --> 00:53:48.360
A couple questions to ask yourself
when you design your component.

00:53:48.510 --> 00:53:51.400
Is the component designed to
be reused across applications?

00:53:51.400 --> 00:53:56.390
Not everybody is going to use reusable
components in more than one application.

00:53:56.400 --> 00:53:58.910
If you are,
you might want to consider having

00:53:58.910 --> 00:54:02.620
features in the reusable component
to turn different things on and

00:54:02.620 --> 00:54:06.270
off to allow the programmer to
control how it's going to behave.

00:54:06.400 --> 00:54:09.370
Decide how you want to manage state.

00:54:09.370 --> 00:54:12.390
You want to really think about that.

00:54:12.400 --> 00:54:14.400
Do you want to pass everything
into the bindings or just do it?

00:54:15.400 --> 00:54:16.400
I think you're right.

00:54:16.400 --> 00:54:17.370
You want to use some kind
of shared state idea.

00:54:18.060 --> 00:54:23.350
Another thing to consider
is binding validations.

00:54:23.390 --> 00:54:27.280
If other people are going to be
using your reusable components,

00:54:27.370 --> 00:54:32.400
there is the API validation
feature in WebObjects Builder.

00:54:32.400 --> 00:54:36.400
I wanted to point out that it's
a design time only error check.

00:54:36.400 --> 00:54:40.850
So if you validate the rules
on your component at runtime,

00:54:40.940 --> 00:54:44.400
you're not going to know the difference.

00:54:44.400 --> 00:54:47.830
I don't know if you've ever noticed,
but on dynamic elements,

00:54:47.830 --> 00:54:51.400
if you don't do the bindings right
or if you leave a binding out,

00:54:51.400 --> 00:54:53.790
you'll get a runtime exception.

00:54:53.970 --> 00:54:57.040
You might want to provide that
sort of error checking on your own

00:54:57.040 --> 00:54:58.880
in your own reusable components.

00:54:58.970 --> 00:55:03.420
There's a couple methods you can call:
canGetValueForBinding,

00:55:03.800 --> 00:55:05.100
canSetValueForBinding.

00:55:05.100 --> 00:55:09.650
So, if it's required that the developer
bind an attribute that the child

00:55:09.650 --> 00:55:12.840
can set back in the parent,
you might want to make these,

00:55:12.990 --> 00:55:15.700
call these methods and then raise
some kind of runtime exception if

00:55:15.900 --> 00:55:18.780
they don't return the right value.

00:55:18.870 --> 00:55:20.550
And then namespace conflicts.

00:55:20.640 --> 00:55:23.590
If you're creating frameworks
of reusable components,

00:55:23.650 --> 00:55:25.930
you want to be, you know,
give them some kind of unique

00:55:25.930 --> 00:55:29.510
names so they don't conflict with
the components in your current

00:55:29.510 --> 00:55:33.820
application or in other frameworks.

00:55:33.940 --> 00:55:34.390
That's about it.

00:55:34.390 --> 00:55:35.660
That's what I've got.

00:55:35.780 --> 00:55:38.250
Q&A.

00:55:38.250 --> 00:55:38.250
Thanks.