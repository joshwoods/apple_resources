WEBVTT

00:00:08.500 --> 00:00:09.960
So you're all very welcome here today.

00:00:10.100 --> 00:00:13.680
It's great to see such interest
in the first of two localization

00:00:13.740 --> 00:00:16.070
sessions that we're running this week.

00:00:16.250 --> 00:00:20.100
My name is Colm Murphy,
and I manage a localization

00:00:20.180 --> 00:00:22.200
tools group for Apple.

00:00:22.290 --> 00:00:25.300
So I'm absolutely delighted and
privileged to be here today to

00:00:25.300 --> 00:00:29.240
announce two new technologies that
are going to make your lives as

00:00:29.240 --> 00:00:34.240
localization tool developers and
tool users a whole lot easier.

00:00:34.770 --> 00:00:39.300
The first of these two new localization
technologies is a project called Monty.

00:00:39.300 --> 00:00:41.890
It's a code name for a project
we've been working on for

00:00:41.890 --> 00:00:43.070
about a year and a half now.

00:00:43.070 --> 00:00:47.410
And the first version I'm absolutely
thrilled to be able to announce today.

00:00:47.410 --> 00:00:51.570
This project called Monty
is actually middleware.

00:00:51.580 --> 00:00:55.390
It's a data services library
which provides a lot of services

00:00:55.450 --> 00:00:59.900
and various features for you,
the localization tool developer.

00:01:01.060 --> 00:01:05.110
And so the second technology that
I want to talk to you today about is

00:01:05.190 --> 00:01:07.850
a project called AppleGlot version 3.

00:01:07.930 --> 00:01:12.230
It's a third generation of a tool that
has been in existence for some time.

00:01:12.230 --> 00:01:14.200
But this is a complete revolution.

00:01:14.290 --> 00:01:15.270
It's a redesign.

00:01:15.270 --> 00:01:17.070
It's a new modern feel and look.

00:01:17.070 --> 00:01:20.610
And it handles modern data types
and techniques and so forth.

00:01:22.800 --> 00:01:26.870
So the complete spectrum
of localization tools,

00:01:27.350 --> 00:01:29.630
if you look at any modern
localization process,

00:01:29.630 --> 00:01:33.240
you're going to see tools in many
of these different types of areas,

00:01:33.310 --> 00:01:35.520
whether it's in release
engineering or in the translation

00:01:35.530 --> 00:01:37.550
and localization process itself.

00:01:37.760 --> 00:01:40.360
And the two technologies that we
were going to talk to you today

00:01:40.360 --> 00:01:45.060
about fall into the area of text
extraction and text insertion,

00:01:45.070 --> 00:01:48.060
or probably more accurately,
localizable data extraction

00:01:48.540 --> 00:01:51.490
and localizable data insertion.

00:01:52.420 --> 00:01:53.980
So, what is Monty?

00:01:53.980 --> 00:01:59.600
Well, first of all,
in order to illustrate this,

00:01:59.720 --> 00:02:03.200
what I want to do is explain
an industry-wide problem.

00:02:03.200 --> 00:02:05.650
On the bottom here,
you can see that we've

00:02:05.650 --> 00:02:07.320
got some structured data.

00:02:07.360 --> 00:02:10.450
This is any type of data,
probably packed binary

00:02:10.630 --> 00:02:12.100
data of some format.

00:02:12.100 --> 00:02:14.750
It might be a nib file,
it might be a resource file,

00:02:14.750 --> 00:02:16.100
it could be anything.

00:02:16.100 --> 00:02:19.900
And presumably,
this structured data contains

00:02:19.900 --> 00:02:21.890
some localizable information.

00:02:22.300 --> 00:02:24.970
So,
it's information that you want to get at,

00:02:25.260 --> 00:02:28.590
whether it's strings that you
want to extract to translate,

00:02:28.590 --> 00:02:32.450
or whether it's bounding rectangles
or whatever that you want to actually

00:02:32.450 --> 00:02:34.490
localize for a particular product.

00:02:34.580 --> 00:02:38.290
And on the top,
what I've done is grouped three different

00:02:38.290 --> 00:02:43.330
types of localization tools together,
such that these are the types of tools

00:02:43.570 --> 00:02:49.180
that actually typically manipulate those
types of data in a localization process.

00:02:49.260 --> 00:02:53.470
And the first type of tool
that we have... is they're

00:02:53.470 --> 00:02:54.710
the data editing tools.

00:02:54.900 --> 00:02:58.090
These are the tools that are
like Interface Builder and the

00:02:58.330 --> 00:03:00.060
ResEdits and the resources,
etc.

00:03:00.100 --> 00:03:06.100
And they typically need to interface
with this structured data in some format.

00:03:06.100 --> 00:03:07.340
Okay?

00:03:07.500 --> 00:03:10.780
The second type of tool... groups
of tools that we have are the

00:03:10.780 --> 00:03:12.790
incremental localization tools.

00:03:12.800 --> 00:03:17.810
And these tools are the AppleGlots
and so forth that have formed the

00:03:17.970 --> 00:03:19.790
core of your localization process.

00:03:19.800 --> 00:03:23.720
And the third type of localization
tools... that operate on structured

00:03:23.720 --> 00:03:29.530
data are those tools which
specify localization rules.

00:03:29.540 --> 00:03:33.600
They specify the relationships and
the dependencies between different

00:03:33.670 --> 00:03:35.530
types of data to be localized.

00:03:35.540 --> 00:03:40.130
So, across the industry,
what has typically happened is that

00:03:41.010 --> 00:03:46.540
the tools themselves have always
operated directly on the data types.

00:03:46.730 --> 00:03:49.480
They've interfaced directly
with that structured data.

00:03:49.740 --> 00:03:51.780
They've had to interpret
the format of data.

00:03:51.780 --> 00:03:56.230
They've had to interpret which
elements of that formatted data

00:03:56.590 --> 00:03:58.780
actually are the localizable ones.

00:03:58.970 --> 00:04:03.200
And they've had the responsibility of
extracting and inserting that data during

00:04:03.420 --> 00:04:05.780
any sort of a localization process.

00:04:05.980 --> 00:04:08.780
And this creates a couple
of fundamental problems.

00:04:09.010 --> 00:04:12.780
First of all,
what happens when that data changes?

00:04:12.780 --> 00:04:15.900
You know,
your engineering department might

00:04:16.360 --> 00:04:20.250
bring out a new kind of variant
of that data type to describe

00:04:20.250 --> 00:04:21.520
new structures or whatever.

00:04:21.760 --> 00:04:25.710
Suddenly, the localization tool developer
has to go off and describe that

00:04:25.770 --> 00:04:29.610
new format either with a complex
template mechanism or revise his tool,

00:04:29.610 --> 00:04:32.690
his localization tool,
which is typically what he does to

00:04:32.690 --> 00:04:35.520
handle that variant of data type.

00:04:35.520 --> 00:04:38.370
And more important,
what happens is that the

00:04:38.370 --> 00:04:40.510
data type changes altogether.

00:04:40.620 --> 00:04:43.520
So, what you've got is you've got,
for some strange reason,

00:04:43.520 --> 00:04:46.520
maybe it's an engineering department
producing a new data type.

00:04:46.520 --> 00:04:47.860
Maybe, you know,
it's Apple producing new files

00:04:47.860 --> 00:04:49.520
that maybe eventually will
be available to the public.

00:04:49.520 --> 00:04:50.520
And so, you know, you have to go back and
look at the data type.

00:04:50.520 --> 00:04:51.250
And you have to go back
and look at the data type.

00:04:51.260 --> 00:04:53.410
of interest like help files
or something like that,

00:04:53.410 --> 00:04:57.230
or it might be the industry actually
producing maybe new different

00:04:57.310 --> 00:05:01.110
types of technology whether
it's XML files or HTML files,

00:05:01.110 --> 00:05:02.040
et cetera.

00:05:02.060 --> 00:05:06.340
So the burden falls on the localization
tool developer or the process developers

00:05:06.390 --> 00:05:10.680
themselves to actually respond to
these new different data types.

00:05:10.690 --> 00:05:13.160
So what has happened across the industry?

00:05:13.160 --> 00:05:16.800
And I've looked at many different
companies and I've seen similarities

00:05:16.800 --> 00:05:18.510
right across the industry here.

00:05:18.700 --> 00:05:20.880
It doesn't matter what
platform you're working off of,

00:05:20.910 --> 00:05:22.000
the same thing happens.

00:05:22.000 --> 00:05:25.910
The localization tool development
department or the process people,

00:05:25.910 --> 00:05:30.680
what they do is they develop new
tools to handle these new data types.

00:05:30.680 --> 00:05:36.300
So what happens over a three or a four
or a five year period is that you end

00:05:36.300 --> 00:05:41.100
up with hundreds of different types of
tools and all fundamentally the same.

00:05:41.100 --> 00:05:43.750
The only thing they're doing is
actually extracting and inserting

00:05:44.040 --> 00:05:48.140
different types of data from
different types of data forms.

00:05:48.140 --> 00:05:48.640
So what we've done.

00:05:48.640 --> 00:05:50.510
We've done at Apples,
we've recognized that this

00:05:50.510 --> 00:05:51.640
is a fundamental problem.

00:05:51.640 --> 00:05:54.160
It certainly has caused me grief
over the last few years as a

00:05:54.160 --> 00:05:56.730
localization tool development manager.

00:05:56.750 --> 00:05:59.300
So what we've done is sat
back from the problem,

00:05:59.400 --> 00:06:02.740
looked at it and said, "Well,
there must be a simpler way.

00:06:02.770 --> 00:06:06.400
There has to be a more efficient
way of doing this." And there is.

00:06:06.400 --> 00:06:10.780
And that project is called Monty.

00:06:10.790 --> 00:06:16.530
So what we've done is we've created
this middleware and this is kind of

00:06:16.620 --> 00:06:20.760
like a toolbox which the localization
tool developers can actually

00:06:20.760 --> 00:06:22.300
build their tools on top of.

00:06:22.300 --> 00:06:26.160
So what happens is that when
a localization tool actually

00:06:26.170 --> 00:06:29.840
wants a piece of data,
a piece of localizable data,

00:06:29.940 --> 00:06:32.660
what it does is it asks Monty for it.

00:06:32.720 --> 00:06:37.040
Monty then takes the request,
takes care of any sort of

00:06:37.160 --> 00:06:42.200
translation of script systems or
character formats or whatever it is,

00:06:42.200 --> 00:06:46.120
can interpret the actual structure
of the data through a very

00:06:46.120 --> 00:06:48.500
simple translator mechanism.

00:06:48.620 --> 00:06:52.400
And it's also capable of identifying
which are the localizable elements

00:06:52.400 --> 00:06:54.560
within that structured data.

00:06:54.710 --> 00:06:57.610
So what it does is it takes
that data in question,

00:06:58.130 --> 00:07:02.560
presents it back up through a common API,
back up to the localization tools.

00:07:02.590 --> 00:07:05.070
So what you have is you have
something that's actually

00:07:05.070 --> 00:07:06.500
doing all the work for you.

00:07:06.500 --> 00:07:09.510
In the same way when the
localization tool itself does its

00:07:09.510 --> 00:07:12.940
manipulation at the higher levels,
presumably it sends it

00:07:12.940 --> 00:07:16.180
out for translation,
the translation comes back in,

00:07:16.180 --> 00:07:18.520
the translation is encapsulated.

00:07:18.520 --> 00:07:25.460
And the tool itself makes a basic
API call to Monty to repack that data.

00:07:25.460 --> 00:07:29.550
Monty takes that data itself,
does any necessary encodings

00:07:29.570 --> 00:07:33.950
and script conversions,
et cetera, and repacks the data into

00:07:33.960 --> 00:07:36.060
that final structured form.

00:07:36.060 --> 00:07:39.790
You don't need, as tool developers,
you do not need to know

00:07:39.790 --> 00:07:41.410
what type of data it is.

00:07:41.420 --> 00:07:42.830
Monty takes care of everything for you.

00:07:44.230 --> 00:07:45.640
and why is that important?

00:07:45.670 --> 00:07:48.060
Well,
it's important because the structured

00:07:48.060 --> 00:07:50.440
data shown at the bottom of this program,
and again,

00:07:50.440 --> 00:07:53.440
it could be a lib file or a resort file,
it doesn't matter what it is,

00:07:53.470 --> 00:07:56.750
that data can change,
can change significantly.

00:07:56.750 --> 00:07:59.640
And your localization tools and
your process tools and everything

00:07:59.640 --> 00:08:00.910
else don't have to change.

00:08:00.980 --> 00:08:03.600
A very simple translator,
which plugs into Monty,

00:08:03.690 --> 00:08:05.710
represents new different data types.

00:08:05.710 --> 00:08:10.460
Very, very simple compared to previous
complex template mechanisms.

00:08:10.520 --> 00:08:12.380
Very, very simple model.

00:08:12.380 --> 00:08:17.700
It also handles very modern data
types and object-oriented structures,

00:08:17.700 --> 00:08:18.120
etc.

00:08:20.380 --> 00:08:22.330
So enough about Monty for a second.

00:08:22.340 --> 00:08:24.080
We'll get into that in
more detail in a minute.

00:08:24.110 --> 00:08:25.760
So what is AppleGlot?

00:08:25.760 --> 00:08:29.820
Well, a lot of you are going to
be familiar with AppleGlot.

00:08:29.820 --> 00:08:34.200
AppleGlot was actually a
revolutionary tool back in 1987.

00:08:34.200 --> 00:08:37.670
The first version was released
and created a complete revolution

00:08:37.670 --> 00:08:40.990
within the localization industry,
because what it did for the

00:08:40.990 --> 00:08:44.500
first time was it created an
incremental localization model.

00:08:44.530 --> 00:08:47.530
And what is an incremental
localization model?

00:08:47.880 --> 00:08:50.590
Well,
an incremental localization model is

00:08:50.660 --> 00:08:54.870
not only a process where it gives you,
where it can extract the localizable

00:08:54.870 --> 00:08:57.830
strings and insert the translated
strings into your objects.

00:08:57.870 --> 00:09:02.230
It is actually a process which allows
you to propagate previously translated

00:09:02.230 --> 00:09:06.830
and localized information from previous
builds and from previous releases.

00:09:06.830 --> 00:09:09.700
And typically,
these are the information wouldn't

00:09:09.700 --> 00:09:11.460
have changed between builds.

00:09:11.460 --> 00:09:14.010
It also is, again,
capable of extracting and

00:09:14.010 --> 00:09:16.040
inserting your localized text.

00:09:16.040 --> 00:09:17.860
So what's new?

00:09:17.860 --> 00:09:19.570
What's new about AppleGlot?

00:09:19.570 --> 00:09:22.870
Well, first thing,
it's a completely new application.

00:09:22.940 --> 00:09:26.870
It's designed from the ground up
using modern development techniques,

00:09:26.950 --> 00:09:28.720
modern architectures, etc.

00:09:28.720 --> 00:09:32.560
It's a carbon-based application,
which is going to provide support

00:09:32.560 --> 00:09:35.870
for all the modern data types
that you're seeing under 8,

00:09:35.870 --> 00:09:37.460
9, 10, etc.

00:09:37.460 --> 00:09:40.070
The second thing is that it uses Monty.

00:09:40.280 --> 00:09:43.120
For all the reasons
I just described earlier,

00:09:43.150 --> 00:09:46.220
it doesn't need to know
about data formats.

00:09:46.280 --> 00:09:47.860
It basically, Monty handles everything.

00:09:47.860 --> 00:09:50.060
So it's making very
simple API calls to Monty.

00:09:50.130 --> 00:09:51.840
Monty's doing all the work for it.

00:09:51.840 --> 00:09:54.470
So it's the first serious
application that's actually

00:09:54.500 --> 00:09:56.170
using the Monty framework.

00:09:56.180 --> 00:10:00.290
The second thing is that this is
actually a flexible framework.

00:10:00.290 --> 00:10:04.260
The application architecture
itself is actually based around

00:10:04.260 --> 00:10:06.280
a centralized state machine.

00:10:06.280 --> 00:10:09.420
And it's a very modular in design,
such that you,

00:10:09.420 --> 00:10:14.210
as localization tool developers,
can actually create custom plugins into

00:10:14.210 --> 00:10:17.160
AppleGlot to customize this operation.

00:10:17.880 --> 00:10:18.100
So it's a very simple application.

00:10:18.150 --> 00:10:18.880
It's a very simple application.

00:10:18.880 --> 00:10:18.880
It's a very simple application.

00:10:18.880 --> 00:10:18.880
It's a very simple application.

00:10:18.880 --> 00:10:19.380
I mean,
incremental localization is only one

00:10:19.380 --> 00:10:19.880
of the things that AppleGlot can do.

00:10:19.880 --> 00:10:25.710
You can now customize by developing
these plugins through a series of SDKs,

00:10:25.780 --> 00:10:26.780
which we're providing.

00:10:26.780 --> 00:10:31.230
You can actually create these plugins
to interface AppleGlot into very simple

00:10:31.230 --> 00:10:33.830
or very complex localization processes.

00:10:33.840 --> 00:10:35.660
And why is that important?

00:10:35.660 --> 00:10:37.700
Well, what you want to be able to do
is you want to be able to use

00:10:37.700 --> 00:10:40.150
AppleGlot such that it can interface
possibly with some computer-aided

00:10:40.380 --> 00:10:42.740
translation machine in a different
platform or a different country.

00:10:42.740 --> 00:10:43.620
And that's what we're trying to do.

00:10:43.700 --> 00:10:45.880
So what we've done is designed
this very modular architecture.

00:10:45.880 --> 00:10:48.200
It provides all the basic
functions of Glotting,

00:10:48.200 --> 00:10:49.680
but also you have the
capability of expanding it.

00:10:49.680 --> 00:10:51.320
It's totally extensible and very,
very flexible.

00:10:51.320 --> 00:11:08.770
Very, very flexible.

00:11:09.450 --> 00:11:13.480
Very important for a modern
localization process.

00:11:13.770 --> 00:11:16.650
But do you know what the most
important thing and the most important

00:11:16.650 --> 00:11:18.350
aspect of these two technologies are?

00:11:18.360 --> 00:11:21.280
I'm going to bring up some of my
engineers in a second to go through these

00:11:21.540 --> 00:11:23.620
two types of technologies in more detail.

00:11:23.620 --> 00:11:27.320
But the most significant aspect
of these two technologies is,

00:11:27.360 --> 00:11:32.430
one, we're not going to charge you
$50,000 for these technologies.

00:11:32.430 --> 00:11:36.410
And we're not even going to charge
you $6.99 for these technologies,

00:11:36.410 --> 00:11:36.960
right?

00:11:36.960 --> 00:11:39.720
And you definitely don't have
to buy a box of cereal to

00:11:39.720 --> 00:11:41.460
get these two technologies.

00:11:41.460 --> 00:11:44.000
Because what we're doing
is it's completely free.

00:11:44.000 --> 00:11:46.310
We're making these
available free of charge.

00:11:46.310 --> 00:11:50.290
The SDKs, the examples, the technologies,
we're making them available free

00:11:50.290 --> 00:11:53.370
of charge to developers to do
whatever you want to do with them.

00:11:53.370 --> 00:11:57.610
And we have the necessary support through
our worldwide developer support services.

00:11:57.610 --> 00:12:00.440
And you'll be able to feedback
any comments and suggestions

00:12:00.470 --> 00:12:02.180
for upgrades in the future.

00:12:02.180 --> 00:12:06.040
So what I want to do is... Thank you.

00:12:06.040 --> 00:12:10.670
So what I want to do is I want
to bring the chief architect of

00:12:10.770 --> 00:12:13.410
the Monty Project up on stage,
Christian Walsh.

00:12:13.710 --> 00:12:16.220
And I want to bring him up to stage to
go through the finer detail of what Monty

00:12:16.220 --> 00:12:17.510
is and what it's going to do for you.

00:12:17.520 --> 00:12:18.530
Thank you.

00:12:30.380 --> 00:12:32.860
So I'm going to talk to you in a
bit more detail about the Monty

00:12:32.860 --> 00:12:36.690
technology that Colm has given
such an excellent sales pitch for.

00:12:37.400 --> 00:12:42.700
[Transcript missing]

00:12:43.900 --> 00:12:45.030
technology.

00:12:45.030 --> 00:12:47.280
First of all, what is Monty?

00:12:47.280 --> 00:12:51.250
Well, Monty is the foundation
for the next generation of

00:12:51.250 --> 00:12:55.270
localization tools inside Apple,
and we're hoping outside Apple as well.

00:12:55.270 --> 00:12:58.300
It provides data extraction and
editing services to any type

00:12:58.300 --> 00:12:59.940
of tool that wants to use them.

00:13:00.080 --> 00:13:02.860
Now, this may not be just in
the localization area,

00:13:02.860 --> 00:13:05.620
but also for data editing tools,
for example.

00:13:05.620 --> 00:13:07.950
So the main features of
Monty are first of all,

00:13:07.970 --> 00:13:10.520
the big thing,
we're going to provide you with a way

00:13:10.520 --> 00:13:12.650
of developing your applications quicker.

00:13:12.650 --> 00:13:13.780
That's always good.

00:13:13.780 --> 00:13:17.040
Because we've put in a lot of effort
into getting the data extraction and

00:13:17.040 --> 00:13:20.210
reinsertion features of Monty working,
you don't have to.

00:13:20.210 --> 00:13:22.570
So you can just take our
work and build upon it,

00:13:22.570 --> 00:13:23.540
and everyone's happy.

00:13:25.740 --> 00:13:27.110
Second, Unicode support.

00:13:27.290 --> 00:13:30.100
We are providing support
for Unicode in Monty.

00:13:30.100 --> 00:13:32.920
If you've seen any of the other sessions,
and I hope you have,

00:13:32.920 --> 00:13:35.260
you'll know that OS X is Unicode-based.

00:13:35.260 --> 00:13:37.240
The future of the Mac OS is Unicode.

00:13:37.260 --> 00:13:39.540
So we're providing you
with a way of editing,

00:13:39.540 --> 00:13:42.460
creating,
manipulating Unicode-based structures.

00:13:44.850 --> 00:13:48.480
Third, we have support for
object-oriented data structures.

00:13:48.500 --> 00:13:50.540
All modern software is object-oriented.

00:13:50.570 --> 00:13:53.800
The data structures it uses
are also object-oriented.

00:13:53.830 --> 00:13:56.770
This means we need
tools that support them.

00:13:56.800 --> 00:14:00.250
Unfortunately, the current generation of
localization tools don't deal very

00:14:00.250 --> 00:14:02.340
well with object-oriented data.

00:14:02.350 --> 00:14:04.890
Monty, hopefully, will change this.

00:14:05.190 --> 00:14:08.280
and most importantly,
we were insulating your tools

00:14:08.440 --> 00:14:11.500
from any changes in the format of
the data they need to manipulate.

00:14:16.210 --> 00:14:20.420
So looking at Unicode support of Monty,
you can see that inside of Monty,

00:14:20.420 --> 00:14:22.660
which is the two boxes in
the middle in this diagram,

00:14:22.660 --> 00:14:27.810
you can see that Monty,
by providing the extraction and recoding

00:14:27.870 --> 00:14:31.780
services into Unicode text for you,
insulates your application from

00:14:31.780 --> 00:14:34.470
the details of what a Macintosh
Roman encoding is or what

00:14:34.470 --> 00:14:36.480
Big Five encoding is on the other end.

00:14:36.480 --> 00:14:39.790
So for the tool developer,
they just replaced the text there,

00:14:39.790 --> 00:14:42.330
sample text,
with its equivalent in Chinese and

00:14:42.330 --> 00:14:45.420
let Monty worry about the
recoding and the repacking.

00:14:48.040 --> 00:14:52.630
So if we look at Monty's place in a
typical range of localization tools,

00:14:52.630 --> 00:14:56.830
we see that Monty's purpose is
to take the original packed data

00:14:57.400 --> 00:15:01.140
structure and it converts it into
a generalized representation,

00:15:01.330 --> 00:15:03.600
which is a tree-based representation.

00:15:03.600 --> 00:15:05.400
That's the blue box in the middle.

00:15:05.400 --> 00:15:09.560
From there,
the different classes of tools can either

00:15:09.560 --> 00:15:12.250
modify it or edit it or just look at it.

00:15:12.260 --> 00:15:14.960
For example,
workflow and localization tools,

00:15:14.960 --> 00:15:17.930
or workflow localization tools,
generally don't need to

00:15:17.940 --> 00:15:18.920
make any modifications.

00:15:18.920 --> 00:15:21.760
They're just there to count strings,
layouts, and provide some sort of

00:15:21.820 --> 00:15:24.300
estimate as to how much work is
involved in the localization.

00:15:24.300 --> 00:15:26.150
So they will read the data only.

00:15:26.160 --> 00:15:28.880
But because Monty provides
all these extraction services,

00:15:28.880 --> 00:15:32.890
they can produce a better estimate of
the workload involved in this project.

00:15:34.370 --> 00:15:38.670
Localization Tools then will typically
extract some part of the information,

00:15:38.680 --> 00:15:42.700
either a layout or just simply text,
send it off to be translated,

00:15:42.740 --> 00:15:45.000
and then reinsert that information again.

00:15:45.000 --> 00:15:47.180
And that's the middle
purple box up above.

00:15:47.200 --> 00:15:50.100
And then the last tool,
which is probably the simplest,

00:15:50.100 --> 00:15:51.670
are the data editing tools.

00:15:51.680 --> 00:15:53.960
They just open the structure,
look through it,

00:15:53.960 --> 00:15:56.960
allow the user to make changes,
and repack the whole thing.

00:15:57.870 --> 00:16:00.330
And when the changes or
whatever have been made,

00:16:00.510 --> 00:16:03.240
Monty also provides the features,
or the facility,

00:16:03.350 --> 00:16:07.940
to get from that internal representation
back to a packed binary data structure.

00:16:07.940 --> 00:16:10.760
They have the same format
of the original data,

00:16:10.880 --> 00:16:13.780
which the tools didn't
even need to know about.

00:16:15.100 --> 00:16:19.510
So how Monty gets from a packed
binary structure into a generalized

00:16:19.510 --> 00:16:23.210
representation is by means of
what I'm calling a disaster,

00:16:23.240 --> 00:16:24.840
a data translator file.

00:16:24.840 --> 00:16:25.960
Oh, yeah.

00:16:25.970 --> 00:16:30.220
A data translator file is an
object-oriented data description.

00:16:30.220 --> 00:16:32.820
It's a text-based
description of the data.

00:16:32.820 --> 00:16:35.800
But because it's object-oriented,
generally we have very

00:16:36.110 --> 00:16:38.180
simple translators,
but we use a lot of them

00:16:38.260 --> 00:16:39.660
to define structures.

00:16:39.660 --> 00:16:43.130
We do this where we have substructures,
list items,

00:16:43.130 --> 00:16:47.230
or any kind of common sequence,
or macro sequence within

00:16:47.230 --> 00:16:48.980
the data structure.

00:16:49.310 --> 00:16:52.200
We're also using inheritance,
which means that if you have one data

00:16:52.300 --> 00:16:55.960
type that is very similar to another,
but with the addition of several fields,

00:16:56.020 --> 00:16:58.800
then you can inherit the new type,
or you can inherit the old type

00:16:58.960 --> 00:17:00.280
when you create the new type.

00:17:00.410 --> 00:17:04.260
This means to modify your
translator to deal with a new type,

00:17:04.320 --> 00:17:07.570
you typically only have to add one
or two lines to the data translator.

00:17:07.640 --> 00:17:18.120
You don't have to edit an 8,000
line template file anymore.

00:17:18.120 --> 00:17:18.120
Which means, which means, which means,

00:17:19.930 --> 00:17:24.040
We can finally deal with PPOBS easily.

00:17:24.040 --> 00:17:26.640
We'll go back to the keyboard.

00:17:28.260 --> 00:17:31.640
If we look at a sample data translator
for a very simple data structure,

00:17:31.640 --> 00:17:33.140
you can see the main points.

00:17:33.190 --> 00:17:35.400
First of all,
that this structure is text,

00:17:35.410 --> 00:17:36.940
or the translator is text-based.

00:17:36.940 --> 00:17:40.810
Now, doing this allows us to extend the
translator language in the future,

00:17:41.060 --> 00:17:43.040
which was a problem we had
with the template mechanism,

00:17:43.040 --> 00:17:46.620
that it really wasn't able
to be extended very far.

00:17:47.380 --> 00:17:52.340
So, in this particular structure here,
we have six fields,

00:17:52.440 --> 00:17:56.660
and they're each represented
by a line in the translator.

00:17:56.840 --> 00:17:58.520
We've labeled them top, left, right,
bottom.

00:17:58.520 --> 00:18:02.300
This could be an item within a
graphical user interface layout.

00:18:02.320 --> 00:18:06.560
It has some text,
and it has a bounding box.

00:18:06.560 --> 00:18:07.800
It's a very simple structure.

00:18:07.800 --> 00:18:11.560
It's probably so simple that you've
never come across one in real life,

00:18:11.560 --> 00:18:13.050
but it fits on the slide.

00:18:13.090 --> 00:18:15.750
So, let's look at the next slide.

00:18:15.910 --> 00:18:18.700
But most structures are
more complicated than this.

00:18:18.700 --> 00:18:23.340
And the first level of complexity
away from this is lists of items.

00:18:23.510 --> 00:18:27.350
But in Monty, when we define a list,
we use at least two translators.

00:18:27.650 --> 00:18:30.310
First of all, we define a translator
for the list items,

00:18:30.440 --> 00:18:34.420
and then we can include those into
the larger enclosing translator,

00:18:34.450 --> 00:18:37.900
which defines the item,
the entire structure.

00:18:37.900 --> 00:18:40.560
So for the example here,
we have a very simple

00:18:41.000 --> 00:18:46.080
styled text type resource,
or style text list item.

00:18:46.110 --> 00:18:50.670
And this could be for a font menu,
or it could be for anything that

00:18:50.880 --> 00:18:53.410
needs to gather a list of style texts.

00:18:53.880 --> 00:18:57.360
And we first create a translator
for each individual item.

00:18:57.630 --> 00:19:00.140
And in this case,
there's an integer font ID followed

00:19:00.140 --> 00:19:03.620
by a string with the text of the item.

00:19:03.700 --> 00:19:11.170
Then we can include that translator to
define each item of the list of items.

00:19:11.310 --> 00:19:12.920
And that's what the
second translator does.

00:19:12.920 --> 00:19:17.180
And you see that it uses the list
command to include the first translator.

00:19:17.250 --> 00:19:19.840
This way, if the list item changes,
we don't have to change

00:19:19.940 --> 00:19:21.630
the simple list translator.

00:19:21.700 --> 00:19:24.190
We just need to redefine the
structure of the list item.

00:19:24.220 --> 00:19:27.060
And it's time-saving again,
especially if those items appear in

00:19:27.060 --> 00:19:30.450
other types of structures on their
own or in different arrangements.

00:19:30.510 --> 00:19:32.710
We've changed it from one place.

00:19:33.650 --> 00:19:39.190
The next problem we have typically
is that a list of items where all

00:19:39.190 --> 00:19:40.670
the items are the same is quite rare.

00:19:40.670 --> 00:19:44.130
In even the simplest structures,
like a Dittl resource

00:19:44.150 --> 00:19:46.540
from the classic world,
we'll find that there are

00:19:46.540 --> 00:19:49.450
different types of data,
and they're identified by

00:19:49.530 --> 00:19:51.420
one or more keyword values.

00:19:51.420 --> 00:19:55.730
So in Monty,
we refer to these as variant structures,

00:19:55.730 --> 00:19:58.560
and I've shown two very
simple variants up above,

00:19:58.560 --> 00:20:02.990
where the type of the structure is
decided by the value of the first field.

00:20:03.620 --> 00:20:07.180
Now, one is an item, a textual item,
the other is a picture item.

00:20:07.190 --> 00:20:08.880
There could be other fields.

00:20:08.900 --> 00:20:11.690
But to define this in Monty,
we first make a translator

00:20:11.760 --> 00:20:12.930
for the basic type.

00:20:12.930 --> 00:20:16.000
These are the fields that don't
change no matter what the format is.

00:20:16.000 --> 00:20:19.470
And in this case, there's only one field
that doesn't change.

00:20:19.470 --> 00:20:21.910
It's the first item which identifies it.

00:20:22.110 --> 00:20:25.150
Then, having done that,
we can define variant translators by

00:20:25.150 --> 00:20:30.070
just saying that this translator is
a variant of the basic translator,

00:20:30.070 --> 00:20:33.000
where the type field is equal to 1, 2,
or anything.

00:20:33.000 --> 00:20:37.990
Monty uses this information when
it's presented with a block of data.

00:20:38.590 --> 00:20:44.390
It uses this so that it can-- it
uses this information to decide

00:20:44.400 --> 00:20:49.120
which format of the data it has and
generate the proper information.

00:20:49.190 --> 00:20:50.640
So no more case statements.

00:20:50.660 --> 00:20:54.280
You're actually dealing
with actual structures.

00:20:54.700 --> 00:20:58.530
So I've only shown a single
level of variance here,

00:20:58.530 --> 00:21:00.780
where we're deriving two
variants from a common base.

00:21:00.960 --> 00:21:04.680
But it's possible to derive a variant
from a variant from a variant and build

00:21:04.680 --> 00:21:08.220
up entire frameworks of translators.

00:21:08.230 --> 00:21:12.200
And a very important framework for
a lot of you is the power plant one,

00:21:12.270 --> 00:21:14.660
which I'm now going to
demonstrate a little more.

00:21:14.660 --> 00:21:18.660
Thank you.

00:21:24.620 --> 00:21:27.330
So I'm going to show you a more
complicated translator file,

00:21:27.330 --> 00:21:29.970
and you'll see why it
didn't fit on the slide.

00:21:30.020 --> 00:21:35.530
So if we look at-- we have a basic set
of PowerPlant PPOB templates defined

00:21:35.690 --> 00:21:38.160
using the Monty translator language.

00:21:38.340 --> 00:21:41.440
Just out of interest,
you see a lot of them make use of

00:21:41.440 --> 00:21:43.540
inserting existing types to define it.

00:21:43.690 --> 00:21:47.750
For example,
this LTexColumn class is four lines long,

00:21:47.750 --> 00:21:49.240
its definition.

00:21:49.240 --> 00:21:53.000
The old template for this class
would have been 20 or 30 lines long.

00:21:53.010 --> 00:21:55.620
So by making these translations smaller,
they're easier to debug.

00:21:55.790 --> 00:21:57.160
You're building on existing work.

00:21:57.160 --> 00:22:02.550
You don't have to try and debug the
whole 8,000 line thing every time.

00:22:02.890 --> 00:22:07.760
So I have an application here that
I know has a custom type in it.

00:22:07.790 --> 00:22:11.040
And the custom type is a
class with the ID ERCL.

00:22:11.040 --> 00:22:14.520
Now, the existing templates
don't include this,

00:22:14.590 --> 00:22:18.120
but I can just produce a
definition by looking at the

00:22:18.120 --> 00:22:22.280
C type or talking to the engineer,
whatever we normally do,

00:22:22.280 --> 00:22:24.210
and adding this new type.

00:22:24.210 --> 00:22:27.980
I know that this type is based
on the text column class,

00:22:28.000 --> 00:22:29.560
which I just showed you.

00:22:29.850 --> 00:22:32.780
But it has the addition of an icon ID.

00:22:32.800 --> 00:22:36.240
So I'm going to add this field here.

00:22:36.570 --> 00:22:41.900
And I'll give it a little label.

00:22:48.220 --> 00:22:49.490
Save that off.

00:22:49.490 --> 00:22:52.140
And now I'm going to show you a
little tool that we developed pretty

00:22:52.140 --> 00:22:55.680
quickly just to test the Monty
API and to show how really easy it

00:22:55.680 --> 00:22:59.580
is to produce applications developed
or based on this technology.

00:22:59.700 --> 00:23:01.780
This is a simple data
viewing application,

00:23:01.790 --> 00:23:07.290
and I'm going to use it to open our
little power plant application and

00:23:07.290 --> 00:23:11.000
have a look at the PPOPs inside it.

00:23:11.080 --> 00:23:12.640
In fact, there's only one PPOP.

00:23:12.640 --> 00:23:12.640
But if we look down the list, this

00:23:12.880 --> 00:23:17.080
- First element here is
defined as a C error table,

00:23:17.080 --> 00:23:19.900
which was the class that I've
just defined with my one line.

00:23:20.260 --> 00:23:22.860
and right at the end,
these are all the information that

00:23:22.970 --> 00:23:26.370
came from the original Colm view.

00:23:26.450 --> 00:23:29.440
And there's the fields that I added,
the icon.

00:23:29.480 --> 00:23:32.430
Now to implement that new type,
I just had to add one line and

00:23:32.440 --> 00:23:33.650
create a new translator file.

00:23:33.690 --> 00:23:35.700
Because this thing was
in a separate file,

00:23:35.700 --> 00:23:38.690
it's easier to version control it
because you're not modifying the

00:23:38.690 --> 00:23:40.250
same translator over and over again.

00:23:40.400 --> 00:23:43.350
And you can create translator
files for particular projects

00:23:43.350 --> 00:23:44.660
and manage them better.

00:23:44.660 --> 00:23:48.690
But that's about that.

00:23:48.690 --> 00:23:52.390
So and come back to that.

00:23:59.900 --> 00:24:03.140
Now,
because it's easy to add new data types,

00:24:03.150 --> 00:24:05.270
we have another problem,
which is more a problem of

00:24:05.300 --> 00:24:07.610
success than anything else,
that we'll sooner or later

00:24:07.670 --> 00:24:10.350
end up with about 300 or 400
different data translators.

00:24:10.360 --> 00:24:12.860
So we're nearly back to the
situation we had before,

00:24:12.910 --> 00:24:15.800
where the tool needs to know
about every single data type,

00:24:15.800 --> 00:24:18.050
because all of these types
have different field names,

00:24:18.050 --> 00:24:20.320
different structures,
and there are different things

00:24:20.320 --> 00:24:21.580
that need to be taken out.

00:24:21.580 --> 00:24:25.090
For example, the localizable text of a
button could be called title,

00:24:25.120 --> 00:24:29.080
whereas the localizable text of a static
text item could be called the text.

00:24:29.630 --> 00:24:31.260
The tool would need to
know this information.

00:24:31.260 --> 00:24:37.010
Well, it would if it wasn't for Monty,
because Monty provides a mechanism

00:24:37.080 --> 00:24:41.760
of mapping complicated data types
into a set of standard properties,

00:24:41.780 --> 00:24:46.450
which tools can then use to extract,
for example, the localizable text.

00:24:46.460 --> 00:24:49.970
So we'll take two structures here,
where they have very

00:24:49.970 --> 00:24:54.580
different internal structures,
but in both cases, there is some element

00:24:54.710 --> 00:24:56.220
of localizable text.

00:24:56.240 --> 00:24:59.310
But what we can do is we can
define a Monty translator.

00:24:59.320 --> 00:25:01.790
It says, for structure A,
the fourth element is

00:25:01.790 --> 00:25:04.080
the localizable text,
and for structure B,

00:25:04.080 --> 00:25:05.460
it's the third element.

00:25:05.500 --> 00:25:08.800
Now tools can just look for the
locale text property and say,

00:25:08.920 --> 00:25:12.660
I want that, or I want to change that,
or let me do this and that.

00:25:12.720 --> 00:25:16.250
We've defined several standard
properties with Monty for things such as

00:25:16.250 --> 00:25:20.380
localizable text and bounding rectangles,
and all suggestions are welcome.

00:25:20.380 --> 00:25:23.120
But the idea is to keep
the names consistent.

00:25:23.120 --> 00:25:26.030
So now we can treat very
different data types,

00:25:26.030 --> 00:25:28.240
basically using the same tool.

00:25:28.240 --> 00:25:29.080
And now the tool doesn't even
need to know the name of the text.

00:25:29.080 --> 00:25:30.570
It doesn't even need to
know what it's dealing with.

00:25:30.580 --> 00:25:34.040
The tool is lifted away
from needing to know about a

00:25:34.040 --> 00:25:37.660
Dittl or a Powerplant layout,
and now it just knows I have a layout

00:25:37.780 --> 00:25:39.460
with text and bounding rectangles.

00:25:39.460 --> 00:25:42.980
So I'm going to show a
little demo of using this.

00:25:43.060 --> 00:25:46.420
You can have the...

00:25:52.120 --> 00:25:56.540
I have a very,
very simple application here.

00:25:56.550 --> 00:25:58.300
And that's what it says.

00:25:58.930 --> 00:26:01.700
Okay, that took months, that did.

00:26:01.710 --> 00:26:03.930
Okay, so I also have an Apple script.

00:26:05.970 --> 00:26:09.650
And that AppleScript is going
to interface with an application

00:26:09.660 --> 00:26:11.730
that we've written that provides
an AppleScript interface

00:26:11.810 --> 00:26:13.510
to the Monte library.

00:26:13.670 --> 00:26:16.350
What it'll do is it'll open that
application's Dittl resource,

00:26:16.470 --> 00:26:19.660
which was the source of that message,
and change the text of the

00:26:19.660 --> 00:26:22.040
items and resize the button.

00:26:22.040 --> 00:26:24.200
And I'm just going to run this.

00:26:25.100 --> 00:26:29.300
is going to ask me for the
application I want to change,

00:26:29.300 --> 00:26:31.360
which is this simple application.

00:26:31.360 --> 00:26:33.350
Let it run.

00:26:37.990 --> 00:26:40.840
Now I'm going to launch
the same application,

00:26:40.860 --> 00:26:43.050
and it's being translated.

00:26:43.090 --> 00:26:45.020
You notice the button
has also been resized.

00:26:45.080 --> 00:26:47.900
But this Apple script didn't know
anything about the Dittl format.

00:26:47.920 --> 00:26:50.370
If we look at the script again, it

00:26:51.790 --> 00:26:54.350
brains of this is down here.

00:26:54.540 --> 00:26:56.160
And basically it asks for two properties.

00:26:56.250 --> 00:26:58.460
It asks for the name or it
asks for the local text,

00:26:58.500 --> 00:27:00.770
which is the localizable
text of the item,

00:27:00.770 --> 00:27:01.930
and changes it.

00:27:01.930 --> 00:27:05.700
And then it asks for the bounds
of the box and changes that.

00:27:05.760 --> 00:27:07.530
The script doesn't know
that that was a dittle.

00:27:07.530 --> 00:27:10.600
It just knew that there was a layout
with text and bounding rectangles.

00:27:10.600 --> 00:27:13.170
And this is one of the
things you can do with Monty.

00:27:13.310 --> 00:27:15.630
So if you have tools that
need to work on layouts,

00:27:15.630 --> 00:27:18.640
then Monty is going to make
these a lot easier for you.

00:27:18.640 --> 00:27:20.530
If you have data editing tools,
Monty is going to make

00:27:20.530 --> 00:27:21.540
it a lot easier for you.

00:27:21.590 --> 00:27:24.810
In fact, Monty is going to be pretty
useful if you're involved

00:27:24.810 --> 00:27:26.520
in any kind of localization.

00:27:26.580 --> 00:27:28.840
So we hope you're going to use it.

00:27:28.840 --> 00:27:31.310
Now we can go back to the...

00:27:36.650 --> 00:27:38.590
and one of the applications of Monty,
which I'm sure you'll

00:27:38.640 --> 00:27:41.300
be very interested in,
is AppleGlot 3.

00:27:41.300 --> 00:27:44.470
And to talk to us about that,
we've got Mike Butler.

00:27:48.600 --> 00:27:49.600
Thanks, Christian.

00:27:49.600 --> 00:27:53.140
Hello, can you hear me?

00:27:57.030 --> 00:27:58.380
So what is AppleGlot 3?

00:27:58.380 --> 00:28:00.880
I'm sure most of you
know what AppleGlot is,

00:28:00.910 --> 00:28:03.060
so you don't really need
me to go through that.

00:28:03.060 --> 00:28:07.550
But just say that AppleGlot 3 is still
a text extraction and insertion tool.

00:28:07.670 --> 00:28:10.780
is still forms incremental localization.

00:28:10.840 --> 00:28:13.690
But as Colm said, the important thing is
that it's completely new.

00:28:13.780 --> 00:28:15.050
We've thrown away all the sources.

00:28:15.060 --> 00:28:16.420
We've started from scratch.

00:28:16.490 --> 00:28:21.710
So all those problems
you've had with AppleGlot,

00:28:21.710 --> 00:28:23.910
we've had a blank sheet.

00:28:23.910 --> 00:28:23.910
We can start again,
decide how to do it properly.

00:28:25.090 --> 00:28:28.620
So what are the benefits of AppleGlot 3?

00:28:28.660 --> 00:28:31.320
Well, the reason we're all here
this week is Mac OS X.

00:28:31.440 --> 00:28:34.860
So AppleGlot 3 provides Mac OS X support.

00:28:34.920 --> 00:28:38.360
But as Colm said,
AppleGlot 3 is a user of Monty.

00:28:38.410 --> 00:28:41.300
And Monty hides all that
low-level stuff for us.

00:28:41.300 --> 00:28:43.120
We no longer care about data formats.

00:28:43.160 --> 00:28:48.670
All we need is get Monty to look at
our data and decide that's localizable.

00:28:48.810 --> 00:28:52.770
So it could be OS 8, OS 9, or OS 10.

00:28:54.330 --> 00:28:58.200
We also have full Unicode support,
and as Christian also said,

00:28:58.200 --> 00:29:03.180
Unicode neatly gets around a lot of the
encoding problems that you normally have.

00:29:03.260 --> 00:29:06.080
Besides this, it's one of the base
technologies of OS X,

00:29:06.210 --> 00:29:09.940
and it's also a base
technology of Monty itself.

00:29:12.190 --> 00:29:17.480
We know that performance is a big
issue for a lot of AppleGlot users.

00:29:17.480 --> 00:29:21.200
But if you think about it,
AppleGlot has been around since '87.

00:29:21.260 --> 00:29:24.310
The files that AppleGlot used to
process back then were in tens of K,

00:29:24.310 --> 00:29:25.380
hundreds of K.

00:29:25.430 --> 00:29:27.900
Now they're in tens of megabytes.

00:29:28.170 --> 00:29:31.350
AppleGlot just wasn't designed
to handle that sort of data.

00:29:31.490 --> 00:29:33.200
So we've started Scratch so we can.

00:29:33.230 --> 00:29:36.300
We've designed, we've used modern
technologies like Monty,

00:29:36.340 --> 00:29:40.770
and we've used modern techniques
to solve these problems.

00:29:42.480 --> 00:29:46.720
We also know from talking to you
that AppleGlot is not so easy to use.

00:29:46.860 --> 00:29:50.140
So we've designed a
modern user interface.

00:29:50.530 --> 00:29:54.370
And whatever we could make automatable
to take the judge out of the work,

00:29:54.370 --> 00:29:54.920
we did.

00:29:55.000 --> 00:29:57.590
And whatever we couldn't,
we made it easy to use,

00:29:57.860 --> 00:30:00.400
but we also made it as safe as possible.

00:30:00.400 --> 00:30:02.620
We have a number of versions of
the same file hanging around.

00:30:02.810 --> 00:30:06.650
We wanted to make it impossible
to choose the wrong version.

00:30:08.650 --> 00:30:09.210
This is the biggie.

00:30:09.320 --> 00:30:11.700
We made it extensible.

00:30:11.720 --> 00:30:14.290
We didn't want to be back here
in a couple of years going,

00:30:14.290 --> 00:30:15.590
everything's changed again.

00:30:15.710 --> 00:30:17.670
We needed to do AppleGlot from scratch.

00:30:17.670 --> 00:30:21.260
So we've made AppleGlot
scalable in the first case,

00:30:21.260 --> 00:30:23.670
but we've also made it
completely modifiable.

00:30:23.680 --> 00:30:27.490
If a new data format comes along, well,
Monty will look after that first.

00:30:27.490 --> 00:30:30.590
But if a new process comes along,
if you wanted to do something different,

00:30:30.590 --> 00:30:32.540
well,
then you can modify AppleGlot yourselves

00:30:32.650 --> 00:30:34.020
to do whatever you need to do.

00:30:34.020 --> 00:30:37.370
As Colm said, if you needed to link up
with a machine translator,

00:30:37.400 --> 00:30:38.580
then you can do that yourself.

00:30:38.600 --> 00:30:39.890
yourself.

00:30:41.390 --> 00:30:43.580
So before I go on,
you can look at AppleGlot from two ways.

00:30:43.710 --> 00:30:44.980
You can look at it as just a user.

00:30:44.980 --> 00:30:48.390
I want to use AppleGlot 3 just the
way I've always used AppleGlot.

00:30:48.520 --> 00:30:53.020
So I'll just look through some of the new
UI features that we have in AppleGlot.

00:30:53.080 --> 00:30:55.010
We can also look at it--
because it's so flexible,

00:30:55.020 --> 00:30:56.510
you can look at it from a developer.

00:30:56.530 --> 00:30:59.040
It's almost like a framework
for localization tools.

00:30:59.100 --> 00:31:02.540
You can decide,
I want to do something completely

00:31:02.540 --> 00:31:04.250
different with AppleGlot.

00:31:04.260 --> 00:31:05.040
You can do it.

00:31:05.130 --> 00:31:06.480
Chances are you can do it.

00:31:06.600 --> 00:31:10.480
So we'll look at that in the
second section of the presentation.

00:31:11.930 --> 00:31:14.260
So some of the main features of the UI.

00:31:14.260 --> 00:31:16.540
We have automatic and
intelligent file matching.

00:31:16.570 --> 00:31:23.550
If you have a project of, say, 100 files,
if you're localizing in under iOS 8 or 9,

00:31:23.710 --> 00:31:26.620
you'll have four versions of
those files hanging around.

00:31:26.660 --> 00:31:28.360
You'll need to match all of
them up together to perform

00:31:28.510 --> 00:31:29.800
incremental localization.

00:31:29.810 --> 00:31:33.420
If you have OS X, you'll have to match up
two versions of each file.

00:31:33.460 --> 00:31:36.320
Obviously, this takes quite a while.

00:31:36.410 --> 00:31:38.560
So AppleGlot 3 provides a
couple of different mechanisms.

00:31:38.740 --> 00:31:43.360
First, it will provide automatic
matching if it can.

00:31:43.360 --> 00:31:45.170
Where it can't,
it will try to intelligently

00:31:45.170 --> 00:31:46.810
match the files.

00:31:46.820 --> 00:31:49.080
And where it really can't
match any of the files at all,

00:31:49.080 --> 00:31:50.540
it'll let you do it.

00:31:50.550 --> 00:31:51.900
But first, it makes it easy.

00:31:51.900 --> 00:31:54.280
And second,
it just won't let you-- or will try not

00:31:54.280 --> 00:31:55.960
to let you choose the wrong version.

00:31:55.960 --> 00:31:58.710
It should make it a lot more safe.

00:31:59.770 --> 00:32:05.010
Again, if you have a large project, say,
for example, a system folder,

00:32:05.010 --> 00:32:07.840
you're not going to work with
all of those files at one go.

00:32:07.840 --> 00:32:10.660
You're really only generally going
to work with a small section of them.

00:32:10.700 --> 00:32:12.850
So again, if you had a system folder,
you might only work

00:32:12.850 --> 00:32:14.650
with the control panels,
or you might only work

00:32:14.650 --> 00:32:15.700
with the extensions.

00:32:15.700 --> 00:32:18.600
So we've introduced the
concept of file groups.

00:32:18.660 --> 00:32:20.700
This just lets you group
your files together.

00:32:20.700 --> 00:32:23.820
You can look at all your files
as normal under AppleGlot 3,

00:32:23.820 --> 00:32:26.700
or you can decide,
I just want to look at one of my groups.

00:32:26.700 --> 00:32:29.070
So I only want to look at, say,
my control panels,

00:32:29.170 --> 00:32:31.700
or I only want to look at, say,
my extensions.

00:32:31.830 --> 00:32:33.700
So file groups allow us to do this.

00:32:35.410 --> 00:32:38.900
We wanted to make the
UI itself extendable,

00:32:39.040 --> 00:32:41.130
so we've added script support.

00:32:41.130 --> 00:32:42.690
You can run scripts yourself.

00:32:42.800 --> 00:32:45.420
So you can choose a number
of files inside AppleGlot and

00:32:45.420 --> 00:32:47.270
run a script on those files.

00:32:47.300 --> 00:32:49.820
Or you can run them on all
the files in the new lock,

00:32:49.820 --> 00:32:51.300
or whatever you want to do.

00:32:51.300 --> 00:32:54.760
You also added external tool support,
so if you want to view

00:32:54.760 --> 00:32:57.300
files in external tools,
Interface Builder,

00:32:57.300 --> 00:33:01.420
or Resource or whatever,
you can just choose it very

00:33:01.420 --> 00:33:03.900
easily with AppleGlot 3.

00:33:04.930 --> 00:33:07.620
And to support some of this stuff,
we've extended the environment.

00:33:07.620 --> 00:33:09.560
We have a couple of new
folders in there to handle,

00:33:09.560 --> 00:33:12.740
say, plugins and scripts
that I've talked about.

00:33:12.750 --> 00:33:17.660
But we've also given it a distinctive
icon to make it easier to recognize.

00:33:17.670 --> 00:33:20.310
And we've made the folder
itself intelligent.

00:33:20.420 --> 00:33:25.700
So if you drop support files
on the environment folder,

00:33:25.720 --> 00:33:28.370
they'll automatically get
put in the correct subfolder.

00:33:28.560 --> 00:33:31.050
So if you have-- it's
like the system folder.

00:33:31.140 --> 00:33:33.970
Again, if you're dropping on control
panels onto the system folder,

00:33:33.970 --> 00:33:35.600
they go into the control panel folder.

00:33:35.610 --> 00:33:40.860
You drop a plugin on the environment,
it'll go into the plugin folder.

00:33:42.870 --> 00:33:46.880
So I have a tool here which we
use to test AppleGlot itself.

00:33:54.500 --> 00:33:57.650
But it contains some of the
features that I've just described

00:33:57.650 --> 00:34:00.380
and may make it more clear.

00:34:02.180 --> 00:34:05.830
So I'm just going to choose
a small environment here.

00:34:06.160 --> 00:34:09.900
And this window will look pretty similar
to what you normally see with AppleGlot.

00:34:09.990 --> 00:34:15.920
Sorry, can you switch screens?

00:34:17.560 --> 00:34:21.840
OK, so I've just opened-- actually,
I've opened the wrong environment there.

00:34:21.890 --> 00:34:24.280
We'll open up a small environment first.

00:34:29.710 --> 00:34:32.920
OK, this looks pretty much
like your old AppleGlot.

00:34:33.000 --> 00:34:35.970
And we have our four columns representing
the four files that we need to perform

00:34:35.970 --> 00:34:39.370
incremental localization under OS 9.

00:34:39.940 --> 00:34:42.170
As you can see,
AppleGlot hasn't been able

00:34:42.200 --> 00:34:44.380
to match some of the files.

00:34:44.910 --> 00:34:48.440
and it's done one of them,
but we need to match some

00:34:48.440 --> 00:34:49.800
of the others ourselves.

00:34:49.840 --> 00:34:54.080
Now, if this is the old AppleGlot,
you'd have to go off into another file.

00:34:54.080 --> 00:34:56.080
All your files would be
sorted in a different order,

00:34:56.150 --> 00:35:00.150
and you'd have to use standard file
dialog to choose whichever file.

00:35:00.220 --> 00:35:04.220
With AppleGlot 3,
we have contextual menus.

00:35:05.090 --> 00:35:06.730
So you can simply go
down and choose a file,

00:35:06.730 --> 00:35:09.420
but you're only presented
with the appropriate files.

00:35:09.460 --> 00:35:11.340
You're not given all of the files there.

00:35:11.340 --> 00:35:16.580
You're just the two that, in this case,
are available in the new lock folder.

00:35:17.220 --> 00:35:20.340
So I can simply just choose
the appropriate file.

00:35:20.410 --> 00:35:22.720
Now you can see that it's been
able to make an intelligent

00:35:22.780 --> 00:35:26.800
guess at the old lock version,
but this also fills out some more

00:35:26.800 --> 00:35:30.240
information so it's been able to
guess at all the other ones as well.

00:35:30.330 --> 00:35:33.410
So it's done a little bit of
automatic matching for you,

00:35:33.410 --> 00:35:36.800
but you've done some of it as well.

00:35:36.970 --> 00:35:40.540
So just take a look at a
slightly larger environment.

00:35:45.000 --> 00:35:50.800
Okay, this is probably a bit more normal.

00:35:50.800 --> 00:35:53.680
You have a whole load of files.

00:35:53.680 --> 00:35:55.540
There's a lot of information here.

00:35:55.540 --> 00:35:58.160
So as I said, we have file groups.

00:35:58.160 --> 00:35:59.420
And this is an environment
I've used before,

00:35:59.420 --> 00:36:00.820
so I've set up a couple of groups myself.

00:36:00.820 --> 00:36:03.120
I have a control panels
group and an extension group.

00:36:03.120 --> 00:36:06.660
So I simply just select one,
and then I only have those three files.

00:36:06.720 --> 00:36:08.110
I can work my way on those.

00:36:08.110 --> 00:36:09.680
I can process them as I want.

00:36:09.720 --> 00:36:13.730
Or I can switch over
to my extension files,

00:36:13.730 --> 00:36:14.950
do the same.

00:36:14.980 --> 00:36:17.320
And when I want to batch
all of them together,

00:36:17.320 --> 00:36:19.460
I can simply show all of the files
and do whatever I need to do.

00:36:20.940 --> 00:36:23.330
But we've matched all the files here,
so there's a whole lot of

00:36:23.330 --> 00:36:24.390
information here that we don't need.

00:36:24.400 --> 00:36:27.470
We don't need all the
three columns on the right.

00:36:27.580 --> 00:36:30.390
So we can shrink it down
to just show one column.

00:36:35.640 --> 00:36:39.000
as my hard drive spins.

00:36:39.020 --> 00:36:40.380
That is my hard drive,
but it's not that slow.

00:36:40.490 --> 00:36:40.960
Don't worry.

00:36:40.960 --> 00:36:45.070
We hope.

00:36:47.640 --> 00:36:50.270
OK, well, it was a test tool.

00:36:50.370 --> 00:36:53.230
It's not our real application.

00:36:55.220 --> 00:36:56.450
Anyway,
what would have happened there was

00:36:56.520 --> 00:36:57.670
that you'd just see the one column.

00:36:57.750 --> 00:36:59.730
You could resize it as normal,
and all you'd have is

00:36:59.740 --> 00:37:02.300
your one set of files.

00:37:02.380 --> 00:37:05.530
So I'll just go back now to the slides.

00:37:08.570 --> 00:37:11.730
So as I said, the UI is not the big
part of AppleGlot 3.

00:37:11.740 --> 00:37:15.090
It's the architecture,
what that allows you to do.

00:37:15.400 --> 00:37:18.400
So if we'll just take a look at that now.

00:37:18.440 --> 00:37:20.080
Monty, as I said, we use Monty.

00:37:20.160 --> 00:37:23.020
So that takes away a lot of the icky,
low-level stuff for us.

00:37:23.050 --> 00:37:28.930
That leaves AppleGlot itself being
much simpler and much cleaner.

00:37:29.330 --> 00:37:33.590
That leaves us with AppleGlot being, say,
a set of managers that provide services,

00:37:33.750 --> 00:37:34.930
and just a state machine.

00:37:34.930 --> 00:37:38.700
The managers provide services like
managing the environment for you,

00:37:38.700 --> 00:37:41.430
they manage plugins,
they manage errors and

00:37:41.430 --> 00:37:43.440
logs and stuff like that.

00:37:43.440 --> 00:37:47.060
But the power comes from being
able to write your own plugins.

00:37:47.060 --> 00:37:50.230
You can write a plugin that will
change the way the managers work.

00:37:50.310 --> 00:37:52.710
So you can write a plugin that would,
say, change the way the

00:37:52.720 --> 00:37:53.860
glossary manager works.

00:37:53.890 --> 00:37:56.210
So instead of coming back
with just one translation,

00:37:56.220 --> 00:37:59.170
it would come back with, say,
maybe five of the closest matches.

00:37:59.240 --> 00:38:04.390
Or go off to a machine translator and
pull back a translation from that.

00:38:04.840 --> 00:38:07.440
Similarly, the state machine processes
the files for you,

00:38:07.520 --> 00:38:09.810
but you can write plugins that
will fit into the state machine.

00:38:09.960 --> 00:38:11.700
So you can change the way
the state machine works.

00:38:12.330 --> 00:38:15.460
So you can,
if you want to handle a particular

00:38:15.460 --> 00:38:20.260
data format a different way yourself,
you can do that just by overwriting the

00:38:20.260 --> 00:38:23.060
normal default behavior of the plugins.

00:38:23.760 --> 00:38:25.660
Now, there's no UI shown here.

00:38:25.660 --> 00:38:26.620
It's completely separate.

00:38:26.700 --> 00:38:28.200
It's just a user of AppleGlot.

00:38:28.200 --> 00:38:29.820
It's just a user of the services.

00:38:29.840 --> 00:38:33.880
So you can write your own UI or whatever
you want to put on top to control it.

00:38:33.880 --> 00:38:38.500
The UI that we provide, well,
that also has plugins.

00:38:38.550 --> 00:38:42.420
So they just let you alter
your own plugin behavior,

00:38:42.420 --> 00:38:44.500
or let the user alter
your own plugin behavior,

00:38:44.500 --> 00:38:47.690
without you having to write
user interface code yourself.

00:38:47.890 --> 00:38:49.640
So just to look at it
in slightly more detail,

00:38:49.640 --> 00:38:53.000
we have the state machine and the
managers which make up AppleGlot itself.

00:38:53.060 --> 00:38:55.710
Then we have the plugins that the
state machine uses to alter the

00:38:55.710 --> 00:38:58.800
behavior of the state machine,
or how it processes files.

00:38:58.850 --> 00:39:00.550
And we can also see here
where Monty fits in.

00:39:00.640 --> 00:39:02.900
Monty fits in under the plugins.

00:39:03.050 --> 00:39:05.630
So if you're a plugin,
if you don't want to use

00:39:05.630 --> 00:39:09.640
Monty as your base technology,
you can go do whatever you want.

00:39:09.690 --> 00:39:13.710
But obviously,
we believe Monty is the best thing to do.

00:39:13.940 --> 00:39:16.080
The manager's managing
the environment for you,

00:39:16.080 --> 00:39:19.130
and you can write plugins that will
change the way the manager works.

00:39:19.150 --> 00:39:22.740
The UI just sits on top of it all,
and you can write any

00:39:22.850 --> 00:39:24.540
other UI as you want.

00:39:24.540 --> 00:39:26.040
So you can write a
command line interface,

00:39:26.090 --> 00:39:29.140
package the whole of AppleGlot up,
and use it as part of a build system.

00:39:29.240 --> 00:39:32.020
Or you can package it up with
Apple events and just use it

00:39:32.020 --> 00:39:35.000
completely from scripts if you want.

00:39:35.680 --> 00:39:37.480
So just to go through some
of the services we provide,

00:39:37.480 --> 00:39:40.880
we have environment
services that I mentioned.

00:39:40.920 --> 00:39:41.830
These just manage files.

00:39:41.940 --> 00:39:45.380
They do the matching of the
files for you if you want.

00:39:45.660 --> 00:39:47.010
We have glossary services.

00:39:47.040 --> 00:39:48.600
These look after the internal glossary.

00:39:48.600 --> 00:39:51.580
So they look after looking
up translations or asking

00:39:51.580 --> 00:39:53.410
for translations like that.

00:39:54.340 --> 00:39:57.880
We have logging services,
which just log errors and warnings

00:39:57.880 --> 00:40:00.140
and whatever notes you want to log.

00:40:00.140 --> 00:40:01.310
We have plugin services.

00:40:01.330 --> 00:40:02.500
Now you wouldn't normally use these.

00:40:02.500 --> 00:40:04.480
AppleGlot himself uses these
to manage all the plugins.

00:40:04.480 --> 00:40:07.230
But if you needed to control
the plugins yourself,

00:40:07.250 --> 00:40:08.430
you could do that.

00:40:08.840 --> 00:40:11.200
And finally,
we have State Machine Services.

00:40:11.260 --> 00:40:12.970
So this just lets you
control the state machine,

00:40:13.110 --> 00:40:17.010
start it off, stop it,
and get information from it.

00:40:17.310 --> 00:40:20.960
So the snake machine itself,
a bit like the passes you

00:40:20.960 --> 00:40:25.300
have in the current AppleGlot,
has three modes of execution.

00:40:25.300 --> 00:40:27.430
We have extraction,
where you would run through the

00:40:27.430 --> 00:40:30.090
snake machine just to extract data.

00:40:30.150 --> 00:40:31.550
We have insertion,
where it just runs through the

00:40:31.550 --> 00:40:33.210
snake machine to insert data.

00:40:33.280 --> 00:40:36.650
And we have a final mode,
which AppleGlot 3 itself doesn't use,

00:40:36.750 --> 00:40:40.140
but it's there for anybody
who wants to write a plugin.

00:40:40.170 --> 00:40:44.390
You could maybe do verification or
tidy up or do whatever you need to

00:40:44.660 --> 00:40:47.080
do after the file has been created.

00:40:48.080 --> 00:40:50.150
So the state machine itself is
just like any state machine.

00:40:50.240 --> 00:40:53.240
It runs through a series of states.

00:40:53.240 --> 00:40:55.330
It completes everything it
needs to complete in one state

00:40:55.420 --> 00:40:57.280
before moving on to the next.

00:40:57.310 --> 00:41:00.690
The states are kind of
separated out in AppleGlot 3.

00:41:00.900 --> 00:41:03.230
We have preprocessing states,
and these are called before

00:41:03.240 --> 00:41:05.850
any processing is done,
obviously.

00:41:05.930 --> 00:41:09.440
So you'll be called, say,
before a file is opened to be processed.

00:41:09.450 --> 00:41:13.160
You would be called before a
particular data type is processed,

00:41:13.160 --> 00:41:18.140
or it would be called before the
individual piece of data is processed.

00:41:18.150 --> 00:41:20.560
We have the data processing state itself,
where you would either

00:41:20.560 --> 00:41:22.360
extract or insert data.

00:41:22.360 --> 00:41:24.220
And we have the post-processing states.

00:41:24.240 --> 00:41:26.150
And these states just give
you a chance to clean up.

00:41:26.280 --> 00:41:31.340
So after the data type state,
you can maybe get rid of the

00:41:31.380 --> 00:41:33.990
translators or the templates.

00:41:34.090 --> 00:41:37.100
After the file state,
then you maybe close the file or

00:41:37.110 --> 00:41:40.600
do whatever you need to do to tidy
up after processing that file.

00:41:41.730 --> 00:41:44.420
The states themselves
don't contain any logic.

00:41:44.440 --> 00:41:47.110
All they do is they call out
all of the plugins registered

00:41:47.200 --> 00:41:49.370
to be executed in that state.

00:41:49.560 --> 00:41:55.650
And they execute those plugins in order
before moving on to the next state.

00:41:56.110 --> 00:41:58.480
where they will execute all
the plugins that are registered

00:41:58.610 --> 00:42:01.120
to execute in that state,
and it will keep going on as it

00:42:01.120 --> 00:42:03.990
moves through all the different
states in the state machine.

00:42:04.940 --> 00:42:07.040
So the plugins themselves.

00:42:07.090 --> 00:42:09.840
AppleGlot comes with a
set of default plugins.

00:42:09.840 --> 00:42:14.810
These implement the normal behaviors
that you expect AppleGlot to do.

00:42:14.930 --> 00:42:18.390
But because we have these as plugins,
you can just very subtly override

00:42:18.390 --> 00:42:22.220
what it does by providing your
own plugin that does something,

00:42:22.290 --> 00:42:25.040
but doesn't affect any
of the other behaviors.

00:42:25.110 --> 00:42:29.430
Or you can ditch them all together and
do whatever you need to do yourself.

00:42:30.050 --> 00:42:32.990
One single plugin can act as
a number of different plugins.

00:42:33.090 --> 00:42:35.240
So you have one plugin that
may be a state machine plugin,

00:42:35.250 --> 00:42:37.860
and may be a preference panel plugin.

00:42:37.860 --> 00:42:40.660
It's nice for packaging up your
plugins if you want to send it out.

00:42:40.660 --> 00:42:44.330
Or it's also handy for passing
information between plugins.

00:42:44.980 --> 00:42:48.360
So the types of plugins we have,
as I said, we have service plugins.

00:42:48.410 --> 00:42:51.060
So glossary plugins, again,
you're managing your glossary,

00:42:51.060 --> 00:42:53.010
so you can change the way the
glossary lookups are done.

00:42:53.010 --> 00:42:56.500
An example of that, as I said,
was Fuzzy matching our

00:42:56.780 --> 00:42:58.040
machine translation.

00:42:58.060 --> 00:42:59.900
We have glossary file plugins.

00:42:59.900 --> 00:43:02.300
This just manages the way the
glossary is written to disk.

00:43:02.390 --> 00:43:05.870
So if you don't like the way
Apple writes the glossary to disk,

00:43:05.870 --> 00:43:09.350
you can maybe write it as an XML file
or write it in some form that

00:43:09.350 --> 00:43:11.460
some other process needs to use.

00:43:11.460 --> 00:43:13.140
We have log exporters.

00:43:13.240 --> 00:43:15.940
So if you like writing
a log exporter plugin,

00:43:15.940 --> 00:43:18.940
if you want your errors and warnings
to go through the screen so the

00:43:18.940 --> 00:43:21.080
user can do something straight away,
well, you can do that.

00:43:21.210 --> 00:43:22.870
Or you can even go out
to the files as normal.

00:43:24.600 --> 00:43:26.520
We have state machine plugins.

00:43:26.580 --> 00:43:29.180
As I said, they alter the way the
state machine behaves.

00:43:29.230 --> 00:43:30.700
And we've gone through that.

00:43:30.760 --> 00:43:31.750
We have preference plugins.

00:43:31.880 --> 00:43:36.110
And these just let you give the user a
user interface to choose what it wants

00:43:36.110 --> 00:43:40.560
to do with your plugins without you
having to write the interface yourself.

00:43:41.870 --> 00:43:45.980
So the things to take
away from AppleGlot 3.

00:43:45.980 --> 00:43:48.510
AppleGlot 3 works simply and
efficiently with Mac OS 8,

00:43:48.510 --> 00:43:50.310
9, and 10.

00:43:51.100 --> 00:43:53.500
AppleLock3 can be customized
to fit your own requirements,

00:43:53.500 --> 00:43:56.000
so you get AppleGlot to
do what you want to do.

00:43:56.000 --> 00:43:58.990
You don't have to fit in
with the way AppleGlot works.

00:43:59.730 --> 00:44:03.190
And AppleGlot 3, well,
the UI has evolved,

00:44:03.190 --> 00:44:06.000
but we believe that the
potential with the architecture

00:44:06.000 --> 00:44:08.700
means that it's a revolution,
and we believe it is as revolutionary

00:44:09.330 --> 00:44:11.590
as the original AppleGlot itself.

00:44:11.700 --> 00:44:15.450
So I'd just like to welcome Colm
back on stage to run through the

00:44:15.450 --> 00:44:19.630
more information and to get the
questions and answers started.

00:44:19.630 --> 00:44:19.630
Thank you.

00:44:25.990 --> 00:44:26.630
Okay, thank you.

00:44:26.640 --> 00:44:31.660
So I hope that these two technologies
that we're making available to

00:44:31.660 --> 00:44:33.940
you are actually going to be
useful within your processes.

00:44:33.940 --> 00:44:37.370
I know they're certainly going to
be useful internally in Apple in

00:44:37.370 --> 00:44:39.360
our own localization processes.

00:44:39.360 --> 00:44:42.670
So, you know,
there's certainly plenty of information.

00:44:42.670 --> 00:44:45.050
We could go into an
awful lot of depth here.

00:44:45.050 --> 00:44:47.840
I don't think it would be
of value at this stage.

00:44:47.840 --> 00:44:52.600
But these are fairly complex
applications and tools here.

00:44:52.600 --> 00:44:55.880
But we've provided very,
very simple interfaces for you to use.

00:44:55.900 --> 00:45:00.980
And so what we want to do is
we're going to make available

00:45:01.280 --> 00:45:07.700
quite extensive examples,
application, sample applications,

00:45:07.700 --> 00:45:11.140
UI documentation, SDKs, etc.

00:45:11.140 --> 00:45:17.340
And we're going to make these available
to you through the normal WWDR websites.

00:45:17.340 --> 00:45:19.980
And we also have a
contact manager as well,

00:45:19.980 --> 00:45:24.110
who's going to basically handle
all the questions and comments and

00:45:24.110 --> 00:45:25.880
suggestions which you may have.

00:45:25.900 --> 00:45:30.030
And I actively encourage all you users
of these particular technologies to,

00:45:30.110 --> 00:45:33.260
you know, send your feedback,
send your comments to us,

00:45:33.270 --> 00:45:35.520
and we'll certainly respond to them.

00:45:35.520 --> 00:45:38.550
It's only by, you know,
getting us the information and the

00:45:38.550 --> 00:45:42.330
suggestions that we're actually going
to make these and evolve these into

00:45:42.340 --> 00:45:44.560
even better tools and technologies.

00:45:44.560 --> 00:45:48.220
So what I want to do is just
give you an idea of where these

00:45:48.240 --> 00:45:50.440
are in the development cycle.

00:45:50.440 --> 00:45:52.820
First of all, Monty is almost GM.

00:45:52.820 --> 00:45:55.680
In the next couple of weeks,
you're going to see this information.

00:45:55.910 --> 00:45:58.090
And we're going to have a lot of
great information available on

00:45:58.090 --> 00:45:59.710
the developer.apple.com websites.

00:45:59.760 --> 00:46:02.320
The information will
be provided up there.

00:46:02.370 --> 00:46:05.360
It'll be packaged in the
format that you require.

00:46:05.360 --> 00:46:09.510
The Apple framework itself,
we're actually currently just finalizing

00:46:09.510 --> 00:46:12.160
the internal architecture at the moment.

00:46:12.160 --> 00:46:15.560
So in the next month or so,
you're going to start to see the first

00:46:15.560 --> 00:46:17.900
alpha and beta applications up there.

00:46:17.900 --> 00:46:21.200
And I actively, again,
encourage you to take those applications,

00:46:21.290 --> 00:46:23.360
use them for, you know,
whatever you want,

00:46:23.380 --> 00:46:25.340
sample projects or live projects.

00:46:25.340 --> 00:46:25.860
Give us the feedback.

00:46:25.950 --> 00:46:29.580
Because we have a fairly
aggressive GM target date

00:46:29.580 --> 00:46:34.530
in a couple of months' time,
and we certainly want to incorporate as

00:46:34.560 --> 00:46:37.900
much features from you guys as possible.

00:46:37.900 --> 00:46:40.830
And we also actively encourage
you to start with the SDKs,

00:46:40.940 --> 00:46:44.330
look at how you can actually customize
the operation of particularly

00:46:44.330 --> 00:46:47.390
Apple's lot and how you can get
that working more effectively

00:46:47.390 --> 00:46:49.360
and efficiently in your process.

00:46:49.360 --> 00:46:53.070
So what I'd like to do is just
point you at a related session

00:46:53.070 --> 00:46:55.880
immediately following this session.

00:46:55.900 --> 00:46:58.060
We've got a
Mac OS X localization session,

00:46:58.060 --> 00:47:00.540
session 157, following in this hall.

00:47:00.540 --> 00:47:03.560
And I'd encourage you to
attend that session also.

00:47:03.580 --> 00:47:06.480
There's some very valuable
information to be learned about what

00:47:06.480 --> 00:47:08.080
you need to do to localize for X.

00:47:08.080 --> 00:47:16.000
And that session is going to run for
approximately an hour and a half also.

00:47:16.000 --> 00:47:20.160
So what I want to do now is actually,
I know a number of you have questions,

00:47:20.220 --> 00:47:22.630
so I'd like to encourage you to...