WEBVTT

00:00:10.750 --> 00:00:12.700
Thank you all for coming.

00:00:12.700 --> 00:00:16.160
This session is about QuickTime for Java.

00:00:16.160 --> 00:00:22.700
We've been in QuickTime's
install since QuickTime 3.

00:00:22.700 --> 00:00:27.940
We provide a meeting place for the
two very interesting technologies

00:00:27.940 --> 00:00:31.500
in both QuickTime and in Java,
of course.

00:00:31.500 --> 00:00:38.110
What I'd like to do is to cover basically
a sort of summation of where we are

00:00:38.120 --> 00:00:40.860
with QuickTime for Java currently.

00:00:40.860 --> 00:00:43.700
We'd actually like to profile
a couple of products that

00:00:43.700 --> 00:00:45.490
are using QuickTime for Java.

00:00:45.490 --> 00:00:51.510
If you saw the keynote this morning,
you had the web objects part of that

00:00:51.510 --> 00:00:54.670
where they had the movie being shown.

00:00:54.690 --> 00:00:59.600
That was using QuickTime for
Java because the runtime environment

00:01:00.000 --> 00:01:02.740
for that was actually Java.

00:01:02.820 --> 00:01:05.780
So you're seeing the
QuickTime capabilities being activated.

00:01:06.850 --> 00:01:10.090
That's very much a part of some
of the uses that developers are

00:01:10.190 --> 00:01:12.850
putting QuickTime for Java to.

00:01:12.850 --> 00:01:17.020
We'll go over some other
products during the talk.

00:01:17.020 --> 00:01:22.780
Then we're going to be posing a question,
Java for QuickTime, Java and QuickTime.

00:01:22.780 --> 00:01:24.220
We'll come back to that

00:01:26.190 --> 00:01:28.740
Okay, so just in case you're
new to the technology,

00:01:28.740 --> 00:01:33.100
I'd like to just give you a very brief
overview of what QuickTime for Java is.

00:01:33.100 --> 00:01:37.150
I'm going to call it QtJava now,
it's a little bit less words.

00:01:37.150 --> 00:01:42.350
So it's a Java class library
and it provides access from

00:01:42.350 --> 00:01:47.020
a Java language environment,
from a Java runtime environment to

00:01:47.020 --> 00:01:49.710
the underlying QuickTime engine.

00:01:50.300 --> 00:01:53.290
What we decided to do with
this was rather than to

00:01:53.290 --> 00:01:57.320
invent a completely new API,
we decided to base the

00:01:57.320 --> 00:02:01.640
QuickTime for Java classes on top
of the existing QuickTime C API.

00:02:01.640 --> 00:02:05.140
So we use structures that are very
familiar to all of you like movies,

00:02:05.140 --> 00:02:08.320
movie controllers, tracks,
media objects and so forth.

00:02:08.360 --> 00:02:12.910
And we organize these into a set
of Java packages that correspond

00:02:12.910 --> 00:02:17.760
roughly to the way that QuickTime is
distributed in the C headers

00:02:17.760 --> 00:02:19.270
because it kind of makes sense.

00:02:19.390 --> 00:02:24.200
So you've got movie objects in
tracks and media in movies packages.

00:02:24.200 --> 00:02:29.180
You've got sound things in sound package,
sequence grabbers in a sequence package.

00:02:29.250 --> 00:02:33.960
And packages in Java are just a way of
sort of breaking down the name space.

00:02:34.040 --> 00:02:37.730
It also provides some
additional services.

00:02:37.770 --> 00:02:40.970
One of the things we wanted to
do with QuickTime for Java was to

00:02:40.970 --> 00:02:48.400
make it easy for Java engineers and
Java developers to use QuickTime in

00:02:48.490 --> 00:02:51.300
a very sort of simplified manner.

00:02:51.300 --> 00:02:54.110
If you want to make a movie
and put it up in an applet,

00:02:54.200 --> 00:02:57.140
then you can do it in a couple of
lines of code rather than having

00:02:57.140 --> 00:02:59.140
to write a whole bunch of C code.

00:02:59.140 --> 00:03:03.130
And you can actually get started
with QuickTime for Java with very

00:03:03.580 --> 00:03:08.100
little knowledge of QuickTime and
just use some kind of helper

00:03:08.100 --> 00:03:10.400
classes and some capabilities.

00:03:10.600 --> 00:03:15.870
We also wanted to provide some
extended presentation focus on

00:03:16.120 --> 00:03:17.500
presenting media in a Java environment.

00:03:17.500 --> 00:03:20.190
Giving you sort of programmatic control.

00:03:20.290 --> 00:03:24.150
We'll actually go through a
demo that does some of that.

00:03:25.200 --> 00:03:30.920
So the current release of
QuickTime for Java is QtJava 4.1.

00:03:31.210 --> 00:03:36.230
We just changed the version
number with QuickTime with QtJava.

00:03:36.240 --> 00:03:41.100
Originally we were going to version
our releases with the version of the

00:03:41.100 --> 00:03:46.260
QuickTime API set that we are matched to,
but we decided to change that

00:03:46.270 --> 00:03:50.870
just to document the version
of QuickTime we go out with.

00:03:51.270 --> 00:03:57.840
The Qt Java that's in 4.1.1 currently
basically supports the 4.1 APIs that,

00:03:57.950 --> 00:04:06.600
sorry, it represents the QuickTime 4
APIs that are in the QuickTime 4

00:04:06.600 --> 00:04:12.320
runtime and it will provide 4.1
APIs in the subsequent release.

00:04:12.400 --> 00:04:16.460
An important thing to understand
about what that means is the

00:04:16.460 --> 00:04:21.620
functionality of QuickTime involves,
evolves in two distinct areas.

00:04:21.700 --> 00:04:25.130
The first area that involves is
that you have an API and some

00:04:25.130 --> 00:04:29.330
additional capability of QuickTime is
presented to developers and to

00:04:29.330 --> 00:04:32.180
programs using an existing API.

00:04:32.200 --> 00:04:35.800
If you think of the way that streaming
was incorporated into QuickTime,

00:04:35.800 --> 00:04:40.390
for instance you can open a
movie with just giving it a URL.

00:04:40.400 --> 00:04:42.360
In QuickTime 3 that was a file.

00:04:42.360 --> 00:04:48.980
When QuickTime 4 came about you could
use the same API but you could open up an

00:04:48.980 --> 00:04:52.850
HTTP or FTP URL with that same API set.

00:04:52.950 --> 00:04:57.830
So even though we may not have 4.1
APIs in the current Qt Java release,

00:04:57.950 --> 00:05:00.020
you can still access features of that.

00:05:00.080 --> 00:05:03.260
You just don't have API access
to the new features.

00:05:03.300 --> 00:05:07.090
And we're going to try and bridge
that gap and basically get to a parity

00:05:07.130 --> 00:05:09.430
with that at some point in the future.

00:05:10.430 --> 00:05:13.850
Some of the biggest changes
that we made in 4.1 for Qt

00:05:13.850 --> 00:05:17.120
Java was to deprecate AWT usage.

00:05:17.120 --> 00:05:20.220
Now we're not saying we don't
like AWT or that we're not

00:05:20.310 --> 00:05:24.360
going to work in an AWT context,
but what we wanted to do was to make

00:05:24.650 --> 00:05:30.280
an explicit statement about where
you're depending on Java AWT classes

00:05:30.280 --> 00:05:35.280
and services in your Java application.

00:05:35.290 --> 00:05:38.100
Now there's a couple of
reasons why we would do that.

00:05:38.100 --> 00:05:42.280
One of them we'll actually discuss a
little bit later on in the session today.

00:05:42.430 --> 00:05:46.710
In IBM's website,
they've been developing a very

00:05:46.710 --> 00:05:49.590
interesting technology called Direct DOM.

00:05:49.660 --> 00:05:53.310
And it is a way for you to author
a complete web page in Java,

00:05:53.310 --> 00:05:56.770
very similar to the way that
you do it in JavaScript.

00:05:56.770 --> 00:06:02.000
There's a whole set of Java classes that
represent the document object model of

00:06:02.000 --> 00:06:04.520
a web page as a set of Java classes.

00:06:04.520 --> 00:06:10.030
And those Java classes interact with
the web browser's rendering agent in

00:06:10.030 --> 00:06:12.920
the same way that JavaScript does.

00:06:12.920 --> 00:06:17.780
But you're in Java and you have all
of the extra capability of a Java VM.

00:06:17.780 --> 00:06:21.240
But the really interesting part of this
is that you don't have Java AWT there.

00:06:21.360 --> 00:06:22.710
You're not writing an applet.

00:06:22.820 --> 00:06:29.040
You're actually authoring using the
JavaScript direct document model objects.

00:06:29.040 --> 00:06:31.520
So there's no AWT there.

00:06:31.520 --> 00:06:34.040
And we don't really need
AWT and Qt Java as such.

00:06:34.040 --> 00:06:38.400
We have some classes that integrate
with Java.AWT and for those of you

00:06:38.400 --> 00:06:42.360
who are not familiar with Java,
the AWT is the display packages

00:06:42.840 --> 00:06:46.810
abstract windowing toolkit
is what the AWT stands for.

00:06:46.870 --> 00:06:48.690
If you're interested in
the Direct DOM technology,

00:06:48.780 --> 00:06:53.000
alphaworks.com has an alpha version
of that up on the website and we'll

00:06:53.000 --> 00:06:56.750
be contributing to that with some
Qt Java stuff in the near future.

00:06:58.970 --> 00:07:03.540
So we also, as part of this migration
away from a dependency on AWT,

00:07:03.540 --> 00:07:05.620
we also introduced a new event model.

00:07:05.620 --> 00:07:08.210
And we have a QtEvents superclass.

00:07:08.330 --> 00:07:14.140
It uses the same listener broadcast model
that Java presents and uses throughout.

00:07:14.140 --> 00:07:18.140
We base our event subsystem
on the core event class,

00:07:18.140 --> 00:07:22.260
and then the AWT event
system is built off this way.

00:07:22.260 --> 00:07:24.350
And we have the same type of model.

00:07:24.490 --> 00:07:26.830
We have mouse listeners and so forth.

00:07:28.250 --> 00:07:34.360
And we also reworked some of the way that
we allow you to access QuickTime-specific

00:07:34.500 --> 00:07:37.460
features in the QtJava spaces.

00:07:37.620 --> 00:07:41.460
And in the QtZoo demo,
which we'll get to fairly soon,

00:07:41.460 --> 00:07:45.140
you'll see that we have like
a display space with various

00:07:45.140 --> 00:07:46.750
different elements in it.

00:07:46.900 --> 00:07:51.020
And there's a new controller
architecture for the programmer

00:07:51.020 --> 00:07:54.960
to describe interest in those
events and go forward from there.

00:07:57.210 --> 00:08:03.690
The QtZoo application was
written primarily to focus on and

00:08:03.750 --> 00:08:07.740
highlight some of the specific
technologies that QtJava provides.

00:08:07.780 --> 00:08:12.440
Its main focus is in the areas of spaces.

00:08:12.440 --> 00:08:15.550
It uses a compositor,
which will composite various different

00:08:15.550 --> 00:08:17.140
elements like text and movies.

00:08:17.140 --> 00:08:22.900
It uses mouse control handling so
that the user can interact with those.

00:08:22.920 --> 00:08:26.600
And it uses the new event
handling structure that we have.

00:08:26.600 --> 00:08:26.960
And that's the new event handling
structure that we have in the QtJava.

00:08:26.960 --> 00:08:32.330
So with that,
I'd like to bring up Michael Hopkins.

00:08:32.460 --> 00:08:35.080
He's from Developer Relations at Apple.

00:08:35.100 --> 00:08:37.730
And he'll be talking about QtZoo.

00:08:37.740 --> 00:08:39.570
Thank you.

00:08:39.760 --> 00:08:43.760
Now the QTZoo application was
developed by myself and Levi Brown,

00:08:43.760 --> 00:08:44.300
who's also here.

00:08:44.300 --> 00:08:48.780
Stand up please, Levi.

00:08:49.780 --> 00:08:53.780
We designed this primarily as a
learning tool to get people who

00:08:53.780 --> 00:08:58.110
were unfamiliar with QuickTime for
Java to sort of experience the things

00:08:58.110 --> 00:09:00.440
that QuickTime for Java is good for.

00:09:00.440 --> 00:09:03.260
When most people think
about QuickTime for Java,

00:09:03.270 --> 00:09:08.330
they associate QuickTime for Java with
QuickTime and therefore also with movies.

00:09:08.340 --> 00:09:12.980
Everybody knows that QuickTime has
rich media presentation features,

00:09:12.980 --> 00:09:17.320
support for various file system,
or excuse me, media formats.

00:09:17.820 --> 00:09:21.040
But there are a lot of other really
cool things that QuickTime offers.

00:09:21.040 --> 00:09:27.010
So we wanted to go ahead and introduce
and show how to use those various other

00:09:27.240 --> 00:09:30.920
types of support and brand new features.

00:09:30.920 --> 00:09:35.080
So what did we do with the Zoo project?

00:09:35.080 --> 00:09:38.240
First of all,
it's designed as a kiosk application.

00:09:38.270 --> 00:09:42.800
It's a representation of something
perhaps you might find in an actual

00:09:42.800 --> 00:09:44.990
zoo at an informational booth.

00:09:45.060 --> 00:09:46.760
It runs full screen.

00:09:47.620 --> 00:09:49.920
And takes over the entire user interface.

00:09:49.920 --> 00:09:53.190
This allows us to not only
customize the interface,

00:09:53.190 --> 00:09:58.490
but really take control and only show
what we want to show and simplify it.

00:09:59.770 --> 00:10:02.550
The first feature we wanted to
demonstrate was the ability to

00:10:02.550 --> 00:10:05.390
do irregular region head testing.

00:10:05.690 --> 00:10:08.850
We also have transitions.

00:10:08.940 --> 00:10:14.510
We have a series of different regions
in the zoo that you can mouse over,

00:10:14.510 --> 00:10:16.060
and they are not just squares.

00:10:16.210 --> 00:10:20.960
The AWT, if you were just using Java,
you'd be able to do hit testing,

00:10:21.030 --> 00:10:25.900
but not in the same manner where
we have very complex shapes that

00:10:25.900 --> 00:10:29.600
you can mouse in and mouse over,
and I'll show that in the demo later.

00:10:29.810 --> 00:10:35.100
We also have transitions between
various areas in the zoo.

00:10:35.240 --> 00:10:39.080
We also wanted to show how to play sound,
and not just AU files

00:10:39.080 --> 00:10:43.100
such as sun supports,
but various other types of sound files,

00:10:43.100 --> 00:10:44.910
AU, MPEGs, etc.

00:10:45.100 --> 00:10:49.100
We wanted to show how to play
movies and do custom controls.

00:10:49.450 --> 00:10:52.600
Additionally, as I mentioned,
we do full screen mode.

00:10:53.060 --> 00:10:54.680
Bless you.

00:10:55.610 --> 00:10:58.500
We also finally show how to
do basic QuickTime drawing

00:10:58.500 --> 00:11:01.190
operations to draw text.

00:11:01.470 --> 00:11:03.550
So I'm going to show each one of
these features individually and

00:11:03.590 --> 00:11:05.240
talk a little bit about them.

00:11:05.290 --> 00:11:09.890
As I mentioned, Qt Java allows complex
region hit testing,

00:11:09.900 --> 00:11:11.490
and you do this for free.

00:11:11.610 --> 00:11:14.760
So as you can see in the tiger,
when you move the mouse over that region,

00:11:14.760 --> 00:11:16.290
it automatically highlights.

00:11:16.500 --> 00:11:19.510
Get that all for free,
no additional work needed.

00:11:20.240 --> 00:11:21.870
Transitions.

00:11:21.870 --> 00:11:25.210
Since QuickTime supports all the
standard types of transitions such

00:11:25.210 --> 00:11:31.380
as wipes and iris in and outs and
fades and crossfades and dissolves,

00:11:31.380 --> 00:11:34.100
we decided we'd show how to
take advantage of that feature.

00:11:34.100 --> 00:11:38.390
So we have two different main pages,
and when you click from page to page,

00:11:38.390 --> 00:11:41.380
there's a transitional
wipe between those two.

00:11:41.720 --> 00:11:43.700
It's very easy to use and it looks great.

00:11:43.700 --> 00:11:47.770
Adds that additional visual interest.

00:11:48.750 --> 00:11:53.130
As you can hear the tiger growling,
we play sounds.

00:11:53.140 --> 00:11:54.660
Sound playing is very easy.

00:11:54.660 --> 00:11:58.890
Not only do you as a developer have to
not worry about the format of the sound,

00:11:58.990 --> 00:12:03.500
but you also for free get
support for sounds contained

00:12:03.760 --> 00:12:07.560
on the network somewhere,
either on a streaming

00:12:07.560 --> 00:12:10.420
server or on an FTP server.

00:12:10.420 --> 00:12:13.360
It doesn't matter to you as a
developer where that file is.

00:12:13.360 --> 00:12:16.190
You can still use QuickTime for
Java in the same manner and

00:12:16.200 --> 00:12:17.730
get that support for free.

00:12:20.300 --> 00:12:23.110
Playing Movies.

00:12:23.110 --> 00:12:26.480
Of course, everybody knows that
QuickTime gives you movie support.

00:12:26.540 --> 00:12:29.790
As I mentioned, it gives you different
file type of support.

00:12:29.980 --> 00:12:33.160
MPEG, as you heard in the keynote,
now we're going to be

00:12:33.160 --> 00:12:35.200
supporting MPEG-1 and MPEG-2.

00:12:35.200 --> 00:12:38.300
If you use QuickTime for Java when
those features are added to QuickTime,

00:12:38.300 --> 00:12:41.200
you'll get that functionality for
free in your Java application.

00:12:41.400 --> 00:12:43.200
Something that's really cool.

00:12:43.310 --> 00:12:47.330
How many Java applications
can play DVD-quality movies?

00:12:50.980 --> 00:12:52.760
Oops, excuse me.

00:12:52.760 --> 00:12:54.560
And custom controls.

00:12:54.650 --> 00:12:57.190
There's nothing wrong with the
controls that QuickTime gives you.

00:12:57.200 --> 00:12:58.310
They're very nice.

00:12:58.450 --> 00:13:02.100
However, if you have an application
where you want complete control,

00:13:02.270 --> 00:13:08.140
you can use QuickTime for Java's custom
buttons to customize your interface.

00:13:08.200 --> 00:13:10.420
And we've done that to
provide only a rewind,

00:13:10.420 --> 00:13:12.880
play,
and stop button instead of allowing users

00:13:12.880 --> 00:13:15.060
to have access to the entire controller.

00:13:15.540 --> 00:13:17.970
Again, this is very easy.

00:13:19.070 --> 00:13:21.460
Finally, we allow full screen mode.

00:13:21.510 --> 00:13:24.980
Normal AWT windows do not
allow you to hide the menu bar,

00:13:24.980 --> 00:13:27.760
but with QuickTime for Java,
you can do so.

00:13:29.110 --> 00:13:31.430
Oh, and basic QuickDraw text.

00:13:31.460 --> 00:13:34.800
Any QuickDraw routines,
not just text drawing, but move to,

00:13:34.800 --> 00:13:40.150
line to, drawing shapes, drawing regions,
you can do that in QuickTime for Java.

00:13:40.230 --> 00:13:43.560
So if you have a whole bunch of
old QuickDraw toolbox code and

00:13:43.560 --> 00:13:48.400
you don't want to do AWT drawing,
you can do that in a QuickDraw graphics

00:13:48.400 --> 00:13:51.140
context using QuickTime for Java.

00:13:51.270 --> 00:13:55.250
Again, this works cross-platform
on Mac and Windows.

00:13:55.590 --> 00:13:57.570
Now we're going to have a demo.

00:13:59.210 --> 00:14:01.640
So as you can see,
all the media is being loaded now.

00:14:01.640 --> 00:14:03.920
As I mentioned, we have full screen.

00:14:03.920 --> 00:14:06.040
We can move around here
to the various animals.

00:14:06.040 --> 00:14:07.840
You'll see how fast
this highlight occurs.

00:14:07.840 --> 00:14:14.010
We're applying real-time transference
effects in a Java application very fast.

00:14:15.200 --> 00:14:17.330
You can hear the sound of the elephant.

00:14:17.370 --> 00:14:20.700
And you see the QuickTime transition
there between these two panes.

00:14:20.700 --> 00:14:23.080
We have a movie playing in here.

00:14:23.420 --> 00:14:26.200
These are all different types of medias
that are being drawn using QuickTime.

00:14:26.200 --> 00:14:29.200
We have Photoshop files, JPEG files,
you can have TIFFs.

00:14:29.200 --> 00:14:31.200
Again, anything that QuickTime supports.

00:14:31.200 --> 00:14:35.200
Same code on your part,
but you get that support.

00:14:35.470 --> 00:14:41.180
Custom controllers here to rewind, stop,
start the playing.

00:14:41.800 --> 00:14:44.000
This updating is done
for you automatically.

00:14:44.000 --> 00:14:49.540
You don't have to manage individual
images and refreshing those as the

00:14:49.550 --> 00:14:51.200
user interacts with those controls.

00:14:51.420 --> 00:14:53.790
So that's very powerful.

00:14:54.390 --> 00:14:56.290
Again, we can see the transitions.

00:14:56.380 --> 00:15:02.810
You also notice that it's very fast.

00:15:05.700 --> 00:15:10.160
Do that in your
Java application using JMF.

00:15:10.250 --> 00:15:11.260
And that's what I have.

00:15:11.380 --> 00:15:14.260
So thank you very much, and back to you,
Bill.

00:15:15.000 --> 00:15:19.900
The main focus of this, of course,
is that we're writing these

00:15:20.010 --> 00:15:23.400
applications in a Java context.

00:15:23.490 --> 00:15:29.910
We're in the QDZoo application,
we're making quite extensive use of the

00:15:29.910 --> 00:15:34.400
QuickTime's capability as a media engine.

00:15:34.400 --> 00:15:36.800
As Michael was saying,
we're using the transitions.

00:15:36.850 --> 00:15:38.900
But all of the compositing
that's being done there,

00:15:38.900 --> 00:15:43.300
the whole assemblage of that image
that you're seeing and the control

00:15:43.380 --> 00:15:46.840
of the behavior and everything,
is all being done from Java code.

00:15:46.950 --> 00:15:49.900
It's not just a movie that you've
sort of authored and distributed.

00:15:49.900 --> 00:15:52.880
It's actually a running Java application.

00:15:52.880 --> 00:15:56.900
And this is very much the kind of
thing that we're seeing with developers

00:15:56.900 --> 00:16:00.600
who've been using our stuff currently,
that they're in some

00:16:00.600 --> 00:16:04.340
kind of Java context,
and they're using QuickTime to give them

00:16:04.340 --> 00:16:08.900
the kind of capabilities that they don't
get with the normal sets of classes.

00:16:08.900 --> 00:16:12.490
classes that Java provides.

00:16:12.720 --> 00:16:20.490
What I want to do now is go through
some of the products that have

00:16:20.510 --> 00:16:23.200
been using QuickTime for Java.

00:16:23.200 --> 00:16:28.270
The CineKit is an application
that is primarily focused

00:16:28.370 --> 00:16:29.570
around authoring movies.

00:16:29.620 --> 00:16:34.840
TV/Radio is a network-based radio,
and we saw a bit of that in

00:16:34.840 --> 00:16:36.600
the QuickTime overview session.

00:16:36.810 --> 00:16:40.660
We've also got the
Oracle Intermedia story,

00:16:40.660 --> 00:16:45.600
and we'll talk a little bit
about how that's being done.

00:16:45.660 --> 00:16:49.440
One thing I should actually say
about the Zoo application before

00:16:49.790 --> 00:16:53.770
I forget is that the Zoo is broken
down into a set of tutorials.

00:16:53.780 --> 00:16:57.670
There's, I think,
ten tutorials just to do different parts,

00:16:57.670 --> 00:16:59.560
and that's actually
available on Apple's website.

00:16:59.600 --> 00:17:02.600
We'll give you the URL at
the end of the session.

00:17:02.600 --> 00:17:05.070
There's some comments,
documentation about each of

00:17:05.070 --> 00:17:06.520
the examples and everything.

00:17:06.600 --> 00:17:09.220
And the whole source code for that,
I think,

00:17:09.380 --> 00:17:11.590
is also available at the website.

00:17:11.600 --> 00:17:12.600
So CineKit.

00:17:12.620 --> 00:17:16.600
CineKit's a tool that's been built
by a company called Expressto.

00:17:16.620 --> 00:17:18.600
The URL is expresso.com.

00:17:18.940 --> 00:17:20.600
They're a small company.

00:17:20.600 --> 00:17:25.600
They've been working in university
contexts for quite a number of years.

00:17:25.600 --> 00:17:28.600
They've been using
QuickTime for a long time.

00:17:28.600 --> 00:17:32.610
They have a very unique set of
requirements that they wanted

00:17:32.610 --> 00:17:34.600
from the use of QuickTime.

00:17:34.600 --> 00:17:35.160
What they wanted to be able to do
was to make sure that they were able

00:17:35.160 --> 00:17:35.600
to use QuickTime for a long time.

00:17:35.600 --> 00:17:36.600
They wanted to be able to use
QuickTime for a long time.

00:17:36.600 --> 00:17:38.480
What they wanted to be able to do was
to provide a different kind of metaphor

00:17:38.600 --> 00:17:41.600
for people to create presentations.

00:17:41.600 --> 00:17:47.500
They also deal with children, with youth,
as well as more sort of like

00:17:47.580 --> 00:17:50.510
professors and lecturers and so forth.

00:17:50.910 --> 00:17:54.470
They had originally started
off writing in C and C++,

00:17:54.630 --> 00:17:58.580
but given the size of the company,
it was actually like

00:17:58.680 --> 00:18:01.040
just a research project.

00:18:01.040 --> 00:18:04.070
They wanted to go over into
Java because to get money,

00:18:04.070 --> 00:18:08.370
financial support, to support their users
across different platforms,

00:18:08.370 --> 00:18:11.710
they needed to be both on
Windows as well as Macintosh.

00:18:12.260 --> 00:18:16.440
And QuickTime for Java gave them
that capability because they're a

00:18:16.560 --> 00:18:22.000
QuickTime-centric tool and they can
access QuickTime directly through QtJava.

00:18:22.000 --> 00:18:24.540
And of course,
they chose QuickTime because of the

00:18:24.540 --> 00:18:28.020
extensive support that QuickTime has
for different media formats and

00:18:28.020 --> 00:18:29.660
that was a very strong focus.

00:18:29.680 --> 00:18:32.570
But they're a Java application
that's using all of the

00:18:32.570 --> 00:18:34.450
Java application frameworks.

00:18:34.460 --> 00:18:38.520
So if we can go to Demo Machine 3,
please.

00:18:40.250 --> 00:18:45.470
So this is an example of
their application running.

00:18:45.620 --> 00:18:50.660
They use like a sort of a storyboard
scene description type of language.

00:18:50.680 --> 00:18:55.400
And what we're basically doing
here is authoring a movie.

00:18:55.590 --> 00:18:58.540
And what I'm going to do is
to-- I've created a scene,

00:18:58.540 --> 00:19:00.300
and I'm going to add a couple of shots.

00:19:00.380 --> 00:19:07.620
And I can collapse the scene down,
and I can open it up.

00:19:07.620 --> 00:19:13.220
Again, I can have several scenes,
and away we go like that.

00:19:13.330 --> 00:19:17.470
So let's just grab a movie here.

00:19:23.500 --> 00:19:25.940
They have this sort of
preview window here.

00:19:25.940 --> 00:19:29.470
They have a sort of a movie,

00:19:29.680 --> 00:19:32.920
All through editing kind of window
with in points and out points,

00:19:32.960 --> 00:19:38.300
you can see a display of the
waveform that's in the movie here.

00:19:38.300 --> 00:19:40.820
You can preview the movie
and all that kind of thing.

00:19:41.030 --> 00:19:45.370
And I'm not going to do anything
there just for the moment.

00:19:45.410 --> 00:19:53.020
Let's grab a picture here.

00:19:53.020 --> 00:19:53.020
Hello.

00:20:00.300 --> 00:20:04.800
I love demoing other people's products.

00:20:04.800 --> 00:20:07.660
OK, so that's not working.

00:20:07.910 --> 00:20:10.790
All right, can we go back to the slides,
please?

00:20:11.000 --> 00:20:13.190
I'm not going to pursue that.

00:20:13.690 --> 00:20:16.280
Basically the idea of that,
I don't know what I've done wrong,

00:20:16.280 --> 00:20:18.040
it's probably something my fault there.

00:20:18.040 --> 00:20:23.340
But basically the point about that is
that it's a cross-platform company.

00:20:23.340 --> 00:20:26.650
They have the same product
on both Mac and Windows.

00:20:26.660 --> 00:20:29.220
They've been in public
beta for a while now.

00:20:29.220 --> 00:20:31.180
You can register with their beta program.

00:20:31.190 --> 00:20:33.340
You can download their application.

00:20:33.350 --> 00:20:36.790
It imports media,
all the different types of media

00:20:36.800 --> 00:20:38.810
that QuickTime understands.

00:20:39.080 --> 00:20:44.000
You can do media capturing
into the application.

00:20:44.000 --> 00:20:47.780
And you can save all that
up and export it as a movie.

00:20:47.790 --> 00:20:51.000
It's quite an interesting
full-featured set.

00:20:51.000 --> 00:20:54.150
And if you go to their website,
you can sign up.

00:20:54.250 --> 00:20:58.400
And they've had children using
this from like year five upwards.

00:20:58.400 --> 00:20:59.740
And it's quite interesting.

00:20:59.740 --> 00:21:05.400
The second company, which is quite a bit
bigger than the first one,

00:21:05.400 --> 00:21:06.480
is Oracle.

00:21:06.480 --> 00:21:10.740
Oracle have been, as you know,
a database company.

00:21:11.000 --> 00:21:13.410
And they've been very
interested in getting into the

00:21:13.410 --> 00:21:16.150
cataloging of media resources.

00:21:16.350 --> 00:21:22.820
QuickTime is, as we know,
is a very large market in

00:21:22.820 --> 00:21:24.740
terms of formats for media.

00:21:25.260 --> 00:21:27.470
So they have this tool called InterMedia.

00:21:27.610 --> 00:21:31.710
One of the things that Oracle has
been doing over the last couple of

00:21:31.720 --> 00:21:35.160
years is moving their development
efforts into Java because of

00:21:35.160 --> 00:21:38.330
their multi-platform deployment.

00:21:39.570 --> 00:21:44.560
So InterMedia is a tool that they
developed in order to be able

00:21:44.720 --> 00:21:48.660
to store media into a database,
but not just the media.

00:21:48.660 --> 00:21:50.980
Media just in a database
isn't very useful.

00:21:50.980 --> 00:21:55.790
You need to be able to annotate the
text and annotate the media and put

00:21:55.980 --> 00:22:01.420
text fields into the database so you can
actually do searches on the media or get

00:22:01.420 --> 00:22:04.540
back media from the database and so on.

00:22:04.540 --> 00:22:05.920
So Oracle.com.

00:22:05.920 --> 00:22:08.000
InterMedia is their URL.

00:22:08.000 --> 00:22:09.360
And you can go up there and have a look.

00:22:09.380 --> 00:22:15.800
The QD Java component of this is that
because they're a Java environment

00:22:15.800 --> 00:22:21.030
in the annotation side of it,
they needed to access QuickTime and

00:22:21.120 --> 00:22:24.300
to be able to pull information
out of QuickTime files from Java.

00:22:24.320 --> 00:22:25.610
So they used QD Java.

00:22:25.620 --> 00:22:29.270
The tool is not just a QuickTime tool,
although QuickTime is a very

00:22:29.380 --> 00:22:31.470
strong part of what the tool does.

00:22:31.470 --> 00:22:35.120
It also deals with other different
types of media and they have

00:22:35.120 --> 00:22:38.620
a sort of a plug-in model to
do the annotation component.

00:22:39.380 --> 00:22:42.300
of it and you can extend that
and provide your own custom

00:22:42.370 --> 00:22:46.580
plug-ins for your own support,
or say you want to annotate

00:22:46.580 --> 00:22:49.260
it in some different manner.

00:22:49.260 --> 00:22:51.260
Some of the information
actually it pulls out.

00:22:51.260 --> 00:22:54.660
It will pull out all of the user
data that is stored in the media,

00:22:54.660 --> 00:22:56.890
like author, copyright, date.

00:22:57.190 --> 00:23:01.760
It can also pull out things like
the particular encoding that

00:23:01.760 --> 00:23:04.060
was used on a particular track.

00:23:04.150 --> 00:23:07.630
It can also pull out the actual
text that's in the track.

00:23:07.630 --> 00:23:14.830
It can pull out other descriptions
about the media that's in the movie.

00:23:15.120 --> 00:23:19.260
One of the things that this does is
it gives you a very comprehensive

00:23:19.300 --> 00:23:22.580
description of what's in that media file.

00:23:22.580 --> 00:23:27.220
And because it's in the database,
it can be searched.

00:23:27.220 --> 00:23:30.820
And you can access it from
even things like Sherlock.

00:23:30.820 --> 00:23:35.240
You can use standard Internet web
search engines as well.

00:23:35.240 --> 00:23:37.070
And in the demos that
I've seen Oracle do this,

00:23:37.070 --> 00:23:40.630
they actually use the... I used
this at the developers conference

00:23:40.630 --> 00:23:43.020
for Oracle last November.

00:23:43.020 --> 00:23:46.180
You can type in a text,
go and find that text in the movie,

00:23:46.180 --> 00:23:49.670
and you can stream the movie
straight from that place in the text.

00:23:49.680 --> 00:23:52.400
You don't have to download
the whole movie or whatever.

00:23:52.400 --> 00:23:55.830
You can just stream from that
particular location in the

00:23:55.830 --> 00:23:58.100
movie where you found that text.

00:23:58.100 --> 00:24:02.130
And they do that through using plug-ins
on the QuickTime streaming server.

00:24:02.130 --> 00:24:04.780
Tim talked a little bit about
that in the overview and there

00:24:04.780 --> 00:24:06.210
will be sessions covering that.

00:24:06.550 --> 00:24:13.960
But there's a plug-in for the streaming
server that will interface to the

00:24:13.960 --> 00:24:17.540
database and will use all of their
commands and everything to go and

00:24:17.540 --> 00:24:19.800
stream directly from that location.

00:24:19.810 --> 00:24:24.250
It's a very interesting technology and
I'd encourage you if this is something

00:24:24.250 --> 00:24:28.010
that you do that you need to keep
assets of media and stuff around,

00:24:28.010 --> 00:24:29.980
this is well worth exploring.

00:24:29.980 --> 00:24:33.810
So I'd like to now bring up
a partner of Apple's really,

00:24:33.810 --> 00:24:34.970
Eric Lemoine.

00:24:34.970 --> 00:24:37.840
He works with a French company
called TV Radio.

00:24:38.870 --> 00:24:39.650
Thanks.

00:24:39.650 --> 00:24:44.290
So my name is Eric Lemoine and
I'm the CEO of Vincennes Quimaux.

00:24:44.290 --> 00:24:47.400
We are a web agency based in Paris.

00:24:47.470 --> 00:24:50.610
We are more than 100 people.

00:24:50.610 --> 00:24:56.710
And last summer one of our new clients
came and the name of this company is

00:24:56.710 --> 00:25:03.310
TVradio.com and these guys are owned by
the French broadcast company named TDF,

00:25:03.310 --> 00:25:05.380
French Broadcast Company.

00:25:05.520 --> 00:25:10.680
In fact,
it's just a French telecom behind.

00:25:10.680 --> 00:25:17.630
Right now these guys have 95% of
market share in streaming radio

00:25:17.900 --> 00:25:20.150
but over the regular network.

00:25:20.200 --> 00:25:23.040
So they are broadcasting radios.

00:25:23.040 --> 00:25:28.360
The project they asked us was
to broadcast 200 French radios

00:25:28.490 --> 00:25:32.600
that are already done,
already client companies and

00:25:32.600 --> 00:25:35.520
TV station by September 2000.

00:25:35.520 --> 00:25:40.730
The objective was to propose
first a full service to radio,

00:25:40.730 --> 00:25:45.260
to add a multimedia experience to
a radio service and synchronize

00:25:45.440 --> 00:25:49.070
in real time the content with
the audio you're listening to,

00:25:49.070 --> 00:25:57.420
to develop the project around a virtual
tuner and to sell records and tickets.

00:25:57.420 --> 00:26:03.660
So all the service and feature we
developed around this tuner was first to

00:26:03.760 --> 00:26:10.020
access to content based on flash movies,
to access to e-business,

00:26:10.020 --> 00:26:16.680
to open our application to the web,
to have some internal search engine and

00:26:16.680 --> 00:26:19.880
to have a dynamic update to the client.

00:26:19.880 --> 00:26:24.370
Each time we are using the client we are
connecting to our server and updating the

00:26:24.370 --> 00:26:27.820
client and sending some new Java class.

00:26:27.820 --> 00:26:32.600
And we developed a complete
workflow production process.

00:26:32.600 --> 00:26:38.400
We've done 200 Flash movies
for this project.

00:26:38.400 --> 00:26:43.150
And all this project is
based on first a client.

00:26:43.170 --> 00:26:50.200
The client is running on Java,
on MRG on the Mac and GRE on Windows.

00:26:50.200 --> 00:26:53.020
And behind this there is
QuickTime for Java who was one of

00:26:53.170 --> 00:26:56.040
the key technology in the project.

00:26:56.040 --> 00:27:00.530
The back end is based on
WebObject and with WebObject we're

00:27:00.530 --> 00:27:06.040
managing all the session with
the client and with the back end.

00:27:06.040 --> 00:27:11.310
We are also using Oracle as our
database and Flash generator which

00:27:11.310 --> 00:27:16.520
is one of the key technology to
produce every night some content or

00:27:16.520 --> 00:27:19.940
to produce some content in real time.

00:27:20.140 --> 00:27:25.130
And we are using the QuickTime TV network
to broadcast all this streaming.

00:27:25.290 --> 00:27:28.070
I'm going to make a demo of this.

00:27:28.080 --> 00:27:33.800
So in fact as soon as you install
your application you've got the

00:27:34.080 --> 00:27:36.180
TV radio alias on your machine.

00:27:38.300 --> 00:27:40.780
And then the first thing we
are connecting to our server.

00:27:40.810 --> 00:27:45.810
So here we are back to France,
to the UUNet data center in Paris.

00:27:53.190 --> 00:27:56.330
So, in fact,
I don't know what's going on.

00:27:56.390 --> 00:27:59.230
A few minutes ago it was working well.

00:27:59.290 --> 00:28:04.810
We are connecting to the server right now
and we are trying to have access to the

00:28:04.960 --> 00:28:10.670
tuner and then we will have a synchronous
interface with the audio stream and we

00:28:10.710 --> 00:28:16.170
are in real time connected to the radio
to know what is on air on this radio.

00:28:16.170 --> 00:28:20.040
So we are able to push to the
users the name of the song,

00:28:20.070 --> 00:28:25.530
the name of the artist,
the biography of the artist,

00:28:25.890 --> 00:28:31.510
his best stuff,
and we are managing also some content

00:28:31.510 --> 00:28:39.030
value information around the radio
and we are able to have access to the

00:28:39.410 --> 00:28:45.100
frequencies to the contact listing
of all the speakers in this radio.

00:28:45.100 --> 00:28:51.080
So if it's working, but it's not working,
you would have seen this.

00:28:52.570 --> 00:28:56.060
Well, if the network is not working,
it's going to be really

00:28:56.070 --> 00:28:57.320
hard to show you something.

00:28:57.320 --> 00:29:00.110
By the end of the show,
maybe it will work.

00:29:00.140 --> 00:29:03.110
So as soon as it's working,
we'll come back.

00:29:03.120 --> 00:29:04.460
Thanks.

00:29:09.870 --> 00:29:14.460
We actually saw some of
that demo in Tim's keynote,

00:29:14.700 --> 00:29:16.800
the session before this one.

00:29:16.800 --> 00:29:23.800
Of course, Mac OS X is a big part of this
conference and Apple's future direction.

00:29:23.800 --> 00:29:28.570
Qt Java is available and
it is on your DP4 CDs.

00:29:28.850 --> 00:29:30.800
It's working.

00:29:30.800 --> 00:29:33.800
The SDK is not actually on the DP4 CDs.

00:29:33.800 --> 00:29:37.800
You didn't quite get
that cleaned up in time,

00:29:38.090 --> 00:29:44.790
but we will have that available from our
website to download by probably tomorrow.

00:29:45.750 --> 00:29:49.440
The SDK examples basically run as is.

00:29:49.500 --> 00:29:52.900
I know I've just said
the SDK is not available.

00:29:52.900 --> 00:29:56.700
We've been running some shell
scripts and so forth to do that.

00:29:56.700 --> 00:30:05.330
But what we're trying to get to with
the Qt Java SDK is that you don't

00:30:05.460 --> 00:30:08.580
have to recompile your Java code.

00:30:08.580 --> 00:30:10.800
If you've written
platform-neutral Java code,

00:30:10.800 --> 00:30:13.360
you're not doing anything
based on a specific platform,

00:30:13.360 --> 00:30:15.680
which most Java applications are.

00:30:15.700 --> 00:30:17.590
The code should just run.

00:30:17.770 --> 00:30:20.910
And that's what we're finding
with the samples that we're

00:30:20.970 --> 00:30:23.460
getting up and running,
that they're just running the

00:30:23.460 --> 00:30:27.280
same version that's actually
out on the Qt Java 4.1 SDK.

00:30:27.370 --> 00:30:28.700
We're not even recompiling them.

00:30:28.700 --> 00:30:32.340
We just bring the Java zip
files over and we run them.

00:30:32.340 --> 00:30:36.540
There's still some unresolved issues that
we're working out both from the Java side

00:30:36.590 --> 00:30:38.700
and from the QuickTime side and so forth.

00:30:38.700 --> 00:30:42.370
Because we kind of sit in the middle
of these two technologies and that can

00:30:42.370 --> 00:30:44.710
be an interesting experience sometimes.

00:30:45.700 --> 00:30:50.040
So we basically consider Qt Java to
be at an alpha stage where kind

00:30:50.040 --> 00:30:52.220
of the API is feature complete.

00:30:52.700 --> 00:30:57.440
There's about half a dozen or so of the
SDK examples that actually run fine.

00:30:57.550 --> 00:31:01.070
We've got various different
problems with others.

00:31:01.070 --> 00:31:04.130
Some are cosmetic, some are more serious.

00:31:04.130 --> 00:31:08.470
But we're on target to being
complete by this and we'll certainly

00:31:08.470 --> 00:31:12.770
be in a very healthy state by
the beta of Mac OS X at New York.

00:31:12.840 --> 00:31:12.840
The SDK examples run as is.

00:31:12.840 --> 00:31:12.840
I know I've just said the
SDK examples run fine.

00:31:12.840 --> 00:31:12.840
We've got various different
problems with others.

00:31:12.840 --> 00:31:12.840
Some are cosmetic, some are more serious.

00:31:12.840 --> 00:31:12.840
But we're on target to being
complete by this and we'll certainly

00:31:12.840 --> 00:31:12.840
be in a very healthy state by
the beta of Mac OS X at New York.

00:31:13.870 --> 00:31:17.610
If we can shift over to Demo Machine 1,
please.

00:31:17.610 --> 00:31:23.080
I just thought I'd show you a couple
of the Qt Java on 10 examples.

00:31:23.080 --> 00:31:24.240
So here we are on 10.

00:31:24.240 --> 00:31:29.670
This is the movie controller example,
movie callbacks example in the SDK.

00:31:30.740 --> 00:31:35.210
And what this example basically does
is opens a VR movie and then we've

00:31:35.210 --> 00:31:40.010
installed a bunch of callbacks that
is Java code into the movie controller

00:31:40.010 --> 00:31:44.820
that is saying to the movie controller,
"When something happens,

00:31:44.830 --> 00:31:48.090
I want you to tell me." So some
of the callbacks that we've

00:31:48.190 --> 00:31:49.680
got are drawing callbacks.

00:31:49.960 --> 00:31:53.790
And all that we're doing down here in
the terminal window is doing like a

00:31:53.930 --> 00:31:58.790
printout of the fact that like here
you see I've got a drawing command.

00:31:58.800 --> 00:32:00.980
I've got some actions here.

00:32:00.980 --> 00:32:03.870
And you can do specific things there.

00:32:03.870 --> 00:32:07.460
You can have your Java code
responding to that.

00:32:07.460 --> 00:32:11.430
If I do a click to another node,
you'll get callbacks,

00:32:11.450 --> 00:32:12.800
enter or leave them.

00:32:12.810 --> 00:32:15.520
nodes and all that kind of thing.

00:32:15.740 --> 00:32:22.620
and you can install interceptor records,
QDVI, you can intercept actions like a

00:32:22.700 --> 00:32:27.540
transition from one node to another
action and you can do whatever you'd like

00:32:27.650 --> 00:32:31.760
to do at that point because the program
is handed back control to your Java code.

00:32:31.770 --> 00:32:34.450
And that Java code will
run on Mac and Windows.

00:32:34.510 --> 00:32:36.230
It's the same kind of deal.

00:32:36.280 --> 00:32:40.490
And of course we're on OS X so I can
just kill the application which is

00:32:40.560 --> 00:32:42.720
one of the nice features of OS X.

00:32:42.720 --> 00:32:45.680
Maybe you don't want to be
doing that all the time.

00:32:45.700 --> 00:32:49.460
This is another example in our SDK.

00:32:49.570 --> 00:32:54.690
It's called run transitions example.

00:32:54.690 --> 00:32:56.320
It's a little scary.

00:32:56.320 --> 00:32:57.830
We've got a spaceship here.

00:32:57.830 --> 00:32:59.410
It's X-Files kind of stuff.

00:32:59.460 --> 00:33:05.140
But this is just basically to show
that we've got not just movies

00:33:05.140 --> 00:33:09.530
playing in OS X but we've also
got the compositing stuff that

00:33:09.530 --> 00:33:14.660
QD Java does that uses the underlying
compositing engine of QuickTime.

00:33:15.900 --> 00:33:18.980
And we've got a couple of
background pictures here.

00:33:18.980 --> 00:33:22.800
We've got the ripples being
applied to a picture of a water.

00:33:22.800 --> 00:33:26.420
And we've got this sprite here
that's just being faded in and out.

00:33:26.420 --> 00:33:29.330
And all of this assemblage
and all of the control,

00:33:29.370 --> 00:33:33.540
the timing control and everything,
it has been done in the Java code.

00:33:33.590 --> 00:33:35.580
It's not a movie at this point.

00:33:35.580 --> 00:33:40.880
And I can also close things
in a more traditional manner.

00:33:40.880 --> 00:33:44.610
Can we go to demo 2 machine please?

00:33:51.500 --> 00:33:54.530
Given that we've got network problems,
I'm not sure that this is going to work,

00:33:54.700 --> 00:33:56.200
but I'll try it anyway.

00:33:56.350 --> 00:33:59.730
So I'm just going to click in that movie,
and then I'm going to

00:33:59.730 --> 00:34:01.810
go back to the slides,
because I'm wetting your

00:34:01.810 --> 00:34:03.380
appetite for what's to come.

00:34:03.500 --> 00:34:09.510
So can we go back to the slides, please?

00:34:12.960 --> 00:34:16.820
Okay, so the third part of this
talk is Java into QuickTime.

00:34:16.820 --> 00:34:19.840
And what are we really
talking about here?

00:34:19.840 --> 00:34:23.700
We're talking about the ability
to not be a Java application

00:34:23.700 --> 00:34:26.500
that's using QuickTime content.

00:34:26.500 --> 00:34:30.460
What we're talking about trying
to do here is to have Java code

00:34:30.810 --> 00:34:33.330
that's in the context of QuickTime.

00:34:33.440 --> 00:34:34.590
It's in a movie.

00:34:34.590 --> 00:34:37.960
And it's Java code that's
going to be executed as a

00:34:38.020 --> 00:34:42.880
result of something occurring,
whether it's a user or a user.

00:34:42.900 --> 00:34:45.830
It's a user interaction or just
opening the movie or getting to a

00:34:45.830 --> 00:34:47.760
certain time in the movie or so forth.

00:34:49.130 --> 00:34:54.380
What this enables is for you to provide
as a developer custom actions to

00:34:54.380 --> 00:34:59.040
provide custom tailored solutions to
your specific environment using a fully

00:34:59.040 --> 00:35:05.000
featured language that Java is with
a full set of capabilities like URLs,

00:35:05.000 --> 00:35:08.470
like network capabilities and so forth.

00:35:08.950 --> 00:35:12.610
And of course we also support
Java's security model.

00:35:12.880 --> 00:35:17.040
So we provide the
security features of Java.

00:35:17.070 --> 00:35:20.280
Now there's a couple of different
ways that we could do this.

00:35:20.300 --> 00:35:24.030
The alternatives that are before
us is the wide actions that

00:35:24.110 --> 00:35:26.620
QuickTime already provides.

00:35:26.830 --> 00:35:30.700
The other alternative would be to
have some kind of Java media track

00:35:30.860 --> 00:35:35.300
where the media track itself was
your Java code that was controlling

00:35:35.300 --> 00:35:37.500
everything that occurred in that track.

00:35:37.700 --> 00:35:40.420
And you could actually
imagine a whole movie that was

00:35:40.580 --> 00:35:42.300
completely controlled by Java.

00:35:42.300 --> 00:35:48.580
So the Cutie Zoo example, for instance,
that could be delivered as a Java track

00:35:48.990 --> 00:35:55.170
in a QuickTime movie and everything else
is just in control from your program.

00:35:55.620 --> 00:35:59.370
On a related area to this,
there's been a lot of work in the

00:35:59.370 --> 00:36:06.200
MPEG-4 committee on a couple of
different areas called BIFS and MPEG-J.

00:36:06.290 --> 00:36:14.100
So BIFS stands for Binary Format for
Scenes and MPEG-J is Java in MPEG.

00:36:14.100 --> 00:36:18.790
We'll talk a little bit more
about that a little later.

00:36:20.060 --> 00:36:25.150
Okay, so for the Java wired actions,
what we decided to do is to

00:36:25.150 --> 00:36:30.050
support QuickTime's existing
wired action architecture in

00:36:30.050 --> 00:36:32.500
the custom action handler.

00:36:32.650 --> 00:36:35.270
This is an existing
component in QuickTime.

00:36:35.810 --> 00:36:41.190
It has a subtype of wire,
and for the Java wired actions,

00:36:41.380 --> 00:36:46.170
the subtype of the component is Java.

00:36:46.740 --> 00:36:57.020
The Java wide actions component
would be installed with QtJava.

00:36:57.090 --> 00:37:01.100
So it would be able to, you know,
to be something that you could

00:37:01.100 --> 00:37:04.500
rely on as being installed
when QtJava was installed.

00:37:04.500 --> 00:37:10.990
It uses an open component action in
the movie and that's something that

00:37:10.990 --> 00:37:14.930
you have to add with the custom action
handler to register the component,

00:37:14.930 --> 00:37:16.640
have the component opened.

00:37:16.700 --> 00:37:22.920
And then you attach the compiled
Java bytecodes to the particular

00:37:22.920 --> 00:37:25.830
target that you want to be executing.

00:37:27.200 --> 00:37:42.300
[Transcript missing]

00:37:42.500 --> 00:37:47.360
To support that activity,
we're developing a Java-wide action,

00:37:47.360 --> 00:37:48.600
which is an abstract class.

00:37:48.620 --> 00:37:51.030
It will be in the Qt Java.

00:37:51.250 --> 00:37:56.670
It has a number of methods that can
give you the context of when this

00:37:56.670 --> 00:37:59.820
particular action has been fired.

00:37:59.820 --> 00:38:04.970
So you'll be able to get things
like the movie that you're in,

00:38:04.970 --> 00:38:10.120
the track that you're in in that movie,
and you'll also get an

00:38:10.120 --> 00:38:14.320
abstract execute method,
and that's the part where

00:38:14.560 --> 00:38:17.580
you basically put your code.

00:38:19.300 --> 00:39:49.600
[Transcript missing]

00:39:52.510 --> 00:39:58.400
Okay, so I don't know if this is going to
completely work because we're having

00:39:58.400 --> 00:40:01.340
some problems with the network,
but we'll give it a shot.

00:40:01.400 --> 00:40:05.510
So this is a QuickTime movie,
and it has a Java-wide

00:40:05.510 --> 00:40:10.260
action that's attached to the
background sprite of this movie.

00:40:10.270 --> 00:40:15.340
And the background sprite of the
movie is just the static picture.

00:40:15.740 --> 00:40:19.640
and I think we might be
going live on the web.

00:40:19.640 --> 00:40:21.710
I'm not really sure.

00:40:22.630 --> 00:40:28.430
Just give it a minute
to see if it'll come up.

00:40:28.510 --> 00:40:31.640
What's happening with this
particular Java-wide action is that

00:40:31.640 --> 00:40:34.240
it's attached to the background.

00:40:34.340 --> 00:40:37.680
Any click on that background is
going to execute that wide action.

00:40:38.220 --> 00:40:42.560
When the action first fires up,

00:40:42.840 --> 00:40:48.940
If I open, so if I go back to here,
which was the thing, you see that what

00:40:49.010 --> 00:40:51.960
you've got there is two,
three different pictures,

00:40:51.960 --> 00:40:57.550
and you've got both a text track
and you've got a video track here.

00:40:57.550 --> 00:41:01.030
And you can see a timestamp
here that's changing,

00:41:01.060 --> 00:41:05.270
which is the time that I actually
clicked this movie to go and

00:41:05.270 --> 00:41:10.480
get that image from a webcam,
which was the Reef camera at the moment.

00:41:10.900 --> 00:41:13.720
Now if I close that
movie and open it again,

00:41:13.810 --> 00:41:19.000
you'll notice that I've actually saved
the movie with the new content in it.

00:41:19.070 --> 00:41:22.770
So the click that I just did,
which was at 5.18,

00:41:22.860 --> 00:41:25.410
that has now been saved in the movie.

00:41:25.440 --> 00:41:28.830
Now this is all being done for
you in the movie by the Java code.

00:41:28.890 --> 00:41:33.350
I'm writing the movie file out,
and if I have a look

00:41:33.660 --> 00:41:38.250
at the original movie,
you'll see that all I've got

00:41:38.250 --> 00:41:40.800
here is a single sprite track.

00:41:40.900 --> 00:41:46.340
And that sprite track has
just got actions added to it.

00:41:46.380 --> 00:41:52.680
And then when I've gone out and
got to the image and so forth,

00:41:52.680 --> 00:41:59.170
I've added a pick track,
which is that and the text track.

00:41:59.750 --> 00:42:06.480
We're just basically authoring the movie
while the movie is alive and running.

00:42:06.480 --> 00:42:12.540
This is just a very simple example that
we built up over the last week or so.

00:42:12.600 --> 00:42:15.600
We're still in very
early stages with this.

00:42:15.600 --> 00:42:19.410
But you can basically do anything
that you'd like to do within the

00:42:19.410 --> 00:42:23.150
bounds and the constraints of the
kind of condition you're in at

00:42:23.150 --> 00:42:25.580
runtime when you're trying to do it.

00:42:25.810 --> 00:42:29.420
We've got some transparency
on the text there.

00:42:29.420 --> 00:42:32.020
You can play back the
movie and it's saved,

00:42:32.020 --> 00:42:32.460
etc.

00:42:32.520 --> 00:42:34.700
Shall we go back to the slides, please?

00:42:41.150 --> 00:42:43.550
Okay,
so we're in a prototype stage with this.

00:42:43.690 --> 00:42:50.200
We're really just getting this working
and getting ahead to deploying this.

00:42:50.200 --> 00:42:54.180
We've been operating a seeding list
for a couple of years or so now,

00:42:54.180 --> 00:42:56.540
and we continue to support that list.

00:42:56.540 --> 00:43:02.890
And we'll be seeding the Java-wide
action components and the Java classes

00:43:03.070 --> 00:43:07.950
for it to developers on that
list as soon as we're ready to

00:43:07.950 --> 00:43:10.980
do that in the next month or two.

00:43:11.100 --> 00:43:14.500
And there'll be details at the end
of the talk that can describe to

00:43:14.630 --> 00:43:17.570
you how to get onto that seeding.

00:43:18.200 --> 00:43:19.780
So a couple of future directions.

00:43:19.970 --> 00:43:23.000
We talked a little bit
about a Java media track.

00:43:23.100 --> 00:43:27.660
This is a very interesting concept
if you want to be primarily some kind

00:43:27.660 --> 00:43:32.240
of QuickTime movie and you want to
interact with QuickTime's media format,

00:43:32.240 --> 00:43:36.670
but you want to actually have maybe some
more dynamic behavior that you can't

00:43:36.740 --> 00:43:41.230
really get or that you want to be able
to do some very intricate client-server

00:43:41.230 --> 00:43:43.390
interactions or whatever it is.

00:43:43.550 --> 00:43:48.640
You might want to just control the whole
compositing yourself or just randomly

00:43:48.640 --> 00:43:50.620
add tracks or add movies into it.

00:43:50.700 --> 00:43:54.170
So something like the QT Zoo,
that could be re-embedded and

00:43:54.170 --> 00:43:55.910
deployed as a QuickTime movie.

00:43:55.990 --> 00:43:59.690
As it's very dependent on QuickTime,
that kind of makes a lot of sense and

00:43:59.690 --> 00:44:01.880
it's a good distribution model for it.

00:44:01.880 --> 00:44:06.800
With MPEG-4 and the BIFS,
the BIFS is a sort of a vermal type

00:44:06.800 --> 00:44:09.640
audio and visual 3D model space.

00:44:09.750 --> 00:44:14.480
It provides a complete sort
of 3D modeling area for you to

00:44:14.480 --> 00:44:18.960
create interactive scenes for.

00:44:18.960 --> 00:44:21.890
You can place audio at
different locations.

00:44:21.980 --> 00:44:26.880
You can have objects moving in and out
and you can construct a whole scene.

00:44:26.930 --> 00:44:31.730
Now when the MPEG-4 committee did this,
they took a couple of things that

00:44:31.730 --> 00:44:34.010
they wanted to improve on with vermal.

00:44:34.410 --> 00:44:38.280
Vermal was a textual based one
and the MPEG-4 specification

00:44:38.280 --> 00:44:40.650
is a binary based one,
so it's a lot smaller.

00:44:40.650 --> 00:44:44.030
It can be compressed also a lot
more and it's a lot better suited

00:44:44.150 --> 00:44:46.130
for transmission over the web.

00:44:48.070 --> 00:44:51.800
The other thing that they wanted to do
is to provide a much richer programmatic

00:44:51.910 --> 00:44:55.050
model in accessing the scene.

00:44:55.050 --> 00:44:59.850
And so they actually chose Java as
the primary means to do that.

00:45:00.110 --> 00:45:05.140
There is a set of Java classes and a
guaranteed sort of Java VM as part of

00:45:05.140 --> 00:45:08.100
this whole BIFS implementation in MPEG-4.

00:45:08.100 --> 00:45:11.460
And some of the capability that
the Java classes that have been

00:45:11.460 --> 00:45:15.420
provided by the MPEG-4 committee,
some of the capability

00:45:15.420 --> 00:45:19.000
that they represent is your
ability at runtime to say,

00:45:19.000 --> 00:45:20.590
"What kind of computer am I on?

00:45:20.870 --> 00:45:22.460
What kind of resolution do I have?

00:45:22.530 --> 00:45:24.790
What kind of network
connection am I going to get?

00:45:24.900 --> 00:45:29.510
What are the characteristics?" You can
only know when someone opens this up.

00:45:30.090 --> 00:45:35.800
So they've provided those APIs and
those controls in Java for you.

00:45:35.800 --> 00:45:38.180
So you can do that,
then you can make decisions

00:45:38.180 --> 00:45:40.800
at runtime about the kind
of media that you download.

00:45:40.800 --> 00:45:44.980
You can even do your own pinging
using networking classes in Java to

00:45:44.980 --> 00:45:48.310
really see what kind of network
performance you're getting if you

00:45:48.310 --> 00:45:54.800
want to control that kind of stuff in
such a finite and intricate detail.

00:45:54.800 --> 00:45:58.540
And this is very much the same kind
of thing as having a Java media

00:45:58.540 --> 00:46:02.400
track in QuickTime in the sense
that your Java code controls it.

00:46:02.430 --> 00:46:06.240
It's just that with MPEG-4 it's
formalized and it's a standard that you

00:46:06.250 --> 00:46:11.630
don't have to just rely on a particular
vendor to support because there's a

00:46:11.630 --> 00:46:15.800
lot of different vendors providing all
kinds of different MPEG-4 solutions.

00:46:15.890 --> 00:46:20.890
And QuickTime is a very strong
part of that MPEG-4 story.

00:46:21.230 --> 00:46:22.080
So who to contact?

00:46:22.220 --> 00:46:27.780
We have a public list that's available
for developers for QuickTime for Java.

00:46:27.780 --> 00:46:30.070
That's at list.apple.com.

00:46:30.210 --> 00:46:34.360
For general developer information,
including the SDK and including the zoo

00:46:34.360 --> 00:46:38.240
examples that Michael went over earlier,
we've got that URL there,

00:46:38.240 --> 00:46:41.430
developapple.com slash
QuickTime slash QDJava.

00:46:41.880 --> 00:46:48.070
If you're interested in getting an early
access to any of the seeding that we do,

00:46:48.070 --> 00:46:52.510
we actually have an email that
you can email us at QDJava at

00:46:52.510 --> 00:46:55.900
apple.com and you can get enrolled.

00:46:55.900 --> 00:46:59.580
But before you email us to tell us
that you want to be in the seeding,

00:46:59.580 --> 00:47:03.220
you must be a registered developer
with Apple for us to do that.

00:47:03.260 --> 00:47:07.770
So I'd like to thank you all for
attending and we've got time for

00:47:07.770 --> 00:47:10.540
Q&A if you've got some questions.

00:47:11.880 --> 00:47:16.770
I'll leave these URLs up in
case you want to view them.

00:47:17.460 --> 00:47:21.280
Oh, yeah,
I might try the TV radio thing again,

00:47:21.280 --> 00:47:24.060
see if we can get that going.

00:47:24.060 --> 00:47:28.500
Yeah.

00:47:28.500 --> 00:47:30.660
Can we have demo station two up, please?

00:47:36.620 --> 00:47:37.500
Hey.

00:47:37.560 --> 00:47:45.840
So the rest are very .
I came from Paris for this,

00:47:45.910 --> 00:47:50.890
so I hope it's going to work this time.

00:47:53.600 --> 00:47:57.830
Basically, this application is
composed of two parts.

00:47:57.830 --> 00:48:01.740
Here,
all this area is managing the stream.

00:48:01.940 --> 00:48:04.730
Here, you can manage the sound.

00:48:04.900 --> 00:48:10.550
We are expecting to have in
QuickTime for Java the Equalizer

00:48:10.680 --> 00:48:11.900
feature coming really soon.

00:48:11.900 --> 00:48:19.900
Here we have all the balance,
treble and so on, the credits also.

00:48:19.900 --> 00:48:23.900
And here we are managing all the streams.

00:48:23.900 --> 00:48:25.900
It's a pre-selection.

00:48:25.900 --> 00:48:29.900
It's working just like
your player in your car.

00:48:29.900 --> 00:48:36.900
It's just a long click to wait
for the pre-selection in memory.

00:48:36.900 --> 00:48:40.780
And if you want to have
access to all our stations,

00:48:40.940 --> 00:48:43.900
right now we have 40
stations in the tuner.

00:48:43.900 --> 00:48:45.900
You just use this.

00:48:45.900 --> 00:48:49.900
We are working, here it's just a
Flash Movie for the moment,

00:48:49.900 --> 00:48:57.890
but we are working on a Java tuner
with a selection from style,

00:48:57.890 --> 00:48:59.900
area in Paris or in France.

00:48:59.900 --> 00:49:01.890
And so on.

00:49:01.900 --> 00:49:05.900
And here you can choose the
radio you want to listen to.

00:49:05.900 --> 00:49:07.870
We can close this.

00:49:07.910 --> 00:49:12.900
And all this area is information
we are pushing to the user.

00:49:12.900 --> 00:49:16.900
And this area basically is
information regarding the radio

00:49:16.900 --> 00:49:19.890
and here regarding the artist.

00:49:19.900 --> 00:49:25.880
And all this information are pushed
and synchronized with the radio,

00:49:25.900 --> 00:49:28.900
with the program and with the music
on air at this time in the day.

00:49:28.910 --> 00:49:31.900
At this time in this radio in Paris.

00:49:31.900 --> 00:49:38.010
All this information I push to the user,
but we are able to pull,

00:49:38.010 --> 00:49:40.900
the user is able to
pull some information.

00:49:40.970 --> 00:49:45.810
For example, if you want to have
the frequencies of VFM,

00:49:45.920 --> 00:49:51.430
this radio,
it can access through this Flash Movie to

00:49:51.430 --> 00:49:57.900
all the friends and see where it
can get the frequency of this radio.

00:49:57.900 --> 00:50:03.900
We can access to the contact
information in the radio.

00:50:03.900 --> 00:50:09.570
For example, here we have all the list.

00:50:09.900 --> 00:50:28.300
[Transcript missing]

00:50:28.470 --> 00:50:33.510
And here you can have some information of

00:50:34.600 --> 00:50:57.400
[Transcript missing]

00:50:58.000 --> 00:51:00.500
We're going to come back after with this.

00:51:00.690 --> 00:51:02.860
And what else?

00:51:02.930 --> 00:51:06.190
We have a small interface.

00:51:08.130 --> 00:51:14.100
Here, all this information area is
synchronized with the music,

00:51:14.100 --> 00:51:18.100
but we are able to push some
information regarding a special show.

00:51:18.140 --> 00:51:25.100
For example, you have an artist on air,
which is speaking tonight at the radio.

00:51:25.100 --> 00:51:28.100
You can say, "Okay,
this guy is coming tonight on the radio."

00:51:28.100 --> 00:51:31.120
And we can have flash movies accessing.

00:51:31.120 --> 00:51:34.100
All this information is a flash movie.

00:51:34.100 --> 00:51:40.100
And all the radio are able to create by
themselves and manage all their content.

00:51:40.100 --> 00:51:44.260
And they are able to say, "Okay,
during two hours,

00:51:44.260 --> 00:51:48.930
we want this flash movie to be
here and to have another flash

00:51:48.930 --> 00:51:52.530
movie behind in this area with
more details on the product,

00:51:52.530 --> 00:51:55.780
on the show, on the concert,
on everything." So all the radios

00:51:55.830 --> 00:51:57.100
are managing by themselves.

00:51:57.100 --> 00:51:57.280
They are able to create by themselves
and manage all their content.

00:51:57.280 --> 00:51:57.390
And they are able to say, "Okay,
during two hours,

00:51:57.390 --> 00:51:57.500
we want this flash movie to be
here and to have another flash

00:51:57.540 --> 00:51:57.650
movie behind in this area with
more details on the product,

00:51:57.650 --> 00:51:59.900
on the show, on the concert,
on everything." And we provide

00:51:59.900 --> 00:52:08.100
them a tool through the web with
some access using a web object.

00:52:08.100 --> 00:52:13.050
And every night,
hundreds of flash movies are generated.

00:52:16.010 --> 00:52:18.240
We have some connection errors.

00:52:18.240 --> 00:52:21.360
And here we have a search engine.

00:52:21.360 --> 00:52:23.950
We are able to search in our database.

00:52:24.060 --> 00:52:25.900
For example,
if you're looking for information

00:52:25.900 --> 00:52:29.200
on a radio or on an artist.

00:52:29.200 --> 00:52:33.140
And we have a web search engine here,
Voila.

00:52:33.140 --> 00:52:35.640
Voila is a search engine
from France Telecom.

00:52:35.640 --> 00:52:41.630
And as soon as you make your research,
it's opening your web

00:52:41.810 --> 00:52:44.110
browser and that's it.