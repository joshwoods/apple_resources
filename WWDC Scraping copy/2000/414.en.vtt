WEBVTT

00:00:18.550 --> 00:00:21.260
We have with us Eric Bailey to
discuss performance metrics,

00:00:21.260 --> 00:00:24.840
trying to squeeze even more
information out of your application,

00:00:24.840 --> 00:00:27.500
and we'll try and squeeze some more
information into your head as well.

00:00:27.650 --> 00:00:29.250
Enjoy the session.

00:00:34.500 --> 00:00:38.280
Okay.

00:00:38.860 --> 00:00:42.690
So, if I can get this to go forward here.

00:00:43.180 --> 00:00:45.110
There we go.

00:00:45.110 --> 00:00:47.970
I'm Eric Bailey in
Internet Services at Apple,

00:00:47.970 --> 00:00:51.650
where we deploy applications
like the Apple Store and iTools.

00:00:51.700 --> 00:00:54.990
I'll be joined shortly by Stan Jirman,
who works in the WebObjects Tools group.

00:00:55.050 --> 00:00:58.690
He's going to talk to you about some
of the new features in WebObjects 4.5,

00:00:58.690 --> 00:01:01.180
which are going to help you
measure the performance of

00:01:01.180 --> 00:01:03.090
your WebObjects application.

00:01:03.110 --> 00:01:05.800
The sessions have probably
gone in the wrong order.

00:01:05.800 --> 00:01:08.100
We wanted to talk about
performance first.

00:01:08.100 --> 00:01:10.100
How do you measure the
performance of your application?

00:01:10.100 --> 00:01:13.240
Then when you find the problems,
go and optimize it,

00:01:13.290 --> 00:01:19.190
which I think was this morning,
and then deploy it, which was yesterday.

00:01:21.610 --> 00:01:28.700
So, today we're going to talk
about performance metrics.

00:01:28.970 --> 00:01:31.330
We're going to talk about how to
measure the performance of your

00:01:31.330 --> 00:01:33.500
WebObjects application and improve it.

00:01:33.540 --> 00:01:37.450
We're going to focus in on your
application and not all the

00:01:37.570 --> 00:01:40.350
other parts of your environment.

00:01:41.900 --> 00:01:45.700
And we'll discover what factors will
influence the overall performance of

00:01:45.700 --> 00:01:51.200
that environment and help you pinpoint
the code you can go and improve.

00:01:52.250 --> 00:01:56.360
So you've probably seen a picture
like this before which talks about the

00:01:56.360 --> 00:02:01.130
overall architecture of a very typical
WebObjects application where here we

00:02:01.270 --> 00:02:07.560
see the HTTP request lifecycle comes in,
gets served by the web server into a

00:02:07.560 --> 00:02:10.440
WebObjects application in the green area.

00:02:10.500 --> 00:02:13.200
A lot of the time it's
hitting the database,

00:02:13.200 --> 00:02:17.990
information flowing back to WebObjects,
back out through the web server,

00:02:18.090 --> 00:02:20.150
into your client browser.

00:02:20.550 --> 00:02:24.250
The point of this slide is to
show that there are a lot of

00:02:24.270 --> 00:02:26.920
factors that influence the overall
performance of your application.

00:02:27.010 --> 00:02:30.740
It's not just inside the code
that you've written in the action

00:02:30.740 --> 00:02:34.640
invocation business logic area
of your WebObjects application.

00:02:34.780 --> 00:02:39.360
Other factors do come into play and it's
important to note what all those are.

00:02:39.520 --> 00:02:44.560
A lot of WebObjects
deployments have a lot of other

00:02:45.100 --> 00:02:59.400
[Transcript missing]

00:03:01.700 --> 00:03:04.200
So today we're going to try
to answer a few questions.

00:03:04.210 --> 00:03:05.940
How do I measure performance?

00:03:05.960 --> 00:03:07.500
What does it mean?

00:03:07.500 --> 00:03:10.270
And am I getting good results?

00:03:12.670 --> 00:03:16.140
We're going to go through Woe Stats,
which is a very useful

00:03:16.180 --> 00:03:19.670
tool for getting started,
and then move on into Event Logging,

00:03:19.670 --> 00:03:22.410
which is a new feature in WebObjects 4.5.

00:03:22.410 --> 00:03:25.940
It will help you get into
finer-grained detail what areas of

00:03:25.980 --> 00:03:28.470
your application need your attention.

00:03:36.850 --> 00:03:37.700
There we go.

00:03:37.700 --> 00:03:41.940
Thanks.

00:03:41.940 --> 00:03:47.530
So the web server at the top layer of
this really acts as a load balancer in

00:03:47.530 --> 00:03:49.700
a WebObjects deployment environment.

00:03:49.850 --> 00:03:53.930
Its basic job is to forward
the HTTP request onto an

00:03:53.930 --> 00:03:56.530
instance of your application.

00:03:57.240 --> 00:04:00.820
And in so doing,
it's basically an I/O intensive task.

00:04:00.910 --> 00:04:03.940
You get down into WebObjects
and then you may be making

00:04:04.010 --> 00:04:05.780
a request upon the database.

00:04:05.900 --> 00:04:08.700
All of the factors on the left
are very important to note,

00:04:08.900 --> 00:04:09.690
especially database.

00:04:09.700 --> 00:04:11.440
And other sessions have
talked about improving your

00:04:11.440 --> 00:04:15.890
overall database performance,
optimizing EOF,

00:04:16.010 --> 00:04:19.110
making your queries more efficient.

00:04:23.020 --> 00:04:25.190
And although a lot of
us take it for granted,

00:04:25.240 --> 00:04:28.940
there's a lot of I/O network
traffic going on.

00:04:28.940 --> 00:04:30.070
There's latency.

00:04:30.200 --> 00:04:32.460
All these play into the
overall performance,

00:04:32.550 --> 00:04:36.000
like I said, and you want to not
take these for granted.

00:04:36.180 --> 00:04:40.180
Once you take some measurements with
nWebObjects in your database at the

00:04:40.180 --> 00:04:44.690
HTTP server layer and at the client end,
you'll get a better feel for

00:04:44.690 --> 00:04:47.540
whether this is important or not.

00:04:47.600 --> 00:04:50.380
Usually it's not a problem
in a lot of deployments,

00:04:50.380 --> 00:04:53.100
but nonetheless,
after you've measured some

00:04:53.600 --> 00:05:00.230
If you need to talk to your sysadmins
about tuning your routers or

00:05:00.230 --> 00:05:03.090
configuring something differently.

00:05:07.840 --> 00:05:11.230
So the first tool that's built
into WebObjects we're going

00:05:11.230 --> 00:05:12.680
to talk about is WoeStats.

00:05:12.700 --> 00:05:16.760
This has been in WebObjects for a
couple of releases and it's a good

00:05:16.760 --> 00:05:21.010
starting point to figure out if your
application is on the right foot.

00:05:21.300 --> 00:05:25.970
It's not going to get very
fine-grained like event logging will,

00:05:25.970 --> 00:05:30.060
but early on in the development
cycle you should take a look

00:05:30.130 --> 00:05:32.180
at WoeStats and figure out if

00:05:33.070 --> 00:05:34.320
Your pages are coming back.

00:05:34.320 --> 00:05:36.910
Your transaction times are acceptable.

00:05:37.040 --> 00:05:42.080
We'll talk about what's acceptable in a
minute and what might not be acceptable.

00:05:48.140 --> 00:05:51.340
WoeStats, like I said,
is not very fine-grained.

00:05:51.340 --> 00:05:54.240
It measures transactions
time at a high level.

00:05:54.270 --> 00:05:57.700
Basically, an HTTP request comes
into the web server,

00:05:57.810 --> 00:06:01.790
forwards it onto your instance,
and as soon as it gets there,

00:06:01.910 --> 00:06:05.300
Start the timer.

00:06:05.300 --> 00:06:08.200
As you can see here,
the database is downstream

00:06:08.210 --> 00:06:11.040
of that request,
so therefore all of the time

00:06:11.040 --> 00:06:16.210
taken to do a SQL query is going
to be recorded in that timer.

00:06:16.280 --> 00:06:21.140
Once we actually finish sending
the response out of your instance

00:06:21.180 --> 00:06:25.280
back to the WebObjects-based
adapter embedded in the server,

00:06:25.400 --> 00:06:27.810
that timer will stop.

00:06:31.630 --> 00:06:38.860
Woe Stats is in the Woe Extensions
framework and it's always on,

00:06:38.990 --> 00:06:41.350
has pretty low overhead

00:06:41.600 --> 00:06:42.500
Well, it's not always on.

00:06:42.500 --> 00:06:43.150
You can turn it off.

00:06:43.400 --> 00:06:46.810
There's a Woe Statistics Store class
in Woe Application which you

00:06:46.810 --> 00:06:50.730
can use to modify Woe Stats,
customize it to your needs a little bit,

00:06:50.730 --> 00:06:53.200
and you could turn it
off if you wanted to.

00:06:53.280 --> 00:06:58.540
This is a screenshot of the
direct action called Woe Stats,

00:06:58.640 --> 00:07:02.130
an example URL above of how
you would access it in the

00:07:02.130 --> 00:07:04.470
Woe Info Center application.

00:07:06.270 --> 00:07:12.080
As you'll see in the screenshot,
we have 17 overall transactions in

00:07:12.180 --> 00:07:14.940
the top left corner of the table.

00:07:15.040 --> 00:07:19.270
This is not many transactions,
and I don't expect that you

00:07:19.290 --> 00:07:22.830
should read anything about your
WebObjects application's performance

00:07:22.840 --> 00:07:24.090
with that few transactions.

00:07:24.160 --> 00:07:25.850
You want to get it warmed up.

00:07:25.950 --> 00:07:28.390
Touch all the areas of your application.

00:07:28.530 --> 00:07:31.590
The first time you load a page,
WebObjects has to read that

00:07:31.590 --> 00:07:35.560
component off the disk,
initialize a few classes internally,

00:07:35.660 --> 00:07:38.690
and you really need hundreds and
even thousands of transactions

00:07:39.290 --> 00:07:42.940
through your application before
you get a sense of the performance.

00:07:43.110 --> 00:07:46.230
But here,
we hit WoW Info Center a few times,

00:07:46.590 --> 00:07:49.890
17 to be exact,
and we had an average transaction

00:07:49.890 --> 00:07:52.250
time of 1.036 seconds.

00:07:52.350 --> 00:07:56.980
Now, that shouldn't alarm us because,
like I said, you want more transactions,

00:07:57.130 --> 00:07:58.500
but that's not great.

00:07:58.540 --> 00:08:01.260
I know that WoW Info Center, though,
does some indexing at startup,

00:08:01.370 --> 00:08:04.120
and we would expect this
to a certain degree.

00:08:04.230 --> 00:08:06.510
The next number over that's interesting,
is the average idle time.

00:08:06.520 --> 00:08:09.860
I had this application running for a
while before I took this screenshot,

00:08:09.970 --> 00:08:13.680
and here the idle time is hours, really.

00:08:13.800 --> 00:08:16.110
But this is the amount
of time between requests,

00:08:16.300 --> 00:08:19.150
so how long your application sits idle.

00:08:19.600 --> 00:08:22.410
This is a good number to use
to get a sense in deployment.

00:08:22.680 --> 00:08:28.530
It may have been mentioned whether or not
you have enough instances or too many.

00:08:28.540 --> 00:08:33.150
I know that on iTools we look at
this number a fair amount to see

00:08:33.150 --> 00:08:36.340
if we need to add more instances.

00:08:36.430 --> 00:08:39.270
You want to have it be probably,
I don't know,

00:08:39.270 --> 00:08:43.210
it's a hard number to figure out
exactly what you want it to be,

00:08:43.210 --> 00:08:45.850
but 10, 20 seconds is good.

00:08:46.030 --> 00:08:47.800
Higher than that is even better.

00:08:48.190 --> 00:08:51.920
If you expect bursty traffic,
you're going to want to see the

00:08:51.920 --> 00:08:56.030
average idle time in kind of low
or normal traffic modes be fairly

00:08:56.030 --> 00:09:01.380
high in the 20 to 30 second range
so that you have enough instances

00:09:01.380 --> 00:09:03.970
that can handle a burst of traffic.

00:09:08.770 --> 00:09:12.600
Moving down the page, if you scroll down,
you'll see a couple of tables

00:09:12.600 --> 00:09:17.040
that detail the component
actions and the direct actions.

00:09:17.310 --> 00:09:20.540
So in the component action statistics
table on the left we see the name

00:09:20.540 --> 00:09:23.400
of the component being returned.

00:09:25.230 --> 00:09:30.250
This is important to note that in
the diagram that I drew before,

00:09:30.380 --> 00:09:33.230
WebObjects application does
take values from request,

00:09:33.370 --> 00:09:35.900
invokes an action,
and returns a response.

00:09:36.010 --> 00:09:39.010
The component that is being
used to return the response

00:09:39.010 --> 00:09:40.860
is listed in the left column.

00:09:40.980 --> 00:09:46.190
So although we see in the menu component
that the average was very fast,

00:09:46.280 --> 00:09:51.600
18/1000th of a second,
that was returning the menu page.

00:09:51.730 --> 00:09:57.040
So it also involves whatever was going on
in your application when you took values,

00:09:57.140 --> 00:10:01.510
invoked an action,
and then returned that component.

00:10:02.330 --> 00:10:05.670
For instance,
the main component is very slow,

00:10:05.670 --> 00:10:08.100
1.306 seconds.

00:10:08.100 --> 00:10:10.450
Now, again,
we don't have enough data to be for sure,

00:10:10.500 --> 00:10:12.580
and the thing that I would
point out is notice that the

00:10:12.580 --> 00:10:17.560
minimum is 16 one-thousandths,
which would indicate that it

00:10:17.660 --> 00:10:21.850
did fine on a few requests,
and the maximum is 7.127.

00:10:21.860 --> 00:10:24.250
So, like I said,
I know WoW Info Center loads

00:10:24.340 --> 00:10:28.080
some indexes and figures out some
things when it launches to better

00:10:28.190 --> 00:10:31.640
help you find documentation,
so it has some warm-up time.

00:10:31.640 --> 00:10:34.520
So we'd really want to hit
this application a thousand,

00:10:34.580 --> 00:10:37.020
two thousand times,
and we'll talk about how to

00:10:37.040 --> 00:10:38.670
do that a little bit later.

00:10:40.980 --> 00:10:44.000
So that was Woe of Stats and now I'm
going to hand it over to Stan Jiurman

00:10:44.000 --> 00:10:46.380
who's going to talk about event
logging which will help you get

00:10:46.830 --> 00:10:52.730
into more finer grained detail about
where your application needs tuning.

00:10:53.530 --> 00:10:54.320
Hello.

00:10:54.400 --> 00:10:57.390
I'm going to tell you something
about WoEvent logging,

00:10:57.410 --> 00:11:00.400
which is a new feature
that was added in 4.5.

00:11:00.400 --> 00:11:02.320
WoEstat has been sitting
around for a while,

00:11:02.380 --> 00:11:06.900
but this is a new feature and most
people don't even know it's there,

00:11:06.900 --> 00:11:08.400
so I'm going to tell you about it.

00:11:08.400 --> 00:11:11.180
It's way more fine-grained than WoEstat.

00:11:11.180 --> 00:11:13.400
It doesn't do just components.

00:11:13.400 --> 00:11:17.140
You can use it for logging
any kinds of intervals.

00:11:17.400 --> 00:11:22.360
It allows you to identify
the bottleneck of your app.

00:11:22.570 --> 00:11:24.400
Well, that's what performance
tools are all about.

00:11:24.400 --> 00:11:28.660
And what's interesting,
it's built into any 4.5

00:11:28.660 --> 00:11:31.600
application that you are running.

00:11:41.100 --> 00:11:41.500
Patience.

00:11:41.500 --> 00:11:49.730
That works.

00:11:50.150 --> 00:11:52.600
So what you're going to learn here,
what is an event?

00:11:52.680 --> 00:11:54.560
What's the definition of an event?

00:11:54.560 --> 00:11:56.300
What are the built-in events?

00:11:56.300 --> 00:12:00.400
WebObjects comes with a lot of built-in
events so that you don't need to

00:12:00.490 --> 00:12:02.480
do anything in your applications.

00:12:02.580 --> 00:12:03.480
How do you enable it?

00:12:03.640 --> 00:12:06.330
How do you read the data
that it shows to you?

00:12:06.420 --> 00:12:10.070
And if you're really into it,
how do you define your own custom

00:12:10.070 --> 00:12:15.160
events for tracking of your own
application-specific things?

00:12:15.160 --> 00:12:17.470
I'm going to give up on this.

00:12:17.790 --> 00:12:21.110
What are the prerequisites
to use uEvent logging?

00:12:21.320 --> 00:12:27.620
Well, on any platform WebObjects
4.5 will have this enabled.

00:12:27.620 --> 00:12:31.070
You can connect to it with
any simple web browser and

00:12:31.110 --> 00:12:32.020
you don't need to do anything.

00:12:32.020 --> 00:12:36.190
You don't need to link against
a special framework or library.

00:12:36.350 --> 00:12:41.820
Just when the app looks slow,
you just connect to it and find

00:12:41.820 --> 00:12:41.820
out what's going on right now.

00:12:42.440 --> 00:12:44.140
What is an event?

00:12:44.590 --> 00:12:49.400
An event has basically a
starting point and an end point.

00:12:49.410 --> 00:12:54.060
So within the framework we do
most of those strategic places,

00:12:54.290 --> 00:12:57.300
database fetching, component rendering.

00:12:57.400 --> 00:13:01.290
We already have the start point there,
then we do our own stuff and

00:13:01.290 --> 00:13:03.190
we have the stop point there.

00:13:03.380 --> 00:13:04.390
And those events can be nested.

00:13:04.510 --> 00:13:09.400
Let's say we have a page and
the page is being rendered.

00:13:09.400 --> 00:13:10.880
So the page is subcomponent.

00:13:10.880 --> 00:13:14.340
So we have the start of page and then,
well, start of component one.

00:13:14.390 --> 00:13:16.850
And then the component is
rendering itself and maybe

00:13:16.850 --> 00:13:18.400
needs to do a database access.

00:13:18.400 --> 00:13:23.100
So we have the database access in there.

00:13:24.570 --> 00:13:27.620
All event logging is very,
very efficient.

00:13:27.690 --> 00:13:30.060
There is, again,
no special framework or library

00:13:30.060 --> 00:13:31.460
that you would need to link against.

00:13:31.460 --> 00:13:39.020
All event logging is programmed in line,
so we don't do any objective-C

00:13:39.020 --> 00:13:41.500
posing or anything like that.

00:13:41.500 --> 00:13:45.800
All the analysis that you will see
in the demo is done at analysis time,

00:13:45.800 --> 00:13:50.940
so while we're collecting the events,
it's pretty efficient.

00:13:50.940 --> 00:13:53.540
We have memory overflow
protection so that when you,

00:13:53.540 --> 00:13:56.760
for instance, forget it turned on,
it will not just run out of

00:13:56.760 --> 00:14:00.230
memory and kill your server that
actually is serving customers.

00:14:00.260 --> 00:14:05.490
You might be thinking, "Well,
performance and really efficient,

00:14:05.550 --> 00:14:11.570
what word is that?" On a 300 MHz G3,
we can log 300,000 events

00:14:11.570 --> 00:14:13.280
per second sustained.

00:14:13.280 --> 00:14:14.820
That's something.

00:14:14.840 --> 00:14:18.500
Again, sustained.

00:14:18.500 --> 00:14:20.870
That can go on for hours,
and we won't die on that.

00:14:21.210 --> 00:14:22.960
There's no disk I/O involved.

00:14:23.100 --> 00:14:28.200
I know that it's pretty, these days,
disk is very slow compared

00:14:28.200 --> 00:14:31.540
to what it used to be,
relative terms.

00:14:31.540 --> 00:14:34.420
Also, the way it's done,
it's pure C methods.

00:14:34.530 --> 00:14:39.320
We have some special handling how
to do it straight in C instead of

00:14:39.320 --> 00:14:44.300
objective C and static Java methods
for maximum performance.

00:14:44.520 --> 00:14:46.740
Uh, some more numbers.

00:14:46.740 --> 00:14:51.390
We have a custom memory
manager and garbage collector.

00:14:51.390 --> 00:14:54.620
And so let's say what's the worst
thing that can happen to you?

00:14:54.620 --> 00:14:57.850
You turn on event logging and
you just forget it turned on.

00:14:58.000 --> 00:15:03.740
And so the worst thing that can happen
to is that you will waste four megabytes

00:15:03.740 --> 00:15:06.750
of memory per execution thread.

00:15:06.950 --> 00:15:12.600
And our own memory manager will
recycle this memory as time goes by.

00:15:12.720 --> 00:15:19.280
So the oldest events will be trashed
and the newest ones will be used.

00:15:19.280 --> 00:15:21.860
And all of those levels can be set.

00:15:21.860 --> 00:15:25.860
So if you don't want to waste four
megabytes just on one or whatever,

00:15:25.860 --> 00:15:28.920
you can set that in per default.

00:15:28.920 --> 00:15:30.670
Robustness.

00:15:30.720 --> 00:15:35.340
As we all know,
nobody's perfect and our applications

00:15:35.340 --> 00:15:39.080
do tend to do bad things,
raise exceptions.

00:15:39.080 --> 00:15:40.150
And we handle exceptions gracefully.

00:15:40.280 --> 00:15:42.740
For instance,
you start an event and it's nested nicely

00:15:42.740 --> 00:15:49.120
deeply and within the database execution,
you hit an exception.

00:15:49.660 --> 00:15:50.760
Well, what's going to happen?

00:15:50.760 --> 00:15:53.020
The exception handler is way,
way below and all those

00:15:53.030 --> 00:15:56.300
nicely opened events,
they will not be closed but the exception

00:15:56.300 --> 00:15:59.100
handling mechanism will still catch it.

00:15:59.100 --> 00:16:02.930
And if the system finds out that for some
strange reason something's going wrong,

00:16:03.000 --> 00:16:08.020
the memory's going away or something,
it would just turn itself off.

00:16:08.020 --> 00:16:09.140
And that's on by default.

00:16:09.140 --> 00:16:10.260
You would really have to
tell it not to do that.

00:16:10.260 --> 00:16:13.290
to turn itself off and continue logging.

00:16:13.770 --> 00:16:16.700
The system is very complete.

00:16:16.700 --> 00:16:20.700
We have strategic places
where events are built in.

00:16:20.700 --> 00:16:23.080
There's literally dozens of them.

00:16:23.080 --> 00:16:26.560
I didn't really want to list them all,
but we have for EO adapter,

00:16:26.910 --> 00:16:31.700
regardless which adapter you have,
editing context events, component events,

00:16:31.700 --> 00:16:35.550
again many,
and for all pages and for all bindings.

00:16:35.640 --> 00:16:38.650
We'll see that in a demo later on.

00:16:40.320 --> 00:16:47.260
The user interface for this tool is
accessed through two direct action

00:16:47.260 --> 00:16:49.300
web pages through any browser.

00:16:49.300 --> 00:16:55.300
That's the WoEvent Setup page that
is used to set up the event logging

00:16:55.720 --> 00:17:01.290
and the event display which is
actually used for the data analysis.

00:17:03.220 --> 00:17:04.340
Somebody's cell phone is working.

00:17:04.340 --> 00:17:07.540
I had no signal here.

00:17:07.620 --> 00:17:11.870
Events are grouped into groups
that kind of make sense.

00:17:12.230 --> 00:17:17.200
Say, the database context event is
a group of actually two events,

00:17:17.260 --> 00:17:19.830
objects with fetch
specification and save changes.

00:17:19.830 --> 00:17:23.350
It doesn't really make too much
sense to log one without the other.

00:17:23.550 --> 00:17:26.640
So they're grouped together
and this way we have about a

00:17:26.700 --> 00:17:31.270
dozen of groups with a total of,
you will see the setup page again,

00:17:31.270 --> 00:17:33.600
like three to five events per group.

00:17:36.090 --> 00:17:40.010
The event setup page,
again I'll go more in detail

00:17:40.010 --> 00:17:44.340
into that in the demo,
is used to turn on or off the logging.

00:17:44.540 --> 00:17:48.000
You can also use it to reset logging,
to clean the cache.

00:17:48.000 --> 00:17:51.540
And it will show a dynamic
page of all events that are

00:17:51.540 --> 00:17:54.000
relevant for your application.

00:17:54.000 --> 00:17:57.160
For instance,
when you are using an Oracle adapter,

00:17:57.160 --> 00:18:00.000
it will not show the Sybase event.

00:18:00.000 --> 00:18:02.000
It will show only the Oracle event.

00:18:02.000 --> 00:18:03.000
And so on.

00:18:03.000 --> 00:18:05.670
So if you have custom classes,
and you have even maybe

00:18:06.020 --> 00:18:08.000
your custom events,
those will be listed.

00:18:08.000 --> 00:18:11.000
And if you don't, they won't show up.

00:18:11.000 --> 00:18:12.990
So it's all dynamic.

00:18:14.370 --> 00:18:20.390
The Event Display page is again access to
the Web Event Display Direct Action and

00:18:20.420 --> 00:18:23.840
it allows you to view the data,
to collect the data in five

00:18:23.840 --> 00:18:27.640
different ways depending on what
particular thing you're looking for.

00:18:27.800 --> 00:18:33.140
In the demo I will talk about
three of those most useful ones.

00:18:33.550 --> 00:18:38.130
So this is a more detailed
example of Wolfie Maut encounter

00:18:38.450 --> 00:18:40.400
in a real application execution.

00:18:40.400 --> 00:18:43.760
This is the same slide as before.

00:18:43.790 --> 00:18:49.440
And say you have a main page and it
does something and then within itself

00:18:49.530 --> 00:18:54.540
it builds a dynamic nested component
and that component conditionally

00:18:54.540 --> 00:18:56.300
executes a database fetch.

00:18:56.330 --> 00:18:59.630
Maybe it might not need it,
but maybe it might.

00:18:59.800 --> 00:19:02.040
Compared to that, we have another page.

00:19:02.040 --> 00:19:05.790
It's the same page, but at that point the
condition did not fire,

00:19:05.860 --> 00:19:09.540
and so there is no
database access needed.

00:19:09.540 --> 00:19:11.530
Again, for comparison, we have

00:19:11.600 --> 00:20:38.800
[Transcript missing]

00:20:39.860 --> 00:20:44.290
There will be,
we'll discuss three different

00:20:44.370 --> 00:20:45.880
ways to display the data.

00:20:46.180 --> 00:20:49.210
The most,
the simplest one for when you're

00:20:49.210 --> 00:20:52.320
just starting to performance
enhance your application will be

00:20:52.320 --> 00:20:53.740
view by page and then by component.

00:20:53.800 --> 00:20:57.990
You have a page that has multiple
embedded components and so you'll

00:20:57.990 --> 00:21:01.210
see the most expensive page on top,
then you will see the,

00:21:01.380 --> 00:21:05.250
you open up the link and there
will be more events in there

00:21:05.250 --> 00:21:09.780
sorted by component and you can
drill down into those components.

00:21:09.800 --> 00:21:13.010
components into database
access and whatnot.

00:21:13.830 --> 00:21:16.550
There's another view, View by Page.

00:21:16.670 --> 00:21:20.430
It's very similar to the one,
View by Page, and then Component,

00:21:20.510 --> 00:21:22.700
except it will show all
the components flattened.

00:21:22.700 --> 00:21:25.650
So in a really sophisticated page,
you might find yourself

00:21:26.070 --> 00:21:29.270
looking at a really long list,
and it might be a little bit

00:21:29.270 --> 00:21:32.700
harder to find out which component,
what database access happened.

00:21:32.700 --> 00:21:35.940
But it's a more complete information,
and you can still drill

00:21:35.940 --> 00:21:37.700
down into those supplements.

00:21:37.700 --> 00:21:41.040
And finally,
the Unsorted view is also aggregated,

00:21:41.110 --> 00:21:45.690
so the same aggregation that
I outlined initially would take place.

00:21:45.810 --> 00:21:50.700
But it shows you everything flattened
out throughout your application,

00:21:50.700 --> 00:21:55.690
so you see really the worst thing right
on top and the second worst thing.

00:21:55.710 --> 00:21:59.900
And I think this would be the demo.

00:22:00.490 --> 00:22:01.990
So yeah, excellent.

00:22:02.260 --> 00:22:08.280
What we have here is the Think Movies,
very popular with us on demos.

00:22:08.280 --> 00:22:09.390
I'm sure you've seen it before.

00:22:09.390 --> 00:22:10.950
That's what we ship.

00:22:11.020 --> 00:22:16.780
It's an example, purely written in Java,
and we ship the source for that.

00:22:16.800 --> 00:22:21.060
So we have the homepage,
we have the search page, master index,

00:22:21.120 --> 00:22:24.160
and what I'm doing now
is just click around,

00:22:24.160 --> 00:22:28.800
let's search for S, submit query,
stand by me.

00:22:28.800 --> 00:22:30.800
And we have the simple app.

00:22:30.800 --> 00:22:32.800
I'm not really going
to talk about the app.

00:22:32.800 --> 00:22:36.800
What we want to see is like,
let's say it's slow,

00:22:36.800 --> 00:22:39.290
and so we want to turn on event logging.

00:22:39.430 --> 00:22:45.260
So we go to the WoEventSetup page.

00:22:45.500 --> 00:22:49.050
I hope I'm not the only one
who thinks that keyboard is

00:22:49.060 --> 00:22:52.920
not the best on the planet.

00:22:53.210 --> 00:22:59.080
Here we have the list of relevant
events for this application.

00:22:59.110 --> 00:23:05.100
We have the database context event,
editing context event, application event,

00:23:05.450 --> 00:23:06.100
association event.

00:23:06.100 --> 00:23:09.100
That's the same as like a wall binding.

00:23:09.160 --> 00:23:11.090
It's probably a better name for that.

00:23:11.250 --> 00:23:13.100
Component and component reference event.

00:23:13.100 --> 00:23:17.090
So I'm just going to say select all.

00:23:17.490 --> 00:23:22.700
And, well,
let's go back to the application.

00:23:24.130 --> 00:23:26.440
and I'm going to play around.

00:23:26.460 --> 00:23:29.340
Because boys like to play.

00:23:30.220 --> 00:23:33.630
R-Wars, Master Index.

00:23:33.630 --> 00:23:39.990
Let's just click around,
make the application do something.

00:23:40.810 --> 00:23:43.610
Here, scroll around a little bit.

00:23:43.610 --> 00:23:47.080
This will not be the
most amazing event log,

00:23:47.080 --> 00:23:51.540
again, because we're not showing,
we're not really exercising the app.

00:23:51.590 --> 00:23:57.730
I'll show you a page, star wab,
with lots of really cute, geeky pictures.

00:23:57.820 --> 00:24:02.960
This is the WebObjects builder team,
as it used to be back then when.

00:24:03.030 --> 00:24:06.910
And here we also have the EUF team.

00:24:07.240 --> 00:24:09.700
Look, I feel really special.

00:24:09.700 --> 00:24:13.270
I'm on both teams here.

00:24:13.910 --> 00:24:16.540
So let's not leave the Wolf team out.

00:24:16.580 --> 00:24:18.000
All right?

00:24:18.000 --> 00:24:18.780
Look at this.

00:24:18.840 --> 00:24:20.760
This is a very beautiful picture.

00:24:20.760 --> 00:24:21.900
OK.

00:24:21.960 --> 00:24:24.610
And now let's see how
the application did.

00:24:25.290 --> 00:24:31.010
WoEventDisplay.

00:24:31.750 --> 00:24:33.930
I proudly type with two fingers.

00:24:34.030 --> 00:24:37.440
Whoa, this one is a little bit too big.

00:24:37.440 --> 00:24:40.540
Does anybody know how to
make the font smaller?

00:24:40.610 --> 00:24:44.920
Okay, well, I have a button on the tool,
but not here.

00:24:44.920 --> 00:24:46.290
Okay.

00:24:47.400 --> 00:24:52.030
It looks awkward,
but we will go first to the Show by Page,

00:24:52.060 --> 00:24:54.300
then Component view mode.

00:24:54.510 --> 00:24:59.080
And here we see that all the
pages that our application has

00:24:59.100 --> 00:25:02.860
touched during this brief exercise.

00:25:02.860 --> 00:25:06.290
We logged a total of 1374 events.

00:25:06.870 --> 00:25:08.420
91 events of that was in
EOF and 483 in WebObjects.

00:25:15.280 --> 00:25:18.540
So we see again,
I said we can log 300,000

00:25:18.590 --> 00:25:19.900
events per second.

00:25:19.900 --> 00:25:22.080
And you see that was not
that many events here.

00:25:22.090 --> 00:25:24.400
So you really don't get
any performance hit.

00:25:24.400 --> 00:25:26.570
And when you leave it turned off,
you don't get any

00:25:26.620 --> 00:25:28.400
performance hit whatsoever.

00:25:28.400 --> 00:25:32.430
So let's see what was happening
in the Display Video page.

00:25:32.720 --> 00:25:39.160
We see that it has received 643 calls
and it took 833 milliseconds in total.

00:25:39.250 --> 00:25:45.560
While the Display Set page got about as
many calls but took only 42 milliseconds.

00:25:45.560 --> 00:25:47.830
So we know already where's the problem.

00:25:47.900 --> 00:25:48.690
It's in this page.

00:25:50.270 --> 00:25:51.350
All right.

00:25:51.460 --> 00:25:53.540
And now it's sorted by component.

00:25:53.540 --> 00:25:59.390
This is a pretty lame example because
this page is only one component itself.

00:25:59.400 --> 00:26:02.460
So let's assume there would
be now more components.

00:26:02.550 --> 00:26:05.490
And here we see, uh-oh,

00:26:05.940 --> 00:26:12.130
Pretty much all of the time,
814 milliseconds out of the 833 were used

00:26:12.160 --> 00:26:16.800
in pulling the data for the actor image.

00:26:17.360 --> 00:26:21.320
So, well, that was kind of to be expected
because these are data blobs,

00:26:21.320 --> 00:26:25.140
but it shows you here,
and I can again drill down,

00:26:25.140 --> 00:26:32.970
and I see that actually of all that time,
most of it was in your binding.

00:26:33.470 --> 00:26:38.900
Most of that was actually in the Objects
with Fetch Specification call within EOF.

00:26:39.120 --> 00:26:43.740
So you might want to look,
maybe your fetch specification

00:26:43.740 --> 00:26:47.920
is not the most optimal one,
etc.

00:26:48.130 --> 00:27:01.170
The other display mode that I mentioned
is the one grouped by page only.

00:27:01.170 --> 00:27:02.940
This will be only a very minor change.

00:27:03.000 --> 00:27:09.460
You see there is no component
in their display video page,

00:27:09.460 --> 00:27:11.920
but if it were a real
application with more components,

00:27:11.920 --> 00:27:15.000
it would actually be nice to
have them sorted by component.

00:27:15.830 --> 00:27:16.940
Otherwise,
it can still drill down and you

00:27:16.940 --> 00:27:16.970
will see that the display video
page is still in the same state.

00:27:18.000 --> 00:27:23.740
You will see the objects with fetch spec.

00:27:23.740 --> 00:27:27.300
The last one that I mentioned in
the slides before would be the one

00:27:27.300 --> 00:27:31.920
aggregated hierarchical events,
which is just without sorting,

00:27:31.920 --> 00:27:32.920
without any

00:27:33.030 --> 00:27:36.240
sort of hierarchy.

00:27:36.700 --> 00:27:41.880
And we see immediately that the data
pool from the database is listed topmost.

00:27:41.880 --> 00:27:43.980
It doesn't need to even
drill down anywhere.

00:27:43.980 --> 00:27:46.620
However, as you see,
the list is getting longer and longer.

00:27:46.620 --> 00:27:51.660
And if we had more events,
it would be a little bit harder to read.

00:27:51.660 --> 00:27:55.020
And as I mentioned before with
the aggregation of events,

00:27:55.020 --> 00:28:01.320
when we have a similar call graph
that we actually coalesce all that,

00:28:01.320 --> 00:28:05.900
you see there's also the role mode
that I usually don't want to click

00:28:05.900 --> 00:28:10.530
on because it would list this
one 524 times on the web page.

00:28:10.560 --> 00:28:14.820
So this tool actually does a lot of work
for you just by looking for the identical

00:28:14.870 --> 00:28:18.040
call graph and putting it together.

00:28:18.050 --> 00:28:20.370
So so much for the demo.

00:28:20.380 --> 00:28:22.660
Can we switch back to slides?

00:28:27.720 --> 00:28:33.980
Now, what can you do,
what if you need to customize it?

00:28:34.150 --> 00:28:39.820
What we've shown here,
this is the stock event log

00:28:39.820 --> 00:28:41.160
in and we can customize it.

00:28:41.730 --> 00:28:44.540
It does already quite some stuff for you.

00:28:44.540 --> 00:28:48.600
But if you need to customize it,
the events are very, very general.

00:28:48.600 --> 00:28:52.440
There are two basic superclasses,
the WoEvent and the EOEvent,

00:28:52.440 --> 00:28:54.600
depending what you want to measure.

00:28:54.600 --> 00:28:57.340
You just can subclass that.

00:28:58.030 --> 00:29:03.720
Our events are pretty much everywhere
where it makes sense as you can see.

00:29:03.720 --> 00:29:06.960
Now let's say that you want
to measure something very,

00:29:07.210 --> 00:29:08.090
very specific.

00:29:08.200 --> 00:29:11.120
Let's say that it was not the
database fetch that took so long,

00:29:11.120 --> 00:29:15.560
but for some really strange reason
your init code is taking so much time.

00:29:15.560 --> 00:29:18.710
In your init code you're doing only
three or four things and you want

00:29:18.710 --> 00:29:20.740
to find out what's really so bad.

00:29:20.740 --> 00:29:26.100
What you can do is,
this is a generic piece of code, or okay,

00:29:26.100 --> 00:29:28.600
awake, not init.

00:29:28.600 --> 00:29:29.950
You want to log your own stuff.

00:29:29.950 --> 00:29:33.200
What you do, there's a global variable
that's being set because we set,

00:29:33.200 --> 00:29:37.060
again, very efficient,
so you do just a Boolean test.

00:29:37.060 --> 00:29:40.650
If event logging is enabled,
then only in that case will incur

00:29:40.650 --> 00:29:42.160
that little bit of overhead.

00:29:42.160 --> 00:29:47.090
We'll create a new event,
which is a static method,

00:29:47.090 --> 00:29:51.940
new event of class,
just a normal event class.

00:29:51.940 --> 00:29:53.060
You can pass any string.

00:29:53.060 --> 00:29:54.850
You can pass any string
as a comment to it.

00:29:54.960 --> 00:29:56.880
As you saw in the table
before in the demo,

00:29:56.880 --> 00:30:00.460
there's always comments
that you can display.

00:30:00.470 --> 00:30:03.160
Then you mark the start of the event.

00:30:03.260 --> 00:30:08.190
We also have atomic events that just say,
"Hello, I was here." They don't

00:30:08.320 --> 00:30:12.600
have any duration,
but we will not really go into those.

00:30:12.600 --> 00:30:17.050
Then you have your own code
there that you want to profile.

00:30:17.230 --> 00:30:21.050
Then finally when you're done,
if event is not equal null,

00:30:21.050 --> 00:30:27.840
or nil in my favorite, favorite language,
then you mark the end of event and

00:30:27.840 --> 00:30:30.660
the system will automatically log it.

00:30:30.820 --> 00:30:34.260
It's possible that within
your profile code here,

00:30:34.260 --> 00:30:39.040
you would have some other
start and end event in there.

00:30:39.040 --> 00:30:42.840
Again, if you raise an exception,
our own exception, garbage collector,

00:30:42.840 --> 00:30:45.990
in a sense, we'll take care of that.

00:30:46.790 --> 00:30:51.500
An alternative,
this was the cheap solution.

00:30:51.500 --> 00:30:55.160
Now let's go a little bit into
the more sophisticated one.

00:30:55.160 --> 00:30:57.530
You can provide your own event classes.

00:30:57.700 --> 00:31:02.430
Say you want to log some
really specific things about in

00:31:02.430 --> 00:31:04.140
which context were you called.

00:31:04.140 --> 00:31:07.560
You want not just like I was
called and I took 15 milliseconds,

00:31:07.600 --> 00:31:11.170
but more I was called from this component
or I was called from the other component.

00:31:11.190 --> 00:31:14.900
And you need to store some data
in your instance variables.

00:31:15.800 --> 00:31:19.210
So you just create an empty class.

00:31:20.090 --> 00:31:22.080
And that's good enough.

00:31:22.150 --> 00:31:25.280
And it will be automatically
added to the runtime,

00:31:25.340 --> 00:31:28.190
and the system now knows that it exists.

00:31:28.290 --> 00:31:33.820
And then you just call it, oh,
there's a required description file.

00:31:33.910 --> 00:31:37.980
That's a file,
myComponentEvent.description.

00:31:37.980 --> 00:31:40.190
And there's only one mandatory field.

00:31:40.190 --> 00:31:45.880
That's the EOEventGroupName,
which is my whatever event.

00:31:45.880 --> 00:31:48.670
And then do this, do that.

00:31:48.820 --> 00:31:51.140
I will go back to this screen.

00:31:51.140 --> 00:31:55.040
We see here
EOEventCenter.markStart of event,

00:31:55.040 --> 00:31:56.300
event awake.

00:31:56.320 --> 00:32:01.480
Now that's the key that you would be,
that would be the do this or do that.

00:32:01.480 --> 00:32:04.460
And that's just for you as a programmer,
a really short description.

00:32:04.740 --> 00:32:07.780
And what's going to be shown to
the user in the whole table view of

00:32:07.780 --> 00:32:12.170
the event display will be the long,
verbose description like, "I'm going to

00:32:12.480 --> 00:32:31.400
Operation #1 or another
operation to be logged.

00:32:31.400 --> 00:32:31.400
So this is the basic key value mapping.

00:32:31.400 --> 00:32:31.400
Only the group name is mandatory.

00:32:31.400 --> 00:32:31.400
When you don't supply the other fields,
it will just take whatever you pass

00:32:31.400 --> 00:32:31.400
in as a string and you place it in
the project resource suitcase and it

00:32:31.400 --> 00:32:31.400
will automatically be taken care of.

00:32:31.500 --> 00:32:35.060
I think that's about it
for the event logging.

00:32:35.060 --> 00:32:36.620
I'll give back to Eric.

00:32:36.620 --> 00:32:39.050
Probably he knows how to operate this.

00:32:40.220 --> 00:32:42.100
The button that you
showed me did not work.

00:32:42.100 --> 00:32:44.100
I had to start using left and right.

00:32:44.100 --> 00:32:46.100
Thanks, Stan.

00:32:51.710 --> 00:32:54.680
So event logging is really neat and
I'm looking forward to upgrading some

00:32:54.680 --> 00:32:58.150
of our applications from 4.0 to 4.5
just to get that feature and help

00:32:58.150 --> 00:33:03.400
us get into tuning our applications
at that high level of detail.

00:33:03.600 --> 00:33:09.420
One of the things that Stan and
I both commented on is that you

00:33:09.430 --> 00:33:12.200
need to do this under stress.

00:33:12.760 --> 00:33:16.140
Sitting there and having one
person hit the application and

00:33:16.140 --> 00:33:17.880
logging these events isn't enough.

00:33:17.910 --> 00:33:19.450
It doesn't give you enough detail.

00:33:19.450 --> 00:33:22.880
It doesn't tell you what's happening
when your application is running.

00:33:22.920 --> 00:33:25.380
So the next topic we're
going to talk about is a tool

00:33:25.510 --> 00:33:27.420
that's built into WebObjects.

00:33:27.420 --> 00:33:29.880
I refer to it as a
playback and recording,

00:33:29.880 --> 00:33:31.380
recording and playback.

00:33:31.390 --> 00:33:34.880
It allows you to generate load on your
WebObjects applications and then the

00:33:34.880 --> 00:33:38.430
numbers that you've seen in WoeStats
and Event Logging are going to turn

00:33:38.440 --> 00:33:41.110
into something that you can interpret.

00:33:41.420 --> 00:33:44.620
and it'll be useful in helping
you forecast things like how many

00:33:44.620 --> 00:33:47.560
instances you're going to need,
how much hardware you're going to need,

00:33:47.660 --> 00:33:50.600
and where to go from
there in your deployment.

00:33:50.680 --> 00:33:54.220
A couple of things I wanted
to go back and touch upon.

00:33:55.620 --> 00:33:58.390
When you're doing this kind
of testing and you saw that

00:33:58.400 --> 00:34:02.700
this measures using real time,
you want to make sure that the system

00:34:02.700 --> 00:34:05.450
that you're testing on doesn't have
a lot of other things running on it.

00:34:05.500 --> 00:34:08.490
If you have other servers running,
you have other processes running,

00:34:08.500 --> 00:34:12.260
they're going to take time on the
CPU and take up resources that

00:34:12.260 --> 00:34:14.630
are going to skew these results.

00:34:17.700 --> 00:34:19.900
Okay.

00:34:19.960 --> 00:34:25.210
So playback and recording,
as I mentioned, is a load testing feature

00:34:25.590 --> 00:34:26.700
built into WebObjects.

00:34:26.700 --> 00:34:31.010
I'm going to talk in a
minute about what it's,

00:34:31.010 --> 00:34:31.010
what it's, what it's

00:34:33.160 --> 00:34:34.340
As I mentioned, it's load testing.

00:34:34.340 --> 00:34:37.720
I'll talk in a minute about what not
to use it for because it's intended

00:34:37.720 --> 00:34:43.290
for some very specific things and
I've heard and seen people misuse it.

00:34:43.350 --> 00:34:47.960
Basically,
what it does is record sessions.

00:34:48.010 --> 00:34:50.460
You use a browser,
you click through your application,

00:34:50.460 --> 00:34:52.260
get the coverage of the
pages that you want,

00:34:52.320 --> 00:34:56.140
and it records that session,
saves out the raw HTTP requests

00:34:56.180 --> 00:34:58.700
and responses to disk,
and then you can use those

00:34:58.700 --> 00:35:02.660
at a later time to play them
back and simulate traffic.

00:35:08.910 --> 00:35:11.300
So I emphasized load, right?

00:35:11.440 --> 00:35:17.480
Playback is intended for prototyping load
and once you do this you get a good feel

00:35:17.920 --> 00:35:21.800
for how your application is performing
when it's in a deployment environment.

00:35:21.800 --> 00:35:25.730
One client and one server
doesn't really cut it.

00:35:25.830 --> 00:35:29.880
So once you start using the
playback tool or some other tool,

00:35:29.880 --> 00:35:34.060
then you can access your application with
the browser and see how it reacts with

00:35:34.060 --> 00:35:35.800
one instance on your development box.

00:35:35.800 --> 00:35:39.160
You can take this on to your QA or
staging environment and see how it

00:35:39.160 --> 00:35:43.400
behaves there on the class of hardware
that you're going to deploy on and get

00:35:43.400 --> 00:35:46.630
a feel for how it's going to work there.

00:35:46.800 --> 00:35:49.790
So I'm saying it's free.

00:35:49.800 --> 00:35:52.800
Well, yeah,
it's free if you have the product.

00:35:52.800 --> 00:35:57.070
There are other tools I'll mention in
a few minutes that you could use that

00:35:57.100 --> 00:36:01.890
aren't free or that aren't bundled
with WebObjects that do the same kind

00:36:01.890 --> 00:36:03.800
of thing and do other things as well.

00:36:03.800 --> 00:36:04.800
But Playback Manager is a great tool.

00:36:04.800 --> 00:36:04.800
So I emphasized load, right?

00:36:04.800 --> 00:36:04.800
Playback is intended for prototyping load
and once you do this you get a good feel

00:36:04.800 --> 00:36:04.800
for how your application is performing
when it's in a deployment environment.

00:36:04.800 --> 00:36:04.980
One client and one server
doesn't really cut it.

00:36:04.980 --> 00:36:05.210
So once you start using the
playback tool or some other tool,

00:36:05.210 --> 00:36:05.470
then you get a good feel for how
your application is performing when

00:36:05.480 --> 00:36:05.800
it's in a deployment environment.

00:36:05.800 --> 00:36:07.520
So I think Playback Manager is
a great start like Woe Stats

00:36:07.600 --> 00:36:09.790
is for getting a feel for how
your application is performing.

00:36:09.800 --> 00:36:14.180
The last point I want to make is
that we've used it very successfully

00:36:14.180 --> 00:36:18.260
in Internet services and the
Apple Store is an example of a high

00:36:18.260 --> 00:36:22.570
volume Internet site that we used
the playback tool over and over,

00:36:22.610 --> 00:36:26.230
fine-tuned our application,
continued to reuse it and

00:36:26.280 --> 00:36:30.800
ended up with a very stable
application once we deployed it.

00:36:33.170 --> 00:36:36.550
So, it's not a coverage tool,
it's not for functional testing,

00:36:36.560 --> 00:36:37.340
it's not scriptable.

00:36:37.340 --> 00:36:40.590
Once you record that session,
that session is going to get played

00:36:40.590 --> 00:36:42.100
back and you can't change that.

00:36:42.100 --> 00:36:45.600
You'd have to record many
sessions to get coverage.

00:36:45.840 --> 00:36:49.340
And this,
depending upon your application,

00:36:49.340 --> 00:36:51.590
can be very complicated.

00:36:51.870 --> 00:36:54.310
That's why I emphasized load before
because if you're going to use

00:36:54.330 --> 00:36:56.370
it to try to get the coverage,
you're going to want to use some

00:36:56.380 --> 00:36:59.150
other tool or create a custom script.

00:36:59.950 --> 00:37:02.980
Another limitation is that it
can't do very good validation

00:37:03.060 --> 00:37:04.380
on the results of your pages.

00:37:04.470 --> 00:37:08.040
So if you're sending back dynamic
data coming from your database,

00:37:08.190 --> 00:37:11.080
you're going to have some challenges
making it validate that that's okay.

00:37:11.400 --> 00:37:13.320
All it really does is compare
page lengths and says,

00:37:13.370 --> 00:37:16.320
"Yeah,
if this page is the same as this one,

00:37:16.320 --> 00:37:20.980
then I should continue on to the
next HTTP request in the session."

00:37:22.530 --> 00:37:27.250
And it can get tricky to manage a high
volume of virtual clients with the tool.

00:37:27.280 --> 00:37:30.660
If you want to simulate
tens of thousands of users,

00:37:30.830 --> 00:37:34.400
it's not going to scale up
to your needs very easily.

00:37:34.550 --> 00:37:36.480
The playback manager can do this.

00:37:36.530 --> 00:37:41.160
It takes some of your time and investment
to get into that and set that up.

00:37:41.230 --> 00:37:43.500
It also takes some hardware to do this.

00:37:43.500 --> 00:37:48.480
You're going to need more machines
to simulate that kind of traffic.

00:37:50.820 --> 00:37:53.840
So the first thing you have
to do is make a recording.

00:37:53.930 --> 00:37:55.640
So here's an example.

00:37:55.680 --> 00:37:58.530
You just start Think Movies,
the application that Stan used earlier,

00:37:58.530 --> 00:38:03.080
with this argument and give it a path to
tell it where to record those sessions,

00:38:03.190 --> 00:38:06.500
where it's going to save
those requests and responses.

00:38:07.070 --> 00:38:10.590
Start your application,
launch your browser,

00:38:10.610 --> 00:38:12.810
click through your application,
and when you're done,

00:38:12.810 --> 00:38:14.500
stop your application.

00:38:14.500 --> 00:38:16.660
That's all you need to do in a session.

00:38:16.930 --> 00:38:19.600
Several files will be
stored in a directory.

00:38:19.610 --> 00:38:21.720
There will be a directory
created inside SlashTemp,

00:38:21.800 --> 00:38:26.160
like for example,
thinkmovies.rec recording.

00:38:26.170 --> 00:38:30.480
And there will be all the
HTTP requests and responses in there.

00:38:31.590 --> 00:38:34.510
As I mentioned,
there's a couple of options for playback.

00:38:34.510 --> 00:38:37.440
There's a command line interface,
which I'll show you a screenshot of.

00:38:37.550 --> 00:38:42.950
And there's Playback Manager,
which allows you to launch some Java

00:38:43.400 --> 00:39:06.800
[Transcript missing]

00:39:09.900 --> 00:39:14.530
So let's take a look at the screenshot
of that command line interface.

00:39:14.620 --> 00:39:22.460
So here I took a screenshot of running
this recording I did on Hello World.

00:39:22.460 --> 00:39:24.200
Hello World is a very simple application.

00:39:24.200 --> 00:39:31.020
It puts up a form and you type in a
text and it sends the next request

00:39:31.020 --> 00:39:35.690
and displays a page that says
hello whatever name you typed in.

00:39:35.690 --> 00:39:35.690
Now,

00:39:36.160 --> 00:39:37.970
Another important thing
about playback to mention,

00:39:38.020 --> 00:39:41.000
when you record this script,
it's recording the raw HTTP.

00:39:41.000 --> 00:39:44.970
So if you entered in, in my case, Eric,
for the Hello World example,

00:39:45.090 --> 00:39:47.910
every time it did that,
it would send back the same text.

00:39:47.950 --> 00:39:52.200
So another limitation there is
it's not good for dynamic data.

00:39:52.200 --> 00:39:55.460
There's some other tools that can
take data and insert those into the

00:39:55.470 --> 00:39:59.560
forms in your WebObjects application
and simulate more variety and

00:39:59.740 --> 00:40:04.220
coverage in your form posting.

00:40:07.770 --> 00:40:10.300
I wanted to mention
another thing on here.

00:40:10.330 --> 00:40:13.920
You see a number on the far left
which is the total number of

00:40:13.920 --> 00:40:16.460
requests that the tool has sent.

00:40:16.550 --> 00:40:21.900
There's the time it took to receive that

00:40:22.840 --> 00:40:23.850
Response Back.

00:40:23.930 --> 00:40:27.220
That's the total amount of time
measured from the client's perspective.

00:40:27.310 --> 00:40:29.880
Now,
earlier we saw Woe Stats and we looked

00:40:29.990 --> 00:40:34.300
at event logging and we got numbers that
were measured lower down in the stack.

00:40:34.380 --> 00:40:36.000
Right?

00:40:36.090 --> 00:40:38.920
So, in this case,
we're looking at 7/1000th of a

00:40:38.920 --> 00:40:40.460
second for request number one.

00:40:40.460 --> 00:40:43.340
If we look at, if we did the same
measurement on Woe Stats,

00:40:43.400 --> 00:40:46.990
we should see a smaller number
because there is I/O going on.

00:40:46.990 --> 00:40:50.750
The raw HTTP is being sent back
and forth from the browser.

00:40:50.750 --> 00:40:53.660
That's going to take at least some time.

00:40:53.780 --> 00:40:57.930
So, you can use these numbers to make
sure that the numbers you're seeing

00:40:57.930 --> 00:40:59.350
on the server side make sense.

00:40:59.350 --> 00:41:01.800
And then that overall picture
that I showed at the beginning,

00:41:01.880 --> 00:41:05.840
you're taking timings at the very
top inside WebObjects as soon as a

00:41:05.860 --> 00:41:08.300
request gets in and is being sent back.

00:41:08.400 --> 00:41:12.470
And then you use event logging to go
deeper in and analyze those smaller

00:41:12.510 --> 00:41:14.920
code fragments that you've written.

00:41:16.520 --> 00:41:19.950
In the middle you'll see average,
which is a moving average.

00:41:19.950 --> 00:41:22.300
And this is a good number to
match up with one of those

00:41:22.300 --> 00:41:25.650
numbers at the top of Woe Stats,
which tells you what your

00:41:25.650 --> 00:41:27.400
overall transaction time is.

00:41:27.630 --> 00:41:29.310
And then it shows you bytes.

00:41:29.390 --> 00:41:36.390
And I set a parameter you'll see
on the top line to be very large.

00:41:36.390 --> 00:41:39.270
Basically, like I said,
it does matching based

00:41:39.270 --> 00:41:40.400
on the page lengths.

00:41:40.510 --> 00:41:43.490
And if your page lengths that
it gets back don't match,

00:41:43.660 --> 00:41:46.400
then it considers that
a failed transaction.

00:41:46.400 --> 00:41:48.060
And you'll see that all these passed.

00:41:48.140 --> 00:41:52.680
And you can have it ignore
failures and keep going or

00:41:52.720 --> 00:41:58.460
You can have it stop when it gets
to a page that doesn't match.

00:41:58.550 --> 00:42:00.840
If your recording goes through
your application and doesn't

00:42:00.930 --> 00:42:05.740
get into a lot of dynamic data,
you don't have pages that grow based

00:42:05.850 --> 00:42:09.470
on how much data is in your database,
you can set that percentage down a lot

00:42:09.560 --> 00:42:14.390
lower and get more meaningful results
and actually use it for some validation.

00:42:14.770 --> 00:42:17.480
But that leads us into what
other options are there.

00:42:17.690 --> 00:42:19.700
There are some third-party tools.

00:42:19.770 --> 00:42:27.620
We've used a few that will do
more for you than playback can.

00:42:27.950 --> 00:42:31.140
I know of a couple and I know
there's some others out there.

00:42:31.140 --> 00:42:34.700
Mercury has one called Load Runner,
runs on NT.

00:42:35.130 --> 00:42:38.900
RSW has one called eTestSuite
which runs on NT as well.

00:42:38.990 --> 00:42:42.720
And used a little bit of each of those to
do some testing and they're a lot better

00:42:43.010 --> 00:42:44.900
for coverage in that you can script.

00:42:44.900 --> 00:42:48.900
So you can write a script
with one of these tools.

00:42:48.900 --> 00:42:52.770
Let's say for example an iCards
application on our website.

00:42:52.900 --> 00:42:56.010
You can have it go in and try to
send every one of those cards and

00:42:56.010 --> 00:42:58.900
we can get better coverage and
make sure all the images load.

00:42:58.900 --> 00:43:02.130
It's not doing what playback
and recording is doing where

00:43:02.130 --> 00:43:03.840
it's just sending the HTML.

00:43:03.910 --> 00:43:05.900
It actually fetches
all the images as well.

00:43:05.900 --> 00:43:08.140
So we can make sure that
all of our images appear,

00:43:08.140 --> 00:43:09.860
we don't have broken links, etc.

00:43:09.910 --> 00:43:11.900
with a tool like this.

00:43:11.920 --> 00:43:14.900
And you can write a
script to do the coverage.

00:43:14.900 --> 00:43:17.960
So go touch every category in iCards,
go try every card,

00:43:17.960 --> 00:43:18.900
make sure all the images are in there.

00:43:18.900 --> 00:43:21.910
images load, et cetera, et cetera.

00:43:22.280 --> 00:43:25.820
This obviously will help you
with regression testing if your

00:43:25.910 --> 00:43:29.150
application is not changing too much
or you've made a change that should

00:43:29.150 --> 00:43:30.330
not affect the user interface.

00:43:30.440 --> 00:43:36.660
You can use a tool like this to
make sure that you have no new bugs.

00:43:37.220 --> 00:43:39.990
and they're more flexible in
the way that they do validation.

00:43:40.000 --> 00:43:43.380
So if you have a string that
appears on a page that's an error,

00:43:43.420 --> 00:43:46.760
server error, error page not found,
something like that,

00:43:46.790 --> 00:43:49.900
you can ask these tools, "Hey,
if you ever see this string,

00:43:49.930 --> 00:43:50.700
report an error.

00:43:50.700 --> 00:43:52.830
I want to know about
it." And you can have it,

00:43:52.850 --> 00:43:55.580
if you have dynamic data and
your page gets much longer,

00:43:55.600 --> 00:43:59.950
you may have some text at the bottom
of that page that signifies that

00:43:59.950 --> 00:44:03.200
this was a valid retrieval of data,
this page is fine.

00:44:03.200 --> 00:44:05.340
You can say, "I don't care whatever
else is on the page.

00:44:05.410 --> 00:44:09.580
If you see this string,
it's a valid response and we

00:44:09.580 --> 00:44:12.480
should continue on with the test."

00:44:15.710 --> 00:44:18.520
The other thing that you can do
with these once you've set them

00:44:18.520 --> 00:44:21.690
up is put a box just outside
your deployment environment,

00:44:21.700 --> 00:44:24.290
outside your firewall,
and have it just sit there and

00:44:24.290 --> 00:44:27.840
execute a script every hour or
two or maybe every couple minutes.

00:44:27.940 --> 00:44:30.640
Make sure that your application
is responding and doing the

00:44:30.640 --> 00:44:34.340
things that you expect it to do,
which turns it from a testing and

00:44:34.390 --> 00:44:40.360
development tool into a deployment tool
where you can check for response times,

00:44:40.360 --> 00:44:42.500
make sure your application isn't down.

00:44:42.600 --> 00:44:48.290
It's just unlimited with the
scripting capabilities you could add

00:44:48.350 --> 00:44:51.780
to do some checking of your site.

00:44:59.160 --> 00:45:03.490
So I want to wrap up with other
factors that influence performance

00:45:03.600 --> 00:45:05.940
and talk about these a little bit.

00:45:06.040 --> 00:45:08.010
We're talking,
back in the beginning I showed

00:45:08.010 --> 00:45:09.360
the architecture diagram.

00:45:09.450 --> 00:45:14.740
We were focused in on the green box,
what you can do in WebObjects.

00:45:15.610 --> 00:45:18.030
And as I said before,
when you do a test like this,

00:45:18.080 --> 00:45:21.540
make sure that you're testing
something similar to what you're

00:45:21.550 --> 00:45:22.620
going to be deploying with.

00:45:22.730 --> 00:45:25.210
Ultimately, if you can test in your
deployment environment,

00:45:25.360 --> 00:45:27.140
that's the best thing you can do.

00:45:27.140 --> 00:45:29.980
If you have the same class of
hardware that you're going to use

00:45:30.030 --> 00:45:31.530
in your deployment environment,
use that.

00:45:31.540 --> 00:45:35.930
If your database is going to have
a load on it from other sources,

00:45:36.040 --> 00:45:39.470
not just WebObjects,
simulate that if you can.

00:45:39.650 --> 00:45:42.860
The more realistic you can make
this environment for testing,

00:45:42.870 --> 00:45:46.980
the better results you're going to get
from event logging and WoW statistics.

00:45:47.860 --> 00:45:51.890
In the big picture, hardware,
the CPU that you use,

00:45:51.970 --> 00:45:55.210
the amount of RAM makes a big difference.

00:45:55.210 --> 00:45:58.620
There's tools on all the platforms
we deploy on that you can use

00:45:58.730 --> 00:46:02.710
to monitor how busy is the CPU.

00:46:02.750 --> 00:46:05.080
Am I utilizing this
system very efficiently?

00:46:05.440 --> 00:46:10.730
Is it maxed out?

00:46:10.730 --> 00:46:10.730
Is it CPU bound?

00:46:10.820 --> 00:46:17.700
Memory Swapping Out to Disk.

00:46:17.700 --> 00:46:17.700
Check on Solaris there's something as
simple as VMstat you can use to do that.

00:46:17.700 --> 00:46:23.050
There's been some other sessions that
talked about database optimizations,

00:46:23.650 --> 00:46:25.800
advanced EOF.

00:46:27.380 --> 00:46:31.220
You can do a lot of things
there to improve your

00:46:31.230 --> 00:46:33.490
overall database performance.

00:46:33.580 --> 00:46:38.300
Obvious things, turning indexing on,
and if you can influence the schema,

00:46:38.300 --> 00:46:41.780
you can make some adjustments
there that are going to affect

00:46:41.890 --> 00:46:43.390
the overall performance.

00:46:43.440 --> 00:46:46.420
I'm not going to even go down
too far into the single-threaded

00:46:46.520 --> 00:46:48.150
versus multi-threaded topic.

00:46:48.230 --> 00:46:51.460
I'll just tell you a little
bit of what we found is that

00:46:51.470 --> 00:46:58.360
single-threaded apps do just fine,
and the maintenance cost is very low.

00:46:58.360 --> 00:47:02.360
You don't get into more complexity.

00:47:02.430 --> 00:47:05.220
A lot of the apps,
in fact all the apps we deploy,

00:47:05.220 --> 00:47:08.010
are single-threaded and
they perform just fine.

00:47:08.110 --> 00:47:11.760
Letting the operating system do
the switching across multiple

00:47:11.760 --> 00:47:13.960
instances is sometimes just as good.

00:47:14.030 --> 00:47:17.290
It's not worrying about all the issues
that go along with multi-threaded.

00:47:17.400 --> 00:47:20.720
Having said that,
you can obviously run into situations

00:47:20.720 --> 00:47:23.360
where you have long-running
requests and multi-threaded apps.

00:47:23.360 --> 00:47:26.370
apps may be your answer.

00:47:28.490 --> 00:47:32.020
And as Stan pointed out with
the event logging features,

00:47:32.130 --> 00:47:34.670
you can write custom events.

00:47:34.670 --> 00:47:36.140
My picture only showed a database.

00:47:36.140 --> 00:47:38.320
You could have other things, LDAP.

00:47:38.410 --> 00:47:41.760
You may be relying on reading
and writing files a lot,

00:47:41.810 --> 00:47:43.400
other factors.

00:47:44.400 --> 00:47:47.720
Write custom events,
wrap those bits of code with

00:47:47.740 --> 00:47:52.400
custom events and figure out how
those impact your overall system.

00:47:52.400 --> 00:47:55.710
The more information you have,
you'll be able to influence

00:47:55.710 --> 00:47:58.150
the other parts of that
picture that I drew earlier.

00:47:59.510 --> 00:48:02.270
Maybe your problem is not in WebObjects,
but it's in your database

00:48:02.350 --> 00:48:03.400
or somewhere else.

00:48:03.400 --> 00:48:08.400
And the more data you have,
you can go and optimize your code.

00:48:08.400 --> 00:48:11.390
And once that's done,
it's somebody else's job.

00:48:13.460 --> 00:48:18.750
Hopefully we've given you a better
idea for how to measure the performance

00:48:18.750 --> 00:48:22.890
of your WebObjects application,
how to dig deeper, get some numbers.

00:48:22.900 --> 00:48:27.680
I'll invite Stan back up here
and we can take your questions.