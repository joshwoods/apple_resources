WEBVTT

00:00:05.520 --> 00:00:09.280
Ladies and gentlemen,
please welcome Carbon Technology Manager,

00:00:09.350 --> 00:00:11.280
David Wright.

00:00:18.300 --> 00:00:19.300
Welcome everybody.

00:00:19.300 --> 00:00:22.600
I just wanted to see how many stayed
because this is the first time this hall

00:00:22.600 --> 00:00:25.300
has competition with other sessions.

00:00:25.300 --> 00:00:26.440
Alright.

00:00:26.440 --> 00:00:28.280
As you can tell,
we are so ready for all of you

00:00:28.280 --> 00:00:31.800
to bring your applications to
Mac OS X by carbonizing them.

00:00:31.800 --> 00:00:34.780
And this session is the kickoff for that,
so I want to just bring

00:00:34.780 --> 00:00:35.800
Scott Forstall up.

00:00:35.800 --> 00:00:37.570
He's the Director of
Application Frameworks in

00:00:37.800 --> 00:00:39.010
Apple Software Engineering Group.

00:00:39.140 --> 00:00:41.400
Please welcome Scott Forstal.

00:00:48.710 --> 00:00:50.260
Is everyone ready to learn about Carbon?

00:00:50.260 --> 00:00:52.900
No, come on.

00:00:52.900 --> 00:00:55.220
Is everyone ready to learn about Carbon?

00:00:56.900 --> 00:01:05.660
Okay, a couple years ago we came up
with this Carbon strategy and we

00:01:05.660 --> 00:01:10.330
were incredibly excited about it
and we gave you the direction.

00:01:11.100 --> 00:01:14.020
But it was a little bit fuzzy.

00:01:14.020 --> 00:01:16.860
The strategy made sense,
and you all told us that.

00:01:16.860 --> 00:01:19.520
But some of the details
weren't quite there yet.

00:01:19.520 --> 00:01:23.460
We needed to fill in exactly
what were the Carbon APIs.

00:01:23.460 --> 00:01:25.900
We certainly needed to
fill in the implementation.

00:01:25.900 --> 00:01:31.130
And so last year, we took Carbon and we
brought it into sharp focus.

00:01:32.590 --> 00:01:37.140
And no,
I did not name my daughter Carbon.

00:01:37.150 --> 00:01:42.090
As tempting as that may have been to me,
it wasn't tempting to my wife.

00:01:42.810 --> 00:01:45.530
So last year we really filled
out the details of Carbon.

00:01:45.760 --> 00:01:47.910
We gave you a complete Carbon spec.

00:01:48.130 --> 00:01:51.190
We gave you a lot of tools
that helped with Carbonization.

00:01:51.520 --> 00:01:54.480
We gave you this thing called the
Carbon Dater that you've heard about,

00:01:54.500 --> 00:01:55.800
which is an amazing thing.

00:01:55.800 --> 00:02:00.530
The tool creates custom
documentation to tell you how you

00:02:00.530 --> 00:02:03.170
can Carbonize your application.

00:02:04.180 --> 00:02:08.390
So over the last year,
it's been really exciting for me and the

00:02:08.420 --> 00:02:13.100
Carbon effort to watch how many of you
have started taking advantage of Carbon.

00:02:13.200 --> 00:02:14.090
It's been fabulous.

00:02:14.140 --> 00:02:19.800
Every few days, every week,
I see a new Carbon application appear.

00:02:19.850 --> 00:02:23.680
But I know that some of you last year,
you looked up and you said,

00:02:24.480 --> 00:02:26.640
I like Carbon.

00:02:26.640 --> 00:02:28.420
I like the direction,
I like the strategy,

00:02:28.510 --> 00:02:33.480
the details make sense,
but it looks a little bit fragile.

00:02:33.870 --> 00:02:36.150
You know,
it can't even hold its head up by itself,

00:02:36.150 --> 00:02:36.620
right?

00:02:36.710 --> 00:02:38.740
And so you waited a little bit.

00:02:38.810 --> 00:02:42.900
Well, over the last year,
Carbon has matured a ton.

00:02:42.960 --> 00:02:44.240
And Carbon is now ready.

00:02:44.340 --> 00:02:46.020
It is not fragile anymore.

00:02:46.080 --> 00:02:51.390
And this year, it's time for all of us
and all of you to dig in.

00:02:53.040 --> 00:02:56.280
and I've been working all the time
so I have to work in pictures of

00:02:56.280 --> 00:02:58.750
her so I know what she looks like.

00:02:59.700 --> 00:03:02.760
It's time for you not to
worry about being dirty,

00:03:02.860 --> 00:03:04.540
getting your hands dirty,
getting your face dirty.

00:03:04.540 --> 00:03:05.240
You've got to dig in.

00:03:05.240 --> 00:03:08.760
It's time to really get
started with Carbon.

00:03:08.900 --> 00:03:10.670
So let's do that.

00:03:11.530 --> 00:03:18.760
At the end of this hour of bliss,
I could pull the junior high

00:03:18.900 --> 00:03:22.140
school trick of having a pop quiz,
right?

00:03:22.230 --> 00:03:24.630
Telling you to close your books,
put them under the desk,

00:03:24.650 --> 00:03:26.500
those frightening words.

00:03:26.630 --> 00:03:29.500
And I'd have five simple
questions on this quiz.

00:03:29.520 --> 00:03:32.480
And it'd be easy because I'm going
to tell you the answers right now.

00:03:32.570 --> 00:03:35.560
So the questions would be, first of all,

00:03:36.180 --> 00:03:38.980
What are the user benefits of Carbon?

00:03:39.060 --> 00:03:42.870
So when we went and designed Carbon,
we did it with the user in mind.

00:03:43.020 --> 00:03:47.610
With a laser, we looked at how can we
better benefit the user?

00:03:48.590 --> 00:03:50.740
Next, what exactly is Carbon?

00:03:50.740 --> 00:03:52.080
So you've heard about the benefits.

00:03:52.080 --> 00:03:53.380
You've heard a lot about Carbon.

00:03:53.380 --> 00:03:55.600
But what exactly makes up Carbon?

00:03:56.530 --> 00:03:58.240
We want to keep the user happy.

00:03:58.240 --> 00:03:59.900
And of course, you're all our friends.

00:03:59.900 --> 00:04:01.900
We want to keep you happy as well.

00:04:01.900 --> 00:04:04.590
So what are the developer benefits?

00:04:04.980 --> 00:04:07.400
How do you build a great
Carbon application?

00:04:07.430 --> 00:04:10.280
Not how do you just build
a Carbon application,

00:04:10.310 --> 00:04:14.540
but how can you go that step beyond
and get a great Carbon application?

00:04:14.580 --> 00:04:17.460
And last, when should you carbonize?

00:04:17.470 --> 00:04:19.610
All right, let's dig in.

00:04:24.880 --> 00:04:29.160
Two years ago,
when we came up with the Carbon Strategy,

00:04:29.240 --> 00:04:31.190
I had this dream.

00:04:31.760 --> 00:04:34.670
And to this day,
I still think this dream best

00:04:34.830 --> 00:04:38.600
illustrates the user benefits of Carbon.

00:04:38.720 --> 00:04:41.450
So I've been thinking a lot
about this dream recently,

00:04:41.510 --> 00:04:43.660
and I had it again.

00:04:44.130 --> 00:04:45.640
A little updated version.

00:04:45.710 --> 00:04:51.500
So sit back and psychoanalyze me
as I tell you my Carbon dream,

00:04:51.510 --> 00:04:53.890
or my Mac OS X dream.

00:04:54.570 --> 00:04:56.740
So here's how the dream goes.

00:04:56.750 --> 00:05:00.570
Apple is throwing this huge party.

00:05:00.960 --> 00:05:03.300
It's the Mac OS X party.

00:05:03.340 --> 00:05:05.380
And outside this part is a big sign.

00:05:05.400 --> 00:05:10.140
And it says, Mac OS X,
all of your apps are invited.

00:05:11.730 --> 00:05:14.280
An app started arriving at this party.

00:05:14.330 --> 00:05:17.920
Now, the first group to come
are these Cocoa folks.

00:05:17.970 --> 00:05:19.580
Because the Cocoa folks,
they're pretty hip to

00:05:19.590 --> 00:05:21.280
the whole Mac OS X idea.

00:05:21.320 --> 00:05:23.620
They're old friends with Mach.

00:05:23.670 --> 00:05:25.620
They came into the party,
and they said they came

00:05:25.620 --> 00:05:27.720
in through the 20th floor.

00:05:28.570 --> 00:05:29.920
And they're a dynamic bunch.

00:05:29.980 --> 00:05:30.970
They're walking around the party.

00:05:31.020 --> 00:05:31.950
They're enjoying themselves.

00:05:32.050 --> 00:05:33.920
They're throwing messages at each other.

00:05:33.970 --> 00:05:35.790
And they're having a good time.

00:05:36.030 --> 00:05:39.540
The second group that
came was a little strange.

00:05:39.540 --> 00:05:44.010
It was this big cluster,
like a rugby scrum.

00:05:44.020 --> 00:05:48.080
And they're all like attached to the
hip and they walked in together and

00:05:48.080 --> 00:05:50.500
they couldn't separate from each other.

00:05:50.500 --> 00:05:52.150
And it was a bunch of
old friends in there.

00:05:52.150 --> 00:05:53.480
I mean, we recognized everyone.

00:05:53.550 --> 00:05:54.840
It was all these old friends.

00:05:54.840 --> 00:05:57.480
But, you know,
they're sitting there partying and

00:05:57.480 --> 00:05:59.600
they're drinking and they're having fun.

00:05:59.600 --> 00:06:02.230
And, God, one guy in the middle,
he drinks way too much.

00:06:02.230 --> 00:06:02.600
Boom!

00:06:02.600 --> 00:06:03.640
Falls in his face.

00:06:04.380 --> 00:06:05.670
And the entire group, boom!

00:06:05.780 --> 00:06:06.850
Falls in their face.

00:06:06.860 --> 00:06:09.500
Turns out,
I just looked at that and I said,

00:06:09.500 --> 00:06:11.380
you know, that's classic.

00:06:15.500 --> 00:06:16.500
And that's what that was.

00:06:16.500 --> 00:06:18.500
That's the classic apps.

00:06:18.500 --> 00:06:22.360
They're all these old friends
and they're invited to the party.

00:06:22.390 --> 00:06:25.100
But even at the Mac OS X party,
they're no more stable,

00:06:25.100 --> 00:06:27.300
they're no more independent
than they were before.

00:06:27.300 --> 00:06:29.830
They're all,
they're stuck together at the hips.

00:06:29.840 --> 00:06:32.440
The next group that came in,
they came running in,

00:06:32.630 --> 00:06:35.510
they came running up to the door
and they ran in and they said,

00:06:35.510 --> 00:06:36.620
hey, I'm Java.

00:06:36.620 --> 00:06:38.740
And this guy said, hey, I'm Java too.

00:06:38.740 --> 00:06:39.670
Hey, I'm Java.

00:06:39.670 --> 00:06:40.890
Hey, I'm Java too.

00:06:42.600 --> 00:06:44.940
And they ran across
the room and they ran,

00:06:44.940 --> 00:06:49.090
they grabbed a beer, you know,
they claimed they were on everywhere.

00:06:52.680 --> 00:06:56.480
And the last group to come
were these real hipsters.

00:06:56.510 --> 00:06:58.480
And these were the Carbon apps.

00:06:58.520 --> 00:07:01.820
They came up and, you know,
they were old friends,

00:07:01.850 --> 00:07:04.430
but they looked slightly different.

00:07:04.920 --> 00:07:06.370
They were wearing nicer clothes.

00:07:06.440 --> 00:07:08.640
Their posture was a little bit better.

00:07:08.700 --> 00:07:13.560
They all talked about this little
surgery they'd had a little while ago.

00:07:13.880 --> 00:07:16.160
They've been separated
from that other group.

00:07:16.160 --> 00:07:19.330
They were still friends with those guys,
but they were separated and

00:07:19.330 --> 00:07:22.560
they were individuals and
they weren't tied to others.

00:07:22.590 --> 00:07:25.140
And in fact,
there were some real cows in this group,

00:07:25.150 --> 00:07:27.530
cash cows.

00:07:27.630 --> 00:07:31.590
And these cash cows,
they looked as healthy as possible.

00:07:32.270 --> 00:07:34.840
So that's what we're doing with Mac OS X.

00:07:34.880 --> 00:07:36.270
We're throwing a party.

00:07:36.390 --> 00:07:38.150
And it's the Mac OS X party.

00:07:38.260 --> 00:07:40.420
And all of your apps are invited.

00:07:40.510 --> 00:07:43.850
But if you have a classic app,
you really want to make it an

00:07:43.850 --> 00:07:48.280
individual and break it off
and make it into a Carbon app.

00:07:48.330 --> 00:07:49.810
All right, done with psychoanalysis.

00:07:50.050 --> 00:07:51.710
What does this mean?

00:07:52.990 --> 00:07:56.240
When we looked at building
Carbon in Mac OS X,

00:07:56.340 --> 00:07:59.800
there were three main user
benefits that we were shooting for.

00:07:59.950 --> 00:08:01.630
First, stability.

00:08:01.780 --> 00:08:06.780
We'd like a more stable platform
with more stable applications.

00:08:07.060 --> 00:08:09.920
Next, performance and responsiveness.

00:08:10.100 --> 00:08:14.250
So we want the whole system
to perform incredibly well.

00:08:14.420 --> 00:08:15.360
We want it to be fast.

00:08:15.540 --> 00:08:18.930
We want applications to respond to you.

00:08:20.070 --> 00:08:23.750
And third, we really want to
improve user experience.

00:08:23.840 --> 00:08:26.070
So let's start with stability.

00:08:27.730 --> 00:08:33.520
Stability comes in the
form of protected memory.

00:08:34.240 --> 00:08:38.160
On Mac OS 9,
there's a single address space.

00:08:38.210 --> 00:08:44.110
And all of your applications run
within this single address space.

00:08:44.470 --> 00:08:47.550
The weird thing is you sort of run
on the honor system for Mac OS 9,

00:08:47.550 --> 00:08:48.120
right?

00:08:48.160 --> 00:08:53.270
You promise you're not going to write
over other applications' memory.

00:08:53.340 --> 00:08:55.940
Turns out most apps are honorable.

00:08:56.070 --> 00:08:57.900
Some in the back aren't.

00:08:58.990 --> 00:09:01.210
And when those aren't honorable,
those are the ones that drink too much,

00:09:01.410 --> 00:09:05.290
aren't responsible, they fall down,
pull the entire system down.

00:09:05.750 --> 00:09:09.970
Now we want those apps to still run on X,
and so what we've done is we've slid

00:09:10.000 --> 00:09:15.820
Darwin in underneath the Mac OS system,
and then those apps run in

00:09:15.820 --> 00:09:16.860
the classic environment.

00:09:16.860 --> 00:09:20.910
But they still run within
a single address space for

00:09:20.910 --> 00:09:23.320
all of those applications.

00:09:24.190 --> 00:09:27.700
Next we have Carbon applications,
Java and Cocoa.

00:09:27.760 --> 00:09:30.410
All of these get their own address space.

00:09:30.410 --> 00:09:34.270
So each Carbon application,
Carbon applications are the party,

00:09:34.390 --> 00:09:37.750
they're not affected by each other,
they live as individuals and

00:09:37.750 --> 00:09:41.690
aren't affected with the memory
space of other applications.

00:09:41.810 --> 00:09:44.250
So let's go ahead and demo this for you.

00:09:46.490 --> 00:09:50.640
This morning,
Steve in his keynote showed a BOM app.

00:09:50.700 --> 00:09:54.270
Can we bring this machine up?

00:09:54.510 --> 00:09:59.200
In his BOM app, it was a Carbon BOM app,
and this is an equal application.

00:09:59.200 --> 00:10:02.110
And this BOM app,
its whole goal is to write all over

00:10:02.110 --> 00:10:04.820
memory and take down other applications.

00:10:04.820 --> 00:10:08.970
So he did it as a Carbon application,
and when that Carbon application ran,

00:10:08.970 --> 00:10:11.260
it just crashed itself.

00:10:11.260 --> 00:10:15.140
What we've done here is
we have a classic BOM app.

00:10:15.210 --> 00:10:18.390
So that BOM app is running
in the classic environment,

00:10:18.390 --> 00:10:21.480
and when it runs, it's going to try to
write all over memory.

00:10:21.480 --> 00:10:23.120
Of course, it's allowed to do that.

00:10:23.120 --> 00:10:24.840
This is the drunk of the party.

00:10:24.860 --> 00:10:27.560
And he's going to take
down other applications.

00:10:27.570 --> 00:10:30.070
Now what you can see is
on the left-hand side,

00:10:30.070 --> 00:10:35.060
we have a couple applications,
QuickTime and Text Editor or something.

00:10:35.070 --> 00:10:38.220
And they're running as
Carbon applications,

00:10:38.220 --> 00:10:39.460
as modern applications.

00:10:39.490 --> 00:10:42.540
On the other side, we have two apps that
are classic applications.

00:10:42.560 --> 00:10:44.670
Go ahead and light the BOM.

00:10:54.750 --> 00:10:56.620
All the classic apps go away.

00:10:56.670 --> 00:11:01.000
The Carbon apps, Cocoa apps,
Java apps are still running.

00:11:01.000 --> 00:11:03.760
The question is,
where do you want to run your browser?

00:11:03.840 --> 00:11:05.370
Where do you want to run your fetch?

00:11:05.480 --> 00:11:07.080
Where do you want to
run your applications?

00:11:07.080 --> 00:11:09.930
You want to run them on the side
that's not going to go away.

00:11:10.130 --> 00:11:10.460
Thanks, Dave.

00:11:15.320 --> 00:11:18.220
So the next thing we looked at
is improving the performance and

00:11:18.220 --> 00:11:20.080
responsiveness of the system.

00:11:20.200 --> 00:11:22.200
So there's a bunch of ways of doing that.

00:11:22.300 --> 00:11:26.000
The main thing we get is
with preemptive scheduling.

00:11:26.140 --> 00:11:27.990
So what does that mean?

00:11:30.450 --> 00:11:35.500
The OS on Mac OS X will preemptively
schedule different tasks,

00:11:35.500 --> 00:11:39.240
which means it'll actually choose to
give a little bit of time to one app,

00:11:39.340 --> 00:11:41.400
a little bit of time to another,
a little bit of time to another,

00:11:41.400 --> 00:11:43.440
and it'll be fair about this.

00:11:43.440 --> 00:11:46.860
This isn't like Lord of the Flies
where you have to have the conch

00:11:46.860 --> 00:11:50.290
to speak and you have to give
it up to let someone else speak.

00:11:50.340 --> 00:11:52.910
The OS steals the conch and
gives it to the next person.

00:11:52.920 --> 00:11:57.330
So it allows things to preemptively
schedule against each other.

00:11:58.320 --> 00:12:02.580
What that means is if one task
is taking a ton of CPU and

00:12:02.580 --> 00:12:05.980
it's just trying to hog it,
it doesn't matter.

00:12:05.980 --> 00:12:08.720
The OS will still give
other tasks some time,

00:12:08.720 --> 00:12:11.230
so the user interface will be more live.

00:12:11.380 --> 00:12:15.480
One application can't stop another
application's UI from responding.

00:12:17.310 --> 00:12:20.900
Now it turns out this
also improves stability.

00:12:20.990 --> 00:12:22.310
Why is that?

00:12:22.430 --> 00:12:25.880
Well if you get a
ill-behaved application,

00:12:25.920 --> 00:12:28.780
which just starts spinning
and spinning and spinning,

00:12:29.140 --> 00:12:32.170
On Mac OS 9 right now,
that could hang the whole system, right?

00:12:32.280 --> 00:12:35.570
The system feels like it's hung
because that application isn't

00:12:35.580 --> 00:12:38.320
giving up time to anything else.

00:12:38.350 --> 00:12:44.340
On Mac OS X, the OS will still time slice
between it and other applications.

00:12:44.420 --> 00:12:48.420
So other applications will
still get time to do stuff.

00:12:49.950 --> 00:12:54.100
We also with Carbon wanted to make
the entire system PowerPC native.

00:12:54.150 --> 00:12:56.820
So we took anything that was 68K,
we rewrote it,

00:12:56.980 --> 00:12:59.880
and everything now is PowerPC native.

00:13:01.370 --> 00:13:03.890
So last, we really wanted to improve
the user experience.

00:13:04.060 --> 00:13:07.080
We really wanted to rededicate
ourselves to creating a

00:13:07.080 --> 00:13:09.960
world-class user experience.

00:13:10.020 --> 00:13:12.650
And I'm not just saying-- I'm
saying user experience because

00:13:13.500 --> 00:13:15.040
we care about the user interface,
right?

00:13:15.040 --> 00:13:20.040
We care about the elegance and
the cleanliness and the imagery,

00:13:20.100 --> 00:13:22.360
but we also care about the behaviors.

00:13:22.410 --> 00:13:26.640
What does it feel like
to use this whole system?

00:13:27.470 --> 00:13:31.330
So the first thing we did is we
improved stability and performance.

00:13:31.440 --> 00:13:35.380
If your system stays up longer,
if your applications don't crash,

00:13:35.430 --> 00:13:37.500
then you have a better user experience.

00:13:37.620 --> 00:13:39.680
We could have stopped there.

00:13:41.050 --> 00:13:43.540
Next, we got rid of fixed size heaps.

00:13:43.600 --> 00:13:45.080
So virtual memory is always on.

00:13:45.160 --> 00:13:46.950
Now what does that mean?

00:13:47.710 --> 00:13:49.760
You know this panel?

00:13:49.890 --> 00:13:51.430
Who loves this panel?

00:13:51.580 --> 00:13:53.600
Okay, who wants this panel to die?

00:13:53.790 --> 00:13:54.590
Alright.

00:13:54.590 --> 00:13:56.500
Dead.

00:13:58.100 --> 00:14:02.420
You never again have to explain to
someone in your user documentation

00:14:03.900 --> 00:14:08.440
Go to the app, not the link,
go to the application, do get info on it,

00:14:08.440 --> 00:14:12.180
go to the memory part of that,
and then set a number which makes sense.

00:14:12.480 --> 00:14:15.630
What makes sense for a user on
how much memory they should use?

00:14:15.660 --> 00:14:18.400
They have, say, 64 meg of RAM.

00:14:18.400 --> 00:14:20.380
They want to use 64 meg of RAM.

00:14:20.640 --> 00:14:23.400
They have a gig,
which is all you guys I know.

00:14:23.400 --> 00:14:25.900
You want to use a gig.

00:14:26.230 --> 00:14:32.620
This hit home for me this weekend when
I was working on this presentation.

00:14:32.750 --> 00:14:34.690
I kept on getting this
panel over and over.

00:14:34.960 --> 00:14:36.700
PowerPoint was telling me
there's not enough memory.

00:14:36.700 --> 00:14:37.700
There's not enough memory.

00:14:37.700 --> 00:14:39.700
And so I'd increase the partition.

00:14:39.890 --> 00:14:41.700
And then it would work fine for a while.

00:14:41.700 --> 00:14:43.700
And then I'd add some
images of my daughter.

00:14:43.900 --> 00:14:46.700
And then suddenly it was telling
me there's not enough memory again.

00:14:46.700 --> 00:14:47.700
Again.

00:14:47.700 --> 00:14:49.690
Gone.

00:14:51.630 --> 00:14:54.760
So the last way we want to
improve the user experience is,

00:14:54.760 --> 00:14:56.980
of course, with Aqua.

00:14:57.020 --> 00:14:58.890
So let's talk through that.

00:15:01.160 --> 00:15:07.690
When the Mac was born years ago-- and no,
I didn't name my daughter Mac either.

00:15:08.710 --> 00:15:11.150
It was an incredibly fresh face, right?

00:15:11.480 --> 00:15:13.440
The user experience,
the user interface was great,

00:15:13.440 --> 00:15:15.090
and everyone really liked it.

00:15:15.180 --> 00:15:20.340
And as the Mac has aged,
it's remained a great user interface,

00:15:20.500 --> 00:15:25.690
but we looked at it recently and we said,
"As good as the user interface is,

00:15:25.700 --> 00:15:30.310
it's extremely hip still,
but it's slightly dated maybe." You know,

00:15:30.310 --> 00:15:31.600
hip, but dated.

00:15:34.600 --> 00:15:36.720
Now don't get me wrong,
it's still light years

00:15:36.720 --> 00:15:38.800
ahead of the competition.

00:15:41.400 --> 00:15:47.000
[Transcript missing]

00:15:49.170 --> 00:15:50.700
So we thought we could do better.

00:15:50.700 --> 00:15:53.600
And I believe with Aqua, we really have.

00:15:53.600 --> 00:16:01.720
The amount of polish and attention to
detail and elegance in Aqua is extreme.

00:16:01.720 --> 00:16:04.590
Now, as I said before,
you can still run your classic

00:16:05.000 --> 00:16:06.980
apps on top of Mac OS X.

00:16:06.980 --> 00:16:09.960
But your classic apps do
not get the Aqua interface.

00:16:10.010 --> 00:16:12.980
So they're going to look slightly old.

00:16:12.980 --> 00:16:16.240
They'll play within the same system,
but they're going to have

00:16:16.240 --> 00:16:17.590
the Platinum controls.

00:16:17.610 --> 00:16:21.120
So your users will know whether
or not you've gone to the

00:16:21.340 --> 00:16:24.620
work to give them a stable,
polished Aqua app,

00:16:24.740 --> 00:16:28.390
or you're just relying on
the classic experience.

00:16:29.510 --> 00:16:33.630
Alright, so those are the user benefits
that we are striving for.

00:16:33.630 --> 00:16:35.600
Now what exactly is Carbon?

00:16:37.770 --> 00:16:41.750
So when we looked at the Mac OS,
there's a whole set of APIs,

00:16:41.970 --> 00:16:47.040
this large set that makes up,
that defines the Mac OS.

00:16:47.540 --> 00:16:50.430
A lot of these APIs are great,
and it's what you depend

00:16:50.520 --> 00:16:52.220
on for your applications.

00:16:52.220 --> 00:16:54.440
And we really wanted
to move those forward.

00:16:54.440 --> 00:16:58.260
Our goal isn't to force you to
rewrite your entire application.

00:16:58.260 --> 00:17:00.740
In fact, our goal was quite the opposite.

00:17:00.800 --> 00:17:04.100
But some of these APIs prevent progress.

00:17:04.100 --> 00:17:08.180
So when we looked at these APIs,
we said we can really split it,

00:17:08.180 --> 00:17:11.050
in marketing terms,
into the good and the bad.

00:17:12.610 --> 00:17:16.650
And the bad APIs are the
ones that prevent protection.

00:17:16.740 --> 00:17:20.780
So for instance, low memory globals.

00:17:20.780 --> 00:17:23.430
Everyone writes wildly
to low memory globals.

00:17:23.580 --> 00:17:26.500
You can't do that in a
protected memory environment.

00:17:26.570 --> 00:17:28.440
So we had to get rid of those.

00:17:28.440 --> 00:17:31.260
Anything that prevented preemption,
we had to get rid of.

00:17:31.280 --> 00:17:33.710
And any 68K specific APIs.

00:17:33.850 --> 00:17:39.430
So Trap Manager, Segment Manager,
anything that was 68K specific,

00:17:39.430 --> 00:17:41.640
we had to remove as part of the bad APIs.

00:17:41.870 --> 00:17:47.630
So Carbon is the good
APIs from the Mac OS.

00:17:47.990 --> 00:17:50.240
Carbon is a living entity.

00:17:50.370 --> 00:17:51.240
Carbon is growing.

00:17:51.240 --> 00:17:54.790
Carbon is not freeze-dried
at some point in time,

00:17:54.790 --> 00:17:55.890
but we're adding on to it.

00:17:56.030 --> 00:17:58.190
So for instance, we added on Aqua.

00:17:58.270 --> 00:18:03.040
So as we add APIs, Carbon over time will
grow to encompass those.

00:18:03.040 --> 00:18:06.200
Carbon is our vehicle
for adding those APIs.

00:18:07.820 --> 00:18:10.080
So where does your app fit in here?

00:18:10.120 --> 00:18:12.900
Well, we've done a ton of measurements.

00:18:13.160 --> 00:18:14.290
We built all these tools.

00:18:14.400 --> 00:18:16.080
We built a lot of databases.

00:18:16.130 --> 00:18:20.200
And we ran application after application
after application through here,

00:18:20.200 --> 00:18:22.000
thousands of applications.

00:18:22.050 --> 00:18:27.110
And what we found is an
application is typically about 95%

00:18:27.110 --> 00:18:30.100
Carbon compliant or Carbon ready.

00:18:30.280 --> 00:18:35.930
What that means is 95% of the APIs you're
calling are fully Carbon supported.

00:18:36.050 --> 00:18:37.940
So there's no change for those.

00:18:38.010 --> 00:18:44.690
But there is a subset, 5% of the APIs,
that are calling into globals,

00:18:45.070 --> 00:18:48.440
that are calling into data
structures that we've hidden now.

00:18:48.550 --> 00:18:50.960
And for those,
you have to do a little bit of

00:18:50.960 --> 00:18:54.800
work to move your application
to be 100% Carbon compliant.

00:18:54.860 --> 00:18:57.610
And when you do that,
then you'll have a full

00:18:57.610 --> 00:18:59.600
Carbon application.

00:19:00.590 --> 00:19:01.840
We didn't go crazy here, right?

00:19:01.970 --> 00:19:03.640
We didn't change the application model.

00:19:03.690 --> 00:19:06.380
We're not telling you you
have to start from scratch and

00:19:06.380 --> 00:19:07.690
rewrite your entire application.

00:19:09.910 --> 00:19:13.010
We didn't go create an
object-oriented Java API set.

00:19:13.230 --> 00:19:16.200
If you want a great
object-oriented Java API set,

00:19:16.300 --> 00:19:17.570
go to Cocoa.

00:19:17.690 --> 00:19:19.220
Go to Java 2.

00:19:19.350 --> 00:19:21.530
There are Java APIs on the platform.

00:19:21.770 --> 00:19:26.600
What we wanted to do here was take
all the work you've invested in the

00:19:26.610 --> 00:19:29.510
Mac OS APIs and move it forward.

00:19:30.460 --> 00:19:31.390
Let's be honest here, right?

00:19:31.570 --> 00:19:33.180
We're not automatic.

00:19:33.180 --> 00:19:36.010
So you do have to do work
to get a Carbon application.

00:19:36.010 --> 00:19:37.400
You have to recompile.

00:19:37.400 --> 00:19:38.580
It's not binary compatible.

00:19:38.600 --> 00:19:43.220
If you want it to be binary compatible,
run it in Classic, but you don't get the

00:19:43.220 --> 00:19:44.730
advantages of Mac OS X.

00:19:47.870 --> 00:19:49.900
All right, so the user's happy.

00:19:50.170 --> 00:19:51.730
Now you know what Carbon is.

00:19:51.730 --> 00:19:54.900
Why are you going to be happy?

00:19:56.370 --> 00:20:01.480
So there's a bunch of developer benefits
that we've added into Carbon as well.

00:20:02.760 --> 00:20:06.910
First, we want to make sure that you can
truly move onto Carbon without

00:20:07.010 --> 00:20:09.350
giving up the installed base.

00:20:09.350 --> 00:20:11.700
So we want you to be able
to sell into both 9 and 10.

00:20:14.800 --> 00:20:17.890
I know that most of you are lazy.

00:20:18.240 --> 00:20:22.720
Most of you work 168 hours a week,
and we'd like you to work 80.

00:20:22.720 --> 00:20:26.680
So we want to do most
of the work for you.

00:20:26.680 --> 00:20:28.220
We want,
when you're carbonizing an application,

00:20:28.220 --> 00:20:30.040
when you're moving an
application forward,

00:20:30.040 --> 00:20:32.680
that you do the work that's
specific to your application,

00:20:32.710 --> 00:20:33.910
not the system's work.

00:20:33.910 --> 00:20:35.030
We'll do all the rest.

00:20:37.590 --> 00:20:41.140
We really wanted to design this
with future enhancements in mind.

00:20:41.350 --> 00:20:42.900
Carbon is a living entity.

00:20:42.900 --> 00:20:45.240
We want to advance it.

00:20:45.480 --> 00:20:47.320
And it turns out that
developing a Carbon will

00:20:47.400 --> 00:20:49.770
enhance developer productivity.

00:20:49.780 --> 00:20:51.670
Let's talk through these.

00:20:52.350 --> 00:20:55.010
So first, where do you want to
run your application?

00:20:55.120 --> 00:20:57.530
So you have a Carbon application,
and there's two main

00:20:57.630 --> 00:20:59.050
platforms you care about.

00:20:59.200 --> 00:21:02.190
And here I've listed Mac OS 9
to generically mean Mac OS 8,

00:21:02.270 --> 00:21:07.130
1, 8, 6, Mac OS 8 and 9,
and then Mac OS X.

00:21:08.030 --> 00:21:11.260
So it's obvious that you'll be able
to ship your Carbon application

00:21:11.800 --> 00:21:17.480
on Mac OS X because Carbon is
an intrinsic piece of Mac OS X.

00:21:17.600 --> 00:21:23.040
One of the main points of Mac OS X was
to provide Carbon support.

00:21:23.140 --> 00:21:27.540
So boom, your application, Mac OS X,
sits right there.

00:21:28.790 --> 00:21:34.110
Now Mac OS 9 has a lot of the
APIs that are part of Carbon,

00:21:34.110 --> 00:21:36.130
but it doesn't have all of them.

00:21:36.260 --> 00:21:38.900
So what we've done is
provided this thin layer,

00:21:38.900 --> 00:21:42.190
this thin veneer,
which is called CarbonLib,

00:21:42.190 --> 00:21:44.230
or the Carbon Library.

00:21:44.310 --> 00:21:49.140
The Carbon Library, for most APIs,
just calls directly into Mac OS 9

00:21:49.140 --> 00:21:51.140
because the API is there.

00:21:51.200 --> 00:21:54.900
But where we've added on APIs that
are part of Carbon but weren't part of

00:21:54.970 --> 00:22:00.060
Mac OS 9 or weren't part of Mac OS 8.6,
those APIs are implemented in

00:22:00.160 --> 00:22:02.960
and part of the Carbon Library.

00:22:03.040 --> 00:22:07.930
So on Mac OS 9, your application runs on
top of the Carbon Library.

00:22:10.850 --> 00:22:13.330
So next is,
we know you have a lot of code

00:22:13.590 --> 00:22:15.880
that's based on the Mac OS APIs.

00:22:15.960 --> 00:22:21.100
What we wanted to do with Carbon is to
preserve your investment in these APIs,

00:22:21.390 --> 00:22:25.180
make it easy for you to take
advantage of new features,

00:22:25.180 --> 00:22:27.110
and quickly get on Carbon.

00:22:27.200 --> 00:22:28.200
And we think we've done that.

00:22:28.400 --> 00:22:33.090
In fact, we've asked a lot of you,
you know, how hard do you think

00:22:33.090 --> 00:22:35.910
it's been to carbonize,
those of you who have worked on it.

00:22:36.010 --> 00:22:39.050
And consistently I've heard
that it's about the same work

00:22:39.300 --> 00:22:42.110
as moving from 68K to PowerPC.

00:22:42.410 --> 00:22:46.350
For some of you who have
really well-written code,

00:22:46.550 --> 00:22:48.860
it's a lot easier, just moved right over.

00:22:48.970 --> 00:22:53.500
For those of you who have a
lot of skeletons in the closet,

00:22:53.580 --> 00:22:58.180
a lot of cruft in your applications,
it's a little bit harder.

00:23:00.200 --> 00:23:03.150
So the next thing we want
to do with Carbon is design

00:23:03.150 --> 00:23:05.530
it for future enhancements.

00:23:06.460 --> 00:23:09.620
So as I said,
Carbon is this living and growing thing.

00:23:09.650 --> 00:23:12.100
And in the future,
we'd love to do more things with it.

00:23:12.100 --> 00:23:15.240
We'd love to make it so
the toolbox is reentrant,

00:23:15.240 --> 00:23:17.600
so add more threading support.

00:23:17.640 --> 00:23:20.960
We'd also love to advance
and improve features.

00:23:20.970 --> 00:23:22.630
I'm sure this hasn't
happened to any of you,

00:23:22.710 --> 00:23:26.600
but I've heard before when a new
version of Mac OS has come out,

00:23:26.730 --> 00:23:31.230
sometimes some people's applications
are doing something they shouldn't have,

00:23:31.250 --> 00:23:33.760
and the OS breaks them.

00:23:33.800 --> 00:23:38.390
A lot of that is because our
data structures are all open.

00:23:38.720 --> 00:23:41.350
And you guys love to get in there
and dig and do funny things,

00:23:41.360 --> 00:23:41.640
right?

00:23:41.640 --> 00:23:44.300
You learned that this one data structure,
if you twiddle the third

00:23:44.400 --> 00:23:46.700
bit of the second field,
then, you know,

00:23:46.700 --> 00:23:49.220
windows stay on top or something.

00:23:49.440 --> 00:23:53.450
Instead of allowing you to manipulate
these things in sort of a random

00:23:53.450 --> 00:23:56.480
manner with these open data structures,
in fact,

00:23:56.480 --> 00:24:00.760
we have to hide those data structures
if we want to make something reentrant

00:24:00.760 --> 00:24:03.280
because we can't count on when
you're going to touch that data

00:24:03.310 --> 00:24:06.310
structure if we can't actually put
a lock around it in another thread.

00:24:06.500 --> 00:24:09.020
So because of that,
we've made most of the

00:24:09.200 --> 00:24:11.310
data structures opaque,
right?

00:24:11.440 --> 00:24:14.080
So you can't get directly
at the data structures.

00:24:14.080 --> 00:24:19.400
Instead, we've added accessors,
so semantic accessors that'll get exactly

00:24:19.600 --> 00:24:22.280
the information you're looking for.

00:24:22.280 --> 00:24:24.920
And then actually,
it turns out your code reads a

00:24:24.920 --> 00:24:28.930
lot better because instead of just
changing some part of some structure,

00:24:28.930 --> 00:24:32.590
you're actually calling a function
that tells you what your purpose

00:24:32.590 --> 00:24:34.800
was with the toolbox at that point.

00:24:34.800 --> 00:24:38.710
So we're really designing... We're
designing this so when we come out with

00:24:38.710 --> 00:24:43.130
future versions of Mac OS X and Carbon,
we can advance the back end.

00:24:43.140 --> 00:24:46.360
We can advance our implementation,
and you'll get the advantage

00:24:46.700 --> 00:24:49.560
without it affecting,
without it damaging your application.

00:24:52.780 --> 00:24:54.900
So developer productivity.

00:24:54.940 --> 00:24:58.620
Who here wouldn't want to make
your application easier to develop?

00:24:58.650 --> 00:25:03.200
What we found is when people
come to Mac OS X and to Carbon,

00:25:03.230 --> 00:25:08.010
they're finding it easier to develop
the application and a little bit faster.

00:25:08.290 --> 00:25:08.920
So why is this?

00:25:09.090 --> 00:25:13.280
Well, first, you don't crash the machine
when you're debugging it.

00:25:13.280 --> 00:25:17.230
I've worked on code before
where you're debugging it and

00:25:17.230 --> 00:25:19.150
you take down the whole system.

00:25:19.240 --> 00:25:22.390
Code I inherited, not mine.

00:25:23.620 --> 00:25:25.980
And on Mac OS X, that doesn't happen,
right?

00:25:25.980 --> 00:25:27.860
You just take down the
application you're writing,

00:25:27.880 --> 00:25:28.750
the one you're developing.

00:25:28.770 --> 00:25:30.380
You don't take down the whole system.

00:25:30.420 --> 00:25:35.630
So the debug, find something, fix it,
and then go to the next

00:25:35.630 --> 00:25:38.190
bug cycle is much faster.

00:25:40.500 --> 00:25:44.230
It also helps you to find your bugs on X.

00:25:44.320 --> 00:25:48.750
So you know those trickiest to
find bugs are the memory smashers,

00:25:48.780 --> 00:25:49.150
right?

00:25:49.160 --> 00:25:52.990
It's the random little memory
smasher where you wrote off to

00:25:53.070 --> 00:25:56.330
some random place in memory and
then five minutes later the system

00:25:56.330 --> 00:25:58.500
starts behaving somewhat strangely.

00:25:58.500 --> 00:26:03.920
And you have no idea why because when
you wrote into that memory space and

00:26:04.210 --> 00:26:08.840
when your system or your application
or system crashed aren't immediate,

00:26:08.940 --> 00:26:09.500
right?

00:26:09.500 --> 00:26:11.430
There's no causal
connection that you can see.

00:26:11.500 --> 00:26:15.200
So what we, on Mac OS X,
if you write someplace random,

00:26:15.200 --> 00:26:17.490
your app crashes immediately.

00:26:17.500 --> 00:26:20.500
You get a back trace, you find out, hey,
I can't write to that segment.

00:26:20.500 --> 00:26:21.500
That's outside of my memory space.

00:26:21.500 --> 00:26:24.490
You can't write to null.

00:26:25.130 --> 00:26:29.300
And we've actually had a lot of
developers who have told us that they

00:26:29.300 --> 00:26:33.470
couldn't find some bug and then they
pulled it over on Carbon and within

00:26:33.470 --> 00:26:35.340
five minutes they'd found the bug.

00:26:35.380 --> 00:26:39.220
It actually turns out that when we were
Carbonizing some of our toolbox code,

00:26:39.220 --> 00:26:43.240
we found some memory smashers that
were on 9 that we didn't know about.

00:26:43.310 --> 00:26:46.600
So there's no more bugs
in the toolbox on 9.

00:26:50.810 --> 00:26:53.000
So that's the developer benefits.

00:26:53.020 --> 00:26:58.460
Now how do you build a
great Carbon application?

00:26:58.460 --> 00:27:02.960
Our goal here is not for you just
to build a Carbon application,

00:27:02.970 --> 00:27:07.420
but really to build the
best one you possibly can.

00:27:07.420 --> 00:27:11.970
The reason most of you are here and can
afford to attend a conference and spend

00:27:11.970 --> 00:27:19.160
time and are getting paid isn't because
you built some Mac OS application,

00:27:19.160 --> 00:27:22.080
just an arbitrary Mac OS application.

00:27:22.080 --> 00:27:27.060
It's because you built a best
of breed Mac OS application.

00:27:27.060 --> 00:27:30.120
You went above and beyond and
you built something so good that

00:27:30.120 --> 00:27:31.880
it's better than the competition.

00:27:33.490 --> 00:27:38.260
So when you look at Carbon,
you should think about it the same way.

00:27:38.300 --> 00:27:42.920
You shouldn't shoot just to
build some Carbon application,

00:27:42.950 --> 00:27:45.860
but you should figure out how
can you build the best possible

00:27:45.910 --> 00:27:49.440
Carbon application you can.

00:27:49.450 --> 00:27:51.310
So let's talk about that.

00:27:52.460 --> 00:27:55.940
I'm going to go through a
hypothetical application here.

00:27:55.940 --> 00:27:59.650
So this is not a real application,
but just so we can talk about

00:27:59.650 --> 00:28:02.060
the carbonization process.

00:28:02.470 --> 00:28:09.360
So I got this group of people and they
had read Kafka's The Metamorphosis.

00:28:09.390 --> 00:28:12.960
And so they wrote an
application called iMetamorph.

00:28:12.990 --> 00:28:17.400
And iMetamorph takes and it
morphs one image into another,

00:28:17.410 --> 00:28:21.720
the same way that in Kafka's book
a man turned into a bug overnight.

00:28:22.220 --> 00:28:25.600
So here's this application,
and here's an example.

00:28:25.800 --> 00:28:31.310
You take a dirty kid,
and you magically clean them up.

00:28:31.780 --> 00:28:35.780
So that's our slogan for Carbon, right?

00:28:35.780 --> 00:28:38.290
We clean you up.

00:28:41.130 --> 00:28:46.680
So this application that takes and does
this processing has a lot of things it

00:28:46.680 --> 00:28:48.380
needs to deal with when going to Carbon.

00:28:48.430 --> 00:28:51.590
So what are those things?

00:28:51.590 --> 00:28:51.590
Well, first of all,

00:28:52.190 --> 00:28:54.560
This company has a whole lot of code,
right?

00:28:54.630 --> 00:28:57.600
They have lots and lots of
different pieces of code,

00:28:57.650 --> 00:28:59.900
and they have to determine, well,
what should they carbonize, right?

00:28:59.960 --> 00:29:04.140
What should this Kafka Enterprises,
this company, what should they carbonize?

00:29:05.390 --> 00:29:09.930
They have applications and
nits and plug-ins and device

00:29:10.010 --> 00:29:11.690
drivers and all sorts of things.

00:29:11.700 --> 00:29:15.260
So first they need to determine
what pieces of code are

00:29:15.370 --> 00:29:18.350
candidates for carbonization.

00:29:19.310 --> 00:29:21.420
So first of all,
the answer is applications.

00:29:21.650 --> 00:29:24.950
Applications are absolutely
candidates for carbonization.

00:29:25.000 --> 00:29:28.200
You should carbonize your applications,
foreground and background.

00:29:28.200 --> 00:29:31.750
So if you have a faceless
background application,

00:29:32.090 --> 00:29:35.320
absolutely you should
carbonize that as well.

00:29:36.300 --> 00:29:38.950
You should also carbonize plug-ins.

00:29:39.070 --> 00:29:41.440
Now there's two pieces of
technology on the system that

00:29:41.530 --> 00:29:44.160
can really aid in this process.

00:29:44.380 --> 00:29:48.440
There's a technology called
Core Foundation and it sits pretty

00:29:48.440 --> 00:29:50.800
low in the architectural stack.

00:29:50.960 --> 00:29:55.560
And Core Foundation has something
called CFBundle and CF Plug-in

00:29:55.680 --> 00:30:00.130
and both of these will aid in your
carbonization process of plug-ins,

00:30:00.130 --> 00:30:01.990
so you should check those out.

00:30:04.590 --> 00:30:08.180
Now they shouldn't
carbonize device drivers.

00:30:08.250 --> 00:30:10.940
By their very nature,
a device driver is an

00:30:10.940 --> 00:30:13.190
OS specific piece of code.

00:30:13.540 --> 00:30:17.490
It's dealing with the OS and
how the OS deals with devices.

00:30:17.640 --> 00:30:21.550
So instead of carbonizing those,
they should continue on Mac OS 9

00:30:21.910 --> 00:30:24.640
to do the same thing they were
before with Device Manager.

00:30:24.720 --> 00:30:28.240
And on Mac OS X,
you should look at I/O Kit and

00:30:28.240 --> 00:30:30.800
write an I/O Kit driver,
which will provide the

00:30:30.800 --> 00:30:33.720
functionality you want on X.

00:30:33.790 --> 00:30:38.670
And lastly, they shouldn't carbonize
their system in nits.

00:30:40.100 --> 00:30:43.700
So it turns out,
in its work counter to the

00:30:43.700 --> 00:30:45.700
goal of increased stability.

00:30:45.770 --> 00:30:50.670
Now there are some in it which
by their nature are really just

00:30:50.780 --> 00:30:53.080
faceless background applications.

00:30:53.140 --> 00:30:55.400
And so those should
actually be carbonized.

00:30:55.560 --> 00:31:00.160
Those should become Carbon applications
and run as faceless background,

00:31:00.190 --> 00:31:01.480
you know, servers.

00:31:01.540 --> 00:31:04.170
But they shouldn't be carbonized as,
you know,

00:31:04.170 --> 00:31:06.750
something which patches the whole system.

00:31:08.730 --> 00:31:09.450
All right.

00:31:09.610 --> 00:31:10.650
So how do you carbonize?

00:31:10.890 --> 00:31:13.240
What's the process?

00:31:13.340 --> 00:31:16.190
So it turns out it's really simple.

00:31:16.310 --> 00:31:23.310
First, since we've taken and made all
these data structures opaque,

00:31:25.020 --> 00:31:29.550
You have to go to work
to adopt the accessors.

00:31:29.550 --> 00:31:34.430
And this is probably the bulk of your
work carbonizing your application.

00:31:34.520 --> 00:31:38.400
And the great part of it is,
it's the easiest part of carbonizing.

00:31:38.400 --> 00:31:44.630
It's really a grunge work, mundane,
sit in your office from 1 p.m.

00:31:44.630 --> 00:31:49.000
when you get into work until, you know,
6 a.m.

00:31:49.300 --> 00:31:51.950
the next day for a couple days.

00:31:52.680 --> 00:31:54.590
And you just walk
through compiler errors.

00:31:54.590 --> 00:31:55.440
That's all it is.

00:31:55.510 --> 00:31:58.490
Because the compiler is going to
tell you if you're accessing a data

00:31:58.500 --> 00:32:00.460
structure which isn't there anymore.

00:32:00.460 --> 00:32:05.060
So the first part is go ahead and
adopt all the new accessor functions.

00:32:07.680 --> 00:32:11.490
The next thing is to use
the new toolbox UPPs.

00:32:11.750 --> 00:32:12.840
So what is this?

00:32:12.920 --> 00:32:16.540
We used to have generic functions
for creating UPPs for callbacks.

00:32:16.590 --> 00:32:23.580
Now we have more type safe UPPs which are
created per callback that you care about.

00:32:23.650 --> 00:32:26.770
So you have to go ahead and
instead of using the generic ones,

00:32:26.770 --> 00:32:28.590
use the more specific ones now.

00:32:29.440 --> 00:32:34.300
If your application opens or saves files,
you want to use Nav Services.

00:32:34.340 --> 00:32:37.300
So go ahead and adopt
the Nav Services APIs.

00:32:37.300 --> 00:32:41.300
And Apple Help is now the way to
provide help for your application.

00:32:41.770 --> 00:32:45.290
Okay, so you do these four simple things.

00:32:46.030 --> 00:32:47.140
That's it.

00:32:47.150 --> 00:32:47.290
Right?

00:32:47.330 --> 00:32:47.690
We're done.

00:32:47.690 --> 00:32:49.440
So I'm wasting your time here.

00:32:49.440 --> 00:32:50.990
You could have done that
while I was talking.

00:32:52.770 --> 00:32:57.560
There's two really good talks that can
teach you more about how to carbonize.

00:32:57.610 --> 00:33:00.100
The first one is really
transitioning your application,

00:33:00.100 --> 00:33:03.460
so what is the carbonization process.

00:33:03.530 --> 00:33:08.490
That one will go through more of
the exact steps you need to take,

00:33:08.490 --> 00:33:12.460
a lot more of the process,
and I encourage you to go to that one.

00:33:12.460 --> 00:33:17.690
And then, of course,
the navigation services talk,

00:33:17.690 --> 00:33:17.970
which will tell you about
how to use Nav Services.

00:33:19.310 --> 00:33:20.190
But that's not it, right?

00:33:20.240 --> 00:33:22.240
You can do more.

00:33:22.360 --> 00:33:23.130
And you really do.

00:33:23.220 --> 00:33:27.840
You really want to create the
best of breed Carbon application.

00:33:28.020 --> 00:33:31.090
Because I don't know about you,
but when I watch some of the demos

00:33:31.090 --> 00:33:35.020
that are coming out on Carbon,
I get pretty excited because

00:33:35.340 --> 00:33:38.340
I'm not writing an application
in the same field they are.

00:33:38.440 --> 00:33:41.340
I mean, they're looking great.

00:33:41.440 --> 00:33:45.180
Okay, so what should you do?

00:33:45.180 --> 00:33:45.180
Well, if you look at...

00:33:45.530 --> 00:33:49.040
If you look at this iMetamorph
application I talked about,

00:33:49.040 --> 00:33:53.700
they do this big operation where
they take an image and then they

00:33:53.700 --> 00:33:54.940
morph it into another image.

00:33:54.940 --> 00:33:57.860
So there's a lot of computation
that goes on in that.

00:33:57.860 --> 00:33:58.640
It takes a while.

00:33:58.660 --> 00:34:02.240
So what they were doing before is
they were using Thread Manager,

00:34:02.580 --> 00:34:02.810
right?

00:34:02.820 --> 00:34:08.940
So they'd take, and when you said start
morphing these images,

00:34:08.940 --> 00:34:12.060
it would take and it would throw
this into a Thread Manager thread

00:34:12.060 --> 00:34:15.840
so you could continue working with
the UI and changing other things.

00:34:17.280 --> 00:34:21.220
Now it turns out that Thread
Manager is cooperatively scheduled.

00:34:21.280 --> 00:34:23.340
So what that means is--

00:34:23.730 --> 00:34:26.430
As a thread's doing work,
it is a separate thread,

00:34:26.540 --> 00:34:29.920
but every once in a while it has to say,
okay, I'm going to take a break, right?

00:34:30.180 --> 00:34:33.420
Coffee break now, stop,
someone else goes ahead, does some work,

00:34:33.420 --> 00:34:36.500
they come back, they take a coffee break,
you get to work.

00:34:36.550 --> 00:34:39.900
And you go back and forth,
and only one's working at a time,

00:34:39.900 --> 00:34:43.920
but it's up to them to decide when
the other thread gets time to work.

00:34:45.630 --> 00:34:48.850
So, the problem with that is,
if you're working on this application,

00:34:48.960 --> 00:34:51.380
and this other thread's
doing a lot of computation,

00:34:51.400 --> 00:34:56.450
if it decides not to give you time,
then your UI feels a little stale.

00:34:56.620 --> 00:34:59.540
It freezes for a little bit,
it's jittery,

00:34:59.540 --> 00:35:03.460
it isn't the smooth experience
that you really want to have

00:35:03.460 --> 00:35:05.580
in a Carbon application on X.

00:35:06.120 --> 00:35:09.920
Now, by the very nature of
the Thread Manager APIs,

00:35:09.940 --> 00:35:14.700
on X we can't make them preemptively
scheduled because you assume,

00:35:14.700 --> 00:35:18.710
based on the semantics of the APIs,
that it will be cooperatively scheduled.

00:35:18.720 --> 00:35:23.410
Now, what we've done on X is, of course,
there are the multiprocessing APIs,

00:35:23.410 --> 00:35:25.260
which we have on 9 as well.

00:35:25.260 --> 00:35:29.120
The MP APIs, the multiprocessing APIs,
on X are preemptively

00:35:29.120 --> 00:35:31.310
scheduled against each other.

00:35:31.440 --> 00:35:35.230
So, the OS itself will go between
the threads and time slice

00:35:35.230 --> 00:35:37.110
so no one gets starved out.

00:35:38.800 --> 00:35:43.160
So this iMetamorph application,
instead of sitting on Thread Manager and

00:35:43.160 --> 00:35:47.550
doing cooperative scheduling,
it should go ahead and move to the

00:35:47.650 --> 00:35:49.880
MP APIs and do preemptive scheduling.

00:35:49.880 --> 00:35:55.210
Now the way we've implemented the
MP APIs is on top of Pthreads.

00:35:55.210 --> 00:35:57.290
Pthreads are the POSIX threads.

00:35:57.340 --> 00:36:01.270
And if you wanted to,
you could go straight to POSIX threads

00:36:01.270 --> 00:36:03.900
and use the POSIX threads directly.

00:36:04.450 --> 00:36:10.580
The MP APIs is just a thin layer for an
API you may know that uses the Pthreads.

00:36:10.600 --> 00:36:13.060
All right.

00:36:13.550 --> 00:36:17.610
So there's a session where you can learn
a lot more about the threading and also

00:36:17.660 --> 00:36:24.630
shared memory and file systems and all
the lower architectural levels of Carbon.

00:36:24.930 --> 00:36:31.200
Now each year at this conference,
we get feedback forms from you.

00:36:31.220 --> 00:36:36.120
And you tell us you want
five full days of conference.

00:36:36.120 --> 00:36:38.140
You say, don't cheat us out.

00:36:38.180 --> 00:36:39.680
Don't give us four and a half days.

00:36:39.680 --> 00:36:41.020
We want five days.

00:36:41.130 --> 00:36:45.250
So our schedulers this year
have outdone themselves.

00:36:46.090 --> 00:36:51.250
by taking one of the more important
sessions and scheduling it in this room,

00:36:51.260 --> 00:36:55.640
which I'm sure will be
packed at 5:00 PM on Friday,

00:36:55.640 --> 00:36:57.160
ending at 6:30.

00:36:57.220 --> 00:36:59.690
So I expect it to be packed.

00:37:02.110 --> 00:37:03.970
All right,
the next technology you should really

00:37:04.030 --> 00:37:07.160
take advantage of is Carbon Events.

00:37:07.230 --> 00:37:12.140
So Carbon Events is a way of
sending user actions and other

00:37:12.140 --> 00:37:14.440
events throughout your application.

00:37:14.520 --> 00:37:16.640
So Carbon Events does a
lot of things for you.

00:37:16.860 --> 00:37:19.340
It really improves your application.

00:37:19.510 --> 00:37:22.500
The first thing it'll do
is improve performance.

00:37:22.520 --> 00:37:24.960
So that said,
you should go and take advantage of it,

00:37:24.970 --> 00:37:30.180
because we want to have applications
running as fast as possible on Mac OS X.

00:37:30.310 --> 00:37:36.790
So the way it does this is it sends
events only when they're necessary.

00:37:38.180 --> 00:37:40.200
It means you don't have to sit
there and pull constantly to

00:37:40.200 --> 00:37:41.580
see the state of something.

00:37:41.610 --> 00:37:43.530
So what does that mean?

00:37:43.730 --> 00:37:47.740
So a year ago, when my wife and I were
due with this baby-- well,

00:37:47.740 --> 00:37:53.570
when my wife was due with the
baby and I was doing nothing--

00:37:54.510 --> 00:37:58.400
The grandparents started calling,
and they started calling once a week.

00:37:58.470 --> 00:38:00.140
And then they started calling once a day.

00:38:00.220 --> 00:38:01.910
And they started calling
multiple times a day.

00:38:01.990 --> 00:38:03.200
And they were saying, you know,
how long have you been born yet?

00:38:03.200 --> 00:38:04.200
How long have you been born yet?

00:38:04.200 --> 00:38:05.610
You know, they're constantly,
constantly pulling us

00:38:05.660 --> 00:38:07.710
over and over again.

00:38:07.940 --> 00:38:10.510
And at some point I said, you know,
stop calling.

00:38:10.540 --> 00:38:12.490
I promise I will, you know,
send you a Carbon event.

00:38:12.490 --> 00:38:13.400
Well, I mean, not that geeky.

00:38:13.400 --> 00:38:14.460
I said, you know, I'll call you.

00:38:14.480 --> 00:38:17.020
I promise I'll call you when she's born,
right?

00:38:17.020 --> 00:38:18.350
I will send you an event.

00:38:18.350 --> 00:38:19.250
I will call you.

00:38:19.250 --> 00:38:21.880
There's no reason for
you to constantly pull.

00:38:21.880 --> 00:38:25.660
Pulling was not only, you know,
somewhat irritating,

00:38:25.660 --> 00:38:27.490
it tied up the phone lines.

00:38:27.590 --> 00:38:29.880
The phone was busy all the time.

00:38:30.280 --> 00:38:32.980
The same thing happens right now
on Mac OS 9 when you start saying,

00:38:32.980 --> 00:38:33.830
where's the mouse?

00:38:33.830 --> 00:38:34.680
Where's the mouse?

00:38:34.680 --> 00:38:35.490
Where's the mouse?

00:38:35.560 --> 00:38:36.580
Where's the mouse?

00:38:36.580 --> 00:38:38.490
And the mouse, you know,
the cursor's just sitting there, right?

00:38:38.490 --> 00:38:39.360
You know, where's the mouse?

00:38:39.360 --> 00:38:39.970
It's sitting there.

00:38:39.970 --> 00:38:40.780
It hasn't moved at all.

00:38:40.780 --> 00:38:44.110
And you're tying up the whole
CPU asking a question which doesn't

00:38:44.110 --> 00:38:45.750
change each time you ask it.

00:38:45.780 --> 00:38:48.970
So what Carbon Events does
is you sit back and you say,

00:38:49.080 --> 00:38:53.120
hey, mouse, just like that, hey, mouse,
tell me when you move.

00:38:53.120 --> 00:38:56.530
And so then when the mouse moves,
it'll tell you it's moved

00:38:56.610 --> 00:38:58.350
to another position.

00:38:58.350 --> 00:38:59.980
You don't need to tie up the CPU.

00:39:00.290 --> 00:39:03.350
by polling and asking it where it is.

00:39:05.210 --> 00:39:09.040
The next thing Carbon Events does
is it'll simplify and reduce

00:39:09.050 --> 00:39:10.790
code in your application.

00:39:10.810 --> 00:39:14.980
So instead of you having to have a
lot of code when an action comes in

00:39:15.020 --> 00:39:17.830
to figure out where it was meant for,
to figure out how do

00:39:17.840 --> 00:39:21.160
you direct it somewhere,
the Carbon Events themselves

00:39:21.160 --> 00:39:25.690
will figure out who the event was
meant for and direct it there.

00:39:25.710 --> 00:39:28.390
So it really simplifies your application.

00:39:29.620 --> 00:39:33.330
Carbon events also allow you
to customize toolbox behaviors.

00:39:33.330 --> 00:39:37.290
So again, generic patching was too
large a mechanism to do some

00:39:37.290 --> 00:39:38.940
of what it wanted to do,
right?

00:39:38.940 --> 00:39:42.640
It was this huge hammer where you had to,
you know, patch an entire thing just

00:39:42.730 --> 00:39:44.120
to change a minor behavior.

00:39:44.120 --> 00:39:48.070
And in some cases,
it worked against our goals of stability.

00:39:48.560 --> 00:39:52.420
So what we've done with Carbon events
is we've provided a nice mechanism

00:39:52.500 --> 00:39:56.010
where you can intercept events,
you can change them slightly.

00:39:56.010 --> 00:40:00.030
There's a lot more specific APIs meant
for you to modify behaviors instead

00:40:00.030 --> 00:40:02.280
of patching an entire subsystem.

00:40:04.940 --> 00:40:09.880
So there's a couple talks tomorrow about
this and I really encourage you to go and

00:40:09.880 --> 00:40:12.790
learn all you can about Carbon Events.

00:40:13.800 --> 00:40:15.940
Now there's a lot more talks
than what I'm pointing out.

00:40:15.940 --> 00:40:18.030
I'm just pointing out some of
the highlights that I think

00:40:18.030 --> 00:40:20.400
you may or should attend.

00:40:20.760 --> 00:40:25.340
The entire conference is full of great
Carbon talks that you should attend.

00:40:26.710 --> 00:40:28.190
All right.

00:40:28.380 --> 00:40:29.780
What does an application look like?

00:40:29.930 --> 00:40:31.340
How do we package an application?

00:40:31.340 --> 00:40:34.210
You've built a Carbon application.

00:40:34.750 --> 00:40:37.720
Instead of packaging how you have today,
is there a way we can make it

00:40:37.780 --> 00:40:39.290
so it's better for the user?

00:40:39.300 --> 00:40:41.620
Can we make it multilingual?

00:40:41.670 --> 00:40:44.720
We of course want it to run
in both Mac OS 9 and 10.

00:40:44.780 --> 00:40:48.050
And let's make it very,
very simple for the user.

00:40:48.060 --> 00:40:52.420
Again, we want to encourage simplicity.

00:40:52.560 --> 00:40:54.340
So multilingual.

00:40:56.090 --> 00:41:00.460
We've certainly found that we make
a lot of money by taking exactly

00:41:00.530 --> 00:41:04.690
the software we've written and just
selling it in a different language,

00:41:04.690 --> 00:41:05.010
right?

00:41:05.020 --> 00:41:09.500
Localizing it to another
language and selling it.

00:41:09.730 --> 00:41:12.220
Most of the work you do is
to create your application.

00:41:12.220 --> 00:41:15.280
It's not to do the
language specific part.

00:41:15.350 --> 00:41:19.950
So what we want is to support
multiple localizations for an

00:41:20.050 --> 00:41:22.390
application extremely well.

00:41:23.550 --> 00:41:25.580
Of course,
the way to get to there is Unicode,

00:41:25.730 --> 00:41:30.260
the standard for multi-language text.

00:41:30.260 --> 00:41:33.000
And we have several things in the
system that will help with that.

00:41:33.050 --> 00:41:37.250
One is CFString,
so a technology also in Core Foundation,

00:41:37.430 --> 00:41:39.340
which deals with Unicode strings.

00:41:39.400 --> 00:41:42.690
We also have the
Multilingual Text Editor,

00:41:42.690 --> 00:41:46.600
so a Carbon text editor
that deals with Unicode.

00:41:48.300 --> 00:41:53.480
And we really want to support single
binary multiple localizations.

00:41:53.530 --> 00:41:57.660
What this means is you can
have a single application,

00:41:57.700 --> 00:42:02.230
and that application, when run,
will run in the language

00:42:02.640 --> 00:42:04.550
of the user's preference.

00:42:04.640 --> 00:42:06.740
So that means when
I launch an application,

00:42:06.790 --> 00:42:08.240
it'll run in English.

00:42:08.560 --> 00:42:10.980
When my boss,
who gave the last talk here,

00:42:11.110 --> 00:42:15.010
runs an application, it runs in French.

00:42:15.230 --> 00:42:19.150
So the goal is to have a single
application that different people

00:42:19.190 --> 00:42:21.090
in the same office can run,
and it runs in the

00:42:21.090 --> 00:42:23.400
language of their choice.

00:42:24.830 --> 00:42:27.820
So next, of course,
you want your application to be

00:42:28.000 --> 00:42:29.800
able to run on Mac OS 9 and 10.

00:42:30.080 --> 00:42:34.050
We want to have a single package,
which itself, one SKU,

00:42:34.180 --> 00:42:37.880
you can have one box and one SKU,
and that itself will run

00:42:37.880 --> 00:42:39.440
in multiple localizations.

00:42:42.070 --> 00:42:44.880
And last is simplicity.

00:42:44.970 --> 00:42:47.780
See,
this is what iMetamorph started-- looked

00:42:47.780 --> 00:42:49.800
like when it started years and years ago,
right?

00:42:49.900 --> 00:42:51.240
Real simple.

00:42:51.400 --> 00:42:54.200
Single icon in a single folder.

00:42:54.260 --> 00:42:55.580
There's no question.

00:42:55.640 --> 00:42:57.580
Where's the application?

00:42:57.640 --> 00:42:59.590
I look at it now.

00:43:00.060 --> 00:43:01.700
And it's full of so much stuff, right?

00:43:01.790 --> 00:43:04.900
There's libraries, there's help files and
plug-ins and everything.

00:43:04.900 --> 00:43:07.590
And when I look at this folder,
I just see a bunch of trees.

00:43:07.640 --> 00:43:10.030
You know, I can't see the forest.

00:43:10.050 --> 00:43:12.930
I can't find out where's the
application I'm looking to click,

00:43:12.930 --> 00:43:14.500
the application I want to run.

00:43:14.510 --> 00:43:16.120
So that's not what we want.

00:43:16.120 --> 00:43:18.140
We want something very simple.

00:43:20.420 --> 00:43:22.680
So we've solved all
three of those problems,

00:43:22.680 --> 00:43:27.420
making something multilingual,
allowing it to run on Mac OS 9 and 10, 8,

00:43:27.420 --> 00:43:32.900
9, and 10, and making it very simple with
something called application packages.

00:43:33.220 --> 00:43:38.160
So application packages is where we
take an application is represented

00:43:38.250 --> 00:43:41.350
by a single item in the finder.

00:43:41.420 --> 00:43:41.860
Right?

00:43:41.880 --> 00:43:44.230
So it's that one clickable thing.

00:43:44.480 --> 00:43:48.580
Now behind that single item
is an entire folder hierarchy.

00:43:48.670 --> 00:43:50.660
So there's lots of stuff in there.

00:43:50.660 --> 00:43:53.590
There's files and data
and all sorts of things.

00:43:53.790 --> 00:43:56.150
But to the user, it's a single item,
right?

00:43:56.300 --> 00:43:58.280
Very, very simple.

00:43:58.850 --> 00:44:02.900
And we have technology called
CFBundle which helps to retrieve

00:44:02.940 --> 00:44:05.440
this data and the resources.

00:44:05.490 --> 00:44:08.070
Now here's the way I think of CFBundle.

00:44:09.040 --> 00:44:15.440
CFBundle is your high-end
shoe salesperson.

00:44:15.460 --> 00:44:16.760
Now what does that mean?

00:44:16.770 --> 00:44:19.820
You know when you go and
you're shopping for shoes,

00:44:19.850 --> 00:44:22.760
and you go into a high-end store,
not someplace where you walk in and

00:44:22.860 --> 00:44:26.160
there's boxes of shoes all over the place
and you have to find your own shoes.

00:44:26.160 --> 00:44:28.840
But you go into a
really fancy shoe place,

00:44:28.840 --> 00:44:31.920
and you sit down,
and you point out and you say,

00:44:31.920 --> 00:44:36.130
I like that shoe in that
size and in this color.

00:44:36.290 --> 00:44:40.580
and this very friendly person
walks back behind this door.

00:44:40.640 --> 00:44:42.140
And you have no idea what
they do behind that door,

00:44:42.140 --> 00:44:42.530
right?

00:44:42.590 --> 00:44:43.900
You don't know where they go to look.

00:44:44.140 --> 00:44:48.420
They have some structure back there where
they have racks and racks of shoes maybe.

00:44:48.470 --> 00:44:51.480
They have some way of knowing
where to look for the right shoe.

00:44:51.530 --> 00:44:53.720
But they go and they find that
right shoe and they bring it out

00:44:54.240 --> 00:44:56.000
and they put it on your foot.

00:44:56.080 --> 00:44:58.760
So CFBundle does the same
thing for you except,

00:44:58.760 --> 00:45:01.060
you know, put the resource on your foot.

00:45:01.080 --> 00:45:08.130
You ask CFBundle,
I'd like this resource in this language.

00:45:08.430 --> 00:45:12.430
And CFBundle goes back behind
this folder hierarchy and it finds

00:45:12.810 --> 00:45:16.030
that resource in that language
and it brings it back to you.

00:45:16.030 --> 00:45:20.150
That whole folder structure could
be reorganized and you don't care

00:45:20.240 --> 00:45:22.360
because CFBundle knows how to find it.

00:45:22.440 --> 00:45:24.940
Now sometimes, you know,
the shoe sales person

00:45:24.940 --> 00:45:27.840
might come back and say,
"We don't have it in that color,

00:45:27.840 --> 00:45:31.340
but we have it in another color."
CFBundle can do the same thing.

00:45:31.380 --> 00:45:33.430
It might come back and say,
"I don't have it in

00:45:33.530 --> 00:45:36.510
French," and you can say,
"I'd like it in English," and it'll

00:45:36.590 --> 00:45:38.220
go back and find it and bring it back.

00:45:38.270 --> 00:45:42.980
So CFBundle will help find
all these resources for you.

00:45:44.950 --> 00:45:46.100
All right.

00:45:46.220 --> 00:45:51.240
So application packaging really
allows us to have this very

00:45:51.240 --> 00:45:54.560
simple but very powerful way of--

00:45:54.940 --> 00:45:58.600
Compacting and putting
an application together.

00:45:58.660 --> 00:46:00.080
But you know what?

00:46:00.310 --> 00:46:02.730
That's a really ugly icon.

00:46:03.230 --> 00:46:05.800
And people do judge an app
a little bit by the icon.

00:46:05.800 --> 00:46:07.250
You want a really nice icon, right?

00:46:07.380 --> 00:46:09.940
It's the face of your application
when it's not running.

00:46:09.970 --> 00:46:13.210
And when it is,
it's the face in the dock.

00:46:13.620 --> 00:46:17.920
So we really want to encourage you,
and Carbon and Mac OS X supports

00:46:18.000 --> 00:46:21.370
and encourages you to work on
your applications and build

00:46:21.400 --> 00:46:22.490
really great applications.

00:46:24.170 --> 00:46:27.560
So what you should do
is use 32-bit color.

00:46:27.560 --> 00:46:30.700
Use transparency and
anti-alias your icon.

00:46:30.700 --> 00:46:34.600
And also, make sure your icon looks
really good from small sizes,

00:46:34.600 --> 00:46:38.460
16 by 16, all the way up to 128 by 128.

00:46:38.460 --> 00:46:42.660
Because if the docket's really big,
it's 128 by 128 per icon,

00:46:42.660 --> 00:46:44.640
and you want your icon to look great.

00:46:44.640 --> 00:46:48.670
So spend some time making great icons.

00:46:50.520 --> 00:46:54.810
So there's a talk on Thursday to
go over exactly how do you get

00:46:54.810 --> 00:46:57.370
those icons into your application.

00:46:58.820 --> 00:47:01.040
All right, Aqua.

00:47:01.060 --> 00:47:04.910
The simple adoption of Aqua is very,
very simple, right?

00:47:05.020 --> 00:47:09.340
We've retained the platinum metrics,
which you requested, and we said, great,

00:47:09.340 --> 00:47:10.260
we can do that.

00:47:10.320 --> 00:47:14.680
So it's really not very hard for
you to adopt the basics of Aqua,

00:47:14.680 --> 00:47:19.860
but you don't want to have an
application which just adopts the basics.

00:47:19.860 --> 00:47:22.330
You want to have a great
Carbon application,

00:47:22.330 --> 00:47:24.360
which has a great Aqua interface.

00:47:25.950 --> 00:47:28.840
So some behaviors, like sheets,
will take a little bit

00:47:28.840 --> 00:47:30.720
more time to adopt,
but you should take

00:47:30.720 --> 00:47:32.500
that step to adopt them.

00:47:32.500 --> 00:47:36.890
You should make sure that your
menu layout abides by the new

00:47:37.020 --> 00:47:38.940
Carbon menu layout guidelines.

00:47:38.940 --> 00:47:42.560
And you should be ready for the
windows in your applications to be

00:47:42.610 --> 00:47:45.160
intermixed with other applications.

00:47:46.180 --> 00:47:49.060
In fact,
this is a perfect time for you to

00:47:49.070 --> 00:47:51.790
really polish your application.

00:47:51.970 --> 00:47:55.340
As we come out with Aqua and Mac OS X,
there's going to be a lot

00:47:55.340 --> 00:47:57.740
of emphasis by our users

00:47:57.740 --> 00:48:00.530
and by reviewers on user interface,
right?

00:48:00.540 --> 00:48:02.000
We're concentrating on it.

00:48:02.000 --> 00:48:06.260
And so it's a great time for you
to really do a one over on your

00:48:06.750 --> 00:48:09.770
application and make it look great.

00:48:13.590 --> 00:48:15.500
So there's a couple talks,
there's actually more,

00:48:15.500 --> 00:48:19.240
but here's two of the more important
talks on Aqua that you should attend.

00:48:19.250 --> 00:48:21.090
Right after this,
there will be an overview,

00:48:21.090 --> 00:48:24.140
and then on Wednesday you can learn
exactly how do you implement it.

00:48:27.240 --> 00:48:29.080
Okay,
so how do you build your application?

00:48:29.150 --> 00:48:30.960
How do you build your UI, right?

00:48:31.080 --> 00:48:33.570
Inside you're going to do
a great Aqua interface.

00:48:33.570 --> 00:48:35.000
How do you build this?

00:48:35.420 --> 00:48:40.520
We've provided a tool called Interface
Builder which will help you build this.

00:48:40.550 --> 00:48:44.920
Interface Builder is a WYSIWYG UI builder
so you visually build and you

00:48:44.920 --> 00:48:46.760
visually edit your user interface.

00:48:48.360 --> 00:48:52.920
It'll actually import your current
resource manager resources,

00:48:52.930 --> 00:48:56.440
so your diddles and the like,
and turn those into an

00:48:56.440 --> 00:48:59.020
XML representation which it uses.

00:48:59.110 --> 00:49:02.850
The great thing about
that is XML uses Unicode,

00:49:02.930 --> 00:49:08.460
so you can actually have a tool process
which will localize your application

00:49:08.990 --> 00:49:11.960
just by editing these XML text files.

00:49:12.080 --> 00:49:13.830
So this is great.

00:49:15.540 --> 00:49:18.420
Interface Builder will help
with the Aqua guidelines.

00:49:18.420 --> 00:49:22.120
So it'll help you lay out
your application correctly.

00:49:22.140 --> 00:49:23.880
And it also--

00:49:24.740 --> 00:49:27.960
has a great concept of how
Carbon Events should work and

00:49:27.960 --> 00:49:30.940
really builds that right into
the Interface Builder tool.

00:49:31.050 --> 00:49:36.370
So it'll help you to take
advantage of Carbon Events and

00:49:36.560 --> 00:49:39.890
really speed up the process of
using Carbon Events in your app.

00:49:41.210 --> 00:49:43.140
This is a great talk on Thursday.

00:49:43.140 --> 00:49:44.290
You should attend to learn about that.

00:49:44.340 --> 00:49:45.960
All right.

00:49:48.940 --> 00:49:50.670
So you know what Carbon is,
you're ready to do it,

00:49:50.710 --> 00:49:53.820
and the question is, you know,
exactly when do you do it?

00:49:53.920 --> 00:49:56.190
So the iMetamorph guys

00:49:56.260 --> 00:49:59.160
They were looking at
two different scenarios.

00:49:59.240 --> 00:50:00.700
The first one was,
let's come out with one

00:50:00.700 --> 00:50:02.550
more version of Mac OS 9.

00:50:02.700 --> 00:50:05.750
So one more iMetamorph on Mac OS 9.

00:50:05.840 --> 00:50:08.560
Take the next three,
four months to do it.

00:50:08.610 --> 00:50:10.930
And then come out with
a version on Mac OS X.

00:50:11.020 --> 00:50:15.330
Then come out with the Carbon version,
which of course would go on 9 and 10.

00:50:15.610 --> 00:50:19.680
The second scenario is to say
let's go straight for Mac OS X.

00:50:19.710 --> 00:50:22.660
Let's go straight for Carbon,
and we're going to get

00:50:22.760 --> 00:50:24.540
Mac OS 9 for free as well.

00:50:24.690 --> 00:50:26.570
Now if you look at this,

00:50:27.120 --> 00:50:31.300
The top one certainly
gets you an app sooner,

00:50:31.340 --> 00:50:34.270
but the bottom one gets
you the app sooner on 10.

00:50:34.270 --> 00:50:39.730
And never underestimate the
value of being somewhere first.

00:50:40.680 --> 00:50:43.690
I think about it this way.

00:50:43.690 --> 00:50:47.310
This fraternity brother of
mine back in grad school,

00:50:47.530 --> 00:50:50.000
He saw this new platform,
sort of like Mac OS X.

00:50:50.030 --> 00:50:53.800
He saw this new platform,
and he thought it was a great thing.

00:50:53.820 --> 00:50:55.720
And he started building
some apps for this.

00:50:55.720 --> 00:50:57.560
He built this one pretty good app.

00:50:57.560 --> 00:50:59.900
And he and a friend,
they worked on this app.

00:50:59.900 --> 00:51:02.440
They started adding content to this app.

00:51:02.440 --> 00:51:04.120
And he thought it was great.

00:51:04.120 --> 00:51:05.740
At some point,
he dropped out of grad school

00:51:05.740 --> 00:51:07.780
to start a little company.

00:51:08.000 --> 00:51:26.300
[Transcript missing]

00:51:26.890 --> 00:51:30.100
So the platform, of course, is the web.

00:51:30.140 --> 00:51:34.280
And the application, the company,
is Yahoo.

00:51:35.330 --> 00:51:38.660
So by being first,
it wasn't necessarily the

00:51:38.660 --> 00:51:42.750
case that Yahoo was the best,
but it was the place everyone went when

00:51:42.750 --> 00:51:45.790
they went to the web to find information.

00:51:46.040 --> 00:51:49.410
The same thing will be true
with Mac OS X and Carbon.

00:51:49.470 --> 00:51:53.900
If your app is first to Carbon,
it'll be the app of a given genre,

00:51:54.040 --> 00:51:58.290
of a given breed, of a given type,
that is the Aqua version,

00:51:58.290 --> 00:52:00.360
which is the Carbon version
of that application.

00:52:00.390 --> 00:52:03.660
And that's the one people
are going to be looking for.

00:52:03.890 --> 00:52:09.810
So what I'd really like to do is
challenge all of you to two things.

00:52:10.270 --> 00:52:12.510
I challenge you to be beta with us.

00:52:12.670 --> 00:52:14.920
So you saw, you know,
Steve said this morning,

00:52:14.960 --> 00:52:16.450
we're going to have a beta this summer.

00:52:16.450 --> 00:52:21.370
And I challenge you to come out with a
beta of your application at the same time

00:52:21.370 --> 00:52:24.290
that we come out with a beta of Mac OS X.

00:52:24.290 --> 00:52:28.340
Because then our beta testers
will be testing your beta as well,

00:52:28.340 --> 00:52:29.020
right?

00:52:29.020 --> 00:52:32.520
It's the best way to get the most
people testing it as early as possible.

00:52:33.590 --> 00:52:36.260
Secondly,
I challenge you to be GM with us.

00:52:36.260 --> 00:52:39.460
So when we ship our final version,
you ship your final

00:52:39.780 --> 00:52:41.330
version at the same time.

00:52:41.330 --> 00:52:45.180
And then people will see that is the app,
the Carbon app of that

00:52:45.360 --> 00:52:47.250
type for that application.

00:52:50.210 --> 00:52:57.300
So on Thursday, there's a talk about
Carbon on Mac OS 9 and 8.

00:52:57.810 --> 00:52:58.760
All right.

00:52:58.810 --> 00:53:02.560
So I've talked a lot about what
the carbonization process was like.

00:53:02.590 --> 00:53:05.880
What I'd like to do now is bring
up some third party developers,

00:53:05.890 --> 00:53:08.470
some of you,
to talk about the experience you guys

00:53:08.550 --> 00:53:11.950
had with Carbon and how far you've come.

00:53:11.980 --> 00:53:15.400
So I'd like to bring up John Wallace to
talk about Now Up to Date.

00:53:15.440 --> 00:53:15.890
John?

00:53:15.900 --> 00:53:16.480
Great.

00:53:16.490 --> 00:53:18.270
Thank you very much.

00:53:19.910 --> 00:53:22.610
All right,
I'm John Wallace from Power On Software,

00:53:22.610 --> 00:53:23.740
and this is Bill Parr.

00:53:23.740 --> 00:53:28.480
I think Apple brought us up here to talk
about this really for a couple reasons,

00:53:28.480 --> 00:53:33.050
one of which is being a
Mac software developer.

00:53:33.060 --> 00:53:35.040
I'm admittedly one of the
larger Mac software developers,

00:53:35.040 --> 00:53:36.100
but from Ohio.

00:53:36.100 --> 00:53:38.570
I mean, I think if an Ohio software
developer can do this,

00:53:38.570 --> 00:53:39.790
then all of you folks can.

00:53:41.330 --> 00:53:46.790
And also because now today in contact
are a pretty popular calendar and

00:53:46.790 --> 00:53:48.490
contact manager for Macintosh.

00:53:48.680 --> 00:53:53.030
They've been around for a while and
they're quite a challenge for us when

00:53:53.040 --> 00:53:56.990
we first looked into it and it got
easier and easier as we went along.

00:53:57.100 --> 00:53:59.440
Let's talk about the products.

00:53:59.440 --> 00:54:03.120
Now today in contact,
almost three quarters of a million

00:54:03.130 --> 00:54:05.100
lines of C and Pascal code.

00:54:05.100 --> 00:54:07.700
Let's also take a look at time frames.

00:54:07.900 --> 00:54:08.990
That's a lot of code.

00:54:08.990 --> 00:54:10.200
That's a lot of code.

00:54:10.200 --> 00:54:14.030
But what we did was we first started
carbonizing our now up to date product,

00:54:14.050 --> 00:54:16.200
which we're going to show here today.

00:54:16.200 --> 00:54:17.200
And we carbonized now up to date.

00:54:17.200 --> 00:54:19.200
It first started off as being Pascal.

00:54:19.200 --> 00:54:24.200
We went through a week of a
Carbon kitchen and got it along.

00:54:24.200 --> 00:54:26.100
And I would say that by
the end of two weeks,

00:54:26.110 --> 00:54:29.190
we were 90% of the way done
with the carbonization process.

00:54:29.190 --> 00:54:31.430
We also realized the
tools were better in C,

00:54:31.430 --> 00:54:33.720
so we converted the
product from Pascal to C,

00:54:33.720 --> 00:54:36.140
about 300,000 lines of code.

00:54:36.200 --> 00:54:39.200
So what we're going to see right
now is a product that's going

00:54:39.200 --> 00:54:39.200
to be a little bit more complex.

00:54:39.220 --> 00:54:43.870
So what we're going to see right now is
a product that's undergone about two plus

00:54:43.870 --> 00:54:48.980
weeks of carbonization and probably about
two weeks of conversion from Pascal to C.

00:54:49.220 --> 00:54:51.400
Let's go take a look at it.

00:54:52.740 --> 00:54:56.410
What we've got is we've got the
Caliber and Contact Manager up.

00:54:56.440 --> 00:54:58.000
It's all running under Mac OS X.

00:54:58.000 --> 00:55:03.200
We're able to make use of some of the
things that are going on in Mac OS X.

00:55:03.200 --> 00:55:05.970
For example,
if you take a look at being able to

00:55:06.050 --> 00:55:10.280
do Aqua-style banners and so forth,
not too hard for us to take advantage

00:55:10.410 --> 00:55:12.370
of all the appearance things.

00:55:12.890 --> 00:55:16.820
We haven't yet gone through the process
of actually building on all of the new

00:55:16.820 --> 00:55:20.660
buttons and the rest of the appearance,
but just getting up and running

00:55:20.660 --> 00:55:22.020
took us about two weeks.

00:55:22.020 --> 00:55:24.560
So what do we learn from all this?

00:55:24.560 --> 00:55:27.450
I would have to assume that most of you
are in the same boat that we were in.

00:55:27.450 --> 00:55:30.660
We didn't know what to really expect,
at least I didn't.

00:55:30.660 --> 00:55:33.790
Bill, we were lucky,
Bill had done about 500,000

00:55:33.860 --> 00:55:36.770
lines of carbonization before
he came to Power On software,

00:55:36.770 --> 00:55:38.930
and this product was brand new to him.

00:55:39.210 --> 00:55:42.910
What we found was number one,
there will be a couple

00:55:42.920 --> 00:55:45.040
weeks of just grunt work.

00:55:45.040 --> 00:55:48.100
You've got to go through and
you've got to modernize everything.

00:55:48.100 --> 00:55:53.590
You've got to use the accessor
functions rather than getting directly

00:55:53.590 --> 00:55:59.550
into a member variable off of a
port like the port.portbits.bounds.

00:55:59.570 --> 00:56:01.790
You have to go through an accessor
function to get through that.

00:56:01.830 --> 00:56:03.000
So that's number one.

00:56:03.960 --> 00:56:07.640
Number two is it was a great opportunity
for us to modernize our code.

00:56:07.650 --> 00:56:10.200
There are a lot of things that
we didn't do because there

00:56:10.210 --> 00:56:11.340
were multiple ways to do it.

00:56:11.430 --> 00:56:12.710
Do we use Mac TCP?

00:56:12.820 --> 00:56:13.760
Not anymore.

00:56:13.760 --> 00:56:15.020
Now it's all OT.

00:56:15.020 --> 00:56:17.650
And those kind of things,
because of Carbon,

00:56:17.650 --> 00:56:21.080
it kind of put us in a position
where we're now modernizing and

00:56:21.080 --> 00:56:25.370
making our software really aligned
more with where Apple was going.

00:56:25.420 --> 00:56:32.610
I guess the third message that we got
from all this was that this is real.

00:56:33.960 --> 00:56:37.740
Last year we had the promise
of Carbon and the promise

00:56:38.070 --> 00:56:39.880
that it would be easy.

00:56:39.890 --> 00:56:40.920
It is easy.

00:56:40.940 --> 00:56:43.280
And we had the promise that
it was going to be complete.

00:56:43.320 --> 00:56:43.990
It is complete.

00:56:44.000 --> 00:56:46.400
And also from everything
we're seeing this week,

00:56:46.400 --> 00:56:47.380
it's the future.

00:56:47.380 --> 00:56:49.340
So I would highly recommend
everyone out there,

00:56:49.360 --> 00:56:52.200
first thing you do if you
want an action step when you

00:56:52.200 --> 00:56:54.910
get back from the conference,
go home and carbonize.

00:56:54.920 --> 00:56:56.500
It's not that tough.

00:56:56.530 --> 00:56:59.860
Within a few weeks,
your app will be up most of the way.

00:56:59.870 --> 00:57:01.880
And I think you'll be up for the future.

00:57:01.890 --> 00:57:03.950
So I'd like to say really
a big thanks for Apple.

00:57:03.960 --> 00:57:04.960
because I think it's great.

00:57:04.960 --> 00:57:05.890
Thanks a lot.

00:57:05.960 --> 00:57:06.960
Thank you.

00:57:12.800 --> 00:57:16.050
One of the funnest things
of my job is every few days,

00:57:16.160 --> 00:57:19.700
as I said, I get to see brand new
apps coming to Mac OS X.

00:57:19.700 --> 00:57:23.220
And over the last year, for me,
living on it has just

00:57:23.220 --> 00:57:25.020
felt more and more real.

00:57:26.350 --> 00:57:29.700
So now I'd like to bring
up Mike Garcia from Quark

00:57:29.790 --> 00:57:32.020
to go through QuarkXPress.

00:57:39.200 --> 00:57:43.420
Okay, I brought a few notes because
I'm not as polished a speaker as

00:57:43.420 --> 00:57:44.700
some of the other guys up here.

00:57:44.700 --> 00:57:49.520
When I first thought about what
I was going to talk about up here,

00:57:49.520 --> 00:57:51.450
I thought about what would I ask?

00:57:51.500 --> 00:57:55.140
And I would ask somebody,
how difficult is it

00:57:55.210 --> 00:57:57.210
to carbonize your app?

00:57:57.270 --> 00:58:02.870
And really, the answer to that question
depends upon your app.

00:58:03.010 --> 00:58:06.480
How much code do you have
that is non-standard,

00:58:06.650 --> 00:58:08.650
non-recommended?

00:58:08.900 --> 00:58:12.660
As you know, Express has been around
for quite a long time.

00:58:12.660 --> 00:58:17.500
We run out of one source code base
for all of our different versions,

00:58:17.500 --> 00:58:19.800
one byte, two byte, Mac, Windows.

00:58:19.800 --> 00:58:26.120
And we have some non-standard things
there because we were doing things on

00:58:26.120 --> 00:58:29.800
OS 7 and 8 for efficiency purposes.

00:58:29.820 --> 00:58:33.880
We were mucking with fields that we
really shouldn't have been mucking with.

00:58:33.880 --> 00:58:36.810
And now we can't because of opacity.

00:58:38.580 --> 00:58:39.740
Thank you.

00:58:40.300 --> 00:58:43.120
The next thing you need to look at when
you're carbonizing are what are the

00:58:43.120 --> 00:58:46.180
specific issues for your application.

00:58:46.250 --> 00:58:48.520
For Express,
we have some specific issues.

00:58:48.520 --> 00:58:53.520
We need to run Express on OS 8,
so that presents somewhat of a

00:58:53.520 --> 00:58:58.580
problem because we need to support
all of our old 4.0 extensions on 8.

00:58:58.640 --> 00:59:01.780
And if we're going to support
all of our old extensions,

00:59:01.780 --> 00:59:03.840
we have to support our API on 8.

00:59:03.840 --> 00:59:07.620
And if you've used our API,
you know we've got a lot

00:59:07.620 --> 00:59:11.810
of working directories,
we expose the QD globals.

00:59:11.820 --> 00:59:15.420
There are some things that we do there
that we just cannot do with Carbon.

00:59:16.200 --> 00:59:23.630
And so we had to branch our code for
4.0 extensions versus Carbon extensions.

00:59:24.140 --> 00:59:26.850
The basic changes aren't that difficult.

00:59:26.850 --> 00:59:31.550
Opacity, it's a lot of monkey work,
grunt work.

00:59:31.550 --> 00:59:32.820
That's what we call it.

00:59:32.820 --> 00:59:37.900
It took about two months for
one engineer to do opacity on

00:59:37.900 --> 00:59:39.940
Express because it's so huge.

00:59:39.940 --> 00:59:44.260
It's over two million lines of code,
about 20 libraries,

00:59:44.260 --> 00:59:47.120
and that's not including extensions.

00:59:48.030 --> 00:59:50.960
So there's a lot of work
for us to do with opacity.

00:59:50.960 --> 00:59:53.460
And you just, like they said,
you go in in the morning and

00:59:53.460 --> 00:59:54.760
you start it and you do it.

00:59:56.190 --> 01:00:01.390
There are some other issues that you
will probably hit depending on your app.

01:00:01.490 --> 01:00:04.490
For us, some of those issues examples
are working directories.

01:00:04.500 --> 01:00:07.160
We use working directories
all over the place and we give

01:00:07.190 --> 01:00:08.920
them to extension developers.

01:00:08.920 --> 01:00:13.080
So we have to remove that because that's
no longer valid on Carbon and that

01:00:13.080 --> 01:00:15.560
presents a problem for our interface.

01:00:16.760 --> 01:00:21.010
We were doing things with the Viz
region and clipping region for

01:00:21.300 --> 01:00:23.850
efficiency purposes where we draw.

01:00:23.910 --> 01:00:24.760
We can't do that anymore.

01:00:24.760 --> 01:00:26.710
You can't just go into
the window pointer,

01:00:26.710 --> 01:00:29.440
graph pointer and mess
with the fields in there.

01:00:29.720 --> 01:00:34.140
There are a few other areas where
we just did stuff like that,

01:00:34.180 --> 01:00:37.020
and you can't do that anymore.

01:00:37.020 --> 01:00:40.590
That's one of the great things about
OS X is it allows us to go in and clean

01:00:40.750 --> 01:00:43.840
up some stuff that we really shouldn't
have been doing in the first place.

01:00:43.840 --> 01:00:51.610
Let me go ahead and show
you Express running on X.

01:01:04.820 --> 01:01:09.700
As you can see,
we're using Navigation Services here.

01:01:09.700 --> 01:01:14.970
And here's a great little document.

01:01:16.310 --> 01:01:19.960
I'll show the alien that
we do to delete a box.

01:01:20.140 --> 01:01:21.300
It's one of our Easter eggs.

01:01:21.300 --> 01:01:27.170
And it's gone.

01:01:28.900 --> 01:01:30.620
So there we go.

01:01:30.620 --> 01:01:34.570
And that kind of illustrates,
leads us into some of

01:01:34.680 --> 01:01:38.370
the great side effects,
great benefits that we get from 10.

01:01:38.630 --> 01:01:42.210
With that piece of code there, we can,
and displaying the document,

01:01:42.220 --> 01:01:44.610
we're able to turn off a
lot of excess code we had to

01:01:44.610 --> 01:01:46.360
deal with double buffering.

01:01:46.360 --> 01:01:48.160
OS X does it for us now.

01:01:48.160 --> 01:01:52.380
We don't have to have this huge
chunk of code that does it.

01:01:52.380 --> 01:01:55.490
Other great side effects,
we've been able to re-architect pieces

01:01:55.490 --> 01:01:59.020
of code that we've wanted to do,
couldn't validate it

01:01:59.020 --> 01:02:02.140
to product management,
and now we have to.

01:02:02.140 --> 01:02:04.530
We can go ahead, dig in,
and let's redo this

01:02:06.180 --> 01:02:11.680
The last thing I want to say really
is that going over to OS X has been

01:02:11.770 --> 01:02:14.500
really fulfilling and gratifying
and it's really cool stuff.

01:02:14.610 --> 01:02:17.980
When you start seeing your app go,
it's a lot of fun.

01:02:17.980 --> 01:02:22.100
The guys at Apple have
been great in helping us.

01:02:22.100 --> 01:02:24.250
The engineers are very helpful.

01:02:24.250 --> 01:02:27.660
They'll do whatever you ask them to do.

01:02:27.660 --> 01:02:32.020
They'll try and implement it for
you or teach you how to do it.

01:02:32.020 --> 01:02:34.170
It's been great.

01:02:34.260 --> 01:02:37.810
I suggest you all start it
now because it really is fun.

01:02:37.900 --> 01:02:41.490
Thanks a lot, Mike.

01:02:46.310 --> 01:02:48.420
All right, last I'd like to bring
up Scott Thompson from

01:02:48.420 --> 01:02:50.200
Macromedia to show us Freehand.

01:02:50.200 --> 01:02:57.770
These lights are so bright.

01:02:58.070 --> 01:03:00.180
It's really great for me to be here.

01:03:00.240 --> 01:03:03.400
You have no idea the
carbonization of Freehand has

01:03:03.400 --> 01:03:05.200
been somewhat of a long process.

01:03:05.220 --> 01:03:09.170
Apple actually asked us to
carbonize Freehand back in

01:03:09.340 --> 01:03:12.120
1998 for the original WWDC.

01:03:12.200 --> 01:03:14.200
We were trying to have it
in for the Thursday keynote.

01:03:14.200 --> 01:03:16.200
We missed it by about two hours.

01:03:16.200 --> 01:03:21.650
So I've actually carbonized the Freehand
code base three times since then,

01:03:21.650 --> 01:03:23.190
believe it or not.

01:03:23.200 --> 01:03:25.180
I did it for eight and
I did it for nine twice.

01:03:25.310 --> 01:03:27.200
So I've had a lot of
experience with this.

01:03:27.200 --> 01:03:29.780
This time, luckily,
I had the help of a great partner,

01:03:29.780 --> 01:03:32.200
Kent Sorenson,
who's over here taking photos.

01:03:32.200 --> 01:03:34.190
Helped me out a lot.

01:03:34.200 --> 01:03:38.810
So for us,
carbonization was -- and I realize

01:03:38.890 --> 01:03:41.610
I'm going to sound a lot like a
broken record because a lot of

01:03:41.670 --> 01:03:43.830
the stuff the guys do and a lot
of the stuff the guys have already

01:03:43.830 --> 01:03:46.150
said is perfectly up for Freehand,
as it will be for your

01:03:46.190 --> 01:03:47.200
applications as well.

01:03:47.290 --> 01:03:52.130
But for us, carbonization was largely
a matter of modernization.

01:03:52.200 --> 01:03:55.650
Steve said in his keynote that you
had to go through your application

01:03:55.650 --> 01:03:56.970
and clean out all the crud.

01:03:57.200 --> 01:04:00.100
Freehand, like Quark,
is one of these applications

01:04:00.110 --> 01:04:01.200
that's very big.

01:04:01.200 --> 01:04:03.200
Ours is 1.2 million lines of code.

01:04:03.380 --> 01:04:06.130
And we had lots of stuff that
was left over from System 6,

01:04:06.130 --> 01:04:09.200
creating our own GWorlds by hand,
those sorts of things.

01:04:09.200 --> 01:04:12.200
Going through the carbonization
process really did let us clean up.

01:04:12.200 --> 01:04:15.200
Clean out a lot of the
crud and get going.

01:04:15.240 --> 01:04:18.230
We did have the big buildup at the
front where we had to go through and

01:04:18.230 --> 01:04:20.200
deal with the opaque data structures.

01:04:20.240 --> 01:04:22.000
Like they've said,
it's a matter of sitting down,

01:04:22.050 --> 01:04:25.200
sitting down with a compiler,
working through 1,000, 2,000,

01:04:25.200 --> 01:04:29.200
3,000 compilers,
getting them all squared away.

01:04:29.200 --> 01:04:32.380
But once you've got that done,
you can get a few link

01:04:32.380 --> 01:04:34.200
errors maybe here and there.

01:04:34.200 --> 01:04:36.200
And then you'll be running up on 9.

01:04:36.410 --> 01:04:38.170
Running on 9 was a great first step.

01:04:38.230 --> 01:04:41.070
Then we started trying to
play with running on 10.

01:04:41.270 --> 01:04:44.200
Running on 10, we had a few crashes.

01:04:44.200 --> 01:04:46.200
We got to find some of
our write-to-nil bugs.

01:04:46.200 --> 01:04:47.110
Those are there.

01:04:47.560 --> 01:04:49.100
Those sorts of things.

01:04:49.200 --> 01:04:53.200
But once you work through a
couple of small crashing bugs,

01:04:53.200 --> 01:04:56.200
we got a whole lot of functionality.

01:04:56.200 --> 01:04:59.200
A really big part of our app
started working all at once.

01:04:59.200 --> 01:05:01.200
And that was really great.

01:05:01.200 --> 01:05:03.190
Now we do have some areas
that we need to work on still.

01:05:03.200 --> 01:05:06.150
The big one that I don't
have done is font support.

01:05:06.270 --> 01:05:08.570
We have to update from the old
resource-based font manager to

01:05:08.630 --> 01:05:10.170
the new Carbon font manager APIs.

01:05:10.260 --> 01:05:12.200
That's yet to be done.

01:05:12.200 --> 01:05:14.200
I haven't done a whole
lot with printing yet.

01:05:14.290 --> 01:05:17.200
And you might think that for freehand
printing would be a big part.

01:05:17.200 --> 01:05:19.980
But I know that coming down the line,
we've got this new print

01:05:20.130 --> 01:05:21.200
stuff coming along.

01:05:21.200 --> 01:05:24.210
So rather than rework what we have now,
I decided to just wait,

01:05:24.270 --> 01:05:26.300
see what the new print
stuff is all about,

01:05:26.300 --> 01:05:27.200
and do it that way.

01:05:28.000 --> 01:05:30.740
Overall,
I think that the analogy that says that

01:05:30.740 --> 01:05:35.180
carbonizing your application is roughly
equivalent to the PowerPC transition,

01:05:35.180 --> 01:05:36.680
I really believe in that.

01:05:36.810 --> 01:05:39.190
That is actually true,
and it's been my experience in

01:05:39.290 --> 01:05:42.160
the three or four times that
I've done freehand on Carbon.

01:05:42.160 --> 01:05:44.600
So why don't we go ahead and see
what freehand looks like running.

01:05:44.600 --> 01:05:48.670
I see up here on the screen,
now I'm a little disappointed in this.

01:05:48.700 --> 01:05:51.600
You'll notice that it's
showing the 32 by 32 bit icon.

01:05:51.600 --> 01:05:54.580
I actually have a 128 by 128 icon.

01:05:54.580 --> 01:05:57.280
I don't know why it's not showing up,
but we'll give it a shot.

01:05:59.880 --> 01:06:03.300
So freehand launches, we hope.

01:06:03.300 --> 01:06:03.980
All right.

01:06:04.010 --> 01:06:06.690
Pay no attention to the
man behind the curtain.

01:06:06.780 --> 01:06:09.190
We'll go ahead and go
through this dialogue.

01:06:09.480 --> 01:06:11.460
Now I have to mention that
this is a technology demo.

01:06:11.460 --> 01:06:12.620
It's not a product announcement.

01:06:12.760 --> 01:06:14.500
Product marketing made me say that.

01:06:14.650 --> 01:06:16.760
So here it is.

01:06:16.920 --> 01:06:17.620
Freehand is running.

01:06:17.810 --> 01:06:19.670
We'll go ahead and open the application.

01:06:19.770 --> 01:06:22.370
Go to our documents, freehand sample art.

01:06:22.450 --> 01:06:26.380
Bring up the lovely fairy picture
created by Delores Highsmith.

01:06:26.670 --> 01:06:29.180
You'll notice that we
got a lot of the Aqua UI.

01:06:29.240 --> 01:06:32.880
Most of our Aqua UI came about as
adopting the Appearance Manager.

01:06:32.980 --> 01:06:35.820
We haven't done much beyond that.

01:06:35.960 --> 01:06:37.160
Appearance Manager is really great.

01:06:37.250 --> 01:06:40.220
I urge you to get a look at
that if you haven't done it yet.

01:06:40.220 --> 01:06:43.350
Some of the great stuff that we get
running on 10 besides the Aqua UI,

01:06:43.350 --> 01:06:45.260
the double buffering is really nice.

01:06:45.440 --> 01:06:48.380
You'll notice as I move the panel around,
there's absolutely no redraw

01:06:48.470 --> 01:06:49.780
of the picture underneath it.

01:06:49.860 --> 01:06:52.680
If you're an artist and it takes you
a long time to redraw that picture,

01:06:52.770 --> 01:06:58.550
if you have a really complex document,
this will be an incredible time saver.

01:06:58.710 --> 01:07:03.940
Beyond that, we do have basic drawing,
those sorts of things working.

01:07:03.940 --> 01:07:06.690
You'll notice that the drawing is
really smooth and lovely and stuff.

01:07:06.850 --> 01:07:11.390
I added a minimal amount of
Carbon events into the tool tracking,

01:07:11.390 --> 01:07:13.560
and that got me, you know,
it used to stutter a lot,

01:07:13.590 --> 01:07:14.290
but now it doesn't.

01:07:14.300 --> 01:07:15.400
It's really great.

01:07:15.460 --> 01:07:18.140
So moving to Carbon was
actually quite easy,

01:07:18.280 --> 01:07:20.390
and I hope that you all
get a chance to do it.

01:07:20.400 --> 01:07:20.660
Okay?

01:07:20.690 --> 01:07:21.500
Thanks, Scott.

01:07:21.500 --> 01:07:23.300
Thanks a lot, Scott.

01:07:28.300 --> 01:07:31.800
So you don't have to take my
word as an Apple employee.

01:07:31.800 --> 01:07:34.600
What we find is the developers
who have moved over to Carbon have

01:07:34.600 --> 01:07:35.860
been really happy with it.

01:07:35.880 --> 01:07:40.270
And we're here for you to
help the process for all of

01:07:40.270 --> 01:07:42.640
you be as easy as possible.

01:07:42.640 --> 01:07:44.080
So what are the take-home points?

01:07:44.130 --> 01:07:46.840
First of all, Carbon apps will get a
bunch of user benefits,

01:07:46.860 --> 01:07:47.220
right?

01:07:47.230 --> 01:07:50.270
We're going to make them more
responsive and more robust.

01:07:50.470 --> 01:07:54.010
Carbon is the way to take your classic
app and get the Aqua interface.

01:07:54.120 --> 01:07:56.020
You won't get it in classic,
but you will get it if

01:07:56.020 --> 01:07:57.180
you move it to Aqua.

01:07:59.100 --> 01:08:03.000
We really believe in
this and we live on it.

01:08:03.000 --> 01:08:07.100
So the Finder is a Carbon application,
QuickTime Player, a bunch of other apps.

01:08:07.100 --> 01:08:08.500
They're Carbon applications.

01:08:08.580 --> 01:08:13.240
So our system is based on it
and we tune it every day because

01:08:13.240 --> 01:08:15.310
we live on the whole thing.

01:08:15.540 --> 01:08:19.260
And now is the time to carbonize.

01:08:19.310 --> 01:08:21.290
There's a lot more info you can get.

01:08:21.490 --> 01:08:23.490
On the website, there's a Carbon site.

01:08:23.560 --> 01:08:25.640
There's a new tech pub site,
which is great.

01:08:25.640 --> 01:08:30.440
It has this new inside Carbon,
which is inside Mac carbonized.

01:08:30.540 --> 01:08:34.460
So if we can carbonize Doc,
you can carbonize apps.

01:08:34.500 --> 01:08:36.110
And the last one is interesting here.

01:08:36.200 --> 01:08:40.010
We actually have a list of
consulting companies who,

01:08:40.010 --> 01:08:42.830
if you don't want to do it yourself,
you can just throw out some cash,

01:08:42.830 --> 01:08:46.180
and they'll come and carbonize
your application for you.

01:08:46.300 --> 01:08:48.580
So you can go ahead and check that out.

01:08:49.780 --> 01:08:55.160
David Wright is the technology manager
to talk to if you have questions.

01:08:55.210 --> 01:08:57.870
But the most important
thing here is tonight,

01:08:57.870 --> 01:09:01.110
after you've partied with the
people you see here once a year,

01:09:01.120 --> 01:09:03.890
and you're drunk,
and you get back to your hotel room

01:09:03.980 --> 01:09:06.840
and you want to impress your boss,
pull out your PowerBook,

01:09:06.890 --> 01:09:11.260
install DP4 on it,
and carbonize your application.

01:09:11.340 --> 01:09:12.800
Thanks a lot.