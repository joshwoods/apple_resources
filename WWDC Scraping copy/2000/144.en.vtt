WEBVTT

00:00:09.120 --> 00:00:10.450
Good afternoon, ladies and gentlemen.

00:00:10.700 --> 00:00:15.280
Please welcome the
User Experience Technology Manager,

00:00:15.280 --> 00:00:16.420
John Galenzi.

00:00:24.160 --> 00:00:25.100
Good afternoon.

00:00:25.100 --> 00:00:32.950
Welcome to session 144.

00:00:32.950 --> 00:00:32.990
This belongs to the user
experience sub-track,

00:00:32.990 --> 00:00:32.990
sort of.

00:00:32.990 --> 00:00:32.990
And the reason for that is that

00:00:33.990 --> 00:00:35.760
In all of the user
experience sessions so far,

00:00:35.760 --> 00:00:39.170
we've been talking about
Aqua-related things,

00:00:39.170 --> 00:00:44.340
so the look and feel of TAN,
how to properly design icons,

00:00:44.410 --> 00:00:46.820
how to lay out your dialogues,
these sorts of things that we

00:00:46.870 --> 00:00:49.410
talked about in the Aqua overview
and some of the other sessions that

00:00:49.410 --> 00:00:50.790
have occurred so far this week.

00:00:51.700 --> 00:00:55.650
As I said in the Aqua overview session
the first day of the conference,

00:00:55.700 --> 00:00:58.980
the Macintosh is known as
being friendly and easy to use.

00:00:58.980 --> 00:01:00.140
It's known as being consistent.

00:01:00.140 --> 00:01:03.760
And one of the most sort of notorious
behaviors of the Macintosh is

00:01:03.760 --> 00:01:08.760
that when you... Movement of files
around the file system is very easy.

00:01:08.760 --> 00:01:10.940
You can move folders
of whole applications.

00:01:10.940 --> 00:01:15.240
And when you move files and
documents from applications around,

00:01:15.240 --> 00:01:17.750
the Mac always knows which
application created it.

00:01:17.820 --> 00:01:20.610
When you double click it,
it knows which app to launch

00:01:20.670 --> 00:01:21.520
and these sorts of things.

00:01:21.520 --> 00:01:24.620
And it never sort of forgets
these types of relationships.

00:01:24.620 --> 00:01:29.560
This session is going to talk
about a lot of... It's going to

00:01:29.570 --> 00:01:33.520
talk about this subject matter and
we're going to talk about packages,

00:01:33.520 --> 00:01:35.740
which are new for 10.

00:01:35.740 --> 00:01:38.580
Well, they're on 9,
but they're important for 10.

00:01:38.580 --> 00:01:42.190
So there's a packaging your applications,
putting all of the pertinent files

00:01:42.200 --> 00:01:45.690
in one place so that users have a
really great user experience of moving

00:01:45.700 --> 00:01:47.490
those things around as one unit.

00:01:47.500 --> 00:01:50.660
And we're also going to talk about
the relationship of documents to

00:01:50.660 --> 00:01:55.820
applications and so to welcome on stage,
to talk about this material,

00:01:55.820 --> 00:01:59.290
I'd like to call Arno Gerdahl,
who comes from the user experience

00:01:59.350 --> 00:02:00.230
engineering team at Apple.

00:02:00.240 --> 00:02:01.390
Arno Gerdahl

00:02:08.480 --> 00:02:11.610
Good afternoon, everyone.

00:02:11.610 --> 00:02:16.480
So I know this is a -- if
you come to this session,

00:02:16.480 --> 00:02:22.820
you probably are wondering a
lot about what we're thinking.

00:02:22.820 --> 00:02:27.470
And I hope that by the end of this
session we'll have answered some

00:02:27.470 --> 00:02:27.470
of that question and that you'll
feel better about this whole topic.

00:02:27.790 --> 00:02:29.240
My name is Arno Gourdol.

00:02:29.240 --> 00:02:32.060
I work in the User Experience Department.

00:02:32.110 --> 00:02:37.740
I'm going to talk to you
today about two main things.

00:02:37.740 --> 00:02:37.740
The first one is

00:02:37.700 --> 00:02:55.700
[Transcript missing]

00:02:56.660 --> 00:02:59.030
The other thing I'm going to talk about
is the double-click user experience,

00:02:59.030 --> 00:03:00.580
you know,
what happens when you double-click.

00:03:00.820 --> 00:03:09.150
Again, that's more like a behavior,
but that's a very important one,

00:03:09.150 --> 00:03:13.360
and Mac OS has always had a very
good user experience in that regard,

00:03:13.360 --> 00:03:13.360
and obviously we're making
changes in Mac OS X,

00:03:13.360 --> 00:03:13.360
which I'm going to talk about.

00:03:14.480 --> 00:03:18.790
So, back in the old days,
an application was a single file,

00:03:18.940 --> 00:03:20.540
and it was very easy.

00:03:20.700 --> 00:03:22.050
When you wanted to
install the application,

00:03:22.090 --> 00:03:22.730
you just dragged it.

00:03:22.940 --> 00:03:26.060
That was it,
and you had everything with it.

00:03:26.060 --> 00:03:27.110
Everything used to be in a resource fork.

00:03:27.190 --> 00:03:28.150
I don't know if you remember that.

00:03:28.160 --> 00:03:30.040
It was years ago.

00:03:30.270 --> 00:03:33.480
With the introduction of PowerPC,
the code portion got

00:03:33.580 --> 00:03:34.990
moved to the data fork.

00:03:35.090 --> 00:03:37.220
So, in the data fork,
you had the code itself,

00:03:37.220 --> 00:03:39.680
and then in the resource fork,
you had the resources

00:03:39.680 --> 00:03:42.690
for the application,
the strings that needed to be localized,

00:03:42.690 --> 00:03:44.400
the user interface, and so on.

00:03:45.150 --> 00:03:47.750
Today, on Mac OS X, that still works.

00:03:47.760 --> 00:03:48.670
You can still have that.

00:03:48.770 --> 00:03:51.520
You can still have your
application in one single file.

00:03:51.570 --> 00:03:53.190
Data four contains the code.

00:03:53.410 --> 00:03:55.980
Resource four contains the resources.

00:03:56.050 --> 00:04:01.220
And you can have either a corb, CRRB,
or PLST resource-- and I'll talk about

00:04:01.480 --> 00:04:05.590
that one in a little bit more detail
in a while-- to tell the system that

00:04:05.830 --> 00:04:10.300
you're not just a classic application,
but that you're a Carbon application,

00:04:10.300 --> 00:04:14.100
and that we should not try to launch
you in the classic environment,

00:04:14.170 --> 00:04:16.470
but just in the regular
Carbon environment.

00:04:16.580 --> 00:04:19.950
So that's the minor difference
between what we may have had before

00:04:19.950 --> 00:04:24.710
and what we have in Mac OS X as
far as single file applications.

00:04:24.770 --> 00:04:27.870
The thing about single file applications,
though,

00:04:29.280 --> 00:04:33.540
is that contrary to this
very simple picture,

00:04:33.610 --> 00:04:36.610
where you have like just one icon and
everything looks simple and all that,

00:04:36.880 --> 00:04:39.650
nowadays what you're more likely
to see is something like that,

00:04:39.650 --> 00:04:42.060
where you have maybe one
file for the application,

00:04:42.060 --> 00:04:45.290
sure, but you have a lot of auxiliary
files next to the application,

00:04:45.380 --> 00:04:50.290
whether that be the help system,
the help content, some sample code,

00:04:50.370 --> 00:04:53.160
some sample documents,
or sample code if you're doing

00:04:53.160 --> 00:04:56.940
a development environment,
and all sort of stuff that kind

00:04:56.940 --> 00:05:00.040
of makes it more difficult for
the user to know actually what

00:05:00.040 --> 00:05:01.370
is it supposed to double click.

00:05:01.560 --> 00:05:03.920
And also that makes the
application more fragile,

00:05:03.980 --> 00:05:06.970
because it means that if
they move the wrong file,

00:05:07.080 --> 00:05:08.880
the application may not launch anymore.

00:05:08.950 --> 00:05:11.750
And you know that that's the kind
of experience that may happen

00:05:11.750 --> 00:05:14.380
on some other operating systems,
but we really don't want

00:05:14.380 --> 00:05:17.070
that to happen on Mac OS X.

00:05:17.660 --> 00:05:21.320
So, we're doing things to fix that,
to go back to the good old

00:05:21.320 --> 00:05:23.230
simplicity that we had before.

00:05:23.450 --> 00:05:26.740
And to do that,
we're introducing the concept

00:05:26.740 --> 00:05:28.660
of application bundle.

00:05:29.120 --> 00:05:34.540
Let me just tell you that,
I apologize in advance that we haven't

00:05:34.590 --> 00:05:36.840
been very consistent in our terminology.

00:05:36.900 --> 00:05:40.000
You may have heard the term
package and bundle and used

00:05:40.000 --> 00:05:41.780
sometimes interchangeably.

00:05:41.990 --> 00:05:45.090
We're going to try to be
more consistent from now on,

00:05:45.090 --> 00:05:45.860
we promise.

00:05:46.040 --> 00:05:50.990
So we're going to talk about
application bundle to talk about

00:05:51.220 --> 00:05:54.470
the way an application is packaged.

00:05:54.470 --> 00:05:58.890
And we're going to talk about file
packages to talk about documents

00:05:58.890 --> 00:06:00.960
that have a similar format.

00:06:01.030 --> 00:06:05.030
But bear with me,
bundle package is still the same thing.

00:06:06.610 --> 00:06:09.260
So, what's a bundle?

00:06:09.260 --> 00:06:11.920
It is a directory,
instead of being a single file,

00:06:11.920 --> 00:06:13.600
as we had before.

00:06:13.600 --> 00:06:15.100
It is now a directory.

00:06:15.140 --> 00:06:19.220
And to know that it's a directory
that actually contains an application,

00:06:19.420 --> 00:06:22.520
there are three ways
that we can identify it.

00:06:22.530 --> 00:06:24.890
The first one is you can set a bit.

00:06:25.120 --> 00:06:29.230
There's a special bit in the
HFS metadata that can indicate

00:06:29.440 --> 00:06:31.680
that this is a bundle folder.

00:06:31.850 --> 00:06:34.170
And that's actually the bundle bit,
which had been unused.

00:06:34.170 --> 00:06:38.060
It was only used for
documents until Mac OS 8.5,

00:06:38.110 --> 00:06:42.050
Mac OS 9, Mac OS 9.

00:06:42.300 --> 00:06:47.640
But now it actually means that the entire
folder is to be considered one unit,

00:06:47.640 --> 00:06:49.620
if you will, one bundle.

00:06:49.660 --> 00:06:53.340
There's also a special file that we're
looking for inside the directory.

00:06:53.340 --> 00:06:55.660
And if we find it,
we know that's a package.

00:06:55.660 --> 00:06:57.060
So it's a second way to do it.

00:06:57.060 --> 00:06:59.560
I'll talk about that file in
more details in a little while.

00:06:59.940 --> 00:07:03.500
And finally, there's another way that
this can be indicated,

00:07:03.600 --> 00:07:06.900
is by using an extension,
a three-letter extension, .app.

00:07:06.900 --> 00:07:10.430
There you go.

00:07:11.290 --> 00:07:14.740
but it's not over

00:07:16.600 --> 00:07:20.730
That can tell the system
that this is also a package,

00:07:21.030 --> 00:07:23.660
even though it may not
have the bundle bit set,

00:07:23.660 --> 00:07:26.770
and even though it may not have
the package info filed in there.

00:07:26.910 --> 00:07:30.030
So the reason for the extension there
is just in case the application gets

00:07:30.150 --> 00:07:33.360
moved around into maybe a file system
that doesn't know how to deal with that,

00:07:33.390 --> 00:07:35.710
with the HFS metadata,
and the bundle bit gets unset for

00:07:35.710 --> 00:07:37.360
some reason or something like that.

00:07:37.390 --> 00:07:41.040
So it's like more a safety
precaution than anything else.

00:07:41.310 --> 00:07:45.320
Important thing to remember:
.app is not required.

00:07:45.510 --> 00:07:49.710
You have two other ways to
indicate that your application

00:07:49.710 --> 00:07:49.710
is actually an application.

00:07:51.040 --> 00:07:53.560
OK, all right.

00:07:53.560 --> 00:07:57.000
Now,
there are a few bugs left in the DP4.

00:07:57.000 --> 00:07:58.830
Otherwise we would ship it.

00:07:59.050 --> 00:08:02.840
And one of them is the way-- sometimes
you actually need really to put

00:08:02.840 --> 00:08:05.140
it in .app to make it understand.

00:08:05.140 --> 00:08:08.360
Another thing that we are not
doing in the DP4 right now is

00:08:08.360 --> 00:08:12.550
that if your application has .app,
we'll actually display it

00:08:12.550 --> 00:08:14.550
in the file system and we'll
want to change that later.

00:08:14.690 --> 00:08:17.540
So there's a few caveats with
DP4 we're not quite done,

00:08:17.550 --> 00:08:20.410
but that's the direction that we want
to go where you can that something is

00:08:20.410 --> 00:08:23.760
a package one of three ways you choose

00:08:24.820 --> 00:08:29.450
If you are familiar with the
previous version of Mac OS X,

00:08:29.730 --> 00:08:33.400
Mac OS X Server and before,
there was another format for

00:08:33.400 --> 00:08:37.540
bundles that was slightly different
than what I'm going to talk about.

00:08:37.650 --> 00:08:39.210
That format is still supported.

00:08:39.340 --> 00:08:42.200
We still recognize,
we still understand it,

00:08:42.200 --> 00:08:44.500
but we don't recommend you using it.

00:08:44.790 --> 00:08:47.570
So you can just,
if you don't know about it,

00:08:47.690 --> 00:08:49.740
you can just forget about it.

00:08:49.790 --> 00:08:52.690
And if you are using it,
you should consider

00:08:52.690 --> 00:08:53.240
using the new format now.

00:08:53.590 --> 00:08:55.560
So what's inside this directory?

00:08:55.610 --> 00:09:03.710
We have multiple binaries for
different runtime environments,

00:09:03.710 --> 00:09:08.920
multiple localizations,
and all the auxiliary files that

00:09:08.920 --> 00:09:08.920
may not be that important for the
user to see and that could break

00:09:08.920 --> 00:09:08.920
the app if they get moved around.

00:09:09.230 --> 00:09:12.380
What's important about all this, though,
is that we want to get back to that.

00:09:12.510 --> 00:09:15.800
We want to have everything
that makes an application be

00:09:15.800 --> 00:09:17.470
presented as a single icon.

00:09:17.680 --> 00:09:19.590
That's the goal.

00:09:19.820 --> 00:09:23.140
To go back to the simplicity
that we had 16 years ago,

00:09:23.330 --> 00:09:26.290
even though things have changed
a little bit in the meantime.

00:09:27.740 --> 00:09:32.770
So the way we're doing this is
that we're having this box with

00:09:32.870 --> 00:09:34.840
all this neat content inside of it.

00:09:34.980 --> 00:09:38.290
But it's a nice way to put
everything together and to carry

00:09:38.290 --> 00:09:39.870
everything together around.

00:09:39.990 --> 00:09:44.060
And you can use it as a whole
without having to dig through it.

00:09:44.060 --> 00:09:48.080
And that's what the user is going to see.

00:09:48.080 --> 00:09:49.380
That's the user experience
we want to have.

00:09:49.380 --> 00:09:52.470
We want to have one icon,
one application, something very simple.

00:09:52.600 --> 00:09:55.940
That doesn't mean that you can't
have any files outside of it.

00:09:56.010 --> 00:09:58.440
Maybe it makes sense to have a readme
next to it or something like that.

00:09:58.600 --> 00:10:02.410
But again, nothing important
should be outside of it.

00:10:03.100 --> 00:10:06.690
Now, let's see what's inside the box.

00:10:06.770 --> 00:10:09.100
We're going to open it,
and I'm going to talk about all the

00:10:09.180 --> 00:10:11.700
components of what goes inside a package.

00:10:12.530 --> 00:10:14.640
This is kind of what it looks like.

00:10:14.800 --> 00:10:17.640
I'm using this fictitious--well,
actually, it's not so fictitious.

00:10:17.680 --> 00:10:20.470
It's on the CDP4 CD,
but it's a sample app.

00:10:20.720 --> 00:10:22.510
It's called Sketch.

00:10:23.030 --> 00:10:25.630
And at the top you have
the Sketch directory,

00:10:25.670 --> 00:10:27.140
which is what it really is.

00:10:27.250 --> 00:10:29.920
And inside of it there are
a number of subdirectories,

00:10:30.000 --> 00:10:31.570
which I'm going to detail.

00:10:31.700 --> 00:10:34.030
You'll notice that I'm using
two colors on the slides.

00:10:34.150 --> 00:10:37.130
The things that are in
yellow are the things that,

00:10:37.240 --> 00:10:40.360
for which the system expects the
name to be what is indicated here.

00:10:40.560 --> 00:10:43.700
You can't choose it to
be anything you want.

00:10:43.960 --> 00:10:46.610
The things that are in
white is left up to you.

00:10:46.740 --> 00:10:49.600
So that's going to be true
in this slide and the others

00:10:49.600 --> 00:10:51.440
I'm going to have after that.

00:10:53.460 --> 00:10:57.670
So, the first thing,
the thing that matters the most, I guess,

00:10:57.820 --> 00:11:02.330
is the binary, the actual executable
for your application.

00:11:02.410 --> 00:11:05.580
Where it's located is inside contents,
which is basically where

00:11:05.650 --> 00:11:06.790
most everything is.

00:11:06.850 --> 00:11:13.610
And inside of there, there is a directory
that's called Mac OS,

00:11:13.670 --> 00:11:17.100
with no space, that contains the,
that's expected to contain

00:11:17.100 --> 00:11:17.100
the binary for Mac OS X.

00:11:17.490 --> 00:11:20.580
This binary can be either a
CFM or Mac OS based binary.

00:11:20.820 --> 00:11:21.550
It doesn't matter.

00:11:21.720 --> 00:11:24.320
Both either will work.

00:11:24.620 --> 00:11:28.360
And it can contain a resource
fork if you want one.

00:11:28.390 --> 00:11:30.400
In the case of CFM, you really do.

00:11:30.670 --> 00:11:32.400
Otherwise,
it's not going to work so well.

00:11:32.400 --> 00:11:36.400
In the case of Mac OS, you don't have to.

00:11:36.700 --> 00:11:39.190
In general, I know that there is
some concern about that,

00:11:39.190 --> 00:11:42.070
too, about resource fork,
and some confusion about

00:11:42.070 --> 00:11:43.570
what we're saying there.

00:11:43.810 --> 00:11:48.320
What we want to have is we want to
have something that works really

00:11:48.470 --> 00:11:53.320
well in environments that don't
support resource forks that well,

00:11:53.400 --> 00:11:57.020
like other operating systems,
other volume formats,

00:11:57.110 --> 00:12:01.140
so that we can operate nicely with
all those different environments.

00:12:01.150 --> 00:12:07.600
And one way to make that easier is to
not rely on the resource forks so much.

00:12:07.830 --> 00:12:10.150
It doesn't mean never use resource forks.

00:12:10.190 --> 00:12:13.050
It means if you can live
without resource forks,

00:12:13.080 --> 00:12:15.900
if you can do everything we do
today without resource forks,

00:12:15.900 --> 00:12:18.300
or using a different format
for the resource forks,

00:12:18.330 --> 00:12:22.420
which I'm going to talk about,
then that means that your application,

00:12:22.420 --> 00:12:24.910
for example,
can live on a server that doesn't

00:12:25.030 --> 00:12:28.440
know anything about HFS metadata
and can still work there.

00:12:28.620 --> 00:12:31.350
That means that you can use
some wonderful utilities

00:12:31.350 --> 00:12:34.460
such as Tor to package your
application and ship it around,

00:12:34.460 --> 00:12:37.060
or you can easily FTP it or whatever.

00:12:37.230 --> 00:12:39.570
So there are some advantages to that.

00:12:40.430 --> 00:12:42.400
And, you know,
we're encouraging you to do that.

00:12:42.420 --> 00:12:44.270
As much as possible,
that's what we're trying

00:12:44.280 --> 00:12:45.300
to do on the system.

00:12:45.320 --> 00:12:48.720
The system we're trying to have
everything work potentially

00:12:48.720 --> 00:12:51.440
without relying on HFS,
although, of course,

00:12:51.440 --> 00:12:54.090
the system is designed
to work best on HFS.

00:12:54.990 --> 00:12:56.630
So that's the binary.

00:12:56.790 --> 00:12:59.760
You can have resources in there,
but there's a better place for it,

00:13:00.000 --> 00:13:01.390
and I'll talk about it in a while.

00:13:01.460 --> 00:13:05.000
So what we recommend that you have
here is just the code that's necessary

00:13:05.000 --> 00:13:07.160
to make your application do something.

00:13:09.990 --> 00:13:13.360
Next is a very important file,
and I'm going to talk about

00:13:13.360 --> 00:13:15.080
it several times today.

00:13:16.050 --> 00:13:22.270
We call it the plist, or Info.plist.

00:13:25.370 --> 00:13:29.760
Sometimes it's also
called info-macos.plist.

00:13:29.760 --> 00:13:32.520
And the reason for that is because
you can have either a generic version

00:13:32.520 --> 00:13:35.470
or a version that's specific to
Mac OS X or a version that's specific

00:13:35.470 --> 00:13:37.200
to another runtime environment.

00:13:37.240 --> 00:13:40.590
It's basically always the same file.

00:13:40.650 --> 00:13:42.830
It's an XML file.

00:13:43.190 --> 00:13:47.500
That contains a lot of information
about your application.

00:13:47.540 --> 00:13:50.140
The system uses that to basically
know everything there is to

00:13:50.140 --> 00:13:51.600
know about your application.

00:13:51.650 --> 00:13:57.510
What's your name, when were you born,
what documents you know how to open,

00:13:57.510 --> 00:14:03.230
everything you know how to do,
which icon should be displayed

00:14:03.230 --> 00:14:06.500
for your application,
and so on.

00:14:06.500 --> 00:14:07.410
And I'll go into some detail about
the content of that file in a while.

00:14:09.090 --> 00:14:13.360
Package info is another file in
there that is a very simple file.

00:14:13.360 --> 00:14:17.270
It's eight bytes and it basically
contains just the type and creator,

00:14:17.270 --> 00:14:20.540
which is also information that's
available in the Info.plist.

00:14:20.640 --> 00:14:25.510
It's redundant and the reason why we
have it here is only for performance

00:14:25.510 --> 00:14:30.070
reasons so that we can very quickly
find out what the type and creator

00:14:30.120 --> 00:14:34.820
of a package is without having
to pass the XML file necessarily.

00:14:35.040 --> 00:14:38.220
So it's an optimization,
but that file is important

00:14:38.220 --> 00:14:43.550
because I talked about it earlier,
the presence of this file can help

00:14:43.550 --> 00:14:47.090
us figure out that something that
looks like a directory in fact

00:14:47.570 --> 00:14:51.860
should be presented as a single file,
whether it's an application or an

00:14:51.860 --> 00:14:54.330
application bundle or a file package.

00:14:57.080 --> 00:14:59.690
If you don't have a creator,
for some reason your application

00:15:00.150 --> 00:15:03.710
doesn't have a creator because it's a
legacy application for whatever reason,

00:15:03.740 --> 00:15:04.640
that's okay.

00:15:04.640 --> 00:15:06.910
You can still put, you know,
for question mark as the creator.

00:15:07.080 --> 00:15:13.700
That will work and
we'll just use the type,

00:15:13.700 --> 00:15:13.700
which in that case would be
appl if you're an application.

00:15:16.710 --> 00:15:21.960
Finally, in the resources directory,
we have everything else.

00:15:21.960 --> 00:15:24.590
And I'm going to show you what that is.

00:15:26.820 --> 00:15:30.140
The first thing is going to be something
that all your apps are going to have,

00:15:30.140 --> 00:15:33.430
which is an icon for
the application itself.

00:15:33.500 --> 00:15:37.280
The PList contains a reference,
which is the name of the

00:15:37.390 --> 00:15:39.250
file that contains the icon.

00:15:39.300 --> 00:15:42.380
And you're going to look for
that file inside Resources.

00:15:42.730 --> 00:15:45.160
So here you see it displayed in white.

00:15:45.260 --> 00:15:47.780
It means the name can
be whatever you want.

00:15:48.000 --> 00:15:50.670
But it will have to be the same
one that's specified in the PList,

00:15:50.670 --> 00:15:52.930
of course, that we know to find it.

00:15:52.950 --> 00:15:55.200
If you have icons for
your documents as well,

00:15:55.250 --> 00:15:56.920
that's where they would be as well.

00:15:56.920 --> 00:15:59.270
And the PList, again,
would indicate what the name

00:15:59.280 --> 00:16:02.510
of those files are so that
we know where to find them.

00:16:04.670 --> 00:16:06.810
You can have your own
stuff in there as well.

00:16:07.000 --> 00:16:09.890
If your applications support
filters of some sort,

00:16:09.890 --> 00:16:13.840
export filters or graphic filters or
any kind of additional data things

00:16:13.860 --> 00:16:17.130
that the user can install optionally,
that kind of stuff,

00:16:17.130 --> 00:16:19.180
you can put that in there as well.

00:16:19.310 --> 00:16:20.510
You can have subdirectories.

00:16:20.540 --> 00:16:25.820
You can organize that however you want,
exactly the same way that you would

00:16:25.890 --> 00:16:30.840
organize your application today
if it was just in one big folder.

00:16:30.930 --> 00:16:32.020
So that's up to you.

00:16:32.020 --> 00:16:34.600
We don't impose any
organization in there.

00:16:36.250 --> 00:16:40.890
You can also have a file that's
going to contain resources in the

00:16:40.960 --> 00:16:46.500
Macintosh sense of the world and
Mac OS Toolbox sense of the world.

00:16:46.670 --> 00:16:50.630
If you have a file in there that
has the same name as your binary,

00:16:50.640 --> 00:16:55.120
but it has .rsrc at the end,
we will open that automatically

00:16:55.120 --> 00:16:59.360
for you because we'll know about
it and we'll figure out that you

00:16:59.960 --> 00:17:01.440
probably want to use that file.

00:17:01.740 --> 00:17:04.140
Before I was telling you, you know,
if you want,

00:17:04.150 --> 00:17:07.520
you can have binary that doesn't
contain any of the resources,

00:17:07.520 --> 00:17:09.180
it just contains the code.

00:17:09.210 --> 00:17:11.900
You can do that,
have the resources in there,

00:17:12.050 --> 00:17:14.360
and when your binary gets launched,
this file will be open

00:17:14.360 --> 00:17:15.890
automatically for you so that,
you know,

00:17:15.980 --> 00:17:17.460
you don't really have to do anything.

00:17:17.460 --> 00:17:22.170
It works like it always did,
even though the things are

00:17:22.170 --> 00:17:22.170
now living in two files.

00:17:23.930 --> 00:17:27.340
Now, one thing that's
important about resources,

00:17:27.340 --> 00:17:31.930
whether it's this particular
resource file or others you may have,

00:17:31.930 --> 00:17:36.600
is that with DP4 we're introducing
a new format for resources.

00:17:36.710 --> 00:17:44.790
And that format-- hang onto your
seats-- it's a resource fork

00:17:44.790 --> 00:17:44.790
that lives in the data fork.

00:17:46.200 --> 00:17:49.730
So it's exactly as if you had, you know,
what you would have in a resource fork,

00:17:49.780 --> 00:17:54.090
the same binary stream, if you will,
except it is stored in a data fork.

00:17:54.850 --> 00:18:00.240
That's exactly how we're
going to call that,

00:18:00.240 --> 00:18:00.240
resources in data fork
or something like that.

00:18:00.710 --> 00:18:03.420
But the advantage of that,
the reason why we did that,

00:18:03.510 --> 00:18:07.070
is that what it means is that anybody,
any OS that's out there today,

00:18:07.170 --> 00:18:10.320
any utilities or whatever,
knows about those things.

00:18:10.440 --> 00:18:12.150
They can back them up,
they can compress them,

00:18:12.290 --> 00:18:14.680
they can encrypt them,
they can do whatever they want with them.

00:18:14.930 --> 00:18:16.980
It's just a file for them,
it doesn't matter.

00:18:17.050 --> 00:18:20.230
And the resource manager now has
routines that allow you to open

00:18:20.410 --> 00:18:23.510
those things and create them
and manipulate them and so on.

00:18:23.680 --> 00:18:27.020
But again, as I mentioned,
if you just put that file in

00:18:27.020 --> 00:18:30.570
that location with the name
of your binary and .rsrc,

00:18:30.660 --> 00:18:32.530
we'll just open it for you.

00:18:32.590 --> 00:18:35.610
Whether it's stored in a data fork,
whether it's stored in a resource fork,

00:18:35.610 --> 00:18:36.600
it doesn't matter.

00:18:36.600 --> 00:18:38.590
You'll just get your resources.

00:18:38.710 --> 00:18:40.590
That's what counts for you.

00:18:42.430 --> 00:18:45.140
The resources that are in
this particular location,

00:18:45.140 --> 00:18:49.800
that are just in the resources directory,
are things that should not be localized.

00:18:49.880 --> 00:18:52.730
And sometimes it happens,
maybe there's a logo of

00:18:52.820 --> 00:18:56.020
your application in there,
maybe there is some various

00:18:56.140 --> 00:18:59.420
data that you need to have
in there for whatever reason.

00:18:59.420 --> 00:19:03.420
But those that are in there should
be things that are not localized,

00:19:03.420 --> 00:19:07.910
that will stay the same no matter what
the user preferred localization is.

00:19:07.910 --> 00:19:11.730
The things that do need to get localized,
however, go into a folder

00:19:12.080 --> 00:19:16.040
That's called, for example,
English.lproj.

00:19:16.070 --> 00:19:18.940
Obviously,
that's not the only name it can have.

00:19:19.100 --> 00:19:23.180
There are some relatively generic
names that indicate the region,

00:19:23.180 --> 00:19:25.750
like English and French and Japanese.

00:19:29.420 --> 00:19:32.360
And you can also have more
specific one if you want so

00:19:32.360 --> 00:19:34.990
that you can have find level

00:19:37.760 --> 00:19:40.040
A great deal of control
so that you could have,

00:19:40.050 --> 00:19:44.150
for example, the French-Canadian version
versus the French version or

00:19:44.200 --> 00:19:46.910
the Belgian version or whatever.

00:19:49.510 --> 00:19:54.500
And the system will pick which one
to use based on the user preference.

00:19:54.500 --> 00:19:55.820
You don't have to do anything.

00:19:56.020 --> 00:19:59.240
As long as you provide those directories,
the system will do the right thing

00:19:59.250 --> 00:20:00.960
and will pick whatever is available.

00:20:01.020 --> 00:20:04.150
So if the user said, you know,
I really like to have my

00:20:04.240 --> 00:20:06.860
applications in French,
and you happen to have

00:20:06.860 --> 00:20:10.640
a French localization,
that's what will be used.

00:20:10.650 --> 00:20:14.060
If you don't have one,
we'll fall back according

00:20:14.150 --> 00:20:15.840
to the user preferences.

00:20:15.860 --> 00:20:18.880
And if you only have one,
that's the one we will use.

00:20:18.900 --> 00:20:21.500
And again, you don't really have to do
anything for that except follow

00:20:21.960 --> 00:20:24.100
this layout for your application.

00:20:24.150 --> 00:20:27.110
So that allows you to ship one
application that contains multiple

00:20:27.110 --> 00:20:29.000
localization for your different markets.

00:20:29.060 --> 00:20:31.760
It's a very efficient way of doing it.

00:20:32.280 --> 00:20:35.540
Inside this directory,
there's a special file that you can

00:20:35.540 --> 00:20:38.720
have that's called localized.rsrc.

00:20:38.840 --> 00:20:42.850
And the same as the one I took before,
sketch.rsrc.

00:20:42.970 --> 00:20:47.520
It can be the file that contains the
resource fork with your resources in it.

00:20:47.590 --> 00:20:51.340
Or it can be a file that's your data
fork that contains the resources.

00:20:51.710 --> 00:20:57.440
And just like the other file,
it will be open automatically.

00:20:57.560 --> 00:21:01.460
So you'll have both the non-localized
resources as well as the localized

00:21:01.560 --> 00:21:05.410
resources open by the time that
your application is running.

00:21:05.500 --> 00:21:10.150
And the right ones, too,
without any effort on your part.

00:21:11.750 --> 00:21:14.680
If you have other type of data
that needs to be localized,

00:21:14.810 --> 00:21:17.770
for example a help file,
you can put it in there as well.

00:21:17.840 --> 00:21:25.290
And you can use some APIs to find
those files and to find the right ones,

00:21:25.300 --> 00:21:30.270
to find the English one
versus the French one,

00:21:30.270 --> 00:21:31.090
you know,
depending on the user choices and so on.

00:21:31.090 --> 00:21:31.090
There are APIs to do that
that make it really easy.

00:21:33.720 --> 00:21:37.920
Okay,
so that's kind of what's in resources.

00:21:38.280 --> 00:21:40.540
A lot of information that we're
really hiding from the user

00:21:40.550 --> 00:21:43.570
because they're not interested in
those details most of the time.

00:21:45.300 --> 00:21:49.980
Overall, that's what an application
bundle looks like on Mac OS X.

00:21:50.190 --> 00:21:53.720
It's a directory with a lot of structure,
a lot of files.

00:21:53.830 --> 00:21:56.960
Some have to be there
because the system uses them.

00:21:57.070 --> 00:22:02.790
Others,
they are left for you to put whatever

00:22:02.790 --> 00:22:02.790
you need to put in that folder.

00:22:04.990 --> 00:22:08.220
When we introduced Mac OS 9,
we introduced what we

00:22:08.600 --> 00:22:10.140
called app packages.

00:22:10.190 --> 00:22:12.400
We're calling them bundles now.

00:22:12.490 --> 00:22:13.100
They're the same thing.

00:22:13.100 --> 00:22:15.450
They haven't changed, just the name.

00:22:15.580 --> 00:22:18.020
And the structure is slightly different.

00:22:18.120 --> 00:22:22.200
And that might have confused
you when we were talking about

00:22:22.200 --> 00:22:24.900
bundles and packages and,
you know,

00:22:24.900 --> 00:22:29.620
looking at the tech notes and saying,
"Hmm, it looks like this.

00:22:29.620 --> 00:22:30.110
I look on DP3, it looks nothing like it."
So what does it all mean?

00:22:30.700 --> 00:22:32.640
That's what it looks like on Mac OS 9.

00:22:32.740 --> 00:22:36.100
Or that's what we recommend
that it looks like on Mac OS 9.

00:22:36.190 --> 00:22:44.100
On Mac OS 9,
you have much fewer constraints about

00:22:44.100 --> 00:22:44.100
what the layout of your directory is,
mostly because the

00:22:44.100 --> 00:22:44.100
system does less for you.

00:22:44.530 --> 00:22:49.760
The only constraints that you have
really for Mac OS X is that you

00:22:50.320 --> 00:22:53.290
should set a bundle bit on the folder,
because that's the only thing

00:22:53.290 --> 00:22:53.290
that Mac OS X recognizes.

00:22:53.760 --> 00:22:57.080
And at the top level of this folder,
you should have an alias

00:22:57.080 --> 00:22:59.930
to your application,
to the binary that you

00:22:59.930 --> 00:23:01.460
want to use on Mac OS X.

00:23:01.500 --> 00:23:03.850
It might be the same one that
you are using on Mac OS X if

00:23:03.940 --> 00:23:07.140
you're a Carbon application that
can run in both environments.

00:23:07.210 --> 00:23:10.140
Or you can choose to have
a completely different one,

00:23:10.140 --> 00:23:13.700
to have an application that's
completely tailored to Mac OS X and

00:23:13.750 --> 00:23:17.370
have a completely different
application running from Mac OS X.

00:23:17.410 --> 00:23:20.150
A completely different binary,
I should say.

00:23:20.150 --> 00:23:21.530
But from your user point of view,
it will be the same app.

00:23:22.240 --> 00:23:24.100
This alias should be relative.

00:23:24.220 --> 00:23:25.950
That's detailed in the tech note.

00:23:26.180 --> 00:23:27.910
I'll give you the reference
to the tech note so you can

00:23:27.910 --> 00:23:29.100
find more details about that.

00:23:29.100 --> 00:23:32.250
So that, again,
the thing can be moved around

00:23:32.350 --> 00:23:36.140
and the alias will always
point to the right binary.

00:23:36.140 --> 00:23:41.340
One thing that we're enhancing over
what we have described in the tech

00:23:41.440 --> 00:23:46.510
note previously is the addition
of--it's just a suggestion for 9,

00:23:46.510 --> 00:23:47.140
really.

00:23:47.140 --> 00:23:50.480
It helps make things more consistent.

00:23:50.690 --> 00:23:53.550
And that's the addition of the
contents directory with the

00:23:53.730 --> 00:23:55.930
Mac OS Classic directory inside of it.

00:23:56.000 --> 00:24:00.810
And the reason for that is because
it's going to mesh well with Mac OS X.

00:24:01.790 --> 00:24:05.640
So, on 9 you could have something
that looks like this.

00:24:05.660 --> 00:24:09.070
The alias, contents, Mac OS Classic,
and then in there,

00:24:09.330 --> 00:24:11.690
your binary and whatever files you have.

00:24:11.690 --> 00:24:15.700
Of course, on 9 you don't get support
for multiple localization.

00:24:15.700 --> 00:24:20.190
It just works like it does on 9.

00:24:21.110 --> 00:24:23.660
And if you want,
if you're doing a Carbon application

00:24:23.660 --> 00:24:27.850
and you want that application to
be able to run both on 9 and on 10,

00:24:27.890 --> 00:24:30.990
you can merge those two models together.

00:24:31.160 --> 00:24:33.790
So you get something like this.

00:24:34.720 --> 00:24:39.140
On this side over there,
you have Mac OS Classic that contains

00:24:39.140 --> 00:24:43.630
all the stuff that's needed for 9,
your binary, help file,

00:24:43.760 --> 00:24:46.030
whatever is needed there.

00:24:46.130 --> 00:24:51.680
You have the alias that points
to somewhere in there that's

00:24:51.680 --> 00:24:51.680
going to be used by Mac OS 9.

00:24:51.890 --> 00:24:56.120
On the other side,
you have the Mac OS Info.plist packaging

00:24:56.120 --> 00:24:59.090
for resources that are used by 10.

00:24:59.820 --> 00:25:02.370
What's important, though,
is that at the top,

00:25:02.590 --> 00:25:04.320
you have only one item.

00:25:04.380 --> 00:25:08.790
When the user double clicks on that item,
that icon that they see in the finder,

00:25:08.790 --> 00:25:12.490
whether it's on 9 or on 10,
the right thing happens.

00:25:12.610 --> 00:25:14.690
Although it's going to be something
completely different depending

00:25:14.690 --> 00:25:17.260
on the runtime environment,
but from the user point of view,

00:25:17.370 --> 00:25:18.680
the right thing happened.

00:25:18.680 --> 00:25:20.070
And again,
they can move it around and all

00:25:20.080 --> 00:25:22.700
the pieces come together and
they don't have to worry about,

00:25:22.790 --> 00:25:25.060
I don't know if I need that file,
I don't know,

00:25:25.060 --> 00:25:29.960
that doesn't look right to me,
and the application doesn't work anymore.

00:25:29.960 --> 00:25:31.500
Don't want that.

00:25:32.920 --> 00:25:36.400
At this point,
I'm going to give you a little

00:25:36.460 --> 00:25:42.390
demo to show you what a package
application bundle looks like.

00:25:55.860 --> 00:25:57.000
If we can.

00:25:57.040 --> 00:25:58.150
Yeah!

00:25:58.230 --> 00:26:00.520
So I'm running classic, you noticed?

00:26:00.550 --> 00:26:01.500
It works, kind of.

00:26:03.630 --> 00:26:10.060
So, let's have a look at that.

00:26:10.200 --> 00:26:16.510
So I have this CD here that
contains-- that's a CD that

00:26:16.510 --> 00:26:18.360
I've inserted in the machine.

00:26:18.670 --> 00:26:20.010
That's a fake thing.

00:26:20.070 --> 00:26:22.120
I just pressed that last night.

00:26:22.170 --> 00:26:26.660
But I can give you an idea of the
things you can do now with Mac OS X.

00:26:26.660 --> 00:26:31.290
For one thing, you'll notice that I have
a background for my app.

00:26:31.290 --> 00:26:35.410
And it's not made up of little
icons that are put together.

00:26:35.670 --> 00:26:38.380
You can't select them
and move them around.

00:26:38.380 --> 00:26:38.380
It's a picture.

00:26:42.290 --> 00:26:45.000
So we can take advantage of that
to make some interesting things.

00:26:45.050 --> 00:26:49.460
And then there are a few things
that are at the top level of the CD,

00:26:49.460 --> 00:26:53.520
like the icon for my app,
which is actually an app bundle,

00:26:53.520 --> 00:26:58.700
and goodies that contains the installer
stuff and maybe additional stuff

00:26:58.750 --> 00:27:02.720
that a user might want to install,
and just a README file.

00:27:02.770 --> 00:27:06.050
So the idea is that a
user just bought your app,

00:27:06.050 --> 00:27:06.900
they put the CD in,
they read the README if they

00:27:06.900 --> 00:27:06.900
want to-- hopefully they will.

00:27:07.340 --> 00:27:09.940
And they just drag the app maybe.

00:27:09.990 --> 00:27:12.140
In some cases, you might not even need
to have an installer.

00:27:12.200 --> 00:27:16.150
So keep the things as simple as possible.

00:27:21.060 --> 00:27:26.000
So let's have a look inside
that application here.

00:27:26.010 --> 00:27:30.400
I'm going to do a get info on it so
you can have a look at what's inside.

00:27:30.680 --> 00:27:32.720
And I'm going to give you a few
tricks that you might want to write

00:27:32.790 --> 00:27:35.090
down because I don't think we've
actually put that in the documentation,

00:27:35.090 --> 00:27:39.430
and it is useful during your development.

00:27:40.320 --> 00:27:44.050
In GetInfo, there are several panels
that apply to this item.

00:27:44.250 --> 00:27:48.700
One of them that's particularly
interesting is application files.

00:27:48.830 --> 00:27:50.640
It kind of gives you an
idea of what's inside.

00:27:50.680 --> 00:27:54.040
But sometimes you really want
to look inside the folder.

00:27:54.320 --> 00:27:58.760
And we used to have a button in DP3
to do that that we removed in DP4.

00:27:58.950 --> 00:27:59.920
It might come back.

00:28:00.150 --> 00:28:05.190
But in the meantime, very important,
and that's where you want to write down,

00:28:05.260 --> 00:28:09.090
you want to press the Option key while
you double-click on the icon there.

00:28:16.390 --> 00:28:25.100
So, new in DP4 is a relaunch service that
relaunches your apps really quickly.

00:28:25.140 --> 00:28:27.300
Let me give that another try.

00:28:31.600 --> 00:28:42.900
[Transcript missing]

00:28:43.350 --> 00:28:45.150
So, that's the content of my package.

00:28:45.200 --> 00:28:48.150
I'm viewing it at least through
here so we can disclose the

00:28:48.150 --> 00:28:50.210
thing and see what's inside it.

00:28:51.350 --> 00:28:55.270
This is a package that was designed
to work both on 9 and on 10.

00:28:55.420 --> 00:28:59.960
So at the top level here,
it has an alias to the application

00:28:59.960 --> 00:29:02.200
that I want to use on 9.

00:29:02.220 --> 00:29:08.200
That application itself is in there,
inside contents, Mac OS Classic.

00:29:08.200 --> 00:29:11.770
And now that's where
I'm playing with fire.

00:29:11.910 --> 00:29:16.790
I'm actually going to try to launch it to
show you something that's kind of cool.

00:29:17.460 --> 00:29:23.890
This, believe it or not,
is actually MacDraw 0.9.

00:29:27.530 --> 00:29:33.380
Look at the date, August '84,
and it still runs on Mac OS X.

00:29:37.720 --> 00:29:41.350
So the point of this is that you can have
a very different app for your Mac OS 9

00:29:41.350 --> 00:29:43.370
version than you have on Mac OS X.

00:29:43.480 --> 00:29:46.630
Of course, if you want, of course,
you can have a carbonized version that's

00:29:46.800 --> 00:29:49.430
going to work both on 9 and on 10.

00:29:51.780 --> 00:29:54.210
The other stuff that you have in here,
in here I have some custom folders

00:29:54.210 --> 00:29:57.530
that are specific to my application,
color palettes here.

00:29:57.790 --> 00:30:02.700
The very important Info.plist that
contains all this stuff about my app.

00:30:02.860 --> 00:30:05.740
Later on I'll go into more
detail what's in there.

00:30:05.780 --> 00:30:10.140
And then in there I have the binary
for my Mac OS X version of my app.

00:30:10.170 --> 00:30:16.530
This happens to be a Cocoa,
Java Cocoa app.

00:30:16.610 --> 00:30:18.770
While this one obviously isn't.

00:30:18.840 --> 00:30:20.440
So we see we support multiple runtimes.

00:30:20.480 --> 00:30:22.190
That's kind of cool.

00:30:22.270 --> 00:30:25.140
The package info file that tells us
about the type and creator of that thing.

00:30:25.280 --> 00:30:29.580
And then the plugin,
another folder for my app.

00:30:30.620 --> 00:30:33.670
And then inside resources,
a bunch of other files that my

00:30:33.760 --> 00:30:35.930
app needs to have access to.

00:30:35.980 --> 00:30:38.830
Some TIFF files that contain
different pictures displayed in

00:30:38.830 --> 00:30:41.380
the user interface of this app.

00:30:41.620 --> 00:30:44.450
The localized version of resources.

00:30:44.500 --> 00:30:49.150
The nib,
since it's a Cocoa app and so on.

00:30:50.520 --> 00:30:53.590
So you can go in there,
move things around,

00:30:53.590 --> 00:30:55.130
do whatever you want with it.

00:30:55.250 --> 00:30:58.190
Of course, you don't want to encourage
your users to do that,

00:30:58.190 --> 00:31:01.230
but sometimes they may need to
actually have access to that

00:31:01.340 --> 00:31:03.000
and we'll give them access.

00:31:03.000 --> 00:31:12.190
But that should really be the backdoor
version of configuration of your app.

00:31:14.840 --> 00:31:17.270
I've mentioned that we also
support multiple localization.

00:31:17.440 --> 00:31:23.880
So the way that this works is
that in the system preferences,

00:31:25.270 --> 00:31:28.050
There is one of the elements
of system preferences,

00:31:28.050 --> 00:31:29.040
international.

00:31:29.180 --> 00:31:34.090
And international,
you have a list of languages.

00:31:34.280 --> 00:31:36.370
And the user can order
that however they want.

00:31:36.460 --> 00:31:40.830
If they want to have French first,
they can have French first, then English,

00:31:40.860 --> 00:31:42.820
German, whatever.

00:31:42.830 --> 00:31:45.560
What that will do is that that
will have a direct effect.

00:31:45.560 --> 00:31:49.410
When they double click on their app,
the system will use that list to figure

00:31:49.410 --> 00:31:52.660
out in which order to look for languages.

00:31:52.680 --> 00:31:55.990
So here if I have put French first,
the first thing the system will look

00:31:56.130 --> 00:31:57.820
for would be the French localization.

00:31:57.820 --> 00:31:59.920
Open that and use that.

00:31:59.970 --> 00:32:03.560
So that's where those
things are controlled.

00:32:03.630 --> 00:32:03.850
OK.

00:32:04.060 --> 00:32:09.910
I'll come back to this mission later.

00:32:20.930 --> 00:32:23.130
There is a session later on
this afternoon that will talk

00:32:23.160 --> 00:32:24.450
in more detail about that.

00:32:24.460 --> 00:32:27.470
In particular,
it will talk about the APIs that

00:32:27.470 --> 00:32:31.790
you have that give you access to the
content of those things so that you

00:32:31.910 --> 00:32:36.800
can go in there and ask for files so it
looks in the right directory and so on.

00:32:37.170 --> 00:32:42.300
This afternoon's session, 1:57, all A1,
5:00 PM.

00:32:42.300 --> 00:32:46.360
If you're interested in that
and what kind of APIs are

00:32:46.360 --> 00:32:48.830
available to get access to that,
go to that session.

00:32:50.390 --> 00:32:54.060
Okay, now I'm going to move
on to another topic.

00:32:54.170 --> 00:32:57.530
Talked about how to
package your app together.

00:32:59.630 --> 00:33:01.400
And now I'm going to talk
about what happens when you

00:33:01.520 --> 00:33:03.630
double-click on documents.

00:33:03.760 --> 00:33:06.700
So that's what we call doc binding.

00:33:06.800 --> 00:33:11.950
What it means is the binding of
an application to a document.

00:33:12.680 --> 00:33:15.990
In other words,
that's the double-click user experience.

00:33:16.070 --> 00:33:20.140
That's a very important part
of the Mac OS experience,

00:33:20.140 --> 00:33:24.300
and that's something that
we really care about a lot.

00:33:27.100 --> 00:33:30.620
So I'm going to give you five easy
rules to follow for document binding.

00:33:30.670 --> 00:33:34.800
And if you follow them,
nobody gets hurt and everything's cool.

00:33:35.260 --> 00:33:38.750
First one:
all the app have to have a .app,

00:33:38.750 --> 00:33:44.500
and it cannot contain any spaces,
because spaces are evil for Unix.

00:33:45.570 --> 00:33:48.800
You can only use /space, right?

00:33:48.850 --> 00:33:49.870
Hey, that's the first one.

00:33:49.930 --> 00:33:52.200
Come on, I have four more.

00:33:52.230 --> 00:33:54.780
All the apps must live inside /bin/app.

00:33:55.010 --> 00:33:57.840
Otherwise,
we don't know about those apps,

00:33:57.840 --> 00:33:59.770
and they just won't run.

00:34:02.500 --> 00:34:07.520
Did someone upload there?

00:34:07.830 --> 00:34:11.340
All files must have a
three-letter extension.

00:34:11.420 --> 00:34:14.870
Because if they don't,
we just don't know what to do with them.

00:34:17.160 --> 00:34:18.330
There is no creator and type.

00:34:18.480 --> 00:34:19.890
That's something of the past.

00:34:19.890 --> 00:34:23.290
We're moving forward toward
three-letter extension.

00:34:23.350 --> 00:34:24.670
No more creator and type.

00:34:24.880 --> 00:34:26.500
They're evil.

00:34:27.970 --> 00:34:30.600
And finally, hey,
I'm just a misenter here.

00:34:30.660 --> 00:34:34.610
And finally, to install an app,
it's very easy.

00:34:38.770 --> 00:34:46.590
That's actually what they do on
some other operating systems.

00:34:46.590 --> 00:34:49.570
So, for those of you who are believing
everything you read in rumor sites,

00:34:50.950 --> 00:34:53.800
But don't.

00:34:53.820 --> 00:34:55.480
That's not quite how it works.

00:34:55.580 --> 00:34:58.970
What we want to do in Mac OS X with
regard to dark binding is to

00:34:59.060 --> 00:35:01.670
preserve the ease-of-use of Mac OS 9.

00:35:01.670 --> 00:35:05.440
We're very conscious of that,
and obviously that's something

00:35:05.440 --> 00:35:08.180
that we want to preserve
moving forward with Mac OS X.

00:35:08.510 --> 00:35:09.930
But that's not where we want to stop.

00:35:09.930 --> 00:35:12.980
We don't want to do something
that's just as good as Mac OS 9.

00:35:12.980 --> 00:35:16.190
There are a bunch of other things that
we want to take into consideration.

00:35:16.290 --> 00:35:19.640
The first one is we want
to play nice with others.

00:35:19.640 --> 00:35:24.890
What I mean by that is that we want
to interoperate really well with other

00:35:24.890 --> 00:35:32.170
operating systems because we realize
that we don't have 100% market share yet.

00:35:36.290 --> 00:35:38.400
We're working on it.

00:35:38.640 --> 00:35:41.080
So there are other
operating systems out there,

00:35:41.080 --> 00:35:46.480
and it's important that files that
get created on our operating system,

00:35:46.480 --> 00:35:48.850
or that your applications,
if they're stored on

00:35:49.040 --> 00:35:51.500
remote servers and so on,
work.

00:35:51.530 --> 00:35:56.920
And don't get in the way of the
administrator of the servers and so on.

00:35:57.100 --> 00:36:02.800
If you know some administrators
of those types of servers today,

00:36:02.990 --> 00:36:07.100
you know that they don't always
like when they have Mac users

00:36:07.150 --> 00:36:11.120
that get on the servers,
because we tend to leave crud all around.

00:36:11.180 --> 00:36:14.440
So we want to behave
better in that regard.

00:36:14.460 --> 00:36:17.520
Also,
with regard to different volume formats,

00:36:17.520 --> 00:36:19.880
HFS is a great volume format.

00:36:19.900 --> 00:36:20.840
It's very modern.

00:36:20.900 --> 00:36:25.600
It has multiple forks,
extensive metadata,

00:36:25.620 --> 00:36:28.790
all sort of very nice features
that we want to preserve.

00:36:28.850 --> 00:36:32.710
And that's why HFS is the main
volume format for Mac OS X.

00:36:33.100 --> 00:36:36.630
But at the same time-- we want to
be able to live in an environment

00:36:36.890 --> 00:36:42.170
where there are other volume formats
that may not be as smart as HFS is.

00:36:42.870 --> 00:36:49.130
So we want to fit in in
this wonderful universe of

00:36:51.340 --> 00:36:54.440
We also want to work in an
environment that's much more

00:36:54.450 --> 00:36:56.370
networked than it used to be.

00:36:56.560 --> 00:36:58.420
Each user can log in.

00:36:58.830 --> 00:37:01.600
We want them to be able to have
their different preferences,

00:37:01.600 --> 00:37:03.200
not to share them necessarily.

00:37:03.200 --> 00:37:07.830
And that requires to make some changes,
which I'll go into more detail.

00:37:08.130 --> 00:37:10.560
And finally,
even though the Mac OS 9 user

00:37:10.610 --> 00:37:14.800
experience for double-clicking is great,
we think that there are some

00:37:14.910 --> 00:37:19.510
improvements that can be made,
in particular for more advanced users.

00:37:19.980 --> 00:37:23.210
Think that for novice users,
it works great.

00:37:23.240 --> 00:37:27.460
It always does mostly what you expect,
except when it tells you that it

00:37:27.560 --> 00:37:31.420
can't find this app and that app,
and that you have to use ResetIt to

00:37:31.420 --> 00:37:33.240
change the type in creator.

00:37:33.290 --> 00:37:36.160
Aside from those minor details,
it's pretty good.

00:37:36.270 --> 00:37:41.000
But we want to make it better,
in particular for more advanced users.

00:37:41.060 --> 00:37:44.540
In other words,
we want it to make easier to use

00:37:44.580 --> 00:37:47.460
and more powerful at the same time.

00:37:47.510 --> 00:37:49.400
And that's not easy.

00:37:49.850 --> 00:37:52.340
Let me tell you, that's not easy.

00:37:52.400 --> 00:38:00.860
That's what we're trying to
do with Mac OS X in general,

00:38:01.220 --> 00:38:03.490
but this is particularly an area where
the ease of use is very important,

00:38:03.490 --> 00:38:03.490
and adding new features
also is long overdue.

00:38:04.100 --> 00:38:04.620
How does it work?

00:38:04.780 --> 00:38:08.040
How does document binding work?

00:38:08.160 --> 00:38:11.230
A very important concept
in document binding is the

00:38:11.230 --> 00:38:13.080
concept of the document type.

00:38:13.380 --> 00:38:17.100
which didn't really
exist in Mac OS 9 before.

00:38:17.150 --> 00:38:20.770
You had the file type,
but the file type doesn't tell

00:38:20.790 --> 00:38:24.680
you anything about other ways
that you can represent what

00:38:24.950 --> 00:38:27.300
the format of this document is.

00:38:27.430 --> 00:38:28.690
One way is the file type.

00:38:28.920 --> 00:38:30.540
That's definitely true.

00:38:30.570 --> 00:38:33.440
But there might be other ways.

00:38:33.440 --> 00:38:37.610
For example, extensions,
which are used on other

00:38:37.610 --> 00:38:37.610
operating systems,
on the internet more frequently.

00:38:37.730 --> 00:38:40.830
And in some cases,
just the content of the file,

00:38:40.970 --> 00:38:44.900
maybe there's a header that contains
a signature or something like that,

00:38:44.920 --> 00:38:48.520
can tell you some information
about what this file format is.

00:38:48.610 --> 00:38:52.840
So we've abstracted that by having
this concept of a document type.

00:38:52.840 --> 00:38:58.140
And that's just a string,
arbitrary length, that defines that.

00:38:58.610 --> 00:39:01.990
You define those strings
inside your information plist.

00:39:02.280 --> 00:39:05.040
I'll show an example in a while,
what it looks like.

00:39:05.190 --> 00:39:07.000
But for each type of
document that you know about,

00:39:07.100 --> 00:39:09.010
basically, you'll have an entry.

00:39:09.240 --> 00:39:13.150
And this entry will be indexed
by that document type string.

00:39:14.330 --> 00:39:17.380
Other info:
the type and creator that can be used

00:39:17.380 --> 00:39:19.430
to identify the type of document.

00:39:19.650 --> 00:39:24.200
Again, this is specific to HFS,
stored in the HFS metadata.

00:39:24.200 --> 00:39:27.680
We support that if it's there, you know,
if you have an HFS volume format and

00:39:27.690 --> 00:39:31.050
your document has a type and creator,
of course we're going to use that.

00:39:31.200 --> 00:39:35.440
But we also want to work
when it's not there.

00:39:35.480 --> 00:39:40.580
So it's optional because
HFS might not always be around

00:39:40.640 --> 00:39:41.780
where your documents are stored.

00:39:44.460 --> 00:39:46.980
Okay, so file extension is
something new to Mac OS.

00:39:47.070 --> 00:39:49.900
Mac OS never had the concept
of file extensions per se,

00:39:50.050 --> 00:39:53.830
and we're introducing that and trying
to have some nice support for it.

00:39:54.440 --> 00:39:59.200
The definition of a file extension
on Mac OS X is it's something at the

00:39:59.210 --> 00:40:04.760
end of a file name that's up to 32
characters in length after a dot.

00:40:05.680 --> 00:40:07.990
Some things to keep in mind
about extensions is that

00:40:07.990 --> 00:40:10.960
they are not localized,
so you don't have to worry about having

00:40:11.020 --> 00:40:14.800
different versions of the extension for
different localization and all that.

00:40:14.960 --> 00:40:16.080
That's not the case.

00:40:16.080 --> 00:40:18.100
That's not intended to be localized.

00:40:18.130 --> 00:40:20.570
They are not case sensitive either.

00:40:21.660 --> 00:40:25.400
And the characters that you can use in
extension is actually fairly reduced.

00:40:25.430 --> 00:40:31.600
You can use A to Z, 0 to 9,
and the characters $%, _, and ~.

00:40:31.690 --> 00:40:34.190
And if there are any other
characters that you really,

00:40:34.190 --> 00:40:36.840
really want to use for some reason,
let us know about it.

00:40:37.060 --> 00:40:40.570
But I think that with this,
we're covering enough.

00:40:40.610 --> 00:40:45.900
And the reason why we're limiting the
character set is because by doing that,

00:40:45.910 --> 00:40:50.360
the users still have the freedom
to use anything that's not dead,

00:40:50.360 --> 00:40:51.290
basically.

00:40:51.840 --> 00:40:55.770
An example of that is that we have
also another limitation that if

00:40:56.030 --> 00:40:59.180
an extension has only one or two

00:40:59.320 --> 00:41:28.630
Digits in it.

00:41:28.630 --> 00:41:28.630
We don't consider it to be an extension.

00:41:28.630 --> 00:41:28.630
And why do we do that?

00:41:28.630 --> 00:41:28.630
Well, because we want to allow you to
have something like surfpaint 1.0

00:41:28.630 --> 00:41:28.630
and not have us confused and say,
".o?" What kind of extension is that?

00:41:28.630 --> 00:41:28.630
I wonder if there's an
application that can open .o?

00:41:28.630 --> 00:41:28.630
So .0 is not an extension.

00:41:28.630 --> 00:41:28.630
.0.revb is not an extension either.

00:41:28.630 --> 00:41:28.630
Can you tell me why?

00:41:28.800 --> 00:41:32.750
It has spaces in it, exactly.

00:41:32.750 --> 00:41:42.900
To be continued dot dot dot is not an
extension either for a number of reasons

00:41:42.900 --> 00:41:42.900
because dot is not a valid character
and depending on how you parse it you

00:41:42.900 --> 00:41:42.900
might actually consider that it's empty.

00:41:43.480 --> 00:41:49.990
Some valid extensions, on the other hand,
are the always popular xvnd.386,

00:41:51.940 --> 00:41:58.000
foo.c, well that's an extension that you
might have heard of and used before.

00:41:59.200 --> 00:42:01.340
And Doug.SurfPant.

00:42:01.340 --> 00:42:02.870
And Doug.SurfPant.

00:42:03.140 --> 00:42:07.840
I can't say the case,
but you see the difference, right?

00:42:07.970 --> 00:42:08.850
They're the same.

00:42:09.080 --> 00:42:10.100
They're the same extensions.

00:42:10.100 --> 00:42:11.900
Like I said,
the case doesn't matter as far

00:42:11.900 --> 00:42:13.250
as extensions are concerned.

00:42:13.360 --> 00:42:17.890
And that's another example that
shows you that if you want,

00:42:17.890 --> 00:42:22.350
you can have--it's not just
three characters anymore.

00:42:22.350 --> 00:42:23.800
It's up to 32.

00:42:23.800 --> 00:42:23.800
So you can use your entire
application name if it makes sense.

00:42:24.970 --> 00:42:27.610
Of course,
if you already have some extensions that

00:42:27.610 --> 00:42:30.850
are defined for your document types,
because your application

00:42:31.010 --> 00:42:33.910
is cross-platform,
for example, and you had to deal with

00:42:33.910 --> 00:42:36.310
those issues before,
use the same thing that you

00:42:36.430 --> 00:42:38.040
have on those other platforms.

00:42:38.480 --> 00:42:41.880
The whole point of this is to
make interoperability easier.

00:42:41.980 --> 00:42:45.270
So don't have extensions
that are Mac OS X specific,

00:42:45.270 --> 00:42:48.490
because that would be
kind of missing the point.

00:42:48.500 --> 00:42:51.430
If you want something
that's Mac OS X specific,

00:42:51.580 --> 00:42:53.080
use type and creator.

00:42:53.090 --> 00:42:53.890
Don't use extensions.

00:42:58.260 --> 00:43:00.060
Okay.

00:43:00.120 --> 00:43:05.800
This is something that we're going to
try to implement as soon as possible,

00:43:05.840 --> 00:43:08.440
but it's not yet in DAP4.

00:43:08.550 --> 00:43:09.940
And that's a hint.

00:43:09.990 --> 00:43:12.910
And I want to talk to you about
that because that's something that

00:43:13.040 --> 00:43:15.500
I think it's important that you're
aware of and think about it,

00:43:15.520 --> 00:43:18.300
because we could do some
interesting stuff with that.

00:43:18.890 --> 00:43:23.400
A hint is basically it's a
sequence of bytes in the first K,

00:43:23.400 --> 00:43:27.300
the first 1024 bytes of a document.

00:43:27.710 --> 00:43:30.560
That can help us identify
what the document is.

00:43:30.660 --> 00:43:34.090
That's also referred to
as a magic cookie in Unix.

00:43:34.170 --> 00:43:38.730
That's one of the good things of Unix,
see?

00:43:38.730 --> 00:43:38.730
There are some.

00:43:39.730 --> 00:43:42.200
And that's also something
that's used sometimes.

00:43:42.330 --> 00:43:45.020
Not all popular document
formats have that,

00:43:45.030 --> 00:43:47.000
but very frequently they do.

00:43:47.200 --> 00:43:51.940
For example, Acrobat PDF files,
the first four bytes of an Acrobat

00:43:51.940 --> 00:43:54.230
PDF file are always percent PDF.

00:43:54.590 --> 00:44:00.790
So if you just look at those four bytes,
you have a PDF file,

00:44:00.800 --> 00:44:02.700
even if you have no extension
and the typing creator has

00:44:02.700 --> 00:44:02.700
been lost for some reason.

00:44:02.940 --> 00:44:07.780
So putting all this together,
if you have a document that's

00:44:07.810 --> 00:44:11.460
just called image.jpg without any
type in creator-- maybe that's

00:44:11.460 --> 00:44:13.100
something that you just downloaded.

00:44:13.140 --> 00:44:16.400
Maybe it's an MP3 from
Metallica or something.

00:44:16.400 --> 00:44:18.610
Well,
we can still tell from the extension

00:44:18.740 --> 00:44:21.380
that the type is JPEG file.

00:44:21.440 --> 00:44:24.110
If you have the type,
we're going to use that.

00:44:24.360 --> 00:44:27.430
And even if there is no extension,
even if it's just called image,

00:44:27.620 --> 00:44:31.000
again the same thing, we're going to know
that it's a JPEG file.

00:44:31.000 --> 00:44:33.760
And finally,
if it has just the name image,

00:44:33.760 --> 00:44:38.560
no extension, and no type in creator,
by looking at the proper byte

00:44:38.560 --> 00:44:42.880
sequence at the beginning of the file,
which for JPEGs happens to be FFD8, FFE0,

00:44:42.880 --> 00:44:46.670
we're going to know still
that it's a JPEG file.

00:44:49.990 --> 00:44:53.260
What's important is that
in those three cases,

00:44:53.330 --> 00:44:56.840
no matter how,
the end result is the same.

00:44:56.960 --> 00:44:59.300
We know that it is a JPEG file.

00:44:59.460 --> 00:45:07.170
And once we have that information,
we go on to the next step,

00:45:07.170 --> 00:45:07.170
which is going to be to find the
application to use to open that thing.

00:45:08.560 --> 00:45:12.380
The way this works on Mac OS 9 is that
there's the infamous desktop database

00:45:12.450 --> 00:45:16.330
that needs to be rebuilt every so often.

00:45:16.570 --> 00:45:22.080
It's a per volume database,
which was a problem for us,

00:45:22.080 --> 00:45:24.380
because we wanted something
that would follow the user

00:45:24.380 --> 00:45:27.770
rather than work differently
depending on where you log on.

00:45:27.780 --> 00:45:30.060
And one machine does something
and another does something

00:45:30.060 --> 00:45:31.400
completely different.

00:45:31.400 --> 00:45:36.570
So we wanted something that had more
customization that was more per user.

00:45:36.580 --> 00:45:39.500
And also,
there were other serious limitations.

00:45:39.500 --> 00:45:43.360
It was very difficult to extend,
to add any sort of information

00:45:43.360 --> 00:45:44.940
beyond what it already knew.

00:45:44.940 --> 00:45:48.180
It was already trained,
but what it's holding.

00:45:48.180 --> 00:45:51.180
And it only knows about type and
creator and the extensions and all that.

00:45:51.180 --> 00:45:54.080
So basically,
the desktop database will continue

00:45:54.080 --> 00:45:56.740
to be used by Mac OS 9 and Classic.

00:45:56.740 --> 00:45:59.030
The Mac OS X Finder still maintains it.

00:45:59.080 --> 00:46:02.960
So if you copy an application that has--

00:46:03.430 --> 00:46:09.780
A Mac OS 9 application, for example,
between two volumes,

00:46:09.880 --> 00:46:16.630
Mac OS X Finder will do the same
thing that the Mac OS 9 Finder did,

00:46:16.630 --> 00:46:18.050
which is to update the desktop
database appropriately so

00:46:18.050 --> 00:46:18.050
that they're all synchronized.

00:46:18.050 --> 00:46:18.050
But it's only used as a fallback
when there is no other information.

00:46:19.140 --> 00:46:24.000
The preferred mechanism that we use
now is a registration mechanism,

00:46:24.000 --> 00:46:26.510
which is not that different
from the desktop database,

00:46:26.510 --> 00:46:29.330
which means that before we
know about an application,

00:46:29.370 --> 00:46:30.710
we have to run into it.

00:46:31.550 --> 00:46:38.510
There are a few well-known locations,
which is basically where we

00:46:38.580 --> 00:46:39.750
are going to recommend users
that they store their apps.

00:46:39.750 --> 00:46:39.750
And that's not going to be /bin/app.

00:46:40.280 --> 00:46:41.560
And they're not going to
have to put them there.

00:46:41.560 --> 00:46:42.930
They can really put
them anywhere they want.

00:46:43.100 --> 00:46:44.910
But there's few well-known locations.

00:46:45.010 --> 00:46:47.100
We'll go in there and we'll
look to see if there are any new

00:46:47.100 --> 00:46:49.930
applications that have been installed,
anything that has changed.

00:46:50.040 --> 00:46:51.660
And we'll use that kind of as a basis.

00:46:51.700 --> 00:46:54.120
We'll start with that
as a starting point.

00:46:54.230 --> 00:46:55.940
So it's the applications folder.

00:46:56.060 --> 00:46:59.340
And in DP4,
there are several applications folder,

00:46:59.550 --> 00:47:01.990
probably too many applications folder.

00:47:02.110 --> 00:47:05.960
We'll clean that up eventually.

00:47:05.970 --> 00:47:10.200
But we'll still look in those places
where we have those applications folder.

00:47:12.910 --> 00:47:16.630
If for some reason an application
has not been registered yet,

00:47:16.950 --> 00:47:19.720
launching it will do that,
and sometimes just looking

00:47:19.720 --> 00:47:20.840
at it will do that.

00:47:20.930 --> 00:47:26.230
The point is, even though there is this
registration step that's necessary,

00:47:26.340 --> 00:47:28.040
very often you won't even see it.

00:47:28.150 --> 00:47:30.690
Worst case,
what can happen is you double-click

00:47:30.790 --> 00:47:34.690
on the document and it needs an
application we've never seen before.

00:47:34.810 --> 00:47:37.510
We're going to ask you, you know,
I don't know about this document,

00:47:37.650 --> 00:47:39.240
where's the app for that?

00:47:39.330 --> 00:47:41.880
You're going to find the app,
and that will be it.

00:47:41.940 --> 00:47:45.640
We'll remember from now on, you know,
oh yeah, that app, okay, fine.

00:47:45.700 --> 00:47:47.580
And as a side effect,
we'll probably register all the

00:47:47.580 --> 00:47:50.280
apps that were next to it too,
because we'll figure out, hmm,

00:47:50.360 --> 00:47:52.790
maybe there are some other
interesting stuff in there.

00:47:54.420 --> 00:47:59.540
OK, when we run into an application,
we try to learn as much

00:47:59.540 --> 00:48:01.140
as possible about it.

00:48:01.210 --> 00:48:03.680
We remember where it lives.

00:48:04.080 --> 00:48:08.120
And we look inside the P list to
extract all the information in there,

00:48:08.120 --> 00:48:11.070
such as what is the
signature of the application,

00:48:11.210 --> 00:48:14.810
the bundle name, its version number,
creation date, et cetera.

00:48:14.940 --> 00:48:19.010
And we're going to use subsequently
that information to find back which

00:48:20.050 --> 00:48:22.380
application we're supposed to launch.

00:48:22.510 --> 00:48:25.880
So that, for example,
unlike-- which is another limitation

00:48:25.880 --> 00:48:28.480
of desktop database today-- it's
basically the last application

00:48:28.560 --> 00:48:30.440
that got registered that wins.

00:48:30.470 --> 00:48:34.480
And the registration in the
desktop database is non-trivial.

00:48:34.520 --> 00:48:36.790
So that means that if you have
a version of Photoshop 4 and

00:48:36.880 --> 00:48:39.520
Photoshop 5 on the same disk,
you double-click on something

00:48:39.620 --> 00:48:42.450
on the Photoshop document,
and sometimes one version will launch,

00:48:42.610 --> 00:48:44.100
sometimes another version will launch.

00:48:44.100 --> 00:48:46.390
And you never know which one.

00:48:46.890 --> 00:48:49.930
So, because we have now all
this additional information,

00:48:49.930 --> 00:48:52.800
such as the version number
and creation date and so on,

00:48:52.810 --> 00:48:57.880
that allows us to give preference to
more recent versions over older versions,

00:48:57.880 --> 00:48:58.960
for example.

00:49:03.200 --> 00:49:06.620
The application signature,
if you're a Carbon developer,

00:49:06.740 --> 00:49:09.100
you may be familiar with that already.

00:49:09.100 --> 00:49:11.100
It's a four-character code.

00:49:11.100 --> 00:49:19.090
I will remind you that there
are some invalid ones that

00:49:19.090 --> 00:49:19.090
you're not supposed to use,
which are 0, four question marks,

00:49:19.090 --> 00:49:19.090
and four spaces.

00:49:19.490 --> 00:49:22.700
If for some reason you
don't have a signature,

00:49:22.700 --> 00:49:26.600
which can happen,
maybe you're a Cocoa app who

00:49:26.600 --> 00:49:28.480
never had a signature and,
you know,

00:49:28.970 --> 00:49:32.560
Use four question marks when
you don't know what to use.

00:49:32.590 --> 00:49:36.740
We encourage you to register your
app signature and to get one.

00:49:36.770 --> 00:49:39.130
At the end of the talk, I have a

00:49:40.080 --> 00:49:41.880
URL that you can go to to do that.

00:49:41.980 --> 00:49:45.270
So if you don't have a signature,
it's really easy to get and

00:49:45.370 --> 00:49:46.840
it can be useful to have.

00:49:50.660 --> 00:49:53.140
There are two ways that
the bundle information,

00:49:53.200 --> 00:49:55.840
the binding information,
can be specified.

00:49:55.900 --> 00:49:59.390
One is the way that
it's always been done,

00:49:59.490 --> 00:50:04.100
using a BNDL resource and
all its related resources,

00:50:04.180 --> 00:50:11.440
to indicate which file
types you know about,

00:50:11.440 --> 00:50:11.590
what the icons for those file
types are supposed to be.

00:50:11.820 --> 00:50:14.540
And that's pretty much all
you can specify using a BNDL.

00:50:14.680 --> 00:50:15.580
It's rather limited.

00:50:15.760 --> 00:50:17.790
We still support that if
you're a Carbon application

00:50:17.790 --> 00:50:19.300
or a classic application.

00:50:19.340 --> 00:50:24.380
We'll find out that information,
register that, and we'll live with it.

00:50:24.440 --> 00:50:26.630
But if you do that,
that means that you have

00:50:26.630 --> 00:50:31.700
no way of telling us,
oh, by the way, those PDF files, OK,

00:50:32.210 --> 00:50:35.460
sure they can have the
signature PDF space.

00:50:35.510 --> 00:50:40.090
But I also know how to deal with
them if you find a file that has

00:50:40.150 --> 00:50:44.600
the extension .pdf that you download
from the internet or whatever.

00:50:44.700 --> 00:50:47.150
So with the BNDL resource,
you can't tell us all that.

00:50:47.410 --> 00:50:49.840
With the PList, you can.

00:50:49.910 --> 00:50:52.620
And the way you use the PList-- so again,
you have two choices,

00:50:52.620 --> 00:50:55.310
depending on how your
application is packaged-- if

00:50:55.330 --> 00:50:57.840
your package is a single file--

00:50:59.110 --> 00:51:01.900
As your application might
be today on Mac OS 9,

00:51:01.980 --> 00:51:06.600
then you just add a PL/ST resource
that contains the same content

00:51:06.770 --> 00:51:08.240
that an Info.plist would.

00:51:08.340 --> 00:51:13.710
Otherwise, you can just have the
Info.plist file in there.

00:51:15.300 --> 00:51:19.140
That's what's inside the Info.plist file.

00:51:19.170 --> 00:51:20.190
It has a number of keys.

00:51:20.190 --> 00:51:23.200
It's an XML file, as I mentioned before.

00:51:23.210 --> 00:51:25.800
The number of keys and different values.

00:51:25.870 --> 00:51:29.450
You have some things such as the name,
the identifier,

00:51:29.450 --> 00:51:37.610
which is used to unique--so that we have
a unique identifier for your application,

00:51:37.610 --> 00:51:39.830
other information, signature, version,
get info string, et cetera.

00:51:41.430 --> 00:51:45.010
And then, for each type of documents
that you know about,

00:51:45.010 --> 00:51:48.570
you specify what the type name is,
the icon file to use,

00:51:48.570 --> 00:51:51.650
what the valid extensions
for that type are.

00:51:51.770 --> 00:51:53.300
There might be more than one.

00:51:53.510 --> 00:51:56.720
Think about HTML and HTML, for example.

00:51:57.760 --> 00:52:00.210
The OS types and the role.

00:52:00.210 --> 00:52:01.800
And the role is kind of
something interesting.

00:52:01.820 --> 00:52:05.910
You can specify whether your app actually
doesn't know how to handle this type

00:52:05.910 --> 00:52:09.950
of documents but just knows about them,
can provide an icon, for example,

00:52:09.950 --> 00:52:13.220
or whether you can actually view
them or just edit them or print

00:52:13.220 --> 00:52:15.480
them or provide runtime services.

00:52:15.580 --> 00:52:19.880
So there are different--again,
those are hints that you can provide us

00:52:20.000 --> 00:52:24.800
that can help us choose which application
is best given what the user wants to do.

00:52:25.070 --> 00:52:27.700
And at this point,
I'm going to show you--

00:52:29.170 --> 00:52:37.990
What a P-List looks like.

00:52:37.990 --> 00:52:37.990
I'm going to try to do that quickly.

00:52:37.990 --> 00:52:37.990
I'm going to use a...

00:52:39.850 --> 00:52:59.190
BBEdit for that.

00:52:59.190 --> 00:52:59.190
Why not?

00:52:59.190 --> 00:52:59.190
So I'm going to go inside
the directory of my app here,

00:52:59.190 --> 00:52:59.190
so I find app, contents,
and I'm going to have to say, oh,

00:52:59.190 --> 00:52:59.190
I want any file in there.

00:52:59.190 --> 00:52:59.190
And that's my plist here.

00:52:59.190 --> 00:52:59.190
Let me make the text a little bigger.

00:53:02.330 --> 00:53:05.610
So, as you see, they don't lie,
it's an XML file.

00:53:05.780 --> 00:53:08.700
I've added some comments too,
because you can have comments in there.

00:53:08.700 --> 00:53:12.430
If you don't have to for your app,
you're free to do

00:53:12.430 --> 00:53:12.430
whatever you want there.

00:53:12.690 --> 00:53:14.690
You can have some comments and
you have the different keys.

00:53:14.730 --> 00:53:17.000
So the bundle name, for example.

00:53:17.030 --> 00:53:21.040
This one is actually an important
one because that's the key that

00:53:21.040 --> 00:53:24.660
we use to know what to put in
the top left of the menu here.

00:53:24.840 --> 00:53:29.870
So that's what we call the
short name of the application.

00:53:29.870 --> 00:53:29.870
So user visible name.

00:53:30.770 --> 00:53:34.940
The identifier, the type and creator,
and so on.

00:53:40.730 --> 00:53:41.590
And on and on and on.

00:53:41.610 --> 00:53:44.880
And so here you have the list
of all the documents that this

00:53:45.330 --> 00:53:47.400
application knows how to deal with.

00:53:47.520 --> 00:53:49.360
That's kind of what it looks like.

00:53:49.490 --> 00:53:56.020
And then there's a little bit more that
I'm going to talk about in a minute.

00:54:00.130 --> 00:54:05.460
I have a few more slides to go through,
and I'd like to have some time for Q&A,

00:54:05.460 --> 00:54:08.000
so I'm going to go a little faster.

00:54:08.190 --> 00:54:12.190
Fasten your seat belts.

00:54:12.190 --> 00:54:12.190
All right.

00:54:16.940 --> 00:54:23.680
So here, very quickly,
a few examples about how it would work.

00:54:23.680 --> 00:54:27.700
Let's say that you have a document
created by a Carbon and Classic app,

00:54:27.700 --> 00:54:32.850
type in creator, and the user did not
do any customization.

00:54:32.860 --> 00:54:35.010
Just a quick word about that.

00:54:35.160 --> 00:54:38.860
It will be possible for a
user to either globally say,

00:54:38.860 --> 00:54:43.440
I want all my HTML files to
always open with Dreamweaver,

00:54:43.440 --> 00:54:46.400
no matter who they were created with.

00:54:46.400 --> 00:54:47.400
That will be an option.

00:54:47.400 --> 00:54:50.410
That's not in DP4 yet,
but we'll have that by the time we ship,

00:54:50.410 --> 00:54:51.500
hopefully.

00:54:51.520 --> 00:54:54.020
So that's one way that a
user can override something.

00:54:54.020 --> 00:54:56.480
And you can also do that
on a file by file basis,

00:54:56.480 --> 00:54:59.760
where you could say, this file,
I created it in Dreamweaver,

00:54:59.760 --> 00:55:03.480
but from now on,
I want it to open in Explorer.

00:55:03.480 --> 00:55:05.880
And you can do that without
using ResetIt and changing the

00:55:05.890 --> 00:55:08.350
creator and all that stuff.

00:55:08.710 --> 00:55:11.450
So, if there is none of that,
no user customization,

00:55:11.560 --> 00:55:14.820
you double-click on it,
we'll look for the most recent

00:55:14.820 --> 00:55:18.190
application with a given creator,
and we'll use that.

00:55:18.370 --> 00:55:20.630
It's exactly the behavior that
you would have today in Mac OS 9.

00:55:20.690 --> 00:55:24.340
That's kind of like the vanilla case.

00:55:24.340 --> 00:55:24.340
Very simple.

00:55:25.460 --> 00:55:29.800
If you download a file from the internet,
and this file has no type in creator,

00:55:29.840 --> 00:55:34.700
and let's say it ends in .pdf, and again,
it knows special user settings,

00:55:34.780 --> 00:55:39.050
we will look,
see which applications know-- well,

00:55:39.050 --> 00:55:43.190
first we'll find out .pdf,
what type is that.

00:55:43.190 --> 00:55:46.900
We'll find out it's
Acrobat PDF documents.

00:55:46.950 --> 00:55:51.060
And then again,
we'll use the most recent app that knows

00:55:51.060 --> 00:55:51.060
how to deal with those type of documents.

00:55:52.250 --> 00:55:55.980
Now, here's a case where the user
has specified an override.

00:55:56.130 --> 00:55:58.520
They said that there
is no type in creator,

00:55:58.520 --> 00:56:01.270
the extension is .html,
but the user has said,

00:56:01.360 --> 00:56:04.470
I want all my HTML files to
open with Internet Explorer,

00:56:04.640 --> 00:56:08.840
in general, except for this one that
should open with Dreamweaver.

00:56:08.970 --> 00:56:10.160
Follow me there?

00:56:10.300 --> 00:56:13.700
So it's kind of like you
have several levels of

00:56:13.910 --> 00:56:23.440
OverEye that the user can provide is
definitely more for advanced users,

00:56:23.490 --> 00:56:25.830
but it's an important feature
for some of our customers.

00:56:25.830 --> 00:56:25.830
And in that case,
when you double-click on it,

00:56:25.830 --> 00:56:25.830
Dreamweaver will open it.

00:56:25.830 --> 00:56:25.830
Pretty simple.

00:56:26.820 --> 00:56:30.600
A few words about installation.

00:56:30.640 --> 00:56:33.150
Now that we have this box
with all the stuff in it,

00:56:33.270 --> 00:56:35.040
well, how do you put stuff in it?

00:56:35.180 --> 00:56:37.030
You have to open the box?

00:56:37.140 --> 00:56:39.000
Not necessarily.

00:56:39.000 --> 00:56:44.170
In the P-List,
there are a few additional keys that

00:56:44.170 --> 00:56:44.170
you can provide that can be very useful.

00:56:44.750 --> 00:56:48.570
Those keys can provide us information
about what items can be installed

00:56:48.700 --> 00:56:53.320
optionally in your application,
where those items are supposed to

00:56:53.320 --> 00:56:57.810
be installed in your application,
and where we can find them, too.

00:56:58.810 --> 00:57:02.230
So, for example,
you can specify a source for where

00:57:02.460 --> 00:57:06.170
those files are supposed to come from,
and a list of those files.

00:57:06.260 --> 00:57:08.680
And for each of those files,

00:57:08.780 --> 00:57:11.720
going to specify what
the name of the item is.

00:57:11.820 --> 00:57:14.800
You can specify a
description that's optional.

00:57:14.960 --> 00:57:19.500
You can specify where on the CD,
for example, this file is to be found,

00:57:19.500 --> 00:57:24.300
where it's supposed to be installed,
and whether the item should

00:57:24.490 --> 00:57:28.650
be just copied over or whether
an installer should be run,

00:57:28.660 --> 00:57:32.040
which is the case you say that the
action should be open and we just

00:57:32.330 --> 00:57:37.620
launch the installer for that item.

00:57:37.690 --> 00:57:39.990
Let me show you what it looks like.

00:57:45.160 --> 00:57:48.720
So if I go back to my plist,
some other information I have in

00:57:48.720 --> 00:57:50.670
there is the installation information.

00:57:50.830 --> 00:57:54.100
So that's the key I was talking about,
the bundle installer key info.

00:57:54.210 --> 00:58:00.670
Here I specify where the source
of the files I want to install is.

00:58:00.850 --> 00:58:07.750
In this case,
it's a volume that's called surfpand.

00:58:07.750 --> 00:58:07.750
That's going to be my installer CD.

00:58:08.160 --> 00:58:10.750
And then I have a list of items.

00:58:10.990 --> 00:58:13.720
Here, for example,
I have a list of color palettes

00:58:13.720 --> 00:58:16.950
in my fictitious application
that users can install.

00:58:17.360 --> 00:58:20.920
This is the path on the
CD where those items are stored.

00:58:21.010 --> 00:58:23.190
And this is where they
go inside my bundle.

00:58:23.290 --> 00:58:28.200
So no matter where the application is,
that's where they're installed.

00:58:28.420 --> 00:58:31.960
And now the specific items in
this color palette category that

00:58:32.480 --> 00:58:34.190
describes the different items.

00:58:34.280 --> 00:58:36.850
And here I've been very simple,
just given the file

00:58:36.880 --> 00:58:39.200
name for all the items.

00:58:39.200 --> 00:58:42.200
You could also specify
a description and so on.

00:58:42.200 --> 00:58:45.120
And optionally,
some other keys such as whether the

00:58:45.190 --> 00:58:47.600
item should just be copied over,
opened,

00:58:47.600 --> 00:58:50.200
that's what I was talking about earlier.

00:58:50.200 --> 00:58:53.250
If you want, you can make it very simple,
which is what I did here,

00:58:53.250 --> 00:58:56.110
and just specify the minimum,
which is just the file name.

00:58:57.010 --> 00:58:58.700
Here I have the same thing
for another category,

00:58:58.700 --> 00:59:00.590
which is plugins.

00:59:00.650 --> 00:59:03.490
Exactly the same kind
of information there.

00:59:04.360 --> 00:59:08.400
So once you have all that,
let me show you what you can do with it.

00:59:08.400 --> 00:59:12.240
I'm going to quit Mac Draw.

00:59:12.310 --> 00:59:16.010
And let's see.

00:59:18.700 --> 00:59:23.900
[Transcript missing]

00:59:24.650 --> 00:59:27.260
So I earlier installed that,
and all it means is

00:59:27.350 --> 00:59:28.840
I just dragged it over.

00:59:28.890 --> 00:59:31.240
Really not that complicated.

00:59:31.310 --> 00:59:35.180
I'm going to go back to the application
files panel that I showed you earlier.

00:59:36.440 --> 00:59:39.150
And in this pop-up are
different categories of things.

00:59:39.260 --> 00:59:42.050
One of them is a list of localizations.

00:59:42.150 --> 00:59:45.740
So, for example, the user could decide
to install just English,

00:59:45.740 --> 00:59:48.870
if that's what they want,
or just one localization.

00:59:48.990 --> 00:59:53.020
And if there are others
that are available,

00:59:53.120 --> 00:59:57.090
at a later time they can just click
the install button to add them to

00:59:57.090 --> 00:59:57.090
their application or to remove them
if they don't want them anymore.

00:59:58.220 --> 01:00:02.370
So that's a default category
that's always there.

01:00:02.370 --> 01:00:04.500
And those are the two
others that I've added,

01:00:04.500 --> 01:00:07.880
that I've shown you in the plist:
the color palettes and the plugins.

01:00:08.850 --> 01:00:10.640
Those are the files that
I specified in my P-list,

01:00:10.730 --> 01:00:12.130
and that's what gets displayed here.

01:00:12.400 --> 01:00:16.050
And you see here on the status column,
it tells you whether the item

01:00:16.050 --> 01:00:19.070
is already installed or not.

01:00:19.180 --> 01:00:23.350
If it's not installed,
you can just select it.

01:00:23.350 --> 01:00:23.350
I have

01:00:24.190 --> 01:00:28.630
The CD in the computer,
which is right there.

01:00:28.680 --> 01:00:30.870
Let me go back to my app.

01:00:32.220 --> 01:00:36.890
And if I just click
here and click install,

01:00:36.920 --> 01:00:38.140
it's going to look on the CD.

01:00:38.200 --> 01:00:39.930
It has copied it.

01:00:39.930 --> 01:00:42.660
It was fast because it's a small file.

01:00:42.660 --> 01:00:46.460
And voila.

01:00:47.950 --> 01:00:50.900
The same way you can remove something
if you don't want it there anymore.

01:00:50.950 --> 01:00:53.780
So, same thing with plugins.

01:00:53.800 --> 01:00:57.590
So that gives the user some very easy
way to do some very limited installation.

01:00:57.690 --> 01:00:59.640
That doesn't mean that you
don't need an installer anymore.

01:00:59.640 --> 01:01:01.140
You might still want one.

01:01:01.500 --> 01:01:06.750
But at least for some very simple things,
it allows the user to do some

01:01:06.770 --> 01:01:11.750
installation without having to
worry about messing up something

01:01:11.980 --> 01:01:17.370
because they get access to the
content of the directory directly.

01:01:20.260 --> 01:01:23.530
So, a few things for you to do.

01:01:23.600 --> 01:01:27.390
Define a type, but also think about
extension for your documents.

01:01:27.450 --> 01:01:29.840
Again,
we want to play nice with all the file

01:01:29.840 --> 01:01:32.290
system and operating systems out there.

01:01:34.130 --> 01:01:38.140
You should consider having a unique
signature for your application.

01:01:38.180 --> 01:01:38.860
I'm sorry.

01:01:38.890 --> 01:01:42.300
Well, that's true for your application,
but also for your document format.

01:01:42.370 --> 01:01:45.790
If it's an existing document format,
you may not have this option.

01:01:45.870 --> 01:01:48.880
But if it's a new one,
really think about it.

01:01:49.470 --> 01:01:50.790
Register a signature for your app.

01:01:50.800 --> 01:01:52.050
That's the URL I was talking about.

01:01:52.120 --> 01:01:54.610
You can go there to register
a signature and make sure it

01:01:54.610 --> 01:01:56.300
doesn't conflict with someone else.

01:01:56.300 --> 01:02:00.290
And finally,
really seriously consider using a plist,

01:02:00.420 --> 01:02:04.230
either as a single file or even better,
as an application package.

01:02:04.320 --> 01:02:08.250
I hope I've showed you the advantages
that we can have to end it,

01:02:08.400 --> 01:02:11.300
you know, if we all work together on
improving the user experience,

01:02:11.300 --> 01:02:15.090
if you use application packages
and Info.plist to tell us

01:02:15.170 --> 01:02:17.300
more about your application.

01:02:17.300 --> 01:02:18.290
Basically, that's what it's all about.

01:02:21.630 --> 01:02:24.940
If you are still thirsty
for more information,

01:02:25.010 --> 01:02:32.820
here are a few resources:
Tech Note 1118 describes

01:02:32.820 --> 01:02:32.820
the Mac OS 9 packages,
which are called bundles now.

01:02:33.320 --> 01:02:35.300
That's the URL where you can find it.

01:02:35.520 --> 01:02:40.010
And on the DP4 CD at this path,
there's a system overview that

01:02:40.010 --> 01:02:42.700
goes into what I've talked about,
and you can go back to see

01:02:42.700 --> 01:02:44.070
what the keys are and so on.

01:02:44.180 --> 01:02:46.200
So it goes into more detail.

01:02:46.200 --> 01:02:48.940
But that's, again, on your DP4 CD.

01:02:49.950 --> 01:02:53.080
And at this point,
I'd like to ask-- I'm basically done

01:02:53.190 --> 01:02:54.980
with what I had to tell you today.

01:02:55.020 --> 01:02:57.130
Thank you for your attention.