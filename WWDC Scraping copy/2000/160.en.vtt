WEBVTT

00:00:09.490 --> 00:00:14.400
I actually have the privilege
of introducing one of the more

00:00:14.400 --> 00:00:19.830
emotional and energetic sessions of
the Developers Conference this year.

00:00:20.710 --> 00:00:25.480
And actually that makes a lot of sense
because it's the energies of developers

00:00:25.480 --> 00:00:29.240
like yourselves that actually made
what is the internet actually happen.

00:00:29.240 --> 00:00:33.200
This session is actually
going to go through and talk

00:00:33.200 --> 00:00:35.660
a bit about Mac OS networking.

00:00:35.660 --> 00:00:39.400
This is networking in
Mac OS 9 and Mac OS X.

00:00:39.400 --> 00:00:43.460
So with that,
I'd like to introduce Justin Walker,

00:00:43.460 --> 00:00:47.510
who is the manager of the
Mac OS X networking team.

00:00:56.680 --> 00:00:59.460
Thank you.

00:00:59.490 --> 00:01:01.860
I've never been associated
with high energy,

00:01:01.860 --> 00:01:05.040
so I'm not sure what Tom meant by that.

00:01:05.070 --> 00:01:07.280
Anyway,

00:01:07.350 --> 00:01:08.740
So let's start.

00:01:08.740 --> 00:01:12.610
What we're going to do
today is talk about...

00:01:14.410 --> 00:01:20.420
Networking in our two systems,
Mac OS X is what I'll cover,

00:01:20.420 --> 00:01:24.580
and then we'll have Lefty come up and
give you his trademarked walkthrough of

00:01:24.580 --> 00:01:27.200
the current state of Mac OS 9 networking.

00:01:28.730 --> 00:01:33.260
So to begin with,
we'll set the stage by looking

00:01:33.260 --> 00:01:39.450
at a diagram that shows you
where we're going to be focusing.

00:01:39.460 --> 00:01:43.340
This is a diagram of Mac OS X,
which you've probably seen

00:01:43.340 --> 00:01:45.360
a couple of times before.

00:01:45.360 --> 00:01:49.290
And the important part for
us is the networking area,

00:01:49.330 --> 00:01:51.980
which is in the kernel of Mac OS X.

00:01:55.620 --> 00:01:59.100
An important point to note,
which we've emphasized before

00:01:59.100 --> 00:02:04.310
and will continue to emphasize,
is that the kernel and the

00:02:04.310 --> 00:02:07.590
Core OS of Mac OS X is Darwin.

00:02:07.600 --> 00:02:13.530
And Darwin is a public source
operating system that we want

00:02:13.530 --> 00:02:16.640
developer involvement in.

00:02:18.220 --> 00:02:20.180
I'll do my best.

00:02:20.180 --> 00:02:23.220
Maybe we'll get somebody
to crank up the volume.

00:02:24.990 --> 00:02:30.320
Anyway,
the Darwin OS is a publicly available OS,

00:02:30.320 --> 00:02:35.350
and we've got a website set up for it,
which you will have heard about if

00:02:35.350 --> 00:02:37.380
you were here on Monday afternoon.

00:02:40.720 --> 00:02:46.350
In networking, just to review, we have...

00:02:46.980 --> 00:02:51.140
Network stack that's based on BSD,
and in particular,

00:02:51.140 --> 00:02:54.890
it's been upgraded within
the last year to a relatively

00:02:54.890 --> 00:02:56.740
recent version of FreeBSD.

00:02:56.740 --> 00:03:02.720
And we're providing full multi-homing
and routing capabilities for

00:03:02.720 --> 00:03:05.700
both AppleTalk and for IPv4.

00:03:05.700 --> 00:03:10.760
And as part of the upgrade
to the FreeBSD code,

00:03:10.870 --> 00:03:16.780
we imported mechanisms to
support firewall and NAT.

00:03:17.200 --> 00:03:33.900
[Transcript missing]

00:03:35.960 --> 00:03:40.060
I want to go over what we've done in
the past year and then talk a little

00:03:40.060 --> 00:03:46.010
bit about what's coming up beyond DP4.

00:03:46.110 --> 00:03:50.120
Among other things,
we've introduced kernel extensions,

00:03:50.240 --> 00:03:54.550
PPP support, the new stack,
and some capabilities that

00:03:54.550 --> 00:03:55.920
I've already mentioned.

00:03:55.980 --> 00:03:59.970
And coming up,
we'll talk a little bit about IPv6,

00:03:59.970 --> 00:04:03.020
IPsec,
and something we're calling mobility

00:04:03.020 --> 00:04:05.400
for want of a better term right now.

00:04:06.180 --> 00:04:13.810
So we've shipped DP1 through DP3,
which was the release that

00:04:13.810 --> 00:04:18.620
contained the new networking stacks.

00:04:18.680 --> 00:04:24.950
And these products included improved
Carbon OT support focused on

00:04:25.260 --> 00:04:27.830
performance and some new features.

00:04:28.320 --> 00:04:31.170
In February,
we shipped a kernel development kit,

00:04:31.340 --> 00:04:34.510
which included support for
network kernel extensions and

00:04:35.270 --> 00:04:37.540
documentation for developing them.

00:04:40.220 --> 00:04:44.000
In DP4, which you've now got a copy of,
we have a number of

00:04:44.000 --> 00:04:45.780
improvements I want to discuss.

00:04:45.780 --> 00:04:51.860
Shared addresses for IP between the
classic environment and Mac OS X.

00:04:51.860 --> 00:04:57.040
Some more improvements in OT in Carbon.

00:04:57.040 --> 00:05:00.890
And a little bird told
us we had to have PPP,

00:05:00.890 --> 00:05:02.940
so that's in there.

00:05:02.940 --> 00:05:07.200
We've got full DHCP support
both in client and server,

00:05:07.200 --> 00:05:09.840
including ad hoc networking.

00:05:09.840 --> 00:05:13.490
And we've been continuing to
make progress on a socketization

00:05:13.490 --> 00:05:15.040
of the AppleTalk code.

00:05:18.060 --> 00:05:24.320
NKEs are fully supported in DP4,
and actually they're a significant

00:05:24.320 --> 00:05:27.190
part of the operation of DP4 today.

00:05:27.190 --> 00:05:33.040
Our support for shared IP with
Classic is done with NKE,

00:05:33.390 --> 00:05:37.730
and PPP is also implemented with NKEs.

00:05:37.740 --> 00:05:45.000
The development mechanisms in DP4
for kernel extensions supersede

00:05:45.060 --> 00:05:50.620
the KDK in a number of areas,
so the header files and documentation

00:05:50.620 --> 00:05:53.510
have been upgraded to reflect that.

00:05:54.090 --> 00:05:59.810
And coming up in the future,
we want to improve support in this area.

00:06:00.030 --> 00:06:03.440
Particularly, we want to look at support
for new device families,

00:06:03.580 --> 00:06:09.410
for example, for Token Ring,
and improve the way we handle

00:06:09.420 --> 00:06:12.150
Socket and Datalink MKEs.

00:06:12.230 --> 00:06:18.770
The bottom line here is feedback from
you as developers is an important aspect

00:06:18.770 --> 00:06:22.150
of how we plan and schedule our work.

00:06:24.600 --> 00:06:28.590
For PPP, we're supporting serial
connections in this release,

00:06:28.760 --> 00:06:34.700
specifically the internal
and external modems.

00:06:34.700 --> 00:06:36.130
We use chat scripts.

00:06:36.150 --> 00:06:44.240
Those of you familiar with BSD and
Linux style PPP will know what those are.

00:06:44.320 --> 00:06:49.360
They're, I guess, a poor man's CCL.

00:06:49.780 --> 00:06:57.610
Dean Reese will be talking about modem
family support and the networking device

00:06:57.880 --> 00:06:59.500
session that comes up Friday morning.

00:06:59.500 --> 00:07:02.930
And you'll want to attend
that if this is in your area.

00:07:04.400 --> 00:07:10.640
For API support,
we have a socket API that is OT-like

00:07:10.640 --> 00:07:17.460
in the sense that it directly mirrors
the OT PPP control APIs from Mac OS 9.

00:07:17.460 --> 00:07:22.620
And those APIs are implemented
in our Carbon OT stack.

00:07:25.310 --> 00:07:27.120
Configuration.

00:07:27.120 --> 00:07:33.220
The dialer app that is in the
system demos directory on DP4 is

00:07:33.760 --> 00:07:37.300
handling the UI for configuration.

00:07:37.300 --> 00:07:40.920
And in addition,
if you're a glutton for punishment,

00:07:40.920 --> 00:07:44.240
you can fill in the
traditional BSD flat files.

00:07:44.260 --> 00:07:49.280
But the intent here is that you
either configure through the dialer

00:07:49.470 --> 00:07:54.930
API or through another mechanism that
I'll be discussing in a little bit.

00:07:55.200 --> 00:08:02.250
Also, our aim over the long haul is to
support PPP over whatever the developer

00:08:02.740 --> 00:08:05.250
and customer community require.

00:08:05.260 --> 00:08:12.040
Particular areas that we've heard
requests for Ethernet and DSL.

00:08:12.260 --> 00:08:17.260
And the support will be integrated
in with the rest of PPP.

00:08:17.260 --> 00:08:23.430
So for example,
the dialer will be able to recognize the

00:08:23.430 --> 00:08:25.200
kinds of devices that are in the system.

00:08:25.200 --> 00:08:28.690
The devices that support PPP and
the same APIs that are used for

00:08:28.700 --> 00:08:34.950
serial will work for PPP over
Ethernet and other mechanisms.

00:08:36.880 --> 00:08:40.260
Let's talk some about classic networking.

00:08:40.260 --> 00:08:45.220
By popular demand,
we've eliminated the need to provide

00:08:45.620 --> 00:08:54.910
multiple IP addresses for each platform,
one for classic and others for Mac OS X.

00:08:55.000 --> 00:09:12.300
[Transcript missing]

00:09:12.400 --> 00:09:16.580
The classic implementation will
gather all of the configuration

00:09:16.580 --> 00:09:21.860
parameters that are important for
OT from Mac OS X and install them

00:09:21.890 --> 00:09:24.760
in the configuration database.

00:09:24.760 --> 00:09:31.330
The control panel is read-only,
so you can see what your parameters are,

00:09:31.620 --> 00:09:34.220
but you cannot modify them.

00:09:35.280 --> 00:09:43.180
As I'll show in a minute,
the reliance here is on OT for routing.

00:09:43.180 --> 00:09:48.360
Any packet transmission is
handled fully by OT as far

00:09:48.360 --> 00:09:51.530
as the IP stack is concerned.

00:09:53.720 --> 00:09:58.680
In Mac OS X,
the implementation splits the flow

00:09:58.690 --> 00:10:04.640
of packets below the 10 stacks
so that they are not directly

00:10:04.640 --> 00:10:06.630
involved in packet traffic.

00:10:09.380 --> 00:10:14.540
So let me take a look at the
operation of this mechanism.

00:10:14.540 --> 00:10:19.030
We've got the classic
application with the OT stack,

00:10:19.030 --> 00:10:21.140
relatively unchanged.

00:10:21.140 --> 00:10:27.470
It opens up a special socket and
binds to a chosen network device.

00:10:27.680 --> 00:10:32.710
and installs an NKE,
which will be used to handle

00:10:32.990 --> 00:10:36.110
outbound traffic from OT.

00:10:36.570 --> 00:10:40.770
The different colors indicate
the direction of flow.

00:10:40.780 --> 00:10:46.020
So a packet going out from OT will
be written into the socket.

00:10:46.020 --> 00:10:50.360
Socket NKE will look at the packet
and determine whether it is destined

00:10:50.360 --> 00:10:55.290
for the wire or gets essentially
looped back to the TEN stack.

00:10:55.620 --> 00:11:00.740
Likewise, when network traffic comes
in through the device,

00:11:00.740 --> 00:11:05.290
it's intercepted by an NKE.

00:11:05.610 --> 00:11:09.940
Based on information within a packet,
a decision is made whether it goes

00:11:10.140 --> 00:11:15.880
upstream to the 10 stack or whether
it's handed off to the classic

00:11:15.890 --> 00:11:18.500
stack via the special socket.

00:11:19.940 --> 00:11:24.710
The same thing happens for AppleTalk,
except that in the case of AppleTalk,

00:11:24.710 --> 00:11:27.630
there's no combination of addresses.

00:11:27.630 --> 00:11:32.690
Each stack is fully
separate and independent.

00:11:33.660 --> 00:11:39.640
So let's take a look at how
TCP and UDP traffic is handled.

00:11:39.900 --> 00:11:45.160
The OT stack has been modified
to handle port sharing,

00:11:45.210 --> 00:11:50.460
which means that we treat both
stacks as using the same port

00:11:50.910 --> 00:11:55.860
address space for both TCP and UDP.

00:11:56.100 --> 00:11:59.820
When there's an OT bind call,
it comes into OT,

00:11:59.820 --> 00:12:05.860
it is directed down through the
socket and then over to the IP stack

00:12:05.910 --> 00:12:11.050
to do a bind within the 10 stack.

00:12:11.060 --> 00:12:14.840
And if that succeeds,
the success is propagated back

00:12:14.960 --> 00:12:19.160
up the stack to OT and the
normal OT operations continue.

00:12:19.160 --> 00:12:25.360
So, for example,
if you wanted to run a web server within

00:12:25.360 --> 00:12:32.170
OT and there was not one running on 10,
you can fire it up and it will take

00:12:32.170 --> 00:12:38.950
over port 80 and all traffic to
port 80 will be diverted to classic.

00:12:41.870 --> 00:12:47.410
If the port reserve fails,
then the bind will fail and

00:12:47.410 --> 00:12:50.600
the operation will not succeed.

00:12:53.480 --> 00:12:57.870
Moving to Carbon,
we've done a lot of work on performance

00:12:57.870 --> 00:13:04.700
and we're now at a position where when
we run the same tests on Carbon on 10

00:13:04.700 --> 00:13:10.000
and on Mac OS 9 on the same platform,
we get similar performance.

00:13:10.000 --> 00:13:13.450
As far as we can measure, it's on a par.

00:13:15.330 --> 00:13:26.330
The support for control APIs is there
based on the OT PPP APIs from Mac OS 9.

00:13:26.480 --> 00:13:32.800
One point that we want to make for
developers using OT in Carbon is that

00:13:32.800 --> 00:13:40.150
you can't make assumptions about thread
behavior the way you could in Mac OS 9.

00:13:40.260 --> 00:13:46.900
You have to use atomic operations and
make sure you're using the proper enter,

00:13:46.900 --> 00:13:49.730
leave notification.

00:13:51.100 --> 00:13:57.700
[Transcript missing]

00:13:57.980 --> 00:14:04.440
OT on 9 uses cooperative threading,
cooperative task operations,

00:14:04.440 --> 00:14:10.690
whereas on Mac OS X,
threads are preemptive.

00:14:13.490 --> 00:14:17.960
In AppleTalk,
we've updated Carbon and OT to

00:14:17.960 --> 00:14:21.610
handle a number of new mechanisms.

00:14:21.700 --> 00:14:27.320
In Server Provider APIs, we support ZIP,
we support DDP endpoints,

00:14:27.400 --> 00:14:31.760
and we support the NBP Mapper APIs.

00:14:32.220 --> 00:14:37.850
Apple has decided that Apple Talk is
a legacy protocol and we're not

00:14:37.960 --> 00:14:39.910
going to put any more effort into it.

00:14:39.960 --> 00:14:46.620
So in particular,
that means no PAP or ATP support.

00:14:46.990 --> 00:14:49.400
And as always, we listen.

00:14:49.560 --> 00:14:54.160
So if you have concerns about this,
you need to talk to

00:14:54.160 --> 00:14:59.500
Developer Relations and Marketing so
they can give us the proper direction.

00:15:01.650 --> 00:15:05.140
Finally, we've fixed a bunch of
bugs and it's very stable.

00:15:05.140 --> 00:15:11.700
If you saw the demos of
Internet Explorer using Carbon,

00:15:11.700 --> 00:15:16.410
that was all done over the Carbon OT.

00:15:17.710 --> 00:15:21.820
We've got DHCP support in DP4.

00:15:21.820 --> 00:15:26.240
It's full client and server,
so you can act as either.

00:15:26.240 --> 00:15:32.180
It's RFC compliant with all of
the musts of 2131 implemented

00:15:32.180 --> 00:15:34.530
and most of the shoulds.

00:15:34.540 --> 00:15:39.720
In addition,
the DHCP engine will handle ad

00:15:39.780 --> 00:15:43.620
hoc or zero-conf networking.

00:15:44.380 --> 00:15:48.980
If the DHCP server you're trying
to contact doesn't respond,

00:15:48.980 --> 00:15:55.670
then we will auto-configure an
address for you in the range

00:15:55.670 --> 00:15:58.500
that's been dictated by the ITF.

00:15:58.500 --> 00:16:06.500
And the DHCP engine will continue
to probe for DHCP servers.

00:16:06.500 --> 00:16:09.700
And in the case that it
eventually finds one,

00:16:09.700 --> 00:16:14.360
that auto-configured
address will remain in you.

00:16:14.380 --> 00:16:19.160
So existing connections and existing
programs will continue to run,

00:16:19.160 --> 00:16:25.700
but the system can now function
based on its DHCP address as well.

00:16:27.090 --> 00:16:33.540
In addition, we'll be looking at more
integration with the zero-conf

00:16:33.540 --> 00:16:35.640
work that's going on in the IETF.

00:16:35.670 --> 00:16:41.360
And I think Lefty will have some more
to say about dynamic DNS support and

00:16:41.360 --> 00:16:43.230
the direction that we're heading there.

00:16:47.510 --> 00:16:53.850
Beyond DP4, we're looking at something
we're calling mobility,

00:16:54.130 --> 00:16:58.490
just for having a simple
phrase to capture it.

00:16:58.580 --> 00:17:03.660
What we're looking at is mechanisms
that we can put in place to simplify

00:17:03.660 --> 00:17:06.790
configuration change and management.

00:17:06.800 --> 00:17:11.120
We want to be able to change
the address without a reboot.

00:17:11.720 --> 00:17:15.470
We want to be able to
put the system to sleep,

00:17:15.910 --> 00:17:20.600
wake it up, have it deal with changing
networking environments around it.

00:17:20.600 --> 00:17:24.620
And with net configuration
change in general,

00:17:24.620 --> 00:17:30.560
as might be forced by, say,
a user running a configuration panel.

00:17:32.050 --> 00:17:38.250
We're bringing in native support
for the Mac Network Setup APIs.

00:17:38.250 --> 00:17:39.860
I'll talk a little bit
more about that later.

00:17:39.860 --> 00:17:44.830
And we're implementing IPv6 and IPsec.

00:17:44.890 --> 00:17:49.200
And we've got two sessions tomorrow
to discuss that in more detail.

00:17:51.380 --> 00:17:55.430
So let's look at what
this mobility stuff is.

00:17:55.440 --> 00:17:59.070
We want to be able to live
in a dynamic environment.

00:17:59.070 --> 00:18:04.340
Things like the
Energy Star requirements from EPA,

00:18:04.380 --> 00:18:09.380
power books,
other portable mechanisms can

00:18:09.380 --> 00:18:12.480
move around or go to sleep,
wake up,

00:18:12.950 --> 00:18:15.980
and find the environment changed.

00:18:15.980 --> 00:18:21.080
We want to provide the ability to
make those transitions smooth and

00:18:21.080 --> 00:18:26.490
adapt automatically to the new
environment as it's found by the system.

00:18:26.780 --> 00:18:33.860
So let's look at a really colorful
diagram starting from the bottom

00:18:34.200 --> 00:20:10.100
[Transcript missing]

00:20:10.260 --> 00:20:17.340
This allows us to have a common view
of configuration information and to

00:20:17.340 --> 00:20:22.860
interlock access to that information
so that multiple applications could be

00:20:22.860 --> 00:20:29.350
modifying this information or watching
for modification at the same time.

00:20:30.020 --> 00:20:32.700
Another component,
which I indicated earlier,

00:20:32.700 --> 00:20:34.380
was kernel event delivery.

00:20:34.380 --> 00:20:38.790
These are events that will come
up from network devices and

00:20:38.790 --> 00:20:41.440
network stacks as things change.

00:20:43.810 --> 00:20:48.160
And finally, that central engine is
the configuration daemon.

00:20:48.360 --> 00:20:53.640
It's a daemon that runs as
long as the system is up.

00:20:53.700 --> 00:21:00.940
We're building a plug-in architecture
so we can extend it dynamically.

00:21:01.070 --> 00:21:05.840
It detects changes from
devices by waiting for events.

00:21:05.810 --> 00:21:12.640
It can detect changes based on action
from applications like the control panel.

00:21:12.640 --> 00:21:18.080
And system components like PPP can
notify it when something changes.

00:21:18.080 --> 00:21:21.770
For example,
a link comes up or a link goes down.

00:21:21.780 --> 00:21:25.940
And pieces of data that are
kept and affected by these

00:21:25.940 --> 00:21:33.110
events include default routes,
IP addresses, DNS information, and so on.

00:21:34.580 --> 00:21:39.660
We have APIs that allow an application
to register to get notifications

00:21:39.660 --> 00:21:41.260
when certain kinds of events occur.

00:21:41.260 --> 00:21:49.030
And we have APIs that allow the
applications that modify this

00:21:49.040 --> 00:21:55.260
data to notify the rest of the
system when a change has been made.

00:21:57.530 --> 00:22:01.770
So to go back just briefly to
put it into a picture again,

00:22:01.860 --> 00:22:07.760
events come up from below,
are cached in the ConfigDemons cache,

00:22:07.800 --> 00:22:12.390
and trigger notifications that
can go to interested applications.

00:22:12.400 --> 00:22:16.270
And we have a mechanism with the
Network Setup APIs to let control

00:22:16.270 --> 00:22:21.160
panels and similar applications
modify and display current

00:22:21.160 --> 00:22:24.390
configuration information.

00:22:26.670 --> 00:22:30.600
In the future,
we're going to work towards

00:22:30.600 --> 00:22:34.580
a more integrated system of
configuration management.

00:22:34.580 --> 00:22:39.580
The aim is to get seamless
changes supported.

00:22:39.580 --> 00:22:42.580
For example,
you can use airport in a live

00:22:42.580 --> 00:22:49.570
environment and track base
station change and the like.

00:22:49.810 --> 00:22:55.010
One of the interesting areas
for a developer is how to

00:22:55.010 --> 00:23:00.140
handle a change like this.

00:23:01.080 --> 00:23:02.270
There are issues of security.

00:23:02.280 --> 00:23:06.900
Do you want to believe exactly
what the information you receive

00:23:07.390 --> 00:23:10.240
from the network tells you?

00:23:10.410 --> 00:23:13.410
Or do you have to provide
a filter of some kind and

00:23:13.410 --> 00:23:15.620
prompt a user for information?

00:23:15.620 --> 00:23:17.870
It's a complicated problem.

00:23:18.000 --> 00:23:23.130
I have no idea how complex it is,
but it doesn't seem to lend

00:23:23.200 --> 00:23:25.950
itself to an easy solution.

00:23:26.500 --> 00:23:29.620
Another issue we're going
to look at moving forward is

00:23:29.620 --> 00:23:36.510
the IETF's mobile IP support,
both for IPv4 and for IPv6.

00:23:36.610 --> 00:23:39.700
And again, I'm soliciting input.

00:23:39.820 --> 00:23:44.020
Talk to me, talk to the rest of our team,
talk to the developer

00:23:44.020 --> 00:23:46.160
relations guys and marketing.

00:23:46.240 --> 00:23:50.710
Give us your input as to what you
think is needed in this arena.

00:23:54.030 --> 00:24:00.260
IP is kind of the ubiquitous
protocol these days,

00:24:00.260 --> 00:24:04.850
and there are good reasons
to think about changing.

00:24:04.860 --> 00:24:10.720
The IETF has a new generation of IP,
and it's called IPv6.

00:24:10.720 --> 00:24:15.980
Support in Mac OS X is on the way,
and we'll be talking

00:24:15.980 --> 00:24:21.100
more about that tomorrow,
both for IPSec and for IPv6.

00:24:22.970 --> 00:24:27.170
Tomorrow, we'll tell you more about how
to get access to a package which

00:24:27.170 --> 00:24:31.420
includes both protocol sets,
tools, and libraries, and headers,

00:24:31.420 --> 00:24:35.790
as well as a kernel that supports it,
so that you can begin to

00:24:35.790 --> 00:24:39.780
experiment for those of you
who want to get down and dirty.

00:24:39.780 --> 00:24:43.460
The implementation we
use comes from Kame.

00:24:43.460 --> 00:24:49.830
It's a project based on a consortium
of Japanese manufacturers who are

00:24:49.830 --> 00:24:54.500
very interested in propagating IPv6.

00:24:54.700 --> 00:25:00.450
They've done a whole lot
of work on these protocols,

00:25:00.450 --> 00:25:03.970
and they're currently the
de facto implementation for

00:25:03.970 --> 00:25:06.860
all of the BSD projects,
and we're adapting it

00:25:06.970 --> 00:25:08.280
to use for Mac OS X.

00:25:08.280 --> 00:25:15.320
Check the developer website under
Mac OS X for details tomorrow.

00:25:18.140 --> 00:25:21.210
And now with that,
I'll hand it over to Lefty

00:25:21.320 --> 00:25:24.170
to talk about Mac OS 9.

00:25:27.800 --> 00:25:28.460
Thanks, Justin.

00:25:28.460 --> 00:25:31.010
Hi, everybody.

00:25:31.020 --> 00:25:32.460
Has it been a year already?

00:25:32.460 --> 00:25:33.920
Good grief.

00:25:35.200 --> 00:25:37.600
So, I'm David Schlesinger.

00:25:37.600 --> 00:25:42.520
I'm the manager of the Mac OS 9
networking team and I'm going to talk

00:25:42.520 --> 00:25:46.100
a little about what we did last year.

00:25:46.100 --> 00:25:49.320
We're going to do the thing I guess
that Justin was referring to when he

00:25:49.320 --> 00:25:50.980
talked about trademarking the talk.

00:25:50.980 --> 00:25:51.600
We do it every year.

00:25:51.600 --> 00:25:55.060
We go through the list of what
developers have requested and

00:25:55.060 --> 00:25:57.480
where we stand on those requests.

00:25:57.480 --> 00:25:59.520
And then I'm going to give you some
idea of some of the things that

00:25:59.520 --> 00:26:02.230
we're looking at working on now.

00:26:03.090 --> 00:26:05.030
So, what did we do last year?

00:26:05.040 --> 00:26:09.180
We came out with two sort of
general releases of OpenTransport.

00:26:09.180 --> 00:26:13.810
We had an OpenTransport 2.5.2,
and we had various flavors

00:26:13.810 --> 00:26:15.980
of OpenTransport 2.6.

00:26:15.990 --> 00:26:19.610
And if you've got Software Update active,
you've probably gotten

00:26:19.610 --> 00:26:21.300
each and every one of them.

00:26:21.400 --> 00:26:25.490
So, 2.5.2 shipped with Mac OS 9.

00:26:25.490 --> 00:26:30.230
And one of the big changes that
we made there was that finally,

00:26:30.230 --> 00:26:35.380
after having been out for several years,
we upgraded our core streams

00:26:35.380 --> 00:26:37.820
and TCP implementations.

00:26:38.510 --> 00:26:43.720
The streams and TCP that had been
in Open Transport prior to OS 9

00:26:43.720 --> 00:26:49.960
actually dated all the way back to the
original version of Open Transport.

00:26:50.080 --> 00:26:53.070
And it had become more and
more difficult to maintain,

00:26:53.150 --> 00:26:56.440
and we were missing out on a lot
of features that the folks over

00:26:56.500 --> 00:26:58.390
at Mentat had been putting in.

00:26:58.400 --> 00:27:00.990
And basically,
we took all of the old stuff

00:27:01.040 --> 00:27:02.940
out and put all new stuff in.

00:27:02.940 --> 00:27:05.740
And that was a very major change.

00:27:05.740 --> 00:27:08.460
It went a lot more smoothly
than we thought it might.

00:27:08.460 --> 00:27:10.420
So, we were pretty happy with that.

00:27:10.420 --> 00:27:12.840
We have learned a lot about DHCP.

00:27:12.840 --> 00:27:16.200
We thought DHCP was
pretty straightforward.

00:27:16.210 --> 00:27:17.370
We were wrong.

00:27:17.370 --> 00:27:17.980
Boy.

00:27:17.980 --> 00:27:23.600
There are lots of varying
interpretations of little points in DHCP,

00:27:23.600 --> 00:27:24.650
it seems.

00:27:24.700 --> 00:27:27.920
There are lots of corner cases
that we hadn't quite thought of.

00:27:28.160 --> 00:27:33.810
But I think we may have
found every single one.

00:27:34.200 --> 00:27:35.590
But I'm hoping.

00:27:35.620 --> 00:27:38.050
PPC-over-IP.

00:27:38.170 --> 00:27:41.280
Now this is something that
I'm very excited about.

00:27:41.280 --> 00:27:45.960
Apple events have been
around for a while now,

00:27:45.960 --> 00:27:48.840
but they're limited to
Apple Talk Networks,

00:27:48.880 --> 00:27:53.300
which really places a real strict limit
on the context in which you can use them.

00:27:53.380 --> 00:27:59.560
What we did in OS 9 is we
expanded the PPC protocol to

00:27:59.560 --> 00:28:03.050
work over a substrate of IP.

00:28:03.540 --> 00:28:07.640
So, instead of only being limited
to doing Apple scripting,

00:28:07.640 --> 00:28:10.740
remote Apple scripting,
in the context of your

00:28:10.740 --> 00:28:14.480
Apple Talk Network,
you can now do it across the internet.

00:28:14.480 --> 00:28:18.400
You can effectively run an Apple script
or send Apple events that will

00:28:18.400 --> 00:28:21.840
affect a machine all the way across
the country or around the world.

00:28:21.840 --> 00:28:25.800
And this gives a lot of power
and a lot of flexibility,

00:28:25.800 --> 00:28:28.260
particularly to people like
systems administrators,

00:28:28.260 --> 00:28:31.680
ISPs, all kinds of applications for this.

00:28:31.680 --> 00:28:33.430
So, that's very exciting.

00:28:33.540 --> 00:28:34.160
And I think we're going to be doing
a lot more of this in addition.

00:28:34.160 --> 00:28:36.840
More DHCP fixes.

00:28:36.840 --> 00:28:41.570
We found out that DHCP...

00:28:43.100 --> 00:29:07.100
[Transcript missing]

00:29:07.220 --> 00:29:08.680
Network Setup 1.1.

00:29:08.800 --> 00:29:15.040
We introduced Network Setup
in Mac OS 8.5,

00:29:15.040 --> 00:29:16.760
and this was a planned upgrade.

00:29:16.760 --> 00:29:18.800
We had mostly bug fixes in there.

00:29:18.800 --> 00:29:22.720
We reduced open transport from
six libraries down to two,

00:29:22.720 --> 00:29:27.620
thereby freeing up valuable real
estates in your extensions folder.

00:29:29.150 --> 00:29:31.820
And over 250 bug fixes.

00:29:31.850 --> 00:29:35.000
So all kinds of things
are working better now.

00:29:35.000 --> 00:29:35.980
It's a lot more stable.

00:29:35.980 --> 00:29:38.620
We've got a lot of performance
improvements for some kind of

00:29:38.700 --> 00:29:40.140
peculiar cases we ran into.

00:29:40.140 --> 00:29:43.170
So lots of good stuff went into 2.5 too.

00:29:43.180 --> 00:29:46.730
2.6 is essentially what
we call a dot release.

00:29:46.730 --> 00:29:48.700
It's got a bunch of bug fixes.

00:29:48.710 --> 00:29:53.910
And specifically,
it shipped with Mac OS 901, 902, 903,

00:29:54.030 --> 00:29:54.910
904.

00:29:54.910 --> 00:29:57.610
And it may keep shipping for a while yet.

00:29:57.610 --> 00:29:58.950
I don't know.

00:29:59.620 --> 00:30:01.390
32 bugs fixed, all told.

00:30:01.420 --> 00:30:03.540
I sat down and counted them.

00:30:03.730 --> 00:30:05.470
And guess what?

00:30:05.470 --> 00:30:08.580
They're mostly DHCP fixes.

00:30:09.400 --> 00:30:11.340
But it's working better than ever.

00:30:11.340 --> 00:30:12.780
We're happy with that.

00:30:12.780 --> 00:30:16.200
And if you have any DHCP problems,
be sure to see me right

00:30:16.320 --> 00:30:18.020
after the presentation.

00:30:18.020 --> 00:30:22.040
Okay, so here's the trademarked part.

00:30:22.040 --> 00:30:26.550
I don't know how many of you were here
three years ago when I first did this,

00:30:26.630 --> 00:30:30.360
but this is a list that Richard Ford,
who was then our marketing guy, compiled,

00:30:30.360 --> 00:30:32.060
I guess, about four years ago.

00:30:32.910 --> 00:30:37.310
And if you've been paying attention,
you'll notice that the size of

00:30:37.310 --> 00:30:41.670
the type has probably tripled
since the first time I used it.

00:30:41.700 --> 00:30:43.760
We've got 51 items on
this list right here,

00:30:43.760 --> 00:30:46.560
and if that seems like a lot,
you weren't here three years ago.

00:30:46.560 --> 00:30:50.420
Because we had, I think, 175.

00:30:50.420 --> 00:30:55.150
So, every year,
I go through and I tell people what

00:30:55.150 --> 00:30:59.950
on this list we've been working on,
and as we get them done, I take them off,

00:30:59.950 --> 00:31:02.960
and the list gets shorter and shorter,
and the typeface gets bigger and bigger,

00:31:02.960 --> 00:31:06.910
and eventually I'm going to have, like,
one item in 48-point type.

00:31:07.070 --> 00:31:10.420
At any rate, here are the things that we
managed to do over the last year.

00:31:10.420 --> 00:31:14.150
We've got better admin utilities,
network assistant particularly,

00:31:14.160 --> 00:31:19.760
Apple Events over IP, I mentioned,
IP personal file sharing, and again,

00:31:19.970 --> 00:31:24.520
both of these things, PPC over IP,
Apple Events over IP,

00:31:24.520 --> 00:31:28.530
IP personal file sharing,
are all in line with the strategy

00:31:28.540 --> 00:31:31.580
that we've been following
over the past several years,

00:31:31.580 --> 00:31:34.070
AppleTalk was a fine idea.

00:31:34.290 --> 00:31:35.230
It was a good thing.

00:31:35.540 --> 00:31:36.750
It's out of date.

00:31:37.000 --> 00:31:40.300
Nobody's using it, really,
except in very limited contexts,

00:31:40.360 --> 00:31:43.980
and it's not where things
are going in networking,

00:31:44.050 --> 00:31:44.790
clearly.

00:31:44.920 --> 00:31:50.090
So,
in order to preserve the valuable aspects

00:31:50.100 --> 00:31:56.020
that we put into AppleTalk way back when,
and there are many of those,

00:31:56.170 --> 00:32:01.560
we have been transferring some of the
most important uses of AppleTalk files,

00:32:01.560 --> 00:32:04.440
file sharing, Apple Events,
and what have you,

00:32:04.520 --> 00:32:06.850
so that they can operate
in an internet environment,

00:32:06.970 --> 00:32:12.510
and PPC over IP and IP file sharing
are just two examples of that,

00:32:12.630 --> 00:32:17.020
but this is really a
core strategy for us.

00:32:17.160 --> 00:32:19.480
Okay, what's left?

00:32:19.640 --> 00:32:22.800
Still got a bunch of things there.

00:32:24.010 --> 00:32:26.460
We have limited engineering bandwidth,
and as I said,

00:32:26.460 --> 00:32:28.630
this list is four years old.

00:32:28.630 --> 00:32:32.050
And I thought it was like a
really good time at this point

00:32:32.350 --> 00:32:36.240
to sort of step back and say,
well, you know,

00:32:36.240 --> 00:32:38.660
here are a bunch of things,
and we haven't gotten any of

00:32:38.660 --> 00:32:39.900
these in the last four years.

00:32:39.900 --> 00:32:44.460
In my best estimate,
what are the ones that probably are

00:32:44.460 --> 00:32:47.780
not worth the effort for us right now?

00:32:47.780 --> 00:32:50.970
And this is pretty much
what I came up with.

00:32:51.630 --> 00:32:53.710
Nobody screamed.

00:32:54.050 --> 00:32:54.250
Good.

00:32:54.250 --> 00:32:57.040
Okay, great.

00:32:57.040 --> 00:33:00.300
Anyway, Apple Talk Multihoming,
Apple Talk Routing.

00:33:00.300 --> 00:33:01.520
We've had these in the past.

00:33:01.520 --> 00:33:04.200
We had a product called
Apple Internet Router once upon a time,

00:33:04.200 --> 00:33:05.620
which I actually supported.

00:33:05.620 --> 00:33:08.550
I don't see a lot of call for that.

00:33:08.570 --> 00:33:11.900
I certainly have not had anybody
ask me for ADSP optimizations

00:33:11.900 --> 00:33:13.340
in I don't know how long.

00:33:13.390 --> 00:33:16.220
ATM enhancements, same kind of thing.

00:33:16.220 --> 00:33:21.990
I don't see us doing a lot of built-in
kind of file system specific clients.

00:33:21.990 --> 00:33:25.620
I don't see a com toolbox
replacement on the horizon,

00:33:25.620 --> 00:33:26.630
I'm afraid.

00:33:26.640 --> 00:33:34.490
IPX, IPX over PPP, ISDN, multi-link PPP,
more of the same.

00:33:34.500 --> 00:33:37.130
So these are things that we
basically decided are not going

00:33:37.180 --> 00:33:39.760
to remain on our list anymore,
so I've taken the

00:33:39.760 --> 00:33:41.410
liberty of excising them.

00:33:41.410 --> 00:33:44.000
And here's what we have left,
and here's what we're

00:33:44.000 --> 00:33:45.200
working on right now.

00:33:45.510 --> 00:33:47.970
Obviously, right at the top of the list,
bug fixes.

00:33:47.970 --> 00:33:49.820
We never have enough bug fixes.

00:33:51.010 --> 00:33:52.780
Yes?

00:33:55.300 --> 00:34:01.500
[Transcript missing]

00:34:02.570 --> 00:34:04.700
I'm glad to have that feedback.

00:34:04.700 --> 00:34:09.960
Remember, this is our take on things
from where we're standing,

00:34:09.960 --> 00:34:13.520
and if something I say
doesn't make any sense,

00:34:13.590 --> 00:34:15.750
let me know it doesn't make any sense,
and I'm happy to rethink it.

00:34:15.820 --> 00:34:17.120
Bug fixes.

00:34:17.180 --> 00:34:20.960
DNSSEC is something
that we're looking at.

00:34:21.060 --> 00:34:23.620
Justin referred to dynamic
DNS a little earlier,

00:34:23.620 --> 00:34:26.570
but dynamic DNS and
DNSSEC really interlink.

00:34:26.580 --> 00:34:33.340
You don't want to be dynamically updating
names of networked entities out there,

00:34:33.340 --> 00:34:36.060
unless you've got some kind of
security associated with it.

00:34:36.130 --> 00:34:39.380
So I don't see us doing
the one without the other.

00:34:39.380 --> 00:34:42.660
IP multi-homing is something
that people have been requesting

00:34:42.660 --> 00:34:44.120
for I don't know how long.

00:34:44.160 --> 00:34:46.180
We are actively working on it right now.

00:34:46.180 --> 00:34:49.590
We have prototype implementations,
various places that are

00:34:49.590 --> 00:34:51.860
doing various things,
and we're making a lot of

00:34:51.860 --> 00:34:52.920
progress in that space.

00:34:52.920 --> 00:34:55.200
IP second, IP v6.

00:34:55.340 --> 00:34:58.290
Justin has referred to previously,
and I'm going to go into those in

00:34:58.520 --> 00:35:02.450
just a little more detail here,
but I want to save the really good stuff

00:35:02.510 --> 00:35:06.150
for tomorrow when we've got sessions
dedicated to both of those subjects.

00:35:06.160 --> 00:35:10.940
We are working on a unified
control panel for networking,

00:35:10.940 --> 00:35:14.060
so that rather than having to
deal with seven different ones,

00:35:14.060 --> 00:35:15.800
you've only got to deal with one.

00:35:15.820 --> 00:35:19.780
And we've demonstrated various
incarnations of that as time has gone on.

00:35:19.800 --> 00:35:25.320
Plug and play IP auto configuration
is sort of a long way of saying,

00:35:25.340 --> 00:35:31.460
"I'm using IP v6." And again,
tomorrow in the IP v6 session,

00:35:31.470 --> 00:35:35.630
I'm going to go into a lot of detail
about what that's all about and why

00:35:35.630 --> 00:35:37.320
it's important and why you should care.

00:35:37.340 --> 00:35:41.340
And finally, RTP, PPP compression.

00:35:41.340 --> 00:35:43.320
This isn't just RTP.

00:35:43.340 --> 00:35:49.340
It's IP, UDP, TCP,
RTP header compression for serial links,

00:35:49.340 --> 00:35:53.550
which is a real performance
enhancement for applications like

00:35:53.560 --> 00:35:55.230
streaming media and what have you.

00:35:55.350 --> 00:35:56.730
have you.

00:35:57.220 --> 00:36:00.860
So, these are the things that we're
actively engaged in these days.

00:36:00.860 --> 00:36:05.200
I wanted to break this out in
a little more readable format,

00:36:05.200 --> 00:36:10.520
but this is roughly our order
of priorities on this thing,

00:36:10.520 --> 00:36:11.720
and there's a reason for that.

00:36:11.740 --> 00:36:18.410
IP multihoming and IPsec, it turns out,
are prerequisites for doing IPv6.

00:36:18.600 --> 00:36:22.740
So, in order to get that in,
I have to get these in first.

00:36:22.840 --> 00:36:25.120
Now, these are features that have
value in their own right,

00:36:25.130 --> 00:36:29.510
but they head the list because
I can't do what I really want to

00:36:29.510 --> 00:36:32.160
do until I do those things first.

00:36:41.740 --> 00:36:45.910
I think we really ought to get
familiar with it right now.

00:36:46.070 --> 00:36:50.980
All of the proliferation of wireless
devices has created a situation

00:36:50.980 --> 00:36:55.640
where all of you folks with airport
cards are beaming all kinds of

00:36:55.640 --> 00:36:58.380
information all over the place.

00:36:58.420 --> 00:37:02.770
We had a little experiment a while
back when we first got our set of base

00:37:02.770 --> 00:37:05.490
stations and airport cards over at Apple.

00:37:05.570 --> 00:37:10.420
We sat out in the parking lot with one
to see if we could see what was going on.

00:37:10.420 --> 00:37:11.280
You bet.

00:37:11.440 --> 00:37:14.600
So,
we're very careful about using VPNs and

00:37:14.610 --> 00:37:19.330
limiting who can use which base stations,
but security over networking

00:37:19.420 --> 00:37:21.300
is very important,
and that's the point

00:37:21.370 --> 00:37:22.440
you should grasp here.

00:37:22.540 --> 00:37:27.670
People spend a lot of money on firewalls,
but once you put a wireless

00:37:27.670 --> 00:37:30.830
card in your laptop,
your firewall is not doing you

00:37:30.830 --> 00:37:32.210
a lot of good at that point.

00:37:32.260 --> 00:37:33.180
So, this is very important.

00:37:33.260 --> 00:37:35.520
We're going to talk more
about this tomorrow.

00:37:35.530 --> 00:37:38.600
Multicast DNS, this is interesting.

00:37:38.900 --> 00:41:07.100
[Transcript missing]

00:41:07.420 --> 00:41:11.920
What you have to supply as the developer
is the actual key management logic.

00:41:11.920 --> 00:41:15.010
If you want to have Ike,
then you've got to implement

00:41:15.010 --> 00:41:16.900
it on top of what we give you.

00:41:16.900 --> 00:41:21.350
You've got to deliver the
actual protocol arbitration.

00:41:21.350 --> 00:41:24.190
We deliver just the core.

00:41:24.190 --> 00:41:28.260
We're going to have more details
on that at the IPsec session,

00:41:28.400 --> 00:41:31.640
and that is 3.30 tomorrow next door.

00:41:33.520 --> 00:41:36.040
Multicast DNS I already
talked a little bit about.

00:41:36.040 --> 00:41:39.290
It's an extension of standard
DNS that's being worked on in

00:41:39.290 --> 00:41:43.170
large part by the IETF being led
by one of our engineers here,

00:41:43.170 --> 00:41:44.600
Stuart Cheshire.

00:41:44.600 --> 00:41:48.080
Again,
it's intended to support ad hoc networks.

00:41:48.080 --> 00:41:52.390
It's solving a similar
problem to dynamic DNS,

00:41:52.390 --> 00:41:54.880
but not in and of itself.

00:41:56.450 --> 00:41:59.760
Effectively,
we're putting a multicast DNS kind

00:41:59.950 --> 00:42:05.440
of micro-server into each Macintosh,
and you'll register names with this

00:42:05.500 --> 00:42:10.850
server in an analogous way to the
way that you register NBP names now.

00:42:10.860 --> 00:42:12.480
You'll do it through a mapper object.

00:42:12.480 --> 00:42:17.160
So the analogy is pretty
straightforward there.

00:42:18.980 --> 00:42:23.390
Okay, we're looking at making
Open Transport callable from MP threads.

00:42:23.550 --> 00:42:28.180
Now,
it turns out that this is one of those

00:42:28.180 --> 00:42:30.260
things that also has prerequisites.

00:42:30.260 --> 00:42:34.610
The thing that we basically needed
to do to make all of this work was

00:42:34.650 --> 00:42:39.370
get rid of Open Transport reliance
on Apple's shared library manager,

00:42:39.440 --> 00:42:43.190
which was a fine idea way
back when once upon a time,

00:42:43.200 --> 00:42:45.810
but it's been supplanted by CFM.

00:42:45.820 --> 00:42:48.820
It's essentially unsupportable.

00:42:48.820 --> 00:42:53.170
We're hoping that very few people use it,
and if you are using it right now,

00:42:53.170 --> 00:42:55.790
we hope you'll stop soon.

00:42:56.290 --> 00:43:00.600
The reason that we want to do
this is basically to lay the

00:43:00.600 --> 00:43:04.450
groundwork so that we can put,
as an alternative to

00:43:04.450 --> 00:43:07.980
the standard OT APIs,
a sockets interface on

00:43:07.980 --> 00:43:09.360
top of OpenTransport.

00:43:09.360 --> 00:43:13.770
There's no sense in my doing
that unless it's semantically

00:43:13.770 --> 00:43:19.000
accurate when compared with a Unix
machine running the same APIs.

00:43:19.340 --> 00:43:22.710
So I need to have some kind
of real robust threading in

00:43:22.710 --> 00:43:26.230
there in order to do that,
and that's what the goal

00:43:26.230 --> 00:43:28.260
of this essentially is.

00:43:30.040 --> 00:43:31.700
IPv6.

00:43:31.700 --> 00:43:32.820
Next Generation Internet.

00:43:32.920 --> 00:43:36.490
There are a lot of reasons that I'm
not going to get into in great detail

00:43:36.500 --> 00:43:40.000
today because I've got a big long
presentation on this for tomorrow.

00:43:40.060 --> 00:43:46.820
A lot of reasons why you
should be interested in IPv6.

00:43:46.820 --> 00:43:49.150
There, people talk about the address
space being exhausted.

00:43:49.220 --> 00:43:49.950
That's not true.

00:43:49.960 --> 00:43:51.180
It's not getting exhausted.

00:43:51.180 --> 00:43:55.140
It's just been badly
misallocated all along.

00:43:55.420 --> 00:44:02.060
The big problem that we face right now
is a combinatorial routing problem.

00:44:02.240 --> 00:44:04.950
Every time more nodes get
added to the Internet,

00:44:04.950 --> 00:44:09.520
that's more things that more
routers have to remember.

00:44:09.520 --> 00:44:14.680
The real problem is that IPv4
addresses carry no inherent

00:44:14.680 --> 00:44:17.190
routing information in them.

00:44:17.190 --> 00:44:22.220
The router has to remember everything
just based on the IP address.

00:44:22.240 --> 00:44:25.420
IPv6, just to give you a quick preview,
gives you the capability of

00:44:25.760 --> 00:44:28.960
constructing addresses in such
a way that they actually carry

00:44:28.960 --> 00:44:30.980
routing information in them.

00:44:30.980 --> 00:44:36.490
There are other points of IPv6 that
simplify and speed up all kinds

00:44:36.490 --> 00:44:39.740
of aspects of using the Internet.

00:44:39.740 --> 00:44:43.170
We're going to talk in detail
about that tomorrow at 5:00.

00:44:43.170 --> 00:44:46.590
I hope you'll come to that
if you've got an interest in.

00:44:46.590 --> 00:44:47.560
I hope you do.

00:44:47.560 --> 00:44:49.910
Again, async AppleTalk initialization.

00:44:49.910 --> 00:44:55.180
We've substantially reduced boot
and wait times and about time too.

00:44:56.140 --> 00:45:00.000
Okay, I want to talk very quickly about
where we're going on remote access.

00:45:00.000 --> 00:45:04.200
The main feature that we brought
out with remote access in the last

00:45:04.200 --> 00:45:08.320
year was whereas we had previously
shipped only a client version,

00:45:08.320 --> 00:45:11.300
we're now shipping full client server.

00:45:11.300 --> 00:45:15.090
This is basically the same remote access
product that went out in a box once upon

00:45:15.090 --> 00:45:17.180
a time that people paid good money for.

00:45:17.180 --> 00:45:21.660
It's now part of the regular
operating system distribution.

00:45:22.040 --> 00:45:27.560
The plans that we've got in the upcoming
year are mostly around PPP multi-homing,

00:45:27.560 --> 00:45:30.090
and that's in line with our
work on multi-homing for

00:45:30.090 --> 00:45:31.680
the rest of open transport.

00:45:31.680 --> 00:45:35.550
As I mentioned earlier,
we're working on the advanced header

00:45:35.550 --> 00:45:40.390
compression that's specified in,
what is it, RFC 2349, I guess,

00:45:40.400 --> 00:45:41.620
and elsewhere.

00:45:41.620 --> 00:45:48.330
We're working on support for the
extensible authentication protocol,

00:45:48.330 --> 00:45:52.020
which is being more widely used and
has been requested by an organization.

00:45:52.020 --> 00:45:52.670
We're working on the advanced header
compression that's specified in,

00:45:52.670 --> 00:45:53.300
what is it, RFC 2349, I guess,
and elsewhere.

00:45:53.300 --> 00:45:57.130
We are working on giving you
finer control over the framing

00:45:57.130 --> 00:46:01.420
that's applied to the byte stream
coming through remote access,

00:46:01.690 --> 00:46:05.510
which will simplify implementation
of alternative links for

00:46:05.510 --> 00:46:09.630
people who are doing things
like PPPoE and what have you.

00:46:09.660 --> 00:46:13.190
And again, we're looking at adding IPv6
support in there as well.

00:46:14.910 --> 00:46:18.040
Okay,
so time to talk about endangered species,

00:46:18.040 --> 00:46:19.220
as I do every year.

00:46:19.220 --> 00:46:23.410
There are some things
I would like to have go away.

00:46:23.440 --> 00:46:25.940
I don't think anybody much uses them.

00:46:25.940 --> 00:46:30.380
I'm here to ask you to let me know if
I'm grossly wrong about these things.

00:46:30.380 --> 00:46:35.010
I'm pretty sure that Mac IP is
not being very heavily used.

00:46:35.020 --> 00:46:37.100
We've been carrying it
around for a lot of years.

00:46:37.100 --> 00:46:42.880
It's tunneling IP through Apple Talk,
and it's just not a wonderful idea.

00:46:42.880 --> 00:46:45.760
It places all kinds of limitations
and restrictions on things.

00:46:45.760 --> 00:46:49.610
It would simplify our lives
considerably if that could just go away.

00:46:49.620 --> 00:46:52.840
Nobody's told me it can't,
but if you have a different opinion,

00:46:52.840 --> 00:46:54.620
you should definitely let us know.

00:46:54.620 --> 00:46:57.600
This is an old one you've heard before.

00:46:57.600 --> 00:47:00.000
Prefs files, they're still going away.

00:47:00.000 --> 00:47:02.840
I know that all of you
have been working very,

00:47:02.840 --> 00:47:07.400
very hard on getting onto
the network setup database,

00:47:07.400 --> 00:47:09.890
APIs,
and that's what you should be doing.

00:47:09.900 --> 00:47:14.940
I am proposing... Actually getting rid
of the prefs files this time around.

00:47:14.940 --> 00:47:18.340
And again, if somebody has a major
objection to that,

00:47:18.430 --> 00:47:19.800
they should definitely let us know.

00:47:19.800 --> 00:47:24.000
Because I don't want to cause problems,
but I do want to simplify matters.

00:47:24.000 --> 00:47:28.140
In remote access,
it's about time that we said goodbye

00:47:28.140 --> 00:47:31.160
to the Apple Remote Access Protocol.

00:47:31.160 --> 00:47:33.840
I don't see any real need... Really?

00:47:33.840 --> 00:47:36.210
I would have done it last year.

00:47:38.310 --> 00:47:41.070
Okay, well, that's for sure then.

00:47:43.780 --> 00:47:48.830
Okay, so we've got some additional
resources that relate to the various

00:47:48.830 --> 00:47:50.380
points that we've mentioned here.

00:47:50.380 --> 00:47:54.330
There's the Mac OS IPv6
and IPsec package,

00:47:54.440 --> 00:48:00.300
which you'll be able to find under the
Mac OS page on developer.apple.com.

00:48:00.970 --> 00:48:05.190
The Project Kame homepage
is at www.kame.net.

00:48:05.400 --> 00:48:09.970
The IPv6 forum is at www.ipv6.org.

00:48:10.060 --> 00:48:13.860
Mentat's homepage,
if you're interested in learning

00:48:13.860 --> 00:48:17.740
more about the core code that
goes into open transport,

00:48:17.740 --> 00:48:19.450
is at mentat.com.

00:48:19.460 --> 00:48:25.320
And the IPv6 conformance testing
information is at tahi.org.

00:48:26.760 --> 00:48:28.980
We have related sessions.

00:48:29.040 --> 00:48:31.700
We've got this one right now,
which is certainly related,

00:48:31.700 --> 00:48:33.840
but you've probably
missed most of it by now.

00:48:33.990 --> 00:48:42.160
Tomorrow, we've got IPsec in Mac OS at
3.30 in the room next door,

00:48:42.160 --> 00:48:46.060
followed immediately by IPv6 in Mac OS.

00:48:46.060 --> 00:48:48.800
And both of those, I think,
are going to be well worth attending.

00:48:48.800 --> 00:48:53.090
These are largely going to
take the form of technology

00:48:53.640 --> 00:48:56.020
introductions and overviews.

00:48:56.020 --> 00:48:59.140
So if you're not familiar with IPsec
or you're not familiar with IPv6 and

00:48:59.140 --> 00:49:01.950
you want to get more information,
these are really good sessions

00:49:02.030 --> 00:49:03.160
for you to be attending.

00:49:03.160 --> 00:49:06.360
There's going to be a lot of
interesting and informative stuff there.

00:49:06.360 --> 00:49:11.110
Also, Dean Reese is going to be
having the I/O Kit Networking

00:49:11.110 --> 00:49:16.400
Hardware Seminar at 10.30 in the
morning on Friday in this room.

00:49:16.400 --> 00:49:20.380
And finally,
I really strongly encourage everybody

00:49:20.380 --> 00:49:25.070
who has an opinion to share to
come to the NNC Feedback Forum.

00:49:25.390 --> 00:49:28.080
There used to be previous years
we had one for 9 and one for 10,

00:49:28.080 --> 00:49:30.340
but we've unified those
as well this year.

00:49:30.340 --> 00:49:34.390
So if you want to tell us what a great
job we're doing or tell us what a bad

00:49:34.390 --> 00:49:40.460
job we're doing or something in between,
come to room J1 Thursday, 10.30 a.m.

00:49:40.460 --> 00:49:42.500
for the NNC Feedback Forum.

00:49:44.290 --> 00:49:48.630
and contact information, I'm Lefty.

00:49:48.640 --> 00:49:52.240
Justin Walker manages the
Mac OS networking group.

00:49:52.350 --> 00:49:56.190
Tom Weier is our guy in
Worldwide Developer Relations.

00:49:56.260 --> 00:49:58.490
They're all our email addresses.

00:49:58.740 --> 00:50:03.460
We love to hear from people as
long as it's not too abusive.

00:50:03.520 --> 00:50:09.280
Or even if it is, if it's like
well-thought-out or creative.

00:50:09.590 --> 00:50:14.170
and now I'd like to bring Justin and
the Mac OS X networking teams and

00:50:14.180 --> 00:50:20.360
the Mac OS 9 networking teams all
up on stage and we can do our Q&A.

00:50:20.400 --> 00:50:22.330
Thanks, folks.