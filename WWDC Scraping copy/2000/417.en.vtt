WEBVTT

00:00:10.870 --> 00:00:14.270
I've got to say I'm just stunned
there are this many people here

00:00:14.480 --> 00:00:18.700
because I saw the original schedule
maybe a month ago and I said,

00:00:18.700 --> 00:00:20.710
"Oh look,
I'm after lunch on Friday and I'm

00:00:20.710 --> 00:00:22.790
up against the Aqua Feedback Forum.

00:00:22.790 --> 00:00:26.950
It's just going to be me and a
couple of close friends." So this,

00:00:27.090 --> 00:00:29.360
I'm stunned by this.

00:00:29.880 --> 00:00:34.040
So I'm going to be talking about
large-scale WebObjects applications

00:00:34.040 --> 00:00:38.410
and because the content of this
is a little more subjective than

00:00:38.490 --> 00:00:41.770
some of the earlier sessions,
I thought it's appropriate for

00:00:41.770 --> 00:00:43.620
me to let you know who I am.

00:00:43.800 --> 00:00:48.800
So Steve Meyer, consulting engagement
manager from Apple iServices.

00:00:48.800 --> 00:00:53.910
I've actually done WebObjects and
Next Apple related technologies here for

00:00:53.920 --> 00:00:56.800
just about two weeks short of ten years.

00:00:56.860 --> 00:00:59.800
The first six years of that I was doing
what you'd now call co-contracting.

00:00:59.800 --> 00:01:01.480
development.

00:01:01.640 --> 00:01:05.540
Two of those as a consultant,
another four doing shrink wrap.

00:01:05.560 --> 00:01:08.680
And in the last four years,
I've been with Apple doing

00:01:08.830 --> 00:01:11.120
the WebObjects development.

00:01:11.300 --> 00:01:17.180
And just recently, I've been working as
the consulting manager.

00:01:17.180 --> 00:01:20.200
And what that means,
outside of the business aspect of

00:01:20.320 --> 00:01:23.940
writing proposals and things like that,
is I'm responsible for

00:01:23.940 --> 00:01:27.720
doing architectural reviews,
design reviews at the

00:01:27.720 --> 00:01:31.720
beginning of projects,
midway through projects.

00:01:32.040 --> 00:01:34.550
Sometimes when customers
have done projects,

00:01:34.550 --> 00:01:37.920
and they say, "Okay,
can we have someone from Apple come

00:01:37.930 --> 00:01:42.170
in and just make sure we're on the
right track before we go too far?"

00:01:42.420 --> 00:01:47.350
So I think I actually have a fairly
good picture of what everybody has as

00:01:47.350 --> 00:01:51.320
a background for what they want to do.

00:01:52.420 --> 00:01:53.340
Introduction.

00:01:53.480 --> 00:01:56.280
Why is it important that you're here?

00:01:56.360 --> 00:01:59.520
The thing is that even though we work
in a business where we tend to think of,

00:01:59.530 --> 00:02:03.080
"Okay, everybody's on the web now,"
it's not even close to true.

00:02:03.110 --> 00:02:06.550
As a matter of fact,
the big money isn't there yet.

00:02:06.580 --> 00:02:09.800
I mean,
the government is just starting this.

00:02:10.020 --> 00:02:13.340
State and local governments
just starting this.

00:02:13.390 --> 00:02:17.860
Your conservative businesses, you know,
Caterpillar, General Motors.

00:02:17.920 --> 00:02:20.780
You know, you look at the Dow,
and they're the ones who actually

00:02:20.780 --> 00:02:23.980
have a lot of money and they're
used to spending a lot of money.

00:02:24.160 --> 00:02:28.460
And I can tell you from the perspective
of somebody who has done the,

00:02:28.640 --> 00:02:31.700
you know,
small startup thing that consulting

00:02:31.700 --> 00:02:34.210
to those kind of people is a great
way to pay the mortgage while

00:02:34.240 --> 00:02:36.770
you're writing the next killer app.

00:02:36.980 --> 00:02:41.140
The second thing here is that large-scale
projects really are different.

00:02:41.140 --> 00:02:43.320
You can't just say, "Oh,
it's twice as hard,

00:02:43.320 --> 00:02:46.630
twice as many people."
The standard problem there

00:02:46.630 --> 00:02:48.130
has to do with communication.

00:02:48.230 --> 00:02:51.130
But there's another thing that
Ernie kind of barely touched on,

00:02:51.130 --> 00:02:55.240
which many people don't realize
unless they stick around for a while.

00:02:55.290 --> 00:02:59.290
And I like to use the analogy of

00:02:59.490 --> 00:03:01.240
A hill.

00:03:01.240 --> 00:03:03.900
And if you could go with the picture
that everybody kind of uses when they

00:03:03.900 --> 00:03:07.630
want to indicate steep learning curve,
though I want to use this in a

00:03:07.630 --> 00:03:09.020
completely different context.

00:03:09.090 --> 00:03:13.160
You've got this, starts out gentle,
gets steeper and steeper and steeper.

00:03:13.170 --> 00:03:17.190
And if you think of that in terms
of the complexity of a problem,

00:03:17.290 --> 00:03:22.540
what you find is that as everything
in the tool space improves,

00:03:22.540 --> 00:03:26.590
you're cutting little
steps into that hill.

00:03:26.770 --> 00:03:29.540
And what that means is
year by year by year,

00:03:29.580 --> 00:03:32.710
you're making hard problems simple.

00:03:32.880 --> 00:03:35.700
You know, that top step keeps rising.

00:03:35.780 --> 00:03:37.940
But there's always a top step.

00:03:38.050 --> 00:03:40.930
It means that at some
point you reach the top,

00:03:40.930 --> 00:03:43.990
and what you don't realize is
that while we're making the

00:03:44.050 --> 00:03:49.310
harder and harder things easier,
we're making the first hard thing harder.

00:03:51.070 --> 00:03:52.840
We're losing the middle ground.

00:03:53.000 --> 00:04:00.820
So what you end up with is a case where
as soon as you get past the easy stuff,

00:04:00.970 --> 00:04:04.760
you're suddenly in the complex
and you need all of the,

00:04:04.790 --> 00:04:09.680
what people say, baggage, but it's not,
of large projects.

00:04:09.840 --> 00:04:13.300
So, what you're going to learn here,
mostly, if I do my job,

00:04:13.300 --> 00:04:16.800
is how does WebObjects
fit in a large project?

00:04:16.800 --> 00:04:19.320
What do you want to do
special with WebObjects when

00:04:19.320 --> 00:04:20.800
you're in a large project?

00:04:20.900 --> 00:04:23.150
And of course,
what I think is most important,

00:04:23.150 --> 00:04:25.740
what comes out of my
experience of reviewing things,

00:04:25.740 --> 00:04:26.800
is what not to do.

00:04:26.920 --> 00:04:28.870
How to stay out of trouble.

00:04:29.680 --> 00:04:32.000
So, that is a large project.

00:04:32.050 --> 00:04:35.000
If you have any of these things,
you've got a large project.

00:04:35.160 --> 00:04:39.580
Now, that's kind of misleading because
most of those things are related.

00:04:39.650 --> 00:04:43.770
I mean, no one is going to have a large
project team working for a long time

00:04:44.230 --> 00:04:47.340
producing not much for a few people.

00:04:47.490 --> 00:04:49.780
So it all does kind of pile together.

00:04:49.840 --> 00:04:54.480
The one thing that's not on this list,
and which kind of ties

00:04:54.480 --> 00:04:57.110
the whole thing together,
big money.

00:04:57.370 --> 00:05:01.490
When I say a large-scale project,
it's not less than a million dollars.

00:05:01.630 --> 00:05:04.090
Okay, just use that as a number.

00:05:04.960 --> 00:05:10.480
It's my own number, but... So,
I want to start out with just the

00:05:10.480 --> 00:05:11.940
general engineering practices.

00:05:11.940 --> 00:05:13.740
If there's anybody here
who's run a large project,

00:05:13.750 --> 00:05:15.790
is a project manager,
doesn't matter if you've

00:05:15.790 --> 00:05:20.100
ever used WebObjects at all,
the next 10 minutes or so is going to

00:05:20.100 --> 00:05:22.830
be either boring or comforting to you.

00:05:22.950 --> 00:05:26.350
And for all those people who have
never been on part of a large project,

00:05:26.350 --> 00:05:30.140
this will tell you what it is that
is going to be expected of you.

00:05:30.140 --> 00:05:32.600
So, you always need these practices.

00:05:32.630 --> 00:05:36.570
And for the most part,
WebObjects doesn't impose anything on it.

00:05:37.370 --> 00:05:40.980
So, first obviously, project management.

00:05:41.030 --> 00:05:44.920
And I'm going to try to go
through these relatively quickly.

00:05:45.090 --> 00:05:45.880
Staffing.

00:05:45.900 --> 00:05:47.740
We're not just talking about
the development staffing here.

00:05:47.740 --> 00:05:52.120
We're not just talking about
database admins or network people.

00:05:52.150 --> 00:05:54.710
We're talking about
configuration management,

00:05:54.710 --> 00:05:59.560
talking about technical documentation,
all that stuff.

00:05:59.580 --> 00:06:02.660
What we as developers
typically call overhead.

00:06:02.690 --> 00:06:04.370
Which

00:06:04.920 --> 00:06:06.140
That's wrong.

00:06:06.300 --> 00:06:07.330
Communication.

00:06:07.340 --> 00:06:10.500
It's another nice way of hiding
a dirty word to developers.

00:06:10.560 --> 00:06:12.540
That means meetings.

00:06:12.720 --> 00:06:15.660
And I think it means real meetings
in the sense of actually talking

00:06:15.660 --> 00:06:17.450
to each other face-to-face.

00:06:17.550 --> 00:06:19.710
Video conferencing can work.

00:06:19.810 --> 00:06:22.000
Audio conferencing doesn't work.

00:06:22.080 --> 00:06:26.740
Email, you're just wishing if you
think that's going to get done.

00:06:26.960 --> 00:06:28.410
Scheduling.

00:06:28.410 --> 00:06:32.560
Not much to say there except that
when you have a large project,

00:06:32.560 --> 00:06:36.170
you look out and you see you don't
really have to deliver for nine months.

00:06:36.320 --> 00:06:40.160
And it's very easy to just kind of
cruise through the first six of those.

00:06:40.160 --> 00:06:43.740
So scheduling really should
be--you need to test things

00:06:43.740 --> 00:06:45.180
basically a week at a time.

00:06:45.190 --> 00:06:47.620
If your granularity is
any coarser than that,

00:06:47.620 --> 00:06:49.260
you're not really scheduling.

00:06:49.570 --> 00:06:52.330
And the last thing that you
can't possibly track it.

00:06:53.140 --> 00:06:54.850
Okay, source code control.

00:06:55.000 --> 00:07:00.330
This is kind of a religion with
anybody who's been on a large project.

00:07:00.690 --> 00:07:04.600
You're not serious if you're
not controlling your source.

00:07:04.670 --> 00:07:09.100
And also, it's not just source,
although this says that every single

00:07:09.100 --> 00:07:13.440
document associated with a project,
put it under the version control.

00:07:13.560 --> 00:07:15.680
If nothing else,
you know you've got it all in a

00:07:15.680 --> 00:07:18.940
repository and somebody's responsible
for backing up the repository.

00:07:19.050 --> 00:07:22.930
You can never lose more than since
the last time you checked in.

00:07:23.110 --> 00:07:25.590
In this case,
I actually have a recommendation.

00:07:25.600 --> 00:07:26.920
I really like CVS.

00:07:26.990 --> 00:07:30.830
It's the most common thing
for our developers to use.

00:07:31.010 --> 00:07:33.270
It's used internally by Apple.

00:07:33.540 --> 00:07:37.330
And the biggest advantage
for a large project is this:

00:07:37.430 --> 00:07:39.510
the optimistic locking.

00:07:39.780 --> 00:07:41.700
It means that you're not
getting in each other's way.

00:07:41.700 --> 00:07:43.450
Let's see.

00:07:43.660 --> 00:07:44.740
Show of hands here.

00:07:44.740 --> 00:07:47.440
Who knows what optimistic locking is?

00:07:48.780 --> 00:07:53.960
Okay, that's only 25%. So I'm going
to go through and explain that.

00:07:54.250 --> 00:07:57.280
The idea is that when you have
a source code control system,

00:07:57.280 --> 00:08:03.780
a pessimistic system basically says that
you can check out a document for viewing,

00:08:03.780 --> 00:08:07.410
but you can't modify it until you say,
you know, I want to lock this thing.

00:08:07.410 --> 00:08:09.710
And as soon as you've done that,
no one else can lock it.

00:08:09.740 --> 00:08:11.060
They've got it.

00:08:11.840 --> 00:08:16.150
And this presentation is actually a good
example of what the problem with that is,

00:08:16.150 --> 00:08:18.490
is that there's like 45 slides in this.

00:08:18.490 --> 00:08:22.100
And I turned in the first
draft about a week ago.

00:08:22.100 --> 00:08:27.140
And then I flew back home to Virginia,
and I made a bunch of text changes to it.

00:08:27.140 --> 00:08:30.900
At the same time,
we had a graphics professional changing

00:08:31.060 --> 00:08:33.440
about four of the graphics here.

00:08:33.520 --> 00:08:37.640
We came back, and since we didn't
have any communication,

00:08:37.640 --> 00:08:39.740
we both changed the thing.

00:08:41.140 --> 00:08:42.140
control.

00:08:42.200 --> 00:08:44.950
Let's suppose we put it
under a pessimistic system.

00:08:44.990 --> 00:08:48.770
What would happen is he would
have noticed that I was away.

00:08:49.060 --> 00:08:50.500
He would have checked it out.

00:08:50.500 --> 00:08:54.260
I would have been somewhere else not
being able to communicate with him.

00:08:54.260 --> 00:08:56.180
I would have broken the lock anyway.

00:08:56.230 --> 00:08:58.030
And I'd be off and running.

00:08:58.190 --> 00:08:59.600
So in a large -- go on.

00:08:59.740 --> 00:09:04.450
That's what's going to happen when you
have a whole bunch of people who can't

00:09:04.450 --> 00:09:06.110
necessarily communicate all the time.

00:09:06.290 --> 00:09:09.100
You just end up breaking
pessimistic locks all the time.

00:09:09.100 --> 00:09:13.070
The optimistic locking scheme is that
everybody's allowed to check it out.

00:09:13.170 --> 00:09:15.960
It's on checking in that everybody
has to sync up to make sure that

00:09:15.960 --> 00:09:17.820
they have the latest version.

00:09:17.830 --> 00:09:19.080
Now, great example.

00:09:19.160 --> 00:09:21.980
It turns out that between
myself and the graphics guy,

00:09:22.260 --> 00:09:24.710
we'd only both touched one slide.

00:09:24.710 --> 00:09:28.790
So I could have put my stuff in
with just one conflict and then we

00:09:28.790 --> 00:09:30.450
could have negotiated over that.

00:09:30.570 --> 00:09:35.960
So that's why I'm a big fan.

00:09:35.960 --> 00:09:35.960
Bug

00:09:36.290 --> 00:09:38.570
You know,
all the software is going to have bugs.

00:09:38.680 --> 00:09:39.640
You can't track it.

00:09:39.770 --> 00:09:40.490
You can't fix it.

00:09:40.500 --> 00:09:41.690
Simple enough.

00:09:41.760 --> 00:09:45.580
I don't have a specific
recommendation here.

00:09:45.580 --> 00:09:48.160
We use a lot of different things,
including some homegrown things.

00:09:48.240 --> 00:09:52.920
Where it says web access here,
what I really mean is remote access.

00:09:52.920 --> 00:09:55.060
Because, again,
if you've got a large team,

00:09:55.060 --> 00:09:56.950
sooner or later,
somebody is going to need to

00:09:56.950 --> 00:09:59.440
be able to access that thing
when they're on vacation,

00:09:59.440 --> 00:10:00.730
something like that.

00:10:00.740 --> 00:10:03.760
The other elements here
mostly just have to do with,

00:10:05.240 --> 00:10:08.030
they're what's good in supporting
release management and some other

00:10:08.030 --> 00:10:10.310
things that will be coming up real soon.

00:10:11.800 --> 00:11:24.500
[Transcript missing]

00:11:25.280 --> 00:11:27.940
Okay,
that's pretty much it for general stuff.

00:11:28.010 --> 00:11:32.360
Now let's talk about what it is that
you need to support WebObjects itself.

00:11:33.470 --> 00:11:35.200
First, documentation.

00:11:35.200 --> 00:11:38.360
Now the project people are going to go,
well, documentation is something you

00:11:38.360 --> 00:11:39.340
need for everything anyway.

00:11:39.340 --> 00:11:43.560
And the real reason I put it under the
WebObjects thing is that WebObjects

00:11:43.560 --> 00:11:47.400
does have what I would call some
special needs for documentation.

00:11:47.680 --> 00:11:49.740
Only some of these, though.

00:11:49.780 --> 00:11:50.830
Like requirements.

00:11:50.890 --> 00:11:55.430
Requirements are pretty much the same
everywhere in that from your customers,

00:11:55.430 --> 00:11:58.120
what you're likely to
get is relatively vague,

00:11:58.120 --> 00:12:01.040
high-level descriptions of functionality.

00:12:01.040 --> 00:12:04.630
Specifications is something else.

00:12:04.840 --> 00:12:08.130
Specifications,
what we want for specifications is

00:12:08.130 --> 00:12:14.550
we want to have actual prototype
interfaces of all the screens,

00:12:14.640 --> 00:12:18.890
and we want a navigation map,
and we want functional descriptions of

00:12:18.890 --> 00:12:20.580
what's supposed to occur between those.

00:12:20.600 --> 00:12:24.870
Now, the customers aren't necessarily
going to give you that.

00:12:24.870 --> 00:12:27.600
And I'll get back to that in just a bit.

00:12:27.870 --> 00:12:29.000
That's what we call a spec.

00:12:29.080 --> 00:12:34.090
It's not enough to just kind of say, oh,
would we like to be an e-commerce system.

00:12:34.100 --> 00:12:38.420
The design documentation actually
is kind of interesting because as

00:12:38.420 --> 00:12:41.300
we usually do design documentation,
a lot of it looks like

00:12:41.300 --> 00:12:42.090
the specifications.

00:12:42.100 --> 00:12:46.890
One nice thing you can do is, you know,
for each of the design

00:12:46.890 --> 00:12:52.100
mockups you've got,
go ahead and associate with that the,

00:12:52.100 --> 00:12:56.100
you know, a screenshot of WoeBuilder for
what that component looks like.

00:12:56.210 --> 00:12:59.020
And then you also,
you want to have documentation on

00:12:59.040 --> 00:13:01.100
a component by component basis.

00:13:01.100 --> 00:13:04.960
You know, a one sheet on each component
basically says here's what it is,

00:13:04.960 --> 00:13:07.100
inputs, outputs, actions, etc.

00:13:07.100 --> 00:13:15.120
The deployment documentation is
for the most part fairly simple.

00:13:15.120 --> 00:13:15.120
It's, you know,
a lot of it is just a simple document.

00:13:15.620 --> 00:13:17.890
If you had to install the
software from scratch,

00:13:18.150 --> 00:13:22.520
including really, you know, assume,
install the web server, install the apps,

00:13:22.520 --> 00:13:24.200
install the database, etc.

00:13:24.200 --> 00:13:28.150
And if the thing crashes,
how do you restart it?

00:13:28.180 --> 00:13:29.980
That's pretty much what it comes down to.

00:13:29.980 --> 00:13:33.140
Documents like this,
it's really good to have pictures.

00:13:33.140 --> 00:13:35.320
And I'll be showing you a
picture in a little bit,

00:13:35.370 --> 00:13:37.840
you know,
the kind of picture I'm talking about.

00:13:37.840 --> 00:13:40.280
The other two things,
the coding and the user,

00:13:40.280 --> 00:13:43.710
for the most part,
those are pretty standard documentation.

00:13:44.290 --> 00:13:47.620
They're only included
here for completeness.

00:13:48.080 --> 00:13:52.000
So, the hardware architecture you
should expect to be working to.

00:13:52.000 --> 00:13:58.010
You start out, this is a large project,
therefore, eventually you're going to

00:13:58.010 --> 00:14:00.800
have multiple web servers,
multiple app servers,

00:14:00.830 --> 00:14:02.000
multiple data sources.

00:14:02.200 --> 00:14:05.010
Now,
that's not the same thing as necessarily

00:14:05.010 --> 00:14:10.000
saying multiple databases or a single
database replicated or whatever.

00:14:10.000 --> 00:14:12.990
That's more detail than I'm
talking about right now.

00:14:13.000 --> 00:14:15.000
But, that's what we're looking at.

00:14:15.000 --> 00:14:17.000
And I simplified the
picture a little bit.

00:14:17.000 --> 00:14:19.130
You notice that only web server
one is connected to anything,

00:14:19.130 --> 00:14:22.990
and only really app server one
is connected further downstream.

00:14:23.380 --> 00:14:27.000
Otherwise,
lots of lines all over everywhere.

00:14:27.000 --> 00:14:31.890
Up in front there, the DNS,
that's referring to a DNS round robin

00:14:32.020 --> 00:14:37.990
that basically masks the fact to the net
that you've got multiple web servers.

00:14:38.000 --> 00:14:42.000
So,
they both appear to be the same thing.

00:14:42.180 --> 00:14:45.420
This is the kind of thing, like I said,
you're going to expect to see

00:14:45.420 --> 00:14:49.430
something like this in your system
admin/deployment documentation so that

00:14:49.600 --> 00:14:51.990
someone knows how to hook something up.

00:14:52.340 --> 00:14:56.460
Now I'm actually going to zip by an
animation that wasn't supposed to be

00:14:56.460 --> 00:15:00.740
in here and move on to the software
architecture that that hardware

00:15:00.740 --> 00:15:03.300
architecture locks you into already.

00:15:03.390 --> 00:15:07.270
And that's actually partly a bad
thing and partly a good thing.

00:15:07.410 --> 00:15:11.300
First thing, you know that because you
have different hardware,

00:15:11.300 --> 00:15:16.870
separate hardware, multiple instances,
all that, you start out designing for the

00:15:16.870 --> 00:15:20.300
problems you're going to have with
data caching and synchronization.

00:15:20.300 --> 00:15:23.310
And I'm guessing that many of
you were here yesterday when

00:15:23.310 --> 00:15:25.290
Dan did his presentation on that.

00:15:25.300 --> 00:15:30.290
So you should know the
issues to look out for.

00:15:30.300 --> 00:15:32.500
Also given that, once again,
if you've separated,

00:15:32.500 --> 00:15:35.640
you know you've got multiple instances,
you know you've got data

00:15:35.640 --> 00:15:38.830
synchronization issues,
go ahead and break out the application

00:15:38.830 --> 00:15:40.300
into more than one application.

00:15:40.300 --> 00:15:44.300
I mean, don't dump all the functionality
into one big thing.

00:15:44.300 --> 00:15:47.620
And typically that's done by, you know,
you pick the things that are

00:15:47.620 --> 00:15:48.300
read-only because you can deal
with their synchronization issues.

00:15:48.690 --> 00:15:52.270
Because you can deal with
their synchronization one way.

00:15:52.340 --> 00:15:55.300
You pick the things that are, you know,
public, can see,

00:15:55.300 --> 00:15:58.880
that only maybe employees can see,
and that only people who are just,

00:15:58.880 --> 00:16:01.300
you know,
administering the database can see.

00:16:01.300 --> 00:16:04.120
And when you do that,
you also get the benefit that

00:16:04.120 --> 00:16:08.300
you can then separately optimize
configurations for each of those.

00:16:08.370 --> 00:16:12.120
One thing that's really quite
helpful for that is if you've

00:16:12.170 --> 00:16:14.760
got any particular function,
you know,

00:16:14.900 --> 00:16:18.290
usually this is an admin function,
where you're expecting it's

00:16:18.450 --> 00:16:21.090
going to take a long time,
it's going to put a

00:16:21.110 --> 00:16:22.240
big load on something.

00:16:22.370 --> 00:16:26.270
You can schedule it so that that app
only runs during low-level times.

00:16:26.300 --> 00:16:30.270
So you'll never be, you know,
hitting your system at the

00:16:30.270 --> 00:16:32.260
same time your users are.

00:16:33.550 --> 00:16:35.350
Okay, so you've got an architecture.

00:16:35.410 --> 00:16:38.150
Let's talk about some issues
in application design.

00:16:38.160 --> 00:16:42.010
I'm not going to teach you how to design
an application so much as show you what

00:16:42.240 --> 00:16:48.240
parts of application design are likely
to cause you problems in a big app.

00:16:50.930 --> 00:16:54.000
Okay, first, typical code organization
looks like this.

00:16:54.240 --> 00:16:57.940
I mean, and you have a data framework
or more than one framework.

00:16:57.980 --> 00:17:00.640
You've got multiple
sources of different types.

00:17:00.670 --> 00:17:02.230
And it's good to get that off by itself.

00:17:02.350 --> 00:17:03.630
That'll have your EO model.

00:17:03.800 --> 00:17:06.340
That'll have your custom classes.

00:17:06.380 --> 00:17:09.360
You have this fixes framework,
which always accumulates.

00:17:09.380 --> 00:17:12.820
And I'll talk about that in a little bit,
but it happens.

00:17:12.860 --> 00:17:15.310
And then you'll have your
architectural frameworks,

00:17:15.360 --> 00:17:18.610
your reusable components
for the most part.

00:17:19.260 --> 00:17:22.240
Then you'll have one
or more applications.

00:17:22.400 --> 00:17:24.810
As a result, your team looks like that.

00:17:25.060 --> 00:17:27.340
You have an architecture team,
you got a data modeling team,

00:17:27.340 --> 00:17:28.840
you got a couple app teams.

00:17:29.000 --> 00:17:32.440
Now it seems like every time I look
at how someone has set up a team,

00:17:32.570 --> 00:17:37.400
they've piled all the experience people
on to the data modeling and architecture.

00:17:37.590 --> 00:17:38.730
And there's a real problem with that.

00:17:38.780 --> 00:17:40.390
Well, there's two real problems,
actually.

00:17:40.610 --> 00:17:47.670
One has to do... One of them has
to do with the fact that you're...

00:17:48.100 --> 00:17:52.420
Always going to be running the risk
of having your data modeling and

00:17:52.420 --> 00:18:01.310
architecture being so sophisticated
that your app teams can't use it.

00:18:03.530 --> 00:18:07.230
The other problem with this is that,
and this has got to kind

00:18:07.240 --> 00:18:10.540
of come up several times,
you've got a maintainability problem

00:18:10.590 --> 00:18:15.050
there because at any particular
point it's your senior people

00:18:15.120 --> 00:18:16.900
who are most likely to leave.

00:18:18.400 --> 00:18:21.870
So I always like to
make sure that even if,

00:18:21.870 --> 00:18:26.580
and we're going with team here,
and again, teams aren't necessarily

00:18:26.580 --> 00:18:27.200
very many people.

00:18:27.200 --> 00:18:31.180
When I talked about a large
project way at the beginning,

00:18:31.180 --> 00:18:32.540
what is a large team?

00:18:32.780 --> 00:18:38.280
A large team is maybe 15 or 20 people,
but the WebObjects part of that,

00:18:38.280 --> 00:18:40.590
we're talking 3, 4, 5.

00:18:40.590 --> 00:18:41.900
I mean, that's it.

00:18:42.040 --> 00:18:46.930
If you have an app that takes
15 or 20 WebObjects developers,

00:18:46.940 --> 00:18:51.770
I only know one of those
in my personal experience.

00:18:51.770 --> 00:18:56.200
And that was an effort that was
going to replace a system that the

00:18:56.310 --> 00:19:01.460
federal government currently spends
$300 million a year to maintain.

00:19:01.460 --> 00:19:05.010
So if you got one of those, call me.

00:19:05.210 --> 00:19:09.500
Anyway, the other thing about this is
you have to make sure that you

00:19:09.500 --> 00:19:11.640
have planned communication.

00:19:11.640 --> 00:19:15.050
And I'll get into this pretty
shortly about what it is,

00:19:15.060 --> 00:19:19.200
why the communication is necessary,
but the part that it's

00:19:19.280 --> 00:19:21.920
planned is what's important.

00:19:21.920 --> 00:19:23.480
Suppose you've got an architecture team.

00:19:23.480 --> 00:19:25.360
They're building reusable components.

00:19:25.360 --> 00:19:29.110
If you have that once a month,
you have to make the architecture team

00:19:29.110 --> 00:19:32.610
stand up and do a PowerPoint presentation
on what they've done in the

00:19:32.730 --> 00:19:35.780
last month so the rest of the
teams know what's available.

00:19:35.870 --> 00:19:39.320
You can't count on them to just,
you know, send out messages, "Ooh,

00:19:39.390 --> 00:19:41.680
we've got this new, cool,
reusable component.

00:19:41.680 --> 00:19:44.600
Come look at it."
It doesn't work that way.

00:19:44.600 --> 00:19:46.540
So plan the communication.

00:19:46.540 --> 00:19:47.970
Plan the meetings.

00:19:48.140 --> 00:19:49.900
Okay, data modeling.

00:19:49.940 --> 00:19:51.000
We're on the data modeling team.

00:19:51.000 --> 00:19:54.240
What do the data modeling
teams need to watch out for?

00:19:54.730 --> 00:19:57.600
You've got to make sure that
you're modeling the process,

00:19:57.600 --> 00:20:03.070
not just the static data where you
can look at what the company does.

00:20:03.210 --> 00:20:08.000
You need to be sure how are the
applications going to use this data.

00:20:08.080 --> 00:20:11.680
And the biggest thing that
happens when you don't do that,

00:20:12.070 --> 00:20:15.270
The next thing:
you over-normalize the data.

00:20:15.320 --> 00:20:19.460
What that means is that you can never
ever actually get to a meaningful

00:20:19.460 --> 00:20:24.060
collection of data to display to a
user without having to follow a bunch

00:20:24.060 --> 00:20:31.000
of relationships or a few database
folks do a bunch of table joins.

00:20:31.780 --> 00:20:36.830
I've got to say, like,
80% of everything I see that I look

00:20:36.830 --> 00:20:40.040
at and I don't like the data modeling,
that's it.

00:20:40.160 --> 00:20:44.840
And the nice thing about it is that
there's some relatively simple fixes,

00:20:44.910 --> 00:20:47.480
and you tend to get big
performance wins when you do it,

00:20:47.610 --> 00:20:49.140
and people are impressed.

00:20:49.230 --> 00:20:52.260
The bad thing is that it shouldn't
happen in the first place.

00:20:52.360 --> 00:20:57.810
And this last one, being cautious with
the entity inheritance.

00:20:58.200 --> 00:21:01.130
I don't know why it is
that it comes out this way,

00:21:01.140 --> 00:21:06.100
but every time I run into a project where
someone has used entity inheritance,

00:21:06.230 --> 00:21:07.670
there's a problem on the project.

00:21:07.900 --> 00:21:09.840
There's different problems.

00:21:09.970 --> 00:21:11.850
But it just seems to be
one of those things where,

00:21:11.850 --> 00:21:15.670
you know, if you see that someone's
using entity inheritance,

00:21:15.890 --> 00:21:17.100
ask them why.

00:21:17.100 --> 00:21:20.300
And make sure everyone
knows it's happening.

00:21:24.910 --> 00:21:26.930
Abstraction of data
interfaces is a great thing.

00:21:26.940 --> 00:21:32.190
It's an OO concept from way back.

00:21:33.070 --> 00:21:35.770
But, as you can see,
I have a couple things

00:21:35.780 --> 00:21:39.050
that I don't like about it.

00:21:39.330 --> 00:21:41.700
Really the biggest one
here is the first one.

00:21:41.790 --> 00:21:45.440
That if you try to abstract too much
away about what your data sources are,

00:21:45.550 --> 00:21:48.870
you end up losing any of the advantages
that the people who designed the

00:21:48.880 --> 00:21:50.430
data sources built into them.

00:21:50.440 --> 00:21:55.200
A great example is if you can
put an interface on top of EOF,

00:21:55.440 --> 00:21:59.440
and if you forget to put prefetching
of relationships into it,

00:21:59.580 --> 00:22:03.510
you've blown any chance of
optimizing your data access.

00:22:06.110 --> 00:22:07.140
Second thing is kind of similar.

00:22:07.140 --> 00:22:12.050
If you're trying to abstract
things that just don't go together,

00:22:12.070 --> 00:22:14.420
you're going to end up with something
that doesn't really work for you.

00:22:14.420 --> 00:22:16.300
That's actually a general
case of the first one.

00:22:16.300 --> 00:22:19.750
And the last is,
whenever you get into the mode of,

00:22:19.750 --> 00:22:25.060
I'm going to take something and build
a system that will work with anything,

00:22:25.060 --> 00:22:27.290
you always base it on what you know.

00:22:27.300 --> 00:22:31.560
And when you come up with something that
doesn't match what you abstracted to,

00:22:31.560 --> 00:22:35.400
there's a really good chance instead
of changing your abstraction,

00:22:35.400 --> 00:22:40.300
you're just going to hack in some code to
make it work with just that one source.

00:22:40.300 --> 00:22:44.590
And then you've defeated the entire
purpose of doing the abstraction.

00:22:46.390 --> 00:22:48.740
Another thing that's great:
Design for reuse.

00:22:48.860 --> 00:22:51.590
Although, see that never really happens
in the real world either.

00:22:51.690 --> 00:22:55.620
What you have is design for use,
redesign for reuse.

00:22:55.710 --> 00:23:00.300
Or, design for use,
recognize you can reuse.

00:23:00.390 --> 00:23:01.970
So,

00:23:02.390 --> 00:23:06.370
You tend to want to kind of make a
second sweep through the whole app

00:23:06.500 --> 00:23:09.300
once you've got it done and figure out
which bits you want to use next time.

00:23:09.300 --> 00:23:13.410
But for a lot of people who have
done even small apps before,

00:23:13.410 --> 00:23:15.300
they have with them
kind of the collection.

00:23:15.300 --> 00:23:17.300
These are things that
have been useful before.

00:23:17.300 --> 00:23:20.960
So there actually are, you know,
it's not like you're always starting

00:23:20.960 --> 00:23:23.290
from scratch with reusable components.

00:23:23.300 --> 00:23:27.220
And the best thing for, you know,
when it comes to reuse with WebObjects

00:23:27.290 --> 00:23:30.280
is the small reusable components,
small elements.

00:23:30.300 --> 00:23:33.680
And if you want to know a
good way to design them,

00:23:33.680 --> 00:23:37.270
go look at what WoExtensions
has as a framework.

00:23:37.300 --> 00:23:42.180
The other thing that, you know,
clearly from a reuse standpoint

00:23:42.180 --> 00:23:49.270
is your data framework,
your enterprise objects.

00:23:49.530 --> 00:23:51.400
Basically,
if you model the thing properly,

00:23:51.400 --> 00:23:54.370
you can carry it around,
although you may need to modify it for

00:23:54.370 --> 00:23:58.300
the individual needs of applications,
and I'll talk about that too.

00:23:58.410 --> 00:24:01.680
And lastly, when you do this,
organize them into things that don't

00:24:01.680 --> 00:24:03.390
have dependencies on one another.

00:24:03.480 --> 00:24:07.490
It's a real shame when you
find that there's a really

00:24:07.600 --> 00:24:10.410
cool table implementation,
but it requires that you link in

00:24:10.410 --> 00:24:15.070
a framework that has somebody's
own idea of what a set should be.

00:24:15.180 --> 00:24:17.870
I've found that a lot of times.

00:24:18.240 --> 00:24:21.750
Not only frustrating for the
people who are trying to use it,

00:24:21.780 --> 00:24:24.760
but there's almost a guarantee that at
some point someone's going to forget

00:24:24.840 --> 00:24:29.740
to drag along that utilities framework
and it's just not going to work.

00:24:30.100 --> 00:24:33.470
I get asked about this a lot
from a design standpoint.

00:24:33.720 --> 00:24:35.320
People want to go things be fast.

00:24:35.320 --> 00:24:37.240
They hear, "Ooh, multi-threading.

00:24:37.240 --> 00:24:40.890
Let's do it." And, you know,
multi-threading is hard.

00:24:41.100 --> 00:24:41.910
It's really hard.

00:24:42.010 --> 00:24:44.680
There's a few cases where
you really want to use it.

00:24:44.700 --> 00:24:49.030
And it's mostly in terms of somebody,
something that's listening and gets

00:24:49.100 --> 00:24:52.480
a request and spits the request
off to somebody else to process

00:24:52.820 --> 00:24:54.840
and then starts listening again.

00:24:54.840 --> 00:24:57.660
You can think of, you know,
the WoW adapter is doing that.

00:24:57.660 --> 00:25:00.150
But you don't really want to think
of your application as doing that.

00:25:00.190 --> 00:25:02.200
It's actually doing processing.

00:25:02.200 --> 00:25:03.930
And, like I said,
it's really hard to write.

00:25:04.000 --> 00:25:05.080
It's really hard to debug.

00:25:05.160 --> 00:25:07.090
You notice I didn't even put
test in the middle there.

00:25:07.830 --> 00:25:10.360
Because the assumption is you're
going to have to debug it.

00:25:10.430 --> 00:25:12.140
You're not going to get it right.

00:25:12.140 --> 00:25:18.400
And the cool thing about this is that
multi-threaded things fail under load.

00:25:18.400 --> 00:25:22.060
And they come under load
when you load test them.

00:25:22.060 --> 00:25:23.590
And that's at the end of
your development cycle.

00:25:23.590 --> 00:25:27.880
So you're pretty much--you know,
when you go down this road,

00:25:27.880 --> 00:25:32.110
you're pretty much guaranteed to
get a hard to track down bug just

00:25:32.240 --> 00:25:36.490
as you want to go to production.

00:25:36.860 --> 00:25:42.650
Even if it's a simple solution,
that's quite a lot of stress.

00:25:43.520 --> 00:25:45.200
The benefits of multithreading.

00:25:45.200 --> 00:25:48.450
Tough to really be sure as
you're designing you're going

00:25:48.460 --> 00:25:49.460
to get a chance to use them.

00:25:49.460 --> 00:25:53.080
Because unless you have the
source to everything down the

00:25:53.090 --> 00:25:56.940
line that you're dealing with,
you can't be sure that somebody

00:25:56.940 --> 00:25:58.400
isn't defeating the whole purpose.

00:25:58.700 --> 00:26:03.400
Whether it's occurring somewhere
in the enterprise object framework,

00:26:03.400 --> 00:26:05.460
in the adapter for a
particular kind of database,

00:26:05.460 --> 00:26:07.360
in the client libraries
for that database,

00:26:07.460 --> 00:26:09.460
in the connections to the server.

00:26:09.460 --> 00:26:14.030
There's just too many places where you
can spend a lot of time and find out that

00:26:14.030 --> 00:26:16.670
someone's just serializing it anyway.

00:26:17.000 --> 00:26:19.890
However you have to do it,
WebObjects does support it.

00:26:20.030 --> 00:26:25.330
I mean, by default,
resources are requested and dealt with,

00:26:25.500 --> 00:26:28.890
you know, images, that sort of thing,
in multiple threads.

00:26:29.200 --> 00:26:34.050
And you can turn on the request
handling and have a ball,

00:26:34.050 --> 00:26:34.050
but...

00:26:34.970 --> 00:26:35.870
I warned you.

00:26:36.070 --> 00:26:38.610
That's all I'm willing to say there.

00:26:38.780 --> 00:26:41.030
I have an analogy here that
I like to use when someone says,

00:26:41.090 --> 00:26:47.060
"I'd like to go to multithreading
for performance." And that is that,

00:26:47.060 --> 00:26:48.970
think of the grocery store.

00:26:49.440 --> 00:26:52.590
You've got a couple of checkout lines,
a bunch of people piling up behind it.

00:26:52.700 --> 00:26:56.140
And what do they do when that happens?

00:26:56.180 --> 00:27:00.600
They open up another checkout stand,
and people go move over to that,

00:27:00.600 --> 00:27:01.400
and you're good.

00:27:01.400 --> 00:27:03.830
To us,
that's starting up another instance.

00:27:03.860 --> 00:27:07.860
Now, if they manage to actually fill
up the whole store all the time,

00:27:07.860 --> 00:27:10.460
they open another store
a mile down the road.

00:27:10.460 --> 00:27:13.920
For that, we're talking about bringing
up another app server.

00:27:13.920 --> 00:27:16.940
What you never,
ever have anybody do is go to

00:27:16.940 --> 00:27:20.840
the checkout clerks and say,
why don't you process some

00:27:20.840 --> 00:27:22.960
of the customers in parallel?

00:27:26.670 --> 00:27:31.350
That's really kind of the end
of my feeling on multithreading.

00:27:33.040 --> 00:27:38.640
Now, when you're designing things,
there are some warning signs.

00:27:38.640 --> 00:27:41.390
And this is actually--warning
is a strong word,

00:27:41.390 --> 00:27:43.650
but I couldn't come up with
one that I really wanted.

00:27:43.780 --> 00:27:45.890
This is when I go out
and I review something,

00:27:46.010 --> 00:27:47.950
I see one of these things happening.

00:27:48.030 --> 00:27:50.140
I have three questions.

00:27:50.140 --> 00:27:54.170
Do you need to be doing this to
get the functionality you want?

00:27:54.170 --> 00:27:56.480
Is there any other way to do this?

00:27:56.480 --> 00:27:59.500
And right now,
do you have it documented to the

00:27:59.700 --> 00:28:02.970
point where I could have walked in,
not talked to you,

00:28:02.970 --> 00:28:05.600
and found out the answers to
the questions I just asked you?

00:28:05.600 --> 00:28:09.470
And if the answer is
yes to all these things,

00:28:09.470 --> 00:28:09.470
it's fine.

00:28:09.720 --> 00:28:11.390
I'm pretty happy.

00:28:11.390 --> 00:28:12.970
But if the answer is no
to any of these things,

00:28:13.020 --> 00:28:15.500
then there's work to be done.

00:28:15.570 --> 00:28:17.160
First of them kind of go together.

00:28:17.220 --> 00:28:19.070
You're subclassing a
lot of Apple classes.

00:28:19.080 --> 00:28:22.350
You're kind of intertwined
with Apple's classes.

00:28:22.430 --> 00:28:26.100
This is...when you go to training,
this is what they show you.

00:28:26.130 --> 00:28:27.100
This is the ideal.

00:28:27.230 --> 00:28:29.760
You've got bottom four
things are all ours,

00:28:29.910 --> 00:28:31.120
top thing's yours.

00:28:31.170 --> 00:28:35.500
And of course that top thing
may be multiple frameworks,

00:28:35.610 --> 00:28:37.410
but it's all up there.

00:28:37.410 --> 00:28:37.410
You're not...

00:28:37.590 --> 00:28:40.800
Really getting in the way
of the WebObjects or the

00:28:40.870 --> 00:28:44.530
Eurocontrol or any of that,
that's what I see a lot.

00:28:44.930 --> 00:28:46.510
Just, vroom, vroom, vroom.

00:28:46.720 --> 00:28:49.570
Now, I gotta say that this is
the kind of thing that the

00:28:49.570 --> 00:28:52.800
Objective-C developers are much more
likely to be able to get away with.

00:28:52.800 --> 00:28:57.340
So the thing is,
Objective-C gives you a much bigger

00:28:57.340 --> 00:29:00.350
gun to shoot yourself in the foot with.

00:29:04.590 --> 00:29:06.030
That's not saying I don't like it.

00:29:06.050 --> 00:29:07.500
As a language, I like it.

00:29:07.650 --> 00:29:11.110
But this kind of structure is
something that's really common when

00:29:11.110 --> 00:29:15.440
you've found something that's kind
of accumulated bits of Objective-C.

00:29:15.500 --> 00:29:18.390
And another problem here is
those little thin blue lines,

00:29:18.390 --> 00:29:21.620
chances are they've got
dependencies between them,

00:29:21.630 --> 00:29:25.500
and that violates one of those
rules for usability I pointed out.

00:29:25.500 --> 00:29:27.890
That you can't, even if you decide you
really like that one,

00:29:27.900 --> 00:29:30.430
you know, second blue line there,
it's got some functionality you need,

00:29:30.500 --> 00:29:32.480
you may have to carry
along the rest of it.

00:29:32.540 --> 00:29:34.190
And that's bad.

00:29:34.650 --> 00:29:36.270
More warning signs.

00:29:36.270 --> 00:29:39.360
You've got large application
in session classes.

00:29:39.410 --> 00:29:42.430
Now this is partly a design
issue and partly a coding issue.

00:29:42.690 --> 00:29:46.130
Every once in a while you'll want to
sweep through the application in session

00:29:46.130 --> 00:29:49.890
classes and see what cruft they've
accumulated as people just put things in.

00:29:50.330 --> 00:29:53.100
Because it's a big global
variable basically.

00:29:53.100 --> 00:29:54.480
You can stuff anything you want in there.

00:29:54.770 --> 00:29:58.480
But even from a design standpoint,
application in session

00:29:58.480 --> 00:30:01.860
classes aren't necessarily
supposed to be all that heavy.

00:30:02.790 --> 00:30:04.730
You're using Objective-C in
a Java project.

00:30:04.810 --> 00:30:07.930
And this is where I said,
I like Objective-C, I like Java.

00:30:08.050 --> 00:30:10.990
I'm not going to get into
the religion wars over that.

00:30:11.130 --> 00:30:15.340
But if you've chosen Java,
and I see Objective-C anywhere

00:30:15.340 --> 00:30:17.580
in your project,
I know you've drawn one

00:30:17.580 --> 00:30:18.950
of those blue lines.

00:30:21.410 --> 00:30:25.070
Similarly, the next two actually
are not all that bad.

00:30:25.100 --> 00:30:27.220
I mean, you're working with the
EO Access framework.

00:30:27.220 --> 00:30:29.620
There's lots of benign reasons
to be down at that level,

00:30:29.620 --> 00:30:32.300
probably more than anything else here.

00:30:32.300 --> 00:30:36.850
But still, at that point,
you're down below the object level,

00:30:36.850 --> 00:30:41.170
and all I really want to do is
make sure you justify your use.

00:30:41.300 --> 00:30:42.740
The last one is a new one.

00:30:42.740 --> 00:30:46.300
I only really found out about
this in the last two months or so.

00:30:46.300 --> 00:30:51.300
I think it may be the result of
frustrated Objective-C programmers.

00:30:51.300 --> 00:30:54.590
This is an option they have
to do some very strange things

00:30:54.590 --> 00:30:56.300
while sticking with Java.

00:30:56.300 --> 00:31:00.920
When you have custom key-val code,
that means that you're doing

00:31:00.940 --> 00:31:05.660
things with the bindings or you're
doing things with the value for

00:31:05.840 --> 00:31:08.300
key on your enterprise objects.

00:31:08.300 --> 00:31:10.300
It's a relatively benign solution.

00:31:11.300 --> 00:31:17.470
The other instance of this is if
you're changing your enterprise

00:31:17.510 --> 00:31:22.520
objects so that they can tell,
based on a key value,

00:31:22.520 --> 00:31:24.720
whether or not you're asking for a,
you know,

00:31:25.010 --> 00:31:29.590
Let's say address from this particular
page or that particular page.

00:31:29.590 --> 00:31:33.970
You know, if you just say put an
asterisk on the end of the key,

00:31:33.990 --> 00:31:36.610
and you've got something
that can parse that out.

00:31:37.340 --> 00:31:39.020
That's relatively benign.

00:31:39.020 --> 00:31:40.100
Mostly it's a convenience.

00:31:40.100 --> 00:31:44.360
It keeps you from having to put methods
inside each of those components to go and

00:31:44.360 --> 00:31:51.110
get the value from the enterprise object
and manipulate it as that page wants it.

00:31:51.200 --> 00:31:56.200
I'm against it,
but I'm not going to push it real hard.

00:31:56.200 --> 00:31:57.200
The thing is that this opens up.

00:31:57.200 --> 00:31:59.440
It actually does,
and I kind of hate to say

00:31:59.440 --> 00:32:03.190
this because I'm telling you,
don't build the bomb this way.

00:32:03.200 --> 00:32:07.830
You can put anything in bindings,
and if you're overriding

00:32:07.880 --> 00:32:13.030
the take value for binding,
you can do anything with it.

00:32:13.200 --> 00:32:19.000
You can very easily just put a binding
in and it says as long as the binding

00:32:19.000 --> 00:32:24.550
starts with three exclamation points,
that means that the value that

00:32:24.560 --> 00:32:28.300
comes in is a block of Perl code,
and I want you to send that out to the

00:32:28.300 --> 00:32:30.830
Perl interpreter and take that value.

00:32:31.840 --> 00:32:35.370
And that actually I've seen once,
not with Pearl, but with something else.

00:32:35.590 --> 00:32:39.500
And that's exactly what I mean by,
you know, "Oh my God."

00:32:39.700 --> 00:32:43.080
That sort of thing is
really hard to document,

00:32:43.100 --> 00:32:46.570
too, because WAD files are not
where you're looking for code.

00:32:50.570 --> 00:32:55.550
And for, as we move more and more into,

00:32:56.190 --> 00:32:59.520
The broad developer community.

00:32:59.520 --> 00:33:03.330
More people are going to be looking
at this stuff in WebObjects Builder.

00:33:03.670 --> 00:33:07.750
And it's really hard to tell just as
you're zipping down through the bindings.

00:33:07.760 --> 00:33:10.100
You know,
this has an asterisk on the end.

00:33:10.170 --> 00:33:12.970
That means if it's a number coming in,
we're going to divide it

00:33:12.970 --> 00:33:14.600
by two before we use it.

00:33:14.780 --> 00:33:18.120
So, you know,

00:33:19.250 --> 00:33:20.190
I don't like that a lot.

00:33:20.390 --> 00:33:27.480
I think that there's a real possibility
for abuse right now on that.

00:33:27.490 --> 00:33:30.760
So let's assume you've managed to get
through design without any major efforts.

00:33:30.760 --> 00:33:33.400
You're on to prototyping.

00:33:33.800 --> 00:33:35.640
You've got to divide the
prototyping into two things.

00:33:35.810 --> 00:33:37.240
This is a customer issue.

00:33:37.240 --> 00:33:39.810
The user interface prototyping.

00:33:39.820 --> 00:33:41.520
Now, if you remember,
way back at the beginning,

00:33:41.520 --> 00:33:42.810
I told you what a spec is.

00:33:42.860 --> 00:33:47.050
And user interface prototyping
is writing the spec.

00:33:47.100 --> 00:33:49.520
And you have to have
the customer know that.

00:33:49.620 --> 00:33:53.150
Make them understand that until
you've locked down like 90% of

00:33:53.240 --> 00:33:57.000
the user interface to a level of
detail that you've got screenshots,

00:33:57.000 --> 00:33:59.500
they haven't yet specified the app.

00:33:59.750 --> 00:34:04.740
And all the work that you're doing
up to that point may not be final.

00:34:07.590 --> 00:34:08.500
Technical thing.

00:34:08.500 --> 00:34:11.690
That's where you're trying to decide
whether or not you can actually hit

00:34:11.770 --> 00:34:15.550
that airline reservation system,
whether you can integrate the credit

00:34:15.640 --> 00:34:18.500
card processing with the Oracle database,
that sort of thing.

00:34:18.500 --> 00:34:21.980
And you want to make the interface
for that as ugly as you can.

00:34:22.030 --> 00:34:27.710
You don't want to confuse the
customer into thinking there's

00:34:27.710 --> 00:34:31.170
any possibility that the code
you're writing now is anything but

00:34:31.170 --> 00:34:31.170
demonstrating that you can go do it.

00:34:31.330 --> 00:34:33.290
I like to say,
when you're doing the demos,

00:34:33.290 --> 00:34:38.300
you want to demo the user interface on a
Mac and demo the technical stuff on a PC.

00:34:38.300 --> 00:34:45.050
And if you do that, this throw-it-away
thing works on its own.

00:34:53.880 --> 00:34:54.800
When to construction.

00:34:54.800 --> 00:34:57.570
Here I'm mostly talking to the developer.

00:34:57.770 --> 00:35:00.110
Assume the project's going to
continue after you're gone.

00:35:00.360 --> 00:35:01.780
This is a long project.

00:35:01.830 --> 00:35:04.820
It's got to be at least six months.

00:35:04.880 --> 00:35:09.090
And you've got to be responsible.

00:35:09.430 --> 00:35:13.300
and I have some things to say
about responsibility in a bit.

00:35:13.300 --> 00:35:15.710
Overall though,
the construction of a WebObjects

00:35:15.710 --> 00:35:19.290
application is no different
than the rest of development.

00:35:19.300 --> 00:35:22.290
There's not much I can say about

00:35:22.570 --> 00:35:29.260
WebObjects technology-specific
things as you're writing the code.

00:35:29.260 --> 00:35:31.120
Two things, though,
that are really helpful,

00:35:31.190 --> 00:35:34.730
and unfortunately I don't
see enough of standardized.

00:35:34.780 --> 00:35:37.390
This idea of standardizing
keywords in your comments,

00:35:37.490 --> 00:35:39.090
and I'll have an example on this.

00:35:39.090 --> 00:35:44.150
It's really helpful to come up with
a list of keywords that someone

00:35:44.290 --> 00:35:48.120
can search through the code for,
and that list of keywords ought

00:35:48.120 --> 00:35:50.530
to be put in your repository.

00:35:50.530 --> 00:35:52.060
You can hear that again.

00:35:52.550 --> 00:35:56.340
Document, document, document.

00:35:56.460 --> 00:35:56.910
Okay?

00:35:56.910 --> 00:35:58.500
How about that?

00:35:58.570 --> 00:36:02.740
Anybody seen that kind of comment before?

00:36:02.840 --> 00:36:05.050
Interesting thing about that.

00:36:06.900 --> 00:36:09.460
The first, the first instance,
that's actually two comments.

00:36:09.460 --> 00:36:12.300
I mean, separated by an
indefinite amount of time.

00:36:12.300 --> 00:36:15.890
And the first, the first comment there
I sort of made up,

00:36:15.900 --> 00:36:18.660
although I've got,
I've seen something close to it.

00:36:18.660 --> 00:36:22.480
The frightening thing,
the second comment I lifted verbatim

00:36:22.510 --> 00:36:24.940
from an app that's in production.

00:36:25.170 --> 00:36:29.180
All I did was change the three
initials there at the end to my own,

00:36:29.260 --> 00:36:32.590
which may not have been all that
necessary because when I asked around,

00:36:32.710 --> 00:36:35.270
nobody could tell me who that was.

00:36:37.000 --> 00:36:38.760
That's what I want to see.

00:36:38.760 --> 00:36:40.780
And you don't have to
add every line like that.

00:36:41.120 --> 00:36:44.010
But when you're doing something like,
you know, clearly like that,

00:36:44.030 --> 00:36:48.640
that first thing there,
it's a line of nothing but keywords.

00:36:48.990 --> 00:36:52.260
It's great to have, you know,
fix me is a really common one.

00:36:52.490 --> 00:36:54.040
I think we all use that occasionally.

00:36:54.170 --> 00:36:57.080
But if you standardize and say, yes,
indeed, this is what we're going to

00:36:57.080 --> 00:36:59.900
use when we've got something
that needs to be looked at.

00:36:59.910 --> 00:37:04.350
If you can put keywords for the
dependencies of every version of

00:37:04.350 --> 00:37:08.690
things that you need to work with,
that's really helpful.

00:37:08.830 --> 00:37:11.260
You notice you've got enough
text there that no one's

00:37:11.260 --> 00:37:13.770
likely to go around and put a,
hmm, line after it.

00:37:14.930 --> 00:37:16.320
And I put my full name and a date.

00:37:16.330 --> 00:37:18.530
So at least, you know,
people may not remember who

00:37:18.530 --> 00:37:19.900
I am even with a full name.

00:37:19.900 --> 00:37:23.770
But there's a date there so they have
some clue as to when it was an issue.

00:37:23.900 --> 00:37:27.310
And the other nice thing
actually about doing the whole,

00:37:27.340 --> 00:37:31.770
the keywords for versions of stuff,
this is a 3-5 problem in theory.

00:37:31.770 --> 00:37:34.730
In practice,
I've completely made this up.

00:37:34.900 --> 00:37:38.100
What you need to do is
every time you upgrade to 4,

00:37:38.100 --> 00:37:41.710
somebody searches through
for all the 3-5 keywords,

00:37:41.840 --> 00:37:44.900
verifies whether or not
these comments are right.

00:37:45.010 --> 00:37:48.510
And changes the 3-5 to 4,
which means you've never got any

00:37:48.510 --> 00:37:52.900
issues that are more than one
version old of any of your products.

00:37:52.900 --> 00:37:54.890
And you'll really like that.

00:37:54.900 --> 00:37:56.730
Trust me.

00:37:57.220 --> 00:37:58.250
More construction things.

00:37:58.430 --> 00:38:02.100
At this point, the developers stopped
wanting to go to meetings.

00:38:02.100 --> 00:38:04.860
Really, the meetings have a purpose.

00:38:04.930 --> 00:38:09.400
It's up to your management
from a development standpoint,

00:38:09.400 --> 00:38:13.160
it's up to whoever it is you interface
to the rest of the team to make

00:38:13.160 --> 00:38:16.100
sure that you're not going to the
meetings you don't need to go to.

00:38:16.600 --> 00:38:19.390
And one of the things that
I hear every once in a while,

00:38:19.390 --> 00:38:22.080
and people try to convince
me this is a bad thing,

00:38:22.080 --> 00:38:28.100
12 of us trooped into a room,
five minutes later we walked out again.

00:38:28.100 --> 00:38:29.090
What a waste of time.

00:38:29.090 --> 00:38:31.590
No, that's perfect.

00:38:31.750 --> 00:38:34.440
If it took you an hour, that's bad.

00:38:34.500 --> 00:38:37.780
But to walk into a room,
walk out in five minutes,

00:38:37.830 --> 00:38:39.140
that means the system's working.

00:38:39.160 --> 00:38:41.090
It means everybody showed up
like they were supposed to.

00:38:41.430 --> 00:38:44.600
There's no open questions from
people who didn't show up,

00:38:44.730 --> 00:38:47.310
and everything's on track.

00:38:47.690 --> 00:38:50.920
If you were to take a look at it,
you'd find you'd take more time trying to

00:38:50.920 --> 00:38:54.920
coordinate among those 12 people whether
or not they needed to have a meeting

00:38:55.130 --> 00:38:57.320
than to just have them all show up.

00:38:57.950 --> 00:38:59.860
And this last item, clever is bad.

00:38:59.860 --> 00:39:05.880
You know, I tried to--I thought about
making this less bold.

00:39:05.970 --> 00:39:10.170
And I talked to other people in
my team about this concept and,

00:39:10.210 --> 00:39:13.390
you know, I thought that, you know,
maybe it's just me.

00:39:13.670 --> 00:39:17.760
And after talking to them,
I decided it deserves its own slide.

00:39:17.820 --> 00:39:18.660
Okay?

00:39:18.660 --> 00:39:20.590
Clever is bad.

00:39:20.590 --> 00:39:23.340
And keep in mind,
this is clever in terms of coding.

00:39:23.380 --> 00:39:25.160
This is not intelligent design.

00:39:25.280 --> 00:39:26.740
This is clever coding.

00:39:26.890 --> 00:39:28.660
And I have an example for you.

00:39:28.660 --> 00:39:31.880
I think probably the
cleverest I've ever been,

00:39:31.890 --> 00:39:37.120
which is to say the grossest
violation of this principle.

00:39:37.120 --> 00:39:39.350
Go back to 1992, I think it was.

00:39:39.350 --> 00:39:42.300
I was doing what was--what's
now Cocoa Development.

00:39:42.670 --> 00:39:46.280
And I really wanted a print
panel to work differently.

00:39:46.800 --> 00:39:51.170
So, I went into the debugger,
I disassembled the appropriate

00:39:51.170 --> 00:39:54.380
part of the print panel code,
I examined that and figured

00:39:54.380 --> 00:39:57.740
out the memory locations of the
private instance variables of it,

00:39:57.770 --> 00:40:01.670
and then with a little pointer
arithmetic and a little guessing,

00:40:01.670 --> 00:40:06.850
I managed to get it so when I wanted to,
I could stuff data into those places

00:40:07.010 --> 00:40:11.080
in memory that the print panel would
go look to see what its state was,

00:40:11.080 --> 00:40:12.360
and I could change it.

00:40:12.360 --> 00:40:14.360
And it worked.

00:40:15.100 --> 00:40:18.980
Uh, you know...

00:40:20.580 --> 00:40:24.140
This was code that I, in theory, owned.

00:40:24.330 --> 00:40:25.880
I was going to maintain.

00:40:26.020 --> 00:40:28.310
Nobody was paying me to do this.

00:40:28.430 --> 00:40:29.100
It was mine.

00:40:29.100 --> 00:40:34.270
This wasn't something I was leaving
behind for somebody at my expense.

00:40:34.820 --> 00:40:38.910
Although, I'm standing here,
and I've got an Apple badge

00:40:38.910 --> 00:40:42.680
on when I have a badge,
which means I'm not maintaining it.

00:40:42.790 --> 00:40:47.870
I think I know who originally
did have to maintain that,

00:40:47.930 --> 00:40:49.630
and I liked him.

00:40:49.810 --> 00:40:52.940
Even though there's maybe 20 lines
of code and I had a page and a half

00:40:52.940 --> 00:40:56.190
of documentation on that whole thing,
when I look back on it,

00:40:56.200 --> 00:41:00.780
I was much prouder of that
achievement then than I am now.

00:41:00.920 --> 00:41:05.170
And although it's hard for you to think
forward and imagine how am I going

00:41:05.170 --> 00:41:10.880
to feel about that 10 years from now,
it's a pretty good guideline.

00:41:11.770 --> 00:41:16.700
How would you feel if a
friend had to maintain this?

00:41:16.850 --> 00:41:19.950
Now, the three items there, I mean,
why is it bad?

00:41:20.050 --> 00:41:22.700
Outside of, you know, my story.

00:41:22.700 --> 00:41:26.410
Basically,
I had an even bolder version of this

00:41:26.430 --> 00:41:31.590
slide and I decided to tone it down
because probably without my words

00:41:31.590 --> 00:41:33.890
it would seem a little too harsh.

00:41:34.040 --> 00:41:35.150
But first you can fool yourself.

00:41:35.280 --> 00:41:37.660
And by that I mean a couple of things.

00:41:37.660 --> 00:41:41.170
But you can have a problem with,
you may not actually understand

00:41:41.170 --> 00:41:42.520
everything you're doing.

00:41:42.570 --> 00:41:44.000
You know, I think the print panel worked.

00:41:44.000 --> 00:41:45.780
It worked in all the cases I tested.

00:41:45.840 --> 00:41:48.220
But, I mean,
kind of wandering through the

00:41:48.220 --> 00:41:53.040
assembly code is not necessarily
the best way to be sure.

00:41:53.040 --> 00:41:56.660
If I had to go back to that now, I mean,
admittedly that's eight years ago.

00:41:56.670 --> 00:41:59.440
But, I mean, if I had to go back to
maybe even six months later,

00:41:59.470 --> 00:42:02.840
I may not know any idea
what it was I was doing.

00:42:02.880 --> 00:42:04.160
And that kind of follows on.

00:42:04.160 --> 00:42:06.200
You can fool your team
two different ways.

00:42:06.200 --> 00:42:08.180
You can fool them in coming up
with something that's so clever

00:42:08.180 --> 00:42:10.250
they have no idea how to use it.

00:42:10.950 --> 00:42:15.530
or you can fool them because
six months later you're gone.

00:42:15.530 --> 00:42:19.570
You're the new CTO at showmethemoney.com.

00:42:20.590 --> 00:42:22.590
They have to try to maintain it.

00:42:22.590 --> 00:42:24.450
And last, this is something that
people don't think of.

00:42:24.530 --> 00:42:28.750
You can fool us, and by this I mean the
engineering team at Apple,

00:42:28.890 --> 00:42:33.740
because everybody knows there's no
guarantee if you use private API.

00:42:33.740 --> 00:42:37.560
And of course, the print panel thing,
I knew there was no guarantee.

00:42:37.560 --> 00:42:41.380
But what you don't really get is
that there's not really a guarantee

00:42:41.480 --> 00:42:46.160
if you use public API in a way
that nobody ever thought you could.

00:42:46.160 --> 00:42:48.510
If you're depending upon
the order in which certain

00:42:48.510 --> 00:42:52.120
things happen to get called,
so you can stuff things into a request

00:42:52.420 --> 00:42:58.250
here and pick up the fact that those
values are in the response over there,

00:42:58.350 --> 00:43:01.560
you run a risk.

00:43:01.560 --> 00:43:03.880
The scariest thing that you can hear
from a project management standpoint when

00:43:03.880 --> 00:43:08.620
someone's showing off something cool is,
"Ooh, I bet Apple didn't know

00:43:08.620 --> 00:43:10.660
you could do that."

00:43:12.510 --> 00:43:14.140
Okay, so you got the app built, maybe.

00:43:14.380 --> 00:43:15.400
Testing.

00:43:15.510 --> 00:43:18.680
You need to have a real
separate environment for this.

00:43:18.780 --> 00:43:22.790
You need to get your customers
to duplicate the production

00:43:23.020 --> 00:43:26.150
as much as you possibly can.

00:43:27.060 --> 00:43:30.600
Testing web apps is a boring thing to do.

00:43:30.600 --> 00:43:34.070
Use automated tools for both the
regression testing and for load testing.

00:43:34.070 --> 00:43:37.510
Although it's occasionally,
it's kind of neat to just get the whole,

00:43:37.750 --> 00:43:40.430
you know,
accounting department to go at 4:00,

00:43:40.510 --> 00:43:41.760
come and hit the app.

00:43:41.760 --> 00:43:44.200
You've got to give them
a break in their day.

00:43:44.320 --> 00:43:47.760
You use the humans for
functional testing,

00:43:47.760 --> 00:43:50.640
but the other thing you want to do is
you want to have the occasional human

00:43:50.640 --> 00:43:54.960
stopping in doing your load testing
because you're going to gather stats both

00:43:55.140 --> 00:43:58.260
from the inside of the app in terms of,
you know,

00:43:58.350 --> 00:44:02.960
the woe stats things and from the
outside in terms of what the overall,

00:44:02.960 --> 00:44:06.540
you know, what a browser would see
in terms of response time.

00:44:06.620 --> 00:44:11.020
What you don't get is the human,
"I thought this page would go quicker."

00:44:12.320 --> 00:44:17.350
So, while you're doing the load testing,
just have a human sitting by

00:44:17.500 --> 00:44:19.840
doing some stuff and letting
them know how they feel about it.

00:44:20.020 --> 00:44:21.840
And we're back to meetings.

00:44:22.010 --> 00:44:25.680
Schedule the regular bug tracking
meetings and make people show up.

00:44:25.770 --> 00:44:30.010
Because, once again,
the developers are very busy trying

00:44:30.010 --> 00:44:35.560
to do things other than fix bugs
that someone mentioned a week ago.

00:44:35.740 --> 00:44:38.180
So, make sure that...

00:44:38.300 --> 00:44:40.030
The right people attend
each of those meetings,

00:44:40.090 --> 00:44:43.900
not everybody,
but that you have them to really,

00:44:43.900 --> 00:44:45.430
by the time you're down
to the testing phase,

00:44:45.430 --> 00:44:47.920
it's got to be daily.

00:44:50.700 --> 00:44:52.400
Performance.

00:44:52.410 --> 00:44:53.240
Now it works.

00:44:53.260 --> 00:44:57.240
How fast can it go?

00:44:57.250 --> 00:44:59.340
I'm cheating here.

00:44:59.420 --> 00:45:01.610
There were like three different
sessions you should have gone to if

00:45:01.680 --> 00:45:04.070
you wanted to know about performance.

00:45:04.460 --> 00:45:07.870
These are the questions
everybody asks though.

00:45:08.290 --> 00:45:12.670
And the real point of this actually is
not so much what there is to say here,

00:45:12.680 --> 00:45:14.910
it's where I'm saying it.

00:45:15.210 --> 00:45:18.500
If you haven't gotten to this far,
you can't answer those questions.

00:45:18.500 --> 00:45:21.620
And too often,
I run into a case when I'm doing proposal

00:45:21.620 --> 00:45:25.560
type things that someone's going to say,
"Well, I realize I haven't told

00:45:25.560 --> 00:45:29.110
you what the app does yet,
but how many boxes do I need?"

00:45:30.210 --> 00:45:32.380
You can't do it.

00:45:32.520 --> 00:45:37.880
I mean, I have tried to come up with
heuristics for this sort of thing,

00:45:37.910 --> 00:45:42.500
to just say, well, if you happen to have,
you know, a gigahertz Pentium machine

00:45:42.750 --> 00:45:46.820
running as your app server,
then assume that you can support,

00:45:46.820 --> 00:45:49.300
you know,
four transactions a second as long

00:45:49.300 --> 00:45:50.980
as no response is longer than X.

00:45:50.980 --> 00:45:52.370
Doesn't work.

00:45:52.370 --> 00:45:56.150
You really do need that because you're
either CPU-bound or you're going

00:45:56.150 --> 00:45:59.140
to be memory-bound on these things,
and you don't know which until you know

00:45:59.140 --> 00:46:00.170
how much memory you're going to have.

00:46:00.200 --> 00:46:06.480
So, never answer these questions until
after you've started testing.

00:46:07.030 --> 00:46:12.700
That given, assuming it's slow,
what do you want to do about it?

00:46:12.880 --> 00:46:14.940
First bullet item there,
I guess some people are going to say,

00:46:14.940 --> 00:46:16.940
"Well, that's obvious."

00:46:18.530 --> 00:46:25.140
But it isn't, because it's not just
what's most commonly slow.

00:46:25.140 --> 00:46:30.140
It's what's really slow that
kills you from a user perspective.

00:46:30.360 --> 00:46:34.130
Let's say you have a whole bunch of
pages that come back in two seconds

00:46:34.330 --> 00:46:36.980
and one page that comes back in ten.

00:46:37.030 --> 00:46:40.580
Now if that thing shows up
ten percent of the time,

00:46:40.580 --> 00:46:45.270
you can do the math and you end up with
a number that's three seconds or so

00:46:45.650 --> 00:46:48.990
for your response time within the app.

00:46:49.010 --> 00:46:51.100
That's not what the user sees at all.

00:46:51.160 --> 00:46:53.970
And for that I'm going to go back
to the whole grocery store thing,

00:46:54.050 --> 00:46:57.580
which is you've got your fifteen
items or less and you're standing

00:46:57.580 --> 00:46:59.970
behind somebody with a hundred items.

00:47:00.030 --> 00:47:03.050
And behind you is a bunch
of people who also have two,

00:47:03.050 --> 00:47:04.100
three items.

00:47:04.140 --> 00:47:06.620
Now from the checkout
clerk's perspective,

00:47:06.850 --> 00:47:10.680
one person took a lot of time,
other people just zipped right through.

00:47:11.680 --> 00:47:15.990
You're back there fuming.

00:47:16.120 --> 00:47:20.360
So the approach that grocery stores
take is they have 15 items or less.

00:47:20.430 --> 00:47:23.750
And I actually kind of advocate
the other side of this,

00:47:23.840 --> 00:47:27.430
which is you should have lines for
people with lots and lots of things

00:47:27.520 --> 00:47:29.710
and make them stand behind each other.

00:47:30.970 --> 00:47:33.410
And it sounds like a joke,
but it actually, it goes back to this,

00:47:33.500 --> 00:47:33.880
as well.

00:47:33.880 --> 00:47:37.330
I mean, as app design,
it's a good thing sometimes to

00:47:37.330 --> 00:47:41.220
recognize when an operation is
going to be expensive and shunt

00:47:41.220 --> 00:47:45.900
it off to the app server just
handling the expensive operations.

00:47:45.900 --> 00:47:47.550
And this is where the
human factor comes in,

00:47:47.650 --> 00:47:49.540
is people usually recognize that,
you know,

00:47:49.540 --> 00:47:50.880
this is going to take a long time.

00:47:50.880 --> 00:47:54.140
I want to find every hotel in Orlando.

00:47:54.250 --> 00:47:55.320
That's great.

00:47:55.320 --> 00:47:59.180
However, for the people who think they're
doing something that's really short

00:47:59.180 --> 00:48:03.870
and they end up behind somebody who's
looking for every hotel in Orlando,

00:48:03.910 --> 00:48:05.140
they're upset.

00:48:05.140 --> 00:48:07.720
So 90% of the time,
when you're looking to

00:48:07.730 --> 00:48:10.480
improve the performance,
it's data access.

00:48:10.480 --> 00:48:14.480
So you may look at
modifying the data model.

00:48:14.790 --> 00:48:19.020
Or you may look at customizing versions
of the data model for each of your apps.

00:48:19.070 --> 00:48:22.630
Because the ReadWrite app may have
a different need than the ReadOnly.

00:48:22.860 --> 00:48:25.030
And a lot of people don't
think in terms of that because

00:48:25.070 --> 00:48:26.700
you've got your data framework.

00:48:26.700 --> 00:48:29.320
Well, you don't have to have
just one data framework.

00:48:29.320 --> 00:48:32.670
You can have them optimized for the
uses that they're going to have.

00:48:32.690 --> 00:48:35.700
So think about that.

00:48:35.700 --> 00:48:38.570
And lastly,
manually fetching the data you need

00:48:38.570 --> 00:48:42.560
is something that we almost always
resort to in one case or another.

00:48:42.690 --> 00:48:46.700
And when I say manually,
it's not all that manual.

00:48:46.700 --> 00:48:52.280
What we're really saying here is rather
than configure a WoW display group

00:48:52.280 --> 00:48:56.600
with a data source to go and get data,
go ahead and create a

00:48:56.600 --> 00:48:58.280
fetch spec yourself.

00:48:58.660 --> 00:49:03.840
Fetch objects with it and pass the
array over to the display group.

00:49:03.840 --> 00:49:07.600
And what that can do is you can
then set things like the prefetching

00:49:07.720 --> 00:49:13.310
at a much finer granularity for
what's being used at the time.

00:49:13.940 --> 00:49:15.460
A little bit more on that data access.

00:49:15.540 --> 00:49:18.680
This is something I see
a little bit too much of.

00:49:18.680 --> 00:49:22.580
Don't have complicated bindings
that just keep dotting along.

00:49:22.580 --> 00:49:25.380
Because in the middle there,
you're not really sure,

00:49:25.380 --> 00:49:27.980
from a coding perspective,
how you get from manager

00:49:27.980 --> 00:49:30.580
to spouse up to car.

00:49:30.580 --> 00:49:33.790
That isn't even necessarily
all in one data source.

00:49:34.010 --> 00:49:38.230
To find out what the spouse's car is,
you may have to go up to

00:49:38.360 --> 00:49:41.080
some mainframe system.

00:49:41.140 --> 00:49:42.960
It's much better in
this case to go ahead,

00:49:42.960 --> 00:49:45.270
figure out the
relationships that you need,

00:49:45.270 --> 00:49:48.030
fetch the data for that,
and just let — you know,

00:49:48.130 --> 00:49:50.710
if you put that thing
inside a repetition,

00:49:50.840 --> 00:49:52.290
you'd be here forever.

00:49:52.290 --> 00:49:52.290
So,

00:49:53.230 --> 00:49:57.210
Anticipate the needs of your interface
elements and try to provide them

00:49:57.210 --> 00:50:01.320
with their data ahead of time so that
they don't have to do it themselves.

00:50:01.340 --> 00:50:04.100
They're not smart about
data access that way.

00:50:04.100 --> 00:50:07.520
And the last thing here,
you'd think you'd never have this,

00:50:07.520 --> 00:50:10.100
but you do,
is that customers will ask for,

00:50:10.100 --> 00:50:13.380
"I'd like the whole database, please."

00:50:13.860 --> 00:50:17.990
And sure, they understand that
the fetch takes forever,

00:50:17.990 --> 00:50:21.460
and it's making the app go slow,
but they don't realize that

00:50:21.460 --> 00:50:25.260
they're then transferring like 10
megabytes of data to their browser.

00:50:25.290 --> 00:50:28.520
And they wonder why
their network is slow.

00:50:28.580 --> 00:50:34.270
Why is my email not getting it every
time someone tries to run the app?

00:50:34.270 --> 00:50:34.270
So,

00:50:34.940 --> 00:50:35.730
Limit this stuff.

00:50:35.960 --> 00:50:39.580
I mean, at the very least,
go ahead and put it in a display

00:50:39.580 --> 00:50:42.040
group's turn on the batching.

00:50:42.090 --> 00:50:44.630
And if nothing else,
that's going to show them when they see

00:50:44.880 --> 00:50:49.130
they've got a zillion pages of batches,
what a silly idea it is to try

00:50:49.370 --> 00:50:51.630
to fetch all this data at once.

00:50:52.750 --> 00:50:54.050
Okay, you've gotten to deploying.

00:50:54.200 --> 00:50:55.190
You need a deployment team.

00:50:55.450 --> 00:50:55.920
Same thing.

00:50:55.940 --> 00:50:58.150
Not necessarily a whole big team.

00:50:58.310 --> 00:50:59.390
Could be a small team.

00:50:59.500 --> 00:51:01.110
Could be a guy.

00:51:01.470 --> 00:51:05.480
Cool thing about this is if you go back
to what I was saying about the builds,

00:51:05.510 --> 00:51:10.600
about the releases, about the testing,
you've got an environment that's

00:51:10.600 --> 00:51:14.360
just like it that you're going to go
to production on and your deployment

00:51:14.360 --> 00:51:18.240
team gets to practice every single
time you put out a test build.

00:51:18.240 --> 00:51:19.550
So they really know what
they're doing by that time.

00:51:19.630 --> 00:51:28.590
There shouldn't be any last minute,
"Do we know Solaris?" kind of questions.

00:51:30.430 --> 00:51:35.640
And gather as many stats as you can while
you actually got this thing running.

00:51:35.640 --> 00:51:36.980
But you don't want to impact performance.

00:51:36.980 --> 00:51:39.500
I don't want to see a bunch of
things logged out to the screen

00:51:39.500 --> 00:51:41.940
to let you know what's going on.

00:51:41.980 --> 00:51:45.560
I'm mostly here talking about, you know,
you obviously get the woe statistics.

00:51:45.560 --> 00:51:48.230
But also,
what you want to do is check the

00:51:48.230 --> 00:51:52.380
CPU loads on all the machines,
web server, app server, data servers,

00:51:52.560 --> 00:51:52.790
etc.

00:51:52.790 --> 00:51:54.580
Check the memory on all these things.

00:51:54.650 --> 00:51:55.830
I mean, it doesn't cost that much.

00:51:55.900 --> 00:51:59.990
Just go ahead and check these--checkpoint
these things once an hour forever.

00:52:00.040 --> 00:52:01.660
Because if you ever need
to know what happened,

00:52:01.670 --> 00:52:03.600
you've got knowledge.

00:52:03.600 --> 00:52:07.220
And, you know, knowledge is power.

00:52:07.270 --> 00:52:10.100
Last thing there, the application is not
finished when you deploy.

00:52:10.200 --> 00:52:13.290
That's a function of the kind of
customers we're talking about here and

00:52:13.340 --> 00:52:15.770
the kind of apps we're talking about.

00:52:17.800 --> 00:52:23.010
You can expect a feature is going
to not make it into version one.

00:52:23.850 --> 00:52:27.630
The only way it's not going
to be later than it is anyway.

00:52:28.280 --> 00:52:31.440
Therefore, there's always a version 1.1.

00:52:31.520 --> 00:52:33.880
And from a management perspective,
that means you need to be

00:52:33.880 --> 00:52:37.140
thinking about who your
maintenance team is ahead of time.

00:52:37.240 --> 00:52:39.660
And you need to figure out
not just your developers.

00:52:39.860 --> 00:52:44.680
Your maintenance team needs some
of the same overhead as the rest.

00:52:45.000 --> 00:52:46.370
Some of this stuff can be shared.

00:52:46.380 --> 00:52:49.680
Some of it can't.

00:52:50.580 --> 00:52:54.840
This is a sad thing for
the management types.

00:52:54.860 --> 00:52:56.170
Probably a good thing for
the development types.

00:52:56.260 --> 00:52:58.140
I didn't put this on the slide here.

00:52:58.300 --> 00:53:03.160
The biggest issue that I run
into with deploying a big app

00:53:03.880 --> 00:53:04.940
"Attrition.

00:53:04.940 --> 00:53:08.010
This is the point when everyone leaves.

00:53:08.090 --> 00:53:12.330
And really when you're using
something like WebObjects,

00:53:12.350 --> 00:53:16.280
you've got smart people and
a high-demand technology.

00:53:16.280 --> 00:53:21.430
At any moment, you have to be prepared to
have somebody walk in and say,

00:53:21.430 --> 00:53:25.520
'I'm gone in two weeks.' When you deploy,
there's a real good chance

00:53:25.520 --> 00:53:28.920
you're going to lose like 40%
of your folks in the next month,

00:53:29.360 --> 00:53:32.700
because there's a lot of people
who want to see that make it.

00:53:32.820 --> 00:53:34.740
And then that's when they'll move on.

00:53:34.790 --> 00:53:38.550
And if you're not prepared for that,
it's devastating.

00:53:40.060 --> 00:53:42.090
Hey, what went wrong?

00:53:42.280 --> 00:53:45.590
This is actually not even my slide,
essentially.

00:53:45.590 --> 00:53:48.990
This is a known thing
within software development.

00:53:48.990 --> 00:53:51.960
If you never manage
to get it done at all,

00:53:52.010 --> 00:53:54.000
it's management's fault.

00:53:54.170 --> 00:53:55.520
No doubt about it.

00:53:55.520 --> 00:53:57.600
No matter how bad your
engineering might be,

00:53:57.610 --> 00:53:59.000
it's management's fault.

00:53:59.320 --> 00:54:00.770
They planned poorly.

00:54:00.980 --> 00:54:02.900
They didn't follow their plan.

00:54:02.900 --> 00:54:06.000
They picked the wrong people.

00:54:06.010 --> 00:54:10.390
They used Windows, whatever.

00:54:11.100 --> 00:54:14.890
And the second half of that really
is if you're stuck at version one,

00:54:14.890 --> 00:54:17.880
then your engineers did a lousy job.

00:54:18.140 --> 00:54:20.900
What's unsaid here,
but I think we all understand,

00:54:20.900 --> 00:54:24.040
is that when they're not within earshot,
it's the customer's fault.

00:54:24.570 --> 00:54:26.060
Really.

00:54:26.440 --> 00:54:29.620
But I'd like to switch that around,
because despite all the

00:54:29.710 --> 00:54:32.410
things that are in the way,
actually,

00:54:32.800 --> 00:54:35.650
Most of these apps actually do field,
and they're successful.

00:54:35.780 --> 00:54:37.350
So let's think, what went right?

00:54:37.580 --> 00:54:39.000
Who gets the credit?

00:54:39.130 --> 00:54:42.330
And I got to say, I don't care how good
your engineering is.

00:54:42.420 --> 00:54:46.530
If you actually deploy version one,
management gets the credit.

00:54:46.620 --> 00:54:49.780
And when I say that,
I don't mean that deploying version

00:54:49.870 --> 00:54:55.030
one means you got all the features in,
or even that you got it all in on time.

00:54:55.030 --> 00:54:55.030
It means that

00:54:55.190 --> 00:54:58.750
Things went wrong and the customer
didn't fire you and the team

00:54:58.750 --> 00:55:01.940
didn't quit and you got there.

00:55:02.200 --> 00:55:07.370
The second thing there is, you know,
credit the engineering when the

00:55:07.370 --> 00:55:09.960
customer comes back and says,
"I know I only wanted

00:55:09.960 --> 00:55:11.180
one language before.

00:55:11.400 --> 00:55:13.100
Now it needs four languages.

00:55:13.100 --> 00:55:17.020
I know I was going to use this
service to validate credit cards,

00:55:17.170 --> 00:55:22.100
and it will have a response time of
maybe five seconds with 100% reliability,

00:55:22.100 --> 00:55:25.440
but I can get a lot cheaper
thing from somebody who will

00:55:25.440 --> 00:55:29.990
respond in two seconds with 75%
reliability." And that's actually

00:55:29.990 --> 00:55:31.760
an example from my own experience.

00:55:32.100 --> 00:55:34.730
If you get that far, great.

00:55:34.840 --> 00:55:38.390
At that point, you want to congratulate
the engineering folks.

00:55:38.870 --> 00:55:41.300
You don't want to
congratulate them too early,

00:55:41.300 --> 00:55:41.730
though.

00:55:41.840 --> 00:55:43.310
That's when they leave.

00:55:45.390 --> 00:55:49.940
And to be honest, to be fair,
I want to be fair,

00:55:50.010 --> 00:55:53.580
also not on this bullet
item is if it works,

00:55:53.700 --> 00:55:55.600
particularly if they
happen to be an earshot,

00:55:55.720 --> 00:55:57.390
credit the customer.

00:55:58.440 --> 00:56:02.300
Never hurts, and it's actually true.

00:56:02.350 --> 00:56:06.900
A lot of times when I talk to engineering
teams about their experiences,

00:56:06.900 --> 00:56:10.580
you know, how's it going, I hear,
"My customer doesn't

00:56:10.580 --> 00:56:11.940
understand the problem.

00:56:12.000 --> 00:56:15.630
My customer can't make a
decision." And the ever popular,

00:56:15.630 --> 00:56:17.560
"My customer is stupid."

00:56:18.670 --> 00:56:20.360
And see, it's not true.

00:56:20.360 --> 00:56:21.400
The customer is not stupid.

00:56:21.400 --> 00:56:26.690
The customer has different priorities
than you and doesn't necessarily have

00:56:26.690 --> 00:56:28.440
all the information to make a decision.

00:56:28.570 --> 00:56:36.290
So if I can apologize to folks who maybe
missed lunch and are thinking that the

00:56:36.290 --> 00:56:40.100
candy is really a good idea right now,
I'd like to go back to the grocery

00:56:40.100 --> 00:56:42.300
store just one more time as an analogy.

00:56:42.300 --> 00:56:44.470
I mean, if you've got an analogy,
you've got a metaphor,

00:56:44.470 --> 00:56:45.800
just pound it into the ground.

00:56:45.820 --> 00:56:49.930
Follow your customers sometime to the
grocery store and think in terms of,

00:56:49.930 --> 00:56:52.410
you know,
they're heading down the cereal aisle

00:56:52.410 --> 00:56:54.770
and they stop by the Frosted Flakes.

00:56:54.770 --> 00:56:58.570
And if you're going to have a, you know,
a metropolitan area,

00:56:58.580 --> 00:57:01.240
chances are they've got choices there.

00:57:01.240 --> 00:57:03.600
They're going to have the
Kellogg's Frosted Flakes,

00:57:03.600 --> 00:57:05.200
you know, the national brand.

00:57:05.200 --> 00:57:08.060
They're going to have at least, you know,
maybe a regional brand,

00:57:08.060 --> 00:57:09.680
but certainly a store brand of it.

00:57:09.680 --> 00:57:11.270
And, you know,
they may pick up the boxes,

00:57:11.370 --> 00:57:13.240
they'll look at the
nutritional information,

00:57:13.240 --> 00:57:14.240
something like that.

00:57:14.240 --> 00:57:16.540
But, you know,
they'll put them down and then

00:57:16.590 --> 00:57:18.190
they've got a choice to face.

00:57:18.240 --> 00:57:22.240
You know, okay,
the national brand comes with QuickTime,

00:57:22.240 --> 00:57:26.990
which is cool.

00:57:27.910 --> 00:57:29.100
The local brand?

00:57:29.260 --> 00:57:30.690
It's cheaper.

00:57:30.800 --> 00:57:31.680
And what happens?

00:57:31.860 --> 00:57:36.130
Sometime within like 10 seconds,
they pick up a box, put it in the basket,

00:57:36.130 --> 00:57:37.330
they move on.

00:57:37.730 --> 00:57:42.960
Nobody ever complains that the
local brand doesn't have QuickTime.

00:57:43.000 --> 00:57:45.500
Nobody ever complains the
Frosted Flakes are too expensive

00:57:45.500 --> 00:57:46.800
compared to the local brand.

00:57:46.800 --> 00:57:50.680
So when you're doing

00:57:50.990 --> 00:57:54.820
Those kinds of things with your customer,
when you're trying to tell them bad news,

00:57:54.970 --> 00:57:59.220
schedule slippage, whatever,
what you need to do is very simple.

00:57:59.280 --> 00:58:01.080
You lay out the options for them.

00:58:01.140 --> 00:58:05.140
You give them the consequences
of each of the options they have.

00:58:05.230 --> 00:58:08.700
You make it very clear,
"We can do this your way,

00:58:09.020 --> 00:58:15.120
but there's a good chance if we lose
this guy over here six months from now,

00:58:15.190 --> 00:58:17.130
we'll have to pull that feature
because we can't maintain it."

00:58:18.130 --> 00:58:20.000
Give the customer that
kind of information,

00:58:20.000 --> 00:58:23.070
the customer will make a decision.

00:58:23.160 --> 00:58:26.800
Once they've made the decision,
document the decision.

00:58:26.930 --> 00:58:29.260
Put it in your repository.

00:58:31.270 --> 00:58:35.480
So, in summary, big projects are hard.

00:58:35.510 --> 00:58:36.200
They are.

00:58:36.430 --> 00:58:38.200
But that's all big projects.

00:58:38.210 --> 00:58:40.990
That's not just WebObjects projects.

00:58:41.260 --> 00:58:42.890
Basically,
if you've got anybody who's ever done

00:58:42.890 --> 00:58:46.970
a hard project in any other technology,
they can manage a big

00:58:47.070 --> 00:58:49.200
project in WebObjects.

00:58:49.230 --> 00:58:53.380
And WebObjects helps because, you know,
we're always cutting steps.

00:58:53.520 --> 00:58:57.840
So what is a hard project now and
is a big project and requires a big

00:58:57.840 --> 00:59:00.380
team this year may not next year.

00:59:00.640 --> 00:59:04.610
And last thing is, I mean,
it's not really everybody is

00:59:04.640 --> 00:59:06.160
suited for the big projects.

00:59:06.220 --> 00:59:08.690
I mean, some people just, uh...

00:59:08.960 --> 00:59:10.380
They want to be too creative.

00:59:10.430 --> 00:59:12.860
They don't like the structure.

00:59:12.920 --> 00:59:13.440
And that's fine.

00:59:13.450 --> 00:59:15.960
There's lots of places for that.

00:59:15.960 --> 00:59:19.000
But, you know,
if you can stick it out in there,

00:59:19.000 --> 00:59:22.630
it's--there's really an immense sense of
pride in having done something like that.

00:59:22.720 --> 00:59:24.900
It's very much like
building the tall building.

00:59:25.030 --> 00:59:29.570
And what you'll find is that no matter
how many little projects you might do,

00:59:29.570 --> 00:59:31.970
it's always the big
projects that you remember.

00:59:32.110 --> 00:59:34.920
And incidentally,
it's always the big projects

00:59:34.920 --> 00:59:36.410
you put on your resume.

00:59:37.560 --> 00:59:40.480
So, because we are so close
to the end of this,

00:59:40.600 --> 00:59:42.170
there's like nothing else you can go to.

00:59:42.170 --> 00:59:45.150
If you haven't learned by now,
all you've really got is the

00:59:45.150 --> 00:59:48.500
feedback forum to complain
about the last 17 sessions.

00:59:50.610 --> 00:59:53.160
Most of the For More information
you must have seen before,

00:59:53.160 --> 00:59:57.210
and the WebObjects lab is closed,
so sorry about that.

00:59:58.630 --> 01:00:02.160
You must have seen these names by now,
Tony and Ernest.

01:00:02.190 --> 01:00:05.550
If you got any questions
about all this stuff,

01:00:05.560 --> 01:00:07.940
even something that's
specifically for me,

01:00:07.990 --> 01:00:09.250
go ahead and send it to Ernie.

01:00:09.360 --> 01:00:12.490
Ernie will route it to me.

01:00:12.660 --> 01:00:14.790
And now we're on to Q&A.