WEBVTT

00:00:07.740 --> 00:00:09.990
Ladies and gentlemen,
please welcome manager

00:00:10.090 --> 00:00:13.580
for the printing group,
Paul Danbold.

00:00:13.820 --> 00:00:18.510
Thank you.

00:00:26.800 --> 00:00:28.250
That's me.

00:00:28.590 --> 00:00:32.100
How many people came to the
printing session this morning?

00:00:32.620 --> 00:00:33.480
I reckon that's most.

00:00:33.480 --> 00:00:38.050
So you saw a lot of the things
that we can do with printing,

00:00:38.120 --> 00:00:41.750
specifically on 10 this morning,
and the focus for this session is

00:00:41.780 --> 00:00:43.170
going to be on how you do that.

00:00:43.220 --> 00:00:46.240
So we're going to be
looking at some code.

00:00:46.240 --> 00:00:50.820
We'll start off and take you
through some of the session APIs.

00:00:50.840 --> 00:00:55.770
If you've got CarbonLib, let's see,
the early 1.1 builds,

00:00:55.770 --> 00:00:58.960
you'll have probably seen
them in the header files.

00:00:58.970 --> 00:01:03.250
Certainly they're in DP3 and DP4,
so we would like you to start using them,

00:01:03.250 --> 00:01:04.640
and we'll take you through those.

00:01:04.640 --> 00:01:08.810
The next thing we'll do is we'll
show you how we were able to

00:01:08.910 --> 00:01:11.970
display the print dialogs as sheets,
and that's something

00:01:11.970 --> 00:01:12.840
you saw this morning.

00:01:14.260 --> 00:01:19.340
Then I'm going to talk a little
bit about the issues to do with the

00:01:19.990 --> 00:01:25.030
Print dialogs and issues for people
who want to do non-printing type

00:01:25.030 --> 00:01:29.470
applications but still using the
printing system or printing without a UI.

00:01:29.500 --> 00:01:31.720
We'll talk a little bit
about Post-Crit printing.

00:01:31.830 --> 00:01:36.310
Then, I guess the main topic for
today is how to write a plug-in,

00:01:36.380 --> 00:01:39.000
how to add a panel to the print dialog.

00:01:39.060 --> 00:01:41.130
If we have time,
we'll have a Q&A session.

00:01:41.200 --> 00:01:45.110
Although I should point out now we've got
a feedback forum later on this afternoon.

00:01:46.210 --> 00:01:49.260
Quite a lot of the things we've got
to show you today don't look too good

00:01:49.310 --> 00:01:51.600
at 36 point on a PowerPoint slide,
so we'll be using our

00:01:51.710 --> 00:01:54.170
favorite application,
Project Builder,

00:01:54.210 --> 00:01:56.400
and taking you through some code.

00:01:57.250 --> 00:02:00.950
So, back by popular demand,
to talk about the session APIs,

00:02:00.980 --> 00:02:03.600
we've got Alan,
Alan Beck from the printing team.

00:02:03.680 --> 00:02:06.180
He's going to take that first topic.

00:02:11.780 --> 00:02:12.700
Thank you, Paul.

00:02:12.700 --> 00:02:18.020
So basically, what I'm,
first I want to go through is

00:02:18.020 --> 00:02:23.020
basically the major objects that are,
an application would deal with

00:02:23.200 --> 00:02:26.610
when you're printing through
the Carbon Printing Manager.

00:02:26.700 --> 00:02:32.700
The first two are basically the PM page,
let's see, the PM page format and

00:02:32.700 --> 00:02:34.840
the PM print settings.

00:02:34.840 --> 00:02:39.760
These basically replace the
old 128 byte print record,

00:02:39.760 --> 00:02:41.730
which we are so glad to get rid of.

00:02:41.760 --> 00:02:49.840
The PM page format is basically,

00:02:50.580 --> 00:02:54.670
Relevant to all the options that are
dealing with the page setup dialog

00:02:55.090 --> 00:03:03.000
and basically is how it relates to
imaging of the document's pages.

00:03:03.070 --> 00:03:05.640
That is basically what
should be saved in the,

00:03:05.640 --> 00:03:08.380
what is being saved in
the page format object.

00:03:08.500 --> 00:03:12.660
This object should be flattened
and saved with the document,

00:03:12.740 --> 00:03:15.490
kind of like the old print record was.

00:03:15.780 --> 00:03:21.160
And another point to be made about this
is you can use the accessor functions to

00:03:21.160 --> 00:03:29.720
get the data out of the object without
or outside of the PMBGN and PMEND calls.

00:03:30.160 --> 00:03:37.150
And one last thing about this is it is
extensible with the application data.

00:03:37.520 --> 00:03:40.960
Then we have the print settings
again which basically is normally

00:03:40.960 --> 00:03:44.320
not saved with the document.

00:03:44.320 --> 00:03:47.700
And here again it is extensible
with application data.

00:03:48.680 --> 00:03:50.860
Thirdly is the PM Print Context.

00:03:51.100 --> 00:03:55.520
Basically this is an opaque
graph port that is used to image

00:03:55.530 --> 00:03:57.810
pages within the print loop.

00:03:59.140 --> 00:04:00.670
Then we come over to
the PM Print session.

00:04:00.800 --> 00:04:06.040
This is the major change that we
have added to the PM application,

00:04:06.040 --> 00:04:08.900
.hpm application since last WWDC.

00:04:09.040 --> 00:04:14.160
It enables the application to have
multiple concurrent printing sessions.

00:04:14.370 --> 00:04:17.470
is also needed to enable
the document modal printing

00:04:17.470 --> 00:04:20.310
which I demoed this morning.

00:04:20.950 --> 00:04:25.800
For multi-threaded apps,
each thread can have one or more

00:04:25.800 --> 00:04:31.100
of these sessions attached to it,
but multi-threaded apps can only,

00:04:31.110 --> 00:04:35.490
a session cannot be shared
between these multiple threads.

00:04:36.830 --> 00:04:40.430
PM page format and PM print
settings objects can be shared

00:04:40.430 --> 00:04:43.060
between multiple print sessions.

00:04:43.180 --> 00:04:46.290
And lastly, I'd like to point out that

00:04:46.460 --> 00:04:49.430
A session can only display
one printing dialog at a time.

00:04:49.600 --> 00:04:53.780
In other words, you can't have a,
in the document modal case,

00:04:53.870 --> 00:04:58.200
you can't have one document
showing a print dialog,

00:04:58.200 --> 00:05:00.040
another document showing
another print dialog,

00:05:00.260 --> 00:05:01.390
sharing the same session.

00:05:01.390 --> 00:05:03.600
That's not allowed.

00:05:04.740 --> 00:05:08.560
Then we go to the PM dialog,
which is basically our

00:05:08.840 --> 00:05:11.930
object for the print dialogs.

00:05:11.930 --> 00:05:16.090
And then lastly we have the PM printer,
which basically represents

00:05:16.160 --> 00:05:17.600
the target printer.

00:05:17.790 --> 00:05:20.670
You use the accessor functions
of this object to get specific

00:05:21.050 --> 00:05:26.120
features about the printer,
such as driver version, resolution,

00:05:26.270 --> 00:05:29.680
PPD file that's associated with it.

00:05:30.880 --> 00:05:35.120
Now I'd like to go talk about the
differences between the mapping between

00:05:35.120 --> 00:05:37.970
the session and non-session APIs.

00:05:37.990 --> 00:05:40.390
Basically,
as you can tell from this slide,

00:05:40.390 --> 00:05:45.250
there's basically a one-to-one mapping.

00:05:46.400 --> 00:05:46.410
PMBegin,

00:05:47.150 --> 00:05:52.460
This is maps to PM create session, PMN,
maps to PM release.

00:05:52.470 --> 00:05:57.500
And basically the rest of them are
the same API just with the session

00:05:57.530 --> 00:06:02.660
added to the name and the session,
the PM session as basically the first

00:06:02.660 --> 00:06:05.270
parameter to any of these calls.

00:06:06.280 --> 00:06:12.910
With that, I would like to go over to
demo machine and show you

00:06:15.310 --> 00:06:25.950
A side by side comparison of a PM session
and PM non session and PM session apps.

00:06:29.280 --> 00:06:30.190
Here we are.

00:06:30.190 --> 00:06:30.640
Okay.

00:06:30.760 --> 00:06:34.790
Basically,
here we have... This is the print loop.

00:06:34.880 --> 00:06:37.550
This is our sample print
loop in the non-session case,

00:06:37.630 --> 00:06:40.590
and here we should have...

00:06:41.250 --> 00:06:44.090
The session with using sessions.

00:06:44.100 --> 00:06:46.660
So basically, they're basically the same.

00:06:46.750 --> 00:06:48.000
Let's scroll down a bit.

00:06:48.190 --> 00:06:49.090
There's this.

00:06:49.100 --> 00:06:50.850
Okay, here's the main.

00:06:51.000 --> 00:06:53.570
So everything starts.

00:06:54.800 --> 00:06:58.910
Let's go over here and scroll down here.

00:06:58.910 --> 00:07:00.360
There we go.

00:07:02.340 --> 00:07:07.150
Basically here we have the
PM Begin on this side and the

00:07:07.280 --> 00:07:09.810
PM Create session over here.

00:07:10.110 --> 00:07:14.100
And then we basically go down
on through and then we basically

00:07:14.100 --> 00:07:18.900
convert the old print record and
then do the page setup dialog.

00:07:19.020 --> 00:07:23.390
Over here it's the same thing except
we have PM session convert old print

00:07:23.390 --> 00:07:28.240
record which you can see passes in the
print session as the first parameter.

00:07:28.340 --> 00:07:31.430
And do the same thing
down here with page setup.

00:07:31.650 --> 00:07:33.890
And print dialog.

00:07:33.990 --> 00:07:38.500
Now we'll just go on down to the,
basically the same thing.

00:07:38.580 --> 00:07:41.890
We have,
basically in the page setup dialog we're

00:07:41.970 --> 00:07:45.520
trying to create a page format object.

00:07:45.860 --> 00:07:53.260
Then basically, and this one here is
not a session based API.

00:07:53.340 --> 00:07:56.710
And let's go over here, actually this,

00:07:59.100 --> 00:08:02.060
Basically,
the non-session way of doing it is

00:08:02.060 --> 00:08:07.400
doing a PM new page format and with
sessions it is a PM create page format.

00:08:07.540 --> 00:08:12.590
And then basically we go down
and validate the page format and

00:08:12.590 --> 00:08:15.890
then here in the session case
we just pass the print session.

00:08:16.120 --> 00:08:19.540
And then the same thing
with the print dialog.

00:08:19.630 --> 00:08:24.230
Basically,
we try to create a new PM setting.

00:08:24.460 --> 00:08:26.940
Here we do a new print settings.

00:08:27.910 --> 00:08:31.810
And here we do it to create with
the session API and the new print

00:08:31.810 --> 00:08:34.600
settings is the non-session API.

00:08:34.760 --> 00:08:35.800
And do a validate.

00:08:35.800 --> 00:08:38.850
One thing that we would like
to encourage our developers,

00:08:38.850 --> 00:08:45.800
application developers to do is before
putting up the print dialog to basically

00:08:45.800 --> 00:08:49.800
set the page range in the page format.

00:08:49.800 --> 00:08:54.890
This allows us when we put up the
dialog to give some clue to the user

00:08:55.330 --> 00:08:57.800
as in the length of the document.

00:08:57.890 --> 00:09:01.540
So if he ever wants to do a page range,
he actually,

00:09:01.540 --> 00:09:05.800
we can actually tell the user, you know,
what the last page of the document is.

00:09:05.800 --> 00:09:08.700
And they will get some clue
as to what they might want to

00:09:08.910 --> 00:09:10.790
input into those two edit boxes.

00:09:10.800 --> 00:09:16.370
Then here we just do the print
dialog and here we do the.

00:09:18.400 --> 00:09:20.460
PM Session Print Dialog.

00:09:20.500 --> 00:09:23.670
And then another thing I want
to talk to you is about the new,

00:09:23.830 --> 00:09:28.280
basically how we're
recommending the new Print Loop.

00:09:30.000 --> 00:09:38.200
[Transcript missing]

00:09:39.400 --> 00:09:44.660
And then basically get the first page.

00:09:44.710 --> 00:09:48.950
Another thing we want to make sure that
you remember to do is to only print

00:09:49.160 --> 00:09:51.900
the pages that the user has specified.

00:09:51.960 --> 00:09:57.940
Don't expect the printing system
to skip pages that are not in the

00:09:58.010 --> 00:09:59.960
page range that the user specified.

00:10:00.170 --> 00:10:05.250
So we will print every page that is
spooled to us or that is imaged to us.

00:10:08.150 --> 00:10:13.730
Then basically,
here's the actual print loop.

00:10:15.800 --> 00:10:22.180
Here we have the begin document,
PM session begin document,

00:10:22.360 --> 00:10:23.800
PM session end document.

00:10:24.500 --> 00:10:28.790
Basically then we loop through the pages,
start the PM begin page,

00:10:28.800 --> 00:10:30.740
and over here is the
PM session begin page.

00:10:30.800 --> 00:10:36.330
Another thing that you have to make
sure you do is make sure you set the

00:10:36.330 --> 00:10:40.800
port before drawing each of the pages.

00:10:40.800 --> 00:10:48.780
You cannot guarantee that the port is
the correct port during your draw page.

00:10:48.780 --> 00:10:52.700
So you have to remember to
make sure you set the port.

00:10:53.330 --> 00:10:58.040
Basically here we do the draw page
and then we start backing it out

00:10:58.060 --> 00:11:00.720
which is the PM session end page.

00:11:00.910 --> 00:11:05.440
End document and then basically
at the end report any errors.

00:11:05.440 --> 00:11:10.080
One thing I do want to remind you of is,
another thing I want to remind you of,

00:11:10.170 --> 00:11:13.620
is the objects are ref counted.

00:11:13.620 --> 00:11:18.100
So basically you can see here when
we're done doing the print loop we

00:11:18.100 --> 00:11:22.880
do a release of the page format,
a release of the print settings,

00:11:23.080 --> 00:11:27.420
and finally a release of the
print session that you've created.

00:11:27.550 --> 00:11:32.150
Ref counting is happening,
so we want to make sure,

00:11:32.150 --> 00:11:36.310
remember to release the
objects that you've created.

00:11:36.910 --> 00:11:41.090
And that's basically all I would like
to talk to you about the print loop.

00:11:41.100 --> 00:11:43.550
If you go back to the slides.

00:11:50.640 --> 00:11:53.740
So basically some summary points,
hints and tips for Carbon printing.

00:11:53.750 --> 00:11:57.110
As I said before,
remember to set the printing port

00:11:57.110 --> 00:12:02.500
with each call to PMBegin page,
after the call to PMBegin page.

00:12:03.280 --> 00:12:05.850
Remember to spool only the
pages selected by the user.

00:12:06.110 --> 00:12:09.590
We will print every page
that is spooled to us.

00:12:12.460 --> 00:12:15.950
The third point is on Mac OS X,
let us display the

00:12:15.950 --> 00:12:17.800
schooling progress dialog.

00:12:17.820 --> 00:12:20.590
We will be putting up
the progress dialog.

00:12:21.060 --> 00:12:23.550
And that will be the way
that the user will be able to

00:12:23.650 --> 00:12:27.070
cancel the spooling of the job.

00:12:28.550 --> 00:12:31.350
And then call PM session set
error to report any errors

00:12:31.380 --> 00:12:34.340
that occur during page drawing.

00:12:34.340 --> 00:12:39.830
We cannot detect every error that you may
encounter when you're drawing your pages,

00:12:39.840 --> 00:12:43.920
such as QD errors or
something of the sort.

00:12:43.920 --> 00:12:46.920
So therefore,
make sure that you set the-- if

00:12:46.920 --> 00:12:50.910
you call PM session set error,
then the print loop-- we will

00:12:51.000 --> 00:12:56.270
cancel out of the print loop
and you can deal with the error.

00:12:57.330 --> 00:13:00.260
That's basically all on
the basic Carbon printing.

00:13:00.260 --> 00:13:02.460
Now I'd like to talk
about the printing dialog.

00:13:02.830 --> 00:13:05.190
Getting the printing dialog
to show up as sheets.

00:13:05.750 --> 00:13:11.190
Basically, we have two new APIs that
we're asking developers to use.

00:13:11.240 --> 00:13:14.200
The first one is PM Session Use Sheets.

00:13:14.200 --> 00:13:16.730
Basically, three basic parameters.

00:13:16.740 --> 00:13:20.200
The first one is the session,
which I talked about.

00:13:20.200 --> 00:13:22.200
The second one is the document window.

00:13:22.200 --> 00:13:26.200
That is the document window that you
want the sheet to appear attached to.

00:13:26.930 --> 00:13:32.130
Basically, it's your document window.

00:13:32.170 --> 00:13:36.810
The third parameter is basically a

00:13:37.310 --> 00:13:42.890
Proc Pointer, or UPP,
and this is what gets called when the

00:13:43.100 --> 00:13:44.760
User dismisses the dialog.

00:13:44.830 --> 00:13:47.970
One thing to remember about
when you're using Sheets,

00:13:48.110 --> 00:13:55.070
your call to PM session print dialog is
that it will return immediately to you.

00:13:55.300 --> 00:14:01.720
As in before, if you don't use this call,
basically the call to PM print

00:14:02.270 --> 00:14:07.800
dialog will not return until the
user has dismissed the dialog.

00:14:07.800 --> 00:14:11.440
But if you're using Sheets,
it will return immediately to you and

00:14:11.440 --> 00:14:17.360
this sheet done proc will get called
when the user dismisses the dialog.

00:14:18.230 --> 00:14:21.690
And this is a sample of a
sheet done callback proc.

00:14:21.800 --> 00:14:25.860
What we give back to you when
the user misses the dialog is

00:14:25.860 --> 00:14:28.010
basically the print session again.

00:14:28.120 --> 00:14:33.570
The document window that the
dialog is attached to again so

00:14:33.570 --> 00:14:36.210
you can get any data you need to.

00:14:36.710 --> 00:14:40.540
And the last parameter is accepted
which basically did the user

00:14:40.670 --> 00:14:42.690
cancel or print out of the dialog.

00:14:43.200 --> 00:14:47.140
Now what I would like to do
again is show you how easy it is,

00:14:47.170 --> 00:14:53.970
if you go back to the demo machine,
how easy it is to convert your app

00:14:55.830 --> 00:14:58.750
To using sheets,
if you're already using the

00:14:58.750 --> 00:15:03.100
session APIs and you have your
application split up correctly,

00:15:03.240 --> 00:15:06.400
or factored, not correctly,
but factored in a way

00:15:06.400 --> 00:15:08.110
that makes this easy.

00:15:08.360 --> 00:15:19.750
Basically, this is basically the same
print loop that I showed before.

00:15:19.750 --> 00:15:19.750
The only...where is it?

00:15:19.750 --> 00:15:19.750
Beginning, of course.

00:15:22.300 --> 00:15:25.860
The difference is when
we make the window,

00:15:25.900 --> 00:15:32.740
we are going to save some stuff
off into a document info record.

00:15:32.900 --> 00:15:36.980
Basically we're saving off
the page format and the...

00:15:37.670 --> 00:15:40.870
Other things that we may need and setting
it to the rough count in the window.

00:15:40.890 --> 00:15:46.360
That way during our callback we will
be able to extract this information

00:15:47.320 --> 00:15:49.480
Out of the window.

00:15:49.500 --> 00:15:51.410
So basically let me just run
it first to show you that

00:15:51.410 --> 00:15:53.910
when you're not using Sheets.

00:15:54.570 --> 00:15:55.500
Just go ahead and run it.

00:15:55.500 --> 00:15:59.080
Just basically, you know,
hello world sample app.

00:15:59.080 --> 00:16:05.690
Go to print and it's the modal,
application modal.

00:16:05.690 --> 00:16:05.690
It is, it's a

00:16:06.590 --> 00:16:08.840
You know,
it is truly the only application model,

00:16:08.840 --> 00:16:10.650
unlike 8 and 9.

00:16:10.790 --> 00:16:11.730
Where did it go?

00:16:11.750 --> 00:16:13.470
There it is.

00:16:13.910 --> 00:16:17.040
So we'll just cancel all this and quit.

00:16:17.190 --> 00:16:22.880
So to make this use Sheets,
what I will do

00:16:23.950 --> 00:16:27.770
And here it is.

00:16:27.870 --> 00:16:31.790
Before I call PM session print dialog,

00:16:32.820 --> 00:16:43.640
I am going to basically create a UPP,
or create my dialog done, proc UPP.

00:16:46.470 --> 00:16:50.350
Make the call to PM session use sheets,
which basically I'm giving

00:16:50.350 --> 00:16:52.940
it this print session,
the parent window that

00:16:52.940 --> 00:16:58.230
I wanted to display against,
and our UPP.

00:16:58.610 --> 00:17:02.970
And then I want to comment out these two
lines where the print loop was actually

00:17:02.970 --> 00:17:05.660
done because this will be called,
I will show you,

00:17:05.890 --> 00:17:09.440
this instead will be called
in our callback proc.

00:17:09.920 --> 00:17:12.220
Which is right above this.

00:17:12.260 --> 00:17:16.520
Basically here's our
print dialog done proc.

00:17:16.540 --> 00:17:19.240
Basically if it's accepted
the user said print,

00:17:19.260 --> 00:17:24.500
I extract our document info pointer
out of the refcon and if I got the

00:17:24.500 --> 00:17:29.080
information I just do the print loop,
passing in the page

00:17:29.080 --> 00:17:30.840
format and print settings.

00:17:30.920 --> 00:17:36.650
So with that done I can just compile it.

00:17:47.080 --> 00:17:49.760
"It's linking and it's done.

00:17:49.790 --> 00:17:51.000
Okay, now we can run it.

00:17:51.000 --> 00:17:59.000
And if I do print, magically,
we are now printing it as a sheet.

00:17:59.000 --> 00:18:02.740
Everything you get from sheets are there.

00:18:04.200 --> 00:18:11.600
[Transcript missing]

00:18:11.710 --> 00:18:19.410
If your print loop is factored
out of showing your print dialog,

00:18:19.830 --> 00:18:23.860
and you're already using sessions,
there is not that much more

00:18:23.960 --> 00:18:30.940
work needed to get the print
dialog to show as sheets.

00:18:31.200 --> 00:18:39.560
So if we go back to the slides,
I'd like to summarize.

00:18:39.560 --> 00:18:39.560
Go back to the slides.

00:18:41.360 --> 00:18:49.700
I'd like to summarize basically some of
the key points of using dialog sheets.

00:18:49.820 --> 00:18:52.600
First point is PM session page,
setup dialog,

00:18:52.600 --> 00:18:56.210
and PM session print log return
immediately to the caller.

00:18:56.430 --> 00:19:02.610
That means the values that the PM print
settings and PM page format objects that

00:19:02.640 --> 00:19:10.180
are passed into it are not really valid
until your callback proc is called.

00:19:13.840 --> 00:19:16.970
That's the next point is basically
they're not valid until your

00:19:17.030 --> 00:19:18.870
sheet done proc is called.

00:19:18.870 --> 00:19:23.330
And last point about dialog sheets,
printing dialogs that are customized

00:19:23.340 --> 00:19:27.030
by the append-dibble method
will not be shown as sheets.

00:19:27.120 --> 00:19:32.250
Even if the call is made to use sheets,
there's a different

00:19:32.260 --> 00:19:38.180
API which is dialog main,
dialog init, dialog main.

00:19:38.180 --> 00:19:38.180
Those calls will go through the normal

00:19:38.450 --> 00:19:42.910
Well,
we'll execute normally and basically the

00:19:42.910 --> 00:19:47.670
dialogs will appear as the modal dialogs.

00:19:49.050 --> 00:19:52.110
With that, I'd like to hand back to Paul.

00:19:52.200 --> 00:19:53.000
Paul, where are you?

00:19:53.000 --> 00:19:54.040
Oh, there.

00:19:54.040 --> 00:19:58.080
And he will take you about
some of these interface issues.

00:20:02.750 --> 00:20:05.160
Okay,
so I'm going to try not to confuse you.

00:20:05.160 --> 00:20:06.290
I'll probably confuse myself.

00:20:06.290 --> 00:20:12.550
I'm going to try to go through some user
interface issues with Carbon printing.

00:20:13.210 --> 00:20:15.560
There's a couple of things that
have come up in discussions with

00:20:15.590 --> 00:20:16.900
developers in the past year or so.

00:20:16.900 --> 00:20:19.100
I think it's worth going
through some of these.

00:20:19.160 --> 00:20:23.590
There are some developers who want to
print without user interface at all.

00:20:23.610 --> 00:20:27.390
There are others who decide that the
page setup dialogue doesn't make sense

00:20:27.390 --> 00:20:31.590
for them because they have their own
document format dialogue or equivalent.

00:20:31.930 --> 00:20:34.820
And there are others that
want to do things like,

00:20:34.820 --> 00:20:38.250
for example, configure a printer or
download fonts to a printer.

00:20:38.430 --> 00:20:42.700
They want to use the printing system,
but they have no need for any

00:20:42.860 --> 00:20:44.790
of our user interface elements.

00:20:44.800 --> 00:20:50.060
So I'll start off with just a reminder
of a point I made this morning that,

00:20:50.190 --> 00:20:53.940
like many other things in Carbon,
we've decided,

00:20:53.940 --> 00:20:57.700
or rather it's been decided,
that we should split our headers

00:20:57.700 --> 00:20:59.800
and our frameworks into two.

00:20:59.800 --> 00:21:03.860
So we have PM application,
which used to contain everything,

00:21:03.860 --> 00:21:07.590
now just contains the function
prototypes for all the page

00:21:07.630 --> 00:21:09.760
setup and print dialog calls.

00:21:09.800 --> 00:21:13.620
Pretty much everything else
has been put into PM core.

00:21:13.720 --> 00:21:19.680
So there's all the accessor functions,
all the functions to create and

00:21:19.780 --> 00:21:23.800
deal with page format objects
and print settings objects.

00:21:23.800 --> 00:21:26.120
And last of all are
constants and typedefs,

00:21:26.120 --> 00:21:27.740
etc., in PM definitions.

00:21:27.820 --> 00:21:31.660
So if you have got need
to print without a UI,

00:21:31.800 --> 00:21:35.630
there's no need for
you to compile against,

00:21:35.980 --> 00:21:39.800
link, or load the UI-related framework.

00:21:42.120 --> 00:21:45.560
Now, this is where I'm going
to get tripped up,

00:21:45.560 --> 00:21:48.150
but I'm going to attempt to
avoid stating the obvious,

00:21:48.150 --> 00:21:51.060
but to explain why we have
a page setup dialogue,

00:21:51.140 --> 00:21:53.990
why we have a print dialogue,
why the two are different,

00:21:54.000 --> 00:21:57.000
and why it's not a good idea to
try to link the two together,

00:21:57.000 --> 00:22:00.930
but what we're trying to do to address
some of the needs that you have.

00:22:01.000 --> 00:22:04.280
So, simply put,
the page setup dialogue is all about

00:22:04.280 --> 00:22:08.760
defining the parameters of the logical
page into which your application

00:22:08.760 --> 00:22:11.000
is going to image its document.

00:22:11.000 --> 00:22:15.350
I think most people understand that,
but obviously for a lot of users,

00:22:15.490 --> 00:22:18.790
they associate page setup
with what they're going to do

00:22:19.010 --> 00:22:20.900
subsequently at print time.

00:22:21.000 --> 00:22:28.000
So, it makes sense for them to pick a
paper size as their document size.

00:22:28.000 --> 00:22:30.660
And for that reason,
we have a pop-up in the page

00:22:30.660 --> 00:22:34.050
setup dialogue which lists
printers so that you can format a

00:22:34.050 --> 00:22:37.940
document for a particular printer,
and we have a paper size pop-up,

00:22:37.940 --> 00:22:39.980
scaling orientation, etc.

00:22:40.000 --> 00:22:42.000
So, that's well known.

00:22:42.100 --> 00:22:45.000
And I think well understood and
related to by the average user.

00:22:45.000 --> 00:22:48.040
And in theory,
those settings are quite independent

00:22:48.040 --> 00:22:49.990
of what you'll do at print time.

00:22:50.020 --> 00:22:53.070
And of course,
the print dialogue is for things that

00:22:53.150 --> 00:22:58.000
really have very little to do with how
the contents of the document are imaged.

00:22:58.000 --> 00:23:00.570
You pick the number of
copies in the page range,

00:23:00.580 --> 00:23:00.990
etc.

00:23:01.000 --> 00:23:05.540
The two are distinct, but of course,
the distinction is often probably

00:23:05.540 --> 00:23:08.000
lost on users of some applications.

00:23:08.000 --> 00:23:09.530
And because...

00:23:11.110 --> 00:23:14.020
users quite often, I guess,
decide that they're going to print

00:23:14.020 --> 00:23:17.370
to a different printer at print time.

00:23:17.540 --> 00:23:20.430
Some applications have allowed you to
play switcheroo and get back to the

00:23:20.430 --> 00:23:26.350
page setup dialog from the print dialog.

00:23:27.290 --> 00:23:32.020
We're going to try to address
this issue by providing an API and

00:23:32.020 --> 00:23:38.210
providing a facility for you
to load a paper selection PDE,

00:23:38.270 --> 00:23:42.520
in other words,
an extra panel in the print dialog,

00:23:42.600 --> 00:23:44.860
which can be used, as I said,
to pick a paper size,

00:23:44.970 --> 00:23:50.380
to pick an orientation, possibly scaling,
et cetera, and to avoid the need to ever

00:23:50.450 --> 00:23:52.400
switch back to page setup.

00:23:52.400 --> 00:23:55.460
So, not in DP4,
but in a subsequent release,

00:23:55.570 --> 00:23:59.800
we will add another API to the growing
list of APIs we have for printing.

00:23:59.860 --> 00:24:04.480
It will allow you to tell the
printing system to load this panel,

00:24:04.480 --> 00:24:08.990
and I think it will take care of the
need that some of you have felt in the

00:24:08.990 --> 00:24:15.770
past to provide a button to take you
back to page setup from the print dialog.

00:24:17.220 --> 00:24:21.380
So, there's a couple of
repercussions of doing this.

00:24:21.440 --> 00:24:24.680
If you can pick a paper type
and orientation at print time,

00:24:24.730 --> 00:24:27.190
maybe you think you don't
need a page setup dialog.

00:24:27.190 --> 00:24:29.560
And there's some applications,
which I mentioned,

00:24:29.600 --> 00:24:33.100
have their own document setup
or document formatting dialogs,

00:24:33.100 --> 00:24:36.660
which often overlap the functionality
of the page setup dialog.

00:24:36.750 --> 00:24:41.660
So, we are quite happy if you choose to
live without a page setup dialog if

00:24:41.700 --> 00:24:44.100
it doesn't make sense for your users.

00:24:44.100 --> 00:24:49.090
If you do that, though,
you've got to make two choices.

00:24:49.090 --> 00:24:56.410
You can either call the PM application
APIs to emulate what happens at

00:24:56.670 --> 00:25:01.090
page setup time to set a page size,
or rather a paper size,

00:25:01.200 --> 00:25:03.100
as scaling and orientation.

00:25:03.100 --> 00:25:05.650
Or you can bypass the thing
altogether and call this API,

00:25:05.740 --> 00:25:07.990
which we've got listed here,
PMSetAdjustedPageRect,

00:25:08.120 --> 00:25:14.100
which just goes straight to the heart
of things and defines a logical page.

00:25:14.100 --> 00:25:15.420
And then you can also call
the PMPageFormat object,

00:25:15.420 --> 00:25:17.180
which is a very simple application,
into which your application can

00:25:17.180 --> 00:25:18.100
image its document contents.

00:25:18.100 --> 00:25:22.760
But the thing is that you do have to call
either the APIs that emulate what happens

00:25:22.870 --> 00:25:26.400
at the page setup time or this other API,
because you can't go

00:25:26.400 --> 00:25:28.100
into the print dialog.

00:25:28.140 --> 00:25:31.760
And you certainly can't go to
print if you haven't created

00:25:31.790 --> 00:25:33.960
a valid PMPageFormat object.

00:25:35.020 --> 00:25:43.530
If you do this sort of thing, of course,
you're incurring page to paper

00:25:43.590 --> 00:25:47.410
mapping code at print time because,
of course,

00:25:47.460 --> 00:25:50.950
you're now allowed to create a document
which doesn't map cleanly to the

00:25:50.950 --> 00:25:52.900
pages you've decided to print it on.

00:25:52.990 --> 00:25:56.940
You can decide, of course,
whether scaling is appropriate to

00:25:56.960 --> 00:26:00.900
fit the document to the paper or
whether you want to clip or tile.

00:26:00.900 --> 00:26:03.780
There are various solutions.

00:26:04.190 --> 00:26:08.250
What we're going to do in the
Print Center application is provide

00:26:08.470 --> 00:26:13.990
a UI so that the user generically can
tell the printing system how you should,

00:26:14.100 --> 00:26:16.900
by default, deal with these page to
paper mapping issues.

00:26:16.900 --> 00:26:20.970
Maybe I'm printing to an A4 printer
and I'm always getting documents

00:26:21.410 --> 00:26:23.830
that were formatted for US letter.

00:26:23.900 --> 00:26:27.020
Well,
I might just say that I want the printing

00:26:27.250 --> 00:26:29.850
system to always scale the pages for me.

00:26:29.890 --> 00:26:32.900
I would do that via Print Center.

00:26:32.900 --> 00:26:38.890
Of course, applications might want to
get into control of this,

00:26:38.890 --> 00:26:42.070
so we'll also be adding an API, again,
post-DP4,

00:26:42.160 --> 00:26:45.900
but it would allow you to tell the
printing system how you want us

00:26:45.900 --> 00:26:45.900
to do the page to paper mapping.

00:26:49.700 --> 00:26:54.060
So hopefully that addresses some of
the issues that have been floating

00:26:54.140 --> 00:26:57.530
around between the developers
and Apple over the last year.

00:27:00.050 --> 00:27:05.560
Last set of issues to do with printing,
as I mentioned, is

00:27:06.740 --> 00:27:12.930
What if you want to write a utility
that downloads fonts to a printer?

00:27:12.930 --> 00:27:12.930
What happens if you want to write a--?

00:27:13.170 --> 00:27:16.860
A utility to configure a printer
or to calibrate a printer.

00:27:16.860 --> 00:27:18.260
In the past,
people have written standalone

00:27:18.260 --> 00:27:19.990
applications to do that.

00:27:19.990 --> 00:27:23.590
And in the past, a lot of applications,
sorry, a lot of printers have had a nice

00:27:23.590 --> 00:27:26.100
user-friendly AppleTalk connection.

00:27:26.150 --> 00:27:30.040
And that has been fairly straightforward.

00:27:30.210 --> 00:27:31.480
But now we're dealing with printers.

00:27:31.500 --> 00:27:32.800
They have USB connections.

00:27:32.800 --> 00:27:36.090
They have, I think in the future,
we'll see a lot of FireWire printers.

00:27:36.180 --> 00:27:39.090
You've got different network protocols.

00:27:39.090 --> 00:27:40.810
So if you're writing
one of these utilities,

00:27:40.810 --> 00:27:43.080
you've got to face the fact that you
might have to communicate with a printer.

00:27:43.100 --> 00:27:44.880
You might have to communicate with
a printer over various channels.

00:27:44.900 --> 00:27:46.500
And then you look at Tioga and you say,
well,

00:27:46.570 --> 00:27:47.980
we've got all these nice IO modules.

00:27:48.090 --> 00:27:49.500
Why can't we just use those?

00:27:49.500 --> 00:27:55.690
And our answer is that, well,
maybe you could and we could publicize

00:27:55.790 --> 00:28:01.200
the APIs that host IO modules
and printer browser modules,

00:28:01.200 --> 00:28:02.570
et cetera.

00:28:02.570 --> 00:28:02.570
But our preferred solution is to

00:28:02.650 --> 00:28:06.400
Let you write plug-ins for
Print Center so that if you need

00:28:06.400 --> 00:28:10.430
to write a font downloading utility
or printer calibration utility,

00:28:10.430 --> 00:28:14.820
you do that as a plug-in instead
of a standalone application.

00:28:15.080 --> 00:28:18.110
So we'd encourage you if you're
in that sort of business,

00:28:18.220 --> 00:28:23.060
come and talk to us or email us and
let us know what you want to do.

00:28:23.140 --> 00:28:25.270
And of course,
I think long term we may have

00:28:25.270 --> 00:28:28.190
to open up some of these APIs,
but certainly short term our

00:28:28.250 --> 00:28:32.400
strategy is to use Print Center as
a host for those sort of operations.

00:28:32.970 --> 00:28:38.080
The last thing we've got
here on the UI front is

00:28:38.400 --> 00:28:40.550
It's really a word of warning
to anybody who wants to print

00:28:40.650 --> 00:28:43.000
without a user interface.

00:28:43.000 --> 00:28:45.630
There are APIs that we've provided.

00:28:45.640 --> 00:28:47.450
They're in PM Core that
allow you to do things,

00:28:47.450 --> 00:28:49.510
the obvious things,
like set the number of

00:28:49.510 --> 00:28:52.840
copies you want to print,
set the page range.

00:28:52.850 --> 00:28:57.390
But of course, you'll notice,
we haven't provided APIs so that

00:28:57.410 --> 00:29:01.490
you can set layout options for doing
nup or printing with a cover page,

00:29:01.490 --> 00:29:02.440
et cetera.

00:29:02.470 --> 00:29:05.580
And we could add those, of course.

00:29:05.690 --> 00:29:06.600
But it's not in our plans.

00:29:06.660 --> 00:29:10.380
If you think you want to print
without the print dialog,

00:29:10.380 --> 00:29:12.960
and you need access to
that sort of functionality,

00:29:12.960 --> 00:29:15.110
then you should talk to us.

00:29:15.120 --> 00:29:22.840
Of course, there is a workaround,
which is use a UI, create those settings,

00:29:22.840 --> 00:29:26.610
save them off as flattened
print settings objects,

00:29:26.610 --> 00:29:30.020
and then use them in your
UILess printing utility.

00:29:30.020 --> 00:29:35.700
But I think you realize that
for basic UILess printing,

00:29:35.760 --> 00:29:38.250
you shouldn't have the full
set of features that you get

00:29:38.300 --> 00:29:40.150
if you display a print dialog.

00:29:42.100 --> 00:29:47.110
Okay, my second topic is for people who

00:29:47.260 --> 00:29:50.140
I either like to generate their
own postscript or occasionally

00:29:50.180 --> 00:29:54.520
find themselves printing documents
containing postscript like EPS graphics.

00:29:54.520 --> 00:29:56.620
And it might be interesting
just to get a show of hands,

00:29:56.690 --> 00:30:01.020
how many people write applications
that generate their own postscript?

00:30:02.460 --> 00:30:04.100
Fair few.

00:30:04.100 --> 00:30:07.940
Maybe 20, 30 people in the audience.

00:30:08.000 --> 00:30:12.120
And how many of you have applications
which can take an EPS graphic

00:30:12.220 --> 00:30:15.390
into a document and then you
have to deal with printing that?

00:30:15.400 --> 00:30:18.160
Okay, about the same number.

00:30:18.160 --> 00:30:23.070
Okay, so as you probably know,

00:30:23.690 --> 00:30:25.390
When you print through,
or I think as I pointed out,

00:30:25.490 --> 00:30:32.850
when you print through Tioga on X,
you're effectively printing to a

00:30:32.850 --> 00:30:38.340
Quick Draw printer because by default,
we turn Quick Draw into PDF and then

00:30:38.340 --> 00:30:41.190
we turn PDF into Post Script or Bits.

00:30:42.100 --> 00:30:44.570
So if you want to generate your
own postscript or if you want

00:30:44.570 --> 00:30:48.720
to hand EPS into a spool file,
you're going to have to use some

00:30:48.720 --> 00:30:50.140
of the APIs that I've listed here.

00:30:50.180 --> 00:30:53.000
And I'll take you through
them fairly quickly.

00:30:53.310 --> 00:30:55.760
First call is something we put
in the original version of the

00:30:55.760 --> 00:30:58.000
Carbon Printing header file.

00:30:58.060 --> 00:31:00.380
PM is PostScript driver.

00:31:00.450 --> 00:31:04.060
On Mac OS 8 and 9, if you call that,
all the Carbon Printing

00:31:04.060 --> 00:31:06.810
manager does is just check the
WDEV field of the print record,

00:31:06.810 --> 00:31:09.480
the current driver, and if it's 3,
you know you're printing

00:31:09.550 --> 00:31:12.220
for the LaserWriter driver
or maybe Adobe's driver.

00:31:12.280 --> 00:31:15.290
And we'll return true as
a return for that call.

00:31:15.290 --> 00:31:20.580
If you call that routine on 10, though,
it'll always return false because,

00:31:20.580 --> 00:31:23.200
as I said, by default,
we're a Quick Draw--we behave

00:31:23.200 --> 00:31:27.830
as a Quick Draw printer and we
only turn Quick Draw calls at

00:31:27.830 --> 00:31:30.640
the bottleneck level into PDF.

00:31:30.640 --> 00:31:31.790
So what do you do about it?

00:31:31.790 --> 00:31:32.060
Well--

00:31:33.900 --> 00:31:37.180
You should start looking at
what we call the document format

00:31:37.400 --> 00:31:40.360
APIs and there are four of them.

00:31:40.730 --> 00:31:44.370
First one on the list is get document
format generation and what that will

00:31:44.370 --> 00:31:49.110
do is that will return to you the
list of spool file formats that the

00:31:49.110 --> 00:31:56.400
print job creator and the converter
are able to generate for you.

00:31:57.060 --> 00:32:00.570
Get document format generation actually
returns to you the current flavor of

00:32:00.650 --> 00:32:02.680
spool file format that will be generated.

00:32:02.680 --> 00:32:07.380
And likely as not,
the result of that call will be PDF.

00:32:07.440 --> 00:32:10.760
Actually, we return a MIME type,
but the result will tell you

00:32:10.760 --> 00:32:12.800
that it's PDF by default.

00:32:12.930 --> 00:32:16.910
Set document format generation is
a way to tell the printing system,

00:32:16.910 --> 00:32:19.400
I want a particular spool file format.

00:32:19.490 --> 00:32:20.930
So you can specify PDF.

00:32:21.040 --> 00:32:23.900
You can also specify
picked with PostScript.

00:32:23.910 --> 00:32:29.950
And we are architected to support
other spool file formats going forward.

00:32:30.600 --> 00:34:04.100
[Transcript missing]

00:34:05.310 --> 00:34:08.440
The last batch of API's
pretty straightforward.

00:34:08.440 --> 00:34:11.490
They make it a little bit
more easy to use the old

00:34:11.490 --> 00:34:14.700
PostScript pick comment mechanisms.

00:34:14.800 --> 00:34:20.010
Using these in your page drawing code,
you can insert PostScript into

00:34:20.010 --> 00:34:21.000
the spool file.

00:34:21.930 --> 00:34:26.060
And in a moment I'll show you a
little bit of code to demonstrate

00:34:26.140 --> 00:34:28.600
how those document format APIs work.

00:34:28.610 --> 00:34:31.690
I'm going to talk about
one more issue here first.

00:34:32.210 --> 00:34:36.700
So the previous APIs were all about
putting PostScript in the spool file

00:34:36.700 --> 00:34:40.000
and they're really talking about
doing things with PostScript at the

00:34:40.000 --> 00:34:45.090
page level that are difficult or
impossible to do with Quick Draw.

00:34:45.090 --> 00:34:48.100
And that only goes so far.

00:34:48.100 --> 00:34:53.090
And there are people who want to have
finer control over the PostScript they

00:34:53.090 --> 00:34:56.100
put into the spool file and the
PostScript that gets sent to the printer.

00:34:56.100 --> 00:35:01.690
The common case is you want to add
your own proc set in the prolog of

00:35:01.780 --> 00:35:06.490
the job or you want to get in there
and change or add PostScript to the

00:35:06.570 --> 00:35:10.990
document or page setup parts of the
PostScript file because your UI for

00:35:11.230 --> 00:35:16.890
printing allows you to do things
like invoke some trapping in the rip,

00:35:16.890 --> 00:35:17.990
for example.

00:35:18.100 --> 00:35:25.100
So we need a way beyond the APIs I just
showed you to tell the printing system

00:35:25.100 --> 00:35:26.100
to put PostScript in different ways.

00:35:26.100 --> 00:35:29.180
sections of the final output.

00:35:29.830 --> 00:35:32.870
The prototype shown here
is a work in progress.

00:35:32.900 --> 00:35:34.890
So we may change the name,
but I think the arguments

00:35:34.970 --> 00:35:36.000
are pretty solid.

00:35:36.110 --> 00:35:42.100
Basically, it's a way for you,
in your printing code,

00:35:42.220 --> 00:35:49.650
to add a bunch of PostScript snippets to
the job and send it downstream so that

00:35:49.650 --> 00:35:54.020
those PostScript snippets can be added
at appropriate places in the final output

00:35:54.020 --> 00:35:56.380
that's sent to the PostScript printer.

00:35:56.380 --> 00:35:56.380
And

00:35:56.950 --> 00:36:02.570
That CFArray is an array
of CFDictionary's and each

00:36:02.690 --> 00:36:08.670
CFDictionary contains a tag or a
keyword and a snippet of postscript.

00:36:08.960 --> 00:36:11.850
And if you look at the tech
note that's mentioned here,

00:36:11.850 --> 00:36:13.730
that's all about writing
PostScript output filters

00:36:13.800 --> 00:36:16.500
for LaserWriter 8.7,
you will see that,

00:36:16.590 --> 00:36:19.280
certainly at the back of the tech note,
there's a big long set of tables

00:36:19.480 --> 00:36:21.700
which list all these tags.

00:36:21.750 --> 00:36:26.660
And they map pretty closely to Adobe's
document structuring conventions.

00:36:26.720 --> 00:36:29.860
They identify specific
points in the PostScript job.

00:36:29.920 --> 00:36:35.440
And basically all you would need to do
is create a list of PostScript snippets

00:36:35.510 --> 00:36:40.400
that you want inserted at these
points in the PostScript file and

00:36:40.400 --> 00:36:41.750
hand that to the printing system.

00:36:41.840 --> 00:36:47.660
Basically attach it to the print
settings object when you're printing.

00:36:47.720 --> 00:36:51.320
And what we will do at the server
side of Tioga when we get this

00:36:51.840 --> 00:36:56.100
dictionary is we will dutifully go
and insert your PostScript snippets

00:36:56.140 --> 00:36:58.900
in the PostScript stream
that we send to the printer.

00:36:58.900 --> 00:36:59.750
If you're interested in
using the PostScript script,

00:36:59.760 --> 00:36:59.820
you can go to the
post.script.com/postscript.

00:36:59.820 --> 00:37:01.780
And if you're interested
in using this API,

00:37:01.780 --> 00:37:04.820
you should certainly talk to us
because it's a work in progress.

00:37:04.820 --> 00:37:09.820
It obviously has use for
high-end printing applications.

00:37:09.820 --> 00:37:14.820
I think I know who you guys are,
but just in case I miss anybody,

00:37:14.820 --> 00:37:18.010
make it known that you're interested
in this API and we'll work with you and

00:37:18.420 --> 00:37:24.270
get it right for the first time it's
introduced into probably the next version

00:37:24.270 --> 00:37:29.480
of Mac OS X that goes out to developers.

00:37:29.870 --> 00:37:33.570
Lastly, if we can just switch
over to the demo machine.

00:37:36.450 --> 00:37:38.400
Which demo machine?

00:37:38.400 --> 00:37:39.740
Is it this one?

00:37:39.740 --> 00:37:41.890
Okay.

00:37:42.000 --> 00:37:46.830
I'm just going to show you that
some of those document format calls

00:37:46.940 --> 00:37:53.160
to show you how easy it is to,
if I can find it.

00:37:59.050 --> 00:38:01.910
Bear with me a moment.

00:38:01.950 --> 00:38:05.900
Sample code?

00:38:06.060 --> 00:38:09.010
Ah, Paul prints sample.

00:38:09.010 --> 00:38:09.010
Okay.

00:38:11.300 --> 00:38:15.260
So, hopefully that point says okay.

00:38:15.430 --> 00:38:18.300
Find is my friend.

00:38:18.340 --> 00:38:22.300
Well, we don't have a pop-up
to get to functions.

00:38:22.300 --> 00:38:27.610
Okay.

00:38:30.580 --> 00:38:33.860
All I'm going to show you here is the
sort of code that you would use if you

00:38:33.860 --> 00:38:36.830
wanted to tell the printing system to
generate a PIC with PostScript spool

00:38:36.900 --> 00:38:38.420
file instead of a PDF spool file.

00:38:38.500 --> 00:38:43.020
The first point I want to
make clear is that if you're

00:38:43.150 --> 00:38:46.330
going to use code like this,
you don't want to be

00:38:46.330 --> 00:38:50.060
calling this inside your,
certainly not inside your page

00:38:50.060 --> 00:38:52.500
drawing part of the print loop.

00:38:52.500 --> 00:38:56.630
You need to call this before you
even invoke the print dialog because

00:38:56.630 --> 00:39:00.500
you're telling us to generate a
PIC with PostScript spool file.

00:39:00.500 --> 00:39:03.760
When we invoke the print dialog,
we need to know whether we

00:39:03.760 --> 00:39:05.500
can enable the preview button.

00:39:05.500 --> 00:39:10.560
And we of course know how to preview PDF,
but we don't have anything right now

00:39:10.560 --> 00:39:13.460
which will preview PIC with PostScript.

00:39:13.500 --> 00:39:18.450
So if you've called the API to tell
us to generate a non-PDF spool file,

00:39:18.450 --> 00:39:21.460
we'll be disabling the preview button.

00:39:23.390 --> 00:39:27.100
And then it's an exercise for
the reader to write your own

00:39:27.200 --> 00:39:29.890
pic with PostScript Previewer.

00:39:30.910 --> 00:39:37.390
So, the first interesting call
is to PM session get format,

00:39:37.460 --> 00:39:40.280
get document format supported.

00:39:40.670 --> 00:39:43.900
Basically, here we're just providing,
we're just getting back a list.

00:39:44.090 --> 00:39:47.880
It's an array of CFStrings that we
get back as a result of calling this.

00:39:47.900 --> 00:39:51.830
And what's happening under the
hood is that we're going to the

00:39:52.020 --> 00:39:56.900
printer module and the converter
that belongs to the current printer,

00:39:56.900 --> 00:39:59.900
which is associated with
the current print session,

00:39:59.900 --> 00:40:04.260
finding out what it can do and
returning that list of supported

00:40:04.260 --> 00:40:06.860
spool file formats to the caller.

00:40:07.270 --> 00:40:12.060
Next,
we're just going to go through this list.

00:40:12.100 --> 00:40:13.590
We see how many are supported.

00:40:13.660 --> 00:40:16.360
Typically,
if you've got a PostScript printer

00:40:16.360 --> 00:40:19.890
as your current printer,
num supported formats

00:40:19.980 --> 00:40:21.780
will probably be three.

00:40:21.780 --> 00:40:26.560
And three is because the first result
will be the default spool file format,

00:40:26.560 --> 00:40:29.650
and the second one will be PDF,
and the third one will probably

00:40:29.800 --> 00:40:30.950
be picked with PostScript.

00:40:30.960 --> 00:40:32.740
But you want to make sure.

00:40:32.740 --> 00:40:37.540
So we go through this array,
and we check each entry

00:40:37.540 --> 00:40:39.730
in the array to see if...

00:40:41.950 --> 00:40:46.410
It matches the string defined by
KPM document format picked PS,

00:40:46.410 --> 00:40:50.020
which is defined in PM definitions.

00:40:50.280 --> 00:40:55.220
And that's defined as a MIME type,
so it's application/pick_ps.

00:40:55.220 --> 00:40:58.500
If we find a match,
let me call this routine,

00:40:58.560 --> 00:41:01.300
pmset document format generation.

00:41:01.330 --> 00:41:04.500
And let me just scroll
across a little bit here.

00:41:04.600 --> 00:41:07.040
What we're doing is we're saying,
for this print session,

00:41:07.190 --> 00:41:09.690
I want you to generate a pick
with PostScript spool file,

00:41:09.730 --> 00:41:13.840
so I want you to go into
LaserWrite rate compatibility mode.

00:41:13.940 --> 00:41:18.000
And I didn't expand upon it,
but this third argument is there

00:41:18.020 --> 00:41:22.090
to provide you with a list of
graphic contexts that you're going

00:41:22.090 --> 00:41:24.080
to be using to draw your pages.

00:41:24.100 --> 00:41:30.630
By default, and null means the default,
I'm just going to be using a quick

00:41:30.670 --> 00:41:33.070
draw context to draw my pages.

00:41:33.220 --> 00:41:37.650
But I can provide it with,
I can tell the printing system,

00:41:37.660 --> 00:41:39.680
I'm going to draw my
pages with core graphics,

00:41:39.700 --> 00:41:43.440
so I'll just tell it that I want
it to core graphics context.

00:41:43.510 --> 00:41:46.030
Or I can say I want to
use a combo of the two,

00:41:46.190 --> 00:41:50.020
so I can use both quick draw
and core graphics to image my

00:41:50.020 --> 00:41:52.470
document during the print loop.

00:41:52.790 --> 00:41:54.190
And I think if you went
to earlier sessions,

00:41:54.220 --> 00:41:57.890
you'll know that a lot of the core
graphics APIs are being opened up for you

00:41:57.900 --> 00:42:00.820
to use even within Carbon applications.

00:42:01.120 --> 00:42:03.240
That's pretty much it.

00:42:03.400 --> 00:42:08.970
The rest of this routine just
cleans up and higher up in the code,

00:42:09.090 --> 00:42:13.380
but I don't think I need to
show you in the page drawing

00:42:13.500 --> 00:42:18.760
portion of this sample code,
we emit PostScript and that

00:42:18.760 --> 00:42:21.730
goes into the spool file.

00:42:23.300 --> 00:42:28.540
I think we can go back to
the slides for a moment.

00:42:32.970 --> 00:42:38.900
Just to summarize,
for typical applications printing on X,

00:42:39.020 --> 00:42:42.620
Tioga appears as a quick draw
printer so you can't send

00:42:42.710 --> 00:42:45.370
postscript via pic comments.

00:42:45.420 --> 00:42:48.100
PDF is the mainstream spool
file format and we'd rather

00:42:48.100 --> 00:42:49.690
everybody use PDF of course.

00:42:49.690 --> 00:42:54.300
It's got lots of advantages like you can
preview it and it's page independent,

00:42:54.300 --> 00:42:54.760
etc.

00:42:54.760 --> 00:42:56.970
and resolution independent.

00:42:57.030 --> 00:42:58.840
If you want to generate
your own postscript,

00:42:58.900 --> 00:43:02.350
and certainly we understand a lot
of applications today do that and

00:43:02.350 --> 00:43:07.920
will probably do that for a while,
we are allowing you to do that and that's

00:43:08.030 --> 00:43:10.970
where those document format APIs come in.

00:43:11.230 --> 00:43:16.260
And lastly, if you want to do more
advanced PostScript printing,

00:43:16.260 --> 00:43:22.410
the prototype API that
I showed on a previous slide,

00:43:22.430 --> 00:43:23.850
we will be introducing that.

00:43:23.860 --> 00:43:26.970
If you think you're going to use it,
then let us know because we'll

00:43:26.970 --> 00:43:30.460
work with you and make sure
the API meets your needs.

00:43:30.600 --> 00:43:32.530
And now,

00:43:33.230 --> 00:43:36.070
We're going to go on to
something very exciting.

00:43:36.070 --> 00:43:39.610
We're going to talk about how to
write a plug-in to extend the print

00:43:39.610 --> 00:43:41.100
dialog or the page setup dialog.

00:43:41.100 --> 00:43:44.100
And for that,
I'm going to bring Mike Conley on stage.

00:43:44.100 --> 00:43:47.810
He's going to take you
through all the nifty code.

00:43:54.500 --> 00:44:02.140
So first I'll thank Paul for leaving
me with plenty of time to provide

00:44:02.150 --> 00:44:09.000
you in eye-glazing detail some of
the code and information about how

00:44:09.000 --> 00:44:15.490
to write printing dialog extensions
for Tioga printing dialogs.

00:44:17.840 --> 00:44:22.090
So you may have remembered this slide
from the beginning of the session,

00:44:22.090 --> 00:44:24.810
or the first session this morning.

00:44:24.810 --> 00:44:27.990
And I won't go into too
much detail about it,

00:44:28.020 --> 00:44:30.800
except as I need to pad
the rest of the session.

00:44:30.800 --> 00:44:33.110
The first method which
is no longer supported,

00:44:33.230 --> 00:44:36.800
as you know, or not no longer supported,
but is no longer encouraged,

00:44:36.800 --> 00:44:40.800
is the append-dittle method
of extending a dialog.

00:44:40.820 --> 00:44:44.860
And we won't talk about that much because
everybody knows how to do that and you

00:44:44.860 --> 00:44:48.420
know what the downsides on that are,
which are basically you don't get

00:44:48.420 --> 00:44:53.800
sheets and you don't get status in the
status panel and all that good stuff.

00:44:54.020 --> 00:44:58.520
The print dialog extensions are
the preferred way of extending

00:44:58.520 --> 00:45:02.790
dialogs in Tioga and the new
Mac OS X printing manager.

00:45:03.040 --> 00:45:06.720
There's only support on a Mac OS X,
so you don't get them on OS 9.

00:45:06.810 --> 00:45:09.650
They are compatible with
document modal printing,

00:45:09.740 --> 00:45:10.800
so you get sheets.

00:45:10.800 --> 00:45:13.530
And you can have multiple print
dialogs open at the same time,

00:45:13.630 --> 00:45:14.800
same with page setup.

00:45:14.840 --> 00:45:18.700
You can organize your controls in
your user face into multiple panels

00:45:18.700 --> 00:45:20.800
with different titles on each panel.

00:45:20.800 --> 00:45:24.060
So the user has a,
probably a better user experience

00:45:24.120 --> 00:45:27.800
rather than having everything
crammed into one dialog.

00:45:27.800 --> 00:45:31.380
If you're an application
or a printing module,

00:45:31.380 --> 00:45:35.800
you can override the controls
in the printing dialogs.

00:45:35.800 --> 00:45:39.060
Applications can override controls in
page setup and the printing modules

00:45:39.060 --> 00:45:40.800
can override controls in both.

00:45:40.800 --> 00:45:43.800
In printing only.

00:45:44.130 --> 00:45:46.800
Applications can also override
controls in the print dialog.

00:45:46.800 --> 00:45:52.980
And eventually, hopefully fairly soon,
we will have implemented code to handle

00:45:53.070 --> 00:45:55.800
interdependencies between the extensions.

00:45:55.800 --> 00:46:01.790
So if you have user options that depend
on other user options in the dialog,

00:46:01.800 --> 00:46:04.490
we will notify you when you need
to update your settings because

00:46:04.530 --> 00:46:05.950
something else has changed.

00:46:09.850 --> 00:46:13.140
So what does a printing
dialog extension look like?

00:46:13.140 --> 00:46:16.800
All the printing dialog
extensions are based on CFPlugin.

00:46:16.920 --> 00:46:25.670
CFPlugin is the preferred mechanism for
creating plugin code modules on OS X.

00:46:25.670 --> 00:46:30.960
And it is to some extent based on,
actually to a large extent,

00:46:30.990 --> 00:46:34.660
based on the Microsoft COM plugin model.

00:46:34.800 --> 00:46:39.240
So this diagram here gives you
sort of a real basic overview

00:46:39.480 --> 00:46:41.800
of what that might look like.

00:46:41.950 --> 00:46:47.800
The primary entry point for any
CFPlugin is the factory function.

00:46:47.800 --> 00:46:52.800
The purpose of the factory function is
to return an instance of an interface.

00:46:52.800 --> 00:46:57.160
And once you get that,
you can then go ahead and get

00:46:57.160 --> 00:47:02.590
a reference into the function
pointer table for your plugin.

00:47:02.750 --> 00:47:04.800
Or rather, the host can get that.

00:47:04.800 --> 00:47:08.550
So you publish, you basically export
a single entry point,

00:47:08.550 --> 00:47:10.800
which is your factory function.

00:47:10.800 --> 00:47:14.590
And then when we load your CFPlugin,
we do all the work to get a

00:47:14.590 --> 00:47:19.170
hold of your function table
and jump into your routines.

00:47:19.580 --> 00:47:25.170
Inside your plugin you'll
have the IUnknown interface.

00:47:25.170 --> 00:47:28.530
This is a little piece of code
that sits up at the top of your

00:47:28.640 --> 00:47:33.490
CFPlugin and provides the support
for the CFPlugin mechanism itself.

00:47:33.500 --> 00:47:37.350
It handles ref counting,
increment and decrement,

00:47:37.520 --> 00:47:40.610
and it also handles the
query interface function,

00:47:40.610 --> 00:47:42.000
which gets the interface.

00:47:42.210 --> 00:47:45.850
The rest of your interface
goes in below that.

00:47:46.100 --> 00:47:50.970
There are some pieces that are
specific to the printing manager.

00:47:51.020 --> 00:47:54.500
So any printing manager plugin will
use these particular functions.

00:47:54.500 --> 00:47:59.470
And then following that are the functions
specific to your particular plugin.

00:47:59.490 --> 00:48:04.500
So for printing dialog extensions you'd
have the PDE interface functions there.

00:48:04.500 --> 00:48:07.590
If you were doing a different
kind of plugin like a printer

00:48:07.590 --> 00:48:10.700
browser module plugin,
you would have the printer

00:48:10.710 --> 00:48:12.000
browser module API.

00:48:12.050 --> 00:48:17.160
And then of course the rest of it is the
implementation of all that good stuff.

00:48:18.230 --> 00:48:21.100
Just a quick note on terminology.

00:48:21.100 --> 00:48:24.930
We tend to use the words
PDE or the terms PDE and user

00:48:24.980 --> 00:48:27.860
option sort of interchangeably.

00:48:27.920 --> 00:48:32.390
A user option is really a collection
of controls that appears in single

00:48:32.390 --> 00:48:34.730
panel in the printing dialogue.

00:48:34.880 --> 00:48:38.270
Whereas a PDE technically is the
plug-in that implements those controls

00:48:38.310 --> 00:48:42.200
and in fact one plug-in can implement
more than one set of user options.

00:48:42.300 --> 00:48:45.100
So even though it tends to
be a one-to-one mapping,

00:48:45.100 --> 00:48:46.300
it doesn't necessarily have to be.

00:48:46.300 --> 00:48:49.200
I just thought I'd point that out
in case anybody's confused about why

00:48:49.200 --> 00:48:52.200
we sometimes call them user options
and we sometimes call them PDEs.

00:48:52.240 --> 00:48:53.990
There's a distinction.

00:48:55.580 --> 00:48:57.370
So how do you load a PDE?

00:48:57.730 --> 00:49:00.290
Well,
applications register their PDEs with

00:49:00.460 --> 00:49:04.070
CFPlugin before you open up the dialog.

00:49:04.430 --> 00:49:08.690
And then the printing manager will go
ahead and collect all the information

00:49:08.700 --> 00:49:09.600
about them that it needs to.

00:49:09.600 --> 00:49:13.300
It will actually load them and put them
into the dialog as the dialog comes up.

00:49:13.410 --> 00:49:16.300
If you're a printer module,
we will load your plug-in for you.

00:49:16.300 --> 00:49:21.680
So in CF parlance,
application PDEs tend to

00:49:21.890 --> 00:49:27.300
be dynamically loaded and
printer module PDEs are static.

00:49:27.300 --> 00:49:32.030
That is, their loading and their
registration occurs,

00:49:32.030 --> 00:49:34.280
is all set up on the disk.

00:49:34.370 --> 00:49:38.270
Whereas an application can go ahead and
register the PDE dynamically in runtime.

00:49:38.300 --> 00:49:41.680
And finally,
if you're an application also,

00:49:41.710 --> 00:49:46.280
when you load your user options,
they will, in the hierarchy of things,

00:49:46.340 --> 00:49:49.160
override any other user options
that are of the same type.

00:49:49.300 --> 00:49:52.660
Printer modules come second
and then finally the system

00:49:52.660 --> 00:49:54.240
user options come last.

00:49:57.430 --> 00:50:01.050
So here's the CFPlugin API as
I mentioned earlier.

00:50:01.050 --> 00:50:04.330
The first thing is a factory function,
which as I said,

00:50:04.340 --> 00:50:08.320
returns essentially a pointer
into a table that contains

00:50:08.390 --> 00:50:11.480
these three other functions,
which is query interface, add ref,

00:50:11.480 --> 00:50:12.400
and release.

00:50:12.400 --> 00:50:16.400
So what you have to do as a
plugin writer is implement these.

00:50:16.520 --> 00:50:20.270
What we have to do on our end in
the printing dialogs and for any

00:50:20.270 --> 00:50:26.400
other of our host software that loads
plugins is call your factory function

00:50:26.400 --> 00:50:27.400
to get back this pointer block.

00:50:27.400 --> 00:50:28.400
So we're going to talk
about that in a little bit.

00:50:29.400 --> 00:50:29.400
So the first thing is a query interface.

00:50:29.400 --> 00:50:33.850
The query interface is a method that we
use to get a hold of the actual instance

00:50:33.850 --> 00:50:37.340
for the API that we're looking for.

00:50:37.420 --> 00:50:41.400
In this case, printing dialog extensions.

00:50:41.400 --> 00:50:46.160
Add ref and release are there for
ref counting and the other thing is

00:50:46.160 --> 00:50:46.160
that we're looking for a method that

00:50:47.680 --> 00:50:50.070
It's bookkeeping.

00:50:50.080 --> 00:50:51.900
Printing Manager Plugin API.

00:50:51.900 --> 00:50:57.480
OK, all Printing Manager plugins have to
have these three functions implemented

00:50:57.480 --> 00:50:59.860
at the top of their list of functions.

00:50:59.900 --> 00:51:03.080
The first one is Get API Version, which,
as you might guess,

00:51:03.320 --> 00:51:07.030
returns to us the version of
the API that you were using

00:51:07.040 --> 00:51:08.580
when you created your plugin.

00:51:08.630 --> 00:51:09.690
And you get that from the header file.

00:51:09.700 --> 00:51:11.100
And you just return that constant.

00:51:11.100 --> 00:51:14.220
That way we know what we're calling into.

00:51:14.220 --> 00:51:16.570
Retain and Release, again,
are ref counting.

00:51:16.580 --> 00:51:22.460
And those are implemented separately
in the event that you use two separate

00:51:22.520 --> 00:51:31.040
objects to store the function tables for
your IUnknown versus your PDE interface.

00:51:31.040 --> 00:51:34.220
So we can do ref counting
on the two for you.

00:51:34.240 --> 00:51:36.380
If it turns out that's not the case,
then internally you just tie

00:51:36.380 --> 00:51:39.360
them together and make them
count up the same thing.

00:51:39.430 --> 00:51:41.990
So you have different ways
you can implement that.

00:51:44.360 --> 00:51:46.060
Printing Dialog Extension API.

00:51:46.090 --> 00:51:49.360
Okay,
so this is the actually important part.

00:51:49.360 --> 00:51:53.680
Prolog is the first function
that you get called,

00:51:53.700 --> 00:51:56.780
or first function of yours that will
get called by the printing dialogs

00:51:56.800 --> 00:51:58.740
when they come up and load your plugin.

00:51:58.830 --> 00:52:04.280
Prolog allows us to acquire
information about your plugin from you.

00:52:04.520 --> 00:52:11.810
We will get things from you
like the creator code for your

00:52:11.960 --> 00:52:15.340
for your printer module or for
your printer module or application.

00:52:15.390 --> 00:52:21.680
A type code that identifies what kind
of user option you're implementing

00:52:21.870 --> 00:52:24.900
so we know whether or not you're
going to override somebody.

00:52:24.940 --> 00:52:31.540
Apple will provide a list of types for
our universal and standard user options.

00:52:31.540 --> 00:52:39.310
So universal things like page
range of copies or orientation,

00:52:39.400 --> 00:52:40.690
things like that.

00:52:40.890 --> 00:52:43.740
So that if you want to override those,
you would provide a user option

00:52:43.740 --> 00:52:48.140
with the same type and then we would
know to replace ours with that.

00:52:48.310 --> 00:52:54.560
In addition,
you'll pass us the dimensions

00:52:54.670 --> 00:52:59.400
of your user interface so we
know what the maximum range

00:52:59.400 --> 00:53:02.560
that you want to display in are.

00:53:02.780 --> 00:53:09.720
And one or two other things
that I can't remember offhand.

00:53:09.930 --> 00:53:15.350
Anyway, so if you ask for more space
than we can provide you,

00:53:15.670 --> 00:53:18.620
we won't load you right now.

00:53:18.680 --> 00:53:21.900
We'll call you terminate function
and tell you why and then you can go

00:53:21.900 --> 00:53:24.900
ahead and redesign your user interface
to fit in a little smaller space.

00:53:24.900 --> 00:53:29.670
To the extent possible,
we will always try and accommodate you.

00:53:30.520 --> 00:53:32.400
Initialize then gets called.

00:53:32.400 --> 00:53:36.060
If we get your stuff
and everything's cool,

00:53:36.060 --> 00:53:37.390
we'll call your initialize function.

00:53:37.560 --> 00:53:41.570
And one of the things we'll
pass to you is a reference,

00:53:41.650 --> 00:53:46.100
which you need to store and pass
back to us any time you call into

00:53:46.100 --> 00:53:51.400
any printing manager functions
that your plug-in may have to call.

00:53:51.400 --> 00:53:53.400
And we can talk about that in a second.

00:53:54.400 --> 00:53:55.980
Oh, and one of the other
things you'll get passed,

00:53:56.060 --> 00:53:59.010
which you supplied to us
in your prolog function,

00:53:59.010 --> 00:54:00.400
is a context value.

00:54:00.400 --> 00:54:01.320
So you create a context value.

00:54:01.420 --> 00:54:03.260
It's basically a refcon.

00:54:03.260 --> 00:54:05.390
You can do anything you want,
32-bit value.

00:54:05.400 --> 00:54:08.700
You pass it to us in a prolog call,
and we will pass it to you in every

00:54:08.700 --> 00:54:10.400
subsequent call we make to you.

00:54:10.400 --> 00:54:14.490
So you can store global data or
whatever you want to in that.

00:54:15.750 --> 00:54:21.240
So at initialized time then that's your
time to go ahead and load your controls.

00:54:21.240 --> 00:54:25.280
We also supply you a user pane reference,
a reference to a control manager

00:54:25.290 --> 00:54:28.600
user pane into which you have
to embed all of your controls.

00:54:28.600 --> 00:54:32.600
So all of your controls for your
PDE will be embedded controls.

00:54:32.600 --> 00:54:39.600
They will use the control manager, sorry,
the Carbon event model to receive events.

00:54:39.600 --> 00:54:44.960
The application does not have to
support the Carbon event model,

00:54:44.980 --> 00:54:46.560
but your PDEs do.

00:54:46.600 --> 00:54:50.600
So you embed those in that pane.

00:54:50.600 --> 00:54:53.870
That pane determines the pane
that will be displayed when the

00:54:53.870 --> 00:55:01.290
user selects the panel from the
pop-up menu in the dialog box.

00:55:01.600 --> 00:55:07.850
Just before your panel becomes visible,
you'll get an open call so you can

00:55:07.860 --> 00:55:09.500
do anything you might want to do.

00:55:09.500 --> 00:55:14.490
Just before your panel goes invisible,
you'll get a close call just in case

00:55:14.510 --> 00:55:16.740
there's anything you want to do.

00:55:17.050 --> 00:55:22.490
And let's see,
sync is an interesting one.

00:55:22.540 --> 00:55:28.080
Sync is the call you get when
we want you to either read from

00:55:28.080 --> 00:55:32.440
or write to the session objects,
either the page formatting object

00:55:32.580 --> 00:55:34.830
or the print settings object.

00:55:34.900 --> 00:55:40.030
And so this is how you'll get
one of these shortly after the

00:55:40.030 --> 00:55:46.570
initialize call and you will be able
then to initialize your controls.

00:55:46.700 --> 00:55:53.020
Likewise, when your controls change,
you can request a sync call if you

00:55:53.020 --> 00:55:56.800
detect that something has changed
that you want to notify us about.

00:55:56.940 --> 00:55:58.910
And when you request that sync call,
that's one of those callbacks

00:55:59.080 --> 00:56:01.630
I was just telling you about,
you pass your reference,

00:56:01.630 --> 00:56:05.530
you will then get a call into your sync
function so that you can then update

00:56:05.640 --> 00:56:11.640
the page format or print settings object
depending on which dialogue you're in.

00:56:12.060 --> 00:56:14.850
This function becomes even more
interesting later on when we

00:56:14.860 --> 00:56:19.190
provide dependency handling,
which I'll talk about a little bit later.

00:56:19.500 --> 00:57:21.200
[Transcript missing]

00:57:48.400 --> 00:57:56.100
So, this is basically a very simple
printing dialog extension.

00:57:56.100 --> 00:58:02.010
It has a single control in it for,
just basically for

00:58:02.300 --> 00:58:05.100
demonstration purposes.

00:58:05.370 --> 00:58:09.290
Up at the top of the
function we're going to,

00:58:09.560 --> 00:58:17.390
well we have all our declarations
and all that good stuff.

00:58:17.390 --> 00:58:17.390
Oh yeah.

00:58:19.200 --> 00:58:21.200
Let's see,
do we actually define this part?

00:58:21.200 --> 00:58:24.540
We defined this part earlier, I think,
someplace.

00:58:24.540 --> 00:58:26.620
No, it's down farther.

00:58:28.410 --> 00:58:34.690
In the custom Info.plist file
for your plugin,

00:58:34.740 --> 00:58:38.340
if you're doing a printer module,
printing dialog extension,

00:58:38.450 --> 00:58:42.280
you have to define these various

00:58:43.000 --> 00:58:50.550
This is the ID for your factory
function and you specify the name

00:58:50.550 --> 00:58:54.990
of the actual factory function here.

00:58:55.920 --> 00:59:00.430
Then down below,
you tell it which types of

00:59:00.530 --> 00:59:05.630
plug-in that factory function
can return API instances for.

00:59:05.770 --> 00:59:10.340
And here's the same ID for the
factory function here and here.

00:59:10.460 --> 00:59:15.350
And this is the type for the
printing dialog extension plug-in.

00:59:15.360 --> 00:59:19.060
So all of your printing dialog extensions
will have this value on the left,

00:59:19.180 --> 00:59:22.990
and then you'll have an ID for
your plug-in factory on the right.

00:59:28.130 --> 00:59:34.140
We make some notice in here
about how you may want to

00:59:34.280 --> 00:59:38.860
During your prolog call,
open up your resource fork to get data

00:59:38.860 --> 00:59:41.240
for your controls and so forth and so on.

00:59:41.300 --> 00:59:43.640
And you can do that with
some sample code here.

00:59:43.640 --> 00:59:47.660
We show you how to define
a bundle identifier

00:59:48.960 --> 00:59:55.920
uh... which has to be specified in the
C... uh... plist file and uh... then

00:59:55.920 --> 00:59:59.690
from inside the code you can actually
do CFBundle get bundle with identifier.

00:59:59.700 --> 01:00:03.320
You pass at that bundle identifier and
you get a bundle reference and then you

01:00:03.320 --> 01:00:06.980
can do CFBundle open bundle resource
map to actually get the resource file

01:00:06.980 --> 01:00:11.710
and you get back a resource manager
reference number just like the good old

01:00:11.720 --> 01:00:18.330
days and uh... then you can do cure res
file and all that good stuff And you use

01:00:18.330 --> 01:00:21.210
CFBundle to close the resource map again.

01:00:24.560 --> 01:00:33.430
So up at the top of the file
we have the ad ref function

01:00:33.570 --> 01:00:35.780
for the I unknown interface.

01:00:35.780 --> 01:00:38.380
And you'll notice that it basically

01:00:39.050 --> 01:00:42.790
takes this object here and
increments the ref count field in it.

01:00:42.790 --> 01:00:47.210
So, add ref just increments
the ref count and release

01:00:48.620 --> 01:00:54.640
will decrement the ref count and at
zero it will unregister the factory.

01:00:54.820 --> 01:00:58.460
Unregister the instance
for the factory function.

01:00:58.460 --> 01:01:00.840
So that's pretty much
standard boilerplate.

01:01:00.840 --> 01:01:03.100
Any CF plug-in that you do is
going to have to do the same thing.

01:01:03.110 --> 01:01:06.780
So I encourage you to go read
the CF plug-in documentation

01:01:06.810 --> 01:01:08.140
for how to do this.

01:01:08.920 --> 01:01:12.100
Eventually it was hoped that the

01:01:12.600 --> 01:01:16.340
Project Builder System will be able
to generate CFPlugins directly and

01:01:16.510 --> 01:01:19.280
a lot of this sort of crufty stuff
at the top will be taken care of

01:01:19.440 --> 01:01:21.840
for you by the compiler and linker.

01:01:24.500 --> 01:01:27.890
Then following that we have
the Printing Manager's,

01:01:27.890 --> 01:01:32.700
Printing Manager plugin APIs for
retain and release which do

01:01:32.700 --> 01:01:34.400
very much the same thing.

01:01:34.550 --> 01:01:40.240
Get API version here basically
takes a PM plugin API version

01:01:40.240 --> 01:01:45.400
object and populates it with
the constants from the header.

01:01:45.400 --> 01:01:48.590
So you just load this thing
up and then you return it.

01:01:49.070 --> 01:01:56.830
These values are very similar to
the verse resource values that we've

01:01:56.830 --> 01:01:59.360
been using all along in Mac OS.

01:01:59.810 --> 01:02:01.690
Create plugin interface.

01:02:01.690 --> 01:02:06.750
I don't want to spend a whole lot
of time looking at CFPlugin stuff,

01:02:06.870 --> 01:02:10.700
but basically you create
what's called a Vtable.

01:02:10.880 --> 01:02:13.050
That terminology is vector table.

01:02:13.130 --> 01:02:15.700
It's pretty common for C++ sort of stuff.

01:02:15.700 --> 01:02:18.680
But basically you create this function
pointer table and you populate it with

01:02:18.840 --> 01:02:22.690
pointers to your various functions
and you return a pointer to that as

01:02:22.690 --> 01:02:24.700
part of the query interface call.

01:02:24.950 --> 01:02:29.700
When we call into your query interface
function asking for a specific API,

01:02:29.700 --> 01:02:33.020
we'll get back a pointer into that
function table and that way we'll

01:02:33.020 --> 01:02:38.700
have access then to all your printing
dialog extension API functions.

01:02:38.700 --> 01:02:42.190
So here's the factory function.

01:02:43.020 --> 01:02:49.520
And it creates the IUnknown Vtable
that we initially get back through

01:02:49.830 --> 01:02:51.000
which we call query interface.

01:02:51.000 --> 01:02:53.050
One of the interesting
things about query interface,

01:02:53.050 --> 01:02:55.880
I guess I'll just point out real quick,
to the extent that anything about

01:02:56.110 --> 01:03:00.450
query interface is interesting,
is that it goes ahead and it compares,

01:03:00.450 --> 01:03:04.840
it looks at the type of API that
you're asking for and returns

01:03:05.010 --> 01:03:08.150
the appropriate pointer based
on which type you asked for.

01:03:08.260 --> 01:03:11.610
So a given factory function
can return different kinds of

01:03:11.690 --> 01:03:13.760
APIs depending on your plug-in.

01:03:13.820 --> 01:03:17.390
In this case,
you'll likely only have the one,

01:03:17.390 --> 01:03:22.370
but CF plug-in allows you to
have more than one in there.

01:03:24.390 --> 01:03:26.540
Again,
this is a way you would implement perhaps

01:03:26.540 --> 01:03:29.290
more than one user option in a given PDE,
right?

01:03:29.310 --> 01:03:32.980
You'd have a factory function
that would return more interfaces

01:03:32.980 --> 01:03:34.620
or you'd have more than,
yeah,

01:03:34.640 --> 01:03:36.770
you'd be able to return more than one.

01:03:37.970 --> 01:03:41.410
So the first of the printing dialog
extension functions that we're

01:03:41.410 --> 01:03:43.580
interested in here is the prologue.

01:03:43.580 --> 01:03:45.900
And as you can see, okay,
so we have the creator,

01:03:45.900 --> 01:03:47.890
the context code that
we expect back from you,

01:03:47.900 --> 01:03:52.780
the creator, the user option kind,
the title, that's what I forgot,

01:03:52.780 --> 01:03:57.090
I knew there was something,
and the max and min extents.

01:03:57.460 --> 01:04:00.280
The title is the title that you're
going to see in the pop-up menu.

01:04:00.280 --> 01:04:05.620
For universal and standard user options,
we provide the title,

01:04:05.620 --> 01:04:07.550
and we'll simply ignore
anything you pass back.

01:04:07.560 --> 01:04:11.630
So the title really is meaningful
only if you're implementing a

01:04:11.770 --> 01:04:13.950
custom print dialog extension.

01:04:13.960 --> 01:04:18.900
The intent is to provide a uniform,
constant location for the user to be

01:04:18.900 --> 01:04:24.870
able to find certain types of features,
like print quality or paper source.

01:04:25.940 --> 01:04:27.930
So we will provide the title,
we'll localize it and

01:04:27.930 --> 01:04:30.250
all that good stuff,
and it saves you the trouble if that's

01:04:30.250 --> 01:04:34.110
all you're doing is overriding an
existing one or providing a standard one.

01:04:34.120 --> 01:04:35.930
If you're doing a custom,
you're on your own.

01:04:35.940 --> 01:04:37.530
You provide us a title, we'll display it.

01:04:38.870 --> 01:04:40.580
Okay.

01:04:43.840 --> 01:04:48.090
So we initialize our context,
we fill in our max and mins,

01:04:48.170 --> 01:04:55.020
we get our title with CFString up here.

01:04:56.300 --> 01:05:00.480
And we put in a creator
and if we had an error,

01:05:00.530 --> 01:05:02.700
we return an error.

01:05:02.700 --> 01:05:05.860
So,
next thing we get is an initialized call.

01:05:08.010 --> 01:05:11.900
Uh, and we pass in that context
code that you supplied us with.

01:05:11.900 --> 01:05:15.870
Uh, also some flags which tell
you certain things about,

01:05:15.930 --> 01:05:20.160
or we get back from you certain flags
which will tell us what you'd like to

01:05:20.160 --> 01:05:21.650
be able to do and various other things.

01:05:21.660 --> 01:05:24.150
Those flags are defined
in the header file.

01:05:24.900 --> 01:05:30.330
We pass you your reference number,
so that's your special reference number.

01:05:30.420 --> 01:05:31.800
Don't lose it.

01:05:31.800 --> 01:05:37.800
And we give you a user pane into which
you can draw and the print session.

01:05:37.840 --> 01:05:41.820
So you can get your initialization
from the print session objects there.

01:05:42.580 --> 01:05:44.630
So, you check, first thing you do is
you get your context,

01:05:44.630 --> 01:05:49.120
you check to make sure
your context is cool.

01:05:49.170 --> 01:05:51.720
If you need to,
you can save off a copy of the

01:05:51.720 --> 01:05:56.380
pointer to the window by doing get
control owner from the user pane.

01:05:57.250 --> 01:06:02.950
You can get your boundaries for your
user pane here and save those off.

01:06:03.600 --> 01:06:07.700
And right here we're keeping
a copy of them around.

01:06:07.790 --> 01:06:09.260
This function here is
our internal function.

01:06:09.260 --> 01:06:12.980
It gets our little--it just
gets a rectangle that defines

01:06:12.980 --> 01:06:14.180
the bounds of our control.

01:06:15.490 --> 01:06:19.390
And then we create a
new control right here.

01:06:19.390 --> 01:06:20.900
And we save our...

01:06:21.230 --> 01:06:24.150
Reference off inside our context.

01:06:24.150 --> 01:06:28.330
The next thing we do is we embed
our control into the user pane.

01:06:28.750 --> 01:06:52.340
And we make our control visible because
the user pane will be invisible.

01:06:52.340 --> 01:06:52.340
Your control won't show up
until we decide to show it.

01:06:52.340 --> 01:06:52.340
So you go ahead and set yours to be
visible as soon as you've embedded it.

01:06:52.340 --> 01:06:52.340
And that way when we bring up the
user pane it will actually show up.

01:06:52.340 --> 01:06:52.340
If you make your control invisible,
then you could make it visible

01:06:52.340 --> 01:06:52.340
when you get your open call,
but it makes life easier for you

01:06:52.340 --> 01:06:52.340
if you just do it right away.

01:06:53.010 --> 01:06:54.560
And we don't have any
particular flags to set here,

01:06:54.560 --> 01:06:55.860
so we just do that.

01:06:56.170 --> 01:06:59.910
And we make an internal call to
our own sync function inside this

01:06:59.910 --> 01:07:04.900
PDE here to initialize our values
so you can reuse your code that way.

01:07:04.980 --> 01:07:06.660
So that works.

01:07:06.690 --> 01:07:08.550
I get summary text.

01:07:08.730 --> 01:07:10.040
Again, you get your context.

01:07:10.060 --> 01:07:13.230
Whoops, a little too far.

01:07:13.370 --> 01:07:16.240
And we expect back from you
a couple of CFArrayRefs.

01:07:16.450 --> 01:07:20.150
So you're going to create two arrays,
one array of titles,

01:07:20.310 --> 01:07:22.660
one array of summary strings.

01:07:22.840 --> 01:07:25.680
And the title corresponds
to the particular control,

01:07:25.710 --> 01:07:29.320
and the summary string will tell us
what the value of that control or

01:07:29.320 --> 01:07:31.380
what the setting on that control is.

01:07:31.410 --> 01:07:33.920
And we will display all that
text in the summary pane.

01:07:33.920 --> 01:07:37.160
So you'll get a call to get
summary text when the user actually

01:07:37.270 --> 01:07:38.920
brings up the summary pane.

01:07:38.920 --> 01:07:41.920
If the user never does it,
you'll never see this call.

01:07:44.700 --> 01:07:51.310
Again, you use CF to create the array,
get your control value,

01:07:51.380 --> 01:07:53.530
push your strings in here,

01:07:55.920 --> 01:08:01.520
Here's your title for the
control and stick them in the

01:08:01.520 --> 01:08:04.110
pointers provided and return.

01:08:04.880 --> 01:08:09.600
Sync gives you a context
and a print session.

01:08:09.600 --> 01:08:12.280
So from the print session,
you can get all the relevant objects

01:08:12.280 --> 01:08:15.230
that you need to reference in
order to get your control settings.

01:08:15.710 --> 01:08:18.950
and a Boolean to
re-initialize the plugin.

01:08:18.950 --> 01:08:20.760
Okay, so the Boolean tells you
which way you're going,

01:08:20.760 --> 01:08:22.600
whether you're reading or writing.

01:08:22.720 --> 01:08:25.030
Okay, if it's true, you're reading.

01:08:25.040 --> 01:08:28.520
If it's false, you're writing.

01:08:28.520 --> 01:08:28.520
So.

01:08:30.550 --> 01:08:34.450
And so here we go.

01:08:34.880 --> 01:08:40.450
There are going to be probably somewhat
slicker ways to get the print objects out

01:08:40.530 --> 01:08:44.040
of the print session in the final APIs,
but right now,

01:08:44.040 --> 01:08:46.250
we just grab them out of there.

01:08:46.350 --> 01:08:50.610
And then we do a PM ticket get Boolean
to find out what our setting is.

01:08:50.660 --> 01:08:56.210
And then we set the control value to
one of the two values-- true or false,

01:08:56.960 --> 01:08:57.250
essentially.

01:08:57.440 --> 01:09:00.280
This else statement is
the else that says-- OK,

01:09:00.330 --> 01:09:02.520
so that's if we were reading.

01:09:02.520 --> 01:09:07.010
If we're writing, we go to the control,
we get the control value,

01:09:07.200 --> 01:09:11.970
and then we set the print settings
ticket either with a true or false value.

01:09:15.030 --> 01:09:17.010
Here's the open call.

01:09:17.010 --> 01:09:19.890
And as you can see,
we decided that we really don't need to

01:09:19.950 --> 01:09:22.290
do anything when the open call comes,
but there it is anyway.

01:09:22.450 --> 01:09:23.230
You still have to implement it.

01:09:23.340 --> 01:09:25.940
I mean, if you don't implement it
and the pointer is null,

01:09:25.940 --> 01:09:27.740
then we won't obviously be calling you.

01:09:27.740 --> 01:09:32.690
But, you know, it'd be nice to--it's
there if you need it.

01:09:32.690 --> 01:09:32.690
It's basically just a hook.

01:09:32.900 --> 01:09:34.910
And close, same thing,
we decided we didn't need

01:09:34.910 --> 01:09:35.990
to do anything there.

01:09:36.070 --> 01:09:39.790
And terminate, as you can see,
we get a status and the context.

01:09:39.820 --> 01:09:42.190
The status will tell you
why you're being terminated.

01:09:42.190 --> 01:09:44.850
And if you've been a good boy or girl,
you'll get a no error

01:09:45.030 --> 01:09:46.640
there and that'll be fine.

01:09:46.710 --> 01:09:49.600
And if you do get an error there,
there's not a whole lot

01:09:49.600 --> 01:09:50.800
you can do about it.

01:09:50.800 --> 01:09:54.290
It's purely for your information.

01:09:54.540 --> 01:09:58.010
It's mainly a debugging tool so that you
know that you've done something wrong.

01:09:58.830 --> 01:10:04.720
Assuming of course that everything
survived long enough for us

01:10:04.870 --> 01:10:06.350
actually to call you at that point.

01:10:06.750 --> 01:10:07.700
Let's see.

01:10:07.700 --> 01:10:13.410
Then you dispose of your controls,
dispose of your context, and return.

01:10:14.350 --> 01:10:16.280
And here we have some of
our internal functions,

01:10:16.310 --> 01:10:19.560
how we initialize our context,
we just do a new pointer, and so forth.

01:10:19.730 --> 01:10:22.050
So I think that's enough of that.

01:10:22.060 --> 01:10:26.100
So we can go back to the slides, please.

01:10:31.770 --> 01:10:39.080
So, in summary,
with Printing Dialog extensions,

01:10:39.080 --> 01:10:39.080
use standard control
manager controls calls,

01:10:40.250 --> 01:10:43.280
You'll be using,
you'll be embedding your controls

01:10:43.280 --> 01:10:47.230
into a user pane so that we can
show it and hide it easily and we

01:10:47.260 --> 01:10:50.240
don't have to know anything about
what your hierarchy looks like.

01:10:50.510 --> 01:10:52.080
Use the Carbon event
model to handle events.

01:10:52.210 --> 01:10:53.960
For the most part,
you probably won't even need

01:10:53.960 --> 01:10:55.920
to handle events unless you're
doing something special with the

01:10:55.930 --> 01:10:58.490
control where you actually need
to intercept events and so forth.

01:10:58.540 --> 01:11:01.050
If you do,
you need to write an event handler.

01:11:01.850 --> 01:11:05.920
Apps do not need to support the
Carbon event model in order to use these,

01:11:05.970 --> 01:11:08.600
but the PDE itself does.

01:11:08.650 --> 01:11:11.500
So even if you're not, you know,
even if you're an application

01:11:11.500 --> 01:11:13.890
that's using the old style events,
you'll still work fine if you have

01:11:13.900 --> 01:11:16.760
your own PDEs and you want to load
them and get events and all that.

01:11:16.800 --> 01:11:18.370
That'll all work.

01:11:18.600 --> 01:11:22.190
You synchronize with
the PM session objects,

01:11:22.200 --> 01:11:27.260
the page format and print settings
objects in your sync call,

01:11:27.350 --> 01:11:30.500
either reading or writing data,
and provide useful

01:11:30.610 --> 01:11:31.900
summary text for the user.

01:11:32.110 --> 01:11:34.500
Useful, localized summary text.

01:11:34.500 --> 01:11:37.070
So that when the user
brings up a summary pane,

01:11:37.170 --> 01:11:40.410
he'll be able to tell at a
glance what your settings are.

01:11:40.540 --> 01:11:43.470
Keep them short and sweet,
but informative.

01:11:43.500 --> 01:11:48.500
Don't write tomes and tomes of stuff.

01:11:50.150 --> 01:11:51.080
More don'ts.

01:11:51.100 --> 01:11:53.700
Don't draw outside your user pane.

01:11:53.730 --> 01:11:55.980
Please don't draw in our dialogue.

01:11:56.700 --> 01:11:59.770
Don't try to talk to other PDEs.

01:11:59.850 --> 01:12:02.320
Don't talk to strangers, right?

01:12:02.320 --> 01:12:06.660
We are going to provide you with a
mechanism to register dependencies on

01:12:06.660 --> 01:12:10.770
other types of user options and we will
automatically call your sync function

01:12:10.770 --> 01:12:12.530
when those dependencies are triggered.

01:12:12.530 --> 01:12:19.770
So don't go trying to read
other people's data to try and

01:12:19.770 --> 01:12:19.890
figure out what's going on.

01:12:19.890 --> 01:12:19.890
We'll let you know.

01:12:20.340 --> 01:12:22.390
Don't write another PDE's data.

01:12:22.400 --> 01:12:24.840
Don't go messing around with somebody
else's settings behind their back

01:12:25.000 --> 01:12:27.430
because then we don't know that that's
happened and they don't know that

01:12:27.530 --> 01:12:31.880
that's happened and everybody gets
really confused and things get messy.

01:12:32.130 --> 01:12:36.460
If you have a user pane--user
panel controls in there,

01:12:36.460 --> 01:12:38.990
try not to scroll controls.

01:12:39.040 --> 01:12:41.990
Scrolling controls is
frowned upon these days.

01:12:42.060 --> 01:12:44.430
Just try to fit everything
into your panel.

01:12:44.550 --> 01:12:49.400
If you need another panel,
make another panel.

01:12:49.400 --> 01:12:49.400
You can have as many as you like.

01:12:49.590 --> 01:12:53.340
And don't bring up lots of extra
dialogues to try and get more

01:12:53.500 --> 01:12:57.350
stuff on the screen if you can.

01:12:57.580 --> 01:13:00.780
An alert is one thing, that's fine,
but don't have lots

01:13:00.980 --> 01:13:02.320
and lots of dialogues.

01:13:02.370 --> 01:13:06.500
If you need more dialogues,
add another panel.

01:13:06.530 --> 01:13:11.060
You can have as many as you like.

01:13:12.450 --> 01:13:14.820
And with that,
I'm going to hand it back over to Paul,

01:13:14.820 --> 01:13:17.770
who is right here someplace.

01:13:24.630 --> 01:13:28.450
So I've just got two things to
add to what Mike had to say.

01:13:28.550 --> 01:13:31.150
First is that

01:13:32.560 --> 01:13:36.870
We don't have it posted yet,
but I believe in a week or two you'll

01:13:36.870 --> 01:13:44.360
find on the Carbon documentation site
there will be a very comprehensive and

01:13:44.370 --> 01:13:49.400
complete write-up on how to develop PDEs.

01:13:49.400 --> 01:13:52.090
And we'll get that
sample code out to you,

01:13:52.090 --> 01:13:55.200
and I think you'll find
it rather easy to write.

01:13:55.400 --> 01:13:58.580
And I would say,
just showing how easy it is to write,

01:13:58.580 --> 01:14:02.250
that a few months ago I was, I guess,
brave enough to try to write

01:14:02.290 --> 01:14:05.400
one when the code wasn't nearly
as organized as it is now.

01:14:05.400 --> 01:14:10.400
And I even got my panel up on the screen.

01:14:10.400 --> 01:14:12.660
Of course,
since then I think we've deleted it,

01:14:12.660 --> 01:14:13.380
but...

01:14:14.320 --> 01:14:17.700
Just proves that it's easy to do.

01:14:17.750 --> 01:14:21.510
Now we would have had a Q&A session
but the clock in front of

01:14:21.510 --> 01:14:25.840
me is saying that we've got,
let's see, 38 seconds to go.

01:14:26.170 --> 01:14:30.620
There's a feedback forum and I wish
I could tell you where it was.

01:14:30.650 --> 01:14:33.660
Maybe the next slide will tell us.

01:14:33.710 --> 01:14:34.820
In A2.

01:14:34.880 --> 01:14:36.900
So if you have more questions
about printing and certainly if

01:14:36.900 --> 01:14:40.900
you have questions about graphics
or anything relating to the two,

01:14:40.950 --> 01:14:45.050
I'd ask you to join us at
five o'clock in Hall A2.

01:14:45.100 --> 01:14:46.830
Thank you very much.