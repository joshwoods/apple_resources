WEBVTT

00:00:13.350 --> 00:00:16.020
Please welcome Denis Sereny.

00:00:16.200 --> 00:00:25.670
Hi, everyone.

00:00:25.700 --> 00:00:29.100
Welcome to Session 301,
QuickTime Streaming Server.

00:00:29.200 --> 00:00:32.200
My name is Denis Sereny.

00:00:32.200 --> 00:00:37.200
I'm a software engineer on the
QuickTime Streaming Server team at Apple.

00:00:37.290 --> 00:00:41.200
And I'm going to talk to you a lot
about QuickTime Streaming Server.

00:00:41.200 --> 00:00:44.200
For those of you who have been
at the previous two sessions,

00:00:44.210 --> 00:00:47.180
it's time to shift gears a little bit.

00:00:47.250 --> 00:00:50.750
We talked a lot about authoring,
a lot about integrating

00:00:50.750 --> 00:00:53.200
QuickTime into your application.

00:00:53.200 --> 00:00:57.200
Now I'm going to talk about a
whole new class of applications.

00:00:57.200 --> 00:00:59.200
Applications over on the server side.

00:00:59.200 --> 00:01:03.340
Things like integrating
QuickTime Streaming Server into

00:01:03.410 --> 00:01:08.250
a database or doing custom user
interfaces or doing monitoring

00:01:08.250 --> 00:01:10.200
tools for your streaming clients.

00:01:10.200 --> 00:01:13.200
So a whole new set of applications.

00:01:13.200 --> 00:01:16.450
And I'm going to talk for a
while and then at the end I'll

00:01:16.450 --> 00:01:20.200
stick around and we can do some
Q&A if you guys have questions.

00:01:21.150 --> 00:01:23.660
Okay, so.

00:01:24.160 --> 00:01:28.460
The main gist of the presentation,
I'm going to talk to you

00:01:28.520 --> 00:01:32.290
a lot about QTSS API,
which is a server-side API we introduced

00:01:32.290 --> 00:01:34.700
with QuickTime Streaming Server 2.

00:01:34.700 --> 00:01:38.930
And it's a fully,
it's a big C API that allows you to do

00:01:38.930 --> 00:01:43.420
a lot of things and allows you to extend
QuickTime Streaming Server in a lot of

00:01:43.420 --> 00:01:45.740
ways and a lot of cool applications.

00:01:45.740 --> 00:01:49.680
I'll show some demos of things
that you can do with QTSS API.

00:01:49.680 --> 00:01:52.880
And I don't know, many of you,
maybe you don't think

00:01:52.880 --> 00:01:54.080
that servers are cool.

00:01:54.090 --> 00:01:57.310
When I get through these demos,
hopefully you'll think that

00:01:57.310 --> 00:02:00.570
servers are pretty cool and
that you can do a lot with QTSS.

00:02:01.330 --> 00:02:03.840
So first, though,
I'm going to talk to you a little bit

00:02:03.840 --> 00:02:06.740
about QuickTime Streaming Server 2,
just the features,

00:02:06.740 --> 00:02:09.490
and then I'll also tell you a little
bit about things that we're working

00:02:09.490 --> 00:02:14.120
on for future releases of the server,
give you a little preview of that.

00:02:15.940 --> 00:02:22.220
OK, so QuickTime Streaming Server 2 is,
of course, we're talking only about

00:02:22.330 --> 00:02:24.460
RTSP and RTP streaming here.

00:02:24.460 --> 00:02:30.700
It handles real-time streaming protocol
and real-time transport protocol.

00:02:30.700 --> 00:02:34.920
And those are two
IETF standard protocols.

00:02:35.480 --> 00:02:39.220
One of the great things is that
QuickTime Streaming is just really the

00:02:39.220 --> 00:02:43.470
only major completely standards-based
streaming solution out there.

00:02:43.470 --> 00:02:46.750
And we're really trying to make
sure that QuickTime Streaming can

00:02:46.810 --> 00:02:50.260
interoperate with all the tools
that support these standards.

00:02:50.260 --> 00:02:51.160
So that's really great.

00:02:51.180 --> 00:02:55.970
And the two major features of
QuickTime Streaming Server are that it

00:02:56.080 --> 00:02:59.030
supports reflecting of live broadcasts.

00:02:59.180 --> 00:03:02.810
In the previous session,
you saw Kevin talking a little bit

00:03:02.860 --> 00:03:05.140
about encoders and broadcasters.

00:03:05.140 --> 00:03:08.230
And in one slide,
he showed QTSS sitting in

00:03:08.230 --> 00:03:10.760
between an encoder and clients.

00:03:10.850 --> 00:03:15.340
So you can use QTSS to reflect
a live broadcast out to a

00:03:15.420 --> 00:03:18.030
whole slew of RTSP clients.

00:03:18.070 --> 00:03:22.610
QTSS manages the complexity of all
the RTSP transactions of lots of

00:03:22.610 --> 00:03:25.020
clients coming in and going out.

00:03:25.060 --> 00:03:27.910
And then it also
supports video on demand.

00:03:27.910 --> 00:03:31.300
So that means you can take
hinted QuickTime movies,

00:03:31.300 --> 00:03:34.380
drop them in the media
folder on the server.

00:03:35.040 --> 00:03:41.910
And the server allows clients to connect
over RTSP and view them in streaming.

00:03:42.700 --> 00:03:46.000
One of the things that we added for
QuickTime Streaming Server 2 is that we

00:03:46.000 --> 00:03:49.710
also support RTSP tunneled through HTTP.

00:03:49.750 --> 00:03:52.080
That's different than
HTTP progressive downloads.

00:03:52.100 --> 00:03:55.240
It's true streaming,
but it's using the HTTP protocol.

00:03:55.240 --> 00:03:56.960
And why is that important?

00:03:57.160 --> 00:04:00.560
Well,
after we did 1.0 version of the server,

00:04:00.560 --> 00:04:05.060
we found that a lot of people who
are behind corporate firewalls or

00:04:05.060 --> 00:04:10.730
HTTP proxies or network address
translators couldn't get access to

00:04:10.730 --> 00:04:15.920
QuickTime Streaming because they only,
on their network topology,

00:04:16.030 --> 00:04:19.550
they could only get access to HTTP stuff.

00:04:19.640 --> 00:04:22.430
So because we support
tunneling RTSP into HTTP,

00:04:22.430 --> 00:04:26.010
it means that if you deploy a
QuickTime Streaming Server and if you

00:04:26.070 --> 00:04:26.980
deploy QuickTime Streaming Server,
you can get access to HTTP stuff.

00:04:26.980 --> 00:04:29.070
So if you deploy a QuickTime Streaming
Server and you deploy a

00:04:29.070 --> 00:04:31.510
QuickTime Streaming Server,
you'll know that all clients will be able

00:04:31.510 --> 00:04:34.480
to get access to QuickTime Streaming no
matter what kind of network they're on.

00:04:34.490 --> 00:04:35.540
So that's really important.

00:04:35.540 --> 00:04:38.070
We also added password security.

00:04:38.070 --> 00:04:41.300
This is something that I'll be
demoing a little bit later on.

00:04:41.300 --> 00:04:45.740
It's something that we implemented
using QTSS API completely.

00:04:45.740 --> 00:04:49.510
And it's a really important
component for doing pay-per-view.

00:04:49.510 --> 00:04:50.940
So that's a really neat thing.

00:04:50.940 --> 00:04:54.620
And then also the unicast
to multicast relay.

00:04:54.620 --> 00:04:56.800
Kevin told you a little
bit about multicast.

00:04:56.960 --> 00:05:00.560
We talked about multicast in
the previous presentation.

00:05:00.560 --> 00:05:04.330
One problem with multicast that he
touched on is just the fact that it's

00:05:04.330 --> 00:05:06.480
not universally deployed on the internet.

00:05:06.480 --> 00:05:09.360
So on a lot of networks,
they do have multicast,

00:05:09.370 --> 00:05:12.620
but only on pieces of the network,
or multicast is only

00:05:12.620 --> 00:05:14.250
good in certain areas.

00:05:14.250 --> 00:05:18.220
If you put a QTSS machine as
a relay at the border points

00:05:18.650 --> 00:05:23.350
between unicast and multicast,
it can translate between unicast

00:05:23.350 --> 00:05:25.830
and multicast and back again.

00:05:26.940 --> 00:05:30.560
And that allows you to utilize
multicast where it is available.

00:05:30.560 --> 00:05:33.080
And multicast is really good
to take advantage of because

00:05:33.130 --> 00:05:34.900
there's so much bandwidth savings.

00:05:34.900 --> 00:05:39.820
There's a lot of people that can only do
really high bit rate live presentations

00:05:39.820 --> 00:05:44.900
using multicast because otherwise there
would be just not enough bandwidth.

00:05:46.360 --> 00:05:47.450
OK.

00:05:47.710 --> 00:05:51.090
Now, of course, we're working on lots
of stuff for the future.

00:05:51.260 --> 00:05:55.070
There's two things that
I want to tell you about.

00:05:55.300 --> 00:05:58.520
One big thing is web administration.

00:05:58.990 --> 00:06:02.500
We want to make sure that QTSS,
in addition to being the most

00:06:02.500 --> 00:06:06.780
powerful streaming server out there,
is the easiest streaming server

00:06:06.780 --> 00:06:11.200
to set up and the easiest
streaming server to manage,

00:06:11.200 --> 00:06:14.500
to monitor all of your clients,
and that everyone will be

00:06:14.510 --> 00:06:16.320
able to do that easily,
remotely.

00:06:17.060 --> 00:06:22.870
And also, as part of implementing that
web administration interface,

00:06:22.870 --> 00:06:29.170
we're using QTSS API and we're writing
an administration protocol module.

00:06:29.170 --> 00:06:30.380
Well, what does that mean?

00:06:30.380 --> 00:06:34.810
This module that's on the server
will support an administration

00:06:34.810 --> 00:06:38.960
protocol that you as developers,
or anyone as a developer,

00:06:38.970 --> 00:06:43.080
can utilize for writing a
custom administration tool.

00:06:43.080 --> 00:06:47.890
There are so many things out there that
site administration... that streaming

00:06:47.890 --> 00:06:51.800
site administrators need to monitor,
and they need to do it in

00:06:51.800 --> 00:06:55.160
so many different ways that,
although we're going to try and

00:06:55.160 --> 00:06:58.670
cover as many bases as we can,
we recognize that with streaming

00:06:58.670 --> 00:07:02.280
moving as fast as it does,
we just can't cover everything.

00:07:02.280 --> 00:07:04.650
So,
we want to make it as easy as possible

00:07:04.650 --> 00:07:08.350
for third parties to tie into the server,
and we think that if we

00:07:08.350 --> 00:07:11.340
provide a protocol like this,
then they'll be able

00:07:11.340 --> 00:07:14.320
to write custom tools,
and so that's a really great

00:07:14.320 --> 00:07:16.940
opportunity to even to sell those tools.

00:07:17.060 --> 00:07:19.060
So, it's a really great
money-making opportunity,

00:07:19.060 --> 00:07:21.510
and in fact,
there's tons of great money-making

00:07:21.520 --> 00:07:24.940
opportunities with QTSS,
and I'll tell you a little

00:07:24.940 --> 00:07:27.210
about some more later on.

00:07:28.670 --> 00:07:32.880
Okay, now one of the,
really the most awesome thing about

00:07:32.880 --> 00:07:38.460
this project and working on this project
is that it's totally open source.

00:07:38.470 --> 00:07:44.400
From day one when we shipped QTSS 1.0,
we put all of the source out there.

00:07:44.400 --> 00:07:47.810
And that was a little
bit more than a year ago.

00:07:47.810 --> 00:07:51.240
Since then,
the entire streaming server team

00:07:51.240 --> 00:07:56.430
has really invested a lot in working
with the open source community and

00:07:56.430 --> 00:07:58.580
making sure that we're able to get
the right kind of content out there.

00:07:58.600 --> 00:08:00.820
We're not just taking
the open source name,

00:08:00.820 --> 00:08:04.580
that we're really doing everything
out in the open and just investing in

00:08:04.580 --> 00:08:06.860
making this open source project work.

00:08:06.860 --> 00:08:09.600
And it's worked really well, actually.

00:08:09.600 --> 00:08:12.980
And we've done a lot better, actually,
since starting out.

00:08:12.990 --> 00:08:15.460
We've started to add
a lot more platforms.

00:08:15.460 --> 00:08:18.670
And we've also tried to make
sure that all of the platforms

00:08:18.670 --> 00:08:21.810
that we can compile on,
we support really well.

00:08:21.820 --> 00:08:25.790
And so we've actually done internal
testing of Darwin's streaming

00:08:25.810 --> 00:08:28.120
server on different platforms.

00:08:28.120 --> 00:08:32.650
And we've also released binaries of the
server running on different platforms.

00:08:32.650 --> 00:08:38.140
So right now, we support Mac OS X server,
of course.

00:08:38.140 --> 00:08:45.650
And we've added, since 1.0,
we added Linux, FreeBSD, Solaris.

00:08:45.770 --> 00:08:46.060
We recently released a Solaris binary.

00:08:46.060 --> 00:08:49.820
And we just announced
support for Windows NT server

00:08:49.870 --> 00:08:52.700
and Windows 2000 server.

00:08:52.700 --> 00:08:55.660
Those binaries are not available yet.

00:08:55.710 --> 00:08:57.620
But we're still doing internal testing.

00:08:57.640 --> 00:09:03.290
But because we're open source,
you can actually get access to that code.

00:09:03.350 --> 00:09:07.560
And if you have Visual C++,
you have a Windows machine,

00:09:07.640 --> 00:09:13.140
you can check out the open source
CVS and get the entire source repository

00:09:13.140 --> 00:09:15.950
and compile that using Visual C++.

00:09:15.950 --> 00:09:18.090
So that's really neat.

00:09:18.120 --> 00:09:21.600
We're doing a lot of our
development right now using

00:09:21.620 --> 00:09:24.040
that open source CVS repository.

00:09:24.040 --> 00:09:27.160
So if you're daring,
you can check it out.

00:09:27.160 --> 00:09:30.270
You can check out our latest
development versions that we're

00:09:30.270 --> 00:09:31.880
checking code into all the time.

00:09:31.880 --> 00:09:34.060
And of course,
you shouldn't really do that and

00:09:34.060 --> 00:09:37.540
expect to actually deploy it,
because it may not work.

00:09:37.540 --> 00:09:41.200
But it's just neat that we're doing
all this development out in the open.

00:09:41.200 --> 00:09:46.000
So because of this open source thing,
I really haven't heard of another

00:09:46.000 --> 00:09:48.780
streaming server that is open source.

00:09:48.780 --> 00:09:51.180
So I can really say that we
are just the most extensible

00:09:51.180 --> 00:09:52.680
streaming server out there.

00:09:52.680 --> 00:09:53.600
We give it away.

00:09:53.600 --> 00:09:55.440
We give all the source code away.

00:09:55.440 --> 00:09:56.680
It's just a huge firepower.

00:09:56.700 --> 00:09:58.220
It's just a huge fire sale.

00:09:58.260 --> 00:10:01.400
It's really great to work on
this project because of that.

00:10:01.490 --> 00:10:06.800
And so developers can just go in there,
modify the code,

00:10:06.800 --> 00:10:10.260
and do whatever they want with it.

00:10:10.980 --> 00:10:14.200
And now we've added this QTSS API.

00:10:14.250 --> 00:10:18.340
When we first started out
with the open source project,

00:10:18.400 --> 00:10:22.780
we took a good look at other
successful open source projects

00:10:22.780 --> 00:10:26.880
because we wanted to emulate as much
as possible what they've done in order

00:10:26.990 --> 00:10:28.660
to make their project successful.

00:10:28.660 --> 00:10:32.110
And of course,
really the most successful server open

00:10:32.120 --> 00:10:34.760
source project is the Apache project.

00:10:34.760 --> 00:10:37.260
The Apache group,
Apache is the most popular

00:10:37.330 --> 00:10:40.230
web server out there,
and it's really one of the best

00:10:40.230 --> 00:10:40.880
known open source projects.

00:10:40.900 --> 00:10:44.190
And so we took a look
at the Apache server,

00:10:44.200 --> 00:10:48.690
and yeah, it's open source,
and that's really great,

00:10:48.810 --> 00:10:54.000
but in addition to being open source,
they also provide one of the most

00:10:54.000 --> 00:10:58.220
popular web server APIs available,
the Apache API.

00:10:58.220 --> 00:11:03.820
And that really helps their development
process because open source developers,

00:11:03.820 --> 00:11:07.080
because they have this
API which is documented and

00:11:07.090 --> 00:11:10.770
which is relatively static,
developers can go in and

00:11:10.770 --> 00:11:10.870
they can do a lot of work.

00:11:10.880 --> 00:11:15.880
And so they can go in and modify
Apache using the API and not really have

00:11:15.880 --> 00:11:20.040
to worry about the server as a whole,
all the things that Apache is doing.

00:11:20.040 --> 00:11:24.100
They just have to worry about
their particular little feature.

00:11:24.100 --> 00:11:26.910
And so it makes the open
source project much more

00:11:27.010 --> 00:11:29.280
organized and much more focused.

00:11:29.280 --> 00:11:33.980
And so that's one thing that I'm really
going to drive home as far as QTSS API.

00:11:33.980 --> 00:11:37.940
It makes developing in the open
source framework much easier

00:11:37.940 --> 00:11:40.600
because there is this organization.

00:11:40.860 --> 00:11:41.900
Thank you.

00:11:42.320 --> 00:11:47.060
OK, so I've talked a lot about QTSS API.

00:11:47.230 --> 00:11:49.870
Let me go into it in more detail now.

00:11:49.980 --> 00:11:53.090
And it's a C language
programming interface.

00:11:53.130 --> 00:11:56.780
You can also-- we use a lot
of C++ in our own modules,

00:11:56.810 --> 00:11:59.030
so you can use C++ as well.

00:11:59.130 --> 00:12:03.300
And it allows developers to add
custom modules to the server.

00:12:03.370 --> 00:12:07.200
Now these modules can,
much like Apache modules,

00:12:07.200 --> 00:12:09.820
can either be compiled
directly into the server,

00:12:09.820 --> 00:12:13.810
so you can write a module,
modify the server internals

00:12:13.820 --> 00:12:17.230
slightly in order to get it
to build inside the server,

00:12:17.320 --> 00:12:22.400
and release a monolithic server
with your module added to it.

00:12:22.400 --> 00:12:24.590
And as an alternative,
something that we're really

00:12:24.670 --> 00:12:28.880
encouraging module developers to take
advantage of as much as possible,

00:12:28.880 --> 00:12:33.320
is you can package up modules
as a separate shared library,

00:12:33.320 --> 00:12:36.600
or say on Windows, a DLL.

00:12:36.600 --> 00:12:39.820
And in order to do that--
and when that happens,

00:12:39.820 --> 00:12:43.750
you have a separate piece of code,
your module, and you can drop that into

00:12:43.750 --> 00:12:46.500
a QTSS modules folder.

00:12:46.500 --> 00:12:48.670
The server doesn't have
to be recompiled at all.

00:12:48.730 --> 00:12:51.920
It just-- when it's starting up,
it checks the QTSS modules

00:12:52.010 --> 00:12:55.100
folder and loads whatever
modules happen to be there.

00:12:55.100 --> 00:13:00.910
So that's a really easy way to make a
module and make it easily deployable.

00:13:01.210 --> 00:13:05.030
So it provides separation,
simplification, durability.

00:13:05.140 --> 00:13:12.310
Again, touching on the benefits that were
realized by the Apache project,

00:13:12.360 --> 00:13:17.900
when you want to add a feature,
say tying QuickTime Streaming

00:13:17.900 --> 00:13:20.760
Server into a proprietary
database backend or something,

00:13:20.760 --> 00:13:25.050
you don't have to worry about the fact
that QTSS has all these threads running,

00:13:25.050 --> 00:13:27.340
and there's all this
network traffic going on,

00:13:27.340 --> 00:13:31.080
and there's like 100 classes
or something in the server.

00:13:31.100 --> 00:13:34.540
And we're modifying them all the time
because we're adding these features.

00:13:34.540 --> 00:13:37.980
You don't have to worry about
that because we have this

00:13:38.110 --> 00:13:41.210
API which is well documented,
and it's durable.

00:13:41.210 --> 00:13:45.160
So moving forward for
QTSS 3.0 or 4.0 or 5,

00:13:45.160 --> 00:13:49.350
you won't have to modify your
module because it's an API that's

00:13:49.350 --> 00:13:51.780
backwards compatible as well.

00:13:51.780 --> 00:13:53.930
So that's a really big benefit.

00:13:53.940 --> 00:13:55.170
Okay.

00:13:56.420 --> 00:13:57.890
How is the API useful?

00:13:57.900 --> 00:13:59.300
What can you do with it?

00:13:59.310 --> 00:14:01.900
Well,
there are just tons of applications.

00:14:01.900 --> 00:14:07.740
We provided so many hooks in the server
that are exposed through this module API.

00:14:07.970 --> 00:14:09.220
Things like logging.

00:14:09.220 --> 00:14:14.130
So if you have a custom log format and a
custom tool that takes advantage of it,

00:14:14.160 --> 00:14:19.410
you can use QTSS API to
have it log in a custom way.

00:14:19.550 --> 00:14:20.420
Different file formats.

00:14:20.420 --> 00:14:23.580
So of course,
QTSS out of the box supports

00:14:23.770 --> 00:14:25.500
hinted QuickTime movies.

00:14:25.500 --> 00:14:31.190
Now you can provide a plug-in that
supports whatever file format you want.

00:14:31.540 --> 00:14:33.500
Status Reporting.

00:14:33.500 --> 00:14:37.290
Real-time statistics is something that,
again and again, is something that's so

00:14:37.290 --> 00:14:40.230
important to administrators.

00:14:40.290 --> 00:14:43.900
You can run a module in the
server that uses some back-end

00:14:43.900 --> 00:14:52.490
protocol and reports to a viewer,
a real-time viewer of some kind.

00:14:53.200 --> 00:16:08.000
[Transcript missing]

00:16:08.200 --> 00:16:09.940
And then finally, server administration.

00:16:09.940 --> 00:16:14.420
If, again, you know, getting back to our
administration protocol module,

00:16:14.420 --> 00:16:20.020
you can control the server in
however you want and provide a custom

00:16:20.030 --> 00:16:22.580
interface for controlling QTSS.

00:16:22.580 --> 00:16:24.680
So there's tons of things.

00:16:24.790 --> 00:16:29.360
And, I mean, this is really just a great
opportunity because the server is free,

00:16:29.440 --> 00:16:33.010
the server is open source,
and we're making all these

00:16:33.010 --> 00:16:36.960
efforts to allow people to
write modules very easily.

00:16:36.960 --> 00:16:40.110
And those modules can be sold for money.

00:16:40.140 --> 00:16:44.190
So, I mean,
it's just a great opportunity.

00:16:45.190 --> 00:16:50.220
So how do we know that
QTSS API is really useful,

00:16:50.220 --> 00:16:53.800
and how do we know that it really works?

00:16:54.220 --> 00:16:57.400
The great thing is that
when we developed QTSS 2.0,

00:16:57.400 --> 00:16:59.500
we integrated this API.

00:16:59.620 --> 00:17:04.440
We decided to take all of the
features that we had in QTSS 1.0

00:17:04.440 --> 00:17:07.500
and put them in QTSS API modules.

00:17:07.500 --> 00:17:12.000
And all of the features
that we added to QTSS 2.0,

00:17:12.020 --> 00:17:14.910
we also put in QTSS API modules.

00:17:15.060 --> 00:17:18.490
And so when we were done with the server,
we had, I think,

00:17:18.490 --> 00:17:22.540
something like 15 modules that
we ship along with the server.

00:17:22.540 --> 00:17:26.060
And some of those we provided
compiled in so that people can't,

00:17:26.170 --> 00:17:30.240
like, accidentally turn off hinted
QuickTime file serving if they mess

00:17:30.360 --> 00:17:32.680
around with their modules folder.

00:17:32.680 --> 00:17:35.180
But some of them we provided
as separate binaries.

00:17:35.180 --> 00:17:37.380
For instance,
the password security stuff,

00:17:37.400 --> 00:17:40.990
we recognize that probably, you know,
that doesn't concern everyone.

00:17:40.990 --> 00:17:43.330
So we provided those
as separate binaries.

00:17:43.340 --> 00:17:47.520
So we really... ate our
own dog food on this API.

00:17:47.520 --> 00:17:51.390
And so we really know that
for all of these applications

00:17:51.390 --> 00:17:53.880
that I'm talking about,
it can really be used and

00:17:53.880 --> 00:17:55.540
it's a really powerful tool.

00:17:55.540 --> 00:17:58.440
In fact, really,
if you take all of the modules

00:17:58.440 --> 00:18:02.260
out of the server that we shipped,
really the server doesn't do anything.

00:18:02.260 --> 00:18:06.400
It's basically just a framework that
provides this API to these modules.

00:18:06.420 --> 00:18:11.410
So another thing that we know is
that modules perform very well.

00:18:11.420 --> 00:18:16.240
QTSS, there's these... there's these
numbers that we talk... these

00:18:16.240 --> 00:18:17.880
performance numbers that we talk about.

00:18:17.990 --> 00:18:22.000
We support 2,000 low bitrate modem
stream clients simultaneously.

00:18:22.010 --> 00:18:27.140
And those numbers were generated
not through some optimized code

00:18:27.140 --> 00:18:30.000
path through the server that's
tailored around the benchmark.

00:18:30.000 --> 00:18:34.510
It's... those numbers were generated
by using the reflector module

00:18:34.510 --> 00:18:38.000
that I was talking about or using
the hinted QuickTime movie file.

00:18:38.000 --> 00:18:42.570
So we know that if you choose
to implement a feature for

00:18:42.570 --> 00:18:46.900
QTSS using the module API,
that you won't be sacrificing anything

00:18:46.970 --> 00:18:51.940
with performance because we know
that the API performs really well.

00:18:53.850 --> 00:18:57.980
OK, so I told you a lot about
the API from a high level.

00:18:58.020 --> 00:19:04.460
Let me just go over and show you
a little bit about what it can do.

00:19:04.460 --> 00:19:05.120
I've got--

00:19:05.680 --> 00:19:09.720
Oh, I've got the server up
over here on this monitor,

00:19:09.720 --> 00:19:15.130
but I need a client machine
over here so that I can show the

00:19:15.130 --> 00:19:17.470
server talking to the client.

00:19:17.620 --> 00:19:20.070
And that should be demo
machine number-- oh,

00:19:20.100 --> 00:19:20.600
wait.

00:19:20.600 --> 00:19:21.510
It fell asleep.

00:19:21.590 --> 00:19:22.880
That's all.

00:19:22.980 --> 00:19:25.050
There we go.

00:19:25.380 --> 00:19:31.080
Um, okay, so I've got a Mac OS X server
machine over here.

00:19:31.170 --> 00:19:36.380
We aren't aquized yet, but at least,
uh...

00:19:38.570 --> 00:19:42.240
Okay, so we've got the server running
over here and just has Streaming

00:19:42.320 --> 00:19:43.560
Server done starting up.

00:19:43.810 --> 00:19:48.100
And over on this machine over here,
I've got a client that's ready to connect

00:19:48.210 --> 00:19:50.600
and watch a movie coming off the server.

00:19:50.600 --> 00:19:51.700
So let me just do that.

00:19:51.760 --> 00:19:55.330
And it's asleep, so it's still waking up.

00:19:55.360 --> 00:19:57.040
Here we go, connecting, negotiating.

00:19:57.040 --> 00:19:58.330
Here we go, connecting.

00:19:59.670 --> 00:20:02.960
And that was coming off this server here.

00:20:03.050 --> 00:20:05.580
Now let me just bring down the server.

00:20:05.590 --> 00:20:07.080
You can just go Control-C.

00:20:07.080 --> 00:20:11.110
Oh, oops.

00:20:14.250 --> 00:20:15.340
There we go.

00:20:15.550 --> 00:20:19.200
So, and I've got this folder here.

00:20:19.200 --> 00:20:21.300
It's in...

00:20:22.190 --> 00:20:27.640
on this drive in user ESPIN,
and it's in this QTSS modules folder.

00:20:27.800 --> 00:20:33.100
So that's the folder that the server
looks for QTSS API modules in.

00:20:33.310 --> 00:20:35.700
And I've got this demo
authorization module,

00:20:35.700 --> 00:20:39.310
and let me just drag that
into the modules folder.

00:20:39.750 --> 00:20:45.340
This demo authorization module
works really similar to the access

00:20:45.410 --> 00:20:48.970
module that I was telling you
about that uses QT access files

00:20:49.040 --> 00:20:50.760
in order to do password security.

00:20:50.760 --> 00:20:55.140
Now when I go back and try
and watch that movie again,

00:20:55.140 --> 00:20:59.960
I've got to go to a different port
because I was using that port before.

00:20:59.960 --> 00:21:04.110
Now I've got to enter a password.

00:21:04.940 --> 00:21:10.200
If I enter something that's garbage,
it says, "No way, you can't do that."

00:21:10.260 --> 00:21:12.970
I've got a user set up,
Denis.

00:21:13.080 --> 00:21:17.290
I can't know what my password is.

00:21:17.920 --> 00:21:22.720
And so by dragging that module
into the modules folder,

00:21:22.720 --> 00:21:25.300
I added a new feature to the server.

00:21:25.300 --> 00:21:26.960
I added password security.

00:21:26.960 --> 00:21:29.430
So the server read that when
the server was starting up,

00:21:29.500 --> 00:21:34.720
and the module handled
denying access to that client.

00:21:34.910 --> 00:21:38.420
Okay,
so that's modules as a separate binary.

00:21:38.420 --> 00:21:43.710
Now, if I didn't want to provide that
module as a separate binary,

00:21:52.500 --> 00:21:57.140
As I was telling you,
you can package modules,

00:21:57.180 --> 00:22:00.080
both as separate binaries,
and compile them

00:22:00.080 --> 00:22:01.300
directly into the server.

00:22:01.480 --> 00:22:07.580
So I've got a different version of the
server that I compiled with the demo

00:22:07.580 --> 00:22:10.400
authorization module inside of it.

00:22:10.400 --> 00:22:13.390
So let me start that server up.

00:22:17.380 --> 00:22:23.520
There's nothing in the modules folder.

00:22:23.520 --> 00:22:26.700
When I start up the client again,
I'm going

00:22:42.820 --> 00:22:44.460
Well, I guess you're just going
to have to trust me on it.

00:22:44.530 --> 00:22:48.950
So if the server was up,
for some reason it's not up.

00:22:49.540 --> 00:22:52.870
Let me just try once more.

00:23:00.710 --> 00:23:05.480
If the server was up and running,
then you'd see the same behaviors

00:23:05.590 --> 00:23:08.340
that it was showing when
I had the demo authorization

00:23:08.390 --> 00:23:09.640
module in the modules folder.

00:23:09.690 --> 00:23:13.290
And that was,
it would be denying access to users

00:23:13.290 --> 00:23:18.600
unless they had name and password,
and that's because I compiled that

00:23:18.600 --> 00:23:22.690
module directly into the server.

00:23:22.700 --> 00:23:22.900
Back to slides.

00:23:34.680 --> 00:23:35.600
You know what?

00:23:35.600 --> 00:23:38.940
I think I know why this is happening.

00:23:39.070 --> 00:23:41.380
Anyone from the audience?

00:23:41.480 --> 00:23:48.090
I think it's because that machine
has got the same IP address.

00:23:48.090 --> 00:23:48.100
So...

00:23:50.810 --> 00:23:53.010
Well, I'll keep on going,
and if I've got problems

00:23:53.010 --> 00:23:56.780
with later demos,
then I don't know what I'll do.

00:23:56.780 --> 00:23:59.970
I'll have to reboot the machine.

00:24:00.490 --> 00:24:05.580
So how was that demo
authorization module built?

00:24:06.020 --> 00:24:08.390
As you saw,
it was built in two different ways.

00:24:08.490 --> 00:24:13.000
Using the QTSS API SDK is what you
need to do if you want to build

00:24:13.010 --> 00:24:14.590
a module as a separate binary.

00:24:14.600 --> 00:24:25.180
So, and what that SDK includes is a .h
file with just the QTSS API headers

00:24:25.180 --> 00:24:30.680
in it and a stub library that you
need to link your QTSS API module

00:24:30.680 --> 00:24:31.970
as a shared library or whatever.

00:24:32.020 --> 00:24:36.140
You link it against that stub
library and the SDK includes

00:24:36.140 --> 00:24:38.600
full documentation on the API.

00:24:38.700 --> 00:24:41.610
Now, if you want to do it
compiled into the server,

00:24:41.660 --> 00:24:44.500
then you need to have a copy
of the server source code,

00:24:44.500 --> 00:24:49.060
and then you just take the server and
make changes internally in the server

00:24:49.060 --> 00:24:51.940
in order to compile directly in.

00:24:51.940 --> 00:24:55.630
And those changes that you need to
make in the server are documented

00:24:55.630 --> 00:24:58.850
in the QTSS API documentation,
so you can find out what you

00:24:58.850 --> 00:25:02.440
need to do if you want to compile
it directly into the server.

00:25:02.440 --> 00:25:08.720
But one neat thing about this process
is that the module code doesn't

00:25:08.900 --> 00:25:13.360
have to be changed if you want to
build it as a shared library or

00:25:13.670 --> 00:25:16.060
compile it directly into the server.

00:25:16.060 --> 00:25:20.470
So when you're developing your module,
when you're developing your feature,

00:25:20.470 --> 00:25:24.000
you don't have to really decide
how it's going to be packaged.

00:25:24.070 --> 00:25:27.780
That's one thing that's important
for us when we're developing

00:25:27.830 --> 00:25:29.560
our modules internally.

00:25:29.560 --> 00:25:32.420
We don't really want to have to
decide how it's going to be packaged.

00:25:32.440 --> 00:25:34.730
We don't really want to decide until
the last minute whether we package

00:25:34.730 --> 00:25:36.310
them up as a separate binary or not.

00:25:36.410 --> 00:25:38.430
So because we don't
have to change the code,

00:25:38.490 --> 00:25:42.470
we don't really have to make that
decision until the last minute.

00:25:44.550 --> 00:25:47.540
OK, so now that I've shown you
a little bit about the API,

00:25:47.540 --> 00:25:51.410
let's dive into some of the API concepts.

00:25:51.480 --> 00:25:57.380
There are really four major concepts
that we're introducing with QTSS API.

00:25:57.570 --> 00:26:01.210
And they are roles,
which are just the framework that

00:26:01.210 --> 00:26:03.500
allow modules to get invoked.

00:26:03.500 --> 00:26:08.500
The server has a list of well-known
roles that the server invokes modules in,

00:26:08.500 --> 00:26:10.500
and modules play these roles.

00:26:10.500 --> 00:26:14.500
Callbacks are just the function calls
in the server that modules make.

00:26:14.500 --> 00:26:20.170
And then there are QTSS API objects,
which is the generic data

00:26:20.350 --> 00:26:22.500
passing mechanism in QTSS API.

00:26:22.500 --> 00:26:27.500
And streams are the way that modules
communicate directly to the client.

00:26:27.500 --> 00:26:32.500
And the demo authorization module
used all four of these concepts.

00:26:32.610 --> 00:26:36.200
So as I go through each one,
I'll show you some source code for what

00:26:36.310 --> 00:26:38.500
was in the demo authorization module.

00:26:38.500 --> 00:26:40.500
And I'll show you how the demo
authorization module works.

00:26:40.500 --> 00:26:44.140
authorization module
utilizes these concepts.

00:26:44.740 --> 00:26:47.660
So the first one is roles.

00:26:47.710 --> 00:26:51.360
Now roles are really similar to
if you've dealt with other server

00:26:51.360 --> 00:26:53.600
APIs or other APIs in general.

00:26:53.600 --> 00:26:55.520
Apache calls them handlers.

00:26:55.590 --> 00:26:57.920
Modules play a role.

00:26:58.410 --> 00:27:01.810
There's a list of
well-known roles in the API,

00:27:01.810 --> 00:27:06.950
things like initialization and
the demo authorization module

00:27:06.950 --> 00:27:12.150
uses the authorization role
in order to authorize clients.

00:27:12.180 --> 00:27:17.940
And modules provide a role handler,
which is just a function, basically,

00:27:17.940 --> 00:27:22.640
and that function gets called
when that situation comes up and

00:27:22.740 --> 00:27:25.310
then the module code executes.

00:27:25.410 --> 00:27:28.860
And from that code,
then modules can make callbacks

00:27:28.860 --> 00:27:31.310
and control the server that way.

00:27:31.340 --> 00:27:35.950
So here is just the source
code in the demo authorization

00:27:36.330 --> 00:27:38.720
module talking about roles.

00:27:38.720 --> 00:27:43.100
This is a function called register,
which is the role handler

00:27:43.100 --> 00:27:44.440
for the register role.

00:27:44.440 --> 00:27:48.080
It's the first role that gets
called by the server when

00:27:48.080 --> 00:27:51.270
the server is starting up,
and every QTSS API module

00:27:51.270 --> 00:27:52.980
must handle this role.

00:27:54.760 --> 00:27:58.630
One of the only things that
modules need to do from inside

00:27:58.710 --> 00:28:03.550
this role is just tell the server
what other roles it wants to play.

00:28:03.570 --> 00:28:07.770
It does that by making
this add role callback.

00:28:08.100 --> 00:28:11.720
And so the demo authorization
module here is telling it that it

00:28:11.720 --> 00:28:16.940
wants to play the initialize role,
and that is just a role that gets called

00:28:16.940 --> 00:28:19.890
immediately after the register role.

00:28:19.990 --> 00:28:24.860
And modules can do one-time
initialization tasks that way.

00:28:24.960 --> 00:28:29.640
It also wants to be called in
the reread preferences role,

00:28:29.750 --> 00:28:32.440
and that's a role that gets
invoked whenever the server is

00:28:32.440 --> 00:28:35.450
told to reread its preferences.

00:28:35.610 --> 00:28:38.560
And then finally,
the RTSP Authorize role.

00:28:38.730 --> 00:28:42.900
That gets invoked on every single
RTSP request to the server.

00:28:43.050 --> 00:28:48.170
And from inside that role,
a module can say whether the

00:28:48.170 --> 00:28:50.730
client should be allowed or denied.

00:28:50.760 --> 00:28:55.280
And so that's how the demo
authorization module told the server

00:28:55.280 --> 00:28:58.280
to deny access to clients sometimes.

00:29:01.190 --> 00:29:05.640
And then finally,
the QTSS RTSP Session object contains

00:29:05.700 --> 00:29:10.740
information related specifically
to the RTSP control connections,

00:29:10.740 --> 00:29:16.970
so things like that TCP IP address
and what port that is happening on,

00:29:16.970 --> 00:29:17.820
something like that.

00:29:17.860 --> 00:29:22.020
And then finally,
the one that was utilized by the

00:29:22.020 --> 00:29:28.260
demo authorization module before,
the QTSS RTSP request object,

00:29:28.260 --> 00:29:32.800
which contains things that are
particular to a given RTSP request,

00:29:32.800 --> 00:29:35.640
like what RTSP method was being used.

00:29:35.670 --> 00:29:38.060
Is it describe or set up or tear down?

00:29:38.060 --> 00:29:40.970
Is it, what URL is it accessing?

00:29:40.970 --> 00:29:43.640
What headers that request had?

00:29:43.790 --> 00:29:45.570
Things like that.

00:29:52.900 --> 00:30:00.960
So finally, the last concept,
QTSS API Streams.

00:30:01.100 --> 00:30:08.700
Streams are kind of the most powerful way
that modules can manipulate the client

00:30:08.700 --> 00:30:14.000
because they allow the module to send
raw data directly back to the client.

00:30:14.000 --> 00:30:21.300
So if you want to send, say,
a custom response to a QuickTime client,

00:30:21.300 --> 00:30:23.700
then you can just do that
by writing to a stream.

00:30:24.380 --> 00:30:28.600
And there's a callback in the server
called QTSS Write that allows you

00:30:28.650 --> 00:30:34.050
to communicate directly with the
client just by sending it data.

00:30:34.720 --> 00:30:37.440
The interesting thing is that
the first demo that I showed you,

00:30:37.440 --> 00:30:41.800
the demo authorization
module in that demo,

00:30:41.800 --> 00:30:44.380
didn't actually use RTSP streams.

00:30:44.400 --> 00:30:49.950
In order to allow or deny clients,
all it really needs to do is use objects

00:30:50.190 --> 00:30:54.940
and call setValue in order to say
that a request is allowed or denied.

00:30:54.940 --> 00:31:06.530
I've got a modified version of
the demo authorization module.

00:31:06.530 --> 00:31:06.530
Let me just bring down the server.

00:31:08.380 --> 00:31:11.750
So let me get this,
the roles version of the demo

00:31:11.750 --> 00:31:14.480
authorization module out of here.

00:31:14.480 --> 00:31:18.980
And I'll get this new version
with streams and put it

00:31:19.120 --> 00:31:21.540
into the modules folder.

00:31:21.540 --> 00:31:26.380
Restart the server.

00:31:26.380 --> 00:31:30.370
Okay,
so now I'm going to go ahead and create

00:31:30.370 --> 00:31:30.370
a new version of the demo authorization

00:31:37.790 --> 00:31:40.200
Now the experience is going
to be a little bit different

00:31:40.200 --> 00:31:42.160
when users are denied.

00:31:42.160 --> 00:31:45.840
So if I were to put in some
kind of bad password here,

00:31:45.960 --> 00:31:51.580
instead of just getting re-prompted,
I get redirected.

00:31:53.500 --> 00:32:01.300
[Transcript missing]

00:32:05.510 --> 00:32:09.520
OK, so what happened there?

00:32:09.630 --> 00:32:14.740
What the demo authorization module did,
instead of just returning allowed

00:32:14.740 --> 00:32:18.830
or denied back to the client,
it issued an RTSP redirect

00:32:18.950 --> 00:32:21.420
back to the client,
which told the client to go

00:32:21.420 --> 00:32:25.540
and fetch this other movie,
an error movie, and play that instead of

00:32:25.540 --> 00:32:27.090
just showing the prompt.

00:32:27.850 --> 00:32:30.280
And RTSP redirects,
in case you're not familiar,

00:32:30.280 --> 00:32:32.500
are kind of similar to,
in the first session,

00:32:32.620 --> 00:32:35.300
we were talking a little
bit about HTTP redirects.

00:32:35.320 --> 00:32:38.300
RTSP redirects work exactly the same way.

00:32:38.300 --> 00:32:43.510
It's just a way for the server to tell
the client not to go to the URL that

00:32:43.510 --> 00:32:48.850
it's... So if the client sends a request
to the server with a certain URL,

00:32:48.850 --> 00:32:52.540
the server can respond with
a redirect telling the client

00:32:52.580 --> 00:32:54.600
to just go somewhere else.

00:32:54.600 --> 00:32:57.710
So the demo authorization module
sent one of these redirects.

00:32:57.840 --> 00:32:59.790
And it's actually going to send a
message to the client telling it

00:32:59.820 --> 00:33:01.030
to go and fetch that error movie.

00:33:01.040 --> 00:33:04.620
OK, back to slides.

00:33:06.770 --> 00:33:10.250
OK, so-- and the thing is,
is that the source, in order to do that,

00:33:10.350 --> 00:33:11.750
really isn't that much.

00:33:11.860 --> 00:33:15.000
There's just these two
calls that I had to add.

00:33:15.000 --> 00:33:18.800
This is really the entire bit of
code that I had to add to the demo

00:33:18.890 --> 00:33:23.760
authorization module in order to get
that extra functionality in there.

00:33:23.880 --> 00:33:25.990
So what did I do?

00:33:26.230 --> 00:33:32.140
I used QTSS API streams to send that
RTSP redirect back to the client,

00:33:32.140 --> 00:33:35.820
because I needed to
formulate an entire request,

00:33:35.840 --> 00:33:38.810
because a redirect is
kind of a custom request,

00:33:38.810 --> 00:33:43.140
and send that back with
the module communicating,

00:33:43.140 --> 00:33:45.700
sending raw data back to the client.

00:33:45.700 --> 00:33:51.560
So in order to do that,
I got a stream ref out

00:33:51.690 --> 00:33:54.720
of the request object.

00:33:54.770 --> 00:33:57.940
Streams are attributes in objects,
so you first have to get the

00:33:57.940 --> 00:34:00.000
stream out of the object.

00:34:00.000 --> 00:34:04.000
And streams in different object
types do different things.

00:34:04.000 --> 00:34:06.580
The stream that's contained in the
RTSP request object is the stream that's

00:34:06.580 --> 00:34:09.610
contained in the RTSP request object,
can be used to send data back to

00:34:09.620 --> 00:34:12.280
the client as an RTSP response.

00:34:12.280 --> 00:34:16.210
So that's the first call there,
that get value pointer,

00:34:16.210 --> 00:34:20.180
which returns a stream ref
that can be used and passed

00:34:20.230 --> 00:34:24.380
into the bottom call there,
the QTSS write call.

00:34:24.380 --> 00:34:28.390
And that's just a call which--it's
just like any other stream interface,

00:34:28.390 --> 00:34:29.780
really, that you've seen.

00:34:29.780 --> 00:34:32.190
It just--you just write
raw data to the stream,

00:34:32.190 --> 00:34:34.320
and it sends it back to the client.

00:34:34.320 --> 00:34:39.270
So what the module is doing is
that--sending that redirected

00:34:39.270 --> 00:34:44.160
buffer back to the client,
and that's just a buffer in memory

00:34:44.160 --> 00:34:48.020
that contains the redirect response.

00:34:48.020 --> 00:34:52.120
So that's really all the code that
I need to add in order to do that.

00:34:52.120 --> 00:34:56.170
So as I was saying before,
there are a couple of different

00:34:56.270 --> 00:34:58.780
kinds of streams in the server.

00:34:58.780 --> 00:35:02.230
There's one contained in
the QTSS session object,

00:35:02.230 --> 00:35:06.460
and again, that's a way to communicate
directly to the RTSP user.

00:35:06.460 --> 00:35:10.260
So the first one is the
RTSP client sending RTSP responses.

00:35:10.260 --> 00:35:14.800
And then there's one also
in the QTSS request object.

00:35:14.800 --> 00:35:17.460
Now, these do basically
exactly the same thing.

00:35:17.460 --> 00:35:21.340
They're both ways to communicate
back to the RTSP client,

00:35:21.340 --> 00:35:23.320
send RTSP responses.

00:35:23.320 --> 00:35:26.500
And the demo authorization
module used the bottom one.

00:35:26.510 --> 00:35:31.140
The only difference is that the top one,
the RTSP session stream,

00:35:31.140 --> 00:35:35.380
doesn't buffer any data internally,
and so you have to

00:35:35.380 --> 00:35:37.460
worry about the server.

00:35:37.460 --> 00:35:41.740
All of these streams are async because
the server has to do everything async.

00:35:41.740 --> 00:35:44.480
We're managing lots and
lots of client connections,

00:35:44.480 --> 00:35:48.050
so if you block, then you would be
blocking lots of clients,

00:35:48.090 --> 00:35:49.200
not just one.

00:35:49.200 --> 00:35:54.830
So if you use the session object stream,
you have to worry about flow control,

00:35:54.990 --> 00:35:57.110
and that can be useful
to use that stream,

00:35:57.110 --> 00:36:00.260
even though you need to worry about
it because the bottom one buffers

00:36:00.370 --> 00:36:04.320
all data internally in order to
protect the module from flow control,

00:36:04.330 --> 00:36:06.340
so it's kind of simpler.

00:36:06.340 --> 00:36:06.340
But you want to be able to
use that stream to do that.

00:36:06.340 --> 00:36:06.880
So that's the reason why I'm
saying that the RTSP request object

00:36:06.880 --> 00:36:07.340
is a little bit more complex.

00:36:07.340 --> 00:36:10.010
You wouldn't want to send, like,
a 30 megabyte file back using the

00:36:10.120 --> 00:36:14.880
RTSP request object because you'd be
buffering that 30 megabytes in memory,

00:36:14.880 --> 00:36:16.580
which would not be good.

00:36:16.850 --> 00:36:18.940
Okay, so there's two others in the API.

00:36:18.940 --> 00:36:25.180
There's a stream contained in
the QTSS RTP stream object.

00:36:25.260 --> 00:36:27.180
It's a lot of streams in one sentence.

00:36:27.180 --> 00:36:30.990
But what that can do is if
you write to that stream,

00:36:30.990 --> 00:36:35.380
you're writing media data
back to the client over RTP.

00:36:35.680 --> 00:36:39.310
So, for instance,
the Reflector Module that we have

00:36:39.410 --> 00:36:44.020
for reflecting live broadcasts
and the hinted QuickTime Module,

00:36:44.080 --> 00:36:48.020
that uses RTP streams in the
RTP stream object to send video

00:36:48.070 --> 00:36:50.840
and audio data back to the client.

00:36:50.840 --> 00:36:54.400
So we have a very kind of universal
interface for sending all kinds of

00:36:54.400 --> 00:36:56.460
different data back to the client.

00:36:56.460 --> 00:36:59.690
And then finally,
the server also provides a stream ref for

00:36:59.690 --> 00:37:03.670
writing messages out to the error log,
which is good for having modules

00:37:03.670 --> 00:37:05.660
give feedback back to the client.

00:37:05.680 --> 00:37:08.020
back to administrators.

00:37:09.520 --> 00:37:14.720
Okay, so that's really coverage of
all four concepts in QTSS API.

00:37:14.720 --> 00:37:18.280
Now, of course,
like we're moving the server forward,

00:37:18.280 --> 00:37:20.460
we're also going to be
moving the API forward.

00:37:20.460 --> 00:37:22.650
We're going to be continually
adding features to it,

00:37:22.700 --> 00:37:26.550
and we're encouraging you as developers,
if you do use the API,

00:37:26.660 --> 00:37:29.780
to give us feedback and tell
us what you'd like us to do.

00:37:29.780 --> 00:37:32.400
And, you know, because it's open source,
you can also go in there and

00:37:32.400 --> 00:37:33.800
become a contributor yourself.

00:37:33.800 --> 00:37:37.940
So here are just a couple of things that
we are thinking about and working on.

00:37:38.520 --> 00:37:41.260
We're moving our
configuration file to XML,

00:37:41.260 --> 00:37:45.100
and one of the main reasons
for that is just so that we can

00:37:45.150 --> 00:37:52.260
compartmentalize better preferences
that have to do with specific modules.

00:37:52.300 --> 00:37:56.380
And as part of that effort,
we're going to be providing

00:37:56.380 --> 00:38:01.660
individual QTSS API objects that
represent individual modules.

00:38:01.660 --> 00:38:05.990
And so those module preferences will
be stored in those module objects.

00:38:06.000 --> 00:38:10.340
And then finally... One of the big
requests that we've had from the

00:38:10.340 --> 00:38:15.400
outside is to provide an API for the
file system so that people can write

00:38:15.470 --> 00:38:18.250
modules to plug in custom file systems.

00:38:18.260 --> 00:38:23.290
This is really important, for instance,
if you want to have QTSS plug

00:38:23.290 --> 00:38:27.550
into a database or plug QTSS into
a networked file system,

00:38:27.550 --> 00:38:30.080
some kind of custom file system.

00:38:30.080 --> 00:38:34.600
Now you can write a module,
or at least whenever we finish this up,

00:38:34.740 --> 00:38:38.400
then you'll be able to write a
module that can implement that file

00:38:38.400 --> 00:38:42.810
system and have QTSS generically
start using your file system.

00:38:42.820 --> 00:38:45.660
So those are just a couple of
things that we're working on.

00:38:45.700 --> 00:38:49.640
And again,
feedback is a big part of this process.

00:38:49.790 --> 00:38:59.140
So here are three key places to look for
more information on QTSS and QTSS API.

00:38:59.200 --> 00:39:02.940
And a really nice thing about the
API is that it's really well documented.

00:39:02.940 --> 00:39:05.030
We have a lot of documentation on it.

00:39:05.040 --> 00:39:09.730
So hopefully... that'll also help ease
the learning curve and all of the stuff

00:39:09.840 --> 00:39:14.820
that I talk about in this presentation
is also available in that documentation.

00:39:14.820 --> 00:39:18.820
So in order to get that and
to get the QTSS API SDK,

00:39:19.020 --> 00:39:21.360
you go to public source
dot apple dot com,

00:39:21.430 --> 00:39:25.020
because it's an open source project,
and then project streaming.

00:39:25.080 --> 00:39:28.820
Now if you're just interested in checking
out QuickTime's streaming server,

00:39:29.100 --> 00:39:32.950
running on Mac OS X server,
you can go to apple dot com, quicktime,

00:39:33.080 --> 00:39:35.700
servers dot html, you can download it.

00:39:35.700 --> 00:39:38.740
It's free if you've already
got a copy of Mac OS X server,

00:39:38.740 --> 00:39:41.090
so it's really easy to get set up.

00:39:41.230 --> 00:39:44.140
And if you go to the first link,
actually,

00:39:44.240 --> 00:39:49.440
then we also have on that site binaries
for all of our different platforms,

00:39:49.440 --> 00:39:51.750
except again Windows,
and that's coming soon.

00:39:51.810 --> 00:39:56.820
So you can download there Linux binaries,
you can download FreeBSD, Solaris,

00:39:56.860 --> 00:40:00.970
and we also have an open source
version of Mac OS X server,

00:40:00.970 --> 00:40:01.820
I think.

00:40:01.850 --> 00:40:04.500
And then finally,
a really great resource for...

00:40:04.680 --> 00:40:08.500
talking to the QuickTime streaming
server engineering team directly,

00:40:08.530 --> 00:40:13.540
and giving feedback and asking questions,
is by using the Darwin streaming

00:40:13.540 --> 00:40:15.220
server development list.

00:40:15.290 --> 00:40:18.820
And the way that you get on
that is lists dot apple dot com,

00:40:18.910 --> 00:40:21.020
streaming server,
search for streaming server,

00:40:21.020 --> 00:40:22.580
and then it's really easy to sign on.

00:40:22.580 --> 00:40:24.720
And that's a really active list.

00:40:24.720 --> 00:40:27.720
Everyone's asking questions
about their having problems

00:40:27.760 --> 00:40:30.440
compiling on certain platforms,
or they have certain

00:40:30.440 --> 00:40:31.780
suggestions for the code.

00:40:31.870 --> 00:40:34.290
People give us,
people submit code that way.

00:40:34.300 --> 00:40:38.940
So it's a really good way of
getting in touch with us directly.

00:40:38.940 --> 00:40:41.170
So I encourage you to do that.

00:40:42.510 --> 00:40:44.840
And then finally, we've got Q&A now.

00:40:44.840 --> 00:40:47.300
We've got plenty of time, actually.

00:40:47.300 --> 00:40:55.770
So if you guys want to stick around
and go to the microphones here.

00:40:55.770 --> 00:40:55.770
I don't know if...