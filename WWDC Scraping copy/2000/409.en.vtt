WEBVTT

00:00:09.790 --> 00:00:11.730
The title of this slide was WebObjects
and Security because that's what we

00:00:11.730 --> 00:00:15.200
thought we'd need after the last session,
calling security in to manage

00:00:15.260 --> 00:00:16.340
the Objective-C issues.

00:00:16.370 --> 00:00:19.500
But I think that actually
people are behaving pretty well,

00:00:19.500 --> 00:00:20.900
and I appreciate that.

00:00:20.940 --> 00:00:22.210
But obviously there's
other kinds of security,

00:00:22.320 --> 00:00:25.090
such as making sure that the
right people can see the right

00:00:25.090 --> 00:00:26.610
data and the wrong people don't.

00:00:26.660 --> 00:00:27.720
And for that, we have David Neumann.

00:00:27.880 --> 00:00:28.760
David?

00:00:28.770 --> 00:00:30.170
Okay.

00:00:33.700 --> 00:00:37.340
Okay, I've got a lot to cover,
so if I do this right,

00:00:37.350 --> 00:00:44.600
I'll talk real fast and hopefully be able
to follow or it won't be too confusing.

00:00:44.760 --> 00:00:47.220
This basic things I'm going to
cover include a security concept,

00:00:47.220 --> 00:00:49.600
some coding techniques,
and I created a special kit

00:00:49.600 --> 00:00:52.670
for this conference that
I call the Woe Security Kit,

00:00:52.670 --> 00:00:53.600
and it includes a bunch of stuff.

00:00:53.630 --> 00:00:56.850
And in demoing some of the concepts
that you can roll your own,

00:00:56.850 --> 00:01:00.250
I'm also going to be demoing, in effect,
aspects of the security

00:01:00.310 --> 00:01:01.580
kit at the same time.

00:01:01.610 --> 00:01:04.600
And then I'll be covering
some B2B applications.

00:01:04.600 --> 00:01:06.600
And security, this is a big word.

00:01:06.600 --> 00:01:11.160
I heard someone said in an earlier talk,
"You know, I want to know about doing

00:01:11.160 --> 00:01:13.590
security with my application.

00:01:13.600 --> 00:01:17.900
Can you tell me about making my app,
you know, doing security with it?" And,

00:01:17.900 --> 00:01:21.040
you know, that's a really big thing,
and I'm not even going to

00:01:21.040 --> 00:01:22.600
be able to cover all of it.

00:01:22.600 --> 00:01:25.200
I'm going to focus on secrecy,
which is what most people think

00:01:25.200 --> 00:01:29.600
of when they think of security,
some detail on the concept of integrity,

00:01:29.610 --> 00:01:33.520
and a little bit, well,
I say not covered there,

00:01:33.600 --> 00:01:37.600
but I mean there's this tiny
smidgen on availability.

00:01:37.720 --> 00:01:40.600
Okay, so this is sort of the
outline of the talk.

00:01:40.600 --> 00:01:42.690
I'm going to talk about
cryptography first,

00:01:42.800 --> 00:01:45.600
authentication techniques next,
and that will be the heart of the thing,

00:01:45.800 --> 00:01:50.600
access control and enterprise objects,
and finally, integrity of transactions.

00:01:50.600 --> 00:01:52.600
And time permitting,
I'm going to get to the fourth bullet.

00:01:52.600 --> 00:01:54.600
Hopefully I'll be able to get to it.

00:01:54.720 --> 00:01:57.600
Okay, cryptography.

00:01:57.600 --> 00:01:59.590
Originally, I wasn't even going to
do the next five slides,

00:01:59.590 --> 00:02:01.820
but I'm going to go through it
anyway just to make sure everyone

00:02:01.820 --> 00:02:05.600
has a good quickie background primer
on the two kinds of cryptography,

00:02:05.600 --> 00:02:07.590
secret key and public key.

00:02:07.600 --> 00:02:09.600
Secret key is the kind of stuff
that you're probably used to.

00:02:09.600 --> 00:02:11.520
Public key is the stuff
that SSL is based on,

00:02:11.520 --> 00:02:12.590
among other things.

00:02:12.600 --> 00:02:17.380
So the basic problem with a secret key
cryptography is you have to have this

00:02:17.750 --> 00:02:19.590
secret in order to have a secure channel.

00:02:19.600 --> 00:02:22.600
So you've got to get a secure
channel to get a secure channel,

00:02:22.600 --> 00:02:23.600
and that's a bit of a problem.

00:02:23.600 --> 00:02:25.580
So that's not a half of it.

00:02:25.730 --> 00:02:28.600
Then there's the key
distribution aspect of things.

00:02:28.600 --> 00:02:31.590
Once you've got this secret
exchange with your customers,

00:02:31.630 --> 00:02:34.560
if you're Acme Corporation and
you want to encrypt information

00:02:34.630 --> 00:02:37.270
with your customers,
you pretty much have to establish

00:02:37.270 --> 00:02:40.600
this secure channel through some
formal meeting with all of them,

00:02:40.600 --> 00:02:43.600
and that's a pretty inefficient
sort of thing to want to do.

00:02:43.600 --> 00:02:45.600
So there's this key distribution issue.

00:02:45.600 --> 00:02:47.790
Now,
you could give the same key to everybody,

00:02:47.820 --> 00:02:49.570
but then that would be very secure.

00:02:49.600 --> 00:02:52.600
So let's move on to public key crypto.

00:02:52.600 --> 00:02:53.600
There is no secure channel problem in
theory because there's two pieces to it.

00:02:53.600 --> 00:02:56.470
The key,
the private key that only Acme knows,

00:02:56.610 --> 00:03:00.560
and the public key that they share,
and that is a public artifact.

00:03:00.640 --> 00:03:02.600
It can be shared in the clear.

00:03:02.600 --> 00:03:06.500
And it also addresses the key
distribution problem because it

00:03:06.510 --> 00:03:08.570
can be addressed in the clear.

00:03:08.600 --> 00:03:12.430
Everybody can get the same public key
and talk to Acme in a secure fashion.

00:03:12.600 --> 00:03:15.580
I say almost because
there's two loopholes.

00:03:15.680 --> 00:03:19.580
The first one is covered by the issue,
well, the question is how do you

00:03:19.600 --> 00:03:20.600
know Acme is the real Acme?

00:03:20.600 --> 00:03:21.390
And we have certificate
authorities like VeriSign,

00:03:21.390 --> 00:03:21.600
Intra, and so on.

00:03:21.600 --> 00:03:24.540
We have certificate
authorities like VeriSign,

00:03:24.540 --> 00:03:28.950
Intrust.net, CyberTrust,
etc., etc., that you can use as

00:03:29.010 --> 00:03:31.720
a trusted third party to issue
these kinds of public keys in

00:03:31.720 --> 00:03:33.580
the form of digital certificates.

00:03:33.600 --> 00:03:37.380
Now, there's other questions here as
well I'm not going to be able

00:03:37.380 --> 00:03:38.570
to really get to in any detail.

00:03:38.710 --> 00:03:39.600
What is a secure hash?

00:03:39.600 --> 00:03:40.600
What is a digital signature?

00:03:40.600 --> 00:03:42.490
How do you know which CAs to trust?

00:03:42.600 --> 00:03:45.600
How do you know it is trust VeriSign,
for example?

00:03:45.600 --> 00:03:49.560
How can you tell that you
don't have like a forged ID?

00:03:49.600 --> 00:03:49.600
You just have this information
with a public key in it.

00:03:49.640 --> 00:03:50.590
How do you know it's a trust?

00:03:50.600 --> 00:03:54.410
How do you know it's actually from
a valid certificate authority?

00:03:54.600 --> 00:03:56.600
And how can you get the
ID to encrypt a message?

00:03:56.620 --> 00:03:59.070
If you want to send something to Acme,
it's an efficient way

00:03:59.070 --> 00:04:00.600
to get their public key.

00:04:00.600 --> 00:04:03.450
And I said there's two loopholes,
and what's the second

00:04:03.450 --> 00:04:04.570
public key crypto loophole?

00:04:04.600 --> 00:04:06.590
I'll cover that one later.

00:04:06.610 --> 00:04:07.600
Okay, SSL.

00:04:07.600 --> 00:04:09.600
We're getting closer to web objects now.

00:04:09.610 --> 00:04:12.600
This is an implementation of
public key crypto on the web.

00:04:12.800 --> 00:04:16.600
The basics in one slide,
if you can summarize SSL in one slide.

00:04:16.600 --> 00:04:18.570
Acme.com has a digital ID.

00:04:18.750 --> 00:04:19.600
Your browser checks that the
ID is issued by a service.

00:04:19.600 --> 00:04:21.600
You check that the ID is
issued by a CA that it trusts.

00:04:21.600 --> 00:04:25.600
Your browser encrypts some random
secret and sends it to the server.

00:04:25.600 --> 00:04:29.600
The server uses that secret as a
secret key for secret key cryptography.

00:04:29.600 --> 00:04:32.580
And you're doing secret
key cryptography there for.

00:04:32.680 --> 00:04:36.670
Now, in using this with web objects,
in some instances,

00:04:36.670 --> 00:04:38.600
if you're the developer and
not the system administrator,

00:04:38.600 --> 00:04:39.600
you're done, man.

00:04:39.600 --> 00:04:41.500
That's not your problem.

00:04:41.600 --> 00:04:44.520
If your app can only
be accessed over SSL,

00:04:44.670 --> 00:04:46.320
you just push that whole puppy
on the guy managing your Netscape

00:04:46.380 --> 00:04:48.600
server or IIS or Apache or whatever.

00:04:48.600 --> 00:04:52.940
But if you have an application where
part of it is going to be secure and

00:04:52.940 --> 00:04:58.010
part of it is going to be insecure via,
you know, SSL, then you have to know

00:04:58.020 --> 00:04:58.580
about some more things.

00:04:58.690 --> 00:05:01.490
You have to know how to
construct these URLs that are

00:05:01.490 --> 00:05:05.600
absolute instead of relative,
which gets us to the next slide here.

00:05:05.600 --> 00:05:08.510
Sort of the problem,
although it's not a problem per se,

00:05:08.510 --> 00:05:11.750
a problem in this particular context,
but is web objects

00:05:12.260 --> 00:05:13.600
generates partial URLs.

00:05:13.600 --> 00:05:15.600
It does not generate absolute.

00:05:15.600 --> 00:05:16.670
That way,
your application code doesn't have

00:05:16.670 --> 00:05:17.600
to know about some of these things.

00:05:17.600 --> 00:05:20.180
Your application code doesn't
have to know about some

00:05:20.460 --> 00:05:23.590
detail about the deployment,
that detail being your web server.

00:05:23.620 --> 00:05:26.090
In code,
it would be nice not to have to tell it

00:05:26.160 --> 00:05:28.560
what your web server is in any fashion.

00:05:28.600 --> 00:05:30.600
And with a partial URL, you can do that.

00:05:30.600 --> 00:05:33.010
It just assumes whatever web
server was used to access the

00:05:33.030 --> 00:05:34.600
application in the first place.

00:05:34.600 --> 00:05:37.130
But if you're going to force
SSL from a non-secure page,

00:05:37.200 --> 00:05:39.470
you're going to have to
create URLs that are full,

00:05:39.640 --> 00:05:43.600
that have the host name and
the secure protocol in there.

00:05:43.690 --> 00:05:46.540
So forcing this in web
objects is a big problem.

00:05:46.600 --> 00:05:48.600
And web objects,
there's three ways you can do it.

00:05:48.600 --> 00:05:52.600
There's some private Objective-C API you
could use to form the full URLs,

00:05:52.600 --> 00:05:56.600
and that's documented in this
tech info tech note that's online.

00:05:56.600 --> 00:05:58.600
That's the URL for it.

00:05:58.600 --> 00:06:01.600
Or you can create a custom WoW hyperlink
and WoW form implementation.

00:06:01.600 --> 00:06:04.540
This is sort of what
I've done in the past.

00:06:04.600 --> 00:06:07.570
Or there's this clever
little redirect technique,

00:06:07.590 --> 00:06:10.600
and this technique is also
documented in the info center.

00:06:10.600 --> 00:06:13.600
And this method lets you
basically use the normal elements.

00:06:13.600 --> 00:06:14.770
You have to create your
own custom hyperlink or

00:06:14.770 --> 00:06:15.600
WoW form in order to do that.

00:06:15.600 --> 00:06:18.550
And you can create your own hyperlink
or WoW form in order to make it work.

00:06:18.600 --> 00:06:22.500
But the one downside of that third bullet
is you can't control the granularity

00:06:22.540 --> 00:06:24.470
of this at the subpage granularity.

00:06:24.750 --> 00:06:27.600
The second technique is really nice
and good for most applications,

00:06:27.600 --> 00:06:30.600
but if some of your links need to be
secure and some need to be insecure,

00:06:30.600 --> 00:06:32.550
you may need to do the second bullet.

00:06:32.670 --> 00:06:34.530
So here's just an example.

00:06:34.610 --> 00:06:37.680
If you were going to implement
your own custom secure hyperlink,

00:06:37.680 --> 00:06:39.600
here's sort of the ingredients of it.

00:06:39.600 --> 00:06:44.540
Your secure hyperlink component would
contain declaration very much like this.

00:06:44.630 --> 00:06:47.560
For a WoW generic container,
it's got an element of A for anchor.

00:06:47.630 --> 00:06:51.500
It's got a couple of -- you've
probably heard the href binding,

00:06:51.710 --> 00:06:55.600
which is basically the explicit href
that's going to show in the page.

00:06:55.600 --> 00:06:59.390
You probably have not heard
of the action -- excuse me,

00:06:59.430 --> 00:07:01.590
the invoke action binding.

00:07:01.600 --> 00:07:04.520
This is a neat way of
basically saying for this href,

00:07:04.520 --> 00:07:06.590
invoke this server-side action.

00:07:06.600 --> 00:07:07.600
Normally you do that all in one.

00:07:07.600 --> 00:07:09.580
There's one binding in a WoW hyperlink.

00:07:09.660 --> 00:07:13.600
It's action equals some
method in your page.

00:07:13.600 --> 00:07:15.420
And after you've basically
got two bindings for that,

00:07:15.460 --> 00:07:17.580
one that constructs the URL,
you want to represent that action.

00:07:17.600 --> 00:07:19.600
And so this is how that works.

00:07:19.600 --> 00:07:22.000
And if you want a starting point,
take a look at WX hyperlink in

00:07:22.000 --> 00:07:23.510
the component elements framework.

00:07:23.610 --> 00:07:25.600
That's in WebObjects examples frameworks.

00:07:25.600 --> 00:07:27.600
You'll find it in the info center.

00:07:27.760 --> 00:07:29.710
And in your implementation
of this component,

00:07:29.710 --> 00:07:32.360
you'd have a custom version of
that method I'm calling href.

00:07:32.600 --> 00:07:36.960
And my simplistic method hardcodes the
protocol and the host name and then

00:07:37.040 --> 00:07:40.560
appends that to the component action
URL that you get from the context.

00:07:40.610 --> 00:07:41.600
And that's it.

00:07:41.600 --> 00:07:42.560
So it's actually fairly trivial to do.

00:07:42.770 --> 00:07:46.490
Except now you have to use
secure hyperlink everywhere

00:07:46.490 --> 00:07:48.600
instead of WoW hyperlink.

00:07:48.600 --> 00:07:49.600
Okay.

00:07:49.610 --> 00:07:52.600
So this is security.

00:07:52.600 --> 00:07:54.530
So it's going to be boring.

00:07:54.670 --> 00:07:55.520
My demos don't have any flash.

00:07:55.690 --> 00:07:57.600
There's nothing swirling around.

00:07:57.600 --> 00:07:59.590
It's just -- well, you'll see.

00:07:59.750 --> 00:08:01.480
Okay.

00:08:01.760 --> 00:08:02.600
This is my little test app.

00:08:02.600 --> 00:08:06.600
This is the application that I've
included in the WoW security kit.

00:08:06.600 --> 00:08:10.050
Which, by the way,
will be available at a download at

00:08:10.050 --> 00:08:11.600
the WWDC download site or whatever.

00:08:11.600 --> 00:08:13.500
I'll give you the URL for it later.

00:08:13.620 --> 00:08:17.600
So it's got a bunch of different things
I'm going to be testing here later.

00:08:17.600 --> 00:08:20.600
But right now we've got this
go insecure and go secure.

00:08:20.600 --> 00:08:21.550
Right now I'm in secure mode.

00:08:21.620 --> 00:08:23.600
So I'll go insecure.

00:08:23.600 --> 00:08:25.600
And I'll go secure.

00:08:25.600 --> 00:08:26.600
Insecure.

00:08:26.600 --> 00:08:27.540
Secure.

00:08:27.600 --> 00:08:31.640
You see, you know,
Steve has that action with the window,

00:08:31.710 --> 00:08:32.590
you know.

00:08:32.600 --> 00:08:33.580
I got this.

00:08:33.600 --> 00:08:34.600
Yeah.

00:08:39.720 --> 00:08:41.100
Okay, that was that.

00:08:41.130 --> 00:08:43.100
That was demo number one.

00:08:43.150 --> 00:08:46.700
Okay, now sometimes you might want
to encrypt programmatically.

00:08:46.700 --> 00:08:50.700
And why you'd want to do that,
a few occasions, actually maybe a lot.

00:08:50.700 --> 00:08:53.780
The number of examples I gave
there are if you've got some

00:08:53.780 --> 00:08:56.450
passwords in the database,
some personal information,

00:08:56.460 --> 00:08:57.700
credit card numbers.

00:08:57.780 --> 00:09:00.700
Some people I know at a
company lost some of those.

00:09:00.790 --> 00:09:02.490
And the other question is how.

00:09:02.490 --> 00:09:06.740
This is kind of a sticky issue because
there's all these export restrictions

00:09:06.740 --> 00:09:11.640
and national security agencies such a big
tightwad about this and the export thing.

00:09:11.710 --> 00:09:14.700
So you just can't ship something
that has strong cryptography usually.

00:09:14.700 --> 00:09:17.100
You have to ship something
without it and you have to

00:09:17.100 --> 00:09:18.700
link the other stuff in later.

00:09:18.700 --> 00:09:20.700
And then you have to pay a fortune to,
well, never.

00:09:20.700 --> 00:09:22.540
Anyway, you've got BSAFE here and JSAFE.

00:09:22.660 --> 00:09:24.700
These are commercial crypto libraries.

00:09:24.700 --> 00:09:27.700
One is C-based, one is Java-based,
and they're both from RSA data systems.

00:09:27.700 --> 00:09:30.690
I suppose these are the big ones,
the ones that most people use.

00:09:30.750 --> 00:09:34.130
I don't know how many people out
there use in the commercial space,

00:09:34.130 --> 00:09:36.700
but there are some free ones,
or sort of free.

00:09:36.700 --> 00:09:39.700
Intel CDSA, I believe,
includes some crypto stuff.

00:09:39.700 --> 00:09:42.700
Microsoft's CryptoLib is free,
but it just runs on Win32.

00:09:42.700 --> 00:09:46.640
I think SS, I don't even know how
to pronounce this thing.

00:09:46.740 --> 00:09:47.680
I think it's SS Lee.

00:09:47.710 --> 00:09:49.480
Some people say SS Leay, whatever.

00:09:49.710 --> 00:09:51.250
Hey, it's for free.

00:09:51.250 --> 00:09:54.690
You can get it and do
some cryptography with it.

00:09:54.700 --> 00:10:00.170
Now, on the encryption techniques,
the one thing that is really simplistic

00:10:00.180 --> 00:10:02.700
is to explicitly encrypt stuff.

00:10:02.700 --> 00:10:05.230
But if you have some EOs and
you have like a password thing

00:10:05.350 --> 00:10:07.610
in the enterprise object,
you might add a couple

00:10:07.670 --> 00:10:10.610
accessor methods to it,
like encrypted passwords,

00:10:10.640 --> 00:10:13.820
set encrypted password,
and do the encryption

00:10:13.820 --> 00:10:15.700
and decryption in there.

00:10:15.700 --> 00:10:18.700
And you might actually add a little
state to your object to have a cache

00:10:18.700 --> 00:10:21.700
so you don't have to keep doing that
every time the thing is accessed.

00:10:21.700 --> 00:10:23.700
That's just one thing
that I've seen done.

00:10:25.540 --> 00:10:27.500
Now questions I'm not going
to be able to answer here.

00:10:27.500 --> 00:10:29.000
Maybe we can talk about it at the end.

00:10:29.000 --> 00:10:31.240
Or what key size should you
use for this sort of thing?

00:10:31.420 --> 00:10:34.470
And does my data get less secure
as computing power increases?

00:10:34.490 --> 00:10:36.500
I've kind of got my
own opinion about that.

00:10:36.500 --> 00:10:39.410
Okay,
this is basically the meat of the thing,

00:10:39.410 --> 00:10:41.500
authentication techniques.

00:10:41.500 --> 00:10:44.050
Authentication is basically
broken into these,

00:10:44.050 --> 00:10:46.500
I call them like four
types of compartments.

00:10:46.500 --> 00:10:47.500
You've got the logical and the physical.

00:10:47.500 --> 00:10:50.370
And on the logical part,
you have to answer the questions,

00:10:50.370 --> 00:10:51.730
are you who you claim to be?

00:10:51.730 --> 00:10:53.500
And if so, do you have access?

00:10:53.500 --> 00:10:56.510
And then there's the physical piece,
the presentation specific and

00:10:56.590 --> 00:10:57.490
the business policy specific.

00:10:57.510 --> 00:10:59.780
It turns out it's difficult
to make a login panel.

00:10:59.780 --> 00:11:01.680
You think, well,
a login panel is a couple

00:11:01.680 --> 00:11:02.850
text fields and a button.

00:11:02.900 --> 00:11:04.500
It could be easier than that.

00:11:04.500 --> 00:11:08.020
But there's the questions
about when to log in.

00:11:08.120 --> 00:11:10.500
Where do you go when you log in?

00:11:10.500 --> 00:11:13.230
There's different ways of logging in,
all these different sort

00:11:13.230 --> 00:11:14.500
of presentation styles.

00:11:14.500 --> 00:11:17.500
So I've tried to cover some of these.

00:11:17.500 --> 00:11:19.390
I've tried to cover some of
these things in the security

00:11:19.390 --> 00:11:20.500
kit without tying you down.

00:11:20.550 --> 00:11:22.490
But anyway, when to log in.

00:11:22.500 --> 00:11:24.500
This is one of the
questions that gets asked.

00:11:24.500 --> 00:11:26.500
Maybe you want a WebObject session.

00:11:26.500 --> 00:11:29.490
You don't even allow the session
unless they're logged in,

00:11:29.550 --> 00:11:32.040
which can be kind of tricky since
WebObjects creates a session

00:11:32.040 --> 00:11:33.500
by default when you access it.

00:11:33.500 --> 00:11:37.500
So you could allow surfing,
like creating a session.

00:11:37.500 --> 00:11:39.800
You're going to mind your own business
through the web app and then try

00:11:39.800 --> 00:11:43.490
to do something sensitive and then
doing an on-demand type of login.

00:11:43.500 --> 00:11:47.370
Or maybe you do the on-demand login
and then the user re-navigates.

00:11:47.550 --> 00:11:49.310
You do an on-demand login and
you go straight to the page

00:11:49.380 --> 00:11:51.560
where they wanted to access,
which is actually usually

00:11:51.560 --> 00:11:52.500
the most desirable.

00:11:52.630 --> 00:11:54.480
And then there's the session timeout.

00:11:54.510 --> 00:11:57.480
Session time's out and then you
want to maybe instead of showing,

00:11:57.510 --> 00:11:59.500
"Hey, your session timed out.

00:11:59.560 --> 00:12:03.450
Great." How about just the login
page so you can get right back

00:12:03.560 --> 00:12:05.470
into where you were leaving off.

00:12:05.500 --> 00:12:08.330
Okay, and then there's this notion
I call access posture.

00:12:08.800 --> 00:12:13.430
Basically, I've tried to encode a way
or you probably have to

00:12:13.430 --> 00:12:15.500
do this by hand yourself.

00:12:15.500 --> 00:12:16.500
Where you want to default to deny access.

00:12:16.500 --> 00:12:17.500
Okay.

00:12:17.500 --> 00:12:19.500
Default to deny everything or
default to allow everything.

00:12:19.500 --> 00:12:22.500
Default to allow or deny direct actions.

00:12:22.500 --> 00:12:24.480
Default to deny or allow privacy.

00:12:24.630 --> 00:12:27.460
Maybe a page can only be viewed
under SSL or maybe you don't

00:12:27.460 --> 00:12:30.610
want to allow viewing any
pages unless they're over SSL,

00:12:30.610 --> 00:12:33.500
but with certain exceptions
for each of those three cases.

00:12:34.180 --> 00:12:34.810
Okay.

00:12:35.020 --> 00:12:39.100
And then these are like the
three kinds of -- actually,

00:12:39.100 --> 00:12:41.040
there's four kinds of ways
of gathering credentials.

00:12:41.040 --> 00:12:44.260
I've listed four there: HTML page,
HTTP login panel.

00:12:44.260 --> 00:12:47.160
By that, I mean that little challenge
thing that comes up,

00:12:47.160 --> 00:12:47.940
and you type.

00:12:47.940 --> 00:12:52.410
It's actual physical panel instead of
a page that your browser raises up.

00:12:52.450 --> 00:12:54.800
A digital certificate or a cookie.

00:12:55.160 --> 00:12:56.820
And there's many different
ways to verify credentials.

00:12:56.820 --> 00:12:59.590
And the top stuff is very
presentation-specific.

00:12:59.600 --> 00:13:01.670
In fact,
it's entirely presentation-specific.

00:13:01.670 --> 00:13:06.140
The ones in the middle are
very your company specific.

00:13:06.140 --> 00:13:11.020
And the WoE off policy framework provides
all -- it's not -- it doesn't provide

00:13:11.020 --> 00:13:14.020
the cookie authentication technique,
but it provides the other three.

00:13:14.020 --> 00:13:20.040
And it provides some delegation hooks for
your custom verification business logic.

00:13:20.040 --> 00:13:23.120
Now going to the sessionless login,
this gets to the one area where it's

00:13:23.120 --> 00:13:25.030
sort of like availability related.

00:13:25.030 --> 00:13:28.140
A session can be a kind
of a heavyweight thing.

00:13:28.140 --> 00:13:31.050
So you might not want to
create one if you can help it.

00:13:31.150 --> 00:13:34.680
Maybe you only want to allow
them if the person is allowed to

00:13:34.700 --> 00:13:36.700
-- has successfully logged in.

00:13:36.700 --> 00:13:39.470
You also might want to be able
to -- with the sessionless login,

00:13:39.550 --> 00:13:41.370
you can bookmark the login page.

00:13:41.370 --> 00:13:44.090
It also lets you have -- be
able to attempt to log in and

00:13:44.090 --> 00:13:45.240
not get a session expired.

00:13:45.240 --> 00:13:47.990
I've had some customers who were
kind of complaining to me once.

00:13:48.060 --> 00:13:49.900
Okay, I created this login page.

00:13:49.970 --> 00:13:51.160
My customer was there.

00:13:51.520 --> 00:13:52.090
They left it up there.

00:13:52.200 --> 00:13:53.880
They went and got some coffee, came back,
logged in,

00:13:53.880 --> 00:13:55.250
the thing said session expired.

00:13:55.250 --> 00:13:56.220
I didn't do a damn thing.

00:13:56.250 --> 00:13:57.460
Why did the session expire?

00:13:57.480 --> 00:14:00.780
So it'd be kind of nice to have a
sessionless login that -- where you

00:14:00.780 --> 00:14:03.540
could not run into that irritation.

00:14:03.540 --> 00:14:05.530
And in order to use this,
if you're using an HTML page,

00:14:05.530 --> 00:14:07.720
you should use a wolf form
and some direct action.

00:14:07.720 --> 00:14:12.540
So these are sort of the basic
logical things you need to do.

00:14:12.570 --> 00:14:13.940
This first sentence is hard to say.

00:14:13.940 --> 00:14:17.100
I think default and action show up
about three or four times in it.

00:14:17.100 --> 00:14:20.160
Use a direct action action handler
as a default action handler.

00:14:20.160 --> 00:14:24.230
That's -- I've got the code
for that in the next slide,

00:14:24.230 --> 00:14:26.180
but I think that's
actually clearer than that.

00:14:26.340 --> 00:14:28.140
Anyway, forceweb.js,
go to your login page.

00:14:28.140 --> 00:14:28.140
And you can see that it's a
little bit more complicated

00:14:28.140 --> 00:14:29.330
than the page instead of main.

00:14:29.330 --> 00:14:33.620
By default we go to main and main may
have things which directly or indirectly

00:14:33.620 --> 00:14:36.960
kick off a session that you don't want.

00:14:36.960 --> 00:14:39.470
And then when you create your login page,
you have to be very careful you

00:14:39.560 --> 00:14:40.760
don't call session anywhere.

00:14:40.770 --> 00:14:41.530
So you do that.

00:14:41.600 --> 00:14:42.980
You create your login
page and it doesn't.

00:14:42.980 --> 00:14:45.600
And yet sessions are getting
created and you're wondering why.

00:14:45.600 --> 00:14:49.680
And it turns out you've got a component
on your page and that component

00:14:49.680 --> 00:14:52.140
happened to refer to a session
which meant the session got created.

00:14:52.140 --> 00:14:55.070
And then you got rid of all those and go,
okay, everything's hunky dory.

00:14:55.190 --> 00:14:57.440
And you go,
session's still getting created.

00:14:57.440 --> 00:15:02.800
And that could in fact happen because
maybe there's a component action.

00:15:02.800 --> 00:15:05.680
If there's a woe hyperlink and
you bound that action to it

00:15:05.680 --> 00:15:09.460
and that shows up on the page,
well, component actions imply a session.

00:15:09.460 --> 00:15:11.860
So one will be created for
you to put that session ID in

00:15:11.860 --> 00:15:13.580
and when the page returns.

00:15:13.600 --> 00:15:17.700
So you have to be really, really careful.

00:15:17.750 --> 00:15:18.660
It might not be WebObjects.

00:15:18.700 --> 00:15:20.030
It might be your code actually.

00:15:20.060 --> 00:15:22.480
So be really careful about that.

00:15:22.480 --> 00:15:24.810
Now this is the sort of the code that you
can use to sort of implement all this.

00:15:24.840 --> 00:15:25.020
And this is the code that you can
use to sort of implement all this.

00:15:25.020 --> 00:15:25.020
And this is the code that you can
use to sort of implement all this.

00:15:25.020 --> 00:15:25.020
And this is the code that you can
use to sort of implement all this.

00:15:25.020 --> 00:15:25.020
And this is the code that you can
use to sort of implement all this.

00:15:25.020 --> 00:15:27.360
And this is the code that you can
use to sort of implement all this.

00:15:27.600 --> 00:15:28.550
And there's other code involved.

00:15:28.560 --> 00:15:31.680
But this is sort of what I call
the secret handshake type of code.

00:15:31.700 --> 00:15:36.420
So in your direct action subclass,
you'd want to override default action

00:15:36.490 --> 00:15:38.560
and return login page instead of main.

00:15:38.560 --> 00:15:40.570
That will take you to the
login page instead of the,

00:15:40.570 --> 00:15:43.240
whatever the main page is.

00:15:43.240 --> 00:15:47.660
The second point there forces the system,
instead of like defaulting to

00:15:47.660 --> 00:15:51.550
the component action handler when
you initially access your app,

00:15:51.570 --> 00:15:53.440
it will use the direct action action
handler which does not create a session.

00:15:53.440 --> 00:15:53.440
And that's what we're going to do.

00:15:53.440 --> 00:15:54.940
And then we're going to do a separate
action handler which does not create a

00:15:54.940 --> 00:15:57.380
session unless you explicitly tell it to.

00:15:57.380 --> 00:16:01.720
So the combination of those two things
will let you have a sessionless login.

00:16:01.720 --> 00:16:04.780
So let's do a demo of that.

00:16:06.170 --> 00:16:10.490
Alright, this is HTML,
so let's go to the policy editor here.

00:16:10.600 --> 00:16:13.770
Okay, it's already HTML.

00:16:13.770 --> 00:16:13.770
Good.

00:16:16.800 --> 00:16:18.000
Alright, so I'll go to this.

00:16:18.000 --> 00:16:20.040
I've got various links here
that do various things.

00:16:20.040 --> 00:16:23.300
This is the private one,
so this one needs to be over SSL.

00:16:23.300 --> 00:16:30.490
This is going to require a login,
so I'll just do a login here and fail.

00:16:31.500 --> 00:16:33.490
I'm going to successfully log in.

00:16:33.510 --> 00:16:34.490
And there I am.

00:16:34.590 --> 00:16:38.500
So, I just got a flag that says when I'm
logged in and I'm also over secure mode.

00:16:38.500 --> 00:16:40.500
So, anyway, that was that exciting demo.

00:16:40.500 --> 00:16:44.490
So, let's move on.

00:16:46.420 --> 00:16:48.830
Ok, HTTP challenge panel,
now this sounds like it should

00:16:48.890 --> 00:16:52.020
be really easy to do and
unfortunately it's tricky as hell.

00:16:52.020 --> 00:16:55.160
There's a tech note in the info
center that shows you how to do it.

00:16:55.160 --> 00:16:58.500
And in order to make it work,
your well-response object must

00:16:58.610 --> 00:17:01.760
emit certain statuses and it has
to also set a certain header and

00:17:01.760 --> 00:17:04.480
then you have to look for a certain
kind of header when it comes in,

00:17:04.480 --> 00:17:07.060
oh and then you get all that working
and it doesn't work because the

00:17:07.060 --> 00:17:09.880
web server you're using has an
interface that doesn't actually

00:17:09.880 --> 00:17:11.380
pass the authorization header.

00:17:11.380 --> 00:17:13.170
And then once you've got all that and
you think you're out of the woods,

00:17:13.170 --> 00:17:16.690
you get this blob of base 64 encoded
muck that you have to like walk through.

00:17:16.820 --> 00:17:19.800
So it can be a little tricky.

00:17:19.800 --> 00:17:22.250
The first to get you started,
those are the,

00:17:22.360 --> 00:17:24.880
that's the status you need to set
and the header you need to set

00:17:24.880 --> 00:17:28.640
on the outgoing response to at
least force the panel to come up.

00:17:28.640 --> 00:17:31.910
Then you need to look for a header
named authorization on the incoming will

00:17:31.910 --> 00:17:35.940
request and look at the content of that.

00:17:35.940 --> 00:17:39.440
And CGI with Netscape at least
does not pass that header.

00:17:39.440 --> 00:17:43.560
Other web servers with CGI may,
I'm not sure.

00:17:43.620 --> 00:17:48.600
NSAPI definitely does and this
demo is all happening on NSAPI.

00:17:50.190 --> 00:17:51.100
They should be, yes.

00:17:51.100 --> 00:17:51.760
Yeah.

00:17:51.850 --> 00:17:54.170
In fact,
I actually made them kind of wordy so,

00:17:54.170 --> 00:17:56.330
you know,
you'd be able to maybe treat them

00:17:56.330 --> 00:17:58.040
as sort of like a mini outline.

00:17:58.140 --> 00:18:01.710
This is something that could be
useful if you're decoding Base64 data.

00:18:01.830 --> 00:18:06.100
This is just part of the standard JDK,
the Base64 decoder object.

00:18:06.100 --> 00:18:11.680
And once you have a normal character
string that you get from that,

00:18:11.810 --> 00:18:14.480
you can parse the string and get
the username and password out of it.

00:18:14.480 --> 00:18:14.480
Okay, so I'll show that.

00:18:20.160 --> 00:18:26.490
Go to HTTP Panel, Submit,
and I'll start a new session,

00:18:26.490 --> 00:18:28.730
one I'm not logged in with.

00:18:28.790 --> 00:18:33.150
And I'll go to the login required,
pops up this little panel.

00:18:35.920 --> 00:18:37.900
Now,
one of the things that's kind of neat

00:18:37.900 --> 00:18:41.310
there is that this login technique,
it's using the exact same business

00:18:41.330 --> 00:18:43.590
logic to actually do the login,
but, you know,

00:18:43.590 --> 00:18:46.340
it was able to kind of on the
fly change the whole way in which

00:18:46.370 --> 00:18:50.280
credentials were gathered there using
that little policy framework thing.

00:18:50.300 --> 00:18:52.800
So, anyway, more on that later.

00:18:52.800 --> 00:18:54.790
Do you need to move on?

00:18:54.810 --> 00:18:58.770
I don't have one of those
little things to throw at that.

00:18:58.800 --> 00:19:02.800
Okay,
logging in without a login panel cookies.

00:19:02.800 --> 00:19:05.950
I've kind of done this
once and regretted it.

00:19:06.000 --> 00:19:08.450
Because you do this,
you stick the username and password

00:19:08.790 --> 00:19:12.110
in the browser and then this guy who
has administration capability decides,

00:19:12.110 --> 00:19:14.420
"Oh, I'll access this from someone
else's computer," and you just left

00:19:14.420 --> 00:19:15.800
your password in their computer.

00:19:15.800 --> 00:19:17.800
So, probably not a good idea.

00:19:17.800 --> 00:19:21.030
Plus, I guess it was recently it came out
that if you're an enterprising website,

00:19:21.030 --> 00:19:23.800
you can pretty much get everyone's
cookies if they're using IE.

00:19:23.800 --> 00:19:25.800
So, maybe that's a feature.

00:19:25.800 --> 00:19:28.770
. . .

00:19:30.190 --> 00:19:33.070
Now, if you're going to log
in without a login panel,

00:19:33.070 --> 00:19:35.330
you could use digital certificates.

00:19:35.440 --> 00:19:37.090
This is really the
ultimate in user security,

00:19:37.090 --> 00:19:39.420
although it does have a bit
of baggage that comes with it.

00:19:39.500 --> 00:19:42.250
It reverses the role of
username and password.

00:19:42.510 --> 00:19:46.280
By that I mean,
basically the SSL protocol proves

00:19:46.580 --> 00:19:50.600
that you are who you say you are,
and then you decide

00:19:50.740 --> 00:19:53.580
whether you have access,
as opposed to the other way around.

00:19:53.580 --> 00:19:53.580
And obviously it requires
SSL to make that work.

00:19:53.810 --> 00:19:56.300
Now if you're in a
WebObjects application,

00:19:56.300 --> 00:19:59.060
if you get a digital certificate,
it's going to come in on a

00:19:59.060 --> 00:20:01.500
header called client cert.

00:20:01.500 --> 00:20:03.580
And once you've got that client cert,
it's encoded in this

00:20:03.580 --> 00:20:05.690
asyn1.blob in Base64 format.

00:20:05.690 --> 00:20:09.190
Now you could go and walk that
and parse it yourself or you could

00:20:09.190 --> 00:20:14.110
use sun.security.x509 and just
use that collection of classes and

00:20:14.160 --> 00:20:17.960
just create yourself an x509 cert
right out of that blob for you.

00:20:17.960 --> 00:20:19.360
It saves you a bit of time.

00:20:19.370 --> 00:20:22.310
And then you might want to validate its
status in your code to actually see if

00:20:22.430 --> 00:20:24.820
the certificate hasn't been revoked.

00:20:24.820 --> 00:20:29.470
And the security kit includes a wrapper
for a framework from ValCert that

00:20:29.510 --> 00:20:33.720
wraps such a type of status checker.

00:20:33.720 --> 00:20:37.250
Now there's one little sort of hang up in
all this when you use it with WebObjects.

00:20:37.250 --> 00:20:40.320
Well, there's two ways you can grant
access to digital certificates.

00:20:40.320 --> 00:20:42.930
You can just leave it all at the web
server and configure the web server

00:20:42.930 --> 00:20:46.240
to trust certain CAs and certain
digital certificates issued by

00:20:46.240 --> 00:20:47.820
those CAs and just be done with it.

00:20:47.890 --> 00:20:49.700
You know, they pass that test,
they're in.

00:20:49.700 --> 00:20:50.840
If not, they don't get in.

00:20:50.960 --> 00:20:54.460
But odds are you might just
want to configure it with

00:20:54.500 --> 00:20:55.750
the CAs you wish to trust.

00:20:55.790 --> 00:20:58.510
Let the certificate come into
your application and then look at

00:20:58.510 --> 00:21:01.740
the contents of the certificate,
who the person is, where they're from,

00:21:01.740 --> 00:21:03.740
et cetera, et cetera,
and then decide whether

00:21:03.740 --> 00:21:04.640
or not they get access.

00:21:04.640 --> 00:21:06.870
And that sounds great
except like the slide says,

00:21:06.870 --> 00:21:09.720
the WebObjects adapter don't
actually pass the cert along intact

00:21:09.720 --> 00:21:11.240
or they don't even pass it at all.

00:21:11.240 --> 00:21:15.890
So the WoW security kit includes
some source code for CGI and

00:21:15.890 --> 00:21:18.240
NSAPI adapter in binary form.

00:21:19.080 --> 00:21:22.280
The binaries and the source
that pass the certificate

00:21:22.350 --> 00:21:24.350
correctly and don't even leak.

00:21:26.400 --> 00:21:29.080
So,
this brings me to that second loophole.

00:21:29.080 --> 00:21:33.920
Just because you have an unexpired
digital ID issued by a trusted CA,

00:21:34.060 --> 00:21:36.630
does not mean that it's good.

00:21:36.640 --> 00:21:38.410
It could be revoked.

00:21:38.530 --> 00:21:41.700
It'd be-- If you-- If your application
just trusted a certificate like that,

00:21:41.700 --> 00:21:44.900
it'd be very analogous to you going to,
like, Target or whatever,

00:21:44.900 --> 00:21:48.340
whipping out your credit card, saying,
"Hey look, credit card, it's a visa.

00:21:48.340 --> 00:21:51.290
Okay, give me $1,000 worth of
stuff," and they just did it.

00:21:51.300 --> 00:21:52.040
Like what?

00:21:52.040 --> 00:21:54.200
You know, it's a visa card,
it's got a hologram, it's good.

00:21:54.220 --> 00:21:54.620
Right?

00:21:54.620 --> 00:21:56.960
Now, they're going to take it,
they're going to swipe it through

00:21:56.960 --> 00:21:59.440
some little device and check
whether or not it's actually

00:21:59.440 --> 00:22:01.180
been stolen and it's hot as hell.

00:22:01.180 --> 00:22:05.840
So, you probably ought to check the
ID and there's two ways of doing that.

00:22:05.840 --> 00:22:09.840
You can download a certificate
revocation list from the certificate

00:22:10.480 --> 00:22:15.890
authority or you can contact a VA to
check the status of the certificate.

00:22:16.410 --> 00:22:20.920
Okay, now I'm going to kind of get off
into a little bit of la-la land here.

00:22:21.010 --> 00:22:22.370
I'm going to try and go
through these kind of fast.

00:22:22.460 --> 00:22:24.480
In fact, I should probably skip them,
but I think it's important that

00:22:24.540 --> 00:22:26.600
some of this information is known.

00:22:26.600 --> 00:22:29.400
It wasn't really known
to me six months ago,

00:22:29.400 --> 00:22:31.310
so let me just kind of run through it.

00:22:31.400 --> 00:22:34.340
The way this works with the user is that,
you know, that user has,

00:22:34.380 --> 00:22:36.810
if they have a certificate,
they've got a private key,

00:22:36.810 --> 00:22:39.390
and they unlock that private
key with a passphrase.

00:22:39.400 --> 00:22:42.400
And at first,
this struck me as kind of bogus.

00:22:42.400 --> 00:22:44.430
I mean,
we go to all this trouble to have this

00:22:44.470 --> 00:22:48.400
certificate with this unbelievably
encoded long 10,000-bit key,

00:22:48.400 --> 00:22:49.400
and then I unlock it with FUBAR.

00:22:49.400 --> 00:22:52.400
You know, just something not right there.

00:22:52.400 --> 00:22:56.330
So, but unlike username
and password scenario,

00:22:56.420 --> 00:22:58.400
this passphrase is something you created.

00:22:58.400 --> 00:22:59.400
It's not shared with anyone.

00:22:59.400 --> 00:23:01.570
It's just, and it never leaves
your computer in theory.

00:23:01.570 --> 00:23:03.450
It's something just between
you and the computer,

00:23:03.520 --> 00:23:04.400
and only you know it.

00:23:04.400 --> 00:23:08.380
So it's not quite as bad,
but it's still a little weak.

00:23:08.400 --> 00:23:11.400
And there's this other sort of downside,
too.

00:23:11.400 --> 00:23:14.270
You've got this private key in a file.

00:23:14.440 --> 00:23:17.390
So you pretty, a username and password,
if you can remember it,

00:23:17.430 --> 00:23:18.400
you can pretty much take
it with you anywhere.

00:23:18.400 --> 00:23:21.680
But now you have to sort of
carry this document with you,

00:23:21.830 --> 00:23:25.400
and you have to put it on a floppy
if you want it to be portable.

00:23:25.400 --> 00:23:26.390
So typically,
these things aren't portable.

00:23:26.410 --> 00:23:28.320
They just sit on one machine.

00:23:28.410 --> 00:23:32.110
And having things in files is
a pretty extraordinarily lame

00:23:32.210 --> 00:23:34.400
way of establishing security.

00:23:34.400 --> 00:23:37.400
So there's been some things that
have been called smart cards.

00:23:37.400 --> 00:23:39.800
That try to address this,
where you put all this

00:23:39.800 --> 00:23:41.400
information on a smart card.

00:23:41.400 --> 00:23:44.400
The smart card has a CPU that
does all the crypto on it.

00:23:44.400 --> 00:23:47.400
The private key never leaves the card.

00:23:47.400 --> 00:23:51.390
So the hacker would have to steal
your card in order to impersonate you.

00:23:51.400 --> 00:23:55.110
And there can be some smart cards
that can be attached to devices to

00:23:55.110 --> 00:23:57.400
accept your passphrase directly.

00:23:57.500 --> 00:24:01.330
And for the truly paranoid,
that device can be a biometric.

00:24:01.400 --> 00:24:04.090
So, you know,
you could basically log into a website by

00:24:04.090 --> 00:24:06.400
sticking your smart card into a computer.

00:24:06.400 --> 00:24:08.260
And then you can put your
smart card into a reader,

00:24:08.260 --> 00:24:10.400
putting your thumb on it,
and then you're logged in.

00:24:10.400 --> 00:24:12.400
So that's pretty good security.

00:24:12.400 --> 00:24:14.400
Unless someone cut your thumb off.

00:24:14.400 --> 00:24:16.400
So.

00:24:16.400 --> 00:24:20.260
Okay, another demo.

00:24:24.790 --> 00:24:29.770
Okay, I'm going to close IE here and
come back into it because I want

00:24:29.790 --> 00:24:32.940
to show you the thing prompting
for a digital certificate.

00:24:32.940 --> 00:24:34.680
I'm just going to do a
digital certificate login,

00:24:34.740 --> 00:24:41.010
so I'll go to the Policy Editor here
and pick certificate.

00:24:43.400 --> 00:24:47.540
And I'll go to something
that requires a login.

00:24:47.640 --> 00:24:49.680
And in this case,
my computer is not hooked

00:24:49.810 --> 00:24:51.630
up to the internet,
so I couldn't actually go out to

00:24:51.680 --> 00:24:52.960
check the status of the certificate.

00:24:53.240 --> 00:24:58.380
Actually, that was a-- that was
actually-- that page is private.

00:24:58.400 --> 00:25:05.050
Let me change the policy on that
page so it isn't private anymore.

00:25:05.060 --> 00:25:11.300
Let's see, page two, remove.

00:25:11.300 --> 00:25:15.290
I think I would have had this
set up before I came in here,

00:25:15.290 --> 00:25:15.290
wouldn't you?

00:25:22.030 --> 00:25:23.260
So a panel pops up.

00:25:23.260 --> 00:25:24.380
It asks for your certificate.

00:25:24.380 --> 00:25:25.220
You pick the one you want.

00:25:25.220 --> 00:25:26.140
I happen to have three.

00:25:26.140 --> 00:25:29.460
I'm just going to pick
this one and go to it.

00:25:29.460 --> 00:25:30.520
So I'm in secure mode now.

00:25:30.520 --> 00:25:33.180
Now I'll go to the Login Required page.

00:25:33.180 --> 00:25:35.680
It says okay,
your certificate was not granted access.

00:25:35.680 --> 00:25:38.100
And the user info that you
can't read unfortunately says,

00:25:38.100 --> 00:25:40.320
could not get status response,
validation results,

00:25:40.380 --> 00:25:41.860
response status equals no.

00:25:41.860 --> 00:25:43.740
So you might have your
own policy for this.

00:25:43.740 --> 00:25:45.750
You might just grant them all
or you might do something else.

00:25:45.830 --> 00:25:47.640
The point is I have a
delegate hook that you call.

00:25:47.640 --> 00:25:51.610
It passes in the certificate and you
can do anything you want in that hook

00:25:51.610 --> 00:25:53.860
to determine what you're going to do.

00:25:53.860 --> 00:25:57.610
So okay, going back to this.

00:26:00.100 --> 00:27:02.900
[Transcript missing]

00:27:03.300 --> 00:27:04.900
that append response
check will handle that,

00:27:04.900 --> 00:27:08.510
but if it's a direct action,
I mean someone can just

00:27:08.560 --> 00:27:10.060
type that in there,
they don't need a page for that,

00:27:10.060 --> 00:27:13.190
they can just type that right in
their browser and go straight there,

00:27:13.310 --> 00:27:15.900
so this is the choke
point for handling that.

00:27:16.040 --> 00:27:17.920
For generating pages,
it's append response,

00:27:17.950 --> 00:27:21.380
for handling direct actions,
it's this method, perform action name.

00:27:21.440 --> 00:27:23.730
It passes in the name of the
action you're about to fire,

00:27:23.730 --> 00:27:28.310
then, you know, the full path to it,
like foobar slash action name,

00:27:28.330 --> 00:27:31.490
and if you put some guardian
code in these two places,

00:27:31.490 --> 00:27:33.870
you can pretty much
protect things pretty well.

00:27:33.890 --> 00:27:36.400
So this is sort of an example of
what code like that might look like.

00:27:36.400 --> 00:27:39.990
I've got append response,
I've got some hypothetical method

00:27:39.990 --> 00:27:43.520
called should deny page generation,
and if you shouldn't,

00:27:43.520 --> 00:27:46.290
and then you just call
super and process as normal,

00:27:46.290 --> 00:27:48.990
but if you should not,
if it's illegal for you to go

00:27:49.000 --> 00:27:52.510
there because you're not allowed,
maybe because you're not logged in,

00:27:52.510 --> 00:27:55.300
I create a login page and
set the content on it,

00:27:55.300 --> 00:27:59.420
and I get the content by generating
a response on the login page there.

00:27:59.420 --> 00:28:00.280
So there's a lot going on there.

00:28:00.280 --> 00:28:01.310
I'm going to go ahead and put a link
on that line right there in the middle,

00:28:01.310 --> 00:28:06.100
but that's one way of dynamically popping
up a login panel if you're not allowed.

00:28:06.870 --> 00:28:10.230
Now, to do on-demand login,
this is that thing I talked about where

00:28:10.230 --> 00:28:12.140
you aren't allowed access to something.

00:28:12.140 --> 00:28:16.920
Login panel pops up and then you just
successfully pass the test and you

00:28:16.920 --> 00:28:20.500
just immediately go to the place that
you want to go instead of having to

00:28:20.500 --> 00:28:22.690
re-navigate into all this other nonsense.

00:28:22.700 --> 00:28:26.590
And the way I recommend doing that
is when you create that login page,

00:28:26.690 --> 00:28:30.700
set the name on the page.

00:28:30.700 --> 00:28:35.700
Don't create an instance of a component
or a page and set the page on that.

00:28:35.700 --> 00:28:39.100
Because I've actually seen some
people doing that and I guess

00:28:39.100 --> 00:28:41.570
that's fine in most cases,
but there can be side effects

00:28:41.690 --> 00:28:42.700
when you generate a page.

00:28:42.700 --> 00:28:44.710
If you're not allowed to
go there or even see it,

00:28:44.750 --> 00:28:46.610
why should you even construct the thing?

00:28:46.720 --> 00:28:50.010
You might be doing something
in Awake or in the constructor

00:28:50.010 --> 00:28:51.620
that you don't want to do.

00:28:51.810 --> 00:28:54.670
So if you just pass the page name,
in most cases that's going to be

00:28:54.970 --> 00:28:56.700
lighter weight and more secure anyway.

00:28:56.700 --> 00:29:00.390
So let's do that.

00:29:06.010 --> 00:29:07.760
I'm going to have to
change the policy here.

00:29:07.760 --> 00:29:16.000
I'll go to Panel and let's see,
login is required for this.

00:29:16.000 --> 00:29:17.300
So I'm going to page three.

00:29:17.300 --> 00:29:19.650
That's the page I want
to go to and I'm in.

00:29:19.720 --> 00:29:21.950
So now if I try to go back
and access that again,

00:29:22.040 --> 00:29:24.320
you know,
the panel doesn't come up because

00:29:24.320 --> 00:29:26.530
the session knows that I'm logged in.

00:29:26.540 --> 00:29:28.650
So that's that.

00:29:30.900 --> 00:29:31.800
Now the Security Kit.

00:29:31.800 --> 00:29:34.450
What I've got in this thing is a
modified WOA adapter as I talked about.

00:29:34.550 --> 00:29:36.540
I included a security
white paper in there,

00:29:36.540 --> 00:29:38.730
which kind of goes into more
detail than the presentation does.

00:29:38.800 --> 00:29:42.690
It's got this WXAuth Policy Framework,
which incorporates all the stuff you've

00:29:42.690 --> 00:29:44.800
been seeing me play around with here.

00:29:44.800 --> 00:29:48.610
I've also got a framework that wraps
some stuff from a company called,

00:29:48.630 --> 00:29:49.800
I think it's Silo.

00:29:49.800 --> 00:29:50.800
They're Swedish.

00:29:50.990 --> 00:29:54.670
Maybe it's Silu or whatever,
but it's... I made a plug-in.

00:29:54.780 --> 00:29:57.800
It's a plug-in that'll do a
digital signature in your browser.

00:29:57.800 --> 00:29:58.800
It's got a framework for that.

00:29:58.800 --> 00:30:02.200
Then there's the Valcert framework
that I've wrapped there and created

00:30:02.280 --> 00:30:03.800
a Java wrapper for it as well.

00:30:03.800 --> 00:30:08.300
And then the demo app itself,
which uses all of the above.

00:30:08.590 --> 00:30:11.100
So the things that are
in the auth policy thing.

00:30:11.100 --> 00:30:13.340
I've got the credential
gathering that you've seen,

00:30:13.390 --> 00:30:15.500
hooks for Custom Business Logic.

00:30:15.500 --> 00:30:18.090
I've got this notion of
access posture for pages,

00:30:18.090 --> 00:30:19.480
actions, and privacy.

00:30:19.580 --> 00:30:21.920
There's the SSL access
toggling support in there,

00:30:21.920 --> 00:30:24.890
just one method you have to call
to do that little toggle between

00:30:24.940 --> 00:30:26.500
secure and insecure pages.

00:30:26.500 --> 00:30:29.500
Then there's the sessionless login
support and some other stuff.

00:30:29.500 --> 00:30:32.970
The easiest way to find out how
to use it is just to take a look

00:30:33.040 --> 00:30:35.440
at the cfn.app that I've created.

00:30:35.500 --> 00:30:38.720
Now, unfortunately,
the only way I was able to really

00:30:38.770 --> 00:30:43.800
guarantee lockdown of the application was
to force you to subclass your component

00:30:43.840 --> 00:30:47.490
session direct action and application
from my abstract superclasses.

00:30:47.990 --> 00:30:51.500
Sorry about that, but you know.

00:30:51.900 --> 00:30:52.740
That's security for you.

00:30:52.740 --> 00:30:54.460
It's constraining.

00:30:54.590 --> 00:30:57.140
Policy can be set in code
or be a GUI component.

00:30:57.140 --> 00:30:59.390
That component you saw
there is part of the kit.

00:30:59.480 --> 00:31:02.290
You can drop that on a page
and control your policy

00:31:02.290 --> 00:31:04.440
interactively with that thing.

00:31:04.600 --> 00:31:09.500
You can get it at this link:
Enterprise.apple.com/wwdc2000.

00:31:09.500 --> 00:31:12.180
In there, I think you'll find a directory
with the name of my session,

00:31:12.460 --> 00:31:13.800
like 409, I believe.

00:31:13.920 --> 00:31:15.430
In that, I've got two files.

00:31:15.530 --> 00:31:18.550
One is the source code stuff
with all the frameworks,

00:31:18.640 --> 00:31:22.260
and the other one is just this
big honking blob that has the

00:31:22.260 --> 00:31:26.500
freebies from CeeLo and Valsert.

00:31:26.620 --> 00:31:30.160
Let's do a demo of this thing.

00:31:30.280 --> 00:31:32.590
Actually, you've sort of seen part of it.

00:31:33.260 --> 00:31:36.900
But anyway, you kind of see I've got
different resources here.

00:31:36.900 --> 00:31:41.960
I've got a page which--let me just
sort of get a new session here.

00:31:43.610 --> 00:31:47.100
Okay, I got page one which you
can access in any case.

00:31:47.100 --> 00:31:50.380
It's always okay to access page one.

00:31:50.640 --> 00:31:53.930
Page two used to be private.

00:31:54.070 --> 00:31:55.560
I'll go and make it private again.

00:31:55.660 --> 00:32:00.940
Actually, I'll show you how this works.

00:32:00.940 --> 00:32:00.940
Page two.

00:32:07.510 --> 00:32:09.230
Okay, I'll actually go in secure.

00:32:09.230 --> 00:32:10.340
I'm on a secure link.

00:32:10.340 --> 00:32:12.410
So if I go--if I come
in over a secure link,

00:32:12.490 --> 00:32:15.230
the thing detects that I did not
access this page over SSL and goes,

00:32:15.230 --> 00:32:18.480
"Whoa, you're not supposed to see this
unless this thing got encrypted.

00:32:18.550 --> 00:32:19.590
So I'm not even going to send it.

00:32:19.590 --> 00:32:21.560
I'm going to send you
this instead." Okay,

00:32:21.560 --> 00:32:26.840
and you saw how I was able to
like flip that on and off by just

00:32:26.840 --> 00:32:29.590
adding a page name to a list.

00:32:29.590 --> 00:32:31.300
That's what I meant by an access posture.

00:32:31.300 --> 00:32:31.300
So sort of go back to that policy editor.

00:32:31.480 --> 00:32:32.960
So I've got these three access postures.

00:32:32.960 --> 00:32:35.010
One is for page generation.

00:32:35.020 --> 00:32:39.810
So I'm defaulting to denying all page
generation with those exceptions.

00:32:39.820 --> 00:32:43.220
Page 1, page 2, policy editor,
page and main are okay.

00:32:43.220 --> 00:32:45.080
You can see those without logging in.

00:32:45.080 --> 00:32:47.720
I've got only one direct
action that I'm allowing,

00:32:47.720 --> 00:32:48.960
the default action.

00:32:48.980 --> 00:32:51.380
That's the action that gets
called when the page is initially

00:32:51.380 --> 00:32:52.720
created on session creation.

00:32:52.740 --> 00:32:56.000
And then there's a should
deny all pages not secured.

00:32:56.000 --> 00:32:59.280
Right now I'm allowing all pages
to show up under non-SSL except

00:32:59.280 --> 00:33:00.840
for those three pages right there.

00:33:01.400 --> 00:33:04.460
And, you know, there's some other things
going on here as well.

00:33:04.460 --> 00:33:06.430
But, I mean,
that's sort of the main part of it.

00:33:06.440 --> 00:33:12.480
So move on to the next thing.

00:33:14.390 --> 00:33:16.680
This guy with the demo thing is
having to flip back and forth.

00:33:16.680 --> 00:33:18.040
He's probably getting pissed.

00:33:18.170 --> 00:33:18.950
Okay.

00:33:19.140 --> 00:33:19.940
Access Control.

00:33:20.200 --> 00:33:24.360
Now this is the notion of, okay,
they've gotten into your application.

00:33:24.410 --> 00:33:24.890
Now what?

00:33:24.890 --> 00:33:28.530
Did they just get like to walk all over
everything and see everything they want?

00:33:28.630 --> 00:33:33.450
But I think in my experience it's
come down to answering two questions.

00:33:33.510 --> 00:33:38.020
And it comes down to answering
your EOs answering these questions.

00:33:38.020 --> 00:33:45.760
Given an instance of entity A,
can user B see it or, and if so, edit it?

00:33:45.760 --> 00:33:48.820
And this access depends on the
state of both of these things.

00:33:48.820 --> 00:33:53.530
What kind of EO is being edited and what
kind of user is attempting to edit it?

00:33:53.540 --> 00:33:55.760
If it's administrator, maybe they get to.

00:33:55.760 --> 00:33:58.200
If it's some other Joe Schmo,
maybe they can't.

00:33:58.200 --> 00:34:01.670
And this is sort of what I would call
the basic access control protocol

00:34:01.670 --> 00:34:03.340
that your EOs might implement.

00:34:03.340 --> 00:34:05.620
Can show and can edit,
getting passed in a user.

00:34:05.620 --> 00:34:08.560
I assume everyone who has an EO model
who has a commercial application

00:34:08.610 --> 00:34:10.120
is going to have a user entity.

00:34:10.140 --> 00:34:12.500
So that's the thing that
would get passed in here.

00:34:12.500 --> 00:34:16.770
And this might be a sample hierarchy
that you'd have that's security oriented.

00:34:16.780 --> 00:34:20.970
You'd have generic EO which would
implement the default access policy.

00:34:20.980 --> 00:34:23.380
You'd have secured EO which would
dictate certain schema because

00:34:23.430 --> 00:34:27.600
these are EOs that need to be
secured as opposed to not shown.

00:34:27.600 --> 00:34:31.320
So that might have to have certain
relationships to other objects to work.

00:34:31.450 --> 00:34:33.590
And then I've got product in
that little diagram which is

00:34:33.590 --> 00:34:34.820
an example of a concrete EO.

00:34:34.820 --> 00:34:38.070
So you'd never have an instance
of a generic EO or security EO.

00:34:38.080 --> 00:34:41.780
You'd only have instances
of a concrete subclass.

00:34:41.780 --> 00:34:45.420
So this is a sample implementation
of what generic EO might look like.

00:34:45.420 --> 00:34:48.220
Both returning true,
therefore your default access policies

00:34:48.710 --> 00:34:50.320
allow everyone to see and edit.

00:34:50.320 --> 00:34:52.480
And then you have exceptions.

00:34:52.480 --> 00:34:55.260
Now for secured EO,
this is just again a sample

00:34:55.270 --> 00:34:59.500
implementation and I assume that
anything that inherits from secured EO,

00:34:59.500 --> 00:35:02.770
that those entities have a 2-1
relationship to a user table

00:35:02.850 --> 00:35:06.900
called creator and it's got
a 2-many relationship to a,

00:35:06.900 --> 00:35:09.860
also to the user table called owners.

00:35:09.860 --> 00:35:11.050
So if the user is equal to creator,
then it's equal to user table.

00:35:11.050 --> 00:35:13.360
So if the user is equal to creator,
return true.

00:35:13.460 --> 00:35:16.770
If the user passed in happens to be
one of the people that owns the thing,

00:35:16.770 --> 00:35:17.350
return true.

00:35:17.400 --> 00:35:18.230
Else, return false.

00:35:18.280 --> 00:35:21.980
And you can see my can edit policy says,
well if you can see it, you can edit it.

00:35:22.180 --> 00:35:25.130
Now you can make this more elaborate
but the beauty of about putting

00:35:25.130 --> 00:35:28.340
this in this abstract superclass
called secured EO is that if,

00:35:28.350 --> 00:35:32.750
you can have a pretty sophisticated
policy that all of your enterprise

00:35:32.750 --> 00:35:34.810
objects implement in one place.

00:35:34.900 --> 00:35:36.460
And the logic is in the EOs.

00:35:36.490 --> 00:35:38.580
It's not in the top of the
pages asking these questions,

00:35:38.590 --> 00:35:39.980
deciding what you can see
and what you can't see.

00:35:39.980 --> 00:35:41.210
It's down below.

00:35:41.210 --> 00:35:43.580
All your pages have to do is
know how to ask the question.

00:35:43.580 --> 00:35:45.320
They don't have to implement the policy.

00:35:46.720 --> 00:35:49.310
Now if the policy gets more interesting,
you might use this thing called

00:35:49.360 --> 00:35:50.740
Discretionary Access Control.

00:35:50.740 --> 00:35:53.720
And if you did, you'd want to add more
relationships than the ones I had,

00:35:53.820 --> 00:35:56.600
like creator, owners, groups, permission.

00:35:56.720 --> 00:35:59.600
And basically this would mimic
how the UNIX file system works.

00:35:59.600 --> 00:36:01.870
And if you're really anal,
like the Department of Defense,

00:36:01.870 --> 00:36:03.590
you might have Mandatory Access Control.

00:36:03.600 --> 00:36:06.310
So you've got, instead of permissions,
you have these things

00:36:06.310 --> 00:36:07.590
called security levels.

00:36:07.590 --> 00:36:11.590
And instead of groups,
you have this thing called compartments.

00:36:11.600 --> 00:36:14.550
And in addition to just adjusting
what you can see and edit,

00:36:14.600 --> 00:36:16.600
it actually affects more than that.

00:36:16.600 --> 00:36:19.350
It affects what you can do in terms
of inserting information into,

00:36:19.350 --> 00:36:20.600
in this case, a database.

00:36:20.600 --> 00:36:25.180
So my example here is to actually
implement Mac in WebObjects,

00:36:25.180 --> 00:36:30.600
you'd have to take advantage of some
delegates on the editing context.

00:36:30.600 --> 00:36:33.970
So if certain compartments--if
you're a user,

00:36:33.970 --> 00:36:37.590
if you're a secret user and
you're editing things in

00:36:37.590 --> 00:36:40.570
the marketing department,
you cannot physically edit the web.

00:36:40.660 --> 00:36:41.600
So you can't physically edit the web.

00:36:41.600 --> 00:36:46.130
You can't physically save or insert
information into the accounting

00:36:46.130 --> 00:36:50.980
table that's unclassified,
for example, which is totally opposite

00:36:50.980 --> 00:36:52.550
of what you think on UNIX.

00:36:52.620 --> 00:36:53.630
I mean, if you're the root user,
goddammit,

00:36:53.630 --> 00:36:54.590
you can write anywhere you want.

00:36:54.600 --> 00:36:56.600
You know,
that's the whole thing about being root.

00:36:56.660 --> 00:37:00.000
But in this case, you know,
if you are Mr.

00:37:00.010 --> 00:37:02.590
Super Top Secret,
you can't write anything

00:37:02.690 --> 00:37:03.600
except top secret.

00:37:03.600 --> 00:37:07.490
So your editing context--

00:37:07.690 --> 00:37:11.290
Delegate would make sure that before
it actually allowed an insert to happen

00:37:11.290 --> 00:37:13.300
that certain relationships were set.

00:37:13.300 --> 00:37:15.460
And if they weren't set,
it would basically reject

00:37:15.460 --> 00:37:16.590
or raise an exception.

00:37:16.600 --> 00:37:21.600
Getting to integrity,
this is the fourth section.

00:37:21.600 --> 00:37:24.240
Aspects of integrity are
data corruption testing,

00:37:24.240 --> 00:37:26.520
making sure something
hasn't been tampered,

00:37:26.610 --> 00:37:29.930
verifying the origin,
and it's implemented using digital

00:37:29.930 --> 00:37:31.600
signatures and public key cryptography.

00:37:31.600 --> 00:37:34.500
And the key thing here
is a digital signature.

00:37:34.560 --> 00:37:38.600
And a digital signature is created by
doing something called hashing a message.

00:37:38.600 --> 00:37:39.600
That's this little thing
that takes your message,

00:37:39.600 --> 00:37:43.840
puts it into something fixed size,
and then you use this

00:37:43.960 --> 00:37:45.410
private key to encrypt that.

00:37:45.600 --> 00:37:48.280
And that encrypted thing
is a test to your message,

00:37:48.280 --> 00:37:51.590
and that's a digital signature
in 100 words or less.

00:37:51.600 --> 00:37:52.450
Nonrepudiation.

00:37:52.450 --> 00:37:55.600
This is this thing that is really great
to have in the e-commerce space where

00:37:55.600 --> 00:37:59.560
you can prove that that jackass actually
bought the $10,000 rocking chair.

00:37:59.600 --> 00:38:00.600
Okay?

00:38:00.600 --> 00:38:01.600
So...

00:38:03.110 --> 00:38:06.400
In the physical world,
you use ink signatures.

00:38:06.460 --> 00:38:09.980
In the digital world,
you use digital signatures.

00:38:09.980 --> 00:38:11.400
So business-to-consumer
digital signatures.

00:38:11.400 --> 00:38:14.000
This requires, unfortunately,
some client-side stuff.

00:38:14.000 --> 00:38:17.350
I think this is one reason this hasn't
really taken off in the consumer space,

00:38:17.350 --> 00:38:19.000
because you need all this stuff.

00:38:19.000 --> 00:38:21.290
But the clients require
a browser plug-in,

00:38:21.310 --> 00:38:24.630
and example applications would
be employee form processing,

00:38:24.630 --> 00:38:29.000
a brokerage enrollment account,
paperless workflow, and authorization.

00:38:29.000 --> 00:38:33.000
Now, there is one development that's
happened here that American Express did.

00:38:33.000 --> 00:38:35.000
I don't know if everyone realizes it,
but you know these blue cards?

00:38:35.000 --> 00:38:36.990
This is a smart card, right?

00:38:37.010 --> 00:38:39.440
Now, you've seen the commercial of them
twisting it and turning it and

00:38:39.440 --> 00:38:41.000
pulling it and all the other bullshit.

00:38:41.000 --> 00:38:42.490
Well, they don't tell anybody.

00:38:42.700 --> 00:38:44.650
This is actually a digital
certificate on here.

00:38:44.710 --> 00:38:46.630
It's issued by a company
called CyberTrust,

00:38:46.630 --> 00:38:49.160
which used to be a division of
GE and was bought by a CA company

00:38:49.210 --> 00:38:50.990
called Baltimore out of Ireland.

00:38:51.000 --> 00:38:54.060
And you really could do
cryptography on your system

00:38:54.060 --> 00:38:56.000
if they ever get around to it.

00:38:56.000 --> 00:38:58.000
So it's sort of interesting.

00:38:58.000 --> 00:38:59.000
People don't even realize it.

00:38:59.000 --> 00:39:01.000
But there is something getting out there.

00:39:01.000 --> 00:39:03.000
So slowly, I guess,
it's getting into the consumer space.

00:39:03.000 --> 00:39:05.980
Remind me not to leave that there.

00:39:07.800 --> 00:39:12.440
So I'm going to do a
demo here of a... See,

00:39:12.440 --> 00:39:15.060
I was going to originally make
this whole like elaborate thing.

00:39:15.060 --> 00:39:18.660
I was going to have all this graphics
on here and end up with this ugly thing.

00:39:18.900 --> 00:39:21.960
But I'm going to log into this guy.

00:39:21.960 --> 00:39:27.700
And actually this needs to be over SSL,
so let's go secure and go back to it.

00:39:27.700 --> 00:39:30.400
Okay, so this is like the sort of
business plan I had over talking

00:39:30.400 --> 00:39:31.700
to a friend of mine at lunch.

00:39:31.700 --> 00:39:33.900
I said, "You know,
why don't we have this like

00:39:33.900 --> 00:39:36.700
website that you access over SSL,
these digital signatures,

00:39:36.700 --> 00:39:38.700
and you digitally sign a confession.

00:39:38.700 --> 00:39:45.170
And then someone in the
Vatican responds to you." Okay?

00:39:46.900 --> 00:39:52.230
You did something really bad, like,
"I like sheep," say, you know?

00:39:55.300 --> 00:39:59.470
And this is going to load a plugin which
has the information I'm about to sign.

00:39:59.550 --> 00:40:01.760
So I'm going to pick the
certificate I'm going to use,

00:40:01.760 --> 00:40:06.170
enter my passphrase,
and sign and send this.

00:40:06.580 --> 00:40:08.740
This is basically what the server got.

00:40:08.740 --> 00:40:12.060
It got the certificate I used to sign it,
and this thing at the bottom is

00:40:12.060 --> 00:40:14.500
just the Base64 encoded signed blob.

00:40:14.500 --> 00:40:18.410
I have proof that I agreed,
I wrote the statement,

00:40:18.410 --> 00:40:20.480
and that I did what I did.

00:40:20.730 --> 00:40:24.490
They know, and they can maybe send
me an email saying,

00:40:24.490 --> 00:40:30.210
"You're forgiven." I bring this up
because it does get to the point of,

00:40:30.310 --> 00:40:33.300
"Who do you trust?" I sent
this to this website,

00:40:33.300 --> 00:40:37.500
confession.com website, and I think,
"I trust these guys.

00:40:37.500 --> 00:40:38.500
They have the certificate.

00:40:38.500 --> 00:40:41.920
It's issued." What I didn't know
was that their private key was

00:40:42.010 --> 00:40:47.070
compromised the other day by another
company operated out of the Cayman

00:40:47.080 --> 00:40:49.570
Islands called extortion.com.

00:40:50.250 --> 00:40:53.400
and they have this business of selling
information to you for a profit.

00:40:53.500 --> 00:40:57.200
So you have to check credentials or
something like that could happen to you.

00:40:57.200 --> 00:41:01.300
So anyway, going back to the slides here.

00:41:01.330 --> 00:41:03.440
Okay,
business-to-business digital signatures.

00:41:03.650 --> 00:41:06.730
Now this is instead of the consumer
talking to your WebObjects application,

00:41:06.730 --> 00:41:11.300
this is two WebObjects applications
talking to each other directly or

00:41:11.990 --> 00:41:15.130
just two non-WebObjects applications
or you talking to a non-WebObjects

00:41:15.130 --> 00:41:17.100
application or them talking to you.

00:41:17.140 --> 00:41:21.760
And an example of this is basically
any kind of EDI message and the classic

00:41:21.760 --> 00:41:24.980
one among many is the purchase order.

00:41:25.060 --> 00:41:26.930
So in WebObjects,
there's some infrastructure

00:41:26.930 --> 00:41:28.600
for this that was added in 4.0.

00:41:28.600 --> 00:41:32.460
Direct actions are a great way of
exposing API to your application

00:41:32.460 --> 00:41:36.600
on the web over port 80,
over HTTP and so forth.

00:41:36.650 --> 00:41:40.100
And in 4.5, I added a couple of things
which makes it even easier.

00:41:40.100 --> 00:41:43.400
It was very difficult in 4.0 to
open--to basically encode talk

00:41:43.400 --> 00:41:45.390
to remote WebObjects application.

00:41:45.460 --> 00:41:47.000
Now if you knew all
about socket programming,

00:41:47.000 --> 00:41:50.190
all the other stuff and hey, you know,
real programmers know about sockets

00:41:50.190 --> 00:41:52.900
but not everybody knows about sockets,
okay?

00:41:52.970 --> 00:41:55.900
And it is a bit cumbersome
and stuff sometimes.

00:41:55.900 --> 00:41:57.890
Now it's very easy in 4.5.

00:41:57.900 --> 00:42:00.760
I mean you can create a request, encode,
send it to a remote website,

00:42:00.900 --> 00:42:03.890
get a well-response back,
encode and do all that.

00:42:03.900 --> 00:42:07.900
Now the next question is what's the
content you put into those things?

00:42:07.900 --> 00:42:10.400
And the standard that's
coming out is XML.

00:42:10.400 --> 00:42:14.390
So you'll see some, you know,
there's XML support in 4.5 for--it's

00:42:14.590 --> 00:42:15.810
already easy to generate XML.

00:42:15.900 --> 00:42:16.900
WebObjects is very good.

00:42:16.900 --> 00:42:20.200
It's very good at generating any kind of
content but what--if you got some from

00:42:20.200 --> 00:42:25.260
some other source like another WebObjects
application or some other random entity,

00:42:25.380 --> 00:42:26.800
you didn't really have
anything to parse it.

00:42:26.800 --> 00:42:31.110
And the IBM parser that's included,
you know, you can use to parse it

00:42:31.110 --> 00:42:32.790
into meaningful data.

00:42:33.000 --> 00:42:36.800
So just a simple quick B2B scenario here.

00:42:36.800 --> 00:42:39.800
PEO is issued to WidgetCo by
Acme Corporation.

00:42:39.800 --> 00:42:41.800
It creates an XML document.

00:42:41.800 --> 00:42:45.060
It signs it using Java's
sun.security package which

00:42:45.100 --> 00:42:46.800
includes digital signature stuff.

00:42:46.800 --> 00:42:50.290
You encrypt this information
using WidgetCo's public key

00:42:50.290 --> 00:42:51.800
so it's nice and private.

00:42:51.800 --> 00:42:54.800
And you sent--and you send
it using the WillMessage API.

00:42:54.970 --> 00:42:59.720
And then on the other end,
WidgetCo receives this PEO from Acme.

00:42:59.800 --> 00:43:01.800
They decrypt it with their private key.

00:43:01.800 --> 00:43:03.790
They verify the digital
signature is valid.

00:43:03.800 --> 00:43:05.800
Basically, they'll be doing the simple
digital signature test.

00:43:05.990 --> 00:43:07.800
They make sure the ID is valid.

00:43:07.800 --> 00:43:09.770
I mean,
someone could issue a purchase order

00:43:09.770 --> 00:43:13.800
for $10 million with the video equipment
and we're just going to take that?

00:43:13.800 --> 00:43:16.700
You know, you want some credentials
or in the physical world,

00:43:16.700 --> 00:43:16.700
you have a lot of credentials.

00:43:16.700 --> 00:43:18.700
You have a fax that's signed.

00:43:18.700 --> 00:43:20.700
But in the digital world,
you need to do this mathematically.

00:43:20.700 --> 00:43:23.640
So, you know, you'd want to check
the digital ID on that.

00:43:23.930 --> 00:43:26.630
Well, I'll go to that anecdote later.

00:43:26.980 --> 00:43:28.700
Create a digital receipt.

00:43:28.700 --> 00:43:30.670
This is what you'd want WidgetCo to do.

00:43:30.730 --> 00:43:32.700
They could basically take
all this information,

00:43:32.700 --> 00:43:33.670
just tie it up in a bow, right?

00:43:33.710 --> 00:43:35.700
They've got your signed request.

00:43:35.700 --> 00:43:36.700
They know that they agree to do it.

00:43:36.700 --> 00:43:38.700
They get something called
a digital timestamp.

00:43:38.790 --> 00:43:41.700
And they wrap it all up in
their digital signature.

00:43:41.700 --> 00:43:43.700
And then they return this
and maybe even store it.

00:43:43.700 --> 00:43:46.600
And so now they have mathematical
proof that you asked for this.

00:43:46.600 --> 00:43:49.600
And that you agreed to it at this time.

00:43:49.600 --> 00:43:52.590
So it's a pretty neat thing.

00:43:52.610 --> 00:43:54.570
So in summary,
we covered some cryptography,

00:43:54.680 --> 00:43:56.600
a little primer on how it works.

00:43:56.760 --> 00:44:00.600
And mainly some stuff on SSL and how
to do that in a WebObjects application.

00:44:00.650 --> 00:44:03.600
A bunch of stuff on
authentication techniques.

00:44:03.670 --> 00:44:07.600
Some stuff on access control
in enterprise objects.

00:44:07.600 --> 00:44:12.600
And then integrity of transactions
using digital signatures and so forth.

00:44:12.720 --> 00:44:14.020
So...

00:44:16.200 --> 00:44:18.780
More information,
you've seen this about a billion times.

00:44:18.890 --> 00:44:24.900
Who to contact: Tony, Ernest, and Q&A.

00:44:24.900 --> 00:44:24.900
Okay?