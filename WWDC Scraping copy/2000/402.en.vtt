WEBVTT

00:00:08.390 --> 00:00:10.280
How many of you made it to
the keynote this morning?

00:00:10.310 --> 00:00:11.200
Good selection?

00:00:11.200 --> 00:00:11.690
All right.

00:00:11.690 --> 00:00:13.490
Got some very cool things happening.

00:00:13.550 --> 00:00:16.270
We're very excited with the power of
our hardware to give us the potential

00:00:16.350 --> 00:00:20.410
to do even more deployments on Mac OS X,
although of course we're always

00:00:20.410 --> 00:00:23.300
continuing to support pure
Java deployments with everyone else.

00:00:23.300 --> 00:00:25.670
Was everyone here yesterday, pretty much?

00:00:25.670 --> 00:00:28.300
Or at least tried to
squeeze in here yesterday?

00:00:28.300 --> 00:00:29.300
My name is Ernie Probacher.

00:00:29.300 --> 00:00:32.220
I am the product line manager for
WebObjects and development platforms.

00:00:32.320 --> 00:00:36.250
It's our pleasure to welcome you to
the second day of the WebObjects track.

00:00:36.320 --> 00:00:39.300
It's two down, 16 to go,
for those of you keeping score at home.

00:00:39.300 --> 00:00:42.300
And we have some really
exciting stuff for you today.

00:00:42.300 --> 00:00:43.850
Just one quick note,
we do want to try and

00:00:43.850 --> 00:00:44.820
keep the aisles clear.

00:00:44.820 --> 00:00:46.380
There are a number of empty seats here.

00:00:46.380 --> 00:00:48.250
I'm sure these are all
real friendly people.

00:00:48.300 --> 00:00:50.840
If you're standing in the aisles,
please come and grab a seat.

00:00:50.840 --> 00:00:53.300
Or not, please grab some seats
in the overflow section,

00:00:53.300 --> 00:00:56.420
because we need to keep the aisles
clear so the fire marshal does

00:00:56.420 --> 00:00:57.280
not get very upset at us again.

00:00:57.460 --> 00:01:01.300
So, with that I want to turn
the stage over to -- oh,

00:01:01.300 --> 00:01:01.300
James.

00:01:01.300 --> 00:01:05.300
James Dempsey,
one of our trainer extraordinaires,

00:01:05.300 --> 00:01:07.300
and he'll explain to you about
the very cool stuff happening

00:01:07.370 --> 00:01:08.290
with WebObjects Builder.

00:01:08.630 --> 00:01:10.370
Thank you very much.

00:01:14.990 --> 00:01:17.110
Thanks a lot, Ernie.

00:01:17.200 --> 00:01:17.920
Good afternoon.

00:01:18.080 --> 00:01:19.560
I am James Dempsey.

00:01:19.580 --> 00:01:22.460
And let's see how this all works.

00:01:22.470 --> 00:01:23.660
Great.

00:01:23.660 --> 00:01:26.820
I'm a developer trainer
with Apple Eye Services.

00:01:26.820 --> 00:01:32.600
I am much more used to talking
to a room of 17 to 20 developers

00:01:33.200 --> 00:01:38.450
with a big whiteboard behind me
and every once in a while asking,

00:01:38.560 --> 00:01:40.290
are there any questions?

00:01:40.540 --> 00:01:43.280
Today, I may slip up and say,
are there any questions?

00:01:43.280 --> 00:01:44.300
I don't mean it.

00:01:44.350 --> 00:01:47.820
Just wait and hold them until the end,
please.

00:01:48.150 --> 00:01:50.280
Because I can't even see your hands,
really.

00:01:50.280 --> 00:01:52.590
Actually,
I can see your hands a little bit.

00:01:52.750 --> 00:01:55.860
So the first thing I wanted to do is
just find out how many of you attended

00:01:55.960 --> 00:02:00.020
Steve Heyman's session yesterday,
the technical overview?

00:02:00.020 --> 00:02:01.270
OK, which is most of you.

00:02:01.430 --> 00:02:02.740
Terrific.

00:02:02.980 --> 00:02:05.120
I don't know if you noticed,
but in that session,

00:02:05.220 --> 00:02:08.140
Steve managed to cover just
about every new feature in

00:02:08.140 --> 00:02:13.700
Web Objects Builder in 4.5,
which is what my session's about.

00:02:13.700 --> 00:02:16.320
I'm just going to tap dance for you.

00:02:16.320 --> 00:02:17.430
No.

00:02:17.540 --> 00:02:20.520
Actually, it's actually very good.

00:02:20.720 --> 00:02:23.430
Steve had a lot of great
stuff in that presentation,

00:02:23.480 --> 00:02:26.380
a technical overview that
kind of gave you a very quick,

00:02:26.700 --> 00:02:29.450
brief look at how Web Objects works.

00:02:29.590 --> 00:02:32.020
What we're going to do today is twofold.

00:02:32.130 --> 00:02:34.660
We are going to take a look
at Web Objects Builder.

00:02:34.810 --> 00:02:37.520
But Web Objects Builder is a
tool that you use to create

00:02:37.600 --> 00:02:39.180
something called components.

00:02:39.290 --> 00:02:44.290
And components are really the heart
and soul of a Web Objects application.

00:02:44.380 --> 00:02:46.620
So we're going to take
this time in this hour,

00:02:46.620 --> 00:02:50.580
in this session,
to go through very specifically and find

00:02:50.580 --> 00:02:54.030
out just what's going on in Web Objects.

00:02:54.110 --> 00:02:58.000
We're going to go start at a high level,
get down to the nitty gritty.

00:02:58.020 --> 00:03:00.130
And then we're going to take
a look at the end at the new

00:03:00.230 --> 00:03:01.960
features in Web Objects Builder.

00:03:02.020 --> 00:03:04.450
So I probably should have
advanced the slide already.

00:03:04.590 --> 00:03:06.340
We're going to talk about components.

00:03:06.500 --> 00:03:09.540
We're going to build some components
using Web Objects Builder.

00:03:09.580 --> 00:03:11.210
And then finally,
we're going to take a tour

00:03:11.390 --> 00:03:13.460
of some of the new features.

00:03:15.600 --> 00:03:19.060
Okay,
that's also what you're going to learn.

00:03:19.060 --> 00:03:23.080
So in a WebObjects application,
the heart and soul of a

00:03:23.080 --> 00:03:26.500
WebObjects application is
this request response loop.

00:03:26.500 --> 00:03:29.700
If you don't understand that,
you're just not going to be a

00:03:29.700 --> 00:03:31.500
very good WebObjects programmer.

00:03:31.500 --> 00:03:35.460
So let's just start from the top and
walk through at a very high level.

00:03:35.510 --> 00:03:38.390
We have a client web browser,
we have a web server

00:03:38.390 --> 00:03:40.860
running on a machine,
and then you have your

00:03:40.860 --> 00:03:44.500
WebObjects application running
typically on another box.

00:03:44.500 --> 00:03:46.850
Now, for the web server to
talk to the application,

00:03:46.980 --> 00:03:49.480
we provide something called
the WebObjects adapter,

00:03:49.530 --> 00:03:53.940
which is a CGI that is going to
just route the requests from the

00:03:53.940 --> 00:03:56.400
web server to the application.

00:03:56.500 --> 00:03:59.450
So generally things are
going to work like this.

00:03:59.490 --> 00:04:03.070
The web browser clicks on
the URL of your application,

00:04:03.070 --> 00:04:06.500
in comes a request,
the web server passes it to the adapter,

00:04:06.500 --> 00:04:08.500
the adapter passes it
to your application,

00:04:08.500 --> 00:04:13.500
your application processes the request,
creates an HTTP response,

00:04:13.500 --> 00:04:18.810
stuffs it full of stuff, typically HTML,
and sends it back,

00:04:18.930 --> 00:04:21.480
and the user gets a web page.

00:04:21.960 --> 00:04:25.200
That's one go-round of
the request-response loop.

00:04:25.200 --> 00:04:30.460
All your application does is sit there
and do that over and over and over again.

00:04:30.520 --> 00:04:33.800
If in a desktop application,
your application has an event

00:04:33.800 --> 00:04:36.700
loop that's just sitting there
waiting for the next event,

00:04:36.890 --> 00:04:42.310
keystroke or mouse down event, same here,
we're just listening on a port for that

00:04:42.310 --> 00:04:49.540
HTTP request to come flying in so we can
handle it and send back an HTTP response.

00:04:50.320 --> 00:04:54.160
So, let's take a,
we'll drop out that infrastructure and

00:04:54.160 --> 00:04:56.980
just focus in on the application itself.

00:04:56.980 --> 00:05:00.660
Now, another difference between a
WebObjects app and a desktop

00:05:00.760 --> 00:05:04.440
app is that in a WebObjects
app we can have multiple users.

00:05:04.440 --> 00:05:06.330
Actually, here we have two.

00:05:06.470 --> 00:05:09.530
We can scale up to thousands,
millions of users.

00:05:09.530 --> 00:05:13.180
Here are represented two users
by two different browsers.

00:05:13.180 --> 00:05:18.920
And we need a way to keep track of
different users' stuff essentially.

00:05:18.920 --> 00:05:21.060
So,
when a new request comes in from a user,

00:05:21.060 --> 00:05:25.300
we create, or the framework creates
a session for that user.

00:05:25.300 --> 00:05:26.750
And a session is an object.

00:05:26.870 --> 00:05:32.030
You add instance variables to the session
as places to hold the user's stuff.

00:05:32.190 --> 00:05:35.250
It might be their shopping basket,
their preferences,

00:05:35.350 --> 00:05:37.180
their personalization info.

00:05:37.180 --> 00:05:41.030
The request gets routed in, processed,
and a response gets

00:05:41.030 --> 00:05:42.900
sent back to the user.

00:05:42.900 --> 00:05:44.820
The other user shows up.

00:05:45.020 --> 00:05:48.140
This is a very small,
low volume site here.

00:05:48.140 --> 00:05:50.680
It gets processed and sent back.

00:05:51.140 --> 00:05:53.140
Now, how do we keep track of this?

00:05:53.140 --> 00:05:55.340
It happens automatically for you.

00:05:55.340 --> 00:05:56.600
Every session has an ID.

00:05:56.940 --> 00:06:01.650
That ID is either stuck in a
URL or it's stuck in a cookie.

00:06:01.650 --> 00:06:03.090
Your choice.

00:06:03.310 --> 00:06:06.380
So now we have kind of the general
infrastructure of what's going

00:06:06.380 --> 00:06:08.200
on in a WebObjects application.

00:06:08.200 --> 00:06:09.640
We know how the request comes in.

00:06:09.940 --> 00:06:13.840
We can keep everybody's stuff
separate using sessions.

00:06:13.840 --> 00:06:17.720
But we still don't know
what's really going on,

00:06:17.720 --> 00:06:20.880
because sometimes you come to
a presentation and you get all

00:06:20.880 --> 00:06:23.930
these arrows flying around,
but you don't know how

00:06:23.960 --> 00:06:25.830
does that really work.

00:06:25.890 --> 00:06:27.800
That's what we're going
to try to do today.

00:06:27.800 --> 00:06:33.150
And what's really interacting with the
user is something called a component.

00:06:34.330 --> 00:06:38.530
If there was a movie,
the WebObjects movie,

00:06:38.530 --> 00:06:41.200
the component would be
one of the leading roles.

00:06:41.910 --> 00:06:44.870
Everything we've seen so far

00:06:45.690 --> 00:06:50.540
The only reason all of it exists
is so a component can do its job.

00:06:50.540 --> 00:06:53.580
All of that infrastructure is
there to support the component

00:06:53.700 --> 00:06:55.570
in interacting with the user.

00:06:56.370 --> 00:06:58.540
So components, a little bit important.

00:06:58.600 --> 00:07:04.090
Okay, now how does a component
interact with the user?

00:07:04.800 --> 00:07:06.660
It does so in three basic steps.

00:07:06.770 --> 00:07:10.700
There are three things that a component
always does to interact with the user.

00:07:10.940 --> 00:07:15.090
First thing it does is it generates
some HTML out for the user.

00:07:15.430 --> 00:07:15.700
And there it goes.

00:07:15.700 --> 00:07:19.470
It gets stuffed into
an outgoing response,

00:07:19.560 --> 00:07:22.550
I should say,
and the user gets some HTML that

00:07:23.130 --> 00:07:24.700
they can interact with.

00:07:24.700 --> 00:07:28.640
So the component starts the
interaction with the HTML.

00:07:28.790 --> 00:07:31.700
Then the user interacts with that HTML.

00:07:31.700 --> 00:07:34.700
In this case we have a login
page and Fred is going to log in,

00:07:34.700 --> 00:07:36.700
type in his password, submit it.

00:07:36.700 --> 00:07:39.570
It might be hyperlinks,
something you click on.

00:07:39.690 --> 00:07:42.900
As soon as you click on
something or submit a form,

00:07:42.900 --> 00:07:46.870
it sends a request,
gets routed back to the right session,

00:07:46.870 --> 00:07:52.670
and finally back to the same component
that originally started this thing,

00:07:52.750 --> 00:07:53.700
that originally sent out the HTML.

00:07:54.770 --> 00:07:59.620
So now the component has two
more things that it needs to do.

00:07:59.700 --> 00:08:01.690
It started this interaction.

00:08:01.690 --> 00:08:02.700
Now it's got to finish it.

00:08:02.700 --> 00:08:06.980
The first thing that happens
when that request comes back in,

00:08:06.980 --> 00:08:11.490
our second phase, is it pulls any form
values out of the request.

00:08:11.700 --> 00:08:16.680
So in this case Fred typed in his name,
the password is the name of his cat,

00:08:16.680 --> 00:08:21.700
and what happens is that gets stored,
typically in a variable somewhere.

00:08:21.700 --> 00:08:23.700
When the component is
done with this phase,

00:08:23.700 --> 00:08:23.700
it's going to start to
interact with the user.

00:08:23.720 --> 00:08:24.690
So the component starts the interaction.

00:08:24.690 --> 00:08:24.700
Now it's got to finish it.

00:08:24.700 --> 00:08:28.860
So in this case,
we're now certain that all of the state

00:08:29.000 --> 00:08:34.700
that the user typed in in the browser
is now synchronized on the server side,

00:08:35.040 --> 00:08:38.700
which leads us to our
third and final phase.

00:08:38.870 --> 00:08:42.700
The last thing that happens
is a method is invoked.

00:08:42.700 --> 00:08:47.700
This is the wildcard phase because it's
a method that you are going to write.

00:08:47.700 --> 00:08:50.520
It's a standard method,
just a function for you

00:08:50.520 --> 00:08:53.410
procedural folks in the audience,
just a standard old

00:08:53.410 --> 00:08:56.700
method that's going to,
do whatever you want.

00:08:56.700 --> 00:09:00.700
In this case, that method might go check
Fred's username and password.

00:09:00.700 --> 00:09:02.700
You could also fetch
things from the database,

00:09:02.700 --> 00:09:06.540
validate credit card information,
take whatever the user is looking

00:09:06.540 --> 00:09:11.800
at and put it up in their order
so that they can check out later.

00:09:12.900 --> 00:09:17.290
You can associate one of these
methods for every item that you

00:09:17.370 --> 00:09:19.680
can click on in the web page.

00:09:19.680 --> 00:09:24.660
And since it's a method that essentially
gets executed based on a user action,

00:09:24.660 --> 00:09:28.470
we have a special name for
these in WebObjects development.

00:09:28.470 --> 00:09:30.420
We call them action methods.

00:09:30.420 --> 00:09:31.820
And that's it.

00:09:31.890 --> 00:09:36.610
That really is the core heart and
soul of WebObjects programming.

00:09:36.620 --> 00:09:38.160
That is all there is to it.

00:09:38.160 --> 00:09:40.610
The rest of the time you have free.

00:09:40.790 --> 00:09:41.440
Go away.

00:09:41.440 --> 00:09:42.440
That's it.

00:09:42.640 --> 00:09:44.320
No.

00:09:44.330 --> 00:09:46.220
There's just a little more.

00:09:46.300 --> 00:09:48.210
But honestly, that is what's going on.

00:09:48.420 --> 00:09:52.200
A component generates HTML,
lets the user interact with it.

00:09:52.200 --> 00:09:55.060
If there are form values,
it pulls them out.

00:09:55.060 --> 00:09:58.300
And then it invokes this action method.

00:09:59.060 --> 00:10:00.710
There's one missing wrinkle though.

00:10:00.960 --> 00:10:02.300
This is one interaction.

00:10:02.300 --> 00:10:05.670
How do we move on and interact
with another component?

00:10:05.760 --> 00:10:07.840
And the answer is very simple.

00:10:07.900 --> 00:10:11.190
That action method has one
particular requirement,

00:10:11.250 --> 00:10:14.590
which is it has to return the
next component that's going

00:10:14.590 --> 00:10:16.790
to interact with the user.

00:10:17.490 --> 00:10:18.290
And there it is.

00:10:18.490 --> 00:10:22.320
So that very last line in
the method is going to say,

00:10:22.490 --> 00:10:24.700
return some component.

00:10:24.750 --> 00:10:27.250
And at that point,
when we end that method,

00:10:27.340 --> 00:10:29.720
we no longer care about
that old component.

00:10:29.840 --> 00:10:32.520
It's yesterday's news, who cares?

00:10:32.700 --> 00:10:34.770
That's the last request that came in.

00:10:34.950 --> 00:10:38.860
Now the golden child of the request
response loop is that component,

00:10:38.910 --> 00:10:40.360
this new component.

00:10:40.390 --> 00:10:45.050
And now it's going to interact with the
user going through that same process,

00:10:45.050 --> 00:10:48.120
beginning with generating some HTML.

00:10:48.160 --> 00:10:50.480
And this page welcomes Fred.

00:10:50.560 --> 00:10:53.350
It's a very,
very-- we could take this app and go

00:10:53.350 --> 00:10:59.920
out and get an IPO within six weeks,
I'll become very, very rich and famous.

00:10:59.940 --> 00:11:00.900
Doubtful.

00:11:00.920 --> 00:11:02.780
OK.

00:11:02.870 --> 00:11:04.300
So--

00:11:04.860 --> 00:11:06.220
Let's review those again.

00:11:06.220 --> 00:11:06.380
Why?

00:11:06.380 --> 00:11:09.800
Because that's all that's going on.

00:11:09.820 --> 00:11:13.800
Steve Heyman yesterday talked about
a steep WebObjects learning curve.

00:11:13.800 --> 00:11:18.300
I always think that
it's steep not because

00:11:18.810 --> 00:11:22.460
Any one particular thing in
WebObjects is really hard.

00:11:22.460 --> 00:11:24.640
It's just that there's a lot of it.

00:11:24.640 --> 00:11:28.130
But if you sit down and kind
of commit these to memory and

00:11:28.130 --> 00:11:32.920
what order they happen in,
everything else you learn in WebObjects

00:11:32.920 --> 00:11:38.700
on the web integration side is really
just a refinement of these phases,

00:11:38.820 --> 00:11:42.530
an addition to these phases,
or some variation on this theme.

00:11:42.700 --> 00:11:46.880
So it's a very nice framework,
conceptual model in your mind,

00:11:47.030 --> 00:11:50.330
on which you can hang all the
other pieces of information

00:11:50.330 --> 00:11:51.700
of WebObjects off of.

00:11:51.930 --> 00:11:55.620
So again, they are:
you generate some HTML.

00:11:55.790 --> 00:11:57.140
User interacts.

00:11:57.190 --> 00:11:58.090
In comes the request.

00:11:58.230 --> 00:12:01.160
If there are form values,
the component pulls them out.

00:12:01.300 --> 00:12:04.420
And then finally,
invoke some action method.

00:12:04.550 --> 00:12:06.960
And that action method is where
you're going to write a lot of code,

00:12:06.960 --> 00:12:08.760
your custom processing.

00:12:08.870 --> 00:12:13.910
That's kind of the "you write your
code here" part of this whole deal.

00:12:14.290 --> 00:12:17.430
And finally,
we have to return the next component

00:12:17.430 --> 00:12:19.440
to interact with each user.

00:12:21.010 --> 00:12:23.720
So that's the conceptual piece.

00:12:23.820 --> 00:12:28.860
Each of these maps to a method that is
sent automatically to your component

00:12:29.520 --> 00:12:32.770
so that it knows when to do this stuff.

00:12:33.010 --> 00:12:36.840
And those are append to response
is sent to a component to tell it

00:12:36.930 --> 00:12:42.900
to add its HTML into this response,
take values from request,

00:12:42.980 --> 00:12:43.890
and invoke action.

00:12:44.950 --> 00:12:48.460
Now, it's important to note,
you don't send these messages.

00:12:48.460 --> 00:12:51.830
They're automatically sent to
your component in the process

00:12:51.830 --> 00:12:53.560
of this request response cycle.

00:12:53.990 --> 00:12:57.330
However, as you start doing WebObjects
development and start chatting

00:12:57.330 --> 00:13:00.280
with WebObjects developers,
they're going to be using these

00:13:00.280 --> 00:13:02.900
terms all over the place and say,
"Well, after append to response,

00:13:02.900 --> 00:13:06.480
then I'm going to put this header
into the response and blah,

00:13:06.700 --> 00:13:11.070
blah, go on and on and on."
It all just stems from this.

00:13:11.750 --> 00:13:15.580
One other note is that we have been,
or I have been talking a lot

00:13:15.580 --> 00:13:18.020
about this word component.

00:13:18.020 --> 00:13:21.960
And we know that the
word component really,

00:13:22.020 --> 00:13:24.060
it's a very overloaded word.

00:13:24.060 --> 00:13:26.540
In many different venues it
means many different things.

00:13:26.540 --> 00:13:29.840
So let me be very specific, very precise.

00:13:29.840 --> 00:13:33.930
In WebObjects when I say component,
there's a class in the

00:13:33.930 --> 00:13:36.400
framework called Woe Component.

00:13:36.670 --> 00:13:39.310
And that is the class that
implements those methods:

00:13:39.410 --> 00:13:42.930
Append a response,
take values from request, invoke action.

00:13:43.040 --> 00:13:44.980
It's also the class that
implements those methods:

00:13:44.980 --> 00:13:44.980
Append a response,
take values from request, invoke action.

00:13:44.980 --> 00:13:44.980
It's also the

00:13:45.100 --> 00:13:55.900
[Transcript missing]

00:13:57.870 --> 00:14:03.380
By convention,
the first component that a user

00:14:03.380 --> 00:14:07.800
interacts with is called main,
as we'll see as we build a project.

00:14:07.950 --> 00:14:10.800
But of course,
for every page that you want generated,

00:14:10.800 --> 00:14:13.650
you typically are going to
create a separate component.

00:14:14.150 --> 00:14:18.710
The only thing you need to be concerned
about is they need to be uniquely named.

00:14:18.800 --> 00:14:24.270
And so here we have the main component,
and then in our former example,

00:14:24.280 --> 00:14:26.910
moving to a component named welcome page.

00:14:28.000 --> 00:14:32.140
Now since the request response
loop's really all I got,

00:14:32.270 --> 00:14:35.190
we're going to go through
it once again very quickly.

00:14:35.330 --> 00:14:36.140
Quick review.

00:14:36.210 --> 00:14:40.330
So the user clicks a
URL in their browser.

00:14:40.840 --> 00:14:41.680
In comes a request.

00:14:41.860 --> 00:14:43.010
A session is created.

00:14:43.210 --> 00:14:45.400
A main component is always created.

00:14:45.500 --> 00:14:48.460
It is sent to PenderResponse
and so it generates HTML.

00:14:48.460 --> 00:14:50.490
The HTML flies down to the browser.

00:14:50.630 --> 00:14:52.680
The user fills out the form, submits it.

00:14:53.010 --> 00:14:54.240
In comes a request.

00:14:54.370 --> 00:14:58.300
A side note, this time around Fred typed
in the wrong password.

00:14:58.400 --> 00:15:00.300
We'll see how that's
going to show up later.

00:15:00.380 --> 00:15:01.760
All right, the request comes in.

00:15:01.760 --> 00:15:03.790
The component's told to take
values from the request.

00:15:03.930 --> 00:15:06.700
It pulls out the values,
stores them in a variable,

00:15:06.970 --> 00:15:08.710
is then told to invoke an action.

00:15:08.880 --> 00:15:12.440
And that action determines--
our custom code determines,

00:15:12.510 --> 00:15:14.640
hey, Fred typed in the wrong password.

00:15:14.800 --> 00:15:18.080
We don't want to let him
go on to the welcome page.

00:15:18.290 --> 00:15:23.290
We want main to have another
shot at interacting with Fred.

00:15:23.530 --> 00:15:26.970
Maybe-- A slightly different page
with an error message or one of

00:15:26.970 --> 00:15:31.200
those red asterisks turned on to
let Fred know that he screwed up.

00:15:31.230 --> 00:15:35.420
And so the convention in WebObjects
is instead of returning a component

00:15:35.420 --> 00:15:39.580
at the end of that action method,
we return null.

00:15:39.610 --> 00:15:42.880
We say, nope,
you're not getting a new component.

00:15:42.900 --> 00:15:45.720
I'm going to re-interact with the user.

00:15:45.760 --> 00:15:48.480
And so in that case,
if we return null from

00:15:48.480 --> 00:15:51.140
that action method,
the same component

00:15:51.140 --> 00:15:52.950
instant gets used again.

00:15:53.360 --> 00:15:59.200
It sent a Pender response again and it
starts its interaction with the user.

00:15:59.200 --> 00:16:03.430
And now Fred has a slightly
different login page.

00:16:06.300 --> 00:16:10.900
Alright, let's build that.

00:16:10.900 --> 00:16:13.970
So if we switch to number four.

00:16:15.250 --> 00:16:17.200
It's like magic.

00:16:17.260 --> 00:16:18.150
Great.

00:16:18.150 --> 00:16:21.700
All right,
so we'll start in Project Builder.

00:16:21.700 --> 00:16:25.050
Make a new project.

00:16:25.910 --> 00:16:28.200
Call this thing.

00:16:28.200 --> 00:16:34.200
No assistance.

00:16:34.200 --> 00:16:36.310
Java is our language.

00:16:42.300 --> 00:16:45.060
And if we look at the
classes in Project Builder,

00:16:45.060 --> 00:16:47.420
you'll notice some familiar items.

00:16:47.420 --> 00:16:51.140
There's the application
that we had seen before,

00:16:51.140 --> 00:16:52.300
the session.

00:16:52.350 --> 00:16:54.290
And there's also main.java.

00:16:54.540 --> 00:16:57.970
And I described a component,
in this case main, as a class,

00:16:58.150 --> 00:16:59.270
as a type of object.

00:16:59.300 --> 00:17:03.120
And you'll see that indeed,
main extends woe component.

00:17:03.410 --> 00:17:05.800
And it's a very boring
component at the moment.

00:17:05.920 --> 00:17:09.300
It does not have any additional
instance variables or methods.

00:17:09.300 --> 00:17:11.800
We're going to change that in a moment.

00:17:11.990 --> 00:17:15.250
but a component is
more than just a class.

00:17:15.460 --> 00:17:20.500
There are two other files that
describe or make up a component.

00:17:20.610 --> 00:17:25.290
They're stored in web
components in a .wo directory.

00:17:25.450 --> 00:17:27.580
And there's an HTML file.

00:17:27.890 --> 00:17:33.200
And that HTML file is a template that
shows what main is going to look like.

00:17:33.280 --> 00:17:37.830
And then we know there's a Java file
that defines all the state that we can

00:17:37.910 --> 00:17:40.020
store in main and all of its behavior.

00:17:40.130 --> 00:17:42.300
And there's a third file
called a bindings file,

00:17:42.300 --> 00:17:46.620
which is that connection between
the user interface and the state.

00:17:46.710 --> 00:17:50.140
We're going to talk about those and
look at those in a little more detail.

00:17:50.260 --> 00:17:55.280
For now, we're just going to open up
main.wo in WebObjectsBuilder,

00:17:55.280 --> 00:17:57.270
the other star of our show.

00:17:58.470 --> 00:17:59.700
Great.

00:17:59.850 --> 00:18:05.400
So, for those of you who are
relatively new to WebObjects,

00:18:05.470 --> 00:18:09.160
WebObjects Builder,
the top half is an HTML editor,

00:18:09.410 --> 00:18:11.300
a graphical HTML editor.

00:18:11.490 --> 00:18:13.400
So we could type in some static stuff.

00:18:13.400 --> 00:18:15.230
Please log in.

00:18:16.500 --> 00:18:19.210
And of course we can
make it bold and... nah,

00:18:19.210 --> 00:18:20.740
we don't want to center it.

00:18:20.770 --> 00:18:24.970
Make it larger,
change the font... beautiful.

00:18:25.180 --> 00:18:27.140
We don't want to center that either.

00:18:29.900 --> 00:18:31.100
And we're going to put in a form.

00:18:31.410 --> 00:18:35.470
This bottom row are items
called dynamic elements.

00:18:35.470 --> 00:18:38.340
And these are object-oriented
placeholders of where something

00:18:38.340 --> 00:18:39.800
dynamic is going to show up.

00:18:39.800 --> 00:18:42.530
So username,

00:18:43.100 --> 00:18:48.600
[Transcript missing]

00:18:49.220 --> 00:18:51.420
and a dynamic submit button.

00:18:51.780 --> 00:18:56.290
Okay, we've now built our
award-winning user interface.

00:18:56.290 --> 00:18:59.430
And now we're going to have to
worry about where are we going to

00:18:59.530 --> 00:19:02.100
put those values when they come in.

00:19:02.370 --> 00:19:05.090
This bottom panel is
called the object browser.

00:19:05.430 --> 00:19:08.090
And if we notice,
the first column is labeled main.

00:19:08.090 --> 00:19:12.070
And in fact,
this column is a graphical representation

00:19:12.400 --> 00:19:19.100
of all of the values and all of the
methods that are in the main class.

00:19:19.750 --> 00:19:22.040
Now you'll notice that we
have two already there:

00:19:22.130 --> 00:19:23.410
application and session.

00:19:23.760 --> 00:19:25.640
However, the main class,
there's nothing between

00:19:25.750 --> 00:19:26.600
those curly braces.

00:19:26.600 --> 00:19:31.310
Every single component is
able to access its session

00:19:31.310 --> 00:19:34.600
and application automatically.

00:19:34.600 --> 00:19:38.600
It's behavior that's gotten from
the superclass Woe Components.

00:19:38.600 --> 00:19:41.400
However,
we do need a place to stick the username.

00:19:41.860 --> 00:19:45.600
And we can add and edit that
Java file right from here.

00:19:46.730 --> 00:19:48.460
We'll add a key called username.

00:19:48.460 --> 00:19:49.600
It'll be a string.

00:19:49.600 --> 00:19:52.560
And we only need an
instance variable for that.

00:19:52.600 --> 00:19:54.600
And it adds us here.

00:19:54.600 --> 00:19:59.190
If we take a look at the source code,
you'll notice that indeed it has added

00:19:59.190 --> 00:20:02.030
that instance variable to our source.

00:20:02.520 --> 00:20:03.520
And it works in both ways.

00:20:03.560 --> 00:20:08.010
So if I type something in manually,
like my other variable that

00:20:08.010 --> 00:20:12.040
I need to store the password,
when I head back to WebObjects Builder,

00:20:12.140 --> 00:20:13.400
it shows up.

00:20:13.550 --> 00:20:18.590
So there's a direct correspondence
between this column and the code

00:20:18.720 --> 00:20:21.490
In the component that I'm editing.

00:20:21.490 --> 00:20:25.040
Now we need to connect this
text field so that the values

00:20:25.040 --> 00:20:27.000
here show up in this variable.

00:20:27.170 --> 00:20:30.890
To do that we just drag on
up and every dynamic element

00:20:31.010 --> 00:20:32.600
has a bunch of attributes.

00:20:32.600 --> 00:20:36.420
Required attributes show up in
red if they're not already bound.

00:20:36.580 --> 00:20:40.480
So we're going to make the value
of this text field get stored

00:20:40.590 --> 00:20:42.490
in that variable username.

00:20:42.810 --> 00:20:45.030
Do the same for password.

00:20:46.750 --> 00:20:48.860
And there we go.

00:20:48.860 --> 00:20:53.460
So, we're now worried about,
or now we're done with the state storage.

00:20:53.460 --> 00:20:56.980
The only thing we need to do
now is get to the point where

00:20:57.200 --> 00:21:02.400
I can click on that submit button
and go to that welcome page.

00:21:02.420 --> 00:21:05.340
So let's add an action.

00:21:05.340 --> 00:21:09.410
We will call it login.

00:21:09.410 --> 00:21:09.410
Hey, hey,

00:21:12.160 --> 00:21:15.060
We're going to add it.

00:21:15.060 --> 00:21:18.260
And notice that it's added
this login method here.

00:21:18.260 --> 00:21:21.440
There's a line, everything above the line
you can think of as a value.

00:21:21.490 --> 00:21:25.080
Everything below the line you
can think of as an action method.

00:21:25.100 --> 00:21:29.690
We're just going to hook that up
to the submit button as its action.

00:21:30.560 --> 00:21:32.220
and we're ready to roll.

00:21:32.260 --> 00:21:37.150
Let's go take a look at that source and
notice that it has indeed added a method.

00:21:37.850 --> 00:21:39.840
We're going to add one line of code.

00:21:39.840 --> 00:21:44.800
This line of code automatically creates
and initializes that welcome page.

00:21:45.110 --> 00:21:47.140
The next line of code.

00:21:50.000 --> 00:21:53.710
We're just going to pass the
username along to the next

00:21:53.710 --> 00:21:55.500
page so it can display it.

00:21:55.500 --> 00:21:59.550
So set username to our value of username.

00:22:00.920 --> 00:22:04.800
So wait a minute, you may be thinking,
where did Welcome Page come from?

00:22:04.800 --> 00:22:07.800
And why does it have a
method called setUserName?

00:22:08.090 --> 00:22:10.490
Well, at the moment,
there is no such thing

00:22:10.490 --> 00:22:11.240
as the Welcome Page.

00:22:11.240 --> 00:22:14.020
We're about to create it,
and we've got to make darn sure that

00:22:14.100 --> 00:22:15.790
it actually has that method in it.

00:22:15.790 --> 00:22:19.160
So let's set about to do that right now.

00:22:20.990 --> 00:22:24.200
Web Components: File, New and Project.

00:22:24.200 --> 00:22:27.890
We'll call this Welcome Page.

00:22:28.000 --> 00:22:29.740
No Assistance in Java.

00:22:29.740 --> 00:22:35.100
And then we'll open it
up in WebObjects Builder.

00:22:37.400 --> 00:22:40.460
Alrighty, we're going to need a
place to store that.

00:22:40.470 --> 00:22:42.300
Username, string.

00:22:42.300 --> 00:22:45.810
We're going to generate source for
the instance variable and methods,

00:22:46.040 --> 00:22:47.290
accessor methods as well.

00:22:47.400 --> 00:22:49.400
We'll add that.

00:22:49.450 --> 00:22:51.800
Let's build our user interface.

00:22:51.810 --> 00:22:53.390
Welcome.

00:22:53.450 --> 00:22:57.400
We're going to add a dynamic
string element and hook that up.

00:22:57.400 --> 00:22:59.400
Now let's make all that really big.

00:22:59.570 --> 00:23:04.080
We'll center it, change the font,
change the size.

00:23:06.640 --> 00:23:10.630
Change the color, great.

00:23:11.010 --> 00:23:13.540
View the source,
and it has indeed added that instance

00:23:13.640 --> 00:23:15.660
variable and accessor methods.

00:23:15.720 --> 00:23:17.700
That's all that we need to do.

00:23:17.740 --> 00:23:20.180
So let's build and run.

00:23:20.240 --> 00:23:23.100
You'll notice, what did we do, really?

00:23:23.300 --> 00:23:27.440
We defined two HTML pages,
some very basic ones.

00:23:27.660 --> 00:23:32.970
We added a couple instance variables,
a couple accessor methods,

00:23:33.260 --> 00:23:37.200
one of these action methods that's
automatically generated for us,

00:23:37.200 --> 00:23:39.320
and we typed in one line of code.

00:23:39.480 --> 00:23:40.840
So let's take a look.

00:23:40.890 --> 00:23:44.600
Username, Fred, password.

00:23:44.640 --> 00:23:48.980
Oh no, our password field is
in a password field.

00:23:49.010 --> 00:23:50.460
Not a problem.

00:23:50.510 --> 00:23:53.690
One of the very neat things about
WebObjects development is-- let

00:23:53.690 --> 00:23:58.380
me minimize that-- is that a
lot of it is not compiled code.

00:23:58.470 --> 00:24:01.920
For example,
our HTML template is not compiled.

00:24:02.050 --> 00:24:05.210
So we can come into WebObjects Builder,
select something, and inspect it.

00:24:05.370 --> 00:24:10.730
And a text field, well,
an inspector has all of the attributes

00:24:11.060 --> 00:24:14.560
that you have set or not set,
and all of the bindings.

00:24:14.710 --> 00:24:18.860
We can switch to a static inspector,
and in this case, turn our text field

00:24:18.860 --> 00:24:20.640
into a password field.

00:24:20.730 --> 00:24:22.880
And let's say we want to
change the Submit button so

00:24:22.880 --> 00:24:25.360
that its label says Log In.

00:24:25.500 --> 00:24:27.700
Well, in 4.5,
we can double click on an item

00:24:27.700 --> 00:24:30.360
to have the inspector show up.

00:24:30.760 --> 00:24:33.890
And we'll change the value.

00:24:34.190 --> 00:24:36.160
to login.

00:24:36.160 --> 00:24:40.000
We can type in a literal value
instead of having it go to get

00:24:40.000 --> 00:24:42.990
some method or some variable.

00:24:43.350 --> 00:24:48.510
I would just save our change,
minimize main, and when I refresh,

00:24:48.520 --> 00:24:52.700
it automatically updates,
which is pretty nifty.

00:24:52.700 --> 00:24:52.700
Password.

00:24:54.010 --> 00:24:57.250
And we're welcoming Fred.

00:24:57.260 --> 00:25:00.360
Now, let's just take a moment.

00:25:01.270 --> 00:25:07.810
To go through blah blah blah
that request response loop.

00:25:08.600 --> 00:25:13.230
So, as soon as I click this return
button and that URL comes in,

00:25:13.340 --> 00:25:18.330
we make a new session, main is created,
main is sent to Pender Response,

00:25:18.330 --> 00:25:20.110
it generates its HTML.

00:25:22.810 --> 00:25:25.890
We put in a value, login.

00:25:26.100 --> 00:25:28.550
As soon as we hit login,
that request comes in.

00:25:28.870 --> 00:25:32.700
The username and password are
pulled out of the incoming request.

00:25:32.750 --> 00:25:34.650
Our login method is executed.

00:25:34.730 --> 00:25:37.690
It creates a welcome page,
passes the name along,

00:25:37.690 --> 00:25:39.610
and returns it in that final phase.

00:25:39.760 --> 00:25:45.170
We're now done with main,
and the welcome page starts its

00:25:45.170 --> 00:25:51.700
interaction by generating its HTML,
and we get a dynamic page.

00:25:52.280 --> 00:25:56.260
Any questions?

00:25:59.670 --> 00:26:01.280
Let's go back to main.

00:26:01.400 --> 00:26:04.560
Steve showed you this yesterday,
but some of you might not have been here.

00:26:04.690 --> 00:26:09.580
We can switch from a nice
GUI editor to raw text mode.

00:26:10.250 --> 00:26:15.700
The HTML is just plain stock HTML with
the addition of a WebObject tag.

00:26:15.700 --> 00:26:21.410
One additional tag that says, "Hey,
something dynamic is going to go here."

00:26:22.170 --> 00:26:24.330
WebObjects Builder:
A WebObject tag is one

00:26:24.330 --> 00:26:29.260
attribute which is a name,
a unique name, and that name maps to an

00:26:29.330 --> 00:26:34.100
entry in this second file,
this bindings file, where we find out,

00:26:34.100 --> 00:26:37.090
hey, that WebObject tag,
what kind of thing is it?

00:26:37.100 --> 00:26:38.100
Is it a form?

00:26:38.100 --> 00:26:40.100
Is it a dynamic submit button?

00:26:40.250 --> 00:26:44.460
And also, all of those attributes that
you saw in the inspector,

00:26:44.460 --> 00:26:48.540
they are all present here,
so that that dynamic element knows

00:26:48.860 --> 00:26:52.080
where to get its information or
where to put information at right.

00:26:52.100 --> 00:26:53.100
So, that's the runtime.

00:26:53.140 --> 00:26:55.030
Okay, done with the demo.

00:26:55.200 --> 00:26:57.490
Let's go back to the slides.

00:27:02.280 --> 00:27:07.600
If you understand that,
if going through those three phases

00:27:07.730 --> 00:27:12.190
by now bores the dickens out of you,
then that's good.

00:27:12.190 --> 00:27:14.990
That means you're well on your
way to becoming an excellent

00:27:14.990 --> 00:27:18.200
WebObjects programmer because
that's what's going on.

00:27:18.200 --> 00:27:20.200
That's pretty much it.

00:27:20.380 --> 00:27:23.200
There's additional stuff
that hangs off of that,

00:27:23.200 --> 00:27:27.190
but that's the whole
shebang for the web side.

00:27:27.200 --> 00:27:32.200
The next session is going to be
talking about the database side.

00:27:32.370 --> 00:27:35.200
So if it's in your head, beautiful.

00:27:35.380 --> 00:27:38.780
However, you might be saying, well,
first of all, let's talk about the stuff

00:27:38.860 --> 00:27:40.200
we didn't have to do.

00:27:40.270 --> 00:27:43.110
We didn't have to do anything,
if you noticed, to get all that to work.

00:27:43.200 --> 00:27:46.200
We could take what we just built,
if we wanted to,

00:27:46.320 --> 00:27:49.810
deploy it on a whole bunch of
16 processor Solaris boxes,

00:27:49.890 --> 00:27:53.410
and let millions of people show
up and type in their name and

00:27:53.410 --> 00:27:56.400
have a page come back that says,
"Welcome."

00:27:56.930 --> 00:28:00.080
It wouldn't be terribly exciting,
but we could.

00:28:00.080 --> 00:28:01.400
We didn't have to do a whole lot.

00:28:01.400 --> 00:28:02.840
We didn't have to touch the request.

00:28:02.840 --> 00:28:03.800
We didn't have to touch the response.

00:28:03.800 --> 00:28:07.800
We didn't have to parse the form values.

00:28:07.800 --> 00:28:11.530
All of that just happened for
us because that's the stuff that

00:28:11.660 --> 00:28:13.660
you have to do every single time.

00:28:13.980 --> 00:28:16.580
That's the stuff that,
who wants to be bothered?

00:28:16.800 --> 00:28:21.180
So WebObjects takes care of that
so you can write the cool stuff,

00:28:21.180 --> 00:28:25.800
the logic, the application logic,
the business logic that makes your

00:28:25.800 --> 00:28:29.800
WebObjects application useful,
unlike the application I just wrote,

00:28:29.800 --> 00:28:35.130
and also gives value to
whoever's going to be using it.

00:28:35.400 --> 00:28:37.950
However,
we're going to dig one layer deeper and

00:28:37.950 --> 00:28:40.190
talk about what's really going on here.

00:28:40.390 --> 00:28:42.390
How does it do all that?

00:28:42.960 --> 00:28:45.910
Well, I showed you those two other files.

00:28:45.910 --> 00:28:49.640
We know there's a Java file
that defines the object,

00:28:49.640 --> 00:28:54.090
but there are these two other files:
an HTML file and a WAD file,

00:28:54.090 --> 00:28:55.360
as it's called.

00:28:55.360 --> 00:28:58.400
I always find that just
a weird word to say,

00:28:58.400 --> 00:29:00.810
"Wad file." Everybody say it.

00:29:00.850 --> 00:29:01.690
WAD file.

00:29:01.690 --> 00:29:02.610
Say it loud.

00:29:02.690 --> 00:29:03.510
WAD file.

00:29:03.510 --> 00:29:04.690
Say it louder.

00:29:04.700 --> 00:29:05.560
WAD file.

00:29:05.560 --> 00:29:07.110
Even louder.

00:29:07.900 --> 00:30:09.100
[Transcript missing]

00:30:09.740 --> 00:30:12.920
So when we're generating
HTML and append to response,

00:30:13.020 --> 00:30:13.830
what's going on?

00:30:13.840 --> 00:30:17.080
Well, the component has this template.

00:30:17.080 --> 00:30:20.660
And when the component is told, hey,
append to the response, well,

00:30:20.730 --> 00:30:23.600
the component says, well,
I don't know what to do.

00:30:23.600 --> 00:30:25.810
Hey, template, append to the response.

00:30:25.840 --> 00:30:27.900
And it goes through,
and the static stuff gets

00:30:28.030 --> 00:30:29.260
popped into the response.

00:30:29.300 --> 00:30:32.870
Then the woe string is told, hey,
append your stuff to the response.

00:30:32.970 --> 00:30:34.990
And the woe string is like, well,
what am I?

00:30:35.070 --> 00:30:36.710
Oh, I've got to figure out what
I'm going to put in here,

00:30:36.710 --> 00:30:37.110
I guess.

00:30:37.200 --> 00:30:38.580
And it does its thing.

00:30:38.970 --> 00:30:41.540
And then there's more static
stuff that just gets thrown

00:30:41.540 --> 00:30:42.740
in because it's not dynamic.

00:30:42.740 --> 00:30:45.450
Then the hyperlink is told
to append to the response,

00:30:45.540 --> 00:30:48.340
and it has to figure out
what URL it's going to use,

00:30:48.770 --> 00:30:51.020
and so on down the page.

00:30:51.020 --> 00:30:55.660
So every dynamic element gets
its shot at appending its little

00:30:55.660 --> 00:30:57.650
chunk of HTML into the response.

00:30:59.860 --> 00:31:02.990
Let me go back one.

00:31:03.050 --> 00:31:08.030
Just a note, each of these items,
when it builds this nice little template,

00:31:08.030 --> 00:31:10.740
has a unique element ID.

00:31:10.790 --> 00:31:15.870
So whenever a hyperlink, for example,
generates the URL that

00:31:15.980 --> 00:31:18.670
you're going to click on,
that element ID is in there.

00:31:18.840 --> 00:31:21.800
So it can tell, oh,
I was the thing that was clicked on.

00:31:22.000 --> 00:31:26.160
And whenever a text field is generated,
it has a little name attribute

00:31:26.160 --> 00:31:27.660
that is the element ID.

00:31:27.950 --> 00:31:31.800
So it can look into the request and say,
oh, that's my value.

00:31:31.800 --> 00:31:35.060
No real magic going on.

00:31:35.550 --> 00:31:38.240
Appender response,
when it's sent to a woe string, it says,

00:31:38.300 --> 00:31:39.300
oh, OK.

00:31:39.300 --> 00:31:43.410
Well, I belong to a component,
and a dynamic element without

00:31:43.410 --> 00:31:46.560
a component is useless,
utterly useless.

00:31:46.580 --> 00:31:48.110
They work together.

00:31:48.120 --> 00:31:50.800
So when a woe string is
sent to appender response,

00:31:50.890 --> 00:31:54.700
it consults its bindings, says, oh,
my value is hooked up to username.

00:31:54.700 --> 00:31:58.800
Let me ask my component,
what's the value for username?

00:31:58.800 --> 00:32:01.470
And the component gives back the answer.

00:32:02.020 --> 00:32:04.100
In this case, Fred, the woe string goes,
oh,

00:32:04.100 --> 00:32:05.820
now I know what to generate in the HTML.

00:32:08.410 --> 00:32:13.730
That happens for every
single item in the template.

00:32:13.920 --> 00:32:18.920
If there were 18 bindings,
it would go and ask 18 different times.

00:32:18.920 --> 00:32:23.100
For taking values from the request,
when the component is

00:32:23.100 --> 00:32:26.170
asked to take values,
it just turns to its template of

00:32:26.210 --> 00:32:29.940
dynamic elements and asks them
to take values from the request.

00:32:29.940 --> 00:32:32.120
Of course,
only in this case the text fields

00:32:32.290 --> 00:32:34.280
are going to find something there.

00:32:34.280 --> 00:32:36.900
So what's going on?

00:32:36.900 --> 00:32:38.760
Well, we have our components.

00:32:38.760 --> 00:32:42.660
To start off with,
the username and password have no value.

00:32:42.660 --> 00:32:45.250
And in comes a request.

00:32:46.010 --> 00:32:49.040
Books in,
takes that value Fred out of the request,

00:32:49.040 --> 00:32:52.680
consults its bindings, "Oh,
my value's hooked up to username.

00:32:52.850 --> 00:32:57.190
I'm going to tell my component, 'Hey,
take this value Fred for that

00:32:57.680 --> 00:33:00.900
key username and store it
there.'" And so it happens.

00:33:00.900 --> 00:33:05.300
And that happens for every form value.

00:33:05.390 --> 00:33:07.460
That's all that's going on.

00:33:08.050 --> 00:33:10.300
And then finally, invoke action.

00:33:10.330 --> 00:33:13.850
In this case,
we know the submit button was clicked.

00:33:13.980 --> 00:33:14.810
How does that work?

00:33:14.940 --> 00:33:17.290
Well, the request comes in.

00:33:17.900 --> 00:33:21.560
We have a component with
some action methods defined,

00:33:21.720 --> 00:33:23.040
in this case login.

00:33:23.110 --> 00:33:28.230
It reads in that URL,
it's what flew by real quick.

00:33:28.230 --> 00:33:28.230
Let's do that again, this is fast.

00:33:28.720 --> 00:33:31.640
consults that, says, "Oh,
my action's hooked up to login.

00:33:31.730 --> 00:33:37.400
I'll send my component login." And then
the component executes that method.

00:33:37.470 --> 00:33:39.400
Let's execute it again.

00:33:39.470 --> 00:33:41.970
Do you know how long
that takes in PowerPoint?

00:33:42.070 --> 00:33:43.440
That's a real pain to do.

00:33:43.610 --> 00:33:45.360
Do it one more time.

00:33:46.570 --> 00:33:47.950
I just love that.

00:33:47.950 --> 00:33:50.030
That's what's going on in WebObjects.

00:33:50.220 --> 00:33:51.500
That's it, actually.

00:33:51.960 --> 00:33:56.040
There's a couple other
details I'm leaving out,

00:33:56.140 --> 00:33:59.020
but this is the absolute core.

00:33:59.470 --> 00:34:02.860
The absolute core of what's going
on in every WebObjects application.

00:34:03.080 --> 00:34:05.890
If you have this firm in your head,

00:34:06.090 --> 00:34:07.500
You're pretty much good to go.

00:34:07.500 --> 00:34:08.500
You're on the right track.

00:34:08.500 --> 00:34:13.870
You can go downstairs to the lab
if you're brand new to WebObjects

00:34:14.000 --> 00:34:17.900
and start building the little
pup that I just started building.

00:34:17.980 --> 00:34:23.590
Now, two points that I want to make,
and those two points are this.

00:34:23.940 --> 00:34:28.100
It's kind of interesting that we can
get to a dynamic element can get to

00:34:28.130 --> 00:34:34.260
that information in the component,
but we have this thing called a session.

00:34:34.260 --> 00:34:38.580
And it's kind of odd that if
main needs the username and the

00:34:38.580 --> 00:34:42.830
welcome page needs the username,
that we have to write all this

00:34:42.830 --> 00:34:44.800
code to pass it from page to page.

00:34:44.800 --> 00:34:49.050
What if like eight components
needed to get to the username?

00:34:49.050 --> 00:34:53.080
Well, we might instead stick
it up in the session.

00:34:53.080 --> 00:34:55.320
And every component
can get to its session,

00:34:55.360 --> 00:34:58.660
and every component,
and then in the session we could

00:34:58.660 --> 00:35:02.220
store it in one place for each user.

00:35:02.220 --> 00:35:03.620
Now how would we hook that up?

00:35:03.620 --> 00:35:06.000
Well,
what's very nice is we have something

00:35:06.030 --> 00:35:08.590
in WebObjects called a key path.

00:35:08.590 --> 00:35:13.520
If you recall before, right,
if value was hooked up to username,

00:35:13.520 --> 00:35:17.380
it would ask its component, hey,
what's your username?

00:35:17.380 --> 00:35:19.270
And it would get back a value.

00:35:19.570 --> 00:35:23.360
Well, we have this dot separated path,
and so when this woe string

00:35:23.360 --> 00:35:26.250
needs to find its value,
it asks its component, hey,

00:35:26.260 --> 00:35:27.640
what's your session?

00:35:27.660 --> 00:35:29.300
What's your value for session?

00:35:29.300 --> 00:35:31.330
Then it asks the object
that gets passed back,

00:35:31.430 --> 00:35:34.180
hey, what's your value for username?

00:35:34.180 --> 00:35:37.840
It gets back the value, and voila.

00:35:38.420 --> 00:35:39.620
Kind of nifty.

00:35:39.660 --> 00:35:42.480
Those paths always start
with the component,

00:35:42.670 --> 00:35:43.660
however.

00:35:43.660 --> 00:35:46.830
But let's go one step further,
because a username is not a very

00:35:46.830 --> 00:35:48.300
useful piece of information.

00:35:48.300 --> 00:35:55.030
A username, actually, most websites,
my username is like JD17234,

00:35:55.310 --> 00:35:57.750
because all the good ones were taken.

00:36:03.870 --> 00:36:03.870
Does anybody have a good, nobody does.

00:36:03.870 --> 00:36:03.870
There's like one James and that's it.

00:36:04.160 --> 00:36:11.100
Welcome JD 1472.

00:36:11.100 --> 00:36:11.100
Here are the last five
purchases from our site.

00:36:11.100 --> 00:36:14.980
We want to group things together.

00:36:14.980 --> 00:36:18.240
So in the database I might have
a row that has the username,

00:36:18.240 --> 00:36:21.610
maybe their password,
maybe it's encrypted, a first name,

00:36:21.670 --> 00:36:25.130
a last name, an email address,
maybe a relationship to

00:36:25.130 --> 00:36:29.900
the last five purchases,
favorite color, all that good stuff.

00:36:30.390 --> 00:36:32.970
Using the database chunk
that's in the next section,

00:36:32.970 --> 00:36:35.700
we can take that row in the database,
turn it into,

00:36:36.010 --> 00:36:42.120
in this case maybe a customer object,
and store a customer in the session.

00:36:42.120 --> 00:36:44.400
And a customer is going to
have different properties.

00:36:44.400 --> 00:36:47.680
In this case we're going to
use first name as the example.

00:36:47.680 --> 00:36:49.470
And to hook this up,
we're going to use the

00:36:49.910 --> 00:36:52.200
Just a longer key path.

00:36:52.340 --> 00:36:53.960
Just kind of whisper down the chain.

00:36:53.960 --> 00:36:56.750
This is seven degrees of Kevin Bacon,
is what I call this.

00:36:56.850 --> 00:36:58.800
Because it's the same exact thing.

00:36:58.800 --> 00:37:03.490
It's like, I'm at the component,
what key path do I need to

00:37:03.490 --> 00:37:05.800
get to the information I need?

00:37:05.800 --> 00:37:08.640
And this time around,
it's just going to ask, hey, component,

00:37:08.650 --> 00:37:09.800
what's your session?

00:37:09.800 --> 00:37:11.910
Hey, what's your customer?

00:37:12.260 --> 00:37:13.590
What's your first name?

00:37:13.800 --> 00:37:15.800
And then get back the answer.

00:37:15.800 --> 00:37:17.850
This can be arbitrarily long.

00:37:17.850 --> 00:37:21.600
Like I've seen them eight, nine,
they just go on forever.

00:37:21.700 --> 00:37:25.800
The important thing to realize,
two points, is that each of those things,

00:37:25.800 --> 00:37:29.680
all the codes you wrote,
you put in an instance variable.

00:37:30.000 --> 00:37:32.360
That's all you put in,
was one instance variable

00:37:32.360 --> 00:37:33.790
to hold the next object.

00:37:33.790 --> 00:37:36.090
You don't have any,
all this accessor code where

00:37:36.090 --> 00:37:38.800
you have to pull the customer
name into the component.

00:37:38.800 --> 00:37:44.800
And the other neat thing is that
this path is not compiled at all.

00:37:44.800 --> 00:37:45.800
It's in that binding.

00:37:45.800 --> 00:37:49.760
file and we saw that if I make a change,

00:37:50.090 --> 00:38:03.620
that I just refresh.

00:38:03.620 --> 00:38:03.620
I don't have to restart the app,
let alone recompile it.

00:38:03.620 --> 00:38:03.620
And so if I want that string
to hook up to last name,

00:38:03.620 --> 00:38:03.620
I just change that to
session.customer.lastname,

00:38:03.620 --> 00:38:03.630
refresh the page,
and then I can go back to the page.

00:38:03.930 --> 00:38:09.130
And suddenly I've made a major UI change
with very little work on my part.

00:38:09.280 --> 00:38:13.270
Very little risk as a developer.

00:38:14.330 --> 00:38:18.230
And now I want to say any questions,
but I'm not going to.

00:38:18.240 --> 00:38:19.070
I think I just did.

00:38:19.120 --> 00:38:20.860
Oh, I'm hitting the back button.

00:38:20.960 --> 00:38:23.200
How scary.

00:38:23.450 --> 00:38:24.980
There we go.

00:38:26.000 --> 00:38:27.200
We're going to do a demo.

00:38:27.200 --> 00:38:31.200
What we're going to do is twofold.

00:38:31.200 --> 00:38:34.990
We're going to implement a little
password checking logic and have

00:38:34.990 --> 00:38:39.000
an error message pop up if the
person types in the wrong password.

00:38:39.060 --> 00:38:41.580
Then when we're done that,
get that working,

00:38:41.780 --> 00:38:45.320
we're actually going to hit the
database based on the username,

00:38:45.420 --> 00:38:48.770
fetch the right customer object,
stick it in the session,

00:38:48.770 --> 00:38:53.130
and on the next page, the welcome page,
reach into the session and pull down

00:38:53.130 --> 00:38:55.710
their first and last name and display it.

00:38:59.180 --> 00:39:00.490
Let's type in an error message.

00:39:00.570 --> 00:39:03.940
First let's make it nice and big.

00:39:03.940 --> 00:39:06.010
You have...

00:39:15.010 --> 00:39:19.800
That is not recommended
Apple UI guidelines.

00:39:19.930 --> 00:39:21.940
However,
haven't you all wanted to put that at one

00:39:21.940 --> 00:39:24.300
point or another somewhere in your app?

00:39:25.330 --> 00:39:26.060
You can applaud.

00:39:26.280 --> 00:39:26.660
I don't mind.

00:39:26.850 --> 00:39:28.060
I got extra time.

00:39:28.100 --> 00:39:29.730
Okay.

00:39:29.870 --> 00:39:32.340
And then we need, this is, oh,
what did I just do?

00:39:32.340 --> 00:39:34.500
How about I explain what
I'm doing in the demo?

00:39:34.560 --> 00:39:36.690
That might be nice.

00:39:36.970 --> 00:39:38.040
That would be a good thing.

00:39:38.080 --> 00:39:40.200
I'm adding something
called a conditional.

00:39:40.260 --> 00:39:45.090
A conditional is an if
statement in your HTML.

00:39:45.820 --> 00:39:50.860
And it needs a Boolean to determine
whether to show or hide what's in there.

00:39:50.970 --> 00:39:53.510
Well, we don't want everybody
getting this rude message,

00:39:53.650 --> 00:39:55.420
so we're going to add a Boolean.

00:39:55.540 --> 00:39:58.790
We'll call it a login error.

00:39:58.880 --> 00:39:59.800
We type Boolean.

00:39:59.920 --> 00:40:01.800
We only need an instance variable.

00:40:01.800 --> 00:40:05.890
And we just wire that
up to the conditional.

00:40:06.160 --> 00:40:07.210
will save.

00:40:07.310 --> 00:40:09.260
That's all we need to do to our UI.

00:40:09.390 --> 00:40:10.740
Let's go to the source.

00:40:10.790 --> 00:40:14.160
We actually have to write a
little conditional logic here.

00:40:14.160 --> 00:40:18.180
So, matter of fact,
I have an extra moment.

00:40:18.180 --> 00:40:23.510
It's actually, where am I?

00:40:23.510 --> 00:40:26.140
There it is.

00:40:26.140 --> 00:40:26.140
No, that's not what I want.

00:40:26.140 --> 00:40:31.460
There are many,
many wonderful preferences

00:40:31.460 --> 00:40:32.810
in Project Builder Woe.

00:40:33.040 --> 00:40:37.040
Okay, let's just bump up that size.

00:40:37.040 --> 00:40:39.310
Set it.

00:40:45.310 --> 00:40:51.890
The first thing we're going to
do is apply the syntax coloring.

00:40:52.530 --> 00:40:54.600
Okay, so here we go.

00:40:54.650 --> 00:40:56.700
Easier to see the code.

00:40:56.700 --> 00:40:59.670
So the first thing we're going to
do is the next page by default,

00:40:59.670 --> 00:41:03.360
if they don't type in the wrong password,
we don't want to let them see our

00:41:03.360 --> 00:41:08.220
super secure welcome page with
all that sensitive information.

00:41:08.220 --> 00:41:10.720
So we're just going to
return null by default.

00:41:10.720 --> 00:41:14.730
And then our elaborate
password checking scheme,

00:41:14.730 --> 00:41:20.400
if the password they typed in
equals the string password.

00:41:22.000 --> 00:41:29.000
[Transcript missing]

00:41:31.800 --> 00:41:35.150
The actual new page.

00:41:35.150 --> 00:41:38.140
And we're going to send that
information along to the next page,

00:41:38.140 --> 00:41:38.800
the user's name.

00:41:38.800 --> 00:41:44.190
Else, if they screwed up and
typed in the wrong password,

00:41:44.190 --> 00:41:48.690
login error,
we're going to set that to true.

00:41:49.920 --> 00:41:51.180
We'll build this.

00:41:51.180 --> 00:41:53.820
Notice that what we're doing
is taking some conditional

00:41:53.820 --> 00:41:57.590
action in that action method,
because you don't have to return

00:41:57.590 --> 00:41:58.900
one component all the time.

00:41:58.900 --> 00:42:00.710
It's your code.

00:42:00.990 --> 00:42:03.770
You can return whatever
the heck you want.

00:42:05.250 --> 00:42:06.100
Let's go to OmniWeb.

00:42:06.140 --> 00:42:07.400
Let's log in.

00:42:07.670 --> 00:42:09.100
Fred will log in.

00:42:09.320 --> 00:42:12.010
He won't type in the right password.

00:42:12.560 --> 00:42:17.070
and now he feels really terrible
because he's an idiot okay so

00:42:17.190 --> 00:42:21.710
fred if there any friends in the
audience i very much apologize i

00:42:22.350 --> 00:42:23.500
You're not an idiot.

00:42:23.560 --> 00:42:24.940
This is a hypothetical, Fred.

00:42:25.980 --> 00:42:29.110
And if he types in the
correct password...

00:42:31.760 --> 00:42:33.050
Login.

00:42:33.050 --> 00:42:33.540
There we go.

00:42:33.580 --> 00:42:35.930
Wonderful.

00:42:36.160 --> 00:42:38.280
Next step, hitting the database.

00:42:38.380 --> 00:42:42.510
So, let's actually minimize
some of these windows.

00:42:49.330 --> 00:42:56.300
Now we need to be able
to hook up to a database.

00:42:56.470 --> 00:42:58.300
All will be explained
in the next session,

00:42:58.300 --> 00:43:01.300
but for now, none will be explained.

00:43:01.340 --> 00:43:04.210
We add something called a model file.

00:43:04.670 --> 00:43:08.500
which is built with EOModeler,
the topic of the next session.

00:43:08.550 --> 00:43:11.140
And we're going to build,
or we're going to add a customer.java

00:43:11.270 --> 00:43:15.420
file which is generated from EOModeler,
which is covered in the next section.

00:43:15.510 --> 00:43:18.860
So if you're curious,
go to the next section.

00:43:20.600 --> 00:43:24.560
All right, web components, resources,
put everything in the right place,

00:43:24.660 --> 00:43:25.600
that's very good.

00:43:25.770 --> 00:43:27.590
Now, all that we're going to do is this.

00:43:27.590 --> 00:43:30.900
We're going to first...

00:43:38.970 --> 00:43:39.970
Change this.

00:43:39.970 --> 00:43:42.480
We no longer need the username here.

00:43:42.480 --> 00:43:44.900
Very nice new feature in
WebObjects Builder now.

00:43:44.980 --> 00:43:47.360
In addition to adding
stuff to your source code,

00:43:47.360 --> 00:43:48.900
you can actually delete it.

00:43:48.950 --> 00:43:50.900
So we're going to delete the username.

00:43:50.900 --> 00:43:58.450
It also is going to check to make sure
that these bindings that you have set,

00:43:58.450 --> 00:43:59.700
do you want to unbind them or ignore it?

00:43:59.700 --> 00:43:59.700
Well, we're going to unbind.

00:43:59.890 --> 00:44:03.500
So it keeps you from having
errors due to binding.

00:44:03.650 --> 00:44:05.940
We'll add a second string.

00:44:06.240 --> 00:44:10.420
Now another nifty thing in WebObjects
Builder 4.5 is when I click on

00:44:10.420 --> 00:44:14.220
an item in the first column,
the second column is now a

00:44:14.220 --> 00:44:17.100
representation of that particular class.

00:44:17.100 --> 00:44:21.100
And actually if I have source code to it,
I can even add stuff.

00:44:21.100 --> 00:44:23.100
So I can add stuff to the session.

00:44:23.100 --> 00:44:24.830
It's a contextual menu.

00:44:25.170 --> 00:44:27.100
I'll add a key to the session.

00:44:27.120 --> 00:44:29.990
I'll call it customer of type customer.

00:44:30.090 --> 00:44:33.100
Let's have methods to
get and set as well,

00:44:33.100 --> 00:44:36.080
which adds a customer
from that customer class.

00:44:36.100 --> 00:44:38.240
It knows all the stuff
that's in a customer,

00:44:38.400 --> 00:44:43.100
so we can display the first and last
name of a customer just like that.

00:44:43.230 --> 00:44:46.100
Now let's, actually we'll minimize that.

00:44:46.100 --> 00:44:48.770
Who turned on window shading?

00:44:48.810 --> 00:44:50.170
I had the other behavior set.

00:44:50.180 --> 00:44:51.100
Okay.

00:44:51.100 --> 00:44:53.010
Now let's edit this pup.

00:44:53.170 --> 00:44:57.700
Login.

00:44:58.890 --> 00:44:58.890
So when they login, we want to fetch.

00:44:59.680 --> 00:45:02.920
There is a, actually,
we're going to fetch a customer.

00:45:02.960 --> 00:45:05.380
We'll call it customer
as our local variable.

00:45:05.450 --> 00:45:10.080
And in Java, we're going to typecast what
comes back as a customer.

00:45:10.140 --> 00:45:14.580
We are going to use an EOUtility,
which is a very quick one line

00:45:14.580 --> 00:45:16.560
way to fetch in WebObjects.

00:45:16.610 --> 00:45:22.040
EOUtilities can't talk one
thing and type another thing.

00:45:22.100 --> 00:45:27.560
We're going to go ask for the
object matching key and value.

00:45:28.160 --> 00:45:34.710
In WebObjects, in your application,
every session by default

00:45:34.850 --> 00:45:38.210
has this place where you can
edit and fetch objects from the

00:45:38.210 --> 00:45:40.760
database called an editing context.

00:45:40.900 --> 00:45:44.480
So we're going to use
that to perform our fetch.

00:45:44.540 --> 00:45:47.390
The thing that we're going to be fetching

00:45:48.180 --> 00:45:55.100
Our customers are going to be looking
up customers based on their username.

00:45:55.100 --> 00:45:59.160
The actual thing that we're
going to look up on is what

00:45:59.420 --> 00:46:03.380
the user typed in for username.

00:46:03.380 --> 00:46:07.290
That line is going to
go get us a customer.

00:46:09.800 --> 00:46:10.700
Do I need it?

00:46:10.700 --> 00:46:11.690
Oh, you're right.

00:46:11.970 --> 00:46:13.510
Thank you, Mr.

00:46:13.510 --> 00:46:14.880
Compiler.

00:46:17.910 --> 00:46:19.600
No, because that's how I code.

00:46:19.600 --> 00:46:23.660
I let the compiler deal with
those because it's good at it.

00:46:23.660 --> 00:46:24.900
Better than I am, apparently.

00:46:24.900 --> 00:46:25.900
So here we go.

00:46:25.900 --> 00:46:27.050
Customer.

00:46:27.050 --> 00:46:30.560
And now all we're going to do
is check if the customer... No,

00:46:30.650 --> 00:46:31.950
that's not what we're going to do.

00:46:32.220 --> 00:46:38.180
If the password that they typed in
equals the customer's password...

00:46:40.780 --> 00:46:43.970
Then we're not going
to pass anything along.

00:46:43.990 --> 00:46:47.410
We're just going to stick that
customer up in the session.

00:46:48.130 --> 00:46:55.340
So we'll access our session and tell
it to set its customer to customer.

00:46:55.470 --> 00:47:02.390
So in addition of one, two,
three lines of code, let's see how this

00:47:04.880 --> 00:47:07.200
This seed of a personalization
engine is working.

00:47:07.320 --> 00:47:10.160
So,
let's go back to our good friend Fred.

00:47:10.170 --> 00:47:11.800
He'll type in the wrong password.

00:47:11.800 --> 00:47:13.510
We don't let Fred in.

00:47:14.170 --> 00:47:16.790
He types in "whiskers,"
his correct password.

00:47:16.800 --> 00:47:21.300
And voila,
we have our personalization engine.

00:47:21.300 --> 00:47:23.990
Let's get another session going.

00:47:28.240 --> 00:47:29.500
Brand new session.

00:47:29.570 --> 00:47:33.760
This time it will be JD12345

00:47:38.500 --> 00:47:45.400
Let's type in the wrong password.

00:47:45.400 --> 00:47:45.400
Voila.

00:47:45.450 --> 00:47:48.520
And so we have two different sessions,
two different customer objects

00:47:48.750 --> 00:47:51.000
fetched from the database.

00:47:51.640 --> 00:47:53.840
And we didn't do a whole heck of a lot,
did we?

00:47:53.900 --> 00:47:58.590
I built that in, I don't know,
10 minutes, 15 minutes.

00:47:58.640 --> 00:48:01.600
Now is that production
code that I wrote there?

00:48:01.690 --> 00:48:03.830
No, we might want to check to
make sure that we actually got

00:48:03.830 --> 00:48:05.490
something back from the database.

00:48:05.490 --> 00:48:08.600
We might have encrypted passwords.

00:48:08.600 --> 00:48:12.480
Stop by the security session
later this week to find out more

00:48:12.580 --> 00:48:16.570
about security and login issues
with WebObjects or techniques.

00:48:17.980 --> 00:48:20.030
However, boy,
if you're going into a client,

00:48:20.030 --> 00:48:21.860
this is a nice prototype, right?

00:48:21.860 --> 00:48:24.600
You whip up very quickly,
so that's pretty groovy.

00:48:24.830 --> 00:48:29.100
Again, we did

00:48:29.360 --> 00:48:32.850
A fair share of stuff here in
a very short amount of time.

00:48:32.850 --> 00:48:35.810
And let's switch to the slides actually.

00:48:41.690 --> 00:48:44.640
We did it all without
doing all too much work.

00:48:44.870 --> 00:48:49.000
We added a couple instance variables,
added a couple accessor methods,

00:48:49.170 --> 00:48:53.060
we added one action method that
took some conditional action and

00:48:53.070 --> 00:48:54.900
did a little bit of checking.

00:48:55.040 --> 00:49:00.320
We set some things, we got some things,
and we did some mysterious database

00:49:00.320 --> 00:49:03.230
stuff which will be explained later.

00:49:05.340 --> 00:49:09.670
With that, what I'd like to do is,
now you have a good idea of

00:49:09.670 --> 00:49:12.900
what the heck is a component,
how does it interact

00:49:13.440 --> 00:49:17.200
with a dynamic element,
or its dynamic elements,

00:49:17.510 --> 00:49:23.170
how do these three files, this HTML file,
this WAD file, this Java file,

00:49:23.330 --> 00:49:25.840
how do they interact,
what's their relationship,

00:49:25.980 --> 00:49:30.600
how do they interact at runtime,
and how do they interact with each other?

00:49:30.880 --> 00:49:32.510
Where do I plug in my code?

00:49:32.740 --> 00:49:34.290
What are the things
I have to worry about?

00:49:34.430 --> 00:49:36.620
What don't I have to worry about?

00:49:37.000 --> 00:49:46.180
So at this time I'd like to
bring up Tom Naughton from

00:49:46.180 --> 00:49:50.290
the WebObjects Builder team,
who's going to talk a little

00:49:50.290 --> 00:49:53.980
bit about new features in 4.5.

00:49:56.900 --> 00:49:57.900
Thanks.

00:49:57.900 --> 00:50:03.850
I think my leg has gone to sleep,
so if I fall over, don't mind me.

00:50:03.900 --> 00:50:07.900
Anyway, I'm going to talk a little
bit about the new features.

00:50:08.050 --> 00:50:10.730
The goals in 4.0, first of all,
how many people have

00:50:10.730 --> 00:50:12.700
used the new 4.5 builder?

00:50:12.800 --> 00:55:15.500
[Transcript missing]

00:55:16.710 --> 00:55:17.520
Syntax coloring.

00:55:17.520 --> 00:55:19.830
Previous versions didn't
have syntax coloring,

00:55:19.830 --> 00:55:21.900
but we didn't just want to
add it to make it pretty.

00:55:21.900 --> 00:55:23.290
We wanted to actually make it useful.

00:55:23.290 --> 00:55:26.510
So it's actually kind of
smart syntax coloring.

00:55:26.510 --> 00:55:30.720
It'll show lots of times when
people edit HTML by hand,

00:55:30.720 --> 00:55:33.940
they'll introduce errors,
like mismatched tags and such.

00:55:33.940 --> 00:55:36.390
So the syntax coloring
actually shows you the errors.

00:55:36.530 --> 00:55:39.730
Whenever the tokenizer runs into
something that it doesn't like to parse,

00:55:39.730 --> 00:55:42.620
it'll make that token red.

00:55:42.620 --> 00:55:45.360
And if you, let's see,
add an extra closing tag that

00:55:45.410 --> 00:55:48.640
doesn't match an open tag,
it'll draw that in red.

00:55:48.640 --> 00:55:50.090
So basically you can
just look at your page,

00:55:50.140 --> 00:55:54.930
you can see that tags are unbalanced,
and you can easily fix the errors.

00:55:55.150 --> 00:55:57.160
Improved Binding User Interface.

00:55:57.220 --> 00:56:00.000
Let's see,
people liked the way you can just drag

00:56:00.000 --> 00:56:02.780
connect your bindings in the builder,
but in previous versions

00:56:02.780 --> 00:56:04.910
you'd have to drag up,
select the element,

00:56:04.910 --> 00:56:07.530
and then go over to the inspector
and actually click which

00:56:07.530 --> 00:56:09.000
binding you want to bind to.

00:56:09.000 --> 00:56:11.500
So it was a little cumbersome.

00:56:11.500 --> 00:56:14.590
We made it, we changed it so it's,
you can do all that in one gesture.

00:56:14.600 --> 00:56:20.100
You just drag up, a menu pops down,
you choose the binding

00:56:20.100 --> 00:56:20.530
you want to connect to,
and it's all very fluid.

00:56:20.930 --> 00:56:22.490
Improve font tag support.

00:56:22.710 --> 00:56:26.510
The built-in font panel that you get
from the app kit is real convenient

00:56:26.600 --> 00:56:29.990
for picking one font but for HTML you
usually want to specify a list

00:56:29.990 --> 00:56:33.010
of fonts so that the browser can
use a different font if it doesn't

00:56:33.010 --> 00:56:34.680
have the one that you specified.

00:56:34.680 --> 00:56:37.360
So we added a font panel
custom-made for HTML.

00:56:37.710 --> 00:56:42.480
It saves all of your font preferences so
that you can use them again and again.

00:56:42.510 --> 00:56:43.750
Display options.

00:56:43.750 --> 00:56:49.160
Let's see, okay, one important thing we
added was a preview mode.

00:56:49.160 --> 00:56:52.060
We're always torn between do we want
to make the builder what you see is

00:56:52.060 --> 00:56:56.400
what you get or do we want to add
lots of convenient editing widgets.

00:56:56.400 --> 00:56:58.790
And by adding the preview mode
we can actually do it both ways.

00:56:58.840 --> 00:57:02.150
If you choose preview mode the builder
makes all of its rendering decisions

00:57:02.150 --> 00:57:04.750
in favor of making it look just
like it would look in the browser.

00:57:04.860 --> 00:57:08.030
If you choose editing mode it
shows you all of your bindings,

00:57:08.030 --> 00:57:11.380
it shows all the web objects
and the binding values on them.

00:57:11.380 --> 00:57:14.060
There are lots of
convenient editing features.

00:57:14.060 --> 00:57:16.020
You can also turn on the preview mode.

00:57:16.020 --> 00:57:18.550
You can also add options and preferences
so that it will show things that are

00:57:18.550 --> 00:57:23.020
otherwise hidden such as HTML comments
or JavaScript so that you can get

00:57:23.110 --> 00:57:26.870
a better view of what your page
actually looks like and then switch

00:57:26.870 --> 00:57:30.820
to preview mode and it will again
show like it looks in the browser.

00:57:30.820 --> 00:57:32.780
And we also added an API editor.

00:57:32.840 --> 00:57:36.300
We've had API files in previous
versions of the builder.

00:57:36.300 --> 00:57:41.440
It basically exports which bindings
are available for nested components.

00:57:41.440 --> 00:57:45.420
But previous versions of the
builder didn't use it very well.

00:57:45.420 --> 00:57:49.180
You had to edit the file by hand and
users didn't adopt them very well.

00:57:49.180 --> 00:57:54.260
So we actually added some UI to
make it easy to make the API files.

00:57:54.260 --> 00:57:56.850
And you can also add your own
binding validation rules just like

00:57:56.910 --> 00:57:58.800
the built-in validation rules.

00:57:58.800 --> 00:58:01.880
So it makes it a lot easier
to set up those files.

00:58:02.330 --> 00:58:04.090
Anyway, I guess James has a demo now.

00:58:04.090 --> 00:58:06.620
He's going to show some
of the new features.

00:58:07.200 --> 00:58:10.170
Alright, we're up to the... whoop,
do I need to click?

00:58:10.210 --> 00:58:16.090
Oh yes, because I have to put up the
very important demo slide.

00:58:16.230 --> 00:58:22.150
Okay, we got the two minute warning,
so let's fly on through this.

00:58:39.910 --> 00:58:39.910
So let's take a look at main again.

00:58:39.910 --> 00:58:39.910
And I'm just going to kind of
walk through some of the features

00:58:39.910 --> 00:58:39.910
that Tom had talked about.

00:58:39.910 --> 00:58:39.910
The first one being that
we can delete bindings.

00:58:40.690 --> 00:58:42.600
So, username is hooked up.

00:58:42.620 --> 00:58:45.200
We'll delete that.

00:58:45.200 --> 00:58:47.360
We'll also unbind.

00:58:47.360 --> 00:58:50.240
All well and good, but then I say, "Oh,
I didn't mean to do that.

00:58:50.290 --> 00:58:54.790
I got undo." And this undo is not
only going to re-hook up everything

00:58:55.160 --> 00:58:58.010
correctly in the bindings file,
but it's also going to put that thing

00:58:58.010 --> 00:58:59.600
back in my code in Project Builder.

00:58:59.600 --> 00:59:04.630
So, it's aware WebObjects Builder
is editing three files at once.

00:59:04.630 --> 00:59:08.550
This undo is actually
keeping those all up to date.

00:59:08.740 --> 00:59:11.540
Very nice new feature,
because I always make mistakes.

00:59:11.600 --> 00:59:12.600
I don't know about you all.

00:59:12.600 --> 00:59:13.510
Every once in a while.

00:59:13.600 --> 00:59:17.010
Contextual menus.

00:59:17.740 --> 00:59:19.590
We have them everywhere.

00:59:19.660 --> 00:59:21.300
Actually,
you'll see them as they come up.

00:59:21.340 --> 00:59:22.590
We're a little pressed for time.

00:59:22.920 --> 00:59:26.700
Let's add a new table,
take a look at the table panel.

00:59:26.730 --> 00:59:27.690
We open it up.

00:59:27.810 --> 00:59:30.720
We get to pick how many
columns and rows we want,

00:59:30.860 --> 00:59:31.630
border, etc.

00:59:31.840 --> 00:59:34.140
My favorite,
most handy thing is that your

00:59:34.200 --> 00:59:36.700
second row can be automatically
wrapped in a repetition,

00:59:36.700 --> 00:59:39.360
so you don't have to
select it and add one,

00:59:39.360 --> 00:59:41.700
because you're always
repeating lists of things.

00:59:41.850 --> 00:59:44.630
And your first row can be
automatically header cells.

00:59:44.700 --> 00:59:50.670
We're going to add just a plain 2x2,
and let's move our form elements

00:59:50.830 --> 00:59:53.980
in there to neaten things up a bit.

00:59:54.700 --> 00:59:56.690
Where am I?

00:59:56.810 --> 00:59:57.030
Help!

00:59:57.280 --> 00:59:57.700
Okay.

00:59:58.040 --> 01:00:01.350
We'll just re-hook that up.

01:00:02.080 --> 01:00:04.750
See, even when you totally screw up,
it's even easier in

01:00:04.750 --> 01:00:07.310
WebObjects Builder 4.5.

01:00:09.470 --> 01:00:12.980
I'm just demoing somebody
screwing up in WebObjects Builder

01:00:12.980 --> 01:00:14.740
4.5 and quickly recovering.

01:00:14.950 --> 01:00:16.690
So there we go.

01:00:16.900 --> 01:00:18.160
Well, open the inspector.

01:00:18.160 --> 01:00:21.490
We no longer have to switch
to some sort of--well,

01:00:21.490 --> 01:00:23.440
first, this is the path view.

01:00:23.560 --> 01:00:24.150
And it's very nice.

01:00:24.160 --> 01:00:25.370
I want to select the table.

01:00:25.570 --> 01:00:27.280
Bam, I've selected the table.

01:00:27.590 --> 01:00:28.640
Very easy.

01:00:28.780 --> 01:00:31.160
To edit the table,
I don't have to go to some

01:00:31.160 --> 01:00:32.790
structure editing mode.

01:00:32.790 --> 01:00:36.220
I just click in the inspector,
add a new row.

01:00:36.660 --> 01:00:39.390
Let's merge these cells together.

01:00:41.340 --> 01:00:45.890
Let's move the login panel
or the login button in there.

01:00:45.890 --> 01:00:50.720
That's wonderful new
stuff with the table view.

01:00:50.730 --> 01:00:50.730
On the palette,

01:00:51.710 --> 01:00:55.470
You have, well, Steve Hammond's leftover
palettes from yesterday,

01:00:55.520 --> 01:00:58.070
but also JavaScript palettes
that ship with the product,

01:00:58.180 --> 01:01:00.600
including image flyovers.

01:01:00.610 --> 01:01:02.600
We'll just throw one in there.

01:01:02.600 --> 01:01:06.210
Definitely check out these
JavaScript reusable components.

01:01:06.210 --> 01:01:07.460
They're very useful.

01:01:07.700 --> 01:01:09.600
And there's also validation.

01:01:09.600 --> 01:01:11.710
So you'll notice as
soon as I drag that in,

01:01:11.710 --> 01:01:15.600
this button came to life and told me
that something screwed up on my page.

01:01:15.600 --> 01:01:17.080
I have validation.

01:01:17.080 --> 01:01:22.600
I have some required bindings of this
image flyover that I have not hooked up.

01:01:22.610 --> 01:01:25.070
The other nifty thing is
if I click on the error,

01:01:25.070 --> 01:01:28.360
it automatically selects the
item that's having the problem.

01:01:28.660 --> 01:01:30.720
So if you have 18
hyperlinks on your page,

01:01:30.760 --> 01:01:32.440
you can jump right to the right one.

01:01:32.600 --> 01:01:38.250
So we're going to fix our validation
problems by deleting that.

01:01:40.190 --> 01:01:42.000
If the feature don't work, cut it.

01:01:42.100 --> 01:01:44.810
Let's close up the palette.

01:01:45.210 --> 01:01:49.100
Let's jump over and let's
look at this HTML editing.

01:01:49.100 --> 01:01:52.100
Nicest thing, well two things.

01:01:52.100 --> 01:01:55.100
One is, say we screw up our HTML somehow.

01:01:55.610 --> 01:01:59.100
Notice that this closing tag
has turned red to indicate

01:01:59.100 --> 01:02:01.100
that something has fouled up.

01:02:01.100 --> 01:02:05.100
And so it's doing error checking
that's very obvious in color.

01:02:05.100 --> 01:02:07.100
We also have a very nice feature.

01:02:07.100 --> 01:02:11.100
If I triple click, it'll select all the
way to the matching tag.

01:02:11.100 --> 01:02:15.120
So we double or triple click this table,
it'll select to the other

01:02:15.120 --> 01:02:16.100
end of the table tag.

01:02:16.300 --> 01:02:22.560
Even niftier, if I triple click and drag,
it'll select ever enclosing tags all

01:02:22.560 --> 01:02:27.650
the way up the page and all the way
back to where I originally clicked.

01:02:29.050 --> 01:02:30.540
Here's a nifty feature.

01:02:30.540 --> 01:02:33.660
Some folks like to put
comments in their WAD files.

01:02:33.710 --> 01:02:38.320
WebObjects Builder 4.0 is notorious for,
when you go into graphical mode,

01:02:38.360 --> 01:02:40.630
getting rid of your comments.

01:02:40.820 --> 01:02:45.700
Well, we can type in some comments,
switch back, switch back.

01:02:46.050 --> 01:02:47.700
They're still there.

01:02:47.700 --> 01:02:48.660
That's a very good thing.

01:02:48.750 --> 01:02:50.790
You can applaud that one.

01:02:52.120 --> 01:02:53.060
This is a golf game.

01:02:53.370 --> 01:02:55.830
Good.

01:02:56.240 --> 01:02:56.700
Thank you.

01:02:58.940 --> 01:03:01.960
Some other nifty things.

01:03:01.960 --> 01:03:06.180
In the inspector, say we want somebody to
type in a date into a field,

01:03:06.180 --> 01:03:07.770
we can put date formatters.

01:03:07.880 --> 01:03:08.700
That's always been there.

01:03:08.930 --> 01:03:11.800
But you had to remember
these formatting strings.

01:03:11.800 --> 01:03:16.160
Well, now there's a pop-up of common
formatting strings and examples for

01:03:16.160 --> 01:03:17.800
date formatting and number formatting.

01:03:17.800 --> 01:03:19.100
Makes life easier.

01:03:19.100 --> 01:03:23.080
That also is true of many types,
like Boolean types.

01:03:23.220 --> 01:03:26.660
If you're picking an action,
you get a list of all the actions in your

01:03:26.780 --> 01:03:32.540
component to choose from without having
to remember or type them in yourself.

01:03:32.880 --> 01:03:35.200
So those pop-ups are very nifty.

01:03:35.220 --> 01:03:39.310
And, oh, one of my favorites.

01:03:40.770 --> 01:03:42.680
It's always kind of hard,
or it's always been hard if

01:03:42.680 --> 01:03:46.500
you wanted to wrap a repetition
around two rows for some reason.

01:03:46.650 --> 01:03:50.360
Well,
there are a lot of these new display

01:03:50.900 --> 01:04:01.200
[Transcript missing]

01:04:01.800 --> 01:04:19.480
is very, very easy.

01:04:19.480 --> 01:04:19.480
Now you say, well,
that's great because I want to

01:04:19.480 --> 01:04:19.480
see how my table's laid out,
but this don't look like a table no more.

01:04:19.480 --> 01:04:19.480
Well, that's why preview mode was added.

01:04:19.480 --> 01:04:19.480
So it's going to look like rendered HTML,
whereas you can have all of

01:04:19.480 --> 01:04:19.490
your nice editing widgets.

01:04:20.200 --> 01:04:39.300
[Transcript missing]

01:04:43.570 --> 01:04:46.200
And to thank this man gave up a
lucrative career as a stand-up comedian

01:04:46.200 --> 01:04:47.590
just to become a WebObjects trainer.

01:04:47.600 --> 01:04:48.500
Thank you, James.

01:04:48.500 --> 01:04:51.870
We're going to start the Q&A now,
so we invite anyone in the overflow

01:04:51.870 --> 01:04:54.500
room who wants to come and ask
questions to come up and join us.

01:04:54.500 --> 01:04:58.070
Again, please try and use the microphones
in the aisles so that people getting

01:04:58.070 --> 01:05:02.490
interpretation and recordings will
be able to hear them appropriately.

01:05:02.500 --> 01:05:06.500
I also have the other presenters up here,
if we could, to help answer questions.

01:05:06.500 --> 01:05:07.500
Thank you very much.

01:05:07.500 --> 01:05:10.940
I also want to introduce Ben Haller
from the WebObjects Engineering team,

01:05:10.940 --> 01:05:12.500
who will be joining us as well.

01:05:12.500 --> 01:05:14.980
Ben Haller: Tom, the QA is left.

01:05:15.950 --> 01:05:17.060
Oh, do you want to mention
the roadmap real quick?

01:05:17.060 --> 01:05:18.160
Sure, let me answer that.

01:05:18.220 --> 01:05:19.460
All right, so roadmap.

01:05:19.620 --> 01:05:22.810
Next section is on the database chunk.

01:05:22.990 --> 01:05:26.480
Two sessions from now is deployment.

01:05:26.480 --> 01:05:28.780
You've built your app,
now what do you do with it?

01:05:28.780 --> 01:05:32.020
It covers the new deployment
architecture in 4.5.

01:05:32.020 --> 01:05:34.790
Later this week,
integrating client-side technologies,

01:05:34.790 --> 01:05:35.350
i.e.

01:05:35.350 --> 01:05:38.090
JavaScript and all sorts
of other nice stuff,

01:05:38.090 --> 01:05:40.300
Smile, QuickTime, Flash.

01:05:40.300 --> 01:05:42.020
Reusable components.

01:05:42.020 --> 01:05:44.460
Now we know what a component is,
let's make them so that we

01:05:44.460 --> 01:05:47.510
build them once and reuse
them in project after project.

01:05:47.510 --> 01:05:52.480
And I also did mention that security one,
which didn't fit on this slide.

01:05:52.510 --> 01:05:55.020
For more info,
there's that thing downstairs,

01:05:55.020 --> 01:05:56.410
the big lab.

01:05:56.560 --> 01:05:57.580
Check it out.

01:05:58.000 --> 01:06:20.000
[Transcript missing]