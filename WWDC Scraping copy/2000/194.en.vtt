WEBVTT

00:00:11.310 --> 00:00:14.060
Good afternoon ladies and gentlemen
and welcome to the session Tuning

00:00:14.060 --> 00:00:15.500
for Velocity Engine and MP.

00:00:15.500 --> 00:00:16.870
I'm Glenn Fisher.

00:00:16.900 --> 00:00:19.920
I run the performance marketing
group in worldwide product

00:00:19.920 --> 00:00:22.750
marketing at Apple Computer and
as such have been involved with

00:00:22.750 --> 00:00:25.960
Velocity Engine and MP technologies
for the last several years.

00:00:26.020 --> 00:00:28.060
Delighted to have all of you here today.

00:00:28.060 --> 00:00:32.120
We have a great crew of presenters
from MetaWorks and would like to

00:00:32.130 --> 00:00:35.580
thank them for the work they've done
in preparing this session and also

00:00:35.580 --> 00:00:39.280
Chris Cox from Adobe who has been
instrumental in helping us with some

00:00:39.280 --> 00:00:40.960
of the demos that you'll see today.

00:00:43.130 --> 00:00:45.940
So, why are we here?

00:00:45.960 --> 00:00:49.540
Two key technologies for Apple going
forward are Velocity Engine and MP.

00:00:49.540 --> 00:00:53.500
The processor technologies that
we've been developing make those

00:00:53.500 --> 00:00:57.460
technologies available to our
customers or will in the future,

00:00:57.460 --> 00:01:00.450
and we need to make sure that you're
on board supporting those technologies

00:01:00.470 --> 00:01:03.490
to get the best performance out of
your application and to take advantage

00:01:03.490 --> 00:01:06.110
of the performance that's there
in the machine for our customers.

00:01:06.120 --> 00:01:08.800
At the same time,
we recognize that it isn't always easy

00:01:08.800 --> 00:01:12.930
to take advantage of these technologies,
so we're looking for ways to

00:01:13.000 --> 00:01:15.840
make it as easy as possible,
and have been working closely with

00:01:15.840 --> 00:01:18.880
Motorola and Metaworks over the
last few years to make it as easy as

00:01:18.880 --> 00:01:22.130
possible for you to take advantage
of these powerful technologies.

00:01:22.140 --> 00:01:25.450
For our information,
how many of you have actually written

00:01:25.510 --> 00:01:27.830
Velocity Engine code or AltaVec code?

00:01:27.840 --> 00:01:30.500
How many of you have
played around with it?

00:01:30.660 --> 00:01:32.360
A few more, okay.

00:01:32.360 --> 00:01:35.480
And how many of you are here
to find out how to get started?

00:01:37.090 --> 00:01:42.700
Great, so that's wonderful to have
new recruits to the crowd.

00:01:42.700 --> 00:01:47.690
So what we're covering today,
how to debug Velocity Engine applications

00:01:47.720 --> 00:01:50.790
using MetroWorks CodeWire,
and we'll give you some specific

00:01:50.790 --> 00:01:54.870
examples of tuning code for Velocity
Engine using MetroWorks CodeWire.

00:01:54.880 --> 00:01:57.930
We'll also give you a brief
introduction to CodeWire support

00:01:58.100 --> 00:01:59.730
for MP coding and debugging.

00:01:59.740 --> 00:02:02.390
And to do that,
I'd like to bring up Bob Campbell,

00:02:02.390 --> 00:02:05.220
who's the lead compiler
engineer at MetroWorks.

00:02:05.360 --> 00:02:05.840
Bob?

00:02:14.300 --> 00:02:18.700
I have to admit that I don't actually
write a lot of AlteVet code and

00:02:18.840 --> 00:02:21.930
that's one of the reasons why we're
very grateful to Chris Cox for

00:02:22.040 --> 00:02:23.900
providing us one of his examples.

00:02:23.930 --> 00:02:28.270
I look at a lot of AlteVet code but
my tendency is to critique other

00:02:28.270 --> 00:02:31.000
people's and not actually write it.

00:02:31.000 --> 00:02:34.970
Along that line,

00:02:36.500 --> 00:02:41.340
Changing from scalar code to vector
code requires that you put some

00:02:41.340 --> 00:02:42.770
thought into what you're doing.

00:02:42.780 --> 00:02:47.620
And standard things that apply to scalar
code still apply to Velocity Engine.

00:02:47.620 --> 00:02:50.500
So you should profile your code.

00:02:50.500 --> 00:02:53.460
You should make sure that if you're
going to make something run faster,

00:02:53.460 --> 00:02:56.190
make something that you're actually
spending time doing run faster.

00:02:56.200 --> 00:03:02.090
So find your hot spots and look at them
and think about ways to rewrite them.

00:03:02.910 --> 00:03:06.420
Another issue for Altevec is
that alignment is important.

00:03:06.420 --> 00:03:11.640
The engine will run much faster
if you have 16 byte aligned data.

00:03:11.690 --> 00:03:14.580
Then it will run if you've
got things misaligned,

00:03:14.580 --> 00:03:18.070
then you're going to have to
waste cycles realigning them.

00:03:18.290 --> 00:03:20.390
Another thing is

00:03:20.660 --> 00:03:23.690
Because you're going to work
on things in big chunks of 4,

00:03:23.700 --> 00:03:27.000
8, or 16 elements,
you can't really have an if

00:03:27.010 --> 00:03:29.350
statement that does something
different on one element that you're

00:03:29.350 --> 00:03:30.330
going to do on the other element.

00:03:30.360 --> 00:03:35.220
So you need to take advantage of
instructions like vSelect that allow you

00:03:35.220 --> 00:03:40.550
to basically do conditional assignments
within straight line code with no ifs.

00:03:40.780 --> 00:03:45.770
And probably a third point is that one
of the most powerful features of AlteVec

00:03:45.770 --> 00:03:48.460
is the data streaming instructions.

00:03:49.450 --> 00:03:52.910
So if you're writing code that's
going ripping through memory,

00:03:52.910 --> 00:03:55.670
then you ought to tell the CPU, hey,
I'm going to be going ripping

00:03:55.700 --> 00:04:00.010
through memory and I'm going
to be reading every so often.

00:04:00.020 --> 00:04:02.480
Tell it how much you're going to
be reading and what your stride is.

00:04:02.500 --> 00:04:05.910
That way it will read the data into
the cache before you even get there.

00:04:09.590 --> 00:04:12.470
As the example that we have that
we're going to show you today,

00:04:12.470 --> 00:04:15.500
you can almost plan on
restructuring your code.

00:04:15.500 --> 00:04:19.680
Algorithms that work well scalarly
may be significantly different

00:04:19.790 --> 00:04:22.600
than the algorithms that you're
going to work on in vectors.

00:04:22.600 --> 00:04:26.320
The example that we have from
Chris Cox is a rotate example,

00:04:26.320 --> 00:04:29.970
and the rotate example
was interesting because

00:04:30.580 --> 00:04:34.740
You change the way you move through your
data in order to enable you to speed up.

00:04:34.810 --> 00:04:38.200
And we'll actually talk about
that when we run the example.

00:04:38.270 --> 00:04:42.530
Another point about AlteVec is that

00:04:42.750 --> 00:04:45.730
You know, you see this great instruction
and it'll do some across.

00:04:45.730 --> 00:04:50.050
It'll let you add four values
together and produce a result.

00:04:50.330 --> 00:04:54.040
You can't just go stick that in every
time you need to do that one instruction.

00:04:54.040 --> 00:04:58.780
You need to be doing more than just
using one vector instruction because

00:04:58.780 --> 00:05:01.750
there's setup overhead and you won't
get back your setup overhead if

00:05:01.750 --> 00:05:03.240
you're only running one instruction.

00:05:03.240 --> 00:05:07.270
So it's not a good idea to write a
bunch of little tiny functions that

00:05:07.270 --> 00:05:09.800
call one single AlteVec function.

00:05:09.900 --> 00:05:16.020
And kind of in that point one of the
things that we've discovered is that

00:05:17.070 --> 00:05:20.760
There's some bookkeeping regarding
saving Altevec registers.

00:05:20.760 --> 00:05:24.390
So one of the comments has been,
if you're going to do a

00:05:24.460 --> 00:05:26.800
bunch of Altevec code,
there's a pragma you stick in

00:05:26.800 --> 00:05:29.520
at the beginning that says,
I'm going to be using Altevec code.

00:05:29.560 --> 00:05:32.200
Generate all your code with
all the function calls,

00:05:32.200 --> 00:05:33.850
and then turn it off at the end.

00:05:33.860 --> 00:05:36.200
That saves some of the
intermediate bookkeeping

00:05:36.200 --> 00:05:39.230
regarding saving the registers,
because it sort of like sets it up at the

00:05:39.270 --> 00:05:40.910
beginning and cleans it up at the end.

00:05:40.920 --> 00:05:45.730
And last is, you need to look for
parallelism in your algorithms.

00:05:46.440 --> 00:05:49.560
Places where you can do
four things at a time,

00:05:49.560 --> 00:05:52.330
or eight things at a time,
instead of looking for sort of

00:05:52.410 --> 00:05:54.100
iterating through one at a time.

00:05:54.100 --> 00:05:57.080
At that point,
I want to bring up Richard Atwell,

00:05:57.080 --> 00:06:00.620
and we're going to run through a
demo of some Rotate code from Adobe.

00:06:00.620 --> 00:06:04.240
Oops.

00:06:04.240 --> 00:06:06.730
And I'm in charge of the monitors, so...

00:06:13.270 --> 00:06:18.240
So here basically Richard has
launched the program in the debugger.

00:06:18.250 --> 00:06:19.230
Are we at the beginning here?

00:06:19.250 --> 00:06:20.240
Yeah, we're at the beginning.

00:06:20.240 --> 00:06:23.690
You want to run to the first breakpoint.

00:06:24.930 --> 00:06:27.650
The part that's interesting is
the original rotate algorithm

00:06:27.660 --> 00:06:33.040
just went through rows at a time,
writing out columns at a time.

00:06:33.090 --> 00:06:36.340
So it's a 90 degree rotate,
so if you're going along like this

00:06:36.340 --> 00:06:38.340
and you're writing down like this.

00:06:38.340 --> 00:06:42.880
Can you make the font bigger, Richard?

00:06:43.820 --> 00:06:47.880
The change to do for the Altevec
algorithm is instead of to think

00:06:47.940 --> 00:06:51.320
about working in rows and columns,
is to take the input

00:06:51.320 --> 00:06:55.510
and break it into tiles,
where the tiles exactly fit

00:06:56.210 --> 00:06:59.520
basically 16 byte by 16 byte square.

00:06:59.520 --> 00:07:03.450
So what we're going to do is we're
going to load a 16 byte by 16 byte

00:07:03.460 --> 00:07:06.610
square into Altevec registers,
rotate it in the registers,

00:07:06.610 --> 00:07:08.690
and then write it back out where it goes.

00:07:08.780 --> 00:07:13.460
So instead of going along word at a time,
we're going to grab a chunk,

00:07:13.510 --> 00:07:15.590
we're going to rotate it,
and we're going to write it back out.

00:07:18.760 --> 00:07:27.210
So actually Richard is here at the
function which is going to do this.

00:07:27.650 --> 00:07:30.750
I'm not really sure how in-depth we
want to go into the instructions,

00:07:31.440 --> 00:07:32.500
but it essentially does.

00:07:32.560 --> 00:07:35.110
You want to step through it?

00:07:35.250 --> 00:07:37.330
Oh, we were going to show off
-- Richard wants to show

00:07:37.330 --> 00:07:38.340
off some debugger features.

00:07:38.340 --> 00:07:41.420
These are what he works on.

00:07:41.550 --> 00:07:43.310
So we've got a nice register window.

00:07:43.430 --> 00:07:46.720
You can look at all
the Altevec registers.

00:07:46.770 --> 00:07:48.310
You can step through code.

00:07:48.400 --> 00:07:52.320
You can watch the
registers as they change,

00:07:52.410 --> 00:07:54.090
as it loads them.

00:07:55.820 --> 00:08:00.810
So basically at this point he's going
to do one more step and it's going

00:08:00.810 --> 00:08:06.150
to have like basically loaded all
loaded this whole tile into memory and

00:08:07.100 --> 00:08:10.300
I'm sitting here looking at Chris going,
you should explain this stuff.

00:08:10.320 --> 00:08:13.860
But it's actually a pretty neat
algorithm because instead of

00:08:13.930 --> 00:08:17.110
doing what I would have done,
which is individually move the

00:08:17.120 --> 00:08:19.420
elements within the vectors
around to the right spots,

00:08:19.500 --> 00:08:24.150
he used a trick with the merge
instruction to sort of merge part way

00:08:24.530 --> 00:08:27.640
and then a second merge which puts
everything exactly where it wants to go.

00:08:27.660 --> 00:08:33.330
And if you really want to know,
are we going to make this code available?

00:08:38.340 --> 00:08:41.670
Okay, so we won't promise that yet.

00:08:41.670 --> 00:08:47.540
But it's a pretty nice thinking
about the problem differently and

00:08:47.540 --> 00:08:48.900
looking at what AlteVet can do.

00:08:48.900 --> 00:08:52.700
And instead of saying, you know,
move my elements individually,

00:08:52.800 --> 00:08:56.000
I move half my elements
halfway where I want them.

00:08:56.000 --> 00:08:59.600
And then the second set of merge
instructions moves them the other half.

00:08:59.600 --> 00:09:03.570
Richard, going down to the merges,
is the entire rotate is...

00:09:13.790 --> 00:09:19.860
So basically that set of eight
instructions causes everything to rotate.

00:09:19.860 --> 00:09:26.620
And I think Richard wanted to
show a few debugger features.

00:09:33.700 --> 00:09:35.300
Can you hear me now?

00:09:35.300 --> 00:09:35.800
OK.

00:09:35.800 --> 00:09:40.250
So one of the problems that we had
was how to represent the vector

00:09:40.290 --> 00:09:42.380
registers because they're so large.

00:09:42.380 --> 00:09:46.520
So what we decided to do is make
use of the struct paradigm that we

00:09:46.530 --> 00:09:48.080
already have in the variable view.

00:09:48.080 --> 00:09:50.700
And you can take a look at all
of the scalar elements that

00:09:50.700 --> 00:09:52.520
live within the vector elements.

00:09:52.520 --> 00:09:56.070
And you can modify these
things individually in order to

00:09:56.070 --> 00:09:57.760
help you with your debugging.

00:10:01.490 --> 00:10:04.740
So because we had the ability to do that,
we also wondered what we

00:10:04.750 --> 00:10:06.120
can do for breakpoints.

00:10:06.170 --> 00:10:10.010
And we have a conditional
breakpoint feature in the IDE,

00:10:10.060 --> 00:10:13.860
but because of the way Motorola specified
the structs as being anonymous,

00:10:13.870 --> 00:10:16.320
you couldn't access the elements inside.

00:10:16.320 --> 00:10:19.620
We had to invent some syntax for
you to get inside those things.

00:10:19.640 --> 00:10:22.220
So if you look down the
breakpoints window here,

00:10:22.220 --> 00:10:26.990
we have a conditional breakpoint
and we're going to set a breakpoint

00:10:27.180 --> 00:10:30.340
Line 32, and it's going to be on
the source one variable.

00:10:30.340 --> 00:10:35.720
If you take a look at the syntax,
it's SRC1 dot followed by what

00:10:35.720 --> 00:10:36.820
looks like an array notation.

00:10:36.820 --> 00:10:39.630
This is just something that we
borrowed because we're using this

00:10:39.630 --> 00:10:44.370
array-like notation to indicate the
scalar elements inside each vector.

00:10:44.420 --> 00:10:48.910
So what we can do is we can
change the PC and move it up here.

00:10:51.380 --> 00:10:53.040
If I go run,
it's going to hit the breakpoint.

00:10:53.060 --> 00:11:00.800
If I change it back again,
and change the condition,

00:11:00.800 --> 00:11:04.670
it should bypass the breakpoint,
as it did.

00:11:06.260 --> 00:11:07.200
Any other debugger features?

00:11:07.200 --> 00:11:12.740
The Vector Register window is so huge.

00:11:12.740 --> 00:11:15.090
So we made it scrollable.

00:11:16.500 --> 00:11:19.950
and if you're small on real estate
on your PowerBook or whatever,

00:11:19.950 --> 00:11:22.480
we don't have G4 PowerBook yet,
but when we do,

00:11:22.480 --> 00:11:26.590
you'll be able to grow the window and
expect register values and then shrink

00:11:26.610 --> 00:11:30.020
it back down and it remembers the
position you had it scroll to before

00:11:30.020 --> 00:11:33.470
so you can kind of manage the debugging
a bit better and not let the debugger

00:11:33.470 --> 00:11:34.680
get in the way of your programming.

00:11:36.840 --> 00:11:39.660
Okay, so could we quit the debugger
and run the non-debug version?

00:11:39.660 --> 00:11:40.140
Sure.

00:11:40.140 --> 00:11:42.770
I want to show,
because basically Chris was kind enough

00:11:42.880 --> 00:11:47.510
to set us up with an example that
runs the scalar code several different

00:11:47.510 --> 00:11:49.300
ways and then runs the AlteVec code.

00:11:49.300 --> 00:11:52.660
So if we could just run that,
and of course it's going to build it.

00:11:52.700 --> 00:11:55.480
The scalar code was what
I was talking about earlier,

00:11:55.480 --> 00:11:59.640
where it goes through memory by row,
writing out columns.

00:12:00.780 --> 00:12:03.600
Then an additional one that
was tried to do it the other

00:12:03.600 --> 00:12:06.950
way was writing out by rows,
but reading by columns,

00:12:06.980 --> 00:12:11.770
sort of inverting the way you do it
to kind of look at the differences

00:12:12.100 --> 00:12:14.860
in the way it walks through memory.

00:12:14.860 --> 00:12:19.970
So then, you know,
and I can't hardly read that.

00:12:21.740 --> 00:12:22.760
No, it's not your fault.

00:12:22.760 --> 00:12:23.740
It's our terminal window.

00:12:23.740 --> 00:12:30.240
The first attempt up there took, what,
4.3 seconds.

00:12:30.240 --> 00:12:38.590
The second attempt took 5.3, 5.2,
and the third one was...

00:12:39.330 --> 00:12:39.930
5.1.

00:12:40.280 --> 00:12:43.310
Those were all scalar attempts
of different ways of doing it.

00:12:43.310 --> 00:12:46.500
And the one thing I like about
this is the fact that Chris very

00:12:46.500 --> 00:12:49.940
religiously has a base case,
he writes a new case,

00:12:49.960 --> 00:12:51.970
he keeps the base case,
and he always keeps comparing

00:12:51.970 --> 00:12:56.240
the times to make sure that
we're actually getting better.

00:12:56.240 --> 00:12:59.060
The fourth case is the vector case,
which is the one that we

00:12:59.080 --> 00:13:01.230
stepped through in the debugger.

00:13:01.270 --> 00:13:04.270
And that one took,
what does it say there, Richard?

00:13:04.290 --> 00:13:05.500
2.7.

00:13:05.500 --> 00:13:06.920
2.7 seconds?

00:13:06.920 --> 00:13:11.720
So not quite half, but the third one,
which is actually the interesting one,

00:13:11.720 --> 00:13:13.560
was where he combines all the features.

00:13:13.560 --> 00:13:16.770
He added in the data
stream touch instruction,

00:13:16.770 --> 00:13:21.460
where he sort of tells the CPU which
memory he's going to read ahead.

00:13:21.490 --> 00:13:29.760
And that one runs at 1.6, which is,
what did we get to?

00:13:29.800 --> 00:13:32.160
We got better than half, right?

00:13:32.160 --> 00:13:32.160
Almost a quarter.

00:13:33.750 --> 00:13:38.450
Yeah,
so it kind of shows you that there's

00:13:38.510 --> 00:13:40.420
two parts to the Velocity Engine.

00:13:40.420 --> 00:13:43.880
One part is the vector unit,
but to get full performance out of it,

00:13:43.950 --> 00:13:48.360
especially for data streaming operations,
you really need to take advantage of

00:13:48.360 --> 00:13:53.340
the cache hints and starting to tell it
what you're going to read ahead of time.

00:13:55.100 --> 00:14:22.800
[Transcript missing]

00:14:39.940 --> 00:14:40.890
There.

00:14:40.900 --> 00:14:47.110
So it's basically the
DataStream touch instruction.

00:14:47.110 --> 00:14:48.520
It takes the pointer.

00:14:48.550 --> 00:14:49.940
It takes a cache pattern.

00:14:49.970 --> 00:14:52.690
You need to read through
the manual a little bit.

00:14:52.930 --> 00:14:55.890
And what's the one?

00:14:56.690 --> 00:14:59.430
The one in the end, the last parameter.

00:14:59.440 --> 00:14:59.990
Oh, that's right.

00:15:00.000 --> 00:15:01.760
This is stream one.

00:15:01.760 --> 00:15:03.880
I should know this.

00:15:03.940 --> 00:15:05.510
So anyway,
that's what I was going to talk about.

00:15:05.600 --> 00:15:07.870
I was actually going
to save stuff for Q&A.

00:15:07.910 --> 00:15:10.480
And I want to bring up--

00:15:10.700 --> 00:15:13.680
push the right button,
push the right thing.

00:15:13.680 --> 00:15:16.390
Bring up Ken,
who's gonna talk about MP debugging.

00:15:16.400 --> 00:15:22.280
Thanks Bob.

00:15:26.500 --> 00:15:29.040
We've been doing a lot of work
with the IDE in the debugger,

00:15:29.050 --> 00:15:32.460
trying to carbonize it and get
the tools ready for the Pro6

00:15:32.550 --> 00:15:33.880
Beta CD that we've got here.

00:15:33.880 --> 00:15:37.320
But we've also kept Richard really busy
working on other Apple technologies,

00:15:37.350 --> 00:15:37.760
too.

00:15:37.760 --> 00:15:41.270
All of the Altevec
debugging support you saw,

00:15:41.270 --> 00:15:46.130
and then also support for the
newer flavors of the MP debugging,

00:15:46.130 --> 00:15:47.240
or MP APIs.

00:15:48.140 --> 00:15:51.530
And we had some MP support
in the debugger before,

00:15:51.690 --> 00:15:56.400
but Richard's really revved it and
made it work with the newer APIs.

00:15:56.400 --> 00:16:00.250
There's a new MetroNav
extension and newer plug-in,

00:16:00.250 --> 00:16:03.480
and some new user interfaces done, too.

00:16:10.100 --> 00:16:13.600
Let's see, we've already seen some
of this in the demo,

00:16:13.600 --> 00:16:17.440
but just to recap,
there's the vector register

00:16:17.590 --> 00:16:19.960
window for AltaVec.

00:16:19.980 --> 00:16:25.620
You saw how vector registers
and variables can be shown as

00:16:25.620 --> 00:16:29.100
structs for easy viewing of those.

00:16:29.100 --> 00:16:33.760
And then the work we've done to support
that and the expression parser and

00:16:33.890 --> 00:16:36.200
also for conditional breakpoints.

00:16:37.500 --> 00:16:41.620
For MP, we already had sort of a
paradigm of having separate

00:16:41.760 --> 00:16:42.900
thread windows in the debugger.

00:16:42.900 --> 00:16:47.400
You can also view all the threads
in one window with a pop-up menu if

00:16:47.440 --> 00:16:50.360
you want to look at them that way.

00:16:50.360 --> 00:16:52.760
And so we just use the
same paradigm for MP tasks.

00:16:52.760 --> 00:16:56.480
We also list the MP tasks along
with the cooperative threads

00:16:56.480 --> 00:16:58.340
inside the processes window.

00:16:58.340 --> 00:17:04.440
So you can look at specific processes
and see exactly which MP tasks and

00:17:04.440 --> 00:17:06.930
which cooperative threads they have.

00:17:07.500 --> 00:17:12.700
And then we've also tweaked the registers
window interface a bit so that you

00:17:12.700 --> 00:17:17.360
can look at registers for separate
MP tasks in separate register windows.

00:17:20.200 --> 00:17:22.660
And so now we'll go back to
Richard for a demo of some of

00:17:22.660 --> 00:17:26.150
the things I just talked about.

00:17:28.500 --> 00:17:29.160
There we go.

00:17:29.160 --> 00:17:30.480
OK.

00:17:30.480 --> 00:17:35.980
So if you were in the session this
morning on Mac OS 9 and multitasking--

00:17:36.830 --> 00:17:38.600
George Warner was up on stage
and he showed you this little

00:17:38.600 --> 00:17:42.610
demo called Close View.

00:17:43.110 --> 00:18:12.970
and Bob Campbell.

00:18:13.000 --> 00:18:14.240
MP 1.4 API.

00:18:14.280 --> 00:18:16.360
We've decided to jettison
support for it too.

00:18:16.360 --> 00:18:20.530
So we've combined the extensions together
so there's only one Metronub extension

00:18:20.530 --> 00:18:23.580
for debugging so you don't have to
swap this thing out to do MP stuff.

00:18:23.580 --> 00:18:25.720
And it makes it a lot easier.

00:18:25.740 --> 00:18:28.200
So I'm going to debug this thing.

00:18:30.970 --> 00:18:34.700
So the program starts up and
the first thing I want to show

00:18:34.700 --> 00:18:38.170
you is the preferences in the

00:18:39.300 --> 00:18:42.260
So we can see CloseView MP under
control of the debugger here.

00:18:42.260 --> 00:18:44.300
We've got the main thread,
which is a cooperative thread,

00:18:44.300 --> 00:18:45.950
and it's suspended.

00:18:46.740 --> 00:18:48.560
And I'm just going to step
through into the code to the

00:18:48.670 --> 00:18:53.600
point where we're just about to
create the MP task to do the work.

00:18:53.600 --> 00:18:54.710
So can anyone read the text OK?

00:18:54.740 --> 00:19:00.710
OK, so I'll make it a bit bigger.

00:19:13.000 --> 00:19:13.400
Here we go.

00:19:13.400 --> 00:19:15.780
So what we're going to do is we're
going to step over this line,

00:19:15.790 --> 00:19:17.630
and it's going to create an MP task.

00:19:17.650 --> 00:19:20.640
And MP tasks are created
in the runnable state.

00:19:22.900 --> 00:19:25.800
and in the main blit routine that's
going to draw into that window,

00:19:25.800 --> 00:19:26.760
I've got a breakpoint set.

00:19:26.760 --> 00:19:29.690
So what should happen is
I should step over this thing,

00:19:29.690 --> 00:19:33.260
we're going to get another thread window
and we're going to hit the breakpoint.

00:19:34.510 --> 00:19:36.740
So here we go.

00:19:36.750 --> 00:19:39.610
So let me just resize the window
here because we've got a little bug.

00:19:44.400 --> 00:19:46.090
So under the control of
the Code Warrior Debugger,

00:19:46.100 --> 00:19:48.500
we have the cooperative task
that was drawing the interface,

00:19:48.500 --> 00:19:49.870
and we also have control of the MP task.

00:19:49.910 --> 00:19:52.970
So these things are running completely
independently of each other.

00:19:52.980 --> 00:19:57.560
So what I can do is I can
step in the main task.

00:20:01.910 --> 00:20:07.300
and go back to the MP task and
I can step independently of the two.

00:20:08.720 --> 00:20:10.800
Let's get the main task running again.

00:20:10.800 --> 00:20:14.640
We've stopped at wait next event,
so I'm going to take the break point off,

00:20:14.640 --> 00:20:15.360
hit run.

00:20:15.410 --> 00:20:17.650
So we've got the program
running back here again,

00:20:17.720 --> 00:20:20.870
except what's happening is we've got
the break point still in the MP task,

00:20:20.880 --> 00:20:22.850
so we're not getting
any drawing happening.

00:20:22.850 --> 00:20:26.540
But the cooperative task is free to run,
and that's what's drawing the window

00:20:26.540 --> 00:20:28.950
and letting us drag it around.

00:20:28.980 --> 00:20:31.540
So I'm going to go back
to the window here.

00:20:32.600 --> 00:20:33.590
and Bob Campbell.

00:20:33.610 --> 00:20:35.760
So, I'm going to move this around a
bit so you can see in the corner.

00:20:35.760 --> 00:20:39.940
So, the Blitter is running in a loop,
so I'm going to set the

00:20:40.020 --> 00:20:42.550
Code Warrior debugger,
stopping every time it

00:20:42.550 --> 00:20:43.300
hits the breakpoint.

00:20:43.360 --> 00:20:45.660
And you notice that the way this
thing works is it updates the

00:20:45.660 --> 00:20:47.080
display underneath the mouse.

00:20:47.080 --> 00:20:50.020
So, as I move the mouse around,
hitting resume,

00:20:50.020 --> 00:20:52.560
we're going to get the display updating.

00:20:53.840 --> 00:20:55.260
So let's go back to the processes window.

00:20:55.260 --> 00:20:57.040
So we can see that we've got a few tasks.

00:20:57.040 --> 00:20:59.030
We've got the cooperative task.

00:20:59.110 --> 00:21:02.360
We've got our MP task,
which reads as stopped.

00:21:02.560 --> 00:21:04.710
And the task above it is
called the death watch task.

00:21:04.750 --> 00:21:08.230
It's something that the OS creates,
and it tears down all the MP tasks

00:21:08.250 --> 00:21:10.460
when the application exits.

00:21:10.500 --> 00:21:12.440
So let's go back to the
breakpoints window here.

00:21:12.440 --> 00:21:16.120
And let's temporarily
disable the breakpoint.

00:21:16.120 --> 00:21:17.560
Get the MP task running again.

00:21:17.560 --> 00:21:19.330
And that's updating.

00:21:20.400 --> 00:21:21.780
Let's set the breakpoint again.

00:21:21.780 --> 00:21:25.560
Next time we blip, we stop.

00:21:25.560 --> 00:21:29.790
So basically we've got MP 2.0
support for debugging the code order.

00:21:38.340 --> 00:21:39.300
and that's it.

00:21:40.300 --> 00:21:40.300
Thanks Richard.

00:21:41.300 --> 00:21:43.300
And that's in Beta 6 right now?

00:21:43.580 --> 00:21:44.290
Richard Wolitski: Mostly.

00:21:44.440 --> 00:21:47.660
This stuff is a little bit newer and
it's going to be finished up next

00:21:47.660 --> 00:21:49.740
week and then put up for download.

00:21:50.430 --> 00:21:52.420
Yeah,
so if you get the Beta 6 tool CD that

00:21:52.420 --> 00:21:57.250
we have here at WWDC and then just
check our website in about a week

00:21:57.280 --> 00:22:00.510
and you can get the same stuff
that Richard's been demoing here.

00:22:02.500 --> 00:22:08.570
We'll have them outside the
door after this session is over.

00:22:12.330 --> 00:22:13.300
I'm sorry?

00:22:17.380 --> 00:22:20.730
We have the same architecture
for showing multiple threads,

00:22:20.810 --> 00:22:22.740
whether it's Java or MP.

00:22:22.740 --> 00:22:25.410
But it's up to Metronub
to actually figure out,

00:22:25.480 --> 00:22:28.290
you know, what the threads are doing.

00:22:31.980 --> 00:22:34.520
Okay, that's it for our MP demo.

00:22:34.520 --> 00:22:35.990
So now here's Godfrey.

00:22:40.780 --> 00:22:40.980
Howdy.

00:22:41.010 --> 00:22:45.270
I want to thank our MetroWorks friends
for coming and showing us this stuff.

00:22:45.280 --> 00:22:49.710
We left a lot of time for Q&A today
so that we could field your

00:22:49.810 --> 00:22:53.540
questions and just run it kind
of informally from that point.

00:22:53.580 --> 00:22:56.740
So without further ado,
we have three mics set up.

00:22:56.780 --> 00:22:59.000
People should queue up at the mics.

00:22:59.000 --> 00:23:02.850
And a little roadmap of some
more sessions this afternoon.

00:23:02.860 --> 00:23:05.440
We have Apple's performance
tools for Mac OS X,

00:23:05.440 --> 00:23:09.750
and tomorrow we'll have a debugging
session in the main hall at 9 a.m.

00:23:13.210 --> 00:23:14.580
We have people queuing up.

00:23:14.580 --> 00:23:17.200
Could all of our presenters
please step up to the stage?