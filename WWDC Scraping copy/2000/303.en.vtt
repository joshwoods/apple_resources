WEBVTT

00:00:10.760 --> 00:00:13.700
Please welcome Kevin Calhoun.

00:00:13.700 --> 00:00:24.850
Oh, that's me,
the QuickTime Streaming Engineering team,

00:00:24.910 --> 00:00:25.690
in person.

00:00:25.910 --> 00:00:27.700
Actually, several members of the
QuickTime Streaming Engineering team

00:00:27.700 --> 00:00:32.690
will be here today to talk about,
well, QuickTime streams on the web.

00:00:32.710 --> 00:00:34.540
This is not news to you.

00:00:34.750 --> 00:00:35.700
If you've been at
sessions during the show,

00:00:35.700 --> 00:00:38.700
it seems to us anyway
on the QuickTime team,

00:00:38.700 --> 00:00:41.700
as if almost every demo at the
show includes a QuickTime movie,

00:00:41.700 --> 00:00:43.690
many of them streaming.

00:00:43.700 --> 00:00:48.920
This is wonderful for us to see because,
after all, the tagline for WWDC 2000 is,

00:00:48.920 --> 00:00:51.700
"QuickTime is ploppable."

00:00:53.940 --> 00:00:56.960
If you missed the previous session,
what that means is that

00:00:57.040 --> 00:00:58.940
QuickTime movies can show up everywhere.

00:00:59.070 --> 00:01:00.820
QuickTime is, in fact, everywhere.

00:01:00.820 --> 00:01:04.060
In fact, QuickTime media,
media that QuickTime can play,

00:01:04.060 --> 00:01:05.780
is everywhere on the Internet.

00:01:05.900 --> 00:01:09.260
Yes, QuickTime streams via
streaming protocols,

00:01:09.260 --> 00:01:12.950
but QuickTime can also play
files that are transferred via

00:01:13.500 --> 00:01:15.720
conventional file transfer protocols.

00:01:15.900 --> 00:01:19.000
And QuickTime can also
handle connectivity,

00:01:19.150 --> 00:01:23.900
the network, media that's connected to
other media via URL links.

00:01:24.010 --> 00:01:26.340
We're going to talk in this session...

00:01:26.540 --> 00:01:30.900
about how you can take advantage of these
QuickTime services in your applications.

00:01:30.970 --> 00:01:33.860
On the reception side,
on the reception of media

00:01:33.860 --> 00:01:36.770
coming from the Internet,
we'll talk about opening and playback

00:01:36.770 --> 00:01:38.460
of media in your applications.

00:01:38.520 --> 00:01:42.660
Now many of you already own
or develop applications that

00:01:42.740 --> 00:01:43.690
can play QuickTime media.

00:01:43.780 --> 00:01:45.700
Can I have a show of hands here?

00:01:45.770 --> 00:01:50.690
Who here knows all about opening a movie,
instantiating a movie controller,

00:01:50.690 --> 00:01:55.610
closing the movie file, setting the movie
controller action filter,

00:01:55.800 --> 00:01:56.100
Nobody?

00:01:56.260 --> 00:01:58.100
Anyone here do this in your app already?

00:01:58.190 --> 00:01:58.940
Excellent.

00:01:58.970 --> 00:02:01.980
I'll give the rest of you a link for
where you can go to get information

00:02:01.980 --> 00:02:06.550
about how to open and play back
QuickTime media in its most basic form.

00:02:06.910 --> 00:02:10.280
But even those of you who do,
if you haven't touched that part of

00:02:10.430 --> 00:02:14.690
your application for several years,
we have some recommendations for

00:02:14.690 --> 00:02:18.620
how you can optimize your user's
experience of QuickTime media,

00:02:18.720 --> 00:02:20.560
of QuickTime network media in your apps.

00:02:20.800 --> 00:02:23.270
That's the chief part,
the chief topic of the first

00:02:23.430 --> 00:02:24.460
part of our talk today.

00:02:24.460 --> 00:02:29.080
Then we're going to talk about some
things you should be aware of if your

00:02:29.180 --> 00:02:31.620
application actually edits media.

00:02:32.070 --> 00:02:36.700
There are some surprising things that
are showing up now in QuickTime movies.

00:02:36.700 --> 00:02:38.670
If you wrote your app three
or four years ago even,

00:02:38.680 --> 00:02:41.460
and you're editing QuickTime media,
you should be aware of some

00:02:41.490 --> 00:02:44.650
things that show up in streaming
movies and how to deal with them.

00:02:44.840 --> 00:02:48.620
We'll also talk about how your
application can mediate the linking

00:02:48.620 --> 00:02:50.620
of one piece of media to another.

00:02:50.700 --> 00:02:51.800
Thank you.

00:02:52.630 --> 00:02:54.260
But we're saving the best for last today.

00:02:54.260 --> 00:02:57.030
For the first time publicly,
we're talking about our

00:02:57.030 --> 00:02:59.210
QuickTime streaming broadcast APIs.

00:02:59.340 --> 00:03:02.630
Not just the reception side,
but how your application can

00:03:02.780 --> 00:03:05.440
be the source of streaming
media on the web as well.

00:03:05.650 --> 00:03:07.330
That's coming up here
today in this session.

00:03:07.340 --> 00:03:09.200
You're in the right place.

00:03:13.200 --> 00:03:15.690
Some of you are applauding and
some of you are just saying,

00:03:15.740 --> 00:03:19.920
"Finally." Okay, I told you for those of
you who are not yet playing

00:03:20.020 --> 00:03:23.200
QuickTime media in your application,
I'd like to ask you why.

00:03:23.270 --> 00:03:26.540
Now that you know at this show all
the things that QuickTime can do,

00:03:26.600 --> 00:03:29.810
not only play stream media but
also interactive media as well.

00:03:29.860 --> 00:03:31.880
In fact,
you can embed a calculator in your

00:03:31.880 --> 00:03:35.640
application just by using these
APIs as we saw at the previous session.

00:03:35.900 --> 00:03:41.160
Go to the URL www.apple.com/quicktime,
click on the Developer tab,

00:03:41.190 --> 00:03:44.650
and that will take you right to the
right page within Apple's Developer site

00:03:44.930 --> 00:03:49.100
for you to get documentation,
headers, sample code for how to

00:03:49.100 --> 00:03:52.940
get started with playing
QuickTime media in your application.

00:03:52.960 --> 00:03:57.240
Also, you probably want to participate
in the QuickTime mailing lists.

00:03:57.260 --> 00:04:00.380
There's a QuickTime API mailing
list that you can sign up for.

00:04:00.380 --> 00:04:01.690
There's a QuickTime talk mailing list.

00:04:01.800 --> 00:04:03.180
There's a VR mailing list.

00:04:03.280 --> 00:04:06.370
Go to list.apple.com,
search for QuickTime,

00:04:06.620 --> 00:04:08.820
find the mailing lists that
are interesting to you,

00:04:08.820 --> 00:04:12.130
and you'll begin participating in
the discussion with members of the

00:04:12.130 --> 00:04:17.350
QuickTime team and other developers who
are using QuickTime in amazing ways.

00:04:18.520 --> 00:04:20.980
Okay,
so let's now talk about the topic of

00:04:21.040 --> 00:04:24.040
receiving media on the web via QuickTime.

00:04:24.080 --> 00:04:27.620
QuickTime supports two
flavors of such reception.

00:04:27.620 --> 00:04:30.500
And there's a tradeoff, of course,
as you know on the Internet,

00:04:30.500 --> 00:04:34.200
between getting the media as
good as it can be and getting

00:04:34.200 --> 00:04:35.820
it as fast as we can get it.

00:04:35.900 --> 00:04:39.500
The tradeoff is, in fact,
between integrity and expediency.

00:04:39.500 --> 00:04:43.370
You either want it real good
or you want it right now.

00:04:43.500 --> 00:04:48.280
QuickTime allows you to make the
choice of how a content developer

00:04:48.280 --> 00:04:50.440
wants to deploy media on the web.

00:04:50.490 --> 00:04:53.800
And your application can handle
the media regardless of the choice

00:04:53.880 --> 00:04:56.500
that the content developer makes.

00:04:56.500 --> 00:04:59.670
If you want the best content possible,
for example,

00:04:59.720 --> 00:05:03.680
the movie trailers that are up on
QuickTime's movie trailer site,

00:05:03.960 --> 00:05:07.140
FastStart is the mechanism
that QuickTime offers.

00:05:07.450 --> 00:05:11.690
We use standard file transfer protocols,
HTTP and FTP,

00:05:12.120 --> 00:05:16.040
and QuickTime can play the media that's
being transferred by these transfer

00:05:16.150 --> 00:05:17.800
protocols before it's all there.

00:05:17.920 --> 00:05:19.460
That's why we call it FastStart.

00:05:19.580 --> 00:05:23.290
As soon as there's enough media to play,
we'll start playing it.

00:05:23.580 --> 00:05:27.940
And you get the best quality because
those file transfer protocols guarantee

00:05:28.280 --> 00:05:30.920
the fidelity of the media transfer.

00:05:31.140 --> 00:05:34.730
However, for many applications,
the choice of real-time

00:05:34.730 --> 00:05:36.950
streaming is more appropriate.

00:05:36.960 --> 00:05:40.720
In other words, for a live broadcast,
for example, you don't want to wait

00:05:40.730 --> 00:05:42.000
for a file transfer.

00:05:42.000 --> 00:05:45.000
You want the broadcast to keep
up with what's happening live.

00:05:45.000 --> 00:05:48.730
Well, a real-time protocol is
appropriate for this choice,

00:05:48.910 --> 00:05:50.850
and QuickTime now does that also.

00:05:51.130 --> 00:05:53.000
That's the form of timely data transfer.

00:05:53.000 --> 00:05:55.790
We support RTSP and RTP.

00:05:56.000 --> 00:05:59.440
All of the transfer protocols
that we support in QuickTime are,

00:05:59.570 --> 00:06:03.500
in fact, IETF standards,
and they work with servers

00:06:03.550 --> 00:06:06.710
of many different varieties.

00:06:08.470 --> 00:06:12.440
Okay,
when will network media come into play?

00:06:12.440 --> 00:06:15.300
Are you safe from things
like network latency?

00:06:15.300 --> 00:06:18.940
Well, if your application
opens QuickTime media,

00:06:19.080 --> 00:06:23.200
even if you haven't touched that
portion of your application since 1992,

00:06:23.200 --> 00:06:27.300
it already does play network media.

00:06:27.300 --> 00:06:31.810
Even if all you use is the
QuickTime API call "new movie from file,"

00:06:32.080 --> 00:06:37.370
you should be aware that local files
can contain references to external media,

00:06:37.460 --> 00:06:41.040
and your application might require,
when it calls "new movie from

00:06:41.040 --> 00:06:45.290
file," the user to wait for a
network transaction to occur.

00:06:45.300 --> 00:06:48.300
We'll talk about how you can make that
experience better in just a minute.

00:06:48.300 --> 00:06:51.400
If your application is a little
bit broader in its approach

00:06:51.570 --> 00:06:55.520
to opening QuickTime media,
you might be calling "new movie from

00:06:55.520 --> 00:06:57.300
data ref," which would allow your
application to be able to access

00:06:57.300 --> 00:06:57.300
the data from the data source.

00:06:57.300 --> 00:06:59.020
You might be calling "new movie
from data ref" to your application

00:06:59.020 --> 00:07:04.440
to open QuickTime movies via URL,
such as HTTP or FTP or RTSP,

00:07:04.560 --> 00:07:08.300
or any other form of reference
of media that QuickTime supports.

00:07:08.300 --> 00:07:12.160
Even forms of reference that
QuickTime itself doesn't support,

00:07:12.420 --> 00:07:17.290
but which have been added by third-party
developers as extensions to QuickTime.

00:07:17.390 --> 00:07:21.710
We'll talk about how you can add support
for "new movie from data ref" to your app

00:07:21.710 --> 00:07:24.290
so you can open movies directly via URLs.

00:07:24.300 --> 00:07:26.300
You should be aware
that when you do this,

00:07:26.300 --> 00:07:27.300
network transactions will be
more efficient than ever before.

00:07:27.300 --> 00:07:30.140
For example, for FastStart,
a very typical transaction

00:07:30.340 --> 00:07:34.590
for an HTTP URL might be
a request from the server,

00:07:34.590 --> 00:07:38.280
a GET for some media,
and then the transfer begins.

00:07:38.560 --> 00:07:41.480
This transfer could take an
awfully long period of time,

00:07:41.480 --> 00:07:45.530
and we have requested specifically
that the QuickTime sessions be

00:07:45.530 --> 00:07:49.570
across the street from the main hall,
so that we'll have a slower

00:07:49.670 --> 00:07:52.810
network over here so I can show
this to you in just a moment.

00:07:55.310 --> 00:07:58.650
The series of transactions
that occurs for a streaming

00:07:58.650 --> 00:08:00.040
movie are somewhat different.

00:08:00.280 --> 00:08:05.210
If you send an RTSP URL to
a streaming server,

00:08:05.260 --> 00:08:08.980
there's a transaction that occurs
first that first returns to you

00:08:09.070 --> 00:08:12.520
a session description for the
stream that will then ensue,

00:08:12.590 --> 00:08:15.550
and then a network session
will be established that allows

00:08:15.650 --> 00:08:16.860
the media to be transferred.

00:08:16.990 --> 00:08:20.320
So the transactions are a
little bit more complex.

00:08:20.570 --> 00:08:23.800
Again, there might be some
delay in this occurring.

00:08:24.140 --> 00:08:27.200
One other wrinkle that you should be
aware of when you're playing network

00:08:27.200 --> 00:08:29.950
media is that QuickTime may intervene.

00:08:29.960 --> 00:08:35.490
If the user's connection settings in
the QuickTime control panel are set not

00:08:35.690 --> 00:08:40.610
to allow multiple simultaneous streams,
then QuickTime will devote all the

00:08:40.780 --> 00:08:45.550
available bandwidth between the machine
and the network to the particular stream

00:08:45.550 --> 00:08:50.050
that has the user's current focus,
usually the last one that the user opened

00:08:50.140 --> 00:08:52.120
or the one that the user last clicked.

00:08:52.220 --> 00:08:53.620
I'll demonstrate that as well.

00:08:54.000 --> 00:08:57.350
That's all just to tell you that
there may be new wrinkles in

00:08:57.350 --> 00:09:00.440
your user's experience of your
apps because of network media.

00:09:00.440 --> 00:09:04.950
Okay, let's see some of this in
action over here on demo one.

00:09:07.800 --> 00:09:11.680
What I decided to do was to prove
to you that even your legacy

00:09:11.780 --> 00:09:14.390
applications could play network media.

00:09:14.390 --> 00:09:19.470
So I went and I dug through my office,
which those of you who know my

00:09:19.470 --> 00:09:22.710
office realize is no simple feat,
and I came up with

00:09:22.710 --> 00:09:24.190
some old QuickTime CDs.

00:09:24.260 --> 00:09:30.630
I found QuickTime 3, I found QuickTime 2,
I found QuickTime 1.5 and I decided

00:09:30.680 --> 00:09:34.100
if I went back any further than
that I was inviting some danger.

00:09:34.260 --> 00:09:41.000
So off of QuickTime 1.5 CD-ROM from
1992 I pulled off MoviePlayer 1.1

00:09:41.000 --> 00:09:45.850
and I'll show you MoviePlayer 1.1
D1 is actually the version string

00:09:45.860 --> 00:09:47.700
that we shipped with QuickTime 1.5.

00:09:47.870 --> 00:09:50.860
You'll have to ask third party
developers who may be present in the

00:09:50.860 --> 00:09:54.680
audience why that was the version
number for that version of QuickTime.

00:09:54.700 --> 00:09:59.670
What I want to do is to open some
local files with MoviePlayer 1.1

00:09:59.800 --> 00:10:02.250
that reference network media.

00:10:02.260 --> 00:10:04.140
So I happen to have some here.

00:10:04.260 --> 00:10:07.340
This particular movie

00:10:10.260 --> 00:10:15.790
is a movie that's coming
off an HTTP server,

00:10:15.790 --> 00:10:15.790
which I happen to have
running right next to me here.

00:10:16.640 --> 00:10:21.040
And I'll drop this file,
which is fairly-- that's

00:10:21.160 --> 00:10:22.870
not the right one.

00:10:23.320 --> 00:10:23.960
Here it is.

00:10:24.010 --> 00:10:28.930
Here's the file that has the reference
to the HTTP URL on the server.

00:10:29.200 --> 00:10:33.120
You can see that this particular
movie is only 22,000 bytes.

00:10:33.260 --> 00:10:37.560
If I drop this on MoviePlayer 1.1,
you'll see that even MoviePlayer 1.1

00:10:37.670 --> 00:10:39.590
is capable of playing network media.

00:10:40.120 --> 00:10:44.620
What you see happening there at the
bottom of the screen is an indication

00:10:44.620 --> 00:10:46.800
of the state of the download.

00:10:46.800 --> 00:10:49.400
5, 6, how many?

00:10:50.800 --> 00:11:02.100
[Transcript missing]

00:11:07.200 --> 00:11:11.200
You can do it without laughing at Dan,
that's funny.

00:11:11.200 --> 00:11:14.480
Okay, so what you saw happening at
the bottom of the screen was an

00:11:14.530 --> 00:11:19.340
indication of not necessarily the
progress of the file transfer,

00:11:19.340 --> 00:11:22.250
but of course in QuickTime what
matters more is how much of this

00:11:22.300 --> 00:11:24.170
movie can we actually play right now.

00:11:24.260 --> 00:11:26.140
So let me just drop that on again.

00:11:26.470 --> 00:11:31.130
Watch the bottom of the screen and watch
the progress of the download occur.

00:11:31.130 --> 00:11:33.930
By time, not by file size.

00:11:34.330 --> 00:11:36.880
That indicates how much of the
movie is currently playable,

00:11:36.970 --> 00:11:39.700
the first minute, the first two minutes,
what have you.

00:11:40.770 --> 00:11:44.810
MoviePlayer 1.1 from 1992,
which predates QuickTime's

00:11:44.890 --> 00:11:47.700
ability to stream,
can also play streamed media.

00:11:47.700 --> 00:11:50.300
I have that same movie
compressed for streaming.

00:11:50.500 --> 00:11:54.040
Let me drop that onto MoviePlayer 1.1.

00:11:54.040 --> 00:11:58.680
And here I'll click the play
button and you'll see the typical

00:11:59.190 --> 00:12:01.690
experience of a streaming movie.

00:12:01.690 --> 00:12:04.700
The transaction occurs between
the client and the server.

00:12:04.700 --> 00:12:08.680
And then once the movie
becomes available to play,

00:12:08.690 --> 00:12:09.510
it plays.

00:12:09.660 --> 00:12:10.680
Let me show you that again.

00:12:10.700 --> 00:12:13.590
In this particular case,
we're not waiting for a

00:12:13.590 --> 00:12:14.700
file transfer to occur.

00:12:14.700 --> 00:12:18.630
We're waiting for the transaction
between client and server to occur.

00:12:18.780 --> 00:12:20.700
It goes through multiple stages.

00:12:20.750 --> 00:12:23.820
And you'll see status messages
in the movie controller to

00:12:23.930 --> 00:12:25.680
indicate each of the stages.

00:12:25.710 --> 00:12:29.080
Negotiating, buffering,
here they come again.

00:12:37.600 --> 00:12:40.960
If I should change the
time within this movie,

00:12:40.960 --> 00:12:42.650
then of course I have to
negotiate with the server to

00:12:42.800 --> 00:12:45.270
play later on in the stream.

00:12:48.900 --> 00:12:55.900
You've got bugs.

00:12:55.900 --> 00:13:01.340
You've got bugs.

00:13:01.340 --> 00:13:02.390
You've got bugs.

00:13:02.400 --> 00:13:03.820
Oh, that's too bad.

00:13:03.920 --> 00:13:04.860
That was a good one, too.

00:13:07.600 --> 00:13:11.600
I play that myself so that no one else
has the privilege of embarrassing me.

00:13:11.600 --> 00:13:17.190
Okay, so now you've seen the typical
experience of playing streaming

00:13:17.190 --> 00:13:19.600
media using standard QuickTime stuff.

00:13:19.640 --> 00:13:21.600
If you use the standard
QuickTime controller,

00:13:21.670 --> 00:13:26.790
that's the experience the user can
have in your application as well.

00:13:27.340 --> 00:13:30.070
Let me show you an application
that allows me to play

00:13:30.190 --> 00:13:32.570
QuickTime media in line.

00:13:33.400 --> 00:13:51.890
Outlook Express allows me to
send a QuickTime movie file from

00:13:51.890 --> 00:13:51.890
my mail server to somebody else,
and when that other person

00:13:51.890 --> 00:13:51.890
receives the mail file,
the movie will play in line.

00:13:51.890 --> 00:13:51.890
So I sent myself a streaming movie,
and I can play it here

00:13:51.890 --> 00:13:51.890
in Outlook Express.

00:13:52.360 --> 00:13:55.780
Which allows me to play streaming
movies right there in the mail doc.

00:13:55.900 --> 00:13:58.940
So even without you being aware of it,
if we go back to slides,

00:13:59.030 --> 00:14:03.100
your users may be playing network
media in your applications.

00:14:03.140 --> 00:14:06.730
Now there may be some
problems that can arise,

00:14:06.730 --> 00:14:08.930
if we can get back to slides,

00:14:09.750 --> 00:14:14.080
With that experience,
because as we all know, the Web has some

00:14:14.150 --> 00:14:15.760
interesting characteristics.

00:14:15.900 --> 00:14:19.940
Foremost among these is it can be slow,
especially if the packets

00:14:20.040 --> 00:14:21.820
have to cross the street.

00:14:23.520 --> 00:14:27.610
Secondly, media that you play on the
Internet may be dynamic.

00:14:27.950 --> 00:14:30.730
You may not know everything
about the media when you first

00:14:30.820 --> 00:14:32.400
open it that there is to know.

00:14:32.420 --> 00:14:34.370
For example,
in the case of streaming movies,

00:14:34.370 --> 00:14:38.380
when we are having that early transaction
between the client and server,

00:14:38.400 --> 00:14:42.760
the client may not know at what
size the movie wants to play or

00:14:43.070 --> 00:14:45.400
even the duration of the media.

00:14:45.530 --> 00:14:47.970
Those things might only
become known subsequently.

00:14:48.240 --> 00:14:49.800
Well, how do you deal with that?

00:14:49.880 --> 00:14:50.900
We'll get to that in a moment.

00:14:51.060 --> 00:14:53.470
Also,
media on the Internet is interesting,

00:14:53.470 --> 00:14:57.150
like other things on the Internet,
because it can be interactive.

00:14:57.310 --> 00:15:00.900
It can link from one
piece of media to another.

00:15:00.900 --> 00:15:03.850
You might want to mediate that
linking in your application.

00:15:03.960 --> 00:15:06.080
We'll talk about that.

00:15:06.430 --> 00:15:08.120
Okay,
let's drill down on some of these things.

00:15:08.200 --> 00:15:11.350
The net can be slow, of course,
because there may be limitations

00:15:11.350 --> 00:15:14.490
in bandwidth between the
client and the network.

00:15:14.490 --> 00:15:16.640
If I'm on a very slow modem, for example.

00:15:16.730 --> 00:15:19.740
But other problems may occur
at other points on the network.

00:15:19.940 --> 00:15:23.420
There might be a router between the
client and the server which is congested

00:15:23.430 --> 00:15:27.030
and can't keep up with all of the packets
that have to be routed through it.

00:15:27.340 --> 00:15:28.510
There can be a delay there.

00:15:29.080 --> 00:15:31.390
Finally,
as we saw demonstrated so dramatically

00:15:31.410 --> 00:15:35.180
with denial of service attacks recently,
servers can be overloaded and

00:15:35.260 --> 00:15:36.730
for that reason they can be slow.

00:15:36.730 --> 00:15:39.860
The point is,
quite beyond any one person or

00:15:39.860 --> 00:15:43.290
any one organization's control,
there can be delay,

00:15:43.290 --> 00:15:47.450
for one reason or another,
in a network transaction.

00:15:48.600 --> 00:15:49.850
Movies can also be dynamic.

00:15:50.050 --> 00:15:54.630
I mentioned earlier that dimensions
of a movie might not be known,

00:15:54.680 --> 00:15:57.770
so they might have to change
from an unknown to a known state

00:15:58.020 --> 00:16:01.190
after a movie has been opened,
or they might change from one

00:16:01.190 --> 00:16:04.170
known to another known state,
just because the movie wants

00:16:04.210 --> 00:16:05.380
to play at a different size.

00:16:05.500 --> 00:16:09.230
Duration of a movie can change,
again because you might not know it

00:16:09.350 --> 00:16:13.350
and then later it might become known,
but also because it might change

00:16:13.440 --> 00:16:15.390
from one known state to another.

00:16:15.500 --> 00:16:18.150
For example,
a stream might be set up as a

00:16:18.240 --> 00:16:22.430
live broadcast and at some point,
towards the end of an event,

00:16:22.550 --> 00:16:25.580
the server might tell you what
the rest of the duration is,

00:16:25.580 --> 00:16:27.490
because it's set to close
down after five minutes.

00:16:27.580 --> 00:16:32.490
How can you become aware of such a
thing hours after you open the movie?

00:16:33.310 --> 00:16:35.540
Also, movies can stop.

00:16:35.540 --> 00:16:39.160
You might set them to play,
or your user might set them to play,

00:16:39.220 --> 00:16:42.320
but they might be authored to
pause for one reason or another,

00:16:42.480 --> 00:16:52.330
or bandwidth restrictions might come
into play and QuickTime itself might

00:16:52.330 --> 00:16:52.330
intervene and stop a movie in order
to devote bandwidth to something else.

00:16:53.450 --> 00:16:55.400
Finally, movies can be interactive.

00:16:55.400 --> 00:16:59.240
They might be smart movies,
such as QuickTime VR movies that allow

00:16:59.240 --> 00:17:01.830
you to navigate them left and right,
up and down,

00:17:01.830 --> 00:17:03.370
because of direct user manipulation.

00:17:03.390 --> 00:17:05.120
Or they might have state.

00:17:05.400 --> 00:17:09.390
A lot of Flash movies, for example,
are authored in such a way

00:17:09.390 --> 00:17:13.400
that when the user clicks a
particular button in the movie,

00:17:13.400 --> 00:17:15.340
a set of options then become available.

00:17:15.410 --> 00:17:17.570
There might be different
pieces of content,

00:17:17.570 --> 00:17:20.300
a tab, for example,
with different pieces of content,

00:17:20.390 --> 00:17:24.000
or perhaps it might transition to a
different segment of the Flash movie

00:17:24.000 --> 00:17:25.360
that presents something different.

00:17:25.400 --> 00:17:28.790
These states are navigable by the user.

00:17:29.350 --> 00:17:32.960
The movies might also have
links to external media.

00:17:33.100 --> 00:17:34.600
These links might be automatic.

00:17:34.650 --> 00:17:38.600
A movie might play and automatically
send a link to a web page

00:17:38.720 --> 00:17:40.690
or another piece of media.

00:17:40.850 --> 00:17:47.500
Or they can be links that
require user intervention,

00:17:47.500 --> 00:17:47.500
something that you click on and
then the link becomes available.

00:17:47.900 --> 00:17:51.850
Let me show you some examples of
dynamism on the QuickTime TV that

00:17:51.850 --> 00:17:53.440
we have right now.

00:17:53.620 --> 00:17:57.280
So on demo one,
I'm going to open up the QuickTime player

00:17:57.380 --> 00:18:01.550
and show you some new channels in
our QuickTime TV channel drawer.

00:18:02.480 --> 00:18:05.700
The inventor of which I can't mention.

00:18:05.730 --> 00:18:08.210
I don't happen to have an
example of this just now because

00:18:08.210 --> 00:18:09.900
I remembered I left it in the office.

00:18:10.000 --> 00:18:13.970
But you can play a movie that
automatically tells the client

00:18:14.430 --> 00:18:18.020
to go to a web page or goes to
a different piece of content.

00:18:18.100 --> 00:18:19.350
This can also occur.

00:18:19.480 --> 00:18:21.560
How can your application
know when this occurs?

00:18:21.810 --> 00:18:22.960
How can you mediate?

00:18:23.040 --> 00:18:26.380
Those are things we'll talk about
now as we get into some API details.

00:18:26.540 --> 00:18:28.380
Back to slides.

00:18:30.290 --> 00:18:32.100
You can handle all of
these things gracefully.

00:18:32.360 --> 00:18:36.310
Slowness, we'll call it asynchrony,
just between you and me.

00:18:36.410 --> 00:18:39.990
We can handle media that's dynamic,
media that's interactive.

00:18:40.440 --> 00:18:43.100
First thing that we recommend
is that you go ahead and support

00:18:43.250 --> 00:18:44.800
URLs in your application.

00:18:44.900 --> 00:18:48.740
Those of you who already call new
movie from file in order to open

00:18:48.990 --> 00:18:53.950
local movie files can easily add
new movie from data ref in order to

00:18:53.950 --> 00:18:56.220
support the opening of movies via URL.

00:18:56.290 --> 00:18:58.450
I have a code snippet
to show you in a moment.

00:18:58.550 --> 00:19:00.100
You should be aware,
as we just mentioned,

00:19:00.100 --> 00:19:04.060
that this can take a while,
and we recommend that if you do this,

00:19:04.130 --> 00:19:09.020
you provide an affordance in your
UI for recent URLs so the user can

00:19:09.170 --> 00:19:13.170
have a history of where he or she has
recently visited available in your app.

00:19:13.300 --> 00:19:14.520
How do you do it?

00:19:14.590 --> 00:19:16.620
How do you open URLs in your app?

00:19:16.620 --> 00:19:22.770
If I know I want to go to
http://qtvote.net/movie,

00:19:22.770 --> 00:19:26.200
can I just type that into your app and
go there directly without opening a file?

00:19:26.290 --> 00:19:27.330
Yes, I can.

00:19:27.500 --> 00:19:28.430
Here's how you do it.

00:19:28.510 --> 00:19:29.660
You can do it in your application.

00:19:29.700 --> 00:19:32.940
The key API call,
new movie from data ref.

00:19:32.970 --> 00:19:37.630
A data reference is just a record,
just a structure in QuickTime that tells

00:19:37.740 --> 00:19:42.880
us what kind of reference it is and then
also the data for the reference itself.

00:19:42.910 --> 00:19:48.580
In this case, a URL reference has a type
URL data handler subtype,

00:19:48.600 --> 00:19:52.260
and the data in that data
reference is just a handle full of

00:19:52.440 --> 00:19:54.850
characters terminated by a null.

00:19:55.000 --> 00:19:58.460
So you can do this in your application
just by allocating such a handle.

00:19:58.560 --> 00:20:02.000
Putting the characters of the URL in,
make sure it's zero terminated,

00:20:02.050 --> 00:20:03.680
and call new movie from data ref.

00:20:03.940 --> 00:20:10.140
And you instantly have a feature exactly
the same as open URL in QuickTime player.

00:20:10.190 --> 00:20:13.710
Of course, you might also want to do this
programmatically based on other

00:20:13.710 --> 00:20:15.670
things that are occurring in your app.

00:20:15.870 --> 00:20:18.980
If you have a multimedia app,
you can easily add this,

00:20:18.980 --> 00:20:21.650
not as a user feature,
but as something you want to

00:20:21.710 --> 00:20:23.000
make available under the covers.

00:20:23.310 --> 00:20:26.530
For example,
an authoring app like Live Stage.

00:20:27.450 --> 00:20:29.840
When you are opening
a movie for playback,

00:20:29.860 --> 00:20:34.400
our strongest recommendation
is use the movie controller.

00:20:34.690 --> 00:20:39.340
APIs exist in QuickTime so that
you can control playback without

00:20:39.450 --> 00:20:40.400
the use of a movie controller.

00:20:40.400 --> 00:20:45.400
However,
you lose many things when this happens.

00:20:45.430 --> 00:20:48.880
The movie controller is our mechanism,
QuickTime's mechanism,

00:20:48.920 --> 00:20:52.290
to inform you of changes that
occur in the media as it plays.

00:20:52.400 --> 00:20:57.130
The movie controller is also
our mechanism for handling

00:20:57.130 --> 00:21:02.400
things like asynchrony,
for handling things like interactivity.

00:21:02.400 --> 00:21:05.310
If you don't instantiate the movie
controller and attach it to the movie,

00:21:05.410 --> 00:21:09.360
it's much more difficult for
us to present these features.

00:21:09.480 --> 00:21:14.300
In fact, the only reason that MoviePlayer
1.1 from 1992 knows how to play fast

00:21:14.390 --> 00:21:18.360
start media and streaming media is
because it uses the movie controller.

00:21:18.410 --> 00:21:21.350
And by instantiating a movie controller,
it gets the latest and greatest features.

00:21:21.470 --> 00:21:23.400
It gets the latest and greatest
version of the movie controller,

00:21:23.400 --> 00:21:27.400
the one that we shipped
with QuickTime 4.1.2.

00:21:27.400 --> 00:21:31.070
So therefore, that's how it knows how
to do all that cool stuff.

00:21:31.320 --> 00:21:33.960
You should be aware that
the user interface of the

00:21:33.960 --> 00:21:37.140
Movie Controller is optional.

00:21:37.140 --> 00:21:41.040
The experience that I showed
you in MoviePlayer 1.1 with the

00:21:41.220 --> 00:21:44.200
standard Movie Controller is
something that you can override.

00:21:44.550 --> 00:21:47.560
In one of the demos yesterday
of the MovieShaker application,

00:21:47.830 --> 00:21:50.540
they had completely overridden
the standard look of the

00:21:50.760 --> 00:21:52.200
QuickTime Movie Controller.

00:21:52.200 --> 00:21:56.660
In fact, QuickTime itself does this
with the QuickTime Player.

00:21:56.660 --> 00:21:58.200
You can do the same.

00:21:58.400 --> 00:22:01.720
Programatically, once you've instantiated
a Movie Controller,

00:22:01.720 --> 00:22:03.200
how do you start the movie?

00:22:03.200 --> 00:22:06.190
If you don't want the user to do it,
you want to do it yourself.

00:22:06.520 --> 00:22:10.170
Send the Movie Controller the
action via MCDoAction,

00:22:10.170 --> 00:22:13.410
the API call, MCActionPreRollAndPlay.

00:22:13.410 --> 00:22:17.060
That will take care of,
from now and forever, network media,

00:22:17.130 --> 00:22:19.830
local media, all the different wrinkles.

00:22:20.400 --> 00:22:21.780
All right.

00:22:21.780 --> 00:22:22.790
How do you detect edits?

00:22:22.920 --> 00:22:25.940
How do you know that the
duration of a movie has changed?

00:22:26.010 --> 00:22:29.740
Once you've instantiated MovieController,
you need to install a

00:22:29.740 --> 00:22:31.760
MovieController action filter.

00:22:31.760 --> 00:22:35.180
That's a callback routine that
you write in your application,

00:22:35.210 --> 00:22:39.640
and you let us know what it is,
by means of an API call.

00:22:39.640 --> 00:22:43.200
That allows us to call you to
tell you everything interesting

00:22:43.340 --> 00:22:44.880
that's going on in that movie.

00:22:44.880 --> 00:22:48.280
For example, to find out if the duration
of a movie has changed,

00:22:48.280 --> 00:22:51.150
look for the action,
MCAction Movie Edited.

00:22:51.200 --> 00:22:52.380
That's how we tell you.

00:22:52.450 --> 00:22:54.370
That's how the QuickTime player,
for example,

00:22:54.370 --> 00:23:00.200
knows that a stream has a fixed duration,
as opposed to an indefinite duration.

00:23:00.240 --> 00:23:04.380
If it doesn't receive an MCAction
Movie Edited action through its

00:23:04.450 --> 00:23:07.260
MovieController action filter,
it assumes the stream

00:23:07.360 --> 00:23:08.410
is a live broadcast.

00:23:12.240 --> 00:23:14.530
How do you know that media
wants to resize itself?

00:23:14.700 --> 00:23:17.350
Well, first of all,
we're very nice to you in that

00:23:17.350 --> 00:23:22.200
we don't insist that you support
media that's dynamic in this way.

00:23:22.200 --> 00:23:26.160
If you're not prepared in your
application to handle movies that resize,

00:23:26.160 --> 00:23:28.190
then we won't try to resize them.

00:23:28.200 --> 00:23:31.530
But if you are prepared,
then what you can do once you've

00:23:31.530 --> 00:23:34.950
opened a movie is to set the
movie play hint "Allow dynamic

00:23:34.950 --> 00:23:39.130
resize" as you see up on the slide,
and that will tell QuickTime that you're

00:23:39.220 --> 00:23:41.200
prepared to handle dynamic resizing.

00:23:41.200 --> 00:23:43.200
How do you know when the
movie wants to resize itself?

00:23:43.200 --> 00:23:46.080
Again, your movie controller
action filter will tell you.

00:23:46.200 --> 00:23:49.200
Look for "MC
Action Controller Size Changed."

00:23:49.200 --> 00:23:53.460
You can get the size that the movie
wants to be now and resize your window,

00:23:53.500 --> 00:23:56.910
if that's what's appropriate,
or layout your page,

00:23:56.980 --> 00:23:59.680
if that's what's appropriate.

00:24:00.520 --> 00:24:03.200
Okay, actually I'm going to skip this
demo and come back to it in a

00:24:03.200 --> 00:24:06.480
moment because I have some other
API calls I want to go through first.

00:24:06.820 --> 00:24:10.140
This MovieControllerActionFilter,
this has a lot of intelligence

00:24:10.180 --> 00:24:11.010
associated with it.

00:24:11.100 --> 00:24:13.520
That's what you're sitting
there saying right now.

00:24:13.600 --> 00:24:14.070
Yes it does.

00:24:14.180 --> 00:24:18.440
In fact, all of the things that we do
in our own user interface,

00:24:18.440 --> 00:24:20.210
you can override.

00:24:20.290 --> 00:24:22.310
You can get the streaming
status messages.

00:24:22.400 --> 00:24:23.900
When is the movie buffering?

00:24:24.060 --> 00:24:25.740
When are we negotiating with the server?

00:24:25.970 --> 00:24:28.310
We'll tell you in that
MovieControllerActionFilter,

00:24:28.520 --> 00:24:31.400
look for this particular action,
show status string.

00:24:31.460 --> 00:24:34.510
And in the QtStatusStringRecord,
you'll get a string along with

00:24:34.510 --> 00:24:38.790
some flags to tell you what kind of
string it is that you can display.

00:24:40.640 --> 00:24:43.440
Okay, what about interactivity?

00:24:43.460 --> 00:24:45.720
Movies want to link from
one place to another.

00:24:45.750 --> 00:24:47.070
I want to know when this is happening.

00:24:47.260 --> 00:24:50.400
Or I have a special way to resolve URLs.

00:24:50.590 --> 00:24:54.950
Or I've built media that's specifically
for my application and I want to

00:24:54.950 --> 00:24:58.360
mediate all of the URL linking
that occurs within my application.

00:24:58.550 --> 00:24:59.510
How do you do that?

00:24:59.750 --> 00:25:02.660
Again,
in your MovieControllerActionFilter,

00:25:02.770 --> 00:25:06.750
there's a particular action to watch for:
MCActionLinkToURL.

00:25:06.930 --> 00:25:09.610
When you see that,
we will give you the string

00:25:09.610 --> 00:25:13.600
which represents the URL that
the media is trying to link to.

00:25:13.600 --> 00:25:15.600
And you can do whatever
you want with that URL.

00:25:15.710 --> 00:25:18.880
If you wish,
you can handle the link yourself and open

00:25:18.880 --> 00:25:21.600
the media directly in your application.

00:25:21.600 --> 00:25:24.260
If you do that,
just set the return value of your

00:25:24.310 --> 00:25:28.590
function to true and QuickTime will
not perform its default handling.

00:25:28.600 --> 00:25:29.600
We'll assume that it's not.

00:25:29.600 --> 00:25:30.600
But you've done it.

00:25:30.600 --> 00:25:34.600
You can change the URL that
the media is trying to link to.

00:25:34.600 --> 00:25:35.440
You can resolve it.

00:25:35.440 --> 00:25:37.600
You can do character substitution,
what have you.

00:25:37.600 --> 00:25:41.600
Put the URL back into the
parameters that you get.

00:25:41.600 --> 00:25:43.490
Set handled equal to false.

00:25:43.580 --> 00:25:47.470
And QuickTime then will perform
its standard handling but

00:25:47.470 --> 00:25:49.600
with the URL that you gave us.

00:25:51.050 --> 00:25:54.390
Okay, if you are going to do
this overriding of URLs,

00:25:54.390 --> 00:25:59.000
you should be aware that some interesting
things may pop up in these URLs.

00:25:59.050 --> 00:26:03.730
You might not get them just naked URLs,
HTTP or RTSP and so forth.

00:26:04.220 --> 00:26:08.000
We also encode other information
into these strings as well.

00:26:08.190 --> 00:26:12.270
For example,
if media has been authored to link to

00:26:12.290 --> 00:26:17.870
a movie within the QuickTime player,
just as in an HTML webpage,

00:26:18.280 --> 00:26:21.650
there will be target information
associated with that URL that you

00:26:21.780 --> 00:26:25.980
are going to want to have to know
where the link should be represented,

00:26:25.990 --> 00:26:27.000
where it should be carried out.

00:26:27.000 --> 00:26:29.860
In QuickTime,
we give you this information

00:26:29.870 --> 00:26:31.760
in the same string as the URL.

00:26:32.180 --> 00:26:36.000
The format is, as you see here,
the URL is bracketed with angle brackets.

00:26:36.000 --> 00:26:37.000
A T will represent the URL.

00:26:37.040 --> 00:26:38.000
A V will represent the URL.

00:26:38.000 --> 00:26:41.000
A V will represent that the
target information follows.

00:26:41.000 --> 00:26:42.880
Then within another
set of angle brackets,

00:26:43.010 --> 00:26:45.000
we will give you the target information.

00:26:45.170 --> 00:26:50.360
The target can be the name of a frame,
just as in HTML, which QuickTime player,

00:26:50.400 --> 00:26:53.000
by the way,
interprets as the name of a window.

00:26:53.000 --> 00:26:56.580
It can be some special
string values such as myself,

00:26:56.580 --> 00:27:00.330
which means replace me,
the movie that wants to link,

00:27:00.330 --> 00:27:03.000
with whatever this link points to.

00:27:03.130 --> 00:27:06.010
It can be web browser,
which QuickTime interprets to

00:27:06.010 --> 00:27:07.950
mean show the link in a webpage.

00:27:08.000 --> 00:27:09.950
Or it can be QuickTime player.

00:27:10.000 --> 00:27:13.310
Now,
these might not be the only weird things

00:27:13.310 --> 00:27:15.980
that show up in these URL strings.

00:27:16.020 --> 00:27:16.880
In fact, they're not.

00:27:17.000 --> 00:27:20.950
Right now, what we're recommending is,
if you see anything you don't recognize,

00:27:21.040 --> 00:27:23.000
then don't try to handle it yourself.

00:27:23.000 --> 00:27:27.000
Just pass it through to QuickTime,
and QuickTime will deal with it.

00:27:27.190 --> 00:27:29.040
In the future,
we're going to be talking about

00:27:29.190 --> 00:27:32.640
a more robust mechanism that's
more generalized for URL linking,

00:27:32.640 --> 00:27:34.970
but for now,
this will get you started with

00:27:34.970 --> 00:27:38.110
mediation of QuickTime URLs.

00:27:38.260 --> 00:27:40.810
You can see more of the
kinds of interactivity that

00:27:40.930 --> 00:27:42.490
QuickTime movies can play.

00:27:42.640 --> 00:27:45.160
If you missed the previous session,
you missed some great demos of this.

00:27:45.250 --> 00:27:47.350
But also tomorrow morning
right here at 9:00,

00:27:47.500 --> 00:27:49.220
more interactivity will be presented.

00:27:49.300 --> 00:27:51.850
And as you witness that,
remember that you can mediate

00:27:51.950 --> 00:27:53.850
all this in your application.

00:27:54.320 --> 00:27:57.330
Okay, so we dealt with several of
the characteristics of the Web.

00:27:57.520 --> 00:27:59.920
Here I'm standing on stage dealing
with three prime characteristics of

00:27:59.920 --> 00:28:02.200
the Web before you're here today,
feeling really important.

00:28:02.200 --> 00:28:05.150
Dealt with interactivity,
dealt with dynamism.

00:28:05.190 --> 00:28:08.070
The only thing left that we
have to deal with is slowness.

00:28:08.070 --> 00:28:13.130
So what we've decided to do with
QuickTime 4.1.2 is to distribute a T3

00:28:13.130 --> 00:28:15.760
with every version that you download.

00:28:16.270 --> 00:28:19.200
And that's it,
so we can skip the rest of these slides.

00:28:19.280 --> 00:28:22.290
But in fact, it turns out that there are
export restrictions on T3s,

00:28:22.360 --> 00:28:25.540
and so we can't make them available
to everyone here in the room.

00:28:25.980 --> 00:28:30.180
Therefore, some of you might still be
suffering through slow connections

00:28:30.580 --> 00:28:32.680
for one reason or another.

00:28:32.870 --> 00:28:34.690
Therefore,
we're recommending that those of you

00:28:34.780 --> 00:28:38.850
who open and play QuickTime media in
your apps be prepared to deal with

00:28:38.850 --> 00:28:43.750
slowness by allowing QuickTime to
handle network transfers asynchronously.

00:28:43.800 --> 00:28:46.800
Now, asynchrony is not new to QuickTime,
of course.

00:28:46.800 --> 00:28:50.030
We've been dealing with it in
web browsers since the very first

00:28:50.030 --> 00:28:51.940
release of the QuickTime plugin.

00:28:52.060 --> 00:28:53.800
And of course,
we're dealing with asynchrony

00:28:53.800 --> 00:28:54.780
with QuickTime streaming.

00:28:54.800 --> 00:28:57.960
But for the first time publicly,
we're talking about how you--well,

00:28:57.960 --> 00:29:00.210
the first time publicly
in Northern California,

00:29:00.240 --> 00:29:04.080
anyway--we're going to tell you
how you can add this to your own

00:29:04.200 --> 00:29:09.270
applications and not force the
user to wait for a slow connection.

00:29:10.540 --> 00:29:13.610
Now what you should be aware
is once you give permission to

00:29:13.720 --> 00:29:19.600
QuickTime to do things asynchronously,
movies that you open might not

00:29:19.600 --> 00:29:22.040
be in a state that you expect.

00:29:22.320 --> 00:29:24.180
They might not immediately be playable.

00:29:24.270 --> 00:29:27.570
They might not immediately be savable
because you've told QuickTime,

00:29:27.570 --> 00:29:28.780
"Do this asynchronously.

00:29:28.890 --> 00:29:32.760
Let it happen when it happens."
You as the application take on

00:29:32.760 --> 00:29:36.950
the responsibility for inquiring
what state a movie is in before

00:29:36.950 --> 00:29:39.450
you perform an operation with it.

00:29:40.000 --> 00:29:41.500
OK.

00:29:41.500 --> 00:29:42.840
How do you do it?

00:29:42.840 --> 00:29:46.600
When you call new movie from file,
or new movie from data ref,

00:29:46.800 --> 00:29:49.900
set in the flags field,
the flags parameter of those calls,

00:29:50.110 --> 00:29:51.110
new movie async OK.

00:29:51.210 --> 00:29:55.260
That's your permission for
QuickTime to do things asynchronously.

00:29:55.260 --> 00:29:58.800
Then, a movie will be returned to
you that may not be playable,

00:29:58.800 --> 00:29:59.920
may not be saveable.

00:30:00.040 --> 00:30:02.740
It's up to you to call get
movie load state to find out

00:30:02.950 --> 00:30:06.520
what state it's currently in,
to find out what you can do with it.

00:30:06.520 --> 00:30:09.130
And then if an error should occur,
you can find out what that is

00:30:09.270 --> 00:30:11.180
by calling get movie status.

00:30:11.180 --> 00:30:13.740
Was there a problem with
a network transaction?

00:30:13.810 --> 00:30:16.860
Do I, am I missing a codec for this
particular piece of media?

00:30:16.860 --> 00:30:18.510
Call get movie status
to find that stuff out.

00:30:20.720 --> 00:30:23.570
Okay,
you can combine the flag newmovieasyncOK

00:30:23.930 --> 00:30:27.150
with other flags that you may
already be using when calling

00:30:27.150 --> 00:30:29.600
newmoviefromfile or newmoviefromdataref.

00:30:29.600 --> 00:30:31.830
It just ores right in there
and we're happy with all that.

00:30:31.960 --> 00:30:34.220
The flag's field is what,
thirty-two bits?

00:30:34.290 --> 00:30:34.890
Are we running low?

00:30:34.890 --> 00:30:35.590
No?

00:30:35.660 --> 00:30:36.770
Okay, we have a few more.

00:30:36.880 --> 00:30:39.030
Stay tuned next year, come back.

00:30:40.230 --> 00:30:43.640
GetMovieLoadState that tells you
what state the movie is in currently

00:30:44.190 --> 00:30:46.590
currently returns the following values.

00:30:46.710 --> 00:30:48.770
There may be an error.

00:30:48.890 --> 00:30:49.950
That would be a negative value.

00:30:50.100 --> 00:30:53.100
You can then call GetMovieStatus
to find out what's wrong.

00:30:53.150 --> 00:30:56.580
We might tell you that the
movie is currently loading,

00:30:56.620 --> 00:31:02.100
in which case wait a little while longer
before calling GetMovieLoadState again.

00:31:02.200 --> 00:31:06.910
We could tell you the movie is playable,
which means you can

00:31:06.910 --> 00:31:06.910
immediately start to play it.

00:31:07.420 --> 00:31:10.640
However, that can occur before the
entire movie has loaded.

00:31:10.640 --> 00:31:14.830
You saw earlier that QuickTime handles
fast start media by allowing playback

00:31:14.830 --> 00:31:17.400
before the entire transfer is complete.

00:31:17.400 --> 00:31:19.700
So a movie can be playable,
you should note,

00:31:20.140 --> 00:31:21.230
before the loading is done.

00:31:21.730 --> 00:31:24.690
When everything is loaded,
getMovieLoadState will

00:31:24.690 --> 00:31:26.400
return load state complete.

00:31:26.400 --> 00:31:29.600
At that point, it's safe, for example,
to save the movie to a local file

00:31:29.600 --> 00:31:31.390
if your application enables that.

00:31:31.520 --> 00:31:35.340
So here you can see that you can compare
these return values arithmetically.

00:31:35.420 --> 00:31:39.420
The more advanced load states
are arithmetically greater

00:31:39.420 --> 00:31:41.400
than the less advanced ones.

00:31:41.400 --> 00:31:44.650
It's pretty smart how we managed
to figure out how to do that

00:31:44.650 --> 00:31:46.400
all by ourselves in Cupertino.

00:31:48.480 --> 00:31:53.770
OK, if you get an error when you are
loading media for one reason or another,

00:31:53.930 --> 00:31:58.780
you can find out exactly what
went wrong by a getMovieStatus.

00:31:58.860 --> 00:32:02.730
That will return you a
component result that,

00:32:02.730 --> 00:32:02.730
uh,

00:32:03.140 --> 00:32:05.440
will give you an indication
of the error that occurred.

00:32:05.520 --> 00:32:07.290
What I want to do actually
is go back to demo one.

00:32:07.490 --> 00:32:08.640
There's a fast guy back there.

00:32:08.640 --> 00:32:09.560
All I have to do is walk over here.

00:32:09.560 --> 00:32:09.980
Watch this.

00:32:09.990 --> 00:32:13.020
I walk over here, he goes, "No,
I won't do that to you.

00:32:13.020 --> 00:32:13.610
Sorry."

00:32:15.310 --> 00:32:19.270
What I have here is a
URL in my scrapbook,

00:32:19.270 --> 00:32:20.900
which I will now copy.

00:32:21.020 --> 00:32:24.740
And I have a very smart application,
which is actually quite small.

00:32:24.830 --> 00:32:27.640
This little application,
which actually has a lot of stuff

00:32:27.770 --> 00:32:31.890
linked into it that I can't talk about,
so I won't show you how big it really is,

00:32:31.890 --> 00:32:33.340
could be much smaller.

00:32:33.620 --> 00:32:38.140
All it knows how to do are the basic
things for opening QuickTime media.

00:32:38.180 --> 00:32:39.500
Open movie from DataRef.

00:32:39.500 --> 00:32:41.740
I'm sorry, new movie from DataRef.

00:32:41.860 --> 00:32:43.280
New movie controller.

00:32:43.470 --> 00:32:45.500
Set a movie controller action filter.

00:32:45.940 --> 00:32:47.260
Close the movie file.

00:32:47.340 --> 00:32:47.820
Let it play.

00:32:48.180 --> 00:32:51.510
That's all this thing knows how to do,
but it also allows QuickTime to

00:32:51.510 --> 00:32:53.500
do things asynchronously.

00:32:53.660 --> 00:32:57.380
It has an open URL menu item
that allows me to paste in a URL.

00:32:57.480 --> 00:33:01.500
This is a particularly large movie
that might take a while to transfer,

00:33:01.500 --> 00:33:03.500
although it's actually
right next to me here,

00:33:03.500 --> 00:33:04.500
the server is.

00:33:04.690 --> 00:33:10.990
What you'll see this application
do is while the movie's load

00:33:10.990 --> 00:33:16.190
state is prior to playability,
what it will do is

00:33:16.190 --> 00:33:19.510
display a loading message.

00:33:19.990 --> 00:33:21.900
So here you see that
it's currently loading,

00:33:21.900 --> 00:33:24.660
and as soon as the
movie becomes playable,

00:33:24.660 --> 00:33:28.210
then it actually displays
the movie in a window.

00:33:31.100 --> 00:33:33.650
Let's see.

00:33:33.660 --> 00:33:36.390
Oh, I haven't got the URL for the even
slower movie out on the Akamai

00:33:36.390 --> 00:33:38.000
network that I can show you.

00:33:38.160 --> 00:33:41.620
That would allow you to see that
loading thing a little bit longer.

00:33:41.920 --> 00:33:46.180
Your application can choose what
to do while the movie is loading.

00:33:46.450 --> 00:33:49.580
The whole point is, while it's loading,
I have control over the menus.

00:33:49.810 --> 00:33:51.600
Boy, that was quick, huh?

00:33:51.960 --> 00:33:54.180
I've already returned
control to the user.

00:33:54.340 --> 00:33:57.550
I'm not waiting for a new
movie from DataRef to return.

00:33:57.940 --> 00:34:00.130
I'm actually checking the state
of the movie independently.

00:34:04.100 --> 00:35:07.800
[Transcript missing]

00:35:08.780 --> 00:35:13.600
Now, we're going to move over to a second
topic for this particular session.

00:35:13.670 --> 00:35:15.680
That covers my part of the session.

00:35:15.820 --> 00:35:19.480
What we're going to talk about now
is some features that you should

00:35:19.480 --> 00:35:21.300
be aware of of the streaming APIs.

00:35:21.380 --> 00:35:22.700
If we can go back to slides.

00:35:22.700 --> 00:35:25.030
We're going to talk,
Anne Jones is going to come out

00:35:25.030 --> 00:35:27.780
here and talk to you about some
things you should be aware of when

00:35:28.080 --> 00:35:31.840
you open movies that are streaming,
they can have surprising things inside

00:35:31.840 --> 00:35:34.010
them that you may or may not be aware of.

00:35:34.100 --> 00:35:36.980
So she'll tell you all
about those details now.

00:35:45.540 --> 00:35:48.920
I'm going to talk about some
of the things that you can do

00:35:49.010 --> 00:35:50.500
when you use the streaming APIs.

00:35:50.980 --> 00:35:53.820
Now, why would you want to
use the streaming APIs?

00:35:53.850 --> 00:35:57.810
If you use just the plain movie APIs,
you can get pretty good

00:35:58.160 --> 00:35:59.640
streaming playback experience.

00:35:59.660 --> 00:36:03.790
But if you want more information
about what's being streamed or more

00:36:03.790 --> 00:36:06.540
control over what's being streamed,
then you should use some

00:36:06.540 --> 00:36:07.530
of the streaming APIs.

00:36:07.700 --> 00:36:10.220
And also, as you'll see later,
if you want to do a

00:36:10.220 --> 00:36:12.880
broadcast application,
you'll have to use the streaming APIs.

00:36:18.020 --> 00:36:21.250
With streaming,
two new track types were introduced:

00:36:21.380 --> 00:36:24.970
hint tracks and streaming tracks.

00:36:24.980 --> 00:36:28.860
Hint tracks are found in
movies that are put on servers,

00:36:28.890 --> 00:36:32.950
and the streaming servers looks at the
information inside these hint tracks

00:36:33.220 --> 00:36:34.900
and forms RTP packets out of them.

00:36:34.900 --> 00:36:38.630
The really cool thing about using
these hint tracks is that it

00:36:38.630 --> 00:36:42.720
makes the streaming servers media
agnostic and codec agnostic.

00:36:42.960 --> 00:36:46.900
So, for instance, later this year when we
introduce MPEG streaming,

00:36:47.040 --> 00:36:49.740
we'll have to, of course,
rev the client to handle

00:36:50.030 --> 00:36:54.870
streaming of MPEG reception and
also rev the hinting components

00:36:54.900 --> 00:36:56.900
so that we can hint MPEG movies.

00:36:56.900 --> 00:37:00.120
But these movies can be placed after
they're hinted on the streaming

00:37:00.190 --> 00:37:03.290
servers that are out there today,
and the servers can just

00:37:03.290 --> 00:37:06.790
stream them without knowing
anything about MPEG movies.

00:37:07.320 --> 00:37:11.970
If you have an authoring app and
you want to add hinting to your app,

00:37:11.970 --> 00:37:16.950
it's done through the basic
QuickTime export components.

00:37:17.070 --> 00:37:21.320
Something to remember is that
if you have a movie with a

00:37:21.320 --> 00:37:25.500
hint track and it gets edited,
then the movie needs to be re-hinted.

00:37:27.340 --> 00:37:29.480
The other kind of track
are streaming tracks,

00:37:29.480 --> 00:37:33.400
and these are found on movies
that are on the users' machines.

00:37:33.500 --> 00:37:37.630
And API-wise, there's a lot more that
you can do with these.

00:37:37.760 --> 00:37:41.840
The streaming track usually
contains a very small sample.

00:37:41.850 --> 00:37:46.630
The amount of data is like
a RTSP URL or SDP data.

00:37:46.750 --> 00:37:50.200
And when these movies are first opened,
so they only have this URL,

00:37:50.200 --> 00:37:54.590
and they don't know anything about
the media that's going to be streamed.

00:37:54.890 --> 00:37:59.770
As the stream track contacts the server,
it gets more information from the server

00:37:59.870 --> 00:38:03.530
and it starts knowing more information
about the things to be streamed,

00:38:03.530 --> 00:38:06.660
such as the number of streams,
the media type of the things

00:38:06.660 --> 00:38:12.010
that are being streamed,
the dimensions,

00:38:12.010 --> 00:38:12.010
the duration of the thing being streamed,
etc.

00:38:12.680 --> 00:38:16.570
Something else to remember about
movies with stream tracks is that

00:38:16.600 --> 00:38:18.600
they really should be pre-pre-rolled.

00:38:18.600 --> 00:38:21.500
And pre-pre-roll is sort of like
an async version of pre-roll.

00:38:21.590 --> 00:38:24.010
And if you use the movie controller,
pre-roll and play,

00:38:24.010 --> 00:38:25.600
you'll get that automatically.

00:38:25.600 --> 00:38:28.880
But anyway, during pre-pre-roll,
that's when the streaming

00:38:28.880 --> 00:38:31.410
track contacts the server,
gets all the information,

00:38:31.480 --> 00:38:33.540
buffers up some data, gets ready to play.

00:38:33.670 --> 00:38:36.280
And if you don't
pre-pre-roll these movies,

00:38:36.290 --> 00:38:40.440
then your playback at the beginning
will be pretty bad and you'll lose

00:38:40.440 --> 00:38:41.710
lots of data at the beginning.

00:38:43.310 --> 00:38:45.600
Okay,
if you want to use the streaming APIs,

00:38:45.640 --> 00:38:49.720
include QTSMovie.h and
QuickTimeStreaming.h.

00:38:50.220 --> 00:38:55.410
You'll mostly make the calls
QTS Media Get Info to get information

00:38:55.470 --> 00:38:59.740
about the presentation as a whole or
QTS Media Get In the Stream Info to get

00:38:59.740 --> 00:39:02.640
information about a particular stream.

00:39:06.280 --> 00:39:08.040
If you have a movie,
to find out if you have

00:39:08.040 --> 00:39:12.050
a stream track in it,
call getMovieIntoTrackType

00:39:12.170 --> 00:39:14.700
with kqts-streamMediaType.

00:39:14.790 --> 00:39:17.760
Once you have the stream track,
you can get the stream

00:39:17.760 --> 00:39:19.510
media handler from it.

00:39:21.760 --> 00:39:24.580
Once you have the stream media handler,
there's all sorts of information you

00:39:24.590 --> 00:39:26.500
can get about what's being streamed.

00:39:26.570 --> 00:39:29.940
In this example,
we're getting the average running data

00:39:29.940 --> 00:39:33.640
rate and the average loss percentage
of the thing that's being streamed.

00:39:33.680 --> 00:39:36.740
And you do this by calling
QTSMediaGetInfo with

00:39:36.900 --> 00:39:39.160
particular selectors.

00:39:39.160 --> 00:39:45.510
Okay,
another thing you can find out is how

00:39:45.510 --> 00:39:48.700
many streams are coming from the server.

00:39:53.780 --> 00:39:56.450
Once you have the number of streams,
you can find out information

00:39:56.830 --> 00:39:58.980
about each particular stream.

00:39:59.100 --> 00:40:01.150
In this example,
we're getting the media type

00:40:01.290 --> 00:40:04.890
of a particular stream and
also the sample description.

00:40:05.270 --> 00:40:07.230
There's lots of other information
that I'm not showing here

00:40:07.270 --> 00:40:13.340
that you could actually get,
such as the frame rate, the dimensions,

00:40:13.440 --> 00:40:15.010
volume.

00:40:15.630 --> 00:40:18.460
OK, if you're going to use
the streaming APIs,

00:40:18.580 --> 00:40:21.460
there's some errors that
you should be aware of.

00:40:21.490 --> 00:40:25.290
QtS unknown value error means that
the thing that you're querying

00:40:25.490 --> 00:40:28.330
doesn't know the answer yet,
but it might later.

00:40:28.570 --> 00:40:33.120
So for instance, the streampack has just
contacted the server,

00:40:33.120 --> 00:40:35.890
and some information has come across,
and it knows that there

00:40:35.890 --> 00:40:38.010
are three streams,
but it doesn't know the media

00:40:38.070 --> 00:40:39.410
type of these streams yet.

00:40:39.540 --> 00:40:42.700
So if you ask for the media
type of a particular stream,

00:40:42.980 --> 00:40:45.050
you'll get back this error.

00:40:45.060 --> 00:40:48.200
Later on, if you ask for the media type
and it's gotten that information,

00:40:48.200 --> 00:40:52.590
then it will return the actual
media type and return no error.

00:40:53.050 --> 00:40:55.080
QTS bad selector error,
on the other hand,

00:40:55.080 --> 00:40:58.430
means that the thing that you're
querying will never know the answer,

00:40:58.430 --> 00:41:00.150
and so you shouldn't try again.

00:41:00.150 --> 00:41:06.240
And an example is if you make
volume info calls on a video stream.

00:41:08.840 --> 00:41:12.380
Okay, if you want more control
over what you're streaming,

00:41:12.430 --> 00:41:16.010
then you'll need to use
the QTS presentation calls.

00:41:16.190 --> 00:41:19.540
A QTS presentation is a set
of streams with one timeline.

00:41:19.650 --> 00:41:23.170
So you can think of it as the
set of streams that one stream

00:41:23.170 --> 00:41:25.160
media handler would control.

00:41:25.220 --> 00:41:27.510
And in fact,
the stream media handler is implemented

00:41:27.920 --> 00:41:30.700
using the QTS presentation APIs.

00:41:30.770 --> 00:41:34.870
And these APIs are the same ones that you
can find in QuickTimeStreaming.h and the

00:41:34.980 --> 00:41:37.590
same ones that you can use in your apps.

00:41:40.770 --> 00:41:43.570
If you have a Stream Media Handler,
you can get the presentation

00:41:43.570 --> 00:41:46.830
from the Media Handler by
calling QTS Media Get Info

00:41:46.830 --> 00:41:49.780
with the appropriate selector.

00:41:51.650 --> 00:41:54.960
Once you have the presentation,
there's all sorts of

00:41:54.960 --> 00:41:56.760
things you can do with it.

00:41:57.010 --> 00:42:03.090
An example here is if you're streaming
a movie and it's got two audio tracks,

00:42:03.270 --> 00:42:07.170
you can change the volume of the
audio tracks independently by calling

00:42:07.290 --> 00:42:09.630
QTSPresSetVolumes on each audio track.

00:42:09.640 --> 00:42:14.630
And this is something that you
can't do using the movie APIs alone.

00:42:15.680 --> 00:42:18.890
So this is just a very brief
introduction of things you can do

00:42:18.890 --> 00:42:22.220
using the streaming APIs on playback.

00:42:22.220 --> 00:42:27.180
And if you're more interested,
look in the file QuickTimeStreaming.h.

00:42:29.510 --> 00:42:33.700
and Kevin Marks will tell you
more about the broadcast specific

00:42:33.850 --> 00:42:36.410
portions of the streaming APIs.

00:42:46.140 --> 00:42:50.160
Hi, the Streaming Broadcast APIs is
not something we've covered before.

00:42:50.160 --> 00:42:54.030
I'm going to discuss them briefly
here and show some demonstrations

00:42:54.100 --> 00:42:56.100
of things you can do with them.

00:42:56.100 --> 00:42:59.780
If you want to get access to these,
I'll tell you at the end how you can be

00:42:59.860 --> 00:43:02.160
seeded with these as we develop them.

00:43:04.180 --> 00:43:09.450
So the way QuickTime streaming is
organized internally is that transmitting

00:43:09.490 --> 00:43:13.600
is parallel to receiving in API terms.

00:43:13.610 --> 00:43:16.090
Both of them are QTS presentations,
as Anne just discussed.

00:43:16.100 --> 00:43:22.100
There are different components that
are used inside the broadcast side.

00:43:22.100 --> 00:43:25.080
There are sources that
provide sample data.

00:43:25.080 --> 00:43:29.220
Packetizers then break
that up for the net,

00:43:29.350 --> 00:43:33.100
and it's then sent out over various
different network configurations.

00:43:35.900 --> 00:43:38.640
Anne just mentioned
QuickTime presentations.

00:43:38.640 --> 00:43:43.320
Again, see QuickTimeStreaming.h here
for how to manipulate these.

00:43:48.700 --> 00:43:53.900
Here's a simple diagram
of how this works.

00:43:53.900 --> 00:43:57.700
You've got your application at the
top which talks to the presentation.

00:43:57.700 --> 00:44:01.090
Within the presentation there are
various streams which may be video,

00:44:01.090 --> 00:44:02.700
audio, text or whatever.

00:44:02.700 --> 00:44:06.180
And within each stream there are a
series of different components that are

00:44:06.180 --> 00:44:07.700
handling the different parts of this.

00:44:07.830 --> 00:44:13.700
The sources providing media data
in the usual QuickTime format.

00:44:13.870 --> 00:44:20.230
The packetizer takes that media data,
finds out from the stream what size

00:44:20.240 --> 00:44:22.700
it wants the packets to be and so on.

00:44:22.790 --> 00:44:26.320
And breaks it up into that
and hands it on to the network

00:44:26.320 --> 00:44:28.570
component that sends it out.

00:44:31.540 --> 00:44:35.300
To create a transmission,
we have a description stored in

00:44:35.320 --> 00:44:40.000
a QuickTime Atom container that
describes the number of streams,

00:44:40.000 --> 00:44:43.720
network connectivity,
which sources and which

00:44:43.730 --> 00:44:45.040
packetizers to use.

00:44:45.050 --> 00:44:48.970
You can construct these yourself,
or you will be able to once

00:44:48.970 --> 00:44:52.960
we tell you how to do that,
but importers can also make them

00:44:53.040 --> 00:44:55.880
from other formats such as SDP files.

00:44:56.200 --> 00:44:58.830
And the way that you would start
a transmission is you call new

00:44:58.830 --> 00:45:02.190
presentation from data and pass
in one of these atom containers.

00:45:02.420 --> 00:45:05.470
And you set the flag to
say it's in send mode.

00:45:09.930 --> 00:45:14.970
As Kevin said earlier,
you need to be aware that a lot of this

00:45:14.970 --> 00:45:18.490
networking stuff requires asynchrony,
that you will try something

00:45:18.490 --> 00:45:21.900
out and things won't be
constructed straight away.

00:45:22.020 --> 00:45:25.700
You need to define a
QTS notification proc,

00:45:25.920 --> 00:45:31.080
which you set up in the presentation,
and the presentation will

00:45:31.080 --> 00:45:34.900
then call you back with status
information when something changes.

00:45:34.900 --> 00:45:39.400
It handles the asynchronous actions,
it also gives you error messages and some

00:45:39.620 --> 00:45:41.900
kind of knowledge when things change.

00:45:41.900 --> 00:45:43.900
This is true on both the
send and receive sides.

00:45:43.900 --> 00:45:47.130
On the receive side,
you get notifications to say when

00:45:47.130 --> 00:45:48.900
a stream has arrived and so on.

00:45:48.900 --> 00:45:52.520
If you want a fine-grained
knowledge of what's going on inside,

00:45:52.520 --> 00:45:55.900
you can set this up on the
receive side and listen to it.

00:45:55.900 --> 00:46:01.370
On the broadcast side,
the component chain is built when you

00:46:01.380 --> 00:46:04.900
pre-roll or preview the presentation.

00:46:04.900 --> 00:46:07.900
So you call QTS pre-roll or QTS preview.

00:46:07.900 --> 00:46:11.210
However,
it won't be completely constructed and

00:46:11.210 --> 00:46:15.900
set up straight away because network
negotiations may need to happen.

00:46:15.900 --> 00:46:20.060
So you'll need to idle the presentation
a bit first and wait for acts coming

00:46:20.070 --> 00:46:25.900
back from the different parts to say
that you're okay to start broadcasting.

00:46:29.600 --> 00:46:32.600
So we'll do a demonstration
starting a broadcast.

00:46:32.670 --> 00:46:35.100
Kevin's going to come out
and help me with this.

00:46:38.100 --> 00:46:44.100
[Transcript missing]

00:46:44.700 --> 00:46:50.900
[Transcript missing]

00:46:51.620 --> 00:46:56.450
So if I start the application up,
I'm going to open an STP file,

00:46:56.450 --> 00:47:04.970
which is the IETF standard file
for describing RTP streaming media.

00:47:06.700 --> 00:47:08.560
Open that up.

00:47:08.560 --> 00:47:11.840
It's for my camera.

00:47:11.840 --> 00:47:14.300
I can point this at you
and see what we can see.

00:47:14.300 --> 00:47:17.270
Over here,
Kevin's going to open up a copy of

00:47:17.290 --> 00:47:19.700
the same STP file on his machine.

00:47:19.700 --> 00:47:28.390
And you can see that
it's buffering up here.

00:47:28.390 --> 00:47:28.390
It's probably not well lit enough.

00:47:28.390 --> 00:47:28.390
I'll turn it around and
point it at him for a bit.

00:47:29.090 --> 00:47:35.500
So you can see I'm getting a
slow frame rate preview over

00:47:35.500 --> 00:47:37.410
here on the broadcast machine.

00:47:37.480 --> 00:47:39.940
On the client machine you're
seeing QuickTime streaming.

00:47:40.010 --> 00:47:42.280
You'll notice that there's a delay.

00:47:42.280 --> 00:47:44.610
I'll move the camera away and back.

00:47:45.500 --> 00:48:10.700
[Transcript missing]

00:48:12.110 --> 00:48:14.000
Does it blow up?

00:48:14.000 --> 00:48:16.000
I could do it down here.

00:48:16.000 --> 00:48:20.000
If I do it on this side,
you get the usual feedback thing.

00:48:20.000 --> 00:48:24.000
If I do it over there,
I'll zoom this thing.

00:48:24.000 --> 00:48:26.990
You get a longer feedback loop.

00:48:26.990 --> 00:48:27.000
It doesn't work.

00:48:27.000 --> 00:48:29.000
Was he wearing a vibe?

00:48:29.000 --> 00:48:30.980
It's on the table back here.

00:48:31.120 --> 00:48:32.990
Okay, back to slides, please.

00:48:45.750 --> 00:48:49.470
I mentioned the sources earlier.

00:48:49.470 --> 00:48:53.700
Sources are where the media data comes
from that's sent in the broadcast.

00:48:53.700 --> 00:48:55.700
And in that case,
we were using a sequence grabber sourcer.

00:48:55.700 --> 00:48:57.890
But it doesn't have to come from that.

00:48:57.900 --> 00:49:00.700
The media can come from anywhere.

00:49:00.700 --> 00:49:03.110
And if you're familiar with QuickTime,
you'll know about sample

00:49:03.140 --> 00:49:06.660
descriptions that describe
how media data is compressed.

00:49:06.660 --> 00:49:09.700
And you also need to provide a timestamp.

00:49:10.130 --> 00:49:16.260
Writing your own source is a
powerful way of extending this.

00:49:16.470 --> 00:49:20.900
Broadcasting,
streaming isn't just for video and audio.

00:49:20.900 --> 00:49:25.920
You can imagine using it to send
experimental results or stock

00:49:25.920 --> 00:49:28.890
prices or whatever you feel like.

00:49:29.350 --> 00:49:31.340
There are built-in
sources into QuickTime,

00:49:31.360 --> 00:49:33.850
including the Sequence Grabber Sourcer,
which is the one that I've

00:49:33.930 --> 00:49:36.970
just demonstrated there,
but you can add your own.

00:49:39.170 --> 00:49:43.640
So what the sources provide
to QuickTime is a data record.

00:49:43.650 --> 00:49:46.240
And you can see there's a
whole series of fields here.

00:49:46.270 --> 00:49:50.080
The key ones are the time
value and sample description.

00:49:50.080 --> 00:49:53.160
You can get the time value back
from a QuickTime time base.

00:49:53.160 --> 00:49:55.640
And you provide the sample
description to describe your

00:49:55.640 --> 00:49:57.340
media and send the data through.

00:49:57.380 --> 00:50:00.650
And you notice you have
to provide a release proc,

00:50:00.650 --> 00:50:04.280
which is called when the next stage in
the chain is finished with the data.

00:50:04.280 --> 00:50:06.910
And then it wants it to be disposed.

00:50:06.930 --> 00:50:09.560
And there's also duration and flags.

00:50:09.630 --> 00:50:15.380
Duration is only really
relevant for audio data.

00:50:15.910 --> 00:50:19.480
For video data, for example,
you don't necessarily know

00:50:19.480 --> 00:50:21.960
when the next frame is coming,
so the client will just display

00:50:21.960 --> 00:50:23.800
the frame when it comes through.

00:50:23.800 --> 00:50:28.800
But the time values need to be matching,
or your sync will go.

00:50:28.800 --> 00:50:34.990
And, second demonstration,
I'm going to show you a custom sourcer.

00:50:44.900 --> 00:50:52.450
Okay, so what I have here is a sourcer
component which I can reinstall here.

00:50:52.510 --> 00:50:55.900
And then I can use the same
application as I had before.

00:50:56.240 --> 00:50:57.900
This time,
instead of opening the SDP file,

00:50:57.900 --> 00:51:02.860
I'm opening an Atom container file
that contains that container describing

00:51:02.900 --> 00:51:06.180
the streams that I'm going to use
and says to use my custom sourcer

00:51:06.180 --> 00:51:11.360
rather than relying on the default
of using the sequence grabber sourcer

00:51:11.360 --> 00:51:13.900
which you get with the SDP file.

00:51:18.160 --> 00:51:25.100
So here what I've got is a sourcer
that opens a movie file and I can

00:51:25.100 --> 00:51:27.690
step through the frames in the file
and try and catch up with myself.

00:51:28.430 --> 00:51:32.680
If we open this on the client,
over here you'll see that, again,

00:51:32.680 --> 00:51:36.300
it buffers, it gets a larger size,
and it's displaying the slides.

00:51:36.380 --> 00:51:40.180
And I can, you notice again that I've
changed it here and it'll change

00:51:40.190 --> 00:51:42.300
over there three seconds later.

00:51:42.300 --> 00:51:46.280
Um, there's something, it's not attached.

00:51:49.060 --> 00:51:54.770
So in this example,
I've taken the slides from

00:51:54.770 --> 00:51:59.330
the presentation and exported
them as picked files and made

00:51:59.330 --> 00:52:00.600
the picked files into a movie.

00:52:00.650 --> 00:52:03.440
So what I'm sending over
the wire is picked data,

00:52:03.600 --> 00:52:08.890
which actually is fairly well
compressed for this kind of information.

00:52:13.600 --> 00:52:22.500
[Transcript missing]

00:52:24.840 --> 00:52:27.500
I could,
we could just send out this audio

00:52:27.500 --> 00:52:30.680
and the slides and that would give
a fairly good example of what's

00:52:30.690 --> 00:52:35.670
going on until we hit the demo.

00:52:39.630 --> 00:52:41.620
I don't think I can give this
presentation with three second lag,

00:52:41.720 --> 00:52:44.910
so I'll go back to the ordinary
slides to do the rest of it.

00:52:54.550 --> 00:52:57.360
So the next stage in the chain
that I spoke about earlier,

00:52:57.360 --> 00:53:00.340
packetizers and reassemblers.

00:53:00.340 --> 00:53:04.440
We already published the APIs for these
and explained how to build them because

00:53:04.440 --> 00:53:07.600
they're also used for stored content.

00:53:07.600 --> 00:53:10.610
When you hint a movie,
the packetizer breaks it up into

00:53:10.620 --> 00:53:15.830
packets and when you play a movie back,
the reassembler puts

00:53:16.110 --> 00:53:18.810
them back together again.

00:53:21.000 --> 00:55:17.200
[Transcript missing]

00:55:20.850 --> 00:55:24.800
In terms of transporting
your media over the Internet,

00:55:24.800 --> 00:55:28.800
there are three main ways of doing
this with QuickTime streaming,

00:55:28.800 --> 00:55:39.130
which are multicast, unicast,
and reflected unicast.

00:55:39.130 --> 00:55:39.130
Multicast is

00:55:39.630 --> 00:55:42.700
Basically,
we make the job of making multiple

00:55:42.780 --> 00:55:46.600
copies the problem of the network itself,
of the routers.

00:55:46.600 --> 00:55:50.960
So the transmitter sends out the
data into the network and the

00:55:50.960 --> 00:55:55.600
routers replicate it and send it on
to the clients who are listening.

00:55:55.680 --> 00:55:58.600
This is great for us because we're
not doing the work the network is.

00:55:58.600 --> 00:56:03.600
It's also great for you because there's
only one copy of the data on the network.

00:56:03.600 --> 00:56:05.640
Or rather,
there's only one copy of the data on

00:56:05.780 --> 00:56:07.600
each particular leg of the network.

00:56:07.600 --> 00:56:10.630
The router won't forward it
through if there isn't anyone

00:56:10.650 --> 00:56:12.170
listening at that point.

00:56:12.770 --> 00:56:16.940
The drawback of this is that
multicasts don't go everywhere.

00:56:17.100 --> 00:56:21.100
They have a limited range and
not all routers will pass them.

00:56:21.160 --> 00:56:23.890
So if you were doing a broadcast
within an organization,

00:56:23.890 --> 00:56:26.040
if we were broadcasting
something within Apple,

00:56:26.040 --> 00:56:28.380
for example, we could do a multicast.

00:56:28.380 --> 00:56:30.420
It would go around the campus
and pass through the routers and

00:56:30.430 --> 00:56:31.700
everyone would be able to see it.

00:56:31.730 --> 00:56:34.810
But it wouldn't load our
network because there'd only,

00:56:34.810 --> 00:56:38.680
in effect, be one copy of the data moving
around over each branch.

00:56:38.760 --> 00:56:42.210
But if we wanted to do it
out to the whole world,

00:56:42.210 --> 00:56:45.890
we'd have to persuade every
ISP between us and them to

00:56:45.890 --> 00:56:47.700
enable multicast on the routers.

00:56:47.700 --> 00:56:50.700
And that hasn't happened yet, though.

00:56:50.840 --> 00:56:52.760
People are working on it.

00:56:55.120 --> 00:56:59.230
The second way that you can
do it is to do a unicast,

00:56:59.280 --> 00:57:02.610
which is more like a...

00:57:03.140 --> 00:57:08.060
The QuickTime is a conventional
internet connection where you

00:57:08.060 --> 00:57:13.000
send out packets with a label on,
with someone's IP address,

00:57:13.110 --> 00:57:18.270
they pass through the internet
and get routed over to the client.

00:57:18.340 --> 00:57:22.300
This works fine,
but the drawback is that there's

00:57:22.300 --> 00:57:25.270
only one address on the packet,
so they only go to one person.

00:57:25.270 --> 00:57:25.270
There are more complicated things
you can do to get around that.

00:57:25.870 --> 00:57:32.800
The way that we do this is to have
a separate machine that does that.

00:57:32.860 --> 00:57:35.880
So we have a transmitter machine
that's creating the broadcast

00:57:35.880 --> 00:57:37.090
and sending out the packets.

00:57:37.250 --> 00:57:40.800
And that goes to what's
called a reflector.

00:57:40.800 --> 00:57:42.800
Now the QuickTime streaming
server contains a reflector.

00:57:42.800 --> 00:57:50.370
And if you want to hear more about that,
stay for the session after this one.

00:57:55.700 --> 00:58:00.930
So what happens there is that the
transmitter captures the data,

00:58:01.000 --> 00:58:03.080
sends the packets to
the streaming server.

00:58:03.240 --> 00:58:05.140
As each packet comes into
the streaming server,

00:58:05.160 --> 00:58:08.190
it makes a copy and sends
one out to each client that's

00:58:08.190 --> 00:58:11.850
listening over the Internet.

00:58:12.500 --> 00:58:15.360
The advantage of this is that they
can go anywhere across the Internet.

00:58:15.440 --> 00:58:20.740
The drawback is that there are
N copies of each packet on the network.

00:58:20.740 --> 00:58:24.540
And so the server has to
work fairly hard to do this,

00:58:24.540 --> 00:58:28.940
and the amount of bandwidth you
use is directly proportional to

00:58:28.940 --> 00:58:31.530
the number of clients you've got.

00:58:31.990 --> 00:58:36.540
This adds complexity and rather than
trying to do all this on one machine,

00:58:36.540 --> 00:58:37.670
we've separated this.

00:58:37.710 --> 00:58:41.590
There's a transmitter and
a separate reflector in the

00:58:41.660 --> 00:58:43.800
streaming server to do this.

00:58:46.200 --> 00:58:49.200
And there are more complicated
topologies of this that you can do.

00:58:49.200 --> 00:58:53.190
You can send,
you can unicast all the way across

00:58:53.200 --> 00:58:56.430
to a remote streaming server
and then turn that back into a

00:58:56.430 --> 00:58:58.840
multicast for that area and so on.

00:58:58.970 --> 00:59:02.160
So you can route these
things different ways.

00:59:03.950 --> 00:59:08.400
So if you want to be seeded with
this and be able to use these APIs,

00:59:08.400 --> 00:59:12.100
the person to contact is Jeff Lowe,
the QuickTime technology manager,

00:59:12.100 --> 00:59:15.800
and his email address is up there.

00:59:17.440 --> 00:59:23.790
You may know also that there is
an existing tool for broadcasting

00:59:23.800 --> 00:59:29.000
to the Sorenson Broadcaster,
and there's a Birds of a Feather meeting

00:59:29.150 --> 00:59:37.300
tomorrow night in J2 for people who are
interested in the Sorenson Broadcaster.

00:59:37.550 --> 00:59:40.900
And there's also a second
Birds of a Feather session

00:59:40.900 --> 00:59:45.830
discussing the details of VDIGs,
which if you worked with

00:59:45.830 --> 00:59:51.500
the QuickTime Capture staff,
that's also happening tomorrow night.

00:59:51.790 --> 00:59:55.450
So, okay, so that's it.

00:59:55.490 --> 00:59:57.010
Thank you.