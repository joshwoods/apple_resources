WEBVTT

00:00:08.390 --> 00:00:10.930
The last two years for
Apple has been really exciting

00:00:10.930 --> 00:00:13.680
from a hardware perspective.

00:00:13.720 --> 00:00:16.300
We've totally revamped our product line.

00:00:16.490 --> 00:00:19.300
Similarly,
we've totally revamped our I/O.

00:00:19.600 --> 00:00:23.700
For low-speed I/O,
we've gone from serial and ADB to USB.

00:00:23.780 --> 00:00:26.960
For high-speed,
we've gone from SCSI to FireWire.

00:00:27.050 --> 00:00:32.440
For analog video in and out,
we've gone to digital video

00:00:32.440 --> 00:00:34.410
in and out over FireWire.

00:00:34.770 --> 00:00:37.390
About two years ago when
I was standing up here,

00:00:37.390 --> 00:00:42.900
we had one FireWire PCI card that
you can put into your Bage G3,

00:00:42.900 --> 00:00:44.160
and that was it.

00:00:44.520 --> 00:00:49.240
Last year, we had just started shipping
the blue and white G3,

00:00:49.240 --> 00:00:52.820
so that was one product that
came standard with FireWire.

00:00:52.910 --> 00:00:55.920
We had a few ports out there,
so developers were just

00:00:55.920 --> 00:00:57.280
beginning to adopt it.

00:00:57.510 --> 00:01:01.200
Today, if you see the product line,
about 70% of Apple's products

00:01:01.210 --> 00:01:02.760
come standard with FireWire.

00:01:03.170 --> 00:01:07.150
Three out of the four product lines,
every customer that buys it gets a

00:01:07.150 --> 00:01:09.740
FireWire port whether he likes it or not.

00:01:09.800 --> 00:01:14.820
Well, that's a big opportunity for you
to make devices to plug it in.

00:01:15.110 --> 00:01:19.980
And we've got a lot of good feedback from
you and a lot of good response from both

00:01:19.980 --> 00:01:22.690
customers and developers that like this.

00:01:22.810 --> 00:01:26.850
So let's see what's been
happening in the last year or two.

00:01:27.050 --> 00:01:29.250
There have been new
peripherals in every category.

00:01:29.440 --> 00:01:34.090
So scanners, printers,
lots of mass storage of course, CDRWs,

00:01:34.100 --> 00:01:37.000
hard drives, MOs, you name it,
and there are several

00:01:37.000 --> 00:01:38.440
products in the category.

00:01:38.500 --> 00:01:41.710
Actually,
there are about 100 FireWire peripherals,

00:01:41.710 --> 00:01:44.560
excluding DV camcorders,
that have already been announced

00:01:44.560 --> 00:01:46.060
and about 60 of them shipping.

00:01:46.130 --> 00:01:47.910
It's been a really big deal in storage.

00:01:47.990 --> 00:01:50.870
I mean, you see hard drives,
really cool ones,

00:01:50.870 --> 00:01:54.800
the small pocket ones from the CNVST,
big ones, high capacity,

00:01:54.800 --> 00:01:55.860
you're seeing RAIDs.

00:01:55.930 --> 00:01:58.950
Here are a couple of
solutions that are really hot.

00:01:59.230 --> 00:02:01.370
The pocket-sized drives
from both the CNVST,

00:02:01.470 --> 00:02:02.790
I think they were a big hit.

00:02:02.900 --> 00:02:05.190
It was just awesome.

00:02:05.280 --> 00:02:07.410
In fact, these have two ports on them.

00:02:07.410 --> 00:02:10.380
They have both FireWire
ports as well as USB ports.

00:02:10.550 --> 00:02:12.520
So that's kind of cool.

00:02:12.610 --> 00:02:14.930
Here's a new product from Micronet.

00:02:15.080 --> 00:02:16.610
This is the SAN cube.

00:02:16.740 --> 00:02:18.560
It's a FireWire RAID array.

00:02:18.830 --> 00:02:21.900
So they've taken multiple
drives and put it in.

00:02:22.230 --> 00:02:24.870
And they've got multiple, four, I think,
four or five FireWire ports on it.

00:02:25.200 --> 00:02:29.560
But the cool thing about this is not
only can you use it as a RAID drive,

00:02:29.630 --> 00:02:31.760
you can connect multiple hosts to it.

00:02:31.820 --> 00:02:34.460
Remember,
FireWire is a multi-host topology.

00:02:34.560 --> 00:02:38.640
So you can have two or up to
four Macs connected to this box,

00:02:38.640 --> 00:02:42.520
and all of them can be accessing the
data that's sitting on this drive.

00:02:42.610 --> 00:02:43.900
So that's a pretty cool product.

00:02:43.980 --> 00:02:46.110
VST, RAID array, really portable.

00:02:46.340 --> 00:02:47.680
It's got a battery up there.

00:02:47.760 --> 00:02:50.800
You can have up to 100 gigs of
storage in this portable thing.

00:02:50.960 --> 00:02:54.540
Perfect complement for
somebody using a PowerBook.

00:02:55.120 --> 00:02:58.580
that come with FireWire for
digital video on the road.

00:02:59.210 --> 00:03:03.140
Here's another cool product,
a DVD changer from Eshant.

00:03:03.180 --> 00:03:07.170
Well, this is basically two
DVD ROM drives in this box,

00:03:07.170 --> 00:03:09.360
and it's got a 200-disc carousel.

00:03:09.460 --> 00:03:13.520
So you can put all your 200,
up to 200 DVDs in here,

00:03:13.750 --> 00:03:15.510
and you can load two at a time.

00:03:15.780 --> 00:03:17.880
So this is another cool product.

00:03:17.990 --> 00:03:22.320
Scanners, UMAX and Epson are shipping
high-end scanners right now.

00:03:22.630 --> 00:03:26.580
And I think what we are going
to start seeing is products like

00:03:26.720 --> 00:03:27.970
scanners and digital cameras.

00:03:28.040 --> 00:03:30.580
the price points drop quickly.

00:03:31.520 --> 00:03:34.540
So, I often get asked this question
from developers saying,

00:03:34.540 --> 00:03:36.580
"Oh, I have a product.

00:03:36.690 --> 00:03:38.230
Should I do it with a
USB product or should I make

00:03:38.230 --> 00:03:40.820
it a FireWire product?" Well,
that really depends on,

00:03:40.820 --> 00:03:43.340
I think the main thing it
depends on is the performance

00:03:43.340 --> 00:03:46.460
that your product requires,
right?

00:03:46.460 --> 00:03:50.790
We know that USB, theoretical,
is a 1.5 megabyte per second bus,

00:03:50.830 --> 00:03:53.820
that's 12 megabits per second,
but it really maxes out at

00:03:53.820 --> 00:03:55.900
about 1 megabyte per second.

00:03:55.900 --> 00:04:01.240
Very often, customers have got many
USB devices attached to the bus.

00:04:01.260 --> 00:04:03.370
Somebody can have a
printer and a scanner,

00:04:03.370 --> 00:04:06.530
a mass storage device like a
Zip or a hard drive or whatever.

00:04:06.780 --> 00:04:10.200
You're going to start seeing
USB DSL modems and things like that.

00:04:10.250 --> 00:04:12.320
So maybe somebody will be
browsing the internet at the

00:04:12.320 --> 00:04:17.300
same time he's downloading a file
or scanning a file or whatever.

00:04:17.300 --> 00:04:20.580
So, when that happens,
the total bandwidth to a single device,

00:04:20.580 --> 00:04:22.280
of course, is going to drop.

00:04:22.330 --> 00:04:26.690
So you really need to weigh at what
point do you make that switch from

00:04:26.690 --> 00:04:28.680
a USB device to a FireWire device.

00:04:28.690 --> 00:04:32.120
And we think that's probably
around 800k per second.

00:04:32.230 --> 00:04:37.040
So if your device is doing more than 600,
700, 800k per second, make the switch,

00:04:37.040 --> 00:04:37.040
right?

00:04:37.150 --> 00:04:41.220
Because the customer really sees
a benefit from using FireWire.

00:04:41.310 --> 00:04:44.790
Of course, FireWire has added
advantages like bus power,

00:04:44.790 --> 00:04:48.610
and we'll talk a little bit
about that a little later on.

00:04:48.840 --> 00:04:51.100
So just to talk a little
bit about performance,

00:04:51.110 --> 00:04:53.890
I've got a demo for you.

00:04:53.890 --> 00:04:55.780
If you could switch.

00:04:55.870 --> 00:05:01.220
I have this new drive from VST.

00:05:01.300 --> 00:05:05.180
It's got both FireWire ports,
two FireWire ports, and a USB port.

00:05:05.260 --> 00:05:10.300
So what I'm going to do is,
let's copy a big file over.

00:05:10.450 --> 00:05:11.400
I have my PowerBook.

00:05:11.420 --> 00:05:13.590
So first thing you notice is
that I have to plug it in.

00:05:13.600 --> 00:05:15.800
So I plug it in.

00:05:15.920 --> 00:05:18.400
When I say plug it in,
I mean I plug it into the wall.

00:05:18.630 --> 00:05:21.370
And I plug in the USB port.

00:05:21.440 --> 00:05:25.290
So I'm going to first do
a USB performance number.

00:05:25.390 --> 00:05:26.300
So there it mounts.

00:05:26.450 --> 00:05:28.800
I've got this huge,
it's about a 29-meg file.

00:05:28.950 --> 00:05:31.370
If I do get info, it says 29 megs.

00:05:31.540 --> 00:05:33.500
So let's do a duplicate.

00:05:33.760 --> 00:05:35.900
So you see it's not very fast.

00:05:35.900 --> 00:05:40.050
It takes about, let's say,
it'll probably be a minute or two,

00:05:40.050 --> 00:05:41.700
so I can yap for two minutes more.

00:05:41.740 --> 00:05:47.390
And then after that we'll run
the same thing on FireWire.

00:05:47.650 --> 00:05:52.680
So a couple more devices are
starting now to show up that were

00:05:52.680 --> 00:05:55.000
USB and are now going to FireWire.

00:05:55.000 --> 00:06:00.790
For example, iOmega has the new Zip 250,
and they've come up with this cool

00:06:00.790 --> 00:06:02.500
FireWire dongle that you just plug it in.

00:06:02.560 --> 00:06:05.940
They have an ATA interface at the back,
so you get all the benefits of

00:06:05.940 --> 00:06:08.160
FireWire by just plugging it in.

00:06:08.260 --> 00:06:11.980
Again, it's bus-powered and a
single FireWire port.

00:06:12.290 --> 00:06:16.890
On USB, this drive does about a megabyte,
a little less than a megabyte,

00:06:16.900 --> 00:06:18.350
800k per second.

00:06:18.350 --> 00:06:20.670
On FireWire,
this does about 2 megabytes a second,

00:06:20.680 --> 00:06:21.490
and it's bus-powered.

00:06:21.500 --> 00:06:25.840
So there's a real improvement in
the customer experience when using

00:06:25.910 --> 00:06:28.200
this on FireWire as opposed to USB.

00:06:28.340 --> 00:06:30.690
So my copy is about...

00:06:31.120 --> 00:06:31.660
Halfway done.

00:06:31.820 --> 00:06:34.290
Should we put it out of its misery?

00:06:34.340 --> 00:06:35.840
Okay, so I hit stop.

00:06:35.920 --> 00:06:36.140
There we go.

00:06:36.140 --> 00:06:37.740
So you get the idea.

00:06:37.800 --> 00:06:39.840
Let's now take the same device.

00:06:39.900 --> 00:06:42.260
I'm going to drag it to the trash.

00:06:45.040 --> 00:06:47.130
Unplug the USB ports.

00:06:47.200 --> 00:06:49.940
So now on FireWire, of course,
I don't need to plug in any power.

00:06:49.990 --> 00:06:51.650
Just plug it in.

00:06:53.500 --> 00:06:55.640
In a second or two it should mount.

00:06:55.640 --> 00:06:58.890
There we go.

00:06:59.010 --> 00:07:01.580
And let's just duplicate this file.

00:07:02.650 --> 00:07:04.720
So probably about five seconds.

00:07:04.780 --> 00:07:10.110
So here's an example where a
really fast device gets a huge

00:07:10.110 --> 00:07:12.170
advantage on going to FireWire.

00:07:12.170 --> 00:07:16.040
Now what devices do we
expect to start doing this?

00:07:16.050 --> 00:07:17.720
Look at digital still cameras.

00:07:17.750 --> 00:07:21.670
Today, you're already in the three,
four megapixel range,

00:07:21.670 --> 00:07:24.320
and of course that's
probably going to increase.

00:07:24.340 --> 00:07:27.240
But the files are getting
bigger and bigger and bigger.

00:07:27.320 --> 00:07:31.940
Flash memory or smart media memory
is of course getting bigger.

00:07:31.970 --> 00:07:33.980
When you plug your digital
camera into your Mac,

00:07:33.980 --> 00:07:36.460
you want the pictures to
transfer as fast as possible,

00:07:36.460 --> 00:07:38.330
especially when you've
got these huge files.

00:07:38.580 --> 00:07:39.360
Scanners.

00:07:39.400 --> 00:07:43.980
I was in Taiwan a couple of months ago
and talking to a big scanner company.

00:07:44.000 --> 00:07:46.100
They're working on this new scanner.

00:07:46.130 --> 00:07:47.300
They showed me a prototype.

00:07:47.370 --> 00:07:49.000
I unfortunately can't mention the name.

00:07:49.130 --> 00:07:53.000
But they had this same mechanism on
USB and the same mechanism on FireWire.

00:07:53.130 --> 00:07:56.480
By the way, this is a consumer scanner.

00:07:56.500 --> 00:08:01.030
The scan on USB is 600 DPI,
eight and a half by eleven inch scan.

00:08:01.070 --> 00:08:04.160
It took about three minutes, three,
three and a half minutes or so.

00:08:04.210 --> 00:08:07.520
On FireWire, the same scan took about
forty-seven seconds.

00:08:07.620 --> 00:08:09.970
So there's a big difference
and we're starting to really

00:08:10.380 --> 00:08:11.500
see customers understand it.

00:08:11.590 --> 00:08:13.200
So customers want it now.

00:08:13.260 --> 00:08:16.850
We have the systems out there,
so there's no reason for you not

00:08:16.960 --> 00:08:19.590
to make your devices FireWire.

00:08:20.330 --> 00:08:23.290
Talking about FireWire
in the PC market space,

00:08:23.480 --> 00:08:27.180
of course you know that we
ship a whole lot of systems.

00:08:27.270 --> 00:08:31.200
Earlier on I said 70% of our systems
now ship standard with FireWire.

00:08:31.200 --> 00:08:34.940
You're seeing the same
trend in the PC space.

00:08:35.070 --> 00:08:37.990
So from Apple,
we've done already about 3 million

00:08:38.050 --> 00:08:40.240
systems last year with FireWire.

00:08:40.300 --> 00:08:42.460
Each of them have two ports,
so there are like 6

00:08:42.460 --> 00:08:43.750
million ports out there.

00:08:43.820 --> 00:08:48.450
But in the PC space,
you're seeing big names like Compaq,

00:08:48.480 --> 00:08:54.720
Gateway, Dell, Sony of course, Toshiba,
Panasonic, Sharp,

00:08:54.780 --> 00:08:57.520
all these companies are now
jumping on the FireWire bandwagon.

00:08:57.590 --> 00:09:00.910
Another interesting thing is
Taiwanese logic board makers are putting

00:09:01.250 --> 00:09:03.250
FireWire standard on their logic boards.

00:09:03.320 --> 00:09:05.110
Asus is one example.

00:09:05.270 --> 00:09:09.110
So we're really seeing
the numbers increase.

00:09:09.180 --> 00:09:12.060
I was talking to somebody at
Microsoft a couple of weeks ago,

00:09:12.140 --> 00:09:16.060
and they're expecting that this year,
they'll see about 15 million PCs,

00:09:16.060 --> 00:09:19.340
that's about 15% of the market space,
ship standard with FireWire.

00:09:19.450 --> 00:09:20.860
So that's a big number.

00:09:21.000 --> 00:09:24.900
If we could switch back to slides.

00:09:28.100 --> 00:09:31.160
So now to get into the technology
details about FireWire,

00:09:31.320 --> 00:09:33.380
I'd like to welcome Eric Anderson.

00:09:33.440 --> 00:09:38.430
Eric is our lead engineer on FireWire
and is the software manager for

00:09:38.790 --> 00:09:42.010
all of core FireWire development.

00:09:42.010 --> 00:09:42.010
Eric.

00:09:47.150 --> 00:09:48.030
Thanks, Jai.

00:09:48.030 --> 00:09:49.460
Thanks, everybody.

00:09:49.520 --> 00:09:53.830
Okay, we've talked about FireWire
for many years here at WWDC.

00:09:53.870 --> 00:09:56.100
I'm sure many of you know
it's been a long time coming,

00:09:56.100 --> 00:09:59.240
but as Jai's explained,
it's really a mainstream technology now.

00:09:59.270 --> 00:10:02.250
It's in most of our products,
and the number is rising every

00:10:02.250 --> 00:10:04.100
time we introduce a new product.

00:10:04.100 --> 00:10:07.580
So what I'm going to talk about
today is some of the basics

00:10:07.640 --> 00:10:10.260
of the FireWire hardware,
especially,

00:10:10.310 --> 00:10:14.440
that will hopefully help you to
understand what FireWire can really do,

00:10:14.590 --> 00:10:18.380
how it works,
and what features it has that are

00:10:18.470 --> 00:10:20.060
suitable for developing a product.

00:10:20.170 --> 00:10:21.660
If you're going to make
a FireWire product,

00:10:21.810 --> 00:10:23.100
you definitely need to know this.

00:10:23.100 --> 00:10:27.280
If you're developing for Mac in general,
I hope this will be helpful in

00:10:27.300 --> 00:10:30.940
understanding what FireWire can
do and how you might develop

00:10:30.940 --> 00:10:32.980
to be friendly for FireWire.

00:10:36.540 --> 00:10:40.580
Okay, first of all,
the name of this standard is

00:10:40.590 --> 00:10:43.800
IEEE 1394 High Performance Serial Bus.

00:10:44.080 --> 00:10:45.490
FireWire is just a word.

00:10:45.490 --> 00:10:48.420
It's a trademark that's owned by Apple,
but it's just a word.

00:10:48.430 --> 00:10:50.430
It's not an implementation.

00:10:50.440 --> 00:10:52.140
It's not a different spec.

00:10:52.230 --> 00:10:55.090
You're all welcome to use this
trademark if you license it from Apple.

00:10:55.230 --> 00:10:56.820
The trademark license is completely free.

00:10:56.820 --> 00:10:58.400
Just talk to Jai.

00:10:58.480 --> 00:11:01.500
There's no difference
between FireWire and 1394.

00:11:01.500 --> 00:11:05.990
1394 is a serial bus,
and that means exactly what it says.

00:11:06.010 --> 00:11:07.000
It's serial.

00:11:07.240 --> 00:11:09.680
This works best for longer cables.

00:11:09.830 --> 00:11:11.500
Parallel is better for short distances.

00:11:11.500 --> 00:11:16.280
And as a result, we have a very thin,
friendly, easy-to-use cable because

00:11:16.340 --> 00:11:18.000
there's only a few wires in it.

00:11:18.000 --> 00:11:18.980
And it's a bus.

00:11:19.050 --> 00:11:24.000
This means that when you send a packet,
it goes to every device on the bus.

00:11:24.100 --> 00:11:27.940
This is really important for high
speed and low cost when you have

00:11:27.940 --> 00:11:30.000
a moderate number of devices.

00:11:31.920 --> 00:11:35.800
Okay, this is a diagram that shows
the hardware used in FireWire.

00:11:35.800 --> 00:11:39.050
I'm going to describe this briefly,
then I'll go into the details

00:11:39.050 --> 00:11:42.290
on each part and then come
back to this diagram later.

00:11:42.790 --> 00:11:45.650
What I've shown in this diagram
are three typical FireWire devices.

00:11:45.690 --> 00:11:48.800
Of course, the Macintosh,
that's the most important on the left,

00:11:48.800 --> 00:11:51.800
a FireWire disk drive in the center,
like Jai demonstrated,

00:11:51.860 --> 00:11:55.600
and a FireWire camera on the right,
like a digital video camcorder,

00:11:55.810 --> 00:11:58.370
like the millions that
are available today.

00:11:58.960 --> 00:12:01.640
I'm going to start at the
bottom and talk about the PHY.

00:12:01.850 --> 00:12:06.000
This is the chip that actually drives
the signals on the FireWire bus.

00:12:06.130 --> 00:12:09.620
Then I'll talk about the link layer,
which is where knowledge of packets,

00:12:09.620 --> 00:12:12.340
checksums, headers,
and so on takes place.

00:12:12.460 --> 00:12:16.110
And then the communications up to
the higher levels of the device,

00:12:16.120 --> 00:12:20.210
which will differ depending on what
kind of device this actually is.

00:12:20.970 --> 00:12:24.200
Okay, the PHY chip,
PHY stands for physical layer.

00:12:24.320 --> 00:12:28.400
This is silicon that actually implements
the electrical protocol for FireWire.

00:12:28.550 --> 00:12:32.200
FireWire is a low-voltage
differential signaling interface

00:12:32.280 --> 00:12:34.660
that uses a 200 millivolt signal.

00:12:34.720 --> 00:12:37.750
This is important because
it's very low power,

00:12:37.760 --> 00:12:41.090
which keeps it cheap and
makes it easy to go fast.

00:12:41.810 --> 00:12:45.770
The PHY will have one transmitter
and one receiver for each port,

00:12:45.770 --> 00:12:51.290
which corresponds to a socket for a
FireWire plug on the device that contains

00:12:51.330 --> 00:12:53.470
these transmitters and receivers.

00:12:54.020 --> 00:12:57.010
Because FireWire is low voltage,
the cables are fairly short.

00:12:57.120 --> 00:13:00.040
There's a limit of about 15
feet to a FireWire cable.

00:13:00.110 --> 00:13:03.040
After more than 15 feet,
200 millivolts starts to look

00:13:03.240 --> 00:13:06.390
more like zero millivolts,
and that doesn't work very well.

00:13:06.400 --> 00:13:08.900
So FireWire is definitely
not a local area network.

00:13:08.900 --> 00:13:12.380
You might think of it as a room
area network or a desk area network,

00:13:12.420 --> 00:13:16.040
but it's not, for most people,
a good choice for trying to

00:13:16.190 --> 00:13:18.280
implement a local area network.

00:13:19.310 --> 00:13:23.270
The PHY actually implements a
series of point-to-point links.

00:13:23.410 --> 00:13:27.880
Each FireWire cable represents a
single serial communication path.

00:13:28.010 --> 00:13:31.540
There's no electrical continuity
between the ports on FireWire

00:13:31.610 --> 00:13:35.420
because each PHY will regenerate
the signal that comes in one port

00:13:35.440 --> 00:13:37.700
and send it out all the other ports.

00:13:37.710 --> 00:13:40.760
It's important to know that this
is completely done in hardware,

00:13:40.760 --> 00:13:43.580
which means there's no
burden on the software,

00:13:43.660 --> 00:13:46.270
and there's also no chance for
the software to get in there and

00:13:46.270 --> 00:13:49.100
either mess this up or slow it down.

00:13:49.440 --> 00:13:52.200
At this level, FireWire is always a bus.

00:13:52.340 --> 00:13:54.140
Every packet will go to every device.

00:13:54.140 --> 00:13:56.620
There's no buffering, there's no routing.

00:13:56.730 --> 00:13:59.780
These things make it fast, cheap,
and simple.

00:14:00.020 --> 00:14:02.400
So there's a variety of
PHY silicon available.

00:14:02.410 --> 00:14:04.940
The key features that
distinguish a PHY are the

00:14:04.960 --> 00:14:07.570
number of ports that it offers,
which is how many FireWire

00:14:07.640 --> 00:14:11.100
connectors the device can have,
and the speed that the

00:14:11.100 --> 00:14:12.380
PHY can operate at.

00:14:12.450 --> 00:14:16.260
FireWire defines three speeds for
operation with FireWire cables,

00:14:16.310 --> 00:14:20.610
which are 100, 200,
and 400 megabits per second.

00:14:20.670 --> 00:14:25.560
The digital video camcorders available
generally use the 100 megabit PHY speed,

00:14:25.560 --> 00:14:29.340
because this is what was available in
1995 when these products were introduced,

00:14:29.410 --> 00:14:31.580
and this is plenty fast
enough for a camcorder.

00:14:31.580 --> 00:14:34.690
All of the products that we sell
use the 400 megabit interface,

00:14:34.690 --> 00:14:37.210
because this is much better for
hard disk drives and gives you

00:14:37.210 --> 00:14:38.860
far more bandwidth to work with.

00:14:38.860 --> 00:14:40.820
But FireWire is a mix-and-match bus.

00:14:40.860 --> 00:14:45.190
You can connect devices of
different speeds any way you like,

00:14:45.400 --> 00:14:47.660
and they will automatically
work out the fastest speed

00:14:47.660 --> 00:14:49.100
that they can communicate at.

00:14:49.100 --> 00:14:52.320
In the picture I showed where there
was a disk drive and a camera,

00:14:52.330 --> 00:14:54.460
if we need to send a
packet to the camera,

00:14:54.460 --> 00:14:57.380
of course we'll send it at 100 megabits,
because that's the only

00:14:57.380 --> 00:14:58.780
speed the camera can receive.

00:14:58.780 --> 00:15:01.080
But if we want to communicate
with the disk drive,

00:15:01.080 --> 00:15:04.100
or if it wants to send data back to us,
this can happen at 400

00:15:04.140 --> 00:15:05.260
megabits per second.

00:15:05.260 --> 00:15:07.340
That packet won't be
received by the camera,

00:15:07.340 --> 00:15:09.410
but that's okay,
because the camera doesn't

00:15:09.410 --> 00:15:11.020
need to see that packet anyway.

00:15:11.020 --> 00:15:14.440
So multiple speeds can operate
simultaneously on FireWire.

00:15:14.470 --> 00:15:16.570
This is very convenient.

00:15:18.320 --> 00:15:21.100
The next layer up from
the PHY is the link layer.

00:15:21.200 --> 00:15:23.230
This is the layer that
knows what packets are.

00:15:23.240 --> 00:15:26.840
It knows how to assemble a packet,
how to arrange the header,

00:15:26.940 --> 00:15:31.250
how to compute the CRC,
and it contains buffering for preparing

00:15:31.250 --> 00:15:35.190
a packet before it goes out or
absorbing a packet when one comes in.

00:15:35.410 --> 00:15:38.200
And importantly,
this is where the bus ends.

00:15:38.200 --> 00:15:41.790
All packets come into the link,
but the link will examine them and decide

00:15:41.870 --> 00:15:45.940
which packets are actually important for
the device that it's in and pass only the

00:15:45.940 --> 00:15:48.190
important packets up to the controller.

00:15:48.200 --> 00:15:51.700
Generally speaking,
the link layer will have DMA so that it

00:15:51.700 --> 00:15:56.200
can efficiently move data into or out
of the device that it's connected to.

00:15:56.200 --> 00:16:00.180
There's lots of link silicon available
to choose from in designing products.

00:16:00.260 --> 00:16:02.680
The key features that
differentiate it are the packet

00:16:02.680 --> 00:16:04.200
formats that it can support.

00:16:04.200 --> 00:16:05.200
The computer can use the packet
format to support the packet format.

00:16:05.200 --> 00:16:07.710
The computer needs to
speak all packet formats,

00:16:07.710 --> 00:16:10.400
but a device like a camcorder
or a hard drive may get by

00:16:10.400 --> 00:16:14.220
with only some packet formats,
and considerable simplicity can

00:16:14.220 --> 00:16:18.200
be had in the link by limiting it
to the formats that are needed.

00:16:18.270 --> 00:16:21.560
The DMA in a link may vary
depending on the application,

00:16:21.560 --> 00:16:24.200
and the host interface may vary as well.

00:16:24.200 --> 00:16:28.320
A camcorder link typically would have
an 8-bit microcontroller interface,

00:16:28.410 --> 00:16:31.070
very simple,
very good for a one-function device,

00:16:31.440 --> 00:16:34.200
whereas in the Macintosh,
we have a complex PCI interface

00:16:34.200 --> 00:16:34.200
that's very high-tech.

00:16:34.200 --> 00:16:34.200
So it's a very simple interface.

00:16:34.200 --> 00:16:34.200
And it's also a very
complex PCI interface.

00:16:34.200 --> 00:16:34.200
The PCI interface is a little bit
more complex than the PCI interface.

00:16:34.200 --> 00:16:34.200
It's a little bit more complex
than the PCI interface,

00:16:34.200 --> 00:16:34.200
and it's a little bit more
complex than the PCI interface.

00:16:34.200 --> 00:16:34.200
It's a little bit more complex
than the PCI interface.

00:16:34.200 --> 00:16:37.110
interface that's very high performance.

00:16:37.310 --> 00:16:41.890
All of our products today use the
1394 Open Host Controller Interface.

00:16:41.980 --> 00:16:44.820
This is an industry-standard
link interface for computers

00:16:45.100 --> 00:16:46.620
that's very powerful.

00:16:46.720 --> 00:16:51.150
It can send or receive every legal
kind of packet on the FireWire bus,

00:16:51.240 --> 00:16:55.080
and depending how you count,
it has 16 or more independently

00:16:55.080 --> 00:16:59.710
programmable DMAs optimized for the
various different kinds of packets that

00:16:59.730 --> 00:17:02.670
can be sent or received on FireWire.

00:17:03.910 --> 00:17:06.550
So let's talk about these
packets that go across the bus.

00:17:06.650 --> 00:17:09.900
There's two primary kinds of packets
for moving data that I will talk about,

00:17:09.900 --> 00:17:12.800
and there's a few others that are
used for management operations.

00:17:12.800 --> 00:17:16.710
Asynchronous packets,
or non-real-time packets,

00:17:16.710 --> 00:17:19.700
are used for devices like disk drives.

00:17:19.730 --> 00:17:25.890
Each packet contains a small amount of
data from one byte up to two kilobytes,

00:17:25.890 --> 00:17:28.740
depending on the speed that it's
being sent at and the amount of

00:17:28.740 --> 00:17:30.790
data needed by the application.

00:17:30.800 --> 00:17:33.810
An asynchronous packet is
addressed by a node ID,

00:17:33.820 --> 00:17:37.150
which identifies one other
device on the FireWire bus,

00:17:37.150 --> 00:17:38.800
and a memory address.

00:17:38.800 --> 00:17:43.350
These two together make
up a 64-bit address space.

00:17:43.360 --> 00:17:48.540
The memory address is 48 bits,
and it selects where in the destination

00:17:48.540 --> 00:17:51.740
node the packet is being sent to.

00:17:52.420 --> 00:17:56.370
What exactly these memory addresses mean
may depend on what kind of device you're

00:17:56.370 --> 00:17:58.700
using or what protocol you're speaking.

00:17:58.810 --> 00:18:04.120
On the Macintosh, if that 48-bit address
is less than 4 billion,

00:18:04.190 --> 00:18:06.940
meaning that the top
16 bits are all zero,

00:18:07.050 --> 00:18:12.060
then it simply identifies a physical
memory address inside Macintosh memory.

00:18:12.180 --> 00:18:15.900
This can be used by a hard disk
drive to directly move data into or

00:18:15.900 --> 00:18:19.660
out of buffers on the Mac without
any involvement by software,

00:18:19.680 --> 00:18:22.980
which is tremendous for
performance because this data

00:18:22.980 --> 00:18:25.950
can flow without interrupts,
without software latencies.

00:18:26.010 --> 00:18:30.180
In fact, the CPU can be used for
something else during this time.

00:18:31.360 --> 00:18:36.220
Addresses above the 4-gigabyte range do
not go to physical memory because there

00:18:36.220 --> 00:18:38.700
can't be memory at such a high address.

00:18:38.760 --> 00:18:40.760
Those do go to software,
and those cause an

00:18:40.760 --> 00:18:42.400
interrupt when they arrive.

00:18:42.540 --> 00:18:44.920
Software will examine
the packet that came in,

00:18:45.020 --> 00:18:48.630
figure out what it's supposed to mean,
and take corresponding action.

00:18:48.720 --> 00:18:51.250
So, for example,
with a FireWire hard drive,

00:18:51.250 --> 00:18:54.530
we might ask the drive to
move one megabyte of data.

00:18:54.580 --> 00:18:58.230
We might ask it to read that data
and put it in Macintosh memory.

00:18:58.300 --> 00:19:03.860
It will get the data from the medium,
break that up typically into 512 packets,

00:19:03.860 --> 00:19:05.440
each of which is 2K.

00:19:05.500 --> 00:19:09.040
It will send those across FireWire
to the different addresses in

00:19:09.040 --> 00:19:13.400
Macintosh physical memory where we
specified that we want the data.

00:19:13.460 --> 00:19:16.300
All of that will happen without
causing any interrupts or

00:19:16.530 --> 00:19:18.130
without any software overhead.

00:19:18.230 --> 00:19:22.410
When the data is entirely in place,
the drive will send one additional

00:19:22.410 --> 00:19:25.640
packet to some address off
the end of physical memory.

00:19:25.690 --> 00:19:28.240
This will cause an interrupt
that software will notice.

00:19:28.280 --> 00:19:32.800
Then software will learn by examining
the packet that the I/O is complete.

00:19:32.900 --> 00:19:34.550
So this is extremely efficient.

00:19:34.650 --> 00:19:36.940
It supports multiple devices at once.

00:19:36.970 --> 00:19:41.840
It means that data can flow in and out of
the Mac at very high speeds on FireWire.

00:19:41.890 --> 00:19:44.240
Again,
I want to stress that FireWire is a bus,

00:19:44.240 --> 00:19:47.640
which means that when we send an
asynchronous packet to one node,

00:19:47.670 --> 00:19:51.330
electrically it will go to all nodes,
but all except one will

00:19:51.340 --> 00:19:54.910
look at the address and say,
"That's not me," and they won't

00:19:54.910 --> 00:19:56.860
bother processing the packet.

00:19:57.800 --> 00:20:02.370
The one that does receive the packet
will check the CRC on that packet,

00:20:02.370 --> 00:20:05.110
and if it's received correctly
without overflowing the

00:20:05.210 --> 00:20:07.960
buffer or any other problem,
will send an acknowledgement

00:20:08.330 --> 00:20:10.530
that indicates the packet
was received correctly.

00:20:10.550 --> 00:20:14.030
So with asynchronous transmit,
you always know that your data made it,

00:20:14.120 --> 00:20:16.530
or in the rare case
when it doesn't make it,

00:20:16.530 --> 00:20:18.240
you can send another copy.

00:20:19.490 --> 00:20:23.400
Asynchronous packets generally
look like memory accesses.

00:20:23.400 --> 00:20:27.920
Most packets sent asynchronously
are either read or write

00:20:28.130 --> 00:20:30.400
requests on the FireWire bus.

00:20:30.400 --> 00:20:34.540
A packet requesting a read simply
specifies the number of bytes

00:20:34.650 --> 00:20:37.340
that it wants and an address
that it would like to read from.

00:20:37.480 --> 00:20:40.900
This is a very small packet,
but this will cause a response

00:20:40.900 --> 00:20:44.400
to be sent that contains all of
those bytes that were requested,

00:20:44.400 --> 00:20:46.400
so this will be a fairly large packet.

00:20:46.510 --> 00:20:47.400
This is fully symmetric.

00:20:47.400 --> 00:20:50.400
Any node can read from any other node.

00:20:50.440 --> 00:20:54.340
Also, any node can initiate a write
operation by sending a packet

00:20:54.430 --> 00:20:57.260
that specifies an address,
the length of the data,

00:20:57.460 --> 00:21:01.400
and actually includes the payload,
up to 2 kilobytes of data in that packet.

00:21:01.400 --> 00:21:04.400
The receiving node,
if it absorbs that write correctly,

00:21:04.400 --> 00:21:07.400
will simply send an acknowledgement
that says the packet got through okay,

00:21:07.400 --> 00:21:10.600
or an acknowledgement that
says something went wrong and

00:21:10.600 --> 00:21:12.400
please send the packet again.

00:21:12.400 --> 00:21:15.700
As I described in the disk drive case,
often these packets can be sent

00:21:15.700 --> 00:21:18.890
with a response with no interrupts,
and this frees up the CPU to

00:21:18.890 --> 00:21:19.970
do other useful things.

00:21:22.730 --> 00:21:27.600
The other kind of packet commonly used
on FireWire is an isochronous packet.

00:21:27.620 --> 00:21:31.970
This is used for real-time transfers,
such as when a DV camcorder is sending

00:21:31.970 --> 00:21:34.660
digital video into the Macintosh.

00:21:34.700 --> 00:21:36.770
These packets are also
a small chunk of data,

00:21:36.770 --> 00:21:41.140
although the size range is twice
as big as for asynchronous packets.

00:21:41.160 --> 00:21:44.260
Isochronous packets are
sent at fixed intervals.

00:21:44.280 --> 00:21:47.190
8,000 times per second,
there's an opportunity to

00:21:47.190 --> 00:21:48.760
send an isochronous packet.

00:21:48.800 --> 00:21:50.080
This is not configurable.

00:21:50.090 --> 00:21:53.050
This is just a number that
Mike Teener picked 10 years ago,

00:21:53.050 --> 00:21:54.370
and this is what we use.

00:21:55.600 --> 00:21:59.500
What's special about Isochronous is that
the hardware enforces a guarantee that

00:21:59.580 --> 00:22:04.640
says 8,000 times a second the bus will be
available only for the people who have a

00:22:04.640 --> 00:22:07.500
reservation to send Isochronous packets.

00:22:07.550 --> 00:22:11.370
This means that the packets will go
out on time and they won't get held off

00:22:11.430 --> 00:22:15.890
because disk drives or something else
are hammering the bus asynchronously.

00:22:16.010 --> 00:22:18.710
There may be a small delay
while you wait for whoever's

00:22:18.820 --> 00:22:22.140
currently talking to shut up,
but then the Isochronous

00:22:22.250 --> 00:22:24.290
packets will all get to flow.

00:22:25.700 --> 00:22:28.090
Again, FireWire is a bus,
so the isochronous

00:22:28.090 --> 00:22:30.690
packets go to every node,
but they're not addressed

00:22:30.960 --> 00:22:32.100
like asynchronous packets.

00:22:32.170 --> 00:22:33.730
They're not sent to one node.

00:22:33.880 --> 00:22:36.070
Instead,
the header of an isochronous packet

00:22:36.080 --> 00:22:40.660
contains a channel number that specifies
one out of 64 possible channels.

00:22:40.780 --> 00:22:45.410
And each node can examine this
and decide if it wants to receive

00:22:45.410 --> 00:22:47.300
data on that channel or not.

00:22:47.430 --> 00:22:49.860
For example,
the open host control interface

00:22:49.860 --> 00:22:53.370
that we use can be configured to
receive four different isochronous

00:22:53.370 --> 00:22:56.890
channels simultaneously,
and programmed with buffers for

00:22:56.890 --> 00:22:58.960
where to store that data in memory.

00:22:59.080 --> 00:23:01.630
The isochronous packets are
not sent to a memory address.

00:23:01.750 --> 00:23:06.840
Instead, the meaning of one packet after
the next is protocol-dependent,

00:23:06.930 --> 00:23:09.770
based on what time they arrive
or what order they arrive in.

00:23:09.870 --> 00:23:11.750
There's no time travel
on the FireWire bus.

00:23:11.900 --> 00:23:15.000
Packets will arrive in the
order that they're sent.

00:23:15.370 --> 00:23:19.410
It's also important to note that
isochronous packets are not acknowledged.

00:23:19.510 --> 00:23:22.640
Because two or more nodes
might receive this packet,

00:23:22.750 --> 00:23:25.330
there's no simple way for
each one of them to indicate

00:23:25.360 --> 00:23:26.910
whether it arrived or not.

00:23:27.020 --> 00:23:30.350
Also, because it's real-time,
there's no time available to retransmit

00:23:30.440 --> 00:23:32.140
the packet if anything went wrong.

00:23:32.270 --> 00:23:36.530
So in principle,
data can be lost in isochronous transfer.

00:23:36.680 --> 00:23:40.890
But the bit error rate on
FireWire is phenomenally low.

00:23:41.040 --> 00:23:43.900
So low that in practice,
it's perfectly realistic to use

00:23:43.900 --> 00:23:48.850
this for professional digital video
editing or for watching TV or for MLan

00:23:48.960 --> 00:23:50.600
without any concern about data loss.

00:23:50.700 --> 00:23:54.100
Data loss really is not a problem
in a properly designed system.

00:23:54.100 --> 00:23:57.090
Of course,
you do need to wire it up correctly.

00:23:58.400 --> 00:24:00.230
So let's come back to
this hardware diagram,

00:24:00.230 --> 00:24:04.150
and I'll talk a little bit more
about what's happening in the system.

00:24:04.360 --> 00:24:08.960
Let's suppose that the
Macintosh here on the right,

00:24:08.960 --> 00:24:10.670
I hope you can see the cursor up there,
wants to send a packet to the

00:24:10.710 --> 00:24:14.450
camera to tell the camera to start
playing the tape that's in there.

00:24:14.580 --> 00:24:19.500
The Macintosh will select the
command bytes that indicate play and

00:24:19.500 --> 00:24:22.990
send those across PCI to the link.

00:24:23.150 --> 00:24:26.510
The link layer will form this up
into a packet by computing a checksum

00:24:26.510 --> 00:24:28.860
and properly arranging the bytes.

00:24:28.910 --> 00:24:32.970
And when it's already in a buffer
or a FIFO to be sent out on the bus,

00:24:33.190 --> 00:24:36.800
the link will tell the PHY that it
wants to arbitrate for the permission

00:24:36.800 --> 00:24:39.090
to transmit on the FireWire bus.

00:24:39.240 --> 00:24:43.100
Often, this permission will be granted
immediately because the bus is idle.

00:24:43.170 --> 00:24:46.470
There might be a delay of up
to 100 microseconds if the

00:24:46.470 --> 00:24:48.260
bus is heavily congested.

00:24:48.650 --> 00:24:51.600
When the PHY wins arbitration,
it will tell the link

00:24:51.610 --> 00:24:53.760
to start transmitting,
and the link will send the

00:24:53.760 --> 00:24:56.980
packet down to the PHY,
which will then send the packet

00:24:56.980 --> 00:24:59.240
serially out each of its ports.

00:24:59.380 --> 00:25:02.730
So our command to the camera
telling it to play would first

00:25:02.730 --> 00:25:04.640
flow over to the disk drive.

00:25:04.730 --> 00:25:07.820
The PHY here will receive the
packet and do two things with it.

00:25:08.020 --> 00:25:10.310
It will send the packet
up to the link layer,

00:25:10.310 --> 00:25:12.820
because the PHY doesn't
know who this packet is for,

00:25:12.900 --> 00:25:16.040
and it will retransmit the
packet on all of its other ports,

00:25:16.090 --> 00:25:18.350
except the port the
packet's arriving from.

00:25:18.430 --> 00:25:19.220
So this is important.

00:25:19.310 --> 00:25:23.210
The PHY does not have any buffer,
and it doesn't have any routing tables.

00:25:23.240 --> 00:25:26.070
It simply sends the packet
everywhere instantly.

00:25:26.150 --> 00:25:29.950
Because this is a bus,
nobody else could be talking anyway.

00:25:30.000 --> 00:25:33.120
In the disk drive,
the link layer will examine the packet.

00:25:33.230 --> 00:25:36.130
Even though it arrived at 100 megabits,
it will still look at it.

00:25:36.210 --> 00:25:39.300
It will see that it's intended for
somebody else and just ignore it.

00:25:39.370 --> 00:25:43.120
So the controller isn't bothered with
any information about this packet.

00:25:43.160 --> 00:25:45.800
But the packet does flow
out into the camera,

00:25:45.920 --> 00:25:48.120
whose PHY also receives it,
passes it up to the camera,

00:25:48.120 --> 00:25:52.040
and then passes it up to the link layer,
which recognizes that this packet

00:25:52.160 --> 00:25:53.120
is intended for the camera.

00:25:53.120 --> 00:25:55.120
The link then does two things.

00:25:55.120 --> 00:25:57.120
It passes the packet
up to the controller,

00:25:57.150 --> 00:26:00.120
which processes the packet
and starts the tape playing.

00:26:00.120 --> 00:26:03.750
Also, the link signals an acknowledgment
to the PHY that says this

00:26:03.750 --> 00:26:05.120
packet was received correctly.

00:26:05.120 --> 00:26:09.120
And that acknowledgment flows back
through these PHYs to everyone,

00:26:09.120 --> 00:26:12.120
but only the Macintosh who sent
the packet is looking for it,

00:26:12.120 --> 00:26:15.370
and then notes that the
transmission was successful and

00:26:15.370 --> 00:26:17.880
signals this back up to software.

00:26:17.880 --> 00:26:21.010
of devices on the FireWire bus.

00:26:21.650 --> 00:26:23.670
A couple other things
I'd like to talk about.

00:26:23.850 --> 00:26:25.670
The automatic configuration in FireWire.

00:26:25.770 --> 00:26:28.160
One of the big advantages that
we tout for customers is that

00:26:28.250 --> 00:26:29.590
FireWire is plug-and-play.

00:26:29.590 --> 00:26:30.840
You just plug things in.

00:26:30.940 --> 00:26:32.310
There's no SCSI IDs to set.

00:26:32.400 --> 00:26:34.440
There's no terminators.

00:26:34.510 --> 00:26:37.370
That's because there's enough
information provided by the hardware

00:26:37.370 --> 00:26:38.690
that we can hide all of that.

00:26:38.700 --> 00:26:41.250
Of course,
there still are node numbers that

00:26:41.250 --> 00:26:43.140
identify the nodes on the bus.

00:26:43.210 --> 00:26:46.240
They're simply hidden and
selected automatically.

00:26:46.370 --> 00:26:50.240
On a bus with three nodes,
the nodes will simply be numbered 0, 1,

00:26:50.240 --> 00:26:50.930
and 2.

00:26:51.010 --> 00:26:53.290
What order this happens in may be random.

00:26:53.290 --> 00:26:55.340
It may depend on how the
cables are connected.

00:26:55.340 --> 00:26:57.230
It may depend on various factors.

00:26:57.340 --> 00:26:59.080
It can also change over time.

00:26:59.170 --> 00:27:01.300
If devices are added or removed,
we're going to have

00:27:01.300 --> 00:27:03.300
to change the numbers,
especially if one of the

00:27:03.300 --> 00:27:05.000
low-numbered devices gets removed.

00:27:05.100 --> 00:27:07.780
That all happens
automatically in the hardware.

00:27:07.780 --> 00:27:09.600
We don't get involved in that.

00:27:09.680 --> 00:27:13.790
But what the FireWire software layer
does is it hides these changes.

00:27:13.890 --> 00:27:16.280
Device drivers don't need to know
the node number of their devices.

00:27:16.310 --> 00:27:19.270
They simply use a handle
to refer to the device,

00:27:19.270 --> 00:27:22.060
and our FireWire layer keeps
everything straight so the

00:27:22.120 --> 00:27:23.800
packets go to the right place.

00:27:23.800 --> 00:27:25.630
If you really do need
to know your number,

00:27:25.630 --> 00:27:28.620
we provide an APA to find out,
but most software won't

00:27:28.890 --> 00:27:30.300
need to know this.

00:27:30.300 --> 00:27:32.400
And you'd never want to show
a number like this to the user

00:27:32.400 --> 00:27:35.210
because it may change at any time,
and it really doesn't

00:27:35.210 --> 00:27:36.920
mean anything to them.

00:27:37.400 --> 00:27:40.800
Every FireWire device
has a configuration ROM.

00:27:40.910 --> 00:27:44.340
This is a small ROM that
describes what the device does.

00:27:44.460 --> 00:27:49.300
The ROM is located at a fixed address
that's standard for every device.

00:27:49.370 --> 00:27:53.490
So when a new device is plugged in,
we simply send a FireWire read

00:27:53.490 --> 00:27:57.160
request to that address to get
the ROM and find out what it is.

00:27:57.260 --> 00:28:02.650
You might notice that this address is
way off the end of physical memory,

00:28:02.650 --> 00:28:04.880
so this is not going to collide
with any Macintosh address.

00:28:05.150 --> 00:28:07.960
What's in the ROM describes the
features of that particular device,

00:28:08.100 --> 00:28:11.340
what protocol that device speaks,
may have other useful information,

00:28:11.340 --> 00:28:14.100
like the ID of the vendor
who sold the device.

00:28:14.140 --> 00:28:17.360
We use this information
to figure out which device

00:28:17.360 --> 00:28:19.540
driver to load for the device.

00:28:19.620 --> 00:28:22.710
The ROM also contains a
globally unique identifier,

00:28:22.720 --> 00:28:23.290
a GUID.

00:28:23.670 --> 00:28:28.500
This is a serial number that's 64 bits
long that uniquely identifies a device.

00:28:28.540 --> 00:28:33.550
This is critical because if you plug
in two VST FireWire hard drives,

00:28:33.600 --> 00:28:37.150
the contents of the ROM other
than this GUID are identical.

00:28:37.210 --> 00:28:39.950
If the node numbers change,
we might forget which drive is which.

00:28:40.130 --> 00:28:43.290
That could be really bad if
you have files on those drives.

00:28:43.380 --> 00:28:47.910
So it's critical that every device
has a truly unique serial number.

00:28:49.180 --> 00:28:51.940
So what's happened recently in FireWire?

00:28:51.990 --> 00:28:55.230
As I mentioned earlier,
we have the 1394 open host controller

00:28:55.230 --> 00:28:56.920
interface in all of our products today.

00:28:57.000 --> 00:29:00.200
This is a second generation
host controller interface that

00:29:00.200 --> 00:29:03.190
provides very powerful DMA,
has provided us with a

00:29:03.270 --> 00:29:06.340
big performance boost,
and has a lot of capacity that will

00:29:06.470 --> 00:29:08.490
take us forward over the years.

00:29:08.720 --> 00:29:11.630
All products today that have
FireWire ports can boot from

00:29:11.730 --> 00:29:13.440
a FireWire hard disk drive.

00:29:13.440 --> 00:29:15.510
I'll talk more about that.

00:29:15.830 --> 00:29:19.000
Last year we said that we'd
provide FireWire power in

00:29:19.000 --> 00:29:22.900
desktop and consumer products,
but probably not in PowerBooks.

00:29:23.050 --> 00:29:24.440
Turns out we figured out how to do that.

00:29:24.570 --> 00:29:27.510
The new PowerBook with FireWire
provides six watts of power,

00:29:27.510 --> 00:29:28.700
just like the iMac.

00:29:28.700 --> 00:29:32.910
That's plenty of power to run a hard
disk or another small peripheral.

00:29:33.230 --> 00:29:36.430
The IEEE 1394A standard
was recently ratified.

00:29:36.630 --> 00:29:39.510
It's been several years in the works,
but it is absolutely

00:29:39.590 --> 00:29:40.940
finished and voted on.

00:29:41.090 --> 00:29:45.640
This is a standard that provides a lot of
cleanup over the original 1394 standard.

00:29:45.640 --> 00:29:48.410
It fixes bugs,
it clarifies a lot of things that

00:29:48.430 --> 00:29:50.060
really weren't described very well.

00:29:50.060 --> 00:29:53.750
It has some modest optimizations,
but it's not a big leap

00:29:53.750 --> 00:29:55.660
forward in performance.

00:29:55.820 --> 00:30:00.060
But it's very important if you're
designing products to use 1394A silicon.

00:30:00.180 --> 00:30:02.770
All the vendors who sell
FireWire parts are offering

00:30:02.770 --> 00:30:05.100
silicon compliant with 1394A.

00:30:05.200 --> 00:30:08.740
You'll have much better interoperability
with other devices and with the

00:30:09.010 --> 00:30:13.070
Mac if you use this modern silicon
that complies with this standard.

00:30:13.320 --> 00:30:18.530
IEEE 1394B is the effort to
define 800 megabit FireWire,

00:30:18.600 --> 00:30:21.340
even higher speeds,
and a variety of other useful

00:30:21.420 --> 00:30:25.820
features like plastic optical
fiber for certain applications,

00:30:25.910 --> 00:30:28.820
protocols that can be used
for wireless FireWire,

00:30:28.880 --> 00:30:30.060
and various other advances.

00:30:30.060 --> 00:30:35.100
1394B recently passed its
initial round of balloting.

00:30:35.330 --> 00:30:38.800
This basically commits the
team to stop adding features

00:30:38.890 --> 00:30:40.870
and start debugging the spec.

00:30:41.100 --> 00:30:43.890
So it will be a number of
months more while they actually

00:30:43.890 --> 00:30:47.060
agree on how everything should
work and how to describe it.

00:30:47.110 --> 00:30:50.030
But it is moving toward completion,
and of course we're looking

00:30:50.030 --> 00:30:53.090
forward to adopting that technology
as soon as it's available.

00:30:53.250 --> 00:30:56.500
I was quite surprised when I wrote the
slides for this year to notice that we

00:30:56.500 --> 00:30:59.280
were talking about USB 2.0 last year.

00:30:59.400 --> 00:31:02.440
There really isn't anything
new to say about USB 2.0.

00:31:02.440 --> 00:31:03.410
It's still not there.

00:31:03.560 --> 00:31:08.870
I think Jai is going to rag on it later,
so I'll skip it for now.

00:31:09.860 --> 00:31:11.700
So let's talk about FireWire booting.

00:31:11.720 --> 00:31:15.500
Every product that we sell today that
has a FireWire port can boot from

00:31:15.590 --> 00:31:17.390
a FireWire hard disk on that port.

00:31:17.430 --> 00:31:23.610
That includes the Power Mac G4,
the iMac DV, and the PowerBook FireWire.

00:31:24.090 --> 00:31:27.500
Older products that we already
sold cannot boot from FireWire.

00:31:27.500 --> 00:31:28.240
Sorry.

00:31:28.300 --> 00:31:30.910
If you try to copy the
software onto the old product,

00:31:31.010 --> 00:31:32.790
you'll find it still
can't boot from FireWire.

00:31:32.860 --> 00:31:35.360
So I want to prevent some
confusion and save you some time.

00:31:35.360 --> 00:31:37.110
Don't bother.

00:31:38.250 --> 00:31:43.510
The Firewire services on these new
products are included in the Mac OS ROM.

00:31:43.550 --> 00:31:48.080
This is because prior to that,
we included them in extensions,

00:31:48.080 --> 00:31:51.830
and we can't load an extension from
a device that we can't talk to.

00:31:51.960 --> 00:31:55.600
So the Firewire services are
built into the Mac OS ROM.

00:31:55.810 --> 00:32:01.020
However, the copy in the Mac OS ROM will
only be used if we actually

00:32:01.090 --> 00:32:03.270
boot from a Firewire device.

00:32:03.320 --> 00:32:06.980
In any other case,
we will load the extensions normally.

00:32:07.010 --> 00:32:09.930
This means that you can upgrade those
extensions with a newer version,

00:32:09.930 --> 00:32:12.490
such as Firewire 2.4,
which I'll talk about later.

00:32:12.580 --> 00:32:14.640
So you're not locked into it in the ROM.

00:32:14.680 --> 00:32:18.550
However, Apple can ship a new Mac OS ROM,
such as was included in

00:32:18.560 --> 00:32:20.540
the recent Mac OS posting.

00:32:20.620 --> 00:32:23.570
So we can improve the
booting if we need to.

00:32:23.670 --> 00:32:26.250
This means that you should always
have the FireWire extensions

00:32:26.420 --> 00:32:28.740
in the extensions folder,
even though it's also

00:32:28.770 --> 00:32:30.100
included in the ROM.

00:32:30.190 --> 00:32:34.220
Also,
the extensions cannot override the ROM.

00:32:34.310 --> 00:32:36.420
Basically, we tried and that turned
out to be awfully hard,

00:32:36.440 --> 00:32:39.560
so for now at least,
when you do boot from FireWire,

00:32:39.560 --> 00:32:42.790
you'll be using the version
that's in the Mac OS ROM.

00:32:44.550 --> 00:32:45.730
How do you boot from FireWire?

00:32:45.820 --> 00:32:47.200
It's really very simple.

00:32:47.200 --> 00:32:49.380
You just go to the startup
disk control panel,

00:32:49.490 --> 00:32:51.530
pick your FireWire disk, and reboot.

00:32:51.650 --> 00:32:55.210
Now, if you try to do this,
you might find that you can't pick your

00:32:55.210 --> 00:32:57.500
disk in the startup disk control panel.

00:32:57.610 --> 00:33:01.500
This means that the driver software
that came with that disk doesn't

00:33:01.500 --> 00:33:03.800
yet know how to boot from FireWire.

00:33:03.920 --> 00:33:05.830
But our vendors have
been working on this,

00:33:05.930 --> 00:33:11.200
and new software should be available
to make disks bootable from FireWire.

00:33:11.300 --> 00:33:15.270
When a disk is bootable from FireWire,
the driver for that disk should

00:33:15.370 --> 00:33:19.400
be stored in a boot partition
on the media of the disk.

00:33:19.490 --> 00:33:23.040
This works the same as how
we boot from SCSI or ATA or

00:33:23.170 --> 00:33:25.800
I think everything except USB.

00:33:26.300 --> 00:33:28.490
This is so we can load the driver.

00:33:28.500 --> 00:33:32.420
We can't load an extensions-based driver
when booting from FireWire because

00:33:32.470 --> 00:33:35.860
we can't see the extensions folder
when we're trying to find the disk.

00:33:35.990 --> 00:33:40.200
So third-party formatting software
that supports booting will put their

00:33:40.200 --> 00:33:42.340
driver in a partition on the disk.

00:33:42.430 --> 00:33:46.690
Now if for some reason we fail to find
a third-party partition on the disk,

00:33:46.690 --> 00:33:50.840
we will use a built-in Apple driver so
that you can try to access your data.

00:33:50.930 --> 00:33:54.790
But this driver may not support
the disk that you have very well,

00:33:54.790 --> 00:33:55.900
or it may be slow.

00:33:56.020 --> 00:33:59.650
So we highly recommend that you get the
third-party driver and for you third

00:33:59.650 --> 00:34:03.800
parties that you provide this driver so
that you can provide the best performance

00:34:03.890 --> 00:34:09.330
and features and support to your
customers who are using FireWire booting.

00:34:10.940 --> 00:34:13.980
Another new feature we
have is Target Disk Mode.

00:34:14.100 --> 00:34:17.090
This is a lot like SCSI Disk Mode.

00:34:17.150 --> 00:34:19.640
For some reason,
we didn't call it FireWire Disk Mode.

00:34:19.780 --> 00:34:22.580
But it lets you use the
PowerBook FireWire like

00:34:22.640 --> 00:34:24.700
a FireWire hard disk.

00:34:24.770 --> 00:34:29.860
If you reboot the computer and
simply hold down the letter "T"

00:34:29.860 --> 00:34:33.850
until you see a big FireWire logo,
which should be about five seconds,

00:34:33.850 --> 00:34:35.240
the computer will act
like a FireWire disk.

00:34:35.330 --> 00:34:39.020
And you can plug it into any other
Macintosh and it will show up

00:34:39.020 --> 00:34:41.320
on the desktop through FireWire.

00:34:41.780 --> 00:34:44.610
This actually is implemented
in all current products.

00:34:44.690 --> 00:34:47.350
It's probably most
useful in the PowerBook,

00:34:47.350 --> 00:34:51.220
but you can use an iMac DV or a
PowerMac G4 in target disk mode,

00:34:51.230 --> 00:34:54.190
and that may be a convenient way
for you to get files on or off

00:34:54.200 --> 00:34:56.680
of that machine over FireWire.

00:34:56.760 --> 00:35:00.570
Note that... Thanks.

00:35:03.350 --> 00:35:05.830
This capability is actually
implemented in open firmware,

00:35:05.840 --> 00:35:07.590
so I can't take very much
of the credit for this,

00:35:07.590 --> 00:35:10.300
but I'm glad to hear that
you're happy about it.

00:35:10.540 --> 00:35:14.050
Note that you do not
need a special cable.

00:35:14.110 --> 00:35:16.360
In SCSI Disk Mode,
you didn't hold down a key,

00:35:16.360 --> 00:35:20.460
you used a special cable, because SCSI,
for practical purposes,

00:35:20.460 --> 00:35:22.820
is not peer-to-peer,
so normally you wouldn't connect two

00:35:22.820 --> 00:35:25.100
computers together by the SCSI port.

00:35:25.200 --> 00:35:27.320
For FireWire,
it's perfectly okay to do that,

00:35:27.320 --> 00:35:29.650
so the normal cable is used,
you have to hold down the

00:35:29.650 --> 00:35:33.100
letter "T" so that we know
that you want to use Disk Mode.

00:35:33.230 --> 00:35:35.710
On the other Mac,
which is running Mac OS,

00:35:35.710 --> 00:35:39.590
you will need FireWire 2.3.3,
or a later version,

00:35:39.690 --> 00:35:41.600
in order to see the FireWire disk.

00:35:41.720 --> 00:35:45.770
That's because this version
of FireWire has the driver for

00:35:45.960 --> 00:35:49.400
an Apple Target Disk Mode disk
built into it.

00:35:51.650 --> 00:35:56.520
Okay, FireWire 2.4 was declared
GM on Monday of this week,

00:35:56.520 --> 00:35:58.200
and as soon as we can get
the installer working,

00:35:58.200 --> 00:35:59.600
we'll make that available to everybody.

00:35:59.600 --> 00:36:03.560
We expect that to be
just a couple more days.

00:36:03.720 --> 00:36:08.490
2.4 is bug fixes and
performance tuning only.

00:36:08.600 --> 00:36:12.600
I'm sure you've gotten the message
by now that Mac OS X is the future,

00:36:12.600 --> 00:36:16.600
and most of our staff are now
working on Mac OS X FireWire.

00:36:16.600 --> 00:36:19.600
Tomorrow, we'll have a presentation
from William Gulland,

00:36:19.600 --> 00:36:22.600
who has done a terrific job in
implementing Mac OS X FireWire.

00:36:22.600 --> 00:36:23.590
He'll tell you all about it.

00:36:23.600 --> 00:36:26.600
He'll also be here today
for the Q&A period.

00:36:26.600 --> 00:36:29.560
So FireWire 2.4 is just bug
fixes and performance tuning.

00:36:29.610 --> 00:36:32.960
In particular,
disk drive performance should be

00:36:33.260 --> 00:36:35.590
useably faster on most systems.

00:36:35.790 --> 00:36:38.600
Write performance
especially will benefit.

00:36:38.770 --> 00:36:42.600
What we've really done here is raise
the ceiling for how fast it can go.

00:36:42.600 --> 00:36:45.600
So if you have a fast disk
or one of those VST RAIDs,

00:36:45.600 --> 00:36:47.600
you'll see a big performance.

00:36:47.680 --> 00:36:50.720
If you have a FireWire ZIP drive,
we probably weren't

00:36:50.720 --> 00:36:53.070
holding it back anyway,
so this change may not

00:36:53.080 --> 00:36:54.600
make it any faster.

00:36:55.270 --> 00:36:58.880
Another interesting thing in
FireWire 2.4 is that if you have the

00:36:58.880 --> 00:37:02.830
PowerBook FireWire and you install 2.4,
you'll find that your

00:37:02.830 --> 00:37:04.100
battery lasts longer.

00:37:04.100 --> 00:37:06.500
I can't say exactly how much,
but it should be about

00:37:06.500 --> 00:37:08.090
5 to 10 percent longer.

00:37:08.100 --> 00:37:12.100
What we do is, if you have no FireWire
devices connected,

00:37:12.100 --> 00:37:14.210
we simply turn off the
FireWire circuitry,

00:37:14.210 --> 00:37:17.120
which is fairly complicated circuitry,
and we save a useful amount

00:37:17.120 --> 00:37:18.090
of power by doing that.

00:37:18.100 --> 00:37:22.080
If you then plug in a FireWire device,
we'll turn it back on.

00:37:22.100 --> 00:37:25.690
It might take a couple of
seconds for us to notice,

00:37:25.700 --> 00:37:28.250
but it always works in our tests.

00:37:28.360 --> 00:37:29.960
What did Steve say in the keynote?

00:37:30.080 --> 00:37:32.500
Trust me, you'll love this.

00:37:32.840 --> 00:37:36.650
Okay, this will be available by
software update in Mac OS 9.

00:37:36.700 --> 00:37:39.400
If you just go to the software update
control panel within a few days,

00:37:39.400 --> 00:37:42.180
you should start to see
FireWire 2.4 listed there.

00:37:42.220 --> 00:37:44.800
And it will also be available
on the web if you'd prefer to

00:37:44.800 --> 00:37:46.550
download it and install it manually.

00:37:48.680 --> 00:37:51.560
There will be a FireWire 2.5,
even though we're mostly

00:37:51.560 --> 00:37:54.570
focused on Mac OS X,
simply because, I hate to say this,

00:37:54.650 --> 00:37:56.460
but we do have a few more bugs.

00:37:56.560 --> 00:37:57.620
So we will work on those.

00:37:57.690 --> 00:38:00.490
We may be able to improve the
performance a little bit more.

00:38:00.560 --> 00:38:03.930
If there are bugs that are affecting
your ability to develop products,

00:38:04.110 --> 00:38:05.730
by all means, let us know about it.

00:38:05.860 --> 00:38:08.930
Jai will talk later about how to
contact us about our mailing list.

00:38:08.970 --> 00:38:11.740
We will try to fix bugs for FireWire 2.5.

00:38:11.810 --> 00:38:14.210
That will be out sometime this summer.

00:38:14.440 --> 00:38:19.440
That will be made available through the
software update mechanism in Mac OS 9.

00:38:21.030 --> 00:38:23.760
Okay,
next I'd like to bring up Wil Oxford,

00:38:23.760 --> 00:38:28.570
who's going to talk about MLan,
which is audio on FireWire.

00:38:28.570 --> 00:38:28.570
Wil?

00:38:34.510 --> 00:38:35.580
Thanks, Eric.

00:38:35.810 --> 00:38:39.030
Not sure how long this leash is here,
so I might not get to

00:38:39.030 --> 00:38:40.760
move around too much here.

00:38:40.760 --> 00:38:43.420
So,
the title of this session is FireWire:

00:38:43.420 --> 00:38:44.550
What is the title?

00:38:44.710 --> 00:38:45.990
Now and the Future.

00:38:45.990 --> 00:38:50.030
So I want to talk a little bit about
some of the future developments

00:38:50.030 --> 00:38:54.490
that we're going to be pushing
out towards the end of the summer.

00:38:54.610 --> 00:39:00.670
You should know that the M-LAN spec is
still undergoing some slight changes,

00:39:00.670 --> 00:39:04.500
but basically it's very
solid at this point.

00:39:04.500 --> 00:39:07.200
I don't know how many of
you are familiar with M-LAN,

00:39:07.200 --> 00:39:14.240
so I'll just go into a little
bit of detail about M-LAN itself.

00:39:14.240 --> 00:39:14.240
Oops, backwards.

00:39:16.740 --> 00:39:18.740
So this is the outline.

00:39:18.910 --> 00:39:23.600
This is really intended just to be
a very short introduction to MLan.

00:39:23.600 --> 00:39:27.600
We'll get into some
more details later on,

00:39:27.770 --> 00:39:31.310
especially with William's
session tomorrow,

00:39:31.310 --> 00:39:32.480
which I encourage you to go to.

00:39:32.600 --> 00:39:35.960
And also there's going to be
a session later on this week,

00:39:35.960 --> 00:39:39.200
that's Friday afternoon,
to talk about multi-channel

00:39:39.200 --> 00:39:40.450
audio and that kind of stuff.

00:39:40.600 --> 00:39:44.430
So definitely I encourage you
to go to both of those sessions.

00:39:44.600 --> 00:39:48.590
So basically what is
FireWire Audio or MLan?

00:39:48.600 --> 00:39:52.830
And so the idea here is that
MLan is just a sub-protocol,

00:39:52.830 --> 00:39:56.600
if you will,
of the FireWire protocol itself.

00:39:56.600 --> 00:40:03.020
So MLan was actually invented by Yamaha,
and they were very gracious

00:40:03.020 --> 00:40:06.450
in providing that service,
opening it up to the rest

00:40:06.450 --> 00:40:07.600
of the FireWire community.

00:40:07.600 --> 00:40:10.380
So we have them to thank for that.

00:40:10.870 --> 00:40:17.640
Basically what MLan is,
is a sub-class of... The IEC 61883 spec,

00:40:17.710 --> 00:40:21.600
which really doesn't necessarily...
Something you have to remember,

00:40:21.600 --> 00:40:26.600
other than we call them ABC devices,
and that's audio/video control devices.

00:40:26.600 --> 00:40:32.370
The 61883 spec is actually a
sub-class of the FireWire spec,

00:40:32.370 --> 00:40:34.600
the 1394 spec.

00:40:34.600 --> 00:40:39.350
The 61883 spec actually
comes in six flavors,

00:40:39.350 --> 00:40:40.590
if you will.

00:40:40.600 --> 00:40:42.890
It's a little bit different from
the books to the specifications,

00:40:42.910 --> 00:40:43.600
six sections.

00:40:43.600 --> 00:40:47.850
The MLan protocol is
described in the section 6,

00:40:47.850 --> 00:40:50.540
the final section of the spec.

00:40:50.600 --> 00:40:54.550
So if you look at the
family of FireWire devices,

00:40:54.800 --> 00:40:57.600
there is the overall umbrella,
1394 umbrella.

00:40:57.600 --> 00:40:59.940
And then you can divide
that up into ABC devices,

00:40:59.970 --> 00:41:02.780
or 61883 devices,
and other FireWire devices,

00:41:02.810 --> 00:41:05.600
such as mass storage devices, scanners.

00:41:05.630 --> 00:41:08.600
You've seen all the other
things that Jay's talked about.

00:41:08.600 --> 00:41:15.620
Within the ABC device category,
then we have yet another sub-class,

00:41:15.720 --> 00:41:20.450
which is the MLan devices,
or the -6 devices, and other ABC devices.

00:41:20.710 --> 00:41:24.880
And these include DV camcorders,
AV hard drives, which some of you may

00:41:24.880 --> 00:41:26.600
know a little bit about.

00:41:26.600 --> 00:41:33.560
But basically the key to know here
is that MLan effectively is 61883-6,

00:41:33.740 --> 00:41:37.600
just like FireWire
effectively is IEEE 1394.

00:41:37.600 --> 00:41:42.320
So, what exactly is--what exactly is the

00:41:42.770 --> 00:41:46.000
How does it fit into the data format?

00:41:46.070 --> 00:41:49.700
Those of you who care about how
this all fits together on the bus,

00:41:49.710 --> 00:41:52.940
I'm not sure that the lines actually
came out very well on the slide,

00:41:52.940 --> 00:41:54.460
so I apologize for that.

00:41:54.510 --> 00:41:57.770
But you remember Eric talked
earlier about isochronous

00:41:57.970 --> 00:41:59.840
and asynchronous packets.

00:41:59.900 --> 00:42:05.770
Well, if you look at 1883 spec,
most of the data is actually

00:42:05.770 --> 00:42:08.850
transferred in isochronous packets.

00:42:08.860 --> 00:42:11.470
There are some control packets
that are sent asynchronously,

00:42:11.610 --> 00:42:12.680
but mostly isochronous.

00:42:12.680 --> 00:42:19.200
And so what I've got here on the left
is just a isochronous packet header,

00:42:20.000 --> 00:42:21.260
just a schematic of that.

00:42:21.260 --> 00:42:23.060
Isochronous packet, sorry.

00:42:23.150 --> 00:42:27.000
And the isochronous packet
is divided into three fields.

00:42:27.070 --> 00:42:30.670
There's the packet header,
which indicates things like

00:42:30.810 --> 00:42:34.800
what kind of packet it is,
also how long the packet is,

00:42:34.900 --> 00:42:36.050
and that kind of thing.

00:42:36.060 --> 00:42:38.060
And then there's a data field.

00:42:38.060 --> 00:42:40.060
And then at the bottom is a little CRC.

00:42:40.060 --> 00:42:43.100
So again, I apologize for the fact that
they didn't quite come out.

00:42:43.100 --> 00:42:46.650
But anyway, sort of imagine, as I point.

00:42:46.990 --> 00:42:50.590
Inside that data field for
the isochronous packet,

00:42:50.680 --> 00:42:54.300
then that's where the MLan
packet actually resides.

00:42:54.570 --> 00:42:58.200
And so the MLan packet
has yet another header.

00:42:58.200 --> 00:43:00.760
It's actually an ABC packet, sorry.

00:43:00.800 --> 00:43:06.460
The packet itself has another header,
which is the SIP header,

00:43:06.460 --> 00:43:07.260
or common isochronous packet header.

00:43:07.280 --> 00:43:13.550
And then below that, optionally,
are a set of data fields or more headers.

00:43:13.640 --> 00:43:17.040
And basically,
it's just to try to explain

00:43:17.040 --> 00:43:21.700
to you that it all fits
within the isochronous packet.

00:43:22.790 --> 00:43:25.760
So, why MLan?

00:43:25.760 --> 00:43:26.890
Why should you care?

00:43:27.040 --> 00:43:29.700
Well, MLan, to me,
is one of the most exciting

00:43:29.700 --> 00:43:36.700
developments in digital audio
since the original AES/EBU spec.

00:43:36.700 --> 00:43:39.390
And the reason it's so
exciting to me is because,

00:43:39.390 --> 00:43:42.690
basically, it has all the great
things about FireWire.

00:43:42.850 --> 00:43:44.600
All the really great
things about FireWire,

00:43:44.710 --> 00:43:48.700
basically, number one,
is it's a single bus.

00:43:48.700 --> 00:43:50.960
So, you don't,
it's not a point-to-point thing.

00:43:50.960 --> 00:43:52.700
You can daisy-chain your devices.

00:43:52.700 --> 00:43:54.660
You don't have to worry
about inputs and outputs.

00:43:54.770 --> 00:43:57.430
It has lots and lots of bandwidth.

00:43:57.690 --> 00:44:01.690
So, just as an example, you know,
400 megabits per second,

00:44:01.760 --> 00:44:07.700
you can get hundreds, literally hundreds,
of 96 kilohertz, 24-bit audio channels.

00:44:07.700 --> 00:44:10.820
And those of you who care about that
kind of thing should think that's

00:44:10.850 --> 00:44:12.700
actually a pretty adequate number.

00:44:12.700 --> 00:44:15.700
We could do things like
hot-plugging devices,

00:44:15.700 --> 00:44:18.700
so you don't have to worry too much
about powering down your internet.

00:44:18.800 --> 00:44:21.740
You can do that in an entire studio
before you start the moving connections,

00:44:21.740 --> 00:44:22.700
that kind of thing.

00:44:22.700 --> 00:44:26.340
So, the integration, the other,
one of the other advantages

00:44:26.410 --> 00:44:30.700
is the integration of video,
MIDI, and AES/EBU all in a single wire.

00:44:30.700 --> 00:44:33.990
So, basically,
if you've ever been into a large

00:44:33.990 --> 00:44:39.840
studio setup and you see all these
enormous patch bays and MIDI patch bays,

00:44:39.840 --> 00:44:42.700
which are electrical devices
that do the same kind of thing,

00:44:42.730 --> 00:44:47.760
and video and audio connections that
are run together and then split apart,

00:44:47.770 --> 00:44:48.700
and then there's synchronizers.

00:44:48.700 --> 00:44:51.700
Basically,
this is going to make life a lot easier.

00:44:51.700 --> 00:44:53.700
It's not going to solve all
the problems in the world,

00:44:53.700 --> 00:44:56.570
but it's certainly going to make
life a lot easier as far as keeping

00:44:56.570 --> 00:45:00.170
audio and video signals synchronous,
routing them from one place

00:45:00.170 --> 00:45:01.700
to another in the studio.

00:45:01.700 --> 00:45:06.700
And for me, the biggest deal here is the
illumination of the studio patch bay.

00:45:06.700 --> 00:45:09.790
And I don't know how many of
you have killed your fingers

00:45:09.790 --> 00:45:12.700
on the backside of patch bays,
but, yeah, those of you who are clapping,

00:45:12.700 --> 00:45:13.700
yeah.

00:45:13.700 --> 00:45:18.670
So, I have more cuts and bruises on
my knuckles from patch bay work.

00:45:18.760 --> 00:45:19.570
And I'm rewiring.

00:45:19.800 --> 00:45:24.000
And it's certainly the largest single
contributor to studio downtime,

00:45:24.000 --> 00:45:24.700
I think.

00:45:24.700 --> 00:45:27.150
So, the disadvantages are,
and of course there

00:45:27.260 --> 00:45:28.700
always are disadvantages.

00:45:28.700 --> 00:45:31.660
For now, there are some issues
with clock recovery.

00:45:32.140 --> 00:45:35.570
Right now,
it's sort of a highly contested field

00:45:35.570 --> 00:45:40.280
as to exactly what the best kind of
jitter of respect that you're going to

00:45:40.330 --> 00:45:43.700
be able to get with unmodified FireWire.

00:45:43.700 --> 00:45:46.600
But for now,
I think my perspective on it,

00:45:46.710 --> 00:45:47.690
and don't take this as gospel.

00:45:47.700 --> 00:45:49.630
Certainly go out and
find out for yourself.

00:45:49.730 --> 00:45:55.690
But FireWire as it stands today is good
enough for almost all applications.

00:45:55.700 --> 00:45:59.000
And it's only the ultimate,
really highest end, you know,

00:45:59.030 --> 00:46:03.700
$8,000 A to D converter kind of market
where it really is going to matter,

00:46:03.700 --> 00:46:06.630
the clock jitter, as it stands today.

00:46:06.700 --> 00:46:10.940
We are working on that in the
1394 Trade Association and also

00:46:11.240 --> 00:46:13.700
in the AES standards committees.

00:46:13.700 --> 00:46:16.700
And I think that before long,
we'll have some good work to do.

00:46:16.700 --> 00:46:19.440
And then after long,
we'll have some method figured

00:46:19.560 --> 00:46:22.700
out where that really won't
be a concern for the future.

00:46:22.700 --> 00:46:25.280
There are still some
clarifications of the spec,

00:46:25.280 --> 00:46:26.650
as I mentioned earlier.

00:46:26.700 --> 00:46:28.680
But those are well underway.

00:46:28.700 --> 00:46:32.150
And I expect that before we --
certainly before we meet next year,

00:46:32.150 --> 00:46:34.700
everything will be
pretty much ironed out.

00:46:37.540 --> 00:46:41.660
So how do you use it in your
application if you're a software writer?

00:46:41.660 --> 00:46:44.300
And the good news here is you
don't have to worry about that.

00:46:44.430 --> 00:46:45.950
We're going to take care of that for you.

00:46:46.080 --> 00:46:49.260
We'll use it just as any standard
sound in or out device or both.

00:46:49.260 --> 00:46:55.210
One of the things you probably want
to know about is OS X versus OS 9.

00:46:55.360 --> 00:46:59.500
To my knowledge, at this point,
we are going to do simultaneous

00:46:59.500 --> 00:47:01.160
OS 9 and OS X releases.

00:47:01.300 --> 00:47:04.280
It'll be later on in the summer.

00:47:04.410 --> 00:47:08.510
As far as OS 9, how you use it,
it's the standard SDEV on the output

00:47:08.510 --> 00:47:10.400
side and the sound input device.

00:47:10.400 --> 00:47:13.650
So you really don't need to
change your app in any way to

00:47:13.660 --> 00:47:17.610
take advantage of FireWire unless
you're adding new features that

00:47:17.610 --> 00:47:19.400
FireWire allows you to have.

00:47:19.400 --> 00:47:23.210
On the OS X side,
I highly encourage you to talk to both

00:47:23.350 --> 00:47:28.690
William Gullen or attend William Gullen's
talk and also Jeff Moore's talk on

00:47:28.850 --> 00:47:32.400
multichannel audio and that architecture.

00:47:32.400 --> 00:47:34.310
All that stuff will be
gone into in great detail.

00:47:34.410 --> 00:47:40.400
If you insist on rolling your own driver,
we certainly can help to some extent.

00:47:40.400 --> 00:47:44.310
We're looking at the open source issues.

00:47:44.430 --> 00:47:48.020
Certainly for OS X,
we believe that's the right thing

00:47:48.020 --> 00:47:51.650
to do and we just need to make
sure we can legally do that with

00:47:51.650 --> 00:47:53.390
all the licenses and whatnot.

00:47:53.400 --> 00:47:58.350
For OS 9, I'm not clear right now whether
that'll be open source or not.

00:47:58.430 --> 00:48:02.090
But certainly we can help you
out even if we're not going to

00:48:02.090 --> 00:48:04.310
be giving you all our sources.

00:48:04.560 --> 00:48:08.710
So what does the device
roadmap look like?

00:48:08.890 --> 00:48:12.510
Well, right now, this summer,
we will see the first

00:48:12.580 --> 00:48:13.900
M-LAN devices available.

00:48:13.900 --> 00:48:17.640
In fact, you'll see a couple of
them sitting right up here.

00:48:17.940 --> 00:48:20.600
Right now,
they're really only sound output devices,

00:48:20.600 --> 00:48:23.620
meaning they're speakers or
things that actually generate

00:48:23.620 --> 00:48:28.190
sound from a digital signal,
generate audio from a digital signal.

00:48:28.310 --> 00:48:30.970
Sort of towards the end
of summer or early fall,

00:48:31.110 --> 00:48:34.800
we should see a second wave of
M-LAN devices on the market.

00:48:34.870 --> 00:48:37.790
And I don't want to
pre-announce anyone's product,

00:48:37.930 --> 00:48:41.150
but basically,
we're looking at several different

00:48:41.150 --> 00:48:45.590
chipsets available and several
products based on those chipsets also.

00:48:45.730 --> 00:48:49.670
So we're looking at audio in
and out and MIDI in and out

00:48:49.670 --> 00:48:51.830
devices in that time frame.

00:48:52.160 --> 00:48:56.480
And those of you who are looking to
develop hardware devices like that,

00:48:56.540 --> 00:49:02.800
certainly get in touch with our fine
team of developer support people.

00:49:02.930 --> 00:49:07.770
And then, towards the end of this year,
sort of the Christmas selling season,

00:49:07.770 --> 00:49:11.690
if you will, we expect to see the
first consumer devices,

00:49:11.770 --> 00:49:13.300
first consumer M-LAN devices.

00:49:13.300 --> 00:49:16.330
And as I put up there,
I think then the fun really begins.

00:49:16.680 --> 00:49:19.300
First of all, if you're a developer
or a hardware developer,

00:49:19.500 --> 00:49:23.190
what's great about that is that
the volume for consumer devices

00:49:23.300 --> 00:49:27.680
is just enormous compared to the
sort of semi-pro music market.

00:49:27.700 --> 00:49:27.700
And so, if you're a developer
or a hardware developer,

00:49:27.700 --> 00:49:27.700
what's great about that is that
the volume for consumer devices

00:49:27.700 --> 00:49:27.700
is just enormous compared to the
sort of semi-pro music market.

00:49:27.700 --> 00:49:27.700
And so, if you're a developer
or a hardware developer,

00:49:27.700 --> 00:49:27.700
what's great about that is that
the volume for consumer devices

00:49:27.700 --> 00:49:27.700
is just enormous compared to the
sort of semi-pro music market.

00:49:27.860 --> 00:49:31.350
And so,
with all the silicon being generated,

00:49:31.350 --> 00:49:34.190
the price will go down quite a bit.

00:49:34.290 --> 00:49:39.480
Also, the consumer devices
tend to have a lot more,

00:49:39.620 --> 00:49:42.060
well, there'll be a lot more shelf
appeal because they'll be

00:49:42.060 --> 00:49:45.600
in every circuit city and,
you know, Best Buy, whatever,

00:49:45.770 --> 00:49:46.400
around the country.

00:49:46.400 --> 00:49:51.950
So, M-LAN devices will actually start to,
I think, exponentially grow sort of

00:49:51.950 --> 00:49:54.100
towards the end of the year.

00:49:54.210 --> 00:49:57.200
To me, that's really exciting because,
for the first time, I think,

00:49:57.200 --> 00:49:57.200
we're going to have a lot of new devices.

00:49:57.200 --> 00:50:01.430
For the first time,
and I think one of the, if I recall,

00:50:01.430 --> 00:50:05.400
one of the early
discussions on the 1394 TA,

00:50:05.400 --> 00:50:10.040
the Trade Association website,
there was an absolutely concerted

00:50:10.040 --> 00:50:14.700
effort to make sure that this was
a spec which was clear across both

00:50:15.120 --> 00:50:18.590
consumer and professional applications.

00:50:18.700 --> 00:50:21.810
And to me, that's very exciting
because always in the past,

00:50:21.810 --> 00:50:24.700
we've had this sort of imaginary line,
if you will,

00:50:24.700 --> 00:50:28.650
between professional or semi-pro,
equipment and consumer equipment.

00:50:28.710 --> 00:50:32.770
And they didn't always talk
together correctly or there was

00:50:32.810 --> 00:50:35.200
some sort of protocol difference.

00:50:35.200 --> 00:50:40.360
And we've been very careful to make
sure that M-LAN is a completely

00:50:40.460 --> 00:50:44.170
cross-boundary application,
protocol.

00:50:44.290 --> 00:50:48.340
Basically, you shouldn't have any problem
connecting up an M-LAN consumer

00:50:48.430 --> 00:50:52.780
device like your home stereo,
home theater, or a television set to

00:50:52.910 --> 00:50:55.200
a professional device.

00:50:55.200 --> 00:50:56.120
They should be able to talk together.

00:50:56.230 --> 00:50:58.150
And they should be able to
talk together quite well.

00:50:58.260 --> 00:51:01.410
So for me, that's very exciting because
it opens up a whole lot of new

00:51:01.410 --> 00:51:06.200
applications and the market is just
much larger than if you fragment it.

00:51:06.200 --> 00:51:10.200
So what I'm going to do now is
just give a real quick M-LAN demo.

00:51:10.200 --> 00:51:15.200
Those of you who attended the hardware
keynote saw pretty much the same demo.

00:51:15.200 --> 00:51:19.200
So I will tell you,
this is running under OS 9 right now.

00:51:19.200 --> 00:51:21.100
I don't have an OS 10 demo set up.

00:51:21.200 --> 00:51:23.200
But bear with me.

00:51:23.200 --> 00:51:25.050
So if you can switch
over to the number 2,

00:51:25.230 --> 00:51:25.700
please.

00:51:25.700 --> 00:51:27.570
Number two, please.

00:51:28.430 --> 00:51:29.260
Great.

00:51:29.290 --> 00:51:31.770
OK, so the first thing I want to
show you is just if you go

00:51:31.770 --> 00:51:33.990
into the sound control panel,

00:51:34.840 --> 00:51:39.000
Then you'll see that the FireWire,
as I mentioned before,

00:51:39.090 --> 00:51:42.720
M-Lan FireWire shows up as just
a standard sound output device.

00:51:42.920 --> 00:51:47.150
And those of you who can hear it up here,
these speakers are not probably

00:51:47.150 --> 00:51:48.800
loud enough to get all the
way to the back of the hall,

00:51:48.800 --> 00:51:49.800
but we'll try.

00:51:50.140 --> 00:51:57.800
So what I want to do then
basically is just show you...

00:51:57.800 --> 00:51:57.800
if I can find the demo...

00:51:59.940 --> 00:52:02.470
Just a standard SoundJam MP.

00:52:02.470 --> 00:52:06.580
Just, again,
if you saw the hardware keynote,

00:52:06.630 --> 00:52:07.800
you saw this.

00:52:07.800 --> 00:52:13.620
But, I don't know if you guys
can hear that or not,

00:52:13.620 --> 00:52:13.620
but...

00:52:14.990 --> 00:52:18.920
So there's no difference really
as far as the OS knows between

00:52:18.920 --> 00:52:22.420
the standard built-in sound
hardware and the MLan demo,

00:52:22.420 --> 00:52:23.830
so the MLan speaker.

00:52:23.950 --> 00:52:28.550
So you really, again, just to reiterate,
your application really doesn't

00:52:28.640 --> 00:52:32.660
need to know anything about MLan
in order to take advantage of it.

00:52:32.710 --> 00:52:36.890
Okay, so that's pretty much all
I wanted to talk about.

00:52:37.240 --> 00:52:42.800
We can bring Jai back up and answer
or go on to the resources side.

00:52:43.160 --> 00:52:44.780
Thanks.

00:52:49.690 --> 00:52:50.480
Thanks, Wil.

00:52:50.540 --> 00:52:52.440
We really think that
M-Lan is going to be cool,

00:52:52.440 --> 00:52:54.970
especially in the consumer
electronics space.

00:52:55.220 --> 00:52:57.980
Just think about consumers wiring
their home stereo systems with

00:52:57.990 --> 00:52:59.680
wires running all over the place.

00:52:59.770 --> 00:53:02.390
FireWire will make it so much easier,
just one cable going all

00:53:02.390 --> 00:53:04.780
over the place and bam,
you're ready to go.

00:53:04.900 --> 00:53:09.430
So to talk a little
bit about resources...

00:53:09.640 --> 00:53:14.000
We have an SDK available for all
developers on the developer seat site.

00:53:14.070 --> 00:53:16.190
Go up there, get it,
and start doing development.

00:53:16.320 --> 00:53:19.500
That has all the necessary
documentation and everything else.

00:53:19.500 --> 00:53:22.400
We have a free FireWire mailing
list for you to subscribe.

00:53:22.530 --> 00:53:25.140
So if you have technical
questions and want to post them,

00:53:25.140 --> 00:53:26.500
of course you can ask DTS.

00:53:26.500 --> 00:53:29.500
But there's a good community
of FireWire developers,

00:53:29.500 --> 00:53:31.500
and we've set up this website.

00:53:31.500 --> 00:53:32.500
You should post your questions there.

00:53:32.500 --> 00:53:37.420
All our DTS engineers that do FireWire,
all our engineers that do FireWire,

00:53:37.420 --> 00:53:39.350
are subscribed to this list.

00:53:39.350 --> 00:53:41.500
And they will answer your questions.

00:53:41.500 --> 00:53:43.500
Other developers are
subscribed to this list.

00:53:43.590 --> 00:53:45.970
So this is a good community where
you can post your questions,

00:53:46.110 --> 00:53:48.340
and usually I've seen that
people respond pretty quick.

00:53:48.500 --> 00:53:50.970
If you have general
questions on FireWire,

00:53:50.970 --> 00:53:53.170
send them to FireWire@apple.com.

00:53:53.170 --> 00:53:54.370
They all come to me.

00:53:54.500 --> 00:53:58.640
I try and respond pretty quick,
so you should hear from me pretty soon.

00:53:59.680 --> 00:54:03.530
So there was some confusion some time
ago regarding FireWire licensing.

00:54:03.540 --> 00:54:06.430
There was this big hoo-ha about a
dollar report and everybody's saying,

00:54:06.440 --> 00:54:08.420
"Oh, we can't do it,
we can't do it." So we

00:54:08.420 --> 00:54:10.410
worked on it a little bit.

00:54:10.590 --> 00:54:13.910
There's a new patent pool
established for FireWire licensing,

00:54:13.920 --> 00:54:15.120
and it's really, really simple.

00:54:15.330 --> 00:54:17.090
That was the idea.

00:54:18.070 --> 00:54:22.760
What happened is that previously
when a developer or a silicon maker

00:54:22.820 --> 00:54:27.180
needed a patent license for FireWire,
he had to go to each

00:54:27.240 --> 00:54:28.740
company that owned patents,
right?

00:54:28.800 --> 00:54:31.240
Because there are several companies
that own the patents on FireWire.

00:54:31.240 --> 00:54:35.040
There's Apple, there's Sony, Toshiba,
and several others.

00:54:35.210 --> 00:54:39.060
So previously you had to go to
each of these companies separately,

00:54:39.230 --> 00:54:42.810
pay an amount,
and that amount was really dependent on

00:54:42.810 --> 00:54:44.590
the type of patent and things like that.

00:54:44.680 --> 00:54:48.810
Well, what we did is establish a
patent pool with the 3094 TA,

00:54:48.930 --> 00:54:50.480
helped out a lot on that.

00:54:50.540 --> 00:54:54.530
And the eight companies that
own the patents put their

00:54:54.530 --> 00:54:57.200
essential patents in this pool.

00:54:57.280 --> 00:55:01.560
So they threw it in the pool,
and now for a patent license,

00:55:01.660 --> 00:55:03.680
you don't need to go to any
of these companies separately.

00:55:03.680 --> 00:55:05.540
You don't even need to come to Apple.

00:55:05.610 --> 00:55:09.170
You just go to the patent pool,
and it's really, really easy.

00:55:09.370 --> 00:55:12.940
Every device you ship, you pay 25 cents,
period.

00:55:12.980 --> 00:55:14.640
And it's also not per port.

00:55:14.640 --> 00:55:16.380
It's per device.

00:55:16.570 --> 00:55:19.180
Also, it's per system, right?

00:55:19.520 --> 00:55:20.630
So think about it.

00:55:20.800 --> 00:55:25.830
Let's say some future computer has
internal FireWire ports and uses

00:55:25.830 --> 00:55:29.840
an internal FireWire hard drive
and has two external ports on it.

00:55:30.010 --> 00:55:32.630
The system manufacturer
will yet pay 25 cents,

00:55:32.640 --> 00:55:35.180
although he's using a FireWire
hard drive internally.

00:55:35.330 --> 00:55:37.990
It's per system, not per port.

00:55:38.460 --> 00:55:41.940
Also, it's paid for by the end developer,
not the silicon vendor.

00:55:41.940 --> 00:55:45.870
And the reason we did this was
is that there is this effect

00:55:45.970 --> 00:55:48.900
that when you charge the source,
every time it changes hands,

00:55:49.000 --> 00:55:50.550
the price keeps increasing, right?

00:55:50.650 --> 00:55:53.350
So the silicon vendor will
charge his distributor,

00:55:53.350 --> 00:55:56.440
if he pays 25 cents,
he will charge 50 cents.

00:55:56.490 --> 00:55:58.930
By the time it goes from the distributor
to the retailer from 50 cents,

00:55:58.990 --> 00:55:59.550
it goes to a buck.

00:55:59.690 --> 00:56:01.810
By the time it comes to the developer,
it's more than a buck.

00:56:01.900 --> 00:56:04.030
By the time it comes to the customer,
it's like $5.

00:56:04.190 --> 00:56:05.840
So we don't want that to happen.

00:56:05.840 --> 00:56:08.810
So what we said is,
let's go to the end person

00:56:08.810 --> 00:56:10.560
and charge 25 cents.

00:56:10.860 --> 00:56:14.340
So it's now the end developer
that pays that 25 cents.

00:56:14.390 --> 00:56:18.740
The patent pool is managed by
the 3094 licensing authority.

00:56:18.740 --> 00:56:19.940
So you can go to the website.

00:56:19.940 --> 00:56:22.560
It's 3094LA.com.

00:56:22.560 --> 00:56:23.180
Go there.

00:56:23.250 --> 00:56:28.030
They'll have all the details about how
you need to pay and all that good stuff.

00:56:28.120 --> 00:56:30.500
So, but the idea here, it's really,
really easy.

00:56:30.560 --> 00:56:31.480
Don't get confused about it.

00:56:31.480 --> 00:56:34.050
If you have questions,
send me an email or send an

00:56:34.050 --> 00:56:35.800
email to firewire@apple.com.

00:56:35.920 --> 00:56:39.710
We'll be happy to take it up with
you and answer your questions.

00:56:40.410 --> 00:56:42.740
So a couple of things that you should do.

00:56:42.800 --> 00:56:46.140
I think one of the key
features of FireWire,

00:56:46.140 --> 00:56:49.300
especially from a customer perspective,
is bus power.

00:56:49.500 --> 00:56:52.300
Customers love the idea that
you can plug in a peripheral,

00:56:52.390 --> 00:56:55.300
don't need to connect it to the wall,
just power it up, and you're ready to go.

00:56:55.300 --> 00:56:58.300
Well, so that of course depends on the
type of peripherals that you have.

00:56:58.300 --> 00:57:01.230
So for peripherals
that consume low power,

00:57:01.470 --> 00:57:02.270
use this feature.

00:57:02.300 --> 00:57:05.290
Our customers love it,
and it just makes life so much easier.

00:57:05.300 --> 00:57:11.300
The iMac DV and the new PowerBook G3s
provide 6 watts of power.

00:57:11.320 --> 00:57:16.250
Our professional desktops, that's the G3,
the blue and white G3 and the G4,

00:57:16.370 --> 00:57:18.230
provide 15 watts of power.

00:57:18.310 --> 00:57:21.290
But keep this in mind when
you're designing your products.

00:57:21.380 --> 00:57:24.290
Now if your products
use more than 15 watts,

00:57:24.290 --> 00:57:27.300
of course you have to be
plugged into the wall.

00:57:27.300 --> 00:57:30.300
But if they don't,
also you should keep in mind that you

00:57:30.310 --> 00:57:32.300
have to provide for optional power.

00:57:32.300 --> 00:57:36.510
So that if the customer,
for whatever reason, needs to use,

00:57:36.510 --> 00:57:40.300
let's say, a PCI card or a PC card that
doesn't provide any power,

00:57:40.300 --> 00:57:43.010
your product should be optionally
powered so that you can plug

00:57:43.010 --> 00:57:44.300
it into the wall and get power.

00:57:45.070 --> 00:57:47.370
Take advantage of the
multi-host topology.

00:57:47.370 --> 00:57:51.520
As Eric mentioned,
FireWire is a peer-to-peer network.

00:57:51.520 --> 00:57:54.670
You can have multiple
computers on the same bus.

00:57:54.710 --> 00:57:59.150
A couple of examples of products
that have taken advantage of this are

00:57:59.150 --> 00:58:00.800
scanners and the Micronet SandCube.

00:58:00.960 --> 00:58:02.820
This is really huge,
especially for scanners.

00:58:02.870 --> 00:58:05.340
If you look at a typical
publishing environment,

00:58:05.370 --> 00:58:08.760
you've got one scanning station,
a scanner attached to it.

00:58:08.820 --> 00:58:10.930
Person goes to the scanning station,
does a scan,

00:58:10.930 --> 00:58:13.680
then goes back to his computer
and copies it over the network.

00:58:13.750 --> 00:58:15.000
That's a pain, right?

00:58:15.010 --> 00:58:19.230
What you could have is in the
small work groups that typically

00:58:19.230 --> 00:58:23.210
our design customers work in,
you can have multiple computers

00:58:23.290 --> 00:58:24.300
connected to the same scanner.

00:58:24.300 --> 00:58:27.580
You just scan straight from
the scanner to the computer.

00:58:27.610 --> 00:58:32.120
The SandCube, of course,
is a low-cost fiber channel replacement,

00:58:32.310 --> 00:58:34.720
and that's really cool.

00:58:35.190 --> 00:58:39.440
The 3094A spec says that
when you're providing power,

00:58:39.440 --> 00:58:41.540
you provide from 8 to 30 volts.

00:58:41.630 --> 00:58:45.390
Make sure that your device
works under this requirement,

00:58:45.390 --> 00:58:45.850
right?

00:58:46.230 --> 00:58:49.300
We don't guarantee,
we just guarantee that it will

00:58:49.370 --> 00:58:52.340
be between 8 and 30 volts,
and we guarantee the

00:58:52.340 --> 00:58:53.600
amount of power we provide.

00:58:53.640 --> 00:58:56.470
We don't guarantee exactly
what the voltage is.

00:58:56.730 --> 00:58:59.520
We've seen some devices that
don't work in this case,

00:58:59.650 --> 00:59:02.360
so make sure that you
follow the spec correctly.

00:59:03.760 --> 00:59:07.020
We use the standard 6-pin connector
out the back of our systems.

00:59:07.210 --> 00:59:10.500
These connectors are much more
reliable and durable than the 4-pin

00:59:10.500 --> 00:59:12.700
connectors that you see on camcorders.

00:59:12.700 --> 00:59:14.660
So please use the 6-pin connector.

00:59:14.700 --> 00:59:17.720
Use 400 megabits PHYs
for all your devices,

00:59:17.840 --> 00:59:21.660
especially when you're
daisy-chaining and things like that.

00:59:21.740 --> 00:59:24.580
You don't want your 200
megabit PHY not to be able to

00:59:24.580 --> 00:59:26.560
transmit a 400 megabit packet.

00:59:26.560 --> 00:59:28.700
So that's really important.

00:59:28.700 --> 00:59:31.270
On devices that are big,
use 2 or 3 connectors.

00:59:31.270 --> 00:59:33.200
People like to daisy-chain FireWire.

00:59:33.200 --> 00:59:35.400
They know FireWire as
a daisy-chainable bus,

00:59:35.400 --> 00:59:36.700
so make use of that.

00:59:36.780 --> 00:59:39.850
We know it's a couple of cents,
maybe a buck more expensive because you

00:59:39.850 --> 00:59:43.430
have to add an additional connector,
but this is something that

00:59:43.530 --> 00:59:45.550
our customers really like.

00:59:46.090 --> 00:59:48.430
Eric mentioned earlier on,
use a unique GUID.

00:59:48.650 --> 00:59:50.950
The GUID, that's a unique serial number.

00:59:50.950 --> 00:59:53.760
He explained why,
saying that if you have two

00:59:53.760 --> 00:59:57.060
VST drives with the same ID,
the Mac doesn't know how to defer,

00:59:57.140 --> 01:00:00.200
and that would be bad.

01:00:01.090 --> 01:00:06.480
The way the FireWire works is that
every device has a config ROM in it.

01:00:06.850 --> 01:00:10.400
Don't use the minimal ROM.

01:00:10.400 --> 01:00:15.730
Use the entire ROM and put information
about your device in there so that the

01:00:15.730 --> 01:00:18.670
Mac appropriately knows how to deal
with your device when it's plugged

01:00:18.980 --> 01:00:22.110
in so it can match the appropriate
drivers and things like that.

01:00:23.520 --> 01:00:24.400
The FireWire logo.

01:00:24.680 --> 01:00:26.180
Eric mentioned it earlier.

01:00:26.320 --> 01:00:28.600
FireWire is an Apple trademark.

01:00:28.760 --> 01:00:32.440
We license the name FireWire
and the FireWire logo,

01:00:32.440 --> 01:00:35.140
the yellow Y-shaped logo,
for free to developers.

01:00:35.320 --> 01:00:35.850
Use this.

01:00:36.170 --> 01:00:39.510
In all our marketing materials,
we tell our customers,

01:00:39.650 --> 01:00:43.380
"Buy FireWire devices." That's how
our customers know what to connect.

01:00:43.480 --> 01:00:45.400
So don't call your devices iLink.

01:00:45.400 --> 01:00:47.780
I mean, don't call your devices 3094.

01:00:47.820 --> 01:00:50.740
You're just confusing the
customers more and more.

01:00:50.880 --> 01:00:51.930
Call it FireWire.

01:00:51.960 --> 01:00:52.690
It's free.

01:00:52.690 --> 01:00:52.900
Use it.

01:00:53.390 --> 01:00:54.290
Use the Mac logo.

01:00:54.570 --> 01:00:58.900
When you walk on an island,
CompUSA or Fry's or whatever,

01:00:59.020 --> 01:01:01.000
how do you know which
device works on the Mac?

01:01:01.090 --> 01:01:01.460
Well, you don't.

01:01:01.460 --> 01:01:03.400
I mean, you don't want to pick
up each and every box,

01:01:03.440 --> 01:01:05.600
look at it, and put it back in.

01:01:05.740 --> 01:01:06.400
Use this logo.

01:01:06.400 --> 01:01:09.830
That's how the customers identify
that this device works on the Mac.

01:01:09.910 --> 01:01:11.810
In fact,
CompUSA has gone to the extent of

01:01:11.810 --> 01:01:15.340
telling us to tell you folks to put this
Mac logo on all the six faces of the box,

01:01:15.340 --> 01:01:17.660
because sometimes they
stack the boxes like this,

01:01:17.700 --> 01:01:20.790
sometimes it's like this,
sometimes it's vertical, any side.

01:01:21.100 --> 01:01:22.240
Use the Mac logo.

01:01:22.250 --> 01:01:25.230
Again,
a license to use the Mac logo is free.

01:01:25.390 --> 01:01:28.990
Just go download the form, fill it in,
and fax it back, and you're ready to go.

01:01:29.000 --> 01:01:33.160
Artwork for both the FireWire logo and
the Mac logo is available on the website.

01:01:33.160 --> 01:01:36.160
If you have any problems getting to it,
drop me an email and

01:01:36.280 --> 01:01:37.660
we'll take care of you.

01:01:39.290 --> 01:01:41.900
So there are a couple of sessions
that you should really attend.

01:01:41.960 --> 01:01:45.880
Tomorrow,
there's an important session on FireWire.

01:01:45.880 --> 01:01:48.980
We go into deep technical details
about FireWire and Mac OS X.

01:01:49.030 --> 01:01:51.640
X is clearly the future for Apple.

01:01:51.740 --> 01:01:56.180
So all of you doing devices,
it's time to start writing drivers,

01:01:56.180 --> 01:01:59.630
or if you're creating new devices,
it's time to start working on Mac OS X.

01:01:59.960 --> 01:02:02.920
That's absolutely the way to go.

01:02:03.100 --> 01:02:06.390
We have a feedback forum on
Friday for both USB and FireWire,

01:02:06.550 --> 01:02:07.500
so come to that.

01:02:07.560 --> 01:02:08.500
Tell us what you think.

01:02:09.450 --> 01:02:12.570
If you can't attend that,
send me an email and we'd be

01:02:12.690 --> 01:02:16.590
happy to exchange emails or send
post emails on the mailing list.

01:02:16.970 --> 01:02:19.450
Tomorrow,
we've got a good surprise for you,

01:02:19.450 --> 01:02:20.240
actually.

01:02:20.290 --> 01:02:22.870
What we're going to do is,
you know that there's a party tomorrow

01:02:22.960 --> 01:02:26.710
thrown by Apple on the Apple campus.

01:02:27.110 --> 01:02:29.280
I think they're going to bus everybody
from here to the Apple campus.

01:02:29.280 --> 01:02:31.260
I think it's at 7:00
or 7:30 in the evening.

01:02:31.310 --> 01:02:34.460
What we're doing is we have a separate
part on the Apple campus itself where

01:02:34.510 --> 01:02:36.420
we're going to have a FireWire plugfest.

01:02:36.530 --> 01:02:40.300
So Eric and the testing team are going
to set up a couple of computers there.

01:02:40.320 --> 01:02:41.500
You bring your devices.

01:02:41.500 --> 01:02:43.580
If they're prototypes,
that's not a problem.

01:02:43.610 --> 01:02:44.680
Bring your software.

01:02:44.750 --> 01:02:48.540
They'll plug it in and they'll
see how the devices interconnect,

01:02:48.670 --> 01:02:51.680
drink a lot of beer, and have fun,
basically.

01:02:51.740 --> 01:02:56.540
We did it last time for USB, actually,
and that's when we broke the

01:02:56.540 --> 01:02:59.040
127 device limit for USB.

01:02:59.290 --> 01:03:02.050
For FireWire, again,
if you have questions,

01:03:02.050 --> 01:03:07.010
you can email them to me directly or you
can email them to FireWire@apple.com.

01:03:07.100 --> 01:03:07.100
The email comes to me.

01:03:07.160 --> 01:03:11.700
Again, I try to be really good
about responding quickly.

01:03:12.160 --> 01:03:14.850
Just email is the best
way to get a hold of us.

01:03:14.930 --> 01:03:16.260
There's also Craig.

01:03:16.260 --> 01:03:18.110
You can send email to Craig.

01:03:18.150 --> 01:03:21.690
Again, send it to either of us and we'll
try our best to take care of you.