WEBVTT

00:00:17.700 --> 00:00:19.700
Please welcome Tom Dowdy.

00:00:19.700 --> 00:00:25.910
Thank you.

00:00:26.160 --> 00:00:27.500
Good morning.

00:00:27.770 --> 00:00:32.750
This session is entitled QuickTime:
The Road to Mac OS X, which,

00:00:32.920 --> 00:00:37.410
contrary to what you might be thinking,
is not San Carlos Street out there.

00:00:40.250 --> 00:00:43.000
What are we going to be
talking about this morning?

00:00:43.020 --> 00:00:47.650
We're going to be talking about
QuickTime on the OS X platform and things

00:00:47.720 --> 00:00:52.670
that you need to know about QuickTime on
the OS X platform for your application.

00:00:53.430 --> 00:00:57.550
We're also going to cover some new
things that are true for all platforms,

00:00:57.600 --> 00:01:00.600
including the Mac OS X platform,
that are different from the last

00:01:00.740 --> 00:01:03.340
time we got together a year ago.

00:01:03.760 --> 00:01:07.020
We're going to talk about
extending the QuickTime platform.

00:01:07.080 --> 00:01:10.690
This is on the existing
Mac platform on Windows and,

00:01:10.820 --> 00:01:13.170
of course, on Mac OS X.

00:01:18.280 --> 00:01:20.390
The important thing to
know about QuickTime on

00:01:20.390 --> 00:01:25.620
Mac OS X is that QuickTime is a
first-class citizen of Mac OS X.

00:01:25.900 --> 00:01:28.000
Most of the things that
you've come to know and love

00:01:28.000 --> 00:01:29.310
about QuickTime are the same.

00:01:29.510 --> 00:01:31.040
They haven't really changed.

00:01:31.050 --> 00:01:33.330
A few things are gone,
a few things have been added,

00:01:33.420 --> 00:01:35.400
and there's some new
opportunities for you,

00:01:35.400 --> 00:01:36.100
the developer.

00:01:38.650 --> 00:01:42.490
You can call QuickTime from either
the Carbon or Cocoa API set.

00:01:42.550 --> 00:01:45.830
You can also call QuickTime from Java.

00:01:46.060 --> 00:01:49.400
Here's the classic picture of Mac OS X.

00:01:49.430 --> 00:01:52.640
You can see that QuickTime is layered
down with all of the other graphical

00:01:52.640 --> 00:01:55.080
goodies that are on Mac OS X.

00:01:58.010 --> 00:02:01.150
What's the same?

00:02:01.250 --> 00:02:09.810
The same APIs are available on Mac OS X,
on Windows, on Mac OS 9, Mac OS 8,

00:02:09.920 --> 00:02:11.710
and Mac OS 7.

00:02:11.760 --> 00:02:14.900
We finally, this year, cut off Mac OS 6.

00:02:15.080 --> 00:02:16.820
So those of you that still
have applications that are

00:02:16.870 --> 00:02:21.880
targeted for the 607 platform,
sorry, that's the end for you.

00:02:21.880 --> 00:02:25.090
I think most people have read by now.

00:02:27.200 --> 00:02:30.190
All of the major codexes you've
come to know and love are there

00:02:30.190 --> 00:02:33.070
on QuickTime for Mac OS X.

00:02:33.070 --> 00:02:38.640
That includes streaming, VR,
the wired actions you just heard about,

00:02:38.680 --> 00:02:42.750
the URL data handlers.

00:02:42.750 --> 00:02:42.750
In fact,

00:02:43.280 --> 00:02:46.530
There may be more there than you
are used to if you're used to

00:02:46.530 --> 00:02:49.140
using QuickTime on other platforms.

00:02:49.190 --> 00:02:51.320
We'll get to that in just a moment.

00:02:52.530 --> 00:02:54.960
There are a few things
we had to take away.

00:02:55.080 --> 00:02:57.750
Not very much, though.

00:02:57.810 --> 00:03:00.060
In fact,
we had a difficult time coming up with

00:03:00.150 --> 00:03:02.400
what exactly we did remove for Mac OS X.

00:03:02.560 --> 00:03:07.400
The major one from an API standpoint
is the various Git file preview calls,

00:03:07.670 --> 00:03:11.590
such as standard Git file preview
or custom Git file preview.

00:03:11.750 --> 00:03:12.840
These are no longer necessary.

00:03:12.840 --> 00:03:16.830
Nav Services provides the
preview services for opening and

00:03:16.830 --> 00:03:20.570
closing documents on Mac OS X,
so there's no need for additional

00:03:21.070 --> 00:03:23.280
work that we are going to be doing.

00:03:23.420 --> 00:03:27.310
Simply use Nav Services in your
application and you'll be fine.

00:03:27.930 --> 00:03:32.300
Some codecs that were related to
legacy types of technology that are

00:03:32.300 --> 00:03:37.140
no longer available on Mac OS X,
those codecs also don't need to be there.

00:03:39.600 --> 00:03:44.080
There's some excellent new opportunities
for you if you're new to QuickTime or

00:03:44.150 --> 00:03:46.980
you're new to the Mac OS X platform.

00:03:47.490 --> 00:03:51.390
Some of the new features that we've
been talking about in QuickTime are

00:03:51.390 --> 00:03:54.020
available first on the Mac OS X platform.

00:03:54.040 --> 00:03:59.030
In fact, they're in the PR4 CD that you
got here at the conference.

00:03:59.150 --> 00:04:03.460
Flash 4 and Cubic VR are
good examples of this.

00:04:03.930 --> 00:04:07.610
Those technologies are there for you
to play with and enjoy right now.

00:04:07.720 --> 00:04:10.590
They'll be available for you to
play with and enjoy later this

00:04:10.590 --> 00:04:13.580
summer for the other platforms.

00:04:16.850 --> 00:04:21.310
One of the important things that has
been asked earlier in the conference,

00:04:21.310 --> 00:04:24.230
and unfortunately I didn't get a
chance to grab the Carbon guys before

00:04:24.230 --> 00:04:28.050
they were doing their presentation,
is the issue of the event run loop,

00:04:28.140 --> 00:04:33.820
or the timer events, and idling of movies
within your application.

00:04:37.160 --> 00:04:42.030
So, I'm going to do a little demo here,
and then we're going to come

00:04:42.080 --> 00:04:43.300
back and talk about idling.

00:04:43.300 --> 00:04:44.930
So if I'd have demo two up.

00:04:45.060 --> 00:04:49.570
Oh,
we see that demo two has gone to sleep.

00:04:52.800 --> 00:04:56.030
I think the audio/video is back now,
so we should be able to get it back up.

00:04:56.050 --> 00:04:57.400
Alright.

00:04:57.480 --> 00:04:57.990
So here we are.

00:04:58.130 --> 00:04:59.760
We're running the
QuickTime player application.

00:04:59.830 --> 00:05:03.120
Just if you haven't seen this
enough so far in the conference.

00:05:03.760 --> 00:05:09.500
Open up a movie here.

00:05:16.500 --> 00:05:20.500
I'll start playing this.

00:05:20.500 --> 00:05:22.790
Now you can see that the
movie continues to play,

00:05:22.790 --> 00:05:24.300
even when other things are
going on in the computer.

00:05:24.300 --> 00:05:27.900
That's because of the various
multitasking services that

00:05:27.900 --> 00:05:30.780
are available in Mac OS X.

00:05:30.800 --> 00:05:32.690
It's a little difficult to
see probably on the projector,

00:05:32.700 --> 00:05:36.840
but the movie is actually transparently
being displayed through the menu,

00:05:36.840 --> 00:05:41.270
as I've got the menu bar down here,
which is kind of a nice little feature,

00:05:41.270 --> 00:05:42.830
being composited live.

00:05:43.350 --> 00:05:45.300
One of the things that
wasn't pointed out though,

00:05:45.320 --> 00:05:48.460
and that if you had seen the
demo at the Mac-- I'm going

00:05:48.460 --> 00:05:49.300
to start this movie again.

00:05:49.300 --> 00:05:52.960
If you'd seen this demo at Macworld,
you wouldn't have noticed--

00:05:53.100 --> 00:05:55.180
and David Schmuck,
who are the founders of QuickTime.

00:05:55.250 --> 00:05:56.330
The first thing you'll notice,
because it wasn't true,

00:05:56.330 --> 00:05:59.210
is that the equalizer bars in
the lower right-hand corner

00:05:59.210 --> 00:06:02.050
of the movie continue to move.

00:06:02.300 --> 00:06:05.090
This is idling and user
interaction of the application

00:06:05.160 --> 00:06:07.440
that's not specific to QuickTime.

00:06:07.440 --> 00:06:10.350
In addition,
the play bar at the bottom of the

00:06:10.350 --> 00:06:13.730
movie and the time of where we are
in the movie on the left-hand side

00:06:13.760 --> 00:06:20.240
continue to advance as the movie is
played even though the mouse is down.

00:06:20.240 --> 00:06:22.720
I'll stop that there and
we'll go back to slides.

00:06:22.980 --> 00:06:25.010
Why is this important?

00:06:31.310 --> 00:06:35.450
This is important because this is a
section of the application that could not

00:06:35.450 --> 00:06:38.180
possibly be handled by QuickTime itself.

00:06:38.200 --> 00:06:43.260
These are user interface idling services
that are unique to this application.

00:06:43.620 --> 00:06:47.270
So it's the application's
responsibility to service the idling.

00:06:47.350 --> 00:06:51.620
That includes the idling of the movie
and the idling of its own user interface.

00:06:53.220 --> 00:06:59.430
In specific, if you, the application,
are doing the movie idling,

00:06:59.550 --> 00:07:03.400
It's important for you to be involved
because of the following reason.

00:07:03.490 --> 00:07:08.060
The idling calls in QuickTime have
an implied API around them,

00:07:08.220 --> 00:07:13.060
which is that the origin of the
window affects where the movie is

00:07:13.260 --> 00:07:16.010
displayed within your application.

00:07:16.770 --> 00:07:22.790
If we idled the movies on your behalf,
we would not know where you may

00:07:22.790 --> 00:07:24.200
have set focus within your window.

00:07:24.200 --> 00:07:26.940
Those of you who are used to
using Power Plant or other such

00:07:26.940 --> 00:07:31.440
frameworks realize that you
focus on various subviews within

00:07:31.440 --> 00:07:33.780
your superview of the window.

00:07:34.370 --> 00:07:38.140
That process involves setting
the origin of the window.

00:07:38.140 --> 00:07:42.060
As that focus would be moving from
button to button or subview to subview

00:07:42.060 --> 00:07:45.980
within your application's window,
if we suddenly came along and

00:07:46.070 --> 00:07:51.140
idled one of the movies for you,
you'd find the iMovie Kids movie suddenly

00:07:51.140 --> 00:07:54.870
playing on top of your pause button,
rather than where in the

00:07:54.870 --> 00:07:56.450
window it was supposed to go.

00:07:56.550 --> 00:07:58.340
Because of this,
and because of the fact that

00:07:58.440 --> 00:08:01.700
your application also has other
movie-related idle tasks to do,

00:08:01.870 --> 00:08:04.690
we do not idle the movies on your behalf.

00:08:07.600 --> 00:08:11.140
was the demo.

00:08:11.240 --> 00:08:14.310
Let's talk about some changes
inside your application.

00:08:16.300 --> 00:08:19.550
On the road to OS X,
the QuickTime team also

00:08:19.550 --> 00:08:21.540
went down that road.

00:08:21.540 --> 00:08:25.300
We had a lot of work to do to get
QuickTime performing well on OS X and

00:08:25.300 --> 00:08:27.490
running the way it's supposed to.

00:08:27.680 --> 00:08:31.100
Most of these things we'd already
done for many of our components.

00:08:31.270 --> 00:08:33.870
Some of them we hadn't done at
all for any of our components,

00:08:34.030 --> 00:08:37.100
so we had to go through
these steps ourself.

00:08:37.200 --> 00:08:39.830
If you have been to any
of the Carbon sessions,

00:08:39.830 --> 00:08:42.880
you've probably heard some
of these things before,

00:08:42.920 --> 00:08:46.090
so I'm not going to belabor
them over and over again.

00:08:46.380 --> 00:08:49.200
There are two that are
particularly important,

00:08:49.200 --> 00:08:52.690
I think,
and so I'm going to call them out.

00:08:52.950 --> 00:08:55.400
You're making a lot of major
changes to your application,

00:08:55.460 --> 00:08:57.540
potentially,
in the process of carbonizing it.

00:08:57.650 --> 00:09:01.770
You're going to be re-qualifying it
and re-qualifying it on a new OS.

00:09:01.910 --> 00:09:05.690
Now is a really good time to remove
some of the older legacy code that

00:09:05.730 --> 00:09:07.850
you might have hanging around.

00:09:07.960 --> 00:09:12.380
A good example of this is applications
or codecs that check for the

00:09:12.380 --> 00:09:17.250
presence of color quickdraw,
even though they're compiled for PowerPC.

00:09:17.370 --> 00:09:19.420
The PowerPC has always
had color quickdraw.

00:09:19.730 --> 00:09:21.360
That check is unnecessary.

00:09:21.430 --> 00:09:23.430
It's slowing down the
loading of the application,

00:09:23.650 --> 00:09:26.780
slowing down the loading of the codec,
and adding additional dependencies on

00:09:26.780 --> 00:09:30.620
parts of the system that you really
don't need to be worrying about.

00:09:30.960 --> 00:09:33.400
So take a pause, look at your app.

00:09:33.470 --> 00:09:36.410
That file that you haven't
touched since 1989,

00:09:36.410 --> 00:09:39.500
you might want to look at once or twice.

00:09:40.030 --> 00:09:43.540
Another really good trick that we
discovered inside the QuickTime team,

00:09:43.540 --> 00:09:46.400
you want to be compiling your
application with the maximum

00:09:46.470 --> 00:09:55.890
amount of type checking turned on,
because graph ports, windows,

00:09:55.890 --> 00:09:55.890
dialog pointers are no longer
freely castable back and forth.

00:09:57.190 --> 00:09:58.880
If you're not performing
casting yourself,

00:09:58.990 --> 00:10:02.020
the compiler will catch this
type of behavior and point

00:10:02.020 --> 00:10:03.480
it out to you very quickly.

00:10:03.560 --> 00:10:06.960
You'll be able to correct it, move on,
make the appropriate Carbon calls,

00:10:06.990 --> 00:10:09.120
and your application
will be sailing along.

00:10:09.270 --> 00:10:17.920
However, every once in a while, somebody,
either through habit or knowledge that,

00:10:18.160 --> 00:10:20.220
a lack of knowledge that
this is not necessary,

00:10:20.300 --> 00:10:24.680
will be performing additional
casts between one type and another.

00:10:24.870 --> 00:10:28.330
It's a good idea to search your
application for graph pointers,

00:10:28.330 --> 00:10:30.580
window pointers, and dialog pointers.

00:10:30.650 --> 00:10:32.860
The searches I have here,
you'll notice they don't have a

00:10:33.170 --> 00:10:34.480
beginning parentheses on them.

00:10:34.500 --> 00:10:38.740
That's because if you search for
graph pointer closed parentheses,

00:10:38.770 --> 00:10:43.770
you'll also catch all the casts
to type color graph port as well.

00:10:44.260 --> 00:10:47.340
Any time you see one of these casts,
you should examine that code.

00:10:47.550 --> 00:10:52.000
Try to figure out why it's being
done and correct it if necessary.

00:10:52.070 --> 00:10:55.980
This is especially important if
you're using Carbon on OS 9 as part

00:10:56.030 --> 00:10:58.460
of your bring-up strategy for OS X.

00:10:58.770 --> 00:11:02.440
These types of compiler errors
or casting errors will not

00:11:02.440 --> 00:11:06.380
be caught by running on OS 9,
where graph pointers, window pointers,

00:11:06.520 --> 00:11:09.900
and dialog pointers may still be
freely castable back and forth.

00:11:09.940 --> 00:11:12.970
But when you try to bring
your application up on OS X,

00:11:12.970 --> 00:11:14.590
they'll crash very hard.

00:11:14.930 --> 00:11:18.830
Much easier to fix this by grepping
inside of your development system than

00:11:18.830 --> 00:11:22.220
playing with GDB on the other system.

00:11:23.450 --> 00:11:26.300
Here's a very important point.

00:11:26.320 --> 00:11:30.770
Mac OS X is a preemptive
multitasking operating system.

00:11:30.930 --> 00:11:34.120
If you have an application
that has interrupts,

00:11:34.140 --> 00:11:36.640
completion routines associated
with those interrupts,

00:11:36.640 --> 00:11:41.940
you need to be aware that interrupts
can be running in a separate thread.

00:11:42.180 --> 00:11:45.560
And these threads can
preempt one another.

00:11:45.560 --> 00:11:48.570
The specific case that you would
never see on the classic Macintosh

00:11:48.640 --> 00:11:51.530
operating system is that while
you are servicing an interrupt

00:11:51.530 --> 00:11:54.880
in one of your callback routines,
your main thread might

00:11:54.880 --> 00:11:56.400
start running again.

00:11:56.400 --> 00:12:01.790
This can happen on Mac OS X and
will happen on Mac OS X.

00:12:02.380 --> 00:12:03.950
If your code is not
ready to deal with this,

00:12:03.960 --> 00:12:05.830
if you're not appropriately
putting mutexes,

00:12:05.870 --> 00:12:08.740
semaphores,
or other types of OS-level protection

00:12:08.740 --> 00:12:12.410
around global variables that you're
accessing both from your main thread

00:12:12.880 --> 00:12:17.010
and your interrupt completion routine,
you're going to have a very difficult

00:12:17.010 --> 00:12:20.460
time tracking down these problems
when you're running on Mac OS X.

00:12:20.580 --> 00:12:24.430
These same issues arrived on Windows,
and they're problems that we've

00:12:24.430 --> 00:12:27.390
been having to deal with inside of
QuickTime for quite some time now.

00:12:27.520 --> 00:12:30.300
So when we were bringing
our code up on Mac OS X,

00:12:30.440 --> 00:12:33.500
we needed to make sure that we were
doing all the same level of protection

00:12:33.750 --> 00:12:35.840
on Mac OS X as we do on Windows.

00:12:36.080 --> 00:12:39.840
As a matter of fact, just two days ago,
we tracked down a bug

00:12:39.840 --> 00:12:41.590
where we'd missed one.

00:12:44.340 --> 00:12:47.560
So with that,
I'd like to bring out Greg Chapman,

00:12:47.560 --> 00:12:51.290
have him come and talk to you about new
features that are available on all the

00:12:51.290 --> 00:12:53.420
platforms in the last year in QuickTime.

00:12:53.650 --> 00:12:55.010
Greg?

00:13:01.170 --> 00:13:02.100
Thank you.

00:13:02.100 --> 00:13:07.220
I'm going to be talking about some
of the new things that we've added

00:13:07.300 --> 00:13:12.280
to QuickTime since the last time
we had a developers conference.

00:13:12.280 --> 00:13:14.410
Three things in particular.

00:13:15.670 --> 00:13:18.370
Variable bitrate audio is something
that we've been asked for a lot.

00:13:18.460 --> 00:13:24.110
We finally added that to support
the variable bitrate MP3 files.

00:13:24.950 --> 00:13:29.780
Of course, you could actually open
files and URLs before this,

00:13:29.780 --> 00:13:31.740
but there's some new
twists that need reviewing.

00:13:31.820 --> 00:13:36.720
Kevin Calhoun talked about this a little
bit in the streaming session yesterday,

00:13:36.720 --> 00:13:39.680
but we'll go through that
in a little bit more detail.

00:13:41.440 --> 00:13:43.190
The coolest thing about
all these new features,

00:13:43.330 --> 00:13:45.300
and variable bitrate
audio is just an example,

00:13:45.410 --> 00:13:48.000
is that existing apps will
pick up this support for free.

00:13:48.000 --> 00:13:50.510
You don't have to rev your app.

00:13:51.450 --> 00:13:54.850
There are a couple of
exceptions in this case.

00:13:55.010 --> 00:13:58.390
The main exception is if you call the
sound manager directly to play audio,

00:13:58.570 --> 00:14:00.150
then you need to know a few things.

00:14:00.230 --> 00:14:02.950
I'm going to give you
some of the highlights,

00:14:03.070 --> 00:14:04.460
point you at the real documentation.

00:14:04.460 --> 00:14:07.240
We've got lots of documentation
on these new features,

00:14:07.310 --> 00:14:09.640
and you'll be ready to go.

00:14:09.760 --> 00:14:12.710
There's a new constant
variable compression.

00:14:13.160 --> 00:14:16.200
It's actually been in the
sound.h header for a long time,

00:14:16.320 --> 00:14:17.700
but it's never been supported.

00:14:17.700 --> 00:14:20.170
It's right next to fixed compression.

00:14:20.380 --> 00:14:21.090
We support it now.

00:14:21.100 --> 00:14:22.100
It's great.

00:14:22.150 --> 00:14:23.940
Several structures have been extended.

00:14:24.150 --> 00:14:26.050
If you don't know what
those structures are,

00:14:26.050 --> 00:14:28.230
you don't need to know
that they've been extended,

00:14:28.350 --> 00:14:30.120
and we'll just take care of it for you.

00:14:32.340 --> 00:14:35.500
The biggest problem that you're
going to have to deal with in

00:14:35.500 --> 00:14:39.270
your code is if you call the sound
converter APIs and you want to be

00:14:39.310 --> 00:14:41.920
able to convert to or from VBR audio.

00:14:42.150 --> 00:14:44.280
There's a new API.

00:14:44.680 --> 00:14:47.400
It's well documented on our website.

00:14:47.780 --> 00:14:51.230
The old Sound Converter Convert
Buffer API had a lot of assumptions

00:14:51.230 --> 00:14:54.370
about relationships between
input and output buffers that,

00:14:54.470 --> 00:14:58.700
of course,
get completely blown away by VBR audio.

00:14:58.970 --> 00:15:01.700
Sound Converter Fill Buffer
is much more flexible.

00:15:01.700 --> 00:15:04.700
You can use it for VBR and for CBR audio.

00:15:04.700 --> 00:15:05.700
We recommend that you do that.

00:15:05.700 --> 00:15:09.790
You pass it a callback routine
that it will call every time

00:15:09.790 --> 00:15:14.750
it needs more source data,
and that callback will get called a

00:15:14.750 --> 00:15:16.700
completely variable number of times.

00:15:16.700 --> 00:15:19.810
There are a couple of flags
that it will return to let

00:15:19.890 --> 00:15:23.700
you know what its status is,
if it couldn't fill its output buffer,

00:15:23.700 --> 00:15:25.610
or if it has data left over.

00:15:25.700 --> 00:15:28.700
Your code can deal with
that pretty simply.

00:15:28.700 --> 00:15:33.660
The QuickTime 401 PDF is going to be
referenced several times in the slides.

00:15:33.660 --> 00:15:38.690
This has a whole pile of information
about some of these new features.

00:15:38.690 --> 00:15:41.700
It's easy to find up on our website.

00:15:44.450 --> 00:15:47.970
64-bit file offset support has
been in QuickTime for a while.

00:15:48.050 --> 00:15:50.870
We supported it on Windows because
they had a file system that

00:15:50.970 --> 00:15:52.310
would support these large files.

00:15:52.500 --> 00:15:57.790
With Mac OS 9 and QuickTime 4.1,
64-bit file offset support,

00:15:57.840 --> 00:16:02.700
really huge files,
is supported on all of our platforms.

00:16:03.260 --> 00:16:06.500
Again, existing apps will pick
this up with no change,

00:16:06.730 --> 00:16:08.900
no problem at all.

00:16:08.900 --> 00:16:12.010
The two exceptions,
one exception is if your app

00:16:12.170 --> 00:16:16.470
creates or modifies movies,
then you need to be able to read and

00:16:16.470 --> 00:16:19.900
write these new type of movie atoms.

00:16:20.670 --> 00:16:24.180
We're real careful not to use the
new movie atoms unless the file

00:16:24.180 --> 00:16:27.270
actually is bigger than 2 gigs,
so that if the file

00:16:27.270 --> 00:16:30.860
is a small movie file,
your old app will be able to

00:16:30.860 --> 00:16:32.950
read it without having to rev.

00:16:33.570 --> 00:16:39.400
The other exception is if you write a
component that provides file access.

00:16:39.400 --> 00:16:41.750
In this case,
not only do you need to call

00:16:41.820 --> 00:16:45.400
the new APIs in the toolbox
to deal with the file,

00:16:45.400 --> 00:16:49.390
but you actually have to implement some
new component calls in your component.

00:16:50.300 --> 00:17:31.700
[Transcript missing]

00:17:32.740 --> 00:17:34.960
There's a new document
that's coming out this week.

00:17:34.960 --> 00:17:37.010
I believe it's already
posted on the website.

00:17:37.180 --> 00:17:39.590
Inside QuickTime,
the QuickTime file format.

00:17:39.820 --> 00:17:43.490
This is way more detailed than you're
going to need unless you're one

00:17:43.490 --> 00:17:47.100
of those lucky people that gets to
parse movie files by hand a bite at

00:17:47.100 --> 00:17:51.920
a time without the use of QuickTime,
and then you'll really

00:17:51.920 --> 00:17:51.920
want to read that manual.

00:17:55.570 --> 00:17:58.010
Opening files and URLs doesn't
sound very exciting,

00:17:58.010 --> 00:18:00.350
but there are three cool things
I want to tell you about,

00:18:00.430 --> 00:18:03.620
and apparently one of
them is really cool.

00:18:06.450 --> 00:18:11.330
DataRefs are an abstraction of
various types of data sources,

00:18:11.330 --> 00:18:14.100
and Kevin talked about this yesterday.

00:18:14.850 --> 00:18:18.010
and David For using to get to URLs.

00:18:18.010 --> 00:18:20.420
New Movie from DataRef can
actually open files as well.

00:18:20.470 --> 00:18:23.650
If you use New Movie from File,
that's fine, but you can set up a DataRef

00:18:23.680 --> 00:18:24.830
that points at a file.

00:18:24.970 --> 00:18:26.810
You can set up a DataRef
that points at a handle.

00:18:26.820 --> 00:18:29.310
You can set up DataRefs that
point at lots of things.

00:18:29.430 --> 00:18:31.720
This is actually an
extensible part of QuickTime.

00:18:31.720 --> 00:18:35.500
You could write a component that
extends QuickTime and adds a new type

00:18:35.500 --> 00:18:41.720
of DataRef and QuickTime would then
be able to read data from your source.

00:18:41.720 --> 00:18:45.640
New Movie from DataRef can open any piece
of media that QuickTime understands.

00:18:45.780 --> 00:18:50.440
Get Graphics Importer for DataRef
is specific for still images.

00:18:50.440 --> 00:18:52.660
You can open still images
with New Movie from DataRef,

00:18:52.660 --> 00:18:54.780
but you'll get a movie
with one frame in it,

00:18:54.780 --> 00:18:58.020
which may be useful, but probably isn't.

00:19:01.510 --> 00:19:03.950
As I said, files are data refs.

00:19:03.970 --> 00:19:07.840
A data ref is just a handle,
and it contains some piece of information

00:19:07.840 --> 00:19:09.100
that points you at a data source.

00:19:09.120 --> 00:19:12.160
In this case,
the handle just contains an alias.

00:19:12.280 --> 00:19:14.720
And then you pass in to
new movie from data ref,

00:19:14.720 --> 00:19:18.800
there's a second parameter that you
tell it what type of data ref it is.

00:19:18.910 --> 00:19:21.240
Pretty straightforward.

00:19:21.250 --> 00:19:24.980
The next slide is going to take
that gold code and change it to

00:19:24.980 --> 00:19:27.330
open a URL instead of a file.

00:19:27.520 --> 00:19:29.900
But the call to new movie
from DataRef is identical.

00:19:29.900 --> 00:19:30.900
There you go.

00:19:30.900 --> 00:19:31.900
URL is a C string.

00:19:31.900 --> 00:19:33.880
Don't forget that null termination.

00:19:33.890 --> 00:19:38.440
Put it in a handle.

00:19:38.950 --> 00:19:39.500
Pass it off to new movie from DataRef.

00:19:47.670 --> 00:19:50.420
As Kevin said yesterday,
the web can be slow.

00:19:50.420 --> 00:19:55.590
Async movie loading is
new in QuickTime 4.1,

00:19:55.600 --> 00:19:57.850
but it's just an extension of
what we were already doing.

00:19:57.860 --> 00:20:02.300
We already had the concept of FastStart,
where the movie can start playing

00:20:02.300 --> 00:20:03.790
before all the media is down.

00:20:03.800 --> 00:20:07.020
But in FastStart,
the entire movie header does need to

00:20:07.020 --> 00:20:08.820
be downloaded before you can play.

00:20:08.820 --> 00:20:12.690
So a new movie from DataRef
doesn't return until the entire

00:20:12.690 --> 00:20:14.540
movie header has been downloaded.

00:20:15.350 --> 00:20:19.270
and in some cases over slow connections,
that can be pretty slow.

00:20:20.120 --> 00:20:24.250
What you can do is use the
New Movie Async OK flag,

00:20:24.250 --> 00:20:26.890
which will take
FastStart one step further.

00:20:26.940 --> 00:20:30.080
New Movie from DataRef
will return immediately.

00:20:30.280 --> 00:20:38.130
with basically an empty movie,
which you then can't play.

00:20:38.860 --> 00:20:41.820
The return movie isn't all there,
and you have to continue

00:20:41.920 --> 00:20:42.970
tasking the movie.

00:20:43.010 --> 00:20:45.700
If you're using a movie controller,
which we recommend,

00:20:45.700 --> 00:20:48.360
you continue passing events to
the movie controller because

00:20:48.940 --> 00:20:52.030
this async opening of the movie
doesn't happen at interrupt time,

00:20:52.030 --> 00:20:53.220
it happens at task time.

00:20:53.450 --> 00:20:57.320
As you task it,
more of the movie comes down.

00:21:00.580 --> 00:21:06.960
GetMovieLowState is the API you call to
find out when your movie is playable.

00:21:07.220 --> 00:21:08.600
There's several states.

00:21:08.630 --> 00:21:11.340
It's loading means that the
header isn't all the way down yet,

00:21:11.350 --> 00:21:13.300
so please don't start playing yet.

00:21:13.300 --> 00:21:14.010
It's playable.

00:21:14.130 --> 00:21:16.290
Complete actually means
that all the media is down.

00:21:16.410 --> 00:21:18.740
The fast start has finished
and the whole movie is down,

00:21:18.740 --> 00:21:23.480
so now you can turn on saving in
your app or something like that.

00:21:24.250 --> 00:21:26.880
You can get an error state back,
and there's another API to

00:21:27.020 --> 00:21:31.100
call to get movie state,
or get movie error,

00:21:31.120 --> 00:21:33.020
to find out what the error is.

00:21:33.020 --> 00:21:34.600
The states are on a numeric scale.

00:21:34.600 --> 00:21:38.470
You should use arithmetic comparisons
because we reserve the right to

00:21:38.470 --> 00:21:40.920
insert new states in between.

00:21:40.920 --> 00:21:44.940
But if you say, you know,
is less than playable, don't play it.

00:21:45.080 --> 00:21:47.430
That's always going to be good forever.

00:21:50.030 --> 00:21:51.890
Now we get to the really cool thing.

00:21:51.900 --> 00:21:55.080
I'm going to demo this
for you in just a minute.

00:21:55.660 --> 00:21:59.530
You can call new movie from DataRef or
get graphics imported for DataRef on

00:21:59.530 --> 00:22:01.360
any file that QuickTime understands.

00:22:01.510 --> 00:22:04.900
You don't need to know anything
at all about the file format.

00:22:04.900 --> 00:22:08.690
We wrote a simple app that's
so lame it doesn't even know

00:22:08.690 --> 00:22:10.900
about graphics importers.

00:22:10.900 --> 00:22:14.010
It just calls new movie from
DataRef on anything you drop on it,

00:22:14.150 --> 00:22:16.500
sets up a movie controller,
sets it up to play,

00:22:16.500 --> 00:22:18.900
and starts tasking the movie controller.

00:22:18.900 --> 00:22:24.900
And let's see what that lame app can do.

00:22:24.900 --> 00:22:29.060
Go over to demo one.

00:22:32.350 --> 00:22:35.180
There it is,
we call it Simple Movie Player.

00:22:35.180 --> 00:22:39.300
Let's just drag a whole bunch
of still images onto it.

00:22:39.330 --> 00:22:42.010
Now these will open as movies,
but that's alright,

00:22:42.010 --> 00:22:44.200
we'll get to see them anyway.

00:22:44.580 --> 00:22:47.790
Oh, we have a JPEG.

00:22:47.840 --> 00:22:52.000
We have a BMP file for
you Windows fanatics.

00:22:52.150 --> 00:22:53.470
An SGI image.

00:22:53.620 --> 00:22:55.500
Let's see, what do we got here?

00:22:55.500 --> 00:22:58.110
I can scale this down so
you can see more of it.

00:22:58.400 --> 00:23:03.890
A Photoshop file that we modified
extensively for our stupid movie.

00:23:05.360 --> 00:23:07.860
We have a ping.

00:23:07.860 --> 00:23:09.790
We have a target file.

00:23:09.880 --> 00:23:11.060
Oh, here's a Mac Paint image.

00:23:11.280 --> 00:23:12.940
That's great.

00:23:14.240 --> 00:23:17.000
We have a TIFF.

00:23:17.000 --> 00:23:18.300
Let's see what else we can do.

00:23:18.480 --> 00:23:21.330
Got a bunch of audio files here.

00:23:21.600 --> 00:23:23.810
This movie player just does
the same thing to all of them.

00:23:24.080 --> 00:23:28.090
Here's an interesting
WAV file we found somewhere.

00:23:33.300 --> 00:23:36.480
I actually dragged that
off of my Windows machine.

00:23:36.520 --> 00:23:39.300
Here's an AIFF.

00:23:39.400 --> 00:23:41.340
You know, all pretty standard.

00:23:41.360 --> 00:23:43.370
Here's a cheap MIDI file.

00:23:43.380 --> 00:23:45.360
We can play those too.

00:23:45.360 --> 00:23:47.340
Sound Designer 2.

00:23:47.360 --> 00:23:49.810
Here's an MP3.

00:23:54.420 --> 00:23:58.010
We've just got a whole pile of things,
and Simple Movie Player doesn't do

00:23:58.060 --> 00:23:59.410
anything different for any of these.

00:23:59.470 --> 00:24:02.680
He doesn't know what these files are,
he just makes those API calls,

00:24:02.740 --> 00:24:04.400
and everything works.

00:24:04.400 --> 00:24:09.390
Let's see, we've got a couple of little
more movie-like things.

00:24:09.420 --> 00:24:11.420
Here's a flick animation.

00:24:13.120 --> 00:24:16.300
Ah, here's an interesting AVI file.

00:24:16.470 --> 00:24:19.880
What lets you learn about
the world in a whole new way?

00:24:19.920 --> 00:24:21.730
Boo-hiss.

00:24:22.270 --> 00:24:25.100
Okay, here's an animated
GIF of an iMac for you.

00:24:25.100 --> 00:24:27.430
Okay, there we go.

00:24:27.680 --> 00:24:32.500
Here's a DV stream,
straight off a camera.

00:24:35.000 --> 00:24:40.500
One seed, two seed, red seed, blue seed.

00:24:40.530 --> 00:24:41.660
You can play that.

00:24:41.660 --> 00:24:43.800
Here's some more interesting
things we can do.

00:24:43.800 --> 00:24:47.220
Here's a flash animation, an SWF file.

00:24:47.960 --> 00:24:50.060
Oh, you got mouse rollovers?

00:24:50.060 --> 00:24:53.590
You know, the app doesn't know anything
from mouse rollovers.

00:24:55.900 --> 00:24:57.400
No big deal.

00:24:57.400 --> 00:25:03.510
Here's an RTSP file that,
let's see what's playing on BBC World.

00:25:07.320 --> 00:25:12.080
This is always a risk because you
don't know what's playing on BBC World.

00:25:12.080 --> 00:25:14.490
Some horrible tragedy
that happened today,

00:25:14.530 --> 00:25:15.510
I don't know.

00:25:17.930 --> 00:25:21.700
Now streaming is interesting because
you come in not at a given rate.

00:25:21.720 --> 00:25:24.340
So you end up with gray
and then it comes blue.

00:25:24.340 --> 00:25:27.300
So there's the BBC.

00:25:29.850 --> 00:25:34.740
Here's one of those really cool
Matthew movies that he set up.

00:25:34.740 --> 00:25:37.460
If anybody saw that demo,
it's kind of fun.

00:25:37.460 --> 00:25:40.340
It's a calculator in a movie.

00:25:40.340 --> 00:25:41.640
Let's take the tangent of that.

00:25:41.640 --> 00:25:43.680
I don't know how he
does the trig functions,

00:25:43.710 --> 00:25:45.880
because we don't have wired
actions for trig functions.

00:25:45.880 --> 00:25:48.020
He must be rotating sprites or something.

00:25:48.020 --> 00:25:49.190
I don't know.

00:25:50.560 --> 00:25:53.600
That's insane.

00:25:53.630 --> 00:25:58.620
And here is what I feel is the
key feature of QuickTime 4.1.

00:25:59.270 --> 00:26:01.860
Something people have been
asking for for a long time.

00:26:01.860 --> 00:26:04.880
This is huge, so this app doesn't really
know how to scale very well.

00:26:04.940 --> 00:26:06.930
I can scale it down by
half so you can see it.

00:26:07.030 --> 00:26:08.860
This is a TIFF fax.

00:26:08.860 --> 00:26:11.890
We finally support in QuickTime 4.1.

00:26:13.900 --> 00:26:16.560
This is kind of an interesting
patent if you read this here.

00:26:16.560 --> 00:26:21.600
It's a three-zone bed cover
with an inflatable human form.

00:26:22.560 --> 00:26:24.960
If you could see farther down,
it actually says that

00:26:24.960 --> 00:26:28.000
that's for security reasons,
so some burglar would actually think

00:26:28.070 --> 00:26:29.000
there's more than one of you there.

00:26:29.000 --> 00:26:32.290
I don't know.

00:26:32.500 --> 00:26:34.670
There's a lot of TIFF faxes
at the patent office,

00:26:34.780 --> 00:26:35.390
you will find.

00:26:35.400 --> 00:26:39.030
We can go back to slides.

00:26:39.140 --> 00:26:42.760
Thank you.

00:26:46.960 --> 00:26:49.300
And with that,
I'd like to introduce you to Sam Bushell.

00:26:49.370 --> 00:26:51.640
He actually wrote the
TIFF Facts Importer,

00:26:51.660 --> 00:26:53.120
so you can thank him for that.

00:26:53.130 --> 00:26:54.060
Welcome, Sam.

00:26:54.530 --> 00:26:55.060
Thank you.

00:26:55.060 --> 00:26:58.970
Good morning.

00:26:59.180 --> 00:27:01.490
Do you appreciate TIFF Facts?

00:27:04.300 --> 00:27:06.540
I'm glad you care.

00:27:06.570 --> 00:27:11.560
Tom and Greg have talked about using
QuickTime on various platforms.

00:27:11.560 --> 00:27:15.840
I'd like to talk about
QuickTime as a platform itself.

00:27:15.990 --> 00:27:19.530
QuickTime is a platform
for doing stuff with media.

00:27:19.900 --> 00:27:22.280
and David In my words.

00:27:22.280 --> 00:27:25.820
So if you have some media technology
and you bring it into QuickTime,

00:27:25.820 --> 00:27:30.980
you gain interoperability with
hundreds of existing applications.

00:27:30.980 --> 00:27:33.500
The way you extend QuickTime is
by writing components,

00:27:33.550 --> 00:27:35.560
and that's what I'm going
to talk to you about.

00:27:35.560 --> 00:27:39.480
So first let's survey some component
types that are pretty important.

00:27:40.760 --> 00:27:43.640
If you've developed a media
compression technology which you'd

00:27:43.640 --> 00:27:47.190
like to support within QuickTime,
then the way you do that is

00:27:47.190 --> 00:27:50.250
by implementing a compressor
and decompressor component

00:27:50.350 --> 00:27:53.230
pair to implement it.

00:27:53.320 --> 00:27:56.200
Now, your compressed data will
automatically be stored using

00:27:56.200 --> 00:27:57.360
the QuickTime file format.

00:27:57.550 --> 00:28:03.120
All you have to deal with is the
tiny step of moving between the sound

00:28:03.130 --> 00:28:07.510
or video and your compressed data.

00:28:07.660 --> 00:28:10.600
If you write the compressor,
then it will appear in all

00:28:10.600 --> 00:28:15.500
of the standard compression
dialogs for that media type.

00:28:15.590 --> 00:28:19.500
For streaming, there are two important
component types at this level.

00:28:19.580 --> 00:28:22.870
There's packetizer components,
which break out compressed

00:28:22.950 --> 00:28:26.690
media data into packets that
can be sent over the wire.

00:28:26.830 --> 00:28:29.980
And then there's reassembler components,
which combine those packets

00:28:29.980 --> 00:28:33.300
back into media samples which
are ready for decompression.

00:28:33.430 --> 00:28:36.490
Now, you don't necessarily
have to write those.

00:28:36.610 --> 00:28:40.070
QuickTime is able to stream your
content without you having a

00:28:40.070 --> 00:28:42.120
custom packetizer and reassembler.

00:28:42.250 --> 00:28:45.300
But in that situation,
you don't get any codec-specific

00:28:45.710 --> 00:28:47.660
resilience to data loss.

00:28:47.790 --> 00:28:52.060
For example,
if you're watching a video stream and

00:28:52.060 --> 00:28:57.840
you lose one packet out of a video frame,
then the user doesn't get to see that

00:28:57.840 --> 00:29:01.950
entire video frame or any subsequent
frames until the next keyframe.

00:29:02.130 --> 00:29:03.600
So that's a big loss.

00:29:03.700 --> 00:29:06.270
On the other hand,
if you devise an RTP payload format that

00:29:06.270 --> 00:29:11.010
can incorporate some cleverness that's
specific to your data format and is

00:29:11.010 --> 00:29:15.330
able to recover from some packet loss,
then you can implement a packetizer

00:29:15.340 --> 00:29:18.160
and reassembler pair to make that work.

00:29:20.670 --> 00:29:23.160
Still image is my favorite.

00:29:23.170 --> 00:29:26.330
QuickTime's model for still
image support on the import

00:29:26.470 --> 00:29:30.980
side is split into two pieces:
graphics importers, which handle the

00:29:31.130 --> 00:29:34.530
specifics of file formats,
and image decompressors,

00:29:34.530 --> 00:29:38.890
which handle the specifics of the
compressed media data inside them.

00:29:39.170 --> 00:29:42.410
Now, graphics importers have taken
off as a platform in themselves.

00:29:42.550 --> 00:29:45.600
You'll see a lot of applications
which list the file formats they

00:29:45.600 --> 00:29:50.700
support as these 12 plus any
other that QuickTime supports.

00:29:50.780 --> 00:29:53.380
By writing a graphics
importer for your file format,

00:29:53.440 --> 00:29:56.310
you insert yourself into
all of these applications.

00:29:56.440 --> 00:29:59.040
The situation is similar
with graphics exporters,

00:29:59.040 --> 00:30:02.580
although there are fewer applications
that are interested in writing

00:30:02.580 --> 00:30:04.520
files than there are that read them.

00:30:04.790 --> 00:30:08.820
When writing graphics exporters,
you have the choice of whether you keep

00:30:08.840 --> 00:30:12.730
your compression technology inside the
graphics exporter or whether you package

00:30:12.730 --> 00:30:14.700
it inside a separate image compressor.

00:30:14.790 --> 00:30:17.170
If it's inside the image compressor,
then that will appear in all of

00:30:17.170 --> 00:30:18.610
the standard compression dialogs.

00:30:18.650 --> 00:30:22.170
It's up to you whether that's
the way you want to go.

00:30:22.580 --> 00:30:24.540
For instance,
we don't think it's a sensible idea

00:30:24.540 --> 00:30:28.270
to have Mac Paint appear in the
static video compression dialog,

00:30:28.300 --> 00:30:34.690
because not many people want
to have one-bit 7x11 movies.

00:30:34.690 --> 00:30:37.600
It just isn't a very popular format.

00:30:39.940 --> 00:30:43.900
People often start thinking
of QuickTime's movie import

00:30:43.900 --> 00:30:46.260
components as file translators.

00:30:46.390 --> 00:30:50.800
Start off with an XYZ file,
write out a movie file,

00:30:50.910 --> 00:30:53.240
but they're actually a
whole lot cooler than that,

00:30:53.240 --> 00:30:55.350
as Greg demonstrated.

00:30:55.450 --> 00:31:00.640
A movie import component simply
needs to be able to parse some file

00:31:00.640 --> 00:31:04.370
and identify where the compressed
media samples are in that file,

00:31:04.370 --> 00:31:08.040
and then create a movie header
in memory that references

00:31:08.330 --> 00:31:10.830
those samples inside the file.

00:31:11.510 --> 00:31:14.600
Once you've done that,
QuickTime can play the movie

00:31:14.600 --> 00:31:16.780
straight out of that original file.

00:31:16.870 --> 00:31:21.510
This is called import in place,
and it's why you can take an animated

00:31:21.510 --> 00:31:26.690
GIF or an AVI file and open it in
simple text or a simple app like that.

00:31:30.400 --> 00:31:33.360
Writing video effects is a lot
of fun and it's pretty easy.

00:31:33.360 --> 00:31:35.220
We have lots of samples.

00:31:35.330 --> 00:31:38.070
I'll show you a demo of a
really cool third-party video

00:31:38.070 --> 00:31:39.480
effect in just a moment.

00:31:41.330 --> 00:31:46.110
Now, media handler components are the
part of QuickTime that implement

00:31:46.140 --> 00:31:49.380
individual tracks inside a movie.

00:31:49.490 --> 00:31:53.390
If you have a time-based media
technology which doesn't fit into

00:31:53.440 --> 00:31:58.430
the existing models that the existing
track types in QuickTime handle,

00:31:58.570 --> 00:32:00.340
you can implement it in
a custom media handler.

00:32:00.430 --> 00:32:03.400
An example of that is PuppetTime.

00:32:07.380 --> 00:32:11.780
If your company develops hardware
that can bring media into the computer

00:32:11.860 --> 00:32:15.810
or play it back out of the computer,
then you'd write one of these components

00:32:16.070 --> 00:32:19.090
to enable QuickTime applications
to take advantage of it.

00:32:19.220 --> 00:32:23.280
A particularly important one
of these is the bottom one,

00:32:23.280 --> 00:32:24.760
Video Digitizers.

00:32:24.920 --> 00:32:27.760
I should point out for those of you
who are interested in Video Digitizers

00:32:27.970 --> 00:32:32.990
that there is a Birds of a Feather
session tonight at 6:30 p.m.

00:32:33.210 --> 00:32:38.860
I believe the room is A1 or A2,
but there'll be people standing

00:32:38.860 --> 00:32:43.130
around there that look like
QuickTime engineers and people who are

00:32:43.900 --> 00:32:56.000
[Transcript missing]

00:32:59.100 --> 00:33:03.720
Some of the component interfaces inside
QuickTime involve an awful lot of

00:33:03.720 --> 00:33:09.400
fairly dull bookkeeping details that
don't relate to every implementation.

00:33:09.430 --> 00:33:12.130
To let you focus on the
piece where you add value,

00:33:12.130 --> 00:33:15.630
we've implemented a collection
of base components which handle

00:33:15.630 --> 00:33:18.180
the most common details for you.

00:33:18.180 --> 00:33:19.640
In some cases,
it's very hard to get these

00:33:19.640 --> 00:33:23.090
details correct by yourself.

00:33:23.100 --> 00:33:28.480
For example, the base image decompressor
helps you handle asynchronous

00:33:28.600 --> 00:33:31.120
queued schedule decompression

00:33:32.170 --> 00:33:35.430
Without handling the queue yourself,
we look after that.

00:33:35.510 --> 00:33:41.640
We look after all of the reentrancy,
the race conditions,

00:33:41.710 --> 00:33:47.200
and mutex protection for the queue,
and a bunch of other related issues.

00:33:47.300 --> 00:33:50.580
We found that we could get rid of
a lot of bugs in QuickTime when

00:33:50.580 --> 00:33:53.960
we switched over a bunch of
our other image decompressor

00:33:53.960 --> 00:33:55.970
components to use the base codec.

00:33:56.210 --> 00:33:59.200
So if you're going to write
any of these components,

00:33:59.310 --> 00:34:02.560
please start with the base
components for these categories.

00:34:02.590 --> 00:34:05.180
You will save yourself a lot of strife.

00:34:05.710 --> 00:34:11.160
And now, I'm going to demonstrate
some cool third-party things.

00:34:17.800 --> 00:34:34.000
[Transcript missing]

00:34:35.200 --> 00:34:38.100
It has a little bit of audio in it.

00:34:38.100 --> 00:34:41.340
And with QuickTime Player,

00:34:41.510 --> 00:34:47.410
I can choose export movie to
QuickTime movie and then select a

00:34:47.450 --> 00:34:51.510
filter and you get a preview here.

00:34:52.710 --> 00:34:55.130
It's definitely installed,
but it's not real time.

00:34:55.160 --> 00:34:57.060
It's actually quite slow.

00:34:57.190 --> 00:35:03.220
So I've did this movie ahead of time
so that you can get to enjoy it.

00:35:08.100 --> 00:35:10.770
This video effect was developed
by the same people responsible

00:35:10.870 --> 00:35:15.100
for some of the special effects
in the movie What Dreams May Come.

00:35:15.100 --> 00:35:21.600
It's a really phenomenal
visual thing to look at.

00:35:21.610 --> 00:35:25.920
And so they decided to make it available
to general customers of people using

00:35:25.920 --> 00:35:29.850
QuickTime and a few other apps for the

00:35:30.400 --> 00:35:36.700
[Transcript missing]

00:35:41.100 --> 00:35:47.500
So, okay, there's a video effect being
used by a QuickTime application.

00:35:47.500 --> 00:35:48.700
You can extend QuickTime.

00:35:48.870 --> 00:35:50.690
That's interesting.

00:35:50.910 --> 00:35:52.540
Here's another situation.

00:35:52.580 --> 00:35:56.250
Here's a file format from
a company called BitJazz.

00:35:56.290 --> 00:35:59.090
The file format is called PhotoJazz.

00:35:59.250 --> 00:36:02.200
It's a lossless compression
format for pictures.

00:36:02.200 --> 00:36:03.760
It's fairly expressive.

00:36:03.880 --> 00:36:07.810
These are all the same picture,
so you don't get to see much

00:36:08.140 --> 00:36:09.990
difference between them.

00:36:11.100 --> 00:36:14.000
There's a Photoshop version,
a Ping version,

00:36:14.170 --> 00:36:16.600
and the PhotoJazz version.

00:36:16.610 --> 00:36:24.100
And their big deal is that they claim to
do better compression than everyone else.

00:36:24.100 --> 00:36:30.870
They're certainly a lot smaller
than the parrot in Photoshop.

00:36:30.870 --> 00:36:30.870
They're a good one.

00:36:32.100 --> 00:36:42.900
[Transcript missing]

00:36:43.390 --> 00:36:47.550
But if your business is developing a
file format or compression technology,

00:36:47.550 --> 00:36:53.800
it's a tough job if you have to go and
talk to individual application developers

00:36:53.800 --> 00:36:56.050
just to get them to support it.

00:36:56.190 --> 00:36:58.800
These guys wrote the
QuickTime components to support this,

00:36:58.800 --> 00:37:01.040
a graphics importer and
a graphics exporter,

00:37:01.220 --> 00:37:06.320
and they have different levels of
graphics exporter that you can-- of

00:37:06.320 --> 00:37:10.260
writing support that you can get by
paying them different amounts of money.

00:37:10.320 --> 00:37:13.690
But everyone gets the viewer for free,
as you see.

00:37:14.390 --> 00:37:18.650
So that's PhotoJazz running
inside PictureViewer.

00:37:18.770 --> 00:37:22.700
In each case, this is just extending
a QuickTime application,

00:37:22.700 --> 00:37:24.520
which is often the way we
demonstrate things because,

00:37:24.680 --> 00:37:27.800
well, they're the applications
that we're familiar with.

00:37:28.810 --> 00:37:32.140
What's rather more interesting for
users is where they're taking a

00:37:32.140 --> 00:37:39.190
third-party application and having
that application's power extended by...

00:37:39.600 --> 00:37:55.600
[Transcript missing]

00:37:56.560 --> 00:38:02.380
Painting uses QuickTime video
effects as filters.

00:38:02.430 --> 00:38:07.100
And so I can choose Video Go here,
and one of the other choices

00:38:07.420 --> 00:38:09.720
besides oil painting is chalk.

00:38:09.890 --> 00:38:13.420
This is going to give you an
idea of why it's not really real

00:38:13.420 --> 00:38:15.500
time for doing a video effect.

00:38:15.500 --> 00:38:18.890
It takes a moment,
but it's a great effect.

00:38:20.920 --> 00:38:24.530
So here we have a third-party
application and two different third-party

00:38:24.610 --> 00:38:26.500
components all working together.

00:38:26.550 --> 00:38:30.830
I don't believe, or I don't know,
but there's no sign that any of

00:38:31.200 --> 00:38:34.190
these individual third-party vendors
had to communicate with each other

00:38:34.290 --> 00:38:35.900
in order to establish a standard.

00:38:36.050 --> 00:38:42.900
Just the involvement of QuickTime here
has enabled them to work together.

00:38:42.980 --> 00:38:44.730
I think that's neat.

00:38:54.100 --> 00:38:56.540
So let's talk about writing your
own components now that you've

00:38:56.540 --> 00:38:58.850
seen what the competition can do.

00:38:58.990 --> 00:39:02.230
There's an awful lot of sample code
on the QuickTime developer website,

00:39:02.370 --> 00:39:05.740
which does include a wide
variety of sample components.

00:39:06.090 --> 00:39:09.160
They're sometimes a little bit buried,
and you may have to try several

00:39:09.160 --> 00:39:11.980
before you find the right one
for what you're trying to do.

00:39:12.420 --> 00:39:14.800
Rather than discuss
these individual samples,

00:39:14.840 --> 00:39:18.270
I'm going to talk about some
of the key concepts that are

00:39:18.600 --> 00:39:22.600
absolutely important for any kind of
component that you want to develop.

00:39:24.080 --> 00:39:26.660
First of all, I'm going to talk about
component dispatches.

00:39:26.770 --> 00:39:30.860
Now, conceptually,
a component is a cohesive module of code

00:39:30.860 --> 00:39:36.790
that works for a particular purpose,
like a Tiff Fax graphics importer.

00:39:37.580 --> 00:39:42.600
Each component has a single entry point,
known as the dispatcher,

00:39:42.640 --> 00:39:47.070
and it knows about the functions that
are implemented by that component,

00:39:47.110 --> 00:39:50.660
and it knows how to route the calls
that come in to those components.

00:39:50.660 --> 00:39:56.760
Now, notice that the functions on this

00:39:57.020 --> 00:39:58.380
All have numbers next to them.

00:39:58.400 --> 00:40:00.480
These numbers are called selectors.

00:40:00.530 --> 00:40:03.980
Negative selectors are common
to all component types.

00:40:04.050 --> 00:40:06.800
Non-negative ones,
that's zero and positive numbers,

00:40:06.850 --> 00:40:09.760
are specific to the component
type you're dealing with,

00:40:09.760 --> 00:40:11.970
and sometimes the component subtype.

00:40:13.820 --> 00:40:17.880
The four top ones you see here are
component functions that have to

00:40:17.880 --> 00:40:20.790
be implemented by every component.

00:40:20.940 --> 00:40:24.090
They're open, which allocates storage
for your component and

00:40:24.450 --> 00:40:25.740
anything else that you need.

00:40:25.790 --> 00:40:27.460
Close, which gets rid of it.

00:40:27.500 --> 00:40:29.900
Can do, which finds out whether
a particular selector is

00:40:29.910 --> 00:40:31.380
implemented by your component.

00:40:31.420 --> 00:40:34.150
And version,
for determining the difference

00:40:34.160 --> 00:40:36.320
between-- for establishing
the version of your component,

00:40:36.320 --> 00:40:38.460
in case someone needs to know that.

00:40:39.080 --> 00:40:42.470
So the job of the dispatcher
is to know the relationship

00:40:42.540 --> 00:40:44.880
between a number and a function,
and to call the right

00:40:44.880 --> 00:40:45.700
one at the right time.

00:40:45.830 --> 00:40:47.620
It doesn't seem like a big deal.

00:40:47.630 --> 00:40:50.960
Unfortunately, it's a nuisance.

00:40:51.390 --> 00:40:53.410
It's easy to get wrong.

00:40:53.530 --> 00:40:56.840
There are fiddly details that are
different on different platforms.

00:40:56.940 --> 00:40:59.930
We have a tool that helps
address these problems called

00:40:59.930 --> 00:41:00.910
Component Dispatch Helper.

00:41:00.970 --> 00:41:04.580
That's what we use internally for writing
almost all of our QuickTime components.

00:41:04.690 --> 00:41:07.090
And it isn't perfect, but it's well used.

00:41:07.220 --> 00:41:11.280
And it does generate both the dispatcher
and the can do from a single list,

00:41:11.280 --> 00:41:13.360
so they don't get out of sync.

00:41:13.450 --> 00:41:16.690
It's also faster and more
robust than doing it by hand

00:41:16.690 --> 00:41:18.810
once you've got the hang of it.

00:41:19.540 --> 00:41:22.910
So it is also demonstrated by
some of the pieces of sample code,

00:41:23.250 --> 00:41:26.260
although the sample code also
demonstrates alternatives to using it.

00:41:26.370 --> 00:41:28.990
So I'm not going to explain
how to use it in great detail,

00:41:29.090 --> 00:41:33.890
but it's very useful to be able to

00:41:34.300 --> 00:42:02.800
[Transcript missing]

00:42:03.550 --> 00:42:06.390
Now, if your component doesn't
implement some selectors,

00:42:06.410 --> 00:42:11.450
you still need to put empty slots there
so that functions with later selectors

00:42:11.450 --> 00:42:14.240
go into the right slots in the table.

00:42:14.370 --> 00:42:16.920
The component dispatch helper,
because of the limitations

00:42:16.920 --> 00:42:19.230
of macros in C,
doesn't protect you

00:42:19.230 --> 00:42:20.440
from that kind of stuff.

00:42:20.530 --> 00:42:23.600
So you need to be a little bit careful
and need to have in mind what this

00:42:23.770 --> 00:42:25.640
is actually doing when you use it.

00:42:25.710 --> 00:42:28.580
But if you do,
you should probably be okay.

00:42:30.140 --> 00:42:33.340
Let's also talk about the
way we describe components.

00:42:33.410 --> 00:42:35.960
There's a resource
called the THNG resource,

00:42:35.960 --> 00:42:37.620
or the Thing resource.

00:42:37.740 --> 00:42:39.200
Now, a little bit of history.

00:42:39.210 --> 00:42:43.790
The component manager was
originally called the Thing Manager.

00:42:44.730 --> 00:42:49.010
and Component instances
were Thing instances.

00:42:49.160 --> 00:42:53.000
Legend has it that Apple's technical
writers found it too hard to write

00:42:53.070 --> 00:42:56.320
meaningful documentation about
Things and begged the engineering

00:42:56.320 --> 00:43:00.500
team to call them Components instead.

00:43:00.500 --> 00:43:00.500
Who knows

00:43:02.590 --> 00:43:07.530
Let's have a look at a
Thing resource for a 68k component,

00:43:07.610 --> 00:43:09.410
a classic type.

00:43:11.270 --> 00:43:15.320
We have fields that have the type,
subtype, and manufacturer codes.

00:43:15.320 --> 00:43:17.640
There's four character codes.

00:43:17.640 --> 00:43:19.760
We have a flags field.

00:43:19.760 --> 00:43:23.500
We have resource type and
IDs that identify the code

00:43:23.500 --> 00:43:25.320
resource and some strings.

00:43:25.320 --> 00:43:29.700
And there's some other stuff in
there that I've omitted for clarity.

00:43:29.700 --> 00:43:33.820
Note that the first byte of the code
resource is the entry point here.

00:43:33.820 --> 00:43:37.490
Every time you make a component
call on a 68K component,

00:43:37.490 --> 00:43:39.160
it'll JSR to that.

00:43:39.820 --> 00:43:45.810
We don't use the code resource
field for PowerPC components.

00:43:45.970 --> 00:43:48.740
Instead,
we added something back years ago,

00:43:49.560 --> 00:43:52.550
which was an extension called
the Component Platform Array.

00:43:52.750 --> 00:43:56.770
You can actually have a single thing
resource that describes the code

00:43:56.810 --> 00:44:00.390
to be used on multiple platforms,
and the component manager

00:44:00.390 --> 00:44:03.780
chooses the right one when
it registers that component.

00:44:03.900 --> 00:44:07.530
So,
if you have the Component Platform Array,

00:44:07.820 --> 00:44:10.320
you have to set a bit
called hasMultiplePlatforms.

00:44:10.630 --> 00:44:14.780
Even if there's only one,
it's a rather poorly named constant.

00:44:14.780 --> 00:44:17.020
We admit that,
but there's not much we can do

00:44:17.110 --> 00:44:18.730
to change it in the past now.

00:44:22.810 --> 00:44:26.850
Also note that the flags have been
moved down from where they were to

00:44:26.850 --> 00:44:29.190
part of the component platform array.

00:44:29.270 --> 00:44:32.680
This means that different
component implementations,

00:44:32.750 --> 00:44:36.540
different code on different platforms,
can actually have different flags,

00:44:36.540 --> 00:44:38.630
which is sometimes a useful property.

00:44:40.190 --> 00:44:47.360
So in this case, the code resource is a
PowerPC PEF container with a

00:44:47.360 --> 00:44:50.580
routine descriptor-- sorry,
the main entry point for that

00:44:50.580 --> 00:44:56.220
PEF container is a routine descriptor
that's wrapped around the dispatcher.

00:44:58.590 --> 00:45:01.830
What about Mac OS X?

00:45:01.920 --> 00:45:04.610
Well, I've just moved the diagram across.

00:45:04.610 --> 00:45:06.340
This is the same as you were
seeing on the previous slide.

00:45:06.340 --> 00:45:09.950
I've just chopped off the top bit.

00:45:10.850 --> 00:45:13.240
On Mac OS X,
there are two linkage models.

00:45:13.360 --> 00:45:17.000
There's the Code Fragment Manager,
and there's also Maco,

00:45:17.160 --> 00:45:19.370
the Mac object format.

00:45:19.650 --> 00:45:23.220
However, Mac OS X does not support
code and code resources.

00:45:23.450 --> 00:45:25.610
It has to be in the data fork somehow.

00:45:28.140 --> 00:45:34.730
For CFM, the code is in a PEF container
inside the data fork,

00:45:34.730 --> 00:45:38.100
and it's described by a CFRAG resource.

00:45:38.100 --> 00:45:42.080
Now, you can have multiple PEF containers
in a single data fork,

00:45:42.100 --> 00:45:46.100
so you don't have to have
a proliferation of files,

00:45:46.100 --> 00:45:51.100
but you have a single CFRAG resource
that describes them all.

00:45:51.100 --> 00:45:56.100
And the number that is normally
a resource ID is actually a tag

00:45:56.100 --> 00:45:59.060
that has to match a field inside,
an entry inside that

00:45:59.100 --> 00:46:02.100
extended CFRAG resource.

00:46:03.230 --> 00:46:10.770
With Marco, the entry point is
identified by a symbol name,

00:46:10.870 --> 00:46:17.540
and so the symbol name is stored in
a string resource with type DLLE.

00:46:17.620 --> 00:46:19.750
Now, since the namespace for
Marco symbols is flat,

00:46:19.850 --> 00:46:23.500
you should take care to give your
entry point a distinctive name.

00:46:23.610 --> 00:46:26.050
Otherwise, you might have the situation
where two different vendors both

00:46:26.050 --> 00:46:30.810
chose my component entry point,
and the results of a collision like

00:46:30.820 --> 00:46:33.300
that would be highly unpleasant.

00:46:33.730 --> 00:46:38.010
Also note that there are no
routine descriptors on Mac OS X.

00:46:38.120 --> 00:46:43.510
In both cases here,
the entry point is the dispatcher itself,

00:46:43.740 --> 00:46:44.600
not RAT.

00:46:44.880 --> 00:46:48.260
Accordingly,
the platform type has changed from

00:46:48.340 --> 00:46:51.450
PowerPC to PowerPC native entry point.

00:46:52.240 --> 00:46:55.100
Let's go over that again.

00:46:55.140 --> 00:46:57.630
On Mac OS X,
the entry point is not wrapped

00:46:57.630 --> 00:46:59.030
in a routine descriptor.

00:46:59.140 --> 00:47:02.500
And the platform type is
PowerPC native entry point.

00:47:03.000 --> 00:47:07.900
Another thing, CarbonLib components.

00:47:07.900 --> 00:47:10.670
Components should only link
to CarbonLib on Mac OS X,

00:47:10.820 --> 00:47:12.140
not on Mac OS 9.

00:47:12.240 --> 00:47:15.170
It turns out that the CarbonLib
extension on Mac OS 8 and 9

00:47:15.410 --> 00:47:18.370
currently only provides support
for applications and some plug-ins,

00:47:18.450 --> 00:47:19.900
not for general components.

00:47:19.900 --> 00:47:21.900
There are some technical
reasons behind that.

00:47:21.960 --> 00:47:24.930
If you want to deliver a single file
that your users can use on each platform,

00:47:24.940 --> 00:47:25.900
however, you can.

00:47:25.900 --> 00:47:29.760
Your thing resources would
have two component platforms in

00:47:29.760 --> 00:47:34.310
the component platform array,
and one of them would

00:47:34.310 --> 00:47:38.880
be PowerPC platform,
which would link to InterfaceLib

00:47:38.950 --> 00:47:42.710
and have a routine descriptor,
and one of them would be one for 10,

00:47:42.770 --> 00:47:44.800
which would say
PowerPC native entry point,

00:47:44.890 --> 00:47:49.870
have no routine descriptor,
and be in the data fork.

00:47:52.030 --> 00:47:53.900
and link to CovenLib.

00:47:54.770 --> 00:47:59.990
Also note that the DLLE,
you might have guessed by the name,

00:47:59.990 --> 00:48:03.980
the mechanism that we use on Mac OS is
the same as we use on Windows.

00:48:03.980 --> 00:48:06.320
So if you're familiar with one side,
the other side should be pretty easy.

00:48:08.660 --> 00:48:12.840
In some situations, you need to register
your component twice.

00:48:12.910 --> 00:48:15.030
For example,
if you want to write a graphics

00:48:15.160 --> 00:48:19.390
importer or a movie importer,
the component subtype for that component

00:48:19.900 --> 00:48:24.710
might be interpreted as a file type,
or you could set a bit that

00:48:24.750 --> 00:48:29.390
said it should be interpreted
as a file name suffix.

00:48:29.680 --> 00:48:32.170
You probably want people to
be able to open your files if

00:48:32.250 --> 00:48:34.600
they have one of those right,
but not the other,

00:48:34.610 --> 00:48:37.050
in which case you need to register
your component twice so that

00:48:37.050 --> 00:48:39.260
the lookups both work correctly.

00:48:40.990 --> 00:48:45.200
There's a good shorthand for doing
this called a component alias.

00:48:45.210 --> 00:48:48.940
It's slightly more efficient
than having two thing resources

00:48:48.940 --> 00:48:51.900
that both describe the same code.

00:48:51.900 --> 00:48:55.800
It basically tells the component
manager to register a second component

00:48:55.800 --> 00:48:59.470
with the same code as the first,
but with a different

00:48:59.610 --> 00:49:01.180
subtype or different flags.

00:49:01.670 --> 00:49:05.500
So what happens when things go wrong
when you're working on these components?

00:49:05.520 --> 00:49:08.870
If your component doesn't load initially,
first thing to ask is,

00:49:08.870 --> 00:49:10.560
did it get registered okay?

00:49:10.630 --> 00:49:13.760
You could write some code
like this and run it,

00:49:13.760 --> 00:49:16.760
or you could use one
of the tools that I'll

00:49:17.930 --> 00:49:20.140
If you've established that
the component is registered,

00:49:20.140 --> 00:49:22.700
you should find out whether
it actually executes.

00:49:22.700 --> 00:49:27.050
You could set a breakpoint in your open
routine and run some code like this.

00:49:29.210 --> 00:49:32.890
The usual things that go wrong
when we're working on components,

00:49:32.890 --> 00:49:37.600
we find that people often forget
the hasMultiplePlatforms bit,

00:49:37.610 --> 00:49:40.340
partly because it had that poor name.

00:49:40.460 --> 00:49:42.860
This flag really means this
is not a 68K component,

00:49:42.860 --> 00:49:46.650
so you need to set this bit for
practically all components you write now.

00:49:46.730 --> 00:49:49.190
If this bit isn't set,
that'll prevent the

00:49:49.190 --> 00:49:51.170
component from registering.

00:49:51.790 --> 00:49:55.630
Now, other problems that occur where
the component gets to register,

00:49:55.670 --> 00:49:58.700
but it can't ever be opened.

00:49:58.700 --> 00:50:00.970
Basically,
troubleshooting these involves working

00:50:00.970 --> 00:50:04.620
from the thing resource through to your
code and making sure that all the steps

00:50:04.620 --> 00:50:06.160
along the way are correctly set up.

00:50:06.200 --> 00:50:11.140
That the resource ID in the thing
resource points to the DLE string,

00:50:11.140 --> 00:50:15.700
and that that has a name that
matches the next step and so forth,

00:50:15.730 --> 00:50:21.690
and that the entry point that's in that
string is exported from your library.

00:50:23.690 --> 00:50:27.630
So there are a few tools which are
very useful for browsing the components

00:50:27.630 --> 00:50:29.500
that are installed on a computer.

00:50:29.550 --> 00:50:33.600
I'm going to demonstrate a
couple of these in a moment.

00:50:33.600 --> 00:50:35.510
The free one is MaxBug.

00:50:35.900 --> 00:50:41.880
Every version of MaxBug that you can use
with current versions of Mac OS 9 has a

00:50:42.160 --> 00:50:44.500
built-in debugger command called Thing.

00:50:44.580 --> 00:50:46.600
I'll show you that in a sec.

00:50:46.890 --> 00:50:51.600
There are also a couple of nice shareware
tools with graphical interfaces.

00:50:51.600 --> 00:50:55.600
There's one that's new today, I think.

00:50:55.600 --> 00:50:58.600
It's certainly new this week,
called Thing Detective.

00:50:58.690 --> 00:51:03.600
There's a free subversion called
Thing Reporter from Unthinkable Research.

00:51:03.600 --> 00:51:06.920
There's also, I think,
Thing from Tactic Software.

00:51:08.890 --> 00:51:12.520
Before I show you those tools,
I'd like to mention another thing

00:51:12.520 --> 00:51:15.800
that's very useful when you're
actually working on a component.

00:51:16.000 --> 00:51:20.570
It's very annoying if you have to
restart every time you make a change

00:51:20.570 --> 00:51:22.700
in the code and recompile and rebuild.

00:51:22.800 --> 00:51:25.700
Instead,
if you drag your component onto a

00:51:25.700 --> 00:51:30.800
small application called Reinstaller,
Reinstaller 3 at the moment,

00:51:30.800 --> 00:51:33.920
it will unregister the previous
version of your component and

00:51:33.930 --> 00:51:35.800
register the new one in its place.

00:51:35.800 --> 00:51:37.800
You don't need to restart
to make that work.

00:51:37.800 --> 00:51:42.800
And I will demonstrate that as well,
because I have plenty of time.

00:51:42.800 --> 00:51:46.940
So, let's go and have a look
at some of these things.

00:51:52.100 --> 00:51:57.210
Down here we have Thing Detective from
Unthinkable Research.

00:52:03.340 --> 00:52:06.770
There are a lot of components
installed in this machine.

00:52:06.900 --> 00:52:10.180
And you can -- this is a
nice graphical view of them.

00:52:10.420 --> 00:52:15.230
They all have a name,
or most of them have a name.

00:52:15.230 --> 00:52:15.230
They have a type.

00:52:15.940 --> 00:52:30.710
Subtype,
and you can sort by all of these things.

00:52:30.710 --> 00:52:30.710
Let's go and see if we can
find the components that we

00:52:30.710 --> 00:52:30.710
were playing with earlier.

00:52:30.710 --> 00:52:30.710
Let's look for PhotoJazz.

00:52:30.710 --> 00:52:30.710
Here we are.

00:52:30.710 --> 00:52:30.710
Here's the graphics exporter component.

00:52:30.710 --> 00:52:30.710
Let's keep going down and
find the graphics importer.

00:52:30.710 --> 00:52:30.710
Here we are.

00:52:31.990 --> 00:52:34.930
So let's see what it
can tell us about this.

00:52:35.010 --> 00:52:39.470
It tells us the type, subtype,
and manufacturer.

00:52:39.520 --> 00:52:41.500
It says there aren't
currently any instances.

00:52:41.500 --> 00:52:43.190
If I went and opened
that in Picture Viewer,

00:52:43.200 --> 00:52:45.400
this number would change to 1.

00:52:48.120 --> 00:52:50.760
can also tell us about
the file it came from.

00:52:50.820 --> 00:52:53.060
It can tell us information
about the Thing resource.

00:52:53.060 --> 00:52:54.990
It's actually found a bug.

00:52:55.010 --> 00:52:58.500
It's actually found that the
icon resources are missing or

00:52:58.710 --> 00:53:01.740
perhaps should just not be listed.

00:53:01.800 --> 00:53:05.620
I don't actually recommend that you
store icons inside your Thing resources.

00:53:05.620 --> 00:53:07.860
They're mostly a waste
of space in the file.

00:53:08.070 --> 00:53:11.940
They're not used by many parts
of the browsing applications.

00:53:12.010 --> 00:53:13.400
You can if you want.

00:53:16.020 --> 00:53:17.260
But it doesn't make any difference.

00:53:17.350 --> 00:53:22.180
This is a totally benign problem.

00:53:22.180 --> 00:53:24.830
There's also something
we added in QuickTime 4.0

00:53:24.930 --> 00:53:26.540
called public resource maps.

00:53:26.590 --> 00:53:30.290
These are a way of attaching
extra information to components.

00:53:31.140 --> 00:53:33.670
There are a few places
where this is nice.

00:53:33.770 --> 00:53:37.610
It basically lets us make
some of the APIs much faster,

00:53:37.750 --> 00:53:42.950
such as the dialog that came up
that showed the QuickTime effects.

00:53:43.000 --> 00:53:45.690
It's faster for it to build that list
because it can work out the names

00:53:45.690 --> 00:53:49.810
and the properties of individual
video effects without having to

00:53:49.810 --> 00:53:52.060
load and open each one in turn.

00:53:52.120 --> 00:53:55.420
If you can just pull information out
using the component resource map,

00:53:55.420 --> 00:54:00.360
the component public resource map,
then that's a lot faster.

00:54:00.360 --> 00:54:04.210
We can also browse the flags
that this component has set,

00:54:04.210 --> 00:54:08.490
and it knows about some of these by name,
which is rather neat.

00:54:08.550 --> 00:54:11.380
It can also run the can do
function on the component to

00:54:11.380 --> 00:54:15.320
see which things it supports,
and you can see this supports

00:54:15.510 --> 00:54:20.400
all of the required selectors
and one that's not required.

00:54:20.460 --> 00:54:23.220
And here are all of the ones that
are specific to graphics importers.

00:54:25.000 --> 00:54:28.500
and What are component aliases?

00:54:28.500 --> 00:54:31.000
You can also tell us a bit about them.

00:54:31.320 --> 00:54:33.380
Here, this component is a second alias.

00:54:33.510 --> 00:54:37.330
You notice the subtype for
the first one was j little z,

00:54:37.330 --> 00:54:38.820
little z space.

00:54:39.090 --> 00:54:44.390
This one is in uppercase,
and there's a bit that's set in the

00:54:44.900 --> 00:54:52.500
[Transcript missing]

00:54:55.060 --> 00:54:58.940
So it's the second alias
to the first component.

00:54:59.160 --> 00:55:01.740
So this is a component alias,
and you can tell here,

00:55:01.760 --> 00:55:04.440
and here's the component
that it's an alias to.

00:55:04.540 --> 00:55:08.720
So this is a way of going through and
checking that your component is correctly

00:55:08.840 --> 00:55:11.760
set up and that it's saying all of
the things that you think it should.

00:55:11.920 --> 00:55:17.710
It's a nice way to be able to
interact with your software.

00:55:19.800 --> 00:55:22.100
Thing Detective is available now.

00:55:22.100 --> 00:55:25.900
You can go to the website
at www.unthinkable.com.

00:55:26.170 --> 00:55:27.990
There's the plug.

00:55:28.910 --> 00:55:30.770
We also have some image decompressors.

00:55:30.950 --> 00:55:33.440
I said that video filters
were implemented as a special

00:55:33.440 --> 00:55:37.100
case of decompressors.

00:55:37.180 --> 00:55:40.700
And here's the Video Go one
from Revision Effects.

00:55:45.840 --> 00:55:49.600
So that's the nice, pretty view.

00:55:49.640 --> 00:55:52.460
If you're a programmer,
or you happen to-- if

00:55:52.510 --> 00:55:54.700
you're a programmer,
and you know how to use maxbug,

00:55:54.700 --> 00:55:58.680
and you're not frightened by it,
then there is the

00:55:58.930 --> 00:56:01.280
alternative that I mentioned,
using the thingd command.

00:56:01.320 --> 00:56:03.360
I'm going to drop into maxbug now.

00:56:03.380 --> 00:56:05.280
Don't be afraid.

00:56:08.280 --> 00:56:12.560
Okay, I can print out a list of
the components that are here.

00:56:12.560 --> 00:56:15.620
There's a lot of them,
so I'd have to page through.

00:56:15.680 --> 00:56:19.150
I can also type thing and
then one particular component

00:56:19.150 --> 00:56:22.890
type just to print out,
for instance, let's print out the

00:56:22.890 --> 00:56:25.080
RTP reassembler components.

00:56:25.080 --> 00:56:27.080
They're the ones that are
installed on this computer.

00:56:27.080 --> 00:56:31.540
I can print out a list of the
open components by saying thing-o,

00:56:31.540 --> 00:56:36.120
and here you see that there are
a few components that are open.

00:56:36.120 --> 00:56:37.350
Oh, I must have MoviePlayer running.

00:56:41.570 --> 00:56:45.540
There's some help in the
dcommand help for that.

00:56:45.600 --> 00:56:50.540
It's obviously nicer to use a
graphical view for some things,

00:56:50.540 --> 00:56:52.790
but if you happen to be crashed
and you're working out why,

00:56:52.860 --> 00:56:56.660
it's very useful to have
the thing dcommand as well.

00:56:57.500 --> 00:57:01.260
Let's leave this line installed there.

00:57:01.370 --> 00:57:04.240
Let's talk about while you're
debugging a new component.

00:57:04.300 --> 00:57:10.500
I have here one of the sample
components on the website.

00:57:10.500 --> 00:57:13.720
It's a set of graphics importer,
movie importer,

00:57:13.770 --> 00:57:18.620
and image decompressor for a file
format called Electric Image.

00:57:18.620 --> 00:57:20.360
And I've modified this slightly.

00:57:20.400 --> 00:57:23.680
I've put all of the components
that were pre-built into one file,

00:57:23.730 --> 00:57:27.650
and I've also changed their names
to have spaces so that you'll

00:57:27.650 --> 00:57:30.340
see them in the window behind me.

00:57:30.390 --> 00:57:32.380
But first of all,
let's bring up QuickTime Player.

00:57:32.380 --> 00:57:34.340
Oh, it's the same one.

00:57:34.340 --> 00:57:36.160
Cool.

00:57:36.160 --> 00:57:38.290
And let's try opening...

00:57:43.300 --> 00:57:56.700
[Transcript missing]

00:57:58.770 --> 00:58:01.660
What a fun file format this is.

00:58:01.900 --> 00:58:05.460
You'll also notice that these components
have all appeared in this list.

00:58:05.480 --> 00:58:09.210
And if we would watch the open instances,
these numbers would probably

00:58:09.210 --> 00:58:10.640
have jumped up and down as well.

00:58:10.730 --> 00:58:13.690
So that's a great way of confirming
that things are basically working well.

00:58:13.690 --> 00:58:18.700
And to some extent,
it can help you with troubleshooting.

00:58:18.700 --> 00:58:21.800
I think that's all I can
think of with those.

00:58:29.420 --> 00:58:32.060
So, let's summarize.

00:58:32.140 --> 00:58:34.730
We seem to be early in

00:58:40.220 --> 00:58:45.190
Tom was talking about Mac OS X,
and basically not much has changed.

00:58:45.220 --> 00:58:48.670
A few things that you need to clean
up as part of your carbonization of

00:58:48.800 --> 00:58:50.720
your application aren't a big deal.

00:58:51.340 --> 00:58:57.340
Greg pointed out some of the APIs that
we had that were added in QuickTime 4.1.

00:58:57.750 --> 00:58:59.790
While you're carbonizing
your application,

00:58:59.790 --> 00:59:03.260
it's a good time to have a look
at those and see if you'd like

00:59:03.310 --> 00:59:07.840
to support 64-bit file offsets,
VBR sound if you're a sound app,

00:59:07.950 --> 00:59:11.600
and certainly
URL capabilities in your app.

00:59:11.630 --> 00:59:13.570
Those can be a lot of fun.

00:59:15.320 --> 00:59:17.360
We have a QuickTime feedback forum.

00:59:17.360 --> 00:59:20.960
We don't tend to do Q&A in
QuickTime sessions because one person's

00:59:21.050 --> 00:59:24.870
question tends to be interesting
to about 10% of the audience,

00:59:24.870 --> 00:59:27.670
not 90%. However,
for those of you who are really

00:59:27.700 --> 00:59:30.200
interested in hearing what other
people have to complain about,

00:59:30.200 --> 00:59:33.030
I recommend that you come along
to the QuickTime feedback forum.

00:59:33.200 --> 00:59:34.150
It's today.

00:59:34.150 --> 00:59:37.000
It's at 3:00 or 3:30 p.m.

00:59:37.080 --> 00:59:38.030
in Room J1.

00:59:38.030 --> 00:59:40.200
And it'll be a lot of fun.

00:59:40.200 --> 00:59:45.200
There'll be lots of people on the
stage and under the big spotlight.

00:59:45.960 --> 00:59:52.190
The QuickTime API mailing list is a
great resource for asking questions

00:59:52.350 --> 00:59:56.330
or having other kinds of discussion
about API-level programming issues.

00:59:56.490 --> 01:00:00.370
There are a number of
QuickTime engineers who read the list,

01:00:00.470 --> 01:00:04.890
and when we have time,
we sometimes reply to things.

01:00:05.240 --> 01:00:08.330
Sometimes we don't have time,
or sometimes people don't

01:00:08.390 --> 01:00:10.210
ask in very polite manners.

01:00:10.210 --> 01:00:10.210
But

01:00:12.090 --> 01:00:14.430
If you're lucky,
even if one of us doesn't have the time,

01:00:14.530 --> 01:00:18.390
another developer will have been down
the same path as you're trying to tread,

01:00:18.390 --> 01:00:19.710
and they can help you out as well.

01:00:19.900 --> 01:00:26.180
So it's got a nice community.

01:00:26.430 --> 01:00:26.520
Some of the things that...

01:00:28.100 --> 01:00:31.650
Some of the specific things
that you'd like to find out can

01:00:31.730 --> 01:00:33.940
be found in the Iceflow notes.

01:00:34.270 --> 01:00:37.610
There's a whole lot of stuff
on the QuickTime developer

01:00:37.660 --> 01:00:39.790
section of Apple's websites.

01:00:41.020 --> 01:00:45.250
There's all of the sample code,
there's all of the tech pubs,

01:00:45.250 --> 01:00:46.240
there's tech notes.

01:00:46.240 --> 01:00:49.000
There's also the QuickTime engineering
team's ice flow notes,

01:00:49.000 --> 01:00:55.280
which are extremely condensed bits
of information about specific issues

01:00:55.280 --> 01:00:59.400
that we think are really important
or perhaps have a very strong

01:00:59.400 --> 01:01:02.000
focus for some group of developers.

01:01:02.310 --> 01:01:06.180
There's also a PDF file on the web,
which we seem to mention every session,

01:01:06.180 --> 01:01:08.830
about the new things in QuickTime 4.1.

01:01:08.830 --> 01:01:10.960
It's not that hard to find.

01:01:11.040 --> 01:01:12.000
You should go and look.

01:01:12.000 --> 01:01:14.890
If you get to the QuickTime roadmap,
I think there's a red

01:01:14.920 --> 01:01:18.990
link to go to the PDF,
and I heartily recommend it.

01:01:18.990 --> 01:01:21.120
It's grand.

01:01:22.450 --> 01:01:23.710
But I think that's it.

01:01:23.750 --> 01:01:25.150
I think we're done.

01:01:25.310 --> 01:01:27.230
I look forward to seeing
you at the feedback forum.

01:01:27.550 --> 01:01:29.310
Thank you.