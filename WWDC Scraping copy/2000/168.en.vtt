WEBVTT

00:00:09.110 --> 00:00:12.110
So as Bill said,
I'm Ken McLeod and I work on

00:00:12.110 --> 00:00:16.230
this thing called Keychain,
which we're going to go through today.

00:00:18.590 --> 00:00:22.170
So hopefully we have some
exciting stuff to tell you about,

00:00:22.370 --> 00:00:25.840
much more exciting than
what's going on next door.

00:00:25.840 --> 00:00:28.860
We'll give you a quick overview
of what the keychain is,

00:00:28.940 --> 00:00:33.810
and then we'll update you since we
talked to you last year about what's

00:00:33.810 --> 00:00:35.260
been going on with the keychain.

00:00:35.560 --> 00:00:39.560
will tell you about the Keychain
Manager APIs and answer your

00:00:39.560 --> 00:00:44.770
questions about where they fit with
Carbon and where they are on OS X.

00:00:45.010 --> 00:00:48.810
And then at the end, we'll tell you where
we're going with the APIs.

00:00:49.180 --> 00:00:53.470
And finally, we'll have a demo,
of course, and Q&A.

00:00:55.120 --> 00:00:59.170
Hopefully what you'll take away
from the session is a knowledge of

00:00:59.170 --> 00:01:03.920
what the keychain provides for you
and especially what APIs will be

00:01:03.920 --> 00:01:09.780
in Carbon so you can go out and add
keychain support to your applications.

00:01:12.130 --> 00:01:13.360
So what is the keychain?

00:01:13.550 --> 00:01:17.290
The keychain is a
repository that's secure.

00:01:17.410 --> 00:01:20.400
An analogy I use is a bank vault.

00:01:20.410 --> 00:01:24.430
The bank vault door closes and the
things that you put in there are secure.

00:01:24.520 --> 00:01:26.730
The things that you put
in there are passwords,

00:01:26.730 --> 00:01:31.660
cryptographic keys, digital certificates,
the bits of information that sort

00:01:31.660 --> 00:01:35.950
of authenticate you or private
bits of data that unlock other

00:01:35.950 --> 00:01:40.030
things or decrypt pieces of data.

00:01:40.130 --> 00:01:43.690
The keychain is built on top
of this framework called CDSA,

00:01:43.690 --> 00:01:48.110
which is the common data security
architecture that originated at Intel,

00:01:48.110 --> 00:01:49.640
and that's an open group standard.

00:01:49.710 --> 00:01:56.350
I believe they've announced plans
to open source their implementation.

00:01:56.690 --> 00:02:01.200
The keychain has a really neat
feature in that it enables its

00:02:01.200 --> 00:02:05.180
clients to provide something
called transparent authentication.

00:02:05.330 --> 00:02:10.780
That's the ability to log in once and
then any servers and things that you have

00:02:10.780 --> 00:02:15.120
passwords stored in your keychain for,
you'll just be able to connect

00:02:15.120 --> 00:02:19.180
to them transparently through
clients that use the keychain.

00:02:20.330 --> 00:02:24.200
The keychain is first introduced
and shipped with Mac OS 9 and it's

00:02:24.200 --> 00:02:29.410
available there and going forward,
of course, on 10 and later.

00:02:30.540 --> 00:02:34.900
So let's define some terms that are
important when talking about keychains.

00:02:34.980 --> 00:02:36.680
Keychain is always in one of two states.

00:02:36.680 --> 00:02:39.060
It's either locked or it's unlocked.

00:02:39.110 --> 00:02:42.240
And when it's locked, you can't retrieve
data from the keychain.

00:02:42.240 --> 00:02:45.310
You need to unlock it
in order to do that.

00:02:46.410 --> 00:02:50.030
Every stored password
or key or certificate,

00:02:50.240 --> 00:02:53.110
things that are in the keychain,
we call keychain items.

00:02:53.110 --> 00:02:57.700
And we'll go into it in a little bit,
the things that all keychain

00:02:57.720 --> 00:02:59.800
items have in common.

00:03:00.200 --> 00:03:02.310
Then we have this notion
of the default keychain.

00:03:02.530 --> 00:03:05.190
That's the one,
if you have multiple keychains,

00:03:05.290 --> 00:03:08.150
that's the one where new items are added.

00:03:12.020 --> 00:03:15.140
So a system can have
more than one keychain.

00:03:15.190 --> 00:03:20.940
You can have some locked, some unlocked,
put some types of keys or server

00:03:20.940 --> 00:03:27.300
passwords in one and copy one to a server
and use it over the network if you want.

00:03:27.460 --> 00:03:34.220
Typically we see that there's
one keychain per user,

00:03:34.220 --> 00:03:35.570
but certainly the ability to
have more than one is there.

00:03:36.180 --> 00:03:39.330
Keychains can be set
to lock automatically,

00:03:39.430 --> 00:03:45.700
so you don't have to go off, for example,
leave your desk and worry about whether

00:03:45.700 --> 00:03:49.470
or not someone can come up and access
things that are in your keychain.

00:03:49.800 --> 00:03:51.190
And the keychain is scriptable.

00:03:51.220 --> 00:03:54.870
So everything that you can
access through the keychain API,

00:03:55.040 --> 00:03:57.570
you can get out through Apple Script.

00:04:00.470 --> 00:04:03.640
Keychain files can be moved around
from one machine to the other,

00:04:03.640 --> 00:04:06.100
which makes them very useful.

00:04:06.150 --> 00:04:10.430
You can take your keychain from work
to home and have it available there.

00:04:10.430 --> 00:04:14.470
You can have it on the network.

00:04:14.620 --> 00:04:18.510
At this point,
I have to tell you that keychains

00:04:18.560 --> 00:04:21.100
will not be portable between 9 and 10.

00:04:21.100 --> 00:04:25.310
Now, that was a decision that
we did not make lightly,

00:04:25.500 --> 00:04:30.690
and part of the reason is that the
keychains on OS 9 use encryption

00:04:31.180 --> 00:04:37.950
algorithm which is patented and
we're trying to move away from.

00:04:37.990 --> 00:04:45.300
We're trying to get rid of any things
that would prevent us from open sourcing

00:04:45.300 --> 00:04:47.680
this at some point in the future.

00:04:48.210 --> 00:04:52.870
But when you go from 9-based
keychains to 10-based keychains,

00:04:52.870 --> 00:04:55.470
we hope to provide some kind of
updater that will just convert

00:04:55.820 --> 00:04:57.570
them so you can go easily.

00:04:57.740 --> 00:05:03.900
But if that's going to be a problem,
please let us know about it.

00:05:04.760 --> 00:05:08.040
Like I said,
keychain files can be on servers.

00:05:08.040 --> 00:05:11.500
You can use them over the network
and you can use them on locked media.

00:05:11.620 --> 00:05:15.510
So you can open a keychain read-only.

00:05:16.900 --> 00:05:20.180
Most important for where
we're going in the future,

00:05:20.280 --> 00:05:24.000
the CDSA architecture on which
the keychain is built allows

00:05:24.000 --> 00:05:27.690
you to have keychains on smart
cards and removable tokens.

00:05:27.790 --> 00:05:32.300
These things just appear as keychains
to clients of the keychain API.

00:05:32.410 --> 00:05:36.910
And when there are modules to plug
into the underlying CDSA architecture

00:05:37.260 --> 00:05:40.960
to support these types of things,
we actually have one working,

00:05:40.960 --> 00:05:43.970
but as there are other
ones that are provided,

00:05:43.970 --> 00:05:48.150
these things just show up and
you can use them in the keychain.

00:05:51.280 --> 00:05:54.770
So,
lots actually happened since last year.

00:05:54.820 --> 00:05:59.450
We're in OS 9 and not just shipping,
but we're actually an

00:05:59.450 --> 00:06:00.440
integral part of it.

00:06:00.510 --> 00:06:04.950
There are a lot of system components
that use the keychain and are tied to it.

00:06:04.960 --> 00:06:07.840
If you used the Apple share client,
you'll know that it can store

00:06:07.840 --> 00:06:09.250
passwords in the keychain.

00:06:09.360 --> 00:06:16.690
And other components like network browser
and even airport and Apple file security,

00:06:16.690 --> 00:06:19.800
AFS, all use the keychain
for password storage.

00:06:20.270 --> 00:06:27.280
We shipped a security SDK which includes
the keychain and URL access and Macintosh

00:06:27.400 --> 00:06:31.840
file signing and the CMS technology,
Cryptographic Message Syntax.

00:06:31.900 --> 00:06:33.840
And all those things are available now.

00:06:33.840 --> 00:06:37.500
Hopefully some of you have had a
chance to look at and use them,

00:06:37.500 --> 00:06:38.530
play with it.

00:06:38.600 --> 00:06:43.810
Copy that URL down because
a lot of good stuff there.

00:06:44.120 --> 00:06:47.340
The keychain is now in DP4.

00:06:47.340 --> 00:06:52.570
If you've had a chance to install that,
the APIs are in there.

00:06:52.950 --> 00:06:57.660
is still kind of a development release,
still working on it,

00:06:57.660 --> 00:07:02.900
and it requires you to link to the
security HI framework in order to

00:07:02.900 --> 00:07:05.900
actually get at the Keychain API.

00:07:05.960 --> 00:07:08.890
That won't stay the case.

00:07:08.910 --> 00:07:15.900
We're very close to actually having
this fully in Carbon on both 9 and 10.

00:07:15.900 --> 00:07:20.080
We just missed the DP4 train,
but you can still use DP4 again if

00:07:20.080 --> 00:07:23.100
you link with security HI framework.

00:07:25.220 --> 00:07:32.800
So this is a map of where the APIs are
and where you can call them from.

00:07:32.800 --> 00:07:35.820
It's actually a pretty important slide.

00:07:36.190 --> 00:07:40.340
On the left-hand side are legacy apps,
which are your pre-Carbon

00:07:40.340 --> 00:07:42.690
Mac OS 9 applications.

00:07:42.710 --> 00:07:47.130
And the APIs that are there are
those that we ship with Mac OS 9,

00:07:47.190 --> 00:07:51.560
the keychain, URL access, iSign,
which is Macintosh file signing,

00:07:51.560 --> 00:07:53.650
and the CMS APIs.

00:07:53.660 --> 00:07:56.510
All those are still there in Classic.

00:07:56.510 --> 00:08:00.590
And they're built on top of CDSA 1.2.

00:08:00.930 --> 00:08:04.810
So those apps will just
work in Classic on OS X,

00:08:04.850 --> 00:08:08.000
and they'll continue to work on Mac OS 9,
of course.

00:08:08.050 --> 00:08:12.240
The middle box, Carbon applications,
sort of straddle this line

00:08:12.240 --> 00:08:15.000
between Mac OS 9 and Mac OS X.

00:08:15.070 --> 00:08:20.260
The APIs that are in Carbon will
be keychain and URL access.

00:08:20.290 --> 00:08:27.090
So a Carbonized application that can run
on 9 or on 10 can make use of those APIs.

00:08:28.300 --> 00:08:32.640
One thing that we did after Mac OS 9
when we sort of looked toward

00:08:32.640 --> 00:08:36.690
the future and integrating with
OS X is how to factor the pieces,

00:08:36.690 --> 00:08:42.480
the functionality that we had in the
Keychain API and make it available for,

00:08:42.480 --> 00:08:46.500
you know,
not just Carbon applications but,

00:08:46.500 --> 00:08:51.970
you know, BSD Unix applications,
Cocoa apps across the board.

00:08:52.320 --> 00:08:56.870
And when we re-architected this,
we realized that a number of

00:08:56.870 --> 00:09:01.270
things had to be separated out,
especially key and

00:09:01.280 --> 00:09:03.490
certificate management.

00:09:03.740 --> 00:09:08.880
will be talking about the things
that required keys and certificates.

00:09:09.080 --> 00:09:13.850
Mac OS X apps as a category
are those applications that

00:09:13.850 --> 00:09:15.800
will only run on Mac OS X.

00:09:15.800 --> 00:09:20.580
That could include your Cocoa apps,
your BSD Unix apps,

00:09:20.850 --> 00:09:27.690
and also Carbon applications that make
use of those APIs such as file signing.

00:09:27.780 --> 00:09:31.120
And the piece there that
we're calling Security Core,

00:09:31.320 --> 00:09:35.840
which includes keychain APIs and
some newer versions of those

00:09:35.840 --> 00:09:40.540
APIs that you can use from lower
levels that don't require UI,

00:09:40.570 --> 00:09:42.980
which I'll get into in a little bit.

00:09:43.180 --> 00:09:47.670
Again, those applications,
10 applications and Carbon applications

00:09:47.670 --> 00:09:53.590
that you're running on 10,
sit on top of the CDSA 2.0 API.

00:09:53.680 --> 00:09:59.180
And that's a big step forward from 1.2 in
the amount of things that it lets us do.

00:09:59.340 --> 00:10:03.760
It lets us have, for example,
something called access control lists

00:10:03.840 --> 00:10:08.230
so that each individual item in your
keychain can be protected separately.

00:10:08.240 --> 00:10:14.240
And you can allow certain
applications to access certain

00:10:14.240 --> 00:10:17.180
items and not access other items.

00:10:17.310 --> 00:10:23.090
And all those things are
sort of enabled by CDSA 2.0.

00:10:26.060 --> 00:10:29.040
So you're an application,
you want to use the Keychain API,

00:10:29.160 --> 00:10:31.700
what can you store in the Keychain?

00:10:31.700 --> 00:10:35.230
There are three basic classes of
items that go into the Keychain:

00:10:35.390 --> 00:10:37.700
keys, passwords, and certificates.

00:10:37.820 --> 00:10:42.610
And each of those classes has
subclasses of items that we support.

00:10:42.870 --> 00:10:50.890
The middle column there, passwords,
is what the Keychain API is primarily

00:10:51.160 --> 00:10:52.110
focused on in this release and in Carbon.

00:10:55.380 --> 00:10:58.530
Every keychain item has two components.

00:10:58.610 --> 00:11:00.770
They have attributes and they have data.

00:11:00.920 --> 00:11:04.630
The data, in this case, in this example,
is just a password.

00:11:04.790 --> 00:11:10.770
But there are additional attributes
that sort of hang on to that password

00:11:10.770 --> 00:11:14.170
and allow you to find it again.

00:11:14.170 --> 00:11:14.170
In this example, for example,

00:11:14.530 --> 00:11:19.410
I have my account name, Ken,
and a server and a path on that server.

00:11:19.510 --> 00:11:23.200
These are all just bits of
data that you can attach to the

00:11:23.200 --> 00:11:26.080
password and that help you find it.

00:11:28.890 --> 00:11:32.740
So all these items that are in the
keychain have these common attributes,

00:11:32.740 --> 00:11:37.040
the class of the item, the date created,
the date modified.

00:11:37.080 --> 00:11:39.710
Every item has a label,
the thing that shows up when

00:11:39.740 --> 00:11:41.560
you view it in keychain access.

00:11:41.620 --> 00:11:46.010
It has a description and a comment,
which is all optional.

00:11:46.460 --> 00:11:49.320
Within those subclasses, of course,
every item has additional

00:11:49.320 --> 00:11:51.800
attributes that you can look at.

00:11:53.040 --> 00:11:57.140
Internet password items, for example,
have a server name associated with them

00:11:57.140 --> 00:12:03.620
and things like the protocol that's
used for that particular password.

00:12:04.540 --> 00:12:08.140
attributes, as I said,
are used just to find the item.

00:12:08.240 --> 00:12:11.320
The actual thing that you're
storing in the keychain and what

00:12:11.410 --> 00:12:13.420
you're keeping secure is the data.

00:12:13.860 --> 00:12:15.840
Now, the item data can't be searched.

00:12:15.840 --> 00:12:19.720
You can't look for all items
that have a particular password,

00:12:19.720 --> 00:12:23.330
because that wouldn't be too secure.

00:12:23.620 --> 00:12:26.960
You can't get the data out
unless the keychain is unlocked.

00:12:26.970 --> 00:12:30.160
And you can't retrieve the
data of an item without the

00:12:30.310 --> 00:12:32.280
user's explicit permission.

00:12:32.380 --> 00:12:35.210
Now, what that's meant in the past,
if you've had a chance to

00:12:35.210 --> 00:12:38.850
play with a keychain on OS9,
is that every time you go to get

00:12:38.920 --> 00:12:42.670
something out of the keychain,
a dialog pops up and asks you,

00:12:42.670 --> 00:12:46.660
do you want to allow access to this item?

00:12:46.720 --> 00:12:48.750
That's been a problem.

00:12:48.850 --> 00:12:51.870
If for no other reason,
then users just get conditioned

00:12:51.940 --> 00:12:53.510
to hit the Enter key every time.

00:12:53.520 --> 00:12:57.870
So we're moving away from that dialog.

00:12:57.880 --> 00:12:59.590
It would come up no more than once.

00:12:59.640 --> 00:13:05.190
And we're going toward the ability to let
you preconfigure access for your items.

00:13:05.750 --> 00:13:11.640
In particular, very important,
cryptographic keys, private keys,

00:13:11.640 --> 00:13:14.860
and symmetric keys,
the data of those items can never

00:13:14.860 --> 00:13:17.110
be retrieved from a keychain.

00:13:19.760 --> 00:13:21.510
So how secure is the keychain?

00:13:21.570 --> 00:13:24.700
Well, for one,
and I think this is pretty important,

00:13:24.870 --> 00:13:28.920
it doesn't actually depend on
the machine's physical security.

00:13:29.020 --> 00:13:32.980
It's stored in an encrypted format,
so you don't have to write down

00:13:32.980 --> 00:13:37.060
your passwords or store them in a
preferences file or store them in a

00:13:37.060 --> 00:13:39.400
sticky note somewhere on your disk.

00:13:39.400 --> 00:13:42.320
The keychain file itself is encrypted.

00:13:42.340 --> 00:13:45.380
And the password that unlocks
your keychain is never

00:13:45.640 --> 00:13:47.200
stored anywhere on disk.

00:13:47.360 --> 00:13:52.480
What we do is run it through
an algorithm called PBKDF2,

00:13:52.480 --> 00:13:56.440
which is specified in
RSA's PKCS5 standard.

00:13:56.440 --> 00:14:02.510
And what that does is it derives a key
every time from your keychain password.

00:14:03.660 --> 00:14:07.090
A little bit about the
encryption that's used.

00:14:07.160 --> 00:14:09.800
And again,
I said that we were trying to move away

00:14:09.800 --> 00:14:13.770
from what we were using on Mac OS 9.

00:14:13.930 --> 00:14:18.830
to something a little better on
OS X that did not prevent us from,

00:14:18.840 --> 00:14:23.280
at some point in the future,
doing what Darwin has done.

00:14:23.300 --> 00:14:28.420
The current plan is to use triple DES,
although I've talked to some

00:14:28.420 --> 00:14:32.790
of you and some of you brought
this up in another session,

00:14:32.790 --> 00:14:37.270
that there are perhaps other
algorithms that we can use.

00:14:37.270 --> 00:14:43.400
So we were certainly looking forward to
any feedback that you have about that.

00:14:45.500 --> 00:14:48.900
Now normally,
the keychain is unlocked with a password.

00:14:48.900 --> 00:14:52.300
A dialog box comes up and it
asks you to unlock the keychain.

00:14:52.300 --> 00:14:55.020
You type in the password and
then the keychain is unlocked

00:14:55.120 --> 00:14:57.360
and items can be retrieved.

00:14:57.900 --> 00:15:02.300
If you type the wrong password in,
every time you do that,

00:15:02.410 --> 00:15:06.990
the delay grows between the amount
of--the time when that dialog can come

00:15:07.000 --> 00:15:10.740
up again and new passwords are accepted.

00:15:10.840 --> 00:15:13.440
So this sort of prevents
a systematic attack,

00:15:13.440 --> 00:15:17.970
a sort of virtual user type thing
where it just types in the password

00:15:17.970 --> 00:15:20.070
into the dialog over and over.

00:15:20.670 --> 00:15:22.170
We allow programmatic unlock.

00:15:22.260 --> 00:15:25.630
In OS 9, it was limited.

00:15:25.680 --> 00:15:29.270
Essentially,
if you use the programmatic API to

00:15:29.270 --> 00:15:32.870
unlock the keychain and you got
the password wrong the first time,

00:15:33.060 --> 00:15:33.540
that was it.

00:15:33.670 --> 00:15:37.420
You'd have to restart in
order to try that again.

00:15:37.620 --> 00:15:45.190
And, but, you know,
effectively shut down that opportunity,

00:15:45.200 --> 00:15:45.490
but it also prevented
a lot of people from

00:15:47.000 --> 00:16:03.300
[Transcript missing]

00:16:05.000 --> 00:16:08.140
Now, again,
data of the items can't be retrieved

00:16:08.140 --> 00:16:13.320
without some sort of explicit
permission that the user has granted.

00:16:13.390 --> 00:16:16.330
This permission can be
given on a per item basis,

00:16:16.340 --> 00:16:20.360
a per process basis,
or an entire keychain, you can say.

00:16:20.540 --> 00:16:25.890
Always allow everything in this keychain
to be accessed without bothering me.

00:16:26.260 --> 00:16:31.690
Again, in OS 9,
we had a problem identifying processes.

00:16:31.890 --> 00:16:35.200
It would be nice to say, "Okay,
always let my web browser

00:16:35.200 --> 00:16:38.660
or my mail client access the
password and the keychain.

00:16:38.660 --> 00:16:42.320
You know, don't bother me." The problem
was when that client quit,

00:16:42.850 --> 00:16:46.160
something else could start up and say,
"Hey, I'm the mail client.

00:16:46.160 --> 00:16:49.640
Give me the password."
And there was actually no

00:16:49.640 --> 00:16:52.140
mechanism in 9 to prevent that.

00:16:52.140 --> 00:17:00.680
So in 10, we can actually do a digest,
a cryptographic digest of the process,

00:17:00.780 --> 00:17:02.700
store that, and...

00:17:02.800 --> 00:17:09.260
will securely allow in a pre-configured
manner access to keychain items.

00:17:10.430 --> 00:17:14.850
Now, cryptographic keys in your
keychain in 9 optionally required

00:17:14.850 --> 00:17:18.800
a password in order to use them,
not just to unlock the

00:17:18.800 --> 00:17:23.480
keychain itself to get at them,
but every time you went to use them.

00:17:23.600 --> 00:17:29.460
The CDSA 2.0 API in Mac OS X is going
to allow us to provide that sort

00:17:29.460 --> 00:17:35.500
of per item protection optionally
for every item in your keychain.

00:17:38.190 --> 00:17:40.440
So what can you do with the keychain?

00:17:40.530 --> 00:17:44.790
Well, if your application at any point
asks the user for a password

00:17:45.670 --> 00:17:49.190
and needs to store it somewhere,
you can store that password in a

00:17:49.240 --> 00:17:54.750
keychain instead of having to worry
about how you're going to encrypt it

00:17:54.750 --> 00:17:57.610
or where you're going to store it.

00:17:57.990 --> 00:18:01.320
And also,
you really want to allow the user the

00:18:01.320 --> 00:18:05.830
opportunity to save off the password that
you've asked for so that in the future,

00:18:05.830 --> 00:18:08.100
they can come back and they don't
have to type the password over

00:18:08.100 --> 00:18:12.100
and over as they access whatever
it is that needs the password.

00:18:12.540 --> 00:18:16.090
And you can also store
keys and certificates.

00:18:16.160 --> 00:18:21.830
This is a piece of the functionality
that is moving out of the keychain

00:18:21.830 --> 00:18:25.940
API in Carbon to that other box that
I showed in the previous slide that's

00:18:26.020 --> 00:18:30.090
going to be a Mac OS X technology.

00:18:31.330 --> 00:18:35.300
So let's go over the
APIs that are in Carbon.

00:18:35.300 --> 00:18:38.860
There are high level calls,
which are very easy to get started with.

00:18:38.920 --> 00:18:42.400
Those high level calls actually
have some underlying low level

00:18:42.400 --> 00:18:47.100
routines to do bits and pieces of
functionality that you may need.

00:18:47.230 --> 00:18:51.960
The API allows you to search for items.

00:18:51.970 --> 00:18:51.970
That's its primary sort of

00:18:52.600 --> 00:19:13.400
[Transcript missing]

00:19:13.610 --> 00:19:19.320
So the first thing you need to do is call
this routine keychain manager available.

00:19:19.350 --> 00:19:22.410
The reason for that is
that it may not be there.

00:19:22.450 --> 00:19:26.750
If your application is a
Carbon application running on,

00:19:26.830 --> 00:19:30.940
say, 8.1,
the keychain is not going back that far,

00:19:30.980 --> 00:19:34.400
but your application can still
be running as a Carbon app.

00:19:34.530 --> 00:19:38.880
So you need to test for it to
make sure that it's present.

00:19:39.300 --> 00:19:42.670
You also don't need to explicitly
create a keychain to get started

00:19:42.670 --> 00:19:45.780
with unless your application
needs to for some reason,

00:19:45.880 --> 00:19:49.150
but the preferred way is to let
the user be in charge of that.

00:19:49.260 --> 00:19:51.270
If you need to store
something in a keychain,

00:19:51.410 --> 00:19:56.650
you can just store it and all of the sort
of housekeeping of setting up a keychain

00:19:56.650 --> 00:19:59.550
will be taken care of for you by the API.

00:20:01.510 --> 00:20:05.240
And then finally,
you'll just use a high level call

00:20:05.390 --> 00:20:07.560
to find a password in the keychain.

00:20:07.620 --> 00:20:13.100
So there are three basic
API routines to get a password.

00:20:13.220 --> 00:20:17.050
Find Apple share password,
Internet password, and generic.

00:20:17.180 --> 00:20:21.690
And all of these take a number of
attributes that you're looking for,

00:20:21.690 --> 00:20:26.990
maybe a server name, an account name,
and will return the password to you.

00:20:30.210 --> 00:20:36.990
And conversely, we have-- those actually
should say add instead of find.

00:20:37.000 --> 00:20:40.640
But we have the similar routines
for adding a single password

00:20:40.640 --> 00:20:42.340
to the default keychain.

00:20:42.460 --> 00:20:46.110
So just mentally replace the
word find in each of those

00:20:46.110 --> 00:20:48.490
with add and you have the idea.

00:20:48.650 --> 00:20:53.150
So those high level calls are
actually made up of a number of

00:20:53.180 --> 00:20:56.940
sort of individual factored pieces.

00:20:56.940 --> 00:21:01.380
When you're calling add internet password
to put something into the keychain,

00:21:01.450 --> 00:21:04.980
it's actually doing the work of all of
those items that you see there on the

00:21:04.980 --> 00:21:10.080
right hand side to set up the item,
to associate it with a keychain,

00:21:10.120 --> 00:21:12.630
to associate the
attributes you passed in,

00:21:12.630 --> 00:21:18.090
and finally to update it and write
it out to the keychain storage.

00:21:20.450 --> 00:21:23.700
So the new item call will
create a new keychain item.

00:21:23.700 --> 00:21:26.700
And when you do that,
it's just in memory,

00:21:26.700 --> 00:21:29.840
and it's not associated with
any particular keychain.

00:21:29.840 --> 00:21:33.710
You want to add it to a keychain,
you'll call add item.

00:21:34.100 --> 00:21:37.500
You'll always access items
through a KC item ref.

00:21:37.580 --> 00:21:41.830
That's sort of the common denominator,
the format that all items,

00:21:41.960 --> 00:21:47.110
whether they're keys, passwords,
or certificates, can be manipulated

00:21:47.980 --> 00:21:53.010
You'll use get attribute to retrieve
a particular attribute from an item.

00:21:53.120 --> 00:21:56.620
and set attribute to
change the attribute.

00:21:56.620 --> 00:21:58.080
And the same thing with the data.

00:21:58.110 --> 00:22:03.270
Get data will retrieve the data of
the item and set data will change it.

00:22:05.310 --> 00:22:08.650
When you've changed an item,
whether you've added new attributes to

00:22:08.650 --> 00:22:12.050
it or changed them or changed the data,
you'll want to call updateItem,

00:22:12.070 --> 00:22:15.750
which actually commits the change
and writes it to the keychain.

00:22:15.900 --> 00:22:17.510
And finally,
when you're done with an item,

00:22:17.570 --> 00:22:22.190
you can release the memory that the
item occupies by calling kc.releaseItem.

00:22:25.360 --> 00:22:29.140
If you need to find more than
one item in the keychain,

00:22:29.180 --> 00:22:32.230
you can use find first
item and find next item.

00:22:32.360 --> 00:22:33.860
Fairly straightforward.

00:22:33.860 --> 00:22:38.200
They take a list of attributes,
things that you're searching for,

00:22:38.200 --> 00:22:41.440
and they'll return a
search reference to you.

00:22:41.440 --> 00:22:45.710
So you can continue to call find next
item as you need to to find items

00:22:45.710 --> 00:22:48.180
that match your search criteria.

00:22:48.280 --> 00:22:51.660
And then when you're all done,
you'll call release search.

00:22:54.610 --> 00:23:00.540
Now, as I said before,
most of the time you want to allow the

00:23:00.540 --> 00:23:04.830
user to create their own keychains.

00:23:04.910 --> 00:23:09.380
But there are calls when you need
to create a keychain yourself.

00:23:09.850 --> 00:23:12.500
And when you need to sort of
iterate through the keychains,

00:23:12.620 --> 00:23:15.750
perhaps you're looking for
a particular keychain with a

00:23:15.750 --> 00:23:21.200
particular set of attributes,
you'll access those through a KC ref.

00:23:21.200 --> 00:23:24.300
A KC ref is an opaque structure.

00:23:24.610 --> 00:23:27.760
Currently, everything on the system
is a keychain file,

00:23:27.960 --> 00:23:29.460
but that's changing.

00:23:29.470 --> 00:23:35.690
And it's very important not to assume
that a KC ref or a keychain is actually

00:23:35.690 --> 00:23:39.310
an FS spec or a file on the system,
because it could be a smart card.

00:23:39.570 --> 00:23:42.860
It could be any kind of device
that's pluggable into the

00:23:42.860 --> 00:23:44.610
CDSA layer on the bottom.

00:23:45.230 --> 00:23:47.140
We have a get status routine.

00:23:47.140 --> 00:23:51.000
You'll probably actually use
that when you need to determine

00:23:51.000 --> 00:23:53.690
whether a keychain is locked,
unlocked,

00:23:53.790 --> 00:23:58.530
whether it has read-only access before
you try to store something in it,

00:23:58.530 --> 00:24:02.250
for example, and other status flags.

00:24:02.540 --> 00:24:07.550
Keychain name returns, like it says,
the name of the keychain.

00:24:08.390 --> 00:24:11.010
You'll use count keychains to
figure out how many keychains are

00:24:11.010 --> 00:24:15.540
available and get in the keychain,
which is get indexed keychain,

00:24:15.550 --> 00:24:20.390
will return a particular keychain
out of that list given an index.

00:24:22.690 --> 00:24:24.200
So this is an interesting
part of the API,

00:24:24.200 --> 00:24:25.610
notification.

00:24:25.740 --> 00:24:29.590
When anything happens in the keychain,
you can be notified and

00:24:29.590 --> 00:24:31.400
take some sort of action.

00:24:31.400 --> 00:24:35.130
Maybe you want to write a logging app
that logs all accesses to the keychain.

00:24:35.180 --> 00:24:36.560
You can do it with this.

00:24:36.710 --> 00:24:41.340
What you do is register a callback
procedure with KCAD callback.

00:24:41.810 --> 00:24:46.840
You can give it a bit mask that
specifies the actual events that

00:24:46.840 --> 00:24:47.920
you're interested in receiving.

00:24:47.930 --> 00:24:49.700
You don't have to deal with all of these.

00:24:49.700 --> 00:24:51.650
But we'll tell you when
a keychain unlocks,

00:24:51.690 --> 00:24:55.700
when it locks, when something's added,
when someone does a search

00:24:55.700 --> 00:24:57.700
and the item is found.

00:24:57.700 --> 00:25:00.540
We'll certainly tell you when
someone retrieves an item.

00:25:00.700 --> 00:25:02.700
That's the get data event.

00:25:02.700 --> 00:25:08.370
We'll tell you when an item is deleted,
updated, and we'll tell you when the

00:25:08.390 --> 00:25:10.690
default keychain has been changed.

00:25:11.170 --> 00:25:13.540
When you're all done and you
don't want these events anymore,

00:25:13.560 --> 00:25:17.620
you can call Casey Remove Callback
and then you won't get them.

00:25:19.120 --> 00:25:25.610
So here's a real simplified example of a
routine that your application might call.

00:25:25.900 --> 00:25:29.800
I have a connect to server routine
and the two parameters there are

00:25:29.800 --> 00:25:33.430
the server that I'm connecting
to and who I want to connect as,

00:25:33.430 --> 00:25:35.180
what my account name is.

00:25:35.280 --> 00:25:38.950
So the first thing I do there,
actually the first thing I do would

00:25:38.960 --> 00:25:44.470
be to call keychain manager available,
but that's just sort of assumed.

00:25:44.800 --> 00:25:48.070
So I can call Casey find
internet password.

00:25:48.070 --> 00:25:50.990
And the things that I'm interested in
when I want to look up this password

00:25:50.990 --> 00:25:52.510
are of course the server name.

00:25:52.580 --> 00:25:54.980
So I'll pass that in.

00:25:55.050 --> 00:25:57.440
I don't actually care about
the security domain which is a

00:25:57.440 --> 00:25:58.930
string so I'll leave that nil.

00:25:58.930 --> 00:26:02.310
I could specify a
particular constant there.

00:26:02.560 --> 00:26:05.540
I do want to look for a particular
account name that matches.

00:26:05.690 --> 00:26:11.540
I really don't care about associating a
particular port so I'll pass any port.

00:26:11.590 --> 00:26:15.130
This is an HTTP password so there's
a constant that I'll pass in that

00:26:15.130 --> 00:26:19.420
says I only want an HTTP password.

00:26:19.420 --> 00:26:22.790
Use the default auth type,
authentication type.

00:26:22.900 --> 00:26:27.360
There may be different authentication
types that you can associate

00:26:27.380 --> 00:26:32.540
with the same server and you can
distinguish them with that parameter.

00:26:32.580 --> 00:26:35.600
Then I'll pass in a buffer
that I've pre-allocated and

00:26:35.600 --> 00:26:37.740
the length of that buffer.

00:26:37.740 --> 00:26:40.870
When the call returns,
assuming that a password was found,

00:26:40.870 --> 00:26:45.580
that buffer will be filled out with
the password data and then actual

00:26:45.680 --> 00:26:48.690
length will contain the length of that

00:26:49.830 --> 00:26:54.030
So then if that all went
well and I found a password,

00:26:54.030 --> 00:26:59.420
the return value status is going to
be no error and so I can just connect.

00:26:59.510 --> 00:27:04.920
If it's not, I need to look at that,
do something else, ask the user for a

00:27:05.210 --> 00:27:09.700
password with my own UI,
whatever I need to do there.

00:27:09.700 --> 00:27:13.820
And then finally at the end,
I've got a password and I can connect.

00:27:15.620 --> 00:27:19.480
I said that everything you can do
from a C API you can also do from

00:27:19.600 --> 00:27:21.700
Apple Script with the keychain.

00:27:21.750 --> 00:27:24.170
Here's a real simple example.

00:27:25.600 --> 00:27:30.600
I have the first internet
key of the current keychain.

00:27:30.600 --> 00:27:34.600
The whose clause at the end
there is doing all my searching.

00:27:34.600 --> 00:27:38.240
So I can add attributes like
whose account is Ken and

00:27:38.240 --> 00:27:40.740
whose server is ftp.apple.com.

00:27:40.820 --> 00:27:45.480
I can string a list of those together to
sort of specify the item I'm looking for.

00:27:45.650 --> 00:27:50.190
If the item is in the keychain,
it'll be returned in the item.

00:27:50.190 --> 00:27:53.810
And then I can get particular
attributes from the item

00:27:53.810 --> 00:27:55.990
such as password of the item.

00:27:56.910 --> 00:27:59.890
And then this sample just
displays the password,

00:27:59.890 --> 00:28:04.220
which is obviously not something
that you ever want to do.

00:28:05.700 --> 00:28:09.750
So which keychain APIs are
actually in Carbon?

00:28:09.980 --> 00:28:15.240
Well, the good news is the things that
were in Universal Interface's 3.3,

00:28:15.240 --> 00:28:19.480
I believe we're up to
3.3.1 or 2.3 actually,

00:28:19.480 --> 00:28:24.000
all of those calls with two
exceptions are part of Carbon.

00:28:24.000 --> 00:28:26.090
So those will be there.

00:28:26.310 --> 00:28:29.060
They'll be there in Carbon lib
and they'll be there in

00:28:29.060 --> 00:28:30.900
Carbon framework on 10.

00:28:30.900 --> 00:28:34.420
We had a keychain 1.0 API.

00:28:34.420 --> 00:28:39.960
I know that some of you in
this room actually used it and,

00:28:39.960 --> 00:28:39.960
you know, it's a little bit of

00:28:40.740 --> 00:28:43.340
Unfortunately,
it didn't actually ship until

00:28:43.340 --> 00:28:45.250
we were at Keychain 2.0.

00:28:45.320 --> 00:28:50.130
But, you know,
we put in some code that actually

00:28:50.130 --> 00:28:55.050
kept Keychain 1.0 working and
everything was supported on OS 9,

00:28:55.050 --> 00:28:59.880
with some exceptions which
were noted at the time.

00:29:00.310 --> 00:29:07.810
: Going forward into 10,
that will be removed.

00:29:07.810 --> 00:29:07.810
There is a document in that security SDK

00:29:08.400 --> 00:29:24.030
: I think the primary one is not
to use a keychain specification,

00:29:24.030 --> 00:29:27.890
but you always want to use a KC ref,
which is that opaque reference.

00:29:27.960 --> 00:29:33.610
And that allows things like smart cards
and other forms of keychain to work.

00:29:34.500 --> 00:29:40.220
So we'll be in Carbon Lib 1.1 on OS 9.

00:29:40.220 --> 00:29:40.220
I think that

00:29:40.430 --> 00:29:47.530
We may actually be in there even as we
speak in the current D build of 1.1.

00:29:47.530 --> 00:29:51.040
The next sort of build
cycle will get that in.

00:29:51.130 --> 00:29:53.130
So it's imminently there.

00:29:53.270 --> 00:29:56.980
And on OS X,
we will be on the Carbon framework.

00:29:56.980 --> 00:30:01.580
In DP4, as I said before,
you need to currently link

00:30:01.620 --> 00:30:04.380
against an additional framework,
Security HI.

00:30:04.380 --> 00:30:08.150
But certainly by the time this
thing reaches public beta,

00:30:08.150 --> 00:30:10.990
we will be fully integrated.

00:30:13.630 --> 00:30:16.650
So what do you have to do
right now to use the keychain?

00:30:16.750 --> 00:30:18.880
Well, there's a list here.

00:30:18.950 --> 00:30:22.340
First of all, the current interfaces
define this weird symbol,

00:30:22.420 --> 00:30:27.200
call in keychain but not in Carbon,
which is kind of a mouthful.

00:30:27.270 --> 00:30:30.870
It's a workaround,
so if you define it to true,

00:30:30.870 --> 00:30:34.090
you'll get all of the keychain calls.

00:30:34.400 --> 00:30:38.300
The caveat there is that
as well as defining that,

00:30:38.300 --> 00:30:41.180
you need to link to one of two libraries.

00:30:41.220 --> 00:30:45.810
On 9, you need to link still with
keychain lib until that 1.1

00:30:45.810 --> 00:30:48.530
build of Carbon lib is done.

00:30:48.600 --> 00:30:53.590
And on 10, you need to link against
security HI framework.

00:30:53.700 --> 00:30:58.460
So right now, today,
there's not the ability to have

00:30:58.560 --> 00:31:03.330
a CFM binary that you can just
build on 9 and take over to 10 and

00:31:03.330 --> 00:31:05.650
that will run using the keychain.

00:31:05.740 --> 00:31:10.360
But certainly that will be
possible by public beta.

00:31:10.880 --> 00:31:15.260
I should also point out that
DP4 does mean developer preview,

00:31:15.260 --> 00:31:16.690
and it is a preview.

00:31:16.860 --> 00:31:18.340
We are not done.

00:31:18.440 --> 00:31:21.770
And one of the things we're not
done with is the encryption.

00:31:21.800 --> 00:31:26.090
So you may,
you will definitely need to know that

00:31:26.090 --> 00:31:29.740
encryption has been disabled in DP4.

00:31:29.790 --> 00:31:37.800
So do not rely on keychains that
you create in DP4 to be secure.

00:31:38.070 --> 00:31:39.790
Just a warning.

00:31:43.400 --> 00:31:49.900
[Transcript missing]

00:31:50.560 --> 00:32:00.900
Take those APIs that we had in
Keychain on OS 9 and move them into a,

00:32:00.900 --> 00:32:05.620
factor them into a way that they
can be called from applications

00:32:05.660 --> 00:32:07.540
that don't bring up UI.

00:32:07.540 --> 00:32:12.030
That was sort of a problem that
we had with the current release.

00:32:12.800 --> 00:32:17.600
You were forced in some cases to bring up
UI to unlock a keychain if the keychain

00:32:17.600 --> 00:32:20.200
was locked in order to do anything.

00:32:20.200 --> 00:32:24.470
If your app couldn't bring up UI,
then that was a problem.

00:32:25.600 --> 00:32:30.660
Another problem was that there was no
way to add items to a specific keychain.

00:32:30.850 --> 00:32:34.400
All items went to the default keychain,
whatever that happened to be.

00:32:34.400 --> 00:32:37.400
So we needed to correct that.

00:32:40.410 --> 00:32:44.080
Going forward on 10,
these APIs will be part of

00:32:44.080 --> 00:32:46.990
security core and part of the,

00:32:47.620 --> 00:32:52.460
The OS X frameworks,
they won't necessarily be in

00:32:52.480 --> 00:32:54.640
Carbon as we move forward.

00:32:54.700 --> 00:32:59.650
The APIs that we have there in
place now are certainly in Carbon.

00:33:00.350 --> 00:33:03.690
But the new key and certificate
management based things

00:33:03.730 --> 00:33:08.340
that will interoperate with
the keychain are OS X only.

00:33:08.420 --> 00:33:13.800
So the first part of those new
API routines solve that problem

00:33:13.800 --> 00:33:18.000
of what can happen or what needs
to happen if you can't bring up

00:33:18.170 --> 00:33:20.800
any UI to unlock or authenticate.

00:33:20.830 --> 00:33:24.500
And we had a routine,
and we still have a routine in

00:33:24.500 --> 00:33:30.320
the SDK called set interaction
allowed which lets you turn on or

00:33:30.340 --> 00:33:32.790
off any user interface coming up.

00:33:32.930 --> 00:33:37.250
The problem of course is that if
you turn that off and the keychain

00:33:37.250 --> 00:33:41.960
is locked then we just return an
error and that's not very useful.

00:33:42.640 --> 00:33:47.890
So the new APIs will require
credentials to be provided.

00:33:47.890 --> 00:33:52.590
And this is something that is, again,
supported by the underlying framework,

00:33:52.600 --> 00:33:56.590
the CDSA framework that we're
built on top of in OS X.

00:33:56.760 --> 00:34:03.270
So the APIs will let
you provide some sort of

00:34:03.430 --> 00:34:05.940
credential which can
be either a password,

00:34:05.940 --> 00:34:13.450
it can be a token, it can be as simple as
here's the process that I am,

00:34:13.840 --> 00:34:16.990
did I have a digest
that was pre-approved.

00:34:17.370 --> 00:34:20.640
There will be a callback where you
can provide that information that

00:34:20.640 --> 00:34:26.190
the keychain needs without popping
up a dialogue when it needs it.

00:34:26.720 --> 00:34:29.700
Ultimately,
we want to move towards certificates

00:34:29.700 --> 00:34:34.950
as a way of authenticating that
items can be retrieved and sort of

00:34:34.950 --> 00:34:40.900
verifying the identity of the process
that is trying to retrieve them.

00:34:44.390 --> 00:34:48.120
Another problem that we had is how to
add an item to a particular keychain.

00:34:48.350 --> 00:34:53.000
What you had to do previously is
to save off the default keychain

00:34:53.000 --> 00:34:56.420
whenever you were going to add
something to your own keychain.

00:34:56.510 --> 00:34:58.340
You'd have to set it as the default.

00:34:58.440 --> 00:35:02.090
You'd have to put the item in and then
sort of swap it back to save the user's

00:35:02.150 --> 00:35:04.510
or restore the user's default keychain.

00:35:04.620 --> 00:35:06.360
That was pretty messy.

00:35:06.480 --> 00:35:13.160
So the new APIs in OS X will have
an optional keychain parameter.

00:35:16.120 --> 00:35:24.350
So I mentioned the keys and certificate
APIs that were part of Keychain in OS 9.

00:35:24.550 --> 00:35:28.090
We really only had two API routines and

00:35:28.350 --> 00:35:30.520
I'm not aware of anyone
that actually used them.

00:35:30.680 --> 00:35:34.440
Please come up afterwards if you use
them and heavily depend on these.

00:35:34.500 --> 00:35:41.990
But to factor out these and be able to,
as I said, look forward,

00:35:42.300 --> 00:35:51.180
is the developer of the new CSA 2.0.

00:35:51.200 --> 00:35:58.260
We've had to move the certificate
handling out of the keychain proper.

00:35:58.270 --> 00:36:02.830
So these two routines will not
be there going forward in 10.

00:36:02.860 --> 00:36:06.470
They'll still be available on 9 and
they'll still be available on Classic,

00:36:06.470 --> 00:36:09.530
but we'd like you to get away
from using them and use the ones

00:36:09.530 --> 00:36:11.360
that we'll have going forward.

00:36:11.430 --> 00:36:17.490
The new routines will be provided
as part of that security core piece,

00:36:17.490 --> 00:36:20.240
which is an OS X technology.

00:36:20.240 --> 00:36:23.680
One big reason we want to do this
is to avoid dependence on Carbon.

00:36:23.680 --> 00:36:26.220
So if you are, for example,
a BSD Unix app,

00:36:26.230 --> 00:36:30.300
you don't want to depend on
Carbon and have all of this.

00:36:30.340 --> 00:36:35.420
And I don't know in every case
whether it's even possible

00:36:35.420 --> 00:36:37.240
to have that dependent.

00:36:37.370 --> 00:36:42.250
So what this all means is that we're
not taking away keys and certificates.

00:36:42.330 --> 00:36:45.610
They'll still be there and they'll
still be visible in your keychain.

00:36:45.770 --> 00:36:49.440
They'll just be put in from
a different sort of vector.

00:36:49.440 --> 00:36:51.930
You won't call add in the keychain.

00:36:51.930 --> 00:36:56.540
You'll add from the security core
APIs and you'll even add from the

00:36:56.540 --> 00:37:01.140
lower level CDSA APIs if you want
to go down that far and use those.

00:37:01.330 --> 00:37:03.750
All of the CDSA headers are available.

00:37:03.750 --> 00:37:07.140
They're on the Open Group's website,
which is opengroup.com/cdsa.

00:37:07.140 --> 00:37:08.140
And you can find them on opengroup.org,
I believe.

00:37:08.140 --> 00:37:11.530
I have a URL for them
later on in this talk.

00:37:11.640 --> 00:37:14.230
But you can look at those, certainly.

00:37:14.370 --> 00:37:19.720
And items in a keychain are
certainly accessible at that layer.

00:37:21.350 --> 00:37:24.460
We are working on
higher level interfaces,

00:37:24.460 --> 00:37:28.300
obviously, to sit on top of those,
which will -- or to be

00:37:28.300 --> 00:37:30.340
available by public beta.

00:37:30.450 --> 00:37:32.110
I'm sorry.

00:37:32.530 --> 00:37:35.000
Those are actually the ones
that we're working on for the

00:37:35.000 --> 00:37:37.680
release right after public beta.

00:37:39.320 --> 00:37:41.770
So this is the part I've
been looking forward to,

00:37:41.820 --> 00:37:45.900
and mostly because I know that
there's no way MaxBug can pop up.

00:37:46.070 --> 00:37:48.800
So it's going to be good.

00:37:49.070 --> 00:37:51.320
If we could have demo
one up on the screen,

00:37:51.380 --> 00:37:55.600
I can actually go to that.

00:37:55.660 --> 00:37:57.310
Okay, great.

00:37:59.590 --> 00:38:01.600
So the first thing I'll do
is look at Keychain Access.

00:38:01.700 --> 00:38:03.700
This is the new Keychain Access.

00:38:03.700 --> 00:38:06.680
Maybe some of you have actually
already installed DP4 and

00:38:06.680 --> 00:38:08.300
have had a chance to see this.

00:38:08.370 --> 00:38:11.490
But it looks a lot like the
Keychain Access that's in OS 9,

00:38:11.590 --> 00:38:15.920
except of course it's carbonized
and it has the Aqua look and feel.

00:38:15.960 --> 00:38:22.980
So I can have columns that resize
and all those neat things that

00:38:22.980 --> 00:38:22.980
you get with Aqua and Carbon.

00:38:23.710 --> 00:38:29.170
When we shipped OS 9 we listened
to a lot of feedback on this and

00:38:29.170 --> 00:38:31.740
there was a lot of user feedback.

00:38:31.810 --> 00:38:36.040
And of course number one was why doesn't
my web browser support the keychain?

00:38:36.180 --> 00:38:40.180
But number two was how do I get
something into the keychain?

00:38:40.260 --> 00:38:43.660
And there was no clear way.

00:38:43.770 --> 00:38:47.400
Yes, you could drag mounted
servers into the keychain,

00:38:47.400 --> 00:38:49.520
you know,
and you could add passwords there.

00:38:49.520 --> 00:38:51.220
But it wasn't real
apparent how you would,

00:38:51.220 --> 00:38:55.570
you know, store something, for example,
you know, a credit card number or,

00:38:55.750 --> 00:38:57.500
you know,
the password to your E-Trade account.

00:38:57.500 --> 00:38:59.480
Or, you know,
these bits of data that people

00:38:59.480 --> 00:39:02.490
have been writing down on their
palm pilots and on sticky notes.

00:39:02.500 --> 00:39:04.490
It wasn't real clear how to get that in.

00:39:04.500 --> 00:39:07.500
So we've added an add button.

00:39:07.760 --> 00:39:13.970
And that just allows you to put in
your account name and a location.

00:39:14.190 --> 00:39:18.450
Maybe this is the
password for my WWC demo.

00:39:18.520 --> 00:39:20.940
And I'll type it in.

00:39:23.200 --> 00:39:25.010
Add it.

00:39:25.110 --> 00:39:27.530
And then I can get a
password in that way.

00:39:27.530 --> 00:39:32.220
And it becomes a little more
useful for people to use.

00:39:32.260 --> 00:39:36.160
Another feature that we've added
to keychain access is the ability

00:39:36.160 --> 00:39:40.260
to manage your keychains a little
better than you could before.

00:39:40.260 --> 00:39:43.970
So, for example,
you may have a list of two or three

00:39:44.050 --> 00:39:47.660
keychains or you may have a dozen
keychains and maybe you don't want

00:39:47.660 --> 00:39:51.950
all of them to be searched when
applications call find and applications

00:39:51.950 --> 00:39:54.570
are looking for things in your keychain.

00:39:54.680 --> 00:39:58.430
So you have the ability to turn on or
off whether these things are included in

00:39:58.430 --> 00:40:04.180
the search and you'll have the ability to
reorder the search order from a dialog.

00:40:04.180 --> 00:40:08.230
So these are things we're working on.

00:40:08.450 --> 00:40:12.490
What I'd like to do now is run
the Carbonized version of Fetch,

00:40:12.500 --> 00:40:14.220
thanks to Jim Matthews.

00:40:14.330 --> 00:40:19.320
This is an FTP client for the
Mac that's been Carbonized.

00:40:19.320 --> 00:40:22.940
And I have a shortcut here, actually,
that goes to a server

00:40:22.940 --> 00:40:24.630
that I have an account on.

00:40:24.760 --> 00:40:28.090
So when I double-click that, Fetch,
like most clients,

00:40:28.100 --> 00:40:32.460
needs a password for this server because
it's a password-protected account.

00:40:32.570 --> 00:40:34.790
So it pops up a password dialog.

00:40:34.870 --> 00:40:39.030
But in this password dialog
is a checkbox that lets me,

00:40:39.030 --> 00:40:41.890
as the user,
decide whether or not I want to

00:40:41.950 --> 00:40:43.460
add my password to the keychain.

00:40:43.470 --> 00:40:45.000
And that's actually very important.

00:40:45.050 --> 00:40:47.160
You don't want to force
people to use the keychain.

00:40:47.160 --> 00:40:50.530
You always want to give them the option.

00:40:50.660 --> 00:40:51.820
I'll add that.

00:40:51.940 --> 00:40:53.460
I'll log into my server.

00:40:53.540 --> 00:40:56.330
And if I sort of go back
to keychain access here,

00:40:56.330 --> 00:41:00.580
I see that it's added a password
for that server to the keychain.

00:41:02.090 --> 00:41:04.130
So I can look at it,
see that it's in fact

00:41:04.130 --> 00:41:08.540
an internet password,
see the URL, the account.

00:41:08.590 --> 00:41:11.720
And this looks an awful
lot again like OS 9.

00:41:11.720 --> 00:41:16.070
What's not there and what we
are working on is those access

00:41:16.070 --> 00:41:17.920
control lists that I mentioned.

00:41:17.980 --> 00:41:22.790
So given that item,
I want to be able to allow

00:41:23.000 --> 00:41:53.500
[Transcript missing]

00:41:53.780 --> 00:41:55.900
And of course,
the next time Fetch needs to access it,

00:41:55.900 --> 00:41:57.250
I can just open it.

00:41:57.320 --> 00:42:00.590
And it doesn't pop any password
dialog because he's called

00:42:00.590 --> 00:42:03.130
find internet password and
it was there in the keychain,

00:42:03.260 --> 00:42:05.280
so he was able to use it.

00:42:05.820 --> 00:42:10.050
And I can close the connection
again and I can open it

00:42:10.050 --> 00:42:12.180
again and still no password.

00:42:12.180 --> 00:42:13.530
I can do that all day long.

00:42:13.700 --> 00:42:16.180
But of course,
I can also remove this password

00:42:16.180 --> 00:42:20.740
from the keychain if I don't
want it to be used anymore.

00:42:20.740 --> 00:42:26.210
And then fetch can't use it because
it's not there and it has to ask again.

00:42:27.190 --> 00:42:34.430
So that's just a basic
demo of Keychain in OS X.

00:42:34.430 --> 00:42:38.170
And if we could have the slides back,
we can wrap up.

00:42:46.060 --> 00:42:50.540
So just to wrap up,
the keychain is a repository.

00:42:50.540 --> 00:42:52.980
It's like a bank vault, like a safe.

00:42:53.010 --> 00:42:56.750
It's the place that you can
put your secure data in.

00:42:56.860 --> 00:43:00.240
It's provided for you as a system
service so your application doesn't

00:43:00.330 --> 00:43:03.950
have to do all the work associated
with making these things secure and

00:43:04.070 --> 00:43:10.210
hopefully even for asking for the
data that you need to authenticate.

00:43:10.260 --> 00:43:11.300
It's very easy to use.

00:43:11.540 --> 00:43:16.660
You really only need two to three calls
to get your application using this.

00:43:16.710 --> 00:43:18.670
And you can get started now.

00:43:18.670 --> 00:43:21.000
You can get started with DP4.

00:43:21.000 --> 00:43:22.650
The APIs are there.

00:43:22.830 --> 00:43:29.920
Again, with the one note that you need to
link with security HI framework.

00:43:29.920 --> 00:43:33.400
And certainly the security
SDK is out there for 9,

00:43:33.400 --> 00:43:35.590
which you can also look at.

00:43:36.430 --> 00:43:38.570
Unfortunately,
the problem with this slide is

00:43:38.570 --> 00:43:43.200
that everything's already happened,
but you really, if you can,

00:43:43.200 --> 00:43:46.990
want to take a look at
security directions.

00:43:47.090 --> 00:43:48.200
That gives you more information.

00:43:48.200 --> 00:43:55.190
And I'm not sure what media the session
will be available in afterwards,

00:43:55.190 --> 00:43:59.440
but if you get a chance to look
at a recorded version of that,

00:43:59.440 --> 00:44:04.740
it's very important to
see how CDSA 2.0 fits in.

00:44:04.850 --> 00:44:06.310
Um.

00:44:08.350 --> 00:44:13.050
For more information,
we have the SDK available on the website

00:44:13.180 --> 00:44:15.460
and we have updated documentation.

00:44:15.520 --> 00:44:19.260
So you should all look at the
PDF file that's up on the Carbon,

00:44:19.260 --> 00:44:22.060
the TechBubz Carbon website.

00:44:22.100 --> 00:44:27.050
And the documentation is also
available in HTML format on the DP4 CD.

00:44:27.150 --> 00:44:31.290
So if you look in, I think,
system documentation, in that path,

00:44:31.360 --> 00:44:34.360
you'll find all of the
keychain manager documentation.

00:44:34.360 --> 00:44:40.360
If you're interested in sort of drilling
down and getting to the CDSA API layer,

00:44:40.440 --> 00:44:44.350
CDSA is documented at
the Open Groups website.

00:44:44.360 --> 00:44:46.360
You can go there for more info.

00:44:46.360 --> 00:44:52.510
And if you're interested in developing
smart card plugins or the ability to

00:44:52.510 --> 00:44:57.360
have these things show up as keychains,
that was talked about, of course,

00:44:57.360 --> 00:44:58.360
in the security direction session.

00:44:58.360 --> 00:45:03.360
But for more info, take a look at the
PCSC workgroup website.

00:45:03.360 --> 00:45:04.160
So...