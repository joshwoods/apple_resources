WEBVTT

00:00:07.410 --> 00:00:08.540
Good afternoon, everyone.

00:00:08.660 --> 00:00:09.580
Can I ask you all a favor?

00:00:09.580 --> 00:00:11.760
Those of you who have large
empty spaces next to you,

00:00:11.760 --> 00:00:13.800
could you please all kind of
stand up and shuffle over a bit?

00:00:13.800 --> 00:00:15.690
We've got a lot of people who
want to come in and see this,

00:00:15.800 --> 00:00:18.290
and it's not nearly as much
fun being in the overflow room.

00:00:18.290 --> 00:00:20.670
Thank you very much.

00:00:22.350 --> 00:00:24.270
So, people in the middle have
been very helpful here.

00:00:24.340 --> 00:00:26.660
Some of you on the edges,
kind of try and squeeze in a little bit.

00:00:26.690 --> 00:00:28.260
One or two seats on the
edges makes a big difference,

00:00:28.320 --> 00:00:31.740
helps people grab a seat and feel
like they're part of the crowd here.

00:00:31.880 --> 00:00:33.300
One big happy family, right?

00:00:33.300 --> 00:00:36.870
Okay, so we're here to talk about
one of my favorite topics,

00:00:36.870 --> 00:00:37.170
XML.

00:00:37.300 --> 00:00:39.080
Just to clarify,
some of you have been coming

00:00:39.080 --> 00:00:40.420
up and asking me about,
you know,

00:00:40.510 --> 00:00:42.300
bug fix orders and engineering standards.

00:00:42.300 --> 00:00:44.300
I'm the product marketing manager, okay?

00:00:44.300 --> 00:00:47.250
I'm the marketing weenie for
WebObjects and development platforms.

00:00:47.350 --> 00:00:50.300
I don't know the in-depth guts
of all the engineering stuff.

00:00:50.300 --> 00:00:54.260
Tony or the engineering teams can
give you much better answers on that.

00:00:54.330 --> 00:00:55.300
I handle all the warm, fuzzy stuff.

00:00:55.300 --> 00:00:58.270
So, feel free to come hassle
me about those things,

00:00:58.400 --> 00:01:01.190
but just direct your
questions appropriately.

00:01:01.300 --> 00:01:05.270
I'm also responsible for what we do
with general development platforms,

00:01:05.300 --> 00:01:08.280
including open source, Java,
and open standards,

00:01:08.410 --> 00:01:11.300
which is why I'm very excited
about this session on XML.

00:01:11.300 --> 00:01:14.300
How many of you are doing
things with XML today?

00:01:14.300 --> 00:01:14.520
Okay.

00:01:14.790 --> 00:01:17.000
How many of you think you're
going to have to do stuff with

00:01:17.010 --> 00:01:18.290
XML in the next year or so?

00:01:18.300 --> 00:01:18.300
Okay.

00:01:18.350 --> 00:01:20.300
So, it's definitely coming down the pike.

00:01:20.300 --> 00:01:22.980
We want to make sure that
we have the best platform,

00:01:23.160 --> 00:01:25.290
WebObjects, Mac OS X, open source.

00:01:25.440 --> 00:01:28.100
As you know,
Apple does have already a C-based

00:01:28.110 --> 00:01:32.730
XML parser that we've open sourced
as part of the Darwin project for

00:01:32.730 --> 00:01:36.300
Mac OS X for people writing into
Mac OS X or core foundation APIs.

00:01:36.300 --> 00:01:39.440
We also have some very cool
Java stuff integrated with WebObjects,

00:01:39.440 --> 00:01:42.230
which is what Michael will be
telling you about right now.

00:01:42.300 --> 00:01:45.300
So, I introduce -- sorry,
Tim Jorison from WebObjects.

00:01:45.300 --> 00:01:46.300
Thank you very much.

00:01:50.960 --> 00:01:51.900
Thanks, Ernie.

00:01:51.940 --> 00:01:55.180
So what we're going to talk about
today is WebObjects and XML.

00:01:55.500 --> 00:01:58.360
And Ernie kind of stole my
questions because everyone seems

00:01:58.360 --> 00:01:59.700
to be starting out with questions.

00:01:59.840 --> 00:02:02.280
So I'm going to ask it again
except slightly different.

00:02:02.320 --> 00:02:06.160
I saw a number of hands go
up to people doing XML stuff.

00:02:06.160 --> 00:02:09.460
So just raise those hands again,
people doing XML today.

00:02:09.460 --> 00:02:10.060
Okay.

00:02:10.120 --> 00:02:12.930
And those of you--no, keep them up,
keep them up just for a second.

00:02:13.220 --> 00:02:16.620
And those of you doing
it with WebObjects.

00:02:16.930 --> 00:02:18.900
Okay, so about half,
half the number of people.

00:02:18.900 --> 00:02:20.200
Okay, thanks.

00:02:20.310 --> 00:02:23.890
So, what we're going to do
is talk about XML today,

00:02:23.890 --> 00:02:26.700
and we're going to start
out with the basics of XML.

00:02:26.800 --> 00:02:29.400
So most of you, I think,
looking out there,

00:02:29.400 --> 00:02:32.040
probably know the basics,
but I just want to kind

00:02:32.050 --> 00:02:33.240
of cover that real quick.

00:02:33.340 --> 00:02:36.480
And then we're going to talk about
the mechanics of XML with WebObjects.

00:02:36.630 --> 00:02:41.730
What kind of facilities are in
WebObjects to deal with XML and

00:02:41.730 --> 00:02:44.700
kind of the typical scenarios.

00:02:44.790 --> 00:02:48.570
We're going to talk about
encoding and decoding XML.

00:02:48.760 --> 00:02:52.550
Another way of saying it is
perhaps archiving and parsing,

00:02:52.670 --> 00:02:54.760
reading and vending,
consuming and vending.

00:02:54.910 --> 00:02:59.390
We're going to talk about XML being
used for server-to-server communication.

00:02:59.520 --> 00:03:03.000
There are lots of uses of XML,
but what we're going to kind of talk

00:03:03.000 --> 00:03:05.380
about here is really server-to-server,
because that's really

00:03:05.380 --> 00:03:09.910
where WebObjects has a big,
strong role and can do a lot.

00:03:10.090 --> 00:03:12.650
And we're going to use
content syndication,

00:03:12.780 --> 00:03:14.700
kind of a very simplified
version of that,

00:03:14.880 --> 00:03:21.130
as an example to illustrate
using XML with WebObjects.

00:03:21.730 --> 00:03:24.960
So first the basics of XML.

00:03:25.090 --> 00:03:28.490
Back when the web started,
it was all about content.

00:03:28.790 --> 00:03:33.510
The tagging was really to represent
the different areas of content.

00:03:33.740 --> 00:03:36.100
It wasn't about format.

00:03:36.230 --> 00:03:41.100
What XML brings back to
the table is the content.

00:03:41.380 --> 00:03:43.700
It really is all about the content.

00:03:43.800 --> 00:03:47.130
And of course there are other ways,
ironically,

00:03:47.210 --> 00:03:51.830
using XML to describe the format
of formatting the XML over here,

00:03:51.830 --> 00:03:54.700
but fundamentally it's about content.

00:03:54.840 --> 00:03:57.400
It is a tag system, much like HTML.

00:03:57.810 --> 00:04:01.700
We have tags, except it's a little
bit stricter than HTML,

00:04:01.890 --> 00:04:08.700
more akin to perhaps SGML in
its structuredness and rigidity.

00:04:08.830 --> 00:04:11.700
It does use plain text,
as you're probably aware.

00:04:11.880 --> 00:04:13.700
And the good thing of all this,
the good part of this is

00:04:13.700 --> 00:04:13.700
that it's not just a text,
it's a text that's written in HTML.

00:04:13.700 --> 00:04:14.180
It's a text that's written in HTML.

00:04:14.200 --> 00:04:15.910
And the good part of all this
is that it really is pretty

00:04:15.910 --> 00:04:17.070
easy to learn the basics.

00:04:17.390 --> 00:04:19.790
Lots of books on XML,
and a lot of them don't even

00:04:19.950 --> 00:04:21.080
talk about programming at all.

00:04:21.320 --> 00:04:25.200
They really treat it more like, you know,
just kind of a structured ASCII document,

00:04:25.200 --> 00:04:30.520
and how you can interact with this
document and have this document represent

00:04:30.910 --> 00:04:33.700
meaningful and useful information.

00:04:34.270 --> 00:04:38.900
And it is, it is absolutely gaining a
widespread acceptance for,

00:04:39.150 --> 00:04:41.200
for data interchange,
which is really one of the reasons why

00:04:41.200 --> 00:04:46.600
we're going to focus a little bit on,
on that server-to-server communication.

00:04:47.530 --> 00:04:52.160
So first a little sample XML file
just so we all understand what we see.

00:04:52.480 --> 00:04:54.100
Looks, we have tags.

00:04:54.330 --> 00:04:58.930
Here you can see the very top
level is a model tag and everything

00:04:58.930 --> 00:04:59.760
else is enclosed in that.

00:04:59.870 --> 00:05:02.640
We clearly have tags and attributes.

00:05:02.640 --> 00:05:08.770
The one thing I will point out for those
who are kind of from the HTML arena is

00:05:08.860 --> 00:05:15.020
if we look at this first property list
here where it says the third line down,

00:05:15.350 --> 00:05:17.140
property name equals quantity.

00:05:17.140 --> 00:05:20.990
At the very end, the far right,
you'll see that that tag actually

00:05:21.000 --> 00:05:23.080
has a slash before the end of it.

00:05:23.080 --> 00:05:25.590
This is an empty tag.

00:05:25.640 --> 00:05:28.880
So this is something that
XML kind of brings to the table

00:05:28.880 --> 00:05:32.880
and something you haven't seen
in your typical HTML document.

00:05:33.050 --> 00:05:35.910
So there's just a sample bit of XML.

00:05:37.070 --> 00:05:41.600
So now let's talk about
WebObjects and XML.

00:05:41.720 --> 00:05:48.800
Traditionally WebObjects is a server
and it's used to vend information out.

00:05:48.920 --> 00:05:55.600
And typically it's vending
information out for web pages.

00:05:55.740 --> 00:05:59.780
So there's this notion of
a request and a response.

00:05:59.960 --> 00:06:03.900
WebObjects 4.5 adds a factoring
application to the server role.

00:06:03.900 --> 00:06:08.020
And in the server role,
the WebObjects application takes in

00:06:08.020 --> 00:06:09.900
requests and sends out responses.

00:06:09.900 --> 00:06:11.810
When you start talking about
server-to-server communication,

00:06:12.130 --> 00:06:15.850
all of a sudden,
your WebObjects application

00:06:16.040 --> 00:06:21.900
server is also a client to
some other application server.

00:06:21.900 --> 00:06:25.740
It may play the role of both
the server and a client.

00:06:25.970 --> 00:06:33.070
And so what WebObjects 4.5 adds is
a factoring out of the parts of the

00:06:33.220 --> 00:06:35.900
request and response that were common.

00:06:36.010 --> 00:06:40.070
And so we now have in WebObjects
4.5 introduced into the class

00:06:40.140 --> 00:06:41.900
hierarchy a "woe" message.

00:06:41.900 --> 00:06:46.680
And "woe request" and "woe
response" are subclasses of "woe

00:06:46.680 --> 00:06:51.480
message." So when you look at...

00:06:51.840 --> 00:06:54.850
When you're looking for access
to certain things that used to

00:06:54.980 --> 00:06:58.820
be in a request or response,
you might have to look in WoMessage to

00:06:58.820 --> 00:07:01.100
actually get to access those methods.

00:07:01.230 --> 00:07:05.290
The good news of all this is that
your request and your response

00:07:05.730 --> 00:07:07.870
can now take on a different role.

00:07:08.200 --> 00:07:12.550
They no longer have this
predefined notion of "I'm a server,

00:07:12.700 --> 00:07:16.990
I'm a client." In 4.0,
oftentimes you would have to

00:07:16.990 --> 00:07:21.000
do some socket connections
to go out and grab requests.

00:07:21.120 --> 00:07:26.990
Maybe you were in Objective-C,
you used NSString's little "go grab this,

00:07:26.990 --> 00:07:31.000
get me a string from this
URL" or something like that.

00:07:31.060 --> 00:07:35.940
Now we also have a structure
in the mechanics of WebObjects

00:07:36.110 --> 00:07:38.000
to do HTTP connections.

00:07:38.160 --> 00:07:41.420
And so we can actually have that
client piece of an HTTP connection

00:07:41.470 --> 00:07:43.500
in your WebObjects application.

00:07:43.540 --> 00:07:45.180
So WebObjects 4.5 adds that.

00:07:45.350 --> 00:07:50.300
So it adds WoMessage, WoRequest,
WoResponse, or subclasses of that.

00:07:50.300 --> 00:07:53.010
also have HTTP connection.

00:07:53.550 --> 00:07:57.940
To do the encoding and decoding
of the XML from the object world

00:07:58.090 --> 00:08:04.530
to the flat XML text world,
we've added WoXMLCoder and WoXMLDecoder.

00:08:05.320 --> 00:08:13.640
These are two classes that really try to
simplify the in and outbound XML data.

00:08:13.660 --> 00:08:15.890
And all of those,
those two classes are actually

00:08:15.970 --> 00:08:19.300
built on top of IBM's XML parser.

00:08:19.330 --> 00:08:23.360
I will make a note that in
WebObjects 4.5 to use these classes,

00:08:23.460 --> 00:08:27.500
you actually have to be using
Java as your programming language.

00:08:30.120 --> 00:08:33.290
Let's talk now about encoding.

00:08:33.410 --> 00:08:39.140
When you encode,
you go from an object and you

00:08:39.140 --> 00:08:41.640
want to get out an XML file.

00:08:41.780 --> 00:08:44.560
And we can actually do
that with a single method.

00:08:44.770 --> 00:08:51.010
So it's encode root object with
key that you pass an object and

00:08:51.100 --> 00:08:55.200
you pass it what XML tag you want
associated with that top level root.

00:08:55.320 --> 00:08:58.790
And what you get back is an XML document.

00:08:59.580 --> 00:09:05.170
This, this XML coder,
WoW XML coder object can

00:09:05.320 --> 00:09:08.260
actually do this one method,
just kind of it magically works

00:09:08.490 --> 00:09:13.500
for any of the common types:
NSArray, NSDictionary, EnterpriseObjects,

00:09:13.510 --> 00:09:18.500
String, Number, Date,
and maybe a few others.

00:09:18.500 --> 00:09:20.000
It's in the documentation.

00:09:20.000 --> 00:09:25.500
I would definitely recommend that you
take a look at the XML documentation

00:09:25.500 --> 00:09:28.500
that's in the WebObjects 4.5.

00:09:28.830 --> 00:09:31.870
There's a PDF that describes all
of this as I'm going through,

00:09:32.000 --> 00:09:33.500
just for your reference.

00:09:33.500 --> 00:09:37.830
So, with this single method
you can create these,

00:09:37.830 --> 00:09:41.730
this XML representation of these objects.

00:09:42.100 --> 00:09:44.500
If you have a data type
that's not supported by that,

00:09:44.640 --> 00:09:46.590
what you can do is you
can write a custom method,

00:09:46.630 --> 00:09:54.990
it's basically encodeObjects for key,
that will your past,

00:09:55.230 --> 00:09:59.240
You're past the object and your
responsibility is to return the

00:09:59.240 --> 00:10:01.880
XML representation of that object.

00:10:02.460 --> 00:10:05.170
One of the things that you
can--this is all good and great,

00:10:05.610 --> 00:10:05.870
okay?

00:10:06.120 --> 00:10:08.600
I have a bunch of--I have an
EO and I just want to get an

00:10:08.600 --> 00:10:10.500
XML representation of that EO.

00:10:10.550 --> 00:10:14.590
I just send this--I send this
object to this--to the coder,

00:10:14.890 --> 00:10:16.490
let it go to work.

00:10:16.870 --> 00:10:20.190
The one thing to be aware
of is that by default,

00:10:20.360 --> 00:10:25.100
it'll take that object, encode it,
and then follow all the relationships,

00:10:25.200 --> 00:10:28.790
all the related objects,
and encode them as well.

00:10:28.900 --> 00:10:33.650
So the downside of this is that
as you navigate relationships,

00:10:33.790 --> 00:10:35.800
it goes to the next object.

00:10:35.800 --> 00:10:37.800
So you have,
let's say you have an employee.

00:10:37.800 --> 00:10:41.800
You archive the, it codes the employee.

00:10:41.800 --> 00:10:45.930
It then goes to the department, codes it,
but then there's an inverse

00:10:45.930 --> 00:10:50.120
relationship going back to employees,
so then it codes all of the

00:10:50.210 --> 00:10:51.760
employees for that department.

00:10:51.800 --> 00:10:55.800
So you can imagine that in a
well-connected object model,

00:10:55.800 --> 00:10:58.790
everything,
your entire database gets encoded.

00:10:59.000 --> 00:11:02.490
Not exactly what you
want in most situations.

00:11:02.680 --> 00:11:03.890
So, ways of avoiding this.

00:11:04.050 --> 00:11:07.850
One is, on your EO,
you can actually implement the

00:11:07.850 --> 00:11:13.160
custom encoder method and say which
attributes and which relationships

00:11:13.200 --> 00:11:14.600
to actually encode and not.

00:11:14.720 --> 00:11:20.600
You can also use a mapping file,
which I'm going to show in just a second.

00:11:20.600 --> 00:11:22.920
Or the other way is to actually,
if it's possible,

00:11:23.000 --> 00:11:26.600
you can actually turn off the class
property of the inverse relationships.

00:11:26.600 --> 00:11:30.590
If it's not a class property,
it doesn't actually follow it to encode.

00:11:30.600 --> 00:11:34.270
So let's take a look at this method.

00:11:35.220 --> 00:11:40.900
The top one is kind of the single,
don't do any work, throw in an object,

00:11:41.030 --> 00:11:44.450
and get an XML document out.

00:11:44.750 --> 00:11:49.240
And it's basically you create a
coder and you send it the encode

00:11:49.240 --> 00:11:51.600
root object for key message.

00:11:51.760 --> 00:11:54.160
And the bottom one is
using a mapping file.

00:11:54.470 --> 00:11:57.620
You basically create a coder
with the mapping file and

00:11:57.620 --> 00:11:59.540
then send that same message.

00:12:00.620 --> 00:12:03.230
So what does a mapping file look like?

00:12:03.330 --> 00:12:07.000
Using XML we describe the
mapping file and it's,

00:12:07.000 --> 00:12:10.030
this is actually the same
one I showed earlier today.

00:12:10.170 --> 00:12:14.080
What it says is what your entity
name is and it says the tag,

00:12:14.130 --> 00:12:19.560
XML tag to use and which attributes
of that to actually encode with some

00:12:19.560 --> 00:12:22.690
flags to deal with special cases.

00:12:23.400 --> 00:12:24.360
Now decoding.

00:12:24.470 --> 00:12:27.730
Again, single method,
you can actually decode

00:12:27.850 --> 00:12:33.730
your object into your,
you can decode your XML into an object.

00:12:34.000 --> 00:12:38.140
So you have this XML file and
you want an object from it.

00:12:39.220 --> 00:12:41.000
With the single method,
what you generally get back is

00:12:41.040 --> 00:12:44.860
either an array or a dictionary
or an array of dictionaries.

00:12:44.970 --> 00:12:47.440
And we're going to show this
in the demo a little later.

00:12:47.600 --> 00:12:50.100
You can also use a mapping file.

00:12:50.290 --> 00:12:57.300
to specify how that encoding or decoding,
how that decoding actually happens.

00:12:57.750 --> 00:13:00.110
From the encoding standpoint,
you're typically going to do that,

00:13:00.280 --> 00:13:04.760
use a mapping file in order
to adhere to a certain DTD.

00:13:04.850 --> 00:13:10.920
And decoding, you're going to use that to
basically map the XML someone's

00:13:10.920 --> 00:13:14.520
giving you into your objects,
your enterprise objects,

00:13:14.600 --> 00:13:16.790
and the attributes that are there.

00:13:17.210 --> 00:13:19.770
Unless you've convinced the other
person to use the exact same names

00:13:19.840 --> 00:13:22.730
that you are using in your EOs.

00:13:23.100 --> 00:13:25.450
Just as a side note for
decoding and kind of,

00:13:25.800 --> 00:13:30.500
excuse me, parsing the documents,
you also have access,

00:13:30.500 --> 00:13:32.820
the IBM parser is there,
so you can use the

00:13:32.820 --> 00:13:34.640
SACS API to deal with that.

00:13:34.990 --> 00:13:38.370
And the response object,
you can actually,

00:13:38.570 --> 00:13:42.240
if it's an XML document,
you can actually ask it,

00:13:42.310 --> 00:13:46.430
give me a DOM document from this,
from the request,

00:13:46.430 --> 00:13:48.930
from the response content.

00:13:49.010 --> 00:13:51.290
So,
in this HTTP connection kind of thing,

00:13:51.290 --> 00:13:55.480
you get a document back, if it's XML,
you can just ask that response object,

00:13:55.650 --> 00:14:01.500
give me that thing as a DOM document
and manipulate it with that API.

00:14:01.830 --> 00:14:10.170
An example of this is Related Links,
which goes out and uses the Netscape

00:14:10.170 --> 00:14:13.360
Related Links service on the web.

00:14:13.450 --> 00:14:17.830
You give it a website and it comes back
with all the related sites to that.

00:14:18.200 --> 00:14:23.700
It's all done using mapping files,
so you can get a sense for that.

00:14:23.810 --> 00:14:28.780
And it's a really good example of kind of
all the little ins and outs and different

00:14:28.780 --> 00:14:32.640
ways of using the encoder and decoder.

00:14:33.130 --> 00:14:35.920
One pitfall to avoid
when you're decoding,

00:14:36.120 --> 00:14:40.800
occasionally the decoder will
look and if you have four,

00:14:40.800 --> 00:14:48.380
say, three things that have name,
so you have three tags right

00:14:48.380 --> 00:14:51.300
after each other that are name or

00:14:51.420 --> 00:14:57.200
The first thing you'll see is a
string that is a single string back.

00:14:57.400 --> 00:14:58.670
So what you'll get is an
array of three strings.

00:14:58.670 --> 00:14:59.700
Well, if there's only one,
what you're going to get is

00:14:59.790 --> 00:15:04.110
basically a single string back
instead of an array of one size.

00:15:04.160 --> 00:15:09.020
So there's a forced list
option in the mapping file that

00:15:09.020 --> 00:15:14.240
will always make it an array,
even if there's only one.

00:15:14.240 --> 00:15:14.240
So I've seen that bite a few customers.

00:15:15.470 --> 00:15:18.810
So now let's go on to
kind of uses of XML.

00:15:18.830 --> 00:15:22.800
And the one we're going to focus on here
is really server-to-server communication.

00:15:22.940 --> 00:15:28.070
Used often for data interchange
and transferring and communicating

00:15:28.450 --> 00:15:30.500
between two applications.

00:15:30.610 --> 00:15:33.540
Going from the previous discussion,
you might actually use XML in this

00:15:33.610 --> 00:15:37.010
mechanism to exchange snapshots,
even if someone thinks

00:15:37.010 --> 00:15:38.990
that's a flurry of activity.

00:15:39.110 --> 00:15:44.460
But that's an example of some
kind of thing you might use.

00:15:44.580 --> 00:15:47.480
You also might use this for
remote method invocation.

00:15:47.590 --> 00:15:48.960
There are a number of
protocols out there,

00:15:48.960 --> 00:15:53.860
XMLRPC, SOAP is another one that's
gaining wide acceptance.

00:15:53.960 --> 00:15:58.990
Electronic data interchange is
another example of server-to-server

00:15:58.990 --> 00:16:02.620
just completing a purchase
order or something like that.

00:16:02.750 --> 00:16:08.450
Content management is generally a popular
use for XML and dealing with putting

00:16:08.780 --> 00:16:11.420
content from one place to another.

00:16:11.520 --> 00:16:13.620
There are a number of people
actually using this today.

00:16:13.620 --> 00:16:18.620
With WebObjects,
there's a company down in Florida,

00:16:18.620 --> 00:16:21.440
NetCommerce Corp,
using all sorts of XML for

00:16:21.440 --> 00:16:22.850
content management.

00:16:23.150 --> 00:16:26.240
There are a number of others
that I'm sure are here today

00:16:26.240 --> 00:16:28.310
doing similar kinds of things.

00:16:28.490 --> 00:16:30.730
Content syndication,
this is what we're going to

00:16:30.950 --> 00:16:32.300
talk about in just a second.

00:16:32.350 --> 00:16:34.100
I have an article.

00:16:34.130 --> 00:16:34.800
I'm a publisher.

00:16:34.800 --> 00:16:38.400
I'm an author, a site that has a bunch of
authors creating content.

00:16:38.400 --> 00:16:41.400
And I want to sell that or push that
out to a number of different sites.

00:16:41.400 --> 00:16:44.830
And these sites want to get
kind of the top headline news.

00:16:44.840 --> 00:16:49.170
So if I'm Reuters and I want all the,
I want to sell my content out,

00:16:49.400 --> 00:16:53.230
we might use content syndication
to push that out or have them

00:16:53.390 --> 00:16:55.380
poll for that information.

00:16:55.400 --> 00:16:57.280
And so there are a number of standards.

00:16:57.390 --> 00:17:00.400
All the,
most of these are all based on XML.

00:17:00.400 --> 00:17:02.330
The bottom line is there
are kind of two flows.

00:17:02.330 --> 00:17:06.650
You either push the content to
the subscriber or the subscriber

00:17:06.650 --> 00:17:09.390
periodically polls for new content.

00:17:09.400 --> 00:17:12.880
So in the push model,
a new article goes in and it gets pushed

00:17:13.110 --> 00:17:17.400
out to the servers and they're just
sitting there waiting to accept it.

00:17:17.400 --> 00:17:21.660
In the poll scenario,
the subscriber periodically

00:17:22.560 --> 00:17:24.400
asks for requests.

00:17:24.400 --> 00:17:26.240
Do you have new articles?

00:17:26.760 --> 00:17:34.400
And the publisher pushes out
those new articles when asked.

00:17:34.550 --> 00:17:37.400
This is actually the model that we're
going to use for our little simple

00:17:37.470 --> 00:17:39.400
demonstration of putting this in action.

00:17:41.750 --> 00:17:47.870
So, what I would like to do is
bring Michael Leong on stage.

00:17:51.610 --> 00:18:00.000
So, what we've done here is,
before we started,

00:18:00.000 --> 00:18:02.130
we created a direct web application.

00:18:02.240 --> 00:18:03.900
Direct web is not a toy.

00:18:04.100 --> 00:18:06.370
We created a simple direct
web application here,

00:18:06.390 --> 00:18:10.690
and what we're going to do
is add syndication to this.

00:18:10.770 --> 00:18:11.900
This is going to be our publisher.

00:18:11.990 --> 00:18:14.920
So, I use direct web because I can
add an article very simply.

00:18:15.000 --> 00:18:18.290
So,
what we did was create a simple direct

00:18:18.330 --> 00:18:21.270
action class and called syndication.

00:18:21.340 --> 00:18:27.300
And we're going to add a few methods
to create this XML document on request.

00:18:27.400 --> 00:18:31.290
So the first thing we want to do,
as kind of a general good coding,

00:18:31.300 --> 00:18:37.300
a good programming style,
we want to create one coder object.

00:18:37.300 --> 00:18:39.300
So one Woe XML coder.

00:18:39.300 --> 00:18:43.300
And we're going to save
that as an IVAR on the top.

00:18:43.300 --> 00:18:47.380
And we've got a bunch of code
in the middle that goes out and,

00:18:47.380 --> 00:18:50.040
given a certain client ID,
ID will fetch the articles

00:18:50.210 --> 00:18:52.320
that they have not seen yet.

00:18:52.300 --> 00:19:20.500
[Transcript missing]

00:19:21.420 --> 00:19:25.400
The next thing we want to
do is call that one method:

00:19:25.570 --> 00:19:29.960
encode root object for key,
passing in the array of

00:19:29.960 --> 00:19:33.400
articles and giving it a key.

00:19:33.400 --> 00:19:37.390
In this case the key we're
going to give it is articles.

00:19:47.020 --> 00:19:54.600
The next thing that we want
to do is create a wo response.

00:19:54.720 --> 00:20:02.140
So we are going to be the
vendor of this XML document.

00:20:02.240 --> 00:20:04.780
And so we're going to create
a wo response that we're going

00:20:04.970 --> 00:20:07.790
to append this XML document to.

00:20:11.860 --> 00:20:14.890
So we create our new wo response.

00:20:14.920 --> 00:20:20.020
And the first thing we're
going to do is create the,

00:20:20.070 --> 00:20:24.930
add into that response the
XML kind of identifier for

00:20:25.160 --> 00:20:27.790
the actual document itself.

00:20:28.000 --> 00:20:35.640
So we see the less than question
mark XML version kind of thing here.

00:20:41.100 --> 00:20:42.100
This is a hard one to remember.

00:20:42.100 --> 00:20:45.040
We actually can just copy and paste this.

00:20:45.150 --> 00:20:46.900
Just to make sure we get it right.

00:20:47.030 --> 00:20:48.840
So we now have the response.

00:20:49.070 --> 00:20:52.670
We've added kind of
this XML initial part.

00:20:52.670 --> 00:20:57.990
And now we're going to go ahead and
append that content to the response.

00:21:04.470 --> 00:21:10.090
This is our XML string we did with the
one line in code root object for key.

00:21:15.370 --> 00:21:17.130
And finally,
what we want to do is set the

00:21:17.130 --> 00:21:23.020
MIME type so that the receiver
of this will actually get the,

00:21:23.120 --> 00:21:26.790
understand it as an XML document,
as opposed to trying to

00:21:26.790 --> 00:21:28.830
interpret it as an HTML document.

00:21:31.440 --> 00:21:35.030
and finally see that
we return the response.

00:21:35.030 --> 00:21:37.990
So what we're going to do
is go ahead and build this.

00:21:39.760 --> 00:21:43.830
And assuming we haven't made any typos,
compile,

00:21:43.940 --> 00:21:46.610
and we're going to go ahead and run it.

00:21:49.020 --> 00:21:55.100
and if we could switch to machine four,
machine five, sorry.

00:21:55.360 --> 00:22:02.340
So if we bring up our browser now,
what I'm going to do is access that site,

00:22:02.340 --> 00:22:07.430
that application,
as if I'm a content subscriber,

00:22:07.710 --> 00:22:09.240
a syndication subscriber.

00:22:09.410 --> 00:22:13.700
So this is pretending I'm
looking for all the XML,

00:22:13.780 --> 00:22:18.650
the XML version of the article
listing of all the messages.

00:22:18.850 --> 00:22:21.240
So I have that bookmarked here.

00:22:22.150 --> 00:22:27.270
What we get now is produced by that
Direct Web Application with that

00:22:27.270 --> 00:22:32.810
little Direct Action Class add-in,
we now have an array of articles.

00:22:34.000 --> 00:22:40.610
In this case, three articles.

00:22:40.610 --> 00:22:40.610
You see our XML version up here.

00:22:40.610 --> 00:22:40.610
And each article has

00:22:41.760 --> 00:22:44.990
So, what we're going to do is we're
going to take a look at the web

00:22:44.990 --> 00:22:48.010
object applications inside it,
publish date, the text,

00:22:48.080 --> 00:22:50.860
and you'll notice that it
also has references to,

00:22:50.860 --> 00:22:55.880
in this case, because we encoded EOs,
it has relationships, in this case,

00:22:55.910 --> 00:22:56.040
to one.

00:22:56.210 --> 00:22:59.760
So, on the,
when we get to the building the server,

00:23:00.130 --> 00:23:04.430
sorry, the syndication client,
the subscriber, because we have two

00:23:04.430 --> 00:23:07.080
WebObjects applications,
we're going to take advantage of that,

00:23:07.410 --> 00:23:09.180
and what we're actually going
to get is EO generic records

00:23:09.180 --> 00:23:10.500
back on the other side.

00:23:10.660 --> 00:23:14.290
So we'll be able to do all of
our key value coding very easily.

00:23:16.130 --> 00:23:17.100
So we have that.

00:23:17.100 --> 00:23:21.600
Now what we want to do is build,
so if we switch back to machine four,

00:23:21.750 --> 00:23:25.270
now what we want to do
is build that syndication

00:23:26.040 --> 00:23:36.620
Client and add the decoding.

00:23:36.620 --> 00:23:36.620
So take this XML string that we
just saw and make objects out of it.

00:23:36.620 --> 00:23:36.620
What does that take?

00:23:39.020 --> 00:23:40.000
And so what we have is,
we have a little application

00:23:40.000 --> 00:23:43.590
that's really just designed
to kind of show news articles.

00:23:43.760 --> 00:23:45.590
And again,
the first thing we want to do is

00:23:45.740 --> 00:23:49.240
create an IVAR for the decoder,
just kind of have that

00:23:49.250 --> 00:23:50.500
around and reuse it.

00:23:50.630 --> 00:23:54.180
Creating a decoder or an encoder is a
little bit of a heavyweight operation.

00:23:54.310 --> 00:23:57.400
We don't want to do that
for every single request.

00:23:57.570 --> 00:24:02.510
And now what we want to do is create,
use that WebObjects as a client

00:24:02.600 --> 00:24:09.400
functionality that's been added,
and create a WoW HTTP connection object.

00:24:09.560 --> 00:24:18.700
And what this takes is a
host and a port number.

00:24:18.800 --> 00:24:21.990
And then we're going to go
through the process of sending

00:24:21.990 --> 00:24:23.560
a request over the line.

00:24:41.390 --> 00:24:41.390
So where we can start chanting faster,
faster, faster.

00:24:42.030 --> 00:24:46.370
So now what we're going to do is
take that HTTP connection that we

00:24:46.520 --> 00:24:51.900
have and we're actually going to send
a request through that connection.

00:24:52.020 --> 00:24:56.660
And the request we send is actually
going to be a WoeRequest object.

00:24:56.760 --> 00:25:00.250
So again, you get to use the same classes
you've been using before,

00:25:00.280 --> 00:25:03.990
the difference is you're using
them in the opposite manner that

00:25:03.990 --> 00:25:06.530
you have been accustomed to.

00:25:06.710 --> 00:25:09.830
In this case,
we actually create Will requests

00:25:09.830 --> 00:25:11.780
and get back Will responses.

00:25:12.100 --> 00:25:17.240
As opposed to the traditional role of
getting requests and making responses.

00:25:21.520 --> 00:25:25.160
And after we send that request,
what we want to do is actually,

00:25:25.420 --> 00:25:29.060
we have the request,
now what we want to do is pull the

00:25:29.060 --> 00:25:36.630
response out of that connection request.

00:25:38.890 --> 00:25:45.190
So we're going to read the
response into a response object.

00:25:46.050 --> 00:25:49.240
And again, do that lazy initialization.

00:25:49.370 --> 00:25:53.060
Since we haven't, we want to make sure we
actually have a decoder already,

00:25:53.300 --> 00:25:56.500
and if we don't, we need to create one.

00:26:03.440 --> 00:26:06.880
So at this point,
we have the XML document

00:26:07.510 --> 00:26:10.880
in a woe request,
a woe response.

00:26:11.990 --> 00:26:16.820
And we have a decoder,
so now we get to call that one method,

00:26:16.910 --> 00:26:21.900
decodeRootObject, and decodeRootObject,
given this NSData,

00:26:21.900 --> 00:26:25.900
will give us our objects back.

00:26:27.720 --> 00:26:30.240
In this particular case,
what we're getting back

00:26:30.240 --> 00:26:33.640
every time is an array,
an array of articles.

00:26:33.640 --> 00:26:36.020
It may be an empty array if
there were no new articles,

00:26:36.080 --> 00:26:39.880
but we're always going
to get back an array.

00:26:48.160 --> 00:26:53.900
So we decode it.

00:26:54.020 --> 00:26:56.100
And we have these new articles now.

00:26:56.230 --> 00:27:00.130
What we want to do is
simply add these articles to

00:27:01.190 --> 00:27:04.210
So, the very first time we
run the application,

00:27:04.290 --> 00:27:07.250
it goes out and fetches all the articles,
and then every other

00:27:07.250 --> 00:27:09.330
time it requests them,
if there are new ones,

00:27:09.330 --> 00:27:13.000
we'll simply add that to the list
of available articles we have.

00:27:13.060 --> 00:27:16.560
Now, there are a whole bunch of,
we made this very simple,

00:27:16.560 --> 00:27:20.790
we simplified the problem, and in fact,
we're going to ask for new

00:27:20.790 --> 00:27:24.300
articles on every request that
comes into the application.

00:27:24.300 --> 00:27:27.360
We're doing this pretty much
entirely from a demo perspective,

00:27:27.560 --> 00:27:30.920
because having a timer sitting there,
you know, we sit even longer than

00:27:30.920 --> 00:27:33.300
we have been watching,
waiting for Michael to type faster.

00:27:33.300 --> 00:27:35.300
Faster, faster, faster.

00:27:35.500 --> 00:27:36.300
Okay, so we're done.

00:27:36.300 --> 00:27:40.300
So, we're going to go ahead
and run this application.

00:27:40.300 --> 00:27:48.290
So, it's built,
and we're going to run it now.

00:27:51.470 --> 00:27:57.920
and what we're going to do
at this point is bring up

00:28:22.120 --> 00:28:22.120
So, we're going to split the screen,
so for the overflow room I apologize if

00:28:22.120 --> 00:28:22.120
it gets a little difficult to follow.

00:28:22.120 --> 00:28:22.120
What we're going to have is
on the screen to my left,

00:28:22.120 --> 00:28:22.120
your right,
we're going to have the servers,

00:28:22.120 --> 00:28:22.120
and we're going to have
both servers running there,

00:28:22.120 --> 00:28:22.120
and on the other screen we're
going to have the browser.

00:28:22.120 --> 00:28:22.120
So, if you want to switch so we
have both of them looking.

00:28:22.320 --> 00:28:28.600
Okay, so what I'm going to do is
simply access this site.

00:28:28.770 --> 00:28:32.180
So what we have here
is the three articles.

00:28:32.430 --> 00:28:35.410
So when we did that,
when I first accessed it,

00:28:35.840 --> 00:28:41.010
it went across to the subscriber,
asked the publisher,

00:28:41.010 --> 00:28:45.850
give me your articles,
and if you can highlight, Michael,

00:28:45.850 --> 00:28:46.510
the XML.

00:28:51.800 --> 00:28:52.100
Sorry, I got ahead of myself.

00:28:52.100 --> 00:28:52.430
We're not logging at this point.

00:28:52.440 --> 00:28:56.180
What I'm going to do now is,
well we got those three articles back.

00:28:56.300 --> 00:28:57.300
I asked for all the messages.

00:28:57.300 --> 00:28:59.790
There are currently three
messages in the system.

00:28:59.790 --> 00:29:03.800
So what we're going to do now
is add a message to the system.

00:29:03.810 --> 00:29:07.830
So I'm going to go back to the,
I'm going to go to the direct

00:29:07.960 --> 00:29:09.730
web version of the application.

00:29:09.800 --> 00:29:11.320
This is the publisher now.

00:29:11.870 --> 00:29:20.430
And I'm just going to
create a new article.

00:29:20.430 --> 00:29:20.430
So I'm going to create
a new article and say,

00:29:21.800 --> 00:29:28.900
[Transcript missing]

00:29:30.400 --> 00:29:36.900
[Transcript missing]

00:29:37.350 --> 00:29:41.200
Okay,
and the publication date for this one,

00:29:41.230 --> 00:29:44.200
we're going to make it May,
what's today's date?

00:29:44.850 --> 00:29:46.350
18th?

00:29:46.430 --> 00:29:49.300
May 18th, 2000.

00:29:49.310 --> 00:29:54.230
And this has to do with airports
and I'm the author here.

00:29:54.300 --> 00:29:57.300
So I'll go ahead and
I'm going to save it.

00:29:57.360 --> 00:30:00.080
It's going to go into the database,
but no syndication will

00:30:00.080 --> 00:30:01.260
happen immediately.

00:30:01.300 --> 00:30:05.300
Alright, so that article is saved.

00:30:05.300 --> 00:30:09.300
Now, what I'm going to do is I'm just
going to click on a link here.

00:30:09.300 --> 00:30:12.200
Any link will cause a
request to the application,

00:30:12.300 --> 00:30:16.180
which is going to cause, like I said,
every request that comes

00:30:16.180 --> 00:30:17.550
into the news site,

00:30:21.950 --> 00:30:23.760
So what we'll see is
when I click on this,

00:30:23.980 --> 00:30:28.900
we'll see the two send the
XML messages back and forth and then

00:30:28.900 --> 00:30:32.520
it'll be added to this page here.

00:30:32.660 --> 00:30:38.660
So when I click on this,
it goes across and what

00:30:38.660 --> 00:30:42.460
we see at the bottom,
what we see at the top is the

00:30:42.460 --> 00:30:45.140
actual XML that got created.

00:30:45.230 --> 00:30:48.740
Again,
that eogeneric record and at the bottom

00:30:48.740 --> 00:30:51.810
you see that we inserted one new article.

00:30:53.500 --> 00:31:06.250
So we've used the client capabilities
in our WebObjects application,

00:31:06.320 --> 00:31:07.510
HTTP connection, to send requests out,
get back XML content,

00:31:07.510 --> 00:31:07.740
and turn them into objects that
are rendered in our webpages.

00:31:07.740 --> 00:31:07.950
And on the publisher side,
we've gone to the database,

00:31:07.950 --> 00:31:08.150
taken our EOs, and encoded them in
XML and sent them out,

00:31:08.150 --> 00:31:08.400
in this case, based on a direct action.

00:31:08.740 --> 00:31:25.390
Clearly, there's lots of stuff.

00:31:29.760 --> 00:31:31.020
Clearly there's lots
of stuff you'd want to,

00:31:31.170 --> 00:31:34.090
you know, you'd want a polling mechanism,
you know, to do it on a timer,

00:31:34.090 --> 00:31:37.880
you'd want security between all this,
but these were really to highlight

00:31:37.920 --> 00:31:41.600
those APIs that you're going to want
to be familiar with to do these things.

00:31:41.600 --> 00:31:44.110
So thank you Michael,
and Michael will be back

00:31:44.110 --> 00:31:45.600
for a Q&A in a little bit.

00:31:45.600 --> 00:31:47.830
What I want to do now is
switch back to the slides,

00:31:47.830 --> 00:31:53.490
and that's using WoW XML Coder and
WoW XML Decoder to do that XML.

00:31:53.610 --> 00:31:58.230
But there is another way, and it may be,
so how many people have actually used

00:31:58.230 --> 00:32:00.600
WoW XML Coder or Decoder out there?

00:32:00.600 --> 00:32:01.600
A couple.

00:32:01.600 --> 00:32:05.700
Alright, so how many people have done
XML with WebObjects basically

00:32:05.700 --> 00:32:07.290
using the component model?

00:32:07.650 --> 00:32:09.580
Just building a component
and generating XML?

00:32:09.590 --> 00:32:11.520
Okay, we have a couple.

00:32:11.610 --> 00:32:14.420
So a whole lot of hands went
up earlier that they were

00:32:14.720 --> 00:32:16.510
doing WebObjects and XML stuff.

00:32:16.660 --> 00:32:18.600
I'm missing something.

00:32:18.600 --> 00:32:20.790
What else have you used?

00:32:23.750 --> 00:32:25.780
Object space DXML?

00:32:26.370 --> 00:32:27.700
Okay.

00:32:27.790 --> 00:32:32.460
So you've just taken your objects and
created XML using other libraries.

00:32:36.940 --> 00:32:40.240
Okay,
so using other things to create your XML.

00:32:40.390 --> 00:32:44.220
Okay, well,
besides the WoW XML coder and decoder,

00:32:44.270 --> 00:32:45.940
you can use the component model.

00:32:46.060 --> 00:32:50.210
The component model basically says,
to date we've been using,

00:32:50.540 --> 00:32:54.940
Components as part of pages
to generate HTML documents.

00:32:55.090 --> 00:32:57.560
These documents happen to be tagged.

00:32:57.720 --> 00:33:01.500
So why can't we just make
these documents of an XML type?

00:33:01.620 --> 00:33:05.800
And the answer is you can easily do that,
and we're going to have a demo of an

00:33:06.090 --> 00:33:08.660
example of that coming up real soon.

00:33:08.770 --> 00:33:12.330
But WebObjects itself
actually uses this method.

00:33:12.410 --> 00:33:13.940
My understanding,
just to make sure I'm right,

00:33:13.940 --> 00:33:18.640
is the Direct-to-Java client actually
uses this to create those XMLs,

00:33:18.760 --> 00:33:22.210
part of the XML that goes out
to the Java client application.

00:33:22.340 --> 00:33:25.000
There are components that
are generating this XML.

00:33:25.130 --> 00:33:28.390
So you can actually use
WebObjects Builder to put XML,

00:33:28.390 --> 00:33:31.740
do the repetitions,
simply inserting the tags

00:33:32.130 --> 00:33:34.800
using Woe Generic Container,
Woe Generic Element.

00:33:34.900 --> 00:33:40.100
Or you can also use a new class,
a new component that was added in 4.5,

00:33:40.100 --> 00:33:43.160
I believe, called Woe XML Node.

00:33:43.230 --> 00:33:45.840
It's in the Woe Extensions Framework.

00:33:45.960 --> 00:33:48.610
And it really is probably
the easiest way to learn.

00:33:48.860 --> 00:33:53.940
Just, you want to create an XML document,
you can create in Builder,

00:33:54.080 --> 00:33:57.960
connect up some generic elements,
generic containers, bind them to things,

00:33:58.130 --> 00:34:04.150
and you should be able to create
XML very quickly without understanding,

00:34:04.300 --> 00:34:24.500
[Transcript missing]

00:34:25.120 --> 00:34:29.600
So what I'll do now is
bring on Ron Lusang,

00:34:29.680 --> 00:34:33.790
who you saw earlier today doing SMILE.

00:34:33.800 --> 00:34:37.000
He was really focusing
there on the client side,

00:34:37.480 --> 00:34:41.500
using SMILE to make
QuickTime your browser,

00:34:41.500 --> 00:34:44.830
or not use your browser,
and have QuickTime be your UI.

00:34:45.230 --> 00:34:49.410
What Ron's going to talk about now is
how he did that using Generic Element,

00:34:49.490 --> 00:34:52.000
Generic Container, and WoW XML there.

00:34:52.110 --> 00:34:53.000
Thanks, Ron.

00:34:53.000 --> 00:34:55.220
Ron Lusang: Okay,
so how many of you were here for

00:34:55.220 --> 00:34:57.000
the session earlier this morning?

00:34:57.000 --> 00:34:59.000
Whoa, hello.

00:34:59.000 --> 00:35:00.910
Okay, so did you guys like that?

00:35:01.000 --> 00:35:02.000
Yeah.

00:35:02.000 --> 00:35:03.000
Ron Lusang: Okay.

00:35:03.000 --> 00:35:03.990
Thank you.

00:35:06.470 --> 00:35:10.650
So now you're probably wondering though,
so exactly how did I build the framework?

00:35:10.750 --> 00:35:12.280
What does it really look like?

00:35:12.280 --> 00:35:13.820
Okay.

00:35:13.820 --> 00:35:16.220
Here's the source for the framework.

00:35:16.250 --> 00:35:19.430
I've got a whole bunch of Woe
components and they pretty much

00:35:19.430 --> 00:35:26.100
map directly to all of the elements
that are in the SMILE spec.

00:35:26.200 --> 00:35:29.240
Each of the elements like the document,
the media objects, everything,

00:35:29.240 --> 00:35:30.830
has its own component.

00:35:31.110 --> 00:35:34.540
And I even have a sort of an
inheritance model here that all

00:35:34.540 --> 00:35:37.400
inherits from Smile Element.

00:35:37.500 --> 00:35:39.990
Simple thing.

00:35:40.420 --> 00:35:42.610
As Tim had said,
you want to remember though

00:35:42.620 --> 00:35:43.670
to set the MIME type.

00:35:43.960 --> 00:35:46.240
What I do in my framework though
is for the SMILE document,

00:35:46.290 --> 00:35:48.990
I actually set the MIME type
for application SMILE,

00:35:49.130 --> 00:35:54.250
since this is SMILE specifically
versus generic XML.

00:35:54.790 --> 00:36:00.040
Each of these elements has
a couple of things in them.

00:36:00.230 --> 00:36:03.760
The main, the very important one,
the one that you guys

00:36:03.760 --> 00:36:08.700
all saw this morning,
is the smile media object.

00:36:08.700 --> 00:36:16.050
I've got some logic in here for actually
generating the source and the href tag,

00:36:16.520 --> 00:36:22.150
the href attribute that
goes along with the tag.

00:36:22.150 --> 00:36:22.150
A whole lot of other

00:36:22.200 --> 00:36:30.900
[Transcript missing]

00:36:31.220 --> 00:36:35.770
All of these, though,
are generated from Web components,

00:36:35.880 --> 00:36:42.290
and most of them only contain...

00:36:43.160 --> 00:36:44.870
Most of them only contain this.

00:36:44.950 --> 00:36:46.860
This is all that I did.

00:36:46.860 --> 00:36:51.300
I've got component content
so that you can nest things,

00:36:51.300 --> 00:36:54.290
and then the actual media object that

00:37:16.510 --> 00:37:16.510
So, by doing this,
you can lay them out in WAB the

00:37:16.510 --> 00:37:16.510
way you would lay out HTML elements
that you normally would.

00:37:16.510 --> 00:37:16.510
So, to see an example of that,
here's the application that

00:37:16.510 --> 00:37:16.510
I showed earlier and the video page.

00:37:17.390 --> 00:37:21.860
This is actually what it looks like.

00:37:21.860 --> 00:37:28.620
Beautiful smile elements that you
can bind all of your logic to.

00:37:28.930 --> 00:37:32.810
You can set the MIME type for any
of the media that you're sending

00:37:33.190 --> 00:37:38.330
out for the SMILE media objects.

00:37:39.630 --> 00:37:44.780
So one thing with all
of these will components

00:37:45.540 --> 00:37:49.030
WebObjects really wants to
know what bindings are going

00:37:49.030 --> 00:37:51.930
to be in there beforehand.

00:37:52.010 --> 00:37:55.520
So that's why I have all these very,
this very long list of

00:37:55.540 --> 00:37:57.810
variables in some of my objects.

00:37:59.020 --> 00:38:06.190
Now, what if you've got some things that
you don't really know ahead of time?

00:38:06.500 --> 00:38:08.980
In my framework,
I don't really know ahead of time

00:38:08.990 --> 00:38:13.200
what you people who would build
applications using this would use

00:38:13.200 --> 00:38:15.980
as attributes in your smile tags.

00:38:16.110 --> 00:38:19.190
I left one thing in here.

00:38:20.740 --> 00:38:22.510
A other tag string.

00:38:22.520 --> 00:38:28.160
This lets me add random things
to any of the tags that get

00:38:28.340 --> 00:38:30.600
generated for my smile documents.

00:38:30.600 --> 00:38:35.480
In my application here,
there are some extensions to smile

00:38:36.090 --> 00:38:38.550
that were added by QuickTime.

00:38:38.550 --> 00:38:42.680
A QuickTime player can
understand a couple more tags,

00:38:42.680 --> 00:38:43.270
and one of them

00:38:44.950 --> 00:38:51.460
is the Qt autoplay, Qt time slider,
and the Qt next values.

00:38:51.460 --> 00:39:02.490
If I can run this on a
different port real quick.

00:39:08.100 --> 00:39:16.000
[Transcript missing]

00:39:22.860 --> 00:39:34.190
So, we've got... So we can go and take
a look at the actual source here.

00:39:39.420 --> 00:39:45.540
Let's choose... actually,
why don't we Sherlock for it?

00:39:45.540 --> 00:39:45.540
Let's do that.

00:39:46.330 --> 00:39:47.910
That's another thing.

00:39:48.330 --> 00:39:51.190
So, Sherlock.

00:39:51.220 --> 00:39:52.200
Okay.

00:39:52.200 --> 00:39:53.100
Use of XML here.

00:39:53.100 --> 00:39:55.490
Still will components on my app side.

00:39:55.610 --> 00:39:58.970
I've described what my application
is going to send back to

00:39:59.010 --> 00:40:03.240
Sherlock once it's found something,
how it's going to be formatted,

00:40:03.420 --> 00:40:06.800
how all the results are formatted.

00:40:06.800 --> 00:40:06.800
It's formatted

00:40:07.100 --> 00:40:27.800
[Transcript missing]

00:40:31.140 --> 00:40:35.150
We'll take a look at
all the songs in my app.

00:40:35.290 --> 00:40:38.200
So we'll try lock songs.

00:40:40.300 --> 00:40:52.500
[Transcript missing]

00:40:59.860 --> 00:41:07.150
Now I've got a direct action in my
app that will give me pop rock music.

00:41:13.000 --> 00:41:22.700
[Transcript missing]

00:41:24.690 --> 00:41:26.090
Oh, no wonder.

00:41:26.210 --> 00:41:28.590
Seems to be something using
my OpenBase connection.

00:41:28.720 --> 00:41:30.600
Alright.

00:41:31.700 --> 00:41:35.850
The main thing I wanted to show you
though is what it looks like once

00:41:35.850 --> 00:41:41.580
we've actually generated all of the,
once we've bound all of the

00:41:41.580 --> 00:41:45.160
tags to values in our logic.

00:41:45.830 --> 00:41:50.450
It looks basically like this,
except all the WebObjects

00:41:50.450 --> 00:41:52.180
tags are changed.

00:41:52.180 --> 00:41:52.800
You've seen this before.

00:41:52.800 --> 00:41:55.790
It looks just like your HTML would.

00:41:55.830 --> 00:41:56.790
That's kind of the beauty of it, right?

00:41:56.790 --> 00:42:00.880
You can still use Wob to generate
something that isn't really what you're

00:42:00.930 --> 00:42:02.790
used to generating with WebObjects.

00:42:03.100 --> 00:42:05.750
Instead of HTML, you're generating XML.

00:42:05.790 --> 00:42:09.800
You can use stuff beyond just
component content and WoE components.

00:42:09.800 --> 00:42:12.800
You can use the WoE XML node.

00:42:12.960 --> 00:42:15.940
My framework for generating

00:42:17.170 --> 00:42:22.100
I've got a subproject
here called Search Me.

00:42:22.100 --> 00:42:26.050
This is what the tags look like in here.

00:42:26.860 --> 00:42:29.160
You can see here I've got WoW XML node.

00:42:29.160 --> 00:42:31.510
And the cool thing,
so I've mixed WoW XML node

00:42:31.520 --> 00:42:36.400
with WoW repetitions,
WoW strings, and WoW links,

00:42:36.400 --> 00:42:38.190
WoW hyperlink.

00:42:39.180 --> 00:42:40.090
This is another advantage.

00:42:40.150 --> 00:42:44.770
So instead of having to go through
and concentrate on using the mapping

00:42:44.860 --> 00:42:49.360
coder and generating all of the
extra stuff that you would need

00:42:49.430 --> 00:42:53.230
to talk to Sherlock or to QuickTime,
you just build it in Wob and

00:42:53.230 --> 00:42:55.090
it all kind of just works.

00:42:55.220 --> 00:42:58.230
It's kind of the nice thing about it.

00:42:58.670 --> 00:43:00.900
I suggest that everyone try this out.

00:43:01.030 --> 00:43:03.780
It's a beautiful thing.

00:43:06.800 --> 00:43:08.800
Thanks, Ron.

00:43:08.820 --> 00:43:10.800
So you have two opportunities.

00:43:10.800 --> 00:43:13.630
You can use WoXML Coder/Decoder.

00:43:13.870 --> 00:43:16.250
If you're going to be vending
and consuming and trying

00:43:16.320 --> 00:43:19.690
to go both directions,
perhaps it's worth learning that.

00:43:19.930 --> 00:43:24.440
If you just want to be vending
XML out to other sites or other

00:43:24.440 --> 00:43:29.320
users or other applications,
then the component model makes a lot

00:43:29.510 --> 00:43:33.560
of sense because it's a really natural
fit for what you've probably been doing

00:43:33.560 --> 00:43:35.780
with generating HTML applications.

00:43:35.800 --> 00:43:39.990
So WebObjects and XML, in summary,
it can be both a vendor

00:43:39.990 --> 00:43:41.800
and a consumer of XML.

00:43:41.800 --> 00:43:46.730
We've added facilities to deal with
the client side of an HTTP connection,

00:43:46.900 --> 00:43:49.800
as well as both consuming
and vending the XML itself.

00:43:49.800 --> 00:43:55.550
Easy encoding and decoding,
encoding component model or WoXML Coder,

00:43:55.640 --> 00:43:59.790
decoding WoXML Decoder,
as well as other APIs.

00:43:59.880 --> 00:44:04.800
Mapping files if you need
DTD adherence both in and out.

00:44:04.870 --> 00:44:07.970
And it's actually used within
the WebObjects application,

00:44:08.150 --> 00:44:11.090
WebObjects product itself in
a number of different ways,

00:44:11.150 --> 00:44:13.730
Direct to Java Client
being just one of them.

00:44:13.800 --> 00:44:16.640
And it is used today
by the number of hands,

00:44:16.640 --> 00:44:19.800
by a number of developers
out there already.

00:44:19.800 --> 00:44:25.200
So I encourage you to go and
start to create XML stuff

00:44:25.790 --> 00:44:28.800
and vend it to the world.

00:44:28.800 --> 00:44:32.760
So with that,
I'd like to bring Michael and

00:44:32.760 --> 00:44:33.800
Ron back up to answer any questions.

00:44:33.800 --> 00:44:38.800
And Ernie, any questions that you might
have about XML WebObjects?

00:44:38.800 --> 00:44:40.620
So a big hand for Tim and the gang.