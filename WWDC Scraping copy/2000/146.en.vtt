WEBVTT

00:00:07.600 --> 00:00:08.540
Good morning everyone.

00:00:08.660 --> 00:00:14.380
Please welcome John Galinzi,
User Experience Technology Manager.

00:00:20.570 --> 00:00:22.180
Sorry.

00:00:22.180 --> 00:00:22.740
Well, good morning.

00:00:22.740 --> 00:00:26.830
It's a great day and I've certainly
realized that I haven't had nearly

00:00:26.830 --> 00:00:29.500
enough sleep this week and that's
probably true for many of you.

00:00:29.500 --> 00:00:33.510
But this is session 146 and
it's High Level Toolbox:

00:00:33.510 --> 00:00:34.500
DataBrowser.

00:00:34.500 --> 00:00:39.590
You know, as part of our renewed
interest in user experience at

00:00:39.590 --> 00:00:44.070
Apple with Aqua and Mac OS X,
we've been sort of stressing this

00:00:44.070 --> 00:00:47.300
message that if you want to have
great user experience and you want

00:00:47.300 --> 00:00:51.460
to deliver the Aqua look and feel,
you need to adopt system control.

00:00:51.510 --> 00:00:54.760
That sort of has come through this year
and it's come through in past years.

00:00:54.780 --> 00:00:57.500
And it's particularly true with X.

00:00:57.760 --> 00:01:01.210
And DataBrowser is one of
those things coming out of

00:01:01.210 --> 00:01:04.500
Apple that's sort of a hybrid,
high level,

00:01:04.580 --> 00:01:09.500
powerful new type of control and we're
going to talk about that this morning.

00:01:09.500 --> 00:01:13.820
But DataBrowser is going to allow you
to deliver exactly the user experience

00:01:13.820 --> 00:01:16.380
that we are delivering in lists,
in Finder,

00:01:16.380 --> 00:01:18.500
and in other components of the OS.

00:01:18.500 --> 00:01:20.500
And it's going to do the right
thing on 9 under Platinum.

00:01:20.500 --> 00:01:23.500
It's going to do the right
thing on 10 under Aqua.

00:01:23.500 --> 00:01:27.390
So even though it's early in the morning,
you need to be paying close attention to

00:01:27.390 --> 00:01:30.000
what's going on here because DataBrowser,
I think,

00:01:30.050 --> 00:01:33.780
is going to allow you to deliver a
really awesome and very consistent user

00:01:33.780 --> 00:01:36.500
experience within your application.

00:01:36.530 --> 00:01:42.650
So to get you the info on this stuff,
I'd like to welcome Jim Rodden,

00:01:42.650 --> 00:01:47.500
who's the tech lead for the list
manager replacement called DataBrowser.

00:01:47.500 --> 00:01:49.260
Thanks.

00:01:52.870 --> 00:01:53.800
Good morning.

00:01:53.800 --> 00:01:54.800
Good morning.

00:01:54.830 --> 00:01:56.830
I want to make sure you're all
awake and in the right room,

00:01:56.830 --> 00:01:59.360
so I want to ask you a couple
questions before I get started.

00:01:59.360 --> 00:02:01.260
Now stand up instead of show of hands.

00:02:01.260 --> 00:02:04.280
How many of you have ever
used the list manager before?

00:02:04.280 --> 00:02:07.180
Now stand up, stand up, come on,
this is audience participation.

00:02:07.680 --> 00:02:08.780
Okay.

00:02:08.780 --> 00:02:11.800
Now how many of you don't use it anymore?

00:02:13.060 --> 00:02:14.740
Okay, that's a fair number.

00:02:14.840 --> 00:02:17.110
Now I'm sure the reason for
that is pretty consistent.

00:02:17.120 --> 00:02:21.060
It kind of doesn't present a
really sophisticated interface,

00:02:21.170 --> 00:02:24.390
and it's not very robust,
and it has some serious limitations.

00:02:24.460 --> 00:02:27.700
I'm sure you're using other
solutions like power plants,

00:02:27.700 --> 00:02:29.810
table views, and things like that.

00:02:30.130 --> 00:02:34.250
DataBrowser is going to take care
of all of that stuff for you and

00:02:34.250 --> 00:02:37.320
present a new user interface,
well, an interface that's been

00:02:37.320 --> 00:02:40.770
around for a while but hasn't
been accessible to developers.

00:02:41.360 --> 00:02:43.530
So with that,
here's what I'm going to cover today.

00:02:43.540 --> 00:02:46.130
Basically, what is the DataBrowser thing?

00:02:46.150 --> 00:02:49.910
Go over briefly the programming
model that it uses and how you can

00:02:49.960 --> 00:02:53.940
incorporate that into your code and
how it will help you factor your code.

00:02:53.940 --> 00:02:58.520
And then some simple usage
examples get into the coding.

00:02:58.520 --> 00:03:00.440
What is this DataBrowser thing?

00:03:00.440 --> 00:03:02.090
It's a control.

00:03:03.270 --> 00:03:07.610
I want to emphasize that because
it's actually pretty fundamental.

00:03:07.660 --> 00:03:11.130
It acts just like a push button
control or a pop-up menu control

00:03:11.680 --> 00:03:14.300
or any other control that's
been around for a long time.

00:03:14.390 --> 00:03:19.390
You can send it size control messages,
move control messages, etc.

00:03:21.440 --> 00:03:25.410
It's a completely self-contained
presentation of discrete elements.

00:03:25.550 --> 00:03:29.150
So anytime you're presenting, say,
a set of file system objects

00:03:29.680 --> 00:03:34.390
or database objects or
whatever your application does,

00:03:34.490 --> 00:03:37.290
you should seriously consider
DataBrowser as a solution for

00:03:37.390 --> 00:03:38.990
presenting that information.

00:03:40.110 --> 00:03:42.100
It is not the List Manager.

00:03:42.120 --> 00:03:45.380
List Manager is effectively obsolete now.

00:03:45.700 --> 00:03:46.460
It's still in Carbon.

00:03:46.460 --> 00:03:50.660
It's not going away because it's too
important for backward compatibility.

00:03:50.700 --> 00:03:53.910
But the DataBrowser is simply much, much,
much better.

00:03:53.930 --> 00:03:57.140
It does what everyone wishes the
List Manager had done all along,

00:03:57.140 --> 00:03:59.190
and it does it in a much better way.

00:03:59.200 --> 00:04:01.920
It takes a totally new programming model.

00:04:02.120 --> 00:04:03.290
It does not store your data.

00:04:03.440 --> 00:04:05.950
That was one of the serious limitations
of the List Manager because it

00:04:05.950 --> 00:04:08.720
tried to make assumptions about
your data and how it should be stored.

00:04:08.760 --> 00:04:12.460
And invariably, those assumptions were
wrong in many cases.

00:04:12.510 --> 00:04:14.930
DataBrowser only stores
references to your data.

00:04:15.030 --> 00:04:16.630
So you can cache your data.

00:04:16.670 --> 00:04:21.330
You can store your data out on a
network or file mapped or whatever's

00:04:21.420 --> 00:04:23.280
appropriate for your application.

00:04:23.320 --> 00:04:25.400
And the DataBrowser only asks
for the information that it

00:04:25.400 --> 00:04:29.240
needs to present those elements
that are currently on screen.

00:04:30.810 --> 00:04:32.600
and its standard equipment.

00:04:32.600 --> 00:04:36.140
It is a very fundamental part of PEN.

00:04:36.480 --> 00:04:37.290
The Finder uses it.

00:04:37.330 --> 00:04:40.290
The Finder list view is a DataBrowser.

00:04:42.030 --> 00:04:46.050
And it's also in CarbonLib on 9.

00:04:46.180 --> 00:04:49.190
So you can rely on it to
present the standard list

00:04:49.380 --> 00:04:51.680
style interface to your users.

00:04:51.900 --> 00:04:54.310
You don't have to reinvent
this wheel anymore.

00:04:56.290 --> 00:04:59.880
And because it's part of the Finder,
and Sherlock, Keychain Access,

00:04:59.980 --> 00:05:02.840
and many other system components,
you can rely on the fact

00:05:03.120 --> 00:05:08.550
that it is very robust,
very fast, and very high performance.

00:05:09.310 --> 00:05:11.960
And now with that,
Johnathon is going to give a quick

00:05:11.960 --> 00:05:16.040
demo of exactly what it does,
so you have a visual image.

00:05:16.110 --> 00:05:16.960
Thanks, Jim.

00:05:17.080 --> 00:05:20.360
So here we have a sample
application with DataBrowser.

00:05:20.450 --> 00:05:23.750
The DataBrowser control is actually
everything in this window that you see

00:05:24.210 --> 00:05:26.320
that is not the window frame itself.

00:05:26.420 --> 00:05:31.080
You'll notice it looks
exactly like the Finder.

00:05:31.080 --> 00:05:31.080
No big...

00:05:31.420 --> 00:05:34.470
It's not an uncommon view.

00:05:34.470 --> 00:05:36.650
And we have some sample
data showing here.

00:05:36.720 --> 00:05:42.620
So DataBrowser does everything
that the Finder does.

00:05:42.620 --> 00:05:42.620
You can have

00:05:42.860 --> 00:05:53.800
Disclosure Triangles,
so you can show more data,

00:05:53.800 --> 00:05:53.800
hierarchical data.

00:05:53.800 --> 00:05:53.800
You can do column resizing.

00:05:53.800 --> 00:05:53.800
You can do column reordering.

00:05:54.140 --> 00:06:01.100
DataBrowser also supports contextual
menus and it supports drag and drop,

00:06:01.260 --> 00:06:03.840
all internally.

00:06:04.140 --> 00:06:09.240
DataBrowser also supports
several native data types:

00:06:09.240 --> 00:06:12.960
checkboxes, icon and text, text only.

00:06:12.980 --> 00:06:15.100
It also supports icon only,
but we don't have any here.

00:06:15.100 --> 00:06:18.320
It supports date and time,
supports relevance ranking,

00:06:18.370 --> 00:06:20.280
and it supports pop-up menus.

00:06:20.560 --> 00:06:25.050
One of the nice things since DataBrowser
has native data types is that when you

00:06:25.050 --> 00:06:30.220
do things like resize date and time,
the date and time format can grow

00:06:30.220 --> 00:06:33.160
to match the size of the column.

00:06:33.220 --> 00:06:37.300
DataBrowser not only does list view,
but it also does column view.

00:06:37.370 --> 00:06:39.860
And in this case,
it's something new to Mac OS 9,

00:06:39.990 --> 00:06:42.200
but it's not new to Mac OS X.

00:06:42.270 --> 00:06:46.190
So this presents a column view
that is standard in Mac OS X.

00:06:46.260 --> 00:06:50.010
You can see that it is good for
displaying hierarchical data.

00:06:50.200 --> 00:06:54.720
You get automatic traversal of aliases.

00:06:54.800 --> 00:06:58.440
And also, when you click on an end node,
you get a custom preview pane.

00:06:58.570 --> 00:07:02.220
The content of this custom preview
pane is entirely up--the drawing

00:07:02.220 --> 00:07:02.220
of it is entirely up to you.

00:07:02.220 --> 00:07:06.590
However, you do receive events,
so you can have something

00:07:06.590 --> 00:07:08.320
like a push button.

00:07:08.470 --> 00:07:14.900
And even though the control is taking
up the entirety of this window,

00:07:14.900 --> 00:07:18.080
you do have certain control over the--

00:07:18.400 --> 00:07:40.200
[Transcript missing]

00:07:42.890 --> 00:07:43.750
Can we get the slides back?

00:07:43.800 --> 00:07:44.490
Thanks.

00:07:44.550 --> 00:07:45.740
Alright, thank you, Jonathan.

00:07:45.800 --> 00:07:48.720
One thing I'd like to point out,
that the code specific to DataBrowser

00:07:48.870 --> 00:07:51.040
in that sample app is very small.

00:07:51.130 --> 00:07:54.340
It's on the order of 50 lines
to get the bare minimum.

00:07:54.400 --> 00:07:56.340
Now that demonstration
does quite a bit more.

00:07:56.560 --> 00:08:00.780
It actually puts information
in the drag and drops and...

00:08:01.110 --> 00:08:02.480
Handles some of the
contextual menu stuff,

00:08:02.560 --> 00:08:04.110
so it's a little bit
bigger than a simple app.

00:08:04.200 --> 00:08:07.450
It's maybe 100 or so lines,
but very little.

00:08:07.510 --> 00:08:11.270
A lot less than it would take to do
the same thing with List Manager or

00:08:11.270 --> 00:08:14.840
any power plant type table view or
any of the other solutions out there.

00:08:15.080 --> 00:08:19.400
And it insulates you from the
details of the presentation.

00:08:20.600 --> 00:08:23.230
So just to recap,
here's a fairly exhaustive list of the

00:08:23.260 --> 00:08:25.760
features that you get mostly for free.

00:08:25.790 --> 00:08:26.930
I mean,
you have to do a little bit of work.

00:08:27.040 --> 00:08:29.140
Some of them you have to
turn on some bit flags,

00:08:29.240 --> 00:08:34.310
set some accessors,
and provide some routines of your own to,

00:08:34.340 --> 00:08:36.900
for instance, like contextual menu,
you have to provide the menu

00:08:36.960 --> 00:08:39.750
to be displayed and you have
to handle the response to it.

00:08:39.920 --> 00:08:41.360
But that's pretty straightforward stuff.

00:08:41.360 --> 00:08:45.120
Some key points:
It's designed to hold a lot of items.

00:08:45.350 --> 00:08:47.360
2 to the 32.

00:08:47.570 --> 00:08:48.990
These are 32-bit references.

00:08:49.290 --> 00:08:51.430
Because the finder uses it,
the finder has to display the

00:08:51.430 --> 00:08:53.790
contents of networks and file systems.

00:08:53.790 --> 00:08:55.190
Tens of thousands of items.

00:08:55.430 --> 00:08:56.500
That's what this is designed for.

00:08:56.500 --> 00:09:01.490
So no more 32K data limit
or anything like that.

00:09:02.670 --> 00:09:05.050
And again,
it does a lot of the work for you.

00:09:05.140 --> 00:09:07.840
It has several native display types.

00:09:07.900 --> 00:09:11.500
The idea is you provide the data,
the raw text, the raw icon.

00:09:11.570 --> 00:09:13.990
DataBrowser takes care of the formatting.

00:09:14.770 --> 00:09:19.640
And that list there is not
complete for the native types,

00:09:19.670 --> 00:09:20.960
but it's extensible.

00:09:21.020 --> 00:09:25.180
If there's a display type that you want,
that you think it should support,

00:09:25.180 --> 00:09:27.300
let us know and we'll
see about adding it.

00:09:28.100 --> 00:09:31.150
Also supports custom content,
so if the view styles there

00:09:31.470 --> 00:09:34.400
are not sufficient for you,
you can add your own content,

00:09:34.540 --> 00:09:37.590
have more complex
information in the cells.

00:09:38.120 --> 00:09:40.200
And it'll store off the user state.

00:09:40.200 --> 00:09:42.980
So as the user resizes
columns and reorders columns,

00:09:43.020 --> 00:09:46.040
for instance, you don't have to record
that all yourself.

00:09:46.150 --> 00:09:48.760
There's a call to ask the DataBrowser,
"What is that state?"

00:09:48.760 --> 00:09:49.470
It'll flatten it out.

00:09:49.580 --> 00:09:52.070
You can store it off in a pref
file and load it back in next

00:09:52.260 --> 00:09:53.870
time your application is run.

00:09:55.390 --> 00:09:57.070
Go into detail.

00:09:57.070 --> 00:09:58.450
Again, it's not just for Finder anymore.

00:09:58.580 --> 00:10:00.820
This is a screenshot from the 10 Finder.

00:10:01.050 --> 00:10:02.970
That is a DataBrowser.

00:10:04.750 --> 00:10:08.390
Some additional features that it
supports that are not necessarily used

00:10:08.390 --> 00:10:12.650
by the Finder are variable height rows,
so you can have individual items

00:10:12.650 --> 00:10:16.250
have their own unique row height
and it tracks with the item.

00:10:16.250 --> 00:10:18.500
It is not table index based.

00:10:18.610 --> 00:10:22.120
So as you resort or you add items,
that item stays that

00:10:22.570 --> 00:10:24.500
height that you set it to.

00:10:25.810 --> 00:10:28.450
It'll take care of
right-to-left support for you.

00:10:28.450 --> 00:10:30.890
So, for instance,
it doesn't at the moment,

00:10:31.030 --> 00:10:34.430
but at some point in the future,
we may want to automatically invert the

00:10:34.580 --> 00:10:36.410
column ordering on right-to-left systems.

00:10:36.560 --> 00:10:37.530
You don't have to worry about that.

00:10:37.600 --> 00:10:39.000
It'll happen for free.

00:10:39.130 --> 00:10:42.910
And because everyone's using it,
it'll happen across the system.

00:10:43.500 --> 00:10:44.800
Hierarchicalness is completely optional.

00:10:44.800 --> 00:10:47.560
If you want to present a
flat file or flat list,

00:10:47.660 --> 00:10:47.990
you can.

00:10:47.990 --> 00:10:51.470
You just don't turn on
the hierarchicalness.

00:10:51.470 --> 00:10:53.890
And you can have it in
whatever column you want.

00:10:55.460 --> 00:10:58.230
There's two different highlight styles.

00:10:58.240 --> 00:11:00.950
There's the traditional finder
style where it just highlights

00:11:00.950 --> 00:11:02.540
the bare minimum around the text.

00:11:02.540 --> 00:11:05.750
Or you can have the band selection,
like say in the chooser.

00:11:05.820 --> 00:11:10.370
And you can use whatever's
appropriate for your interface.

00:11:10.870 --> 00:11:14.080
Under Platinum,
it supports different theme backgrounds.

00:11:14.080 --> 00:11:19.200
So the default is the Finder style
with the light gray background and

00:11:19.200 --> 00:11:21.240
the darker gray for the sort column.

00:11:21.310 --> 00:11:25.900
But it also supports the white style
background like you find in the chooser.

00:11:25.970 --> 00:11:28.560
And you can mix and match that
with the highlight style so you can

00:11:28.560 --> 00:11:30.070
customize the look a little bit.

00:11:30.180 --> 00:11:33.160
Under Aqua, there really only is one
theme background style,

00:11:33.160 --> 00:11:35.440
white, so it doesn't really apply there.

00:11:35.500 --> 00:11:37.740
But the API works just the same.

00:11:37.860 --> 00:11:40.550
So you can call the API to turn
off the gray background and it

00:11:40.550 --> 00:11:42.490
doesn't make any difference on Aqua.

00:11:42.580 --> 00:11:44.680
Just a no-wop, basically.

00:11:44.730 --> 00:11:47.520
And one thing that is coming
from Aqua back to Platinum is

00:11:47.520 --> 00:11:49.280
the per column sort ordering.

00:11:49.300 --> 00:11:52.740
This is something that a lot of
the third party implementations of

00:11:52.740 --> 00:11:54.900
this style of interface have done.

00:11:54.960 --> 00:11:56.860
Where instead of having
one sort ordering,

00:11:56.860 --> 00:11:59.680
ascending, descending,
that applies regardless of

00:11:59.680 --> 00:12:02.580
what column is the sort column,
it's tracked per column.

00:12:02.580 --> 00:12:04.580
So you can have the
first column ascending,

00:12:04.690 --> 00:12:07.180
second column descending,
and as you switch back and forth,

00:12:07.250 --> 00:12:10.500
it remembers those sort orderings.

00:12:14.000 --> 00:12:16.290
Here's an example of the
list view under Platinum,

00:12:16.420 --> 00:12:17.940
or the column view, excuse me.

00:12:17.940 --> 00:12:19.850
Column view supports
some additional features,

00:12:20.090 --> 00:12:21.940
the most prominent one
being alias traversal,

00:12:22.330 --> 00:12:26.910
because the column view is designed
for navigating through a hierarchy

00:12:28.100 --> 00:12:40.600
[Transcript missing]

00:12:40.960 --> 00:12:41.600
And it's smart about it.

00:12:41.670 --> 00:12:45.710
It doesn't ask for more data,
it just already has that information,

00:12:45.710 --> 00:12:49.980
or if it already has that container open,
it just replicates it.

00:12:50.470 --> 00:12:51.990
It supports custom preview.

00:12:52.080 --> 00:12:55.620
So for instance, in the Finder,
how it does the QuickTime preview or

00:12:55.840 --> 00:12:59.630
the picture preview in the last column,
that's supported.

00:12:59.770 --> 00:13:02.440
Of course, you have to provide the code
that actually renders in there

00:13:02.500 --> 00:13:03.800
and does the tracking in there.

00:13:03.880 --> 00:13:08.190
But it's completely-- that
screen space is up to you.

00:13:08.460 --> 00:13:11.110
Again, you can have variable heights.

00:13:11.130 --> 00:13:12.920
The two highlight styles
work there as well.

00:13:13.000 --> 00:13:16.130
This defaults to band selection,
but you can turn that off and

00:13:16.370 --> 00:13:17.900
have the minimal highlight style.

00:13:18.010 --> 00:13:22.600
And again, you can have custom
content in your items.

00:13:23.000 --> 00:13:25.990
I don't want to go into too
much detail on the performance,

00:13:26.000 --> 00:13:27.540
but I know some of you
are concerned about that.

00:13:27.760 --> 00:13:30.830
Just again, remember the Finder uses it
and NAV Services uses it,

00:13:30.840 --> 00:13:33.000
so it has to be very high performance.

00:13:33.230 --> 00:13:34.940
Throw up some numbers here
to give you an example.

00:13:35.060 --> 00:13:38.000
It's very lightweight,
very scalable memory usage.

00:13:38.000 --> 00:13:43.000
It only uses as much memory based on how
many items you've added to be displayed.

00:13:43.000 --> 00:13:46.770
And as containers are opened,
of course those take a

00:13:47.020 --> 00:13:51.000
little bit more memory,
but we've kept it to a minimum.

00:13:51.000 --> 00:13:53.850
And over the next few months,
I'll be working on performance

00:13:53.850 --> 00:13:57.040
and may get that down even more.

00:14:03.500 --> 00:14:08.160
And how many of you remember
your algorithms class?

00:14:08.170 --> 00:14:09.590
Again,
you don't need to worry about details,

00:14:09.670 --> 00:14:10.900
just remember it's fast.

00:14:10.960 --> 00:14:16.290
Basic idea here is it does
binary searches internally.

00:14:16.290 --> 00:14:19.300
Now this is really just when
your code is calling in to

00:14:19.300 --> 00:14:20.840
get information about items.

00:14:20.960 --> 00:14:22.760
For instance, is this item selected?

00:14:22.810 --> 00:14:23.890
Is this container opened?

00:14:24.010 --> 00:14:26.890
That's your code querying
the DataBrowsers state.

00:14:27.200 --> 00:14:30.330
Internally, DataBrowsers is optimized
to basically order one.

00:14:30.430 --> 00:14:32.660
So interactions with the
user and rendering is as

00:14:32.820 --> 00:14:34.980
fast as it possibly can be.

00:14:36.260 --> 00:14:38.130
So this is all you
really need to remember.

00:14:38.150 --> 00:14:39.820
It's fast.

00:14:39.820 --> 00:14:42.040
And it's optimized for bulk operations.

00:14:42.150 --> 00:14:46.690
So if you want to do, say, threading,
retrieval of your items,

00:14:46.690 --> 00:14:49.140
whether they be file system
items or from a database,

00:14:49.190 --> 00:14:55.930
you can spawn that off in a thread and
whenever you get a large enough chunk,

00:14:55.930 --> 00:14:58.980
insert it in one step into
the DataBrowser and that will

00:14:58.980 --> 00:14:58.980
give you the best performance.

00:15:00.080 --> 00:15:02.640
So now I want to talk about the
programming model a little bit and how

00:15:02.640 --> 00:15:05.370
you can use it to help factor your code.

00:15:06.600 --> 00:15:08.790
Excuse me.

00:15:08.790 --> 00:15:10.400
This is not a new paradigm.

00:15:10.400 --> 00:15:11.920
It's not unique to the DataBrowser.

00:15:11.940 --> 00:15:16.200
It's very common in various frameworks:
PowerPlant, MacApp, ThinkClass Library,

00:15:16.200 --> 00:15:17.360
for those that remember that.

00:15:17.560 --> 00:15:22.020
And the Cocoa frameworks
are all oriented around the

00:15:22.020 --> 00:15:22.020
Model-View-Controller paradigm.

00:15:23.100 --> 00:15:25.750
Basic idea is the controller
code is your framework code,

00:15:25.760 --> 00:15:28.500
it's your initialization,
where you throw up your windows,

00:15:28.500 --> 00:15:30.040
you create your menus.

00:15:30.170 --> 00:15:33.240
And it's your event dispatching,
where you take the raw events,

00:15:33.240 --> 00:15:35.170
this is a mouse click,
and you figure out which subview it

00:15:35.340 --> 00:15:38.030
belongs to and you route it into that.

00:15:38.460 --> 00:15:40.930
DataBrowser takes on
the role of the view.

00:15:40.930 --> 00:15:43.710
It's in charge of presenting
your information to the user,

00:15:43.710 --> 00:15:45.450
putting things on screen.

00:15:45.540 --> 00:15:48.400
And it takes those raw events,
a mouse click for instance,

00:15:48.470 --> 00:15:52.200
and turns it into a semantic event,
a double click or a drag

00:15:52.210 --> 00:15:53.890
on a particular item.

00:15:53.950 --> 00:16:00.440
And it talks to your application data,
which is the really value

00:16:00.440 --> 00:16:01.690
add of your application.

00:16:01.690 --> 00:16:01.690
It's what makes your application unique.

00:16:02.460 --> 00:16:06.330
and it stores the items you
want to present to the user.

00:16:06.330 --> 00:16:08.090
Again,
you're in charge of the data storage,

00:16:08.090 --> 00:16:11.190
the management, the caching,
and whatever you need

00:16:11.190 --> 00:16:12.760
to take care of there.

00:16:13.250 --> 00:16:16.130
Now how do you get those items into
the DataBrowser so they're displayed?

00:16:16.170 --> 00:16:20.430
There's a routine called "add
items" where you add the references,

00:16:20.430 --> 00:16:24.510
unique item IDs,
into the DataBrowser such that there's

00:16:24.510 --> 00:16:28.870
a one-to-one mapping between those
item IDs and the data they represent.

00:16:30.830 --> 00:16:33.610
DataBrowser uses callbacks
to query information about

00:16:33.610 --> 00:16:36.660
those items as it needs it,
so if an item isn't on screen,

00:16:36.660 --> 00:16:40.840
it's not going to ask for its text
string because it doesn't need it.

00:16:40.970 --> 00:16:43.880
So you can take advantage of
that in your caching scheme.

00:16:45.800 --> 00:16:49.730
Once again, to summarize:
controller code creates the windows,

00:16:49.730 --> 00:16:53.800
creates the DataBrowser,
passes events into the various views,

00:16:53.800 --> 00:16:55.460
including the DataBrowser.

00:16:55.520 --> 00:17:00.560
DataBrowser queries your
application data as it needs it,

00:17:00.560 --> 00:17:03.770
and your application data sends
messages back to the DataBrowser for

00:17:03.770 --> 00:17:07.170
adding items or changing the state.

00:17:11.470 --> 00:17:14.450
Now DataBrowser needs to assume certain
things about your data model and

00:17:14.450 --> 00:17:16.020
how the items relate to each other.

00:17:16.100 --> 00:17:20.210
It's a very minimal set of assumptions,
but it basically defines

00:17:20.330 --> 00:17:22.910
the structure of the data.

00:17:24.320 --> 00:17:28.390
The most important of those is that
each item has some set of properties.

00:17:28.430 --> 00:17:31.720
These are defined, again, by unique IDs.

00:17:31.960 --> 00:17:35.170
There are some that are
predefined in the header.

00:17:35.670 --> 00:17:37.640
Such as, is this item active?

00:17:37.710 --> 00:17:39.230
Can this item be selected?

00:17:39.330 --> 00:17:40.830
Is this item a container?

00:17:40.880 --> 00:17:43.070
Can this container be opened?

00:17:43.230 --> 00:17:46.220
So that gives you control
over some of the behaviors.

00:17:46.480 --> 00:17:50.580
and it lets the DataBrowser
communicate in a known language.

00:17:50.650 --> 00:17:51.860
You can define additional properties.

00:17:51.990 --> 00:17:56.400
For instance,
the list view is very free form and,

00:17:56.410 --> 00:17:57.480
you know,
DataBrowser doesn't know what kind

00:17:57.480 --> 00:17:59.760
of columns you want to present,
that's up to you.

00:17:59.860 --> 00:18:01.440
So each time you create a
column in the list view,

00:18:01.440 --> 00:18:03.590
you're defining a new property.

00:18:03.700 --> 00:18:06.620
So there's a one-to-one mapping between
columns and properties and those

00:18:06.710 --> 00:18:09.720
are properties you've defined and
that you are telling the DataBrowser,

00:18:09.810 --> 00:18:13.300
here's some additional information
that I have on this item that

00:18:13.300 --> 00:18:14.660
I want you to know about.

00:18:14.730 --> 00:18:18.070
And here's how to query details on it.

00:18:18.210 --> 00:18:19.590
But these are all optional.

00:18:19.680 --> 00:18:21.790
If you don't respond to
the property request,

00:18:22.000 --> 00:18:24.340
DataBrowser assumes default values.

00:18:24.440 --> 00:18:28.680
Now, you really should respond to the
properties that you define or else

00:18:28.680 --> 00:18:30.510
nothing's going to be put on screen.

00:18:34.030 --> 00:18:36.950
Now one of those important
predefined properties is,

00:18:36.950 --> 00:18:38.400
is an item a container?

00:18:38.530 --> 00:18:42.000
This is how you get the nested
look and the hierarchicalness.

00:18:42.140 --> 00:18:45.670
And you use the container of a
given item when you're adding it.

00:18:45.730 --> 00:18:49.850
So when you add items to the DataBrowser,
you say, put these items inside

00:18:49.850 --> 00:18:51.280
this parent container.

00:18:51.540 --> 00:18:54.500
And that's how it creates
the internal tree.

00:18:56.120 --> 00:19:00.800
To summarize,
DataBrowser stores references, not data.

00:19:00.950 --> 00:19:03.140
Very fundamental design decision.

00:19:04.470 --> 00:19:07.870
And it queries information about the
items as it needs it based on the

00:19:07.870 --> 00:19:10.790
unique item IDs and the property IDs.

00:19:11.550 --> 00:19:12.470
And everything is optional.

00:19:12.540 --> 00:19:15.160
If you don't install a callback,
you don't respond to a property,

00:19:15.210 --> 00:19:19.340
DataBrowser will assume and
perform for you a default behavior.

00:19:21.750 --> 00:19:27.330
Moving on to the API,
that's a big number, 112 API calls.

00:19:27.390 --> 00:19:29.000
But don't let that intimidate you.

00:19:29.040 --> 00:19:30.000
I did a breakdown here.

00:19:30.100 --> 00:19:33.510
Most of those calls are
just get set accessors.

00:19:33.660 --> 00:19:35.430
And if you're not
interested in some of those,

00:19:35.430 --> 00:19:36.320
you can ignore them.

00:19:36.480 --> 00:19:39.560
These just allow you to customize
the behavior and appearance.

00:19:39.750 --> 00:19:43.520
So it's a very flexible, very rich API.

00:19:43.690 --> 00:19:46.760
Now, a trend in the control
manager in general,

00:19:46.770 --> 00:19:51.150
since this is a control,
is to move away from type unsafe

00:19:52.070 --> 00:19:55.590
structures that you turn into a void
star pointer and pass in via send

00:19:55.590 --> 00:19:58.460
control message or set get control data.

00:19:58.550 --> 00:20:00.360
So these are really just wrappers,
literally,

00:20:00.360 --> 00:20:04.600
they are wrappers in the implementation
around get set data calls,

00:20:04.600 --> 00:20:07.120
but they're type safe,
which makes your code more cleaner,

00:20:07.270 --> 00:20:11.690
more maintainable, less error prone,
and the same for on our side.

00:20:12.050 --> 00:20:14.600
This is over and above the
standard control manager calls.

00:20:14.740 --> 00:20:18.020
For instance, size control, move control,
set control visibility.

00:20:18.280 --> 00:20:21.270
Those work just the same
because it is a control.

00:20:22.110 --> 00:20:24.060
But when you get right down to it,
only six calls are really,

00:20:24.060 --> 00:20:27.220
really needed to do a bare bones
implementation to just throw

00:20:27.220 --> 00:20:28.640
some information on screen.

00:20:28.780 --> 00:20:32.110
So most of those calls you don't need.

00:20:32.410 --> 00:20:35.300
Some of, for instance,
the configuration and manipulation calls,

00:20:35.440 --> 00:20:39.180
some apply to all view styles,
whether it be list view or column view.

00:20:39.280 --> 00:20:43.810
For instance, turn on the scroll bar,
turn off the scroll bar.

00:20:43.900 --> 00:20:45.130
And some are view style specific.

00:20:45.360 --> 00:20:48.440
For instance, the list view has a notion
of a disclosure column,

00:20:48.550 --> 00:20:50.290
so you can specify the disclosure column.

00:20:50.510 --> 00:20:52.550
Whereas that doesn't mean
anything to the column view.

00:20:52.690 --> 00:20:55.200
Conversely,
the column view has a notion of a path,

00:20:55.200 --> 00:20:56.660
but the list view does not.

00:20:58.590 --> 00:21:01.250
Plus there are two sets of
callbacks broken into two pieces.

00:21:01.400 --> 00:21:04.320
There's the high level ones that
deal with the standard behaviors

00:21:04.690 --> 00:21:09.050
and the low level ones that
apply to the custom content.

00:21:09.050 --> 00:21:09.050
I'll go into those in a moment.

00:21:09.190 --> 00:21:12.030
Plus your standard
control manager callbacks,

00:21:12.120 --> 00:21:16.900
key filter, input validation proc,
those work as well.

00:21:19.050 --> 00:21:20.960
Now the standard callbacks,
the high level callbacks,

00:21:21.030 --> 00:21:27.190
these are what you're mostly interested
in for the standard native display types.

00:21:27.910 --> 00:21:29.890
Most important to these
is the Get Set Item Data.

00:21:30.020 --> 00:21:34.820
This is how the DataBrowser queries
your application for text strings,

00:21:34.820 --> 00:21:37.530
icons, date values to present on screen.

00:21:37.660 --> 00:21:41.760
Again, you just provide raw data,
DataBrowser takes care of the formatting.

00:21:41.880 --> 00:21:45.940
It's called Get Set because this is also
how the DataBrowser tells you that the

00:21:46.030 --> 00:21:47.760
user has completed an edit operation.

00:21:47.760 --> 00:21:51.920
For instance, the user has clicked a
checkbox or clicked a pop-up

00:21:51.920 --> 00:21:53.400
menu or done a text edit.

00:21:53.680 --> 00:21:57.100
This is how DataBrowser provides
that information back to you so

00:21:57.120 --> 00:21:59.090
you can store it off in your data.

00:21:59.360 --> 00:22:01.650
There's item comparison for sorting.

00:22:01.760 --> 00:22:04.060
You're in charge of the sort operations.

00:22:04.060 --> 00:22:07.640
It just gives you two item IDs and
asks for their relative ordering.

00:22:07.730 --> 00:22:10.950
So if you want to do secondary,
tertiary sort orderings,

00:22:11.170 --> 00:22:12.640
that's up to you.

00:22:12.690 --> 00:22:16.260
If you want to have case sensitive
or case insensitive sorting,

00:22:16.360 --> 00:22:17.460
that's up to you.

00:22:17.540 --> 00:22:20.610
If you don't install
a comparison callback,

00:22:20.610 --> 00:22:24.040
it presents information
in insertion order.

00:22:24.190 --> 00:22:26.800
So if you're providing a
list of stack elements,

00:22:26.800 --> 00:22:28.430
then you get that for free.

00:22:28.550 --> 00:22:31.550
You don't even need to
install a comparison routine.

00:22:32.290 --> 00:22:35.620
DataBrowser will notify you
of semantic events on items.

00:22:35.660 --> 00:22:38.930
For instance, double click,
container opened,

00:22:38.980 --> 00:22:43.200
things like item selected,
and does that via notification routine.

00:22:43.200 --> 00:22:47.990
There's some drag and drop handlers
for adding data into a drag.

00:22:48.170 --> 00:22:51.920
Again, the DataBrowser sets up the drag,
but you need to provide

00:22:51.920 --> 00:22:56.190
meaningful information into it,
the drag flavors.

00:22:56.900 --> 00:23:00.960
You are in charge of specifying whether
a given item is interested in a drag.

00:23:01.020 --> 00:23:04.180
If you respond "yes" you are interested,
DataBrowser will take care of

00:23:04.210 --> 00:23:06.800
highlighting that item appropriately
to give the user feedback.

00:23:06.800 --> 00:23:10.660
And when the drag ultimately is dropped,
again, it's your call to handle

00:23:10.660 --> 00:23:13.800
that because DataBrowser
doesn't know what the data is,

00:23:13.800 --> 00:23:15.800
it just knows something was
dropped on something else.

00:23:15.800 --> 00:23:17.800
And there's a cleanup operator.

00:23:17.820 --> 00:23:20.800
There's also HelpTags is the
follow-on replacement to BalloonHelp.

00:23:20.800 --> 00:23:22.800
BalloonHelp is going away under Carbon.

00:23:22.800 --> 00:23:27.800
HelpTags gives a tooltips kind
of appearance and interaction.

00:23:27.800 --> 00:23:29.770
And DataBrowser supports that natively.

00:23:29.920 --> 00:23:32.940
Again, you need to provide the content,
but the DataBrowser will take care

00:23:33.000 --> 00:23:35.800
of putting it up on screen and
determining which item it goes with.

00:23:35.800 --> 00:23:39.780
So you can give HelpTags
on an item-by-item basis.

00:23:40.730 --> 00:23:42.280
And same is true with contextual menu.

00:23:42.300 --> 00:23:44.810
You need to provide the menu,
and you need to handle the user's

00:23:44.960 --> 00:23:47.610
response with just a couple of routines.

00:23:51.300 --> 00:23:52.620
Very good.

00:23:53.360 --> 00:23:55.300
Excuse me.

00:23:55.300 --> 00:23:57.270
The low-level callbacks
are for custom content.

00:23:57.340 --> 00:23:59.730
If you don't have custom content,
you don't need to worry

00:23:59.730 --> 00:24:00.290
about these callbacks.

00:24:00.300 --> 00:24:03.390
If you do have custom content,
you are telling the DataBrowser,

00:24:03.390 --> 00:24:05.300
"I want to be in charge of
all rendering and tracking

00:24:05.320 --> 00:24:09.180
and hit testing for this item,
wherever it may be on screen,

00:24:09.490 --> 00:24:13.450
when it's on screen." DataBrowser will
give you the bounds at any given moment

00:24:13.520 --> 00:24:15.300
when you need to draw or hit test.

00:24:15.300 --> 00:24:18.070
And the custom content is
used for the preview column.

00:24:18.350 --> 00:24:21.300
That is a custom content space.

00:24:21.300 --> 00:24:24.270
So if you don't want a preview column,
then don't install custom content.

00:24:24.340 --> 00:24:26.300
You just get a blank column.

00:24:26.300 --> 00:24:29.260
But if you do want to present preview
information in the preview column,

00:24:29.300 --> 00:24:32.300
you need to install custom
callbacks and handle them.

00:24:33.810 --> 00:24:36.710
Now with a quick code demonstration
of getting a bare bones

00:24:36.710 --> 00:24:40.900
implementation up and running,
Johnathon's going to show that.

00:24:41.610 --> 00:24:43.850
Okay,
so here we have an application that's

00:24:44.080 --> 00:24:46.390
basically the minimalist DataBrowser.

00:24:46.410 --> 00:24:48.960
It's a single column with seven elements.

00:24:48.960 --> 00:24:52.190
You can select them, you can click on the
column and reorder them.

00:24:52.470 --> 00:24:56.250
As Jim said,
we have no sort routine in here,

00:24:56.260 --> 00:24:58.560
so they're in insertion order.

00:24:58.670 --> 00:25:00.450
So this is your most basic application.

00:25:00.490 --> 00:25:05.690
Let's see what code was
needed to create it.

00:25:05.690 --> 00:25:05.690
Actually,

00:25:06.730 --> 00:25:08.290
Very little code was needed to create it.

00:25:08.300 --> 00:25:13.220
If you look at it,
it's in total about 220 lines.

00:25:13.220 --> 00:25:17.200
Only about half of those are actually
needed for the DataBrowser itself.

00:25:17.280 --> 00:25:20.940
And so we're just going to go
quickly touch on what is actually

00:25:21.480 --> 00:25:23.250
needed for the DataBrowser.

00:25:23.380 --> 00:25:27.060
This is a Carbon event application,
so we actually,

00:25:27.070 --> 00:25:28.820
it is a lot smaller because
we don't have to do a lot of

00:25:28.830 --> 00:25:30.360
the event handling ourselves.

00:25:30.360 --> 00:25:32.770
It's taken care of automatically.

00:25:33.950 --> 00:25:39.200
So the first thing we do is we create
a window to put the DataBrowser in.

00:25:39.260 --> 00:25:43.900
We then create the DataBrowser to
fill the entirety of that window.

00:25:43.900 --> 00:25:47.590
We'll then configure the DataBrowser,
install the callbacks that

00:25:47.590 --> 00:25:51.280
are needed by DataBrowser to
communicate with our application,

00:25:51.320 --> 00:25:55.310
and we'll populate the DataBrowser
with our item references or item IDs,

00:25:55.350 --> 00:26:02.850
which will be given to the callback to
request the information to be displayed.

00:26:02.900 --> 00:26:06.890
The rest of the application is basically
just showing the window and running it.

00:26:06.900 --> 00:26:09.870
So the first thing to do is
to configure DataBrowser.

00:26:09.900 --> 00:26:14.900
Since DataBrowser is taking
up the entirety of the window,

00:26:14.900 --> 00:26:16.900
we don't want to have a focus frame.

00:26:16.900 --> 00:26:19.980
DataBrowser will manage the focus
frame for you if you want one,

00:26:19.980 --> 00:26:22.620
if you have, say,
two DataBrowseers in a window and you

00:26:22.620 --> 00:26:24.860
want to change the focus between them.

00:26:24.900 --> 00:26:28.030
So in ours,
since we have a single window and

00:26:28.030 --> 00:26:31.900
it's taking up the entire contents,
we turn it off.

00:26:32.000 --> 00:26:35.520
The second way that we configure
it is DataBrowser installs columns

00:26:35.750 --> 00:26:37.900
by filling out a parameter block.

00:26:37.900 --> 00:26:40.850
Jim will be going into detail
about this parameter block,

00:26:41.010 --> 00:26:42.900
but it's not very hard to fill out.

00:26:42.900 --> 00:26:44.890
It doesn't take very much.

00:26:44.900 --> 00:26:47.900
Once you fill out the parameter block
with the details about your column,

00:26:47.900 --> 00:26:51.900
you then add that column
to the DataBrowser.

00:26:51.900 --> 00:26:54.880
And here we're setting the sort
property to be the first column.

00:26:54.900 --> 00:26:58.530
If you have multiple columns,
you can specify which of those columns

00:26:58.530 --> 00:27:00.880
you want to be the sort column initially.

00:27:00.970 --> 00:27:02.820
If you don't set it,
nothing will be highlighted

00:27:02.870 --> 00:27:04.870
at the very beginning,
but as soon as you click

00:27:04.930 --> 00:27:07.900
on a header button,
it will then highlight.

00:27:07.900 --> 00:27:11.900
Once you've installed the
column into the DataBrowser,

00:27:11.900 --> 00:27:14.890
you then need to install your callback.

00:27:15.000 --> 00:27:19.900
Callbacks are also filled out or
installed via parameter block.

00:27:19.900 --> 00:27:20.890
It's very simple.

00:27:20.900 --> 00:27:21.890
We only have one callback
in this application,

00:27:21.950 --> 00:27:27.180
which is to actually get the
data from our data model and

00:27:27.180 --> 00:27:29.900
return them to the DataBrowser.

00:27:29.900 --> 00:27:38.050
So we fill out the parameter block
and install it into the DataBrowser.

00:27:38.370 --> 00:27:41.140
Now that that's done,
we need to populate the

00:27:41.140 --> 00:27:43.330
DataBrowser with our item IDs.

00:27:43.340 --> 00:27:46.120
Item IDs are entered into
DataBrowser by using an array.

00:27:46.340 --> 00:27:48.890
So here we have a simple
array of seven elements.

00:27:49.110 --> 00:27:53.640
These are actually indices
into a simple string array.

00:27:53.860 --> 00:27:55.620
They can be anything you want.

00:27:55.780 --> 00:28:01.300
They're just numbers or IDs that are
one-to-one mapping to your data model.

00:28:01.300 --> 00:28:04.310
So we create the array with
our seven elements and we

00:28:04.320 --> 00:28:06.300
store them into DataBrowser.

00:28:06.470 --> 00:28:10.300
And that's basically all you need to
actually configure DataBrowser itself.

00:28:10.300 --> 00:28:14.550
We do, of course, have our one callback,
which is for requesting the

00:28:15.070 --> 00:28:17.270
information from our data model.

00:28:17.320 --> 00:28:21.360
In this case, when DataBrowser needs to
display its information,

00:28:21.390 --> 00:28:24.730
it will request via callback
from our application or our

00:28:24.970 --> 00:28:29.300
data model using the item IDs,
passing in an item ID into our callback.

00:28:29.300 --> 00:28:32.420
In this case, like I said,
we have a... an array of

00:28:32.420 --> 00:28:34.060
strings with seven elements.

00:28:34.060 --> 00:28:36.990
So each time the callback is called,
it gives an item ID.

00:28:37.390 --> 00:28:40.300
We return a string and
DataBrowser displays it.

00:28:40.300 --> 00:28:42.290
That's basically it for the application.

00:28:42.300 --> 00:28:45.290
There's not much to adding
DataBrowser to your application.

00:28:45.290 --> 00:28:47.300
We do have a bit more code here.

00:28:47.300 --> 00:28:51.300
One of the interesting things
is you can resize DataBrowser

00:28:51.300 --> 00:28:54.300
by a simple size control call.

00:28:54.300 --> 00:28:58.170
Basically, our...as our window resizes,
we just resize the control to

00:28:58.420 --> 00:29:00.300
follow the bounds of the window.

00:29:00.300 --> 00:29:01.270
And that's it.

00:29:01.360 --> 00:29:03.300
Very easy to add.

00:29:03.300 --> 00:29:05.300
You get a lot of features
with very little code.

00:29:05.300 --> 00:29:10.300
Anyway, here's Jim to describe the
APIs and the callbacks more.

00:29:10.300 --> 00:29:15.300
Thank you, Jonathan.

00:29:20.920 --> 00:29:22.690
Alright,
here's the sequence that Johnathon

00:29:22.760 --> 00:29:27.300
just demonstrated to you to
create and display a DataBrowser.

00:29:27.300 --> 00:29:28.170
It's pretty straightforward.

00:29:28.310 --> 00:29:30.940
You create it, one call.

00:29:31.030 --> 00:29:31.670
You configure it.

00:29:31.790 --> 00:29:33.030
There's a couple of steps there.

00:29:33.040 --> 00:29:33.820
You set up the format.

00:29:34.040 --> 00:29:36.990
In case of the list view,
you need to add your columns.

00:29:37.530 --> 00:29:42.000
You install your callbacks and you
populate with your initial set of items.

00:29:42.130 --> 00:29:44.540
And the last step is just
handling the runtime.

00:29:44.680 --> 00:29:48.770
Handling the callbacks as the
DataBrowser dispatches them and routing

00:29:48.960 --> 00:29:51.630
the raw events into the DataBrowser.

00:29:51.640 --> 00:29:53.590
I'll walk you through that.

00:29:55.130 --> 00:29:57.270
Here's how you create a DataBrowser.

00:29:57.390 --> 00:30:00.630
Now you notice it's
not using new control.

00:30:00.940 --> 00:30:03.140
Control Manager is moving away
from that model because again,

00:30:03.140 --> 00:30:07.000
it's not type safe and it's based
on the notion of code resources

00:30:07.000 --> 00:30:08.840
which are not supported in 10.

00:30:08.990 --> 00:30:12.610
So instead we're moving towards
unique type safe routines for

00:30:12.770 --> 00:30:14.640
everything you want to do.

00:30:14.760 --> 00:30:17.640
So it means we have more APIs,
but it's no different than all

00:30:17.790 --> 00:30:22.360
the different structures that were
introduced with the Appearance Manager.

00:30:22.800 --> 00:30:27.820
The arguments to this are a window ref,
the bounds that you want,

00:30:27.940 --> 00:30:31.140
the initial view style,
create either a list view or column view.

00:30:31.140 --> 00:30:33.030
Here we're creating a list view.

00:30:33.140 --> 00:30:35.460
And you get out a control ref.

00:30:35.570 --> 00:30:37.700
Pretty straightforward.

00:30:37.810 --> 00:30:40.100
So there, we've done step one.

00:30:42.880 --> 00:30:44.780
Step 2 is formatting it.

00:30:44.780 --> 00:30:47.200
Now for the list view it's
a little bit involved,

00:30:47.210 --> 00:30:48.920
but the basic idea is
you create a param block,

00:30:49.300 --> 00:30:51.290
you fill out the values
of the param block,

00:30:51.370 --> 00:30:52.790
and you add your column.

00:30:52.790 --> 00:30:55.790
So the details are really
in that param block.

00:30:56.500 --> 00:30:58.160
First step is to create a property.

00:30:58.160 --> 00:31:00.190
You're defining a new property,
telling the DataBrowser,

00:31:00.190 --> 00:31:03.060
"Here's a new property I know
about and I want you to know about,

00:31:03.060 --> 00:31:05.310
too." That involves
defining a property ID.

00:31:05.430 --> 00:31:07.400
It's a unique identifier.

00:31:07.450 --> 00:31:09.920
This is how the DataBrowser
communicates and queries

00:31:09.920 --> 00:31:11.750
information about that property.

00:31:11.910 --> 00:31:17.040
You say what visual information you
want displayed for that property.

00:31:17.120 --> 00:31:19.130
This is where the native types come in.

00:31:19.220 --> 00:31:21.600
In this case,
we're displaying icon and text.

00:31:21.720 --> 00:31:25.700
There's other constants for checkbox,
pop-up menu, etc.

00:31:25.830 --> 00:31:29.910
Then you define some
behaviors for the property.

00:31:30.600 --> 00:31:36.280
In this case, we want this column to
reflect the selection state.

00:31:36.580 --> 00:31:40.470
So if you want certain columns
not to be highlighted when

00:31:40.470 --> 00:31:43.910
a given item is highlighted,
you don't set this flag for

00:31:43.910 --> 00:31:45.290
those columns that you do.

00:31:45.400 --> 00:31:47.910
If you want all columns to--say
you want a band selection

00:31:48.370 --> 00:31:50.790
to go all the way across,
you need to set this bit

00:31:50.890 --> 00:31:52.230
flag for each column.

00:31:52.790 --> 00:31:55.400
And here we're using the
default column flags.

00:31:55.740 --> 00:31:57.060
They break down into other constants.

00:31:57.060 --> 00:31:59.650
They control, is this column sortable?

00:31:59.660 --> 00:32:00.700
So say you don't want sort property.

00:32:00.700 --> 00:32:03.280
You're just presenting a list
and you don't want the user to be

00:32:03.280 --> 00:32:05.260
able to change the sort ordering.

00:32:05.310 --> 00:32:06.670
And sort is meaningless.

00:32:06.810 --> 00:32:10.440
Say you're presenting a stack
of information and so sort

00:32:10.440 --> 00:32:12.330
doesn't have any meaning there.

00:32:12.460 --> 00:32:15.660
So you wouldn't set that flag,
but that's included in

00:32:15.660 --> 00:32:18.420
the default constant here.

00:32:18.870 --> 00:32:21.350
Also controls whether
a column is movable.

00:32:21.620 --> 00:32:23.870
So if you want a column to
be glued always to the left,

00:32:23.880 --> 00:32:27.860
for instance the finder always has
the name column glued to the left,

00:32:27.980 --> 00:32:32.420
you can't move it over to the right,
they don't have that flag set.

00:32:36.130 --> 00:32:42.240
Next step is to define some behaviors
and appearances of the ListView header.

00:32:42.740 --> 00:32:44.060
First part is the sort order.

00:32:44.120 --> 00:32:46.600
Again,
sort order is on a per column basis.

00:32:46.670 --> 00:32:49.130
You need to provide
an initial sort order.

00:32:49.290 --> 00:32:51.430
Provide the minimum and maximum width.

00:32:51.600 --> 00:32:53.340
This is for column resizing.

00:32:53.370 --> 00:32:57.480
If you don't want a column to be resized,
just set these two values to be the same.

00:32:58.250 --> 00:32:59.800
And then the alignment.

00:32:59.800 --> 00:33:05.260
These are the standard TE flush default,
TE center, left align, right align.

00:33:05.410 --> 00:33:09.210
And this also affects the appearance
of the contents of that column.

00:33:09.470 --> 00:33:15.890
So the column content and
the header text are aligned.

00:33:17.660 --> 00:33:21.070
Next, we put these all together
into a column descriptor.

00:33:21.080 --> 00:33:24.500
Again, the steps are:
column is a property,

00:33:24.780 --> 00:33:27.700
contains some header information,
some formatting information,

00:33:27.800 --> 00:33:33.470
and a CFStringRef that is the
text to put in the header button.

00:33:33.500 --> 00:33:37.460
Now, CFStringRefs are the way to
communicate textual information

00:33:37.540 --> 00:33:39.490
with the control manager now.

00:33:39.500 --> 00:33:43.400
Doing away with Pascal strings
because they're difficult to localize,

00:33:43.520 --> 00:33:45.590
they're script-dependent.

00:33:45.710 --> 00:33:47.380
CFStringRefs,
it's basically a Unicode string,

00:33:47.800 --> 00:33:53.330
so DataBrowser's Unicode-capable,
off the block.

00:33:54.320 --> 00:33:57.120
And you need to go to some of the
Core Foundation sessions to learn more

00:33:57.120 --> 00:34:00.270
details about how to use CFStrings.

00:34:00.680 --> 00:34:03.250
And then you create the column.

00:34:03.350 --> 00:34:06.640
The last argument here is the
ordinal position within it.

00:34:06.640 --> 00:34:09.420
So you can, as you're adding columns,
you can specify what

00:34:09.420 --> 00:34:10.970
position you want to be in.

00:34:11.050 --> 00:34:13.270
In this case, we set a very large value.

00:34:13.370 --> 00:34:16.460
If you choose a value that's more than
the number of columns currently in there,

00:34:16.490 --> 00:34:18.580
it just tacks it on the end.

00:34:20.160 --> 00:34:22.600
So we've set up the format.

00:34:22.640 --> 00:34:25.430
Now we're going to install the callbacks.

00:34:25.540 --> 00:34:27.770
Again, another param block.

00:34:29.640 --> 00:34:33.500
Now the KDataBrowserLatestCallbacks
constant may seem a little odd,

00:34:33.640 --> 00:34:36.710
but that's a versioning scheme
we came up with so that we can

00:34:36.810 --> 00:34:38.710
provide backward compatibility

00:34:38.920 --> 00:34:43.250
In the future,
if we need to add to this structure,

00:34:43.300 --> 00:34:47.240
change its formatting,
maybe change the callbacks themselves,

00:34:47.340 --> 00:34:50.910
add new callbacks, replace callbacks,
change argument signatures,

00:34:50.910 --> 00:34:53.960
we don't want to break your apps
that you work on now as we need to

00:34:53.960 --> 00:34:55.660
make these changes in the future.

00:34:55.790 --> 00:34:58.440
Using this versioning
scheme will allow us.

00:34:58.580 --> 00:35:03.840
So the version number maps directly
to the structure of this param block.

00:35:03.930 --> 00:35:06.850
If we need to augment this
param block in the future,

00:35:06.950 --> 00:35:09.200
we'll increment that constant value.

00:35:09.280 --> 00:35:13.720
And next time you recompile with the new
headers that have that new structure,

00:35:13.800 --> 00:35:15.060
you'll get the new constant.

00:35:15.150 --> 00:35:18.810
And you may need to do a little bit of
work to adjust to the new callbacks,

00:35:18.810 --> 00:35:19.690
new layout.

00:35:19.760 --> 00:35:21.750
If you don't want to,
you can just revert to the

00:35:21.870 --> 00:35:23.120
previous constant value.

00:35:23.170 --> 00:35:26.350
And you'll maintain binary compatibility.

00:35:26.880 --> 00:35:29.060
We initialize the structure.

00:35:29.060 --> 00:35:32.660
For now,
this just sets all the values to null.

00:35:32.800 --> 00:35:35.370
The UPPs just sets them to null.

00:35:35.650 --> 00:35:38.560
But at some point we may want to
provide some default callbacks for you,

00:35:38.560 --> 00:35:39.760
and this is how you can get them.

00:35:39.830 --> 00:35:43.400
Basically,
initialize it to a safe default value.

00:35:44.120 --> 00:35:49.460
Then you set each element within the
structure to your UPPs that you create,

00:35:49.460 --> 00:35:52.140
and you install them.

00:35:52.230 --> 00:35:54.330
Okay, we're done with step two.

00:35:54.440 --> 00:35:56.350
But there is a step three.

00:35:57.980 --> 00:35:59.060
We populate.

00:35:59.180 --> 00:36:01.790
We create an array of references.

00:36:01.890 --> 00:36:04.350
Now again, the references are whatever is
meaningful to your application.

00:36:04.490 --> 00:36:07.700
They can be raw object pointers,
C++ object pointers.

00:36:07.900 --> 00:36:10.900
They can be indices into
an array that you maintain.

00:36:11.140 --> 00:36:13.890
They can be some hash table value.

00:36:13.890 --> 00:36:15.900
Whatever is appropriate.

00:36:15.900 --> 00:36:21.890
The only thing is that they need to
always map one to one consistently

00:36:21.890 --> 00:36:21.890
to the same piece of data.

00:36:22.480 --> 00:36:25.360
The arguments to the routine here:
the DataBrowser reference,

00:36:25.360 --> 00:36:26.230
the Control Ref.

00:36:26.230 --> 00:36:29.790
The parent item, as I mentioned,
this is how you get the hierarchicalness.

00:36:30.110 --> 00:36:37.150
If you want it in the
root level of the list,

00:36:37.150 --> 00:36:38.840
or displaying a flat list,
you just say there is no parent.

00:36:38.840 --> 00:36:38.840
The parent is the root item.

00:36:39.500 --> 00:36:42.330
You say how many items are in
the array and the array itself.

00:36:42.450 --> 00:36:46.460
The last argument is a
performance opportunity.

00:36:46.620 --> 00:36:47.620
Suppose

00:36:48.930 --> 00:36:55.340
You create your array in some order
that maps to one of your sort orderings.

00:36:55.340 --> 00:36:58.350
You can tell the DataBrowser,
and if the current sort

00:36:58.350 --> 00:37:01.350
property happens to match,
DataBrowser can save on

00:37:01.390 --> 00:37:02.890
some sort operations.

00:37:02.890 --> 00:37:04.850
So it'll make it add a little bit faster.

00:37:04.900 --> 00:37:08.990
Okay, we're almost done.

00:37:13.440 --> 00:37:15.400
Excuse me.

00:37:15.460 --> 00:37:17.400
All right.

00:37:17.400 --> 00:37:18.290
There we are.

00:37:18.440 --> 00:37:19.400
All right.

00:37:19.400 --> 00:37:20.400
I'm only going to go over
one of the callbacks,

00:37:20.400 --> 00:37:21.400
the most fundamental one,
the Get Set Data.

00:37:21.400 --> 00:37:24.460
As I said,
this is used both for retrieving

00:37:24.620 --> 00:37:29.400
data from your data model and passing
it to at the completion of an edit.

00:37:29.400 --> 00:37:31.400
That's what the last argument is for.

00:37:31.440 --> 00:37:33.400
Most of the time,
it will be set to false.

00:37:33.400 --> 00:37:35.790
That just means the DataBrowser says,
"What's the text string you want me

00:37:35.900 --> 00:37:38.400
to display?" When it's set to true,
it's saying,

00:37:38.400 --> 00:37:41.640
"Here's the text string the user
just entered," or the new checkbox

00:37:41.640 --> 00:37:43.370
value the user just entered.

00:37:43.470 --> 00:37:45.400
And then it's going to
update your data store.

00:37:45.400 --> 00:37:47.400
If you don't want to accept the value,
that's fine.

00:37:47.400 --> 00:37:50.390
You can put up a dialogue
to tell the user,

00:37:50.390 --> 00:37:53.780
"Sorry, that's an invalid new name," or,
"You can't check this checkbox

00:37:53.910 --> 00:37:56.400
right now," and just ignore it.

00:37:57.490 --> 00:38:00.070
But the main bulk of this is
just a switch statement on the

00:38:00.070 --> 00:38:01.920
property that's being requested.

00:38:02.010 --> 00:38:04.760
You have a case entry for each
property that you are interested in.

00:38:04.930 --> 00:38:07.060
If you don't want to
respond to a property,

00:38:07.180 --> 00:38:09.680
DataBrowser assumes a default value.

00:38:10.660 --> 00:38:12.860
You need to check on whether
the DataBrowser is giving you

00:38:12.860 --> 00:38:16.770
information or asking for information,
but then you just install the

00:38:16.770 --> 00:38:19.490
information into an item data reference.

00:38:19.550 --> 00:38:23.070
That's a reference to the data
that's going to be displayed.

00:38:23.820 --> 00:38:27.210
Now if you don't respond to a property,
it's important that you

00:38:27.210 --> 00:38:30.240
return this error code,
because that tells the DataBrowser,

00:38:30.320 --> 00:38:32.400
"Give me the default value."

00:38:35.150 --> 00:38:36.560
We're almost there.

00:38:36.600 --> 00:38:38.200
One last easy step.

00:38:38.370 --> 00:38:39.850
This is your standard
control manager calls.

00:38:39.970 --> 00:38:42.980
Draw one control, handle control click,
et cetera.

00:38:43.020 --> 00:38:45.900
There's some new ones that I'm
not going to go into detail here.

00:38:45.980 --> 00:38:49.000
If you're interested in them,
go to the Carbon enhancement sessions.

00:38:49.030 --> 00:38:49.920
They'll go over them.

00:38:49.980 --> 00:38:52.650
But basically, they allow the data
browser to set the cursor.

00:38:52.770 --> 00:38:55.880
For instance, as the user drags over
a resizable column,

00:38:55.880 --> 00:39:01.580
it'll change the arrow cursor into
the bidirectional resize cursor.

00:39:01.580 --> 00:39:04.410
Some routines for doing
drag and drop handling,

00:39:04.440 --> 00:39:05.380
and contextual menu.

00:39:05.380 --> 00:39:07.110
Again,
go to the Carbon enhancement session

00:39:07.110 --> 00:39:08.340
if you're interested in those.

00:39:08.380 --> 00:39:09.620
There's an easier way.

00:39:09.650 --> 00:39:11.920
These Carbon events,
and you install the standard

00:39:11.920 --> 00:39:14.520
event handlers on your window,
you get all this for free.

00:39:14.530 --> 00:39:18.610
That's what the sample
application Johnson showed did.

00:39:20.390 --> 00:39:21.260
So there, we're done.

00:39:21.330 --> 00:39:21.820
Pretty straightforward.

00:39:21.890 --> 00:39:24.800
You create a DataBrowser,
you configure it,

00:39:24.870 --> 00:39:27.600
that's the most involved step,
but it's pretty straightforward too.

00:39:27.720 --> 00:39:30.960
You populate with initial items
and you handle the runtime.

00:39:32.360 --> 00:39:35.590
Now DataBrowser API is quite stable.

00:39:35.590 --> 00:39:39.270
It's actually been used by
the Finder Intents since PR2.

00:39:39.480 --> 00:39:43.560
And there are a couple of
components in Mac OS 9 that use it.

00:39:43.560 --> 00:39:48.100
So we're pretty confident that
it suits everyone's needs.

00:39:48.210 --> 00:39:51.440
But the DataBrowser does a lot
more than those core services,

00:39:51.440 --> 00:39:53.130
Finder, Sherlock, etc.

00:39:53.230 --> 00:39:53.420
need.

00:39:53.440 --> 00:39:59.500
For instance, the variable row heights,
custom content.

00:39:59.580 --> 00:40:03.530
And so we had to make some best guesses
of what reasonable behavior is there,

00:40:03.790 --> 00:40:06.500
since we don't have any clients
that are really using it.

00:40:06.590 --> 00:40:07.900
So that's where we need your help.

00:40:07.980 --> 00:40:09.150
Please use them and give us feedback.

00:40:09.280 --> 00:40:12.860
If something doesn't work
the way you think it should,

00:40:12.930 --> 00:40:13.670
let us know.

00:40:13.800 --> 00:40:17.280
The goal of the DataBrowser
is to do the right thing.

00:40:17.520 --> 00:40:20.700
As much as possible and save you
from work and do work for you.

00:40:21.180 --> 00:40:23.990
So let us know if DataBrowser
can do something additional

00:40:24.490 --> 00:40:26.590
to make your life even easier.

00:40:28.440 --> 00:40:30.400
It's available right now.

00:40:30.400 --> 00:40:34.640
The Mac OS X CD you got on Monday,
DataBrowser is part of Carbon.

00:40:34.690 --> 00:40:37.730
When you use the Finder ListView,
you're using a DataBrowser.

00:40:38.330 --> 00:40:42.710
It's in CarbonLib 1.1 for 9 only.

00:40:43.050 --> 00:40:46.580
It went through, it's in the D9 release,
which I don't think has

00:40:46.740 --> 00:40:47.730
been posted just yet.

00:40:47.920 --> 00:40:50.100
I think it was built last week,
going through QuickLooks this week.

00:40:50.100 --> 00:40:52.340
So it should be posted
on the web next week,

00:40:52.340 --> 00:40:55.200
or maybe it might be there now,
I haven't looked.

00:40:55.280 --> 00:40:58.610
And you can get it through your
Apple Developer Connection account.

00:40:59.200 --> 00:41:01.740
The APIs are defined in
ControlDefinitions.h.

00:41:01.850 --> 00:41:06.420
Again, it hasn't made it into the
Universal Headers releases,

00:41:06.420 --> 00:41:10.010
but the headers that come
with the developer previews

00:41:10.010 --> 00:41:12.900
or the CarbonLib seeds,
it's in there.

00:41:12.990 --> 00:41:14.200
And here's some contact information.

00:41:14.200 --> 00:41:17.590
I'm going to bring John back
up to go over the rest.

00:41:25.030 --> 00:41:27.790
So first of all,
if you're working with DataBrowser

00:41:27.790 --> 00:41:32.100
and need to get some feedback
through to Jim or the team,

00:41:32.120 --> 00:41:35.440
probably the best contact would be to
go through myself with John Glunze,

00:41:35.460 --> 00:41:37.740
the first email address there.

00:41:37.760 --> 00:41:43.230
And there's also the high-level
Toolbox feedback email,

00:41:43.230 --> 00:41:45.440
toolbox@apple.com.

00:41:45.440 --> 00:41:49.600
And the Carbon mailing list is a
great place to basically live and

00:41:49.610 --> 00:41:52.760
discuss and keep conversations
live with other Carbon developers

00:41:52.760 --> 00:41:54.780
who are using DataBrowser.

00:41:54.800 --> 00:41:58.980
Documentation address is there.

00:41:59.670 --> 00:42:03.360
So some related sessions that you need
to think about or consider attending,

00:42:03.360 --> 00:42:05.640
and these,
some of them relate specifically

00:42:05.640 --> 00:42:08.260
to DataBrowser or some of the
APIs that have been discussed here.

00:42:08.260 --> 00:42:11.760
Others relate to sort of the
AQA interface and doing the right thing,

00:42:11.760 --> 00:42:14.600
and that's sort of where DataBrowser
fits in a little bit as well.

00:42:14.670 --> 00:42:16.900
And most of these are
pretty self-explanatory.

00:42:16.980 --> 00:42:20.730
But a couple that I want to call out is
just the Carbon Event Model sessions,

00:42:20.730 --> 00:42:22.600
which happened on Tuesday.

00:42:22.600 --> 00:42:26.070
Hopefully you went to those, and if not,
hopefully get you some

00:42:26.080 --> 00:42:28.130
information post the conference.

00:42:28.390 --> 00:42:32.900
Carbon Enhancements 1 and 2,
talk about some of the APIs that

00:42:32.900 --> 00:42:36.300
Jim referred to in the last few slides
and you can get some info there.

00:42:36.300 --> 00:42:38.300
And then the feedback forums.

00:42:38.300 --> 00:42:40.680
Please come to the High-Level
Toolbox feedback forums in terms of

00:42:40.750 --> 00:42:44.450
getting us feedback on High-Level
Toolbox or the Aqua forum in

00:42:44.490 --> 00:42:49.290
terms of feedback on developer
adoption of Aqua related issues.

00:42:49.920 --> 00:42:53.670
So I'd like to invite the
team up on stage for a Q&A.

00:42:53.750 --> 00:42:55.800
If you have any questions,
there's a few mics in the aisle.