WEBVTT

00:00:08.400 --> 00:00:10.300
But we're really happy
to have you all here,

00:00:10.300 --> 00:00:12.300
except for those of you
standing in the back.

00:00:12.300 --> 00:00:14.300
But those of you sitting down here
and those of you in the overhaul,

00:00:14.300 --> 00:00:17.050
we thank you very much for being
willing to stand out there.

00:00:17.120 --> 00:00:19.270
You know who you are.

00:00:19.380 --> 00:00:21.200
We're having some
sessions right now about,

00:00:21.330 --> 00:00:24.750
now that you've built these really cool
apps in five minutes or five man months,

00:00:24.850 --> 00:00:27.200
depending on how you're
scheduling things,

00:00:27.290 --> 00:00:29.360
it's time to get them
out to your customers,

00:00:29.460 --> 00:00:32.300
which is now easier than
ever before in Apple history.

00:00:32.400 --> 00:00:36.170
And we're very excited to have Dirk
Johnson to tell you all about it.

00:00:36.240 --> 00:00:39.010
So please give a warm welcome to Dirk.

00:00:40.830 --> 00:00:41.800
Thanks, Eddie.

00:00:41.800 --> 00:00:43.880
Appreciate it.

00:00:43.930 --> 00:00:44.370
So how are you doing?

00:00:44.460 --> 00:00:46.180
It's the last session of the day.

00:00:46.180 --> 00:00:49.880
I hope you're all ready for it,
ready to stretch.

00:00:50.970 --> 00:00:54.920
You know,
I remember the moment I realized

00:00:54.920 --> 00:00:57.900
how awesome WebObjects was.

00:00:57.900 --> 00:01:00.690
It was about three or so years ago.

00:01:00.760 --> 00:01:03.610
I was working at Apple in
the information department,

00:01:03.670 --> 00:01:05.900
information systems and technology.

00:01:05.900 --> 00:01:09.450
I was actually on the
internet services team.

00:01:09.800 --> 00:01:14.860
and we were at that time putting together
what is now called the Apple store,

00:01:14.860 --> 00:01:18.200
Apple online store,
and we were investigating different

00:01:18.200 --> 00:01:23.390
technologies that we could use to
sort of get this store together.

00:01:23.590 --> 00:01:27.890
We'd visited places like
Oracle and Netscape,

00:01:27.920 --> 00:01:30.380
and there were some good sides to
the technologies they presented,

00:01:30.380 --> 00:01:32.280
some bad sides, costs.

00:01:32.400 --> 00:01:35.430
We were tied into their engineers
for a long period of time.

00:01:35.500 --> 00:01:41.500
And then this, from out of the blue,
this, from the side, we merged with Next.

00:01:41.500 --> 00:01:47.500
And I went up to my manager and I said,
"You know, I think at Next,

00:01:47.700 --> 00:01:51.500
they have this technology called
WebObjects," something like that.

00:01:51.500 --> 00:01:55.260
And I think it might be what we
need to put this store together.

00:01:55.490 --> 00:01:58.320
So my manager,
being the wise person he was, said,

00:01:58.500 --> 00:02:00.850
"Well, hop in a car,
drive up to Redwood City,

00:02:00.850 --> 00:02:03.990
introduce yourselves,
and learn WebObjects." So I said,

00:02:03.990 --> 00:02:10.600
"Okay." So Glenn Eppes and myself,
Glenn being the technical...

00:02:10.780 --> 00:02:13.540
The technical lead of our team and I,
being a programmer,

00:02:13.540 --> 00:02:15.160
went up to Redwood City.

00:02:15.160 --> 00:02:19.820
We literally just drove up with
our Apple badges and walked into

00:02:19.820 --> 00:02:24.700
the reception area and said,
"Well, we're with Apple.

00:02:24.700 --> 00:02:25.700
Here's our badge.

00:02:25.950 --> 00:02:30.080
Now that we're the same company,
do you mind if we come in?"

00:02:31.320 --> 00:02:35.730
and the receptionist, bless her heart,
said, "Sure,

00:02:35.730 --> 00:02:39.790
come on in." So she opened the
door for us and we walked in and we

00:02:39.790 --> 00:02:42.950
walked around and said hi to people,
very friendly,

00:02:42.950 --> 00:02:45.930
and we found a couple of cubes
where there weren't people,

00:02:45.930 --> 00:02:48.940
and we sat down and we
started learning WebObjects.

00:02:48.940 --> 00:02:51.710
It was awesome,
coming from a Mac development side and

00:02:52.110 --> 00:02:56.850
coming to the object-oriented side and
just learning about the sophisticated

00:02:56.960 --> 00:02:59.760
and elegant technology was great.

00:02:59.760 --> 00:03:03.000
So Glenn and I decided rather than
biting off the Apple store at once,

00:03:03.130 --> 00:03:04.940
well, we'd start with a small project.

00:03:04.940 --> 00:03:10.800
So we decided to implement an e-commerce
site within Apple for Apple employees

00:03:10.800 --> 00:03:15.980
to purchase their system discounts,
their yearly system discounts.

00:03:16.070 --> 00:03:19.240
We called that the quarterly
promo or the Q promo.

00:03:19.240 --> 00:03:21.060
For those of you that have been
part of the development cycle,

00:03:21.060 --> 00:03:22.550
you know what that's like.

00:03:22.610 --> 00:03:28.220
Late nights, stale pizza, bad jokes,
and we eventually got done.

00:03:28.220 --> 00:03:32.400
So we're sitting there,
and I remember this moment.

00:03:32.420 --> 00:03:34.700
Those of you that are
developers know this moment.

00:03:34.700 --> 00:03:38.640
You look at yourself,
you've checked off the last feature,

00:03:38.640 --> 00:03:43.030
squashed the last bug,
and you look at each other and you go,

00:03:43.030 --> 00:03:43.040
"Yes!"

00:03:43.670 --> 00:03:44.600
Done.

00:03:44.700 --> 00:03:46.740
We're ready.

00:03:46.770 --> 00:03:47.180
Now what?

00:03:47.180 --> 00:03:49.170
What do we do?

00:03:49.860 --> 00:03:54.500
Can we use an AIX web server to
serve a WebObjects application?

00:03:54.500 --> 00:03:55.760
How many instances do we need to run?

00:03:55.940 --> 00:03:56.820
How much RAM do we need?

00:03:56.890 --> 00:03:58.420
Are you sure we can connect
to that Oracle database?

00:03:58.500 --> 00:04:00.100
Will it handle the load?

00:04:00.360 --> 00:04:03.370
Thus was born the idea for actually
coming up with a way of learning how

00:04:03.370 --> 00:04:05.870
to deploy a WebObjects application.

00:04:05.980 --> 00:04:06.730
And so we're here tonight.

00:04:06.790 --> 00:04:09.700
I hope to share some of the
things that I've learned in

00:04:09.700 --> 00:04:11.440
deploying WebObjects applications.

00:04:11.530 --> 00:04:14.700
And I hope that's somewhat
familiar to you as well.

00:04:15.190 --> 00:04:17.400
So again, my name is Dirk Johnson.

00:04:17.480 --> 00:04:20.050
I'm now a trainer at Apple.

00:04:20.140 --> 00:04:23.790
What I'd like to do is, first of all,
go over sort of an overview of

00:04:23.790 --> 00:04:25.210
the deployment architecture.

00:04:25.550 --> 00:04:27.950
Then we'll go into detail about
some things like configuring

00:04:27.950 --> 00:04:30.940
and monitoring your website,
obviously an important

00:04:30.940 --> 00:04:32.500
part of deployment.

00:04:32.840 --> 00:04:36.130
will mention some troubleshooting
skills and techniques because there's no

00:04:36.130 --> 00:04:39.040
website without its share of problems.

00:04:39.190 --> 00:04:42.560
And then in the end,
to sort of bring the ideas together,

00:04:42.560 --> 00:04:45.750
I'd like to go over an
example of deployment.

00:04:45.910 --> 00:04:49.530
The nature of deployment is such that
some of the subject matter that I'll be

00:04:49.530 --> 00:04:52.990
going with are a little bit disparate,
so hopefully I won't lose you,

00:04:53.020 --> 00:04:55.000
hopefully I'll have
some good transitions,

00:04:55.120 --> 00:04:57.520
and there's a lot of detail
and information in this,

00:04:57.520 --> 00:04:59.110
so I think it will be useful.

00:05:00.130 --> 00:05:04.860
So a very basic deployment architecture
would be something like this.

00:05:04.900 --> 00:05:06.740
Hopefully it's somewhat familiar.

00:05:06.850 --> 00:05:09.700
When we talk about a WebObjects
deployment architecture,

00:05:09.850 --> 00:05:13.560
sometimes we refer to it as
being a three-tier architecture.

00:05:13.750 --> 00:05:16.340
The first tier being
the presentation layer,

00:05:16.460 --> 00:05:18.740
made up of the browser
and the HTTP server,

00:05:18.740 --> 00:05:22.210
something that's going to be
serving your content to your users.

00:05:24.550 --> 00:05:27.060
The second tier is our application layer.

00:05:27.060 --> 00:05:29.300
Of course, this is where the developers
spend most of their time.

00:05:29.300 --> 00:05:32.590
This is your custom logic.

00:05:33.440 --> 00:05:37.270
The third tier is the database layer,
providing the dynamic

00:05:37.270 --> 00:05:38.930
content to your site.

00:05:42.220 --> 00:05:44.530
Some issues to consider when
you're coming up with your

00:05:44.530 --> 00:05:45.940
deployment architecture.

00:05:45.940 --> 00:05:49.440
First, what operating system
are you going to use?

00:05:49.550 --> 00:05:55.100
With WebObjects, we support, of course,
Mac OS X Server and T4, Windows 2000,

00:05:55.200 --> 00:06:04.110
Solaris and HPUX, and of course,
with our new announcement,

00:06:04.110 --> 00:06:04.110
Mac OS X and Linux with
WebObjects 5 for Java.

00:06:04.920 --> 00:06:06.800
So lots of choices.

00:06:06.800 --> 00:06:09.220
As far as hardware,
I'll let you know what operating

00:06:09.300 --> 00:06:09.790
system you're going to use.

00:06:09.790 --> 00:06:11.800
How are you going to
set up your hardware?

00:06:11.800 --> 00:06:15.160
Processor speed is important,
especially if you're going to have

00:06:15.160 --> 00:06:16.700
a lot of traffic on your site.

00:06:16.830 --> 00:06:19.640
Processor count for
multiprocessor systems.

00:06:19.820 --> 00:06:22.660
The amount of RAM, your disk subsystem,
and redundancy,

00:06:22.660 --> 00:06:24.800
redundant power supplies for example.

00:06:25.090 --> 00:06:28.790
Important things to check off your
list to make sure you've considered.

00:06:30.840 --> 00:06:34.570
Your environment, your network speed,
your network security.

00:06:34.630 --> 00:06:37.930
Network security is pretty obvious.

00:06:39.260 --> 00:06:42.440
Making sure that people can't
get in through the network,

00:06:42.500 --> 00:06:45.060
but sometimes we forget
physical security.

00:06:45.110 --> 00:06:46.940
I recall hearing within
the last year or so,

00:06:46.940 --> 00:06:50.260
a company was really good at making
sure people couldn't hack in to their

00:06:50.260 --> 00:06:51.900
database and get their credit cards.

00:06:52.030 --> 00:06:54.000
So someone decided to go around,
walk in the door,

00:06:54.000 --> 00:06:56.210
and pick up the physical
box and walk out with it.

00:06:56.470 --> 00:06:59.730
So it's important to not let that happen.

00:06:59.810 --> 00:07:03.960
And we learned that as well at Apple,
though that didn't happen to us.

00:07:04.030 --> 00:07:06.360
Temperature control and even
moisture control is important.

00:07:06.360 --> 00:07:09.000
And of course UPS for
when the power goes out.

00:07:09.050 --> 00:07:12.340
And make sure and test the
batteries under that condition

00:07:12.340 --> 00:07:13.720
so they last long enough for you.

00:07:13.750 --> 00:07:16.120
That, we didn't do that.

00:07:16.490 --> 00:07:17.760
Deployment licenses.

00:07:17.860 --> 00:07:21.500
So there's three deployment licenses,
all the way from work group

00:07:21.830 --> 00:07:25.790
to desktop to high end,
and they each have various capabilities.

00:07:25.790 --> 00:07:27.210
Is this right?

00:07:27.360 --> 00:07:28.940
No.

00:07:29.500 --> 00:07:30.560
You're right!

00:07:30.690 --> 00:07:31.580
It's not, it's different.

00:07:31.850 --> 00:07:33.920
How is it different?

00:07:33.930 --> 00:07:35.640
$699.

00:07:35.640 --> 00:07:38.780
$699, you get the whole ball of wax,
the whole IAN deployment.

00:07:38.960 --> 00:07:40.400
Pennies on the dollar!

00:07:40.400 --> 00:07:44.850
Multi-processor, multiple instance,
no volume limit, and if you order within

00:07:44.850 --> 00:07:49.230
the next 30 minutes,
we'll throw in a pair of Ginsu knives!

00:07:49.460 --> 00:07:51.920
Alright, we've got that driven home.

00:07:52.010 --> 00:07:52.750
$6.99.

00:07:52.790 --> 00:07:54.450
Have you seen our website this morning?

00:07:54.600 --> 00:07:56.400
It's got $6.99 right on there.

00:07:56.420 --> 00:07:58.400
Alright,
so review of the deployment architecture.

00:07:58.400 --> 00:08:02.180
Let's talk about the communication that
takes place between the application

00:08:02.190 --> 00:08:04.390
layer and the database layer.

00:08:04.400 --> 00:08:07.320
We do this through something
called a database adapter.

00:08:07.440 --> 00:08:11.400
So depending on what
platform you've chosen,

00:08:11.520 --> 00:08:14.400
there is a limitation on
what databases we connect to.

00:08:14.400 --> 00:08:19.190
So again, for example, OS X has Oracle,
Solaris has, well, all the way down the

00:08:19.300 --> 00:08:22.400
column you can see Oracle,
Sybase, Informix, ODBC.

00:08:22.410 --> 00:08:26.160
But the high point is again
WebObjects 5 for Java.

00:08:26.510 --> 00:08:29.400
So you can see across all
platforms where we're supported.

00:08:29.400 --> 00:08:32.400
So that's again an awesome thing.

00:08:32.400 --> 00:08:35.400
So you want to consider
your database adapter.

00:08:38.450 --> 00:08:42.190
So now, let's talk about the interaction
between your presentation layer

00:08:42.190 --> 00:08:43.660
and your application layer.

00:08:43.880 --> 00:08:45.990
We use something called
the WebObjects adapter.

00:08:46.070 --> 00:08:49.530
The WebObjects adapter
works with the HTTP server.

00:08:50.250 --> 00:08:54.850
With WebObjects,
we supply three specific API adapters,

00:08:54.910 --> 00:09:00.730
or HTTP adapters: Apache, NSAPI or WAI,
which is Netscape, ISAPI,

00:09:00.900 --> 00:09:04.810
which is Microsoft,
and then of course we support the

00:09:04.810 --> 00:09:08.330
CGI interface with web servers.

00:09:09.500 --> 00:09:11.500
Let's talk about that a little bit more.

00:09:11.500 --> 00:09:14.930
First of all,
the advantage of the CGI adapter

00:09:15.360 --> 00:09:16.500
is that it works everywhere.

00:09:16.500 --> 00:09:20.470
There's absolutely no place you
really can't use it with a web server.

00:09:20.650 --> 00:09:23.900
As a matter of fact, we did,
with the quarterly promo,

00:09:23.930 --> 00:09:25.700
deploy with an AIX web server.

00:09:25.700 --> 00:09:28.500
We recompiled the
CGI adapter and it worked.

00:09:28.500 --> 00:09:34.260
The disadvantage with it is that it is
slower than what we call the API adapter.

00:09:34.390 --> 00:09:38.020
It is slower than the API adapters
because every request forces

00:09:38.020 --> 00:09:39.700
it to spawn a new process.

00:09:39.780 --> 00:09:40.740
So that's going to be slow.

00:09:40.740 --> 00:09:41.500
It has overhead.

00:09:41.500 --> 00:09:44.500
Additionally,
it's not allowed to use the load

00:09:44.500 --> 00:09:48.730
balancing algorithms that we
have built into the API adapters.

00:09:49.230 --> 00:09:53.200
So, contrarily, the API adapters then
do have load balancing,

00:09:53.340 --> 00:09:56.130
which is great for performance.

00:09:56.330 --> 00:10:00.710
The API adapters also operate within
the same process as the HTTP server,

00:10:00.710 --> 00:10:03.100
so you've got less overhead there.

00:10:03.200 --> 00:10:07.080
And again, we have Netscape, Microsoft,
and Apache support.

00:10:07.190 --> 00:10:10.490
And of course, the C source code is
supplied for all adapters,

00:10:10.500 --> 00:10:14.580
so you're able to modify their
behavior or recompile them for

00:10:14.580 --> 00:10:17.570
different platforms for the aggressive.

00:10:18.190 --> 00:10:20.400
So let's talk a little bit
more about this interaction,

00:10:20.520 --> 00:10:23.860
the adapter with our
WebObjects applications.

00:10:23.960 --> 00:10:27.390
The browser represents, of course,
a user and a request coming in.

00:10:27.480 --> 00:10:29.300
I didn't put the HTTP server there.

00:10:29.300 --> 00:10:32.790
Please just assume the request
goes to the HTTP server and then

00:10:32.840 --> 00:10:35.120
gets handed off to the adapter.

00:10:35.960 --> 00:10:38.400
So our user submits a request.

00:10:38.450 --> 00:10:42.770
The adapter looks at the URL that's
submitted with the request.

00:10:43.200 --> 00:10:46.340
As it looks at the URL,
it looks at what the application name

00:10:46.360 --> 00:10:51.410
is and what instance of that application
that needs to receive that request.

00:10:51.590 --> 00:10:54.020
The adapter holds
configuration information,

00:10:54.170 --> 00:10:58.660
including what instances are running
and what hosts they're running on.

00:10:58.820 --> 00:11:01.520
The adapter will then
cross-reference that URL with

00:11:01.520 --> 00:11:04.630
its configuration information,
and then it will identify

00:11:04.730 --> 00:11:08.300
the instance and forward the
request onto that instance.

00:11:08.470 --> 00:11:12.290
That's a summary of the way that
request works with the adapter.

00:11:12.830 --> 00:11:14.850
Now what I'd like to focus on
with this slide is really that

00:11:14.850 --> 00:11:18.210
configuration information because
that's really the entryway into

00:11:18.240 --> 00:11:20.950
your application architecture.

00:11:22.470 --> 00:11:25.800
So this configuration
information-- first of all,

00:11:25.800 --> 00:11:31.760
the information that the adapter holds is
for three separate sets of information.

00:11:31.970 --> 00:11:34.470
First, its own configuration
information-- for example,

00:11:34.470 --> 00:11:37.900
what load balancing mechanism
that you want it to use.

00:11:37.930 --> 00:11:42.350
Second, it has a list of all available
applications and the configuration

00:11:42.410 --> 00:11:44.280
at the application level.

00:11:44.280 --> 00:11:47.240
And then thirdly,
you have the application instances

00:11:47.240 --> 00:11:49.510
and what hosts they're running on,
and for example,

00:11:49.520 --> 00:11:53.500
their configuration information,
like port number and instance number.

00:11:53.810 --> 00:11:57.430
The format of all this
information is XML,

00:11:57.560 --> 00:12:00.060
but it does still support the old
format for those that are used

00:12:00.060 --> 00:12:04.510
to the pre-WebObjects 4.5 format,
the PList.

00:12:04.700 --> 00:12:10.440
This configuration information
that the WebObjects adapter has

00:12:10.610 --> 00:12:15.130
is obtained usually via a URL,
and you configure that information

00:12:15.130 --> 00:12:17.290
in the web server configuration file.

00:12:17.480 --> 00:12:20.330
It's in the web server's
configuration file that you

00:12:20.460 --> 00:12:22.640
configure your WebObjects adapter.

00:12:25.090 --> 00:12:28.230
So let's talk a little bit more
about this URL that I referred to

00:12:28.240 --> 00:12:31.950
that the adapter uses to gather
its configuration information.

00:12:32.090 --> 00:12:34.600
First of all,
there are three ways or mechanisms

00:12:35.090 --> 00:12:39.190
that your adapter can actually
get at configuration information.

00:12:39.320 --> 00:12:42.790
First of all, the first mechanism is
the typical flat file.

00:12:43.420 --> 00:12:48.400
The first URL that you see there is an
example of referencing a local flat file,

00:12:48.430 --> 00:12:51.860
and the second is having a web server,
Deon,

00:12:52.000 --> 00:12:54.800
serving up the configuration information.

00:12:54.960 --> 00:12:57.230
So that's a remote flat file.

00:12:57.310 --> 00:12:59.460
That's pretty straightforward.

00:12:59.800 --> 00:13:04.560
The second way is you can provide
an actual host list for the adapter,

00:13:04.560 --> 00:13:08.130
and it will actually contact these
hosts for configuration information.

00:13:08.160 --> 00:13:10.540
There's something I need
to introduce here,

00:13:10.540 --> 00:13:13.060
and that's a process
that we call WOTASC-D.

00:13:13.060 --> 00:13:15.300
This is new with WebObjects 4.5.

00:13:15.300 --> 00:13:19.900
It is a process that runs on every
one of your application hosts.

00:13:19.900 --> 00:13:24.110
And one of its roles is to supply
configuration information for the

00:13:24.110 --> 00:13:28.760
adapter that is relevant for that
particular host that it resides on.

00:13:29.680 --> 00:13:33.290
So in this case, we have a host list
referencing two hosts,

00:13:33.290 --> 00:13:34.590
Helen and Telesto.

00:13:34.680 --> 00:13:39.880
And the WOTASC-D process
is listening on port 1085.

00:13:40.000 --> 00:13:43.870
So what this means is that the
WebObjects adapter is going to go

00:13:43.870 --> 00:13:48.910
and connect to Helen on port 1085,
which will be the WOTASC-D process.

00:13:48.920 --> 00:13:51.980
And that WOTASC-D process will
return its XML information,

00:13:51.980 --> 00:13:54.400
its configuration
information for that box.

00:13:54.400 --> 00:13:56.360
In this case,
the adapter will combine the

00:13:56.450 --> 00:13:59.460
configuration information
from two WOTASC-D processes.

00:13:59.460 --> 00:14:03.720
The third mechanism is multicast,
and we'll get into that in a minute.

00:14:03.770 --> 00:14:05.760
I want to deal with that in more detail.

00:14:05.760 --> 00:14:10.950
Now this configuration information that
the adapter caches can become stale.

00:14:10.960 --> 00:14:14.970
So by default,
the adapter refreshes that configuration

00:14:15.170 --> 00:14:17.900
information every 10 seconds.

00:14:19.980 --> 00:14:22.230
So let's talk a little bit more
about this Woe-tasty process.

00:14:22.240 --> 00:14:25.200
It probably spurred your curiosity.

00:14:25.310 --> 00:14:27.590
Again, as I mentioned,
it runs on every WebObjects

00:14:27.640 --> 00:14:28.800
application server.

00:14:28.940 --> 00:14:30.180
It's very important.

00:14:30.290 --> 00:14:35.200
It started and restarted for robustness
by a daemon called Woe-Service.

00:14:35.290 --> 00:14:37.430
That's on every platform.

00:14:37.580 --> 00:14:44.300
and his team have been working
together to develop a new

00:14:44.410 --> 00:14:48.950
application for the WebObjects.

00:14:48.950 --> 00:14:48.950
The WebObjects is a
software-based application,

00:14:48.950 --> 00:14:48.950
and it supplies the adapter.

00:14:48.950 --> 00:14:48.950
One of its roles is to supply the adapter
again with this configuration data.

00:14:48.950 --> 00:14:48.950
Again, on port 1085 is where it
by default listens and

00:14:48.950 --> 00:14:48.950
communicates that information.

00:14:49.160 --> 00:14:52.400
Now, its real primary role not only
is to help the adapter and get

00:14:52.400 --> 00:14:54.880
its configuration information,
but it's also,

00:14:55.100 --> 00:14:59.430
its primary role is to monitor, cycle,
and restart your configured instances.

00:14:59.570 --> 00:15:03.270
For those that are familiar
with WebObjects previous to 4.5,

00:15:03.430 --> 00:15:07.090
this was really the role of
monitor in the monitor proxy.

00:15:07.130 --> 00:15:10.320
Monitor was responsible for actually
configuring the instances and making sure

00:15:10.320 --> 00:15:12.100
that they stayed up if they went down.

00:15:12.100 --> 00:15:15.590
This role has now been moved
over to the WoTAScD process.

00:15:15.590 --> 00:15:19.800
And again, the WoTAScD process is local
to that particular host.

00:15:19.950 --> 00:15:23.260
Monitor still exists,
but it's merely just an

00:15:23.260 --> 00:15:25.190
interface to WoTAScD.

00:15:26.760 --> 00:15:29.970
An interesting note about the
WoTestD process is even though,

00:15:29.970 --> 00:15:32.470
let's say that you have
your WoTestD process,

00:15:32.520 --> 00:15:37.300
you've gone in and configured various
apps to run and communicate with WoTestD,

00:15:37.500 --> 00:15:41.640
WoTestD can still serve instances
of your application that you

00:15:41.650 --> 00:15:43.700
have not configured with Monitor.

00:15:43.700 --> 00:15:47.000
When your applications start up,
they send what's called a LifeBeat

00:15:47.000 --> 00:15:49.060
to Monitor to register with WoTestD.

00:15:49.060 --> 00:15:51.300
I'm sorry,
it sends a LifeBeat to WoTestD to

00:15:51.460 --> 00:15:55.190
register with it so that WoTestD can
also service those instances that say

00:15:55.190 --> 00:15:56.680
you start manually from the command line.

00:15:56.700 --> 00:16:01.490
So it's not necessary to configure
it with Monitor in order for

00:16:01.490 --> 00:16:04.010
WoTestD to service your instances.

00:16:04.190 --> 00:16:07.490
Let's make that a little clearer here.

00:16:07.490 --> 00:16:10.050
Here we have two hosts,
Europa and Callisto.

00:16:10.200 --> 00:16:12.100
Pay attention to those names.

00:16:12.230 --> 00:16:18.560
Those hosts, application hosts,
are running WOTASC-D, again on port 1085.

00:16:18.800 --> 00:16:21.140
You have your WebObjects
adapter sitting there.

00:16:21.200 --> 00:16:24.100
You start up, let's say, four instances,
two on each.

00:16:24.190 --> 00:16:27.500
They send their life beat to Wotesti,
letting Wotesti know, "Hey,

00:16:27.500 --> 00:16:29.250
I'm ready to go."

00:16:31.900 --> 00:16:36.020
In your web server configuration file,
you've configured a WebObjects adapter

00:16:36.060 --> 00:16:39.570
with a host list where it will look
for its configuration information.

00:16:39.690 --> 00:16:42.290
In this case, you're open Callisto again.

00:16:42.460 --> 00:16:46.910
and it will then communicate every 10
seconds with WoTAS-D on port 1085 and

00:16:46.910 --> 00:16:51.800
build this configuration information.

00:16:53.050 --> 00:16:54.690
So now let's talk about
this multicasting.

00:16:54.730 --> 00:16:59.540
It's similar to the host list
but a little more flexible.

00:16:59.540 --> 00:17:01.200
As a matter of fact,
let's talk about the flexibility

00:17:01.310 --> 00:17:04.040
first of this host list.

00:17:04.050 --> 00:17:06.600
What's the advantage of the host list,
let's say, over the flat file?

00:17:06.600 --> 00:17:10.200
Well, the flat file doesn't
incur the traffic on the,

00:17:10.200 --> 00:17:11.140
on the network.

00:17:11.140 --> 00:17:13.160
The traffic's light really anyway.

00:17:13.180 --> 00:17:16.990
The advantage to the host list is
let's say that you want to increase

00:17:17.000 --> 00:17:18.400
the performance of your website.

00:17:18.400 --> 00:17:21.100
Let's say it's getting bogged
down a bit and you want to,

00:17:21.100 --> 00:17:24.560
you want to add another instance,
let's say, to Europa and Callisto,

00:17:24.600 --> 00:17:26.800
another instance of your application.

00:17:26.860 --> 00:17:29.370
But when those instances start up,
they'll register with

00:17:29.420 --> 00:17:31.060
WOTAS-D via the Lifebeat.

00:17:31.180 --> 00:17:32.440
And guess what?

00:17:32.530 --> 00:17:36.340
WebObjects adapter will refresh
its information every ten seconds.

00:17:36.360 --> 00:17:39.620
On the next refresh,
the WOTAS-D process will

00:17:39.620 --> 00:17:43.360
alert the adapter to the other
processes that you've started.

00:17:43.530 --> 00:17:47.340
So without you having to do anything
with the WebObjects adapter,

00:17:47.340 --> 00:17:51.050
you've actually scaled
your site seamlessly.

00:17:52.430 --> 00:17:55.060
So that's one of the
advantages of the host list.

00:17:55.100 --> 00:17:57.930
Now let's talk about multicasting.

00:17:59.780 --> 00:18:03.500
Multicasting is actually
a network protocol.

00:18:03.630 --> 00:18:06.640
It uses an IP address from the
administratively scoped domain.

00:18:06.640 --> 00:18:11.020
WebObjects has used this particular
IP address that you see up here,

00:18:11.270 --> 00:18:13.490
239.128.14.2.

00:18:13.580 --> 00:18:15.060
No need to memorize it,
it's written down.

00:18:15.060 --> 00:18:17.750
I can't memorize those.

00:18:17.760 --> 00:18:20.200
Administratively scoped domain,
what does that mean?

00:18:20.300 --> 00:18:26.990
It's an IP in the range of IPs that are
for internal use to a private network.

00:18:27.660 --> 00:18:30.700
And again, it broadcasts on port 1085.

00:18:30.780 --> 00:18:35.530
When the WOTAS-D processes start up,
they register to receive a

00:18:35.530 --> 00:18:39.690
multicast on that particular
port at that particular IP.

00:18:40.030 --> 00:18:45.320
By default, a multicast is limited to the
particular subnet on which it resides,

00:18:45.320 --> 00:18:47.500
on which it is broadcast.

00:18:47.610 --> 00:18:51.730
But if you configure your router
to pass on multicast packets,

00:18:51.860 --> 00:18:54.500
you can actually use this
multicast to reach other subnets.

00:18:54.500 --> 00:18:56.790
That's an important point.

00:18:58.560 --> 00:19:01.610
So WoTaskD, I'm sorry,
so the adapter then,

00:19:01.610 --> 00:19:05.590
if it's set up to use the multicast,
will then broadcast this

00:19:05.590 --> 00:19:08.500
multicast out on the network,
and all WoTaskDs,

00:19:08.610 --> 00:19:12.230
because they register to
listen for this multicast,

00:19:12.340 --> 00:19:16.620
will then register themselves
with your WebObjects adapter.

00:19:16.740 --> 00:19:21.480
What this allows the adapter to
do is build a dynamic host list.

00:19:21.560 --> 00:19:25.180
Now this broadcast, this multicast,
is sent out by the WebObjects

00:19:25.250 --> 00:19:26.700
adapter every 100 seconds.

00:19:26.700 --> 00:19:32.090
So it rebuilds that dynamic
host list every 100 seconds.

00:19:32.180 --> 00:19:36.700
So the advantage of that is,
is in the previous example,

00:19:36.840 --> 00:19:38.890
our host list,
if we added a new instance,

00:19:39.050 --> 00:19:41.480
it was automatically
detected by the adapter.

00:19:41.600 --> 00:19:44.570
However, what if we add a new host?

00:19:45.040 --> 00:19:48.460
The adapter is not going to know
about the new host because we

00:19:48.460 --> 00:19:50.400
already have a static host list.

00:19:50.520 --> 00:19:53.160
So the advantage of the multicast
then allows us to add an entirely

00:19:53.160 --> 00:19:57.560
new box to our application layer
and the adapter will automatically

00:19:57.660 --> 00:20:00.670
see that within 100 seconds or less.

00:20:03.410 --> 00:20:06.540
Alright, so we'll get a little graphical
representation of this.

00:20:06.640 --> 00:20:11.100
Again, we use Europa and Callisto,
our WOTASd processes,

00:20:11.200 --> 00:20:15.390
and in the WebServer configuration file,
we've configured a WebObjects adapter to

00:20:15.530 --> 00:20:21.410
use the multicast way of configuring it,
of getting its configuration information.

00:20:21.810 --> 00:20:22.810
Start our instances.

00:20:22.900 --> 00:20:25.610
They register with
WOTES-D with a life beat.

00:20:25.780 --> 00:20:29.450
We send out the multicast and
dynamically build our host list.

00:20:29.540 --> 00:20:33.070
And then based on that host list,
every 10 seconds,

00:20:33.070 --> 00:20:38.050
we'll query the hosts on that host
list for the configuration information.

00:20:38.100 --> 00:20:39.870
All right.

00:20:41.200 --> 00:20:42.370
So let's see.

00:20:42.490 --> 00:20:43.800
Sort of review.

00:20:43.810 --> 00:20:45.740
We know what our
deployment architecture is,

00:20:45.800 --> 00:20:49.080
our three layers: presentation,
application, and database.

00:20:49.140 --> 00:20:53.100
We've talked about the database
adapter and the WebObjects adapter.

00:20:53.100 --> 00:20:55.440
Well,
let's say that you get your site set up,

00:20:55.440 --> 00:20:58.050
and you go to hit your
website for the first time.

00:20:58.160 --> 00:21:00.100
You've configured, let's say,
your adapter to use the multicast,

00:21:00.100 --> 00:21:04.100
you've got instances running,
and you go to hit your website

00:21:04.100 --> 00:21:05.060
and things just don't work.

00:21:05.150 --> 00:21:07.100
Let's say that the
application isn't found.

00:21:07.190 --> 00:21:10.150
What kind of troubleshooting can you do?

00:21:11.660 --> 00:21:13.530
Well,
there's a couple of things we can do.

00:21:13.550 --> 00:21:17.670
First of all, we can actually query the
WebObjects adapter to see what

00:21:17.670 --> 00:21:19.570
configuration information it has.

00:21:19.630 --> 00:21:21.550
And it'll present it to us
in a very readable fashion

00:21:21.700 --> 00:21:23.280
right in our web browser.

00:21:23.280 --> 00:21:27.460
So here you can see our
HTTP server is called Oberon,

00:21:27.470 --> 00:21:31.920
the path to the WebObjects adapter,
cgibin/webobjects.

00:21:31.930 --> 00:21:36.080
We're actually sending the
xyzzy command to the adapter.

00:21:36.320 --> 00:21:37.940
How many of you are adventure fans?

00:21:37.940 --> 00:21:40.030
Anybody recognize that xyzzy?

00:21:40.280 --> 00:21:42.620
All right, good for you guys.

00:21:42.790 --> 00:21:44.600
Sort of dates some of the
WebObjects programmers,

00:21:44.600 --> 00:21:46.040
doesn't it?

00:21:46.040 --> 00:21:48.460
All right, so you can query it,
and it'll return detailed

00:21:48.460 --> 00:21:49.830
configuration information.

00:21:49.840 --> 00:21:51.910
And of course,
this can be password protected.

00:21:51.920 --> 00:21:53.580
Your web server is public.

00:21:53.600 --> 00:21:56.860
You wouldn't want people sort of seeing
what your configuration setup is.

00:21:57.010 --> 00:21:59.720
So we make sure and
password protect that.

00:22:00.160 --> 00:22:02.360
Secondarily,
you can also turn on adapter logging

00:22:02.360 --> 00:22:04.550
if you want to see the logging.

00:22:04.560 --> 00:22:08.400
This was there in pre WebObjects 4.5.

00:22:08.400 --> 00:22:11.900
Simply create a file named log
WebObjects in the temp directory,

00:22:12.060 --> 00:22:16.460
restart your adapter, your HTTP server,
and then your adapter will start

00:22:16.460 --> 00:22:20.670
logging out to a WebObjects.log
file in the same directory.

00:22:20.830 --> 00:22:23.930
Make sure and turn that off
when you're in deployment.

00:22:24.030 --> 00:22:25.280
Forgot to do that for QPromo.

00:22:25.490 --> 00:22:26.260
Learn the hard way on that.

00:22:26.260 --> 00:22:29.120
I'm so glad I didn't
start with the store.

00:22:29.230 --> 00:22:32.630
All right, you can drastically
reduce your performance.

00:22:32.860 --> 00:22:34.560
Alright,
so let's talk about this monitor.

00:22:34.560 --> 00:22:35.800
Let's sort of complete the picture.

00:22:35.800 --> 00:22:37.670
We know what WOTASC-D does.

00:22:37.740 --> 00:22:40.590
It's really the workhorse now
as far as keeping your site up,

00:22:40.620 --> 00:22:43.050
communicating with your
WebObjects adapter.

00:22:43.160 --> 00:22:44.140
Let's talk about Monitor.

00:22:44.360 --> 00:22:45.780
Well, it's a WebObjects application.

00:22:45.790 --> 00:22:46.700
It always has been.

00:22:46.790 --> 00:22:49.800
Again, it's the interface to WOTASC-D.

00:22:49.810 --> 00:22:53.550
Monitor will allow you to manage,
the same instance of Monitor will

00:22:53.550 --> 00:22:57.570
allow you to manage multiple hosts,
which means you don't need a version

00:22:57.570 --> 00:22:59.540
of Monitor running on every host.

00:22:59.540 --> 00:23:01.790
You can manage your whole website.

00:23:01.800 --> 00:23:04.430
And it also allows you,
this is where you will configure your

00:23:04.430 --> 00:23:07.040
WebObjects adapter and tell it what,
for example, again,

00:23:07.040 --> 00:23:08.790
what type of load balancing to use.

00:23:08.790 --> 00:23:12.670
And this is also password protected.

00:23:13.540 --> 00:23:16.360
Alright,
so I'd like to introduce Melissa Turner.

00:23:16.460 --> 00:23:18.300
She's a WebObjects engineer
on the WebObjects team.

00:23:18.300 --> 00:23:21.010
We'd like to demo monitor for
you and show the interaction

00:23:21.010 --> 00:23:24.340
again between the adapter,
Wotasty, and monitor.

00:23:24.450 --> 00:23:24.940
Am I?

00:23:25.140 --> 00:23:26.540
Yes, I'm connected.

00:23:26.620 --> 00:23:31.670
That was kind of important.

00:23:33.010 --> 00:23:35.290
Basically, Dirk has talked about all
the various components,

00:23:35.300 --> 00:23:37.840
and I'm sort of going to
show you how they can be used

00:23:37.840 --> 00:23:39.180
in a deployment situation.

00:23:39.260 --> 00:23:43.360
What I have running right here now is
an instance of the monitor application.

00:23:43.360 --> 00:23:46.840
It's actually running on a box
that we have hiding behind stage.

00:23:46.910 --> 00:23:53.120
What I'm going to do is, well,
add a host.

00:23:53.170 --> 00:23:54.300
I've timed out.

00:23:54.410 --> 00:23:55.750
How many of you have seen that before?

00:23:56.050 --> 00:24:00.200
How many of you saw Steve's
demo at Macworld where you

00:24:00.200 --> 00:24:01.800
saw that a whole bunch?

00:24:09.830 --> 00:24:12.210
So I've added the host that's,
as you can see,

00:24:12.210 --> 00:24:14.420
it's a Solaris box running backstage.

00:24:14.420 --> 00:24:17.360
We thought we'd show you that, yes,
Solaris actually works because

00:24:17.360 --> 00:24:21.140
we know that a lot of people
actually deploy on Solaris.

00:24:21.210 --> 00:24:23.910
What I'm going to do now
is add an application,

00:24:23.970 --> 00:24:26.950
and we're going to hope
I don't have typos in it.

00:24:37.500 --> 00:24:41.680
This is basically the defaults that
will be used whenever you create a

00:24:41.680 --> 00:24:44.140
new instance of this application.

00:24:44.170 --> 00:24:48.450
We have a path wizard on the host that
you want to create the application on.

00:24:48.610 --> 00:24:50.840
Navigate down through the
directory structure to

00:24:50.840 --> 00:24:52.500
actually find that application.

00:24:52.500 --> 00:24:57.590
It saves you having to memorize
where things are on various machines.

00:25:08.710 --> 00:25:11.270
And this is a difference that
some of you will notice between

00:25:11.270 --> 00:25:13.840
WebObjects 4.0 and WebObjects 4.5.

00:25:13.840 --> 00:25:19.330
Now you have to actually navigate down
into the .wa and select the executable

00:25:19.360 --> 00:25:22.610
instead of simply selecting the .wa.

00:25:23.410 --> 00:25:27.610
One of the advantages to that is
that you can actually set up a script

00:25:27.660 --> 00:25:30.390
and navigate down to an executable
script that can set up an environment

00:25:30.420 --> 00:25:32.550
and then launch your application.

00:25:36.670 --> 00:25:37.380
You like us.

00:25:37.380 --> 00:25:38.600
You really like us.

00:25:38.600 --> 00:25:44.310
Okay, so I've set up my
defaults for the instance,

00:25:44.310 --> 00:25:48.370
so I'm going to go off
and add an instance.

00:25:51.910 --> 00:25:55.600
I know I forgot something.

00:25:55.690 --> 00:26:00.310
And at this point, I want to show you,
we talked about XYZZY.

00:26:00.740 --> 00:26:02.950
I want to show you what the adapter sees.

00:26:03.250 --> 00:26:06.580
This is the xyzzyy command that
you can use to get configure it

00:26:06.600 --> 00:26:10.340
to sort of view the configuration
information at the adapter.

00:26:10.340 --> 00:26:13.140
And if I refresh it,
you'll see that right now the only thing

00:26:13.140 --> 00:26:17.400
the adapter knows about is the instance
of monitor that's running backstage.

00:26:18.100 --> 00:26:23.370
But if I go over here and
start the application,

00:26:23.540 --> 00:26:26.760
Give it a few seconds to
register with Wotaski.

00:26:26.790 --> 00:26:28.940
You'll see that the
application is running,

00:26:28.970 --> 00:26:35.500
and that when I go back to x, y, z, z,
y and refresh, there's my application.

00:26:35.500 --> 00:26:42.050
And just to prove that it
actually is a real application,

00:26:44.950 --> 00:26:49.240
You'll notice that I am actually
going through the web server.

00:26:49.240 --> 00:26:51.500
I'm not just hitting it
through Direct Connect.

00:26:51.500 --> 00:26:56.610
This thing can be annoying.

00:27:02.800 --> 00:27:05.120
Yes, I'm an engineer.

00:27:05.210 --> 00:27:08.200
Therefore, demos must confuse me.

00:27:36.200 --> 00:27:37.200
Correct.

00:27:37.300 --> 00:27:41.360
Voila, we have our application.

00:27:41.360 --> 00:27:43.200
You'll notice that
we're serving QuickTime.

00:27:43.200 --> 00:27:49.070
It's one of the examples that's included
with all of the various WebObjects stuff.

00:27:49.140 --> 00:27:55.260
It's just a little store application
that lets you go buy things.

00:27:59.900 --> 00:28:03.800
I bought a PowerBook.

00:28:03.800 --> 00:28:07.140
Okay, so you've got your application up,
it's being served,

00:28:07.140 --> 00:28:09.660
and suddenly people are, you know,
they've heard about your site,

00:28:09.660 --> 00:28:12.020
they think it's wonderful,
they want to come visit you.

00:28:12.020 --> 00:28:15.730
And you decide that you really
need to add another instance,

00:28:15.730 --> 00:28:18.900
or several more instances
of your application.

00:28:18.900 --> 00:28:24.980
So you can dynamically
just add another host,

00:28:37.400 --> 00:28:48.000
[Transcript missing]

00:28:52.960 --> 00:28:58.500
and for some reason it's not wanting
to start well if it did want to

00:28:58.560 --> 00:29:02.550
start what I'd then show you is
that I'd go back over to xyzzyy

00:29:02.550 --> 00:29:07.380
on the adapter and it would run but
for some reason it's not going to so

00:29:07.410 --> 00:29:10.370
try one more time try one more time

00:29:16.050 --> 00:29:17.990
The demo gods have spoken.

00:29:18.000 --> 00:29:25.020
And, well, because of that,
you won't be able to see the new app.

00:29:25.100 --> 00:29:37.300
[Transcript missing]

00:29:41.580 --> 00:29:43.710
Alright, so we've talked about your
deployment architecture,

00:29:43.800 --> 00:29:46.900
WoTASd, the adapters.

00:29:47.010 --> 00:29:48.860
Let's see, what else can we talk about?

00:29:48.960 --> 00:29:52.500
You know how to manage your site,
start new instances.

00:29:52.500 --> 00:29:56.340
We can schedule downtime and
uptime between your instances

00:29:56.340 --> 00:29:58.140
with Monitor and WoTASd.

00:29:58.260 --> 00:30:01.340
Something else I'd like to jump to now,
sort of do a shift,

00:30:01.340 --> 00:30:03.860
is let's focus on the application itself.

00:30:03.860 --> 00:30:07.490
Your application, as you're going through
the development cycle,

00:30:07.490 --> 00:30:09.460
is probably going to behave a
little differently than you want

00:30:09.460 --> 00:30:12.560
it to during the deployment cycle.

00:30:12.690 --> 00:30:17.390
For example, well, here,
let me get here first.

00:30:17.400 --> 00:30:21.600
Alright, there's this notion of
public and private resources.

00:30:21.600 --> 00:30:23.630
So while you're going through
the development cycle,

00:30:23.680 --> 00:30:26.390
you're really usually launching
on the same system that you're

00:30:26.400 --> 00:30:29.660
developing on and all your resources
are sort of mingled together.

00:30:29.820 --> 00:30:33.560
Well, when you go and deploy,
you've got this HTTP server that needs

00:30:33.560 --> 00:30:36.040
to be seen by everybody on the Internet.

00:30:36.150 --> 00:30:39.500
And let's say on a static site,
your pages, your HTML pages,

00:30:39.500 --> 00:30:43.420
reside on your HTTP server because
they're publicly accessible.

00:30:43.550 --> 00:30:45.500
The people need to get to it.

00:30:45.500 --> 00:30:48.270
Your images are on your HTTP server,
your sounds, etc.

00:30:48.850 --> 00:30:49.500
Anything you might have.

00:30:49.500 --> 00:30:53.700
Well, your application,
because we have this dynamic application,

00:30:53.700 --> 00:30:56.780
there's some resources there
that we don't want to be

00:30:56.780 --> 00:30:58.500
accessible to the public.

00:30:58.610 --> 00:31:01.390
For example, your executable,
you don't want someone taking that.

00:31:01.500 --> 00:31:04.460
How about your components or your pages,
their definitions?

00:31:04.500 --> 00:31:06.490
How about the model file?

00:31:06.620 --> 00:31:10.180
Mike showed you that the model file
contains your database information,

00:31:10.180 --> 00:31:11.500
including name and password.

00:31:11.500 --> 00:31:15.490
So you definitely don't want that going
out and sitting on your HTTP server.

00:31:15.490 --> 00:31:18.500
So again, there's this notion of public
resources and private resources,

00:31:18.500 --> 00:31:21.200
and you want to keep those separate.

00:31:21.780 --> 00:31:25.170
With a WebObjects application,
when you get ready for deployment,

00:31:25.170 --> 00:31:28.060
we do something that we term
a "split install." So you

00:31:28.060 --> 00:31:29.920
want to make sure and do that.

00:31:30.000 --> 00:31:33.970
As a matter of course,
when we did the Q promo,

00:31:34.310 --> 00:31:36.700
it was my habit to just
compile the application,

00:31:36.740 --> 00:31:39.960
copy the whole .woa folder,
the folder with everything in it,

00:31:39.960 --> 00:31:43.190
and just copy it over to the
document root of the HTTP server.

00:31:43.200 --> 00:31:44.700
Sold my images and stuff would get there.

00:31:44.700 --> 00:31:46.700
Well, they got there,
but with everything else.

00:31:46.700 --> 00:31:50.630
So that was a bad practice that
I had to get curbed quite severely.

00:31:50.700 --> 00:31:53.190
So you want to make sure and
do that split install and

00:31:53.190 --> 00:31:55.610
keep those resources separate.

00:32:03.700 --> 00:32:06.160
from your resources on?

00:32:06.160 --> 00:32:08.500
KATHLEEN SULLIVAN: We,
if you're-- this is sort of in

00:32:08.500 --> 00:32:10.260
the notion of troubleshooting.

00:32:10.260 --> 00:32:15.020
If for some reason you do your install,
you have your app running,

00:32:15.020 --> 00:32:16.840
you're trying to hit
it through the adapter,

00:32:16.840 --> 00:32:19.630
and your images aren't loading,
it probably means that you've

00:32:19.680 --> 00:32:22.620
forgotten to copy your public
resources over to your web server.

00:32:22.670 --> 00:32:24.770
We got actually caught by
that yesterday when we were

00:32:24.850 --> 00:32:25.960
trying to get our demo set up.

00:32:25.960 --> 00:32:27.580
Our QuickTime files weren't coming over.

00:32:27.580 --> 00:32:31.300
And that's a really good place to look if
you're trying to troubleshoot problems.

00:32:31.300 --> 00:32:34.270
This goes to show,
no matter how often you do it,

00:32:34.270 --> 00:32:36.600
you always make mistakes.

00:32:36.600 --> 00:32:38.360
Thanks, Melissa.

00:32:38.360 --> 00:32:39.460
All right.

00:32:39.510 --> 00:32:41.320
So application configuration.

00:32:41.340 --> 00:32:44.330
So the behavior of your application
during development should not

00:32:44.340 --> 00:32:45.980
necessarily be the same in production.

00:32:45.980 --> 00:32:48.040
For example,
when you launch an application

00:32:48.040 --> 00:32:50.810
in your development environment,
it usually tries to open up the

00:32:51.080 --> 00:32:52.520
browser automatically for you.

00:32:52.520 --> 00:32:54.660
Well, you wouldn't want that
behavior in deployment,

00:32:54.660 --> 00:32:55.850
for example.

00:32:55.920 --> 00:32:59.460
So we've provided a way with WebObjects
about three different ways of configuring

00:32:59.460 --> 00:33:02.190
the behavior of your application.

00:33:02.430 --> 00:33:04.320
So the first is the defaults database.

00:33:04.320 --> 00:33:08.180
The defaults database is installed
when you install WebObjects.

00:33:08.250 --> 00:33:14.370
It's a database that allows you to store
values for command line arguments on

00:33:14.370 --> 00:33:16.360
an application by application basis.

00:33:16.360 --> 00:33:20.240
So when you launch, say,
the monitor or you launch your

00:33:20.600 --> 00:33:24.090
virtual store light application,
it will look in this defaults

00:33:24.090 --> 00:33:26.500
database under its own name,
pull out the command line

00:33:26.500 --> 00:33:28.490
arguments that you have set,
and add them to the

00:33:28.730 --> 00:33:30.640
launching of the application.

00:33:30.760 --> 00:33:34.310
There's also an area in the defaults
database called NSGlobalDomain,

00:33:34.380 --> 00:33:38.220
which allows you to have settings
across multiple applications.

00:33:38.310 --> 00:33:41.210
So any settings in the
NSGlobalDomain will be applied

00:33:41.210 --> 00:33:45.210
to any application launching on
that particular application host.

00:33:46.040 --> 00:33:48.660
Secondarily,
the actual command line arguments.

00:33:48.660 --> 00:33:51.470
You can go ahead and launch
your application with certain

00:33:51.470 --> 00:33:53.380
command line arguments.

00:33:54.130 --> 00:33:57.170
These command line arguments will
override any settings that are

00:33:57.170 --> 00:33:59.230
duplicated in the defaults database.

00:33:59.240 --> 00:34:01.940
So that's the advantage of
using the command line argument

00:34:02.100 --> 00:34:04.220
right on the command line,
is that you can override any

00:34:04.220 --> 00:34:07.000
settings that you have sitting
in your defaults database.

00:34:07.000 --> 00:34:09.930
And finally, as the programmer,
you have ultimate power.

00:34:10.010 --> 00:34:12.340
If you want to hard code
something and make sure that it

00:34:12.340 --> 00:34:15.400
absolutely behaves a certain way,
you don't want anybody

00:34:15.400 --> 00:34:19.080
changing the behavior,
you can of course set it in code,

00:34:19.120 --> 00:34:22.530
which would then override anything
that's presented on the command

00:34:22.530 --> 00:34:24.000
line or in the defaults database.

00:34:24.000 --> 00:34:27.470
Very important for deployment.

00:34:29.300 --> 00:34:30.700
All right.

00:34:30.780 --> 00:34:32.980
So now let's talk about bottlenecks.

00:34:32.980 --> 00:34:34.740
You've gotten your application together.

00:34:34.740 --> 00:34:36.530
You've got it ready for deployment.

00:34:36.580 --> 00:34:39.810
And let's say that actually you've put
it in what I would call a staging area.

00:34:39.820 --> 00:34:42.980
You have your development area,
your staging area,

00:34:42.980 --> 00:34:46.400
which is as identical as
possible to your deployment area.

00:34:46.400 --> 00:34:49.160
And you want to do some stress
testing on your application.

00:34:49.160 --> 00:34:53.210
And you start running through your
application and trying to simulate that

00:34:53.210 --> 00:34:56.000
load that you anticipate for deployment.

00:34:56.000 --> 00:34:59.310
And you find that it's not performing
the way that you need it to.

00:34:59.430 --> 00:35:02.720
These are what we call bottlenecks,
bottlenecks to performance.

00:35:02.720 --> 00:35:06.710
And these are the various areas that
you would want to investigate where

00:35:06.710 --> 00:35:10.000
that performance bottleneck might be.

00:35:10.210 --> 00:35:13.340
So first is the application, of course,
in your code.

00:35:13.340 --> 00:35:16.540
Maybe your subroutine that
gets called with every request

00:35:16.550 --> 00:35:20.210
response is not performing well
and you need to optimize that.

00:35:20.470 --> 00:35:21.920
How about database?

00:35:22.070 --> 00:35:24.390
Queries going to the database
aren't optimized well,

00:35:24.750 --> 00:35:28.640
especially if you haven't done
table indexing or things like that.

00:35:28.800 --> 00:35:30.080
How about your CPU?

00:35:30.130 --> 00:35:32.870
Let's say that the traffic that
you put on a single host is just

00:35:32.870 --> 00:35:34.740
way too much for that processor.

00:35:34.790 --> 00:35:38.580
You need to add a second processor
or offload it to a second box.

00:35:38.690 --> 00:35:41.420
How about virtual memory, or RAM?

00:35:41.660 --> 00:35:43.680
When you launch your application,
it's going to try and

00:35:43.720 --> 00:35:44.550
load itself into RAM.

00:35:44.670 --> 00:35:47.830
As you fetch objects from the database,
it's going to try and keep that in RAM.

00:35:47.900 --> 00:35:51.240
If you don't have enough of it,
it's going to start swapping to

00:35:51.240 --> 00:35:53.430
the database using virtual memory.

00:35:53.440 --> 00:35:56.380
That swapping severely
degrades your performance,

00:35:56.460 --> 00:35:59.200
so you don't want that to happen.

00:35:59.290 --> 00:36:01.000
How about the performance of the network?

00:36:01.060 --> 00:36:04.020
Your application is running fine,
your database is fine,

00:36:04.020 --> 00:36:07.330
but the communication between
the two is severely strained,

00:36:07.390 --> 00:36:09.530
so you need to increase
your network bandwidth.

00:36:09.650 --> 00:36:14.080
These are areas that you want to
focus on in looking for the problems.

00:36:14.120 --> 00:36:17.840
The application in the database will
be... bottlenecks will be talked about.

00:36:17.860 --> 00:36:21.370
I'll talk to you in great detail in the
Optimizing Your Applications session,

00:36:21.490 --> 00:36:22.530
session 410.

00:36:22.590 --> 00:36:24.070
That's Thursday, I think.

00:36:24.220 --> 00:36:25.440
You want to look at that.

00:36:25.480 --> 00:36:28.270
The other three areas
I'll address briefly.

00:36:28.280 --> 00:36:33.940
Really, the hard part of this situation,
this performance problem,

00:36:33.960 --> 00:36:37.040
is in actually identifying with
confidence where the problem is.

00:36:37.120 --> 00:36:39.220
The solution is usually more intuitive.

00:36:39.310 --> 00:36:43.170
I'd like to just talk about a few
utilities that you could use to

00:36:43.170 --> 00:36:45.900
address these separate bottlenecks.

00:36:46.960 --> 00:36:51.460
So on the Unix platform, Solaris,
Mac OS X, Linux, for example,

00:36:51.470 --> 00:36:54.740
for looking at your CPU and
how it's performing,

00:36:54.740 --> 00:36:55.760
using PS or top.

00:36:55.760 --> 00:36:58.320
I like top especially because
it's a dynamic update and you can

00:36:58.320 --> 00:36:59.900
actually have the columns sorting.

00:36:59.900 --> 00:37:03.280
So you can see what percentage
of the processor you're using

00:37:03.280 --> 00:37:04.900
at any one point in time.

00:37:05.040 --> 00:37:10.470
UpTime tells you in three separate
numbers what the ratio of the processes

00:37:10.470 --> 00:37:15.900
that your processor is using over 5,
10, and 15 seconds.

00:37:15.900 --> 00:37:19.170
That's also very useful to
get just a quick snapshot of

00:37:19.170 --> 00:37:21.200
how your processor is doing.

00:37:21.500 --> 00:37:24.990
How about monitoring your VM usage,
the swapping that goes on?

00:37:24.990 --> 00:37:28.770
Well, there's VMstat or VM_stat,
depending on which Unix

00:37:28.890 --> 00:37:31.220
platform you're on,
to help look in great detail how

00:37:31.230 --> 00:37:36.160
the paging is doing and where the
large amounts of paging is going on.

00:37:36.160 --> 00:37:43.170
You can also use, again, PS and TOP,
because it also tells you how much real

00:37:43.310 --> 00:37:45.590
RAM and how much virtual memory you're
utilizing for a particular process.

00:37:46.730 --> 00:37:50.460
Your network: packet sniffers,
there's a lot of them out there.

00:37:50.670 --> 00:37:53.400
Solaris comes with,
I think it's called Snoop,

00:37:53.490 --> 00:37:55.670
Mac OS X Server comes with TCP dump.

00:37:55.810 --> 00:37:57.870
Packet sniffers are very useful
at looking at the packets

00:37:57.870 --> 00:38:00.660
going across your network,
measuring how large they are,

00:38:00.750 --> 00:38:03.430
and looking at the bandwidth that your
network has to see if you can either

00:38:03.430 --> 00:38:06.700
eliminate the traffic on your network or
increase the bandwidth of your network.

00:38:06.850 --> 00:38:09.160
There's also netstat.

00:38:10.250 --> 00:38:14.000
On NT and Windows 2000,
they have more GUI-oriented tools,

00:38:14.130 --> 00:38:17.030
which are very good,
Task Manager and Performance Monitor,

00:38:17.120 --> 00:38:20.180
to look at both your
CPU and your RAM usage.

00:38:20.300 --> 00:38:21.770
The network.

00:38:21.790 --> 00:38:24.000
Network Monitor comes with NTServer.

00:38:24.100 --> 00:38:25.200
It's a very useful tool.

00:38:25.200 --> 00:38:28.360
They have some great filters
that help you sniff the lines and

00:38:28.370 --> 00:38:34.200
isolate different types of packets
and different destination packets.

00:38:34.200 --> 00:38:36.510
So it's very useful.

00:38:37.190 --> 00:38:39.830
Alright,
we've talked about a lot of things,

00:38:39.830 --> 00:38:42.090
sort of been over the map here and there.

00:38:42.720 --> 00:38:45.980
What I'd like to do is sort of try
to bring everything we've talked

00:38:45.990 --> 00:38:47.100
about together in a scenario.

00:38:47.100 --> 00:38:51.040
I'll sort of talk through how
I might consider a sample deployment

00:38:51.040 --> 00:38:54.090
and what the thought process
is that I might go through.

00:38:54.560 --> 00:39:07.810
So here's my setup to start with.

00:39:07.880 --> 00:39:07.880
I have a few customers.

00:39:07.880 --> 00:39:07.880
My site is deployed,
but maybe it's not very

00:39:07.880 --> 00:39:07.880
popular at the moment,
so that's what the red circles are,

00:39:07.880 --> 00:39:07.880
my browsers to my site.

00:39:08.700 --> 00:39:13.970
Here I have an HTTP server called Oberon,
and of course it's utilizing

00:39:13.970 --> 00:39:17.810
the API adapter for
performance and efficiency.

00:39:18.060 --> 00:39:21.990
I have one host, called Europa,
running two instances of my application.

00:39:21.990 --> 00:39:25.050
Now, no matter what,
no matter even if one instance

00:39:25.050 --> 00:39:28.360
could really handle the traffic
that I anticipate on my website,

00:39:28.380 --> 00:39:32.180
I still want to run two instances
for purposes of redundancy.

00:39:32.180 --> 00:39:34.160
If I'm running one
instance and it goes down,

00:39:34.170 --> 00:39:35.300
my site goes down.

00:39:35.300 --> 00:39:38.060
If I'm running two,
my site may slow down,

00:39:38.230 --> 00:39:41.030
but it doesn't go down if one goes down.

00:39:42.500 --> 00:39:45.850
So that's why I would have
at least two on my site.

00:39:45.880 --> 00:39:47.390
And then, of course,
Phobos is my database.

00:39:47.460 --> 00:39:49.820
You're always having that database.

00:39:49.990 --> 00:39:55.840
Alright, so let's say then, well,
I'm very concerned about my users

00:39:55.840 --> 00:40:00.140
being able to access directly Europa,
or access directly my database.

00:40:00.140 --> 00:40:03.130
You notice there was
nothing there previously,

00:40:03.130 --> 00:40:03.900
probably did that a little too soon,
whoops,

00:40:03.900 --> 00:40:07.050
you don't want to hit that button.

00:40:07.970 --> 00:40:12.900
I'm a bit concerned about the access
that my users have directly to Europa.

00:40:12.900 --> 00:40:14.940
Actually,
they could even talk to WoTAS-D directly,

00:40:14.960 --> 00:40:17.660
couldn't they, in this case,
and get the XML configuration

00:40:17.660 --> 00:40:18.400
information.

00:40:18.400 --> 00:40:20.180
That's not a good thing.

00:40:20.330 --> 00:40:23.810
So what I might want to do is put
a firewall between my users and my

00:40:23.810 --> 00:40:27.200
actual deployment architecture here,
my deployment site.

00:40:27.200 --> 00:40:31.160
Now, with my firewall,
I would only want to allow in

00:40:31.160 --> 00:40:35.900
connections to Oberon on port 80,
port 80 being the default

00:40:35.900 --> 00:40:37.200
port for HTTP servers.

00:40:37.200 --> 00:40:40.420
And that way, even if the users try
to connect to Europa,

00:40:40.420 --> 00:40:43.140
the packets won't go
through the firewall.

00:40:43.290 --> 00:40:45.200
So that's a very secure setup.

00:40:45.200 --> 00:40:48.270
So the first thing I would be concerned
about is implementing a firewall

00:40:48.510 --> 00:40:50.200
between your users and your website.

00:40:50.200 --> 00:40:52.200
Secure that web.

00:40:54.170 --> 00:40:58.870
Now let's say that our site becomes
more popular and we get more users.

00:40:59.170 --> 00:41:02.250
Well,
let's say I use an old AIX box in the

00:41:02.250 --> 00:41:08.410
back of the room and the more users put
my HTTP server under load and I'm going

00:41:08.510 --> 00:41:10.090
to have to add a second HTTP server.

00:41:10.090 --> 00:41:12.860
Well, the advantage of the
WebObjects architecture,

00:41:12.860 --> 00:41:15.890
the way that it's modularized
to these three tiers,

00:41:15.950 --> 00:41:18.670
is that you can scale
the tiers individually.

00:41:18.670 --> 00:41:19.890
Very flexible.

00:41:20.190 --> 00:41:23.120
So what I'm going to do is I'm
going to add a second HTTP server.

00:41:23.240 --> 00:41:25.130
I'm going to call it Oberon2.

00:41:25.130 --> 00:41:27.050
And notice that it's also
using the API adapter.

00:41:27.100 --> 00:41:28.590
Of course,
I'm going to have to rename the

00:41:28.730 --> 00:41:34.540
first one to Oberon1 because,
well, it just sort of syncs up better.

00:41:34.660 --> 00:41:36.610
Now, wait a minute.

00:41:37.160 --> 00:41:38.330
Well, there's a problem here.

00:41:38.400 --> 00:41:42.970
The firewall is only allowing
packets into Oberon on port 80.

00:41:43.020 --> 00:41:47.690
I suppose what I could do is change
it to allow in packets on Oberon

00:41:47.690 --> 00:41:50.630
1 and Oberon 2 through port 80,
but then the user would have

00:41:50.630 --> 00:41:52.990
to choose which one to hit,
and then it really wouldn't be

00:41:52.990 --> 00:41:56.100
scaling my site very well in a very
intuitive fashion for the customer.

00:41:56.100 --> 00:42:06.100
So I'm going to introduce
something called Round Robin DNS.

00:42:06.100 --> 00:42:08.860
And Round Robin DNS server is
going to sit there and listen for

00:42:08.860 --> 00:42:11.940
packets for Oberon on port 80,
and then it's going to take care of

00:42:12.060 --> 00:42:14.100
managing it across your HTTP servers.

00:42:14.100 --> 00:42:16.100
Okay, great.

00:42:16.100 --> 00:42:18.100
Let's see what's next.

00:42:18.170 --> 00:42:19.290
All right, we get more servers.

00:42:19.290 --> 00:42:20.070
We're more popular.

00:42:20.070 --> 00:42:21.080
Things are going great.

00:42:21.090 --> 00:42:24.020
And now Europa is having a
hard time handling the traffic.

00:42:24.100 --> 00:42:25.090
Well, let's see.

00:42:25.150 --> 00:42:26.080
So that means we can't
handle the traffic.

00:42:26.140 --> 00:42:29.750
So we can scale our application tier,
and we're going to add Callisto

00:42:29.750 --> 00:42:31.700
and two more instances,
of course,

00:42:31.700 --> 00:42:35.100
on Callisto for the same reason
that I spoke of previously,

00:42:35.100 --> 00:42:38.100
always having at least
two instances per host.

00:42:38.100 --> 00:42:40.640
But, you know,
I would say something here,

00:42:40.780 --> 00:42:43.760
and that is if you can afford it,
not only would I have two

00:42:43.790 --> 00:42:47.420
instances on every host at least,
I would always have at least two

00:42:47.490 --> 00:42:49.980
hosts serving in my application layer.

00:42:50.100 --> 00:42:52.320
Because just like if
an instance goes down,

00:42:52.320 --> 00:42:55.100
my host site doesn't go down
with the second instance,

00:42:55.110 --> 00:42:56.100
what if the whole box goes down?

00:42:56.100 --> 00:43:00.100
You always want that redundancy,
that second server there,

00:43:00.180 --> 00:43:03.100
handling the site, even though it's going
to be at a slower pace,

00:43:03.160 --> 00:43:05.080
until you can get that
second box back up.

00:43:05.100 --> 00:43:09.100
So really, if you can afford it,
I would always have two of those there.

00:43:10.670 --> 00:43:14.510
Alright, let's see,
we have redundancy on the HTTP server,

00:43:14.610 --> 00:43:18.430
redundancy on the application tier,
let's see what else.

00:43:18.530 --> 00:43:19.540
Database.

00:43:19.650 --> 00:43:20.600
Let's consider the database.

00:43:20.600 --> 00:43:23.350
Well, if we really want our
site to be very robust,

00:43:23.400 --> 00:43:27.600
we're going to need to come up with a
solution for if the database goes down.

00:43:27.600 --> 00:43:30.600
What we can do, oh, firewall, sorry.

00:43:30.600 --> 00:43:33.600
Alright, actually that's the wrong order.

00:43:33.600 --> 00:43:36.600
Let's see if we, alright,
pretend the firewall didn't come up.

00:43:36.600 --> 00:43:39.580
Alright, so we have,
what we want to do is have

00:43:39.580 --> 00:43:41.250
a second database come in.

00:43:41.690 --> 00:43:44.800
And we'll call it DIMOS in this case,
so Phobos and DIMOS.

00:43:44.830 --> 00:43:47.270
DIMOS is going to be a mirror of Phobos.

00:43:47.450 --> 00:43:50.070
Every insert, update,
and delete that occurs in Phobos

00:43:50.170 --> 00:43:53.810
is going to occur in DIMOS so that
they're identical at all times.

00:43:53.900 --> 00:43:57.610
And that way, if Phobos goes down,
you can now write your applications

00:43:57.670 --> 00:44:02.760
with WebObjects for five to seamlessly
connect to DIMOS and continue processing

00:44:02.990 --> 00:44:06.080
while your sysadmin is paged to
look into why Phobos went down,

00:44:06.080 --> 00:44:08.170
get Phobos back up,
get them back in sync,

00:44:08.350 --> 00:44:10.260
and then you're back in business again.

00:44:10.310 --> 00:44:12.790
So it's a very flexible,
scalable architecture

00:44:12.870 --> 00:44:14.960
across the three tiers.

00:44:14.960 --> 00:44:19.000
Now this firewall that sort
of popped up in the middle,

00:44:19.000 --> 00:44:22.240
not every site has it,
but I like to separate with a

00:44:22.240 --> 00:44:26.220
firewall my public resources
from my private resources.

00:44:26.220 --> 00:44:28.520
Again, it just makes things extra secure.

00:44:28.520 --> 00:44:32.080
You recall we don't want people
walking away with our database servers,

00:44:32.080 --> 00:44:36.140
and we don't want people being
able to hack into them as well.

00:44:36.140 --> 00:44:39.560
So what I might do is add a
second firewall between my--

00:44:39.720 --> 00:44:43.640
excuse me-- HTTP servers,
my application servers,

00:44:43.640 --> 00:44:47.180
and only let packets through
to my application servers.

00:44:47.180 --> 00:44:50.210
That way, if some way someone's able to
tunnel in through port 80 and

00:44:50.210 --> 00:44:54.360
get access or control of Oberon,
Oberon cannot connect under

00:44:54.390 --> 00:44:58.100
any circumstance to Phobos
with that firewall there.

00:44:58.100 --> 00:45:00.760
So again, an additional barrier.

00:45:00.760 --> 00:45:04.620
All right, so that type of setup is
generally called a border zone,

00:45:04.620 --> 00:45:08.180
where you separate your public
resources from your private

00:45:08.180 --> 00:45:10.160
resources physically with a firewall.

00:45:10.240 --> 00:45:13.250
And of course, separating it into your
private network and of course,

00:45:13.250 --> 00:45:16.360
your public access internet or intranet.

00:45:16.360 --> 00:45:19.140
All right, so that's a sample deployment.

00:45:19.140 --> 00:45:21.080
That's pretty much it.

00:45:21.080 --> 00:45:23.770
But you know,
I realize there's still really one

00:45:23.840 --> 00:45:27.060
question that I haven't answered.

00:45:27.060 --> 00:45:29.880
And that is the now what.

00:45:29.920 --> 00:45:31.720
How many instances do I run?

00:45:31.720 --> 00:45:33.870
How do I know how much RAM?

00:45:33.880 --> 00:45:36.660
What should my architecture be?

00:45:36.660 --> 00:45:38.200
I think it's a big question.

00:45:38.200 --> 00:45:40.980
And about a year ago,
I started-- I started asking

00:45:40.980 --> 00:45:42.740
myself how I could figure it out.

00:45:42.740 --> 00:45:45.950
Is there some magic formula that we
could come up with that would tell

00:45:45.950 --> 00:45:48.200
us how many instances to start with?

00:45:48.200 --> 00:45:50.660
And by golly,
there's absolutely no way to do it.

00:45:50.660 --> 00:45:53.120
But I think-- it's true.

00:45:53.120 --> 00:45:54.390
I think we came close, though.

00:45:54.400 --> 00:45:55.520
Let's give it a try.

00:45:55.560 --> 00:45:57.020
It's all theoretical.

00:45:57.070 --> 00:45:58.930
But we created the deployment calculator.

00:45:58.940 --> 00:46:02.120
This is the first public rollout
of the deployment calculator.

00:46:02.120 --> 00:46:03.920
We're going to ask
Melissa to show it to us.

00:46:03.920 --> 00:46:04.860
All right.

00:46:04.860 --> 00:46:06.360
Melissa.

00:46:10.970 --> 00:46:12.900
This isn't actually a Mac box.

00:46:12.900 --> 00:46:16.270
We're proving that we
work on all systems.

00:46:18.530 --> 00:46:24.920
Actually, I'm going to talk a little bit
more about troubleshooting stuff.

00:46:24.920 --> 00:46:29.750
You can, when you start an application,
if you start it from a shell

00:46:29.930 --> 00:46:33.780
and start it with the command
or the command line parameter,

00:46:33.790 --> 00:46:36.580
woe debugging enables,
it'll print out all kinds

00:46:36.600 --> 00:46:37.740
of stuff to that shell.

00:46:37.740 --> 00:46:41.010
So if you're trying to debug
problems in your application

00:46:41.010 --> 00:46:43.710
or in your configuration,
this can be helpful.

00:46:43.760 --> 00:46:47.490
But we've got a deployment calculator,
and what we're going to try and

00:46:47.490 --> 00:46:52.400
calculate is how many instances of
our application we need running.

00:46:52.400 --> 00:46:55.360
And there's a few,
this is courtesy of Dirk,

00:46:55.480 --> 00:47:00.050
and there's a few things
we've determined are kind of,

00:47:00.050 --> 00:47:01.690
sort of, they're the, you know,

00:47:03.700 --> 00:47:05.700
Stats?

00:47:05.700 --> 00:47:06.200
Measurements?

00:47:06.330 --> 00:47:07.700
They're the measurements
that are important.

00:47:07.700 --> 00:47:11.220
These are the things that really
sort of influence how many instances

00:47:11.220 --> 00:47:12.950
of your application you run.

00:47:13.320 --> 00:47:16.470
Things like loop time,
which is how much time does it take

00:47:16.470 --> 00:47:21.800
your application to run through the
critical path of the incoming request.

00:47:21.800 --> 00:47:25.040
Max wait time is sort of how long do
we want our users to have to wait?

00:47:25.040 --> 00:47:30.230
How long do we think our users will be
willing to wait to receive a page back?

00:47:30.230 --> 00:47:34.860
How many transactions is my site
likely to be receiving per day?

00:47:35.960 --> 00:47:40.340
and sort of on the more WebObjects side,
how long does it take for

00:47:40.410 --> 00:47:42.900
my sessions to time out?

00:47:43.010 --> 00:47:47.600
How big is my application when it
has one session that's sort of gone

00:47:47.600 --> 00:47:52.330
through what we have deemed the sort
of standard path through our site?

00:47:52.440 --> 00:47:56.310
How big is it when 10
sessions have gone through?

00:47:57.070 --> 00:48:00.680
How long are users likely
to spend on any given page?

00:48:00.730 --> 00:48:05.380
And how many pages are they
likely to hit during a visit?

00:48:06.290 --> 00:48:09.640
And why don't we say that we
think it's going to take about

00:48:09.760 --> 00:48:13.100
a second for our application to
run through the critical loop.

00:48:13.160 --> 00:48:19.200
And we think, yeah,
we'll make our users wait four seconds.

00:48:19.300 --> 00:48:21.110
And I don't know.

00:48:22.310 --> 00:48:27.220
Half a million transactions a day
sounds reasonable for a brand new site,

00:48:27.220 --> 00:48:28.800
doesn't it?

00:48:28.800 --> 00:48:31.790
Think positive.

00:48:33.370 --> 00:48:36.330
And we'll set, you know,
30 minute timeout.

00:48:36.390 --> 00:48:39.500
We think people will
be around for a while.

00:48:42.220 --> 00:48:47.850
The initialized with one
session is at 22 megabytes,

00:48:47.880 --> 00:48:50.100
with 10 sessions at 30 megabytes.

00:48:50.830 --> 00:48:54.750
And we think people will take about
20 seconds to look at each page,

00:48:54.750 --> 00:48:57.500
read over the stuff, and decide what they
want to do from here.

00:48:57.640 --> 00:49:03.790
They'll probably hit, I don't know,
15 pages per visit.

00:49:04.400 --> 00:49:09.730
We scroll down to the bottom,
hit the calculate button, and it says,

00:49:09.730 --> 00:49:15.980
"Ooh, there's your results." It says you
probably want six instances running.

00:49:16.550 --> 00:49:17.610
There's more stuff down here.

00:49:17.620 --> 00:49:22.940
This is sort of... This is the...
How many transactions will...

00:49:22.940 --> 00:49:25.400
How many requests will be queued?

00:49:25.430 --> 00:49:25.800
Okay.

00:49:25.800 --> 00:49:29.800
In a typical cycle to not
exceed the maximum wait time.

00:49:29.860 --> 00:49:32.500
This is, you know, your transactions per
day divided up into,

00:49:32.500 --> 00:49:35.750
well, hours, minutes, seconds.

00:49:35.870 --> 00:49:39.100
Your ideal instance count is six,
as we said.

00:49:39.230 --> 00:49:40.480
This is some RAM calculations.

00:49:40.510 --> 00:49:42.900
Each session is going
to take about 80 meg.

00:49:42.990 --> 00:49:45.550
Your application... 0.8.

00:49:45.770 --> 00:49:49.600
That's a large session.

00:49:49.600 --> 00:49:50.680
You're doing something wrong there.

00:49:50.890 --> 00:49:54.010
You've got your entire
database in there now.

00:49:54.420 --> 00:49:58.740
The application itself
takes about 21.2 meg.

00:49:58.860 --> 00:50:01.800
The average session length
looks like it's going to be

00:50:01.800 --> 00:50:06.330
a little over 300 seconds.

00:50:06.330 --> 00:50:06.330
You'll deal with, you know,

00:50:06.540 --> 00:50:07.490
Sessions per hour.

00:50:07.510 --> 00:50:10.490
Yeah, I'm just trying to
translate it into English.

00:50:10.500 --> 00:50:14.880
A little over 1,300 sessions
per hour and you'll have,

00:50:14.890 --> 00:50:19.040
on average,
819 sessions active at any given time,

00:50:19.040 --> 00:50:26.170
which means you'll have about 778 megs
worth of application at any given time.

00:50:26.170 --> 00:50:28.510
Over in this list, we sort

00:50:28.960 --> 00:50:32.960
show you what the maximum that this
configuration can handle is likely to be,

00:50:32.960 --> 00:50:35.130
the maximum number of
transactions per day,

00:50:35.130 --> 00:50:39.920
transactions per hour, you know,
what the maximum session length is.

00:50:40.030 --> 00:50:43.920
And when we calculate these numbers,
it's done on a bell curve where we,

00:50:43.920 --> 00:50:47.160
or it's done by averaging
out transactions over a day.

00:50:47.160 --> 00:50:51.090
We all know that there's likely to,
the transactions are actually likely

00:50:51.090 --> 00:50:54.240
to be distributed on a bell curve,
you know, California wakes up and the

00:50:54.240 --> 00:50:56.170
internet slows down type of thing.

00:50:56.260 --> 00:50:59.570
So what you wanna do is you
wanna make sure that your site,

00:50:59.570 --> 00:51:04.200
that these numbers here are over
the top of your bell curve so that

00:51:04.200 --> 00:51:07.910
whatever configuration you've got,
the maximum number of things

00:51:07.910 --> 00:51:13.140
you can handle according to this
transaction is at least what's

00:51:13.140 --> 00:51:17.110
listed in this last column here.

00:51:17.600 --> 00:51:18.500
What about the memory?

00:51:18.500 --> 00:51:20.530
And the memory,
so that's your yellow column

00:51:20.630 --> 00:51:21.980
is your max transactions.

00:51:22.000 --> 00:51:24.900
And so your memory,
that's the maximum amount of memory

00:51:24.900 --> 00:51:28.930
that you'd be using if you had the
maximum number of transactions.

00:51:29.020 --> 00:51:32.730
So I would always run
enough instances so that my,

00:51:32.770 --> 00:51:36.080
it's called my spike,
transactions per day,

00:51:36.100 --> 00:51:39.040
are higher than your top,
the top of your highest bell curve,

00:51:39.230 --> 00:51:41.710
and I would always run my
memory so I have enough memory

00:51:41.710 --> 00:51:44.450
across my whole website,
and this is all logical,

00:51:44.460 --> 00:51:48.620
and logical distribution, so that I'm,
so I would set up with a minimum

00:51:48.620 --> 00:51:54.740
on this case of three gigabytes of
RAM on my website with six instances

00:51:54.740 --> 00:51:58.020
as long as my bell curve stayed
below two million hits per day.

00:51:58.020 --> 00:51:59.640
So what do you think?

00:52:00.370 --> 00:52:00.640
Yeah.

00:52:00.640 --> 00:52:01.640
That look good?

00:52:01.640 --> 00:52:07.730
Why don't you, why don't you click on the
transaction per day hyperlink?

00:52:08.260 --> 00:52:11.820
So there's a glossary of all these terms,
how I've calculated it,

00:52:11.820 --> 00:52:14.850
how we've calculated it,
and it walks you through how to use

00:52:14.850 --> 00:52:16.390
it and what each of the terms mean.

00:52:16.510 --> 00:52:17.930
I provide the formula at the bottom.

00:52:17.990 --> 00:52:21.170
The source code is there so you
can modify your own formula.

00:52:21.290 --> 00:52:22.150
It's all theoretical.

00:52:22.600 --> 00:52:26.200
Please use it and give me
feedback so we can modify it.

00:52:26.200 --> 00:52:30.200
And it's on your CD in your bag,
your WebObjects demo CD.

00:52:30.200 --> 00:52:32.200
So it's right there,
the project and everything.

00:52:32.200 --> 00:52:34.200
So have at it.

00:52:34.200 --> 00:52:35.200
Let me know.

00:52:35.200 --> 00:52:36.200
Thank you.

00:52:36.200 --> 00:52:37.200
All right.

00:52:37.200 --> 00:52:39.360
Thank you, Melissa.

00:52:40.200 --> 00:52:40.900
Oh, let's see.

00:52:40.900 --> 00:52:42.830
Well, that was exciting.

00:52:42.960 --> 00:52:44.940
Public--it took a--really,
it's been like about a

00:52:44.940 --> 00:52:46.760
year working on that.

00:52:46.760 --> 00:52:48.900
So again,
it's in your CD--it's in your bag,

00:52:48.900 --> 00:52:55.680
and you can also download it
from enterprise.apple.com at

00:52:55.680 --> 00:52:55.680
WWDC2000 if you don't get it there.

00:52:55.800 --> 00:52:57.080
All right, so roadmap.

00:52:57.140 --> 00:52:58.350
So where do we go from here?

00:52:58.510 --> 00:52:59.500
We covered a lot of material.

00:52:59.500 --> 00:53:01.040
There's a lot more for deployment.

00:53:01.180 --> 00:53:04.400
WebObjects optimization,
Thursday at 9:00 AM.

00:53:04.400 --> 00:53:07.250
Maximizing performance and
also performance metrics,

00:53:07.370 --> 00:53:10.980
I think, is very applicable to deployment
because you've got to tell where

00:53:10.980 --> 00:53:13.010
your performance bottlenecks are.

00:53:13.090 --> 00:53:15.790
So you might want to
make sure and go there.

00:53:16.440 --> 00:53:19.440
For more information,
you've seen these URLs before,

00:53:19.770 --> 00:53:22.430
this information before
in the previous slides.

00:53:22.540 --> 00:53:25.770
Don't forget about the
BOF tomorrow night.

00:53:26.080 --> 00:53:27.800
Who to contact?

00:53:28.000 --> 00:53:31.050
Please send all deployment calculator
information to Wode feedback,

00:53:31.150 --> 00:53:32.990
but there's also,
in the introduction portion

00:53:33.100 --> 00:53:36.170
of the deployment calculator,
there's information where to

00:53:36.170 --> 00:53:39.820
forward feedback on that as well,
but you can forward it there.

00:53:40.000 --> 00:53:41.500
and finally Q&A.

00:53:41.500 --> 00:53:45.000
But wait,
I get to ask the first question.

00:53:45.000 --> 00:53:46.600
You can put the lights up.

00:53:46.610 --> 00:53:52.020
What was the relationship between all
names of the hosts in this presentation?

00:53:52.050 --> 00:53:53.430
Deimos, Phobos, yes?

00:53:53.660 --> 00:53:54.660
Greek mythology.

00:53:54.670 --> 00:53:56.080
Greek mythology, very good.

00:53:56.080 --> 00:53:56.740
I'll accept that.

00:53:56.910 --> 00:53:59.710
But there are moons of the solar system.