WEBVTT

00:00:03.370 --> 00:00:04.740
My name is Eric Noyau.

00:00:04.760 --> 00:00:07.300
I'm going to talk to
you about Advanced COF.

00:00:07.460 --> 00:00:12.270
I'm actually working in the field.

00:00:12.320 --> 00:00:15.850
I'm the manager for the high
services team in France.

00:00:15.930 --> 00:00:20.570
That's in Europe.

00:00:20.570 --> 00:00:20.570
That's on the other side of the Atlantic.

00:00:20.940 --> 00:00:23.660
Eric Noyau, Director,
Enterprise Objects Frameworkduino,

00:00:23.700 --> 00:00:26.640
I actually have a really hard session
there because I'm just between

00:00:26.860 --> 00:00:28.890
direct-to-web and direct-to-Java client.

00:00:28.900 --> 00:00:31.660
So two technologies where
you don't write code,

00:00:31.660 --> 00:00:33.900
you write rules, and it's all nice.

00:00:33.900 --> 00:00:36.630
And I'm going to talk to
you about how to build an

00:00:36.630 --> 00:00:38.710
application writing all the code.

00:00:38.970 --> 00:00:42.900
You know, I'm a developer, so I code.

00:00:42.900 --> 00:00:43.850
That's what I do for a living.

00:00:43.890 --> 00:00:47.800
So I'm going to talk
to you about the code.

00:00:47.970 --> 00:00:49.900
Where do you put it?

00:00:49.900 --> 00:00:50.900
What kind of code do you write?

00:00:50.900 --> 00:00:55.710
And how do you build a
WebObjects application?

00:00:57.720 --> 00:01:00.840
I'm going to bring you from
the beginning to the end.

00:01:00.850 --> 00:01:04.350
Building a WebObjects application,
you start from somewhere,

00:01:04.350 --> 00:01:06.200
you narrow the thing,
and you go to the end.

00:01:06.240 --> 00:01:09.720
I'm going to try to do
that in a logical way,

00:01:09.760 --> 00:01:12.360
in a way you can build an application.

00:01:12.450 --> 00:01:14.110
It's not...

00:01:14.600 --> 00:01:34.300
[Transcript missing]

00:01:35.970 --> 00:01:38.100
So where do you start?

00:01:38.100 --> 00:01:41.200
Well, most of the cases,
you start from your data.

00:01:41.200 --> 00:01:45.340
Your application,
you want to manipulate some data.

00:01:45.350 --> 00:01:48.020
You already maybe have some data
in the database you want to access.

00:01:48.020 --> 00:01:52.280
Or you're writing a
complete new application.

00:01:52.380 --> 00:01:55.480
and you want to create
the complete database,

00:01:55.560 --> 00:01:58.240
put your data in it,
and control everything.

00:01:58.240 --> 00:02:00.560
So the first thing you
have to think about is,

00:02:00.560 --> 00:02:03.040
what is the data you're
going to manipulate?

00:02:03.040 --> 00:02:04.960
What is your data model?

00:02:04.960 --> 00:02:11.640
Some people like doing nice graphics
with plenty of boxes all over the

00:02:11.640 --> 00:02:13.990
place and nice lines between them.

00:02:14.000 --> 00:02:18.360
Some other people just scramble
some stuff on a piece of paper,

00:02:18.360 --> 00:02:20.690
and some other people
just start to write code.

00:02:22.300 --> 00:02:28.020
I'm mostly in the last thing,
but that's a bad thing.

00:02:28.020 --> 00:02:29.260
You don't want to start like this.

00:02:29.280 --> 00:02:32.180
You probably want to start by
understanding your data model and

00:02:32.250 --> 00:02:34.170
by understanding where you're going.

00:02:36.020 --> 00:02:39.100
So what are the pitfalls when
you are doing your data model?

00:02:39.100 --> 00:02:44.380
What are the problems you
can have with EOF when you...

00:02:44.630 --> 00:02:47.740
Just even before using EOF,
when you are at your data model,

00:02:47.740 --> 00:02:51.260
you are doing your data model,
what are the things you

00:02:51.260 --> 00:02:53.300
need to think about?

00:02:54.290 --> 00:02:58.820
First of all, your design,
when you do a design and you expose

00:02:58.940 --> 00:03:04.630
things in tables all over the place,
there is always performance implication.

00:03:04.900 --> 00:03:07.220
If you explode everything and
you have tables everywhere,

00:03:07.320 --> 00:03:08.600
well,
every time you're going to do a fetch,

00:03:08.600 --> 00:03:11.980
you're going to do 60 joints,
and your database is going to be, "Uh,

00:03:11.980 --> 00:03:12.600
what is it?

00:03:12.600 --> 00:03:15.090
Why do I need to do all these
joints all over the place?

00:03:15.090 --> 00:03:20.800
It's hard." In some other ways,
for example here, the blobs.

00:03:20.800 --> 00:03:24.690
If you have a big chunk of data,
and this big chunk of data are in

00:03:24.810 --> 00:03:28.800
the same table as some other data,
every time you're going to fetch a Neo,

00:03:28.800 --> 00:03:29.800
you're going to fetch this blob.

00:03:29.800 --> 00:03:33.400
Well, if this blob is a nice image,
and 2 megabytes in size,

00:03:33.430 --> 00:03:36.660
every time you want to show a
list of Neo's on the screen,

00:03:36.930 --> 00:03:41.010
you're going to fetch for every
one of those 2 megabytes data that

00:03:41.170 --> 00:03:42.740
you actually don't really need.

00:03:42.800 --> 00:03:47.230
So it's actually easier to take this
blob and to move it in a separate table,

00:03:47.230 --> 00:03:49.800
so you don't have to
load it all the time.

00:03:49.800 --> 00:03:50.800
You just load it when you need it.

00:03:50.800 --> 00:03:53.800
Same thing with inheritance.

00:03:53.800 --> 00:03:55.800
Inheritance is nice.

00:03:55.800 --> 00:03:58.800
It's a nice way of thinking about,
you know, to partition my memory.

00:03:58.800 --> 00:04:02.630
I'm going to take this
example that we talked about,

00:04:02.660 --> 00:04:07.300
that I heard about before,
about the person, the student,

00:04:07.550 --> 00:04:08.800
and the professor.

00:04:08.800 --> 00:04:11.210
It's nice, you separate that in a
nice inheritance tree,

00:04:11.260 --> 00:04:14.270
and you create one table for each,
and you do nice joints

00:04:14.270 --> 00:04:15.720
all over the place.

00:04:16.090 --> 00:04:18.800
Well, if it's one layer deep,
probably okay.

00:04:18.800 --> 00:04:20.030
Two layers deep?

00:04:20.030 --> 00:04:23.760
Hmm, it starts getting, you know,
a little harder.

00:04:23.800 --> 00:04:27.800
If you go really deep, well,
it's a huge performance impact.

00:04:27.800 --> 00:04:29.800
And you're going to suffer.

00:04:29.800 --> 00:04:30.800
Your application is
going to suffer for that.

00:04:30.800 --> 00:04:36.200
So you probably want to coalesce some
of these classes together to make

00:04:36.220 --> 00:04:40.800
some compromise in your design in
order to get some more performances.

00:04:40.940 --> 00:04:44.800
But you have to think about this
when you build your data model.

00:04:45.770 --> 00:04:49.490
Triggers, stored procedure,
we can deal with it with EOF.

00:04:49.750 --> 00:04:51.880
There is some way to
call stored procedures.

00:04:52.060 --> 00:04:53.920
There is some way to deal with triggers.

00:04:53.920 --> 00:04:55.600
But those things are
making your job harder.

00:04:55.620 --> 00:04:57.240
If you're writing a
database from scratch,

00:04:57.240 --> 00:04:59.000
if you're writing your
model from scratch,

00:04:59.000 --> 00:05:02.420
don't put any of these in there,
except eventually for modification

00:05:02.440 --> 00:05:03.780
dates or creation dates.

00:05:03.780 --> 00:05:05.440
You can use triggers for these things.

00:05:05.440 --> 00:05:08.260
But otherwise, try to avoid those.

00:05:08.260 --> 00:05:11.860
If you have some in your model,
you can deal with them.

00:05:11.870 --> 00:05:13.670
For triggers,
every time you save something and

00:05:13.670 --> 00:05:16.340
you know there is some triggers,
you have to invalidate everything

00:05:16.340 --> 00:05:18.620
that's around them and refetch
them from the database,

00:05:18.620 --> 00:05:21.760
because the database
changes behind your back.

00:05:21.800 --> 00:05:24.860
Stored procedure is just a
different kind of invocation,

00:05:24.860 --> 00:05:27.300
invoking something to get some data back.

00:05:27.320 --> 00:05:32.160
So you have to write some code to do
the invocation of the stored procedure.

00:05:32.540 --> 00:05:35.530
And on the data model
at last but not least,

00:05:35.560 --> 00:05:38.360
you have to think about how
your primary key are generated.

00:05:38.530 --> 00:05:41.800
Primary key are the core.

00:05:41.800 --> 00:05:43.960
Every time you create an object,
you're going to need

00:05:43.960 --> 00:05:44.960
a primary key for it.

00:05:45.070 --> 00:05:50.530
And there is multiple ways to deal
with primary keys with the EOF.

00:05:50.590 --> 00:05:55.880
So when you build your data model,
you have to see what are the choices you

00:05:55.880 --> 00:05:58.510
have and which one you are going to pick.

00:05:58.810 --> 00:06:01.900
The first, the easy way,
is just let the adapter handle it.

00:06:02.210 --> 00:06:06.300
The GDB-C adapter knows how to do it.

00:06:06.430 --> 00:06:10.100
The different plugins can
do things differently.

00:06:10.100 --> 00:06:13.300
But basically the adapter knows
how to create a primary key.

00:06:13.320 --> 00:06:17.230
If you make a primary key in your model,
any kind of integer,

00:06:17.230 --> 00:06:18.500
it's just going to work.

00:06:18.500 --> 00:06:22.310
In WebObjects 5,
there are actually performance

00:06:22.310 --> 00:06:24.300
improvements in this area.

00:06:24.570 --> 00:06:28.000
Because the adapter is
getting this thing in batches,

00:06:28.040 --> 00:06:29.100
and not just one by one.

00:06:29.100 --> 00:06:31.420
So if you insert a thousand objects,
there is not a thousand

00:06:31.420 --> 00:06:32.490
run trips to the database.

00:06:32.510 --> 00:06:34.100
Just, I don't know.

00:07:12.860 --> 00:07:23.780
Eric Noyau is a huge
24-byte binary thing,

00:07:23.790 --> 00:07:27.730
and that's it.

00:07:27.760 --> 00:07:29.090
And you save a primary
key in the database.

00:07:29.100 --> 00:07:33.700
Sometimes, if you need to present a
primary key to the user,

00:07:33.700 --> 00:07:35.100
that's definitely not a good choice.

00:07:35.100 --> 00:07:36.640
Of course.

00:07:36.640 --> 00:07:38.760
Exadecimal big primary key.

00:07:39.110 --> 00:07:40.760
Remember that.

00:07:41.740 --> 00:07:46.500
If you have some existing data,
and the primary key generation in there

00:07:46.500 --> 00:07:52.020
is specific and doing some weird thing,
taking actual current values that exist

00:07:52.020 --> 00:07:56.290
in the object and put them together,
you can implement the delegate database

00:07:56.290 --> 00:08:00.800
context new primary key and just return
a dictionary from there that will

00:08:00.800 --> 00:08:02.880
be the primary key of your object.

00:08:03.410 --> 00:08:07.690
The easy way,
if you want to do something simple,

00:08:07.780 --> 00:08:11.600
is you can mark the primality,
an attribute of your object,

00:08:11.600 --> 00:08:15.380
and fill them yourself when the object
is inserted in your editing context.

00:08:15.380 --> 00:08:16.820
Say, "Oh, there is no primality in there.

00:08:16.820 --> 00:08:21.210
Let's put something and get to
something from wherever you want."

00:08:23.870 --> 00:08:28.970
So, you've built your data model,
or you've thought about it,

00:08:28.970 --> 00:08:31.360
you know where all the
data is going to be,

00:08:31.460 --> 00:08:36.100
or you're going to design the data,
and now you have to build a model file.

00:08:36.220 --> 00:08:40.970
You know all this magic in Direct-to-Web
and Direct-to-Java Client is all

00:08:41.120 --> 00:08:45.540
happening because there is a model file,
and just, there is rules extracting

00:08:45.640 --> 00:08:47.310
stuff from there.

00:08:47.420 --> 00:08:50.830
So you need a model file,
and a model file is actually

00:08:50.830 --> 00:08:53.070
not that easy to get right.

00:08:53.220 --> 00:08:57.840
So my first tip on your model is,
spend time on your new model.

00:08:57.920 --> 00:09:00.240
Just don't try to rush it,
and just write on your model,

00:09:00.240 --> 00:09:02.600
and go write your application.

00:09:02.700 --> 00:09:05.370
Just, you know,
look at your new model and

00:09:05.370 --> 00:09:07.380
click on all the inspectors.

00:09:07.480 --> 00:09:10.040
If there is checkbox you
don't understand in there,

00:09:10.100 --> 00:09:12.360
well, maybe you should understand it.

00:09:12.440 --> 00:09:14.280
And maybe you should look
in the documentation,

00:09:14.280 --> 00:09:17.600
try to find what this thing is doing,
or writing a little test application,

00:09:17.600 --> 00:09:21.770
trying to see what this thing is
doing when it's changing the other.

00:09:22.360 --> 00:09:22.360
You can also compare your reactions.

00:09:22.360 --> 00:09:25.620
The reactions you're building.

00:09:25.720 --> 00:09:31.320
We ship some examples of your model
in WebObjects in the examples.

00:09:31.460 --> 00:09:34.410
Just compare the reactions you have
with the reactions in the model.

00:09:34.640 --> 00:09:38.440
Try to think how do they fit
the same way in your design,

00:09:38.440 --> 00:09:40.280
is it the same kind of reaction chip?

00:09:40.310 --> 00:09:44.240
And look at the reaction chip and see
in the inspector if they look similar.

00:09:44.240 --> 00:09:48.210
If something is different,
try to think why it's different.

00:09:48.450 --> 00:09:50.650
And finally,
just take this model and use one of these

00:09:50.890 --> 00:09:52.830
great direct-to-something technologies.

00:09:52.980 --> 00:09:56.700
And just drop your model in there,
run a direct-to-Java client application.

00:09:56.810 --> 00:09:59.240
If the application looks
like something you can use,

00:09:59.420 --> 00:10:01.050
your model is probably okay.

00:10:01.190 --> 00:10:03.790
If your application
looks like it's weird,

00:10:03.790 --> 00:10:06.200
there are entities that
you don't expect there,

00:10:06.200 --> 00:10:09.100
but it's in a separate window,
it should be in the same window,

00:10:09.170 --> 00:10:12.400
maybe you did not express the
relationship exactly right.

00:10:12.480 --> 00:10:18.840
The heuristics in direct-to-Java
clients particularly are really

00:10:18.840 --> 00:10:25.190
excellent and are giving you a
good overview of your data model.

00:10:26.120 --> 00:10:32.300
Okay, so I have a small application that
I actually built most of it in the plane.

00:10:32.330 --> 00:10:34.350
It's nice to have a power book.

00:10:34.440 --> 00:10:37.960
It fits on the tray.

00:10:38.390 --> 00:10:41.880
So I built a small project,
a small project,

00:10:41.880 --> 00:10:47.580
and inside this thing is yet another bug
tracker system with a different database,

00:10:47.580 --> 00:10:49.220
a different model,
a different everything.

00:10:49.220 --> 00:10:53.090
So just everybody needs
a bug tracker system,

00:10:53.090 --> 00:10:55.340
and everybody wants his own.

00:10:55.340 --> 00:10:56.040
It's opening.

00:10:56.180 --> 00:10:58.840
Double click on it.

00:10:58.840 --> 00:11:00.680
Go.

00:11:00.690 --> 00:11:02.170
Wake up.

00:11:04.370 --> 00:11:08.460
Okay, so that's a good start for a demo.

00:11:08.560 --> 00:11:09.300
There we go.

00:11:09.300 --> 00:11:11.520
I have it two times now.

00:11:11.520 --> 00:11:13.910
It's probably completely swapped out.

00:11:14.030 --> 00:11:18.120
Okay,
so it's just a really simple model file.

00:11:20.800 --> 00:11:22.400
OK.

00:11:22.400 --> 00:11:24.020
I'm going to make it bigger.

00:11:24.020 --> 00:11:25.180
You have a bug.

00:11:25.180 --> 00:11:26.620
The bug has some component.

00:11:26.620 --> 00:11:28.450
It is part of a component.

00:11:28.460 --> 00:11:31.260
There are some priorities, some state,
some commands on this

00:11:31.260 --> 00:11:32.800
bug from some users.

00:11:32.800 --> 00:11:34.880
A user on the bug,
a user on the commands,

00:11:34.880 --> 00:11:36.220
a user on the component.

00:11:36.340 --> 00:11:39.720
This kind of reaction shape, actually,
this one is the simplest

00:11:39.720 --> 00:11:40.950
one I can show you.

00:11:40.970 --> 00:11:43.100
There's something simpler.

00:11:43.100 --> 00:11:44.380
So it's a really simple model.

00:11:44.380 --> 00:11:49.660
But I just want to use this model
to show you some little things.

00:11:49.660 --> 00:11:55.670
As you know, in a database,
usually a little database of bugs exists.

00:11:55.870 --> 00:12:00.420
you have something like five
different priorities in your data,

00:12:00.420 --> 00:12:02.560
and you have maybe 10,000 bugs.

00:12:02.620 --> 00:12:08.700
So something you probably don't want,
if you go look at priority here,

00:12:08.700 --> 00:12:13.160
is the relationship to bug should
probably not be a class property.

00:12:13.160 --> 00:12:17.290
It should probably not be
part of your priority object.

00:12:17.750 --> 00:12:21.070
Because if it's part of
your priority object,

00:12:21.400 --> 00:12:24.940
every time you add a new
bug with this priority,

00:12:25.400 --> 00:12:27.650
well,
we need to add this bug into the array

00:12:27.650 --> 00:12:29.540
of all the bugs of this priority.

00:12:29.610 --> 00:12:32.670
So you're going to fetch all
these objects just in order to

00:12:32.670 --> 00:12:34.780
insert this thing into this array.

00:12:34.780 --> 00:12:37.780
And it's a costly fetch.

00:12:37.800 --> 00:12:40.200
So this relationship,
the inverse relationship

00:12:40.200 --> 00:12:41.260
is very important.

00:12:41.260 --> 00:12:43.780
The inverse relationship, from a bug,
you want to know what the priority

00:12:43.780 --> 00:12:45.100
is just by following the pointer.

00:12:45.100 --> 00:12:47.940
But the other way,
you probably don't want it.

00:12:48.040 --> 00:12:50.000
So the first reason is performance.

00:12:50.000 --> 00:12:52.330
You have this thing,
and you have this huge array,

00:12:52.340 --> 00:12:53.830
and you don't want to fetch it.

00:12:53.960 --> 00:12:57.290
The second reason is... The priority,
you probably want to fetch

00:12:57.310 --> 00:12:59.450
it at the beginning when
you launch your application.

00:12:59.480 --> 00:13:01.920
You want to fetch all the priorities,
all the states,

00:13:01.920 --> 00:13:05.950
and this information that's
standard for all the bugs,

00:13:05.970 --> 00:13:07.380
and you can modify.

00:13:07.380 --> 00:13:10.300
And you probably want to share
this information by everybody,

00:13:10.300 --> 00:13:13.140
by every single leading
context in your application.

00:13:13.180 --> 00:13:16.220
Every single user in your application
is going to use the same objects.

00:13:16.280 --> 00:13:20.020
And in order to do that,
you use a shared leading context.

00:13:20.020 --> 00:13:24.330
So shared leading context is a
place where you can put objects,

00:13:24.600 --> 00:13:27.170
and every other leading
context in the application can

00:13:27.170 --> 00:13:28.510
use these objects directly.

00:13:28.560 --> 00:13:32.200
You only have one copy of
these objects in memory.

00:13:32.280 --> 00:13:36.620
What that means is your object
in your own leading context can

00:13:36.620 --> 00:13:38.010
have a pointer to this priority.

00:13:38.040 --> 00:13:40.490
You know,
your bug has a pointer to this priority.

00:13:40.540 --> 00:13:42.630
But then you are in a
shared leading context.

00:13:42.740 --> 00:13:43.830
You have all these shared objects.

00:13:43.940 --> 00:13:46.520
And imagine that you have
a pointer to all the bugs.

00:13:46.660 --> 00:13:48.270
Well, all the bugs where?

00:13:48.280 --> 00:13:52.230
All the bugs in the leading
context of this session or the

00:13:52.430 --> 00:13:53.700
leading context of this session?

00:13:54.200 --> 00:13:54.850
You don't have the information.

00:13:54.920 --> 00:14:01.420
So you cannot share an object that has a
relationship to data that's not shared.

00:14:01.420 --> 00:14:03.480
So it's a one-way.

00:14:03.500 --> 00:14:09.960
You have a one-way point direction going
from your objects into a shared object.

00:14:09.960 --> 00:14:12.250
But from the shared object,
you cannot go out to an

00:14:12.250 --> 00:14:13.600
object that's not shared.

00:14:13.600 --> 00:14:17.670
So that's why this thing
is not a class property.

00:14:19.100 --> 00:14:24.220
I still like to put the
relationship in the model though,

00:14:24.220 --> 00:14:26.700
because it's actually useful
information that's something

00:14:26.700 --> 00:14:29.500
you can actually use when you're
programming at the EEO access level.

00:14:29.500 --> 00:14:31.080
You can say,
"I want the relationship named

00:14:31.080 --> 00:14:34.350
'Bugs'," and grab it from the
model and do some stuff with it,

00:14:34.580 --> 00:14:37.500
you know, qualifying a fetch and
something like this.

00:14:37.500 --> 00:14:40.940
If you don't have the relationship, well,
you have to build it first and its order.

00:14:41.000 --> 00:14:43.360
It's nice to have it in the model file.

00:14:44.640 --> 00:14:46.630
Let's go back to the slide.

00:14:46.690 --> 00:14:50.500
So what I'm going to say on
this model is really simple.

00:14:54.030 --> 00:14:57.900
So, once you've built your model file,
you have to think about your logic.

00:14:58.030 --> 00:15:02.900
Where are you going to put your logic?

00:15:02.900 --> 00:15:05.900
What kind of code do you write?

00:15:05.900 --> 00:15:09.030
You have plenty of code to
write in your application,

00:15:09.030 --> 00:15:13.900
and some of them are more database code,
some of them are more UI code,

00:15:13.900 --> 00:15:15.900
some of them are somewhere in the middle.

00:15:15.900 --> 00:15:19.110
So I'm going to review the
different class of code you have

00:15:19.110 --> 00:15:21.880
to write in your application,
and where do you put it.

00:15:22.150 --> 00:15:24.680
And I'm going to start with--

00:15:25.020 --> 00:15:26.400
something I call EO logic.

00:15:26.400 --> 00:15:30.680
So it's basically everything
that's on your enterprise objects.

00:15:30.800 --> 00:15:33.670
The first choice you make with an
enterprise object is probably knowing

00:15:33.670 --> 00:15:35.100
what is your enterprise object?

00:15:35.190 --> 00:15:36.720
Why do you subclass?

00:15:36.780 --> 00:15:40.600
You have choices there.

00:15:40.730 --> 00:15:43.250
First choice is you can
use a Neo Generic Record.

00:15:43.480 --> 00:15:48.340
A Neo Generic Record is
just-- it's just a dictionary.

00:15:48.340 --> 00:15:51.720
It's just something you have some keys,
some values, and it's just somewhere

00:15:51.720 --> 00:15:53.400
where you put your data.

00:15:53.400 --> 00:15:57.110
There is no code, no logic.

00:15:57.470 --> 00:15:58.640
It's just your data.

00:15:58.730 --> 00:16:00.430
So you just don't put code on this.

00:16:00.630 --> 00:16:06.300
It's useful for some little objects where
you don't want to put some logic on it.

00:16:06.300 --> 00:16:10.150
For example, my priority object,
probably I don't want to put code on it.

00:16:10.260 --> 00:16:14.110
I can just make it a Neo Generic
Record and forget about it.

00:16:16.660 --> 00:16:20.540
You can subclass EOG if you
want to add logic to it,

00:16:20.660 --> 00:16:24.710
or you can use a custom
Enterprise Object that's actually

00:16:24.770 --> 00:16:30.000
a superclass of EOG to build more
powerful full-fledged Objects.

00:16:30.190 --> 00:16:34.650
The choices of subclassing
EOG or custom Enterprise Objects

00:16:34.810 --> 00:16:37.500
is just a matter of taste,
actually.

00:16:37.500 --> 00:16:41.310
In WebObjects 4.5,
there was a huge performance

00:16:41.610 --> 00:16:45.500
improvement if you were
subclassing EOG for long reasons.

00:16:45.660 --> 00:16:48.490
But in WebObjects 5,
you don't really care.

00:16:48.560 --> 00:16:50.490
You can subclass one or the other.

00:16:50.500 --> 00:16:55.830
The only difference between the two
is EOG by default is implementing a

00:16:55.830 --> 00:17:01.150
feature that's called deferred faulting,
and custom Enterprise Objects by default

00:17:01.170 --> 00:17:04.490
don't implement deferred faulting.

00:17:04.500 --> 00:17:09.900
Custom Enterprise Objects are
actually my favorite because

00:17:09.960 --> 00:17:11.500
I like to control everything.

00:17:11.500 --> 00:17:13.100
You know, I'm a freak.

00:17:13.100 --> 00:17:14.490
I'm writing code.

00:17:14.750 --> 00:17:16.380
But EOG just works.

00:17:16.500 --> 00:17:19.490
And actually,
the first thing you do when you

00:17:19.570 --> 00:17:23.500
create an Enterprise Object is
you go into your modeler,

00:17:23.540 --> 00:17:26.650
you click the button and generate
the stub for the classes,

00:17:26.650 --> 00:17:29.490
and basically you write your accessors.

00:17:29.500 --> 00:17:34.500
This is a standard accessor for
something that's extending EOG.

00:17:34.500 --> 00:17:39.490
You have something returning a
title and something setting a title.

00:17:39.530 --> 00:17:42.530
You see that I'm subclassing EOG,
and I have this weird code

00:17:42.530 --> 00:17:46.490
to store value for key,
take stored value for key.

00:17:46.530 --> 00:17:47.500
I'll get into that in a minute.

00:17:49.980 --> 00:17:53.210
Because this is the way the
framework is accessing your object.

00:17:53.350 --> 00:17:57.010
And you have to understand how the
framework is accessing your object

00:17:57.010 --> 00:17:58.690
to know where to put your code.

00:17:58.690 --> 00:18:01.420
Because if you don't put
your code in the right place,

00:18:01.490 --> 00:18:04.900
the framework is not going to
invoke it the way you want it.

00:18:04.900 --> 00:18:07.380
So, accessors are really important.

00:18:07.380 --> 00:18:11.830
You have the accessor to set the value
and the accessor to get the value.

00:18:11.830 --> 00:18:13.880
And you can put code in there.

00:18:13.900 --> 00:18:17.260
If somebody tells you that you
cannot put code in an accessor,

00:18:17.260 --> 00:18:19.900
it's going to break or lose,
that's not true.

00:18:19.990 --> 00:18:20.890
You can put code in there.

00:18:20.930 --> 00:18:22.840
But you have to be really careful
when you put code in there.

00:18:22.900 --> 00:18:24.900
It's the story.

00:18:24.990 --> 00:18:27.900
And why do you have to be careful?

00:18:27.900 --> 00:18:32.870
Because key value coding is
actually relatively complex.

00:18:32.900 --> 00:18:36.890
You have two ways of accessing your EOs.

00:18:36.890 --> 00:18:41.880
And the frameworks we have are accessing
the EOs in these two different ways.

00:18:41.900 --> 00:18:43.900
If you imagine a stack.

00:18:43.900 --> 00:18:47.980
You have your database at the bottom
and then you access and then you

00:18:47.980 --> 00:18:51.410
control and then the interface and
web objects or any kind of Java,

00:18:51.410 --> 00:18:51.810
Client thing.

00:18:51.900 --> 00:18:54.820
Your EO is sitting in the middle.

00:19:12.070 --> 00:19:16.000
The other one is changing your
object because the user wants to.

00:19:16.000 --> 00:19:21.000
What you don't want is to put some
code in the... to add any code

00:19:21.000 --> 00:19:23.000
when you're fetching the object.

00:19:23.000 --> 00:19:25.530
Probably not a good idea,
because when you're fetching a bunch

00:19:25.530 --> 00:19:27.890
of objects with some performance,
if you put some code there

00:19:27.940 --> 00:19:31.200
for every object you fetch,
you're going to touch this code and

00:19:31.200 --> 00:19:33.000
repeat this thing over and over.

00:19:33.000 --> 00:19:35.990
So stored value for key,
usually you don't put code in there.

00:19:36.000 --> 00:19:39.000
On the other side,
when you use key value coding,

00:19:39.100 --> 00:19:41.800
when somebody is invoking your
object via key-value coding,

00:19:41.800 --> 00:19:46.180
and not stored with key-value coding,
you may do something.

00:19:46.180 --> 00:19:48.690
Like, let's take a simple example.

00:19:48.700 --> 00:19:50.980
You have a modification
date in your object.

00:19:50.980 --> 00:19:54.860
And when somebody changes
the title of a bug,

00:19:54.860 --> 00:19:59.400
it's changing the modification
date on the set title.

00:19:59.400 --> 00:20:02.180
If you do set title on your EO,
it's going to say the

00:20:02.180 --> 00:20:05.960
modification date equals now,
and put that into your EO.

00:20:06.010 --> 00:20:10.100
So changing the title is
actually changing two attributes.

00:20:10.100 --> 00:20:12.100
But when you fetch the
object from the database,

00:20:12.100 --> 00:20:15.600
you don't want this set title
method to be code and change

00:20:15.720 --> 00:20:16.840
your modification date.

00:20:16.840 --> 00:20:18.260
You're not modifying the object.

00:20:18.260 --> 00:20:20.540
You're just fetching it.

00:20:21.180 --> 00:20:24.170
So you have to understand how key
value coding works and how key value

00:20:24.170 --> 00:20:30.310
coding invokes the things in your
object to know where to put your code.

00:20:31.090 --> 00:20:33.670
So the first thing is, key value coding,
the user interface,

00:20:33.720 --> 00:20:36.840
is accessing your object.

00:20:36.870 --> 00:20:37.920
What is it calling?

00:20:38.210 --> 00:20:39.280
In what order?

00:20:39.340 --> 00:20:42.560
So the first thing key value
coding tries to find is a method

00:20:43.640 --> 00:20:45.400
with the name of your attribute.

00:20:45.440 --> 00:20:46.860
You know, name.

00:20:46.950 --> 00:20:50.060
Actually,
one that's missing on this slide,

00:20:50.080 --> 00:20:51.560
everywhere,
everywhere where you see name,

00:20:51.560 --> 00:20:53.160
you can replace that by get name.

00:20:53.300 --> 00:20:55.800
We're in Java,
so we support the get version also.

00:20:55.800 --> 00:20:59.160
So it's looking for a method name,
get name or name.

00:20:59.500 --> 00:21:01.770
And then it's looking for the
instance variable directly,

00:21:01.910 --> 00:21:04.350
trying to access it and see
if I can put something into

00:21:04.350 --> 00:21:06.500
this instance variable name,
name.

00:21:06.520 --> 00:21:10.660
That's a bad name for
an attribute to explain.

00:21:10.660 --> 00:21:13.670
Well, it's name, name, okay.

00:21:15.160 --> 00:21:17.100
I'll use "label" next time.

00:21:17.140 --> 00:21:22.610
And then, Key ValueCoding still is
trying to find a method name,

00:21:22.610 --> 00:21:29.100
_name, _getName,
or an attribute name _name.

00:21:29.320 --> 00:21:31.480
As opposed to this,

00:21:32.300 --> 00:21:51.100
[Transcript missing]

00:21:52.220 --> 00:21:53.850
We can show everything now.

00:21:53.950 --> 00:21:58.170
So imagine you have your objects,
and you have two methods on it.

00:21:58.270 --> 00:22:02.580
One name, name, and the other one name,
underscore name.

00:22:02.890 --> 00:22:04.860
If you are in key value coding,
the one that's going

00:22:04.860 --> 00:22:05.940
to be called is name.

00:22:06.080 --> 00:22:08.900
If you are in start key value coding,
that's going to be underscore name.

00:22:08.920 --> 00:22:10.240
And you can play with this thing.

00:22:10.240 --> 00:22:12.350
You can turn them around.

00:22:12.910 --> 00:22:17.760
Something important in
WebObjects 5 is it's pure Java.

00:22:17.900 --> 00:22:22.120
So all these methods need to be public.

00:22:22.180 --> 00:22:25.450
If you want key value coding to access
your instance variable directly,

00:22:25.470 --> 00:22:28.240
you better make it public.

00:22:28.490 --> 00:22:33.020
If your object is not in a package,
we'll find it.

00:22:33.070 --> 00:22:34.420
We have ways to find it.

00:22:34.540 --> 00:22:38.730
But if you put your object inside
a package and you make your

00:22:38.730 --> 00:22:41.990
instance variable protected,
WebObjects has no way

00:22:42.060 --> 00:22:43.300
to access this thing.

00:22:43.350 --> 00:22:45.530
When we were in Objective-C with
the bridge and stuff,

00:22:45.580 --> 00:22:48.340
we were going from under you and
just putting the value from there.

00:22:48.400 --> 00:22:52.240
But we can't do that anymore.

00:22:52.240 --> 00:22:54.590
We don't want to add some
stuff in the VM to do that.

00:22:54.700 --> 00:22:58.300
It's just not clean.

00:22:58.560 --> 00:23:02.530
Think about the protected
and public and private,

00:23:02.720 --> 00:23:06.490
because it's going to change the
way your objects are accessed

00:23:06.610 --> 00:23:07.600
if they are in a package.

00:23:07.660 --> 00:23:09.270
If they are not in a package,
don't bother about it.

00:23:09.370 --> 00:23:12.800
It's just going to work like before,
except if you mark them private

00:23:12.900 --> 00:23:14.140
so nobody can access them.

00:23:14.140 --> 00:23:16.830
But if they are in a package
and protected-- not in

00:23:16.830 --> 00:23:19.930
a package and protected,
we can still access them.

00:23:21.880 --> 00:23:24.950
You can change the way
key-value coding is working by

00:23:24.950 --> 00:23:26.390
implementing one of those methods.

00:23:26.590 --> 00:23:29.570
Those are static methods,
but we do some magic

00:23:29.580 --> 00:23:30.960
so they are inherited.

00:23:31.090 --> 00:23:34.840
So you can inherit this classic method.

00:23:34.950 --> 00:23:39.150
So you can say,
"I don't want the frameworks to access

00:23:39.150 --> 00:23:44.250
my field directly." "I just want
the framework to use the methods,

00:23:44.320 --> 00:23:47.580
never the field." And should
you use stored accessor,

00:23:47.580 --> 00:23:50.360
if you return no to this method,
there is no difference between key-value

00:23:50.360 --> 00:23:51.600
coding and stored key-value coding.

00:23:51.650 --> 00:23:54.550
They all do exactly the
key-value coding thing.

00:23:54.640 --> 00:23:57.190
There is no more stored key-value coding.

00:24:00.490 --> 00:24:02.420
So you have your
accessorize in your object,

00:24:02.420 --> 00:24:06.840
and the second thing you usually
put in your object is validation.

00:24:06.850 --> 00:24:11.020
When the user changes
something in the interface,

00:24:11.020 --> 00:24:13.940
you want to make sure that the
thing is changing is correct.

00:24:13.960 --> 00:24:16.780
So you write a validation method.

00:24:16.970 --> 00:24:18.700
There is multiple sort
of validation method.

00:24:18.700 --> 00:24:21.300
The first one is just
validating an attribute.

00:24:21.300 --> 00:24:28.100
So in this case, it's really bad,
validating an attribute named, whatever.

00:24:28.140 --> 00:24:31.450
So just write a method, validate name,
taking a string,

00:24:31.500 --> 00:24:34.640
because my name is a string,
and returning a string.

00:24:34.640 --> 00:24:36.460
And this thing is throwing an exception.

00:24:36.460 --> 00:24:40.780
And you just do whatever you want to
check on this particular attribute,

00:24:40.780 --> 00:24:45.140
and return the name if it's fine,
and throw an exception.

00:24:45.190 --> 00:24:49.170
And it's validation exception,
if there is any problem with the name.

00:24:49.290 --> 00:24:51.380
So here,
I don't want-- the name of a component

00:24:51.550 --> 00:24:56.890
should contain more than four characters,
just a random rule that I made up.

00:24:59.710 --> 00:25:05.600
These methods are actually called
automatically when you save your object.

00:25:05.640 --> 00:25:09.600
There is something that's running
around and checking all these things.

00:25:09.630 --> 00:25:12.880
These are also called
if you use WebObjects,

00:25:12.880 --> 00:25:14.080
when you bind with WebObjects.

00:25:14.110 --> 00:25:16.100
WebObjects is actually
calling these methods.

00:25:16.100 --> 00:25:18.800
If you use a display group,
display group is also

00:25:18.800 --> 00:25:20.100
calling these methods.

00:25:20.100 --> 00:25:25.100
But when you save, it's called anyway,
so you're sure that this thing can go

00:25:25.100 --> 00:25:27.750
to the database without being checked.

00:25:28.440 --> 00:25:31.680
Second kind of validation
method is validation method that

00:25:31.900 --> 00:25:34.210
takes your object as a whole.

00:25:34.300 --> 00:25:38.420
So when you delete an object,
here I'm just doing something,

00:25:38.460 --> 00:25:42.870
it's not really interesting validation,
but I'm just checking that

00:25:42.870 --> 00:25:45.340
I'm still in the component,
and my component could

00:25:45.380 --> 00:25:47.890
have sub-components,
and I just want to make sure

00:25:47.890 --> 00:25:52.300
that you cannot remove a parent,
you have to remove all the child first.

00:25:52.300 --> 00:25:56.300
So you cannot suppress a component
name if you have something.

00:25:56.300 --> 00:25:59.300
So this validation for delete
is actually a little different,

00:25:59.300 --> 00:26:02.220
it's not taking any values,
it's just checking

00:26:02.220 --> 00:26:03.300
your object as a whole.

00:26:03.300 --> 00:26:07.300
It's not returning anything,
if it returns something,

00:26:07.300 --> 00:26:10.280
it returns nothing or
throws an exception.

00:26:12.970 --> 00:26:15.240
So, validation.

00:26:15.250 --> 00:26:18.970
Validate value, taking the value.

00:26:18.970 --> 00:26:21.800
Take a value, return a value,
and throw an exception.

00:26:21.870 --> 00:26:27.070
That's important because in Java,
a method signature is actually

00:26:27.070 --> 00:26:30.800
the name of the method and
the type of its arguments.

00:26:30.800 --> 00:26:34.970
The type of the return value
is not part of the signature.

00:26:35.080 --> 00:26:38.120
So when we find a validate method,
we don't know what this

00:26:38.120 --> 00:26:38.800
thing is returning.

00:26:38.800 --> 00:26:41.510
So if you write a validate
method that's returning void,

00:26:41.510 --> 00:26:44.850
we're not going to notice,
and you're not returning anything,

00:26:44.850 --> 00:26:46.800
so we're going to put
null in your object.

00:26:46.800 --> 00:26:48.380
So it's returned void,
we don't know where to find this thing,

00:26:48.380 --> 00:26:48.800
we put null.

00:26:48.800 --> 00:26:51.800
And there is no really
easy way to get out of it.

00:26:51.800 --> 00:26:56.800
So make sure that you return something
from a validate attribute method.

00:26:57.860 --> 00:27:01.650
The three methods for violating
your object as a role:

00:27:02.070 --> 00:27:05.750
Validate for delete, Validate for insert,
Validate for save.

00:27:05.870 --> 00:27:07.440
I think they are self-explanatory.

00:27:07.440 --> 00:27:08.920
By default,
Validate for insert and Validate

00:27:08.920 --> 00:27:10.740
for save are doing the same thing.

00:27:10.790 --> 00:27:14.650
In these three methods,
there is something missing

00:27:14.650 --> 00:27:15.880
on all these methods.

00:27:15.880 --> 00:27:20.540
They all throw, they all declare to throw
NSValidationException,

00:27:20.590 --> 00:27:22.680
validation exception.

00:27:22.750 --> 00:27:24.870
In these three methods,
something that's important

00:27:25.050 --> 00:27:26.900
is to call super.

00:27:26.970 --> 00:27:31.180
Because if you don't call super,
the validation that's set in your

00:27:31.280 --> 00:27:33.330
model file is not going to happen.

00:27:33.370 --> 00:27:36.970
Because this is invalidated for save,
that the framework is actually

00:27:36.970 --> 00:27:39.400
going through all your attributes
and saying validate name,

00:27:39.400 --> 00:27:42.720
validate title, validate something,
validate something else.

00:27:42.770 --> 00:27:44.870
So you have to call super.

00:27:45.210 --> 00:27:47.120
If you don't call super,
all the validations that you

00:27:47.120 --> 00:27:50.700
have set in validate something
is not going to be called.

00:27:50.760 --> 00:27:53.460
And all the validation that's
in your model file is not

00:27:53.500 --> 00:27:55.080
going to be called either.

00:27:55.080 --> 00:27:56.720
So that's a pitfall to avoid.

00:27:56.900 --> 00:27:57.950
Yeah.

00:28:01.360 --> 00:28:04.560
Other methods you can
implement on your EO logic.

00:28:04.720 --> 00:28:06.560
Enable to set null for key.

00:28:06.620 --> 00:28:10.070
If you have an attribute
that's an integer,

00:28:10.300 --> 00:28:11.740
we cannot put null in there.

00:28:11.820 --> 00:28:15.400
So if we can't put null,
we're just throwing an exception.

00:28:15.460 --> 00:28:19.090
If you're unable to set null for key,
you can do

00:28:19.290 --> 00:28:21.770
You can do stuff there and
we're not going to throw if

00:28:21.800 --> 00:28:24.400
we implement this method.

00:28:24.450 --> 00:28:26.830
A work from insertion,
when you insert a new object

00:28:27.000 --> 00:28:30.610
into an editing context,
that's actually a place,

00:28:30.670 --> 00:28:34.720
when you create a new object,
the first thing you do, you insert it.

00:28:34.770 --> 00:28:37.010
When you insert a subject,
there may be some stuff you want

00:28:37.240 --> 00:28:41.910
to put some default value in there,
you want to set up a creation date.

00:28:41.960 --> 00:28:46.840
This is actually a method that's really
useful that you can use all the time.

00:28:47.130 --> 00:28:50.530
Away from fetch is once you
fetch from the database,

00:28:50.640 --> 00:28:52.320
the framework is going
to call you and tell you,

00:28:52.320 --> 00:28:54.630
"Hey, you've just been restored
from the database.

00:28:54.850 --> 00:29:00.110
You can set up some value
in you and do some stuff."

00:29:00.840 --> 00:29:08.730
Methods you should probably not override
are the two methods that are used by IoF,

00:29:08.730 --> 00:29:10.700
that are WillChange and WillRead.

00:29:10.700 --> 00:29:16.820
If you're using Eugenio QuickCore,
you never see those methods,

00:29:16.830 --> 00:29:20.700
just subclass and call stored,
value for key, and calling automatically,

00:29:20.700 --> 00:29:20.700
these two methods.

00:29:20.700 --> 00:29:23.700
If you're implementing custom objects,
you see these two methods.

00:29:23.700 --> 00:29:26.850
Before accessing an accessor,
you call WillRead,

00:29:27.060 --> 00:29:29.700
and before setting a value,
you call WillChange.

00:29:29.840 --> 00:29:33.610
These methods tell the IoEditing
contexts looking at your object

00:29:33.610 --> 00:29:37.720
that something is about to change,
or we need to fetch data because

00:29:37.720 --> 00:29:39.700
it's going to need this data.

00:29:40.300 --> 00:29:44.900
These methods are called really, really,
really, really often.

00:29:45.000 --> 00:29:47.930
Every time you access an attribute,
every time you set an attribute,

00:29:48.020 --> 00:29:49.800
you call one or two of them.

00:29:49.960 --> 00:29:53.330
So those are expensive methods
used all over the place.

00:29:53.410 --> 00:29:56.630
If you put code in there,
and this code takes a little while

00:29:56.630 --> 00:30:01.510
to run because you want to do some,
I don't know, something,

00:30:02.010 --> 00:30:03.900
You're going to have a
performance problem right there.

00:30:03.910 --> 00:30:08.390
Because your fetch,
you can easily double the time you're

00:30:08.390 --> 00:30:11.640
taking to fetch a set of objects
from the database by implementing

00:30:11.640 --> 00:30:12.900
three lines of code in there.

00:30:12.900 --> 00:30:17.900
So that's why this method,
you probably should not override them.

00:30:22.280 --> 00:30:28.210
Finally, keep your EOs clean when
you're writing your EOlogic.

00:30:28.700 --> 00:30:58.200
[Transcript missing]

00:31:00.320 --> 00:31:05.720
I'll make one exception for EO Access.

00:31:05.730 --> 00:31:11.860
Also, EO Utilities method that you can
use to do some specific thing.

00:31:11.860 --> 00:31:15.420
You can use those because actually
those are present in EO Access,

00:31:15.440 --> 00:31:18.480
but they are also in EO Distribution
in a different package.

00:31:18.690 --> 00:31:21.860
So you can actually use
them in both places,

00:31:21.860 --> 00:31:26.040
but you have to be careful
by the way you use them.

00:31:26.040 --> 00:31:28.610
If you use the same code in both places,
you can't, obviously.

00:31:28.670 --> 00:31:32.300
So you have to subclass and mix the
code using two different packages.

00:31:32.320 --> 00:31:36.280
But that's the only exception that's OK.

00:31:36.280 --> 00:31:42.340
You can use-- that's the only place where
you can use EO Access specific code.

00:31:46.400 --> 00:31:51.280
So that's the first part of your code,
the code you're writing.

00:31:51.550 --> 00:31:56.380
This is your accessor, your validation,
and your business rules.

00:31:56.380 --> 00:32:00.390
Business rules are just the
code that you need on your EOs,

00:32:00.390 --> 00:32:07.330
just going from one EO to another
and doing-- I want to buy a car.

00:32:07.340 --> 00:32:08.380
I have the car object.

00:32:08.380 --> 00:32:10.100
I have the buyer.

00:32:10.100 --> 00:32:13.740
And I do all this thing
that's part of the business.

00:32:13.740 --> 00:32:15.800
That's part of the thing you do.

00:32:15.990 --> 00:32:19.890
so these are the business for
you can also implement in there

00:32:20.960 --> 00:32:23.180
In the EO logic,
you can assume that everything

00:32:23.180 --> 00:32:24.740
is in the same editing context.

00:32:24.790 --> 00:32:29.500
That's an important assertion because
all your objects are tied together,

00:32:29.510 --> 00:32:32.380
they are all in the same editing context,
with the exception of the shared

00:32:32.380 --> 00:32:35.000
editing context that should
be completely transparent.

00:32:35.200 --> 00:32:36.450
So everything is in the
same editing context,

00:32:36.510 --> 00:32:38.180
so you don't have to bother
with an editing context,

00:32:38.180 --> 00:32:42.020
you don't have to think about,
"I'm in this one, this other one..." No,

00:32:42.020 --> 00:32:45.020
you're all in the same editing context,
and the first thing you do when

00:32:45.020 --> 00:32:48.150
you create one of these objects,
you put it in an editing context,

00:32:48.150 --> 00:32:52.270
so you know it's in there,
and you don't have to think about it.

00:32:52.420 --> 00:32:56.340
This is not the place where you
create new editing contexts,

00:32:56.340 --> 00:32:59.300
or where you move things
from one to the other.

00:32:59.300 --> 00:33:01.640
It's just,
everything is in one editing context,

00:33:01.640 --> 00:33:04.800
and you just write your logic in there.

00:33:07.130 --> 00:33:12.500
So, that's the first part of
the code you're writing.

00:33:13.980 --> 00:33:16.950
The second part,
you probably expect that most

00:33:16.950 --> 00:33:18.840
of you are familiar with this.

00:33:18.900 --> 00:33:20.510
This is your interface logic.

00:33:20.700 --> 00:33:23.440
You know, the thing you use to connect
in WebObjectsBuilder.

00:33:23.500 --> 00:33:24.560
This is classic thing.

00:33:24.560 --> 00:33:26.500
You have an array of bug,
and you have a current bug,

00:33:26.500 --> 00:33:28.460
and you build a whole repetition over it.

00:33:28.550 --> 00:33:31.010
And you have the little
comment here saying,

00:33:31.010 --> 00:33:34.430
type info saying, "Oh,
in this NSArray there is some

00:33:34.430 --> 00:33:38.220
bugs in there." So this is just
interface logic that you use

00:33:38.220 --> 00:33:43.500
to connect in WebObjectsBuilder
when you build your application.

00:33:43.580 --> 00:33:46.420
Nothing really related to EOF in there.

00:33:46.420 --> 00:33:48.410
It's just you have
some arrays of objects,

00:33:48.460 --> 00:33:49.600
and you connect them.

00:33:49.760 --> 00:33:55.660
You have the inside of an
object contain a Boolean value,

00:33:55.660 --> 00:33:58.000
and you want to present
a popup with yes/no.

00:33:58.090 --> 00:34:00.940
That's also something that you
do in your interface logic.

00:34:01.070 --> 00:34:09.090
Just transformation of your
logic from one type to another

00:34:09.120 --> 00:34:13.140
just for display purpose.

00:34:13.190 --> 00:34:15.680
So this goes to the interface logic.

00:34:15.750 --> 00:34:17.710
This should not go into your EO.

00:34:17.950 --> 00:34:21.090
Your EO should not, you know,
it's not because you have a Boolean

00:34:21.090 --> 00:34:24.280
in your EO that your Boolean should
return yes or no as a string.

00:34:24.520 --> 00:34:27.800
It should return a Boolean, not a string.

00:34:27.860 --> 00:34:31.910
The string translation from the Boolean
to the string should be done in the UI.

00:34:33.890 --> 00:34:38.030
So I'll do it rapidly
for the interface logic.

00:34:38.040 --> 00:34:39.890
The interface logic,
you have everything to

00:34:39.890 --> 00:34:42.240
connect in Web Builder.

00:34:42.240 --> 00:34:45.880
You have all your translation
from Boolean to strings.

00:34:45.880 --> 00:34:51.180
You also have, in your interface logic,
everything that's related to the session.

00:34:51.250 --> 00:34:56.440
Classical session is the current user,
who's connected to the application.

00:34:56.440 --> 00:35:01.070
That's a user you need when you invoke
your business logic on your EOs.

00:35:01.440 --> 00:35:05.660
When you have a user
connected to your database,

00:35:05.660 --> 00:35:08.420
and the user say, OK,
I want to buy this piece of hardware

00:35:08.420 --> 00:35:11.590
that you're selling in your catalog,
you want to invoke the

00:35:11.590 --> 00:35:13.620
business logic with this user.

00:35:13.620 --> 00:35:16.020
I want to say,
this user wants to buy this thing,

00:35:16.030 --> 00:35:20.990
or this user's shopping cart,
I want to add this in it.

00:35:21.350 --> 00:35:24.450
So this is in the session,
and this is part of your interface.

00:35:24.540 --> 00:35:26.060
This is part of your application.

00:35:26.060 --> 00:35:28.380
This is your application
keeping this state,

00:35:28.390 --> 00:35:29.170
not your EO.

00:35:29.180 --> 00:35:32.450
You're just manipulating EO,
and your application application

00:35:32.450 --> 00:35:34.790
is getting all this data there.

00:35:35.740 --> 00:35:41.650
So, what's missing in there?

00:35:41.700 --> 00:35:44.790
You know, I have my interface logic,
I have my EO logic,

00:35:44.790 --> 00:35:49.080
and I think it's time to
tell you a little story about

00:35:49.110 --> 00:35:51.500
where do I put the rest.

00:35:52.400 --> 00:36:12.800
[Transcript missing]

00:36:13.660 --> 00:36:18.770
the whole page was one component,
6,000 lines of code.

00:36:18.780 --> 00:36:24.530
Everything in there, fetching,
rearranging, you know,

00:36:24.530 --> 00:36:27.700
and arrays that were sorting,
everything was in there.

00:36:27.720 --> 00:36:31.070
And this was a fairly complex page
with sorting all over the place.

00:36:31.170 --> 00:36:34.070
You know, you click and you sort,
and really hard.

00:36:34.080 --> 00:36:37.740
And of course,
they called me because of one,

00:36:37.950 --> 00:36:38.960
some performance problem.

00:36:38.960 --> 00:36:42.390
And the second thing is,
like everybody else,

00:36:42.560 --> 00:36:43.760
the requirements change.

00:36:43.760 --> 00:36:48.090
And they needed the page in
a slightly different way.

00:36:48.100 --> 00:36:53.020
And it took them six weeks to do the
page in a slightly different way.

00:36:53.020 --> 00:36:57.410
And of course, when we are done, well,
the requirements change again.

00:36:57.420 --> 00:37:02.290
And that's approximately the time
where I arrived to the customer

00:37:02.390 --> 00:37:05.800
site and look at the code,
and it was all monolithic,

00:37:05.820 --> 00:37:07.240
all in one page.

00:37:07.320 --> 00:37:08.270
You don't want that.

00:37:08.370 --> 00:37:10.870
You don't want to put
all your application,

00:37:11.520 --> 00:37:13.500
everything that you do,
everything you fetch,

00:37:13.530 --> 00:37:16.740
everything that you sort, everything,
all these things, you don't want to put

00:37:16.780 --> 00:37:17.880
that in your component,
right?

00:37:17.880 --> 00:37:19.920
Because it's too much.

00:37:20.040 --> 00:37:25.340
Even if you, the people,
some people are subclassing components,

00:37:25.400 --> 00:37:27.780
are making components and
subclassing the component and then

00:37:27.780 --> 00:37:30.200
subclassing the component and then
reusing some part of the code.

00:37:30.200 --> 00:37:30.840
That's already better.

00:37:30.840 --> 00:37:35.570
That's already way nicer because you
can actually reuse some of the code

00:37:35.570 --> 00:37:39.800
that's actually some nice concept.

00:37:41.390 --> 00:37:46.380
Then I told them that it's not a
good place to put these things.

00:37:46.380 --> 00:37:49.740
And I just went there for a day,
because I'm too expensive,

00:37:49.740 --> 00:37:52.080
and they can't have me for two days.

00:37:52.130 --> 00:37:55.020
So I just went there for a day,
fixed some bugs here and there,

00:37:55.020 --> 00:37:57.030
and tell them,
your thing is completely monolithic.

00:37:57.110 --> 00:37:59.400
You don't want to put all
your code in your component.

00:37:59.400 --> 00:38:02.290
Put it somewhere else.

00:38:02.570 --> 00:38:07.090
came back to the customer months after,
they moved all the code,

00:38:07.090 --> 00:38:08.640
they put everything inside their EOs.

00:38:09.700 --> 00:38:24.900
[Transcript missing]

00:38:25.100 --> 00:38:39.800
[Transcript missing]

00:38:40.230 --> 00:38:44.260
The logic, your EO logic,
that's your model, right?

00:38:44.400 --> 00:38:48.450
You have the interface logic,
it's where you put your interface,

00:38:48.500 --> 00:38:49.900
that's your view.

00:38:50.020 --> 00:38:51.380
The components are just your view.

00:38:51.520 --> 00:38:54.810
And you need a place
to put your controller.

00:38:55.080 --> 00:38:59.880
So, what I'd like to suggest is
that you think about this.

00:38:59.880 --> 00:39:03.460
I wrote a little application there
that I want to show you after.

00:39:03.460 --> 00:39:07.830
But, I'm going to make it available
to you so you can look at it and

00:39:07.830 --> 00:39:10.210
I'm interested by the feedback.

00:39:10.340 --> 00:39:12.740
So where do you put the rest?

00:39:12.740 --> 00:39:16.100
You put that in a controller layer
where you can have everything.

00:39:16.100 --> 00:39:18.220
So that's your application logic.

00:39:18.310 --> 00:39:22.100
That's where you fetch, you save,
you eventually cache some information

00:39:22.100 --> 00:39:24.660
because you know that you're going
to need it at some other place.

00:39:24.660 --> 00:39:27.720
This is the place where you deal
with all these editing contexts

00:39:27.720 --> 00:39:31.750
you have all over the place,
nested, not nested, and all these things.

00:39:31.830 --> 00:39:34.850
So you can support a back
button that's working nicely.

00:39:35.090 --> 00:39:37.720
This is the place where you
do all your prefetching,

00:39:37.840 --> 00:39:42.070
where everything that
you do with the OAFs,

00:39:42.120 --> 00:39:44.100
that's basically,
you want to do that in a controller.

00:39:44.100 --> 00:39:46.960
You don't want to do that in
your model and you don't want

00:39:46.960 --> 00:39:48.720
to do that in your interface.

00:39:52.700 --> 00:39:56.580
I'm going to save my
other story for the end.

00:39:57.010 --> 00:40:02.760
So what are the advantages of having

00:40:04.070 --> 00:40:09.230
a controller that's ideally
not dependent on frameworks,

00:40:09.300 --> 00:40:12.610
just a set of objects,
replacing Javaongo objects,

00:40:12.610 --> 00:40:15.750
and not touching anything
in the frameworks,

00:40:15.830 --> 00:40:18.680
just accessing UoF, uof, uaccess.

00:40:18.680 --> 00:40:20.510
And you have methods in there
to build fetch specification,

00:40:20.510 --> 00:40:24.640
to retrieve fetch specification,
to retrieve a set of objects.

00:40:24.640 --> 00:40:28.040
Well,
you can reuse them on the client side.

00:40:28.040 --> 00:40:32.980
All this logic that potentially is in
a component or in some other place.

00:40:32.980 --> 00:40:38.970
If it's just in a subclass of NSObject,
no NSObject anymore, Javaongo object,

00:40:39.030 --> 00:40:42.040
if it's in a subclass of object,
you can reuse it.

00:40:42.040 --> 00:40:44.360
You can move it to the client side.

00:40:44.360 --> 00:40:48.160
And it's a subclass of object,
so actually you can test it without

00:40:48.600 --> 00:40:51.540
running your WebObjects application.

00:40:51.540 --> 00:40:53.860
You don't have to have a woe component,
a woe session, or something.

00:40:53.860 --> 00:40:58.510
You can just write some three
lines of code and test this thing.

00:40:59.210 --> 00:41:10.290
So what I want to show you now is a
little... if I can have this screen on...

00:41:10.860 --> 00:41:14.700
It's this little application
I wrote while I was on the plane.

00:41:14.700 --> 00:41:19.700
So I have here an application that's
just a little simple application.

00:41:19.910 --> 00:41:22.870
It's a bug tracker system.

00:41:22.870 --> 00:41:24.700
I'm going to just run it.

00:41:24.700 --> 00:41:28.700
I think I already compiled it,
so I should just run.

00:41:28.700 --> 00:41:35.530
It's coming.

00:41:46.500 --> 00:41:49.160
Okay,
so it's just simple application where

00:41:49.160 --> 00:41:53.940
you can log in and search for bugs and,
oh, run tests.

00:41:54.160 --> 00:41:58.440
That's actually something
that's really interesting,

00:41:58.440 --> 00:42:00.970
is having all the tests available
from the user interface when

00:42:00.970 --> 00:42:02.870
you're in development mode,
and you click on the button and

00:42:02.870 --> 00:42:03.940
it's running all your tests.

00:42:03.940 --> 00:42:10.010
So I'm going to log in as
a power user on this thing.

00:42:11.200 --> 00:42:19.400
[Transcript missing]

00:42:20.000 --> 00:42:23.100
And what is this thing doing?

00:42:23.100 --> 00:42:24.860
You have user,
so you have the power user.

00:42:24.860 --> 00:42:25.960
They have a green thing.

00:42:25.960 --> 00:42:28.480
And you can edit a user.

00:42:28.480 --> 00:42:33.100
And you know, it's just direct web,
but with code.

00:42:33.300 --> 00:42:35.880
Plenty of line of code to do all this.

00:42:35.880 --> 00:42:37.460
You can sort, of course.

00:42:37.460 --> 00:42:41.430
Reverse sort and all
these kind of things.

00:42:41.440 --> 00:42:44.650
Can go look at the component
that exists in my database.

00:42:44.660 --> 00:42:48.300
So you see that I'm submitting
only bugs for bug tracker.

00:42:48.300 --> 00:42:51.830
and I can create new bugs.

00:42:52.310 --> 00:42:55.580
So I wanted to do an application
that was not just a demo,

00:42:55.580 --> 00:42:59.170
but something that actually worked.

00:42:59.240 --> 00:43:02.410
This application is fully functional
except for the search page because

00:43:02.480 --> 00:43:04.200
I didn't have time to finish it.

00:43:04.290 --> 00:43:06.200
I fell asleep in the plane.

00:43:06.200 --> 00:43:08.330
So everything else is functional.

00:43:08.330 --> 00:43:11.200
That's why I'm not clicking on the
search button because it's embarrassing.

00:43:11.440 --> 00:43:14.250
But the idea is if you
try to save an empty bug,

00:43:14.320 --> 00:43:16.150
it's going to scream at you and tell
you that you have to write this,

00:43:16.200 --> 00:43:17.200
you write this, you write this.

00:43:17.200 --> 00:43:20.990
So all the validation things
are running and I'm showing the

00:43:20.990 --> 00:43:23.200
right thing at the right place.

00:43:23.350 --> 00:43:27.230
So, how do I do that?

00:43:29.290 --> 00:43:31.250
It's actually... Here we go.

00:43:31.250 --> 00:43:34.200
So I split the application in four parts.

00:43:34.450 --> 00:43:40.360
So we have our EO logic, our UI logic,
and we have our application logic,

00:43:40.540 --> 00:43:47.200
and I also have one test thing where
I write... where I put all my tests.

00:43:47.230 --> 00:43:50.380
Actually,
I want to run the test because it's fun.

00:43:50.730 --> 00:43:52.290
I like running the test.

00:43:52.340 --> 00:43:55.110
That's a good exercise.

00:43:55.290 --> 00:43:58.460
At the customer side,
we actually have the test.

00:43:58.490 --> 00:43:59.530
You launch the application.

00:43:59.570 --> 00:44:00.740
It's running all the tests.

00:44:00.790 --> 00:44:03.330
And if one of the tests fail,
you cannot launch the application.

00:44:03.360 --> 00:44:04.880
You stop right there with the error.

00:44:04.880 --> 00:44:05.680
And you cannot go further.

00:44:05.770 --> 00:44:10.490
So you need to fix the
bug before you go further.

00:44:10.880 --> 00:44:14.450
And actually, we don't have any bug in
the application so far,

00:44:14.450 --> 00:44:17.900
because every time we find a bug,
we make a new test.

00:44:17.900 --> 00:44:19.620
And you cannot launch the
application until you fix a bug.

00:44:19.730 --> 00:44:20.700
So guess what?

00:44:20.700 --> 00:44:23.450
It's fixing the day.

00:44:23.530 --> 00:44:26.740
So this is just a simple thing
that's running all my tests.

00:44:26.740 --> 00:44:29.540
And if there was an error-- maybe
I should have done a test with an error.

00:44:29.560 --> 00:44:30.850
It could be fun.

00:44:30.860 --> 00:44:31.820
You have a back trace there.

00:44:31.820 --> 00:44:32.480
And you click on this.

00:44:32.480 --> 00:44:39.720
And you can see what line it is in
your file and fix it right away.

00:44:40.150 --> 00:44:41.380
The EOlogic.

00:44:41.380 --> 00:44:44.720
There is nothing really in there.

00:44:44.720 --> 00:44:47.980
It's just, you know,
going to take a component.

00:44:48.040 --> 00:44:49.200
The component is simple.

00:44:49.200 --> 00:44:52.400
If I close this so we can
see the code in there.

00:44:52.530 --> 00:44:58.220
So a component has a validate for
delete method that checks that

00:44:58.240 --> 00:45:02.400
you cannot suppress a component
if you have subcomponent for it.

00:45:02.580 --> 00:45:07.400
You cannot suppress a component if there
is bugs attached to this component.

00:45:07.620 --> 00:45:12.000
There is also the validate name method
that I was looking for something.

00:45:12.030 --> 00:45:14.400
So this is the one I put on the slide.

00:45:14.400 --> 00:45:16.400
Just a simple validation method.

00:45:16.440 --> 00:45:20.400
We also have the really big,
nice business logic here

00:45:20.400 --> 00:45:23.400
of asking the full name,
take the two and concatate.

00:45:23.410 --> 00:45:27.400
You take everything, you go up the tree,
and you print the name with slashes.

00:45:27.470 --> 00:45:29.400
And the rest is just access.

00:45:29.400 --> 00:45:32.400
So there is not really a lot
of business logic in there.

00:45:32.400 --> 00:45:37.010
I think that in... I'm going to
advance in this application because

00:45:37.010 --> 00:45:39.400
I think I'm going to finish it now.

00:45:39.400 --> 00:45:45.400
I'm going to add something to move... to
change the state and things like that.

00:45:45.450 --> 00:45:48.400
So I'm going to add probably
more business logic in there.

00:45:48.860 --> 00:45:53.600
State, priority, you know,
the state is just... it's not a new

00:45:53.600 --> 00:45:54.400
generic record but just could be.

00:45:54.400 --> 00:45:56.390
There is no need for it.

00:45:56.500 --> 00:45:58.530
The only thing nice about the
state is there is access also.

00:45:58.530 --> 00:45:59.400
You can just use them.

00:45:59.400 --> 00:46:04.450
And then there is two classes in there
that I put in my EOlogic because,

00:46:04.450 --> 00:46:05.400
you know,
I didn't know where to put them.

00:46:05.400 --> 00:46:08.310
And they are actually really useful.

00:46:08.400 --> 00:46:13.400
The first one is for the
shared editing context.

00:46:13.440 --> 00:46:16.580
When you have, you know,
you have a set of objects and then you

00:46:16.580 --> 00:46:18.400
fetch all your priorities in there.

00:46:18.400 --> 00:46:20.400
And then you add a new priority.

00:46:20.400 --> 00:46:23.400
And you want this thing to appear
magically in your shared editing context.

00:46:23.400 --> 00:46:26.400
So that's what this subject is doing.

00:46:26.400 --> 00:46:29.650
I'll let you look at the code
because it's maybe a little

00:46:29.650 --> 00:46:31.340
too long to explain here.

00:46:31.400 --> 00:46:34.400
And I have another little class
here that I use all over the place.

00:46:34.400 --> 00:46:38.400
That's just bringing me
a static method thing.

00:46:38.400 --> 00:46:41.400
Object count with fetch specification
and returning me a number.

00:46:41.410 --> 00:46:44.390
So I don't have to redo
it all over the place.

00:46:44.470 --> 00:46:46.400
So that's basically my EO.

00:46:46.400 --> 00:46:47.400
Nothing in there.

00:46:47.400 --> 00:46:49.340
Really, really, really simple.

00:46:49.880 --> 00:46:56.660
My user interface:
I have a bunch of pages: the main page,

00:46:56.730 --> 00:47:00.420
the component list page,
the component editor page, user list,

00:47:00.420 --> 00:47:02.800
user editor, bug list, bug editor.

00:47:02.900 --> 00:47:06.810
When I have an editor,
I'm using it for edit

00:47:06.890 --> 00:47:09.190
and also for new objects.

00:47:09.350 --> 00:47:13.120
So this is just, you know, all the UI,
and when you look at

00:47:13.120 --> 00:47:17.280
one of these objects,
let's go look at the user list in there,

00:47:17.280 --> 00:47:20.320
it's just UI glue,
there is really not a lot of

00:47:20.320 --> 00:47:22.360
interesting things in there.

00:47:22.690 --> 00:47:26.890
Yeah, there is a method "can I delete
an object?" and right now it's

00:47:26.890 --> 00:47:30.720
returning true because it's
taking too much time to check.

00:47:30.720 --> 00:47:33.300
So I can actually remove the method.

00:47:33.430 --> 00:47:36.560
Edit user is just going to the next page,
deleting the user.

00:47:36.890 --> 00:47:40.080
Delete user is just
creating another page,

00:47:40.100 --> 00:47:43.500
just deleting the user and
passing it on another page.

00:47:43.570 --> 00:47:46.440
New user is just going to
another page and creating a user.

00:47:46.550 --> 00:47:51.000
But if you look at this code in there,
I'm never touching a user.

00:47:51.140 --> 00:47:51.640
Never.

00:47:51.850 --> 00:47:55.150
All I'm using are user controllers.

00:47:55.350 --> 00:47:58.440
See, Edit User,
what I do is I create a page,

00:47:58.640 --> 00:48:03.700
the User Editor, and I create a new
User Controller with the current user.

00:48:03.910 --> 00:48:06.640
That is the current user,
that's the one that's in my repetition,

00:48:06.720 --> 00:48:08.700
so wherever I clicked.

00:48:08.820 --> 00:48:12.550
And in the next page I tell it,
set the User Controller,

00:48:12.550 --> 00:48:14.700
this User Controller, and go do your job.

00:48:14.760 --> 00:48:17.700
And all the logic is
in the User Controller.

00:48:17.700 --> 00:48:20.700
What is the User Controller?

00:48:20.700 --> 00:48:23.700
Well, that's my third bucket.

00:48:23.700 --> 00:48:26.110
That's in there.

00:48:27.320 --> 00:48:28.520
So I have a controller.

00:48:28.560 --> 00:48:30.960
Basically what is a controller?

00:48:30.960 --> 00:48:31.930
It's something... I don't like the name.

00:48:32.060 --> 00:48:35.530
If somebody has a good suggestion for
a name... It's a model view controller,

00:48:35.570 --> 00:48:38.660
but I don't like the name controller,
so it may be a little difficult.

00:48:38.680 --> 00:48:45.000
But a controller is basically a
shell on top of an editing context.

00:48:45.010 --> 00:48:47.220
It's something that
keeps an editing context,

00:48:47.280 --> 00:48:50.740
eventually creating a new editing
context when you build one.

00:48:50.770 --> 00:48:55.220
And that's calling this "EO
Utilities Local Instance of

00:48:55.220 --> 00:48:57.640
Object MyEO" taking 3 kilometers long.

00:48:57.640 --> 00:48:59.780
I made the smallest one.

00:48:59.820 --> 00:49:03.240
And that's locking and
unlocking your editing context,

00:49:03.310 --> 00:49:06.370
and also asserting the locking.

00:49:06.430 --> 00:49:11.400
Locking is something you have to
be aware of if you are writing a

00:49:11.400 --> 00:49:14.700
complete multi-threaded application.

00:49:14.740 --> 00:49:20.580
If you only have one thread in the
request response loop in WebObjects,

00:49:20.580 --> 00:49:21.980
you don't really care about locking.

00:49:21.980 --> 00:49:24.280
But it's nice to see how it's done.

00:49:24.280 --> 00:49:25.780
That's why I put it in there.

00:49:25.840 --> 00:49:28.680
So you can see how you can lock
and unlock your editing context,

00:49:28.680 --> 00:49:33.110
and having something that's
running in all the cases nicely.

00:49:36.690 --> 00:49:38.740
So let's see what I have as a controller.

00:49:38.740 --> 00:49:42.420
I have a login controller that's
just doing fetch with fetch

00:49:42.420 --> 00:49:47.600
specification to get the current user
and returning some error messages.

00:49:47.640 --> 00:49:49.600
I have some simple controller.

00:49:49.600 --> 00:49:50.590
What is a simple controller?

00:49:50.600 --> 00:49:54.600
That's a controller that's
basically taking care of one object.

00:49:54.600 --> 00:49:58.490
When I was looking at the delete user,
I was creating a controller with the

00:49:58.590 --> 00:50:00.860
current user and telling it to delete.

00:50:00.860 --> 00:50:04.600
That's basically a controller
for this one object.

00:50:04.600 --> 00:50:09.410
I can also create,
I also have list controllers

00:50:09.410 --> 00:50:12.500
that are using a list of things.

00:50:13.610 --> 00:50:17.610
And finally, it's a demo,
so first time you launch the application,

00:50:17.610 --> 00:50:21.890
if the thing is empty,
it's filling the database with data,

00:50:21.890 --> 00:50:24.250
fake data.

00:50:24.830 --> 00:50:26.460
And then I have all my tests.

00:50:26.500 --> 00:50:32.310
I want to insist on this because
this is actually something that

00:50:32.750 --> 00:50:35.100
saved our butt a couple of times.

00:50:35.120 --> 00:50:39.080
Because, you know,
if you don't have the tests,

00:50:39.110 --> 00:50:42.390
the fact that you have all these
controllers and you can test

00:50:42.390 --> 00:50:44.700
them by writing simple tests.

00:50:44.700 --> 00:50:48.700
I'm going to rush to write,
show you the login test in there.

00:50:48.820 --> 00:50:52.300
You know, test login is just creating
a login controller,

00:50:52.300 --> 00:50:56.700
set the username, set the password,
and ask it for the user.

00:50:56.710 --> 00:50:59.610
And if this thing blows up,
the user is not there.

00:50:59.700 --> 00:51:03.700
So I'm just asserting that this thing is
doing the right errors at the right time.

00:51:03.700 --> 00:51:07.700
And doing multiple things like this,
testing multiple cases.

00:51:07.700 --> 00:51:14.040
This is really nice because imagine
you have one of your developers that,

00:51:14.040 --> 00:51:17.040
"Well, we have this huge thing,
we need to add this feature." And it's

00:51:17.040 --> 00:51:18.700
just starting to act in the right way.

00:51:18.700 --> 00:51:22.060
And you go into the code and
write all this thing and commit

00:51:22.060 --> 00:51:23.670
it into CVS and that's it.

00:51:23.730 --> 00:51:24.700
That's finished.

00:51:24.870 --> 00:51:27.260
And then two weeks later,
you notice that, well,

00:51:27.450 --> 00:51:28.700
you broke something.

00:51:29.350 --> 00:51:32.300
If you have tests,
testing your controllers

00:51:32.300 --> 00:51:35.620
in all the different ways,
if you break something,

00:51:35.620 --> 00:51:37.040
you're going to notice right away.

00:51:37.050 --> 00:51:39.660
And actually,

00:51:40.310 --> 00:51:44.060
This happens more often
than you can think,

00:51:44.060 --> 00:51:44.100
too.

00:51:44.100 --> 00:51:48.360
It's something that's happening really,
really often.

00:51:48.420 --> 00:51:51.370
So I guess there is-- where am I?

00:51:52.690 --> 00:51:54.810
I guess I'm there.

00:51:54.810 --> 00:52:01.340
I just want to finish with... if
we can go back to the slide...

00:52:01.340 --> 00:52:01.590
where did I put my thing?

00:52:01.660 --> 00:52:09.170
Actually, I'm going to go blank.

00:52:10.810 --> 00:52:17.540
Just a little short story to tell you
why I really think this thing is good.

00:52:18.100 --> 00:52:21.440
At another customer site,
these ones are doing these

00:52:21.440 --> 00:52:24.100
things right because they
hired me to manage the project.

00:52:24.100 --> 00:52:29.190
So at this customer site,
we started building an application,

00:52:29.460 --> 00:52:35.100
and we used these concepts all the way.

00:52:35.130 --> 00:52:36.420
And I told them,
"You write tests before you

00:52:36.420 --> 00:52:37.670
write your code." "What?

00:52:37.800 --> 00:52:38.400
Tests?

00:52:38.400 --> 00:52:41.570
Yeah, tests,
now!" So we had tests running,

00:52:41.570 --> 00:52:44.100
we had everything running, it's all nice.

00:52:44.100 --> 00:52:54.220
And then the CEO of the company wanted
to show a demo of this application,

00:52:54.260 --> 00:52:56.100
but he wanted to customize it.

00:52:56.200 --> 00:53:01.100
Because the look we were using was
the look for one of their customers.

00:53:01.230 --> 00:53:03.060
And this is an application
that has a different look.

00:53:03.100 --> 00:53:08.780
They have people going to the
customer site and customizing these

00:53:08.780 --> 00:53:13.100
applications to the different sites,
so they look different.

00:53:13.260 --> 00:53:18.250
So he wanted this application
that we started from scratch,

00:53:18.250 --> 00:53:21.100
something like three months before.

00:53:21.180 --> 00:53:23.100
He wanted the demo to show
to one of these customers.

00:53:23.100 --> 00:53:25.100
Of course, we didn't have anything ready.

00:53:25.100 --> 00:53:27.100
It was just a short demo.

00:53:27.100 --> 00:53:29.000
We had something running,
but it was with the

00:53:29.000 --> 00:53:30.100
logo of somebody else.

00:53:30.100 --> 00:53:33.100
So he wanted it with the
logo of the real person.

00:53:33.100 --> 00:53:37.100
And he wanted their current application,
they have this field in there

00:53:37.100 --> 00:53:39.100
that they don't have in there.

00:53:39.100 --> 00:53:42.100
Well, basically,
he wanted a completely different UI.

00:53:42.100 --> 00:53:48.100
So we were like, well, we cannot do that.

00:53:48.100 --> 00:53:52.100
And then we went for it.

00:53:52.100 --> 00:53:54.100
We just, you know, we have to do it.

00:53:54.100 --> 00:53:56.100
So let's do this UI.

00:53:56.100 --> 00:54:01.100
So we went in there and removed the
UI and started from scratch with the UI.

00:54:01.100 --> 00:54:03.100
And basically, we did the demo.

00:54:03.100 --> 00:54:07.100
And we had to write something
like six lines of code.

00:54:07.100 --> 00:54:09.100
Because everything was in the controller.

00:54:09.100 --> 00:54:11.100
And I didn't even think myself that
it was going to work that well.

00:54:11.100 --> 00:54:13.100
But actually,
everything is in the controller.

00:54:13.100 --> 00:54:17.090
So all you have to do is actually
wire stuff in WebObjects Builder.

00:54:17.140 --> 00:54:18.100
And that's it.

00:54:18.100 --> 00:54:20.920
And that's a really, really,
really powerful thing.

00:54:21.440 --> 00:54:23.100
So.

00:54:24.080 --> 00:54:26.440
I don't have all the answers.

00:54:26.440 --> 00:54:29.240
There is some stuff in this
application I'm not happy with.

00:54:29.370 --> 00:54:33.040
There is some stuff I'm
really glad I did it this way,

00:54:33.040 --> 00:54:34.330
some stuff I don't really like.

00:54:34.400 --> 00:54:37.320
That's why I didn't finish the search,
because I'm not sure that

00:54:37.320 --> 00:54:38.690
the search I did is great.

00:54:38.820 --> 00:54:41.930
But even if it's a work in progress,
I want you to look at it.

00:54:42.070 --> 00:54:44.000
I want you to give me feedback.

00:54:44.000 --> 00:54:46.690
I don't guarantee that I'm
going to read all the feedback,

00:54:46.690 --> 00:54:46.860
okay?

00:54:46.860 --> 00:54:49.270
I'm probably going to read it,
but I'm probably not going to answer,

00:54:49.270 --> 00:54:50.860
because I don't know how
many of you are in this room.

00:54:50.860 --> 00:54:54.500
But if you all send me 10 emails,
I won't be able to reply.

00:54:54.500 --> 00:54:56.730
But I'm still interested in the feedback.

00:54:56.800 --> 00:55:02.010
If you can go back to
this screen for a minute.

00:55:03.080 --> 00:55:10.000
I've used some powerful
Apple technology in there.

00:55:10.000 --> 00:55:18.160
So if you go on homepage.mac.com/EOF,
there is this really nice page,

00:55:18.160 --> 00:55:22.380
as I did with PageMaker,
where you can download this exact

00:55:22.490 --> 00:55:25.000
application that I just showed you.

00:55:25.000 --> 00:55:28.000
And feel free to send me feedback.

00:55:28.000 --> 00:55:31.000
Feel free to send me any
comments that you have.

00:55:31.000 --> 00:55:33.000
I'll try to integrate them if I can.

00:55:33.000 --> 00:55:35.000
Send me flames if you want.

00:55:35.000 --> 00:55:39.090
I read them too.

00:55:40.420 --> 00:55:43.800
Okay, back to the slides.

00:55:43.850 --> 00:55:48.390
And that's basically
all I had to say today.

00:55:56.550 --> 00:56:01.200
As usual, there is a lab downstairs,
10:30, 3:30 tomorrow.

00:56:01.280 --> 00:56:05.200
Go vote for WebObjects.

00:56:05.610 --> 00:56:10.820
There is a direct to... advanced direct
to Java client just after this session.

00:56:11.010 --> 00:56:16.290
You can... and some other
session with project security.

00:56:16.900 --> 00:56:19.100
I'm sure it's going
to talk fast in there.

00:56:19.220 --> 00:56:20.140
And the feedback forum.

00:56:20.140 --> 00:56:21.260
Don't miss the feedback forum.

00:56:21.260 --> 00:56:23.500
We want your feedback.

00:56:23.620 --> 00:56:24.780
And who to contact?

00:56:24.870 --> 00:56:26.930
And I think this, Bob.