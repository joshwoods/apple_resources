WEBVTT

00:00:05.910 --> 00:00:07.340
Good morning.

00:00:07.360 --> 00:00:10.100
It's Friday morning.

00:00:10.110 --> 00:00:12.550
Have a good time at the party last night?

00:00:14.120 --> 00:00:15.340
Great.

00:00:15.740 --> 00:00:17.720
OK, we have a rather full
schedule for you today,

00:00:17.750 --> 00:00:20.660
so I'm not going to take any time.

00:00:20.690 --> 00:00:24.340
One thing I will remind you is that we
have a feedback forum this afternoon.

00:00:24.360 --> 00:00:26.340
I'll also tell you that
at the end of the session,

00:00:26.340 --> 00:00:29.820
so we'd like as many of you as
possible to show up for that.

00:00:29.840 --> 00:00:33.000
And without further ado,
let me introduce Dave Payne,

00:00:33.010 --> 00:00:36.370
the manager of our
developer applications team.

00:00:39.700 --> 00:00:50.100
[Transcript missing]

00:00:51.590 --> 00:00:56.050
So what we're going to take a look
at today is mostly concentrating on

00:00:56.060 --> 00:00:59.860
debugging with Project Builder for
both C-based languages and for Java.

00:00:59.860 --> 00:01:05.520
We'll also be getting into some
advanced debugging situations with GDB.

00:01:05.520 --> 00:01:11.680
But before we really dive down into that,
we'll also take a look at how to

00:01:11.680 --> 00:01:16.500
look at applications that just crash
on your system or if they're hung,

00:01:16.500 --> 00:01:17.740
what can you do about that.

00:01:20.360 --> 00:01:22.490
So let's just dive right in with that.

00:01:22.520 --> 00:01:27.560
So on Mac OS 7, 8, 9, previously,
you're familiar with if

00:01:27.560 --> 00:01:31.190
an application crashes,
you can have MaxBug installed on

00:01:31.190 --> 00:01:35.000
your screen or on your system,
and you'll crash and catch

00:01:35.190 --> 00:01:36.970
the crashes in MaxBug.

00:01:36.980 --> 00:01:41.500
We do now have a facility in
Mac OS X to catch crashes and give you

00:01:41.510 --> 00:01:44.690
stackback traces and things like that.

00:01:44.740 --> 00:01:49.760
In order to enable this,
you have to go in as an admin user.

00:01:50.360 --> 00:01:54.210
And add a configuration line
to the etc.host config file.

00:01:54.260 --> 00:01:57.000
So the facility is called crash reporter.

00:01:57.060 --> 00:02:02.180
And if you go in and set crash
reporter equals dash yes dash,

00:02:02.280 --> 00:02:04.830
which is the format that
all those lines are in,

00:02:04.830 --> 00:02:09.160
then you'll automatically
get this facility turned on.

00:02:09.200 --> 00:02:12.780
So what happens then,
if you're running the

00:02:12.780 --> 00:02:15.790
console application,
it'll ask you, hey,

00:02:15.790 --> 00:02:20.300
an application just crashed,
do you want to see the stackback trace?

00:02:20.310 --> 00:02:23.220
And you'll see the crash log, yes or no.

00:02:23.220 --> 00:02:25.960
There's a little dialogue
that pops up there.

00:02:25.960 --> 00:02:29.620
And if you say yes,
then it brings console to the foreground.

00:02:29.620 --> 00:02:34.000
You've got the console window,
but now you've also got a crash

00:02:34.000 --> 00:02:38.240
log window as well that shows
you the stackback trace for all

00:02:38.240 --> 00:02:40.910
the threads in your application.

00:02:40.980 --> 00:02:43.550
And it shows you the register state.

00:02:43.620 --> 00:02:48.950
If you want to look at this sometime
from terminal outside of the application,

00:02:48.950 --> 00:02:50.130
you can do that.

00:02:50.280 --> 00:02:51.210
So this is a little bit of
the console application.

00:02:51.300 --> 00:02:56.280
The file is actually kept in
slash var slash vm crash dot log.

00:02:56.300 --> 00:03:00.180
So one thing to be aware of, though,
is it just appends the crash

00:03:00.180 --> 00:03:02.840
information to the bottom of this file.

00:03:02.840 --> 00:03:05.750
And it retains that across reboots.

00:03:05.840 --> 00:03:09.330
So you can have a week's worth of
crashes stored in your file there.

00:03:09.340 --> 00:03:10.090
And you fire it up.

00:03:10.230 --> 00:03:13.220
And, huh, I thought we fixed that one.

00:03:13.240 --> 00:03:16.060
Well, that's because you're looking
at the start of the file.

00:03:16.060 --> 00:03:18.900
So you may need to clean
it out on occasion.

00:03:18.900 --> 00:03:20.260
But that can be a reason.

00:03:20.260 --> 00:03:21.380
It's a really useful facility.

00:03:21.380 --> 00:03:26.750
You can then have people, you know,
if you've got beta testers or whatever,

00:03:26.750 --> 00:03:32.180
they can enable this on their systems
and send the back traces back to you.

00:03:32.180 --> 00:03:36.020
Actually, if I could have a quick
poll of the audience.

00:03:36.070 --> 00:03:39.540
I'm considering just automatically
enabling this when we install

00:03:39.540 --> 00:03:40.900
the developer tool CD.

00:03:40.900 --> 00:03:42.510
What do you think of that?

00:03:45.910 --> 00:03:48.940
Okay, we'll try and do that for
next time around then.

00:03:48.960 --> 00:03:51.140
That's not happening
this time on your CD,

00:03:51.140 --> 00:03:52.220
but you can do this yourself.

00:03:53.740 --> 00:03:56.670
So another one is, gee,
my app is just hanging.

00:03:56.680 --> 00:03:58.070
What's up with that?

00:03:58.260 --> 00:04:00.590
How can I take a look at that?

00:04:00.670 --> 00:04:01.930
I've been running it.

00:04:02.020 --> 00:04:04.440
Is there anything I can see?

00:04:04.440 --> 00:04:09.390
Well, in some of the sessions,
you've seen the sampler graphical

00:04:09.490 --> 00:04:14.510
application for doing CPU monitoring,
profiling, what's going on.

00:04:14.520 --> 00:04:17.980
There's also a command line
version of that called sample.

00:04:19.220 --> 00:04:24.170
From the command line, in a terminal,
you could execute sample

00:04:24.500 --> 00:04:26.540
and then the process ID.

00:04:26.540 --> 00:04:29.950
And it also understands just
the name of your binary as well,

00:04:29.950 --> 00:04:32.280
if there's only one copy of it running.

00:04:32.280 --> 00:04:34.800
And then just the number of
seconds that you want to sample.

00:04:34.800 --> 00:04:39.660
So I typically say sample
my app for 10 seconds.

00:04:39.660 --> 00:04:43.890
It tells you where it puts
the file into slash temp.

00:04:43.900 --> 00:04:46.620
And then you can go
off and take a look at,

00:04:46.620 --> 00:04:50.770
again, the stack backtraces to see where
your app is spending its time.

00:04:50.780 --> 00:04:55.330
Again, that can be a very useful thing
that you could have people

00:04:55.660 --> 00:04:58.280
send the samples back to you.

00:04:58.280 --> 00:05:03.970
If you do perchance ever happen to
find any bugs in any of our stuff,

00:05:04.060 --> 00:05:08.870
it's helpful to attach these crash
logs or these sample outputs into any

00:05:08.950 --> 00:05:12.780
bug reports or emails that you would
send in to us to tell us what you

00:05:12.780 --> 00:05:15.140
might have found with our code as well.

00:05:15.140 --> 00:05:18.600
There's also a facility with GDB.

00:05:18.600 --> 00:05:20.890
Where you can attach to a process.

00:05:20.900 --> 00:05:23.720
And if you've got source code for it,
then even though you didn't

00:05:23.880 --> 00:05:27.080
start it up under the debugger,
you can attach to it later.

00:05:27.100 --> 00:05:30.900
We don't have that wired in through
project builder at this point.

00:05:30.900 --> 00:05:32.410
But you can do this.

00:05:32.710 --> 00:05:36.200
You'll see usages of GDB attached
later in the session.

00:05:38.520 --> 00:05:40.940
So many of you are familiar
with some of the debugging

00:05:41.040 --> 00:05:43.740
facilities of Project Builder.

00:05:43.740 --> 00:05:47.870
It's full graphical debugging
for C-based languages,

00:05:47.960 --> 00:05:50.520
so C, Objective-C, C++.

00:05:50.520 --> 00:05:56.230
And Zem inspires me to say Objective-C++
will be supported there too.

00:05:56.340 --> 00:05:58.920
And also Java.

00:05:59.310 --> 00:06:01.790
We support all the different
types of macro binaries that

00:06:01.890 --> 00:06:02.900
you've got on your system.

00:06:02.900 --> 00:06:05.890
And we'll see how to do that
through the course of this session.

00:06:06.010 --> 00:06:10.590
For the C-based languages,
we'd use GDB as the low-level

00:06:10.590 --> 00:06:14.920
debugger to communicate with the OS.

00:06:14.920 --> 00:06:17.620
Architecturally,
this is what it looks like here.

00:06:17.620 --> 00:06:22.520
As Project Builder communicates with GDB,
GDB handles all the complexity of

00:06:22.590 --> 00:06:27.960
working with the operating system,
so the Unix P-trace and Mach exceptions

00:06:27.960 --> 00:06:29.450
and your target application.

00:06:29.460 --> 00:06:32.080
It's a fairly complex interaction.

00:06:32.080 --> 00:06:34.780
So it takes care of all that for us.

00:06:34.840 --> 00:06:39.080
Because that is fairly complex,
we also work with the MetroWorks

00:06:39.080 --> 00:06:44.500
folks to get the CodeWarrior debugging
working well as well by handling

00:06:44.510 --> 00:06:50.730
the same level of interaction and
then using a debugging protocol.

00:06:50.740 --> 00:06:54.270
If you're using CodeWarrior at all,
you may have heard that they no longer

00:06:54.280 --> 00:06:56.960
require the use of the debug knob.

00:06:57.250 --> 00:06:59.850
That aspect of it is built
directly into CodeWarrior now.

00:07:00.140 --> 00:07:03.960
But at the lower levels,
we share the same facilities.

00:07:05.150 --> 00:07:08.520
So without further ado,
I'd like to bring out Rab Hagy,

00:07:08.520 --> 00:07:10.760
senior engineer on the
Project Builder team,

00:07:10.760 --> 00:07:15.600
to actually show you
Project Builder debugging in action.

00:07:15.780 --> 00:07:16.320
Thanks, Rab.

00:07:16.320 --> 00:07:18.090
Thanks, Dave.

00:07:19.540 --> 00:07:22.960
All right, good morning everyone.

00:07:22.960 --> 00:07:25.800
In this section of our
presentation today,

00:07:25.800 --> 00:07:29.320
I'll be giving you a bit of a
status on where we stand with

00:07:29.320 --> 00:07:33.640
debugging with Project Builder,
talk about how to configure

00:07:33.760 --> 00:07:39.300
your project for debugging,
how, where,

00:07:39.300 --> 00:07:42.740
and what of setting up your project.

00:07:42.860 --> 00:07:47.840
Talk a bit about breakpoints,
and then my colleague Dave will come

00:07:47.960 --> 00:07:51.370
up and talk about debugging Java.

00:07:53.250 --> 00:07:53.840
All right.

00:07:53.860 --> 00:07:57.430
If you're new to Mac OS X and
to Project Builder,

00:07:57.430 --> 00:07:58.240
welcome.

00:07:58.290 --> 00:08:01.900
I hope you've seen through our
other sessions at the conference

00:08:01.970 --> 00:08:06.320
that we have a full-featured IDE,
and with respect to debugging,

00:08:06.320 --> 00:08:10.430
we have a nice GUI for
showing the threads,

00:08:10.430 --> 00:08:14.620
stacks, and variables in stack frames.

00:08:14.640 --> 00:08:18.820
And we have a full-featured
breakpoint model and support

00:08:18.970 --> 00:08:21.770
for debugging multiple projects.

00:08:21.880 --> 00:08:29.520
If you've been with us for a while,
the changes from last year's conference,

00:08:29.530 --> 00:08:33.570
you won't see too many changes
at the user interface level.

00:08:33.860 --> 00:08:37.860
We've been concentrating on
improving the infrastructure,

00:08:37.940 --> 00:08:41.480
so we have much better C++ support.

00:08:41.480 --> 00:08:45.510
We've been tracking changes to Mac OS X,
and we've improved the way

00:08:45.510 --> 00:08:49.350
Project Builder communicates
with the underlying debugger.

00:08:49.360 --> 00:08:54.510
And of course, last year we showed just a

00:08:54.600 --> 00:09:25.400
[Transcript missing]

00:09:29.340 --> 00:09:35.260
All right, let's talk about the how
of building for debugging.

00:09:35.270 --> 00:09:39.760
With this release of Project Builder,
we've introduced build styles,

00:09:39.760 --> 00:09:43.840
which were covered in detail in the
Project Builder in-depth session.

00:09:44.440 --> 00:09:49.320
Build styles allow you to configure
a single target for multiple uses.

00:09:49.760 --> 00:09:54.860
Out of the box, you get two build styles,
one called development

00:09:54.860 --> 00:09:56.250
and one for deployment.

00:09:56.250 --> 00:10:01.430
We encourage you to set up
your development build style

00:10:01.590 --> 00:10:05.260
tailored towards debugging and
your day-to-day development.

00:10:05.260 --> 00:10:09.970
Use the deployment build style for
when you're getting ready to actually

00:10:09.970 --> 00:10:12.360
build your product for shipping.

00:10:12.360 --> 00:10:21.290
Now, the... The two key aspects of the
build style and building for related

00:10:21.290 --> 00:10:26.020
to debugging are the compiler
settings for optimization and

00:10:26.020 --> 00:10:28.330
generation of debugging symbols.

00:10:28.400 --> 00:10:32.320
So, naturally,
to do full source level debugging,

00:10:32.320 --> 00:10:37.660
you need to ensure that you, in fact,
have...are telling the

00:10:37.660 --> 00:10:40.260
compiler to generate symbols.

00:10:40.450 --> 00:10:44.400
And you can also vary
the optimization level.

00:10:45.050 --> 00:10:51.590
Now, just because you can mix generation
of symbols and optimization,

00:10:51.590 --> 00:10:55.680
you need to be aware that at the
higher levels of optimization,

00:10:55.710 --> 00:11:03.020
the mapping that the symbol information
provides a mapping from the machine state

00:11:03.020 --> 00:11:06.300
to the logical state in your source code.

00:11:06.300 --> 00:11:11.720
And that mapping begins to break down
at higher levels of optimization.

00:11:11.840 --> 00:11:17.710
So we recommend for debugging either no
optimization or optimization level one.

00:11:17.910 --> 00:11:23.140
And I'll give you-- in our demo,
I'll cover that a bit more.

00:11:25.010 --> 00:11:26.960
All right,
here's a quick look at the user

00:11:27.070 --> 00:11:31.060
interface for the target build settings,
just so you can get oriented.

00:11:31.150 --> 00:11:40.880
I've highlighted the pop-up for
the development optimization

00:11:42.090 --> 00:11:42.110
level and down below the checkbox
for including debugger symbols.

00:11:44.210 --> 00:11:48.840
All right, now let's talk about the where
of building your project.

00:11:48.880 --> 00:11:52.240
Out of the box, by default,
Project Builder builds each

00:11:52.250 --> 00:11:57.020
project in its own build folder,
which contains the intermediate

00:11:57.020 --> 00:12:00.270
results of the build and the
final product of the build.

00:12:00.330 --> 00:12:04.510
So here we have app project that
builds in its own build folder

00:12:04.960 --> 00:12:09.180
and a framework project that
builds in its own build folder.

00:12:09.220 --> 00:12:14.490
Now, most projects that you'll be working
with are larger ones and you'll probably

00:12:14.490 --> 00:12:18.100
have multiple Project Builder projects.

00:12:18.100 --> 00:12:21.480
In that case,
when you have a set of related

00:12:21.720 --> 00:12:26.000
projects that you want to
build and debug together,

00:12:26.000 --> 00:12:29.360
the default is not suitable.

00:12:29.360 --> 00:12:34.320
So what we recommend is that
you create what we call a common

00:12:34.320 --> 00:12:39.960
build folder on your system.

00:12:39.960 --> 00:12:46.200
And then you need to configure each
project to build in that folder.

00:12:46.200 --> 00:12:50.710
And this is a per user setting,
so each user on the development

00:12:50.870 --> 00:12:56.080
team needs to configure his or
her instance of the project to

00:12:56.080 --> 00:12:59.350
point to a common build folder.

00:12:59.360 --> 00:13:02.820
It's a little tricky to
find where the setting is.

00:13:02.820 --> 00:13:07.260
You select the top level item
in the groups and file view,

00:13:07.340 --> 00:13:09.140
which represents the project.

00:13:09.290 --> 00:13:09.340
And then you need to
configure the instance.

00:13:09.650 --> 00:13:14.500
And then use the project show info menu.

00:13:15.540 --> 00:13:18.050
All right,
so now we've talked about how to build,

00:13:18.060 --> 00:13:19.760
where to build.

00:13:19.780 --> 00:13:22.600
Let's talk about what gets built.

00:13:22.800 --> 00:14:34.000
[Transcript missing]

00:14:34.730 --> 00:14:40.590
Executables hold the persistent
state that you set of the program,

00:14:40.590 --> 00:14:43.600
kind of the environment of the program.

00:14:43.600 --> 00:14:48.770
Because commonly when you're debugging,
you want to run it multiple times,

00:14:48.860 --> 00:14:54.240
and it's convenient to set up command
line arguments and environment variables

00:14:54.400 --> 00:14:58.500
that can control how your programs run.

00:14:59.050 --> 00:15:04.970
Another aspect of executables
is you can set at runtime which

00:15:05.010 --> 00:15:12.590
variant of the Apple standard system
libraries or system frameworks,

00:15:12.610 --> 00:15:14.600
which variant is used.

00:15:14.600 --> 00:15:18.850
The standard variant,
which all apps that are

00:15:18.960 --> 00:15:24.570
launched from Finder use,
has minimal symbol information,

00:15:24.570 --> 00:15:27.470
a high level of optimization.

00:15:27.600 --> 00:15:28.560
The debugger is a very
simple application.

00:15:28.670 --> 00:15:31.530
The debug variant can do
additional error checking.

00:15:31.620 --> 00:15:35.960
It can do consistency checking
within the library to try to tell

00:15:35.960 --> 00:15:38.450
you of problems before they arise.

00:15:38.870 --> 00:15:43.790
And, for example,
core foundation provides a lot

00:15:43.790 --> 00:15:48.540
of verbose output and error
checking that might be useful.

00:15:48.650 --> 00:15:52.570
And finally,
there's a profile variant for use

00:15:52.680 --> 00:15:55.680
with the Gprof profiling system.

00:15:56.130 --> 00:16:00.500
Here's a screenshot just to get you
oriented on the executable setting.

00:16:00.500 --> 00:16:03.840
You can see on the left we've
selected a target and then

00:16:03.840 --> 00:16:05.690
gone to the executables tab.

00:16:06.080 --> 00:16:13.430
There's the add button for
adding an external executable

00:16:13.430 --> 00:16:19.770
and I've highlighted the run tab,
run time tab to show you how

00:16:19.770 --> 00:16:19.770
to change the library variant.

00:16:21.010 --> 00:16:25.380
Okay,
now just a quick note about breakpoints.

00:16:25.380 --> 00:16:28.760
We have two kinds of
breakpoints in Project Builder.

00:16:28.760 --> 00:16:32.630
File-oriented breakpoints that
you set when you're editing

00:16:32.640 --> 00:16:35.770
or looking at source code,
you can click to the left of the

00:16:35.930 --> 00:16:39.720
source code and set a breakpoint
at a particular line in the file.

00:16:39.870 --> 00:16:44.550
And symbolic breakpoints,
where you enter the name of a function

00:16:44.830 --> 00:16:50.360
that you want the debugger to stop at
when that function is first executed.

00:16:50.360 --> 00:16:54.300
And this is a good way of working,
stopping in functions for which

00:16:54.300 --> 00:16:56.260
you don't have the source code.

00:16:59.120 --> 00:17:04.040
All right, now I'm going to give you
a quick demo of debugging.

00:17:04.040 --> 00:17:06.070
Let's see.

00:17:10.320 --> 00:17:15.340
I'm going to demonstrate
debugging a plugin.

00:17:15.340 --> 00:17:20.620
This is a palette that goes
into Interface Builder.

00:17:20.750 --> 00:17:23.200
That's what Interface
Builder calls its plugins.

00:17:23.340 --> 00:17:28.130
This palette is an example in
the Developer Examples Interface

00:17:28.620 --> 00:17:31.230
Builder Progress View palette.

00:17:31.240 --> 00:17:36.530
It's a UI control for
representing a progress view.

00:17:36.610 --> 00:17:41.910
Just a little demonstration of
how to write a palette for IB.

00:17:42.000 --> 00:17:50.000
Let's do a quick tour of Project Builder
as to what's related to debugging.

00:17:50.840 --> 00:17:54.350
Up here we have the debug tab.

00:17:54.420 --> 00:17:59.310
Contains the output of the
previous run so you can

00:18:00.580 --> 00:18:02.060
Refer to it later.

00:18:02.060 --> 00:18:03.800
This is a pop-up for the list of threads.

00:18:03.920 --> 00:18:06.260
We're not running anything.

00:18:06.410 --> 00:18:07.440
Stack frames and variables.

00:18:07.440 --> 00:18:15.090
Here are the control buttons that get
enabled when we're actually running.

00:18:15.090 --> 00:18:15.090
And we have a

00:18:15.700 --> 00:18:21.420
A breakpoint summary tab to show you
all the breakpoints in your project.

00:18:21.420 --> 00:18:24.620
And let's add--

00:18:24.770 --> 00:18:26.480
A new symbolic breakpoint.

00:18:26.550 --> 00:18:31.660
So you click there and you need
to enter the name of the function.

00:18:31.660 --> 00:18:35.100
For Objective-C programmers,
it's sometimes handy to break

00:18:35.320 --> 00:18:42.540
on NSExceptionRays so you
know if an exception gets

00:18:42.600 --> 00:18:47.030
raised inside your program.

00:18:47.030 --> 00:18:47.030
And let's see, go back.

00:18:48.160 --> 00:18:49.530
All right.

00:18:49.540 --> 00:18:51.460
Let me show you one thing.

00:18:51.460 --> 00:18:55.100
We have done a few changes
in the user interface.

00:18:55.100 --> 00:19:02.780
We've added a second little tab up
here for the output of the running

00:19:02.780 --> 00:19:06.100
program's standard input and output.

00:19:06.180 --> 00:19:07.860
And that appears up here.

00:19:08.080 --> 00:19:13.990
If you're working at the command line
tool level and you want to type something

00:19:13.990 --> 00:19:17.700
at your program while you're running,
you would bring this

00:19:17.700 --> 00:19:20.670
down and type in there.

00:19:21.080 --> 00:19:26.240
And we've added a few preferences
to let you set the fonts and

00:19:26.240 --> 00:19:27.670
font color for everything.

00:19:27.680 --> 00:19:31.280
And due to popular demand,
you can set the color of the

00:19:31.280 --> 00:19:33.990
highlighting of the current line.

00:19:34.040 --> 00:19:38.790
So I'll change that to a nice
shade of blue or something.

00:19:40.950 --> 00:19:47.320
And before we start running this program,
let's look at its target,

00:19:47.430 --> 00:19:52.670
which builds-- this is a plug-in.

00:19:52.870 --> 00:19:56.780
One of the problems you'll have
working with plugins is you

00:19:56.870 --> 00:20:03.000
build them in Project Builder,
and now the program you want to run

00:20:03.270 --> 00:20:06.720
looks for plugins in specific locations.

00:20:06.720 --> 00:20:09.970
How do you get your
plugin into that location?

00:20:10.840 --> 00:20:15.340
Well, there are two approaches.

00:20:15.340 --> 00:20:19.840
A kind of Unix low-level kind of hacky
approach that works very well is you

00:20:19.920 --> 00:20:25.840
go to the directory or the folder where
the plugin or where the containing

00:20:25.840 --> 00:20:31.230
application expects to find your plugin,
and you use a symbolic link

00:20:31.230 --> 00:20:35.740
to point back to your build
directory and your built plugin.

00:20:35.740 --> 00:20:42.700
Another approach is to use... I've
just... I've taken a standard set

00:20:42.700 --> 00:20:47.900
of build phases that builds our
plugin and added a shell script

00:20:47.910 --> 00:20:54.400
build phase that copies our built
plugin into the directory where,

00:20:54.400 --> 00:20:57.000
in this case,
Interface Builder will be looking for it.

00:20:57.100 --> 00:21:00.510
How do you get your
plugin into the directory?

00:21:01.220 --> 00:21:04.870
On the build settings for the compiler,
we've set optimization level one.

00:21:04.880 --> 00:21:06.520
We'll see what that does.

00:21:06.520 --> 00:21:09.870
And right now,
you'll notice that the run and

00:21:09.930 --> 00:21:11.760
debug icons are not highlighted.

00:21:11.820 --> 00:21:13.910
That's because we don't
have an executable.

00:21:14.120 --> 00:21:17.710
So I'm going to add in--

00:21:17.950 --> 00:21:25.060
crawl around and add in
Developer Applications Interface Builder.

00:21:27.280 --> 00:21:30.840
And now our icons are highlighted.

00:21:30.840 --> 00:21:36.000
I'm going to add an environment variable.

00:21:36.030 --> 00:21:39.610
It's called doLogin.

00:21:39.980 --> 00:21:42.490
And this is a good way to take your code.

00:21:42.750 --> 00:21:46.100
When you're doing development,
you want it to be a little more verbose,

00:21:46.250 --> 00:21:47.810
tell you what's going on.

00:21:48.060 --> 00:21:51.400
So I've put in an environment
variable that will cause this

00:21:51.400 --> 00:21:56.730
example to do a little logging,
generate some status information.

00:22:00.100 --> 00:22:06.010
So let's see, we've got a break point,
so let's start up the debugger.

00:22:06.860 --> 00:22:12.730
and give Interface Builder
a minute to start up.

00:22:12.740 --> 00:22:17.350
It's got to find all its
plugins on the system.

00:22:17.850 --> 00:22:22.480
It comes up,
we'll create just an empty window.

00:22:22.630 --> 00:22:26.580
Drag in our little progress view control.

00:22:26.590 --> 00:22:31.220
And now when I click on this
inner region where the actual

00:22:32.020 --> 00:22:37.000
progress indicator will be drawn,
see over here this inspector has

00:22:37.560 --> 00:22:39.090
come up tailored towards that.

00:22:39.100 --> 00:22:42.780
This means that this is
our plug-in running now,

00:22:42.830 --> 00:22:45.810
putting up its own custom inspector.

00:22:46.090 --> 00:22:49.620
So if I type in some code
to change the increment,

00:22:49.640 --> 00:22:50.680
we hit a breakpoint.

00:22:50.680 --> 00:22:55.750
Now we're in our code executing
in the context of this plug-in,

00:22:55.750 --> 00:23:00.890
or in the context of another application.

00:23:00.910 --> 00:23:03.360
Let's see.

00:23:03.820 --> 00:23:07.440
As we step along,
you can see that in this case

00:23:07.460 --> 00:23:09.690
we assigned a value to F.

00:23:09.700 --> 00:23:16.050
And as variables change their values,
they show up in red.

00:23:16.060 --> 00:23:17.590
We'll step over this.

00:23:17.720 --> 00:23:22.740
You can see we're asking the environment,
do we have this environment variable?

00:23:22.740 --> 00:23:25.320
Yes, we do,
because we're doing development.

00:23:25.320 --> 00:23:27.340
We'll step along that.

00:23:27.340 --> 00:23:31.020
And we can see that MSG,
our message we're going to print out,

00:23:31.020 --> 00:23:33.270
has been assigned.

00:23:33.280 --> 00:23:37.370
The folks at O'Reilly say they've
sold out of all the Cocoa,

00:23:37.370 --> 00:23:38.860
learning Cocoa books.

00:23:38.920 --> 00:23:42.220
So if you're new to Cocoa with
respect to debugging,

00:23:42.220 --> 00:23:49.660
you need to know that many
Cocoa objects are opaque.

00:23:49.660 --> 00:23:55.090
If you inspect them in the view here,
you maybe see just--

00:23:55.100 --> 00:23:58.250
That fact that it has an is a pointer,
that's a pointer to a class,

00:23:58.250 --> 00:24:00.050
but that's all you can see.

00:24:00.390 --> 00:24:05.240
So how do you determine
what your Cocoa object is?

00:24:05.420 --> 00:24:11.890
Well, we can use the power of GDB to
send a message to this object,

00:24:12.050 --> 00:24:15.870
ask it to generate a string
description of what it is,

00:24:15.900 --> 00:24:21.900
and then convert that description to
something that can be displayed in GDB.

00:24:21.900 --> 00:24:26.510
So we use the print object command,
or PO, the name of the object,

00:24:26.510 --> 00:24:30.160
and that's actually invoking
code in the inferior,

00:24:30.160 --> 00:24:33.620
running that code,
and returning that into GDB,

00:24:33.620 --> 00:24:35.290
into our console here.

00:24:35.380 --> 00:24:39.410
And fortunately we have the
string we've just set up here,

00:24:39.410 --> 00:24:41.480
current increment is five.

00:24:41.480 --> 00:24:42.400
All right.

00:24:42.420 --> 00:24:46.250
So we step along, we call NSLog,
the output of the log,

00:24:46.250 --> 00:24:51.880
which is going to do the, in this case,
NSLog, and then we call NSLog.

00:24:51.900 --> 00:24:55.260
So we have the interface builder,
standard out, or standard error,

00:24:55.380 --> 00:24:56.720
shows up in our log.

00:24:56.720 --> 00:25:00.760
We've set it up to have a different font.

00:25:00.960 --> 00:25:03.580
are different color that can be useful.

00:25:03.580 --> 00:25:04.520
Let's step along.

00:25:04.610 --> 00:25:10.710
And now I just want to show you a few
things about debugging optimized code.

00:25:11.900 --> 00:25:12.580
here.

00:25:12.580 --> 00:25:18.730
You can see that we've just assigned a
value to an inter -- a variable called f

00:25:18.840 --> 00:25:22.690
at an interscope -- a nested scope level.

00:25:23.060 --> 00:25:29.860
We have -- we can show variables with
the same name at different scope levels.

00:25:29.880 --> 00:25:35.530
And you can also notice that this obj,
which was a parameter into this function,

00:25:35.670 --> 00:25:36.410
changed too.

00:25:36.410 --> 00:25:43.190
Well that's because the optimizer
was reusing that register.

00:25:43.400 --> 00:25:48.410
If you look carefully at the code,
you can see we declare both an

00:25:48.410 --> 00:25:50.940
F and an I at the outermost scope.

00:25:51.320 --> 00:25:55.430
But when we look in the variable view,
we see there's only one I,

00:25:55.540 --> 00:25:58.970
and that would correspond
to this if block.

00:25:59.550 --> 00:26:04.910
And that's because the outermost scope,
the I at the outermost scope

00:26:04.910 --> 00:26:07.170
has been optimized out.

00:26:07.170 --> 00:26:07.170
So,

00:26:07.420 --> 00:26:07.990
Let's see.

00:26:08.000 --> 00:26:11.720
I think, yeah, we've got a full day,
so I'm going to stop here.

00:26:11.720 --> 00:26:16.450
I hope you've got a quick introduction
to Project Builder and debugging with it,

00:26:16.500 --> 00:26:19.560
working with optimized code and plugins.

00:26:19.560 --> 00:26:21.280
And now--

00:26:21.410 --> 00:26:23.120
Let's see if I point it right.

00:26:23.130 --> 00:26:27.670
I'd like to bring up Dave Ewing
to talk about Java debugging.

00:26:29.900 --> 00:26:31.760
Thanks, Rab.

00:26:31.760 --> 00:26:33.140
All right.

00:26:33.300 --> 00:26:36.620
Okay, well, you actually just saw most of
the debugging features in the

00:26:36.620 --> 00:26:40.150
Java debugger and Project Builder
2 because they are the same.

00:26:40.570 --> 00:26:42.390
The user interface is the same.

00:26:42.390 --> 00:26:43.940
It's shared between the two.

00:26:43.940 --> 00:26:50.430
So I'm going to go through
just some differences,

00:26:50.450 --> 00:26:52.870
some things you have to do differently
when you're debugging in Java.

00:26:53.330 --> 00:26:57.060
So the first thing, well,
the three things I'm going to show

00:26:57.060 --> 00:27:00.020
in my slides before I do a little
demo are setting up a project to

00:27:00.020 --> 00:27:04.660
debug in Java and what you need
to do that's special about that.

00:27:04.710 --> 00:27:09.780
What you need to do to set
up the application and its

00:27:09.870 --> 00:27:12.830
command line arguments,
and a little bit about Java exceptions.

00:27:12.930 --> 00:27:16.980
Java has a very nice exception
model where there's a class,

00:27:17.080 --> 00:27:19.800
Java lang throwable,
and every exception that you can

00:27:19.900 --> 00:27:21.400
throw has to be a subclass of that.

00:27:21.490 --> 00:27:24.110
So it actually is a very nice

00:27:24.130 --> 00:27:26.380
Very nice way to program.

00:27:26.400 --> 00:27:30.070
So setting up your project for debugging.

00:27:30.550 --> 00:27:34.780
The one thing you really want to do

00:27:34.890 --> 00:27:37.840
For Java debugging,
is turn on the indexer.

00:27:38.060 --> 00:27:41.360
In future versions,
we'll have that turned on by default.

00:27:41.390 --> 00:27:47.580
But besides giving browser information--
we have a class browser coming in the

00:27:47.710 --> 00:27:53.980
next version-- right now you can command
double click to go between symbols,

00:27:53.980 --> 00:27:56.280
and you get function pop-ups
and things like that.

00:27:56.420 --> 00:27:58.460
So besides getting that
when you turn on indexing,

00:27:58.460 --> 00:28:03.480
you actually get build dependency
support for Java builds.

00:28:03.520 --> 00:28:08.970
And you also get a few enhancements
to the debugger support.

00:28:09.500 --> 00:28:15.290
So one thing you may not know about
class files and what's produced

00:28:15.290 --> 00:28:19.160
when you compile a Java source file
is that there's a source file name

00:28:19.160 --> 00:28:23.350
in there in the debugger tables
that you need for the debugger.

00:28:23.790 --> 00:28:26.970
But there's not a full path.

00:28:27.070 --> 00:28:29.990
You don't know exactly what source
file that might be on the disk.

00:28:30.060 --> 00:28:34.860
And Project Builder can try real hard to
figure out which source file you mean,

00:28:34.860 --> 00:28:37.860
but if you have two files
with the same base file name,

00:28:37.860 --> 00:28:39.550
it can't be sure.

00:28:39.830 --> 00:28:44.530
If you have indexing on, we can be sure.

00:28:45.710 --> 00:28:48.790
And the other thing you get
if indexing is on and you have

00:28:48.790 --> 00:28:54.180
breakpoints set is your debugging
speed will be vastly improved.

00:28:54.510 --> 00:28:59.970
It's about 20 to 30% faster
on a small project and it only

00:28:59.970 --> 00:29:03.770
gets better for larger projects.

00:29:05.580 --> 00:29:06.560
Okay, Java executables.

00:29:06.560 --> 00:29:10.760
You can create a standard
Mac OS X application.

00:29:10.760 --> 00:29:15.000
If you do that,
one of the files in your project

00:29:15.000 --> 00:29:17.160
is an mrjapp.properties file.

00:29:17.160 --> 00:29:20.260
And inside that file,
there's a main class setting.

00:29:20.260 --> 00:29:26.990
And that is the, it's really the name of
the class that gets run.

00:29:27.000 --> 00:29:28.970
So you, you know,
when you create a new project,

00:29:28.970 --> 00:29:31.720
there's a default name there,
but you actually may be adding sources

00:29:31.720 --> 00:29:33.250
and want to change what that is.

00:29:33.750 --> 00:29:37.720
There's also the class path,
which jar files get loaded.

00:29:37.720 --> 00:29:43.120
Command line arguments actually
go into that file as well.

00:29:43.120 --> 00:29:45.770
For Java tools,
tools that are meant to be

00:29:45.770 --> 00:29:49.490
run from the command line,
you basically give it standard

00:29:49.490 --> 00:29:53.600
command line arguments that you
would give to the Java executable

00:29:53.600 --> 00:29:55.460
in Java being user bin Java.

00:29:55.460 --> 00:29:59.390
If you actually have a
manifest file in your project,

00:29:59.580 --> 00:30:06.430
which contains a main class entry,
then you would give -jar and then the

00:30:06.650 --> 00:30:10.990
name of the jar file on the command line.

00:30:11.390 --> 00:30:14.480
And if you don't have a manifest file,
then you would just give the class

00:30:15.270 --> 00:30:19.810
path for your jar file and the name
of the main class on the command line.

00:30:21.740 --> 00:30:27.060
OK, so our debugger does a few things
to handle Java exceptions nicely.

00:30:27.270 --> 00:30:28.290
It's not all the way there.

00:30:28.300 --> 00:30:32.200
We have some UI that we want
to wrap around some of this.

00:30:32.310 --> 00:30:36.850
But by default, we stop when there's an
exception thrown that is not

00:30:36.850 --> 00:30:39.500
caught in your code somewhere.

00:30:39.530 --> 00:30:41.850
Now that's really cool.

00:30:42.660 --> 00:30:47.590
But it turns out that sometimes
there's code out there that

00:30:47.680 --> 00:30:50.640
catches these exceptions that
the debugger can't detect.

00:30:50.640 --> 00:30:55.300
If there's Java native code,
meaning like code written in C,

00:30:55.300 --> 00:31:00.360
they can actually catch exceptions,
and the debugger has no way to

00:31:00.360 --> 00:31:01.960
determine that ahead of time.

00:31:01.960 --> 00:31:05.690
So you actually might stop in a few
places that are a bit of a surprise.

00:31:05.700 --> 00:31:10.400
So this last point here,
there's a console just

00:31:10.400 --> 00:31:12.280
like a GDB console.

00:31:12.680 --> 00:31:14.470
In our debugger inside Project Builder.

00:31:14.580 --> 00:31:18.520
And there's a few commands
that help you take care of

00:31:18.520 --> 00:31:19.940
exceptions when you're debugging.

00:31:19.940 --> 00:31:25.260
And with that, let's show a few features
that are specific to Java.

00:31:30.800 --> 00:31:34.000
Oh, what a nice screensaver we have.

00:31:34.000 --> 00:31:37.480
OK, so when I was trying to
come up with a demo here,

00:31:37.480 --> 00:31:39.440
I actually had this
really teeny little demo.

00:31:39.440 --> 00:31:40.810
And I was thinking,
that's kind of boring.

00:31:40.820 --> 00:31:42.250
I need to do something flashy.

00:31:42.350 --> 00:31:46.940
So I went out and was looking
for a quick time for Java demo.

00:31:46.970 --> 00:31:48.440
And I couldn't really find anything.

00:31:48.440 --> 00:31:51.360
All of them have little teeny
pictures and kind of boring.

00:31:51.400 --> 00:31:55.120
So instead of doing something flashy,
I'm going to do something geeky.

00:31:55.130 --> 00:32:01.000
So here I have a little project that
uses the Antler parser generator

00:32:01.000 --> 00:32:03.240
to parse Java source files.

00:32:03.240 --> 00:32:06.000
And I don't really want to get
too much into how a parser works.

00:32:06.000 --> 00:32:10.240
I mean, this is a debugging session,
not a parser session.

00:32:10.250 --> 00:32:11.700
But it's a cool little program.

00:32:11.700 --> 00:32:18.080
We have a main class here that basically
just takes some command line arguments.

00:32:18.080 --> 00:32:23.080
At the bottom,
there's a routine called-- oh.

00:32:23.180 --> 00:32:29.320
Some of these are somewhere near
the bottom called parse file that

00:32:29.640 --> 00:32:36.200
creates a lexer which tokenizes the
source file and creates a parser

00:32:36.300 --> 00:32:40.280
which then actually does the parsing.

00:32:40.280 --> 00:32:44.730
And then we have this other
routine do tree action which

00:32:44.730 --> 00:32:44.730
actually creates a swing tree view
to look at what the parser parsed.

00:32:45.330 --> 00:32:51.660
So let's take a quick look at
the target for this project.

00:32:53.240 --> 00:32:55.390
You can see it compiles a
bunch of Java source files,

00:32:55.400 --> 00:32:56.560
no big deal.

00:32:56.560 --> 00:33:02.140
In the executable setting,
it runs the Java command line tool.

00:33:02.140 --> 00:33:04.810
And the arguments,
it passes the class path pointing to the

00:33:04.820 --> 00:33:07.140
jar file that's built by this project.

00:33:07.140 --> 00:33:11.760
And -show tree is what causes
this particular program

00:33:11.760 --> 00:33:14.100
to build the swing tree.

00:33:14.100 --> 00:33:18.310
And then I actually have two
more arguments over there.

00:33:18.390 --> 00:33:19.700
That are source files to parse.

00:33:19.700 --> 00:33:27.540
It's actually parsing the
main class file for this demo.

00:33:27.610 --> 00:33:31.290
So let's just run that so
you can see what it's doing.

00:33:34.070 --> 00:33:36.130
Comes up reasonably quickly.

00:33:36.280 --> 00:33:40.600
At the top level,
this is basically the root of the file.

00:33:40.820 --> 00:33:42.500
There's nine import statements here.

00:33:42.500 --> 00:33:46.450
There's a class declaration,
Java parser demo.

00:33:46.530 --> 00:33:52.490
Inside that,
there's a variable and four methods.

00:33:54.400 --> 00:33:57.000
OK, now I've set a breakpoint.

00:33:57.010 --> 00:33:59.990
Let's just go ahead and debug.

00:34:04.300 --> 00:34:05.860
And we hit the breakpoint here.

00:34:06.000 --> 00:34:08.240
Now it turns out one of the
cool things about this parser,

00:34:08.240 --> 00:34:10.930
the handler parser,
is that when it's looking ahead and

00:34:10.930 --> 00:34:15.200
it sees something that's confused,
it actually throws exceptions back to a,

00:34:15.200 --> 00:34:21.030
and those exceptions are caught in a
method which can handle the errors.

00:34:21.270 --> 00:34:26.510
So in order to see where it
might be throwing exceptions,

00:34:27.830 --> 00:34:30.040
We want to turn on the
catching of exceptions,

00:34:30.070 --> 00:34:34.390
so catch all, and we'll continue.

00:34:34.780 --> 00:34:36.000
We stopped pretty quickly.

00:34:36.000 --> 00:34:38.700
We actually stopped in
system class loader code.

00:34:38.780 --> 00:34:41.090
In this case,
this is a case where it's actually

00:34:41.090 --> 00:34:44.510
catching the exceptions in Java code,
and we can continue on and see it's

00:34:44.510 --> 00:34:47.500
just going to keep catching exceptions,
catching exceptions.

00:34:47.750 --> 00:34:50.050
So let's turn that off for a moment.

00:34:52.300 --> 00:34:57.990
Not much of a typer, I'm afraid.

00:34:59.580 --> 00:35:00.620
And let's go on.

00:35:00.620 --> 00:35:04.240
We should get to the break
point here in a second.

00:35:04.310 --> 00:35:09.650
So one of the things it's doing right
now is it's debugging very slowly.

00:35:09.790 --> 00:35:13.770
And that's something that's
actually fixed in the Java patch

00:35:13.780 --> 00:35:16.830
that should be live today.

00:35:16.890 --> 00:35:21.430
It uses the 131 VM while
you're debugging.

00:35:21.570 --> 00:35:23.580
So that speeds things up a lot.

00:35:23.680 --> 00:35:26.630
I actually wanted to get that on here,
but we were having other problems

00:35:26.720 --> 00:35:28.660
configuring these systems.

00:35:28.690 --> 00:35:30.500
So I didn't bother to get it there.

00:35:30.500 --> 00:35:33.200
OK, so we hit the break point.

00:35:33.320 --> 00:35:35.470
And let's turn on the
catching of exceptions now.

00:35:35.620 --> 00:35:37.960
So I've run through this twice.

00:35:37.980 --> 00:35:40.600
The first time it went
and parsed this file,

00:35:40.620 --> 00:35:42.940
there were all those
class load exceptions.

00:35:42.950 --> 00:35:44.270
And we didn't want to see that.

00:35:44.280 --> 00:35:46.180
So the second time
I hit this break point,

00:35:46.200 --> 00:35:47.420
all those classes are loaded.

00:35:47.420 --> 00:35:49.720
So we're not going to hit
exceptions for that anymore.

00:35:49.720 --> 00:35:56.900
So I can turn on-- just use the up
arrow-- turn on exceptions again.

00:35:57.780 --> 00:35:58.820
And just a moment here.

00:35:58.820 --> 00:36:04.340
OK, we caught an exception in the
routine antler.poster.match.

00:36:04.430 --> 00:36:08.810
If we look up the stack,
we can see we're actually trying to

00:36:08.810 --> 00:36:11.440
match an identifier on the input.

00:36:11.470 --> 00:36:14.330
The one thing you'll notice about this

00:36:15.090 --> 00:36:16.690
is that there's no
source code down below.

00:36:16.700 --> 00:36:20.580
The PC's not showing up there,
and that's sort of irritating.

00:36:20.600 --> 00:36:22.390
Well,
it turns out I have another project file

00:36:23.390 --> 00:36:26.900
that has the Antler source code in it,
so let me open that up.

00:36:28.230 --> 00:36:30.380
Just need to open it up,
don't have to do anything with it.

00:36:30.470 --> 00:36:34.770
Now if I click on that line,
it goes to the code in the other project.

00:36:34.920 --> 00:36:37.340
This is not a feature that's
specific to the Java debugger.

00:36:37.340 --> 00:36:39.940
I just wanted to sneak that in because
it's actually one of the cooler

00:36:39.940 --> 00:36:43.800
things about our debugging system.

00:36:43.900 --> 00:36:47.970
And you know what,
that's actually about all I have here.

00:36:48.210 --> 00:36:50.780
All the other standard stuff in the
debugger is pretty much the same.

00:36:50.780 --> 00:36:54.670
You can actually set variables in
this version of the debugger for Java.

00:36:54.750 --> 00:36:57.820
That's coming in the next
version for the GDB debugger.

00:36:57.870 --> 00:36:59.840
But that's it.

00:36:59.840 --> 00:37:03.420
And with that,
we can switch back over to the slides.

00:37:03.420 --> 00:37:06.800
I actually have the clicker here.

00:37:06.800 --> 00:37:09.220
I want to bring up
Jim Ingham and Klee Dienes.

00:37:09.220 --> 00:37:15.640
And they're going to talk about the
gory details of debugging with GDB.

00:37:15.640 --> 00:37:18.150
Thanks, .

00:37:20.630 --> 00:37:24.660
Well,
that's fast fingers Klee over there.

00:37:24.660 --> 00:37:25.940
I'm Jim.

00:37:25.990 --> 00:37:27.830
So we're going to tell
you something about GDB,

00:37:27.840 --> 00:37:32.240
which is the underlying debugger that
both MetroWorks and Project Builder

00:37:32.240 --> 00:37:40.280
use to run and control applications
under debugging on Mac OS X.

00:37:40.280 --> 00:37:41.540
First of all, a couple of words.

00:37:41.540 --> 00:37:44.330
They said something about this
in the MetroWorks session,

00:37:44.330 --> 00:37:46.070
too, and it got some applause, so

00:37:46.300 --> 00:37:51.360
Our goals for Project Builder are that
if you are a GUI type debugger person,

00:37:51.360 --> 00:37:54.540
you're used to MetroWorks,
things like that,

00:37:54.710 --> 00:37:59.260
we're not going to make anything
that you need to do as a user of

00:37:59.260 --> 00:38:03.070
debugging require the GDB command line.

00:38:03.080 --> 00:38:08.880
You'll always be able to get useful
features from the Project Builder

00:38:08.880 --> 00:38:11.260
just straightforwardly.

00:38:11.740 --> 00:38:15.070
But the other thing is that GDB is
actually a pretty powerful environment

00:38:15.070 --> 00:38:18.590
and there are some things which
using GDB you can actually get a

00:38:18.590 --> 00:38:21.280
lot of leverage of its capabilities.

00:38:21.290 --> 00:38:25.070
So we also want to make it possible
if you're a GDB user that you can live

00:38:25.070 --> 00:38:28.300
in the Project Builder environment,
get advantages of locating

00:38:28.300 --> 00:38:31.460
sources and stuff like that,
and still be able to use the

00:38:31.460 --> 00:38:35.040
nice features in GDB that if
you've come accustomed to them,

00:38:35.040 --> 00:38:39.940
you love them or you might learn
to love them at some point.

00:38:39.940 --> 00:38:41.020
We're not all the way there yet.

00:38:41.020 --> 00:38:41.720
There are some things in the project
that we're going to be able to

00:38:41.720 --> 00:38:41.720
do that are going to be useful.

00:38:41.720 --> 00:38:41.780
So we're going to be able to do that.

00:38:41.780 --> 00:38:44.410
There are some things in the
GDB console window that don't work

00:38:44.410 --> 00:38:47.400
the way they do in the terminal,
which is why in our demo we're

00:38:47.400 --> 00:38:50.730
actually going to be using terminal,
but we'll get there.

00:38:50.740 --> 00:38:54.540
So why would you want to use GDB as
opposed to Project Builder or in

00:38:54.540 --> 00:38:56.650
the context of Project Builder?

00:38:56.680 --> 00:38:59.100
It's actually a very
good low-level debugger.

00:38:59.120 --> 00:39:02.620
It knows everything
about your application.

00:39:02.620 --> 00:39:05.560
It's been hacked on by
people for years and years,

00:39:05.560 --> 00:39:09.440
both in the embedded environment
and in the Unix environment.

00:39:09.440 --> 00:39:11.550
So there are a lot of
features for locating.

00:39:11.700 --> 00:39:14.130
Learning about your program,
poking around,

00:39:14.240 --> 00:39:15.330
and various things like that.

00:39:15.400 --> 00:39:19.040
It's the low-level debugger
that everybody uses,

00:39:19.040 --> 00:39:23.280
so the features that are going
to be in Project Builder will

00:39:23.280 --> 00:39:25.700
already be in GDB most likely.

00:39:25.700 --> 00:39:29.000
So if there's something we haven't
gotten around to yet in Project Builder,

00:39:29.000 --> 00:39:30.820
it'll probably be available in GDB.

00:39:30.820 --> 00:39:34.940
So just if you need something that
we haven't gotten around to yet.

00:39:34.960 --> 00:39:38.950
It's also scriptable,
so if there are sort of actions that you

00:39:38.950 --> 00:39:43.960
want to attach to things that happen,
in the course of your debugging,

00:39:43.960 --> 00:39:46.600
you can do that within
the GDB command language,

00:39:46.600 --> 00:39:48.440
which is a really nice feature.

00:39:48.440 --> 00:39:51.700
And finally, it's extensible,
so if you have some special

00:39:51.720 --> 00:39:54.900
purpose things that you want to do,
and we'll show an example

00:39:54.910 --> 00:39:58.060
of that a little later on,
it's possible to extend the

00:39:58.060 --> 00:40:01.010
GDB debugger to do those things for you.

00:40:01.060 --> 00:40:04.720
It's an open source debugger,
so the extensions,

00:40:04.720 --> 00:40:06.680
you just get the source.

00:40:06.680 --> 00:40:10.020
We have a plug-in architecture,
and you can make commands,

00:40:10.020 --> 00:40:11.660
but also the source is available to you.

00:40:11.660 --> 00:40:13.640
You can look at it,
see everything that's going on,

00:40:13.640 --> 00:40:14.150
and so on.

00:40:14.160 --> 00:40:19.080
So the first thing is sort of what
kind of things at this stage are there,

00:40:19.080 --> 00:40:22.860
which we haven't yet gotten into PB,
which you might want to use GDB for.

00:40:22.960 --> 00:40:25.360
We'll give you three examples of that.

00:40:25.360 --> 00:40:28.500
One is remote debugging,
which we certainly intend

00:40:28.500 --> 00:40:30.740
to get PB able to do,
but it doesn't do yet.

00:40:30.900 --> 00:40:34.510
The other is debugging PEPF binaries,
which in all likelihood

00:40:34.510 --> 00:40:36.720
won't make it into PB,
but we'll see.

00:40:36.780 --> 00:40:40.320
And then the third is kernel debugging,
another thing that we'd like

00:40:40.320 --> 00:40:42.850
to do in Project Builder,
but that's going to take more work

00:40:42.920 --> 00:40:45.750
because just the setup for kernel
debugging is a little bit grody.

00:40:45.760 --> 00:40:48.760
So first of all, remote debugging.

00:40:48.920 --> 00:40:52.790
This is where you have the,
you're running the,

00:40:53.060 --> 00:40:55.140
controlling the debugger on one machine.

00:40:55.280 --> 00:40:58.400
You're actually running the debugger
and the application on another machine.

00:40:58.470 --> 00:41:02.010
We don't have the situation like
MetroWorks where they have a little nub.

00:41:02.420 --> 00:41:07.020
But in any case,
the point is that you are not typing,

00:41:07.020 --> 00:41:10.010
you're not switching the debugger into
the foreground or anything like that

00:41:10.120 --> 00:41:11.590
while you're running the application.

00:41:11.630 --> 00:41:17.380
So this is good for full screen
applications like games or situations

00:41:17.380 --> 00:41:19.440
where you're trying to debug,
kind of mouse tracking

00:41:19.440 --> 00:41:22.380
and stuff like that,
where having the debugger come to the

00:41:22.380 --> 00:41:25.680
foreground is obviously not going to
help you figure out what's going on.

00:41:25.680 --> 00:41:28.870
So the way that you do this
is that you would start the

00:41:28.950 --> 00:41:32.680
application on the remote machine,
and you have to do that.

00:41:32.680 --> 00:41:36.170
You can't actually start an
application remotely if it connects

00:41:36.170 --> 00:41:40.920
to the Windows server because
the Windows server doesn't allow

00:41:40.920 --> 00:41:41.600
you to do that from Telnet or SSH.

00:41:41.630 --> 00:41:44.900
So you have to go to the machine
that's going to run the application,

00:41:44.900 --> 00:41:47.060
start it up,
and then you go to the machine

00:41:47.060 --> 00:41:49.960
you're going to be debugging from,
and you Telnet into the machine,

00:41:49.960 --> 00:41:53.770
running the application using Telnet,
SSH, whatever your favorite thing is.

00:41:54.000 --> 00:41:56.540
And then you use GDB's attach command.

00:41:56.600 --> 00:41:58.890
So the way that that
works is you say attach,

00:41:58.950 --> 00:42:03.060
and then you can give the PID,
the process ID of your application,

00:42:03.060 --> 00:42:04.700
which you can find
through top or whatever.

00:42:04.700 --> 00:42:06.880
But actually we've made it a
little more convenient than that.

00:42:06.940 --> 00:42:11.580
If you type the application name of
your application and then hit tab,

00:42:11.580 --> 00:42:13.910
it'll actually go and
look at the process list,

00:42:14.120 --> 00:42:16.580
find your process for you,
and fill it in.

00:42:16.580 --> 00:42:18.580
If there's more than one
process of the same name,

00:42:18.580 --> 00:42:21.580
it'll offer you the choice of,
and you can figure out

00:42:21.580 --> 00:42:22.580
which process it is.

00:42:22.640 --> 00:42:26.580
Again, processes are listed sequentially,
so if it was launched,

00:42:26.580 --> 00:42:29.630
the latest launch one is
going to have the highest PID,

00:42:29.630 --> 00:42:30.560
so you can kind of
figure it out that way.

00:42:30.580 --> 00:42:32.980
And as I say,
we have a few more infrastructure

00:42:33.780 --> 00:42:37.570
things that we have to do in GDB to
make this available in Project Builder,

00:42:37.580 --> 00:42:41.560
but it'll be available in
Project Builder in the future.

00:42:41.560 --> 00:42:44.560
So the other thing is
using GDB with CarbonPath.

00:42:44.560 --> 00:42:47.550
So, you know, Maco is the preferred
format for Mac OS X.

00:42:47.600 --> 00:42:51.560
That's the one that our tools will
support fully and enthusiastically.

00:42:51.560 --> 00:42:55.400
But there are some cases where, you know,
if you're debugging a

00:42:55.400 --> 00:42:58.530
CarbonPath application,
you might want to get some features

00:42:58.580 --> 00:43:00.490
which aren't available in Code Warrior.

00:43:00.610 --> 00:43:05.560
For instance, up until Code Warrior 7,
it didn't know about Maco binary.

00:43:05.560 --> 00:43:09.510
So if you wanted to set a breakpoint
in a function in Maco binary

00:43:09.510 --> 00:43:12.770
that was called on your behalf,
and it wasn't, you know,

00:43:12.880 --> 00:43:15.390
exported to path through
one of these vector libs,

00:43:15.750 --> 00:43:20.410
then the only way to do that was to
run your application under GDB instead

00:43:20.530 --> 00:43:21.540
and set the breakpoint there.

00:43:21.540 --> 00:43:23.540
So that's kind of the main use for it.

00:43:23.540 --> 00:43:25.540
I haven't actually played
with the new Code Warrior yet,

00:43:25.540 --> 00:43:28.540
so I don't know how easy that
is to do in Code Warrior.

00:43:28.550 --> 00:43:31.540
Maybe you can do that fine,
and this is irrelevant.

00:43:31.690 --> 00:43:34.670
But also it's nice because, you know,
you can connect remotely if that's

00:43:34.670 --> 00:43:36.540
important to you and other such things.

00:43:36.540 --> 00:43:41.520
So the way that you do that is, first,
as Robert said, if you want to use really

00:43:41.520 --> 00:43:44.070
complex applications,
like, say, any of the Apple tools

00:43:44.400 --> 00:43:48.480
with CarbonPath binaries,
then you should build with inline

00:43:48.480 --> 00:43:52.710
traceback tables in Code Warrior,
because that records information about

00:43:52.710 --> 00:43:56.450
the functions such that the debuggers
and all the other performance tools

00:43:56.600 --> 00:43:59.520
can find the names of your functions.

00:43:59.520 --> 00:44:04.740
And then the next thing is that the
loader itself is not the thing--the

00:44:04.740 --> 00:44:08.520
application loader on Mac OS X doesn't
actually load CarbonPath binaries.

00:44:08.520 --> 00:44:11.500
It's actually an application,
a Maco application.

00:44:11.500 --> 00:44:15.500
Which is responsible for
loading the CarbonPath binary.

00:44:15.500 --> 00:44:17.430
So that's this thing called LaunchCFMApp.

00:44:17.520 --> 00:44:20.470
That's the thing that
you have to run GDB on.

00:44:20.710 --> 00:44:24.490
And I say long path because if
I actually typed it out on the screen,

00:44:24.490 --> 00:44:26.490
it would actually fill this whole slide.

00:44:26.500 --> 00:44:29.500
But if you look at the little URL,
it's in the URL,

00:44:29.500 --> 00:44:31.490
so just cut it and paste it.

00:44:31.710 --> 00:44:35.140
And then when you run,
the way that the LaunchCFM application

00:44:35.140 --> 00:44:40.420
works is that it takes as its first
argument the name of the CarbonPath

00:44:40.460 --> 00:44:41.480
application that you are running.

00:44:41.480 --> 00:44:43.060
are actually attempting to run.

00:44:43.060 --> 00:44:45.980
So in GDB,
you say run and then you give it the name

00:44:45.980 --> 00:44:48.180
of the application that you want to run.

00:44:48.180 --> 00:44:50.400
And as I say,
there's much more details about

00:44:50.430 --> 00:44:54.480
this in this tips and tricks URL.

00:44:54.930 --> 00:44:58.970
So then the other place where you
need to use GDB and Project Builder

00:44:58.970 --> 00:45:02.140
doesn't support this yet is
kernel extension debugging.

00:45:02.140 --> 00:45:04.780
This is a two machine
debugging situation.

00:45:04.800 --> 00:45:07.980
In this case,
GDB runs on the machine that

00:45:08.030 --> 00:45:10.340
you're sitting on because of
course you're debugging the kernel

00:45:10.340 --> 00:45:12.980
and GDB is a user space program,
so it's really not going to

00:45:13.030 --> 00:45:14.560
be able to run on the machine.

00:45:14.560 --> 00:45:18.970
The two machines talk to one
another through a protocol

00:45:19.090 --> 00:45:21.340
called the KDP protocol.

00:45:21.340 --> 00:45:22.840
You don't need to worry
too much about that.

00:45:22.840 --> 00:45:26.880
The only thing is kind of conceptually
what's going on is that the kernel

00:45:26.880 --> 00:45:31.190
has a little agent that lives in the
kernel and GDB connects to that agent

00:45:31.190 --> 00:45:37.540
and talks to it with some protocol
and that's how the GDB sitting on your

00:45:37.540 --> 00:45:40.320
desktop machine is able to control
the kernel that you're connecting to.

00:45:40.340 --> 00:45:42.970
The only restriction is that
the two machines have to be

00:45:42.970 --> 00:45:44.570
on the same subnet to connect.

00:45:44.600 --> 00:45:48.560
When you're running the kernel under GDB,
it's just like you're

00:45:48.650 --> 00:45:49.830
running any other program.

00:45:49.840 --> 00:45:51.600
There's nothing particularly
special going on.

00:45:51.600 --> 00:45:55.600
You can do backtraces,
you can control execution.

00:45:55.620 --> 00:46:00.120
Everything works just like GDB running
on a normal application and it's

00:46:00.170 --> 00:46:03.600
kind of hidden to you that you're
talking across this protocol.

00:46:03.600 --> 00:46:07.660
The only thing to keep in mind though
is that you are talking to a little

00:46:07.660 --> 00:46:11.580
agent that's living in the kernel,
so if you do something really heinous

00:46:11.650 --> 00:46:17.600
to the kernel in the course of your
running your kernel extension or whatever

00:46:17.600 --> 00:46:21.990
and that causes the kernel to lock up,
then you could very likely

00:46:21.990 --> 00:46:25.240
kill the little agent and then
GDB is just dead because it

00:46:25.240 --> 00:46:26.360
has nothing to talk to anymore.

00:46:26.360 --> 00:46:29.480
What you'll see is it will start
reporting timeouts talking to

00:46:29.480 --> 00:46:32.870
the kernel agent and that means
that you've completely hosed the

00:46:32.870 --> 00:46:34.360
machine and you'll have to reset.

00:46:34.360 --> 00:46:35.360
Sorry.

00:46:35.360 --> 00:46:39.360
And then there's much more information
about this in the tutorial.

00:46:40.990 --> 00:46:44.770
Okay, so now we're going to just show
you a few of the neato reasons

00:46:44.870 --> 00:46:49.000
why you might want to use GDB,
even if you have a nice,

00:46:49.100 --> 00:46:54.060
fancy IDE to control sort of the
more common aspects of debugging,

00:46:54.060 --> 00:46:55.520
like inspecting variables and stuff.

00:46:55.570 --> 00:46:57.280
So there are a few features
that we'll talk about.

00:46:57.280 --> 00:46:58.840
One is the expression evaluator.

00:46:58.840 --> 00:47:02.250
We'll talk about how you
can have commands which fire

00:47:02.250 --> 00:47:04.210
when breakpoints are hit.

00:47:04.330 --> 00:47:06.540
We'll talk about how to set up
conditional breakpoints so that

00:47:06.540 --> 00:47:09.040
you can have breakpoints only
hit when certain things happen.

00:47:09.040 --> 00:47:13.240
You can take a bunch of actions and
can them up into your own user-defined

00:47:13.240 --> 00:47:15.640
commands to extend the GDB language.

00:47:15.640 --> 00:47:19.410
And finally, if you're really ambitious,
you can write your own extensions

00:47:19.420 --> 00:47:21.180
to GDB and see and load them in.

00:47:21.180 --> 00:47:24.460
For all of this, the GDB manual is in
the developer package.

00:47:24.540 --> 00:47:27.520
It's in developer documentation,
developer tools,

00:47:27.520 --> 00:47:29.400
and it's a pretty nice manual.

00:47:29.400 --> 00:47:32.470
It gives you, you know,
tells you about all the GDB commands,

00:47:32.470 --> 00:47:34.680
has some nice examples,
things you might like to do.

00:47:34.680 --> 00:47:37.420
So if you get interested in this,
that's a good place

00:47:37.420 --> 00:47:38.880
to go for information.

00:47:38.880 --> 00:47:43.510
So now, Klee is going to,
this is Klee Dinas.

00:47:43.510 --> 00:47:46.080
He's my cohort in GDB things.

00:47:46.080 --> 00:47:50.580
He's going to show you
some cool GDB stuff.

00:47:51.460 --> 00:47:53.880
So the first thing is
the expression evaluator.

00:47:53.890 --> 00:47:58.870
Basically, you can call any function
that's in your target from GDB.

00:47:58.880 --> 00:48:01.410
And you just use the syntax of
the language that's involved.

00:48:01.520 --> 00:48:05.170
So we'll use the appearance sample,
our favorite little demo.

00:48:05.180 --> 00:48:07.530
And in this case,
what we're going to do is call the

00:48:07.900 --> 00:48:11.550
print functions that are in Carbon,
which help you get access to all

00:48:11.570 --> 00:48:15.620
of the opaque stuff that you're
not supposed to look at anymore.

00:48:15.630 --> 00:48:18.040
So first of all,
there are a bunch of print functions.

00:48:18.120 --> 00:48:19.840
I can never remember the names of things.

00:48:19.840 --> 00:48:21.960
And I refuse to remember
the names of things if I can

00:48:21.960 --> 00:48:23.040
remember how to find them.

00:48:23.290 --> 00:48:25.650
So it's actually info function.

00:48:25.960 --> 00:48:28.240
So there's a gdb command info function.

00:48:28.240 --> 00:48:29.760
You give it a regular expression.

00:48:29.760 --> 00:48:30.480
Don't worry about that.

00:48:30.560 --> 00:48:31.800
And just copy this down.

00:48:31.850 --> 00:48:32.980
And it'll tell you
everything that's there.

00:48:33.010 --> 00:48:35.680
So there's all the lovely debug
print functions you can poke

00:48:35.770 --> 00:48:37.180
around and use any of them.

00:48:37.180 --> 00:48:38.040
Let's print the window list.

00:48:38.060 --> 00:48:39.100
See what's there.

00:48:39.100 --> 00:48:40.080
Nothing yet.

00:48:40.160 --> 00:48:45.140
So if we step one step, or next-- OK,
now we've created a window.

00:48:45.160 --> 00:48:47.020
So if we look at the
window list this time,

00:48:47.140 --> 00:48:48.200
hey, there's a window.

00:48:48.310 --> 00:48:50.630
And so then we can look up and then, hey,
there's a debug print window.

00:48:50.660 --> 00:48:51.920
So let's see about that one.

00:48:51.920 --> 00:48:54.320
So we're going to call
debug print window.

00:48:54.450 --> 00:48:57.480
The first entry is the
actual window token.

00:48:57.480 --> 00:49:00.320
And since it's hex,
we have to tell gdb it's hex.

00:49:00.420 --> 00:49:03.520
So there's all your
information about the window.

00:49:03.530 --> 00:49:06.140
A couple of other things to
remember is that the functions that

00:49:06.200 --> 00:49:08.400
you call do change target state.

00:49:08.420 --> 00:49:10.490
None of these debug functions do,
obviously,

00:49:10.490 --> 00:49:13.780
unless the guys in the Carbon are
pulling some kind of joke on you.

00:49:13.830 --> 00:49:18.660
But in general,
a function will run in your program,

00:49:18.660 --> 00:49:19.670
which may be good.

00:49:19.690 --> 00:49:21.920
You may actually want
to change target state.

00:49:21.950 --> 00:49:28.300
But if you call a function that crashes,
you'll crash your program.

00:49:28.310 --> 00:49:31.860
Also, you can call these functions
anywhere you use a gdb expression.

00:49:31.860 --> 00:49:37.840
So you can set variables to the value of
a function called and so on and so forth.

00:49:37.840 --> 00:49:40.700
So the next thing which is really
useful is breakpoint commands.

00:49:40.720 --> 00:49:43.030
We're going to give a silly
little example here where

00:49:43.030 --> 00:49:43.840
you might want to use it.

00:49:43.840 --> 00:49:46.540
Although for this,
there are other tools like ObjectAlloc

00:49:46.640 --> 00:49:49.590
that probably do a better job of it.

00:49:49.610 --> 00:49:52.220
But you've got a problem with
retains and releases with CF,

00:49:52.220 --> 00:49:53.280
with core foundations.

00:49:53.280 --> 00:49:56.720
Somebody is over-releasing something,
and your program is crashing.

00:49:56.730 --> 00:49:59.420
And what you'd really like to
do is know all the times that

00:49:59.420 --> 00:50:02.480
an object gets retained and all
the times that it gets released,

00:50:02.610 --> 00:50:06.100
some of these are not under your
control because they're called on your

00:50:06.180 --> 00:50:08.500
behalf by various other CF functions.

00:50:08.500 --> 00:50:14.780
So you need some other way to
get when that actually occurs.

00:50:14.800 --> 00:50:17.080
So what we're going to do is
we're going to run-- we built

00:50:17.080 --> 00:50:18.160
this little string example.

00:50:18.160 --> 00:50:19.770
And if you notice,
there's a bug that we've got

00:50:19.780 --> 00:50:22.080
to release the str1 twice.

00:50:22.080 --> 00:50:23.150
That's down at the bottom.

00:50:23.160 --> 00:50:24.460
That's the bug.

00:50:24.860 --> 00:50:29.410
So what we want to do is we
want to break on the CF retain,

00:50:29.520 --> 00:50:31.780
break on CF release every time it occurs.

00:50:31.780 --> 00:50:34.200
And then when that occurs,
we'd like to print out a little

00:50:34.200 --> 00:50:37.760
information for ourselves so that we
don't have to go grub around every time.

00:50:37.780 --> 00:50:39.800
To do that, you set a command.

00:50:39.800 --> 00:50:41.660
So you say commands.

00:50:41.660 --> 00:50:45.310
And then if you don't give an argument,
it's the last breakpoint you set is

00:50:45.310 --> 00:50:47.200
the one that the commands register for.

00:50:47.200 --> 00:50:49.440
You can also give a breakpoint number.

00:50:49.440 --> 00:50:51.360
In this case, what we're doing is we're,
again,

00:50:51.360 --> 00:50:53.880
calling inferior functions on our behalf.

00:50:53.920 --> 00:50:55.930
We're getting the retain count.

00:50:55.940 --> 00:51:00.160
The little trick is that the arguments
that are passed to a function

00:51:00.160 --> 00:51:04.620
in the PowerPC ABI are stored
sequentially starting in register 3,

00:51:04.620 --> 00:51:06.500
register 4, 5, and so on.

00:51:06.500 --> 00:51:10.300
So since we know that the
CF retain takes one argument,

00:51:10.340 --> 00:51:14.080
which is the thing that you're retaining,
that's got to be in R3.

00:51:14.080 --> 00:51:17.080
So we say CF get retain count of $R3.

00:51:17.080 --> 00:51:21.060
That's just the argument
that's passed to CF retain.

00:51:21.060 --> 00:51:24.940
And then we're going to print some
information about what's going on there.

00:51:24.940 --> 00:51:27.680
And we're going to print the backtrace.

00:51:27.680 --> 00:51:32.020
So Klee is also-- because he doesn't
want to have to type all this stuff in--

00:51:32.130 --> 00:51:33.970
he's using the source command in GDB.

00:51:33.980 --> 00:51:37.980
He put this stuff in a file and is
just using the source command to

00:51:37.980 --> 00:51:40.120
bring that file of GDB commands in.

00:51:40.150 --> 00:51:41.740
So it made a couple breakpoints.

00:51:41.740 --> 00:51:42.480
So this is cool.

00:51:42.480 --> 00:51:46.980
Now every time he continues,
we hit a CF retain, CF release call.

00:51:47.120 --> 00:51:49.910
We print a little information,
and we can step through code this way,

00:51:49.950 --> 00:51:53.640
sort of automatically printing out
the stuff that's interesting to us.

00:51:53.660 --> 00:51:57.800
But if you were in a big program,
and this was going to

00:51:57.800 --> 00:52:00.290
happen hundreds of times,
you probably wouldn't want

00:52:00.370 --> 00:52:02.530
to step through each time,
because that would get

00:52:02.530 --> 00:52:03.800
really old very quickly.

00:52:03.900 --> 00:52:08.230
What you might want to do is sort of do
an on the fly logging facility instead,

00:52:08.230 --> 00:52:10.440
to log all the calls
to retain and release.

00:52:10.450 --> 00:52:12.220
So you can do that also.

00:52:12.220 --> 00:52:16.340
You can just put a continue
command in your breakpoint command,

00:52:16.490 --> 00:52:19.690
and that says, hit this breakpoint,
do a little bit of logging,

00:52:19.690 --> 00:52:23.010
print out some stuff,
and then keep running.

00:52:23.970 --> 00:52:27.500
I have a little log of all
our cf.retains and releases.

00:52:27.550 --> 00:52:30.620
This also is a little
bit overkill because,

00:52:30.620 --> 00:52:32.840
I mean, you know,
there might be hundreds of these.

00:52:32.840 --> 00:52:34.860
This is going to just
totally swamp the screen.

00:52:34.860 --> 00:52:37.040
It would be nice if you could
be a little more discriminating

00:52:37.200 --> 00:52:40.060
about what you are watching.

00:52:40.340 --> 00:52:42.510
So that's the point of
conditional break points.

00:52:42.570 --> 00:52:47.330
You can tell GDB to stop only
when certain conditions are true.

00:52:47.410 --> 00:52:51.950
The conditions can be basically
any expression which is valid

00:52:51.970 --> 00:52:55.800
in the language that you stop at
when you hit that break point.

00:52:55.820 --> 00:52:59.290
And the condition gets re-evaluated
every time you hit the break point.

00:52:59.310 --> 00:53:01.960
So you can basically write some C code,
whatever you want,

00:53:01.970 --> 00:53:07.710
and GDB will evaluate that C code
and then either stop or not based

00:53:07.710 --> 00:53:09.350
on whether it's true or false.

00:53:09.530 --> 00:53:13.300
So in this case,
what we're going to do is, again,

00:53:13.460 --> 00:53:18.910
we have a suspicion that
it's str1 that's the bad guy.

00:53:19.190 --> 00:53:21.920
So we want to only watch
retains and releases of str1.

00:53:21.920 --> 00:53:25.040
Remember,
since the condition is getting evaluated

00:53:25.450 --> 00:53:28.840
every time the break points hit,
str1 is no longer in scope.

00:53:28.950 --> 00:53:33.030
So we have to actually store away
str1 so we can use it later on.

00:53:33.190 --> 00:53:35.520
And GDB allows you to use
convenience variables.

00:53:35.520 --> 00:53:38.200
Any variable that begins with a
dollar sign is actually a variable

00:53:38.200 --> 00:53:40.540
that GDB stashes away on your behalf.

00:53:40.620 --> 00:53:45.720
So we're storing str1 when we first
create it in this watch variable,

00:53:45.890 --> 00:53:47.850
and then we do the regular stuff.

00:53:47.940 --> 00:53:49.080
We make our break.

00:53:49.080 --> 00:53:51.880
And we actually are also
including the command in the

00:53:51.880 --> 00:53:52.880
file he's going to source in.

00:53:52.880 --> 00:53:55.960
And then finally,
we set a condition on this break point.

00:53:55.960 --> 00:53:59.660
$bpnum is another of these
magical convenience variables.

00:53:59.840 --> 00:54:04.690
It's just the number of the
last break point that was set.

00:54:04.820 --> 00:54:07.180
So if you want to store away
a break point number for

00:54:07.180 --> 00:54:11.180
later use in your commands,
you use the bpnum variable.

00:54:11.190 --> 00:54:16.070
And we're going to break when $r3, again,
the argument to the cf retain

00:54:16.070 --> 00:54:19.720
is equal to this watch variable
that we've stored away.

00:54:19.720 --> 00:54:26.390
So-- So that's cool, nothing printed.

00:54:47.790 --> 00:54:51.950
Now we only see the ones for the
token that we were interested in.

00:54:52.030 --> 00:54:56.270
And finally, this would get really old to
type after a while and also,

00:54:56.540 --> 00:54:59.500
you know, notice that he was able
to call a start watch,

00:54:59.700 --> 00:55:04.060
stop watch to actually watch
just one particular thing.

00:55:04.060 --> 00:55:05.520
If you were going to do
this over and over again,

00:55:05.520 --> 00:55:08.930
it would be nice to can the set of
operations that did the watching and

00:55:08.930 --> 00:55:11.680
then just reuse them over and over again.

00:55:11.830 --> 00:55:15.440
For that, you can use what are called
user-defined commands in GDB.

00:55:15.440 --> 00:55:18.540
The syntax, this is not a particularly
useful example,

00:55:18.540 --> 00:55:22.610
this is just to show the syntax,
is you say define and then you give

00:55:22.610 --> 00:55:25.360
any name of the command that you want.

00:55:25.430 --> 00:55:27.200
If you name it the same
as the GDB command,

00:55:27.210 --> 00:55:30.940
you'll override the GDB command which
may or may not be what you want,

00:55:30.940 --> 00:55:32.040
probably not.

00:55:32.040 --> 00:55:36.760
And then you give any valid GDB commands
and finally the end statement.

00:55:36.760 --> 00:55:39.210
So the more complicated one
that we're using is actually

00:55:39.210 --> 00:55:42.490
over on the screen there,
the start watching command.

00:55:42.720 --> 00:55:44.880
The other thing about
the GDB define commands,

00:55:44.880 --> 00:55:45.410
you can actually pass it on to the user.

00:55:45.420 --> 00:55:49.070
You can pass arguments to them and they
are stored in convenience variables,

00:55:49.070 --> 00:55:51.560
$arg0, $arg1, and so on and so forth.

00:55:51.660 --> 00:55:54.410
So we want to say start watching
in the string we're interested

00:55:54.410 --> 00:55:58.840
in watching and that gets
stored into this watch variable.

00:55:58.840 --> 00:56:01.520
And then we've set the breakpoints
up in advance so they're

00:56:01.520 --> 00:56:02.980
just sitting around for us.

00:56:02.980 --> 00:56:06.510
Our start watching command just enables
those breakpoints so you can enable

00:56:06.510 --> 00:56:09.960
and disable breakpoints in GDB just
like you can in Project Builder.

00:56:10.020 --> 00:56:12.500
And finally we set the
conditions on those breakpoints.

00:56:12.500 --> 00:56:15.400
And then we, for convenience,
defined a stop watching command.

00:56:15.400 --> 00:56:18.050
You can say, okay, I'm not interested in
watching those things anymore.

00:56:18.060 --> 00:56:21.010
You just type stop
watching and you're done.

00:56:21.140 --> 00:56:23.000
That's convenient.

00:56:23.000 --> 00:56:23.920
Yeah, that's this.

00:56:23.920 --> 00:56:26.720
So we define these two commands,
start watching and stop watching.

00:56:26.720 --> 00:56:28.960
And finally,
you can put all this in a file,

00:56:28.960 --> 00:56:30.520
and then there's a GDB source command.

00:56:30.520 --> 00:56:32.840
You can just say source
and give a file name,

00:56:32.840 --> 00:56:35.060
and all these commands
will be sourced into GDB.

00:56:35.060 --> 00:56:36.860
They'll be available to you.

00:56:36.860 --> 00:56:40.620
So if you have a bunch of special
purpose tasks that you do in GDB,

00:56:40.620 --> 00:56:44.020
you can make a whole directory
full of useful little files and

00:56:44.020 --> 00:56:46.690
source them in as you need them,
and you don't actually

00:56:46.690 --> 00:56:47.910
have to type stuff.

00:56:48.400 --> 00:56:53.040
So the last feature is this allows you
to do things in the GDB command language.

00:56:53.040 --> 00:56:57.250
The one thing to be a little bit aware
of is that GDB's command language is

00:56:57.390 --> 00:57:01.530
not designed to be a high-performance
interpreter by any means.

00:57:01.530 --> 00:57:04.620
So if you're doing something really,
really complicated,

00:57:04.620 --> 00:57:06.660
it's probably going to get slow on you.

00:57:06.660 --> 00:57:09.620
And at that point,
you might think about whether you wanted

00:57:09.670 --> 00:57:12.520
to write an extension to GDB in C,
C++, Objective-C.

00:57:12.520 --> 00:57:14.510
I mean,
the nice thing is you get access to

00:57:14.510 --> 00:57:16.560
all of GDB's internal functionality.

00:57:16.560 --> 00:57:19.450
On the other hand,
GDB has a lot of internal functionality,

00:57:19.460 --> 00:57:21.420
not all of which is
terribly well-documented,

00:57:21.420 --> 00:57:23.100
so there's a fairly high learning curve.

00:57:23.220 --> 00:57:25.270
But if you have a job to do,
you got a job to do.

00:57:25.270 --> 00:57:26.390
You know, this might help you.

00:57:26.400 --> 00:57:30.610
The other thing to keep in mind
is that GDB is under the GPL.

00:57:30.610 --> 00:57:33.700
It's an open-source piece of software.

00:57:33.700 --> 00:57:36.850
So if you are thinking about
writing GDB plug-ins which you

00:57:36.850 --> 00:57:41.190
want to make commercial things,
then realize that they're going to

00:57:41.190 --> 00:57:42.470
have to be distributed under the GPL.

00:57:42.480 --> 00:57:44.230
So the GPL license as well.

00:57:44.370 --> 00:57:47.620
If you want to just use it for in-house,
it doesn't matter.

00:57:47.620 --> 00:57:51.550
The GPL allows you to do whatever
you want for in-house use and

00:57:51.550 --> 00:57:55.870
only restricts what you do if
you're trying to sell or distribute

00:57:56.010 --> 00:57:58.120
commercially or whatever your software.

00:57:58.240 --> 00:58:00.780
They're faster and they
have much more capability,

00:58:00.810 --> 00:58:02.290
much more flexible than GDB.

00:58:02.420 --> 00:58:03.590
So here's our example.

00:58:03.650 --> 00:58:08.010
You know, the guys at--various people at
Apple have MaxBugs wired into

00:58:08.010 --> 00:58:12.440
their mental processes and their
fingers just type MaxBugs commands.

00:58:12.440 --> 00:58:17.710
And so the people who were using GDB,
a bunch of the guys in our group

00:58:17.710 --> 00:58:20.940
just couldn't type the GDB commands.

00:58:20.940 --> 00:58:22.160
They needed the MaxBug commands.

00:58:22.160 --> 00:58:23.100
They needed MaxBug.

00:58:23.130 --> 00:58:23.730
They needed it.

00:58:23.730 --> 00:58:27.690
So one of them actually
went to the trouble of--

00:58:29.100 --> 00:58:30.760
Making MaxBug.

00:58:30.760 --> 00:58:33.340
So it's got the complete
MaxBug command sets.

00:58:33.340 --> 00:58:34.690
It updates properly.

00:58:34.820 --> 00:58:39.990
It has all the instruction listing and
everything that you've come to love.

00:58:40.570 --> 00:58:45.610
It's got a nice little help so you
can figure out what they all are.

00:58:45.890 --> 00:58:48.700
Actually been a lifesaver
for some of the people here.

00:58:48.700 --> 00:58:54.140
The one thing about it is that it's in
this user lib exec GDB plugins max bug,

00:58:54.140 --> 00:58:55.490
and you just source that file in.

00:58:55.490 --> 00:58:58.730
In the version that's
on both GM and the CDs,

00:58:58.810 --> 00:59:02.910
there was a bug in the
file that you source in.

00:59:02.920 --> 00:59:04.980
A path was set to be wrong.

00:59:04.980 --> 00:59:07.610
So you just need to go change
that if you want to use this.

00:59:07.650 --> 00:59:11.140
And there's a tech note
on the developer website.

00:59:11.140 --> 00:59:13.100
Please, typing in the address now.

00:59:13.100 --> 00:59:15.300
That tells you what you need to do.

00:59:15.300 --> 00:59:18.560
But actually, if you fire it up once,
it'll say, can't find this file.

00:59:18.560 --> 00:59:20.940
And you'll look,
and there's bogus stuff in the file,

00:59:20.940 --> 00:59:21.710
obviously.

00:59:21.730 --> 00:59:24.190
So it's pretty easy to fix.

00:59:25.020 --> 00:59:26.000
OK.

00:59:26.000 --> 00:59:31.120
And with that, I'll bring Dave back up to
tell us the last little bits

00:59:31.120 --> 00:59:34.150
about debugging on Mac OS X.

00:59:41.830 --> 00:59:45.250
Okay,
so we've seen quite a lot of different

00:59:45.350 --> 00:59:46.620
powerful features here today.

00:59:46.620 --> 00:59:50.800
If you've been to WWDCs
the past couple of years,

00:59:50.800 --> 00:59:52.890
you've seen me standing up
here saying we're committed to

00:59:52.900 --> 00:59:54.540
delivering great developer tools.

00:59:54.540 --> 00:59:56.660
It's fun this year to
actually be up here saying,

00:59:56.690 --> 00:59:58.130
well, you've got them now.

00:59:58.140 --> 01:00:02.390
And you've seen a lot of power here
under the covers that there's a lot

01:00:02.390 --> 01:00:06.080
more we can do in terms of extending
what we've got in Project Builder.

01:00:06.100 --> 01:00:10.280
What we've got there today is very
powerful for C-based language debugging,

01:00:10.280 --> 01:00:11.600
for Java debugging.

01:00:11.600 --> 01:00:15.620
But a lot of this capability of GDB,
we just need to provide

01:00:15.620 --> 01:00:19.480
more user interface to it,
and we can bring some of this more out

01:00:19.480 --> 01:00:21.580
into the Project Builder UI as well.

01:00:21.580 --> 01:00:25.130
So there's a lot of additional
improvements that we plan to make

01:00:25.270 --> 01:00:29.230
in the product for debugging and
across Project Builder as a whole.

01:00:29.240 --> 01:00:32.890
A lot of what we do is guided
by the feedback that we get.

01:00:32.990 --> 01:00:38.500
All of my team monitors what's going on
on the projectbuilder-users email list.

01:00:38.670 --> 01:00:41.710
That's the best way to
broadly communicate with us.

01:00:41.830 --> 01:00:43.680
And the entire rest of the community.

01:00:43.680 --> 01:00:46.780
If there's just feedback you
want to send directly to us,

01:00:47.090 --> 01:00:49.280
actually I should move
on to the lists here.

01:00:49.280 --> 01:00:52.180
There's ways to do that as well.

01:00:52.180 --> 01:00:54.720
So let me actually bring
Godfrey back on stage.

01:00:54.780 --> 01:00:58.160
I was going to yank his chain this
morning and have him introduced

01:00:58.160 --> 01:01:01.280
under the wrong name like we
had done on Tuesday as well.

01:01:01.280 --> 01:01:02.960
My new name is Jonathan.

01:01:03.270 --> 01:01:03.780
Jonathan DiGiorgi.

01:01:03.780 --> 01:01:05.320
Here we are.

01:01:05.390 --> 01:01:07.540
Well, thank you very much.

01:01:07.690 --> 01:01:10.860
It's very good to see such a large
crowd here on a Friday morning.

01:01:11.800 --> 01:01:14.140
Pointing to the
information resources page,

01:01:14.250 --> 01:01:15.450
you have the clicker.

01:01:15.460 --> 01:01:16.470
I have the clicker.

01:01:19.040 --> 01:01:23.520
The first is our master
page for all Mac OS X tools.

01:01:23.520 --> 01:01:25.560
We try to put everything up there.

01:01:25.560 --> 01:01:29.000
We have a number of additions to make,
both third-party and internal,

01:01:29.000 --> 01:01:30.790
and we continually develop it.

01:01:30.800 --> 01:01:34.380
We put the latest things on each of
the pages for each specific technology.

01:01:34.380 --> 01:01:38.540
Below that,
we have Apple's master mailing list

01:01:38.720 --> 01:01:41.150
page and the Project Builder users page.

01:01:41.210 --> 01:01:42.780
What do we have now, almost 1,000 users?

01:01:42.780 --> 01:01:44.070
I keep waiting.

01:01:44.090 --> 01:01:45.960
We were at like 944 last night.

01:01:45.960 --> 01:01:47.700
Come on, give me over 1,000 here.

01:01:47.960 --> 01:01:48.800
So go sign up.

01:01:48.800 --> 01:01:51.950
We're reaching here.

01:01:52.170 --> 01:01:52.530
Roadmap.

01:01:52.620 --> 01:01:55.340
We have a feedback forum for
all the developer tools this

01:01:55.460 --> 01:01:58.130
afternoon at 3:30 in room J1.

01:01:58.140 --> 01:02:00.390
Not on the roadmap,
but other important sessions

01:02:00.400 --> 01:02:03.420
that are still technically
part of the tools track.

01:02:03.450 --> 01:02:08.580
Right after this session in A2,
we have the Darwin Documentation

01:02:08.580 --> 01:02:11.050
Project and Head of Doc.

01:02:11.330 --> 01:02:17.390
And also at 2 o'clock,
we have the Apple C++ Framework session,

01:02:17.430 --> 01:02:20.190
which talks about the
Apple Class Suites and Mac App.

01:02:20.540 --> 01:02:22.260
For those people
interested in those areas,

01:02:22.260 --> 01:02:24.420
those are going to be very good sessions.

01:02:24.450 --> 01:02:28.030
And my contact information,
if you have any questions, any interests,

01:02:28.030 --> 01:02:30.590
any needs in tools,
you can always contact

01:02:31.080 --> 01:02:33.100
me at ramaran@apple.com.

01:02:33.120 --> 01:02:36.110
And we have the
Mac OS X Tools Feedback Mailing List,

01:02:36.110 --> 01:02:40.220
which actually distributes an incoming
email to all of the engineering team.

01:02:40.220 --> 01:02:43.420
So if you have feature enhancements,
ideas, we love to hear this stuff.

01:02:43.500 --> 01:02:44.650
We really want your feedback.

01:02:44.900 --> 01:02:47.570
So that's a great address if
you don't necessarily want to

01:02:47.570 --> 01:02:51.700
send it to the whole community,
but just the 30 or so of us on that list.

01:02:51.700 --> 01:02:53.910
The Interface Builder
folks are on there as well.

01:02:54.030 --> 01:02:59.590
And I know everybody to distribute
other requests to on that.

01:02:59.860 --> 01:03:02.720
And also, send bug reports in as well.

01:03:02.780 --> 01:03:06.780
That's how we actually fully
keep track of everything.