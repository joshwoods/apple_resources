WEBVTT

00:00:01.070 --> 00:00:04.000
Hey, everybody.

00:00:04.000 --> 00:00:05.400
So I'm Chris LeCroy.

00:00:05.400 --> 00:00:08.030
I manage the engineering group that
does the QuickTime streaming server and

00:00:08.110 --> 00:00:10.160
the Darwin streaming server at Apple.

00:00:10.160 --> 00:00:12.750
And some of the things we're
going to talk about today are

00:00:12.850 --> 00:00:14.860
we're going to go through,
I'm going to have some of the

00:00:14.860 --> 00:00:17.400
engineers come out and show you
some of the different ways that

00:00:17.400 --> 00:00:22.280
you can modify and extend the
server using the server module API.

00:00:22.280 --> 00:00:24.580
It's an API that we've built
into the server that allows you

00:00:24.580 --> 00:00:27.360
to build modules that actually
add functionality to the server.

00:00:28.400 --> 00:00:32.480
We've added a new protocol in
streaming server 3 that allows you to,

00:00:32.610 --> 00:00:36.130
using straight HTTP requests,
make requests to get and set

00:00:36.130 --> 00:00:37.960
values out of the server.

00:00:37.960 --> 00:00:39.280
I'll have an engineer talk about that.

00:00:39.280 --> 00:00:43.100
And we've added a new web-based admin,
which is also extensible,

00:00:43.110 --> 00:00:46.140
and we'll talk about that
with a third engineer.

00:00:46.140 --> 00:00:50.530
So let me briefly tell you what's going
on with QuickTime streaming server.

00:00:50.540 --> 00:00:54.210
We just released this week
QuickTime streaming server 3.0.

00:00:54.220 --> 00:00:56.170
It's available now.

00:00:56.180 --> 00:00:58.200
You can download it for the web.

00:00:58.300 --> 00:00:59.540
It's easy to install on Mac OS X.

00:00:59.540 --> 00:01:02.880
It's also included as a standard
service in Mac OS X server,

00:01:02.910 --> 00:01:05.150
which was also just released this week.

00:01:06.500 --> 00:01:10.160
and all of the Darwin versions
of the server are available

00:01:10.160 --> 00:01:13.220
for download as well,
3.0 versions of those servers.

00:01:13.330 --> 00:01:16.260
And there's also a tarball of the
source code that's downloadable,

00:01:16.300 --> 00:01:20.600
as well as the CVS repository
being fully up-to-date.

00:01:22.740 --> 00:01:24.820
Okay,
so Steve Ussery is going to come out

00:01:24.860 --> 00:01:29.050
and talk to you a little bit about how
to write modules using the module APIs.

00:01:29.060 --> 00:01:29.310
Steve?

00:01:37.000 --> 00:01:37.480
Good morning, everyone.

00:01:37.480 --> 00:01:40.430
Is this on?

00:01:40.440 --> 00:01:40.860
Yes, it is.

00:01:40.860 --> 00:01:45.260
As Chris said,
my part of the talk is going to be

00:01:45.260 --> 00:01:48.800
on how you extend QuickTime Streaming
Server with the module APIs.

00:01:48.800 --> 00:01:51.080
And more specifically,
I'm going to talk about

00:01:51.080 --> 00:01:52.210
the following areas.

00:01:53.350 --> 00:01:56.420
First thing I'm going to talk
about is the module architecture,

00:01:56.490 --> 00:02:00.140
kind of a real high-level overview
of what the module architecture is.

00:02:00.190 --> 00:02:06.180
I'm going to talk very briefly about
what's new in the API for QTS 3.0.

00:02:06.180 --> 00:02:13.020
And I'm going to walk you through a
very simple source code example of what

00:02:13.020 --> 00:02:16.710
a module extension would look like.

00:02:16.710 --> 00:02:20.520
And then I'm going to give you a
really brief demo of that module.

00:02:22.370 --> 00:02:25.620
So I should warn you before I move on
that there's a lot of material here,

00:02:25.620 --> 00:02:27.260
and I'm going to cover it very,
very quickly.

00:02:27.260 --> 00:02:32.560
If you would like more detail,
the place to look is to download our

00:02:32.560 --> 00:02:34.700
source code and look at the top level.

00:02:34.700 --> 00:02:38.560
You'll find a documentation folder,
and inside that documentation folder,

00:02:38.560 --> 00:02:43.720
you'll find a streaming server
modules documentation file.

00:02:43.720 --> 00:02:47.190
It's a PDF file,
between 300 and 400 pages, I believe.

00:02:48.920 --> 00:02:53.000
So there's a lot of detailed information
in that if you're interested in this.

00:02:56.510 --> 00:02:59.570
So, let me talk a little bit
about the module architecture.

00:02:59.680 --> 00:03:03.000
For those of you who are familiar
with the Apache web server,

00:03:03.020 --> 00:03:08.530
our module architecture is very
loosely modeled on that architecture.

00:03:08.580 --> 00:03:11.660
The concepts are the same,
but the details are different.

00:03:11.680 --> 00:03:14.560
In other words, the implementation is
completely different,

00:03:14.560 --> 00:03:17.710
but the overall concepts are the same.

00:03:17.760 --> 00:03:22.330
There are two types of modules,
static and dynamic.

00:03:22.470 --> 00:03:27.990
A static module is compiled in with the
streaming server source code itself.

00:03:28.220 --> 00:03:33.950
So when you build the server,
you have to compile in a static module.

00:03:34.380 --> 00:03:39.250
A dynamic module, on the other hand,
is an external code fragment or

00:03:39.360 --> 00:03:44.970
shared library that's placed in a
streaming server modules folder that is

00:03:44.970 --> 00:03:50.870
identified as one of the preferences in
the streaming server preferences file.

00:03:51.060 --> 00:03:54.760
So once the server starts,
it will detect modules in that

00:03:54.770 --> 00:03:56.290
modules folder and load them.

00:03:56.300 --> 00:03:59.520
And from that point on,
they behave exactly the same

00:03:59.600 --> 00:04:01.330
as a static module would.

00:04:04.110 --> 00:04:09.240
So the API is implemented as
what we call module roles.

00:04:09.240 --> 00:04:14.900
And what module roles are,
they're callbacks when the server is in

00:04:14.900 --> 00:04:19.180
a well-defined state and you're passed
an environment through a parameter

00:04:19.230 --> 00:04:22.040
block that's defined for every role.

00:04:22.040 --> 00:04:26.070
And each role has a specific
parameter block format.

00:04:26.550 --> 00:04:30.210
To show you how powerful this
feature of the server is,

00:04:30.210 --> 00:04:33.760
all of the features of
QuickTime Streaming Server,

00:04:33.980 --> 00:04:38.630
all of the ones that are of interest,
I should say, are implemented as modules

00:04:38.630 --> 00:04:40.640
within the server itself.

00:04:41.420 --> 00:04:44.060
So I'm going to bring up a
diagram that's meant to be

00:04:44.330 --> 00:04:48.600
illustrative of kind of the overall
architecture of the module itself,

00:04:48.760 --> 00:04:50.660
of the module's architecture itself.

00:04:50.700 --> 00:04:53.830
At the topmost box,
you'll see what's called the

00:04:53.830 --> 00:04:58.370
QuickTime Streaming Server module itself,
and that's the main module that

00:04:58.370 --> 00:05:03.180
handles all roles in the absence of
any other module to handle that role.

00:05:03.180 --> 00:05:07.130
And most of those handling roles in
that module are do-nothing roles.

00:05:07.180 --> 00:05:09.080
In other words,
they just return no error and do nothing.

00:05:11.420 --> 00:05:14.590
Immediately below that,
in the six boxes below that,

00:05:14.790 --> 00:05:17.970
are not actually modules,
but those are collections of

00:05:17.970 --> 00:05:22.460
cross-platform C++ code that you
can call and use within your module.

00:05:22.460 --> 00:05:27.480
There's all sorts of things in
there that are platform-independent

00:05:27.480 --> 00:05:31.810
ways of doing networking,
of threading, of mutexing,

00:05:32.050 --> 00:05:35.290
all sorts of things that you would need.

00:05:35.300 --> 00:05:42.050
In fact, on the upper right side of that,
you'll see something called... Qt file.

00:05:42.250 --> 00:05:47.500
That's of interest because that's
the code that knows how to parse

00:05:47.500 --> 00:05:52.970
the QuickTime file itself and take
it apart and see what's in it.

00:05:53.600 --> 00:05:58.380
In all the green area down below,
those are typical static modules

00:05:58.390 --> 00:06:01.500
that are compiled in with
the streaming server itself.

00:06:01.530 --> 00:06:02.930
And I'm not going to
describe all of them,

00:06:02.990 --> 00:06:06.740
but I'll pick out a few just kind of
at random here and talk about them.

00:06:06.880 --> 00:06:09.340
QTSS access.

00:06:09.490 --> 00:06:16.280
What that module does is it handles
all the authentication for the server.

00:06:16.870 --> 00:06:19.270
Let's pick another one.

00:06:19.300 --> 00:06:21.500
The QTSS Reflector module is interesting.

00:06:21.500 --> 00:06:25.040
It's one of the more complex
modules in the server.

00:06:25.040 --> 00:06:32.040
What it does is it takes a broadcast
stream from an external broadcaster

00:06:32.040 --> 00:06:38.810
of some sort and replicates that
stream out to multiple clients.

00:06:40.050 --> 00:06:42.990
We pick one more, QTSS Admin Module.

00:06:43.090 --> 00:06:49.710
What that one does is it handles
our web-based admin protocol,

00:06:49.710 --> 00:06:57.400
which you will hear John in the following
discussion after me describe in detail.

00:06:58.000 --> 00:07:01.800
I should also mention that many of
the C++ classes up above are based on

00:07:01.800 --> 00:07:07.720
something we call QTSS objects and are
actually registered in a dictionary

00:07:07.780 --> 00:07:10.470
structure within the server itself,
so you can actually access

00:07:10.590 --> 00:07:13.640
them through the web admin and
change and set parameters within

00:07:13.640 --> 00:07:15.140
those classes dynamically.

00:07:15.240 --> 00:07:22.080
Down at the very bottom of the diagram,
you'll see two blocks in lavender.

00:07:22.080 --> 00:07:26.300
Those are meant to be illustrative
of modules that somebody else wrote,

00:07:26.370 --> 00:07:27.360
perhaps you.

00:07:28.090 --> 00:07:31.520
That are loaded at the time the
server starts up to provide some

00:07:31.670 --> 00:07:34.500
kind of new functionality that's
not available in the core server.

00:07:34.500 --> 00:07:39.150
So let's move on and
talk about module roles.

00:07:41.780 --> 00:07:45.220
Okay, so the very first role you'll see
on the list is the register role.

00:07:45.220 --> 00:07:48.850
That's the one that your module
will be called in no matter what.

00:07:48.910 --> 00:07:52.700
That's the one role that's
always called within a module.

00:07:52.700 --> 00:07:56.930
And its only purpose is to say what
other roles your module supports.

00:07:56.980 --> 00:08:01.960
So that callback is called immediately
after the server starts and your

00:08:01.960 --> 00:08:06.190
module is loaded in memory and
your module is responsible for

00:08:06.190 --> 00:08:09.120
saying what other roles it supports.

00:08:10.060 --> 00:08:12.550
The next one on the list,
initialize and shutdown role.

00:08:12.770 --> 00:08:16.660
Those are useful if you need to
allocate global data or allocate

00:08:17.050 --> 00:08:19.130
memory or set up global data.

00:08:20.060 --> 00:08:24.200
If you do set up global data,
you'll probably want to remember that

00:08:24.290 --> 00:08:29.490
the server is multi-threaded and...

00:08:29.660 --> 00:08:33.180
Your global data can be called
in multi-threaded contexts,

00:08:33.180 --> 00:08:38.620
so if it's critical past stuff,
be sure the mutex protect it.

00:08:40.920 --> 00:08:44.810
The next roll-down is one that's
only of interest if your module

00:08:44.810 --> 00:08:46.100
needs to read preferences.

00:08:46.160 --> 00:08:50.710
So that's your callback to say, okay,
it's time to reread the preferences file,

00:08:50.710 --> 00:08:53.480
which is XML-based,
and grab the preferences out of

00:08:53.490 --> 00:08:57.380
there and set some data within my
module based on those preferences.

00:08:58.100 --> 00:09:01.400
The error log roll is mostly
not of interest to most people,

00:09:01.400 --> 00:09:04.520
but it will be of interest to
us today because that's a very

00:09:04.580 --> 00:09:08.480
simple one I've chosen to use in
the demo because it's really easy.

00:09:08.480 --> 00:09:12.660
The only thing the error log roll does
is any time the server generates an error

00:09:12.660 --> 00:09:15.550
log message to be written to the log,
if your module is

00:09:15.550 --> 00:09:18.510
registered for this roll,
it's also called back with a

00:09:18.620 --> 00:09:20.400
pointer to the error message.

00:09:20.400 --> 00:09:23.940
So you might use this, say,
for localizing error messages, perhaps.

00:09:26.040 --> 00:09:28.370
RTP roles.

00:09:28.720 --> 00:09:35.520
RTP is the standards-based protocol
that's used to carry a stream

00:09:35.550 --> 00:09:38.490
pipeline from the server to a client.

00:09:38.500 --> 00:09:42.960
It's a connectionless protocol,
meaning it's like a datagram

00:09:43.080 --> 00:09:45.300
or packet-level protocol.

00:09:45.300 --> 00:09:51.270
And it's the primary transport
for sending a stream from

00:09:51.270 --> 00:09:54.120
the server to the client.

00:09:54.160 --> 00:09:58.440
So that's a very powerful way to
actually get into and look at the

00:09:58.500 --> 00:09:59.820
stream or do something with it.

00:09:59.840 --> 00:10:02.460
So if you maybe wanted to do
something like server-side

00:10:02.600 --> 00:10:05.700
encryption of the stream itself,
you could use that role.

00:10:05.700 --> 00:10:11.180
So let's continue on with the roles that
I think you'll find the most interesting.

00:10:12.800 --> 00:10:14.080
And that's the RTSP roles.

00:10:14.110 --> 00:10:17.840
RTSP, unlike RTP,
is a connection-oriented

00:10:17.840 --> 00:10:20.330
protocol built on top of TCP.

00:10:20.390 --> 00:10:24.360
And it is very powerful in that it
manages all of the communication

00:10:24.450 --> 00:10:28.660
between the client and the server,
and it's responsible for managing

00:10:28.730 --> 00:10:31.240
all the streams within that context.

00:10:32.180 --> 00:10:36.100
So, most of the opportunities for
doing interesting things to the

00:10:36.100 --> 00:10:38.170
server lie within the RTSP roles.

00:10:38.220 --> 00:10:40.780
So, I'm going to take the
very first one there,

00:10:40.790 --> 00:10:42.140
the RTSP filter role.

00:10:42.140 --> 00:10:47.940
Whenever the client starts
a session with the server,

00:10:48.050 --> 00:10:55.240
it sends an RTSP request in what
we call an RTSP describe function.

00:10:55.240 --> 00:10:58.450
And that's very similar,
if you're familiar with HTTP,

00:10:58.460 --> 00:11:00.510
that's very similar to an HTTP GET.

00:11:00.580 --> 00:11:02.160
So, within that,
you can do a lot of things.

00:11:02.160 --> 00:11:05.720
that describe is all sorts of
parameters to describe the session

00:11:06.120 --> 00:11:07.240
that the client wants to see.

00:11:07.240 --> 00:11:10.600
So what the filter role can do is grab
any of those parameters and change

00:11:10.600 --> 00:11:13.240
them or modify them or augment them.

00:11:13.240 --> 00:11:16.720
So it's a powerful way you
can use to augment what the

00:11:16.720 --> 00:11:19.260
client's asking the server to do.

00:11:20.910 --> 00:11:25.390
The next one, the route role,
someone yesterday asked me how would I,

00:11:25.640 --> 00:11:31.040
from a client,
I want to have my students type in a URL,

00:11:31.040 --> 00:11:34.260
and once it gets to the server,
I want to look up that URL in a

00:11:34.260 --> 00:11:36.520
database and substitute some other URL.

00:11:36.520 --> 00:11:39.480
So you could use the
route role for doing that.

00:11:39.550 --> 00:11:41.980
That's primarily the kind
of things it's suited for.

00:11:42.800 --> 00:11:46.900
The authorized role allows you a
chance to get in and do authentication,

00:11:46.900 --> 00:11:50.060
other than if you're not happy
with the way the streaming

00:11:50.060 --> 00:11:53.020
server does authentication,
you want to write your own

00:11:53.590 --> 00:11:56.440
authentication-level module,
that would be the role you would want

00:11:56.440 --> 00:11:58.340
to register your module for and use.

00:12:00.140 --> 00:12:06.180
RTSP pre-processor role is your last
chance to get into the stream and do

00:12:06.250 --> 00:12:09.540
interesting things once the client
session is set up and all of the

00:12:09.700 --> 00:12:16.130
variables and internal things have
been set up to begin the stream itself.

00:12:16.200 --> 00:12:18.170
That's your last chance to do it.

00:12:20.600 --> 00:12:26.540
That lends itself to interesting things,
like you could perhaps do a redirect

00:12:26.540 --> 00:12:28.290
to another server at that point.

00:12:28.340 --> 00:12:32.440
But if you do do something
like a redirection,

00:12:32.440 --> 00:12:39.230
you have to notify the client by
replying to the request yourself.

00:12:39.440 --> 00:12:41.360
And in that case,
you will not call the next

00:12:41.440 --> 00:12:44.700
role the request role,
which I'll describe momentarily.

00:12:44.940 --> 00:12:47.930
The post-processor role is primarily
interesting if you wanted to do

00:12:47.930 --> 00:12:50.580
something like gather statistics,
like for logging.

00:12:50.580 --> 00:12:54.600
The final role you probably won't call,
because only one module

00:12:54.600 --> 00:12:57.520
can call this role,
the RTSP request role.

00:12:57.520 --> 00:13:00.360
That's the one that actually
manages the real streaming session

00:13:00.370 --> 00:13:02.060
between the client and the server.

00:13:02.060 --> 00:13:06.220
And that's going to be done for you
automatically by the main QTSS module.

00:13:06.220 --> 00:13:08.350
So you probably will
not want to use that.

00:13:08.400 --> 00:13:10.790
But it's there if you do want to use it.

00:13:10.850 --> 00:13:12.670
If you want to manage
the session yourself,

00:13:12.990 --> 00:13:14.910
because you don't like
the way the server does,

00:13:14.940 --> 00:13:18.710
does it,
feel free to write the code yourself.

00:13:20.220 --> 00:13:23.990
Okay, here's some new API that's in
QuickTime Streaming Server 3.0.

00:13:24.000 --> 00:13:30.210
So, one of the things we were asked to do
is provide callbacks for doing file I.O.

00:13:30.220 --> 00:13:34.080
So,
any time your server reads a media file,

00:13:34.080 --> 00:13:37.370
it now has the opportunity,
if it's registered for these roles,

00:13:37.480 --> 00:13:39.090
to be called back at interesting times.

00:13:39.140 --> 00:13:42.240
The very first one is the
open file pre-processed role.

00:13:42.240 --> 00:13:46.770
That's used to say, yes,
I support this media type, or no,

00:13:46.880 --> 00:13:49.610
I don't open this kind of file type.

00:13:50.100 --> 00:13:52.820
Or, no, I don't have file permissions
to open this file type.

00:13:52.880 --> 00:13:54.590
So, you can do those kinds of things.

00:13:54.600 --> 00:13:56.040
It's a yes or no, I handle that file.

00:13:56.040 --> 00:13:59.060
The open and close file
roles are interesting if you

00:13:59.140 --> 00:14:03.100
want to do something like,
instead of opening a POSIX file,

00:14:03.100 --> 00:14:05.330
you want to open a media
type from a database.

00:14:05.340 --> 00:14:09.590
And when you are done on the other side,
close the database connection.

00:14:09.610 --> 00:14:10.420
You can do it there.

00:14:10.420 --> 00:14:14.170
The read and write roles are
read from the media file,

00:14:14.270 --> 00:14:16.320
write from the media file.

00:14:16.320 --> 00:14:19.820
And the request event file
role are only of interest.

00:14:19.900 --> 00:14:21.520
If you want to do asynchronous I/O.

00:14:21.750 --> 00:14:26.360
And you can use that for being called
back when your reads are write complete.

00:14:30.840 --> 00:14:35.060
So, as I said, I was going to show you
a very simple module,

00:14:35.060 --> 00:14:40.060
and the module I'm going to show you
augments the error logging routine,

00:14:40.060 --> 00:14:44.460
and what it's going to do is,
in addition to writing to the error log,

00:14:44.460 --> 00:14:47.940
it's going to email an
administrator the error message.

00:14:47.940 --> 00:14:50.880
And so I'm going to walk you through
the code real quick to do that.

00:14:50.880 --> 00:14:51.560
It's really short.

00:14:52.200 --> 00:14:55.650
The very first thing your module would
do would be have a main function,

00:14:55.650 --> 00:14:57.980
and every module must
have a main function.

00:14:57.980 --> 00:15:01.240
That's the only entry point
that your module is called in.

00:15:01.260 --> 00:15:07.950
Anything else goes through that function,
and the only thing it will in turn

00:15:07.950 --> 00:15:11.130
do is call the dispatch function.

00:15:13.400 --> 00:15:15.850
A dispatch function is just
a switch in case statement,

00:15:15.870 --> 00:15:17.350
switching on the roles that you support.

00:15:17.410 --> 00:15:23.340
And other than the register role,
the only one I'm showing here is

00:15:23.340 --> 00:15:27.070
something called the error log role,
which I have written a routine

00:15:27.070 --> 00:15:30.400
called handle error that is my
own routine within my module

00:15:30.400 --> 00:15:33.700
that's going to do something
interesting with that error message.

00:15:33.700 --> 00:15:35.760
And I'll show you that code in a moment.

00:15:35.760 --> 00:15:40.400
And below that, you would see other roles
that I was registered for,

00:15:40.400 --> 00:15:41.760
such as initialize or shutdown.

00:15:46.310 --> 00:15:50.640
So, in order for those roles to be
called in that dispatch function,

00:15:50.660 --> 00:15:52.440
you also have to have a register role.

00:15:52.580 --> 00:15:54.730
And the register role,
as I said previously,

00:15:54.730 --> 00:15:56.380
is called when your module loads.

00:15:56.420 --> 00:16:00.880
It tells QuickTime Streaming
Server what roles your module supports.

00:16:01.660 --> 00:16:04.380
As you see in this slide,
I support initialize and

00:16:04.390 --> 00:16:06.190
shutdown the error log roles.

00:16:06.210 --> 00:16:08.950
The only thing my initialize
and shutdown roles do is I've

00:16:09.010 --> 00:16:11.940
written a very simple SMTP class,
which I won't show you.

00:16:11.960 --> 00:16:13.210
It's kind of boring.

00:16:13.220 --> 00:16:17.490
It initializes an SMTP class,
and then on the other side,

00:16:17.660 --> 00:16:22.290
when the server shutdowns,
it closes down the SMTP class.

00:16:22.300 --> 00:16:26.140
The code that I did write
is the handle error role,

00:16:26.360 --> 00:16:31.050
and you saw that in the dispatch
slide on the previous slide.

00:16:31.690 --> 00:16:34.060
So, in order for that dispatch
function to be called,

00:16:34.060 --> 00:16:36.630
I have to register that,
that I support the error log role,

00:16:36.710 --> 00:16:38.010
and this is where I do it.

00:16:39.500 --> 00:16:42.550
So let's look at my really complicated
function for handling error messages.

00:16:42.600 --> 00:16:44.780
There it is.

00:16:44.820 --> 00:16:48.820
The my_send_mail function is,
just calls my little

00:16:48.930 --> 00:16:51.880
simple SMTP class to send.

00:16:51.890 --> 00:16:55.080
I grab from the parameter block pointer
that's pointing to me the string,

00:16:55.080 --> 00:16:58.220
the error message string,
and I send it on its way.

00:16:58.260 --> 00:17:01.200
So now that we've seen
all this wonderful code,

00:17:01.200 --> 00:17:02.820
let's see how it works.

00:17:04.280 --> 00:17:09.950
So one of the things you
would normally do on--

00:17:11.120 --> 00:17:16.830
The first step to make this work would
be you would drag your module into the

00:17:16.830 --> 00:17:22.100
modules folder and restart the machine.

00:17:22.100 --> 00:17:22.100
I didn't want to do that, so I just...

00:17:32.330 --> 00:17:33.220
This is my demo folder here.

00:17:33.320 --> 00:17:35.560
Now here is the compiled module I built.

00:17:35.560 --> 00:17:41.450
And I have this alias on the desktop
to my streaming server modules folder.

00:17:41.910 --> 00:17:43.240
I'm going to drag it in.

00:17:43.240 --> 00:17:44.940
OK, it's in place.

00:17:44.960 --> 00:17:47.040
Now my server functionality is extended.

00:17:47.050 --> 00:17:51.070
Next thing I want to do is
bring up the web-based admin,

00:17:51.070 --> 00:17:54.110
which Mythili will show
you as the last talk.

00:17:54.270 --> 00:17:56.290
So I won't go into it.

00:17:56.430 --> 00:17:58.340
Let me click on that.

00:17:58.410 --> 00:17:59.700
So I'm bringing up the web-based admin.

00:17:59.700 --> 00:18:01.880
It tells me the server's not running.

00:18:01.960 --> 00:18:06.190
So I'm gonna click on Start Server Now.

00:18:06.550 --> 00:18:10.280
And if all goes well,
I'll see the page of statistics that

00:18:10.280 --> 00:18:11.460
tells me the server's up and running.

00:18:16.640 --> 00:18:17.330
There it is.

00:18:17.340 --> 00:18:23.560
So I'm gonna stall a little bit because
I'm waiting for my mail to be routed

00:18:23.670 --> 00:18:29.740
from my SMTP host to my POP server.

00:18:30.150 --> 00:18:34.700
But I'm going to bring up this really
nifty mail program from Mac OS X,

00:18:34.710 --> 00:18:36.330
which I really like.

00:18:36.420 --> 00:18:38.520
I thought it was pretty cool.

00:18:44.400 --> 00:18:46.750
And you'll see,
suddenly it magically appeared as

00:18:46.750 --> 00:18:48.660
an error message from the server.

00:18:48.660 --> 00:18:52.400
So in addition to writing this
error log message to the server,

00:18:52.400 --> 00:18:59.500
to the error log, and I did something to
make this error occur,

00:18:59.500 --> 00:18:59.500
I intentionally...

00:18:59.800 --> 00:19:03.700
made this error occur by not
having a QuickTime groups file

00:19:03.700 --> 00:19:07.820
in my server configuration area.

00:19:08.240 --> 00:19:12.980
And so, now you've seen me extend the
capabilities of the core server without

00:19:12.980 --> 00:19:15.620
actually touching the server code itself.

00:19:15.630 --> 00:19:18.360
And that concludes my demo.

00:19:18.460 --> 00:19:20.990
So I'm going to ask
Chris to come back up.

00:19:26.800 --> 00:19:28.520
Thanks, Steve.

00:19:28.550 --> 00:19:32.900
So I think the important thing to
get from that demo is that it's

00:19:32.980 --> 00:19:34.640
really simple to write these modules.

00:19:34.760 --> 00:19:37.020
That's obviously simpler than most.

00:19:37.080 --> 00:19:39.590
But what was it, 15 lines of code?

00:19:39.690 --> 00:19:41.040
Something like that,
minus the mail stuff.

00:19:41.040 --> 00:19:42.120
We won't talk about that.

00:19:42.120 --> 00:19:44.960
Anyway,
we're going to have John Murata come out

00:19:44.960 --> 00:19:47.680
and talk to you about the admin protocol.

00:19:47.680 --> 00:19:50.630
And the admin protocol is something
new that we added to 3.0 that

00:19:50.630 --> 00:19:54.590
allows you to administer the server
remotely through a variety of means.

00:19:54.620 --> 00:19:56.170
Here's John.

00:20:02.910 --> 00:20:09.600
So one of the great new features of the
3.0 server is the ability to control

00:20:09.600 --> 00:20:13.100
and access information in the server
from a remote or local application.

00:20:13.100 --> 00:20:16.260
And we do this through something
called the admin protocol.

00:20:16.260 --> 00:20:20.550
I'll be covering that and showing
some examples at the end of my talk.

00:20:22.820 --> 00:20:28.530
This first diagram is just a simple
review of where the admin module,

00:20:28.530 --> 00:20:32.300
which implements the protocol,
sits inside of the server.

00:20:32.340 --> 00:20:37.190
It's, as Steve was mentioning,
a built-in static module.

00:20:37.260 --> 00:20:42.840
It uses the QTSS API to access the
data in the server and turns around

00:20:42.840 --> 00:20:48.420
and speaks to any of the applications
who are talking to it over HTTP.

00:20:50.310 --> 00:20:56.200
The data that the module has access
to is the same as for all modules,

00:20:56.200 --> 00:20:58.840
and that's information
concerning the server.

00:20:58.840 --> 00:21:02.500
As in the server object,
there is a client session object

00:21:02.500 --> 00:21:05.020
for every client that's connected.

00:21:05.020 --> 00:21:11.730
There's the preferences for the server
and a lot of other objects that are

00:21:11.740 --> 00:21:15.260
all defined inside of the QTSS API.

00:21:16.560 --> 00:21:21.630
So the admin module can go ahead and get,
set, delete,

00:21:21.630 --> 00:21:28.040
or add data attributes and the values for
those attributes inside of the server.

00:21:28.040 --> 00:21:32.690
An application that's external to
the server can go ahead and have

00:21:32.690 --> 00:21:37.430
access to that data on a par with
any of the compiled-in modules.

00:21:39.900 --> 00:21:45.870
This diagram is an example of
the hierarchy that's new in 3.0.

00:21:45.970 --> 00:21:50.210
Prior to this, as a module,
you just received a set of objects

00:21:50.210 --> 00:21:52.740
each time your module was called.

00:21:52.740 --> 00:21:58.430
What we've added is the ability for an
object to encapsulate another object.

00:21:58.430 --> 00:22:03.010
What this means is you can walk starting
from the server object all the way down

00:22:03.010 --> 00:22:07.940
to the individual streams of each of the
clients that are connected to the server.

00:22:08.560 --> 00:22:12.240
So, as an example,
we have our server object down

00:22:12.290 --> 00:22:14.940
at the bottom of the next square.

00:22:14.940 --> 00:22:17.860
There's the client sessions,
and then underneath that, the streams.

00:22:20.960 --> 00:22:23.740
This is an example of the protocol.

00:22:23.830 --> 00:22:25.180
It's very straightforward.

00:22:25.220 --> 00:22:27.470
When we say HTTP, that's what it is.

00:22:27.470 --> 00:22:28.230
It's just a GET.

00:22:28.260 --> 00:22:32.320
There's a URL,
which is made possible by the

00:22:32.320 --> 00:22:34.300
hierarchy built into the server.

00:22:34.300 --> 00:22:38.900
The URL specifies an object and its data.

00:22:40.480 --> 00:22:46.480
For this example, I'm using a GET of the
server container object,

00:22:46.480 --> 00:22:52.690
and I'm passing in a wildcard,
giving back all of the attributes

00:22:52.690 --> 00:22:54.710
for the server container.

00:22:56.720 --> 00:22:58.350
And so this is just a brief overview.

00:22:58.350 --> 00:23:03.620
If you want an in-depth read
on the protocol and the various

00:23:03.750 --> 00:23:06.300
options available to you,
download the source code.

00:23:06.360 --> 00:23:08.190
There's a documentation directory.

00:23:08.200 --> 00:23:11.600
You'll find admin protocol
readme inside there,

00:23:11.600 --> 00:23:13.070
and take a quick look at that.

00:23:13.110 --> 00:23:20.270
And now I'm going to show you some
examples of the protocol working.

00:23:53.820 --> 00:24:01.990
OK, so I've just created a simple web
page here with some predefined URLs.

00:24:02.730 --> 00:24:07.990
Their URLs are individual
queries to the server.

00:24:08.010 --> 00:24:13.840
The first HTTP query is
to the server object,

00:24:13.840 --> 00:24:15.460
and the command is get.

00:24:15.470 --> 00:24:17.350
So I'm just going to--

00:24:17.620 --> 00:24:20.260
Click on this,
and I received the response

00:24:20.400 --> 00:24:24.600
from the server through the
admin protocol and admin module.

00:24:24.630 --> 00:24:27.020
It starts out with the container.

00:24:27.050 --> 00:24:33.830
It says that I've asked for the server
attribute inside of the admin container,

00:24:33.830 --> 00:24:37.430
and I have a zero error status code.

00:24:39.280 --> 00:24:43.300
So this next query is
the same as the first,

00:24:43.300 --> 00:24:47.970
except I'm adding the attribute for
the server version that's contained

00:24:48.000 --> 00:24:50.140
inside of the server object.

00:24:50.140 --> 00:24:52.220
And once again, it's a get.

00:24:52.280 --> 00:24:57.140
And you can see that I'm receiving
back the value for that attribute.

00:24:57.140 --> 00:25:01.050
Once again, this attribute,
the name may look a little odd to you,

00:25:01.050 --> 00:25:06.490
but if you've seen the QTSS API,
you'll recognize that as one of the

00:25:06.490 --> 00:25:09.060
fields inside of the server object.

00:25:11.390 --> 00:25:18.410
In this next URL,
there's an asterisk wildcard which says,

00:25:18.410 --> 00:25:21.440
take all the attributes inside
this object and return them.

00:25:21.560 --> 00:25:24.990
So we have a full list.

00:25:27.700 --> 00:25:37.600
and David LeRoy, and David LeRoy,
and David LeRoy, and David LeRoy,

00:25:37.600 --> 00:25:41.600
and David LeRoy, and David LeRoy,

00:25:44.460 --> 00:25:46.480
So some of the other things
that you can find inside of

00:25:46.480 --> 00:25:48.880
the server are the preferences.

00:25:48.880 --> 00:25:52.160
This is the QTSS server
preference object.

00:25:52.160 --> 00:25:56.270
This is also the same information
that you'll find in the XML preference

00:25:56.400 --> 00:25:58.680
file inside of the server.

00:25:58.770 --> 00:26:02.640
So each of these values
represents what's in that file.

00:26:02.640 --> 00:26:05.600
One of the nice things is that
if you were to change this,

00:26:05.600 --> 00:26:08.450
any of the values here,
or add new attributes

00:26:08.510 --> 00:26:11.420
through the protocol,
it also updates the file

00:26:11.420 --> 00:26:13.900
on the server itself.

00:26:16.640 --> 00:26:22.280
If you have a module and you've
compiled it and added it to the server,

00:26:22.280 --> 00:26:25.130
it'll show up here in this modules list.

00:26:26.210 --> 00:26:29.840
And you can see here we have the file,
some of the example modules,

00:26:29.840 --> 00:26:32.230
the error mail module
that Steve showed you,

00:26:32.330 --> 00:26:35.300
file module which handles
the on-demand movies,

00:26:35.320 --> 00:26:39.100
reflector module that handles
broadcasts through the server,

00:26:39.100 --> 00:26:42.930
and some of the various
other modules built in.

00:26:46.830 --> 00:26:54.500
So the way you would provide a UI,
perhaps, for your module is--

00:26:54.860 --> 00:26:56.830
To have the protocol
access your preferences,

00:26:56.830 --> 00:26:59.910
and in this case I've just said
give me all the preferences

00:27:00.520 --> 00:27:04.450
for all of the modules,
all in one query.

00:27:04.490 --> 00:27:09.260
The way this query was executed,

00:27:09.430 --> 00:27:15.660
The first wildcard represents the
name of the different modules,

00:27:15.660 --> 00:27:20.110
and the last wildcard, asterisk here,
represents all the

00:27:20.110 --> 00:27:22.990
attributes at that object.

00:27:23.800 --> 00:27:32.290
Okay, so for this next example,
I'm going to bring up QuickTime Player.

00:27:32.300 --> 00:27:40.500
And we're going to add
a couple of movies.

00:28:10.270 --> 00:28:14.100
Okay, so this particular query is going
to go and look at the client

00:28:14.100 --> 00:28:17.870
sessions that are currently playing.

00:28:18.830 --> 00:28:21.120
I've asked it to get
each of the sessions.

00:28:21.180 --> 00:28:23.040
There's two of them playing right now.

00:28:23.050 --> 00:28:28.740
You can see the URL,
the movie duration for the first movie,

00:28:28.770 --> 00:28:32.940
and also for the second movie.

00:28:33.050 --> 00:28:35.130
The interesting thing about
this particular query is that

00:28:35.200 --> 00:28:38.600
I've asked for specific fields
inside of each of the sessions.

00:28:38.660 --> 00:28:44.160
So I've narrowed it down from just a
basic wildcard search to these three

00:28:44.160 --> 00:28:48.100
attributes inside of the sessions.

00:28:49.910 --> 00:28:55.540
Now, one of the features that you'll find
inside our web admin is the ability to

00:28:55.540 --> 00:29:00.750
turn it on and off access of a port.

00:29:00.800 --> 00:29:05.220
And the way we do that is
we have a list of ports,

00:29:05.220 --> 00:29:08.140
and I have two right now that
the server is listening on.

00:29:08.140 --> 00:29:12.100
So what that means is I can...

00:29:14.020 --> 00:29:17.740
Bring up one of these movies,
and if I ask for a port

00:29:17.810 --> 00:29:19.720
that doesn't exist,

00:29:20.620 --> 00:29:22.340
It will fail the connection.

00:29:22.370 --> 00:29:27.090
But one of the nice things about
the protocol is it allows you to

00:29:27.660 --> 00:29:29.540
Control the behavior of the server.

00:29:29.660 --> 00:29:34.600
So in this case, I'm going to tell it to
add the port value 8080.

00:29:34.600 --> 00:29:37.720
We got it back.

00:29:38.010 --> 00:29:39.600
A status is zero.

00:29:39.600 --> 00:29:44.560
You can see that it's been added.

00:29:44.600 --> 00:29:52.600
Now we're playing.

00:29:52.600 --> 00:29:55.820
So we just changed the
behavior of the server.

00:30:10.580 --> 00:30:15.150
So this last query that I have
for you pretty much starts out at

00:30:15.330 --> 00:30:18.600
the server level as we started.

00:30:18.650 --> 00:30:20.910
But I'm adding all of the
parameters that are currently

00:30:20.920 --> 00:30:22.180
defined inside the protocol.

00:30:22.300 --> 00:30:25.770
So the R is recursive search.

00:30:25.830 --> 00:30:29.750
Verbose means give me the full
path for each of the attributes.

00:30:29.800 --> 00:30:30.850
T is the type.

00:30:31.050 --> 00:30:33.300
Give me the type of every attribute.

00:30:33.590 --> 00:30:35.810
A is for access privileges.

00:30:35.870 --> 00:30:38.460
And the last one, D,
is any debug information

00:30:38.460 --> 00:30:40.650
that you might have.

00:30:40.680 --> 00:30:45.160
It's asking that the admin module
return that in the protocol.

00:30:45.190 --> 00:30:49.150
So here's an example of all
of the information that you

00:30:49.150 --> 00:30:55.740
can actually pull out of the
server from an HTTP application.

00:30:55.770 --> 00:30:58.540
So it starts out here at the server.

00:30:58.620 --> 00:31:02.420
Keeps on going through the modules.

00:31:02.440 --> 00:31:04.890
And keeps on running.

00:31:06.800 --> 00:31:13.280
and all of these are,
you can see that we have different,

00:31:13.280 --> 00:31:17.030
the values, the data types,

00:31:19.180 --> 00:31:24.100
Access privileges, this one's read/write.

00:31:24.170 --> 00:31:28.240
And here we have a list of error
messages that the server will be

00:31:28.240 --> 00:31:31.130
sending back at various times.

00:31:32.110 --> 00:31:37.940
And finally, we have our error status,
which is zero,

00:31:37.940 --> 00:31:40.280
and a verbose message of OK.

00:31:40.290 --> 00:31:43.040
And that's our demo.

00:31:46.700 --> 00:31:48.250
Thanks, John.

00:31:48.320 --> 00:31:54.520
So pretty obvious that that
protocol is really powerful.

00:31:54.520 --> 00:31:58.240
We're hoping to see people
write a lot of tools around it.

00:31:58.240 --> 00:32:00.540
We obviously use it for
the web-based admin.

00:32:00.550 --> 00:32:03.580
And Mythili's going to show you a little
bit about the web-based admin and ways

00:32:03.580 --> 00:32:06.980
you can extend that-- Mythili Devineni.

00:32:18.100 --> 00:32:21.360
We talked a little about the
QTSS API and the admin protocol.

00:32:21.360 --> 00:32:25.670
So now I'll talk about how you can use
this knowledge and a little more to

00:32:25.670 --> 00:32:28.400
be able to customize the web admin.

00:32:29.200 --> 00:32:32.380
The web admin is one of the
new features in QTSS 3.0,

00:32:32.380 --> 00:32:36.540
as you would have probably gathered
if you were in the earlier session.

00:32:36.540 --> 00:32:41.600
I'll talk a little bit about
what it is and how it works.

00:32:41.600 --> 00:32:46.640
Also, I'll give you an example of the
special tags that we use in the

00:32:46.640 --> 00:32:49.000
admin and end it with a demo.

00:32:51.370 --> 00:32:55.100
The web-based admin is a simple web
server written in Perl and has some

00:32:55.120 --> 00:32:57.090
CGI scripts and server-side includes.

00:32:57.140 --> 00:33:01.860
It is entirely written in Perl,
and the CGI's handle all

00:33:01.860 --> 00:33:03.540
the HTTP response headers.

00:33:03.540 --> 00:33:07.470
The other thing that's different
from a regular web server is that the

00:33:07.470 --> 00:33:14.120
authentication is provided by QTSs,
so the web admin server just acts as

00:33:14.120 --> 00:33:17.860
a pipe between the browser and QTSs,
and it does not do any

00:33:17.860 --> 00:33:18.980
authentication of its own.

00:33:18.980 --> 00:33:21.740
Of course, it does SSL encryption,
and that's part of the

00:33:21.880 --> 00:33:23.220
web admin server itself.

00:33:23.220 --> 00:33:27.520
It's based on the admin protocol,
and that's how it talks to QTSs,

00:33:27.520 --> 00:33:29.570
using the admin protocol.

00:33:30.000 --> 00:33:32.880
Now, why would you want to
customize the web admin?

00:33:32.980 --> 00:33:36.460
That's probably the question
that you're asking yourself.

00:33:36.540 --> 00:33:43.110
Now, if you want to be able to configure
or modify advanced server preferences

00:33:43.210 --> 00:33:46.860
or add advanced monitoring
capabilities to the server,

00:33:46.960 --> 00:33:49.340
then you'd want to extend the web admin.

00:33:49.400 --> 00:33:51.980
Otherwise,
if you're a module developer and you've

00:33:51.980 --> 00:33:56.230
always wanted to have an easy way to
configure and monitor your module,

00:33:56.330 --> 00:33:58.900
then extending the web
admin is the way to go.

00:33:58.950 --> 00:34:03.810
You'll find that you can have
a very easy to use interface.

00:34:05.440 --> 00:34:08.100
How does a web-based admin work?

00:34:08.110 --> 00:34:11.370
What happens when you
actually get an HTTP request?

00:34:11.410 --> 00:34:15.590
It's very similar to a regular web
server because when a request comes in,

00:34:15.620 --> 00:34:19.060
it looks for the file and
in this case it's a CGI,

00:34:19.270 --> 00:34:21.370
so it executes a CGI.

00:34:21.600 --> 00:34:28.360
The CGI looks for the template HTML file,
which is whose file name is

00:34:28.360 --> 00:34:31.890
passed in as the argument to it.

00:34:32.150 --> 00:34:35.840
Now, the template HTML file has
a bunch of special tags,

00:34:35.840 --> 00:34:37.620
which are kind of like
server-side includes.

00:34:37.630 --> 00:34:43.150
And they tell the admin server
what to do with the tags.

00:34:43.290 --> 00:34:46.770
That is, whether to go fetch data from
QTSs and process them and

00:34:46.790 --> 00:34:50.600
display them in the format that
you want them to be displayed.

00:34:51.240 --> 00:34:56.090
So, while parsing the template,
when the CGI finds such tags,

00:34:56.140 --> 00:35:01.250
it will send a request to the QTSs
server using the admin protocol.

00:35:01.290 --> 00:35:03.840
Well, it'll actually talk to
the QTSs admin module,

00:35:03.840 --> 00:35:07.480
because the admin module is the one
that implements the admin protocol.

00:35:07.480 --> 00:35:12.690
It gets a response back,
and the response is usually in the

00:35:12.690 --> 00:35:19.100
form that you've probably seen when
John demoed the admin protocol.

00:35:19.580 --> 00:35:24.430
The admin protocol response is parsed and
the values extracted and processed based

00:35:24.520 --> 00:35:27.690
on the information in the special tags.

00:35:31.180 --> 00:35:35.130
Once the tags are parsed,
the tags are removed and the data,

00:35:35.130 --> 00:35:38.890
the process data is put into the HTML,
and the last step is to

00:35:38.910 --> 00:35:40.760
append the CGI headers and

00:35:42.720 --> 00:35:45.160
Then send the HTML to the browser.

00:35:45.160 --> 00:35:47.450
So it's very simple,
very similar to a web server.

00:35:47.460 --> 00:35:50.210
The only difference is that
there's an interaction between

00:35:50.250 --> 00:35:52.590
the admin server and QTSS.

00:35:52.790 --> 00:35:54.740
Now I've mentioned these
special tags all the time,

00:35:54.790 --> 00:35:57.620
so you're probably wondering what
these look like and what they are,

00:35:57.620 --> 00:36:00.690
because this is what you need to
know if you have to use extend

00:36:01.100 --> 00:36:03.650
or extend the web admin server.

00:36:03.760 --> 00:36:07.520
So one example of the tags is echo data.

00:36:07.540 --> 00:36:14.080
And echo data basically tells the server,
the admin server, to fetch some data,

00:36:14.130 --> 00:36:17.040
which is actually the value
associated with the attribute,

00:36:17.080 --> 00:36:21.220
the parameter, and process it,
strip out everything else,

00:36:21.220 --> 00:36:26.380
and just get the value and replace
the tag with the fetched value.

00:36:26.490 --> 00:36:30.820
So if a tag such as this is
found in the HTML template,

00:36:31.400 --> 00:36:34.500
The admin server translates this
to an admin protocol request,

00:36:34.500 --> 00:36:36.510
which is again a simple HTTP GET.

00:36:36.540 --> 00:36:39.710
As you can see, all it did was append.

00:36:40.800 --> 00:36:45.230
modules admin to the actual parameter
that was in the template HTML.

00:36:45.240 --> 00:36:50.030
And once it gets the response back,
it parses the value and replaces the tag

00:36:50.200 --> 00:36:53.090
in the template HTML with this value.

00:36:53.210 --> 00:36:54.830
So it's very similar for the other tags.

00:36:54.960 --> 00:36:58.620
There might be more process information,
like format it into a radio

00:36:58.620 --> 00:37:01.310
button or things like that,
or take an array and

00:37:01.310 --> 00:37:02.700
display it as a table.

00:37:02.760 --> 00:37:05.820
So there's a lot of things that
you can do with these tags.

00:37:06.260 --> 00:37:09.410
To illustrate the use
of these special tags,

00:37:09.600 --> 00:37:13.100
I'll do a short demo.

00:37:13.100 --> 00:37:19.650
You'll find that the admin server can
talk to QTSs and it handles all the

00:37:19.650 --> 00:37:22.070
other details like authentication,
encryption,

00:37:22.100 --> 00:37:23.100
things like that for you already.

00:37:23.100 --> 00:37:30.030
It's only a matter of writing
simple HTML to extend the web admin.

00:37:37.060 --> 00:37:41.820
Now, earlier you got a glimpse of
how cool the web-based admin is,

00:37:41.970 --> 00:37:44.340
but I find that that
wasn't enough for me,

00:37:44.460 --> 00:37:46.720
so I decided...

00:37:47.700 --> 00:38:10.200
[Transcript missing]

00:38:19.600 --> 00:38:22.800
As you can see,
the static HTML shows up as the

00:38:22.800 --> 00:38:25.200
form elements are all formatted.

00:38:25.200 --> 00:38:29.970
The only thing that's interesting
here for us is the special tags.

00:38:30.000 --> 00:38:32.730
They look very strange,
but those are the ones that

00:38:32.770 --> 00:38:34.400
actually do all the job for you.

00:38:34.400 --> 00:38:37.600
The example that I gave you, echo data,
is up there.

00:38:37.600 --> 00:38:40.580
Then there are other tags
called get value and format

00:38:40.580 --> 00:38:42.380
float and things like that.

00:38:42.400 --> 00:38:45.480
These are the ones that you'll
find very useful when you're

00:38:45.480 --> 00:38:47.000
extending the web admin.

00:38:47.000 --> 00:38:51.280
If you see, there's nothing other
than just these tags.

00:38:51.400 --> 00:38:54.580
These tags are doing all the work where
they're talking to the admin protocol.

00:38:54.600 --> 00:38:56.510
Authentication is taken care of.

00:38:56.610 --> 00:38:58.360
You don't have to do anything yourself.

00:38:59.940 --> 00:39:04.780
Okay, and I also wanted to add,
have a way to get to my page

00:39:04.780 --> 00:39:06.900
from the current web admin.

00:39:07.100 --> 00:39:11.760
So I modified the navigation page,
the current navigation page

00:39:11.800 --> 00:39:13.300
to include a link to my page.

00:39:13.420 --> 00:39:21.010
So I'm going to drag this in to the
admin HTML folder and my snapshot page.

00:39:21.490 --> 00:39:27.030
And let me go to the web
admin and see if it shows up.

00:39:30.790 --> 00:39:31.450
There you go.

00:39:31.550 --> 00:39:37.800
There is a link to my
snapshot and there it is.

00:39:37.810 --> 00:39:39.740
So here is my custom snapshot page.

00:39:39.820 --> 00:39:42.330
It has only certain
data that I care about,

00:39:42.410 --> 00:39:44.830
which gets refreshed every five seconds.

00:39:44.910 --> 00:39:49.280
Let's see if we can connect a couple
of clients to it and see if it gets

00:39:49.280 --> 00:39:52.260
refreshed and you have the right output.

00:40:22.500 --> 00:40:25.960
So as you can see, the CPU load and the
current RDSP connections,

00:40:25.960 --> 00:40:28.100
all the data is being
refreshed every five seconds.

00:40:28.100 --> 00:40:32.060
And it's only data that I care about,
which I can very easily get to.

00:40:32.060 --> 00:40:33.260
And all that is authenticated.

00:40:33.260 --> 00:40:37.450
I don't have to write anything else,
no other scripts or any code

00:40:37.500 --> 00:40:39.770
to get this information.

00:40:47.290 --> 00:40:51.320
So it's very easy to
customize the web admin,

00:40:51.320 --> 00:40:53.830
and all you need to know
is how to write some HTML,

00:40:53.830 --> 00:40:56.280
which pretty much everybody knows.

00:40:56.280 --> 00:40:58.800
So, well, hopefully everybody knows.

00:40:58.800 --> 00:41:01.840
And it's very easy to
get started if you don't.

00:41:01.840 --> 00:41:04.220
And, well,
the cool thing is that we've done

00:41:04.220 --> 00:41:07.990
everything for you so that you don't
have to go and redo all the work.

00:41:15.390 --> 00:41:17.700
Thanks, Mythili.

00:41:17.720 --> 00:41:19.500
So obviously,
you guys can see how powerful

00:41:19.500 --> 00:41:22.900
that is and how simple it is
once you understand the tags.

00:41:22.900 --> 00:41:25.020
So let me talk about some
development opportunities.

00:41:25.020 --> 00:41:27.440
If you're in the prior session,
you've already heard these.

00:41:27.440 --> 00:41:30.860
But there are a lot of ways to
modify or enhance the server.

00:41:30.860 --> 00:41:33.260
The first one is,
since we're an open source project,

00:41:33.260 --> 00:41:37.150
obviously,
you can modify the source code directly.

00:41:37.180 --> 00:41:40.050
That's great if you really need
to do-- you typically don't need

00:41:40.050 --> 00:41:41.960
to do that unless you're going
to be doing some really bizarre

00:41:42.020 --> 00:41:44.220
things or maybe fixing a bug.

00:41:44.420 --> 00:41:48.200
Those types of changes fall under
Apple's Apple Public Source License,

00:41:48.200 --> 00:41:51.060
which means that if you make
changes to the source code directly,

00:41:51.160 --> 00:41:53.400
you need to provide those
changes back to Apple.

00:41:53.400 --> 00:41:56.650
And the reason for that is so
that we can let those changes

00:41:56.680 --> 00:41:59.100
out to the rest of the world.

00:41:59.100 --> 00:42:00.720
As Steve showed, you can write a module.

00:42:00.720 --> 00:42:03.470
Modules are relatively simple to write,
depending upon what you're doing.

00:42:03.570 --> 00:42:06.270
But at the same time, you can also write
really complex modules,

00:42:06.310 --> 00:42:08.780
too, that do some pretty amazing things.

00:42:08.780 --> 00:42:12.810
You can extend the UI using simple HTML,
possibly a little Perl script

00:42:12.810 --> 00:42:13.460
that does some additional parsing.

00:42:13.460 --> 00:42:18.960
If you've got some complicated
UI elements you need to deal with.

00:42:18.960 --> 00:42:22.170
Or you can write a monitoring tool
using the protocol that John showed,

00:42:22.170 --> 00:42:26.710
which is basically just straight HTTP,
which HTTP that allows you to get

00:42:26.710 --> 00:42:29.220
to every attribute in the server,
basically.

00:42:29.220 --> 00:42:32.590
And you can also implement
our caching protocol.

00:42:32.600 --> 00:42:34.240
And this is not something
we showed today.

00:42:34.260 --> 00:42:38.590
But the caching protocol is basically
an extension that we've offered

00:42:38.590 --> 00:42:44.610
up to the IETF to RTSP and RTP for
providing additional information to

00:42:44.610 --> 00:42:49.360
caching streaming servers for giving
them additional metadata so that

00:42:49.360 --> 00:42:53.020
they can make sure that the stream
from the caching proxy to the client

00:42:53.020 --> 00:42:56.680
is actually as good as the stream
from a server directly to a client.

00:42:56.680 --> 00:42:59.760
So we encourage you guys to
take advantage of all of these

00:42:59.760 --> 00:43:01.920
when you can or where you can.

00:43:02.090 --> 00:43:05.010
For more information
on all of this stuff,

00:43:05.320 --> 00:43:09.350
probably the best place to go
is make sure you're subscribed

00:43:09.400 --> 00:43:10.570
to our developer mailing list.

00:43:10.600 --> 00:43:14.030
And you can go to lists.apple.com,
just search for the word stream

00:43:14.030 --> 00:43:17.460
and you'll find the developer's
list and the user's list as well.

00:43:17.460 --> 00:43:19.250
And these lists are actually really good.

00:43:19.310 --> 00:43:22.340
The content tends to be very focused.

00:43:22.340 --> 00:43:25.040
The traffic is actually not
so high that it's annoying,

00:43:25.040 --> 00:43:27.140
between 5 and 20 messages a day.

00:43:27.620 --> 00:43:31.570
And all of the engineers and
part of marketing are actually

00:43:31.570 --> 00:43:36.150
on this list and we respond to
questions or requests on the list.

00:43:36.190 --> 00:43:37.750
And it's a great way to just
get a hold of us directly,

00:43:37.750 --> 00:43:39.900
too, if you have any questions or
need some help with anything.

00:43:41.600 --> 00:43:45.930
The open source projects,
including the Darwin Streaming Server,

00:43:45.930 --> 00:43:49.690
are all available at
www.opensource.apple.com.

00:43:49.690 --> 00:43:53.550
So you can go get the source code there,
get all the documentation for everything,

00:43:53.550 --> 00:43:55.720
as well as sign up to
be a Darwin developer.

00:43:55.720 --> 00:43:58.860
And for any kind of non-server
QuickTime-related things,

00:43:58.910 --> 00:44:01.640
such as how to hint movies,
how to author movies,

00:44:01.640 --> 00:44:04.580
QuickTime APIs for broadcasting,
things like that,

00:44:04.610 --> 00:44:09.100
you can go to the developer site for
QuickTime at developer.apple.com.

00:44:11.100 --> 00:44:16.360
And one thing I'd like to ask you guys
is if you guys plan to do anything around

00:44:16.420 --> 00:44:20.150
any of the ways to extend the server,
let us know.

00:44:20.240 --> 00:44:21.100
Let us know on the mailing list.

00:44:21.100 --> 00:44:23.640
And we actually are really excited
to help people get things done.

00:44:23.640 --> 00:44:25.370
We want to make sure that
you get it done right,

00:44:25.390 --> 00:44:27.390
and we want to make sure it's
kind of painless for you,

00:44:27.390 --> 00:44:29.940
too, because we want to see some
really cool things out there.

00:44:32.730 --> 00:44:35.750
Today's Thursday,
so we've only got a couple of things

00:44:35.750 --> 00:44:38.760
left in relation to QuickTime.

00:44:38.760 --> 00:44:42.180
There's a feedback forum
at 3.30 in room J1,

00:44:42.180 --> 00:44:45.120
and that's a feedback forum
for QuickTime in general,

00:44:45.120 --> 00:44:47.800
so it'll be both client-side
feedback and server-side feedback.

00:44:47.800 --> 00:44:50.320
We'll have both server
and client people there.

00:44:51.060 --> 00:44:53.300
And there's also a beer
bus tonight at Apple,

00:44:53.300 --> 00:44:56.300
and we will have server engineers
at the beer bus as well.

00:44:56.440 --> 00:44:59.110
The way they've got it organized,
we're kind of broken

00:44:59.110 --> 00:45:01.890
into different areas,
so check out either the server

00:45:01.890 --> 00:45:04.040
group and or the QuickTime area.