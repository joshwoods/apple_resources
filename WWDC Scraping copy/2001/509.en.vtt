WEBVTT

00:00:04.710 --> 00:00:05.640
This is my great little announcement.

00:00:05.650 --> 00:00:07.770
We got lost there.

00:00:07.960 --> 00:00:09.440
MRJ225 is done.

00:00:09.590 --> 00:00:14.080
For those of you still working with that,
it should be available early next week,

00:00:14.110 --> 00:00:15.720
sometime next week.

00:00:17.000 --> 00:00:24.550
So we're going to talk about
security features on OS X for Java.

00:00:24.550 --> 00:00:28.990
And specifically we got a couple of
questions we want to answer today.

00:00:28.990 --> 00:00:28.990
And

00:00:29.320 --> 00:00:34.250
These are questions we've
seen on Java dev through DTS.

00:00:35.280 --> 00:00:37.590
and I will be talking about this in
a few informal conversations as well.

00:00:37.700 --> 00:00:39.200
First of all,
is there any difference between

00:00:39.200 --> 00:00:42.220
what Apple did as far as
Java security is concerned and what

00:00:42.220 --> 00:00:44.490
Sun did on Windows and Solaris?

00:00:44.620 --> 00:00:47.980
Second of all,
will my signed applet work on OS X?

00:00:48.080 --> 00:00:52.080
And last of all, we don't integrate with
Internet Explorer like we did on 9.

00:00:52.150 --> 00:00:53.960
So how do you get a secure connection?

00:00:54.090 --> 00:00:56.820
We'll talk about all these things today.

00:00:56.880 --> 00:01:00.030
And specific,
what you're going to learn about,

00:01:00.530 --> 00:01:03.460
I'm going to give you an introduction
to Java 2 Security Model plus

00:01:03.530 --> 00:01:08.370
the very few OS X specific
details that there are about it.

00:01:08.690 --> 00:01:11.190
We're going to talk about how to
sign JAR files so we work with

00:01:11.260 --> 00:01:16.210
Internet Explorer on OS X and
the Windows version of Netscape.

00:01:16.820 --> 00:01:18.700
And finally,
how to make a secure connection

00:01:18.750 --> 00:01:20.000
without Internet Explorer.

00:01:20.000 --> 00:01:22.700
That includes in your application.

00:01:23.600 --> 00:01:25.090
And finally,
I'll give you some tips for how to

00:01:25.090 --> 00:01:28.800
debug security problems in your code
if you ever get an exception that

00:01:28.800 --> 00:01:30.980
you don't know how to deal with.

00:01:31.970 --> 00:01:33.260
First of all,
we have a little bit of news as

00:01:33.260 --> 00:01:38.810
far as the security management
on Java and OS X works.

00:01:38.950 --> 00:01:41.860
The security architecture is completely
identical to other platforms.

00:01:41.920 --> 00:01:44.800
We've made no changes,
there are no compromises,

00:01:44.990 --> 00:01:48.260
there are no things you have to
leave out to get your security

00:01:48.320 --> 00:01:50.510
related code working on OS X.

00:01:51.780 --> 00:01:54.820
There's no support for extra
features such as JAR signing,

00:01:54.820 --> 00:01:57.660
JAR caching, or any of those other things
in the Applet Launcher or the

00:01:57.660 --> 00:01:59.040
Command Line Applet Viewer.

00:01:59.040 --> 00:02:02.980
We'll talk about why that is,
and that's mainly because we

00:02:02.980 --> 00:02:08.060
want to keep those two tools,
Applet Launcher and Applet Viewer,

00:02:08.150 --> 00:02:13.580
as close to the baseline Applet Viewer
that's available on all platforms.

00:02:14.650 --> 00:02:18.110
The signed apple support is the
same as that which you get in MRJ.

00:02:18.110 --> 00:02:20.540
And we'll talk about
exactly what that means.

00:02:20.610 --> 00:02:24.260
But what it means is that
if you sign an apple in MRJ,

00:02:24.260 --> 00:02:26.590
it will continue to work in OS X.

00:02:28.230 --> 00:02:32.670
So let's talk a little bit about
the old 1.1X security model and

00:02:32.670 --> 00:02:35.110
how the way things used to work.

00:02:37.220 --> 00:02:39.500
First of all, security was an all or
nothing proposition.

00:02:39.500 --> 00:02:42.900
You could either sign your jar
or your application had full

00:02:42.900 --> 00:02:47.600
access or it had no access at all.

00:02:47.640 --> 00:02:50.760
Now this is good or bad
depending on your point of view.

00:02:51.330 --> 00:02:54.200
The sandbox restrictions on
an applet were just way too

00:02:54.200 --> 00:02:59.300
limiting for real works,
particularly in a corporate environment.

00:02:59.420 --> 00:03:02.810
If you deliver your code as an
applet and you want to be able to

00:03:02.810 --> 00:03:07.360
write to the user's hard drive,
for example, you had to sign the applet,

00:03:07.420 --> 00:03:09.390
you had to do a whole lot of--jump
through a lot of hoops just to

00:03:09.460 --> 00:03:13.400
do something pretty basic in an
environment that you control.

00:03:14.420 --> 00:03:16.800
Security checks were
not easily accessible,

00:03:16.860 --> 00:03:20.790
and by that we mean that if you
wanted to add a new permission,

00:03:20.790 --> 00:03:23.900
you wanted to add something
new to what your code could do,

00:03:23.900 --> 00:03:25.320
it was really a pain in the butt to do.

00:03:25.320 --> 00:03:31.320
You had to write your own,
a whole new security manager, you had to,

00:03:31.320 --> 00:03:31.320
um,

00:03:31.450 --> 00:03:33.220
You know,
carefully construct it so that your

00:03:33.340 --> 00:03:35.730
code knew about that security manager.

00:03:35.780 --> 00:03:38.880
Just a lot of work that really
shouldn't have been necessary.

00:03:39.050 --> 00:03:41.360
A locally installed apple
is too easily trusted.

00:03:41.360 --> 00:03:45.200
If I download an apple to my hard drive,
there's nothing that says that

00:03:45.330 --> 00:03:49.630
apple could wipe out my drive just
as easily as an application could.

00:03:49.810 --> 00:03:54.290
So the new model doesn't assume
that there's trusted code.

00:03:55.010 --> 00:03:57.420
Security managers are too easily broken.

00:03:57.590 --> 00:04:00.900
And in 1.1,
very often security was determined

00:04:00.900 --> 00:04:03.350
by the current stack depth.

00:04:03.350 --> 00:04:06.140
And if you make a change
somewhere in your code that

00:04:06.220 --> 00:04:10.780
relies on that stack depth,
that changes that, you've suddenly broken

00:04:10.910 --> 00:04:11.800
your security model.

00:04:11.820 --> 00:04:14.890
That's really more fragile
than it really ought to be.

00:04:15.790 --> 00:04:19.700
So going forward,
we have the new Java 2 security model.

00:04:19.700 --> 00:04:21.310
It's a policy-based architecture.

00:04:21.490 --> 00:04:24.970
I'll talk a little bit about what
policy-based means in a minute.

00:04:26.060 --> 00:04:30.330
You get a collection of permissions
specified for a particular code base.

00:04:30.330 --> 00:04:34.500
And we'll see examples of that
in the system-wide Java policy.

00:04:36.030 --> 00:04:41.440
Code is granted permission to perform
actions based on where it came from.

00:04:41.470 --> 00:04:45.440
So what you do is you can
specify a particular applet

00:04:45.440 --> 00:04:48.420
or particular application,
give it different abilities

00:04:48.440 --> 00:04:51.140
than you would any other
piece of code on your system,

00:04:51.140 --> 00:04:56.250
and give it different abilities than any
other application or Java application.

00:04:57.510 --> 00:05:00.480
Finally, no code is trusted by default
regardless of location.

00:05:00.590 --> 00:05:05.270
This is probably the biggest
change between Java 2 and Java 1.1.

00:05:05.310 --> 00:05:07.200
Just because you put it on
your hard drive doesn't mean

00:05:07.200 --> 00:05:08.360
it's automatically trusted.

00:05:08.960 --> 00:05:13.160
If you put your jar in /lib/ext,
it is fully trusted,

00:05:13.210 --> 00:05:16.150
but that's the only location.

00:05:19.090 --> 00:05:22.590
So here's what a policy
file entry looks like.

00:05:22.590 --> 00:05:25.390
And what you'll see is,

00:05:25.610 --> 00:05:30.100
We have a grant and the
sign-by and a code base.

00:05:30.100 --> 00:05:32.850
And the signer name, as you see,
you know,

00:05:32.860 --> 00:05:37.840
sign-by signer name are both in the
grant and for the particular permission.

00:05:38.010 --> 00:05:43.800
The signer names are aliases
that come out of your key store.

00:05:44.140 --> 00:05:48.770
So if you import some certificates
and you want to associate those

00:05:48.780 --> 00:05:54.010
certificates with particular permissions,
that's how you make the linkage.

00:05:55.200 --> 00:05:57.990
And another thing I want to point
out is we have a permission,

00:05:58.020 --> 00:06:00.660
permission class name, target name,
and action.

00:06:00.770 --> 00:06:02.730
Target name and action can
be thought of as arguments,

00:06:02.730 --> 00:06:04.780
if you will, to the permission.

00:06:04.820 --> 00:06:06.830
So for example,
you'll have something called

00:06:06.840 --> 00:06:08.840
a property permission.

00:06:08.910 --> 00:06:11.310
And the target name is the
name of the property that

00:06:11.310 --> 00:06:13.940
you want to allow access to,
and the action is what

00:06:14.020 --> 00:06:15.100
the user can do to it.

00:06:15.140 --> 00:06:17.200
Or the code, I should say,
can do to that property.

00:06:17.280 --> 00:06:20.180
It can read it or write it, for example.

00:06:20.950 --> 00:06:24.230
Okay,
if we go to first demo machine here,

00:06:24.250 --> 00:06:28.150
I'm going to show you what Java.policy
looks like on the default system.

00:06:28.150 --> 00:06:31.740
I'm sorry, the system-wide policy.

00:06:35.300 --> 00:06:39.380
If you take a look here,
we see that here's a list of,

00:06:39.390 --> 00:06:43.370
in the first section we see this
grant with no arguments to it.

00:06:43.440 --> 00:06:48.660
That means that any code has
these permissions assigned to it.

00:06:48.660 --> 00:06:50.810
And in particular,

00:06:51.090 --> 00:06:56.100
Any code is allowed to listen
to a socket above 1024 or above.

00:06:56.220 --> 00:06:59.890
We have this list of property permissions
that you're allowed to get at.

00:07:00.060 --> 00:07:03.840
Java.version, line.separator,
things like that.

00:07:03.950 --> 00:07:06.230
And down here at the end,

00:07:06.450 --> 00:07:11.220
We have the Apple specific properties,
in particular MRJ.version.

00:07:11.510 --> 00:07:13.800
And we think it's important that
you still be able to know what

00:07:13.800 --> 00:07:16.380
version of MRJ you're looking at.

00:07:16.880 --> 00:07:22.210
And finally the last one is
com.apple Mac OS.uscreenMenubar.

00:07:22.210 --> 00:07:24.560
And this is used in Swing to
get the menu bar to appear

00:07:24.560 --> 00:07:31.830
where you want it to appear,
at the top of the screen.

00:07:31.830 --> 00:07:31.830
I believe that,

00:07:33.500 --> 00:07:34.730
I can't remember right now exactly.

00:07:34.750 --> 00:07:36.330
I think by default it's false.

00:07:36.330 --> 00:07:40.660
But the important thing is that
you can set it to where you want

00:07:40.660 --> 00:07:42.450
it and there won't be any issues.

00:07:42.540 --> 00:07:45.570
Now,
if your code is cross platform and you do

00:07:45.760 --> 00:07:49.520
set either of those last two properties,
you may get a security

00:07:49.520 --> 00:07:51.120
exception on another system.

00:07:51.160 --> 00:07:52.740
That's not a big deal.

00:07:52.740 --> 00:07:55.190
All you have to do is wrap that
set property call with the try

00:07:55.190 --> 00:07:57.710
catch block and catch the security
exception that comes back.

00:07:57.800 --> 00:08:00.210
And, you know,
you just know if it's a security

00:08:00.210 --> 00:08:03.420
exception for that particular property,
big deal.

00:08:03.580 --> 00:08:07.410
Go on and continue on in your code.

00:08:07.970 --> 00:08:13.590
So these are some examples of
permissions and what they look like.

00:08:14.370 --> 00:08:19.370
You can create your own permissions,
we won't get into that in this session.

00:08:19.370 --> 00:08:20.120
But, uh, you

00:08:22.700 --> 00:08:28.800
[Transcript missing]

00:08:31.670 --> 00:08:34.740
So there are a number of ways
you establish the policy on OS X.

00:08:34.740 --> 00:08:38.150
You can do it in one of three ways.

00:08:38.350 --> 00:08:39.620
Actually not one,
you can do it any of these

00:08:39.760 --> 00:08:41.540
three ways in any combination.

00:08:41.600 --> 00:08:47.820
There's a system-wide policy which
I just showed you in the last demo there.

00:08:47.820 --> 00:08:54.600
And that's stored in the Java home
directory which is /library/java/home.

00:08:54.760 --> 00:08:57.600
And then you continue on
through libsecurity/java.policy.

00:08:57.600 --> 00:08:59.600
That's where that file lives.

00:08:59.600 --> 00:09:01.600
You can set it on a per user basis.

00:09:01.600 --> 00:09:05.740
In your home directory if you
create a file called .java.policy,

00:09:05.740 --> 00:09:08.860
put any number of permissions,
those will be added on to

00:09:08.990 --> 00:09:11.370
the default system-wide set.

00:09:11.600 --> 00:09:15.460
And finally you can set it on a per
application basis and you can bundle

00:09:15.460 --> 00:09:17.450
a policy spec inside your Java app.

00:09:17.580 --> 00:09:21.000
We'll show that in a little bit
how you would go about doing that.

00:09:22.010 --> 00:09:23.050
This is important.

00:09:23.270 --> 00:09:25.140
Policy files do not supersede each other.

00:09:25.140 --> 00:09:26.540
They're always additive.

00:09:26.670 --> 00:09:31.540
So if I put things in my .java.policy,
they don't-- I suppose it's possible

00:09:31.540 --> 00:09:36.690
to get like contradictory permissions,
but they would just add together.

00:09:36.860 --> 00:09:40.790
So if something in the default
policy only allows you read access,

00:09:40.790 --> 00:09:45.240
you could theoretically add on a write
access and stomp over everything.

00:09:45.500 --> 00:09:47.810
So you have to watch what you're doing.

00:09:48.900 --> 00:09:51.140
So as an example,
we're going to look at GENIE.

00:09:51.140 --> 00:09:54.160
We took a lot of heat
because GENIE didn't work in,

00:09:55.070 --> 00:09:59.240
which is a, GENIE is a distributed
environment and it didn't work,

00:09:59.290 --> 00:10:00.650
it didn't work at all in the public beta.

00:10:01.190 --> 00:10:03.830
It does work in GM.

00:10:05.140 --> 00:10:06.340
I believe it works very well.

00:10:06.340 --> 00:10:09.880
We've gotten good feedback about that.

00:10:10.190 --> 00:10:12.530
So we've got two applications,
one that wraps up the basic

00:10:12.650 --> 00:10:16.510
providers and another one that's
the simple service browser.

00:10:16.730 --> 00:10:21.850
The browser needs its own policy
file and there are a number

00:10:21.850 --> 00:10:25.760
of additional permissions that
are needed for that to run.

00:10:25.830 --> 00:10:28.960
We can do everything in MRJ App Builder.

00:10:29.000 --> 00:10:31.190
And if we head back over
to the demo machine,

00:10:31.190 --> 00:10:32.810
I'll show you how we do that.

00:10:40.540 --> 00:10:45.500
So,
here's the Genie services application.

00:10:45.500 --> 00:10:48.300
Just show how that's running there.

00:10:50.120 --> 00:10:52.760
Here we have MRJ App Builder.

00:10:52.840 --> 00:10:56.460
And what I've done is I've set up

00:10:57.890 --> 00:11:01.180
The main class here
and the genie examples,

00:11:01.180 --> 00:11:04.070
just like you do in

00:11:04.490 --> 00:11:07.160
and any other MRJ app builder app.

00:11:07.220 --> 00:11:09.000
If you look over here on
the Java properties page,

00:11:09.000 --> 00:11:12.290
you'll see down here I've
specified java.security.policy.

00:11:15.530 --> 00:11:20.020
java.security.policy and then
the name of the policy file.

00:11:20.020 --> 00:11:24.080
And one thing to note is actually
pretty important in this.

00:11:24.080 --> 00:11:29.040
If you notice that the class
pass says content/resources/java.

00:11:29.060 --> 00:11:31.840
But the java.property,
since the security policy

00:11:31.960 --> 00:11:35.280
property is geniebrowser.policy,
so there's no additional

00:11:35.280 --> 00:11:36.740
path information.

00:11:36.740 --> 00:11:39.370
When you bundle it,
all the jars and the policies will

00:11:39.450 --> 00:11:41.360
all be together in one directory.

00:11:41.490 --> 00:11:45.450
And the way that we load the class
is it's not necessary to specify

00:11:45.540 --> 00:11:47.740
that extra path information.

00:11:47.750 --> 00:11:53.970
And to show you briefly what
that policy file looks like,

00:11:53.970 --> 00:11:56.510
I'll open it up here.

00:12:11.400 --> 00:12:12.990
Okay.

00:12:13.170 --> 00:12:18.410
And here I've granted on a global
basis the additional ability to connect

00:12:18.540 --> 00:12:24.140
and accept connections on local host,
or actually to any server,

00:12:24.140 --> 00:12:26.150
that's what the star means.

00:12:26.240 --> 00:12:30.080
And again, I can connect to anybody's
web server on port 80.

00:12:30.340 --> 00:12:32.450
And down here I have the
Genie specific properties,

00:12:32.450 --> 00:12:36.040
and in specific I've granted
the ability to connect and

00:12:36.040 --> 00:12:40.960
accept on the multicast ports,
and I've also got the permission

00:12:40.960 --> 00:12:44.150
to look at the discovery,
to use the discovery

00:12:44.150 --> 00:12:45.750
permission properties.

00:12:48.500 --> 00:12:55.360
When I do that, I can bundle everything
up with MRJ App Builder,

00:12:55.360 --> 00:12:57.840
and I've already done that for you here.

00:12:58.310 --> 00:13:01.810
If we cross our fingers,
the browser is going to identify all

00:13:01.810 --> 00:13:04.500
the services running on this machine.

00:13:06.350 --> 00:13:09.940
I say cross your fingers
because as those of you who have

00:13:09.940 --> 00:13:13.200
worked with networking know,
you need to specify a host name.

00:13:13.200 --> 00:13:16.980
We don't have DNS set up for these guys.

00:13:16.980 --> 00:13:19.930
So hopefully this will show up something.

00:13:23.400 --> 00:13:24.050
Look at that.

00:13:24.050 --> 00:13:24.760
It did find it.

00:13:24.760 --> 00:13:30.620
Great.

00:13:30.860 --> 00:13:30.880
Yay.

00:13:33.390 --> 00:13:34.150
So there you go.

00:13:34.200 --> 00:13:38.600
Genie's up and running and if that's
something you're interested in,

00:13:38.650 --> 00:13:42.510
go ahead and 10 is a great
platform for developing for it.

00:13:42.630 --> 00:13:44.940
So let's go back to the slides please.

00:13:47.100 --> 00:13:48.100
Why should you care?

00:13:48.390 --> 00:13:55.020
This is new stuff to learn.

00:13:55.060 --> 00:13:57.150
What we're going to learn today
is not going to be enough to

00:13:57.210 --> 00:14:00.040
completely learn everything
there is to learn about security,

00:14:00.150 --> 00:14:02.580
so why should you take the extra effort?

00:14:03.210 --> 00:14:06.040
Policy files make sense when you
have control over the environment.

00:14:06.190 --> 00:14:09.180
If you're in a corporate setting,
you've got your own machines

00:14:09.190 --> 00:14:11.500
that you have control over,
where you can set the

00:14:11.500 --> 00:14:15.550
environment to your liking,
then you should consider using a

00:14:15.550 --> 00:14:19.010
policy file instead of going to
the extra hassle of signing your

00:14:19.130 --> 00:14:21.400
application or signing your code.

00:14:23.230 --> 00:14:26.810
In-house apps,
special purpose networking such

00:14:26.810 --> 00:14:29.770
as GENIE as I showed before,
intranet applets.

00:14:29.860 --> 00:14:33.640
If you deliver your code with an applet,
instead of going through

00:14:33.640 --> 00:14:38.700
the trouble of signing it,
you can just say, you know,

00:14:38.700 --> 00:14:42.200
this applet has full permissions
or this applet has permission to

00:14:42.200 --> 00:14:42.200
read and write files off the disk.

00:14:43.770 --> 00:14:45.560
What if you can't control it?

00:14:45.670 --> 00:14:50.100
Say you want to send out something
that's available to everybody,

00:14:50.100 --> 00:14:53.340
you want to put it out
on the internet proper.

00:14:53.390 --> 00:14:56.940
If that's what you're going to do,
then you need to use a sign jar file.

00:14:58.750 --> 00:15:02.230
We're going to talk about
signed JAR file support on OS X.

00:15:02.330 --> 00:15:06.960
It's available in the OS X embedded
Java that's in Internet Explorer.

00:15:07.000 --> 00:15:09.380
That's the only place it's available.

00:15:09.910 --> 00:15:14.220
provides that you'll get a pop-up dialog
to let the user validate the signer.

00:15:14.230 --> 00:15:17.090
I will see a demo of
that in a few minutes.

00:15:18.150 --> 00:15:23.200
It will continue to support jar files
that were signed for MRJ 2.2 or .x.

00:15:23.360 --> 00:15:27.700
That's the old DSA with
the identity object.

00:15:27.700 --> 00:15:29.490
Those things continue to work.

00:15:29.580 --> 00:15:33.840
With some extra setup work,
we will support RSA signed applets.

00:15:34.000 --> 00:15:37.480
We'll talk about what that
means here on the next slide.

00:15:37.860 --> 00:15:44.860
And if your certificate is based on
a VeriSign or Thoughts certificate,

00:15:44.940 --> 00:15:46.600
that will also work on OS X.

00:15:48.100 --> 00:15:52.720
You'll get identical support to what you
get on Internet Explorer or Navigator.

00:15:55.790 --> 00:15:57.640
So what do I mean by a
little bit of extra work?

00:15:57.700 --> 00:15:59.200
Well, there's two things you could do.

00:15:59.490 --> 00:16:03.100
You can install the Java Secure
Sockets Extension 102.

00:16:03.140 --> 00:16:06.600
That gives you the RSA provider
that you need to read and

00:16:06.600 --> 00:16:10.700
understand the RSA signature and
to do the signing for that matter.

00:16:10.740 --> 00:16:17.300
Or you could copy sunrsasign.jar from
a Windows installation from the JRE.

00:16:17.350 --> 00:16:18.790
That's a pure Java file.

00:16:18.790 --> 00:16:22.190
It'll just come over and
work just fine on 10.

00:16:24.810 --> 00:16:27.610
Signed JAR files get full
execution permission,

00:16:27.610 --> 00:16:32.160
and using the lingo of what we've been
talking about for Java 2 security,

00:16:32.230 --> 00:16:35.940
that's the equivalent of
Java.security.all permission.

00:16:35.990 --> 00:16:42.630
And as far as what used to work in MRJ,
that's, you get the same behavior

00:16:42.650 --> 00:16:44.550
that you would have had,
that you have when you

00:16:44.550 --> 00:16:49.330
sign an applet app,
when you sign a JAR file on MRJ.

00:16:51.990 --> 00:16:56.150
You can use either Java 2's code
signing tools from the command line,

00:16:56.150 --> 00:16:58.240
or you can use the Netscape
signing tools if that's something

00:16:58.240 --> 00:17:00.340
you've done in the past.

00:17:01.370 --> 00:17:03.440
There's currently no control panel,
so to speak,

00:17:03.560 --> 00:17:05.680
for the management of certificates.

00:17:05.760 --> 00:17:10.240
Apple's got a lot of good technologies
for managing certificates and

00:17:10.240 --> 00:17:13.630
keys and things like that now,
and we're going to be looking at

00:17:13.630 --> 00:17:15.310
integrating those in the future.

00:17:16.100 --> 00:17:18.970
No promises, we need to think about the
right way to handle this,

00:17:19.090 --> 00:17:24.950
but we're not going to do just a
simple straight port of what you saw on

00:17:24.990 --> 00:17:27.930
Windows with the plug-in in particular.

00:17:29.250 --> 00:17:34.380
I'd like to bring up Ted who's going to
show you how to do JAR signing on OS X.

00:17:35.080 --> 00:17:37.600
Good morning.

00:17:37.600 --> 00:17:39.760
Happy Friday.

00:17:39.890 --> 00:17:43.440
So, let's clean this up a little bit.

00:17:43.490 --> 00:17:47.000
How many of you have
signed applets on MRJ?

00:17:47.030 --> 00:17:49.760
Yeah, that was fun, huh?

00:17:49.890 --> 00:17:53.230
So, Mac OS X is much easier.

00:17:53.260 --> 00:18:00.080
You look at the books for UNIX,
and it's the same thing.

00:18:02.110 --> 00:18:08.200
I'm going to start out
with the key store.

00:18:08.700 --> 00:18:09.740
Create the key store.

00:18:09.970 --> 00:18:11.060
Let me remove one.

00:18:11.060 --> 00:18:12.690
Okay, great.

00:18:12.710 --> 00:18:14.540
There's none in there.

00:18:14.540 --> 00:18:16.060
And let me just type this in right now.

00:18:16.060 --> 00:18:17.670
We're going to generate the key store.

00:18:17.800 --> 00:18:22.370
The key store is where your
certificates are stored.

00:18:22.370 --> 00:18:24.160
So use the key tool.

00:18:24.160 --> 00:18:28.120
And what we're going to
do is generate a key.

00:18:28.210 --> 00:18:34.290
And we're going to use the alias.

00:18:38.600 --> 00:18:50.800
[Transcript missing]

00:18:54.880 --> 00:19:00.620
So this goes through and it'll ask you
for your default key store password.

00:19:00.620 --> 00:19:06.290
And for this,
I'm just going to use key store PSWD.

00:19:06.330 --> 00:19:10.960
I wouldn't recommend that for
most actual secure environments.

00:19:11.090 --> 00:19:12.610
It'll ask for your name.

00:19:12.700 --> 00:19:15.900
This whole thing,
it's going through when you're

00:19:15.900 --> 00:19:17.800
generating a certificate.

00:19:18.600 --> 00:19:21.500
The certificate carries with
it the information about

00:19:21.560 --> 00:19:24.000
who you are and all that.

00:19:24.000 --> 00:19:27.550
So I'll go

00:19:27.600 --> 00:19:34.400
[Transcript missing]

00:19:36.090 --> 00:19:39.140
California, and that's US.

00:19:39.140 --> 00:19:40.760
Yes, that's all correct.

00:19:40.760 --> 00:19:41.920
It takes a few seconds to do this.

00:19:41.920 --> 00:19:45.210
It's generating large numbers and, uh,

00:19:48.300 --> 00:20:10.900
[Transcript missing]

00:20:13.100 --> 00:20:25.100
[Transcript missing]

00:20:25.220 --> 00:20:30.850
generate a simple hello world
applet that I changed to actually

00:20:33.310 --> 00:20:40.490
Get the user directory,
which is normally not allowed of applets.

00:20:40.490 --> 00:20:40.490
Let's see, let's bring that actually up.

00:20:41.800 --> 00:20:53.500
[Transcript missing]

00:20:59.360 --> 00:21:03.540
For some reason,
Project Builder isn't liking me.

00:21:03.630 --> 00:21:07.420
So let's go ahead and
just quit Project Builder.

00:21:07.900 --> 00:21:21.800
[Transcript missing]

00:21:23.000 --> 00:21:29.130
I have a shell script that goes ahead,
signs the jar,

00:21:29.160 --> 00:21:33.240
the alias MOV and the key store password.

00:21:33.240 --> 00:21:36.280
I have it set up also so that if
MOV has a separate password you can

00:21:36.280 --> 00:21:42.710
add that to the end and it will pass
that all in to the jar signing tool.

00:21:42.870 --> 00:21:46.360
So that makes it much easier
than the old MRJ signing process.

00:21:46.360 --> 00:21:49.070
So right now it's going through.

00:21:50.600 --> 00:22:05.400
[Transcript missing]

00:22:06.320 --> 00:22:13.210
and I'll just show you really
quick bringing this up in IE.

00:22:13.900 --> 00:22:19.590
Now for this you're going to need the
new IE that came out on software update.

00:22:20.200 --> 00:22:25.130
You also need to install the
Java Secure Socket Extension.

00:22:25.180 --> 00:22:29.220
But once you do that, you

00:22:29.400 --> 00:22:44.200
[Transcript missing]

00:22:51.590 --> 00:22:55.900
So you see it's a lot
easier than it used to be.

00:22:55.920 --> 00:23:02.180
And hopefully we get less
questions about how to do this now.

00:23:04.590 --> 00:23:06.840
Let's talk a little bit about
how you go about debugging

00:23:07.000 --> 00:23:10.510
problems with security on OS X.

00:23:12.870 --> 00:23:15.380
You can find out why you're
getting security exceptions.

00:23:15.710 --> 00:23:17.340
I still run into this all the time.

00:23:17.400 --> 00:23:21.360
When I was doing all
my demos for this talk,

00:23:21.400 --> 00:23:23.820
I would get things like, "Oh,
you don't have this property

00:23:23.820 --> 00:23:25.610
permission." I'd say,
"Well, what do you mean?

00:23:25.620 --> 00:23:27.400
"I just put it in the policy file.

00:23:27.400 --> 00:23:29.560
"What do you mean
I don't have permission?"

00:23:29.720 --> 00:23:31.810
So I pull my hair out for a little bit.

00:23:31.810 --> 00:23:35.260
And then I set the property
Java.security.debug.

00:23:35.300 --> 00:23:38.100
And in specific, well,
that will tell you how to get

00:23:38.100 --> 00:23:39.530
all the available options.

00:23:39.800 --> 00:23:43.570
But the one I used for--to
debug the problems with my

00:23:43.850 --> 00:23:46.120
demos is I set equal to policy.

00:23:46.120 --> 00:23:49.550
And the cool thing about that is
that it will go through every policy

00:23:49.660 --> 00:23:53.940
that's currently defined for your
current application on the user level

00:23:53.940 --> 00:23:58.930
and at the system level and will dump
all the policies currently in effect.

00:23:58.930 --> 00:24:01.810
So you can see what
permissions are set and,

00:24:02.140 --> 00:24:07.350
you know, what Java thinks that the
permissions currently are.

00:24:09.770 --> 00:24:13.240
Okay, a good thing to check is debug
equal access and that will show

00:24:13.240 --> 00:24:16.450
you all the property check,
the permission checks that are

00:24:16.450 --> 00:24:18.000
going on through your code.

00:24:18.340 --> 00:24:20.640
And if you open up the console window,
well,

00:24:20.650 --> 00:24:26.060
if you're running an MRJ app builder
or project builder build application,

00:24:26.060 --> 00:24:29.180
go to the console and you'll be able
to see all these things dumped out.

00:24:29.260 --> 00:24:31.710
If you're running a command line app,
it will just spew out

00:24:31.710 --> 00:24:33.180
on the terminal window.

00:24:37.200 --> 00:24:42.340
I know that this is thoroughly
documented anywhere,

00:24:42.400 --> 00:24:45.090
but if you start with DebugEagle's help,
you'll get the whole list of

00:24:45.090 --> 00:24:47.500
options that are available to you.

00:24:52.400 --> 00:25:02.200
[Transcript missing]

00:25:11.110 --> 00:25:14.920
It's also possible to use the
Java 2 security features to test

00:25:15.000 --> 00:25:18.650
your signed applet even before you
go to the effort of signing it.

00:25:19.390 --> 00:25:25.090
So you're basing it on a commercial-based
security and it takes a little bit

00:25:25.090 --> 00:25:27.260
of time to get that certificate.

00:25:27.260 --> 00:25:29.660
That doesn't stop you
from doing your work.

00:25:30.270 --> 00:25:34.140
created a file called thatjava.policy
in your home directory.

00:25:34.170 --> 00:25:37.130
Now this will set it on
the user basis again.

00:25:37.120 --> 00:25:39.860
and add this entry:
Grant the code base and

00:25:39.890 --> 00:25:45.280
the path to your JAR file,
permission java.security.allpermission.

00:25:45.300 --> 00:25:47.820
You'll effectively have the same
thing as when you do sign your applet.

00:25:47.900 --> 00:25:51.530
That's the exact same permission
that you're going to get when the

00:25:51.650 --> 00:25:53.990
user accepts your certificate.

00:25:58.630 --> 00:26:01.740
You'll be able to see these in
the slides later on in the video.

00:26:01.740 --> 00:26:05.780
So--and I've also
posted this to Java Dev,

00:26:05.800 --> 00:26:08.960
so if you search around the archives,
you'll find this as well.

00:26:11.600 --> 00:26:13.570
Okay, let's switch gears now and
we'll talk about how to do

00:26:13.600 --> 00:26:16.840
secure connections in MRJ,
or talk about secure

00:26:16.920 --> 00:26:17.840
connections in general.

00:26:17.970 --> 00:26:22.300
And first let's talk about what
you had available to you in MRJ.

00:26:22.370 --> 00:26:26.250
In MRJ you could only make
a secure connection that was

00:26:26.300 --> 00:26:28.300
based around a URL connection.

00:26:28.360 --> 00:26:34.750
And even then,
you can only do it inside of IE5.

00:26:34.840 --> 00:26:37.260
And even then, it was buggy.

00:26:41.100 --> 00:26:46.980
makes secure connections on OS X using
the Java Secure Socket Extension.

00:26:47.460 --> 00:26:50.160
That's a pure
Java implementation of SSL v3.

00:26:50.500 --> 00:26:56.230
Also supports TLS,
which is the more open standard of SSL.

00:26:56.450 --> 00:26:59.800
Go to java.sun.com/products/jsSE.

00:26:59.800 --> 00:27:02.150
You'll get all the information
you need on how to download it,

00:27:02.250 --> 00:27:03.450
how to install it.

00:27:03.540 --> 00:27:09.400
You're basically copying three jars
over to your /lib/ext directory

00:27:09.400 --> 00:27:13.480
and modifying a security file.

00:27:14.450 --> 00:27:16.350
You can also bundle it
into your application.

00:27:16.570 --> 00:27:17.600
You know, they're just JAR files.

00:27:17.600 --> 00:27:23.130
You can, you know,
attach it on your application without

00:27:23.570 --> 00:27:27.000
any intervention on the user's part.

00:27:28.450 --> 00:27:33.110
The JSSE is what's called a
non-commercial reference implementation,

00:27:33.110 --> 00:27:35.580
which means it works,
works well enough as

00:27:35.580 --> 00:27:38.700
far as Sun's concerned,
but it doesn't have a

00:27:38.730 --> 00:27:42.790
full-blown set of documentation,
support, and all the goodies that come

00:27:42.790 --> 00:27:44.400
along with a real product.

00:27:44.680 --> 00:27:49.330
The main purpose of JSSE is to
establish the API that will be used

00:27:49.450 --> 00:27:52.390
going forward for secure sockets.

00:27:52.400 --> 00:27:56.400
So if you write to the API that
comes along with this package,

00:27:56.400 --> 00:28:00.460
you'll be good for future versions
that may be better or third-party

00:28:00.560 --> 00:28:07.500
solutions that will be available,
hopefully, based on this API.

00:28:08.420 --> 00:28:10.770
Pay attention to what you download.

00:28:11.120 --> 00:28:14.290
The US and Canada version will
allow third parties to write their

00:28:14.290 --> 00:28:20.870
own RSA implementations and plug
those into the JSSE architecture.

00:28:21.890 --> 00:28:26.280
The international version
has the same level of

00:28:26.840 --> 00:28:33.830
The same strength of encryption.

00:28:33.830 --> 00:28:34.300
I believe they both
have 128 bit encryption.

00:28:34.530 --> 00:28:37.070
The international version will
not allow you to plug in somebody

00:28:37.200 --> 00:28:39.800
else's RSA implementation,
for example.

00:28:39.800 --> 00:28:45.420
You can only use what
Sun will ever provide.

00:28:47.350 --> 00:28:50.750
Okay, I want to briefly show you an
example of an application that's

00:28:50.750 --> 00:28:53.600
bundled in SSL and how it would work.

00:28:53.710 --> 00:28:56.440
And that's something called SecureFTP.

00:28:56.500 --> 00:29:01.440
You can get this from www.glub.com.

00:29:02.180 --> 00:29:04.840
and unfortunately due to
some networking problems,

00:29:04.840 --> 00:29:10.150
I'm not going to be able
to show you how to make a,

00:29:10.160 --> 00:29:13.750
how to do an actual secure FTP.

00:29:13.910 --> 00:29:19.570
They're also going to be in the future
making a little wrapper so you can make

00:29:19.660 --> 00:29:25.450
a secure FTP server out of your default
FTP server that's built into OS X.

00:29:25.760 --> 00:29:32.050
As you can see, this is actually a pretty
good looking Aqua application.

00:29:32.050 --> 00:29:34.590
Got some internal frames.

00:29:34.900 --> 00:29:43.000
[Transcript missing]

00:29:45.600 --> 00:29:51.930
So to show you what you can do with it,
you can specify--

00:29:53.520 --> 00:29:56.140
You know, where you want to go to,
username and password.

00:29:56.140 --> 00:29:59.460
Over here you can set whether
you're going to use SSL or

00:29:59.460 --> 00:30:01.490
not use a secure connection.

00:30:03.610 --> 00:30:08.480
Passive FTP encrypt what you're
getting if you need a proxy to

00:30:08.480 --> 00:30:11.570
do the actual communication.

00:30:11.770 --> 00:30:14.740
This actually ends up being a less
than interesting demonstration,

00:30:15.410 --> 00:30:24.490
but it is a good example of how you
can use SSL in your application to

00:30:25.300 --> 00:30:44.100
[Transcript missing]

00:30:49.180 --> 00:30:52.540
So, if we go back to the slides,
we'll actually talk about how

00:30:52.540 --> 00:30:54.980
you can do this in your code now.

00:30:57.690 --> 00:31:00.200
So what can you do with JSSE?

00:31:00.260 --> 00:31:05.000
You can create an
HTTPS based URL connection,

00:31:05.050 --> 00:31:06.100
the same way you do now.

00:31:06.330 --> 00:31:07.300
It's almost identical.

00:31:07.300 --> 00:31:10.390
There's like one or two extra
steps that you need to do.

00:31:11.870 --> 00:31:15.380
You can create a secure connection
at the socket API level.

00:31:15.380 --> 00:31:19.040
So you can get back a socket that's
got a secure connection backing

00:31:19.210 --> 00:31:23.700
it and talk to it just the same
way as you would a plain socket.

00:31:24.940 --> 00:31:27.290
And again, once you have that
socket or URL connection,

00:31:27.390 --> 00:31:30.720
you talk to it exactly the
same way as you did now.

00:31:32.500 --> 00:31:34.100
How do you use it?

00:31:34.150 --> 00:31:35.520
Well,
there's a couple ways you can do it.

00:31:35.860 --> 00:31:39.090
There's three jars that you
bundle into your application.

00:31:39.400 --> 00:31:42.250
I'm going to talk about the case where
you bundle the jars in with your app

00:31:42.400 --> 00:31:47.840
because I think that's going to be
the most common use of this package.

00:31:48.590 --> 00:31:51.420
Okay, what you need to do next is in
the first line of your code or

00:31:51.420 --> 00:31:54.700
near the beginning of your code,
you want to register the SSL provider

00:31:54.700 --> 00:31:56.790
with the security system.

00:31:56.880 --> 00:32:01.170
And the way you see to do that is
you create an instance of that big,

00:32:01.250 --> 00:32:06.160
long, ugly package name and create
the SSL provider and register

00:32:06.160 --> 00:32:07.760
it with add provider.

00:32:13.090 --> 00:32:17.680
Now what you do next depends
on what you're going to try

00:32:17.680 --> 00:32:21.890
to accomplish with JSSE.

00:32:23.220 --> 00:32:26.400
For an HTTPS connection,
first thing you have to do

00:32:26.400 --> 00:32:31.990
is define this property,
java.protocol.handler.pkgs.

00:32:32.230 --> 00:32:36.320
And what this will do is it
will add that handler package

00:32:36.320 --> 00:32:43.510
to the search path of the,
add it to the search path when

00:32:43.510 --> 00:32:46.170
we look up a URL connection.

00:32:48.600 --> 00:32:50.900
You can either do this
on the command line,

00:32:50.900 --> 00:32:53.340
if you're just writing
a command line app.

00:32:53.370 --> 00:32:57.930
You can set it in your app's
property file with MRJ App Builder,

00:32:57.930 --> 00:33:01.970
or you can set it explicitly
with set property in your code.

00:33:03.980 --> 00:33:06.660
Before I continue on Secure Sockets,
I'm going to show you

00:33:06.660 --> 00:33:07.900
some code that does that.

00:33:07.910 --> 00:33:10.340
Go to the demo machine here.

00:33:10.340 --> 00:33:14.080
And, let's see,
we had to quit Project Builder,

00:33:14.080 --> 00:33:16.180
so I'll open it up again.

00:33:28.160 --> 00:33:30.580
Okay, so we take a look here
and we have a very,

00:33:30.580 --> 00:33:32.820
I've written a very,
very simple application that's

00:33:32.890 --> 00:33:38.380
going to fetch the home page from,
from Amazon.com,

00:33:38.600 --> 00:33:41.090
which supports secure connections.

00:33:41.250 --> 00:33:44.090
And there you see the
URL I'm using to do it.

00:33:45.800 --> 00:33:50.340
If you look down here,
this do the fetch method is

00:33:50.420 --> 00:33:55.460
the actual interesting piece of
code that's doing all the work.

00:33:56.480 --> 00:33:58.840
If you didn't know that this
was an SSL demonstration,

00:33:59.030 --> 00:34:04.600
that could be any, you know,
that's very standard URL connection code.

00:34:04.600 --> 00:34:09.470
We'll do a, you know, open the stream,
get the input stream,

00:34:09.470 --> 00:34:12.540
and we're going to just count how
many lines we get back from it.

00:34:12.540 --> 00:34:16.620
However, if you look up here,

00:34:17.880 --> 00:34:22.720
Here's that line where I do the add
provider that I mentioned before.

00:34:22.720 --> 00:34:26.990
And here's where I set the
property that says to look in the

00:34:26.990 --> 00:34:30.080
SSL package for the protocol handler.

00:34:32.200 --> 00:34:36.340
And instead of spewing out all
the lines that we get back,

00:34:36.340 --> 00:34:40.390
I'm going to run this
and I'm going to show you

00:34:40.970 --> 00:34:47.100
Some of the features of JSSE,
or I'm sorry,

00:34:47.100 --> 00:34:51.910
one of the characteristics of it,
it is running, it looks like we're hung,

00:34:51.910 --> 00:34:55.410
but that's because when JSSE starts
up for the first time in your

00:34:55.410 --> 00:34:59.190
app it's spending some time
generating keys and you know,

00:34:59.200 --> 00:35:02.970
building up a, you know,
working with secure random.

00:35:06.000 --> 00:35:10.050
The first thing I've done in this
code is I actually do a fetch twice.

00:35:10.050 --> 00:35:12.490
And there you see we've got some results.

00:35:12.570 --> 00:35:17.320
So the first time it took, what is that,
about 18.4 seconds to

00:35:17.320 --> 00:35:18.990
fetch 3500 lines of code.

00:35:18.990 --> 00:35:22.500
And the second time it took 1.6.

00:35:22.810 --> 00:35:27.620
So the first time you use a connection,
it's going to be kind of slow,

00:35:27.620 --> 00:35:30.760
but after that you get pretty
good performance out of it.

00:35:36.430 --> 00:35:39.840
So, the secret to HTTPS connections
are these two lines right

00:35:40.180 --> 00:35:42.370
here when you install JSSE.

00:35:44.740 --> 00:35:48.560
Okay, let's go back to the slides.

00:35:48.570 --> 00:35:49.920
Alright,
now we'll talk about the other case,

00:35:49.940 --> 00:35:52.630
which is the Secure Socket case.

00:35:52.920 --> 00:35:54.710
Very similar to a plain socket,
but again,

00:35:54.730 --> 00:35:59.930
with just a few extra steps to get
your code to use a secure connection.

00:36:00.650 --> 00:36:03.640
You need to get an instance
of the SSL socket factory.

00:36:03.960 --> 00:36:09.830
The JSSE introduces a new factory
method of obtaining sockets,

00:36:09.830 --> 00:36:14.500
and the default one that comes with
it will generate secure sockets.

00:36:14.700 --> 00:36:18.990
You ask the factory to create an
SSL socket to a specific host.

00:36:19.540 --> 00:36:22.000
And at that point, you've got now,
you've basically got a socket,

00:36:22.060 --> 00:36:24.200
a Java net socket,
and you can talk to it just

00:36:24.200 --> 00:36:26.130
as you would any other socket.

00:36:26.300 --> 00:36:29.250
You can get an input or output
stream on the socket and just start

00:36:29.250 --> 00:36:31.360
pumping data in or out from it.

00:36:31.390 --> 00:36:33.440
Oh.

00:36:33.580 --> 00:36:37.290
So let's again go back
to the demo machine.

00:36:46.200 --> 00:37:08.000
[Transcript missing]

00:37:09.600 --> 00:37:13.330
I'm going to get the
default SSL socket factory,

00:37:13.330 --> 00:37:20.790
and when you import javax.net.ssl.star,
that's where you'll get the SSL factory.

00:37:24.400 --> 00:37:28.640
I ask you to create a socket to
Amazon.com on the secure port of 443.

00:37:28.640 --> 00:37:32.700
And you might want to read
these comments which talks

00:37:32.740 --> 00:37:35.840
about some of the problems that,
you know, if you run into an

00:37:35.940 --> 00:37:40.340
SSL error along the way,
you want to look at printrider.checkerror

00:37:40.350 --> 00:37:44.680
and that's how you'll get back
the error that was generated.

00:37:45.790 --> 00:37:51.710
Next I call Socket.StartHandshake.

00:37:51.710 --> 00:37:51.710
This is a

00:37:53.510 --> 00:37:55.040
Let's see.

00:37:55.040 --> 00:37:57.420
I think the SSL socket
will do it by default,

00:37:57.420 --> 00:38:00.840
but you can do it manually because
that way you'll be able to see

00:38:00.840 --> 00:38:03.140
the IO exceptions that happen.

00:38:05.680 --> 00:38:09.790
And once I've got that socket,
from this point on,

00:38:09.790 --> 00:38:13.720
I've basically got ordinary socket code.

00:38:13.700 --> 00:38:19.290
And once again, it's almost identical to
using an ordinary socket.

00:38:19.360 --> 00:38:24.060
So let's run that and I'll
show you what happens here.

00:38:24.600 --> 00:38:28.140
Again, we're going to have a
little bit of startup time,

00:38:28.140 --> 00:38:32.030
but what this is going to do is
make a connection to Amazon.com

00:38:32.120 --> 00:38:36.370
and report back all the headers
that we get back in response to it.

00:38:46.500 --> 00:38:50.000
and I actually found it and
we got a cookie back I think.

00:38:50.000 --> 00:38:53.600
And we actually see that
it was an HTTPS connection.

00:38:55.590 --> 00:38:56.550
So, there you go.

00:38:56.760 --> 00:38:59.840
It's very easy to do this stuff.

00:38:59.880 --> 00:39:01.750
I have to admit the first time
I looked at that I thought,

00:39:01.810 --> 00:39:04.650
"Oh, it can't be that easy."
But it actually is.

00:39:04.800 --> 00:39:07.580
and I don't claim to be an SSL expert.

00:39:07.690 --> 00:39:12.060
I don't know the guts of its internal
implementation or anything like that,

00:39:12.060 --> 00:39:15.670
but I don't have to,
which I think is a good thing.

00:39:16.650 --> 00:39:20.100
Okay, let's go back to the slides.

00:39:20.140 --> 00:39:22.100
Here are some resources for JSSE.

00:39:22.100 --> 00:39:24.770
I'll give you a chance
to write all these down.

00:39:24.890 --> 00:39:28.430
The best place to start
is the JSSE homepage,

00:39:28.470 --> 00:39:31.520
java.sun.com/products/jsse.

00:39:31.520 --> 00:39:34.940
And there was an excellent
article earlier this year in Dr.

00:39:34.940 --> 00:39:37.710
Dobbs about using JSSE,
and in particular,

00:39:37.800 --> 00:39:43.610
there was a good discussion about
generating certificates that you can use

00:39:44.050 --> 00:39:49.430
with a JSSE to create a server that will,
you know, create a server that will,

00:39:49.430 --> 00:39:49.430
you know,

00:39:50.200 --> 00:39:54.000
You can be a server recipient
of an SSL connection,

00:39:54.000 --> 00:39:57.750
not just a client of an SSL session.

00:39:58.190 --> 00:40:01.640
and that's actually a very good
article about how to do the

00:40:01.640 --> 00:40:04.110
housekeeping to get that to happen.

00:40:08.620 --> 00:40:11.740
We can go back later on if you want to,
you know, if you haven't written this

00:40:11.740 --> 00:40:14.700
down or you can look at it in
the slides in a little bit.

00:40:17.970 --> 00:40:22.840
So what's next?

00:40:22.850 --> 00:40:25.640
I would recommend that if security
is something that's in Java,

00:40:25.640 --> 00:40:28.090
that's something that's important to you,
I would go out and get

00:40:28.090 --> 00:40:30.570
a book on the topic.

00:40:30.940 --> 00:40:35.020
Sun has published a really good
book on the security architecture.

00:40:35.020 --> 00:40:38.620
If you look on Amazon.com,
you'll find at least 10

00:40:38.630 --> 00:40:40.680
books now on Java security.

00:40:41.400 --> 00:40:44.160
I would get one and read it and learn
about how to write your own properties,

00:40:44.200 --> 00:40:48.500
how to work with security architecture.

00:40:48.990 --> 00:40:51.570
Install JSSE if you
haven't done so already.

00:40:51.680 --> 00:40:54.950
That'll get you the
RSA provider that you need.

00:40:55.380 --> 00:40:59.840
And it's available right now and you
can start figuring out how to use it.

00:41:00.970 --> 00:41:04.460
But before you do any of that,
we've got the Java feedback

00:41:04.590 --> 00:41:06.310
forum right after this in J1.

00:41:06.340 --> 00:41:10.890
So please come to that if you've got any
questions and give us feedback on all

00:41:10.900 --> 00:41:13.870
the great sessions we've had this year.

00:41:13.880 --> 00:41:19.380
If you've got any questions, Alan.

00:41:19.660 --> 00:41:21.370
See Alan.