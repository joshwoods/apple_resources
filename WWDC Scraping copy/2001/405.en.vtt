WEBVTT

00:00:04.900 --> 00:00:15.000
[Transcript missing]

00:00:19.900 --> 00:00:23.360
All right.

00:00:23.480 --> 00:00:26.420
Welcome to session 405,
Geometry and Modeling.

00:00:27.850 --> 00:00:28.700
My name is Todd Previt.

00:00:28.700 --> 00:00:30.470
I'm the 3D graphics
TTS engineer for Apple.

00:00:30.550 --> 00:00:35.340
What we're going to be going through
today is a study of the implementation

00:00:35.340 --> 00:00:37.550
of complex animated geometries.

00:00:37.630 --> 00:00:41.040
Any of you who have downloaded any of
our sample code from the web are probably

00:00:41.040 --> 00:00:44.960
familiar with the multicolored square.

00:00:44.960 --> 00:00:49.760
For most of our OpenGL demonstrations,
there's always a spinning square that we

00:00:49.760 --> 00:00:52.640
use to illustrate any particular concept.

00:00:52.800 --> 00:00:56.970
Well, today, I'm going to move from that
into a complex animated

00:00:57.020 --> 00:00:59.060
geometry in the form of a model.

00:00:59.420 --> 00:01:02.100
You see our little marine
here on the screen.

00:01:02.370 --> 00:01:05.440
I'm going to explain basically
what goes into rendering one

00:01:05.440 --> 00:01:06.890
of these things to the screen.

00:01:06.980 --> 00:01:09.900
I'll get into coordinate systems first.

00:01:09.900 --> 00:01:12.860
One of the things that was kind of a
challenge for me when I was first getting

00:01:12.860 --> 00:01:17.490
into OpenGL was that there's so many
different versions of coordinate systems

00:01:17.490 --> 00:01:20.020
that go into any type of 3D rendering.

00:01:20.020 --> 00:01:24.210
You have your texture coordinates,
which are normally described in 2D

00:01:24.210 --> 00:01:27.100
space as they apply to a 2D texture.

00:01:27.100 --> 00:01:29.540
These days, though,
we now have what are called 3D textures,

00:01:29.540 --> 00:01:30.660
which is a layered texture.

00:01:30.660 --> 00:01:34.420
So you can actually have
three-dimensional texture coordinates.

00:01:34.440 --> 00:01:37.280
But the ones we'll be discussing
today are two-dimensional.

00:01:37.280 --> 00:01:41.670
We also have model coordinates,
or model or object coordinates,

00:01:41.770 --> 00:01:46.540
that describe an object within
the scope of its own space,

00:01:46.590 --> 00:01:49.970
as in relative to the
centroid of the model.

00:01:50.340 --> 00:01:53.480
World coordinates are a global reference.

00:01:53.480 --> 00:01:58.910
It really defines how objects relate
to one another in the scope of the

00:01:58.910 --> 00:02:01.710
world that you are rendering them in.

00:02:02.980 --> 00:02:05.060
And finally,
I-coordinates are the result of a

00:02:05.060 --> 00:02:08.420
Model-View matrix transformation
on model coordinates to put them

00:02:08.500 --> 00:02:11.980
in pseudo-world coordinate space.

00:02:12.600 --> 00:02:16.500
This kind of gives you an
example of coordinates here.

00:02:16.500 --> 00:02:20.440
You can see the triangular slice
out of the texture on the left-hand

00:02:20.600 --> 00:02:22.500
image as it applies to a model here.

00:02:22.500 --> 00:02:24.500
It kind of illustrates what
texture coordinates do.

00:02:24.740 --> 00:02:28.760
These vertices here at the edges
all have a texture coordinate that

00:02:28.760 --> 00:02:30.920
maps directly into that image.

00:02:30.990 --> 00:02:36.110
I just happen to select that portion
of it as it maps onto this model here.

00:02:40.480 --> 00:02:42.500
So what's in a model format?

00:02:42.580 --> 00:02:45.580
Well, you have vertices,
texture coordinates, triangles,

00:02:45.580 --> 00:02:46.660
and textures.

00:02:46.690 --> 00:02:49.460
Those are the basic things
that you need to store a model,

00:02:49.780 --> 00:02:52.820
load it back from disk,
and render it on the screen.

00:02:52.820 --> 00:02:55.120
Your vertices are just
an array of three floats,

00:02:55.120 --> 00:02:58.900
or doubles, however you want to
represent your coordinates.

00:02:58.900 --> 00:03:00.870
In a moment,
I'll discuss a particularly interesting

00:03:00.880 --> 00:03:07.000
technique that was used by id Software to
render their models for Quake 2.

00:03:07.000 --> 00:03:07.810
But that's really all it is.

00:03:07.810 --> 00:03:13.090
It's just a simple array of three floats
that describe a vertex in 3D space.

00:03:13.140 --> 00:03:16.110
Texture coordinates,
as I went through just a moment ago,

00:03:16.110 --> 00:03:20.260
are an array of two floats, or doubles,
whatever you prefer to use.

00:03:20.260 --> 00:03:24.100
These apply directly to the
texture in its own space.

00:03:27.130 --> 00:03:30.560
Now, with texture coordinates,
they're not always equal

00:03:30.560 --> 00:03:31.870
to the number of vertices.

00:03:31.940 --> 00:03:32.690
It doesn't sound right.

00:03:32.820 --> 00:03:35.580
How can you have more than one
texture coordinate per vertex?

00:03:35.700 --> 00:03:37.300
I'll show you.

00:03:38.770 --> 00:03:40.820
As you can see,
I've highlighted the vertices

00:03:40.820 --> 00:03:44.380
on these two triangles here with
the red line down the middle,

00:03:44.380 --> 00:03:48.740
which illustrates the shared
edge the two triangles have.

00:03:48.840 --> 00:03:51.210
You can either have texture
coordinates that are based per vertex,

00:03:51.470 --> 00:03:56.360
or you can have them that are
based on a per-triangle vertex.

00:03:57.260 --> 00:03:59.550
If you have them per vertex,
and you have two different

00:03:59.590 --> 00:04:01.750
textures on each triangle,
you're going to end up with

00:04:01.770 --> 00:04:04.080
some pretty interesting results.

00:04:04.120 --> 00:04:07.180
Unless you go out of your
way to make it happen.

00:04:07.340 --> 00:04:09.940
You're going to find that the texture
coordinates from one don't map

00:04:09.940 --> 00:04:13.120
directly into the image of the other.

00:04:13.150 --> 00:04:15.840
So you'll come out with some pretty
interesting looking textures if you share

00:04:15.840 --> 00:04:18.860
texture coordinates amongst vertices.

00:04:18.870 --> 00:04:21.090
The alternative to that,
to make things look right

00:04:21.150 --> 00:04:24.620
with two different textures,
is to have texture coordinates assigned

00:04:24.670 --> 00:04:27.020
on a per-triangle vertex basis.

00:04:27.030 --> 00:04:29.910
At that point, each triangle vertex,
even though it's shared,

00:04:29.910 --> 00:04:31.900
has its own set of texture coordinates.

00:04:31.970 --> 00:04:34.570
So therefore,
you can have two different textures

00:04:34.570 --> 00:04:38.590
on the two different triangles and
not screw up the texture coordinates.

00:04:40.390 --> 00:04:45.060
Again, we'll go back to this.

00:04:45.060 --> 00:04:50.790
All your triangles are an array of vertex
coordinates and texture coordinates.

00:04:51.280 --> 00:04:56.330
Uh... that applies to... they're usually
indices into the aforementioned arrays

00:04:56.340 --> 00:04:58.200
of vertices and texture coordinates.

00:04:58.370 --> 00:05:02.710
Uh... It keeps things fairly easy and

00:05:03.730 --> 00:05:06.470
For loading purposes,
you're better off using indices

00:05:06.470 --> 00:05:11.460
instead of actual hard-coded vertices.

00:05:11.460 --> 00:05:14.300
Textures themselves are just the image
data stored in whatever format you like,

00:05:14.300 --> 00:05:16.690
whichever you happen to want to prefer.

00:05:16.980 --> 00:05:22.780
I do know that id for Quake 2
happened to use the PCX format.

00:05:22.780 --> 00:05:25.710
These days,
a lot of people are going back

00:05:25.880 --> 00:05:28.140
to using BMPs and GIF files.

00:05:28.140 --> 00:05:30.340
JPEGs are not used a lot because
of the compression schemes

00:05:30.340 --> 00:05:31.460
that are involved in them.

00:05:31.460 --> 00:05:35.210
You tend to lose a lot of image quality,
so they tend to be avoided.

00:05:54.790 --> 00:05:54.790
So as I said,
I've been kind of mentioning

00:05:54.790 --> 00:05:54.790
id here and there,
but the case study we're going

00:05:54.790 --> 00:05:54.790
to be going through today is
for the Quake 2 model format,

00:05:54.790 --> 00:05:54.790
which is .md2.

00:05:54.790 --> 00:05:54.790
I chose this format for
a number of reasons.

00:05:54.790 --> 00:05:54.790
It's publicly available.

00:05:54.790 --> 00:05:54.790
There's a ton of information
on the web that you can get.

00:05:55.110 --> 00:05:59.000
It is fairly well documented,
although as I learned just recently,

00:05:59.000 --> 00:06:03.830
it's not quite as well
documented as I thought it was.

00:06:04.020 --> 00:06:05.820
There's also a lot of models
that are readily available.

00:06:05.820 --> 00:06:09.850
You can download them almost anywhere,
and there's a ton of them out there.

00:06:11.240 --> 00:06:15.330
So what does the header file for this,
for an MD2 look like?

00:06:15.420 --> 00:06:16.100
Well that's it.

00:06:16.550 --> 00:06:18.100
Doesn't look like there's
a whole lot there.

00:06:18.100 --> 00:06:20.960
You'll notice that it's
actually a structure of 17 ints.

00:06:21.150 --> 00:06:22.540
Makes it really easy to load in.

00:06:22.540 --> 00:06:24.080
It comes out to 68 bytes.

00:06:24.100 --> 00:06:25.700
So you just,
all you have to do is put your file

00:06:25.700 --> 00:06:28.200
pointer at the beginning of the file,
load in the first 68 bytes,

00:06:28.200 --> 00:06:31.070
and you have a complete description of
what the rest of the file looks like.

00:06:31.130 --> 00:06:33.990
I've highlighted here the
elements that are actually

00:06:34.000 --> 00:06:36.100
relevant to our discussion today.

00:06:36.100 --> 00:06:39.900
Magic conversion, those are, I believe,
specific to id.

00:06:40.280 --> 00:06:43.020
The offsets are kind
of interesting though.

00:06:43.100 --> 00:06:46.330
They specify the offsets of
the various data points from

00:06:46.510 --> 00:06:48.100
the beginning of the file.

00:06:48.160 --> 00:06:51.120
Well if you read in the file
in its entirety in memory,

00:06:51.120 --> 00:06:54.290
they also become the offsets
to that data in memory.

00:06:57.060 --> 00:06:58.870
So how is this data actually represented?

00:06:58.970 --> 00:07:03.120
Well, there's a lot of supporting data
structures that go into the MD2 format,

00:07:03.120 --> 00:07:05.800
and I'll be going through
some of those right now.

00:07:05.800 --> 00:07:11.460
The triangle vertex T is,
as I mentioned in the overview slide,

00:07:11.460 --> 00:07:17.790
this is our structure that will
describe any given triangle vertex.

00:07:18.990 --> 00:07:21.560
What you have is,
you've got three vertices

00:07:21.730 --> 00:07:23.240
that are in a byte.

00:07:23.310 --> 00:07:25.930
And you also got a byte which
describes the light normal index,

00:07:25.930 --> 00:07:29.090
which is not relevant
to our discussion today.

00:07:29.120 --> 00:07:31.820
The triangle data is then--

00:07:32.200 --> 00:07:35.560
The first step is to integrate
two arrays of indices into

00:07:35.560 --> 00:07:37.570
the vertex and triangle data.

00:07:39.080 --> 00:07:42.790
Now I know I said that
vertices are floats or doubles,

00:07:42.880 --> 00:07:45.200
some kind of floating point
number that you can use,

00:07:45.200 --> 00:07:45.910
right?

00:07:46.790 --> 00:07:51.460
What these are,
they're an encoded byte coordinate.

00:07:51.570 --> 00:07:53.860
In order to conserve space,

00:08:11.850 --> 00:08:11.850
It decided to pack all of
its vertex data into bytes.

00:08:11.850 --> 00:08:11.850
This makes it really easy to go
cross-platform when you're switching

00:08:11.850 --> 00:08:11.850
from BigIndian to LittleIndian because
you don't have to do anything with these.

00:08:11.850 --> 00:08:11.850
They're already--it's
just a--it's a byte,

00:08:11.850 --> 00:08:11.850
no swapping required,
can be loaded by any machine.

00:08:12.330 --> 00:08:17.450
Also, having the vertices in such a small
space means that they can be very,

00:08:17.460 --> 00:08:18.530
very tightly packed.

00:08:18.570 --> 00:08:22.680
You notice that each of these structures
are actually only four bytes in length.

00:08:22.780 --> 00:08:26.570
Well, four bytes, 32 bits,
size of a long.

00:08:34.410 --> 00:08:37.600
The other aspect of it is,
why do they encode them in a byte?

00:08:37.730 --> 00:08:42.500
Because it allows for very easy scaling
and translation of any given vertex.

00:08:42.500 --> 00:08:46.190
So Jeff mentioned earlier in his
presentation about how OpenGL is very,

00:08:46.220 --> 00:08:50.300
very good at scaling and rotating things
with just a simple transform matrix.

00:08:50.420 --> 00:08:53.040
Same concept applies here.

00:08:58.420 --> 00:09:01.500
Our texture data is stored as file names.

00:09:01.500 --> 00:09:02.370
It's pretty basic.

00:09:02.480 --> 00:09:07.100
You just load in the texture
as you would any other file.

00:09:07.160 --> 00:09:11.140
The preferable method on Mac OS X is
to use Qt New GeoWield from Pointer,

00:09:11.270 --> 00:09:15.950
which sets up a non-padded GeoWield that
you can then direct OpenGL to to suck in

00:09:15.950 --> 00:09:18.680
the texture and apply it to your model.

00:09:19.070 --> 00:09:23.040
Some little caveats about this:
for any given MD2 file,

00:09:23.270 --> 00:09:25.400
the skin width and skin
height will be the same.

00:09:25.610 --> 00:09:31.120
You can have as many skins as you like,
but they all have to be of the same size.

00:09:33.160 --> 00:09:35.450
Your texture coordinates:
small struct of two shorts,

00:09:35.640 --> 00:09:37.330
the S and T coordinates.

00:09:37.960 --> 00:09:39.620
There's really not much
more to it than that.

00:09:39.800 --> 00:09:45.100
Those describe the coordinates of
the slice of the texture that you're

00:09:45.100 --> 00:09:49.410
going to be using for whichever
vertex texture coordinates apply to.

00:09:51.620 --> 00:09:54.740
This is relevant to animation,
which is your frame data.

00:09:54.830 --> 00:09:57.330
On a per-frame basis,
this is what you get when you're

00:09:57.350 --> 00:09:59.300
dealing with the MD2 format.

00:09:59.300 --> 00:10:02.010
You've got a scale and a translate,
and those are the two that

00:10:02.010 --> 00:10:03.500
I want to focus on for a moment.

00:10:03.500 --> 00:10:05.640
As I mentioned,
OpenGL is very good at scaling

00:10:05.650 --> 00:10:09.760
and translating just using
very simple matrix transforms.

00:10:09.880 --> 00:10:16.000
These are the values that we'll use and
apply to the byte vertices to get them to

00:10:16.000 --> 00:10:18.180
the actual positions that we want them.

00:10:19.430 --> 00:10:24.080
The name segment of this is just
whatever you happen to want to name

00:10:24.080 --> 00:10:27.700
the frame for tracking your animations.

00:10:27.730 --> 00:10:30.780
And then the triangle T vertices.

00:10:30.840 --> 00:10:35.400
This is kind of interesting
because it's only one vertex.

00:10:35.470 --> 00:10:36.900
Or it's only one vertex.

00:10:37.060 --> 00:10:41.120
But what it actually is,
is a pointer to a whole array of vertices

00:10:41.370 --> 00:10:44.890
that are allocated on a per-frame basis.

00:10:45.370 --> 00:10:50.310
So, what you end up with here is that
each frame will have the exact same

00:10:50.540 --> 00:10:53.800
number of vertices for any given MD2.

00:10:55.750 --> 00:11:00.600
This is how I chose to set
up a storage of an MD2 file.

00:11:00.600 --> 00:11:03.180
Four elements: we have the header,
frames, triangles,

00:11:03.250 --> 00:11:04.680
and texture coordinates.

00:11:05.400 --> 00:11:09.160
You don't have to set it up this way,
and I'd like to point out

00:11:09.210 --> 00:11:13.510
that this does leave out a
significant chunk of the MD2 file,

00:11:13.510 --> 00:11:17.060
that being the GL commands,
which were not exactly relevant,

00:11:17.130 --> 00:11:19.370
at least to this discussion.

00:11:21.050 --> 00:11:24.890
So here's a little pseudocode
about loading from loading in MG2.

00:11:24.930 --> 00:11:28.420
The first thing is you want to
obviously find and open the file.

00:11:28.440 --> 00:11:32.870
And then you'll read in the header,
as described on the slide here.

00:11:32.920 --> 00:11:34.960
You read it in,
copy it to the-- once you have

00:11:35.040 --> 00:11:37.390
your copy of it in memory,
you can now directly access it to

00:11:37.390 --> 00:11:42.180
get to any of the data that you need,
such as the offsets of the frames.

00:11:43.160 --> 00:11:44.450
...like this.

00:11:44.450 --> 00:11:47.680
And then you can allocate your
memory for your frames here,

00:11:47.680 --> 00:11:51.430
and then read in the data to your, uh,
then you read the, excuse me,

00:11:51.430 --> 00:11:54.120
and you'll read the data
in from the file into your,

00:11:54.260 --> 00:11:56.600
into your data structures and memory.

00:11:59.260 --> 00:12:00.640
So drawing models.

00:12:00.710 --> 00:12:05.270
Well, there's a really basic loop that
you want to use whenever you want

00:12:05.270 --> 00:12:07.770
to draw your models on screen.

00:12:08.370 --> 00:12:10.470
After setting everything up,
you have your GL context,

00:12:10.590 --> 00:12:14.340
you have your viewport,
you perform your camera transformations.

00:12:14.430 --> 00:12:18.530
So you're looking at the
proper place in space.

00:12:18.800 --> 00:12:21.380
Then you're going to push that
matrix so you can save it.

00:12:21.420 --> 00:12:24.070
You'll transform your model
to place it where you want it.

00:12:24.140 --> 00:12:25.100
You'll draw it.

00:12:25.230 --> 00:12:28.000
You're going to pop that matrix back off,
and that will return you to the

00:12:28.000 --> 00:12:31.490
basic camera transformation so
you're right back where you started.

00:12:32.830 --> 00:12:35.990
And then you continue the
next iteration of the loop,

00:12:35.990 --> 00:12:40.440
and you can go through it for the
however many models you happen to have.

00:12:42.330 --> 00:12:45.050
This is kind of a graphical
representation of what it looks like.

00:12:45.300 --> 00:12:47.190
After the camera transform,
you push the matrix,

00:12:47.260 --> 00:12:49.960
transform your model, draw it,
pop the matrix back off,

00:12:50.140 --> 00:12:53.200
return right around again for
however many models you've got.

00:12:53.200 --> 00:12:56.290
After you perform all of this,
you continue with any other

00:12:56.290 --> 00:12:58.390
rendering stuff that you want to do.

00:13:00.740 --> 00:13:05.320
This is kind of a pseudo-code
representation of what a scene

00:13:05.320 --> 00:13:07.600
rendering routine would look like.

00:13:07.800 --> 00:13:12.690
The highlighted code specifies the
loop that I just described for you,

00:13:12.690 --> 00:13:17.930
where the push matrix and pop matrix
surround the model drawing routine.

00:13:20.470 --> 00:13:24.440
One thing I didn't talk
about was animation.

00:13:24.590 --> 00:13:28.640
This would actually only render
one frame of any animation,

00:13:28.640 --> 00:13:30.690
which happened to be frameNum.

00:13:30.760 --> 00:13:33.560
If you wanted to render
each individual frame,

00:13:33.660 --> 00:13:35.890
the model itself would probably
have to have some kind of rendering

00:13:35.890 --> 00:13:39.250
routine that would animate through
whatever frame sequence you wanted

00:13:39.250 --> 00:13:41.260
to perform the given animation.

00:13:44.920 --> 00:13:46.880
So how are we going to draw that model?

00:13:46.980 --> 00:13:48.640
Well, this is, again,
a pseudocode representation

00:13:48.640 --> 00:13:50.810
of how you might do it.

00:13:51.960 --> 00:13:54.590
First, we start with the vertex indices,
vi,

00:13:54.980 --> 00:13:58.470
and the actual vertex we're going to use,
vtx.

00:13:58.520 --> 00:14:00.600
And we start with triangles.

00:14:03.500 --> 00:14:07.160
Now these loops are kind of strange,
and while we were writing

00:14:07.160 --> 00:14:11.160
the code for this,
the language that we used to

00:14:11.160 --> 00:14:15.570
try and describe it became very,
very convoluted very quickly,

00:14:15.580 --> 00:14:18.240
as you'll find out momentarily.

00:14:18.720 --> 00:14:24.230
So what we have here is for
each triangle in the header,

00:14:24.700 --> 00:14:25.950
Skip down one.

00:14:26.260 --> 00:14:30.130
Now for each vertex of each
triangle in the header.

00:14:31.980 --> 00:14:34.730
But wait, there's more.

00:14:34.830 --> 00:14:41.170
So for each vertex
index in each triangle,

00:14:41.630 --> 00:14:47.540
and Now we're on to, for each vertex,
in each vertex index, in each triangle,

00:14:47.750 --> 00:14:50.200
perform the following operations.

00:14:50.470 --> 00:14:52.120
Those would be:
you get the vertex itself,

00:14:52.150 --> 00:14:55.850
you multiply by the scale,
you add the translation,

00:14:55.890 --> 00:14:57.820
and you have your vertex.

00:14:58.560 --> 00:15:00.300
Calling GL vertex down at the bottom.

00:15:00.330 --> 00:15:02.890
You specify your vertex so
OpenGL knows where you want it,

00:15:02.960 --> 00:15:04.570
and you're good to go.

00:15:08.580 --> 00:15:12.510
So as I mentioned,
this rendering engine--

00:15:12.510 --> 00:15:12.680
or this rendering engine,
excuse me.

00:15:12.680 --> 00:15:15.690
This rendering loop does
omit any sort of animation.

00:15:15.700 --> 00:15:19.120
You would have to do quite a bit more.

00:15:19.170 --> 00:15:22.440
You'd have to add quite a bit of code to
get the animations actually working here.

00:15:22.520 --> 00:15:25.530
What you'd want to do
in that case would be,

00:15:25.700 --> 00:15:29.070
as you drop down and start
rendering the vertices,

00:15:29.360 --> 00:15:36.040
you'd want to execute that loop for
each frame of each animation that you

00:15:36.040 --> 00:15:38.490
wanted to display at any given time.

00:15:42.690 --> 00:15:44.460
Alternatively,
what you could do is you could

00:15:44.510 --> 00:15:47.630
increment the frame number every
time a frame renders through your

00:15:47.630 --> 00:15:51.960
rendering engine or for whatever
application you've got and continue

00:15:51.970 --> 00:15:54.950
with your rendering loop that way.

00:16:00.380 --> 00:16:03.800
As I mentioned,
on a per-vertex coordinate basis,

00:16:04.070 --> 00:16:06.640
each vertex is an encoded byte.

00:16:06.840 --> 00:16:09.630
You multiply by a scale,
you add the translation,

00:16:09.680 --> 00:16:13.150
and you end up with a floating
point resultant vertex that

00:16:13.150 --> 00:16:15.010
you can pass to OpenGL.

00:16:17.830 --> 00:16:22.650
So a little bit about animation here.

00:16:22.870 --> 00:16:26.540
I'm going to discuss key-framed
animation with vertex interpolation

00:16:26.540 --> 00:16:27.700
between the key frames.

00:16:27.770 --> 00:16:29.640
What exactly is key-frame animation?

00:16:30.040 --> 00:16:34.000
If you're not familiar with it,
key-frame animation is

00:16:34.000 --> 00:16:35.700
a series of snapshots.

00:16:35.700 --> 00:16:38.380
For instance,
if you are at a racetrack and you're

00:16:38.380 --> 00:16:42.570
watching a car travel around in a circle,
and you took various pictures of

00:16:42.570 --> 00:16:46.600
it as it moved around the track,
those would be your key frames.

00:16:46.680 --> 00:16:50.920
So if you were to view them in order,
you would actually see the

00:16:50.920 --> 00:16:55.150
quote unquote "animation" of
the car moving around the track.

00:16:55.230 --> 00:16:57.510
Well, what's wrong with that?

00:16:57.590 --> 00:16:59.440
It's going to look really choppy.

00:16:59.510 --> 00:17:01.210
So what do you do?

00:17:01.720 --> 00:17:04.350
That's where vertex
interpolation comes in.

00:17:04.430 --> 00:17:07.260
Between any two given key frames,

00:17:07.670 --> 00:17:13.320
You can divide up the amount of time
that it takes to render each frame and

00:17:13.320 --> 00:17:17.310
then interpolate a number of vertices
in between the key-frame vertices.

00:17:17.310 --> 00:17:20.070
So you end up with a
much smoother animation.

00:17:23.170 --> 00:17:26.390
Each frame in a key-frame
animation sequence contains a

00:17:26.420 --> 00:17:28.600
complete set of vertex data.

00:17:30.030 --> 00:17:35.660
It has all the texture coordinates,
all the vertex coordinates for

00:17:35.660 --> 00:17:37.890
any model that it applies to.

00:17:39.630 --> 00:17:41.530
As I mentioned,
it is a series of snapshots

00:17:41.670 --> 00:17:44.660
over a given period of time.

00:17:44.770 --> 00:17:49.720
Key-frame animation is very good
for things like simple rigid body

00:17:49.720 --> 00:17:58.670
motion or for rendering any sort of
fixed animation in a game context.

00:18:08.890 --> 00:18:11.850
For other things,
such as models that are going to be

00:18:11.920 --> 00:18:18.390
interacting with your environment
and other dynamic sources of energy,

00:18:18.630 --> 00:18:26.580
you would probably want to
move to something more complex,

00:18:26.590 --> 00:18:26.590
such as a

00:18:30.130 --> 00:18:32.600
Skeletal-based animation.

00:18:32.600 --> 00:18:35.260
Key-frame animation will do the job,
but it's probably going

00:18:35.260 --> 00:18:37.370
to look pretty choppy,
and it's going to be hard to

00:18:37.370 --> 00:18:40.080
modify your key-frames on the fly.

00:18:42.810 --> 00:18:45.440
This is kind of a graphical
representation of what a

00:18:45.530 --> 00:18:47.360
key-frame animation looks like.

00:18:47.360 --> 00:18:51.310
Each of these would be
considered a snapshot.

00:18:51.900 --> 00:18:53.990
And as you progress through,
he goes from a standing--our marine

00:18:53.990 --> 00:18:57.390
here goes from a standing position
all the way down to laying down.

00:18:57.490 --> 00:19:01.600
If you were to play these through
one at a time at any amount of speed,

00:19:01.690 --> 00:19:03.700
it's probably going
to look pretty choppy.

00:19:03.790 --> 00:19:06.590
Again, that's where the vertex
interpolation would come in,

00:19:06.590 --> 00:19:11.500
and you could smooth out the
animation to make it look much better.

00:19:11.600 --> 00:19:15.970
What we're going to do is we're going
to interpolate the vertices linearly.

00:19:17.880 --> 00:19:24.030
As in, there will be a fixed amount of
time between any two interpolations.

00:19:24.110 --> 00:19:27.240
The number of actual interpolated
vertices is arbitrary.

00:19:27.300 --> 00:19:32.020
It is purely based on your
frame rate at the time,

00:19:32.020 --> 00:19:41.470
or you can actually hard-code it to where
you can lock it in to a particular rate.

00:19:45.100 --> 00:19:49.680
So the basic equation is the
number of interpolations.

00:19:49.740 --> 00:19:56.130
The number of interpolations is equal to
the animation speed from frame to frame.

00:19:56.700 --> 00:20:10.600
[Transcript missing]

00:20:11.160 --> 00:20:14.320
So for any given vertex,
you would have 15 more

00:20:14.910 --> 00:20:17.110
in the middle of them.

00:20:24.440 --> 00:20:24.440
That would smooth out
your animation sequence.

00:20:24.440 --> 00:20:24.440
I've kind of gone through how

00:20:25.780 --> 00:20:28.610
How to define a model format
and the necessary data that

00:20:28.610 --> 00:20:31.200
you would want to have.

00:20:31.200 --> 00:20:38.140
Went through loading and storage
and memory representation.

00:20:38.140 --> 00:20:42.970
And showed some basic algorithms as
to how to display and animate a model.

00:20:49.050 --> 00:20:53.030
If you want a little more
information on this kind of thing,

00:20:53.030 --> 00:20:57.050
you can go to Apple's website
and the Apple OpenGL website,

00:20:57.050 --> 00:20:59.170
as well as OpenGL.org.

00:20:59.680 --> 00:21:03.070
Two really good books on
modeling are Real-Time Rendering

00:21:03.070 --> 00:21:06.150
and 3D Graphics File Formats,
which is where I ended up

00:21:06.160 --> 00:21:09.430
learning most of my information
from over the course of time.

00:21:09.600 --> 00:21:12.860
The Principles of 3D
Computer Animation is also

00:21:12.860 --> 00:21:17.180
another very good book,
and Advanced Animation and Rendering

00:21:17.180 --> 00:21:20.970
Techniques are very good for just that,
animation.

00:21:24.030 --> 00:21:27.500
As far as the roadmap goes,
408 tomorrow is OpenGL optimization.

00:21:27.500 --> 00:21:30.740
Jeff discussed that earlier.

00:21:31.400 --> 00:21:33.800
Advanced rendering will be
given by Troy Dawson tomorrow,

00:21:33.800 --> 00:21:39.210
and our feedback forum
is tomorrow at 5:00 PM.

00:21:39.290 --> 00:21:44.090
My contact information for anybody
who wants to get a hold of me.