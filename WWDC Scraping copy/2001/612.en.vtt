WEBVTT

00:00:00.920 --> 00:00:02.010
Good afternoon, everybody.

00:00:02.060 --> 00:00:04.500
Welcome back to Direct to Web.

00:00:04.500 --> 00:00:08.280
I'd like to introduce our next presenter,
Miguel Sanchez.

00:00:14.330 --> 00:00:15.920
Good afternoon everyone.

00:00:15.970 --> 00:00:20.920
Can you hear me okay?

00:00:20.920 --> 00:00:24.360
Thank you for coming to hear
our session on Direct to Web.

00:00:24.400 --> 00:00:28.640
I know you're probably sick of this
polls at the beginning of the sessions,

00:00:28.670 --> 00:00:31.800
but I really need to get a read
of how many of you are WebObjects

00:00:31.810 --> 00:00:35.440
developers here in the audience?

00:00:35.440 --> 00:00:39.060
Now,
how many of you have used Direct to Web?

00:00:40.480 --> 00:00:45.520
Okay, so there's a good number of people
there that are using Direct to Web.

00:00:45.520 --> 00:00:48.520
We'll say something like 5% or so.

00:00:48.520 --> 00:00:54.740
So you probably feel a little lonely
being the only users of Direct to Web,

00:00:54.740 --> 00:00:55.540
right?

00:00:55.560 --> 00:00:59.590
But, you know...

00:01:03.010 --> 00:01:07.840
By now we've all been indoctrinated
about the relevance of BMW and our use,

00:01:07.840 --> 00:01:10.820
so let's see if we can
bend some statistics here.

00:01:10.820 --> 00:01:14.800
So we all know that
BMW has 3% of the market,

00:01:14.800 --> 00:01:16.530
but...

00:01:16.740 --> 00:01:19.480
For anybody that's been out
here in California for more than

00:01:19.480 --> 00:01:24.340
a week realizes that locally,
it looks more like this.

00:01:24.340 --> 00:01:25.440
Right?

00:01:27.230 --> 00:01:30.070
So it's,
when you're doing this statistics thing,

00:01:30.070 --> 00:01:34.710
it's very important to have a
good grip of your universe that

00:01:34.710 --> 00:01:36.300
you're getting your sample from.

00:01:36.300 --> 00:01:37.960
You can't just make up numbers, right?

00:01:37.960 --> 00:01:41.810
So we take this thing very
seriously in WebObjects.

00:01:41.960 --> 00:01:44.630
So over the lunch break,
I stood over in the corner

00:01:44.720 --> 00:01:47.580
and I tried to count cars,
and I didn't really find any

00:01:47.580 --> 00:01:51.460
data that substantiates this,
but I'm just guessing that about 6% of

00:01:51.490 --> 00:01:56.100
the remaining people use 76 for Pintos,
right?

00:01:57.280 --> 00:02:01.520
And you can't compare apples and oranges,
but out of those people

00:02:01.520 --> 00:02:06.150
that use for Pintos,
about 90% prefer Pinto beans in their

00:02:06.150 --> 00:02:10.100
burritos when they go have Mexican food,
right?

00:02:10.100 --> 00:02:13.750
So what does this have
to do with Direct to Web?

00:02:14.430 --> 00:02:15.090
Not really.

00:02:15.160 --> 00:02:15.960
Not nothing.

00:02:15.960 --> 00:02:16.630
Not much.

00:02:16.640 --> 00:02:18.500
Okay?

00:02:18.500 --> 00:02:24.270
Direct to Web is not a technology
you can explain with pie charts.

00:02:24.360 --> 00:02:28.480
So you'll have to sit through
my presentation of one hour,

00:02:28.480 --> 00:02:31.620
and hopefully you'll get
a little more excited.

00:02:31.620 --> 00:02:35.360
This, just as a point of reference,
this is...

00:02:36.560 --> 00:02:40.000
This is classified as an
advanced WebObjects session,

00:02:40.000 --> 00:02:42.880
so I'm assuming some
WebObjects knowledge here.

00:02:42.990 --> 00:02:47.220
This is sort of like,
if you're already a WebObjects user,

00:02:47.300 --> 00:02:50.980
how can you take real
advantage of Direct to Web?

00:02:50.980 --> 00:02:54.970
So, you've probably seen in the past,
it's been demoed in other sessions,

00:02:54.970 --> 00:02:58.840
and we've shown you how Direct to
Web jumpstarts your application.

00:02:58.840 --> 00:03:01.830
In this session,
I'm going to focus more on how

00:03:01.830 --> 00:03:06.140
much you can customize your
application once you've started.

00:03:06.500 --> 00:03:08.460
What will we learn?

00:03:08.480 --> 00:03:12.400
I'm going to talk about the
architecture of Direct to Web,

00:03:12.510 --> 00:03:15.790
so you become more familiar with
what's going on behind the scenes.

00:03:15.840 --> 00:03:19.530
One of the most important
things in the architecture of

00:03:19.530 --> 00:03:22.860
Direct to Web is the rule system,
so I'm going to spend some

00:03:22.860 --> 00:03:25.840
time explaining to you
what the rule system does.

00:03:25.840 --> 00:03:29.470
And of course,
the recurring theme of the talk

00:03:29.470 --> 00:03:35.570
is how you can customize Direct to
Web applications at all kinds of levels.

00:03:36.270 --> 00:03:39.280
Brief overview of what Direct to Web is.

00:03:39.320 --> 00:03:43.120
Direct to Web is infrastructure
for making your development of

00:03:43.170 --> 00:03:46.760
WebObjects applications easier,
much easier.

00:03:46.900 --> 00:03:48.500
How do we achieve this?

00:03:48.550 --> 00:03:52.320
We achieve this by giving you a
lot of pre-built functionality.

00:03:52.340 --> 00:03:56.260
We give you a head start,
so you don't have to start from zero,

00:03:56.270 --> 00:03:59.860
from basically doing nothing other
than giving us your database model.

00:03:59.880 --> 00:04:03.270
We give you a full running application.

00:04:03.820 --> 00:04:05.770
Direct to Web is not
really an application.

00:04:05.810 --> 00:04:10.280
Don't expect to find a directtoweb.app
anywhere in your system.

00:04:10.390 --> 00:04:12.900
Rather,
it's a set of frameworks and tools.

00:04:12.900 --> 00:04:16.360
Although I will be referring
to Direct to Web applications,

00:04:16.360 --> 00:04:19.240
I mean your applications
that use Direct to Web.

00:04:19.860 --> 00:04:23.710
And Direct to Web introduces
something new to WebObjects,

00:04:23.820 --> 00:04:27.400
which is rule-based programming,
to say it one way.

00:04:27.400 --> 00:04:28.640
I'll talk about that.

00:04:28.640 --> 00:04:31.440
What is a Direct to Web application?

00:04:31.440 --> 00:04:35.040
Most importantly,
it's a normal WebObjects

00:04:35.040 --> 00:04:40.270
application with an HTML frontend
and that uses EOF in the back.

00:04:41.880 --> 00:04:44.040
Like I said before,
you probably started with a lot of

00:04:44.040 --> 00:04:47.770
the pre-built components we give you.

00:04:47.780 --> 00:04:51.440
And you customize the application
we give you either from zero,

00:04:51.440 --> 00:04:55.080
you actually have a running database
application without doing anything,

00:04:55.080 --> 00:04:58.100
to quite extensively,
as I'm going to show you.

00:04:58.100 --> 00:05:03.180
And you know WebObjects gives you
a lot of great runtime flexibility.

00:05:03.180 --> 00:05:04.740
Direct to Web adds to that.

00:05:04.740 --> 00:05:08.260
It gives you yet another level in
which you can change your application.

00:05:09.820 --> 00:05:13.920
So now we're going to go
to a brief demo to show,

00:05:14.030 --> 00:05:17.520
just to show Direct to Web to
those that have never seen

00:05:17.520 --> 00:05:18.540
a Direct to Web application.

00:05:18.590 --> 00:05:20.340
Can we get the demo machine up on screen?

00:05:24.010 --> 00:05:25.540
Can we get the demo machine up on screen?

00:05:25.540 --> 00:05:27.020
Thank you.

00:05:27.040 --> 00:05:31.270
So the starting point for
a Direct to Web application

00:05:31.370 --> 00:05:33.440
is always a database model.

00:05:33.640 --> 00:05:37.190
That we ask from you,
in addition to the price of Web objects.

00:05:37.240 --> 00:05:41.800
So the example we're going to be
using throughout our application

00:05:41.910 --> 00:05:43.940
is a simple bug tracking tool.

00:05:43.940 --> 00:05:44.920
You're all developers.

00:05:44.920 --> 00:05:48.160
You probably all have a need for
something like this within your projects.

00:05:48.400 --> 00:05:53.290
We have a very small,
simple database that has two main tables.

00:05:53.380 --> 00:05:56.260
The bugs,
which problems you have on your software.

00:05:56.260 --> 00:05:57.110
The users.

00:05:57.110 --> 00:06:00.840
Users can either have created the bugs,
or be the engineers

00:06:00.840 --> 00:06:02.430
assigned to fix the bugs.

00:06:02.500 --> 00:06:04.810
And you have lookup tables
like the state of the bug and

00:06:04.830 --> 00:06:06.340
which project it belongs to.

00:06:06.340 --> 00:06:08.500
So that's what we start out with.

00:06:10.910 --> 00:06:15.380
Once you have the project
and you create a Direct to

00:06:15.380 --> 00:06:17.560
Web project in Project Builder,
it uses it.

00:06:17.660 --> 00:06:19.300
Oh, let me stop here for a moment.

00:06:19.300 --> 00:06:22.190
I've noticed that a lot of
WebObjects developers out

00:06:22.190 --> 00:06:25.880
there have been paying very,
very close attention to our demos and

00:06:25.880 --> 00:06:28.090
whether we click something or not.

00:06:28.090 --> 00:06:30.480
Let me come clean on it before.

00:06:30.480 --> 00:06:34.260
To save some time,
we pre-compile some of the applications

00:06:34.260 --> 00:06:36.320
and we've set some defaults.

00:06:36.320 --> 00:06:38.620
We're not showing every single step here.

00:06:39.910 --> 00:06:43.160
Don't spend too much time trying
to figure out why we skipped it.

00:06:43.160 --> 00:06:44.920
We're just trying to save some time here.

00:06:44.920 --> 00:06:49.550
This is a project that was
created using Direct to Web.

00:06:49.550 --> 00:06:54.250
All you get is a basic template
for a WebObjects application.

00:06:54.310 --> 00:06:59.660
It has an application, class, a session,
and very basic components.

00:06:59.660 --> 00:07:01.120
It knows about the model.

00:07:01.120 --> 00:07:03.260
All you gave us was the model.

00:07:03.260 --> 00:07:06.700
Let's look at the project in the browser.

00:07:11.120 --> 00:07:14.460
Remember, you haven't done anything other
than prepared your database

00:07:14.550 --> 00:07:15.680
and given us your model.

00:07:15.680 --> 00:07:17.680
What do you get for free?

00:07:17.680 --> 00:07:22.710
You get a full-fledged database
application with a fake login page.

00:07:22.840 --> 00:07:24.400
That's just a starting
point for your app.

00:07:24.400 --> 00:07:25.680
It doesn't have any login logic.

00:07:25.680 --> 00:07:27.240
We're just going to log in right now.

00:07:28.820 --> 00:07:32.460
But the application automatically
knows about every entity in your model,

00:07:32.460 --> 00:07:36.270
about all the attributes in your model,
and creates the most generic

00:07:36.280 --> 00:07:38.290
database access application for it.

00:07:38.360 --> 00:07:42.800
So if we look at the pop-up on the left,
you'll see that this application

00:07:42.800 --> 00:07:47.000
already knows about bugs and
projects and states and users.

00:07:47.000 --> 00:07:51.950
And it gives you the basic pages
you would need in any database

00:07:51.950 --> 00:07:57.760
application to query on them,
to list the results, to edit data.

00:07:58.270 --> 00:08:01.850
So for example,
let's go to the search page for the bug.

00:08:02.290 --> 00:08:05.140
Direct to Web gives us this page.

00:08:05.140 --> 00:08:08.180
It knows about all the fields in
the bug table in our database.

00:08:08.200 --> 00:08:09.880
Let's query on it.

00:08:10.020 --> 00:08:12.700
We won't specify any search
criteria for the demo here.

00:08:12.700 --> 00:08:14.340
We have a list page here.

00:08:14.340 --> 00:08:17.140
We get all the results from the database.

00:08:17.140 --> 00:08:19.790
We can go down to a particular page.

00:08:19.790 --> 00:08:22.000
Click on the first one, please.

00:08:22.050 --> 00:08:30.030
We can look at the edit page to
analyze the attributes of the bug.

00:08:30.740 --> 00:08:33.380
So I'm not going to go
into much detail here.

00:08:33.420 --> 00:08:35.500
The point is, you get this for free.

00:08:35.500 --> 00:08:39.980
So any WebObjects developers out there
should at least use Direct to Web as

00:08:39.990 --> 00:08:42.500
your database administration tool.

00:08:42.500 --> 00:08:44.340
You get this application for free.

00:08:44.340 --> 00:08:45.200
Why not use it?

00:08:45.200 --> 00:08:48.400
Now, of course,
we can't guess everything you're

00:08:48.400 --> 00:08:50.720
going to want in your application.

00:08:50.730 --> 00:08:54.060
So you're going to want to
customize certain things.

00:08:54.060 --> 00:08:59.620
For that, we have an applet written in
Java running alongside your application.

00:09:00.740 --> 00:09:05.980
Ernest is going to maximize now,
which it hung, actually.

00:09:05.980 --> 00:09:08.940
We have to restart the app.

00:09:08.990 --> 00:09:13.380
I promised myself that every
time this thing crashed,

00:09:13.380 --> 00:09:14.500
I was going to give out a T-shirt.

00:09:14.500 --> 00:09:19.510
I hope it doesn't crash more than twice.

00:09:27.200 --> 00:09:30.680
Did you relaunch the applet or the app?

00:09:30.680 --> 00:09:32.300
OK.

00:09:32.370 --> 00:09:34.340
So by now,
you've probably all heard that if

00:09:34.340 --> 00:09:38.710
you've been coming to our talks,
how we're using-- we're not

00:09:38.720 --> 00:09:42.670
using the final bits of the Java,
of the MRJ drop that's going

00:09:42.670 --> 00:09:43.700
to be released tomorrow.

00:09:43.700 --> 00:09:48.570
So the things didn't come
together at the same time.

00:09:49.920 --> 00:09:53.640
So we relaunch-- that's also why we're
launching it from the command line,

00:09:53.640 --> 00:09:59.330
because we didn't have embedded
Java running in the browser.

00:10:00.870 --> 00:10:06.180
So anyway, we have the applet running
alongside our application,

00:10:06.180 --> 00:10:09.780
which allows certain levels
of basic customization.

00:10:09.880 --> 00:10:12.160
For example,
if we go back to the Edit page,

00:10:12.160 --> 00:10:15.680
you'll see that the title is
at the bottom of the page.

00:10:15.680 --> 00:10:17.300
Let's say we want to rearrange them.

00:10:17.400 --> 00:10:20.690
So we want to rearrange-- think
of the applet sort of as an

00:10:20.690 --> 00:10:24.000
inspector into your application,
and you rearrange the title

00:10:24.000 --> 00:10:25.380
to be the first thing.

00:10:25.380 --> 00:10:28.140
And then you do your project,
and then you put the state of

00:10:28.180 --> 00:10:30.360
the bug as your second thing.

00:10:30.810 --> 00:10:32.340
And here's where the power comes in.

00:10:32.470 --> 00:10:34.970
You save,
and without restarting your application,

00:10:34.990 --> 00:10:37.380
you refresh, and you get the change.

00:10:37.420 --> 00:10:38.580
Okay?

00:10:40.670 --> 00:10:42.940
You can do other kinds of things.

00:10:42.940 --> 00:10:44.840
See the project line and the state line?

00:10:44.840 --> 00:10:46.520
Those are relationships.

00:10:46.520 --> 00:10:49.520
We want to use other kinds of
components to display them.

00:10:49.520 --> 00:10:52.800
We want to use a little browser
to display the available projects

00:10:52.800 --> 00:10:56.840
that the bug can be assigned to,
and a little list of radio buttons

00:10:56.840 --> 00:11:01.420
to display the list of states
that the bug can be assigned to.

00:11:10.800 --> 00:11:10.800
So you have those kinds of components
available to you with Direct to Web.

00:11:10.800 --> 00:11:10.800
Again, he's doing those changes.

00:11:10.800 --> 00:11:10.800
He saves.

00:11:10.800 --> 00:11:10.800
We do a refresh.

00:11:11.320 --> 00:11:13.180
and we see things like that.

00:11:13.280 --> 00:11:17.740
So I'm not going to spend a lot of time,
actually any more time than this,

00:11:17.740 --> 00:11:20.600
explaining all the little things you
can configure with Direct to Web.

00:11:20.600 --> 00:11:22.580
The point is you get an
application for free,

00:11:22.580 --> 00:11:25.320
you gave us your model,
and you can configure it at least at,

00:11:25.440 --> 00:11:27.260
this is the first level
you can configure it at.

00:11:27.600 --> 00:11:29.790
Now let's go to the project.

00:11:30.260 --> 00:11:34.560
Just to briefly show the project,
the point here is all of what

00:11:34.750 --> 00:11:39.700
you just saw on the screen has,
for now, no code in your project.

00:11:39.780 --> 00:11:42.320
We're not a code generation wizard here.

00:11:42.320 --> 00:11:45.520
We didn't just dump out
all these pages for you.

00:11:45.520 --> 00:11:48.710
All of this is being generated
dynamically behind the scenes by

00:11:48.710 --> 00:11:50.640
the Direct to Web infrastructure.

00:11:50.680 --> 00:11:54.680
So there's no code in your
project yet for any of this.

00:11:54.800 --> 00:11:57.680
Now could we go back to the slides,
please?

00:12:04.070 --> 00:12:05.280
Can we go back to the slides?

00:12:05.390 --> 00:12:05.990
Oh, thank you.

00:12:06.000 --> 00:12:10.660
So, let's look at the architecture of
the apps in a little more detail.

00:12:10.660 --> 00:12:15.040
Like I said,
these are basic WebObjects applications.

00:12:15.120 --> 00:12:18.520
These are normal WebObjects
applications using HTML with

00:12:18.520 --> 00:12:19.690
the app server in the back.

00:12:19.760 --> 00:12:23.080
If we look inside,
you probably have your code

00:12:23.080 --> 00:12:26.360
interacting with the EOF framework
and the WebObjects framework.

00:12:26.360 --> 00:12:28.740
You would use EOF to
access your database,

00:12:28.740 --> 00:12:33.380
having given us the definition of
your database through an EO model.

00:12:34.000 --> 00:12:36.680
And you probably defined a
bunch of wall components that

00:12:36.680 --> 00:12:38.180
give the look of your pages.

00:12:38.180 --> 00:12:41.440
So, these are the applications you
should all be familiar with

00:12:41.440 --> 00:12:43.250
being WebObjects developers.

00:12:44.820 --> 00:12:50.110
Direct to Web, abbreviated here as D2W,
is just another framework

00:12:50.400 --> 00:12:53.380
you include in your project,
or another framework already

00:12:53.380 --> 00:12:57.120
included in your project when you
create a Direct to Web project.

00:12:57.200 --> 00:13:00.800
Like you saw,
this framework must have a whole bunch

00:13:01.240 --> 00:13:08.230
of pre-built components to display
lists and edits and queries of the

00:13:08.230 --> 00:13:11.380
entities you have in your database.

00:13:12.580 --> 00:13:16.000
Now, these components are built using
normal WebObjects component.

00:13:16.000 --> 00:13:18.560
There isn't too much trickery here.

00:13:18.670 --> 00:13:22.220
But,
they have to be configured at runtime by

00:13:22.220 --> 00:13:26.000
something which we call the rule system.

00:13:26.430 --> 00:13:29.840
The rule system uses information
from your EO model to find

00:13:29.950 --> 00:13:31.800
out about your entities,
obviously.

00:13:31.800 --> 00:13:33.800
We don't know what they
are until you give us one.

00:13:33.800 --> 00:13:39.760
And also, from another file we introduce,
which has the extension D2W model file.

00:13:39.760 --> 00:13:41.340
For now, I'll call it a rule file.

00:13:41.340 --> 00:13:44.350
Think of it as a text file
with a bunch of rules.

00:13:45.260 --> 00:13:49.400
So, the rule system uses the EO model,
the rule file,

00:13:49.400 --> 00:13:57.800
and then the components to display
and configure the pages at runtime.

00:13:57.800 --> 00:14:01.020
Now, let's talk about the rule
system in more detail.

00:14:02.690 --> 00:14:07.840
The rule system consists of
a set of rules and classes to

00:14:07.840 --> 00:14:09.650
derive values from those rules.

00:14:09.700 --> 00:14:14.240
It answers questions at runtime we
might want to know as developers.

00:14:14.240 --> 00:14:17.460
We might want to know, well,
what background color should I be

00:14:17.630 --> 00:14:19.280
using to display this string?

00:14:19.280 --> 00:14:24.200
How should I display the property name
in case I'm localizing my application?

00:14:24.260 --> 00:14:26.360
Which component should I use now?

00:14:26.360 --> 00:14:30.010
So we use the rule system to get
an answer to all these things.

00:14:30.760 --> 00:14:32.880
How do we interact with the rule system?

00:14:32.880 --> 00:14:36.570
The first thing the rule
system needs to know is where

00:14:36.570 --> 00:14:39.270
our application currently is.

00:14:39.280 --> 00:14:41.340
What is it doing?

00:14:41.340 --> 00:14:43.050
We have to tell it this.

00:14:43.160 --> 00:14:45.960
We have to tell it which
task we're trying to perform,

00:14:45.960 --> 00:14:49.850
which entity we're dealing with,
and more specifically,

00:14:49.850 --> 00:14:53.960
at the entity level, which property or
attribute we're handling.

00:14:53.960 --> 00:14:57.510
So that's what the rule
system asks from us.

00:14:57.560 --> 00:14:59.210
Tell us where you are.

00:15:01.300 --> 00:15:04.120
Once you've, I'm sorry,
I forgot something in this slide.

00:15:04.120 --> 00:15:07.750
We tell the rule system this
something using an instance of a

00:15:07.810 --> 00:15:09.800
class which we call the D2W context.

00:15:09.800 --> 00:15:13.270
For now, think of it as nothing more
than a dictionary of key value

00:15:13.420 --> 00:15:16.760
pairs where you tell it how,
where your application is.

00:15:18.830 --> 00:15:22.230
Once you've initialized one of these
contexts and you've told the rule system,

00:15:22.230 --> 00:15:26.860
this is where I am,
you can now ask it to derive more values.

00:15:26.920 --> 00:15:30.460
You can now say, okay,
so what is the background color

00:15:30.460 --> 00:15:33.180
I should be using at this point in time?

00:15:33.180 --> 00:15:35.370
What is the display name for property?

00:15:35.380 --> 00:15:40.120
Notice that I've shortened
the full English questions

00:15:40.120 --> 00:15:42.680
into variable names here.

00:15:43.530 --> 00:15:48.200
The context uses the rules,
a process which we call firing,

00:15:48.220 --> 00:15:50.760
to get information back to us.

00:15:50.840 --> 00:15:52.010
Let's give an example.

00:15:52.080 --> 00:15:55.530
Here we have a very simple
rule set with three rules.

00:15:55.580 --> 00:15:59.080
What kind of information
is specified in this rule?

00:15:59.080 --> 00:16:05.170
In the first rule,
we say if the task is edit and the entity

00:16:05.170 --> 00:16:11.310
that we're handling is a bug and somebody
asks us what the page name should be,

00:16:11.400 --> 00:16:13.420
the result should be my edit.

00:16:13.470 --> 00:16:19.790
The second rule says if the property is
name and the entity is user and somebody

00:16:19.790 --> 00:16:23.770
wants to know what the localized name is,
assuming we're localizing to Spanish,

00:16:23.810 --> 00:16:25.000
we return nombre.

00:16:25.000 --> 00:16:29.680
The third one says if we're listing
users and somebody wants to know

00:16:29.680 --> 00:16:32.210
what table color we should be using,
we use red.

00:16:32.220 --> 00:16:37.460
Okay, this is a very simple rule system,
a very simple rule set,

00:16:37.640 --> 00:16:42.220
but it just hopefully you'll
get to see how the rules look.

00:16:44.340 --> 00:16:45.820
How would this be used by a context?

00:16:46.000 --> 00:16:49.060
Let's say we initialize a context
with the following two values.

00:16:49.060 --> 00:16:52.440
We say the entity is user
and the property is name,

00:16:52.440 --> 00:16:55.060
and we want to know what
the localized name is.

00:16:55.060 --> 00:16:58.410
So we initialize a context
and we ask the context,

00:16:58.450 --> 00:17:00.640
now derive this value for me.

00:17:00.640 --> 00:17:04.910
The context goes off and says,
and finds a rule that resolves

00:17:05.320 --> 00:17:08.020
something about the localized name.

00:17:08.020 --> 00:17:11.020
Then it checks on its
left-hand side and says,

00:17:11.020 --> 00:17:16.570
does the context I was given bind in with
the conditions that this rule specifies?

00:17:16.570 --> 00:17:20.520
And it will find it,
and it will return us localized name.

00:17:20.520 --> 00:17:24.520
So from a developer's point of view,
anywhere in our code where we see

00:17:24.520 --> 00:17:27.770
D2W context dot localized name,
that will be resolved

00:17:27.870 --> 00:17:30.840
at runtime to nombre,
assuming we have initialized

00:17:30.840 --> 00:17:32.830
the context to these values.

00:17:32.840 --> 00:17:37.750
Now this is a very simple example,
but the rule system is recursive.

00:17:38.020 --> 00:17:44.240
So the end question you might be
asking might require several other

00:17:44.250 --> 00:17:50.020
intermediate steps for the rule system
to get yet more values to the context.

00:17:50.030 --> 00:17:53.970
So it will ask more questions and
initialize itself with yet more values,

00:17:54.010 --> 00:17:56.970
and then in the end,
it will give you the answer you want.

00:17:57.290 --> 00:18:00.230
So it's recursive.

00:18:00.530 --> 00:18:03.540
Now that I've talked a little
bit about the rule system,

00:18:03.540 --> 00:18:07.390
let me show you, like,
pull the curtain on Direct to Web and

00:18:07.390 --> 00:18:08.780
show you what the essence of this.

00:18:09.050 --> 00:18:12.100
How do all the pages that we
provide for you really work?

00:18:12.180 --> 00:18:17.120
Like I said, we use standard WebObjects
components to build our pages.

00:18:18.540 --> 00:18:21.480
The only difference is that these
components use the rule system to

00:18:21.480 --> 00:18:24.190
configure themselves at runtime.

00:18:24.930 --> 00:18:28.850
This is a normal Web object component
that doesn't use Direct to Web,

00:18:28.850 --> 00:18:30.470
that you should all be familiar with.

00:18:30.510 --> 00:18:33.440
You have an HTML part
and a WAD definition.

00:18:33.440 --> 00:18:37.870
Let's say that you're generating
some sort of edit page.

00:18:37.870 --> 00:18:39.580
So this is your solution.

00:18:39.580 --> 00:18:42.260
So you even hard code
something like name colon,

00:18:42.260 --> 00:18:46.580
and the only runtime information you
want is the actual value of that name.

00:18:46.580 --> 00:18:50.190
So you introduce a Web objects tag,
and then you resolve that tag using

00:18:50.190 --> 00:18:54.140
a woo string messaging the current
object's name attribute or runtime.

00:18:54.140 --> 00:18:57.660
This is normal WebObjects programming.

00:18:58.250 --> 00:19:02.720
The pages we provide for
you look very similar.

00:19:02.720 --> 00:19:06.820
We have HTML and we
have a WAD definition,

00:19:06.960 --> 00:19:09.640
but our pages have to be
more general than yours.

00:19:09.640 --> 00:19:14.360
Because, let me go back one page,
yours says name colon there because

00:19:14.360 --> 00:19:16.490
you know it's your solution.

00:19:16.550 --> 00:19:20.530
We don't know really which attribute
we're displaying until runtime,

00:19:20.660 --> 00:19:23.860
so that has to be another
dynamic thing that we resolve.

00:19:25.040 --> 00:19:29.850
And in our bindings file,
notice the use of D2W context

00:19:29.900 --> 00:19:32.640
dot display name for property.

00:19:32.640 --> 00:19:35.500
So we tie into the rule
system to find out,

00:19:35.600 --> 00:19:39.670
okay, what is the name of the property
I should be displaying now?

00:19:39.670 --> 00:19:41.930
And we do that.

00:19:43.010 --> 00:19:46.980
So components like that is what the
Direct to Web framework provides you.

00:19:46.980 --> 00:19:49.630
Those are called Direct to Web templates.

00:19:49.740 --> 00:19:53.790
And as you saw in the first demo,
we give you some basic things.

00:19:53.990 --> 00:19:55.900
We give you pages to do queries.

00:19:55.980 --> 00:19:59.460
We give you pages to
edit and to do listing.

00:19:59.470 --> 00:20:03.910
These templates automatically configure
themselves to the database model you're

00:20:03.910 --> 00:20:06.300
using in your particular situation.

00:20:06.300 --> 00:20:10.280
And we use the rule system to
get information at runtime.

00:20:10.520 --> 00:20:15.550
Of course, what you're all here for is,
these can be customized.

00:20:16.420 --> 00:20:18.780
How do you customize them?

00:20:18.780 --> 00:20:24.360
You can customize them at the very basic
level like we showed you in the first

00:20:24.460 --> 00:20:29.930
demo by using the Web Assistant applet
running alongside your applet.

00:20:29.970 --> 00:20:32.040
You also have full access to the HTML.

00:20:32.040 --> 00:20:34.330
So that's a very high level.

00:20:34.330 --> 00:20:38.360
You can really just redraw
the HTML as you see fit.

00:20:38.660 --> 00:20:43.070
You also have low level access into
certain components we plug into the page.

00:20:43.080 --> 00:20:46.080
So you might like our HTML,
but you just want to display

00:20:46.080 --> 00:20:47.960
your strings a certain way.

00:20:47.960 --> 00:20:48.750
So you can do that.

00:20:48.750 --> 00:20:50.300
You can plug in your own components.

00:20:50.300 --> 00:20:55.160
So I'm going to show you these
two things in the next demo.

00:20:55.160 --> 00:20:56.690
Do we have the demo machine please?

00:21:01.730 --> 00:21:06.340
So when we last left our
application in the prior demo,

00:21:06.340 --> 00:21:10.430
we had this generic database
access application that had

00:21:10.440 --> 00:21:12.000
list pages and query pages.

00:21:12.000 --> 00:21:14.680
So here's a list page, right?

00:21:14.680 --> 00:21:20.250
Now let's say that we're just picky
developers and we don't want that garbage

00:21:20.250 --> 00:21:27.200
can on the right to show up there and
the edit icon on the left to show up.

00:21:28.070 --> 00:21:29.580
So you just don't want that.

00:21:29.580 --> 00:21:34.270
But then you bring up the web assistant
and you realize that I didn't think

00:21:34.270 --> 00:21:37.810
far enough and I didn't really offer
you a way of getting rid of those

00:21:37.810 --> 00:21:39.240
things using the web assistant.

00:21:39.240 --> 00:21:40.050
No problem.

00:21:40.050 --> 00:21:42.190
You still have access to that page.

00:21:42.190 --> 00:21:47.900
Using the web assistant, you can tell it,
please give me the HTML to this page.

00:21:48.070 --> 00:21:52.180
Copy the HTML of this
page into my project.

00:21:52.180 --> 00:21:55.920
We did this operation before the demo.

00:21:55.920 --> 00:21:57.970
Can you bring up the project?

00:21:58.000 --> 00:22:03.130
Once the HTML is copied
into your project,

00:22:03.850 --> 00:22:06.510
You see, can you point to the list?

00:22:06.570 --> 00:22:07.520
Yeah, there it is.

00:22:07.520 --> 00:22:13.030
So we copied the actual HTML that
Direct to Web uses to generate that

00:22:13.030 --> 00:22:14.980
page is now copied into your project.

00:22:14.980 --> 00:22:20.010
We can open that HTML in
Web Objects Builder.

00:22:21.500 --> 00:22:24.580
And you have full access
to it to do edits.

00:22:24.580 --> 00:22:27.090
Now there's something
special about this HTML.

00:22:27.090 --> 00:22:30.080
Remember, this is the HTML that
comes from Direct to Web.

00:22:30.080 --> 00:22:35.950
It's HTML that should be able
to adapt to all kinds of models.

00:22:35.960 --> 00:22:40.940
So you won't find any references to
your particular project in this HTML.

00:22:40.940 --> 00:22:44.600
There'll be a bunch of repetitions
and conditionals and no reference

00:22:44.600 --> 00:22:48.540
to your specific model because all
of that is resolved until runtime.

00:22:49.400 --> 00:22:53.320
So if we look at the actual
raw HTML and the bindings,

00:22:53.320 --> 00:22:55.770
let's look at the bindings there.

00:22:55.770 --> 00:22:59.620
And let's say, for example,
the attributes order there.

00:22:59.640 --> 00:23:02.990
If you look at the line that
resolved the display key,

00:23:02.990 --> 00:23:06.070
you will see a reference
to the D2W context.

00:23:06.070 --> 00:23:14.960
So this is the HTML Direct to
Web uses to draw your page at runtime.

00:23:15.190 --> 00:23:17.960
So it's a very generic form of HTML.

00:23:18.000 --> 00:23:20.670
You will see why that's
important in a minute.

00:23:20.770 --> 00:23:23.270
For now,
can we go back to the page briefly,

00:23:23.270 --> 00:23:28.470
Ernest, to show what we wanted to
do in Internet Explorer?

00:23:28.790 --> 00:23:33.210
Remember, we wanted to get rid of the
trash can and the edit icon.

00:23:33.370 --> 00:23:36.040
So first, let's show that we're
actually editing that page.

00:23:36.040 --> 00:23:38.840
Ernest is going to type
a little message saying,

00:23:38.890 --> 00:23:40.920
this is my HTML.

00:23:46.760 --> 00:23:50.900
We make the font a little
bigger so that you can all see.

00:23:50.950 --> 00:23:55.680
We save and then we-- I precompiled
the app before this part of the demo,

00:23:55.780 --> 00:23:59.690
so we were able to refresh the page.

00:24:00.270 --> 00:24:03.090
And just so you know,
we are accessing this

00:24:03.090 --> 00:24:04.610
version of the HTML.

00:24:04.630 --> 00:24:07.200
So now we go back and do the
actual changes we wanted to do.

00:24:07.200 --> 00:24:12.200
We wanted to get rid of the trash can,
so we look for the trash can

00:24:12.200 --> 00:24:13.180
and we just get rid of it.

00:24:13.230 --> 00:24:15.200
We don't want it in our application.

00:24:15.200 --> 00:24:22.980
And we want to change the edit icon from
being an image to a hyperlink with text.

00:24:23.740 --> 00:24:26.020
So this is not a session
in graphic design,

00:24:26.020 --> 00:24:29.310
so I'm not going to impress you
with any fancy HTML editing.

00:24:29.320 --> 00:24:34.300
I just want to show you as developers
that you have access to that HTML.

00:24:34.300 --> 00:24:37.160
And you refresh,
and those are the changes, right?

00:24:37.160 --> 00:24:39.030
So you might say, well, so what?

00:24:39.070 --> 00:24:41.630
That's what WebObjects does.

00:24:41.680 --> 00:24:46.430
Yes, it's what WebObjects does,
but can you bring up the Web Assistant?

00:24:46.560 --> 00:24:49.680
Remember that this is
still a Direct to Web page.

00:24:50.840 --> 00:24:53.760
So on one hand,
you have access to the HTML,

00:24:53.760 --> 00:24:56.040
and you do your layout as you please.

00:24:56.040 --> 00:24:59.630
But on the other hand,
look at the title property over...

00:24:59.860 --> 00:25:01.880
Can you make the browser...

00:25:03.300 --> 00:25:04.660
Don't refresh yet.

00:25:04.930 --> 00:25:05.100
Yeah.

00:25:05.100 --> 00:25:06.390
See the title being there on the right?

00:25:06.430 --> 00:25:10.300
Let's say that we want to move
the title over to the left and

00:25:10.460 --> 00:25:16.280
remove the creation date row,
column, I'm sorry.

00:25:16.280 --> 00:25:19.760
So we can still use the
Web Assistant for that.

00:25:19.760 --> 00:25:22.620
We do save, and then we hit refresh.

00:25:24.460 --> 00:25:30.770
So you don't lose the ability to
the dynamic aspects of Direct to

00:25:30.810 --> 00:25:32.180
Web by editing the HTML.

00:25:32.180 --> 00:25:35.460
Those that have used Direct to
Web in the past and are

00:25:35.460 --> 00:25:38.320
familiar with freezing pages,
this is not freezing pages,

00:25:38.320 --> 00:25:40.000
this is generating templates.

00:25:40.000 --> 00:25:44.060
In prior versions of Direct to Web,
you would freeze your page and you have

00:25:44.060 --> 00:25:47.100
full access to the Java and the HTML,
but then you would lose this.

00:25:47.200 --> 00:25:49.440
So that's the high level.

00:25:49.440 --> 00:25:50.680
You're changing the HTML.

00:25:50.680 --> 00:25:52.830
Now let's go a little low level.

00:25:53.830 --> 00:25:56.090
Do you see where it says
description text and resolution?

00:25:56.190 --> 00:25:58.380
Those strings are kind of long.

00:25:58.380 --> 00:26:03.160
Let's say that you as developers
have written a little component

00:26:03.160 --> 00:26:06.660
that shortens strings,
that only displays the first

00:26:06.660 --> 00:26:09.040
20 characters of your string.

00:26:09.040 --> 00:26:11.160
It could be anything else,
but for demo purposes,

00:26:11.160 --> 00:26:13.600
you have a little component
that shortens strings.

00:26:13.600 --> 00:26:16.340
We have such a thing in our project.

00:26:16.340 --> 00:26:17.840
Can you bring up the project, please?

00:26:17.840 --> 00:26:19.900
Show the component.

00:26:19.900 --> 00:26:22.080
Short string.

00:26:24.000 --> 00:26:30.470
So just a normal WebObjects component
that takes an object and a key binding

00:26:31.000 --> 00:26:35.280
and if it receives a string value
that is greater than 20 characters,

00:26:35.320 --> 00:26:36.680
it just truncates it.

00:26:36.910 --> 00:26:38.860
Nothing special here.

00:26:39.020 --> 00:26:43.100
What's special is that this could
be any one of your components.

00:26:43.100 --> 00:26:48.210
Now go back to the page and the browser.

00:26:48.610 --> 00:26:50.120
Now, look at this.

00:26:50.170 --> 00:26:51.340
We don't stop the app.

00:26:51.430 --> 00:26:52.760
We're still running.

00:26:52.760 --> 00:26:55.620
We go over into the
Web Assistant and we say,

00:26:55.660 --> 00:26:59.340
for the description,
we want to use a custom component

00:26:59.340 --> 00:27:04.430
whose name is short string.

00:27:05.170 --> 00:27:08.030
So we type in short string there,
and we're going to do the same

00:27:08.030 --> 00:27:10.620
thing for the resolution text.

00:27:10.690 --> 00:27:14.710
So without restarting our application,
Direct to Web is going to

00:27:14.710 --> 00:27:19.880
know that in that page,
it should plug in our component.

00:27:21.160 --> 00:27:24.480
So he's doing it for the second one.

00:27:24.480 --> 00:27:28.160
And remember that our component
had an object and a key binding.

00:27:28.200 --> 00:27:30.200
So that's how we
instantiate your component,

00:27:30.200 --> 00:27:33.060
and we give you the object
we want you to display,

00:27:33.060 --> 00:27:34.600
and it's up to you.

00:27:34.640 --> 00:27:39.180
So now, remember, no restarting the app,
just refreshing your browser.

00:27:39.180 --> 00:27:41.380
There's our component.

00:27:45.200 --> 00:27:46.200
Okay?

00:27:46.200 --> 00:27:50.180
Very simple, I mean,
non-flashy stuff in terms of

00:27:50.190 --> 00:27:53.280
the HTML we're showing you,
but I hope that as developers you're

00:27:53.350 --> 00:27:58.140
seeing the hooks of where you can plug
in your own code and your own HTML.

00:27:58.140 --> 00:28:05.820
Now, can you bring up the rule
editor for the model?

00:28:08.040 --> 00:28:13.430
Bring up the project first
and show the resources bucket.

00:28:13.730 --> 00:28:17.020
I'm showing you all this
without generating much code,

00:28:17.170 --> 00:28:17.600
right?

00:28:17.690 --> 00:28:23.060
So where's all this information about
what I should be displaying being stored?

00:28:23.080 --> 00:28:26.410
As we do all these configurations,
we're creating rules

00:28:26.760 --> 00:28:28.660
specific to our application.

00:28:28.710 --> 00:28:34.660
Those rules are being stored in a
file called the user.d2wmodel file.

00:28:34.740 --> 00:28:37.790
To look at the file,
to look at that file, you can use a tool

00:28:37.850 --> 00:28:38.870
called the rule editor.

00:28:38.980 --> 00:28:42.050
Can you bring up rule editor, please?

00:28:42.520 --> 00:28:47.160
So all those configurations we're
doing using the Web Assistant are

00:28:47.160 --> 00:28:53.400
stored as rules in this file,
which we use rule editor to edit.

00:28:53.400 --> 00:28:57.090
So that's where the magic is going,
because I haven't been showing you code.

00:28:57.140 --> 00:28:58.600
I've shown you HTML, but not code.

00:28:58.600 --> 00:29:00.720
But you're noticing
that I'm changing stuff,

00:29:00.720 --> 00:29:02.560
so where is that information going?

00:29:02.560 --> 00:29:02.930
Here.

00:29:02.930 --> 00:29:04.140
That's where it is.

00:29:04.240 --> 00:29:06.840
So that's the end of our second demo.

00:29:09.050 --> 00:29:12.280
Can we go back to the slides, please?

00:29:12.280 --> 00:29:13.120
Oh, they're there.

00:29:13.210 --> 00:29:13.760
Sorry.

00:29:13.790 --> 00:29:17.060
This monitor still shows the other one.

00:29:18.780 --> 00:29:22.550
So I've given you an overview
of the architecture of Direct to

00:29:22.550 --> 00:29:25.940
Web and how the rule system works.

00:29:25.950 --> 00:29:29.550
Now let's focus a little
more on you as developers.

00:29:29.590 --> 00:29:33.680
Where-- let's review some of the
stuff I show you on the screen.

00:29:33.680 --> 00:29:37.810
And where, as developers,
if you're working on a

00:29:37.830 --> 00:29:41.660
Direct to Web application,
where do you think about plugging

00:29:41.660 --> 00:29:44.680
in your own HTML or your own code?

00:29:44.960 --> 00:29:48.260
Well, first of all,
don't forget that a lot of the things in

00:29:48.340 --> 00:29:50.270
Direct to Web are now driven by rules.

00:29:50.360 --> 00:29:54.680
So you're all used to writing
Java and changing component

00:29:54.680 --> 00:29:56.520
definitions in Web Objects Builder.

00:29:56.520 --> 00:30:00.870
Now create another space in
your brain to think about rules.

00:30:00.880 --> 00:30:04.160
You know, maybe I could do some,
maybe I don't need to write Java.

00:30:04.160 --> 00:30:07.180
Maybe I don't need to change HTML here.

00:30:07.180 --> 00:30:08.650
Maybe I could change this with rules.

00:30:09.140 --> 00:30:12.610
So start thinking in terms of,
can I just, is it,

00:30:13.000 --> 00:30:15.610
maybe it's simple enough for
me to add a certain rule and my

00:30:15.610 --> 00:30:17.360
application could be reconfigured.

00:30:17.360 --> 00:30:19.760
So don't limit yourself to Java.

00:30:22.070 --> 00:30:26.300
A little bit unrelated to rules,
but another point where you can plug

00:30:26.300 --> 00:30:29.290
in your own code is custom components.

00:30:29.410 --> 00:30:35.000
Custom components is what I used on
the second demo to shorten the string.

00:30:35.000 --> 00:30:39.700
So you probably have your own components
to display integers or whatever

00:30:39.700 --> 00:30:42.000
you're displaying your own way.

00:30:42.000 --> 00:30:44.000
You use a custom component for that.

00:30:44.000 --> 00:30:45.990
I'll give a little more detail.

00:30:46.540 --> 00:30:50.880
You also have Java API to
invoke Direct to Web pages.

00:30:50.880 --> 00:30:55.150
You might have a WebObjects application
that does not use Direct to Web,

00:30:55.170 --> 00:30:57.770
or at least in some parts it
doesn't use Direct to Web,

00:30:57.960 --> 00:31:01.190
and then the user clicks somewhere
and they want to jump into a

00:31:01.190 --> 00:31:02.870
dynamic Direct to Web page.

00:31:03.040 --> 00:31:05.530
There's Java API to do that.

00:31:06.260 --> 00:31:08.040
We also have named configurations.

00:31:08.300 --> 00:31:12.460
You might want to reuse a certain page,
such as query,

00:31:12.460 --> 00:31:17.400
in a slightly different style without
really rewriting your whole page.

00:31:17.430 --> 00:31:23.200
You can define two versions of the
page and use it slightly differently.

00:31:23.250 --> 00:31:25.800
I'm going to go into detail
into each one of these.

00:31:25.850 --> 00:31:31.150
And you also have Java API to
plug into the rule system.

00:31:32.960 --> 00:31:35.000
Rules.

00:31:35.110 --> 00:31:39.590
Like I said, all of the configuration
information we're doing with

00:31:39.660 --> 00:31:43.070
rules is stored in two files.

00:31:43.160 --> 00:31:45.480
The configuration you're
doing with the Web Assistant,

00:31:45.590 --> 00:31:48.400
which is the web applet running
alongside your application,

00:31:48.470 --> 00:31:51.710
is stored in the file
called user.d2wmodel.

00:31:51.710 --> 00:31:55.050
So anytime you save your
changes in the Web Assistant,

00:31:55.100 --> 00:31:56.550
they go there.

00:31:56.660 --> 00:31:59.720
You probably don't want to put
your own rules there because the

00:31:59.760 --> 00:32:02.070
Web Assistant is going to override them.

00:32:02.230 --> 00:32:05.240
Unless you're not using the
Web Assistant and then you're never

00:32:05.240 --> 00:32:06.820
saving out to that file again.

00:32:06.820 --> 00:32:11.170
But if you're using the Web Assistant,
you probably want to put your

00:32:11.260 --> 00:32:16.520
rules into the second file,
which is called d2w.d2wmodelfile.

00:32:16.520 --> 00:32:19.860
You just add a text file to your project
and you start adding rules there.

00:32:19.860 --> 00:32:21.180
That's the second file.

00:32:24.300 --> 00:32:27.680
Also remember that your entry
point to rules is this thing

00:32:27.680 --> 00:32:29.240
we call the D2W context.

00:32:29.240 --> 00:32:32.890
So we use key value coding and
you do somewhere in your code

00:32:33.020 --> 00:32:37.380
D2W context dot and then the thing
you want to resolve to and it will be

00:32:37.380 --> 00:32:39.200
resolved to you by the rule system.

00:32:42.450 --> 00:32:44.680
Now let's look at custom components.

00:32:44.680 --> 00:32:50.340
For custom components to work,
you need to implement two bindings,

00:32:50.340 --> 00:32:53.680
or you need to be aware that Direct to
Web is going to give you two bindings.

00:32:53.740 --> 00:32:55.180
Remember,
custom components are that thing

00:32:55.290 --> 00:32:56.520
that we're shortening the string.

00:32:56.520 --> 00:33:00.090
So we're going to give you the object
that we're working with and the key

00:33:00.090 --> 00:33:02.120
that we're currently displaying.

00:33:02.800 --> 00:33:06.470
So having that information,
you do whatever you want.

00:33:06.660 --> 00:33:11.770
You display that value as you want,
using the HTML and the logic you want.

00:33:11.790 --> 00:33:16.360
So you probably will end up using
key value coding somewhere in

00:33:16.360 --> 00:33:18.910
your component in this manner.

00:33:18.920 --> 00:33:22.490
You've seen our key value coding
utilities in another session.

00:33:22.490 --> 00:33:26.770
So somewhere in your custom component,
you're probably going to have a call,

00:33:26.770 --> 00:33:28.230
a line that does this.

00:33:28.290 --> 00:33:30.740
It says, okay,
get me the actual value from

00:33:30.740 --> 00:33:32.780
the object that you passed me.

00:33:32.800 --> 00:33:36.020
And then you have the value and then
you do whatever you want with it.

00:33:37.540 --> 00:33:40.440
And as you saw,
once you have your custom component,

00:33:40.440 --> 00:33:46.960
you can plug it into your application,
either using the Web Assistant or writing

00:33:47.030 --> 00:33:48.780
your own couple of rules to plug it in.

00:33:48.780 --> 00:33:50.520
You only need to do two rules.

00:33:50.640 --> 00:33:54.810
One saying, for this property,
please use the custom component,

00:33:54.810 --> 00:33:58.330
and the custom component
name you should use is this.

00:34:01.380 --> 00:34:06.990
Direct to Web API, Java API to plug into
Direct to Web pages.

00:34:07.940 --> 00:34:11.540
You can instantiate and
configure Direct to Web pages

00:34:11.630 --> 00:34:13.160
from your code using Java.

00:34:15.320 --> 00:34:19.080
Now, you don't use the normal WebObjects
mechanism to call up a page,

00:34:19.080 --> 00:34:22.350
to get to a page that uses Direct to Web.

00:34:22.350 --> 00:34:28.110
Instead, your entry point is the
main class of Direct to Web,

00:34:28.110 --> 00:34:31.280
D2W,
and a static method on it called factory.

00:34:31.280 --> 00:34:34.680
So that's sort of where you,
instead of messaging wo

00:34:34.680 --> 00:34:38.860
application dot application,
your entry point for these kinds

00:34:38.940 --> 00:34:41.220
of pages is D2W dot factory.

00:34:41.960 --> 00:34:46.480
Now that class implements methods
that return all the pages,

00:34:46.610 --> 00:34:50.840
all the kinds of pages that
Direct to Web provides for you.

00:34:50.840 --> 00:34:55.140
So, there are going to be methods
in that class that return the

00:34:55.260 --> 00:34:59.240
edit page for a certain entity,
the list page for a certain entity,

00:34:59.240 --> 00:35:02.270
the query page for a certain entity.

00:35:02.690 --> 00:35:07.880
Once you get back that page,
the object you got back compiles

00:35:07.880 --> 00:35:12.140
to an interface that we define
so that you can configure it.

00:35:12.240 --> 00:35:17.480
So within the Direct to Web framework,
there are certain interface definitions

00:35:17.480 --> 00:35:20.700
such as edit page interface,
list page interface,

00:35:20.700 --> 00:35:22.880
and query page interface,
just to name some,

00:35:22.880 --> 00:35:27.670
which you use to message this page
which you just got back to configure it.

00:35:27.740 --> 00:35:29.960
Let me give you a more concrete example.

00:35:31.870 --> 00:35:35.090
Let's say that you have a
WebObjects application where

00:35:35.090 --> 00:35:39.500
you're doing your normal stuff and
you want to implement a method that

00:35:39.500 --> 00:35:41.700
returns a Direct to Web list page.

00:35:41.700 --> 00:35:45.680
You already know the data source
where the data is coming from.

00:35:45.770 --> 00:35:50.700
You just want to show that data up on the
screen using a Direct to Web list page.

00:35:50.700 --> 00:35:55.690
So your method would be called something
like Return a List Page method.

00:35:56.600 --> 00:35:59.470
You know that what you're
returning is going to implement

00:35:59.840 --> 00:36:03.640
the list page interface,
because you're going to be using

00:36:03.640 --> 00:36:05.050
Direct to Web to get to this page.

00:36:06.700 --> 00:36:11.760
You use the factory to ask for
the list page for the entity.

00:36:11.770 --> 00:36:12.780
I don't know what entity.

00:36:12.850 --> 00:36:15.770
Notice that E, the entity,
is one of the attributes

00:36:15.870 --> 00:36:17.000
you pass to this method.

00:36:17.000 --> 00:36:18.160
That's up to you, right?

00:36:18.160 --> 00:36:20.840
So at this point you say, D2WFactory.

00:36:20.840 --> 00:36:23.960
give me the list page for this entity.

00:36:23.960 --> 00:36:28.380
And we ask for a session to
do certain initializations.

00:36:29.480 --> 00:36:32.600
So we give you the list page,
but that's just the list page

00:36:32.600 --> 00:36:36.100
without knowing where it's getting
its data from or where you want us

00:36:36.100 --> 00:36:37.530
to go after you're done with it.

00:36:37.600 --> 00:36:42.200
So you use the methods implemented
in the list page interface to

00:36:42.210 --> 00:36:44.680
kind of initialize this page.

00:36:44.680 --> 00:36:46.600
So you set the data source.

00:36:46.600 --> 00:36:50.400
I'm not showing where the
data source comes from here.

00:36:50.400 --> 00:36:51.840
That's your responsibility.

00:36:51.840 --> 00:36:53.460
The point is that you tell us.

00:36:53.600 --> 00:36:59.360
And you also tell us what the next page
you want to be after you press return.

00:36:59.480 --> 00:37:01.380
the list page.

00:37:01.720 --> 00:37:06.710
So this is how you would call a list
page using the Direct to Web API or

00:37:06.710 --> 00:37:08.630
any other Direct to Web page.

00:37:08.660 --> 00:37:11.900
Named configurations.

00:37:12.500 --> 00:37:15.970
Let's say that in the
application we have,

00:37:15.970 --> 00:37:19.160
remember that it's a bug tracking system.

00:37:19.160 --> 00:37:21.910
We have ways of querying
on bugs and on users,

00:37:21.910 --> 00:37:22.360
etc.

00:37:22.360 --> 00:37:26.340
Let's say that for the query page,
we have two levels of

00:37:26.360 --> 00:37:28.200
access for our users.

00:37:28.200 --> 00:37:31.420
We have simple users that
only see a limited number

00:37:31.420 --> 00:37:33.400
of fields they can query on.

00:37:33.400 --> 00:37:40.620
And we have advanced users that see a
much bigger set of fields to query on.

00:37:41.510 --> 00:37:43.040
But we want to use the same page.

00:37:43.140 --> 00:37:46.170
So we define what we call
this a named configuration,

00:37:46.170 --> 00:37:48.430
and we give it whatever name we want.

00:37:48.490 --> 00:37:50.970
In this case,
we're going to call it our simple

00:37:51.020 --> 00:37:55.180
query named configuration and our
advanced query named configuration.

00:37:55.180 --> 00:37:58.990
Once you have these two configurations,
and I'm going to demo this,

00:37:58.990 --> 00:38:00.960
I'm just showing you the slide.

00:38:00.960 --> 00:38:06.780
You call up the named configuration using
the method page for configuration named,

00:38:06.780 --> 00:38:10.250
which behaves similarly to the
other methods I have shown you.

00:38:14.290 --> 00:38:20.300
The last thing I want to talk
about is how to integrate your

00:38:20.300 --> 00:38:22.540
own code into the rule system.

00:38:22.540 --> 00:38:27.380
Up to now, the rules we've shown you are
these kinds of very simple rules

00:38:27.380 --> 00:38:32.690
that have a condition on the
left and I'm sorry I skipped one.

00:38:36.000 --> 00:38:38.400
This is, this is, the slide is wrong.

00:38:38.400 --> 00:38:42.900
Instead of localized property name,
it should have been a constant value.

00:38:42.900 --> 00:38:44.900
That was the first part of the animation.

00:38:44.900 --> 00:38:50.890
So up to now we had rules that
had constant names that they,

00:38:50.890 --> 00:38:53.700
the things they resolved
to were constant,

00:38:53.700 --> 00:38:54.400
specified as strings.

00:38:54.400 --> 00:38:57.720
Remember where it said bug
title and things like that.

00:38:57.850 --> 00:39:03.220
But wouldn't it be nice if when you're
resolving the value of this rule,

00:39:03.240 --> 00:39:04.970
you're actually calling
one of your methods?

00:39:05.000 --> 00:39:07.720
For example, localized property value.

00:39:07.720 --> 00:39:08.800
Let's say that's your method.

00:39:08.800 --> 00:39:12.600
You want to define in code how
you're going to resolve this rule.

00:39:12.600 --> 00:39:13.420
You can.

00:39:15.720 --> 00:39:19.360
You can implement that method in
a subclass of default assignment,

00:39:19.360 --> 00:39:24.110
which is also one of the classes
provided in Direct to Web.

00:39:25.790 --> 00:39:28.740
Here's an example of how
you would implement that.

00:39:28.760 --> 00:39:31.210
You have a subclass here
called MyAssignment,

00:39:31.270 --> 00:39:33.700
which is a subclass
of default assignment.

00:39:33.710 --> 00:39:35.730
It implements

00:39:36.190 --> 00:39:38.860
The method,
you can name it however you want.

00:39:38.860 --> 00:39:42.110
In this case,
it's called localized property name.

00:39:42.540 --> 00:39:44.830
Within the method,
because you have a subclass

00:39:44.890 --> 00:39:47.320
of default assignment,
you have access to the context.

00:39:47.320 --> 00:39:50.600
Remember, the context is your entry
point to the rule system.

00:39:50.600 --> 00:39:53.050
So once you're in the context,
you can ask it, hey,

00:39:53.080 --> 00:39:55.520
what's the property I'm
working on right now?

00:39:55.520 --> 00:39:57.570
What's the session, by the way?

00:39:57.570 --> 00:39:59.940
What is the session I'm dealing with?

00:40:00.000 --> 00:40:02.340
And then you do whatever
you want with it.

00:40:02.340 --> 00:40:03.160
Right?

00:40:03.160 --> 00:40:05.450
I'm not showing you how
you're localizing here.

00:40:05.450 --> 00:40:07.660
It's just the point is
that's where you do it.

00:40:07.660 --> 00:40:10.480
That's the entry point for
you to execute your own code.

00:40:10.480 --> 00:40:12.320
You do whatever you want.

00:40:12.510 --> 00:40:14.390
And then you return a value to us.

00:40:14.390 --> 00:40:18.380
Let me show you that in the application.

00:40:18.460 --> 00:40:20.250
Do we have the demo machine, please?

00:40:25.760 --> 00:40:27.740
So this is our application.

00:40:27.740 --> 00:40:29.170
Let's review where we are now.

00:40:29.170 --> 00:40:33.610
Ernest just logged into our application,
and you'll notice that the first

00:40:33.610 --> 00:40:37.390
page that came up was something
which we call the query all page.

00:40:37.660 --> 00:40:42.440
This is the page from which you can
query on any entity in your database.

00:40:42.440 --> 00:40:43.640
We don't like that.

00:40:43.910 --> 00:40:45.640
That's what I give you by default.

00:40:45.640 --> 00:40:46.630
You don't like it.

00:40:46.900 --> 00:40:48.540
We're going to change that.

00:40:49.200 --> 00:40:52.920
What we want to happen when a
user logs in is that instead

00:40:53.090 --> 00:40:58.350
of seeing the query all page,
they jump right into the bug query page.

00:40:58.350 --> 00:41:02.420
We want to pull them straight into
the page where they query on a certain

00:41:02.420 --> 00:41:04.860
bug because they're looking for bugs.

00:41:06.760 --> 00:41:10.000
But not only that,
we want to have that page be

00:41:10.000 --> 00:41:12.580
different depending on the
kind of user that logged in.

00:41:12.580 --> 00:41:17.000
If a normal user logged in,
we only want them to query

00:41:17.000 --> 00:41:18.200
on two or three attributes.

00:41:18.200 --> 00:41:21.570
If an advanced user logged in,
an engineer fixing the bug,

00:41:21.570 --> 00:41:24.940
we want them to be able to
find bugs and more attributes.

00:41:24.940 --> 00:41:25.990
How do we do that?

00:41:25.990 --> 00:41:27.740
We use a named configuration.

00:41:28.540 --> 00:41:30.450
How do we define the named configuration?

00:41:30.550 --> 00:41:31.380
With rules.

00:41:31.380 --> 00:41:36.780
Let's bring up the rule editor.

00:41:42.420 --> 00:41:46.190
So here we have the three
rules that define our simple

00:41:46.190 --> 00:41:47.930
query named configuration.

00:41:47.970 --> 00:41:49.620
Remember, the name is arbitrary.

00:41:49.620 --> 00:41:52.470
You can pick whatever you want.

00:41:52.930 --> 00:41:56.840
When you define a named configuration,
the rule system needs to know, okay,

00:41:56.840 --> 00:42:01.410
which task and which entity am I dealing
with when you ask for this configuration?

00:42:01.480 --> 00:42:03.740
So that's what the two
bottom rules are for.

00:42:03.740 --> 00:42:07.560
It says, if the named configuration
is simple query,

00:42:07.560 --> 00:42:09.940
the entity is bug,
that's what we're doing,

00:42:09.940 --> 00:42:12.680
and what we're doing with
the bug is querying on it.

00:42:12.700 --> 00:42:14.640
So those are the two things we do.

00:42:16.010 --> 00:42:20.740
The interesting rule is the first one.

00:42:20.740 --> 00:42:22.810
Can you click on that first one?

00:42:23.100 --> 00:42:25.280
The first rule says,
if we're in the simple

00:42:25.400 --> 00:42:29.610
query named configuration,
and somebody asks us what the

00:42:29.760 --> 00:42:33.150
display property keys are,
this is just an internal

00:42:33.150 --> 00:42:36.410
Direct to Web key,
if somebody asks us which

00:42:36.680 --> 00:42:40.360
properties of this entity
should I display in this case,

00:42:40.360 --> 00:42:46.270
we say, oh, for simple query,
we only want title, description, project,

00:42:46.450 --> 00:42:47.980
and creation date.

00:42:49.630 --> 00:42:52.080
For advanced query,
let's go now to the rules that

00:42:52.100 --> 00:42:53.660
define the advanced query.

00:42:57.050 --> 00:42:58.720
We're using rule editor.

00:42:58.720 --> 00:43:02.320
We have more rules defined in this file,
but we're filtering to show you only

00:43:02.320 --> 00:43:04.590
the ones that are relevant to the demo.

00:43:04.670 --> 00:43:09.750
So for the advanced query, again, we say,
the advanced query is

00:43:09.970 --> 00:43:14.210
something that deals with bugs,
and we query on bugs.

00:43:14.220 --> 00:43:17.960
And when you ask us what
properties you want to display,

00:43:18.260 --> 00:43:25.030
we have a much bigger set of-- a
full set of all the properties.

00:43:25.910 --> 00:43:27.880
So that's how we define
the configuration,

00:43:27.880 --> 00:43:28.680
with three rules.

00:43:28.770 --> 00:43:30.560
We're not writing code.

00:43:30.560 --> 00:43:33.140
We will write a couple
lines of code right now,

00:43:33.140 --> 00:43:36.130
but we're not rewriting your page.

00:43:36.200 --> 00:43:39.540
So how do we plug in these
rules into your page?

00:43:39.620 --> 00:43:42.700
Do you remember that when
I gave the first demo,

00:43:42.840 --> 00:43:46.160
I said that the login
page didn't do anything?

00:43:46.160 --> 00:43:49.100
It was just no logic.

00:43:49.100 --> 00:43:51.320
You just click on the login button.

00:43:51.580 --> 00:43:57.510
We're going to hook into that
page so that when the user

00:43:57.730 --> 00:44:00.480
clicks on the login button,

00:44:00.800 --> 00:44:02.740
By default,
we take you to the Query All page.

00:44:02.790 --> 00:44:06.140
We don't want you-- we don't want
to take you to the Query All page.

00:44:06.250 --> 00:44:09.480
We want to check which user logged in.

00:44:09.660 --> 00:44:13.940
If a normal user logged in,
for demo purposes,

00:44:13.950 --> 00:44:17.800
normal users are going to have
the login username just user,

00:44:17.810 --> 00:44:21.740
and advanced users are going to
have the login username admin.

00:44:21.850 --> 00:44:25.860
So can you go scroll down to the method?

00:44:25.970 --> 00:44:29.560
So default page is the method
that is executed when you

00:44:29.560 --> 00:44:32.180
log into the application.

00:44:32.180 --> 00:44:34.080
We have some very simple logic here.

00:44:34.210 --> 00:44:37.560
Can you highlight the if statement?

00:44:37.560 --> 00:44:41.030
We initialize with the session
where you-- with the kind

00:44:41.030 --> 00:44:42.860
of user that we're using.

00:44:42.860 --> 00:44:44.880
And we just do a very simple check.

00:44:44.880 --> 00:44:48.680
You know, if the person that's
logged in is called user,

00:44:48.680 --> 00:44:53.300
let's call up the simple
query name configuration.

00:44:53.300 --> 00:44:55.820
If the person that
logged in is named admin,

00:44:55.820 --> 00:44:57.410
let's call up the advanced query.

00:44:57.850 --> 00:44:58.880
Query name page.

00:44:58.880 --> 00:45:00.980
If the person that logged
in is none of those,

00:45:00.980 --> 00:45:04.040
let's bring up the default
page that should show up in

00:45:04.040 --> 00:45:06.440
any direct web application.

00:45:06.450 --> 00:45:08.730
We run the application.

00:45:09.650 --> 00:45:11.710
We log out.

00:45:11.760 --> 00:45:13.400
Log in as nobody right now.

00:45:13.400 --> 00:45:14.540
So we log in as nobody.

00:45:14.540 --> 00:45:15.680
There's the query all page.

00:45:15.680 --> 00:45:16.750
We log out.

00:45:16.750 --> 00:45:19.930
We log in as user.

00:45:23.330 --> 00:45:25.620
There's our simple query page.

00:45:25.630 --> 00:45:28.200
We log out.

00:45:28.200 --> 00:45:30.880
We log in as admin.

00:45:30.880 --> 00:45:36.610
There's our advanced query page.

00:45:41.650 --> 00:45:44.100
Again,
there's very little code to do all this.

00:45:44.100 --> 00:45:49.080
You're defining a lot of this in rules,
which are stored in a text file.

00:45:49.080 --> 00:45:54.280
And the code you saw there was really
just to plug in the page that we

00:45:54.290 --> 00:45:58.410
wanted to see right after we logged in,
and to call up the named configuration.

00:45:58.480 --> 00:46:00.350
Again, where is this query page?

00:46:00.400 --> 00:46:01.870
You haven't even seen it.

00:46:01.870 --> 00:46:05.640
It's out in the Direct to Web framework,
and it's working for you.

00:46:07.130 --> 00:46:12.750
The last thing I want to
show you in the demo is,

00:46:12.750 --> 00:46:12.750
can you...

00:46:13.030 --> 00:46:16.120
Let's show the query page
again in the browser.

00:46:16.120 --> 00:46:17.870
So here's the query page.

00:46:17.870 --> 00:46:23.060
Notice how the names of the
properties on the left are in English.

00:46:23.060 --> 00:46:27.300
It says title, description, project,
state, creator, creation date, assignee,

00:46:27.360 --> 00:46:28.300
and resolution.

00:46:29.480 --> 00:46:29.850
Okay?

00:46:29.960 --> 00:46:32.760
But not everybody speaks
English in this world.

00:46:32.760 --> 00:46:35.310
We want to localize our application.

00:46:35.380 --> 00:46:40.000
We want to use the rule
system to change those titles

00:46:40.000 --> 00:46:42.980
without writing a lot of code.

00:46:44.340 --> 00:46:49.770
Now, the Direct to Web,
when it's displaying this page,

00:46:49.820 --> 00:46:55.360
it's resolving a binding called
display name for property.

00:46:55.360 --> 00:46:59.890
As long as we can hook into that
binding and plug in our own code that

00:46:59.890 --> 00:47:03.320
localizes the name we want to display,
we're okay,

00:47:03.320 --> 00:47:05.160
which is what we're going to do now.

00:47:06.750 --> 00:47:11.700
In the rule,
we had disabled that rule by the way,

00:47:11.700 --> 00:47:14.360
so you wouldn't see it in
the first part of the demo.

00:47:14.420 --> 00:47:16.100
Now we enabled the rule.

00:47:16.160 --> 00:47:18.700
All the rule says is the following.

00:47:18.700 --> 00:47:22.340
It says,
look at the lower left hand side,

00:47:22.340 --> 00:47:24.360
that's sort of the
condition part of the rule.

00:47:24.360 --> 00:47:31.080
It says, if my task is query and the
entity I am dealing with is bug,

00:47:31.260 --> 00:47:34.340
And the key I'm trying to resolve
is display name for property.

00:47:34.340 --> 00:47:37.280
That's one of the keys
that Direct to Web uses.

00:47:37.330 --> 00:47:42.330
I want to plug in my own method
called localized property name.

00:47:42.400 --> 00:47:47.830
That method is implemented in the custom
class called localized string assignment.

00:47:47.910 --> 00:47:49.960
That's my own class.

00:47:50.060 --> 00:47:51.690
Let's look at that class.

00:47:51.780 --> 00:47:54.620
That class is in our project.

00:47:56.500 --> 00:48:34.300
[Transcript missing]

00:48:34.920 --> 00:48:37.140
So now let's see how
it looks in our-- oh,

00:48:37.190 --> 00:48:41.400
the other thing I want to say about
this method is for demo purposes,

00:48:41.430 --> 00:48:47.490
if the basic user logs in,
the one that has the username user,

00:48:47.520 --> 00:48:49.080
that person speaks English.

00:48:49.180 --> 00:48:51.310
So we won't localize their strings.

00:48:51.320 --> 00:48:53.640
If the advanced user logs in,
the admin user,

00:48:53.690 --> 00:48:55.640
that person speaks Spanish.

00:48:55.870 --> 00:48:57.860
So we will localize their strings.

00:48:57.940 --> 00:49:01.730
So let's look at the application.

00:49:01.820 --> 00:49:04.060
So we log out.

00:49:04.280 --> 00:49:06.540
Let's log in as user.

00:49:09.030 --> 00:49:12.920
We are executing or localizing code,
but we're deciding that

00:49:12.920 --> 00:49:14.940
this person speaks English.

00:49:15.020 --> 00:49:17.900
So we say, remember,
we're using the name configuration.

00:49:17.900 --> 00:49:19.440
We see title, description, project.

00:49:19.440 --> 00:49:21.460
We log out.

00:49:21.560 --> 00:49:23.780
We log in as admin.

00:49:25.430 --> 00:49:30.750
And there we have our page with the
names of the properties in Spanish.

00:49:30.760 --> 00:49:32.660
Okay?

00:49:37.560 --> 00:49:40.500
So, quick review of,
can you log out Ernest?

00:49:40.610 --> 00:49:43.510
Quick review of what we
accomplished with these three demos.

00:49:43.510 --> 00:49:45.780
First, you gave us a model.

00:49:45.780 --> 00:49:50.690
We gave you a full-fledged
running database application.

00:49:50.740 --> 00:49:51.440
There it is.

00:49:51.520 --> 00:49:52.100
You logged in.

00:49:52.100 --> 00:49:55.180
You have all these pages you
don't have to write for edits,

00:49:55.200 --> 00:49:56.620
for lists, for queries.

00:49:56.620 --> 00:49:58.130
Those are there for you.

00:49:58.130 --> 00:50:00.440
Can you go to the list page?

00:50:05.260 --> 00:50:08.700
You weren't happy with the pages we
gave you from the HTML point of view?

00:50:09.020 --> 00:50:10.350
You changed it.

00:50:10.430 --> 00:50:14.330
You weren't happy with the pages
we gave you at the property level?

00:50:14.510 --> 00:50:16.180
You plugged in your own component.

00:50:16.200 --> 00:50:17.490
Can you log out?

00:50:17.490 --> 00:50:21.900
Can you log in as user?

00:50:25.560 --> 00:50:28.670
You wanted to reuse one page in
two different configurations?

00:50:28.780 --> 00:50:32.440
You defined the named configuration
and you have a simple and an

00:50:32.440 --> 00:50:34.540
advanced query configuration.

00:50:34.610 --> 00:50:36.530
Can you log out?

00:50:36.720 --> 00:50:39.110
You wanted to localize your
application and take advantage

00:50:39.220 --> 00:50:41.390
of the rules of the rule system?

00:50:41.390 --> 00:50:46.800
You define your own little,
you have your localized code somewhere,

00:50:47.130 --> 00:50:51.110
you define one rule to resolve
the property names in this page,

00:50:51.160 --> 00:50:53.150
and you have a localized page.

00:50:53.150 --> 00:50:53.980
Okay?

00:50:53.980 --> 00:50:56.580
That's the end of our Direct to Web demo.

00:51:03.070 --> 00:51:08.880
Now that was a very simple, I mean,
non-flashy demo.

00:51:08.890 --> 00:51:12.070
I didn't want to distract from
the essence of where the hooks

00:51:12.440 --> 00:51:13.820
were for you as developers.

00:51:13.820 --> 00:51:19.250
So at this time,
I'd like to bring up on stage

00:51:19.250 --> 00:51:22.770
Patrice Gautier to show you...

00:51:23.430 --> 00:51:28.320
How he has used Direct to Web to solve
a real world problem in a deployed

00:51:28.590 --> 00:51:30.160
and currently running application.

00:51:30.160 --> 00:51:31.500
Thanks Miguel.

00:51:31.500 --> 00:51:32.200
Good afternoon.

00:51:37.490 --> 00:51:40.700
So I just want to spend a few minutes and
share with you the absolutely tremendous

00:51:40.700 --> 00:51:43.080
success we're having with Direct to Web.

00:51:43.380 --> 00:51:46.680
First thing I'd like to explain
is what we do in one slide.

00:51:46.680 --> 00:51:49.690
We're in the business of providing
business to business infrastructure

00:51:49.830 --> 00:51:51.680
for real estate for large companies.

00:51:51.740 --> 00:51:55.100
So we have customers
like Bank of America,

00:51:55.220 --> 00:51:57.960
Prudential, IBM, and so on.

00:51:57.960 --> 00:52:00.970
And we provide them with a mean
of basically finding landlords,

00:52:00.990 --> 00:52:05.660
engaging them, negotiating,
closing lease and contracts online.

00:52:05.700 --> 00:52:09.630
The process is long and complex,
typically three to six months.

00:52:09.700 --> 00:52:15.240
And it's made complex because there's
a lot of actors touching this process.

00:52:15.330 --> 00:52:17.740
You have the real estate
department of these companies.

00:52:17.740 --> 00:52:21.030
You have brokers, agents,
service providers, lawyers, architects,

00:52:21.100 --> 00:52:21.640
and so on.

00:52:21.640 --> 00:52:25.330
They all do something at
some point in the process.

00:52:25.710 --> 00:52:29.940
So when we model this,
we end up with a pretty large set of EOs,

00:52:29.940 --> 00:52:30.910
something like 300.

00:52:30.960 --> 00:52:34.880
So as a developer, when you start to deal
with that volume of data,

00:52:34.880 --> 00:52:37.850
you should be very scared,
because that means a lot of code

00:52:38.020 --> 00:52:39.800
for you to write and maintain.

00:52:40.120 --> 00:52:46.110
We have three production applications
and they have 700 unique pages in them.

00:52:46.110 --> 00:52:48.180
We also have internal applications.

00:52:48.180 --> 00:52:51.440
So what we decided to do,
seeing this volume,

00:52:51.440 --> 00:52:55.440
is we decided to base almost all
of our pages on Direct to Web.

00:52:55.440 --> 00:53:01.510
Something like 95% at the moment is
using the very same pages or extended

00:53:01.810 --> 00:53:03.860
version of these that Miguel showed you.

00:53:03.900 --> 00:53:09.060
We have about 2200 rules,
but only 18 templates.

00:53:09.060 --> 00:53:11.340
A lot of our pages come
from these templates,

00:53:11.340 --> 00:53:16.060
about 95%. And what that means is we
spend our time mostly doing two things:

00:53:16.060 --> 00:53:20.050
writing business logic,
writing little custom components like

00:53:20.060 --> 00:53:23.170
the component that was shortening
the string that Miguel showed you,

00:53:23.250 --> 00:53:25.300
and doing rules, only three per page.

00:53:25.300 --> 00:53:29.080
And basically the upshot of all
this is that we're able to achieve

00:53:29.080 --> 00:53:32.900
a tremendous volume of functionality
with very few people and a lot

00:53:33.000 --> 00:53:35.110
less time than our competitors.

00:53:35.110 --> 00:53:38.120
So I have a few screenshots to show you.

00:53:38.120 --> 00:53:41.350
I hope that they're big
enough for you to see.

00:53:41.360 --> 00:53:43.060
This is an example of List Page.

00:53:43.060 --> 00:53:44.840
This is a Direct to Web List Page.

00:53:44.880 --> 00:53:47.160
You can see that it looks
nothing like what Miguel had.

00:53:47.210 --> 00:53:49.920
It has custom navigation.

00:53:50.090 --> 00:53:53.130
Everything you see on this page
pretty much is driven by rules,

00:53:53.130 --> 00:53:56.520
from the state of the navigation,
the strings you see on the screen,

00:53:56.520 --> 00:54:01.390
all the names,
even the number of items shown per page,

00:54:01.390 --> 00:54:02.430
and so on.

00:54:04.700 --> 00:54:06.300
Here's a more interesting page.

00:54:06.300 --> 00:54:10.920
We've added the wizard creation page,
which is a stepped wizard.

00:54:11.000 --> 00:54:14.780
And we've added a few features
to the standard Direct to

00:54:14.780 --> 00:54:18.420
Web inspect or edit page.

00:54:19.170 --> 00:54:23.190
You can notice, if you can see them,
that some of the fields

00:54:23.300 --> 00:54:26.850
have stars on their left,
which means that they're mandatory.

00:54:26.910 --> 00:54:30.460
One really interesting characteristic
of Direct to Web pages is that

00:54:30.460 --> 00:54:33.980
they know what property of
the model they're displaying.

00:54:34.030 --> 00:54:36.340
And so they have access to a lot of
information that is not typically

00:54:36.340 --> 00:54:38.060
accessible to a Direct to Web page.

00:54:38.110 --> 00:54:40.200
They know, for example,
if a property is mandatory because

00:54:40.200 --> 00:54:41.630
the model contains that information.

00:54:41.640 --> 00:54:44.110
So it's just a matter of
automatically displaying a

00:54:44.110 --> 00:54:45.690
star whenever that is the case.

00:54:45.730 --> 00:54:46.640
And that is done automatically.

00:54:46.640 --> 00:54:48.600
You don't have anything to do.

00:54:48.780 --> 00:54:51.740
Another thing you can notice
is that some of these fields

00:54:51.810 --> 00:54:54.200
have units on their right.

00:54:54.340 --> 00:54:57.170
That is worth spending a minute
explaining how that works because it

00:54:57.300 --> 00:55:00.700
goes at the very heart of the role power.

00:55:00.700 --> 00:55:02.940
What happened is when we had
this app at the beginning,

00:55:02.940 --> 00:55:04.920
it didn't have any of these
units and everybody started

00:55:04.940 --> 00:55:07.270
coming back to us and said,
"Well, we don't know what parking

00:55:07.300 --> 00:55:09.630
space is expressed as because
sometimes it's a ratio,

00:55:09.640 --> 00:55:13.050
sometimes it's a number spot that you
really have to have units." So we started

00:55:13.150 --> 00:55:16.940
thinking about how can we integrate
this with the Direct to Web page?

00:55:16.940 --> 00:55:18.820
And the answer turns
out to be really simple.

00:55:18.820 --> 00:55:21.160
We've done three things.

00:55:21.160 --> 00:55:25.950
The first thing we did is add an
entry in the user info dictionary of

00:55:26.010 --> 00:55:28.760
whatever property we're talking about.

00:55:28.760 --> 00:55:31.960
For example, parking spaces,
we would say spaces in the user

00:55:32.010 --> 00:55:34.100
info dictionary in the model.

00:55:34.100 --> 00:55:37.120
Then we add one component that is able
to look up that property and display

00:55:37.120 --> 00:55:38.660
it on the right of the text field.

00:55:38.660 --> 00:55:40.810
And then we add exactly
one rule that says,

00:55:40.810 --> 00:55:43.830
"If on the property you're displaying,
you find a unit in the

00:55:44.050 --> 00:55:46.940
user info dictionary,
then use my unit component."

00:55:46.940 --> 00:55:50.620
And with that one rule,
units show up throughout the app,

00:55:50.880 --> 00:55:52.580
throughout 700 pages.

00:55:52.610 --> 00:55:56.060
So you can imagine if you
start expanding on that,

00:55:56.060 --> 00:55:59.350
the amount of time you're able to save.

00:56:00.440 --> 00:56:03.460
Other things of interest on this page,
notice that we've also completely

00:56:03.460 --> 00:56:05.320
changed the way validation works.

00:56:05.320 --> 00:56:10.950
All the errors are collected at the
top and displayed in an English format.

00:56:12.310 --> 00:56:17.640
Here is an edit tab page.

00:56:17.740 --> 00:56:18.920
Again, we've changed the way it works.

00:56:19.000 --> 00:56:19.800
We've added sections.

00:56:19.800 --> 00:56:23.130
I don't know if you can see them,
but there's three tabs and

00:56:23.130 --> 00:56:25.160
two sections in that tab.

00:56:28.570 --> 00:56:31.140
Here's a tab and spec page
much the same as the other.

00:56:31.140 --> 00:56:34.660
What I want to show you on this
page is how the help system works.

00:56:34.670 --> 00:56:36.870
Again, Direct Web doesn't come
with a ton of help.

00:56:37.080 --> 00:56:39.340
And you can see here we
have two kinds of help.

00:56:39.440 --> 00:56:42.920
We have the little eye buttons
that are next to each field.

00:56:43.000 --> 00:56:44.560
And that works the same way as the unit.

00:56:44.560 --> 00:56:49.300
Basically, what we did is create a help
database and let our tech writer

00:56:49.490 --> 00:56:53.290
access that database through,
of course, a Direct Web application.

00:56:53.430 --> 00:56:57.990
So he or she accesses that
database and creates a help entry

00:56:57.990 --> 00:57:02.440
for the size range of a project,
for example, described by this.

00:57:02.620 --> 00:57:04.050
That bit of text is stored in a database.

00:57:04.060 --> 00:57:06.360
When the app runs, again,
because it knows what

00:57:06.460 --> 00:57:10.280
property it's displaying,
it's able to look up that bit of text

00:57:10.280 --> 00:57:12.300
and display it behind the eye button.

00:57:12.300 --> 00:57:13.860
If you press the eye button,
a little JavaScript window

00:57:13.860 --> 00:57:15.780
will pop up with the help.

00:57:15.780 --> 00:57:18.920
And because it knows that it's
attached to that property,

00:57:18.920 --> 00:57:21.300
wherever that property
shows up in the app,

00:57:21.300 --> 00:57:22.260
the help will be there.

00:57:22.260 --> 00:57:24.330
You don't have to do anything.

00:57:24.570 --> 00:57:26.710
And similarly,
the help that you see on top of

00:57:26.710 --> 00:57:28.840
the window comes from the database.

00:57:28.950 --> 00:57:32.520
And our tech writers actually have
the ability to edit the help on the

00:57:32.820 --> 00:57:36.740
Direct to Web app and to see the
result of your edit live on the app.

00:57:36.740 --> 00:57:39.070
I don't know how many of you
have to deal with web design

00:57:39.180 --> 00:57:41.910
teams or tech writer teams,
but typically that is not what happens.

00:57:41.920 --> 00:57:45.590
You have to ask them for help files,
integrate them in the app,

00:57:45.590 --> 00:57:47.750
and then have them later
look at the result.

00:57:47.860 --> 00:57:49.000
Here they can do it live.

00:57:49.000 --> 00:57:52.270
That's a very big advantage.

00:57:53.110 --> 00:57:55.330
And here's a slightly more complex page.

00:57:55.340 --> 00:57:58.900
This is a tab page,
and it has two pick lists in them.

00:57:58.900 --> 00:58:04.020
This is the page that we use
to engage or reject responses.

00:58:04.040 --> 00:58:07.130
Just to see that you can
actually nest Direct to Web pages

00:58:07.130 --> 00:58:10.120
within Direct to Web pages,
you have three in this page.

00:58:10.220 --> 00:58:14.100
So I hope by those few examples,
I've shown you two things.

00:58:14.120 --> 00:58:15.650
A, Direct to Web is not a toy.

00:58:15.660 --> 00:58:18.100
It can scale to very
large amounts of data.

00:58:18.100 --> 00:58:20.090
If you use it properly,
it will be a tremendous tool

00:58:20.170 --> 00:58:22.720
to save time and effort.

00:58:22.780 --> 00:58:26.810
To give you a point of reference,
the seven apps that I mentioned at

00:58:26.810 --> 00:58:31.040
the beginning were developed by about
four to six people over one year.

00:58:31.040 --> 00:58:33.690
Our competitors doing the same
type of functionality have

00:58:33.690 --> 00:58:36.680
teams between 30 and 80 people.

00:58:44.500 --> 00:58:47.200
And one last thing I want to mention,
if you missed the Stepwise

00:58:47.200 --> 00:58:50.540
announcement on Tuesday,
we are open sourcing four of the base

00:58:50.540 --> 00:58:53.700
frameworks that are used in those apps.

00:58:53.700 --> 00:58:55.500
You can find them on our website.

00:58:55.500 --> 00:58:57.500
I've posted the URL on Omni and Stepwise.

00:58:57.500 --> 00:58:59.500
Thank you.

00:58:59.500 --> 00:59:03.500
Back to Miguel.

00:59:05.730 --> 00:59:07.500
Oops.

00:59:07.500 --> 00:59:08.500
Thanks, Patrice.

00:59:08.500 --> 00:59:10.160
Thank you.

00:59:13.720 --> 00:59:18.740
So in summary,
Direct to Web integrates into the

00:59:18.740 --> 00:59:20.530
Web Objects Development Model.

00:59:20.530 --> 00:59:23.890
This isn't any new strange
technology that you have to

00:59:23.890 --> 00:59:25.460
have a huge learning curve for.

00:59:25.460 --> 00:59:31.830
You already know a lot of what you have
to know by being Web Objects Developers.

00:59:32.990 --> 00:59:36.700
We give you a head start with a
lot of pre-built functionality.

00:59:36.720 --> 00:59:39.480
We give you an application for free.

00:59:41.050 --> 00:59:44.550
The default layout and
behavior can be customized.

00:59:44.700 --> 00:59:46.900
That was the main point of the session.

00:59:47.040 --> 00:59:51.370
You have a lot of places where
you can plug in your HTML and

00:59:51.370 --> 00:59:53.150
your code as developers.

00:59:54.540 --> 00:59:57.980
Rules introduce a new level
of customization for your

00:59:57.980 --> 00:59:59.500
Direct to Web applications.

00:59:59.610 --> 01:00:04.540
So think Java,
but also think a higher MEDA level there

01:00:04.540 --> 01:00:06.880
in the way you develop your applications.

01:00:06.880 --> 01:00:10.060
And of course, Direct to Web rules.

01:00:19.170 --> 01:00:21.100
So there's our lab hours.

01:00:21.100 --> 01:00:26.160
I believe tomorrow is the last day,
only half day, up to 3:30.

01:00:26.160 --> 01:00:28.720
Interesting sessions
coming up in this room,

01:00:28.720 --> 01:00:30.880
an advanced talk on EOF.

01:00:30.880 --> 01:00:35.160
After that, in the same room,
the session on advanced Java client,

01:00:35.160 --> 01:00:38.000
which uses the same rule
engine of Direct to Web,

01:00:38.000 --> 01:00:42.640
but provides a Java front
end to your applications,

01:00:42.650 --> 01:00:46.080
and the feedback forum tomorrow.

01:00:46.100 --> 01:00:48.280
Contact information.