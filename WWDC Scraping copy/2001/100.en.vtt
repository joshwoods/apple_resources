WEBVTT

00:00:00.440 --> 00:00:04.670
Ladies and gentlemen,
please welcome Director of

00:00:05.170 --> 00:00:07.690
Product Marketing,
Ken Bereskin.

00:00:13.200 --> 00:00:16.480
Welcome back everybody.

00:00:16.480 --> 00:00:20.580
You know, one of the things that really
excites me about the short-term,

00:00:20.580 --> 00:00:23.560
medium-term,
and especially the long-term prospects

00:00:23.630 --> 00:00:28.090
for Mac OS X is it truly is a system
that has something for everybody.

00:00:28.100 --> 00:00:31.290
You heard a lot from the customer
perspective this morning in terms of

00:00:31.290 --> 00:00:35.410
the great features and technologies,
but taking a look at what Mac OS X means

00:00:35.410 --> 00:00:39.260
to the developer community,
what I see is if you've dedicated

00:00:39.340 --> 00:00:44.090
yourself to Mac programming
over the last 15 to 17 years,

00:00:44.400 --> 00:00:48.230
this is a perfect evolution where you
can bring your products to life again,

00:00:48.230 --> 00:00:50.100
incredible new capabilities.

00:00:50.100 --> 00:00:54.490
If you've done a ton of Unix programming
and you're looking for a platform that

00:00:54.490 --> 00:00:59.090
you can ship millions and millions of
copies of your product with a great,

00:00:59.340 --> 00:01:02.960
beautiful, consistent user interface,
Mac OS X has your favorite toys

00:01:03.070 --> 00:01:05.100
and technologies in spades.

00:01:05.100 --> 00:01:11.080
If Windows drove you to Java programming,
have we got a great Java implementation

00:01:11.080 --> 00:01:15.100
for you with Sun's Java 2
Standard Edition built in.

00:01:15.100 --> 00:01:19.040
And if you have that spark of the
next great idea that you're just

00:01:19.090 --> 00:01:22.990
trying to find the best possible
way to bring that idea to life,

00:01:23.100 --> 00:01:28.100
Cocoa and its advanced object-oriented
capabilities is a perfect ideal platform.

00:01:28.100 --> 00:01:31.100
Wrap all that together,
this is an exciting time

00:01:31.410 --> 00:01:33.080
to be a Mac developer.

00:01:33.140 --> 00:01:36.740
If you're new to the
conference for the first time,

00:01:36.740 --> 00:01:37.870
we welcome you.

00:01:38.100 --> 00:01:41.040
And this is really an important session,
as always.

00:01:41.100 --> 00:01:46.540
It's the transition from the high-level
overviews into really why you're here,

00:01:46.820 --> 00:01:50.100
getting into the heart and
the meat of the system.

00:01:50.470 --> 00:01:54.400
I'd like to bring on stage a
person who's had a huge amount

00:01:54.400 --> 00:01:58.890
of pressure on his shoulders,
being responsible for the software

00:01:58.890 --> 00:02:04.300
engineering of Mac OS X and shipping it,
as we promised earlier this year,

00:02:04.300 --> 00:02:07.680
building a great team that's
been working tirelessly,

00:02:07.680 --> 00:02:11.410
listening to your feedback,
trying to factor it into our plans,

00:02:11.410 --> 00:02:13.300
and now planning for the future.

00:02:13.300 --> 00:02:18.220
Bertrand certainly cares a
great deal about Mac OS X,

00:02:18.470 --> 00:02:22.450
and he's going to share his personal
insights into what Mac OS X is all

00:02:22.450 --> 00:02:24.680
about from his unique perspective.

00:02:24.780 --> 00:02:27.980
I'd like to warmly
welcome Bertrand Serlet,

00:02:27.980 --> 00:02:31.300
Vice President of Mac OS X Engineering.

00:02:31.300 --> 00:02:33.910
Thank you.

00:02:36.030 --> 00:02:43.160
good afternoon let me tell you how life
in the software engineering works at

00:02:43.700 --> 00:02:48.610
apple two months before the developers
conference you get the message from

00:02:48.610 --> 00:02:53.970
an email from so they're operations
hey guys uh... i think you know but

00:02:53.970 --> 00:02:58.610
two months from now uh... since the
developers conference everything so

00:02:58.610 --> 00:03:03.150
yeah two months from now plenty of time
i could keep feeling we've whatever i'm

00:03:03.150 --> 00:03:08.640
doing you know great technology all that
stuff and you forget all about it and

00:03:08.640 --> 00:03:14.060
then two weeks and before the conference
you get another message saying we need

00:03:14.060 --> 00:03:19.750
your slides now then certainly all my
god i need to scramble i need to make

00:03:19.750 --> 00:03:23.900
a mess like that i need to prepare some
demos and i have an unstable system

00:03:23.900 --> 00:03:28.620
i have you know this this system that's
broken because it's currently the middle

00:03:28.620 --> 00:03:34.250
of the bill and whatever and so so this
is typically how it happens so this year

00:03:34.460 --> 00:03:40.480
is different first we decided early in
the process to talk about the present no

00:03:40.510 --> 00:03:45.330
talk about like fancy new technologies
that is being developed and that maybe

00:03:45.330 --> 00:03:50.260
one day we'll come out we decided to
talk with what you have uh... and that's

00:03:50.260 --> 00:03:54.400
my question the other thing quite frankly
is that uh... we were a little tired

00:03:54.480 --> 00:03:58.540
after march twenty fourth so we took
some vacation uh... at least a lot of

00:03:58.540 --> 00:04:03.550
folks in software engineering took some
vacation so this year should have been

00:04:03.750 --> 00:04:09.220
a fairly straightforward presentation
however i had a personal challenge

00:04:09.220 --> 00:04:13.780
which is this morning you've heard
steve and avi and they've been talking

00:04:13.780 --> 00:04:19.720
a lot about what is Mac OS ten steve
said the the context you know the big

00:04:19.820 --> 00:04:23.940
picture kind of thing avi set up the high
level goals and also went to some level

00:04:23.940 --> 00:04:29.940
of detail on what is Mac OS ten so i
thought okay what should i do this year?

00:04:29.940 --> 00:04:35.180
to make it interesting for you and not
having too many repeats and also i'm

00:04:35.260 --> 00:04:40.280
assuming that most of you have been
running Mac OS ten the final version

00:04:40.340 --> 00:04:46.110
or the public beta or its pre-releases
for quite a while now what i decided

00:04:46.110 --> 00:04:50.980
to do is to talk about ten great things
about Mac OS ten ten things that i

00:04:50.980 --> 00:04:57.010
feel very strongly personally that
are great and unique to Mac OS ten

00:04:59.440 --> 00:05:03.400
So the first thing I selected
for you is the architecture.

00:05:03.430 --> 00:05:08.100
I am very proud of the
architecture of Mac OS X.

00:05:08.170 --> 00:05:09.940
You've seen that graphics, okay?

00:05:09.940 --> 00:05:11.540
So it's a very nice graphics.

00:05:11.540 --> 00:05:14.360
It kind of looks like a
marketing piece of graphics,

00:05:14.440 --> 00:05:16.570
but there's some enduring
reality behind it.

00:05:16.580 --> 00:05:20.700
Okay, so let's focus on just a little
bit on each of the layers.

00:05:20.740 --> 00:05:22.110
So let's take Darwin.

00:05:22.190 --> 00:05:26.840
Darwin is also named the Core-S,
and in fact in some sessions

00:05:26.840 --> 00:05:28.620
you may see that as the Core-S.

00:05:28.740 --> 00:05:32.100
Okay, that's kind of where
Mac OS X derives all of its power.

00:05:32.210 --> 00:05:34.680
That's the engine room kind of things.

00:05:34.680 --> 00:05:38.060
So what does that mean
for you as a developer?

00:05:38.060 --> 00:05:42.570
Well, it means you can harness that
power by using the Core-S,

00:05:42.610 --> 00:05:43.040
okay?

00:05:43.040 --> 00:05:46.580
And you have some APIs, okay,
inside the Core-S.

00:05:46.580 --> 00:05:49.550
So you can have the Core-S that
brings some functionality all

00:05:49.710 --> 00:05:52.460
the way through the stacks,
okay, to the Carbon stack,

00:05:52.540 --> 00:05:54.760
the Cocoa stack, or whatever stack, okay?

00:05:54.760 --> 00:05:57.700
And you can leverage all that
power through the toolboxes.

00:05:57.700 --> 00:06:01.960
Also, of course,
you can directly go down one level

00:06:01.960 --> 00:06:04.800
and go to the level of the POSIX API.

00:06:04.980 --> 00:06:07.790
So I should probably stop
here for a second because the

00:06:07.890 --> 00:06:09.990
terminology is a little confusing.

00:06:10.240 --> 00:06:13.000
Okay, Mac OS X is a Unix-like system.

00:06:13.000 --> 00:06:15.180
It has Unix functionality, okay?

00:06:15.250 --> 00:06:16.580
It's actually very close to the Mac OS X.

00:06:16.580 --> 00:06:18.520
It's very close to FreeBSD.

00:06:18.640 --> 00:06:23.190
A lot of the code that we're integrating
for commands and then libraries

00:06:23.190 --> 00:06:25.850
comes from the FreeBSD code base.

00:06:25.920 --> 00:06:30.200
And POSIX is a standard for
the API set in the Unix world.

00:06:30.200 --> 00:06:32.630
So that's where you have
functions like open,

00:06:32.630 --> 00:06:35.860
read, write, you know,
all those kind of usual

00:06:35.860 --> 00:06:37.580
functions to dealing with files.

00:06:37.580 --> 00:06:42.570
So you can directly access the
Core-S through the POSIX APIs.

00:06:42.650 --> 00:06:46.570
We are very close to the POSIX API set.

00:06:46.580 --> 00:06:50.550
And the other way you can,
as a developer, leverage the Core-S is

00:06:50.650 --> 00:06:52.150
to use shell commands.

00:06:52.230 --> 00:06:55.880
So, of course, you know,
no end user will ever use shell commands.

00:06:55.930 --> 00:06:57.820
At least we hope, okay?

00:06:57.820 --> 00:07:00.860
If there's still a few places
where Unix shows through,

00:07:00.860 --> 00:07:03.330
okay, for the end user,
we have failed and we

00:07:03.330 --> 00:07:05.380
will plug those things,
okay?

00:07:05.490 --> 00:07:10.100
But as a developer, you might be able to
leverage the existence on

00:07:10.100 --> 00:07:12.430
the system of shell commands.

00:07:12.490 --> 00:07:14.240
Shell commands is a way of scripting.

00:07:14.240 --> 00:07:16.090
It's a very powerful
way where you can plug,

00:07:16.090 --> 00:07:20.670
you know, things together, piping,
in Unix terminology.

00:07:21.400 --> 00:07:24.480
The last level down in the core R.S.

00:07:24.540 --> 00:07:25.340
is Mac.

00:07:25.370 --> 00:07:28.060
Mac is a microkernel architecture.

00:07:28.120 --> 00:07:32.180
I should clarify this point
because there was some controversy.

00:07:32.290 --> 00:07:36.720
We actually are not the classical
microkernel with lots of little

00:07:36.720 --> 00:07:39.280
services that talk to each other.

00:07:39.350 --> 00:07:43.690
We wanted to have a highly performing
system and we decided to link all that

00:07:43.690 --> 00:07:48.050
code into one for performance reasons
because then you can short-circuit

00:07:48.050 --> 00:07:50.210
a lot of the communication cost.

00:07:50.570 --> 00:07:55.090
But conceptually,
it is a microkernel and at the API level,

00:07:55.090 --> 00:07:59.140
the Mac API are great APIs to
go at the lowest level,

00:07:59.300 --> 00:08:03.300
to deal with VM,
to deal with inter-process communication.

00:08:03.370 --> 00:08:07.370
And so you may want to be at that level,
although hopefully you'll stay at

00:08:07.370 --> 00:08:10.300
the high level as much as possible,
of course.

00:08:11.390 --> 00:08:15.010
Now there is another way
to leverage the CoreOS.

00:08:15.140 --> 00:08:17.340
You can extend it.

00:08:17.370 --> 00:08:21.900
And the primary means of extension
is what we call kernel extension.

00:08:21.900 --> 00:08:25.200
And the vast majority of all
kernel extensions are drivers.

00:08:25.280 --> 00:08:30.530
So we have devised a subsystem called
I/O Kit to help you write drivers.

00:08:30.630 --> 00:08:33.140
And I'll talk a little
bit more about that.

00:08:33.220 --> 00:08:36.310
There are other forms of extensions,
of kernel extensions.

00:08:36.390 --> 00:08:39.170
You can add a new file system stack.

00:08:39.170 --> 00:08:43.100
And I'm sure we'll see a few coming
in the next few years on Mac OS X,

00:08:43.100 --> 00:08:45.360
which is quite exciting.

00:08:45.470 --> 00:08:50.430
You can add a networking protocol layer,
a networking protocol stack as well.

00:08:50.630 --> 00:08:51.240
Okay.

00:08:51.240 --> 00:08:53.800
The kernel extension mechanism is useful.

00:08:53.800 --> 00:08:56.680
All those things enable you to do that.

00:08:56.730 --> 00:09:01.460
But on Mac OS X, contrary to Mac OS 9,
it should be fairly rare

00:09:01.460 --> 00:09:03.040
to have an extension.

00:09:03.080 --> 00:09:06.170
In fact, on 9 and previous version,
you typically,

00:09:06.170 --> 00:09:09.670
sometimes when you have an application,
you need to have some init

00:09:09.670 --> 00:09:11.280
or some extension mechanism.

00:09:11.360 --> 00:09:14.500
Hopefully none of that
will be required on 10.

00:09:14.500 --> 00:09:17.080
And only when you want to do
these things like drivers,

00:09:17.120 --> 00:09:18.640
you will have an extension.

00:09:18.650 --> 00:09:19.570
And why?

00:09:19.640 --> 00:09:22.240
Because extensions are
very tricky to write.

00:09:22.310 --> 00:09:22.480
Okay.

00:09:22.480 --> 00:09:24.580
If you have a bug,
you may crash a machine.

00:09:24.620 --> 00:09:28.640
You are back to the same
kind of very fragile world.

00:09:28.770 --> 00:09:32.940
Fundamentally, extension,
kernel extensions are for experts.

00:09:32.940 --> 00:09:32.940
Okay.

00:09:32.940 --> 00:09:36.750
It's a very hard thing to do,
to write those extensions and make

00:09:36.750 --> 00:09:38.970
sure that they are bulletproof.

00:09:39.440 --> 00:09:42.920
So because it's hard to
write kernel extension,

00:09:42.920 --> 00:09:46.180
we decided to open source
all of the core S layers.

00:09:46.180 --> 00:09:47.980
There were other reasons to do that.

00:09:47.980 --> 00:09:51.300
I think open source is
clearly a growing movement.

00:09:51.300 --> 00:09:53.060
And we're totally part of that.

00:09:53.060 --> 00:09:54.270
And that feels great.

00:09:54.390 --> 00:09:57.390
But at the same time,
it was also to help you in the case where

00:09:57.390 --> 00:10:00.280
you need to write a kernel extension.

00:10:00.280 --> 00:10:03.700
We've had great success
with the open sourcing.

00:10:03.700 --> 00:10:09.500
We have, I think, 95,000 registrations,
registered developers, which is amazing.

00:10:09.500 --> 00:10:13.880
I mean, that's an order of magnitude
more than I would have expected.

00:10:13.880 --> 00:10:20.240
And we have a very healthy
exchange with Darwin developers.

00:10:20.240 --> 00:10:24.510
We have actually taken some of
the fixes and integrated into

00:10:24.510 --> 00:10:29.480
our software that free in 10.0.3,
which is the third software update.

00:10:29.480 --> 00:10:31.760
So we've already seen
the benefit of that.

00:10:31.760 --> 00:10:35.660
And hopefully, you are running 10.0.3,
and you've already seen

00:10:35.680 --> 00:10:36.970
the benefit of this.

00:10:39.390 --> 00:10:43.530
So that was kind of just a
few words at the Darwin level.

00:10:43.530 --> 00:10:46.580
I'm not going to talk too much
about graphics because Avi did,

00:10:46.670 --> 00:10:49.290
I think, an excellent job of
talking about graphics.

00:10:49.310 --> 00:10:55.070
Fundamentally, we have 2D,
and that's Quartz, 3D, and that's OpenGL,

00:10:55.310 --> 00:10:59.300
and what I would call,
and marketing will probably shoot me, 4D,

00:10:59.300 --> 00:11:01.390
and that's QuickTime because
fundamentally,

00:11:01.560 --> 00:11:03.220
this is kind of like
the time as I mentioned,

00:11:03.350 --> 00:11:07.280
but that's probably not the official
way of talking about those things.

00:11:07.300 --> 00:11:12.820
So what we decided for those
technologies is to make the best 2D

00:11:12.860 --> 00:11:19.300
technology to adopt the standard for 3D,
the best possible standard,

00:11:19.300 --> 00:11:22.290
and we already had QuickTime as for this.

00:11:22.300 --> 00:11:25.930
So we essentially wanted to
have the best in each category,

00:11:25.930 --> 00:11:30.800
and underneath all those three things,
you have the compositors that mixes all

00:11:30.800 --> 00:11:36.060
those things together on the screen,
and that was demonstrated this morning.

00:11:36.990 --> 00:11:39.600
The next level up is
the level of frameworks.

00:11:39.840 --> 00:11:44.400
And I know many of you are here to
hear about frameworks so that you can

00:11:44.470 --> 00:11:47.310
develop your app faster or whatever.

00:11:47.410 --> 00:11:50.970
And so we have fundamentally
three frameworks.

00:11:51.330 --> 00:11:54.500
Classic is a little bit
special as a framework.

00:11:54.500 --> 00:11:58.260
That's of course the compatibility,
that's the way to run

00:11:58.260 --> 00:11:59.960
an unmodified binary.

00:12:00.020 --> 00:12:04.200
It's still okay to call that a
framework because you can as a developer

00:12:04.200 --> 00:12:08.600
actually use Classic because Classic,
like all the other environments,

00:12:08.760 --> 00:12:11.940
communicates with
Apple Events and Apple Scripts,

00:12:11.940 --> 00:12:12.560
therefore.

00:12:12.650 --> 00:12:16.090
So you can, as a developer,
leverage some Classic app

00:12:16.090 --> 00:12:17.630
using Apple Events.

00:12:17.730 --> 00:12:20.190
That's a way to use that.

00:12:20.270 --> 00:12:23.880
Carbon is to help you migrate
your application from 9 to 10.

00:12:23.970 --> 00:12:27.550
And Cocoa is to write the
great next killer app.

00:12:27.630 --> 00:12:31.040
And of course, more on that later.

00:12:31.970 --> 00:12:34.800
The next level up is Aqua, of course.

00:12:34.820 --> 00:12:36.090
And this is Aqua.

00:12:36.260 --> 00:12:40.100
I'm sure all of you are running
Aqua and you enjoy that.

00:12:40.190 --> 00:12:41.070
But Aqua is something else.

00:12:41.150 --> 00:12:43.320
It's also the system applications.

00:12:43.420 --> 00:12:46.930
We ship about 50 applications
along with Mac OS X and as

00:12:47.030 --> 00:12:49.340
many again on the developer CD.

00:12:49.340 --> 00:12:52.630
And all those applications
reinforce Aqua.

00:12:52.760 --> 00:12:55.040
They are part of Aqua, okay?

00:12:55.130 --> 00:12:58.610
It all kind of fits together.

00:12:59.270 --> 00:13:02.360
Now, as a developer,
you can reuse some of the

00:13:02.360 --> 00:13:06.190
system applications because
some of those applications have

00:13:06.310 --> 00:13:07.730
APIs that you can leverage.

00:13:07.820 --> 00:13:11.760
For example, if you want to send mail,
you can reuse the mail application

00:13:11.760 --> 00:13:14.640
and the underlying frameworks there.

00:13:14.690 --> 00:13:17.710
If you have a Cocoa application,
you can reuse other applications

00:13:17.710 --> 00:13:20.970
by means of the services menu,
and those kind of things will be

00:13:20.970 --> 00:13:23.140
talked in sessions during the week.

00:13:23.210 --> 00:13:28.500
And of course, the lingua franca for all
applications is Apple Events.

00:13:28.570 --> 00:13:31.000
All the applications can
communicate with Apple Events.

00:13:31.000 --> 00:13:34.520
And on top of that,
you can put Apple Script, okay,

00:13:34.520 --> 00:13:37.540
to make it easy kind
of to do some workflow.

00:13:37.690 --> 00:13:44.640
So this is another powerful means
that you have to develop applications.

00:13:44.680 --> 00:13:46.810
So this is a stack.

00:13:48.500 --> 00:13:53.110
And I think it's a great architecture,
first of all, because it's layered.

00:13:53.190 --> 00:13:56.530
Now, layering is a means of
managing complexity.

00:13:56.710 --> 00:13:59.020
It's a means of thinking
straight about things,

00:13:59.060 --> 00:14:02.470
okay, having like a separation
between UI and non-UI.

00:14:02.470 --> 00:14:05.460
Okay,
so this is how you design a great system,

00:14:05.460 --> 00:14:08.400
by thinking straight
in terms of layering.

00:14:09.570 --> 00:14:12.880
Now, the other thing,
the other reason why I think it's

00:14:12.880 --> 00:14:15.400
great is you have clear boundaries.

00:14:15.400 --> 00:14:17.660
You have a clear boundary
between the kernel,

00:14:17.790 --> 00:14:19.290
kernel space, and user space.

00:14:19.390 --> 00:14:23.400
That means a user application,
I mean an application,

00:14:23.410 --> 00:14:26.400
is not going to crash the kernel
and crash the whole machine.

00:14:26.400 --> 00:14:29.660
You also have a clear
boundary between each process,

00:14:29.660 --> 00:14:32.330
so that means that the
app of your neighbor,

00:14:32.360 --> 00:14:36.120
the person sitting next to you,
is not going to crash your app.

00:14:36.400 --> 00:14:38.400
Of course,
you would never have a bug in your app.

00:14:39.400 --> 00:14:41.320
in Europe, right?

00:14:41.860 --> 00:14:44.170
It's a modern architecture.

00:14:44.170 --> 00:14:48.230
If you remember the diagram,
at the center of the

00:14:48.230 --> 00:14:50.040
diagram you have graphics.

00:14:50.070 --> 00:14:51.320
This is not an accident.

00:14:51.430 --> 00:14:54.190
We conceived it with
graphics at the heart.

00:14:54.200 --> 00:14:58.990
That's why we put so much emphasis
in having those great technologies

00:14:58.990 --> 00:15:00.990
there available for you.

00:15:01.700 --> 00:15:03.590
It's a no-compromise architecture.

00:15:03.590 --> 00:15:06.960
Even for classic,
we didn't have to compromise.

00:15:07.090 --> 00:15:07.950
This is amazing.

00:15:07.950 --> 00:15:11.110
Actually, classic,
the classic environment is a Unix app.

00:15:11.160 --> 00:15:15.400
It runs like another process,
like any other process.

00:15:15.660 --> 00:15:16.480
It's a Unix process.

00:15:16.490 --> 00:15:17.640
It's a regular process.

00:15:17.640 --> 00:15:24.140
We had to do no compromise
to get that to work.

00:15:24.140 --> 00:15:29.480
A lot of hard work and very creative
engineering went and was done by the

00:15:29.580 --> 00:15:32.700
classic team to make that just work.

00:15:33.700 --> 00:15:36.340
The architecture is also very scalable.

00:15:36.340 --> 00:15:41.140
It's a base for Mac OS X server
that was announced today,

00:15:41.140 --> 00:15:46.790
available today,
that adds services on top of Mac OS X.

00:15:46.820 --> 00:15:51.360
So it's a great scalability
in terms of breadth.

00:15:51.560 --> 00:15:54.510
It's also, I think,
scalability in terms of time.

00:15:54.740 --> 00:15:59.570
I'm very convinced that this
architecture will enable us to

00:15:59.880 --> 00:16:02.090
evolve for the next decade or two.

00:16:02.140 --> 00:16:06.390
And we'll do that by replacing pieces
in the architecture but not changing

00:16:06.680 --> 00:16:10.260
fundamentally the overall diagram.

00:16:10.320 --> 00:16:14.820
And so I think the architecture is
going to be a great basis for all of us,

00:16:14.930 --> 00:16:21.350
for Apple and for you,
a great basis for innovation.

00:16:21.460 --> 00:16:26.250
What I-- oh, here are some pointers
to some of the sessions.

00:16:29.310 --> 00:16:35.590
What I selected as my number
two great thing is I/O Kit.

00:16:35.860 --> 00:16:40.540
So I/O Kit is an object-oriented
framework to ease development of drivers.

00:16:40.620 --> 00:16:44.600
Now, you may think,
object-oriented and drivers?

00:16:44.620 --> 00:16:47.890
Are those two things kind
of a little far apart?

00:16:48.170 --> 00:16:53.380
So you have to actually go back to the
roots of object-oriented languages.

00:16:53.380 --> 00:16:55.820
And the first object-oriented
language was Simula.

00:16:56.090 --> 00:16:57.620
That was in the early 60s.

00:16:57.860 --> 00:17:00.050
And its goal was to
simulate the real world.

00:17:00.100 --> 00:17:03.160
Okay,
and this is exactly what I/O Kit does.

00:17:03.250 --> 00:17:05.730
It modelizes the physical world.

00:17:06.120 --> 00:17:09.800
For every piece of hardware,
you have a corresponding class,

00:17:09.940 --> 00:17:11.100
a corresponding data structure.

00:17:11.100 --> 00:17:12.960
So this is a perfect match.

00:17:12.960 --> 00:17:15.740
There's another reason
why it's a perfect match.

00:17:16.310 --> 00:17:19.650
There's a lot of reuse
going on in drivers.

00:17:19.650 --> 00:17:22.750
Very often,
a driver is a subclass of another driver

00:17:22.750 --> 00:17:25.020
with just a few things that changed.

00:17:25.100 --> 00:17:30.040
Okay, and of course reuse is probably one
of the most well-known characteristics

00:17:30.040 --> 00:17:32.150
of object-oriented languages.

00:17:32.150 --> 00:17:38.230
So this is why we chose an
object-oriented framework for I/O Kit.

00:17:38.320 --> 00:17:41.410
Now, all the basic families encapsulated.

00:17:41.420 --> 00:17:45.510
You have a family that
abstracts entire protocols,

00:17:45.510 --> 00:17:47.830
USB, fire wires, that kind of thing.

00:17:47.890 --> 00:17:53.340
And then you have drivers for
specific pieces of hardware.

00:17:53.570 --> 00:17:54.840
I/O Kit is feature rich.

00:17:55.040 --> 00:17:56.340
It's true plug and play.

00:17:56.770 --> 00:17:58.900
That means it's really dynamic.

00:17:58.900 --> 00:18:01.990
At the heart of I/O Kit is
the I/O Kit registry,

00:18:02.150 --> 00:18:06.960
which is essentially a little database
of everything that's available on

00:18:06.960 --> 00:18:11.660
the machine and all its state and
meta description of those things.

00:18:11.790 --> 00:18:16.920
And that's also where all the
matching of devices comes in.

00:18:17.130 --> 00:18:19.740
I/O Kit supports SNP.

00:18:19.820 --> 00:18:21.980
It's also thread-ready.

00:18:22.000 --> 00:18:25.960
It also supports multi-threading,
which means that if you have two

00:18:25.970 --> 00:18:31.110
processors and two devices active,
you may actually run one of each on each

00:18:31.240 --> 00:18:35.090
processor and gain twice the throughput,
which is great.

00:18:35.170 --> 00:18:37.500
Just pure scalability,
automatic scalability.

00:18:37.570 --> 00:18:40.640
And it has sophisticated
power management.

00:18:41.650 --> 00:18:45.200
So let me go a little
more on power management.

00:18:45.200 --> 00:18:50.670
Many of you I've seen in the hallway
have this new great titanium power book,

00:18:50.700 --> 00:18:51.220
right?

00:18:51.310 --> 00:18:53.280
So why does it wake up so fast?

00:18:53.430 --> 00:18:55.350
You've seen the demo
this morning with Avi.

00:18:55.450 --> 00:18:56.620
But why?

00:18:56.900 --> 00:18:58.940
How did we make that wake up so fast?

00:18:59.020 --> 00:19:02.530
I mean, you know from experience
on Mac OS 9 that,

00:19:02.570 --> 00:19:05.480
okay, when you open your power book,
well,

00:19:05.480 --> 00:19:08.470
you have all these things that happen,
and after a few seconds,

00:19:08.470 --> 00:19:11.250
a display comes up,
and the finder gets inside.

00:19:11.260 --> 00:19:13.930
It's hacked together,
and then you wait for the

00:19:13.940 --> 00:19:17.600
30-second timeout for Apple talk,
right?

00:19:18.320 --> 00:19:25.040
So the way on Mac OS X the wake
up happens so fast is because

00:19:25.040 --> 00:19:27.010
we map to the physical world.

00:19:27.030 --> 00:19:30.280
We have modellised the
concept of power planes.

00:19:30.590 --> 00:19:33.770
There's some rules that
you need to follow when you

00:19:33.770 --> 00:19:36.440
wake up kind of the devices,
electric rules.

00:19:36.460 --> 00:19:38.630
And we follow those rules, okay?

00:19:38.740 --> 00:19:40.810
However,
you have several power planes and so

00:19:40.810 --> 00:19:45.310
you have this multi-threading and so
in parallel you wake up each plane,

00:19:45.360 --> 00:19:45.620
okay?

00:19:45.620 --> 00:19:50.960
And so that means that you can wake
up the display along with the USB kind

00:19:50.960 --> 00:19:53.400
of subsystems all in parallel.

00:19:53.420 --> 00:19:56.290
And because we have lazy
propagation of state changes,

00:19:56.310 --> 00:19:58.750
it means that when
Apple Talk finally comes up,

00:19:58.890 --> 00:20:02.570
okay, you've been already doing
your email for 30 seconds,

00:20:02.760 --> 00:20:06.490
okay, rather than have been
blocked for 30 seconds.

00:20:07.000 --> 00:20:12.080
This also shows value of doing the
entire widget all the way from the

00:20:12.090 --> 00:20:16.210
hardware and the software stack
and some of the applications.

00:20:16.220 --> 00:20:19.860
So I think I/O Kit is
really a great thing.

00:20:19.900 --> 00:20:25.330
Some pointers to see I/O Kit sessions.

00:20:29.180 --> 00:20:34.370
The third great thing I selected is PDF,
the portable document format.

00:20:34.370 --> 00:20:38.460
So for those of you who are
not totally familiar with PDF,

00:20:38.630 --> 00:20:41.100
PDF can represent any 2D information.

00:20:41.100 --> 00:20:45.600
It can represent any font, okay,
and fonts are so important.

00:20:45.680 --> 00:20:48.440
I mean,
this is what we live with every day,

00:20:48.620 --> 00:20:50.300
okay, printed paper.

00:20:50.300 --> 00:20:54.670
And the ability to represent
every font is significant.

00:20:55.230 --> 00:20:58.180
Moreover,
there's this subsetting facility in PDF,

00:20:58.280 --> 00:21:02.830
which means that if your document uses
a few characters from one of the fonts,

00:21:02.870 --> 00:21:06.950
it will embed those characters
of that font in the document.

00:21:07.000 --> 00:21:09.590
And that's why it's portable, right?

00:21:09.770 --> 00:21:13.360
Because as you move the document along,
you move the subset of

00:21:13.360 --> 00:21:15.420
the fonts that you need,
okay?

00:21:15.420 --> 00:21:19.400
And so the recipient of the document
will be able to see the same document.

00:21:19.420 --> 00:21:21.420
Okay, this is where the P comes from.

00:21:21.420 --> 00:21:22.410
I don't know.

00:21:22.410 --> 00:21:23.220
I hope so.

00:21:23.220 --> 00:21:28.020
. Some folks from Adobe should
tell me about that.

00:21:28.070 --> 00:21:32.460
Now, the other thing about PDF is that
it can represent sampled images.

00:21:32.690 --> 00:21:36.970
There's more and more kind of
sampled images coming from all forms,

00:21:37.050 --> 00:21:39.640
and PDF is doing a great job at that.

00:21:39.710 --> 00:21:44.310
And an upcoming kind of style
of things is vector line art,

00:21:44.310 --> 00:21:45.060
okay?

00:21:45.060 --> 00:21:50.310
And PDF, again,
can represent that with pure fidelity.

00:21:51.180 --> 00:21:53.220
So what does PDF do for you?

00:21:53.350 --> 00:21:57.850
Well, the first thing is that
PDF is fundamentally the

00:21:57.980 --> 00:21:59.740
PostScript imaging model.

00:21:59.770 --> 00:22:03.430
So the PDF imaging model and
the PostScript imaging model,

00:22:03.430 --> 00:22:04.340
it's the same.

00:22:04.410 --> 00:22:08.660
It means that rather than having
some cheesy model where someone

00:22:08.660 --> 00:22:14.480
invents a draw rect or whatever,
you have something which is a pro model,

00:22:14.610 --> 00:22:19.510
something that will scale all
the way to pro applications.

00:22:19.930 --> 00:22:23.100
Of course,
PDF also means that you get saved

00:22:23.130 --> 00:22:27.480
as PDF for free because if your
application draws on the screen,

00:22:27.520 --> 00:22:31.240
given that we have all these
Quartz that displays a PDF,

00:22:31.240 --> 00:22:35.430
we're able to collect all these
pieces of PDF and put that on a file.

00:22:35.440 --> 00:22:40.640
So you get the save as PDF functionality
without much work and you get the

00:22:40.640 --> 00:22:43.020
printing functionality as well.

00:22:43.070 --> 00:22:47.890
Okay, with what the user sees, okay,
on the screen and what the user gets

00:22:47.930 --> 00:22:50.200
on the printed page being the same.

00:22:50.200 --> 00:22:53.770
So all that is available
for you for free.

00:22:53.790 --> 00:22:58.680
All fonts format are supported so
you don't need to kind of bend your

00:22:58.680 --> 00:23:04.680
application for several font formats and
you have color sync as well for free.

00:23:04.680 --> 00:23:05.870
Thank you.

00:23:06.290 --> 00:23:10.800
Now there's another way you can also
integrate PDF in your application.

00:23:10.880 --> 00:23:15.080
It's to use the graphics importer
if you are Carbon and NSImage

00:23:15.080 --> 00:23:19.580
if you have Cocoa to integrate
reading of PDF documents.

00:23:19.720 --> 00:23:25.270
So not only do you use PDF but you
also integrate with PDF documents.

00:23:28.250 --> 00:23:33.700
Here are some pointers to PDF and
some of the Quartz sessions.

00:23:36.080 --> 00:23:41.170
The number four thing I selected
is I believe Mac OS X is a

00:23:41.170 --> 00:23:45.840
great platform for developers,
for all of us developers.

00:23:45.960 --> 00:23:48.220
So what do I mean by that?

00:23:49.500 --> 00:23:54.030
On Mac OS 9,
if you develop your application

00:23:54.540 --> 00:23:57.290
and your application has a bug,
which typically happens

00:23:57.320 --> 00:24:00.830
during the development cycle,
you are taking your chance.

00:24:00.910 --> 00:24:05.690
Your application may loop and
never give you back the control.

00:24:06.030 --> 00:24:08.960
Your application may crash
and potentially do something

00:24:08.960 --> 00:24:10.410
very bad to the machine.

00:24:10.670 --> 00:24:14.360
Writing is wrong, low mem,
things like that.

00:24:14.410 --> 00:24:18.660
On X, no such thing can happen
because of the protected memory.

00:24:18.770 --> 00:24:22.560
So that means that you can be confident
as you develop your application,

00:24:22.560 --> 00:24:25.460
as you test it,
as you use Project Builder or some

00:24:25.460 --> 00:24:27.660
other IDE to develop your application.

00:24:27.740 --> 00:24:31.560
You can be confident it's not going
to crash your entire user world.

00:24:31.660 --> 00:24:36.450
So that means you can both use the
machine as a regular Quartz user

00:24:36.450 --> 00:24:39.220
and develop on the same machine.

00:24:39.290 --> 00:24:42.510
And that, I think, is a significant win.

00:24:42.730 --> 00:24:45.750
Also, you have a lot of tools built in.

00:24:45.800 --> 00:24:51.310
Mac OS X, the box,
comes with the tools CD and we

00:24:51.580 --> 00:24:53.800
ship a broad spectrum of tools.

00:24:53.800 --> 00:24:56.760
As Ken was saying,
spanning the whole spectrum from

00:24:57.030 --> 00:25:00.500
Unix application to traditional
toolbox-oriented applications

00:25:00.590 --> 00:25:05.830
to new kinds of things,
say Java applications or whatever.

00:25:05.900 --> 00:25:08.920
And we have great performance tools,
and I'll talk a little

00:25:08.970 --> 00:25:10.140
more about that later.

00:25:13.330 --> 00:25:18.710
Personally, I spend a lot of my week in
meetings and I don't get too

00:25:18.880 --> 00:25:20.840
much of a chance to write code.

00:25:20.840 --> 00:25:26.100
So what I like to do on weekends
is kind of go near a beach.

00:25:26.100 --> 00:25:30.960
What's very nice is that I can take
my portable along and still kind

00:25:31.140 --> 00:25:35.320
of touch code on weekends because
I have my entire world here with me.

00:25:35.430 --> 00:25:38.810
I have the portable,
I have access to my email,

00:25:38.820 --> 00:25:41.110
and I have access to the tools.

00:25:41.160 --> 00:25:46.980
With mobility, that gives you kind of an
extra layer of comfort.

00:25:46.980 --> 00:25:51.160
Also with airport,
now present in a lot of places,

00:25:51.160 --> 00:25:53.120
in hotels, in airports.

00:25:53.150 --> 00:25:58.810
When I say airport, I mean 802.11,
of course, present in airports,

00:25:58.920 --> 00:26:01.720
in the physical airport,
and as well as cafes.

00:26:01.720 --> 00:26:03.500
It's great, okay?

00:26:03.500 --> 00:26:06.310
You can connect to the internet
while being next to the beach,

00:26:06.310 --> 00:26:07.930
okay, drinking your espresso.

00:26:07.970 --> 00:26:09.120
I really enjoy that.

00:26:09.120 --> 00:26:09.120
Thank you.

00:26:11.160 --> 00:26:14.500
let's talk about some
of the global features

00:26:17.970 --> 00:26:25.900
There are two fundamental technologies
that help us have great global features.

00:26:25.900 --> 00:26:28.770
The first one is application packaging.

00:26:29.460 --> 00:26:34.350
What application packaging is about is,
from the user perspective,

00:26:34.580 --> 00:26:37.730
have a single icon that
represents the app.

00:26:37.790 --> 00:26:40.170
Okay, so for our users, it's very simple.

00:26:40.450 --> 00:26:43.690
You know, no longer you need to
kind of dig into a folder.

00:26:43.780 --> 00:26:46.360
You need to have the icon view
just set up right so that,

00:26:46.480 --> 00:26:50.200
you know, the application icon is right
there but all the rest is hidden.

00:26:50.260 --> 00:26:51.300
No.

00:26:51.380 --> 00:26:54.290
For the user,
you have just a single icon.

00:26:54.370 --> 00:26:58.980
For the developer on the other hand,
you have like files and folders.

00:26:59.000 --> 00:27:03.220
Okay, and there's a convention on where
you are going to put the languages,

00:27:03.220 --> 00:27:05.780
each language in this tree.

00:27:05.820 --> 00:27:08.710
And so it's very easy to manipulate.

00:27:08.820 --> 00:27:14.110
We call this technology SBML,
single binary multiple languages.

00:27:14.130 --> 00:27:19.960
Okay, all you need for your application
is right there in that token.

00:27:20.250 --> 00:27:22.840
That's all the resources,
localized resources,

00:27:22.890 --> 00:27:26.690
but also things like help, templates,
sub-libraries, if you need that.

00:27:26.760 --> 00:27:31.190
In fact, the libraries themselves use
the same packaging technology.

00:27:31.200 --> 00:27:33.950
So this,
putting together this technology is

00:27:33.950 --> 00:27:38.870
something that I think we did right,
okay, and that has helped us tremendously

00:27:38.870 --> 00:27:40.130
for this globalization.

00:27:40.210 --> 00:27:45.190
Many of you have an app that
is sold in different countries.

00:27:45.190 --> 00:27:49.200
I strongly encourage you to
adopt the application packaging.

00:27:49.320 --> 00:27:52.200
It also enables for, you know,
drag and drop install.

00:27:52.200 --> 00:27:55.140
You know, drag it to the folder where you
want it to live and you're done.

00:27:55.290 --> 00:27:58.200
And I think our users
are going to love that.

00:28:00.230 --> 00:28:05.550
The other key technology, of course,
for being global is Unicode.

00:28:05.630 --> 00:28:09.080
So our stacks are Unicode throughout.

00:28:09.080 --> 00:28:12.470
Okay,
so that is both the Carbon stack and

00:28:12.770 --> 00:28:15.570
the Cocoa stack are ready for Unicode.

00:28:15.940 --> 00:28:19.120
So Cocoa was already kind
of there a few years ago.

00:28:19.160 --> 00:28:23.480
What we did for Carbon is we added
a parallel set of APIs and we

00:28:23.480 --> 00:28:28.930
have an abstraction that we call
CFString and all the Carbon stacks

00:28:28.930 --> 00:28:31.040
talk in terms of CFString.

00:28:31.060 --> 00:28:34.640
Now what we did is CFString,
along with our facilities,

00:28:34.730 --> 00:28:38.340
live in the libraries that we
call core foundation that lives

00:28:38.340 --> 00:28:41.200
below Carbon and below Cocoa.

00:28:41.210 --> 00:28:43.830
We also had to save some
engineering efforts,

00:28:43.830 --> 00:28:45.890
of course, and avoid duplication.

00:28:47.110 --> 00:28:50.930
Also,
we have a great set of fonts and our

00:28:50.930 --> 00:28:54.170
fonts span the entire Unicode spectrum.

00:28:54.170 --> 00:28:58.720
So you don't have to worry when you use
Unicode whether this particular character

00:28:58.720 --> 00:29:00.380
is going to be available for your fonts.

00:29:00.440 --> 00:29:01.980
The system will do that for you.

00:29:01.980 --> 00:29:06.710
And I think that's one of the few
worries that you have as developers.

00:29:06.960 --> 00:29:10.660
Finally,
we have some great higher level controls,

00:29:10.750 --> 00:29:15.130
both in Carbon and in Cocoa,
to enable you to provide for

00:29:15.510 --> 00:29:23.280
your users a little text widget,
editable text with rich fonts and so on.

00:29:25.650 --> 00:29:30.100
So together those two technologies
have enabled us to ship

00:29:30.100 --> 00:29:32.340
Mac OS X in seven languages.

00:29:32.360 --> 00:29:39.090
We actually GMed this exact same
day for all seven languages,

00:29:39.090 --> 00:29:41.910
which is kind of a first internally.

00:29:42.820 --> 00:29:46.360
Soon,
it was announced this morning by Avi,

00:29:46.360 --> 00:29:49.070
we will ship in a whole
new set of languages.

00:29:49.360 --> 00:29:53.610
We actually GMed that last night,
so very pleased in time

00:29:53.610 --> 00:29:54.930
for the conference.

00:29:54.970 --> 00:30:01.480
So soon we'll have Chinese, Korean,
and a few other European languages.

00:30:01.500 --> 00:30:06.730
So my two take-home points there
is that it's easy to have your app,

00:30:06.730 --> 00:30:11.280
SBML, as a single token if
you use that packaging.

00:30:11.280 --> 00:30:16.100
And it should be relatively
straightforward to have your app Unicode

00:30:16.100 --> 00:30:18.520
ready so that it works in all locales.

00:30:20.950 --> 00:30:24.290
These are some of the pointers to
some of the sessions that talk about

00:30:24.290 --> 00:30:28.640
application packaging and localization.

00:30:28.720 --> 00:30:36.740
So what I would like now is to
invite on stage Tony O'Brien from the

00:30:36.740 --> 00:30:42.210
integration team to demonstrate some
of the things I've been talking about.

00:30:42.210 --> 00:30:42.210
Tony O' Thank you, Bertrand.

00:30:43.360 --> 00:30:53.470
Bertrand just mentioned the
global aspects of Mac OS X.

00:30:53.470 --> 00:30:53.470
And what I want to do now is show
you what that means for our users.

00:30:53.700 --> 00:30:57.580
So I have a system here
running in English.

00:30:57.580 --> 00:30:59.040
I'm going to bring up IE.

00:30:59.100 --> 00:31:01.320
It goes to the Apple website.

00:31:01.320 --> 00:31:04.560
And I have a URL here in my
doc that brings me to the

00:31:04.760 --> 00:31:07.580
Apple Korea Mac OS X website.

00:31:07.580 --> 00:31:11.520
So you might ask,
what's so special about this?

00:31:11.520 --> 00:31:15.320
Well, because we have Unicode
throughout the system,

00:31:15.320 --> 00:31:18.020
and our fonts span the
entire Unicode character set,

00:31:18.020 --> 00:31:21.100
even though my system is
still running in English,

00:31:21.100 --> 00:31:24.020
I'm able to render Korean and
Japanese and all the other

00:31:24.020 --> 00:31:25.780
languages in my apps.

00:31:25.780 --> 00:31:27.530
It gets even better.

00:31:27.700 --> 00:31:33.180
The user is also able to dynamically
switch the language the OS is running in.

00:31:34.010 --> 00:31:37.750
So I'm going to switch this
English OS to running Korean.

00:31:37.800 --> 00:31:43.980
To do that,
I drag Korean to the top of the list so

00:31:43.980 --> 00:31:43.980
that it becomes the primary language.

00:31:44.480 --> 00:31:48.990
And now I'm going to launch TextEdit
and look at the TextEdit menus.

00:31:49.040 --> 00:31:54.210
So this app has now been switched to
running Korean just with one operation.

00:31:54.300 --> 00:32:01.480
I can also take some of
this Korean text from IE,

00:32:01.480 --> 00:32:01.480
drag and drop this into TextEdit.

00:32:01.990 --> 00:32:05.080
TextEdit is a Cocoa app, i.e.

00:32:05.090 --> 00:32:06.350
is Carbon.

00:32:06.400 --> 00:32:08.900
Because all of the text
in my system is Unicode,

00:32:08.910 --> 00:32:11.900
this kind of stuff just works.

00:32:11.900 --> 00:32:14.690
For the rest of the demo,
I want to switch.

00:32:16.400 --> 00:32:17.400
and the rest of the team.

00:32:17.400 --> 00:32:18.400
So,
let's get my language back to English.

00:32:18.400 --> 00:32:19.400
Drag and drop.

00:32:19.570 --> 00:32:21.280
Close this.

00:32:21.280 --> 00:32:22.430
Let's quit TextEdit.

00:32:22.460 --> 00:32:24.400
I think this one is done safe.

00:32:24.410 --> 00:32:26.440
Yep.

00:32:26.440 --> 00:32:30.210
So, we can do this kind of stuff
in Mac OS X because TextEdit

00:32:30.210 --> 00:32:32.290
is an app packaged application.

00:32:32.290 --> 00:32:36.540
So, to the user, they just see one icon,
but inside that package are

00:32:36.540 --> 00:32:38.580
all of the localized resources.

00:32:38.580 --> 00:32:40.080
So,
this is going to be great for you guys.

00:32:40.080 --> 00:32:43.050
You can ship one app all over
the world and it will run in

00:32:43.050 --> 00:32:48.210
whatever language the user chooses,
whether they're running the OS in that

00:32:48.210 --> 00:32:51.270
language or want to switch to a different

00:32:55.310 --> 00:32:58.860
So the next thing I want
to talk about is I/O Kit.

00:32:58.870 --> 00:33:03.400
I/O Kit, as Bertrand mentioned,
is an object-oriented driver model.

00:33:03.410 --> 00:33:09.970
All of our families are encapsulated,
and the families abstract the

00:33:09.970 --> 00:33:13.710
driver developer for the protocols.

00:33:13.710 --> 00:33:16.670
So we think this will make really
rapid driver bring up on Mac OS X.

00:33:16.670 --> 00:33:16.670
I'm going to show you yet
another plug and play demo.

00:33:16.990 --> 00:33:19.130
This is a USB digital camera.

00:33:19.210 --> 00:33:22.450
And this camera happens to comply
to the USB mass storage spec,

00:33:22.550 --> 00:33:26.170
so it doesn't even need
a driver on Mac OS X.

00:33:26.560 --> 00:33:28.390
and two things happened.

00:33:28.400 --> 00:33:35.610
The camera mounted on the
desktop here as a USB hard drive.

00:33:35.610 --> 00:33:35.610
An image capture was
set up to auto launch.

00:33:35.640 --> 00:33:45.380
So I just want to fetch
a few of these images.

00:33:45.380 --> 00:33:45.900
I'm browsing the images on the camera.

00:33:45.900 --> 00:33:45.900
I'll select these four,
download them to my disk.

00:33:49.100 --> 00:33:53.880
The Finder window will pop up with the
four images I just took off this camera.

00:33:53.880 --> 00:33:57.800
So the next thing I want to
do is process these images.

00:33:57.800 --> 00:34:00.970
I want to change the resolution of
the images to make them smaller,

00:34:00.970 --> 00:34:02.620
make them more web friendly.

00:34:02.620 --> 00:34:06.900
I also want to make some color
adjustments and that kind of stuff.

00:34:06.900 --> 00:34:09.820
So I have four images here.

00:34:09.900 --> 00:34:12.220
So what I'm going to do is I'm
going to use two things to do this.

00:34:12.220 --> 00:34:15.560
One of them is Apple Script,
and the other is a really cool

00:34:15.560 --> 00:34:17.900
app called Graphic Converter.

00:34:17.900 --> 00:34:20.060
So I'll open my Apple Script folder.

00:34:20.060 --> 00:34:22.320
I have two droplets here.

00:34:22.360 --> 00:34:25.570
Select my images, drag and drop.

00:34:27.780 --> 00:34:28.960
So this is Graphic Converter.

00:34:28.960 --> 00:34:32.250
I've been using Graphic
Converter for years on Mac OS.

00:34:32.250 --> 00:34:36.570
It's one of my favorite shareware
apps and I was delighted to see about

00:34:36.570 --> 00:34:40.930
a week after we shipped that this
came out as a Carbon app on Mac OS X.

00:34:41.020 --> 00:34:43.200
So what's happening now
is Apple Script is talking

00:34:43.200 --> 00:34:44.320
to Graphic Converter.

00:34:44.450 --> 00:34:47.460
It's changing the color levels,
reducing the color table,

00:34:47.460 --> 00:34:50.930
brightness and contrast,
reducing the resolution

00:34:50.930 --> 00:34:52.590
of the images and so on.

00:34:53.090 --> 00:34:57.950
So this kind of workflow is typical of
what our customers expect from the OS.

00:34:58.100 --> 00:35:01.240
They use Apple Script with their
key apps to automate their workflow.

00:35:01.240 --> 00:35:06.370
I mean,
I have it here with four pictures.

00:35:06.370 --> 00:35:06.370
It could be 400 or 4,000.

00:35:09.360 --> 00:35:11.910
And it just works.

00:35:11.920 --> 00:35:13.010
OK.

00:35:13.060 --> 00:35:17.260
So now we have the four converted
images from Graphic Converter.

00:35:17.290 --> 00:35:20.440
And the next thing I want to
show you is FileMaker Pro,

00:35:20.520 --> 00:35:24.500
which was announced last week
for Mac OS X as a Carbon app.

00:35:24.500 --> 00:35:27.970
I believe it was the first
Mac OS X app to be announced for

00:35:27.970 --> 00:35:30.600
Windows and Mac OS X simultaneously.

00:35:30.610 --> 00:35:37.070
And we wrote a little image archiver
database for storing digital photographs

00:35:37.220 --> 00:35:40.540
so I can add comments and date
information and all that kind of stuff.

00:35:40.540 --> 00:35:42.360
And of course,
what I want to do now is take

00:35:42.360 --> 00:35:45.750
these four images that I processed
and put them into this database.

00:35:45.840 --> 00:35:48.860
But rather than do that
manually for each image,

00:35:48.860 --> 00:35:51.980
I'm going to let Apple Script do
the work for me again.

00:35:52.730 --> 00:35:54.620
So I have another droplet here.

00:35:54.620 --> 00:35:59.220
I'd select these are the images
that came out of graphic converters,

00:35:59.220 --> 00:35:59.220
so they're smaller.

00:36:03.230 --> 00:36:05.020
So if you're not using
AppleScript on Mac OS X,

00:36:05.020 --> 00:36:07.310
you're probably working
a little bit too hard,

00:36:07.310 --> 00:36:09.450
especially for this kind of stuff.

00:36:09.450 --> 00:36:10.440
And we're done.

00:36:10.540 --> 00:36:13.050
So let's look in this view.

00:36:13.620 --> 00:36:16.290
and our images came in OK.

00:36:16.300 --> 00:36:17.040
And there we go.

00:36:17.040 --> 00:36:20.940
Now, the last thing I want to briefly
mention is PDF on Mac OS X.

00:36:20.970 --> 00:36:22.730
PDF is a Pro Graphics standard.

00:36:22.740 --> 00:36:25.000
It's a great web standard.

00:36:25.020 --> 00:36:27.880
It's built into ROS,
and it's great for printing,

00:36:27.880 --> 00:36:31.920
because what you see on the PDF on screen
is what will come out in the printer.

00:36:31.920 --> 00:36:35.050
So I find it very useful,
because I often send documents

00:36:35.050 --> 00:36:36.860
to friends of mine who,
believe it or not,

00:36:36.860 --> 00:36:39.650
may not be running Mac OS X yet,
and I'm not sure if they

00:36:39.660 --> 00:36:42.660
have the application that
I use to create the document.

00:36:42.660 --> 00:36:46.540
So I tend to save documents
as PDF and just email to them.

00:36:46.540 --> 00:36:49.500
So you can do that from any app,
no matter what fonts or what

00:36:49.500 --> 00:36:50.700
text you use in the document.

00:36:50.740 --> 00:36:52.060
It will keep all of that.

00:36:52.060 --> 00:36:55.410
I'm going to do it here for
this FileMaker Pro record.

00:36:56.360 --> 00:37:00.000
So let's preview this as a PDF to
see what it will come out like when

00:37:00.000 --> 00:37:01.670
they view it or when I print it.

00:37:01.670 --> 00:37:02.700
And there it is.

00:37:02.730 --> 00:37:04.930
Save as PDF.

00:37:05.630 --> 00:37:09.240
It's that easy, it comes for free,
it just works on Mac OS X.

00:37:09.240 --> 00:37:11.760
So,
in the last few minutes I've just shown

00:37:11.760 --> 00:37:14.320
you a simple workflow using a few things.

00:37:14.320 --> 00:37:19.290
We started off with seamless
multilingual support,

00:37:19.290 --> 00:37:25.070
great plug and play with I/O Kit,
Apple script for automating

00:37:25.070 --> 00:37:28.730
tasks across the OS,
and PDF built in,

00:37:28.730 --> 00:37:29.720
and we think we've really
got something here.

00:37:29.720 --> 00:37:29.720
Back to you Bertrand.

00:37:37.050 --> 00:37:42.750
So the next great thing that
I selected for you is XML.

00:37:42.760 --> 00:37:49.030
It is a little known fact,
but XML is everywhere on Mac OS X.

00:37:49.230 --> 00:37:50.960
So what do I mean?

00:37:50.960 --> 00:37:56.960
Well, all your preferences as a
user are stored in XML files.

00:37:56.960 --> 00:38:03.100
The little meta files for applications
that describe what are the types

00:38:03.580 --> 00:38:07.650
of documents that the application
claims or where to find the icon

00:38:07.880 --> 00:38:10.200
for the app are stored as XML.

00:38:10.450 --> 00:38:14.240
Plugins are all XML based as
well for the meta description.

00:38:14.240 --> 00:38:16.960
Even drivers are XML based.

00:38:17.180 --> 00:38:22.150
The way data is exchanged via
the paste board is XML based.

00:38:22.350 --> 00:38:28.350
So we have decided to store every
single configuration file and

00:38:28.350 --> 00:38:32.620
God knows how many formats there's
always for all those little files.

00:38:32.790 --> 00:38:36.310
We decided to use XML for that
whenever there was no predefined

00:38:36.600 --> 00:38:38.200
format for those things.

00:38:38.200 --> 00:38:42.340
So that's, I think,
a great developer benefit of that

00:38:42.340 --> 00:38:47.620
because you don't have to rewrite
constantly a little parser or de-parser,

00:38:47.620 --> 00:38:49.200
un-parser, whatever.

00:38:49.200 --> 00:38:53.750
You can just reuse the
parsers that we wrote for you.

00:38:53.910 --> 00:38:56.100
We put that poster in several places.

00:38:56.300 --> 00:39:00.040
We put it in core foundation,
that's beneath Carbon and Cocoa.

00:39:00.060 --> 00:39:04.360
It's also having an object-oriented
kind of sugar coating,

00:39:04.420 --> 00:39:05.270
and that's in foundation.

00:39:05.300 --> 00:39:09.910
And we also decided to put
that in Darwin so that driver

00:39:09.910 --> 00:39:15.140
developers can reuse the little
XML poster there as well.

00:39:15.360 --> 00:39:20.280
What this will enable your apps to do
is to be a little more data driven.

00:39:20.370 --> 00:39:23.080
And that means if you
have some parameters,

00:39:23.080 --> 00:39:27.000
say the animation rate or whatever,
you may want to store that

00:39:27.000 --> 00:39:30.850
little parameter in an XML file
because it's easy to play with.

00:39:30.990 --> 00:39:32.260
You know, no recompilation.

00:39:32.260 --> 00:39:35.930
You just change a little value and go.

00:39:36.100 --> 00:39:42.650
So I think that will bring a user value,
a developer value to the picture.

00:39:43.500 --> 00:39:45.870
This is part of course
for greater strategy,

00:39:45.900 --> 00:39:46.360
okay?

00:39:46.360 --> 00:39:49.960
That's the strategy to
embrace open standards.

00:39:50.170 --> 00:39:56.750
All kinds of standards, you know,
graphics standards, whatever,

00:39:56.750 --> 00:39:56.750
or networking standards.

00:39:57.040 --> 00:40:00.470
Rather than reinvent the wheel,
we have adopted those standards

00:40:00.470 --> 00:40:03.140
and XML is one of those things.

00:40:04.060 --> 00:40:07.600
Number seven,
we have a great Java 2 platform.

00:40:07.620 --> 00:40:10.500
Now, this may come as a surprise, okay?

00:40:10.810 --> 00:40:14.690
Java 2 and Apple are not
necessarily kind of obvious.

00:40:14.720 --> 00:40:19.990
Well, we are poised here to have the
best Java desktop operating system.

00:40:20.160 --> 00:40:20.830
And why?

00:40:20.830 --> 00:40:25.590
Because we take the VM,
the virtual machine, directly from Sun,

00:40:25.590 --> 00:40:26.940
the originator.

00:40:26.980 --> 00:40:31.280
We take the hotspot Java VM,
that's the best Java VM, right,

00:40:31.440 --> 00:40:33.970
from the people who build it.

00:40:34.000 --> 00:40:38.490
really understand Java,
who made it happen.

00:40:39.150 --> 00:40:44.630
Because the Java VM originally
comes from a Unix environment,

00:40:44.700 --> 00:40:47.180
it's very easy to move to Mac OS X.

00:40:47.490 --> 00:40:51.560
And so we have to do very
little modifications to get

00:40:51.750 --> 00:40:54.260
that great VM onto our system.

00:40:54.320 --> 00:40:58.980
And that's why we were able to
get Java 2 so quickly onboard

00:40:59.120 --> 00:41:03.990
Mac OS X and then to iterate on
the performance tuning and such.

00:41:04.140 --> 00:41:06.000
So what do you want to use Java for?

00:41:06.070 --> 00:41:07.990
For cross-platform applications.

00:41:08.000 --> 00:41:11.780
I'm sure a number of you already
have some Java applications.

00:41:11.810 --> 00:41:14.310
It's going to be great on
Mac OS X because it's standard.

00:41:14.390 --> 00:41:16.000
It's cross-platform, right?

00:41:16.060 --> 00:41:17.700
There's a twist, though.

00:41:17.740 --> 00:41:21.280
The twist is that on Mac OS X you
can also benefit of certain

00:41:21.400 --> 00:41:23.220
technologies like QuickTime.

00:41:23.260 --> 00:41:27.070
We have a great
Java binding for QuickTime.

00:41:27.350 --> 00:41:29.780
And your application,
rather than look and

00:41:29.780 --> 00:41:33.090
feel a little different,
like the Java look and feel,

00:41:33.130 --> 00:41:36.800
will integrate very nicely with
all the other native applications

00:41:36.800 --> 00:41:40.380
because we have done the work so
that you can have the Aqua look

00:41:40.510 --> 00:41:42.770
and feel for your Java application.

00:41:45.200 --> 00:41:50.380
Also, we keep improving Java and very
soon there will be a Java update

00:41:50.520 --> 00:41:55.850
that will enable applets and
browsers and more applications.

00:41:58.280 --> 00:42:01.600
Now,
Web Objects 5 was announced this morning.

00:42:01.660 --> 00:42:03.960
Web Objects 5 is cross-platform.

00:42:03.960 --> 00:42:06.640
It's entirely written in Java.

00:42:06.800 --> 00:42:10.660
And it's cross-platform,
but it's best on Mac OS X,

00:42:10.680 --> 00:42:12.300
on Mac OS X server.

00:42:12.390 --> 00:42:14.040
So remember that.

00:42:14.060 --> 00:42:17.970
WebEx 5 is best developed
and deployed on Mac OS X.

00:42:18.110 --> 00:42:21.930
A little plug for WebEx folks here.

00:42:22.340 --> 00:42:24.890
And what does WebEx really do?

00:42:24.950 --> 00:42:27.470
Well, at its heart,
you have like a little

00:42:27.470 --> 00:42:31.450
jewel of technology,
which is the ability to

00:42:31.450 --> 00:42:34.290
write business logic in Java.

00:42:34.370 --> 00:42:37.170
Now,
if you don't know what business logic is,

00:42:37.170 --> 00:42:41.300
I strongly encourage you to go to
the sessions that talk about that.

00:42:45.150 --> 00:42:51.990
Number eight, performance is of course
a key concern of us.

00:42:52.140 --> 00:42:54.320
We always work towards that.

00:42:54.410 --> 00:42:57.130
And I'd like to motivate that a little.

00:42:57.330 --> 00:43:00.370
We have a great, powerful engine.

00:43:00.470 --> 00:43:02.080
That's Darwin, that's a Core OS.

00:43:02.080 --> 00:43:03.790
It has extremely fast fundamentals.

00:43:03.800 --> 00:43:06.790
It has unrivaled throughputs.

00:43:07.140 --> 00:43:09.120
We have great primitives.

00:43:09.270 --> 00:43:09.990
You know, VM.

00:43:10.000 --> 00:43:11.690
Our VM is really great.

00:43:11.790 --> 00:43:14.230
It can take a lot of abuse.

00:43:14.740 --> 00:43:21.160
We have great primitives for
tasks and for threads and for

00:43:21.160 --> 00:43:21.160
inter-process communication.

00:43:21.560 --> 00:43:23.780
But there's one thing
that we've discovered as

00:43:23.780 --> 00:43:28.440
Carbon apps were brought along,
okay, either from you as we were kind

00:43:28.440 --> 00:43:33.610
of working together on bring-ups
or by ourselves as we were taking

00:43:33.610 --> 00:43:37.360
some existing app from 9 to 10,
is that the first bring-up

00:43:37.490 --> 00:43:39.100
is really exciting.

00:43:39.100 --> 00:43:41.110
You get that window on
the screen and you say,

00:43:41.110 --> 00:43:41.930
wow, it's easy.

00:43:41.930 --> 00:43:42.920
I carbonized my app.

00:43:42.920 --> 00:43:46.570
Okay, it just took me two weeks to get to
that stage of the window on the screen.

00:43:47.360 --> 00:43:51.400
The problem is that in some cases,
the Carbon app is not quite

00:43:51.520 --> 00:43:53.460
geared to deal with Mac OS X.

00:43:53.460 --> 00:43:56.060
In a number of cases, it does polling,
right?

00:43:56.060 --> 00:43:58.280
It takes 100% of the CPU.

00:43:58.740 --> 00:44:00.600
That's no good.

00:44:01.130 --> 00:44:04.380
Also, fundamentally,
the Carbon API is the same

00:44:04.380 --> 00:44:07.160
between 9 and 10 via CarbonLib.

00:44:07.240 --> 00:44:11.200
However,
that's just the same about the semantics.

00:44:11.200 --> 00:44:16.270
It does not mean that the performance
characteristics of the API are the same.

00:44:16.280 --> 00:44:21.560
We cannot make it so in a number of cases
because we have a different foundation.

00:44:21.560 --> 00:44:23.890
So let me take two examples.

00:44:24.130 --> 00:44:28.560
Dragging window is really
faster on 10 than on 9,

00:44:28.610 --> 00:44:31.180
and that's because you have
your double buffered windows.

00:44:31.250 --> 00:44:35.640
So as you move the window outside,
uncovering another window,

00:44:35.780 --> 00:44:37.430
you don't have to
repaint the other window.

00:44:37.430 --> 00:44:41.600
You don't have to go through the
painting code of that other app.

00:44:41.600 --> 00:44:45.910
So the drag window function is
going to be faster on Mac OS X.

00:44:45.910 --> 00:44:47.320
That's built in.

00:44:47.760 --> 00:44:50.950
On the other hand,
let's take access to low mems.

00:44:51.020 --> 00:44:53.790
Okay, on 9,
an access to a low mem may just

00:44:53.890 --> 00:44:56.590
be a function call and just read,
you know, a memory location.

00:44:56.600 --> 00:44:57.690
Done.

00:44:57.760 --> 00:44:58.740
Okay?

00:44:58.840 --> 00:45:04.970
That's, you know, 500 megahertz,
that's a really minuscule

00:45:04.970 --> 00:45:06.890
fraction of a second.

00:45:07.160 --> 00:45:13.300
On Mac OS X, that state that the accessor
provides may be stored on a server,

00:45:13.330 --> 00:45:16.090
a little server that runs
in a separate process.

00:45:16.090 --> 00:45:19.750
So you may have to do to access
your LOMEM to go through some

00:45:19.750 --> 00:45:22.100
inter-process communication.

00:45:22.230 --> 00:45:25.060
That's four orders of
magnitude difference in the

00:45:25.310 --> 00:45:29.150
performance characteristics,
which means that your applications

00:45:29.150 --> 00:45:33.100
that on 9 was doing in a loop
accessing that LOMEM was just fine.

00:45:33.100 --> 00:45:35.080
Nobody would ever notice that.

00:45:35.100 --> 00:45:38.340
On 10, suddenly,
that becomes the biggest thing, okay,

00:45:38.340 --> 00:45:40.660
performance-wise,
for your application and

00:45:40.690 --> 00:45:42.010
dwarfs all the real work.

00:45:42.080 --> 00:45:46.500
And so you need to really think,
and I implore you to think

00:45:46.500 --> 00:45:49.820
about tuning your application
after the initial bring-up.

00:45:50.140 --> 00:45:53.100
That is key to our success.

00:45:53.890 --> 00:45:56.910
Now, to help you,
we have put a lot of effort

00:45:56.910 --> 00:45:58.750
on performance tools.

00:45:58.860 --> 00:46:02.120
We've included a number of
those on the developer CD,

00:46:02.190 --> 00:46:05.300
both applications,
developer applications, you know,

00:46:05.300 --> 00:46:09.350
the GUI kind of things,
and also command line tools.

00:46:09.360 --> 00:46:10.760
Why command line?

00:46:10.760 --> 00:46:13.050
Well,
that's the Heisenberg principle when

00:46:13.050 --> 00:46:16.600
you do kind of performance tuning,
which is you don't necessarily want to

00:46:16.600 --> 00:46:18.440
perturb the system you're observing.

00:46:18.440 --> 00:46:21.530
And with command lines,
that's a very lightweight

00:46:21.550 --> 00:46:22.980
way of doing things.

00:46:22.980 --> 00:46:27.550
Also, you can leverage some of the Unix
facilities for piping things and

00:46:27.700 --> 00:46:32.770
scripting and all that stuff to extract
the kind of information you look for.

00:46:33.750 --> 00:46:38.760
All our tools work without
requiring recompilation or

00:46:38.830 --> 00:46:41.360
relinking of your application.

00:46:41.410 --> 00:46:44.160
This morning,
you saw a sampler demonstrated.

00:46:44.220 --> 00:46:46.880
There was no, well,
there was some recompiling,

00:46:46.880 --> 00:46:54.440
but you were attaching,
Avi was attaching to the running

00:46:54.440 --> 00:46:55.710
process without compiling in a
special mode for that application.

00:46:56.590 --> 00:47:00.340
We have put a lot of effort on
those tools so that you can analyze

00:47:00.560 --> 00:47:03.000
and optimize your application.

00:47:03.100 --> 00:47:06.020
All the things that
matter for performance,

00:47:06.020 --> 00:47:12.890
like memory usage, like CPU,
like how many system calls

00:47:12.910 --> 00:47:16.700
your application does,
or like drawing.

00:47:16.750 --> 00:47:20.790
You can also optimize the system
because your application may actually

00:47:20.790 --> 00:47:24.510
be fine from a performance standpoint,
but totally take over

00:47:24.670 --> 00:47:28.970
some of the other servers,
generate a lot of work for some of

00:47:28.970 --> 00:47:30.700
the other servers of the machine.

00:47:30.790 --> 00:47:35.300
So we have some tools to
look at the system behavior.

00:47:35.390 --> 00:47:40.200
And we have some resources via a book,
a great book on performance.

00:47:40.310 --> 00:47:44.200
So now what I would like to do
is invite Robert Bowdidge of

00:47:44.200 --> 00:47:48.620
the Performance Tools group,
master of the performance tools,

00:47:48.620 --> 00:47:50.890
to demonstrate some of the tools.

00:47:50.990 --> 00:47:51.590
Thank you, Bertrand.

00:47:55.400 --> 00:47:57.910
I'd like to show you a couple more
of the performance tools that are

00:47:57.910 --> 00:48:00.230
available on the Developer Tools CD.

00:48:00.260 --> 00:48:03.390
The first one I'd like to show
you is called malloc-debug.

00:48:03.630 --> 00:48:07.240
And the idea of malloc_debug is
it helps you understand how your

00:48:07.240 --> 00:48:10.720
application is using heap memory,
that is memory you allocate yourself

00:48:10.720 --> 00:48:12.980
via request to malloc or to new pointer.

00:48:12.990 --> 00:48:15.630
Now,
memory use on 10 is extremely important

00:48:15.740 --> 00:48:17.580
because it's so easy to ask for.

00:48:17.580 --> 00:48:20.560
You simply say give me some memory
and the virtual memory system

00:48:20.560 --> 00:48:22.320
gives you the extra pages you need.

00:48:22.330 --> 00:48:25.900
And if the heap needs to grow,
it grows without limits.

00:48:25.900 --> 00:48:29.580
So you have no bounds on how
much memory you might ask for.

00:48:29.600 --> 00:48:33.810
The problem is that if your application
starts getting a little bit greedy

00:48:33.810 --> 00:48:36.420
about how much memory it uses,
it can get to the point where your

00:48:36.480 --> 00:48:39.880
application and the rest of the
system may require more memory than is

00:48:39.880 --> 00:48:42.600
actually available in physical memory.

00:48:42.630 --> 00:48:45.050
And at that point,
the system needs to actually

00:48:45.070 --> 00:48:47.970
start taking memory out,
writing it to disk,

00:48:47.970 --> 00:48:49.140
bringing new memory in.

00:48:49.150 --> 00:48:50.120
That's called paging.

00:48:50.150 --> 00:48:52.790
And as a result,
your application will start running

00:48:52.790 --> 00:48:55.980
at the speed of the disk rather
than the speed of the processor.

00:48:56.040 --> 00:48:58.940
So whatever you can do to keep
your application's footprint

00:48:58.940 --> 00:49:01.780
as small as possible will help
improve the performance of

00:49:01.790 --> 00:49:03.070
your app and of the system.

00:49:03.120 --> 00:49:04.200
Thank you.

00:49:04.780 --> 00:49:09.060
So with malloc-debug,
what we can do is we can launch an app.

00:49:09.280 --> 00:49:15.130
And in this case, we need something that
is badly performing,

00:49:15.130 --> 00:49:15.130
so I naturally decided to
choose one of my own apps.

00:49:16.500 --> 00:49:18.020
Nothing like rubbing your nose in it.

00:49:18.100 --> 00:49:19.390
This is called Thread Viewer.

00:49:19.410 --> 00:49:21.200
You don't have to know
very much about it.

00:49:21.200 --> 00:49:23.980
All you have to know is it's a
prototype of a performance tool.

00:49:24.060 --> 00:49:28.600
You can select an application,
in this case the dock,

00:49:28.600 --> 00:49:34.700
and it gives you a timeline view of
what's going on in that application.

00:49:34.700 --> 00:49:38.920
And the colors will change
depending on whether the various

00:49:38.920 --> 00:49:38.920
threads are running or not.

00:49:38.920 --> 00:49:38.920
So we'll move across the
dock and we see action.

00:49:39.720 --> 00:49:43.560
Now, to get to that point,
Thread Viewer needed about

00:49:43.560 --> 00:49:46.070
2.5 megabytes of memory.

00:49:46.390 --> 00:49:50.360
Actually,
2.7 megabytes of memory on this run.

00:49:50.360 --> 00:49:59.480
This seems a little excessive and
I'd like to try to find out why.

00:49:59.480 --> 00:49:59.750
Now, the primary abstraction that
mallocdebug uses is a call graph.

00:50:00.070 --> 00:50:03.500
and so it shows you all the ways that
various functions call each other and

00:50:03.500 --> 00:50:06.600
then it overlays on top of that the
information about exactly how much

00:50:06.660 --> 00:50:08.500
memory was allocated at each point.

00:50:08.630 --> 00:50:14.600
So for example,
we can see right here that

00:50:14.700 --> 00:50:17.720
in main and below we used
about 1.4 megabytes of memory.

00:50:17.720 --> 00:50:17.720
The rest was used on other threads.

00:50:18.400 --> 00:50:26.930
1.3 megabytes of that was in the
function called NSApplicationMain

00:50:26.930 --> 00:50:26.930
that was called by Main.

00:50:26.930 --> 00:50:26.930
And that's the entry
to the Cocoa routines.

00:50:27.150 --> 00:50:31.840
Also, there was a function called by main
called allocate unneeded buffer.

00:50:31.970 --> 00:50:35.460
That called malloc directly and there's
currently one buffer of 10,000 bytes

00:50:35.510 --> 00:50:37.020
that was allocated by that function.

00:50:37.300 --> 00:50:38.040
This seems suspicious.

00:50:38.190 --> 00:50:41.170
I'll come back to that later I suppose.

00:50:42.230 --> 00:50:45.760
So if you understand how your
program's built from main down,

00:50:45.760 --> 00:50:49.330
you can look at the call tree and you
can try to find the expensive routines.

00:50:49.420 --> 00:50:51.030
Sometimes that's not the right way to go.

00:50:51.030 --> 00:50:55.740
Sometimes you care more about,
for example, who's using malloc directly.

00:50:55.840 --> 00:51:04.300
And so we can see here, for example,
that we used about 856,000

00:51:04.300 --> 00:51:04.300
bytes of memory allocated when
we called malloc directly.

00:51:05.750 --> 00:51:09.660
About 555K of that was in NSZoneMalloc,
which is the Objective

00:51:09.660 --> 00:51:10.940
C version of malloc.

00:51:10.960 --> 00:51:14.490
And about 356,000 bytes of
that was one we called NSImage,

00:51:14.490 --> 00:51:17.820
which called NSZoneMalloc,
which called malloc.

00:51:17.820 --> 00:51:19.730
Now, this is suspicious because,
as you can see,

00:51:19.740 --> 00:51:21.450
thread viewer isn't that complex.

00:51:21.450 --> 00:51:24.760
There aren't a lot of icons,
there aren't a lot of images.

00:51:24.980 --> 00:51:27.920
So something seems wrong here.

00:51:27.920 --> 00:51:32.360
So what we can do is we can say,
who called NSReadImage?

00:51:32.360 --> 00:51:34.890
we can go up the call tree,
going through the various

00:51:34.890 --> 00:51:37.020
app kit libraries.

00:51:39.150 --> 00:51:44.500
and we end up in a
function called Image for

00:51:44.500 --> 00:51:44.500
Process that's in Thread Viewer.

00:51:44.780 --> 00:51:47.500
And luckily I know my code
and I know what this does.

00:51:47.550 --> 00:51:51.840
That's the function that populates
ThreadViewer's attached dialog box.

00:51:52.120 --> 00:51:55.640
It says here are the applications
that you can examine.

00:51:55.770 --> 00:51:59.930
So what's happening here,
because we saw all these icons,

00:52:00.040 --> 00:52:02.190
these things that must
be icons in memory,

00:52:02.210 --> 00:52:04.610
is that Thread Viewer is
trying to be intelligent.

00:52:04.900 --> 00:52:07.700
It's trying to cache the
icons so that the next time

00:52:07.840 --> 00:52:11.500
we bring up that dialog box,
we don't have to go out to disk

00:52:11.500 --> 00:52:13.660
and read those bytes again.

00:52:13.660 --> 00:52:15.940
The problem is, as a result,
we're wasting about

00:52:15.940 --> 00:52:20.020
300,000 bytes of memory,
about 75 virtual memory pages,

00:52:20.020 --> 00:52:22.760
just to keep those icons in memory.

00:52:22.760 --> 00:52:25.060
And if we start running out of space,
all we're going to do is page

00:52:25.060 --> 00:52:27.600
them right out to disk again.

00:52:27.650 --> 00:52:29.490
This isn't very bright.

00:52:29.720 --> 00:52:37.510
Instead, what we want to have happen is
when that dialog box goes away,

00:52:37.520 --> 00:52:43.920
we want the icons to go away so
they're not sitting in memory

00:52:43.920 --> 00:52:44.480
so there's more memory available
for the rest of the system.

00:52:44.480 --> 00:52:44.480
This is an example of how Malik Debug
can help you track down memory problems.

00:52:48.530 --> 00:52:51.580
The second tool I want to show you
is called Quartz Debug and it's

00:52:51.580 --> 00:52:53.200
out of the Core Graphics team.

00:52:53.200 --> 00:52:56.030
The idea is that it helps you
understand how you're doing

00:52:56.030 --> 00:52:57.840
drawing in your application.

00:52:57.840 --> 00:52:59.600
We can again bring up Thread Viewer.

00:52:59.630 --> 00:53:03.560
Let's look at the dock again.

00:53:05.560 --> 00:53:09.080
And you can turn on this option called
Flash Screen Updates in Quartz Debug.

00:53:09.250 --> 00:53:13.260
And what it does is every time
that you try to do a drawing event,

00:53:13.280 --> 00:53:15.110
it colors the screen yellow.

00:53:15.300 --> 00:53:17.480
In this way, you can identify where
drawing's happening.

00:53:17.620 --> 00:53:20.710
In this case,
Thread Viewer has a one second timer

00:53:20.710 --> 00:53:22.690
that causes a redraw to happen.

00:53:22.790 --> 00:53:26.940
We can also see when we resize the
window how much drawing goes on.

00:53:26.960 --> 00:53:30.840
And we might be able to detect
cases such as when we draw the same

00:53:30.840 --> 00:53:34.290
object twice in the same redraw
cycle where we're being inefficient.

00:53:36.380 --> 00:53:38.450
Oh, by the way, there's a really cool
feature in Thread Viewer.

00:53:38.450 --> 00:53:39.300
Let me show you this.

00:53:39.360 --> 00:53:41.090
There's a pause button.

00:53:41.090 --> 00:53:45.390
And the reason why you need that
is that if you're ever looking at

00:53:45.390 --> 00:53:49.760
information going by and you say,
"Hey, I want to see what's going

00:53:49.970 --> 00:53:54.250
on there and see exactly what
functions I was executing then,"

00:53:54.250 --> 00:53:56.340
you can hit the pause button.

00:53:56.340 --> 00:54:01.000
And what that does is it stops the
application that you're examining,

00:54:01.000 --> 00:54:01.000
then it stops the
collecting of information.

00:54:01.000 --> 00:54:01.000
However--oh, no.

00:54:03.150 --> 00:54:05.820
As you can see, ThreadViewer is still
trying to do the redraws.

00:54:05.880 --> 00:54:08.810
We can see in QuartzDebug that the
screen is still flashing yellow.

00:54:08.920 --> 00:54:10.960
And this implies that
I did something really bad.

00:54:11.010 --> 00:54:13.700
Although I'm correctly pausing the
application that I'm examining,

00:54:13.750 --> 00:54:18.300
I'm pausing the data collection,
I forgot to pause the redrawing screen.

00:54:18.350 --> 00:54:20.260
And as a result, I'm wasting CPU time.

00:54:20.260 --> 00:54:24.700
I'm taking time away from other processes
by causing that redraw to happen.

00:54:24.750 --> 00:54:28.120
This is one of those bugs that would be
really hard to track down any other way.

00:54:28.180 --> 00:54:30.100
But luckily,
QuartzDebug can make it immediately

00:54:30.230 --> 00:54:31.220
pop out that you have a problem.

00:54:31.220 --> 00:54:34.580
You can immediately perceive that
you have problems with your drawing.

00:54:34.610 --> 00:54:36.590
These are only two of the
tools that are available.

00:54:36.620 --> 00:54:39.000
There are several others
on the Developer Tools CD.

00:54:39.210 --> 00:54:41.140
Please read the performance
book to learn more.

00:54:41.170 --> 00:54:43.130
And if you'd like to learn
more about these tools,

00:54:43.150 --> 00:54:46.340
there is a session on Thursday on
the performance tools.

00:54:46.370 --> 00:54:47.530
Thank you, Bertrand.

00:54:47.550 --> 00:54:49.370
BERTHAND COOPER: Thanks, Bill.

00:54:53.920 --> 00:54:59.300
And in fact,
this is the roadmap to some of the

00:54:59.300 --> 00:54:59.300
sessions talking about performance.

00:55:01.350 --> 00:55:08.200
So the number nine great thing that
I selected is of course great frameworks.

00:55:08.330 --> 00:55:15.620
We have great frameworks and Classic is
wonderful and it enables us to transition

00:55:15.620 --> 00:55:18.790
smoothly and to transition our users.

00:55:19.310 --> 00:55:23.180
But I want to talk
about Carbon and Cocoa.

00:55:23.180 --> 00:55:26.700
And Scott in this room,
Scott Foster in this room is going to

00:55:26.700 --> 00:55:28.600
go into more details about those two.

00:55:28.600 --> 00:55:35.390
So what I wanted to do is bring in my
kind of personal perspective on Carbon.

00:55:36.170 --> 00:55:39.460
We had a challenge with Carbon.

00:55:39.460 --> 00:55:43.800
The challenge was to take the
traditional Mac toolbox and put

00:55:43.800 --> 00:55:47.610
underneath it a modern operating system.

00:55:47.840 --> 00:55:52.980
And there were a lot of people who said
this could not be done even within Apple.

00:55:53.790 --> 00:55:58.340
And it could not be done because the
toolbox had been designed a long,

00:55:58.340 --> 00:56:01.530
long, long time ago, nearly 20 years ago.

00:56:01.590 --> 00:56:06.000
It was designed when the
file system was still flat.

00:56:06.070 --> 00:56:11.800
It was designed with everything running
its own in one giant address space.

00:56:11.800 --> 00:56:15.390
And those assumptions
were embodied in the code,

00:56:15.520 --> 00:56:18.780
in the Mac OS 9 code, all over the place.

00:56:18.800 --> 00:56:21.510
And of course,
there was totally different

00:56:21.510 --> 00:56:23.030
low-level services.

00:56:23.030 --> 00:56:25.740
Okay, networking, totally different.

00:56:25.800 --> 00:56:29.250
Open transport had to be there,
otherwise it cannot be done.

00:56:29.250 --> 00:56:33.590
File system, you have to assume a
different file system,

00:56:33.750 --> 00:56:35.860
one that has resource box.

00:56:35.870 --> 00:56:40.610
Otherwise, there's no way you can
get the toolbox to run.

00:56:41.300 --> 00:56:42.780
So those were some of the challenges.

00:56:43.010 --> 00:56:44.560
We also had some goals.

00:56:44.670 --> 00:56:49.550
We wanted the carbonization
process to be a tune-up for you,

00:56:49.780 --> 00:56:52.010
not a rewrite.

00:56:52.290 --> 00:56:53.370
We wanted to modernize.

00:56:53.430 --> 00:56:56.890
At the same time,
we were doing this very smooth tune-up.

00:56:56.980 --> 00:57:00.060
We wanted to enable you
to do things like Unicode,

00:57:00.080 --> 00:57:03.440
okay, with again,
without rewriting your application.

00:57:03.490 --> 00:57:06.760
And we wanted to provide
tools to help you,

00:57:06.760 --> 00:57:09.160
like the Carbon Data Tools.

00:57:09.260 --> 00:57:13.280
So I think it's fair that we've
accomplished a number of those goals,

00:57:13.280 --> 00:57:14.160
if not all.

00:57:14.250 --> 00:57:17.920
But we've learned quite a
lot of things along the way.

00:57:18.060 --> 00:57:20.590
We took the Mac OS X code
base for Carbon,

00:57:20.590 --> 00:57:24.810
for the toolbox,
and little by little stretched

00:57:24.870 --> 00:57:29.520
it in various dimensions in
order to get the proper layering.

00:57:29.560 --> 00:57:31.600
This took a lot of time.

00:57:31.720 --> 00:57:39.680
We spent a lot of efforts internally
disentangling this spaghetti bowl.

00:57:41.010 --> 00:57:46.180
However, because we started with Mac OS 9
and evolved it to get the

00:57:46.180 --> 00:57:50.240
Carbon Toolbox for Mac OS X,
it meant that we had a high

00:57:50.240 --> 00:57:51.900
degree of compatibility.

00:57:51.900 --> 00:57:56.890
It meant that we didn't have to
rewrite every single error code.

00:57:56.920 --> 00:58:01.990
And error codes, as you know,
are something which just takes time

00:58:01.990 --> 00:58:05.450
to rediscover one by one all the
exceptional situations that you

00:58:05.590 --> 00:58:07.900
need to do in those situations.

00:58:07.900 --> 00:58:11.130
We didn't have to do that,
and that meant for you

00:58:11.200 --> 00:58:12.900
greater compatibility.

00:58:13.450 --> 00:58:17.280
But of course what we've learned,
the hard way for our own apps,

00:58:17.280 --> 00:58:20.080
is that carbonization is not enough.

00:58:20.170 --> 00:58:24.490
You need to do, we need to do,
some performance tuning.

00:58:25.490 --> 00:58:28.840
So this was kind of my
personal perspective on Carbon.

00:58:28.840 --> 00:58:31.840
There's a lot of sessions
that talk about Carbon.

00:58:31.880 --> 00:58:37.680
That's, I don't know if it's half,
but it's maybe 30% of the conference.

00:58:37.680 --> 00:58:39.460
So these are some of the pointers.

00:58:39.460 --> 00:58:44.340
The key session is probably
the one just after this one.

00:58:45.940 --> 00:58:50.260
Cocoa is a little less
well-known for many of you.

00:58:50.260 --> 00:58:52.030
So what is Cocoa?

00:58:52.170 --> 00:58:57.180
It gives access to all the
facilities of the machine.

00:58:57.340 --> 00:58:58.900
It's fully featured.

00:58:58.900 --> 00:59:01.180
It's object-oriented.

00:59:01.200 --> 00:59:01.980
It's very modern.

00:59:02.000 --> 00:59:06.770
What enables you is to do
rapid application development.

00:59:06.770 --> 00:59:11.730
And what that means is that
instead of working very hard to

00:59:11.730 --> 00:59:15.640
get your engine in perfect shape,
okay, and polishing your engine

00:59:15.640 --> 00:59:19.730
and kind of tuning it,
and then afterwards putting a UI as

00:59:19.730 --> 00:59:23.890
the afterthought on top of your engine,
you can totally invert

00:59:23.890 --> 00:59:26.060
this development cycle.

00:59:26.060 --> 00:59:28.060
You start with the UI.

00:59:28.060 --> 00:59:31.430
You are an interface builder
and you start wiring up things.

00:59:31.440 --> 00:59:31.980
This is the way to do it.

00:59:31.980 --> 00:59:34.040
This is the way I'd like
my app to look like.

00:59:34.100 --> 00:59:34.880
It's all fake.

00:59:34.880 --> 00:59:35.660
There's no reality.

00:59:35.660 --> 00:59:37.200
There's no engine underneath.

00:59:37.300 --> 00:59:40.910
Okay, but it enables you to
iterate with the UI.

00:59:41.020 --> 00:59:44.340
And little by little,
you put underneath the UI all the

00:59:44.640 --> 00:59:47.080
engine codes that you'd like to have.

00:59:47.100 --> 00:59:49.560
And at some point, you have your app.

00:59:49.740 --> 00:59:53.480
So this is a very different
kind of way of thinking.

00:59:54.530 --> 00:59:58.660
Now, in terms of structure,
Cocoa has two layers.

00:59:58.710 --> 01:00:05.180
There's a very clear distinction between
what's non-UI and what's UI-based.

01:00:05.380 --> 01:00:09.560
So the non-UI set of classes
is called foundation.

01:00:09.740 --> 01:00:12.440
The first image that comes
to my mind when I think about

01:00:12.540 --> 01:00:16.100
foundation is a set of Lego bricks.

01:00:16.130 --> 01:00:20.860
And from day one,
we wanted to have foundation classes

01:00:20.860 --> 01:00:23.020
really kind of plug into each other.

01:00:23.180 --> 01:00:26.530
It's kind of algebraic,
the notion that everything

01:00:26.530 --> 01:00:27.830
just fits with everything.

01:00:27.840 --> 01:00:32.240
And nowadays,
Legos have totally diverged.

01:00:32.240 --> 01:00:36.780
You have like Star Wars Lego,
the Rock Raiders, you know,

01:00:36.780 --> 01:00:38.140
the Adventureland.

01:00:38.140 --> 01:00:41.680
And, you know, if you have kids,
you know all those categories of Legos.

01:00:41.680 --> 01:00:45.140
And they're all very bizarre shapes,
okay?

01:00:45.280 --> 01:00:46.760
No reuse here.

01:00:46.810 --> 01:00:48.830
It's no longer object-oriented.

01:00:48.920 --> 01:00:51.440
But in my days...

01:00:52.260 --> 01:00:58.880
in my days the basic brick was 2x4x3
right and you had you know different

01:00:58.900 --> 01:01:03.190
variations on that and you had like
five colors all great colors okay just

01:01:03.190 --> 01:01:09.250
very different it was orthogonal it was
an orthogonal toolkit set of bricks and

01:01:09.250 --> 01:01:16.220
this is a feeling that you have when you
use foundation few concepts constantly

01:01:16.220 --> 01:01:21.480
reused there's a few collection data
types you know string data arrays

01:01:21.480 --> 01:01:25.270
dictionary that kind of thing also
that's where we put the xml parser

01:01:25.270 --> 01:01:29.460
because obviously it's non-ui things and
then you have facilities to deal with

01:01:29.680 --> 01:01:34.970
the rest of the operating system things
like abstracting the task abstracting

01:01:34.970 --> 01:01:40.570
a thread you know all those kind of high
level functionality so that's foundation

01:01:41.150 --> 01:01:45.130
The App Kit is the set of
UI classes that matches.

01:01:45.280 --> 01:01:47.320
It's a rich set of controls.

01:01:47.410 --> 01:01:52.070
You saw this morning a demonstration
that Scott did of hooking up like

01:01:52.120 --> 01:01:56.200
some App Kit widgets with an extra
thousand lines of code and you get

01:01:56.200 --> 01:02:01.380
something that is close to iMovie
in basic functionality at least.

01:02:02.200 --> 01:02:07.230
The paradigm that's followed
consistently for the UI classes is

01:02:07.230 --> 01:02:12.720
the model view controller paradigm
coming from the early 80s from the

01:02:12.720 --> 01:02:16.750
small talk kind of school of thought.

01:02:16.780 --> 01:02:21.670
You have some low level objects, buttons,
you know, windows, things like that,

01:02:21.750 --> 01:02:22.820
and some high level objects.

01:02:22.820 --> 01:02:27.170
An entire tech subsystem with, you know,
phones, with rulers, all that stuff,

01:02:27.180 --> 01:02:30.020
you know, with very little cost
for you to use that.

01:02:30.430 --> 01:02:33.700
A one-liner or actually it
would be better to say the drag

01:02:33.980 --> 01:02:36.040
and drop in interface builder.

01:02:36.040 --> 01:02:40.720
You have an entire outline view,
same thing, drag and drop,

01:02:40.720 --> 01:02:42.000
you have it in your app.

01:02:42.000 --> 01:02:45.750
Or even the reusable toolbars
that you see in mail or

01:02:45.750 --> 01:02:47.500
finder can be done that way.

01:02:47.500 --> 01:02:52.010
And of course it fully
fits with foundation.

01:02:54.610 --> 01:02:59.300
So why is Cocoa particularly interesting
for writing a new application?

01:02:59.380 --> 01:03:02.780
Well,
let's look at some of our application.

01:03:02.780 --> 01:03:07.780
MEL is a pretty rich
feature set MEL program.

01:03:07.780 --> 01:03:12.150
I mean, maybe we can add a few features,
and we are getting a lot of feedback

01:03:12.370 --> 01:03:17.600
from all of you on all the bells and
whistles that we should add into MEL.

01:03:17.600 --> 01:03:22.380
But it has some basic functionality,
and that's 75,000 lines of code.

01:03:22.390 --> 01:03:26.360
That is not a lot for that
amount of functionality.

01:03:26.660 --> 01:03:30.290
And actually,
about 20,000 lines of that is reusable

01:03:30.290 --> 01:03:33.020
code that's packaged in your library.

01:03:33.660 --> 01:03:38.750
The TextEdit application is
a pretty good word processor.

01:03:38.990 --> 01:03:44.600
It has a ruler, fonts,
it can embed graphics.

01:03:44.600 --> 01:03:45.950
It's pretty rich.

01:03:46.260 --> 01:03:48.600
It's only 3,000 lines of code.

01:03:48.690 --> 01:03:52.600
In fact, you have that code on your
CD because it's example code.

01:03:53.730 --> 01:03:59.360
And you can make a simple text editor,
you know, like the simple text of the old

01:03:59.480 --> 01:04:01.590
times with just 50 lines of code.

01:04:01.590 --> 01:04:05.170
I believe that's another kind of
tutorial or something like that.

01:04:05.260 --> 01:04:10.200
So you are getting a lot of
functionality with Cocoa for free.

01:04:10.340 --> 01:04:13.240
And that's kind of the moral about Cocoa.

01:04:14.210 --> 01:04:18.460
Here are some sessions
that talk about Cocoa.

01:04:18.500 --> 01:04:21.360
And now what I would
like to do is invite C.K.

01:04:21.360 --> 01:04:24.510
Haun, who is the director in
developer relationships,

01:04:24.540 --> 01:04:28.370
to give us a taste of Carbon and Cocoa.

01:04:37.700 --> 01:04:43.580
Mac OS X is an extremely powerful engine,
but an engine is not

01:04:44.340 --> 01:04:47.300
what our customers buy.

01:04:47.300 --> 01:04:50.320
They buy applications that
take advantage of that engine.

01:04:50.320 --> 01:04:54.910
They buy people's applications that
have looked at the things in the core,

01:04:54.910 --> 01:04:58.050
that have looked at the architecture,
that have looked at our

01:04:58.050 --> 01:05:00.260
frameworks and said,
"That's really great.

01:05:00.320 --> 01:05:02.520
If I put this in it,
then somebody's going to have

01:05:02.520 --> 01:05:06.650
something even more powerful and even
more exciting." So this afternoon,

01:05:06.750 --> 01:05:10.980
what I'd like to do is bring up some
developers who've had that experience,

01:05:10.980 --> 01:05:13.210
who've brought their
applications to Mac OS X,

01:05:13.270 --> 01:05:17.440
so they can give you some of their
perspective on the task you have ahead

01:05:17.440 --> 01:05:20.780
of you over the next three to six months.

01:05:20.820 --> 01:05:27.220
I'd like to start by bringing up
our representative from Adobe,

01:05:27.220 --> 01:05:30.250
from the Adobe Acrobat team.

01:05:30.380 --> 01:05:31.380
Yeah.

01:05:31.730 --> 01:05:32.370
Vince?

01:05:39.190 --> 01:05:46.200
So Acrobat Reader 5 has a distinction
of being the first Adobe application

01:05:46.200 --> 01:05:46.200
to run natively on Mac OS X.

01:05:46.480 --> 01:05:55.620
We actually shipped Reader 5.0 nine days
after OS 10 shipped on the Acrobat 5 CD.

01:05:55.870 --> 01:05:59.350
We're very pleased to have
Acrobat Reader 5 available for 10

01:05:59.390 --> 01:06:04.780
users because unlike the preview
application that comes with 10,

01:06:04.780 --> 01:06:10.520
Reader 5.0 supports several advanced
features that people like to use.

01:06:10.520 --> 01:06:14.020
For example, you can find text,
you have bookmark support,

01:06:14.020 --> 01:06:17.520
you also can do form fill-ins,
support annotations,

01:06:17.520 --> 01:06:19.600
and other such features.

01:06:19.600 --> 01:06:23.550
We started carbonizing
Acrobat Reader 5 in late 1999,

01:06:23.550 --> 01:06:30.160
and by January of 2000 we had it
running on an early version of OS X.

01:06:30.160 --> 01:06:33.900
During that process we discovered
something fairly interesting.

01:06:33.900 --> 01:06:39.740
We actually discovered that OS X is
an incredible debugging tool.

01:06:39.740 --> 01:06:45.550
Simply the fact that it has protected
memory helps us find memory corruption

01:06:45.550 --> 01:06:48.500
problems we never found otherwise.

01:06:48.500 --> 01:06:50.950
Often these types of problems
are notoriously hard to find,

01:06:50.950 --> 01:06:52.110
they're intermittent.

01:06:52.150 --> 01:06:56.830
With OS X you do something bad,
it stops you, tells you where you did it,

01:06:56.830 --> 01:06:58.010
and you go on.

01:06:58.570 --> 01:07:04.480
So Acrobat Reader is very
much a full Aqua application.

01:07:04.490 --> 01:07:08.740
It has the full OS X look and feel,
really throbbing icons.

01:07:08.740 --> 01:07:13.150
We have multilingual
text fields and even,

01:07:13.150 --> 01:07:17.370
most importantly, a really nice icon.

01:07:21.110 --> 01:07:23.380
So, as I said,
we learned an awful lot doing the

01:07:23.430 --> 01:07:27.670
OS X version of Acrobat Reader 5,
and we're going to take this knowledge,

01:07:27.670 --> 01:07:30.300
go back,
and make the next Adobe applications

01:07:30.300 --> 01:07:31.940
run on OS X even better.

01:07:32.000 --> 01:07:33.450
Thank you.

01:07:35.020 --> 01:07:36.000
Thank you very much.

01:07:36.000 --> 01:07:37.290
Thank you very much, Vince.

01:07:37.290 --> 01:07:40.180
That's Vince Parsons from Adobe.

01:07:40.350 --> 01:07:44.940
Next I'd like to bring up
Lorin Rivers from Real Basic.

01:07:45.140 --> 01:07:49.210
Real Basic is an extremely important
development tool for a lot of our

01:07:49.210 --> 01:07:53.860
introductory beginning programmers and
some of the high end professionals.

01:07:53.880 --> 01:07:54.380
Lorin.

01:07:54.720 --> 01:07:55.820
Thanks very much C.K.

01:07:55.840 --> 01:07:57.960
How's it going?

01:07:58.300 --> 01:08:05.960
We've had a version of Real Basic that
ran on Mac OS X since last year's WWDC,

01:08:05.960 --> 01:08:09.220
and we actually shipped
our Carbon version of

01:08:09.260 --> 01:08:13.320
Real Basic before Mac OS X did,
because we were ready.

01:08:13.510 --> 01:08:18.140
So... I mean, no comment on... We were
ready to ship our thing.

01:08:18.200 --> 01:08:21.460
Our product actually
runs on Mac OS 7.6.1,

01:08:21.490 --> 01:08:26.060
on a 68K machine,
all the way up through Mac OS X.

01:08:26.060 --> 01:08:29.900
The beautiful thing is, Quadro 660 AV,
like there are some at

01:08:29.900 --> 01:08:33.180
my daughter's school,
running Real Basic,

01:08:33.180 --> 01:08:37.430
you can ride a Mac OS X app on
a Quadro 660 AV running 7.6.1.

01:08:37.930 --> 01:08:40.240
This is pretty cool.

01:08:41.620 --> 01:08:44.810
And of course,
there's other operating systems

01:08:44.810 --> 01:08:48.590
out there besides Mac ones,
like there's Windows OS.

01:08:48.730 --> 01:08:52.930
And you can also write
Windows applications with Real Basic,

01:08:53.010 --> 01:08:54.340
which is also pretty cool.

01:08:54.340 --> 01:08:57.620
And of course,
we've had a lot of experience

01:08:57.700 --> 01:09:01.560
with Carbon being involved
with it for so long.

01:09:01.660 --> 01:09:04.940
And what people have been saying about it
being a great debugging tool and a great

01:09:04.940 --> 01:09:07.730
excuse to refactor is absolutely true.

01:09:07.850 --> 01:09:11.580
So this version of Real Basic,
it's version 3.2.

01:09:11.580 --> 01:09:16.480
We've actually had two revisions
of Real Basic since we shipped.

01:09:16.650 --> 01:09:19.940
And this version has got more
Mac OS X goodness than any

01:09:20.390 --> 01:09:22.100
previous of our releases.

01:09:22.180 --> 01:09:25.540
In fact, we've added-- we're actually
eating our own caviar.

01:09:25.650 --> 01:09:32.230
And we're starting to reuse a lot of
our own objects in our own application.

01:09:32.240 --> 01:09:37.610
So for example, now the project window
is a Real Basic list box.

01:09:37.740 --> 01:09:41.970
And the great thing about eating your
own caviar is that it's an opportunity

01:09:41.970 --> 01:09:46.580
to add new features that your users
have been demanding for a lot of time.

01:09:46.580 --> 01:09:50.740
And it now becomes so much more urgent
when you need to use them yourself.

01:09:50.980 --> 01:09:57.300
So what I'm going to build
today is the two-minute app.

01:09:57.500 --> 01:10:01.150
So the way Real Basic works is
you drag a control from your tool

01:10:01.150 --> 01:10:03.380
palette into your window editor.

01:10:03.380 --> 01:10:04.630
What you see is what you get.

01:10:04.780 --> 01:10:07.480
We also are big fans of support.

01:10:07.480 --> 01:10:09.110
We're supporting UI standards.

01:10:09.200 --> 01:10:13.060
So you can see my little dash lines
that are helping me keep within the

01:10:13.060 --> 01:10:16.680
parameters that are the UI guidelines.

01:10:16.740 --> 01:10:18.860
As always,
you should comment your code and you

01:10:18.860 --> 01:10:20.680
should name things intelligently.

01:10:20.680 --> 01:10:26.770
So for example, I'm going to-- well,
I'll leave that edit field for now.

01:10:26.970 --> 01:10:28.280
I'll drag another.

01:10:28.280 --> 01:10:30.280
This is another Control-A-Push button.

01:10:30.300 --> 01:10:36.660
And Apple's taken a lot of
really great ideas that we have,

01:10:36.790 --> 01:10:39.940
and implemented them in their products,
like there's iterative

01:10:40.050 --> 01:10:41.570
development and stuff.

01:10:41.830 --> 01:10:43.460
Great minds think alike, right?

01:10:43.590 --> 01:10:48.850
So using Real Basic,
you can be iterative yourself.

01:10:48.990 --> 01:10:51.920
So I'm going to just start
off by doing a sample.

01:10:52.020 --> 01:10:56.660
For example, I want to put a message
box up on the screen.

01:10:56.690 --> 01:11:01.450
And I'm going to say the classic
first programming exercise.

01:11:04.200 --> 01:11:06.200
and Michael Rahn.

01:11:06.220 --> 01:11:06.900
Okay.

01:11:06.900 --> 01:11:10.630
That's not a very
interesting application,

01:11:10.720 --> 01:11:14.890
although I could compile it,
compile it for Mac,

01:11:14.890 --> 01:11:18.500
Mac OS X and for Windows, just like this.

01:11:18.500 --> 01:11:23.590
But I'll do something a little more
interesting and I'll go back and say

01:11:23.590 --> 01:11:23.590
what I said I was going to do earlier,
which is give it an interesting name.

01:11:23.590 --> 01:11:23.590
Like I'm going to call this URL field.

01:11:27.600 --> 01:11:34.150
What I'll do is double click my
button again and I'll say URL field.

01:11:34.310 --> 01:11:37.410
Nice thing about Real Basic is
it's auto-completing for me.

01:11:37.450 --> 01:11:39.260
I'm sorry.

01:11:39.480 --> 01:11:41.490
Got ahead of myself.

01:11:41.490 --> 01:11:43.500
I'm going to say show URL.

01:11:43.500 --> 01:11:48.490
Here's my list of things
that could be show.

01:11:48.490 --> 01:11:48.490
Show URL.

01:11:48.600 --> 01:12:00.100
[Transcript missing]

01:12:00.860 --> 01:12:02.910
Okay, there's my website.

01:12:03.050 --> 01:12:13.290
So there I have a
functioning application.

01:12:13.400 --> 01:12:14.360
And just to polish it up a little bit,
I'll go in and make it the proper UI.

01:12:14.870 --> 01:12:18.660
and say go to URL and I'll be done.

01:12:21.460 --> 01:12:23.460
and then we'll just build.

01:12:23.470 --> 01:12:24.200
So there's my build.

01:12:24.200 --> 01:12:27.550
I can say, make all my settings
and there you have it.

01:12:27.550 --> 01:12:32.330
And you've got a compiled application,
100% native, single file,

01:12:32.710 --> 01:12:34.400
double clickable, executable file.

01:12:34.760 --> 01:12:37.390
Thanks very much.

01:12:37.390 --> 01:12:37.390
Appreciate it.

01:12:40.300 --> 01:12:42.100
Thank you, Lauren.

01:12:42.100 --> 01:12:44.460
One thing that we all work
with every day is the internet,

01:12:44.460 --> 01:12:46.340
and one of the important
parts of the internet,

01:12:46.490 --> 01:12:48.800
of course,
is to have a rich multimedia experience.

01:12:48.900 --> 01:12:52.240
So now I'd like to ask Eric Witman
from Macromedia to come up.

01:12:52.390 --> 01:12:57.690
You've already seen
Freehand this morning.

01:12:57.690 --> 01:13:01.930
I've asked Eric to talk a little bit
about Freehand and about some of the

01:13:01.930 --> 01:13:01.930
Flash activity they did for Mac OS X.

01:13:02.610 --> 01:13:03.790
Thanks everyone.

01:13:03.950 --> 01:13:08.690
So yeah, Macromedia, clearly,
is very excited about OS X.

01:13:08.770 --> 01:13:11.560
When we engaged in a conversation
two years ago about OS X,

01:13:11.560 --> 01:13:12.790
we were really excited then.

01:13:12.880 --> 01:13:14.680
We're even more excited now.

01:13:14.830 --> 01:13:18.630
It's pretty, you can tell from
Macromedia's support of,

01:13:18.630 --> 01:13:21.930
you know,
we're the first professional vector

01:13:21.930 --> 01:13:25.150
based application that shipped with OS X.

01:13:25.150 --> 01:13:29.060
We got a lot of support from Apple,
from the developer community.

01:13:29.220 --> 01:13:31.760
The debugging tools, clearly,
are exceptional.

01:13:31.760 --> 01:13:34.840
I'm actually agreeing
with my Adobe counterpart.

01:13:34.840 --> 01:13:36.580
You won't hear that often.

01:13:36.580 --> 01:13:39.560
And, you know,
the public bug base and online

01:13:39.560 --> 01:13:43.870
support system that is available
was crucial in getting a lot of

01:13:43.870 --> 01:13:46.670
our mission critical issues solved.

01:13:47.010 --> 01:13:49.460
We were actually able to ship
a week ahead of schedule,

01:13:49.480 --> 01:13:52.120
and we were able to ship with
the latest version of CarbonLib,

01:13:52.120 --> 01:13:54.130
which Apple provided
ahead of schedule as well,

01:13:54.190 --> 01:13:55.760
which was 1.3.1 for us.

01:13:55.760 --> 01:14:00.820
So that was crucial on the freehand side,
and you guys saw freehand earlier.

01:14:01.020 --> 01:14:04.820
But another application that we've
actually ported at Macromedia and

01:14:04.820 --> 01:14:07.140
have released is Flash Player.

01:14:07.180 --> 01:14:10.570
Flash Player affects 336
million people on the web today.

01:14:10.570 --> 01:14:12.860
That equals 96% of the people on the web.

01:14:12.870 --> 01:14:15.230
They're the most distributed
piece of software on the internet,

01:14:15.230 --> 01:14:18.570
and we're even more viewable than, say,
for example, like Java,

01:14:18.570 --> 01:14:20.360
which is at 86% viewability.

01:14:20.580 --> 01:14:24.170
So it's really important for us when
we're doing any work to make sure that

01:14:24.170 --> 01:14:26.100
our code is as stable as possible.

01:14:26.390 --> 01:14:29.190
And because we ship with so many
browsers and operating systems,

01:14:29.280 --> 01:14:34.400
that the features are consistent
across as many platforms as possible.

01:14:34.420 --> 01:14:38.450
And so one of the things that
we found when we did our initial

01:14:38.590 --> 01:14:43.210
OS X port for Flash Player was that
we actually exposed some memory

01:14:43.210 --> 01:14:45.550
issues that we didn't know about.

01:14:45.740 --> 01:14:50.920
And we were actually able to
fix those issues very quickly,

01:14:50.920 --> 01:14:55.740
and it actually made our code
structure much more straightforward

01:14:55.820 --> 01:14:57.090
than it was historically.

01:14:57.090 --> 01:14:59.180
So we actually have a
pretty clean code base,

01:14:59.180 --> 01:15:04.480
as it is, and we're only about 200K when
it comes to our compiled app.

01:15:04.480 --> 01:15:07.350
So what I did want to
show you is just a bit of

01:15:07.350 --> 01:15:10.320
Flash Player running natively on OS X.

01:15:10.360 --> 01:15:13.240
And Flash,
as a lot of people think about it,

01:15:13.240 --> 01:15:17.150
is actually used for a lot of
animations and user interfaces.

01:15:17.260 --> 01:15:20.120
And now as more websites are
actually becoming dynamic,

01:15:20.120 --> 01:15:24.290
it's important for people who are using,
like, you know,

01:15:24.350 --> 01:15:28.120
Macromedia ColdFusion or ASP, et cetera,
to, you know,

01:15:28.120 --> 01:15:28.210
be able to display the code.

01:15:28.260 --> 01:15:28.260
And so we're able to do that.

01:15:28.260 --> 01:15:31.590
And we're able to be able to
display that application information

01:15:31.590 --> 01:15:33.660
in a much more effective way.

01:15:33.850 --> 01:15:37.450
So we're finding that people are
using Flash's web application UI,

01:15:37.470 --> 01:15:42.240
and it's becoming a standard across
a lot of types of applications.

01:15:42.280 --> 01:15:45.120
In this case,
this is an actual application live today.

01:15:45.260 --> 01:15:48.020
It's for the city of
Everett in Washington.

01:15:48.020 --> 01:15:51.200
And what they're actually
doing is they are replanning,

01:15:51.200 --> 01:15:54.300
the city is replanning some of
the older areas of the city.

01:15:54.300 --> 01:15:57.340
And instead of just having
a bunch of public meetings,

01:15:57.340 --> 01:15:59.990
which take a long time to organize
and you have to get everyone there,

01:15:59.990 --> 01:16:03.080
they're doing a web-based version
of their planning application.

01:16:03.150 --> 01:16:07.510
So you're actually able to
replan parts of Everett,

01:16:07.510 --> 01:16:09.600
Washington.

01:16:09.600 --> 01:16:11.620
So what we're going to do is we're
just going to go to our main map area.

01:16:11.650 --> 01:16:14.220
So everything that you
see here is Flash-based,

01:16:14.220 --> 01:16:15.520
this entire thing.

01:16:15.520 --> 01:16:19.660
And we are going to hit up Parkland.

01:16:19.660 --> 01:16:23.740
And let's add a couple basic things here,
you know, the ability to actually

01:16:24.070 --> 01:16:25.320
drag an amphitheater here.

01:16:25.340 --> 01:16:26.180
Sounds like the kid theme is really cool.

01:16:26.180 --> 01:16:27.170
Yeah.

01:16:27.180 --> 01:16:29.670
And we're going to make it really big,
so let's add a zoo.

01:16:29.700 --> 01:16:32.680
And we're going to have
to feed the animals,

01:16:32.680 --> 01:16:35.060
so let's put Farmland there.

01:16:35.060 --> 01:16:38.170
And we need some fertilizer,
so let's add a horse arena.

01:16:38.630 --> 01:16:42.220
And once you actually do that,
you can actually natively print.

01:16:42.220 --> 01:16:45.680
Our native print operations,
or print operations in FlashPlayer

01:16:45.680 --> 01:16:47.610
are native on OS X as well.

01:16:47.880 --> 01:16:50.020
And you can actually submit this.

01:16:50.030 --> 01:16:55.220
And that information via our XML support
goes directly to the application server,

01:16:55.220 --> 01:16:56.350
and then to the database.

01:16:56.430 --> 01:16:58.850
And then these people can
view the results offline.

01:16:58.930 --> 01:17:03.000
So it's a really excellent example
of a web application in FlashPlayer.

01:17:03.030 --> 01:17:06.480
And like I said,
we have had a very positive

01:17:06.480 --> 01:17:11.120
experience when it comes to
porting very complex applications

01:17:11.120 --> 01:17:16.470
and old applications like Freehand,
Freehand 10, and even somewhere on the

01:17:16.470 --> 01:17:19.190
lower end of the spectrum
from a complexity standpoint,

01:17:19.290 --> 01:17:20.320
which is FlashPlayer.

01:17:20.400 --> 01:17:21.990
And as Tom mentioned
earlier in the keynote,

01:17:22.000 --> 01:17:25.520
we're actually in the middle of porting
the rest of our web publishing apps.

01:17:25.680 --> 01:17:29.690
Flash, the authoring application,
Creamweaver, and Fireworks.

01:17:29.890 --> 01:17:31.610
And again,
we're getting a lot of excellent

01:17:31.610 --> 01:17:33.000
help from the Apple folks.

01:17:33.020 --> 01:17:34.120
And we really appreciate it.

01:17:34.120 --> 01:17:36.540
And I encourage you guys
to jump on the bandwagon,

01:17:36.540 --> 01:17:37.460
because thus far, it's been a good one.

01:17:37.480 --> 01:17:39.140
It's been a good experience.

01:17:39.140 --> 01:17:42.260
Nothing without pains,
but a good experience, nonetheless.

01:17:42.350 --> 01:17:43.180
Thank you.

01:17:43.230 --> 01:17:44.340
Thank you, Andrew.

01:17:44.340 --> 01:17:46.680
I mean, Eric.

01:17:46.680 --> 01:17:50.870
We've talked about Carbon applications
across a variety of market segments.

01:17:50.880 --> 01:17:54.490
Now I'd like to bring up
Andrew Stone from Stone Design to

01:17:54.490 --> 01:17:57.950
talk about the Cocoa experience.

01:17:59.410 --> 01:18:02.920
Ah, thank you.

01:18:02.920 --> 01:18:04.240
The Cocoa experience.

01:18:04.240 --> 01:18:04.780
Let's see.

01:18:04.780 --> 01:18:07.240
I started in 1989.

01:18:07.240 --> 01:18:11.700
And three years ago,
when Gil was the I CEO,

01:18:11.700 --> 01:18:14.240
I got to come up and demonstrate Create.

01:18:14.240 --> 01:18:18.240
And since OS 10 took a little bit
longer than we might have thought

01:18:18.240 --> 01:18:24.160
to get to this wonderful day-- thank
you-- I got six more apps written,

01:18:24.290 --> 01:18:26.360
so I'm going to show you an application.

01:18:26.360 --> 01:18:28.980
I'm going to show you the Stone Studio.

01:18:28.980 --> 01:18:33.660
And what I'm going to show you
is how Cocoa lets you have all

01:18:33.660 --> 01:18:36.790
your apps talk to each other
without hardly adding any code.

01:18:36.800 --> 01:18:40.840
There's no special code here other than
just writing to pasteboards and stuff.

01:18:40.860 --> 01:18:42.720
So this is time equals money.

01:18:42.720 --> 01:18:45.220
It's a way to check
how long your demo is.

01:18:45.220 --> 01:18:47.910
And so we'll start a new time session.

01:18:48.280 --> 01:18:53.500
And Create is our web publishing,
illustration, and page layout application

01:18:53.580 --> 01:18:57.310
built from ground up in Cocoa.

01:18:57.410 --> 01:19:01.020
And so you can,
everything's an object and I'm just going

01:19:01.020 --> 01:19:06.280
to resize this guy a little bit and bring
up our little kind of poor man's flash.

01:19:06.600 --> 01:19:10.110
What it is,
is it's an animation thing where you can

01:19:10.110 --> 01:19:15.730
just set some attributes and make your
graphic or set of graphics do stuff.

01:19:15.810 --> 01:19:18.200
And if I save that,

01:19:18.740 --> 01:19:21.870
Then that automatically
launches another application,

01:19:22.060 --> 01:19:23.990
actually one that's free, gift fund.

01:19:24.030 --> 01:19:27.050
The source is available at
stone.com if you want to see

01:19:27.050 --> 01:19:28.700
how a Cocoa app is written.

01:19:28.740 --> 01:19:33.850
And so it will,
it comes up and then it displays

01:19:33.850 --> 01:19:39.700
it in your favorite browser,
whatever that is.

01:19:39.700 --> 01:19:41.700
Actually the Omni guys are next, so.

01:19:41.700 --> 01:19:46.820
And then you can do stuff like drag the,
a URL onto an object so

01:19:46.820 --> 01:19:49.700
that you can load web,
web addresses and stuff.

01:19:49.700 --> 01:19:53.230
And then from gift fund,
I can just actually take the output

01:19:53.380 --> 01:19:55.700
from that application and put it in.

01:19:55.700 --> 01:19:59.130
Slice and dice is,
lets you take images and turn

01:19:59.130 --> 01:20:03.840
them into JavaScript rollovers,
which is gnarly code that

01:20:03.840 --> 01:20:05.700
we hate to write by hand.

01:20:05.720 --> 01:20:09.700
And so I can just save that for create.

01:20:12.140 --> 01:20:15.840
And one thing, never type onstage,
or if you do.

01:20:15.930 --> 01:20:20.070
It's amazing how you can randomly
type the same exact thing.

01:20:20.190 --> 01:20:22.060
So I can drop that in.

01:20:22.110 --> 01:20:28.340
And then, Pstill is our low-cost
distillery that lets you take

01:20:28.340 --> 01:20:33.220
freehand and Illustrator files,
EPS, or PostScript,

01:20:33.220 --> 01:20:39.780
and convert it into something you
can actually see live in OS X.

01:20:39.780 --> 01:20:44.310
And so you can instantly play with
your opacity and all that stuff.

01:20:44.550 --> 01:20:51.010
And Photo2Web is an application that
lets you manage your digital photographs,

01:20:51.050 --> 01:20:54.420
create websites, thumbnails, slide views,
that kind of thing.

01:20:54.420 --> 01:20:58.730
But what I like to use it for is
to quickly grab hunks of image

01:20:58.730 --> 01:21:03.960
for use in other applications,
just drop it in.

01:21:04.130 --> 01:21:06.280
So I'm going to make
another page and create,

01:21:06.330 --> 01:21:10.800
go back to time equals money,
and hit now.

01:21:10.890 --> 01:21:11.270
OK?

01:21:11.320 --> 01:21:15.270
Well, there's one thing left to do,
really, and that's make an invoice

01:21:15.290 --> 01:21:17.690
and bill you guys for this.

01:21:18.430 --> 01:21:24.430
And so what I'm going to do is now create
a web page from all the junk I brought

01:21:25.300 --> 01:21:25.400
in from all those other applications.

01:21:25.760 --> 01:21:30.000
And so once again, a browser gets called
and to display the stuff,

01:21:30.000 --> 01:21:34.150
you got your table of contents, your GIF,
automatic nav bars,

01:21:34.150 --> 01:21:36.180
and there's your JavaScript.

01:21:36.240 --> 01:21:38.410
See, they're changing color.

01:21:38.620 --> 01:21:42.080
And there's the bill.

01:21:42.080 --> 01:21:42.080
So finally,

01:21:42.530 --> 01:21:45.990
There really is one more thing to do,
and that's show you our

01:21:46.210 --> 01:21:49.040
Shareware Pack Up and Go,
which lets you,

01:21:49.040 --> 01:21:53.650
you can instantly save things out
of Create with the image well.

01:21:53.840 --> 01:21:58.200
But if you drop it on the Pack Up and Go,
it'll launch and make a tarball for you,

01:21:58.200 --> 01:22:00.900
then you can drag that into
some other application.

01:22:00.900 --> 01:22:03.480
Free CDs of the Stone Studio while
they last are at the

01:22:03.500 --> 01:22:04.920
exhibit hall at our booth.

01:22:05.040 --> 01:22:08.510
Number 15, I got it in, woo!

01:22:12.320 --> 01:22:13.290
Thank you, Andrew.

01:22:13.290 --> 01:22:18.320
The internet,
the collaboration between all of us

01:22:18.320 --> 01:22:22.110
working together at a lot of remote
locations or in large or even small

01:22:22.110 --> 01:22:25.750
companies is really important to
a lot of our customer segments.

01:22:25.800 --> 01:22:32.980
And I'd like to ask Marc Parmet
from MeetingMaker to come up

01:22:32.980 --> 01:22:33.540
to talk about their experiences
with bringing MeetingMaker to 10.

01:22:35.500 --> 01:22:41.100
We've been in the
Carbon game for a while.

01:22:41.100 --> 01:22:46.370
Late last winter through the
diligent work of our chief

01:22:46.430 --> 01:22:50.770
architect Rob Ciccolini,
we started on the path towards Carbon and

01:22:50.770 --> 01:22:53.620
by early 2000 had a working version.

01:22:53.790 --> 01:22:56.870
Apple is not only a partner of ours,
but one of our customers,

01:22:56.880 --> 01:23:00.170
so it's been beaten up famously
at Apple over the last year.

01:23:00.320 --> 01:23:03.470
We learn a lot about our
successes and our mistakes.

01:23:03.470 --> 01:23:05.420
Thank you very much.

01:23:05.420 --> 01:23:12.380
There were two real pieces that we
wanted to gain from the OS X experience.

01:23:12.380 --> 01:23:13.130
One was graphics.

01:23:14.680 --> 01:23:18.990
So we were overdue for a real
good user experience overhaul.

01:23:19.280 --> 01:23:23.460
And the first thing that we were
able to leverage out of OS X was this

01:23:23.460 --> 01:23:27.200
great graphics experience with Aqua,
top to bottom.

01:23:29.130 --> 01:23:31.930
While we may not be the
sexiest application up here,

01:23:31.930 --> 01:23:36.110
we are in use by millions of people every
day and it's all about juggling people

01:23:36.110 --> 01:23:38.450
and places and resources in real time.

01:23:38.520 --> 01:23:42.410
So the objective here was to give
our millions of customers a really

01:23:42.410 --> 01:23:46.760
cool user experience without having
them forced into relearning an

01:23:46.760 --> 01:23:51.050
application that they use by the hour,
by the day, by the week.

01:23:53.050 --> 01:23:59.400
So in every window across
every part of the app,

01:23:59.400 --> 01:24:05.150
OS X really helped us to reinvent things.

01:24:05.160 --> 01:24:11.300
You heard Steve and Avi and
Ken and Bertrand talk an awful lot

01:24:11.300 --> 01:24:11.300
about the globalization of OS X,
and that's the other key piece for us.

01:24:11.800 --> 01:24:13.290
We answer the when question.

01:24:13.300 --> 01:24:15.340
Gee, I'd like to be able to
put six people in a room,

01:24:15.340 --> 01:24:17.430
in a conference room and
add a data projector.

01:24:17.520 --> 01:24:18.700
When can we do that?

01:24:18.950 --> 01:24:20.700
When is the best time for us to meet?

01:24:20.700 --> 01:24:25.120
So the way we were able to leverage
OS X is to create this wonderful

01:24:25.130 --> 01:24:29.700
new engine in Media Maker 7
called client-side time zones.

01:24:29.700 --> 01:24:34.110
Let's say we had to meet with our
peers not just across California or

01:24:34.240 --> 01:24:36.700
across the U.S., but across the world.

01:24:36.750 --> 01:24:40.900
And I needed to find out exactly the
right time without having to compute

01:24:40.900 --> 01:24:44.770
higher math while I'm trying to put
something simply on my schedule.

01:24:46.500 --> 01:24:48.500
We are the first app in the world,
and by the way,

01:24:48.500 --> 01:24:51.930
we will be the first collaborative
app available on OS X this summer.

01:24:52.060 --> 01:24:53.230
We're in final beta now.

01:24:53.610 --> 01:24:55.510
Shameless plug,
you can go to our website today,

01:24:55.520 --> 01:24:59.370
MediaMaker.com,
and download the latest beta on Carbon.

01:24:59.400 --> 01:25:04.610
But we have not done just 24 time zones,
but all 319 discrete time

01:25:04.640 --> 01:25:08.400
zones throughout the world
are built into MediaMaker.

01:25:08.400 --> 01:25:11.000
Which means if you've
got your calendar up,

01:25:11.000 --> 01:25:12.870
and Bertrand's on the phone
and would like to meet with

01:25:12.870 --> 01:25:16.160
you tomorrow in Indianapolis,
which by the way,

01:25:16.160 --> 01:25:19.580
is in a totally different time
zone from the rest of Indiana,

01:25:19.580 --> 01:25:22.110
you simply click on Indianapolis.

01:25:22.970 --> 01:25:26.210
Click on the wonderfully throbbing
OK button and there you go.

01:25:26.300 --> 01:25:29.220
It's just re-registered your
calendar in Indianapolis.

01:25:29.420 --> 01:25:34.990
Or if you're lucky enough to
be Bertrand and working from,

01:25:34.990 --> 01:25:34.990
let's say, the Aleutian Islands,

01:25:35.400 --> 01:25:59.900
[Transcript missing]

01:26:01.200 --> 01:26:03.200
Thank you very much, Marc.

01:26:03.200 --> 01:26:09.600
I would also suggest that Avi's
interaction with the meeting maker

01:26:09.600 --> 01:26:12.200
team may have influenced some of it.

01:26:12.200 --> 01:26:17.120
At this point,
I'd like to bring up Wil Shipley,

01:26:17.120 --> 01:26:22.530
president of the Omni Group,
to talk about some of the

01:26:22.530 --> 01:26:22.830
Cocoa perspective for someone who does a
whole lot of applications very quickly.

01:26:30.400 --> 01:26:32.230
Let me just launch the wrong app.

01:26:32.410 --> 01:26:35.830
So, a duck walks into a bar.

01:26:35.830 --> 01:26:35.830
No.

01:26:36.000 --> 01:26:38.420
and David I had some jokes but
Apple requested I took them

01:26:38.480 --> 01:26:40.760
out because they weren't funny.

01:26:40.760 --> 01:26:47.190
So what am I going to talk about?

01:26:47.910 --> 01:26:49.400
Show it.

01:26:49.400 --> 01:26:49.940
Sometime.

01:26:49.950 --> 01:26:50.400
Yes.

01:26:50.440 --> 01:26:51.670
That's it.

01:26:52.000 --> 01:26:53.640
I'm guessing most of you
are familiar with it.

01:26:53.640 --> 01:26:55.510
And if you're not familiar with it,
you're probably familiar with browsers.

01:26:55.640 --> 01:27:01.640
So I'm not actually going to
go through it because we're

01:27:01.640 --> 01:27:04.800
a little pressed for time.

01:27:04.900 --> 01:27:08.210
What I do want to talk about
is Cocoa and how great it is.

01:27:08.210 --> 01:27:08.210
So I'm sort of here as
unpaid shill for Apple,

01:27:08.210 --> 01:27:08.210
as it were.

01:27:09.580 --> 01:27:12.680
Fundamentally,
I'm a Cocoa programmer because I'm lazy.

01:27:12.730 --> 01:27:16.140
I want to write only the
parts of apps that are new,

01:27:16.150 --> 01:27:17.190
that are different, that are creative.

01:27:17.330 --> 01:27:19.300
That's why I got into this business.

01:27:19.360 --> 01:27:25.210
And Cocoa enables you to write apps ten
times as quickly as any other toolkit.

01:27:25.480 --> 01:27:26.910
And you've all heard
that a million times,

01:27:27.070 --> 01:27:28.930
and you don't believe me, of course,
because you're like,

01:27:28.930 --> 01:27:32.310
"I've heard it a million times."
So what I hope to do is give

01:27:32.310 --> 01:27:37.700
just two examples of the kind of
productivity gains you get with Cocoa.

01:27:37.700 --> 01:27:41.460
And then maybe I'll get you
interested enough to actually select

01:27:41.630 --> 01:27:44.500
the Cocoa book from O'Reilly &
Associates rather than the Carbon book

01:27:44.500 --> 01:27:46.430
and maybe win some converts.

01:27:46.500 --> 01:27:49.500
The first example is OmniWeb,
our browser.

01:27:49.500 --> 01:27:53.500
It doesn't do everything in the world,
but it is,

01:27:53.540 --> 01:27:59.500
according to one unscientific poll I saw,
the most popular browser on OS X.

01:27:59.500 --> 01:28:02.500
And this was a web poll, so who knows?

01:28:02.500 --> 01:28:04.490
Maybe it was just my friends voting.

01:28:04.500 --> 01:28:05.300
I don't know.

01:28:05.460 --> 01:28:09.210
But still, it was really nice that
that many people knew us.

01:28:09.590 --> 01:28:13.030
There's only two and a half people
working full time on Omni Web.

01:28:13.220 --> 01:28:19.860
And I think you have an idea of how
big the other browsers teams are.

01:28:19.860 --> 01:28:19.860
And yet, you know, we're

01:28:20.090 --> 01:28:24.540
We're providing a professional quality
browser from two and a half people.

01:28:24.540 --> 01:28:27.230
So what's the rest of my company doing?

01:28:27.280 --> 01:28:31.380
I think an even better example
of productivity gains is

01:28:31.380 --> 01:28:33.530
the game ports we've done.

01:28:33.590 --> 01:28:39.710
Right next door,
there's a games pavilion and

01:28:39.710 --> 01:28:43.160
every app running under OS X,
every game running under

01:28:43.160 --> 01:28:43.160
OS X is a Cocoa game.

01:28:44.130 --> 01:28:47.160
and all those ports were worked on by us.

01:28:47.210 --> 01:28:50.980
And bigger than that,
all those ports were worked on by us

01:28:50.980 --> 01:28:54.000
since about January 15th of this year.

01:28:54.190 --> 01:29:00.870
And bigger than that,
they were all done by one guy.

01:29:00.990 --> 01:29:03.770
And bigger than that,
it was only part-time by one guy.

01:29:03.770 --> 01:29:03.770
So as you're playing those games...

01:29:07.280 --> 01:29:08.430
Tim Wood.

01:29:08.510 --> 01:29:08.830
We love him.

01:29:08.890 --> 01:29:15.620
Yeah, this is my highly technical
3M note-taking device.

01:29:15.670 --> 01:29:16.960
It's post-it.

01:29:17.000 --> 01:29:20.230
Also, we have a booth out in
the hall along with,

01:29:20.300 --> 01:29:24.430
I think, six other companies that have
been invited by Apple to help

01:29:24.900 --> 01:29:27.380
people get their apps to OS 10.

01:29:27.380 --> 01:29:31.690
If you want to stop by any of our booths,
we specialize in Cocoa.

01:29:31.690 --> 01:29:34.000
The other guys do Cocoa and
Carbon or other stuff.

01:29:34.620 --> 01:29:36.320
Please do no charge to talk.

01:29:36.380 --> 01:29:37.090
Thank you.

01:29:41.740 --> 01:29:45.460
The productivity applications,
calendaring applications, web browsers,

01:29:45.460 --> 01:29:49.200
and things like that is all
what we do so we can make money,

01:29:49.270 --> 01:29:51.700
so we can buy and play games.

01:29:51.920 --> 01:29:57.570
So I'd like to ask
Graeme Devine to come up,

01:29:57.570 --> 01:29:57.570
Chief Designer for id Software.

01:30:02.960 --> 01:30:04.590
Thank you.

01:30:04.630 --> 01:30:09.530
Boy, seems like we've shown Quake
3 and running a bunch of

01:30:09.530 --> 01:30:13.390
keynotes for a bunch of years,
but...

01:30:13.600 --> 01:30:17.180
Now you've all been playing it and
you can see how it runs next door.

01:30:17.280 --> 01:30:20.920
It's running really well.

01:30:21.100 --> 01:30:23.700
We've ported two things to Mac OS X.

01:30:23.720 --> 01:30:28.320
We've ported our Doom technology,
which was shown by Steve back

01:30:28.420 --> 01:30:32.790
in January in Tokyo,
well February in Tokyo,

01:30:32.800 --> 01:30:35.280
and we ported Quake 3.

01:30:35.340 --> 01:30:40.310
That process has been a
real big education for us.

01:30:40.370 --> 01:30:44.270
As much as we loved
Mac OS 9 as a consumer OS,

01:30:44.270 --> 01:30:47.100
and it was a great
consumer OS and still is,

01:30:47.150 --> 01:30:51.000
it was very hard to make that
your primary development tool.

01:30:51.270 --> 01:30:55.680
Let me go switch off the radio.

01:30:56.200 --> 01:31:04.100
[Transcript missing]

01:31:04.910 --> 01:31:10.470
Do the wonderful things
like debug the application,

01:31:10.520 --> 01:31:16.610
have it crash on you,
and up comes the Macintosh debugger

01:31:16.610 --> 01:31:21.560
giving you a kernel panic with all
the useful information of the stack

01:31:21.560 --> 01:31:21.560
and what the radiuses contain.

01:31:21.560 --> 01:31:21.560
That's really not very helpful
for decoding your application.

01:31:22.070 --> 01:31:25.620
So I started to work with
Mac OS X back about a year ago,

01:31:25.630 --> 01:31:28.080
when DP4 came out.

01:31:28.130 --> 01:31:34.900
And I started to deal with all of
the wonderful-- the beta operating

01:31:34.900 --> 01:31:36.500
system and how cool can that be.

01:31:36.500 --> 01:31:38.420
I'm the one person in
the office running it.

01:31:38.650 --> 01:31:39.760
How cool is this?

01:31:39.760 --> 01:31:42.170
And all of a sudden,
it started to get useful.

01:31:42.190 --> 01:31:46.800
It started to become, oh, well,
this mail app's actually kind of cool.

01:31:46.820 --> 01:31:48.760
Oh, well, I want this Cocoa stuff.

01:31:48.760 --> 01:31:53.260
I can actually do things like that,
like use the Omni Group's

01:31:53.260 --> 01:31:56.090
foundation classes,
their timer group, and so forth,

01:31:56.240 --> 01:31:57.960
and just bring that stuff in.

01:31:57.970 --> 01:31:58.750
And it's easy.

01:31:58.770 --> 01:31:59.860
And it runtime binds.

01:31:59.860 --> 01:32:03.970
And it does all the little cool things.

01:32:04.560 --> 01:32:10.500
All of which makes Mac OS X a
great primary development tool

01:32:10.500 --> 01:32:14.930
over other competing operating
systems which we've used before,

01:32:14.930 --> 01:32:16.490
typically Windows.

01:32:16.500 --> 01:32:21.060
So now, as id,
we develop on both Windows and

01:32:21.060 --> 01:32:23.500
Mac OS X simultaneously.

01:32:23.500 --> 01:32:27.570
And that helps us greatly because
as you've heard time and time again,

01:32:27.570 --> 01:32:30.500
people coming up, they say, "Oh,
we found bugs in the memory thing

01:32:30.500 --> 01:32:34.020
when we ported across X that we
didn't find in 9." And somehow

01:32:34.030 --> 01:32:35.440
we missed it for 10 years.

01:32:40.460 --> 01:32:41.760
But it really does happen.

01:32:41.760 --> 01:32:43.830
You cut, you know,
you bring out your app,

01:32:43.900 --> 01:32:46.040
you compile it with MetroWorks in Nine,
and it goes through and

01:32:46.040 --> 01:32:49.090
does the right thing,
and you know, it ain't ever gonna crash.

01:32:49.130 --> 01:32:52.050
You bring it up in MS Dev under Windows,
and it compiles,

01:32:52.050 --> 01:32:54.260
and it has a few more warnings
that you fix that perhaps,

01:32:54.340 --> 01:32:56.520
you know,
the MetroWorks compiler should have done,

01:32:56.660 --> 01:33:00.410
and it compiles just great and
runs for the next 10 years.

01:33:00.440 --> 01:33:04.950
You bring it into Mac OS X,
and you put up that warning level

01:33:04.950 --> 01:33:07.860
up to the severe warning level,
and you've got 3,200 warnings

01:33:07.860 --> 01:33:12.320
when your application builds,
and you think, golly.

01:33:12.320 --> 01:33:16.340
Then you run it, and your application,
you know, runs great,

01:33:16.350 --> 01:33:21.100
and it's leaking merrily like a
sieve that it's never done before.

01:33:22.070 --> 01:33:25.060
So you start to use some
of the apps like Sampler.

01:33:25.070 --> 01:33:30.320
And I use VTune all
the time under Windows,

01:33:30.320 --> 01:33:33.080
and Sampler was a surprise for me to use.

01:33:33.280 --> 01:33:35.140
This comes from Apple.

01:33:35.140 --> 01:33:39.900
It wasn't coming from Motorola or
some other surprising company.

01:33:40.020 --> 01:33:44.290
Apple made this great tool that
helps me get Doom up and running

01:33:44.370 --> 01:33:49.900
to 30 FPS for February 24 for
Steve in Tokyo the night before.

01:33:50.620 --> 01:33:53.000
That was a story.

01:33:53.010 --> 01:33:56.270
It also let us tune this app,
which is Team Arena.

01:33:56.460 --> 01:33:59.580
We've been working on a
remaster of Team Arena for

01:33:59.670 --> 01:34:01.600
quite a little bit of time.

01:34:01.600 --> 01:34:07.670
It's the first game that's
going onto CD that's Will Ship,

01:34:07.670 --> 01:34:15.080
the actual Windows version, Win32,
the classic OS 9 version,

01:34:15.080 --> 01:34:15.170
and the Cocoa version all
together on the same CD.

01:34:20.940 --> 01:34:26.820
there's a lot of good reasons for taking
a classic app and trying to carbonize it.

01:34:26.900 --> 01:34:29.960
In many cases that works
just absolutely wonderfully.

01:34:30.020 --> 01:34:33.940
But I think if you really want
to look towards the future and

01:34:34.070 --> 01:34:38.380
grab the potential of OS X and
grab your customer's attention,

01:34:38.560 --> 01:34:42.490
especially when your application has
all the multimedia goodness that games

01:34:42.490 --> 01:34:46.690
have and so forth that you want to show
through OS X and your operating system,

01:34:46.820 --> 01:34:48.930
then Cocoa is the way to go.

01:34:48.960 --> 01:34:53.460
It's absolutely the best development
environment in the universe.

01:34:53.470 --> 01:34:54.950
Nothing beats it.

01:34:54.970 --> 01:34:58.870
And I don't think that anyone who works
in Cocoa and actually puts an app out

01:34:58.900 --> 01:35:01.600
there will disagree with me at all.

01:35:01.740 --> 01:35:06.940
Anyway, Quake 3,
it's why you actually bought a Mac, so...

01:35:09.370 --> 01:35:13.400
Macintosh operating system,
Mac hardware is an absolute great

01:35:13.560 --> 01:35:17.770
gaming platform and it's great for
customers to be able to play games.

01:35:17.790 --> 01:35:20.300
And thank you for having me.

01:35:21.500 --> 01:35:24.140
Thank you very much, Graeme.

01:35:24.140 --> 01:35:27.530
You saw a bunch of applications
that are either shipping or very,

01:35:27.590 --> 01:35:29.800
very close to shipping on Mac OS X.

01:35:29.800 --> 01:35:34.300
You've seen the slides about
people wanting your applications.

01:35:34.320 --> 01:35:43.380
I'm hoping to see at least 60% of
your applications at Macro New York.

01:35:43.380 --> 01:35:43.380
Thank you.

01:35:43.380 --> 01:35:43.380
Thank you, C.K.

01:35:44.310 --> 01:35:47.260
So, we're a little late.

01:35:47.570 --> 01:35:50.310
You probably lost track,
but that was my number

01:35:50.310 --> 01:35:52.520
nine great frameworks.

01:35:52.520 --> 01:35:53.990
So, what's missing?

01:35:54.000 --> 01:35:55.300
What's my number ten?

01:35:55.310 --> 01:35:57.300
Any idea?

01:35:57.300 --> 01:36:02.520
I could absolutely not have these ten
great things about Mac OS X without

01:36:02.520 --> 01:36:05.360
having at least my number ten being Aqua.

01:36:05.360 --> 01:36:08.350
So, we run short of time.

01:36:08.360 --> 01:36:10.750
I'm not going to talk about Aqua.

01:36:11.050 --> 01:36:14.340
I've been using it for two years
and it's still as fresh as day

01:36:14.340 --> 01:36:16.360
one and I think it's wonderful.

01:36:16.360 --> 01:36:20.060
And thank you a lot for all
the feedback on Aqua which has

01:36:20.060 --> 01:36:22.360
helped us make it much better.

01:36:22.360 --> 01:36:27.970
So, Aqua is the most great visible
thing about Mac OS X and I think

01:36:28.000 --> 01:36:33.360
many users out there are going
to equate Mac OS X with Aqua.

01:36:33.360 --> 01:36:36.460
They won't know about the... you know,
underpinnings,

01:36:36.460 --> 01:36:38.340
the great foundation and all that stuff.

01:36:38.350 --> 01:36:40.290
They will think about Aqua.

01:36:40.360 --> 01:36:44.910
Now, I think this is a great opportunity
for you because I believe there

01:36:44.970 --> 01:36:48.650
will be a lot of demand for
your application to be Aqua if,

01:36:48.770 --> 01:36:52.340
in case you don't already
have such an application.

01:36:52.360 --> 01:36:57.300
So, the good news is that you're going to
get a lot of the Aqua support for free.

01:36:57.590 --> 01:37:00.460
The basic Aqua support via
Carbon or Cocoa or even

01:37:00.460 --> 01:37:02.360
Java you are getting for free.

01:37:02.360 --> 01:37:05.360
If you want to do fancier things,
you know, integrate better,

01:37:05.360 --> 01:37:05.360
you can do that.

01:37:05.360 --> 01:37:08.580
You can get better with Aqua,
have sheets that drop down and you know,

01:37:08.580 --> 01:37:09.360
and the like.

01:37:09.360 --> 01:37:13.360
You can use some of the
advanced APIs that we provide.

01:37:13.360 --> 01:37:15.830
Again,
we've done most of the hard work there

01:37:15.830 --> 01:37:20.360
so it should be fairly straightforward to
add those features to your application.

01:37:20.430 --> 01:37:24.050
And we have like a book with
the UI guidelines and we have

01:37:24.110 --> 01:37:28.850
interface builder with the little,
you know, dotted blue lines to help you

01:37:28.850 --> 01:37:32.300
kind of make your application,
your UI, Aqua compliant.

01:37:32.360 --> 01:37:33.360
So, these were my 10 tips.

01:37:33.360 --> 01:37:34.360
Thank you.

01:37:34.360 --> 01:37:37.360
And these were my 10 great
things about Mac OS X.

01:37:37.380 --> 01:37:41.240
There's a lot more great things
about Mac OS X that I'm sure

01:37:41.240 --> 01:37:43.230
you like or you appreciate.

01:37:43.540 --> 01:37:45.360
Always press my time.

01:37:45.360 --> 01:37:47.320
That's the story of my life.

01:37:47.360 --> 01:37:50.180
The greatest thing though
is that we shipped.

01:37:50.530 --> 01:37:54.350
Okay, we shipped on March 24th,
about two months ago.

01:37:54.450 --> 01:37:58.860
Today, we announced that every single
machine coming out of the factory is

01:37:58.880 --> 01:38:01.350
going to have Mac OS X pre-installed.

01:38:01.360 --> 01:38:02.360
Okay, ahead of schedule.

01:38:02.360 --> 01:38:03.350
This is significant.

01:38:03.360 --> 01:38:07.360
We already have a number of applications,
about 600 applications.

01:38:07.360 --> 01:38:10.150
And I believe that by
the end of this week,

01:38:10.160 --> 01:38:12.350
we may have quite a few extras.

01:38:12.370 --> 01:38:17.360
So, I believe we'll get a lot of
applications from you this summer.

01:38:17.360 --> 01:38:19.310
The ball is in your court now.

01:38:19.390 --> 01:38:21.360
We've done a lot of hard work.

01:38:21.360 --> 01:38:24.360
We will continue to move on
and we're here to help you.

01:38:24.360 --> 01:38:25.340
So, enjoy the conference.

01:38:25.360 --> 01:38:26.360
Thank you.