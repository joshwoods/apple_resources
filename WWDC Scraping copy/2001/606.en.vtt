WEBVTT

00:00:04.450 --> 00:00:07.710
So hi and welcome to session 606,
Direct to Java Client.

00:00:07.800 --> 00:00:09.560
My name is Andreas Wendker.

00:00:09.560 --> 00:00:13.550
I'm still the manager of the
WebObjects rapid development team.

00:00:13.600 --> 00:00:17.400
And before I dive into
Direct to Java Client,

00:00:17.400 --> 00:00:20.600
I'd like to quickly summarize
what Java Client is.

00:00:20.600 --> 00:00:24.680
So who is seeing session
number 609 this morning?

00:00:26.300 --> 00:00:27.290
Okay, thank you.

00:00:27.290 --> 00:00:33.240
So, most of the content of the session
will be based on the session 609,

00:00:33.240 --> 00:00:35.200
but if you missed it,
I don't think there was too

00:00:35.200 --> 00:00:37.670
much information that you
will get lost this time.

00:00:39.200 --> 00:00:45.200
So Java Client is a technology for
creating three-tier desktop applications.

00:00:46.820 --> 00:00:53.100
The client process displays the user
interface and interacts with the user.

00:00:53.100 --> 00:00:56.940
The server is a WebObjects
application server and it accesses

00:00:56.940 --> 00:01:00.340
the database and the database,
the third tier, stores the data.

00:01:00.340 --> 00:01:04.300
The important pieces of information
are that the client never

00:01:04.360 --> 00:01:06.730
accesses the database directly.

00:01:06.740 --> 00:01:08.230
It always goes through the server.

00:01:08.230 --> 00:01:12.070
So the server has full control
over the access that the

00:01:12.070 --> 00:01:14.210
client has to the database.

00:01:14.460 --> 00:01:17.860
And the other interesting
information is that Java Client uses

00:01:17.860 --> 00:01:21.300
HTTP as the standard communication
protocol between client and server.

00:01:21.370 --> 00:01:24.260
So you get the connectivity
of an HTML-based application,

00:01:24.290 --> 00:01:27.070
but you get a much richer user interface.

00:01:27.840 --> 00:01:31.370
Java Client uses the
Java Foundation classes,

00:01:31.370 --> 00:01:34.020
or Swing, as the widget layer.

00:01:34.020 --> 00:01:36.140
So it's basically platform independent.

00:01:36.140 --> 00:01:38.500
It just requires JDK 1.3.

00:01:38.500 --> 00:01:40.180
Java Client is localizable.

00:01:40.180 --> 00:01:43.080
I actually forgot to talk
about this this morning.

00:01:43.080 --> 00:01:46.720
But if you do localization,
you do it the same way as with Cocoa.

00:01:46.720 --> 00:01:48.970
So you have multiple
versions of your files,

00:01:48.970 --> 00:01:53.360
like multiple interface files,
and you just give them special extensions

00:01:53.360 --> 00:01:56.750
like mine is German or mine is English,
and then it loads the

00:01:56.750 --> 00:01:58.480
localized versions at runtime.

00:01:58.480 --> 00:02:01.240
And Java Client is really
designed for the intranet.

00:02:01.240 --> 00:02:05.200
It's not the technology you should use
on high-traffic internet sites because

00:02:05.200 --> 00:02:09.040
it takes a long time to start applets
when they have to download classes.

00:02:09.040 --> 00:02:11.440
Or at least you have to
install a client start program,

00:02:11.440 --> 00:02:14.190
and then having an installation
process always means that you

00:02:14.190 --> 00:02:15.690
can't use it in the internet.

00:02:18.480 --> 00:02:22.290
So Direct to Java Client makes developing
Java Client applications really easy.

00:02:22.530 --> 00:02:24.890
It's actually so easy that we,
web object engineers,

00:02:24.940 --> 00:02:27.540
often compare it to instant coffee,
for which you just

00:02:27.540 --> 00:02:29.840
have to add some water,
as you know.

00:02:29.850 --> 00:02:32.760
Now, in our world,
we don't create instant coffee.

00:02:32.760 --> 00:02:34.310
We create instant applications.

00:02:34.350 --> 00:02:38.170
And instead of water,
you just have to add a EU model.

00:02:40.220 --> 00:02:42.700
But I promise you,
you can create Java Client

00:02:42.700 --> 00:02:46.340
applications much faster than
you can drink your coffee.

00:02:48.160 --> 00:02:51.270
So Direct to Java Client is an
infrastructure that is designed to help

00:02:51.360 --> 00:02:53.740
you to develop Java Client applications.

00:02:53.800 --> 00:02:56.800
It does so by providing you a
lot of predefined application

00:02:56.800 --> 00:02:59.500
functionality you can make use of.

00:02:59.620 --> 00:03:03.060
And it also does so by relieving
you from the burden to create user

00:03:03.060 --> 00:03:05.560
interfaces by hand in Interface Build.

00:03:05.610 --> 00:03:11.010
Instead, it generates user interfaces
dynamically based on information

00:03:11.010 --> 00:03:12.990
it finds in your EU models.

00:03:13.760 --> 00:03:16.700
That saves you a lot
of time and also money,

00:03:16.870 --> 00:03:20.120
and we think it's ideal
for prototyping purposes.

00:03:21.510 --> 00:03:24.400
But we know that the default
application that you can generate

00:03:24.400 --> 00:03:28.040
by just analyzing the EU model will
probably not be the application

00:03:28.040 --> 00:03:29.380
you want to deploy to your users.

00:03:29.390 --> 00:03:32.360
In fact,
we think we know that we will hardly

00:03:32.360 --> 00:03:37.390
ever need the application in a way
that you can just ship it to your user.

00:03:37.690 --> 00:03:40.370
So that's why we designed Direct to
Java Client to be very extensible.

00:03:40.370 --> 00:03:43.660
It's very easy for you to plug
in your own customizations.

00:03:43.660 --> 00:03:46.700
And we offer you a lot of
techniques you can use to

00:03:46.700 --> 00:03:49.290
customize the default application.

00:03:49.300 --> 00:03:53.760
And in this session I want
to show you those techniques.

00:03:53.840 --> 00:03:56.320
So we have a lot of
topics I want to cover.

00:03:56.320 --> 00:03:58.780
First of all I want to show
you how to create Direct to

00:03:58.780 --> 00:04:00.380
Java Client applications.

00:04:00.380 --> 00:04:02.840
I want to walk you through the
default applications so that

00:04:02.840 --> 00:04:05.700
you know what the predefined
functionality is that we provide.

00:04:06.540 --> 00:04:08.950
I want to introduce you to the
architecture that is used for

00:04:08.990 --> 00:04:10.540
Direct to Java Client applications.

00:04:10.540 --> 00:04:12.930
I want to talk about
controllers and the rule system.

00:04:12.930 --> 00:04:14.130
You will find out what that is.

00:04:14.140 --> 00:04:17.590
And I want to focus a
lot on customizations.

00:04:17.610 --> 00:04:19.590
So how can you customize
the default application.

00:04:19.600 --> 00:04:22.990
And in the end I want to give you
a few good reasons why you should

00:04:22.990 --> 00:04:24.060
really use Direct to Java Client.

00:04:24.110 --> 00:04:26.060
I really want to burn that in your brain.

00:04:26.060 --> 00:04:31.230
So first of all I'd like to ask
Ron Luu-Saang to come up on stage.

00:04:31.340 --> 00:04:34.630
and give you a demo of how to create
a direct to Java Client application.

00:04:34.650 --> 00:04:37.760
So we could switch to the demo machine.

00:04:37.760 --> 00:04:37.760
Thank you.

00:04:39.900 --> 00:04:44.950
I get so many demos here,
I have to use a script now.

00:04:44.950 --> 00:04:49.480
So this time we want to use a
little more complex new models.

00:04:49.480 --> 00:04:51.920
This morning we used a relatively
simple education model.

00:04:51.920 --> 00:04:53.000
It just grouped around a person.

00:04:53.000 --> 00:04:57.350
This time we use our movies and rentals
models that come with WebObjects 5.

00:04:57.350 --> 00:04:59.420
So there are two models
that work together.

00:04:59.420 --> 00:05:02.400
It has a movies database and
there's some kind of a rental store

00:05:02.400 --> 00:05:04.120
information based on top of that.

00:05:04.120 --> 00:05:05.720
So those are the two models.

00:05:08.280 --> 00:05:12.920
And Ron's just going to Project Builder,
creates a new project.

00:05:14.110 --> 00:05:15.390
Choose the right project type.

00:05:15.420 --> 00:05:19.140
It's a Direct to Java Client application.

00:05:19.140 --> 00:05:20.940
Give it a name.

00:05:27.950 --> 00:05:32.310
And this time, we had two frameworks,
the one that we used this morning,

00:05:32.350 --> 00:05:35.440
Java Client Class Loader,
which makes our demos very easy,

00:05:35.450 --> 00:05:37.830
and the Java Client
Business Logic framework,

00:05:37.850 --> 00:05:40.620
which contains our two models,
the movies and the rentals model.

00:05:40.620 --> 00:05:44.920
You will actually find that in
all the exams with Objects 5.

00:05:45.470 --> 00:05:46.780
So those are the two models.

00:05:46.850 --> 00:05:50.640
The assistant displays the ones
that it found in the frameworks.

00:05:50.690 --> 00:05:51.460
And that's it.

00:05:51.460 --> 00:05:54.420
Just save, build,
and launch the project now.

00:06:05.200 --> 00:06:08.000
The interesting piece about
this project is that there

00:06:08.000 --> 00:06:09.790
are no client-side components.

00:06:09.820 --> 00:06:11.460
There's no interface file defined.

00:06:11.460 --> 00:06:14.570
There are no classes for the
client-side because everything is

00:06:14.570 --> 00:06:16.800
generated dynamically on the fly.

00:06:16.800 --> 00:06:18.480
So in the meantime,
the project was compiled

00:06:18.480 --> 00:06:19.440
and starting right now.

00:06:25.100 --> 00:06:28.490
And this is our Java Client launcher
that connects to the server.

00:06:28.520 --> 00:06:37.080
So this is the UI that you get
just without doing any programming.

00:06:37.080 --> 00:06:39.140
This is the default application.

00:06:39.200 --> 00:06:41.800
So we see a subset of the
entities displayed here.

00:06:41.800 --> 00:06:45.470
Those are the most important
entities of the model-- studio,

00:06:45.580 --> 00:06:46.860
talent, movies.

00:06:46.860 --> 00:06:50.600
And for every entity,
we have a query interface

00:06:50.600 --> 00:06:52.520
where we can enter qualifiers.

00:06:52.520 --> 00:06:56.770
So just searching for
some studios right now.

00:06:57.270 --> 00:07:00.160
And then he's switching back to movies,
and we can search there as well.

00:07:00.220 --> 00:07:04.430
Now he's searching for all
movies with the title M.

00:07:04.810 --> 00:07:06.930
We can also append queries.

00:07:06.940 --> 00:07:11.040
So we just appended to the
previous search result all the

00:07:11.100 --> 00:07:12.880
movies that start with an S.

00:07:12.880 --> 00:07:17.240
And now we're going to take
some details of this movie.

00:07:21.030 --> 00:07:24.250
So we see the information about the
movie itself at the top of the window.

00:07:24.460 --> 00:07:25.670
There's the studio.

00:07:25.720 --> 00:07:28.580
And then in the tab view,
we have a display of all

00:07:28.580 --> 00:07:30.720
the various relationships.

00:07:33.400 --> 00:07:35.280
And if you want,
you can get more information

00:07:35.280 --> 00:07:38.100
about the talents there just
by pressing the Open button.

00:07:38.110 --> 00:07:40.110
So just leave it like that.

00:07:40.610 --> 00:07:44.380
And maybe you can close
that window again.

00:07:44.380 --> 00:07:47.630
And then as last step,
let's select the studio.

00:07:48.930 --> 00:07:52.100
So if you want to assign a
new studio to this movie,

00:07:52.100 --> 00:07:53.180
press on the Select button.

00:07:53.180 --> 00:07:58.140
We get a mode of dialogue where
we can search for studios.

00:07:58.140 --> 00:08:00.440
And then just select any.

00:08:02.010 --> 00:08:03.640
It's that easy.

00:08:03.640 --> 00:08:04.990
So thank you, Ron.

00:08:05.040 --> 00:08:08.970
If you could switch back to the slides.

00:08:12.830 --> 00:08:14.840
So as you can see,
it's fairly easy to create

00:08:14.840 --> 00:08:17.480
relatively complex applications.

00:08:17.490 --> 00:08:20.520
It just took a few seconds
to run through the assistant,

00:08:20.530 --> 00:08:24.720
and it already generated us a fairly
user-friendly application that

00:08:24.750 --> 00:08:28.540
you can use to edit and display
all the data in your database.

00:08:28.730 --> 00:08:30.860
Let's take a look at the
architecture of the application.

00:08:30.860 --> 00:08:32.660
This is the diagram from this morning.

00:08:32.660 --> 00:08:34.490
So this is a normal
Java Client architecture.

00:08:34.500 --> 00:08:36.230
If you've missed the
session this morning,

00:08:36.230 --> 00:08:36.830
don't worry.

00:08:36.830 --> 00:08:39.350
The only thing that is important
to take away from here is

00:08:39.360 --> 00:08:42.420
that in Direct to Java Client,
we add components to both the

00:08:42.420 --> 00:08:43.860
client and the server side.

00:08:43.880 --> 00:08:47.030
On the client side,
we add this layer called EU generation.

00:08:47.030 --> 00:08:51.660
And EU generation is responsible
to initialize the dynamic user

00:08:51.660 --> 00:08:55.140
interface generation and just make
sure that the application still

00:08:55.150 --> 00:08:58.060
does something sensible even if you
don't give it any user interface.

00:08:59.670 --> 00:09:04.760
And on the server side,
the layer has a component that analyzes

00:09:04.760 --> 00:09:09.780
the EU model and that basically tells
the client how the UI should look.

00:09:09.840 --> 00:09:14.720
And this server side component of
EU generation is based on the same

00:09:14.720 --> 00:09:17.090
technology that we use for Direct to Web.

00:09:17.140 --> 00:09:19.300
I will talk a little bit about
the rule system in this session.

00:09:19.300 --> 00:09:20.800
If you want to get more
information about it,

00:09:20.800 --> 00:09:22.590
please come to session number 612.

00:09:22.600 --> 00:09:24.650
That's tomorrow, Direct to Web.

00:09:24.720 --> 00:09:27.160
And my colleague, Miguel,
will talk about the rule

00:09:27.160 --> 00:09:28.390
system much more then.

00:09:30.650 --> 00:09:32.090
So let's take a look at the client.

00:09:32.140 --> 00:09:34.020
In Direct to Java Client,
on the client side,

00:09:34.020 --> 00:09:35.700
everything is done with controllers.

00:09:35.700 --> 00:09:41.560
You can consider controllers to be the
glue between the user interface and

00:09:41.560 --> 00:09:46.870
the structure of EUF objects that is
necessary to display and edit your data.

00:09:46.880 --> 00:09:49.730
That sounds a little bit like
the EU associations that we

00:09:49.730 --> 00:09:53.260
got to know this morning,
but controllers are actually much more.

00:09:53.280 --> 00:09:56.940
They don't only register for some events
and send some strings back and forth.

00:09:57.570 --> 00:10:01.520
They actually know how to create
and lay out a user interface that

00:10:01.520 --> 00:10:03.610
is appropriate to edit your data.

00:10:03.620 --> 00:10:07.910
And they also know how to create
the EUF objects that are necessary,

00:10:07.920 --> 00:10:10.460
so editing contexts, display groups,
associations.

00:10:10.460 --> 00:10:12.370
Controllers know how to create all that.

00:10:12.440 --> 00:10:15.210
And on top of that,
they usually implement a fairly

00:10:15.210 --> 00:10:17.420
complex piece of application logic.

00:10:21.700 --> 00:10:23.820
So as I said,
basically the whole application

00:10:23.820 --> 00:10:26.320
in Direct to Java Client is
implemented in terms of controllers.

00:10:26.320 --> 00:10:30.600
And you can probably imagine
that for a complete application,

00:10:30.600 --> 00:10:33.880
you need various types of controllers
to take care of different tasks.

00:10:33.880 --> 00:10:37.080
So that all the controllers
can still work together nicely,

00:10:37.080 --> 00:10:40.390
Direct to Java Client defines
one class called EUController,

00:10:40.390 --> 00:10:43.380
and everything else is a
subclass of this one class.

00:10:44.320 --> 00:10:46.320
So, the application is usually
distinguished into four categories.

00:10:46.320 --> 00:10:51.150
Every application needs some kind
of an instance that takes care of

00:10:51.170 --> 00:10:54.610
starting the application and manages
global parameters in the application,

00:10:54.610 --> 00:10:57.630
like user defaults, document management,
stuff like that.

00:10:57.660 --> 00:11:00.270
That's usually called
an application object,

00:11:00.280 --> 00:11:03.430
and so Direct to Java Client
has an EUApplication object,

00:11:03.470 --> 00:11:05.530
which happens to be a controller.

00:11:06.460 --> 00:11:09.120
They are also just
purely UI-related tasks,

00:11:09.120 --> 00:11:11.700
just switching some
views in the tab view,

00:11:11.700 --> 00:11:14.440
just managing windows, stuff like that.

00:11:14.510 --> 00:11:18.360
And those kind of controllers we
call just user interface controllers.

00:11:18.830 --> 00:11:21.540
And then the most complex
controllers are what we call

00:11:21.540 --> 00:11:22.640
the entity-level controllers.

00:11:22.640 --> 00:11:25.500
Those are the ones that really
define the flow of your application.

00:11:25.500 --> 00:11:29.380
They handle business logic on the
level of the business objects.

00:11:29.380 --> 00:11:33.760
So they know how to query for objects,
they know how to display lists,

00:11:33.760 --> 00:11:36.490
they know how to create
forms to edit the objects.

00:11:36.500 --> 00:11:39.620
And the fourth level are the
property-level controllers,

00:11:39.620 --> 00:11:42.950
which take care of your business logic
on the level of a single property.

00:11:42.960 --> 00:11:47.610
So they create text fields, combo boxes,
simple pick lists, and those are the

00:11:47.610 --> 00:11:49.620
property-level controllers.

00:11:52.700 --> 00:11:55.000
Now controllers are
organized in a hierarchy.

00:11:55.060 --> 00:11:58.960
And that is important because when
the user interface is generated,

00:11:58.970 --> 00:12:03.010
it basically reflects the hierarchy
or the views that are generated

00:12:03.110 --> 00:12:07.190
for the user interface reflect
the hierarchy of the controllers.

00:12:07.530 --> 00:12:11.730
So when a controller creates
a view for the user interface,

00:12:11.730 --> 00:12:14.980
that view is placed inside the
view of its supercontroller.

00:12:14.980 --> 00:12:18.330
The best way to understand that, I think,
is to just look at it as an example.

00:12:18.380 --> 00:12:22.020
So at the right side of the slide,
we have a fairly simple window

00:12:22.020 --> 00:12:25.720
that has a toolbar at the top,
a single text field,

00:12:25.720 --> 00:12:28.720
and then a tab view with a table,
and a plot summary, which is probably

00:12:28.790 --> 00:12:30.090
something like a text area.

00:12:30.910 --> 00:12:34.780
So the controller hierarchy necessary
to generate this window would look

00:12:34.980 --> 00:12:36.880
like the one that I have on the slide.

00:12:36.880 --> 00:12:38.630
So there would be a window
controller at the top.

00:12:38.700 --> 00:12:41.900
There would be a toolbar controller
displaying all the actions that can

00:12:41.940 --> 00:12:43.640
be performed inside this window.

00:12:43.640 --> 00:12:46.380
You find a text field controller
and a tab view controller.

00:12:46.380 --> 00:12:48.450
And since we have two
tabs in the tab view,

00:12:48.480 --> 00:12:51.770
there are probably two subcontrollers,
a table view controller

00:12:51.770 --> 00:12:53.300
and a text area controller.

00:12:53.300 --> 00:12:56.440
And since we have two columns,
we also have two column controllers.

00:13:00.200 --> 00:13:01.900
Actually, let me go back.

00:13:02.000 --> 00:13:07.260
So what we know so far is
that the client is implemented

00:13:07.260 --> 00:13:08.420
in the form of controllers.

00:13:08.420 --> 00:13:10.630
But where do these controllers come from?

00:13:10.680 --> 00:13:14.660
How do we tell the client what
kind of controllers to generate?

00:13:14.670 --> 00:13:17.320
Let's first take a look
at how we tell the client.

00:13:17.320 --> 00:13:21.760
Well,
Direct to Java Client uses an XML format.

00:13:21.760 --> 00:13:24.640
And controllers,
the hierarchies of controllers,

00:13:24.640 --> 00:13:26.560
are just described in XML.

00:13:26.560 --> 00:13:30.510
And we define the typical text for
every controller type that we have.

00:13:30.600 --> 00:13:31.890
We have a tag.

00:13:31.920 --> 00:13:34.760
So for the controller
hierarchy of the slide before,

00:13:34.760 --> 00:13:38.120
you can see there's a window controller,
there's a toolbar controller,

00:13:38.130 --> 00:13:39.390
text for controllers.

00:13:39.410 --> 00:13:42.860
And then they specify some labels
and have additional attributes.

00:13:42.860 --> 00:13:45.030
So this is the way we tell the client.

00:13:45.080 --> 00:13:47.680
But where do we generate this XML?

00:13:48.630 --> 00:13:51.380
But I already told you that
the most important resource

00:13:51.420 --> 00:13:55.740
for information to generate the
user interface is your EU model.

00:13:55.810 --> 00:13:58.440
But the EU model is not something
you want to send to your client.

00:13:58.510 --> 00:14:01.740
First of all, it opens all kinds of
security holes if you do that.

00:14:01.800 --> 00:14:03.790
And second of all,
it's just a lot of data

00:14:03.790 --> 00:14:05.070
that you need to send.

00:14:05.270 --> 00:14:08.260
So a much better place for
that is the server side.

00:14:08.360 --> 00:14:11.400
And this is where this rule
system comes into the game.

00:14:12.490 --> 00:14:17.840
The rule system is the mechanism that
generates the information how the

00:14:18.160 --> 00:14:20.260
client should look like and behave.

00:14:20.300 --> 00:14:25.660
And I will talk about a few
details on the following slides,

00:14:25.700 --> 00:14:27.880
but there are a few things I would
like you to know and keep in mind

00:14:27.880 --> 00:14:29.490
before I even go into the details.

00:14:29.500 --> 00:14:34.940
First of all, most rules are defined
in a fairly abstract way.

00:14:34.940 --> 00:14:38.430
If you write rules,
they are usually independent of the

00:14:38.430 --> 00:14:40.630
concrete EU model that you have.

00:14:40.750 --> 00:14:43.700
They are not related to an
entity with a given name.

00:14:43.700 --> 00:14:46.510
They are usually related,
or they are very often related,

00:14:46.510 --> 00:14:48.640
to just entities with certain criteria.

00:14:48.640 --> 00:14:52.150
So what that means is that rules
are fairly abstract and can be

00:14:52.250 --> 00:14:55.800
applied to multiple applications,
to multiple models.

00:14:55.880 --> 00:14:58.690
So the rule system is a very
convenient place for you to

00:14:58.690 --> 00:15:00.470
define your own look and feel.

00:15:00.480 --> 00:15:05.270
So by changing the rule system and
defining a set of rules that you can

00:15:05.290 --> 00:15:09.160
apply to your whole application suite,
you can define your own

00:15:09.210 --> 00:15:10.360
corporate look and feel.

00:15:10.740 --> 00:15:13.390
all your client applications
that you create.

00:15:13.790 --> 00:15:16.140
Also very important is that
the rule system is a very

00:15:16.140 --> 00:15:18.040
convenient place for localization.

00:15:18.060 --> 00:15:20.920
I'll talk about that a little more,
but keep this in mind.

00:15:20.920 --> 00:15:23.010
And again,
it's based on the same technology

00:15:23.100 --> 00:15:24.460
that Direct to Web is using.

00:15:30.240 --> 00:15:33.880
You can consider the rule system to
basically be a question-answer mechanism.

00:15:33.880 --> 00:15:36.120
Questions you can ask
the rule system are,

00:15:36.130 --> 00:15:39.100
what kind of windows are available
in my client application?

00:15:39.100 --> 00:15:42.070
Other questions are,
what kind of background color

00:15:42.070 --> 00:15:44.060
should I use for my text fields?

00:15:44.060 --> 00:15:47.060
Or should I actually use a text
field for this kind of property,

00:15:47.080 --> 00:15:48.670
or should I use an image view?

00:15:49.550 --> 00:15:52.520
Those are the questions you can ask.

00:15:52.880 --> 00:15:56.090
Basically, everything that is defined
or everything that appears on

00:15:56.100 --> 00:16:00.380
the client side is the answer,
is the response to the question

00:16:00.540 --> 00:16:02.540
that you sent to the rule system.

00:16:02.540 --> 00:16:06.540
And the answers to these questions are
given in the form of what we call rules.

00:16:06.540 --> 00:16:10.650
Direct to Java Client defines
a set of default rules that

00:16:10.690 --> 00:16:12.540
come with the framework,
the Direct to Java Client frameworks.

00:16:12.540 --> 00:16:17.200
And it's very easy for you to
define your own custom rules.

00:16:18.960 --> 00:16:22.530
Now in Direct to Java Client,
the client only asks fairly

00:16:22.530 --> 00:16:24.390
high-level questions.

00:16:24.420 --> 00:16:26.880
If you could go and ask the server
all the detailed questions--

00:16:26.880 --> 00:16:30.360
what kind of color should I use,
what kind of widget-- but that

00:16:30.430 --> 00:16:31.770
would be a lot of communication.

00:16:31.780 --> 00:16:33.010
We don't want to do that.

00:16:33.040 --> 00:16:38.040
So the client only asks the-- basically,
when it starts up, requests a certain set

00:16:38.040 --> 00:16:41.260
of status information,
what kind of windows are available.

00:16:41.310 --> 00:16:43.520
And then from there on,
it will only ask for detailed

00:16:43.520 --> 00:16:46.310
descriptions of complete windows
so that we avoid too many round

00:16:46.340 --> 00:16:48.680
trips between client and server.

00:16:49.580 --> 00:16:52.990
The client will also not ask for all the
controller hierarchies at startup time.

00:16:52.990 --> 00:16:54.640
That would take a long, long time.

00:16:54.640 --> 00:16:57.380
So it only asks for the detailed
window descriptions when the window

00:16:57.460 --> 00:17:00.600
actually appears on the screen,
so when the user activates the window.

00:17:00.600 --> 00:17:05.600
So the client asks high-level questions
and only one window at a time.

00:17:05.600 --> 00:17:09.720
And when it does ask for a window,
it provides a certain amount

00:17:09.720 --> 00:17:11.440
of input to the rule system.

00:17:12.280 --> 00:17:15.540
The first one is the question.

00:17:15.540 --> 00:17:18.070
So what kind of window are
we actually interested in?

00:17:18.070 --> 00:17:19.130
Is it a normal window?

00:17:19.130 --> 00:17:20.200
Is it a modal dialog?

00:17:20.200 --> 00:17:22.400
Is it actually just a
primitive controller,

00:17:22.400 --> 00:17:26.540
which are just a little piece of the
UI that's independent of a window?

00:17:26.540 --> 00:17:27.950
Those are the questions.

00:17:27.960 --> 00:17:30.820
Also, what kind of task is the
user performing right now?

00:17:30.820 --> 00:17:32.820
What kind of window do we have to create?

00:17:32.820 --> 00:17:33.900
Is it a query window?

00:17:33.900 --> 00:17:34.920
Is it a list window?

00:17:34.920 --> 00:17:35.860
Is it a form?

00:17:37.620 --> 00:17:40.180
The window is related
to one complete entity.

00:17:40.180 --> 00:17:43.010
It will also pass that
entity to the rule system.

00:17:43.080 --> 00:17:45.100
And then there are two
more things it passes.

00:17:45.100 --> 00:17:48.840
It passes some platform information
and some language information.

00:17:48.900 --> 00:17:53.180
The default rule system does not make
use of the platform and the language.

00:17:53.250 --> 00:17:56.110
But it passes it anyway just
so that you can make use of it

00:17:56.110 --> 00:18:00.410
if you want to do platform or
language specific customizations.

00:18:03.140 --> 00:18:06.760
Let's take a look at all the objects
that work together to make this happen.

00:18:06.800 --> 00:18:10.620
When the client starts up,
in Direct to Java Client we use

00:18:10.620 --> 00:18:12.240
a special application class.

00:18:12.240 --> 00:18:15.760
It's a subclass of this U application
that we use in the normal Java Client.

00:18:15.760 --> 00:18:19.140
It's called UDynamicApplication and
it's responsible for initializing

00:18:19.140 --> 00:18:21.240
the dynamic UI generation.

00:18:21.280 --> 00:18:26.230
And its most important task is to
create the so-called UControllerFactory.

00:18:26.430 --> 00:18:31.830
The controller factory is the object that
requests all the information from the

00:18:31.830 --> 00:18:33.850
rule system and instantiates controllers.

00:18:33.860 --> 00:18:36.520
So when we start up,
we will make some rule system

00:18:36.520 --> 00:18:40.280
requests to the server and find out
what kind of windows are available,

00:18:40.280 --> 00:18:42.760
what kind of action should
I provide to the user.

00:18:42.760 --> 00:18:45.400
And the rule system on the
server side will then take a

00:18:45.400 --> 00:18:46.940
look at two types of files.

00:18:46.940 --> 00:18:48.350
First of all, the EU model.

00:18:48.350 --> 00:18:50.530
This is the most important
resource for the rule system.

00:18:50.540 --> 00:18:53.220
And then the so-called D2W model.

00:18:54.000 --> 00:18:56.280
D2W models are the files
that store the rules.

00:18:56.280 --> 00:18:59.580
And you can basically consider
it to be the UI model.

00:18:59.600 --> 00:19:01.780
You have the EU model,
which describes your data.

00:19:01.780 --> 00:19:02.850
It's the data model.

00:19:02.860 --> 00:19:05.740
You have the D2W model
that describes your UI.

00:19:05.740 --> 00:19:10.610
So the rule system will analyze all
these files and come up with an answer to

00:19:10.610 --> 00:19:13.220
the question and send this back as XML.

00:19:14.720 --> 00:19:17.140
Then the controller factory
uses this XML description,

00:19:17.140 --> 00:19:18.700
which is kind of a
template for controllers,

00:19:18.700 --> 00:19:21.340
to create the concrete
controller hierarchies.

00:19:21.340 --> 00:19:24.970
And those know how to create the
user interface and the EUF objects

00:19:24.970 --> 00:19:27.230
that are necessary to edit your data.

00:19:27.240 --> 00:19:31.150
And then when the user works in the UI,
he or she might trigger some

00:19:31.260 --> 00:19:35.210
action that actually requires
to open other types of windows.

00:19:35.220 --> 00:19:37.720
So there's a controller that
registers for some events,

00:19:37.730 --> 00:19:40.730
and when it has to open other windows,
this event will be basically

00:19:40.730 --> 00:19:44.150
forwarded to the controller factory,
and then the controller factory will

00:19:44.150 --> 00:19:47.800
make another round trip to the server,
request new XML, create new controllers,

00:19:47.860 --> 00:19:49.270
which create new windows.

00:19:53.600 --> 00:19:58.340
One of the strongest features of the
XML generation is that it's based

00:19:58.340 --> 00:20:00.860
on the WebObjects component model.

00:20:00.900 --> 00:20:05.340
So we generate XML, we use VoxML nodes,
which is just a Vox component.

00:20:05.340 --> 00:20:10.900
We use dynamic elements like
VoxRepetitions or VoxConditionals.

00:20:11.610 --> 00:20:15.610
And we use so-called D2W components,
which are special components

00:20:15.970 --> 00:20:18.700
that connect to the rule system.

00:20:18.870 --> 00:20:22.090
D2W components use a
so-called D2W context.

00:20:22.120 --> 00:20:25.510
And the D2W context is an object in the
rule system that stores all the input

00:20:25.510 --> 00:20:27.540
parameters that came from the client.

00:20:27.540 --> 00:20:31.200
It's also the object that
basically manages the rules.

00:20:31.300 --> 00:20:34.400
And it's the entry point
for you to fire rules,

00:20:34.400 --> 00:20:36.130
to ask for the answers.

00:20:36.130 --> 00:20:38.190
We call that firing rules.

00:20:38.360 --> 00:20:41.120
So that's actually a very,
very strong feature because you

00:20:41.120 --> 00:20:45.810
can use the complete dynamic
elements engine to generate XML.

00:20:45.880 --> 00:20:50.520
Instead of generating dynamic HTML,
you now generate dynamic XML.

00:20:53.490 --> 00:20:57.800
Direct to Java Client provides you
two tools you can use to change rules.

00:20:57.800 --> 00:20:59.360
The first one is the Assistant.

00:20:59.360 --> 00:21:01.420
We've already seen that this morning.

00:21:01.420 --> 00:21:02.990
Actually, no, we didn't.

00:21:03.000 --> 00:21:05.630
But I think we saw it
yesterday in one session.

00:21:05.640 --> 00:21:11.320
The Assistant is a tool that runs inside
your client application and that you can

00:21:11.320 --> 00:21:13.280
use for the basic customization tasks.

00:21:13.280 --> 00:21:17.100
And if it gets more complicated,
you have to use a full development

00:21:17.220 --> 00:21:18.840
tool running on the desktop.

00:21:18.840 --> 00:21:19.830
It's called the Rule Editor.

00:21:19.840 --> 00:21:25.140
And you have to use the Rule Editor for
all the advanced customization tasks.

00:21:25.140 --> 00:21:27.840
For example, if you want to change the
startup sequence completely,

00:21:27.840 --> 00:21:31.660
if you want to introduce login panels
before the query window appears,

00:21:31.660 --> 00:21:33.820
stuff like that, then you would have to
go into the Rule Editor.

00:21:33.820 --> 00:21:37.640
And I'd like to ask Ron to come up again.

00:21:40.670 --> 00:21:44.640
And we would like to demonstrate the
assistant and the rule editor to you.

00:21:44.640 --> 00:21:47.510
So if you could switch
to the demo machine.

00:21:59.710 --> 00:22:01.990
We are connected to the same
server that we generated,

00:22:01.990 --> 00:22:05.440
to the same application that
we generated in the first demo.

00:22:05.440 --> 00:22:08.170
And if you're in development mode,
in the Tools menu,

00:22:08.230 --> 00:22:11.280
you'll find an additional menu
item called the Assistant.

00:22:11.360 --> 00:22:13.320
So this is the Assistant.

00:22:13.320 --> 00:22:17.740
It has a-- there's a tab view for
different kind of information.

00:22:17.790 --> 00:22:21.280
It displays the--

00:22:21.800 --> 00:22:41.300
[Transcript missing]

00:22:42.000 --> 00:22:46.000
This is the XML we used
for the query window.

00:22:46.000 --> 00:22:50.830
It's easy for you to inspect and
see that the rules that you wrote

00:22:50.830 --> 00:22:53.000
actually do the right thing.

00:22:54.040 --> 00:22:57.070
So what did we want to do?

00:22:57.120 --> 00:23:01.260
I think we wanted to go and
change a few of the properties.

00:23:01.290 --> 00:23:04.680
So we'll start with the entities.

00:23:05.360 --> 00:23:09.780
We first of all move the user
entity from the main entities.

00:23:09.830 --> 00:23:12.480
The main entities are the ones
that appear in the query window.

00:23:12.520 --> 00:23:13.770
So we don't want the user there.

00:23:13.780 --> 00:23:16.560
We want to reorder it a little
bit so that studio appears first,

00:23:16.560 --> 00:23:20.430
and then movie first,
and then studio and talent.

00:23:20.690 --> 00:23:24.660
And then we just press on the
restart-- save the changes,

00:23:24.660 --> 00:23:27.190
and we press on the restart button.

00:23:30.300 --> 00:23:32.160
And as you can see,
now our application has

00:23:32.160 --> 00:23:33.550
already changed a little bit.

00:23:33.570 --> 00:23:34.800
The user disappeared.

00:23:34.800 --> 00:23:38.660
We only have these six entities
left in the query window.

00:23:38.660 --> 00:23:42.100
Now let's modify how we
can search for movies.

00:23:46.550 --> 00:23:51.550
So instead of searching for
the title and the plot summary,

00:23:51.550 --> 00:23:53.090
the voting.

00:23:53.320 --> 00:23:57.960
Let's search for the title, the category,
the rating of the movie,

00:23:57.990 --> 00:24:00.590
maybe the studio, and the revenue.

00:24:02.590 --> 00:24:06.540
And before we apply these
changes directly to the UI,

00:24:06.580 --> 00:24:11.070
let's go and look at
the studio query form.

00:24:11.540 --> 00:24:12.580
So it's the name of the budget.

00:24:12.580 --> 00:24:14.200
That sounds like just fine.

00:24:14.200 --> 00:24:17.130
So let's go on and go to the talent.

00:24:17.930 --> 00:24:19.620
So as you can see,
the Assistant follows you

00:24:19.620 --> 00:24:22.640
in the UI and updates to the
place where you currently are.

00:24:22.680 --> 00:24:25.950
So if you just want to search for
last name and first name there,

00:24:26.000 --> 00:24:28.680
the reason why there's no control
for the folder is that Direct to

00:24:28.710 --> 00:24:31.440
Java Client found out that the
folder is an NSData object.

00:24:31.440 --> 00:24:32.760
It's an image,
and there's not really something

00:24:32.760 --> 00:24:35.710
you can enter in the UI,
so it didn't even generate a text for it.

00:24:35.780 --> 00:24:38.060
So let's just reorder that,
that the last name appears first,

00:24:38.060 --> 00:24:42.280
and then save and
restart the application.

00:24:44.440 --> 00:24:46.980
So now as you can see,
we have different set of query

00:24:47.020 --> 00:24:48.590
properties for the movie.

00:24:48.680 --> 00:24:50.920
Click on Talent also.

00:24:51.920 --> 00:24:54.360
Okay, see last name is first now,
then first name.

00:24:54.360 --> 00:25:00.530
And now I think it's the...

00:25:01.330 --> 00:25:05.300
Last step,
we wanted to go into the rule editor.

00:25:05.300 --> 00:25:10.320
And actually, yeah,
can you open that window?

00:25:10.320 --> 00:25:10.320
Sorry.

00:25:10.920 --> 00:25:13.130
So as you can see,
if you look at the plot summary,

00:25:13.130 --> 00:25:15.890
it just uses a single text field there.

00:25:15.920 --> 00:25:17.560
Let's say we want to customize that.

00:25:17.560 --> 00:25:20.320
So instead of using a text field,
you use a larger text

00:25:20.320 --> 00:25:21.820
area with the scroll bar.

00:25:21.820 --> 00:25:26.740
You could do so in the Assistant by
going to the widget pane and

00:25:26.780 --> 00:25:29.240
adjusting the parameters.

00:25:29.240 --> 00:25:33.620
But we want to demonstrate
how to use the rule editor,

00:25:33.620 --> 00:25:33.740
so we'll do it by hand in the window.

00:25:33.740 --> 00:25:33.740
So why don't you quit
the client application.

00:25:35.400 --> 00:25:40.790
Then in Project Builder,
there's this userd2wmodel file.

00:25:40.800 --> 00:25:43.520
So we open that in rule editor.

00:25:44.670 --> 00:25:48.860
So these are the rules that the
assistant already generated for us.

00:25:48.860 --> 00:25:51.060
We're going to add a few to them.

00:25:51.060 --> 00:25:53.870
So that's going to be a
little bit of typing for--

00:25:59.400 --> 00:26:09.330
So as a starting point,
I think it's easier for you if you just,

00:26:09.330 --> 00:26:11.110
yeah, run for the first one.

00:26:18.670 --> 00:26:23.320
So rules uses a so-called user qualifier
that basically determines whether this

00:26:23.320 --> 00:26:25.400
rule applies to the current environment.

00:26:25.400 --> 00:26:29.100
And we just duplicated one of the rules
that was there already and just modified

00:26:29.120 --> 00:26:31.390
it just because it's a little easier.

00:26:45.930 --> 00:26:48.860
So as you can see,
we basically wrote a qualifier

00:26:48.860 --> 00:26:52.640
that describes the plot summary
that applies to an entity with

00:26:52.640 --> 00:26:54.880
the name plot summary for a form.

00:26:54.880 --> 00:26:56.740
And we're looking for a
widget controller right now.

00:26:56.770 --> 00:27:02.470
So we want to give the
answer to this question.

00:27:02.470 --> 00:27:02.470
What kind of widget controller
should we use for the plot summary?

00:27:14.790 --> 00:27:17.450
And our answer is simply
an EU text area control.

00:27:17.460 --> 00:27:25.960
Just delete those three and
duplicate the first one again.

00:27:27.800 --> 00:27:31.210
So just duplicate that one.

00:27:31.230 --> 00:27:35.140
We want to modify a couple of
parameters for this single digit.

00:27:35.220 --> 00:27:37.920
We already said it's a
new text area controller.

00:27:37.920 --> 00:27:40.530
We also want to give it a minimum height.

00:27:54.300 --> 00:27:56.050
We want it to be vertically resizable.

00:27:56.060 --> 00:28:09.400
And we don't want it to use a label
component because this text area is the

00:28:09.400 --> 00:28:11.800
only widget in this tab view anyway.

00:28:11.800 --> 00:28:14.060
So we don't need a
special label for that.

00:28:14.060 --> 00:28:14.860
So just save that.

00:28:14.900 --> 00:28:19.380
And then we are recompiling
our application.

00:28:24.300 --> 00:28:33.980
We are starting it again.

00:29:04.100 --> 00:29:06.390
OK, Ron's just searching
for another movie again.

00:29:06.440 --> 00:29:11.580
Opening that one.

00:29:14.390 --> 00:29:16.430
And as you can see now,
instead of using a single text field,

00:29:16.470 --> 00:29:19.040
we have a text area
that has a minimum size,

00:29:19.040 --> 00:29:21.440
fully resizable.

00:29:21.440 --> 00:29:23.190
OK, thank you, Ron.

00:29:30.890 --> 00:29:32.500
So as you saw,
the rule editor is a little

00:29:32.500 --> 00:29:33.770
more complicated to use.

00:29:33.810 --> 00:29:35.200
That's why we have the Assistant.

00:29:35.200 --> 00:29:37.780
The Assistant will help you with
the first tasks of customization.

00:29:37.800 --> 00:29:41.750
You can select the entities you
want to see in the query window.

00:29:42.050 --> 00:29:45.800
You can actually switch the widgets.

00:29:45.800 --> 00:29:47.800
The same task that we just
performed in the rule editor

00:29:47.800 --> 00:29:48.880
you could do in the Assistant.

00:29:48.880 --> 00:29:49.800
It's much easier there.

00:29:49.800 --> 00:29:52.370
But if you have very advanced
tasks of customization,

00:29:52.370 --> 00:29:53.890
you can go to the rule editor.

00:29:56.000 --> 00:29:59.120
And now I'd like to talk a
little bit about localization.

00:29:59.160 --> 00:30:03.690
Because the localization scheme that
Cocoa and Java Client by default

00:30:03.750 --> 00:30:06.570
use is that you have multiple
versions of your interface files,

00:30:06.570 --> 00:30:10.070
one for the English one,
one with German labels.

00:30:10.470 --> 00:30:13.310
But that's pretty inconvenient
and very hard to maintain because

00:30:13.310 --> 00:30:17.500
if you want to make one change,
you have to change multiple Nib files.

00:30:18.040 --> 00:30:21.150
And direct to Java Client,
everything is generated

00:30:21.160 --> 00:30:23.730
dynamically anyway,
so also all the labels appearing in

00:30:23.730 --> 00:30:25.740
the UI are generated dynamically.

00:30:25.740 --> 00:30:30.820
So how can you use the rule
system to perform localization?

00:30:31.060 --> 00:30:35.190
And the first thing you need
to know is that by default,

00:30:35.190 --> 00:30:37.560
Java Client leads the
generation of the labels,

00:30:37.560 --> 00:30:39.920
Direct to Java Client
leads the generation of the

00:30:39.920 --> 00:30:41.360
labels just to the client.

00:30:41.360 --> 00:30:45.240
The client just performs some kind
of beautification with entity names,

00:30:45.240 --> 00:30:47.500
attribute names, relationship names.

00:30:47.500 --> 00:30:49.320
That's how the labels appear.

00:30:49.320 --> 00:30:52.660
If you want to change that,
you can actually use the rule system and

00:30:52.680 --> 00:30:54.740
force the labels to be part of the XML.

00:30:55.560 --> 00:30:59.420
So, as I already said before,
the client will pass some language and

00:30:59.420 --> 00:31:01.560
platform information to the rule system.

00:31:01.560 --> 00:31:04.020
The only thing you have to do
is you have to write a few rules

00:31:04.020 --> 00:31:06.000
to return a localized label.

00:31:06.000 --> 00:31:08.140
And where you get this
label from is up to you.

00:31:08.200 --> 00:31:11.590
One suggestion could be you
could go into your EO model,

00:31:11.630 --> 00:31:15.300
use the user dictionaries,
and then add a localized version

00:31:15.300 --> 00:31:19.070
of every attribute and property
name or entity name to the user

00:31:19.070 --> 00:31:21.280
dictionaries in your EO model.

00:31:21.280 --> 00:31:23.630
And then your rule system
could actually access the user

00:31:23.630 --> 00:31:25.050
dictionary in your EO models.

00:31:26.580 --> 00:31:29.730
You could write one single
rule to determine the label,

00:31:29.730 --> 00:31:32.770
but it's probably more convenient
for you if you write multiple ones,

00:31:32.860 --> 00:31:35.420
one to beautify or to
look for entity labels,

00:31:35.420 --> 00:31:39.290
one to look for property or
attribute and relationship labels.

00:31:39.690 --> 00:31:43.280
But the advantage of this solution
is that you do it in one place.

00:31:43.280 --> 00:31:47.140
You don't have to maintain
multiple files at the same time.

00:31:47.160 --> 00:31:50.450
You have probably one string table,
or maybe it's part of the

00:31:50.450 --> 00:31:54.030
EU model in the user dictionaries,
but just one single place where you have

00:31:54.050 --> 00:31:56.030
to maintain the localization information.

00:31:56.040 --> 00:31:57.930
You don't have to edit
multiple Nib files.

00:31:57.930 --> 00:32:01.040
So the rule system is really
much faster to do localization

00:32:01.040 --> 00:32:02.650
than if you do it by hand.

00:32:03.740 --> 00:32:06.550
And I won't have time to
show you an example of this,

00:32:06.550 --> 00:32:09.540
but if you go to session 612,
Direct to Web,

00:32:09.540 --> 00:32:13.180
then actually Miguel has a concrete
example running a localized application.

00:32:15.640 --> 00:32:19.790
Now I'd like to spend some time and
try to explain to you why the default

00:32:19.790 --> 00:32:23.020
application looks like it does.

00:32:25.550 --> 00:32:28.890
When Direct to Java Client starts,
it analyzes the EU model.

00:32:28.940 --> 00:32:33.840
And the first step is to categorize
the entities in the model.

00:32:34.210 --> 00:32:37.200
It distinguishes between
three categories.

00:32:37.200 --> 00:32:39.970
The first one is the list
of the main entities.

00:32:40.040 --> 00:32:45.770
Main entities represent the most
important objects in your model.

00:32:45.830 --> 00:32:47.990
Those are the ones that
appear in the query window.

00:32:48.050 --> 00:32:51.120
The second category are
the enumeration entities.

00:32:51.360 --> 00:32:56.370
Enumeration entities are very similar
to main entities in the sense that

00:32:56.460 --> 00:33:00.310
they represent a self-contained unit.

00:33:01.020 --> 00:33:03.110
But they are very simple objects.

00:33:03.180 --> 00:33:04.660
They only have very few attributes.

00:33:04.690 --> 00:33:06.320
And they are usually used in pick lists.

00:33:06.320 --> 00:33:10.500
So if you want to have a list of states,
a list of countries,

00:33:10.500 --> 00:33:13.320
a list of continents,
maybe movie ratings,

00:33:13.380 --> 00:33:17.150
those kind of things are represented
by what we call enumeration entities.

00:33:17.210 --> 00:33:19.410
And everything else is what
we call dependent entities.

00:33:19.450 --> 00:33:24.980
Dependent entities represent detailed
relationships of main entities.

00:33:24.980 --> 00:33:26.300
Let's look at an example.

00:33:26.320 --> 00:33:27.920
So this is a model.

00:33:28.100 --> 00:33:30.610
We see a couple of entities
here grouped around talents and

00:33:30.610 --> 00:33:33.380
movies and the relationships.

00:33:33.390 --> 00:33:36.560
Actually, Direct to Java Client uses
the most important information

00:33:36.560 --> 00:33:38.560
inside the model it finds.

00:33:38.560 --> 00:33:40.850
It uses other relationships.

00:33:41.000 --> 00:33:44.440
And if it looks at this model here,
it will probably find that there's

00:33:44.440 --> 00:33:45.970
a talent and a talent photo entity.

00:33:46.090 --> 00:33:50.240
And it will probably find that the talent
photo is owned by the talent entity.

00:33:50.240 --> 00:33:51.730
It's dependent on the talent entity.

00:33:51.740 --> 00:33:54.250
A talent photo cannot
exist without a talent.

00:33:54.310 --> 00:33:56.910
So if we make the talent
photo a dependent entity and

00:33:56.930 --> 00:33:59.740
the talent a main entity,
the same is true for movie roles.

00:33:59.740 --> 00:34:01.920
Movie roles depend on talents.

00:34:01.920 --> 00:34:04.180
They cannot exist without a talent.

00:34:04.210 --> 00:34:07.190
So the first thing it finds is
there's a main entity talent

00:34:07.200 --> 00:34:11.050
and two dependent entities,
talent photo and movie role.

00:34:11.060 --> 00:34:13.700
As the rule system looks further,
if we find that there's also a

00:34:13.700 --> 00:34:18.000
movie entity and plot summary and
voting also are dependent on movie.

00:34:18.010 --> 00:34:21.780
So there's another main entity, movie,
and more dependent entities.

00:34:21.780 --> 00:34:25.240
And rating matches the description of
an enumeration entity I gave you so far.

00:34:25.240 --> 00:34:27.820
The rating is used
inside some pick lists.

00:34:27.820 --> 00:34:28.860
They're referenced by a movie.

00:34:28.860 --> 00:34:28.860
And the rating matches the description of
an enumeration entity I gave you so far.

00:34:28.860 --> 00:34:28.860
The rating is used
inside some pick lists.

00:34:28.860 --> 00:34:28.860
They're referenced by a movie.

00:34:28.860 --> 00:34:28.860
And the rating matches the description of
an enumeration entity I gave you so far.

00:34:28.860 --> 00:34:28.860
The rating is used
inside some pick lists.

00:34:28.860 --> 00:34:28.860
They're referenced by a movie.

00:34:28.860 --> 00:34:32.290
and so this is an enumeration entity.

00:34:34.470 --> 00:34:38.830
The second step for the rule
system is to categorize properties.

00:34:38.910 --> 00:34:41.210
And again, we use four categories.

00:34:41.290 --> 00:34:43.920
First of all,
we use a list of query attributes.

00:34:43.920 --> 00:34:46.020
So those are the-- or query properties.

00:34:46.040 --> 00:34:49.070
Those are the properties we
use for searching for objects.

00:34:49.150 --> 00:34:50.330
There are list properties.

00:34:50.460 --> 00:34:53.920
Those are the ones that we use
if we display tables of objects.

00:34:53.990 --> 00:34:57.560
And there are form properties,
which we use in all the input fields.

00:34:57.600 --> 00:35:00.140
These are the properties we
generate input fields for if

00:35:00.140 --> 00:35:02.350
you want to edit an object.

00:35:02.620 --> 00:35:05.030
The fourth category is
the identify category,

00:35:05.030 --> 00:35:07.970
and it's used whenever
you reference an object.

00:35:07.970 --> 00:35:10.520
For example, in error messages,
or if you just want to

00:35:10.520 --> 00:35:13.630
display quick information,
just a little bit of information

00:35:13.630 --> 00:35:16.510
about a relationship,
we use the identify attributes.

00:35:19.260 --> 00:35:22.440
When it has this information,
the rule system can determine

00:35:22.440 --> 00:35:24.910
what windows are available
in the client application.

00:35:25.020 --> 00:35:27.350
It obviously would have a query window.

00:35:27.700 --> 00:35:30.210
If the model contains
enumeration entities,

00:35:30.220 --> 00:35:32.700
it will also generate
an enumeration window.

00:35:32.770 --> 00:35:36.260
For every main entity,
the rule system will create a form

00:35:36.260 --> 00:35:38.700
window with the detailed user interfaces.

00:35:38.700 --> 00:35:43.000
And also for the main entities,
it will create modal dialogs that

00:35:43.000 --> 00:35:47.700
you can use to select objects
when you want to assign values.

00:35:47.700 --> 00:35:51.640
So you could add modal dialogs
that you can use for selecting

00:35:51.640 --> 00:35:54.250
the objects for the relationships.

00:35:54.530 --> 00:35:58.100
The model dialogue that we saw in the
demo was that we selected a studio,

00:35:58.100 --> 00:35:58.960
for example.

00:35:58.960 --> 00:36:01.640
So both movie and studio
are main entities,

00:36:01.700 --> 00:36:05.760
and we generated a model dialogue
for the studios to search for.

00:36:07.360 --> 00:36:11.760
So this is the information that
the rule system has to determine

00:36:12.020 --> 00:36:13.290
when the application starts.

00:36:13.340 --> 00:36:16.790
And we then send this
information to the client.

00:36:16.790 --> 00:36:22.080
And from there on,
the client will make explicit

00:36:22.080 --> 00:36:22.080
round trips to get the detailed
information about every single window.

00:36:23.060 --> 00:36:24.340
So that's the next step.

00:36:24.400 --> 00:36:26.880
When the client asks for it,
we will determine the

00:36:26.880 --> 00:36:28.500
concrete widget layout.

00:36:28.530 --> 00:36:32.400
And just an example, for form windows,
the heuristics that we use are we

00:36:32.400 --> 00:36:35.100
use rows and columns for attributes.

00:36:35.260 --> 00:36:37.350
It depends on the number of
attributes that you have,

00:36:37.440 --> 00:36:39.180
how many columns we choose.

00:36:39.250 --> 00:36:43.230
Or the mandatory to one relationships
to main entities are displayed in boxes.

00:36:43.240 --> 00:36:48.310
So if you remember the movie window,
it had a box for the studio.

00:36:48.370 --> 00:36:50.820
Or the other relationships,
when the switch controller,

00:36:50.820 --> 00:36:53.200
which just use the Tab view.

00:36:54.000 --> 00:36:57.510
And keep in mind,
for all the enumeration entities,

00:36:57.540 --> 00:37:00.520
the rule system generates
a simplified-- actually,

00:37:00.520 --> 00:37:02.160
sorry, I forgot about that.

00:37:02.430 --> 00:37:05.830
The reason why we distinguish between
main entities and enumeration entities

00:37:05.830 --> 00:37:08.400
is that for enumeration entities,
we can create much

00:37:08.400 --> 00:37:09.640
simpler user interfaces.

00:37:09.640 --> 00:37:12.350
We don't need modal dialogs and
all this big user interface.

00:37:12.370 --> 00:37:15.580
We can just create a combo box
or maybe a simple pick list.

00:37:15.680 --> 00:37:20.360
So the rule system will find that
the reference and enumeration

00:37:20.360 --> 00:37:23.460
entity and then perform windows
generate a simplified user interface,

00:37:23.480 --> 00:37:25.140
typically combo boxes or pick lists.

00:37:29.310 --> 00:37:33.280
Now I'd like to spend a little
more time on customization.

00:37:33.310 --> 00:37:35.200
There are three levels of customization.

00:37:35.200 --> 00:37:37.080
The first one we already got to know.

00:37:37.120 --> 00:37:39.120
The tools for it are the
assistant and the rule editor.

00:37:39.120 --> 00:37:42.720
The first level of customization means
you are working on the level of rules.

00:37:42.720 --> 00:37:48.470
That has the advantage,
rules are fairly abstract.

00:37:48.510 --> 00:37:53.530
They can be applied to
multiple models often.

00:37:53.540 --> 00:37:53.900
And they are very simple
to maintain and to change.

00:37:54.210 --> 00:37:58.300
The second level of customization
is what we call freezing.

00:37:58.420 --> 00:38:04.160
Freezing means that you bypass the rule
system and you hard code the XML that's

00:38:04.160 --> 00:38:07.700
supposed to be used by the client,
or you hard code interface files,

00:38:07.700 --> 00:38:12.800
so the user interface layout,
into a text file for XML or into a

00:38:12.810 --> 00:38:15.240
Nib file for the user interface files.

00:38:15.360 --> 00:38:19.240
Freezing means that you start to
transition into traditional development,

00:38:19.260 --> 00:38:23.890
where you hard code UIs,
or the behavior of the client.

00:38:24.700 --> 00:38:26.960
The third level of customization
is where you actually really

00:38:26.960 --> 00:38:28.400
back to traditional development.

00:38:28.400 --> 00:38:29.690
You actually write source code.

00:38:29.690 --> 00:38:34.810
The most common tasks are subclassing,
using subclasses of our controller

00:38:34.810 --> 00:38:36.880
classes to change the default behavior.

00:38:36.880 --> 00:38:39.550
Or if you don't like the
complete flow of the application,

00:38:39.660 --> 00:38:42.740
you can programmatically change
the controller factory behavior,

00:38:42.740 --> 00:38:45.760
which can give you a very
different flow to the application.

00:38:51.360 --> 00:38:55.490
If you freeze XML,
you bypass the rule system.

00:38:55.530 --> 00:38:58.770
You can decide whether
to use just static XML,

00:38:58.770 --> 00:39:01.940
so we adjust the end result,
or you can mix the

00:39:01.940 --> 00:39:04.060
XML with dynamic elements.

00:39:04.060 --> 00:39:06.930
So you can use repetitions,
or conditionals,

00:39:06.960 --> 00:39:12.230
or D2W components to still generate
parts of your user interface dynamically,

00:39:12.230 --> 00:39:14.910
and just use an XML template to round it.

00:39:15.630 --> 00:39:18.670
You can decide to freeze complete
windows or just little parts of it.

00:39:18.680 --> 00:39:20.680
It's up to you.

00:39:20.870 --> 00:39:24.650
And the more dynamic elements you use,
the more your XML becomes

00:39:24.650 --> 00:39:25.900
a real template.

00:39:25.910 --> 00:39:29.740
We have some kind of an XML template
that is responsible for this layout

00:39:29.740 --> 00:39:31.170
and form that I described to you.

00:39:31.180 --> 00:39:37.110
The attributes at the top, the columns,
the relationships, domain entities,

00:39:37.210 --> 00:39:39.340
in boxes, the rest of the tab view.

00:39:39.450 --> 00:39:44.600
You can change that completely by
using a different kind of template.

00:39:45.240 --> 00:39:48.170
When you use frozen XML,
you have to register it

00:39:48.170 --> 00:39:49.220
with the rule system.

00:39:49.250 --> 00:39:51.090
The way to do that is
you just write a rule.

00:39:51.100 --> 00:39:53.090
It's detailing the rule system.

00:39:53.130 --> 00:39:54.140
Don't do the normal stuff.

00:39:54.330 --> 00:39:57.380
Just use this XML to find an answer.

00:40:00.120 --> 00:40:05.120
If you freeze interface files,
you bypass the rule system and even the

00:40:05.240 --> 00:40:07.670
generation of the UI on the client side.

00:40:07.710 --> 00:40:11.620
You basically tell the client exactly,
this is the UI you should generate.

00:40:11.620 --> 00:40:16.670
That gives you full control over
every single pixel in your UI.

00:40:16.790 --> 00:40:21.310
Again, you can choose to just freeze
a little part of your window,

00:40:21.320 --> 00:40:23.610
or you can freeze the complete window.

00:40:23.910 --> 00:40:26.640
If you only freeze parts of the window,
then you can make use of

00:40:26.640 --> 00:40:28.260
so-called subcontroller areas.

00:40:28.260 --> 00:40:31.240
If you freeze parts of the window,
that means that you will still

00:40:31.240 --> 00:40:33.840
have some subcontrollers that
are dynamically generated.

00:40:33.840 --> 00:40:35.630
Some pieces of your
window are still dynamic.

00:40:35.660 --> 00:40:38.630
And subcontroller areas
are just empty views,

00:40:38.630 --> 00:40:41.720
empty boxes you can place
in your interface file,

00:40:41.720 --> 00:40:45.620
and then the still dynamically
generated controllers or the views of

00:40:45.620 --> 00:40:47.980
those controllers go into this place.

00:40:47.980 --> 00:40:50.620
So you can point the client
directly to where to place the

00:40:50.620 --> 00:40:52.420
still dynamically generated UIs.

00:40:52.420 --> 00:40:53.560
I will show that to you in a minute.

00:40:54.920 --> 00:40:58.190
Again, if you freeze interface files,
like with Freezing XML,

00:40:58.190 --> 00:41:00.830
you have to register
with the rule system,

00:41:00.910 --> 00:41:01.760
so you have to write rules.

00:41:01.800 --> 00:41:04.800
For interface files,
you probably have to write two rules.

00:41:04.800 --> 00:41:06.240
First of all,
you have to tell the rule system

00:41:06.240 --> 00:41:07.800
that there is an interface file.

00:41:07.800 --> 00:41:10.320
And second of all,
you probably want to tell it

00:41:10.320 --> 00:41:13.790
to suppress the generation
of additional subcontrollers.

00:41:13.830 --> 00:41:16.490
If you don't do that,
the rule system will still generate all

00:41:16.490 --> 00:41:19.800
the normal subcontrollers and use the
UI that comes from your interface file.

00:41:19.800 --> 00:41:22.190
So you need two rules.

00:41:25.700 --> 00:41:29.440
When you actually write code,
then you can do everything you want.

00:41:29.440 --> 00:41:31.700
If you don't like what we are
doing in our applications,

00:41:31.700 --> 00:41:34.650
you can change it.

00:41:35.900 --> 00:41:38.690
There are so many things you can
do that I can't even list them,

00:41:38.690 --> 00:41:43.840
but the most common tasks are you
can subclass controller classes to

00:41:43.840 --> 00:41:45.940
support your own custom widgets.

00:41:45.940 --> 00:41:48.310
If there's a widget that you
wrote yourself and you want

00:41:48.380 --> 00:41:51.200
to have an association for it,
you can write a controller for it.

00:41:51.200 --> 00:41:54.940
And that way you can easily get
it into the dynamic UI generation.

00:41:54.980 --> 00:41:58.240
If you want a different layout mechanism,
if you don't like rows and columns,

00:41:58.300 --> 00:42:02.930
you can write a controller that just lays
out these widgets in a different way.

00:42:03.740 --> 00:42:06.280
If you want,
you can work with the qualifiers and

00:42:06.280 --> 00:42:08.700
fetch specifications that we generate.

00:42:08.730 --> 00:42:11.500
If you want to change the way we
fetch objects from the server,

00:42:11.530 --> 00:42:13.390
you can do that in the controllers.

00:42:13.400 --> 00:42:15.690
If you want to add
additional actions to a UI,

00:42:15.700 --> 00:42:17.460
if you have the default
actions like save,

00:42:17.460 --> 00:42:21.960
revert, undo, redo, all this stuff,
then subclass and controller

00:42:21.960 --> 00:42:25.900
classes is a convenient way for
you to get that into your UI.

00:42:26.480 --> 00:42:30.560
And I already mentioned that if you don't
like the flow of the application at all,

00:42:30.560 --> 00:42:33.010
if you don't like query windows,
you don't like form windows,

00:42:33.030 --> 00:42:35.440
you want to have one application
that uses just one big window

00:42:35.520 --> 00:42:38.400
and is completely unusable,
you can do that.

00:42:38.420 --> 00:42:40.400
And you do it with the
controller factory.

00:42:40.440 --> 00:42:42.090
There are two ways you can do it.

00:42:42.170 --> 00:42:45.910
You can either use your own
implementation of the controller factory,

00:42:45.980 --> 00:42:48.480
so you can use a subclass,
or as an alternative,

00:42:48.480 --> 00:42:51.360
we provide you with some
delegate methods you can use,

00:42:51.360 --> 00:42:52.500
you can implement.

00:42:52.500 --> 00:42:54.360
It depends on your needs whether
it's enough to use delegate or not.

00:42:55.040 --> 00:42:56.900
So actually, we have a demo for that.

00:42:56.920 --> 00:42:59.660
And although the slide says
that Ron is going to give it,

00:42:59.680 --> 00:43:02.860
I'm going to give it myself because
there's so much clicking that

00:43:02.860 --> 00:43:04.900
it would be hard to synchronize.

00:43:04.900 --> 00:43:07.470
So if you could switch
to the demo machine.

00:43:24.330 --> 00:43:27.670
I prepared a project that
I want to use to show you

00:43:27.670 --> 00:43:29.580
some customization techniques.

00:43:29.580 --> 00:43:33.570
Let's start the server now.

00:43:46.370 --> 00:43:53.010
I use the typical Java Client launcher
to connect to my server process.

00:44:02.180 --> 00:44:07.940
And what I did for this demo application,
I first of all used the assistant

00:44:08.110 --> 00:44:11.340
to modify the main entities,
the integration entities.

00:44:11.340 --> 00:44:13.040
I set some minimum sizes.

00:44:13.060 --> 00:44:16.240
That's why the query window
already comes up with a nice size.

00:44:16.240 --> 00:44:19.250
I modified the query
attributes of movies,

00:44:19.250 --> 00:44:21.810
studios, customers, et cetera.

00:44:23.080 --> 00:44:25.720
And I used some special
customization techniques like

00:44:25.850 --> 00:44:29.710
freezing to modify the movie window.

00:44:33.710 --> 00:44:38.570
So it's not pretty,
but it's highly visible what I did.

00:44:38.610 --> 00:44:42.600
So this is a little different
than the window you saw before.

00:44:42.600 --> 00:44:45.750
So first of all,
we regrouped the widgets at the top.

00:44:45.750 --> 00:44:48.050
There's not a special box for studios,
right?

00:44:48.450 --> 00:44:52.380
All the text fields are in one box now.

00:44:52.380 --> 00:44:57.480
Also,
we use multiple columns in the middle,

00:44:57.480 --> 00:44:59.290
but not for all the widgets.

00:44:59.290 --> 00:44:59.290
There's some additional

00:44:59.440 --> 00:45:01.820
You know, information for the user,
what happens if he or she

00:45:01.860 --> 00:45:03.620
presses one of these buttons.

00:45:04.030 --> 00:45:08.400
Actually, there's a new text field that
displays the number of roles.

00:45:08.400 --> 00:45:10.790
It's the same for the directors.

00:45:11.970 --> 00:45:14.560
And for the plot summary,
we changed the layout

00:45:14.560 --> 00:45:15.860
pretty dramatically.

00:45:15.860 --> 00:45:18.300
And also,
please note there's a little button here,

00:45:18.300 --> 00:45:19.890
an additional action in the UI.

00:45:19.890 --> 00:45:22.760
If I press on that one,
it's actually opening both talents.

00:45:22.760 --> 00:45:27.320
All the talents that are playing a role
in this movie are opened automatically.

00:45:27.940 --> 00:45:33.080
So let me show you what I had
to do to get this to work.

00:45:37.100 --> 00:45:45.540
Project.

00:45:45.540 --> 00:45:45.540
First about the server,
I didn't change anything.

00:45:46.270 --> 00:45:47.340
Well, actually, there's a two.

00:45:47.360 --> 00:45:49.600
But the standard classes
like application,

00:45:49.600 --> 00:45:50.280
they didn't change.

00:45:50.280 --> 00:45:51.400
The session didn't change.

00:45:51.400 --> 00:45:52.890
There's still the main component.

00:45:52.910 --> 00:45:54.300
There's my items file.

00:45:54.530 --> 00:45:57.900
These are all the normal components
of the WebObjects application.

00:45:57.900 --> 00:46:01.240
Then I grouped everything else that
is specific to the customization

00:46:01.240 --> 00:46:02.900
in this additional group.

00:46:03.590 --> 00:46:06.000
Let me show you the userd2w model file.

00:46:06.030 --> 00:46:09.670
So these are the rules that
I wrote with the assistant.

00:46:09.690 --> 00:46:12.500
As you can see,
I mostly changed property lists,

00:46:12.500 --> 00:46:13.940
what to use for querying.

00:46:13.940 --> 00:46:17.890
I set some minimum
sizes for some windows.

00:46:18.440 --> 00:46:22.120
I determined whether I want to use
label components or change the resizing

00:46:22.120 --> 00:46:24.340
behavior of some of the controllers.

00:46:24.350 --> 00:46:27.040
I changed the type of controllers,
so in this case I used the

00:46:27.080 --> 00:46:29.400
checkbox controller instead
of the normal text field.

00:46:29.400 --> 00:46:30.840
I used the text area controller.

00:46:30.950 --> 00:46:35.000
Those are all the things that
I can just do with the Assistant.

00:46:35.020 --> 00:46:39.190
Then I also used some frozen
XML and some frozen interface files.

00:46:39.520 --> 00:46:42.850
And as I described before,
I have to write some rules

00:46:42.910 --> 00:46:46.910
to register those frozen
components with the rule system.

00:46:46.950 --> 00:46:50.110
This first rule here
uses the key archive.

00:46:50.150 --> 00:46:55.410
So this one, this is the rule that I use
to create and to register an

00:46:55.470 --> 00:46:57.560
interface file with the rule system.

00:46:57.580 --> 00:46:59.290
It's named plot summary form.

00:46:59.340 --> 00:47:04.080
It's an interface file
for this piece of the UI.

00:47:04.080 --> 00:47:06.180
I'll show that to you in a second.

00:47:07.610 --> 00:47:12.840
And then for the same context,
I had to use this rule here.

00:47:12.840 --> 00:47:15.370
I mentioned before that I need
two rules if I want to work

00:47:15.370 --> 00:47:16.930
with frozen interface files.

00:47:16.940 --> 00:47:18.920
It says generate subcontrollers false.

00:47:18.920 --> 00:47:24.090
So I suppress all the generation
of subcontrollers because I have

00:47:24.090 --> 00:47:26.670
everything in my interface file.

00:47:27.500 --> 00:47:32.740
And this one is the rule that
I use to register frozen XML.

00:47:32.740 --> 00:47:37.090
MovieForms is the name of a
component that contains my XML.

00:47:37.330 --> 00:47:40.710
This is the rule that registers
it with the rule system.

00:47:40.730 --> 00:47:44.430
So let me show you the
interface file first of all.

00:47:45.700 --> 00:47:51.070
And while interface build is launching,
it should be fast enough.

00:47:56.100 --> 00:47:57.340
So this is the interface file.

00:47:57.340 --> 00:48:00.600
As you can see,
I was just interested in changing

00:48:00.600 --> 00:48:03.240
the layout for this piece of the UI.

00:48:03.240 --> 00:48:07.120
So all I have to do in my interface file
is specify the widgets that I need in

00:48:07.160 --> 00:48:09.850
this particular view of the tab view.

00:48:10.220 --> 00:48:15.200
and you know you can choose which pieces
you want to put in the interface file

00:48:15.210 --> 00:48:18.010
and which ones you want to put in XML.

00:48:18.190 --> 00:48:21.290
The movie form here is a component

00:48:23.000 --> 00:48:24.600
This is the XML.

00:48:24.680 --> 00:48:27.400
I started with the
XML from the Assistant.

00:48:27.470 --> 00:48:30.890
I went to the Assistant,
went to this XML view,

00:48:30.890 --> 00:48:34.370
and selected what the rule system
had already given me by default,

00:48:34.430 --> 00:48:37.880
and then copied this into this whole
component and modified it by hand.

00:48:37.960 --> 00:48:41.900
So as you can see,
I introduced this box controller,

00:48:41.900 --> 00:48:47.920
and then these are the two columns for
the text field controllers that we saw.

00:48:49.000 --> 00:48:54.400
And I also mixed that with other
dynamic-- or with other components.

00:48:54.440 --> 00:48:59.810
So I have frozen XML or the static XML,
and I can mix that

00:48:59.810 --> 00:49:01.690
with other web objects.

00:49:02.050 --> 00:49:03.800
So the other VOOC components.

00:49:03.800 --> 00:49:06.120
If we look at the VOT file,
you can see that I'm

00:49:06.120 --> 00:49:08.750
using EU switch component,
which is another subclass

00:49:08.750 --> 00:49:10.110
of D2W component.

00:49:10.200 --> 00:49:14.240
And this is a way to plug
into the rule system again.

00:49:14.240 --> 00:49:18.350
I created the template using some XML,
but some of the UI is still

00:49:18.350 --> 00:49:21.490
generated by the rule system,
which means that I can still access

00:49:21.620 --> 00:49:24.130
it and modify it with the assistive.

00:49:25.310 --> 00:49:29.340
Also, as you can see,
to display the number

00:49:29.340 --> 00:49:31.790
of roles and directors,

00:49:34.310 --> 00:49:38.360
I used two components.

00:49:38.360 --> 00:49:39.860
It actually turns out
that they are the same.

00:49:39.860 --> 00:49:44.430
So I created a reusable
component called countDisplay.

00:49:47.800 --> 00:49:49.900
It just has some other
WebOptics components in there.

00:49:49.900 --> 00:49:51.400
It's a static label controller.

00:49:51.400 --> 00:49:53.540
It's a text field controller.

00:49:53.540 --> 00:49:56.550
And as you can see,
I'm just using voxml nodes to

00:49:56.550 --> 00:49:58.880
specify the content of this.

00:49:58.880 --> 00:50:02.400
So there's a voxml node for a component
controller which groups a label

00:50:02.400 --> 00:50:05.270
controller and a text field controller.

00:50:07.250 --> 00:50:12.660
And the last thing I want to point out
to you is to plug in my controller class.

00:50:13.920 --> 00:50:15.940
I just specified it here in the XML.

00:50:15.940 --> 00:50:17.570
I just gave it another class name.

00:50:17.630 --> 00:50:19.890
So I'm using a form controller.

00:50:19.930 --> 00:50:22.340
I'm using a special class name.

00:50:22.630 --> 00:50:26.390
This class is here, and as you can see,
it's subclass is EO Form Controller.

00:50:26.390 --> 00:50:29.890
This is the code I had to
write to open all the talents.

00:50:30.850 --> 00:50:34.290
This method here registers an action,
which basically is responsible

00:50:34.290 --> 00:50:37.900
for creating this button in the
UI at the top right of the window.

00:50:38.000 --> 00:50:41.970
This is a method that determines whether
this button should be enabled or not.

00:50:41.970 --> 00:50:44.600
And this is the concrete
implementation of the action.

00:50:44.600 --> 00:50:48.000
So as you can see,
I'm just getting the editing context,

00:50:48.000 --> 00:50:51.210
asking for the talents,
getting the global IDs,

00:50:51.210 --> 00:50:54.970
and then I'm using the controller
factory to open the form

00:50:55.100 --> 00:50:57.540
windows for these global IDs.

00:50:57.540 --> 00:51:01.840
So that's all I had to
do to make this happen.

00:51:05.680 --> 00:51:09.610
OK,
if you could switch back to the slides.

00:51:23.150 --> 00:51:26.410
I still owe you a few reasons why
you should use Direct to Java Client.

00:51:26.410 --> 00:51:31.360
And the most important one to
me is that you end up with a

00:51:31.360 --> 00:51:33.720
much better development process.

00:51:33.720 --> 00:51:37.910
If you start, you know, projects with the
traditional development,

00:51:37.920 --> 00:51:40.540
you first of all have to
write some application logic,

00:51:40.540 --> 00:51:42.720
you have to create some
user interface files,

00:51:42.720 --> 00:51:43.760
and you know what?

00:51:43.990 --> 00:51:46.440
They are all subject to change anyway,
because the first time you

00:51:46.440 --> 00:51:49.040
show this to your customers,
they will change their mind.

00:51:49.070 --> 00:51:50.170
It's always the same.

00:51:50.840 --> 00:51:53.190
So with Direct to Java Client,
you can actually focus on

00:51:53.190 --> 00:51:54.470
the business logic first.

00:51:54.470 --> 00:51:58.030
You start with the database, your model,
and maybe implement business code.

00:51:59.560 --> 00:52:02.010
You just created a default application,
and this default application

00:52:02.060 --> 00:52:04.880
is already able to execute
your complete business logic.

00:52:04.880 --> 00:52:07.070
So you can go and show
this to your customers.

00:52:07.070 --> 00:52:09.400
They can try out the
business process with it.

00:52:09.400 --> 00:52:13.800
If you want to show them a little
more how it will look like in the end,

00:52:13.800 --> 00:52:17.100
you can go and customize with
the assistant or the rule editor.

00:52:17.100 --> 00:52:19.740
Or if it's not good enough,
you can freeze some XML,

00:52:19.740 --> 00:52:21.160
but it's piece by piece.

00:52:21.160 --> 00:52:22.900
You only do what you need to do,
and you still focus on

00:52:22.950 --> 00:52:23.830
your business logic.

00:52:23.960 --> 00:52:24.950
It's really important.

00:52:24.950 --> 00:52:28.210
And then just in the end,
when the customers say, okay,

00:52:28.210 --> 00:52:29.600
this is the business process I want.

00:52:29.600 --> 00:52:30.900
It's doing all the right things.

00:52:30.900 --> 00:52:32.440
I just want a polished UI.

00:52:32.440 --> 00:52:35.520
Then you go ahead and
fine-tune your application.

00:52:35.520 --> 00:52:39.140
But the important message is really,
with Direct to Java Client,

00:52:39.140 --> 00:52:42.610
you always have a working application
that you can use to execute

00:52:42.610 --> 00:52:44.540
your complete business logic.

00:52:49.130 --> 00:52:52.420
So the benefits are that, first of all,
it's very fast and efficient to develop

00:52:52.420 --> 00:52:56.380
a Direct to Java Client because so many
pieces are done for you automatically.

00:52:56.420 --> 00:53:00.010
It also allows you to react quickly
to requirement and so database

00:53:00.010 --> 00:53:03.400
changes because a lot of the changes
in your business model are picked

00:53:03.400 --> 00:53:05.050
up automatically by the rules.

00:53:05.070 --> 00:53:07.140
You don't have to go and change
interface files for that.

00:53:07.150 --> 00:53:09.250
It just happens automatically for you.

00:53:09.930 --> 00:53:12.490
Since you use a lot of predefined
application functionality,

00:53:12.490 --> 00:53:14.460
your testing time should also be reduced.

00:53:14.470 --> 00:53:16.370
We already give you this functionality.

00:53:16.390 --> 00:53:17.970
You don't have to write it again.

00:53:18.020 --> 00:53:19.970
We did some testing with it.

00:53:21.070 --> 00:53:24.110
Maintenance of Direct to
Java Client applications is easier

00:53:24.110 --> 00:53:25.870
because it's mostly data driven.

00:53:25.870 --> 00:53:28.500
You don't have to write a
lot of source code for it.

00:53:28.500 --> 00:53:32.980
And maintaining and editing data files,
XML files,

00:53:33.010 --> 00:53:37.300
is much easier and much less error
prone than writing source code.

00:53:37.300 --> 00:53:41.090
And again,
you can focus on your business logic.

00:53:45.040 --> 00:53:48.420
So before we go into
questions and answers,

00:53:48.420 --> 00:53:50.970
I'd like to give you a few tips
for using Direct to Java Client.

00:53:50.980 --> 00:53:53.860
The first one is try to
use it for every project.

00:53:53.900 --> 00:53:57.370
Direct to Java Client is Java Client.

00:53:57.370 --> 00:53:58.390
It's not different.

00:53:58.400 --> 00:54:01.720
It's just a different way to start
a project and to maintain a project.

00:54:01.720 --> 00:54:04.360
Prototyping is so much easier
and with the customization

00:54:04.360 --> 00:54:06.350
techniques that we have,
freezing XML and

00:54:06.350 --> 00:54:08.990
freezing interface files,
you can smoothly transition

00:54:09.070 --> 00:54:10.780
into traditional development.

00:54:12.180 --> 00:54:18.330
So the other piece is, the other tip is,
try to define reusable components.

00:54:18.330 --> 00:54:20.720
You know, you're used to that
with WebObjects anyway.

00:54:20.720 --> 00:54:23.840
Create frameworks, you know,
that contain common rules.

00:54:23.840 --> 00:54:26.420
If you want to define your
corporate look and feel,

00:54:26.420 --> 00:54:27.640
put it in a framework.

00:54:27.660 --> 00:54:31.980
If you develop things like login panels,
reporting, put it in a framework.

00:54:31.980 --> 00:54:34.970
You can use frameworks and reusable
code with Direct to Java Client as

00:54:34.990 --> 00:54:36.520
you can do with any other application.

00:54:36.520 --> 00:54:41.300
Also keep in mind that localization is so
much easier with Direct to Java Client.

00:54:42.790 --> 00:54:46.280
And it might actually make your
deployment a little simpler.

00:54:46.340 --> 00:54:49.540
The reason for that is that if you
want to upgrade your application,

00:54:49.540 --> 00:54:54.160
if you want to fix a bug,
you can often do so on the server side,

00:54:54.200 --> 00:54:55.900
because the rule system
lives on the server.

00:54:55.900 --> 00:55:00.870
So by upgrading your server system,
you can fix bugs in your client side.

00:55:01.740 --> 00:55:07.130
And that might reduce the need to
install upgrades on the client machines.

00:55:09.040 --> 00:55:13.240
So Direct to Java Client
makes your life really easy.

00:55:13.260 --> 00:55:17.780
You generate applications
dynamically based on information

00:55:17.780 --> 00:55:19.330
you find in your model.

00:55:19.350 --> 00:55:22.240
There's a lot of
predefined functionality.

00:55:22.520 --> 00:55:24.890
You have powerful
customization techniques,

00:55:24.890 --> 00:55:28.010
and it's a smooth transition
into traditional development.

00:55:28.060 --> 00:55:30.140
And it's designed for extendability.

00:55:30.140 --> 00:55:32.710
It's so easy for you to plug
in your own controller classes,

00:55:32.740 --> 00:55:34.650
your own source code.

00:55:35.820 --> 00:55:38.960
So before we go into Q&A,
I'd like to ask one of our

00:55:38.960 --> 00:55:42.260
long-term WebObjects developers,
David from CodeFab,

00:55:42.260 --> 00:55:45.060
to come up on stage and share
some of his experience as a

00:55:45.110 --> 00:55:46.930
Direct to Java Client with you.

00:55:53.700 --> 00:55:58.630
So in the last year or so,
we had the opportunity-- I'm

00:55:58.810 --> 00:56:00.930
Bill Bumgarner with CodeFab.

00:56:00.980 --> 00:56:04.950
We had the opportunity to do
a number of projects that used

00:56:04.950 --> 00:56:09.660
either Direct to Java Client,
Java Client, or Direct to Web.

00:56:09.670 --> 00:56:13.510
In this particular context,
they're really all kind of the same thing

00:56:13.510 --> 00:56:15.500
because they all build on each other.

00:56:15.500 --> 00:56:19.290
And the key thing is that it's real.

00:56:19.300 --> 00:56:21.310
I mean, this is real technology.

00:56:21.350 --> 00:56:25.460
This has led us to great
success stories in the field,

00:56:25.460 --> 00:56:28.500
being able to deliver technologies
to our clients that work,

00:56:28.500 --> 00:56:30.400
they work quickly,
and to be able to deliver

00:56:30.420 --> 00:56:31.700
those things quickly.

00:56:31.700 --> 00:56:34.420
One of the other changes we made
in the last year is we moved to

00:56:34.420 --> 00:56:36.100
an extreme programming process.

00:56:36.100 --> 00:56:39.200
One of the fundamental tenants
of that process is that you want

00:56:39.220 --> 00:56:42.700
to deliver early and you want to
deliver iteratively and often.

00:56:42.700 --> 00:56:45.260
What that means is that when
you're working with the client,

00:56:45.260 --> 00:56:48.150
you want to hand them an
example of their data live,

00:56:48.160 --> 00:56:51.780
of their business live,
as quickly as you can so that they

00:56:51.780 --> 00:56:54.460
can start to interact with it,
so they can take ownership of it,

00:56:54.460 --> 00:56:58.210
and so that they can start providing
you with feedback so you can customize

00:56:58.210 --> 00:57:00.460
this stuff quickly to meet their needs.

00:57:00.600 --> 00:57:02.660
And what we found with
these technologies,

00:57:02.800 --> 00:57:08.680
because they're so centric to not
steering you in the direction of building

00:57:08.680 --> 00:57:15.010
monolithic pages or monolithic user
interfaces that are very inflexible,

00:57:15.020 --> 00:57:18.860
they're much more about building little
components and providing these rules that

00:57:18.970 --> 00:57:22.220
drive the components to work together
to provide the ultimate solution,

00:57:22.220 --> 00:57:25.570
that in that context of
iterative development,

00:57:25.650 --> 00:57:28.560
we were able to work with the
clients to provide solutions for them

00:57:28.880 --> 00:57:30.220
very quickly that met their needs.

00:57:30.220 --> 00:57:33.420
And as their business changed,
as the project changed,

00:57:33.420 --> 00:57:36.220
we were able to change with it.

00:57:36.220 --> 00:57:40.220
One of the key things is
that as software developers,

00:57:40.220 --> 00:57:42.130
we're experts in software development.

00:57:42.390 --> 00:57:44.780
When we're working with a client,
and I mean in any market,

00:57:44.780 --> 00:57:48.780
not just consulting services,
but shipping shrink wrap products,

00:57:48.780 --> 00:57:54.780
even like Andreas at Apple,
ultimately his client is Apple.

00:57:54.780 --> 00:57:58.780
When you're working in
that kind of a context,

00:57:58.910 --> 00:58:04.310
you are the expert in the technology,
your client is the

00:58:04.410 --> 00:58:06.780
expert in the business.

00:58:06.780 --> 00:58:08.780
You want to work with them to
provide the best business solution.

00:58:08.780 --> 00:58:12.780
If you were the expert in the business
and the expert in the technology,

00:58:12.780 --> 00:58:14.540
why are you working with the
client in the first place?

00:58:14.540 --> 00:58:16.390
Just take over the world yourself.

00:58:16.440 --> 00:58:19.420
But that's not the case.

00:58:19.950 --> 00:58:22.410
And these tools really provided
us to deliver to the client

00:58:22.450 --> 00:58:24.200
these solutions very rapidly.

00:58:24.200 --> 00:58:29.490
To give a specific set of examples,
we have a particular set of

00:58:29.490 --> 00:58:32.760
interfaces where the client came to
us very late in the project cycle,

00:58:32.760 --> 00:58:34.890
said, you know,
we really want to have custom date

00:58:34.890 --> 00:58:36.580
editors throughout the user interface.

00:58:37.180 --> 00:58:40.040
So we sat down,
built a little date editor widget,

00:58:40.080 --> 00:58:43.110
and then tested it out in
one specific small context,

00:58:43.110 --> 00:58:47.840
one very tiny piece of user interface,
turned around, went into the rule editor,

00:58:47.840 --> 00:58:51.160
and said to the rule editor,
any entity that has a date

00:58:51.240 --> 00:58:54.420
attribute where the date
attribute needs to be edited,

00:58:54.420 --> 00:58:55.620
use this widget.

00:58:55.620 --> 00:58:58.430
Suddenly our whole user interface
is using this new widget set.

00:58:58.510 --> 00:59:01.420
I can't think of another
technology where we could do that.

00:59:01.460 --> 00:59:03.100
So it's real.

00:59:03.100 --> 00:59:04.110
Use it.

00:59:04.270 --> 00:59:06.090
It's very cool.

00:59:15.150 --> 00:59:17.510
Okay, the typical reminder,
the WebObjects lab is

00:59:17.510 --> 00:59:19.070
open until 6:00 today.

00:59:19.110 --> 00:59:22.100
Please vote for WebObjects'
best app server.

00:59:22.330 --> 00:59:29.100
The additional sessions I recommend for
you to see are Direct to Web tomorrow.

00:59:29.180 --> 00:59:31.460
Also,
there's an advanced Enterprise Objects

00:59:31.460 --> 00:59:34.100
framework and an advanced
Java Client session tomorrow.

00:59:34.110 --> 00:59:39.100
All of them in this room
and the typical contacts.