WEBVTT

00:00:00.720 --> 00:00:02.740
Good morning and welcome
to the chaos here.

00:00:02.840 --> 00:00:05.240
As you can see,
we've been frantically working to put

00:00:05.240 --> 00:00:07.860
all of these demos together for you.

00:00:07.860 --> 00:00:14.260
This session is something that
Steve Llewellyn and I had talked about

00:00:14.370 --> 00:00:19.020
sort of as a showcase to all of you
folks that are doing Java development

00:00:19.020 --> 00:00:24.490
as to what tools are available both from
Apple's side and from third party's side.

00:00:25.500 --> 00:00:27.200
And we wanted to put this together.

00:00:27.200 --> 00:00:30.640
I'll give you an agenda with who
we're going to talk about today.

00:00:30.640 --> 00:00:32.890
We've got obviously Project Builder.

00:00:32.890 --> 00:00:36.090
We'll have Dave Ewing from the
Project Builder team up here

00:00:36.090 --> 00:00:38.220
to demonstrate Project Builder.

00:00:38.220 --> 00:00:40.540
I'm not going to talk too much,
just a little bit here this morning.

00:00:40.540 --> 00:00:46.110
We've actually got Scott Adler from our
Java team at Apple who will be demoing

00:00:46.110 --> 00:00:50.020
on behalf of VMGear with a product,
Optimizeit.

00:00:50.020 --> 00:00:51.190
We'll have Blake Stone.

00:00:51.190 --> 00:00:54.640
I'm sure some of you have already seen
him in some of the earlier sessions.

00:00:55.500 --> 00:00:57.440
Demonstrating JBuilder.

00:00:57.440 --> 00:01:01.670
And then we'll have some new things that
I don't think have been seen anywhere,

00:01:01.670 --> 00:01:04.670
hopefully, from install,
well actually from ZeroG,

00:01:04.670 --> 00:01:06.220
two products from them.

00:01:06.220 --> 00:01:08.660
And then lastly,
we'll have MetroWorks showing

00:01:08.680 --> 00:01:12.020
the latest advances with Java and
their Code Warrior product.

00:01:12.020 --> 00:01:15.250
So with trying to put together
all of those demonstrations

00:01:15.250 --> 00:01:18.550
and all the various machines,
we'll pray that the demo

00:01:18.550 --> 00:01:20.040
gods are with us today.

00:01:20.040 --> 00:01:22.680
And everything goes off without a hitch.

00:01:22.680 --> 00:01:26.890
So with that, I'm going to go ahead and
bring... Dave Ewing up to

00:01:26.900 --> 00:01:29.740
give you guys a demonstration.

00:01:29.740 --> 00:01:32.580
We're just going to have him walk
through Project Builder and show you

00:01:32.580 --> 00:01:35.890
some of the great features that are
Java specific with Project Builder.

00:01:35.900 --> 00:01:39.150
Thanks, Alan.

00:01:40.400 --> 00:01:42.660
Thank you for the demos.

00:01:42.660 --> 00:01:46.550
So I was going to take a long time
here knowing that I was first and

00:01:46.570 --> 00:01:50.350
didn't have to worry about time,
but we've already started late,

00:01:50.390 --> 00:01:53.130
so I guess I've got to get going.

00:01:53.660 --> 00:01:54.350
There we go.

00:01:54.500 --> 00:01:57.000
So you guys have all seen
Project Builder here.

00:01:57.000 --> 00:01:58.860
You're going to see it more
in lots of other sessions,

00:01:58.870 --> 00:01:59.320
I'm sure.

00:01:59.320 --> 00:02:03.580
So the thing to note is that
Project Builder does a lot of stuff.

00:02:03.850 --> 00:02:04.980
Java is just one of them.

00:02:04.980 --> 00:02:07.370
I don't need to go
through all this stuff.

00:02:07.370 --> 00:02:11.170
That slide is actually similar to
slides in lots of other sessions,

00:02:11.170 --> 00:02:11.680
too.

00:02:11.680 --> 00:02:16.020
So why would you use
Project Builder to do Java?

00:02:16.020 --> 00:02:19.130
Well, for one thing,
it's a full Java integrated

00:02:19.340 --> 00:02:21.220
development environment.

00:02:21.760 --> 00:02:23.960
Java is a full class
citizen in Project Builder.

00:02:23.980 --> 00:02:28.490
And another reason is
that Project Builder,

00:02:28.870 --> 00:02:31.990
from the beginning,
has supported all of the

00:02:32.070 --> 00:02:33.900
Mac OS X platform initiatives.

00:02:35.600 --> 00:02:38.090
If you're building an
application on Mac OS X,

00:02:38.230 --> 00:02:42.210
even if it's a Java application,
you can do it the right way

00:02:42.210 --> 00:02:43.260
and build it as a bundle.

00:02:43.260 --> 00:02:47.860
Another thing you might use
Java in Project Builder 4

00:02:47.860 --> 00:02:50.460
is to do Cocoa development.

00:02:50.460 --> 00:02:55.050
Cocoa, most of the time people think
of Objective-C with Cocoa,

00:02:55.080 --> 00:02:58.620
but actually Java is a
very good way to do Cocoa.

00:03:00.480 --> 00:03:03.850
With that, you can use Interface
Builder to build your UI,

00:03:03.850 --> 00:03:05.980
even for Java, not just for Objective-C.

00:03:05.980 --> 00:03:09.150
Of course,
Interface Builder supports Cocoa,

00:03:09.150 --> 00:03:12.400
not Swing,
so that's something to remember.

00:03:12.400 --> 00:03:14.260
I know a lot of people
get confused by that.

00:03:14.300 --> 00:03:19.610
The final thing I'll mention
here is that if you have other

00:03:19.620 --> 00:03:24.610
source out there that's not Java,
a bunch of C Source or C++,

00:03:24.780 --> 00:03:27.720
and you need to get to that too,
you can use the Java native

00:03:27.720 --> 00:03:29.040
interface to get to it.

00:03:29.440 --> 00:03:33.190
and develop all that code in
the same project together.

00:03:35.270 --> 00:03:39.300
And with that,
I'm actually going to demo just that,

00:03:39.300 --> 00:03:41.270
a JNI project here.

00:03:41.890 --> 00:03:45.440
Okay,
so I have this little demo project here.

00:03:45.680 --> 00:03:47.040
It's actually very simple.

00:03:47.040 --> 00:03:50.960
It just has one C source
file and one Java file.

00:03:51.340 --> 00:03:56.180
And if we look at the C source code,
it does some heavy duty math here.

00:03:56.380 --> 00:03:58.370
It adds two numbers.

00:03:58.450 --> 00:04:01.380
Okay, it's a demo, right?

00:04:02.110 --> 00:04:05.890
And if we go ahead and then,
this will be built into

00:04:05.890 --> 00:04:07.690
a JNI library of course.

00:04:07.750 --> 00:04:10.230
Go ahead and look at
the Java source file.

00:04:10.310 --> 00:04:14.140
Wow, copyright Apple 2000,
it's an old demo.

00:04:14.140 --> 00:04:19.770
In the main class here, CalcEngine,
it does a system load

00:04:19.770 --> 00:04:22.880
library on that JNI library.

00:04:22.880 --> 00:04:25.080
No big surprise if you do JNI.

00:04:25.080 --> 00:04:29.880
And at the very bottom,
there's a main routine that, guess what,

00:04:30.020 --> 00:04:31.880
calls the native class.

00:04:32.000 --> 00:04:34.900
So, it calls the native function there.

00:04:35.020 --> 00:04:37.430
Okay,
well let's take a little look at how the

00:04:37.430 --> 00:04:39.700
targets are actually set up for this.

00:04:39.820 --> 00:04:43.060
We have one main target
here that builds everything,

00:04:43.200 --> 00:04:46.730
and underneath that it has some
dependencies set up to the other targets.

00:04:46.870 --> 00:04:51.300
The first one generates or
compiles the Java sources,

00:04:51.380 --> 00:04:54.320
and then there's a JNI library
that has to get built of course.

00:04:54.540 --> 00:04:58.890
And I actually have a third target
here that generates Javadoc.

00:04:59.140 --> 00:05:03.190
Now Project Builder doesn't actually
have integrated Java doc support in it,

00:05:03.230 --> 00:05:06.410
but it's actually pretty easy to do that.

00:05:06.430 --> 00:05:09.000
So we just have a shell script build
phase in this particular target

00:05:09.000 --> 00:05:11.000
that calls out to do the Java doc.

00:05:11.000 --> 00:05:13.130
Not the prettiest, but you know what?

00:05:13.130 --> 00:05:14.000
You can do it.

00:05:14.000 --> 00:05:18.190
And that's testament to the
flexibility of Project Builder.

00:05:18.970 --> 00:05:24.220
Okay, well let's go and look at
the Java sources target.

00:05:24.220 --> 00:05:26.440
This one's somewhat interesting.

00:05:26.440 --> 00:05:28.400
I mean, it builds the Java source file.

00:05:28.400 --> 00:05:29.250
That's no big deal.

00:05:29.260 --> 00:05:33.740
The one thing it does do at the end is
it also has a shell script build phase,

00:05:33.930 --> 00:05:35.700
and this one calls out to Java H.

00:05:36.360 --> 00:05:40.310
Now, it's not really necessary to use
Java H when you do JNI libraries,

00:05:40.310 --> 00:05:43.730
but it's a good idea because it
allows you to keep your Java source

00:05:43.850 --> 00:05:45.980
code and your C source code in sync.

00:05:46.040 --> 00:05:51.000
So, that little C example that had,
it actually had add and multiply.

00:05:51.000 --> 00:05:52.920
It had a few routines in it.

00:05:52.920 --> 00:05:55.520
It just doesn't know how to just add.

00:05:55.540 --> 00:05:59.760
You know, if you got out of sync,
that file really does include

00:05:59.820 --> 00:06:04.130
the .h file that's used,
that's generated here by Java H.

00:06:06.700 --> 00:06:09.520
Okay, and then the final target I want
to show you is actually the

00:06:09.570 --> 00:06:10.900
building of the JNI library.

00:06:10.900 --> 00:06:13.700
Not much here in the build phases.

00:06:13.700 --> 00:06:15.930
All it does is compile
that C source file.

00:06:16.070 --> 00:06:16.760
No big deal.

00:06:16.760 --> 00:06:20.640
If we look at the settings,
we see that it creates a file

00:06:20.750 --> 00:06:23.400
called lib calcengine.jnilib.

00:06:23.400 --> 00:06:26.680
That's what a JNI library
looks like on Mac OS X.

00:06:26.680 --> 00:06:30.910
The final interesting
thing in this panel here,

00:06:30.910 --> 00:06:34.710
down at the bottom,
When you're building a JNI library,

00:06:34.710 --> 00:06:37.950
you want to set the
library style to bundle.

00:06:39.800 --> 00:06:44.200
And then the other tab, just to show you.

00:06:44.200 --> 00:06:49.860
When we run this little demo here,
what we actually run is Java,

00:06:50.140 --> 00:06:52.300
the executable up here.

00:06:52.400 --> 00:07:06.100
[Transcript missing]

00:07:06.270 --> 00:07:09.600
Another thing to look at here is you
can actually choose which debugger

00:07:09.600 --> 00:07:11.000
you want to use in Project Builder.

00:07:11.060 --> 00:07:14.850
So you can actually use
GDB to debug the native code,

00:07:14.850 --> 00:07:18.750
and that's using GDB underneath in here,
so you debug with the

00:07:18.750 --> 00:07:20.000
GUI in Project Builder.

00:07:20.190 --> 00:07:22.800
Or you can use the Java debugger.

00:07:22.910 --> 00:07:25.420
And we're going to use the Java debugger,
so I'm just going to do a quick...

00:07:25.590 --> 00:07:28.590
I've already built this project,
so...

00:07:29.200 --> 00:07:30.280
At least I hope it's built.

00:07:30.440 --> 00:07:34.000
It was yesterday.

00:07:34.110 --> 00:07:37.540
Okay, so we stop here in the debugger.

00:07:37.820 --> 00:07:42.020
Standard pane to look at the
variables for the local routine.

00:07:42.020 --> 00:07:44.000
This particular stack's
not very interesting,

00:07:44.000 --> 00:07:45.690
just the main routine is on it.

00:07:45.800 --> 00:07:48.700
We have a pop-up here to
switch between threads.

00:07:48.890 --> 00:07:51.700
And we can go to another thread,
the reference handler.

00:07:52.110 --> 00:07:57.920
And... Oop, it's taking its time.

00:08:00.010 --> 00:08:00.950
I should have been patient.

00:08:00.990 --> 00:08:03.970
I selected on something else.

00:08:04.000 --> 00:08:07.990
So anyhow,
you can drill down into variables.

00:08:08.170 --> 00:08:09.640
Pretty standard stuff.

00:08:09.680 --> 00:08:12.100
Well, let's go ahead and continue
to that other breakpoint.

00:08:12.470 --> 00:08:17.610
You can see in the console view up above,
or perhaps you can see that it

00:08:17.900 --> 00:08:20.100
printed out that first print line.

00:08:20.320 --> 00:08:24.100
And we stopped at the second one
that says the result is result.

00:08:24.100 --> 00:08:26.000
And you can look in the variable pane.

00:08:26.110 --> 00:08:29.090
And in fact,
you can change that result if you want.

00:08:31.100 --> 00:08:32.570
Okay, so we now have a new result.

00:08:32.680 --> 00:08:36.200
We can step and see that it
printed out the new value.

00:08:36.200 --> 00:08:39.090
It's a good thing we
used JNI for this demo.

00:08:39.090 --> 00:08:40.270
Got the wrong answer, didn't it?

00:08:40.360 --> 00:08:41.630
And you know what?

00:08:41.970 --> 00:08:42.890
That's about it.

00:08:43.180 --> 00:08:44.440
That's all I need to show here.

00:08:44.440 --> 00:08:46.740
I think you're going to see
Project Builder in a lot of other places,

00:08:46.830 --> 00:08:51.320
so let's save a little time and
get on with the other folks.

00:09:02.730 --> 00:09:07.000
So we'll go ahead and
invite Scott Adler up.

00:09:07.000 --> 00:09:10.120
Scott's going to talk a
little bit about VMGear.

00:09:14.100 --> 00:09:16.090
Thanks a lot.

00:09:16.140 --> 00:09:18.560
It's actually really fun for me
to be up here to show Optimizeit.

00:09:18.620 --> 00:09:21.700
The people from VMGear couldn't
be here and they came by.

00:09:21.700 --> 00:09:25.210
We've been working with them
to get all the profiling

00:09:25.220 --> 00:09:26.640
information into our new VM.

00:09:26.640 --> 00:09:32.040
And they came to Apple and worked with us
a little bit on getting up their product.

00:09:32.110 --> 00:09:35.760
And it's really fun because I've been
doing Java programming for about five

00:09:35.760 --> 00:09:38.100
years and this tool is really useful.

00:09:38.100 --> 00:09:40.370
I don't know,
are there people in the audience

00:09:40.600 --> 00:09:42.100
who have used this tool?

00:09:42.100 --> 00:09:42.890
A couple?

00:09:42.930 --> 00:09:43.690
Okay, great.

00:09:43.820 --> 00:09:50.500
So it's an excellent tool for taking
your Java application and just figuring

00:09:50.500 --> 00:09:51.940
out what's going on under the covers.

00:09:51.940 --> 00:09:55.040
So here's a little overview
of what Optimizeit does.

00:09:55.040 --> 00:09:57.140
It's a good profiling solution.

00:09:57.140 --> 00:10:01.450
You can also fix all of
your performance issues.

00:10:01.820 --> 00:10:05.570
Now, not all of them,
but you'll be able to find the hotspots

00:10:05.600 --> 00:10:07.440
and determine what's really going on.

00:10:07.440 --> 00:10:12.970
So let's go to a little bit of what
common Java performance problems are.

00:10:13.040 --> 00:10:17.500
Now, there sort of are two different
main areas of Java problems.

00:10:17.580 --> 00:10:20.960
One is memory allocation
that might take a while.

00:10:20.990 --> 00:10:24.150
This has gotten a lot better in hotspot,
so sometimes it's really good

00:10:24.150 --> 00:10:27.140
to run through an optimizer to
see what's actually happening,

00:10:27.140 --> 00:10:29.540
how well hotspot's taking
care of this for you.

00:10:29.660 --> 00:10:33.500
But there are things like the
cost of your garbage collections,

00:10:33.500 --> 00:10:36.770
whether you're allocating
things in a tight loop.

00:10:36.780 --> 00:10:39.110
Sometimes hotspot takes care
of that really well for you.

00:10:39.120 --> 00:10:41.540
Sometimes there are other
things that are going on.

00:10:41.540 --> 00:10:43.720
So garbage collections
really are the big thing.

00:10:43.800 --> 00:10:46.700
If you're somehow allocating a whole
lot and you're hitting the top of

00:10:46.700 --> 00:10:49.280
your memory limit and the garbage
collector is kicking in and you've

00:10:49.280 --> 00:10:52.760
got a multi-threaded application,
it's going to stop all your

00:10:52.760 --> 00:10:56.710
threads because it has to go parse
all these trees of relationships

00:10:56.900 --> 00:11:00.120
and then as soon as it's done,
all your threads will be let go again.

00:11:00.130 --> 00:11:03.890
So you don't want to be garbage
collecting a lot during your running

00:11:03.890 --> 00:11:06.120
if you have a UI going or something.

00:11:06.120 --> 00:11:08.620
The other thing is memory leaks.

00:11:08.720 --> 00:11:13.120
One of the promises of garbage collection
is that you don't have memory leaks.

00:11:13.120 --> 00:11:16.000
The problem is we still make mistakes.

00:11:16.120 --> 00:11:20.250
We still do things like write a
program where we have things that

00:11:20.250 --> 00:11:22.810
are listening to other objects
so they're linked together and

00:11:22.810 --> 00:11:24.120
they end up in this complex chain.

00:11:24.120 --> 00:11:27.230
And you do things like add
action listener and you forget

00:11:27.350 --> 00:11:29.080
to remove action listener.

00:11:29.170 --> 00:11:31.120
Well,
that's just as bad as not calling delete.

00:11:31.120 --> 00:11:34.120
So you want to find your references.

00:11:34.120 --> 00:11:35.460
You want to make sure that
you're disconnecting things.

00:11:35.530 --> 00:11:37.170
You want to make sure that
you're disconnecting things

00:11:37.220 --> 00:11:38.460
correctly when you delete objects.

00:11:38.660 --> 00:11:42.460
And then the other big thing is
unsuspected performance bottlenecks.

00:11:42.600 --> 00:11:47.100
And that's actually huge because you
don't want to sit down and necessarily

00:11:47.270 --> 00:11:52.120
architect your code for ultimate
performance when you don't know

00:11:52.120 --> 00:11:53.410
what your performance issues are.

00:11:53.660 --> 00:11:56.160
Obviously,
you know some big things but you

00:11:56.160 --> 00:11:59.950
don't want to go and write this great
tight algorithm that really isn't

00:11:59.950 --> 00:12:03.170
your bottleneck and spend like three
months on that and then realize,

00:12:03.170 --> 00:12:04.460
well, actually it's your
drawing code that's bad.

00:12:04.460 --> 00:12:07.420
So that's really useful.

00:12:07.490 --> 00:12:11.500
So you get to code, you know, code clean,
code all your objects really well and

00:12:11.500 --> 00:12:15.000
then find out what your hotspots are
and then go jump into them and send

00:12:15.190 --> 00:12:17.460
your performance engineers after that.

00:12:17.460 --> 00:12:21.230
So I'll run through a quick demo.

00:12:22.570 --> 00:12:29.430
So what I have running here on number,
guest one,

00:12:34.500 --> 00:12:41.500
and others.

00:13:04.500 --> 00:13:08.780
you instantiate their classes which
then instantiate your classes.

00:13:08.780 --> 00:13:10.750
So they put a couple of
hooks underneath you.

00:13:10.900 --> 00:13:13.240
And then what you,
that's one way to start it.

00:13:13.240 --> 00:13:16.860
And then what you can do is you
can connect to that remotely.

00:13:16.910 --> 00:13:21.490
So what I have is I have this really,
my CAN demo, this is a little bit of

00:13:21.490 --> 00:13:25.270
swing set I took in here,
and just put some members of the

00:13:25.270 --> 00:13:27.990
team and I put some sorting on
here so we can just play with a

00:13:28.030 --> 00:13:30.390
little bit of performance settings.

00:13:30.390 --> 00:13:34.700
Now this I ran just by calling
the optimize it classes and

00:13:34.840 --> 00:13:37.140
then launching my class.

00:13:37.140 --> 00:13:41.340
So now that this is up and running,
I can go to optimize it,

00:13:41.430 --> 00:13:45.100
which I already started up just
so I can be a little quicker.

00:13:45.100 --> 00:13:48.140
And here's optimize it's settings.

00:13:48.140 --> 00:13:49.720
And this comes up when
you start up optimize it.

00:13:49.740 --> 00:13:52.320
You've got all these different settings.

00:13:52.320 --> 00:13:54.500
I'm not sure if you can
read these that well,

00:13:54.500 --> 00:13:58.000
but there's application, applet, servlet,
and remote application.

00:13:58.000 --> 00:13:59.320
So I'm doing the remote application.

00:13:59.370 --> 00:14:01.020
Because it's pretty cool.

00:14:01.020 --> 00:14:03.880
It lets you start up your application
separately from optimize it.

00:14:03.890 --> 00:14:06.640
And it lets you then connect to it.

00:14:06.660 --> 00:14:09.400
So right here I've got host name,
which says local host.

00:14:09.400 --> 00:14:12.120
This could be two machine profiling.

00:14:12.120 --> 00:14:14.820
So if I didn't want optimize it
to interfere with the profiling

00:14:14.820 --> 00:14:18.110
performance on the other machine,
I can set up another machine and

00:14:18.120 --> 00:14:20.020
just connect to it over the net.

00:14:20.020 --> 00:14:22.580
So I also have here the source
path set up to my source,

00:14:22.580 --> 00:14:25.120
and you'll see a little
more about that later.

00:14:25.120 --> 00:14:28.990
So if I just attach to this program,
now optimize it will come up.

00:14:29.120 --> 00:14:33.960
. . . . And what it first does
is it connects to the program.

00:14:34.010 --> 00:14:36.890
And let's get rid of my filter here.

00:14:36.900 --> 00:14:40.510
And it shows us the -- right
here is what mode you're in.

00:14:40.510 --> 00:14:44.970
And it shows us that we're in
memory allocation profiler mode.

00:14:45.060 --> 00:14:48.660
And we see all of the objects
that have been allocated.

00:14:48.660 --> 00:14:50.600
And this is since it's booted up.

00:14:50.600 --> 00:14:52.740
So since this application started.

00:14:52.750 --> 00:14:54.840
So we can see we have
a ton of char arrays,

00:14:54.840 --> 00:14:56.890
strings, objects, and all this stuff.

00:14:56.890 --> 00:14:59.120
And this can be a little useful,
but you tend to be able to do this.

00:14:59.190 --> 00:15:00.360
You tend to be overwhelmed by this.

00:15:00.360 --> 00:15:03.510
So you might want to jump down
into things that are in your code.

00:15:03.510 --> 00:15:08.540
So I know that I have a
class called sort something.

00:15:08.540 --> 00:15:11.430
Or wait, maybe it's not sort.

00:15:11.430 --> 00:15:14.170
It's called like table something.

00:15:15.400 --> 00:15:17.050
So here are all my table demo classes.

00:15:17.090 --> 00:15:20.400
Now, if you know in this,
this has all my interclasses also,

00:15:20.400 --> 00:15:21.720
which is kind of cool.

00:15:21.720 --> 00:15:24.160
They're anonymous interclasses,
so they get these numbers if

00:15:24.160 --> 00:15:25.470
you know about how this works.

00:15:25.590 --> 00:15:29.160
So I see that I have two table demos,
and I might want to say, you know,

00:15:29.160 --> 00:15:30.260
what's going on?

00:15:30.260 --> 00:15:31.220
Why are these around?

00:15:31.220 --> 00:15:32.140
Where were they allocated?

00:15:32.140 --> 00:15:37.040
So I can just double-click on these,
and I can see that I had two table demos,

00:15:37.040 --> 00:15:39.460
and this is really useful
if you have hundreds,

00:15:39.460 --> 00:15:42.520
thousands of things,
but it's showing me an allocation

00:15:42.520 --> 00:15:44.230
pathway to each object.

00:15:44.230 --> 00:15:47.780
So I can go here and say, okay,
I've got two instances.

00:15:47.780 --> 00:15:50.880
One of them was instantiated here,
and I see, oh,

00:15:50.880 --> 00:15:54.080
this was done in SwingSet 2
preload first demo.

00:15:54.080 --> 00:15:57.050
And if I want to see, you know,
what's actually going on there,

00:15:57.050 --> 00:15:59.620
I just double-click here,
and this brings up the

00:15:59.620 --> 00:16:03.080
Optimizeit source code viewer,
and I can see, oh, here's where it was.

00:16:03.160 --> 00:16:04.530
It just made a new table demo.

00:16:04.540 --> 00:16:06.930
And if I want to see
the other one and see,

00:16:06.950 --> 00:16:10.380
you know, why are these created
in different places?

00:16:10.400 --> 00:16:16.090
I can look down here and see
that I've actually got...

00:16:16.500 --> 00:16:59.400
[Transcript missing]

00:17:01.930 --> 00:17:03.540
It's now creating a
whole new test window,

00:17:03.540 --> 00:17:05.670
and we should see a whole
bunch of instances show up.

00:17:05.720 --> 00:17:10.880
And what's interesting about this is that
now I can look at just the things that

00:17:10.880 --> 00:17:14.200
have happened since I did that action,
and I know I only did that one thing.

00:17:14.200 --> 00:17:17.300
And then I can, right here,
is the garbage collector,

00:17:17.300 --> 00:17:20.120
and the garbage collector isn't
running very often because

00:17:20.210 --> 00:17:21.520
we don't really need to.

00:17:21.520 --> 00:17:24.050
So I can click here and
run the garbage collector,

00:17:24.050 --> 00:17:26.550
and it should clean up
a whole bunch of things.

00:17:26.560 --> 00:17:29.960
Not all of them because, obviously, name,
color, there are a whole bunch in there.

00:17:30.500 --> 00:17:35.080
If we look down here, table demo,
we should have, we got two more of them.

00:17:35.080 --> 00:17:37.010
I'm not sure exactly why,
so we could go try to find

00:17:37.030 --> 00:17:38.240
out where they came from.

00:17:40.340 --> 00:17:44.460
and we can see that
we've got four of them.

00:17:44.490 --> 00:17:47.160
Now,
I may only want to look at some others,

00:17:47.160 --> 00:17:49.570
so I go back here and...

00:17:49.870 --> 00:17:53.270
So I want to see just the
allocations since I put my mark in.

00:17:53.270 --> 00:17:55.880
So I say show allocations and
I see that I had two allocations

00:17:56.030 --> 00:17:57.500
and that might be confusing to me.

00:17:57.500 --> 00:17:58.040
Why did I have two?

00:17:58.040 --> 00:17:59.870
I only pressed new menu once.

00:18:00.010 --> 00:18:05.900
So I can go through here and see that
I had an action performed swing set

00:18:05.900 --> 00:18:09.610
two and that was through my menu item.

00:18:10.620 --> 00:18:13.020
And I also see that I'm
loading a load demo.

00:18:13.020 --> 00:18:16.060
So that to me says that I've
got some error in my code.

00:18:16.060 --> 00:18:19.260
I'm loading this twice for some
reason when I have one menu item.

00:18:19.260 --> 00:18:20.260
So I can go track it down and fix it.

00:18:20.260 --> 00:18:25.760
The other interesting thing is if
you are trying to find why things

00:18:25.760 --> 00:18:30.180
are sitting around in memory,
you can go here to your

00:18:30.600 --> 00:18:32.590
and others.

00:18:32.890 --> 00:18:37.590
Please join me in welcoming
the next speakers.

00:19:00.600 --> 00:19:01.190
Alan Samuel, Dave Ewing, Scott Adler,
Blake Stone, Eric Shapiro,

00:19:01.230 --> 00:19:02.350
Serge Beauchamp,
Ravindranath Kurupati and others.

00:19:02.360 --> 00:19:04.940
Please join me in welcoming
the next speakers.

00:19:04.940 --> 00:19:07.600
Please join me in welcoming
the next speakers.

00:19:30.600 --> 00:19:32.940
to see like when you run
the garbage collector,

00:19:32.970 --> 00:19:36.770
you should see garbage collector
activity crank up and then back down.

00:19:36.780 --> 00:19:39.180
Right here are some threads,
whether they're active.

00:19:39.180 --> 00:19:42.450
If I actually go to my
demo and tell it to sort,

00:19:42.450 --> 00:19:45.940
you should see I've
threaded this little demo.

00:19:45.940 --> 00:19:49.570
So, you've got a thread right here
that appears and disappears.

00:19:49.570 --> 00:19:52.760
These are the current number
of threads they actually have

00:19:52.760 --> 00:19:55.010
and usually there's just one,
your event,

00:19:55.010 --> 00:19:56.820
the guys waiting for your events.

00:19:57.010 --> 00:19:59.730
Then you can also look at
loading classes and see,

00:19:59.730 --> 00:20:03.220
you can see what classes,
how many classes are loaded.

00:20:03.220 --> 00:20:07.420
So, if you have a dynamic
loading application,

00:20:07.420 --> 00:20:09.510
you should see that you don't load
everything right at the beginning

00:20:09.510 --> 00:20:12.520
and then when you start getting
to more parts of your application,

00:20:12.520 --> 00:20:13.680
things get loaded.

00:20:13.680 --> 00:20:17.160
So, there's one other big portion of
this which is the CPU profiler which

00:20:17.170 --> 00:20:22.120
is really cool and I'll be showing
it at the Java performance demo.

00:20:22.190 --> 00:20:24.760
That's 5:04, that's this afternoon.

00:20:26.110 --> 00:20:29.620
It basically lets you profile
the whole application and it's

00:20:29.650 --> 00:20:32.630
really useful but I don't have
enough time to show it here today,

00:20:32.630 --> 00:20:33.260
right now.

00:20:33.260 --> 00:20:36.120
So, come to 5:04 and you can see
a little more about this.

00:20:36.120 --> 00:20:40.190
So, let's go back to the slides.

00:20:43.330 --> 00:20:47.530
So I just want to run over what
the strengths are of Optimizeit.

00:20:47.530 --> 00:20:50.380
The biggest thing is that you
basically can profile your

00:20:50.390 --> 00:20:51.790
Java code without any recompiling.

00:20:51.800 --> 00:20:55.630
All you do is you run it
using the Optimizeit runtime,

00:20:55.630 --> 00:20:56.220
basically.

00:20:56.220 --> 00:20:58.490
It's really easy to configure.

00:20:58.590 --> 00:20:59.940
It's easy to use.

00:20:59.940 --> 00:21:04.420
I didn't show it exactly back here,
but when you first come up,

00:21:04.420 --> 00:21:08.710
you have a whole option to
launch it all from Optimizeit.

00:21:08.720 --> 00:21:10.090
So if you don't want to
launch it separately,

00:21:10.090 --> 00:21:11.230
you can just launch it right there.

00:21:11.230 --> 00:21:13.000
You can set up all your
class paths and everything.

00:21:13.200 --> 00:21:15.200
Yeah, I'm done with that.

00:21:15.290 --> 00:21:19.510
And then the other thing
is that it's very scalable.

00:21:19.600 --> 00:21:21.740
Now, you may not have noticed
it during the demo,

00:21:21.740 --> 00:21:25.130
but when I did things,
it didn't automatically load

00:21:25.140 --> 00:21:26.110
everything that came in.

00:21:26.120 --> 00:21:28.450
So when I asked for
object allocation graphs,

00:21:28.520 --> 00:21:30.670
it would only load them as I needed them.

00:21:30.670 --> 00:21:34.380
So that's really important when
you've got a giant servlet runner

00:21:34.380 --> 00:21:39.030
that has maybe 20 threads running
with hundreds or thousands of objects.

00:21:39.060 --> 00:21:42.500
You don't want to load all of your
instance data all right at the beginning.

00:21:42.800 --> 00:21:44.680
You just want to look at the
portions that you're interested in.

00:21:44.680 --> 00:21:46.690
And if you're loading it all,
it might take forever.

00:21:46.700 --> 00:21:48.230
So that's really important.

00:21:48.230 --> 00:21:49.080
It's a really good feature.

00:21:49.080 --> 00:21:51.980
And the other thing I wanted
to mention about this,

00:21:51.980 --> 00:21:53.480
just two quick things.

00:21:53.480 --> 00:21:57.020
One is the UI for
Optimizeit is done in IFC.

00:21:57.020 --> 00:22:00.280
I don't know if many of you know that,
but that's why it doesn't look like Aqua.

00:22:00.280 --> 00:22:05.310
So I encourage you to encourage
the other developers at VMGear

00:22:05.320 --> 00:22:07.760
to work on a swing version.

00:22:07.760 --> 00:22:12.280
And also that this needs the 131 VMGear.

00:22:12.700 --> 00:22:13.820
So it needs DP1.

00:22:13.820 --> 00:22:19.830
You need to activate the hotspot VM,
and there's information in the

00:22:19.830 --> 00:22:21.870
131 release on how to do that.

00:22:21.880 --> 00:22:27.040
The other thing is they haven't
committed to a specific release date.

00:22:27.060 --> 00:22:28.740
They've said fourth quarter.

00:22:28.740 --> 00:22:31.430
So again, send them email,
find out when they're

00:22:31.430 --> 00:22:34.460
going to have releases,
but it's an excellent tool.

00:22:34.460 --> 00:22:36.880
We use it internally because
we have tons of Java code.

00:22:36.880 --> 00:22:38.890
Our Java implementation
has lots of Java code,

00:22:38.890 --> 00:22:40.110
and we use it all the time.

00:22:40.120 --> 00:22:42.320
I had an engineer come into my office.

00:22:42.700 --> 00:22:45.840
He ran through some of our graphics code
and found in 20 minutes found something

00:22:45.840 --> 00:22:47.700
that was slowing us down like 20 times.

00:22:47.700 --> 00:22:49.690
So it's really useful.

00:22:49.700 --> 00:22:51.690
So that's about it.

00:22:51.700 --> 00:22:55.570
And here's the contact info for VMGear.

00:22:55.700 --> 00:22:57.700
Pretty much VMGear.com.

00:22:57.700 --> 00:23:01.700
It used to be intuitive if
you used Optimizeit before.

00:23:12.030 --> 00:23:15.450
Thank you, Scott.

00:23:15.520 --> 00:23:19.470
Next, I want to go ahead and bring
up Blake Stone from Borland.

00:23:19.470 --> 00:23:24.300
He's going to give us another
exciting demonstration for JBuilder.

00:23:24.300 --> 00:23:27.470
And then you've got a
session later on tomorrow,

00:23:27.470 --> 00:23:28.100
is it?

00:23:28.180 --> 00:23:28.500
Today.

00:23:28.500 --> 00:23:29.280
Actually, it's today.

00:23:29.300 --> 00:23:30.200
Today, 5:00.

00:23:30.200 --> 00:23:34.200
I've got so many sessions,
I can't remember.

00:23:37.900 --> 00:23:39.310
Okay, thank you, Alan.

00:23:39.570 --> 00:23:42.000
I'm just going to jump into
a couple of slides here,

00:23:42.140 --> 00:23:46.270
so we'll quickly run through those.

00:23:46.400 --> 00:23:48.940
And then we'll jump in and do
a little bit of demonstration.

00:23:48.940 --> 00:23:51.950
I have to try to juggle some things.

00:23:51.950 --> 00:23:54.540
So you see some cool things
during the Java address yesterday.

00:23:54.540 --> 00:23:56.740
We'll show you a couple of
interesting things here,

00:23:56.740 --> 00:23:59.910
but we'll save a lot of the really good
stuff for the session at 5 o'clock.

00:23:59.960 --> 00:24:02.610
So if you want to see a lot of
the new features of JBuilder 5,

00:24:02.610 --> 00:24:05.020
if you want to see things
specific to web development,

00:24:05.020 --> 00:24:08.100
XML development, we'll defer those to
the 5 o'clock session,

00:24:08.100 --> 00:24:10.860
and we'll focus on some of the
basics of Java development here.

00:24:11.240 --> 00:24:14.630
I wanted to talk a little bit about,
specifically of course,

00:24:14.630 --> 00:24:16.230
JBuilder 5 for Mac OS X.

00:24:16.250 --> 00:24:19.840
The real focus of this
product is not on saleability,

00:24:19.840 --> 00:24:24.120
marketability, buzzword compliance,
but on extreme productivity.

00:24:24.120 --> 00:24:26.290
We are Java developers ourselves.

00:24:26.290 --> 00:24:29.930
JBuilder is written entirely in Java,
so day by day we find out

00:24:29.930 --> 00:24:33.770
what makes us more productive,
and we improve the tool to make you

00:24:33.900 --> 00:24:36.250
more productive as Java developers.

00:24:36.260 --> 00:24:38.670
So rapid coding and visual
development are a big focus,

00:24:38.670 --> 00:24:40.270
and we'll look at that a little bit.

00:24:41.070 --> 00:24:44.790
But integrated debugging and having just
a state-of-the-art debugger that takes

00:24:44.790 --> 00:24:48.560
advantage of everything that we can get
from the VM is a big piece of what we do.

00:24:48.560 --> 00:24:52.790
And of course, JDK 1.3.1 is an important
piece of the debugging story,

00:24:52.790 --> 00:24:54.060
so that's underway.

00:24:54.060 --> 00:24:56.740
And of course, you'll have a developer
preview of that shortly.

00:24:56.740 --> 00:25:00.660
There's support in there for
Java beans-based development,

00:25:00.660 --> 00:25:03.140
database development, XML, JSP.

00:25:03.140 --> 00:25:06.210
A lot of the really big things
that our customers told us were

00:25:06.210 --> 00:25:09.530
important to them and that we see
we need internally to manage our

00:25:09.530 --> 00:25:10.880
own systems are things like this.

00:25:10.920 --> 00:25:12.240
So we've got a lot of things
we've put into JBuilder.

00:25:12.380 --> 00:25:15.510
So it really covers a very
broad spectrum of what the pure

00:25:15.510 --> 00:25:18.000
Java developer is really interested in.

00:25:18.000 --> 00:25:21.030
That's our primary focus is people
doing pure Java development.

00:25:21.080 --> 00:25:24.960
The product, again,
is really written entirely in Java.

00:25:25.000 --> 00:25:27.770
We have a tiny little stub
that gets us launched,

00:25:27.770 --> 00:25:29.240
gets the VM kicked off.

00:25:29.320 --> 00:25:33.830
But then the product is Java and winds up
being a wonderful torture test for Apple.

00:25:33.960 --> 00:25:37.220
So we've been working very closely with
Apple to make sure that this enormous

00:25:37.220 --> 00:25:39.000
application works well on their VM.

00:25:39.000 --> 00:25:40.450
And it really is testament to the
fact that we're working with Apple.

00:25:40.720 --> 00:25:42.670
And it really is testament to the
hard work they've done that it works

00:25:42.690 --> 00:25:46.420
because JBuilder has more classes
in it than the whole JDK does.

00:25:46.690 --> 00:25:49.240
So we are not a small app.

00:25:49.340 --> 00:25:52.500
But we've done some work to
specifically tailor it for Mac OS X.

00:25:52.500 --> 00:25:54.280
So I'll showcase a little
bit of that as well.

00:25:54.420 --> 00:25:56.720
Yes, it's the same source code
that we use elsewhere.

00:25:56.950 --> 00:25:59.540
But we like to make sure that
it really looks nice and works

00:25:59.540 --> 00:26:02.170
well in the Aqua look and
feel and added some features

00:26:02.180 --> 00:26:05.050
specifically for Macintosh users.

00:26:05.960 --> 00:26:07.600
Where should I be aiming this?

00:26:07.930 --> 00:26:08.410
There we go.

00:26:08.410 --> 00:26:12.150
Feeding the Macintosh spirit was a
critical sort of key theme for us.

00:26:12.200 --> 00:26:15.030
We don't need to produce a
product that is some port,

00:26:15.030 --> 00:26:18.130
some popular Unix thing that
you guys happen to get access

00:26:18.130 --> 00:26:19.920
to and should be happy about it.

00:26:20.060 --> 00:26:22.390
Instead,
we want you to really feel like this

00:26:22.390 --> 00:26:26.380
is something that is the way Macintosh
users would have done it in the first

00:26:26.380 --> 00:26:30.320
place because you guys have a fantastic
platform to work on and you really

00:26:30.320 --> 00:26:32.780
deserve the best tools possible.

00:26:32.910 --> 00:26:35.880
So, yeah, it's nice that you have
the best-selling Java OS X.

00:26:35.900 --> 00:26:41.620
We have IDE forthcoming for Mac OS X and
we win tons of awards on that basis,

00:26:41.620 --> 00:26:45.740
but this is not sort of a
stepchild of JBuilder on other

00:26:45.740 --> 00:26:48.140
platforms in a lot of ways.

00:26:48.140 --> 00:26:50.760
We showcased, of course,
at a technology preview

00:26:50.760 --> 00:26:52.100
last year JBuilder 4.

00:26:52.100 --> 00:26:55.080
Well, what we're showcasing
this year is JBuilder 5,

00:26:55.080 --> 00:26:56.850
which we announced last week.

00:26:56.910 --> 00:26:59.480
So,
this isn't a long porting process here.

00:26:59.480 --> 00:27:02.580
This is something we're
keeping right up to date on.

00:27:02.580 --> 00:27:07.010
We are trying our very best here
to get to the point where all

00:27:07.010 --> 00:27:09.990
the technologies are in place to
release this and to give you the

00:27:10.220 --> 00:27:13.910
full product that you see elsewhere,
a world-class product that really

00:27:13.960 --> 00:27:16.490
takes advantage of the platform.

00:27:17.650 --> 00:27:20.800
It's been interesting that
JBuilder on Mac OS X has been

00:27:20.800 --> 00:27:22.640
very tightly connected to WWDC.

00:27:22.640 --> 00:27:24.940
I've been happy to be here
three years in a row now.

00:27:24.940 --> 00:27:28.160
The first year I was here,
just talking to people, seeing, you know,

00:27:28.160 --> 00:27:29.740
is Java really important to Apple?

00:27:29.740 --> 00:27:31.470
Is this something you'd be interested in?

00:27:31.480 --> 00:27:33.780
And talking to a lot of you to say,
you know,

00:27:33.780 --> 00:27:37.240
do you remember Borland from the
days when we had Macintosh products?

00:27:37.240 --> 00:27:39.990
And, you know, would you be excited about
something like JBuilder?

00:27:40.000 --> 00:27:42.740
And we were told resoundingly that, yes,
Java was important to

00:27:42.810 --> 00:27:43.840
the future of Apple.

00:27:43.840 --> 00:27:44.370
Just wait.

00:27:44.380 --> 00:27:45.660
There will be cool things happening.

00:27:45.800 --> 00:27:48.460
And, of course,
the Java 2 announcement was

00:27:48.460 --> 00:27:50.110
in the works at that point.

00:27:50.120 --> 00:27:54.510
And so we started doing
a little bit of work in,

00:27:54.510 --> 00:27:59.340
I guess, the spring of last year to
bring a tech demo last year.

00:27:59.340 --> 00:28:01.880
Now,
the tech demo was obviously really early.

00:28:01.880 --> 00:28:05.930
We're running on a pre-release VM that's
running on a pre-release operating

00:28:05.940 --> 00:28:10.720
system a good year ahead of when it
would really be ready for prime time.

00:28:10.720 --> 00:28:13.360
So we were happy to be
able to get that level.

00:28:13.360 --> 00:28:15.730
But here, of course,
we've given you all previews.

00:28:15.790 --> 00:28:19.440
You have a CD in your bag that
will let you look at JBuilder.

00:28:19.440 --> 00:28:22.070
And please, please,
please pull the updated

00:28:22.080 --> 00:28:26.090
VM before you consider what the
performance and stability is like.

00:28:26.210 --> 00:28:28.520
The updated VM should improve
things dramatically over the

00:28:28.520 --> 00:28:29.880
one that shipped with Mac OS X.

00:28:29.880 --> 00:28:32.400
Our support from
Apple has been phenomenal.

00:28:32.400 --> 00:28:36.760
Of course, Mac OS X itself provides a
phenomenal foundation for Java 2.

00:28:36.760 --> 00:28:40.500
Without the robust multitasking,
symmetric multiprocessing,

00:28:40.500 --> 00:28:43.150
multithreaded environment
that Mac OS X is,

00:28:43.390 --> 00:28:45.780
Java 2 would be enormously
difficult to put on the Mac.

00:28:45.800 --> 00:28:49.370
But Apple's enthusiasm and partnership
has been a big piece of this.

00:28:49.380 --> 00:28:54.000
And a really key piece
for us is JDK 1.3.1.

00:28:54.000 --> 00:28:56.100
A lot of people have asked,
when are you going to ship?

00:28:56.270 --> 00:28:56.960
What's holding you?

00:28:56.960 --> 00:29:01.520
And the answer really is that JDK 1.3.0,
through no fault of Apple's,

00:29:01.620 --> 00:29:03.960
has some pretty enormous
debugging issues.

00:29:03.960 --> 00:29:08.880
And Apple is working hard at integrating
a lot of the fixes for those in 1.3.1.

00:29:08.880 --> 00:29:11.950
And when that release is available,
that's when JBuilder really

00:29:11.950 --> 00:29:13.730
starts counting down to release.

00:29:13.740 --> 00:29:15.120
So we're looking forward
to getting there.

00:29:15.300 --> 00:29:17.600
We're going to be able to get
there as fast as we possibly can.

00:29:17.600 --> 00:29:19.080
But this is the missing piece.

00:29:19.110 --> 00:29:22.220
This is also, of course,
what you will get with the update,

00:29:22.220 --> 00:29:23.500
the developer preview release.

00:29:23.500 --> 00:29:26.700
So with that, let's just launch in and
do a little bit of a demo.

00:29:26.700 --> 00:29:29.700
I didn't want to spend
a lot of time on this,

00:29:29.700 --> 00:29:32.890
but if we can bring up demo 2 here.

00:29:36.200 --> 00:29:39.000
I did want to showcase some of
what I think is particularly

00:29:39.140 --> 00:29:42.310
exciting about JBuilder,
not just the nifty Aqua icon.

00:29:42.700 --> 00:29:46.620
JBuilder itself, again,
is really focused on developers.

00:29:46.810 --> 00:29:49.790
So rather than spending time
hiding your code from you,

00:29:49.790 --> 00:29:54.000
we really spend a lot of time focusing
on what we can do to make your coding

00:29:54.000 --> 00:29:56.740
environment especially effective.

00:29:58.010 --> 00:30:03.500
So if you go into an arbitrary example
and open a piece of source code,

00:30:03.500 --> 00:30:05.520
the source code takes up
the majority of your screen,

00:30:05.520 --> 00:30:08.910
but we spent a lot of time
finding ways to add value to the

00:30:08.910 --> 00:30:10.330
source code editor that we have.

00:30:10.380 --> 00:30:14.020
The source code editor provides,
of course, the usual features

00:30:14.020 --> 00:30:16.870
you'd expect elsewhere,
the ability to indent and

00:30:16.870 --> 00:30:20.220
unindent blocks of code,
the ability to undo an infinite

00:30:20.220 --> 00:30:23.400
number of steps and redo an
infinite number of steps,

00:30:23.520 --> 00:30:25.310
so just a high productivity
editing environment.

00:30:25.320 --> 00:30:28.080
But a high productivity editing
environment with keystrokes

00:30:28.080 --> 00:30:30.760
you're not comfortable with
wouldn't be all that useful.

00:30:30.870 --> 00:30:31.730
I will apologize.

00:30:31.820 --> 00:30:35.780
I've been using the keystrokes
my mind is trained to use here.

00:30:35.820 --> 00:30:40.020
But we do provide two sets of keybindings
specific to Macintosh customers.

00:30:40.080 --> 00:30:43.430
The Macintosh keybindings
will use sort of a classical,

00:30:43.720 --> 00:30:47.370
more of a Project Builder,
TextEdit type set of keystrokes,

00:30:47.630 --> 00:30:49.550
whereas for those of you who
are familiar with BBEdit,

00:30:49.720 --> 00:30:53.080
CodeWarrior, what have you,
we've also implemented those keybindings.

00:30:53.080 --> 00:30:54.780
And you can even go
in and customize them.

00:30:54.780 --> 00:30:55.320
So if we've missed a keybinding,
we can go in and customize it.

00:30:55.320 --> 00:30:57.780
And if you've missed out
on some of your favorites,

00:30:57.780 --> 00:31:00.740
you can go in and tailor those
keybindings to your need.

00:31:04.240 --> 00:31:06.440
So, okay,
that gets us productive right away

00:31:06.440 --> 00:31:07.720
in doing things in the editor.

00:31:07.720 --> 00:31:09.620
Let's see if we can get
that back to where it was.

00:31:09.640 --> 00:31:12.600
But also we wanted to provide
really rapid browsing mechanisms.

00:31:12.600 --> 00:31:16.290
So we provide a structural overview
of your file here that says you

00:31:16.590 --> 00:31:19.470
have a class that has all of these
members that you can quickly get to,

00:31:19.480 --> 00:31:21.860
but also that's dynamically updated.

00:31:21.860 --> 00:31:25.330
So as I define a new class,
you can see that that new

00:31:25.330 --> 00:31:27.080
class simply shows up.

00:31:27.200 --> 00:31:32.170
As I go ahead and add members to it,
then they'll show up.

00:31:32.430 --> 00:31:34.800
And this is tracked in
real time as you're coding.

00:31:34.800 --> 00:31:37.520
So I'm going to set a really low delay.

00:31:37.520 --> 00:31:40.090
We normally keep this delay
higher to avoid driving you nuts

00:31:40.100 --> 00:31:41.690
with all the flickering going on.

00:31:41.720 --> 00:31:44.120
But as I type,
you can see that we're actually

00:31:44.310 --> 00:31:47.380
able to parse the source code
and keep that up to date.

00:31:50.160 --> 00:31:52.590
So not only do we know about
the members and so forth,

00:31:52.600 --> 00:31:55.000
but in order to figure
out what the members are,

00:31:55.010 --> 00:31:58.500
we need to know whether your code
is actually syntactically correct.

00:31:58.500 --> 00:32:01.560
And whenever you have something that
is an illegal piece of code that

00:32:01.560 --> 00:32:04.260
doesn't follow the Java syntax rules,
we can show you why,

00:32:04.510 --> 00:32:07.440
where that problem is,
and help you get to it immediately,

00:32:07.450 --> 00:32:11.280
rather than having to go through a
compile cycle to find that kind of thing.

00:32:13.030 --> 00:32:16.420
So that's all pretty cool,
but it helps you at sort of

00:32:16.420 --> 00:32:18.680
the Java syntactic level,
and that's one part of the

00:32:18.680 --> 00:32:19.880
Java programming puzzle.

00:32:19.880 --> 00:32:22.850
The other major part of the
puzzle are the libraries.

00:32:22.990 --> 00:32:23.720
They're huge.

00:32:23.720 --> 00:32:26.340
There are an enormous number
of Java classes available.

00:32:26.340 --> 00:32:29.870
There are probably more classes
being introduced every day than

00:32:29.900 --> 00:32:32.020
you can possibly learn in that day.

00:32:32.020 --> 00:32:34.620
So what you need are tools that
help you with these things,

00:32:34.620 --> 00:32:36.520
and that's what we've provided here.

00:32:36.520 --> 00:32:39.600
We've provided technology,
which we call Code Insight,

00:32:39.600 --> 00:32:42.860
that allows me to say, you know,
if I'd like to create a new J button,

00:32:42.860 --> 00:32:46.000
then what are the possible constructors?

00:32:46.060 --> 00:32:49.520
Well, there are constructors that
take these various parameters.

00:32:49.520 --> 00:32:52.170
I need to pass an icon or
an action or what have you.

00:32:52.180 --> 00:32:57.300
And let's say I want to go ahead and
use something from the current scope.

00:32:57.300 --> 00:33:00.500
I can also get a list of things that
are available in the current scope.

00:33:00.500 --> 00:33:04.780
So if I want to pass a string
that I already have declared,

00:33:04.780 --> 00:33:10.500
let's come up here and create a string
foo that contains some information.

00:33:10.590 --> 00:33:12.960
And I don't remember the
name of my local variable.

00:33:12.980 --> 00:33:15.800
Or I've used an extremely
long local variable name.

00:33:15.800 --> 00:33:17.920
Then our Code Insight can assist you.

00:33:18.170 --> 00:33:20.860
For example,
if I had this as my variable name.

00:33:23.000 --> 00:33:27.020
Then I can just select it from a
list by typing the first couple

00:33:27.050 --> 00:33:29.230
of characters and we get the rest.

00:33:29.280 --> 00:33:32.250
So that technology exists
for browsing class names,

00:33:32.410 --> 00:33:36.010
for finding out about parameter types,
for finding out about

00:33:36.010 --> 00:33:37.470
parameter names as well.

00:33:37.480 --> 00:33:40.700
You'll note that you get not just
that this takes a string and an icon,

00:33:40.700 --> 00:33:43.500
but the string text and the icon icon.

00:33:43.890 --> 00:33:46.690
Perhaps most importantly for
the Code Insight technology,

00:33:46.880 --> 00:33:48.110
it's completely dynamic.

00:33:48.240 --> 00:33:51.850
It's not hard coded to understand
particular JDK classes,

00:33:51.850 --> 00:33:54.680
but it understands any class
you could possibly throw at it.

00:33:54.750 --> 00:33:57.150
So for example,
if I come in and I say I'd

00:33:57.240 --> 00:34:01.120
like to create a new com.apple,
it says, well here are the sub

00:34:01.120 --> 00:34:02.840
packages in com.apple.

00:34:02.840 --> 00:34:04.800
There's no specific code for this at all.

00:34:04.820 --> 00:34:08.720
I just know that there's some classes
out there and I can browse them.

00:34:08.730 --> 00:34:14.430
And I go and look for a completely
unprepared here class and we'll

00:34:14.430 --> 00:34:15.930
see what constructors are there.

00:34:15.940 --> 00:34:17.660
And it turns out it's
actually an interface.

00:34:17.680 --> 00:34:18.220
So there are no constructors.

00:34:18.220 --> 00:34:20.340
constructors.

00:34:20.680 --> 00:34:22.890
But that's interesting in itself.

00:34:23.090 --> 00:34:25.480
If it's an interface,
does it have any interesting

00:34:25.480 --> 00:34:27.300
constants or static members?

00:34:27.300 --> 00:34:27.600
Sure.

00:34:27.600 --> 00:34:30.730
So we can browse and discover
all this stuff on the fly.

00:34:30.870 --> 00:34:34.710
We can discover it so completely
on the fly that if I were to go

00:34:34.710 --> 00:34:42.610
ahead and declare right now my class
foo with a public void bar method,

00:34:44.120 --> 00:34:50.040
and to come down here and create a
new foo and go to invoke methods,

00:34:50.100 --> 00:34:51.260
look who shows up.

00:34:51.260 --> 00:34:54.440
So we're parsing and analyzing all
of your code on the fly all the

00:34:54.440 --> 00:34:56.640
time and that's a really key piece.

00:34:56.640 --> 00:35:00.390
The one other thing that I wanted
to demonstrate really briefly,

00:35:00.390 --> 00:35:02.820
because I'm assuming I'm eating
into other people's time if

00:35:02.820 --> 00:35:08.100
I don't stop this quickly,
is the visual design aspect.

00:35:08.100 --> 00:35:11.670
Because if you're doing
raw coding for Swing,

00:35:11.760 --> 00:35:14.860
it can take a long time to figure
out how to get the effect you want.

00:35:14.920 --> 00:35:16.690
But if you can just drag
and drop components,

00:35:16.870 --> 00:35:18.220
you can get there really rapidly.

00:35:18.400 --> 00:35:22.390
So we provide a way of visually
designing something that I can

00:35:22.510 --> 00:35:25.900
say I'd like a button here,
I'd like a text field here,

00:35:25.900 --> 00:35:34.000
I would like a scrolling region with,
say, a tree in it here.

00:35:34.440 --> 00:35:39.090
And what we do behind the scenes is write
the source code that you would have had

00:35:39.230 --> 00:35:41.310
to write in order to accomplish that.

00:35:41.310 --> 00:35:44.700
So you see here in JBInit,
we have all the constructors

00:35:44.760 --> 00:35:47.700
and things that do set text.

00:35:47.700 --> 00:35:49.690
Here we go, for example, on the button,
JButton1.

00:35:49.700 --> 00:35:53.640
But what's really unique to JBuilder's
approach is what we call two-way tools.

00:35:53.690 --> 00:35:55.700
We aren't just generating code for you.

00:35:55.700 --> 00:36:00.700
The code is the complete repository
of our knowledge about the design.

00:36:00.700 --> 00:36:04.890
So if I go and actually change the
code or do something really torturous,

00:36:05.150 --> 00:36:08.710
like actually put an expression
in there and flip back to design,

00:36:08.830 --> 00:36:12.000
we'll go and actually have a
look at your code and reproduce

00:36:12.000 --> 00:36:14.270
to reproduce what you've done.

00:36:18.750 --> 00:36:20.620
So I hope that's enough
to get you intrigued.

00:36:20.620 --> 00:36:25.430
We'll be in the Civic at 5 o'clock,
and I certainly welcome all of you there.

00:36:25.430 --> 00:36:27.700
We'll hopefully have time
to answer questions there,

00:36:27.700 --> 00:36:29.820
which we probably won't
run into at this session.

00:36:29.860 --> 00:36:31.710
So thank you very much, Alan,
and we'll see you later.

00:36:42.420 --> 00:36:45.700
Okay, next we want to bring up Zero-G.

00:36:45.700 --> 00:36:48.220
We've got Eric and Michael.

00:36:48.300 --> 00:36:51.100
And you've got the
clicker and you're set.

00:36:51.100 --> 00:36:52.000
Excellent.

00:36:52.000 --> 00:36:53.160
Morning, everybody.

00:36:53.160 --> 00:36:55.870
My name is Michael Acosta,
and I'm the lead architect

00:36:55.940 --> 00:36:57.240
for InstallAnywhere.

00:36:57.240 --> 00:37:00.580
I'm here with Eric Shapiro,
who is our founder of Zero-G.

00:37:00.580 --> 00:37:03.520
And we're really excited to be here, one,
because we finally got our demo

00:37:03.520 --> 00:37:06.760
working not 15 minutes ago,
but also because you've seen a lot

00:37:06.760 --> 00:37:10.580
of products here that are helping you
to develop your Java applications.

00:37:10.580 --> 00:37:13.320
Once you're done developing
your Java applications,

00:37:13.320 --> 00:37:14.700
you're going to need to ship them.

00:37:14.700 --> 00:37:16.620
And you're going to need
to keep them updated,

00:37:16.620 --> 00:37:18.380
maintained, configured on the machines.

00:37:18.380 --> 00:37:20.120
That's what Zero-G provides.

00:37:20.120 --> 00:37:21.400
And Eric's got some slides.

00:37:21.400 --> 00:37:22.240
He's going to show you.

00:37:22.240 --> 00:37:23.220
He's going to get the slides up.

00:37:23.220 --> 00:37:24.600
Can we get the slides back up here?

00:37:24.600 --> 00:37:26.920
Actually, I think your mic might
not be working there.

00:37:27.000 --> 00:37:28.230
So OK.

00:37:28.240 --> 00:37:31.320
So what we're going to do here-- you're
just going to have to talk really loud,

00:37:31.320 --> 00:37:32.580
so I'm sure you can do that.

00:37:32.580 --> 00:37:33.790
What we're going to do here
is we're going to show you

00:37:33.800 --> 00:37:34.580
a bunch of different things.

00:37:34.580 --> 00:37:37.640
We've been in doing Java development
now for about five years.

00:37:37.640 --> 00:37:40.820
We've been partners with
Apple during that entire time,

00:37:40.840 --> 00:37:44.210
focusing in on after you have
completed your applications,

00:37:44.220 --> 00:37:47.000
after you've written them using
any of the great tools out there.

00:37:47.000 --> 00:37:50.180
Some of the stuff that we've just seen,
some of the stuff we're going to see.

00:37:50.340 --> 00:37:51.400
What do you do next?

00:37:51.400 --> 00:37:52.960
You want to get it out to your users.

00:37:53.030 --> 00:37:54.900
You need to create a
great installer for that.

00:37:54.900 --> 00:37:56.780
And we've got two products,
one that some of you

00:37:56.780 --> 00:37:58.920
may have seen before,
which is Install Anywhere,

00:37:58.930 --> 00:38:02.380
another product called Power Update,
which we're introducing here

00:38:02.550 --> 00:38:04.490
and showing this on Mac OS X.

00:38:04.500 --> 00:38:09.670
We've been supporting Mac OS 9 and other
platforms for the last several years.

00:38:09.770 --> 00:38:13.620
So, the first thing I want to do is talk
a little bit about InstallAnywhere.

00:38:13.740 --> 00:38:16.860
InstallAnywhere allows you
to create a single installer.

00:38:16.860 --> 00:38:20.780
An installer that's entirely Java based
and allows you to run that installation,

00:38:20.830 --> 00:38:24.700
installing your application
on any Java platform.

00:38:24.700 --> 00:38:29.820
We've supported the Mac OS for a while,
we support Windows, Linux, Solaris, HPUX,

00:38:29.820 --> 00:38:31.700
AIX, all across the board.

00:38:31.700 --> 00:38:34.600
Pretty much anything you want
to do with a single installer

00:38:34.600 --> 00:38:37.700
that gives you the same look and
feel across all the platforms.

00:38:37.700 --> 00:38:40.940
Now I say look and feel,
and really what I'm saying here is feel,

00:38:40.960 --> 00:38:44.460
because we're going to show you in just
a minute here is how on the Macintosh

00:38:44.460 --> 00:38:47.020
it's incredibly important for us to
have the look that people expect,

00:38:47.020 --> 00:38:47.660
the Aqua looks.

00:38:47.750 --> 00:38:49.700
We're going to show you that.

00:38:49.800 --> 00:38:53.060
In addition to that is a technology
that's part of InstallAnywhere

00:38:53.210 --> 00:38:54.670
called LaunchAnywhere.

00:38:54.720 --> 00:38:58.390
And as many of you know,
it's incredibly difficult to

00:38:58.600 --> 00:39:02.700
convince your users how to
run your Java applications.

00:39:02.700 --> 00:39:05.700
You may have developed on a Macintosh,
you don't have a command line

00:39:05.700 --> 00:39:07.330
if you're using Mac OS 9,
you do have a command line

00:39:07.410 --> 00:39:11.440
when you're using Mac OS X,
but your Windows users have command

00:39:11.440 --> 00:39:14.700
lines and batch files and your
Solaris users have those as well.

00:39:14.700 --> 00:39:15.700
And so what are they going to do?

00:39:15.700 --> 00:39:18.550
Well, our technology,
which is called LaunchAnywhere,

00:39:18.850 --> 00:39:21.980
allows you to go ahead and create
a single launcher technology that

00:39:21.980 --> 00:39:26.690
allows your users to double click the
application just by clicking on an icon.

00:39:26.700 --> 00:39:31.680
Now the other thing that we're
going to be talking about here is...

00:39:32.350 --> 00:39:34.810
A little bit about the
architecture here is about what

00:39:34.810 --> 00:39:36.800
you can do with InstallAnywhere.

00:39:36.800 --> 00:39:39.860
InstallAnywhere can build you an
installer which can run from a CD-ROM or

00:39:39.860 --> 00:39:43.170
you can put it onto a deployment server,
onto a web server,

00:39:43.170 --> 00:39:44.580
and you can do web installs.

00:39:44.580 --> 00:39:47.480
We're going to show you a
little bit about that today.

00:39:47.480 --> 00:39:50.500
It allows you to do installations
right from the web browser.

00:39:50.500 --> 00:39:52.620
We don't have that working
today with Mac OS X,

00:39:52.620 --> 00:39:55.580
but it will as soon as we get the
new release that Blake was talking

00:39:55.690 --> 00:39:59.330
about just a little while ago as well,
and so everybody will

00:39:59.330 --> 00:40:01.860
get that support as well.

00:40:02.220 --> 00:40:05.040
Power Update is a new thing that a
lot of people out there have said,

00:40:05.040 --> 00:40:08.000
okay, installation's great,
but I've got to keep my software updated.

00:40:08.000 --> 00:40:08.950
How do I do that?

00:40:09.030 --> 00:40:11.030
Well, Apple's got a great
technology software update,

00:40:11.160 --> 00:40:12.800
but it's not available to third parties.

00:40:12.800 --> 00:40:15.820
And what Power Update does for
you is it gives you the ability

00:40:15.820 --> 00:40:19.300
to add software updating,
live updating to your applications.

00:40:19.360 --> 00:40:23.000
Not just Java applications,
any kind of application at all.

00:40:23.000 --> 00:40:25.840
In fact,
the focus of InstallAnywhere with our new

00:40:25.840 --> 00:40:30.500
release that's coming out is that you can
install native applications on Mac OS X,

00:40:30.590 --> 00:40:33.820
and you can add Power Update to it,
and you can get the live updating

00:40:33.820 --> 00:40:38.640
functionality that you would expect to
get from software update as an example.

00:40:39.540 --> 00:40:43.590
The Power Update architecture is a
little bit more intense compared to

00:40:43.590 --> 00:40:47.140
InstallAnywhere in the sense that
it does require a server component,

00:40:47.270 --> 00:40:49.070
Power Update Server,
which is where you get

00:40:49.120 --> 00:40:50.290
your software updates from.

00:40:50.400 --> 00:40:52.270
And there's a management
aspect to that as well,

00:40:52.280 --> 00:40:54.380
so you can say,
"Here's the versions that I've got,

00:40:54.430 --> 00:40:56.920
here's the versions that
I want my users to have,

00:40:56.920 --> 00:41:00.050
etc." Now,
a real challenge for us has been,

00:41:00.050 --> 00:41:04.700
as we've been focusing on the great look
and feel and trying to make sure that all

00:41:04.700 --> 00:41:06.700
this stuff looks great on the Macintosh,
well,

00:41:06.700 --> 00:41:09.320
one of the things that we wanted to do,
very important for us,

00:41:09.400 --> 00:41:13.400
is to show how great the Macintosh
platform is as a Java server platform.

00:41:13.550 --> 00:41:16.890
And, in fact, we'll be running the
Power Update Server on our

00:41:16.890 --> 00:41:20.400
Mac OS X machines up here,
and that's a J2EE application

00:41:20.400 --> 00:41:24.400
that's got the complete software
stack running a Java web server,

00:41:24.400 --> 00:41:27.270
running a database,
running the JSPs and servlets

00:41:27.530 --> 00:41:31.400
and all the connections and the
reporting modules and all that,

00:41:31.400 --> 00:41:34.310
and we're running that up here as well.

00:41:34.910 --> 00:41:37.770
and enough of me talking,
let's go ahead into a demo.

00:41:37.780 --> 00:41:40.680
And what we're going to do here is
we're going to do a side-by-side

00:41:40.680 --> 00:41:43.520
demo because this is really a
combination of both a developer

00:41:43.520 --> 00:41:46.400
tool and an end-user experience.

00:41:46.400 --> 00:41:48.080
And again,
it's really important for us to be

00:41:48.090 --> 00:41:49.540
having that end-user experience.

00:41:49.540 --> 00:41:52.730
So what we have here that you'll see
on the screen is two different things.

00:41:52.740 --> 00:41:56.640
On your left-hand side is
the end-user experience.

00:41:56.640 --> 00:41:59.600
This is what your customers will see.

00:41:59.600 --> 00:42:02.810
On the right-hand side is the
experience of what you as the

00:42:02.810 --> 00:42:04.710
software developer will see.

00:42:04.720 --> 00:42:06.510
And we're going to tag
team our demos here.

00:42:06.790 --> 00:42:09.200
And I'm going to let Michael go
ahead and take over first.

00:42:09.240 --> 00:42:11.350
If you could look over there
while I log us into the

00:42:11.360 --> 00:42:13.030
developer system on this side.

00:42:17.410 --> 00:42:18.300
Can you guys hear me?

00:42:18.330 --> 00:42:19.300
Yeah.

00:42:19.300 --> 00:42:20.300
Okay, good.

00:42:20.300 --> 00:42:22.210
Okay, what we have right here
is an Internet Explorer,

00:42:22.310 --> 00:42:23.540
a web page.

00:42:23.540 --> 00:42:25.200
And this web page,
when you actually build your

00:42:25.310 --> 00:42:28.740
installers for the various platforms,
is automatically generated.

00:42:28.740 --> 00:42:32.150
And right where you see this right here,
this is where the applet

00:42:32.190 --> 00:42:34.140
would typically be.

00:42:34.210 --> 00:42:36.850
What the applet allows you
to do is actually start the

00:42:36.850 --> 00:42:38.420
installation from the web.

00:42:38.460 --> 00:42:40.700
What that does is it will download it,
it will fire it right off,

00:42:40.700 --> 00:42:44.300
so all they have to do is click
on the button and get ready to go.

00:42:44.300 --> 00:42:47.780
Alternatively, we list all the different
platforms that you've built for,

00:42:47.940 --> 00:42:49.720
and they can just download it directly.

00:42:49.720 --> 00:42:52.290
Say they want to get something
that's for another platform,

00:42:52.290 --> 00:42:55.190
and then just put it on a central
server so they can go ahead and

00:42:55.190 --> 00:42:58.660
distribute it among the corporation,
that's fine as well.

00:42:58.660 --> 00:43:00.950
But I've already downloaded one,
got one ready to go,

00:43:01.040 --> 00:43:03.290
so I'm just going to go
ahead and start that for you.

00:43:03.340 --> 00:43:07.700
Why don't we go ahead and quit those
guys so that we don't get confused with

00:43:07.720 --> 00:43:10.920
the installer that runs in the web page.

00:43:10.920 --> 00:43:11.700
Okay.

00:43:13.600 --> 00:48:23.100
[Transcript missing]

00:48:25.980 --> 00:48:28.700
Now, what Michael just did there is
the full installation talking

00:48:28.700 --> 00:48:31.640
about what we have installed,
but it's important how you

00:48:31.640 --> 00:48:32.900
represent what that is.

00:48:32.930 --> 00:48:36.200
And so, a lot of us in the Macintosh like
to see a representation of your

00:48:36.200 --> 00:48:37.900
files and what they're going to be.

00:48:37.910 --> 00:48:40.900
So again, over here what we see
is on our Install tab,

00:48:40.900 --> 00:48:44.020
we have a representation of
what your files will look

00:48:44.160 --> 00:48:45.850
like on the end user system.

00:48:45.900 --> 00:48:48.920
This is really important
because you don't know what

00:48:48.990 --> 00:48:50.880
that end user is going to have.

00:48:50.900 --> 00:48:52.840
You don't know what their
directory structure is like,

00:48:52.950 --> 00:48:54.900
you don't know where
their home folders are,

00:48:54.910 --> 00:48:56.910
you don't know if they're
on a Solaris machine,

00:48:56.910 --> 00:48:58.900
a Windows machine,
or of course a Macintosh.

00:48:58.900 --> 00:49:02.390
And so what you want to do is
you want to set up your installer

00:49:02.390 --> 00:49:06.900
in a way where you're referring
to things in a magical way,

00:49:06.900 --> 00:49:10.670
in a way where it determines what
those folders are at runtime,

00:49:10.670 --> 00:49:11.700
at install time.

00:49:11.930 --> 00:49:13.890
We happen to call those
things magic folders.

00:49:13.900 --> 00:49:15.760
So, as you can see here,
we have a bunch of files

00:49:15.760 --> 00:49:16.900
that we're installing.

00:49:16.900 --> 00:49:19.400
If you choose to take a file
or a folder and you want to put

00:49:19.400 --> 00:49:23.180
it into a different location,
you have this selection of all these

00:49:23.180 --> 00:49:26.900
different magic folders available to you,
including ones for the Macintosh,

00:49:26.900 --> 00:49:30.900
including ones specifically for
other platforms like Unix platforms,

00:49:30.900 --> 00:49:34.050
or as you can see here,
we have some of the Windows platform

00:49:34.190 --> 00:49:35.900
locations on there as well.

00:49:35.900 --> 00:49:38.590
Or if you choose those here at the top,
these are ones that are

00:49:38.590 --> 00:49:39.890
platform independent.

00:49:39.900 --> 00:49:44.010
So if you choose the desktop location,
it will figure that out for

00:49:44.010 --> 00:49:45.900
whatever platform you're on.

00:49:45.900 --> 00:49:49.870
Mac OS Classic, Mac OS X, Windows,
what have you.

00:49:49.960 --> 00:49:52.900
And if we talk about things like
shortcuts or program folders,

00:49:53.160 --> 00:49:58.900
what those are is we call them aliases,
Unix people call them symbolic links,

00:49:59.050 --> 00:50:01.900
but basically what you
can do is you can specify,

00:50:01.900 --> 00:50:05.010
you can say,
"I want to install my shortcuts into

00:50:05.010 --> 00:50:09.340
wherever the default location is for
that operating system." So when I go

00:50:09.340 --> 00:50:12.900
ahead over here to my platforms tab,
I can see that, for instance here,

00:50:12.900 --> 00:50:15.540
for Windows,
we have the default location for

00:50:15.540 --> 00:50:17.890
shortcuts go into the programs menu.

00:50:18.080 --> 00:50:21.900
But on Mac OS, the default alias location
is on the desktop.

00:50:21.900 --> 00:50:25.830
Now you can choose this
independently for each platform.

00:50:26.060 --> 00:50:29.160
One additional thing,
before we go back to Michael here,

00:50:29.160 --> 00:50:33.050
is the idea that you do
sometimes have files,

00:50:33.050 --> 00:50:36.380
as we all know,
even Java applications occasionally have

00:50:36.400 --> 00:50:39.380
something that you might need to add in,
which is platform specific.

00:50:39.380 --> 00:50:42.650
Maybe it's a runtime library,
or it's some kind of a launcher or

00:50:42.650 --> 00:50:44.920
something like we talked about before.

00:50:44.920 --> 00:50:47.580
Well, I can take any file here,
and I can add a rule

00:50:47.670 --> 00:50:50.670
to it by simply saying,
clicking on the rules tab here,

00:50:50.670 --> 00:50:52.300
saying check platform.

00:50:52.990 --> 00:50:58.000
Now, if I only want that application
to install on Mac OS and Mac OS X,

00:50:58.000 --> 00:51:02.210
I do that, and now this file here will
only install on those platforms,

00:51:02.500 --> 00:51:05.160
allowing you to build, again,
one single installer,

00:51:05.160 --> 00:51:08.590
which will run on all platforms
for all languages around the world.

00:51:08.600 --> 00:51:13.140
So let's go ahead, I'm going to show you
one more thing over here.

00:51:13.140 --> 00:51:14.370
Leave it right here,
because I actually want

00:51:14.370 --> 00:51:15.140
to point out one thing.

00:51:15.140 --> 00:51:18.280
The interesting thing about
developing with InstallAnywhere,

00:51:18.280 --> 00:51:21.000
what makes it so easy,
is when you do add your files in,

00:51:21.000 --> 00:51:22.920
it's basically what you
see is what you get.

00:51:22.990 --> 00:51:24.890
And that's why I've switched
over here to the list view.

00:51:24.980 --> 00:51:27.960
If you look at the two views,
you'll see that,

00:51:28.190 --> 00:51:32.070
although some of the things might be
out of order because of the ordering,

00:51:32.070 --> 00:51:34.980
the sorting,
what you see is what you get.

00:51:34.980 --> 00:51:36.980
They're basically the exact same.

00:51:36.980 --> 00:51:39.230
If you drop down com,
you'll see they look

00:51:39.230 --> 00:51:40.980
exactly the same in between.

00:51:40.980 --> 00:51:44.730
And that's really important so that
you know that it's going to be laid out

00:51:44.730 --> 00:51:48.970
in the designer is exactly what you're
going to get on the destination system.

00:51:49.010 --> 00:51:50.980
Great.

00:51:50.980 --> 00:51:52.980
Now, we also talked about the object.

00:51:52.980 --> 00:51:55.980
So, the idea that you can build this
single installer for all platforms.

00:51:55.980 --> 00:51:58.560
And, as we know,
the premier platform out there

00:51:58.560 --> 00:52:03.660
has Java included with it,
but not all platforms out there are as...

00:52:03.700 --> 00:52:52.600
[Transcript missing]

00:52:53.700 --> 00:56:43.100
[Transcript missing]

00:56:44.780 --> 00:56:49.140
The next section here is where can
I go and get those updates from.

00:56:49.160 --> 00:56:52.570
This one here says where am I going
to go and deliver those updates to

00:56:52.570 --> 00:56:55.120
the end user and is that version live.

00:56:55.130 --> 00:56:58.180
Now I've already made this version live
here so let's go back to our overview

00:56:58.180 --> 00:57:02.780
and we'll see that that version is live,
version 10, and user,

00:57:02.820 --> 00:57:05.650
could you please go check for updates.

00:57:05.770 --> 00:57:06.900
So it's a very clean simple interface.

00:57:06.960 --> 00:57:09.000
There's actually several different
interfaces that you can do.

00:57:09.000 --> 00:57:12.040
You can actually hook up
Power Update directly into your

00:57:12.040 --> 00:57:15.470
application and run it silently
in the background every time you

00:57:15.470 --> 00:57:18.280
launch your application for instance
or as we do in InstallAnywhere

00:57:18.280 --> 00:57:20.940
you can add a check for updates,
pull down menu.

00:57:21.020 --> 00:57:23.820
So what I'm going to do is I'm going
to go ahead and connect to the server.

00:57:23.890 --> 00:57:26.810
It's giving me feedback
as to what's going on.

00:57:27.400 --> 00:57:28.400
Oh, sorry.

00:57:28.520 --> 00:57:33.140
And there is a new version of
Office Suite available with Aqua.

00:57:33.140 --> 00:57:33.890
Excellent.

00:57:33.960 --> 00:57:35.970
Click Next.

00:57:36.600 --> 00:57:38.650
and it's been successfully updated.

00:57:38.650 --> 00:57:40.980
So if I go back and
I launch Office Suite,

00:57:40.980 --> 00:57:42.890
let's see if this has worked.

00:57:47.310 --> 00:57:49.000
Excellent.

00:57:49.040 --> 00:57:50.300
From Mac OS X.

00:57:50.300 --> 00:57:52.770
Excellent.

00:57:52.830 --> 00:57:55.000
And lo and behold,
we've given you a little surprise.

00:57:55.000 --> 00:57:59.200
We also updated your toolbar
there with the new Aqua look

00:57:59.200 --> 00:58:00.800
and feel for Office Suite.

00:58:00.800 --> 00:58:03.290
For those of you wondering,
Office Suite is just a demo application.

00:58:03.300 --> 00:58:05.300
It actually is not a real product.

00:58:05.300 --> 00:58:07.780
But if you try InstallAnywhere,
it does come with it,

00:58:07.780 --> 00:58:10.890
so you can play around with doing that.

00:58:10.910 --> 00:58:12.000
Okay, so that's our demo.

00:58:12.000 --> 00:58:17.120
I did want to leave you with one thing,
a final thought.

00:58:17.350 --> 00:58:20.300
I'm actually not going to be able
to do it because it's licensed.

00:58:20.300 --> 00:58:24.290
Oh well,
you won't be able to show the Easter egg

00:58:24.360 --> 00:58:25.300
that's built into InstallAnywhere.

00:58:25.300 --> 00:58:28.300
I have a very interesting Easter egg
that I had written especially for this.

00:58:28.300 --> 00:58:30.300
But if you stop by our booth,
we'll be giving demos.

00:58:30.300 --> 00:58:32.300
We're here until the
end of the day today.

00:58:32.300 --> 00:58:36.030
And in addition, you can get more
information on our website,

00:58:36.030 --> 00:58:37.300
www.zerog.com.

00:58:37.420 --> 00:58:38.290
Thanks a lot, everybody.

00:58:48.900 --> 00:58:51.530
I'm going to go ahead and invite
MetroWorks up here and give you a

00:58:51.530 --> 00:58:55.040
demo of the latest CodeWarrior tools.

00:59:02.000 --> 00:59:04.540
I'm Ravi Kurupati and Serge Beauchamp.

00:59:04.540 --> 00:59:08.680
We are the Java team in MetroWorks.

00:59:08.680 --> 00:59:13.030
As everybody knows, 95% of the people on
Macintosh are CodeWarriors,

00:59:13.030 --> 00:59:16.030
and we would like to actually
have the Java supporting

00:59:16.030 --> 00:59:17.500
CodeWarrior as much as we can.

00:59:17.500 --> 00:59:24.580
But in the previous release of Java,
when we released it, we had public beta,

00:59:24.580 --> 00:59:28.000
and then we made sure that
our tools work on public beta.

00:59:28.000 --> 00:59:35.620
But the previous version of Java 6.0,
all the support is not there on OS X.

00:59:35.750 --> 00:59:38.620
So what we have here in
Early Access is all the

00:59:38.620 --> 00:59:41.190
Java support functionality on OS X.

00:59:41.340 --> 00:59:44.010
So all the Java RAD stuff,
we got it working on X,

00:59:44.110 --> 00:59:47.200
and the Java debugger
performance is much improved now.

00:59:47.200 --> 00:59:50.950
So it's far better than
what we had in OS 9.

00:59:51.070 --> 00:59:54.070
So there are a lot of
improvements in the Early Access,

00:59:54.110 --> 00:59:57.890
and Serge will go through
the technical details,

00:59:57.960 --> 01:00:01.030
and he will go through a quick demo,
so as we have less time.

01:00:01.040 --> 01:00:01.380
Okay.

01:00:02.740 --> 01:00:05.300
Hello, my name is Serge Beauchamp.

01:00:05.300 --> 01:00:07.560
I'm working for Metroix
as a software engineer.

01:00:07.560 --> 01:00:10.880
I've been working on the RAD tools
and the IDE over the past few months.

01:00:10.880 --> 01:00:15.700
I'm going to show you the new
RAD tools that we have running on OS X.

01:00:15.700 --> 01:00:21.760
I'm going to go quite quick on the slides
because we don't have much time left.

01:00:21.860 --> 01:00:25.610
But basically,
the new RAD tools are a very big

01:00:25.610 --> 01:00:31.150
improvement over the tools that
we had on OS 9.2 and on OS X.

01:00:31.160 --> 01:00:37.170
So you can expect much better
debugging time and full Java 2 support.

01:00:37.220 --> 01:00:44.400
We have a full suite of developing tools,
including a text editor, debugger,

01:00:44.400 --> 01:00:49.840
compilers, file compare tools,
a class browser that I'm

01:00:49.840 --> 01:00:51.730
going to show you right now.

01:00:51.760 --> 01:00:53.060
Okay.

01:00:55.640 --> 01:01:02.230
So this demo,
you're going to have to use the Java DP1

01:01:02.240 --> 01:01:05.340
update for being able to run it.

01:01:05.340 --> 01:01:09.330
And unfortunately,
you're going to have to grab a patch,

01:01:09.330 --> 01:01:12.890
a Java patch from the Metroix
website with the LXS CD that

01:01:12.900 --> 01:01:14.740
you just got in the bag.

01:01:14.750 --> 01:01:20.290
Because we've been doing a few
last minute fixes to make this run.

01:01:20.320 --> 01:01:23.230
Okay,
so I'm going to show you a little demo.

01:01:23.350 --> 01:01:25.050
So this is the demo.

01:01:27.010 --> 01:01:29.290
Althorad Demo.

01:01:29.460 --> 01:01:35.780
So we've been adjusting for Aqua all
the MetaWorks IDE and how many

01:01:35.780 --> 01:01:40.720
of you guys have been using the
MetaWorks tools for developing before?

01:01:40.840 --> 01:01:45.050
Okay, so yeah, I think most of you guys
already know how it works.

01:01:45.050 --> 01:01:49.970
So I have this layout editor here,
and what I did for this little

01:01:49.970 --> 01:01:55.100
demo is I built a jar file
with the Java 2D demo from Sun.

01:01:55.100 --> 01:01:58.250
So I just built a jar file and
I included the jar file and

01:01:58.250 --> 01:01:59.900
the component catalog here.

01:01:59.900 --> 01:02:04.170
So when I click on it,
it lists all the files,

01:02:04.500 --> 01:02:08.140
all the classes that I can
include in the layout editor.

01:02:08.140 --> 01:02:10.620
So...

01:02:11.340 --> 01:02:15.930
So for example, if I drag any of them,
it may do something useful and

01:02:16.320 --> 01:02:21.500
may do something not as useful,
depending on what the class really does.

01:02:21.530 --> 01:02:26.000
So this is run at runtime,
so the command has the opportunity

01:02:26.180 --> 01:02:27.960
to do whatever it wants.

01:02:28.060 --> 01:02:32.420
So what I'm going to do for this demo,
I'm going to use a class

01:02:32.420 --> 01:02:37.430
that I already know,
which is called Rotated3D.

01:02:38.540 --> 01:02:50.110
Edited, right here.

01:02:50.110 --> 01:02:50.110
I'm going to set the name of it to,
for example, Jimbo.

01:02:51.300 --> 01:02:57.180
I'm going to drag a button
here and the label of it,

01:02:57.220 --> 01:03:02.170
I'm going to put start and

01:03:04.590 --> 01:03:09.790
Another button which is going to be stop.

01:03:09.840 --> 01:03:15.240
And I'm going to add two lines of
code for making this demo work.

01:03:15.510 --> 01:03:22.220
In the action perform of this component,
I will say Jimbo start.

01:03:22.280 --> 01:03:30.290
And this guy, I'm going to do Jimbo stop.

01:03:32.020 --> 01:03:36.660
So that's pretty much all of it.

01:03:36.660 --> 01:03:37.510
And I'm going to run it.

01:03:37.680 --> 01:03:41.120
So the CodeWarriors generate
automatically the jar file,

01:03:41.140 --> 01:03:43.200
and it creates automatically
the MRJ App Builder

01:03:43.200 --> 01:03:45.860
application in the Finder.

01:03:45.950 --> 01:03:48.530
So it can be double
clicked automatically.

01:03:49.100 --> 01:04:03.800
[Transcript missing]

01:04:11.770 --> 01:04:13.870
So the Java application starts.

01:04:13.890 --> 01:04:16.800
And we are using the terminal application
for running the Java application.

01:04:16.930 --> 01:04:20.990
So if you have a console
application and you want to put

01:04:21.110 --> 01:04:23.780
some user input from the console,
you actually do it from

01:04:23.780 --> 01:04:24.940
the actual terminal.

01:04:25.110 --> 01:04:33.440
So you have the exact feedback that
you would run it through the terminal.

01:04:33.500 --> 01:04:35.500
So I can step here.

01:04:35.630 --> 01:04:39.990
And as you can see,
this kind of performance was

01:04:40.060 --> 01:04:45.390
just a dream on the OS 9 and
came just for free on the OS 10.

01:04:52.000 --> 01:04:53.000
There's the little demo.

01:04:53.140 --> 01:04:57.340
So I can put start, and stop, and start.

01:04:57.350 --> 01:05:00.120
There it is.

01:05:02.360 --> 01:05:07.580
So inside our tools,
we have the class browser,

01:05:07.580 --> 01:05:13.240
which is very useful,
especially for Java code.

01:05:13.370 --> 01:05:19.910
So you can inspect all your classes
and all the methods there is in it.

01:05:20.000 --> 01:05:24.210
So you can, for example,
edit just a simple method.

01:05:24.830 --> 01:05:30.640
You don't have to view all your
source file at the same time.

01:05:30.870 --> 01:05:32.700
You can just inspect
a small portion of it.

01:05:32.700 --> 01:05:36.480
And there's a little wizard
that you can use to add a new

01:05:36.480 --> 01:05:39.530
method or add a class to it.

01:05:39.700 --> 01:05:43.570
So it's all done automatically and
all generated source code for it.

01:05:44.110 --> 01:05:47.890
There's also all the usual
Code Warrior tools that you can

01:05:48.230 --> 01:05:49.700
find in it and you can use for Java.

01:05:49.700 --> 01:05:55.700
There's the File Compare tools
that is very useful.

01:05:55.700 --> 01:05:59.050
And actually,
some of our customers are using--I've

01:05:59.230 --> 01:06:03.700
been told are using-- our Java tools only
for the File Compare functionality of it.

01:06:03.700 --> 01:06:08.440
So I can show you a
little bit what it does.

01:06:08.700 --> 01:06:13.700
Just puts an evil modification
in it so it can break.

01:06:13.700 --> 01:06:16.600
And...

01:06:25.930 --> 01:06:32.510
I can compare directories
or I can compare files and

01:06:32.550 --> 01:06:34.600
it shows the modification.

01:06:35.780 --> 01:06:37.940
and I can merge them or not like that.

01:06:38.170 --> 01:06:41.330
So it's very convenient.

01:06:41.620 --> 01:06:46.400
Also,
you can build directly GNI application

01:06:46.400 --> 01:06:51.000
within CodeWarrio if you have the
SQL tools with the same environment.

01:06:51.000 --> 01:06:55.500
You have your design application here
that you can inspect all the classes.

01:06:55.500 --> 01:07:00.990
And basically,
we have 15 seconds left and

01:07:00.990 --> 01:07:04.500
that was our demo for today.

01:07:04.500 --> 01:07:07.160
We will have a presentation
at the Civic Center,

01:07:07.160 --> 01:07:11.000
so if you can come by and see
our presentation with our CEO,

01:07:11.000 --> 01:07:12.800
that will give you more
information about rituals.

01:07:12.800 --> 01:07:13.640
Thank you.