WEBVTT

00:00:07.180 --> 00:00:08.210
My name is Karl Hsu.

00:00:08.250 --> 00:00:10.470
I am a WebObjects engineer.

00:00:10.470 --> 00:00:13.370
And just before we begin,
I'd like to tell you that

00:00:13.700 --> 00:00:15.350
I don't have any jokes.

00:00:15.450 --> 00:00:16.480
I'm not funny.

00:00:16.590 --> 00:00:17.620
I don't sing.

00:00:17.800 --> 00:00:20.620
I really can't play the guitar.

00:00:20.780 --> 00:00:22.710
But I am Canadian.

00:00:26.920 --> 00:00:29.120
So welcome to session 611.

00:00:29.120 --> 00:00:32.230
This is Deploying
WebObjects Applications.

00:00:32.800 --> 00:00:36.790
And this is really an introduction to
deploying a WebObjects application.

00:00:36.900 --> 00:00:40.640
We'll give a little overview of
how the deployment architecture

00:00:40.640 --> 00:00:42.400
of WebObjects is structured.

00:00:42.480 --> 00:00:46.700
We'll talk about things that you
can configure in your deployment.

00:00:46.820 --> 00:00:49.740
We'll talk about some
system monitoring tools.

00:00:49.740 --> 00:00:54.650
We'll go over a typical deployment,
and then we'll do Q&A.

00:00:55.210 --> 00:00:58.550
So this is the typical deployment
architecture for WebObjects.

00:00:58.640 --> 00:01:00.550
We start with a browser,
which could be a web

00:01:00.600 --> 00:01:04.100
browser or a Java client or
something along those lines,

00:01:04.130 --> 00:01:07.920
and it makes a TCP request
to an HTTP server,

00:01:07.930 --> 00:01:09.300
a web server.

00:01:10.090 --> 00:01:12.000
That's known as the presentation layer.

00:01:12.100 --> 00:01:17.000
The web server then forwards
the request to your application.

00:01:17.130 --> 00:01:19.180
Your application is the
heart of WebObjects.

00:01:19.180 --> 00:01:21.000
It's your WebObjects application.

00:01:21.000 --> 00:01:24.000
It's what bends dynamic web
pages back to the client.

00:01:24.000 --> 00:01:25.990
It's where all your logic is.

00:01:26.900 --> 00:01:29.240
That's your application layer.

00:01:29.540 --> 00:01:33.440
The application is dynamic,
and it serves data,

00:01:33.440 --> 00:01:35.560
does things with data,
so usually it talks to

00:01:35.560 --> 00:01:37.800
a database using UF.

00:01:38.120 --> 00:01:41.190
That is the database layer.

00:01:41.890 --> 00:01:45.230
One thing to remember
is that when you deploy,

00:01:45.230 --> 00:01:51.040
resources are split between the web
server and the application itself.

00:01:51.160 --> 00:01:52.800
So why do we do this?

00:01:52.890 --> 00:01:59.800
The first thing is that we want to
make public resources available easily.

00:01:59.990 --> 00:02:03.800
Things like images, sounds,
client-side Java jars,

00:02:04.010 --> 00:02:04.800
that sort of thing.

00:02:04.810 --> 00:02:07.720
And you want to make those available
because it's faster to serve them

00:02:07.720 --> 00:02:11.010
through the web server than it is
to go through the web server to

00:02:11.020 --> 00:02:12.800
your app and have your app serve it.

00:02:12.800 --> 00:02:16.950
Your app should only be spending
time on what it does best:

00:02:17.090 --> 00:02:18.800
your business logic.

00:02:18.800 --> 00:02:21.800
The web server should be
doing what it does best,

00:02:21.800 --> 00:02:24.800
which is serving basically
static objects out.

00:02:26.210 --> 00:02:28.290
So all the other things
that your app has,

00:02:28.390 --> 00:02:31.940
the executable itself,
server-side Java files,

00:02:32.000 --> 00:02:36.900
which for WebObjects 5 is everything,
pretty much, components, the EOMODO file,

00:02:36.910 --> 00:02:39.310
all that stuff, should be private.

00:02:39.310 --> 00:02:42.690
It shouldn't be accessible
directly to a client.

00:02:43.670 --> 00:02:45.180
And you want to do this
for a number of things.

00:02:45.180 --> 00:02:48.390
Again, security is probably
the most obvious one.

00:02:48.390 --> 00:02:53.400
So that if somebody doesn't accidentally
get a hold of your EO model or

00:02:53.400 --> 00:02:58.190
something along those lines,
if the web server is badly configured.

00:02:58.820 --> 00:03:01.780
And this is known as a split install
because you take the resources,

00:03:01.780 --> 00:03:04.370
you divide them in the
public and private,

00:03:04.370 --> 00:03:07.080
and you install them in
two different places.

00:03:07.800 --> 00:03:11.060
So let's talk about
deployment configurations.

00:03:11.080 --> 00:03:14.460
What are the supported deployment
platforms for WebObjects?

00:03:14.470 --> 00:03:21.710
Mac OS X Server, the new one,
Windows 2000, Solaris 2.8.

00:03:22.430 --> 00:03:26.460
Mac OS X Server comes
with a Java Runtime 1.3.

00:03:26.500 --> 00:03:31.060
Windows 2000 and Solaris 2.8,
we require that a JRE of 1.3

00:03:31.140 --> 00:03:34.010
or higher already be installed.

00:03:35.320 --> 00:03:37.190
What sort of hardware should you run on?

00:03:37.370 --> 00:03:39.240
What kind of processor?

00:03:39.360 --> 00:03:40.390
How fast?

00:03:40.480 --> 00:03:41.900
How many?

00:03:42.030 --> 00:03:42.860
How much memory?

00:03:43.050 --> 00:03:44.480
How much disk space?

00:03:44.590 --> 00:03:47.160
Whether you have more than one machine?

00:03:48.520 --> 00:03:51.400
Where is the server located?

00:03:51.530 --> 00:03:53.000
Network?

00:03:53.140 --> 00:03:54.160
How fast is it?

00:03:54.270 --> 00:03:55.600
How secure is it?

00:03:55.720 --> 00:03:58.800
What about the physical
security of your machines?

00:03:58.960 --> 00:04:01.200
What about the temperature of
the room the machines are in?

00:04:01.220 --> 00:04:06.700
UPSs, that's particularly important
if you're in California.

00:04:06.880 --> 00:04:07.900
Software.

00:04:07.900 --> 00:04:10.000
It's important to know
what kind of account your

00:04:10.000 --> 00:04:11.700
applications will be running on.

00:04:11.800 --> 00:04:13.090
You could run them always as root.

00:04:13.350 --> 00:04:19.810
This may not be a good idea to have
unrestricted access to your file

00:04:19.810 --> 00:04:21.180
system and the rest of everything.

00:04:21.200 --> 00:04:24.640
What about application logging?

00:04:24.850 --> 00:04:26.400
You're deploying an application.

00:04:26.400 --> 00:04:28.690
You need to be able to figure out
what's wrong if something breaks.

00:04:28.900 --> 00:04:31.000
What about access control?

00:04:31.000 --> 00:04:32.200
Who has access to the application?

00:04:32.200 --> 00:04:33.690
Who's allowed to configure things?

00:04:33.700 --> 00:04:36.190
These are all things that you
really want to think about.

00:04:36.200 --> 00:04:39.200
So we're going to talk
about what can we control,

00:04:39.200 --> 00:04:41.180
the areas that we're
going to talk about today.

00:04:41.200 --> 00:04:43.200
And this is deployment.

00:04:43.200 --> 00:04:45.840
So deployment-dependent,
and typically the things that

00:04:45.840 --> 00:04:49.200
you can tweak or control,
are the WebObjects adapter,

00:04:49.310 --> 00:04:52.960
the application itself, and the database.

00:04:53.200 --> 00:04:55.360
Well,
tweaking the database is really something

00:04:55.370 --> 00:04:58.920
that's an entire profession unto itself,
so we're really not going

00:04:58.970 --> 00:05:00.190
to go into that here.

00:05:00.260 --> 00:05:03.700
We're going to talk about the
WebObjects adapter and the application.

00:05:03.700 --> 00:05:06.200
So what is the WebObjects adapter?

00:05:06.200 --> 00:05:08.200
We saw the deployment
architecture from before,

00:05:08.260 --> 00:05:12.540
and the WebObjects adapter is
what forwards the request the

00:05:12.550 --> 00:05:15.630
web server to your application.

00:05:17.180 --> 00:05:18.260
What does it do for you?

00:05:18.480 --> 00:05:22.100
Why do you want to do this rather
than just having a client connect

00:05:22.100 --> 00:05:24.100
directly to your application?

00:05:24.100 --> 00:05:26.360
It gives you better performance.

00:05:26.470 --> 00:05:31.260
It lets you load balance
between multiple instances,

00:05:31.260 --> 00:05:35.320
and it provides other things
such as pooled connections,

00:05:35.320 --> 00:05:35.910
etc.

00:05:36.160 --> 00:05:39.650
It validates client requests.

00:05:39.710 --> 00:05:43.120
A nice thing about the adapters
is that it can do some things with

00:05:43.120 --> 00:05:45.340
cookies to help you validate sessions.

00:05:45.510 --> 00:05:49.160
It can also validate that it's a
well-formed request so that your

00:05:49.160 --> 00:05:52.620
application doesn't have to deal
with badly formed requests that

00:05:52.620 --> 00:05:56.730
may be designed specifically to
crash the app or even accidentally.

00:05:57.020 --> 00:05:58.310
And it's more secure.

00:05:58.570 --> 00:06:02.320
Not giving people direct access to
your applications makes things a little

00:06:02.320 --> 00:06:04.930
bit nicer for system administrators.

00:06:04.970 --> 00:06:07.650
It also separates things out
so that the only contact that

00:06:07.680 --> 00:06:12.350
people have with the outside world
happens to be your web server.

00:06:13.690 --> 00:06:17.780
So there are two types
of WebObjects adapters.

00:06:18.240 --> 00:06:22.220
There's the CGI adapter,
Common Gateway Interface,

00:06:22.250 --> 00:06:26.010
and the API adapters,
which are plug-in modules.

00:06:26.500 --> 00:06:29.840
Why would you want to
use one or the other?

00:06:29.970 --> 00:06:34.140
CGI works anywhere,
all of our supported platforms,

00:06:34.140 --> 00:06:36.100
probably on some that aren't.

00:06:36.200 --> 00:06:37.600
But it's slow.

00:06:37.710 --> 00:06:41.400
Every time a client makes a request,
you have to fork a new process.

00:06:41.400 --> 00:06:45.350
And it doesn't support load
balancing on some platforms,

00:06:45.350 --> 00:06:47.190
Windows in particular.

00:06:48.140 --> 00:06:50.160
The API adapters are plugins.

00:06:50.160 --> 00:06:55.930
We have plugins for Apache, NSAPI,
which is for Netscape's iPlanet,

00:06:55.930 --> 00:07:00.600
and ISAPI, which is for Microsoft's
Internet Information Server.

00:07:00.760 --> 00:07:03.320
They're fast,
but they can only be used with

00:07:03.320 --> 00:07:07.610
those specific web servers and
only on specific platforms.

00:07:07.760 --> 00:07:12.430
Their major advantage is that all of
the API modules support load balancing,

00:07:12.470 --> 00:07:15.610
and we'll talk about load
balancing in just a second.

00:07:16.240 --> 00:07:18.840
All of the WebObjects
adapters are written in C.

00:07:18.860 --> 00:07:21.400
We provide the source code
so that you can modify them,

00:07:21.400 --> 00:07:23.730
you can adapt them, you can tweak them.

00:07:23.780 --> 00:07:27.220
If you make them better,
tell us and hopefully we'll

00:07:27.220 --> 00:07:28.930
incorporate the changes.

00:07:29.400 --> 00:07:31.500
Which adapters do we support?

00:07:31.550 --> 00:07:35.100
If you can see,
on all three of our supported platforms,

00:07:35.110 --> 00:07:38.380
CGI works with pretty much everything.

00:07:39.010 --> 00:07:46.900
On OS X, we support Apache.

00:07:46.900 --> 00:07:48.900
We do not support NSAPI.

00:07:48.900 --> 00:07:52.900
On Solaris, we support Apache and NSAPI.

00:07:53.110 --> 00:07:57.770
On Windows 2000,
we support NSAPI and ISAPI.

00:07:58.920 --> 00:08:01.890
So,
just in case you all are taking notes,

00:08:01.940 --> 00:08:05.710
we do not support NSAPI on OS X.

00:08:06.620 --> 00:08:09.070
So let's go back to an earlier slide.

00:08:09.170 --> 00:08:10.850
What's load balancing?

00:08:10.940 --> 00:08:11.630
I talked about it.

00:08:11.630 --> 00:08:13.140
This is really a performance thing.

00:08:13.140 --> 00:08:16.200
This is a big performance win
for you and your applications.

00:08:16.350 --> 00:08:20.570
What it does is it distributes
client requests between multiple

00:08:20.570 --> 00:08:23.010
instances of your application.

00:08:23.580 --> 00:08:24.760
Why would you want to do this?

00:08:25.010 --> 00:08:30.910
Because even though you're slowing
down a little bit the actual transit

00:08:30.990 --> 00:08:34.880
time because you have to pass the
request through an intermediary,

00:08:34.880 --> 00:08:36.250
your app is doing all the work.

00:08:36.460 --> 00:08:38.030
Your app is doing all of your logic.

00:08:38.030 --> 00:08:39.440
It's dealing with the EOs.

00:08:39.500 --> 00:08:42.200
It may be doing enormous amounts
of work against the database.

00:08:42.200 --> 00:08:48.130
And so even though the cost of passing
requests to the application and back

00:08:48.150 --> 00:08:51.360
from the application is negligible.

00:08:51.400 --> 00:08:54.290
So the idea is to have more applications.

00:08:54.300 --> 00:08:57.890
You can have multiple machines with
multiple applications running on them.

00:08:57.950 --> 00:09:02.340
They do all the work and all the adapter
does is pass requests between them.

00:09:03.510 --> 00:09:05.730
Because of the way that
WebObjects deals with sessions,

00:09:05.740 --> 00:09:09.480
we only load balance requests
that don't have a session.

00:09:09.510 --> 00:09:12.990
Once you have a session,
you're typically assigned to a particular

00:09:12.990 --> 00:09:15.950
instance running on a particular machine,
and you'll stay there

00:09:15.950 --> 00:09:17.960
until the session is gone.

00:09:18.650 --> 00:09:20.360
There are three types of load balancing.

00:09:20.420 --> 00:09:25.090
There's random, and in random,
the adapter basically for a new request

00:09:25.090 --> 00:09:27.840
just picks an arbitrary instance.

00:09:28.060 --> 00:09:31.820
Round robin, where the adapter will pick
the instances in sequence.

00:09:31.850 --> 00:09:35.890
If you had three instances,
it would go one, two, three, one, two,

00:09:35.890 --> 00:09:39.140
three, are you feeling sleepy yet?

00:09:39.630 --> 00:09:45.500
LoadAverage tries to pick the instance
that has the least number of sessions.

00:09:45.500 --> 00:09:50.190
It's a slightly tweaked heuristic,
but essentially that's

00:09:50.190 --> 00:09:51.910
what it boils down to.

00:09:52.200 --> 00:09:54.270
Let's take a look at
the adapter overview.

00:09:54.370 --> 00:09:56.300
What happens specifically?

00:09:56.470 --> 00:09:58.820
The browser makes a request.

00:09:58.920 --> 00:10:01.980
The web server will pass it
to the WebObjects adapter,

00:10:02.040 --> 00:10:05.180
and the WebObjects adapter will
look at the status request line,

00:10:05.180 --> 00:10:07.600
the URL that the browser requested.

00:10:07.870 --> 00:10:11.430
And in this case we see, look,
it's requesting the

00:10:11.470 --> 00:10:13.590
application KillerApp.

00:10:14.090 --> 00:10:18.880
and if you can see killerapp.wola/2.

00:10:18.880 --> 00:10:22.960
The 2 indicates that we're
looking at instance 2.

00:10:23.060 --> 00:10:25.830
We probably have an
existing session on that.

00:10:26.100 --> 00:10:32.250
So the adapter has a sort of a map,
and it says KillerApp2 is

00:10:32.250 --> 00:10:38.500
located on the host qualia,
and it's running on TCP/IP port 4002.

00:10:38.910 --> 00:10:40.140
So, it's found that.

00:10:40.160 --> 00:10:43.500
It then forwards the
request to your application.

00:10:43.500 --> 00:10:49.100
The application will process the request,
return the response to the adapter,

00:10:49.100 --> 00:10:51.790
the adapter hands it back
up to the web server,

00:10:51.900 --> 00:10:53.700
the web server hands
it off to your client,

00:10:53.700 --> 00:10:54.410
and we're off.

00:10:55.200 --> 00:10:57.900
The adapter site configuration.

00:10:57.900 --> 00:10:59.900
So, I alluded to a mapping.

00:10:59.900 --> 00:11:01.900
That's the adapter site configuration.

00:11:01.920 --> 00:11:05.590
And what it is,
is it maps an application number, name,

00:11:06.020 --> 00:11:11.840
and an instance ID to the application
server and the TCP/IP port that that

00:11:11.840 --> 00:11:13.980
instance happens to be running on.

00:11:13.980 --> 00:11:17.240
So, I'll just give you the
examples from before.

00:11:17.240 --> 00:11:20.970
KiloRap1 running on the
host Qualia port 4001.

00:11:21.430 --> 00:11:24.870
The site configuration also has
some additional information.

00:11:24.900 --> 00:11:29.870
What kind of load balancing you should
use for this particular application.

00:11:30.140 --> 00:11:33.810
The number of persistent connections
to make to that application,

00:11:33.810 --> 00:11:37.670
TCP/IP socket options,
that sort of thing.

00:11:39.160 --> 00:11:43.220
There are three ways that the adapter
gets this configuration information.

00:11:43.270 --> 00:11:46.030
The first way is from a flat file.

00:11:46.180 --> 00:11:50.490
Basically,
it'll just read a file off of the disk.

00:11:50.860 --> 00:11:53.460
The second way is a host list.

00:11:53.490 --> 00:11:58.500
It'll get dynamic data about application
instances from a series of hosts,

00:11:58.540 --> 00:12:01.260
known hosts that you pass it.

00:12:01.310 --> 00:12:04.550
And multicast,
which is sort of a broadcast mechanism

00:12:04.550 --> 00:12:07.370
for discovering what hosts are available.

00:12:07.570 --> 00:12:10.660
We'll go through these one
by one in just a second.

00:12:10.690 --> 00:12:13.960
The configurations for these
are updated every 10 seconds.

00:12:14.150 --> 00:12:18.190
So every 10 seconds,
the adapter will check to make sure that

00:12:18.260 --> 00:12:22.920
instances haven't left or new instances
haven't been added or new applications,

00:12:22.940 --> 00:12:23.750
whatever.

00:12:25.160 --> 00:12:27.240
So let's look at flat file.

00:12:27.370 --> 00:12:32.700
Flat file is in an XML format,
and the DTD that defines

00:12:32.700 --> 00:12:36.390
it is in the documentation.

00:12:37.150 --> 00:12:39.050
It's also, I believe,
in the adapter source

00:12:39.060 --> 00:12:40.170
code that we provide.

00:12:40.320 --> 00:12:42.330
So I'll give an example,
and it's pretty simple.

00:12:42.340 --> 00:12:45.160
I mean,
we have an application named KillerApp.

00:12:45.190 --> 00:12:50.350
It's being scheduled using RoundRobin,
and it has one instance with an

00:12:50.350 --> 00:12:54.120
ID of 1 running on Qualia port 4001.

00:12:55.540 --> 00:12:57.740
Host List Configuration.

00:12:57.920 --> 00:13:01.340
So, again,
this requests dynamic configuration

00:13:01.340 --> 00:13:04.170
information from a list of hosts.

00:13:04.260 --> 00:13:07.040
The information is normally
supplied by something called

00:13:07.090 --> 00:13:11.050
the WebObjects Task Daemon,
or WOTASTI for short.

00:13:11.550 --> 00:13:17.700
This Wotasty daemon runs on each
application server or a host.

00:13:17.950 --> 00:13:22.110
The information that Wotasty supplies to
the adapter upon request is in the same

00:13:22.180 --> 00:13:27.300
XML format that the flat file file uses.

00:13:27.460 --> 00:13:30.010
And the reason you want to do this
is because it allows for really

00:13:30.100 --> 00:13:35.970
easy dynamic addition of application
instances on a set of known hosts.

00:13:36.380 --> 00:13:38.980
This is also the default
mechanism that the adapters use.

00:13:39.100 --> 00:13:42.890
The adapters are pointed at
the local host by default.

00:13:44.120 --> 00:13:46.380
So you'll see 1085 come up probably.

00:13:46.530 --> 00:13:50.840
1085 is the port that Wotasty
is running on by default.

00:13:51.100 --> 00:13:53.140
And that's where the adapter
requests information.

00:13:53.140 --> 00:13:58.650
That's the port that the Wotacity
will return information on.

00:13:59.470 --> 00:14:01.860
So we'll take a quick
look at how this works.

00:14:01.870 --> 00:14:05.790
Wattacity is running on the two hosts,
Qualia and Ploiku.

00:14:06.540 --> 00:14:09.500
Four instances are started and
they register with Wotasty so that

00:14:09.500 --> 00:14:12.540
Wotasty knows that they're running.

00:14:13.200 --> 00:14:16.710
In the meantime,
the adapter has this pre-configured

00:14:16.710 --> 00:14:19.200
host list to look at these two hosts.

00:14:19.310 --> 00:14:23.220
And what it'll do is it'll send a
request to the two hosts and ask

00:14:23.270 --> 00:14:26.270
them for configuration information,
and from that it'll

00:14:26.270 --> 00:14:27.870
generate its site config.

00:14:27.980 --> 00:14:33.130
What it does is it actually will
merge the XML returned by the various

00:14:33.130 --> 00:14:35.810
Wotastis into a complete list.

00:14:36.880 --> 00:14:38.460
So let's talk about
multicast really quick.

00:14:38.550 --> 00:14:40.370
Multicast is kind of interesting.

00:14:40.480 --> 00:14:46.590
What we do is we broadcast a UDP packet,
a request, to a specific IP address

00:14:46.630 --> 00:14:48.800
and a TCP/IP port.

00:14:48.890 --> 00:14:51.750
We broadcast it to a multicast address.

00:14:51.890 --> 00:14:55.730
And what that address does
is it sends it by default to

00:14:55.730 --> 00:14:57.790
every machine on your subnet.

00:14:57.790 --> 00:15:00.920
You can configure routers
to pass it beyond that,

00:15:01.050 --> 00:15:03.580
but in general that's how routers
are configured by default,

00:15:03.620 --> 00:15:05.800
to stop the packets at the subnet.

00:15:05.800 --> 00:15:10.920
And what happens is all the
WOTASTIs that are running and listening

00:15:10.920 --> 00:15:13.730
for that broadcast will respond.

00:15:13.790 --> 00:15:19.230
This allows us to dynamically
build a list of hosts.

00:15:19.370 --> 00:15:23.150
Once you have the list,
configuration proceeds

00:15:23.150 --> 00:15:25.370
exactly like host list did.

00:15:25.880 --> 00:15:28.210
And we look,
we do this broadcast about once every

00:15:28.210 --> 00:15:32.770
hundred seconds because we don't really
want to be doing this all the time.

00:15:34.650 --> 00:15:36.190
So how does multicast work?

00:15:36.330 --> 00:15:38.060
Same thing we had before.

00:15:38.060 --> 00:15:40.530
We had the two hosts with
Wotacities running on them,

00:15:40.530 --> 00:15:43.340
and the WebObjects adapter
preconfigured to look,

00:15:43.350 --> 00:15:46.600
or rather to send on
that multicast address.

00:15:46.800 --> 00:15:50.150
Applications start and
register with Wotacity.

00:15:51.220 --> 00:15:53.600
The WebObjects adapter
will then broadcast,

00:15:53.720 --> 00:15:58.130
get the responses from Qualium Ploiku,
and build our dynamic host list.

00:15:58.670 --> 00:16:00.470
And finally,
it does what it did in Hostless,

00:16:00.510 --> 00:16:03.160
which is to send the request
directly to the known hosts,

00:16:03.160 --> 00:16:06.980
get back the reply,
and generate the site config.

00:16:09.310 --> 00:16:12.360
So I alluded again to the
WebObjects task daemon,

00:16:12.360 --> 00:16:13.120
Wotasty.

00:16:13.220 --> 00:16:14.350
Let's talk about this really quick.

00:16:14.470 --> 00:16:20.790
Wotasty is a WebObjects daemon
that started at boot time on

00:16:20.870 --> 00:16:25.600
Mac OS X and Solaris and at
login time on Windows 2000.

00:16:25.830 --> 00:16:30.290
It's watched over by another daemon
process so that if Wotasty dies,

00:16:30.310 --> 00:16:32.160
it should be restarted.

00:16:32.200 --> 00:16:35.280
And that way, if Wotasty dies,
you don't suddenly lose an entire

00:16:35.280 --> 00:16:38.310
host and nobody can connect to it.

00:16:39.060 --> 00:16:42.880
And its major job is to
supply the adapter with that

00:16:42.880 --> 00:16:44.860
XML dynamic configuration data.

00:16:44.860 --> 00:16:48.940
And again,
it does this on port 1085 by default.

00:16:49.610 --> 00:16:53.970
To do this, it registers running
instances on the same machine.

00:16:54.230 --> 00:16:56.800
The other thing that it's allowed
to do is that it will monitor

00:16:56.910 --> 00:17:02.540
and cycle and restart configured
instances on that machine.

00:17:02.620 --> 00:17:04.540
So how do we get it to do all this?

00:17:04.580 --> 00:17:08.760
Well, Wotasty is configured using an
application called Java Monitor.

00:17:09.250 --> 00:17:13.760
Java Monitor is a WebObjects application,
and its major purpose is to provide

00:17:13.950 --> 00:17:16.900
a web interface for Wotasty.

00:17:17.390 --> 00:17:21.070
You can use it to configure
individual application instances

00:17:21.150 --> 00:17:23.420
or entire applications.

00:17:23.460 --> 00:17:26.300
You can use it to manage multiple hosts.

00:17:26.490 --> 00:17:29.300
You can use it to configure
the WebObjects adapter.

00:17:29.300 --> 00:17:33.300
And finally, you can use it to set up
scheduling for instances.

00:17:33.300 --> 00:17:39.040
Java Monitor can be password protected,
but is not by default, and it has a new

00:17:39.270 --> 00:17:41.290
interface in WebObjects 5.

00:17:41.930 --> 00:17:43.680
Before we go on,
I wanted to mention something

00:17:43.680 --> 00:17:45.920
about instance scheduling.

00:17:45.930 --> 00:17:50.320
The idea behind instance scheduling
is that a scheduled instance is

00:17:50.420 --> 00:17:54.210
restarted periodically by Wotasty.

00:17:54.400 --> 00:17:57.980
So, after a certain period of time,
what has to be will tell an

00:17:57.980 --> 00:18:00.210
instance that it should shut down,
and when it has,

00:18:00.250 --> 00:18:02.220
it'll start up a new instance of it.

00:18:02.240 --> 00:18:06.950
You want to do this in case you're
expecting to bring them down so that you

00:18:06.950 --> 00:18:11.660
can put up a new drop of the instance,
if you have known memory leaks,

00:18:11.660 --> 00:18:13.950
anything along those lines.

00:18:15.240 --> 00:18:20.190
New in WebObjects 5 is that each
instance can be scheduled independently,

00:18:20.560 --> 00:18:24.780
rather than grouping and
scheduling by an application.

00:18:24.780 --> 00:18:27.370
So, we have three types of scheduling.

00:18:27.380 --> 00:18:31.510
We have hourly, where you can reboot the
application every X number of hours,

00:18:31.510 --> 00:18:32.940
two hours, four hours.

00:18:33.000 --> 00:18:35.960
Daily,
where an application will get rebooted

00:18:36.050 --> 00:18:38.240
every day at a particular time.

00:18:38.240 --> 00:18:40.710
And weekly,
where an application will be rebooted

00:18:40.720 --> 00:18:42.520
every week at a particular time.

00:18:44.330 --> 00:18:48.740
And we can terminate instances
immediately where it'll just exit,

00:18:48.740 --> 00:18:51.900
or gracefully where we set something
called refuse new sessions.

00:18:51.910 --> 00:18:56.510
And what will happen is that instance
will stop accepting new user requests,

00:18:56.510 --> 00:18:59.830
but will continue processing
existing user requests.

00:18:59.840 --> 00:19:02.220
Once all of the existing
users are finished,

00:19:02.250 --> 00:19:04.060
then it'll exit and start over.

00:19:04.060 --> 00:19:08.550
This is nice because you don't
kick users off of their session.

00:19:09.480 --> 00:19:11.980
So let's take a look at Java Monitor.

00:19:11.980 --> 00:19:15.860
And I'd like to ask Josh Behnke
to come up and do a demo.

00:19:22.750 --> 00:19:25.470
So he's not wired with a mic,
so he doesn't joke or

00:19:25.630 --> 00:19:27.500
sing or dance either.

00:19:27.600 --> 00:19:29.210
All right,
so this is the first screen that

00:19:29.210 --> 00:19:32.740
you should be presented with
when you start Java Monitor.

00:19:32.750 --> 00:19:35.480
And because we're going
to use it later on,

00:19:35.480 --> 00:19:37.150
let's go to the site tab.

00:19:37.430 --> 00:19:40.800
And what we're going to do is
set the URL for the adapter.

00:19:40.810 --> 00:19:44.150
And we're really doing this--
this doesn't actually choose

00:19:44.150 --> 00:19:45.980
which adapter you're using.

00:19:45.980 --> 00:19:49.240
You can have one or many adapters,
and you can switch them on the fly

00:19:49.240 --> 00:19:50.860
to point to different instances.

00:19:50.860 --> 00:19:53.800
But this is what we use to generate URLs.

00:19:54.080 --> 00:19:57.240
All right, so let's add the host.

00:19:57.320 --> 00:20:00.660
So in this case,
the web server and Java monitor

00:20:00.660 --> 00:20:03.950
are running on the same host,
and we'll add this host.

00:20:04.030 --> 00:20:07.450
If you can see,
we have three different types of hosts,

00:20:07.450 --> 00:20:09.970
Mac OS X, Windows, and Unix.

00:20:09.970 --> 00:20:13.690
You can choose the type of
host that that happens to be,

00:20:13.690 --> 00:20:15.050
and we'll add it.

00:20:15.480 --> 00:20:17.440
One of the things that's
useful for debugging,

00:20:17.440 --> 00:20:22.000
for seeing what's going on if you're
having trouble is under Available,

00:20:22.000 --> 00:20:23.100
it's now with hyperlink.

00:20:23.320 --> 00:20:25.570
So if you click on Yes,

00:20:26.790 --> 00:20:29.230
You get a bunch of information
about that particular host.

00:20:29.310 --> 00:20:32.350
You have the site configuration
as it's written to disk,

00:20:32.460 --> 00:20:35.700
the adapter configuration as it's being
sent back to the adapters by request,

00:20:35.700 --> 00:20:39.990
and all the way at the bottom,
you just have some information about

00:20:40.000 --> 00:20:42.950
what Wotasty thinks is going on.

00:20:43.310 --> 00:20:45.410
So let's add an application.

00:20:45.450 --> 00:20:48.440
We're going to add an application,
Hello World.

00:20:48.800 --> 00:21:04.800
[Transcript missing]

00:21:05.370 --> 00:21:07.590
So we're going to get the
path to the application,

00:21:07.590 --> 00:21:09.710
and we'll use the path wizard here.

00:21:09.740 --> 00:21:11.920
We select a host, and then we navigate.

00:21:11.920 --> 00:21:19.890
It's in Developer, Examples,
Java WebObjects, leave Hello World.

00:21:20.530 --> 00:21:21.390
Hello World, WOA.

00:21:21.390 --> 00:21:25.040
One thing to note,
there's some confusion in the past,

00:21:25.070 --> 00:21:28.590
you have to select the
executable inside of the WOA.

00:21:28.600 --> 00:21:31.790
Just selecting the WOA isn't good enough.

00:21:32.300 --> 00:21:33.200
All right.

00:21:33.200 --> 00:21:35.100
One thing we're going to do
is turn off auto-recover.

00:21:35.180 --> 00:21:38.270
Auto-recover is the setting
that says to monitor if this

00:21:38.660 --> 00:21:42.770
application instance dies,
restart it automatically.

00:21:42.790 --> 00:21:45.200
Don't wait for me to
tell you or anything.

00:21:45.200 --> 00:21:46.520
Just start it as soon as you can.

00:21:46.520 --> 00:21:48.110
And we're going to turn that
off because we're going to do

00:21:48.110 --> 00:21:49.130
something with the demo later.

00:21:50.780 --> 00:21:52.460
So let's go to the detail view.

00:21:52.470 --> 00:21:54.540
And this is the page where
you'll actually end up doing

00:21:54.540 --> 00:21:56.560
most of your monitoring.

00:21:56.560 --> 00:22:02.560
We're going to add two instances
to the host that we've just added.

00:22:02.560 --> 00:22:04.520
And we'll start them.

00:22:05.370 --> 00:22:08.520
So this page by default
refreshes every 60 seconds.

00:22:08.520 --> 00:22:11.100
You can either turn that off or you
can set it to a different number

00:22:11.100 --> 00:22:13.610
depending on how you want it to go.

00:22:13.960 --> 00:22:18.050
and you can start and stop
instances independently as a group.

00:22:18.070 --> 00:22:20.650
You can turn on and off auto-recover
independently as a group.

00:22:20.750 --> 00:22:23.480
Same thing with refuse new
sessions and you can turn off and

00:22:23.480 --> 00:22:24.900
on scheduling from here as well.

00:22:24.900 --> 00:22:30.040
Once the application is running,
we show some basic statistics,

00:22:30.040 --> 00:22:33.360
number of transactions,
number of active sessions,

00:22:33.400 --> 00:22:34.900
some timing statistics.

00:22:34.900 --> 00:22:38.830
We also keep track of how many
times the application has died

00:22:38.830 --> 00:22:41.980
so that you know when it's died
because if you have auto-recover on,

00:22:41.990 --> 00:22:45.560
you may just look at it and be, "Oh,
my application is still there,

00:22:45.570 --> 00:22:48.580
but it might have died every
10 minutes for the last hour."

00:22:48.910 --> 00:22:52.950
The Woe Stats link is basically
a link to the application's

00:22:52.950 --> 00:22:54.670
view of its own statistics.

00:22:54.820 --> 00:22:56.790
They're fairly detailed.

00:22:57.330 --> 00:23:00.000
Okay, so if we refresh the page,
hopefully the instances

00:23:00.000 --> 00:23:01.900
are alive at this point.

00:23:02.040 --> 00:23:03.200
And they are.

00:23:03.370 --> 00:23:07.430
So the "Hello" at the top is
a link through the web server

00:23:07.500 --> 00:23:10.700
adapter to those instances.

00:23:11.300 --> 00:23:33.200
[Transcript missing]

00:23:34.040 --> 00:23:40.160
So what we're going to do now is we're
going to show you about multicast.

00:23:40.160 --> 00:23:43.100
The web server right now
is configured by default.

00:23:43.200 --> 00:23:47.820
It only looks at the local host.

00:23:48.300 --> 00:23:49.260
All right.

00:23:49.280 --> 00:23:50.720
And we can actually prove this.

00:23:50.790 --> 00:23:53.860
Josh, if you could go to the
WoW Adapter info page.

00:23:55.360 --> 00:23:57.520
Okay,
so this is the WoW Adapter info page,

00:23:57.520 --> 00:24:00.740
and what it is is a view into the
state of the adapter at the moment.

00:24:00.760 --> 00:24:06.230
We have links to existing
applications as well as information.

00:24:06.370 --> 00:24:09.830
And if you see this line,
we're only looking at,

00:24:09.930 --> 00:24:13.000
we've only got that one
host that we're looking at.

00:24:13.010 --> 00:24:16.690
We also have a bunch of configuration
information about the adapter itself.

00:24:16.700 --> 00:24:21.600
So what we're going to do is
we're going to go back and we're

00:24:21.600 --> 00:24:24.200
going to add a second host.

00:24:24.310 --> 00:24:26.200
And that's our second demo machine.

00:24:26.200 --> 00:24:34.080
And then we'll go and we'll
add two instances to that host.

00:24:45.910 --> 00:24:49.680
So what will happen at this
point is we've added this host,

00:24:49.680 --> 00:24:54.600
but the host that we've added
isn't on the known list of hosts

00:24:54.680 --> 00:24:56.990
that the adapter knows about.

00:24:57.340 --> 00:25:01.060
And what'll happen is even
though these instances are there,

00:25:01.060 --> 00:25:03.500
the adapter won't see them.

00:25:03.700 --> 00:25:06.190
And we'll fix that using multicast.

00:25:06.230 --> 00:25:08.590
So let's refresh and see.

00:25:10.240 --> 00:25:14.300
Okay, so you see that the adapter
really doesn't know about them.

00:25:14.440 --> 00:25:17.810
Monitor, if you refresh,
should know about them.

00:25:19.500 --> 00:25:20.500
There you go.

00:25:20.500 --> 00:25:23.440
So the applications are running,
the adapter doesn't see it.

00:25:23.550 --> 00:25:27.560
So what we're going to do is we're
going to stop the web server.

00:25:30.520 --> 00:25:33.880
and edit the configuration file.

00:25:33.880 --> 00:25:36.500
We're going to change it from
looking at the local host only

00:25:37.260 --> 00:25:40.090
to doing a multicast broadcast.

00:25:47.600 --> 00:25:55.660
And we'll start the adapter back
up and we'll see what we get.

00:25:55.660 --> 00:25:56.700
And there we go.

00:25:56.700 --> 00:25:59.140
So all four applications are now showing.

00:25:59.140 --> 00:26:03.460
And what you can do at this point is
just keep adding hosts on the subnet.

00:26:03.460 --> 00:26:07.560
The adapter will just keep
picking up hosts and picking up

00:26:07.560 --> 00:26:11.080
whatever instances happen to be
running on those at the same time.

00:26:12.270 --> 00:26:15.620
So one of the things we're going
to do is show-- we're just going to

00:26:15.620 --> 00:26:19.330
show shutting down an instance and
watching the adapter pick that up.

00:26:19.430 --> 00:26:21.980
So let's shut down instance one.

00:26:24.390 --> 00:26:27.940
Give it a few seconds, refresh.

00:26:28.070 --> 00:26:30.500
Sometimes the timing's not quite right.

00:26:30.820 --> 00:26:34.450
So, that monitor knows that it's
dead and it happened immediately.

00:26:34.540 --> 00:26:38.750
We refresh, that means that the adapter
knows about it immediately.

00:26:38.870 --> 00:26:40.800
But what happens if an
application crashes,

00:26:40.800 --> 00:26:43.060
if an application dies?

00:26:43.060 --> 00:26:46.670
So, Josh, can we go to the command line
and kill whatever our most

00:26:46.670 --> 00:26:49.130
recent thing happens to be?

00:26:55.570 --> 00:26:58.260
So this gives me a chance
to segue into lifebeats.

00:26:58.310 --> 00:27:03.500
How does the Wotasty on a particular
machine know that an instance is alive?

00:27:03.500 --> 00:27:07.620
Well, the instance sends lifebeats,
TCP/IP lifebeats to Wotasty,

00:27:07.770 --> 00:27:09.700
and it tells it, "I'm alive.

00:27:09.700 --> 00:27:13.500
I'm still here." It does
it about every 30 seconds.

00:27:13.520 --> 00:27:16.650
And what happens is,
when you shut down an instance,

00:27:16.650 --> 00:27:20.360
you either terminate it internally
by calling terminate or you

00:27:20.360 --> 00:27:24.050
send a shutdown through monitor,
the instance knows it's

00:27:24.050 --> 00:27:25.500
going to shut down.

00:27:25.500 --> 00:27:28.600
So it sends a special
lifebeat to Wotasty that says,

00:27:28.600 --> 00:27:30.690
"I'm shutting down right now."

00:27:31.400 --> 00:27:52.900
[Transcript missing]

00:27:53.290 --> 00:27:55.790
There's actually something
interesting going on.

00:27:55.870 --> 00:27:59.960
If we type in a name, we hit enter,
and you can see that we're

00:28:00.080 --> 00:28:01.650
actually on instance three.

00:28:01.740 --> 00:28:03.030
We're not on instance two anymore.

00:28:03.040 --> 00:28:05.230
So the adapter tries
to be smart about it.

00:28:05.230 --> 00:28:11.030
If the instance you've
specifically requested is dead,

00:28:11.150 --> 00:28:12.420
you'll move to a different instance.

00:28:12.420 --> 00:28:16.380
I believe the XML sessions showed that
if you have a persistent session store,

00:28:16.380 --> 00:28:18.700
you can do some really
interesting fallback,

00:28:18.820 --> 00:28:20.550
failover mechanisms with that.

00:28:22.380 --> 00:28:26.790
So we refresh the monitor page.

00:28:30.890 --> 00:28:33.830
Okay,
so monitor has decided that it's dead.

00:28:33.830 --> 00:28:35.750
And at this point,
the adapter should be able to pick it up,

00:28:35.750 --> 00:28:37.900
and it's also dead.

00:28:38.410 --> 00:28:43.140
Okay, so that was just a quick demo of
Monitor and Wotasty and how to do a very,

00:28:43.140 --> 00:28:45.090
very basic deployment.

00:28:45.170 --> 00:28:47.030
Can we go back to slides?

00:28:53.620 --> 00:28:56.720
So the adapter info page is
actually really important.

00:28:56.740 --> 00:28:59.840
The adapter info page is accessed
the same way you would normally

00:28:59.840 --> 00:29:04.200
access a WebObjects application,
but instead you use the application name,

00:29:04.200 --> 00:29:05.090
WoW Adapter Info.

00:29:05.100 --> 00:29:06.500
This is really good.

00:29:06.500 --> 00:29:10.800
It provides a lot of information about
how the adapter happens to be configured.

00:29:10.800 --> 00:29:14.710
You can see which hosts it's looking at,
which instances it knows about,

00:29:14.710 --> 00:29:18.020
what the settings for various
timeout options are set to.

00:29:18.880 --> 00:29:21.040
It provides links,
direct links for all of

00:29:21.040 --> 00:29:23.960
those available instances,
and that's really useful.

00:29:23.960 --> 00:29:30.400
If you have an instance started
and you don't know where it is,

00:29:30.440 --> 00:29:33.140
that adapter info page will tell you.

00:29:33.180 --> 00:29:36.250
It's disabled by default
for security reasons.

00:29:36.260 --> 00:29:38.540
We had it enabled during the demo.

00:29:38.540 --> 00:29:42.000
You can either password protect it
or you can have it for public access.

00:29:42.000 --> 00:29:44.080
During the demo we had
it for public access.

00:29:44.270 --> 00:29:48.720
What will happen is, in fact,
any unknown name, application name,

00:29:48.750 --> 00:29:50.400
will cause it to come up.

00:29:50.570 --> 00:29:54.810
We don't suggest you deploy like that,
but it's useful for development.

00:29:55.800 --> 00:30:00.200
The other thing for looking into how the
adapter is working is adapter logging.

00:30:00.280 --> 00:30:03.930
You create a file named logWebObjects,
spelled just like that,

00:30:03.960 --> 00:30:05.860
in the temp directory of your system.

00:30:05.980 --> 00:30:11.820
So, C:\temp, I think, on Windows,
or \temp on Unix systems.

00:30:12.080 --> 00:30:16.200
and what will happen is a long file
named WebObjects log will be generated.

00:30:16.200 --> 00:30:18.590
Quick warning that
this log is really big.

00:30:18.600 --> 00:30:21.000
We dump a lot of information into it.

00:30:21.100 --> 00:30:24.710
Logging is slow and so what we do
is we allow you to start and stop it

00:30:24.870 --> 00:30:26.000
without restarting the web server.

00:30:26.000 --> 00:30:29.140
You can have your web server and
the adapter running and you just

00:30:29.140 --> 00:30:33.000
create the file and a few seconds
later we'll start logging to it.

00:30:33.000 --> 00:30:37.210
When you delete log WebObjects,
we'll stop logging to it.

00:30:39.600 --> 00:30:40.600
So now we're moving on.

00:30:40.600 --> 00:30:43.840
We've talked about the adapter
and how it gets its configuration.

00:30:43.840 --> 00:30:46.430
We're going to talk about
configuring instances.

00:30:46.640 --> 00:30:49.820
So those of you who went to the
Moving to WebObjects 5 session know

00:30:49.820 --> 00:30:52.600
that instead of the defaults database,
which we used to have,

00:30:52.600 --> 00:30:57.160
we now do configuration using
standard Java util properties.

00:30:57.570 --> 00:31:02.020
And very roughly, from our point of view,
we see the properties file from

00:31:02.020 --> 00:31:05.230
all your included frameworks,
the properties file from

00:31:05.260 --> 00:31:08.840
your application itself,
and then command line arguments

00:31:08.840 --> 00:31:10.680
in that order of precedence.

00:31:11.590 --> 00:31:13.830
So the properties file
is named properties,

00:31:13.830 --> 00:31:17.230
and it's located in the resources
directory of your WOA or your framework.

00:31:17.430 --> 00:31:19.880
And it's in pretty standard Java format.

00:31:19.940 --> 00:31:20.830
You have multiple lines.

00:31:20.840 --> 00:31:23.590
Each line is key equal value.

00:31:24.320 --> 00:31:28.200
You can also pass command line arguments,
and those are passed as -d

00:31:28.200 --> 00:31:30.860
propertyName = propertyValue.

00:31:30.860 --> 00:31:36.070
Again, we also support the old method of
passing arguments to WebObjects,

00:31:36.100 --> 00:31:41.220
which is the -wo debugging
enabled space yes or true.

00:31:41.220 --> 00:31:45.090
And that works as well,
but is deprecated.

00:31:45.410 --> 00:31:47.730
So what are some useful
deployment properties for

00:31:47.740 --> 00:31:49.800
configuring an application?

00:31:49.850 --> 00:31:53.680
We have WoePort, WoeHost,
WoeDebuggingEnabled, WoeOutputPath,

00:31:53.770 --> 00:31:58.000
WoeCachingEnabled, WoeListenQueueSize,
WoeAllowsConcurrentRequestHandling,

00:31:58.070 --> 00:32:00.340
WoeWorkerThreadCountMin, and Max.

00:32:00.460 --> 00:32:03.090
Some of these are new,
some of these are old.

00:32:04.130 --> 00:32:10.840
So WoePort forces the application
to listen on a specific TCP/IP port.

00:32:10.860 --> 00:32:13.630
If you don't set it,
it'll just ask the system to choose one,

00:32:13.630 --> 00:32:16.420
which is why you typically get,
if you start an application

00:32:16.490 --> 00:32:19.200
from the command line,
you get ports that are

00:32:19.200 --> 00:32:21.910
like 57,000 something.

00:32:22.570 --> 00:32:26.050
WoHost is new,
and you pass it either an IP address

00:32:26.050 --> 00:32:28.700
or a host name that has DNS resolution.

00:32:28.700 --> 00:32:32.910
And what it'll do is bind that
application to a specific IP,

00:32:32.930 --> 00:32:34.740
a specific interface.

00:32:34.740 --> 00:32:37.810
This is really useful if you
have a host that happens to

00:32:37.810 --> 00:32:39.680
have multiple IP addresses.

00:32:39.700 --> 00:32:44.090
You have two Ethernet cards in a machine,
one pointing one direction and

00:32:44.090 --> 00:32:47.080
one pointing the other direction,
and you can't figure out why your

00:32:47.080 --> 00:32:50.510
application happens to bind to the
wrong one and no one can see it.

00:32:51.330 --> 00:32:52.260
This is what you would use.

00:32:52.280 --> 00:32:55.400
You would bind to a particular address,
and all the requests

00:32:55.440 --> 00:32:57.280
will forward to that one.

00:32:57.320 --> 00:32:59.850
If you don't,
we just default to grabbing the

00:32:59.850 --> 00:33:01.670
first host name that we find.

00:33:01.680 --> 00:33:03.850
This isn't necessarily consistent.

00:33:03.850 --> 00:33:06.220
It sort of depends on the Java platform.

00:33:09.100 --> 00:33:10.490
There's some support for logging now.

00:33:10.500 --> 00:33:14.380
So there's WoE debugging enabled,
and you turn on and off

00:33:14.430 --> 00:33:16.800
basic WebObjects logging.

00:33:16.990 --> 00:33:19.700
There's also, I think,
EO adapter debug enabled

00:33:19.700 --> 00:33:20.630
and some other stuff.

00:33:20.660 --> 00:33:22.660
Really, see NSLog for details.

00:33:22.760 --> 00:33:27.190
It's best that you can customize this
for your particular application by

00:33:27.190 --> 00:33:32.990
enabling or disabling specific debugging
groups and at specific debugging levels.

00:33:33.000 --> 00:33:37.000
In any case,
what we provide now is WoE output path.

00:33:37.000 --> 00:33:41.270
WoE output path redirects all
of your debugging output from

00:33:41.270 --> 00:33:42.890
NSLog to a particular file.

00:33:43.500 --> 00:33:48.990
Normally, we dump it all to standard
out and standard error.

00:33:48.990 --> 00:33:48.990
This lets you

00:33:49.680 --> 00:33:54.250
This lets you set up instances
in Monitor and have the output

00:33:54.320 --> 00:33:59.220
redirected to independent files,
rather than having them all mashed into,

00:33:59.220 --> 00:34:03.100
well, used to be mashed into the
Wotacity output and now in

00:34:03.110 --> 00:34:05.270
Java doesn't go anywhere.

00:34:06.630 --> 00:34:09.040
So now we're on to
performance properties.

00:34:09.040 --> 00:34:13.060
Woe Caching Enables tells the
WebObjects application whether

00:34:13.060 --> 00:34:16.950
or not it should cache the
WebObjects components in memory,

00:34:16.960 --> 00:34:19.970
basically the .woe files.

00:34:20.380 --> 00:34:24.220
By default, for deployment installs,
it's true,

00:34:24.220 --> 00:34:25.410
and it's false for development.

00:34:25.520 --> 00:34:28.730
So in development,
you should be able to tweak HTML,

00:34:28.730 --> 00:34:30.720
and the next time you hit that page,
it'll show up.

00:34:30.800 --> 00:34:33.450
For deployment, for speed reasons,
we don't check every time.

00:34:34.950 --> 00:34:39.400
The Listen Queue Size is the number of
outstanding requests at any given time.

00:34:39.550 --> 00:34:43.420
So,
your application may end up having a lot

00:34:43.490 --> 00:34:46.530
of long-running requests all at once.

00:34:46.650 --> 00:34:50.290
And it doesn't have any resources
available to process new requests.

00:34:50.410 --> 00:34:54.350
When that happens, things start piling up
in the server socket,

00:34:54.380 --> 00:34:58.650
and the WoeListen Queue Size lets
you set how many connections we allow

00:34:58.730 --> 00:35:02.380
to sort of wait to get accepted.

00:35:02.780 --> 00:35:06.940
What allows concurrent request
handling is a little touchy.

00:35:07.030 --> 00:35:10.680
What it does is determine whether or
not requests are processed in serial.

00:35:10.800 --> 00:35:15.880
So by default, we will read requests from
sockets and write responses

00:35:15.880 --> 00:35:17.190
out to sockets in parallel.

00:35:17.190 --> 00:35:20.430
We can have dozens or hundreds
of threads doing that at once.

00:35:20.680 --> 00:35:24.390
But all the requests are processed

00:35:24.500 --> 00:35:41.500
[Transcript missing]

00:35:42.890 --> 00:35:45.710
So the last thing is,
what worker thread count min and

00:35:45.710 --> 00:35:47.910
what worker thread count max?

00:35:48.040 --> 00:35:49.500
And this is just the number of threads.

00:35:49.650 --> 00:35:52.970
What worker thread count is the
number of threads that we use

00:35:52.970 --> 00:35:54.790
to process incoming requests.

00:35:54.800 --> 00:35:58.710
We start at 16,
we default to grow to 256.

00:35:58.790 --> 00:36:00.800
You can allow it to grow infinitely.

00:36:00.800 --> 00:36:03.740
For those of you who are
familiar with 4.5 or 4.5.1,

00:36:03.810 --> 00:36:05.640
we've changed this a little bit.

00:36:05.840 --> 00:36:07.800
The number of threads used to be set.

00:36:07.800 --> 00:36:12.380
We try to take advantage of
Java's heavy threading model

00:36:12.380 --> 00:36:17.800
and rather than pooling threads,
we simply have a number of them.

00:36:18.070 --> 00:36:23.950
Waiting and Accept, which,
if anybody went to the

00:36:23.950 --> 00:36:23.950
Java performance session,
works really well.

00:36:25.210 --> 00:36:28.330
Alright,
so what are potential bottlenecks

00:36:28.330 --> 00:36:32.340
that you should look at when
you're doing a deployment?

00:36:32.440 --> 00:36:34.850
The application logic itself
could be a bottleneck.

00:36:34.900 --> 00:36:37.800
You could be doing
something amazingly stupid,

00:36:37.800 --> 00:36:41.860
sorting a 40,000 element
array using bubble sort.

00:36:42.760 --> 00:36:45.890
You could be using the wrong database,
wondering why,

00:36:45.890 --> 00:36:48.700
despite the fact that you have
hundreds of connections doing,

00:36:48.700 --> 00:36:51.480
you know, dozens of megabytes worth
of transaction processing,

00:36:51.480 --> 00:36:53.780
why isn't it working until
somebody points out that you're

00:36:53.780 --> 00:36:55.100
using the flat file adapter.

00:36:55.100 --> 00:36:57.500
What kind of CPU?

00:36:57.500 --> 00:37:03.410
Well, hey, we're running, say,
mybighonkingstore.com on a Celeron.

00:37:03.440 --> 00:37:05.030
Sometimes it's not a good idea.

00:37:05.040 --> 00:37:06.180
You own a big CPU.

00:37:06.180 --> 00:37:08.090
If you can get it, you want more.

00:37:08.740 --> 00:37:11.350
Because of the threading,
the heavy threading that we have now,

00:37:11.450 --> 00:37:14.850
we'll take as much advantage of
multiple CPUs as you can reasonably get.

00:37:14.900 --> 00:37:16.930
Do you have enough memory?

00:37:16.940 --> 00:37:18.330
Please, swapping is bad.

00:37:18.360 --> 00:37:21.880
I'm sure you've heard this, but really,
swapping is really bad.

00:37:21.900 --> 00:37:23.360
Network.

00:37:23.360 --> 00:37:24.700
You want a fast network.

00:37:24.790 --> 00:37:27.900
In particular, I mean,
you can't really control

00:37:27.900 --> 00:37:31.710
the network to your clients,
because that's up to them.

00:37:31.720 --> 00:37:35.800
But you can control how big of
a pipe you've got between your

00:37:36.240 --> 00:37:38.320
application server and your WebObjects.

00:37:38.420 --> 00:37:40.410
You can control how
big your web server is,

00:37:40.410 --> 00:37:40.420
and you really want that to be big.

00:37:40.440 --> 00:37:44.030
We make a lot of assumptions
that you have an essentially

00:37:44.030 --> 00:37:46.420
unlimited pipe between the two,
because you should.

00:37:49.210 --> 00:37:51.490
Alright, so if you're interested,
you should see Optimizing

00:37:51.500 --> 00:37:52.930
WebObjects Applications.

00:37:52.930 --> 00:37:55.390
I think that's coming up on Friday.

00:37:55.480 --> 00:38:00.610
And they'll talk about, specifically,
how to look at your application itself.

00:38:01.090 --> 00:38:03.580
So let's talk about the systems then.

00:38:03.820 --> 00:38:08.260
So how do I tell how much
memory or CPU I'm using?

00:38:08.260 --> 00:38:13.200
On Mac OS X, there's the CPU monitor,
there's the process viewer, and VM stat.

00:38:13.200 --> 00:38:15.420
VM stat's a command line thing.

00:38:15.420 --> 00:38:17.940
It'll tell you basically
how you're paging,

00:38:17.970 --> 00:38:20.930
how many pages you've got free,
how many you've swapped out, locality,

00:38:20.930 --> 00:38:22.170
that sort of thing.

00:38:22.190 --> 00:38:25.720
CPU monitor tells you how
much CPU you're using.

00:38:25.740 --> 00:38:29.790
And process viewer lets
you view processes.

00:38:30.190 --> 00:38:32.360
So Solera says PS and TOP.

00:38:32.410 --> 00:38:36.150
PS is basically a process listing,
and TOP will give you sort of an

00:38:36.220 --> 00:38:39.420
overview of how your system is
behaving at the particular time.

00:38:39.520 --> 00:38:41.670
Windows has the task manager,
which sort of does a

00:38:41.810 --> 00:38:43.130
number of different things.

00:38:43.210 --> 00:38:47.690
It's both a process viewer
and a CPU monitor as well.

00:38:48.700 --> 00:38:50.010
Network monitoring tools.

00:38:50.010 --> 00:38:53.430
Mac OS X has the network utility,
lets you do things like net stat

00:38:53.430 --> 00:38:55.820
and ping and that sort of thing.

00:38:55.820 --> 00:38:58.640
Solaris has the net stat
directly at the command line,

00:38:58.640 --> 00:39:02.330
and Windows has a network monitor
driver for its networking stack.

00:39:02.330 --> 00:39:06.650
All of these basically try to let you
see what sockets are open on your system.

00:39:06.660 --> 00:39:07.670
Are we leaking?

00:39:07.670 --> 00:39:08.950
Are they doing good?

00:39:08.950 --> 00:39:10.520
Do we have too many open?

00:39:10.520 --> 00:39:13.020
And then you have packet sniffers.

00:39:13.020 --> 00:39:14.510
You have them in hardware,
you have them in software,

00:39:14.520 --> 00:39:18.730
and they basically let you actually
look at exactly what's going across

00:39:18.770 --> 00:39:20.990
the wire between you and clients,
between the app server

00:39:20.990 --> 00:39:21.490
and the web server.

00:39:21.490 --> 00:39:25.460
And sometimes you find out
really interesting things.

00:39:26.770 --> 00:39:29.080
So this is going to be
covered in optimizing,

00:39:29.090 --> 00:39:30.630
but I wanted to touch on it really quick.

00:39:30.800 --> 00:39:32.580
Application monitoring tools.

00:39:32.580 --> 00:39:34.900
We're now in pure Java.

00:39:34.920 --> 00:39:38.050
And one of the big,
big advantages of being in pure Java is

00:39:38.060 --> 00:39:40.220
that we can now use third-party tools.

00:39:40.350 --> 00:39:42.480
You can use JProbe, optimize it.

00:39:42.510 --> 00:39:45.330
Optimize it is now available on Mac OS X.

00:39:45.350 --> 00:39:47.880
The Java performance team uses it.

00:39:48.580 --> 00:39:50.970
And that's really great.

00:39:51.050 --> 00:39:55.000
Objective-C sort of had this
problem of looking into the code.

00:39:55.060 --> 00:39:59.290
We have any number of profilers,
things that will instrument,

00:39:59.380 --> 00:40:00.400
all sorts of stuff now.

00:40:00.400 --> 00:40:02.960
You have external load generators.

00:40:03.050 --> 00:40:07.390
We ship with Playback Manager and the
playback client and they basically just,

00:40:07.470 --> 00:40:10.370
you record a set of actions
and it will play it back.

00:40:10.450 --> 00:40:13.400
Silk Performer is a third-party product
that does something very similar.

00:40:13.560 --> 00:40:16.400
These are good for determining
your actual real-world performance.

00:40:16.400 --> 00:40:21.400
You can say how many requests,
hit your application and see.

00:40:21.410 --> 00:40:25.400
It's really good for seeing
specifically what's going on.

00:40:25.530 --> 00:40:28.600
How does the application
perform overall rather than at

00:40:28.600 --> 00:40:30.480
a very small detailed level.

00:40:30.840 --> 00:40:33.100
And finally,
the WebObjects frameworks themselves

00:40:33.100 --> 00:40:34.700
provide some sort of feedback.

00:40:34.700 --> 00:40:37.310
There's the WoEvent stuff,
which we'll be going over in

00:40:37.310 --> 00:40:40.200
detail in Optimizing WebObjects,
and the WoEstats page,

00:40:40.200 --> 00:40:41.700
which you can access from Monitor.

00:40:41.700 --> 00:40:48.940
And that'll give you statistics
on which components were called,

00:40:48.960 --> 00:40:50.280
the average transaction time
for that particular component,

00:40:50.280 --> 00:40:50.280
how long did it take, that sort of thing.

00:40:52.340 --> 00:40:57.240
So let's take a quick look
at a typical deployment.

00:40:57.240 --> 00:41:00.940
And the thing to remember is we're
going to try to show that all the

00:41:00.940 --> 00:41:02.540
deployment principles are the same.

00:41:02.540 --> 00:41:07.070
It doesn't matter whether you're a small
home-based application going over a DSL,

00:41:07.070 --> 00:41:11.750
a mid-sized small business app
going over part of a T1 or ISDN,

00:41:11.750 --> 00:41:15.320
or a large enterprise app
going over multiple T1s.

00:41:15.320 --> 00:41:18.540
All the deployment
principles are the same.

00:41:18.540 --> 00:41:20.960
WebObjects doesn't really
distinguish between them,

00:41:20.960 --> 00:41:23.850
and systems monitoring
doesn't really change.

00:41:24.420 --> 00:41:26.640
So we start with a
very simple deployment.

00:41:26.680 --> 00:41:28.890
You have a small number of applications.

00:41:28.990 --> 00:41:31.300
They go to your web server,
Matilda in this case,

00:41:31.300 --> 00:41:37.800
and they pass requests to Qualia,
which is talking to a database, Kaby.

00:41:39.620 --> 00:41:42.540
So one of the things we start by
doing is adding a little bit of

00:41:42.540 --> 00:41:47.920
security so that people don't have
free access to your web server.

00:41:48.000 --> 00:41:52.490
We add a firewall and we only allow
requests to Matilda 80 to pass through.

00:41:53.130 --> 00:41:55.540
But then the number of clients grows.

00:41:55.600 --> 00:41:59.310
And we do some monitoring,
and we discover that it's actually the

00:41:59.310 --> 00:42:01.280
web server that's at fault this time.

00:42:01.370 --> 00:42:03.680
It's unusual, but it does happen.

00:42:04.140 --> 00:42:08.450
So we add a second web server,
and we round robin DNS them,

00:42:08.450 --> 00:42:10.790
so that requests get passed
between the various web servers,

00:42:10.790 --> 00:42:13.910
and they all talk to the
same set of instances.

00:42:14.920 --> 00:42:19.580
We do a little bit more monitoring as the
number of clients grows and we discover,

00:42:19.580 --> 00:42:22.630
alright, so our web servers are
holding up pretty well.

00:42:22.740 --> 00:42:26.700
Now our bottleneck happens
to be the application.

00:42:26.760 --> 00:42:29.720
The application,
we don't have enough instances.

00:42:29.720 --> 00:42:34.950
So we add a second instance, or sorry,
two more instances on another host.

00:42:36.120 --> 00:42:37.900
And a lot of people will do this.

00:42:37.950 --> 00:42:40.360
At this point,
it may be worth it to set up another

00:42:40.360 --> 00:42:45.040
firewall so that requests between the
web server and the application instances

00:42:45.410 --> 00:42:48.090
also have to pass through a firewall.

00:42:49.550 --> 00:42:52.340
And that's also for security.

00:42:52.430 --> 00:42:55.530
So finally,
maybe the database all the way at the

00:42:55.530 --> 00:42:57.180
end is what your final bottleneck is.

00:42:57.180 --> 00:43:01.270
And you may have a mirror database
so that you can get data out faster.

00:43:02.820 --> 00:43:06.010
So it's important to note that what
these firewalls that we've set up

00:43:06.080 --> 00:43:10.270
as we've grown in this particular
deployment is it separates us.

00:43:10.370 --> 00:43:13.370
There's the intranet zone
all the way on one side,

00:43:13.370 --> 00:43:15.940
or the internet zone,
and that's totally insecure.

00:43:15.980 --> 00:43:18.180
People can do whatever they want.

00:43:18.300 --> 00:43:20.930
On the other end,
we have our completely private network,

00:43:20.930 --> 00:43:23.700
and this is where all of your value is.

00:43:23.840 --> 00:43:27.750
All of your data, all of your logic,
everything important to

00:43:27.750 --> 00:43:28.680
you is on the far right.

00:43:28.760 --> 00:43:31.360
And we have sort of like a
DMZ border zone in between.

00:43:31.360 --> 00:43:34.510
And again,
this is why that split install,

00:43:34.510 --> 00:43:38.830
that split of public and
private resources is important.

00:43:38.830 --> 00:43:43.700
So that the only things in that
border zone aren't that important.

00:43:43.700 --> 00:43:46.080
They're just public stuff,
the things that people

00:43:46.080 --> 00:43:47.130
should be able to get anyway.

00:43:49.230 --> 00:43:53.320
So that's pretty much an overview
of how WebObjects deployment works.

00:43:53.410 --> 00:43:58.180
You can have multiple instances on
potentially multiple application servers,

00:43:58.180 --> 00:43:59.760
and you have a WebObjects adapter.

00:43:59.760 --> 00:44:03.870
And the WebObjects adapter passes
requests to your instances,

00:44:03.960 --> 00:44:05.920
and it can do that in a
number of different ways.

00:44:05.920 --> 00:44:08.420
The instances will process and return it.

00:44:08.420 --> 00:44:11.720
We have a number of mechanisms
available for you to tweak,

00:44:11.750 --> 00:44:14.880
and we provide tools so that
you can deploy and hopefully

00:44:14.940 --> 00:44:16.660
have a nice deployment.

00:44:19.100 --> 00:44:20.200
And that's it.

00:44:20.340 --> 00:44:22.540
Okay.

00:44:30.940 --> 00:44:32.580
Thank you.

00:44:33.060 --> 00:44:34.990
So the WebObjects lab is still open.

00:44:35.070 --> 00:44:38.390
It's open from actually when
this session started to 6 p.m.

00:44:38.390 --> 00:44:40.500
today and tomorrow for
some limited hours.

00:44:40.590 --> 00:44:42.480
So be warned about the limited hours.

00:44:42.560 --> 00:44:45.680
Don't wait until 4 o'clock tomorrow
because it's not going to be open.

00:44:45.680 --> 00:44:49.740
We have a roadmap and it may seem a
little strange that we want you to go

00:44:49.740 --> 00:44:54.350
to the Java performance even though
that was yesterday but you should

00:44:54.350 --> 00:44:56.900
all be getting DVDs this year sooner.

00:44:57.080 --> 00:44:59.320
And when you do,
that's certainly something to

00:44:59.330 --> 00:45:02.350
look up to because try to take
advantage of the language,

00:45:02.370 --> 00:45:06.900
try to take advantage of all the work
that's being done on the Java VMs.

00:45:06.900 --> 00:45:10.370
Optimizing WebObjects applications
specifically is tomorrow at 2:00

00:45:10.580 --> 00:45:13.600
and then of course if you have
any comments or questions about

00:45:13.600 --> 00:45:15.960
deployment or anything else,
please come to the

00:45:15.960 --> 00:45:17.240
feedback forum on Friday.

00:45:19.480 --> 00:45:22.170
This is,
I'm sure you've seen this slide before.

00:45:22.220 --> 00:45:23.110
This is who to contact.

00:45:23.290 --> 00:45:27.970
Tony, Bob, iServices, URLs.