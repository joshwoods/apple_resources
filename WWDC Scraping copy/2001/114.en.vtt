WEBVTT

00:00:05.240 --> 00:00:07.880
I want to welcome you to session 114,
Application Packaging

00:00:07.880 --> 00:00:08.680
and Document Binding.

00:00:08.680 --> 00:00:11.420
And this morning,
at the end of my session 111,

00:00:11.420 --> 00:00:14.330
I was talking about how, you know,
some of the things that you

00:00:14.330 --> 00:00:16.800
need to do to create a great
user experience on Mac OS X.

00:00:16.800 --> 00:00:19.860
And one of the things I mentioned was,
you know, bundling your application.

00:00:19.860 --> 00:00:23.760
So we want to talk here in this session
about how to package your application,

00:00:23.760 --> 00:00:26.080
how to bundle it, what the difference is
between those two terms.

00:00:26.080 --> 00:00:29.520
We want to talk about document binding,
what are the rules for

00:00:29.600 --> 00:00:33.180
Mac OS X and how documents are
associated with applications.

00:00:33.820 --> 00:00:36.260
And this is something you need
to pay close attention to.

00:00:36.260 --> 00:00:39.290
It's something that's been
discussed a lot online with

00:00:39.290 --> 00:00:40.980
some of the discussion lists.

00:00:41.000 --> 00:00:43.620
And we would like to clarify a
little bit what needs to be done

00:00:43.620 --> 00:00:45.440
from the developer's point of view.

00:00:45.440 --> 00:00:49.460
So to talk to you through this material,
I'd like to explain this material to you.

00:00:49.460 --> 00:00:51.250
I'd like to introduce
Christopher Linn from the

00:00:51.370 --> 00:00:53.080
User Experience Engineering Team at
Apple.

00:01:00.750 --> 00:01:03.790
Good afternoon, almost evening.

00:01:03.850 --> 00:01:06.260
It'll be evening by the time we're done.

00:01:06.500 --> 00:01:21.200
[Transcript missing]

00:01:22.060 --> 00:01:25.560
And let me see if I can get this to work.

00:01:25.600 --> 00:01:26.690
Okay.

00:01:26.860 --> 00:01:29.490
So first half of my talk
is all about packaging,

00:01:29.520 --> 00:01:33.020
how you deliver your
applications on Mac OS X.

00:01:33.160 --> 00:01:37.960
And I'd like to talk a little bit about
what the traditional delivery mechanism

00:01:37.970 --> 00:01:40.100
is or structure of an application.

00:01:40.150 --> 00:01:43.460
And then look at this new choice,
sometimes usually called a package,

00:01:43.460 --> 00:01:45.260
sometimes referred to as a bundle.

00:01:45.260 --> 00:01:47.620
I'll try to explain the difference
between those two terms.

00:01:47.640 --> 00:01:51.840
And then really go into some amount of
detail of how an application package

00:01:51.840 --> 00:01:55.670
is structured and look at some of
the important internals such as the

00:01:55.690 --> 00:02:01.850
property list and how you express
things like what types of documents your

00:02:01.850 --> 00:02:06.050
application can open and what types of
URL schemes your application can handle.

00:02:06.060 --> 00:02:09.870
Then in the second half,
I'd like to go into document

00:02:09.870 --> 00:02:15.300
binding in which we talk about what
exactly does document binding mean,

00:02:15.300 --> 00:02:17.600
how does it work on Mac OS X,
and how does it work on Mac OS X.

00:02:17.640 --> 00:02:22.720
And therefore, what guidelines should you
follow when saving new documents

00:02:22.720 --> 00:02:24.570
from your applications.

00:02:24.600 --> 00:02:27.190
Finally,
I want to give a quick overview of

00:02:27.190 --> 00:02:32.170
what the capability of this new API is
called Launch Services that essentially

00:02:32.390 --> 00:02:34.680
provides the binding service on X.

00:02:34.680 --> 00:02:38.100
And look at how you can make
sure that your application,

00:02:38.100 --> 00:02:42.380
once it's installed, is actually also in
the bindings database.

00:02:42.420 --> 00:02:43.080
Okay.

00:02:43.080 --> 00:02:45.470
So let's start out with something simple.

00:02:45.510 --> 00:02:46.370
What is an application?

00:02:46.400 --> 00:02:47.520
Well, it's a database.

00:02:47.520 --> 00:02:52.320
Of course, it's a big hunk of code,
a big program you've been working on,

00:02:52.320 --> 00:02:57.190
slaving over for several years probably,
fine tuning it and adding features.

00:02:57.200 --> 00:03:00.220
But in order for it to work,
there's a whole bunch of other stuff

00:03:00.220 --> 00:03:01.750
that needs to go along with it.

00:03:02.240 --> 00:03:09.200
Localized strings, controls,
and view layouts, icons and images,

00:03:09.260 --> 00:03:13.280
and help files, plug-ins,
and I could go on and on.

00:03:13.280 --> 00:03:17.400
And all these things are really
necessary for your program to run.

00:03:17.400 --> 00:03:20.020
So you want to make sure
it all stays together.

00:03:20.080 --> 00:03:23.840
I call all this extra stuff
the goo with your application.

00:03:23.940 --> 00:03:28.590
The goo needs to be there or
else your application won't work.

00:03:29.710 --> 00:03:33.390
The way that applications have
been traditionally packaged

00:03:34.040 --> 00:03:35.860
has been with us since 1984.

00:03:35.980 --> 00:03:40.360
The original Mac OS introduced
resource files,

00:03:40.360 --> 00:03:43.790
and in fact, everything was in the
resource fork back then,

00:03:43.920 --> 00:03:46.820
the code and all of the extra goo.

00:03:46.940 --> 00:03:52.050
And it presented this great single-icon
view of an application to your users.

00:03:52.060 --> 00:03:56.100
It was very clear to run an application,
you double-click that icon.

00:03:56.190 --> 00:03:59.620
It had some other advantages in
that non-programmers could get in

00:03:59.620 --> 00:04:04.200
with localization tools and create a
localized version of your application.

00:04:04.290 --> 00:04:10.300
And this format is still fully supported
for Carbon applications on Mac OS X.

00:04:10.520 --> 00:04:12.800
But there are some limitations.

00:04:12.810 --> 00:04:16.610
Not everything can appropriately
be placed in the resource

00:04:16.700 --> 00:04:18.700
fork or a resource file.

00:04:18.720 --> 00:04:25.090
And so as applications have gotten
more complex over the years,

00:04:25.420 --> 00:04:27.820
You see that sometimes you
look in a folder and you'll

00:04:27.820 --> 00:04:29.500
see a lot of other icons there.

00:04:29.500 --> 00:04:32.640
And some of this stuff might be
necessary for your application

00:04:32.710 --> 00:04:33.790
to function properly.

00:04:33.900 --> 00:04:35.900
Some of the plug-ins, for instance.

00:04:36.040 --> 00:04:39.170
And in addition,
it's just more complex for the user

00:04:39.370 --> 00:04:43.460
because the user has to find the
right icon in order to double click

00:04:43.530 --> 00:04:46.290
and open your application correctly.

00:04:47.060 --> 00:04:52.540
Another problem with this
model is that when you localize

00:04:52.710 --> 00:04:57.640
a single file application,
it only has a single localization in it.

00:04:57.710 --> 00:05:01.500
So you may have to make an
English version of your app and then a

00:05:01.500 --> 00:05:04.840
French and a Japanese version and so on,
a separate version with your

00:05:04.900 --> 00:05:06.830
binary duplicated for each one.

00:05:06.840 --> 00:05:12.580
And so it's just some extra work
and more complexity for installs.

00:05:12.980 --> 00:05:16.620
And in addition,
once the user installs your app,

00:05:16.620 --> 00:05:19.380
it can only run in that one localization.

00:05:20.600 --> 00:05:24.960
So what we want to get back to is
the simplicity that looks like this.

00:05:25.070 --> 00:05:29.200
One icon, it's an application,
the user knows what to do,

00:05:29.200 --> 00:05:30.930
you double click it.

00:05:31.500 --> 00:05:35.190
And so what we're introducing
is application packages.

00:05:35.230 --> 00:05:40.990
A package is simply a directory
that to the user looks like a file.

00:05:41.060 --> 00:05:44.260
What goes inside there
is completely up to us.

00:05:44.460 --> 00:05:46.500
Apple defines a certain structure.

00:05:46.730 --> 00:05:49.580
You can extend that
structure by or work with it.

00:05:49.770 --> 00:05:53.790
It's fairly flexible as
to what goes inside there.

00:05:53.900 --> 00:05:58.140
And it can grow over time
without impacting the user.

00:05:58.220 --> 00:06:01.190
The user will always see
just this nice simple view.

00:06:01.390 --> 00:06:03.840
All the goo is hidden inside.

00:06:05.840 --> 00:06:09.840
There's some other great
benefits of application packages.

00:06:09.840 --> 00:06:11.440
You can have multiple binaries inside.

00:06:11.440 --> 00:06:14.030
So, for instance,
you might want to set up your package

00:06:14.050 --> 00:06:19.880
so that it has one binary for Mac OS X,
but it has a classic binary in it

00:06:19.980 --> 00:06:23.790
that can actually run when the package
gets double-clicked on Mac OS 9,

00:06:23.800 --> 00:06:24.690
and we'll talk about that.

00:06:25.500 --> 00:06:28.600
But I think the most exciting thing
about application packages is how they

00:06:28.600 --> 00:06:31.500
can contain multiple localizations,
as many as you want.

00:06:31.500 --> 00:06:35.500
And this means that you can have a
single install of your application,

00:06:35.500 --> 00:06:38.740
and it works great on a multi-user
system where one user logs

00:06:38.740 --> 00:06:41.780
in and prefers one language,
double-clicks your application,

00:06:41.790 --> 00:06:44.040
that's the localization they get,
the one they prefer.

00:06:44.040 --> 00:06:47.120
A different user comes in,
speaks a different primary language,

00:06:47.120 --> 00:06:50.220
they double-click the same package,
and they get the localization

00:06:50.220 --> 00:06:52.790
that they prefer,
the language that they prefer.

00:06:53.960 --> 00:06:57.420
Finally, although I'm not going to
talk about it much today,

00:06:57.420 --> 00:06:59.160
packages are not just for applications.

00:06:59.240 --> 00:07:02.660
It's actually possible to define

00:07:03.310 --> 00:07:13.980
Document Packages,
and that's something that

00:07:13.980 --> 00:07:13.980
Interface Builder uses.

00:07:13.980 --> 00:07:13.980
But mostly I'm going to be looking
at application packages today.

00:07:15.580 --> 00:07:17.170
Interchangeably,
you might hear me using the

00:07:17.170 --> 00:07:20.210
term bundle and package.

00:07:20.210 --> 00:07:23.490
And I'd like to try and
clarify once and for all,

00:07:23.490 --> 00:07:26.310
maybe, what the difference is.

00:07:30.320 --> 00:07:32.750
And the reason I use the terms
interchangeably during this talk

00:07:32.820 --> 00:07:35.740
is that you can see right in the
middle is an application package.

00:07:35.790 --> 00:07:39.140
It's both a bundle and a package.

00:07:39.280 --> 00:07:42.360
On the left,
we have something that's just a bundle,

00:07:42.360 --> 00:07:44.840
and the example I have is a framework.

00:07:44.930 --> 00:07:50.950
A bundle is a directory that contains
code and some associated resources,

00:07:50.950 --> 00:07:51.700
or GU.

00:07:52.200 --> 00:07:54.700
But it's just a directory, okay?

00:07:54.700 --> 00:07:56.740
If it's just a plain
bundle like a framework,

00:07:56.740 --> 00:07:58.360
you can actually click
on it and look inside it.

00:07:58.360 --> 00:07:59.560
You see the contents.

00:07:59.690 --> 00:08:03.120
And the reason we didn't seal it up
as a package is that there's actually

00:08:03.120 --> 00:08:05.980
some headers in there that we want
you to be able to get at easily.

00:08:06.340 --> 00:08:09.350
On the other side is something
I call a Nib package.

00:08:09.350 --> 00:08:11.700
It's actually usually
referred to as a Nib file,

00:08:11.700 --> 00:08:15.730
so you may not even realize it,
but a Nib that is produced by Interface

00:08:15.730 --> 00:08:18.450
Builder is actually a package.

00:08:18.540 --> 00:08:21.950
And a package means one thing.

00:08:22.030 --> 00:08:25.950
It's a directory that is
presented to the user as a file.

00:08:25.960 --> 00:08:27.680
So it looks like a file to the user.

00:08:27.700 --> 00:08:30.410
In the middle, again,
you have applications.

00:08:30.410 --> 00:08:32.890
And as we go into the
application structure,

00:08:32.950 --> 00:08:37.090
I'll try to point out what things about
it are specific to bundles and what

00:08:37.100 --> 00:08:39.920
things about it are specific to packages.

00:08:40.610 --> 00:08:46.500
So this is a quick overview of what
the structure of a package is inside.

00:08:46.500 --> 00:08:48.750
At the top level,
this is a sample application on

00:08:48.760 --> 00:08:51.740
the developer CD called Sketch.

00:08:51.740 --> 00:08:54.120
And basically inside,
at the top level of the package,

00:08:54.120 --> 00:08:57.740
there's actually just one thing,
another folder called Contents.

00:08:57.740 --> 00:09:01.300
So Apple chose to take all of its
structure and put it in one place so

00:09:01.300 --> 00:09:05.930
that it doesn't conflict with anything
you might want to do up at the top level.

00:09:06.130 --> 00:09:08.790
And really everything interesting
about the structure is inside

00:09:08.800 --> 00:09:09.960
of the Contents folder.

00:09:10.030 --> 00:09:12.060
The first thing is the property list.

00:09:12.110 --> 00:09:14.680
This is something that all bundles have,
a property list.

00:09:14.700 --> 00:09:16.960
It's a file called Info.plist.

00:09:17.020 --> 00:09:19.340
And it tells the system,
it's in a format that

00:09:19.440 --> 00:09:25.210
the system understands,
and it tells us all about your bundle.

00:09:25.620 --> 00:09:28.540
And we're going to get into
that in a fair amount of detail.

00:09:28.590 --> 00:09:31.500
So for right now, let me just go on.

00:09:32.070 --> 00:09:35.260
Next is another directory
called the Resources Directory.

00:09:35.330 --> 00:09:38.340
And this is where all of the goo goes,
all of your resources,

00:09:38.340 --> 00:09:42.770
whether they're resource files
or strings files or images,

00:09:42.860 --> 00:09:45.570
icons,
anything goes in the Resources Directory.

00:09:45.770 --> 00:09:48.190
And there's two parts to it.

00:09:48.360 --> 00:09:51.300
Up at the top level of
the resources directory,

00:09:51.300 --> 00:09:55.470
if you will, go all of your resource
files that are global,

00:09:55.590 --> 00:09:58.090
that don't need to be localized.

00:09:59.760 --> 00:10:03.940
And then for each localization that
you want to add to your package,

00:10:04.100 --> 00:10:09.870
you have a subfolder which is named
after the language for that localization.

00:10:09.880 --> 00:10:15.460
And the language names are defined
by the Core Foundation bundle APIs.

00:10:15.650 --> 00:10:18.420
And so you can have as
many of these as you want:

00:10:18.420 --> 00:10:21.150
English, French, Japanese, and so on.

00:10:21.340 --> 00:10:24.480
And inside here is where
you put resource files,

00:10:24.480 --> 00:10:27.520
localized strings,
anything that needs to be

00:10:27.750 --> 00:10:29.500
localized goes down in here.

00:10:29.540 --> 00:10:31.800
And there's one file in
particular I want to call out,

00:10:31.800 --> 00:10:35.800
and that is a file called
Info.plist.strings.

00:10:35.840 --> 00:10:41.210
It turns out that some things in the
property list up at the top level there,

00:10:41.330 --> 00:10:44.290
or in the contents folder,
are actually user visible.

00:10:44.350 --> 00:10:49.090
Things like the user visible name
of your application and the kind

00:10:49.090 --> 00:10:52.300
strings associated with your document.

00:10:52.330 --> 00:10:53.700
Those things need to be localized.

00:10:53.700 --> 00:10:57.290
So there's a part of your
property list that lives down

00:10:57.400 --> 00:10:59.400
in each localization folder,
and that's in a file

00:10:59.400 --> 00:11:01.460
called Info.plist.strings.

00:11:01.460 --> 00:11:03.690
And a strings file,
I'll show you a little bit later,

00:11:03.690 --> 00:11:07.990
but it's basically just a set of key
value pairs that we can do a look up on

00:11:08.020 --> 00:11:11.340
to find an actual value for a string.

00:11:12.480 --> 00:11:14.540
Okay, back up to the contents folder.

00:11:14.620 --> 00:11:17.800
The next thing is this PKJ info file.

00:11:17.870 --> 00:11:22.200
And if you look at it in the finder,
you'll see it's always 4K.

00:11:22.200 --> 00:11:24.800
Well, in fact,
that's the minimum block size.

00:11:24.800 --> 00:11:27.860
If you look at it in detail,
it's only 8 bytes large.

00:11:27.860 --> 00:11:32.520
This is--the contents of
it actually are not public,

00:11:32.540 --> 00:11:35.030
but if you look at it,
it's obvious that it's the type

00:11:35.030 --> 00:11:36.420
and creator of your package.

00:11:36.420 --> 00:11:41.520
Since directories don't actually have
types and creators associated with them

00:11:41.550 --> 00:11:45.290
in the catalog info of the file system,
this is where we cache it.

00:11:45.360 --> 00:11:47.520
And it's basically an optimization.

00:11:47.520 --> 00:11:50.760
You don't need to worry about this
file except to know why it's there.

00:11:50.760 --> 00:11:55.580
Its presence helps us know that this is,
in fact, a package and the contents

00:11:55.840 --> 00:11:57.350
may change in the future.

00:11:57.360 --> 00:12:00.650
as we deem necessary.

00:12:02.100 --> 00:12:05.470
And finally,
we get to where your executable lives.

00:12:05.710 --> 00:12:09.900
On Mac OS X,
when an application package is launched,

00:12:09.900 --> 00:12:14.020
the system always looks in a
directory called Mac OS with no space,

00:12:14.020 --> 00:12:16.640
even though marketing would
rather it have a space.

00:12:16.640 --> 00:12:20.590
It's not actually user visible,
so we just simplified it.

00:12:20.650 --> 00:12:24.140
And in here is where you put your binary.

00:12:24.270 --> 00:12:27.000
And in fact, the name of the binary
can be anything you want.

00:12:27.000 --> 00:12:28.390
It never is user visible.

00:12:28.600 --> 00:12:32.270
However, in order for us to find it,
it needs to be specified

00:12:32.270 --> 00:12:34.730
correctly in your property list.

00:12:35.300 --> 00:12:39.780
So that is a simplified view of
an application package structure.

00:12:39.780 --> 00:12:43.800
And I'd like to touch on one other
topic related to the structure,

00:12:43.820 --> 00:12:45.580
and that is about packages on Mac OS 9.

00:12:45.600 --> 00:12:48.530
So I'm going to strip away all
that other stuff about property

00:12:48.530 --> 00:12:51.810
lists and resource directories,
because Mac OS 9 doesn't have

00:12:51.810 --> 00:12:53.360
any of that infrastructure.

00:12:53.440 --> 00:12:57.620
But we did want to give a minimal
way for Mac OS 9 to recognize

00:12:57.620 --> 00:13:00.360
and launch packaged applications.

00:13:00.550 --> 00:13:04.390
Obviously, it's not going to be able to
launch the Mac OS X version,

00:13:04.390 --> 00:13:07.630
because you can't get it the resources
down in the resources directory.

00:13:07.720 --> 00:13:13.120
But what you can do is create another
directory to hold your classic binary.

00:13:13.160 --> 00:13:19.540
And this is actually a single file
traditional Mac OS 9 application.

00:13:19.610 --> 00:13:22.850
It's going to have all of your
resources in there localized

00:13:22.850 --> 00:13:24.950
to one particular localization.

00:13:25.020 --> 00:13:30.060
And the way you get Mac OS 9 to
launch it is you create an alias.

00:13:30.110 --> 00:13:31.900
And actually,
the alias can be called anything,

00:13:31.900 --> 00:13:34.410
because we just look for an alias,
any kind of alias,

00:13:34.470 --> 00:13:36.860
inside the application package.

00:13:36.990 --> 00:13:40.650
And you make that alias
resolve to your binary.

00:13:40.890 --> 00:13:45.250
And the Mac OS 9 finder will be
able to launch a package like this.

00:13:45.280 --> 00:13:48.390
So this is one way,
if you really want to get on the

00:13:48.510 --> 00:13:51.500
package train and take advantage
of all the advantages for X,

00:13:51.500 --> 00:13:57.620
you can still have a single package
which can be run on Mac OS 9.

00:13:58.840 --> 00:14:03.490
And now I'd like to switch to the
demo machine here and just show

00:14:03.490 --> 00:14:06.600
you a little bit about packages.

00:14:08.670 --> 00:14:14.100
So Sketch here is kind of the
sample app I was going through.

00:14:14.100 --> 00:14:20.210
And it's a Cocoa application
that does some simple drawing.

00:14:22.630 --> 00:14:25.760
Close it and quit.

00:14:25.760 --> 00:14:28.980
And we kind of struggled with whether or
not we wanted to do this in the finder,

00:14:29.040 --> 00:14:33.240
but it turns out that it's really
handy to be able to have a backdoor

00:14:33.550 --> 00:14:37.640
to get into a package when you
really want to inspect the contents.

00:14:37.640 --> 00:14:40.560
And so what we did was we put
it down in the contextual menu.

00:14:40.600 --> 00:14:47.550
So if you Control-click on a package,
there's actually a command that says,

00:14:47.550 --> 00:14:47.550
"Show package contents."

00:14:47.940 --> 00:14:50.580
This is so you know it's
there in case you need it.

00:14:50.650 --> 00:14:52.400
Here we have the inside of the package.

00:14:52.400 --> 00:14:54.560
It's a window that's actually
rooted at the package.

00:14:54.560 --> 00:14:56.800
It doesn't go up to the
rest of the hierarchy.

00:14:56.800 --> 00:14:58.690
But it is a regular Finder window.

00:14:58.690 --> 00:15:00.800
You can change, say, to List View.

00:15:00.800 --> 00:15:01.800
And let's take a look inside.

00:15:01.800 --> 00:15:06.660
Here is the property list,
the Mac OS directory

00:15:06.670 --> 00:15:10.800
with the binary in it,
the package info file.

00:15:10.800 --> 00:15:12.010
And let's see.

00:15:12.080 --> 00:15:16.190
In Resources,
we have a whole bunch of stuff actually.

00:15:16.190 --> 00:15:18.800
We've got TIFF files and icons.

00:15:18.800 --> 00:15:22.280
And then here we have some localizations,
English, Japanese,

00:15:22.290 --> 00:15:23.800
and even Klingon there.

00:15:23.800 --> 00:15:29.200
It's one of the advantages of Unicode.

00:15:31.620 --> 00:15:36.890
Let's see, and then in here we have nib
files that get localized,

00:15:37.000 --> 00:15:40.090
and here of course is the
Info.plist strings file which

00:15:40.090 --> 00:15:45.990
contains some of the localized
information from the property list.

00:15:46.260 --> 00:15:50.860
So that is inside a
package in the finder.

00:15:50.880 --> 00:15:56.590
And now let's switch back
to the slides and move on.

00:15:59.310 --> 00:16:02.560
So with all this talk about packages,
you might be wondering how the system

00:16:02.560 --> 00:16:06.570
actually knows the difference between
a regular directory and a package.

00:16:06.680 --> 00:16:11.240
And there's actually three things that
can turn a directory into a package,

00:16:11.240 --> 00:16:16.600
and that was kind of necessary
for historical reasons,

00:16:16.600 --> 00:16:18.850
I guess,
for some existing packages we had.

00:16:19.030 --> 00:16:24.570
The first one is that we actually
defined an HFS catalog info bit

00:16:25.020 --> 00:16:28.800
that was unused for directories,
and we call it the package bit.

00:16:28.800 --> 00:16:32.300
If you need to know, it's bit 13.

00:16:32.380 --> 00:16:35.410
It corresponds actually to
the bundle bit for files,

00:16:35.440 --> 00:16:37.800
but for directories it was unused.

00:16:37.880 --> 00:16:41.180
I'm told that in the original Mac OS,

00:16:41.810 --> 00:16:44.690
Planning back in 1984,
they wanted to do something

00:16:44.690 --> 00:16:48.700
like this and it only took us,
what, 16 years?

00:16:48.700 --> 00:16:49.830
17 years?

00:16:49.840 --> 00:16:53.260
So there's a bit,
and when you set that bit,

00:16:53.380 --> 00:16:56.860
magically the directory
gets presented as a package.

00:16:56.860 --> 00:17:01.190
Now that's actually not quite enough
information because since directories

00:17:01.200 --> 00:17:05.990
don't have types and creators,
we don't really know anything about that.

00:17:06.120 --> 00:17:11.630
So it's always good to have
a package info file there.

00:17:11.830 --> 00:17:13.280
Whether or not you use the package of it.

00:17:13.350 --> 00:17:17.780
But it turns out if your directory
has some sort of valid extension and a

00:17:18.070 --> 00:17:22.050
package info file in the contents folder,
that's enough to tell us

00:17:22.050 --> 00:17:23.890
that it's actually a package.

00:17:23.900 --> 00:17:28.870
And one other way is,
and this is documents as packages,

00:17:28.870 --> 00:17:35.430
if the directory has an extension on it
and that extension is claimed by some

00:17:35.430 --> 00:17:40.670
application as a packaged document,
then we'll know from our bindings

00:17:40.670 --> 00:17:44.870
database that this directory needs
to be presented as a package.

00:17:44.870 --> 00:17:49.700
But typically, application packages,
you want to have the package info file

00:17:49.700 --> 00:17:52.930
so that we know that it's an application.

00:17:54.800 --> 00:17:58.900
So the rest of the time on packages,
I want to talk about the property

00:17:58.900 --> 00:18:01.340
list because this is really how
you communicate to your application

00:18:01.340 --> 00:18:06.280
what your application-- or to the
system what your application can do.

00:18:06.410 --> 00:18:09.110
The property list tells us
things like what the name of your

00:18:09.110 --> 00:18:13.360
executable is so we can launch you,
what version it is,

00:18:13.360 --> 00:18:16.000
what types of documents you can open.

00:18:16.000 --> 00:18:19.320
And something we've added is what
kind of URL schemes you can handle.

00:18:19.360 --> 00:18:23.150
So if you are an FTP client,
you can handle FTP URLs or a

00:18:23.150 --> 00:18:27.200
browser or even if you have
your own private schemes.

00:18:27.200 --> 00:18:32.280
You can specify them here and that
allows the system to route a URL with

00:18:32.280 --> 00:18:35.000
your scheme to your application.

00:18:35.120 --> 00:18:37.830
Again, the property list is something
that all bundles have.

00:18:37.840 --> 00:18:41.900
It's-- in fact,
the Core Foundation Bundle API is

00:18:41.900 --> 00:18:44.880
what you use to manipulate bundles.

00:18:44.880 --> 00:18:49.110
And all of the keys that
I'm going to go over soon,

00:18:49.120 --> 00:18:49.130
I'm going to go over in a minute.

00:18:49.530 --> 00:18:53.960
start with CFBundle because this
is all defined by core foundation.

00:18:54.290 --> 00:18:56.320
In general,
the property list has a lot of parallels

00:18:56.350 --> 00:18:58.040
with the single file application model.

00:18:58.180 --> 00:19:04.460
Reverse resource, BNDLs, FRF,
open resources and kind resources.

00:19:04.620 --> 00:19:07.380
All this information is
now in the property list,

00:19:07.400 --> 00:19:10.110
as well as additional things
that we're adding over time.

00:19:10.250 --> 00:19:12.850
The property list itself is
actually just a text file.

00:19:12.970 --> 00:19:16.000
It's an XML file,
which means that Core Foundation can

00:19:16.000 --> 00:19:19.220
easily read it in as a property list.

00:19:19.470 --> 00:19:22.860
It's implemented as a dictionary,
which means it's easy to extend.

00:19:22.860 --> 00:19:27.100
We just add new keys,
and when you ask for a value of a key,

00:19:27.120 --> 00:19:31.190
Core Foundation dereferences or looks
up the key and gives you back the value.

00:19:31.200 --> 00:19:35.240
We've defined a number of standard keys,
and these are the things that the

00:19:35.320 --> 00:19:39.000
system looks for when scanning
over your application package.

00:19:39.000 --> 00:19:42.130
As I said before,
some of the values should be localized.

00:19:42.190 --> 00:19:45.100
I'm going to keep saying this because
I just want to keep reminding you.

00:19:45.100 --> 00:19:49.110
If you don't localize, say,
your kind strings in the right place,

00:19:49.220 --> 00:19:55.490
then they won't be ready in the finder
for users to see your kind strings.

00:19:56.630 --> 00:19:59.880
Now, what if you're actually not
quite ready for packages,

00:19:59.960 --> 00:20:02.430
but you really want to
have a property list?

00:20:02.500 --> 00:20:06.940
And this is important because, in fact,
if you really want to get nice, big,

00:20:06.940 --> 00:20:09.190
Aqua icons associated
with your documents,

00:20:09.380 --> 00:20:11.100
you need a property list.

00:20:11.200 --> 00:20:14.560
Or if you really want to make sure that
you're able to claim certain extensions,

00:20:14.560 --> 00:20:17.100
file extensions,
then you need a property list.

00:20:17.100 --> 00:20:20.240
So we've made it possible for
single file applications to

00:20:20.240 --> 00:20:21.890
also have a property list.

00:20:21.900 --> 00:20:25.480
In fact, if you do this,
then it's one way we know that you

00:20:25.480 --> 00:20:29.400
are actually a native application
and not a classic application.

00:20:29.500 --> 00:20:33.190
What you do is you create
a PL/ST resource with ID 0,

00:20:33.240 --> 00:20:37.890
add it to your application,
and simply paste the contents of your

00:20:37.890 --> 00:20:41.240
XML property list into the resource.

00:20:41.350 --> 00:20:44.060
The only thing that has to
change is that in the places

00:20:44.060 --> 00:20:47.620
where you're specifying an icon,
instead of specifying a

00:20:47.620 --> 00:20:50.200
file name for the icon,
you actually are

00:20:50.200 --> 00:20:51.800
specifying a resource ID.

00:20:51.800 --> 00:20:53.800
So it's just a number.

00:20:53.810 --> 00:20:59.070
Then we look for an ICNS resource
with that ID in your application.

00:20:59.150 --> 00:20:59.890
Okay.

00:20:59.990 --> 00:21:03.690
Now, let's keep moving here.

00:21:04.130 --> 00:21:06.490
These are not all of the keys that
you might see in a property list,

00:21:06.510 --> 00:21:10.060
but these are the essential ones,
and I wanted to zip through each one.

00:21:10.060 --> 00:21:11.850
CFBundle Names.

00:21:11.870 --> 00:21:12.960
It's a name for your bundle.

00:21:12.960 --> 00:21:15.350
It ends up being a user visible name,
so this is something that

00:21:15.350 --> 00:21:20.910
you want to make sure you
localize in your strings file.

00:21:21.040 --> 00:21:24.330
Where it's visible right now is, say,
in the menu bar.

00:21:24.340 --> 00:21:29.400
The application menu is actually that
text comes out of your property list.

00:21:29.890 --> 00:21:33.140
Something that's not user visible
is the CFBundle identifier.

00:21:33.140 --> 00:21:37.310
It's designed to be a unique identifier,
so we use the form of a, like a,

00:21:37.410 --> 00:21:41.500
in the style of a Java package name,
kind of a reversed domain name.

00:21:41.610 --> 00:21:44.980
And this gives us a name,
nice name spacing and allows

00:21:44.980 --> 00:21:48.280
the system to count on using
this as a unique identifier

00:21:48.570 --> 00:21:50.980
for your application or bundle.

00:21:51.290 --> 00:21:55.180
In addition to the package info file,
we also want the type and creator

00:21:55.540 --> 00:22:00.600
to be in the property list,
so the package type for applications,

00:22:00.600 --> 00:22:02.460
it's always going to be APPL.

00:22:02.610 --> 00:22:06.280
And then of course the signature
is the same as the creator,

00:22:06.340 --> 00:22:12.280
and that's your four-character OS type
that still should be registered with

00:22:12.280 --> 00:22:18.200
Apple so that we're assured of some
level of uniqueness for creator types.

00:22:18.340 --> 00:22:20.560
or creator signatures, I should say.

00:22:20.690 --> 00:22:24.310
The version,
this is important for helping the

00:22:24.310 --> 00:22:27.040
system differentiate between different
versions of your application.

00:22:27.140 --> 00:22:32.310
That sometimes comes up in
Launch Binding or Document Binding.

00:22:32.590 --> 00:22:36.100
and the icon file,
this tells us what icon to actually

00:22:36.100 --> 00:22:41.160
associate with your application package
in the finder or in the file dialogs.

00:22:41.220 --> 00:22:44.640
And then finally the executable name,
which is the file down

00:22:44.640 --> 00:22:46.180
in the Mac OS directory.

00:22:46.530 --> 00:22:49.510
Now there's two others that
are a little more complicated,

00:22:49.510 --> 00:22:52.430
and so I'll have to
drill down into these.

00:22:52.500 --> 00:22:55.570
The document types and the URL types.

00:22:55.830 --> 00:23:01.180
These are how you associate
documents on the system and

00:23:01.180 --> 00:23:03.210
URL schemes with your application.

00:23:03.260 --> 00:23:07.310
It lets us know that your
application can handle various

00:23:07.310 --> 00:23:09.600
types of documents and URLs.

00:23:09.710 --> 00:23:14.370
And those keys are actually arrays,
and each value in the array

00:23:14.730 --> 00:23:18.760
is a nested dictionary again,
so it's all very extensible.

00:23:18.890 --> 00:23:21.660
So for each document
type that you can handle,

00:23:21.700 --> 00:23:22.740
we have a number of keys.

00:23:22.780 --> 00:23:25.300
And I'm not going to go
through the URL keys,

00:23:25.300 --> 00:23:25.760
because they're very complicated.

00:23:25.760 --> 00:23:26.760
They're very similar.

00:23:26.760 --> 00:23:29.760
And I want to really focus
on document binding today.

00:23:30.020 --> 00:23:34.730
The first one is an
abstract name for the type.

00:23:34.760 --> 00:23:36.750
And this ends up being user visible.

00:23:36.760 --> 00:23:38.760
This is actually the kind string.

00:23:38.760 --> 00:23:44.300
So you want to make sure that this key
gets localized in your strings file.

00:23:44.820 --> 00:23:47.000
Moving on, the icon file.

00:23:47.000 --> 00:23:51.530
This tells us what icon-- we go and
look for this resource in your-- for

00:23:51.530 --> 00:23:58.010
this file in your resources directory
and associate the icon in there with

00:23:58.100 --> 00:23:59.220
documents of this type in the finder.

00:23:59.760 --> 00:24:02.600
The next one is a new concept, the role.

00:24:02.600 --> 00:24:08.180
We're introducing an understanding
of roles in Mac OS X.

00:24:08.180 --> 00:24:11.270
And this is a way to give us a
little more information about

00:24:11.750 --> 00:24:14.440
what your application can do
with documents of this type.

00:24:14.460 --> 00:24:18.920
And the only two we have defined
right now are editor and viewer.

00:24:19.030 --> 00:24:22.920
So full-blown Acrobat
is an editor of PDFs,

00:24:22.920 --> 00:24:26.200
but Acrobat Reader is a viewer of PDFs.

00:24:26.200 --> 00:24:29.070
And that's about as clear a definition
as you're going to get of the

00:24:29.070 --> 00:24:31.060
difference between editor and viewer.

00:24:31.060 --> 00:24:33.180
It's not always so clear,
but we think it's a pretty useful

00:24:33.440 --> 00:24:34.700
distinction in a lot of cases.

00:24:34.700 --> 00:24:36.730
This actually is a required key.

00:24:36.730 --> 00:24:38.090
You've got to tell us.

00:24:38.240 --> 00:24:39.680
You're one or the other.

00:24:39.680 --> 00:24:43.660
And it comes into play when
we're doing document binding.

00:24:45.860 --> 00:24:49.440
And then, for each abstract type,
you can actually associate

00:24:49.440 --> 00:24:53.130
a number of OS types,
that is type signatures,

00:24:53.240 --> 00:24:57.800
as well as extensions with
a given abstract type.

00:24:57.840 --> 00:25:00.920
In the case of OS types,
the reason you might want to have

00:25:01.300 --> 00:25:05.820
several instead of just one is
suppose you rev your application

00:25:05.830 --> 00:25:09.460
and change the file format,
so you want to change the

00:25:09.460 --> 00:25:11.270
OS type for your document.

00:25:11.300 --> 00:25:14.950
Well, those are really kind of the same
abstract type for the most up-to-date

00:25:15.020 --> 00:25:18.200
version of your application,
you can handle all of those types.

00:25:18.200 --> 00:25:21.040
You would list them here in the array.

00:25:21.300 --> 00:25:25.160
And similarly with extensions,
you might have extensions

00:25:25.360 --> 00:25:28.960
that have changed over time,
or you might have different versions

00:25:28.960 --> 00:25:33.300
of really the same extensions,
such as HTML and HTM.

00:25:33.300 --> 00:25:36.270
You want to treat those as really
the same abstract file type.

00:25:36.310 --> 00:25:40.300
So you can list them all in
this array of type extensions.

00:25:41.300 --> 00:25:44.060
And let's see,
I guess I have a demo here.

00:25:44.060 --> 00:25:46.080
What do I need to do?

00:25:50.690 --> 00:25:56.920
Right, so here is the property list,
and I was just going to

00:25:56.920 --> 00:25:58.270
open it up in BBEdit.

00:26:05.100 --> 00:26:07.330
BBEdit does some nice coloring.

00:26:07.330 --> 00:26:09.800
So, as you can see, it's an XML file.

00:26:09.900 --> 00:26:13.760
Here are the tags, like here,
this says that this particular

00:26:13.840 --> 00:26:16.410
XML file is a dictionary,
like I said.

00:26:16.490 --> 00:26:20.560
And there's a number of keys,
some of which I've talked about.

00:26:20.560 --> 00:26:24.050
All of the CFBundle types,
there's an array of types,

00:26:24.050 --> 00:26:26.960
and each item is a dictionary,
like I said.

00:26:26.960 --> 00:26:31.010
If we look down, here's some of the other
keys I talked about.

00:26:31.010 --> 00:26:33.160
The executable name is Sketch.

00:26:33.160 --> 00:26:35.080
The icon is Sketch.

00:26:35.100 --> 00:26:37.060
The icon file is actually Draw To App.

00:26:37.100 --> 00:26:42.110
And obviously,
this is not the best user interface

00:26:42.140 --> 00:26:44.090
for dealing with property lists.

00:26:44.120 --> 00:26:48.030
And so, if I actually go out here
and double-click this,

00:26:48.030 --> 00:26:50.920
it will open in a little tool,
a developer tool called

00:26:50.980 --> 00:26:52.420
Property List Editor.

00:26:52.420 --> 00:26:56.600
It gives you a much nicer interface
for creating property lists.

00:26:56.600 --> 00:26:59.130
You can see,
you can progressively disclose

00:26:59.170 --> 00:27:02.590
the property list to see all the
keys we've been talking about,

00:27:02.690 --> 00:27:04.520
see all the document types.

00:27:04.520 --> 00:27:05.720
This is an array.

00:27:05.720 --> 00:27:09.400
There's several types that
are supported by Sketch.

00:27:09.400 --> 00:27:12.780
So, this is a nice tool for actually
creating a property list.

00:27:12.910 --> 00:27:16.670
But in addition to that,
both Project Builder and

00:27:17.010 --> 00:27:20.080
Code Warrior provide assistance
in building your property list.

00:27:20.080 --> 00:27:27.010
Down inside the resources directory,
again, is where the

00:27:27.400 --> 00:27:35.010
Localized part of the property list is,
and if you look in here,

00:27:35.010 --> 00:27:35.010
you can get by all the disclaimers.

00:27:39.090 --> 00:27:42.580
What's in the strings
file is the same keys,

00:27:42.650 --> 00:27:45.720
for instance, the bundle name,
and then the localized value

00:27:45.720 --> 00:27:47.500
of it is sketch in English.

00:27:47.500 --> 00:27:51.960
Okay, end of demo.

00:28:00.240 --> 00:28:03.700
So that is not all the details
about application packages,

00:28:03.700 --> 00:28:07.810
but the message we really want you
to hear is that they're a new option

00:28:08.240 --> 00:28:11.640
that has great advantages over the
single file application structure.

00:28:11.780 --> 00:28:15.550
It gives a nice, simple,

00:28:15.800 --> 00:28:20.150
Presentation to the user
with a lot going on inside.

00:28:20.150 --> 00:28:23.040
Because it contains
multiple localizations,

00:28:23.080 --> 00:28:24.840
your application is actually globalized.

00:28:24.840 --> 00:28:28.780
You take a single image of
your application and it can run

00:28:28.780 --> 00:28:30.040
in many different languages.

00:28:30.040 --> 00:28:33.400
Not all at the same time,
but it changes as needed.

00:28:33.400 --> 00:28:37.270
And because of the way the definition
of a package is set up in a bundle,

00:28:37.320 --> 00:28:39.540
it's very extensible for the future.

00:28:39.550 --> 00:28:43.650
The key to getting a great user
experience for your application package

00:28:43.650 --> 00:28:46.100
on X is getting your property list right.

00:28:46.170 --> 00:28:49.790
And the best way to do that is go out
and read the documentation we have.

00:28:49.880 --> 00:28:52.330
There's various tech
notes on this subject.

00:28:52.390 --> 00:28:54.400
And also look at the sample code.

00:28:54.400 --> 00:28:58.080
The sample apps try to do a good
job of having their property lists

00:28:58.080 --> 00:29:00.170
just the way we want them to be.

00:29:01.320 --> 00:29:07.270
And that brings us to the second half,
Document Binding.

00:29:08.100 --> 00:29:09.100
So, it's great.

00:29:09.160 --> 00:29:14.180
The system knows all about
your application now.

00:29:14.180 --> 00:29:16.760
If you have a property list,
we look at that.

00:29:16.760 --> 00:29:18.800
If you have a P-list resource,
we look at that.

00:29:19.040 --> 00:29:22.560
Or if you're a single file
application and you have a BNDL and

00:29:22.610 --> 00:29:26.040
F-Ref resources and Kind resources,
we still look at that.

00:29:26.280 --> 00:29:29.800
And we have all this information
about what your application can do.

00:29:29.850 --> 00:29:32.760
Document binding is

00:29:33.270 --> 00:29:35.030
What makes this work?

00:29:35.060 --> 00:29:40.960
It's the service that associates on the
fly documents in the file system with

00:29:41.030 --> 00:29:42.960
the applications that can handle them.

00:29:42.960 --> 00:29:45.540
It's what makes double
click work in the finder.

00:29:45.600 --> 00:29:50.350
And as a general term,
I'm using it to refer to the new

00:29:50.350 --> 00:29:57.580
capability of binding URL schemes
to applications as well.

00:29:57.580 --> 00:29:57.580
So,

00:29:58.760 --> 00:30:09.570
In order to understand what's changing,
I want to look at how things used to be.

00:30:09.570 --> 00:30:09.570
In 1984,

00:30:11.150 --> 00:30:17.470
The Mac was introduced and we had
totally free-form file names and we

00:30:17.470 --> 00:30:24.410
introduced type and creator in order to
free the user from having to worry about

00:30:25.470 --> 00:30:45.490
Metadata and how documents get
associated with applications.

00:30:45.490 --> 00:30:45.490
And that worked great because
there wasn't a whole lot

00:30:45.490 --> 00:30:45.490
of file exchange going on.

00:30:45.490 --> 00:30:45.490
Every Macintosh was kind of an
island and the file exchange that was

00:30:45.490 --> 00:30:45.490
happening tended to be between Macs.

00:30:45.490 --> 00:30:45.490
If we fast forward to today,

00:30:45.710 --> 00:30:47.190
The picture is a lot more complicated.

00:30:47.310 --> 00:30:52.400
The world is a lot more interconnected
and it's not so simple anymore.

00:30:52.470 --> 00:30:55.900
So for instance, we've got files that
come onto the system,

00:30:55.920 --> 00:31:01.700
say from outside sources,
through an email program, for instance,

00:31:01.790 --> 00:31:08.090
and all we know about the file
maybe is its file name and its bits.

00:31:08.090 --> 00:31:08.090
So...

00:31:08.330 --> 00:31:10.250
In that case,
we can look at the file name and say,

00:31:10.290 --> 00:31:14.590
"Hmm, well, it has an extension,
and that doesn't do us much

00:31:14.640 --> 00:31:18.480
good on the Mac." So the email
client is the gatekeeper,

00:31:18.480 --> 00:31:22.240
and it's responsible for figuring
out what is that extension mapped to.

00:31:22.240 --> 00:31:25.240
Because if that email program
doesn't set the extension,

00:31:25.240 --> 00:31:27.900
or I'm sorry,
doesn't set the type and creator,

00:31:27.900 --> 00:31:31.240
then it's not going to be
very much use to a Mac user.

00:31:31.240 --> 00:31:34.240
And so the gatekeeper takes
care of that transition.

00:31:34.850 --> 00:31:38.180
Similarly, files going out,
if Letter to Mom doesn't

00:31:38.180 --> 00:31:41.180
have an extension on it,
it might be going to a Windows user.

00:31:41.180 --> 00:31:43.840
And the file's not going to be
much help to a Windows user who

00:31:43.980 --> 00:31:46.240
doesn't know how to open it,
because it doesn't have

00:31:46.250 --> 00:31:47.170
an extension on it.

00:31:47.180 --> 00:31:51.180
So the gatekeeper, again,
is responsible for doing the transition.

00:31:51.180 --> 00:31:53.180
It might say,
"Are you sure you want to do this?

00:31:53.180 --> 00:31:54.950
Do you want to add an extension
to this file?" In fact,

00:31:54.950 --> 00:31:59.170
that happens sometimes,
but not very reliably.

00:32:00.350 --> 00:32:06.160
Another problem with the gatekeeper
theory is that you can't always tell

00:32:06.200 --> 00:32:07.840
when you're crossing the boundary.

00:32:07.840 --> 00:32:10.880
Maybe you're putting a file onto a disk.

00:32:10.880 --> 00:32:14.970
It might be a file server
or a removable disk.

00:32:14.980 --> 00:32:16.700
It looks like an HFS disk.

00:32:16.700 --> 00:32:18.560
Maybe it's an AFP server.

00:32:18.560 --> 00:32:21.260
You don't want to force
extensions in all cases there.

00:32:21.260 --> 00:32:25.660
But the fact is if the file doesn't
have an extension and the disk

00:32:25.660 --> 00:32:28.660
is accessed by a Windows user
or another operating system,

00:32:28.660 --> 00:32:33.140
it probably isn't going to need an
extension in order to be understood.

00:32:33.250 --> 00:32:37.730
But you can't tell that it's
actually gone through a gateway.

00:32:38.310 --> 00:32:40.950
And just to add one
more thing to the mix,

00:32:40.960 --> 00:32:45.640
Macintosh is working as web
servers or hosting a lot of files

00:32:45.700 --> 00:32:47.730
that have extensions on them.

00:32:47.740 --> 00:32:51.720
And so right on the system you've
got files with extensions on them,

00:32:51.720 --> 00:32:55.090
and yet the system still knows
very little about extensions.

00:32:56.130 --> 00:33:02.240
So the gatekeeper theory kind of breaks
down in this very interconnected world,

00:33:02.250 --> 00:33:06.670
and we're left with a lot of file
exchange going on and not always

00:33:06.670 --> 00:33:11.430
a good user experience because
document binding doesn't always work.

00:33:11.510 --> 00:33:15.000
So what's the answer?

00:33:17.060 --> 00:33:20.800
Well,
if this was an episode of Star Trek:

00:33:20.840 --> 00:33:26.270
Voyager, I would say we could just
assimilate Microsoft.

00:33:27.040 --> 00:33:31.310
and we could banish extensions from
the universe and make sure that

00:33:31.310 --> 00:33:33.700
everyone was using types and creators.

00:33:33.710 --> 00:33:36.900
I don't know what the Linux people
would have to say about that.

00:33:36.910 --> 00:33:39.180
That would be nice, huh?

00:33:39.340 --> 00:33:42.070
The problem is we're the good guys,
right?

00:33:42.330 --> 00:33:44.300
That violates the prime directive.

00:33:44.300 --> 00:33:47.810
We can't do that.

00:33:48.410 --> 00:33:52.700
So the next thing that happens,
whenever you're doing battle

00:33:52.700 --> 00:33:58.190
against the Borg anyway,
is you remodulate your shields.

00:34:00.080 --> 00:34:01.310
There's two problems with that.

00:34:01.510 --> 00:34:04.340
First of all,
it never works for very long.

00:34:04.360 --> 00:34:06.560
The boards see right through that, right?

00:34:06.670 --> 00:34:09.210
The other problem is,
it has nothing at all to

00:34:09.300 --> 00:34:11.160
do with document binding.

00:34:11.170 --> 00:34:13.430
So we can't do that.

00:34:17.300 --> 00:34:21.740
However, it occurred to me that what
we are doing is something that

00:34:21.830 --> 00:34:24.490
Captain Janeway does all the time.

00:34:24.600 --> 00:34:30.440
She takes an alien technology
and uses it to her advantage.

00:34:30.440 --> 00:34:35.150
And that's what we're doing by
recognizing extensions on Mac OS X.

00:34:36.180 --> 00:34:38.000
Extensions are out there.

00:34:38.120 --> 00:34:40.400
They're on Mac systems.

00:34:40.500 --> 00:34:42.880
They're coming in all the time.

00:34:43.310 --> 00:34:47.570
And the fact that we don't recognize them
at all is just getting in users' way,

00:34:47.580 --> 00:34:48.290
in the way of users.

00:34:48.350 --> 00:34:52.350
And so I picked this word
"recognize" very carefully because...

00:34:53.030 --> 00:34:55.400
We're not trying to get
rid of anything else.

00:34:55.430 --> 00:34:59.280
We're just saying that extensions
are an interesting piece of metadata.

00:34:59.310 --> 00:35:01.560
It tells us something about a file.

00:35:01.600 --> 00:35:05.870
And we want to provide the best
possible user experience for our users.

00:35:05.920 --> 00:35:11.180
A lot of users are interacting
with extensions by necessity.

00:35:11.210 --> 00:35:16.120
And the way to help them is to
recognize them as a part of the system.

00:35:16.180 --> 00:35:20.900
So what comes from that decision?

00:35:22.430 --> 00:35:25.760
The goal of document binding remains,
and always will remain,

00:35:25.790 --> 00:35:30.780
that we want to always launch the right
application when opening a document.

00:35:30.870 --> 00:35:34.400
The right application, of course,
is what the user wants.

00:35:34.460 --> 00:35:36.400
So we have to do some mind reading.

00:35:36.430 --> 00:35:39.650
If we could read the user's mind,
that would be great.

00:35:40.150 --> 00:35:41.910
Document binding would just work.

00:35:43.240 --> 00:35:46.600
Our goal is to approximate mind
reading as much as possible.

00:35:46.720 --> 00:35:49.100
And in order to do that,
we want to recognize all

00:35:49.100 --> 00:35:51.200
available type information.

00:35:51.280 --> 00:35:54.690
Type, creator, extension,
whatever might become

00:35:54.690 --> 00:35:56.790
available in the future.

00:35:57.090 --> 00:36:00.560
In addition, we want to give the user
a little bit more control,

00:36:00.720 --> 00:36:03.260
actually,
of how binding works so that they

00:36:03.690 --> 00:36:07.150
don't just have one choice for binding,
that they can do some

00:36:07.150 --> 00:36:08.960
overriding if they want.

00:36:10.200 --> 00:36:15.560
Now, the user experience we have in
Mac OS X is not completely done.

00:36:15.590 --> 00:36:19.630
Extensions are fairly
new to the system and...

00:36:20.740 --> 00:36:26.200
We're on our way to something that we
think is a great user experience and

00:36:26.710 --> 00:36:30.670
I'm just mentioning this because
I don't want you to think that what we

00:36:30.670 --> 00:36:32.930
have in Mac OS X we think is perfect.

00:36:33.020 --> 00:36:34.200
It's not perfect.

00:36:34.230 --> 00:36:38.440
But we do think it's an improvement,
especially for users that need

00:36:38.490 --> 00:36:40.390
to work with extensions a lot.

00:36:40.970 --> 00:36:42.490
So first of all, what is an extension?

00:36:42.530 --> 00:36:44.630
Well,
we've tried to give a fairly constrained

00:36:44.660 --> 00:36:48.870
definition for an extension because
we're adding it onto a system that

00:36:48.980 --> 00:36:50.740
already has a bunch of files on it.

00:36:50.820 --> 00:36:52.540
Some of those files
might have extensions.

00:36:52.700 --> 00:36:55.730
Other files might have things
that look like extensions,

00:36:55.810 --> 00:36:57.460
but are just,
were just put there by the user

00:36:57.540 --> 00:36:58.940
and aren't really extensions.

00:36:58.940 --> 00:37:03.940
Something like, well, I don't know,
but by constraining the

00:37:04.020 --> 00:37:08.890
definition of an extension,
we are reducing the number of false

00:37:09.060 --> 00:37:10.880
positives on finding an extension.

00:37:10.900 --> 00:37:14.390
So, the extension is all the
characters following the last dot.

00:37:14.530 --> 00:37:19.870
The character set is A through Z, 0 to 9,
dollar sign, percent, underscore,

00:37:19.870 --> 00:37:20.900
and tilde.

00:37:20.900 --> 00:37:23.560
Notice there's no spaces
allowed in extensions.

00:37:23.560 --> 00:37:25.140
And there's one more restriction.

00:37:25.140 --> 00:37:28.500
If, although digits are allowed,
numerics are allowed,

00:37:28.560 --> 00:37:32.690
if the extension is all numbers,
then it's not seen as a valid extension,

00:37:32.690 --> 00:37:35.710
so it's ignored as an
extension by the system.

00:37:35.720 --> 00:37:37.360
So, what are some examples of this?

00:37:37.430 --> 00:37:40.180
Well, first two.

00:37:40.920 --> 00:37:42.070
There are similar document names.

00:37:42.080 --> 00:37:44.430
They both have a surfpaint extension,
but with slightly

00:37:44.430 --> 00:37:45.780
different capitalization.

00:37:45.780 --> 00:37:48.720
Those are actually recognized
as the same extension.

00:37:48.720 --> 00:37:51.400
Extensions are always
matched case and sensitive.

00:37:51.400 --> 00:37:53.710
So those are the exact same extension.

00:37:53.710 --> 00:37:56.120
Listview.c, of course.

00:37:56.120 --> 00:37:59.430
And the last one,
an mp3 file that has a digit in it,

00:37:59.430 --> 00:38:02.860
but it also has letters,
so it's a valid extension.

00:38:02.880 --> 00:38:09.880
The invalid ones, surfpaint1.0.

00:38:10.140 --> 00:38:10.880
That's just an extension.

00:38:10.900 --> 00:38:12.900
So, it's not a valid extension.

00:38:12.900 --> 00:38:16.230
Surfpaint1.0.v2 has a space in it.

00:38:16.540 --> 00:38:17.900
We disqualify that.

00:38:17.900 --> 00:38:21.080
And if somebody likes to put dates
at the end of their file name,

00:38:21.080 --> 00:38:24.440
and it ends in .01,
that's not a valid extension either.

00:38:24.440 --> 00:38:26.790
So, those things are right out.

00:38:26.810 --> 00:38:29.660
We don't recognize that
as extension metadata.

00:38:29.660 --> 00:38:30.970
Okay.

00:38:32.490 --> 00:38:35.660
So given all of that,
how do we actually bind

00:38:35.760 --> 00:38:38.860
documents in Mac OS X?

00:38:40.100 --> 00:38:45.410
The first thing is that users can,
for specific documents,

00:38:45.690 --> 00:38:53.440
: So, in the info window of the finder,
there's actually a panel

00:38:54.060 --> 00:38:57.930
that allows the user to say,
"For this one document,

00:38:58.010 --> 00:39:02.170
I always want to open it in this
application over here." And that

00:39:02.340 --> 00:39:07.090
is the first rule in the overriding
rule that if the user has set that,

00:39:07.090 --> 00:39:10.620
that's the application
they're going to get.

00:39:11.020 --> 00:39:15.500
Now, if that's not set,
which would generally be the exception,

00:39:15.500 --> 00:39:19.450
because that's an advanced feature,
not something where obviously we don't

00:39:19.450 --> 00:39:25.930
want to require users to do that,
the next thing we look at is the creator.

00:39:26.390 --> 00:39:30.250
We look at the creator and we say,
do we have an application with

00:39:30.360 --> 00:39:32.180
this creator on the system?

00:39:32.430 --> 00:39:35.040
And if we have more than one,
we have to do some best matching,

00:39:35.040 --> 00:39:36.100
which I'll get into.

00:39:36.210 --> 00:39:38.560
But the important thing is,
if the creator's there

00:39:38.560 --> 00:39:40.600
and we can match it,
then that's how we're

00:39:40.600 --> 00:39:42.250
going to bind the document.

00:39:42.350 --> 00:39:46.530
I want to point out,
this is how it works on Mac OS 9.

00:39:46.540 --> 00:39:50.260
This covers 99% of what
happens on Mac OS 9.

00:39:50.310 --> 00:39:53.390
So right here,
you're getting behavior that

00:39:53.550 --> 00:39:58.280
is pretty much in line with
what happens on Mac OS 9.

00:39:59.240 --> 00:40:01.900
The next thing we're going
to look at is the extension,

00:40:01.990 --> 00:40:02.740
if there is one.

00:40:02.740 --> 00:40:06.560
If there's an extension,
we want to consider it first because

00:40:06.670 --> 00:40:10.960
there's some important cases when
the extension actually has more

00:40:10.960 --> 00:40:13.370
meaning in it than the OS type.

00:40:13.440 --> 00:40:16.100
And a great example is text files.

00:40:16.100 --> 00:40:19.330
They're all T-E-X-T on the Mac,
and that's why you see text

00:40:19.330 --> 00:40:22.860
files with extensions on them,
so that the system can

00:40:22.860 --> 00:40:24.520
tell the difference.

00:40:24.560 --> 00:40:28.260
Now actually, the Mac OS 9 system can't
tell the difference very well,

00:40:28.260 --> 00:40:31.360
but on 10, we can look and say, "Oh,
it's an HTML file.

00:40:31.360 --> 00:40:34.980
It doesn't have a creator
or the creator's missing,

00:40:35.100 --> 00:40:37.660
but we're going to launch it
in Internet Explorer." Or,

00:40:37.680 --> 00:40:38.760
"It's a .c file.

00:40:38.770 --> 00:40:41.400
We're going to launch
it in Code Warrior."

00:40:42.570 --> 00:40:43.830
And then we look at the OS type.

00:40:43.890 --> 00:40:47.620
If we don't find an extension
match or there is no extension,

00:40:47.620 --> 00:40:50.590
then we look at the type and we
try to find an application that

00:40:50.590 --> 00:40:52.300
can open that type of document.

00:40:52.420 --> 00:40:54.370
In all these cases,
there might be some ties.

00:40:54.490 --> 00:40:56.170
So let's look at how we break ties.

00:40:56.350 --> 00:40:59.130
For creator binding, well,

00:41:00.390 --> 00:41:04.680
Let's say we find more than
one app with the same creator.

00:41:04.860 --> 00:41:07.760
In general, it's going to be a different
version of the same app.

00:41:07.880 --> 00:41:11.510
And we break ties in that
case by always launching a

00:41:11.510 --> 00:41:14.230
native app over a classic app.

00:41:14.320 --> 00:41:16.140
If there are two native apps,
for example,

00:41:16.140 --> 00:41:20.060
then we'll look at the version numbers
in the bundle or the verse resource.

00:41:20.060 --> 00:41:26.130
And then finally, if that fails,
then we'll try to break the tie

00:41:26.150 --> 00:41:27.930
by the latest modification date.

00:41:27.960 --> 00:41:30.280
And if that fails,
then we'll try to break the tie

00:41:30.280 --> 00:41:30.280
by the latest modification date.

00:41:30.300 --> 00:41:32.870
have the same app and it
doesn't really matter.

00:41:33.720 --> 00:41:38.100
If we have to drop down to looking at
the type in order to achieve the binding,

00:41:38.250 --> 00:41:40.580
then we look again at a user preference.

00:41:40.590 --> 00:41:45.060
This is an advanced feature,
so most users won't be doing this,

00:41:45.060 --> 00:41:47.600
but it hits the spot when you need it.

00:41:47.630 --> 00:41:52.220
And that is, you can say,
the user can say that HTML files,

00:41:52.390 --> 00:41:55.600
I always want to open them in Explorer.

00:41:55.600 --> 00:41:59.590
For any particular type,
the user can specify their preference.

00:41:59.600 --> 00:42:02.410
If that's not set,
then we have some other rules,

00:42:02.410 --> 00:42:04.490
and this is where the roles come in.

00:42:04.580 --> 00:42:07.600
If we have an editor and
a viewer to choose from,

00:42:07.600 --> 00:42:09.510
then we'll pick the editor.

00:42:09.600 --> 00:42:12.480
And by the way,
unless classic apps indicate

00:42:12.580 --> 00:42:16.910
otherwise through a property list,
all classic apps are viewers,

00:42:17.190 --> 00:42:18.420
considered viewers.

00:42:18.600 --> 00:42:22.600
And so this will also give
an edge to native apps.

00:42:22.600 --> 00:42:26.610
But finally, if all things are equal,
then we'll still pick a

00:42:26.620 --> 00:42:28.890
native app over a classic app.

00:42:29.510 --> 00:42:32.350
So that is, in a nutshell,
the binding rules.

00:42:32.430 --> 00:42:34.900
There are some nooks and
crannies that I didn't get into,

00:42:34.900 --> 00:42:38.340
but that's the essential
expression of what happens.

00:42:38.440 --> 00:42:40.800
So, given all of this,
what are the guidelines for

00:42:40.800 --> 00:42:44.880
creating new documents on Mac OS X?

00:42:44.880 --> 00:42:44.880
Well,

00:42:46.070 --> 00:42:50.190
You want to maintain
binding for everybody,

00:42:50.190 --> 00:42:51.340
ideally.

00:42:51.370 --> 00:42:54.740
And so this actually came up on
the discussion list recently,

00:42:54.740 --> 00:42:58.540
AppleHIDEV,
and a pretty good way to put it is,

00:42:58.600 --> 00:43:00.760
save all the metadata that you have.

00:43:00.900 --> 00:43:03.540
So if you're an editor
for a type of document,

00:43:03.540 --> 00:43:06.420
and the user is saving that document,
it totally makes sense.

00:43:06.490 --> 00:43:08.130
You're the creator for that document.

00:43:08.140 --> 00:43:10.700
You should set the type
and creator for the file,

00:43:10.750 --> 00:43:15.110
and if your users might possibly
be interested in opening

00:43:15.110 --> 00:43:18.270
that file on another OS,
then the best policy is to also

00:43:18.510 --> 00:43:20.220
have an extension for that document.

00:43:20.310 --> 00:43:24.000
You might not want to force that,
but a number of large

00:43:24.000 --> 00:43:27.030
applications already do,
and not just Microsoft applications,

00:43:27.040 --> 00:43:28.600
I might add.

00:43:28.650 --> 00:43:32.500
It's something that our
users need in some cases.

00:43:32.590 --> 00:43:35.980
And so having all the metadata there,

00:43:36.270 --> 00:43:40.040
It enables us to do the best
possible binding and for binding

00:43:40.040 --> 00:43:42.930
to work on all operating systems.

00:43:42.930 --> 00:43:45.380
However,
there are cases when you're actually

00:43:45.920 --> 00:43:48.230
manufacturing or deriving metadata.

00:43:48.330 --> 00:43:51.360
And that might not actually make sense
to save metadata that you have to derive.

00:43:51.360 --> 00:43:57.290
So for instance,
if a file is incoming over

00:43:57.290 --> 00:44:01.280
the network as an attachment,

00:44:01.560 --> 00:44:03.850
You might just have an extension.

00:44:03.850 --> 00:44:06.300
And you can ask Internet Config for,
you know,

00:44:06.300 --> 00:44:08.780
you can do the gatekeeper thing and say,
what's the type and creator for this?

00:44:08.780 --> 00:44:11.920
Well, the fact is,
what you're doing when you ask

00:44:11.920 --> 00:44:15.680
that question is Internet Config is
consulting the Launch Binding,

00:44:15.680 --> 00:44:19.120
or the Document Bindings database,
and it's giving you back

00:44:19.190 --> 00:44:21.340
the same information,
essentially,

00:44:21.340 --> 00:44:24.370
that you get when the document
is double-clicked in the

00:44:24.370 --> 00:44:26.340
finder with just an extension.

00:44:26.340 --> 00:44:28.880
So by, in other words,
by saving the type and

00:44:28.880 --> 00:44:32.280
creator at that moment,
you're kind of freezing the binding

00:44:32.300 --> 00:44:36.090
for that file at that moment,
when in fact all of that happens

00:44:36.090 --> 00:44:38.710
dynamically now in the finder.

00:44:38.740 --> 00:44:42.000
If there is just an extension,
your file will bind just fine.

00:44:42.000 --> 00:44:45.210
So there's no need to
derive new metadata.

00:44:48.970 --> 00:44:54.560
Other interesting things that you
should do when you create a new file.

00:44:54.620 --> 00:44:57.550
Users like to see their
files show up immediately.

00:44:57.660 --> 00:44:59.090
They like to see it in the finder.

00:44:59.090 --> 00:45:03.550
They know that their data is
all nice and safe on disk.

00:45:04.110 --> 00:45:06.650
And the Finder does
not pull periodically.

00:45:06.700 --> 00:45:09.160
That's a big performance
problem if you do that.

00:45:09.380 --> 00:45:14.500
And so on the chance that your
file is visible in the Finder,

00:45:14.580 --> 00:45:17.440
or should be visible in the Finder,
after you save a new file,

00:45:17.440 --> 00:45:20.090
or after you remove a file,
for that matter, if you do,

00:45:20.200 --> 00:45:21.920
you can call this new
function on Mac OS X,

00:45:21.990 --> 00:45:27.480
fnnotify, passing in an fsref to the
directory that the file is in.

00:45:27.580 --> 00:45:29.890
And that will wake up the Finder,
and maybe some other clients

00:45:29.900 --> 00:45:32.800
for the notifications,
and the Finder will redraw

00:45:32.800 --> 00:45:34.990
its window and the file will
appear and the user will see it,

00:45:35.110 --> 00:45:37.530
even with the window in the background.

00:45:38.030 --> 00:45:40.320
By the way,
the save panels in both Carbon and

00:45:40.410 --> 00:45:42.590
Cocoa will do this for you.

00:45:42.590 --> 00:45:44.730
So you don't have to do it
if you've gone through a save

00:45:44.850 --> 00:45:48.600
panel to create a new file.

00:45:48.750 --> 00:45:52.200
Wildcard document types.

00:45:52.200 --> 00:45:52.200
Well,

00:45:54.060 --> 00:45:57.700
Used to be in a single file
application you could claim four

00:45:57.790 --> 00:46:01.060
stars and get wildcard binding
for drag and drop purposes.

00:46:01.110 --> 00:46:02.840
And you can still do that
in your property list.

00:46:02.840 --> 00:46:05.360
If you claim four stars,
you're saying that you

00:46:05.570 --> 00:46:07.350
can open any file at all.

00:46:07.490 --> 00:46:09.200
Any file can be dropped
on your application.

00:46:09.200 --> 00:46:13.250
We've added one new one which is
claiming an extension of star,

00:46:13.250 --> 00:46:14.400
just one star.

00:46:14.400 --> 00:46:17.000
And what that does is it's
a little bit different.

00:46:17.000 --> 00:46:20.000
It says you can open any
file that has an extension.

00:46:20.000 --> 00:46:24.200
And that's somewhat useful because
you're saying that you open any file

00:46:24.200 --> 00:46:27.000
that has an extension and that you're
going to look at that extension

00:46:27.000 --> 00:46:28.480
to figure out what the file is.

00:46:28.620 --> 00:46:30.500
That's why it needs to have one.

00:46:30.500 --> 00:46:33.870
Both of those can appear
in your property list.

00:46:34.980 --> 00:46:38.930
And finally, the last thing I really want
to go through in this talk is

00:46:39.810 --> 00:46:44.540
how to open a document and the
Launch Services API in general.

00:46:44.720 --> 00:46:47.660
This is a new API available
only on Mac OS X.

00:46:47.830 --> 00:46:51.040
It is the engine that
does document binding.

00:46:51.040 --> 00:46:55.080
It opens documents, it opens URLs,
and it also provides some API for

00:46:55.170 --> 00:46:56.910
getting all sorts of information.

00:46:57.030 --> 00:47:02.780
So if you have a file or a
folder or an application you

00:47:02.790 --> 00:47:05.870
have some questions about,
then,

00:47:06.300 --> 00:47:16.880
Use Launch Services to
get that information.

00:47:16.880 --> 00:47:16.880
And let me go through
real quick how it works.

00:47:16.880 --> 00:47:16.880
As I said,
it's only available on Mac OS X.

00:47:17.490 --> 00:47:20.010
It maintains the bindings database.

00:47:20.070 --> 00:47:25.030
It does also save relevant information
back to the desktop database,

00:47:25.070 --> 00:47:26.670
so that if your user

00:47:26.810 --> 00:47:28.690
does boot back into 9.

00:47:28.780 --> 00:47:33.090
Anything that got installed while
10 was running is in the desktop

00:47:33.090 --> 00:47:37.830
database to the fidelity that
the desktop database can handle.

00:47:38.050 --> 00:47:43.060
And finally, oh, however, I should say,
don't rely on the desktop database

00:47:43.230 --> 00:47:45.000
for getting binding to work on X.

00:47:45.000 --> 00:47:48.970
In fact, there is one more step
in document binding,

00:47:48.970 --> 00:47:51.800
which is a last-ditch
effort to bind things.

00:47:51.800 --> 00:47:54.100
If all else fails,
we will go back and consult the

00:47:54.170 --> 00:47:57.860
desktop database to see if we can find
some application to open a document.

00:47:57.860 --> 00:48:00.580
But it's really the last resort.

00:48:00.580 --> 00:48:03.510
And if you want to work well on Mac OS X,
you want to make sure that

00:48:03.510 --> 00:48:07.000
your application goes into the
Launch Services bindings database.

00:48:09.160 --> 00:48:11.590
Launch Services is used
extensively by the Finder.

00:48:11.590 --> 00:48:15.790
It's essentially code that used to be
in the Finder that did all the bindings.

00:48:15.850 --> 00:48:18.430
What we've done is we've made
an API public so that you

00:48:18.430 --> 00:48:19.760
too can be like the Finder.

00:48:19.800 --> 00:48:23.220
If you need to open things,
you want things to open in the same exact

00:48:23.220 --> 00:48:27.800
application that would happen if the user
double-clicked something in the Finder,

00:48:27.800 --> 00:48:29.190
use Launch Services.

00:48:31.380 --> 00:48:32.800
So what can you do with it?

00:48:32.860 --> 00:48:37.330
Well, you can open documents and URLs.

00:48:37.610 --> 00:48:38.290
There's two ways.

00:48:38.300 --> 00:48:43.120
The easy way, which is,
takes an FSRF or a URL,

00:48:43.250 --> 00:48:45.860
and what that does is,
the easy way is essentially

00:48:46.230 --> 00:48:47.500
the same as double-clicking.

00:48:47.500 --> 00:48:48.490
There's no options.

00:48:48.510 --> 00:48:51.760
You just say, take this thing and do
the right thing with it.

00:48:51.780 --> 00:48:54.410
And it's the same as what
the user is asking for when

00:48:54.410 --> 00:48:55.850
an item gets double-clicked.

00:48:55.870 --> 00:49:00.130
If it's a URL, we look at the scheme,
we find out what the best application

00:49:00.200 --> 00:49:03.660
is to open that particular kind of URL,
we launch the application,

00:49:03.730 --> 00:49:06.940
and send it the URL Apple event.

00:49:08.240 --> 00:49:12.300
If you need more control than that,
then there's API available that

00:49:12.300 --> 00:49:16.690
allows you to do things such as launch
more than one document at a time.

00:49:16.700 --> 00:49:18.190
I have an array of documents.

00:49:18.390 --> 00:49:19.760
I want to open them all.

00:49:19.800 --> 00:49:23.800
And by the way, I also want to open them
in a specific application,

00:49:23.820 --> 00:49:26.870
not the default application,
but I know the application I want,

00:49:26.870 --> 00:49:28.900
so I'm going to specify that.

00:49:29.280 --> 00:49:33.610
And there's some other options,
such as passing Apple event parameters

00:49:33.610 --> 00:49:38.200
to the application when it gets launched,
some pass-through params.

00:49:38.200 --> 00:49:44.200
All of these things, by the way,
are in LaunchServices.h on Mac OS X,

00:49:44.200 --> 00:49:46.460
and there's some extensive header
documentation in there that

00:49:46.460 --> 00:49:51.700
will help you figure out exactly
what each part of the API does.

00:49:52.090 --> 00:49:57.030
There's also a tech note on this,
which we'll give a URL to at the end.

00:49:57.440 --> 00:49:59.940
The rest of the Launch Services API is
all informational.

00:49:59.940 --> 00:50:04.450
It allows you to answer questions
that you have about various things.

00:50:04.470 --> 00:50:10.400
So, for instance,
lscopy item info for ref or for URL.

00:50:10.490 --> 00:50:14.200
This allows you to pass in options,
essentially asking questions, saying,

00:50:14.200 --> 00:50:15.400
is this item a package?

00:50:15.400 --> 00:50:17.000
Is it a volume?

00:50:17.000 --> 00:50:18.500
Is it an application?

00:50:18.500 --> 00:50:20.440
You know, I have an FSRef.

00:50:20.440 --> 00:50:22.950
I need to know something about it.

00:50:22.960 --> 00:50:25.450
If it is an application,
is it classic or a native app?

00:50:25.490 --> 00:50:29.100
Does it have an extension
and what is the extension?

00:50:29.100 --> 00:50:33.740
Don't rely on just looking for
the last dot in a file name.

00:50:33.740 --> 00:50:37.440
As I said, there are rules about
what's a valid extension.

00:50:37.800 --> 00:50:41.220
Launch Services defines
those rules by providing the

00:50:41.270 --> 00:50:43.500
API to get at the extension.

00:50:46.280 --> 00:50:49.190
Getting bindings information.

00:50:49.190 --> 00:50:51.690
If you want to find out what
the binding is for a document

00:50:51.710 --> 00:50:55.740
without actually opening it,
or for a URL, you can call this

00:50:55.840 --> 00:50:59.440
Get Application for Item or for URL.

00:50:59.590 --> 00:51:08.890
And it will actually return to you an
FSRef or a CFURL to the application that

00:51:08.940 --> 00:51:12.630
is the default binding for that item.

00:51:13.150 --> 00:51:17.550
If you don't have an item
but you have some metadata,

00:51:17.580 --> 00:51:23.520
a creator, a type, or an extension,
or maybe all three or some combination,

00:51:23.630 --> 00:51:27.680
you can pass in whatever you have
to get application for info and it

00:51:27.680 --> 00:51:33.960
will return to you the best possible,
the best match for binding that metadata.

00:51:35.030 --> 00:51:38.640
And finally, this is kind of an oddball,
but if you have something else

00:51:38.700 --> 00:51:41.340
to identify an application,
such as an application name

00:51:41.340 --> 00:51:46.480
or just a creator or a bundle
identifier like com.apple.sketch,

00:51:46.840 --> 00:51:50.220
this API will go and find,
search the bindings database

00:51:50.220 --> 00:51:51.360
for that application.

00:51:51.370 --> 00:51:57.930
And that might be something,
especially with bundle identifier,

00:51:57.930 --> 00:51:57.930
might be something you need to do.

00:51:59.240 --> 00:52:00.100
Drag and drop.

00:52:00.100 --> 00:52:03.840
Again, the Finder uses this in order to
figure out drag and drop acceptance,

00:52:03.840 --> 00:52:04.880
so you can too.

00:52:04.920 --> 00:52:06.070
You've got two items.

00:52:06.070 --> 00:52:09.850
You want to know if one can
be dropped on the other.

00:52:10.730 --> 00:52:14.840
You call lscanref accept
item or can URL accept URL if

00:52:14.840 --> 00:52:17.120
you're dragging around a URL.

00:52:19.690 --> 00:52:20.500
Kind strings.

00:52:20.500 --> 00:52:24.690
You need to know the kind
string for a document.

00:52:24.750 --> 00:52:31.230
This API returns for a document
or even for a URL the kind string

00:52:31.230 --> 00:52:33.990
pulled out of the bound application.

00:52:33.990 --> 00:52:38.360
So it does the default binding and
it goes and looks in the package,

00:52:38.360 --> 00:52:43.810
looks in the property list,
and finds the localized kind

00:52:43.810 --> 00:52:45.070
string for the document,
returns it to you as a CFString.

00:52:46.900 --> 00:52:56.800
[Transcript missing]

00:52:57.100 --> 00:53:16.600
[Transcript missing]

00:53:17.900 --> 00:53:22.140
All right, how do you make sure that
you're in the bindings database?

00:53:22.140 --> 00:53:24.870
It's kind of embarrassing if you
install your application and then

00:53:25.000 --> 00:53:29.890
your user can't get it to launch
by double-clicking a document.

00:53:29.890 --> 00:53:29.890
Well,

00:53:30.220 --> 00:53:35.210
Today, the Finder is solely responsible
for updating the Bindings database.

00:53:35.320 --> 00:53:39.330
And it does some things
automatically for you.

00:53:39.420 --> 00:53:41.760
Whenever the user logs in,

00:53:42.060 --> 00:53:43.980
The Finder looks in
some well-known places,

00:53:44.010 --> 00:53:46.740
such as the main applications
folder for the system,

00:53:46.740 --> 00:53:49.240
the users application
folder if there is one,

00:53:49.240 --> 00:53:52.800
some other places I think
like scripting additions.

00:53:52.950 --> 00:53:57.300
And it notices if anything has been
added or removed in those places.

00:53:57.410 --> 00:54:02.900
And it scans the subfolders as well,
not just the flat folders.

00:54:03.020 --> 00:54:06.000
And it makes sure that all the
applications in those locations

00:54:06.060 --> 00:54:07.720
are in the bindings database.

00:54:08.290 --> 00:54:10.490
Whenever an application
is launched by the user,

00:54:10.500 --> 00:54:13.620
say, right in the finder,
you double-click on an application or

00:54:13.620 --> 00:54:16.580
you double-click on one of its documents.

00:54:16.890 --> 00:54:20.390
The Finder will make sure that that
application is in the bindings database.

00:54:20.400 --> 00:54:22.420
Obviously, if you double-click on
one of the documents,

00:54:22.450 --> 00:54:23.470
it must already be in there.

00:54:23.500 --> 00:54:26.660
But if you launch the application,
it will get added to

00:54:26.660 --> 00:54:27.990
the bindings database.

00:54:28.330 --> 00:54:32.210
But you also need a way to install
your application and make sure

00:54:32.220 --> 00:54:34.060
it gets added to the database.

00:54:34.080 --> 00:54:37.700
And the way you do that today is you
need to tell the finder about it.

00:54:38.120 --> 00:54:41.750
And the way you do that is with
an existing Apple event protocol

00:54:41.760 --> 00:54:45.480
called the Sync Apple Event,
or KAE Sync.

00:54:45.630 --> 00:54:51.180
This constant,
I think it's in finder-registry.h.

00:54:51.180 --> 00:54:54.220
And what you do is you create
one of these sync Apple events.

00:54:54.360 --> 00:55:00.000
You make an alias to your application,
not to the directory it's in,

00:55:00.000 --> 00:55:03.960
but the application itself,
the package or the binary.

00:55:04.230 --> 00:55:07.100
You add that alias to the
sync Apple event and you

00:55:07.100 --> 00:55:08.750
send it off to the finder.

00:55:08.750 --> 00:55:10.250
And that wakes up the finder.

00:55:10.280 --> 00:55:14.190
The finder adds the application
to the bindings database.

00:55:14.190 --> 00:55:17.950
So if you're installing, well,
what are your choices?

00:55:18.190 --> 00:55:22.660
First thing you could do is just
rely on packages for a nice drag

00:55:22.660 --> 00:55:24.010
and drop install experience.

00:55:24.040 --> 00:55:26.620
You have a CD,
you put your application on it,

00:55:26.660 --> 00:55:29.740
the user pops in your CD,
drags the application package over,

00:55:29.780 --> 00:55:31.850
all the goo is hidden inside the package.

00:55:31.920 --> 00:55:34.500
They drag it over,
they double click your document, sorry,

00:55:34.500 --> 00:55:40.060
double click your application and boom,
it gets added to the bindings database.

00:55:40.120 --> 00:55:42.650
But certainly there are going to be
cases when you need to do something

00:55:42.650 --> 00:55:43.960
a little more formal than that.

00:55:44.030 --> 00:55:47.140
So if you're installing multiple
applications or something,

00:55:47.170 --> 00:55:51.690
run through your installer,
but don't force a restart or a logout.

00:55:51.740 --> 00:55:55.200
You might want to make the user log out,
they'll log back in,

00:55:55.200 --> 00:55:57.210
the finder will scan and
find your application.

00:55:57.320 --> 00:56:00.500
But there's a much nicer way to do
it and that is with the sync event.

00:56:00.560 --> 00:56:05.050
So copy over the application,
send the sync event, everything goes into

00:56:05.100 --> 00:56:06.800
the bindings database.

00:56:06.930 --> 00:56:11.030
If you have more than one application,
obviously send one event

00:56:11.030 --> 00:56:12.780
for each application.

00:56:18.750 --> 00:56:27.850
So in summary, for document binding,
our goal remains, and always will remain,

00:56:28.700 --> 00:56:31.620
To read the user's mind,
to make document binding

00:56:31.620 --> 00:56:33.840
work intuitively.

00:56:34.900 --> 00:56:39.680
In order to achieve that,
we've added a new type of metadata to

00:56:39.680 --> 00:56:44.550
our bindings information that we consider
the extension so that all available type

00:56:44.550 --> 00:56:47.910
information is recognized by the system.

00:56:48.220 --> 00:56:55.360
And this should result in ultimately a
better binding experience for the user.

00:56:56.520 --> 00:56:59.740
We've also added the ability for
the user to exert some control

00:56:59.740 --> 00:57:04.910
for advanced users over specific
binding of specific documents.

00:57:05.700 --> 00:57:07.560
And in general,
the best practice for you in

00:57:07.640 --> 00:57:10.730
creating new documents when you're
the editor of the application,

00:57:10.800 --> 00:57:14.830
when you are an editor application,
is save all the metadata you have.

00:57:14.830 --> 00:57:16.400
Type in creator.

00:57:16.400 --> 00:57:18.500
If your user wants to
work with extensions,

00:57:18.580 --> 00:57:19.600
save an extension also.

00:57:19.600 --> 00:57:23.200
That will ensure that your document
can be correctly bound everywhere.

00:57:23.200 --> 00:57:26.040
And finally,
the Launch Services API is really

00:57:26.040 --> 00:57:27.780
your access to all of this.

00:57:27.780 --> 00:57:31.200
It gives you all sorts of
information about bindings,

00:57:31.200 --> 00:57:32.990
and it's exactly what the Finder does.

00:57:32.990 --> 00:57:36.950
And so it's a great way
to mimic the Finder.

00:57:38.030 --> 00:57:42.440
So there's some relevant sessions here.

00:57:42.460 --> 00:57:46.080
Localization is on Thursday.

00:57:46.130 --> 00:57:50.230
Designing icons is on Friday.

00:57:50.350 --> 00:57:54.720
Core Foundation and the bundle APIs for
accessing bundle contents on Friday.

00:57:54.720 --> 00:57:58.130
A couple of project builder sessions,
unfortunately, were yesterday and today.

00:57:58.190 --> 00:58:00.620
And finally, if you want to learn more
about shield remodulation,

00:58:00.700 --> 00:58:03.300
be sure to catch Star Trek:
Voyager's final episode

00:58:03.310 --> 00:58:05.240
right here tonight at 8:30.