WEBVTT

00:00:00.680 --> 00:00:07.600
out of their busy afternoon to
attend the Directory Services talk.

00:00:07.600 --> 00:00:12.860
in the Mac OS X Server presentation,
you might have heard a

00:00:12.910 --> 00:00:13.790
little bit more about.

00:00:15.740 --> 00:00:18.320
I'll be talking and later on I'll
be inviting up a coworker of mine,

00:00:18.320 --> 00:00:24.590
Jason Townsen, who will give you a little
more detail on developing a

00:00:24.590 --> 00:00:24.590
Directory plug-in and a demo.

00:00:24.830 --> 00:00:28.620
What we're going to cover today
is what are Directory Services?

00:00:28.770 --> 00:00:32.630
How are we using
Directory Services in Apple software?

00:00:33.130 --> 00:00:35.300
What do the APIs look like?

00:00:35.400 --> 00:00:36.970
What's plug-in development look like?

00:00:36.980 --> 00:00:40.400
We'll give you a little demo and then
hopefully cover some questions and

00:00:40.400 --> 00:00:42.570
answers at the end of the session.

00:00:42.750 --> 00:00:46.200
The concept of Directory Services arose
about three years ago when my

00:00:46.200 --> 00:00:49.620
management asked me to figure
out what Apple's directory story

00:00:49.620 --> 00:00:52.500
was moving forward for Mac OS X Server.

00:00:52.550 --> 00:00:56.450
And one of the key pieces of feedback we
had from our customers was they no longer

00:00:56.450 --> 00:00:59.400
wanted to use just an Apple proprietary
database like users and groups.

00:00:59.400 --> 00:01:02.900
They wanted at least the option to
integrate with an existing or perhaps

00:01:02.950 --> 00:01:04.800
a proprietary directory system.

00:01:04.930 --> 00:01:08.510
So the concept is relatively simple:
allow Apple software

00:01:08.550 --> 00:01:10.150
to use customer data.

00:01:10.770 --> 00:01:13.210
The implementation,
all of us are engineers in

00:01:13.210 --> 00:01:16.260
the room or have seen this,
engineers draw boxes,

00:01:16.300 --> 00:01:17.260
is fairly straightforward.

00:01:17.260 --> 00:01:20.740
We're going to build an abstraction API,
we're going to put Apple services

00:01:20.740 --> 00:01:23.920
on top of that abstraction,
and that abstraction will

00:01:23.920 --> 00:01:26.180
grant access to customer data.

00:01:26.890 --> 00:01:29.520
The architecture,
a little more flushed out.

00:01:29.790 --> 00:01:32.800
We have Apple software
based on Directory Services.

00:01:32.870 --> 00:01:36.980
We have developer software that
could be based on Directory Services.

00:01:36.980 --> 00:01:40.800
And we provide plug-ins to two
Directory Services that Apple provides.

00:01:40.800 --> 00:01:43.150
The primary Directory Service in
Mac OS X is NetInfo,

00:01:43.150 --> 00:01:44.780
and that's our default plug-in.

00:01:44.800 --> 00:01:47.780
We also provide read-only
access to LDAPv2.

00:01:47.840 --> 00:01:49.980
And part of the reason some
of you are in the audience,

00:01:49.980 --> 00:01:52.000
hopefully, is so that you can develop a
Directory Access plug-in for a

00:01:52.000 --> 00:01:56.800
Directory Service that you can make
money on or possibly help your site.

00:01:58.160 --> 00:02:02.000
The runtime of the API leverages
the Mac OS X architecture.

00:02:02.000 --> 00:02:06.350
A Directory Service client using
Directory Service API calls

00:02:06.350 --> 00:02:07.790
into a Mac OS X framework.

00:02:08.030 --> 00:02:11.000
That framework uses Mach IPC to
communicate with the daemon.

00:02:11.000 --> 00:02:14.000
The daemon then talks to plug-ins
to handle various requests.

00:02:14.000 --> 00:02:16.000
The reply comes back up through Mach IPC.

00:02:16.000 --> 00:02:19.500
It's very secure and leverages
the Mac OS X architecture.

00:02:20.450 --> 00:02:21.640
Status since last year.

00:02:21.640 --> 00:02:23.680
I've given this talk now,
I think this is my third year

00:02:23.680 --> 00:02:26.160
up on stage talking about this,
so it'll be familiar if you were

00:02:26.160 --> 00:02:27.410
here the previous couple of years.

00:02:27.440 --> 00:02:28.860
Hopefully this is new for some of you.

00:02:28.860 --> 00:02:30.570
What have we done since last year?

00:02:30.790 --> 00:02:33.740
Directory Access APIs are
included in Mac OS X Desktop.

00:02:33.740 --> 00:02:35.370
This is not a server-only technology.

00:02:35.380 --> 00:02:37.310
You can use Directory Services in
the Desktop.

00:02:38.040 --> 00:02:40.360
They are located in the
system library frameworks,

00:02:40.360 --> 00:02:41.940
directory service.framework.

00:02:42.070 --> 00:02:45.510
The API manifests itself
in 5C header files.

00:02:45.550 --> 00:02:50.810
Going over header files is
laborious and sometimes boring,

00:02:50.850 --> 00:02:51.440
so they're there.

00:02:51.440 --> 00:02:52.800
I'd encourage you to review them.

00:02:52.800 --> 00:02:55.500
The Directory plug-in APIs are
included in functionally

00:02:55.610 --> 00:02:57.010
the Desktop and the Server.

00:02:57.010 --> 00:02:59.400
This is something you can
use in either location,

00:02:59.500 --> 00:03:03.230
although the Server leverages them
more heavily than the Desktop does.

00:03:03.240 --> 00:03:04.680
There's also an SDK.

00:03:04.830 --> 00:03:07.240
The term SDK is a
little over-explanatory.

00:03:08.040 --> 00:03:10.040
It's overused.

00:03:10.040 --> 00:03:12.260
What we have is a collection of some
sample code and some helper code.

00:03:12.270 --> 00:03:14.600
That's available from Tom Weier.

00:03:14.600 --> 00:03:18.230
Everything you need to actually develop
and use Directory Services is already

00:03:18.230 --> 00:03:19.900
in Mac OS X with developer tools.

00:03:19.900 --> 00:03:22.560
We are writing some sample code,
so the SDK includes the sample

00:03:22.560 --> 00:03:26.600
code and the documentation
in one convenient place.

00:03:26.830 --> 00:03:29.950
What's new since last year is we
have the Directory Setup application,

00:03:29.960 --> 00:03:32.100
which we only alluded to last year.

00:03:32.100 --> 00:03:33.700
You'll be getting a demo of that later.

00:03:33.700 --> 00:03:34.700
We have a search policy.

00:03:34.700 --> 00:03:35.620
We've received some feedback.

00:03:35.800 --> 00:03:39.700
Directory Services embodies the concept
of a search policy for authentication.

00:03:39.700 --> 00:03:42.780
What directories do we look into when
the OS wants to authenticate a user?

00:03:43.320 --> 00:03:46.820
We've also added a contact search policy,
which we think could be integrated

00:03:46.820 --> 00:03:48.280
into PIMs or email clients.

00:03:48.280 --> 00:03:50.670
That search policy is
configured separately and

00:03:50.670 --> 00:03:52.340
could search public databases.

00:03:52.360 --> 00:03:55.180
It provides a lightweight way
for you to provide a fine user

00:03:55.180 --> 00:03:57.450
functionality into your applications.

00:03:57.460 --> 00:03:59.980
We will also be releasing, via the SDK,
DS Wrappers,

00:03:59.980 --> 00:04:03.010
which is some C++ sample code that
was developed inside of the group

00:04:03.090 --> 00:04:06.570
that makes it a little easier to
approach the Directory Service APIs.

00:04:06.580 --> 00:04:09.780
All of that will be bundled
up and made available.

00:04:09.780 --> 00:04:11.180
Contact Tom Weyer.

00:04:11.180 --> 00:04:12.760
I think we'll post it to the website.

00:04:13.280 --> 00:04:14.690
Okay.

00:04:15.320 --> 00:04:17.200
What is Directory Setup?

00:04:17.200 --> 00:04:19.690
Well, Directory Services come out of the
box and the first thing you need

00:04:19.690 --> 00:04:22.200
to know is if you're using NetInfo,
you don't need to do a thing.

00:04:22.200 --> 00:04:23.200
It just works.

00:04:23.200 --> 00:04:25.700
Out of the box,
no one needs to visit Directory Setup,

00:04:25.700 --> 00:04:27.400
no one needs to modify anything.

00:04:27.400 --> 00:04:29.720
Directory Setup is for those
clients that wish to use a

00:04:29.720 --> 00:04:31.280
directory other than NetInfo.

00:04:31.280 --> 00:04:34.550
And Directory Setup allows
you to control what directory

00:04:34.550 --> 00:04:36.620
systems Mac OS X interacts with.

00:04:36.660 --> 00:04:38.500
It's located in Applications Utilities.

00:04:39.330 --> 00:04:41.800
You can enable and disable
individual directory plug-ins.

00:04:41.880 --> 00:04:44.360
Right now there's only two,
the NetInfo and the LDAP.

00:04:44.450 --> 00:04:47.150
If third parties add more,
this is where you as a system

00:04:47.170 --> 00:04:49.830
administrator would turn those
third party plug-ins on or off.

00:04:49.900 --> 00:04:52.550
And it also provides the ability
for you to put up your own human

00:04:52.550 --> 00:04:54.440
interface for configuring your plug-in.

00:04:54.500 --> 00:04:56.880
You'll see more about that
later and I believe after this

00:04:56.880 --> 00:04:58.360
I have a sample screenshot.

00:04:58.360 --> 00:05:01.540
Yes, if you look at the screen,
this is a screenshot from Mac OS X.

00:05:01.540 --> 00:05:03.600
The lock is in the
lower left-hand corner.

00:05:03.600 --> 00:05:04.770
This is a secure thing.

00:05:04.770 --> 00:05:07.900
Only the system administrator
can change these settings.

00:05:08.550 --> 00:05:10.930
And we provide the two standard plug-ins,
NetInfo and LDAP.

00:05:11.050 --> 00:05:13.830
If you wrote a third party
plug-in or developed a plug-in,

00:05:13.830 --> 00:05:14.920
it would be listed here.

00:05:15.040 --> 00:05:18.510
The user could select your plug-in
and click on the Configure button

00:05:18.510 --> 00:05:20.110
there in the bottom center.

00:05:20.110 --> 00:05:23.700
And that would launch a human interface
or Cocoa or Carbon application that

00:05:23.700 --> 00:05:26.930
you wrote which puts up your own user
interface for configuring your plug-in.

00:05:26.940 --> 00:05:30.140
The three tabs across
the top of Services,

00:05:30.180 --> 00:05:32.690
Authentication and Contacts.

00:05:32.730 --> 00:05:34.730
The Services are for
controlling the plug-ins.

00:05:34.730 --> 00:05:37.340
Authentication controls the
authentication search policy.

00:05:37.880 --> 00:05:42.300
allows the user to configure
the contacts search policy.

00:05:43.100 --> 00:05:44.450
What do the APIs include?

00:05:44.580 --> 00:05:47.140
They include full
read/write capabilities.

00:05:47.270 --> 00:05:49.980
You can do, if your Directory plug-in
supports read/write,

00:05:50.060 --> 00:05:53.000
you can do anything with a particular
Directory through these APIs.

00:05:53.000 --> 00:05:56.450
Mac OS X Server's administration
software is based on these APIs for

00:05:56.450 --> 00:05:58.000
reading and writing NetInfo.

00:05:58.000 --> 00:06:00.650
The API offers the notion of simple,
complex,

00:06:00.650 --> 00:06:04.000
and custom authentication methods,
proof of identity.

00:06:04.000 --> 00:06:07.200
So if you have a custom authentication
method that your particular

00:06:07.460 --> 00:06:10.400
Directory system supports,
you can publish it and come up with

00:06:10.400 --> 00:06:12.000
a scheme that clients could use it.

00:06:12.000 --> 00:06:16.990
The Directory APIs are standard
C API and they're accessible from any

00:06:16.990 --> 00:06:19.990
runtime other than classic on Mac OS X.

00:06:20.050 --> 00:06:22.000
So a MachO binary, a Cocoa app,
a Carbon app.

00:06:22.000 --> 00:06:25.960
We have a variety of applications
calling Directory Services.

00:06:26.000 --> 00:06:29.020
We have the
Mac OS X Server administration software,

00:06:29.020 --> 00:06:31.000
which is a Carbon application.

00:06:31.000 --> 00:06:32.980
The Directory Setup calls Directory APIs.

00:06:33.000 --> 00:06:36.000
That's a MachO binary Cocoa application.

00:06:36.000 --> 00:06:38.070
And Directory Services calls itself,
which is running more

00:06:38.100 --> 00:06:39.000
at the positive layer.

00:06:39.000 --> 00:06:41.000
So we're fairly confident you
can call the Directory Services.

00:06:41.130 --> 00:06:44.350
We call the Directory Service API from
pretty much anywhere

00:06:44.400 --> 00:06:46.160
except classic on Mac OS X.

00:06:47.010 --> 00:06:50.300
Part of the Directory Services provides
an abstraction for accessing.

00:06:50.300 --> 00:06:52.200
It also provides an
abstraction for the data.

00:06:52.200 --> 00:06:53.880
And this is where we get
some of the most questions.

00:06:53.900 --> 00:06:55.400
So this year we've added this slide.

00:06:55.400 --> 00:06:57.240
Hopefully we'll do more next year.

00:06:57.240 --> 00:06:59.960
But the abstraction that
Directory Service presents is a notion

00:06:59.980 --> 00:07:01.660
of directory nodes at the top level.

00:07:01.660 --> 00:07:03.920
And those are groups
or collections of data.

00:07:03.920 --> 00:07:06.460
If you had multiple
LDAP servers configured,

00:07:06.600 --> 00:07:09.990
each one would manifest itself
as a single directory node in the

00:07:09.990 --> 00:07:12.300
Directory Service Abstraction API.

00:07:13.120 --> 00:07:14.370
Records come underneath nodes.

00:07:14.540 --> 00:07:16.300
Records are contained within nodes.

00:07:16.310 --> 00:07:17.970
They consist of names and types.

00:07:17.970 --> 00:07:20.620
Attribute types with the
data and attribute values

00:07:20.620 --> 00:07:22.280
come under attribute types.

00:07:22.360 --> 00:07:24.260
We're going to go into that in
more detail in the next slides.

00:07:26.420 --> 00:07:27.300
Directory Nodes.

00:07:27.300 --> 00:07:29.990
Each Directory Node is published
by a plug-in and a single plug-in.

00:07:29.990 --> 00:07:32.200
A plug-in can register
zero or more nodes.

00:07:32.200 --> 00:07:35.320
You as a plug-in developer can register
as many Directory Nodes as you want that

00:07:35.320 --> 00:07:37.050
you want to grant clients access to.

00:07:37.060 --> 00:07:39.580
Hopefully you're matching that
to some reality of some kind.

00:07:39.580 --> 00:07:42.040
But when someone opens a
Directory Node using the

00:07:42.040 --> 00:07:45.070
Directory Service API,
it will dispatch to your plug-in and

00:07:45.170 --> 00:07:48.960
you will then be responsible for all
calls regarding that Directory Node.

00:07:49.520 --> 00:07:54.030
API calls to access Directory Nodes
from a client level are DSOpenDirNode,

00:07:54.140 --> 00:07:57.360
DSGetDirNodeList, FindDirNodes,
and CloseDirNodes.

00:07:57.360 --> 00:07:58.520
They're relatively straightforward.

00:07:58.520 --> 00:08:00.620
So you as an API client,
if you wanted to work with a

00:08:00.660 --> 00:08:03.540
particular LDAP Directory Node,
you would call OpenDirNode and now

00:08:03.540 --> 00:08:05.240
you're talking to an LDAP server.

00:08:05.240 --> 00:08:09.530
The important point is it doesn't matter
whether you're talking to an LDAP server,

00:08:09.600 --> 00:08:13.390
an ActiveX server, or a NetInfo server,
OpenDirNode gets you the session

00:08:13.520 --> 00:08:17.180
with that Directory Server regardless
of what the protocol is.

00:08:17.200 --> 00:08:19.480
An example path of a Directory Node.

00:08:19.480 --> 00:08:23.260
The directory plug-in would
be /ldapv2/ldap.company.com.

00:08:23.260 --> 00:08:25.710
That's how we configure
our LDAP sessions.

00:08:25.750 --> 00:08:28.480
So they are multi-path
and they are hierarchical.

00:08:28.580 --> 00:08:31.420
So a directory plug-in can
represent a hierarchical

00:08:31.420 --> 00:08:34.260
Directory System into Directory Services.

00:08:34.730 --> 00:08:35.180
Records.

00:08:35.320 --> 00:08:36.780
Records reside in Directory Nodes.

00:08:36.800 --> 00:08:40.410
They consist of at least one
name and exactly one type.

00:08:40.420 --> 00:08:42.810
A record cannot simultaneously
be a user and a group.

00:08:42.850 --> 00:08:44.860
Maybe it can in some directories,
but not in the

00:08:44.860 --> 00:08:46.370
Directory Service abstraction.

00:08:46.370 --> 00:08:49.250
Examples of a record
name would be John Smith,

00:08:49.280 --> 00:08:50.110
Jay Smith.

00:08:50.210 --> 00:08:51.940
The important thing is
the at least one name.

00:08:51.940 --> 00:08:54.880
Directory Services supports the
notion of multiple names per record.

00:08:54.880 --> 00:08:58.200
And a sample record type is KDS,
Standard Record Type Users.

00:08:58.200 --> 00:09:00.860
We have standard types defined
for obvious record types,

00:09:00.890 --> 00:09:04.680
users, groups, printers, AFP servers,
web servers, whatever you use.

00:09:04.700 --> 00:09:08.180
The records that you need to access can
be listed inside of a Directory Node.

00:09:08.280 --> 00:09:11.820
API calls to access
records are DSOpenRecord,

00:09:12.040 --> 00:09:15.760
DSGetRecordList, DSCreateRecord,
and DSCloseRecord.

00:09:15.920 --> 00:09:19.370
There are more than that,
but that's some samples.

00:09:19.950 --> 00:09:20.690
Attribute types.

00:09:20.820 --> 00:09:22.520
Attribute types are
contained within records,

00:09:22.620 --> 00:09:26.010
and these are essentially the descriptors
of what type of data you're fetching.

00:09:26.020 --> 00:09:29.550
These are UID, home directory,
email address, phone number,

00:09:29.550 --> 00:09:32.600
any type of data is represented
as an attribute type.

00:09:32.640 --> 00:09:34.140
They're contained within records.

00:09:34.140 --> 00:09:39.900
Each attribute type can
contain zero or more values.

00:09:39.940 --> 00:09:43.520
An example attribute types
are KDSN adder record name,

00:09:43.520 --> 00:09:47.280
KDSN adder home directory,
and KDS1 adder password.

00:09:47.420 --> 00:09:49.940
The naming convention in
the API is consistent.

00:09:49.940 --> 00:09:52.300
The KDSN attribute record
name is that means that

00:09:52.300 --> 00:09:54.180
typically that's a multi-value.

00:09:54.180 --> 00:09:56.340
There are N instances of a record name.

00:09:56.340 --> 00:10:00.610
The KDS1 attribute password is that
means in general you can expect that that

00:10:00.710 --> 00:10:03.110
attribute type would only have one value.

00:10:03.110 --> 00:10:04.700
This is not enforced.

00:10:04.750 --> 00:10:08.960
It should help you as a plug-in
developer and help you as a client

00:10:08.960 --> 00:10:09.920
know how many values you have.

00:10:09.940 --> 00:10:12.340
There are many different
pieces of data to expect for

00:10:12.340 --> 00:10:13.870
a particular attribute type.

00:10:13.870 --> 00:10:18.630
API calls used to access attribute
types are get attribute entry,

00:10:18.690 --> 00:10:20.870
get record attribute info.

00:10:20.870 --> 00:10:22.570
There are more than that.

00:10:22.640 --> 00:10:23.550
Attribute values.

00:10:23.800 --> 00:10:26.800
These are the actual blobs of data once
you get down through the hierarchy.

00:10:26.800 --> 00:10:28.430
You've opened your directory node.

00:10:28.430 --> 00:10:29.680
You've opened your record.

00:10:29.730 --> 00:10:32.100
You've found the attribute
type you're interested in,

00:10:32.100 --> 00:10:33.260
the phone number.

00:10:33.260 --> 00:10:34.750
Where do I get the list of values?

00:10:34.780 --> 00:10:36.480
Each instance of a phone number.

00:10:36.480 --> 00:10:38.000
Those are attribute values.

00:10:38.050 --> 00:10:39.910
Attribute values are contained
within the attribute.

00:10:39.940 --> 00:10:44.210
Attribute values contain the raw
data specified by the attribute type.

00:10:44.290 --> 00:10:48.020
Again, the attribute type can lead
you into expecting a certain

00:10:48.020 --> 00:10:49.640
type of data and format.

00:10:49.640 --> 00:10:54.040
The API calls used to access attribute
values are dsget attribute value,

00:10:54.040 --> 00:10:59.080
dsget record attribute value by index,
and dsget record attribute value by ID.

00:10:59.080 --> 00:11:02.460
These are all useful techniques and
had to be used in all of our software.

00:11:02.460 --> 00:11:05.150
Come see me more if you want
to know the differences between

00:11:05.150 --> 00:11:06.590
those types of attributes.

00:11:06.620 --> 00:11:09.920
In particular,
directory services is data agnostic.

00:11:09.940 --> 00:11:13.660
We treat all attribute
values as binary blobs.

00:11:13.700 --> 00:11:16.440
If your directory is capable
of storing binary data,

00:11:16.440 --> 00:11:18.140
we'll just pass it right
on through to your plug-in.

00:11:18.140 --> 00:11:20.810
If your directory is incapable
of storing binary data,

00:11:20.860 --> 00:11:23.740
it would be up to the plug-in to
make some sort of modification

00:11:23.740 --> 00:11:26.840
to the data before it's stored
if it received binary data.

00:11:26.840 --> 00:11:30.530
Directory services is data agnostic,
although we provide the tools for

00:11:30.530 --> 00:11:32.620
you to discover and utilize the data.

00:11:33.900 --> 00:13:00.900
[Transcript missing]

00:13:01.630 --> 00:13:03.750
The API Model Usage.

00:13:03.940 --> 00:13:07.680
The general model is that this allows,
by Directory Setup and this architecture,

00:13:07.680 --> 00:13:12.500
allows Apple software to be configured to
use Directory of the customer's choice.

00:13:12.500 --> 00:13:15.490
We only ask for standard record
types and their attributes.

00:13:15.500 --> 00:13:18.500
Those standard record types
and attributes are documented

00:13:18.500 --> 00:13:20.500
in the Directory Services and
Server Documentation.

00:13:20.500 --> 00:13:24.480
This enables Apple and third-party
software to access any Directory system.

00:13:24.510 --> 00:13:26.500
By now you should understand that.

00:13:26.820 --> 00:13:31.440
Customers configure Directory access via
the Search Policy and Directory Setup.

00:13:32.190 --> 00:13:34.340
Data Access by OS and Applications.

00:13:34.340 --> 00:13:38.040
What type of data is typically
requested by the server software

00:13:38.040 --> 00:13:39.800
and by the desktop software?

00:13:39.800 --> 00:13:41.860
Well, obviously,
users and groups is a big winner.

00:13:41.860 --> 00:13:44.990
But the Mac OS X desktop also
requests mount information

00:13:44.990 --> 00:13:49.200
for specific file systems,
NFS and AFP, home directory information.

00:13:49.210 --> 00:13:51.430
And in some cases,
host information comes out

00:13:51.430 --> 00:13:54.250
of NetInfo or could come out
of LDAP by this architecture.

00:13:54.250 --> 00:13:56.510
And that would be host
name and IP address.

00:13:56.510 --> 00:13:58.660
The previous Mac OS X Server session,
if you weren't there,

00:13:58.660 --> 00:13:59.930
I'd recommend you get the tape.

00:14:00.720 --> 00:14:05.610
Greg Vaughn covered the issue that a
lot of the configuration information in

00:14:05.620 --> 00:14:10.550
Mac OS X that normally is stored in /etc
on Unix has been migrated to NetInfo.

00:14:10.570 --> 00:14:14.260
Well, that's an accurate and
inaccurate statement.

00:14:14.260 --> 00:14:16.930
I'll say really what it's been
migrated to is Directory Services.

00:14:16.940 --> 00:14:21.050
So now information or config
information stored in Mac OS X or

00:14:21.060 --> 00:14:25.360
required by Mac OS X can be
accessed via Directory Services.

00:14:27.130 --> 00:14:28.680
Apple plug-in usage and development.

00:14:28.730 --> 00:14:30.620
Apple's developed three
basic Access plug-ins.

00:14:30.690 --> 00:14:31.800
We've developed NetInfo.

00:14:31.800 --> 00:14:35.740
That's our primary and
default Directory system.

00:14:35.740 --> 00:14:38.340
LDAPv2,
read-only for Internet compatibility.

00:14:38.340 --> 00:14:40.220
We get a lot of mileage
out of the LDAPv2.

00:14:40.220 --> 00:14:41.520
We can talk to Active Directory.

00:14:41.520 --> 00:14:42.380
We can talk to Novell.

00:14:42.420 --> 00:14:43.370
We can talk to OpenLDAP.

00:14:43.410 --> 00:14:44.500
We can talk to iPlanet.

00:14:45.180 --> 00:14:47.910
So if you can find an
LDAP server to access your data,

00:14:47.920 --> 00:14:51.180
you can get Directory Services to
access the data as well.

00:14:51.180 --> 00:14:54.530
We also implemented the search policy
as a Directory Services plug-in.

00:14:54.540 --> 00:14:57.020
That's another thing that gives us a
lot of confidence in this architecture.

00:14:57.020 --> 00:14:59.950
We use the architecture
to solve our own problems.

00:14:59.980 --> 00:15:02.710
Apple software products are
being tested with these plug-ins.

00:15:02.820 --> 00:15:05.630
So if you're developing a plug-in
and you can make your plug-in behave

00:15:05.630 --> 00:15:08.040
like any one of these plug-ins,
there's a very good chance

00:15:08.080 --> 00:15:09.480
that it will work unmodified.

00:15:12.160 --> 00:15:16.370
Apple Desktop and Server Software uses
the architecture to provide customer

00:15:16.370 --> 00:15:19.320
directory flexibility and we're
really looking for developer plug-ins.

00:15:19.320 --> 00:15:21.700
If you want to develop a
plug-in for Directory Services,

00:15:21.700 --> 00:15:24.100
contact Tom Weir, contact me.

00:15:24.100 --> 00:15:25.100
Please get to us.

00:15:25.100 --> 00:15:30.080
You're going to need some help,
but we're going to provide it for you

00:15:30.080 --> 00:15:30.080
and hopefully it'll be pretty simple.

00:15:30.280 --> 00:15:39.480
At this time, I'd like to invite
Jason Townsen up on stage.

00:15:39.480 --> 00:15:39.860
He's going to go into some of
the details of what it takes

00:15:39.860 --> 00:15:39.860
to develop a Directory plug-in,
and I'll be back later

00:15:39.860 --> 00:15:39.860
for a wrap-up and Q&A.

00:15:45.840 --> 00:15:47.000
Thanks.

00:15:47.110 --> 00:15:50.100
So I'm going to talk about
Directory plug-ins and the

00:15:50.280 --> 00:15:53.680
main points we're going to
talk about are the structure,

00:15:53.680 --> 00:15:57.700
how do you test your plug-in once
you've got it up and running,

00:15:57.730 --> 00:16:01.010
and then a little more technical,
what are the entry points and

00:16:01.130 --> 00:16:06.270
callbacks that you're interested
in as a Directory Services plug-in?

00:16:07.600 --> 00:16:09.790
So plug-ins are dynamically
loaded code modules.

00:16:09.800 --> 00:16:12.030
They're actually CF plug-ins.

00:16:12.040 --> 00:16:16.260
So we use Core Foundation's
CF load function to load them.

00:16:17.200 --> 00:16:19.510
and you have to provide
a set of entry points.

00:16:19.550 --> 00:16:24.200
We'll go into detail on
what each of those is later.

00:16:24.510 --> 00:16:28.540
And then you can call back into
Directory Services to do various things

00:16:28.540 --> 00:16:35.390
like primarily registering the nodes
that you're going to provide service on.

00:16:38.000 --> 00:16:40.710
So where does your plug-in
live in the system?

00:16:40.750 --> 00:16:44.190
All of the plug-ins that
Apple provides are stored inside

00:16:44.190 --> 00:16:47.130
the Directory Service framework
with that big,

00:16:47.130 --> 00:16:49.760
long,
nasty path you see at the top there.

00:16:49.760 --> 00:16:53.970
But that is generally considered
the place for only Apple plug-ins.

00:16:53.970 --> 00:16:57.260
For your third-party plug-ins,
you should put them in

00:16:57.260 --> 00:16:59.720
Library Directory Services plug-ins.

00:16:59.800 --> 00:17:04.060
And that's guaranteed to be a writable
part of the file system for root,

00:17:04.060 --> 00:17:07.400
and that's where we
will load plug-ins from.

00:17:07.910 --> 00:17:11.300
The other thing to keep in mind
is you need to put the .dsplug

00:17:11.300 --> 00:17:15.770
extension on your bundle so that
Directory Service daemon will load it.

00:17:17.240 --> 00:17:19.640
Here's an example plug-in bundle.

00:17:19.750 --> 00:17:21.480
You don't really need to
worry too much about this.

00:17:21.510 --> 00:17:25.850
If you use Project Builder,
it's just a matter of creating a

00:17:25.940 --> 00:17:30.050
CF plug-in and it will deal with
all the packaging issues for you.

00:17:30.100 --> 00:17:33.650
The main thing you need to be
concerned about is the plist file,

00:17:33.650 --> 00:17:39.080
which has some of the metadata
that we use to load your plug-in

00:17:39.110 --> 00:17:43.290
and also to determine what app
we should use to configure your

00:17:43.290 --> 00:17:46.950
plug-in when you're showing up in
Directory Setup and the user needs

00:17:47.000 --> 00:17:49.990
to configure how your plugin works.

00:17:51.320 --> 00:17:55.240
So we have some sample code we've
talked about before that is sort of a

00:17:55.240 --> 00:17:58.110
starting point for you with your plug-in.

00:17:58.390 --> 00:18:04.060
and it shows you stubs that you
would use for all the API calls.

00:18:04.060 --> 00:18:07.320
So basically all you need to do
is fill in the functionality that

00:18:07.320 --> 00:18:11.770
you're providing and we handle
setting up all of the callbacks and

00:18:11.770 --> 00:18:15.190
show you how to use those as well.

00:18:17.200 --> 00:18:18.610
So, configuring your plug-in.

00:18:18.650 --> 00:18:21.960
There's two keys in your plist
file that are important for you

00:18:21.960 --> 00:18:27.510
to set up for your plug-in to be
configurable in Directory Setup.

00:18:27.650 --> 00:18:32.840
The first one is CFBundle config avail
and the second is CFBundle config file.

00:18:32.920 --> 00:18:35.340
So, each of them is optional.

00:18:35.390 --> 00:18:37.430
Basically, what will happen if,
for example,

00:18:37.430 --> 00:18:41.520
you just want to provide a text file,
you can provide only the CFBundle config

00:18:41.520 --> 00:18:45.700
file key and we will just launch that
text file with the default text editor,

00:18:45.830 --> 00:18:47.330
probably TextEdit.

00:18:47.410 --> 00:18:49.240
Alternately,
you could have an application

00:18:49.240 --> 00:18:52.070
that you launch and just
provide CFBundle config avail.

00:18:52.130 --> 00:18:54.270
If you provide both,
then we will launch the application

00:18:54.300 --> 00:18:58.180
you specify with the file you specify.

00:18:58.210 --> 00:19:01.850
And all this happens when your plug-in
is selected in Directory Setup and

00:19:01.870 --> 00:19:06.500
you click the Configure button,
then we do this launching as appropriate.

00:19:07.500 --> 00:19:10.600
So once you've got your
plug-in up and running,

00:19:10.620 --> 00:19:12.010
how do you test it?

00:19:12.130 --> 00:19:16.050
There is code on the system,
a lot of code on Mac OS X Server and even

00:19:16.050 --> 00:19:20.600
personal file sharing on 10 Desktop uses
Directory Services extensively,

00:19:20.710 --> 00:19:25.280
but it's probably better to
start out a little bit-- oh,

00:19:25.610 --> 00:19:27.870
sorry, wrong slide.

00:19:28.200 --> 00:19:32.230
So first, you've got to copy your plug-in
in to the appropriate location in

00:19:32.230 --> 00:19:34.570
Library Directory Services plug-ins.

00:19:34.680 --> 00:19:37.390
The other point to keep in mind is that

00:19:38.690 --> 00:19:41.300
You need to kill and restart
the Directory Service process.

00:19:41.400 --> 00:19:42.880
This is a daemon process.

00:19:43.200 --> 00:19:48.340
There's no GUI per se for it,
so the easiest way to do this is just

00:19:48.450 --> 00:19:50.600
use the terminal and kill and restart it.

00:19:50.600 --> 00:19:53.390
And you need to be root
in order to do that,

00:19:53.390 --> 00:20:00.930
because Directory Service needs to run
as root to access its log files and such.

00:20:01.770 --> 00:20:05.580
Then you can take a look at the log
file and library logs to see that your

00:20:05.580 --> 00:20:11.610
plug-in loaded successfully and we keep
other logging information in there.

00:20:12.130 --> 00:20:15.840
So, what I was getting into before,
I was getting a little

00:20:15.840 --> 00:20:17.380
bit ahead of myself.

00:20:17.380 --> 00:20:20.090
When you're testing your plug-in,
it's better, instead of throwing a full

00:20:20.090 --> 00:20:24.300
client at it to begin with,
it's better to actually control the

00:20:24.300 --> 00:20:28.720
client side yourself as well and
use the APIs that you've provided.

00:20:28.820 --> 00:20:32.990
So you can test a subset of
the Directory Service API that

00:20:33.020 --> 00:20:34.440
you've created to that point.

00:20:34.560 --> 00:20:37.250
For example,
you can leave out all of the right

00:20:37.250 --> 00:20:41.970
portions and just test that you
can find a user with get record

00:20:41.990 --> 00:20:47.260
list and you can do a DS do dirt
node auth to authenticate that user

00:20:47.410 --> 00:20:52.220
rather than having to support all the
functions that a client would use.

00:20:52.220 --> 00:20:55.780
Because sometimes,
even for a fairly simple operation,

00:20:55.850 --> 00:20:58.470
there might be APIs in there
that you haven't implemented yet.

00:20:58.620 --> 00:21:01.500
So just because things don't work
right off the bat doesn't mean

00:21:01.500 --> 00:21:02.860
that you haven't done things right.

00:21:02.860 --> 00:21:06.800
You just need to add all of
the appropriate calls in.

00:21:06.800 --> 00:21:12.110
So we have a sample tool that has
these calls in there called DSTestTool

00:21:12.110 --> 00:21:14.070
that comes with our SDK sample code.

00:21:14.080 --> 00:21:17.380
And you can easily modify that
or use what's already there.

00:21:17.380 --> 00:21:20.960
It does simple things
like look for a user,

00:21:20.960 --> 00:21:23.400
create a user, and so on.

00:21:23.430 --> 00:21:25.890
And you could also develop
your own test tool,

00:21:25.890 --> 00:21:30.560
especially if your plug-in is going
to provide specific functionality

00:21:30.560 --> 00:21:34.160
that's outside of the standard,
like custom auth methods,

00:21:34.180 --> 00:21:38.690
then you might want to just develop
your own tool to test those things out.

00:21:39.770 --> 00:21:42.600
So, what are the entry points?

00:21:42.850 --> 00:21:43.630
We have Validate.

00:21:43.730 --> 00:21:46.190
This is called once when
your plug-in is loaded.

00:21:46.290 --> 00:21:49.790
The primary purpose of that is to provide
a token to your plug-in that you can

00:21:49.790 --> 00:21:52.750
use later in all of your callbacks.

00:21:52.860 --> 00:21:55.770
So that allows us to recognize
which plug-in is calling

00:21:55.770 --> 00:21:57.710
back into Directory Services.

00:21:58.120 --> 00:22:01.670
We call initialize on your plug-in
after all the plug-ins have loaded.

00:22:01.920 --> 00:22:06.400
This is the point where you would
probably load up your config file or do

00:22:06.400 --> 00:22:11.400
any startup initialization like that,
establish any persistent network

00:22:11.400 --> 00:22:14.000
connections that you might need,
and so on.

00:22:14.000 --> 00:22:18.290
Set plug-in state is called
when your plug-in is enabled or

00:22:18.290 --> 00:22:20.930
disabled from Directory Setup.

00:22:20.990 --> 00:22:24.000
And that'll tell you, okay,
your plug-in's now inactive.

00:22:24.000 --> 00:22:28.130
You can go ahead and close down any
resources that you're using that you

00:22:28.130 --> 00:22:31.970
don't need anymore or bring them back
online if you've been reactivated.

00:22:32.000 --> 00:22:36.920
Process request,
this is where the bulk of the work is.

00:22:36.920 --> 00:22:39.710
You can probably implement
all these other functions,

00:22:39.880 --> 00:22:41.950
you know,
in a couple hours really easily.

00:22:42.040 --> 00:22:44.000
And we've got, you know,
sample implementations.

00:22:44.000 --> 00:22:45.970
We've got some sample
implementations in our sample code.

00:22:46.080 --> 00:22:48.870
But process request is where
all the API calls come through.

00:22:49.000 --> 00:22:53.550
So essentially that's going to look
like a big switch statement that

00:22:53.600 --> 00:22:56.000
looks at what the actual request was.

00:22:56.000 --> 00:22:59.040
And then based on that,
you'll probably hand it off to another

00:22:59.170 --> 00:23:03.000
function to deal with the particular
request that's coming through.

00:23:03.000 --> 00:23:07.410
And we're just stuffing all the
parameters that are coming in into a

00:23:07.520 --> 00:23:10.190
big struct that you need to interpret.

00:23:10.590 --> 00:23:13.980
Finally, shutdown is called just before
Directory Services shuts down.

00:23:14.010 --> 00:23:18.900
So, again, another time to release any
resources that you're using before

00:23:18.900 --> 00:23:22.280
the Directory Service process
goes away or save any changes

00:23:22.280 --> 00:23:24.300
that you might need to save.

00:23:25.650 --> 00:23:28.660
So the other half of it is the callbacks.

00:23:28.660 --> 00:23:33.430
We have DS Register Node,
which is how you publish your nodes.

00:23:33.630 --> 00:23:38.100
The guideline that we suggest you
follow is to prefix the name of

00:23:38.100 --> 00:23:40.730
your node with your plug-in's name.

00:23:40.970 --> 00:23:47.810
So the reason for this is that when
a client makes a dsopender node call,

00:23:48.120 --> 00:23:51.630
We don't know which
plug-in to use for that.

00:23:52.520 --> 00:23:55.650
So if the name starts with the
name of one of the plug-ins,

00:23:55.650 --> 00:23:59.990
so for example, /netinfo/ldapv2 are the
plug-ins that we have,

00:24:00.090 --> 00:24:03.110
then we can directly go to
that plug-in out of our table

00:24:03.430 --> 00:24:05.950
and dispatch directly to you.

00:24:06.350 --> 00:24:08.750
If you give it some other name,
of course there's the

00:24:08.750 --> 00:24:11.470
possibility of collisions,
but the other thing is we have to

00:24:11.710 --> 00:24:14.280
scan through the list of plug-ins
to find one that might handle it.

00:24:14.370 --> 00:24:19.000
And depending upon what operations
the plug-ins do to handle Opener node,

00:24:19.000 --> 00:24:20.790
it can be less efficient.

00:24:21.930 --> 00:24:27.360
DSUnregisterNode is used when you want
to take a node out of the list that

00:24:27.370 --> 00:24:29.000
you're no longer providing service on.

00:24:29.000 --> 00:24:34.430
So if your config file changed and
that LDAP server is no longer there,

00:24:34.560 --> 00:24:36.140
you would use that function.

00:24:36.230 --> 00:24:41.330
And then we have DSDebugLog
to log debugging information.

00:24:41.430 --> 00:24:44.580
That's an aid when you're
developing your plug-in.

00:24:46.310 --> 00:24:49.550
So as I mentioned before,
the Directory Service daemon

00:24:49.550 --> 00:24:51.220
runs as a root process.

00:24:51.220 --> 00:24:52.960
And your plug-in is
considered a trusted entity.

00:24:52.960 --> 00:24:55.530
So you really have to
use your power wisely.

00:24:55.540 --> 00:24:58.800
It's not quite as bad as
working with a kernel,

00:24:58.840 --> 00:25:03.430
but you can really do a lot of damage if
you don't know what you're doing as root.

00:25:03.490 --> 00:25:05.760
So you need to make sure that
you limit your access to the

00:25:05.760 --> 00:25:08.290
system to only what you need.

00:25:08.290 --> 00:25:13.800
And also,
don't do anything on behalf of a

00:25:13.800 --> 00:25:18.560
client that you're expecting the
system to prevent you from doing.

00:25:18.560 --> 00:25:21.970
So in other words,
you're running in a UID zero process.

00:25:22.040 --> 00:25:24.350
So anything you try to
do will probably succeed.

00:25:24.410 --> 00:25:28.900
So if you want to provide
any kind of security,

00:25:29.010 --> 00:25:33.240
then you need to be aware
of that in your plug-in.

00:25:33.240 --> 00:25:36.470
And as I said before also,
you need to be logged in as root or

00:25:36.470 --> 00:25:40.520
at least have a root shell available
to be able to develop a plug-in.

00:25:40.520 --> 00:25:45.140
So this means on Mac OS X desktop
that you'll have to go into NetInfo

00:25:45.140 --> 00:25:55.120
Manager and enable root to get access to
it or use sudo or other tools like that.

00:25:55.120 --> 00:25:55.120
We also restrict

00:25:55.480 --> 00:25:59.290
The plug-in directory,
Library Directory Services plug-ins

00:25:59.290 --> 00:26:00.770
to only root access.

00:26:02.800 --> 00:28:19.000
[Transcript missing]

00:28:19.590 --> 00:28:22.260
So again,
take a look at the sample code on this,

00:28:22.260 --> 00:28:27.340
and that will help you see where the
cleanup calls need to correspond.

00:28:27.340 --> 00:28:31.510
And DSWrappers is a good example
of what you need to do to clean

00:28:31.510 --> 00:28:34.210
up Directory Service structures.

00:28:35.300 --> 00:28:37.860
So, again, if you're interested
in plug-in development,

00:28:38.010 --> 00:28:40.090
please talk to Developer Relations.

00:28:40.140 --> 00:28:45.250
We can help you with this and
we want to help you with that.

00:28:45.320 --> 00:28:48.260
And also, take a look at the API and
plug-in documentation.

00:28:48.260 --> 00:28:50.800
It's actually included with
the 10 developer tools.

00:28:50.840 --> 00:28:52.840
So,
if you've installed 10 developer tools,

00:28:52.840 --> 00:28:53.970
it's on your hard disk already.

00:28:54.070 --> 00:28:55.940
Take a look at it.

00:28:55.950 --> 00:28:59.920
It's very helpful in understanding the
API and we've got all the constants

00:28:59.920 --> 00:29:02.270
and functions in there that you need.

00:29:02.370 --> 00:29:04.000
Also,
if you're going to develop a plug-in,

00:29:04.120 --> 00:29:08.530
you should look at our API and
decide how you're going to map our

00:29:08.540 --> 00:29:10.800
abstraction onto your directory system.

00:29:10.800 --> 00:29:13.400
So,
what is a node in your directory system?

00:29:13.400 --> 00:29:14.850
What is a record?

00:29:14.900 --> 00:29:16.600
And so on.

00:29:19.340 --> 00:29:25.300
Alright, so now we're going to have
a demo of Directory Setup.

00:29:25.300 --> 00:29:28.450
So can we switch over to Demo 1 please?

00:29:34.860 --> 00:29:35.800
It's asleep.

00:29:35.800 --> 00:29:43.210
Can we switch to demo one instead of two?

00:29:43.430 --> 00:29:44.220
Yes.

00:29:44.280 --> 00:29:44.960
Excellent.

00:29:44.960 --> 00:29:45.800
Thank you.

00:29:46.160 --> 00:29:52.850
Okay, so I have here actually
Mac OS X Server on this machine,

00:29:52.910 --> 00:29:55.730
but as we said before,
Directory Setup is also

00:29:56.010 --> 00:29:59.140
part of Mac OS X Desktop.

00:29:59.140 --> 00:30:01.350
So let's take a look at Directory Setup.

00:30:04.000 --> 00:30:06.330
You saw the screenshot earlier.

00:30:06.400 --> 00:30:09.740
Basically, we come up showing you
the list of plug-ins.

00:30:09.740 --> 00:30:12.090
And also, you notice that the
interface came up locked.

00:30:12.260 --> 00:30:16.390
So this means that I need to click
the lock button to unlock it.

00:30:16.400 --> 00:30:19.860
Because what we're doing here
in Directory Setup is actually

00:30:20.280 --> 00:30:22.440
changing who can log into the system.

00:30:22.610 --> 00:30:27.190
So we really don't want anyone doing
that other than an administrator.

00:30:29.450 --> 00:30:33.390
So now that I've unlocked it,
I can make changes.

00:30:33.460 --> 00:30:35.960
We have the ability to configure
NetInfo if you want to bind to a

00:30:35.960 --> 00:30:37.780
NetInfo parent or just use the local.

00:30:37.870 --> 00:30:40.800
Right now we're just using local.

00:30:40.830 --> 00:30:42.930
Alright, let's take a look at LDAP.

00:30:45.710 --> 00:30:51.380
I assure you this was working for
me before the session started.

00:30:51.530 --> 00:30:55.580
So if you configure LDAP,
you get a list of LDAP servers.

00:30:55.670 --> 00:30:57.360
And we can go ahead and add a new server.

00:30:57.590 --> 00:31:04.020
Basically what we do here is we
specify what mappings we want to use.

00:31:04.060 --> 00:31:08.390
So, and also what the
IP address is and so on.

00:31:08.470 --> 00:31:12.490
So, say, test LDAP server.

00:31:13.760 --> 00:31:23.420
You can put in an IP address
or a domain name in that field.

00:31:23.420 --> 00:31:23.420
So I'll just put in an IP address.

00:31:26.790 --> 00:31:29.910
Then we need to set up the mappings
that we're going to use for our

00:31:29.910 --> 00:31:32.770
record types and our attribute types.

00:31:33.660 --> 00:31:39.170
And this is kind of similar to
the way that the TCP control panel

00:31:39.170 --> 00:31:41.190
works or the network setup works.

00:31:41.340 --> 00:31:46.230
Basically, each line of this right text
box represents one mapping,

00:31:46.290 --> 00:31:50.070
but you can have multiple lines,
so you can map things to

00:31:50.130 --> 00:31:51.600
more than one search base.

00:31:51.600 --> 00:31:55.610
For the record types,
we're using search bases as our mapping.

00:31:55.860 --> 00:31:58.400
So you can change these
to whatever you want.

00:31:58.580 --> 00:32:02.900
For the purposes of just
getting the file server working,

00:32:03.060 --> 00:32:06.060
we really only need to
worry about users mapping.

00:32:06.060 --> 00:32:09.040
And we can leave the others there
at their default or delete them.

00:32:09.040 --> 00:32:09.930
It doesn't matter.

00:32:10.000 --> 00:32:12.990
They're not actually necessary.

00:32:13.200 --> 00:32:17.370
We also documented in the 10
server documentation for particular

00:32:17.370 --> 00:32:20.700
services what you would need
to map in Directory Setup to

00:32:20.800 --> 00:32:22.480
use that service with LDAP.

00:32:23.370 --> 00:32:28.830
So then on the data or attribute types,
again, we have a list of our standard

00:32:28.840 --> 00:32:31.740
types and you can map those to--

00:32:32.010 --> 00:32:38.140
The types in LDAP that you
want to use and again it's

00:32:38.140 --> 00:32:38.140
multiple mapping so each line

00:32:38.320 --> 00:32:39.750
is one mapping.

00:32:39.810 --> 00:32:44.340
So I could do, for example,
UID and CN for record name.

00:32:44.470 --> 00:32:51.690
And then for real name I could do UID.

00:32:52.400 --> 00:32:58.800
Actually, I really wanted to do CN,
so that's common name.

00:32:58.800 --> 00:33:01.430
It's LDAP's abbreviation for

00:33:02.090 --> 00:33:09.620
Then password, if you're using OpenLDAP,
for example, or some LDAP server that has

00:33:09.620 --> 00:33:14.150
a crypt password stored in it,
then we can use that in the password

00:33:14.150 --> 00:33:17.320
mapping and actually do a crypt
auth without sending a clear text

00:33:17.320 --> 00:33:19.140
password out over the network.

00:33:19.160 --> 00:33:22.610
So if your LDAP server has a crypt
password stored for its users,

00:33:22.610 --> 00:33:25.300
it's a good idea to map that.

00:33:25.370 --> 00:33:28.130
If you don't,
then we can still do LDAP bind,

00:33:28.130 --> 00:33:31.430
but the security is better
if you're using crypt.

00:33:31.670 --> 00:33:35.950
Then the final tab here is Access,
which allows you to configure whether

00:33:35.950 --> 00:33:40.720
you want to use anonymous access to
talk to the LDAP server or specify

00:33:40.720 --> 00:33:42.540
a distinguished name and password.

00:33:42.610 --> 00:33:45.620
If you need to bind to the
server to do anything with it,

00:33:45.620 --> 00:33:47.730
then this is important to set up.

00:33:47.770 --> 00:33:51.230
So, for example, with Active Directory,
you would need to use this.

00:33:51.280 --> 00:33:55.660
You can also specify the timeouts that
you're going to use and the port number

00:33:55.800 --> 00:33:58.150
if you're using a non-standard port.

00:33:59.000 --> 00:34:00.830
And then once you've
set up that LDAP server,

00:34:00.840 --> 00:34:02.290
it shows up in your list.

00:34:02.350 --> 00:34:03.540
You can enable it.

00:34:03.580 --> 00:34:06.690
Let me see if I can bring up
Server Admin to show you some

00:34:06.690 --> 00:34:11.270
more of what Mac OS X Server is
doing with Directory Services.

00:34:20.200 --> 00:34:24.360
Alright, so this is the server
admin for Mac OS X Server.

00:34:24.360 --> 00:34:28.020
It might look slightly familiar to you
if you've worked with Apple Share IP,

00:34:28.020 --> 00:34:29.240
recent versions.

00:34:29.240 --> 00:34:34.610
So the primary integration I wanted
to show you is in Users and Groups.

00:34:34.610 --> 00:34:37.760
So all of the Users and
Groups information

00:34:38.550 --> 00:34:42.580
is Access through Directory Services and
when we're populating the

00:34:42.580 --> 00:34:45.820
local NetInfo database,
we use Directory Services to

00:34:45.820 --> 00:34:47.730
put that information in.

00:34:47.870 --> 00:34:52.000
So if I create a user, for example, then

00:34:54.150 --> 00:34:56.940
That would be using
Directory Service calls

00:34:57.000 --> 00:35:00.250
to set the password,
to set all the attributes that

00:35:00.330 --> 00:35:03.370
our services need to be in there,
and so on.

00:35:09.600 --> 00:35:11.640
And now once I've created a user there,
again,

00:35:11.640 --> 00:35:15.700
it's available to all the services.

00:35:15.700 --> 00:35:19.930
The other thing we have in Users and
Groups is the ability to use

00:35:21.050 --> 00:35:23.240
"To search on the search path,
for example.

00:35:23.340 --> 00:35:27.650
So now that I've added that user,
I can see that they actually

00:35:27.650 --> 00:35:29.190
are on the search path."

00:35:29.610 --> 00:35:30.600
Okay.

00:35:30.720 --> 00:35:35.940
So basically this just illustrates
that the Directory Service APIs provide

00:35:35.940 --> 00:35:42.390
everything you need even to do
a full GUI like this and both

00:35:42.740 --> 00:35:44.320
create the data and access it.

00:35:44.590 --> 00:35:47.600
Although, you know,
for Directory Services clients,

00:35:47.650 --> 00:35:51.360
you probably would mostly be
interested in just getting at the

00:35:51.390 --> 00:35:55.900
user names and doing authentication,
but you can also populate the

00:35:55.900 --> 00:35:55.900
database too if you need to.

00:35:56.310 --> 00:36:01.680
I think I'll go ahead and stop
there since Directory Setup

00:36:01.730 --> 00:36:03.300
doesn't seem to be happy today.

00:36:03.300 --> 00:36:08.970
I'll go ahead and turn it back over
to David O'Rourke to finish up.

00:36:15.460 --> 00:36:19.900
I think we took a risk booting
off the FireWire drive.

00:36:19.900 --> 00:36:22.400
For those of you who know it's
not technically supported.

00:36:22.590 --> 00:36:24.020
That ends the demo.

00:36:24.200 --> 00:36:25.400
We're going to do a wrap-up.

00:36:25.420 --> 00:36:27.400
Whoops, I have this upside down.

00:36:27.780 --> 00:36:28.880
Directory Services wrap-up.

00:36:28.940 --> 00:36:31.350
So Directory Services and
other app or technologies.

00:36:31.360 --> 00:36:33.940
This is a lower level technology,
but it can be used to build

00:36:33.940 --> 00:36:35.400
some high level solutions.

00:36:35.400 --> 00:36:38.920
But it complements other technologies and
it provides common framework for higher

00:36:39.030 --> 00:36:41.000
level software to access directory data.

00:36:41.000 --> 00:36:43.230
Another complement to
this is the NSL talk,

00:36:43.230 --> 00:36:44.800
Network Service Location.

00:36:44.800 --> 00:36:47.090
I'd recommend highly that you all
attend that tomorrow if you're

00:36:47.090 --> 00:36:48.300
interested in Directory Services.

00:36:48.300 --> 00:36:50.090
There's some exciting
integration going on there.

00:36:50.100 --> 00:36:55.010
The opportunities for developers are to
directory enable your client software.

00:36:55.100 --> 00:36:57.750
As you saw, you could use the
Mac OS X Server Administration to

00:36:57.750 --> 00:36:59.500
populate a local NetInfo database.

00:36:59.500 --> 00:37:02.740
And then using the Directory APIs,
your application would inherit

00:37:02.740 --> 00:37:05.500
all the users set up by
Mac OS X Server Administration.

00:37:05.500 --> 00:37:10.200
If the user had configured the
search policy to access LDAP,

00:37:10.200 --> 00:37:12.220
your application would access LDAP.

00:37:12.350 --> 00:37:14.550
So there's a lot of benefit
in you enabling that.

00:37:14.730 --> 00:37:16.380
In addition,
you could provide alternatives

00:37:16.530 --> 00:37:19.390
to Apple software by either
providing a competing web

00:37:19.400 --> 00:37:23.650
server or competing file server,
but still leverage the technology,

00:37:23.650 --> 00:37:26.490
the setup technology,
and you can provide value by

00:37:26.490 --> 00:37:28.300
adding a directory plug-in.

00:37:28.300 --> 00:37:31.010
Directory plug-in is
clearly an opportunity.

00:37:31.010 --> 00:37:35.500
We're actively looking for anybody
willing to develop a directory plug-in.

00:37:35.500 --> 00:37:38.600
We think there's opportunities
here for people to either promote

00:37:38.600 --> 00:37:42.200
their own directory service or to
access existing infrastructure.

00:37:42.530 --> 00:37:49.590
And again,
the Mac OS X Server Administration client

00:37:49.600 --> 00:37:50.800
uses Directory Services.

00:37:50.800 --> 00:37:55.400
If your plug-in is read right,
there's integration there that our

00:37:55.400 --> 00:37:58.850
Mac OS X Administration software
could actually be used to set

00:37:58.860 --> 00:38:00.590
up users in your directory.

00:38:00.600 --> 00:38:05.000
So the key message is we're using this
architecture for our own software.

00:38:05.210 --> 00:38:08.540
The Directory Service APIs brings
directory access to all of

00:38:08.600 --> 00:38:08.600
Apple's software platforms.

00:38:08.600 --> 00:38:12.300
Customers are leveraging this API.

00:38:12.300 --> 00:38:14.890
We already have some
customers using LDAP.

00:38:14.890 --> 00:38:17.500
There's some very large installations.

00:38:17.500 --> 00:38:19.460
There's one customer in
particular that has over 2

00:38:19.460 --> 00:38:20.800
million users in an LDAP server.

00:38:20.800 --> 00:38:26.200
They took the Mac OS X Server package,
unpacked it, configured their LDAP server

00:38:26.200 --> 00:38:28.450
in Directory Setup,
added it to the search policy,

00:38:28.450 --> 00:38:31.030
and promptly logged on as any
one of those users that they

00:38:31.130 --> 00:38:32.600
actually knew the password of.

00:38:32.600 --> 00:38:36.420
And so opportunities exist for
you to base your application on

00:38:36.470 --> 00:38:37.800
Directory Services or develop
your own directory services.

00:38:37.800 --> 00:38:40.290
services or develop a plugin.

00:38:40.440 --> 00:38:59.660
and David O'Rourke, Jason Townsen,
and David O'Rourke, Jason Townsen,

00:38:59.660 --> 00:38:59.660
and David O'Rourke,