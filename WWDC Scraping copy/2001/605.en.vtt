WEBVTT

00:00:03.360 --> 00:00:04.900
Hi, thank you for joining us.

00:00:04.900 --> 00:00:07.400
I'm glad to see a good number of
you found your way back over to

00:00:07.400 --> 00:00:10.300
the conference center to catch
up with the rest of our sessions.

00:00:10.300 --> 00:00:14.390
Our next session is going to
be moving to WebObjects 5,

00:00:14.390 --> 00:00:18.300
so I'd like to introduce
Melissa Turner from the engineering team

00:00:18.300 --> 00:00:21.090
to come up and start the procession off.

00:00:32.000 --> 00:00:34.040
As Tony told you, my name's Melissa.

00:00:34.040 --> 00:00:37.520
I'm one of the WebObjects
deployment engineers,

00:00:37.520 --> 00:00:40.760
and I'm going to be your
presenter for the next hour or so.

00:00:40.760 --> 00:00:42.580
First,
we might as well get it out of the way.

00:00:42.580 --> 00:00:43.550
Yes, I'm an engineer.

00:00:43.550 --> 00:00:44.340
Yes, I'm female.

00:00:44.340 --> 00:00:45.510
Sometimes it happens.

00:00:45.630 --> 00:00:48.950
Thank you.

00:00:51.440 --> 00:00:57.470
This is the session 6.05,
Moving to WebObjects, and...

00:00:57.820 --> 00:01:00.050
I hit the wrong direction.

00:01:00.310 --> 00:01:03.040
This session assumes that you
have some knowledge of WebObjects.

00:01:03.040 --> 00:01:07.840
We're primarily going to concentrate
on some of the conversion issues for

00:01:07.840 --> 00:01:15.270
those of you who have a WebObjects
4.5 or WebObjects 4.5.1 application

00:01:15.270 --> 00:01:15.270
that you want to move to WebObjects 5.

00:01:15.600 --> 00:01:18.500
We're going to cover some of the
benefits of moving to WebObjects 5.

00:01:18.500 --> 00:01:21.080
We're going to cover how you
would go about migrating an

00:01:21.080 --> 00:01:22.610
application to WebObjects 5.

00:01:22.610 --> 00:01:25.340
And we're going to talk about some of
the new improvements and some of the

00:01:25.340 --> 00:01:28.500
features in the WebObjects 5 Frameworks.

00:01:28.500 --> 00:01:30.450
I am not going to cover
anything in-depth.

00:01:30.510 --> 00:01:32.500
I'm not going to cover
EOF or Java Client.

00:01:32.500 --> 00:01:35.500
We have entire sessions devoted to those.

00:01:35.660 --> 00:01:39.420
Some of them,
I believe there's one following this.

00:01:39.510 --> 00:01:40.500
I recommend it highly.

00:01:40.500 --> 00:01:43.420
But remember,
anything that I don't cover is

00:01:43.420 --> 00:01:45.700
going to be covered elsewhere.

00:01:47.140 --> 00:01:48.260
What is WebObjects 5?

00:01:48.360 --> 00:01:50.780
This is a question we've
gotten from several people.

00:01:50.820 --> 00:01:54.840
WebObjects 5 is essentially
WebObjects 4.5.1 ported to Java.

00:01:54.980 --> 00:01:56.750
It has the same feature set.

00:01:56.880 --> 00:01:59.760
It's got essentially the
same APIs as WebObjects 4.5.

00:01:59.760 --> 00:02:02.800
There's a few exceptions
that we'll talk about later.

00:02:03.100 --> 00:02:05.830
On Windows,
it uses the 4.5 developer tools

00:02:06.040 --> 00:02:07.600
that you're all familiar with.

00:02:07.600 --> 00:02:10.800
We have a new project builder,
as you all know, on 10,

00:02:10.800 --> 00:02:12.600
and we have integrated with that.

00:02:12.710 --> 00:02:17.420
EOModeler, WoBuilder,
and the rule editor have been aquified,

00:02:17.440 --> 00:02:20.200
but other than that,
they're pretty much the same.

00:02:20.370 --> 00:02:22.710
For those of you who want
to do split deployments,

00:02:22.710 --> 00:02:26.730
the WebObjects 5 monitoring tools are
capable of dealing with and managing

00:02:26.770 --> 00:02:32.430
WebObjects 4.5.1 applications,
and we have some new features.

00:02:33.130 --> 00:02:35.390
What are some of the benefits
of moving to WebObjects 5?

00:02:35.550 --> 00:02:36.810
Well, there's a number of them.

00:02:36.900 --> 00:02:39.600
The big one for a lot of you,
and I know this has been a concern,

00:02:39.600 --> 00:02:44.010
is that WebObjects 4.5 used
an older version of the JDK.

00:02:44.180 --> 00:02:44.710
That's over.

00:02:44.710 --> 00:02:49.310
WebObjects 5 uses the JDK 1.3.1,
actually, I believe.

00:02:49.320 --> 00:02:53.140
For those of you who are on Windows,
you'll notice that we do

00:02:53.140 --> 00:02:55.730
still install a 1.1.8 JRE.

00:02:55.730 --> 00:02:58.330
This is purely for the use of our tools.

00:02:58.330 --> 00:02:59.860
You should not use it.

00:02:59.860 --> 00:03:02.800
You should just pretend it isn't there.

00:03:05.060 --> 00:03:09.110
The big thing about moving to the
JDK 1.3 is that it allows you to

00:03:09.110 --> 00:03:13.630
integrate with a lot of the new and
third-party tools that are out there.

00:03:13.640 --> 00:03:16.190
Development environments, debuggers,
optimizers,

00:03:16.190 --> 00:03:19.030
a lot of tools that you didn't have
access to when you were writing

00:03:19.030 --> 00:03:20.740
in the bridge Java environment.

00:03:20.740 --> 00:03:24.750
And it makes it a lot easier for you
to integrate with third-party products,

00:03:24.860 --> 00:03:26.720
because as we all know,
there's a lot of mindshare

00:03:26.760 --> 00:03:27.640
in the Java world.

00:03:27.640 --> 00:03:31.270
There's a lot of people producing
packages to do everything from

00:03:31.310 --> 00:03:33.390
control robots to do reporting.

00:03:33.680 --> 00:03:35.500
You now have access to
all of those packages.

00:03:35.500 --> 00:03:38.340
And because we've moved to JDBC,
you'll also have extended

00:03:38.340 --> 00:03:39.740
database connectivity.

00:03:39.740 --> 00:03:42.610
This means that you no longer have
to wait for a database company to

00:03:42.640 --> 00:03:45.920
come out with a set of native client
libraries on whichever platform

00:03:45.920 --> 00:03:47.480
it is you'd like to deploy on.

00:03:47.520 --> 00:03:50.920
Most database companies
ship Type 4 JDBC drivers,

00:03:50.920 --> 00:03:55.960
which plug into our JDBC adapter,
and things should work much more easily.

00:03:58.150 --> 00:04:02.420
You can do development on Mac OS X or
on Windows as you could in 4.5.1,

00:04:02.420 --> 00:04:06.340
and we also support deployment
on those platforms plus Solaris.

00:04:06.450 --> 00:04:09.760
One of the other big features of
WebObjects 5 is that it's much easier

00:04:09.760 --> 00:04:13.400
to develop on one platform and then move
your application to another platform.

00:04:13.400 --> 00:04:15.840
There's no issues with
remembering your LD library path,

00:04:15.970 --> 00:04:18.240
there's no dynamic
shared libraries issues,

00:04:18.340 --> 00:04:20.000
things go much more smoothly.

00:04:20.080 --> 00:04:23.100
And we've had some
performance improvements.

00:04:23.200 --> 00:04:26.540
Ernie talked a little bit about
this a couple of days ago.

00:04:26.690 --> 00:04:30.190
We did some benchmarking
comparing WebObjects 4.5.1

00:04:30.190 --> 00:04:35.000
with WebObjects 5 on Windows,
Mac OS X, and Solaris.

00:04:35.000 --> 00:04:38.240
And lo and behold,
we discovered that we did a good

00:04:38.240 --> 00:04:40.240
job of converting to pure Java.

00:04:40.600 --> 00:04:43.500
We're faster on all platforms.

00:04:43.570 --> 00:04:47.340
On Mac OS X,
we're about 22% faster than a comparable

00:04:47.390 --> 00:04:50.100
app written in pure Objective-C.

00:04:50.100 --> 00:04:51.890
This is not comparing
against Bridge Java.

00:04:51.890 --> 00:04:53.260
This is pure Objective-C.

00:04:53.530 --> 00:04:56.540
We're about 22% faster on Mac OS X.

00:04:56.610 --> 00:04:58.360
We're even better on Windows.

00:04:58.360 --> 00:05:00.190
We're about 51% faster.

00:05:00.380 --> 00:05:03.800
And on Solaris, a platform that I know
a lot of you deploy on,

00:05:03.930 --> 00:05:05.740
we're over 180% faster.

00:05:05.740 --> 00:05:10.180
So, we're very happy with that,
and we think you will be, too.

00:05:13.860 --> 00:05:17.420
So now that we told you that, yes,
there are some serious benefits

00:05:17.420 --> 00:05:19.660
to moving to WebObjects 5,
a lot of you are going

00:05:19.660 --> 00:05:22.300
to have the question,
should I convert or not?

00:05:22.300 --> 00:05:25.590
And people who should convert are
people who have Objective-C or

00:05:25.590 --> 00:05:28.860
WebScript apps that are very
early in their development phase,

00:05:28.860 --> 00:05:32.780
or people who have existing bridge
Java projects that they may be in

00:05:32.780 --> 00:05:35.400
deployment or they may be in development.

00:05:35.400 --> 00:05:38.560
It's very easy to port
bridge Java to pure Java.

00:05:39.400 --> 00:05:42.990
And anyone who requires access
to more Java standards or to

00:05:43.120 --> 00:05:47.840
third-party products should also
consider moving to WebObjects 5.

00:05:48.280 --> 00:05:53.820
People who should not consider,
or at least should be seriously

00:05:54.330 --> 00:05:57.850
contemplative about moving to
WebObjects 5 are people who have

00:05:57.850 --> 00:06:01.040
Objective-C projects that use
a lot of low-level Objective-C.

00:06:01.040 --> 00:06:03.880
If you're using categories,
if you're using posers,

00:06:03.980 --> 00:06:07.000
if you have Object-C message
send anywhere in your code,

00:06:07.000 --> 00:06:10.080
you may want to think twice
about migrating because it means

00:06:10.080 --> 00:06:13.310
you're doing things with the
Objective-C dynamic runtime that

00:06:13.310 --> 00:06:15.060
cannot be done easily in Java.

00:06:15.560 --> 00:06:18.250
If you've got a lot of basic C code,
if you're using lots of

00:06:18.250 --> 00:06:20.350
third-party C libraries,
you're doing a lot of

00:06:20.350 --> 00:06:22.580
nasty pointer manipulation,
you may also want to think

00:06:22.580 --> 00:06:25.140
twice about it because that's
a more complicated conversion.

00:06:25.140 --> 00:06:29.020
And if you've got an app that's already
in production and it's not being updated,

00:06:29.020 --> 00:06:31.890
there is an old engineering rule
of thumb that I learned when

00:06:31.890 --> 00:06:33.660
I first started programming.

00:06:33.660 --> 00:06:35.570
It's, if it ain't broke, don't fix it.

00:06:35.640 --> 00:06:38.620
If you're happy with your application,
it's making you money,

00:06:38.620 --> 00:06:41.180
you don't need to change it,
by all means, don't.

00:06:43.150 --> 00:06:44.900
Next question,
once you've decided to convert,

00:06:44.900 --> 00:06:46.460
is how do you go about converting?

00:06:46.460 --> 00:06:51.370
We provide a tool called Java Converter
that basically allows you to...

00:06:52.740 --> 00:06:58.190
Simply and programmatically convert
your WebObjects application from

00:06:58.220 --> 00:07:00.810
4.5 to a pure Java environment.

00:07:00.900 --> 00:07:05.300
On Windows, this is located at
nextroot/library/webobjects/java/applic

00:07:05.380 --> 00:07:07.660
ations/javaconverter.woa.

00:07:07.660 --> 00:07:11.570
On Mac OS X, this is at
system/library/webobjects/java/applic

00:07:11.570 --> 00:07:13.300
ations/javaconverter.woa.

00:07:13.370 --> 00:07:15.510
It claims to be a .woa,
but it really isn't.

00:07:15.550 --> 00:07:17.840
We're just leveraging the packaging.

00:07:18.060 --> 00:07:21.100
You run it from a shell
inside the .woa directory,

00:07:21.100 --> 00:07:23.300
and it's a fairly simple thing to do.

00:07:23.300 --> 00:07:27.760
You enter your command script plus
the full path of the project directory

00:07:27.760 --> 00:07:30.300
or files that you want to convert,
and you hit return,

00:07:30.300 --> 00:07:33.600
and we take over from there.

00:07:33.710 --> 00:07:35.880
If you want to migrate
using the Java converter,

00:07:35.880 --> 00:07:37.520
there's a few ways you can do it.

00:07:38.840 --> 00:07:41.300
If you want to convert
on a file-by-file basis,

00:07:41.300 --> 00:07:44.590
you can take an individual C,
Objective-C, or WebScript file and

00:07:44.680 --> 00:07:45.760
convert that to pure Java.

00:07:45.760 --> 00:07:49.640
Or you can convert an entire
project directory at once.

00:07:49.640 --> 00:07:52.310
Or if you're feeling a
little bit more constrained,

00:07:52.310 --> 00:07:55.070
you have code that's possibly
in the nastier areas,

00:07:55.080 --> 00:07:59.580
you may want to consider doing a
hybrid project and migrating first to

00:07:59.790 --> 00:08:03.990
bridge Java on a file-by-file basis,
and then once you have all of those done,

00:08:03.990 --> 00:08:05.260
moving them to pure Java.

00:08:05.260 --> 00:08:08.570
Or you may want to move your entire
project first to bridge Java,

00:08:08.580 --> 00:08:09.930
and then to pure Java.

00:08:09.940 --> 00:08:13.750
This could give those of you who have
lots of categories and posers and

00:08:13.810 --> 00:08:17.120
that kind of thing a little bit more
time to do your conversion without

00:08:17.120 --> 00:08:18.900
having to disrupt your application.

00:08:20.540 --> 00:08:22.730
Some of the advantages of using
Java Converter that we don't

00:08:22.730 --> 00:08:26.790
touch your original source code,
we lay down a parallel set of

00:08:26.790 --> 00:08:29.600
files as the ones we converted.

00:08:29.740 --> 00:08:32.610
If there's a conversion
problem in the converter,

00:08:32.610 --> 00:08:35.180
we clearly describe
the error in your code,

00:08:35.230 --> 00:08:38.940
in the new code, as a JC error,
a JC warning, or JC info.

00:08:38.940 --> 00:08:42.900
We also print the transcript,
a little warning that something happened,

00:08:42.900 --> 00:08:46.240
so you can just go off and search
and find out what the problem was.

00:08:46.340 --> 00:08:48.430
We've tested the Java Converter
against most of the

00:08:48.430 --> 00:08:50.180
Objective-C frameworks we've got.

00:08:50.180 --> 00:08:55.240
We've tested it against WAF,
we tested it against EOF, EO Control,

00:08:55.240 --> 00:08:55.240
EO Access.

00:08:55.390 --> 00:08:59.400
We converted many of
our examples using it.

00:08:59.400 --> 00:09:02.600
We've done a bunch of internal
code that you will never see.

00:09:02.600 --> 00:09:05.750
It's extensible with customized top
scripts if there's something that you

00:09:05.750 --> 00:09:08.880
need it to do that it doesn't already do,
and it's a lot faster

00:09:08.880 --> 00:09:10.830
than manual conversion.

00:09:11.620 --> 00:09:16.950
What I can say is that when we did,
before we had the Java converter,

00:09:17.060 --> 00:09:20.740
we were converting by hand,
and we were managing to do about 300,

00:09:20.740 --> 00:09:22.060
350 lines a day.

00:09:22.220 --> 00:09:25.560
Once we got the Java converter in play,
that jumped up to 3,000 to

00:09:25.680 --> 00:09:27.500
4,000 lines of code a day.

00:09:27.710 --> 00:09:31.270
You can spend an awful lot of
time moving brackets around.

00:09:31.510 --> 00:09:33.570
Some of the limitations, though,
are that we cannot convert

00:09:33.570 --> 00:09:34.420
your EO model file.

00:09:34.420 --> 00:09:38.400
You're going to have to go in and
manually change the adapter and possibly

00:09:38.400 --> 00:09:39.800
add or remove a little bit of data.

00:09:39.800 --> 00:09:43.410
We don't change any of the APIs that
you've put in your WAD files or in

00:09:43.410 --> 00:09:45.460
any of your other archive files.

00:09:45.460 --> 00:09:48.240
And if you have Objective-C code
that relies on posers,

00:09:48.280 --> 00:09:51.570
categories, that kind of thing,
we cannot fully convert it.

00:09:51.640 --> 00:09:54.180
We can create helper classes that
will take the place of your category,

00:09:54.180 --> 00:09:56.160
but you're going to have
to go through your code.

00:09:56.520 --> 00:09:59.570
And in any place where you were calling
a method that was in the category,

00:09:59.570 --> 00:10:02.140
you're going to have to redirect
it to use the helper class.

00:10:02.140 --> 00:10:06.480
C code, as I've mentioned,
we can change the C function

00:10:06.530 --> 00:10:10.370
invocation to a method call,
but we can't translate whatever's

00:10:10.400 --> 00:10:11.840
on the other end of the method.

00:10:11.840 --> 00:10:14.540
And we can't determine which new
API you should be hooking up to,

00:10:14.540 --> 00:10:16.720
so you're going to have
to do that by yourselves.

00:10:16.720 --> 00:10:21.450
And the conversion process does
take you about 80% of the way there,

00:10:21.450 --> 00:10:22.280
though.

00:10:22.280 --> 00:10:25.260
And I'm sure a lot of you are going,
yeah, right, it can't be that easy.

00:10:25.260 --> 00:10:26.440
So I'm going to call for help.

00:10:26.500 --> 00:10:29.870
I'm going to call Francois Jouel up,
and he's going to convert one of the

00:10:29.880 --> 00:10:34.520
examples that we shipped with WebObjects
451 right here on stage in front of you.

00:10:42.100 --> 00:10:44.750
Hello, welcome everybody.

00:10:44.750 --> 00:10:47.340
So, some people know me already.

00:10:47.340 --> 00:10:50.000
I already did last year's
presentation on Java Converter

00:10:50.000 --> 00:10:53.040
and I will attempt the app.

00:10:53.150 --> 00:10:54.100
Impossible today.

00:10:54.100 --> 00:10:58.990
I will convert here with
no net to protect me.

00:10:58.990 --> 00:11:00.990
An application we are shipping.

00:11:00.990 --> 00:11:03.250
Well, we used to ship in 4.5.

00:11:08.040 --> 00:11:09.000
So, do we have the window?

00:11:09.000 --> 00:11:10.400
Okay.

00:11:10.540 --> 00:11:18.320
So, as Melissa said,
Java Converter is a terminal-based tool.

00:11:18.320 --> 00:11:22.770
And I am going to go execute it.

00:11:22.770 --> 00:11:25.560
I have here a ThinkMovie application.

00:11:25.560 --> 00:11:28.510
I cannot open it because
it's a 4.5 application.

00:11:28.510 --> 00:11:30.950
But trust me, it's here.

00:11:30.950 --> 00:11:35.120
I'm going to go in the project directory.

00:11:36.540 --> 00:11:39.420
Here is the ThinkMovie application.

00:11:42.000 --> 00:11:46.510
Now, in my Java Applications folder,
I have the Java Converter application.

00:11:46.590 --> 00:11:50.980
And inside the .joa, as Melissa said,
there is...

00:11:52.870 --> 00:11:57.800
The Java Converter Tool So to
use the Java Converter Tool,

00:11:57.800 --> 00:12:03.990
I just make it point to my
Think Movies application.

00:12:05.590 --> 00:12:07.500
And I have my cofers.

00:12:07.500 --> 00:12:09.500
Cofers?

00:12:09.500 --> 00:12:10.500
Gofers.

00:12:10.640 --> 00:12:11.470
Gofers?

00:12:11.500 --> 00:12:12.920
Yeah.

00:12:20.880 --> 00:12:21.830
Okay, it started.

00:12:22.000 --> 00:12:24.630
Now I can go have a coffee.

00:12:24.630 --> 00:12:26.040
I don't have to type anything.

00:12:26.040 --> 00:12:30.790
It will generate the classes,
the Java classes.

00:12:30.800 --> 00:12:37.230
It will create a new project,
copy everything in a new directory so

00:12:37.230 --> 00:12:39.290
that it doesn't stomp on existing files.

00:12:39.290 --> 00:12:42.810
And that's it.

00:12:45.890 --> 00:12:52.720
Well, I think that's it,
but only 80% of the work is done.

00:12:52.750 --> 00:12:58.590
I'm going to do manually the last
20%. So here I have file merge.

00:12:59.200 --> 00:13:01.090
Do most of you know what FileMerge is?

00:13:01.100 --> 00:13:07.480
It's a very powerful UI-based GIF tool.

00:13:08.780 --> 00:13:12.290
And I'm going to compare
what I had originally and the

00:13:12.290 --> 00:13:14.900
output of the Java converter.

00:13:24.590 --> 00:13:26.500
Okay, I have both of them here.

00:13:26.500 --> 00:13:33.200
So you notice that it
changed quite a bit of files.

00:13:33.230 --> 00:13:38.200
But if I look at these files,
there is mainly one difference.

00:13:38.210 --> 00:13:40.570
And we'll look at the files
where there are more differences,

00:13:40.660 --> 00:13:47.600
but for example, over the file with just
one difference here.

00:13:48.810 --> 00:13:53.270
All the Java converter needed to
do is to change import statements.

00:13:53.270 --> 00:13:54.770
No big deal.

00:13:56.470 --> 00:13:59.240
Let's look at a more complicated file.

00:13:59.300 --> 00:14:00.400
What does this one do?

00:14:00.400 --> 00:14:07.740
Just some package renaming
here on the second change.

00:14:07.740 --> 00:14:11.690
And this one is even more complicated.

00:14:15.050 --> 00:14:21.390
So here we have the case of an
API change that Java Converter

00:14:21.600 --> 00:14:24.870
Did for you, actually,
this instead of returning a component,

00:14:24.910 --> 00:14:25.920
we now return an interface.

00:14:28.110 --> 00:14:32.150
And here are some warnings that
Java Converter put in for you.

00:14:32.160 --> 00:14:34.940
And in this case,
the warnings are not very

00:14:34.940 --> 00:14:40.090
useful because the syntax was
correct in the first place.

00:14:40.800 --> 00:14:45.060
And here there were some changes that
Melissa will talk more about later on.

00:14:45.060 --> 00:14:48.400
NSGogorianDate has been
replaced by NSTimestamp.

00:14:48.490 --> 00:14:53.300
And all the APIs and class names
have been changed accordingly.

00:14:57.270 --> 00:15:01.010
More on this time stamp changes.

00:15:01.060 --> 00:15:02.160
OK, and you can trust me.

00:15:02.160 --> 00:15:04.680
Most of these are just the same.

00:15:06.320 --> 00:15:07.300
Right?

00:15:07.300 --> 00:15:08.300
You trust me?

00:15:08.300 --> 00:15:10.300
Yes.

00:15:10.300 --> 00:15:16.110
Okay, so now the next step is to
open the new converted project

00:15:16.260 --> 00:15:19.300
in the new project builder.

00:15:19.300 --> 00:15:24.660
So I'm going to click on "import
pb.projects". This is one of the

00:15:24.670 --> 00:15:27.300
wizard that project builder comes with.

00:15:27.400 --> 00:15:33.940
And I'm going to point it
to the converted project.

00:15:43.470 --> 00:15:45.400
Are people coughing on purpose?

00:15:45.400 --> 00:15:49.420
Okay, so that's it.

00:15:49.550 --> 00:15:52.990
I have my classes here.

00:15:53.110 --> 00:15:57.480
My components, everything is ready,
even the frameworks are here.

00:15:57.590 --> 00:16:00.430
So one good thing about
conversion is that it enables

00:16:00.440 --> 00:16:02.240
you to do a lot of cleanup.

00:16:02.270 --> 00:16:05.820
Because Objective-C and the
bridge were really lenient,

00:16:05.840 --> 00:16:09.560
you could go along and have
a lot of inconsistencies.

00:16:09.560 --> 00:16:12.980
And you'll notice that most of
the changes I'm going to go and

00:16:12.980 --> 00:16:15.180
do now are to fix inconsistencies.

00:16:15.380 --> 00:16:18.370
Here's a framework that we
didn't use that was there listed,

00:16:18.430 --> 00:16:20.740
so I'm just going to remove it.

00:16:22.130 --> 00:16:31.360
One framework I do need to add
is the JDBC Adaptal Framework.

00:16:36.400 --> 00:16:38.920
Here.

00:16:38.920 --> 00:16:47.020
And I'm not as good as Steve Heyman,
so I'll just select all the targets.

00:16:51.490 --> 00:16:55.160
Here, I put it at the right place,
it looks better.

00:16:55.270 --> 00:16:56.640
What else?

00:16:56.720 --> 00:17:00.190
I have a new model and I'm going
to open it because I know I need

00:17:00.190 --> 00:17:01.950
to do some changes in there.

00:17:03.580 --> 00:17:07.820
Java Converter does not
fix the e-models for you.

00:17:07.820 --> 00:17:10.980
I will go and switch adapter.

00:17:13.110 --> 00:17:14.460
This is the JDBC adapter.

00:17:14.520 --> 00:17:16.070
You have the non-adapter.

00:17:16.070 --> 00:17:18.490
I don't recommend using the non-adapter.

00:17:18.490 --> 00:17:19.470
Use the JDBC one.

00:17:19.550 --> 00:17:20.990
It won't take you far.

00:17:38.550 --> 00:17:43.740
Now here, another thing that I found that
was inconsistent in this model

00:17:43.740 --> 00:17:47.060
is that we had a lot of packages,
business logic server,

00:17:47.060 --> 00:17:52.980
and we never referenced these
packages anywhere in our project.

00:17:52.980 --> 00:17:57.190
So why keep,
and actually Java will refuse to run

00:17:57.190 --> 00:18:00.350
our app if we keep these packages.

00:18:00.360 --> 00:18:04.350
So I'm going to get rid of them.

00:18:15.310 --> 00:18:21.430
Now if I inspect one of these,
at this point I should be

00:18:21.470 --> 00:18:23.160
able to go and fetch it.

00:18:26.040 --> 00:18:31.880
My OpenBase database is running
and I can look at entries.

00:18:33.490 --> 00:18:38.660
So, if I go and look... I think
I have something else to fix.

00:18:38.730 --> 00:18:39.700
Yes, here.

00:18:39.700 --> 00:18:45.300
One tricky point in
the EO model is that...

00:18:46.160 --> 00:18:50.980
Most of the number classes
cannot be resolved automatically

00:18:50.980 --> 00:18:53.100
by the JDBC adapter.

00:18:53.100 --> 00:18:56.920
So here you see that the value
type for number is set to an int,

00:18:56.920 --> 00:18:57.100
and that's correct.

00:18:57.100 --> 00:19:00.100
But here for big decimal
we have no value type.

00:19:00.270 --> 00:19:07.600
So this has to be fixed to the capital B.

00:19:08.760 --> 00:19:15.020
This is the type in the model,
this is the type in Java at the

00:19:15.070 --> 00:19:20.400
end when I run the application,
the class, and this is the type,

00:19:20.400 --> 00:19:24.700
the intermediate type set
up by the JDBC adapter.

00:19:24.700 --> 00:19:26.790
If you have questions about that,
I recommend going to the

00:19:26.800 --> 00:19:27.800
advanced EOS session.

00:19:31.260 --> 00:19:33.180
Is there any more of these?

00:19:33.200 --> 00:19:39.200
This number... There is one more,
I have to find it.

00:19:39.200 --> 00:19:43.200
It is... in the movies.

00:19:43.200 --> 00:19:47.200
Number, big decimal, here, this one.

00:19:47.200 --> 00:19:49.110
It needs to be fixed.

00:19:51.100 --> 00:19:52.800
No, I won't forget to save it.

00:19:52.800 --> 00:19:56.180
Leave it open just in
case I forgot something.

00:19:56.180 --> 00:19:58.540
Okay, now I think I can build.

00:19:58.540 --> 00:20:00.720
Let's see what kind of errors I get.

00:20:06.900 --> 00:20:17.200
[Transcript missing]

00:20:21.500 --> 00:20:29.600
[Transcript missing]

00:20:34.950 --> 00:20:40.780
So I'm just walking through it like
you would if you're a developer.

00:20:45.700 --> 00:20:49.190
So I will know the app compiled,
so I'm now starting the

00:20:49.190 --> 00:20:52.150
application from Project Builder.

00:20:52.160 --> 00:20:59.160
And it will start Internet Explorer.

00:21:06.600 --> 00:21:09.640
OK, so here I had an error.

00:21:09.640 --> 00:21:12.770
And I'm going to go try and
figure out what's wrong.

00:21:12.780 --> 00:21:18.040
It's saying that it was not
able to create the page main.

00:21:18.040 --> 00:21:19.370
I can close this one.

00:21:19.380 --> 00:21:22.720
Let me go to the terminal.

00:21:24.540 --> 00:21:29.260
So when you cannot create the main page,
it means it's pretty bad.

00:21:29.260 --> 00:21:33.610
And I know where it is.

00:21:35.700 --> 00:21:38.940
If you remember during
the file merge conversion,

00:21:38.950 --> 00:21:42.480
when I used file merge,

00:21:44.230 --> 00:21:47.340
There was a change
done here on this line.

00:21:47.340 --> 00:21:51.770
And Java Converter is clever enough
to recognize an application and

00:21:51.770 --> 00:21:55.860
to insert a main function so that
the application can be started.

00:21:55.860 --> 00:21:58.400
Except here,
it was not able to recognize it because

00:21:58.410 --> 00:22:01.540
there was a complete package specified.

00:22:01.540 --> 00:22:05.500
It was not clever enough to recognize
that this is actually what application.

00:22:05.580 --> 00:22:09.990
So I need to add this main
function myself by hand.

00:22:27.920 --> 00:22:32.980
So all this main
function does is forward.

00:22:34.500 --> 00:22:40.600
So call the main call to
our own main function.

00:22:40.600 --> 00:22:47.740
I will save and stop that and recompile.

00:23:02.800 --> 00:23:15.200
[Transcript missing]

00:23:19.530 --> 00:23:21.500
It seems to work okay.

00:23:21.500 --> 00:23:26.460
I mean... Boy, I hate this movie.

00:23:28.600 --> 00:23:31.470
I won't enter a review,
but I still hate it.

00:23:31.480 --> 00:23:35.670
Let's add a test.

00:23:35.690 --> 00:23:43.700
See if the features of this app work.

00:23:54.050 --> 00:23:59.220
Okay, so there is another problem,
which is to be expected.

00:23:59.220 --> 00:24:02.190
And the problem is in this...

00:24:02.440 --> 00:24:19.130
New NSDictionary here and the
page is... what page was this?

00:24:19.130 --> 00:24:19.130
A display video page.

00:24:19.130 --> 00:24:19.130
So let's try to look at
this display video page.

00:24:26.450 --> 00:24:29.700
So this Play Video page
doesn't have an NSDictionary,

00:24:29.700 --> 00:24:31.310
but takes a mutable dictionary.

00:24:31.310 --> 00:24:34.250
So I'm just going to go fix that,
and that will be it.

00:24:38.640 --> 00:24:42.100
Once again, I don't know how the bridge
could live with this,

00:24:42.100 --> 00:24:43.880
frankly.

00:24:43.880 --> 00:24:47.940
But pure Java doesn't take it.

00:25:16.400 --> 00:25:37.800
[Transcript missing]

00:25:42.200 --> 00:25:43.440
There.

00:25:43.440 --> 00:25:44.480
Actually, an old one there, too.

00:25:44.480 --> 00:25:47.850
Okay, so that's about all it takes.

00:25:47.920 --> 00:25:51.160
So, as you see, 80% of the work was done.

00:25:51.160 --> 00:25:55.450
The last 20% interesting part was
left to you on most of what we did was

00:25:55.450 --> 00:26:00.490
cleaning up an imperfect model on an
imperfect application in the first place.

00:26:00.490 --> 00:26:03.430
So, as you all write perfect code,
you should have much

00:26:03.430 --> 00:26:06.160
less problems than we do,
even in our examples.

00:26:06.880 --> 00:26:12.890
If I may, I will just do one last thing
and open up again the window

00:26:12.890 --> 00:26:15.790
where I did the conversion.

00:26:15.790 --> 00:26:21.110
And if I just type Java converter,
I see the...

00:26:23.150 --> 00:26:28.260
The set of parameters
that can be passed to it.

00:26:28.330 --> 00:26:32.940
You have a flag to stop the conversion
at the Bridge Java application.

00:26:32.940 --> 00:26:37.320
So if you're converting from
Objective-C to Bridge Java,

00:26:37.330 --> 00:26:40.820
you can do that with this flag.

00:26:40.820 --> 00:26:40.820
You have a flag

00:26:40.960 --> 00:26:46.840
When you are using Objective-C conversion
to specify extra headers,

00:26:46.860 --> 00:26:51.300
to resolve macros and so on,
you can also give special

00:26:51.570 --> 00:26:54.970
instructions to the precompiler.

00:26:55.470 --> 00:26:57.260
And you can specify
your project directory,

00:26:57.260 --> 00:27:02.110
an Objective-C file, a BridgeJava file,
or a WebScript file.

00:27:02.500 --> 00:27:04.930
And then there is a description
of all the other flags.

00:27:04.930 --> 00:27:07.780
So one point I want to make
that Melissa didn't is that

00:27:07.810 --> 00:27:14.040
the bridge Java conversion will
only work on Windows NT because,

00:27:14.110 --> 00:27:21.650
as you know, WebObjects 5 does not run
bridge Java applications.

00:27:21.650 --> 00:27:24.000
And WebObjects 4.5 on Mac OS X does not
run any bridge Java application either.

00:27:24.990 --> 00:27:29.410
So while you're on Windows NT,
you can use Microsoft's

00:27:29.490 --> 00:27:35.710
converter from Java to C#,
and you get a 64% conversion to C#.

00:27:38.100 --> 00:27:39.840
That will be it.

00:27:39.840 --> 00:27:42.670
And give back the mic to Melissa.

00:27:49.900 --> 00:27:50.900
Thanks Francois.

00:27:50.900 --> 00:27:52.960
So as you can see,
most of the problems you're

00:27:52.960 --> 00:27:57.390
going to run across in doing
conversion of applications are,

00:27:57.400 --> 00:28:00.120
well, many of them are going
to be your own fault.

00:28:03.980 --> 00:28:06.860
Now I'm going to talk about what
you're going to see in your code

00:28:06.860 --> 00:28:08.570
after conversion has happened.

00:28:08.650 --> 00:28:11.360
You take the Java converter, you run it,
and as Francois showed you,

00:28:11.360 --> 00:28:13.600
we do some stuff to your original code.

00:28:13.670 --> 00:28:17.140
There's two general classes of
things you'll see afterwards.

00:28:17.140 --> 00:28:19.840
There's stuff we've put in
specifically to help with conversion,

00:28:19.840 --> 00:28:25.530
and there's stuff that is new in our
frameworks and is intended to be ongoing.

00:28:25.760 --> 00:28:29.300
We've added some convenience classes to
help you port your code to pure Java:

00:28:29.300 --> 00:28:31.880
NSComparator, NSBundle, WoeTimer.

00:28:32.120 --> 00:28:34.460
These are things that often
have equivalents that,

00:28:34.460 --> 00:28:36.950
you know, you could write Java code
to do what they do,

00:28:36.950 --> 00:28:40.030
but we figured we'd save you the trouble.

00:28:40.210 --> 00:28:42.590
We've left some classes like
NSCoder and NSCoding in,

00:28:42.590 --> 00:28:44.720
although they're now completely abstract.

00:28:44.830 --> 00:28:48.220
We removed a few things: NSRunLoops,
NSUserDefaults,

00:28:48.220 --> 00:28:50.880
and we changed the validation
mechanism to be more in line

00:28:50.880 --> 00:28:53.440
with the way Java works.

00:28:53.520 --> 00:28:55.420
NSComparator is a pretty simple class.

00:28:55.420 --> 00:28:58.300
It encapsulates NSComparisonResult
from Objective-C.

00:28:58.380 --> 00:28:59.860
We only use it in a couple of places.

00:28:59.860 --> 00:29:02.780
We use it in
NSArraysSortUsingComparator method,

00:29:02.780 --> 00:29:07.420
and it basically sorts the elements of
the receiving array into a new array.

00:29:07.520 --> 00:29:10.220
We use it in
NSMutableArraysSortUsingComparator

00:29:10.220 --> 00:29:12.050
method,
which sorts in place the

00:29:12.050 --> 00:29:13.570
elements of the array.

00:29:13.790 --> 00:29:16.250
If you're writing new Java code,
you may want to consider making

00:29:16.250 --> 00:29:19.200
any classes that you're going
to be sorting comparable.

00:29:19.340 --> 00:29:21.300
This will have sort of two things.

00:29:21.300 --> 00:29:25.200
Comparable isn't an exact
match to NSComparator,

00:29:25.200 --> 00:29:26.810
but it does allow you...

00:29:28.300 --> 00:29:32.150
to create one really simple
comparator to use in these things

00:29:32.160 --> 00:29:37.570
that simply defers to the comparable
methods on your underlying objects.

00:29:38.280 --> 00:29:41.090
NSBundle is going to be pretty
familiar to those of you who

00:29:41.090 --> 00:29:42.660
work with the Objective-C.

00:29:42.700 --> 00:29:47.600
It corresponds to the directory
where related resources are stored.

00:29:47.680 --> 00:29:54.120
It still has some deprecated APIs to
help people who are converting from 4.5.

00:29:54.120 --> 00:29:56.870
And we've extended the functionality
to handle properties files

00:29:56.940 --> 00:30:01.440
and we have some new APIs for
finding and loading resources.

00:30:01.540 --> 00:30:05.590
For those of you who are using it in 4.5,
you should note that the Java class

00:30:05.590 --> 00:30:09.040
loader does not support the
concept of dynamic class loading,

00:30:09.090 --> 00:30:13.000
so there is no concept of
loadable bundles in WebObjects 5.

00:30:13.600 --> 00:30:15.120
We've renamed and deleted some stuff.

00:30:15.190 --> 00:30:19.540
Most of it shouldn't worry you very much,
but just so you know that it happened,

00:30:19.540 --> 00:30:22.970
we renamed NSTimer to WoeTimer,
and we don't use it for

00:30:22.970 --> 00:30:24.500
session timeouts anymore.

00:30:24.500 --> 00:30:26.320
NSRunLoop has been removed.

00:30:26.320 --> 00:30:29.110
For those of you who get
into decompiling code,

00:30:29.130 --> 00:30:33.740
we have a private WoeRunLoop that we
use for Woe application-specific stuff,

00:30:33.750 --> 00:30:36.210
but you should not be trying to use it.

00:30:36.820 --> 00:30:41.400
And we've removed NSArchiver,
which was the concrete

00:30:41.490 --> 00:30:43.480
subclass of NSCoder.

00:30:43.480 --> 00:30:46.880
We'll talk a little bit more about that
when we talk about serialization later.

00:30:48.820 --> 00:30:51.380
User Defaults is one thing
that took a fairly serious hit.

00:30:51.490 --> 00:30:54.890
We've actually deprecated the
User Defaults class itself,

00:30:55.020 --> 00:30:57.940
although the sort of concept
of defaults exists in a class,

00:30:57.940 --> 00:31:00.700
NSProperties,
that we'll also talk about later.

00:31:00.700 --> 00:31:04.460
Some of the default names,
now property names, have been deprecated.

00:31:04.460 --> 00:31:07.340
Woe Debugging Enabled,
EO Adapter Debugging Enabled,

00:31:07.340 --> 00:31:08.830
NSProject Search Path.

00:31:08.830 --> 00:31:11.670
They're still there,
but they do different things and

00:31:11.670 --> 00:31:13.700
they may not be there for long.

00:31:13.700 --> 00:31:16.150
And some defaults have been renamed.

00:31:16.150 --> 00:31:18.810
Woe CGI Adapter URL is
now Woe Adapter URL,

00:31:18.810 --> 00:31:22.690
and Woe Should Send Lifebeat
is now Woe Lifebeat Enabled.

00:31:22.700 --> 00:31:27.700
We'll talk more about properties
and what they've become later.

00:31:27.700 --> 00:31:29.690
And we had to change the
validation mechanism.

00:31:29.730 --> 00:31:33.520
To review,
for those of you who have had 4.5,

00:31:33.520 --> 00:31:36.830
but you wrote those
methods a long time ago,

00:31:37.180 --> 00:31:41.700
validation methods in 4.5 took a pointer
to the target object as their parameter.

00:31:41.700 --> 00:31:43.700
They returned an exception object.

00:31:43.710 --> 00:31:46.610
If, for some reason,
the target object was invalid,

00:31:46.640 --> 00:31:50.050
and if coercion was necessary,
that would happen as a side

00:31:50.060 --> 00:31:51.660
effect on the target object.

00:31:51.700 --> 00:31:53.480
Well,
having side effects on target objects

00:31:53.480 --> 00:31:56.700
that are passed in as parameters isn't
something that Java's really good at.

00:31:56.700 --> 00:32:00.560
A lot of Java's value classes
are final and immutable.

00:32:00.700 --> 00:32:01.700
So we had to change that.

00:32:01.700 --> 00:32:06.700
So validation methods in 4.5, once again,
they take the object as their parameter,

00:32:06.700 --> 00:32:10.460
but instead of acting by side effect,
they return the valid value for

00:32:10.460 --> 00:32:12.700
that parameter as the return value.

00:32:12.700 --> 00:32:13.070
So validation methods in 4.5, once again,
they take the object as their parameter,

00:32:13.070 --> 00:32:13.340
but instead of acting by side effect,
they return the valid value for

00:32:13.340 --> 00:32:13.700
that parameter as the return value.

00:32:13.700 --> 00:32:14.070
So validation methods in 4.5, once again,
they take the object as their parameter,

00:32:14.070 --> 00:32:14.340
but instead of acting by side effect,
they return the valid value for

00:32:14.340 --> 00:32:14.700
that parameter as the return value.

00:32:14.700 --> 00:32:17.740
And if for some reason that
parameter value was invalid,

00:32:17.910 --> 00:32:20.700
they throw an NSValidation
validation exception.

00:32:20.700 --> 00:32:24.150
If they do return null,
that should be interpreted as

00:32:24.180 --> 00:32:26.560
coercion to the null value in Java.

00:32:26.700 --> 00:32:29.400
Note that the Java converter
doesn't take care of this for you.

00:32:29.400 --> 00:32:31.950
You're going to have to go through
and look at your validation

00:32:31.950 --> 00:32:34.700
methods and figure out what
they really should be returning.

00:32:35.740 --> 00:32:43.050
Here's some examples of method signatures
in Objective-C 4.5 Java and 5 Java.

00:32:43.100 --> 00:32:44.600
The first one is pretty simple.

00:32:44.600 --> 00:32:46.090
It's a validate street address.

00:32:46.090 --> 00:32:49.170
It takes a pointer to a string,
and you can see that it

00:32:49.440 --> 00:32:51.400
returns an NSException.

00:32:51.640 --> 00:32:55.700
4.5 Java looks very similar
because we're going through

00:32:55.730 --> 00:33:00.030
Java wrappers to actually use
Objective-C classes underlying the Java.

00:33:00.120 --> 00:33:03.260
Again, we pass in a string,
which is down there in the bridge,

00:33:03.260 --> 00:33:06.860
interpreted as an NSString,
which can be mutable if it needs to be,

00:33:06.950 --> 00:33:08.990
and we return a void.

00:33:09.070 --> 00:33:11.380
Or, we don't return anything,
I suppose would be a

00:33:11.380 --> 00:33:12.460
better way to put it.

00:33:13.230 --> 00:33:13.860
That would be that one.

00:33:13.860 --> 00:33:18.100
And the final one is the correct
way to do this in WebObjects 5.

00:33:18.320 --> 00:33:21.890
Again, you see that we're taking
a string parameter value,

00:33:21.890 --> 00:33:23.840
but also see that instead
of returning a void,

00:33:23.840 --> 00:33:27.080
we now return a string and
throw a validation exception.

00:33:27.080 --> 00:33:30.410
That's pretty much all there is to it.

00:33:30.980 --> 00:33:32.430
And now on to the new
and interesting stuff.

00:33:32.520 --> 00:33:33.160
We're engineers.

00:33:33.160 --> 00:33:36.660
We don't know when to
leave well enough alone.

00:33:36.660 --> 00:33:40.030
We have to constantly add new stuff
to our products or we get unhappy.

00:33:40.080 --> 00:33:42.080
So we've added some new stuff.

00:33:42.080 --> 00:33:45.440
We've added a bunch of time classes,
NSTimestamp, NSTimestampFormatter,

00:33:45.450 --> 00:33:46.280
NSTimeZone.

00:33:46.280 --> 00:33:51.400
We've added NSSocketUtilities to
help you with creating sockets.

00:33:51.400 --> 00:33:56.900
We created a new class called NSLog and,
as I mentioned earlier, NSProperties.

00:33:56.900 --> 00:34:00.640
We've done some stuff with NSLocking,
which some of you may be familiar with.

00:34:00.820 --> 00:34:04.820
We've changed key value coding
around a little bit and we've

00:34:04.900 --> 00:34:07.180
moved to Java serialization.

00:34:07.470 --> 00:34:10.670
We've also done some stuff in other,
you know, less central WebObjects

00:34:10.670 --> 00:34:14.630
packages like Woe Mail Delivery,
Woe Smile, and Java Plot.

00:34:15.500 --> 00:34:16.370
Why NS timestamp?

00:34:16.540 --> 00:34:20.460
This is a question that we've had
several times already at this conference.

00:34:20.460 --> 00:34:22.000
We've had it from
people who saw the beta.

00:34:22.000 --> 00:34:25.370
We've had it from people who, you know,
immediately download,

00:34:25.400 --> 00:34:29.030
install the WebObjects developer
stuff from the CD you got.

00:34:29.330 --> 00:34:32.800
We wanted to basically give
you all of the functionality

00:34:32.800 --> 00:34:36.930
that was in NSGregorianDate
in our WebObjects 5 product.

00:34:36.930 --> 00:34:39.490
And we ran into some issues in the JDK.

00:34:39.670 --> 00:34:42.040
First off,
for those of you who've looked at it,

00:34:42.040 --> 00:34:45.040
you know that their time zone class
does not contain historical information.

00:34:45.040 --> 00:34:48.780
And as we were trying to implement that,
we ran into some other assumption

00:34:48.780 --> 00:34:51.860
conflicts with the way we were
implementing time zone and the

00:34:51.860 --> 00:34:53.660
way their date classes worked.

00:34:53.750 --> 00:34:56.790
So we needed to create a time
class to work with our time zones.

00:34:57.450 --> 00:35:00.820
Why didn't we call it
NSCalendarDate or NSGregorianDate?

00:35:00.820 --> 00:35:02.720
No great deep reason.

00:35:02.720 --> 00:35:06.370
We wanted to show that it was
descending from Java SQL timestamp.

00:35:06.470 --> 00:35:08.880
And to a certain extent,
the word calendar is

00:35:08.880 --> 00:35:10.390
already in use in Java.

00:35:10.430 --> 00:35:13.600
And given that our timestamps
don't work at all in the same way,

00:35:13.600 --> 00:35:16.420
we didn't want to introduce
any possible confusion.

00:35:16.570 --> 00:35:20.130
One thing to remember is that you really
shouldn't use our stuff with their stuff.

00:35:20.130 --> 00:35:21.980
It doesn't work too well.

00:35:21.980 --> 00:35:24.110
You will see weird behavior.

00:35:24.620 --> 00:35:28.040
NSTimestamp, as I said,
is a subclass of Java SQL Timestamp.

00:35:28.040 --> 00:35:31.300
It replaces all uses of NSCalendarDate,
or for those of you in

00:35:31.350 --> 00:35:33.120
the bridge Java world,
NSGregorianDate.

00:35:33.140 --> 00:35:36.260
It provides most of the
same functionality that

00:35:36.260 --> 00:35:40.390
you saw in 4.5 or 4.5.1,
and EOF maps database

00:35:40.390 --> 00:35:42.820
datatypes into NSTimestamps.

00:35:42.820 --> 00:35:46.400
Something that has changed noticeably
that may affect a few of you is

00:35:46.400 --> 00:35:48.400
that we have a new reference date.

00:35:49.020 --> 00:35:52.890
We've moved from January 1, 2000 UTC,
which was the

00:35:52.890 --> 00:35:57.430
Objective-C sort of time zero,
to January 1, 1970 UTC,

00:35:57.840 --> 00:36:01.180
which is the Java and
Unix standard time zero.

00:36:01.180 --> 00:36:04.400
We've also added a
timestamp formatter to,

00:36:04.400 --> 00:36:09.000
well, format timestamps,
subclass of Java text format.

00:36:09.000 --> 00:36:11.570
It doesn't really do much,
although one thing that you

00:36:11.570 --> 00:36:14.370
might be pleased to hear is that
it's capable of dealing with

00:36:14.370 --> 00:36:17.980
Objective-C pattern specifiers,
as well as Java pattern specifiers.

00:36:18.630 --> 00:36:22.040
And it's a little bit heavyweight,
so if you've got an application

00:36:22.040 --> 00:36:25.380
that formats timestamps into
strings in a number of places,

00:36:25.380 --> 00:36:27.980
you may want to consider creating
one timestamp formatter and

00:36:27.980 --> 00:36:29.550
sharing it amongst all the stuff.

00:36:31.070 --> 00:36:32.320
We've created NSTimeZone.

00:36:32.320 --> 00:36:35.520
As I mentioned earlier,
this allows you to have a correct

00:36:35.580 --> 00:36:38.390
historical and geographical
context for your time.

00:36:38.490 --> 00:36:40.420
It's a subclass of Java Util TimeZone.

00:36:40.470 --> 00:36:43.830
It's built using the standard
zone info files that you get from,

00:36:43.830 --> 00:36:48.060
by FTP, from lc.nci.nih.gov.

00:36:48.150 --> 00:36:50.650
This basically lets you,
and there will be a

00:36:50.650 --> 00:36:53.850
till about this later,
you can, if those files change,

00:36:53.860 --> 00:36:55.910
you can download the new versions,
compile them,

00:36:55.910 --> 00:36:59.640
and drop them into WebObjects
to get the new zone info.

00:36:59.740 --> 00:37:02.880
And it should only be used,
as I mentioned, can't reiterate enough,

00:37:02.920 --> 00:37:04.130
with our time classes.

00:37:04.190 --> 00:37:06.770
Don't try and mix and match with Java.

00:37:06.970 --> 00:37:10.220
NSSocket Utilities is a fairly
simple class that we added to let

00:37:10.220 --> 00:37:13.940
you specify connection timeouts,
and if socket creation fails,

00:37:13.940 --> 00:37:17.600
it will throw an I/O exception.

00:37:17.680 --> 00:37:21.520
Without the utilities,
there can be a problem on some platforms

00:37:21.520 --> 00:37:25.400
where failing to create a socket
will hang your system indefinitely,

00:37:25.400 --> 00:37:28.210
and we kind of thought
that was a bad idea.

00:37:29.060 --> 00:37:30.850
It's fairly simple to
use NSSocket utilities.

00:37:31.010 --> 00:37:34.990
Here's an example of how you'd create
a socket using the standard Java way.

00:37:35.010 --> 00:37:38.040
You see you've got your
constructor taking an address,

00:37:38.040 --> 00:37:40.390
a port, a local address,
and a local port.

00:37:41.010 --> 00:37:43.880
This is the equivalent in
using NSSocket utilities.

00:37:43.900 --> 00:37:45.510
It's a factory method
that takes an address,

00:37:45.550 --> 00:37:49.170
a port, a local address, a local port,
and a connection timeout

00:37:49.380 --> 00:37:50.900
measured in milliseconds.

00:37:50.900 --> 00:37:54.890
And notice that we catch the exception,
which means there's no socket and

00:37:54.890 --> 00:37:56.890
we have to deal with that somehow.

00:37:57.310 --> 00:38:00.610
NSProperties, as I mentioned earlier,
replaces NSUserDefaults.

00:38:00.610 --> 00:38:03.800
It's basically a wrapper to the
standard Java properties mechanism,

00:38:03.800 --> 00:38:06.800
which you can see defined
in Java UtilProperties.

00:38:06.880 --> 00:38:09.090
It's a convenience class for
merging application properties

00:38:09.090 --> 00:38:11.580
with standard system properties
with framework properties and

00:38:11.590 --> 00:38:13.300
all that kind of lovely stuff.

00:38:13.300 --> 00:38:15.930
For conversion,
people who are converting,

00:38:15.960 --> 00:38:18.780
a lot of the methods that
were on NSUserDefaults are

00:38:18.780 --> 00:38:20.870
still around on NSProperties.

00:38:21.240 --> 00:38:21.940
What are properties?

00:38:21.940 --> 00:38:22.560
Where are properties?

00:38:22.590 --> 00:38:24.400
Properties can be read
from a number of sources.

00:38:24.400 --> 00:38:27.160
There's a set of standard system
properties that come with your VM.

00:38:27.160 --> 00:38:31.140
There's user-specific properties
stored in hot Java properties.

00:38:31.140 --> 00:38:36.300
Your frameworks can have
their own properties files.

00:38:36.300 --> 00:38:38.370
Your application can
have a properties file,

00:38:38.370 --> 00:38:40.520
and you can specify them
on the command line.

00:38:40.700 --> 00:38:43.550
We use the standard Java conflict
resolution mechanism,

00:38:43.550 --> 00:38:46.980
which states that the last property
read is the one that gets used.

00:38:47.000 --> 00:38:48.430
They're read in this order.

00:38:48.430 --> 00:38:49.600
It's worth knowing.

00:38:49.600 --> 00:38:50.530
More details.

00:38:50.530 --> 00:38:53.030
Properties files must
be named properties,

00:38:53.050 --> 00:38:56.160
and they must be located in
the resources directory of your

00:38:56.290 --> 00:38:58.350
framework or your application.

00:38:58.360 --> 00:39:01.000
They're in the standard
Java properties format,

00:39:01.000 --> 00:39:02.740
which is that they're in a file.

00:39:02.740 --> 00:39:04.560
Each property is on its own line.

00:39:04.560 --> 00:39:06.160
Each line has the format.

00:39:06.160 --> 00:39:10.660
Property key equals property value
with no spaces around the equalizer.

00:39:10.770 --> 00:39:13.800
If you want to specify the
properties on the command line,

00:39:13.800 --> 00:39:16.760
you use the standard Java-D flag,
although we do also,

00:39:16.760 --> 00:39:20.050
in a deprecated fashion,
support the old Objective-C format

00:39:20.050 --> 00:39:21.970
for command line arguments.

00:39:23.620 --> 00:39:24.440
NSLog, I mentioned.

00:39:24.440 --> 00:39:26.940
This is a class that we're
actually pretty excited about.

00:39:26.940 --> 00:39:27.600
We think it's neat.

00:39:27.600 --> 00:39:29.540
We think it should be very
useful to most of you.

00:39:29.540 --> 00:39:32.920
There's actually three classes involved.

00:39:32.920 --> 00:39:34.790
There's NSLog,
which is a static class that

00:39:34.800 --> 00:39:38.520
allows you to interface with
the WebObjects logging system.

00:39:38.520 --> 00:39:41.220
There's Logger,
which is an abstract class that defines

00:39:41.220 --> 00:39:44.560
sort of the core functionality in
which you should subclass if you want

00:39:44.560 --> 00:39:46.400
to do your own logging mechanism.

00:39:46.400 --> 00:39:50.800
And we provide one concrete subclass,
the PrintStreamLogger,

00:39:50.800 --> 00:39:54.760
which will basically log
your output to a PrintStream.

00:39:55.130 --> 00:39:56.000
Why do you want to use it?

00:39:56.000 --> 00:39:57.540
Well, there's a few reasons.

00:39:57.650 --> 00:40:01.640
It's set up to allow you to control
the scope and granularity of debugging.

00:40:01.640 --> 00:40:04.760
You can set up debug
groups and debug levels,

00:40:04.760 --> 00:40:08.630
which will allow you to say,
if you have an application that does...

00:40:08.810 --> 00:40:12.920
HTML generation has business
logic and has database access.

00:40:12.940 --> 00:40:16.300
You can separate by debug groups
logging in each of those areas,

00:40:16.300 --> 00:40:18.710
and you can turn only one of
them on at a time if you want.

00:40:18.760 --> 00:40:21.560
Or you can use debug levels to say, well,
I'm in development,

00:40:21.560 --> 00:40:24.090
but I don't want to have to
worry about touching my code

00:40:24.090 --> 00:40:25.590
when I go out of development.

00:40:25.600 --> 00:40:28.300
So I want all of this logging
to happen at one debug level,

00:40:28.300 --> 00:40:31.820
but once I move into deployment,
I want to set a different debug level,

00:40:31.820 --> 00:40:33.800
and I'll only see really critical stuff.

00:40:35.440 --> 00:40:38.960
You can redirect the output however
you want by subclassing logger.

00:40:38.960 --> 00:40:40.460
We provide the print stream.

00:40:40.460 --> 00:40:44.260
You can set it up to do email or
anything else you really want.

00:40:45.720 --> 00:40:48.500
If you decide that you want
to turn on verbose logging,

00:40:48.500 --> 00:40:52.710
it will also print out the timestamp
at which the logging happened and

00:40:52.730 --> 00:40:54.000
the thread that did the logging.

00:40:54.000 --> 00:40:57.160
This can be useful if you're trying to
track down synchronization problems.

00:40:57.160 --> 00:41:01.320
And there's an issue, known issue,
with Java Runtime Exec,

00:41:01.320 --> 00:41:05.630
which is that if you launch a
child process using Exec and then

00:41:05.630 --> 00:41:11.920
don't pull data out of the child
process's out and error streams,

00:41:11.920 --> 00:41:14.670
then your child process will eventually
hang when its buffers get full.

00:41:14.680 --> 00:41:18.110
Again, we don't think freezing is good.

00:41:18.440 --> 00:41:21.000
Here's a sample of how
to create a debug group.

00:41:21.100 --> 00:41:22.430
It's pretty simple.

00:41:22.660 --> 00:41:26.500
You'll notice that it's long and
that we're left shifting by 40.

00:41:26.580 --> 00:41:30.280
The first 32 bits are in use by
internal WebObjects logging stuff.

00:41:30.490 --> 00:41:35.190
The other 32 are open for you
to use however you'd like to.

00:41:35.930 --> 00:41:39.610
The second bit is an example of
how you would pass in a command

00:41:39.610 --> 00:41:41.180
line parameter to enable debugging.

00:41:41.180 --> 00:41:42.500
Here's your command line.

00:41:42.500 --> 00:41:45.640
Basically, you read in the property.

00:41:45.640 --> 00:41:49.500
Standard Java, this is how you read
properties mechanism.

00:41:49.500 --> 00:41:54.880
If it says you should be debugging,
then enable the verbose debugging

00:41:54.880 --> 00:41:57.500
on the debug out and error streams.

00:41:57.500 --> 00:42:00.890
Enable debugging for the
group that we defined earlier,

00:42:00.890 --> 00:42:03.230
and set the level to informational.

00:42:03.500 --> 00:42:07.600
This will print out everything
in that debug group.

00:42:07.950 --> 00:42:12.680
It's fairly simple to redirect the
output to a different directory.

00:42:12.710 --> 00:42:16.810
Again, you pass something in in the
standard Java properties format.

00:42:16.810 --> 00:42:20.050
Again,
you read a standard Java system property.

00:42:20.080 --> 00:42:24.530
If the property is there,
create a print stream pointing at

00:42:24.530 --> 00:42:27.100
that file and set as appropriate.

00:42:27.420 --> 00:42:29.420
Here we show setting NSLOG debug.

00:42:29.430 --> 00:42:32.130
You can also set
NSLOG out and NSLOG error.

00:42:32.430 --> 00:42:37.270
If you want, you can set that to null and
no logging will happen at all.

00:42:40.270 --> 00:42:42.440
Hi, my name is RD Willhoite.

00:42:42.440 --> 00:42:44.450
I just want to get this out
of the way to begin with.

00:42:44.530 --> 00:42:47.740
I'm not female and I'm not French,
but I am a WebObjects engineer,

00:42:47.740 --> 00:42:51.460
so it does sometimes happen.

00:42:52.590 --> 00:42:56.560
Today I'm going to be telling you about
a different manner of interacting with

00:42:56.560 --> 00:42:58.380
the WebObjects application server.

00:42:58.420 --> 00:43:01.170
As Melissa alluded,
I will be talking about NSLog.

00:43:01.280 --> 00:43:04.140
I'm also going to be talking
about the Willmail Delivery class,

00:43:04.260 --> 00:43:08.140
which is not new to WebObjects 5,
but has been revised slightly.

00:43:08.200 --> 00:43:15.790
Now it uses the SMTP client class
in Sun's standard class libraries.

00:43:16.920 --> 00:43:21.620
I'm going to show you two different
forms of email integration.

00:43:21.720 --> 00:43:24.760
The first thing that I'm going to
show you is sending of WebObjects

00:43:24.770 --> 00:43:26.890
components to a hypothetical customer.

00:43:26.900 --> 00:43:31.320
The second thing that I'm going to show
you is sending of critical error messages

00:43:31.320 --> 00:43:33.900
to a hypothetical system administrator.

00:43:33.900 --> 00:43:37.170
For demonstration convenience,
I'm going to be using the same

00:43:37.220 --> 00:43:40.610
email address for both the customer
and the system administrator.

00:43:40.910 --> 00:43:43.170
Obviously,
this wouldn't be the case in real life,

00:43:43.170 --> 00:43:44.900
but I only have one web browser here.

00:43:44.900 --> 00:43:46.890
I'm sorry, one mail browser here.

00:43:46.900 --> 00:43:49.900
Also,
in order to clarify the demonstration,

00:43:49.900 --> 00:43:54.990
my application copies some of the
images from the Think Movies example,

00:43:54.990 --> 00:43:56.900
but it isn't actually
the Think Movies example.

00:43:56.900 --> 00:43:58.900
It's just a partial mock-up.

00:43:58.900 --> 00:44:00.690
I'm not sure if we're going to
be able to make the source code

00:44:00.700 --> 00:44:03.900
for the demonstration available,
but I didn't want to confuse

00:44:03.900 --> 00:44:06.900
you if you do have a chance
to look at the source code.

00:44:06.900 --> 00:44:10.220
As many of you may know,
the WoMail Delivery class is capable

00:44:10.220 --> 00:44:10.900
of emailing a message to a customer.

00:44:10.900 --> 00:44:13.680
You can use this as an alternative
mechanism for interacting with

00:44:13.680 --> 00:44:14.900
the web application server.

00:44:14.930 --> 00:44:23.550
Let's take a look at our project.

00:44:24.830 --> 00:44:27.940
We are going to be looking
at the application class,

00:44:27.940 --> 00:44:33.530
and more specifically at the
constructor for the application class.

00:44:34.000 --> 00:44:36.970
One of the most interesting things
that's happening in the constructor,

00:44:36.970 --> 00:44:39.210
which is going to be
invoked at startup time,

00:44:39.220 --> 00:44:42.570
so we're going to magically see an
email appear in our mail browser,

00:44:42.570 --> 00:44:46.980
is that we're invoking a direct
action called send email form action.

00:44:47.110 --> 00:44:50.020
If we go and look at this direct action,

00:44:52.410 --> 00:44:53.700
We see that it's very simple.

00:44:53.840 --> 00:44:56.840
It really only does one thing:
compose component email.

00:44:57.000 --> 00:45:01.460
So we're going to be sending an email
using a page component called email

00:45:01.460 --> 00:45:03.940
form to a pre-specified recipient.

00:45:03.940 --> 00:45:07.140
I'm not going to show you the
source for the page component.

00:45:07.140 --> 00:45:11.440
You'll see the results of the
source when I launch this thing.

00:45:11.440 --> 00:45:13.540
So let's fire it up and see what happens.

00:45:13.660 --> 00:45:16.460
As this thing starts up,
I wanted to mention that I'm doing

00:45:16.560 --> 00:45:20.600
some of the configuration on the sly of
the SMTP host used by WoMail delivery,

00:45:20.770 --> 00:45:23.890
as well as the recipient and
sender and all that stuff,

00:45:24.030 --> 00:45:27.420
using command line arguments in
Project Builder's launch panel.

00:45:27.600 --> 00:45:31.400
So that's how it's finding
out all of this information.

00:45:31.650 --> 00:45:32.550
So it's started.

00:45:32.570 --> 00:45:35.500
Let's go and look at our mail browser.

00:45:35.500 --> 00:45:39.850
And we see that our friendly
WebObjects application has sent us

00:45:40.300 --> 00:45:44.070
and email, and this is a list of
movies that we can rent.

00:45:44.240 --> 00:45:47.800
Each movie is represented by a hyperlink.

00:45:47.860 --> 00:45:49.400
I'll choose my favorite one.

00:45:49.400 --> 00:45:53.310
I don't know if any of you
can guess which one that is.

00:45:54.740 --> 00:45:56.750
For some reason IE wants
to insert itself.

00:45:56.760 --> 00:45:59.120
I don't know,
I think Microsoft is wanting

00:45:59.120 --> 00:46:00.080
to get on stage with me.

00:46:00.080 --> 00:46:02.120
But anyway,
I'm going to go back to the project

00:46:02.220 --> 00:46:06.000
to show you what's happening behind
the scenes before we see what happens,

00:46:06.000 --> 00:46:08.280
what the result of clicking
on the hyperlink is.

00:46:08.280 --> 00:46:11.490
So if we go and we look at
the direct action class again,

00:46:11.540 --> 00:46:15.520
clicking on the hyperlink actually
invokes a second direct action

00:46:15.520 --> 00:46:17.980
called rent selected movie action.

00:46:19.060 --> 00:46:21.260
And this action does two things.

00:46:21.330 --> 00:46:24.390
The first thing that it does is
that it sends a confirmation email

00:46:24.390 --> 00:46:25.980
to our hypothetical customer.

00:46:25.980 --> 00:46:28.370
This is essentially the same
thing that we've just done,

00:46:28.410 --> 00:46:30.220
so that's not especially interesting.

00:46:30.220 --> 00:46:33.850
The second and more interesting thing
that we do is that we do a bit of

00:46:33.850 --> 00:46:37.220
investigation as to what movie we've got.

00:46:37.220 --> 00:46:43.140
And we see that the application
has come back to us and...

00:46:43.350 --> 00:46:48.980
It's given us the confirmation email,
but uh-oh, we've received a system error.

00:46:48.980 --> 00:46:52.500
So this is intended, obviously,
for the system administrator,

00:46:52.500 --> 00:46:53.200
not the customer.

00:46:53.200 --> 00:46:55.140
It's an atrocious cinema alert.

00:46:55.140 --> 00:46:57.340
Apparently the...

00:47:00.330 --> 00:47:03.660
Apparently the WebObjects application
doesn't like my choice of movies.

00:47:03.660 --> 00:47:09.140
Going back to the project,
let's see if we can answer the question,

00:47:09.140 --> 00:47:10.720
how is this email being sent?

00:47:10.740 --> 00:47:16.740
So we saw here that we're actually
checking what movie we're selecting.

00:47:16.740 --> 00:47:18.620
This thing isn't emailing it every time.

00:47:18.620 --> 00:47:21.430
I don't have anything behind
the magic curtains here.

00:47:21.440 --> 00:47:25.460
All that it's doing is it's
invoking the Appendlan method of

00:47:25.660 --> 00:47:28.200
the error member of the NSLog class.

00:47:28.200 --> 00:47:30.700
And you can see that it's
just passing a string.

00:47:30.700 --> 00:47:33.460
And the string,
I happen to use HTML because it

00:47:33.460 --> 00:47:35.400
looks nicer in the mail browser.

00:47:35.400 --> 00:47:39.630
Because we have nice
HTML rendering in mail.app.

00:47:39.700 --> 00:47:42.780
But you could do any string.

00:47:42.780 --> 00:47:44.420
Obviously it doesn't have to be HTML.

00:47:44.420 --> 00:47:47.470
But the real question is,
how is the email being generated?

00:47:47.520 --> 00:47:50.520
This is not really clear here
because as Melissa mentioned,

00:47:50.520 --> 00:47:53.540
our default loggers,
which are the print stream loggers,

00:47:53.540 --> 00:47:57.540
spew things to the console as
well as to specified files.

00:47:57.570 --> 00:47:58.000
So.

00:47:58.230 --> 00:48:00.200
What's happening here?

00:48:00.200 --> 00:48:03.560
What happens is that the
logger class is actually an

00:48:03.560 --> 00:48:05.480
abstract class as she mentioned.

00:48:05.480 --> 00:48:07.200
And you can subclass it.

00:48:07.220 --> 00:48:09.540
As a matter of fact,
you can insert this thing

00:48:09.540 --> 00:48:13.040
into the NSLog class,
which is the broker for all

00:48:13.040 --> 00:48:14.480
of the logging interactions.

00:48:14.480 --> 00:48:17.690
You see here in the declaration
that we're extending

00:48:17.690 --> 00:48:19.480
NSLog's logger inner class.

00:48:19.480 --> 00:48:23.000
And if you look at the
class initialization,

00:48:23.110 --> 00:48:27.980
you see that we are initializing
all this stuff using those commands.

00:48:27.980 --> 00:48:30.980
command line arguments
that I mentioned before.

00:48:31.950 --> 00:48:38.710
We create a new instance
of the MailLogger class.

00:48:38.880 --> 00:48:42.630
We set the error member of
NSLog using this new instance,

00:48:42.630 --> 00:48:43.400
which you saw before.

00:48:43.400 --> 00:48:44.850
The local variable is called error.

00:48:44.970 --> 00:48:46.560
That's the mail logger instance.

00:48:46.660 --> 00:48:49.510
So, unfortunately,
this doesn't really tell us

00:48:49.530 --> 00:48:51.150
how the email is being sent.

00:48:51.700 --> 00:48:53.370
To understand that,
we need to go and look

00:48:53.370 --> 00:48:54.640
at the AppendLin method.

00:48:54.640 --> 00:48:55.940
There's a lot of code here.

00:48:55.940 --> 00:48:58.600
This example is complete.

00:48:58.600 --> 00:49:00.520
It's a simple example,
but it is a complete example.

00:49:00.580 --> 00:49:03.710
We're not going to be talking
about all of the accessor methods

00:49:03.750 --> 00:49:05.400
and all the rest of that jazz.

00:49:05.400 --> 00:49:08.230
As you can see here,
it's hard to see with a big font,

00:49:08.230 --> 00:49:10.790
but I'm actually in the
AppendLin method now.

00:49:10.790 --> 00:49:12.400
This is an abstract method.

00:49:12.470 --> 00:49:15.870
I've implemented it here,
but instead of using print streams,

00:49:15.870 --> 00:49:19.540
I'm using the SMTP client class
in order to email the messages.

00:49:20.740 --> 00:49:24.340
I've already mentioned how this is
different from the default logger.

00:49:24.340 --> 00:49:28.310
Why you care about this is that in Java,
it's still useful to log

00:49:28.310 --> 00:49:32.820
things a lot of times,
and unfortunately, it's still necessary.

00:49:32.820 --> 00:49:36.630
The debuggers can be pretty decent,
but sometimes it's unavoidable

00:49:36.630 --> 00:49:40.700
when debugging things to log things
to understand what's happening.

00:49:40.700 --> 00:49:43.710
One of the nice things about
this is that you can use the

00:49:44.020 --> 00:49:47.380
default print stream loggers,
which is really just equivalent

00:49:47.380 --> 00:49:49.880
to System.out.println and
is just as easy to use.

00:49:49.880 --> 00:49:53.030
You get all the same capabilities,
but you don't have the problems

00:49:53.030 --> 00:49:55.830
that Melissa alluded to,
and you also don't have to comment

00:49:55.950 --> 00:49:57.490
the things out and recompile.

00:49:57.540 --> 00:50:00.130
You can just leave it in there,
and you can turn off the loggers.

00:50:00.140 --> 00:50:04.650
You can even configure that at runtime
using some command line arguments.

00:50:04.720 --> 00:50:06.880
I'll refer you to the documentation
for more information on

00:50:06.950 --> 00:50:08.180
those command line arguments.

00:50:08.220 --> 00:50:11.700
This is just a demonstration
of one of the new features,

00:50:11.700 --> 00:50:15.590
NSLog, in WebObjects 5,
but I hope that this demonstration

00:50:15.590 --> 00:50:19.020
encourages you to take a
look at the whole product.

00:50:19.020 --> 00:50:19.020
Thank you for your time.

00:50:20.930 --> 00:50:23.390
Thanks.

00:50:23.390 --> 00:50:24.240
Well, on to more stuff.

00:50:24.400 --> 00:50:27.220
That was interesting and fun,
and I've still got less

00:50:27.220 --> 00:50:29.740
interesting stuff to deal with,
so please bear with me.

00:50:29.740 --> 00:50:30.300
NSLock.

00:50:30.330 --> 00:50:34.560
This should be familiar to a lot of
you who were working with Objective-C.

00:50:34.560 --> 00:50:38.350
There's three classes, NSLock,
NSMultireaderLock, NSRecursiveLock.

00:50:38.400 --> 00:50:40.910
They all conform to the
NSLocking interface.

00:50:40.910 --> 00:50:45.030
This basically says that thou shalt
implement the methods lock and unlock.

00:50:46.540 --> 00:50:49.750
Mostly they're here to facilitate
conversion from WebObjects 4.5,

00:50:49.940 --> 00:50:54.320
but they also are a little bit more
complicated and a little bit broader

00:50:54.320 --> 00:50:56.260
than the Java synchronization mechanism.

00:50:56.260 --> 00:51:00.990
So they can coordinate locking of
objects over a longer period or

00:51:00.990 --> 00:51:05.080
over a more convoluted code path,
and they can allow developers to

00:51:05.080 --> 00:51:07.920
do things that are kind of hard
to do using just synchronize.

00:51:07.920 --> 00:51:10.220
A good example of that would
be the multireader lock.

00:51:10.280 --> 00:51:13.840
Java's synchronization method doesn't
distinguish between reading or writing,

00:51:13.840 --> 00:51:16.220
so it always locks the object
that you're looking at.

00:51:16.480 --> 00:51:20.840
But if you're writing your application,
you may know that 99.9% of the

00:51:20.890 --> 00:51:23.480
time it's going to be a read,
so it doesn't really matter

00:51:23.480 --> 00:51:26.120
if multiple things are looking
at the data at the same time.

00:51:26.120 --> 00:51:28.370
So you may want to use
a multireader lock,

00:51:28.370 --> 00:51:32.570
which will end up only locking the
object when you're trying to write to it.

00:51:34.500 --> 00:51:36.560
Key Value Coding,
a lot of you are probably

00:51:36.560 --> 00:51:39.390
going to recognize that
name from previous versions.

00:51:39.450 --> 00:51:42.000
It's a unified way to access
properties of different types.

00:51:42.000 --> 00:51:46.610
It can access things that are in methods,
private methods, public methods,

00:51:46.610 --> 00:51:47.900
instance variables.

00:51:48.150 --> 00:51:51.760
NSKeyValueCoding is EOKeyValueCoding
split up into a number of pieces.

00:51:51.760 --> 00:51:54.750
There's four abstract interfaces
that define the various

00:51:54.750 --> 00:51:56.440
methods in key value coding.

00:51:56.440 --> 00:51:59.190
There's an error handling interface,
and there are some default

00:51:59.190 --> 00:52:00.820
implementations that we provide.

00:52:00.820 --> 00:52:04.630
The first interface is
generic NSKeyValueCoding.

00:52:04.650 --> 00:52:09.110
This is the very basic,
if you want key value coding behavior,

00:52:09.170 --> 00:52:12.020
you must implement this interface.

00:52:12.020 --> 00:52:15.560
It defines value for key
and take value for key.

00:52:16.020 --> 00:52:18.690
It has a subclass,
NSKeyValueCodingAdditions,

00:52:18.690 --> 00:52:22.250
which implements value for key
path and take value for key path.

00:52:22.360 --> 00:52:27.780
The methods storedValueForKeyPath and
takeStoredValueForKey were defined

00:52:28.260 --> 00:52:30.760
and split out into EOKeyValueCoding.

00:52:30.760 --> 00:52:32.920
Again,
that's a subclass of NSKeyValueCoding.

00:52:32.920 --> 00:52:36.440
And finally,
there's EOKeyValueCodingAdditions,

00:52:36.440 --> 00:52:41.760
which defines the methods values for
keys and take values from dictionary.

00:52:41.760 --> 00:52:44.530
This basically allows you to
implement whichever pieces

00:52:44.530 --> 00:52:46.000
of the key values you want.

00:52:46.000 --> 00:52:49.050
So you can use the key value coding
stuff you think you're going to need

00:52:49.050 --> 00:52:52.350
in your application without having
to implement any of the rest of it.

00:52:52.710 --> 00:52:55.360
In each interface,
we define two static inner classes.

00:52:55.360 --> 00:52:58.620
There's the default implementation,
which is a convenient way to get

00:52:58.620 --> 00:53:02.360
at the default behavior if you want
to add key value coding to a class.

00:53:02.360 --> 00:53:05.050
And there's a utility class,
which is a convenient way

00:53:05.050 --> 00:53:08.120
to get the default key value
coding behavior for any class,

00:53:08.230 --> 00:53:11.020
whether or not it implements
the key value coding interface.

00:53:12.940 --> 00:53:15.360
As I mentioned earlier,
we've gone to Java serialization.

00:53:15.360 --> 00:53:24.090
NSCoder and NSCoding are abstract now,
and we've replaced our use of them with

00:53:24.150 --> 00:53:25.720
the native Java serialization scheme.

00:53:25.720 --> 00:53:29.050
We've left them in place in case
you had subclasses of NSCoding

00:53:29.120 --> 00:53:31.280
that you wanted to continue using.

00:53:31.280 --> 00:53:38.000
Any classes that implemented NSCoding
are now serializable in Java.

00:53:38.500 --> 00:53:41.500
If you want to see an example
of how Java serialization works,

00:53:41.500 --> 00:53:43.990
have a look at the persistent
session store example that

00:53:44.000 --> 00:53:45.500
we shipped with WebObjects 5.

00:53:45.500 --> 00:53:47.480
What are the advantages of doing this?

00:53:47.500 --> 00:53:52.500
Java developers don't have to
learn a new archiving scheme,

00:53:52.500 --> 00:53:52.500
which is a good thing.

00:53:52.620 --> 00:53:56.490
The Java runtime framework
does all of the work.

00:53:56.560 --> 00:53:59.340
It takes care of graph traversal,
it takes care of cycle analysis,

00:53:59.340 --> 00:54:00.500
all of that stuff.

00:54:00.500 --> 00:54:02.500
We don't have to worry about it anymore.

00:54:02.500 --> 00:54:05.950
We can concentrate on
making WebObjects better.

00:54:06.560 --> 00:54:09.210
WOMail delivery,
as RD was talking about earlier,

00:54:09.300 --> 00:54:14.240
is based on sun.net.smtp.smtp client.

00:54:14.240 --> 00:54:17.680
This is a protocol that
doesn't support CC or BCC,

00:54:17.810 --> 00:54:20.740
so people who are CC'd will
also end up in the to field.

00:54:20.740 --> 00:54:27.340
But it does allow mail pages to submit
forms or to see pictures because,

00:54:27.340 --> 00:54:31.070
well, absolute URLs are generated.

00:54:31.610 --> 00:54:32.060
JavaPlot.

00:54:32.060 --> 00:54:34.600
Some of you may recognize
this from previous versions.

00:54:34.600 --> 00:54:37.550
It's now AWT-based,
which means that all AWT fonts

00:54:37.630 --> 00:54:41.140
are available and that
images are anti-aliased.

00:54:41.220 --> 00:54:43.840
There's been a number of bug
fixes and some improvements.

00:54:43.920 --> 00:54:46.540
Unfortunately, it's now subject to
limitations of the AWT,

00:54:46.540 --> 00:54:50.310
which is essentially that
if you want to use it,

00:54:50.310 --> 00:54:52.100
you have to have a
Windows server running.

00:54:52.170 --> 00:54:57.160
This is a limitation that should vanish
when 1.4 is released later this year.

00:54:57.790 --> 00:54:59.300
and the WoeSmile Framework.

00:54:59.310 --> 00:55:04.590
Some of you may remember that we
demonstrated this at WWDC last year.

00:55:04.590 --> 00:55:08.930
It's now part of the
official WebObjects product.

00:55:09.050 --> 00:55:12.470
For those of you who don't know,
S-Smile is the synchronized

00:55:12.530 --> 00:55:14.690
multimedia interface language.

00:55:14.690 --> 00:55:17.380
It allows you to create smile content.

00:55:17.460 --> 00:55:22.340
Smile is defined by W3C specification.

00:55:22.440 --> 00:55:24.740
It allows you to generate
dynamic multimedia content,

00:55:24.740 --> 00:55:26.780
which can be played
with QuickTime Player.

00:55:26.780 --> 00:55:30.180
It's integrated with WebObjects
Builder for a drag and drop experience.

00:55:30.180 --> 00:55:35.140
And it allows you to lay out your
multimedia project not only visually,

00:55:35.180 --> 00:55:38.110
but also temporally,
so that you can specify not

00:55:38.110 --> 00:55:41.080
only where things appear on
your multimedia application,

00:55:41.080 --> 00:55:43.800
but when various pieces
of it start playing,

00:55:43.800 --> 00:55:45.820
if you have streamed content.

00:55:46.680 --> 00:55:47.900
And I think we're done.

00:55:48.040 --> 00:55:50.390
In summary,
WebObjects 5 is pretty much the

00:55:50.390 --> 00:55:52.800
same as WebObjects 4.5 and 4.5.1.

00:55:52.800 --> 00:55:54.330
We haven't changed an awful lot.

00:55:54.340 --> 00:55:55.460
We've added a few things.

00:55:55.460 --> 00:55:57.900
We provide Java Converter
to help you migrate.

00:55:57.900 --> 00:56:00.780
And we've added some new
stuff to encourage you to

00:56:00.780 --> 00:56:03.320
move from 4.5 to WebObjects 5.

00:56:03.350 --> 00:56:05.460
I think that's all I have to say.

00:56:05.460 --> 00:56:09.120
Unfortunately, I can't play guitars and
I don't sing very well,

00:56:09.120 --> 00:56:12.020
so I can't live up to
James Dempsey's yesterday.

00:56:12.020 --> 00:56:28.120
And I think I'd like to call my QA team.

00:56:28.190 --> 00:56:28.190
Actually, I think first I'm supposed
to mention the lab.

00:56:28.190 --> 00:56:28.190
And it's open until 6
most days this week.

00:56:28.190 --> 00:56:28.190
And I'm supposed to encourage you to vote
for WebObjects is the best app server.

00:56:28.520 --> 00:56:30.430
Here's some of the other things
that you might be interested in,

00:56:30.430 --> 00:56:35.760
some things that have changed between
WebObjects 4.5 and WebObjects 5.

00:56:35.810 --> 00:56:38.900
There's a direct-to-Java client, XML,
later this afternoon,

00:56:38.900 --> 00:56:40.830
and deployment has changed a bit.

00:56:40.860 --> 00:56:43.570
And if you have feedback,
and I'm sure you will,

00:56:43.570 --> 00:56:45.740
there's the feedback forum on Friday.

00:56:45.930 --> 00:56:48.130
and a list of people to contact.

00:56:48.210 --> 00:56:52.740
There's Tony, who's our director,
Bob Fraser, our marketer.

00:56:52.740 --> 00:56:53.700
There's iServices.

00:56:53.700 --> 00:56:55.660
Lots of URLs up there.