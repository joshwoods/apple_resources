WEBVTT

00:00:03.400 --> 00:00:05.750
My name is Xavier Legro,
and I'm the Text and

00:00:05.750 --> 00:00:09.870
International Technology Manager for
Apple Computer in WWDR.

00:00:10.300 --> 00:00:12.890
And I'd like to welcome
you to session 110,

00:00:13.020 --> 00:00:15.520
Drawing UniCode Text with ATSUI.

00:00:15.800 --> 00:00:17.990
ATSUI on Mac OS X,
which is Apple's type of

00:00:17.990 --> 00:00:22.210
services for UniCode imaging,
has evolved a lot and is actually the

00:00:22.210 --> 00:00:24.700
heart of text rendering on Mac OS X.

00:00:24.700 --> 00:00:28.020
We'll talk in detail about the UniCode
support today and how ATSUI fits in

00:00:28.150 --> 00:00:30.680
this overall picture of Mac OS X.

00:00:30.710 --> 00:00:34.670
In order to do that,
I'd like to introduce

00:00:35.500 --> 00:00:43.490
John Jenkins, who is actually our Mr.

00:00:43.490 --> 00:00:43.490
UniCode and who has
been working on ATSUI.

00:00:51.070 --> 00:00:54.860
Okay, so first to just give a sense as
to what we'll be talking about

00:00:54.940 --> 00:00:56.510
here throughout the session.

00:00:56.520 --> 00:01:01.530
We'll start out by a brief discussion
as to what ATSUI is and what it does,

00:01:01.530 --> 00:01:02.900
what services it provides.

00:01:02.980 --> 00:01:05.970
We'll go into a little bit
about who is using it right now,

00:01:05.970 --> 00:01:08.890
that is who in the system,
where in the system it's being used.

00:01:08.940 --> 00:01:12.420
We will discuss when you as a
developer might want to use it

00:01:12.420 --> 00:01:15.020
directly in one of your applications.

00:01:15.020 --> 00:01:18.830
We'll cover some of the
basics of how ATSUI works,

00:01:19.830 --> 00:01:24.900
and then we'll go through some detailed
examples of how you actually use ATSUI.

00:01:24.900 --> 00:01:27.600
So to start off with, what is it?

00:01:27.620 --> 00:01:31.460
Well, as Xavier said, it is an acronym.

00:01:31.460 --> 00:01:35.920
It stands for Apple Type Services for
Unicode Imaging.

00:01:35.920 --> 00:01:39.910
It also happens to be the
way you say hot in Japanese,

00:01:39.920 --> 00:01:42.680
although that is a sheer coincidence.

00:01:44.200 --> 00:01:49.400
It is a set of text drawing APIs and it's
available either directly or indirectly.

00:01:49.550 --> 00:01:53.330
You, as an application developer,
have the option of either

00:01:53.330 --> 00:01:57.090
calling ATSUI yourself or you can
call other parts of the system

00:01:57.090 --> 00:01:58.640
which themselves call ATSUI.

00:01:58.870 --> 00:02:01.200
So it's available in more than one way.

00:02:01.340 --> 00:02:07.520
And there are three basic uses
that you might want to put it to.

00:02:07.790 --> 00:02:14.610
The first would be to access Quartz
when you're drawing text on Carbon.

00:02:14.900 --> 00:02:17.360
This is something fairly
new with ATSUI on OS X,

00:02:17.360 --> 00:02:19.840
and it's something really,
really wonderful.

00:02:19.840 --> 00:02:24.090
It gets you a great deal of visual
power that wasn't available before.

00:02:24.200 --> 00:02:26.860
The second reason that you might
want to call ATSUI would be,

00:02:26.860 --> 00:02:31.950
of course, to draw UniCode text,
as the name implies.

00:02:32.810 --> 00:02:35.780
Finally,
you might want to use ATSUI in order to

00:02:36.000 --> 00:02:38.260
provide access to high-end typography.

00:02:38.260 --> 00:02:44.020
The Mac was, of course,
one of the original platforms

00:02:44.020 --> 00:02:48.280
for desktop publishing,
and really went a long way towards

00:02:48.280 --> 00:02:53.290
making it possible to do really
beautiful type on a personal computer.

00:02:53.550 --> 00:02:57.130
One of the problems, of course,
has been that most applications

00:02:57.130 --> 00:03:01.220
don't really provide access to
the full beauty of typography.

00:03:01.310 --> 00:03:02.590
ATSUI allows you to change that.

00:03:04.360 --> 00:03:08.410
And of course, if you want to do any one
of these three things,

00:03:08.590 --> 00:03:10.400
you get the other two basically for free.

00:03:10.400 --> 00:03:14.800
If you want to draw UniCode text,
you can use ATSUI.

00:03:14.800 --> 00:03:18.080
You will get Quartz and
High-End Typography for free.

00:03:18.080 --> 00:03:21.980
If you want to do Quartz with your text,
you use ATSUI.

00:03:21.980 --> 00:03:24.840
You get all of UniCode and
High-End Typography for free.

00:03:24.840 --> 00:03:26.760
And if you want to do the type,
you use ATSUI,

00:03:26.760 --> 00:03:28.410
and you get the other two for free.

00:03:29.440 --> 00:03:36.130
So, fundamentally, ATSUI is the way to
draw text on Mac OS X.

00:03:36.150 --> 00:03:39.170
It is the preferred
system for drawing text.

00:03:41.270 --> 00:03:42.840
Okay,
a little bit about ATSUI and Quartz.

00:03:43.000 --> 00:03:46.240
ATSUI is fully integrated with Quartz.

00:03:46.390 --> 00:03:49.640
It respects the settings in a CG context.

00:03:49.660 --> 00:03:51.800
If you have,
basically if you wanted to use Quartz,

00:03:51.800 --> 00:03:54.430
you create a CG context,
you hand it off to ATSUI,

00:03:54.430 --> 00:03:57.430
ATSUI will then be using
it to render the text,

00:03:57.620 --> 00:04:01.640
and it will take advantage of
whatever is in that CG context.

00:04:01.780 --> 00:04:04.870
If you have transparency set, it's there.

00:04:04.870 --> 00:04:10.010
If you have rotation or skewing or
some other matrix that's put in there,

00:04:10.220 --> 00:04:11.150
it is there.

00:04:11.400 --> 00:04:13.240
And of course,
this means that you get the

00:04:13.350 --> 00:04:15.990
Quartz anti-aliasing for text,
if that's what you really want.

00:04:16.000 --> 00:04:18.680
So at the very least,
if you simply want improved

00:04:18.680 --> 00:04:27.860
anti-aliasing for your text display,
you can use ATSUI with Quartz,

00:04:27.860 --> 00:04:28.320
and you will get the correct
thing on a Carbon application.

00:04:28.470 --> 00:04:34.150
As for UniCode, ATSUI currently supports
everything which is in UniCode 3.0.

00:04:34.150 --> 00:04:38.160
This is a version of the standard,
which was published last

00:04:38.320 --> 00:04:41.060
spring in book form.

00:04:41.230 --> 00:04:43.820
For most of us,
what that means is that you get access to

00:04:43.820 --> 00:04:49.710
a large number of scripts and characters
that are not available in world script.

00:04:50.750 --> 00:04:56.570
So, UniCode 3.0 has roughly
49,000 characters,

00:04:56.570 --> 00:05:02.130
I believe, and WorldScript covers
about 40-50% of those.

00:05:02.130 --> 00:05:04.640
So there are tens of thousands
of characters that you can get

00:05:04.640 --> 00:05:07.230
through ATSUI that you could
not get through WorldScript.

00:05:08.140 --> 00:05:14.010
Moreover, ATSUI automatically handles
all of the problems associated

00:05:14.060 --> 00:05:16.380
with each of these scripts.

00:05:16.460 --> 00:05:20.760
Now, even if you're only doing something
very basic or something very simple,

00:05:20.760 --> 00:05:24.120
like Latin, Greek, and Cyrillic,
you may have to deal

00:05:24.120 --> 00:05:25.240
with accented letters.

00:05:25.300 --> 00:05:28.160
These are handled automatically by ATSUI.

00:05:28.290 --> 00:05:32.270
And of course, there are in UniCode
more complex scripts:

00:05:32.270 --> 00:05:36.260
Arabic, Devanagari,
all of the scripts of South Asia.

00:05:36.260 --> 00:05:40.580
and SUI handles these
automatically for you.

00:05:41.030 --> 00:05:44.440
This is a big advantage for a developer.

00:05:44.550 --> 00:05:46.670
In the past,
you would write your application

00:05:46.670 --> 00:05:49.750
to provide basic text rendering,
and then you would have to

00:05:49.750 --> 00:05:51.970
rewrite it for World Script 1,
and you would have to rewrite

00:05:51.980 --> 00:05:53.100
it again for World Script 2.

00:05:53.100 --> 00:05:55.850
You don't need to do that with ATSUI.

00:05:55.950 --> 00:05:59.330
If you adopt ATSUI,
you get everything all at once,

00:05:59.330 --> 00:06:01.940
and there's no rewriting involved.

00:06:02.050 --> 00:06:05.380
So, if we just go through some of
the scripts in UniCode 3.0,

00:06:05.380 --> 00:06:06.340
we have Latin.

00:06:06.460 --> 00:06:09.980
This is a much larger set of
Latin characters than you get

00:06:09.980 --> 00:06:12.460
either in Latin 1 or in Mac Roman.

00:06:12.610 --> 00:06:16.180
There are more Latin characters
than I want to think about,

00:06:16.230 --> 00:06:17.460
actually, in UniCode.

00:06:17.460 --> 00:06:22.090
You get all of the CJK ideographs,
which again is a far larger set than

00:06:22.090 --> 00:06:25.880
is available through Mac Japanese,
Korean, Simplified,

00:06:25.960 --> 00:06:29.450
and Traditional Chinese put together,
as well as KANA,

00:06:29.450 --> 00:06:33.740
both Katakana and Hiragana, Hangul,
and so on.

00:06:33.860 --> 00:06:36.320
There are literally dozens of scripts
that you can take advantage of.

00:06:36.320 --> 00:06:38.620
of without SUI.

00:06:38.750 --> 00:06:41.670
As for typography,
one of the nice things about

00:06:41.670 --> 00:06:45.540
ATSUI is that it takes advantage
of the data that is in the font.

00:06:45.650 --> 00:06:49.290
That it doesn't need to have
any particular information

00:06:49.290 --> 00:06:52.630
itself about typography.

00:06:52.640 --> 00:06:56.220
All of that is built into the font,
so the font is automatically

00:06:56.300 --> 00:06:58.790
taken advantage of by the system.

00:06:59.450 --> 00:07:03.140
It is possible for you, the developer,
to override the default settings

00:07:03.140 --> 00:07:05.680
of what the font provides,
and of course,

00:07:05.680 --> 00:07:09.880
is it possible for you to allow the user
to override the settings of the font.

00:07:09.880 --> 00:07:15.450
So, for example, you can have a large set
of ligatures in your font.

00:07:15.520 --> 00:07:20.180
We've had the FI and FL ligatures
in MacRoman since the beginning.

00:07:20.180 --> 00:07:22.150
You can have more ligatures than that.

00:07:22.240 --> 00:07:24.930
You can have swashes in alternate forms.

00:07:25.050 --> 00:07:26.680
Letters can change their shapes.

00:07:27.810 --> 00:07:29.020
That can be done by the user.

00:07:29.020 --> 00:07:32.380
They can deliberately choose a
different shape for the letter.

00:07:32.380 --> 00:07:35.800
Or, these shape changes can
be context sensitive.

00:07:35.800 --> 00:07:39.040
And one of the advantages of
doing it this way is it means

00:07:39.040 --> 00:07:42.100
that the text is not changing in
order to get these visual effects.

00:07:42.200 --> 00:07:46.990
Right now, if I try to use the FI and
FL ligatures in my text,

00:07:46.990 --> 00:07:49.770
my spell checker is going to
get confused because the words

00:07:49.780 --> 00:07:51.280
are changing their spellings.

00:07:51.400 --> 00:07:53.660
If you use ATSUI, this will not happen.

00:07:53.660 --> 00:07:54.680
You will have the ligatures.

00:07:54.680 --> 00:07:55.630
They will look gorgeous.

00:07:55.640 --> 00:07:57.560
But they won't screw up anything.

00:07:57.580 --> 00:07:59.300
anything else.

00:07:59.710 --> 00:08:03.490
You also get through ATSUI some advanced
features that used to be limited

00:08:03.490 --> 00:08:06.720
to really high-end applications.

00:08:06.940 --> 00:08:10.440
These are things that most of
us are not particularly aware

00:08:10.440 --> 00:08:12.660
of when we run into them.

00:08:12.790 --> 00:08:15.040
Optical alignment.

00:08:15.130 --> 00:08:20.560
This is where letters will not be flush
with the margin to create the illusion

00:08:20.560 --> 00:08:23.100
that they are flush with the margin.

00:08:23.110 --> 00:08:24.740
Hanging punctuation is similar.

00:08:24.740 --> 00:08:29.240
The punctuation is allowed to stick out
over the margin because the eye is not

00:08:29.240 --> 00:08:31.860
particularly focused on the punctuation.

00:08:32.000 --> 00:08:34.600
Kerning and tracking,
where letters are allowed to shift

00:08:34.600 --> 00:08:38.640
their positions relative to one another,
again to improve appearance.

00:08:38.750 --> 00:08:40.160
Sophisticated justification.

00:08:40.180 --> 00:08:42.630
All of these are available through ATSUI.

00:08:42.980 --> 00:08:48.230
You don't have to be a typographer
in order to take advantage of them.

00:08:48.430 --> 00:08:53.990
So here we have a couple of examples
here of text being rendered with ATSUI.

00:08:54.090 --> 00:08:58.800
This first one shows a number
of things right off the bat.

00:08:58.860 --> 00:09:01.360
This is all being drawn
with a single typeface,

00:09:01.360 --> 00:09:07.210
and we have a mixture of Latin letters,
CJK ideographs,

00:09:07.210 --> 00:09:11.220
then we have some Inuktitut
and some Georgian.

00:09:11.380 --> 00:09:14.950
Inuktitut is a series of
languages that are spoken in

00:09:14.950 --> 00:09:19.400
Native American languages spoken in
Canada and the northern United States,

00:09:19.400 --> 00:09:26.690
and Georgian is of course spoken on the
southeastern corner of the United States.

00:09:27.910 --> 00:09:29.340
These are all being rendered together.

00:09:29.340 --> 00:09:32.860
Now, the Latin and the Japanese you
would have been able to do,

00:09:32.860 --> 00:09:33.960
of course, with WorldScript.

00:09:34.150 --> 00:09:37.640
Inuktitut and Georgian, not,
at least not properly.

00:09:37.640 --> 00:09:38.960
So here we have them all.

00:09:38.960 --> 00:09:40.400
They're all with one font.

00:09:40.430 --> 00:09:43.500
And in addition, we have this cute little
spirograph sort of effect,

00:09:43.500 --> 00:09:45.070
which is being done with ATSUI.

00:09:45.080 --> 00:09:51.410
You're not limited to the
particular line angle for the text.

00:09:51.480 --> 00:09:54.560
And if you look closely,
in this particular example, it is,

00:09:54.560 --> 00:09:55.810
in fact, using quartz.

00:09:56.880 --> 00:10:01.740
So we get much better anti-aliasing
than would have been the case otherwise.

00:10:01.780 --> 00:10:07.820
In particular, as the text is slanted,
the anti-aliasing is appropriate

00:10:07.820 --> 00:10:10.930
for the angle of the text.

00:10:11.910 --> 00:10:14.590
Now this is an example of Zapfino.

00:10:14.690 --> 00:10:16.530
Zapfino is a new typeface.

00:10:16.560 --> 00:10:19.160
It is available on Mac OS X.

00:10:19.580 --> 00:10:23.300
It is based on the
handwriting of Hermann Zapf.

00:10:23.300 --> 00:10:28.040
Zapf is one of the foremost typographers
and calligraphers of the 20th century.

00:10:28.040 --> 00:10:31.170
He has designed a number of typefaces,
which we have used

00:10:31.170 --> 00:10:33.900
extensively in the past.

00:10:34.030 --> 00:10:36.720
And this is based on his handwriting.

00:10:36.720 --> 00:10:43.660
And as such, it is a very typographically
sophisticated font.

00:10:43.720 --> 00:10:46.320
The letters have a
large number of shapes.

00:10:46.410 --> 00:10:47.910
There's more than one F.

00:10:47.910 --> 00:10:50.220
There's more than one O in Zapfino.

00:10:50.310 --> 00:10:52.880
There's at least four copies of
each of the individual letters.

00:10:53.000 --> 00:10:55.020
There is, moreover,
an unusually large set

00:10:55.020 --> 00:10:56.690
of unusual ligatures.

00:10:56.690 --> 00:10:57.850
It has more than F.

00:10:57.850 --> 00:11:02.320
It has several FIs, several FLs,
and a large number of other ones.

00:11:02.320 --> 00:11:07.270
It is a beautiful face
if you use it correctly.

00:11:07.640 --> 00:11:11.690
And one of the things that we have
done is that we have wired it up so

00:11:11.690 --> 00:11:15.420
that the default behavior you get
is more beautiful than if we just

00:11:15.510 --> 00:11:17.460
used the letters plain and simple.

00:11:17.460 --> 00:11:20.600
We'll be showing that in a little bit.

00:11:20.740 --> 00:11:22.790
So this is how it all fits together.

00:11:22.910 --> 00:11:28.300
At the middle is ATSUI,
and everything is going through

00:11:28.300 --> 00:11:30.700
it for text rendering on Mac OS X.

00:11:30.810 --> 00:11:34.030
You, the developer,
are writing a Carbon application or

00:11:34.030 --> 00:11:36.370
you're writing a Cocoa application.

00:11:36.400 --> 00:11:41.190
Some examples here of applications which
are Carbon apps and are using ATSUI,

00:11:41.400 --> 00:11:43.600
the Finder, Sherlock, Help Viewer.

00:11:43.720 --> 00:11:46.490
If you're Carbon,
you might be going through the

00:11:46.650 --> 00:11:49.000
Carbon UI text handling routines.

00:11:49.120 --> 00:11:52.490
That is to say you might be
taking advantage of something

00:11:52.490 --> 00:11:54.400
such as the ThemeText APIs.

00:11:54.400 --> 00:11:57.600
You might be using
Multilingual Text Engine.

00:11:57.700 --> 00:12:00.280
You might be using the
HTML rendering APIs.

00:12:00.570 --> 00:12:03.170
If you're using those,
you are using ATSUI because

00:12:03.190 --> 00:12:04.900
they're all calling into it.

00:12:04.910 --> 00:12:05.300
Or you might decide that you want
to use the HTML rendering APIs.

00:12:05.300 --> 00:12:09.260
Cocoa is similar.

00:12:09.420 --> 00:12:12.740
If you're writing a Cocoa application,
you almost certainly will be

00:12:12.780 --> 00:12:16.500
using the app kit for most of,
if not all, of your text handling.

00:12:16.500 --> 00:12:19.040
If you do that, again, it's using ATSUI.

00:12:19.250 --> 00:12:23.290
Or it's possible that you might
want to access ATSUI directly.

00:12:23.300 --> 00:12:26.090
So it's there,
no matter what you're doing.

00:12:26.100 --> 00:12:27.100
So that's the first thing.

00:12:27.990 --> 00:12:30.790
Now, ATSUI itself is calling into
a number of different systems.

00:12:30.840 --> 00:12:34.890
It can use Quick Draw Text in
order to draw the text,

00:12:34.950 --> 00:12:38.390
or if you prefer,
it can be used in Quartz.

00:12:38.860 --> 00:12:41.030
And down at the bottom,
we have Apple Type Services.

00:12:41.030 --> 00:12:43.700
This is what gives ATSUI most
of its typographic power.

00:12:43.700 --> 00:12:47.290
This is a very sophisticated
text layout engine.

00:12:47.430 --> 00:12:50.300
It has been available on the
Macintosh for a number of years,

00:12:50.490 --> 00:12:54.040
and as time has gone on,
it has become more and more central.

00:12:54.180 --> 00:13:00.230
So ATSUI is using ATS,
and other people are using

00:13:00.230 --> 00:13:03.180
ATSUI to get to text.

00:13:03.180 --> 00:13:03.180
Namely,

00:13:03.540 --> 00:13:07.530
Large number of list of people
who are using ATSUI right now.

00:13:07.530 --> 00:13:09.140
And again,
this is something very important.

00:13:09.140 --> 00:13:12.710
We are shifting the system
over to ATSUI ourselves.

00:13:12.730 --> 00:13:13.970
We have shifted it.

00:13:14.770 --> 00:13:16.340
The Finder is using ATSUI.

00:13:16.350 --> 00:13:17.890
This is not true on OS 9.

00:13:17.890 --> 00:13:19.550
This is true on OS 10.

00:13:19.550 --> 00:13:23.960
This means that all of the
sophistication of UniCode is

00:13:24.000 --> 00:13:26.990
available to file and folder names.

00:13:28.330 --> 00:13:30.210
HFS+ has allowed this for some time.

00:13:30.210 --> 00:13:32.840
The Finder is now allowing
us to see these things,

00:13:32.840 --> 00:13:34.810
to draw them correctly,
to see them correctly.

00:13:34.890 --> 00:13:35.610
Here we have an example.

00:13:35.680 --> 00:13:37.560
It's rather hard to see, unfortunately.

00:13:37.780 --> 00:13:38.880
We have Latin.

00:13:38.880 --> 00:13:40.440
We have Japanese.

00:13:40.440 --> 00:13:42.520
We have a number of smudges.

00:13:42.520 --> 00:13:46.290
Towards the end of these smudges,
we do have some "yee," which

00:13:46.290 --> 00:13:48.800
is a new script in UniCode 3.0.

00:13:48.800 --> 00:13:56.020
We have some "oem." We have "runic."
We have "Cherokee," "Cyrillic," and the

00:13:56.020 --> 00:13:58.280
last one I know is a Mongolian letter.

00:13:58.280 --> 00:13:59.480
um

00:14:00.930 --> 00:14:03.910
And this is possible to
type in any file name,

00:14:03.950 --> 00:14:04.830
in any folder name.

00:14:04.830 --> 00:14:08.180
You can just use these and they will
work automatically because the Finder is

00:14:08.180 --> 00:14:10.900
using ATSUI for file and folder names.

00:14:10.900 --> 00:14:16.610
All the HI text for both Carbon and
Cocoa is going through ATSUI.

00:14:16.860 --> 00:14:23.110
Menus, Window Title Bars,
Dialog Box Elements are

00:14:23.220 --> 00:14:25.190
all being drawn with ATSUI.

00:14:25.950 --> 00:14:31.900
So the entire UI that you're experiencing
on Mac OS X is going through ATSUI,

00:14:31.920 --> 00:14:34.370
can use all of UniCode.

00:14:34.680 --> 00:14:36.420
Cocoa, of course.

00:14:36.450 --> 00:14:39.480
Cocoa is calling into ATSUI.

00:14:39.490 --> 00:14:44.510
UniCode is the character
set internally for Cocoa.

00:14:44.670 --> 00:14:47.960
When you create a CFString,
you're creating a UniCode text.

00:14:48.100 --> 00:14:52.360
When you draw it on Cocoa,
you're drawing it through ATSUI.

00:14:52.360 --> 00:14:54.770
The Help Viewer is using ATSUI.

00:14:54.910 --> 00:14:57.560
Sherlock,
when it brings back results to you,

00:14:57.560 --> 00:14:58.410
is using ATSUI.

00:14:58.600 --> 00:15:01.670
We have the Multilingual Text Engine,
MLTE.

00:15:01.670 --> 00:15:03.970
This is our text edit replacement.

00:15:04.110 --> 00:15:06.470
It will be discussed in
some detail tomorrow.

00:15:06.590 --> 00:15:08.570
That's using ATSUI.

00:15:08.600 --> 00:15:11.330
And of course,
the list is continuing to grow.

00:15:11.890 --> 00:15:17.360
Fundamentally, UniCode is Mac OS X's
native character set.

00:15:17.500 --> 00:15:23.270
Think of all text as being UniCode.

00:15:24.140 --> 00:15:24.400
And ATSUI is the way to draw.

00:15:25.080 --> 00:15:26.840
Unicode Text on OS X.

00:15:27.100 --> 00:15:31.700
Now given the fact that there are a
large number of APIs that are available

00:15:32.110 --> 00:15:36.290
that themselves take advantage of ATSUI,
the natural question is,

00:15:36.290 --> 00:15:38.030
when do I want to do it myself?

00:15:38.160 --> 00:15:43.090
Why might I want to do it myself?

00:15:43.090 --> 00:15:44.580
There are a number of situations where
you might want to call ATSUI yourself.

00:15:44.820 --> 00:15:51.540
First of all, you may need fine control
over the display of the text.

00:15:52.160 --> 00:15:56.500
For example, you might want to tweak the
positions of the glyphs manually

00:15:56.500 --> 00:15:59.060
above and beyond what ATSUI does.

00:15:59.270 --> 00:16:03.820
You might want to draw text
at an angle or along a path.

00:16:03.820 --> 00:16:09.370
One very prominent example would
be to have control over the exact

00:16:09.370 --> 00:16:13.060
positioning of individual lines.

00:16:13.060 --> 00:16:15.660
You want text to wrap around a graphic.

00:16:15.830 --> 00:16:19.610
For those sorts of situations,
you would be using ATSUI

00:16:20.500 --> 00:16:24.580
There may be certain
features of ATSUI which other

00:16:24.610 --> 00:16:27.200
APIs do not make available.

00:16:27.200 --> 00:16:29.160
Vertical text is an example.

00:16:29.270 --> 00:16:33.150
Not all of the ATSUI clients
themselves support vertical text.

00:16:33.230 --> 00:16:35.530
So in this sort of a case,
you would want to use ATSUI yourself.

00:16:35.730 --> 00:16:38.630
More sophisticated control
over justification.

00:16:38.760 --> 00:16:42.330
This is available in ATSUI,
may not be available in a client,

00:16:42.330 --> 00:16:44.460
so you would use ATSUI yourself.

00:16:44.500 --> 00:16:46.920
Optical alignment, things like that.

00:16:47.000 --> 00:16:49.820
Finally, of course,
you may be somebody who is writing

00:16:49.820 --> 00:16:51.470
your own text editing engine.

00:16:51.500 --> 00:16:54.690
You don't want to use MLTE,
you're writing your own.

00:16:54.730 --> 00:16:57.350
And in that case,
the best thing to do would

00:16:57.360 --> 00:16:58.630
be to call into ATSUI.

00:16:58.640 --> 00:17:03.980
That way you get all of its power,
and you get all of UniCode.

00:17:05.380 --> 00:17:10.240
All right, so what does it provide you?

00:17:10.360 --> 00:17:13.870
Again, everything in UniCode 3.0.

00:17:14.580 --> 00:17:17.820
With one caveat,
and that caveat is fonts.

00:17:17.940 --> 00:17:21.500
ATSUI is limited by the
set of installed fonts.

00:17:21.500 --> 00:17:25.400
Although we have a very
rich set of fonts on OS X,

00:17:25.490 --> 00:17:30.490
some really beautiful fonts on OS X,
we do not have...

00:17:30.870 --> 00:17:33.800
A font that covers all of UniCode 3.0.

00:17:33.980 --> 00:17:37.000
Well, we have the last resort font,
but that's...

00:17:37.580 --> 00:17:50.190
ATSUI does support vertical text.

00:17:50.310 --> 00:17:53.440
This is enormously
important in East Asia.

00:17:53.580 --> 00:17:57.800
Traditionally,
East Asian text was displayed vertically,

00:17:57.930 --> 00:18:01.740
with the lines going right
to left across the page,

00:18:01.780 --> 00:18:04.600
or in Mongolia,
left to right across the page.

00:18:04.600 --> 00:18:07.260
This is something which
is supported by ATSUI,

00:18:07.340 --> 00:18:11.740
and it is something which is
still required in East Asia.

00:18:11.740 --> 00:18:16.380
Newspapers and other publications are
using this sort of thing all the time.

00:18:16.440 --> 00:18:19.890
ATSUI supports advanced typography,
kerning,

00:18:20.740 --> 00:18:25.600
letters shifting relative to each
other to get the optimum appearance,

00:18:25.700 --> 00:18:28.620
optical alignment,
letters shifting relative

00:18:28.620 --> 00:18:31.690
to the margin to create the
illusion of a smooth margin.

00:18:31.740 --> 00:18:35.520
It's a strange fact of human
psychology that artists have

00:18:35.520 --> 00:18:37.020
been exploiting for literature.

00:18:37.100 --> 00:18:38.430
Literally millennia.

00:18:38.630 --> 00:18:40.980
For some reason,
a straight line does not look

00:18:40.980 --> 00:18:42.670
straight to human beings.

00:18:42.830 --> 00:18:47.740
So we can adjust the actual margin
to make it look like it's straight.

00:18:47.740 --> 00:18:49.260
Variation fonts.

00:18:49.360 --> 00:18:52.040
This is similar to the
multiple master technology,

00:18:52.040 --> 00:18:54.130
which has been available in the past.

00:18:54.130 --> 00:18:58.370
Font can have alterations in
something over a continuous range.

00:18:58.370 --> 00:19:02.190
You can have a font that has a
continuous variation in weight

00:19:02.200 --> 00:19:04.390
or width or something like that.

00:19:04.400 --> 00:19:06.770
This is available through ATSUI.

00:19:06.780 --> 00:19:10.780
You can have a font that has a
continuous variation in weight

00:19:10.780 --> 00:19:12.280
or width or something like that.

00:19:12.520 --> 00:19:17.410
ATSUI has APIs to help you
if you are writing an editor,

00:19:18.530 --> 00:19:18.600
highlighting,

00:19:18.740 --> 00:19:21.670
Hit mapping, cursor positioning,
things of this sort are

00:19:22.220 --> 00:19:23.840
available through ATSUI APIs.

00:19:23.840 --> 00:19:28.240
And, relatively new,
ATSUI also provides now low-level access

00:19:28.240 --> 00:19:33.240
to glyph outlines and to the details of
the glyph array that it's going to draw.

00:19:33.240 --> 00:19:36.170
This allows you, the developer,
to do fancy things with the

00:19:36.170 --> 00:19:39.750
glyph outlines if you want,
or it allows you to have fine control

00:19:39.810 --> 00:19:41.730
over the display of the glyphs.

00:19:41.760 --> 00:19:43.810
So how does it work?

00:19:43.900 --> 00:19:47.980
Point number one, it uses Unicode.

00:19:49.510 --> 00:19:54.770
All text that ATSUI deals
with must be UniCode.

00:19:55.080 --> 00:19:59.440
This was a decision we made to
simplify the design enormously.

00:19:59.440 --> 00:20:02.730
We have the Text Encoding Converter,
which is a very powerful

00:20:03.950 --> 00:20:07.040
Conversion Engine for
various text encodings.

00:20:07.040 --> 00:20:10.810
You can use that if necessary
to turn the text into UniCode.

00:20:11.030 --> 00:20:14.890
Now when we say UniCode,
we mean what is called UTF-16.

00:20:14.910 --> 00:20:19.080
There are three ways of
representing UniCode on computers,

00:20:19.090 --> 00:20:21.580
what are called encoding forms.

00:20:22.000 --> 00:20:27.080
There's UTF-8, which is byte-oriented,
and this is very popular on

00:20:27.080 --> 00:20:32.170
the web because UTF-8 has the
advantage that old text editors

00:20:32.170 --> 00:20:34.540
and Unix tools will work with it.

00:20:34.640 --> 00:20:38.000
There's UTF-16,
which is double-byte-oriented,

00:20:38.000 --> 00:20:41.290
and then there's UTF-32,
which is fairly new and is

00:20:41.290 --> 00:20:43.230
quadruple-word-oriented.

00:20:43.270 --> 00:20:44.770
Everything is exactly four bytes.

00:20:45.770 --> 00:20:50.880
UTF-16 is the encoding form for ATSUI.

00:20:50.950 --> 00:20:54.090
Use the TEC if you need
to in order to convert,

00:20:54.090 --> 00:20:56.630
and you own the text.

00:20:56.640 --> 00:20:58.720
You do not give it away to ATSUI.

00:20:58.720 --> 00:20:59.660
You keep it.

00:20:59.660 --> 00:21:01.660
You tell ATSUI where it is in memory.

00:21:01.660 --> 00:21:04.640
You tell ATSUI what part
of it you want to draw.

00:21:04.660 --> 00:21:08.760
ATSUI takes care of all of that,
but you are the owner of the text.

00:21:08.830 --> 00:21:10.650
The text buffer is yours.

00:21:11.520 --> 00:21:15.800
Beyond that,
there are two opaque classes,

00:21:15.850 --> 00:21:18.940
two objects that are used in ATSUI,
and these are the core

00:21:18.940 --> 00:21:20.740
of how ATSUI works.

00:21:20.880 --> 00:21:26.630
The first is the ATSU style,
and the second is the ATSU text layout.

00:21:27.020 --> 00:21:29.560
An ATSUI style is an opaque
structure that contains,

00:21:29.790 --> 00:21:33.340
basically, all of the style
information for the text.

00:21:33.470 --> 00:21:37.600
The font, this is an ATSUI font ID.

00:21:37.730 --> 00:21:42.940
This is identical to the IDs that you're
getting back from the new font manager.

00:21:43.100 --> 00:21:45.250
These are, however,
different from what you would

00:21:45.260 --> 00:21:47.940
have gotten in the past from
the old QuickDraw font manager.

00:21:48.090 --> 00:21:51.090
However,
there are routines to do the conversion.

00:21:51.200 --> 00:21:53.860
So we have the font ID,
we have things like the point size.

00:21:53.930 --> 00:21:56.790
The point size is now a fixed.

00:21:56.890 --> 00:21:59.780
It is not an int,
as was the case with QuickDrawText.

00:21:59.780 --> 00:22:03.100
Again, this is one reason why
you might want to migrate.

00:22:03.260 --> 00:22:05.660
Color is settable.

00:22:05.770 --> 00:22:08.260
Font features.

00:22:08.400 --> 00:22:10.860
Font features are inside of the fonts.

00:22:10.990 --> 00:22:15.230
This is basically the font's list of
all the fancy things that it can do.

00:22:15.500 --> 00:22:18.640
So you get that list,
you find out what's available,

00:22:18.640 --> 00:22:21.080
you ask the user which
ones they want to use,

00:22:21.180 --> 00:22:23.600
and then you can set
those in an ATSUI style.

00:22:23.800 --> 00:22:27.360
It's a long list of things that are
set up--setable in an ATSUI style,

00:22:27.360 --> 00:22:31.240
and in point of fact,
it is possible for you to create your own

00:22:31.240 --> 00:22:34.010
style information that you can attach.

00:22:34.200 --> 00:22:36.940
ATSUI styles are reusable.

00:22:37.050 --> 00:22:39.630
So if you have a particular
style which is used in two

00:22:39.920 --> 00:22:42.680
different places in your text,
you can use the same

00:22:42.810 --> 00:22:44.500
style object for them.

00:22:44.620 --> 00:22:46.230
And it's recommended that
you keep these around.

00:22:46.240 --> 00:22:48.840
These are lightweight objects.

00:22:49.090 --> 00:22:49.870
They're easy to use.

00:22:49.940 --> 00:22:51.940
They're cheap to keep.

00:22:52.070 --> 00:22:55.730
So use them, share them,
do whatever you want with them.

00:22:56.400 --> 00:23:00.480
Now the ATSUI text layout is
the real workhorse of ATSUI.

00:23:00.580 --> 00:23:02.740
This is where all the layout
information is stored.

00:23:02.740 --> 00:23:04.260
This is where all of
the work is being done.

00:23:04.260 --> 00:23:05.900
This is an opaque structure.

00:23:05.900 --> 00:23:09.340
It ties the text together,
and it ties the runs of ATSUI style.

00:23:09.340 --> 00:23:11.600
So you tell it where
the text is in memory.

00:23:11.710 --> 00:23:17.990
You tell it how you want styles
to be associated with that text,

00:23:17.990 --> 00:23:17.990
and then it does all of the work.

00:23:18.640 --> 00:23:22.330
Now, one important thing,
and this is different from QuickDrawText,

00:23:22.330 --> 00:23:25.340
is that ATSUI text layouts
work on a per-paragraph basis.

00:23:25.510 --> 00:23:28.680
Well, not a per-paragraph,
on at least a paragraph level.

00:23:28.750 --> 00:23:31.390
One of the features of UniCode
is that it has what are

00:23:31.390 --> 00:23:34.150
called bidirectional problems,
instances where part

00:23:34.340 --> 00:23:36.840
of the text is going,
I have to make sure I do this

00:23:37.120 --> 00:23:40.350
correctly from your point of view,
left to right across the page,

00:23:40.350 --> 00:23:43.170
and some of it's going right
to left across the page.

00:23:43.170 --> 00:23:48.480
Okay, when you try to mix those together,
it can get a little bit more complicated.

00:23:48.500 --> 00:23:52.460
UniCode has a standard
bidirectional algorithm for

00:23:52.460 --> 00:23:55.500
handling these sorts of situations.

00:23:55.500 --> 00:23:57.930
In order to use it,
ATSUI needs to have an entire

00:23:57.930 --> 00:23:59.860
paragraph of text to work with.

00:23:59.950 --> 00:24:02.480
So you hand ATSUI an entire paragraph.

00:24:02.480 --> 00:24:05.110
You can tell it where you
want to break the lines,

00:24:05.210 --> 00:24:08.190
you can ask it where it thinks
you should break the lines.

00:24:08.190 --> 00:24:11.070
It's all very simple to do,
but you are working on

00:24:11.090 --> 00:24:12.550
the paragraph level.

00:24:12.560 --> 00:24:15.670
Once you have your ATSUI text
layout and you've associated

00:24:15.670 --> 00:24:18.480
the styles with the text,
there are other things you can add to it.

00:24:18.500 --> 00:24:23.270
You can add to the layout object
other bits and pieces of information.

00:24:23.290 --> 00:24:25.590
Line attributes,
this is where justification

00:24:25.590 --> 00:24:26.460
is controlled.

00:24:26.790 --> 00:24:29.490
This is where rotation is controlled.

00:24:29.580 --> 00:24:32.410
This is where the direction of the
individual letters is controlled.

00:24:32.500 --> 00:24:38.490
And it is the ATSUI text layout
object which owns or which

00:24:38.520 --> 00:24:45.600
knows about the CGE context if
you're going to be using Quartz.

00:24:47.090 --> 00:24:52.900
You should be caching these if you at
all can to take advantage of them later.

00:24:53.000 --> 00:24:54.100
So, some examples again.

00:24:54.100 --> 00:24:55.180
We've gone over these.

00:24:55.270 --> 00:25:01.420
The font, the point size, the color,
verticality, width,

00:25:01.420 --> 00:25:02.500
and cross-stream shifting.

00:25:02.500 --> 00:25:06.900
That is, you might be moving the letters
back and forth or up and down.

00:25:06.980 --> 00:25:08.890
This is, for example,
very handy if you're trying to

00:25:08.890 --> 00:25:11.000
do superscripts or subscripts.

00:25:11.130 --> 00:25:11.980
Kerning control.

00:25:11.980 --> 00:25:14.360
Not only are you taking
advantage of the kerning,

00:25:14.370 --> 00:25:16.840
which is built into the fonts,
but you can override it.

00:25:16.960 --> 00:25:19.980
Optical alignment, hanging punctuation,
and so on.

00:25:20.190 --> 00:25:20.820
Font features.

00:25:20.820 --> 00:25:23.320
Again, this is the set of ligatures
that is in the font.

00:25:23.440 --> 00:25:26.490
This is the set of swashes,
which is in the font.

00:25:26.630 --> 00:25:28.870
These are the variant glyphs,
which are available in the font.

00:25:29.000 --> 00:25:31.580
And again, font variations.

00:25:31.580 --> 00:25:34.770
Continuously varying weight, width.

00:25:34.990 --> 00:25:37.000
You could have slant angle.

00:25:37.000 --> 00:25:39.900
There have been some really cute
things done with variation fonts.

00:25:40.000 --> 00:25:44.900
And of course, line layout controls,
rotation, justification, flushness,

00:25:44.900 --> 00:25:47.960
baseline, your CG context,
things like this.

00:25:48.580 --> 00:25:49.980
Okay.

00:25:49.990 --> 00:25:52.000
So,
that's an overview of how Atsui works.

00:25:52.000 --> 00:25:55.000
Now we're going to go through
some more detailed examples.

00:25:55.000 --> 00:25:59.000
We're going to bring up Peter Edberg,
senior software engineer at Apple,

00:25:59.000 --> 00:26:01.980
who is responsible for much of
the work being done on Atsui,

00:26:01.980 --> 00:26:02.990
even as we speak.

00:26:03.000 --> 00:26:03.870
Okay.

00:26:03.870 --> 00:26:05.000
Thanks.

00:26:05.000 --> 00:26:07.000
He'll be back.

00:26:09.560 --> 00:26:11.720
Okay,
the way we're going to discuss this is in

00:26:11.770 --> 00:26:15.200
the context of three specific examples.

00:26:15.200 --> 00:26:18.330
We have three case studies,
one for use of CG or

00:26:18.330 --> 00:26:22.330
quartz drawing with ATSUI,
one for equation drawing,

00:26:22.340 --> 00:26:25.140
and one for vertical text.

00:26:25.300 --> 00:26:27.980
You'll notice a lot of
parallelism among these examples,

00:26:28.030 --> 00:26:30.680
and that's one of the key
points we want to illustrate,

00:26:30.680 --> 00:26:35.150
which is that there's a particular
code idiom that you use for setting

00:26:35.360 --> 00:26:38.450
up styles and layouts with ATSUI.

00:26:38.460 --> 00:26:41.460
And once you've got the
code to do these things,

00:26:41.600 --> 00:26:45.630
then basically everything you
do is using the same code idiom,

00:26:46.050 --> 00:26:50.060
just with variations in what particular
tags you use and the particular

00:26:50.060 --> 00:26:51.490
values you associate with them.

00:26:51.500 --> 00:26:56.430
But basically, almost all the effects
are done in the same way.

00:26:57.570 --> 00:27:01.080
We'll go through the first
example in the greatest detail,

00:27:01.080 --> 00:27:03.980
and that's the one that illustrates
the fundamentals of this code

00:27:04.020 --> 00:27:05.810
idiom that we're referring to.

00:27:05.820 --> 00:27:09.120
Okay,
so the first example is ATSUI with CG.

00:27:09.120 --> 00:27:14.330
The first thing that you need
to do is create a style object.

00:27:14.410 --> 00:27:16.960
These are what John described.

00:27:16.960 --> 00:27:19.310
Then you need to add the
attributes to the styles,

00:27:19.310 --> 00:27:21.340
and we have bulk setters
that can do this.

00:27:21.490 --> 00:27:24.030
So you can set a whole
bunch of attributes into the

00:27:24.070 --> 00:27:25.590
style with a single call.

00:27:25.600 --> 00:27:29.850
So we have triples of basically a tag
that specifies the type of thing that

00:27:29.850 --> 00:27:31.970
you're trying to set in the style.

00:27:31.980 --> 00:27:37.750
Another value that specifies the
size of the data for that tag.

00:27:37.760 --> 00:27:42.030
And then the third value is a
pointer to the actual data that you

00:27:42.140 --> 00:27:44.660
want to associate with that tag.

00:27:44.660 --> 00:27:48.790
And this way you can have variable size
data elements associated with the tag.

00:27:48.900 --> 00:27:53.230
So for example, an RGB color would be
three 16-bit values.

00:27:53.280 --> 00:27:54.920
Others would be longer.

00:27:54.920 --> 00:27:55.580
Others would be shorter.

00:27:55.600 --> 00:27:57.010
order.

00:27:57.200 --> 00:31:03.000
[Transcript missing]

00:31:03.900 --> 00:31:06.630
And finally, then,
you set your layout controls

00:31:06.640 --> 00:31:08.450
in the Layout object.

00:31:08.460 --> 00:31:12.590
In this case, we've only got one,
which is the CG Context.

00:31:12.700 --> 00:31:14.910
Now,
where you get that CG Context from is,

00:31:14.920 --> 00:31:17.720
again, the subject of a couple
of other sessions.

00:31:17.720 --> 00:31:20.410
If you're working
purely in Core Graphics,

00:31:20.500 --> 00:31:23.180
in Quartz,
the approach was discussed in the

00:31:23.180 --> 00:31:25.900
session this morning on 2D graphics.

00:31:25.900 --> 00:31:30.960
If you're working in a mixture
of Quick Draw and Core Graphics,

00:31:30.960 --> 00:31:35.000
there's a session Friday,
Graphics Tips and Tricks,

00:31:35.000 --> 00:31:37.200
that will show you how
to get a CG Context,

00:31:37.200 --> 00:31:39.480
for example, from a GraphPort, etc.

00:31:39.480 --> 00:31:42.040
Anyway,
that's not the subject of this session.

00:31:42.040 --> 00:31:44.560
Let's assume you get a
CG Context from somewhere.

00:31:44.560 --> 00:31:47.560
What you do is, again,
you set that into your layout.

00:31:47.560 --> 00:31:50.820
Now, that's something that would
apply to the entire layout.

00:31:50.820 --> 00:31:53.030
There are some other tags
that you can specify on a

00:31:53.040 --> 00:31:55.950
line-by-line basis in the layout,
and we'll talk about

00:31:56.020 --> 00:31:57.460
that a little bit later.

00:31:57.690 --> 00:32:00.790
Okay, and then the final thing
you can do is draw it.

00:32:00.990 --> 00:32:05.190
Now, as was mentioned earlier,
Atsui is integrated with

00:32:05.190 --> 00:32:07.360
the CG Context effects.

00:32:07.440 --> 00:32:10.270
And so before drawing,
you could set up those effects.

00:32:10.460 --> 00:32:12.930
So if you wanted to do
rotation with Core Graphics

00:32:13.040 --> 00:32:17.230
or any of the other effects,
you would set those into the CG Context.

00:32:17.410 --> 00:32:21.040
The example call here is
the CG Context Rotate CTM.

00:32:21.040 --> 00:32:22.870
You go ahead and draw the text.

00:32:23.040 --> 00:32:26.440
Also, if you went to the 2D
graphics session this morning,

00:32:26.900 --> 00:32:29.690
you'll remember that Cort's
drawing is double buffered.

00:32:29.700 --> 00:32:32.590
So if you want your text to
appear on the screen immediately,

00:32:32.660 --> 00:32:35.880
you need to call the
CG Context Flush call.

00:32:37.920 --> 00:32:39.940
Okay, and this is the result
that you would get.

00:32:39.940 --> 00:32:43.970
Again, you would get rotated text
with a nice anti-aliasing.

00:32:44.610 --> 00:32:48.430
Okay, now for the next two examples,
we'll go through them in a little

00:32:48.430 --> 00:32:51.990
bit more abbreviated fashion,
just to give you the flavor of them.

00:32:52.000 --> 00:32:55.140
But again, you'll notice that they
all look pretty familiar,

00:32:55.140 --> 00:32:58.700
because they're all based on
the same sequence of calls,

00:32:58.700 --> 00:33:00.450
sometimes repeated a
little bit more often.

00:33:00.480 --> 00:33:03.770
Okay, suppose we wanted to do
some equation display,

00:33:03.770 --> 00:33:06.660
where you had subscripts or superscripts.

00:33:06.660 --> 00:33:10.500
And this could get fairly sophisticated
if you have limits for integrals

00:33:10.500 --> 00:33:12.530
or summations and things like that.

00:33:13.290 --> 00:33:16.440
Typically, what you would do is you could
create multiple style objects.

00:33:16.500 --> 00:33:18.720
As John mentioned,
you could keep these around,

00:33:18.720 --> 00:33:21.180
so you don't need to create
them for a particular drawing

00:33:21.210 --> 00:33:22.560
call and dispose of them.

00:33:22.580 --> 00:33:26.510
You would keep them around for whenever
you needed to draw subscripted text,

00:33:26.630 --> 00:33:28.590
subscripts or superscripts, etc.

00:33:28.600 --> 00:33:32.100
So you could create one for
your basic equation text,

00:33:32.360 --> 00:33:33.580
say a norm style.

00:33:33.580 --> 00:33:36.240
You could create one for
your subscripted text,

00:33:36.430 --> 00:33:40.330
and again, it would differ in that it
would have a smaller font size.

00:33:40.380 --> 00:33:43.000
It would be shifted
down below the baseline.

00:33:43.160 --> 00:33:47.280
and something parallel
to that for superscripts.

00:33:48.400 --> 00:33:51.520
In this case, the features that
you're going to use are,

00:33:51.550 --> 00:33:53.880
the two features are both style features.

00:33:53.990 --> 00:33:56.660
One is the CrossStream Shift tag,
which we're going to use for the

00:33:56.660 --> 00:33:58.900
superscripting or subscripting.

00:33:58.900 --> 00:34:03.850
And then the Font Size tag to get the
smaller size for the super or subscript.

00:34:04.350 --> 00:34:06.140
Again, you would need to create a style.

00:34:06.140 --> 00:34:09.340
Typically, you would start out
with the normal style,

00:34:09.340 --> 00:34:12.380
and you would set up your font
and size as described before,

00:34:12.380 --> 00:34:14.720
and use the bulk setter to set those.

00:34:14.780 --> 00:34:18.100
Now, there's a new call here,
Create and Copy Style.

00:34:18.100 --> 00:34:22.170
So you could create a second style
that would inherit the font and

00:34:22.320 --> 00:34:24.470
size from your original style.

00:34:24.480 --> 00:34:28.830
And then you could override or
add specific style features.

00:34:28.950 --> 00:34:32.570
In this case, what we want to specify
is the cross stream shift,

00:34:32.590 --> 00:34:37.490
and you would specify a particular value
for the cross stream shift in points.

00:34:37.500 --> 00:34:41.970
You would specify the size,
which would be smaller in this case,

00:34:41.970 --> 00:34:45.710
and then you would again use
the bulk setter to set those

00:34:45.710 --> 00:34:49.990
values into your substyle,
your subscript style.

00:34:51.350 --> 00:34:56.180
You could, again, as described before,
create your text layout.

00:34:56.180 --> 00:34:58.510
And initially,
you could set the style for all

00:34:58.520 --> 00:35:00.340
the text to be your normal style.

00:35:00.340 --> 00:35:04.140
Again, here, we're using the bulk setter,
but we've only got a

00:35:04.170 --> 00:35:08.640
single style initially,
and a single length.

00:35:08.890 --> 00:35:14.150
Now, you could, in this one call,
if you wanted to, specify which runs of

00:35:14.170 --> 00:35:16.140
text are subscripted.

00:35:16.140 --> 00:35:18.280
So then you could do that
all with the create call,

00:35:18.380 --> 00:35:20.540
because it has this
bulk setting attribute.

00:35:21.050 --> 00:35:23.670
In this example, we've chosen to do it a
little bit differently.

00:35:23.680 --> 00:35:28.290
You could have a separate call
to specify a particular style,

00:35:28.360 --> 00:35:32.790
a different style, for particular runs of
the text in the layout.

00:35:32.800 --> 00:35:36.210
So you would just specify the
beginning and ending offset

00:35:36.310 --> 00:35:37.900
of the text for that run.

00:35:40.360 --> 00:35:44.340
Okay, and then this is an example
of what you could get.

00:35:44.340 --> 00:35:49.440
Again, for more sophisticated examples,
you could use width stream shifting,

00:35:49.440 --> 00:35:53.860
which for horizontal text would
shift in the left-right direction,

00:35:53.860 --> 00:35:57.900
and you might want to do that
for something like integral

00:35:58.010 --> 00:36:00.300
limits and summation limits.

00:36:00.460 --> 00:36:05.510
And bonus points to whoever
can come up and tell Debra

00:36:05.510 --> 00:36:09.090
afterward what this equation is.

00:36:12.000 --> 00:36:13.900
Fewer bonus points if
you're a physics major.

00:36:13.900 --> 00:36:19.120
Okay, the next example is vertical text.

00:36:19.280 --> 00:36:21.700
And again, this is one of the special
things that you would have to

00:36:21.700 --> 00:36:23.280
use ATSUI directly to achieve.

00:36:23.280 --> 00:36:27.620
Again, you would create the layout
and style objects as usual.

00:36:27.620 --> 00:36:30.640
Now, there are two things going on here.

00:36:30.640 --> 00:36:36.200
There's going to be a style,
and there's going to be a layout control.

00:36:36.200 --> 00:36:40.340
First of all, you have to set the style
to use the vertical form.

00:36:40.980 --> 00:36:44.110
Now, the vertical form of a glyph,
for many glyphs,

00:36:44.230 --> 00:36:46.340
will just be rotated by 90 degrees.

00:36:46.340 --> 00:36:49.060
In some cases,
there will be alternate forms,

00:36:49.210 --> 00:36:52.250
particularly for things like
parentheses and brackets and so on.

00:36:52.260 --> 00:36:55.570
Then you have to rotate
the line or the layout.

00:36:55.580 --> 00:36:59.430
And you could use Core Graphics for that.

00:36:59.440 --> 00:37:00.500
You could use Quartz for that.

00:37:00.770 --> 00:37:04.460
But if you want to use the
ATSUI editing APIs for hit testing,

00:37:04.460 --> 00:37:08.120
for example, for highlighting and so on,
it's more convenient to use those

00:37:08.120 --> 00:37:11.350
if you use the ATSUI rotation,
because then you don't have

00:37:11.430 --> 00:37:14.420
to do the back transformation
of the points yourself.

00:37:17.710 --> 00:37:19.190
Okay, again,
the features we're going to use

00:37:19.240 --> 00:37:22.080
are the vertical character tag,
which is a style tag,

00:37:22.080 --> 00:37:25.820
and the line rotation tag,
which is a layout tag.

00:37:25.860 --> 00:37:31.140
So, as usual, you've seen this before,
we set up a style object,

00:37:31.140 --> 00:37:34.150
we set the vertical character tag.

00:37:34.160 --> 00:37:40.250
Now, the tag, vertical character tag,
can be associated with several values,

00:37:40.250 --> 00:37:42.700
and one of them would
be strongly horizontal,

00:37:42.770 --> 00:37:44.920
another one of them would
be strongly vertical.

00:37:45.460 --> 00:37:47.620
So, in this case,
the tag that we're specifying

00:37:47.620 --> 00:37:50.400
is vertical character,
and the value that we're specifying

00:37:50.490 --> 00:37:52.100
is the strongly vertical value.

00:37:52.120 --> 00:37:55.450
So, just specifying the tag doesn't
force it to be vertical.

00:37:57.070 --> 00:38:00.090
Okay, so we're going to set
up a style with that,

00:38:00.090 --> 00:38:02.120
and then we're going to
apply it in this particular,

00:38:02.120 --> 00:38:05.950
in this first example,
to all the text in the layout.

00:38:06.510 --> 00:38:09.300
Now, you don't need to do that,
and we'll show some more

00:38:09.300 --> 00:38:17.210
sophisticated examples later on,
where you apply that vertical style only

00:38:17.210 --> 00:38:17.210
to some of the characters in the layout.

00:38:18.580 --> 00:38:22.430
Okay,
now if you want to use ATSUI rotation,

00:38:22.450 --> 00:38:26.690
again you would use the layout
attribute or the line attribute.

00:38:26.910 --> 00:38:29.480
We're using a right-handed
coordinate system,

00:38:29.590 --> 00:38:34.190
so you want to rotate 90 degrees to
get your starting point at the top.

00:38:34.270 --> 00:38:36.830
Okay,
so you're going to use minus 90 degrees,

00:38:37.030 --> 00:38:42.040
and the tag for the layout
attribute is the line rotation tag.

00:38:42.050 --> 00:38:43.430
The value is a fixed.

00:38:43.560 --> 00:38:47.230
And again, we're going to apply this to
all the text in the layout.

00:38:47.260 --> 00:38:50.080
Okay,
the result would be something like this.

00:38:50.250 --> 00:38:52.310
Now,
this is just one way to do vertical text,

00:38:52.490 --> 00:38:55.540
and there are a lot of different
options for vertical text that we're

00:38:55.540 --> 00:38:56.760
going to go into in the next session.

00:38:56.900 --> 00:39:00.070
Okay, so as I alluded to,
there are really two

00:39:00.070 --> 00:39:03.380
things going on here,
and now we're going to separate

00:39:03.500 --> 00:39:06.160
them so you can see in a little
bit more detail what's going on.

00:39:06.160 --> 00:39:09.120
First, there are the vertical forms,
okay?

00:39:09.120 --> 00:39:13.380
And you see in the second line in
the top left that we have applied

00:39:13.380 --> 00:39:17.950
just the vertical forms style to
the text without rotating the line.

00:39:17.960 --> 00:39:20.800
And as you see,
the letters and the kanji are rotated,

00:39:20.800 --> 00:39:23.800
but the parentheses have
adopted a vertical form,

00:39:23.800 --> 00:39:26.720
which, when the line is rotated,
will be the proper orientation.

00:39:26.720 --> 00:39:29.080
So that's the rotation for vertical text.

00:39:29.360 --> 00:39:30.140
Okay?

00:39:30.370 --> 00:39:34.680
You could also not use the vertical style
of the glyph and just rotate the line,

00:39:34.680 --> 00:39:37.680
and then you see the example on the
left side of the vertical section.

00:39:37.680 --> 00:39:41.150
That's just the minus 90 degree rotation.

00:39:41.650 --> 00:39:42.340
Okay?

00:39:42.450 --> 00:39:45.700
And the last example,
the right side of the vertical section,

00:39:45.710 --> 00:39:47.630
has both of them going on at once.

00:39:49.300 --> 00:39:53.300
There are some more sophisticated
things that one can do.

00:39:53.300 --> 00:39:56.600
As I mentioned,
you don't need to apply the vertical

00:39:56.600 --> 00:39:58.900
form style to all the glyphs.

00:39:58.900 --> 00:40:00.760
You can apply it to
just a particular run.

00:40:00.800 --> 00:40:06.970
In this example, we've rotated the line,
but we've only applied the vertical style

00:40:07.280 --> 00:40:09.990
to the katakana portion of the line.

00:40:10.100 --> 00:40:13.860
That's a common example of how
some typesetting might be done

00:40:13.860 --> 00:40:15.760
for vertical text in Japan.

00:40:15.800 --> 00:40:18.750
There are some more
sophisticated examples,

00:40:18.750 --> 00:40:20.970
like the Tate-Chu Yoko example here.

00:40:21.380 --> 00:40:25.290
To achieve this effect,
and this is a little bit more complex,

00:40:25.740 --> 00:40:29.300
since rotation has to
be done on a line basis,

00:40:29.450 --> 00:40:32.680
what you have to do is tell ATSUI that
each of the segments that you're going

00:40:32.690 --> 00:40:35.300
to separately rotate is a separate line.

00:40:35.300 --> 00:40:41.300
And so you could set a soft line break
into the line before and after the 58,

00:40:41.310 --> 00:40:45.300
and then you would apply rotations
for three different segments.

00:40:45.570 --> 00:40:49.300
There would be three different
lines from ATSUI's point of view.

00:40:49.300 --> 00:40:53.290
So you would rotate the first and
the third portion by 90 degrees,

00:40:53.300 --> 00:40:54.740
but not the second portion.

00:40:54.800 --> 00:40:57.720
And again, the starting points for each
of those segments are going

00:40:57.840 --> 00:41:00.230
to have to be different,
so there's going to be a little

00:41:00.230 --> 00:41:02.190
bit of calculation involved there.

00:41:02.490 --> 00:41:03.930
Now, there are a large number of tags.

00:41:04.030 --> 00:41:07.400
We've only gone through
a few examples here.

00:41:07.630 --> 00:41:13.430
But there are about a little
over 10 tags that you can

00:41:13.530 --> 00:41:15.400
specify for layouts or lines.

00:41:15.430 --> 00:41:21.530
And there are over 25 tags that
you can specify for styles.

00:41:21.830 --> 00:41:23.440
And so with these,
you can achieve a large

00:41:23.440 --> 00:41:27.750
number of different effects,
all by using the same approach.

00:41:28.460 --> 00:41:31.230
And now to illustrate some of this
and show you how the system is

00:41:31.300 --> 00:41:34.830
making use of these techniques,
I'd like to ask John to

00:41:34.930 --> 00:41:36.400
come back up here.

00:41:36.490 --> 00:41:40.170
And we need machine two for the demo,
please.

00:41:47.800 --> 00:41:49.550
I'm not used to looking
down on my screen.

00:41:49.550 --> 00:41:53.140
This is just kind of weird.

00:41:53.140 --> 00:41:55.070
One really nice thing
actually this year is,

00:41:55.070 --> 00:41:58.450
you know, we've been giving
ATSUI demos for some time.

00:41:58.560 --> 00:42:04.830
One thing that's really nice is that
we can actually be showing it using all

00:42:04.830 --> 00:42:11.300
kinds of different parts of the system,
which we haven't been able

00:42:11.300 --> 00:42:12.500
to do before OS X came out.

00:42:12.500 --> 00:42:12.500
And we're going to start with our

00:42:12.740 --> 00:42:15.840
Favorite app, the Finder.

00:42:16.110 --> 00:42:18.400
We mentioned that the
Finder is now using ATSUI.

00:42:18.400 --> 00:42:22.160
This is really a marvelous,
marvelous thing that allows us to take

00:42:22.200 --> 00:42:26.180
advantage of the full multilingual
power of UniCode in file names.

00:42:26.300 --> 00:42:32.910
So I'm going to create here a new folder,
and I can start typing,

00:42:33.000 --> 00:42:40.340
and of course I can give it a very, oops,
if I can type, very, very, very, very,

00:42:40.340 --> 00:42:44.650
very long name, which is nice.

00:42:44.650 --> 00:42:49.910
Is that more than 31 letters?

00:42:51.840 --> 00:42:55.800
Okay, well, I'll make it that way.

00:42:55.830 --> 00:42:59.470
Copy, paste.

00:42:59.470 --> 00:42:59.470
Okay.

00:42:59.840 --> 00:43:04.170
So that's nice right there.

00:43:04.230 --> 00:43:05.970
It's nice to be able to
get away from that limit.

00:43:06.090 --> 00:43:10.640
But at the same time, now,
ever since System 9 came out,

00:43:10.640 --> 00:43:13.180
we have had UniCode input,
which is available.

00:43:13.250 --> 00:43:16.580
And the way you know whether
an application or a portion of

00:43:16.580 --> 00:43:20.080
the system is taking advantage
of UniCode when you edit is,

00:43:20.080 --> 00:43:22.220
are the UniCode editors enabled?

00:43:22.220 --> 00:43:23.330
And they are here.

00:43:24.040 --> 00:43:29.260
So I can use the extended Roman keyboard,
or I can use the UniCode hex input.

00:43:29.260 --> 00:43:34.500
I can switch to Coto-Array
for a minute here,

00:43:34.500 --> 00:43:36.490
and I can type...

00:43:38.400 --> 00:43:42.290
What was the second word?

00:43:42.340 --> 00:43:43.400
Anyway, I don't know.

00:43:43.400 --> 00:43:44.940
I can't even read that from where I am.

00:43:44.940 --> 00:43:46.390
I hope you can read
it from where you are.

00:43:46.390 --> 00:43:49.460
Hey, is that right?

00:43:49.460 --> 00:43:50.240
Okay.

00:43:52.340 --> 00:43:53.140
It sounds French?

00:43:53.370 --> 00:43:57.300
Okay.

00:43:57.300 --> 00:44:00.060
Everything sounds French if
you say it correctly.

00:44:00.060 --> 00:44:05.710
Anyway, here we have a quick and dirty
little input method that allows

00:44:05.760 --> 00:44:08.460
us to enter arbitrary Unicode.

00:44:08.460 --> 00:44:14.380
So I can type a Unicode letter
like "Snowman" and convert,

00:44:14.380 --> 00:44:16.320
and there we go.

00:44:16.320 --> 00:44:19.840
So I've inferred and inserted
the Snowman character,

00:44:19.840 --> 00:44:25.580
which is Unicode 2603,
into my--which I just happen to know.

00:44:25.580 --> 00:44:28.610
So I'm able to use arbitrary
Unicode here in my file names,

00:44:28.610 --> 00:44:31.410
and that's really,
really an enormously wonderful thing.

00:44:31.420 --> 00:44:34.280
Let me think.

00:44:35.900 --> 00:44:41.600
[Transcript missing]

00:44:44.320 --> 00:44:46.880
Okay, well,
I got the last resort glyph for...

00:44:46.940 --> 00:44:48.310
I mentioned the last resort font.

00:44:48.350 --> 00:44:50.340
I don't know how familiar
people are with it.

00:44:50.340 --> 00:44:53.240
Apple does, in fact,
ship a font that covers all of UniCode.

00:44:53.240 --> 00:44:54.560
It's called the last resort font.

00:44:54.560 --> 00:44:57.750
The last resort font is
not meant for reading.

00:44:57.750 --> 00:45:01.100
The purpose of the last resort
font is that it is a way for the

00:45:01.280 --> 00:45:05.560
system or an application to say,
hey, I don't have a font for this.

00:45:05.560 --> 00:45:08.700
In this particular case,
it's using the last resort

00:45:08.710 --> 00:45:10.430
character for Cherokee.

00:45:10.430 --> 00:45:13.130
And the goal is that
if the user sees that,

00:45:13.130 --> 00:45:15.400
they'll say, oh,
I need to go get a Cherokee font.

00:45:15.500 --> 00:45:18.720
And they run out and they get a
Cherokee font and they install it.

00:45:18.720 --> 00:45:22.690
This provides much,
much less system overhead.

00:45:22.810 --> 00:45:26.860
than would be the case with a full
Pan-Unicode font or series of fonts.

00:45:27.030 --> 00:45:31.020
And it has the advantage of, you know,
basically for those of us

00:45:31.020 --> 00:45:35.510
who don't read and write Yi,
we don't need to have a Yi font installed

00:45:35.520 --> 00:45:37.740
that we're never going to be using.

00:45:37.920 --> 00:45:44.080
So this is the Finder,
a marvelous demo app for ATSUI.

00:45:44.100 --> 00:45:47.300
Now we're going to move to another
marvelous demo app for ATSUI.

00:45:47.490 --> 00:45:48.530
TextEdit.

00:45:48.530 --> 00:45:52.880
Now we're using TextEdit here
as a sample of a text editing

00:45:53.090 --> 00:45:57.140
application that is written in Cocoa.

00:45:57.140 --> 00:46:03.270
Basically, what I'm about to show is
going to be true of any

00:46:03.840 --> 00:46:10.110
Text Editor that is using Cocoa.

00:46:10.110 --> 00:46:11.440
So, if I'm using mail.app,

00:46:11.570 --> 00:46:15.580
I can see what you can see
what I am about to show you.

00:46:15.580 --> 00:46:22.180
If you are using OmniWeb,
which is using Cocoa,

00:46:22.180 --> 00:46:22.180
anything which is using

00:46:22.430 --> 00:46:23.300
Hi.

00:46:23.300 --> 00:46:26.130
Anything which is using
Cocoa is going to do this.

00:46:26.140 --> 00:46:28.100
And we get some really nice stuff here.

00:46:28.100 --> 00:46:30.480
Now, again,
I've switched the font to Zapfino.

00:46:30.610 --> 00:46:33.860
Zapfino,
this is Herman Zapf's handwriting.

00:46:33.860 --> 00:46:37.320
Fortunately, no one will ever make a font
based on my handwriting.

00:46:37.400 --> 00:46:39.080
So now watch what's
happening as I'm typing,

00:46:39.080 --> 00:46:39.380
OK?

00:46:39.380 --> 00:46:41.560
I'm typing along.

00:46:42.580 --> 00:46:44.940
Notice what's happening to that P.

00:46:44.980 --> 00:46:48.890
That phenol happens
to have a PP ligature.

00:46:49.250 --> 00:46:52.140
This is not the sort of thing that
you typically expect a font to have.

00:46:52.430 --> 00:46:55.170
Hermann Zeth has one.

00:46:55.520 --> 00:46:58.960
or if I type F-I again,
is forming automatically.

00:46:58.960 --> 00:47:03.040
This is the important thing,
is that it's happening automatically.

00:47:03.160 --> 00:47:06.660
Alright, the type designer has
put it into the font.

00:47:06.790 --> 00:47:10.100
ATSUI is taking advantage of
the information in the font.

00:47:10.250 --> 00:47:14.960
You, the Cocoa application developer,
have to do nothing.

00:47:15.090 --> 00:47:17.780
And you're getting these
ligatures forming automatically.

00:47:17.890 --> 00:47:20.330
Now what happens if you don't
want them to form automatically?

00:47:20.460 --> 00:47:21.150
Fine.

00:47:21.300 --> 00:47:23.040
You can turn them off.

00:47:23.040 --> 00:47:26.480
So if I go to my font menu,
here I can turn off ligatures.

00:47:26.770 --> 00:47:28.550
There, they're gone.

00:47:28.720 --> 00:47:30.420
So this is straight out of the box.

00:47:30.470 --> 00:47:32.750
This is totally unmodified text edit.

00:47:32.850 --> 00:47:34.800
We have done absolutely nothing to it.

00:47:34.890 --> 00:47:36.740
And we're getting all of UniCode.

00:47:36.750 --> 00:47:38.690
I mean, if I really wanted to,
I can go back.

00:47:38.690 --> 00:47:40.350
I don't really want to, do I?

00:47:40.440 --> 00:47:44.100
Well, I've got a big point size here,
so let's give it a shot and see.

00:47:44.170 --> 00:47:47.080
Well, nah, let's not.

00:47:47.640 --> 00:47:49.380
Straight out of the box text edit.

00:47:49.380 --> 00:47:50.940
It can handle all of UniCode 3.0.

00:47:50.940 --> 00:47:53.880
It is, of course, taking advantage of
Quartz since it's Cocoa.

00:47:54.000 --> 00:47:54.940
It's using ATSUI.

00:47:54.940 --> 00:47:56.950
We're getting everything
that's built into the font.

00:47:57.010 --> 00:48:00.270
And nothing has to be done on
the part of the app developer.

00:48:00.280 --> 00:48:03.510
Okay, so this is a Cocoa application.

00:48:03.510 --> 00:48:09.070
And now we're going to turn our
attention to a Carbon application.

00:48:09.070 --> 00:48:11.660
And this is a slightly modified version.

00:48:11.660 --> 00:48:13.160
We are cheating here.

00:48:13.160 --> 00:48:15.220
A version of WorldText.

00:48:15.370 --> 00:48:20.210
WorldText is something that
is carefully hidden away.

00:48:20.310 --> 00:48:23.280
It is available if you install
all of the developer stuff.

00:48:23.280 --> 00:48:28.630
And it's inside developer
applications extras.

00:48:28.650 --> 00:48:33.910
And this is a simple MLTE application.

00:48:33.920 --> 00:48:36.520
MLTE is used elsewhere in the system.

00:48:36.520 --> 00:48:39.100
For example, the Finder is using MLTE.

00:48:39.100 --> 00:48:41.180
But this is one that
gives you some control.

00:48:41.180 --> 00:48:43.470
So this time we're going to start off,
again, we're going to make the

00:48:43.510 --> 00:48:44.310
point size really big.

00:48:44.480 --> 00:48:45.260
We're going to start off
with a little bit of control.

00:48:45.260 --> 00:48:47.530
off with Heffler text.

00:48:47.790 --> 00:48:50.800
Now, Heffler Text is not,
this will be discussed a

00:48:50.890 --> 00:48:54.550
little bit more on Thursday,
Heffler Text is not actually

00:48:54.550 --> 00:48:56.480
part of the System 10 install.

00:48:56.480 --> 00:48:59.180
However, it comes with Classic.

00:48:59.180 --> 00:49:02.680
And since it comes with Classic,
it is visible to all of your

00:49:02.680 --> 00:49:06.170
OS X applications as well as
your Classic applications.

00:49:06.820 --> 00:49:08.810
So, we're switching to Heffler Text.

00:49:08.810 --> 00:49:10.670
We've made the point size really big.

00:49:10.720 --> 00:49:12.490
Now, one of the things we're
going to do is we're going to

00:49:12.490 --> 00:49:13.720
show the typography palette.

00:49:13.720 --> 00:49:16.710
And here we have styles,
and this is the kind of thing that

00:49:16.710 --> 00:49:18.830
we're used to and we're familiar with.

00:49:19.510 --> 00:49:28.270
But we also have this Features tab.

00:49:28.270 --> 00:49:28.270
Now, what's happened is MLTE, well,
MLTE is a little bit more of a feature.

00:49:29.160 --> 00:49:33.450
WorldText is asking MLTE,
who is asking ATSUI,

00:49:33.530 --> 00:49:36.580
who is asking the font,

00:49:37.130 --> 00:49:40.350
Give me a list of all
of the font's features.

00:49:40.360 --> 00:49:46.490
And so we're getting the answer back
from the font to ATSUI to MLTE to us.

00:49:46.560 --> 00:49:50.140
So I can start typing, "Hello,
world." And I notice I have

00:49:50.140 --> 00:49:51.340
some interesting features here.

00:49:51.460 --> 00:49:54.490
For example, small caps.

00:49:54.580 --> 00:49:57.070
Small caps,
this is something that you see

00:49:57.430 --> 00:49:59.270
in a lot of word processors.

00:49:59.390 --> 00:50:03.470
The way that word processors nowadays
typically provide support for small

00:50:03.530 --> 00:50:06.790
caps makes typographers cringe.

00:50:06.880 --> 00:50:08.290
They hate it.

00:50:08.330 --> 00:50:11.180
Because what they do is they take
the regular capital letters and

00:50:11.180 --> 00:50:12.920
they make them a little bit smaller.

00:50:12.980 --> 00:50:14.300
And that's not correct.

00:50:14.380 --> 00:50:16.500
Because what happens then
is the weight of the letters

00:50:16.500 --> 00:50:17.730
changes as well as the size.

00:50:17.800 --> 00:50:23.000
It is best to have a font that actually
has small caps designed for it,

00:50:23.000 --> 00:50:23.700
and Heffler does.

00:50:23.800 --> 00:50:26.140
So here I've changed to small caps.

00:50:26.140 --> 00:50:28.530
I have not changed the text stream.

00:50:28.600 --> 00:50:31.400
It is still the same set
of letters it was before.

00:50:31.400 --> 00:50:32.500
I can make them all caps.

00:50:32.500 --> 00:50:36.480
Again, I haven't changed the text,
just the way I'm seeing the text.

00:50:36.500 --> 00:50:40.360
I can turn on, well,
let's turn this one off for a second.

00:50:40.460 --> 00:50:43.500
I'm going to turn on rare
and diphthong ligatures.

00:50:43.500 --> 00:50:48.200
So as I go typing along, here's FI,
here's FL, big deal, FFI.

00:50:48.200 --> 00:50:51.700
Notice, by the way,
we have an FF ligature here.

00:50:52.010 --> 00:50:57.400
FFL, FJ if you're going to Norway and
you're talking about the fjords.

00:50:57.510 --> 00:50:59.500
I think there's an FK ligature.

00:50:59.500 --> 00:51:01.290
There's a CT ligature.

00:51:01.290 --> 00:51:06.200
This used to be fairly
common in Western typography.

00:51:06.200 --> 00:51:06.200
Thankfully, it is rare now.

00:51:06.200 --> 00:51:09.900
I have a book at home that uses
the CT ligature everywhere,

00:51:09.900 --> 00:51:11.890
and it drives me insane
to try to read it.

00:51:11.900 --> 00:51:15.890
Now I'm going to turn on
the archaic long S-swash.

00:51:15.890 --> 00:51:20.770
Now those of us who have
looked at old documents,

00:51:21.080 --> 00:51:23.640
We've seen this sort of thing,
and it tends to confuse us.

00:51:23.640 --> 00:51:26.870
You know,
we talk about Congress like that,

00:51:26.870 --> 00:51:27.870
and it looks like an F.

00:51:27.990 --> 00:51:28.700
It's not an F.

00:51:28.700 --> 00:51:30.000
It's actually a long S.

00:51:30.070 --> 00:51:34.370
And notice, I'm not doing anything,
but the letter is changing

00:51:34.370 --> 00:51:35.760
shape automatically.

00:51:35.760 --> 00:51:39.250
Again, this is information that's
built into the font,

00:51:39.250 --> 00:51:42.600
and I'm not having to do
anything to take advantage of it.

00:51:42.640 --> 00:51:47.640
Okay, well, now, we have these things,
and let's just go back to Hello World,

00:51:47.640 --> 00:51:51.810
and let's type some numbers,
because we're going to change the font,

00:51:51.810 --> 00:51:56.190
and I'm going to do some Japanese,
and now I'm not sure I remember.

00:52:01.790 --> 00:52:03.940
Dang.

00:52:03.980 --> 00:52:06.700
I don't speak Japanese myself,
so I'm just kind of

00:52:06.720 --> 00:52:08.800
typing at random here.

00:52:10.560 --> 00:52:11.390
There we go.

00:52:11.530 --> 00:52:12.260
Okay.

00:52:12.400 --> 00:52:15.400
So here's my sample Japanese text.

00:52:15.760 --> 00:52:19.660
And while I'm at it,
I'm going to have to cheat here

00:52:19.660 --> 00:52:23.080
because there's a Unicode I want,
and it's 5293.

00:52:23.080 --> 00:52:23.540
Okay.

00:52:23.540 --> 00:52:27.020
I'm going to add this
just to show the fact.

00:52:27.060 --> 00:52:28.590
Unicode hex input.

00:52:28.590 --> 00:52:30.490
What did I say it was?

00:52:30.490 --> 00:52:31.690
5293.

00:52:31.890 --> 00:52:32.470
Ooh.

00:52:32.490 --> 00:52:34.460
It's not in that font.

00:52:36.180 --> 00:52:39.300
Suppose, however, I change now to one
of the Hiragino fonts.

00:52:39.300 --> 00:52:43.060
These are the new Japanese fonts
that we are providing with OS X.

00:52:43.320 --> 00:52:44.980
There we go.

00:52:46.130 --> 00:52:48.930
Okay, this is to illustrate the
fact that we are now covering

00:52:48.940 --> 00:52:52.660
more than just ShiftJIS with
our Japanese installed fonts.

00:52:52.660 --> 00:52:56.120
And we've got some very
interesting effects up there.

00:52:56.120 --> 00:53:00.060
But you'll notice our feature palette
is also getting rather interesting.

00:53:00.060 --> 00:53:02.760
For example, let me see.

00:53:02.760 --> 00:53:05.950
We have traditional font.

00:53:05.960 --> 00:53:07.760
Oh, okay,
well I can't do anything with that.

00:53:07.820 --> 00:53:09.160
Hey, I can slash my zero.

00:53:09.160 --> 00:53:09.980
Cool.

00:53:09.980 --> 00:53:12.340
Okay, this is built into the font.

00:53:13.140 --> 00:53:16.110
I have had to do nothing in
order to take advantage of it.

00:53:16.360 --> 00:53:17.780
This is just percolating through.

00:53:17.780 --> 00:53:19.540
I can turn italics on.

00:53:19.540 --> 00:53:22.850
And you'll notice that only the Latin,
and not the script L even,

00:53:22.850 --> 00:53:26.780
the Latin is italicizing,
not the kanji or the kana.

00:53:26.780 --> 00:53:31.460
Somewhere in here, let me see,
what else do we have?

00:53:31.460 --> 00:53:32.490
Oh, this is the fun stuff.

00:53:33.740 --> 00:53:36.200
Okay,
I can start clicking on these things,

00:53:36.200 --> 00:53:38.990
and I get all kinds of fun
little effects that I can put in.

00:53:38.990 --> 00:53:41.890
I'm not changing my text.

00:53:42.050 --> 00:53:43.190
These glyphs are in the font.

00:53:43.200 --> 00:53:45.740
I can put them wherever
I want in my document,

00:53:45.870 --> 00:53:50.270
but I don't have to change the
text in order to get to them.

00:53:50.690 --> 00:53:55.340
Let me see, now what was... If I wanted
to show that... I need to

00:53:55.340 --> 00:53:57.560
go back to Coda Airey here.

00:53:57.680 --> 00:54:03.970
Now this is, I mentioned this is a
modified version of WorldText.

00:54:03.970 --> 00:54:03.970
It's modified

00:54:04.180 --> 00:54:06.650
What am I typing after Neko?

00:54:06.700 --> 00:54:07.590
Huh?

00:54:07.670 --> 00:54:09.140
Kony?

00:54:09.150 --> 00:54:10.260
Kuny.

00:54:10.270 --> 00:54:11.650
Thus?

00:54:12.110 --> 00:54:14.860
Except it's not doing it correctly.

00:54:14.920 --> 00:54:15.390
Ah, there we go.

00:54:15.520 --> 00:54:17.270
Okay.

00:54:17.340 --> 00:54:20.630
The land of cats.

00:54:20.740 --> 00:54:22.600
So now if I can go to
my traditional forms,

00:54:22.600 --> 00:54:23.780
there we go.

00:54:23.890 --> 00:54:25.480
Okay,
I'm switching back and forth between

00:54:25.480 --> 00:54:28.800
an older form that's not used much
in modern Japanese and the form that

00:54:28.800 --> 00:54:30.810
would be currently used in Japanese.

00:54:30.810 --> 00:54:37.300
This is a slightly modified
version of World Text,

00:54:37.420 --> 00:54:41.280
only in that it uses Core Graphics.

00:54:41.710 --> 00:54:45.510
and David It happens to be using
Quartz for the anti-aliasing,

00:54:45.520 --> 00:54:48.620
and that's the only difference
with the regular one that you see.

00:54:48.620 --> 00:54:50.510
And so if you look closely,
you would be able to tell the

00:54:50.510 --> 00:54:52.100
difference in the anti-aliasing.

00:54:52.240 --> 00:54:56.360
However,
Xavier is going to come back on stage,

00:54:56.360 --> 00:55:00.660
and he will give us a somewhat
more robust demonstration,

00:55:00.680 --> 00:55:07.190
I think, of using Core Graphics with
ATSUI and wrap things up.

00:55:17.080 --> 00:55:17.610
Great demo.

00:55:17.630 --> 00:55:19.330
I wonder who wrote this application,
by the way.

00:55:19.440 --> 00:55:22.690
Sorry, private.

00:55:23.220 --> 00:55:24.940
It had to be French.

00:55:25.170 --> 00:55:27.100
Actually,
I don't know if we're going to have time.

00:55:27.120 --> 00:55:29.660
How many of you are interested, actually,
in seeing the integration

00:55:29.660 --> 00:55:31.500
of Core Graphics with ATSUI?

00:55:31.500 --> 00:55:32.580
It's a very basic demo.

00:55:32.580 --> 00:55:34.100
I wrote that yesterday night.

00:55:34.230 --> 00:55:35.240
I don't know if you can raise your hand.

00:55:35.240 --> 00:55:36.710
Are you interested in seeing that?

00:55:36.850 --> 00:55:37.400
OK.

00:55:37.530 --> 00:55:38.710
That gives me an idea.

00:55:38.740 --> 00:55:43.610
It's super easy, but like--

00:55:44.350 --> 00:55:47.740
It really shows the integration
between Core Graphics and ATSUI.

00:55:47.740 --> 00:55:52.040
ATSUI is a very powerful
UniCode layout engine.

00:55:52.040 --> 00:55:55.640
And as you saw in these demos before,
the whole Finder,

00:55:55.720 --> 00:55:58.960
the whole Mac OS X actually
uses that to display text.

00:55:58.960 --> 00:56:03.440
But then, when you combine the power of
the UniCode layout plus the great

00:56:03.480 --> 00:56:06.600
rendering engine that we have on 10,
which is Quartz,

00:56:06.690 --> 00:56:08.690
you get things that are super cool.

00:56:08.700 --> 00:56:11.740
I'm going to show you something very,
very basic right now.

00:56:11.770 --> 00:56:14.530
And I'm going to show you actually,
if you're coming from Quick Draw,

00:56:14.570 --> 00:56:18.750
there are many differences
between Quartz and Quick Draw.

00:56:18.830 --> 00:56:23.390
And I'm going to show you just
the way things just fit together.

00:56:23.900 --> 00:56:27.160
CG is based on what we
call the CG context.

00:56:27.160 --> 00:56:30.460
A CG context is going to have all
your information for the drawing.

00:56:30.460 --> 00:56:33.020
It's going to have the clipping,
the transformation matrix,

00:56:33.020 --> 00:56:34.930
and all these things.

00:56:35.490 --> 00:56:36.690
And I have only two minutes left.

00:56:36.750 --> 00:56:39.440
So here, for instance,
I'm going to just draw some basic text.

00:56:39.530 --> 00:56:42.610
What's happening here,
I just followed the example that

00:56:42.610 --> 00:56:44.370
was given by actually Peter.

00:56:44.410 --> 00:56:45.500
I create a text layout.

00:56:45.670 --> 00:56:48.470
I put the really nice text, you know,
the text inside my layout.

00:56:48.690 --> 00:56:49.600
I create a style.

00:56:49.830 --> 00:56:52.980
I pass my CG context to the layout,
and I draw a text.

00:56:53.120 --> 00:56:54.850
Boom.

00:56:54.850 --> 00:56:54.850
That's it.

00:56:55.280 --> 00:56:56.980
So that looks very nice
actually on the screen.

00:56:57.000 --> 00:56:59.240
The text isn't used correctly.

00:56:59.370 --> 00:57:02.680
The nice thing here is that
I can just call Core Graphics and

00:57:02.680 --> 00:57:05.810
make a quick loop and just say,
"Rotate the CG context

00:57:05.810 --> 00:57:08.340
for me." And you know,
with Quick Draw, that was difficult.

00:57:08.340 --> 00:57:10.210
And of course,
you can do that with ATSUI,

00:57:10.210 --> 00:57:12.180
but here I just want
to show you how it is.

00:57:12.220 --> 00:57:13.550
I just rotate the text.

00:57:13.710 --> 00:57:15.460
Here I bleed the text every time.

00:57:15.480 --> 00:57:19.170
Remember, with Quartz,
the text is double buffered,

00:57:19.170 --> 00:57:22.540
which means you can call
ATSUI DrawText 100 times and

00:57:22.540 --> 00:57:24.800
then call CG Context Flash.

00:57:24.800 --> 00:57:27.120
And that's kind of cool because
you don't want to bleed your

00:57:27.120 --> 00:57:28.480
text every time line by line.

00:57:28.500 --> 00:57:32.740
You can bleed it after 10 paragraphs,
like when the page is drawn.

00:57:32.740 --> 00:57:35.160
So with Quartz and ATSUI,
you can do that.

00:57:35.160 --> 00:57:37.450
And here it's actually
three lines of code.

00:57:37.450 --> 00:57:38.400
I just have a loop.

00:57:38.460 --> 00:57:41.700
I say,
"Rotate the context," and that's it.

00:57:41.700 --> 00:57:47.080
And every time I call the
same routine to draw the text.

00:57:47.100 --> 00:57:47.100
A nice thing is

00:57:48.030 --> 00:57:51.240
Quartz, respect transparency
and things like that.

00:57:51.270 --> 00:57:53.510
And for instance,
here I'm going to save the context,

00:57:53.600 --> 00:57:57.930
which means save all the data that
you have in the current CG context.

00:57:57.970 --> 00:57:59.930
And here I'm going to
change what I call the k,

00:57:59.930 --> 00:58:02.190
which is the coefficient
for transparency.

00:58:02.230 --> 00:58:05.120
In order to set that,
it's just one call to Core Graphics.

00:58:05.160 --> 00:58:08.840
And I'll give you pointers on how to get
this information in this session that

00:58:08.840 --> 00:58:10.120
we're going to have during the week.

00:58:10.310 --> 00:58:14.370
So here I'm just going to change
the transparency in the CG context.

00:58:14.500 --> 00:58:16.950
And I'm going to just
draw the text again.

00:58:17.130 --> 00:58:18.100
Here you can see the text.

00:58:18.100 --> 00:58:21.100
I don't know if it's very easy,
but you can see the text is transparent.

00:58:21.100 --> 00:58:24.690
A nice way to put it is,
I'm just going to draw

00:58:24.750 --> 00:58:26.100
a PDF with CG context.

00:58:26.100 --> 00:58:28.100
This PDF is one megabyte.

00:58:28.160 --> 00:58:30.100
It's one call to display that.

00:58:30.100 --> 00:58:33.480
And then on top of that,
I'm just going to draw my text.

00:58:33.800 --> 00:58:37.800
I don't know if you can see,
but below the text you can see the PDF.

00:58:37.800 --> 00:58:39.790
Once again, these are little tricks,
little details,

00:58:39.800 --> 00:58:43.940
but just to show you how powerful
the integration between ATSUI,

00:58:43.940 --> 00:58:46.780
the UniCode layout engine, and Quartz is.

00:58:46.830 --> 00:58:49.220
And you know, of course,
I can just rotate the text and boom,

00:58:49.220 --> 00:58:49.800
that's it.

00:58:49.800 --> 00:58:54.800
And you get, of course,
the text is NTIDAS correctly rotated.

00:58:54.800 --> 00:58:57.790
And once again,
these are three lines of code to do that.

00:58:58.550 --> 00:59:01.460
You all know too that from a CG context,
what you can do is that

00:59:01.540 --> 00:59:02.740
you create a PDF file.

00:59:02.740 --> 00:59:04.950
And actually from here,
with my same drawing,

00:59:04.980 --> 00:59:09.300
so using ATSUI and passing
a CG context to ATSUI,

00:59:09.340 --> 00:59:11.850
I could create actually just the
PDF file and save it like that.

00:59:11.960 --> 00:59:13.640
And then after that,
you can put it on the net

00:59:13.640 --> 00:59:14.730
or do whatever you want.

00:59:14.740 --> 00:59:18.300
That's why it's great to have such
a great integration between ATSUI,

00:59:18.370 --> 00:59:21.820
because use ATSUI for all your drawing,
and then use all the power of

00:59:21.870 --> 00:59:23.650
Quartz to do whatever you want.

00:59:24.160 --> 00:59:29.070
save to a PDF file, do the transparency,
apply the transformation metrics.

00:59:30.250 --> 00:59:31.400
I have another example.

00:59:31.400 --> 00:59:34.040
Actually, I'm going to restore the
context here and re-save it.

00:59:34.140 --> 00:59:35.250
And I'm going to do
something which is like,

00:59:35.250 --> 00:59:37.630
you know, what we call the scaling.

00:59:37.650 --> 00:59:40.490
That's kind of cool because, you know,
for instance, if you want to do a zoom

00:59:40.540 --> 00:59:43.300
effect on your text,
right now you have to change

00:59:43.300 --> 00:59:45.840
the font size or you have to use
the bottleneck with Quick Draw.

00:59:45.940 --> 00:59:48.150
Well, with Core Graphics,
you don't need to do that.

00:59:48.170 --> 00:59:49.750
Oh, and we are running late.

00:59:49.850 --> 00:59:51.880
So very quickly, I save the context.

00:59:51.880 --> 00:59:53.100
I draw the text here.

00:59:53.170 --> 00:59:54.150
I'm going to erase it.

00:59:54.170 --> 00:59:56.040
I'm going to change the scaling.

00:59:56.160 --> 00:59:58.390
And here, hmm.

00:59:58.490 --> 00:59:59.400
Oh, I draw a rectangle.

00:59:59.400 --> 01:00:00.240
My mistake.

01:00:00.290 --> 01:00:01.210
Basic text.

01:00:01.270 --> 01:00:04.200
And here,
it's the same call I do to ATSUI.

01:00:04.280 --> 01:00:07.200
But Core Graphics actually
rescales completely this context,

01:00:07.250 --> 01:00:10.180
and I get actually just the
same nice anti-aliasing,

01:00:10.250 --> 01:00:13.600
and the text is drawn.

01:00:13.610 --> 01:00:16.750
OK, could we switch quickly to the
slides to finish up and do a wrap-up?

01:00:16.780 --> 01:00:18.260
Great.

01:00:22.610 --> 01:00:24.490
OK, very quickly, the summary.

01:00:24.510 --> 01:00:27.820
ATSUI is at the heart of
the drawing of Mac OS X.

01:00:27.820 --> 01:00:31.270
And this is just the way things are.

01:00:31.370 --> 01:00:34.270
Mac OS X is really a truly
international system.

01:00:34.380 --> 01:00:37.740
And in order to be really international,
you need to use UniCode.

01:00:37.790 --> 01:00:39.880
ATSUI is the solution at that point.

01:00:40.010 --> 01:00:45.410
All the pieces built in the system on top
of ATSUI use UniCode to render the text.

01:00:45.730 --> 01:00:48.720
Once again, as we explained today
with Peter and John,

01:00:48.720 --> 01:00:51.760
use it directly when
DrawThemeTextBox is not enough.

01:00:51.840 --> 01:00:55.120
We'll talk about these
APIs tomorrow in the text session.

01:00:55.120 --> 01:00:58.410
When you need fine control on the text,
and when you need smooth

01:00:58.490 --> 01:01:00.000
integration with Quartz.

01:01:00.000 --> 01:01:04.680
If you're doing DTP applications,
or you need to do high rendering,

01:01:04.680 --> 01:01:07.840
high end typography,
use ATSUI and Quartz.

01:01:07.840 --> 01:01:09.840
They are great to use together.

01:01:09.840 --> 01:01:12.840
And of course, if you're writing your
own word processor,

01:01:12.900 --> 01:01:16.700
you just have to use Quartz and ATSUI.

01:01:17.330 --> 01:01:20.560
To find out more very quickly,
there is a great sample code

01:01:20.560 --> 01:01:23.040
that you should all check
out if you want to use ATSUI.

01:01:23.100 --> 01:01:26.440
It's the QA that is written there,
QA 1027.

01:01:26.440 --> 01:01:30.000
It's actually the same way
that DrawThemeTextBox works.

01:01:30.070 --> 01:01:33.570
So we put here a bunch of sample code
that shows you how to create a style,

01:01:33.810 --> 01:01:34.990
how to create the layout.

01:01:35.110 --> 01:01:36.960
You just take it, compile it,
put it in your code,

01:01:36.960 --> 01:01:39.600
and you'll see it's the same
result as DrawThemeTextBox.

01:01:39.640 --> 01:01:43.240
And it's going to give you more power
on manipulating the layout if you

01:01:43.260 --> 01:01:45.520
want to do vertical text and stuff.

01:01:45.630 --> 01:01:49.450
And of course, we'll show you how to
pass a CG context to X3.

01:01:52.390 --> 01:01:55.320
So where to go from there?

01:01:55.360 --> 01:01:57.480
Text on Mac OS X tomorrow,
we'll talk about the

01:01:57.480 --> 01:01:58.960
layers on top of ATSUI.

01:01:58.960 --> 01:02:00.940
So we'll talk about MLT.

01:02:01.130 --> 01:02:03.850
We'll talk about the DrawTheme APIs.

01:02:03.910 --> 01:02:06.120
And we'll try to show the
integration of all these things.

01:02:06.140 --> 01:02:08.200
MLT, multi-lingual text engine.

01:02:08.240 --> 01:02:12.770
Session 128, we'll talk about font
management of Mac OS X.

01:02:12.850 --> 01:02:15.500
Font management has been
doing a lot of improvement in

01:02:15.500 --> 01:02:17.280
this new version of Mac OS X.

01:02:17.280 --> 01:02:19.310
You should check it out
if you manipulate fonts.

01:02:19.370 --> 01:02:20.640
And of course, the feedback forum.

01:02:20.640 --> 01:02:23.390
It's always a great way for
us to get feedback from you

01:02:23.440 --> 01:02:27.810
guys on how you use APIs,
what's missing, what you'd like to see.

01:02:32.160 --> 01:02:37.120
You can always contact me, Xavier Legro,
xavier@apple.com, for all your questions,

01:02:37.120 --> 01:02:40.000
if you need sample code,
if you're blocked, APIs that are missing,

01:02:40.000 --> 01:02:42.990
things you want to see,
or just questions.