WEBVTT

00:00:06.430 --> 00:00:06.860
Good morning.

00:00:06.970 --> 00:00:07.960
My name is Pete Steinauer.

00:00:07.960 --> 00:00:10.280
I'm the engineering manager
of the Java Platform Classes

00:00:10.290 --> 00:00:12.000
team here at Apple Computer.

00:00:12.100 --> 00:00:17.000
What I'm going to be going over today is
some of the things that you need to do

00:00:17.000 --> 00:00:22.540
to take your 100% pure Java application
and bring it to Mac OS X.

00:00:22.680 --> 00:00:24.040
You're going to have to excuse me.

00:00:24.040 --> 00:00:27.990
This is early for me.

00:00:28.290 --> 00:00:32.600
What our goals are in this session
is to go over some minimal changes

00:00:32.600 --> 00:00:35.950
that you need to make to your
applications to be able to make it

00:00:36.160 --> 00:00:38.400
run and behave well on Mac OS X.

00:00:38.400 --> 00:00:42.440
Before we get into that,
I want to make it clear that on Mac OS X,

00:00:42.440 --> 00:00:47.360
even better than Mac OS 9,
you can take JARS and other

00:00:47.360 --> 00:00:51.100
applications from other platforms
and just run them on Mac OS X.

00:00:51.100 --> 00:00:54.890
There's no changes that you have to make
to your application to make them run.

00:00:54.900 --> 00:00:58.500
What I'm going to be talking about
today is the kinds of things that you

00:00:58.500 --> 00:01:02.900
can do to your application so that
they'll mesh better with Mac OS X.

00:01:02.900 --> 00:01:07.960
And the goal with these changes is
that these changes be very minor,

00:01:08.100 --> 00:01:10.860
that you don't have to do much
of anything to make things

00:01:10.860 --> 00:01:12.200
run very well on Mac OS X.

00:01:12.200 --> 00:01:16.900
In designing our implementation
of Java on top of Mac OS X,

00:01:16.900 --> 00:01:20.450
some of our goals for some of
these tweaks were to make APIs that

00:01:20.450 --> 00:01:23.310
blend very well with Suns,
so that you can do very minor

00:01:23.310 --> 00:01:24.800
things to your applications.

00:01:24.800 --> 00:01:30.130
And have them behave much more
closely to--have them match much

00:01:30.190 --> 00:01:32.800
more closely other applications
that are running on Mac OS X.

00:01:32.800 --> 00:01:36.000
And with the ultimate goal
being applications that feel

00:01:36.000 --> 00:01:37.660
like Mac OS X applications.

00:01:37.800 --> 00:01:40.800
So what I'm going to go over
first is some of the basics,

00:01:40.800 --> 00:01:43.800
the things that you should be
doing in your design already,

00:01:43.810 --> 00:01:46.600
but become more important when
you're doing this kind of work.

00:01:46.800 --> 00:01:52.680
So these--the first thing I'm going to
be going over is pure Java cross-platform

00:01:52.680 --> 00:01:54.700
changes that will aid you in the
steps that you're going to be doing.

00:01:54.700 --> 00:01:59.110
And then I'm going to go into some
simple tweaks that you can do that

00:01:59.110 --> 00:02:03.700
require often no code changes,
but sometimes very minor code changes.

00:02:03.700 --> 00:02:06.310
And then I'm going to go into
some more complex features

00:02:06.310 --> 00:02:08.600
that you can take or leave,
you don't need to adopt,

00:02:08.680 --> 00:02:11.700
but will make your application
run that much faster.

00:02:11.700 --> 00:02:13.780
And at the very end,
I'm going to go into some of the

00:02:13.830 --> 00:02:16.920
packaging details that you need to
take--you need to be aware of to

00:02:16.930 --> 00:02:20.700
deploy your application on Mac OS X.

00:02:21.400 --> 00:02:25.220
So the basics, cross-platform changes.

00:02:25.550 --> 00:02:28.680
What I want to emphasize
here is first of all that

00:02:30.160 --> 00:02:33.100
Everything that we're going to be
demoing today is based on clean,

00:02:33.100 --> 00:02:35.390
100% pure swing implementations.

00:02:35.480 --> 00:02:39.090
The reason I say swing is you can
implement and Classic AWT runs

00:02:39.090 --> 00:02:43.100
perfectly fine on Mac OS X,
but we've discovered over the

00:02:43.100 --> 00:02:48.020
years that when you implement in
Classic AWT and you implement expecting

00:02:48.020 --> 00:02:51.200
certain behaviors on one platform,
it's very hard to carry

00:02:51.320 --> 00:02:52.580
them to the other platforms.

00:02:52.670 --> 00:02:56.340
The Classic AWT doesn't work
well for that kind of situation.

00:02:56.340 --> 00:03:00.170
So what we recommend is that
you focus on swing applications.

00:03:00.270 --> 00:03:04.320
They run much better on Mac OS X and
you have to make far fewer changes.

00:03:04.340 --> 00:03:09.100
A huge number of the bugs that we get
into Apple on the Classic AWT are,

00:03:09.150 --> 00:03:12.110
"This widget doesn't behave
like Windows." It's like,

00:03:12.110 --> 00:03:15.060
"Well, no, it's a Mac OS choice or
it's a Mac OS button.

00:03:15.100 --> 00:03:18.350
They're not going to behave like
Windows." Swing does a much better job

00:03:18.350 --> 00:03:19.950
of making those kind of things mesh.

00:03:20.220 --> 00:03:24.870
The other thing you need to be aware of,
and a lot of this is just good design.

00:03:24.900 --> 00:03:26.340
I mean, nothing new.

00:03:26.340 --> 00:03:28.830
Nothing new here,
but it becomes much more important.

00:03:28.840 --> 00:03:31.100
Things like modularity,
things like keeping an eye

00:03:31.100 --> 00:03:32.340
on platform differences.

00:03:32.340 --> 00:03:36.340
You need to be aware that even if
you write 100% pure Java application,

00:03:36.530 --> 00:03:39.100
there are differences in platforms
and there are minor tweaks

00:03:39.100 --> 00:03:40.050
that you're going to make.

00:03:40.130 --> 00:03:43.340
And if you design your code
in a way that is modular,

00:03:43.340 --> 00:03:47.340
that you--cons things up
on the fly as you need to,

00:03:47.340 --> 00:03:50.530
and factor out the sections of
your code that you expect may

00:03:50.530 --> 00:03:54.380
require platform differences,
it's going to be that much easier to make

00:03:54.380 --> 00:03:56.340
the minor tweaks that you need to make.

00:03:56.340 --> 00:04:00.330
To make your application run
well on multiple platforms.

00:04:00.460 --> 00:04:02.330
Native methods is another thing.

00:04:02.340 --> 00:04:04.340
The minute you start going
down the native method path,

00:04:04.490 --> 00:04:06.340
you're really tying
yourself into the platform.

00:04:06.340 --> 00:04:08.300
And you need to make sure that you
factor out your native methods.

00:04:08.340 --> 00:04:12.340
You isolate how you do those because
the behavior of native methods,

00:04:12.340 --> 00:04:14.350
how you bind those up,
that kind of thing,

00:04:14.560 --> 00:04:16.340
is very different from platform
to platform to platform.

00:04:16.340 --> 00:04:17.340
I mean, we've got JNI.

00:04:17.340 --> 00:04:18.270
We've got those kind of things.

00:04:18.350 --> 00:04:21.190
We also support JDIRECT,
which I'll talk about in a second.

00:04:21.510 --> 00:04:25.280
But the fact of the matter is the minute
you start talking about native methods,

00:04:25.350 --> 00:04:29.320
you're binding yourself much more closely
to the platform that you're running on.

00:04:29.370 --> 00:04:31.340
So isolating those is
always a good thing.

00:04:31.340 --> 00:04:33.340
And then launchability.

00:04:33.340 --> 00:04:37.410
That's a totally simple thing,
but will allow you--allow us to

00:04:37.410 --> 00:04:38.330
help you out in a lot of ways.

00:04:38.340 --> 00:04:43.340
If you follow SunSpec as far
as packaging things up in jars,

00:04:43.340 --> 00:04:47.060
using the jar extension mechanisms,
and also making sure you do things

00:04:47.060 --> 00:04:51.340
like specifying your main method
in the jar and that kind of thing,

00:04:51.340 --> 00:04:54.340
you're going to get that much closer to
something that we can help you out with,

00:04:54.340 --> 00:04:56.970
that we can help you out with later.

00:04:57.800 --> 00:04:59.920
So with that,
I'm going to bring Eric up to run

00:05:00.020 --> 00:05:02.870
through the beginnings of the demo
that we're going to be building on

00:05:02.970 --> 00:05:04.700
throughout the course of the session.

00:05:04.700 --> 00:05:06.640
This is Eric Albert.

00:05:06.710 --> 00:05:10.370
He's one of the engineers on
the Java Platform Classes team.

00:05:12.820 --> 00:05:19.400
Okay, so what we have here, actually,
is basically the way that you would

00:05:19.400 --> 00:05:22.960
end up launching a Java application
on a variety of different platforms.

00:05:22.960 --> 00:05:26.570
So from the command line java-jar,
you can use the dash jar flag as long as

00:05:26.690 --> 00:05:28.800
your manifest is correctly configured.

00:05:28.800 --> 00:05:33.910
And so when I hit return,
then this application comes up,

00:05:33.980 --> 00:05:38.970
and this is basically how this app
would look on Solaris or on Windows.

00:05:38.980 --> 00:05:43.660
So this is using Sun's default
cross-platform look and feel,

00:05:43.660 --> 00:05:44.880
which is metal.

00:05:44.880 --> 00:05:47.700
It's the default on
Solaris and on Windows.

00:05:47.700 --> 00:05:50.330
And what we have here, actually,
is something that lets us

00:05:50.330 --> 00:05:54.200
navigate through the file
system from Java's perspective,

00:05:54.200 --> 00:05:56.210
which is from a Unix perspective.

00:05:56.220 --> 00:05:59.610
And so you can see all of our files here,
and you can see if I go through and, say,

00:05:59.610 --> 00:06:01.100
take a look at my applications.

00:06:01.100 --> 00:06:06.690
Well, your users, at least on the Mac,
are expecting, or will typically expect

00:06:06.690 --> 00:06:08.980
to see mail.app as,
say, a regular application.

00:06:09.020 --> 00:06:12.530
But in fact, it is actually a directory,
because that's the way that applications

00:06:12.530 --> 00:06:13.970
are packaged on this system.

00:06:13.980 --> 00:06:17.980
And within there,
we have a contents directory.

00:06:17.980 --> 00:06:19.980
Inside that,
all kinds of different things.

00:06:19.980 --> 00:06:24.980
And the actual application
binary is way on down here.

00:06:24.980 --> 00:06:29.920
So this is an application just as
it would look on other systems.

00:06:29.990 --> 00:06:34.870
Nothing at all has been done here to
get it to run specially on the Mac OS.

00:06:34.980 --> 00:06:36.920
And so if you just take
your code and port,

00:06:36.920 --> 00:06:38.760
then this may be what you'll end up with.

00:06:40.630 --> 00:06:42.730
But Pete was talking about modularity.

00:06:42.730 --> 00:06:45.500
And at the same time,
so even though this application

00:06:45.500 --> 00:06:48.700
doesn't look like a Mac OS X app,
it's been written in a way

00:06:48.800 --> 00:06:52.140
to make adding support for
additional platforms and adding any

00:06:52.140 --> 00:06:54.840
platform-specific code relatively easy.

00:06:54.840 --> 00:06:58.260
So one good example of this is the way
that the menu bar is designed here.

00:06:58.260 --> 00:07:01.550
Actually,
I should go back to this briefly and show

00:07:01.580 --> 00:07:04.220
that we have file and edit menus here.

00:07:04.220 --> 00:07:06.590
Of course, your users will expect
those on all platforms,

00:07:06.590 --> 00:07:08.400
and almost all applications do have that.

00:07:08.460 --> 00:07:11.460
And so we've got new, open, save,
and close.

00:07:11.460 --> 00:07:13.600
And you'll notice close is option F4.

00:07:14.180 --> 00:07:19.300
Edit, cut, copy, and paste, or control X,
control C, control V, etc.

00:07:19.440 --> 00:07:23.390
But if you've factored out your
menu items in such a way that

00:07:23.480 --> 00:07:27.860
allows you to add in additional
ones for specific platforms,

00:07:27.910 --> 00:07:31.730
then you'll end up being in really
good shape when the time comes to add,

00:07:31.830 --> 00:07:36.690
say, specific accelerators for Mac OS X.

00:07:36.920 --> 00:07:40.900
Our menu bar class actually takes
advantage of Java's resource bundle class

00:07:40.900 --> 00:07:45.420
to load the appropriate resources for the
platform that it's actually running on.

00:07:45.440 --> 00:07:50.990
And so it grabs those resources and
then goes through and constructs

00:07:50.990 --> 00:07:54.660
menus dynamically based on what
those resources happen to be.

00:07:55.060 --> 00:08:00.320
Building the keystrokes that it
gets out of those resources and

00:08:00.420 --> 00:08:04.000
grabbing appropriate actions out of
those resources that correspond to

00:08:04.060 --> 00:08:05.780
the given menu items that it has.

00:08:05.780 --> 00:08:09.790
So ideally what you end up doing
then is saying rather than say

00:08:09.790 --> 00:08:13.830
associating specific actions
with platform specific code,

00:08:13.880 --> 00:08:20.830
I'm going to write generic actions within
my application that I can then use as

00:08:20.830 --> 00:08:25.560
a bottleneck for all platform code.

00:08:27.800 --> 00:08:29.840
and David Oh, that's right.

00:08:29.900 --> 00:08:33.520
One other thing that I did want
to mention is that this also works

00:08:33.520 --> 00:08:36.100
great actually for localization.

00:08:36.100 --> 00:08:40.390
So when you have something like this
that lets you load specific resources,

00:08:40.390 --> 00:08:44.850
then you can trivially add specific
localizations to your application

00:08:44.900 --> 00:08:47.790
and ship in multiple languages,
and we'll get a chance to

00:08:47.840 --> 00:08:49.070
show that to you later.

00:08:49.080 --> 00:08:51.160
So now back to Peter.

00:08:51.160 --> 00:08:52.160
Okay, great.

00:08:52.160 --> 00:08:54.800
So that's just the kind of setting
the stage for some of the changes

00:08:54.800 --> 00:08:56.360
that we're going to be making next.

00:08:56.360 --> 00:08:59.290
So now what I want to do is,
if we can get the slides back up on here,

00:08:59.290 --> 00:09:03.000
is talk about the simple tweaks
that we can make to--slide,

00:09:03.220 --> 00:09:05.790
slide,
slides--the simple tweaks that we can

00:09:05.790 --> 00:09:10.320
make to applications that will make them
harmonize much better with Mac OS X.

00:09:10.390 --> 00:09:13.400
The first thing that you'll
need to be aware of is how to

00:09:13.400 --> 00:09:16.800
distinguish between the platforms.

00:09:16.800 --> 00:09:19.010
The two kinds of things that you're
going to want to be aware of is how

00:09:19.010 --> 00:09:22.660
to distinguish between platforms and
how to distinguish between specific

00:09:22.660 --> 00:09:24.950
features and versions on a platform.

00:09:24.960 --> 00:09:27.580
And the most common way and
the way that we recommend for

00:09:27.590 --> 00:09:31.000
distinguishing between the platforms
is using the OS.name property.

00:09:31.230 --> 00:09:34.160
This is the way that any number
of other Java applications use.

00:09:34.200 --> 00:09:40.120
On Mac OS 9 MRJ, the OS.name property
will be Mac Space OS,

00:09:40.120 --> 00:09:41.040
intercapped.

00:09:41.040 --> 00:09:43.580
And on Mac OS X,
because the infrastructure

00:09:43.580 --> 00:09:51.660
is fundamentally different,
we've changed the OS name to be Mac OS X.

00:09:51.790 --> 00:09:52.660
As far as features,
we've changed the OS name to be Mac OS X.

00:09:52.660 --> 00:09:53.910
Features,
what you should be doing--and this

00:09:53.940 --> 00:09:57.510
is where it gets a little touchy and
it depends very much on the platform.

00:09:57.510 --> 00:10:00.760
You should be looking on
Mac OS 9--or on Mac OS in general,

00:10:00.760 --> 00:10:03.590
Mac OS X and Mac OS 9 at
the MRJ version property.

00:10:03.730 --> 00:10:09.580
We've carried the MRJ version property
through from MRJ into Java on Mac OS X.

00:10:09.580 --> 00:10:11.330
And this is the best way
to tell between features.

00:10:11.340 --> 00:10:13.640
Each major release that we do,
we're going to bump this.

00:10:13.900 --> 00:10:16.660
And so if you're relying on
specific bug fixes that we've got

00:10:16.660 --> 00:10:20.290
or specific APIs and features,
the best thing to be checking for is the

00:10:20.290 --> 00:10:21.660
MRJ version property in that situation.

00:10:21.660 --> 00:10:22.660
Okay.

00:10:22.660 --> 00:10:24.400
situation.

00:10:24.620 --> 00:10:25.500
Then the look and feel.

00:10:25.500 --> 00:10:30.500
We actually cheated in this demo,
just for dramatic effect, I guess.

00:10:30.790 --> 00:10:34.350
On Mac OS X,
the standard look and feel that's enabled

00:10:34.360 --> 00:10:36.740
by default is the Mac OS look and feel.

00:10:36.790 --> 00:10:40.380
So if you do nothing,
if you create a simple

00:10:40.380 --> 00:10:44.060
Java application using standard swing
without setting a look and feel,

00:10:44.060 --> 00:10:46.350
you're going to get the Mac OS,
the Aqua look and feel.

00:10:46.610 --> 00:10:49.910
We actually, on this demo,
forced it just for dramatic effect.

00:10:50.070 --> 00:10:52.280
But if you need to,
for whatever reason later

00:10:52.290 --> 00:10:55.500
in your application,
force a look and feel other than

00:10:55.500 --> 00:10:59.490
the standard platform look and feel,
what you need to use is the

00:10:59.490 --> 00:11:01.740
UIManagerSetLookAndFeel.

00:11:01.740 --> 00:11:05.600
And within that, you just call
UIManager.GetSystemLookAndFeel

00:11:05.600 --> 00:11:06.300
class name.

00:11:06.350 --> 00:11:10.420
Or if you want the metal look and feel,
call GetCrossPlatformLookAndFeel.

00:11:10.700 --> 00:11:11.480
And that will force it.

00:11:11.500 --> 00:11:17.000
What you then need to make sure that you
do is call UpdateComponentTreeUI because

00:11:17.230 --> 00:11:20.000
that will force any UI elements that
you've already added to your application.

00:11:20.000 --> 00:11:21.620
So you can see that the menu
bar is instantiated to be bound.

00:11:21.700 --> 00:11:23.860
The thing you need to be aware
of is this is called on a frame

00:11:23.860 --> 00:11:25.200
and it will walk down a frame.

00:11:25.200 --> 00:11:27.560
So if you've done things
like creating a frame,

00:11:27.560 --> 00:11:30.360
creating a menu bar,
but you haven't associated them,

00:11:30.430 --> 00:11:33.710
you need to associate them before
you call GetComponentTreeUI.

00:11:33.730 --> 00:11:39.300
Otherwise, the menu bar won't pick up
the look and feel changes.

00:11:39.440 --> 00:11:40.670
The next thing is menu definition.

00:11:40.680 --> 00:11:43.870
One of the coolest things that I found
about the Mac look and feel that we've

00:11:43.870 --> 00:11:47.760
implemented is that it allows you to
put the menu bar in the right place.

00:11:47.770 --> 00:11:49.590
Menu bars in Windows drive me insane.

00:11:49.620 --> 00:11:51.150
I just can't stand them.

00:11:51.160 --> 00:11:54.590
And so on Swing,
we've allowed you to move the menu bar

00:11:54.670 --> 00:11:56.660
out of the frame into the menu bar.

00:11:56.710 --> 00:11:59.100
We didn't put this on by
default for two reasons.

00:11:59.190 --> 00:12:01.390
First of all,
it's part of Sense Conformance

00:12:01.460 --> 00:12:04.670
Kit that they check to make
sure that behaviors are correct.

00:12:04.760 --> 00:12:08.300
But more importantly from my perspective,
you need to be aware of where the

00:12:08.300 --> 00:12:09.940
menu bar is in your application.

00:12:09.940 --> 00:12:12.830
And your application needs
to take into account that

00:12:12.830 --> 00:12:14.530
the menu bar may be up there.

00:12:14.580 --> 00:12:17.170
The best example of why this is
a problem is if you look at an

00:12:17.170 --> 00:12:18.790
application like the Beanbox.

00:12:18.870 --> 00:12:22.400
The Beanbox has three
frames that it operates on.

00:12:22.400 --> 00:12:25.330
The menu bar is associated
with the main frame.

00:12:25.340 --> 00:12:29.430
We've run into this on MRJA in the
past where the menu bar being up in

00:12:29.430 --> 00:12:32.760
the actual menu bar on the system,
if you activate another frame,

00:12:32.760 --> 00:12:33.940
the menu bar goes away.

00:12:33.940 --> 00:12:34.700
That's not what you're going to see.

00:12:34.700 --> 00:12:36.160
That's not what your
users are going to expect.

00:12:36.240 --> 00:12:38.920
So you need to be aware
that when frames activate,

00:12:38.920 --> 00:12:42.170
the menu bar that's associated
with that frame is active.

00:12:42.200 --> 00:12:45.150
So we didn't want to force it up
to the top to begin with because

00:12:45.160 --> 00:12:48.550
we got a lot of user feedback
that that's just wonky and weird.

00:12:48.600 --> 00:12:51.920
And so we wanted to make sure that your
application is architected for that.

00:12:52.010 --> 00:12:55.680
But assuming that it is,
it's totally easy to enable this.

00:12:55.830 --> 00:12:59.680
All you need to do is call set J menu
bar on your frame or on your dialog.

00:12:59.980 --> 00:13:01.360
And you should be doing that anyway.

00:13:01.360 --> 00:13:04.700
That's just standard practice for Swing.

00:13:04.700 --> 00:13:09.210
The thing you need to be aware of is
you can't have any heavyweight AWT menu

00:13:09.260 --> 00:13:11.480
bars associated with it at the time.

00:13:11.720 --> 00:13:15.340
And currently, menu bars on J dialogs
don't work right now.

00:13:15.340 --> 00:13:16.580
We don't see a lot of applications.

00:13:16.600 --> 00:13:21.860
And it's kind of weird on the Macintosh
to have menu bars in your dialog anyway.

00:13:21.860 --> 00:13:23.450
So I'd recommend that you don't do that.

00:13:23.460 --> 00:13:25.830
But if you do,
don't expect it to go to the top.

00:13:25.840 --> 00:13:27.330
That doesn't work right now.

00:13:27.420 --> 00:13:30.950
But once you've called set J menu
bar on your frame or your dialog,

00:13:30.950 --> 00:13:34.700
all you need to do is enable the Ecom
Apple Mac OS use screen menu bar.

00:13:34.700 --> 00:13:36.700
And set that to true.

00:13:36.700 --> 00:13:39.190
You can either do that programmatically
in your code or you can do

00:13:39.280 --> 00:13:40.670
that as a command line switch.

00:13:40.700 --> 00:13:44.060
But it's as easy as that.

00:13:44.810 --> 00:13:49.610
So what I'm going to do now is go
into some of the simple HI things that

00:13:49.610 --> 00:13:52.350
you need to be aware of when you're
working on your application to make

00:13:52.350 --> 00:13:54.750
it harmonize best with the Macintosh.

00:13:55.040 --> 00:13:59.300
One of the things that Macintosh users,
and actually not just Macintosh users,

00:13:59.360 --> 00:14:02.460
any platform users come to
expect is that the UI is laid

00:14:02.550 --> 00:14:04.370
out in a way that they expect.

00:14:04.600 --> 00:14:06.450
Things like menus.

00:14:06.690 --> 00:14:09.360
Menus are laid out on the Macintosh.

00:14:09.530 --> 00:14:13.820
File menu, new, open, close, save, quit.

00:14:14.330 --> 00:14:17.250
Edit menu has things in the right place.

00:14:17.360 --> 00:14:20.010
The preferences on Mac OS X is
in the right place,

00:14:20.010 --> 00:14:21.280
that kind of thing.

00:14:21.540 --> 00:14:24.500
Preferences on Mac OS 9
is in the edit menu.

00:14:24.500 --> 00:14:27.190
And that the accelerators
are what you expect.

00:14:27.260 --> 00:14:30.530
And the accelerators are where I found,
actually in writing this demo,

00:14:30.770 --> 00:14:32.500
very wildly from platform to platform.

00:14:32.500 --> 00:14:34.490
I don't use Windows much at all.

00:14:34.500 --> 00:14:38.490
And looking at the Windows accelerators,
it was just completely wonky.

00:14:38.500 --> 00:14:41.500
And that Mac OS doesn't have
the same keyboard mnemonics.

00:14:41.500 --> 00:14:43.250
So when you're architecting
your application,

00:14:43.260 --> 00:14:45.250
you need to be aware that those
are the kind of things that

00:14:45.250 --> 00:14:46.500
users are going to depend on.

00:14:46.500 --> 00:14:48.500
Windows and dialog layout.

00:14:48.500 --> 00:14:51.500
This is less critical,
but you still need to be aware of it.

00:14:51.500 --> 00:14:53.500
Insofar as things like dialogs.

00:14:53.500 --> 00:14:56.500
Macintosh users expect an
OK in the bottom right.

00:14:56.500 --> 00:14:59.500
That's the default button that
is activated when you hit return.

00:14:59.500 --> 00:15:03.460
It cancels right next to it that
is clicked on when you hit escape.

00:15:03.520 --> 00:15:04.490
But that's not the case.

00:15:04.500 --> 00:15:07.490
That certain dialogs are
laid out in a certain way.

00:15:07.500 --> 00:15:09.460
Those kind of things
you need to be aware of.

00:15:09.540 --> 00:15:12.110
If you take advantage of the
standard things like the J option

00:15:12.170 --> 00:15:14.480
pane and that kind of thing,
we'll do it for you.

00:15:14.500 --> 00:15:16.780
But if you're counting up
your own dialogs on the fly,

00:15:16.900 --> 00:15:18.470
then you need to be aware of this.

00:15:18.670 --> 00:15:20.580
The best way to do,
to figure out this kind of

00:15:20.590 --> 00:15:23.500
stuff is just sit down and
use the standard application.

00:15:23.500 --> 00:15:26.500
Sit down and use text edit on
the Mac for a little while.

00:15:26.500 --> 00:15:27.490
Look at how things are laid out.

00:15:27.500 --> 00:15:28.500
That's the best way.

00:15:28.500 --> 00:15:31.490
Also pick up the latest HI guidelines.

00:15:31.500 --> 00:15:33.500
We actually have just published
the latest Aqua user guide.

00:15:33.500 --> 00:15:35.470
You can go to the web.

00:15:35.500 --> 00:15:37.700
I've actually got a link at
the end of the presentation on

00:15:37.700 --> 00:15:40.480
where to get that kind of stuff.

00:15:40.500 --> 00:15:43.410
So just splash around there.

00:15:43.500 --> 00:15:45.850
So with that, I'm going to kick it back
over to Eric and he'll show

00:15:45.890 --> 00:15:46.490
you how to turn this on.

00:15:49.100 --> 00:18:01.800
[Transcript missing]

00:18:02.370 --> 00:18:04.050
Okay, so how do we end up using that?

00:18:04.060 --> 00:18:09.560
Well, we've got our platform,
and so now back in our main class,

00:18:09.560 --> 00:18:13.740
in the Dear True Browser class,
we can actually check that platform,

00:18:13.740 --> 00:18:17.680
and if we are on a generic Java platform,
which is what we said Solaris was,

00:18:17.680 --> 00:18:21.600
then use the cross-platform
look and feel.

00:18:21.600 --> 00:18:25.450
So UIManager.setLookAndFeel,
UIManager.getCrossPlatformLookAndFeel

00:18:25.530 --> 00:18:26.270
ClassName.

00:18:26.270 --> 00:18:29.550
That's how we got Metal,
and it's actually useful from

00:18:29.590 --> 00:18:32.730
time to time for testing,
and also if you're doing any

00:18:32.730 --> 00:18:36.080
custom UI or anything like that,
to use Metal on Mac OS X.

00:18:36.080 --> 00:18:39.190
But of course, we'd actually prefer that
you end up using Aqua,

00:18:39.260 --> 00:18:42.460
which is the system look and feel,
and so for any platform here other

00:18:42.550 --> 00:18:45.030
than a generic Java platform,
we use the system look

00:18:45.040 --> 00:18:47.390
and feel class name,
and then, of course, call

00:18:47.390 --> 00:18:50.260
SwingUtilities.updateComponentTreeUI.

00:18:50.260 --> 00:18:51.950
So that gives us...
So that gives us Aqua.

00:18:51.960 --> 00:18:54.330
That's a really good start,
and that's with changing

00:18:54.330 --> 00:18:56.070
practically nothing in our code.

00:18:57.680 --> 00:18:59.440
Now we need a menu bar.

00:18:59.550 --> 00:19:03.940
So step one,
create a menu bar on this frame

00:19:03.940 --> 00:19:06.060
and call setJMenubar on that.

00:19:06.080 --> 00:19:09.920
As long as you're doing
that right now in your code,

00:19:10.040 --> 00:19:12.190
hopeful you are for a
menu bar rather than,

00:19:12.440 --> 00:19:16.060
say, adding it to a JPanel and laying
that out within your window.

00:19:16.060 --> 00:19:19.200
But if you do call setJMenubar,
then you're halfway there.

00:19:19.360 --> 00:19:25.520
The next step is to set this property,
comma, Apple Mac OS useScreenMenubar.

00:19:25.520 --> 00:19:28.620
You can do this cross-platform,
of course.

00:19:28.620 --> 00:19:30.310
So you can run this on all platforms.

00:19:30.390 --> 00:19:31.910
There's no platform check here.

00:19:32.010 --> 00:19:34.860
On other platforms, it will, of course,
just be ignored.

00:19:34.860 --> 00:19:38.600
And you do, again, have to do this before
calling setJMenubar.

00:19:38.600 --> 00:19:41.540
As long as you do that
before calling that method,

00:19:41.540 --> 00:19:45.540
then when you do call that method,
your menu bar will be grabbed.

00:19:46.060 --> 00:19:49.220
You can insert it up at the top of
the screen in the global menu bar

00:19:49.280 --> 00:19:52.450
and your Mac users will be a lot
happier than they'd otherwise be.

00:19:52.580 --> 00:19:54.770
So here, now we've got the look and feel.

00:19:54.770 --> 00:19:56.390
We've got the global menu bar.

00:19:56.390 --> 00:20:00.160
What about things like the menu
layout and the keyboard shortcuts?

00:20:00.160 --> 00:20:04.230
Well, I mentioned before that we had
platform-specific resources for

00:20:04.230 --> 00:20:07.800
all of those that are loaded by
our generic main menu bar class.

00:20:07.860 --> 00:20:11.300
Here, for example,
is the classic Mac OS version of this.

00:20:11.300 --> 00:20:14.740
So we've got a two-dimensional
array of objects here.

00:20:14.820 --> 00:20:19.740
The first element in that array
is just a list of the menus that

00:20:19.740 --> 00:20:22.820
we actually have on this platform.

00:20:22.820 --> 00:20:25.320
In this case,
we have file and edit menus.

00:20:25.320 --> 00:20:28.460
And then for each menu,
we have each of the menu items in turn.

00:20:28.460 --> 00:20:32.320
So the name of the menu item,
whatever its mnemonic is,

00:20:32.320 --> 00:20:36.190
and since keyboard navigation
of menus does not exist on

00:20:36.190 --> 00:20:40.220
classic Mac OS or on Mac OS X,
then we simply set that to null.

00:20:40.220 --> 00:20:42.850
A string that corresponds to
the shortcut for that menu item.

00:20:42.880 --> 00:20:46.140
And so,
meta n may look a little bit strange.

00:20:46.480 --> 00:20:50.860
Meta is the generic Java term for
what corresponds to the command

00:20:51.000 --> 00:20:55.570
key on the Mac OS and perhaps
other keys on other platforms.

00:20:55.620 --> 00:20:58.580
So it turns out that
Swing's keystroke class,

00:20:58.580 --> 00:21:02.670
when it sees this string,
will actually grab meta and translate

00:21:02.670 --> 00:21:04.980
that into the command key glyph.

00:21:05.090 --> 00:21:07.930
And so you'll actually get the
correct glyph within the menu.

00:21:08.040 --> 00:21:09.540
And then,
perhaps the most important part here,

00:21:09.590 --> 00:21:10.940
an action associated with that menu item.

00:21:10.940 --> 00:21:16.650
And so we can then do this on all
platforms and point all of our platforms,

00:21:16.980 --> 00:21:20.720
say the new action on all platforms,
through to exactly the same

00:21:20.720 --> 00:21:21.670
bottleneck in our code.

00:21:21.700 --> 00:21:26.030
Meaning that we don't have to change
the new action or opening files or

00:21:26.030 --> 00:21:30.890
closing documents or anything like
that for any platform specific stuff.

00:21:31.020 --> 00:21:34.380
And since this is classic Mac OS,
then we've got open, close, save.

00:21:34.460 --> 00:21:36.670
We've got quit at the
bottom of the file menu.

00:21:36.740 --> 00:21:40.690
And then our edit menu is undo, cut,
copy, paste, and preferences.

00:21:40.820 --> 00:21:42.990
How does this change on Mac OS X?

00:21:43.090 --> 00:21:45.830
Well, in a couple of ways.

00:21:46.150 --> 00:21:48.850
Most notably,
the quit menu is not in the file menu.

00:21:48.860 --> 00:21:51.430
It'll end up in the application
menu and we'll show you later

00:21:51.820 --> 00:21:53.260
how to take advantage of that.

00:21:53.360 --> 00:21:57.360
The other item that's worth noting
here is that we've got a help menu.

00:21:57.360 --> 00:21:59.960
So if you go in and you take
a look at the HI guidelines,

00:22:00.020 --> 00:22:02.130
then you'll see that it's strongly
recommended that all applications

00:22:02.130 --> 00:22:04.040
do provide some sort of help.

00:22:04.130 --> 00:22:06.260
Your users will definitely
appreciate that if you do.

00:22:06.260 --> 00:22:09.550
And so, because we unfortunately
didn't have time to do that,

00:22:09.580 --> 00:22:10.460
we're going to do that now.

00:22:10.460 --> 00:22:11.960
So if we didn't have time
to write complete help,

00:22:11.990 --> 00:22:14.450
we just wanted to show the menu,
then we actually put our about box here,

00:22:14.450 --> 00:22:16.620
even though that should really
be in the application menu.

00:22:16.620 --> 00:22:23.150
And we'll show you how to create an
about box within the app menu later.

00:22:23.250 --> 00:22:25.800
The other thing that I should mention is,
just to reiterate again,

00:22:25.800 --> 00:22:27.510
that these actions are exactly the same.

00:22:27.520 --> 00:22:29.650
So again,
this is going to point through exactly

00:22:29.650 --> 00:22:31.260
the same bottleneck in the code.

00:22:31.310 --> 00:22:35.070
Now, I mentioned previously that
creating your resources in this

00:22:35.070 --> 00:22:37.120
format makes localization easy.

00:22:37.240 --> 00:22:40.220
And in fact, it actually does.

00:22:40.220 --> 00:22:42.970
So we've got the,
we've got a German version of

00:22:42.970 --> 00:22:44.860
our Mac OS X menu bar layout.

00:22:44.860 --> 00:22:47.980
So you'll notice that the class name
has an underscore DE at the end,

00:22:47.980 --> 00:22:50.980
DE being the localization
code for German.

00:22:50.980 --> 00:22:52.980
And, well, all the strings are different.

00:22:52.980 --> 00:22:56.780
I have no idea what all of them mean,
but I presume that's file edit and help.

00:22:56.780 --> 00:22:57.770
And, well, Pete wrote that.

00:22:57.770 --> 00:22:59.980
He knows German.

00:22:59.980 --> 00:23:04.220
But when, so when you run this and your
language is actually set to German,

00:23:04.230 --> 00:23:07.650
as I'll show you in a minute,
then your application will just

00:23:07.650 --> 00:23:09.760
automatically appear in German.

00:23:10.050 --> 00:23:12.960
So if you are at all interested
in supporting multiple languages,

00:23:12.960 --> 00:23:15.010
this is definitely the
way that you want to go.

00:23:15.270 --> 00:23:16.740
And, of course, there's Windows.

00:23:16.740 --> 00:23:18.740
And so Windows is quite different.

00:23:18.740 --> 00:23:21.590
There's no close item there, for example.

00:23:21.620 --> 00:23:27.200
You have exit instead of quit,
and all of your menu items actually

00:23:27.200 --> 00:23:30.710
have mnemonics associated with them.

00:23:30.820 --> 00:23:35.360
And preferences actually end up in a view
menu and are called options instead of

00:23:35.360 --> 00:23:38.040
preferences and strange things like that.

00:23:38.040 --> 00:23:39.740
So in any case,
I'll show you a little bit

00:23:39.740 --> 00:23:39.740
more about that in a minute.

00:23:39.740 --> 00:23:42.450
But in any case,
now that we have the menu layout,

00:23:42.450 --> 00:23:44.500
how does actually all of that work?

00:23:44.500 --> 00:23:48.300
And so I've made two changes
to the code from before.

00:23:48.510 --> 00:23:53.500
One to take out our hack
to get it to be Sun OS.

00:23:53.500 --> 00:23:55.910
And instead we are going to run
as if we were on the Mac and

00:23:55.910 --> 00:23:57.500
with the appropriate menu bar.

00:23:57.500 --> 00:23:59.500
And so when I go forth
and run this application,

00:23:59.500 --> 00:24:03.450
then it comes up.

00:24:04.700 --> 00:24:06.700
And there we have an Aqua application.

00:24:06.700 --> 00:24:09.940
We have a global menu bar.

00:24:09.940 --> 00:24:14.790
And this most would behave as
a Mac user would expect with

00:24:14.790 --> 00:24:17.510
a minimal change to your code.

00:24:17.690 --> 00:24:21.940
So the icons are pretty much all
the same and everything like that.

00:24:21.940 --> 00:24:24.610
Again,
we changed very little code and all

00:24:24.610 --> 00:24:28.840
of a sudden we have an application
that looks much more like what your

00:24:28.880 --> 00:24:32.660
users will expect and much more like
all other applications on the system.

00:24:32.660 --> 00:24:32.660
Okay, cool.

00:24:36.090 --> 00:24:37.470
Okay, so that was the easy stuff.

00:24:37.610 --> 00:24:40.520
That was the, like, no code changes,
essentially, to be able to get this

00:24:40.580 --> 00:24:41.390
stuff up and running.

00:24:41.400 --> 00:24:45.240
So now what I'm going to go into,
and take deep breaths in between,

00:24:45.240 --> 00:24:49.480
I'm like flying through as I always do,
is some of the more complex features.

00:24:49.590 --> 00:24:50.880
These actually do require code changes.

00:24:50.880 --> 00:24:54.270
They should be relatively minimal,
and we're going to show you how to make

00:24:54.360 --> 00:24:57.870
these code changes in such a way that it
should be very unobtrusive in your code,

00:24:57.910 --> 00:25:01.000
in very isolated spots,
and have a big bang for the buck,

00:25:01.000 --> 00:25:03.240
or whatever you want to call it.

00:25:03.380 --> 00:25:05.660
So I'm going to go through drag and drop.

00:25:05.760 --> 00:25:07.540
I'm going to go through the MRJ toolkit.

00:25:07.640 --> 00:25:10.270
Those of you that have been here
in years past have heard me talk

00:25:10.270 --> 00:25:11.860
about this over and over again.

00:25:11.860 --> 00:25:14.860
I'm going to go through that briefly,
and in conjunction with that,

00:25:14.940 --> 00:25:19.070
handling some of the basic Apple events,
things like OpenDoc, Quit,

00:25:19.070 --> 00:25:20.530
those kind of things.

00:25:20.640 --> 00:25:24.450
I'm going to talk about some new file
system manipulation stuff that we've

00:25:24.550 --> 00:25:27.850
done that we expect to kind of grow,
that has kind of grown

00:25:27.850 --> 00:25:30.790
out of the MRJ toolkit,
and we hope to, in the future,

00:25:30.790 --> 00:25:31.720
replace the old MRJ.

00:25:31.720 --> 00:25:33.510
So I'm going to go through the
MRJ toolkit with some new work

00:25:33.510 --> 00:25:36.690
that we've got going on right now,
and I'm going to spend some

00:25:36.700 --> 00:25:38.710
time talking about JDirect.

00:25:39.320 --> 00:25:40.640
So, drag and drop.

00:25:40.640 --> 00:25:43.890
Drag and drop,
we fully implement Sun's implementation

00:25:43.900 --> 00:25:45.390
of drag and drop on Mac OS X.

00:25:45.430 --> 00:25:48.130
So,
the Java 2 drag and drop works just fine.

00:25:48.210 --> 00:25:51.740
And my recommendation for the
vast majority of apps is that

00:25:51.740 --> 00:25:53.700
you use Sun's implementation.

00:25:53.700 --> 00:25:55.820
It's fine for the 90% case.

00:25:55.820 --> 00:25:59.700
And we're working with them on some
of the issues that caused us to

00:25:59.740 --> 00:26:01.970
implement some of our own stuff.

00:26:02.090 --> 00:26:06.140
So, in addition to the Sun drag and drop,
which works for the 90% case,

00:26:06.270 --> 00:26:09.320
we've also got MRJ drag and
drop and MRJ data transfer.

00:26:09.320 --> 00:26:14.180
And those are more closely modeled after,
and those came out of MRJ 2.2,

00:26:14.180 --> 00:26:17.160
more closely modeled after
the Mac OS drag manager.

00:26:17.160 --> 00:26:20.580
They support things like
multiple non-file drag items.

00:26:20.690 --> 00:26:23.250
Sun's APIs allow you
to drag multiple files,

00:26:23.250 --> 00:26:25.930
but for other things,
you need to use ours.

00:26:25.930 --> 00:26:30.460
And in addition, conversion and coercion
between multiple data types.

00:26:30.460 --> 00:26:31.970
A good example of an application.

00:26:32.020 --> 00:26:35.190
That might need to use our drag
and drop versus Sun's is an

00:26:35.190 --> 00:26:36.930
application like a pre-press.

00:26:36.950 --> 00:26:40.540
I can see a pre-press application where
you're trying to write something that has

00:26:40.630 --> 00:26:44.160
to interact with Macintosh applications,
Photoshop, Illustrator,

00:26:44.160 --> 00:26:45.000
that kind of thing.

00:26:45.000 --> 00:26:47.960
In that kind of situation,
you might need to get more

00:26:47.960 --> 00:26:52.020
information from the scrap manager
and from the Macintosh drag and drop

00:26:52.020 --> 00:26:54.500
mechanism than Sun's APIs allow you.

00:26:54.500 --> 00:26:58.510
We're working with Sun to get some of
those kind of bubbled back up so that

00:26:58.580 --> 00:27:01.020
they can be available on all platforms.

00:27:01.020 --> 00:27:02.520
But for right now,
we... We're working with Sun to

00:27:02.520 --> 00:27:03.230
get some of those kind of things.

00:27:03.300 --> 00:27:03.730
Yeah.

00:27:03.780 --> 00:27:06.300
...that's what we've
provided you with a stop gap.

00:27:06.300 --> 00:27:09.000
The only thing that you're going to
need to be aware of is some of the

00:27:09.060 --> 00:27:11.910
visual cues and that kind of thing
when you're doing drag and drop.

00:27:11.910 --> 00:27:13.840
Eric will show that in a
little bit in the demo,

00:27:13.940 --> 00:27:16.700
but visual cues are the only things
that you're really going to need

00:27:16.700 --> 00:27:18.050
to be aware of in drag and drop.

00:27:18.050 --> 00:27:19.180
The rest of it just works.

00:27:19.190 --> 00:27:22.110
And it was actually, in playing with it,
surprisingly easy to wire up

00:27:22.220 --> 00:27:23.450
standard Sun drag and drop.

00:27:23.450 --> 00:27:26.040
To do more complex things, obviously,
gets more complex,

00:27:26.040 --> 00:27:28.920
but for standard drag and drop,
it's very easy.

00:27:31.910 --> 00:27:32.670
MRJ toolkit.

00:27:32.790 --> 00:27:34.560
MRJ toolkit we've talked
about in the past.

00:27:34.560 --> 00:27:36.800
I'm not going to spend
a ton of time on this.

00:27:36.890 --> 00:27:40.560
Our stance on the MRJ toolkit
APIs is we've brought them over

00:27:40.560 --> 00:27:43.370
from MRJ because they're very
valuable to a number of applications.

00:27:43.670 --> 00:27:45.690
Unfortunately, they're also very dated.

00:27:45.690 --> 00:27:47.920
They came from MRJ in the past.

00:27:47.920 --> 00:27:53.370
The APIs were very specific to Mac OS 9
and a lot of the Mac OS 9 paradigms.

00:27:53.370 --> 00:27:58.520
And so we're working on new APIs that
bind much more closely to Sun's APIs and

00:27:58.530 --> 00:28:01.100
make a lot more sense going forward.

00:28:01.100 --> 00:28:02.350
Unfortunately, those aren't ready yet.

00:28:02.350 --> 00:28:03.400
We're working on those in-house.

00:28:03.400 --> 00:28:05.340
We're going to roll those out to you.

00:28:05.340 --> 00:28:06.360
But they're not quite ready yet.

00:28:06.360 --> 00:28:08.460
And the MRJ toolkit
still has a lot of value.

00:28:08.460 --> 00:28:12.140
So things like the OS type class,
that allows you to get at the

00:28:12.180 --> 00:28:15.540
four--get at and manipulate
and create the four byte,

00:28:15.540 --> 00:28:21.080
the four character key codes that
are used throughout the Mac OS.

00:28:21.080 --> 00:28:25.870
The MRJ file utils is a set of very
rudimentary functions on a class that

00:28:25.870 --> 00:28:27.570
allow you to get at the four byte.

00:28:27.600 --> 00:28:29.970
It allows you to manipulate
Mac OS specific attributes on files,

00:28:29.970 --> 00:28:33.340
things like file types and creators,
locating apps and special folders,

00:28:33.340 --> 00:28:34.370
that kind of thing.

00:28:34.460 --> 00:28:39.370
There are certain paradigms that we
don't support in the MRJ--the MRJ toolkit

00:28:39.380 --> 00:28:42.830
on Mac OS--on Mac OS X because
the paradigm isn't quite the same.

00:28:42.850 --> 00:28:45.790
Something--things like
setting the default type and

00:28:45.790 --> 00:28:47.920
creator for applications.

00:28:47.920 --> 00:28:51.740
The Mac OS X mechanism allows for
types and creators as well but we're

00:28:51.890 --> 00:28:54.340
encouraging file name extensions as well.

00:28:54.340 --> 00:28:56.350
So things like that aren't
supported by the MRJ.

00:28:56.440 --> 00:28:58.440
So we're encouraging that
to be supported on Mac OS X.

00:28:58.450 --> 00:29:02.720
The MRJ application utils is a
set of--is a class that allows you

00:29:02.720 --> 00:29:06.300
to handle things like installing
the standard Apple event handlers.

00:29:06.300 --> 00:29:08.560
So if you want to be able
to respond to the quit event

00:29:08.610 --> 00:29:11.940
when it's in your application,
if you need to be able to open

00:29:11.950 --> 00:29:14.360
documents about those kind of things,
that's where the

00:29:14.360 --> 00:29:15.540
application utils come in.

00:29:15.620 --> 00:29:19.200
And that's actually the one thing that
is actually--makes a lot of sense and

00:29:19.200 --> 00:29:20.910
we don't have a replacement for yet.

00:29:20.980 --> 00:29:24.950
So adopting the APIs for the
basic Apple events is a great

00:29:25.080 --> 00:29:26.150
way to get at the four byte.

00:29:26.160 --> 00:29:28.660
is totally easy, it's really simple.

00:29:28.660 --> 00:29:31.850
All you have to do is implement an
interface and register the class

00:29:31.850 --> 00:29:33.850
that implements that interface.

00:29:33.860 --> 00:29:37.640
And I've actually found that provided
that you have standard bottlenecks in

00:29:37.640 --> 00:29:40.280
your code for handling these things,
which you would normally

00:29:40.280 --> 00:29:42.550
have to do anyway,
your application needs to be able

00:29:42.550 --> 00:29:44.020
to deal with an open document.

00:29:44.020 --> 00:29:46.840
If you've got a standard bottleneck for
whether your application deals with that,

00:29:47.000 --> 00:29:50.850
all you have to do is call it by the
right thing or funnel this call through

00:29:50.850 --> 00:29:52.730
to the right thing and you're good to go.

00:29:52.810 --> 00:29:55.120
Same thing with quit,
same thing with all those kind of things.

00:29:55.200 --> 00:29:59.460
I, in my application that I wrote,
all I had to do was change method

00:29:59.460 --> 00:30:01.230
name and it worked like a charm.

00:30:03.640 --> 00:30:05.040
File system access.

00:30:05.040 --> 00:30:06.510
This is something that we've
been working on in-house.

00:30:06.560 --> 00:30:11.530
Actually, Eric has been poring
over for the last while.

00:30:11.530 --> 00:30:16.760
What our goal is here is to create
a set of APIs that bind much

00:30:16.760 --> 00:30:20.880
more closely to the Sun APIs,
match the paradigms much more closely,

00:30:20.880 --> 00:30:24.360
and allow you to get at a
number of the Mac OS X features.

00:30:24.480 --> 00:30:27.980
This API right now is a proposal,
it's not in the release.

00:30:28.090 --> 00:30:30.820
We're actually going to release it to
you in sample code by the end of next

00:30:30.880 --> 00:30:32.800
week so that we can push it out to you.

00:30:32.800 --> 00:30:36.050
What we want is for you to play with it,
you to give us feedback

00:30:36.060 --> 00:30:39.040
on what makes sense,
what doesn't, what's there, what's not,

00:30:39.040 --> 00:30:42.480
so that we can eventually roll
this into the system and be able to

00:30:42.480 --> 00:30:48.360
take advantage of this throughout
our applications and yours.

00:30:48.360 --> 00:30:49.480
We didn't want to do that prematurely.

00:30:49.480 --> 00:30:52.300
We wanted to get feedback
from you all first.

00:30:52.300 --> 00:30:54.260
I'm going to go through
the details of it,

00:30:54.260 --> 00:30:57.390
but make sure that you go to our
website and pull down this source,

00:30:57.390 --> 00:30:59.800
play with it, see if it makes sense
for your application.

00:30:59.800 --> 00:31:00.130
Okay.

00:31:00.360 --> 00:31:03.050
The two things we've implemented
right now in it are the Mac file

00:31:03.050 --> 00:31:04.860
and the Mac application class.

00:31:04.940 --> 00:31:09.720
The Mac file class is intended
to be able to deal with

00:31:09.720 --> 00:31:12.530
Mac OS X specific file attributes.

00:31:12.580 --> 00:31:17.440
Again, very similar to the MRJ file utils
insofar as getting types and creators,

00:31:17.520 --> 00:31:20.960
that kind of thing,
finder attributes and more,

00:31:20.970 --> 00:31:23.150
which I'll go into in a second.

00:31:23.210 --> 00:31:25.730
The Mac application is for
launchability kinds of things.

00:31:25.760 --> 00:31:28.200
One of the things that we get
feedback from developers a lot is

00:31:28.200 --> 00:31:30.240
I need to launch an application.

00:31:30.240 --> 00:31:33.800
.exec is totally obscure for
my application and doesn't

00:31:33.800 --> 00:31:35.900
make sense on the Mac as well.

00:31:35.900 --> 00:31:38.880
Actually, it doesn't really work
on a lot of platforms,

00:31:39.000 --> 00:31:39.660
real well.

00:31:39.660 --> 00:31:41.230
And we need a more
standard way of doing that.

00:31:41.320 --> 00:31:43.060
So that's what the
Mac application class is for.

00:31:43.060 --> 00:31:45.680
And it's also for dealing
with MIME type mapping,

00:31:45.680 --> 00:31:47.590
mapping files to applications.

00:31:47.600 --> 00:31:51.600
So the Mac file class, like I said,
is a totally standard,

00:31:51.600 --> 00:31:53.290
straightforward API.

00:31:53.290 --> 00:31:57.300
It allows you to check if it's an alias,
file directory, package.

00:31:57.380 --> 00:32:00.310
Get canonical path is an interesting
one because this has come up

00:32:00.380 --> 00:32:03.430
on our lists before and we've
gotten a lot of discussion about

00:32:03.820 --> 00:32:06.600
what we should do with aliases.

00:32:06.600 --> 00:32:09.510
And we've discovered over the course
of MRJ that if you do the right thing

00:32:09.580 --> 00:32:12.250
for one application with aliases,
resolve the aliases to

00:32:12.260 --> 00:32:15.500
what they really should be,
another class of application busts.

00:32:15.540 --> 00:32:19.110
And so what we wanted to do here is
allow you to resolve it if you need to

00:32:19.110 --> 00:32:23.860
but not change the underlying classes
because we found that changing the

00:32:23.860 --> 00:32:27.880
way Java I/O file works just busts
a whole collection of applications.

00:32:27.880 --> 00:32:34.120
So we're allowing you to get at
aliases and manipulate aliases

00:32:34.190 --> 00:32:37.300
without busting everyone.

00:32:37.300 --> 00:32:41.550
Is visible in Finder is another
Mac OS X specific kind of paradigm.

00:32:41.590 --> 00:32:45.110
There's a distinction between what
the file APIs expect is visible,

00:32:45.110 --> 00:32:45.690
i.e.

00:32:45.690 --> 00:32:48.680
what Unix shows as
visible versus invisible,

00:32:48.680 --> 00:32:51.770
and what the Mac OS shows
as visible or invisible.

00:32:51.780 --> 00:32:54.850
There's actually a whole slew
of things that you can see in

00:32:54.850 --> 00:32:57.900
the Unix file system as visible,
but that your user won't see and

00:32:57.900 --> 00:33:02.420
you need to be able to make that
distinction in a lot of situations.

00:33:02.420 --> 00:33:05.380
And get icons, standard kinds of stuff.

00:33:05.430 --> 00:33:10.520
Mac application is again for
dealing with opening documents,

00:33:10.520 --> 00:33:13.180
manipulating documents,
that kind of thing.

00:33:13.180 --> 00:33:16.370
And so first of all,
get file just gets you the Mac file back.

00:33:16.700 --> 00:33:22.400
But more interesting is the open and
open document APIs that allow you

00:33:22.470 --> 00:33:25.540
to essentially launch applications
the way that the Finder would.

00:33:25.540 --> 00:33:28.080
So that if you need to
launch a web browser,

00:33:28.080 --> 00:33:31.940
launch a web browser with a page,
that kind of thing, this is how you would

00:33:31.940 --> 00:33:33.040
go about doing that.

00:33:33.040 --> 00:33:37.420
It also deals with application
specific Finder attributes

00:33:37.420 --> 00:33:39.220
and bundle style attributes.

00:33:39.240 --> 00:33:43.880
So Eric will show how
this is used in a second.

00:33:45.430 --> 00:33:46.230
JDirect 3.

00:33:46.320 --> 00:33:49.800
If you went to Blaine's talk on,
when was it, I guess it was Tuesday,

00:33:49.800 --> 00:33:52.690
on the VM,
he talked briefly about JDirect 3.

00:33:52.700 --> 00:33:55.300
I'm also going to talk
briefly about JDirect 3.

00:33:55.300 --> 00:34:01.170
JDirect 3 is one of these things that
I find insanely powerful because it means

00:34:01.170 --> 00:34:04.300
that I never have to wander into C code.

00:34:04.300 --> 00:34:08.300
But in general,
people don't end up using it a ton.

00:34:08.300 --> 00:34:10.250
So I'm not going to spend
a ton of time on that.

00:34:10.250 --> 00:34:12.300
There's a lot of developer documentation.

00:34:12.300 --> 00:34:14.640
The thing to keep in mind
here is if you've already

00:34:14.640 --> 00:34:18.300
got JDirect code out there,
the difference between JDirect 2

00:34:18.300 --> 00:34:20.300
and JDirect 3 is important to note.

00:34:20.300 --> 00:34:23.300
The biggest deal is the new
linker class that you see here.

00:34:23.300 --> 00:34:27.460
You need to be able to do that
to tell the VM to bind your

00:34:27.470 --> 00:34:30.270
native classes to your library.

00:34:30.300 --> 00:34:35.300
So this is the sample code that he
threw on the screen the other day.

00:34:35.300 --> 00:34:38.300
What I wanted to do is point out
kind of more important things.

00:34:38.300 --> 00:34:40.590
One of the things that's important
to us is how you bind to the

00:34:40.650 --> 00:34:43.300
toolbox because that's where
we use JDirect all over the place.

00:34:43.300 --> 00:34:45.870
This is how you bind to Carbon,
how you bind to other

00:34:45.950 --> 00:34:47.300
system applications.

00:34:47.300 --> 00:34:50.450
The only thing that's different between
this and the previous example is the

00:34:50.510 --> 00:34:52.300
library that you're linking against.

00:34:52.300 --> 00:34:55.290
It's not your personal library.

00:34:55.290 --> 00:34:59.300
It's system library framework,
core services framework, core services.

00:34:59.360 --> 00:35:03.300
And the call that you're
linking against is new pointer.

00:35:03.300 --> 00:35:06.570
But this allows you to,
and it allows us in our implementation,

00:35:06.580 --> 00:35:08.300
to get at the entire toolbox.

00:35:08.300 --> 00:35:12.190
This is how we implement a good portion
of AWT and Swing is using JDirect.

00:35:12.490 --> 00:35:15.530
There's more examples of this and
actually the Mac file APIs and that kind

00:35:15.540 --> 00:35:17.300
of stuff that we're going to roll out.

00:35:17.300 --> 00:35:20.300
We're going to roll out the whole
source code to the implementation

00:35:20.390 --> 00:35:22.300
and you can see how to use JDirect.

00:35:22.300 --> 00:35:26.040
Using it is pretty straightforward
once you get used to it but there's

00:35:26.040 --> 00:35:28.300
some paradigms you need to get used to.

00:35:31.790 --> 00:35:34.230
Toolbox Lock.

00:35:34.230 --> 00:35:37.810
We've been telling you over and
over again over the years that the

00:35:37.810 --> 00:35:40.190
Mac OS toolbox Carbon is not preemptive.

00:35:40.200 --> 00:35:40.930
It's not preemptive.

00:35:40.940 --> 00:35:45.390
It's not re-entry.

00:35:45.490 --> 00:35:48.780
If you interrupt the toolbox,
your application will potentially

00:35:48.780 --> 00:35:50.210
behave poorly or crash.

00:35:51.160 --> 00:35:54.200
On Mac OS X, this wasn't as big of a deal
because as long as you were

00:35:54.200 --> 00:35:56.850
down in your native code,
your toolbox calls weren't

00:35:56.980 --> 00:35:58.290
going to be preemptive.

00:35:58.300 --> 00:36:00.100
On Mac OS X, this is a huge deal.

00:36:00.120 --> 00:36:03.060
This is a really huge deal
because suddenly we've got

00:36:03.060 --> 00:36:04.760
a real preemptive system.

00:36:04.760 --> 00:36:06.690
Carbon can,
you can be running from multiple

00:36:06.690 --> 00:36:09.850
threads and the nature of Java is
you've got multiple threads running.

00:36:09.850 --> 00:36:13.930
So you need to make sure that if you're
calling the toolbox in your application

00:36:13.930 --> 00:36:15.920
that you acquire this Carbon lock.

00:36:15.960 --> 00:36:19.000
This is what we do throughout our code
and this is how you make sure that you

00:36:19.000 --> 00:36:20.880
don't clobber us or we don't clobber you.

00:36:20.880 --> 00:36:21.140
We don't clobber you.

00:36:21.200 --> 00:36:24.360
We try and be real meticulous about
making sure that we maintain this lock.

00:36:24.390 --> 00:36:27.700
And you'll notice that this lock has
changed slightly in that we're not

00:36:27.700 --> 00:36:31.540
acquiring a lock on a specific global
piece of information like we did on MRJ.

00:36:31.540 --> 00:36:32.600
It's a function call.

00:36:32.600 --> 00:36:35.240
This allows us to do some magic
things behind the scenes that

00:36:35.240 --> 00:36:36.740
allow us to clean it up later.

00:36:36.740 --> 00:36:38.300
But you need to be aware of this.

00:36:40.650 --> 00:36:46.700
So, kick it over to Eric and he'll
show how to wire this stuff up.

00:36:47.580 --> 00:36:50.520
Okay,
so the first thing I want to talk about,

00:36:50.520 --> 00:36:52.330
and there's a very long list
of things to go through here,

00:36:52.340 --> 00:36:56.070
is drag and drop.

00:36:56.220 --> 00:37:00.380
We've got our application running here,
which you've seen before.

00:37:00.390 --> 00:37:04.700
And we open our,
let's say the applications folder,

00:37:04.800 --> 00:37:09.040
scroll down here, find mail.app,
just to bring that over here,

00:37:09.040 --> 00:37:11.040
and drag this over.

00:37:11.040 --> 00:37:13.290
And you'll note that when
I drag this over the tree,

00:37:13.360 --> 00:37:15.760
so I can drop this into the
tree and it's going to actually

00:37:15.760 --> 00:37:18.070
open up the entire tree,
go through the hierarchy,

00:37:18.070 --> 00:37:20.310
and select mail.app in there,
then I get a little

00:37:20.330 --> 00:37:21.930
highlight ring around that.

00:37:21.980 --> 00:37:25.290
That's something that we
would prefer that you do.

00:37:25.300 --> 00:37:28.410
So, Sun's drag and drop API does not
do that for you automatically,

00:37:28.410 --> 00:37:30.280
and it turns out to be relatively easy.

00:37:30.310 --> 00:37:31.400
I'll show you how to do that in a second.

00:37:31.400 --> 00:37:34.250
But it's always a good idea to give
your users feedback when using drag

00:37:34.250 --> 00:37:36.660
and drop to let them know where
you can actually drop something.

00:37:36.660 --> 00:37:40.330
So when I drag this back here,
then the highlight goes away,

00:37:40.330 --> 00:37:44.020
and then it comes back,
and so I let it go, and switch in here,

00:37:44.020 --> 00:37:47.210
and everything opens up,
and mail.app is actually

00:37:47.400 --> 00:37:48.760
selected in there.

00:37:48.800 --> 00:37:57.180
So, to get all of that to work,
I'll go back to our tree class here.

00:37:57.200 --> 00:38:02.200
So, within der tree,
within the tree's constructor,

00:38:02.250 --> 00:38:04.430
we create a new drop target.

00:38:04.440 --> 00:38:09.460
This is using the standard Sun JDK 1.2
and later drag and drop APIs.

00:38:09.550 --> 00:38:12.440
Create a new drop target
using this as the component,

00:38:12.450 --> 00:38:15.700
and this also as the event listener.

00:38:15.700 --> 00:38:19.650
So, you'll see here this implements
drop target listener.

00:38:20.030 --> 00:38:24.580
Drop Target Listener requires that you
implement a couple of methods here.

00:38:24.580 --> 00:38:26.330
If I go all the way down to the end.

00:38:26.610 --> 00:38:31.900
First, drag over and drop action changed,
we're not actually going to worry about.

00:38:31.930 --> 00:38:33.970
And in general, you don't have to worry
about them all that much.

00:38:34.000 --> 00:38:36.760
The two important ones here,
first of all,

00:38:36.890 --> 00:38:38.940
are drag enter and drag exit.

00:38:38.940 --> 00:38:42.980
So again, when you're entered with a
drag that you want to accept,

00:38:43.130 --> 00:38:45.880
then it's a good idea to take
advantage of Swing's border

00:38:45.880 --> 00:38:50.920
facilities and add a border to
the component of the right color,

00:38:50.920 --> 00:38:53.060
in this case, the text highlight color.

00:38:54.640 --> 00:38:57.580
and to show that you can
actually drop something in there.

00:38:57.600 --> 00:39:00.200
And of course on drag exit you
want to remove that border.

00:39:00.200 --> 00:39:02.840
On the other hand,
you may potentially run into some

00:39:02.840 --> 00:39:07.180
slight layout issues if you end
up actually removing that border,

00:39:07.180 --> 00:39:08.500
or at least we did in this case.

00:39:08.500 --> 00:39:12.530
And so instead we create a border
just of the regular text color,

00:39:12.540 --> 00:39:15.440
and so that ends up showing up
in black instead of in yellow,

00:39:15.440 --> 00:39:16.720
and so the color goes back and forth.

00:39:16.720 --> 00:39:21.740
There's one other -- well,
one thing that you absolutely have to do,

00:39:21.740 --> 00:39:24.480
if you choose not to go
with the highlight border,

00:39:24.480 --> 00:39:26.710
that's okay,
but you really do have to find

00:39:26.710 --> 00:39:28.110
some way of accepting the drop.

00:39:28.190 --> 00:39:32.500
And so this again uses the Sun's
standard API to get the transferable

00:39:32.500 --> 00:39:38.000
object from the drop target drop event
to ensure that the file flavor is

00:39:38.000 --> 00:39:40.850
supported by whatever's being dragged.

00:39:40.860 --> 00:39:42.740
Grab the transfer data out.

00:39:42.760 --> 00:39:46.520
This is a list of files in Sun's API,
but since we can only process one

00:39:46.590 --> 00:39:50.150
file at a time with this application,
then we ensure that there

00:39:50.150 --> 00:39:52.380
is actually a file there,
get the first file out,

00:39:52.380 --> 00:39:53.960
and then actually navigate to it.

00:39:54.360 --> 00:39:57.340
So we have the navigate to
method that opens up the tree and

00:39:57.370 --> 00:40:01.280
goes through it and selects the
object that it's asked to select.

00:40:01.700 --> 00:40:03.310
So that's drag and drop.

00:40:03.480 --> 00:40:05.900
The next thing is
handling the Apple events.

00:40:05.900 --> 00:40:11.440
And so in our main class here,
we implement comAppleMRJ, MRJQuitHandler,

00:40:11.440 --> 00:40:14.380
MRJOpenDocumentHandler,
and MRJAboutHandler.

00:40:14.380 --> 00:40:17.530
So we can handle the QuitAppleEvent,
OpenDocumentAppleEvent,

00:40:17.530 --> 00:40:18.850
and AboutAppleEvent.

00:40:18.850 --> 00:40:24.840
And that only requires changing
a couple other lines in the code.

00:40:24.920 --> 00:40:28.310
So adding three additional lines
so that when we are on the Mac,

00:40:28.310 --> 00:40:30.730
then we call through
to MRJApplicationUtils

00:40:30.730 --> 00:40:34.280
and register the Quit,
OpenDocument, and AboutHandlers.

00:40:34.280 --> 00:40:38.600
The reason actually why this can be
included in the main class and still

00:40:38.820 --> 00:40:43.260
have it compile across platform is that
we do distribute an MRJToolkitStubs

00:40:43.370 --> 00:40:47.360
that simply has implementations of
all of these methods that are stubbed

00:40:47.360 --> 00:40:49.460
out when not running on the Mac OS.

00:40:49.460 --> 00:40:53.040
So you can actually,
you could even run those

00:40:53.040 --> 00:40:54.900
on other platforms.

00:40:54.920 --> 00:40:55.940
They would simply do nothing.

00:40:55.940 --> 00:40:59.650
So because we factored this code well,
then we have bottleneck

00:40:59.650 --> 00:41:02.310
routines for quitting,
for opening a file,

00:41:02.310 --> 00:41:04.320
and for handling an AboutBox.

00:41:04.320 --> 00:41:08.160
And all we have to do is ensure that
the names of those are the names

00:41:08.260 --> 00:41:10.400
that are in our implementation.

00:41:10.400 --> 00:41:13.420
And so, for example, handle Quit here.

00:41:13.420 --> 00:41:16.200
Nice and basic,
just call system.exit of 0.

00:41:16.200 --> 00:41:18.580
But if you wanted to do something
like prompt the user to save a

00:41:18.580 --> 00:41:21.300
document or something like that,
then you'd go through there.

00:41:21.300 --> 00:41:24.720
And handle OpenFile there.

00:41:24.920 --> 00:41:27.780
And handle About right here.

00:41:27.780 --> 00:41:32.280
So that's how you go about
handling the basic Apple events.

00:41:32.280 --> 00:41:36.150
And then there's one
additional thing to show.

00:41:36.160 --> 00:41:38.180
Okay, maybe two.

00:41:38.180 --> 00:41:43.060
So we have a class called InspectorPanel
that draws that panel on the right that

00:41:43.150 --> 00:41:49.120
shows the basic file attributes that you
can get from the standard 1.3 file API.

00:41:49.120 --> 00:41:50.140
So can you read a file?

00:41:50.140 --> 00:41:50.880
Can you write a file?

00:41:50.880 --> 00:41:51.740
When was it modified?

00:41:51.740 --> 00:41:52.750
And so on and so forth.

00:41:52.800 --> 00:41:54.900
There's one thing that
we'd actually take.

00:41:54.900 --> 00:41:59.620
So we've taken out of here,
which is if we're on the Mac,

00:41:59.620 --> 00:42:05.000
then we want to add this thing that
we factored out into a separate

00:42:05.050 --> 00:42:08.480
class called MacPropertiesPanel.

00:42:08.480 --> 00:42:12.780
And what that actually does is
to take advantage of the Mac file

00:42:12.780 --> 00:42:17.010
and Mac application APIs and
to show you Macintosh-specific

00:42:17.010 --> 00:42:19.280
file attributes about them.

00:42:19.310 --> 00:42:21.530
And before I go forth
and actually run that,

00:42:21.550 --> 00:42:24.170
I want to show one additional thing,
which is how we can take it

00:42:24.170 --> 00:42:24.880
out of the Mac and run it.

00:42:24.930 --> 00:42:29.110
So we're going to take advantage of get
icon then for our individual tree nodes

00:42:29.130 --> 00:42:33.560
and grab the Mac file for the file that
corresponds to each node in the tree.

00:42:33.560 --> 00:42:37.490
And if it's an application,
then because the application icons

00:42:37.490 --> 00:42:41.090
look really pretty on Mac OS X,
we'll grab the icon and calling

00:42:41.220 --> 00:42:44.000
get icon on the Mac file,
grab it as an image,

00:42:44.000 --> 00:42:47.340
create an image icon,
and then set the icon for that tree

00:42:47.420 --> 00:42:49.790
node to be the icon of that file.

00:42:49.800 --> 00:42:51.610
So what does all of this look like?

00:42:51.700 --> 00:42:54.620
I'll go forth and run it.

00:42:54.900 --> 00:42:55.740
Peace.

00:42:58.000 --> 00:42:59.730
And this comes up,
and we've got an additional

00:42:59.730 --> 00:43:01.440
properties panel in there.

00:43:01.440 --> 00:43:04.320
So for everything on the system now,
you can see, is this an application?

00:43:04.320 --> 00:43:05.320
Is it a package?

00:43:05.320 --> 00:43:06.460
Is it an alias?

00:43:06.480 --> 00:43:08.190
Does it actually show up in the finder?

00:43:08.260 --> 00:43:09.380
What does it look like?

00:43:09.380 --> 00:43:13.100
And what's its canonical path?

00:43:13.100 --> 00:43:18.800
So for example, for aliases,
we have an alias to the Java VM framework

00:43:18.800 --> 00:43:22.260
that's at the root level of the system.

00:43:22.260 --> 00:43:24.650
So we've got a little bit of a painting
glitch with the icon right now,

00:43:24.650 --> 00:43:26.430
but we'll take care of that.

00:43:26.460 --> 00:43:28.990
We've got a checkbox here that says,
is this an alias?

00:43:29.090 --> 00:43:30.060
Yes, it is.

00:43:30.060 --> 00:43:31.320
Here is the canonical path.

00:43:31.320 --> 00:43:33.960
So we've done the alias resolution,
and that's what it points to.

00:43:33.960 --> 00:43:36.080
You can then create a
file with that string,

00:43:36.090 --> 00:43:39.620
and you get the actual file on
the system that corresponds to.

00:43:39.620 --> 00:43:42.840
We've also got open here,
and so I'll hit open.

00:43:42.840 --> 00:43:45.080
And even though that
appeared at the root level,

00:43:45.100 --> 00:43:48.980
you can see what opened in the finder
was the Java VM framework folder

00:43:49.480 --> 00:43:52.140
within system library frameworks.

00:43:52.140 --> 00:43:55.740
So that's alias resolution on Mac OS X.

00:43:55.740 --> 00:44:00.700
You also may notice that this
list of files is now a lot shorter

00:44:00.700 --> 00:44:04.240
than it was when we ran the
application back in the beginning.

00:44:04.240 --> 00:44:06.890
The reason for that is that we're
only showing the files that are

00:44:06.890 --> 00:44:08.900
actually visible in the finder.

00:44:08.900 --> 00:44:11.150
So we're displaying an interface
that looks more like what your

00:44:11.150 --> 00:44:14.300
users will expect when they're
navigating through a file dialog.

00:44:14.300 --> 00:44:19.080
You don't see user and dev and cores and
everything like that in here anymore.

00:44:19.600 --> 00:44:22.260
And when you go into the
Applications folder in here,

00:44:22.310 --> 00:44:27.500
then you'll notice that the applications
are actually no longer folders.

00:44:27.610 --> 00:44:31.210
And instead they appear to the user
as if they are standard applications.

00:44:31.210 --> 00:44:34.440
And in fact, I'm going to take Mail.app
here and hit Open.

00:44:34.440 --> 00:44:38.110
And you see the dock open
up and Mail.app pops up.

00:44:38.820 --> 00:44:42.700
And there we go, we have mail.

00:44:42.700 --> 00:44:47.710
So this is how you can take advantage
of a Mac file and Mac application

00:44:47.710 --> 00:44:53.340
APIs to do things that your users
on Mac OS X will really appreciate.

00:44:53.490 --> 00:44:56.930
So now back to Pete to
talk about packaging.

00:45:01.120 --> 00:45:03.500
Thanks, if we can get the slides
back up here real quick.

00:45:03.550 --> 00:45:05.460
The last thing I want
to go over is packaging,

00:45:05.460 --> 00:45:08.640
and packaging is totally
straightforward on Mac OS X.

00:45:08.740 --> 00:45:12.050
First of all, like I said earlier,
the first step in getting your

00:45:12.050 --> 00:45:14.730
application packaged up right is
getting it packaged up in a jar

00:45:14.730 --> 00:45:16.820
that's available on all applications.

00:45:16.840 --> 00:45:21.080
One of the things that we're working
on in-house that isn't ready yet,

00:45:21.080 --> 00:45:25.020
but will be available very soon,
I don't have specific dates yet,

00:45:25.040 --> 00:45:28.510
or actually, probably just shouldn't
make specific promises yet,

00:45:28.550 --> 00:45:32.480
but we're going to have a mechanism
for allowing for double-clickable jars.

00:45:32.540 --> 00:45:35.020
So you'll be able to, in the finder,
just double-click on a jar

00:45:35.020 --> 00:45:37.170
itself and just have it launch.

00:45:37.250 --> 00:45:40.480
So we've got that running in-house,
and there's just some minor glitches

00:45:40.480 --> 00:45:42.950
that we need to work out with that.

00:45:43.100 --> 00:45:46.380
But in addition,
like you saw in the demos,

00:45:46.510 --> 00:45:49.000
Mac OS X applications are packages.

00:45:49.020 --> 00:45:50.900
There's a whole bunch of
other things that you can

00:45:50.900 --> 00:45:52.890
bundle up in Mac OS X bundles.

00:45:53.170 --> 00:45:57.230
And so there's a number of tools that you
can use for creating Mac OS X bundles.

00:45:57.290 --> 00:46:01.050
If you notice,
JBuilder is bundled up as a,

00:46:01.150 --> 00:46:04.140
as standard Mac OS X application,
or AppBuilder.

00:46:04.140 --> 00:46:07.170
All of the Java applications on
the system are bundled up that way.

00:46:07.240 --> 00:46:09.540
So you can either use a
tool like ProjectBuilder.

00:46:09.540 --> 00:46:11.780
If you're using ProjectBuilder
to design your code,

00:46:11.830 --> 00:46:16.810
ProjectBuilder will burp out a standard
Java application package that will

00:46:16.910 --> 00:46:18.720
look like a standard application.

00:46:18.770 --> 00:46:21.750
JBuilder,
apparently I heard rumors of the JBuilder

00:46:21.750 --> 00:46:25.320
session yesterday talking about bundling
up double-clickable applications.

00:46:25.320 --> 00:46:28.500
In addition,
we've also got a mechanism for

00:46:28.500 --> 00:46:32.160
bundling it up inside of bundling
apps and using standard jars so you

00:46:32.160 --> 00:46:36.110
can just drag a jar over and use
MRJ AppBuilder to bundle up jars.

00:46:36.150 --> 00:46:37.680
And that's totally straightforward too.

00:46:37.680 --> 00:46:41.340
So the bundling mechanism is
very easy and really powerful.

00:46:41.400 --> 00:46:45.510
In addition, there's a technology called
WebStart that you've seen if you went

00:46:45.590 --> 00:46:49.280
to Steve Naroff's talk on Tuesday,
you saw WebStart being demonstrated.

00:46:49.280 --> 00:46:51.940
That's a technology that we've
got running in-house that we're

00:46:51.940 --> 00:46:53.050
hoping to push out very soon.

00:46:53.060 --> 00:46:55.800
It's actually very functional
and there's just some like,

00:46:55.810 --> 00:46:58.300
licensing and legal issues
that we need to deal with to

00:46:58.300 --> 00:47:00.270
get that bundle pushed out.

00:47:00.360 --> 00:47:03.550
That's a feature of the Java 2
Standard Edition version

00:47:03.550 --> 00:47:05.500
1.4 that's coming out.

00:47:05.710 --> 00:47:08.470
We're hoping to get it out to you
earlier and that's a web-borne

00:47:08.480 --> 00:47:10.840
mechanism for distributing applications.

00:47:10.870 --> 00:47:13.670
So there's a number of ways to get
your applications out to users.

00:47:13.750 --> 00:47:19.050
So let me kick it over to Eric one last
time and he'll show you the AppBuilder.

00:47:19.090 --> 00:47:20.050
Okay.

00:47:20.130 --> 00:47:25.320
So what we have here is MRJ AppBuilder
which is the simplest tool that you

00:47:25.320 --> 00:47:29.490
can use to build a double-clickable
application on Mac OS X.

00:47:29.560 --> 00:47:31.100
It comes up just like this.

00:47:31.100 --> 00:47:35.140
And the most straightforward thing to do,
assuming that you have a jar

00:47:35.140 --> 00:47:39.900
with a correct manifest set up,
as we do, is to just click on choose,

00:47:39.960 --> 00:47:41.780
navigate through the file system.

00:47:41.830 --> 00:47:47.140
I should mention, by the way, that,
so when I showed you the

00:47:47.140 --> 00:47:51.010
directory tree browser just now,
none of things like

00:47:51.010 --> 00:47:54.960
user and var and temp,
et cetera, didn't actually show up.

00:47:55.060 --> 00:47:56.660
And yet they do in the J file chooser.

00:47:56.660 --> 00:47:59.820
That's because the Mac file
API is relatively new and we

00:47:59.820 --> 00:48:01.090
do hope to actually . Okay.

00:48:01.160 --> 00:48:03.950
So we're going to navigate through
the J file chooser and the AWT file

00:48:03.950 --> 00:48:08.400
dialogue to when you say that
your application is willing to,

00:48:08.430 --> 00:48:11.290
or intends to,
take advantage of the Mac file

00:48:11.290 --> 00:48:17.510
API to display a layout of the file
system that your users will expect.

00:48:17.580 --> 00:48:21.800
So here to navigate through.

00:48:22.740 --> 00:48:27.310
and actually select the jar
that we built in JBuilder.

00:48:27.310 --> 00:48:28.970
And ask me to choose a main class.

00:48:28.970 --> 00:48:30.880
Of course, that's George Free Browser.

00:48:31.260 --> 00:48:33.440
So the main class name
automatically gets inserted here.

00:48:33.440 --> 00:48:39.400
The class path gets set up correctly.

00:48:39.400 --> 00:48:39.400
And over in the Merge Files tab here,

00:48:39.670 --> 00:48:43.520
The jar that I've selected will
automatically be merged into the

00:48:43.520 --> 00:48:46.260
double-clickable application,
so you can distribute something that

00:48:46.260 --> 00:48:49.700
to your users looks just like one file.

00:48:49.700 --> 00:48:51.240
Although, of course,
it's a packaged application,

00:48:51.240 --> 00:48:53.100
so it's a directory, etc.

00:48:53.100 --> 00:48:57.430
But they don't need to
worry about that too much.

00:48:57.510 --> 00:49:01.800
And then we have to set
where we want to save that,

00:49:01.800 --> 00:49:06.000
so we'll save it right
next to where that jar is,

00:49:06.000 --> 00:49:06.220
and navigate back through to there.

00:49:16.000 --> 00:49:19.350
"So, I'm going to select that,
and then hit build,

00:49:19.350 --> 00:49:22.920
and actually I guess I had one already.

00:49:22.920 --> 00:49:23.360
Okay.

00:49:23.360 --> 00:49:26.100
Tells me that it did actually
finish building it and it actually

00:49:26.100 --> 00:49:27.680
managed to build it successfully.

00:49:27.700 --> 00:49:27.990
Yay!

00:49:28.050 --> 00:49:34.170
So, then we can hide that
and navigate through.

00:49:37.040 --> 00:49:40.000
Here's the Dirt Tree Browser application.

00:49:40.000 --> 00:49:41.000
Just double click on it.

00:49:41.000 --> 00:49:43.410
Looks like a standard application.

00:49:43.410 --> 00:49:45.260
And there we go.

00:49:45.520 --> 00:49:50.110
We have a Mac OS X application.

00:49:50.770 --> 00:49:52.590
So if you take advantage
of these technologies,

00:49:52.590 --> 00:49:54.970
if you use the screen menu bar,
use the Aqua look and feel,

00:49:55.100 --> 00:49:58.190
build a double clickable application,
ideally take advantage of the extra

00:49:58.280 --> 00:50:03.450
functionality that we're providing
you to integrate your application

00:50:03.450 --> 00:50:09.520
better with the rest of the system,
then as far as your users can tell,

00:50:09.530 --> 00:50:11.730
this is not a Java app.

00:50:11.730 --> 00:50:14.120
This is a Mac OS X application.

00:50:14.120 --> 00:50:14.120
And that'll make them all a lot happier.

00:50:14.120 --> 00:50:14.120
Great.

00:50:14.120 --> 00:50:14.120
Thank you.

00:50:15.600 --> 00:50:17.850
We can get the slides back
up here one last time.

00:50:18.130 --> 00:50:20.430
What I want to do now is
point you at some resources.

00:50:20.500 --> 00:50:22.600
First of all, the Mac OS X HI guidelines.

00:50:22.600 --> 00:50:26.650
You can either write that down or you
can just go to the Mac OS X developer

00:50:26.650 --> 00:50:30.110
page under documentation,
under the general documentation.

00:50:30.350 --> 00:50:32.600
There's a new version of
the Aqua HI guidelines.

00:50:32.600 --> 00:50:36.190
I definitely recommend you pick up that
and just leaf through it and see how that

00:50:36.190 --> 00:50:38.460
compares to your current application.

00:50:38.460 --> 00:50:41.480
There's also a Mac OS X Java website
that will have all of the

00:50:41.510 --> 00:50:44.850
stuff that we've got -- oh,
actually that's -- is that right?

00:50:44.900 --> 00:50:45.860
Yeah.

00:50:46.260 --> 00:50:46.860
Okay.

00:50:46.860 --> 00:50:47.840
Oh, okay.

00:50:47.950 --> 00:50:48.860
He flinched up front.

00:50:48.860 --> 00:50:54.030
So the Mac OS X Java website has
a bunch of documentation on the

00:50:54.040 --> 00:50:55.360
different technologies we've got.

00:50:55.360 --> 00:50:59.090
It's where the latest release notes go,
pointers to the latest builds,

00:50:59.090 --> 00:50:59.840
and sample code.

00:50:59.860 --> 00:51:04.550
And the sample code -- the sample code
that we've been demonstrating in this

00:51:04.550 --> 00:51:07.360
session will be posted on that website.

00:51:07.360 --> 00:51:08.230
So you can go there.

00:51:08.360 --> 00:51:11.850
If you're in a super hurry to get it,
it's actually on my iDisk.

00:51:11.860 --> 00:51:14.120
If you go to PAS, it's on my iDisk.

00:51:14.120 --> 00:51:15.620
And we're just going to push it up there.

00:51:15.620 --> 00:51:17.050
So I just -- it didn't make the cut.

00:51:17.160 --> 00:51:18.120
I pushed it up last night.

00:51:18.120 --> 00:51:21.090
So if you want to pull it from there,
you can go ahead and pull it.

00:51:21.120 --> 00:51:23.510
Otherwise,
the sample code will go up on the website

00:51:23.610 --> 00:51:26.970
so you can look at what we've done and
the changes that we've made in detail.

00:51:27.120 --> 00:51:30.210
And the Java update -- I'm actually
probably going to get in trouble here,

00:51:30.250 --> 00:51:31.110
but it's ready.

00:51:31.120 --> 00:51:34.620
It's not -- it's -- it
will be posted tomorrow.

00:51:34.620 --> 00:51:38.200
We pushed it up to the -- we finished it,
packaged it up yesterday

00:51:38.210 --> 00:51:39.940
and gave it to Alan,
and it will be up on

00:51:39.940 --> 00:51:41.110
the website tomorrow.

00:51:41.120 --> 00:51:42.520
So this has all of the stuff
that you've been hearing and

00:51:42.520 --> 00:51:43.380
all of the different jobs.

00:51:43.380 --> 00:51:45.380
during all the different Java sessions.

00:51:48.100 --> 00:51:50.100
And I got to announce
when it was ready first.

00:51:53.700 --> 00:51:58.350
and Paul So, anyway,
from here on out there's actually

00:51:59.030 --> 00:52:00.280
still more Java sessions.

00:52:00.280 --> 00:52:03.890
I find it amazing we've gone from
like two or three Java sessions

00:52:03.890 --> 00:52:05.460
to ten just on our stuff.

00:52:05.460 --> 00:52:07.360
Right after,
actually at two o'clock over in

00:52:07.470 --> 00:52:09.840
Civic there's more information
on QuickTime for Java.

00:52:09.840 --> 00:52:13.400
The Java graphics stuff will
actually be really interesting

00:52:13.500 --> 00:52:15.180
if you go this afternoon.

00:52:15.310 --> 00:52:17.360
We're going to be talking about
some of the stuff that we've been

00:52:17.370 --> 00:52:20.490
doing with hardware acceleration,
some of the things that you can

00:52:20.510 --> 00:52:24.390
do in your code to take advantage
of this and modify your code

00:52:24.390 --> 00:52:28.940
slightly to take advantage of some
of the new features we've done.

00:52:29.240 --> 00:52:32.380
Java security tomorrow morning
at nine o'clock in the morning.

00:52:32.380 --> 00:52:35.700
Scott down here will talk about
some of the security related issues.

00:52:35.700 --> 00:52:37.420
And please, please,
please come to the feedback

00:52:37.420 --> 00:52:40.870
forum tomorrow morning and
let us know how we're doing,

00:52:40.870 --> 00:52:43.660
if you've got any questions,
that kind of thing.

00:52:43.840 --> 00:52:46.130
So, who to contact?

00:52:46.440 --> 00:52:48.480
Alan.

00:52:48.700 --> 00:52:50.460
Alan knows where to find me.

00:52:50.460 --> 00:52:54.000
Alan is the best person to talk
to you if you've got any issues,

00:52:54.000 --> 00:52:57.860
if you want to get your code to
us to add it to our test suite,

00:52:57.860 --> 00:52:59.120
that kind of thing.

00:52:59.120 --> 00:53:00.600
Alan's the best person to talk to.

00:53:00.600 --> 00:53:02.120
You can come directly to
me and you're welcome to,

00:53:02.120 --> 00:53:04.100
but I tend to go dark
during development time.