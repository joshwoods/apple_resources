WEBVTT

00:00:04.130 --> 00:00:06.000
Good morning.

00:00:06.010 --> 00:00:10.270
I hope it's not too early for all the
Java developers in the audience today.

00:00:10.680 --> 00:00:11.830
Looks like we've got a good group.

00:00:11.870 --> 00:00:18.470
I just want to kick off this morning's
session with a little bit of information

00:00:18.470 --> 00:00:19.750
for you on the rest of the week.

00:00:19.790 --> 00:00:22.600
This is obviously our first session,
our overview session.

00:00:22.600 --> 00:00:27.630
We've got a total of 10 sessions in one
feedback form just in the Java track.

00:00:27.700 --> 00:00:31.860
That's the most content that we've
ever had for you guys in Java.

00:00:31.860 --> 00:00:34.590
We've got a lot of exciting
stuff to share with you.

00:00:34.600 --> 00:00:37.570
I don't want to steal any of
the thunder that we have in this

00:00:37.580 --> 00:00:40.010
presentation and some of the other ones.

00:00:40.020 --> 00:00:42.760
If you add that together
with the WebObject sessions,

00:00:42.800 --> 00:00:45.320
I believe there's a total of 17 of those.

00:00:45.320 --> 00:00:48.520
There's a whole lot of
Java-related content at this show.

00:00:51.590 --> 00:00:55.130
With that in mind,
I want to go ahead and make my

00:00:55.130 --> 00:00:59.430
introduction brief this morning
and bring up Steve Naroff.

00:01:00.550 --> 00:01:06.990
and the senior director and
dynamic object dweeb for Apple,

00:01:06.990 --> 00:01:15.630
and have him come up and tell you about
all this great stuff we've been doing.

00:01:15.630 --> 00:01:15.630
Thank you, Steve.

00:01:15.630 --> 00:01:15.630
Hi there.

00:01:18.260 --> 00:01:23.340
I've never put such a
silly thing in my title,

00:01:23.800 --> 00:01:27.290
but last year when I say I'm
director and I get off the stage and

00:01:27.290 --> 00:01:32.800
I want to interact with you guys,
a lot of times people are taken aback.

00:01:32.900 --> 00:01:34.100
He's a director.

00:01:34.100 --> 00:01:38.190
There's this line between me and you,
so I figured it was really

00:01:38.190 --> 00:01:43.260
important to let you guys know that
I still actually enjoy programming

00:01:43.260 --> 00:01:49.000
and enjoy basically being very
active in the software community,

00:01:49.000 --> 00:01:52.490
not just a people pusher, so to speak.

00:01:52.500 --> 00:01:58.690
One of the things I wanted to open
with is I'm feeling great today.

00:01:58.690 --> 00:02:02.140
Are you guys feeling great today?

00:02:03.710 --> 00:02:05.930
Last night I felt really bad.

00:02:05.940 --> 00:02:07.880
I was here until 10
o'clock getting ready,

00:02:07.880 --> 00:02:11.490
and I was feeling very old.

00:02:11.540 --> 00:02:14.640
And it was because it was
the first day of the show,

00:02:14.640 --> 00:02:18.750
we're getting all this stuff together,
getting the demos ready for you guys,

00:02:18.750 --> 00:02:20.500
putting the finishing
touches on the presentation.

00:02:20.500 --> 00:02:24.000
And also Steve in his keynote
reminded me of my age,

00:02:24.000 --> 00:02:29.450
unfortunately, when he said he had been
working with Avi for 15 years.

00:02:30.140 --> 00:02:33.480
I actually started at
Next two months after Avi,

00:02:33.480 --> 00:02:38.490
and then realized I had been working
with him for 15 years as well.

00:02:38.500 --> 00:02:45.230
And I did some simple math, and I'm like,
holy cow, I've been doing this for

00:02:45.230 --> 00:02:47.890
35% of my life on Earth.

00:02:48.000 --> 00:02:52.210
I've spent with Steve and
Avi doing this stuff.

00:02:52.300 --> 00:02:58.780
And as most of you know,
Steve's a pretty intense guy.

00:02:58.780 --> 00:03:00.100
And one year with Steve.

00:03:00.180 --> 00:03:03.800
And one year with Steve is not
really equivalent to one normal year,

00:03:03.800 --> 00:03:04.260
right?

00:03:04.380 --> 00:03:07.240
So it's not quite a
one to seven with dogs,

00:03:07.240 --> 00:03:07.980
right?

00:03:07.980 --> 00:03:10.380
But it's probably a one to three.

00:03:10.380 --> 00:03:14.530
So I really hope my life isn't
going to end any time real soon,

00:03:14.570 --> 00:03:17.380
because the math just doesn't add up.

00:03:17.380 --> 00:03:24.170
But anyway, speaking of age,
Java is six years young.

00:03:24.640 --> 00:03:29.570
And I think it's sobering to
realize it's just a child,

00:03:29.570 --> 00:03:30.420
okay?

00:03:30.420 --> 00:03:32.350
It's just a child.

00:03:32.350 --> 00:03:36.590
And from its inception in 95,
where it hit the streets

00:03:36.590 --> 00:03:40.590
about spring of 95,
to today, a tremendous amount of

00:03:40.590 --> 00:03:42.370
change has occurred.

00:03:42.380 --> 00:03:47.560
Okay, not only at Apple,
but in the Java community.

00:03:47.560 --> 00:03:52.310
And so I'm going to spend the first half
of this talk giving the 10,000 foot view

00:03:52.420 --> 00:03:54.270
of what's going on in the Java community.

00:03:54.320 --> 00:04:00.270
I'm also going to talk about what's
changed in the Apple community.

00:04:00.920 --> 00:04:04.340
I'm going to talk about
what our goals are.

00:04:04.680 --> 00:04:06.630
Fortunately,
they haven't changed a hell of a lot in

00:04:06.700 --> 00:04:12.140
the three and a half years I've been on
this stage representing the Java team.

00:04:12.140 --> 00:04:13.680
What's our strategy?

00:04:13.680 --> 00:04:16.410
Our strategy has changed a
little bit over the years,

00:04:16.410 --> 00:04:18.260
but ever so slightly.

00:04:18.320 --> 00:04:21.960
I go back and review the presentations
of prior years before putting a

00:04:21.960 --> 00:04:25.730
presentation like this together,
and I was fairly happy

00:04:25.730 --> 00:04:27.500
with the consistency.

00:04:27.500 --> 00:04:31.270
I think that should also be good
for you guys because you don't

00:04:31.270 --> 00:04:33.780
want to see us jerking you around,
so to speak.

00:04:33.780 --> 00:04:35.290
That's not what we're here to do.

00:04:37.230 --> 00:04:43.520
So from an Apple perspective,
and actually a Sun perspective,

00:04:43.550 --> 00:04:44.750
we don't have any more excuses.

00:04:44.770 --> 00:04:47.590
I think Java's in a pretty
interesting place right now,

00:04:47.590 --> 00:04:51.390
not to say that we've solved all the
problems or it's in an ideal location,

00:04:51.390 --> 00:04:54.810
but there's really nothing to
be embarrassed about anymore.

00:04:54.820 --> 00:04:59.280
So for instance, when Java started in
the browser for applets,

00:04:59.280 --> 00:05:03.690
it really wasn't an appropriate
API for developing industrial

00:05:03.690 --> 00:05:05.780
strength applications.

00:05:05.780 --> 00:05:11.480
At that time, it was called the Java 1.1,
and it had AWT,

00:05:11.980 --> 00:05:17.320
which was insufficient for
developing great applications.

00:05:17.320 --> 00:05:18.940
And Sun has fixed that.

00:05:18.940 --> 00:05:22.150
Sun has Java 2, Sun has Swing,
Sun has JFC.

00:05:22.180 --> 00:05:24.730
There are quite a few
interesting APIs on the platform.

00:05:24.840 --> 00:05:27.280
There are quite a few interesting
APIs on the platform that do enable

00:05:27.280 --> 00:05:28.540
you to do non-trivial things.

00:05:28.600 --> 00:05:35.570
And other things that I guess have
changed is the development tools in

00:05:35.570 --> 00:05:38.800
this space have gotten fairly robust.

00:05:38.860 --> 00:05:42.280
And we're going to talk
about tools as well later on.

00:05:42.890 --> 00:05:45.850
Let's see, what else do I want to
say about what's changed?

00:05:45.920 --> 00:05:49.190
Well, we'll talk about it later
on over the course of time.

00:05:49.430 --> 00:05:50.030
What's our goal?

00:05:50.030 --> 00:05:54.280
Our goal is to be the number one
desktop for deploying Java applications.

00:05:54.280 --> 00:05:59.590
Now, we've been working hard on this,
and we're going to tell you where we are

00:05:59.680 --> 00:06:01.860
today and where we expect to be tomorrow.

00:06:01.860 --> 00:06:03.420
That's part of what the talk is about.

00:06:03.420 --> 00:06:07.870
And we want to be the number one desktop
for developing Java applications.

00:06:08.020 --> 00:06:10.710
We have the coolest
hardware on the planet.

00:06:10.710 --> 00:06:14.110
I see so many people with
Titaniums and running 10.

00:06:14.110 --> 00:06:18.000
And we need to enable Java developers
to buy this great hardware and

00:06:18.080 --> 00:06:20.890
software and do their Java development.

00:06:23.410 --> 00:06:24.850
So why are we doing this?

00:06:25.110 --> 00:06:30.400
Java is the fastest growing
language on the planet right now.

00:06:30.400 --> 00:06:34.390
Just so you don't get mad at me,
this is not my data, it's Gartner,

00:06:34.480 --> 00:06:37.900
that's why Objective-C isn't
on the chart for you

00:06:37.900 --> 00:06:40.400
Objective-C people in the audience.

00:06:40.400 --> 00:06:46.770
And also C# is at the bottom
there with a question mark.

00:06:46.770 --> 00:06:52.990
C# is a language which is Java-like,
and Microsoft is currently promoting

00:06:52.990 --> 00:06:57.390
it as the next generation language
for programming their platform.

00:06:57.400 --> 00:07:00.460
Right now it's not really
on the radar screen,

00:07:00.460 --> 00:07:03.320
so to speak,
because there are very few people

00:07:03.420 --> 00:07:06.400
presently programming in it,
hence it doesn't have a line right here.

00:07:06.400 --> 00:07:09.400
So it's unclear whether
it's going to overtake Java,

00:07:09.400 --> 00:07:12.400
but certainly at this point in
time there's no evidence of that,

00:07:12.400 --> 00:07:17.090
certainly from a
cross-platform perspective.

00:07:19.150 --> 00:07:27.350
So, last year at Java 1, Sun, I guess,
had said that there were more

00:07:27.350 --> 00:07:30.020
than 2 million Java programmers.

00:07:30.020 --> 00:07:33.660
And that was really exciting,
given Java 1 had about 25,000

00:07:33.660 --> 00:07:35.460
developers at the conference.

00:07:35.460 --> 00:07:39.750
And hearing there were 2 million people
programming in Java was actually very

00:07:39.780 --> 00:07:43.100
exciting and a good marketing slogan.

00:07:43.660 --> 00:07:48.800
However, if you look closely,
a lot of these people are not qualified

00:07:48.800 --> 00:07:52.240
to do the type of development that's,
I think,

00:07:52.320 --> 00:07:54.100
being done by people in this room.

00:07:54.100 --> 00:07:56.680
So, there are a lot of hobbyists.

00:07:56.680 --> 00:08:00.050
In fact, most of the community
are hobbyists right now.

00:08:00.060 --> 00:08:03.020
You know, this isn't a surprise, right?

00:08:03.020 --> 00:08:05.360
If any of you have been in
small companies or even big

00:08:05.360 --> 00:08:08.320
companies that are growing,
when you grow from what Java,

00:08:08.450 --> 00:08:11.450
when you experience this
type of phenomenal growth,

00:08:12.070 --> 00:08:15.190
it's pretty clear that all
2 million developers are not

00:08:15.220 --> 00:08:17.490
going to be wildly qualified,
right?

00:08:17.540 --> 00:08:22.300
So, this is just natural growing
pains of any successful platform.

00:08:22.460 --> 00:08:25.040
So, this isn't meant to
disparage the community,

00:08:25.040 --> 00:08:28.240
but to just educate you guys
that basically not all the

00:08:28.240 --> 00:08:29.800
developers are created equal.

00:08:33.100 --> 00:08:36.780
So, it's becoming mainstream.

00:08:36.780 --> 00:08:38.000
This isn't any surprise.

00:08:38.000 --> 00:08:41.560
There are slices of this pie,
which we're very interested in.

00:08:41.560 --> 00:08:45.920
Certainly education, 19%. As you know,
Apple's very big in education.

00:08:45.920 --> 00:08:48.500
Finance, personal finance in particular.

00:08:48.500 --> 00:08:53.950
Last year, Schwab released an application
that was heavily advertised

00:08:53.950 --> 00:08:56.680
on television called Velocity.

00:08:56.680 --> 00:09:00.230
That application runs very
well on our platform and,

00:09:00.360 --> 00:09:02.570
in fact, was developed on it.

00:09:03.100 --> 00:09:08.850
And now there's all kinds of financial
applications that are following suit.

00:09:08.890 --> 00:09:11.090
And later on,
we'll bring up someone from a company

00:09:11.370 --> 00:09:15.370
that does a product called MoneyDance,
which is a very interesting financial

00:09:15.370 --> 00:09:17.020
application written in Java.

00:09:17.020 --> 00:09:18.820
So, it's becoming mainstream.

00:09:18.820 --> 00:09:21.640
And what's cool is,
it's mainstream and it's good.

00:09:21.730 --> 00:09:24.580
It's good technology,
especially the language.

00:09:24.580 --> 00:09:28.820
The language is excellent and the
APIs are evolving to become excellent.

00:09:32.330 --> 00:09:35.030
I'm very much into music,
and most of the popular

00:09:35.030 --> 00:09:36.920
music of today really stinks.

00:09:36.920 --> 00:09:43.520
I sort of expect that in our industry
because it's becoming a fashion industry,

00:09:43.520 --> 00:09:44.930
whether you recognize it or not.

00:09:45.060 --> 00:09:50.200
So it's sort of cool that Java is
technically sound and mainstream,

00:09:50.200 --> 00:09:53.160
and both of those are very important.

00:09:53.220 --> 00:09:57.580
So Java technology usage, there's...

00:09:58.970 --> 00:10:01.260
A lot of energy going into the server.

00:10:01.490 --> 00:10:07.060
As you can see,
that red point on the graph is for

00:10:07.150 --> 00:10:08.960
servlets and Java server pages.

00:10:08.960 --> 00:10:12.200
So right now,
the biggest application or the

00:10:12.200 --> 00:10:16.560
largest amount of Java code is
being written on the server to do

00:10:16.560 --> 00:10:19.200
Java server pages and servlets.

00:10:19.320 --> 00:10:25.710
The second most common is still applets,
good old applets.

00:10:26.730 --> 00:10:30.600
The difference between applets and
Java server pages is Java server pages,

00:10:30.600 --> 00:10:34.660
says Gartner, is going to go up at a
faster rate than applets.

00:10:34.660 --> 00:10:38.900
Applets tend to be pretty stagnant
if you look into the future.

00:10:40.260 --> 00:10:42.550
The other point in the
graph is applications,

00:10:42.550 --> 00:10:43.420
the blue line.

00:10:43.420 --> 00:10:49.230
The blue line is steadily going up,
and we anticipate that to even go higher.

00:10:49.230 --> 00:10:55.260
Mainly because all of these server
applications need to have a face,

00:10:55.260 --> 00:10:58.380
and HTML and applets aren't going
to cut it for a lot of them,

00:10:58.380 --> 00:11:01.650
so there are going to be lots of
applications which need to either

00:11:02.040 --> 00:11:06.100
supplement the web-based interface
or replace the web-based interface.

00:11:07.400 --> 00:11:11.760
The most growth that's expected,
even though it's a small

00:11:11.760 --> 00:11:16.080
amount of energy right now,
is the enterprise Java beans.

00:11:16.240 --> 00:11:20.460
Right now, enterprise Java beans is
the least popular in 2001,

00:11:20.460 --> 00:11:24.540
but that's expected to grow
significantly as the data indicates.

00:11:27.700 --> 00:11:34.960
So here's a diagram which I hope
will explain our strategy.

00:11:35.270 --> 00:11:37.100
Excuse me for a minute.

00:11:41.060 --> 00:11:43.310
We love the Java language, as I said.

00:11:43.400 --> 00:11:45.600
There's three virtual
machines underneath.

00:11:45.650 --> 00:11:49.900
The one that we're focusing on is
the HotSpot Java virtual machine.

00:11:49.970 --> 00:11:52.210
There's a KVM and a CardVM.

00:11:52.500 --> 00:11:57.320
So, on one end of the spectrum,
people are doing lots and lots

00:11:57.410 --> 00:12:01.860
of work in the enterprise,
again, on the server.

00:12:02.080 --> 00:12:06.640
As you know, most of you know,
WebObjects has been completely

00:12:06.900 --> 00:12:10.600
retooled to be in Java,
and it's certainly one example of this.

00:12:10.600 --> 00:12:13.560
Over time,
I expect the WebObjects team to

00:12:13.560 --> 00:12:18.060
roll out their J2EE or Java 2
Enterprise Edition strategy.

00:12:18.200 --> 00:12:21.480
Right now,
the reimplementation of WebObjects

00:12:21.480 --> 00:12:23.830
in Java is a necessary first step.

00:12:24.400 --> 00:12:28.320
However, to play on the server in the
application server space with Java,

00:12:28.320 --> 00:12:32.280
you have to start adopting some
of the idioms and methodologies

00:12:32.280 --> 00:12:36.070
that J2EE is implementing.

00:12:36.080 --> 00:12:40.630
Mainly because BEA and Oracle and IBM,
all these companies,

00:12:40.700 --> 00:12:46.320
their application servers are starting
to talk enterprise Java beans.

00:12:46.320 --> 00:12:48.120
They're starting to
talk Java server pages.

00:12:48.120 --> 00:12:51.290
And unless we talk that language,
we're not going to interoperate

00:12:51.290 --> 00:12:54.240
with all that other work that's
going on in the community.

00:12:54.420 --> 00:12:56.560
And hence,
we're not going to take advantage

00:12:56.820 --> 00:12:58.230
of the full power of Java.

00:12:58.240 --> 00:13:03.140
So, on the other end of the
spectrum is JavaCard and also

00:13:03.170 --> 00:13:08.460
Java Ring and Java Lightbulb and,
you know, all that kind of stuff.

00:13:08.520 --> 00:13:10.110
We're not interested in that.

00:13:10.200 --> 00:13:12.480
There's companies investing
lots of time and energy in it,

00:13:12.480 --> 00:13:13.310
and that's great.

00:13:13.530 --> 00:13:17.130
And on that side of the space,
there's really no APIs per se

00:13:17.130 --> 00:13:19.490
that sit atop the Java language.

00:13:19.520 --> 00:13:22.760
On the other hand,
for these other class of devices,

00:13:22.760 --> 00:13:25.550
cell phones, faxes, POMs,
all that good stuff,

00:13:25.620 --> 00:13:26.880
there's the micro edition.

00:13:26.880 --> 00:13:32.880
There is an API suite that, again,
is cross-platform as you define the

00:13:32.880 --> 00:13:36.280
washing machine and the fax machine.

00:13:36.280 --> 00:13:39.640
There's some lowest common
denominator API that they're

00:13:39.640 --> 00:13:42.020
developing called the micro edition.

00:13:42.040 --> 00:13:43.500
Okay?

00:13:45.110 --> 00:13:47.030
This is what we're focusing on.

00:13:47.050 --> 00:13:49.030
We're focusing on the Standard Edition.

00:13:49.030 --> 00:13:54.260
The Standard Edition could be
considered the desktop edition.

00:13:54.260 --> 00:13:57.770
The other way of thinking about it,
it's the core of Java.

00:13:57.800 --> 00:14:00.020
Again, it's the core of Java.

00:14:00.130 --> 00:14:06.190
For instance, the Enterprise Edition is a
superset of the Standard Edition.

00:14:06.190 --> 00:14:09.600
So it includes all the
Standard Edition technology.

00:14:10.260 --> 00:14:14.230
So one of the reasons we're focusing
on it is the better we make our core,

00:14:14.230 --> 00:14:16.920
the better we make
Java 2 Standard Edition,

00:14:16.920 --> 00:14:20.220
the better products like J2EE will run.

00:14:20.280 --> 00:14:24.530
For example,
there are companies like Bluestone,

00:14:24.530 --> 00:14:28.080
who I think is now owned by HP,
that have a pure

00:14:28.320 --> 00:14:30.940
Java J2EE implementation.

00:14:30.940 --> 00:14:34.400
I don't know if they formally
support it on Mac 10 yet,

00:14:34.400 --> 00:14:37.880
but I ran into a couple of the
guys at one of the meetings,

00:14:37.880 --> 00:14:40.700
and they said, "Yeah,
we brought it over to Mac 10

00:14:40.700 --> 00:14:44.620
and it just ran." And so that
type of stuff blows me away.

00:14:44.620 --> 00:14:48.040
It's like, "Wow, we have a full Java 2
Enterprise Edition stack,

00:14:48.040 --> 00:14:50.440
and it just worked on Mac 10." Yeah.

00:14:50.440 --> 00:14:54.640
And that type of stuff, again,
explains the value of what

00:14:54.640 --> 00:14:56.400
we're trying to do here.

00:14:56.540 --> 00:15:03.390
So Java 2 Standard Edition,
the Sun packages.

00:15:04.890 --> 00:15:07.700
Just to be technically accurate,
this includes a little more

00:15:07.700 --> 00:15:09.430
detail than the previous slide.

00:15:09.430 --> 00:15:13.950
There are three packages which are really
built into the language definition.

00:15:13.960 --> 00:15:17.580
They're the utilities or
the collection classes,

00:15:17.700 --> 00:15:21.200
I.O., and LANG,
which includes things like

00:15:21.290 --> 00:15:23.720
language reflection and so on.

00:15:24.240 --> 00:15:27.550
Right above,
we have packages like security,

00:15:27.570 --> 00:15:32.420
remote method invocation, mathematics,
networking.

00:15:32.900 --> 00:15:34.940
Okay, and I'm not going to go
through all the packages.

00:15:34.940 --> 00:15:38.330
I'm trying to highlight
the most important ones.

00:15:40.700 --> 00:15:45.410
Above that, you start to have user
interface technologies.

00:15:45.420 --> 00:15:49.680
Swing, AWT, Geom,
which is just a poor name for Java 2D,

00:15:49.850 --> 00:15:51.540
and Applets and Sound.

00:15:51.560 --> 00:15:56.160
So, without getting into any more detail
about what packages there are,

00:15:56.160 --> 00:16:01.500
this is the pure Java 2 stack,
so to speak, that people are writing to.

00:16:01.500 --> 00:16:05.250
And we want to support applications that
are being written on other platforms

00:16:05.260 --> 00:16:07.420
so that they just work on our platform.

00:16:09.450 --> 00:16:11.500
But that's not enough for us, okay?

00:16:11.500 --> 00:16:13.840
We want to go beyond Java 2 SE.

00:16:13.840 --> 00:16:18.470
We don't want to go beyond it because
we don't think Sun is doing their job

00:16:18.480 --> 00:16:21.840
or that we think Java 2 SE is not good.

00:16:21.840 --> 00:16:27.040
We're going beyond it because Apple has
some core competencies and some great

00:16:27.040 --> 00:16:31.840
technology that we think need to
be available to Java programmers.

00:16:32.500 --> 00:16:35.230
So, again, it's not a competitive thing.

00:16:35.230 --> 00:16:38.980
It's not like by virtue of doing
some of this work that we are not

00:16:38.980 --> 00:16:41.440
subscribed to the pure Java platform.

00:16:41.540 --> 00:16:42.220
We are.

00:16:42.220 --> 00:16:45.610
In fact,
all these technologies layer on with

00:16:46.210 --> 00:16:48.440
standard Sun extensions like JNI.

00:16:48.440 --> 00:16:51.180
So, right there we have Cocoa.

00:16:51.180 --> 00:16:56.580
For Cocoa to interoperate with pure Java,
we have something we call

00:16:56.580 --> 00:16:59.160
the Objective-C Java Bridge.

00:16:59.160 --> 00:17:02.440
And that, again, uses JNI,
which is the lowest level software.

00:17:02.500 --> 00:17:06.990
standard interface for
native method invocation.

00:17:08.480 --> 00:17:14.780
So, in addition,
Cocoa implements a lot of the same

00:17:14.780 --> 00:17:17.330
stuff at a GUI layer as Swing.

00:17:17.360 --> 00:17:21.510
So sometimes people get confused.

00:17:21.870 --> 00:17:24.540
Later on, I'm going to try and remove
some of that confusion.

00:17:24.540 --> 00:17:26.980
I don't want to go through it right now.

00:17:27.220 --> 00:17:27.750
Here's QuickTime.

00:17:27.760 --> 00:17:32.900
So QuickTime is also layered on
some subset of the Java 2 SE stack.

00:17:33.450 --> 00:17:36.900
And we have WebObjects,
which is layered atop the entire stack.

00:17:37.270 --> 00:17:40.870
That is,
you don't need any native code to run it.

00:17:41.240 --> 00:17:43.890
Whereas Cocoa and QuickTime both
contain native code.

00:17:44.260 --> 00:17:50.130
Cocoa in the form of
Objective C and C code.

00:17:50.130 --> 00:17:50.130
QuickTime mostly in C code.

00:17:51.910 --> 00:17:54.800
So we also,
aside from offering the WebObjects,

00:17:54.870 --> 00:17:59.320
Cocoa, QuickTime Advantage,
we want to take Swing and make

00:17:59.320 --> 00:18:05.070
it integrate with our platform
in some fairly obvious ways.

00:18:05.110 --> 00:18:07.330
One,
it needs to have the Aqua look and feel.

00:18:07.340 --> 00:18:08.460
So we've done that.

00:18:08.460 --> 00:18:09.640
Swing looks great.

00:18:09.660 --> 00:18:13.690
And we think it looks better than any
other platform you can run Java on.

00:18:13.700 --> 00:18:17.860
And I'll have some people up later
on to demonstrate some of that.

00:18:18.580 --> 00:18:20.950
And the menu placement is
what Mac people expect.

00:18:21.050 --> 00:18:25.460
It's at the top of the screen,
not associated with the window.

00:18:25.460 --> 00:18:28.980
Quartz 2D integration,
basically we get all the PDF support

00:18:29.050 --> 00:18:35.160
that Steve was talking about and very
fancy graphics by virtue of having

00:18:35.160 --> 00:18:37.820
this stuff layered on top of Quartz.

00:18:37.900 --> 00:18:41.130
And we also have out-of-the-box support.

00:18:41.140 --> 00:18:47.560
Now, here's a quote from
Tony De La Lama at Worland.

00:18:51.630 --> 00:18:59.300
Let me take a minute and really
emphasize the importance of this.

00:18:59.310 --> 00:19:02.600
The Java 2 platform is,
at the end of the day,

00:19:02.600 --> 00:19:03.630
an operating system.

00:19:03.630 --> 00:19:08.000
And when you think of it in those terms,
the JRE,

00:19:08.000 --> 00:19:12.040
which is just the runtime environment,
is about roughly 10 megabytes.

00:19:12.100 --> 00:19:15.910
I think it's actually 8 and change,
but let's just say 10.

00:19:16.940 --> 00:19:21.500
The problem with not bundling it
as part of the operating system is,

00:19:21.500 --> 00:19:24.210
number one,
you have to have a fairly fast

00:19:24.210 --> 00:19:26.450
connection to download this stuff.

00:19:26.460 --> 00:19:31.730
Now,
that's only a small part of the problem.

00:19:31.730 --> 00:19:35.490
The much bigger part of the
problem is if it's not bundled,

00:19:35.490 --> 00:19:39.030
each application will bundle
its own because it doesn't

00:19:39.100 --> 00:19:43.130
trust any other application to
install the right one for it.

00:19:43.330 --> 00:19:43.520
Okay?

00:19:43.520 --> 00:19:46.700
So, for instance,
you'll have... In the worst case,

00:19:46.700 --> 00:19:50.230
you might... You might have five
Java applications on a Wintel system

00:19:50.360 --> 00:19:54.420
that actually each application not
only has its own copy of some unique

00:19:54.420 --> 00:19:58.330
version of the virtual machine,
but when it's running,

00:19:58.330 --> 00:20:02.590
it has to instantiate that copy,
and each application will

00:20:02.590 --> 00:20:04.760
instantiate its own copy.

00:20:04.760 --> 00:20:05.240
Okay?

00:20:05.240 --> 00:20:07.960
So the analogy is,
imagine if all the Carbon apps

00:20:08.020 --> 00:20:11.950
that are being developed carried
around its own version of Carbon.

00:20:12.020 --> 00:20:14.160
And when you ran it,
it had to instantiate its

00:20:14.160 --> 00:20:15.420
own version of Carbon.

00:20:15.420 --> 00:20:16.870
That's crazy.

00:20:16.900 --> 00:20:17.620
Okay?

00:20:17.620 --> 00:20:23.530
So it's really important to know this is
an architectural flaw that we... That is

00:20:23.640 --> 00:20:27.670
basically not a flaw on our system,
but a flaw on every other system

00:20:27.670 --> 00:20:31.380
right now that's running Java,
particularly Windows.

00:20:33.800 --> 00:20:35.800
So, let's move on.

00:20:35.890 --> 00:20:39.190
I'm going to get back to
something I said before,

00:20:39.310 --> 00:20:42.420
which is, okay,
there's the Java 2 Standard Edition,

00:20:42.420 --> 00:20:50.050
and we have Cocoa, but they have Swing,
and we have QuickTime, and they have JMF,

00:20:50.140 --> 00:20:55.460
and there's some confusion about
what people should be programming to.

00:20:55.780 --> 00:20:58.630
So, one way to remove the
confusion is to say,

00:20:58.980 --> 00:21:02.140
and I can't say this because
I don't know all of you,

00:21:02.140 --> 00:21:07.780
you need to put yourself in a box, okay?

00:21:07.780 --> 00:21:07.780
And...

00:21:08.550 --> 00:21:11.510
I know it's not easy sometimes,
but you need to think,

00:21:11.600 --> 00:21:13.550
what are my goals and which box am I in?

00:21:13.590 --> 00:21:16.400
So the one box that I'm
totally uninterested in for

00:21:16.400 --> 00:21:19.880
purposes of this discussion,
unfortunately most of the software on

00:21:19.970 --> 00:21:23.840
the planet probably lives in the box,
is the single platform and simple box.

00:21:23.840 --> 00:21:25.400
So let's just get rid of that.

00:21:25.460 --> 00:21:27.130
Don't care about it.

00:21:27.220 --> 00:21:30.500
The next box is
multi-platform and simple.

00:21:30.500 --> 00:21:34.010
So on one end of that spectrum,
you have something like a dumb terminal.

00:21:34.500 --> 00:21:38.820
It has the maximum reach,
that is it runs on the most platforms,

00:21:38.820 --> 00:21:43.080
but it's arguably the
worst user experience.

00:21:45.240 --> 00:21:47.620
So HTML is in that same box, okay?

00:21:47.620 --> 00:21:50.040
It has a great reach, okay?

00:21:50.040 --> 00:21:54.590
And it's richer,
but it's still not as rich as you'd like.

00:21:55.980 --> 00:21:56.960
So let's go to the blue box.

00:21:56.960 --> 00:21:59.820
The other end of that spectrum
is a native application.

00:21:59.830 --> 00:22:05.360
And I'm doing this native app
a little bit of a disservice

00:22:05.460 --> 00:22:08.070
because it actually isn't a point.

00:22:08.460 --> 00:22:11.780
Depending on how you've
architected your application,

00:22:11.780 --> 00:22:13.020
it's a spectrum.

00:22:13.020 --> 00:22:15.040
So let me describe what I mean by that.

00:22:15.500 --> 00:22:19.320
With Java 2 SE,
you're writing cross-platform

00:22:19.440 --> 00:22:23.680
code not only for your engine,
but for your GUI.

00:22:24.380 --> 00:22:27.140
And that's a fully
cross-platform application.

00:22:27.140 --> 00:22:30.560
What a lot of people do,
especially the shrink-wrap vendors

00:22:30.560 --> 00:22:34.980
that care about quality in a big way,
what they do is they divide the

00:22:34.980 --> 00:22:39.360
back end of their application and
their front end of the application.

00:22:39.360 --> 00:22:45.730
So what they do is they port the back
end and make it as portable as possible,

00:22:45.970 --> 00:22:49.420
but plug in a native GUI, so to speak.

00:22:49.440 --> 00:22:54.180
So there are a lot of people right
now doing that on the Mac 10 platform.

00:22:54.380 --> 00:22:58.160
They'll use Cocoa as the front end,
but they'll bring over a lot of

00:22:58.160 --> 00:23:00.250
engine code from other platforms.

00:23:00.260 --> 00:23:05.880
And that will give you the best possible
native application experience on Mac 10.

00:23:06.060 --> 00:23:10.030
Again,
using technologies like Cocoa and Carbon.

00:23:10.060 --> 00:23:13.700
So another point on that graph
is the browser plug-in that

00:23:13.910 --> 00:23:15.660
usually contains some native code.

00:23:15.660 --> 00:23:18.000
And I'm not going to
talk much about that.

00:23:18.000 --> 00:23:20.120
You guys know what that is.

00:23:20.420 --> 00:23:24.300
But Java is in that green box,
which is multiplatform and rich.

00:23:24.420 --> 00:23:28.540
So the very first version of
Java had quite a bit of reach.

00:23:28.540 --> 00:23:32.520
In fact, it was almost as close as HTML.

00:23:33.600 --> 00:23:38.040
Well,
that's unfortunately changed because

00:23:38.040 --> 00:23:44.460
Microsoft and Sun decided not to
see eye to eye on life with Java.

00:23:44.460 --> 00:23:49.030
So the bottom line is
it isn't as ubiquitous.

00:23:49.040 --> 00:23:53.060
Gets back to my previous
point on bundling.

00:23:53.120 --> 00:23:57.200
So you can't depend on it in the
same way as you can depend on HTML.

00:23:57.200 --> 00:24:02.290
The other point on the
graph is the Java 2 app.

00:24:03.410 --> 00:24:05.360
This is where we see Mac OS X Java.

00:24:05.360 --> 00:24:09.370
We think that it's going to
have much further reach than

00:24:09.460 --> 00:24:10.510
the standard Java 2 app.

00:24:10.590 --> 00:24:13.890
We also think that it's a much
richer experience because of

00:24:14.000 --> 00:24:16.220
the integration we're doing,
which we're going to

00:24:16.220 --> 00:24:17.540
demonstrate in this talk.

00:24:17.700 --> 00:24:20.100
It's right below the native app.

00:24:20.210 --> 00:24:24.160
We think we're pretty close,
but it certainly is not the

00:24:24.160 --> 00:24:29.480
ideal way to get to all the
functionality of the Mac 10 platform.

00:24:29.840 --> 00:24:32.050
Can you get to 90 plus percent of it?

00:24:32.140 --> 00:24:32.410
Yes.

00:24:32.480 --> 00:24:35.060
And we hope to close that gap over time.

00:24:35.060 --> 00:24:36.430
So, let's move on.

00:24:36.440 --> 00:24:39.630
Let's talk about precisely
what we're doing.

00:24:41.170 --> 00:24:43.680
You've seen this stuff,
so I'm not going to...

00:24:43.680 --> 00:24:47.100
You've seen it from everyone,
practically, I'm sure.

00:24:47.100 --> 00:24:51.820
But for purposes of this discussion,
it's critical because Java was developed

00:24:51.820 --> 00:24:54.060
on a Unix-based operating system.

00:24:54.060 --> 00:24:58.940
This enables us to port more quickly,
enables us to innovate

00:24:58.990 --> 00:25:03.110
rather than just port,
which is not always fun.

00:25:03.120 --> 00:25:09.990
And it enables us to offer an environment
which is familiar to the Java community.

00:25:10.000 --> 00:25:14.900
Okay, so there are many people in the
Java community who never considered us

00:25:15.070 --> 00:25:17.460
before that are now coming over to 10.

00:25:17.460 --> 00:25:21.650
And like it or not,
they open up a terminal and they can type

00:25:21.650 --> 00:25:24.670
Java C or Java and they get all excited.

00:25:24.670 --> 00:25:28.920
Wow, this is a Mac platform and I could
actually go into this terminal,

00:25:28.920 --> 00:25:32.890
run Emacs, VI, and all these lowest
common denominator editors.

00:25:32.900 --> 00:25:36.050
And use Java.

00:25:36.620 --> 00:25:37.680
And that's great.

00:25:38.010 --> 00:25:38.890
Okay, that's great.

00:25:39.030 --> 00:25:42.860
Because who are we to tell them, no,
you have to live in this IDE or

00:25:42.860 --> 00:25:44.800
you have to live in that IDE.

00:25:44.800 --> 00:25:45.600
That's not appropriate.

00:25:45.600 --> 00:25:48.710
So we have a spectrum of tools
starting from the command line

00:25:48.710 --> 00:25:52.070
to some very great IDEs that
we're going to talk about later.

00:25:54.070 --> 00:25:57.680
So just to put some of this
into concrete perspective,

00:25:57.680 --> 00:26:00.760
I wanted to bring someone
up from the company that's

00:26:00.780 --> 00:26:05.160
actually the first to deploy a
Java shrink wrap app on Mac OS X.

00:26:05.160 --> 00:26:07.920
The fellow's name is Sean Reilly,
and he's

00:26:07.930 --> 00:26:10.630
Chief Technical Officer from AppGen.

00:26:10.680 --> 00:26:14.480
Thanks, Sean.

00:26:18.020 --> 00:26:19.430
Hi.

00:26:19.430 --> 00:26:20.680
As you said, my name is Sean Reilly.

00:26:20.680 --> 00:26:25.390
I work with AppGen,
and I wrote MoneyDance.

00:26:25.400 --> 00:26:29.240
MoneyDance started out its life
being developed under Linux FreeBSD.

00:26:29.300 --> 00:26:32.710
That's kind of the world I come from.

00:26:33.040 --> 00:26:35.980
I had a lot of time one summer
when my girlfriend went to London,

00:26:35.990 --> 00:26:39.040
and I started writing MoneyDance,
you know, kind of evenings and

00:26:39.040 --> 00:26:40.120
weekends kind of thing.

00:26:40.120 --> 00:26:45.040
Continued that way for a couple of years,
and now I'm doing it full time.

00:26:45.040 --> 00:26:48.150
And MoneyDance is developing
a lot faster because of that.

00:26:48.230 --> 00:26:51.230
And I'm going to talk a
little bit about MoneyDance,

00:26:51.450 --> 00:26:54.850
and then talk a little bit about how,
you know, my experience went with

00:26:54.850 --> 00:26:58.880
bringing MoneyDance to OS X.

00:26:58.880 --> 00:27:01.180
My current development
environment is OS X right now.

00:27:01.180 --> 00:27:07.660
I switched completely from Linux FreeBSD,
so I'm now a part of the Mac world.

00:27:10.500 --> 00:27:14.260
and enjoying it.

00:27:14.260 --> 00:27:16.740
Moneydance is a personal
finance application,

00:27:16.740 --> 00:27:20.300
a kind of program that helps you
manage your checking account,

00:27:20.550 --> 00:27:24.700
credit cards, investments,
track a budget, things like that.

00:27:24.700 --> 00:27:27.660
The newest version allows you
to do some online banking.

00:27:27.660 --> 00:27:30.540
We've got a lot more online features,
you know, on the way,

00:27:30.550 --> 00:27:32.330
and I'll show you that in a little bit.

00:27:32.930 --> 00:27:35.720
You know,
the program is probably familiar

00:27:35.720 --> 00:27:38.430
to anyone who's seen any type
of personal finance application.

00:27:39.080 --> 00:27:41.980
It looks kind of like
a checkbook register.

00:27:42.670 --> 00:27:46.030
Click through things
and enter transactions.

00:27:46.120 --> 00:27:49.250
And has autofill.

00:27:50.160 --> 00:27:53.530
Standard features you expect to
find that you don't generally see

00:27:53.530 --> 00:27:55.820
in a lot of Java applications.

00:27:55.840 --> 00:27:59.840
One thing about Java on
OS X I like is the look and feel.

00:27:59.840 --> 00:28:03.310
This looks a lot, it looks very nice,
the buttons and the Aqua and

00:28:03.400 --> 00:28:04.340
everything like that.

00:28:04.360 --> 00:28:07.340
When you run it on Metal and
Linux and things like that,

00:28:07.340 --> 00:28:10.260
it looks nice too,
but Java on OS X is just beautiful,

00:28:10.260 --> 00:28:10.970
I think.

00:28:10.980 --> 00:28:13.830
Didn't you put a picture
of it on your box?

00:28:13.940 --> 00:28:16.250
Yeah, we have a box of money and answers.

00:28:16.250 --> 00:28:19.150
It should be in stores now,
and the screenshots on the

00:28:19.150 --> 00:28:20.730
box show the OS X version.

00:28:20.740 --> 00:28:23.850
Even though the version in the
box you can put on any platform,

00:28:23.950 --> 00:28:24.700
pretty much.

00:28:25.800 --> 00:28:26.940
Thank you.

00:28:29.070 --> 00:28:31.340
So, you know, I can step through the
program a little bit,

00:28:31.340 --> 00:28:33.390
show you the investment management,
the different views.

00:28:33.400 --> 00:28:37.230
And it's a, I think it's a very
full-featured application,

00:28:37.230 --> 00:28:40.090
you know, not like a lot of the,
you know, you can go on the

00:28:40.140 --> 00:28:42.600
Internet and probably find,
you know, 10,000, you know,

00:28:42.600 --> 00:28:44.580
small Java applications
that do one or two things.

00:28:44.620 --> 00:28:47.360
You know, MoneyDance is intended
to be very comprehensive,

00:28:47.400 --> 00:28:50.010
include all the features you need,
and be a real, you know,

00:28:50.010 --> 00:28:52.050
full-fledged desktop application.

00:28:56.200 --> 00:29:00.310
Some of the features that we
have that you can really only

00:29:00.310 --> 00:29:03.940
have in a Java application
are things like extensions.

00:29:03.940 --> 00:29:07.860
We have an interface to add
something like plug-ins,

00:29:07.860 --> 00:29:12.050
so you can add new features to the
program even after it's released.

00:29:12.060 --> 00:29:15.180
So we can go through adding an extension.

00:29:15.180 --> 00:29:17.070
And this works cross-platform.

00:29:17.080 --> 00:29:21.380
It'll work on Windows, Mac OS 9,
Mac OS X, Linux, anything.

00:29:21.380 --> 00:29:24.340
And we'll just choose an extension here.

00:29:26.200 --> 00:29:28.660
I don't know how many of
you have heard of JPython,

00:29:28.660 --> 00:29:32.140
but it's a Python scripting language
implementation written in Java.

00:29:32.140 --> 00:29:37.470
And we've written a little extension
that will allow you to run Python scripts

00:29:37.530 --> 00:29:41.880
in Java and get at your finances,
your transactions and accounts,

00:29:41.880 --> 00:29:43.790
and do whatever you want to do with them.

00:29:43.800 --> 00:29:45.250
So, you know,
make money that's more extensible.

00:29:45.260 --> 00:29:47.780
This is just one extension that we have.

00:29:47.780 --> 00:29:49.180
We've got a whole bunch
of them on the way.

00:29:49.180 --> 00:29:52.080
You know, a lot of online services,
a lot of, you know,

00:29:52.100 --> 00:29:54.980
some extensions that are
really only for hackers.

00:29:54.980 --> 00:29:57.390
You know, if you want to just...
play around with it and,

00:29:57.430 --> 00:29:59.130
you know,
and you can write your own extensions.

00:29:59.150 --> 00:30:02.670
We have a public API that, you know,
you can add whatever type

00:30:02.730 --> 00:30:03.600
of extension that you want.

00:30:03.650 --> 00:30:07.310
And if your company wants to add, say,
an online service to Moneydance

00:30:07.310 --> 00:30:09.500
that connects to your service,
you're free to write your own

00:30:09.500 --> 00:30:11.880
extension and give it to us and,
you know,

00:30:11.880 --> 00:30:13.510
we can provide it to Moneydance users.

00:30:13.520 --> 00:30:16.820
So you can enter Python commands in here.

00:30:16.820 --> 00:30:20.690
I won't really get into this much, but,
you know, just know that you can enter

00:30:20.750 --> 00:30:25.130
Python commands in there and
it will access your data.

00:30:27.650 --> 00:30:28.720
So how long did it take to port?

00:30:28.740 --> 00:30:30.440
To port?

00:30:30.440 --> 00:30:33.210
I don't know if I would
really call it porting.

00:30:33.260 --> 00:30:35.730
We didn't have to
rewrite any code at all.

00:30:35.740 --> 00:30:37.020
We didn't even have to recompile it.

00:30:37.060 --> 00:30:39.450
We just took our JAR file.

00:30:39.450 --> 00:30:42.020
When we distributed MoneyDance,
we distributed it with a JAR file

00:30:42.020 --> 00:30:46.130
and several supporting JAR files,
like JCE, JSSE, things like that.

00:30:46.160 --> 00:30:49.880
And we took the exact same JAR file
that we use on any other platform,

00:30:49.880 --> 00:30:52.400
and we packaged it up
using the MRJ app builder.

00:30:52.560 --> 00:30:55.400
And it took us under an hour to
figure out how to do all of this stuff

00:30:55.490 --> 00:31:00.760
and to have a clickable icon that
you could run the application with.

00:31:00.910 --> 00:31:04.600
And that was starting from never
seeing Mac OS X before to having

00:31:04.600 --> 00:31:09.280
an application that looks like it's
written in Cocoa running on that.

00:31:16.370 --> 00:31:17.600
Well, thanks a lot, Sean.

00:31:17.600 --> 00:31:18.010
Thank you.

00:31:18.020 --> 00:31:22.790
So, one note,
that's running on stock Mac OS X.

00:31:22.800 --> 00:31:25.820
Okay, so he wasn't running on any
custom version that we have.

00:31:25.860 --> 00:31:27.900
And we will be showing
you some custom versions,

00:31:27.900 --> 00:31:31.090
so I want to make sure
I distinguish between that.

00:31:31.100 --> 00:31:37.940
So, Mac X is appropriate for development,
deployment of these Java applications.

00:31:37.940 --> 00:31:43.100
And I'm amazed at the performance of that
app and just the overall fit and finish,

00:31:43.100 --> 00:31:46.260
given, again, where we were a couple
years ago with Java.

00:31:46.260 --> 00:31:47.580
So, very exciting.

00:31:47.580 --> 00:31:51.200
Here's our roadmap for 2001.

00:31:53.610 --> 00:31:57.280
As you all know, we shipped, again,
the Mac 10 GM on March 24th.

00:31:57.500 --> 00:32:02.620
Available at the show, I believe,
there's a pre-release 2 of IE.

00:32:02.620 --> 00:32:09.640
One of the things we didn't ship for the
GM release of Mac 10 is applet support.

00:32:09.640 --> 00:32:14.500
So that was a collaboration
between us and the browser vendors.

00:32:14.500 --> 00:32:19.240
The most notable ones are the OmniWeb
group and the Microsoft folks who do IE.

00:32:19.240 --> 00:32:20.840
So IE's doing a pre-release.

00:32:20.840 --> 00:32:23.200
We're a little bit behind
on the OmniWeb work,

00:32:23.380 --> 00:32:25.140
but we expect to do that as well.

00:32:25.140 --> 00:32:29.070
We're going to have a release
by the end of this week.

00:32:29.180 --> 00:32:35.580
We wanted to have it available for
you this week so that you could start

00:32:35.670 --> 00:32:38.670
playing with this stuff in the browser.

00:32:40.240 --> 00:32:49.090
and we expect to have a full-fledged
GM update of 1.3.1 in July.

00:32:49.500 --> 00:32:56.720
For those who aren't aware,
last week Sun actually blessed 131 GM,

00:32:56.720 --> 00:33:00.580
and that means we're only going to
have a two-month delta between Sun's

00:33:00.580 --> 00:33:02.950
latest stuff and our latest stuff.

00:33:03.290 --> 00:33:06.040
Okay,
this is the best that we've ever done,

00:33:06.040 --> 00:33:09.020
and in fact,
I think the best in the industry

00:33:09.020 --> 00:33:11.720
at tracking Sun's latest release.

00:33:11.720 --> 00:33:14.460
Again, years ago,
we were always apologetic.

00:33:14.460 --> 00:33:15.970
This year, no excuses.

00:33:15.970 --> 00:33:18.380
We have this stuff in a timely fashion.

00:33:19.400 --> 00:33:24.400
Two claps.

00:33:27.260 --> 00:33:30.840
Okay, so what's new in DP1?

00:33:31.250 --> 00:33:33.400
As I said, applet embedding now works.

00:33:33.560 --> 00:33:36.400
We've made many improvements to
the Aqua swing look and feel,

00:33:36.840 --> 00:33:39.400
debugging and profiling work,
and many bug fixes.

00:33:39.400 --> 00:33:43.300
So even though you can deploy,
obviously we still have

00:33:43.300 --> 00:33:45.270
bugs and we still fix them.

00:33:45.400 --> 00:33:46.930
So what's left?

00:33:47.060 --> 00:33:54.370
We are going to be updating to 1.3.1,
and that contains some new APIs,

00:33:54.370 --> 00:33:56.570
a new version of HotSpot.

00:33:56.820 --> 00:34:01.490
and we have to make sure we're
conformant to Sun's JCK validation suite.

00:34:01.770 --> 00:34:04.160
Right now I think we're passing,
the release you'll get,

00:34:04.160 --> 00:34:11.800
I think we're passing 90 plus percent,
so we don't have far to go there

00:34:11.800 --> 00:34:11.800
and certainly fix more bugs.

00:34:13.200 --> 00:34:16.100
So, now I'm going to shift gears.

00:34:16.100 --> 00:34:18.080
You know we're shipping with 10.

00:34:18.080 --> 00:34:20.840
You know what our plans
are for the update.

00:34:20.840 --> 00:34:22.630
Fairly straightforward stuff.

00:34:22.950 --> 00:34:25.570
Well, what are other things
that are on the horizon?

00:34:25.660 --> 00:34:26.170
Okay?

00:34:26.170 --> 00:34:30.010
Because I think we only meet once a year,
and it's important for

00:34:30.010 --> 00:34:32.680
me to talk about this,
because I know many of

00:34:32.680 --> 00:34:36.040
you are interested in it,
even though some of these things

00:34:36.040 --> 00:34:39.280
I'm going to be talking about,
we don't have product plans

00:34:39.280 --> 00:34:40.960
for to talk about today.

00:34:40.960 --> 00:34:42.470
But it's direction.

00:34:43.100 --> 00:34:46.700
So, Java Secure Sockets,
this is some really good news.

00:34:46.700 --> 00:34:47.920
You can go get this today.

00:34:47.920 --> 00:34:52.380
It's a pure Java implementation
of SSL and TSL for doing

00:34:52.680 --> 00:34:55.320
HTTPS or just Secure Sockets.

00:34:55.440 --> 00:35:00.070
It's available from Sun's website,
and there's the URL for it,

00:35:00.070 --> 00:35:03.500
and you can bundle it
with your application.

00:35:03.500 --> 00:35:07.890
So, this is a perfect example of
Sun continuing to add value to the

00:35:07.980 --> 00:35:13.080
platform and us being able to take
advantage of it without doing any work.

00:35:13.100 --> 00:35:13.600
Okay?

00:35:13.600 --> 00:35:16.000
So, that's the ideal world
from my perspective.

00:35:16.040 --> 00:35:19.330
And the other thing to
note is on Mac OS 9,

00:35:19.330 --> 00:35:24.530
the only place we had Secure Sockets
was within the browser because

00:35:24.530 --> 00:35:27.270
of how we chose to implement it.

00:35:27.430 --> 00:35:30.490
We didn't have this
feature for applications.

00:35:30.600 --> 00:35:32.630
And now with our
emphasis on applications,

00:35:32.630 --> 00:35:34.800
it's critical that this feature exists.

00:35:34.800 --> 00:35:39.310
So, again,
this is richer than the capabilities

00:35:39.310 --> 00:35:42.630
we were providing on 9 with MRJ.

00:35:44.090 --> 00:35:45.080
Java Web Start.

00:35:45.110 --> 00:35:48.490
This is a very interesting
technology that enables you to just

00:35:48.730 --> 00:35:54.360
click on an icon within a browser
and get your application to run.

00:35:54.360 --> 00:35:59.320
There's no ad hoc stuff you have to do,
which varies from product to product,

00:35:59.320 --> 00:36:01.960
and it gives you transparent update.

00:36:01.960 --> 00:36:04.200
It also is available from anywhere.

00:36:04.200 --> 00:36:08.020
It's a shame this didn't
exist three or four years ago,

00:36:08.020 --> 00:36:11.380
but it exists now and
we're right on top of it.

00:36:11.420 --> 00:36:13.980
We think it's great and
it is also integrated.

00:36:13.980 --> 00:36:23.030
To demonstrate some of this is
Steve Lewallen from my team.

00:36:27.110 --> 00:36:28.100
Thanks, Steve.

00:36:28.100 --> 00:36:30.010
Good morning, everybody.

00:36:30.130 --> 00:36:34.540
So I have two actual cool web-based
demos for you this morning.

00:36:34.540 --> 00:36:37.820
One is Java Web Start,
and actually I'm also going

00:36:37.820 --> 00:36:40.660
to show applets running in
Internet Explorer as well.

00:36:40.660 --> 00:36:42.370
So Java Web Start, what is it?

00:36:42.440 --> 00:36:43.770
Where did it come from?

00:36:43.770 --> 00:36:46.040
What's the deal about Java Web Start?

00:36:46.040 --> 00:36:50.080
Well, Java Web Start was developed
through the Java community process,

00:36:50.080 --> 00:36:53.670
and for those of you who don't
know anything about that,

00:36:53.750 --> 00:36:56.150
that's basically a forum that
Sun established to work with their

00:36:56.290 --> 00:36:59.970
partners on developing critical
technologies like Web Start for Java.

00:36:59.980 --> 00:37:01.780
So Web Start.

00:37:01.780 --> 00:37:05.990
Web Start is all about
permitting Java applications,

00:37:05.990 --> 00:37:09.360
be they small or large,
simple or complex,

00:37:09.450 --> 00:37:16.020
to be deployed from any vendor's web
server to any Java-enabled web server.

00:37:16.040 --> 00:37:19.000
Java Web Start is a platform that
allows Java Web Start to deploy

00:37:19.030 --> 00:37:21.250
on any Java Web Start desktop,
such as Mac OS X,

00:37:21.340 --> 00:37:24.750
from any vendor's web browser,
meaning a web browser doesn't have to,

00:37:24.750 --> 00:37:26.920
for example,
have the capability to display

00:37:26.920 --> 00:37:28.920
an applet to still use Web Start.

00:37:29.180 --> 00:37:31.460
All of that is to be done
securely through a single

00:37:31.460 --> 00:37:32.980
click of the user's mouse.

00:37:32.980 --> 00:37:37.970
We have a simple HTML page
above us on the screens.

00:37:38.260 --> 00:37:41.560
This is vanilla HTML,
just some images and some links.

00:37:41.560 --> 00:37:50.960
The WWDC WebStart image here has a
hotlink behind it that is tied to a JNLP,

00:37:50.960 --> 00:37:53.740
a Java Network Launching
Protocol WebStart document,

00:37:53.740 --> 00:37:55.610
which is written in standard XML.

00:37:55.730 --> 00:37:59.980
This document contains everything
WebStart needs to know in order

00:37:59.980 --> 00:38:02.900
to find the application it
needs to present to the user.

00:38:02.900 --> 00:38:05.370
So I'm going to start the demo off.

00:38:05.460 --> 00:38:08.580
I'm going to click on
my little image here.

00:38:08.580 --> 00:38:16.140
And this click will trigger the
download of the XML document.

00:38:16.180 --> 00:38:19.550
And that in turn will trigger
the WebStart technology,

00:38:19.550 --> 00:38:21.580
which we saw happen very rapidly.

00:38:21.580 --> 00:38:23.580
But it triggered the WebStart.

00:38:23.580 --> 00:38:27.140
So we used the WebStart technology
to examine that JNLP file.

00:38:27.140 --> 00:38:30.340
It found out what application
needed to be downloaded,

00:38:30.340 --> 00:38:35.230
what version it was, what's its name,
who wrote it, where to find out more

00:38:35.330 --> 00:38:37.820
information about it,
all that kind of good stuff.

00:38:37.820 --> 00:38:40.850
It, in our case,
downloaded the application because

00:38:40.850 --> 00:38:42.680
it wasn't already on our system.

00:38:42.870 --> 00:38:45.220
Had it been,
and had the user requested the same

00:38:45.220 --> 00:38:48.820
version as was on our system already,
it wouldn't have downloaded it.

00:38:48.820 --> 00:38:53.420
It would have just reused what was there,
and the download would have been faster.

00:38:53.420 --> 00:38:55.490
launches the application.

00:38:56.150 --> 00:39:00.280
So once you get a bunch of these
applications on your system,

00:39:00.400 --> 00:39:02.260
you may have difficulty managing them.

00:39:02.260 --> 00:39:06.020
Well, Web Start has built-in
application management in it.

00:39:06.080 --> 00:39:14.530
So I'm going to go and I'm going to
start the Web Start Management Console.

00:39:14.530 --> 00:39:14.530
Bring up my dock.

00:39:14.800 --> 00:44:02.800
[Transcript missing]

00:44:03.750 --> 00:44:06.920
I mean, that is like,
it can do it faster than I can type it.

00:44:07.060 --> 00:44:10.620
So that is a premier example of
how tightly you can integrate

00:44:10.980 --> 00:44:13.930
Cocoa services with current Java.

00:44:14.050 --> 00:44:20.880
So we can also ask the framework,
what are the suggested corrections?

00:44:20.880 --> 00:44:24.990
I don't really know how to
spell the word "this" maybe,

00:44:25.070 --> 00:44:28.590
so I'll go and I'll
Control-Click over the word.

00:44:28.890 --> 00:44:34.990
and I'll get a list of possible
corrections and this is my correction.

00:44:35.070 --> 00:44:36.620
I'll do the same thing
for the second word.

00:44:36.620 --> 00:44:39.080
The second word I want to
point out that we can also tell

00:44:39.080 --> 00:44:42.620
the system just ignore this,
you know, it's a funky word, you know,

00:44:42.620 --> 00:44:44.330
remove that red underscore.

00:44:44.450 --> 00:44:45.420
I don't want to see it.

00:44:45.420 --> 00:44:47.190
Or we could say this is a new word.

00:44:47.390 --> 00:44:51.110
A lot of times in our business we know
that the spell checkers complain about

00:44:51.110 --> 00:44:54.320
all kinds of technical terms that we
know are really spelled correctly.

00:44:54.320 --> 00:44:58.500
So I can actually ask the system to
learn it and then all applications,

00:44:58.500 --> 00:45:02.330
native and otherwise,
that use the Cocoa spelling service on

00:45:02.390 --> 00:45:07.290
OS X will now realize that that word is
a correct spelled word and not spell it,

00:45:07.400 --> 00:45:11.580
you know, indicate that it's been
spelled incorrectly.

00:45:11.580 --> 00:45:15.160
So in this case I'll just choose
something and it's corrected.

00:45:15.160 --> 00:45:17.840
So there we have it.

00:45:17.840 --> 00:45:20.800
We've taken a standard
Java swing application.

00:45:20.800 --> 00:45:21.840
We aquified it.

00:45:21.840 --> 00:45:24.170
We turned on the Aqua look and feel.

00:45:24.170 --> 00:45:27.780
And we added a few new
Apple Java frameworks released this

00:45:27.780 --> 00:45:30.750
week that you can use for free.

00:45:30.900 --> 00:45:33.070
And we wrapped it up in Web Start.

00:45:33.140 --> 00:45:36.430
We deployed it through
an Apache web server.

00:45:36.890 --> 00:45:40.060
Down to our Mac OS X desktop
through Internet Explorer all

00:45:40.060 --> 00:45:42.020
with a single click of the mouse.

00:45:42.020 --> 00:45:43.960
So that's the Web Start demo.

00:45:50.720 --> 00:45:55.580
So let's see how applets are doing today.

00:45:55.580 --> 00:46:00.390
As you know,
in the first version of Mac OS X,

00:46:00.420 --> 00:46:01.290
applets weren't running so great.

00:46:01.350 --> 00:46:05.170
We've made a lot of progress
with working with Microsoft,

00:46:05.170 --> 00:46:08.260
and the Java team has worked really
hard on getting this to work.

00:46:08.330 --> 00:46:13.120
So here is pretty much the
biggest swing applet I could find.

00:46:13.210 --> 00:46:17.800
It's a demo application that Sun wrote
quite a while ago to demonstrate all the

00:46:17.930 --> 00:46:20.600
capabilities of the swing UI toolkit.

00:46:20.680 --> 00:46:22.540
And we've probably all seen this before.

00:46:22.540 --> 00:46:26.030
I'm just going to play with it a little,
and we can see the performance

00:46:26.030 --> 00:46:27.160
and see that it's okay.

00:46:27.430 --> 00:46:32.370
Now, the very first demo tab that
comes up is really my favorite,

00:46:32.390 --> 00:46:34.020
internal frames.

00:46:34.440 --> 00:46:40.200
The developer that did this
really went to extremes to make

00:46:40.460 --> 00:46:43.460
it very OS X look and feel.

00:46:43.460 --> 00:46:45.200
So we see our windows here.

00:46:45.200 --> 00:46:46.080
We can move them around.

00:46:46.080 --> 00:46:46.850
That's pretty fast.

00:46:46.880 --> 00:46:48.180
And we can resize them.

00:46:48.240 --> 00:46:49.720
That's happening fast.

00:46:49.720 --> 00:46:52.040
And let me make this
small so I can scroll.

00:46:52.040 --> 00:46:53.600
And that happens fast.

00:46:53.630 --> 00:46:57.980
What's really cool is, of course,
Mac OS X has a dock on it, right?

00:46:57.980 --> 00:46:58.840
A transparent dock.

00:46:58.910 --> 00:47:02.860
So if I start minimizing these windows,
we see a transparent little

00:47:02.880 --> 00:47:04.880
dock appearing at the bottom.

00:47:04.880 --> 00:47:07.140
And it's even,
you see the transparency as

00:47:07.140 --> 00:47:08.700
I move the window around.

00:47:08.700 --> 00:47:09.850
So that's really cool.

00:47:09.850 --> 00:47:10.910
They did a great job.

00:47:10.960 --> 00:47:16.060
So let's take a look at some other
pieces of this swing set demo.

00:47:16.060 --> 00:47:17.290
This is a good one.

00:47:17.290 --> 00:47:20.140
We can see how fast the
columns move around.

00:47:20.140 --> 00:47:23.660
And I can resize them and
do that kind of cool stuff.

00:47:23.660 --> 00:47:27.340
And we can see,
we'll look at the progress bar.

00:47:27.340 --> 00:47:29.620
And it's hauling the mail.

00:47:29.620 --> 00:47:30.750
It's working very fast.

00:47:30.780 --> 00:47:37.380
So that is swing set two demo running as
an applet inside of Internet Explorer.

00:47:37.380 --> 00:47:39.280
And those are my demos.

00:47:39.280 --> 00:47:40.420
So thanks, Steve.

00:47:40.420 --> 00:47:40.600
Great.

00:47:40.840 --> 00:47:41.280
Thanks, Steve.

00:47:41.280 --> 00:47:41.820
No problem.

00:47:46.950 --> 00:47:47.520
Pretty cool.

00:47:47.560 --> 00:47:54.960
Next, I'd like to bring up Larry Abrahams
from Sun Microsystems.

00:47:59.410 --> 00:48:02.880
Larry has been one of our
strongest supporters and son,

00:48:02.890 --> 00:48:07.050
and I just wanted to bring him up
to thank him for all the work that

00:48:07.050 --> 00:48:10.320
his team has done on our behalf
and all the help they give us.

00:48:10.320 --> 00:48:13.360
So I also wanted him to take
the time to say a few words.

00:48:13.360 --> 00:48:14.500
Thanks, Larry.

00:48:16.300 --> 00:48:18.300
Thank you.

00:48:18.300 --> 00:48:22.350
First thing I want to do is
thank Steve and his team for

00:48:22.350 --> 00:48:24.920
the great job they did on 1.3.

00:48:24.920 --> 00:48:29.700
It was sort of a long time coming
in getting Java 2 on the Mac,

00:48:29.880 --> 00:48:31.860
but it was worth the wait.

00:48:31.860 --> 00:48:34.860
As you can see here,
it's just fantastic implementation.

00:48:34.860 --> 00:48:36.900
So thanks, Steve,
to you and your team for

00:48:36.900 --> 00:48:38.180
doing such a great job.

00:48:38.180 --> 00:48:42.360
And one of the comments
Steve made about 1.3.1,

00:48:42.360 --> 00:48:46.610
about Apple shipping 1.3.1,
I guess within two

00:48:46.610 --> 00:48:50.360
months of when Sun ships,
well, just to put that in perspective,

00:48:50.360 --> 00:48:54.400
Apple will probably be,
I can't say for sure,

00:48:54.400 --> 00:48:58.940
but Apple will probably be the
first platform port of 1.3.1.

00:48:58.940 --> 00:49:01.690
So we've come from a
situation where Apple,

00:49:01.790 --> 00:49:04.960
in many cases,
lagged behind Sun much further than

00:49:04.960 --> 00:49:08.830
either party would have liked to
today when Apple is... . ...the first

00:49:08.830 --> 00:49:10.400
licensee to be shipping on 1.3.1.

00:49:10.420 --> 00:49:12.710
So congratulations and thanks for that.

00:49:13.000 --> 00:49:14.920
Yeah.

00:49:18.080 --> 00:49:20.600
And I expect the same on 1.4 as well.

00:49:20.600 --> 00:49:22.740
I expect Apple will be close behind us.

00:49:22.740 --> 00:49:25.340
Did you give a date for that yet, Steve?

00:49:25.340 --> 00:49:26.640
Well, did you?

00:49:26.640 --> 00:49:27.680
Yeah.

00:49:27.680 --> 00:49:29.080
End of November.

00:49:29.080 --> 00:49:31.420
And we're right on schedule.

00:49:31.420 --> 00:49:35.520
In fact, next week we'll be
shipping the beta for 1.4.

00:49:35.520 --> 00:49:39.010
So let me talk a little about
the state of the partnership,

00:49:39.020 --> 00:49:41.410
and let me make a little confession.

00:49:43.340 --> 00:49:49.760
Before I joined Sun, I joined Sun in '98,
I was an Apple employee.

00:49:49.810 --> 00:49:54.150
I worked at Claris, actually, which,
at least in those days,

00:49:54.150 --> 00:49:57.240
was Apple's software arm, in a sense.

00:49:57.290 --> 00:49:59.900
And as most of you know,
Claris has now sort of

00:49:59.900 --> 00:50:01.460
migrated into FileMaker Inc.

00:50:01.800 --> 00:50:03.650
Well, when I was there,
I was responsible for

00:50:03.650 --> 00:50:09.190
Claris's internet products,
homepage and email and some other things.

00:50:09.480 --> 00:50:11.560
Still some good emailer fans out there?

00:50:11.560 --> 00:50:12.430
Glad to hear that.

00:50:12.430 --> 00:50:13.310
It's a great product.

00:50:13.340 --> 00:50:18.810
And when I came to Sun,
my boss at the time,

00:50:18.810 --> 00:50:20.940
who was heading up all
of Sun's Java efforts,

00:50:21.000 --> 00:50:23.890
told me, "I have three missions for you.

00:50:24.240 --> 00:50:26.930
Number one,
get Java 2 shipped." Because at the time,

00:50:26.930 --> 00:50:30.440
Sun was having problems getting
1.2.0 Java 2 out the door.

00:50:30.440 --> 00:50:32.850
It was a big deal,
and there were some problems

00:50:32.930 --> 00:50:37.340
with the schedule and with
getting the thing product ready.

00:50:37.340 --> 00:50:39.650
The second mission was
to get HotSpot shipped.

00:50:39.720 --> 00:50:41.260
It was sort of in a similar state.

00:50:41.340 --> 00:50:45.610
HotSpot was a really cool next
generation VM technology that

00:50:45.920 --> 00:50:48.190
we were having some trouble,
at the time, productizing.

00:50:48.200 --> 00:50:53.140
And the third thing was, can you please,
given that you're coming from Apple,

00:50:53.140 --> 00:50:57.880
could you please try and fix the
Apple and Sun relationship and

00:50:57.880 --> 00:51:02.760
get Apple to a point where we're
shipping compatible products

00:51:02.850 --> 00:51:04.520
in a reasonable timeframe?

00:51:04.540 --> 00:51:06.990
So very early on,
and those were--that's true.

00:51:07.000 --> 00:51:07.240
Those were my first missions.

00:51:07.240 --> 00:51:10.340
Those were my three commands
from my boss at the time.

00:51:10.440 --> 00:51:13.070
So very early on,
Steve and I got together

00:51:13.130 --> 00:51:15.730
and talked about,
well, you know,

00:51:15.730 --> 00:51:17.670
what could we do to make things better?

00:51:17.750 --> 00:51:20.430
And I just want to, once again,
thank Steve for,

00:51:20.430 --> 00:51:24.870
from those early conversations,
the spirit of partnership that the two

00:51:24.870 --> 00:51:30.840
teams have shown and the really getting
better with every month collaboration.

00:51:30.840 --> 00:51:35.990
We've gone from almost two, you know,
two camps that were barely working on

00:51:35.990 --> 00:51:42.830
the same agenda to now intimately working
on technologies that we're sharing for,

00:51:43.140 --> 00:51:45.760
you know,
fundamental Java technologies that the

00:51:45.770 --> 00:51:47.640
two teams developed collaboratively.

00:51:47.690 --> 00:51:49.340
I'll give you two examples of that.

00:51:49.340 --> 00:51:54.340
The Aqua look and feel for
Swing that looks so beautiful.

00:51:54.430 --> 00:51:56.990
I won't in any way put down
our metal look and feel or

00:51:57.070 --> 00:51:58.980
our windows look and feel,
but I got to say,

00:51:58.980 --> 00:52:01.790
this one looks pretty hot.

00:52:01.880 --> 00:52:05.290
It was actually the result of a
really tight collaboration between

00:52:05.350 --> 00:52:07.040
Sun engineers working at Apple,
and Apple engineers working at Apple,

00:52:07.040 --> 00:52:11.750
and that's something that, you know,
Sun has committed real resource to

00:52:11.870 --> 00:52:14.030
invest in and will continue to invest in.

00:52:14.220 --> 00:52:17.450
The second example I'll
mention is on the VM.

00:52:17.620 --> 00:52:22.040
Our two VM teams ever since Hotspot
have worked extremely closely together,

00:52:22.040 --> 00:52:26.080
and our VM team is extremely
excited about working with

00:52:26.080 --> 00:52:28.540
Apple on Apple's port of Hotspot.

00:52:28.560 --> 00:52:31.280
And as a matter of fact,
there's some really exciting work that

00:52:31.280 --> 00:52:36.200
Steve may talk about for the future where
Apple has developed some great extensions

00:52:36.250 --> 00:52:36.940
to Hotspot that Sun is working on.

00:52:36.940 --> 00:52:38.940
And Sun is going to be
looking at productizing.

00:52:38.940 --> 00:52:41.820
So at this point,
the collaboration is so strong that the

00:52:41.820 --> 00:52:46.280
technology is flowing in both directions,
and that's just a great comment

00:52:46.280 --> 00:52:48.740
on the state of the partnership.

00:52:48.940 --> 00:52:52.940
So let me talk a little about the
future of client Java as Sun sees it,

00:52:52.940 --> 00:52:57.700
and I think it lines up very well with
what you've seen and heard here today.

00:52:57.980 --> 00:53:04.410
Sun's latest statement and vision
for client Java is something we

00:53:04.410 --> 00:53:06.840
call Rich Clients for Web Services.

00:53:06.840 --> 00:53:09.840
If you come to Java 1,
you'll hear a lot more about that.

00:53:09.970 --> 00:53:11.820
But there's a lot of
talk about web services.

00:53:11.840 --> 00:53:12.760
So what are web services?

00:53:12.860 --> 00:53:18.840
Web services are essentially
internet or web or network services,

00:53:18.840 --> 00:53:23.840
in our case, implemented on top of either
J2SE and things like servlets,

00:53:23.840 --> 00:53:28.140
Java server pages in some cases,
and Java 2 Enterprise Edition and

00:53:28.140 --> 00:53:29.660
things like EJBs.

00:53:29.840 --> 00:53:34.410
And these web services today are
being made accessible through

00:53:34.410 --> 00:53:38.740
standard XML protocols like SOAP,
which is something that Sun is,

00:53:38.740 --> 00:53:42.160
at this point,
standing behind from a strategic

00:53:42.180 --> 00:53:44.640
web service perspective.

00:53:44.640 --> 00:53:47.640
So what good are these web services,
though?

00:53:47.640 --> 00:53:51.640
I think Steve brought this up,
without a great face on them.

00:53:51.640 --> 00:53:55.970
So as we all know, the most popular,
lowest common denominator face is

00:53:55.970 --> 00:53:59.630
HTML and technologies that create HTML.

00:53:59.780 --> 00:54:05.410
But it's always been my vision
in particular that the need for

00:54:05.420 --> 00:54:08.540
interfaces that go beyond the browser,
for a lot of reasons,

00:54:08.590 --> 00:54:13.540
is something that is
going to really come back,

00:54:13.550 --> 00:54:14.540
in a sense.

00:54:14.540 --> 00:54:18.060
We sort of took a detour in
many ways with the birth of the

00:54:18.060 --> 00:54:22.210
web through HTML and through,
in a sense, a lesser user experience

00:54:22.210 --> 00:54:24.400
for online and network data.

00:54:24.670 --> 00:54:27.360
And I think the time is rapidly
approaching where we're going to

00:54:27.360 --> 00:54:31.540
see a lot more innovation in user
interfaces that go beyond the browser.

00:54:31.540 --> 00:54:33.520
And I think Java is going
to play a key role in that.

00:54:33.630 --> 00:54:36.540
And the types of things you're
seeing with Java 2 are going

00:54:36.540 --> 00:54:37.480
to play a key role in that.

00:54:37.540 --> 00:54:42.540
So our vision is that Java 2,
and certainly Apple's version of Java 2,

00:54:42.540 --> 00:54:47.060
will be a great user experience
for this emerging generation of

00:54:47.060 --> 00:54:49.530
rich clients for web services.

00:54:49.540 --> 00:54:52.530
And I think it's only natural that Apple,
in a sense,

00:54:52.530 --> 00:54:57.520
be the leading provider of those,
or the vanguard of those,

00:54:57.520 --> 00:55:01.540
since Apple invented the rich client,
the rich interface.

00:55:01.540 --> 00:55:06.440
And Sun would like nothing more than to
see Apple be at the forefront of that.

00:55:06.440 --> 00:55:12.440
And be in the lead in terms of showing
off this new generation of technology.

00:55:12.440 --> 00:55:13.410
So thank you once again.

00:55:13.440 --> 00:55:14.440
Sounds good to me.

00:55:14.440 --> 00:55:16.440
And I look forward to-- Thanks a lot.

00:55:16.440 --> 00:55:17.440
Our next year.

00:55:27.070 --> 00:55:29.660
So for those of you that
didn't attend Java 1 last year,

00:55:29.690 --> 00:55:31.720
actually Steve Jobs was on stage.

00:55:31.720 --> 00:55:34.340
He was featured along with Scott McNeely.

00:55:34.340 --> 00:55:38.340
And it was one of the first appearances
Steve has made where he wasn't the star.

00:55:38.340 --> 00:55:42.010
And it was pretty interesting to
get him up on stage with Scott and

00:55:42.380 --> 00:55:45.940
actually shake hands and make sure the
two companies are working together.

00:55:45.940 --> 00:55:48.540
So not only are the people
in the trenches working well,

00:55:48.540 --> 00:55:52.140
we have our executives that are
actually kissing and hugging as well,

00:55:52.140 --> 00:55:54.260
which is great.

00:55:55.100 --> 00:57:56.600
[Transcript missing]

00:57:57.820 --> 00:57:59.100
So that's sharing.

00:57:59.150 --> 00:58:01.780
By the way, I'm running low on time,
so I'm going to really have to zoom,

00:58:01.780 --> 00:58:02.460
unfortunately.

00:58:02.460 --> 00:58:05.780
I usually go too fast.

00:58:05.900 --> 00:58:06.740
Now I'm going too slow.

00:58:06.740 --> 00:58:08.960
So an industry first.

00:58:11.310 --> 00:58:13.760
In the Steve Jobs tradition,
very dramatic.

00:58:13.760 --> 00:58:20.720
Hardware accelerated swing is what
I'd like to talk about right now.

00:58:21.610 --> 00:58:24.430
In the product that we're going
to be giving you later this week,

00:58:24.430 --> 00:58:26.000
it is not the default, okay?

00:58:26.000 --> 00:58:30.830
However, this support is in there,
and if you go to some other talks

00:58:30.830 --> 00:58:34.320
that are part of the Java track,
the guys will hopefully

00:58:34.320 --> 00:58:37.870
tell you how to enable it,
again, if you're nice to them.

00:58:37.880 --> 00:58:40.640
So, Accelerated Swing Caffeine Marks.

00:58:40.640 --> 00:58:45.440
Caffeine Mark is a micro-benchmark,
which we don't particularly like,

00:58:45.440 --> 00:58:49.260
but everyone else seems to
want to measure Java by it.

00:58:49.610 --> 00:58:51.450
So, let's talk about the imaging score.

00:58:51.670 --> 00:58:55.320
In the past, when we focused on the
just-in-time compiler,

00:58:55.430 --> 00:58:58.990
we have had advancements
over the years in some of the

00:58:58.990 --> 00:59:02.040
low-level compiler jitsy space.

00:59:02.040 --> 00:59:06.730
We always looked fairly mediocre,
if not poor, on imaging and graphics.

00:59:06.730 --> 00:59:09.860
But now,
with the hardware-accelerated swing,

00:59:09.860 --> 00:59:13.500
basically,
we're 8.5 times faster for graphics,

00:59:13.500 --> 00:59:14.140
okay?

00:59:19.720 --> 00:59:20.940
I'm sorry, that was imaging.

00:59:20.960 --> 00:59:21.650
Now it's graphics.

00:59:21.650 --> 00:59:25.680
The graphics score is
even more impressive.

00:59:25.680 --> 00:59:31.030
We go from a mark of, what is that,
200 to, whoa,

00:59:31.030 --> 00:59:35.200
23 times faster for Caffeine Marks.

00:59:35.200 --> 00:59:38.090
So again,
we don't really like Caffeine Marks,

00:59:38.090 --> 00:59:43.050
but we're showing them
because now we do well.

00:59:48.380 --> 00:59:53.670
A more interesting benchmark is
actually an internal benchmark that

00:59:53.800 --> 00:59:58.180
Sun has developed to measure swing.

00:59:58.220 --> 01:00:02.440
So because a lot of the focus
of the GUI is now centered

01:00:02.440 --> 01:00:07.370
around swing and not AWT,
measuring how fast swing performance

01:00:07.370 --> 01:00:09.370
can be is very important.

01:00:09.480 --> 01:00:15.660
So for swing, our swing mark on a 500
MHz G4 with a Radeon is 65.

01:00:15.660 --> 01:00:17.670
That's the mark.

01:00:19.170 --> 01:00:22.420
When we hardware accelerate,
we're 55% faster.

01:00:22.420 --> 01:00:26.420
In this benchmark, unlike the other one,
lower is better.

01:00:26.480 --> 01:00:34.280
An interesting test that the engineers
who were working on this decided to do,

01:00:34.280 --> 01:00:37.380
they said,
what if graphics were infinitely fast?

01:00:37.400 --> 01:00:43.880
So what they did was they stubbed out,
so to speak, from Java the calls to the

01:00:43.880 --> 01:00:47.600
lower level graphics where they
didn't do any drawing at all,

01:00:47.600 --> 01:00:53.510
and the swing mark was only, what,
five points off from where we were when

01:00:53.510 --> 01:00:55.580
we were doing hardware acceleration.

01:00:55.580 --> 01:00:57.210
I mean, this is incredible.

01:01:00.450 --> 01:01:04.070
So the pendulum swings, right?

01:01:04.080 --> 01:01:05.920
Oh, the Jitsi's the problem.

01:01:06.060 --> 01:01:07.760
The garbage collector's the problem.

01:01:07.760 --> 01:01:08.670
No, we got that right.

01:01:08.740 --> 01:01:10.280
Now the graphics are the problem.

01:01:10.290 --> 01:01:11.890
Looks like graphics are going to go away.

01:01:12.000 --> 01:01:15.190
Well, the pendulum will swing back,
and we'll be back to the compiler.

01:01:15.240 --> 01:01:17.580
So it's an iterative process.

01:01:17.580 --> 01:01:20.420
The important point is
performance is critical,

01:01:20.440 --> 01:01:23.500
and we're working on it.

01:01:23.520 --> 01:01:27.980
I'd like to close with development tools.

01:01:28.990 --> 01:01:31.000
Core Apple Tools,
we're investing in tools.

01:01:31.000 --> 01:01:31.900
Steve told you that.

01:01:31.900 --> 01:01:32.600
You know that.

01:01:32.600 --> 01:01:33.630
You have a disk in the bag.

01:01:33.630 --> 01:01:36.920
Actually, I'm thrilled to say you
have three disks in the bag.

01:01:36.920 --> 01:01:40.100
You have Apple's tools,
which I'm responsible for.

01:01:40.100 --> 01:01:42.780
You have JBuilder,
which is a fabulous pure

01:01:42.780 --> 01:01:45.020
Java development environment.

01:01:45.020 --> 01:01:48.340
And you have CodeWarrior Early Access.

01:01:48.620 --> 01:01:52.390
So, I think at a high level,
it seems like Mac 10 is

01:01:52.390 --> 01:01:56.060
just out of the gate,
but you guys have more tools than

01:01:56.170 --> 01:01:58.900
you've ever had in previous years.

01:02:04.750 --> 01:02:08.040
Again, Steve is very aggressive about
wanting you to be on the platform.

01:02:08.040 --> 01:02:12.320
Without the tools,
you wouldn't be as successful.

01:02:12.390 --> 01:02:14.800
So I think you have all
the tools to be successful.

01:02:14.800 --> 01:02:17.320
Here's a slide on Apple's tools.

01:02:17.320 --> 01:02:19.330
WebObjects you're familiar with.

01:02:19.440 --> 01:02:22.460
I'm not going to go through this in
detail because I have eight minutes left.

01:02:22.560 --> 01:02:25.490
But there are talks on all these.

01:02:25.490 --> 01:02:29.790
I think the important
point is just what I said.

01:02:29.820 --> 01:02:31.580
You have the tools to be successful.

01:02:31.750 --> 01:02:33.700
We have the application server.

01:02:33.720 --> 01:02:37.090
So again, you could do your rich,
swing-based Java app,

01:02:37.180 --> 01:02:38.900
or you could do the browser UI.

01:02:40.720 --> 01:02:43.740
This is a rich GUI, rich web GUI.

01:02:43.740 --> 01:02:47.400
Again, Apple uses this stuff so you
can be assured that we're

01:02:47.400 --> 01:02:49.640
eating our own dog food,
and if we have problems,

01:02:49.640 --> 01:02:50.490
we're going to fix them.

01:02:50.690 --> 01:02:53.220
And it's critical that we
find them before you do,

01:02:53.220 --> 01:02:54.020
typically.

01:02:54.020 --> 01:02:57.610
So CodeWarrior has Java 2 support,
full RAD support,

01:02:57.610 --> 01:03:01.720
debugging is much improved for
both application and applets.

01:03:01.820 --> 01:03:07.320
And Java deployment,
you folks are mostly familiar with,

01:03:07.320 --> 01:03:09.580
hopefully, Zero-G.

01:03:09.960 --> 01:03:12.360
They have been a great partner
for the last three years.

01:03:12.360 --> 01:03:16.020
They're very easy to work with,
give us lots of feedback on the runtime,

01:03:16.020 --> 01:03:18.500
and I think they have
some great products,

01:03:18.590 --> 01:03:20.580
and I hope you agree with that.

01:03:20.600 --> 01:03:23.860
Java performance analysis,
one of the reasons we're getting

01:03:23.860 --> 01:03:27.740
faster is because we actually have
tools to analyze performance now.

01:03:27.740 --> 01:03:31.050
And this tool is fabulous.

01:03:31.050 --> 01:03:32.260
It's best of breed.

01:03:32.260 --> 01:03:33.790
That's another point I need to make.

01:03:34.050 --> 01:03:36.520
The dust has settled
in the Java tool space,

01:03:36.520 --> 01:03:37.080
okay?

01:03:37.080 --> 01:03:39.980
If we were to choose a tool
three years ago... We would have

01:03:40.430 --> 01:03:43.030
probably picked the wrong one,
okay?

01:03:43.200 --> 01:03:44.990
So right now, the dust has settled.

01:03:45.080 --> 01:03:49.070
We are choosing to work specially with
the products that I'm referencing here.

01:03:49.080 --> 01:03:53.010
I'm not just putting them on a
slide because the product exists.

01:03:53.080 --> 01:03:55.080
There are many products that exist.

01:03:55.080 --> 01:03:57.640
For instance,
Forte is Sun's development environment,

01:03:57.770 --> 01:03:58.020
okay?

01:03:58.120 --> 01:03:59.990
I hope that's very
successful on our platform.

01:04:00.080 --> 01:04:02.080
There are other
Java development environments.

01:04:02.080 --> 01:04:04.720
The people who are being
called out here are people that

01:04:04.720 --> 01:04:07.620
Apple has chosen to partner with
and give special love and care,

01:04:07.630 --> 01:04:08.080
okay?

01:04:08.080 --> 01:04:09.010
Okay?

01:04:09.080 --> 01:04:14.080
So these tools, we think,
are the best of breed, basically.

01:04:14.080 --> 01:04:17.080
So last, I have six minutes left.

01:04:17.080 --> 01:04:21.080
I'm going to bring up
Blake Stone of Borland,

01:04:21.080 --> 01:04:24.030
someone who supported us for
the last two or three years.

01:04:24.160 --> 01:04:25.000
Thank you.

01:04:25.080 --> 01:04:26.080
Thank you, Steve.

01:04:28.940 --> 01:04:30.600
We're really excited about this.

01:04:30.810 --> 01:04:34.600
This is something that we've been
working hard for the past year.

01:04:34.630 --> 01:04:37.860
You saw early technology
demos last year of JBolder 4,

01:04:37.860 --> 01:04:42.020
but announced last week
is our JBolder 5 product,

01:04:42.020 --> 01:04:47.420
and shipping in all of your bags,
you have a preview release of JBolder 5.

01:04:47.420 --> 01:04:50.190
So I hope you have a chance to
look at that after the show's over,

01:04:50.190 --> 01:04:51.400
or even during the show.

01:04:51.420 --> 01:04:56.890
I wanted to talk a little bit about
this and some of the path to get here,

01:04:56.900 --> 01:04:58.800
but we have only a few minutes here.

01:04:58.800 --> 01:05:00.670
So I'm going to sort of
tailor this discussion,

01:05:00.670 --> 01:05:02.220
I guess, and showcase the product.

01:05:02.250 --> 01:05:07.400
You'll get just a little bit of a
glimpse of what JBolder 5 is about here.

01:05:07.400 --> 01:05:10.130
You can see an awful lot more
in a couple of other sessions.

01:05:10.220 --> 01:05:13.100
Wednesday at 10:30,
there's a session showcasing a

01:05:13.420 --> 01:05:14.830
couple of Java-related tools.

01:05:14.830 --> 01:05:16.040
We'll be there.

01:05:16.040 --> 01:05:17.420
But there's also a session Wednesday.

01:05:17.420 --> 01:05:20.860
So Wednesday at 5:00,
I'd encourage you to come to where

01:05:20.860 --> 01:05:24.450
we'll showcase JBolder in a lot more
depth and see a lot of what we're

01:05:24.560 --> 01:05:26.880
going to gloss over very quickly here.

01:05:27.090 --> 01:05:29.330
Still,
I would like to bring up and showcase

01:05:29.410 --> 01:05:33.880
a few things just for those of you
who may not be familiar with JBuilder.

01:05:33.880 --> 01:05:36.560
Of course,
we brought it to the Macintosh.

01:05:36.620 --> 01:05:38.860
Of course,
we got a nice Aqua icon for it.

01:05:38.860 --> 01:05:41.600
It was critical to us to really look
like we belong in this environment.

01:05:41.600 --> 01:05:44.330
In fact,
we've done quite a bit of tailoring.

01:05:44.400 --> 01:05:48.320
And we can't necessarily see all
of the details we went through,

01:05:48.320 --> 01:05:52.460
but everything from the default
order of buttons to making sure that

01:05:52.460 --> 01:05:55.120
Aqua looked right in the environment.

01:05:55.120 --> 01:05:56.980
These are things we really focused on.

01:05:57.000 --> 01:06:00.240
So here it is in all its glory,
and we'll demo it in

01:06:00.440 --> 01:06:03.540
Aqua this time around,
because Aqua works great.

01:06:03.700 --> 01:06:04.640
It looks fantastic.

01:06:04.750 --> 01:06:08.190
It's the right way to work on
products on the Macintosh platform.

01:06:08.200 --> 01:06:10.980
So I have a simple application,
our Welcome app,

01:06:11.080 --> 01:06:12.870
the default that comes up here.

01:06:12.970 --> 01:06:16.080
And I want to extend that a
little bit by taking advantage

01:06:16.080 --> 01:06:18.120
of a few pieces of the product.

01:06:18.160 --> 01:06:21.910
First of all, I'm going to go into
our graphical designer,

01:06:21.910 --> 01:06:25.680
which allows us to do visual
manipulation of Java beans.

01:06:25.860 --> 01:06:28.410
And so we're going through and looking
at this particular application and

01:06:28.690 --> 01:06:31.680
discovering that what we have here,
essentially, is an empty frame.

01:06:31.700 --> 01:06:35.860
This empty frame we want to
use instead of border layout.

01:06:35.860 --> 01:06:39.950
Perhaps we want to use an X, Y layout,
allow me to position some things,

01:06:39.950 --> 01:06:43.520
drop a button in place,
drop a text field in place.

01:06:43.620 --> 01:06:48.060
And we get to see our app
being designed in Aqua here.

01:06:48.060 --> 01:06:51.420
That's an option we could choose
if we were designing something for

01:06:51.420 --> 01:06:53.800
another platform to preview that,
but why?

01:06:54.720 --> 01:07:00.300
So we'll get a scrolling
region and perhaps just drop

01:07:00.300 --> 01:07:03.780
a list in this region as well.

01:07:03.960 --> 01:07:06.480
I can even work with
non-visual components.

01:07:06.480 --> 01:07:08.860
You can see on this side here,
I'm getting a collection of

01:07:08.950 --> 01:07:10.390
components that I'm manipulating.

01:07:10.410 --> 01:07:12.430
And all of them so far
are visual components,

01:07:12.610 --> 01:07:16.030
but I could also go in and say, you know,
I'd like to select a

01:07:16.160 --> 01:07:17.720
non-visual component.

01:07:17.720 --> 01:07:20.660
In this case, I'd like to go find a
model for this list.

01:07:20.660 --> 01:07:24.560
And I could just scroll down
and find my default list model.

01:07:26.890 --> 01:07:28.290
and drop one of those as well.

01:07:28.400 --> 01:07:31.920
So now I have a non-visual component that
I can interact with by telling it that

01:07:31.920 --> 01:07:36.630
I'd like my list to use this model that
I've created and then write some code.

01:07:36.640 --> 01:07:41.120
So the visual designer lets me very
quickly assemble the user interface.

01:07:41.130 --> 01:07:43.260
It doesn't use any
proprietary techniques.

01:07:43.300 --> 01:07:46.590
What it's doing is it's writing Java code
for me the way I would write it,

01:07:46.680 --> 01:07:47.970
using setters and getters.

01:07:49.200 --> 01:07:53.190
But it then allows me also to
drop in and write my custom code.

01:07:53.310 --> 01:07:55.830
And I might want to write
some code here that interacts

01:07:55.860 --> 01:07:58.240
with this default list model.

01:07:58.240 --> 01:08:02.120
And if I can't remember the name of it,
I can ask for some assistance with that.

01:08:02.200 --> 01:08:04.950
And perhaps I can add an element.

01:08:05.310 --> 01:08:12.600
And the element I will get from a--see,
we have a text field on here, jTextField.

01:08:12.600 --> 01:08:16.200
I'll just go ahead and get the
text from it and compile that.

01:08:16.200 --> 01:08:19.200
One of the things that's really
critical to us is fast compile time.

01:08:19.200 --> 01:08:22.350
We've got an integrated compiler
that does incremental compiles

01:08:22.440 --> 01:08:26.340
through a smart dependency checker
so that even on large projects,

01:08:26.340 --> 01:08:30.500
and I mean enormous projects,
JBuilder itself consists of more classes

01:08:30.500 --> 01:08:35.180
than the entire JDK and we can do an
incremental compile in under 10 seconds.

01:08:35.200 --> 01:08:38.130
So speed, again, is critical to us.

01:08:38.190 --> 01:08:42.200
We can go from right from there to
being able to actually run this code.

01:08:42.200 --> 01:08:46.080
And we'll take a shortcut here and jump
right into even debugging this code.

01:08:46.200 --> 01:08:48.090
So it'll do a quick dependency
check to make sure that we're

01:08:48.190 --> 01:08:49.200
actually running this code.

01:08:49.200 --> 01:08:51.200
We'll make sure that
nothing's been changed.

01:08:51.200 --> 01:08:58.060
We'll get the debugger UI up and we'll
launch our Java swing application here.

01:09:00.800 --> 01:09:03.670
Where I can type some text in,
click the button to add it,

01:09:03.870 --> 01:09:05.190
and we hit a break point.

01:09:05.280 --> 01:09:09.690
So we have a pure Java debugger here that
has a really rich set of capabilities.

01:09:09.690 --> 01:09:11.800
Now we're not going to be
able to look at them all here.

01:09:11.800 --> 01:09:13.640
I again encourage you to
come to another session.

01:09:13.640 --> 01:09:18.230
But if I want to find things
out about this text field,

01:09:18.230 --> 01:09:23.310
I've got access to a really rich
UI that allows me to browse that

01:09:23.570 --> 01:09:25.270
object and all of its characteristics,
the class it belongs to, and so forth.

01:09:26.000 --> 01:09:30.190
So that's pretty exciting in its own way,
because we've got a real best-of-breed

01:09:30.290 --> 01:09:33.720
development environment here,
running on Mac OS X,

01:09:33.720 --> 01:09:36.100
letting me do all of my work
on my favorite platform.

01:09:36.100 --> 01:09:39.490
By the way,
that's not just marketing speak.

01:09:39.620 --> 01:09:41.470
Long-time Apple fan,
you may be able to tell

01:09:41.470 --> 01:09:42.860
that I wear the colors here.

01:09:42.860 --> 01:09:46.570
I've been a believer for a long time,
and this is like coming home for me.

01:09:46.580 --> 01:09:50.320
But there are a lot of other interesting
things that showcase the power of the

01:09:50.480 --> 01:09:52.340
environment that we're working on.

01:09:52.400 --> 01:09:57.470
We're working on an environment
that has a ton of very sophisticated

01:09:57.470 --> 01:10:00.950
integration with the native environment.

01:10:00.960 --> 01:10:05.070
JBuilder is probably the worst torture
test you could throw at a Java VM,

01:10:05.080 --> 01:10:10.200
because not only are we a fast editor,
a graphical environment, a debugger,

01:10:10.200 --> 01:10:14.620
which is one of the nastier
areas in porting the Java VM,

01:10:14.620 --> 01:10:18.300
but also we just include a
whole bunch of functionality.

01:10:18.300 --> 01:10:20.510
So one of the things I wanted
to showcase is if we go and

01:10:20.510 --> 01:10:22.940
look at our release notes,
we'll bring them up in our

01:10:22.940 --> 01:10:24.240
integrated HTML viewer.

01:10:24.240 --> 01:10:26.890
Well,
if you're not really too fond of the

01:10:26.950 --> 01:10:32.220
HTML viewer you're using currently,
you may want to note that this particular

01:10:32.370 --> 01:10:36.510
viewer you can just type a URL into,
and from within JBuilder,

01:10:36.530 --> 01:10:39.220
browse directly to the web.

01:10:39.260 --> 01:10:41.980
And the performance is...

01:10:43.280 --> 01:10:45.300
and get completely
reasonable performance.

01:10:45.460 --> 01:10:47.720
Now for sort of the surprise.

01:10:47.830 --> 01:10:51.200
All of this is running
without hardware acceleration.

01:10:51.310 --> 01:10:55.600
Okay, so the hardware acceleration
makes things enormously faster.

01:10:55.600 --> 01:10:59.490
Let's showcase perhaps one of the
worst case examples of what happens

01:10:59.500 --> 01:11:01.200
without the hardware acceleration.

01:11:01.200 --> 01:11:06.210
If I grab and move this split,
you can see that the performance is

01:11:06.210 --> 01:11:09.200
perhaps not what we would hope for.

01:11:09.230 --> 01:11:13.400
Let's see what that's like
with hardware acceleration on.

01:11:16.450 --> 01:11:20.800
So I'm going to come down and go
find my collection of JBuilder icons.

01:11:20.800 --> 01:11:23.210
And I'm sorry, I absolutely have to.

01:11:23.350 --> 01:11:26.640
We spent enough time on
the artwork for these.

01:11:26.640 --> 01:11:31.810
We really wanted to get that
photorealistic icon thing down pat here.

01:11:31.880 --> 01:11:32.700
And go in and have a look.

01:11:32.710 --> 01:11:38.390
I've got a couple of configuration files
that if you go ahead and register your

01:11:38.390 --> 01:11:42.670
version of JBuilder that's in your bag,
you'll find that we provide you tips.

01:11:42.700 --> 01:11:45.350
So once you can get the
new Java VM from Apple,

01:11:45.360 --> 01:11:47.520
and please get the new
Java VM from Apple,

01:11:47.520 --> 01:11:50.420
JBuilder really benefits from
a lot of the work these guys

01:11:50.460 --> 01:11:51.640
have been putting into it.

01:11:51.650 --> 01:11:54.650
We'll show you how to make these kinds
of changes to turn on things like

01:11:55.030 --> 01:11:59.670
the hardware graphics acceleration
in the license email you get.

01:11:59.760 --> 01:12:03.040
So we'll bring JBuilder back up and
have a look at the kind of difference it

01:12:03.040 --> 01:12:07.210
makes and sort of that one key indicator,
which is dragging that splitter.

01:12:07.520 --> 01:12:10.520
So if you remember before,
we were getting sort of

01:12:10.610 --> 01:12:12.220
a frame or two a second.

01:12:12.320 --> 01:12:17.510
And now, with hardware acceleration,
it's Smooth.

01:12:17.800 --> 01:12:19.800
Why don't you go to the web page?

01:12:19.800 --> 01:12:20.780
Go to the web page?

01:12:20.790 --> 01:12:22.680
Can you go to the web page?

01:12:22.760 --> 01:12:25.560
Oh, yeah, we can actually, sure.

01:12:25.560 --> 01:12:26.600
I mean, that's just a text view.

01:12:26.600 --> 01:12:28.120
Let's bring up something with graphics.

01:12:28.160 --> 01:12:30.980
So, do you have a favorite page in mind?

01:12:31.000 --> 01:12:33.540
No.

01:12:34.010 --> 01:12:36.210
The one you just brought up.

01:12:36.250 --> 01:12:40.250
Go back to the Mac OS X page
from Apple's site here.

01:12:40.260 --> 01:12:41.500
So look at that.

01:12:41.500 --> 01:12:44.850
The scrolling performance, you'll find,
is remarkable.

01:12:44.850 --> 01:12:48.370
We're really pleased with what
hardware acceleration can do.

01:12:48.440 --> 01:12:51.090
And I would like to take this
opportunity to thank many of you in

01:12:51.140 --> 01:12:54.480
the audience who worked on this and
have been working on it very hard.

01:12:54.510 --> 01:12:57.370
The Java team at Apple has been
doing a phenomenal job and we've been

01:12:57.370 --> 01:12:58.870
really proud to be working with them.

01:12:59.070 --> 01:13:01.730
Thank you, Steve.

01:13:01.730 --> 01:13:01.730
Thank you.

01:13:11.240 --> 01:13:12.840
Pretty much out of time.

01:13:12.840 --> 01:13:18.080
I think I've said a lot today,
which is why I'm out of time,

01:13:18.080 --> 01:13:21.720
along with my great demoers and speakers.

01:13:21.720 --> 01:13:26.880
I just want to touch on
the important points.

01:13:26.880 --> 01:13:32.820
The important points are what we
ship with Mac 10 we're very proud of.

01:13:32.880 --> 01:13:35.960
We're actively working
to make it a lot better,

01:13:36.120 --> 01:13:38.760
and we've talked about some of that.

01:13:38.920 --> 01:13:43.300
We think we're going to have the best
platform on the planet for running Java,

01:13:43.460 --> 01:13:46.980
and you've seen applications
today that all work very well.

01:13:47.130 --> 01:13:50.390
We hope to bring the
hardware acceleration to you

01:13:50.390 --> 01:13:52.380
guys in a timely fashion.

01:13:52.380 --> 01:13:56.680
I guess that's all I have.

01:13:56.680 --> 01:13:58.780
I have a bunch of tracks here.

01:13:58.780 --> 01:14:03.580
There's the Java Virtual Machine track,
or session I should say,

01:14:03.580 --> 01:14:08.800
Wrapping Mac OS APIs in Java Beans,
Java Development Tools, Java Performance,

01:14:08.800 --> 01:14:09.640
JBuilder,

01:14:11.210 --> 01:14:14.140
and there's another five sessions.

01:14:14.160 --> 01:14:20.080
Since we didn't have time today to
take Q&A given the length of the talk,

01:14:20.140 --> 01:14:24.660
feel free to come to the Java Feedback
Forum on Friday and we'll hope

01:14:24.660 --> 01:14:26.100
to answer any questions you have.

01:14:26.100 --> 01:14:27.640
Thanks for coming.

01:14:27.690 --> 01:14:29.780
Take care.