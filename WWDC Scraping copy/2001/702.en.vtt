WEBVTT

00:00:03.470 --> 00:00:05.000
Welcome.

00:00:05.000 --> 00:00:09.410
So, down below all the lights,
how many people were here for

00:00:09.410 --> 00:00:11.240
the Project Builder session?

00:00:11.300 --> 00:00:12.730
Just raise your hands.

00:00:12.830 --> 00:00:15.170
Excellent, so more than half of you.

00:00:15.950 --> 00:00:19.400
Development tools are one of the
most important aspects of building

00:00:19.400 --> 00:00:23.010
the new operating system and
making successful applications.

00:00:23.050 --> 00:00:25.460
And in that direction,
I want to just introduce

00:00:25.720 --> 00:00:30.780
very rapidly Henri Lamiraux,
manager of the Interface Builders group.

00:00:31.050 --> 00:00:35.730
And he's going to tell you all about our
world class leading Aqua UI design tool.

00:00:35.730 --> 00:00:37.800
Thank you.

00:00:37.800 --> 00:00:38.360
Right on the podium.

00:00:38.360 --> 00:00:43.830
Good afternoon.

00:00:46.680 --> 00:00:50.940
I want to start by pointing out that
today we have a wide audience here.

00:00:51.020 --> 00:00:54.700
We have developer which started
to use Interface Builder many

00:00:54.700 --> 00:00:59.240
years ago with Next Steps,
then Open Steps, and now with Cocoa.

00:00:59.310 --> 00:01:02.640
We have also developer that just
starting to use Interface Builder

00:01:02.760 --> 00:01:06.460
or are thinking about using
Cocoa and use Interface Builder.

00:01:06.520 --> 00:01:10.450
We also have Carbon developer now
who can use Interface Builder.

00:01:10.570 --> 00:01:13.040
So as you can see,
a wide audience of developers

00:01:13.040 --> 00:01:15.780
with different needs,
different interests.

00:01:16.030 --> 00:01:19.000
So when we think about that,
we decided to organize our

00:01:19.000 --> 00:01:20.720
talk around several topics.

00:01:20.990 --> 00:01:24.870
We want first to answer some of
the frequently asked questions,

00:01:24.890 --> 00:01:30.100
questions that are coming over and
over on the default mailing list.

00:01:30.180 --> 00:01:33.080
We want to show you the
new features we've added to

00:01:33.080 --> 00:01:34.940
Interface Builder this year.

00:01:35.020 --> 00:01:38.740
We want to give you some tips on
how to better use Interface Builder

00:01:38.800 --> 00:01:41.110
and also give you some demos.

00:01:42.290 --> 00:01:44.680
So this is the roadmap I'm
going to be following today.

00:01:44.720 --> 00:01:48.160
I'm going to first introduce
quickly what is Interface Builder

00:01:48.230 --> 00:01:50.000
and then go-- IB for short.

00:01:50.060 --> 00:01:54.860
I'll be using the word IB sometimes
for this Interface Builder.

00:01:55.600 --> 00:01:59.690
I will go then through the three
steps it takes to develop an

00:01:59.690 --> 00:02:01.920
application using Interface Builder.

00:02:02.010 --> 00:02:04.160
First,
you have to lay out your user interface.

00:02:04.240 --> 00:02:06.880
Then you have to connect your
user interface to your code.

00:02:06.950 --> 00:02:10.560
And then you have to load the user
interface in your application.

00:02:10.610 --> 00:02:13.790
I'm going to go through
some tips and tricks,

00:02:13.870 --> 00:02:18.100
talk about and talk about
our update schedule.

00:02:19.650 --> 00:02:23.110
So let's start with what
is Interface Builder.

00:02:23.180 --> 00:02:26.740
Interface Builder is Apple's
user interface builder tool.

00:02:26.770 --> 00:02:29.750
We have one tool at Apple that
covers all of our frameworks.

00:02:29.880 --> 00:02:31.600
This is Interface Builder.

00:02:31.900 --> 00:02:34.730
Interface Builder has been tuned
to create Aqua compliant user

00:02:34.740 --> 00:02:37.750
interfaces for both Cocoa and Carbon.

00:02:37.800 --> 00:02:41.670
And although Interface Builder
originally was a Cocoa tool,

00:02:41.670 --> 00:02:43.600
we now support Carbon as
a first class citizen.

00:02:43.600 --> 00:02:46.390
Both Cocoa and Carbon are fully
supported by Interface Builder.

00:02:46.390 --> 00:02:51.400
We're spending as much time on both
frameworks to support both frameworks.

00:02:52.110 --> 00:02:55.280
So Interface Builder,
it's a Cocoa application

00:02:55.320 --> 00:02:56.680
running on Mac OS X.

00:02:56.780 --> 00:03:00.490
With Interface Builder you
create what we call Nib files.

00:03:00.490 --> 00:03:02.990
Interface Builder does not generate code.

00:03:03.000 --> 00:03:07.000
We don't generate Objective
C code or Java code.

00:03:07.000 --> 00:03:10.060
We generate what you call a
Nib file that contains the

00:03:10.070 --> 00:03:11.550
description of your user interface.

00:03:11.560 --> 00:03:16.240
I show here two different Nib files,
a Cocoa Nib file and a Carbon Nib file.

00:03:16.740 --> 00:03:19.560
Although they have the
same structure internally,

00:03:19.560 --> 00:03:23.400
they are quite different and you cannot
use a Cocoa Nib in a Carbon application

00:03:23.400 --> 00:03:25.110
or a Carbon Nib in a Cocoa application.

00:03:25.120 --> 00:03:31.310
A Cocoa Nib is archive objects,
archive Cocoa objects.

00:03:31.700 --> 00:03:36.260
It can be the app kit objects or
it can be also your own objects.

00:03:36.260 --> 00:03:37.940
So it's an archive of objects.

00:03:38.000 --> 00:03:41.520
The Carbon Nib is more of a
description of your user interface.

00:03:41.520 --> 00:03:45.230
Carbon is not an object
oriented framework.

00:03:45.230 --> 00:03:49.960
So the Carbon NIPs are more of a
template for your user interface.

00:03:50.030 --> 00:03:52.630
Also I want to point out
that in a Cocoa Nib you have

00:03:52.630 --> 00:03:53.880
more than simply objects.

00:03:53.990 --> 00:03:55.940
You also have the connection
between those objects.

00:03:56.070 --> 00:03:59.060
How those objects interact
between each other.

00:03:59.120 --> 00:04:02.580
As you can see the Cocoa Nib and
Carbon Nib are a little bit different.

00:04:02.630 --> 00:04:06.390
Also the Carbon NIPs are
XML based while the Cocoa NIPs

00:04:06.570 --> 00:04:08.910
are still using a binary format.

00:04:10.530 --> 00:04:13.470
So from a Cocoa nib,
you can create a Cocoa application

00:04:13.470 --> 00:04:15.550
either in Objective-C or in Java.

00:04:15.630 --> 00:04:18.780
Because we don't generate code,
the language you use to

00:04:18.880 --> 00:04:22.240
develop your application,
I won't say we don't care,

00:04:22.240 --> 00:04:24.140
but it's not important for us.

00:04:24.190 --> 00:04:27.000
You can also create a Java client
web object application,

00:04:27.050 --> 00:04:30.250
and there are several sessions this
week that show you how to use Interface

00:04:30.250 --> 00:04:33.370
Builder for using web objects.

00:04:34.200 --> 00:04:36.860
With the Carbon Nib you can create
a Carbon application and you can

00:04:37.010 --> 00:04:39.510
target both Mac OS X and Mac OS 9.

00:04:39.510 --> 00:04:42.910
The code that allows us to read
a Nib file and recreate your

00:04:42.980 --> 00:04:47.100
user interface is available
in both Mac OS X and Mac OS 9.

00:04:47.100 --> 00:04:52.280
I should have said 8 and 9 because
in fact we support also 8 and 6.

00:04:52.360 --> 00:04:54.070
So you can target both platforms.

00:04:54.180 --> 00:04:58.990
You have to do your development on 10
but you can target both environments.

00:05:00.000 --> 00:05:03.730
So let's start with how
do we-- the building tool,

00:05:03.760 --> 00:05:06.370
the thing you want to do first to be
able to layout your user interface.

00:05:06.450 --> 00:05:09.130
You want to put button in a window,
you want to edit your menus,

00:05:09.230 --> 00:05:10.260
and things like that.

00:05:10.260 --> 00:05:11.460
So how do you do that?

00:05:11.460 --> 00:05:14.420
We have a wide variety
of layout facilities.

00:05:14.430 --> 00:05:17.580
And the first one I want to talk
about is what we call guides.

00:05:17.580 --> 00:05:19.660
If you use the interface
builder several years ago,

00:05:19.660 --> 00:05:21.760
there was a feature called the grid.

00:05:21.780 --> 00:05:24.250
And we discovered that
it was not working very,

00:05:24.250 --> 00:05:25.020
very well.

00:05:25.030 --> 00:05:27.700
And it was not working
very well also with Aqua,

00:05:27.720 --> 00:05:31.470
because it was hard to align
object with Aqua on the grid.

00:05:31.720 --> 00:05:35.820
So we replaced the grid by
something we call guides.

00:05:35.840 --> 00:05:40.910
We think it's a much faster way
to align object-- much faster and

00:05:41.010 --> 00:05:43.220
intuitive way to align objects.

00:05:43.250 --> 00:05:44.600
And we have two types of guides.

00:05:44.600 --> 00:05:49.940
We have what we call the Aqua guides,
and what we call the user guides.

00:05:50.410 --> 00:05:53.670
So let's start with the Aqua guides.

00:05:53.830 --> 00:05:57.340
The Aqua guides implement
the Aqua layout guidelines.

00:05:57.380 --> 00:06:00.500
That means that this is a way for you
to be sure that you are putting your

00:06:00.500 --> 00:06:01.900
UI at the right place in your window.

00:06:02.310 --> 00:06:10.460
So in picture number one here,
I am putting a button-- I'm

00:06:10.460 --> 00:06:12.200
dragging a button inside the window.

00:06:12.270 --> 00:06:14.820
And as I move this button close
to the edge of the window,

00:06:14.870 --> 00:06:18.100
lines will show up and show
you what is the right distance

00:06:18.390 --> 00:06:20.000
for this button to this window.

00:06:20.000 --> 00:06:23.260
You can put it anywhere you want,
but this is we show you where it would

00:06:23.260 --> 00:06:25.600
be the best place for this button.

00:06:25.610 --> 00:06:30.420
And as you move closer to those guides,
the button will snap to those lines.

00:06:30.420 --> 00:06:32.730
In picture number two,
I'm moving a second button

00:06:32.860 --> 00:06:34.440
close to the first button.

00:06:34.460 --> 00:06:38.360
And same thing,
we tell you what is the right

00:06:38.460 --> 00:06:42.200
distance between the second
button and the first button.

00:06:43.150 --> 00:06:45.940
The user guides are similar
to the Aqua guides except that

00:06:45.940 --> 00:06:47.620
you can do whatever you want.

00:06:47.710 --> 00:06:49.390
You can put them anywhere
you want in a window.

00:06:49.770 --> 00:06:51.980
You have vertical guides,
horizontal guides.

00:06:52.090 --> 00:06:53.630
You can put as many as you want.

00:06:53.630 --> 00:06:54.760
You define them.

00:06:54.760 --> 00:06:58.470
They are saved with a nib file so
the next time you open the nib,

00:06:58.470 --> 00:07:00.460
those guides will be loaded.

00:07:01.380 --> 00:07:03.720
And something here,
when you move an object,

00:07:03.720 --> 00:07:08.380
a UI element close to those lines,
they will snap to those guides.

00:07:08.380 --> 00:07:10.310
This is useful, for example,
to create templates.

00:07:10.440 --> 00:07:13.730
You want all your different dialogues
to look the same and you want to be

00:07:13.820 --> 00:07:19.730
able to put guides there to have a
way to have your UI looking the same.

00:07:20.940 --> 00:07:27.210
Then we have what we call layout track,
which is not a Cocoa nor a Carbon notion.

00:07:27.280 --> 00:07:29.720
It is a pure IB notion.

00:07:29.750 --> 00:07:32.650
There is a difference
between Cocoa and Carbon,

00:07:32.650 --> 00:07:34.560
how they are drawing UI elements.

00:07:34.580 --> 00:07:38.430
On the Cocoa,
everything is drawn inside the frame.

00:07:38.430 --> 00:07:41.070
The shadow of the Aqua buttons, etc.

00:07:41.130 --> 00:07:43.600
are drawn inside the frame.

00:07:43.620 --> 00:07:47.860
On the Carbon side,
the shadow is sometimes drawn outside

00:07:47.870 --> 00:07:49.900
of the control bounds of the control.

00:07:49.930 --> 00:07:52.390
The Aqua guidelines
give you some numbers,

00:07:52.510 --> 00:07:56.600
saying a button should be 20 pixels high.

00:07:56.690 --> 00:08:01.240
The layout track matches
those Aqua guidelines.

00:08:01.460 --> 00:08:04.200
It is a visual bounding box of an object.

00:08:04.260 --> 00:08:06.960
You can turn them on and
off by using command L.

00:08:07.010 --> 00:08:09.870
In this image,
it draws those red borders around

00:08:09.910 --> 00:08:14.260
your object and also shows you the
baseline if your object has text.

00:08:14.320 --> 00:08:17.060
This is very handy to see where
a control hangs because of the

00:08:17.060 --> 00:08:18.900
anti-aliasing of Aqua and the shadow.

00:08:18.900 --> 00:08:23.290
So sometimes it's hard to figure
out where your control really ends.

00:08:24.360 --> 00:08:25.860
We have also distance measurement.

00:08:25.930 --> 00:08:29.690
This is a way to measure distance
between two objects or between

00:08:29.790 --> 00:08:32.260
an object and its container.

00:08:32.330 --> 00:08:35.900
So the way you do use distance
measurement is by selecting an object.

00:08:35.940 --> 00:08:39.760
And as you press the Option key,
and as you move your

00:08:40.100 --> 00:08:44.280
mouse above other objects,
we show you those lines with a distance.

00:08:44.310 --> 00:08:47.480
Very handy feature to figure
out what is the distance between

00:08:47.480 --> 00:08:50.020
two buttons or things like that.

00:08:51.570 --> 00:08:56.260
We have also a full layout
menu with plenty of options.

00:08:56.360 --> 00:09:00.360
Usually those menu items
act on a group of objects.

00:09:00.410 --> 00:09:05.110
So you can align all the edge of the left
edge of those objects or the right edges.

00:09:05.220 --> 00:09:06.040
You can make colors.

00:09:06.090 --> 00:09:07.320
You can make rows.

00:09:07.360 --> 00:09:11.000
You can change the ordering of objects,
send them to the back,

00:09:11.000 --> 00:09:12.420
move them to the front.

00:09:12.450 --> 00:09:14.900
Very similar to a program.

00:09:14.940 --> 00:09:17.950
And also you can make objects
the same size or make them fit

00:09:17.950 --> 00:09:19.940
to the content of this object.

00:09:20.010 --> 00:09:22.210
So different options there.

00:09:22.600 --> 00:09:26.720
We have an alignment panel which has
some of the same functionalities as

00:09:27.000 --> 00:09:30.810
the layout menu plus some other ones,
just a different way to

00:09:30.810 --> 00:09:32.290
present those options.

00:09:33.400 --> 00:09:36.660
We also have... Can you change the clock?

00:09:36.790 --> 00:09:38.760
It's still 75.

00:09:38.760 --> 00:09:40.010
Thank you.

00:09:41.420 --> 00:09:44.700
I won't stay here all day long.

00:09:44.740 --> 00:09:47.800
We also have a test mode,
which is not really a layout facility,

00:09:47.800 --> 00:09:52.130
but it's a way to see your application
like it would be at runtime.

00:09:52.140 --> 00:09:57.370
I'm sure you've all seen the
demonstration during the keynote Monday,

00:09:57.400 --> 00:10:02.480
where we were able to build a full
iMovie-like application and run it

00:10:02.480 --> 00:10:06.240
inside Interface Builder without
really using PBE or compiling anything.

00:10:06.240 --> 00:10:08.830
Just bringing your code inside
Interface Builder and be able

00:10:08.930 --> 00:10:12.400
to create a full application and
test it within Interface Builder.

00:10:12.480 --> 00:10:18.340
Test mode will work for
both Cocoa and Carbon.

00:10:18.400 --> 00:10:23.340
Containers.

00:10:25.840 --> 00:10:32.480
So Interface Builder enforce
the notion of a view hierarchy.

00:10:32.910 --> 00:10:36.940
Cocoa has a notion of a view,
the building block of the user interface.

00:10:36.990 --> 00:10:41.600
And view, as a super view,
we can have sub views.

00:10:41.630 --> 00:10:45.640
In the original toolbox, Mac toolbox,
there was no notion of embedding

00:10:45.760 --> 00:10:48.340
except a button was inside the window,
but that was it,

00:10:48.340 --> 00:10:49.700
there was no notion of embedding.

00:10:49.730 --> 00:10:54.150
With Carbon now, we have also embedding,
an object can be embedded

00:10:54.150 --> 00:10:55.060
into a group box.

00:10:55.090 --> 00:10:58.400
And Interface Builder maintains
this hierarchy of UI elements.

00:10:58.490 --> 00:11:02.280
So if you have a group box and you want
to put a button inside this group box,

00:11:02.310 --> 00:11:06.820
you have to put it really inside the box,
not just on top of the box.

00:11:06.850 --> 00:11:09.140
And to do that,
right now you have to double

00:11:09.140 --> 00:11:11.170
click on the group box,
and you get this ring around

00:11:11.170 --> 00:11:14.460
the group box that says,
the editor on this group box is open.

00:11:14.460 --> 00:11:16.820
And now you can drag the object inside.

00:11:16.870 --> 00:11:18.970
And as you move the box,
everything inside the box

00:11:19.080 --> 00:11:20.940
will move along with your box.

00:11:20.970 --> 00:11:24.320
Also, we do clipping correctly
and everything like that.

00:11:24.320 --> 00:11:27.390
So this is a very important
notion if you are using tab view,

00:11:27.390 --> 00:11:30.960
group box, you need to open the editor
before you can drag something

00:11:31.320 --> 00:11:33.560
inside those containers.

00:11:35.290 --> 00:11:37.540
So I have to bring Scott Herz on stage.

00:11:37.570 --> 00:11:41.350
He's going to show you some
of the layout facilities.

00:11:42.010 --> 00:11:42.130
OK.

00:11:42.370 --> 00:11:44.090
My on.

00:11:47.270 --> 00:11:50.290
So the first thing I'm going to do is
I'm going to give just a tiny little tour

00:11:50.370 --> 00:11:55.780
of IB since I have a feeling a few of
you haven't even opened the application.

00:11:55.900 --> 00:11:58.930
This is our starting point dialogue.

00:11:59.100 --> 00:12:02.140
You can see that you can make
Cocoa applications and you can

00:12:02.230 --> 00:12:04.300
also make Carbon applications.

00:12:04.340 --> 00:12:06.200
I'm going to go ahead
and make a Cocoa one,

00:12:06.260 --> 00:12:11.010
although everything I'm going to
show applies to Carbon as well.

00:12:11.110 --> 00:12:13.240
This is our design window.

00:12:13.330 --> 00:12:18.020
You can drag widgets from our
palette over here onto it.

00:12:18.070 --> 00:12:21.240
And then you can change their attributes,
their size, their connections,

00:12:21.260 --> 00:12:26.420
all kinds of things using this inspector
palette over here or info palette,

00:12:26.490 --> 00:12:27.860
sorry.

00:12:28.580 --> 00:12:32.310
We have a document window here which
contains our top level objects.

00:12:32.440 --> 00:12:34.390
We have a window and a main menu.

00:12:34.470 --> 00:12:37.630
And then there's also the files
owner and first responder for

00:12:37.700 --> 00:12:39.800
Cocoa which we'll talk about later.

00:12:39.970 --> 00:12:43.780
So now let's talk a little bit about some
of the new layout facilities we have.

00:12:43.780 --> 00:12:46.900
I'm going to go over it pretty quick
since Henri covered it fairly well.

00:12:46.900 --> 00:12:51.250
I'm going to drag a button out and
these little blue lines appear and

00:12:51.250 --> 00:12:55.940
it'll snap to where the human interface
guidelines say that button should,

00:12:55.970 --> 00:12:56.900
where that button should be.

00:12:56.970 --> 00:13:00.360
I don't know if anybody saw,
there was an AquaTalk earlier

00:13:00.360 --> 00:13:01.900
or if it's going to be.

00:13:01.900 --> 00:13:04.320
There's this great slide where there's
this dialogue all laid out and there's

00:13:04.320 --> 00:13:07.900
something like 40 little numbers of
where everything should be lined up.

00:13:07.900 --> 00:13:12.470
And when they came to us with
those guidelines we were pretty

00:13:12.520 --> 00:13:14.900
spooked by the whole thing.

00:13:14.900 --> 00:13:18.290
So what we did is we compiled all those
numbers into the application so it knows,

00:13:18.290 --> 00:13:20.590
for example,
and I'm going to show the measurement

00:13:20.590 --> 00:13:23.710
lines by holding the option key down,
that a button should be 20 pixels from

00:13:23.830 --> 00:13:25.900
the right and 20 pixels from the bottom.

00:13:25.900 --> 00:13:29.890
So now I'll drag another one out and
just like Henri showed in his slides,

00:13:29.890 --> 00:13:32.320
it'll snap and it knows that
it's 12 pixels from here and then

00:13:32.320 --> 00:13:33.890
also 20 pixels from the bottom.

00:13:33.900 --> 00:13:35.860
An interesting note with
the measurement lines,

00:13:35.900 --> 00:13:37.110
if I hold the option key down,
over the selected button,

00:13:37.120 --> 00:13:38.900
it shows which guides are selected.

00:13:38.900 --> 00:13:40.900
So that's the first thing
that I wanted to show you.

00:13:40.900 --> 00:13:41.440
And then the second thing
that I wanted to show you is

00:13:41.440 --> 00:13:42.040
that the measurement lines,
if I hold the option key down

00:13:42.100 --> 00:13:42.900
over the selected button,
it shows which guides are selected.

00:13:43.990 --> 00:13:45.800
Apply to that widget.

00:13:45.800 --> 00:13:46.810
So we do more than that.

00:13:46.900 --> 00:13:49.890
We know how to do like tabs.

00:13:49.990 --> 00:13:52.940
Like for example,
tabs can be all the way to the left

00:13:52.940 --> 00:13:54.710
or they can be over a little bit.

00:13:54.850 --> 00:13:56.720
We'll drag that down here.

00:13:56.740 --> 00:13:59.160
They know how far they
should be above a button,

00:13:59.160 --> 00:14:01.830
which is completely different than
how far a button should be from,

00:14:01.910 --> 00:14:03.520
say, a pop-up button.

00:14:03.730 --> 00:14:05.540
I'm going to double click
on this to open the editor.

00:14:05.540 --> 00:14:09.320
And Henri mentioned that you
have to do that for containment.

00:14:09.350 --> 00:14:11.930
I'm happy to say that
in a future version,

00:14:11.930 --> 00:14:14.820
this nonsense is all gone and you
won't have to worry about that.

00:14:14.820 --> 00:14:18.990
And it'll work as it
should have 11 years ago.

00:14:20.410 --> 00:14:21.960
So I'll drag this out.

00:14:22.050 --> 00:14:25.680
One thing that we do is indention.

00:14:25.770 --> 00:14:28.290
This is really great for
preferences dialogs and things

00:14:28.300 --> 00:14:31.890
like that where you have a header,
then you have a lot of check boxes below.

00:14:31.970 --> 00:14:33.440
I'll drag out a radio button group.

00:14:33.490 --> 00:14:35.120
And as you can see,
it knows that it should

00:14:35.120 --> 00:14:38.580
automatically align down there.

00:14:38.620 --> 00:14:40.170
I'll switch the tabs.

00:14:40.210 --> 00:14:42.370
I'm going to bring out a button.

00:14:43.400 --> 00:14:46.790
And I'll make a matrix of buttons
by holding down the Option key,

00:14:46.870 --> 00:14:48.950
something we hear asked a lot.

00:14:49.020 --> 00:14:49.610
How do I make a matrix?

00:14:49.740 --> 00:14:52.090
Well, you hold the Option key
down and you just grow it.

00:14:52.190 --> 00:14:57.500
I'm going to turn on the layout
rectangles and you can see here if

00:14:57.500 --> 00:14:57.500
I make this a little bit longer,

00:14:57.700 --> 00:16:06.200
[Transcript missing]

00:16:11.600 --> 00:16:14.660
So we've seen how to layout your user
interface and all the facilities we

00:16:14.660 --> 00:16:17.040
have in Interface Builder to do that.

00:16:17.090 --> 00:16:20.320
Now let's talk about how do you connect
your user interface to your code.

00:16:20.520 --> 00:16:23.390
You have a button,
the user clicks on the button,

00:16:23.400 --> 00:16:25.700
you want something to happen.

00:16:26.490 --> 00:16:28.400
So,
in the layout facilities we didn't make

00:16:28.460 --> 00:16:30.520
any distinction between Cocoa and Carbon.

00:16:30.520 --> 00:16:31.660
They work the same way.

00:16:31.660 --> 00:16:34.430
There is no difference as far,
except for the UI elements you

00:16:34.540 --> 00:16:36.160
have available on the pallet.

00:16:36.190 --> 00:16:39.110
There are no differences between
Cocoa and Carbon as far as

00:16:39.110 --> 00:16:40.730
layout in Interface Builder.

00:16:40.730 --> 00:16:41.900
The same features.

00:16:41.920 --> 00:16:45.230
When you come to how to connect
your user interface to your code,

00:16:45.230 --> 00:16:46.200
this is different.

00:16:46.660 --> 00:16:48.860
Carbon and Cocoa are
different frameworks.

00:16:48.910 --> 00:16:53.310
Carbon is a CPI procedural framework.

00:16:53.660 --> 00:16:58.140
Whether Cocoa is an object oriented
framework and relies heavily on

00:16:58.140 --> 00:17:00.350
the dynamic feature of Objective C.

00:17:00.350 --> 00:17:03.000
So, totally different framework.

00:17:03.080 --> 00:17:04.990
Let's start with Carbon.

00:17:05.150 --> 00:17:07.480
The thing you have to understand
is that IB does not change the

00:17:07.560 --> 00:17:08.730
programming model of Carbon.

00:17:08.790 --> 00:17:10.550
If you know how to use Carbon today,
you can use Interface

00:17:10.550 --> 00:17:11.740
Builder immediately.

00:17:11.780 --> 00:17:15.220
We don't invent a new
way to program Carbon.

00:17:15.270 --> 00:17:18.290
This is just a better way to
lay out your user interface and

00:17:18.370 --> 00:17:20.240
to package your user interface.

00:17:20.290 --> 00:17:24.000
It makes it easy to use
the Carbon event model.

00:17:24.210 --> 00:17:25.840
We have some features in
IB that make it easier for you

00:17:25.840 --> 00:17:27.830
to use the Carbon event model.

00:17:28.440 --> 00:17:32.060
But you don't have to forget
the Carbon API is the same API.

00:17:32.120 --> 00:17:34.300
There are two things you may
want to do as a Carbon developer.

00:17:34.300 --> 00:17:38.020
You may want to get a
reference on the UI element.

00:17:38.080 --> 00:17:42.120
And you want maybe also to get a
pointer on the button or a text field.

00:17:42.180 --> 00:17:45.800
And you want also to
react to some user action.

00:17:46.670 --> 00:17:50.600
So let's first talk about getting
a reference to a UI element.

00:17:50.680 --> 00:17:51.980
So what do you do in Interface Builder?

00:17:52.010 --> 00:17:53.620
You build your user interface.

00:17:53.650 --> 00:17:56.160
You bring one of those info window.

00:17:56.200 --> 00:18:00.950
And you can just assign control
ID to controls or menu IDs to menu

00:18:01.630 --> 00:18:03.380
like you would do anywhere else.

00:18:03.410 --> 00:18:06.090
And in your code,
call the appropriate API,

00:18:06.090 --> 00:18:09.650
the appropriate Carbon API,
to get a reference to your control

00:18:09.650 --> 00:18:14.690
by calling getControlById or to a
menu by calling getMenuReference,

00:18:14.690 --> 00:18:16.380
getMenuRef, or et cetera.

00:18:16.540 --> 00:18:19.490
So nothing very unusual.

00:18:20.060 --> 00:18:22.510
To react to a user action,
Carbon has this notion

00:18:22.620 --> 00:18:23.670
of a command ID now.

00:18:23.700 --> 00:18:26.140
You can assign a command
ID to some UI elements,

00:18:26.250 --> 00:18:29.810
or you can assign a command ID to
a menu item or to a control.

00:18:29.810 --> 00:18:32.630
And in your code,
implement the event handler

00:18:32.800 --> 00:18:34.610
to process those commands.

00:18:34.700 --> 00:18:37.960
There is a talk right after this
one about the event manager.

00:18:37.990 --> 00:18:40.400
And if you want to learn
more about the event manager,

00:18:40.400 --> 00:18:41.240
stick around.

00:18:41.300 --> 00:18:45.260
So as you see, nothing very unusual,
just a new way to lay out your

00:18:45.260 --> 00:18:49.120
user interface and set up your
user interface so you can connect

00:18:49.200 --> 00:18:51.610
your user interface to your code.

00:18:51.870 --> 00:18:55.500
So I'll bring back Scott on stage
to show you some of those features.

00:18:55.820 --> 00:18:57.490
Did you miss me?

00:18:58.500 --> 00:18:58.900
Good.

00:18:58.900 --> 00:19:00.900
OK.

00:19:00.960 --> 00:19:03.880
So I'm going to go back to
our starting point dialogue.

00:19:03.890 --> 00:19:08.570
And this time I'm going to
create a Carbon application.

00:19:08.820 --> 00:19:12.040
I'm not going to show you so much,
not really going to show you any code.

00:19:12.040 --> 00:19:15.560
We'll let the Carbon folks
do that in the next session.

00:19:15.560 --> 00:19:21.720
But I want to give you sort of a tour
of when they talk about the control

00:19:21.770 --> 00:19:25.110
ID and where to put your HI commands,
I want to show you where those

00:19:25.110 --> 00:19:25.110
are in Interface Builder.

00:19:25.680 --> 00:19:26.600
Once again, we have the same.

00:19:26.600 --> 00:19:27.470
We have a design window.

00:19:27.480 --> 00:19:28.760
We have a palette.

00:19:28.760 --> 00:19:33.400
All of your favorite Carbon widgets
are represented here.

00:19:35.060 --> 00:19:36.760
So I'm going to drag out a button.

00:19:36.760 --> 00:19:38.830
And as you can see,
the guides work in Carbon just

00:19:38.880 --> 00:19:40.840
as well as they work in Cocoa.

00:19:40.840 --> 00:19:42.980
I'm going to bring up the inspector here.

00:19:42.980 --> 00:19:46.340
And I'm going to switch
to the Control pane.

00:19:46.340 --> 00:19:49.030
And here's the signature that
you would use by something

00:19:49.260 --> 00:19:50.380
like in Get Control by ID.

00:19:50.380 --> 00:19:52.180
You fill out the little struct.

00:19:52.180 --> 00:19:53.320
You're going to type something in there.

00:19:53.320 --> 00:19:54.020
And you're going to remember it.

00:19:54.020 --> 00:19:55.820
And you're going to
put it in that struct.

00:19:55.820 --> 00:19:57.960
And here's the HI command.

00:19:58.050 --> 00:20:01.020
So you've seen us do in
demos past where we put quit.

00:20:01.020 --> 00:20:04.240
And it's automatically been sent to
the nearest handler that listens to it.

00:20:04.260 --> 00:20:07.590
So what you would probably do is
you would put some sort of command

00:20:08.010 --> 00:20:10.200
of your own working in there.

00:20:10.200 --> 00:20:13.860
And you'd listen to it in a window
controller or something like that.

00:20:13.860 --> 00:20:15.560
That's all I have to show for that one.

00:20:15.560 --> 00:20:17.110
It's a quickie.

00:20:20.450 --> 00:20:27.960
So, a quick demo on Carbon.

00:20:27.960 --> 00:20:31.930
As I said, there is a talk right here,
right after this talk about

00:20:32.070 --> 00:20:35.290
Carbon Event Manager and you'll
be able to learn more about how

00:20:35.450 --> 00:20:37.400
to use the Carbon Event Manager.

00:20:37.960 --> 00:20:39.590
Cocoa now.

00:20:40.810 --> 00:20:43.790
There are four important
Cocoa ID concepts that you

00:20:43.790 --> 00:20:47.370
need to understand to be
able to use IB and Cocoa.

00:20:47.970 --> 00:20:51.600
Those four notions are
the notion of outlet,

00:20:51.620 --> 00:20:55.440
target action, file donor,
and first responder.

00:20:55.510 --> 00:20:57.860
Those are very important to understand
because you have to use them.

00:20:57.860 --> 00:21:00.660
You can't just say, "Oh,
I'm going to skip file donor.

00:21:00.660 --> 00:21:03.930
I don't want to know about this one."
You have to understand all of them.

00:21:04.540 --> 00:21:05.350
So let's start.

00:21:05.580 --> 00:21:07.100
So an outlet.

00:21:07.480 --> 00:21:10.610
An outlet is an instance variable
that points to another object.

00:21:10.740 --> 00:21:12.410
It's just an instance variable.

00:21:12.590 --> 00:21:15.400
Just another fancy word
for an instance variable.

00:21:15.400 --> 00:21:18.810
To point to another object,
that means that an outlet

00:21:18.810 --> 00:21:20.630
cannot be an int or a float.

00:21:20.630 --> 00:21:23.250
It has to be a pointer to another object.

00:21:23.400 --> 00:21:25.360
Why do we call them an outlet?

00:21:25.450 --> 00:21:28.710
Because this is a special
instance variable that you are

00:21:28.900 --> 00:21:31.400
not setting this value by code,
by writing code.

00:21:31.420 --> 00:21:33.810
You're setting this value
of this instance variable

00:21:34.130 --> 00:21:35.630
within Interface Builder.

00:21:35.650 --> 00:21:39.770
By making a connection between
an instance variable of a

00:21:39.770 --> 00:21:46.400
class and some other object,
you can set the value of this outlet.

00:21:46.510 --> 00:21:49.170
So here I have a class foo that
has two instance variables,

00:21:49.170 --> 00:21:50.150
a window and a button.

00:21:50.560 --> 00:21:54.110
And I can, in Interface Builder,
set the value of this object

00:21:54.110 --> 00:21:57.580
within Interface Builder
without writing any code.

00:21:58.620 --> 00:22:02.940
So at one time,
this object will have those values there.

00:22:02.990 --> 00:22:04.860
Target and action.

00:22:04.900 --> 00:22:09.920
Target is an object responsible
for responding to a user's action.

00:22:09.970 --> 00:22:11.120
Just an object.

00:22:11.160 --> 00:22:16.120
The action is a method in this object
that specifies what the object is to do.

00:22:16.190 --> 00:22:20.130
So a lot of objects in the app
kit have two instance variables

00:22:20.240 --> 00:22:21.500
called target and action.

00:22:21.510 --> 00:22:25.740
NSControl and NSMenuItem have
those kind of instance variables.

00:22:25.770 --> 00:22:27.840
Those two instance
variables are like outlets.

00:22:27.850 --> 00:22:29.870
You can set them using Interface Builder.

00:22:30.050 --> 00:22:32.340
The first one,
the target is a pointer to an object.

00:22:32.340 --> 00:22:36.440
You say, when I press this button,
I want this object to do something.

00:22:36.460 --> 00:22:39.220
And the action is,
I want this object to do something.

00:22:39.220 --> 00:22:42.060
I want to execute this piece of code.

00:22:42.120 --> 00:22:44.620
So in this case,
the target is a pointer to this object.

00:22:44.660 --> 00:22:48.070
And the action is a method within
this object that's going to do

00:22:48.080 --> 00:22:50.500
something when you press the button.

00:22:50.510 --> 00:22:53.500
So the actions have a specific pattern.

00:22:53.540 --> 00:22:57.180
They do something with one parameter,
which is a sender.

00:22:57.180 --> 00:23:02.170
In this case,
the sender will be the button itself.

00:23:04.450 --> 00:23:06.630
So as I say,
what is the role of Interface Builder

00:23:06.630 --> 00:23:08.600
regarding outlets and target action?

00:23:08.620 --> 00:23:13.460
It's to graphically connect those outlets
and those target actions together.

00:23:13.490 --> 00:23:18.160
All those connections are saved in a
Nib file along with all your objects.

00:23:18.210 --> 00:23:21.640
And at runtime, all those connections
are put back together,

00:23:21.640 --> 00:23:25.040
like if you were doing it by program,
except you don't do any programming here.

00:23:25.090 --> 00:23:26.660
Outlets are set.

00:23:26.730 --> 00:23:30.330
Control, menu item are ready to
trigger the appropriated code.

00:23:30.390 --> 00:23:34.990
This is what outlet action
and target actions are.

00:23:36.080 --> 00:23:41.950
Now, FileZoner and First Responder,
the two big ones.

00:23:42.210 --> 00:23:45.940
If you look at a document
window of Interface Builder,

00:23:45.940 --> 00:23:47.670
you see all those icons.

00:23:48.260 --> 00:23:49.880
And there are two
important icons in there,

00:23:49.960 --> 00:23:52.420
which are the file owner
and the first responder.

00:23:52.680 --> 00:23:56.390
And their name is grayed out because you
can't change the name of those objects.

00:23:56.590 --> 00:23:58.660
But those are not real objects in a Nib.

00:23:58.860 --> 00:24:00.130
They are just proxy objects.

00:24:00.130 --> 00:24:04.840
They are standing from some other
object that are outside of the Nib file.

00:24:04.950 --> 00:24:07.770
Those objects are not instantiated
with all the other objects

00:24:07.770 --> 00:24:09.200
that you have in your Nib file.

00:24:09.290 --> 00:24:12.000
In a Nib file you have a window,
you have a menu, etc.

00:24:12.040 --> 00:24:14.640
Those objects are coming back
to life when you load the Nib.

00:24:14.710 --> 00:24:15.960
But those two objects are not.

00:24:15.960 --> 00:24:20.240
They already exist before you
started to load the Nib file.

00:24:20.370 --> 00:24:22.670
So they are just proxy objects.

00:24:23.340 --> 00:24:26.240
The file owner, as I said,
is an existing object.

00:24:26.320 --> 00:24:27.700
It's external to the Nib file.

00:24:27.700 --> 00:24:31.110
There is already an instance of this
object somewhere in your application

00:24:31.410 --> 00:24:33.010
even before the Nib was loaded.

00:24:33.470 --> 00:24:39.200
And you're passing this object to the
call that allows us to load the Nib file.

00:24:39.200 --> 00:24:42.200
In this case we are using loadNibName,
passing the name of the Nib

00:24:42.200 --> 00:24:44.200
and passing this file's owner.

00:24:44.200 --> 00:24:47.190
What's the role of this file owner?

00:24:47.290 --> 00:24:50.490
Its role is to channel messages
between objects that are unarchived

00:24:50.490 --> 00:24:54.200
from the Nib and objects that
are outside your application.

00:24:54.200 --> 00:24:57.650
Imagine your Nib has a little
bubble of objects and if there was

00:24:57.740 --> 00:25:01.200
no file owner there would be no way
to reach what's inside this bubble.

00:25:01.200 --> 00:25:06.500
You need some way to reach inside the
Nib file when the Nib file is loaded

00:25:06.510 --> 00:25:09.270
and this object is the file owner.

00:25:11.920 --> 00:25:14.070
First responder is also a proxy object.

00:25:14.150 --> 00:25:17.700
It's not instantiated in your Nib file.

00:25:17.700 --> 00:25:21.850
The first object,
the first responder is more of a status

00:25:21.850 --> 00:25:24.690
given to an object than a real object.

00:25:24.690 --> 00:25:28.490
The definition is that it's the
first object in the responder

00:25:28.490 --> 00:25:30.740
chain to respond to a message.

00:25:31.330 --> 00:25:34.080
As I say,
the files owner was a real object.

00:25:34.080 --> 00:25:37.750
The first responder is what is
different object depending on the

00:25:37.830 --> 00:25:40.400
situation of your application,
where your application is,

00:25:40.580 --> 00:25:42.440
what you have been doing
with your application.

00:25:42.490 --> 00:25:47.450
So let's also explain what
a responder chain is first.

00:25:47.580 --> 00:25:48.500
confused here.

00:25:48.590 --> 00:25:50.970
So let's explain first what
the responder chain is.

00:25:51.060 --> 00:25:54.940
So I have a responder chain here
which is not completely right.

00:25:54.940 --> 00:25:56.780
It's just for an example.

00:25:56.780 --> 00:25:59.880
It's a lot of missing objects
in this responder chain,

00:26:00.060 --> 00:26:02.180
but it's just to show
you how things work.

00:26:02.230 --> 00:26:03.470
So I have an application.

00:26:03.470 --> 00:26:07.800
I have this application has one window,
and inside this window I have a control,

00:26:07.860 --> 00:26:10.380
which here is a text field,
and the user is typing

00:26:10.460 --> 00:26:11.400
in this text field.

00:26:11.560 --> 00:26:15.720
As the user types in the text field,
he pulls down the menu

00:26:15.810 --> 00:26:17.820
and shows hide window.

00:26:17.900 --> 00:26:21.880
So the hide window menu item was
connected to the first responder.

00:26:21.880 --> 00:26:25.530
So the hide window message is sent,
and it goes to the object

00:26:25.960 --> 00:26:29.350
that currently has the focus,
which is the text field.

00:26:29.720 --> 00:26:32.870
The text field knows
nothing about hide window,

00:26:32.930 --> 00:26:36.020
so it says--it passes
to the next responder,

00:26:36.130 --> 00:26:37.100
which is the window.

00:26:37.160 --> 00:26:39.910
And the window says, yes,
I know how to hide my window,

00:26:40.100 --> 00:26:40.890
so hide the window.

00:26:41.950 --> 00:26:45.860
So by connecting to the first responder,
you're connecting to whatever object

00:26:46.310 --> 00:26:50.530
that are currently in the responder
chain that can answer this message.

00:26:50.970 --> 00:26:52.800
This is a very useful concept.

00:26:52.910 --> 00:26:56.080
The first responder is useful
to connect an action to an

00:26:56.080 --> 00:26:58.530
unspecified instance of a target.

00:26:58.530 --> 00:27:01.270
You have 10 text fields in a window.

00:27:01.510 --> 00:27:04.010
You don't want to connect your cut, copy,
paste menu item to every

00:27:04.010 --> 00:27:05.300
text field in your window.

00:27:05.480 --> 00:27:11.240
You just want to say,
connect it to whatever text

00:27:11.240 --> 00:27:13.000
field has currently the focus.

00:27:13.000 --> 00:27:13.000
And you connect it to
the first responder.

00:27:13.560 --> 00:27:18.640
You can also use the first responder
to connect an object to an object

00:27:18.650 --> 00:27:23.590
outside of your Nib file as long as
this object is inside the target chain.

00:27:23.940 --> 00:27:27.170
We do use that for example for
NS application which is never in a Nib,

00:27:27.180 --> 00:27:30.140
but you may want sometimes to
connect a menu item to some

00:27:30.140 --> 00:27:31.740
action in your application.

00:27:31.810 --> 00:27:35.600
A good way to do that might be to
use the first responder to connect

00:27:35.600 --> 00:27:40.350
your menu item to the first responder
and the application will get this

00:27:40.370 --> 00:27:42.680
message if nobody else is getting it.

00:27:44.030 --> 00:27:48.740
So now I bring Scott Herz back
on stage to the big demo.

00:27:49.460 --> 00:27:50.680
This one's hard.

00:27:55.690 --> 00:28:00.410
So the first thing I'm going to do is
show you the application that we're

00:28:00.420 --> 00:28:05.250
going to build to demonstrate how to
add an action to first responder and

00:28:05.250 --> 00:28:08.800
how to connect your interface to it.

00:28:09.160 --> 00:28:10.880
We're going to do it with
this little application here.

00:28:10.880 --> 00:28:13.730
If you look on the window on the right,
it's the front most window,

00:28:13.890 --> 00:28:16.940
which means that you could
consider it to be the lowest

00:28:16.980 --> 00:28:18.840
object in the responder chain.

00:28:18.940 --> 00:28:21.710
So when I say toggle picture--

00:28:22.280 --> 00:28:24.600
There's a message that we're going to,
well there's an action rather,

00:28:24.600 --> 00:28:28.590
that we're going to
add to first responder.

00:28:29.300 --> 00:28:43.100
[Transcript missing]

00:28:44.050 --> 00:28:46.160
There's a little bit of
code that you need to see.

00:28:46.260 --> 00:28:49.900
This is our NS application subclass.

00:28:50.210 --> 00:28:52.280
All it's going to do is it's
going to create two of our

00:28:52.450 --> 00:28:54.160
toggle controller classes.

00:28:54.210 --> 00:28:57.700
And those toggle controller classes
are what create the window and handle

00:28:57.700 --> 00:29:00.260
messages that come to in front of it.

00:29:00.350 --> 00:29:03.420
So this is the header for
the toggle controller.

00:29:03.500 --> 00:29:05.880
There's two things
I want you to see here.

00:29:06.270 --> 00:29:11.130
We declare an outlet to
what's going to be an NS image

00:29:11.150 --> 00:29:14.000
view called Picture Outlet.

00:29:15.370 --> 00:29:21.110
This header file also implements our
action called toggle picture action,

00:29:21.110 --> 00:29:22.460
or toggle picture.

00:29:22.460 --> 00:29:27.010
We have these two little blurbs
here called IB outlet and IB action

00:29:27.010 --> 00:29:29.210
which actually sort of null out.

00:29:29.270 --> 00:29:35.600
They don't really do anything,
but what that allows IB to do is look

00:29:35.600 --> 00:29:38.010
through your header and parse those,
these outlets and actions in.

00:29:38.180 --> 00:29:42.940
We have two nibs, we have a main menu,
and we have a toggle window.

00:29:42.990 --> 00:29:45.520
So let's first take a look at our window.

00:29:47.410 --> 00:29:48.190
You saw this earlier.

00:29:48.200 --> 00:29:52.190
There's no picture in it right now
because the code actually puts that in.

00:29:52.290 --> 00:29:56.650
What we want to do is we want
to hook this window up to

00:29:56.820 --> 00:29:59.410
our toggle controller code.

00:29:59.480 --> 00:30:01.060
Before we can do that,
we have to tell the nib

00:30:01.060 --> 00:30:02.400
what is a toggle controller.

00:30:02.400 --> 00:30:08.650
So we go to the classes pane here.

00:30:08.650 --> 00:30:10.050
We go to the classes menu
and we say read files.

00:30:10.900 --> 00:30:12.960
And what we can do is we
can find our header file.

00:30:13.040 --> 00:30:15.610
So here it is, toggle controller.

00:30:15.820 --> 00:30:17.580
And we can parse it.

00:30:17.980 --> 00:30:21.430
And if you look down here, it's realized,
oh, here's toggle controller.

00:30:21.650 --> 00:30:23.480
Not only that,
but it's an NSWindowController.

00:30:23.560 --> 00:30:27.690
It's already figured out from the
header what type of subclass it is.

00:30:27.800 --> 00:30:30.440
I'm going to click the
little actions dealie here.

00:30:30.490 --> 00:30:32.970
And we can see that it's
found our picture outlet.

00:30:33.020 --> 00:30:37.610
It's also found the window outlet
that comes from NSWindowController.

00:30:37.860 --> 00:30:40.620
And it's also found our toggle
picture action and then another

00:30:40.620 --> 00:30:44.200
action show window that's also
implemented by NSWindowController.

00:30:44.280 --> 00:30:47.440
So we've told the nib, hey,
here's what a toggle controller is.

00:30:47.530 --> 00:30:50.440
So now we need to tell the nib
that you're actually going to be

00:30:50.440 --> 00:30:53.240
loaded by a toggle controller.

00:30:53.420 --> 00:30:55.960
Your files owner is a toggle controller.

00:30:56.020 --> 00:30:58.370
Right now it's just, it doesn't know,
so it's just set to NSObject.

00:30:58.460 --> 00:31:02.350
If I scroll down,
we can actually click the toggle

00:31:02.350 --> 00:31:06.980
controller here in the files owner
attributes pane on the inspector.

00:31:07.230 --> 00:31:10.780
So now that we've told the Nib, hey,
FileZoner is a toggle controller,

00:31:10.780 --> 00:31:12.920
we can go about making connections to it.

00:31:13.350 --> 00:31:17.160
So I hold the Control key down
and I drag from Files Owner.

00:31:17.310 --> 00:31:19.740
And the first one I'm going
to do is our picture control.

00:31:19.790 --> 00:31:21.900
And you see how it highlights?

00:31:22.600 --> 00:31:25.740
It's going to bring up the
connections inspector and here we go,

00:31:25.740 --> 00:31:26.760
here's the picture outlet.

00:31:26.760 --> 00:31:29.340
So I'll click that and
I'll click connect.

00:31:30.210 --> 00:31:31.370
Now we need to tell,
now that we've put the

00:31:31.430 --> 00:31:33.140
picture control up,
we've done sort of all the

00:31:33.250 --> 00:31:35.470
connections for our toggle controller,
we need to go about and do the

00:31:35.490 --> 00:31:37.220
ones that NSWindowController wants.

00:31:37.340 --> 00:31:40.620
Namely, it wants to know what window
it's supposed to be controlling.

00:31:40.700 --> 00:31:43.440
So I'll hold the control key down again,
and this time I'm going to drag

00:31:43.440 --> 00:31:45.860
from FileZoner to the window.

00:31:46.010 --> 00:31:49.740
So if you look right here
in the connection inspector,

00:31:49.740 --> 00:31:52.300
click on window, click connect.

00:31:52.930 --> 00:31:55.510
So we've hooked all of our outlets up,
but there's one thing

00:31:55.510 --> 00:31:56.180
we haven't done yet.

00:31:56.180 --> 00:32:00.260
We haven't inserted our toggle
controller into the responder chain.

00:32:00.300 --> 00:32:03.160
So remember how Henri showed you
the sort of the simplistic view

00:32:03.160 --> 00:32:04.680
of what the responder chain is?

00:32:04.680 --> 00:32:06.880
Well, there's one more little thing.

00:32:06.880 --> 00:32:11.540
If NSWindow can't respond to your action,
it'll try what's called its delegate.

00:32:11.540 --> 00:32:13.400
And that's how we're going to
get into the responder chain.

00:32:13.400 --> 00:32:18.020
We're going to set our toggle controller
to be the delegate of those windows.

00:32:18.020 --> 00:32:21.780
And how I do that is by holding
the control key down again,

00:32:21.800 --> 00:32:25.360
go from window to files owner,
and I can set its delegate.

00:32:25.360 --> 00:32:27.130
And I hit connect.

00:32:28.160 --> 00:32:28.640
So that's done.

00:32:28.640 --> 00:32:30.520
I'm going to close that.

00:32:30.530 --> 00:32:32.820
Now let's take a look
at our main menu nib.

00:32:32.850 --> 00:32:34.560
I'll open this up.

00:32:35.190 --> 00:32:37.650
So here's our main menu editor.

00:32:37.730 --> 00:32:40.980
Here's our toggle picture command.

00:32:41.190 --> 00:32:42.250
We want to make an action.

00:32:42.260 --> 00:32:45.600
We want to drag an action from our
toggle picture to the first responder.

00:32:45.740 --> 00:32:48.000
But out of the box,
Interface Builder doesn't know anything

00:32:48.010 --> 00:32:51.100
about that action toggle picture,
so we have to tell it again.

00:32:51.100 --> 00:32:54.100
So what we do is we go
to the classes pane,

00:32:54.230 --> 00:32:57.100
and we go all the way to the
top where first responder lives.

00:32:57.100 --> 00:33:00.090
Then we go up to the classes menu
and I'm going to say add action.

00:33:00.090 --> 00:33:04.090
And I'm going to type toggle picture.

00:33:04.690 --> 00:33:07.930
All these other ones that are in gray
are sort of convenience ones that

00:33:07.930 --> 00:33:11.210
we know that a lot of other stuff
implements and so we put those there for

00:33:11.210 --> 00:33:12.680
you just sort of for your convenience.

00:33:12.680 --> 00:33:15.600
But we have to add this one because
like I said 11 years ago we had

00:33:15.600 --> 00:33:17.830
no idea somebody was going to make
something called toggle picture.

00:33:17.830 --> 00:33:19.600
So we have to do it.

00:33:19.700 --> 00:33:23.820
Now that we've added that to first
responder we can drag a connection.

00:33:23.820 --> 00:33:28.600
So once again with the control key,
drag it down to our first responder.

00:33:28.600 --> 00:33:36.510
So we want to set the menu items
target to be toggle picture.

00:33:36.520 --> 00:33:38.510
So I hit connect.

00:33:40.060 --> 00:33:44.600
And if I've remembered my script,
that's all we have to do.

00:33:44.670 --> 00:33:47.100
So I'm going to go here
and I'm going to build it.

00:33:48.210 --> 00:33:52.120
I'll probably kill this one
just to prove that I'm doing it.

00:33:52.130 --> 00:33:53.510
And we'll run it.

00:33:55.400 --> 00:33:58.460
So here's our front most window.

00:33:58.520 --> 00:34:01.690
And oops, I forgot to hook something up.

00:34:01.710 --> 00:34:03.770
You put an uppercase T.

00:34:03.850 --> 00:34:04.250
What's that?

00:34:04.420 --> 00:34:05.860
You put uppercase T.

00:34:05.920 --> 00:34:06.360
Huh?

00:34:06.360 --> 00:34:10.150
You type toggle picture with
uppercase T in the name.

00:34:10.310 --> 00:34:14.530
You were supposed to shout
that out when I did that.

00:34:14.580 --> 00:34:15.800
You're not much of an audience.

00:34:15.800 --> 00:34:25.300
Uppercase T.

00:34:37.090 --> 00:34:38.240
Ah, there we go.

00:34:38.240 --> 00:34:43.760
Yay.

00:34:44.000 --> 00:34:46.180
So the only thing we don't do is
spell checking in the control--

00:34:46.180 --> 00:34:48.000
in the connections inspector.

00:34:48.000 --> 00:34:49.990
Thank you.

00:34:56.620 --> 00:34:59.640
Those notions of outlets, target action,
file zone,

00:34:59.640 --> 00:35:01.680
first responder are very important.

00:35:01.680 --> 00:35:06.930
File zone and first responder are
difficult notions and they are

00:35:07.010 --> 00:35:10.600
quite unusual in this environment.

00:35:10.600 --> 00:35:12.880
They are difficult
notions but they are very,

00:35:13.010 --> 00:35:16.600
very powerful and you can do anything
you want with those two notions.

00:35:16.600 --> 00:35:20.600
So look at them, practice,
look at all of our code.

00:35:20.600 --> 00:35:23.130
It's very important to understand
the notion of file zone and first

00:35:23.130 --> 00:35:27.700
responder to really be able to
develop your Cocoa application.

00:35:28.510 --> 00:35:31.030
You've laid out your user interface,
you've connected your code

00:35:31.060 --> 00:35:33.430
to your user interface,
either for Carbon and Cocoa,

00:35:33.430 --> 00:35:37.160
and now you want to load this user
interface inside your application.

00:35:38.120 --> 00:35:41.420
So here again, there is a difference
between Cocoa and Carbon.

00:35:41.740 --> 00:35:43.530
In Carbon, there are no objects.

00:35:43.750 --> 00:35:47.160
So you have to explicitly load
your user interface and get

00:35:47.310 --> 00:35:49.160
object outside of the nib.

00:35:49.370 --> 00:35:52.280
In Cocoa, it is more or less automatic.

00:35:52.440 --> 00:35:56.920
There is also a nib which
we call the main nib,

00:35:56.920 --> 00:36:03.790
which is automatically loaded
when your application is launched.

00:36:03.790 --> 00:36:03.790
And also a nib can be loaded on demand.

00:36:04.140 --> 00:36:08.060
So let me go first explain about Carbon.

00:36:08.060 --> 00:36:11.960
In Carbon there is one header,
the ibcarbon-runtime.h,

00:36:11.970 --> 00:36:15.220
which has six functions,
a very small API.

00:36:15.230 --> 00:36:19.170
And the six API allows you to
load a Nib file and get anything

00:36:19.170 --> 00:36:22.970
outside of this Nib file-- windows,
menus, et cetera.

00:36:23.820 --> 00:36:28.540
Those APIs are available on Mac OS X,
apart of the Carbon framework.

00:36:28.600 --> 00:36:30.450
So if you're using,
you're linking against Carbon,

00:36:30.460 --> 00:36:34.360
you're already getting
those APIs ready to use.

00:36:34.470 --> 00:36:38.210
And on Mac OS X, Mac OS 9 and 8,
I should have said 8 also,

00:36:38.210 --> 00:36:40.430
we are part of Carbon Nib since 1.1.

00:36:40.430 --> 00:36:43.100
So you can use Nib file and
you can use the same API,

00:36:43.180 --> 00:36:47.890
the same code to load
your Nib file on 8 or 9.

00:36:48.820 --> 00:36:52.100
So here I have a typical,
very small application,

00:36:52.160 --> 00:36:56.540
Carbon application,
that by the way will run perfectly well.

00:36:56.610 --> 00:37:01.320
And what I'm doing here is that I'm
first getting a reference to a Nib file.

00:37:01.330 --> 00:37:05.400
I call create Nib reference,
passing the name of the Nib file,

00:37:05.400 --> 00:37:07.700
and I get back a Nib reference.

00:37:07.760 --> 00:37:12.780
I can then ask for the menu
bar inside this Nib file,

00:37:12.780 --> 00:37:16.140
and it happens I call my
menu bar in my Nib file.

00:37:16.240 --> 00:37:19.250
So I can say,
set the main menu bar using the

00:37:19.250 --> 00:37:21.840
menu bar that's inside this Nib.

00:37:21.880 --> 00:37:24.400
I can also then create a
window from the Nib file,

00:37:24.400 --> 00:37:28.390
same thing, passing a Nib reference,
passing the name of the

00:37:28.400 --> 00:37:32.580
window you want to extract,
and you get a window reference.

00:37:32.610 --> 00:37:34.620
I immediately dispose the Nib reference.

00:37:34.710 --> 00:37:37.080
You should not keep those
Nib reference around because

00:37:37.080 --> 00:37:38.740
we are loading some XML file,
etc.

00:37:38.740 --> 00:37:41.480
You want to get rid of them
as soon as you are done.

00:37:41.850 --> 00:37:45.280
The window was created invisible,
so now you just say show window

00:37:45.280 --> 00:37:46.090
and the window pops on the screen.

00:37:46.200 --> 00:37:50.580
And you can go and run,
go and call run application event loop,

00:37:50.580 --> 00:37:51.790
and you're done.

00:37:52.060 --> 00:37:56.300
And this application will run fine,
providing a Nib that has those

00:37:56.300 --> 00:38:01.200
two objects that will put a menu
bar and a window on the screen.

00:38:02.760 --> 00:38:04.860
Cocoa.

00:38:04.930 --> 00:38:07.850
So for Cocoa,
there is one special Nib file,

00:38:07.850 --> 00:38:11.440
which we call the main Nib file.

00:38:11.690 --> 00:38:14.290
This Nib file is automatically
loaded at launch time.

00:38:14.440 --> 00:38:17.620
When you launch a Cocoa application,
the main Nib file is

00:38:17.620 --> 00:38:18.990
automatically loaded.

00:38:19.110 --> 00:38:20.490
The name doesn't have to be main.

00:38:20.500 --> 00:38:21.390
It can be anything you want.

00:38:21.490 --> 00:38:24.560
You can go in the Project Builder,
Application Settings tab,

00:38:24.590 --> 00:38:28.140
and you can change the name
of this Nib the way you want.

00:38:28.200 --> 00:38:31.290
Usually, this Nib file should
contain the menu bar,

00:38:31.320 --> 00:38:33.980
at least the menu bar,
because this is the UI that you

00:38:33.980 --> 00:38:36.980
want to come up immediately when
you launch your application.

00:38:36.990 --> 00:38:41.800
So a good place for your menu
bar is inside the main Nib.

00:38:41.820 --> 00:38:45.240
The file owner of this main
Nib will be the application object,

00:38:45.500 --> 00:38:48.080
because the application
is loading this Nib file.

00:38:48.140 --> 00:38:51.420
So this is a good place, for example,
if you want to connect some menu item

00:38:51.420 --> 00:38:53.970
to the application-- for example,
you have implemented some

00:38:54.090 --> 00:38:56.960
code in your application,
and you want to connect menu item to

00:38:56.960 --> 00:39:01.100
your application-- you can define those
target actions on your application.

00:39:01.100 --> 00:39:04.100
You can also do some
action on your file owner,

00:39:04.100 --> 00:39:05.700
which is the application,
and connect your menu

00:39:05.810 --> 00:39:08.330
item to the file owner,
because the file owner

00:39:08.340 --> 00:39:09.700
is the application.

00:39:12.250 --> 00:39:15.920
Other Nib files should be loaded lazily.

00:39:15.960 --> 00:39:19.530
You can explicitly load a
Nib file using NSBundle,

00:39:19.530 --> 00:39:20.910
loadNIPName, owner.

00:39:21.280 --> 00:39:23.780
We have also some other
API to load Nib file,

00:39:23.780 --> 00:39:26.840
but this is the one that's the most used.

00:39:26.920 --> 00:39:29.380
You can also use NSWindowController.

00:39:29.420 --> 00:39:33.390
It's a class that you should
try to use whenever possible.

00:39:33.570 --> 00:39:35.810
If you use a window controller,
the window controller is

00:39:35.970 --> 00:39:38.420
created outside of the Nib,
and the file owner of this

00:39:38.530 --> 00:39:40.680
Nib will be the window controller.

00:39:40.710 --> 00:39:43.880
We've just added a new sample in
the CD you got at the conference

00:39:43.880 --> 00:39:45.360
called Simple MultiWindow.

00:39:45.360 --> 00:39:49.960
It's a Cocoa sample that shows you how
to create an application with multiple

00:39:49.960 --> 00:39:53.150
Nib and how to use window controller.

00:39:55.910 --> 00:39:59.330
So now I would like to go and
cover some tips and tricks,

00:39:59.390 --> 00:40:02.320
some things that you need to
know about Interface Builder that

00:40:02.320 --> 00:40:04.800
will make your life much easier.

00:40:04.840 --> 00:40:07.300
And ours too.

00:40:07.390 --> 00:40:10.000
So let's go through some
tips and tricks here.

00:40:12.300 --> 00:40:15.020
First, an important one.

00:40:15.020 --> 00:40:18.520
Do not put all your UI in one big,
giant nib.

00:40:18.580 --> 00:40:20.640
This is not the way a
nib file should be used.

00:40:20.640 --> 00:40:23.870
This is very important,
especially for Carbon developer,

00:40:23.870 --> 00:40:26.580
which are used to a resource
fork with a bunch of DLOG,

00:40:26.650 --> 00:40:30.440
DITL, all the applications in one big,
huge resource fork.

00:40:30.440 --> 00:40:33.470
Nib files are not resource files
and should not be used like

00:40:33.470 --> 00:40:35.660
you used to use resource files.

00:40:35.660 --> 00:40:39.940
You should break up your UI in
as many nibs as possible.

00:40:39.940 --> 00:40:43.140
Because when you load a nib file,
in Cocoa, when you load a nib file,

00:40:43.190 --> 00:40:45.720
all the objects in the nib file
will be loaded automatically.

00:40:45.720 --> 00:40:47.700
All windows will be instantiated.

00:40:47.700 --> 00:40:49.760
Everything will be loaded at once.

00:40:49.760 --> 00:40:53.640
On the Carbon side, there are no objects,
but still we'll be loading a lot of

00:40:53.640 --> 00:40:57.300
extra XML just for you to get one window.

00:40:57.320 --> 00:40:59.920
So if you break up your
UI in multiple nibs,

00:40:59.920 --> 00:41:02.000
your nib will load faster.

00:41:02.000 --> 00:41:04.680
And also, it will facilitate reuse.

00:41:04.680 --> 00:41:08.460
If you have this nice about box you
want to reuse in another application,

00:41:08.460 --> 00:41:12.080
it's much easier to just copy your
nib file and your source code.

00:41:12.080 --> 00:41:15.780
And bring it to the other application
instead of trying to extract your window,

00:41:15.870 --> 00:41:17.400
your controller, et cetera.

00:41:17.440 --> 00:41:20.100
So break up your UI in multiple nibs.

00:41:21.780 --> 00:41:24.870
As an example,
here I have a Carbon application,

00:41:24.900 --> 00:41:29.280
a bad Carbon application,
which has four windows and a menu bar.

00:41:29.730 --> 00:41:33.080
This application has a menu bar,
a main window, an about box,

00:41:33.130 --> 00:41:36.070
a connection panel,
and some preference panel.

00:41:36.250 --> 00:41:37.270
This is bad.

00:41:37.490 --> 00:41:38.900
This is not the way you should do it.

00:41:39.000 --> 00:41:42.740
What you should do is have, in this case,
four nibs.

00:41:42.990 --> 00:41:47.170
One with your main window and your
main menu because in this case this

00:41:47.250 --> 00:41:52.490
is a single window type of application
with one window and a menu bar.

00:41:52.500 --> 00:41:55.220
So you put your window and your
menu bar into your main nib.

00:41:55.380 --> 00:41:57.690
You load this UI when you
launch your application.

00:41:57.700 --> 00:42:01.210
Then you need to have a
nib with your about box,

00:42:01.340 --> 00:42:03.500
a nib with your connection panel,
and a nib with your preferences.

00:42:03.500 --> 00:42:06.360
If the user never uses your
preference or your about box,

00:42:06.540 --> 00:42:08.380
there is no need to load this nib file.

00:42:08.500 --> 00:42:12.990
Top level objects.

00:42:13.000 --> 00:42:15.070
You get something to drink.

00:42:20.340 --> 00:42:21.980
Couple of objects.

00:42:22.000 --> 00:42:24.700
This is specific for Cocoa.

00:42:24.720 --> 00:42:29.560
In a Nib file, you have this document
window with a bunch of icons.

00:42:29.580 --> 00:42:32.250
We talked about the first,
the file owner and the first responder,

00:42:32.260 --> 00:42:35.690
which are not real objects,
they are just proxy objects for objects

00:42:35.760 --> 00:42:37.240
that are outside of the Nib file.

00:42:37.260 --> 00:42:38.850
But here,

00:42:39.050 --> 00:42:41.040
I highlighted three objects.

00:42:41.090 --> 00:42:44.470
There is a menu bar, a window,
and a controller object.

00:42:44.590 --> 00:42:45.560
This is for Cocoa.

00:42:45.620 --> 00:42:50.000
Carbon, I don't have to worry about
top level objects too much.

00:42:50.980 --> 00:42:55.180
So, typically this is what you used to
have in a Nib file traditionally.

00:42:55.180 --> 00:42:59.470
You used to have a controller,
windows and menu.

00:42:59.600 --> 00:44:03.200
[Transcript missing]

00:44:04.640 --> 00:44:08.290
So, new type of top level objects
and I will talk more about

00:44:08.390 --> 00:44:10.770
the view in a few minutes.

00:44:11.400 --> 00:44:15.800
So I'm talking about those top level
objects because of ref counting.

00:44:15.800 --> 00:44:18.090
You know that Cocoa used
reference counting,

00:44:18.240 --> 00:44:21.080
so an object is created,
if you call alloc init,

00:44:21.200 --> 00:44:22.700
your ref count is one.

00:44:23.080 --> 00:44:27.420
Creating an object in a Nib file
is exactly like calling alloc init.

00:44:27.420 --> 00:44:30.290
If you instantiate a
window inside a Nib file,

00:44:30.290 --> 00:44:33.560
it's like in your code calling NSWindow,
alloc init, whatever,

00:44:33.570 --> 00:44:34.910
plus extra parameters.

00:44:34.910 --> 00:44:37.910
So this is really creating an object,
and you get an object

00:44:37.910 --> 00:44:40.460
with a ref count of one,
which means that if

00:44:40.460 --> 00:44:43.660
you don't do anything,
you have a leak because you're

00:44:43.660 --> 00:44:48.460
loading a Nib file and suddenly
this Nib file is not needed anymore.

00:44:48.480 --> 00:44:50.100
Those objects are still there.

00:44:50.200 --> 00:44:53.900
Someone asked to release those objects.

00:44:53.900 --> 00:44:56.520
So the role of the--who
should release those objects

00:44:56.520 --> 00:44:58.120
is usually the file's owner.

00:44:58.130 --> 00:45:00.560
The way to do that, for example,
would be to have an outlet

00:45:00.560 --> 00:45:04.820
inside your file owner that will
connect to a window or connect to

00:45:04.820 --> 00:45:06.970
another object inside your Nib.

00:45:06.980 --> 00:45:09.420
And when the controller decides, "Oh,
I'm going to do this," the file owner

00:45:09.420 --> 00:45:12.210
decides that this Nib is not needed,
it will release those objects.

00:45:12.210 --> 00:45:13.980
This is very, very important.

00:45:15.790 --> 00:45:16.900
There's one exception.

00:45:16.900 --> 00:45:20.320
NSWindow has this little
flag called Release on Close,

00:45:20.330 --> 00:45:24.410
which means when I'm close,
get rid of myself.

00:45:24.760 --> 00:45:26.140
So it just releases itself.

00:45:26.270 --> 00:45:28.880
So an NSWindow,
you don't have to worry about

00:45:28.880 --> 00:45:32.460
that because if you set this flag,
Release on Close,

00:45:32.520 --> 00:45:34.180
it will go away automatically.

00:45:34.280 --> 00:45:36.250
For all other objects,
you have to be very careful that

00:45:36.340 --> 00:45:38.540
someone has to own this object,
someone has to have an

00:45:38.620 --> 00:45:41.010
outlet on this object,
and knows how to release it when

00:45:41.010 --> 00:45:42.890
you're done with the Nib file.

00:45:44.710 --> 00:45:48.030
So, windowless view.

00:45:48.040 --> 00:45:49.440
This is new in Interface Builder.

00:45:49.440 --> 00:45:52.360
It's a very, very useful feature.

00:45:52.470 --> 00:45:57.240
It allows you to create a view
without an enclosing window.

00:45:57.350 --> 00:45:59.260
To do that,
you simply drag a custom view.

00:45:59.260 --> 00:46:00.960
We have a custom object on the palette.

00:46:01.080 --> 00:46:04.230
You just simply drag a custom
view inside your document window

00:46:04.640 --> 00:46:06.700
and you instantiate an NSView.

00:46:06.700 --> 00:46:09.710
You can then change the
class of this NSView.

00:46:09.710 --> 00:46:11.860
It can be MyView, whatever.

00:46:12.580 --> 00:46:15.460
This eliminates the
need to create a window.

00:46:15.510 --> 00:46:18.920
A couple of years ago,
what you had to do is

00:46:19.110 --> 00:46:24.210
create a window at runtime,
have an outlet on this window,

00:46:24.380 --> 00:46:27.740
Get a pointer to the content
view and get rid of the window.

00:46:27.740 --> 00:46:29.830
So you have to write a little
bit of code to just get a view

00:46:29.860 --> 00:46:31.390
by itself without a window.

00:46:31.390 --> 00:46:32.430
You don't have to do that anymore now.

00:46:32.430 --> 00:46:34.030
You can just create a view.

00:46:34.100 --> 00:46:36.920
You can put control inside
this view and you can just

00:46:36.920 --> 00:46:38.820
instantiate this view by itself.

00:46:39.660 --> 00:46:42.320
Which makes me think also that
there's something that's important,

00:46:42.320 --> 00:46:46.110
a new feature in Interface Builder
for people who use Cocoa for a while.

00:46:46.340 --> 00:46:50.400
You can also now embed
control in a custom view.

00:46:50.400 --> 00:46:51.920
It's something you could not do before.

00:46:51.970 --> 00:46:55.190
You can only embed things into a
group box or something like that.

00:46:55.200 --> 00:46:59.110
You can use now a custom
view as a container.

00:46:59.390 --> 00:47:03.640
So we use this windowless view as
the content view of an NS drawer.

00:47:03.640 --> 00:47:05.800
This is one of the usage
we have of windowless view.

00:47:05.800 --> 00:47:09.080
But you can use windowless
view for anything you want.

00:47:09.140 --> 00:47:11.240
Be very careful with
the ref counting again.

00:47:11.290 --> 00:47:12.860
This view is going to be created.

00:47:13.080 --> 00:47:16.860
If you have an outlet with this view and
you put this view inside another view,

00:47:16.900 --> 00:47:18.820
now the ref count is two.

00:47:18.850 --> 00:47:20.680
This content view goes away.

00:47:20.680 --> 00:47:22.060
The ref count of your view is still one.

00:47:22.230 --> 00:47:23.600
So it's not going away.

00:47:23.720 --> 00:47:26.880
You have to be careful of
the reference counting.

00:47:27.320 --> 00:47:32.430
We have the windowless view in
Carbon and we bring that to Cocoa.

00:47:32.550 --> 00:47:35.000
No, sorry,
we have that in Cocoa and bring that

00:47:35.000 --> 00:47:38.440
in Carbon where we'll be able to
create a user pane without a view

00:47:38.440 --> 00:47:42.360
and be able to manipulate this user
pane and put it wherever you want.

00:47:42.480 --> 00:47:46.070
So that's a feature for Carbon.

00:47:51.040 --> 00:47:53.900
Post-Nib loading initialization.

00:47:53.940 --> 00:47:56.260
I think that's one of the
questions that come up more

00:47:56.260 --> 00:47:58.040
often on different mailing lists.

00:47:58.130 --> 00:48:01.840
I have this object in a nib and
I override init with frame and

00:48:01.840 --> 00:48:04.210
my init with frame is not called.

00:48:04.210 --> 00:48:04.210
Why?

00:48:04.680 --> 00:48:08.520
Because the rule here is do not rely,
don't rely on init,

00:48:08.520 --> 00:48:11.850
init twist frame or init twist
coder to do any post loading,

00:48:12.120 --> 00:48:14.220
post nib loading initialization.

00:48:14.400 --> 00:48:18.100
The way to do that is to
implement AwakeFromNib.

00:48:18.170 --> 00:48:21.730
Any object can implement AwakeFromNib
and when we load a nib file,

00:48:21.730 --> 00:48:24.700
when we instantiate all those objects,
the last thing we do is

00:48:24.700 --> 00:48:27.960
that we ask every object,
do you implement AwakeFromNib?

00:48:28.020 --> 00:48:31.090
If the object says yes,
we call AwakeFromNib.

00:48:31.200 --> 00:48:32.560
This is the last thing we do.

00:48:32.830 --> 00:48:35.000
So at this point,
all objects have been instantiated.

00:48:35.180 --> 00:48:38.080
Everything in your nib
has been instantiated.

00:48:38.410 --> 00:48:40.300
All the outlet target
actions have been set.

00:48:40.410 --> 00:48:42.580
So all the objects are ready to go.

00:48:42.670 --> 00:48:47.070
So never try to override init,
init twist frame or init twist coder to

00:48:47.070 --> 00:48:50.180
do any post nib loading initialization.

00:48:50.220 --> 00:48:51.400
Implement AwakeFromNib.

00:48:51.400 --> 00:48:55.900
This is the right place to do that.

00:48:56.010 --> 00:48:57.590
Nib tool.

00:48:59.850 --> 00:49:01.330
NibTool is a handy little tool.

00:49:01.340 --> 00:49:04.830
It's a command line tool that we
have that allows you to manipulate

00:49:05.030 --> 00:49:08.110
the content of a Nib file
without using Interface Builder.

00:49:08.170 --> 00:49:09.550
It's a command line tool.

00:49:09.810 --> 00:49:13.560
It works for both Cocoa and Carbon,
so you can both accept

00:49:14.020 --> 00:49:15.420
Cocoa and Carbon nibs.

00:49:15.590 --> 00:49:16.740
And there are a lot of options.

00:49:16.800 --> 00:49:19.760
We just added a ManPage to NibTool,
so you have all the

00:49:19.760 --> 00:49:22.180
options using ManPage.

00:49:22.230 --> 00:49:24.840
It's used by FileMerge to diff to nibs.

00:49:24.940 --> 00:49:27.750
Cocoa nibs are a binary,
so FileMerge cannot show

00:49:27.990 --> 00:49:30.440
you the difference between
what changes on Nib files.

00:49:30.560 --> 00:49:34.320
So what FileMerge does is that it
invokes NibTool on those two nibs,

00:49:34.520 --> 00:49:38.040
asking NibTool to convert those two
nibs into a textual representation.

00:49:38.290 --> 00:49:43.140
And then you can do a diff
of those two Nib files.

00:49:43.420 --> 00:49:45.870
We've added--

00:49:46.180 --> 00:49:55.180
A feature recently to allow localization
of a Nib file using Nib tool.

00:50:04.490 --> 00:50:08.120
Let's say that you have an
English nib and you want to

00:50:08.180 --> 00:50:10.500
translate it into a French nib.

00:50:10.500 --> 00:50:13.360
One way to do that would be to open
your English nib into Interface

00:50:13.360 --> 00:50:16.830
Builder and have someone figuring
out where are all the strings,

00:50:17.300 --> 00:50:20.900
trying to find where the strings are
so you can localize those strings.

00:50:20.920 --> 00:50:23.400
There is a new way to do that now.

00:50:25.150 --> 00:50:29.900
What you can do is you can use
Nib tool and ask Nib tool to extract

00:50:29.900 --> 00:50:32.600
all the strings from this Nib file.

00:50:32.720 --> 00:50:37.990
So the output of Nib tool will be a text
file that looks like hello equal hello,

00:50:38.050 --> 00:50:40.760
close equal close, open equal open.

00:50:40.820 --> 00:50:44.170
So it's a way to extract all
the strings from this Nib tool.

00:50:45.000 --> 00:50:48.450
You can then send this text file to
a localizer and ask him to translate

00:50:49.000 --> 00:50:53.400
the right side of the string,
of the equal sign.

00:50:54.510 --> 00:50:57.770
And when you get back
your text file localized,

00:50:57.860 --> 00:51:01.440
you can send it back to Nib tool
using the original English Nib file

00:51:01.830 --> 00:51:02.940
and create a French Nib.

00:51:02.950 --> 00:51:06.140
IB will know where to put back
those strings in the right place.

00:51:06.170 --> 00:51:10.080
So you may have to go back and still open
the Nib file and readjust some button,

00:51:10.080 --> 00:51:14.620
would be too short or too long,
but you can make the localization

00:51:14.620 --> 00:51:15.880
a lot more automatic.

00:51:15.880 --> 00:51:18.550
And in fact,
this is one way we're doing that

00:51:18.550 --> 00:51:20.660
at Apple to localize Nib files.

00:51:20.670 --> 00:51:24.220
We have a process which is a bit
more complex than this one that use

00:51:24.220 --> 00:51:28.960
Nib tool to localize automatically
all the Nib file without any

00:51:28.960 --> 00:51:31.640
intervention of engineers.

00:51:32.750 --> 00:51:39.340
So there is a session Thursday on
how to localize your application.

00:51:39.350 --> 00:51:43.770
And if you're interested to look at that,
go to this session.

00:51:47.800 --> 00:51:53.700
[Transcript missing]

00:51:54.010 --> 00:51:58.190
In the box that came with Mac OS X,
there was a developer CD.

00:51:58.190 --> 00:52:03.450
And on this CD there was
Interface Builder version 2.0.

00:52:03.530 --> 00:52:07.980
I think IB was version 1.0 for 15 years,
so we decided it was a

00:52:08.040 --> 00:52:09.900
good time to go to 2.0.

00:52:09.990 --> 00:52:11.650
So this is version 2.0.

00:52:11.650 --> 00:52:15.900
We know our shipping version
2.0.1 at the conference.

00:52:15.900 --> 00:52:17.900
And it's many bug fixing.

00:52:17.980 --> 00:52:20.900
We have some bugs fixed for web objects.

00:52:20.900 --> 00:52:21.880
There's many bug fixes.

00:52:22.020 --> 00:52:22.900
There are no new features there.

00:52:22.900 --> 00:52:24.890
But we've added two new examples.

00:52:24.980 --> 00:52:28.830
We have an example called Busy
Palette and Simple Multi Window.

00:52:28.900 --> 00:52:31.690
These are both Cocoa examples.

00:52:31.900 --> 00:52:34.320
The Busy Palette is--there's
been a lot of demand recently for

00:52:34.320 --> 00:52:35.900
people wanting to write palettes.

00:52:35.900 --> 00:52:40.730
And we haven't talked about that today,
but this sample is a complete

00:52:41.210 --> 00:52:45.190
palette example that shows you
how to support undo in your object

00:52:45.310 --> 00:52:47.900
when you're writing a palette,
to show you how to write inspectors,

00:52:47.900 --> 00:52:51.730
show you how to write multiple
modes for the inspector,

00:52:51.730 --> 00:52:51.900
for example.

00:52:52.120 --> 00:52:54.140
When you drag a formatter
on the text field,

00:52:54.220 --> 00:52:55.850
you get another inspector.

00:52:55.980 --> 00:52:58.900
So how to add inspector
to the inspector window.

00:52:58.980 --> 00:53:00.900
That's what says the info window.

00:53:00.900 --> 00:53:05.240
But this is a full complete
palette sample that I'm sure a

00:53:05.270 --> 00:53:06.700
lot of you will find very useful.

00:53:06.900 --> 00:53:09.840
There's also a
Simple Multi Window example,

00:53:09.840 --> 00:53:12.890
which I took before,
showing you how to write an

00:53:12.990 --> 00:53:17.600
application with multiple windows
using an S Window Controller.

00:53:17.770 --> 00:53:23.700
Interface Builder will be released
using the quarterly developer update.

00:53:23.700 --> 00:53:29.850
So as we have new features
and new bug fixes,

00:53:29.850 --> 00:53:29.850
you will see a new
version of IB coming out.

00:53:30.530 --> 00:53:33.390
I just want to talk briefly
about what's coming up,

00:53:33.390 --> 00:53:37.600
what new features we have
scheduled for Interface Builder.

00:53:37.660 --> 00:53:40.640
First we want to continue to concentrate
on the stability of the product.

00:53:40.680 --> 00:53:44.250
We want to make it faster, stable,
easier to use.

00:53:44.810 --> 00:53:48.580
As far as easier to use,
and Scott was talking about that,

00:53:48.590 --> 00:53:51.700
we got a lot of feedback about
how you edit those containers.

00:53:51.700 --> 00:53:53.200
You have to double
click all these things.

00:53:53.310 --> 00:53:54.540
So we are changing that.

00:53:54.630 --> 00:53:58.800
You'll find a much better,
more intuitive way to edit containers.

00:53:58.920 --> 00:54:01.550
You won't have to double
click all these things.

00:54:01.550 --> 00:54:03.250
It will be much more natural.

00:54:03.390 --> 00:54:08.940
We're also changing the UI to
define outlet and action.

00:54:08.990 --> 00:54:10.100
I think a better UI to define
those outlet and actions.

00:54:11.600 --> 00:54:14.590
For people who are familiar
with Interface Builder,

00:54:14.680 --> 00:54:18.810
on Cocoa there is a class tab and
right now it shows an outline view.

00:54:18.810 --> 00:54:21.570
We are also giving you the
choice to use a browser view,

00:54:21.570 --> 00:54:25.380
which is much easier to navigate,
and also give you a search feature

00:54:25.380 --> 00:54:29.490
so you can type NSV and it's
going to go to NSV automatically.

00:54:29.500 --> 00:54:33.860
We are also adding flagging of
unconnected outlet and actions,

00:54:33.860 --> 00:54:35.380
the target actions.

00:54:35.530 --> 00:54:38.880
This is very useful because sometimes
if you have a very complex user

00:54:39.050 --> 00:54:40.500
interface and you have a lot of menus,
items, a lot of questions,

00:54:41.520 --> 00:54:44.780
you may miss a connection and
sometimes you don't understand

00:54:44.780 --> 00:54:46.950
why your application doesn't work.

00:54:46.950 --> 00:54:51.500
So now we will be showing you what is
not connected in Interface Builder.

00:54:51.500 --> 00:54:54.060
For example,
it's very important that if you

00:54:54.060 --> 00:54:57.640
have an S-Window controller that
the window outlet be correctly

00:54:57.720 --> 00:54:59.160
connected to the window.

00:54:59.560 --> 00:55:01.490
So if you don't do that,
your application may not work.

00:55:01.500 --> 00:55:05.500
So we will be flagging those
unconnected outlets and actions.

00:55:05.500 --> 00:55:09.500
We want to continue to
improve PB and IB integration.

00:55:09.500 --> 00:55:11.500
We want to take advantage of the indexer.

00:55:11.500 --> 00:55:14.500
We want to make sure that we
have a good indexer in PB.

00:55:14.500 --> 00:55:17.500
So this is something important
we have to be able to use.

00:55:17.690 --> 00:55:21.450
And also we are continuing to closely
track Cocoa and Carbon frameworks.

00:55:21.720 --> 00:55:25.650
Cocoa and Carbon are adding new features,
new UI elements,

00:55:25.670 --> 00:55:28.500
and we want to have IB to
always be on top of that,

00:55:28.500 --> 00:55:32.270
always be ready for you to use those
new UIs in both Cocoa and Carbon.

00:55:32.720 --> 00:55:36.780
So we are working,
in fact we are part of the

00:55:37.220 --> 00:55:41.030
Cocoa and Carbon teams,
and we are very closely what changes

00:55:41.040 --> 00:55:44.370
are made to those two frameworks
to renew the latest user interface.

00:55:44.500 --> 00:55:49.500
And we have a lot more EIDs and
features coming up pretty soon.

00:55:51.970 --> 00:55:56.190
I'd like to bring back Godfrey
on stage and I went very,

00:55:56.190 --> 00:55:58.220
very fast today.

00:55:58.220 --> 00:56:05.920
So we have time for .
Thank you very much,

00:56:05.920 --> 00:56:07.190
Henri.

00:56:09.140 --> 00:56:10.180
Pretty amazing stuff.

00:56:10.180 --> 00:56:16.010
The use of Interface Builder for
Carbon and Cocoa really ensures much,

00:56:16.090 --> 00:56:18.380
much better Aqua user interfaces.

00:56:18.480 --> 00:56:21.130
It's an essential part of the
Cocoa development and really

00:56:21.130 --> 00:56:23.490
helps you use your Carbon events
to the greatest effect.

00:56:23.540 --> 00:56:26.560
On the screen right now,
information resources.

00:56:26.820 --> 00:56:29.650
Again, our information pages
for all Mac OS X tools.

00:56:29.650 --> 00:56:32.660
The project,
somebody copy and pasted the wrong,

00:56:32.690 --> 00:56:36.030
that should be the Interface
Builder web page there.

00:56:37.140 --> 00:56:39.890
And below that,
the master mailing list page

00:56:39.890 --> 00:56:43.890
for all the different mailing
lists that we support at Apple.

00:56:44.080 --> 00:56:45.970
There's Project Builder users,
there's Cocoa dev,

00:56:46.060 --> 00:56:49.440
there's also Carbon dev
and the web objects lists,

00:56:49.530 --> 00:56:52.780
all of which will be
using Interface Builder.

00:56:52.840 --> 00:56:55.460
A roadmap for more sessions.

00:56:55.550 --> 00:56:59.370
Carbon event manager,
right here after this session.

00:56:59.740 --> 00:57:01.020
Tomorrow, using Cocoa.

00:57:01.290 --> 00:57:04.980
Actually, Thursday, using Cocoa and the
advanced Cocoa topics.

00:57:04.980 --> 00:57:08.120
And the Mac OS X application
localization.

00:57:08.130 --> 00:57:11.280
And now,
if I can have the house lights up,

00:57:11.450 --> 00:57:14.540
people can start coming up to the
microphones to ask their questions.

00:57:14.580 --> 00:57:18.000
This is my contact information
if you have strategic questions

00:57:18.040 --> 00:57:19.610
regarding tools of any sort.

00:57:19.780 --> 00:57:22.200
I am your technology
manager to deal with those.

00:57:22.290 --> 00:57:25.430
And also for feedback to
the Mac OS X tools groups,

00:57:25.430 --> 00:57:28.380
we have a mailing list direct,
a mailing address

00:57:28.520 --> 00:57:30.870
specifically for that purpose.