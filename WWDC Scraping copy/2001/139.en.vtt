WEBVTT

00:00:06.220 --> 00:00:13.140
Thank you and welcome to session 139,
Leveraging BSD Services in Mac OS X.

00:00:13.140 --> 00:00:14.180
Hope you all had a good lunch.

00:00:14.230 --> 00:00:16.500
We'll try and keep you
awake this afternoon.

00:00:16.500 --> 00:00:20.830
And as most of you know,
wrapped around Darwin kernel

00:00:20.830 --> 00:00:24.850
in Mac OS X is our own
customized version of BSD.

00:00:24.860 --> 00:00:27.570
And with that,
what that means for you as developers,

00:00:27.640 --> 00:00:31.540
you now have a whole library of BSD tools
and applications available to you.

00:00:31.720 --> 00:00:34.740
And you can also exploit the
power of our BSD to bring your

00:00:34.740 --> 00:00:36.840
BSD applications to our platform.

00:00:36.860 --> 00:00:39.340
So without further ado,
I'd like to introduce the

00:00:39.420 --> 00:00:41.880
Director of Core OS Engineering,
Brett Halle.

00:00:49.530 --> 00:00:51.890
Good afternoon.

00:00:51.900 --> 00:00:52.350
I'm impressed.

00:00:52.510 --> 00:00:55.120
Here it is,
Friday afternoon after lunch right before

00:00:55.120 --> 00:00:56.700
a three-day weekend and you're in here.

00:00:56.700 --> 00:00:58.810
So you must be the real hardcore guys.

00:01:02.400 --> 00:01:06.760
So we're going to spend some time
this afternoon and talk a little

00:01:06.760 --> 00:01:10.610
bit about what BSD is in Mac OS X,
what kind of role it

00:01:10.610 --> 00:01:14.590
plays within the system,
how you can actually get involved

00:01:14.660 --> 00:01:18.300
in programming with it on X,
and a bit about the BSD community because

00:01:18.300 --> 00:01:20.480
it's more than just the technology.

00:01:22.290 --> 00:01:24.330
By now, if you've been to a
number of our sessions,

00:01:24.340 --> 00:01:29.170
you've seen the architectural diagram
for where Darwin and Core OS fit

00:01:29.230 --> 00:01:32.200
into the architecture of Mac OS X.

00:01:32.200 --> 00:01:35.500
There's a lot of technology
down in the kernel land.

00:01:35.500 --> 00:01:39.300
And we're going to focus today
on just the BSD portion of this.

00:01:39.380 --> 00:01:42.530
A little later today,
there'll be some discussion on

00:01:42.530 --> 00:01:45.800
the BSD kernel pieces and the
Mach kernel right after this session.

00:01:48.130 --> 00:01:52.520
First we want to talk a little bit
about BSD from the kernel perspective.

00:01:52.520 --> 00:01:57.760
Understand that as far as Darwin kernel
architecture is concerned,

00:01:57.760 --> 00:02:02.420
that BSD, if you will,
if you layered even at the kernel level,

00:02:02.420 --> 00:02:05.160
BSD sits on top of our
kernel architecture.

00:02:05.180 --> 00:02:09.760
It has the file system technology,
the networking layer,

00:02:09.760 --> 00:02:12.580
and basically provides the POSIX,
if you will,

00:02:12.580 --> 00:02:14.170
functionality layer for the system.

00:02:15.280 --> 00:02:15.860
I.O.

00:02:15.860 --> 00:02:19.500
kit within the kernel space is
our answer for dealing with I.O.

00:02:19.500 --> 00:02:23.360
and drivers and basically abstractions
for devices on the system.

00:02:23.360 --> 00:02:27.820
And underneath that sits Mach,
which is fundamentally responsible

00:02:27.960 --> 00:02:31.480
for abstracting the processor,
dealing with low-level tasks

00:02:31.480 --> 00:02:34.020
and thread abstractions,
memory management,

00:02:34.020 --> 00:02:38.910
and again dealing with the processor or
processors in the case of an MP system.

00:02:38.920 --> 00:02:42.310
For BSD,
you need to realize that as being

00:02:42.310 --> 00:02:46.820
just a subcomponent of Mac OS X,
that really BSD is an operating

00:02:46.910 --> 00:02:48.160
system in and of itself.

00:02:48.200 --> 00:02:56.260
It is a kernel environment that sits
within our kernel space of the system.

00:02:56.260 --> 00:02:59.810
It's also a set of user land
libraries and services that are

00:02:59.900 --> 00:03:01.380
available to the applications.

00:03:01.380 --> 00:03:04.500
And it's also an application
environment in and of itself,

00:03:04.650 --> 00:03:05.790
the command line, if you will.

00:03:07.900 --> 00:03:11.670
From the kernel perspective,
it's worth noting that there's

00:03:11.740 --> 00:03:16.200
some history to how BSD actually
came to play in Mac OS X.

00:03:16.200 --> 00:03:17.960
And we'll talk a little
bit more about that later.

00:03:17.960 --> 00:03:22.330
But for what we ship,
it's based on the BSD 4.4 environment.

00:03:24.920 --> 00:03:27.880
as well as being integrated
with Mac and I/O Kit.

00:03:27.900 --> 00:03:33.570
It provides the personality
APIs for the system.

00:03:33.740 --> 00:03:36.650
Mac, as it sits on the bottom,
is very much of an abstraction

00:03:36.700 --> 00:03:39.340
layer dealing with processor
management and memory management.

00:03:39.360 --> 00:03:44.740
It doesn't actually provide any,
if you will, policy to the system.

00:03:44.860 --> 00:03:46.560
BSD kernel, however, does.

00:03:46.560 --> 00:03:49.410
It very much represents the
OS policy of the system.

00:03:49.720 --> 00:03:53.640
It is responsible for the process
model that defines how each and

00:03:53.640 --> 00:03:55.410
every application space runs.

00:03:55.470 --> 00:03:58.140
It also provides the basic
security policy for the system,

00:03:58.140 --> 00:04:02.150
whether it be the concept of individual
users or even as it's abstracted

00:04:02.150 --> 00:04:08.290
down to the file system to access
to files and other services of the OS.

00:04:08.480 --> 00:04:12.430
From a process model perspective,
there's kind of two ways of

00:04:12.590 --> 00:04:15.000
looking at this within Mac OS X.

00:04:15.000 --> 00:04:19.030
Again, at the very lowest level,
Mach is responsible for the

00:04:19.040 --> 00:04:24.440
abstraction of the processor
and the memory management.

00:04:24.440 --> 00:04:27.110
And it has an abstraction
or model called a task,

00:04:27.150 --> 00:04:31.780
which is responsible for providing
that container to map to a memory,

00:04:31.780 --> 00:04:36.560
basically for an address space or a chunk
of memory that represents an application.

00:04:37.260 --> 00:04:41.150
The BSD process sits on top of
those very low-level primitives

00:04:41.150 --> 00:04:44.620
and provides a considerable amount
of additional state to the system.

00:04:44.620 --> 00:04:49.140
It's responsible for much of
the OS resource management.

00:04:49.140 --> 00:04:54.600
So for things like file descriptors and
network services and things like that,

00:04:54.670 --> 00:04:57.230
and high-level memory
abstractions as well as,

00:04:57.230 --> 00:04:59.540
of course, all the network resources.

00:04:59.540 --> 00:05:04.430
The BSD process is responsible for that,
and when a BSD process

00:05:04.430 --> 00:05:08.410
terminates for some reason,
either because the application

00:05:08.450 --> 00:05:11.080
quits or because there's
some type of fault condition,

00:05:11.080 --> 00:05:15.800
it's the responsibility of BSD to
actually reclaim all the resources that

00:05:15.950 --> 00:05:18.610
are associated with a given application.

00:05:18.620 --> 00:05:21.900
In addition,
there's other ancillary services

00:05:21.900 --> 00:05:26.100
that the process provides,
things like environment variables

00:05:26.260 --> 00:05:30.600
and signal delivery ways of being
able to provide some type of a

00:05:30.630 --> 00:05:34.760
low-level interrupt dispatch,
if you will, at the application level.

00:05:37.200 --> 00:07:15.300
[Transcript missing]

00:07:16.140 --> 00:07:20.920
Other aspects of security
policy involve the file system.

00:07:21.060 --> 00:07:25.200
Again, the concept of users in the
system is actually reflected

00:07:25.200 --> 00:07:26.500
down into the file system.

00:07:26.550 --> 00:07:30.510
Each and every file on
the system has an owner,

00:07:30.630 --> 00:07:34.650
a group that it's part of,
and permission access to those

00:07:34.650 --> 00:07:37.280
files that are associated with it.

00:07:37.360 --> 00:07:41.550
And those same types of capabilities
can be applied to other kinds

00:07:41.550 --> 00:07:43.770
of capabilities in the system.

00:07:43.980 --> 00:07:48.700
BSD is also kind of the environment
within which the file system sits.

00:07:48.700 --> 00:07:55.920
It's based on a VFS architecture,
a standard BSD file system architecture,

00:07:55.920 --> 00:07:58.460
which supports a number of
different file system plug-in

00:07:58.460 --> 00:07:59.790
types and things like that.

00:07:59.920 --> 00:08:03.580
And earlier in the week there was
a session on file systems that

00:08:03.580 --> 00:08:07.450
went into this in more depth,
but it's important to note that the

00:08:07.450 --> 00:08:11.820
file system environment is a subset,
if you will, or rather a subsystem

00:08:11.820 --> 00:08:13.660
of the BSD environment.

00:08:13.900 --> 00:08:15.900
The same is true for networking.

00:08:15.900 --> 00:08:19.530
The capabilities of networking
on Mac OS X are built

00:08:19.530 --> 00:08:21.360
on the BSD Sockets APIs.

00:08:21.360 --> 00:08:24.540
And if you're interested in
learning more about either of

00:08:24.540 --> 00:08:28.220
these particular subsystems of
BSD at the kernel environment,

00:08:28.220 --> 00:08:30.960
there's some really great books
out there by McKusick and a

00:08:30.970 --> 00:08:34.220
couple others that actually go
into some of this architecture.

00:08:34.220 --> 00:08:36.620
Stevens is a good one for networking.

00:08:36.620 --> 00:08:40.370
And there's, again,
both of these are based off

00:08:40.390 --> 00:08:42.950
a standard BSD architecture.

00:08:43.900 --> 00:08:46.650
Before I get on to the user environment,
I do want to make sure people

00:08:46.650 --> 00:08:49.140
are reminded that immediately
following this session,

00:08:49.140 --> 00:08:53.130
there is a session on the Darwin kernel
itself to get more into the low levels

00:08:53.130 --> 00:08:57.200
of the system where they'll talk a lot
more about Mach and the BSD kernel.

00:08:57.200 --> 00:09:00.570
And that's here in this room.

00:09:00.960 --> 00:09:04.270
Moving on to the BSD user environment,
and that's really what's kind

00:09:04.320 --> 00:09:07.370
of important from the standpoint
of most people who are going

00:09:07.370 --> 00:09:09.200
to be writing code against BSD.

00:09:09.200 --> 00:09:13.480
The user environment could be
considered to be another peer

00:09:13.590 --> 00:09:17.040
of Cocoa and Carbon and Classic,
if you will.

00:09:17.040 --> 00:09:19.690
It's another application
environment available to the system,

00:09:19.690 --> 00:09:23.540
and it has a number of services
and facilities that are part of it.

00:09:24.130 --> 00:09:26.560
Certainly,
it includes the command line and

00:09:26.560 --> 00:09:30.550
shell and those kinds of things
that you would expect to be as part

00:09:30.550 --> 00:09:32.660
of a standard Unix environment.

00:09:32.660 --> 00:09:37.950
But it is also where most
of the network client tools,

00:09:38.270 --> 00:09:40.730
things like SSH...

00:09:41.100 --> 00:11:03.300
[Transcript missing]

00:11:03.490 --> 00:11:07.890
They include things like
the POSIX style of APIs.

00:11:07.900 --> 00:11:11.740
Again, things like Pthreads and other
things like that all exist there.

00:11:11.900 --> 00:11:18.690
Your standard math libraries,
C libraries, all of that,

00:11:18.690 --> 00:11:18.690
those are the kinds of things that
are part of the system framework.

00:11:19.920 --> 00:11:23.140
It's worth talking a bit
about how POSIX actually fits

00:11:23.140 --> 00:11:25.140
into the plan here for Apple.

00:11:25.140 --> 00:11:28.240
From our perspective,
it's important to try and make

00:11:28.450 --> 00:11:32.060
sure that the APIs are compliant.

00:11:32.060 --> 00:11:36.710
So as people are working with the system,
we find places where we need

00:11:36.710 --> 00:11:39.750
new APIs or things like that,
we actually will use

00:11:39.750 --> 00:11:41.810
POSIX APIs as a reference point.

00:11:41.850 --> 00:11:43.030
That's usually the basis.

00:11:43.040 --> 00:11:47.100
As Steve said at the keynote on Monday,
the focus around staying within

00:11:47.100 --> 00:11:48.840
standards is a good thing.

00:11:49.420 --> 00:11:52.260
However,
even though compliance is a goal,

00:11:52.260 --> 00:11:54.860
for our perspective,
certification is not something

00:11:54.860 --> 00:11:55.780
that we're trying to do.

00:11:55.780 --> 00:11:59.190
So as you're looking for things,
there's going to be probably a lot

00:11:59.190 --> 00:12:05.890
of little details where we may not
necessarily be completely POSIX because

00:12:05.900 --> 00:12:07.760
that isn't a goal for Apple.

00:12:07.760 --> 00:12:12.010
But again, where there are APIs,
when we introduce things like P-threads,

00:12:12.130 --> 00:12:15.740
like there's also the
POSIX shared memory facilities,

00:12:15.820 --> 00:12:19.200
those are, as we've introduced
those into the system,

00:12:19.360 --> 00:12:24.130
we'll tend to reference the
POSIX APIs as our starting point.

00:12:26.570 --> 00:12:30.510
It's worth noting that the
BSD API set is in fact a first

00:12:30.700 --> 00:12:32.920
class citizen in Mac OS X.

00:12:32.920 --> 00:12:37.560
It's just like Carbon and Cocoa,
it is another application environment.

00:12:37.560 --> 00:12:42.990
It can coexist in fact however with
Carbon and Cocoa and in fact Java because

00:12:42.990 --> 00:12:47.800
the way that it sits is that all of
the application environment selves

00:12:47.800 --> 00:12:49.560
are actually built on these APIs.

00:12:49.740 --> 00:12:52.910
Even though it's a peer of
Carbon and Cocoa if you will and

00:12:52.910 --> 00:12:56.640
the ability of writing kind of
BSD and Unix types of applications,

00:12:56.640 --> 00:13:01.440
the fact is this is the abstraction layer
that actually represents the operating

00:13:01.440 --> 00:13:05.720
system and OS personality of the system
and all of these services are what the

00:13:05.820 --> 00:13:08.050
other application environments use.

00:13:08.100 --> 00:13:12.970
So for things like Cocoa in particular,
you have pretty direct access to the

00:13:13.150 --> 00:13:16.080
BSD and POSIX and system framework APIs.

00:13:18.100 --> 00:16:05.600
[Transcript missing]

00:16:06.330 --> 00:16:12.020
There's a number of little hints,
if you will, about porting your app over.

00:16:12.020 --> 00:16:16.510
One thing, for example,
is we basically discourage the

00:16:16.510 --> 00:16:18.660
use of common variables and such.

00:16:18.660 --> 00:16:21.560
Our implementation for
dynamic libraries is very,

00:16:21.560 --> 00:16:22.660
very different.

00:16:24.240 --> 00:16:29.000
We also do not support the
use of the C++ precompiler,

00:16:29.120 --> 00:16:32.680
at least for the purposes of porting.

00:16:32.700 --> 00:16:37.250
Our precompiler for C++ is very
different than the other environments,

00:16:37.250 --> 00:16:40.180
and you should really
try and avoid its use.

00:16:40.200 --> 00:16:44.010
Again, dynamic libraries are
very different under 10,

00:16:44.010 --> 00:16:47.060
so use of things like
DLopen is not recommended.

00:16:47.060 --> 00:16:48.270
That won't work.

00:16:48.380 --> 00:16:53.840
You should actually look at the DLib
and some of the other facilities.

00:16:54.430 --> 00:16:59.660
Try and create analogous solutions
to the CFPlugins and other

00:16:59.660 --> 00:17:02.460
kinds of services that exist.

00:17:02.690 --> 00:17:06.960
Those dynamic library services
are not the same on 10.

00:17:07.040 --> 00:17:11.670
One thing to note is that GNU Make in
the build environment is the default

00:17:11.670 --> 00:17:14.040
build environment for BSD apps.

00:17:14.040 --> 00:17:16.580
There is BSD Make on the system as well.

00:17:16.580 --> 00:17:22.230
You need to explicitly use it if
that is what your app depends on.

00:17:22.700 --> 00:17:26.610
Also, use of AutoConf,
which is a very common portability

00:17:26.630 --> 00:17:30.700
solution that's available for
many BSD tools and applications,

00:17:30.700 --> 00:17:31.820
usually works.

00:17:31.960 --> 00:17:35.850
And in fact, a lot of the various ports
collections and things like that

00:17:35.850 --> 00:17:39.550
have been modified to run under
and build under Mac OS X already.

00:17:40.670 --> 00:17:43.730
However, if you find that it doesn't,
we actually include as part of

00:17:43.790 --> 00:17:49.350
the developer tools and user lib
exec a set of config recipes,

00:17:49.350 --> 00:17:52.520
if you will,
that will usually allow your app to

00:17:52.520 --> 00:17:54.380
be able to be ported over completely.

00:17:56.540 --> 00:18:02.570
One other thing to note is that in
terms of how the system is laid out and

00:18:02.570 --> 00:18:08.310
when you're building your application,
remember it is built on a BSD,

00:18:08.460 --> 00:18:10.760
basically as a BSD system.

00:18:10.760 --> 00:18:14.210
If you compare this with how,
for example, Linux files are laid out,

00:18:14.370 --> 00:18:16.860
you're going to find that the file
system layout is a little bit different

00:18:16.860 --> 00:18:18.240
between these two environments.

00:18:19.180 --> 00:18:22.120
And our environment certainly
references much more off of the

00:18:22.120 --> 00:18:25.040
BSD environment and you should try and,
if you're going to be

00:18:25.260 --> 00:18:29.110
modifying the build,
you want to lean more towards a BSD set

00:18:29.110 --> 00:18:34.540
of build variables and settings in order
to be able to get your system to work.

00:18:34.620 --> 00:18:37.490
All of these directories that
are mentioned here certainly

00:18:37.490 --> 00:18:40.160
exist on the 10 system,
but you'll probably notice

00:18:40.160 --> 00:18:42.060
they're invisible to the end user.

00:18:42.060 --> 00:18:45.900
This is certainly something that
we're not trying to encourage people

00:18:45.900 --> 00:18:47.690
to use in terms of the layout.

00:18:47.890 --> 00:18:50.730
Some tools and commands that
you get are dependent on some

00:18:50.730 --> 00:18:53.420
of these file system layouts,
but from a perspective of

00:18:53.550 --> 00:18:57.280
applications that you package up,
we would actually try and encourage

00:18:57.320 --> 00:19:00.400
you to package them up as part
of a GUI app and in other places.

00:19:00.400 --> 00:19:02.890
But these standard install places exist.

00:19:02.920 --> 00:19:06.710
Now, kind of to show a little bit more
about how you might actually go

00:19:06.710 --> 00:19:11.110
about porting an application to 10,
I'd like to bring Eric Peyton up.

00:19:17.670 --> 00:19:21.480
And Eric,
one of the things that I'm interested

00:19:21.480 --> 00:19:24.880
in seeing is you're being able
to take an app right kind of

00:19:25.020 --> 00:19:27.040
off the net and build it for 10.

00:19:27.040 --> 00:19:27.970
How do you go about doing that?

00:19:28.150 --> 00:19:29.590
Sure, not a problem.

00:19:29.780 --> 00:19:34.360
So we-- see, do we have the right-- yeah,
we do.

00:19:35.290 --> 00:19:38.470
About a week and a half ago,
two weeks ago, Brett called me and said,

00:19:38.470 --> 00:19:41.910
"Eric, go to the ports collection
and do something cool."

00:19:42.870 --> 00:19:45.120
And I said, okay.

00:19:45.390 --> 00:19:48.160
And I went up to the ports collection,
which is something that I'm

00:19:48.250 --> 00:19:50.640
not intimately familiar with,
but I've played around

00:19:50.640 --> 00:19:51.940
in there a couple times.

00:19:52.010 --> 00:19:53.460
And I had a mission.

00:19:53.480 --> 00:19:58.080
I had been playing around and I have
a very large collection of MP3 files.

00:19:58.110 --> 00:20:00.460
And they were spread over
multiple different directories,

00:20:00.460 --> 00:20:03.160
multiple different disks,
and I wanted to get them

00:20:03.160 --> 00:20:04.680
all into my nice big server.

00:20:04.770 --> 00:20:07.960
So I needed to find ones that were
duplicated all over the place.

00:20:07.960 --> 00:20:10.800
And I knew that I could do this with,
you know,

00:20:10.800 --> 00:20:14.100
a little bit of shell scripting,
but that's not really the point here.

00:20:14.130 --> 00:20:17.440
The point here is to go get
a tool to help me do that,

00:20:17.470 --> 00:20:20.850
bring it down, make it,
maybe put a GUI on it or

00:20:20.850 --> 00:20:22.400
something nice like that.

00:20:22.510 --> 00:20:25.720
So what I did is I went up
into the utilities directory

00:20:25.720 --> 00:20:29.760
up on the ports collection,
up on FreeBSD.org,

00:20:29.760 --> 00:20:32.280
I believe or something,
and I grabbed same file.

00:20:32.280 --> 00:20:34.160
And what same file does is
in multiple different ways,

00:20:34.160 --> 00:20:39.600
it looks at a collection of files
and determines which ones match.

00:20:39.600 --> 00:20:41.420
And one of the interesting
things about same file is that

00:20:41.420 --> 00:20:42.800
it does it from standard in.

00:20:42.800 --> 00:20:46.390
And versus a lot of the other ones
where you have to like enumerate

00:20:46.390 --> 00:20:48.660
all your stuff on your command line.

00:20:48.920 --> 00:20:52.640
And I thought it'd be an interesting
technical challenge to bring this down,

00:20:52.640 --> 00:20:57.370
write a little, make sure that it builds,
and do something interesting with it.

00:20:57.470 --> 00:21:01.460
So I downloaded it, just, you know,
OmniWeb or IE or whatever I used,

00:21:01.460 --> 00:21:02.530
I can't even remember.

00:21:02.630 --> 00:21:05.160
And I brought it down and...

00:21:09.800 --> 00:21:11.200
Let's unpackage it.

00:21:11.300 --> 00:21:16.180
Now this is one of the well-behaved
packages in the fact that I can just,

00:21:16.200 --> 00:21:17.680
oops.

00:21:17.680 --> 00:21:22.880
Once I get in the directory.

00:21:26.110 --> 00:21:28.080
I can just configure it and
it works out of the box.

00:21:28.200 --> 00:21:33.870
Like Brett said, in user libexec,
the config files are quite often

00:21:33.870 --> 00:21:38.030
needed to bring across a package
that hasn't been touched in a while.

00:21:38.120 --> 00:21:40.060
Something that hasn't been
updated recently with the

00:21:40.060 --> 00:21:41.400
more recent config files.

00:21:41.430 --> 00:21:44.180
But this one works out of the box.

00:21:44.180 --> 00:21:46.600
And I type make.

00:21:46.600 --> 00:21:49.710
And if you notice,

00:21:50.930 --> 00:21:55.170
I have an executable that I built
25 seconds ago or whatever it was.

00:21:55.230 --> 00:21:57.340
And that's just pulling down
directly off of the ports collection.

00:21:57.340 --> 00:21:58.900
This is pulling directly
off the ports collection.

00:21:58.900 --> 00:22:00.570
No work on my part.

00:22:00.660 --> 00:22:02.580
No messing with make files.

00:22:02.580 --> 00:22:02.900
Nothing.

00:22:02.900 --> 00:22:03.890
Just everything works.

00:22:04.020 --> 00:22:07.360
In a little bit,
we'll talk a little bit about what the

00:22:07.360 --> 00:22:12.140
ports collection is because certainly
one of the advantages of being part of

00:22:12.140 --> 00:22:16.250
the BSD community is there are actually
thousands of interesting little tools

00:22:16.380 --> 00:22:20.400
and utilities that exist out there within
this thing called the ports collection.

00:22:20.400 --> 00:22:21.490
Yeah.

00:22:22.190 --> 00:22:27.470
And the interesting thing, like I said,
was that same file uses standard

00:22:27.470 --> 00:22:29.060
in to receive its output.

00:22:29.060 --> 00:22:34.180
And so what you do in this case,
I've got a little command line find

00:22:34.300 --> 00:22:38.880
here that will find all the files from
here on down and pipe it into same file.

00:22:38.880 --> 00:22:42.850
And you notice here, we get,
if the font wasn't so big,

00:22:42.850 --> 00:22:47.600
it might actually look like lines,
but it's pretty darn ugly.

00:22:47.600 --> 00:22:49.780
This is not a Mac user experience.

00:22:49.780 --> 00:22:52.780
Yeah, this is not the user experience
that we're looking to provide

00:22:52.950 --> 00:22:54.310
for a Macintosh application.

00:22:54.320 --> 00:22:56.020
So Eric, I expect better than that.

00:22:56.180 --> 00:22:59.780
Yeah, we're gonna try to do something
a little bit better than this.

00:22:59.860 --> 00:23:04.700
You'll notice here, before we move on,
you'll notice the first column,

00:23:04.810 --> 00:23:08.000
if you look along this side here,
this side here is the size

00:23:08.000 --> 00:23:10.160
of the file that it found.

00:23:10.570 --> 00:23:14.080
The column is the first file,
the next column is the second file,

00:23:14.090 --> 00:23:16.300
and there's some extraneous
stuff on the end,

00:23:16.300 --> 00:23:19.310
which doesn't really mean much
unless you read the readme and start

00:23:19.450 --> 00:23:22.070
playing around with the different
options that are available to it.

00:23:22.230 --> 00:23:23.740
But that's not really
what I'm looking for here.

00:23:23.740 --> 00:23:26.680
I just want to find how big are
my files and which ones match

00:23:26.740 --> 00:23:28.440
up and are the exact same size.

00:23:28.460 --> 00:23:29.530
So let me get this right.

00:23:29.660 --> 00:23:31.900
This tool basically takes
two big glumps of files,

00:23:31.900 --> 00:23:34.290
directories full of files,
and points out which ones

00:23:34.290 --> 00:23:36.710
happen to be the same ones,
regardless of what they're

00:23:36.710 --> 00:23:38.020
called or anything.

00:23:38.020 --> 00:23:40.770
Yep, regardless of file name and
that kind of good stuff.

00:23:40.830 --> 00:23:42.630
And like I said,
this could easily have been

00:23:42.630 --> 00:23:45.560
done with shell scripting,
but it's not nearly as interesting.

00:23:48.220 --> 00:23:50.860
So I've already,
let's go ahead and hide that.

00:23:50.890 --> 00:23:54.280
I've already created a project,
but the first thing we want to do,

00:23:54.280 --> 00:23:56.900
when you're coming at something
from a Cocos perspective,

00:23:56.930 --> 00:24:02.170
a lot of times you just
want to make a UI first.

00:24:03.100 --> 00:24:07.240
So I created a project which provided
the main menu.nib which if any of you

00:24:07.240 --> 00:24:11.460
had been to any of the Cocoa sessions
throughout the week you would have

00:24:11.560 --> 00:24:14.000
probably seen that multiple times by now.

00:24:14.210 --> 00:24:17.220
And I've already dragged my
files over and I'll show you

00:24:17.340 --> 00:24:19.190
all the code in a few minutes.

00:24:19.380 --> 00:24:23.540
But let's just start off with something
simple here and let's create a little UI.

00:24:25.310 --> 00:24:27.950
A lot of window.

00:24:27.980 --> 00:24:32.110
Make it nice and big so that we can see
these long paths all over the place.

00:24:32.810 --> 00:24:36.820
We will add a table so
that we can see the output.

00:24:36.860 --> 00:24:39.090
And you've got to love the blue lines.

00:24:40.940 --> 00:24:45.530
And what we really cared about
was in that output we had

00:24:46.020 --> 00:24:47.790
three columns that mattered.

00:24:47.860 --> 00:24:52.090
We had file size,

00:24:59.180 --> 00:25:06.920
The first file name and
the second file name,

00:25:06.970 --> 00:25:08.890
and that provides us with some

00:25:10.740 --> 00:25:11.540
Interesting stuff.

00:25:11.540 --> 00:25:13.660
So if we ended up with output
that looks something like this in

00:25:13.660 --> 00:25:16.240
a table view that we could sort,
that we could mess around with,

00:25:16.300 --> 00:25:20.420
that'd be a little closer
to a reasonable UI.

00:25:23.800 --> 00:25:24.640
- Can you see the second color bigger?

00:25:24.640 --> 00:25:25.500
- Yeah.

00:25:25.510 --> 00:25:25.760
- There we go.

00:25:25.760 --> 00:25:32.780
- So there we've got some nice big fat
columns so we can see all of our paths.

00:25:32.780 --> 00:25:40.110
And we can, for example,

00:25:41.590 --> 00:25:47.730
There's a field that will let us put
in a path that we can type in or,

00:25:47.790 --> 00:25:51.360
how about even better,
we'll add a little button so that we

00:25:51.360 --> 00:25:56.530
can select a directory to start from.

00:25:59.200 --> 00:26:04.570
And I'll throw another button
up here that allows us to...

00:26:08.450 --> 00:26:10.660
Search for duplicates.

00:26:10.660 --> 00:26:17.500
Let's clean this up a little bit.

00:26:17.500 --> 00:26:20.680
Nothing really major,
we're just playing around.

00:26:25.500 --> 00:26:32.900
[Transcript missing]

00:26:33.420 --> 00:26:37.560
So the thing with programming
in Cocoa here is basically what

00:26:37.560 --> 00:26:39.740
you're spending all the time
doing is laying out the UI.

00:26:39.740 --> 00:26:40.870
Yeah, this is the fun part.

00:26:40.990 --> 00:26:44.120
Spend a lot of time doing the fun stuff,
laying it out,

00:26:44.220 --> 00:26:45.800
making it all nice and pretty.

00:26:45.800 --> 00:26:48.970
And Interface Builder,
if you missed the Interface Builder

00:26:48.970 --> 00:26:52.460
tutorials and sessions this week,
you missed a lot of really good stuff.

00:26:52.540 --> 00:26:55.980
It is one really cool tool.

00:26:55.980 --> 00:26:59.540
So here we've got a UI that
I would consider somewhat

00:26:59.540 --> 00:27:01.620
usable for us Unix people.

00:27:02.600 --> 00:27:04.370
Something that we can work off of.

00:27:04.460 --> 00:27:07.270
Let's go ahead and stop right
here and start hooking stuff up

00:27:07.370 --> 00:27:09.000
and figuring out what's going on.

00:27:09.080 --> 00:27:10.500
Stop the window.

00:27:14.200 --> 00:27:16.590
Yeah, we want the window to be visible
when we launch the application.

00:27:16.600 --> 00:27:20.640
I've already created a lot of
the code and we'll walk through

00:27:20.640 --> 00:27:22.340
that together here in a second.

00:27:22.390 --> 00:27:25.340
But let's start off by
creating our controller object.

00:27:25.340 --> 00:27:30.990
Which I've already imported into.

00:27:33.980 --> 00:27:35.620
We have a same file controller object.

00:27:35.870 --> 00:27:38.300
I've already imported the code,
which we'll look at in a minute.

00:27:38.360 --> 00:27:41.200
Let's go ahead and hook up the
portions of that object that

00:27:41.200 --> 00:27:43.560
matter to us at this time.

00:27:45.680 --> 00:27:47.050
Once again, like I said,
if you missed the

00:27:47.050 --> 00:27:50.590
interface builder talks,
I really recommend that you spend some

00:27:50.620 --> 00:27:52.770
time playing around with this tool.

00:27:52.840 --> 00:27:54.380
It's pretty cool.

00:27:54.500 --> 00:27:57.370
So we've got a table for output.

00:27:57.450 --> 00:27:59.800
We have our three columns.

00:28:04.100 --> 00:28:10.240
A size column,
a column for our first file,

00:28:11.900 --> 00:28:13.640
Column for our second file.

00:28:13.700 --> 00:28:20.690
We have a text field
that contains our path.

00:28:21.980 --> 00:28:26.900
We have our button that
begins and ends our tool.

00:28:26.900 --> 00:28:28.540
We can go ahead and stay here.

00:28:28.580 --> 00:28:30.910
Everything's hooked up
coming out of the controller.

00:28:31.020 --> 00:28:34.420
We know what all the output
parts of the UI are gonna be.

00:28:34.460 --> 00:28:35.880
Let's hook up what's
going into the controller,

00:28:35.880 --> 00:28:38.480
the things that make stuff happen.

00:28:38.610 --> 00:28:41.780
So there's two major
portions here that matter.

00:28:41.780 --> 00:28:47.330
And of course the window's so big
you can't see what you're doing here,

00:28:47.330 --> 00:28:47.880
hold on.

00:28:51.200 --> 00:28:52.440
This is an easy way to do it.

00:28:52.440 --> 00:28:58.770
We want to tell the
system to start my tool.

00:28:58.860 --> 00:29:03.800
We want to tell the system,
let me select a directory.

00:29:05.050 --> 00:29:08.740
We'll save our little
nib in our project here.

00:29:08.760 --> 00:29:12.470
And for now,
this is all we really need to do.

00:29:12.550 --> 00:29:14.910
So let's go ahead and go off.

00:29:16.820 --> 00:29:20.850
and open up our project that I previously
had created and let's walk through what

00:29:20.930 --> 00:29:25.740
the code actually does to actually get
this to output information to the GUI.

00:29:25.800 --> 00:29:28.860
So at this point this is all
pretty standard Cocoa stuff.

00:29:28.940 --> 00:29:29.100
Yeah.

00:29:29.350 --> 00:29:31.360
Nothing really unusual at all.

00:29:31.500 --> 00:29:32.870
Nothing unusual at all.

00:29:33.220 --> 00:29:35.790
However, it's not hooked up to BSD.

00:29:36.130 --> 00:29:38.430
There's no tools involved
or anything like that.

00:29:38.500 --> 00:29:42.050
First thing we want to do,
let's go ahead and add our,

00:29:42.100 --> 00:29:43.540
it's already here.

00:29:43.580 --> 00:29:44.970
I'll show you what it is.

00:29:45.100 --> 00:29:50.210
I've already included the same file
binary as a resource of my project.

00:29:50.300 --> 00:29:52.800
Now this is the one you built
that was the command line tool.

00:29:52.800 --> 00:29:53.110
Yeah.

00:29:53.190 --> 00:29:55.850
This is the one that I built
four minutes ago or whatever.

00:29:55.910 --> 00:29:57.500
It's the command line tool.

00:29:57.630 --> 00:30:00.300
The reason that I'm putting it in the
resources directory of my project is

00:30:00.300 --> 00:30:03.720
so that I don't have to have separate
install instructions for my user

00:30:03.810 --> 00:30:07.850
to get the same file UNIX binary
installed on their system in

00:30:07.880 --> 00:30:12.230
/usr/usr/local/bin or anything like that.

00:30:12.430 --> 00:30:16.550
If I include it as part of my project,
they don't ever have to worry about it.

00:30:16.600 --> 00:30:18.290
It just becomes a cohesive whole.

00:30:18.300 --> 00:30:19.670
It all works together.

00:30:19.910 --> 00:30:22.900
Nothing else has to ship and they
don't have to install files into

00:30:22.900 --> 00:30:26.430
locations that they can't delete
them from or don't even know that

00:30:26.430 --> 00:30:28.300
it's happening in the first place.

00:30:28.300 --> 00:30:31.390
So basically if you're going to
wrap something like a UNIX tool,

00:30:31.390 --> 00:30:33.900
unless it's something that
already exists on the system,

00:30:33.900 --> 00:30:35.930
you can bundle,
put it inside your application

00:30:35.930 --> 00:30:39.300
bundle and make it,
you know, just another resource,

00:30:39.300 --> 00:30:40.490
if you will, of your application.

00:30:40.670 --> 00:30:41.500
Most definitely.

00:30:41.500 --> 00:30:45.180
And we really suggest that you do
that to avoid situations where you're

00:30:45.180 --> 00:30:48.700
installing fragmented portions of
your package all over the hard disk.

00:30:48.770 --> 00:30:51.680
It's not very Mac OS-ish to do that.

00:30:51.690 --> 00:30:56.660
It's something that we're looking
to see improvement from you.

00:30:57.720 --> 00:31:01.430
Now, before I began,
or earlier we were talking

00:31:01.440 --> 00:31:04.400
about my different classes
and I had the same file class.

00:31:04.400 --> 00:31:11.320
And the same file class is the portion
of my code that is the controller object

00:31:11.320 --> 00:31:14.940
for what's going on in my interface.

00:31:15.300 --> 00:31:17.090
It consists of two major parts.

00:31:17.300 --> 00:31:20.000
It consists of two methods.

00:31:20.000 --> 00:31:25.950
A method for beginning my
search and a method for finding

00:31:27.260 --> 00:31:28.710
Finding files for the user to do that.

00:31:28.790 --> 00:31:31.990
So they press that button and it fills
in a path so that stuff can happen.

00:31:32.000 --> 00:31:33.340
Let's start off with the selector.

00:31:33.340 --> 00:31:34.910
So the user runs the application.

00:31:34.920 --> 00:31:36.720
The first thing they're going
to do is they're going to go

00:31:36.720 --> 00:31:37.740
off and select a directory.

00:31:37.740 --> 00:31:42.130
And so what I've done here is I've
added in a simple little method here,

00:31:42.130 --> 00:31:45.620
five lines of code,
creating an open panel,

00:31:45.620 --> 00:31:49.520
telling them that they can't choose files
but they can only choose directories.

00:31:49.560 --> 00:31:52.660
I don't want multiple
selection at this time.

00:31:52.790 --> 00:31:56.920
It would be an easy enhancement
to add with some more UI later.

00:31:57.100 --> 00:32:01.850
And then I tell my
system to begin a sheet.

00:32:02.410 --> 00:32:04.690
and David For a directory.

00:32:04.690 --> 00:32:09.300
You'll notice here it's modal
for the window and I've got a

00:32:09.300 --> 00:32:10.660
selector that happens at the end.

00:32:10.660 --> 00:32:14.660
So basically this just pops up a sheet,
lets them pick a directory.

00:32:14.660 --> 00:32:15.930
This pops up a sheet,
lets them do what they want

00:32:15.940 --> 00:32:18.690
to do and everything works.

00:32:18.750 --> 00:32:22.130
Up above the other,
the only other method in this class

00:32:22.410 --> 00:32:29.100
at all is the toggle tool method which
will start or stop your execution.

00:32:29.100 --> 00:32:31.910
If it's not executing,
go ahead and look at the path

00:32:31.970 --> 00:32:34.760
that we had set up in the UI.

00:32:34.760 --> 00:32:36.400
The one the user just selected.

00:32:36.550 --> 00:32:40.310
The one the user selected or the
one that the user had typed in.

00:32:40.510 --> 00:32:42.530
Let's create an array of our arguments.

00:32:42.620 --> 00:32:45.320
The first argument is the path
to our same file resource.

00:32:45.440 --> 00:32:46.780
That's our binary that we had included.

00:32:46.780 --> 00:32:49.290
That's the straight Unix binary,
nothing special there.

00:32:49.420 --> 00:32:51.170
Then we add in some arguments.

00:32:51.200 --> 00:32:54.310
You'll notice here that
I have if verbose check state.

00:32:54.350 --> 00:32:58.110
So if the verbose checkbox is checked,
add an object.

00:32:58.130 --> 00:33:00.220
Well, I never added a verbose checkbox.

00:33:00.220 --> 00:33:04.700
And to show you a little bit about
how easy some of this stuff can be,

00:33:04.700 --> 00:33:10.060
what I'll do is I'll come back here and
I'll add a little checkbox onto my UI.

00:33:16.720 --> 00:33:19.960
Verbose,
or you could name it something much

00:33:20.010 --> 00:33:22.610
more concise than that if you wanted to.

00:33:25.750 --> 00:33:28.560
And we'll hook up the
verbose check there.

00:33:28.560 --> 00:33:30.180
And what this would do,
if you go back to the code

00:33:30.180 --> 00:33:32.480
that we're looking at,
all it's going to do is it's going to

00:33:32.480 --> 00:33:35.000
add an object into my array of dash v.

00:33:35.000 --> 00:33:37.690
And we'll talk about why this array
looks the way that it looks in a

00:33:37.690 --> 00:33:40.110
minute when we get to the process,
what really happens.

00:33:40.160 --> 00:33:43.190
So basically, like most Unix tools,
there's a half a bazillion

00:33:43.190 --> 00:33:46.180
little options and stuff,
and it's very easy in the UI to be able

00:33:46.180 --> 00:33:48.320
to add checkboxes and things like that.

00:33:48.410 --> 00:33:48.960
Most definitely.

00:33:48.960 --> 00:33:51.400
To kind of hide that kind of
stuff away from having people

00:33:51.400 --> 00:33:52.890
having to build command lines.

00:33:53.020 --> 00:33:56.490
It's a lot easier to start,
once you have all this set up,

00:33:56.500 --> 00:33:59.270
and you'll see, it's not very much code.

00:33:59.300 --> 00:34:01.930
Once you have it set up,
it's very easy to add command

00:34:01.930 --> 00:34:05.000
line switches can turn into
GUI switches very rapidly.

00:34:05.020 --> 00:34:07.160
Very little work whatsoever.

00:34:07.160 --> 00:34:11.100
So you'll notice here that at the
beginning of this code segment,

00:34:11.170 --> 00:34:14.490
I've got a current process
equal process alloc init with

00:34:14.490 --> 00:34:16.520
controller self arguments.

00:34:16.520 --> 00:34:20.100
And what that is,
is for every time that we run this,

00:34:20.100 --> 00:34:22.240
we want to have a process run.

00:34:22.810 --> 00:34:24.780
Something is going to
launch this Unix tool,

00:34:24.830 --> 00:34:26.430
get the output, and all that.

00:34:26.480 --> 00:34:29.960
We feed it in with the
arguments at the end.

00:34:29.960 --> 00:34:31.840
I just called them arg v,
but you could name them

00:34:31.840 --> 00:34:32.910
whatever you'd like.

00:34:34.980 --> 00:34:37.090
Down after that,
you'll notice I have an append output.

00:34:37.160 --> 00:34:42.080
This is just a little log so that
you can see that it's begun running.

00:34:42.110 --> 00:34:46.140
And then in this block here,
you will notice that what we

00:34:46.210 --> 00:34:50.410
do is we take the path that the
user had entered or selected,

00:34:50.650 --> 00:34:54.380
Use the NS file manager class,
which will, as a BSD programmer,

00:34:54.380 --> 00:34:56.060
probably become a very
good friend of yours.

00:34:56.070 --> 00:34:59.320
It's a general purpose
file manager class.

00:34:59.320 --> 00:35:04.960
We retrieve all of the paths at,
or the sub-paths from that path.

00:35:05.030 --> 00:35:10.210
We even do some nice stuff like
we expand the tilde in path.

00:35:10.290 --> 00:35:12.930
If you have BSD users,
they very well might want to use

00:35:12.950 --> 00:35:16.500
tilde for their home directory and
not have to go selecting all over the

00:35:16.500 --> 00:35:20.400
place with a file browser because some
people type faster than they click.

00:35:20.680 --> 00:35:23.080
Usually the tilde is something
expanded by the shell.

00:35:23.080 --> 00:35:26.120
Yeah, we have no shell performing
any of the actions here,

00:35:26.220 --> 00:35:28.980
so there's no possibility
for expansion there.

00:35:29.040 --> 00:35:33.170
If I can interrupt,
one thing that's worth noting is there's

00:35:33.170 --> 00:35:38.190
a huge number of facilities within
the foundation portion of Cocoa that

00:35:38.320 --> 00:35:42.430
actually wrap a lot of and do a lot
of the services that you expect to

00:35:42.430 --> 00:35:45.300
be able to talk to background Unix apps.

00:35:45.300 --> 00:35:48.930
Things like expanding tildes,
things like breaking up command lines

00:35:48.930 --> 00:35:51.840
into specific... individual arguments.

00:35:51.840 --> 00:35:54.760
Yeah, breaking up command lines,
finding your home directory,

00:35:54.760 --> 00:35:57.240
finding the current user,
all that kind of stuff are

00:35:57.240 --> 00:35:58.840
all portions of foundation.

00:35:58.970 --> 00:36:01.790
This specific case is
a method on NSString,

00:36:01.800 --> 00:36:06.630
but a lot of them are in different
portions of the foundation classes,

00:36:06.660 --> 00:36:10.910
and they're very, very useful to somebody
who's trying to leverage BSD.

00:36:11.200 --> 00:36:14.620
You'll notice here what
we have is to our process,

00:36:14.790 --> 00:36:18.100
so we get all of our paths,
we enumerate through our paths,

00:36:18.110 --> 00:36:23.380
and we pass our process on standard in
the string that we had just expanded.

00:36:27.500 --> 00:36:30.800
And then when we're finished with all of,
once we've spun through all of them,

00:36:30.800 --> 00:36:33.830
we pass it on, we tell the process, okay,
I'm done writing,

00:36:33.840 --> 00:36:35.310
go ahead and go off and do your thing.

00:36:35.340 --> 00:36:38.480
This close writing is,
I guess you could say,

00:36:38.590 --> 00:36:42.590
analogous to hitting Control-D at
the end of messing around a cat.

00:36:42.700 --> 00:36:46.720
I'm done messing around, go do something.

00:36:48.460 --> 00:36:52.030
And that's all it is in
our same file class itself.

00:36:52.180 --> 00:36:56.140
There's nothing else to it really,
except for handling of the output,

00:36:56.200 --> 00:36:58.970
which we've abstracted
into the superclass.

00:36:59.060 --> 00:37:03.500
So we've got a class that
controls them pushing buttons,

00:37:03.810 --> 00:37:04.600
But what happens?

00:37:04.700 --> 00:37:06.960
Where does all this go on?

00:37:07.000 --> 00:37:09.970
I don't see any work going on here.

00:37:10.430 --> 00:37:12.910
So you'll notice that
I've got another class,

00:37:12.910 --> 00:37:15.120
Process, and a class, Simple Tool.

00:37:15.120 --> 00:37:18.020
Simple Tool is the parent
class for the same file.

00:37:18.020 --> 00:37:22.120
And the reason that it's abstracted
out was because the Simple Tool class

00:37:22.120 --> 00:37:25.820
is an abstraction that I've used
in multiple different places and

00:37:25.820 --> 00:37:27.630
it made it very quick and easy.

00:37:27.630 --> 00:37:31.680
I just literally dumped this class in,
object-oriented programming,

00:37:31.770 --> 00:37:32.930
let's use it again.

00:37:32.930 --> 00:37:36.740
And what it does is it allows,
it's the thing that handles the output

00:37:36.760 --> 00:37:39.440
and passes the output back to the UI.

00:37:39.440 --> 00:37:42.120
And there's a very common set
of abstractions when you're

00:37:42.120 --> 00:37:45.350
trying to wrap a Unix tool,
which is passing a set of arguments

00:37:45.350 --> 00:37:48.970
and information into the tool and
then grabbing the output of the

00:37:48.970 --> 00:37:52.680
tool and processing in some way
that's appropriate for the UI.

00:37:52.680 --> 00:37:57.250
So you'll notice here that the only thing
that this thing really does is have,

00:37:57.250 --> 00:38:00.710
the process has started, okay,
let's create some strings

00:38:00.810 --> 00:38:03.800
to stuff the data in,
and the process is finished,

00:38:03.900 --> 00:38:06.970
let's create some arrays
to stick the output in.

00:38:07.060 --> 00:38:08.840
But we still don't have the glue.

00:38:09.440 --> 00:38:12.750
Okay, we can get the output,
we can tell them what the input is,

00:38:12.830 --> 00:38:14.500
but what's in the middle?

00:38:14.520 --> 00:38:17.880
And that's what my process class is for.

00:38:18.270 --> 00:38:23.590
So, Cocoa provides in its foundation
class a couple fundamental tools that

00:38:23.620 --> 00:38:25.800
could be used by BSD programmers.

00:38:25.840 --> 00:38:32.200
NSPipe, NSFileHandle, NSTask,
and there's a bunch more.

00:38:32.200 --> 00:38:35.480
I expect that all of you will
go home and do your homework.

00:38:35.690 --> 00:38:37.590
Start playing around with them.

00:38:37.740 --> 00:38:40.460
In the case here,
if you remember earlier,

00:38:40.620 --> 00:38:45.260
we created our array of paths
and everything and put them,

00:38:45.260 --> 00:38:50.120
or our array of control and put it
into an argument that we pass to a knit

00:38:50.330 --> 00:38:53.280
with controller for the process class.

00:38:53.300 --> 00:38:55.140
And here you can see exactly what we do.

00:38:55.140 --> 00:38:58.350
We just retain those arguments
and we create a write pipe.

00:38:58.590 --> 00:39:01.820
The write pipe, you see there,
it's NSPipePipeRetain,

00:39:01.820 --> 00:39:05.140
creates a pipe that we can
use to pipe to standard in.

00:39:05.800 --> 00:39:08.510
If you look down into
the next major function,

00:39:08.510 --> 00:39:11.920
you'll see when they click on start,
when they click on toggle

00:39:11.920 --> 00:39:15.150
tool and it begins,
we gather all the arguments,

00:39:15.150 --> 00:39:18.140
we tell it to start the process.

00:39:18.900 --> 00:39:20.420
We create an NSTask.

00:39:20.730 --> 00:39:25.140
One of the main purposes of NSTask is
to wrap this kind of work for you so

00:39:25.170 --> 00:39:27.400
that you don't have to do interesting,
neat,

00:39:27.400 --> 00:39:31.540
but boring things like fork exec and
sitting around and waiting for output.

00:39:31.680 --> 00:39:36.040
NSTask does it all for you and provides
all these tools in an object-oriented

00:39:36.050 --> 00:39:38.360
manner so that you can access them.

00:39:38.510 --> 00:39:40.960
You can set the standard output.

00:39:40.990 --> 00:39:43.500
You can set the standard error.

00:39:43.740 --> 00:39:45.260
You can set the standard input.

00:39:45.310 --> 00:39:49.210
In our case, like I said earlier,
same file presented a interesting

00:39:49.210 --> 00:39:52.600
case because it needed standard
in versus most things which just

00:39:52.610 --> 00:39:54.620
pass everything on the command,
or a lot of tools that pass

00:39:54.620 --> 00:39:55.950
everything on the command line.

00:39:56.110 --> 00:39:59.890
So we've got a pipe for, you know,

00:40:00.110 --> 00:40:02.780
For standard in,
and we've got the same pipe for

00:40:02.780 --> 00:40:05.310
standard output and standard error.

00:40:05.500 --> 00:40:06.710
We tell it the launch path.

00:40:06.840 --> 00:40:09.260
You'll notice here the arguments
is objected index zero,

00:40:09.260 --> 00:40:11.330
which is somewhat
hard-coded in this case.

00:40:11.340 --> 00:40:13.620
But if you remember back
when I created the array,

00:40:13.620 --> 00:40:16.930
the first thing that I passed was
the path to the same file binary.

00:40:16.940 --> 00:40:20.270
So my launch path is the entire
path to the same file binary,

00:40:20.340 --> 00:40:22.180
the little bitty Unix tool.

00:40:22.180 --> 00:40:23.500
You're building up the command line.

00:40:23.500 --> 00:40:24.960
I'm building up the
command line right here.

00:40:24.960 --> 00:40:27.020
The next thing I do is set the arguments.

00:40:27.060 --> 00:40:32.790
And I want everything else except
the path to the Unix command line.

00:40:33.180 --> 00:40:35.360
So I subarray with range,
and I start at one,

00:40:35.360 --> 00:40:36.620
and I just go to the end.

00:40:36.680 --> 00:40:40.390
So this one line right here
will easily allow you to just

00:40:40.460 --> 00:40:45.700
keep on adding on arguments,
dash v, dash d, dash 4, 1000,

00:40:45.790 --> 00:40:48.780
or whatever the arguments
need to be to that Unix tool.

00:40:48.780 --> 00:40:51.040
You can add them on without
having to change your process

00:40:51.040 --> 00:40:52.420
class in any way whatsoever.

00:40:54.140 --> 00:40:56.240
You then need to register
with the notification center.

00:40:56.240 --> 00:40:59.440
And if you go in and
look at NS file handle,

00:40:59.440 --> 00:41:02.190
NS pipe, and NS task,
you'll notice there are some standardized

00:41:02.380 --> 00:41:03.840
themes throughout all of them.

00:41:03.870 --> 00:41:06.350
But one of them is the fact that you
can register with the notification

00:41:06.410 --> 00:41:09.940
center to see when something's done,
to see when a task terminates,

00:41:10.190 --> 00:41:13.070
and that kind of stuff.

00:41:13.400 --> 00:41:17.270
Here you'll see that I'm
registering for NS file handle

00:41:17.280 --> 00:41:18.990
read completion notification.

00:41:19.100 --> 00:41:21.560
When the file handle has
received some output,

00:41:21.570 --> 00:41:23.310
let me know.

00:41:23.800 --> 00:41:27.350
Basically wanting to know when all
the output from the tool comes along.

00:41:27.570 --> 00:41:28.380
Sure.

00:41:28.380 --> 00:41:30.040
When the tool starts
spitting stuff at me,

00:41:30.040 --> 00:41:31.980
I want to know what it is.

00:41:31.980 --> 00:41:34.320
The next thing I want to do
is I want to tell it to go.

00:41:34.320 --> 00:41:37.060
And that consists of two
parts in this situation.

00:41:37.060 --> 00:41:39.260
We tell it to read in
background and notify.

00:41:39.260 --> 00:41:41.070
That tells us, yes.

00:41:41.430 --> 00:41:45.290
Your job is to wait for background
notification and then tell me.

00:41:45.380 --> 00:41:48.140
And then we tell it, launch.

00:41:48.330 --> 00:41:49.390
Pretty simple.

00:41:49.550 --> 00:41:51.390
Stop process is even simpler.

00:41:51.520 --> 00:41:55.240
We tell it, OK,
remove my notification for reading,

00:41:55.240 --> 00:41:57.700
and let's terminate the task.

00:41:57.960 --> 00:42:01.270
The only other interesting thing in
here is what happens when I get data.

00:42:01.550 --> 00:42:03.840
When I told it that I wanted
to register for notification,

00:42:03.840 --> 00:42:06.900
I gave it a selector to a method.

00:42:07.370 --> 00:42:10.960
Notify me when I get data by
calling my get data method.

00:42:10.970 --> 00:42:15.280
And you'll notice here all it does is it
takes all this stuff and then it passes

00:42:15.280 --> 00:42:19.850
back to the controller that I registered
at the beginning a penned output.

00:42:21.190 --> 00:42:23.440
So we can get the output.

00:42:23.480 --> 00:42:25.800
This class does all the work.

00:42:25.830 --> 00:42:29.280
The only other-- I guess this is
another small but interesting thing.

00:42:29.280 --> 00:42:31.580
You'll notice here the
insert string method.

00:42:31.580 --> 00:42:35.490
This is the method that goes to the write
pipe and does standard in for all intents

00:42:35.490 --> 00:42:38.180
and purposes to our little Unix tool.

00:42:38.190 --> 00:42:42.180
And all it does is it writes
the data in UTF-8 encoding,

00:42:42.180 --> 00:42:45.800
and then it passes a slash n.

00:42:45.940 --> 00:42:49.790
New Line on so that it knows
that all the writing is done.

00:42:49.790 --> 00:42:52.920
And then when we told it to close
writing at the very last thing,

00:42:53.030 --> 00:42:55.880
Control D as I explained earlier,
let's close our file.

00:42:55.900 --> 00:42:58.100
We're done piping stuff to standard in.

00:42:58.290 --> 00:42:59.700
Go off and run and do stuff.

00:42:59.760 --> 00:43:03.860
So 99% of what you just talked
about is basically standard for

00:43:03.860 --> 00:43:06.160
talking to any Unix application.

00:43:06.160 --> 00:43:09.490
There's nothing unusual about this
particular tool that we're running.

00:43:09.490 --> 00:43:12.650
It's basically,
there's a couple of small methods

00:43:12.650 --> 00:43:17.160
that you use to be able to pass
information to the background tool.

00:43:17.160 --> 00:43:21.090
There's a small number of methods to
be able to read it in and parse it.

00:43:21.190 --> 00:43:25.550
And some basic stuff for wrapping the
management of that particular task.

00:43:25.560 --> 00:43:28.200
But the stuff that you've shown
me so far doesn't have anything

00:43:28.200 --> 00:43:33.060
really at all to do with... No,
this is very tool agnostic.

00:43:33.060 --> 00:43:36.510
If you know the... We ship some
applications that are based

00:43:36.510 --> 00:43:37.710
on the same style of concept.

00:43:37.790 --> 00:43:41.160
Network Utility, for example,
uses multiple different Unix

00:43:41.160 --> 00:43:43.410
tools to do the same type of work.

00:43:43.420 --> 00:43:48.140
And this is the easiest, fastest,
and most productive way

00:43:48.140 --> 00:43:50.280
to do this kind of thing.

00:43:50.850 --> 00:43:55.170
So now we know we have the controller
that gets the information from the

00:43:55.170 --> 00:43:57.880
user and tells the process to run.

00:43:57.880 --> 00:44:01.140
The process runs and can tell
the controller the output.

00:44:01.140 --> 00:44:08.400
The only other interesting thing
left is back in here we have a tool.

00:44:08.400 --> 00:44:10.470
So simple tool,
which was our parent class,

00:44:10.700 --> 00:44:12.520
knows how to put output
into a table view.

00:44:12.520 --> 00:44:16.540
And for this specific case it's a
little hard-coded because it's a demo.

00:44:16.540 --> 00:44:18.930
Basically all it's doing though
is just taking the output and

00:44:18.930 --> 00:44:20.190
formatting it up for the UI.

00:44:20.440 --> 00:44:24.440
It takes the output, it creates a row,
an array of rows.

00:44:24.440 --> 00:44:27.160
Those rows contain arrays of output.

00:44:27.190 --> 00:44:29.600
The size of the file,
the first file name and

00:44:29.720 --> 00:44:30.820
the second file name.

00:44:30.820 --> 00:44:36.460
And this is a table view delegate,
which if you look back here in the UI,

00:44:36.460 --> 00:44:39.980
we had our table view.

00:44:39.980 --> 00:44:45.610
And our table view needs to be hooked up.

00:44:50.040 --> 00:44:51.410
to a delegate and a data source.

00:44:51.470 --> 00:44:54.290
Now, what that does,
if you're familiar with

00:44:54.290 --> 00:44:56.900
AppKit programming,
a data source provides data

00:44:56.950 --> 00:44:58.200
to an object that requests it.

00:44:58.340 --> 00:45:02.070
Table views, browsers, those kind of,
I guess you could call

00:45:02.190 --> 00:45:03.920
heavier weight Cocoa objects.

00:45:03.980 --> 00:45:06.020
Quite a few of them have data sources.

00:45:06.090 --> 00:45:08.560
Delegation is a concept
we won't go into here,

00:45:08.610 --> 00:45:11.650
but it's a way of having an
object perform actions on

00:45:11.650 --> 00:45:13.420
the behalf of other objects.

00:45:13.420 --> 00:45:16.960
Our table view needs to get
the data from something.

00:45:16.990 --> 00:45:20.590
And so what we would set it up as is
that it will get the data from our--

00:45:21.310 --> 00:45:22.640
It just knows to ask your class.

00:45:22.640 --> 00:45:25.620
It knows to ask my class for the
data when I'm ready to have it draw.

00:45:25.620 --> 00:45:29.040
It only matters, there's only two methods
that truthfully matter,

00:45:29.040 --> 00:45:31.810
and it's the table view wants to know
how many rows do I have so it can

00:45:31.850 --> 00:45:35.410
start setting up its scroll bars,
know how much amount of,

00:45:35.470 --> 00:45:37.420
the amount of room it needs
to allocate and so on.

00:45:37.440 --> 00:45:41.940
And then what value do I put
into this row for this column?

00:45:41.940 --> 00:45:45.690
And you notice here,
if table column is the size column,

00:45:45.750 --> 00:45:49.440
then I want from my row array
the very first indexed object.

00:45:49.460 --> 00:45:50.620
I want my size.

00:45:51.300 --> 00:45:56.150
You can use table column identifiers
to get much better granularity than

00:45:56.150 --> 00:46:01.360
this in slightly less hackish terms,
but this will do just as well.

00:46:01.520 --> 00:46:04.110
Okay, I'm in management,
I'd like to see the end result, show me.

00:46:04.140 --> 00:46:05.260
End result.

00:46:05.260 --> 00:46:06.860
So let's build our project here.

00:46:14.270 --> 00:46:14.890
And he's in management.

00:46:14.940 --> 00:46:16.330
You'll all notice that
I built with no warnings,

00:46:16.490 --> 00:46:16.900
no errors.

00:46:16.960 --> 00:46:21.590
So let's go ahead and select a directory.

00:46:21.650 --> 00:46:23.600
And this should all work.

00:46:24.420 --> 00:46:26.680
Let's select a directory that
we know has some duplicates,

00:46:26.750 --> 00:46:27.880
otherwise this would be very boring.

00:46:27.880 --> 00:46:31.200
And you'll notice here
I had a select directory.

00:46:31.200 --> 00:46:32.150
I filled in the path.

00:46:32.220 --> 00:46:35.590
I could have typed that path in as well,
but got to show that the sheet works.

00:46:35.720 --> 00:46:37.690
Let's see if this works.

00:46:37.720 --> 00:46:40.600
Ooh, there it goes.

00:46:40.700 --> 00:46:42.460
I must not have waited long enough.

00:46:42.480 --> 00:46:47.200
So you'll notice here what it did is it
went off and it grabbed all that output.

00:46:47.200 --> 00:46:50.920
And this is essentially the exact
same output with some typo errors,

00:46:50.990 --> 00:46:52.430
it looks like, stuffed in there.

00:46:52.440 --> 00:46:53.710
Probably parsing.

00:46:54.020 --> 00:46:55.640
It's, uh, that's bug fixing.

00:46:55.640 --> 00:46:59.330
This is feature complete,
but not bug finished.

00:47:01.700 --> 00:47:04.210
You'll notice here that it went
off and it noticed that I have a

00:47:04.210 --> 00:47:08.100
same file binary inside my app,
which is what I had requested.

00:47:08.100 --> 00:47:12.090
And if you look here
in the second column,

00:47:12.920 --> 00:47:17.200
There's also a same file binary
in both the root of my app,

00:47:17.290 --> 00:47:19.760
which I had copied there
earlier on accident,

00:47:19.760 --> 00:47:23.340
and a same file binary in the same
file directory of what I downloaded.

00:47:23.340 --> 00:47:24.940
You'll notice that they're
all exactly the same.

00:47:24.940 --> 00:47:27.140
And in this case, they're all the exact
same name and everything.

00:47:27.140 --> 00:47:29.980
But if we would have renamed one of them,
it would have shown it up

00:47:30.080 --> 00:47:31.450
anyway and done its magic.

00:47:31.460 --> 00:47:34.040
If we had turned on the verbose flag,
in this case,

00:47:34.040 --> 00:47:37.220
we don't have any place for the
verbose output to really go.

00:47:37.220 --> 00:47:38.400
We could have dumped it to standard out.

00:47:38.580 --> 00:47:41.620
But the verbose output doesn't
really belong inside of a table view.

00:47:42.640 --> 00:47:45.260
The next steps for what you
could do in here are things

00:47:45.260 --> 00:47:46.950
like adding in flags for size.

00:47:47.040 --> 00:47:49.820
The dash S flag, I believe,
is the same file.

00:47:49.820 --> 00:47:51.100
Then you put in 10,000.

00:47:51.100 --> 00:47:53.920
That means I don't care about
anything underneath 10,000 bytes.

00:47:54.000 --> 00:47:56.830
So all it would have shown
were these first two rows.

00:47:56.900 --> 00:48:00.430
That would have literally been
four more minutes worth of work,

00:48:00.430 --> 00:48:01.670
but my time is over.

00:48:01.680 --> 00:48:03.220
Thank you.

00:48:09.740 --> 00:48:11.200
Thank you, Eric.

00:48:11.270 --> 00:48:13.800
I think the important
key here is that there's,

00:48:13.800 --> 00:48:16.340
as you see,
a bit of work around kind of setting up

00:48:16.340 --> 00:48:20.580
the standard structure for being able
to talk to a background BSD application

00:48:20.580 --> 00:48:24.230
in terms of being able to manage
sending data to it and getting it back.

00:48:24.300 --> 00:48:28.940
But Cocoa does an enormous amount of the
work here in terms of being able to allow

00:48:28.940 --> 00:48:33.820
you to parse the arguments and tear them
apart and basically send them to a UI.

00:48:33.820 --> 00:48:38.530
At this particular point, it's UI polish,
and that really is the fun part.

00:48:38.620 --> 00:48:42.450
But the neat thing is being able to take,
you know, something like a BSD background

00:48:42.450 --> 00:48:45.440
application and even just starting
with this as a starting point,

00:48:45.440 --> 00:48:49.380
being able to support just about
anything you can imagine that runs there.

00:48:49.380 --> 00:48:53.310
And this is of a particularly valuable
and important feature for Mac OS X,

00:48:53.330 --> 00:48:56.910
being able to leverage these kinds
of capabilities and tools in the

00:48:57.080 --> 00:49:00.880
background of your application and
being able to provide them forward

00:49:00.880 --> 00:49:04.420
to our end users in such a way
that doesn't require them to learn,

00:49:04.420 --> 00:49:07.600
you know,
something like Emacs or the command line.

00:49:07.600 --> 00:49:08.540
So I can move on.

00:49:08.560 --> 00:49:11.200
Let's move on back to the slides.

00:49:11.200 --> 00:49:12.610
Thank you.

00:49:12.900 --> 00:51:58.200
[Transcript missing]

00:52:03.910 --> 00:52:04.740
Does this work?

00:52:04.740 --> 00:52:05.360
Yeah.

00:52:05.430 --> 00:52:08.430
So as Brett said,
they incorporated quite a bit of

00:52:08.430 --> 00:52:12.900
FreeBSD technology into Darwin,
I guess, several years ago when the

00:52:13.090 --> 00:52:15.040
project was first launched.

00:52:15.130 --> 00:52:18.390
But I don't think that
collaboration certainly ends there.

00:52:18.400 --> 00:52:20.860
And there are a lot of
interesting things that we are

00:52:20.970 --> 00:52:23.500
doing at FreeBSD and have done.

00:52:23.500 --> 00:52:26.490
And I think that there's
quite a bit of room for

00:52:26.530 --> 00:52:27.980
collaboration in both directions.

00:52:27.980 --> 00:52:31.800
So I'll talk about it a little
bit from the FreeBSD perspective.

00:52:33.690 --> 00:52:39.010
So one of the nicest things I find
from a developer about FreeBSD is

00:52:39.010 --> 00:52:40.920
the source tree organization.

00:52:40.920 --> 00:52:42.940
And that may seem like
kind of a small thing,

00:52:42.940 --> 00:52:47.110
but it's actually of tremendous
value for a lot of reasons.

00:52:47.120 --> 00:52:49.730
One thing it gives us
is a common taxonomy.

00:52:49.740 --> 00:52:51.660
It gives us a place for everything to go.

00:52:51.660 --> 00:52:55.560
It gives us a place for new things to be
incorporated into the tree without having

00:52:55.560 --> 00:52:57.640
to argue for four months about it first.

00:52:58.480 --> 00:53:01.380
And it also means that there's
a one-to-one correspondence

00:53:01.550 --> 00:53:03.190
between where binaries are.

00:53:03.200 --> 00:53:05.630
For example, binLS,
you know it's going to

00:53:05.700 --> 00:53:07.270
be in user source binLS.

00:53:07.280 --> 00:53:09.410
So it's very easy to find stuff.

00:53:09.480 --> 00:53:12.990
And it also segregates
all of the code that's,

00:53:12.990 --> 00:53:16.790
for example,
under the GPL or is export restricted

00:53:17.030 --> 00:53:21.760
into concise areas of the tree where
you know exactly where it is and you

00:53:21.760 --> 00:53:25.980
can firewall it off if you're making a
product that requires the BSD license,

00:53:25.980 --> 00:53:29.060
for example,
or you're exporting it to Croatia and

00:53:29.080 --> 00:53:30.980
then there's issues behind that.

00:53:31.040 --> 00:53:35.620
The source tree also handles,
it encodes all of the bootstrapping

00:53:35.710 --> 00:53:38.960
issues so that if a binary
depends on a certain library,

00:53:38.960 --> 00:53:41.900
it is smart enough to go build
that library first before

00:53:41.900 --> 00:53:44.020
building the binaries in question.

00:53:44.020 --> 00:53:48.610
And that removes a lot of the burden
on the developer of figuring out

00:53:48.640 --> 00:53:50.160
exactly how things are tied together.

00:53:50.160 --> 00:53:51.780
And that's very important.

00:53:51.780 --> 00:53:57.060
We also have a distinction
between vendor.

00:53:57.080 --> 00:53:59.750
We use vendor-supplied software and
stuff that we maintain ourselves.

00:53:59.800 --> 00:54:02.340
We use CVS very aggressively.

00:54:02.340 --> 00:54:07.400
And one of the things we do, for example,
is when a new version of GCC comes out,

00:54:07.650 --> 00:54:09.380
which is a vendor-supplied
bit of software,

00:54:09.380 --> 00:54:13.090
we import it on a vendor branch
and we have all of our own

00:54:13.120 --> 00:54:15.080
changes on the project branch.

00:54:15.080 --> 00:54:17.960
So we can keep the two
change sets distinct.

00:54:18.000 --> 00:54:20.830
And so we know exactly what
the GNU people have changed.

00:54:20.840 --> 00:54:22.410
Whoops, my microphone fell off.

00:54:22.460 --> 00:54:23.260
I'll just hold it.

00:54:23.410 --> 00:54:26.740
We know what the GNU people have
changed versus what we've had to change.

00:54:27.080 --> 00:54:29.820
And this makes ongoing
maintenance a lot easier.

00:54:29.820 --> 00:54:35.720
Also, we provide a series of
targets in the source tree,

00:54:35.720 --> 00:54:40.430
like world and kernel and update,
which remove a lot of the hair

00:54:40.430 --> 00:54:43.660
of knowing exactly what order
to build things in again.

00:54:43.660 --> 00:54:46.630
So it gives us a common reference point.

00:54:46.670 --> 00:54:49.340
If we have developers who are
complaining that they're seeing

00:54:49.340 --> 00:54:51.720
some strange anomalous behavior,
we can say, well,

00:54:51.720 --> 00:54:53.060
when did you last build world?

00:54:53.060 --> 00:54:54.900
And we know exactly what that means.

00:54:54.920 --> 00:54:56.920
We know that they've gone and
they've updated all of it.

00:54:57.140 --> 00:54:59.080
They have their binaries,
their include files,

00:54:59.080 --> 00:55:01.610
their libraries and so forth
from a common reference point.

00:55:01.620 --> 00:55:04.870
It also makes it easier
for newbie developers,

00:55:04.950 --> 00:55:06.960
people who are maybe not so
familiar with the project,

00:55:07.010 --> 00:55:08.810
they may be very skilled
at C or whatever,

00:55:08.850 --> 00:55:11.880
but they don't want to have to learn
the ins and outs of our build system.

00:55:11.880 --> 00:55:14.510
They just want to grab the source tree,
type make world,

00:55:14.640 --> 00:55:16.810
watch the whole thing work,
and be done with it.

00:55:16.850 --> 00:55:21.500
So these are all things I hope
that will eventually in some way,

00:55:21.500 --> 00:55:24.920
shape or form, migrate over to Darwin.

00:55:25.750 --> 00:55:29.280
As I said, we also,
using CVS very aggressively,

00:55:29.280 --> 00:55:31.730
have come up with a number of interesting
ways of distributing the bits.

00:55:31.880 --> 00:55:35.820
We have something called CVSup,
which understands CVS natively.

00:55:35.820 --> 00:55:40.340
That means that when you run it,
it pulls over just the deltas that

00:55:40.340 --> 00:55:43.760
have been added to the repository
since the last time you ran it.

00:55:43.860 --> 00:55:46.760
And that means that it preserves
your own local changes.

00:55:46.760 --> 00:55:50.660
So if you have a local branch
in your own CVS repository,

00:55:50.700 --> 00:55:53.630
it's not just going to come
and splat a file on top of it.

00:55:53.880 --> 00:55:55.900
It's going to interleave
the deltas together.

00:55:55.900 --> 00:55:57.980
And that's very valuable.

00:55:57.980 --> 00:56:00.870
It also uses rsync and some
other advanced protocols,

00:56:00.950 --> 00:56:03.100
so it's very fast and very efficient.

00:56:03.100 --> 00:56:07.110
And if you run it on a daily basis,
it takes maybe five, ten minutes to run,

00:56:07.150 --> 00:56:09.180
and you're completely synced up.

00:56:09.220 --> 00:56:11.830
It also understands how
to check things out.

00:56:11.900 --> 00:56:16.330
So you can use CVSup to check
out a branch of the repository.

00:56:16.370 --> 00:56:19.980
So if you don't want the repository bits,
but you want a certain branch of FreeBSD,

00:56:19.980 --> 00:56:22.830
you can ask CVSup just to give
you that and keep it up to date.

00:56:23.880 --> 00:56:26.540
We also support some esoteric
methods of getting the bits,

00:56:26.540 --> 00:56:30.470
like CTM, which actually bundles the
patches together and checksums

00:56:30.470 --> 00:56:31.620
them and sends them through mail.

00:56:31.620 --> 00:56:35.480
So some of our developers in Estonia
and places like that who don't

00:56:35.480 --> 00:56:38.890
have good hardwired connections
or who have very infrequent

00:56:38.920 --> 00:56:40.800
connectivity can sync up that way.

00:56:40.800 --> 00:56:45.360
And then, of course,
we support the classic AnonCVS methods.

00:56:45.360 --> 00:56:49.500
And we also have a CVS web interface
so that you can see very colorfully

00:56:49.500 --> 00:56:52.180
what's changed at any particular point.

00:56:56.120 --> 00:56:58.660
We also support multiple
branches of development,

00:56:58.660 --> 00:56:59.980
as I said earlier.

00:56:59.980 --> 00:57:05.090
We have stable branches,
which are sort of more tried and tested

00:57:05.090 --> 00:57:08.020
branches that we aim at the end users.

00:57:08.020 --> 00:57:11.500
And we have current,
which is the bleeding, spurting,

00:57:11.500 --> 00:57:16.100
severed artery edge of development,
which is guaranteed to hurt you.

00:57:16.100 --> 00:57:18.370
And so we aim the
developers more at that.

00:57:18.580 --> 00:57:19.560
But we do supply both.

00:57:20.120 --> 00:57:23.410
So this means that we don't
have to freeze out developers

00:57:23.410 --> 00:57:27.600
from doing active and,
in some cases, experimental development.

00:57:27.600 --> 00:57:30.860
That development can always occur
at whatever pace it wants to.

00:57:30.860 --> 00:57:35.660
But the people, the yahoos of the world,
don't have to suffer from that.

00:57:35.700 --> 00:57:39.250
They get their changes
backported from the current

00:57:39.250 --> 00:57:41.640
branch at a much more slow pace.

00:57:41.640 --> 00:57:43.840
And they also get things tested.

00:57:43.840 --> 00:57:46.560
You don't just bring things immediately
over into the stable branches.

00:57:46.560 --> 00:57:48.740
There's a methodology that
requires a certain amount

00:57:48.740 --> 00:57:50.070
of testing and integration.

00:57:50.120 --> 00:57:54.080
On the flip side,
it's also a real pain in

00:57:54.080 --> 00:57:57.060
the butt to backport stuff.

00:57:57.080 --> 00:58:00.830
And CVS isn't tremendously good
at holding your hand in that.

00:58:00.890 --> 00:58:03.460
So that's an ongoing
project cost that we incur.

00:58:03.480 --> 00:58:07.550
Nor is it very easy to synchronize
things across repositories.

00:58:07.560 --> 00:58:13.560
So we have had a lot of initiatives that
have kind of fallen flat to share codes,

00:58:13.560 --> 00:58:17.600
say, between NetBSD and FreeBSD,
or FreeBSD and OpenBSD.

00:58:17.610 --> 00:58:20.120
Because they have stuff
in their repository.

00:58:20.120 --> 00:58:21.710
We have stuff in our repository.

00:58:21.720 --> 00:58:27.880
And it's just a lot of pain to manually
bring those changes back and forth.

00:58:27.880 --> 00:58:31.720
So we're looking at ways in
perhaps automating that somehow.

00:58:31.720 --> 00:58:36.160
Putting pointers in CVS, for example,
that say whenever you make a

00:58:36.210 --> 00:58:39.930
change to this particular subtree,
it gets bundled up and sent over to a

00:58:39.990 --> 00:58:44.600
neighbor repository and automatically
checked in or something like that.

00:58:45.700 --> 00:58:48.170
There's a lot of low-hanging fruit,
I think,

00:58:48.180 --> 00:58:51.800
also in the free BSD source tree that
the Darwin community can benefit from.

00:58:51.800 --> 00:58:55.170
We've added a lot of creature
comforts to our user land.

00:58:55.200 --> 00:59:00.420
Just for example,
our FTP client does file name completion.

00:59:00.420 --> 00:59:03.760
So whenever I'm on my OS X box,
I'm always whacking tab and kind of

00:59:03.780 --> 00:59:05.820
frowning it that it doesn't work.

00:59:05.820 --> 00:59:09.020
So things like that would certainly
make a positive difference.

00:59:09.020 --> 00:59:13.650
We have a lot of really interesting
libraries that front-end things like

00:59:13.650 --> 00:59:18.260
fetching bits over FTP or HTTP that
make writing clients a lot easier.

00:59:18.260 --> 00:59:22.120
And then obviously we have some of the
large-scale subsystems and whatnot.

00:59:22.120 --> 00:59:27.340
Open SSH, Open SSL get updated, I think,
on a much more periodic basis.

00:59:27.340 --> 00:59:30.660
We have a lot of security
work that's ongoing.

00:59:30.660 --> 00:59:34.330
We've added POSIX ACLs for giving
you much more granular access

00:59:34.430 --> 00:59:36.780
control than simply the one big root.

00:59:38.320 --> 00:59:41.170
We've added obviously a lot of
ongoing auditing work as well.

00:59:41.210 --> 00:59:44.920
And I would like to see those
changes getting into Darwin on

00:59:44.920 --> 00:59:46.790
a more frequent basis,
as I'm sure the

00:59:46.850 --> 00:59:47.910
Darwin people would as well.

00:59:47.920 --> 00:59:50.320
Finally, it's also,
even though we do use a

00:59:50.320 --> 00:59:55.310
very different driver model,
Darwin using I/O Kit and us using Nubus,

00:59:55.320 --> 00:59:59.860
I think that obviously having working
drivers to look at is of tremendous

00:59:59.860 --> 01:00:01.500
benefit to Darwin developers.

01:00:01.500 --> 01:00:05.790
And I hope that they will
continue to use them.

01:00:06.720 --> 01:00:09.900
So, getting away from the bundled apps,
we also have the ports collection

01:00:09.900 --> 01:00:11.760
which you've heard referenced
a couple times already.

01:00:11.760 --> 01:00:15.250
I started it in August 20th, 1994.

01:00:15.380 --> 01:00:18.740
I just wanted to kind of prove
a concept which was that you

01:00:18.900 --> 01:00:23.550
could create an expert system,
as it were, for porting software.

01:00:23.560 --> 01:00:26.370
That is to say,
I found whenever I went into a new box,

01:00:26.370 --> 01:00:28.850
the first things I'd do
is I'd bring over Emacs,

01:00:28.860 --> 01:00:31.250
I'd bring over Bash,
I'd bring over a couple of

01:00:31.320 --> 01:00:32.430
tools I was familiar with.

01:00:32.530 --> 01:00:35.670
And that involved, of course,
remembering where the reference

01:00:35.670 --> 01:00:39.020
repositories on the net were,
FTPing them, unpacking them,

01:00:39.020 --> 01:00:41.840
configuring them, building them,
installing them in the whole nine yards.

01:00:41.880 --> 01:00:45.380
And it occurred to me that, you know,
there was kind of a very common

01:00:45.380 --> 01:00:48.900
process running across all these
different types of software.

01:00:48.900 --> 01:00:52.450
And maybe I could encode the smarts
for doing that in addition to

01:00:52.450 --> 01:00:56.320
any patches that I might need to
make into some sort of taxonomy.

01:00:56.320 --> 01:00:57.980
And this became the ports collection.

01:00:57.980 --> 01:01:02.460
I think by the end of the
year it was 200 ports or so.

01:01:02.480 --> 01:01:07.840
And today it's over 5,100 ports
in 52 different categories.

01:01:07.840 --> 01:01:12.990
There are languages,
localized versions of software, German,

01:01:12.990 --> 01:01:15.230
Vietnamese, you name it.

01:01:15.300 --> 01:01:18.060
It's just a huge,
huge collection of stuff.

01:01:18.060 --> 01:01:21.670
And it grows at a rate of
about 50% a year so far,

01:01:21.680 --> 01:01:25.680
and there's really no end in sight,
unfortunately.

01:01:29.050 --> 01:01:32.900
There have been some forks
of the ports collection.

01:01:32.900 --> 01:01:36.180
The NetBSD and the
OpenBSD folks have taken them,

01:01:36.180 --> 01:01:40.610
made some slight tweaks,
and the open packages effort was

01:01:40.610 --> 01:01:43.830
launched by Daemon News in an effort
to kind of bring all that back

01:01:43.880 --> 01:01:47.400
together again and create one common
standard for the ports collection.

01:01:47.400 --> 01:01:49.820
And so they've been doing
very good work there,

01:01:49.820 --> 01:01:52.760
and I believe they've gotten
Darwin to sign on as well,

01:01:52.760 --> 01:01:58.180
and so Darwin will be substantially
leveraging a lot of that effort.

01:02:00.250 --> 01:02:03.420
As I said, what the Ports Collection does
is it automates the fetching,

01:02:03.420 --> 01:02:06.270
the configuring, the building,
the installation,

01:02:06.270 --> 01:02:07.420
and all of the dependency checking.

01:02:07.420 --> 01:02:12.420
So if you build some little GNOME client,
for example, it goes off and installs

01:02:12.420 --> 01:02:14.230
reams and reams of stuff.

01:02:14.350 --> 01:02:17.540
It goes off and gets libraries,
gets support infrastructure,

01:02:17.570 --> 01:02:19.290
a tremendous amount of stuff.

01:02:19.380 --> 01:02:21.900
Basically drags all of GNOME in with it,
and you don't have to

01:02:21.900 --> 01:02:23.110
know about all of that.

01:02:23.120 --> 01:02:25.240
And it's a tremendous time saver.

01:02:26.580 --> 01:02:29.160
It also is the way that we
build all of our packages.

01:02:29.160 --> 01:02:32.030
Because you've got the dependency
information already encoded

01:02:32.030 --> 01:02:34.330
in the Ports Collection,
it's very easy to pass it

01:02:34.330 --> 01:02:37.370
on to the package system,
which was actually written after

01:02:37.430 --> 01:02:39.290
the Ports Collection was done.

01:02:39.300 --> 01:02:42.520
And it gives us a great way of
automating the package building.

01:02:42.520 --> 01:02:47.700
We have a cluster of 16 or so machines
which do nothing but 24 hours a day,

01:02:47.700 --> 01:02:53.000
build all 5,100 packages,
and put them off into an FTP site.

01:02:53.020 --> 01:02:56.360
And you can access this
very easily just by doing,

01:02:56.460 --> 01:03:00.180
package add minus R, name of package,
and it will go off and figure

01:03:00.180 --> 01:03:02.020
out what version of the
operating system you're running,

01:03:02.050 --> 01:03:05.170
what the closest FTP site is,
and suck it down along with

01:03:05.210 --> 01:03:06.580
all of the dependencies.

01:03:06.580 --> 01:03:09.070
So if you don't want to build
the stuff from ports and go

01:03:09.110 --> 01:03:11.580
through all the compilation time,
you don't have to do that.

01:03:11.580 --> 01:03:18.470
We also use the packages
to do more than just,

01:03:18.800 --> 01:03:37.400
[Transcript missing]

01:03:37.760 --> 01:03:40.460
So like I say,
it's really great that it saves a lot

01:03:40.530 --> 01:03:44.430
of time and makes it really easy to
go build really complicated pieces of

01:03:44.430 --> 01:03:47.550
software without having to know anything
about the dependencies or where the tar

01:03:47.550 --> 01:03:52.160
balls are stored or what particular weird
configuration arguments you need to use.

01:03:52.160 --> 01:03:54.060
It's all pretty much hands off.

01:03:55.400 --> 01:03:58.290
What sucks about it is all of
this is encoded in Berkeley Make.

01:03:58.350 --> 01:04:02.710
And if I had it to do over again,
I probably would have put all the meta

01:04:02.710 --> 01:04:05.740
information in XML or something and
written a tool which just extracted

01:04:05.740 --> 01:04:08.700
the information and built the
Make files on the fly or something.

01:04:08.700 --> 01:04:13.420
So I am actively looking now at some
way of doing a ports next generation

01:04:13.420 --> 01:04:18.760
effort or something which makes it a
lot easier to build documentation trees,

01:04:18.820 --> 01:04:23.930
web browsable pages and whatnot
which describe the ports collection.

01:04:23.940 --> 01:04:25.380
And that's something that
I'm really excited about.

01:04:25.380 --> 01:04:28.540
I hope maybe we can do
hand in hand with Darwin.

01:04:31.820 --> 01:04:37.900
So I think our community is at
least as important as our bits.

01:04:37.950 --> 01:04:41.040
Obviously we've been around for nine
years and we wouldn't have been around

01:04:41.040 --> 01:04:44.420
this long if we hadn't had some ways
of keeping the whole thing cohesive.

01:04:44.420 --> 01:04:48.750
So one of the things that we're
proud of is our core team,

01:04:48.960 --> 01:04:53.190
which is now a democratically
elected body that is chosen

01:04:53.190 --> 01:04:55.940
by the majority of committers.

01:04:56.420 --> 01:04:59.890
And committers are people who have
right access to the CVS repository.

01:04:59.900 --> 01:05:02.200
So if you're a committer,
you can stand for election and every

01:05:02.250 --> 01:05:03.840
two years we choose a majority.

01:05:03.860 --> 01:05:08.200
It's a pretty good system and I think we
should try it in this country sometime.

01:05:08.200 --> 01:05:08.880
Anyway.

01:05:11.530 --> 01:05:16.700
We have 267 CVS committers now who are
segregated in three different categories.

01:05:16.700 --> 01:05:20.900
The docs people who just work on docs,
people who work on the bundled sources,

01:05:20.900 --> 01:05:22.640
and the people who work
on the ports collection.

01:05:22.640 --> 01:05:25.640
So you don't need to be a
cross-disciplinary person.

01:05:25.640 --> 01:05:28.020
You can choose an area to specialize on.

01:05:28.040 --> 01:05:31.260
And committers are approved by core.

01:05:31.260 --> 01:05:35.970
So it's not quite as difficult as
it is to become a Darwin developer,

01:05:35.970 --> 01:05:38.430
for example,
but you do need to have the unanimous

01:05:38.430 --> 01:05:40.080
approval of core before you make it in.

01:05:40.160 --> 01:05:43.300
So there's some level of quality control.

01:05:43.670 --> 01:05:49.310
We also make allowances for sort of
collective versus individual ownership.

01:05:49.310 --> 01:05:54.070
In the large picture,
FreeBSD as a project owns the sources and

01:05:54.080 --> 01:05:56.050
nobody can really put an exclusive lock.

01:05:56.060 --> 01:05:59.290
But we do have kind of a non-exclusive
lock model where somebody says,

01:05:59.290 --> 01:06:01.180
hey, I'm really maintaining this.

01:06:01.180 --> 01:06:04.290
Everybody should lockstep their
changes through me because I understand

01:06:04.300 --> 01:06:05.700
it better than anybody else.

01:06:06.240 --> 01:06:08.730
And so we have maintainer
bits that allow for that.

01:06:08.770 --> 01:06:12.060
And this works very well, actually,
because it lets people feel a

01:06:12.060 --> 01:06:15.220
certain degree of ownership over it
but without destroying sort of the

01:06:15.220 --> 01:06:18.760
collective ownership of the sources,
which keeps the project together.

01:06:21.290 --> 01:06:26.710
I think it's really important
to get developers' hearts and

01:06:26.710 --> 01:06:29.040
minds if you want to keep them
interested over the long term.

01:06:29.040 --> 01:06:32.510
What I mean by that is you can't
just get a pile of bits thrown over

01:06:32.570 --> 01:06:35.930
the wall periodically from some
developer who doesn't buy off on

01:06:35.930 --> 01:06:39.680
your vision or your overall strategy
because that pile of bits will just

01:06:39.750 --> 01:06:43.520
hit the ground with a dull thud and
start to smell almost immediately.

01:06:43.520 --> 01:06:47.780
We tried that with BSDOS and
some other groups where code

01:06:47.780 --> 01:06:51.440
was thrown over the wall,
but we didn't get the developers

01:06:51.440 --> 01:06:54.520
that came along with those bits,
and that was a critical

01:06:54.520 --> 01:06:57.120
mistake in all cases,
and in such cases,

01:06:57.180 --> 01:06:59.360
those projects essentially died off.

01:06:59.360 --> 01:07:02.330
So if I could say something
to the Darwin community,

01:07:02.330 --> 01:07:04.820
it would be it's not just about the bits.

01:07:04.820 --> 01:07:08.810
It's about communicating your vision and
really getting people to buy into it,

01:07:08.820 --> 01:07:10.360
and that's what gives you longevity.

01:07:13.320 --> 01:07:18.890
So our identity, as it were,
is also determined largely by the users.

01:07:18.940 --> 01:07:22.360
And this was kind of a shock to us.

01:07:22.360 --> 01:07:25.600
We started off as a bunch of
hobbyists with a computing problem,

01:07:25.600 --> 01:07:28.840
and we did it really for
our own edification and ego

01:07:28.890 --> 01:07:31.000
gratification and whatnot.

01:07:31.000 --> 01:07:35.560
But what we found is that we have pretty
much been driven over the last five

01:07:35.560 --> 01:07:39.240
or six years by what the users want
because they yell very loudly for it,

01:07:39.330 --> 01:07:42.780
and we have some pride in our work.

01:07:43.270 --> 01:07:46.920
And so we have really become
extremely user-driven.

01:07:46.920 --> 01:07:49.500
The yahoos of the world pretty
much tell us what to do.

01:07:49.500 --> 01:07:52.560
They ask nicely because
they've learned their lesson,

01:07:52.560 --> 01:07:56.100
but they do essentially
drive our direction.

01:07:56.100 --> 01:07:58.840
And so our vision is essentially
nothing more than listen to what

01:07:58.930 --> 01:08:02.640
the users ask for and try and
fulfill that as best possible.

01:08:02.640 --> 01:08:05.640
And still try to have fun, obviously,
and people will still work on

01:08:05.640 --> 01:08:06.990
things that interest them the most.

01:08:07.040 --> 01:08:09.010
But if I had to point to
the overall direction,

01:08:09.010 --> 01:08:10.520
it would be listen to the users.

01:08:10.520 --> 01:08:13.180
And I think that's what's going
to happen with Darwin as well.

01:08:13.200 --> 01:08:16.780
The needs of OS X will dictate
Darwin's direction if they follow

01:08:16.780 --> 01:08:18.720
a parallel line of evolution.

01:08:20.820 --> 01:08:23.350
So where I think that the
FreeBSD project can work with

01:08:23.350 --> 01:08:28.380
Apple on an ongoing basis is one,
I think that Apple is helping

01:08:28.380 --> 01:08:32.740
us to shatter the desktop myth,
which is that BSD or FreeBSD are

01:08:32.840 --> 01:08:34.900
only good for servers.

01:08:34.900 --> 01:08:39.060
Because they run Yahoo's and
Hotmails and companies like that,

01:08:39.090 --> 01:08:41.380
that it's no good as a desktop OS.

01:08:41.380 --> 01:08:43.970
And we certainly know
that that's not true,

01:08:43.970 --> 01:08:48.460
but Apple is helping to really drive
the point home with a very large hammer,

01:08:48.460 --> 01:08:50.150
and we appreciate that.

01:08:50.700 --> 01:08:53.240
It's a great foundation for
a desktop operating system.

01:08:53.240 --> 01:08:56.770
And I think that having the
same OS run on your server and

01:08:56.780 --> 01:09:00.030
your desktop also means that
interoperability is more or less assured.

01:09:00.040 --> 01:09:02.350
You're going to have the
right tools for doing network

01:09:02.350 --> 01:09:03.980
communications between the two.

01:09:03.980 --> 01:09:07.060
It's going to be much easier
to administer heterogeneous

01:09:07.450 --> 01:09:11.580
collection of servers and desktops,
and I really think that there's

01:09:11.580 --> 01:09:15.480
a strong case to be made for
one operating system being both.

01:09:17.040 --> 01:09:20.330
And also, paradoxically,
I think Darwin has more freedom

01:09:20.330 --> 01:09:22.020
to innovate now than we do.

01:09:22.020 --> 01:09:25.400
We have been around for nine years.

01:09:25.400 --> 01:09:29.520
We have a very stodgy and
somewhat conservative user base.

01:09:29.520 --> 01:09:31.690
And as I said,
they tend to drive our direction.

01:09:31.700 --> 01:09:36.510
So we can't make any sudden U-turns
or swerve in violent directions

01:09:36.510 --> 01:09:38.790
without pissing a lot of people off.

01:09:39.430 --> 01:09:42.280
Whereas Darwin is still
comparatively young and they're

01:09:42.280 --> 01:09:48.400
well firewalled in some respects
from OS X by this nice GUI desktop.

01:09:48.400 --> 01:09:53.360
And I think that Darwin has already
done quite a bit of interesting stuff

01:09:53.360 --> 01:09:57.410
with I/O Kit and even the stuff pulled
across from Mach that addresses some

01:09:57.410 --> 01:09:59.600
of the old problems in very new ways.

01:09:59.600 --> 01:10:02.920
And that's something that
I think we can learn from.

01:10:03.210 --> 01:10:05.750
Darwin can learn a lot from some
of our methodologies and they can

01:10:05.780 --> 01:10:07.480
learn a lot from our technologies.

01:10:07.480 --> 01:10:09.180
But I think we can learn.

01:10:09.370 --> 01:10:12.000
The most from Darwin's innovation.

01:10:12.060 --> 01:10:15.060
And I look forward to working
with them in the future.

01:10:15.060 --> 01:10:15.900
Thank you.

01:10:27.100 --> 01:10:29.860
Thank you, Jordan.

01:10:29.960 --> 01:10:35.480
So kind of in closing here, again,
you really need to realize that BSD is

01:10:35.480 --> 01:10:38.150
an amazingly powerful part of Mac OS X.

01:10:38.340 --> 01:10:39.940
We've done a really
good job of hiding it,

01:10:39.940 --> 01:10:42.440
but from you as a developer, it's there.

01:10:42.550 --> 01:10:46.490
It's something you can take
advantage of and really should.

01:10:46.900 --> 01:10:49.960
However,
you should be careful about exposing

01:10:49.960 --> 01:10:53.400
the end user to the user experience.

01:10:53.440 --> 01:10:56.030
It is a pretty different world
underneath the covers there.

01:10:56.160 --> 01:10:58.800
This is a very powerful tool
for you to use as a developer.

01:10:59.020 --> 01:11:02.510
It's a powerful tool to help leverage
new technology into Mac OS X.

01:11:02.920 --> 01:11:07.320
But it's up to you as the developers to
be very cognizant of keeping it Macintosh

01:11:07.320 --> 01:11:11.200
in terms of ease of use and the kinds of
things that you would expect on a Mac.

01:11:11.290 --> 01:11:14.760
And there's a very interesting
juxtaposition there of goals.

01:11:15.640 --> 01:11:19.700
It's also important for you to
realize that many of the BSD parts

01:11:19.700 --> 01:11:23.140
of the system are actually optional
in terms of how they're installed.

01:11:23.140 --> 01:11:26.460
So if you're writing an application
on Mac OS X and you're depending

01:11:26.460 --> 01:11:29.820
on bits and pieces of BSD,
make sure that you include the

01:11:29.820 --> 01:11:33.090
pieces that you need to and that
you know what's actually installed

01:11:33.090 --> 01:11:34.860
kind of in the base system install.

01:11:34.860 --> 01:11:38.440
The BSD package that exists
in the installer may actually,

01:11:38.440 --> 01:11:41.330
you know,
may not be installed by the user and in

01:11:41.330 --> 01:11:43.400
some environments they may decide not to.

01:11:43.730 --> 01:11:46.030
So be very,
very careful about making assumptions

01:11:46.030 --> 01:11:49.240
about what pieces are actually in
the base install of the system.

01:11:49.240 --> 01:11:51.950
And there are things you can
do like packaging your tools

01:11:51.950 --> 01:11:55.020
as part of your application
to help protect you from that.

01:11:55.020 --> 01:11:57.200
And we're working on
additional things for,

01:11:57.200 --> 01:12:00.780
you know, long term for being able to do
things like package management

01:12:00.780 --> 01:12:02.090
and stuff like that to help out.

01:12:02.140 --> 01:12:04.000
But it's something you
should be very conscious of.

01:12:05.280 --> 01:12:06.710
Make sure you leverage Darwin.

01:12:06.730 --> 01:12:09.490
I think this is an
important part of Mac OS X,

01:12:09.490 --> 01:12:11.720
and I mean Darwin from the
open source perspective.

01:12:11.720 --> 01:12:16.590
This is a pretty new paradigm
for the Apple community to use,

01:12:16.590 --> 01:12:19.810
and something that we consider
to be a real advantage that

01:12:19.810 --> 01:12:21.320
Mac OS X brings to the table.

01:12:21.320 --> 01:12:22.490
Take advantage of it.

01:12:22.500 --> 01:12:26.000
Also, leverage the FreeBSD community.

01:12:26.000 --> 01:12:28.480
They're very much part of
our extended community.

01:12:30.160 --> 01:12:34.490
Jordan and his team really brings
a lot of experience and stuff

01:12:34.490 --> 01:12:37.560
to this aspect of the system,
and we're really happy to

01:12:37.560 --> 01:12:39.880
be partnering with them and
being part of that community.

01:12:39.880 --> 01:12:43.800
I would very much encourage you
to leverage some of the knowledge

01:12:43.800 --> 01:12:46.110
and technology that exists there.

01:12:47.500 --> 01:14:27.000
[Transcript missing]