WEBVTT

00:00:05.800 --> 00:00:07.660
Good afternoon.

00:00:07.730 --> 00:00:14.270
My name is James Dempsey and it is
now 5:00 on day two of that annual

00:00:14.300 --> 00:00:18.260
drink from the Apple fire hose known
as the Worldwide Developers Conference.

00:00:18.290 --> 00:00:21.960
So is everybody's brain full yet?

00:00:22.590 --> 00:00:23.350
good.

00:00:23.510 --> 00:00:27.660
We'll try to fix that this afternoon!

00:00:27.660 --> 00:00:30.620
So it's been very nice
the past couple of days,

00:00:30.620 --> 00:00:34.370
seeing former students who've gone
through our Apple iServices classes,

00:00:34.460 --> 00:00:37.730
folks that I've been teaching web
objects to for the past couple of years,

00:00:38.120 --> 00:00:41.850
hearing about the stuff that
they've been doing with web objects,

00:00:42.060 --> 00:00:43.920
and it's been a lot of fun.

00:00:43.920 --> 00:00:46.210
So again,
other former students who haven't

00:00:46.310 --> 00:00:50.800
said hi after the class -- or after
the class -- after the session,

00:00:50.800 --> 00:00:52.980
feel free to say hey.

00:00:52.980 --> 00:00:55.910
All right,
so today we're going to talk about

00:00:55.910 --> 00:00:58.460
the Enterprise Objects Framework.

00:00:58.460 --> 00:01:01.830
Before we begin, though,
I need to take a couple of polls,

00:01:02.180 --> 00:01:06.450
and I want you to respond with loudest,
thunderous applause you can if

00:01:06.690 --> 00:01:08.440
the question applies to you.

00:01:08.440 --> 00:01:11.450
So first,
how many folks were here yesterday

00:01:11.570 --> 00:01:18.110
for Steve Heyman's introduction to
the Web Objects Technology Session?

00:01:18.110 --> 00:01:18.110
So

00:01:23.010 --> 00:01:26.040
And it's very obvious that it was
a session that you're all very

00:01:26.040 --> 00:01:28.360
disappointed in from your response.

00:01:28.490 --> 00:01:32.340
That, I just cannot wait until that
is out on DVD because I think

00:01:32.380 --> 00:01:37.520
it's going to just bump
Austin Powers off of the list for me.

00:01:37.720 --> 00:01:41.700
If not that, it's going to do it to Dude,
Where's My Car?

00:01:41.770 --> 00:01:44.600
So I'm not sure which.

00:01:44.600 --> 00:01:47.260
So we're here to talk about web objects.

00:01:47.260 --> 00:01:52.880
The second thing I wanted to pull
you on is how many of you consider

00:01:53.500 --> 00:01:58.640
yourself either brand new or
relatively uncertain or a novice in

00:01:58.850 --> 00:02:00.490
the Enterprise Objects Framework?

00:02:00.560 --> 00:02:03.100
Again, with a round of applause.

00:02:06.380 --> 00:02:09.800
which is a good size of the audience,
which is very good because that's

00:02:09.850 --> 00:02:13.270
what we're going to be talking about.

00:02:13.720 --> 00:02:14.840
Now let's begin.

00:02:14.900 --> 00:02:16.700
The introduction,
this is an introduction to the

00:02:16.700 --> 00:02:21.540
Enterprise Objects Framework which
is more succinctly known as EOF.

00:02:21.590 --> 00:02:29.030
And what we're going to be talking about
today in Steve Hammond's preso yesterday,

00:02:29.090 --> 00:02:32.730
we saw that WebObjects and
EOF can be a lot of fun.

00:02:32.830 --> 00:02:36.260
He was wiring stuff up,
they got maps flying all over the place.

00:02:36.270 --> 00:02:43.420
And the question you may ask yourself is,
is all this stuff really that easy?

00:02:43.570 --> 00:02:48.810
And the answer is actually yes and no.

00:02:50.290 --> 00:02:57.120
So, yes it is, if you are doing
traditional database stuff,

00:02:57.230 --> 00:03:00.620
inserting stuff, fetching stuff out,
creating new objects,

00:03:00.810 --> 00:03:07.560
the answer is no if you start having
to do very complicated things.

00:03:07.560 --> 00:03:10.900
Like you come into a situation
where they have a legacy database

00:03:10.900 --> 00:03:14.630
that's been there for the past 10
years and they're encoding all this

00:03:14.670 --> 00:03:16.440
information in the primary key.

00:03:16.860 --> 00:03:21.260
And so you have to generate primary
keys with EOF and then other situations

00:03:21.350 --> 00:03:24.930
where they need you to interact
with some system that was designed

00:03:24.940 --> 00:03:26.860
before people had any common sense.

00:03:26.880 --> 00:03:32.660
And so you have to do all these
contorted things to get things to work.

00:03:32.850 --> 00:03:36.080
And in those cases, you know what?

00:03:36.360 --> 00:03:39.660
Without even EOF in the picture,
it's just hard.

00:03:39.720 --> 00:03:44.620
Now, the nice thing about EOF is
that it allows you to solve

00:03:44.830 --> 00:03:48.290
those almost impossible problems

00:03:49.460 --> 00:03:50.060
Is it easy?

00:03:50.590 --> 00:03:51.230
No.

00:03:51.510 --> 00:03:53.530
But are they incredibly hard problems?

00:03:53.730 --> 00:03:53.930
Yes.

00:03:54.130 --> 00:03:58.960
And does EOF let you do it with, with,
with grace, style, panache,

00:03:59.010 --> 00:04:00.760
and without writing too much code?

00:04:01.010 --> 00:04:02.300
Definitely.

00:04:02.300 --> 00:04:04.910
So that's what we're going to talk about.

00:04:05.600 --> 00:04:06.940
Now what are we going to
learn in this session?

00:04:06.940 --> 00:04:10.570
The first thing we're going
to learn about is why EOF?

00:04:10.570 --> 00:04:11.590
Anyway, what's the purpose?

00:04:11.710 --> 00:04:12.400
What do I get?

00:04:12.500 --> 00:04:14.930
Why am I in this session?

00:04:15.340 --> 00:04:17.400
What's going on here?

00:04:17.600 --> 00:04:21.380
The second thing we're going to talk
about is just a conceptual model

00:04:21.380 --> 00:04:26.340
about EOF and how it works because
we've seen things flying out of

00:04:26.350 --> 00:04:30.840
databases on the web pages today and
yesterday and for the rest of the week.

00:04:30.970 --> 00:04:35.660
But I always get a little suspicious
when it seems a little too magic-y.

00:04:35.800 --> 00:04:40.040
So we're going to demystify a little
bit of just what's going on there.

00:04:40.140 --> 00:04:43.410
We're not going to go
into excruciating detail.

00:04:43.690 --> 00:04:49.600
Finally, we're going to do practical code
for basic database operations.

00:04:49.730 --> 00:04:56.200
Now, yesterday, Steve Heyman,
a proud Canadian,

00:04:56.970 --> 00:05:01.200
He said that Canadians,
they don't need wizards.

00:05:01.230 --> 00:05:02.140
They don't need assistants.

00:05:02.140 --> 00:05:07.580
He was going to use a display
group to fetch things.

00:05:07.910 --> 00:05:12.140
It's a little known fact,
but a true fact that I am half Canadian.

00:05:12.240 --> 00:05:16.890
My father immigrated to this
country during the great

00:05:17.230 --> 00:05:20.470
Molson Beer famine of 1958.

00:05:21.730 --> 00:05:26.610
And he took the arduous journey,
20 minute journey in his car

00:05:26.610 --> 00:05:29.320
to Maine and never returned.

00:05:29.430 --> 00:05:34.030
Except to visit family and friends.

00:05:34.030 --> 00:05:40.790
Mainly because he liked the
idea of Molson being imported.

00:05:43.770 --> 00:05:48.010
So that said,
I have the Canadian blood of my

00:05:48.010 --> 00:05:51.770
father racing through my veins,
yet I'm also a rugged

00:05:51.770 --> 00:05:54.680
individualist American who
doesn't need a display group.

00:05:54.830 --> 00:05:59.110
And so therefore,
what we're going to do in this is

00:05:59.260 --> 00:06:03.700
we're going to see the programmatic
code that actually a display group

00:06:03.700 --> 00:06:09.700
is using behind the scenes and expose
another level of the magic of EOF.

00:06:09.840 --> 00:06:11.660
So that's what we're doing.

00:06:12.210 --> 00:06:15.090
Now where does this all
fit into the big picture?

00:06:15.210 --> 00:06:21.100
EOF is actually a slight misnomer in that
there are a number of frameworks in EOF.

00:06:21.100 --> 00:06:25.100
The two that we're focusing on
are EO Access and EO Control.

00:06:25.100 --> 00:06:29.340
And these are frameworks that they
form the core of database access if

00:06:29.340 --> 00:06:34.100
you're doing HTML based WebObjects apps,
Cocoa apps, Java client apps,

00:06:34.100 --> 00:06:39.100
direct to Java client apps,
direct to Web apps.

00:06:39.390 --> 00:06:43.380
Anything that you see in any of
these sessions that is hitting a

00:06:43.380 --> 00:06:47.740
database is using the frameworks
we're going to talk about.

00:06:48.400 --> 00:06:53.210
Alright, that said,
if you are a very good piano player,

00:06:53.210 --> 00:06:56.780
imagine you have never played
the piano before in your life.

00:06:56.800 --> 00:07:01.630
And for those of you who are either not
very good piano players like myself,

00:07:02.070 --> 00:07:06.210
or never seen a piano before,

00:07:06.460 --> 00:07:09.290
Imagine being walked up to a
piano and handed a piece of

00:07:09.290 --> 00:07:12.060
music that looks like this.

00:07:12.190 --> 00:07:17.020
You'd probably say, "Uh, okay."

00:07:17.920 --> 00:07:20.530
It looks very complicated,
it looks very daunting,

00:07:20.530 --> 00:07:24.800
it looks like how am I ever
going to sit down and do this?

00:07:25.000 --> 00:07:28.530
But we know from experience,
we know that there are people in the

00:07:28.530 --> 00:07:32.350
world who can sit down at a piano
and play this very piece of music.

00:07:32.540 --> 00:07:36.740
We know walking up to a piano
that it's in there somewhere,

00:07:36.910 --> 00:07:38.660
I just don't know how to get it out.

00:07:38.660 --> 00:07:43.780
It's just like EOF.

00:07:51.460 --> 00:07:57.000
Because we know from the many years
that EOF has been in production in the

00:07:57.000 --> 00:08:01.840
largest companies around the world,
we know that EOF is able to solve

00:08:02.420 --> 00:08:06.560
some problems that would make
your head literally explode.

00:08:06.770 --> 00:08:11.430
Oh, I've heard stories.

00:08:12.970 --> 00:08:16.590
But,
just like you don't want to hand this

00:08:16.590 --> 00:08:20.900
piece of sheet music to somebody the
very first time they sit down at a piano,

00:08:20.970 --> 00:08:25.840
you don't want to do this,
those extraordinary complicated things,

00:08:25.840 --> 00:08:28.190
the very first time you deal with EOF.

00:08:28.300 --> 00:08:32.080
We know anybody who's gone down the
little trail of learning to play

00:08:32.150 --> 00:08:35.610
the piano knows that you start here.

00:08:36.000 --> 00:08:40.080
Okay, and you say, "Oh,
how disappointing." But we know that

00:08:40.080 --> 00:08:43.800
when you're starting to play the piano,
somebody tells you, "Take this thumb,

00:08:43.860 --> 00:08:47.530
put it on this key called middle C,
and then just kind of walk up the

00:08:47.530 --> 00:08:50.980
scale." Those are the fundamentals,
and you practice that.

00:08:51.050 --> 00:08:54.820
You do that over and over again because
those are the things you do all the

00:08:54.820 --> 00:08:57.200
time when you're playing the piano.

00:08:57.340 --> 00:09:00.780
Similarly,
we're going to talk today about

00:09:00.870 --> 00:09:06.300
those things that you do all the
time when you're working with EOF.

00:09:06.410 --> 00:09:10.990
And get started by playing with
those things rather than trying

00:09:10.990 --> 00:09:16.210
to sit down at the piano for the
first time and muddle through that.

00:09:16.760 --> 00:09:18.210
That's easy.

00:09:18.210 --> 00:09:19.630
I could do that.

00:09:19.870 --> 00:09:22.770
Okay, enough with that.

00:09:22.850 --> 00:09:26.060
Now let's move on and
let's talk about why EOF.

00:09:26.060 --> 00:09:28.650
What's the whole point here anyway?

00:09:28.960 --> 00:09:33.440
So, from, we can look at EOF kind of
from two points of view.

00:09:33.440 --> 00:09:38.520
One point being from the point of view
of I'm an object oriented programmer

00:09:38.790 --> 00:09:40.900
or individual who thinks that way.

00:09:41.010 --> 00:09:45.170
And then the point of view of I'm a
database kind of person and I'm not

00:09:45.260 --> 00:09:47.900
really sure about all this OO stuff.

00:09:47.900 --> 00:09:51.570
So let's start talking from
the object perspective.

00:09:51.670 --> 00:09:53.300
Just a brief review.

00:09:53.300 --> 00:09:55.900
We have different types
of things called classes.

00:09:55.900 --> 00:10:00.600
Each of those classes stores
different pieces of information,

00:10:00.770 --> 00:10:05.370
instance variables, state,
however we want to put it.

00:10:05.910 --> 00:10:10.080
In addition, each one holds on to
certain amounts of logic.

00:10:10.090 --> 00:10:13.140
Okay, canonical description of an object.

00:10:13.160 --> 00:10:17.670
But the big question being,
where do objects sleep at night?

00:10:18.350 --> 00:10:22.820
What happens when I need to,
if it's a desktop application,

00:10:22.820 --> 00:10:25.470
Cocoa application, I need to,
the user logs out or

00:10:25.470 --> 00:10:27.090
shuts down the computer.

00:10:27.230 --> 00:10:30.590
What happens if I need to
recycle an app on my server?

00:10:30.740 --> 00:10:35.180
What happens if the power
goes out in California?

00:10:36.500 --> 00:10:39.590
And suddenly I've lost all
the state in my object.

00:10:39.660 --> 00:10:41.500
So I need somewhere to put that.

00:10:41.500 --> 00:10:44.500
And I could put it in a flat file, right?

00:10:44.500 --> 00:10:47.230
Serialize it out, archive it,
have it all written out

00:10:47.230 --> 00:10:48.500
as some big text file.

00:10:48.590 --> 00:10:51.550
But once you get over a
certain number of objects,

00:10:51.560 --> 00:10:53.500
that gets to be ridiculous.

00:10:53.500 --> 00:10:56.280
So you need some place to stick the data.

00:10:56.670 --> 00:11:02.500
And boy,
a database seems like a pretty good idea.

00:11:02.870 --> 00:11:05.480
That's what they made them for.

00:11:06.130 --> 00:11:11.400
And so it actually turns out that
in sticking information or object

00:11:11.730 --> 00:11:17.060
related information into a database,
it actually turns out to

00:11:17.060 --> 00:11:19.560
be a pretty good match.

00:11:20.140 --> 00:11:25.020
Of course, we have types of things
in our object model,

00:11:25.140 --> 00:11:27.090
maps to tables in the database.

00:11:27.100 --> 00:11:32.460
You've heard this probably at least seven
times in each session so far because

00:11:32.460 --> 00:11:36.250
actually this mapping is the key to EOF.

00:11:36.250 --> 00:11:41.460
This is the first fundamental thing
that you need to be thinking about.

00:11:41.460 --> 00:11:44.670
And also, of course,
we have columns in the database that

00:11:44.840 --> 00:11:50.560
hold different types of information and
it maps so well to instance variables.

00:11:50.560 --> 00:11:55.450
And then each row in the database
maps amazingly well to an instance

00:11:55.460 --> 00:11:57.800
of an object of a particular class.

00:11:59.330 --> 00:12:04.860
So that's good for everything except
for types that are more complex

00:12:04.860 --> 00:12:07.100
than a string or a number or a date.

00:12:07.200 --> 00:12:11.600
How do I hook up things
that are complex objects?

00:12:11.650 --> 00:12:18.500
And we know that in Java we have
an object that is referencing

00:12:18.790 --> 00:12:21.000
another complicated object.

00:12:21.080 --> 00:12:24.200
It's not a pointer, mind you.

00:12:24.250 --> 00:12:26.910
Although we can get
null pointer exceptions,

00:12:26.910 --> 00:12:29.120
which boggles my mind.

00:12:29.250 --> 00:12:31.790
I don't understand that at all.

00:12:32.010 --> 00:12:34.900
It's just a point to a
unique place in memory,

00:12:34.900 --> 00:12:37.600
a reference if you will,
but not a pointer.

00:12:37.640 --> 00:12:41.800
Wouldn't do to have that.

00:12:41.870 --> 00:12:44.130
In fact,
in the database it actually works

00:12:44.130 --> 00:12:46.090
out almost identically how it works.

00:12:46.330 --> 00:12:49.300
Each row has a unique primary key.

00:12:49.380 --> 00:12:54.350
And then in another table,
a row has a place to store the value of

00:12:54.350 --> 00:12:58.500
the unique primary key called a join.

00:12:58.500 --> 00:13:02.010
In the world of entity
relationship modeling,

00:13:02.060 --> 00:13:04.800
from mapping that object
to relational model,

00:13:04.800 --> 00:13:07.870
we call this a relationship.

00:13:10.630 --> 00:13:17.890
So the point of EOF is to go
from a row to an object and back.

00:13:17.890 --> 00:13:19.940
How hard could that be?

00:13:21.840 --> 00:13:24.600
Now, what is an Enterprise Object anyway?

00:13:24.600 --> 00:13:29.090
We hear this term bandied
about all the time.

00:13:29.090 --> 00:13:29.090
Well,

00:13:29.520 --> 00:13:32.950
We affectionately call them EOs or
just because we don't want to say

00:13:32.950 --> 00:13:35.160
Enterprise Object all the time.

00:13:35.250 --> 00:13:40.160
All that it really is is it's an object
that implements a certain interface,

00:13:40.260 --> 00:13:44.400
the EO Enterprise Object Interface
strangely enough.

00:13:44.400 --> 00:13:49.400
Although you would not want to go and
implement that interface yourself.

00:13:49.400 --> 00:13:53.910
That would be akin to you getting
up tomorrow morning and saying,

00:13:53.910 --> 00:13:55.890
"You know,
I think I'm going to invent this

00:13:55.890 --> 00:13:59.400
round thing today that people can use
to roll on." Or something like that.

00:13:59.400 --> 00:14:01.320
Maybe I'll call it a wheel.

00:14:01.450 --> 00:14:02.400
Yeah, that would be a good idea.

00:14:02.400 --> 00:14:04.400
Don't reimplement the wheel.

00:14:04.400 --> 00:14:07.390
You subclass EO Generic Record.

00:14:07.400 --> 00:14:09.400
So it's all done for you.

00:14:09.400 --> 00:14:14.340
All that that does, essentially,
is it allows these objects to work

00:14:14.340 --> 00:14:19.400
with the Enterprise Object Framework
and persist in the database.

00:14:19.400 --> 00:14:20.720
Now, why do I bring this up?

00:14:20.780 --> 00:14:24.390
Because if you're looking through the
documentation or the class browser,

00:14:24.390 --> 00:14:27.400
you will see a lot of the methods.

00:14:27.400 --> 00:14:32.400
Take arguments or return values
of type EO Enterprise Object.

00:14:32.400 --> 00:14:33.710
So, what's the difference?

00:14:36.500 --> 00:14:38.380
So that's from the object perspective.

00:14:38.380 --> 00:14:42.330
From the database perspective,
having taught folks over the years,

00:14:42.330 --> 00:14:47.500
I can tell you that EOF can
freak a DBA out completely.

00:14:47.610 --> 00:14:51.310
They go, because as was mentioned
in previous sessions,

00:14:51.310 --> 00:14:54.500
they, you don't have to write any SQL.

00:14:54.500 --> 00:14:57.670
When you get the objects
into your application,

00:14:57.670 --> 00:15:01.500
there's no primary key,
there's no foreign key.

00:15:01.530 --> 00:15:04.500
It's kind of like your
entire world is a DBA.

00:15:04.500 --> 00:15:10.990
You've been abstracted from it, and it,
that would freak me out too.

00:15:12.780 --> 00:15:17.290
So, as you start working seriously
on WebObjects applications

00:15:17.410 --> 00:15:23.060
and you are working with DBAs,
don't get cheesed off at them because

00:15:23.060 --> 00:15:25.700
they are coming from a different place.

00:15:25.700 --> 00:15:30.290
And be very patient with them
because this is kind of like...

00:15:31.100 --> 00:15:35.040
Actually, it's a lot like getting dropped
in the middle of a foreign country

00:15:35.040 --> 00:15:37.660
where you don't speak the language
and things are completely different

00:15:37.660 --> 00:15:42.060
and everything you're used to
is not quite there anymore.

00:15:42.100 --> 00:15:45.530
And even worse yet,
it's all kind of right there and you

00:15:45.650 --> 00:15:49.970
could get to it if you wanted to,
but you're not supposed to.

00:15:52.410 --> 00:15:55.060
So you stick data in a database.

00:15:55.060 --> 00:15:58.150
You can also put logic in a database.

00:15:58.270 --> 00:16:01.630
Most database vendors have devised some
procedural language you can store in

00:16:01.630 --> 00:16:03.400
the database called a stored procedure.

00:16:03.400 --> 00:16:07.740
Let's talk about EOF and how it
can add value or what it does

00:16:07.740 --> 00:16:10.390
in relationship to a database.

00:16:10.400 --> 00:16:13.380
So one is distributed processing.

00:16:13.460 --> 00:16:17.280
If I have a big website,
a big -- I don't want to put all

00:16:17.280 --> 00:16:20.950
my logic in my one database because
in addition to fetching and saving

00:16:20.950 --> 00:16:24.760
changes back to the database,
it's processing all this stuff so

00:16:24.820 --> 00:16:30.400
I can offload the processing to one
or multiple WebObjects applications.

00:16:30.790 --> 00:16:34.370
Second thing I can do is write
my logic in standard Java.

00:16:34.490 --> 00:16:39.370
I don't have to learn Oracle's
brand of some procedural thing.

00:16:41.050 --> 00:16:45.950
Dynamically generated SQL,
as has been kind of testified

00:16:46.000 --> 00:16:50.280
to by a couple of folks up here,
they didn't know SQL all that well.

00:16:50.280 --> 00:16:53.220
And to tell you the truth,
I could not write a well-formed

00:16:53.290 --> 00:16:57.440
SQL statement right now if you
paid me a large sum of money.

00:16:57.510 --> 00:17:00.180
I'd have to check some documentation.

00:17:00.240 --> 00:17:00.660
Why?

00:17:00.920 --> 00:17:04.700
Because using WebObjects in
EOF for the past few years,

00:17:04.700 --> 00:17:06.380
I haven't needed to.

00:17:06.430 --> 00:17:09.090
And it's always done the job for me.

00:17:09.380 --> 00:17:12.260
One very,
very nice thing in EOF is the ability

00:17:12.260 --> 00:17:16.780
to connect to multiple data sources.

00:17:16.960 --> 00:17:20.300
From the point of view of your code,
you don't even necessarily care

00:17:20.500 --> 00:17:23.630
where those objects came from,
where those rows came from.

00:17:23.780 --> 00:17:28.630
You're very nicely abstracted from
the idea of multiple data sources.

00:17:29.490 --> 00:17:34.600
Finally, you get a separate scratch
pad for every user.

00:17:34.600 --> 00:17:38.100
So if you can imagine an application
where a lot of people are fetching

00:17:38.110 --> 00:17:42.640
information or looking at information
and they want to maybe try a change.

00:17:42.640 --> 00:17:47.280
Okay, I'm going to update this number and
see how it affects related numbers.

00:17:47.280 --> 00:17:50.160
Well, if you just have a database,
the only place you can store

00:17:50.160 --> 00:17:53.270
that change is in the database
and then you have people writing

00:17:53.330 --> 00:17:57.080
and overwriting over each other,
which is a bad thing.

00:17:57.080 --> 00:18:02.220
So in EOF,
you have a place where each user can make

00:18:02.220 --> 00:18:06.640
edits without affecting anybody else.

00:18:06.640 --> 00:18:10.730
It's like a little alternate
universe where you fetch in

00:18:10.730 --> 00:18:16.590
information and you can literally
make changes to that information,

00:18:16.590 --> 00:18:20.910
a little context to do editing,
if you will.

00:18:21.700 --> 00:18:25.420
How'd that name pop into my head?

00:18:25.490 --> 00:18:30.590
That is another very
useful thing about EOF.

00:18:31.160 --> 00:18:36.340
In fact, so useful, let's talk about that
editing context for a while.

00:18:36.900 --> 00:18:41.000
The EO Editing Context
class is the class.

00:18:41.150 --> 00:18:42.730
It's like your go-to guy.

00:18:42.800 --> 00:18:49.340
If you want to do anything related
to all the basics of database access,

00:18:49.480 --> 00:18:52.340
you're going to be talking
to the editing context.

00:18:52.500 --> 00:18:56.970
If you want to fetch from the database,
you make up an object that

00:18:56.970 --> 00:19:01.500
specifies what you want and you
hand it to the editing context,

00:19:01.540 --> 00:19:03.420
you say, "Go get it." If you want to

00:19:03.650 --> 00:19:04.440
Insert objects.

00:19:04.500 --> 00:19:06.560
You make a new one,
you hand it to the editing context,

00:19:06.560 --> 00:19:09.800
you say, here,
I want to stick this into the database

00:19:09.800 --> 00:19:12.770
the next time we save our changes back.

00:19:12.830 --> 00:19:16.070
If you want to, well,
I've been watching The Sopranos a lot,

00:19:16.070 --> 00:19:19.240
if you want to whack an object,
you're going to take an object

00:19:19.240 --> 00:19:22.680
that you've already fetched in
and you tell the editing context,

00:19:22.680 --> 00:19:25.040
hey, I don't want,
I want this thing gone.

00:19:25.040 --> 00:19:26.420
I want to delete it.

00:19:27.280 --> 00:19:29.930
And it also,
when you're changing objects,

00:19:29.930 --> 00:19:32.360
you don't even have to do anything.

00:19:32.360 --> 00:19:33.860
The editing context is just watching.

00:19:33.860 --> 00:19:38.120
Just sitting there saying, okay,
you made a change.

00:19:38.120 --> 00:19:39.110
I gotcha.

00:19:39.220 --> 00:19:40.570
It's a very nice thing.

00:19:40.570 --> 00:19:44.010
And then at the end of the day,
when you've done all your edits,

00:19:44.010 --> 00:19:47.600
you have the choice either to chuck them,
revert the editing context,

00:19:47.760 --> 00:19:53.490
or save all of those changes in one
big transaction down to the database.

00:19:54.820 --> 00:19:57.360
Editing context, very important.

00:19:57.360 --> 00:19:59.290
Now, we're going to see some code.

00:19:59.340 --> 00:20:01.740
We're going to walk through each
of these and I'll show you how to

00:20:01.770 --> 00:20:05.570
programmatically do all of these items.

00:20:05.700 --> 00:20:08.630
Now I brought up the
display group earlier,

00:20:08.640 --> 00:20:12.820
the WoW display group,
which is an object that sits

00:20:12.920 --> 00:20:15.280
on top of an editing context.

00:20:15.390 --> 00:20:20.060
And all of the magic that you've seen,
right, with dragging things up,

00:20:20.170 --> 00:20:23.360
things are being fetched automatically,
they're all happening.

00:20:23.460 --> 00:20:27.320
They've all been happening because
a display group has been talking to

00:20:27.370 --> 00:20:31.400
the real power behind the scenes,
the editing context.

00:20:31.500 --> 00:20:34.750
And so all of the methods that
you see here are essentially what

00:20:34.750 --> 00:20:39.640
the display group magically has
been sending the editing context.

00:20:39.770 --> 00:20:42.460
There really is,
when you start to look at it,

00:20:42.460 --> 00:20:45.970
not really so much magic,
it just really looks that way because

00:20:46.240 --> 00:20:48.840
the whole system is put together so well.

00:20:48.880 --> 00:20:50.440
So let's get into it.

00:20:50.520 --> 00:20:52.040
So fetching.

00:20:52.110 --> 00:20:55.350
When you start doing some
fetching in WebObjects,

00:20:55.350 --> 00:20:59.440
you will find that there are
many techniques for fetching.

00:20:59.550 --> 00:21:01.000
We've seen a couple already.

00:21:01.000 --> 00:21:03.970
One is using a display group to fetch.

00:21:04.070 --> 00:21:08.090
In the prior presentation,
there was a method from EO Utilities,

00:21:08.090 --> 00:21:10.430
a convenience method for fetching.

00:21:10.560 --> 00:21:14.040
We're going to see two ways
to fetch in this presentation.

00:21:14.090 --> 00:21:18.070
No matter which technique we use,
there's still a canonical

00:21:18.070 --> 00:21:20.420
thing that always happens,
and that's what we're

00:21:20.470 --> 00:21:24.670
going to go through,
the canonical longhand way.

00:21:24.680 --> 00:21:27.440
It's kind of like I'm going
to teach you long division,

00:21:27.450 --> 00:21:30.520
and then after that,
I'm going to give you a calculator.

00:21:30.960 --> 00:21:34.020
So, first you create a FET spec.

00:21:34.020 --> 00:21:36.590
A FET specification,
we'll see in a moment,

00:21:36.700 --> 00:21:39.690
just specifies what
I want from the database.

00:21:39.810 --> 00:21:44.010
I have to get hold of an editing
context conveniently enough

00:21:44.260 --> 00:21:47.900
in a WebObjects application.

00:21:47.950 --> 00:21:55.130
Every user has a session and every
session has access to or can lazily

00:21:55.130 --> 00:21:57.870
create a default editing context.

00:21:57.970 --> 00:21:59.900
So it's very easy to get hold of one.

00:21:59.900 --> 00:22:03.720
And then I tell the editing context,
"Hey, here's a FET specification.

00:22:03.720 --> 00:22:07.710
Go get me the objects that match
this." The editing context does the

00:22:07.790 --> 00:22:12.660
work of talking to its friends at the
lower levels in the Enterprise Objects

00:22:12.660 --> 00:22:15.050
Framework and you get back EOs.

00:22:15.190 --> 00:22:20.730
And what you get back is an array
of retrieved Enterprise Objects.

00:22:21.260 --> 00:22:23.690
And you have a choice.

00:22:23.750 --> 00:22:26.070
You can either,
then you have this array and you

00:22:26.070 --> 00:22:30.470
can manage that array yourself so
if you're adding new objects to

00:22:30.470 --> 00:22:33.930
the editing context you might also
want to stick them in that array.

00:22:34.010 --> 00:22:36.790
If you're deleting objects from
the editing context you might

00:22:36.790 --> 00:22:40.540
want to remove them from the array
so that when you display that

00:22:40.750 --> 00:22:43.070
array everything looks copacetic.

00:22:43.190 --> 00:22:47.180
That is something actually that
a display group handles for you.

00:22:47.960 --> 00:22:48.900
All right.

00:22:48.980 --> 00:22:51.940
So let's do a fetch specification.

00:22:51.940 --> 00:22:53.110
What are we going to
get from the database?

00:22:53.170 --> 00:22:55.600
Well, the first thing we need to tell
it is what kind of thing are

00:22:55.600 --> 00:22:57.280
we getting from the database?

00:22:57.280 --> 00:22:58.100
The entity name.

00:22:58.100 --> 00:22:59.540
It's just a string.

00:22:59.540 --> 00:23:01.290
It's the name of the entity in the model.

00:23:01.500 --> 00:23:04.440
What table are we fetching against,
basically?

00:23:04.440 --> 00:23:06.420
The next thing is something
called a qualifier,

00:23:06.490 --> 00:23:08.320
which is just a description.

00:23:08.480 --> 00:23:12.850
It's basically an OO description of
the criteria of what we're looking for.

00:23:12.850 --> 00:23:16.900
And then finally,
an array of sort orderings.

00:23:16.940 --> 00:23:18.670
And sort orderings
always travel in a pack.

00:23:18.790 --> 00:23:20.570
They, you never find a lone one.

00:23:20.570 --> 00:23:23.900
They're always together in an array.

00:23:23.900 --> 00:23:27.650
And they determine what
we're going to sort on.

00:23:27.750 --> 00:23:33.100
If you are a DBA, that's wonderful,
because I don't know any SQL and you

00:23:33.100 --> 00:23:36.680
optimize my database and that's great.

00:23:36.680 --> 00:23:39.770
This is very analogous to the
where clause in a SQL statement

00:23:39.780 --> 00:23:43.640
and the order by clause,
the qualifier and the sort orderings.

00:23:43.800 --> 00:23:46.890
So a qualifier is basically
an object-oriented way of

00:23:46.890 --> 00:23:49.780
describing a bunch of criteria.

00:23:49.780 --> 00:23:52.260
So the phrase,
I'm looking for employees whose

00:23:52.440 --> 00:23:56.500
salary is greater than 5,000,
and their last name begins with a J.

00:23:56.500 --> 00:24:03.820
Well, EO qualifier is a super class,
and it has all of these subclasses.

00:24:03.820 --> 00:24:06.660
Some of them are for
concatenating things together,

00:24:06.660 --> 00:24:07.660
like an and qualifier.

00:24:07.660 --> 00:24:10.560
We also have or and not.

00:24:10.560 --> 00:24:12.590
All the good ones.

00:24:12.690 --> 00:24:17.490
EO key value qualifier is where we put
things like salary is greater than 5,000.

00:24:17.540 --> 00:24:19.570
And then we put in a number,
which is 5,000.

00:24:19.570 --> 00:24:23.100
Now, it would be a real pain in the butt
if I had to go and build all these

00:24:23.200 --> 00:24:25.530
objects and hook them up myself.

00:24:25.620 --> 00:24:30.530
So even in the longhand canonical way,
there's a slightly easier way to do that.

00:24:30.530 --> 00:24:34.020
It's a method called qualifier
with qualifier format.

00:24:34.020 --> 00:24:39.330
And essentially what it takes,
it's a lot like a printf string in C,

00:24:39.800 --> 00:24:45.780
where you give it a string with a couple
of placeholders or formatting characters,

00:24:45.780 --> 00:24:48.680
percentage at sign,
and the second argument is an

00:24:48.680 --> 00:24:53.380
array of arguments that are gonna
get plugged in to the blanks.

00:24:53.380 --> 00:24:56.320
It's like a programmatic madlib.

00:24:56.430 --> 00:24:59.930
And so essentially what happens in
this code example is we make an array,

00:24:59.930 --> 00:25:05.780
we make an object, integer 5,000,
add an object that's a string,

00:25:05.780 --> 00:25:09.700
and then we call that method
and create a new qualifier.

00:25:09.700 --> 00:25:14.960
And what this code is going to
create is this object graph.

00:25:16.100 --> 00:25:34.000
[Transcript missing]

00:25:35.000 --> 00:25:35.900
So how do we make them?

00:25:35.900 --> 00:25:39.060
Well, we make an array,
usually a mutable one so

00:25:39.080 --> 00:25:40.940
we can add stuff to it.

00:25:40.990 --> 00:25:45.990
And then we make new EO sort orderings.

00:25:45.990 --> 00:25:48.920
The name of the property or
key that we're sorting on.

00:25:49.040 --> 00:25:54.860
And then there are static variables
in EO sort ordering class that

00:25:54.860 --> 00:25:56.540
define the ways we can sort.

00:25:56.720 --> 00:25:59.490
Compare ascending, compare descending.

00:25:59.490 --> 00:26:03.180
And then we have case insensitive
versions of those for when

00:26:03.280 --> 00:26:06.000
we're doing string compares.

00:26:07.790 --> 00:26:08.860
Then we build the fetch spec.

00:26:08.960 --> 00:26:12.340
We assume in this case that we
already have an array of orderings.

00:26:12.340 --> 00:26:14.200
We already have the qualifier.

00:26:14.310 --> 00:26:18.210
We use a three argument constructor
to create a fetch spec and give

00:26:18.210 --> 00:26:21.640
it the pieces of info it needs:
the entity name,

00:26:21.750 --> 00:26:26.360
the qualifier of what we want,
and the array of sort orderings.

00:26:26.480 --> 00:26:31.350
If you want to get everything back
from the table in an unsorted way,

00:26:31.460 --> 00:26:35.060
you could build a spetch fetchification.

00:26:35.160 --> 00:26:41.290
A fetch specification that takes
null for the last two arguments.

00:26:43.160 --> 00:26:47.380
And then finally doing the fetch,
we get a hold of some editing

00:26:47.380 --> 00:26:52.970
context and again the session has
one that we use as the default.

00:26:53.380 --> 00:26:57.110
Just any old editing context just
happens to be stored in the session.

00:26:57.280 --> 00:27:00.100
We can ask the session for
its default editing context.

00:27:00.100 --> 00:27:03.320
And we send the long
but descriptive method,

00:27:03.320 --> 00:27:06.090
objects with fetch specification.

00:27:06.100 --> 00:27:10.090
We hand it the specification,
we get back an array of objects.

00:27:10.100 --> 00:27:12.080
The hard part is not fetching.

00:27:12.140 --> 00:27:16.100
The hard part is building the
specification of what you want.

00:27:16.100 --> 00:27:22.390
Actually that's sometimes true
in software development as well.

00:27:24.540 --> 00:27:27.160
Think about that when you go home.

00:27:27.470 --> 00:27:30.080
Okay, there's an easier way.

00:27:30.120 --> 00:27:33.590
The graphical Fetch Spec Builder
that's part of EO Modeler.

00:27:33.690 --> 00:27:37.770
This I think is,
when I saw this I just leapt for joy.

00:27:38.110 --> 00:27:41.380
It was a very happy day because
I didn't have to write all of this

00:27:41.480 --> 00:27:43.640
code to build a Fetch specification.

00:27:43.670 --> 00:27:47.780
Everything that I did in code
I could now do in the model.

00:27:47.820 --> 00:27:53.830
And so I can graphically create and we
will see a demo of that in a little bit.

00:27:53.830 --> 00:27:56.840
We can create the qualifier
this way including building

00:27:56.840 --> 00:27:59.340
complex ANDs and ORs and NOTs.

00:27:59.370 --> 00:28:04.520
And we can also build sort orderings
this way so that we can not have

00:28:04.520 --> 00:28:06.970
to make that array ourselves.

00:28:06.990 --> 00:28:07.880
We can just do it in a tool.

00:28:07.890 --> 00:28:10.180
Very nice.

00:28:10.190 --> 00:28:15.510
Now, when you build a qualifier, however,
usually you don't want to always get

00:28:15.740 --> 00:28:20.300
people whose salary is greater than five
thousand whose first name starts with J.

00:28:20.310 --> 00:28:25.240
You usually want the user to type
in some input so you can do a fetch.

00:28:25.240 --> 00:28:28.880
Otherwise it's a really boring app.

00:28:28.880 --> 00:28:34.660
So, in this graphical fetch spec builder,
there's something a little sneaky.

00:28:34.660 --> 00:28:36.080
Actually it's very cool.

00:28:36.290 --> 00:28:38.320
Called qualifier bindings.

00:28:38.330 --> 00:28:43.180
I can, instead of typing out a literal
thing that I'm qualifying against,

00:28:43.190 --> 00:28:48.070
I can put in that graphical fetch spec
something that reads something like

00:28:48.160 --> 00:28:50.380
last name like dollar sign last name.

00:28:50.380 --> 00:28:54.990
And that dollar sign last name is a
variable that's going to get replaced at

00:28:55.090 --> 00:28:58.340
run time with whatever the user typed in.

00:28:58.340 --> 00:29:01.600
Now I take that ingredient,
which again is kind of like a

00:29:01.670 --> 00:29:04.400
fetch spec with some blanks in it.

00:29:04.400 --> 00:29:06.240
And how am I going to
fill those items in?

00:29:06.240 --> 00:29:09.640
Well, you kind of got the answer
already because it's on the slide.

00:29:09.640 --> 00:29:14.200
An NSDictionary that
holds keys and values.

00:29:14.330 --> 00:29:19.300
The key in the dictionary that
matches that dollar sign variable.

00:29:19.370 --> 00:29:22.330
I stick those two together
and whatever the value is

00:29:22.330 --> 00:29:23.440
gets substituted in and voila.

00:29:23.440 --> 00:29:26.980
voila, I have my fully formed qualifier.

00:29:27.190 --> 00:29:29.660
which is very very nifty.

00:29:29.660 --> 00:29:33.430
Now how do I do all this tomfoolery?

00:29:34.290 --> 00:29:37.540
Well,
I can use a graphical fetch spec using

00:29:37.540 --> 00:29:40.760
an EO utility in one line of code.

00:29:40.790 --> 00:29:46.200
I heartily recommend this as one of the
best ways to fetch programmatically.

00:29:46.200 --> 00:29:51.040
So, we have an editing context
we've already gotten a hold of,

00:29:51.260 --> 00:29:52.200
probably from this session.

00:29:52.200 --> 00:29:58.200
We have this dictionary of values,
just calling it a query dictionary.

00:29:58.200 --> 00:30:02.650
And this method, objects with fetch
specification and bindings,

00:30:02.700 --> 00:30:06.200
that's a static method of
the EO utilities class.

00:30:06.200 --> 00:30:08.280
We handed the editing
context we're going to use,

00:30:08.420 --> 00:30:13.200
the name of the entity we're fetching,
the name of the fetch spec in the model,

00:30:13.200 --> 00:30:16.290
and then finally the dictionary
of stuff that's going to

00:30:16.480 --> 00:30:18.200
get filled into the blanks.

00:30:18.200 --> 00:30:20.150
It's going to build
the qualifier for you,

00:30:20.150 --> 00:30:23.200
fill in the blanks, build the fetch spec,
tell the editing context,

00:30:23.200 --> 00:30:26.860
"Go get me those objects with that
fetch specification." Get back the

00:30:26.860 --> 00:30:28.080
array and hand it back to the EO.

00:30:28.200 --> 00:30:31.090
Creating and inserting.

00:30:31.260 --> 00:30:34.200
It's actually very, very simple to do.

00:30:34.200 --> 00:30:38.030
It's a two-step process that a
utility lets you do in one step.

00:30:38.200 --> 00:30:41.200
You need to create an
object and insert an object,

00:30:41.200 --> 00:30:44.200
as this slide kind of gives away.

00:30:44.200 --> 00:30:47.100
You make a new object,
and you can make as many

00:30:47.100 --> 00:30:50.940
enterprise objects as you want,
and they will never end up in the

00:30:50.940 --> 00:30:56.200
database unless you insert them into an
editing context and save the changes.

00:30:56.200 --> 00:31:00.140
What this looks like is,
what Line of Code does,

00:31:00.320 --> 00:31:03.200
create an insert instance,
is you hand it an editing context,

00:31:03.200 --> 00:31:06.200
the name of the entity you
want to make a new one of,

00:31:06.300 --> 00:31:08.200
and it will...

00:31:08.390 --> 00:31:12.160
Make a new one,
stick it in the editing context,

00:31:12.160 --> 00:31:14.110
ready to be saved.

00:31:14.110 --> 00:31:16.910
And then you will also get back
a reference to that new object so

00:31:16.920 --> 00:31:21.670
you can do what other wonderful
things you'd like to do with it.

00:31:22.910 --> 00:31:25.940
Editing is the easiest.

00:31:26.060 --> 00:31:28.500
One of the wonderful things
about EOF is that you get to

00:31:28.620 --> 00:31:31.240
use your objects like objects.

00:31:31.240 --> 00:31:36.300
If I want to set and retrieve values,
I can use accessor methods.

00:31:36.330 --> 00:31:41.560
And as I'm using those accessor methods,
they are automatically being watched,

00:31:41.670 --> 00:31:44.470
those changes, by the editing context.

00:31:44.470 --> 00:31:48.080
So that the next time I save changes,
the most recent data gets

00:31:48.080 --> 00:31:50.300
put back into the database.

00:31:50.300 --> 00:31:53.270
I also bring up key value coding.

00:31:53.390 --> 00:31:56.930
This has come up, I think,
in every session as part of the

00:31:56.930 --> 00:31:59.800
fundamental magic of web objects in EOF.

00:31:59.800 --> 00:32:04.040
I would say, just as a pointer,
because we are not going

00:32:04.210 --> 00:32:07.330
to get into it here,
that understanding

00:32:07.720 --> 00:32:12.900
Key-value coding and dictionaries,
especially NS-mutable dictionaries

00:32:12.900 --> 00:32:17.000
where you can add and remove things,
are probably two very key things

00:32:17.000 --> 00:32:19.960
to the zen of EOF and WebObjects.

00:32:20.040 --> 00:32:23.190
So, further research for you all.

00:32:23.370 --> 00:32:26.740
The idea though is basically in
key-value coding it's just an

00:32:26.740 --> 00:32:30.600
interface that declares instead
of always having to write two

00:32:30.600 --> 00:32:35.550
accessor methods for every property,
set name, get name, set salary,

00:32:35.740 --> 00:32:36.820
get salary.

00:32:36.900 --> 00:32:41.590
You know, you have 37 properties,
you end up with, what's that, six, 74,

00:32:41.760 --> 00:32:43.340
74 accessor methods.

00:32:43.420 --> 00:32:44.940
Let's have two.

00:32:45.010 --> 00:32:48.850
And we just pass in the name of
the property we're trying to get

00:32:48.890 --> 00:32:54.600
and set as a parameter rather than
hard coding it as a method name.

00:32:54.790 --> 00:32:59.110
That is what key-value coding is,
which also means that as I'm using

00:32:59.110 --> 00:33:05.710
objects that implement key-value
coding and all the good ones do,

00:33:05.710 --> 00:33:05.710
um,

00:33:06.060 --> 00:33:10.480
I'm able to treat them and get and
set values in them in a very generic

00:33:10.560 --> 00:33:16.460
way which is really very much at the
core of why we can do all the cool,

00:33:16.660 --> 00:33:20.650
fun, drag-and-drop,
easy stuff that we saw yesterday.

00:33:21.830 --> 00:33:23.540
And then finally, deleting.

00:33:23.600 --> 00:33:27.690
If you want to get rid of an EO,
it's very simple.

00:33:27.740 --> 00:33:31.910
You call on your friend the
editing context and you say,

00:33:31.930 --> 00:33:35.220
"Delete this object." And it'll
put it on the hit list.

00:33:35.490 --> 00:33:39.840
That thing is going to be gone
the next time you save changes.

00:33:41.940 --> 00:33:43.900
So we've seen what?

00:33:43.930 --> 00:33:48.940
For fetching, inserting, updating,
and deleting, we've seen about, what,

00:33:48.990 --> 00:33:51.260
five lines of code.

00:33:51.340 --> 00:33:53.480
Very difficult stuff.

00:33:55.480 --> 00:34:00.720
Now all of those changes are just
hanging out in that little scratch

00:34:00.820 --> 00:34:03.050
pad in that editing context.

00:34:03.160 --> 00:34:06.460
They're not in the database,
they're not bothering anybody else.

00:34:06.520 --> 00:34:09.440
And in fact,
to start from the bottom of the slide,

00:34:09.440 --> 00:34:12.920
if that user say hit a cancel
button on your web page,

00:34:12.980 --> 00:34:16.730
you could in that action method
tell the editing context to revert.

00:34:16.880 --> 00:34:18.920
Revert, throw out all those changes.

00:34:18.970 --> 00:34:22.190
All those things you inserted and
changed and were ready to delete,

00:34:22.250 --> 00:34:23.460
just chuck that all.

00:34:23.660 --> 00:34:25.280
We're reverting.

00:34:25.320 --> 00:34:27.970
Um, or...

00:34:28.500 --> 00:34:51.800
[Transcript missing]

00:34:52.750 --> 00:34:57.040
Alright,
that is the fundamental way that we

00:34:57.140 --> 00:35:00.910
deal with EOF using an editing context.

00:35:01.640 --> 00:35:06.240
Now I'd like to bring out
Mark Respass or up Mark Respass,

00:35:06.240 --> 00:35:10.490
demogod extraordinaire who is going
to be walking us through a sample

00:35:10.490 --> 00:35:12.720
app that does all of these things.

00:35:12.720 --> 00:35:13.720
Mark.

00:35:13.760 --> 00:35:14.720
Mark Respass: Thank you.

00:35:14.720 --> 00:35:15.720
Oh, I'll do this one.

00:35:15.720 --> 00:35:16.720
Mark Respass: Am I on?

00:35:16.720 --> 00:35:17.690
Yeah.

00:35:21.810 --> 00:35:23.990
Everyone hear me alright?

00:35:24.000 --> 00:35:25.620
It's really bright up here.

00:35:25.770 --> 00:35:30.240
Okay, um... What we're going to do
is start with the browser.

00:35:34.090 --> 00:35:39.050
I've written a small application,
so I'm going to start in the

00:35:39.050 --> 00:35:43.000
opposite way that I usually do demos
and show the application first.

00:35:43.000 --> 00:35:48.500
So, as you've heard so much about CRUD,
that's what this application does.

00:35:48.500 --> 00:35:51.000
We have a small database of songs.

00:35:51.130 --> 00:35:53.280
It allows me to search on these songs.

00:35:53.280 --> 00:35:58.310
I can add songs, I can inspect the song,
and I can delete it.

00:35:59.000 --> 00:36:02.780
So we've got a couple of fields here,
song name and price.

00:36:02.790 --> 00:36:05.880
Of course, if I leave those blank,
as James said, when you want to fetch

00:36:05.880 --> 00:36:08.720
all of your objects,
you pass null for the qualifier

00:36:08.740 --> 00:36:13.490
and null for the sort orderings,
and you just get back all the objects.

00:36:14.940 --> 00:36:20.970
I can of course do searches for a
particular song and this one is set up

00:36:21.080 --> 00:36:25.660
to do greater than or equal to a price.

00:36:25.660 --> 00:36:26.540
So pretty simple stuff.

00:36:26.540 --> 00:36:34.220
I can add a song here.

00:36:43.310 --> 00:36:44.130
I've got a few pop-up buttons
with some preset categories.

00:36:44.140 --> 00:36:44.830
Maybe we can take rock
and Charles Mingus.

00:36:44.840 --> 00:36:48.300
I can see Mingus doing
some rock and dirt,

00:36:48.300 --> 00:36:50.300
a little collaboration
with Alice in Chains.

00:36:50.300 --> 00:36:55.300
Come back in our research and
now we've got that same song.

00:36:55.300 --> 00:36:59.300
I can hit the delete button because it
turns out Mingus doesn't want to do that.

00:36:59.300 --> 00:37:03.300
And I can inspect any song
and make a change to it.

00:37:03.300 --> 00:37:09.300
So you can see I actually have an
mp3 of this file on my home computer

00:37:09.300 --> 00:37:12.300
but since this isn't my computer,
let's delete it so that doesn't work.

00:37:12.300 --> 00:37:16.290
And we can go back, take a look at it.

00:37:16.420 --> 00:37:19.290
Of course, I can hit cancel and
that reverts the changes.

00:37:19.300 --> 00:37:23.480
So if I were to make a lot of changes
and clear out all these fields,

00:37:23.480 --> 00:37:24.300
hit cancel.

00:37:24.300 --> 00:37:27.300
That simply invokes revert
on the editing context.

00:37:27.300 --> 00:37:29.300
So how do I do that?

00:37:29.300 --> 00:37:30.720
How do we do that?

00:37:30.830 --> 00:37:34.280
Starting with search.

00:37:35.300 --> 00:37:36.200
big font.

00:37:36.300 --> 00:37:41.610
Starting with the search method,
as James described, there's lots of ways

00:37:41.680 --> 00:37:42.890
that you can do this.

00:37:42.890 --> 00:37:44.180
You can write all of the code.

00:37:44.200 --> 00:37:47.830
You can create your fetch specification
through by creating your and qualifier.

00:37:47.830 --> 00:37:49.410
In this case, we've got two fields.

00:37:49.460 --> 00:37:51.480
I'd have to create two
EOK value qualifiers,

00:37:51.480 --> 00:37:54.540
take an array of those,
and pass them to an and qualifier,

00:37:54.540 --> 00:37:55.540
and make that.

00:37:55.560 --> 00:37:59.260
Create my sort orderings,
create my fetch specification,

00:37:59.260 --> 00:38:04.040
pass all that to the editing context,
and ask it to return all the objects.

00:38:04.100 --> 00:38:07.120
Or I can just use the, you know.

00:38:07.720 --> 00:38:08.700
The big font.

00:38:08.700 --> 00:38:10.260
Hold on.

00:38:10.260 --> 00:38:14.690
I can just ask it to the ER utilities
method to do the fetch for me.

00:38:14.700 --> 00:38:17.190
Objects with fetch
specification and bindings,

00:38:17.220 --> 00:38:19.560
given an editing context,
the name of an entity,

00:38:19.670 --> 00:38:23.760
the name of my fetch spec,
and the query dictionary.

00:38:25.130 --> 00:38:30.880
So I'm going to talk a bit about the
graphical fetch specs in EOModeler.

00:38:30.920 --> 00:38:33.450
Because as James was
going through all that,

00:38:33.450 --> 00:38:36.620
you can see it can get pretty complicated
creating all of these EO key value

00:38:36.650 --> 00:38:38.760
qualifiers for every field that you had.

00:38:38.760 --> 00:38:41.120
You potentially would have
a whole bunch of fields in a

00:38:41.120 --> 00:38:42.740
more complicated application.

00:38:42.740 --> 00:38:45.940
You'd have to create all
these key value qualifiers.

00:38:45.980 --> 00:38:50.500
So EOModeler makes it really
easy to create these graphically.

00:38:50.500 --> 00:38:54.650
And you can see here I've got song name,
case insensitive like song name,

00:38:54.730 --> 00:38:57.960
and cost greater than or equal to cost.

00:38:57.960 --> 00:39:04.220
What I'm going to do is add a couple
of fields in here to do more searches.

00:39:04.220 --> 00:39:06.760
So I'd like to be able
to search by artist.

00:39:06.760 --> 00:39:09.790
Oh wait, let me double check.

00:39:14.920 --> 00:39:16.920
Yeah, by artist.

00:39:16.920 --> 00:39:19.340
I've conveniently written
some code in here already.

00:39:19.440 --> 00:39:25.800
So I add an and qualifier and I'm
going to click on to artist equals

00:39:26.500 --> 00:39:35.400
[Transcript missing]

00:39:36.650 --> 00:39:41.000
toCategory equals Category.

00:39:41.000 --> 00:39:46.310
What's going to be interesting
about this is that for the artist,

00:39:46.310 --> 00:39:48.860
I'm just binding the
toArtist relationship.

00:39:48.860 --> 00:39:52.780
If you remember, in the custom EO,
you can see that toArtist is a

00:39:52.780 --> 00:39:56.680
method on song that returns an artist
object or an EO Enterprise object

00:39:56.680 --> 00:39:58.690
referring to the artist table.

00:39:58.690 --> 00:40:02.950
But I'm only asking it for this
particular object here in the fetch spec.

00:40:02.950 --> 00:40:05.720
For Category,
I'm looking at the actual Category

00:40:05.860 --> 00:40:06.580
field in the Category field.

00:40:06.600 --> 00:40:09.550
category table,
so I can put a string in there.

00:40:10.900 --> 00:40:15.380
In my WebObjects template,
I've got this query dictionary and I've

00:40:15.470 --> 00:40:20.430
got it bound up to song name and cost,
two fields in my song table.

00:40:20.540 --> 00:40:26.770
I'm going to add a row for the category.

00:40:31.240 --> 00:40:39.070
I'm putting in a field and I'm going to
bind up my query dictionary using the

00:40:40.050 --> 00:40:42.000
"Variables I specified in my fetch spec.

00:40:42.080 --> 00:40:45.110
So query dictionary, dictionary,
and then I'm going to

00:40:45.120 --> 00:40:46.910
add a row below that."

00:40:47.330 --> 00:40:54.140
for the artist because i conveniently
already put in a couple of variables

00:40:54.980 --> 00:40:57.440
I've got this artist display group.

00:40:57.510 --> 00:41:00.660
You may remember in previous sessions
where they discussed the display group.

00:41:00.660 --> 00:41:04.640
You can configure it for a particular
table or a particular entity.

00:41:04.720 --> 00:41:07.220
And this one is for the artist table.

00:41:07.300 --> 00:41:10.940
I've got it set to fetch on load,
sorted by artist name.

00:41:11.010 --> 00:41:12.960
So it's going to fetch
all of the artists.

00:41:13.040 --> 00:41:17.100
I'm going to bind the
displayed objects to the list.

00:41:17.110 --> 00:41:22.090
I've got an artist object
in here for the item.

00:41:23.600 --> 00:41:29.870
I'd like to display the artist.artistName

00:41:30.250 --> 00:41:34.130
And then I've got a selection.

00:41:34.130 --> 00:41:39.410
In the selection, I'm going to bind query
dictionary.artist.

00:41:40.820 --> 00:41:43.480
Because what's interesting about
this is that the pop-up button

00:41:43.480 --> 00:41:47.160
doesn't give you back a string
which is the name of the artist.

00:41:47.170 --> 00:41:49.760
It gives you back an
actual artist object.

00:41:49.780 --> 00:41:53.620
I happen to be displaying in the
display string the artist name,

00:41:53.660 --> 00:41:56.920
but the object, the thing I'm getting
back is an artist object.

00:41:56.940 --> 00:42:02.720
So I can pass that particular
artist into my fetch spec and say,

00:42:02.720 --> 00:42:06.090
for the relationship to the artist,
find all the songs that

00:42:06.180 --> 00:42:08.310
match that relationship.

00:42:11.270 --> 00:42:17.850
If I go back in here and recompile
to get the changes for my model,

00:42:24.450 --> 00:42:28.100
I'll get these two new fields in here,
they'll let me search.

00:42:28.160 --> 00:42:32.720
I don't have to write any more code
in order to get these and out of

00:42:32.880 --> 00:42:36.750
the thousand demos that I've done,
I always seem to forget one

00:42:36.750 --> 00:42:42.950
binding in this pop-up button,
which is the no selection string.

00:42:48.330 --> 00:42:53.880
fetch again and refreshing this page
now I can select so I can select setting

00:42:53.880 --> 00:42:58.590
that to none I get all artists I get
all the songs by Alice in Chains all

00:42:58.590 --> 00:43:03.960
the songs that begin with see in this
case nothing nothing is found so it's

00:43:04.090 --> 00:43:08.100
really easy to add this up and add these
things into your fetch specification

00:43:08.210 --> 00:43:12.060
using EO modeler you don't have to write
any new code it's all getting set up

00:43:12.070 --> 00:43:17.110
with my query dictionary let's take a
look in a little more detail at how this

00:43:17.110 --> 00:43:21.520
is getting done I have a query dictionary
which is an NF mutable dictionary

00:43:21.520 --> 00:43:25.030
which I initialize in the constructor

00:43:25.580 --> 00:43:30.430
And I bound up these keys:
query dictionary dot cost,

00:43:30.470 --> 00:43:33.700
which is a field in my song table,
and this one, the selection is query

00:43:33.700 --> 00:43:36.500
dictionary dot artist,
and those all match what's in the

00:43:36.530 --> 00:43:38.500
fetch specification in EOModeler.

00:43:38.630 --> 00:43:44.490
So, and during the request response loop,
when WebAuth just goes through this page,

00:43:44.520 --> 00:43:46.620
it's going to go into each
one of those forms and say,

00:43:46.620 --> 00:43:49.700
I've got query dictionary song name,
so it's going to look,

00:43:49.700 --> 00:43:52.410
set the song name key,
and take the value out of

00:43:52.520 --> 00:43:53.500
that field and put it in.

00:43:53.530 --> 00:43:56.070
And remember,
in an intramutable dictionary,

00:43:56.070 --> 00:43:59.500
for anyone who doesn't know,
the method is set object for key,

00:43:59.500 --> 00:44:03.500
so it'll set that, the value,
to song name for the key song name,

00:44:03.500 --> 00:44:06.940
but if song name doesn't exist,
it will create a key song name

00:44:07.010 --> 00:44:08.500
and set that value in there.

00:44:08.500 --> 00:44:12.530
And in fact, if these are null,
if I were to leave one out,

00:44:12.530 --> 00:44:16.330
it will actually remove it
as part of key value coding,

00:44:16.330 --> 00:44:18.810
which is how I'm able to do a fetch.

00:44:19.100 --> 00:44:23.800
I can say,
put in two here and find all of these.

00:44:23.820 --> 00:44:25.880
L greater than or equal to.

00:44:29.800 --> 00:44:31.790
I don't know what match is found.

00:44:31.850 --> 00:44:34.390
If we can make a change to that
and I don't keep all the fields

00:44:34.480 --> 00:44:36.900
that were in my query dictionary.

00:44:38.800 --> 00:44:44.280
So I also have debugging
on on this application.

00:44:44.280 --> 00:44:46.840
Oh, and if we look at the
query dictionary here,

00:44:46.840 --> 00:44:50.180
you can see that this is actually
an artist that was selected,

00:44:50.200 --> 00:44:52.180
and you get an artist object.

00:44:52.180 --> 00:44:57.740
And I have debugging on where
you can see that the SQL being

00:44:57.740 --> 00:45:00.260
generated is the artist ID.

00:45:00.260 --> 00:45:04.310
And EOF is able to say,
find me the artist that matches.

00:45:04.360 --> 00:45:05.600
Get its primary key out.

00:45:05.600 --> 00:45:08.630
Match that up with the foreign
key that's in the song table.

00:45:08.800 --> 00:45:10.480
And do the query that way.

00:45:10.480 --> 00:45:13.920
So the SQL is being generated for me,
but I don't have to deal with it.

00:45:13.920 --> 00:45:16.490
I can just deal with the objects.

00:45:17.970 --> 00:45:21.300
So that was the search method.

00:45:21.330 --> 00:45:22.560
A couple of other things.

00:45:22.580 --> 00:45:24.680
I can add a song.

00:45:25.920 --> 00:45:29.050
So we went through and
I hit the add song button.

00:45:29.080 --> 00:45:31.440
It brings up this other page.

00:45:31.510 --> 00:45:33.600
What happens with that?

00:45:34.060 --> 00:45:36.870
If I want to add a song,
I use the method that James mentioned,

00:45:36.930 --> 00:45:39.320
create and insert instance,
pass it the editing

00:45:39.320 --> 00:45:41.190
context that I'm using,
the session's default

00:45:41.250 --> 00:45:43.960
editing context in this case,
and the name of the entity

00:45:43.960 --> 00:45:46.970
I want to get an object back,
which is a song entity.

00:45:46.980 --> 00:45:49.940
I have a method here,
edit page with song,

00:45:49.940 --> 00:45:53.910
because I'm actually using
the same component to edit new

00:45:54.010 --> 00:45:56.700
objects and edit existing objects.

00:45:56.800 --> 00:45:59.950
So I have edit page with song,
which simply sets the song

00:45:59.950 --> 00:46:03.590
to the song that I return and
sets the return page to this,

00:46:03.590 --> 00:46:05.910
which is why when I come
back after creating a song,

00:46:05.910 --> 00:46:07.380
my page looks the same.

00:46:07.400 --> 00:46:10.990
Passing this to the next page,
I can return that woe component

00:46:11.060 --> 00:46:14.000
and I get the page back in
the same state it was in,

00:46:14.000 --> 00:46:19.110
which for this demo
worked out well for me.

00:46:19.340 --> 00:46:24.300
If I were to edit a song,
I simply pass it the song that I have.

00:46:24.300 --> 00:46:27.200
And this is part of some of
the magic of WoW repetition.

00:46:27.430 --> 00:46:31.870
The WoW repetition allows me to
select one of the songs in that array,

00:46:31.960 --> 00:46:34.140
in the table,
and it will set the song variable

00:46:34.200 --> 00:46:36.200
automatically to the one that I selected.

00:46:36.200 --> 00:46:38.560
I don't have to go through
and figure out what it is.

00:46:38.600 --> 00:46:40.860
The song variable gets
set to the one I selected.

00:46:41.070 --> 00:46:42.940
If I delete,

00:46:43.440 --> 00:46:45.290
The same sort of thing happens.

00:46:45.290 --> 00:46:48.990
It automatically sets the song
instance variable to the object

00:46:49.110 --> 00:46:50.940
that I selected in the row.

00:46:51.000 --> 00:46:53.630
And then I, as James was talking about,
if you were to manage

00:46:53.630 --> 00:46:56.760
this array yourself,
I remove the object from the array,

00:46:56.830 --> 00:46:59.200
ask the editing context
to delete the song,

00:46:59.200 --> 00:47:02.960
which just marks it for deletion,
and then when changes are saved,

00:47:03.040 --> 00:47:08.530
the editing context saves the changes,
deletes those objects.

00:47:08.590 --> 00:47:11.750
Taking a look at the edit page,

00:47:15.120 --> 00:47:20.890
The save song method on
here is again very simple.

00:47:20.970 --> 00:47:25.800
I ask the editing context to save
changes and I return the page that I set.

00:47:25.900 --> 00:47:29.170
Now, you might wonder where are
these changes coming from,

00:47:29.170 --> 00:47:31.100
where is it getting all these values?

00:47:31.220 --> 00:47:34.180
I can take a song object,
you can see all the

00:47:34.180 --> 00:47:36.500
instance variables here,
and I can bind them directly

00:47:36.500 --> 00:47:39.060
to fields on the form.

00:47:39.140 --> 00:47:42.770
I can also bind them to the
selection for pop-up buttons,

00:47:42.770 --> 00:47:44.950
so for each one of these pop-ups

00:47:45.560 --> 00:47:51.490
I have the object that was
selected in the pop-up set to the,

00:47:51.590 --> 00:47:52.740
for the song binding.

00:47:52.740 --> 00:47:56.570
So I've got song to album and
I can bind these up directly.

00:47:56.940 --> 00:47:58.870
Hitting Save saves the changes.

00:47:58.930 --> 00:48:05.790
Hitting Cancel invokes revert
on the editing context.

00:48:11.730 --> 00:48:13.800
So I just want to try a couple more.

00:48:13.800 --> 00:48:15.600
Oh, I forgot about the clock.

00:48:15.600 --> 00:48:16.490
We have plenty of time.

00:48:16.580 --> 00:48:17.340
All right.

00:48:17.450 --> 00:48:19.660
So there's more things that we can do.

00:48:20.400 --> 00:48:22.840
I didn't specify any sort orderings yet.

00:48:22.850 --> 00:48:24.990
So I can specify sort
orderings that maybe I'd like

00:48:25.080 --> 00:48:28.300
to sort these by artist name.

00:48:28.310 --> 00:48:31.560
And we can specify
ascending or descending,

00:48:31.570 --> 00:48:34.220
case insensitive or case sensitive.

00:48:34.210 --> 00:48:37.550
I believe that this is pretty
much if you have Alice in Chains

00:48:37.600 --> 00:48:40.310
with a capital A or a lowercase a,
they show up in two different places.

00:48:40.400 --> 00:48:42.040
We'd like them to all
be grouped together.

00:48:42.040 --> 00:48:47.570
So, case insensitive, sort ascending,
you can sort by song name.

00:48:48.580 --> 00:48:52.100
and last maybe do the category.

00:48:52.210 --> 00:48:55.140
And there are a number of other
things that you can do in here.

00:48:55.210 --> 00:48:57.360
You can set prefetching,
which you might find out

00:48:57.360 --> 00:48:59.500
about in some of the advanced

00:48:59.640 --> 00:49:04.150
sessions you can do raw fetches and
actually get back raw rows rather than

00:49:04.160 --> 00:49:09.770
getting back Enterprise Objects you
just get back a dictionary of raw Rows.

00:49:10.600 --> 00:49:12.790
You can set options like
fetch distinct rows,

00:49:12.820 --> 00:49:15.190
I think it's the only SQL I know.

00:49:15.260 --> 00:49:19.200
Select distinct, well, you know,
that sort of thing.

00:49:19.200 --> 00:49:21.540
We select distinct.

00:49:22.410 --> 00:49:27.120
If all of this worked out into
some SQL that could be figured out,

00:49:27.120 --> 00:49:28.800
then SQL would be set here.

00:49:28.860 --> 00:49:31.800
So we can see already that
SQL is being generated,

00:49:31.930 --> 00:49:34.900
but EOModeler isn't
really able to figure out,

00:49:34.910 --> 00:49:36.570
"I've got an artist object.

00:49:36.650 --> 00:49:40.890
How does that relate to SQL?" That's
part of what EOF is doing for us.

00:49:40.930 --> 00:49:43.720
So now we've got some sort orderings,
we've got qualifiers,

00:49:43.850 --> 00:49:48.200
we're working across relationships
because EOs know about relationships.

00:49:48.250 --> 00:49:51.300
Lots of database access
frameworks don't somehow,

00:49:51.300 --> 00:49:54.150
they forgot about relationships,
the relational part of

00:49:54.150 --> 00:49:55.890
the relational database.

00:49:56.010 --> 00:49:59.600
But with an EO, if I have a song,
a song knows about its album,

00:49:59.600 --> 00:50:02.100
it knows about its artist,
it knows about its category,

00:50:02.150 --> 00:50:04.520
but it only knows about
it when we need to get it.

00:50:04.610 --> 00:50:07.500
When we ask for the artist,
that's when it goes and gets it.

00:50:07.580 --> 00:50:11.480
So now that we've got some
sort orderings in there,

00:50:11.510 --> 00:50:16.120
I'll recompile,
get my model back into my application.

00:50:28.200 --> 00:50:28.330
I'll bring my application
back and now when I fetch,

00:50:28.330 --> 00:50:28.410
all these should be sorted.

00:50:28.420 --> 00:50:28.560
There we go.

00:50:28.560 --> 00:50:31.130
So if we just sort by,
fetch all the objects in here,

00:50:31.580 --> 00:50:35.840
now they're sorted by artist, song name,
and category.

00:50:35.840 --> 00:50:40.120
So we've got all these different songs,
Dave Holland, something James Dempsey,

00:50:40.120 --> 00:50:42.440
I don't know what the Fetch Spec song is.

00:50:42.450 --> 00:50:45.390
And that's,
I think that's pretty much it.

00:50:45.390 --> 00:50:49.040
We've got sort orderings,
we can use EOF to do all this,

00:50:49.040 --> 00:50:51.640
our EO modeler to create
our Fetch Spec graphically.

00:50:51.640 --> 00:50:54.480
James?

00:50:55.130 --> 00:50:56.480
Thank you very much, Mark.

00:50:56.480 --> 00:50:58.480
Let's give him a round of applause.

00:50:58.480 --> 00:51:02.470
And if we switch back two slides.

00:51:05.100 --> 00:51:06.100
Awesome.

00:51:06.260 --> 00:51:09.840
So the first time
I wrote a WebObjects app,

00:51:09.840 --> 00:51:12.610
it was a little,
small app to exercise EOF,

00:51:12.610 --> 00:51:15.400
actually very similar to
this with one addition.

00:51:15.400 --> 00:51:19.940
It was something that kept track of
how many times Mac OS Rumors was right.

00:51:20.100 --> 00:51:26.030
And so I wrote a little code that went
out and grabbed the HTML from their site,

00:51:26.100 --> 00:51:29.350
parsed through their tags,
pulled out the heading of each

00:51:29.350 --> 00:51:34.100
story and the story itself,
stuck it in a database using EOF.

00:51:34.230 --> 00:51:37.140
And I went through and picked a
date of when I would check back to

00:51:37.250 --> 00:51:39.100
see if that rumor was true or not.

00:51:39.100 --> 00:51:45.210
And every morning, because I don't know,
just kind of an Apple watcher,

00:51:45.210 --> 00:51:51.100
I guess I would go in and check
that out and 20% is about the ratio.

00:51:51.100 --> 00:51:56.330
But that was usually on things that were
going to happen tomorrow or the next day,

00:51:56.330 --> 00:51:57.190
you know.

00:51:57.330 --> 00:52:03.840
But I highly recommend starting out with
EOF writing a small app of this nature

00:52:04.190 --> 00:52:06.800
that exercises those basic functions.

00:52:06.800 --> 00:52:08.060
Write one or two.

00:52:08.200 --> 00:52:09.410
The practice is good.

00:52:09.480 --> 00:52:11.200
Keep it very simple.

00:52:11.250 --> 00:52:17.350
It's actually one of
the best ways to learn.

00:52:17.800 --> 00:52:23.000
The magic still, this EO editing context,
it does all this stuff.

00:52:23.100 --> 00:52:25.700
I just get back this array of objects.

00:52:25.700 --> 00:52:27.890
Somehow there's SQL being generated.

00:52:28.130 --> 00:52:29.880
Who's doing what?

00:52:30.000 --> 00:52:31.110
What's going on here?

00:52:31.210 --> 00:52:35.880
Well, we're going to take kind of the
nickel tour of the EOF stack,

00:52:35.880 --> 00:52:41.260
of the EO access framework and the
EO control framework to show how

00:52:41.260 --> 00:52:46.110
we go from a row to an EO and back.

00:52:46.600 --> 00:52:52.410
Now we'll start with EO Access and
EO Access is something where you don't,

00:52:52.420 --> 00:52:55.650
for starters at least,
do things programmatically.

00:52:55.780 --> 00:53:01.840
You configure EO Access using EO Modeler.

00:53:01.840 --> 00:53:04.480
EO Access,
actually I'm going to jump back a slide.

00:53:04.480 --> 00:53:06.440
Oh, maybe.

00:53:06.450 --> 00:53:07.300
There we go.

00:53:07.300 --> 00:53:11.300
EO Access is responsible for
the connection to the database.

00:53:11.310 --> 00:53:16.080
It's responsible for turning those
raw rows into enterprise objects.

00:53:16.080 --> 00:53:19.900
It's responsible for doing that
object relational mapping and

00:53:19.900 --> 00:53:24.980
it does so with the help or
the assistance of a model file.

00:53:24.980 --> 00:53:28.580
We don't really mess around
in EO Access that much except

00:53:28.580 --> 00:53:32.770
that the EO Utilities class,
with all those utility methods,

00:53:32.970 --> 00:53:35.580
is part of the EO Access Framework.

00:53:35.590 --> 00:53:38.480
So when you're looking in EO Control,
the documentation,

00:53:38.480 --> 00:53:41.980
and can't for the life of you find
out where this EO Utilities is,

00:53:41.980 --> 00:53:45.560
it's because it's in EO Access.

00:53:45.560 --> 00:53:47.850
EO Control, as we've seen,
is where we control things.

00:53:47.860 --> 00:53:49.060
We have an editing context.

00:53:49.100 --> 00:53:51.300
We fetch, insert, update, delete.

00:53:51.330 --> 00:53:53.590
That's where we are in control.

00:53:53.660 --> 00:53:56.100
That's what EO Control is for.

00:53:56.360 --> 00:54:00.400
So again, we don't programmatically
touch EO access that much.

00:54:00.450 --> 00:54:04.000
We've seen what EOModeler does,
has the connection information of

00:54:04.000 --> 00:54:06.770
what database we're hooking up to,
and has that

00:54:06.770 --> 00:54:08.690
object-to-relational mapping.

00:54:08.810 --> 00:54:13.300
Without a model file,
EOF is just going to sit there.

00:54:13.300 --> 00:54:16.970
It's not going to
connect to a darn thing.

00:54:17.550 --> 00:54:20.540
So the EO Access Framework
has actually two layers that

00:54:20.540 --> 00:54:22.060
we're going to talk about.

00:54:22.070 --> 00:54:24.100
One is called the adapter layer.

00:54:24.120 --> 00:54:29.120
And the adapter layer,
currently the JDBC adapter, is going to,

00:54:29.240 --> 00:54:33.130
is the part of the framework that
is sending SQL to the database,

00:54:33.140 --> 00:54:39.250
it's generating the SQL,
particular to that database.

00:54:39.810 --> 00:54:43.260
It is also maintaining the
connection through the database.

00:54:43.270 --> 00:54:48.440
It is dealing entirely in raw row data.

00:54:48.460 --> 00:54:51.810
It has never heard of
an enterprise object.

00:54:51.910 --> 00:54:55.730
It's dealing entirely in
just the rows that come back.

00:54:55.940 --> 00:54:59.840
When it gets them back,
it hands them up to the database layer.

00:54:59.930 --> 00:55:04.240
And the database layer has
two very important jobs,

00:55:04.260 --> 00:55:07.100
kind of two raisons d'être.

00:55:07.120 --> 00:55:11.890
As one would say if one had
a very poor French accent.

00:55:12.600 --> 00:55:17.100
The two things that the database
layer does is first of all its job

00:55:17.100 --> 00:55:20.380
is to turn that raw row into an EO.

00:55:20.380 --> 00:55:22.840
It's kind of like Pinocchio
becoming a real boy.

00:55:22.840 --> 00:55:27.460
It was just a plain
behaviorless bunch of data.

00:55:27.510 --> 00:55:32.110
Now it's an enterprise object that
represents the logic of your business.

00:55:32.260 --> 00:55:36.770
The second thing that it does is it
takes a snapshot of the data that came

00:55:36.810 --> 00:55:39.280
in from the database and stores it.

00:55:39.290 --> 00:55:43.440
And it holds onto it, one,
so we can cache and so EOF might save

00:55:43.440 --> 00:55:47.780
itself a trip to the database later
because it already has the information.

00:55:47.780 --> 00:55:49.750
We already went to the database.

00:55:49.980 --> 00:55:54.860
And it also holds onto it so that when we
save those changes we're able to check,

00:55:54.900 --> 00:55:57.860
"Hey, did somebody change that
row out from under us?

00:55:57.880 --> 00:56:01.770
What were the values when we first
fetched those items?" Those are

00:56:01.840 --> 00:56:05.510
called snapshots and as you go
more and more into EOF you'll

00:56:05.510 --> 00:56:07.760
learn more and more about them.

00:56:07.760 --> 00:56:09.280
I just wanted to point them out.

00:56:09.330 --> 00:56:11.280
And let you know where they lived.

00:56:11.440 --> 00:56:14.710
So once things are out
of the access framework,

00:56:14.790 --> 00:56:18.720
they're fully formed EOs,
the snapshot's been taken,

00:56:18.800 --> 00:56:20.710
and we move on to EO control.

00:56:20.800 --> 00:56:23.060
Oh, one more thing.

00:56:23.120 --> 00:56:27.540
I mentioned earlier that multiple data
sources was something that EOF did very,

00:56:27.540 --> 00:56:28.380
very well.

00:56:28.470 --> 00:56:32.820
And in fact it's so arduous to
set up a second data source.

00:56:32.880 --> 00:56:36.270
What you do is you make
a second model file.

00:56:36.390 --> 00:56:38.950
You add that model file to your project.

00:56:39.040 --> 00:56:43.940
And as you are fetching using
entities in both models,

00:56:44.040 --> 00:56:50.020
EOF will automatically come up with the
objects to connect to both databases.

00:56:50.130 --> 00:56:53.330
And both of those are going
to be fetching raw rows,

00:56:53.330 --> 00:56:55.960
turning them into EOs, and the like.

00:56:56.020 --> 00:56:58.200
A note, not all databases are orange.

00:56:58.200 --> 00:57:01.800
I should have picked a
different color to distinguish.

00:57:01.890 --> 00:57:05.460
It's also important to note,
I did not get a chance to change this,

00:57:05.600 --> 00:57:08.640
that really that whole row,
that whole line is the database lake.

00:57:08.750 --> 00:57:13.740
What EOF is doing is making a couple
of objects in each layer for each

00:57:14.200 --> 00:57:16.780
connection down to a data source.

00:57:16.780 --> 00:57:20.140
But again, the takeaway,
add another model that connects

00:57:20.140 --> 00:57:22.570
to another data source,
you're connecting to

00:57:22.570 --> 00:57:23.660
multiple data sources.

00:57:23.660 --> 00:57:28.270
The rest is handled pretty
automatically by EOF.

00:57:29.190 --> 00:57:35.030
Now, you may come across this object
class called the EO Model Group.

00:57:35.110 --> 00:57:40.820
It lives, it exists because we can have
multiple models and so we have an

00:57:40.820 --> 00:57:42.790
object that manages those models.

00:57:42.910 --> 00:57:44.900
That's what its job is.

00:57:45.060 --> 00:57:50.340
Those are kind of the big ticket
items of what's going on in EO Access.

00:57:50.830 --> 00:57:51.810
Now let's go through.

00:57:51.880 --> 00:57:54.620
So we've gotten these things
up out of the database.

00:57:54.620 --> 00:57:57.700
We have multiple data sources
we might be connecting to.

00:57:57.700 --> 00:58:02.860
And how are we going to control
what SQL gets sent here,

00:58:02.860 --> 00:58:07.880
what SQL gets sent there,
customers live over here,

00:58:07.880 --> 00:58:09.700
something else lives over here?

00:58:09.910 --> 00:58:14.240
Well, we have kind of a traffic cop in
the EO control framework called

00:58:14.410 --> 00:58:16.690
the Object Store Coordinator.

00:58:16.690 --> 00:58:19.690
You'll run across this as you're
reading the documentation.

00:58:19.700 --> 00:58:23.040
You don't talk to the
Object Store Coordinator programmatically

00:58:23.040 --> 00:58:23.700
all that often.

00:58:23.700 --> 00:58:30.180
It's just nice to know that the OSC is
there just directing traffic for you.

00:58:31.530 --> 00:58:33.800
And then on top of the
Object Star Coordinator is

00:58:33.800 --> 00:58:37.340
the thing we're familiar with,
the editing context.

00:58:37.480 --> 00:58:42.320
So I wanted to just show you how things
get from the database and who are

00:58:42.320 --> 00:58:46.790
the players along the way so that you
don't think it's just magic and I don't

00:58:46.790 --> 00:58:49.000
understand exactly what's going on.

00:58:49.050 --> 00:58:53.060
This is pretty much
the grand tour of EOF.

00:58:54.850 --> 00:58:57.560
And of course we can have
different editing contexts by

00:58:57.560 --> 00:59:00.240
default one per user session.

00:59:00.320 --> 00:59:03.540
And they're all talking through
the same object store coordinator.

00:59:03.610 --> 00:59:05.090
They're all using that same model.

00:59:05.150 --> 00:59:08.860
They're all sharing the snapshots
stored at the database layer.

00:59:08.860 --> 00:59:12.650
And they're all connecting
through the adapter layer.

00:59:14.490 --> 00:59:20.300
So that is the big ol'
walkthrough of EOF.

00:59:20.300 --> 00:59:22.070
Now, um,

00:59:22.710 --> 00:59:24.300
Let's review.

00:59:24.300 --> 00:59:30.370
So, well actually,
I wrote a little song about it, so.

00:59:31.400 --> 00:59:45.300
[Transcript missing]

00:59:54.900 --> 01:00:03.910
So how many object persistence
frameworks in the world are there

01:00:04.170 --> 01:00:09.290
that people enjoy using so much that
they write a little song about them?

01:00:17.800 --> 01:00:33.000
[Transcript missing]

01:00:43.400 --> 01:01:05.000
[Transcript missing]

01:01:14.900 --> 01:01:20.200
EOF is a software-based software that
allows you to specify the objects you

01:01:20.200 --> 01:01:22.730
want to fetch as its name implies.

01:01:22.730 --> 01:01:28.910
With a fetch spec you can stipulate those
objects you want to fetch and manipulate.

01:01:51.300 --> 01:02:12.200
[Transcript missing]

01:03:04.200 --> 01:03:13.160
♪ Fitch, spec,
baby you can stimulate those

01:03:13.160 --> 01:03:13.670
objects ♪ ♪ You want to fetch and
manipulate ♪ Everybody sing along!

01:03:13.670 --> 01:03:13.670
♪ Fitch, spec, it helps you ♪

01:03:21.800 --> 01:03:30.200
[Transcript missing]

01:04:16.090 --> 01:04:26.100
So, first time on stage, huh?

01:04:26.530 --> 01:04:27.100
Playing guitar.

01:04:27.100 --> 01:04:29.100
It was pretty noticeable too.

01:04:29.100 --> 01:04:31.970
So,
if you guys ever want a repeat of this,

01:04:32.090 --> 01:04:33.090
let us know.

01:04:33.130 --> 01:04:37.590
And in case you didn't notice,
James is also on stage inside the

01:04:37.590 --> 01:04:41.100
classroom on almost a weekly basis?

01:04:41.790 --> 01:04:43.010
A little less, but yeah.

01:04:43.220 --> 01:04:45.100
Okay.

01:04:45.100 --> 01:04:47.330
So, if you want a little bit more
information from him regarding EOF and

01:04:47.660 --> 01:04:51.100
other pieces of our technology,
you can sign up for a WebObjects class.

01:04:51.690 --> 01:04:52.100
Great.

01:04:52.110 --> 01:04:54.100
Thank you.

01:04:54.100 --> 01:04:58.010
Go to the WebObjects lab and build one
of these apps like Mark showed you.

01:04:58.100 --> 01:04:59.090
It will be very good.

01:04:59.260 --> 01:05:01.940
And roadmap.

01:05:02.020 --> 01:05:06.840
We didn't talk a lot about using
EOModeler here because data modeling

01:05:06.840 --> 01:05:10.290
and connectivity is all about that,
which is groovy.

01:05:10.420 --> 01:05:14.300
Advanced Enterprise Objects Framework
is going to be an awesome session.

01:05:14.380 --> 01:05:19.000
I'm going to be there because
I love just always hearing more.

01:05:19.100 --> 01:05:21.200
And the feedback forum.

01:05:21.260 --> 01:05:23.500
And with that, who to contact?

01:05:23.590 --> 01:05:26.500
Looks familiar from every other session.