WEBVTT

00:00:06.560 --> 00:00:10.040
Okay, well, I've got six areas I'm
going to be covering today.

00:00:10.200 --> 00:00:12.400
Privacy is basically going to
be covering things with SSL,

00:00:12.400 --> 00:00:16.460
because sometimes that can be a bit
tedious to work with with WebObjects.

00:00:16.500 --> 00:00:18.960
Protecting resources,
they're going to be talking about

00:00:19.010 --> 00:00:21.940
overriding things in the woof request
response loop to kind of protect

00:00:21.980 --> 00:00:23.420
things and lock your app down.

00:00:23.500 --> 00:00:26.900
On authentication,
just a little bit on using

00:00:27.050 --> 00:00:31.500
maybe some more irritating
things with authentication.

00:00:31.500 --> 00:00:34.500
HTTP challenge panels
and digital certificates.

00:00:34.500 --> 00:00:37.060
For persistent data integrity,
things like helping you make

00:00:37.100 --> 00:00:39.500
databases where your passwords
and your credit card numbers,

00:00:39.500 --> 00:00:41.500
for example, aren't fully exposed.

00:00:41.500 --> 00:00:45.090
For messaging integrity,
a little bit on using digital

00:00:45.310 --> 00:00:49.500
signatures to do things where
you can do message between apps,

00:00:49.500 --> 00:00:51.500
where you can kind of
verify what's going on.

00:00:51.630 --> 00:00:54.470
And in access control,
that's kind of the biggest one.

00:00:54.500 --> 00:00:56.540
Unfortunately, I think I'm probably going
to have to be able to spend

00:00:56.540 --> 00:00:57.500
the least amount of time on.

00:00:57.640 --> 00:00:59.990
But in that,
I'm talking about using access

00:00:59.990 --> 00:01:02.440
controls to protect your EOs and pages.

00:01:02.500 --> 00:01:07.210
And I've got a demonstration there,
or at least some code that I can

00:01:07.210 --> 00:01:11.500
let you all have after this show,
that shows using the Java ACL package

00:01:11.500 --> 00:01:13.500
and integrated that with EOs.

00:01:13.500 --> 00:01:15.500
So, a lot to go.

00:01:15.500 --> 00:01:17.500
So first, keeping it private.

00:01:17.660 --> 00:01:21.500
This is the main problem with, I guess,
SSL and WebObjects.

00:01:21.500 --> 00:01:24.500
You've got these partial URLs.

00:01:24.650 --> 00:01:27.150
And while that's great from
an app server standpoint,

00:01:27.150 --> 00:01:30.500
the app doesn't have to know
about the deployment environment.

00:01:30.620 --> 00:01:33.860
It's kind of a problem if you
want to actually force things

00:01:33.860 --> 00:01:36.720
to go to a certain web server,
or in this case, SSL,

00:01:36.720 --> 00:01:41.500
because if you came in over HTTP,
that would be an HTTP URL.

00:01:41.500 --> 00:01:44.500
If you came in over HTTPS, you'd be okay.

00:01:44.500 --> 00:01:48.580
So, the trick is,
you've got to create absolute URLs or

00:01:48.600 --> 00:01:51.500
come to the app over absolute URLs.

00:01:51.500 --> 00:01:55.870
So, can I have a guess, too, please?

00:01:58.650 --> 00:01:59.900
Alright, so I'm going to come into here.

00:01:59.900 --> 00:02:03.020
This is a project,
this WWDC app is something that I'm

00:02:03.020 --> 00:02:06.920
going to try and make available to any
one of y'all that want to check it out.

00:02:06.990 --> 00:02:11.060
It basically is in code,
everything I'm demoing here today,

00:02:11.060 --> 00:02:13.470
including just some reusable components.

00:02:13.550 --> 00:02:16.640
First of all, secure hyperlink.

00:02:16.970 --> 00:02:19.740
is a way of generating absolute URLs.

00:02:19.740 --> 00:02:23.400
You can basically use this
instead of WoW hyperlink.

00:02:23.400 --> 00:02:27.900
This is sort of the
gist of what's going on.

00:02:27.930 --> 00:02:29.640
Notice I've got a
WoW generic container here.

00:02:29.700 --> 00:02:32.660
It's an element named A for anchor.

00:02:32.660 --> 00:02:34.510
Instead of just binding
this thing to an action,

00:02:34.510 --> 00:02:38.510
I bind invoke action to a method
on the page called invoke action,

00:02:38.580 --> 00:02:41.240
and I have href bound
to a method called href.

00:02:41.240 --> 00:02:42.940
The action that gets
invoked on the server,

00:02:42.940 --> 00:02:46.690
I can set the URL or the href
I want to associate with that

00:02:46.690 --> 00:02:48.760
action using this technique.

00:02:48.760 --> 00:02:51.450
So let's take a look
at the source for this.

00:02:53.900 --> 00:02:54.900
Okay.

00:02:54.900 --> 00:02:56.650
And that's how I'm generating the href.

00:02:56.690 --> 00:02:59.150
Normally, if WebObjects is just
doing things normally,

00:02:59.150 --> 00:03:01.400
it asks the context for
its component action URL.

00:03:01.400 --> 00:03:04.600
In this case, if this binding says it
should be under a secure mode,

00:03:04.600 --> 00:03:07.460
all it does is take HTTPS and
append the host name to the,

00:03:07.470 --> 00:03:09.360
prepend the host name to the URL.

00:03:09.360 --> 00:03:11.520
And then I do the same thing for a form.

00:03:11.520 --> 00:03:13.950
And these things are
based on a framework.

00:03:14.140 --> 00:03:16.180
This is the secure form, by the way.

00:03:16.180 --> 00:03:17.860
Same basic thing.

00:03:19.160 --> 00:03:22.010
This stuff is based on components
you can find in WebObjects

00:03:22.020 --> 00:03:23.850
5 called component elements.

00:03:23.850 --> 00:03:26.930
This stuff has been available, actually,
I think since WebObjects 4.

00:03:27.190 --> 00:03:28.600
Not many people know
about this framework.

00:03:28.600 --> 00:03:31.550
But basically what it is,
is just about all the dynamic

00:03:31.770 --> 00:03:35.220
elements you're familiar with
implemented as components using

00:03:35.220 --> 00:03:39.160
all the high-speed things that
were done to make components fast.

00:03:39.160 --> 00:03:40.940
And I use that as a template.

00:03:40.940 --> 00:03:42.980
And in fact,
I subclassed one of those guys

00:03:42.980 --> 00:03:45.970
called WX Hyperlink here to
create the secure hyperlink.

00:03:45.980 --> 00:03:48.380
So what this looks like.

00:03:49.350 --> 00:03:53.140
This is a page that
right now is over SSL.

00:03:53.140 --> 00:03:57.360
And because of some demoing issues,
I'm going to leave it over SSL.

00:03:57.360 --> 00:03:59.750
But just to give you a little bit
of a sense of what it looks like.

00:04:00.250 --> 00:04:03.110
I'm going to have to take my word
for it that that is an absolute

00:04:03.110 --> 00:04:06.340
URL behind that hyperlink,
and it isn't...

00:04:06.800 --> 00:04:09.700
This doesn't look like
HTTPS because I came in over HTTPS.

00:04:09.700 --> 00:04:19.690
It looks like HTTPS because that's
the full URL that was put up there.

00:04:19.690 --> 00:04:19.690
So, let me go back here.

00:04:19.690 --> 00:04:19.690
Can I have the slides back?

00:04:22.900 --> 00:04:23.900
Okay.

00:04:23.900 --> 00:04:28.640
Now, there's a better way, in my opinion,
to actually get to SSL than

00:04:28.710 --> 00:04:30.680
using these hyperlinks.

00:04:30.680 --> 00:04:33.810
And that would be to
do SSL via redirection.

00:04:33.820 --> 00:04:36.330
And the technique that I've
used in the demo application is

00:04:36.390 --> 00:04:40.020
I override a pender response,
and if you're not coming in over SSL,

00:04:40.020 --> 00:04:44.090
I basically tell you to
either access is denied,

00:04:44.340 --> 00:04:48.660
or if the page requires it,
I redirect you to it.

00:04:49.370 --> 00:04:51.670
Of course,
the trick there is detecting SSL.

00:04:51.670 --> 00:04:55.220
There's really no hard
and fast rule for this.

00:04:55.220 --> 00:04:58.740
These are just some heuristics you
might use in your implementation.

00:04:58.740 --> 00:05:02.020
I have an implementation called
isRequestSecure that you can use

00:05:02.030 --> 00:05:05.950
that uses this type of information,
the HTTPS header and the server port.

00:05:05.960 --> 00:05:08.960
But you really have to get with your
deployment engineer to figure out exactly

00:05:09.020 --> 00:05:11.790
what they're doing so you can look for
the right thing to tell whether or not

00:05:11.910 --> 00:05:13.750
they're coming in over secure connection.

00:05:13.760 --> 00:05:14.590
Okay.

00:05:14.600 --> 00:05:18.980
So, can I have guest two again, please?

00:05:27.680 --> 00:05:30.020
So basically what this demo app is,
just by the way,

00:05:30.040 --> 00:05:33.280
is a simple commerce application,
and it isn't just purely demo-ware.

00:05:33.280 --> 00:05:37.380
I wanted to show some of these
security concepts in the context of,

00:05:37.380 --> 00:05:38.900
like, a real application.

00:05:38.900 --> 00:05:42.120
And even apart from the security stuff,
you might find this application

00:05:42.120 --> 00:05:45.400
useful as an example or as a starting
point for making a commerce site.

00:05:45.600 --> 00:05:49.600
So anyway,
some of these things require SSL.

00:05:49.600 --> 00:05:53.280
As it turns out,
this create account page requires HTTPS.

00:05:53.440 --> 00:05:55.980
Since I'm in it, the request is secure.

00:05:55.980 --> 00:05:58.870
If I'm not, a redirect occurs.

00:05:58.880 --> 00:06:00.960
Same thing with this sign-in page.

00:06:00.960 --> 00:06:08.660
If I'm not over a secure request,
it does a redirect and comes in over SSL.

00:06:08.660 --> 00:06:12.430
The reason I like this better
than just making the link SSL,

00:06:12.460 --> 00:06:15.500
like,
imagine that this particular username

00:06:15.500 --> 00:06:15.580
and password is a link to a website.

00:06:15.580 --> 00:06:18.320
The page is over HTTP,
but the form was over SSL.

00:06:18.320 --> 00:06:22.050
The user wouldn't have any feedback
that they're on a secure page.

00:06:22.050 --> 00:06:25.710
It would look unsecure to them,
and they might feel uncomfortable

00:06:25.710 --> 00:06:28.590
about submitting it,
even though it was safe.

00:06:28.660 --> 00:06:31.950
If the page itself makes a decision as
to whether or not it should be secure,

00:06:31.950 --> 00:06:34.690
and can make itself secure on the fly,
then you're always guaranteed

00:06:35.080 --> 00:06:37.220
that when they get to this page,
they're secure,

00:06:37.220 --> 00:06:39.840
and therefore when they submit it,
you're secure.

00:06:39.840 --> 00:06:44.390
Okay, so back to the slides.

00:06:48.720 --> 00:06:55.380
One thing I guess I should point out
about the implementation that I've done

00:06:55.380 --> 00:06:55.380
here and that y'all can take a look at,

00:06:55.680 --> 00:06:58.200
Before the redirect happens,
I try to do this redirect in a way

00:06:58.200 --> 00:06:59.380
where I don't get side effects.

00:06:59.420 --> 00:07:01.350
I've seen techniques like
this before where you've got a

00:07:01.360 --> 00:07:03.540
double invocation of an action,
or you've got a double

00:07:03.540 --> 00:07:06.660
appended response on the page,
and I wanted you to have something

00:07:06.860 --> 00:07:09.890
where when you went to the page,
it never generated at all

00:07:09.890 --> 00:07:11.630
unless it was okay to see it.

00:07:12.440 --> 00:07:14.800
And furthermore,
when you came back to it on the redirect,

00:07:14.800 --> 00:07:16.380
you didn't re-invoke the action.

00:07:16.380 --> 00:07:20.370
So when the redirect actually happens,
instead of re-invoking the

00:07:20.370 --> 00:07:24.340
URI that you originally got,
it basically re-invokes a URI that

00:07:24.340 --> 00:07:27.330
points to a direct action that's
a special direct action I call

00:07:27.330 --> 00:07:30.960
SSL return that goes and recovers the
page from the session and then tells

00:07:30.960 --> 00:07:33.060
it to finish generating its response.

00:07:37.500 --> 00:07:42.200
Now, you've got your entire app over SSL,
every page is accessed over SSL,

00:07:42.200 --> 00:07:43.680
and you think everything
is really secure,

00:07:43.680 --> 00:07:46.000
except for this little thing.

00:07:46.000 --> 00:07:48.720
And what I mean by session
hijacking is someone recovering

00:07:49.060 --> 00:07:52.330
your session ID through maybe
looking over your shoulder,

00:07:52.340 --> 00:07:54.460
or you get up to go to the bathroom
and come back to your system,

00:07:54.460 --> 00:07:56.970
and all of a sudden they have a
session ID to your E-Trade account,

00:07:56.970 --> 00:07:59.550
and they're taking a look at
your portfolio on their machine.

00:08:01.280 --> 00:08:06.170
So you might want to disable this,
and it's not terribly easy,

00:08:06.170 --> 00:08:10.960
because at some point the session
ID has to be in the clear.

00:08:10.960 --> 00:08:15.580
If you put the session, but if you,
what I, the solution I use is to emit a

00:08:15.720 --> 00:08:19.940
cookie that's specific to the session,
and when I do that,

00:08:20.020 --> 00:08:23.980
I check for that on every single request.

00:08:24.000 --> 00:08:25.890
And so if someone goes
to some other machine,

00:08:25.890 --> 00:08:28.380
not only would they have to
look over my shoulder casually,

00:08:28.380 --> 00:08:31.820
they'd also have to get on my machine,
get my cookie file, get the cookie,

00:08:31.940 --> 00:08:34.000
go over to their machine,
stick it in there,

00:08:34.280 --> 00:08:36.180
and then try and hijack it from there.

00:08:36.180 --> 00:08:41.140
And if they don't,
I throw up like an access denied page.

00:08:43.440 --> 00:08:47.870
So this section is somewhat similar
to the SSL section in that I'm

00:08:47.870 --> 00:08:50.330
overwriting a pended response and
some of the things in this section.

00:08:50.540 --> 00:08:55.890
Here I'm talking about overwriting
whoops request handling stuff.

00:08:56.000 --> 00:08:57.620
As it turns out,
there's lots of ways to get

00:08:57.620 --> 00:08:59.140
into a WebObjects application.

00:08:59.190 --> 00:09:01.390
You can specify a page name.

00:09:01.400 --> 00:09:05.670
You could specify a
direct action on the URL.

00:09:05.670 --> 00:09:10.220
So it's kind of important
to just have the app smart

00:09:10.230 --> 00:09:11.300
enough not to generate things.

00:09:11.510 --> 00:09:14.930
by default, unless you're authenticated,
just push the logic into the

00:09:14.940 --> 00:09:18.190
pages themselves to prevent
them from accidentally

00:09:18.580 --> 00:09:20.160
rendering when they shouldn't.

00:09:20.280 --> 00:09:24.210
So one way you can do that is
to override page generation,

00:09:24.230 --> 00:09:27.250
and that would mean overwriting append
response and not calling super unless

00:09:27.260 --> 00:09:29.750
you're logged in for certain pages.

00:09:29.830 --> 00:09:32.270
The other thing you might do
is page creation protection,

00:09:32.270 --> 00:09:35.340
where you override page with
name in the application class,

00:09:35.420 --> 00:09:37.840
and therefore prevent page construction.

00:09:37.940 --> 00:09:41.090
And there's some pros and cons to this.

00:09:41.310 --> 00:09:44.660
Boy, that's a tight one.

00:09:44.790 --> 00:09:48.440
The advantage to overwriting
page with name is you prevent the

00:09:48.440 --> 00:09:50.020
constructor from ever executing.

00:09:50.020 --> 00:09:52.840
So if the constructor is doing
something that requires sensitive code,

00:09:52.840 --> 00:09:54.680
it never executes unless
you're authorized.

00:09:54.680 --> 00:09:57.760
But if you override page with name in
context and not authorize for page,

00:09:57.760 --> 00:10:00.390
you return a page that they can't see,
you might return null,

00:10:00.390 --> 00:10:02.020
you might raise an exception.

00:10:02.020 --> 00:10:04.590
Now the code that calls
that needs to handle that.

00:10:04.610 --> 00:10:06.760
So basically,
in order to take advantage of that,

00:10:06.790 --> 00:10:10.310
you have to alter all the places in your
application where you use page with name.

00:10:11.200 --> 00:10:14.860
With page generation protection,
you actually let the page get created

00:10:14.860 --> 00:10:18.750
and you send it a message saying,
"Is it okay to generate you?" And if so,

00:10:18.870 --> 00:10:20.200
then it can generate.

00:10:20.200 --> 00:10:24.050
The only downside is you have to
make sure there's no sensitive logic

00:10:24.050 --> 00:10:27.640
in the constructor code of the page,
because that will execute

00:10:27.640 --> 00:10:29.190
under this scenario.

00:10:31.080 --> 00:10:34.830
Okay, now this is something else
I don't think most people realize,

00:10:34.830 --> 00:10:38.850
but you know, if you log in and you have
a link to a direct action,

00:10:38.850 --> 00:10:40.900
and if you never log in,
you never see that link on the page,

00:10:40.900 --> 00:10:43.460
it really doesn't mean you can't
type the direct action link in the

00:10:43.460 --> 00:10:46.580
location field of the browser and just
directly access that thing anyway.

00:10:47.180 --> 00:10:49.380
Now, if you use the technique
I just talked about for pages,

00:10:49.380 --> 00:10:51.140
you might prevent the
page from rendering.

00:10:51.140 --> 00:10:53.430
No one can see the page,
but that doesn't prevent

00:10:53.430 --> 00:10:56.140
the direct action that got
to that page from invoking.

00:10:56.140 --> 00:10:59.240
So, if there's something
sensitive going on in there,

00:10:59.240 --> 00:11:03.080
and you just want to globally prevent
any direct action from firing,

00:11:03.080 --> 00:11:06.760
unless it's actually okay or it's
a non-sensitive direct action,

00:11:06.760 --> 00:11:10.940
you can override perform action name,
inspect the passed in action name,

00:11:10.940 --> 00:11:12.800
and just don't call super.

00:11:12.800 --> 00:11:16.430
Don't call super if you're really
not allowed to invoke that action.

00:11:16.440 --> 00:11:19.200
And you also have access
to the will request,

00:11:19.200 --> 00:11:22.740
so in that method,
you could look at the form values for the

00:11:22.740 --> 00:11:25.490
will request and the action name itself.

00:11:28.510 --> 00:11:33.020
Now, you might not think
this particular topic,

00:11:33.020 --> 00:11:34.600
backtracking, would be specific to

00:11:34.730 --> 00:11:39.300
I've put a demo example of a little
algorithm that detects backtracking.

00:11:39.310 --> 00:11:43.780
Even if you disable client-side caching,
you still might want to know or

00:11:43.790 --> 00:11:48.520
give the user some feedback that
backtracking isn't something you want.

00:11:48.700 --> 00:11:50.660
In a commerce site,
you want people to backtrack.

00:11:50.660 --> 00:11:52.510
But there are certain
aspects of a commerce site,

00:11:52.520 --> 00:11:55.180
like the checkout process,
when you're going through Step 1, 2,

00:11:55.180 --> 00:11:55.700
and 3.

00:11:55.700 --> 00:11:58.770
You probably don't want them
to backtrack to Step 3 after

00:11:58.770 --> 00:12:00.680
they've already made the order.

00:12:00.730 --> 00:12:03.660
So, it'd be kind of nice
to detect backtracking,

00:12:03.700 --> 00:12:08.690
and I do it by comparing context IDs of
the current request to the previous one,

00:12:08.700 --> 00:12:11.700
and some other things that are
relevant to direct actions.

00:12:11.870 --> 00:12:16.680
And I don't call superinvoke action
if they've backtracked on those pages.

00:12:16.700 --> 00:12:19.290
Instead, I just return null,
which has the effect

00:12:19.290 --> 00:12:20.700
of refreshing the page.

00:12:20.700 --> 00:12:28.010
So, can I have guest 2 again, please?

00:12:32.290 --> 00:12:37.190
This action here, Account Edit,
requires authentication.

00:12:37.260 --> 00:12:40.140
And the page itself knows
that it can't render itself

00:12:40.140 --> 00:12:42.090
unless you're authenticated.

00:12:42.100 --> 00:12:44.090
So instead,
it shows the access denied page,

00:12:44.090 --> 00:12:46.170
which puts this big title,
access not allowed,

00:12:46.170 --> 00:12:48.470
and you must log in to
access this direct action.

00:12:48.470 --> 00:12:54.590
Now, this page down here, Secret Stuff,
is a...

00:12:55.240 --> 00:13:09.400
Page, just a WOC component.

00:13:09.400 --> 00:13:09.400
And again, this particular page,
instead of the direct action,

00:13:09.400 --> 00:13:09.400
this time it's the page that's
decided it can't render itself,

00:13:09.400 --> 00:13:09.400
and so it comes up like this.

00:13:09.400 --> 00:13:09.400
Now, if I log in,
I've got a test account here.

00:13:14.270 --> 00:13:15.040
says, "I'm logged in.

00:13:15.040 --> 00:13:19.740
I should be able to go to
account edit now." Okay,

00:13:19.740 --> 00:13:22.840
then I can see my account information.

00:13:22.860 --> 00:13:25.390
Okay.

00:13:25.810 --> 00:13:29.930
You probably noticed that these
security demos are kind of boring,

00:13:29.990 --> 00:13:33.590
and I couldn't do anything
more graphical than just this,

00:13:33.590 --> 00:13:36.900
and sorry about that,
but most of the stuff is

00:13:36.930 --> 00:13:39.390
happening behind the scenes,
and I know it's not exciting when you

00:13:39.390 --> 00:13:42.900
see a URL change from HTTP to HTTPS,
but it's the best I can do, okay?

00:13:45.500 --> 00:13:46.480
Okay, authentication.

00:13:46.480 --> 00:13:50.380
This, I'm not going to go into all
these different ways you can

00:13:50.380 --> 00:13:52.980
authenticate or gather credentials,
but I will talk about a couple

00:13:52.990 --> 00:13:54.300
things like when to log in.

00:13:54.300 --> 00:13:56.410
The typical thing in a
WebObjects application,

00:13:56.410 --> 00:13:58.900
as it turns out,
is what I call this front gate login.

00:13:58.900 --> 00:14:00.880
But there's other ways that
I think are more friendly,

00:14:00.880 --> 00:14:03.600
like on-demand, and you might prompt for
login on a session timeout.

00:14:04.140 --> 00:14:07.350
Now, this is the usual means,
like people put a login

00:14:07.350 --> 00:14:10.570
panel on the main page,
and you have to go through that

00:14:10.570 --> 00:14:12.870
login panel to get anywhere else.

00:14:12.870 --> 00:14:16.420
So even if you did have direct actions,
if they went and followed the advice

00:14:16.520 --> 00:14:19.930
before and locked those down or didn't
define any to vector into the app,

00:14:20.160 --> 00:14:23.040
well, it doesn't matter,
because you've got to go in here.

00:14:23.040 --> 00:14:24.960
So it's like, hey, come to my site.

00:14:24.960 --> 00:14:27.540
I've got this really
interesting thing over here,

00:14:27.540 --> 00:14:30.600
but I can't give you a URL to it,
because you've got to log in,

00:14:30.620 --> 00:14:33.880
and then you've got to navigate to it,
and then you can see it.

00:14:34.280 --> 00:14:36.250
And people go, well,
I'm not even going to bother.

00:14:36.250 --> 00:14:38.920
It'd be nice to just sort of
put a direct action on an email

00:14:38.940 --> 00:14:41.450
message you send to someone,
have them click on it,

00:14:41.450 --> 00:14:44.870
and if they're not authenticated,
just have them prompt for it.

00:14:44.880 --> 00:14:47.900
So it'd be nice if you could do
something a little bit better than

00:14:47.900 --> 00:14:51.040
this sort of front gate thing,
and that's browse on demand.

00:14:51.040 --> 00:14:53.230
And the cool thing about the
previous stuff I showed you

00:14:53.230 --> 00:14:55.470
about resource protection,
when you override a pender

00:14:55.480 --> 00:14:58.880
response and perform action,
you're basically making your direct

00:14:58.880 --> 00:15:02.110
action objects and your pages
smart enough to know when it's

00:15:02.110 --> 00:15:04.120
okay for them to show themselves.

00:15:04.140 --> 00:15:06.550
And given that,
you can just navigate through the app,

00:15:06.550 --> 00:15:09.720
and instead of showing an access
denied page like I just showed there,

00:15:09.720 --> 00:15:11.670
you might as well just
prompt them for login,

00:15:11.670 --> 00:15:13.600
or prompt them for login
to create an account.

00:15:13.600 --> 00:15:16.180
And if they create an account
and they do so successfully,

00:15:16.180 --> 00:15:18.000
take them to the intended resource.

00:15:22.300 --> 00:15:25.190
Okay, so we've come to that.

00:15:25.200 --> 00:15:27.610
In this case, guess two, please.

00:15:33.350 --> 00:15:37.300
I'm going to start a new session here.

00:15:37.300 --> 00:15:43.300
And let's see,
I need to start just shopping here.

00:15:43.300 --> 00:15:45.300
So I've got some specials down here.

00:15:45.300 --> 00:15:47.300
By the way,
the special logic actually works.

00:15:47.300 --> 00:15:49.300
It overrides the default price.

00:15:49.300 --> 00:15:54.800
And let's go home and drill
through some of these categories.

00:16:00.300 --> 00:16:02.300
Let's see,
I'll add this to my shopping cart.

00:16:02.300 --> 00:16:04.800
So I'm just browsing around the page,
and I'm able to access

00:16:04.800 --> 00:16:07.300
some of this stuff,
and then I come to this checkout button.

00:16:07.300 --> 00:16:10.880
And click that, and it says, hey,
you're not logged in.

00:16:10.990 --> 00:16:13.030
So OK, I'll log in.

00:16:16.910 --> 00:16:18.560
and it goes right where I left off.

00:16:18.560 --> 00:16:21.990
When I clicked that page,
the page didn't know about it.

00:16:22.000 --> 00:16:24.680
It didn't actually,
it was like a super class that figured

00:16:24.680 --> 00:16:25.660
out how to return the login page.

00:16:25.680 --> 00:16:27.510
If I had been logged in,
I would have just gone here.

00:16:27.520 --> 00:16:30.440
So the way this algorithm
works is you go to the page,

00:16:30.440 --> 00:16:32.750
append response starts to generate,
the page goes, oh, my God,

00:16:32.750 --> 00:16:33.520
you're not logged in.

00:16:33.520 --> 00:16:36.900
Then it creates a login response instead.

00:16:36.900 --> 00:16:38.650
Instead of doing super
append response on the page,

00:16:38.660 --> 00:16:41.140
it goes and gets the login page
and tells it to generate response,

00:16:41.140 --> 00:16:43.960
and then returns that
in an append response.

00:16:43.960 --> 00:16:45.500
So I see a login page.

00:16:45.740 --> 00:16:48.790
But before it does that,
I take the page and I put

00:16:48.790 --> 00:16:50.460
it in a session variable.

00:16:50.460 --> 00:16:54.280
So when they do successfully log in,
the login action can recover that

00:16:54.280 --> 00:16:57.900
guy from the session and then tell it
to finish generating this response,

00:16:57.900 --> 00:17:01.250
and then you see this step one
of the checkout page right here.

00:17:11.600 --> 00:17:20.400
[Transcript missing]

00:17:21.590 --> 00:17:22.900
Okay.

00:17:23.030 --> 00:17:26.140
If I had time to put the Visa and
MasterCard images up there,

00:17:26.140 --> 00:17:28.100
I would have,
but that's what those things are,

00:17:28.100 --> 00:17:30.770
so I'm picking my credit card.

00:17:31.620 --> 00:17:35.060
and do next.

00:17:35.080 --> 00:17:35.600
And OK.

00:17:35.760 --> 00:17:37.610
So I'm at the confirmation page.

00:17:37.680 --> 00:17:41.420
And let's say I backtrack.

00:17:41.430 --> 00:17:41.830
OK.

00:17:42.210 --> 00:17:46.380
It knows that I did that because it
compared the context ID and knew that I--

00:17:46.800 --> 00:18:14.000
[Transcript missing]

00:18:19.410 --> 00:18:21.300
All right,
now I'm not--don't be frightened by this.

00:18:21.300 --> 00:18:23.400
I'm not actually going
to go through all those.

00:18:23.410 --> 00:18:26.790
I'm going to--I've already
demonstrated HTML page.

00:18:26.830 --> 00:18:32.440
I'm going to talk about HTTP panel just
a little bit and client certificates and

00:18:32.440 --> 00:18:34.640
just touch on biometric for a second.

00:18:34.640 --> 00:18:37.220
The HTTP challenge
panel--actually with WebObjects,

00:18:37.220 --> 00:18:40.740
since you've got an HTML page,
it's probably not necessary to use this,

00:18:40.740 --> 00:18:43.370
but you might have a situation where
you've got to use it because people

00:18:43.380 --> 00:18:47.750
are using the HTTP challenge panel,
that thing that web server pops up or--

00:18:48.170 --> 00:18:51.850
This pops up if you send
back a certain header.

00:18:51.850 --> 00:18:54.080
And it does kind of have an
advantage that it can give you

00:18:54.080 --> 00:18:56.810
an effective single sign-on,
but it can be a little tricky.

00:18:56.970 --> 00:18:59.310
Because if you're not used to it,
you've got to look for certain

00:18:59.310 --> 00:19:01.780
headers in the request,
you've got to emit certain headers,

00:19:01.780 --> 00:19:03.720
the headers are going
to be base64 encoded,

00:19:03.720 --> 00:19:05.820
and your web server might not work as is.

00:19:05.820 --> 00:19:07.210
You might have to use
a special web server.

00:19:08.040 --> 00:19:10.280
For example,
this authorization header is the one that

00:19:10.280 --> 00:19:12.030
gets sent back when you're authorized.

00:19:12.030 --> 00:19:17.690
And peer web service with CGI and
Netscape with CGI don't pass it,

00:19:17.960 --> 00:19:21.300
but Netscape with NSAPI and
the Apache module do.

00:19:21.300 --> 00:19:23.740
And I'm sure there's some other
combinations that do as well,

00:19:23.740 --> 00:19:25.200
but you just have to be aware of it.

00:19:25.260 --> 00:19:27.470
So you see the panel,
and then you never get the header,

00:19:27.470 --> 00:19:28.320
and you wonder why.

00:19:28.320 --> 00:19:29.160
Well, this is why.

00:19:29.160 --> 00:19:31.180
The interface might not be supporting it.

00:19:31.200 --> 00:19:33.760
And the other thing that's
really confusing is this realm.

00:19:33.760 --> 00:19:38.370
One way that you can get this sort
of single sign-on effect... is you

00:19:38.370 --> 00:19:42.060
can pick a realm on your WebObjects
app that matches the same realms

00:19:42.060 --> 00:19:45.320
that need to be protected on the
web server side for static pages.

00:19:45.320 --> 00:19:48.620
And so when you authenticate
to the WebObjects application,

00:19:48.620 --> 00:19:51.650
and you access something
else that matches that realm,

00:19:51.650 --> 00:19:54.660
like some of these static pages,
your browser is going to

00:19:54.660 --> 00:19:57.130
pass the authorization stuff
down to the web server,

00:19:57.190 --> 00:19:59.780
and then the web server does
the authentication to see

00:19:59.780 --> 00:20:01.320
whether or not you can see it.

00:20:01.400 --> 00:20:05.040
Anyway, and that gives you the
single sign-on effect.

00:20:05.080 --> 00:20:07.840
So that's kind of cool.

00:20:07.960 --> 00:20:08.760
But you know what's cooler?

00:20:08.760 --> 00:20:10.750
Are these things,
if you can get away with it.

00:20:10.760 --> 00:20:13.420
If you're on an intranet,
you might be able to get away with this.

00:20:13.420 --> 00:20:17.670
Basically, have people authenticate with
a client-side certificate.

00:20:17.680 --> 00:20:19.900
And you've heard of
server-side certificates,

00:20:19.900 --> 00:20:22.800
the kinds of things that you buy to put
in your web server so you can get SSL.

00:20:22.800 --> 00:20:25.350
This is a similar cert, but for the user.

00:20:25.350 --> 00:20:27.650
Something the user submits,
something you configure

00:20:27.660 --> 00:20:28.820
the web server to ask for.

00:20:28.820 --> 00:20:31.920
And it can also give you single sign-on,
because you're basically doing a

00:20:32.020 --> 00:20:34.640
cryptographic operation between
the client and the server and

00:20:34.640 --> 00:20:36.770
authenticating to the web server,
and then getting access

00:20:36.770 --> 00:20:37.820
to everything behind it.

00:20:37.880 --> 00:20:39.880
And that might be good enough,
and you're done,

00:20:39.880 --> 00:20:42.310
and the WebObjects app doesn't even
have to be aware that it's happening.

00:20:42.360 --> 00:20:45.080
Let me get to this.

00:20:45.080 --> 00:20:46.520
I'll mention something
about the second bolt,

00:20:46.520 --> 00:20:46.810
though.

00:20:47.100 --> 00:20:48.840
However, in some cases,
you might actually want to

00:20:48.840 --> 00:20:50.120
get the digital certificate.

00:20:50.120 --> 00:20:51.960
And unfortunately,
that's a little bit problematic

00:20:52.060 --> 00:20:54.550
right now with the WoW adapters.

00:20:54.560 --> 00:20:57.680
So to address that,
even though I'm not going to demo that,

00:20:57.680 --> 00:21:03.320
a nice gentleman made a special
WoW adapter that works with Apache as

00:21:03.320 --> 00:21:07.800
a module on Mac OS X that will properly
ask Apache for the certificate.

00:21:07.800 --> 00:21:10.870
So you can go to that proper header where
the certificate is and get that guy and

00:21:10.870 --> 00:21:14.880
pass it on to your WebObjects application
so your WebObjects application can

00:21:14.880 --> 00:21:18.760
do things like validate it or look
at user information in the certificate

00:21:18.760 --> 00:21:22.460
and see if there's an enterprise
object associated with that guy in some

00:21:22.460 --> 00:21:26.490
type of hook on the application side,
like Application Awake

00:21:26.490 --> 00:21:27.710
or something like that.

00:21:28.170 --> 00:21:30.660
Now here's something you might
actually want to do with that

00:21:30.660 --> 00:21:31.990
digital certificate on the server.

00:21:32.090 --> 00:21:35.850
You might want to see if the
certificate's been revoked.

00:21:35.930 --> 00:21:37.380
That's one thing you might
want to do in your code.

00:21:37.380 --> 00:21:41.300
And you do that by looking at
a certificate revocation list.

00:21:41.320 --> 00:21:44.970
And VeriSign and all these other
CAs have certificate revocation lists

00:21:44.970 --> 00:21:47.040
usually posted on the net over HTTP.

00:21:47.110 --> 00:21:49.460
You can also go to some
clearinghouse for this,

00:21:49.460 --> 00:21:52.220
a validation authority,
and use OCSP maybe to get just

00:21:52.220 --> 00:21:55.640
the status of the particular
certificate you're interested in.

00:21:55.640 --> 00:21:58.160
The reason you might want to do
this is this Microsoft example

00:21:58.180 --> 00:21:59.440
I wanted to share with you.

00:21:59.440 --> 00:22:03.320
About a month ago, someone posing as a
Microsoft employee went to VeriSign,

00:22:03.450 --> 00:22:06.590
and VeriSign mistakenly gave them
a certificate and a private key

00:22:06.730 --> 00:22:10.210
that let this gentleman sign code
as if he's Microsoft Corporation.

00:22:10.220 --> 00:22:12.250
So when you get that
little panel that says,

00:22:12.250 --> 00:22:16.110
trust Microsoft Corporation, and you go,
yeah, always, that means you could be

00:22:16.110 --> 00:22:19.660
downloading this guy's stuff,
and God knows what you're installing.

00:22:19.660 --> 00:22:21.370
And that wouldn't happen.

00:22:21.690 --> 00:22:23.790
That cert got immediately revoked.

00:22:23.880 --> 00:22:25.530
I mean,
they found out they made a mistake.

00:22:25.620 --> 00:22:27.500
They immediately revoked the certificate,
or VeriSign did.

00:22:27.500 --> 00:22:28.990
It was kind of VeriSign's flub, I guess.

00:22:29.000 --> 00:22:33.200
But if no one's checking
the certificate status,

00:22:33.200 --> 00:22:36.070
and not many people do,
talk about an interesting attack.

00:22:36.150 --> 00:22:38.120
Everything looks safe, and in fact,
you're being attacked.

00:22:38.180 --> 00:22:40.250
So it's probably not a bad thing to do.

00:22:40.280 --> 00:22:41.740
Okay.

00:22:41.740 --> 00:22:44.270
And lastly,
in this authentication section,

00:22:44.270 --> 00:22:45.880
just a note on biometrics.

00:22:45.880 --> 00:22:48.520
Personally, I think they're interesting.

00:22:48.520 --> 00:22:51.670
I don't think I'd recommend them alone,
but if you combine them with a password,

00:22:51.670 --> 00:22:52.720
they're pretty cool.

00:22:52.720 --> 00:22:55.600
And another thing I want people to show.

00:22:55.600 --> 00:23:00.190
I'll show you at least one-on-one
after this is an example of a

00:23:00.190 --> 00:23:04.850
biometric system where it detects
who you are by how you type.

00:23:04.860 --> 00:23:05.840
It's kind of interesting.

00:23:05.840 --> 00:23:08.650
But most of these things are thumbprint,
palmprint, something about you,

00:23:08.650 --> 00:23:10.030
your voice, that kind of thing.

00:23:10.040 --> 00:23:13.120
And a lot of times they're used
with digital certificates as

00:23:13.120 --> 00:23:15.350
passphrases to unlock the private key.

00:23:18.580 --> 00:23:21.950
Now, you've gone to all this trouble
to have these strong passwords.

00:23:22.070 --> 00:23:23.840
You've got all the SSL,
everything's hunky-dory,

00:23:23.840 --> 00:23:27.500
but then your users pick
passwords like foobar,

00:23:27.730 --> 00:23:30.440
numbers, 1, 2, 3, 4, that kind of thing.

00:23:30.440 --> 00:23:33.600
And they're susceptible
to dictionary attacks.

00:23:33.600 --> 00:23:38.130
So you might want to prevent people
from logging in over and over again

00:23:38.130 --> 00:23:41.090
with a dictionary attack on your system.

00:23:41.100 --> 00:23:43.520
So I've got a...

00:23:43.730 --> 00:23:51.050
demo of that.

00:23:51.050 --> 00:23:51.050
This app happens to implement an
intrusion sort of detection stuff.

00:23:51.050 --> 00:23:51.050
Can I have a guess too, please?

00:24:03.600 --> 00:24:08.560
So, I'll log in with a valid username,
but gibberish password.

00:24:08.600 --> 00:24:14.120
Did I say "password"? Must be from Texas.

00:24:14.200 --> 00:24:16.270
Okay.

00:24:18.630 --> 00:24:21.760
Wow, I must have, like,
torqued that thing down to

00:24:21.760 --> 00:24:23.400
get only one shot at it.

00:24:23.400 --> 00:24:25.670
I thought I had it set to three,
but I must have set it to one.

00:24:25.670 --> 00:24:27.540
But that's pretty rude.

00:24:27.540 --> 00:24:30.380
I think I'd, you know,
maybe make that a little bit longer.

00:24:30.380 --> 00:24:31.920
That demo's over.

00:24:40.080 --> 00:24:42.120
There's two kinds of
counts you want to do.

00:24:42.120 --> 00:24:44.840
One based on the username and
one based on the IP address.

00:24:44.840 --> 00:24:46.870
Even though people can
spoof IP addresses,

00:24:47.080 --> 00:24:47.430
you know.

00:24:47.430 --> 00:24:49.670
But you still want to do it because
you want to sort of discourage

00:24:49.670 --> 00:24:52.140
the possibility of someone going
to a workstation and going to

00:24:52.140 --> 00:24:54.870
different workstations with the
same username or going to the

00:24:54.870 --> 00:24:58.220
same workstation as many different
usernames and attacking that way.

00:24:58.320 --> 00:25:01.480
So if you check both and you make
sure that not too many happen

00:25:01.480 --> 00:25:05.240
within a certain period of time,
you know, then you should be, well,

00:25:05.340 --> 00:25:06.510
quite a bit safer.

00:25:06.560 --> 00:25:07.470
Plus, you've got a log.

00:25:07.470 --> 00:25:10.460
This particular demo application is
writing these records to the database.

00:25:10.460 --> 00:25:13.610
When a failed login attempt happens,
it writes this thing called an

00:25:13.610 --> 00:25:15.240
intrusion log to the database.

00:25:18.500 --> 00:25:21.040
Now, persistent data integrity,
this has to do with things that

00:25:21.040 --> 00:25:22.500
happen outside your application.

00:25:22.600 --> 00:25:26.600
There's hashing, encryption,
and signatures and timestamps.

00:25:26.600 --> 00:25:30.720
So, in the case of passwords, it's

00:25:31.100 --> 00:25:32.900
I don't know how many people do this,
but it sure seems I've

00:25:32.900 --> 00:25:35.020
been to a few sites,
and I've seen these password columns,

00:25:35.020 --> 00:25:37.030
and that password looks
pretty damn human-readable,

00:25:37.030 --> 00:25:37.540
you know?

00:25:37.540 --> 00:25:42.140
And it'd be kind of nice if it
was at least encrypted or hashed.

00:25:42.250 --> 00:25:44.630
And basically,
hashing a password is probably at least

00:25:44.700 --> 00:25:48.140
a pretty good way of storing it if
you're going to store it in a database.

00:25:49.000 --> 00:25:52.620
And the way the demo application works,
by the way, is to do just that.

00:25:52.630 --> 00:25:54.970
When you sign in for an
account and provide a password,

00:25:54.970 --> 00:25:57.250
the server hashes that
password and stores the hash,

00:25:57.270 --> 00:25:59.480
and it's a one-way function,
so you can't recover the

00:25:59.560 --> 00:26:00.860
password from the hash.

00:26:00.860 --> 00:26:04.280
And when I authenticate,
when I go to that login panel,

00:26:04.280 --> 00:26:08.290
I'm fetching the user,
taking the password that they inserted,

00:26:08.290 --> 00:26:10.910
hashing that,
and then looking at the hash

00:26:10.920 --> 00:26:13.750
for the user's password,
and I compare them,

00:26:13.750 --> 00:26:16.720
and if they're the same,
then I know that they're

00:26:16.720 --> 00:26:18.960
okay and they get to get in.

00:26:19.000 --> 00:26:21.000
And that's a good way to do encryption.

00:26:21.000 --> 00:26:27.000
I assume everyone knows what a hash is,
so I'm going to have to move on.

00:26:27.000 --> 00:26:29.000
Encryption.

00:26:29.000 --> 00:26:31.550
Now this is a situation where you
make the thing look scrambled,

00:26:31.550 --> 00:26:32.980
but you can actually recover it.

00:26:33.000 --> 00:26:36.990
And for passwords, that's not necessary,
because you're just doing a comparison.

00:26:36.990 --> 00:26:39.000
But for credit card number,
you might want to encrypt it.

00:26:39.000 --> 00:26:42.130
And again, I've seen a few websites,
and you've probably heard of a few,

00:26:42.130 --> 00:26:45.990
where they go in and they hack in
and they get all the credit cards.

00:26:46.000 --> 00:26:48.000
Sometimes those people do go
ahead and encrypt their database.

00:26:49.000 --> 00:26:52.000
And they just don't put the
secret key in a safe place.

00:26:52.170 --> 00:26:55.000
But hey, at least you've got to
encrypt things like that.

00:26:55.000 --> 00:26:57.640
And there's ways of doing
it with key value coding,

00:26:57.640 --> 00:27:00.460
with special accessors,
so it happens transparently,

00:27:00.460 --> 00:27:03.060
so the rest of your app
doesn't have to care.

00:27:04.380 --> 00:27:06.120
Well, unfortunately,
I guess after you do that,

00:27:06.220 --> 00:27:08.130
people might hack the database,
but to get the passwords,

00:27:08.140 --> 00:27:09.970
they have to hack the database,
get the credit cards,

00:27:10.100 --> 00:27:13.610
then hack some server that's storing
the private key or the secret key,

00:27:13.790 --> 00:27:15.620
and get that too.

00:27:15.820 --> 00:27:17.940
But you could put that secret
key in a pretty safe place,

00:27:17.940 --> 00:27:19.280
kind of locks within the locks.

00:27:19.350 --> 00:27:24.080
And one place might be the--on 10,
might be the Mac OS X keychain.

00:27:24.450 --> 00:27:28.100
If you went to the, like,
the security framework

00:27:28.610 --> 00:27:32.820
The keychain is locked down.

00:27:32.910 --> 00:27:39.220
In my demo example,
I'm putting the secret key

00:27:39.220 --> 00:27:47.360
used for the encryption in a
Java key file in the project.

00:27:47.400 --> 00:27:51.330
If you really want to be secure,
you can put the key in a hardware device,

00:27:51.330 --> 00:27:54.120
like Chrysalis and Encipher
create these things,

00:27:54.120 --> 00:27:57.860
where all the cryptographic
operations happen on the device.

00:27:57.860 --> 00:28:00.490
The private key or the secret
key never even leaves that

00:28:00.500 --> 00:28:03.970
device to get into memory,
so they're extremely difficult to hack.

00:28:04.070 --> 00:28:07.070
You actually really have to be at the
machine and have possession of this

00:28:07.330 --> 00:28:09.030
hardware token in order to hack into it.

00:28:09.060 --> 00:28:14.470
And to do this stuff, can I have a guess,
too, please?

00:28:14.850 --> 00:28:17.820
To do all this stuff,
I'm actually using the

00:28:17.820 --> 00:28:20.020
Java cryptographic extensions.

00:28:20.020 --> 00:28:21.490
They work with Java 2,
and that's kind of the nice

00:28:21.490 --> 00:28:23.950
thing about WebObjects 5,
is that I can use all these Java 2

00:28:23.950 --> 00:28:26.910
things and just drop the jars in
from Sun's website and they work.

00:28:26.940 --> 00:28:32.080
So in this case,
I'm just going to show the source

00:28:32.080 --> 00:28:35.430
code to my credit card class.

00:28:43.760 --> 00:28:45.160
And actually, let me come to this.

00:28:45.160 --> 00:28:51.520
Worry about that in a second.

00:28:51.610 --> 00:28:52.480
OK.

00:28:52.510 --> 00:28:55.630
This is a method,
the decrypted CC number and

00:28:55.720 --> 00:28:57.710
set decrypted CC number.

00:28:58.020 --> 00:28:59.760
This is the method that
all the code calls.

00:28:59.760 --> 00:29:01.540
And it does the encryption
and decryption on the fly.

00:29:01.540 --> 00:29:03.720
And the encryption and decryption
is actually handled in this

00:29:03.720 --> 00:29:06.960
class called Security Utilities,
Decrypted Base64 String.

00:29:07.310 --> 00:29:08.580
Basically,
what I tried to do in this demo

00:29:08.580 --> 00:29:11.300
was factor out as much of the
security-related stuff into this

00:29:11.300 --> 00:29:12.560
class called Security Utilities.

00:29:12.560 --> 00:29:16.060
So you'd have one place to look
at it and actually comment it.

00:29:16.380 --> 00:29:20.650
And that does the work of encrypting
it and then Base64 encoding it.

00:29:20.720 --> 00:29:24.310
And I Base64 encode it so I can just
sort of drop it in any kind of database.

00:29:24.380 --> 00:29:26.990
And regardless of what type
of-- even if they just have just

00:29:26.990 --> 00:29:30.870
barely a few ASCII characters
supported for that column,

00:29:30.880 --> 00:29:33.300
I can safely store the thing.

00:29:33.300 --> 00:29:37.040
There's an actual attribute down
here called credit card number.

00:29:37.060 --> 00:29:39.190
And that sets and gets
this encrypted gibberish.

00:29:39.300 --> 00:29:41.120
So if you look at the
return value for that,

00:29:41.120 --> 00:29:43.690
you see the encrypted value,
which is just a bunch

00:29:43.690 --> 00:29:45.760
of funky looking stuff.

00:29:45.800 --> 00:29:53.330
So can I have the machine back here?

00:29:57.220 --> 00:29:59.630
Actually, you can see one of the reasons
I wanted to have this demo for you

00:29:59.640 --> 00:30:02.540
guys to download is that 99% of
the stuff going on in these things

00:30:02.540 --> 00:30:04.250
is happening underneath the covers.

00:30:04.250 --> 00:30:06.000
It's stuff you can't see.

00:30:06.000 --> 00:30:08.320
So I wanted you to be able to,
if you came out here for

00:30:08.330 --> 00:30:10.980
the developer conference,
I wanted you to be able to walk

00:30:10.980 --> 00:30:14.040
away with something that would
carry you forth afterwards.

00:30:21.530 --> 00:30:28.530
Signatures and timestamps.

00:30:28.530 --> 00:30:28.530
And for this, this has to do with like
safely storing documents.

00:30:30.020 --> 00:30:34.000
You could store a hash of a document.

00:30:34.000 --> 00:30:35.760
You could store the document,
you could store a hash,

00:30:35.760 --> 00:30:38.540
and that might be good if you're
protecting against things like just

00:30:38.540 --> 00:30:41.240
accidental corruption of the file.

00:30:41.240 --> 00:30:44.020
Because you can check the hash and
see if it matches up in a future date,

00:30:44.050 --> 00:30:45.890
and if it looks,
if the hash for the document

00:30:45.890 --> 00:30:48.720
matches what's in the database,
you have some reliance that

00:30:48.720 --> 00:30:50.140
it wasn't tampered with.

00:30:50.160 --> 00:30:51.970
But someone could always
alter the document,

00:30:52.070 --> 00:30:54.620
create a new hash, and store both,
and then you wouldn't see that

00:30:54.620 --> 00:30:56.060
someone had altered things.

00:30:56.440 --> 00:30:59.100
So that's why you might want to
digitally sign the document and

00:30:59.100 --> 00:31:00.540
store the signature with it.

00:31:00.540 --> 00:31:03.530
And if you want to make sure that,
if it was important

00:31:03.570 --> 00:31:06.710
that something happened,
like this was a contract,

00:31:06.780 --> 00:31:10.080
if it was important that
time was recorded on this,

00:31:10.080 --> 00:31:13.330
you might want to use a third
party to get a digital timestamp.

00:31:13.390 --> 00:31:16.020
If you all don't know what that is,
it's basically there's these third

00:31:16.020 --> 00:31:18.570
parties where you can take your document,
hash it, take the hash,

00:31:18.570 --> 00:31:21.030
send it to these guys,
I think surety.com is one of them,

00:31:21.030 --> 00:31:25.350
and they will basically
put a timestamp in this.

00:31:25.360 --> 00:31:26.240
Take your hash.

00:31:26.340 --> 00:31:27.050
Put a timestamp.

00:31:27.090 --> 00:31:29.510
Digitally sign that,
and then send that back to you,

00:31:29.540 --> 00:31:31.840
and you can take that and
put it in the database.

00:31:33.650 --> 00:31:36.740
And as it turns out, there's actually,
this is what I'm describing is

00:31:36.800 --> 00:31:38.360
basically a digital receipt.

00:31:38.360 --> 00:31:41.940
And there's an XML standard
for doing documents like this.

00:31:41.940 --> 00:31:43.230
You don't have to put
things in two places.

00:31:43.230 --> 00:31:45.600
You can just put them
all in one XML document.

00:31:45.600 --> 00:31:50.540
And that URL at the bottom is the org
where you can find the DTD for that.

00:31:58.000 --> 00:31:59.140
Messaging Integrity.

00:31:59.140 --> 00:32:01.250
This is actually very similar
to the document stuff,

00:32:01.380 --> 00:32:02.980
but instead of storing
things persistently,

00:32:02.980 --> 00:32:05.900
I'm talking here about
throwing things up to the user.

00:32:05.900 --> 00:32:09.860
Adobe Five, not the reader,
but Adobe Acrobat Five,

00:32:09.910 --> 00:32:17.030
supports digital signatures on Mac OS 9,
it actually runs on Mac OS X and Classic,

00:32:17.030 --> 00:32:20.010
and should be, I guess,
carbonized pretty soon, I'm not sure,

00:32:20.010 --> 00:32:20.900
and on Windows.

00:32:20.900 --> 00:32:23.590
So you basically have this
solution where you can put it on

00:32:23.590 --> 00:32:26.900
just about any desktop out there
and get digital signatures done.

00:32:26.900 --> 00:32:29.460
And you might want to do that for,
actually the point at the

00:32:29.460 --> 00:32:32.900
bottom I think is the coolest,
paperless workflow, or,

00:32:32.900 --> 00:32:35.900
well actually employee forms processing,
those two things inside a business.

00:32:35.900 --> 00:32:37.870
You're in an intranet,
you could actually distribute

00:32:37.910 --> 00:32:41.900
the software on clients,
and your WebObjects application could,

00:32:41.900 --> 00:32:43.900
like, you're doing stuff and it
returns a contract saying,

00:32:43.900 --> 00:32:46.740
"Do you really wish to agree to
this type of insurance or claims

00:32:46.810 --> 00:32:48.900
processing for HR?" And you can
have your private certificate,

00:32:48.900 --> 00:32:51.970
which, hey,
might be embedded on one of these,

00:32:51.970 --> 00:32:54.890
which would be kind of cool,
and then you can insert this,

00:32:54.930 --> 00:32:55.900
if it were a smart card, this one is,
and don't get excited.

00:32:55.900 --> 00:32:59.320
If this were a smart card,
you could stick it in the machine and

00:32:59.320 --> 00:33:01.890
then digitally sign the document with it.

00:33:01.900 --> 00:33:05.270
You could, like,
save the signed version on your system,

00:33:05.270 --> 00:33:08.810
or you could post the signed
document back up to the server.

00:33:08.960 --> 00:33:11.350
And in a way that's a lot better
than a handwritten signature,

00:33:11.350 --> 00:33:14.900
and there's nothing to fax, you know,
there's no paper, and it's pretty secure,

00:33:14.900 --> 00:33:20.390
or can be if you have a pretty
strong public key infrastructure.

00:33:20.820 --> 00:33:24.690
This B2B thing is very similar
to what you saw in a way last,

00:33:24.690 --> 00:33:29.480
just the other day,
when you saw a WebObjects thing on XML.

00:33:29.870 --> 00:33:31.960
Here I'm talking about doing
exactly what happened there.

00:33:31.960 --> 00:33:33.700
You got two WebObjects
apps talking to each other,

00:33:33.700 --> 00:33:36.850
but it wouldn't be nice if
you could digitally sign

00:33:36.850 --> 00:33:40.940
just some arbitrary content,
and so the receiver of it could know

00:33:40.940 --> 00:33:45.820
that this wasn't some Joe Blow with no
authority to buy the 100 Power Macs.

00:33:56.490 --> 00:33:58.800
To do that in WebObjects,
you have a few things to help you.

00:33:58.800 --> 00:34:01.400
You've got WoW Direct Actions
to turn WoW apps into services.

00:34:01.550 --> 00:34:04.780
You've got the WoW Message API for
programmatically creating requests,

00:34:04.820 --> 00:34:06.740
sending them to a server,
and getting a response back.

00:34:06.800 --> 00:34:10.800
And you have some XML management stuff
for generating it and interpreting it.

00:34:10.800 --> 00:34:13.940
So what I did, actually,
I took the demo that you saw

00:34:13.940 --> 00:34:18.090
yesterday for XML processing,
just took it and added Utility Class,

00:34:18.110 --> 00:34:20.800
which again is another thing that
will be a resource for you guys.

00:34:20.800 --> 00:34:25.330
And then added a little bit of code
to the actual original source code

00:34:25.560 --> 00:34:27.800
to add a signature to that XML.

00:34:27.800 --> 00:34:31.190
So the request ends up getting signed,
I put the signature in a header field,

00:34:31.190 --> 00:34:34.680
and then I send that down to the server,
and the server validates that the content

00:34:34.680 --> 00:34:36.800
and the signature passed in are okay.

00:34:36.800 --> 00:34:40.730
So, go to that.

00:34:40.910 --> 00:34:43.110
Guest 2, please.

00:34:54.750 --> 00:35:03.570
Okay, this is the class with all of
the digital signature stuff.

00:35:03.610 --> 00:35:07.800
And let me show you where
I build up this request.

00:35:07.800 --> 00:35:10.790
Let's see.

00:35:10.790 --> 00:35:17.800
Or actually interpret the response.

00:35:25.970 --> 00:35:26.870
Here's the code that does it.

00:35:27.050 --> 00:35:32.110
As it turns out, I've got an element
called signature value,

00:35:32.110 --> 00:35:35.000
and then I take the body of
the SOAP document in this case,

00:35:35.000 --> 00:35:38.530
I take those two pieces of information,
and then I send them to this signature

00:35:38.760 --> 00:35:42.300
XML utilities class I was talking about,
and say,

00:35:42.300 --> 00:35:45.020
"Veofer XML element with the signature,
pass in the body,

00:35:45.020 --> 00:35:48.780
pass in the base64 encoded signature,
and an output format for it to

00:35:48.780 --> 00:35:52.300
use." And then it just returns
whether or not that thing was okay.

00:35:52.300 --> 00:35:54.500
This isn't specific to SOAP.

00:35:54.540 --> 00:35:59.300
I mean, you could use this particular
utility with anything.

00:35:59.300 --> 00:36:01.780
And it uses, again,
the Java cryptographic extensions

00:36:01.780 --> 00:36:04.300
to perform the digital signature and
the digital signature verification.

00:36:04.300 --> 00:36:09.300
I would show you the demo,
but it's exactly like yesterday's.

00:36:09.300 --> 00:36:11.010
I mean, you just fill something
in and you go to it,

00:36:11.030 --> 00:36:12.290
and besides, it's not running.

00:36:12.500 --> 00:36:15.300
So.

00:36:18.110 --> 00:36:22.680
This is actually the
last piece of this guy,

00:36:22.680 --> 00:36:24.630
the sixth part, access control.

00:36:24.630 --> 00:36:29.520
So you're authenticating to a web server,
and you've authenticated,

00:36:29.520 --> 00:36:31.270
and now we know who you are.

00:36:31.270 --> 00:36:33.560
Most of the stuff I've
talked about so far is,

00:36:33.570 --> 00:36:35.650
what do I do if I don't know who you are?

00:36:36.220 --> 00:36:37.320
Okay, but now I do.

00:36:37.410 --> 00:36:39.630
So I've got an enterprise
object or a page,

00:36:39.640 --> 00:36:42.630
and the page has certain restrictions,
and I'm a user,

00:36:42.640 --> 00:36:44.630
and I might be in certain groups.

00:36:44.630 --> 00:36:49.130
So whether I get to see it or
edit it or do something else to it

00:36:49.130 --> 00:36:52.360
depends on the combination of state.

00:36:54.390 --> 00:36:58.640
Now,
here's something actually I presented,

00:36:58.640 --> 00:37:01.250
I think, before,
with one little wrinkle here.

00:37:01.410 --> 00:37:05.650
Here's just an example implementation
you might stick on an abstract

00:37:05.650 --> 00:37:07.140
superclass for enterprise objects.

00:37:07.140 --> 00:37:09.190
Can show and can edit and
pass in a user object,

00:37:09.190 --> 00:37:12.230
and just let the enterprise object
figure out what to do with it.

00:37:12.280 --> 00:37:16.470
This is a nice,
simple interface that the higher

00:37:16.470 --> 00:37:19.580
levels in your app can program to.

00:37:19.580 --> 00:37:20.790
Because if you just use a
basic interface like that,

00:37:21.700 --> 00:37:25.700
You can apply conditionals,
you can filter out EOs,

00:37:25.700 --> 00:37:28.390
and one thing I'd recommend in
this particular area is if you

00:37:28.440 --> 00:37:31.800
have an EO editing context,
you might subclass it and override

00:37:31.800 --> 00:37:35.310
Objects with Specific Attrification,
call super, and the actual results

00:37:35.310 --> 00:37:37.460
that you kick back,
you might ask the results set,

00:37:37.480 --> 00:37:40.330
are you readable, are you readable,
are you readable, and if you are,

00:37:40.330 --> 00:37:42.300
put you in a subset and
only return the subset.

00:37:42.300 --> 00:37:48.180
Then you kind of have a global way of
keeping the results set to a minimum.

00:37:48.290 --> 00:37:52.900
Just not so you don't show a count of
seven and the user only sees five rows.

00:37:52.900 --> 00:37:54.300
That doesn't look good.

00:37:54.300 --> 00:37:57.260
And then maybe you could look
at group membership based on

00:37:57.260 --> 00:38:00.510
the users to collectively hide
and show big swaths of the UI.

00:38:01.010 --> 00:38:05.470
But anyway, let me back up.

00:38:07.300 --> 00:38:10.480
The other thing I didn't-actually
in my demo application I have

00:38:10.480 --> 00:38:13.360
examples of using an implementation
of can show and can edit.

00:38:13.360 --> 00:38:15.280
I don't have an example
of value for key user,

00:38:15.280 --> 00:38:16.810
take value for key user.

00:38:16.870 --> 00:38:19.280
But the idea for that is
similar to key value coding,

00:38:19.280 --> 00:38:21.520
except the user argument
is thrown in as well.

00:38:21.520 --> 00:38:23.170
And the reason you might want
to add something like that,

00:38:23.170 --> 00:38:25.840
or an interface or something like that,
is you might have a big honking

00:38:25.840 --> 00:38:27.340
record with like a hundred columns.

00:38:27.480 --> 00:38:30.910
And guests can see this much,
but certain privileged people

00:38:30.910 --> 00:38:33.080
only get to see these attributes.

00:38:33.080 --> 00:38:34.970
You know,
and if you had a component which

00:38:34.970 --> 00:38:37.510
is smart enough to use that API,
and just decided to use

00:38:37.510 --> 00:38:40.580
that and standardize on it,
you know, you could control access at the

00:38:40.580 --> 00:38:43.190
granularity of the attribute
with an interface like that.

00:38:43.200 --> 00:38:46.310
Now, what about the implementation
behind an interface like that?

00:38:46.310 --> 00:38:48.800
Okay, here's a very simple interface.

00:38:48.800 --> 00:38:50.080
It makes some assumptions.

00:38:50.150 --> 00:38:52.690
I've got a, uh, I've got a, uh,
I've got a

00:38:52.910 --> 00:38:55.300
These are methods that might be on, say,
a product or a category.

00:38:55.300 --> 00:38:59.480
As it turns out, in my demo application,
the category entity and the product

00:38:59.480 --> 00:39:02.880
entity subclass from an abstract
class called ProtectedObject,

00:39:02.930 --> 00:39:05.620
and they implement default
implementations of this.

00:39:05.620 --> 00:39:08.080
Mine are a bit more advanced,
as I'll show,

00:39:08.080 --> 00:39:09.860
but that's where you'd put it.

00:39:09.890 --> 00:39:11.180
Just put it on an EO.

00:39:11.180 --> 00:39:13.500
And in this particular example,
the thing might have a

00:39:13.500 --> 00:39:16.700
relationship to its creator,
a 2-1 relationship, and it might have a

00:39:16.700 --> 00:39:19.360
relationship to its owners,
a 2-many relationship.

00:39:20.240 --> 00:39:25.000
And if, this particular logic says,
if the passed-in user equals the creator,

00:39:25.010 --> 00:39:26.210
you get to see it.

00:39:26.210 --> 00:39:28.660
If it's a member of the owners,
you get to see it.

00:39:28.680 --> 00:39:29.510
If not, it's false.

00:39:29.520 --> 00:39:30.990
And the can't edit is trivial.

00:39:30.990 --> 00:39:34.020
Basically, the rule is,
if you can see it, you get to edit it.

00:39:34.100 --> 00:39:38.310
So, a simple one,
but you could get more elaborate.

00:39:40.600 --> 00:40:13.100
[Transcript missing]

00:40:29.420 --> 00:40:34.610
This is a diagram view of the
classes which are relevant to the

00:40:35.610 --> 00:40:38.430
Access Control Stuff I don't
know if y'all knew this,

00:40:38.430 --> 00:40:40.920
actually it came as a surprise
to me a few months ago.

00:40:40.930 --> 00:40:43.220
There's actually a
Java spec for defining ACLs.

00:40:43.240 --> 00:40:47.120
It's called, if I remember correctly,
javasecurity.acl and there's

00:40:47.120 --> 00:40:48.600
some classes in there.

00:40:48.610 --> 00:40:51.700
And so,
what I've got here are a bunch of EOs,

00:40:51.710 --> 00:40:56.190
Eogeneric Records,
that implement those interfaces.

00:40:56.200 --> 00:41:01.050
And instead of like writing
my own implementation of an

00:41:01.050 --> 00:41:04.080
ACL policy that interprets all the
state and figures out what to do,

00:41:04.130 --> 00:41:10.180
I've got an EO that actually uses the
implementation provided by Sun to digest

00:41:10.180 --> 00:41:12.360
the state and tell what's going on.

00:41:12.360 --> 00:41:15.150
So, actually it's not very much code.

00:41:15.310 --> 00:41:23.220
The classes involved are: ACL Entry,
which implements the

00:41:23.220 --> 00:41:23.430
Java ACL Entry user interface.

00:41:23.430 --> 00:41:25.180
UserGroup implements the group interface.

00:41:25.180 --> 00:41:27.770
Permission implements
the permission interface.

00:41:27.830 --> 00:41:30.200
Person implements the
principal interface.

00:41:30.370 --> 00:41:36.490
All these guys are networked together
and basically ready to work with

00:41:36.930 --> 00:41:44.190
any Java ACL policy that adheres to
the interfaces defined by JavaSoft.

00:41:44.200 --> 00:41:49.430
So, let me go into the application here.

00:41:56.700 --> 00:42:01.740
I knew I was going to do that.

00:42:01.810 --> 00:42:04.500
I've got to make sure I type this right.

00:42:12.240 --> 00:42:16.200
Let me take a look at something
that's protected categories.

00:42:16.440 --> 00:42:19.910
Now what I've done is kind of
logged into an administration

00:42:20.290 --> 00:42:21.990
form of this application and

00:42:23.050 --> 00:42:24.890
I'm not even going to,
I'm going to try to

00:42:24.910 --> 00:42:26.240
actually explain this.

00:42:26.240 --> 00:42:27.000
I don't know how I'm going to do it.

00:42:27.000 --> 00:42:31.890
Okay, so we've got product categories,
and I'm logged in as the admin.

00:42:31.890 --> 00:42:32.890
I'm in the marketing group.

00:42:32.930 --> 00:42:37.100
And what you're looking at here is a list
of all of the categories in the system.

00:42:37.100 --> 00:42:39.180
So I'm in as an administrator,
but I'm doing some things you'd

00:42:39.180 --> 00:42:41.290
never put in an administration
user interface because I want to

00:42:41.310 --> 00:42:42.550
illustrate what's going on here.

00:42:42.550 --> 00:42:45.380
As it turns out,
the accessories cool category,

00:42:45.380 --> 00:42:48.730
I can edit its name and so forth,
it's got these three access

00:42:48.730 --> 00:42:50.310
control list entries.

00:42:50.320 --> 00:42:52.960
Okay,
and I'm sorry the font's kind of small,

00:42:52.980 --> 00:42:52.980
but I'm going to go ahead and do that.

00:42:53.040 --> 00:42:54.680
I probably should have boosted for this.

00:42:54.720 --> 00:42:55.530
But let me read it for you.

00:42:55.570 --> 00:42:57.530
If you're in the marketing group,
you get to read it.

00:42:57.530 --> 00:42:59.790
If you're in the administration group,
you get to read it.

00:42:59.810 --> 00:43:00.840
If you're the user M.

00:43:00.840 --> 00:43:02.610
Neuman, you get to read and write it.

00:43:02.750 --> 00:43:05.440
Okay, and as it turns out,
admin is in the marketing group.

00:43:05.440 --> 00:43:07.250
And therefore, what does that mean?

00:43:07.250 --> 00:43:08.660
Marketing group, read.

00:43:08.660 --> 00:43:12.660
Now, what's kind of cool about ACLs is
that unlike the Unix file system,

00:43:12.660 --> 00:43:15.210
if someone's in a group
and they get to read it,

00:43:15.210 --> 00:43:18.700
you can strategically pull someone out,
remove access.

00:43:18.700 --> 00:43:21.560
So let me edit this guy.

00:43:21.560 --> 00:43:24.800
And what you're seeing here is
that here's an ACL edit component.

00:43:24.800 --> 00:43:27.860
It's part of the project that
you will get if you want it.

00:43:27.860 --> 00:43:33.860
And let's add an ACL here for,
that's applicable to the admin,

00:43:33.860 --> 00:43:35.230
not applicable to a group.

00:43:35.260 --> 00:43:39.470
I'll make it a read permission
and I'll select negate.

00:43:39.480 --> 00:43:40.220
Okay.

00:43:42.540 --> 00:43:45.580
and save this.

00:43:45.580 --> 00:43:47.370
And if you look down here,
I can't read it anymore,

00:43:47.370 --> 00:43:49.740
and this list of available
permissions is now empty.

00:43:49.740 --> 00:43:51.330
Right, so that's how it works.

00:43:51.330 --> 00:43:53.580
And you can just sort of keep
stacking these things on.

00:43:53.690 --> 00:43:57.740
And the way the Java policy works is it
takes these two sets and it merges them,

00:43:57.740 --> 00:44:01.830
and negatives cancel out positives,
and what you're-the resulting set

00:44:01.830 --> 00:44:04.000
is a set of available permissions.

00:44:04.000 --> 00:44:07.650
And then all I do in my canShow and
canEdit methods is just call one

00:44:07.910 --> 00:44:12.270
line on the ACL policy which says,
"Do you have this permission or not?

00:44:12.270 --> 00:44:13.930
Yes or no?" And then return that.

00:44:13.990 --> 00:44:17.720
So it's a pretty clean little interface,
I think.

00:44:17.740 --> 00:44:20.170
And you can, like, add new permissions to
make up different things.

00:44:20.180 --> 00:44:21.740
ReadWrite, I added one called Upload.

00:44:21.740 --> 00:44:24.740
You might have other types of
permissions or things you might

00:44:24.740 --> 00:44:28.000
want to randomly stick in here,
and it's pretty easy to extend.

00:44:34.470 --> 00:44:40.310
Okay, so the first thing I covered
was protecting privacy.

00:44:40.450 --> 00:44:45.320
That was SSL components
to generate absolute URLs.

00:44:45.400 --> 00:44:51.520
I showed redirection, detection of SSL,
and doing that without side effects.

00:44:51.520 --> 00:44:55.080
I didn't want the side effect of
the double generation of an action

00:44:55.080 --> 00:44:57.200
or the double generation of a page.

00:44:58.140 --> 00:45:00.090
For protecting resources,
I showed overriding some

00:45:00.090 --> 00:45:01.280
request handling methods.

00:45:01.280 --> 00:45:05.130
I think they were performActionNamed,
pageWithName, and appendResponse.

00:45:05.140 --> 00:45:08.140
And one thing I didn't talk about,
but I think might be important,

00:45:08.140 --> 00:45:11.160
is if you wanted to like totally
override everything in the app,

00:45:11.250 --> 00:45:14.060
or at least inspect everything,
you can override dispatchRequest

00:45:14.230 --> 00:45:15.620
on the application object.

00:45:15.630 --> 00:45:19.380
And you can ask the request,
"What is your request handler?"

00:45:19.530 --> 00:45:22.160
and actually lock down things
like the resource manager.

00:45:22.160 --> 00:45:24.840
The resource manager is responsible
for vending out images and

00:45:24.840 --> 00:45:26.620
maybe charts or dynamic graphs.

00:45:26.620 --> 00:45:26.620
If it's the resource manager,
you can ask the request handler,

00:45:26.620 --> 00:45:26.620
"What is your request handler?"
and actually lock down things

00:45:26.620 --> 00:45:26.620
like the resource manager.

00:45:26.620 --> 00:45:26.620
The resource manager is responsible
for vending out images and

00:45:26.620 --> 00:45:26.620
maybe charts or dynamic graphs.

00:45:26.620 --> 00:45:27.020
If it's the resource manager,
you can ask the request handler,

00:45:27.020 --> 00:45:27.430
"What is your request handler?"
and actually lock down things

00:45:27.430 --> 00:45:27.640
like the resource manager.

00:45:27.640 --> 00:45:28.050
The resource manager is responsible
for vending out images and

00:45:28.060 --> 00:45:28.620
maybe charts or dynamic graphs.

00:45:28.620 --> 00:45:29.600
If it's the resource manager,
you might look at the URL and

00:45:29.600 --> 00:45:30.610
you might look at what kind of
resource it's trying to get,

00:45:30.630 --> 00:45:34.520
and if they're not logged in,
maybe they don't get to see that.

00:45:34.620 --> 00:45:37.690
I meant to mention that and didn't,
but that's just one of the

00:45:38.000 --> 00:45:39.610
things in protecting resources.

00:45:39.620 --> 00:45:42.430
On authentication,
I talked about using digital

00:45:42.430 --> 00:45:46.710
certificates and the importance of
actually validating their status.

00:45:47.600 --> 00:45:52.930
and for persistent data integrity
talked about and showed using hashing of

00:45:53.040 --> 00:45:57.600
passwords and encrypting credit cards and
talked about digitally signing documents.

00:45:57.600 --> 00:46:00.990
And for messaging integrity,
I actually did sign a document,

00:46:01.230 --> 00:46:05.600
digitally signed a request and then
validated that request on a server.

00:46:05.600 --> 00:46:11.810
And then finally for access control,
was using ACL implementation and

00:46:12.130 --> 00:46:16.600
combined that with EOs so you could
get the best of these Java standards

00:46:16.600 --> 00:46:21.190
plus what UF has to offer.

00:46:22.420 --> 00:46:24.200
These are the kind of places you might
want to go to get some more information.

00:46:24.200 --> 00:46:26.120
This fact from RSA is awesome.

00:46:26.130 --> 00:46:28.800
If you want to know a lot
about security in a nutshell,

00:46:28.800 --> 00:46:30.400
it's a pretty good resource.

00:46:30.400 --> 00:46:33.890
If you're interested in
protecting your secret keys,

00:46:33.890 --> 00:46:37.400
InCypher has a pretty neat
device for storing that.

00:46:37.400 --> 00:46:39.400
So do a few other companies.

00:46:39.400 --> 00:46:41.350
Rainbow comes to mind.

00:46:41.470 --> 00:46:42.390
And Crystalis.

00:46:42.440 --> 00:46:44.670
Digital Receipt,
that's an open source place you can get

00:46:44.670 --> 00:46:46.300
the DTD for the digital receipt stuff.

00:46:46.370 --> 00:46:48.270
Validating Certificates,
that's a company that

00:46:48.330 --> 00:46:49.400
validates certificates.

00:46:49.400 --> 00:46:52.250
Certificate Authority,
there's many companies that do that.

00:46:52.250 --> 00:46:55.390
You've got VeriSign, there's Thought,
there's Interest.net.

00:46:55.450 --> 00:47:01.400
Digital Timestamp,
actually that should be Surety.com.

00:47:01.400 --> 00:47:03.400
Surety.com.

00:47:03.400 --> 00:47:09.000
And then Signing Plugin, Adobe.com.

00:47:09.010 --> 00:47:09.010
So.

00:47:11.340 --> 00:47:13.460
I guess we still have,
there's still lab left today,

00:47:13.460 --> 00:47:15.200
so we're at 10:30,
you still have a chance to go

00:47:15.200 --> 00:47:18.460
and play with WebObjects 5,
and if you feel like it,

00:47:18.460 --> 00:47:21.230
you might even vote for
the app server thing.

00:47:21.280 --> 00:47:26.830
And the next presentation
is Optimizing WebObjects.

00:47:26.930 --> 00:47:28.450
That's coming up a little bit later.

00:47:28.540 --> 00:47:31.920
It's not directly related to it, but,
you know, it's Friday,

00:47:31.930 --> 00:47:33.400
and there just isn't much left, so,
you know,

00:47:33.400 --> 00:47:36.440
I had to put something on this slide.

00:47:36.550 --> 00:47:40.540
Feedback form, of course,
on WebObjects later on today.

00:47:41.630 --> 00:47:45.940
and here's who to contact if you have,
like, want to know more or you want

00:47:45.940 --> 00:47:48.540
to have feedback on the product
or problems and so forth.

00:47:48.820 --> 00:47:53.340
Our Director of WebObjects
Engineering and Bob Frazier for product

00:47:53.400 --> 00:47:54.920
marketing at the same email address.

00:47:54.940 --> 00:47:58.040
And if you're interested in consulting,
integration, and training and so forth,

00:47:58.040 --> 00:47:59.340
there's the iServices thing.

00:47:59.340 --> 00:48:01.330
You've seen all this
many times this week.