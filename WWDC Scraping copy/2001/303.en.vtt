WEBVTT

00:00:05.090 --> 00:00:09.720
Network Configuration & Mobility
Architecture on Mac OS X.

00:00:10.000 --> 00:00:11.880
In particular,
we're going to be talking about

00:00:11.880 --> 00:00:15.440
the particular pieces that we
have and how they interact.

00:00:15.440 --> 00:00:18.730
And I'm not going to be
talking about APIs today,

00:00:18.730 --> 00:00:23.020
unfortunately, because what we have
today is all private.

00:00:23.020 --> 00:00:26.360
And it's a work in progress.

00:00:26.360 --> 00:00:30.890
So what we're looking from you guys
today in particular is some feedback

00:00:30.890 --> 00:00:34.880
on the kinds of configuration
questions you'd like to answer.

00:00:35.000 --> 00:00:39.750
We have some APIs and I'll talk
about that a little bit later.

00:00:40.330 --> 00:00:42.830
So what are some of
the goals that we have?

00:00:42.860 --> 00:00:46.610
We'd like to support dynamic
network configuration changes.

00:00:46.610 --> 00:00:50.200
On Mac OS 9 everybody was used to the
idea that you don't have to reboot

00:00:50.200 --> 00:00:54.330
your computer to make a change,
so Mac OS X has that now as well.

00:00:54.340 --> 00:00:58.810
The other thing that we wanted on top
of what we have in 9 is the ability to

00:00:58.870 --> 00:01:03.490
configure multiple network interfaces
at the same time and actually make

00:01:03.510 --> 00:01:05.580
use of them in a sensible way.

00:01:06.770 --> 00:01:12.260
The other goal that we have is to avoid
user intervention when it's possible.

00:01:12.910 --> 00:01:14.160
So, a couple of examples.

00:01:14.160 --> 00:01:19.040
You've got a laptop that you're
using for work and at home and

00:01:19.040 --> 00:01:22.580
you're working on some project at
home and you're using the network.

00:01:22.580 --> 00:01:24.760
You put the system to sleep,
you bring it to work,

00:01:24.760 --> 00:01:27.820
you plug it in and it just works
because you're using DHCP and it figures

00:01:27.830 --> 00:01:29.620
out a new address and it just works.

00:01:29.620 --> 00:01:32.560
Or, if that's not possible,
you switch locations and

00:01:32.560 --> 00:01:35.210
you pick up your new config,
just like on 9.

00:01:35.220 --> 00:01:39.330
Another config that uses a
multi-homing is the LAN and

00:01:39.360 --> 00:01:42.530
airport configured simultaneously.

00:01:42.800 --> 00:01:47.260
So, your system prefers LAN over
airport while LAN is connected,

00:01:47.260 --> 00:01:51.970
but when LAN disconnects,
the system switches over to

00:01:51.970 --> 00:01:54.200
using airport automatically.

00:01:55.100 --> 00:01:56.800
So to be able to support
this kind of thing,

00:01:56.800 --> 00:01:58.670
we have a set of requirements.

00:01:58.670 --> 00:02:02.310
The first thing that we need is some
sort of low-level network events.

00:02:02.340 --> 00:02:04.730
So when a link status changes,
we need to be able to find

00:02:04.730 --> 00:02:06.260
out about it and do something.

00:02:06.260 --> 00:02:11.820
We need some sort of persistent storage
to be able to store the network configs.

00:02:12.660 --> 00:02:16.230
We also knew we needed some sort of
dynamic storage to be able to store

00:02:16.230 --> 00:02:19.750
temporary information or dynamic
information as it's generated,

00:02:19.750 --> 00:02:25.260
such as information from a
DHCP server or a PPP server.

00:02:25.260 --> 00:02:29.500
The other thing that we need is
some mechanism to be able to apply

00:02:29.500 --> 00:02:32.040
some configuration to the system.

00:02:33.630 --> 00:02:38.480
The other requirement we have is some
sort of flexible schema in both the

00:02:38.480 --> 00:02:43.670
persistent and dynamic store to be
able to allow for future expansion.

00:02:44.820 --> 00:02:48.300
So what we've come up with is a
system configuration architecture

00:02:48.300 --> 00:02:51.180
and we've decided to call it
system configuration architecture,

00:02:51.180 --> 00:02:53.830
not the network configuration
architecture because we wanted

00:02:54.000 --> 00:02:55.870
to generalize the concepts.

00:02:55.870 --> 00:02:58.950
We knew we were going to solve
some general problems and wanted

00:02:58.950 --> 00:03:00.660
to make the services general.

00:03:00.660 --> 00:03:07.890
Our solution leverages core
foundation pretty heavily using run

00:03:07.890 --> 00:03:14.710
loop source technology and all the
property list types and objects.

00:03:14.890 --> 00:03:18.210
The other point about the network
configuration architecture

00:03:18.210 --> 00:03:20.030
is that it's open source.

00:03:20.030 --> 00:03:22.870
All the source code we have
today that's shipping in

00:03:22.870 --> 00:03:24.300
Mac OS X is available in Darwin.

00:03:24.300 --> 00:03:26.380
You can check out the
projects and see what it does.

00:03:26.380 --> 00:03:29.880
Unfortunately, as I mentioned before,
it's all private API,

00:03:29.880 --> 00:03:32.280
so you can't technically
really rely on it,

00:03:32.280 --> 00:03:35.120
but it's there for you to
look at and understand.

00:03:36.810 --> 00:03:40.940
So the system configuration
architecture contains three main pieces:

00:03:40.990 --> 00:03:44.000
the dynamic store,
system configuration preferences,

00:03:44.000 --> 00:03:46.100
and the configuration agents.

00:03:46.200 --> 00:03:50.100
The dynamic store stores the current
system configuration information.

00:03:50.100 --> 00:03:54.000
It's a snapshot of the
state of the system.

00:03:54.120 --> 00:03:58.840
The other thing the dynamic store
provides is notification services.

00:03:59.080 --> 00:04:02.740
The System Configuration Preferences
provide system persistent storage

00:04:02.880 --> 00:04:04.800
for configuration information.

00:04:04.890 --> 00:04:08.240
This is where the sets in
different locations are stored.

00:04:08.430 --> 00:04:12.350
Configuration Agents apply the
configuration that the user

00:04:12.400 --> 00:04:17.170
has chosen to the system and
interact with the dynamic store.

00:04:18.020 --> 00:04:20.740
So here's a little diagram
that illustrates the

00:04:20.740 --> 00:04:25.700
relationship between the agents,
the dynamic store, and the preferences.

00:04:27.000 --> 00:04:30.030
and where each of the individual
agents are interacting with the dynamic

00:04:30.030 --> 00:04:34.700
store in some configuration source.

00:04:35.750 --> 00:04:37.560
So what is the dynamic store?

00:04:37.580 --> 00:04:42.010
The dynamic store contains the current
system configuration information.

00:04:42.010 --> 00:04:47.190
It's a snapshot of basically
how the system is configured.

00:04:47.190 --> 00:04:52.390
It's not persistent across reboots,
so every time the system starts up,

00:04:52.390 --> 00:04:54.070
the contents are regenerated.

00:04:54.540 --> 00:04:58.080
It's a dictionary,
so it's a set of key value pairs

00:04:58.080 --> 00:05:03.060
where the key is a CS string whose
format is a hierarchical namespace,

00:05:03.060 --> 00:05:04.460
much like a URL.

00:05:04.460 --> 00:05:07.630
We've encoded it using a
domain prefix and a path,

00:05:07.630 --> 00:05:11.270
so in the example there,
there's a state colon prefix and

00:05:11.270 --> 00:05:13.520
the path is network global DNS.

00:05:13.520 --> 00:05:18.560
The value is any CF property list type,
normally a CFDictionary,

00:05:18.560 --> 00:05:23.860
so that you can contain multiple
properties within a specific key.

00:05:25.780 --> 00:05:30.810
So the way the dynamic store
notifications work is a client decides

00:05:30.810 --> 00:05:36.140
that it's interested in a particular key
and registers to receive notifications.

00:05:36.140 --> 00:05:41.560
And the notifications are level
triggered rather than edge triggered.

00:05:41.560 --> 00:05:47.460
What we mean here is when a key changes,
you aren't provided a key and its value.

00:05:47.460 --> 00:05:51.080
You're provided that the key has
changed and then it's up to you to

00:05:51.080 --> 00:05:53.110
go and verify what the value is.

00:05:54.020 --> 00:05:57.820
We're trying to avoid creating
big long streams of event buffers

00:05:57.820 --> 00:06:00.960
that you know when the system
gets really busy may overrun.

00:06:00.960 --> 00:06:06.680
The dynamic store is hosted by
the system configuration server,

00:06:06.680 --> 00:06:09.270
which is actually a daemon
in the system called configd.

00:06:09.280 --> 00:06:13.350
And I call it the heart of the mobility
architecture because everything that

00:06:13.430 --> 00:06:17.680
happens with respect to networking
goes through the dynamic store.

00:06:20.850 --> 00:06:24.910
So the second major piece of
our architecture is the system

00:06:24.910 --> 00:06:26.190
configuration preferences.

00:06:26.200 --> 00:06:29.580
It's a persistent storage,
as I mentioned before,

00:06:29.580 --> 00:06:31.400
for the system setup information.

00:06:31.400 --> 00:06:38.240
Like CFPreferences, but it actually has
notifications when things change.

00:06:38.240 --> 00:06:42.450
The other thing that it has
is that it's accessible,

00:06:42.450 --> 00:06:46.640
easily accessible from system daemons,
and the source code for it is in Darwin,

00:06:46.640 --> 00:06:49.500
whereas CF preference
currently is not in Darwin.

00:06:50.800 --> 00:06:55.140
We use CF property list types
for just about everything,

00:06:55.140 --> 00:06:59.720
and when the file is written out to disk,
it's serialized as XML.

00:06:59.720 --> 00:07:03.390
And the default preferences for the
system that are used to store all the

00:07:03.390 --> 00:07:09.780
network configurations is in var db
system configuration preferences XML.

00:07:12.640 --> 00:07:15.180
So what do the system
preferences contain?

00:07:15.270 --> 00:07:18.190
Currently we've defined
four main preferences:

00:07:18.280 --> 00:07:24.180
the current set, network services, sets,
and system.

00:07:24.940 --> 00:07:30.300
The current set contains a link
to the currently active set.

00:07:30.300 --> 00:07:31.910
It's pretty much all it contains.

00:07:31.990 --> 00:07:35.320
The network services contains a complete
list of all the network services that

00:07:35.320 --> 00:07:38.600
have been defined across all sets.

00:07:38.670 --> 00:07:43.860
And the sets preference is just that,
it's a list of sets.

00:07:43.950 --> 00:07:49.750
And the system contains items
that are not location sensitive,

00:07:49.760 --> 00:07:51.740
such as the computer name.

00:07:52.210 --> 00:07:53.360
So what's a set?

00:07:53.440 --> 00:07:58.230
A set is the complete configuration
for a single location.

00:07:58.240 --> 00:08:02.270
It contains the list of network services
that are defined for that location.

00:08:02.320 --> 00:08:06.400
It also contains the order of the
network services for that location.

00:08:06.400 --> 00:08:10.440
So here's where you would prefer
LAN over built-in airport.

00:08:10.440 --> 00:08:15.330
A network service,
what we mean by that is a collection

00:08:15.420 --> 00:08:20.530
of network entities which are
just a set of properties for a

00:08:20.530 --> 00:08:23.200
specific area of interest which
I'll mention in the next slide.

00:08:23.200 --> 00:08:28.120
But it's the network services,
the configuration for a single

00:08:28.250 --> 00:08:31.200
network connection or interface.

00:08:31.200 --> 00:08:36.190
And it's identified by a
unique network service ID.

00:08:36.620 --> 00:08:39.360
Network Entity is a list
of properties for a single

00:08:39.470 --> 00:08:41.330
protocol or area of interest.

00:08:41.460 --> 00:08:45.770
An example there would be IPv4 or PPP.

00:08:45.770 --> 00:08:48.460
There's a set of properties
that are associated with the

00:08:48.460 --> 00:08:50.290
protocol or the area of interest.

00:08:51.940 --> 00:08:57.760
So here's a diagram of what we have
in terms of the preferences and

00:08:57.760 --> 00:08:59.380
the relationships to each other.

00:08:59.380 --> 00:09:06.270
You can see the current set contains
a path to a property inside sets that

00:09:06.270 --> 00:09:09.540
points to which set is currently active.

00:09:09.560 --> 00:09:12.910
So when you go into the location
pop-up under the Apple menu,

00:09:12.990 --> 00:09:16.110
the thing that it's
manipulating is the current set.

00:09:16.110 --> 00:09:19.400
So you notice there
we're pointing at set K.

00:09:19.400 --> 00:09:23.940
Set K is a dictionary that contains...
a sub-dictionary called network.

00:09:23.940 --> 00:09:30.260
And... the sub-dictionary network
contains two sub-dictionaries itself.

00:09:30.260 --> 00:09:33.670
One called service and the other global.

00:09:33.680 --> 00:09:37.550
Inside service,
we have links to the individual

00:09:37.560 --> 00:09:39.740
services that are active for that set.

00:09:39.740 --> 00:09:45.360
So you notice IDX points
to IDX in network services.

00:09:45.360 --> 00:09:50.980
And inside IDX in network services,
we have a set of network entities.

00:09:50.980 --> 00:09:55.180
In this case, the configuration method
for IPv4 is set to DHCP.

00:09:55.180 --> 00:09:59.020
And the interface entity
has a device name of EN0.

00:09:59.020 --> 00:10:04.720
So we've identified the device
and the configuration method.

00:10:05.100 --> 00:10:14.700
[Transcript missing]

00:10:15.250 --> 00:10:23.100
So, the third main category of the
architecture is the configuration agent.

00:10:23.100 --> 00:10:27.100
Configuration agent manages some
aspect of the configuration.

00:10:27.100 --> 00:10:31.440
It's associated with one or
more configuration sources,

00:10:31.740 --> 00:10:37.100
basically things that can be configured
or provide configuration information.

00:10:37.220 --> 00:10:40.440
And it has a well-defined role.

00:10:40.940 --> 00:10:45.070
So from the original diagram,
the relationship is that the agent

00:10:45.310 --> 00:10:50.810
interacts with the dynamic store and
it manages some configuration source

00:10:50.850 --> 00:10:52.660
or multiple configuration sources.

00:10:52.660 --> 00:10:58.940
So here's a list of a number of the
agents we have in Mac OS X today.

00:10:59.360 --> 00:11:02.790
The first one is the Kernel
Event Monitor and the second

00:11:02.790 --> 00:11:06.940
is the Preferences Monitor,
the IP Configuration Server,

00:11:06.940 --> 00:11:08.760
IP Monitor and PPP Controller.

00:11:08.760 --> 00:11:13.160
I'm going to go into more detail on
each of these in the upcoming slides.

00:11:13.230 --> 00:11:16.600
So we'll start with the
Kernel Event Monitor.

00:11:16.700 --> 00:11:21.100
Kernel Event Monitor is an agent whose
sole purpose in life is to maintain

00:11:21.100 --> 00:11:27.520
the link status and the interface state
of all the interfaces in the system.

00:11:27.690 --> 00:11:32.140
So what happens is it opens up a
kernel event socket and receives kernel

00:11:32.140 --> 00:11:35.580
events that interfaces are added,
the link status has changed,

00:11:35.680 --> 00:11:36.600
addressing has changed.

00:11:36.600 --> 00:11:40.790
And when it receives those events,
it populates the dynamic

00:11:40.790 --> 00:11:42.600
store with the values.

00:11:42.600 --> 00:11:47.100
In this case,
the link status on EN0 has changed and

00:11:47.100 --> 00:11:52.590
the kernel event monitor has updated
a key in the dynamic store that says

00:11:52.590 --> 00:11:56.520
that the link status has gone active.

00:11:57.290 --> 00:12:02.140
So as I mentioned before,
it maintains the network interface state

00:12:02.190 --> 00:12:03.920
and it manages the kernel event socket.

00:12:03.920 --> 00:12:08.520
It maintains a list of network
interface names in a key that's encoded

00:12:08.620 --> 00:12:11.240
as state colon network interface.

00:12:11.240 --> 00:12:15.110
That's actually a dictionary that
contains an interfaces array that

00:12:15.370 --> 00:12:19.500
contains the name of each interface
that's defined in the system.

00:12:19.500 --> 00:12:22.430
So if you want to know if
an interface has changed,

00:12:22.430 --> 00:12:24.990
has been added to the system,
you would receive

00:12:24.990 --> 00:12:26.340
notifications on that key.

00:12:27.860 --> 00:12:30.130
The other thing that it
maintains currently is the

00:12:30.130 --> 00:12:31.940
link status of each interface.

00:12:32.000 --> 00:12:37.050
And we've encoded that as state:network
interface interface name link,

00:12:37.050 --> 00:12:40.750
which is a dictionary that
contains inactive property,

00:12:40.750 --> 00:12:42.220
which is a Boolean.

00:12:44.560 --> 00:12:47.800
By updating the dynamic
store in such a way,

00:12:47.800 --> 00:12:52.110
the Kernel Event Monitor provides
notifications for other agents,

00:12:52.110 --> 00:12:57.490
in particular the IP Configuration Agent,
as we'll see in an upcoming slide.

00:13:00.300 --> 00:13:03.390
The second configuration agent
that I'd like to talk about

00:13:03.390 --> 00:13:05.140
is the Preferences Monitor.

00:13:05.270 --> 00:13:08.520
The Preferences Monitor's sole
purpose in life is to take the

00:13:08.520 --> 00:13:13.160
current set dictionary and load
it into the Dynamics Store.

00:13:16.200 --> 00:13:20.600
So it's configuration source is the
system configuration preferences.

00:13:20.600 --> 00:13:25.480
It maps the current set
dictionary into the dynamic store.

00:13:25.480 --> 00:13:31.410
And the mapping process amounts to a
flattening process and the next couple

00:13:31.410 --> 00:13:34.370
of slides try to illustrate that.

00:13:35.960 --> 00:13:38.200
So here's the dictionary
before we flatten it.

00:13:38.200 --> 00:13:41.050
So if you look at it,
we've got a dictionary that contains

00:13:41.710 --> 00:13:46.790
property that's a string called
UserVisibleName and it's set to work LAN.

00:13:46.890 --> 00:13:50.290
It also contains a
sub-dictionary called DNS.

00:13:50.360 --> 00:13:54.430
The DNS contains server
addresses and a domain name.

00:13:54.540 --> 00:13:58.680
After flattening,
that'll become two dictionaries.

00:14:00.360 --> 00:14:05.420
The first dictionary is encoded as the
dictionary at that root node and the

00:14:05.420 --> 00:14:09.250
second dictionary is encoded as just
the dictionary at that second node

00:14:09.330 --> 00:14:12.140
with all the other elements removed.

00:14:12.150 --> 00:14:16.420
So if you look at it again,
we go from that to that.

00:14:17.200 --> 00:14:28.700
[Transcript missing]

00:14:31.660 --> 00:14:37.980
So the mapping amounts to a dictionary
tree traversal where we start at

00:14:37.990 --> 00:14:42.360
the root and at each dictionary
node we compute a key and a value.

00:14:42.360 --> 00:14:45.540
The key is the path of the
dictionary within the preference

00:14:45.540 --> 00:14:49.340
and the value is the node with
all the sub-dictionaries removed.

00:14:49.340 --> 00:14:56.400
Also part of the mapping process,
we resolve all the references and links.

00:14:56.400 --> 00:15:01.840
So there's a possibility that there
are links inside the preference.

00:15:01.840 --> 00:15:03.780
We'll resolve those and
fully populate them.

00:15:08.400 --> 00:15:11.490
The other thing that it
does is it eliminates

00:15:11.540 --> 00:15:14.800
dictionaries that are inactive,
that have been marked by the user

00:15:14.800 --> 00:15:18.870
interface or some other entity,
and it also eliminates

00:15:19.110 --> 00:15:19.940
empty dictionaries.

00:15:19.940 --> 00:15:24.420
So if you have a dictionary
that doesn't contain any keys,

00:15:24.420 --> 00:15:28.180
effectively the entire
key is just destroyed.

00:15:28.380 --> 00:15:31.590
And before putting it
into the Dynamics store,

00:15:31.740 --> 00:15:36.890
It adds a setup colon prefix to the key.

00:15:36.970 --> 00:15:39.740
That's its namespace
within the dynamic store.

00:15:42.580 --> 00:15:44.960
So why do we do the mapping?

00:15:45.120 --> 00:15:48.000
The reason why we do the mapping
is to provide finer grain that

00:15:48.000 --> 00:15:50.610
is per dictionary notifications.

00:15:50.610 --> 00:15:53.920
The other notifications that we would
get without it would just be simply

00:15:54.190 --> 00:15:56.510
that the preferences had changed.

00:15:56.920 --> 00:16:04.040
So instead of doing that,
we can actually generate fine-grained

00:16:04.130 --> 00:16:10.400
notifications by keeping track of the
current mapping and the new mapping and

00:16:10.400 --> 00:16:14.630
computing a difference between the new
and the old and triggering notifications

00:16:14.790 --> 00:16:16.830
on the keys that have changed.

00:16:17.210 --> 00:16:21.950
So the benefits of doing this are
that a single agent understands the

00:16:21.950 --> 00:16:27.490
preferences layout and other agents only
have to know the dynamic store layout.

00:16:27.490 --> 00:16:30.510
So it provides a layer of abstraction.

00:16:37.360 --> 00:16:38.790
So I'm going to talk
about the next agent,

00:16:38.840 --> 00:16:41.380
which is the IP Configuration Agent.

00:16:41.450 --> 00:16:47.940
IP Configuration Agent configures
Ethernet devices for IP using Emanuel,

00:16:47.950 --> 00:16:49.520
DHCP, and Bupi.

00:16:49.770 --> 00:16:54.190
The way it works is it's triggered
off of notifications out of setup.

00:16:54.200 --> 00:16:58.570
So anytime someone switches locations,
it reads the configuration out

00:16:58.570 --> 00:17:02.200
of setup that the preferences
monitor loaded and applies the

00:17:02.280 --> 00:17:06.750
configuration to the interface that's
associated with the particular config.

00:17:06.960 --> 00:17:11.430
Anytime the user goes into the
control panel and changes a key,

00:17:11.430 --> 00:17:15.380
the IP configuration agent wakes up and
applies the new config to the system.

00:17:15.380 --> 00:17:21.960
Once it's configured an interface,
it writes the dynamic store keys to

00:17:21.960 --> 00:17:29.260
indicate that it's done its configuration
and the configuration is active.

00:17:29.900 --> 00:17:33.400
In particular,
it writes the IP address and

00:17:33.400 --> 00:17:38.700
subnet mask and for BOOP and DHCP,
it supplies router and DNS info.

00:17:46.240 --> 00:17:50.590
The other feature of the IP Configuration
Agent is that it detects the link status.

00:17:50.600 --> 00:17:54.130
So the Kernel Event Monitor is
providing notifications that the

00:17:54.130 --> 00:17:55.780
link status is going up and down.

00:17:55.780 --> 00:18:00.760
The IP Configuration Agent notices
when the link goes down and

00:18:00.760 --> 00:18:05.440
stays down for some period,
currently set at 4 seconds,

00:18:05.440 --> 00:18:09.260
and deconfigures the interface
when that period is expired.

00:18:09.260 --> 00:18:13.030
And when the link becomes active again,
it knows that it's going to

00:18:13.030 --> 00:18:15.240
retry the configuration method.

00:18:15.660 --> 00:18:17.970
So you can take a computer
and plug it into one network

00:18:17.970 --> 00:18:19.320
and then plug it into another.

00:18:19.320 --> 00:18:21.300
It'll retry the configuration method.

00:18:21.300 --> 00:18:24.800
And if you're using DHCP,
you can grab a new address automatically.

00:18:29.110 --> 00:18:33.300
The fourth agent I'm going to talk
about is the PPP Controller Agent.

00:18:33.340 --> 00:18:38.510
PPP Controller does a similar task
to the IP Configuration Agent except

00:18:38.510 --> 00:18:43.180
that it manages PPP interfaces for IP.

00:18:43.180 --> 00:18:47.660
So it does dial-up modem
connections in PPP over Ethernet.

00:18:47.680 --> 00:18:51.440
Just like the IP Configuration Agent,
it reads its configuration from the

00:18:51.440 --> 00:18:56.100
setup keys and it's notified when
the user makes changes as well.

00:18:56.120 --> 00:18:59.310
And once the interface has
been brought up and configured,

00:18:59.310 --> 00:19:03.560
it writes dynamic store state keys
when the configuration is applied.

00:19:03.570 --> 00:19:07.600
So it's going to supply IP address,
destination address,

00:19:07.610 --> 00:19:11.090
and a router and when the
PPP server supplies it,

00:19:11.110 --> 00:19:13.540
it's going to supply DNS as well.

00:19:13.570 --> 00:19:17.160
The other thing it does is it
creates PPP interfaces as it needs

00:19:17.160 --> 00:19:20.100
it and interacts with dialers.

00:19:21.000 --> 00:19:23.210
Which brings us to the fifth agent.

00:19:23.750 --> 00:19:27.690
The IP Monitor Agent is actually the
thing that decides which interface

00:19:27.740 --> 00:19:30.340
or service is going to be primary.

00:19:30.420 --> 00:19:33.140
And what we mean by a
primary service interface,

00:19:33.140 --> 00:19:35.800
we mean the one that's associated
with the default route and the

00:19:35.800 --> 00:19:37.800
default DNS for the system.

00:19:37.880 --> 00:19:41.560
Since the system currently can only
make use of a single DNS in the system,

00:19:41.560 --> 00:19:42.940
you have to pick some interface.

00:19:42.940 --> 00:19:46.990
And so what we do is we allow
the user to select which one

00:19:46.990 --> 00:19:49.250
they want by ordering them.

00:19:49.630 --> 00:19:53.320
So it consumes the information
provided by the IP configuration

00:19:53.320 --> 00:19:58.540
and PVP controller agents and
waits for changes to appear.

00:19:58.540 --> 00:20:02.160
And when a service comes online,
decides that, okay,

00:20:02.160 --> 00:20:04.330
that's the interface or
service I'm going to use,

00:20:04.330 --> 00:20:07.460
and it elects it primary and
takes the configuration that's

00:20:07.510 --> 00:20:11.920
supplied both in the back end,
the permanent preferences

00:20:11.920 --> 00:20:16.120
and the dynamic information,
and applies it to the system.

00:20:16.260 --> 00:20:18.590
As I mentioned before,
there's a service order array

00:20:18.590 --> 00:20:22.810
that decides which service is
going to be primary when you're

00:20:22.810 --> 00:20:24.900
in a multi-home situation.

00:20:27.640 --> 00:20:30.850
So now I'm going to call my colleague
Allan Nathanson up here to do a

00:20:30.850 --> 00:20:35.150
demo for you and show you some of
the things I've been talking about.

00:20:44.630 --> 00:20:49.210
So Dieter went over and sort of gave
a good overview of what we've got and

00:20:49.320 --> 00:20:53.580
my job is to sort of show you a little
bit of the stuff under the covers and

00:20:53.760 --> 00:20:59.450
So the first thing that I like to do
is crank up System Preferences and I've

00:20:59.460 --> 00:21:00.690
already picked the Network pane here.

00:21:00.700 --> 00:21:04.860
And we have pre-configured a
couple of different locations.

00:21:04.880 --> 00:21:07.360
Automatic is the one that you
would get first time you go

00:21:07.400 --> 00:21:08.650
over and crank up your system.

00:21:08.700 --> 00:21:12.780
I've got a service called None and
if you go look at the Advanced tab

00:21:12.780 --> 00:21:16.700
you can see that all of the
three ports have been turned off.

00:21:16.700 --> 00:21:20.070
This is the one that I use when I'm
flying from the east coast to the

00:21:20.070 --> 00:21:27.930
west coast and don't want to go over
and disturb the airplanes networking.

00:21:29.190 --> 00:21:32.940
And then I've got a couple
other configurations here.

00:21:33.000 --> 00:21:35.900
The WWDC Air and LAN.

00:21:35.900 --> 00:21:42.920
And this configuration has got all
three network services enabled with the

00:21:42.920 --> 00:21:47.460
airport interface having a little bit
of priority over the built-in Ethernet,

00:21:47.460 --> 00:21:50.160
which has priority over
the internal modem.

00:21:50.480 --> 00:21:53.720
And the idea here is that if the
airport interface is available,

00:21:53.720 --> 00:21:54.620
we'll use that.

00:21:54.620 --> 00:21:58.160
And if not, we'll try going over and
using the built-in Ethernet.

00:21:58.160 --> 00:22:00.580
And if that's not there,
off to the internal modem.

00:22:00.580 --> 00:22:05.040
And a very similar configuration
is the WWDC LAN and Air.

00:22:05.040 --> 00:22:08.500
And if you go over and
look at the difference,

00:22:08.500 --> 00:22:12.650
this one's got the built-in
Ethernet being on top.

00:22:12.740 --> 00:22:16.040
So these are the
configurations that I've got.

00:22:16.200 --> 00:22:19.040
A couple other things to look at.

00:22:19.980 --> 00:22:25.160
In the built-in Ethernet configuration,
it's set up for manual IP addressing.

00:22:25.730 --> 00:22:29.880
IP address, a subnet mask, a router,
some DNS information.

00:22:29.880 --> 00:22:34.230
This is what you'd have to do if you
didn't have a DHCP server available to

00:22:34.230 --> 00:22:35.870
provide all the information for you.

00:22:36.260 --> 00:22:40.260
In the airport case,
we're set up for using DHCP and

00:22:40.260 --> 00:22:42.390
nothing else has been provided.

00:22:42.390 --> 00:22:45.510
So we're sort of like relying
on the DHCP server to provide

00:22:45.510 --> 00:22:47.330
the configuration information.

00:22:47.400 --> 00:22:52.540
This is what we've got from
the top side of the view.

00:22:52.540 --> 00:22:54.500
This is what you as a user
would go over and set up for

00:22:54.500 --> 00:22:56.000
your configuration preferences.

00:22:56.000 --> 00:22:59.370
All of this gets stored in
that configuration store,

00:22:59.370 --> 00:23:02.460
the preferences store,
which is the next thing that I'm

00:23:02.460 --> 00:23:03.990
going to go over and show you.

00:23:04.000 --> 00:23:09.990
It's all stored in an XML file.

00:23:11.350 --> 00:23:13.920
happen to have a handy dandy reference.

00:23:13.920 --> 00:23:18.270
The root dictionary of the preferences
file has got four preferences

00:23:18.270 --> 00:23:20.520
that we've currently defined.

00:23:20.560 --> 00:23:23.490
The current set,
the network services is a dictionary

00:23:23.490 --> 00:23:25.300
of services that we've got.

00:23:25.330 --> 00:23:32.160
The sets is a dictionary of the
sets which have currently been

00:23:32.160 --> 00:23:32.160
defined and then the system.

00:23:32.810 --> 00:23:39.030
The current set says that,
well let's go over and

00:23:39.030 --> 00:23:40.700
look at sets for a second.

00:23:40.700 --> 00:23:43.200
Four different services were configured.

00:23:43.440 --> 00:23:45.860
Set 0 is the automatic set.

00:23:45.860 --> 00:23:48.200
You can tell that based
on its user defined name.

00:23:48.260 --> 00:23:55.200
Set 1 is the WWDC LAN has
priority over airport service.

00:23:55.380 --> 00:23:59.700
Set 2 is the airport service
has priority over the LAN.

00:23:59.710 --> 00:24:02.580
And set 3 is my none.

00:24:04.190 --> 00:24:07.940
So, if we go over and chase down
current sets pointing to sets 1,

00:24:07.940 --> 00:24:08.820
we can open this up.

00:24:09.100 --> 00:24:12.930
And within the network
configuration of this set,

00:24:13.180 --> 00:24:15.100
we've got a couple of
pieces of information.

00:24:15.100 --> 00:24:19.100
The global information,
which Dieter alluded to.

00:24:19.100 --> 00:24:24.100
Within the IPv4 configuration,
here's the service order array.

00:24:24.100 --> 00:24:29.100
And it goes over and says that the
relative priority of the services

00:24:29.100 --> 00:24:35.090
for this set is service ID 1,
followed by service ID 2,

00:24:35.090 --> 00:24:37.100
followed by service ID 0.

00:24:37.100 --> 00:24:40.770
And these are all strings.

00:24:41.630 --> 00:24:44.730
So that's the global state.

00:24:44.730 --> 00:24:49.710
And then within the services, again,
we have the three services, service zero,

00:24:49.710 --> 00:24:50.880
one, and two.

00:24:50.960 --> 00:24:55.690
And one of the things that
Dieter mentioned was that

00:24:55.880 --> 00:24:59.540
We have the ability to put in some links.

00:24:59.540 --> 00:25:04.950
So Service ID 0 is really going to
be grabbed from Network Services 3.

00:25:06.440 --> 00:25:08.480
and David are the main speakers.

00:25:08.530 --> 00:25:09.480
The first two are the main speakers.

00:25:09.480 --> 00:25:10.480
The second is the main speakers.

00:25:10.480 --> 00:25:11.480
The third is the main speakers.

00:25:11.490 --> 00:25:12.480
The fourth is the main speakers.

00:25:12.480 --> 00:25:13.480
The fifth is the main speakers.

00:25:13.490 --> 00:25:14.480
The sixth is the main speakers.

00:25:14.480 --> 00:25:15.480
The seventh is the main speakers.

00:25:15.480 --> 00:25:16.480
The eighth is the main speakers.

00:25:16.480 --> 00:25:17.480
The ninth is the main speakers.

00:25:18.320 --> 00:25:34.900
Network Services, 3, 4, and 5.

00:25:34.900 --> 00:25:34.900
3 is the configuration
for the internal modem.

00:25:34.900 --> 00:25:34.900
4 is the configuration
for the built-in Ethernet.

00:25:36.840 --> 00:25:41.620
Five jumps around a lot.

00:25:41.660 --> 00:25:44.090
Here's the configuration for the airport.

00:25:48.610 --> 00:25:51.660
Within the airport configuration,
we go look at the IPv4 and how

00:25:51.660 --> 00:25:53.180
it's going to be configured.

00:25:53.180 --> 00:25:54.900
It's set up for DHCP.

00:25:54.900 --> 00:25:56.720
If you remember the
airport configuration,

00:25:56.720 --> 00:26:03.790
we didn't have any information for DNS,
so there's an empty DNS dictionary.

00:26:04.870 --> 00:26:07.100
One thing that you'll see if you
go over and look at the preferences

00:26:07.100 --> 00:26:10.430
as they're stored right now,
there's a couple of dictionaries

00:26:10.430 --> 00:26:12.300
which are sort of like,
why is this here?

00:26:12.300 --> 00:26:16.220
And the big reason behind that
is we're trying to go over and

00:26:16.220 --> 00:26:18.300
remember things for the UI.

00:26:19.790 --> 00:26:23.070
There's an inactive flag that
will go over and show up which the

00:26:23.200 --> 00:26:26.620
preferences monitor looks at and says,
ignore this for now.

00:26:26.640 --> 00:26:30.830
It's not relevant to the configuration.

00:26:31.200 --> 00:26:35.900
So the airport configuration is
set up for DHCP and the built-in

00:26:35.900 --> 00:26:40.860
Ethernet configuration is set
up for manual addressing and the

00:26:40.860 --> 00:26:42.100
addresses that will get applied.

00:26:42.100 --> 00:26:45.820
There's the IP address,
there's the subnet mask,

00:26:45.820 --> 00:26:48.100
and there's the default route.

00:26:48.100 --> 00:26:52.370
And then up here in the DNS dictionary,
you have the domains that are

00:26:52.370 --> 00:26:58.100
being searched and a list of
addresses for the DNS servers.

00:26:59.890 --> 00:27:03.240
This is what's sort of at the
very bottom of the food chain

00:27:03.240 --> 00:27:06.390
is the stored preferences.

00:27:06.980 --> 00:27:12.300
So the next thing to do is to go over
and look at what's in the Dynamics store.

00:27:12.300 --> 00:27:16.170
When putting all of this stuff together,
I wrote a little command line tool.

00:27:16.500 --> 00:27:20.310
to go take a peek into the Dynamics
store and exercise the APIs and it's

00:27:20.310 --> 00:27:22.360
just something that comes in real handy.

00:27:22.510 --> 00:27:25.480
So this is the
System Configuration Utility.

00:27:25.740 --> 00:27:29.440
gives you a little prompt and you go over
and open up a session with ConfigD with

00:27:29.440 --> 00:27:31.240
the system configuration server.

00:27:31.300 --> 00:27:34.320
And there's a whole bunch of commands
that you can do and I'm going to go over

00:27:34.320 --> 00:27:36.900
and show you a small handful of them.

00:27:36.970 --> 00:27:39.600
There's a list command which
you can go over and say,

00:27:39.610 --> 00:27:43.210
"Show me a list of keys in the
dynamic store that match this

00:27:43.210 --> 00:27:49.830
prefix." So here's keys that relate
to the current state of the system.

00:27:50.980 --> 00:27:56.210
Here's a list of keys that
relate to the stored preferences.

00:27:56.890 --> 00:28:04.540
And what you end up doing
is do a get of a given key.

00:28:12.670 --> 00:28:15.870
and then we go over and show the
results of what that information got

00:28:15.880 --> 00:28:18.560
fetched out of the dynamic store.

00:28:18.590 --> 00:28:21.840
And you can see that we've
got the subnet masks,

00:28:21.850 --> 00:28:25.380
we've got the addresses,
the config method is manual,

00:28:25.420 --> 00:28:27.630
the default route is here.

00:28:28.770 --> 00:28:31.840
So this is really just the
flattened version of what's stored

00:28:31.840 --> 00:28:34.520
in the configuration preferences.

00:28:35.330 --> 00:28:42.080
If you want to go over and look at things
like what the current link status is,

00:28:50.310 --> 00:28:50.990
Get the state.

00:28:51.130 --> 00:28:56.600
It goes over and shows the
active flag and a Boolean value.

00:28:56.600 --> 00:29:01.550
This version of this command doesn't
split out things as well as I'd like.

00:29:01.560 --> 00:29:05.860
There's a couple of other things
you can do as far as notifications.

00:29:05.860 --> 00:29:10.390
What I'm going to do here is
I want to go over and say,

00:29:11.350 --> 00:29:15.530
Let's go over and watch for a
notification of something changing.

00:29:15.560 --> 00:29:18.590
So I see do a notification add.

00:29:20.360 --> 00:29:26.890
And I want to go over and watch for
changes to the built-in Ethernet.

00:29:31.710 --> 00:29:34.000
So at this point,
the command is sitting here.

00:29:34.000 --> 00:29:36.900
It'll go over and it's told
the system configuration daemon

00:29:36.900 --> 00:29:41.140
to let it know when something
happens to the link status on EN0.

00:29:41.160 --> 00:29:43.340
And if I reach behind here,

00:29:43.370 --> 00:29:46.560
and Yank out the cable,
an event just happened.

00:29:46.560 --> 00:29:48.840
And it turns out everything else is
going on behind the scenes and it's

00:29:48.840 --> 00:29:50.560
going over and reconfiguring things.

00:29:50.560 --> 00:29:54.880
You plug it back in again and
link status comes back up.

00:29:56.110 --> 00:29:58.630
It's flexible in that you can go
over and specify which keys you

00:29:58.630 --> 00:30:02.170
want to go over and watch for,
and you can use it for one

00:30:02.170 --> 00:30:04.340
configuration or another.

00:30:04.340 --> 00:30:07.330
So if I want to go over and say,
let's watch for another key,

00:30:07.340 --> 00:30:12.530
and now we're watching for this key also,
let me go over and

00:30:12.570 --> 00:30:14.330
bring up another window.

00:30:24.640 --> 00:30:31.380
Open a connection to the server and we'll
go over and create a new dictionary.

00:30:40.700 --> 00:30:41.940
This is a key value.

00:30:41.940 --> 00:30:44.700
Hello is the key and
the value is everyone.

00:30:44.700 --> 00:30:49.330
So the contents of the dictionary,
so the key is hello,

00:30:49.340 --> 00:30:50.700
the value is everyone.

00:30:50.700 --> 00:30:54.700
And then when we go over and say let's
go add this key to the dynamic store,

00:30:54.700 --> 00:30:58.600
if you go over and watch the top window,
when I go over and add the key,

00:30:58.720 --> 00:31:01.300
it sees the change.

00:31:03.100 --> 00:31:06.200
So you go over and tile this together
with the link status coming up and down

00:31:06.200 --> 00:31:11.490
and what's been configured and everything
sort of just puts itself together.

00:31:11.610 --> 00:31:14.290
So the last thing to go over and show you

00:31:19.100 --> 00:31:28.430
and I will be presenting the
Mac OS X system in a few minutes.

00:31:28.790 --> 00:31:33.590
Left side is a list of the services
as they've been configured.

00:31:33.630 --> 00:31:35.780
So this is the information that
comes from the network setup,

00:31:35.940 --> 00:31:38.640
from the system preferences network pane.

00:31:38.640 --> 00:31:42.330
It's the information that's stored
in the preferences.xml file that

00:31:42.360 --> 00:31:44.380
was loaded into the dynamic store.

00:31:45.040 --> 00:31:49.570
And the right side is the current
status of the network interfaces.

00:31:49.570 --> 00:31:52.860
So here we've got the built-in Ethernet.

00:31:52.880 --> 00:31:54.340
It's config method was manual.

00:31:54.340 --> 00:31:56.060
There's the addressing information.

00:31:56.060 --> 00:31:58.380
And the airport was configured for DHCP.

00:31:58.380 --> 00:32:01.790
The built-in Ethernet state
goes over and has the same

00:32:01.790 --> 00:32:04.000
addresses that were requested.

00:32:04.000 --> 00:32:06.330
You can see the link status is up.

00:32:06.600 --> 00:32:10.600
The airport interface also is up because
we've got an airport within range.

00:32:10.750 --> 00:32:13.500
These are the addresses that were
picked up from the DHCP server

00:32:13.500 --> 00:32:15.500
and the router that came with it.

00:32:15.500 --> 00:32:19.070
Also up on the top here we go over
and see which location we're currently

00:32:19.130 --> 00:32:20.500
set to and the service order.

00:32:20.500 --> 00:32:27.500
So service order ID 1 is going to be
the primary interface if it's available.

00:32:27.500 --> 00:32:30.530
And service ID 1 is the built-in
Ethernet and you go over and

00:32:30.550 --> 00:32:33.890
see that since the Ethernet is
up it is the primary interface.

00:32:37.500 --> 00:32:41.900
If I go and actually change the location,
I'm going to switch this to be,

00:32:41.900 --> 00:32:45.640
instead of being the land having
priority with the airport following,

00:32:45.680 --> 00:32:47.700
I'll switch it to...

00:32:51.200 --> 00:32:54.940
The airport interface having
priority with the LAN.

00:32:54.940 --> 00:32:56.920
And you notice that the primary
interface changed to EN1.

00:32:57.800 --> 00:33:01.800
The nice thing about watching this is
that if you go over and say Atlanta's

00:33:01.800 --> 00:33:04.880
got priority over the airport,
and you go over and unplug the cable,

00:33:04.880 --> 00:33:08.130
if you watch the primary interface,
which is currently the Ethernet,

00:33:08.160 --> 00:33:11.870
when I disconnect it,

00:33:13.600 --> 00:33:17.260
It sees the link status go down,
waits four seconds,

00:33:17.280 --> 00:33:19.510
and the primary interface switches.

00:33:20.210 --> 00:33:23.970
And if you plug it back in again,
it goes over and reevaluates

00:33:24.000 --> 00:33:25.800
what needs to be primary.

00:33:25.870 --> 00:33:27.340
Interface comes up,
you've got new addresses,

00:33:27.340 --> 00:33:29.570
it goes over and switches state.

00:33:36.970 --> 00:33:38.830
and right before you get on the plane,
you go over and turn off

00:33:38.830 --> 00:33:41.900
all your network services,
everything gets turned off.

00:33:41.900 --> 00:33:44.900
So, that's what I've got.

00:33:45.180 --> 00:33:53.790
Thanks, Allan.

00:34:02.700 --> 00:34:05.200
So what do we have in terms of API today?

00:34:05.200 --> 00:34:09.220
Well, what we have is we have a
system configuration framework.

00:34:09.290 --> 00:34:14.240
It contains mostly low-level APIs to
access the dynamic store and preferences.

00:34:14.240 --> 00:34:17.700
We have some higher-level APIs.

00:34:17.700 --> 00:34:22.230
We have reachability APIs that
parallel the OT will dial APIs that

00:34:22.230 --> 00:34:25.100
I'm sure some of you are familiar with.

00:34:25.950 --> 00:34:29.230
As I mentioned when I started out,
all of these APIs are currently

00:34:29.230 --> 00:34:35.140
private and we are working very
hard to make some APIs public.

00:34:35.180 --> 00:34:41.240
What can you, what can,
so one of the things

00:34:41.240 --> 00:34:44.090
that we realize is that

00:34:44.560 --> 00:34:51.690
Since we have mostly low-level APIs,
there's not much in the way of isolation

00:34:51.700 --> 00:34:55.940
between you and the preferences
format or the dynamic store format.

00:34:55.940 --> 00:34:59.950
So you're kind of running pretty
bare to the metal in terms of knowing

00:34:59.950 --> 00:35:02.520
exactly how we've implemented things.

00:35:02.520 --> 00:35:06.780
So we'd like to implement some
more higher-level APIs to provide

00:35:06.780 --> 00:35:11.060
some isolation here so that you
avoid having schema-specific

00:35:11.060 --> 00:35:13.760
information embedded in your code.

00:35:14.500 --> 00:35:17.290
The other thing is to
avoid duplicating code.

00:35:17.300 --> 00:35:22.940
So we're definitely viewing this
as something that's going to evolve

00:35:22.940 --> 00:35:27.970
and grow as needs become apparent
to us and we can provide some common

00:35:27.970 --> 00:35:34.610
APIs that are useful to many developers.

00:35:34.840 --> 00:35:39.000
So, the networking,
some related sessions that actually

00:35:39.040 --> 00:35:42.400
one of them has already happened,
that was this morning,

00:35:42.400 --> 00:35:44.080
the network overview.

00:35:44.080 --> 00:35:48.200
We're talking about
network protocols and APIs.

00:35:48.200 --> 00:35:52.800
The other one, if you want to get more
information on core foundation,

00:35:52.800 --> 00:35:57.560
there's a core foundation overview
over at the Civic Auditorium across

00:35:57.560 --> 00:36:00.390
the street Friday morning at 9.

00:36:01.000 --> 00:36:04.210
So who can you contact if you
have questions about this?

00:36:04.320 --> 00:36:07.280
Thomas Weyer is the man.

00:36:07.320 --> 00:36:12.290
He'll be back up on stage
in a couple more slides.

00:36:12.770 --> 00:36:15.790
If you want to take a look at
the APIs that we have today,

00:36:15.790 --> 00:36:19.700
you're welcome to go to Darwin and
check out the source code.

00:36:19.700 --> 00:36:23.650
There are four projects that we have
that are implementing pretty much

00:36:23.720 --> 00:36:25.700
everything that I've talked about today.

00:36:25.860 --> 00:36:29.800
ConfigD contains the
System Configuration Framework,

00:36:29.800 --> 00:36:33.700
which contains APIs for the
dynamic store and the preferences.

00:36:33.700 --> 00:36:36.850
And it also contains
source code for ConfigD,

00:36:36.850 --> 00:36:39.510
which is the configuration server.

00:36:39.810 --> 00:36:43.870
The other project to check
out is ConfigD plugins.

00:36:43.920 --> 00:36:46.810
This contains most of the agents.

00:36:46.810 --> 00:36:49.330
It contains the IP monitor
and the preferences monitor

00:36:49.330 --> 00:36:50.500
that I talked about today.

00:36:50.500 --> 00:36:52.420
The third project is BootP.

00:36:52.420 --> 00:36:55.520
BootP contains the
IP configuration agent.

00:36:55.520 --> 00:36:59.260
And PPP contains the PPP controller.