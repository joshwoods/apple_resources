WEBVTT

00:00:02.590 --> 00:00:06.600
This is session 135, Input for Games.

00:00:06.630 --> 00:00:09.460
And I'm Geoff Stahl,
Games and Graphics DTS Engineer.

00:00:09.550 --> 00:00:12.500
The good news is this year,
as we're talking about HID Manager,

00:00:12.500 --> 00:00:15.860
we're talking about real input for X,
we're talking about devices that you

00:00:15.860 --> 00:00:18.670
can really get into your applications,
use them,

00:00:18.720 --> 00:00:22.570
and make some great games and any
other application that you may

00:00:22.570 --> 00:00:25.850
be interested in that uses input.

00:00:26.380 --> 00:00:28.380
We're going to go through
a number of things today.

00:00:28.380 --> 00:00:31.200
What I'm going to basically start
talking about is the HID Manager and

00:00:31.200 --> 00:00:34.640
how it attaches to the system,
where it sits, and then how to really

00:00:34.640 --> 00:00:35.430
use the HID Manager.

00:00:35.510 --> 00:00:36.940
I'm going to show a lot of examples.

00:00:37.020 --> 00:00:43.570
We're going to walk through some of
the I/O registry and look at how the

00:00:43.570 --> 00:00:45.490
devices are actually laid out so you
get an understanding of how the devices

00:00:45.490 --> 00:00:45.490
actually interface to the system.

00:00:46.360 --> 00:00:48.940
First thing we're going to talk
about is system services for input.

00:00:48.940 --> 00:00:51.290
We're going to talk a little bit
about Carbon and about what's

00:00:51.300 --> 00:00:55.740
there and why you may also want to
use Carbon and why you need to use

00:00:55.740 --> 00:00:58.160
Carbon right now for a few devices.

00:00:58.160 --> 00:01:00.850
Then we're going to talk about the
HID Manager and the meat of the

00:01:00.850 --> 00:01:04.770
discussion will be about the HID Manager,
will be about how the HID Manager works,

00:01:04.770 --> 00:01:08.370
and will be about how to use it and
how you can use it in your application.

00:01:09.480 --> 00:01:12.400
Lastly, we'll use the HID Manager for
getting user input.

00:01:12.440 --> 00:01:14.900
First thing we'll do is
use device discovery.

00:01:14.960 --> 00:01:17.570
How do you go through the system,
use the services there to actually

00:01:17.660 --> 00:01:19.530
discover what devices are on the system.

00:01:19.530 --> 00:01:22.640
We've done a lot of the work for you
and we have some sample code that

00:01:22.660 --> 00:01:26.350
will be out either later today or this
weekend that you can peruse over that

00:01:26.370 --> 00:01:29.830
will be the basis for the code that's
in this discussion and you can use

00:01:29.830 --> 00:01:34.100
that directly in your applications for
device discovery and for getting input.

00:01:35.100 --> 00:01:36.540
Then we're going to be talking
about retrieving input.

00:01:37.230 --> 00:01:40.460
As far as retrieving input goes,
you're going to have to decide

00:01:40.460 --> 00:01:43.090
exactly how you want your input,
where it's coming from,

00:01:43.090 --> 00:01:44.570
whether it's an axis,
whether it's a button,

00:01:44.880 --> 00:01:47.470
and know how to get that
into your application.

00:01:48.670 --> 00:01:50.970
Lastly,
we'll talk about input configuration.

00:01:50.970 --> 00:01:54.210
One of the big things for
people playing games or any

00:01:54.210 --> 00:01:57.800
other use of the input devices,
if you have your jog shuttle

00:01:58.070 --> 00:02:01.220
you may be using with your
image editing application,

00:02:01.240 --> 00:02:04.590
your photo editing or your
Final Cut Pro or Premiere film

00:02:05.130 --> 00:02:07.450
editing application,
one thing you may want to

00:02:07.730 --> 00:02:11.620
do is the way you design it,
and the way the user wants to use

00:02:11.620 --> 00:02:12.970
it may not be exactly the same.

00:02:12.970 --> 00:02:14.810
So you want to have a
way to configure that.

00:02:14.820 --> 00:02:17.920
You want to have a way for the user to
use any buttons for anything they want.

00:02:18.480 --> 00:02:20.890
Whether they're navigating
the web or whether they're

00:02:20.890 --> 00:02:23.290
editing the next great movie,
you want them to be able to

00:02:23.360 --> 00:02:24.840
configure it however they want.

00:02:27.990 --> 00:02:33.760
So let's talk about what system
services exist on Mac OS X for input.

00:02:33.770 --> 00:02:37.420
HId Manager is built on top of I/O Kit.

00:02:37.420 --> 00:02:41.140
It is a fairly thin layer on top
of I/O Kit that actually handles

00:02:41.140 --> 00:02:44.460
device communication and allows
you to get input from devices.

00:02:44.460 --> 00:02:47.310
It's fairly robust in the fact
that it's not an API that limits

00:02:47.440 --> 00:02:49.140
you and how you want to use it.

00:02:49.140 --> 00:02:52.860
You can use it at a high level with an
Aqua interface or you can use it in an

00:02:52.860 --> 00:02:54.950
immersive game with your own interface.

00:02:54.950 --> 00:02:58.550
It doesn't limit you as we've seen
in the past that you may be limited

00:02:58.550 --> 00:03:01.690
to only one way of configuration or
only one way of dealing with devices.

00:03:01.740 --> 00:03:03.130
This allows you to deal with
them however you would like.

00:03:04.940 --> 00:03:08.800
You can use joysticks, jog shuttles,
universal power supplies, game pads,

00:03:08.800 --> 00:03:13.470
anything that is a USB device
or a HID compliant device,

00:03:13.580 --> 00:03:16.730
actually that is a HID compliant device,
will work with HID Manager.

00:03:16.800 --> 00:03:19.810
Some USB devices,
if you look in the I/O registry,

00:03:19.810 --> 00:03:23.800
you'll see they don't have a HID,
they're not supported through HID.

00:03:23.800 --> 00:03:25.510
Those devices would have
to have a special driver to

00:03:25.590 --> 00:03:26.800
work through the HID Manager.

00:03:26.800 --> 00:03:29.810
But most devices that you'll
normally see in consumers,

00:03:29.810 --> 00:03:32.610
your game pads, your joysticks,
your jog shuttles,

00:03:32.720 --> 00:03:36.090
will automatically support
plug and play HID recognition.

00:03:36.480 --> 00:03:39.060
Carbon handles mouse and
keyboard for right now.

00:03:39.090 --> 00:03:42.940
Mac OS X currently, for Carbon,
to get mouse and keyboard

00:03:42.940 --> 00:03:46.420
that includes mouse deltas,
multiple mouse buttons, mouse wheels,

00:03:46.520 --> 00:03:48.560
all that can work through
Carbon Events and can be integrated

00:03:48.570 --> 00:03:50.300
with the HID Manager very simply.

00:03:50.300 --> 00:03:54.570
We're looking to the future to bring
that all through into HID Manager and

00:03:54.570 --> 00:03:58.820
so you can get all inputs through
the HID Manager at one stop shopping.

00:04:03.300 --> 00:04:05.200
Let's talk a little bit
about Carbon Events.

00:04:05.340 --> 00:04:07.930
Carbon Events allows
access to multiple buttons,

00:04:07.970 --> 00:04:11.900
up to 32 buttons, and mouse deltas,
which is key if you're doing a game

00:04:11.900 --> 00:04:14.150
or you want something other than
tracking the mouse on the screen.

00:04:14.160 --> 00:04:17.980
Git keys and Git mouse
also work currently.

00:04:17.980 --> 00:04:20.470
So if you have an application that
you just want to quickly code up

00:04:20.470 --> 00:04:23.120
or you want to do some basic input,
you can still get the mouse

00:04:23.250 --> 00:04:23.980
position with Git mouse.

00:04:24.120 --> 00:04:26.380
Realize that it's pinned to
the screen coordinates or to

00:04:26.380 --> 00:04:28.810
the full world coordinates,
whatever you're supported

00:04:28.810 --> 00:04:32.520
by your screens,
and thus you may not be usable without

00:04:32.520 --> 00:04:36.620
some hackery to keep the mouse in the
center of the screen or on the screen.

00:04:36.620 --> 00:04:39.030
There's a better way to do it,
and I'll show you how to do that today.

00:04:40.400 --> 00:05:00.100
[Transcript missing]

00:05:00.210 --> 00:05:02.340
Discussions already this
week about Carbon Events.

00:05:02.400 --> 00:05:04.360
I'm not going to go into exactly
how to use Carbon Events.

00:05:04.380 --> 00:05:06.650
There's a great book on Carbon and
how to use Carbon Events.

00:05:06.650 --> 00:05:08.670
There's some great sample
code in the Carbon SDK.

00:05:08.700 --> 00:05:10.000
Please look there.

00:05:10.000 --> 00:05:11.200
Look through it.

00:05:11.200 --> 00:05:13.960
It'll bring you up to speed on
the basic use of Carbon Events.

00:05:14.480 --> 00:05:18.410
But what events are you very interested
in to get for getting the mouse?

00:05:18.410 --> 00:05:23.480
We're talking about kEventMouseDown,
kEventMouseUp to determine whether

00:05:23.490 --> 00:05:24.770
your mouse is down or mouse up.

00:05:24.860 --> 00:05:28.390
You can track those and see whether
the user has a mouse down or mouse up.

00:05:28.460 --> 00:05:30.780
When you do that,
one thing you want to look

00:05:30.780 --> 00:05:33.870
at is you want to look at the
actual what button there is.

00:05:33.990 --> 00:05:37.090
There's a button param I'll go
into a little later that tells

00:05:37.090 --> 00:05:40.590
you what button is going down
for the mouse down or mouse up.

00:05:40.780 --> 00:05:44.220
So just the mouse down or mouse up
event says some button went down.

00:05:44.540 --> 00:05:46.920
If the user has a multi-button mice,
it could be two different

00:05:47.320 --> 00:05:51.200
mouse buttons that go down or
up in different events there.

00:05:51.540 --> 00:05:54.800
Mouse wheel moved, mouse dragged,
mouse moved.

00:05:54.850 --> 00:05:58.240
The last two are the key things to
determine for the mouse moved events.

00:05:58.310 --> 00:06:00.100
You're not going to find
a mouse delta event.

00:06:00.100 --> 00:06:04.580
What you see is you get a mouse
moved event and then you look

00:06:04.580 --> 00:06:05.920
at the mouse delta in there.

00:06:06.000 --> 00:06:08.720
So you're actually when
every time the mouse moves,

00:06:08.720 --> 00:06:10.930
you're going to get a mouse moved
event and then you look at the mouse

00:06:11.070 --> 00:06:14.420
delta parameter to find the delta from
the last time you got the mouse moved.

00:06:14.470 --> 00:06:17.540
Realize that this updates
on a per event basis.

00:06:17.570 --> 00:06:19.840
So you don't want to accumulate,
you don't want to skip events,

00:06:19.840 --> 00:06:23.160
you want to accumulate that delta every
single time you get a Carbon event.

00:06:23.200 --> 00:06:25.100
So that's kind of key.

00:06:25.100 --> 00:06:29.140
One thing to note is if you're in Cocoa,
you can use the core graphics

00:06:29.140 --> 00:06:30.790
to get the mouse deltas.

00:06:30.840 --> 00:06:34.560
Again, those need to be synchronized and
the fact that you can't wait half

00:06:34.560 --> 00:06:38.600
an hour to get a mouse delta and
expect it to be an accumulation

00:06:38.600 --> 00:06:40.580
of all the last mouse deltas.

00:06:40.930 --> 00:06:43.940
Or if you pull very very
quickly and get the mouse delta,

00:06:43.940 --> 00:06:45.860
you're not going to blank
that last mouse delta.

00:06:45.860 --> 00:06:48.660
It's going to be the same
one over and over again.

00:06:48.660 --> 00:06:51.020
So realize there is a synchronization
issue here when you're doing this.

00:06:52.290 --> 00:06:54.200
Disassociating the pointer.

00:06:54.210 --> 00:06:56.730
See if you disassociate mouse
and mouse cursor position allows

00:06:56.730 --> 00:07:01.200
you to dissociate the pointer
from the actual cursor position,

00:07:01.200 --> 00:07:04.200
so it will allow you through core
graphics to not have the pointer move.

00:07:04.200 --> 00:07:09.470
You can hide the pointer,
call that routine,

00:07:09.470 --> 00:07:09.470
and the pointer is not going to be
moving underneath your application.

00:07:10.690 --> 00:07:16.250
Handle Raw, Key Down, Handle Raw,
Key Repeat, or Key, K, Event, Raw,

00:07:16.350 --> 00:07:17.300
Repeat.

00:07:17.300 --> 00:07:18.220
Very simple.

00:07:18.340 --> 00:07:20.690
If you want to just get keys,
like a user would be doing typing,

00:07:20.790 --> 00:07:22.640
you'll handle those two events.

00:07:22.640 --> 00:07:24.970
Key Down, you get a key, Key Repeat,
you get the same key,

00:07:24.970 --> 00:07:27.040
and you continue to handle those.

00:07:27.040 --> 00:07:28.860
Or you may want to do a key down,
key up events.

00:07:28.860 --> 00:07:31.170
You want to, when the wall,
the key is down,

00:07:31.300 --> 00:07:34.150
the user holds the key down,
you have thrust going

00:07:34.150 --> 00:07:38.260
to your rocket ship,
or you have your laser beam coming out,

00:07:38.260 --> 00:07:40.770
or whatever your game has in it.

00:07:40.890 --> 00:07:42.370
You can, when the key is down,
you can activate,

00:07:42.390 --> 00:07:45.430
when the key is back up,
you release instead of doing a polling

00:07:45.430 --> 00:07:48.320
on the key downs and key repeats.

00:07:48.320 --> 00:07:51.660
And one other thing to look
at is key modifiers change.

00:07:51.660 --> 00:07:54.290
That will allow you to get the modifiers,
figure out what modifiers

00:07:54.290 --> 00:07:55.210
are down on the keyboard.

00:07:57.910 --> 00:08:00.400
So let's move into the HID Manager.

00:08:00.460 --> 00:08:04.240
The HID Manager basically handles
input output from devices.

00:08:04.280 --> 00:08:07.880
The device discovery is actually
handled through the I/O Kit services.

00:08:07.920 --> 00:08:10.440
It allows access to device elements.

00:08:10.440 --> 00:08:14.680
The key here is that you get a device,
you get a joystick, and that joystick is

00:08:14.680 --> 00:08:15.590
built out of elements.

00:08:15.720 --> 00:08:17.310
It's built out of an X and a Y axis.

00:08:17.310 --> 00:08:18.880
It may be built out of a hat switch.

00:08:18.880 --> 00:08:21.480
It may be built out of a
slider and some buttons.

00:08:21.540 --> 00:08:23.900
All those put together
describe your joystick.

00:08:23.940 --> 00:08:25.830
So what you're going to
see when you look at it,

00:08:25.860 --> 00:08:28.390
you're actually going to see something
that tells you it's a joystick.

00:08:28.390 --> 00:08:31.740
Below that there's going to be a
list or a collection of all the

00:08:31.740 --> 00:08:33.420
input pieces of that joystick.

00:08:33.480 --> 00:08:36.380
And that's how you need to think about
it when you're thinking about your

00:08:36.430 --> 00:08:38.630
game and mapping this to actions.

00:08:38.720 --> 00:08:41.560
So when you have this,
what you'll do is you'll say,

00:08:41.590 --> 00:08:43.640
"I want this device, my joystick.

00:08:43.680 --> 00:08:46.220
I want to get the X axis,
and that'll be the X axis for my game.

00:08:46.220 --> 00:08:48.440
And I'll assign that to
some action in the game.

00:08:48.550 --> 00:08:50.990
And that action in my
game will be turn left,

00:08:50.990 --> 00:08:53.410
turn right." If someone then
comes in with a gamepad,

00:08:53.410 --> 00:08:55.800
the gamepad will also have
a collection of elements.

00:08:55.860 --> 00:08:57.300
They may also have an X and Y axis.

00:08:57.340 --> 00:09:00.920
And you then can assign that,
the X axis in the gamepad,

00:09:00.920 --> 00:09:02.480
also to turn left, turn right.

00:09:05.220 --> 00:09:09.560
HiD Manager will provide
polling and queuing services.

00:09:09.560 --> 00:09:12.200
You can either do a kind of a poll.

00:09:12.200 --> 00:09:18.380
You can get current values of any device
and any element out there on the system.

00:09:18.380 --> 00:09:21.930
Or you can queue events
on a per element basis,

00:09:21.930 --> 00:09:26.680
which may differ from some other
APIs out there as far as how you

00:09:26.680 --> 00:09:27.370
actually poll and queue events.

00:09:27.370 --> 00:09:27.370
And on that note, I think,
why don't we take a little sidebar here.

00:09:27.750 --> 00:09:31.740
and talk about HID Manager as
compared to direct input as

00:09:31.750 --> 00:09:33.180
compared to input sprocket.

00:09:33.180 --> 00:09:35.350
Just give a little,
to have a cage everyone's gyros as

00:09:35.360 --> 00:09:40.340
far as exactly how they compare,
compare and contrast those two.

00:09:40.340 --> 00:09:42.190
So if you're familiar with
one of those other APIs,

00:09:42.260 --> 00:09:44.310
this will kind of bring up the
speed and where HID Manager stands

00:09:44.310 --> 00:09:45.120
in relation to that.

00:09:45.140 --> 00:09:48.170
Then we'll jump into actually
working with HID Manager.

00:09:48.980 --> 00:09:51.900
So first, device discovery.

00:09:52.030 --> 00:09:54.900
The HID Manager uses I/O Kit,
as we talked about, for device discovery.

00:09:54.910 --> 00:09:59.200
Direct input, kind of similar,
it has its own

00:09:59.340 --> 00:10:01.010
is a developer at IOCit,
its own discovery services,

00:10:01.010 --> 00:10:03.540
but very similar as far as you
create a direct input object and

00:10:03.540 --> 00:10:05.300
you're going to enumerate devices.

00:10:05.300 --> 00:10:10.300
Similar thing to what you're going to do
in IOCit as far as you create an object

00:10:10.300 --> 00:10:11.290
and you'll enumerate on the devices.

00:10:11.300 --> 00:10:14.300
So very similar methodologies there.

00:10:14.300 --> 00:10:16.930
Input sprocket,
you can use ISP devices extracting,

00:10:16.930 --> 00:10:20.300
you'll list through the devices there,
which is the same methodology.

00:10:20.300 --> 00:10:24.880
Or the high level input sprocket
you can just use on ISP init,

00:10:24.880 --> 00:10:26.050
which will actually go out
and grab the devices for you.

00:10:27.400 --> 00:10:29.500
Element handling.

00:10:29.630 --> 00:10:33.970
We build a HID device interface
and then we look for a cookie.

00:10:34.060 --> 00:10:38.880
So we basically have an interface and
a cookie and we go through I/O Kit to

00:10:38.880 --> 00:10:43.300
actually find the device and then
get the element off the device once

00:10:43.380 --> 00:10:45.240
we have an interface to the device.

00:10:45.240 --> 00:10:48.610
So what you're going to look at is you'll
have a device interface and then you just

00:10:48.610 --> 00:10:52.260
give it a cookie and that will allow,
that's exactly what you need to

00:10:52.300 --> 00:10:54.500
get information about that element.

00:10:54.500 --> 00:10:56.130
So there's the two pieces
of information you need.

00:10:56.130 --> 00:10:58.680
Again, you need the device,
you need that cookie that points

00:10:58.680 --> 00:11:00.440
to that input on that device.

00:11:00.530 --> 00:11:02.830
Direct input,
you're going to enumerate objects and

00:11:02.830 --> 00:11:05.960
you're going to use Git capabilities to
identify the capabilities of that device.

00:11:05.990 --> 00:11:07.680
Direct input is very device centric.

00:11:07.680 --> 00:11:11.380
When you get things out of direct input,
you'll get a device at a time.

00:11:11.380 --> 00:11:13.740
You don't get an element at a time.

00:11:13.740 --> 00:11:17.020
HID Manager on the other
hand is element centric.

00:11:17.020 --> 00:11:19.150
You can say I want to
queue this one element.

00:11:19.150 --> 00:11:20.840
So I'm only interested in one element.

00:11:20.840 --> 00:11:22.080
I'm not interested in the entire device.

00:11:22.150 --> 00:11:23.670
I'm interested in one
piece of that device.

00:11:25.160 --> 00:11:26.360
Input Sprocket.

00:11:26.370 --> 00:11:28.280
You can use Input Sprocket
Get Element List to

00:11:28.280 --> 00:11:29.940
retrieve input of elements.

00:11:29.940 --> 00:11:34.100
And you can get the references elements
through that list and then use that to

00:11:34.100 --> 00:11:37.080
get the information about that element.

00:11:38.430 --> 00:11:39.290
User configuration.

00:11:39.290 --> 00:11:41.440
User configuration for I/O Kit,
I'm sorry,

00:11:41.460 --> 00:11:44.630
for HID Manager is handled through the
application however you want to do it.

00:11:44.710 --> 00:11:49.030
There's no built in services currently
for high level configuration dialogues,

00:11:49.050 --> 00:11:50.350
but as you'll see in
some of the examples,

00:11:50.460 --> 00:11:53.610
I've given you some tools that will
be real easy for you to build your

00:11:53.610 --> 00:11:57.080
configuration dialogues and/or if
you want to do a fully immersive API,

00:11:57.160 --> 00:11:59.230
build them into a fully immersive API.

00:11:59.300 --> 00:12:01.410
Direct input, again,
handled by application.

00:12:01.460 --> 00:12:04.300
The application needs to handle
the configuration in some way.

00:12:04.450 --> 00:12:08.670
In some cases there is utilities
provided by the device vendors that

00:12:08.670 --> 00:12:12.980
handle some mapping of those devices,
but again, that's an application or

00:12:13.030 --> 00:12:14.300
device specific thing.

00:12:14.300 --> 00:12:17.290
There's no system services
specifically for input configuration.

00:12:17.300 --> 00:12:18.430
Input sprocket.

00:12:18.430 --> 00:12:21.400
We have an ISP configure
that we could use on 9.

00:12:21.400 --> 00:12:25.790
One of the big things we've had feedback
from the developers was that works

00:12:25.790 --> 00:12:28.280
great for a limited subset of cases.

00:12:28.300 --> 00:12:31.300
If you have a fully immersive app,
all we give you is a dialogue box.

00:12:31.300 --> 00:12:33.270
If you're full screen,
we give you a dialogue box.

00:12:33.290 --> 00:12:35.300
There's a lot of problems
with some of these things,

00:12:35.300 --> 00:12:38.300
so it really didn't work
completely well for all developers.

00:12:38.300 --> 00:12:40.760
What happens is that when
you want to stay immersive,

00:12:40.760 --> 00:12:43.580
you don't want to bring up the
Mac dialogue and there was no real

00:12:43.580 --> 00:12:45.300
way of getting information out.

00:12:45.300 --> 00:12:49.710
Well, in HIID Manager,
we have full services to get that

00:12:49.710 --> 00:12:54.350
information out so you can build
whatever kind of dialogue or

00:12:54.430 --> 00:12:57.300
immersive UI that you'd like to.

00:12:59.180 --> 00:13:03.690
So for input retrieval, very simply,
we're going to use a good

00:13:03.690 --> 00:13:05.700
element value for polling,
and we're going to use

00:13:05.700 --> 00:13:08.040
a queue for querying,
and we're going to get the next event.

00:13:08.100 --> 00:13:09.100
Pretty simple.

00:13:09.100 --> 00:13:13.100
We give it the device,
give it the cookie for the element,

00:13:13.100 --> 00:13:16.880
and we get the element value,
or we put that same information

00:13:16.880 --> 00:13:20.600
into the queue to queue it,
and then we get the next event.

00:13:21.340 --> 00:13:22.720
Direct input,
we're going to get a device state.

00:13:22.850 --> 00:13:26.800
So basically direct input again is
very device centric and you're going

00:13:26.800 --> 00:13:29.380
to get the entire state of the entire
device and you can sort through it

00:13:29.380 --> 00:13:30.920
and figure out exactly what you want.

00:13:31.060 --> 00:13:35.160
Input sprocket, you can use ISP,
get simple state or get next event,

00:13:35.160 --> 00:13:37.790
very similar in this case to
the HID Manager when you're

00:13:37.790 --> 00:13:39.430
working at the event level.

00:13:40.010 --> 00:13:44.250
Okay, let's talk about how to do
things with the HID Manager.

00:13:44.400 --> 00:13:45.340
Device discovery.

00:13:45.410 --> 00:13:48.320
First we're going to set up
an I/O matching dictionary.

00:13:48.830 --> 00:13:49.900
Then we're going to get
the device iterator.

00:13:49.900 --> 00:13:51.890
Then we're going to iterate for devices.

00:13:51.890 --> 00:13:55.630
Then here's a key,
we have to recursively iterate underneath

00:13:55.750 --> 00:14:00.900
that through CFDictionary's and
CFArrays for the elements.

00:14:00.900 --> 00:14:02.880
We'll capture the cookies for
the element identification.

00:14:02.890 --> 00:14:04.890
That seems pretty complicated.

00:14:04.900 --> 00:14:06.700
We're going to break this down.

00:14:06.700 --> 00:14:08.900
I'm going to talk about how to do this.

00:14:08.900 --> 00:14:10.910
The first thing I want to do
though is I want to go through

00:14:10.910 --> 00:14:13.900
the I/O registry and show you
exactly what the devices look like.

00:14:13.910 --> 00:14:16.750
A real good thing when you're
working with your applications

00:14:16.750 --> 00:14:18.870
is you can get right in there and
see everything that's on a device.

00:14:18.900 --> 00:14:21.860
You can see if your application
is correctly seeing the device,

00:14:21.860 --> 00:14:24.900
see what actually the device is
reporting back to the system.

00:14:24.910 --> 00:14:28.470
You can really easily make sure that
you have the correct information on

00:14:28.470 --> 00:14:30.860
the device and you understand what kind
of information you're working with.

00:14:30.900 --> 00:14:34.740
Let's bring up demo machine number two.

00:14:43.660 --> 00:14:47.360
And this is where you start
with the I/O Registry.

00:14:47.430 --> 00:14:50.100
I/O Registry Explorer from
Developer Tools Applications.

00:14:50.830 --> 00:14:51.660
Start at the root.

00:14:51.780 --> 00:14:54.980
And this is my, you know,
I'm not an I/O Registry guy,

00:14:55.290 --> 00:14:57.570
so as far as do you need
to be an expert in this?

00:14:57.600 --> 00:14:57.740
No, you don't.

00:14:57.790 --> 00:14:58.600
Not at all.

00:14:58.680 --> 00:15:01.980
I'm not an expert by any means on
exactly how the I/O Registry works,

00:15:02.150 --> 00:15:06.250
but I was able to very easily put
together the HID samples and I think

00:15:06.250 --> 00:15:08.520
you'll be able to easily use this.

00:15:08.610 --> 00:15:13.040
So we're going to walk
through the I/O Registry,

00:15:13.190 --> 00:15:19.130
my secret path here,
which is Power Mac 3.4, Mac RISC,

00:15:19.130 --> 00:15:20.780
and then the PCI.

00:15:21.220 --> 00:15:25.660
Here, and if you notice,
you have USB 18 and 19.

00:15:25.800 --> 00:15:28.560
You look on here and

00:15:30.170 --> 00:15:31.100
There you go.

00:15:31.100 --> 00:15:34.940
If you notice down here,
you have a Mac Oli USB joystick,

00:15:34.980 --> 00:15:37.570
you have a GamePad Pro,
you have a Mac Oli iShock,

00:15:37.700 --> 00:15:39.090
and you have a jogging shuttle.

00:15:39.160 --> 00:15:40.750
Those are your HID devices.

00:15:40.870 --> 00:15:43.240
And when you look at
the I/O USB interface,

00:15:43.240 --> 00:15:45.100
you'll notice it has a HID driver.

00:15:45.160 --> 00:15:49.100
You'll notice this one has a
HID driver up in this area.

00:15:49.100 --> 00:15:51.510
You'll notice this one has a HID driver.

00:15:51.690 --> 00:15:53.100
So they're all HID devices.

00:15:53.100 --> 00:15:56.230
So let's look at,
just pick the Mac Oli USB joystick,

00:15:56.250 --> 00:15:57.850
look at the HID driver.

00:15:57.850 --> 00:16:00.100
So I'm looking at the elements.

00:16:01.550 --> 00:16:04.720
What you notice is,
I talked about the device

00:16:04.720 --> 00:16:06.280
being the package of elements.

00:16:06.280 --> 00:16:10.510
You notice that elements is an array,
and of that there's five dictionaries.

00:16:11.070 --> 00:16:15.010
And then if you keep looking at elements,
you can go down and look at the

00:16:15.010 --> 00:16:16.400
types of elements there are.

00:16:16.400 --> 00:16:22.710
And what you'll notice is,
let's drill down to one of these.

00:16:24.910 --> 00:16:28.100
Here's an element, for example,
has an isRelative value,

00:16:28.180 --> 00:16:34.800
has a null state type, preferred state,
nonlinear, wrapping size element cookie.

00:16:34.800 --> 00:16:38.440
Right there is exactly the
piece you need to save.

00:16:38.670 --> 00:16:41.670
That element cookie
per device is specific,

00:16:41.940 --> 00:16:46.500
so this element will only be
referred to by that cookie.

00:16:46.500 --> 00:16:47.780
No other element will have that cookie.

00:16:47.780 --> 00:16:48.740
Has a min and max.

00:16:48.740 --> 00:16:51.780
In this case, based on the min and max,
this is a button.

00:16:51.780 --> 00:16:55.780
The other thing we look at
is the usage and usage page.

00:16:55.850 --> 00:16:59.650
While this may seem low level,
it's real simple and this is what

00:16:59.740 --> 00:17:02.760
USB spec and HID spec is built on,
the usage and usage page.

00:17:02.760 --> 00:17:05.780
It's really important to understand that
that defines what you're looking at.

00:17:05.780 --> 00:17:09.670
Anything from a joystick to a
button to a dial to a hat switch

00:17:09.770 --> 00:17:12.180
is defined by usage and usage page.

00:17:12.260 --> 00:17:16.780
And we'll look at that in a second
to show exactly how that looks.

00:17:17.780 --> 00:17:20.380
But what you'll notice about
this structure is it is an

00:17:20.380 --> 00:17:22.780
array of CFDictionary's.

00:17:22.780 --> 00:17:24.120
Has a min and max.

00:17:24.120 --> 00:17:24.120
Has a null state type,
preferred state type,

00:17:24.120 --> 00:17:24.120
preferred state type,
and has a min and max.

00:17:26.690 --> 00:17:29.260
and you work down the dictionaries.

00:17:29.420 --> 00:17:32.140
Here's another example of something.

00:17:32.140 --> 00:17:38.520
In this case,
this is a slider or an axis.

00:17:38.600 --> 00:17:43.100
You see the min value is 0,
max value is 55, usage is 54.

00:17:43.220 --> 00:17:45.840
So how do we figure out
what the heck this thing is?

00:17:46.070 --> 00:17:48.550
You bring up demo machine number 3.

00:17:48.820 --> 00:17:51.770
What you'll see is,
I'm trying to left-handed mouse,

00:17:51.770 --> 00:17:52.700
so we'll see how this works.

00:17:52.700 --> 00:17:56.960
What you'll see is,
this is the HID USB parser dot

00:17:57.020 --> 00:17:59.700
H in the I/O Kit framework.

00:17:59.800 --> 00:18:02.940
This is a very long list of
everything you ever could want

00:18:03.130 --> 00:18:05.270
to know about what's on a device.

00:18:06.550 --> 00:18:08.600
The main pages is what
you have right here.

00:18:08.600 --> 00:18:11.370
Usage pages is an undefined
generic desktop simulation,

00:18:11.370 --> 00:18:12.300
VR, etc., etc.

00:18:12.300 --> 00:18:13.600
You notice some things
that are interesting.

00:18:13.600 --> 00:18:17.400
There's a button page and
there's also a consumer page.

00:18:17.470 --> 00:18:22.130
Almost everything you want to work
on is in the generic desktop page.

00:18:22.140 --> 00:18:26.140
We move down to the generic desktop page.

00:18:26.140 --> 00:18:33.210
Again, as I said,

00:18:40.020 --> 00:18:43.580
As I said with the generic desktop page,
everything from the actual description

00:18:43.580 --> 00:18:47.000
of the device down to the elements
of the device is on this page.

00:18:47.310 --> 00:18:51.660
So, a joystick would be a
generic desktop type 4,

00:18:51.920 --> 00:18:54.930
which is a joystick,
while a gamepad would be type 5.

00:18:55.180 --> 00:18:58.620
On that gamepad, you might have

00:18:58.820 --> 00:19:04.230
GDX, generic desktop X-axis or
Y-axis on that same device.

00:19:04.240 --> 00:19:06.980
So there's not like this is a
list of devices and this is a

00:19:06.980 --> 00:19:08.130
list of stuff on the devices.

00:19:08.200 --> 00:19:09.720
Everything's in the same kind of list.

00:19:09.830 --> 00:19:13.020
And this is your list,
this is your dictionary, so to speak,

00:19:13.030 --> 00:19:17.040
how to convert from the numerics of
it to actually what the things are.

00:19:17.040 --> 00:19:19.760
So you'll see there's a dial, wheel,
slider, hat switch.

00:19:19.760 --> 00:19:23.280
You also have things like velocity X,
velocity Y, some strange things,

00:19:23.280 --> 00:19:24.920
system control, system sleep.

00:19:24.930 --> 00:19:28.490
So if you have more advanced devices,
you may have that kind of stuff.

00:19:28.930 --> 00:19:30.900
And what's interesting
if you go down this,

00:19:30.910 --> 00:19:32.380
it's kind of fun to look at.

00:19:32.390 --> 00:19:35.430
This is set up for doing
things like the Disney rides.

00:19:35.800 --> 00:19:37.720
And they'll use the HIID spec.

00:19:37.820 --> 00:19:41.550
You know, this tank simulation device or
magic carpet simulation device.

00:19:41.550 --> 00:19:44.170
I don't think I've seen
that in the store recently.

00:19:44.200 --> 00:19:49.110
And you go down, flare release,
flight communications, trigger,

00:19:49.110 --> 00:19:53.980
weapons arm, wing flaps, rear brake,
front brake, handlebars.

00:19:54.160 --> 00:19:57.000
Oh, here's a rowing simulation.

00:19:57.000 --> 00:19:58.780
You have oar, you have a slope,
a rowing simulation.

00:19:58.780 --> 00:20:01.600
You have a rate of stick speed.

00:20:01.600 --> 00:20:05.050
Oh, and then you have for golf,
if you need your five

00:20:05.050 --> 00:20:07.790
iron or your loft wedge.

00:20:08.220 --> 00:20:12.990
And oh, they're playing pinball here,
bump, secondary flipper, flipper.

00:20:12.990 --> 00:20:17.480
So this list is very
generic for everything that

00:20:17.480 --> 00:20:19.100
uses HIID type of devices.

00:20:19.360 --> 00:20:21.300
Some things we want to
look at is keyboard.

00:20:21.300 --> 00:20:25.610
First, for keyboard support,
this keyboard page will be the mapping.

00:20:25.610 --> 00:20:29.090
And this section you're seeing right
here does map to the ASCII values.

00:20:29.190 --> 00:20:31.840
So the standard numbers will map
to ASCII values when you get those

00:20:31.840 --> 00:20:34.500
back out as far as what elements
of the keyboard are pressed.

00:20:34.500 --> 00:20:37.320
And then you can have additional
things like your F keys,

00:20:37.320 --> 00:20:38.080
your page up and down, and so on.

00:20:38.180 --> 00:20:40.920
page down, your left arrow, right arrow.

00:20:41.200 --> 00:20:44.660
Moving out of that, you have some LEDs,
and there's some great LEDs in here also.

00:20:44.660 --> 00:20:48.740
You have a night mode paper jam,
so just in case your game wants

00:20:48.870 --> 00:20:51.080
to show that you have a paper jam.

00:20:51.420 --> 00:20:56.450
Buttons, once you get to the button page,
buttons are very simply

00:20:56.450 --> 00:20:57.600
enumerated down the page.

00:20:57.710 --> 00:21:01.450
So button page number 12 is button 12.

00:21:01.460 --> 00:21:04.730
You can see they just list a few of them,
because it's pretty obvious.

00:21:04.790 --> 00:21:10.390
And there's also telephone
is listed on here.

00:21:10.420 --> 00:21:12.010
And the consumer page
is interesting also,

00:21:12.320 --> 00:21:14.380
because, for example,
I have this jogging shuttle,

00:21:14.380 --> 00:21:16.840
which lists itself as a
consumer control device.

00:21:16.840 --> 00:21:21.040
So it just lists the consumer page and
it says I'm device number one there.

00:21:21.040 --> 00:21:21.880
So that's something else.

00:21:21.880 --> 00:21:27.210
And you notice consumer devices a
lot of times are VCR kind of things

00:21:27.210 --> 00:21:31.500
or media control kind of things,
play, record, fast forward.

00:21:31.500 --> 00:21:34.400
But you can see that someone
could use a jog shuttle and put

00:21:34.400 --> 00:21:38.840
the consumer device page in,
put play, fast forward, rewind,

00:21:38.840 --> 00:21:39.700
all those kind of things.

00:21:39.700 --> 00:21:42.270
And you could definitely,
applications should take advantage of it.

00:21:42.370 --> 00:21:43.420
For example,
it would be great to have your

00:21:43.420 --> 00:21:44.780
little jog shuttle with iTunes.

00:21:44.780 --> 00:21:45.900
Let me go to the next track.

00:21:45.900 --> 00:21:47.380
Let me back up a little bit.

00:21:47.380 --> 00:21:48.340
Let me skip around.

00:21:48.340 --> 00:21:49.000
Those kind of things.

00:21:49.000 --> 00:21:50.780
Or if you're doing something
like Final Cut Pro X,

00:21:50.780 --> 00:21:53.120
you could control your movies directly.

00:21:53.140 --> 00:21:54.780
And you could take one and plug it in.

00:21:54.780 --> 00:21:57.740
You could take this jog
shuttle and plug it right in.

00:21:57.740 --> 00:21:59.830
Or you could take some other jog
shuttle and plug it right in.

00:21:59.840 --> 00:22:01.040
And it would all work the same.

00:22:01.040 --> 00:22:03.280
That's the idea behind HID.

00:22:03.340 --> 00:22:07.140
So we've seen where the I/O registry is.

00:22:07.140 --> 00:22:11.720
And I think everyone should at least
look at the I/O registry and see the

00:22:11.720 --> 00:22:14.730
HID devices and see how they're listed
and see the information that's on there.

00:22:14.740 --> 00:22:16.670
Because the information that
we're talking about here,

00:22:16.670 --> 00:22:18.280
and I'll show you,
is basically the information

00:22:18.280 --> 00:22:19.440
out of the I/O registry.

00:22:19.440 --> 00:22:20.500
And it's really pretty simple to do.

00:22:20.530 --> 00:22:22.260
It's really simple to use
into your application.

00:22:22.260 --> 00:22:24.210
So let's bring it back to the slides.

00:22:24.290 --> 00:22:28.000
And we'll talk about how to get
information out of these things.

00:22:28.560 --> 00:22:31.300
First, the caveat to all this.

00:22:31.310 --> 00:22:34.430
I have sample code that will be
going up either today or this weekend

00:22:35.050 --> 00:22:36.400
that will do all of this for you.

00:22:36.680 --> 00:22:40.660
So, you don't have to,
well I'm going to tell you all about

00:22:40.660 --> 00:22:41.870
it and we're going to talk about it.

00:22:41.930 --> 00:22:43.810
This will go through and
build a list of devices.

00:22:43.890 --> 00:22:45.610
This will discover all
the devices for you.

00:22:45.750 --> 00:22:47.640
This will get all this
information out of there.

00:22:47.640 --> 00:22:48.830
You can look at how it's done.

00:22:48.830 --> 00:22:51.070
If you don't like it,
if you think it's not done properly,

00:22:51.070 --> 00:22:51.860
you can change it.

00:22:51.860 --> 00:22:54.800
I would love some feedback and we'll
keep this sample code up to date.

00:22:54.800 --> 00:22:57.140
I'm working very hard with
engineering to make sure that

00:22:57.150 --> 00:22:58.300
this is done the correct way.

00:22:58.500 --> 00:23:02.290
And we'll reflect any changes that we
make in APIs or in I/O Kit or something

00:23:02.370 --> 00:23:06.390
changes in the OS that I may have
found that are mistakes I may make.

00:23:06.500 --> 00:23:09.960
So, let's talk about the wonderful
setting up the I/O matching dictionary

00:23:09.960 --> 00:23:13.490
because everyone should know how
to set up an I/O matching dictionary.

00:23:13.500 --> 00:23:16.290
The I/O matching dictionary,
what it's going to do is basically

00:23:16.290 --> 00:23:19.060
going to say I'm going to go into
the I/O registry and I'm going to

00:23:19.080 --> 00:23:20.500
find everything of the type you want.

00:23:20.520 --> 00:23:25.490
And that type is going to be joysticks,
game pads, jog shuttles, whatever.

00:23:25.500 --> 00:23:27.400
So, in this case,
first we're going to say we

00:23:27.400 --> 00:23:28.500
want to match HID devices.

00:23:28.500 --> 00:23:30.500
So, our key is we want to
say HID devices only.

00:23:30.500 --> 00:23:32.490
I don't want to find the USB hard drive.

00:23:32.490 --> 00:23:33.450
I just want HID devices.

00:23:33.500 --> 00:23:36.630
Then we're going to say we're going
to do the CFNumber create which is

00:23:36.630 --> 00:23:38.500
some standard CF for creating numbers.

00:23:38.500 --> 00:23:40.480
And we're going to set values.

00:23:40.500 --> 00:23:42.410
We see a ref usage page and ref usage.

00:23:42.500 --> 00:23:44.440
That's exactly what we just talked about.

00:23:44.700 --> 00:23:46.500
What you do for the page
would be generic desktop.

00:23:46.530 --> 00:23:50.470
And for the usage might be,
would be in this case, would be game pad.

00:23:50.520 --> 00:23:54.570
And it would find, you're looking for the
game pads in this case.

00:23:57.590 --> 00:23:59.340
So now we want to get,
once we have a match,

00:23:59.340 --> 00:24:02.470
we want to get an iterator to
iterate over all the listed devices.

00:24:02.570 --> 00:24:03.750
This is pretty simple.

00:24:03.830 --> 00:24:06.160
All it is,
is a list of devices you get and you want

00:24:06.210 --> 00:24:08.340
to iterate from first one to last one.

00:24:08.380 --> 00:24:12.010
You need the I/O master port,
get the access to the I/O registry.

00:24:12.010 --> 00:24:15.250
You're going to use setup
matching dictionary and that was

00:24:15.250 --> 00:24:18.510
what we just saw a minute ago
to get the matching dictionary.

00:24:18.900 --> 00:24:21.800
Once you get the matching dictionary,
you're going to get I/O service

00:24:22.070 --> 00:24:23.340
get matching services.

00:24:23.340 --> 00:24:25.680
And what that's going to do is
take some matching dictionary,

00:24:25.870 --> 00:24:27.480
takes the master port,
puts them together,

00:24:27.480 --> 00:24:29.400
and gives you an iterator
for your objects.

00:24:29.500 --> 00:24:32.760
So that gives you something you
can iterate across all the device

00:24:33.190 --> 00:24:35.510
list and pull your devices out.

00:24:40.650 --> 00:24:43.300
So this is going to show you
how to use that iterator.

00:24:43.360 --> 00:24:49.060
First thing we do is we're going to
get an I/O device by continuously

00:24:49.060 --> 00:24:51.280
looping through the next iterator.

00:24:51.280 --> 00:24:53.920
Then what we need to do is get the
dictionary for the HIID properties.

00:24:53.920 --> 00:24:56.010
As you saw,
all the properties for that device

00:24:56.010 --> 00:24:57.440
were stored in a dictionary.

00:24:57.630 --> 00:24:59.140
So we want to get that
dictionary right there.

00:24:59.140 --> 00:25:02.290
We get the mutable dictionary ref.

00:25:03.050 --> 00:25:09.060
I/O Registry creates CF properties and
we use that with the I/O device we found.

00:25:09.060 --> 00:25:11.880
I have my variable called
HID_PROPERTIES that we're going

00:25:11.880 --> 00:25:13.760
to fill with the property list.

00:25:13.760 --> 00:25:17.100
And then what we're going to do is
we're going to go across and the top

00:25:17.290 --> 00:25:19.220
level will be the info about the device.

00:25:19.220 --> 00:25:22.320
So the top level of that dictionary
will show you about the device.

00:25:22.320 --> 00:25:26.620
What kind of device it is,
what the vendor is, who the product is,

00:25:26.620 --> 00:25:29.380
the serial number,
what else will show you.

00:25:29.380 --> 00:25:31.730
Location ID, which is very important.

00:25:31.730 --> 00:25:35.440
Location ID is a long,
this kind of a mangled long that

00:25:35.440 --> 00:25:41.040
has an encoded where in the whole
tree of USB LAN that thing plugs in.

00:25:41.110 --> 00:25:45.420
So if I have two game pads and you
guys are playing with one game pad and

00:25:45.420 --> 00:25:47.650
you guys are playing with the other,
I don't want in the middle of the game

00:25:47.690 --> 00:25:50.720
to have that swap and not be able to
figure out which game pad is which.

00:25:50.780 --> 00:25:53.750
So the location ID makes sure
that you can identify a device,

00:25:53.750 --> 00:25:55.900
specifically location,
if they're exactly the same

00:25:55.900 --> 00:25:57.660
devices plugged into your system.

00:25:57.660 --> 00:25:59.570
So that's in the device info.

00:25:59.810 --> 00:26:02.840
And then below that we have a
collection of the element information.

00:26:02.840 --> 00:26:05.130
And in that collection of element
information is going to be all the

00:26:05.130 --> 00:26:07.780
information of all the elements and
we're going to step through that.

00:26:07.780 --> 00:26:10.900
And once we're done with it,
we're going to release the properties.

00:26:13.640 --> 00:26:16.990
I'm going to try and go through this and
explain exactly kind of what this does,

00:26:16.990 --> 00:26:21.340
but if you want more detail,
I say you look at the code.

00:26:21.350 --> 00:26:23.810
The code is fairly well commented,
and you can step through

00:26:23.810 --> 00:26:24.600
it and see how it works.

00:26:24.600 --> 00:26:28.520
The key here is that you have
to recursively step through kind

00:26:28.520 --> 00:26:30.590
of a dictionary array pairs.

00:26:30.600 --> 00:26:32.740
So every time you get an array,
you're going to step through and you

00:26:32.740 --> 00:26:35.000
should get a dictionary below the array,
and in the dictionary you

00:26:35.000 --> 00:26:36.570
should have another array.

00:26:36.700 --> 00:26:38.450
So you come back and do
the same thing again.

00:26:38.560 --> 00:26:41.090
So this is what this starts out doing,
and we have kind of one level that

00:26:41.110 --> 00:26:43.600
handles the arrays and one level
that handles the dictionaries.

00:26:43.600 --> 00:26:46.990
You pass a dictionary into this level,
and this is going to say,

00:26:46.990 --> 00:26:50.560
it's going to get the value of the
properties and get the type ID.

00:26:50.640 --> 00:26:53.690
If it's an array type,
which is what we're expecting,

00:26:53.700 --> 00:26:55.510
we're going to say,
you have a dictionary at the top

00:26:55.650 --> 00:26:57.450
level of the device for the elements,
and you may have an array

00:26:57.450 --> 00:26:58.600
of 50 elements below that.

00:26:58.600 --> 00:27:02.100
So you're going to get the array,
and then you're going to look at

00:27:02.100 --> 00:27:06.600
CFApply or ArrayApply function for
the entire range of that device.

00:27:06.600 --> 00:27:11.600
And get my array elements,
which is the next function I'll show you.

00:27:11.670 --> 00:27:15.590
And you're going to swap
that all back and forth.

00:27:16.090 --> 00:27:21.000
So once you get the array,
what you'll then do is call the array

00:27:21.000 --> 00:27:23.000
applier for each value in the array.

00:27:23.000 --> 00:27:27.220
And in this case,
what you'll notice that if it's

00:27:27.320 --> 00:27:32.070
a collection type in this array,
we'll go back to the dictionary

00:27:32.090 --> 00:27:33.650
and look for more arrays.

00:27:33.650 --> 00:27:36.750
So for example,
a device may be organized as a joystick.

00:27:36.750 --> 00:27:38.910
You may have X and
Y axis grouped together.

00:27:39.030 --> 00:27:42.310
You may have some controls on
the top of the joystick grouped.

00:27:42.310 --> 00:27:45.760
You may have controls on the base
of the joystick grouped together.

00:27:45.760 --> 00:27:47.200
So it may not be a flat file.

00:27:47.200 --> 00:27:50.800
So there is some intrinsic there as far
as how the device is actually built,

00:27:50.850 --> 00:27:52.490
is built into this information.

00:27:52.510 --> 00:27:55.090
So in that case, you have a device.

00:27:55.320 --> 00:27:58.280
You may have an array of
two elements below that.

00:27:58.280 --> 00:28:00.350
One element will be the stick.

00:28:00.380 --> 00:28:02.730
One element will actually be the base.

00:28:02.730 --> 00:28:05.400
Inside the array of the stick,
you may have five

00:28:05.520 --> 00:28:07.310
elements inside of that,
an X and Y axis,

00:28:07.310 --> 00:28:09.520
which is grouped together,
which is a group.

00:28:09.810 --> 00:28:12.440
And then you may have buttons
that are outside of that.

00:28:12.480 --> 00:28:14.780
So this makes it a little more
complicated as far as how you

00:28:14.910 --> 00:28:16.080
extract things from devices.

00:28:16.170 --> 00:28:20.490
There's not a specific order to
expect things or it's not flat.

00:28:20.570 --> 00:28:22.820
This code is what does that.

00:28:22.820 --> 00:28:25.720
And what it does,
the key here is where the switch.

00:28:25.820 --> 00:28:28.610
If it finds a miscellaneous,
a button or an axis type, it says, hey,

00:28:28.610 --> 00:28:29.470
I'm interested in that.

00:28:29.630 --> 00:28:31.910
That's an element that I'm interested
that's going to give me input.

00:28:32.030 --> 00:28:34.650
So I'm going to go get
info about that element.

00:28:34.710 --> 00:28:36.340
If it's not, again,
if it's the collection type,

00:28:36.400 --> 00:28:37.500
it says that's another array.

00:28:37.500 --> 00:28:39.020
That's another, that's the stick.

00:28:39.050 --> 00:28:39.710
That's the base.

00:28:39.940 --> 00:28:41.600
That's the X and Y axis grouped together.

00:28:41.640 --> 00:28:44.400
I'm going to go back and get
the dictionary for that one,

00:28:44.400 --> 00:28:48.000
or with the dictionary for that one,
and get another array and

00:28:48.000 --> 00:28:50.390
press down into the hierarchy.

00:28:52.310 --> 00:28:54.240
So get my element info is pretty simple.

00:28:54.240 --> 00:28:56.140
This is just a little piece of it.

00:28:56.220 --> 00:28:59.940
Basically what you want to do is
see if dictionary get value with

00:28:59.940 --> 00:29:03.600
the I/O HID element cookie key.

00:29:03.600 --> 00:29:06.220
And where do you find the
I/O HID element cookie key?

00:29:06.340 --> 00:29:12.520
You find that in the I/O HID lib.h,
and it has a list of all the

00:29:12.520 --> 00:29:15.520
keys that are in the I/O registry
for all the HID devices.

00:29:15.660 --> 00:29:18.070
Everything you want to know about
a HID device is listed in there.

00:29:18.340 --> 00:29:20.340
You pass the key in,
it spits out a value to you.

00:29:20.340 --> 00:29:21.600
It might be a string,
it might be a number.

00:29:21.810 --> 00:29:23.760
There's a couple booleans in there also.

00:29:23.800 --> 00:29:25.600
And that's real simple.

00:29:25.610 --> 00:29:28.990
And then you go get value for that,
and that's how I got the cookie for

00:29:29.020 --> 00:29:30.550
all the elements of every device.

00:29:30.700 --> 00:29:33.320
And you just loop through the
entire device for doing this,

00:29:33.330 --> 00:29:35.780
and you pull out all
the information there.

00:29:35.800 --> 00:29:40.330
The other stuff we talked about in the
I/O registry is what makes up a device.

00:29:40.390 --> 00:29:42.900
So type, an element,
that was what we talked about before,

00:29:42.900 --> 00:29:46.750
whether it be a button, an axis,
a miscellaneous type.

00:29:46.990 --> 00:29:49.690
This is a usage page,
which may be generic desktop probably.

00:29:49.850 --> 00:29:51.140
This is a usage, which would be button.

00:29:51.640 --> 00:29:57.240
Axis slider, X rotation Y, what are the,
what do you see?

00:29:57.240 --> 00:29:58.920
Rotation Z.

00:29:58.990 --> 00:30:02.080
You may have something just
generically called a slider.

00:30:02.100 --> 00:32:03.100
[Transcript missing]

00:32:03.330 --> 00:32:05.200
And the last thing,
the name of the element.

00:32:05.200 --> 00:32:09.200
Which, for element-wise,
I have not seen one name filled out.

00:32:09.200 --> 00:32:11.190
So I've never seen a
device report itself,

00:32:11.200 --> 00:32:13.750
"Hey, this is button six," or "This is
the hat switch," or "This is the

00:32:13.860 --> 00:32:17.190
trigger." I've always seen button one.

00:32:17.250 --> 00:32:20.480
So that's something that you
may have synthesized yourself,

00:32:20.480 --> 00:32:24.120
or my code synthesizes for you
based on the usage and usage page.

00:32:26.080 --> 00:32:29.430
So let's talk about device discovery
and see what we've already done for you.

00:32:29.440 --> 00:32:31.730
Demo 2 machine,
we'll bring that back up and we don't

00:32:31.740 --> 00:32:34.190
need to look at the registry again.

00:32:35.080 --> 00:32:38.580
And this is a piece of sample code
that will be ready and it is done,

00:32:38.590 --> 00:32:42.890
so it will be either up today or
this weekend complete and it has the

00:32:42.890 --> 00:32:47.290
complete code to do a device discovery,
get a list of devices and tell you

00:32:47.300 --> 00:32:50.000
every piece of information there is
about the device that we can find.

00:32:50.910 --> 00:32:56.960
In this case I have a key span USB hub
here and I have four devices plugged in.

00:32:57.000 --> 00:33:02.250
First my Mac Alley USB joystick,
Gamepad Pro USB,

00:33:02.250 --> 00:33:05.140
so the standard Gamepad Pro.

00:33:06.240 --> 00:33:09.040
The MacAli iShock, right there.

00:33:09.040 --> 00:33:11.240
And lastly,
what's called the Jog and Shuttle,

00:33:11.240 --> 00:33:13.200
which is this jog shuttle device.

00:33:13.200 --> 00:33:17.450
The no additional code
was done for this part.

00:33:17.560 --> 00:33:19.740
All those names came
directly from the device.

00:33:19.760 --> 00:33:23.200
So I just looked up the device and said,
"What is the name of the device?"

00:33:23.200 --> 00:33:24.870
What the code that I have,
a sample code does,

00:33:24.930 --> 00:33:27.880
it goes and makes a list of every
device and every element on the device,

00:33:27.890 --> 00:33:31.020
pulls all the information out so you
have a flat structure to access it.

00:33:31.020 --> 00:33:33.860
So you can just go device,
pointer to device name,

00:33:33.980 --> 00:33:38.510
and that's the string that
represents the name of that device.

00:33:38.840 --> 00:33:40.290
If you notice, this is a joystick.

00:33:40.350 --> 00:33:42.530
It has two axes, four buttons, one hat,
one slider.

00:33:42.530 --> 00:33:45.620
So the hat's up here,
sliders on the base, axes,

00:33:45.620 --> 00:33:47.130
and four buttons.

00:33:47.200 --> 00:33:49.690
Vendor ID and Product ID.

00:33:49.770 --> 00:33:50.640
Why do you care?

00:33:50.680 --> 00:33:53.200
Vendor ID and Product ID are
very important.

00:33:53.200 --> 00:33:57.880
That vendor ID combined with that product
ID identifies that specific device.

00:33:57.900 --> 00:34:00.980
The next version of that device
will have a different product ID.

00:34:00.980 --> 00:34:03.900
Another vendor's joystick will
have a different vendor ID,

00:34:03.900 --> 00:34:05.500
even if the product ID is matched.

00:34:05.500 --> 00:34:09.990
So those two devices identify the
Mac Alley USB joystick specifically.

00:34:10.010 --> 00:34:12.200
So if I find one of
these on anyone's system,

00:34:12.200 --> 00:34:13.680
it's going to be this device.

00:34:13.700 --> 00:34:17.780
So if I have a configuration that
someone has put together for this device,

00:34:17.780 --> 00:34:20.260
and I find one,
it'll work on that device.

00:34:20.280 --> 00:34:21.980
Guaranteed it's the same kind of device.

00:34:22.000 --> 00:34:25.940
If you combine that with this
big long location ID down here,

00:34:26.030 --> 00:34:29.750
what that gives you is that this device,
plugged into that

00:34:29.750 --> 00:34:32.640
specific port on the hub,
plugged into the specific

00:34:32.820 --> 00:34:34.300
port on the machine.

00:34:34.300 --> 00:34:35.300
Which is actually a lot of work.

00:34:35.300 --> 00:34:37.300
Which is actually on the keyboard,
which is then plugged into the machine.

00:34:37.300 --> 00:34:40.780
The reason you have that is when
you run the game or application

00:34:40.780 --> 00:34:44.240
again on that one system,
you can say, that's the exact same

00:34:44.240 --> 00:34:45.280
joystick I had before.

00:34:45.610 --> 00:34:48.290
Someone didn't plug an additional one in,
it's not two joysticks plugged in,

00:34:48.330 --> 00:34:50.580
it is the same joystick probably
sitting in the same place on the

00:34:50.580 --> 00:34:54.300
person's desk that you had before,
so it's really easy to do configuration.

00:34:54.300 --> 00:34:57.240
One thing you'll notice here
is that serial number is blank.

00:34:57.310 --> 00:34:59.290
I haven't seen a serial
number on any devices,

00:34:59.300 --> 00:35:02.300
but if device vendors
start using serial numbers,

00:35:02.300 --> 00:35:05.100
a serial number would be a way to
identify this particular joystick.

00:35:05.100 --> 00:35:06.880
joystick.

00:35:07.540 --> 00:35:08.500
What else do we see there?

00:35:08.570 --> 00:35:10.840
Product,
obviously Mac Alley USB joystick,

00:35:10.840 --> 00:35:13.780
manufacturers Mac Alley.

00:35:13.780 --> 00:35:14.650
Usage is a joystick.

00:35:14.740 --> 00:35:17.710
It's a generic,
the 01 we saw was a generic desktop

00:35:18.100 --> 00:35:21.780
page and 4 is a joystick so it
says this device is a joystick.

00:35:21.830 --> 00:35:23.540
Here's a list of all the stuff it has.

00:35:23.540 --> 00:35:26.690
Let's look at the x-axis because
that might be most interesting.

00:35:27.000 --> 00:35:28.730
It's a miscellaneous input type.

00:35:28.730 --> 00:35:29.520
It's an x-axis.

00:35:29.640 --> 00:35:32.500
Again, all we did was look up in
the generic desktop page,

00:35:32.600 --> 00:35:34.730
usage 30 was an x-axis.

00:35:34.800 --> 00:35:35.850
It's cookie is 7.

00:35:35.930 --> 00:35:38.220
If you notice, if we go to any other...

00:35:38.760 --> 00:35:43.660
Any of these other inputs,
the cookie is not 7,

00:35:43.700 --> 00:35:48.420
so you can identify specifically
that x-axis with that cookie.

00:35:48.560 --> 00:35:50.500
So anytime you're
referring to that cookie,

00:35:50.570 --> 00:35:52.450
that's the exact same element.

00:35:52.460 --> 00:35:56.580
Range it says is 0 to 127,
no scaled range, size is 8 bits,

00:35:56.710 --> 00:36:00.060
so it's returning a single byte,
and you can see that it has a preferred

00:36:00.060 --> 00:36:02.460
state and none of these are checked.

00:36:02.480 --> 00:36:06.850
No vendor specific information,
it doesn't have a units or a name.

00:36:06.950 --> 00:36:09.920
So if you look at the bottom of that,
the raw value I'm getting out,

00:36:09.920 --> 00:36:13.960
you can see the raw
value that you're seeing

00:36:15.010 --> 00:36:32.690
is about 121 to 1, so it's not bad.

00:36:32.690 --> 00:36:32.690
That gives me a lot of value.

00:36:32.690 --> 00:36:32.690
My centering is not quite right,
and I can obviously adjust the

00:36:32.690 --> 00:36:32.690
centering through the joystick,
which if you notice is not

00:36:32.690 --> 00:36:32.690
that accurate or that linear.

00:36:32.690 --> 00:36:32.690
Once you start looking at the devices,
you realize how not wonderful they are.

00:36:33.090 --> 00:36:35.780
One thing that I did was calibrated,
and we'll go to the

00:36:35.780 --> 00:36:36.860
Y axis to do this easier.

00:36:36.860 --> 00:36:38.960
I should go to the slider because
it's easier doing the slider.

00:36:38.960 --> 00:36:41.430
Slider hasn't moved yet,
so I have no calibrated value.

00:36:41.460 --> 00:36:42.800
My calibration is pretty simple.

00:36:42.800 --> 00:36:46.280
All it does is look at the max and min
range that it's gotten and calibrates

00:36:46.380 --> 00:36:47.500
that to what it's supposed to be.

00:36:47.500 --> 00:36:49.490
So in this case,
if I move it just a little bit,

00:36:49.490 --> 00:36:52.710
it tries to map that little bit of
movement to the entire max range.

00:36:52.790 --> 00:36:55.030
The reason it does that
is it says if your slider,

00:36:55.100 --> 00:36:59.490
in this case,
goes to 7 and goes up to 126, huh,

00:37:00.000 --> 00:37:05.490
yes, there you go, 255, 126,
that's the sliders all the

00:37:05.490 --> 00:37:07.880
way thrown into one extreme.

00:37:07.880 --> 00:37:10.620
If you had this device and
you were expecting 255,

00:37:10.640 --> 00:37:11.960
you're only going to get 126.

00:37:11.960 --> 00:37:15.670
But the calibrated value,
which is in the sample code,

00:37:15.970 --> 00:37:19.800
maps that 0255,
so you can get what you expect out of it.

00:37:20.030 --> 00:37:22.360
And then the bottom is just
a scaled value that says,

00:37:22.430 --> 00:37:25.400
hey,
if you want to scale your y-axis 0255,

00:37:25.400 --> 00:37:28.800
it's going to scale your y-axis 0255.

00:37:28.900 --> 00:37:30.060
Again, y is an example too.

00:37:30.060 --> 00:37:31.520
It goes to 12, and that's full throw.

00:37:31.520 --> 00:37:34.150
And on the other side,
it goes to 125 instead of 127.

00:37:34.240 --> 00:37:37.720
So you can see that these devices
don't always go to the extremes,

00:37:37.720 --> 00:37:38.550
and you can expect that.

00:37:38.720 --> 00:37:40.800
Let's look at some other devices here.

00:37:40.800 --> 00:37:42.680
The GamePad Pro.

00:37:44.600 --> 00:37:45.860
We can figure out what button that is.

00:37:45.860 --> 00:37:48.600
That's that button right there.

00:37:48.600 --> 00:37:51.260
We also have,
look at the X axis there listed,

00:37:51.260 --> 00:37:55.760
and you can see the X axis, 255, 0,
127 for the middle in this case.

00:37:55.840 --> 00:37:58.640
So different ideas of how
they want to set up axes.

00:37:58.640 --> 00:37:59.730
They're not always set up the same.

00:37:59.780 --> 00:38:04.560
In this case, the scaled value, again,
scales everything to the same values.

00:38:05.100 --> 00:38:08.470
That's probably the only
thing exciting there.

00:38:09.200 --> 00:38:11.170
What do we have on the iShock?

00:38:11.170 --> 00:38:15.240
The iShock has three axes,
twenty buttons, and one slider.

00:38:15.240 --> 00:38:18.760
If you notice,
the iShock is set up with what looks like

00:38:18.760 --> 00:38:22.430
an axis here and looks like an axis here,
an x and y axis.

00:38:22.430 --> 00:38:26.790
This is x, vertical is z, vertical is y,
and vertical is z.

00:38:26.900 --> 00:38:35.200
[Transcript missing]

00:38:35.360 --> 00:38:41.370
A Z rotation, and that should be side to
side is your Z rotation.

00:38:41.370 --> 00:38:45.280
And if you notice also,
that's the full throw again, 119.

00:38:46.500 --> 00:38:52.100
The slider is the vertical,
which goes from 118 to 13.

00:38:52.130 --> 00:38:53.890
So again,
be careful with that when you're

00:38:53.900 --> 00:38:56.220
working with the devices that you're
not expecting full range or you

00:38:56.220 --> 00:38:59.260
don't have to have full range or
you're mapping at least a full range.

00:38:59.380 --> 00:39:00.400
So that's something there.

00:39:00.400 --> 00:39:02.900
The last thing we'll look at in
this case is a jogging shuttle.

00:39:04.520 --> 00:39:05.870
Interesting thing about
the Jogging Shuttle,

00:39:05.900 --> 00:39:09.490
it's a consumer device, has 13 buttons,
one dial, and one wheel.

00:39:09.600 --> 00:39:14.040
If we look at the wheel,
which is interesting, it's a, um, no,

00:39:14.040 --> 00:39:15.740
actually we want to look at the dial.

00:39:15.880 --> 00:39:18.280
You notice the dial
is a wrapping element.

00:39:19.750 --> 00:39:21.140
The dial wraps around.

00:39:21.190 --> 00:39:23.600
So it's kind of a neat
little device there.

00:39:23.600 --> 00:39:28.230
So you can see how the indication
from the element tells you

00:39:28.230 --> 00:39:30.440
exactly how it's going to behave.

00:39:30.590 --> 00:39:36.230
So we will quit out of this
and go back to the slides.

00:39:42.250 --> 00:39:46.950
Okay, luckily the code here is
definitely not the density of

00:39:46.950 --> 00:39:48.740
the code in the first section.

00:39:48.740 --> 00:39:50.380
So we're going to talk about
setting up the interface,

00:39:50.380 --> 00:39:52.440
polling event queues and Carbon events.

00:39:52.440 --> 00:39:54.560
Well, maybe I lied.

00:39:57.200 --> 00:41:55.700
[Transcript missing]

00:41:56.300 --> 00:41:57.620
I have K device size queue.

00:41:57.620 --> 00:42:00.620
But if that's 10,
you've got to be retrieving data

00:42:00.620 --> 00:42:04.040
every tenth of a second to even
keep up with the input from an axis.

00:42:04.070 --> 00:42:06.140
So realize that you
may want to pull axes,

00:42:06.160 --> 00:42:07.160
queue buttons.

00:42:07.160 --> 00:42:10.410
Or if you do queue axes,
you want to retrieve data with a fairly

00:42:10.410 --> 00:42:12.180
large queue at a fairly good rate.

00:42:12.180 --> 00:42:15.300
Also, the queue is actually locked
down in kernel memory.

00:42:15.320 --> 00:42:17.190
So it's held in RAM.

00:42:17.280 --> 00:42:20.680
So large queues, if you create this
obnoxiously large queue,

00:42:20.680 --> 00:42:24.270
is a new memory that you're committing
to holding down in RAM that will not be

00:42:24.280 --> 00:42:26.690
released until you release the queue.

00:42:26.720 --> 00:42:28.910
You add element to the queue,
and then you start the queue

00:42:28.920 --> 00:42:29.790
when you need to start the queue.

00:42:29.820 --> 00:42:33.800
You also can flush queues when you need
to to flush the events out of there.

00:42:35.390 --> 00:42:37.920
So get next event, real simple,
you have a queue,

00:42:38.050 --> 00:42:41.720
you get the event out of it,
it gives you a time in the event,

00:42:41.730 --> 00:42:45.280
it's pretty easy,
it gives you the device in the cookie,

00:42:45.280 --> 00:42:49.890
so it's real easy to find out
exactly what caused the event.

00:42:51.860 --> 00:42:54.020
Let's talk about Carbon Events a
little bit and then we'll go back to

00:42:54.020 --> 00:42:56.910
some examples on how this all works.

00:42:57.610 --> 00:43:00.790
In Carbon Events,
what we want to talk about is mouse drag,

00:43:00.790 --> 00:43:01.260
mouse move.

00:43:01.260 --> 00:43:02.860
I talked about those earlier.

00:43:02.990 --> 00:43:04.520
What you want to do is
get event parameter,

00:43:04.790 --> 00:43:06.490
the mouse location,
and it gives you a mouse point.

00:43:06.490 --> 00:43:07.500
Real simple.

00:43:07.500 --> 00:43:10.520
So this is how you would get the
mouse point of the actual mouse

00:43:10.620 --> 00:43:12.400
moved event or mouse dragged event.

00:43:12.480 --> 00:43:15.940
If you want the delta, kEventParam,
mouse delta.

00:43:16.000 --> 00:43:19.750
This is not in the very top level
events in the CarbonEvents.h file.

00:43:19.750 --> 00:43:22.800
It's down in the bottom,
but it just works just the same.

00:43:22.800 --> 00:43:25.590
If you ask for that parameter,
you'll get the mouse delta

00:43:25.590 --> 00:43:25.590
for any mouse moved event.

00:43:27.520 --> 00:43:28.960
Mouse down event.

00:43:29.000 --> 00:43:29.720
Things you can get out of it.

00:43:29.780 --> 00:43:31.440
You can get the mouse location,
so you can get where they

00:43:31.440 --> 00:43:33.260
press the mouse down,
so if you're tracking controls

00:43:33.310 --> 00:43:35.170
or doing that kind of thing.

00:43:35.530 --> 00:43:37.230
You also can get the modifier keys.

00:43:37.310 --> 00:43:39.160
So if you want to see what
modifier keys were held down,

00:43:39.360 --> 00:43:42.360
command click, shift click,
those kind of things, you can do that.

00:43:42.390 --> 00:43:44.370
And lastly, you can get the mouse button.

00:43:44.540 --> 00:43:46.620
So you can get more than one button.

00:43:46.620 --> 00:43:48.060
They're enumerated in order.

00:43:48.060 --> 00:43:51.460
So if you want to get primary, secondary,
tertiary buttons, you can do that.

00:43:51.670 --> 00:43:53.090
So support multi-button mice.

00:43:53.300 --> 00:43:54.800
Very easy to do with Carbon Events.

00:43:58.710 --> 00:44:01.360
Lastly, Carbon Events for keyboard data.

00:44:01.380 --> 00:44:03.280
Raw key down, raw key repeat.

00:44:03.350 --> 00:44:04.410
If you're just trying
to get keyboard data,

00:44:04.410 --> 00:44:07.760
you can get the Mac character codes and
you get the modifiers that go with those.

00:44:07.760 --> 00:44:08.590
Really simple.

00:44:08.630 --> 00:44:10.340
So you can just get the direct
character codes out of there,

00:44:10.340 --> 00:44:15.520
or you can get the virtual key if you
want to get the virtual key instead.

00:44:16.410 --> 00:44:18.410
So,

00:44:20.950 --> 00:44:22.900
What are we going to do next?

00:44:22.900 --> 00:44:27.240
We'll do the Rocket Demo.

00:44:27.580 --> 00:44:30.120
Some of you may have seen this before.

00:44:30.920 --> 00:44:34.660
And what I'll do,
we're just going to open up the,

00:44:34.660 --> 00:44:40.800
just going to run the Rocket Demo.

00:44:46.000 --> 00:44:48.500
I think I have it set up for the iShock.

00:44:48.560 --> 00:44:51.880
Yes, so I have the iShock set
up for the Rocket demo.

00:44:52.310 --> 00:44:53.570
And you can see it's very simple.

00:44:53.570 --> 00:44:58.000
Using the joystick for the input,
using the button for the thrust.

00:44:58.010 --> 00:45:01.300
I have zoom in and zoom out on this.

00:45:01.300 --> 00:45:02.300
It's one call.

00:45:02.300 --> 00:45:04.070
Very, very simple.

00:45:09.600 --> 00:45:18.600
[Transcript missing]

00:45:22.200 --> 00:45:26.180
I think this is set up
for a different device.

00:45:26.200 --> 00:45:26.200
I can't remember what I set this up for.

00:45:26.200 --> 00:45:28.160
I set this up for the joystick.

00:45:28.440 --> 00:45:31.240
So this is just a little little
test demo that's really easy to see.

00:45:31.400 --> 00:45:33.580
You can see that it's a joystick set up

00:45:34.380 --> 00:45:38.610
thrust and fire on the joystick,
easy to retrieve and what this is,

00:45:38.610 --> 00:45:42.310
this stuff is set up using some
of the sample code and basically

00:45:42.310 --> 00:45:45.210
all you are doing is getting,
I have a wrap around,

00:45:45.210 --> 00:45:47.810
get element value and you pass it,
a pointer to the element,

00:45:47.810 --> 00:45:50.620
a pointer to the device you have
and it will find the value for

00:45:50.730 --> 00:45:53.560
it or you can queue it and get
the next event out of the queue.

00:45:53.560 --> 00:45:56.540
So this is, again, one call to get the
element value out of it.

00:45:56.840 --> 00:45:59.800
You call build device list,
you are going to build the device list,

00:45:59.800 --> 00:46:01.550
you find the device
you are interested in,

00:46:01.550 --> 00:46:03.480
you have one call to get the
element value so you don't have

00:46:03.480 --> 00:46:05.180
to do all that code I showed you.

00:46:05.180 --> 00:46:07.390
It's not real,
it's already been done for you

00:46:07.390 --> 00:46:09.200
and hopefully you can use that.

00:46:09.280 --> 00:46:12.200
So we will go back to the slides
and we will talk about Gideon saving

00:46:12.200 --> 00:46:14.150
configuration and I will show you,
I will do a little bit

00:46:14.150 --> 00:46:15.010
more demo at the end.

00:46:17.760 --> 00:46:20.540
So one of the things we need to
talk about is how you configure.

00:46:20.540 --> 00:46:24.410
I mean, yeah, you can get lots of,
I can get the first button on a device,

00:46:24.410 --> 00:46:26.250
but is that what the user
wants to use for fire?

00:46:26.390 --> 00:46:26.940
I don't know.

00:46:26.980 --> 00:46:27.350
Maybe.

00:46:27.500 --> 00:46:31.040
That joystick is set up for as a trigger,
but some of the other ones,

00:46:31.040 --> 00:46:33.990
the eye shock for example,
the buttons one through four

00:46:33.990 --> 00:46:35.600
are set up on the hat over here.

00:46:36.230 --> 00:46:41.200
I'm sure if you're using this
joystick as your control here,

00:46:41.200 --> 00:46:46.200
I probably want to use something
on this side of the gamepad.

00:46:46.230 --> 00:46:47.960
So in that case,
you want to do configuration.

00:46:47.990 --> 00:46:50.200
You want to let the user decide
what they want to configure,

00:46:50.340 --> 00:46:52.200
and you want to make
it as easy as possible.

00:46:52.200 --> 00:46:55.600
So first thing,
the methodology behind it is we have

00:46:55.600 --> 00:46:58.200
a set of actions in the application.

00:46:58.200 --> 00:47:01.760
You may want to turn left, turn right,
thrust, fire, zoom in,

00:47:01.840 --> 00:47:03.120
zoom out kind of thing.

00:47:03.380 --> 00:47:04.110
Those are the kind of actions.

00:47:04.200 --> 00:47:06.200
And you want to map those to elements.

00:47:06.200 --> 00:47:08.050
So we're going to have
a UI that you present,

00:47:08.050 --> 00:47:10.000
whatever you want,
whether it's immersive or

00:47:10.000 --> 00:47:10.960
whether it's just Aqua.

00:47:11.320 --> 00:47:14.540
It took about 50 lines of
code to put a UI together that

00:47:14.540 --> 00:47:16.190
I'll show you in a minute,
so it's not a real big deal.

00:47:16.200 --> 00:47:18.910
And then you call a function
that basically goes out

00:47:18.910 --> 00:47:20.420
and pulls all the devices.

00:47:20.420 --> 00:47:24.120
We wrote a function that basically
looks at current device values.

00:47:24.120 --> 00:47:27.190
It then pulls all the devices
to find out what changed,

00:47:27.280 --> 00:47:32.200
and if it's beyond a threshold,
it reports you back that device.

00:47:32.200 --> 00:47:32.200
If it times out,
it returns timeout with no,

00:47:32.200 --> 00:47:32.200
or that's the default.

00:47:32.200 --> 00:47:33.960
If it times out,
it returns timeout with no,

00:47:34.060 --> 00:47:35.190
or that device in element.

00:47:35.250 --> 00:47:37.690
Timeout returns without anything,
returns null,

00:47:37.700 --> 00:47:40.750
so you know that the user either
kind of canceled out or waited for

00:47:40.750 --> 00:47:42.150
the thing to cancel itself out.

00:47:42.460 --> 00:47:44.610
When the user selects
something to assign,

00:47:44.610 --> 00:47:46.190
we do exactly what I said.

00:47:46.190 --> 00:47:48.470
We build those queues,
pull across the queues,

00:47:48.520 --> 00:47:50.200
and return what's associated.

00:47:50.200 --> 00:47:54.090
We use cookie and device interface
to pull for the input or to

00:47:54.180 --> 00:47:56.200
build a queue for the input.

00:47:56.200 --> 00:47:57.190
So it's real simple.

00:47:57.190 --> 00:48:00.200
Once you get that information back out,
you can find the cookie,

00:48:00.200 --> 00:48:02.200
you find the device interface,
and you got it.

00:48:02.200 --> 00:48:03.410
You got the input right there.

00:48:03.410 --> 00:48:07.950
You associate that with your action,
and you're done.

00:48:09.340 --> 00:48:14.030
When we talk about saving configurations,
we need to bring up my other slide here,

00:48:14.030 --> 00:48:16.510
which tells me exactly
what we're going to save.

00:48:16.520 --> 00:48:19.880
And the reason I want to do this
is because how do you identify a

00:48:19.880 --> 00:48:23.930
device across multiple systems of
disparate users that you may have,

00:48:23.930 --> 00:48:26.840
you know, a gamepad here that's close
to your other gamepad,

00:48:26.840 --> 00:48:28.760
but it's not quite the other gamepad.

00:48:28.760 --> 00:48:29.650
So what do you want to do?

00:48:29.660 --> 00:48:32.490
First thing you want to do is for the
element you want to save the cookie.

00:48:32.490 --> 00:48:34.780
So if you find that same device,
you have the cookie to it,

00:48:34.780 --> 00:48:36.820
you know exactly where it is,
it's on the same device,

00:48:36.900 --> 00:48:38.150
you pull the cookie out.

00:48:38.760 --> 00:48:40.900
You also want to save
the usage and usage page.

00:48:40.900 --> 00:48:43.980
Let's say it was an x-axis,
but you can't find that,

00:48:43.980 --> 00:48:48.200
the iShock device,
but you do find the USB gamepad pro.

00:48:48.360 --> 00:48:52.910
If you know you're looking for an x-axis,
it doesn't matter what the cookie was,

00:48:53.020 --> 00:48:55.300
because the cookie won't
apply to a different device,

00:48:55.300 --> 00:48:57.980
a different product, vendor ID,
but you can look for an x-axis

00:48:58.030 --> 00:48:59.210
and assign it to the x-axis.

00:48:59.270 --> 00:49:00.310
Very simple to do.

00:49:01.800 --> 00:49:04.740
As far as devices, you want to save the
device serial number.

00:49:04.740 --> 00:49:06.600
Most devices don't have it,
but if you do have it,

00:49:06.600 --> 00:49:09.400
it's really an easy way to
determine with a product and

00:49:09.400 --> 00:49:11.630
vendor ID exactly the same device.

00:49:11.630 --> 00:49:14.580
You can track that device exactly
wherever the person plugs it in,

00:49:14.580 --> 00:49:15.870
whatever system it's on.

00:49:15.880 --> 00:49:18.170
Whether they have 10 of those
devices input in their system,

00:49:18.220 --> 00:49:19.380
you'll find that exact device.

00:49:19.410 --> 00:49:21.480
So if they want to use their
purple painted joystick,

00:49:21.480 --> 00:49:23.840
they can use their purple painted
joystick every time because

00:49:23.840 --> 00:49:24.920
you'll be able to find it.

00:49:26.000 --> 00:49:28.180
Vendor ID, Product ID, and Location.

00:49:28.180 --> 00:49:31.490
Those three together basically specify
a certain device that's plugged

00:49:31.650 --> 00:49:32.990
into a certain place in the system.

00:49:32.990 --> 00:49:36.440
So we're assuming that someone
doesn't get lots of devices and

00:49:36.440 --> 00:49:40.000
change them around all the time,
that'll probably find the same joystick,

00:49:40.010 --> 00:49:42.870
gamepad, whatever the person's been using
and will continue to use it.

00:49:43.130 --> 00:49:44.930
And lastly, usage page and usage.

00:49:44.930 --> 00:49:48.480
If you can't match anything else,
better to find a gamepad that's

00:49:48.480 --> 00:49:52.000
close or a joystick that's close
to a gamepad and try and match that

00:49:52.010 --> 00:49:55.900
than to find the jog shuttle to let
them try and play their gamepad.

00:49:56.160 --> 00:49:59.930
shoot them up or quake
with their jog shuttle.

00:50:03.160 --> 00:50:05.560
So again,
I think we just went through these.

00:50:05.600 --> 00:50:08.960
Top to bottom, vendor, product ID,
serial number, and cookie.

00:50:08.960 --> 00:50:11.430
If you got all those,
that identifies a specific

00:50:11.430 --> 00:50:12.770
element on a specific device.

00:50:12.890 --> 00:50:13.720
You're in there, you're golden.

00:50:13.720 --> 00:50:16.370
If you can't get the serial number,
you can substitute it in the

00:50:16.370 --> 00:50:17.570
location in the USB chain.

00:50:17.570 --> 00:50:19.820
That says if the thing's
plugged into the same place,

00:50:19.820 --> 00:50:20.410
it's great.

00:50:22.450 --> 00:50:24.320
Vendor ID, Product ID, and Cookie.

00:50:24.410 --> 00:50:27.460
So this says,
I don't know if it's the same device,

00:50:27.490 --> 00:50:30.660
but I know it's the same type of
device plugged into the system.

00:50:30.660 --> 00:50:33.030
And when I say type,
I mean exactly the same make and

00:50:33.030 --> 00:50:35.390
model spec from the same manufacturer.

00:50:35.390 --> 00:50:38.770
So I know that that is,
unless they have two of them,

00:50:38.820 --> 00:50:41.020
it's probably the same device.

00:50:41.370 --> 00:50:43.200
Then usage and usage page.

00:50:43.200 --> 00:50:46.960
If you find a usage and usage
page match for your device,

00:50:46.960 --> 00:50:49.200
you want to make sure you realize
that the cookie is no longer valid.

00:50:49.200 --> 00:50:50.860
Actually, the cookie is no longer valid.

00:50:50.860 --> 00:50:51.690
I'm sorry, that's correct.

00:50:51.720 --> 00:50:53.740
Once you get off the
vendor and product ID,

00:50:53.740 --> 00:50:55.600
your cookie will no longer be valid.

00:50:55.600 --> 00:50:58.000
So you then have to use the usage
and usage page for the element.

00:50:58.000 --> 00:51:02.330
Search down and try and find the x-axis
or the first button or the fifth button.

00:51:02.330 --> 00:51:04.300
And any device,
if you can't match any of those,

00:51:04.390 --> 00:51:07.500
so you haven't found the, you know,
you have a gamepad and you didn't find

00:51:07.500 --> 00:51:11.180
any gamepads but you have a joystick,
again, search by usage and usage page.

00:51:11.200 --> 00:51:15.040
And that should find exactly
what you're looking for,

00:51:15.040 --> 00:51:20.290
the closest match.

00:51:20.290 --> 00:51:20.300
And I think we'll--

00:51:21.450 --> 00:51:23.630
Bring up the demo machine again.

00:51:23.630 --> 00:51:27.410
It just happens that
I have an example of this.

00:51:28.570 --> 00:51:29.740
So here's my configuration window.

00:51:29.740 --> 00:51:31.140
Pretty simple.

00:51:31.140 --> 00:51:35.100
Mac ally USB joystick,
which is what we're seeing here.

00:51:35.100 --> 00:51:38.860
Real simple with Carbon vents,
by the way, to run both at the same time,

00:51:38.860 --> 00:51:40.940
so I can reconfigure this on the fly.

00:51:40.940 --> 00:51:43.310
I want to switch to this device.

00:51:43.410 --> 00:51:44.720
Remember, all these are plugged
into the same computer.

00:51:44.720 --> 00:51:47.670
I used to do x-axis, iShock x-axis.

00:51:47.680 --> 00:51:50.590
So I just scanned all of them,
no problem, found that one.

00:51:50.660 --> 00:51:52.880
User wants to use the iShock instead.

00:51:52.880 --> 00:51:55.340
For thrust, I want to use that button.

00:51:55.790 --> 00:52:00.320
And for fire, I want to use the jogging
shuttle button 5 for fire.

00:52:00.320 --> 00:52:03.180
So no problem with the
mixed devices real easily.

00:52:03.180 --> 00:52:06.360
And now if you notice,
it's reconfigured automatically.

00:52:06.450 --> 00:52:07.120
Isn't that great?

00:52:07.140 --> 00:52:08.130
No problems.

00:52:08.160 --> 00:52:10.430
While everything's working,
I didn't have to rebuild a

00:52:10.440 --> 00:52:11.510
list or do anything like that.

00:52:11.690 --> 00:52:13.320
Reconfigured thrust is over here.

00:52:13.360 --> 00:52:16.010
And no hands on this thing.

00:52:16.020 --> 00:52:16.670
No hands.

00:52:16.720 --> 00:52:21.200
And the fire is down here
on your jogging shuttle.

00:52:21.200 --> 00:52:22.520
So that works great.

00:52:22.540 --> 00:52:25.890
Another thing you can do, though,
is let's... Let's go to

00:52:25.940 --> 00:52:26.840
something more normal.

00:52:26.840 --> 00:52:30.160
So we have button 5 and 6.

00:52:30.220 --> 00:52:31.930
Actually, yeah, I'll leave it at that.

00:52:32.030 --> 00:52:35.280
So we have x-axis, y-axis on this device,
button 5 and 6.

00:52:35.280 --> 00:52:37.140
I'm going to hit OK there.

00:52:37.140 --> 00:52:38.850
And I'm going to save that configuration.

00:52:38.860 --> 00:52:40.760
I save it to a flat file.

00:52:40.760 --> 00:52:43.030
I saved exactly the information
I showed you to a flat file.

00:52:43.040 --> 00:52:46.830
I'm going to quit this.

00:52:48.670 --> 00:53:01.590
Reopen it.

00:53:01.590 --> 00:53:01.590
It loads the configuration,
so we'll look at the configuration,

00:53:01.590 --> 00:53:01.590
and again, it's the same configuration
we had before.

00:53:01.590 --> 00:53:01.590
And to prove it that we're
actually changing something,

00:53:01.590 --> 00:53:01.590
I'll actually make that...

00:53:02.060 --> 00:53:05.080
"Button 6, I don't want to do
that." You can do that,

00:53:05.080 --> 00:53:06.180
it's not a problem.

00:53:06.270 --> 00:53:08.570
There's no reason you
can't map it that way.

00:53:08.680 --> 00:53:10.050
We'll make it button 7.

00:53:10.090 --> 00:53:10.660
Hit OK.

00:53:10.660 --> 00:53:13.680
Again, we'll save the configuration
and we'll quit.

00:53:13.700 --> 00:53:16.390
Now we should have button 6 and 7 here.

00:53:19.790 --> 00:53:22.460
configuration for the
input button six and seven.

00:53:22.460 --> 00:53:24.060
So that's the input we
want from this thing.

00:53:24.130 --> 00:53:26.860
So we're playing our game,
we're having a great time.

00:53:28.660 --> 00:53:31.810
Doing great things.

00:53:31.810 --> 00:53:32.950
Having a blast.

00:53:33.120 --> 00:53:34.310
This is very exciting.

00:53:36.330 --> 00:53:39.050
Oh, here's something interesting.

00:53:39.060 --> 00:53:39.100
I will show you something interesting.

00:53:39.170 --> 00:53:41.170
Okay,
I'm moving... This is the hat... This is

00:53:41.170 --> 00:53:43.060
the little joystick hat on this device.

00:53:43.090 --> 00:53:44.840
Just so you see,
it goes all the way to that corner.

00:53:44.880 --> 00:53:46.090
This is even with calibrated input.

00:53:46.100 --> 00:53:48.170
This is with recalibrating
to the full range.

00:53:48.280 --> 00:53:49.500
Goes all the way up there.

00:53:49.550 --> 00:53:51.990
Now I'm going to the top
left and bringing it across.

00:53:52.080 --> 00:53:53.600
I'm still bringing it across.

00:53:53.760 --> 00:53:55.810
Still bringing it across.

00:53:56.890 --> 00:53:59.410
And if you notice,
it doesn't have the full range.

00:53:59.530 --> 00:54:02.940
And that's the full motion
from that hat switch.

00:54:03.060 --> 00:54:06.610
So understand when you're designing
games that users may have devices that

00:54:06.690 --> 00:54:10.670
don't quite respond to every single
corner of the input and that that may be

00:54:10.720 --> 00:54:14.340
something that you don't want to have to
have the user turn at a certain rate to

00:54:14.430 --> 00:54:16.340
make a corner and their device doesn't.

00:54:16.390 --> 00:54:19.800
It would be real frustrating if
the device can't make that corner.

00:54:19.800 --> 00:54:22.200
So we'll quit this again.

00:54:25.430 --> 00:54:28.720
and I'm going to go over to Bob's house.

00:54:28.930 --> 00:54:34.140
And Bob didn't spend the extra money and
he only ended up with the GamePad Pro.

00:54:34.310 --> 00:54:36.000
So I want to play the game anyway.

00:54:36.000 --> 00:54:39.950
So we're going to launch and

00:54:40.940 --> 00:54:43.130
or actually Bob brought
his GamePad Pro over,

00:54:43.130 --> 00:54:45.370
or Bob borrowed mine,
so now I have to use this

00:54:45.510 --> 00:54:47.140
because I don't have it anymore.

00:54:47.160 --> 00:54:49.440
Oh, well that's pretty nice.

00:54:49.470 --> 00:54:54.010
It found this as a GamePad Pro and said,
I know how to configure that,

00:54:54.010 --> 00:54:57.980
I'll configure X and Y axes,
buttons 6 and 7, and so

00:54:58.910 --> 00:55:01.260
"Play a little game.

00:55:01.390 --> 00:55:05.000
Obviously, Thrust and Fire,
we happen to be somewhere here and here.

00:55:05.060 --> 00:55:07.710
Not the best buttons,
but it did configure it,

00:55:07.900 --> 00:55:12.490
found the device,
and actually mapped it correctly."

00:55:13.950 --> 00:55:19.380
So, since we saved the configuration,
it'll keep this as a saved configuration

00:55:19.470 --> 00:55:22.290
mapping whatever it can until I actually
save a different configuration.

00:55:22.300 --> 00:55:24.230
At that point,
it would save a different configuration.

00:55:24.300 --> 00:55:29.900
One thing to look at also,
which we'll quit that again and

00:55:29.900 --> 00:55:34.370
I'll remove the GamePad Pro because
now all I have is the joystick.

00:55:35.400 --> 00:55:38.180
If I bring up the
configuration for the joystick,

00:55:38.180 --> 00:55:41.090
one thing we can see is that
it mapped the X and Y axes,

00:55:41.280 --> 00:55:44.220
but this only has four buttons,
so it doesn't know how to

00:55:44.220 --> 00:55:45.710
map those extra buttons.

00:55:45.790 --> 00:55:49.130
You could easily expand the code and say,
hey, if it's not,

00:55:49.130 --> 00:55:52.850
if we're past the end of the buttons,
I'll pick the first buttons,

00:55:52.850 --> 00:55:54.440
whatever you want it to do.

00:55:54.440 --> 00:55:58.030
The idea here is to give the user
something that's pretty close to

00:55:58.270 --> 00:56:00.560
work with so they're not actually,
you know,

00:56:00.560 --> 00:56:05.310
suffering from a problem with not
having to reconfigure an entire device.

00:56:05.400 --> 00:56:08.370
You can reconfigure a lot of inputs
for your application every time they

00:56:08.430 --> 00:56:10.620
play because they change devices.

00:56:10.620 --> 00:56:13.600
So what else do I got to show you?

00:56:13.870 --> 00:56:17.800
So we saw the config save,
we saw the different devices.

00:56:17.800 --> 00:56:20.940
There's no, except for location ID,
which identifies a computer,

00:56:20.940 --> 00:56:25.190
there's no specific thing
in your list of savings,

00:56:25.190 --> 00:56:27.860
of things you save that
identifies that you have to go,

00:56:27.860 --> 00:56:32.470
bring it back to the slides please,
you actually have to go to,

00:56:32.470 --> 00:56:33.890
let me skip one.

00:56:34.520 --> 00:56:37.000
You have to be on that one computer.

00:56:37.100 --> 00:56:40.190
So you could bring an input file,
a configuration file, on your computer,

00:56:40.190 --> 00:56:42.250
your development machine,
and what you're going to find is you're

00:56:42.260 --> 00:56:44.470
never going to find that location
ID for your development machine.

00:56:44.500 --> 00:56:47.030
But what you will find is the
vendor ID and the product ID,

00:56:47.030 --> 00:56:49.880
and so you'll be able to identify
if you put a configuration in for

00:56:49.880 --> 00:56:52.770
a certain type of joystick or you
put a gamepad configuration in,

00:56:52.870 --> 00:56:56.550
you'll definitely identify that there
is that type of thing on the system.

00:56:56.560 --> 00:57:00.300
So, Roadmap 136,
Sound and Networking for Games is

00:57:00.300 --> 00:57:02.180
2 o'clock in the same room.

00:57:02.380 --> 00:57:03.250
I'd like to see you all there.

00:57:03.260 --> 00:57:06.970
And this afternoon, or this evening,
basically at 5,

00:57:07.050 --> 00:57:13.720
last chance to vent your interest,
what we did good,

00:57:13.720 --> 00:57:17.020
what we did bad about games and Mac OS.

00:57:17.020 --> 00:57:20.220
So we'd like to see you there also
to hear about anything that you

00:57:20.230 --> 00:57:24.090
think that we should be adding to the
OS or how we should be improving it.

00:57:24.750 --> 00:57:25.560
That's my information.

00:57:25.970 --> 00:57:29.340
Please, if you have questions,
feel free to contact me.

00:57:29.600 --> 00:57:31.630
The sample code again will be up,
so I think it will handle

00:57:31.630 --> 00:57:32.800
almost everything for you.

00:57:32.800 --> 00:57:35.710
The code that you're actually,
to do the interface, to do the polling,

00:57:35.710 --> 00:57:38.860
it's one call to configure inputs,
it's one call to build a device list,

00:57:38.860 --> 00:57:39.960
one call to release it.

00:57:39.960 --> 00:57:41.210
It's not real complicated.

00:57:41.220 --> 00:57:44.500
Then you can look at the code
and you can learn from that

00:57:44.500 --> 00:57:46.370
exactly how to implement stuff.