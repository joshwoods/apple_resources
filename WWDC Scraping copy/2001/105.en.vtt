WEBVTT

00:00:01.900 --> 00:00:03.080
Hi everybody.

00:00:03.080 --> 00:00:05.850
I think they were running a
little bit late next door.

00:00:05.960 --> 00:00:08.900
Hopefully you guys made it
over from the other session.

00:00:08.900 --> 00:00:14.890
So let's see if I can
get this thing going.

00:00:16.390 --> 00:00:17.300
Okay, that's me.

00:00:17.300 --> 00:00:20.820
So here's the block diagram
you've all seen probably many more

00:00:20.920 --> 00:00:23.420
times than you need to right now.

00:00:23.420 --> 00:00:26.920
But what we're going to be focusing
on here is the graphics layer.

00:00:26.920 --> 00:00:30.250
And what I'm going to be doing in
this session is really bringing

00:00:30.250 --> 00:00:34.760
you through an overview of all the
various technologies we have on

00:00:34.890 --> 00:00:39.820
OS X in the graphics layers for you
to use in your applications from 2D,

00:00:39.820 --> 00:00:41.480
3D, multimedia.

00:00:41.480 --> 00:00:45.140
Then I'm going to show you a
few demos on the system here.

00:00:45.480 --> 00:00:49.100
And then, as Travis said,
have a pretty extensive pointers

00:00:49.100 --> 00:00:52.470
to other sessions throughout
the week that I highly recommend

00:00:52.540 --> 00:00:55.730
you go to if you're interested,
particularly in graphics.

00:00:57.550 --> 00:01:03.400
So again, the bubble bullets for
the graphics layers,

00:01:03.400 --> 00:01:09.990
we have Quartz for 2D, OpenGL for 3D,
and QuickTime for multimedia and video.

00:01:10.000 --> 00:01:14.450
Now, what we did when we came up
with Mac OS X was want to take

00:01:14.520 --> 00:01:19.300
the best technologies in each
of these areas and adopt them,

00:01:19.300 --> 00:01:22.530
and not necessarily reinvent
the wheel or come up with new

00:01:22.530 --> 00:01:24.420
and different technologies.

00:01:24.880 --> 00:01:28.490
So you can see what we've done as I go
through the presentation is really look

00:01:28.610 --> 00:01:32.670
for best practices in the industry and
employ those in OS X as building blocks

00:01:32.670 --> 00:01:35.090
for you guys to do your applications.

00:01:35.100 --> 00:01:37.700
So let's start with Quartz.

00:01:37.780 --> 00:01:40.340
Some of these slides you may
have seen before in the keynote.

00:01:40.340 --> 00:01:43.760
If any of you work at big companies,
you know how this works,

00:01:43.760 --> 00:01:45.150
but I did them first.

00:01:45.230 --> 00:01:49.250
So anyway,
PostScript and PDF are really the

00:01:49.250 --> 00:01:53.020
industry standard 2D imaging model.

00:01:53.720 --> 00:01:56.040
And if you think about it,
it's pretty amazing.

00:01:56.040 --> 00:01:59.240
Basically,
all the pages that you've probably

00:01:59.240 --> 00:02:05.340
seen in publications over the last 10,
20 years since the basic underpinnings

00:02:05.340 --> 00:02:09.570
of PostScript were figured out
can be described in this language.

00:02:09.600 --> 00:02:13.180
And it's really evolved only very
little over time to add things

00:02:13.180 --> 00:02:17.580
like device-independent color,
other font formats, and things like that.

00:02:17.640 --> 00:02:21.460
So it's really a credit to the
designers of this imaging model that

00:02:21.470 --> 00:02:23.590
it's withstood the test of time.

00:02:23.720 --> 00:02:25.490
It's even gone through a language change.

00:02:25.500 --> 00:02:30.260
I mean, it started out as being bound to,
you know, very much Java-like VM-oriented

00:02:30.260 --> 00:02:35.190
environment with the PostScript language
interpreter into a file format like PDF,

00:02:35.190 --> 00:02:36.860
which is just declarative.

00:02:36.880 --> 00:02:39.590
And then as we have with Quartz,
we'll be showing you

00:02:39.610 --> 00:02:43.000
just the 2DC library,
which implements the same imaging model.

00:02:45.000 --> 00:07:41.300
[Transcript missing]

00:07:41.650 --> 00:07:44.330
The other thing for Quartz 2D is
we have very fast anti-aliasing.

00:07:44.620 --> 00:07:49.930
One of the major motivations for building
Quartz was the user interface and some of

00:07:49.930 --> 00:07:54.000
the ideas that we wanted to do with Aqua.

00:07:54.000 --> 00:07:58.830
And we knew it had to be very
fast and very high quality.

00:07:58.990 --> 00:08:01.650
And so Quartz,
we spent a lot of time on the

00:08:01.650 --> 00:08:07.000
anti-aliasing algorithms and it's really
subpixel accurate in terms of text

00:08:07.000 --> 00:08:13.500
positioning and fixed point subpixel
coordinates and exact coverage per pixel.

00:08:13.500 --> 00:08:15.500
So it's pretty sophisticated
what's going on there.

00:08:15.500 --> 00:08:20.580
Then we have Apple type technology
that Apple actually already had so we

00:08:20.580 --> 00:08:23.240
didn't need to rebuild anything here.

00:08:23.690 --> 00:08:26.460
Apple has a pretty extensive
type machinery called the

00:08:26.460 --> 00:08:31.500
Apple Type System and it supports
TrueType as well as Type 1

00:08:31.500 --> 00:08:33.500
and other pluggable font formats.

00:08:33.500 --> 00:08:37.500
And that we just built
right in to Quartz.

00:08:37.610 --> 00:08:41.160
And Quartz calls the
Apple Type Solution whenever it

00:08:41.160 --> 00:08:43.500
has to do any character handling.

00:08:43.540 --> 00:08:49.500
And in fact that piece of code can stream
out data when we need to embed a font.

00:08:49.500 --> 00:08:52.780
We just tell them, "Hey,
we used these three glyphs from

00:08:52.900 --> 00:08:56.370
this font." And the type system
will subset the glyphs and stream

00:08:56.440 --> 00:08:59.470
this out in a format that we can
just stick right into the PDF file.

00:08:59.500 --> 00:09:03.090
So it's a really good way to
get a lot of value out of these

00:09:03.160 --> 00:09:07.500
technologies that we had at Apple that
were really good at doing that.

00:09:07.510 --> 00:09:09.500
That had been around
before we even did Quartz.

00:09:09.500 --> 00:09:13.500
On the Type 1 Scaler I mentioned,
we do have Type 1 built in.

00:09:13.500 --> 00:09:17.500
In fact we worked with Adobe on
getting the Type 1 Scaler.

00:09:17.500 --> 00:09:21.500
So in terms of ATM, you don't really need
ATM as a rasterizer.

00:09:21.500 --> 00:09:25.500
I mean there's font management
things in ATM as a product.

00:09:25.500 --> 00:09:27.520
But in terms of the original
reason why ATM existed,

00:09:27.630 --> 00:09:30.500
which is to bring Type 1
support to the Mac,

00:09:30.500 --> 00:09:35.480
we've cleaned that up with OS X and it's
now just built in as a standard format.

00:09:35.500 --> 00:09:37.500
No extra software required.

00:09:37.920 --> 00:09:43.270
ColorSync is another technology
we had at Apple and used

00:09:43.600 --> 00:09:46.500
primarily in high-end workflows.

00:09:46.500 --> 00:09:50.500
And it's a great API for wiring
together transformations on colors

00:09:50.500 --> 00:09:52.330
and sending image data through it.

00:09:52.500 --> 00:09:56.150
And so we just use that
directly in Quartz 2D without

00:09:56.150 --> 00:09:58.500
necessarily writing any code.

00:09:58.500 --> 00:10:02.500
If we're asked to draw an
LAB image rotated 45 degrees,

00:10:02.500 --> 00:10:06.960
we'll set up the color worlds behind
your back and match appropriately

00:10:06.980 --> 00:10:10.930
through the color worlds to the screen
or however you've set up the destination

00:10:10.930 --> 00:10:13.500
profile for your rendering context.

00:10:13.840 --> 00:10:17.500
There's going to be a lot of talk
about how this exactly works,

00:10:17.500 --> 00:10:22.960
the matching between the ColorSync
implementation in Quartz 2D and the

00:10:22.980 --> 00:10:27.500
PDF model versus the straight ICC model,
which is in ColorSync.

00:10:27.500 --> 00:10:31.500
And in the ColorSync talk they're
going to explicitly talk about

00:10:31.500 --> 00:10:33.500
ColorSync and Quartz working together.

00:10:33.500 --> 00:10:35.490
So if you're interested in that topic,
that's a good thing.

00:10:35.500 --> 00:10:35.900
session.

00:10:38.380 --> 00:10:41.300
The other thing we did,
as you've no doubt heard,

00:10:41.300 --> 00:10:44.800
is we've bundled a bunch of fonts,
about 50 megabytes worth of fonts.

00:10:44.800 --> 00:10:51.230
They're both decorative and classic
designs as far as Roman typefaces go.

00:10:51.300 --> 00:10:54.020
And for Japanese,
we've got six really high

00:10:54.020 --> 00:10:55.800
quality Japanese fonts.

00:10:55.800 --> 00:11:01.090
These fonts range, again,
from kind of more classic

00:11:01.090 --> 00:11:04.300
designs to more modern designs.

00:11:04.300 --> 00:11:07.760
But additionally,
they come with a huge amount of glyphs.

00:11:07.810 --> 00:11:10.800
I think it's something like 12,000
glyphs in each of these fonts.

00:11:10.800 --> 00:11:12.800
So it's a really complete font.

00:11:12.800 --> 00:11:16.420
And what's more,
there's no resolution limit or

00:11:16.420 --> 00:11:21.300
embedding limit in terms of what
you can do with these fonts on OS X.

00:11:21.300 --> 00:11:26.070
And that's something that's, I think,
sort of been holding back desktop

00:11:26.110 --> 00:11:30.580
publishing a little bit in the
Japanese market because it's very

00:11:30.580 --> 00:11:34.300
expensive to have high quality fonts
and the outlines are very pretentious.

00:11:34.300 --> 00:11:36.300
And I think that's something
that's been protected.

00:11:36.300 --> 00:11:37.040
And if any of you have dealt with,
you know,

00:11:37.040 --> 00:11:40.300
laser writers with these kind of fonts,
you know what I'm talking about.

00:11:40.300 --> 00:11:43.730
But these fonts are,
there's no such limitation or no copy

00:11:43.740 --> 00:11:45.220
protection or anything like that.

00:11:45.380 --> 00:11:50.400
And together with our streaming we
get out of the Apple type software,

00:11:50.400 --> 00:11:54.160
what we're able to do is embed only
the glyphs necessary from the fonts

00:11:54.160 --> 00:11:56.280
that are shown into the PDF file.

00:11:56.380 --> 00:12:01.760
So that PDF file can travel anywhere,
any platform, and still have those great

00:12:01.780 --> 00:12:03.090
fonts embedded in it.

00:12:03.610 --> 00:12:08.680
So let me show off
some of the fonts here.

00:12:09.510 --> 00:12:12.100
So we have Baskerville, a bunch of sizes.

00:12:12.170 --> 00:12:16.460
You'll notice it's not just the
regular italic bold kind of set.

00:12:16.540 --> 00:12:23.400
We've actually got some of the semi-bold
and intermediate weights like that.

00:12:23.540 --> 00:12:27.340
So obviously much more expressive
than QuickDraw style bits.

00:12:27.400 --> 00:12:30.260
We've got regular bold
light and condensed,

00:12:30.260 --> 00:12:37.370
various flavors of American typewriter,
which is a nice fixed advanced font.

00:12:38.120 --> 00:12:44.110
Some of the classic faces here: Kaslan,
Dedo, Copperplate.

00:12:44.520 --> 00:12:46.910
Some more decorative faces.

00:12:47.110 --> 00:12:49.560
We've got Markerfelt,
which is kind of a nice

00:12:49.560 --> 00:12:51.830
kind of presentation font.

00:12:51.960 --> 00:12:55.110
Zapfino,
which is a font designed by Herman Zapf,

00:12:55.110 --> 00:12:59.000
the font designer,
in the spirit of his own calligraphy,

00:12:59.000 --> 00:13:00.230
his own handwriting.

00:13:00.330 --> 00:13:04.140
And that's really beautiful font,
and I'll actually show that

00:13:04.560 --> 00:13:06.420
interactive during the demo.

00:13:06.800 --> 00:13:07.390
Optima.

00:13:07.390 --> 00:13:08.320
Optima is a great font.

00:13:08.320 --> 00:13:09.580
It's been around for a while.

00:13:09.580 --> 00:13:15.260
One of the things that is great about
Optima on OS X is the anti-aliasing

00:13:15.270 --> 00:13:19.290
really brings through some of the
subtle characteristics of this font.

00:13:19.780 --> 00:13:26.240
For example, the B in bold has a very
slight bow on the curve.

00:13:26.310 --> 00:13:29.810
And to really represent that
faithfully requires pretty

00:13:29.810 --> 00:13:34.490
sophisticated anti-aliasing and
more than 16 levels of gray,

00:13:34.490 --> 00:13:36.100
as some approaches do.

00:13:36.100 --> 00:13:40.020
It really benefits from
the real sophisticated

00:13:40.020 --> 00:13:43.000
anti-aliasing approach we take.

00:13:43.020 --> 00:13:47.500
And a normal hinting renderer
would flatten that thing away

00:13:47.520 --> 00:13:49.760
the first time it's sawed.

00:13:49.780 --> 00:13:56.670
So it's great to be able to preserve some
of the subtle details of the typefaces.

00:13:56.780 --> 00:13:59.770
And then here are the Japanese fonts.

00:13:59.770 --> 00:14:02.780
As I said, I hope I'm not offending
anyone with this.

00:14:02.780 --> 00:14:05.010
I don't speak Japanese,
but I'm told it says

00:14:05.020 --> 00:14:05.710
this is a beautiful font.

00:14:05.810 --> 00:14:09.780
I trust them on that.

00:14:09.780 --> 00:14:13.380
But you can see we have some
of the modern faces and the

00:14:13.500 --> 00:14:17.090
more classic serif faces,
too, at the bottom.

00:14:18.100 --> 00:18:35.600
[Transcript missing]

00:18:36.030 --> 00:18:37.870
So that's about it for Quartz.

00:18:38.040 --> 00:18:41.270
Let me briefly show you
some slides on OpenGL.

00:18:41.390 --> 00:18:42.400
Some of these may look familiar.

00:18:42.400 --> 00:18:46.400
So OpenGL is industry
standard 3D technology.

00:18:46.460 --> 00:18:50.500
It's been around for, I don't know,
15 years or so.

00:18:50.500 --> 00:18:54.990
It started life as the GL graphics
library on SGI machines.

00:18:54.990 --> 00:18:57.680
I think early 90s became a standard.

00:18:57.680 --> 00:19:00.740
It's been through about two
or three revisions as OpenGL.

00:19:00.740 --> 00:19:03.200
And it's very much a vibrant standard.

00:19:03.200 --> 00:19:07.440
There's all kinds of extensions
being proposed very frequently.

00:19:07.440 --> 00:19:09.770
It's got a very clean model
of how to add functionality,

00:19:09.780 --> 00:19:14.040
how to probe for functionality,
to be able to take advantage

00:19:14.040 --> 00:19:16.460
of specific card features.

00:19:16.460 --> 00:19:19.660
And it's a real nice programming model.

00:19:19.660 --> 00:19:23.720
And a lot of our game developers
have used it to develop

00:19:23.770 --> 00:19:26.070
some great games over time.

00:19:26.070 --> 00:19:28.660
It's a picture from Star Trek.

00:19:28.680 --> 00:19:34.120
And if you go down... On the show floor,
you see the games all running on OS X.

00:19:34.120 --> 00:19:36.140
It's really pretty amazing.

00:19:36.140 --> 00:19:36.500
I don't know.

00:19:36.500 --> 00:19:40.210
Its calculation is probably off,
but not by an order of magnitude.

00:19:40.270 --> 00:19:44.720
But I figured there's got to be something
about like 100 gigaflops on that table of

00:19:44.730 --> 00:19:48.150
Quake games that people are playing at.

00:19:48.160 --> 00:19:50.940
I don't know if anyone has
a better number shouted out.

00:19:50.950 --> 00:19:54.310
But you figure you've got
GeForce CPUs in there,

00:19:54.310 --> 00:19:58.960
and you've got NV11,
NVIDIA's GeForce 2 cards in there.

00:19:58.960 --> 00:20:02.320
I think it's... I think
it's... It's a pretty stunning

00:20:02.320 --> 00:20:04.640
supercomputer display there.

00:20:04.940 --> 00:20:08.330
But OpenGL is really not just for games.

00:20:08.460 --> 00:20:11.120
Again,
you may have seen the slide before.

00:20:11.200 --> 00:20:16.380
It's also for a lot of applications
that kind of grew up around GL and

00:20:16.380 --> 00:20:20.990
UNIX and environments like that,
which are prevalent in

00:20:20.990 --> 00:20:25.350
the high-end modeling,
animation, scientific engineering world.

00:20:25.720 --> 00:20:29.150
Maya is a great example
of such an application.

00:20:29.220 --> 00:20:30.330
And we're really excited.

00:20:30.700 --> 00:20:34.900
And working very closely with
the Maya guys to get their port

00:20:34.990 --> 00:20:37.200
for OS X working really well.

00:20:37.200 --> 00:20:39.600
But there's a whole stream
of other developers who are

00:20:39.600 --> 00:20:42.710
kind of in this camp as well,
and hopefully some of you out there,

00:20:42.710 --> 00:20:47.460
who come from this heritage of
high-end workstation graphics

00:20:47.460 --> 00:20:51.820
with either custom vertical
solutions or even broad solutions.

00:20:51.850 --> 00:20:55.820
So we're really excited to be working
with any of you developers out there.

00:20:55.820 --> 00:20:59.220
We have a great OpenGL team
and great developer support.

00:20:59.280 --> 00:21:00.580
So get involved with Apple.

00:21:00.580 --> 00:21:04.600
If you or you know someone who's
got a great solution to bring

00:21:04.600 --> 00:21:09.600
to the platform now that we have
UNIX and OpenGL all working together.

00:21:12.000 --> 00:21:15.800
The architecture on OS X for
graphics acceleration,

00:21:15.800 --> 00:21:20.650
we have spent a lot of time
making sure that the graphics

00:21:20.790 --> 00:21:25.200
acceleration architecture on
X aggressively virtualizes the

00:21:25.200 --> 00:21:28.270
resources of the graphics cards.

00:21:28.300 --> 00:21:32.320
So if you're playing a full screen game,
for example,

00:21:32.400 --> 00:21:36.200
essentially every byte of video
memory can be owned by that game.

00:21:36.200 --> 00:21:39.080
When you're running in
a windowed environment,

00:21:39.080 --> 00:21:43.700
the video memory is obviously shared
and arbitrated among the applications,

00:21:43.700 --> 00:21:49.000
but none of them have to explicitly get
in the game of managing their memory.

00:21:49.000 --> 00:21:53.000
So really it's almost sort of a
VM system that works in the video memory.

00:21:53.000 --> 00:21:55.790
Of course, there aren't page tables,
so the analogy is not

00:21:55.790 --> 00:21:58.640
completely accurate,
but it really,

00:21:58.640 --> 00:22:04.600
we did take our role as an OS vendor
very seriously when we looked at how

00:22:04.600 --> 00:22:10.060
to support 3D graphics acceleration
and it's really a nice architecture.

00:22:10.100 --> 00:22:16.700
So we're really happy to have great
drivers for both NVIDIA and ATI cards

00:22:16.700 --> 00:22:20.960
out there and work with you on
any additional cards if you're

00:22:20.960 --> 00:22:23.540
at one of the other graphics houses.

00:22:26.300 --> 00:22:27.360
QuickTime.

00:22:27.460 --> 00:22:29.400
Just a few slides on QuickTime.

00:22:29.420 --> 00:22:31.320
Mac OS X comes with QuickTime 5.

00:22:31.920 --> 00:22:35.660
There's a few new features in
QuickTime that are important.

00:22:35.660 --> 00:22:39.000
Actually, first,
let me back up and just mention

00:22:39.000 --> 00:22:42.950
on this slide my comment
about QuickTime's longevity.

00:22:42.960 --> 00:22:45.910
So, QuickTime has also been
around for a long time,

00:22:45.910 --> 00:22:47.680
you know, early 90s or so.

00:22:47.680 --> 00:22:51.880
And the amazing thing about
QuickTime is that it has really

00:22:51.880 --> 00:22:53.860
survived the test of time.

00:22:53.860 --> 00:22:56.890
I mean, the original architecture,
if you think back to early 90s,

00:22:56.990 --> 00:23:00.110
based on the component manager
and pluggable codecs and

00:23:00.110 --> 00:23:03.070
dynamic codec chain building,
all that stuff was really pretty

00:23:03.490 --> 00:23:07.750
groundbreaking and I think has paid off
over the history of QuickTime because

00:23:07.750 --> 00:23:10.420
the basic architecture is still the same.

00:23:10.420 --> 00:23:12.840
The object orientation,
even though that was, you know,

00:23:12.840 --> 00:23:12.940
pretty basic, but it's still the same.

00:23:12.970 --> 00:23:17.240
You know, pre, you know, pre, you know,
heavy duty use of C++ and object

00:23:17.380 --> 00:23:21.460
oriented and the component manager
was what they made it go with.

00:23:21.530 --> 00:23:25.070
But it's really pretty amazing
that there's been such innovation

00:23:25.070 --> 00:23:28.210
in video codec technology,
video streaming technology,

00:23:28.450 --> 00:23:30.840
and the basic architecture
is still sound.

00:23:30.840 --> 00:23:34.130
And so, you know,
I think it's a great thing to point out

00:23:34.350 --> 00:23:38.850
about QuickTime and I don't always get
an opportunity to talk about QuickTime,

00:23:38.850 --> 00:23:43.290
so I thought I would give that plug and
thanks to the team for... for caring

00:23:43.390 --> 00:23:44.980
for that architecture over the years.

00:23:45.020 --> 00:23:49.960
So the stuff that's in QuickTime 5
that's built in that's new,

00:23:49.960 --> 00:23:54.940
there's a new user interface,
there's a Flash 4 codec, a Cubic VR,

00:23:54.940 --> 00:23:58.860
which is actually pretty exciting
because the Cubic VR not only

00:23:58.980 --> 00:24:02.680
lets you look up and down,
but it uses the six faces of

00:24:02.680 --> 00:24:06.300
the cube and it's very amenable
to hardware acceleration.

00:24:06.360 --> 00:24:09.660
And so you can,
a lot of the cards now are starting to

00:24:09.660 --> 00:24:12.520
implement Cubic environment mapping.

00:24:12.990 --> 00:24:15.640
So I think there are some very
interesting opportunities with Cubic

00:24:15.640 --> 00:24:17.180
VR and OpenGL working together.

00:24:17.180 --> 00:24:22.500
DLS Music Synthesizer,
you saw the demo of that earlier,

00:24:22.500 --> 00:24:27.290
MPEG-1 streaming, the new DV codec,
which is much higher performance

00:24:27.290 --> 00:24:31.320
and higher fidelity in terms
of getting DV to the screen,

00:24:31.320 --> 00:24:34.280
very important for applications
like iMovie and editing apps

00:24:34.280 --> 00:24:35.840
that you might be working on.

00:24:35.840 --> 00:24:41.070
It also leverages the
sound architecture on OS X,

00:24:41.070 --> 00:24:46.650
which... takes advantage of some
of the real low latency we're able

00:24:46.650 --> 00:24:53.810
to get inside the kernel in OS X,
and additional tricks to really get the

00:24:53.810 --> 00:24:59.300
sound performance pretty amazingly low
latency and high throughput on OS X.

00:24:59.300 --> 00:25:02.180
I think games will take a lot
of advantage of that as well.

00:25:07.200 --> 00:29:19.100
[Transcript missing]

00:29:19.500 --> 00:29:23.200
So what we call this piece of
technology is the Quartz compositor.

00:29:23.200 --> 00:29:24.560
It's really the windowing system.

00:29:24.560 --> 00:29:26.900
Last year I think we called it
the lightweight windowing system.

00:29:26.900 --> 00:29:29.390
But it's a client-server architecture.

00:29:29.390 --> 00:29:34.730
It's responsible for presenting,
for all the final presentation blitz

00:29:34.750 --> 00:29:38.900
that happen in the system in order
to mix the content onto the display.

00:29:38.900 --> 00:29:42.510
And it works with the
acceleration layers of OpenGL,

00:29:42.510 --> 00:29:47.290
QuickTime, and everything working
together to share the screen.

00:29:48.340 --> 00:29:51.300
Some of the features of
the Quartz compositor:

00:29:51.300 --> 00:29:52.930
Full double buffering.

00:29:52.940 --> 00:29:56.940
Double buffering is important not only
from the standpoint of not needing to

00:29:56.940 --> 00:30:01.530
wake up an app to redraw the display,
but also to have access to the

00:30:01.530 --> 00:30:05.300
rendered content of any window
on the system at any time.

00:30:05.300 --> 00:30:09.300
So we can fade it in, fade it out,
put a drop shadow over it, whatever.

00:30:09.340 --> 00:30:13.500
Per pixel alpha channel:
important to have per pixel

00:30:13.710 --> 00:30:17.300
control of the opacity of a window.

00:30:17.300 --> 00:30:21.000
So that, for example,
in the menus the text is actually opaque,

00:30:21.000 --> 00:30:23.300
but the rest of the menu is transparent.

00:30:23.330 --> 00:30:26.360
And obviously Quartz 2D
plays a role in that too,

00:30:26.360 --> 00:30:28.970
because you need a rendering
system that can understand how

00:30:28.970 --> 00:30:37.300
to draw destination alpha into
the back buffer for the window.

00:30:37.300 --> 00:30:40.650
When you draw with Quick Draw,
you can only get opaque pixels.

00:30:41.370 --> 00:30:46.860
So, for another feature that we have is
an overall per-window fade control,

00:30:46.860 --> 00:30:49.380
so that's one big opacity
knob on the whole window,

00:30:49.380 --> 00:30:51.590
so that's used for fading in, fading out.

00:30:51.630 --> 00:30:55.100
We have some per-window
transform and warp capabilities,

00:30:55.110 --> 00:30:58.650
sheets, genie, dock animation,
those kind of things.

00:30:58.660 --> 00:31:01.420
And the important thing is
that this really integrates

00:31:01.420 --> 00:31:04.160
across whether you're doing 2D,
3D, video.

00:31:04.160 --> 00:31:06.620
Certain things are
currently assumed opaque,

00:31:06.620 --> 00:31:08.570
like an accelerated 3D surface.

00:31:08.570 --> 00:31:10.960
Someday we'll get those transparent too.

00:31:11.480 --> 00:31:14.800
But by and large,
the model holds together.

00:31:14.800 --> 00:31:17.270
If the user picks up something
that's transparent and

00:31:17.320 --> 00:31:20.330
drags it across the screen,
the illusion is not broken.

00:31:20.330 --> 00:31:24.530
He can just slide it over every
piece of content on the display.

00:31:24.640 --> 00:31:29.200
So I think with that,
I'm going to switch over

00:31:29.200 --> 00:31:34.290
to the demo machine here.

00:31:44.460 --> 00:31:46.390
Can I get them on one, please?

00:31:46.400 --> 00:31:48.940
Yeah.

00:31:48.950 --> 00:31:50.400
Great.

00:31:50.400 --> 00:31:55.700
So let me just bring up a very
basic OpenGL application here

00:31:55.700 --> 00:31:57.330
to get some pixels moving.

00:31:57.400 --> 00:31:59.260
This is SkyFly,
which if you've played with

00:31:59.260 --> 00:32:01.860
the developer CD at all,
this is on your CD as a

00:32:02.120 --> 00:32:05.390
small application in OpenGL.

00:32:05.400 --> 00:32:08.400
It's a simple terrain model
with a flying airplane.

00:32:08.400 --> 00:32:11.400
I changed the code a little
bit to run in a window.

00:32:11.400 --> 00:32:14.390
It runs full screen as
it comes out of the box,

00:32:14.480 --> 00:32:16.400
but it's pretty straightforward.

00:32:16.400 --> 00:32:19.400
So you can see the window
look of Aqua is very clean.

00:32:19.400 --> 00:32:21.400
We've got drop shadows.

00:32:21.400 --> 00:32:23.400
The window content goes all the
way to the edge of the windows.

00:32:23.400 --> 00:32:26.290
That was really important to the
look they were after with Aqua.

00:32:26.400 --> 00:32:30.390
And so to set off the windows,
all we really have is the drop shadow.

00:32:30.400 --> 00:32:32.700
And so you can see what's
happening is the drop shadow is

00:32:32.870 --> 00:32:34.400
actually dynamically compositing.

00:32:34.400 --> 00:32:36.400
I mean,
it's not a very in-your-face effect,

00:32:36.400 --> 00:32:38.400
but it carries the
illusion of the window.

00:32:38.400 --> 00:32:41.400
It carries the illusion that even with
animated accelerated content underneath,

00:32:41.400 --> 00:32:45.400
we can still set off that finder
window without having to just

00:32:45.400 --> 00:32:49.730
chop the pixels with a hard
handoff between the accelerated

00:32:49.730 --> 00:32:53.400
content and the finder window.

00:32:54.830 --> 00:33:01.800
Again, down in the dock,
you can see if I drag...

00:33:02.280 --> 00:33:05.040
The OpenGL window down
underneath the dock.

00:33:05.160 --> 00:33:09.790
You can see the compositor kicking in
to do all the blending on the dock.

00:33:09.830 --> 00:33:13.790
You can see that all the icons have
a high degree of anti-aliasing,

00:33:13.910 --> 00:33:17.300
very high production value, if you will,
graphics.

00:33:17.300 --> 00:33:20.630
So to really carry that anti-aliasing
above arbitrary content,

00:33:20.710 --> 00:33:23.350
it's essential to have some
kind of compositing going

00:33:23.350 --> 00:33:24.870
on in the windowing system.

00:33:24.870 --> 00:33:27.280
Otherwise,
you're just going to hard clip it,

00:33:27.280 --> 00:33:29.300
and it's not going to look right.

00:33:29.360 --> 00:33:32.580
So my opinion is as soon as you go to
anti-aliased icons that are going to

00:33:32.580 --> 00:33:35.600
be piece parts of the user experience,
you've got to do a composited

00:33:35.750 --> 00:33:38.640
windowing system or it's just
not going to hold together.

00:33:41.440 --> 00:33:46.820
Let me show you a little more in detail
with that with this Pixie application,

00:33:46.820 --> 00:33:49.900
which is on the developer CD.

00:33:49.960 --> 00:33:56.780
And I just have to configure it
here to refresh continuously.

00:33:58.870 --> 00:33:59.750
This is a nice little tool.

00:33:59.820 --> 00:34:02.900
You can use it for, you know,
sniffing at your pixels

00:34:02.900 --> 00:34:04.590
and seeing what's going on.

00:34:04.740 --> 00:34:07.560
But if I hold it down here,

00:34:09.450 --> 00:34:11.900
You can see what's going on
in the display is actually,

00:34:11.900 --> 00:34:14.650
you know, there's a lot of, you know,
like half-colored pixels in

00:34:14.650 --> 00:34:19.260
order to get the side of the
Microsoft icon there working well.

00:34:19.260 --> 00:34:23.280
And that's all getting composited on the
fly as the OpenGL application is playing.

00:34:23.280 --> 00:34:26.250
And, you know,
obviously it's a lot of work for

00:34:26.250 --> 00:34:30.500
us to do that and design a system
such that that could be possible.

00:34:30.500 --> 00:34:33.520
But it's really important, you know,
to not break the illusion.

00:34:34.070 --> 00:34:37.500
If you're going to present the user
with really nice anti-aliased icons,

00:34:37.500 --> 00:34:41.820
you really don't want them falling
apart when they go over 3D content.

00:34:41.860 --> 00:34:45.590
So, again, just another minor example,
if I go up there to the

00:34:45.590 --> 00:34:48.140
corner of the window,
you can see the corners of the

00:34:48.180 --> 00:34:51.740
window have little anti-aliasing
to make them look real crisp.

00:34:51.780 --> 00:34:55.310
And you can see how the
accelerated content is

00:34:55.310 --> 00:34:58.100
blitting through there as well.

00:35:02.600 --> 00:35:09.900
[Transcript missing]

00:35:10.860 --> 00:35:13.570
I'm ad-libbing a little bit
on my demos because some of

00:35:13.570 --> 00:35:14.800
those were shown earlier too.

00:35:14.800 --> 00:35:18.560
So here's a piece of PDF clip art.

00:35:18.560 --> 00:35:20.800
This is actually just an
EPS file that we distilled.

00:35:20.800 --> 00:35:24.320
And I just drag it into
a text editor here.

00:35:24.460 --> 00:35:33.260
And I can add a text label to that,
make the font a little bigger.

00:35:44.480 --> 00:35:49.490
So again,
for the purposes of drag and drop,

00:35:49.670 --> 00:35:52.600
what we do is we do
live dragging of text,

00:35:52.680 --> 00:35:53.680
which includes graphics.

00:35:53.680 --> 00:35:56.680
So if a user wants to move
this to another application,

00:35:56.720 --> 00:35:59.360
he's going to move it
over that 3D content,

00:35:59.360 --> 00:36:02.580
and you really want everything
to just continue to work.

00:36:02.680 --> 00:36:07.920
And you can see how the app is
still animating under there.

00:36:07.920 --> 00:36:11.720
We lose a little bit of frame rate,
but the illusion holds together.

00:36:12.240 --> 00:36:16.950
And the user just thinks he's dragging
this text clipping over a piece

00:36:16.950 --> 00:36:18.760
of acetate over the whole screen.

00:36:18.760 --> 00:36:21.800
And so it's important,
and it's kind of a theme, I guess,

00:36:21.800 --> 00:36:24.980
from working at Apple,
is that you just want things

00:36:24.980 --> 00:36:26.810
to appear as they should.

00:36:26.820 --> 00:36:30.300
And it doesn't matter technically
how difficult they might be,

00:36:30.300 --> 00:36:37.670
but you really want to sort of delight
the user with the interactivity and

00:36:37.670 --> 00:36:39.360
the production values of the system.

00:36:43.150 --> 00:36:48.000
So, that's enough of a compositor.

00:36:48.000 --> 00:36:52.210
Let me show you,
actually while I have OpenGL going here,

00:36:52.210 --> 00:36:54.220
this one does have a little bit of audio.

00:36:54.220 --> 00:36:59.100
This is kind of a teaser for a
session that will be coming up,

00:36:59.100 --> 00:37:00.300
I think it might be
tomorrow or Wednesday,

00:37:00.300 --> 00:37:05.020
but we'll see in a second,
that shows how to combine some

00:37:05.020 --> 00:37:08.860
of these technologies together.

00:37:08.860 --> 00:37:15.380
So, for example, this is actually using
OpenGL and QuickTime together

00:37:15.380 --> 00:37:19.180
to put a movie on a surface,
and I think Jeff's getting

00:37:19.180 --> 00:37:22.140
some outrageous frame rate,
like 350 frames a second,

00:37:22.140 --> 00:37:24.320
but there's probably not
that many frames of video,

00:37:24.320 --> 00:37:29.160
but it's one of the Apple ads
that he's got there.

00:37:29.160 --> 00:37:31.920
And you can see,
not only are each of these building

00:37:31.920 --> 00:37:36.060
blocks that we have pretty compelling,
but you start to put them together,

00:37:36.060 --> 00:37:42.860
and I think there's really... Some pretty
interesting opportunities here.

00:37:42.860 --> 00:37:45.560
I'd like to start off with Liz,
Polyester Bride.

00:37:45.560 --> 00:37:47.300
Liz Higgins Sure, for you.

00:37:48.040 --> 00:37:54.770
So, I'll give you a pointer to that one,
when I talk about sessions later.

00:37:54.970 --> 00:37:59.240
Let me bring up Internet Explorer here
and hit on a few things

00:37:59.300 --> 00:38:00.600
about the printing pathway.

00:38:00.600 --> 00:38:06.250
So I'm basically going to do the first
half of that demo where I showed you

00:38:06.260 --> 00:38:10.360
the printing pathway recording to PDF.

00:38:10.360 --> 00:38:15.820
So Internet Explorer is a
Carbon application drawing

00:38:15.820 --> 00:38:19.040
its content with QuickDraw.

00:38:19.040 --> 00:38:20.360
Here's news.com.

00:38:20.360 --> 00:38:22.700
Let's see what's going on today.

00:38:25.690 --> 00:38:26.540
Bring up the print panel.

00:38:26.540 --> 00:38:30.940
Now this is a system-wide print panel,
so that's another advantage from OS X,

00:38:30.940 --> 00:38:34.780
another difference from OS 9,
where the print UI, you didn't know what

00:38:34.780 --> 00:38:36.000
you were going to get.

00:38:36.000 --> 00:38:38.380
You made the call to
put up the print dialog,

00:38:38.380 --> 00:38:41.000
and it was kind of up to
the driver from there.

00:38:41.660 --> 00:38:44.210
We have standard print
dialogs that we bring up.

00:38:44.210 --> 00:38:47.830
The drivers plug into them
and can add capabilities,

00:38:47.830 --> 00:38:52.170
but it's no longer kind of a guessing
game in terms of what applications

00:38:52.200 --> 00:38:54.160
are going to do with the print record.

00:38:54.160 --> 00:38:58.160
We have got a nice property list where we
store all the information about the job.

00:38:58.160 --> 00:39:00.370
So hopefully that will
make your lives easier,

00:39:00.370 --> 00:39:04.060
particularly when QAing against a
whole bunch of different print drivers.

00:39:05.600 --> 00:39:08.120
But I can hit preview here and that's
going to basically run the first

00:39:08.200 --> 00:39:15.090
half of the printing process and
bring up in the preview application

00:39:15.090 --> 00:39:18.450
here a PDF rendering of the page.

00:39:18.480 --> 00:39:23.530
And it's basically the content
that the application drew through

00:39:23.910 --> 00:39:29.000
QuickDraw calling Quartz 2D and
then saved out as a PDF file.

00:39:29.530 --> 00:39:32.970
And if I were to actually print this,
then this exact PDF file would go

00:39:32.970 --> 00:39:37.460
through the back end and get converted
to PostScript or Raster Bits or whatever.

00:39:37.460 --> 00:39:41.570
And just to show you, it's real PDF,
so let me try dragging

00:39:41.660 --> 00:39:43.460
it onto Acrobat here.

00:39:43.460 --> 00:39:48.760
And there's Acrobat
showing the same file.

00:39:49.860 --> 00:39:56.580
So anything we create can obviously be
read by Acrobat because it's just PDF.

00:39:58.850 --> 00:40:00.120
A little bit more on the 2D.

00:40:00.190 --> 00:40:06.850
Here's a text edit document that has
a bunch of different fonts in it.

00:40:06.920 --> 00:40:08.760
These are the fonts that we ship.

00:40:08.760 --> 00:40:12.680
These are all interactive.

00:40:13.030 --> 00:40:16.150
Just scroll through some of
these so you can look at them.

00:40:16.170 --> 00:40:19.860
There's Zepp Fino, Gil Sands,
I don't think I had that on the slide,

00:40:19.870 --> 00:40:22.500
Helvetica Noy,
a bunch of faces of Helvetica.

00:40:22.500 --> 00:40:27.000
If you can't find one in there you need,
I don't know.

00:40:27.000 --> 00:40:31.040
Optima, let me show you.

00:40:32.730 --> 00:40:35.240
Let me show you what I was talking
about with that B if I go on,

00:40:35.250 --> 00:40:36.700
crank on the slider here.

00:40:36.700 --> 00:40:40.670
Just to scale up that B,
you can see how those subtle curves

00:40:40.720 --> 00:40:46.010
are in there in the font design,
and because of the anti-aliasing,

00:40:46.010 --> 00:40:49.850
we can carry those features
down to very low point size.

00:40:55.500 --> 00:41:00.520
Again, the Japanese fonts, let me pick,
oops, didn't mean to launch QuickTime.

00:41:04.100 --> 00:41:10.900
[Transcript missing]

00:41:12.620 --> 00:41:16.240
I could type in something even bigger.

00:41:16.240 --> 00:41:18.720
But, you know, no resolution limit,
you know,

00:41:18.830 --> 00:41:20.600
pretty dynamic interactive scaling.

00:41:20.600 --> 00:41:27.040
So hopefully this will be a great thing
for not only Japanese users but everyone.

00:41:27.180 --> 00:41:29.780
And, you know,
as was mentioned in the other sessions,

00:41:29.790 --> 00:41:32.470
these fonts exist on every system,
every user system.

00:41:32.560 --> 00:41:37.340
So, you know,
it might be likely if you're writing,

00:41:37.340 --> 00:41:40.260
say, for example,
a mail application and someone

00:41:40.260 --> 00:41:43.310
gets a message in Japanese,
they may actually be showing

00:41:43.310 --> 00:41:46.020
Japanese content in your application.

00:41:46.040 --> 00:41:50.060
So I think you also need to be
aware of those possibilities that

00:41:50.190 --> 00:41:54.410
someone may be buying your app not
in that particular market but may

00:41:54.410 --> 00:41:57.040
be dealing with language content.

00:41:57.180 --> 00:42:00.990
From other places and whether
that means linguistically,

00:42:00.990 --> 00:42:05.280
obviously you may not have all the
dictionaries and stuff necessary

00:42:05.390 --> 00:42:09.280
to edit in that content but at
least to display and manipulate

00:42:09.280 --> 00:42:10.670
letter forms and things like that.

00:42:10.680 --> 00:42:14.370
I think that's a good
opportunity too for,

00:42:14.430 --> 00:42:18.000
that help us share content worldwide.

00:42:21.400 --> 00:42:25.600
Actually, before I kill that,
I wanted to show you

00:42:25.600 --> 00:42:28.110
with Zapfino up here.

00:42:30.400 --> 00:44:40.600
[Transcript missing]

00:44:44.100 --> 00:47:14.000
[Transcript missing]

00:47:14.220 --> 00:47:18.080
So anyway, the usual thing to do,
of course, there's automatic tasks you

00:47:18.080 --> 00:47:21.080
can set up to download images.

00:47:21.080 --> 00:47:23.560
You can have them run in AppleScript,
which you saw the demo of.

00:47:23.620 --> 00:47:26.120
You can also have,
the user can configure it to

00:47:26.120 --> 00:47:29.800
run any application which can
handle a multiple open of images.

00:47:30.600 --> 00:47:33.490
So, for example,
even if you're a word processor,

00:47:33.490 --> 00:47:36.970
for example,
if you can accept an Apple event

00:47:36.970 --> 00:47:43.060
to open a collection of images,
then the user could set up Image Capture

00:47:43.060 --> 00:47:46.090
to call your application and maybe
you make a new document with those

00:47:46.200 --> 00:47:48.080
images laid out or something like that.

00:47:48.120 --> 00:47:51.790
So another thing to keep in mind,
very simple way that you can take

00:47:52.190 --> 00:47:54.360
advantage of Image Capture in your code.

00:47:54.360 --> 00:47:57.370
Now, there's going to be a whole session
on Image Capture where they'll go into

00:47:57.370 --> 00:48:00.530
the API if you want to take a picture,
for example, or do camera-specific.

00:48:00.560 --> 00:48:03.200
But there's a lot of opportunity here.

00:48:03.320 --> 00:48:07.980
So let me go ahead and download
my Hawaii pictures here.

00:48:09.700 --> 00:48:15.200
And by default, everything goes into the
pictures directory of the user,

00:48:15.200 --> 00:48:17.930
but if you noticed on
the Image Capture panel,

00:48:17.930 --> 00:48:21.020
there was a place where
I could set a different folder,

00:48:21.020 --> 00:48:21.800
for example.

00:48:21.800 --> 00:48:26.860
So those are my small selection
of my Hawaii pictures.

00:48:26.860 --> 00:48:30.910
I only golfed one day,
but I spent a lot of it in the sand trap.

00:48:33.970 --> 00:48:38.050
And then, of course,
all of our favorite application,

00:48:38.050 --> 00:48:41.270
which is the slideshow,
which I'm going to talk about a

00:48:41.270 --> 00:48:44.750
little bit while these images show up.

00:48:44.800 --> 00:48:48.520
So what's going on here?

00:48:48.520 --> 00:48:49.840
There's my lovely wife, Nancy.

00:48:49.840 --> 00:48:50.440
Hi, Nancy.

00:48:53.720 --> 00:48:56.890
When we started looking at what
was going on with graphics cards

00:48:56.940 --> 00:48:59.800
and what you could do with OpenGL,

00:49:00.180 --> 00:49:03.190
This is actually,
looks perhaps a lot easier than it is.

00:49:03.230 --> 00:49:08.300
I mean, what's going on here is there's
about 6 megabytes worth of textures

00:49:08.300 --> 00:49:09.780
that are getting crossfaded.

00:49:09.780 --> 00:49:11.520
There's a front buffer and a back buffer.

00:49:11.520 --> 00:49:19.180
And probably about 12 to 16 megabytes
worth of video memory to do this well.

00:49:19.180 --> 00:49:24.020
We use less memory and downsampled
textures if we're on a lower config.

00:49:25.830 --> 00:49:29.290
Probably about 2 gigabytes per
second of video memory bandwidth are

00:49:29.290 --> 00:49:33.370
necessary to draw this much textures
with all this blending going on.

00:49:33.400 --> 00:49:36.430
So, and of course there's all
other sorts of complications.

00:49:36.430 --> 00:49:39.600
If you program with OpenGL,
there's a power of two texture limit,

00:49:39.620 --> 00:49:42.060
so the textures have to
be diced or rescaled.

00:49:42.060 --> 00:49:44.780
So there's a lot of, you know,
kind of trickiness to kind

00:49:44.810 --> 00:49:45.990
of getting this going.

00:49:46.160 --> 00:49:49.520
But the end result is, you know,
something people would expect.

00:49:49.520 --> 00:49:51.700
I mean, you know,
my parents would love to

00:49:51.700 --> 00:49:55.030
see these pictures of,
you know, us on our Hawaii vacation.

00:49:55.360 --> 00:49:57.350
And this would be a great
way to show it to them.

00:49:57.350 --> 00:50:00.320
So again, this is an example of,
you know,

00:50:00.380 --> 00:50:03.270
kind of OpenGL not being just for games.

00:50:03.270 --> 00:50:06.830
Obviously it's great for games,
but the innovation that's being driven so

00:50:06.920 --> 00:50:10.750
hard there in terms of performance lets
you do some of these things in real time.

00:50:10.760 --> 00:50:14.300
I mean, this is not at all a
scripted slideshow at all.

00:50:14.300 --> 00:50:16.480
It's just reading the raw JPEGs.

00:50:16.500 --> 00:50:19.040
It's picking a random place to zoom in.

00:50:19.040 --> 00:50:21.910
It alternates between
zoom in and zoom out.

00:50:21.910 --> 00:50:23.960
And it's all very dynamic.

00:50:25.360 --> 00:50:26.650
In fact, it's great.

00:50:26.770 --> 00:50:28.060
I run my PowerBook.

00:50:28.060 --> 00:50:31.550
You can actually boot a
PowerBook with the lid closed.

00:50:31.550 --> 00:50:32.750
I don't know if you know about this.

00:50:32.750 --> 00:50:34.760
If you have an external keyboard,
you can boot it up.

00:50:34.760 --> 00:50:38.560
And that way all the video memory on the
PowerBook will be used on the TV jack.

00:50:38.560 --> 00:50:43.440
And you can run the screensaver on
your TV and put on some music and

00:50:43.440 --> 00:50:46.590
entertain friends for days and days.

00:50:46.590 --> 00:50:46.590
So...

00:50:48.370 --> 00:50:48.800
Pretty cool.

00:50:48.800 --> 00:50:51.100
But I wanted to give you some
insight into the technology

00:50:51.100 --> 00:50:53.110
that's actually behind that.

00:50:53.180 --> 00:50:56.300
And I think we're at a point now
in the evolution of graphic systems

00:50:56.300 --> 00:51:01.710
where there is a lot of technology
that's untapped that we can try to tie

00:51:01.710 --> 00:51:05.850
together some of these things that are
traditionally offline batch processes

00:51:05.850 --> 00:51:07.940
and do them in real time for the user.

00:51:07.940 --> 00:51:10.910
So that's...

00:51:12.910 --> 00:51:17.950
Let me go back to the slides.

00:51:34.570 --> 00:51:42.740
Okay, so I've gone through all of the
technology here that we've put for you

00:51:42.740 --> 00:51:48.300
in Mac OS X from the API levels with 2D,
3D, QuickTime for video,

00:51:48.300 --> 00:51:50.580
tying it all together
with the compositor,

00:51:50.700 --> 00:51:55.360
and kind of putting back up
kind of the textbooks there.

00:51:56.560 --> 00:52:00.340
Because an important point for us is
we really are trying to adopt best

00:52:00.340 --> 00:52:05.300
practices in the industry and look at
what has worked before and deploy that

00:52:05.630 --> 00:52:11.290
in an integrated fashion for all of
you to develop your applications on.

00:52:11.490 --> 00:52:14.660
So that's really the extent of my slides.

00:52:14.950 --> 00:52:20.740
What I've got for you next is a
bunch of pictures of the roadmap CD.

00:52:21.470 --> 00:52:22.500
Hopefully the colors are the same.

00:52:22.500 --> 00:52:23.400
I took them from the web.

00:52:23.410 --> 00:52:27.510
And I'm going to kind of give
you my picks of sessions to

00:52:27.510 --> 00:52:29.740
go to throughout the week.

00:52:29.780 --> 00:52:32.940
So if you want to
follow along and circle,

00:52:32.940 --> 00:52:33.790
you can.

00:52:34.240 --> 00:52:40.930
Tomorrow, first thing in Hall J,
there's a session on PDF, Quartz,

00:52:41.060 --> 00:52:42.460
and Mac OS X.

00:52:42.460 --> 00:52:44.860
This is kind of an introductory session.

00:52:44.860 --> 00:52:49.870
If you're not really familiar with
PDF and how is PDF different than

00:52:49.870 --> 00:52:56.520
Acrobat and how we use it in OS X as a
graphics file format versus how tools

00:52:56.530 --> 00:53:01.920
like Acrobat add much more data to it
to become more of a document format,

00:53:01.920 --> 00:53:04.080
you should go to that session.

00:53:04.100 --> 00:53:11.700
Then after that, in Hall A1,
which is this room,

00:53:11.700 --> 00:53:15.530
there's going to be a session
called 2D Graphics Using Quartz,

00:53:15.620 --> 00:53:18.860
which is going to be
down with the Quartz API,

00:53:18.860 --> 00:53:24.640
looking at actual sample code and
how the Quartz 2D system is put

00:53:24.650 --> 00:53:30.610
together in particular and what
the function calls look like.

00:53:31.250 --> 00:53:34.850
Tomorrow afternoon, right after lunch,
there's going to be a

00:53:34.960 --> 00:53:38.100
graphics for games session,
which is going to talk about

00:53:38.100 --> 00:53:41.810
primarily how to use OpenGL for games.

00:53:42.140 --> 00:53:45.350
OpenGL, we think, is a great solution
for not just 3D games,

00:53:45.350 --> 00:53:47.190
but 2D sprite engines as well.

00:53:47.200 --> 00:53:50.050
In fact, I'd be really interested in
hearing if anyone has a sprite

00:53:50.050 --> 00:53:54.320
engine project they're working on,
because I think it would be really

00:53:54.330 --> 00:54:00.400
a great way to bring that class of
apps to another level of performance.

00:54:01.060 --> 00:54:04.640
After that, there's a session on drawing
Unicode text with Atsui.

00:54:04.640 --> 00:54:08.600
So if you're a Carbon developer
and you want to really get into

00:54:08.600 --> 00:54:13.340
the layout and the Unicode to glyph
processing that happens in the system,

00:54:13.340 --> 00:54:15.160
that's the session you want to be at.

00:54:15.260 --> 00:54:22.380
You can also learn how to draw
from Carbon apps using Atsui to

00:54:22.470 --> 00:54:26.860
Quartz graphics context as well.

00:54:26.900 --> 00:54:30.600
So if you're looking to get features
from Quartz and be a Carbon app,

00:54:30.730 --> 00:54:33.430
that's one approach is to
go to that session there and

00:54:33.430 --> 00:54:35.210
learn what they are offering.

00:54:35.220 --> 00:54:39.910
Let's see, on Wednesday in the morning,
there's the QuickTime overview.

00:54:39.930 --> 00:54:42.900
Just get the State of
the Union on QuickTime.

00:54:42.900 --> 00:54:45.180
Later in the morning,
there's the QuickTime overview.

00:54:45.180 --> 00:54:46.960
Later in the morning,
there's the Image Capture framework.

00:54:46.960 --> 00:54:52.670
You'll hear about the tools they
have for if you want to write

00:54:52.670 --> 00:54:57.520
an application to acquire images
or if you're a device vendor and

00:54:57.520 --> 00:55:03.570
you want to play with the game,
how to get involved with Apple on that.

00:55:03.620 --> 00:55:06.080
That's a good session to go to.

00:55:06.080 --> 00:55:11.540
The ColorSync session at 2 o'clock
after lunch on Wednesday is going to

00:55:11.540 --> 00:55:15.160
be a combination of just ColorSync
for those of you who are using it.

00:55:15.160 --> 00:55:18.690
Those of you that are familiar with
ColorSync and also ColorSync and

00:55:18.810 --> 00:55:22.980
Quartz working together and how that
whole integration works in OS X.

00:55:22.980 --> 00:55:25.980
So that's a really interesting
session if you're interested in

00:55:26.040 --> 00:55:29.380
color and some of the integration
work that's been going on in OS X.

00:55:30.940 --> 00:55:36.670
Then in the big hall, 3:30, Wednesday,
is text on Mac OS X.

00:55:36.800 --> 00:55:41.800
This talks at a slightly higher level
about all of the text facilities on OS X,

00:55:41.800 --> 00:55:46.350
who's internally using it in
terms of layers of the stack and

00:55:46.350 --> 00:55:49.710
how Appearance Manager gets done,
what it needs to get done.

00:55:49.800 --> 00:55:53.900
A little bit on the high-level
object I mentioned earlier,

00:55:53.970 --> 00:55:57.690
the MLTE,
just kind of the whole infrastructure

00:55:57.690 --> 00:55:59.800
top to bottom for text on OS X.

00:55:59.800 --> 00:56:03.720
In the red there,
we've got the OpenGL sessions.

00:56:03.790 --> 00:56:07.870
The first session is one called
OpenGL High Performance 2D,

00:56:07.870 --> 00:56:12.800
and that talks about some things
like the QuickTime movie view

00:56:12.800 --> 00:56:13.800
or the slideshow application.

00:56:13.800 --> 00:56:17.190
Jeff Stahl has some examples of
how to actually dice up big images

00:56:17.190 --> 00:56:20.800
to put them on texture maps and
move them around and rotate them.

00:56:20.800 --> 00:56:27.920
So if you're interested in
doing some 2D graphics where

00:56:28.060 --> 00:56:31.250
you've got a lot of pixels,
you want a lot of interactivity,

00:56:31.260 --> 00:56:36.800
and you want to use OpenGL for that,
that's a really interesting talk.

00:56:36.800 --> 00:56:40.310
Later that afternoon,
there's OpenGL Geometry and Modeling,

00:56:40.310 --> 00:56:43.800
which is, again,
more the traditional 3D uses of OpenGL,

00:56:43.800 --> 00:56:45.800
an interesting session.

00:56:45.800 --> 00:56:53.030
A bunch of QuickTime tracks going on as
well in parallel Wednesday afternoon.

00:56:53.340 --> 00:56:56.940
Thursday, first thing,
we've got OpenGL Optimization,

00:56:56.940 --> 00:57:00.240
which is going to be really
kind of an expert session.

00:57:00.240 --> 00:57:04.420
If you're familiar with OpenGL and
you really want to tune the

00:57:04.530 --> 00:57:08.660
last little bit out of your app,
go to this session and learn about

00:57:08.730 --> 00:57:13.100
all the little tricks and techniques
and how to package your vertex data

00:57:13.100 --> 00:57:16.190
so it's optimally passed through
the system and things like that.

00:57:16.280 --> 00:57:21.290
And OpenGL Advanced Rendering,
also some advanced techniques

00:57:21.290 --> 00:57:22.860
for OpenGL experts.

00:57:23.300 --> 00:57:25.700
on Thursday morning.

00:57:25.970 --> 00:57:27.590
Font management on OS X.

00:57:27.680 --> 00:57:30.570
So rather than text processing,
this talks about fonts and

00:57:30.570 --> 00:57:33.990
how they live in the system,
what directories they live in,

00:57:33.990 --> 00:57:37.760
how you can enumerate all the fonts,
all the font management

00:57:37.870 --> 00:57:39.160
APIs we have on OS X.

00:57:39.160 --> 00:57:41.280
So that's a good session to go to.

00:57:41.620 --> 00:57:49.200
We've got a printing session at 3:30,
which is a great session to go to

00:57:49.370 --> 00:57:55.450
to learn about all the printing
APIs from the Carbon standpoint,

00:57:55.450 --> 00:57:58.490
as well as some of the objects
from the Cocoa standpoint.

00:57:58.560 --> 00:58:04.550
It talks about the whole architecture
in a fair amount of detail.

00:58:04.830 --> 00:58:06.800
There's also a parallel with
that session over in the

00:58:06.810 --> 00:58:10.020
Civic Center on Java graphics,
which is pretty interesting if you

00:58:10.020 --> 00:58:13.990
want to hear how the Java guys are
doing Java 2D using a combination

00:58:13.990 --> 00:58:15.700
of Quartz and some OpenGL.

00:58:15.700 --> 00:58:18.740
Actually,
very interesting session there as

00:58:18.740 --> 00:58:21.210
well if you're interested in Java.

00:58:21.770 --> 00:58:24.600
Feedback forums start
on Thursday afternoon.

00:58:24.600 --> 00:58:27.300
We've got the OpenGL feedback forum.

00:58:27.300 --> 00:58:30.700
I encourage you,
after you've gone to the sessions,

00:58:30.700 --> 00:58:32.700
to bring any feedback to that.

00:58:32.700 --> 00:58:36.530
On Friday, we have a session 9 a.m.

00:58:36.620 --> 00:58:42.080
in Hall A2 called Graphics
& Imaging Tips & Techniques,

00:58:42.080 --> 00:58:43.700
or Tips & Tricks.

00:58:43.700 --> 00:58:47.490
This is not the session you go to
learn how to put the dock on the

00:58:47.490 --> 00:58:49.690
left-hand side of your screen.

00:58:49.890 --> 00:58:58.790
These are actual programming tricks
of how to... There's some debugging,

00:58:58.800 --> 00:59:01.700
optimization, demonstration.

00:59:01.700 --> 00:59:05.700
There's also some discussion of how
the printing graph port works on OS X.

00:59:05.700 --> 00:59:09.700
A bunch of topics that none of which
were big enough for a whole session,

00:59:09.700 --> 00:59:13.830
but we kind of put them together into
a kind of bag of tricks here that we

00:59:13.830 --> 00:59:17.700
thought people should know about while we
had all of you here for the conference.

00:59:17.720 --> 00:59:19.870
Amen.

00:59:20.130 --> 00:59:22.830
Then there's the feedback
forum on graphics at 2 p.m.

00:59:22.830 --> 00:59:30.190
in J1, so come there and give us feedback
on what we should be doing,

00:59:30.190 --> 00:59:32.420
what we can do better.