WEBVTT

00:00:03.240 --> 00:00:06.600
So the Darwin Documentation
Project was launched a few months ago.

00:00:06.600 --> 00:00:08.200
When we launched Darwin a
couple of years ago,

00:00:08.200 --> 00:00:10.440
we made a major leap into open source.

00:00:10.460 --> 00:00:14.920
With the Documentation Project,
we made another major leap because

00:00:14.920 --> 00:00:19.870
we recognized that the documentation
is as important as the source code.

00:00:19.880 --> 00:00:22.700
And just like the source code,
it's got to be open.

00:00:22.700 --> 00:00:26.760
There have to be resources and tools
out there for you to contribute.

00:00:26.760 --> 00:00:29.480
And you have to see what
we at Apple are doing.

00:00:30.270 --> 00:00:34.970
So this presentation will give you the
lowdown on everything that's going on.

00:00:35.560 --> 00:00:40.350
It's going to cover what's
changing in documentation.

00:00:40.360 --> 00:00:41.790
So we've learned a lot from open source.

00:00:41.840 --> 00:00:43.560
It's changing how we're
doing documentation.

00:00:43.640 --> 00:00:47.400
You may learn a few things about
why documentation hasn't always

00:00:47.400 --> 00:00:50.450
worked the way you wanted in the
past and why it's getting better now.

00:00:50.460 --> 00:00:54.020
I'm going to go over with
HeaderDoC HowTo and the Man pages

00:00:54.370 --> 00:00:57.280
the areas of documentation
that the project covers.

00:00:57.300 --> 00:01:00.930
And then we're going to get into
some detail on what documentation

00:01:01.010 --> 00:01:02.800
do we have related to Darwin.

00:01:03.530 --> 00:01:07.530
What documentation are we working
on and where are some great areas

00:01:07.570 --> 00:01:11.330
for you to contribute if you
happen to have some knowledge.

00:01:12.160 --> 00:01:15.180
One big question we get is, well,
what does the Darwin Documentation

00:01:15.260 --> 00:01:16.030
Project cover?

00:01:16.030 --> 00:01:18.970
Darwin Documentation
covers what Darwin covers,

00:01:19.000 --> 00:01:22.490
and probably most people in this
room are aware of what that is,

00:01:22.660 --> 00:01:24.000
but here's a quick summary.

00:01:24.000 --> 00:01:28.560
Obviously, that's the Mach BSD kernel,
kernel extensions, system framework,

00:01:28.560 --> 00:01:31.400
command line environment,
network services.

00:01:31.400 --> 00:01:37.320
Now, one of the things that people
notice is that our Apple writers,

00:01:37.400 --> 00:01:40.330
the people contributing to the
Darwin Documentation Project,

00:01:40.330 --> 00:01:45.410
are primarily focusing on drivers
and some basic kernel stuff.

00:01:45.500 --> 00:01:47.500
Some people in the community
want some other things.

00:01:47.500 --> 00:01:49.910
We'll get into some opportunities
there for people in the

00:01:49.910 --> 00:01:53.300
community to contribute and such,
but I can say right up front

00:01:53.300 --> 00:01:57.350
that our focus is definitely
drivers and the core kernel

00:01:57.350 --> 00:02:00.670
information that you need right now.

00:02:01.090 --> 00:02:03.060
So, as I mentioned,
you've probably been the

00:02:03.130 --> 00:02:06.680
recipient of problems in the
traditional documentation process,

00:02:06.680 --> 00:02:10.830
meaning once you get the documentation,
it's not complete or it's really late,

00:02:10.990 --> 00:02:12.270
it comes out way out to the product.

00:02:12.390 --> 00:02:14.500
Why does that happen?

00:02:14.630 --> 00:02:17.120
Well, here's the traditional
model for documentation.

00:02:17.130 --> 00:02:19.540
And it starts with the engineer.

00:02:19.560 --> 00:02:22.280
The engineer has the
information that you need.

00:02:22.300 --> 00:02:24.630
And they may write that down.

00:02:24.640 --> 00:02:27.040
They may write comments
in the header file.

00:02:27.040 --> 00:02:30.920
They may meet with a writer and
tell them what that information is.

00:02:30.940 --> 00:02:33.100
The writer gets that information.

00:02:33.100 --> 00:02:35.500
They put it together
into a nice document.

00:02:35.520 --> 00:02:36.960
They get it reviewed.

00:02:36.980 --> 00:02:38.570
They send it to the editor.

00:02:38.640 --> 00:02:40.480
The editor goes through
it for consistency,

00:02:40.560 --> 00:02:43.380
grammar, and makes sure that they're
communicating clearly,

00:02:43.400 --> 00:02:44.880
works with them on those things.

00:02:44.900 --> 00:02:47.000
Then it goes to the
production department.

00:02:47.000 --> 00:02:50.340
The production department goes through
every page of the documentation.

00:02:50.350 --> 00:02:51.920
They make sure it's paginated correctly.

00:02:51.920 --> 00:02:53.740
They make the art look good.

00:02:53.740 --> 00:02:56.160
They make sure that we're
following the right template.

00:02:56.160 --> 00:02:59.060
It then goes out to the
vendors and distribution,

00:02:59.090 --> 00:03:01.800
where it gets printed up into a book.

00:03:01.800 --> 00:03:03.500
It goes out into the bookstores.

00:03:03.570 --> 00:03:05.420
Finally, it gets to you.

00:03:05.460 --> 00:03:08.880
This whole process has taken
anywhere from six to nine months.

00:03:08.910 --> 00:03:10.220
Now, you open the book.

00:03:10.220 --> 00:03:14.620
And let's say you find a bug or a feature
missing that you want to document it,

00:03:14.620 --> 00:03:18.080
and you communicate that
back to the engineer.

00:03:18.720 --> 00:03:22.380
Six to nine months later,
if you're lucky, when the book comes out,

00:03:22.380 --> 00:03:24.800
the information that you
requested is in there.

00:03:24.810 --> 00:03:25.510
Or maybe it's not.

00:03:25.600 --> 00:03:27.500
Maybe we didn't have time to get to it.

00:03:27.660 --> 00:03:30.420
So this is the source,
and even though this is a circle,

00:03:30.420 --> 00:03:33.500
this is kind of a waterfall
that I'm communicating here,

00:03:33.560 --> 00:03:35.760
this is the source of many
problems and many of the

00:03:35.760 --> 00:03:40.310
reasons that the documentation
doesn't meet your expectations.

00:03:40.610 --> 00:03:42.250
We have to follow this sometimes.

00:03:42.260 --> 00:03:44.760
There are some books for
which this is the best model.

00:03:45.210 --> 00:03:48.000
Large conceptual books like
the IOCAP Fundamentals book

00:03:48.000 --> 00:03:50.700
that we'll talk about later,
which need to discuss the whole

00:03:50.700 --> 00:03:53.700
architecture from top to bottom,
provide lots of illustrations,

00:03:53.700 --> 00:03:55.750
get lots and lots of review
to make sure that we're

00:03:55.750 --> 00:03:57.220
communicating it exactly right.

00:03:57.350 --> 00:03:58.900
They've got to go through this process.

00:03:59.140 --> 00:04:01.250
But, you know,
you read that book once and the

00:04:01.350 --> 00:04:03.300
rest of the time you're reading
the rest of the documentation.

00:04:03.300 --> 00:04:07.880
And it doesn't need to
go through that process.

00:04:09.080 --> 00:04:09.680
Great.

00:04:09.710 --> 00:04:10.550
We have a broken slide.

00:04:10.610 --> 00:04:10.800
Okay.

00:04:10.800 --> 00:04:16.440
We get together,
the TechPub's managers get together

00:04:16.440 --> 00:04:21.510
about once a year in an offsite
and talk about what is going right,

00:04:21.720 --> 00:04:23.800
what's going wrong,
or what we could do better,

00:04:23.800 --> 00:04:25.640
and what we could learn
from our industry.

00:04:25.640 --> 00:04:28.780
And a year or two ago,
it was my job to present what we could

00:04:29.150 --> 00:04:31.480
learn from the rest of our industry.

00:04:31.480 --> 00:04:34.990
And we sat there and scratched
our heads for a while and realized

00:04:34.990 --> 00:04:36.750
not a whole lot at this point.

00:04:37.780 --> 00:04:39.540
We were,
Apple is actually in a position of

00:04:39.540 --> 00:04:42.270
being really leading edge in the
industry in terms of our public

00:04:42.380 --> 00:04:43.920
methodology and what we're doing.

00:04:44.060 --> 00:04:45.840
But we knew that there was
a lot more we could do.

00:04:45.970 --> 00:04:51.050
And after some research,
what I discovered was that there

00:04:51.050 --> 00:04:55.040
was an area of the software industry
that we had a lot to learn from.

00:04:55.040 --> 00:04:56.920
And that was the open source area.

00:04:57.080 --> 00:04:59.440
And they bring a new model
to documentation because

00:04:59.440 --> 00:05:03.000
the open source projects,
when they created documentation projects,

00:05:03.080 --> 00:05:05.360
it was engineers who
created those projects.

00:05:05.740 --> 00:05:07.440
Engineers come from a code background.

00:05:07.800 --> 00:05:13.140
They believe that things should be
buildable in a source repository that

00:05:13.150 --> 00:05:16.250
anyone should be able to contribute,
and they should be diffable.

00:05:16.380 --> 00:05:20.380
These are all brand new
concepts to us in publications.

00:05:20.380 --> 00:05:24.180
So the model, we'll see what happens
with these slides here,

00:05:24.520 --> 00:05:27.330
the model in...

00:05:27.450 --> 00:05:35.330
The Darwin Documentation Project is
a production team that provides tools

00:05:35.400 --> 00:05:39.300
for the development of the C code.

00:05:39.470 --> 00:05:46.920
and Matt Morse are the main
developers of the project.

00:05:46.920 --> 00:05:56.200
They are the developers on the project,
or even subject area experts

00:05:56.200 --> 00:06:04.160
who just know a lot about it
and have a lot to communicate.

00:06:04.650 --> 00:06:07.060
Finally, you have the audience,
which is right now in

00:06:07.100 --> 00:06:08.330
Darwin primarily developers.

00:06:08.370 --> 00:06:12.690
This will also be, of course,
sysadmin and users over time.

00:06:12.950 --> 00:06:17.600
One of the things to notice is that
developers on the content providing side,

00:06:17.600 --> 00:06:18.960
developers on the audience side.

00:06:19.100 --> 00:06:23.610
So these people need the
tools to talk to themselves.

00:06:24.660 --> 00:06:29.120
With the open source tools and
using repositories and such,

00:06:29.260 --> 00:06:32.450
we cut down on the waterfall model.

00:06:32.550 --> 00:06:35.460
Instead of having necessarily
an editor in the process,

00:06:35.510 --> 00:06:40.360
it will maybe just go to the
tool and then go to the audience.

00:06:40.370 --> 00:06:44.580
Or in the ideal case, and HeaderDoC,
which we'll talk about in a moment,

00:06:44.580 --> 00:06:46.120
is an example of this.

00:06:46.150 --> 00:06:49.080
In the ideal case,
the production people provide the

00:06:49.080 --> 00:06:51.660
tool and get out of the picture.

00:06:51.990 --> 00:06:54.740
So in the case of HeaderDoC,
we give you HeaderDoC,

00:06:54.780 --> 00:06:57.190
the developers have HeaderDoC,
it goes directly to the

00:06:57.190 --> 00:06:59.700
audience when they release
their product or their header.

00:06:59.700 --> 00:07:02.860
The audience can comment on that,
the developer can

00:07:02.930 --> 00:07:06.100
re-release it right away,
or even better,

00:07:06.100 --> 00:07:12.760
this is what's happened with Darwin,
we had IOGraphicsLib.h in the I/O Kit.

00:07:12.890 --> 00:07:15.590
We hadn't gotten around to
getting HeaderDoC into that yet.

00:07:16.260 --> 00:07:21.140
But Tori Lyons, a Darwin developer,
noticed this, and he put together the

00:07:21.140 --> 00:07:23.180
HeaderDoC and sent it to us.

00:07:23.180 --> 00:07:26.890
So in this new model,
things are so different from the old

00:07:26.890 --> 00:07:31.130
one that the audience is now providing
the documentation to the developers.

00:07:32.080 --> 00:07:35.070
This is very exciting to us,
and this is where we're

00:07:35.070 --> 00:07:36.500
focusing all of our energies.

00:07:36.540 --> 00:07:41.400
So let's talk about what
I call the ideal model there,

00:07:41.400 --> 00:07:42.020
and that's HeaderDoC.

00:07:42.080 --> 00:07:45.840
HeaderDoC treats the
documentation as source code.

00:07:45.880 --> 00:07:49.030
The documentation resides in the
header files in a tagged format.

00:07:49.040 --> 00:07:52.270
HeaderDoC currently
covers C and C++ projects.

00:07:52.340 --> 00:07:54.620
It's very similar to JavaDoc tags.

00:07:54.640 --> 00:07:59.100
And I'd like to have Matt Morse come
up and show us a HeaderDoC file.

00:07:59.100 --> 00:08:00.790
And if we could go to...

00:08:03.090 --> 00:08:05.460
So this is a HeaderDoC file.

00:08:05.480 --> 00:08:09.240
And notice in addition
to regular comments,

00:08:09.250 --> 00:08:12.240
we have right at the top
a header-wide comment.

00:08:12.320 --> 00:08:14.800
This is so that you can provide
some documentation related

00:08:14.910 --> 00:08:18.380
to the entire framework or
header that you're dealing with.

00:08:18.400 --> 00:08:21.260
But then most of the comments
are on a per function or

00:08:21.380 --> 00:08:23.660
type def or data type basis.

00:08:23.660 --> 00:08:29.140
So if we go down to IOFB create cursor,
create shared cursor there,

00:08:29.270 --> 00:08:32.770
you can see this is a-- so this
is a function declaration and

00:08:32.770 --> 00:08:35.060
the HeaderDoc related to it.

00:08:35.060 --> 00:08:38.920
And the thing to notice-- and I'll
provide some detail over here.

00:08:38.950 --> 00:08:43.060
First thing to notice is that
it has a special comment format.

00:08:43.060 --> 00:08:45.400
And that is /*bang.

00:08:45.410 --> 00:08:47.900
Some people have asked
us why we did that,

00:08:47.900 --> 00:08:52.930
why we didn't either use the Java doc
comment format or just a normal comment,

00:08:52.950 --> 00:08:54.540
which would just be /*.

00:08:54.560 --> 00:08:57.690
The reason we went this way was because,
first of all,

00:08:57.740 --> 00:09:00.520
while we designed HeaderDoc to
be very similar to Java,

00:09:00.520 --> 00:09:03.520
we wanted to make sure that we were
using the same Java doc as the Java doc.

00:09:03.520 --> 00:09:04.500
It's not Java doc.

00:09:04.600 --> 00:09:06.520
And it has to use different
tags because of C and C++.

00:09:06.520 --> 00:09:08.760
So we didn't want to confuse
any Java doc processing tools

00:09:08.760 --> 00:09:11.400
and have them try to grab this
comment and do something with it.

00:09:11.500 --> 00:09:13.940
Second, though,
we didn't want to look like a

00:09:13.940 --> 00:09:17.620
regular comment because sometimes,
as you can see here,

00:09:17.700 --> 00:09:20.760
the HeaderDoc balloons up
the size of the header.

00:09:20.770 --> 00:09:24.110
We were concerned that some engineers
would not want that to be the

00:09:24.220 --> 00:09:25.680
case in their published headers.

00:09:25.700 --> 00:09:27.300
Actually, so far,
people don't really seem

00:09:27.300 --> 00:09:28.260
to have an issue with it.

00:09:28.360 --> 00:09:30.660
But just in case,
we wanted them to be able to run a tool

00:09:30.660 --> 00:09:33.840
before they published a header which
would strip out the HeaderDoc files

00:09:34.150 --> 00:09:37.200
but leave the normal comments so they
could leave in comments like don't

00:09:37.200 --> 00:09:41.180
pass null to this and such and not
have those stripped out of the file.

00:09:41.180 --> 00:09:43.340
So that's why we have
this comment format.

00:09:43.340 --> 00:09:48.080
There's only one required
tag for a HeaderDoc comment.

00:09:48.080 --> 00:09:51.220
And that's the first tag,
which explains what it is.

00:09:51.220 --> 00:09:55.250
So in this case, it's a function,
IOFB create shared cursor.

00:09:55.260 --> 00:09:57.310
There are a variety of
different tags depending on

00:09:57.390 --> 00:09:58.640
what you might be identifying.

00:09:58.640 --> 00:10:00.120
The rest of the tags are optional.

00:10:00.300 --> 00:10:02.080
A great one to have is an abstract.

00:10:02.160 --> 00:10:04.890
The abstract will get pulled out of
some of our tools and used in tables

00:10:04.890 --> 00:10:08.620
of contents so people can see quickly
what it is they're going to jump to.

00:10:08.670 --> 00:10:11.150
Then, of course, the meat of the comment
is the discussion.

00:10:11.160 --> 00:10:15.460
This is typically one to three
paragraphs of your information

00:10:15.460 --> 00:10:17.840
about what this function does.

00:10:17.970 --> 00:10:21.240
Then for one or more of the parameters,
however many you choose,

00:10:21.370 --> 00:10:25.820
you can provide parameter
specific documentation.

00:10:25.950 --> 00:10:28.900
Finally, if you have a return code,
you can choose to identify

00:10:28.990 --> 00:10:30.100
what that return code is.

00:10:30.100 --> 00:10:34.660
The only other requirement for
a HeaderDoc comment is that its

00:10:34.800 --> 00:10:37.900
placement must be directly above
the thing that it's talking about.

00:10:37.900 --> 00:10:41.940
There can be white space and all that,
but it has to be above so that when our

00:10:41.940 --> 00:10:44.960
Perl tools go through and process this,
they can connect the two

00:10:44.960 --> 00:10:47.360
together and make use of them.

00:10:47.420 --> 00:10:50.520
So now I'd like to have Matt walk
through the actual process of

00:10:50.600 --> 00:10:52.340
creating some HeaderDoc here.

00:10:52.500 --> 00:10:57.040
Okay, we can build HeaderDoc either
directly in Project Builder,

00:10:57.130 --> 00:10:59.640
and I'll show you how to do that,
but more commonly,

00:10:59.640 --> 00:11:02.340
especially for Darwin developers,
you'd be building it from the

00:11:02.460 --> 00:11:07.880
command line because you don't
have Project Builder to use.

00:11:09.510 --> 00:11:11.740
The command is quite simple.

00:11:11.740 --> 00:11:15.790
It's headerdoc to HTML.

00:11:16.250 --> 00:11:19.680
And that's in user bin on your system.

00:11:19.750 --> 00:11:24.440
You can give it an output directory
to drop the documentation into.

00:11:24.450 --> 00:11:26.980
-o is for the output directory.

00:11:27.030 --> 00:11:30.840
And then you tell it what to process.

00:11:30.850 --> 00:11:34.200
And what to process can
be either a single header,

00:11:34.200 --> 00:11:36.300
a group of headers, or a folder.

00:11:36.320 --> 00:11:39.140
And if it's a folder,
it'll recurse through the folder,

00:11:39.260 --> 00:11:42.880
finding all headers and processing them.

00:11:43.190 --> 00:11:46.040
In this case, before we run this,
let's take a look.

00:11:46.050 --> 00:11:50.480
We've got iographicslib.h,
as we were talking about,

00:11:50.670 --> 00:11:52.740
but we have a number
of other headers here,

00:11:52.740 --> 00:11:53.210
too.

00:11:53.290 --> 00:11:56.620
There are eight headers,
one's in a subfolder.

00:11:56.800 --> 00:11:59.350
So we process it.

00:12:00.220 --> 00:12:02.550
It's gone through the eight headers.

00:12:02.550 --> 00:12:06.180
It emits a comment for
each one that it visits.

00:12:06.290 --> 00:12:09.400
Here you notice that it's skipping
one because it didn't find

00:12:09.400 --> 00:12:12.140
anything of interest to document.

00:12:12.140 --> 00:12:14.980
There were no HeaderDoC comments
in that header.

00:12:14.980 --> 00:12:20.330
And I know because I counted,
it's gone through eight headers and it's

00:12:20.440 --> 00:12:22.360
produced over 50 pages of documentation.

00:12:22.360 --> 00:12:25.970
So let's look at that documentation.

00:12:32.630 --> 00:12:36.350
So we produce this folder, doc,
and here are the seven

00:12:36.470 --> 00:12:41.580
folders of documentation,
one per header, that we've generated.

00:12:41.580 --> 00:12:46.550
And we can look at
iographics lib documentation.

00:12:46.560 --> 00:12:51.390
It produces a frame set of documentation,
so you can open the

00:12:51.400 --> 00:12:53.880
index.html to get there.

00:12:54.240 --> 00:12:57.350
And as you can see,
you've got a TOC on the left,

00:12:57.520 --> 00:13:03.050
and that at header comment that
Ron pointed out has become the

00:13:03.050 --> 00:13:05.340
opening page of your documentation.

00:13:05.340 --> 00:13:11.040
For each function, you have a link,
and you can see how those tags

00:13:11.040 --> 00:13:14.060
have been converted into HTML.

00:13:14.060 --> 00:13:18.760
The function tag, let's look at the one
that Ron pointed out,

00:13:18.760 --> 00:13:21.040
the create shared cursor.

00:13:21.040 --> 00:13:22.790
We have the title.

00:13:22.800 --> 00:13:24.040
That was the at tag.

00:13:24.400 --> 00:13:25.150
The function tag.

00:13:25.160 --> 00:13:26.640
Abstract is here.

00:13:26.640 --> 00:13:30.330
The declaration is pulled
directly from the header.

00:13:30.340 --> 00:13:31.630
And then we have the tag.

00:13:31.790 --> 00:13:34.200
This is the discussion block.

00:13:34.230 --> 00:13:39.560
And then each parameter is listed
and described in this table.

00:13:39.570 --> 00:13:42.380
And the result code follows.

00:13:42.670 --> 00:13:46.220
So you have a long page
of each of the functions.

00:13:46.220 --> 00:13:51.410
In the TOC, you'll see grouping headings
depending on the type of API,

00:13:51.450 --> 00:13:55.100
enumerations, and pound defines.

00:13:55.510 --> 00:13:58.820
And so you can print
out this documentation,

00:13:58.820 --> 00:14:01.780
which would be hard to
do with a frame set.

00:14:01.780 --> 00:14:05.760
There's a link at the bottom
that will open up one continuous

00:14:05.760 --> 00:14:09.310
page of documentation,
and then you can print that out.

00:14:09.420 --> 00:14:16.070
It has all the functions,
all the enumerations, and so on.

00:14:17.160 --> 00:14:20.260
Okay,
now that's nice that we've created a

00:14:20.270 --> 00:14:23.500
folder of documentation for every header,
but it would be even more

00:14:23.600 --> 00:14:28.450
convenient if there was a way to
gather this all together in a more

00:14:28.450 --> 00:14:32.790
easily navigatable arrangement.

00:14:32.860 --> 00:14:36.490
And so we have another script,
GatherHeaderDoc.

00:14:37.020 --> 00:14:42.720
That takes as its input
the folder to go visit.

00:14:42.740 --> 00:14:48.130
It visits every island of documentation
that Headerdoc created and it creates

00:14:48.130 --> 00:14:53.240
a TOC and also adjusts some links so
that you can get from the island back to

00:14:53.240 --> 00:14:55.770
the TOC and from the TOC to the island.

00:14:55.850 --> 00:14:58.970
So let's look at what that looks like.

00:15:01.100 --> 00:15:05.450
Okay, so here's our documentation.

00:15:05.850 --> 00:15:07.880
Notice that now we have this master TOC.

00:15:07.880 --> 00:15:12.880
A lot of the names of the files are
configurable through a configuration

00:15:12.910 --> 00:15:14.580
file that I'll talk about later.

00:15:14.580 --> 00:15:17.800
So if we open that,

00:15:20.790 --> 00:15:27.800
You see the links to each of
the pools of documentation.

00:15:29.550 --> 00:15:35.140
And we've added a top button
here to get back to the TOC.

00:15:35.140 --> 00:15:39.670
Now, if one of these headers, let's say--

00:15:40.800 --> 00:15:43.120
Let's say, event source.

00:15:43.130 --> 00:15:49.040
If it described more than just C API,
if it had a C++ class,

00:15:49.060 --> 00:15:53.300
you end up with more than one
frame set of documentation.

00:15:53.670 --> 00:15:57.360
This is the frame set
for the header itself.

00:15:57.360 --> 00:16:01.200
And in fact, there's only one thing other
than the class of interest in it,

00:16:01.220 --> 00:16:03.360
and that's that #define.

00:16:03.520 --> 00:16:07.110
But there's also a class, ioEventSource.

00:16:07.210 --> 00:16:09.370
So we can go visit that.

00:16:09.580 --> 00:16:14.830
And notice that this is
much like the C frameset,

00:16:14.830 --> 00:16:19.480
except now you have member
functions and member data.

00:16:19.700 --> 00:16:24.170
And within each of those headings,
you have the access type, public,

00:16:24.340 --> 00:16:26.100
private, and so on.

00:16:26.100 --> 00:16:34.190
And your class documentation
is there for you.

00:16:35.200 --> 00:16:38.950
So I told you that you can
build this documentation

00:16:38.980 --> 00:16:41.340
directly in Project Builder.

00:16:41.350 --> 00:16:43.410
I'll show you how that's done.

00:16:45.580 --> 00:16:48.050
If you've been to any of
the Project Builder talks,

00:16:48.050 --> 00:16:52.640
you know that they're build
phases for your targets.

00:16:52.770 --> 00:17:00.730
So if you go to the Targets tab and look
at-- this is just an empty project that

00:17:01.040 --> 00:17:03.110
contains my header files.

00:17:03.170 --> 00:17:05.400
And look at the build phases.

00:17:05.400 --> 00:17:07.320
You'll see down here I've added two more.

00:17:07.490 --> 00:17:11.010
These are shell script build phases.

00:17:11.790 --> 00:17:15.040
And all that does is run a script.

00:17:15.090 --> 00:17:16.930
And here I define it.

00:17:17.110 --> 00:17:21.700
And this is pretty much exactly
what I ran on the command line.

00:17:21.700 --> 00:17:25.170
The only difference is I'm using
some symbolic constants that

00:17:25.220 --> 00:17:30.340
Project Builder knows about to
tell it where to find the source

00:17:30.340 --> 00:17:33.220
and where to put the documentation.

00:17:33.780 --> 00:17:42.320
So I'm going to look for the source
headers in the project source and I'm

00:17:42.370 --> 00:17:49.900
going to put the documentation in the
resources folder inside the app wrapper.

00:17:50.560 --> 00:17:53.320
And after I do that,
I'm going to run the second shell script,

00:17:53.500 --> 00:17:57.140
GatherHeaderDoc,
which will go into that folder of

00:17:57.140 --> 00:17:59.940
documentation and create the master TOC.

00:18:00.040 --> 00:18:01.880
So let's do that.

00:18:02.730 --> 00:18:05.770
Now if you look up
here in the build pane,

00:18:05.870 --> 00:18:10.910
after it does the normal build phases,
you'll see running by

00:18:10.910 --> 00:18:13.280
the HeaderDoC comments.

00:18:13.280 --> 00:18:16.160
I think we're about there.

00:18:16.160 --> 00:18:17.700
OK.

00:18:18.440 --> 00:18:19.840
That was HeaderDoC going by.

00:18:19.930 --> 00:18:22.650
There's GatherHeaderDoC.

00:18:22.650 --> 00:18:24.690
So if we go back to the

00:18:25.410 --> 00:18:29.410
files display and look in
the products now we have our

00:18:29.410 --> 00:18:35.850
application HeaderDoc demo dot app
and you can go in there we have

00:18:36.120 --> 00:18:42.200
created this folder of documentation
and here's our master TOC.

00:18:42.530 --> 00:18:47.000
And as you saw in some of
the Project Builder talks,

00:18:47.100 --> 00:18:50.640
we're trying to integrate the
documentation with Project Builder.

00:18:50.640 --> 00:18:53.210
So in a later release,
you'll be able to see your

00:18:53.230 --> 00:18:55.770
documentation right there.

00:18:57.580 --> 00:19:04.400
So one last thing I'd like to show
is the documentation for HeaderDoC.

00:19:04.400 --> 00:19:08.310
It is installed on your system.

00:19:08.600 --> 00:19:13.760
It's in Developer Documentation,
Developer Tools,

00:19:13.790 --> 00:19:20.820
and it comes with HeaderDoC if you
download it from our website as well.

00:19:21.000 --> 00:19:25.100
HeaderDoC has reference to tell you
pretty much what I've just told you about

00:19:25.190 --> 00:19:30.000
how to use it and what to expect from it,
how to run it.

00:19:30.040 --> 00:19:34.280
It also talks about the configuration
file I mentioned that lets you set

00:19:34.360 --> 00:19:38.720
some of the names of the files.

00:19:38.730 --> 00:19:43.870
And then it starts discussing
how to tag your source.

00:19:44.830 --> 00:19:48.300
And at the bottom here,
there's a reference for all the

00:19:48.300 --> 00:19:51.450
tags that you can use in C and C++.

00:19:51.460 --> 00:19:54.140
So if you're wondering
about function tags,

00:19:54.140 --> 00:19:57.080
well, here are the tags that
you can use at function,

00:19:57.230 --> 00:19:58.780
at param, at result.

00:19:58.830 --> 00:20:07.540
And for every type of API,
it gives an example of a

00:20:07.540 --> 00:20:07.540
declaration that's been tagged.

00:20:07.940 --> 00:20:12.070
And for those of you who would like
to contribute to the HeaderDoC effort

00:20:12.080 --> 00:20:17.980
and want to play with Perl,
it's a fairly nicely structured script,

00:20:18.070 --> 00:20:22.920
I think,
that has a parser that generates objects.

00:20:22.920 --> 00:20:28.510
It's an object-oriented Perl script,
and this is the class hierarchy

00:20:28.510 --> 00:20:31.500
of the objects that are produced.

00:20:32.480 --> 00:20:35.420
The source code itself
has a lot of comments,

00:20:35.420 --> 00:20:41.740
and there's an active mailing list that
you can sign up for to join the effort.

00:20:41.740 --> 00:20:43.240
So I hope you use it.

00:20:43.300 --> 00:20:43.970
Thank you.

00:20:49.130 --> 00:20:49.620
Thanks, Matt.

00:20:49.700 --> 00:20:52.760
And Matt is the primary
author of HeaderDoC.

00:20:52.760 --> 00:20:56.070
If we could go to slides on both screens.

00:20:59.480 --> 00:21:02.680
So our goals for HeaderDoC.

00:21:02.680 --> 00:21:06.400
All C and C++ API in
Darwin should be using HeaderDoC.

00:21:06.400 --> 00:21:12.550
If you own or are maintaining or
contributing to a C or C++ project,

00:21:12.550 --> 00:21:14.830
start using HeaderDoC today
if you're not already.

00:21:14.830 --> 00:21:20.050
We will then have a universal approach
to reference across the system and

00:21:20.050 --> 00:21:22.220
it'll be the best for everyone.

00:21:23.220 --> 00:21:25.800
We really want to support Objective-C,
of course.

00:21:25.800 --> 00:21:29.730
We have, at each step,
added functionality to HeaderDoC based

00:21:29.730 --> 00:21:31.360
on what we needed at that moment.

00:21:31.360 --> 00:21:34.610
As Cocoa becomes a reality on 10,
we're very interested

00:21:34.610 --> 00:21:35.630
in adding Objective-C.

00:21:35.890 --> 00:21:39.180
A number of our people in
the Darwin community have

00:21:39.180 --> 00:21:41.180
expressed interest in doing this.

00:21:41.220 --> 00:21:44.610
Matt's a really busy guy right
now and he's actually doing the

00:21:44.610 --> 00:21:48.400
code also to put the editing,
the documentation viewing and

00:21:48.400 --> 00:21:50.820
editing into Project Builder.

00:21:50.820 --> 00:21:52.320
So we're not going to get Objective-C.

00:21:52.320 --> 00:21:55.290
We're going to be in for a little
while and if you're someone who

00:21:55.350 --> 00:21:58.290
knows or would like to learn
Perl and is interested in that,

00:21:58.290 --> 00:22:00.010
you could really help us out.

00:22:00.020 --> 00:22:01.460
Join the mailing list.

00:22:01.460 --> 00:22:05.160
You can go to list.apple.com
or to the Darwin site and find

00:22:05.320 --> 00:22:07.620
out about the mailing list.

00:22:07.620 --> 00:22:10.140
And finally,
Matt showed how you can do this

00:22:10.220 --> 00:22:12.000
in Mac OS X and Project Builder.

00:22:12.000 --> 00:22:14.950
We want to make a push button so
that you don't have to go and add

00:22:14.950 --> 00:22:16.590
in your own build phase stuff.

00:22:16.590 --> 00:22:18.180
That will happen in the near future.

00:22:18.200 --> 00:22:22.170
Next we have,
as an area that we cover in the

00:22:22.170 --> 00:22:25.000
Darwin Documentation Project,
are how-to documents.

00:22:25.000 --> 00:22:31.250
So these are different from
HeaderDoc in that who provides

00:22:31.300 --> 00:22:33.120
them tends to be different.

00:22:33.120 --> 00:22:36.570
In HeaderDoc, it's almost always the
engineer who created the code

00:22:36.900 --> 00:22:38.880
who provides the HeaderDoc.

00:22:38.940 --> 00:22:42.710
With how-to documents,
anyone who has the knowledge can and is

00:22:42.710 --> 00:22:45.310
encouraged to provide a how-to document.

00:22:45.470 --> 00:22:48.970
These are typically self-contained
small articles from 1 to 10 pages.

00:22:48.970 --> 00:22:50.720
There's no particular restriction.

00:22:50.720 --> 00:22:51.680
You can make it as long as you want.

00:22:51.680 --> 00:22:51.680
But you can make it as long as you want.

00:22:51.680 --> 00:22:52.630
So you can make it as long as you want.

00:22:52.700 --> 00:22:53.960
That's the standard.

00:22:53.960 --> 00:22:57.850
They solve a particular problem or
tell you how to get your job done in

00:22:57.910 --> 00:23:00.290
a particular aspect of the system.

00:23:01.470 --> 00:23:04.450
We'll get into some examples later
of what we have and some of the

00:23:04.450 --> 00:23:06.900
ones that would be useful to add.

00:23:06.990 --> 00:23:09.500
They're authored in DocBook XML.

00:23:09.560 --> 00:23:13.010
A lot of people have heard about XML,
maybe they've used it

00:23:13.010 --> 00:23:15.890
a bit for their system,
but they haven't necessarily seen how

00:23:15.960 --> 00:23:17.900
it was intended to be used originally.

00:23:17.900 --> 00:23:20.570
We can go into that and how we use it.

00:23:20.720 --> 00:23:23.500
DocBook XML

00:23:23.870 --> 00:23:28.150
Is the industry standard XML definition
for technical publications?

00:23:28.220 --> 00:23:33.300
So the idea with XML is that each
industry would come up with its own

00:23:33.300 --> 00:23:35.300
set of tags specific to that industry.

00:23:35.300 --> 00:23:37.240
The medical industry is
doing this for billing,

00:23:37.260 --> 00:23:37.610
etc.

00:23:37.810 --> 00:23:42.120
Well, probably the most advanced set of
XML tags in the world is DocBook for

00:23:42.200 --> 00:23:44.590
exactly the kind of stuff that we do.

00:23:45.880 --> 00:23:49.680
XML is structured information,
which we will get to in a minute.

00:23:49.780 --> 00:23:55.050
And there is-- if you are interested
in trying to venture into XML and

00:23:55.050 --> 00:24:02.950
learn what this is all about,
there's a lot of information

00:24:02.950 --> 00:24:02.950
in the Darwin documentation
HowTo in the HowTo site.

00:24:03.360 --> 00:24:06.320
The only problem there is
that the tools for XML,

00:24:06.320 --> 00:24:09.410
the editing tools for XML,
aren't quite there yet.

00:24:09.480 --> 00:24:12.950
If you remember with HTML,
it took two or three years before

00:24:12.950 --> 00:24:14.950
there were good HTML editors.

00:24:14.960 --> 00:24:18.230
And XML is much harder
to create an editor for.

00:24:18.310 --> 00:24:22.440
So there are lots of editors in progress,
but there aren't any that are

00:24:22.440 --> 00:24:24.760
going to solve all your problems.

00:24:24.760 --> 00:24:27.760
And we're more interested
in getting the information.

00:24:27.780 --> 00:24:30.650
If you have a HowTo in you,
if you have information that

00:24:30.710 --> 00:24:32.950
other Darwin developers or
system administrators or

00:24:33.270 --> 00:24:35.940
users should know about,
we just want the information.

00:24:36.010 --> 00:24:39.190
So if you don't want to get into
XML or if you venture into it

00:24:39.200 --> 00:24:43.060
and find it's a little murky,
just go ahead and email to me your

00:24:43.060 --> 00:24:45.920
document or to the Darwin developer list.

00:24:46.060 --> 00:24:48.900
We will turn it into XML for
you and add it to the project.

00:24:50.800 --> 00:24:54.650
So let's get into some of the detail of
XML and how it's different from HTML,

00:24:54.660 --> 00:24:55.720
which you may be familiar with.

00:24:55.780 --> 00:25:00.150
HTML has formatting-based tags.

00:25:00.220 --> 00:25:05.780
So your tag will say,
this word is italic, this word is bold,

00:25:05.780 --> 00:25:07.550
this word is an H1.

00:25:07.560 --> 00:25:09.500
But it won't say why it's italic.

00:25:09.650 --> 00:25:10.820
It won't say why it's bold.

00:25:10.840 --> 00:25:13.630
So processing tools can't
do anything with it.

00:25:13.700 --> 00:25:17.350
They can't change the formatting based
on the output or do anything with it.

00:25:17.780 --> 00:25:20.370
XML is exactly the opposite.

00:25:20.860 --> 00:25:23.720
It only tells about the
content of the tags.

00:25:23.830 --> 00:25:25.630
It does not say what to do with it.

00:25:25.700 --> 00:25:28.940
So for instance,
in a Darwin Documentation HowTo,

00:25:29.110 --> 00:25:30.710
you have a title of the document.

00:25:30.900 --> 00:25:37.540
The title is clearly named "Title."
You have a first name of the author.

00:25:38.050 --> 00:25:40.330
You have the email address of the author.

00:25:40.330 --> 00:25:43.150
So absolutely nothing is said
about how to process this.

00:25:43.260 --> 00:25:43.960
That comes later.

00:25:43.960 --> 00:25:46.760
Other tools will come along,
take a look at these and process them,

00:25:46.760 --> 00:25:48.160
and we'll show you how that works.

00:25:48.260 --> 00:25:50.040
This is a very important difference.

00:25:50.090 --> 00:25:52.280
It takes people a little
while to get used to.

00:25:52.280 --> 00:25:54.990
The effect is to turn your
document into a mini database.

00:25:55.040 --> 00:25:58.810
The other very important aspects of XML,
and really, in my opinion,

00:25:58.810 --> 00:26:01.310
the reason that XML is
taking off in the world,

00:26:01.310 --> 00:26:04.050
are that the tags are
hierarchical and closed.

00:26:04.520 --> 00:26:06.870
Now, HTML has a little of both of these.

00:26:06.900 --> 00:26:10.210
The problem is it's not strict about it,
so it doesn't help very much.

00:26:10.300 --> 00:26:12.990
So, for instance,
a paragraph tag in HTML does

00:26:12.990 --> 00:26:14.410
not have to be closed.

00:26:14.480 --> 00:26:19.250
Some browsers make you close list items,
some don't.

00:26:19.340 --> 00:26:22.550
And so you don't know how your
document is going to work in different

00:26:22.550 --> 00:26:24.240
browsers until you just try it.

00:26:24.350 --> 00:26:25.670
In XML, this never happens.

00:26:25.730 --> 00:26:26.920
There's an absolute rule.

00:26:27.150 --> 00:26:28.120
Tags must be closed.

00:26:28.140 --> 00:26:32.210
So to take a reasonably
sophisticated little block

00:26:32.330 --> 00:26:35.760
of XML from a HowTo document,
the revision history.

00:26:35.760 --> 00:26:37.830
So there's a revision history section.

00:26:37.930 --> 00:26:40.030
Each revision gets a comment and such.

00:26:40.100 --> 00:26:44.420
This has an opening tag, rev history,
and a closing tag, rev history.

00:26:44.450 --> 00:26:46.830
Everything else will be inside there.

00:26:46.860 --> 00:26:51.630
Each revision has an opening revision
tag and a closing revision tag.

00:26:51.640 --> 00:26:55.260
Then, for each piece of information
about that revision,

00:26:55.280 --> 00:26:57.900
it has an opening tag and a closing tag.

00:26:57.900 --> 00:27:00.730
So we have the revision number,
we have the date of the revision,

00:27:00.770 --> 00:27:03.760
and finally, any comment we want to
create for this revision.

00:27:04.520 --> 00:27:08.570
So this is a great example of
how a tool goes through this and

00:27:08.690 --> 00:27:09.990
figures out what to do with it.

00:27:10.090 --> 00:27:12.620
The writer doesn't say anything,
but here's the information

00:27:12.620 --> 00:27:13.800
that I'm providing to you.

00:27:16.990 --> 00:27:21.100
One of the things people find when
they hit DocBook is DocBook is

00:27:21.200 --> 00:27:26.800
a very mature set of XML tags
and it tries to do everything.

00:27:26.800 --> 00:27:29.720
So you can create facts with DocBook,
you can create books,

00:27:29.720 --> 00:27:34.590
you can create articles,
you can create lots of other things.

00:27:34.640 --> 00:27:37.680
And that means there are so many
tags that people get overwhelmed

00:27:37.710 --> 00:27:39.320
and they don't know what to do.

00:27:39.320 --> 00:27:41.140
The trick is ignore them.

00:27:42.230 --> 00:27:47.160
You only need, in order to author a
Darwin documentation HowTo document,

00:27:47.220 --> 00:27:48.290
to know about 10 tags.

00:27:48.320 --> 00:27:50.920
Now to be honest,
at the top and bottom of the document

00:27:50.920 --> 00:27:53.000
there are a few more tags in that,
like the Rev History there.

00:27:53.090 --> 00:27:56.760
You just want to copy those from the
template that we give you on the site.

00:27:56.940 --> 00:27:59.320
And don't worry,
just fill in the information.

00:27:59.320 --> 00:28:00.890
You don't need to remember
the tags or anything.

00:28:01.110 --> 00:28:03.530
The only tags you actually need
to know when you're providing

00:28:03.530 --> 00:28:06.070
information are about 10.

00:28:06.080 --> 00:28:07.310
This is a good sample of them.

00:28:07.380 --> 00:28:11.550
So what a section is, a title,
a paragraph.

00:28:11.640 --> 00:28:13.640
A couple different kinds of lists.

00:28:13.780 --> 00:28:14.880
How to list code.

00:28:14.950 --> 00:28:15.930
And URLs.

00:28:16.290 --> 00:28:17.330
That's about all you need to know.

00:28:17.390 --> 00:28:20.700
So really, you just grab our template
that we have on the site.

00:28:20.770 --> 00:28:22.140
That gives you all the
tags you need to know.

00:28:22.140 --> 00:28:24.140
You don't need to worry
about any of the others.

00:28:24.140 --> 00:28:29.410
Now I'd like to have Matt come up
again and show us a demo of this.

00:28:41.910 --> 00:28:46.610
Okay, so Ron talked about the
nested nature of XML.

00:28:46.800 --> 00:28:48.500
Here's a document.

00:28:48.570 --> 00:28:51.140
This is the Darwin doc HowTo document.

00:28:51.160 --> 00:28:56.300
This is a document that describes
how to create these HowTo documents.

00:28:56.410 --> 00:29:04.340
And as he mentioned,
here's that revision history block and

00:29:04.340 --> 00:29:08.550
other standard blocks like the abstract.

00:29:08.860 --> 00:29:13.230
Something that's more like what you
would be doing is these section blocks.

00:29:13.370 --> 00:29:15.040
This is the facts section.

00:29:15.040 --> 00:29:19.390
We'll see this once we generate
the HTML question and answer.

00:29:19.440 --> 00:29:22.800
It has a title and a paragraph
and a section indicator.

00:29:22.800 --> 00:29:28.870
Okay, just as with HeaderDoC,
you can build the stuff

00:29:28.960 --> 00:29:33.290
in Project Builder,
but it's more likely that you'll

00:29:33.290 --> 00:29:37.340
be doing this on the command line.

00:29:38.780 --> 00:29:46.760
The command that we use is XSLTproc,
which is a--

00:29:46.990 --> 00:29:50.930
A command that applies an
XSL file to the XML file.

00:29:51.010 --> 00:29:53.040
The XSL file provides the formatting.

00:29:53.040 --> 00:29:54.420
Actually, it's more than that.

00:29:54.420 --> 00:29:59.170
It's a transformations file
that takes the XML that is just

00:29:59.290 --> 00:30:01.700
defined in terms of semantics.

00:30:01.700 --> 00:30:04.900
This is a title,
or this is an email address,

00:30:04.900 --> 00:30:06.830
and applies format to it.

00:30:06.900 --> 00:30:10.960
Beyond that,
it can do other transformations,

00:30:11.060 --> 00:30:12.960
and we'll see that.

00:30:13.580 --> 00:30:18.250
The one that we're using is DocBook.

00:30:26.500 --> 00:30:31.410
We're going to process the
Darwin HowTo and redirect

00:30:31.520 --> 00:30:33.660
the output to a file.

00:30:33.660 --> 00:30:36.500
It will be HTML by the time this is done.

00:30:36.500 --> 00:30:43.070
We can open that HowTo file.

00:30:48.380 --> 00:30:53.520
Okay, so this is that XML now
transformed into HTML.

00:30:53.520 --> 00:30:56.230
And things like the
title are just applied,

00:30:56.230 --> 00:30:58.010
formats applied to them.

00:30:58.010 --> 00:31:03.590
But things like the email address,
the transformation is to create

00:31:03.640 --> 00:31:07.980
a mail-to link as well as to
format it in a specific way.

00:31:08.420 --> 00:31:13.370
And then our input XML document
did not have a table of contents.

00:31:13.850 --> 00:31:22.520
This was extracted by XSL Tproc and
the XSL transformation file by looking

00:31:22.520 --> 00:31:28.320
at the structure of the document and
extracting the upper and lower level

00:31:28.380 --> 00:31:31.810
headings and making them into links.

00:31:32.060 --> 00:31:36.710
Also, we've got URLs that are now hot.

00:31:36.760 --> 00:31:43.790
And here's this question and answer
section that we're looking at the titles,

00:31:43.850 --> 00:31:47.000
the questions, and the formatted answers.

00:31:47.000 --> 00:31:50.160
Also, if you go back up and show
the revision history section,

00:31:50.160 --> 00:31:51.240
I wanted to stress something here.

00:31:51.280 --> 00:31:51.280
Oh, right.

00:31:51.280 --> 00:31:52.070
Yeah.

00:31:52.190 --> 00:31:55.330
So just wanted to stress here,
here are the revision history

00:31:55.330 --> 00:31:57.380
tags that the writer provided.

00:31:57.480 --> 00:31:58.730
Here is the output.

00:31:58.800 --> 00:32:03.140
As you can see,
the XSL tool has done something

00:32:03.140 --> 00:32:04.560
completely different with them.

00:32:04.560 --> 00:32:06.450
It's created a sophisticated table.

00:32:06.600 --> 00:32:10.280
If you've ever done your
own table editing in HTML,

00:32:10.280 --> 00:32:11.490
you know it's quite a pain.

00:32:11.590 --> 00:32:13.850
In this case, the writer didn't even know
it was going to be a table.

00:32:14.030 --> 00:32:14.890
And there you have it.

00:32:14.940 --> 00:32:19.120
So that's the great power
of using this process.

00:32:19.120 --> 00:32:20.760
OK, thank you.

00:32:25.120 --> 00:32:29.740
Can we go back to slides on both, please?

00:32:29.990 --> 00:32:31.930
So our goals for HowTo documents.

00:32:32.130 --> 00:32:35.090
Well, we started the HeaderDoC project
quite a while ago,

00:32:35.100 --> 00:32:36.220
and that's going very well.

00:32:36.220 --> 00:32:38.600
All of I/O Kit is in HeaderDoC,
and many other projects

00:32:38.600 --> 00:32:39.660
are beginning to do that.

00:32:39.680 --> 00:32:42.320
Many other companies throughout
the software industry,

00:32:42.320 --> 00:32:44.390
even totally unrelated to Darwin,
are beginning to use

00:32:44.450 --> 00:32:48.160
HeaderDoC because they-- I mean,
yeah, HeaderDoC-- because they find

00:32:48.160 --> 00:32:50.020
it to be a really valuable tool.

00:32:50.050 --> 00:32:55.090
HowTo documents, we just got going in the
last couple of months.

00:32:55.190 --> 00:32:57.540
Our goal is to document all common tasks.

00:32:57.590 --> 00:33:01.090
So anyone coming to
Darwin to help develop it,

00:33:01.160 --> 00:33:03.590
administrate it, whatever,
has a place to go,

00:33:03.620 --> 00:33:07.040
and find a quick explanation of the
various things they need to know.

00:33:07.070 --> 00:33:11.480
So a great example of this is-- and
it's up there now-- HowToBuildDarwin.

00:33:11.510 --> 00:33:15.970
We will have, next week, going up,
HowToBeADarwinDeveloper.

00:33:16.340 --> 00:33:18.140
We also,
and this is really important to us,

00:33:18.140 --> 00:33:20.340
want to cover all the
common driver families.

00:33:20.340 --> 00:33:24.050
So we'd like to have a HowTo for each
driver family you can go to that gives

00:33:24.110 --> 00:33:28.400
you the lowdown on what you should
be subclassing and what you need to

00:33:28.400 --> 00:33:30.180
expect when you're working with that.

00:33:30.220 --> 00:33:34.220
Finally, very important to the community
and important to Apple too,

00:33:34.220 --> 00:33:37.460
is that there are a lot of topics
that our writers at Apple are

00:33:37.460 --> 00:33:41.040
not necessarily the best people
to provide information for.

00:33:41.420 --> 00:33:45.200
And we're all really excited to
see that Darwin is up on Intel,

00:33:45.200 --> 00:33:47.440
that a huge number of people
have downloaded it for Intel.

00:33:47.440 --> 00:33:50.900
But to be absolutely honest,
those of us sitting in Apple offices are

00:33:50.980 --> 00:33:54.560
not necessarily the best to provide you
information on how to use it on Intel.

00:33:54.560 --> 00:33:59.980
So this is a great opportunity for people
in the community to provide information

00:34:00.020 --> 00:34:02.490
for those Darwin users who need it.

00:34:02.600 --> 00:34:04.190
And we'd love to see some of this.

00:34:04.220 --> 00:34:05.350
So if there's anything
you know like that,

00:34:05.350 --> 00:34:06.360
that'd be great to contribute.

00:34:06.360 --> 00:34:10.190
Finally, we have our last section
of documentation,

00:34:10.250 --> 00:34:11.180
the Darwin Documentation.

00:34:11.280 --> 00:34:12.980
That's man pages.

00:34:12.980 --> 00:34:16.230
As if you've done any development
whatsoever on a Unix system,

00:34:16.320 --> 00:34:19.530
you know man pages are critical
for Darwin development.

00:34:19.540 --> 00:34:21.740
If you've done any
development on our system,

00:34:21.770 --> 00:34:24.400
you know man pages are maybe
not in the state that we would

00:34:24.400 --> 00:34:25.930
like to be them in right now.

00:34:25.940 --> 00:34:30.940
So this is a major focus for the
next couple of months for us.

00:34:30.980 --> 00:34:35.380
And what we're working on is, of course,
we want to have a complete set

00:34:35.380 --> 00:34:37.700
of accurate and useful man pages.

00:34:37.700 --> 00:34:41.260
And how we're getting there is,
a few years ago, it made sense.

00:34:41.280 --> 00:34:43.620
At the time,
to take the man pages and put

00:34:43.620 --> 00:34:46.900
them into a documentation project
that a writer would maintain.

00:34:46.900 --> 00:34:50.920
And we ended up separating them
in the code from the projects

00:34:50.920 --> 00:34:53.060
that they were documenting.

00:34:53.100 --> 00:34:56.000
This turns out maybe not to,
at least at this point,

00:34:56.050 --> 00:34:57.680
have been such a great idea.

00:34:57.680 --> 00:35:01.160
And the result is we have some stagnant
man pages that need a lot of updating.

00:35:01.160 --> 00:35:03.630
And the engineers have kind of
gotten out of the habit of keeping

00:35:03.720 --> 00:35:05.090
their own man page up to date.

00:35:05.230 --> 00:35:08.650
So we need to explode this project,
get the man pages back next to

00:35:08.660 --> 00:35:10.820
their commands where they belong.

00:35:10.820 --> 00:35:11.260
Get them back to their original state.

00:35:11.260 --> 00:35:12.640
Get the engineers updating them.

00:35:12.700 --> 00:35:14.800
We need to clean up a lot of old bugs.

00:35:14.920 --> 00:35:19.140
We really need to get back into staying
in sync with our upstream man pages.

00:35:19.140 --> 00:35:21.900
So we need, in particular,
to be working closely

00:35:21.900 --> 00:35:22.880
with the BSD people.

00:35:22.910 --> 00:35:27.150
Get the BSD, free BSD man pages in there
and get that cleaned up.

00:35:27.280 --> 00:35:30.540
And that's, so again,
the next couple of months,

00:35:30.540 --> 00:35:32.060
a major focus for us.

00:35:32.060 --> 00:35:32.780
And you'll be seeing that.

00:35:33.080 --> 00:35:36.150
That's something we primarily,
we will be providing some goals and

00:35:36.150 --> 00:35:39.260
guidelines for people doing their own
commands on how to keep up a man page.

00:35:39.340 --> 00:35:41.240
But the rest of that's primarily
something we need to do.

00:35:41.240 --> 00:35:41.860
We need to do at Apple.

00:35:41.860 --> 00:35:46.380
On Mac OS X,
we're going to provide HTML display of

00:35:46.510 --> 00:35:49.820
the man pages in Project Builder along
with the rest of the documentation.

00:35:49.820 --> 00:35:52.520
We're also considering,
and this is something

00:35:52.520 --> 00:35:54.930
we'd like to get input on,
maybe during the Q&A or if

00:35:54.930 --> 00:35:56.220
you send email or anything.

00:35:56.220 --> 00:35:59.520
We're considering doing like
OpenBSD and some of the others and

00:35:59.520 --> 00:36:03.700
putting up on the Darwin site a full
HTML version of the man pages that

00:36:03.700 --> 00:36:05.240
you can search and navigate through.

00:36:05.240 --> 00:36:09.490
And where that goes on our priority
list depends on how much people want it.

00:36:09.570 --> 00:36:10.320
We're not totally sure.

00:36:12.890 --> 00:36:16.260
So now we get to what might be
really interesting for some of you.

00:36:16.260 --> 00:36:18.890
What actual documentation
do we have at this point?

00:36:18.900 --> 00:36:23.620
First of all, you should be aware that at
this time there's two sort of

00:36:23.620 --> 00:36:26.520
places to go when you're dealing
with Darwin-related information.

00:36:26.560 --> 00:36:28.280
One, of course, is the Darwin site.

00:36:28.590 --> 00:36:32.610
The other, though,
is the ADC Mac OS X website where we

00:36:32.690 --> 00:36:37.570
have a whole kernel page of information
that you may or may not be aware of.

00:36:37.990 --> 00:36:40.380
This includes pointers
to Iocat HeaderDoc,

00:36:40.400 --> 00:36:43.120
Iocat Tutorials, Conceptual Docs, etc.

00:36:43.120 --> 00:36:45.450
In fact, as of this week,
this is a great thing

00:36:45.520 --> 00:36:48.140
to go and check out,
we have the first part of

00:36:48.230 --> 00:36:51.900
our Iocat Fundamentals book
explaining the whole system.

00:36:51.900 --> 00:36:54.980
We have brand new information about
USB and HID up on the website,

00:36:55.020 --> 00:36:57.100
and that's a great place to check it out.

00:36:58.990 --> 00:37:01.130
We have HowTo documents.

00:37:01.420 --> 00:37:04.090
So the Darwin developer,
how to be a Darwin developer

00:37:04.090 --> 00:37:04.900
will get up next week.

00:37:05.080 --> 00:37:06.740
Building Darwin is there now.

00:37:06.790 --> 00:37:09.460
Some general ones like setting
your Intel screen resolution.

00:37:09.560 --> 00:37:12.660
And then of course the
Darwin Documentation HowTo,

00:37:12.660 --> 00:37:19.490
which contains quite a lot of
information on all the stuff

00:37:19.490 --> 00:37:20.970
we're talking about today,
tools you can use, what you need to know,

00:37:20.970 --> 00:37:20.970
etc.

00:37:21.630 --> 00:37:26.150
We are working on, we have tutorials now,
kernel and I/O Kit and

00:37:26.150 --> 00:37:28.320
packaging and such tutorials.

00:37:28.320 --> 00:37:30.700
We're doing a revision of these
to include versioning information.

00:37:30.700 --> 00:37:33.460
These should be up in
the next week or two.

00:37:34.110 --> 00:37:34.950
What we're working on.

00:37:35.040 --> 00:37:39.860
Well, as you can see,
we're starting to bridge the gap

00:37:39.940 --> 00:37:43.370
between Darwin and Mac OS X in
terms of this information.

00:37:43.470 --> 00:37:46.690
So we're no longer thinking
of IOCit documentation and

00:37:46.700 --> 00:37:48.680
such as separate from Darwin.

00:37:48.680 --> 00:37:50.790
It's documenting Darwin technologies.

00:37:50.800 --> 00:37:54.500
Now, an important point there, though,
is this doesn't mean that everyone has

00:37:54.510 --> 00:37:57.360
to be a Darwin developer or go to the
Darwin site to get our information.

00:37:57.440 --> 00:37:59.270
This is how we're developing the doc.

00:37:59.370 --> 00:38:01.460
This is how we're making
our processes available,

00:38:01.460 --> 00:38:04.310
letting people have more
information about what we're doing.

00:38:04.320 --> 00:38:07.930
When we distribute IOCit documentation
or anything else like that,

00:38:07.930 --> 00:38:10.120
it will go to all the standard places.

00:38:10.120 --> 00:38:13.010
It will go to the standard
developer CDs and up on the

00:38:13.170 --> 00:38:15.920
website and all the normal places,
et cetera.

00:38:15.920 --> 00:38:18.540
So the Darwin process is just
an opportunity for us to let you

00:38:18.540 --> 00:38:21.410
get closer to the documentation,
see what we're doing,

00:38:21.410 --> 00:38:23.320
and contribute if you want to.

00:38:23.320 --> 00:38:26.600
We're doing the IOCit Fundamentals book
that I've mentioned a couple times.

00:38:26.640 --> 00:38:27.880
It's a really critical book.

00:38:28.320 --> 00:38:29.700
Go and check out the first part of it.

00:38:29.800 --> 00:38:33.150
We're going to be getting this up
as rapidly as we can to give you

00:38:33.150 --> 00:38:34.840
the whole picture of the IOCit.

00:38:35.090 --> 00:38:38.000
And written by Terry Donahue,
it's the same person who did

00:38:38.000 --> 00:38:41.340
the system overview book for
Mac OS X that you saw a year or two ago.

00:38:41.340 --> 00:38:44.010
So we know it's going to be really good.

00:38:44.420 --> 00:38:47.630
And in addition to more cookbooks,
of course, we're continually working

00:38:47.630 --> 00:38:50.180
on more HeaderDoC coverage.

00:38:51.150 --> 00:38:53.560
This is what we like to call
open source opportunities.

00:38:53.560 --> 00:38:55.260
You might also call it,
it's not there yet.

00:38:55.550 --> 00:38:59.710
So this is all stuff
we'll get to someday,

00:38:59.860 --> 00:39:02.950
but we would love it if people
who know as much or more than

00:39:02.950 --> 00:39:06.300
we do in the community could
contribute in these areas.

00:39:06.300 --> 00:39:08.430
So please,
if you're someone who has information

00:39:08.520 --> 00:39:13.270
in kernel programming or debugging,
architecture, VFS, kernel extension,

00:39:13.270 --> 00:39:17.080
network kernel extensions,
make a note of it.

00:39:17.260 --> 00:39:18.450
Think about doing a HowTo.

00:39:18.580 --> 00:39:19.290
Contact us.

00:39:19.310 --> 00:39:21.980
Email the Darwin Developer List.

00:39:21.980 --> 00:39:23.190
Email me.

00:39:23.430 --> 00:39:26.900
And of course,
HeaderDoC coverage in your own projects.

00:39:26.900 --> 00:39:29.840
And if you see, as Tori did,
HeaderDoC missing in something

00:39:29.840 --> 00:39:36.990
that you know a lot about,
and you could spend an hour and provide

00:39:36.990 --> 00:39:36.990
it and help everyone else out a lot,
that would be really great.

00:39:37.400 --> 00:39:41.650
So if you don't know
the stuff on that list,

00:39:41.690 --> 00:39:44.070
but you'd like to contribute,
join the Darwin Developer List.

00:39:44.080 --> 00:39:46.760
We don't have a special
documentation list at this point,

00:39:46.760 --> 00:39:48.550
because we want everyone
to feel included.

00:39:48.690 --> 00:39:50.560
So join the Darwin Development List.

00:39:50.560 --> 00:39:51.480
Ask what people need.

00:39:51.600 --> 00:39:52.780
See what people are talking about.

00:39:52.780 --> 00:39:55.180
See if there's something
that you can contribute to.

00:39:55.210 --> 00:39:57.580
Write a HowTo document.

00:39:57.610 --> 00:40:02.510
And in particular, as I said,
if you need to, just send me the HTML,

00:40:02.520 --> 00:40:04.240
the RTF, whatever it is.

00:40:04.240 --> 00:40:06.990
I'll turn it into XML for you.

00:40:08.020 --> 00:40:11.020
So on any issue related to the
Darwin Documentation Project,

00:40:11.020 --> 00:40:14.110
you can contact me or send
email to the Darwin Developers

00:40:14.120 --> 00:40:15.900
List for HeaderDoC and such.

00:40:15.900 --> 00:40:18.220
You can contact Matt even better.

00:40:18.340 --> 00:40:20.850
Send email to the
HeaderDoC Developers Mailing List,

00:40:20.900 --> 00:40:22.760
which you can also join.