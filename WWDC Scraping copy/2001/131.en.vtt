WEBVTT

00:00:04.080 --> 00:00:11.800
Hello and welcome to session 131.

00:00:11.860 --> 00:00:16.930
My job as Carbon Technology Manager is
to help you bring your

00:00:16.930 --> 00:00:19.290
application to Mac OS X.

00:00:19.550 --> 00:00:22.780
But of course,
it is critically important to

00:00:22.780 --> 00:00:27.830
continue to support your customers
who are running Mac OS 8 and 9.

00:00:27.900 --> 00:00:30.630
And that's what we're
here to talk about today.

00:00:31.510 --> 00:00:33.360
So what is CarbonLib?

00:00:33.390 --> 00:00:39.330
I'm going to start by defining Carbon as
the set of APIs that you can use

00:00:40.670 --> 00:00:43.620
to write, well I should back up,
excuse me,

00:00:43.710 --> 00:00:48.320
I'll define it as a set of APIs derived
from classic Mac OS that you can use

00:00:48.410 --> 00:00:51.200
to write native Mac OS X programs.

00:00:51.280 --> 00:00:59.820
CarbonLib then is a system extension that
implements the subset of those APIs that

00:00:59.820 --> 00:00:59.820
are available on Mac OS 8 and 9.

00:01:00.020 --> 00:01:05.240
And I say subset because although
Carbon is derived from classic Mac OS,

00:01:05.270 --> 00:01:11.350
all current and future development of
Carbon APIs is targeted at Mac OS X.

00:01:11.780 --> 00:01:15.560
So where it's feasible
and where it makes sense,

00:01:15.560 --> 00:01:19.330
we will continue to bring back
some of those APIs and make

00:01:19.340 --> 00:01:22.600
them run on Mac OS 9 or 8.6.

00:01:22.630 --> 00:01:25.070
But it's important to understand

00:01:26.800 --> 00:01:32.740
Our primary goal is to give
you the APIs you need to write

00:01:32.740 --> 00:01:36.700
killer apps for Mac OS X that
fully exploit that platform.

00:01:36.700 --> 00:01:43.110
It's not always possible for us to go
back and re-engineer Mac OS X-style

00:01:43.110 --> 00:01:46.210
APIs on top of Mac OS 8 or 9.

00:01:46.970 --> 00:01:49.800
So why did we do CarbonLib then?

00:01:49.900 --> 00:01:52.210
Simply to allow you

00:01:52.390 --> 00:01:57.000
to develop for Mac OS X while continuing
to support your customers who are going

00:01:57.000 --> 00:02:00.290
to wait a little bit longer to upgrade.

00:02:01.140 --> 00:02:07.140
The greatest thing about Carbon is that
it provides a single source solution.

00:02:07.150 --> 00:02:09.160
The same code

00:02:09.360 --> 00:02:14.860
can be compiled and run on Mac OS 8, 9,
or 10.

00:02:15.060 --> 00:02:18.610
Of course,
you need to conditionalize and test

00:02:18.760 --> 00:02:23.320
for API availability at runtime as
you always have because not all of

00:02:23.340 --> 00:02:28.170
these APIs are available on every
single OS that Carbon supports.

00:02:28.330 --> 00:02:30.610
We'll get into that a little bit later.

00:02:31.530 --> 00:02:35.170
And the second great thing about
Carbon is that it can provide a

00:02:35.170 --> 00:02:38.760
single binary solution because
we continue to support the

00:02:38.760 --> 00:02:42.690
CodeFragmentManager and CFM executables.

00:02:42.990 --> 00:02:48.370
There are other alternatives as well,
including Mac OS, and we'll talk a little

00:02:48.450 --> 00:02:50.120
bit about that later.

00:02:50.250 --> 00:02:56.890
But rest assured,
the same binaries that you create

00:02:56.890 --> 00:03:02.090
today for Mac OS 8 or 9 will
continue to work on Mac OS X,

00:03:02.090 --> 00:03:02.090
once they're carbonized, that is.

00:03:02.400 --> 00:03:05.640
This diagram simply illustrates
what is the beauty of Carbon.

00:03:05.670 --> 00:03:09.270
That your application
compiled as a Carbon app

00:03:10.100 --> 00:03:17.340
will run on Mac OS 8 or 9 calling
into CarbonLib and on Mac OS X calling

00:03:17.340 --> 00:03:21.900
into the Carbon framework and other
frameworks available on Mac OS X.

00:03:26.300 --> 00:03:30.530
There are two versions of
CarbonLib currently available for

00:03:30.530 --> 00:03:37.330
download from Apple's SDK webpage:
CarbonLib 104 and CarbonLib 131.

00:03:39.550 --> 00:03:43.230
Why two versions?

00:03:43.310 --> 00:03:49.610
Because CarbonLib 104 is intended
for use only on Mac OS 8.1.

00:03:49.940 --> 00:03:56.210
It provides the basic set of
Carbon APIs that you can use to

00:03:56.210 --> 00:03:59.750
run on Mac OS 8.1 through Mac OS X.

00:04:02.390 --> 00:04:06.800
These correspond to the
APIs you'll find in the

00:04:07.150 --> 00:04:07.800
Universal Interfaces version 3.3.2.

00:04:08.430 --> 00:04:12.760
And with this set of APIs,
you can create a good Carbon app

00:04:12.840 --> 00:04:15.330
that will run on all these platforms.

00:04:15.760 --> 00:04:22.050
But with CarbonLib 1.3.1,
which is the current GM release,

00:04:22.060 --> 00:04:27.620
you have available to you a much
broader set of APIs that more closely

00:04:27.790 --> 00:04:30.440
match what you'll find on Mac OS X.

00:04:30.540 --> 00:04:33.200
And I'm going to talk
a bit about this later.

00:04:33.470 --> 00:04:38.190
But the important thing to note
is that with CarbonLib 1.3.1,

00:04:38.770 --> 00:04:43.080
You must target Mac OS 8.6 and
later because many of these,

00:04:43.180 --> 00:04:49.700
well all of these newer APIs cannot
be brought back to Mac OS 8.1.

00:04:51.330 --> 00:04:56.060
An interesting thing about CarbonLib
131 is that it's self-localizing.

00:04:56.090 --> 00:04:59.540
It supports all the languages
you see listed here.

00:04:59.690 --> 00:05:04.230
What this means to you is that you
don't need to carry around within

00:05:04.230 --> 00:05:08.200
your installer different versions
of CarbonLib for these regions.

00:05:08.390 --> 00:05:11.710
When your Carbon app is launched,
CarbonLib will examine

00:05:11.710 --> 00:05:14.270
your VERS resource,
look for the locale,

00:05:14.270 --> 00:05:16.050
and localize accordingly.

00:05:16.480 --> 00:05:18.820
There's not much that
needs to be localized:

00:05:18.820 --> 00:05:22.200
the title of the window menu,
and some error strings,

00:05:22.200 --> 00:05:25.200
and print dialog types of things.

00:05:25.490 --> 00:05:28.350
None of this was necessary
in CarbonLib 104,

00:05:28.360 --> 00:05:31.710
so that version doesn't
need to be localized at all.

00:05:32.920 --> 00:05:37.390
There will be more locales supported
in future revision of CarbonLib,

00:05:37.390 --> 00:05:39.320
which we'll get to later.

00:05:39.850 --> 00:05:43.850
So, to summarize,
this is the version of CarbonLib that

00:05:43.850 --> 00:05:50.190
we recommend you target unless you
absolutely need to support Mac OS 8.1.

00:05:52.210 --> 00:05:54.360
So I mentioned that you
can license CarbonLib.

00:05:54.500 --> 00:05:55.860
There's no fee for this.

00:05:55.860 --> 00:05:58.880
It's similar to QuickTime or many
of the other technologies that

00:05:58.880 --> 00:06:02.500
you've probably already licensed
from Apple at one point or another.

00:06:02.560 --> 00:06:09.370
You simply fill out the usual software
distribution agreement and then

00:06:09.370 --> 00:06:09.370
there's a one-page CarbonLib addendum.

00:06:10.430 --> 00:06:14.560
The license does include Apple Help 163.

00:06:14.560 --> 00:06:21.540
That's for you to install on Mac OS 8.6
because the Apple Help Viewer app did

00:06:21.540 --> 00:06:24.300
not start shipping until Mac OS 9.

00:06:24.430 --> 00:06:29.280
But by moving your help into
the Apple Help HTML format,

00:06:29.490 --> 00:06:32.980
you can deliver your HTML help
content across all these

00:06:33.040 --> 00:06:35.300
Carbon supported platforms.

00:06:35.300 --> 00:06:37.300
We recommend that you do that.

00:06:37.300 --> 00:06:42.040
The CarbonLib 104 license
includes Nav Services 101,

00:06:42.040 --> 00:06:46.610
which we want you to install if
you install CarbonLib on an 8.1

00:06:46.720 --> 00:06:54.130
system because it fixes some bugs
in version 1.0 of Nav Services.

00:06:56.500 --> 00:06:59.810
So this series of slides coming up
here will be familiar to those of

00:06:59.810 --> 00:07:03.400
you who attended Scott Forstall's
Frameworks Overview session.

00:07:03.400 --> 00:07:07.660
But I want to highlight a few things.

00:07:08.700 --> 00:07:19.350
So CarbonLib 1.04 does support
development from Mac OS 8.1 to Mac OS X.

00:07:19.530 --> 00:07:26.100
began with all of the Carbon compatible
APIs that already existed in Mac OS 8.1.

00:07:26.100 --> 00:07:31.670
And then we added the toolbox
accessor functions for opaque

00:07:31.780 --> 00:07:36.420
toolbox data structures,
control window and menu properties,

00:07:36.430 --> 00:07:43.420
Nav Services 1.0, a subset of core
foundation functionality,

00:07:43.420 --> 00:07:44.900
and the first version of
the Carbon Printing Manager.

00:07:45.130 --> 00:07:46.800
This is a solid set of APIs.

00:07:46.800 --> 00:07:51.250
You can definitely write
very good programs targeting

00:07:51.440 --> 00:07:54.280
this CarbonLib 104 set.

00:07:55.900 --> 00:08:01.170
When you step up to CarbonLib
1.3.1 running on 8.6 or later,

00:08:02.850 --> 00:08:12.330
A whole slew of new
APIs become available to you.

00:08:12.330 --> 00:08:12.330
Using these APIs,
you can deliver a much better

00:08:12.330 --> 00:08:12.330
user experience to your customers.

00:08:12.880 --> 00:08:15.460
First and foremost,
the Carbon Event Manager.

00:08:15.480 --> 00:08:19.200
This represents the new event
model for Carbon applications.

00:08:19.200 --> 00:08:22.910
We strongly encourage you
to adopt the Carbon events.

00:08:24.250 --> 00:08:28.980
They will make it easier to write
your Carbon applications and also

00:08:29.130 --> 00:08:33.240
can dramatically improve performance,
especially on Mac OS X.

00:08:33.310 --> 00:08:36.400
Another one I'd like to
highlight is the iBCarbonRuntime.

00:08:36.440 --> 00:08:42.190
This is what allows you to use Interface
Builder's nib files on Mac OS 8 and 9.

00:08:42.250 --> 00:08:46.250
Interface Builder is,
as you've probably seen in

00:08:46.390 --> 00:08:49.530
previous demos here at the show,
a much easier way to

00:08:49.530 --> 00:08:51.560
design your user interface.

00:08:51.610 --> 00:08:56.090
And now, with the iBCarbonRuntime,
you can use those nib files in

00:08:56.170 --> 00:08:58.360
your CarbonLib applications.

00:09:01.300 --> 00:09:05.370
When you're running on Mac OS 9 or later,
that brings in some new

00:09:05.370 --> 00:09:07.230
APIs that were added in Mac OS 9.

00:09:07.310 --> 00:09:13.670
Most importantly, the HFS+ APIs for
improved file management.

00:09:13.670 --> 00:09:18.150
And if you attended the
Carbon Performance Tuning session,

00:09:18.150 --> 00:09:18.150
you learned a bit about those.

00:09:18.790 --> 00:09:22.970
As well as many performance and
stability enhancements that we

00:09:22.970 --> 00:09:25.940
brought with Mac OS 9 and 9.1.

00:09:25.940 --> 00:09:29.240
So if you can't bring your
customers to Mac OS X,

00:09:29.240 --> 00:09:33.480
we really encourage you to try and
bring them at least to Mac OS 9.1.

00:09:35.500 --> 00:09:39.600
And finally, let's not forget why
we're all doing this.

00:09:39.600 --> 00:09:42.360
When your app runs on Mac OS X,
you get Aqua,

00:09:42.390 --> 00:09:47.000
you get all the new Carbon APIs because
that's where they originate,

00:09:47.160 --> 00:09:50.650
and you get access to all
the other APIs that are

00:09:50.770 --> 00:09:56.560
available to you on Mac OS X:
Quartz, all of Core Foundation,

00:09:56.560 --> 00:09:59.070
even BSD or Cocoa APIs.

00:10:00.250 --> 00:10:03.180
I'm not going to get into
all the details here.

00:10:03.180 --> 00:10:07.540
It's pretty well documented now,
but these are the basic steps

00:10:07.830 --> 00:10:10.050
that I recommend you follow.

00:10:10.530 --> 00:10:12.260
to get your app carbonized.

00:10:12.260 --> 00:10:15.900
One, go get the CarbonLib SDK.

00:10:15.910 --> 00:10:18.600
Read the Carbon Reporting Guide.

00:10:18.600 --> 00:10:22.270
Use CarbonDater to preview the
changes you'll need to make.

00:10:22.860 --> 00:10:27.280
Begin adopting those new
APIs and then finally,

00:10:27.360 --> 00:10:32.270
aquify your interface
because if you don't,

00:10:32.870 --> 00:10:37.040
Your app is not going to look very good
on Mac OS X and that's not the reason why

00:10:37.040 --> 00:10:39.200
you're doing Carbon in the first place.

00:10:39.280 --> 00:10:41.660
Let's talk about each of these briefly.

00:10:41.740 --> 00:10:46.560
The CarbonLib 131 SDK includes
both the regular and debugging

00:10:46.560 --> 00:10:48.430
version of the CarbonLib extension.

00:10:48.510 --> 00:10:52.320
The debugging version adds
assertions that help you in

00:10:52.360 --> 00:10:54.500
your development efforts.

00:10:54.550 --> 00:10:58.840
It also includes stub libraries,
the latest universal interfaces,

00:10:58.850 --> 00:11:03.320
A folder full of documentation
with links to more on our website.

00:11:03.900 --> 00:11:07.310
A bunch of sample code and
the Apple Help Viewer 163,

00:11:07.310 --> 00:11:11.770
which as I mentioned you can install
when you're installing on 8.6.

00:11:14.020 --> 00:11:20.100
In the documentation folder on the SDK,
you will find the Carbon Porting Guide.

00:11:22.190 --> 00:11:23.100
Props.

00:11:23.100 --> 00:11:25.300
Read this document.

00:11:25.300 --> 00:11:30.540
It's 150 pages of great information.

00:11:30.540 --> 00:11:33.800
It's got step-by-step
porting instructions.

00:11:34.100 --> 00:11:38.650
Lots of great advice and a complete
example of porting an application

00:11:38.720 --> 00:11:41.760
including before and after sample code.

00:11:41.850 --> 00:11:46.760
And also a section on adopting
Carbon events which I think

00:11:46.760 --> 00:11:49.600
you'll find very interesting.

00:11:52.010 --> 00:11:53.900
Next,
you should run CarbonData on your app.

00:11:53.900 --> 00:11:57.600
The instructions for this are
in the Carbon Reporting Guide,

00:11:57.600 --> 00:11:58.700
but it's very simple.

00:11:58.790 --> 00:12:02.770
You download this tool from our website.

00:12:03.350 --> 00:12:05.910
Drag your application on top of it.

00:12:05.920 --> 00:12:10.770
It spits out a text file that
contains a list of all the

00:12:10.770 --> 00:12:14.940
APIs you're importing from the system,
as well as some other things like

00:12:15.390 --> 00:12:20.350
potential accesses to low memory or
resources stored in the system heap,

00:12:20.480 --> 00:12:23.590
both of which are not
supported in Carbon.

00:12:23.710 --> 00:12:28.490
You can look at this file,
make sure there's

00:12:28.490 --> 00:12:29.430
nothing secret in there,
mail it to us.

00:12:30.600 --> 00:12:36.540
We have a server, receives that mail,
compares that list against

00:12:36.540 --> 00:12:40.070
our Carbon database,
and in about an hour sends you

00:12:40.070 --> 00:12:43.870
back a formatted HTML report
that looks something like this.

00:12:45.910 --> 00:12:55.880
At the top of the report
is this nifty pie chart.

00:12:55.880 --> 00:12:55.880
It gives you an idea of the level of
Carbon compatibility you're already at.

00:12:57.480 --> 00:13:02.750
For each API,
or each function that your app imports,

00:13:02.830 --> 00:13:06.160
we tell you whether it's
supported in Carbon,

00:13:06.160 --> 00:13:07.630
modified in Carbon,

00:13:09.710 --> 00:13:14.760
not recommended in Carbon or unsupported.

00:13:14.800 --> 00:13:18.960
Then the remainder of the report goes
on to list specifically for every

00:13:18.960 --> 00:13:21.340
API that is not fully supported,

00:13:21.960 --> 00:13:28.680
What that API is, its level of support,
and recommendations for alternatives.

00:13:29.400 --> 00:13:38.600
[Transcript missing]

00:13:39.340 --> 00:13:44.370
Use this report to get a general
idea of what you need to do.

00:13:44.370 --> 00:13:49.050
And I would encourage you during
your carbonization process

00:13:49.210 --> 00:13:53.090
Every once in a while,
take your latest binary,

00:13:53.390 --> 00:13:56.260
drop it on CarbonData and get a new
report and see how far you've come.

00:13:56.260 --> 00:13:59.530
It's a great way to gauge your progress.

00:14:01.830 --> 00:14:04.050
So then you have to get to work, right?

00:14:04.280 --> 00:14:07.140
Changing all kinds of stuff in your code.

00:14:07.240 --> 00:14:11.120
Much of that is fairly
tedious and very simple.

00:14:11.160 --> 00:14:14.800
Adopting accessors for opaque
toolbox data structures,

00:14:14.800 --> 00:14:16.480
changing your UPPs.

00:14:16.480 --> 00:14:19.960
We don't support the generic
new routine descriptor,

00:14:19.960 --> 00:14:21.220
for example.

00:14:21.220 --> 00:14:26.820
You have to use specific ones
like new control descriptor,

00:14:26.840 --> 00:14:31.040
new control action
UPP might be one example.

00:14:31.310 --> 00:14:33.780
All of that is really
straightforward and pretty simple,

00:14:33.800 --> 00:14:35.940
search and replace kind of stuff.

00:14:36.030 --> 00:14:41.370
There are some APIs that virtually
all of you will need to adopt.

00:14:42.410 --> 00:14:47.200
If you're currently using standard file,
now is the time to stop.

00:14:47.380 --> 00:14:51.000
Nav Services has been
around since Mac OS 8.

00:14:51.450 --> 00:14:56.920
It's a much better UI and it's
supported on Mac OS X as well

00:14:56.920 --> 00:15:00.080
as 8 and 9 through Carbon.

00:15:00.080 --> 00:15:06.400
We need you to adopt Nav Services and
I'll also describe some

00:15:06.400 --> 00:15:09.890
other benefits of that later.

00:15:09.890 --> 00:15:09.890
The Carbon Printing Manager

00:15:11.030 --> 00:15:15.870
is necessary for anyone
who's going to print because

00:15:16.020 --> 00:15:20.910
Mac OS X has a very different print
architecture than Mac OS 8 and 9.

00:15:20.910 --> 00:15:24.140
And the Carbon Printing
Manager hides that from you.

00:15:24.260 --> 00:15:28.530
By providing a high-level
API that supports both platforms,

00:15:28.530 --> 00:15:32.290
when you're printing on Mac OS 8 or 9,
it calls through to the classic print

00:15:32.440 --> 00:15:38.080
manager and uses the same classic drivers
that you're already familiar with.

00:15:38.080 --> 00:15:43.060
When you're running on Mac OS X,
it uses Mac OS X's native print

00:15:43.110 --> 00:15:45.790
drivers to deliver its output.

00:15:45.840 --> 00:15:47.920
You don't really need
to be aware of that.

00:15:47.920 --> 00:15:51.780
The API is fairly straightforward.

00:15:52.080 --> 00:15:55.540
We try to make it as simple as
possible for you to convert to the

00:15:55.540 --> 00:16:00.310
Carbon Printing Manager without
totally altering your print loop.

00:16:01.090 --> 00:16:06.560
And finally for help,
delivering help to your customers,

00:16:06.690 --> 00:16:11.330
Apple has standardized on HTML help
delivered through the Apple Help Viewer.

00:16:11.330 --> 00:16:16.290
So we no longer support
Apple Guide or Balloon Help.

00:16:16.470 --> 00:16:20.490
We encourage you to adopt
the Apple Help Viewer APIs,

00:16:20.500 --> 00:16:23.580
and if you do things like
tooltips and whatnot,

00:16:23.640 --> 00:16:26.060
then you should use help tags.

00:16:29.240 --> 00:16:33.160
And then the last step,
you've got your app up and running now,

00:16:33.160 --> 00:16:36.010
you want to make it
look good on Mac OS X.

00:16:36.950 --> 00:16:40.810
First thing I would advise you
to do is to create a new high

00:16:40.830 --> 00:16:44.020
quality 128 by 128 bit icon.

00:16:44.050 --> 00:16:46.010
Your icon...

00:16:46.660 --> 00:16:48.850
is the first thing a user sees.

00:16:48.940 --> 00:16:51.840
It is their introduction
to your application.

00:16:51.890 --> 00:16:56.450
And a beautiful, well-designed,
informative icon

00:16:57.770 --> 00:17:02.140
tells the user that you care
and that you want to deliver

00:17:02.150 --> 00:17:03.490
the best possible application.

00:17:08.010 --> 00:17:10.390
Next,
you'll need to adopt a system appearance,

00:17:10.410 --> 00:17:13.740
or at least we highly recommend
that you adopt system appearance

00:17:14.180 --> 00:17:19.780
through things like the Appearance
Manager and other APIs that we've

00:17:19.780 --> 00:17:22.610
made available to you to automatically

00:17:34.490 --> 00:17:34.490
So,
we're going to start with the first step,

00:17:34.490 --> 00:17:34.490
which is to adopt, or excuse me,
to automatically appear as an,

00:17:34.490 --> 00:17:34.490
with an Aqua interface on
Mac OS X or with the Platinum

00:17:34.490 --> 00:17:34.490
interface on Mac OS 8 and 9.

00:17:37.520 --> 00:17:39.950
And also you need to follow
the Aqua Layout Guidelines.

00:17:39.950 --> 00:17:44.040
Both of these steps are much easier
if you use Interface Builder to

00:17:44.080 --> 00:17:52.110
design your interface and then use the
nib files resulting from that to...

00:17:54.300 --> 00:18:00.310
will display this interface
on Mac OS 8 and 9 or Mac OS X.

00:18:02.490 --> 00:18:06.740
And finally, we recommend that you
adopt the Sheets APIs.

00:18:06.830 --> 00:18:11.650
We've made these very easy for
you now because Nav Services and

00:18:11.650 --> 00:18:15.320
the Carbon Printing
Manager both support Sheets.

00:18:17.700 --> 00:18:23.290
So what this means is a single set
of Sheets APIs will do the right

00:18:23.460 --> 00:18:26.300
thing on Mac OS 8 and 9 and Mac OS X.

00:18:26.300 --> 00:18:33.920
So when your app is running on 8 or 9,
you'll continue to get application modal

00:18:33.920 --> 00:18:41.210
dialogs and when you're running on 10,
you'll get document modal Sheets.

00:18:41.210 --> 00:18:41.210
Documentation.

00:18:45.650 --> 00:18:55.060
The definitive source of API support
in Carbon is the header files.

00:18:55.060 --> 00:18:56.310
So always look there first.

00:18:56.380 --> 00:18:59.590
You want to know, is this particular
API supported in Carbon?

00:18:59.940 --> 00:19:07.100
For every function,
it will state right in the headers what

00:19:07.100 --> 00:19:07.100
level of Carbon support is available.

00:19:07.810 --> 00:19:10.600
After that, the Carbon spec.

00:19:10.600 --> 00:19:13.360
Great place to look for
more information about APIs,

00:19:13.490 --> 00:19:18.660
not only availability,
but recommendations for unsupported APIs.

00:19:18.700 --> 00:19:22.520
The Carbon specification is the
source of the information that gets

00:19:22.520 --> 00:19:24.500
put in your Carbon data report.

00:19:24.500 --> 00:19:26.460
I'll talk about that in a second.

00:19:26.490 --> 00:19:29.300
I've already mentioned
the Carbon porting guide.

00:19:30.040 --> 00:19:34.900
Lastly, TechNote 2003 is sort
of a mini-porting guide.

00:19:34.900 --> 00:19:39.310
It's not specific to Carbon developers,
but it provides a lot of useful

00:19:39.310 --> 00:19:44.810
information for anyone moving
code from 8 or 9 to Mac OS X.

00:19:45.690 --> 00:19:50.760
So the Carbon spec lists all the
APIs and the universal interfaces,

00:19:50.760 --> 00:19:54.030
those that are supported
as well as unsupported.

00:19:54.520 --> 00:19:59.720
gives you the inclusion status,
tells you what version of CarbonLib

00:19:59.720 --> 00:20:02.880
or Carbon that they're available in,

00:20:03.350 --> 00:20:07.340
And also, when applicable,
what version of the OS is

00:20:07.340 --> 00:20:10.160
required to support that API.

00:20:10.310 --> 00:20:13.310
And for APIs that aren't fully supported,

00:20:14.590 --> 00:20:20.700
The spec generally provides guidelines
or recommendations for alternative APIs.

00:20:21.190 --> 00:20:25.800
Here's a picture of the Carbon spec.

00:20:25.890 --> 00:20:29.340
This page is on the memory manager.

00:20:29.430 --> 00:20:34.020
You can see that Maximum
Sys is unsupported.

00:20:35.640 --> 00:20:39.090
More masters, for example,
is not recommended.

00:20:39.090 --> 00:20:40.740
And we tell you there,
you should instead use

00:20:40.740 --> 00:20:42.890
more master pointers.

00:20:43.060 --> 00:20:46.090
And as you can see,
More Master Pointers says

00:20:46.200 --> 00:20:49.910
Carbon applications should use this
function instead of More Masters.

00:20:50.400 --> 00:20:54.190
In all cases, for supported APIs,
we tell you what version of

00:20:54.200 --> 00:20:58.060
Carbon it's available in and that
they're available on 8.1 and later.

00:20:58.240 --> 00:21:00.160
Again, it's very useful information.

00:21:00.160 --> 00:21:02.510
It is not updated as
frequently as the header files,

00:21:02.510 --> 00:21:03.560
so there's some lag.

00:21:03.560 --> 00:21:05.630
That's why you should always
look in the headers first.

00:21:05.660 --> 00:21:11.030
The spec is generally updated.

00:21:11.210 --> 00:21:15.860
Several times a year and I think over
time we're going to get in closer sync.

00:21:17.590 --> 00:21:20.770
For additional documentation,
I highly recommend the

00:21:20.770 --> 00:21:22.420
Learning Carbon book from O'Reilly.

00:21:22.450 --> 00:21:24.600
I hope you all picked it up.

00:21:24.690 --> 00:21:26.500
How many of you got the
Learning Cocoa book?

00:21:26.500 --> 00:21:30.420
Okay, leave the room.

00:21:31.450 --> 00:21:35.460
I'm having an informal competition with
my Cocoa Technology Manager counterpart

00:21:35.510 --> 00:21:38.800
and she's winning right now,
which is rather perturbing.

00:21:38.800 --> 00:21:44.580
So I'd like you all to go out and
buy the Learning Carbon book now.

00:21:45.340 --> 00:21:49.630
There's a Carbon tips
and tricks web page.

00:21:49.670 --> 00:21:51.000
You should bookmark this page.

00:21:51.000 --> 00:21:54.990
There's a lot of great information there.

00:21:55.810 --> 00:21:59.230
created by our developer technical
support group so that they find

00:21:59.230 --> 00:22:02.610
issues common to Carbon developers.

00:22:02.720 --> 00:22:06.360
They document that on the web page there.

00:22:06.390 --> 00:22:10.600
In fact, I'll be referring to that a few
more times in this discussion.

00:22:10.630 --> 00:22:13.450
Finally, the Carbon Developer homepage.

00:22:13.880 --> 00:22:17.630
That always contains
pointers to the latest SDKs,

00:22:17.650 --> 00:22:20.930
what's new with Carbon development,
things of that nature and

00:22:20.930 --> 00:22:23.860
I recommend that you bookmark that
one and check back frequently.

00:22:26.210 --> 00:22:29.700
Okay, so that's it for the
getting started part.

00:22:29.810 --> 00:22:31.700
Let's dig in,
let's talk about some of the things

00:22:31.700 --> 00:22:35.800
that you're likely to encounter now
as you begin your development efforts.

00:22:35.800 --> 00:22:39.730
So the first thing you need to do is to

00:22:41.550 --> 00:22:44.640
The first step as you Carbonize your app,
or when you're ready

00:22:44.640 --> 00:22:49.500
to run as a Carbon app,
is create a plist resource.

00:22:49.740 --> 00:22:54.490
This tells Mac OS X that you
are a Carbon application.

00:22:55.970 --> 00:22:59.190
It is nothing more
than the property list,

00:22:59.190 --> 00:23:02.050
the XML property list that
you would create for a

00:23:02.050 --> 00:23:04.300
bundled Mac OS X application.

00:23:04.450 --> 00:23:09.310
That same information simply
pasted into a resource in your

00:23:09.310 --> 00:23:12.300
CFM single binary application.

00:23:13.140 --> 00:23:15.630
You still need to maintain your VERS,
Open, FRF,

00:23:15.660 --> 00:23:21.420
and all these other resources for
compatibility with Mac OS 8 or 9.

00:23:21.420 --> 00:23:24.740
But when you're running as a Carbon app,

00:23:24.970 --> 00:23:29.030
On Mac OS X,
the plist resource supersedes

00:23:29.040 --> 00:23:34.360
and overrules the information
in your resources.

00:23:34.360 --> 00:23:38.270
And this is documented in TechNote 2013.

00:23:39.660 --> 00:23:45.000
By the way, many people ask me about
the CarbZero resource,

00:23:45.000 --> 00:23:48.740
which was the first way that
we recommended people identify

00:23:48.740 --> 00:23:50.020
their Carbon application.

00:23:50.170 --> 00:23:53.030
We still recommend that you
include a CarbZero resource.

00:23:53.100 --> 00:23:57.190
However, you must include a
PList resource as well.

00:24:02.780 --> 00:24:07.550
It is very important that you
continue to test for API availability

00:24:07.550 --> 00:24:10.160
at runtime as you always have.

00:24:10.270 --> 00:24:13.420
When you have an application
that can run on Mac OS 8,

00:24:13.420 --> 00:24:16.140
9 or 10,
it's no different than supporting an

00:24:16.140 --> 00:24:19.500
app when you had an app that ran on 6,
7 and 8.

00:24:19.630 --> 00:24:23.100
Some APIs are available in
different OS releases that

00:24:23.100 --> 00:24:25.200
aren't available in others.

00:24:25.200 --> 00:24:30.150
So the way to do this,
first and foremost, is to use Gestalt.

00:24:30.860 --> 00:24:35.300
Gestalt is the best way to test
for base functionality like "Is

00:24:35.300 --> 00:24:39.180
QuickTime installed?" and then

00:24:40.090 --> 00:24:43.230
When you need to test for specific
APIs that may not be supported

00:24:43.240 --> 00:24:48.050
across all versions of QuickTime,
then use a T vector test to

00:24:48.050 --> 00:24:51.900
find out if that specific
function that you need is there.

00:24:53.320 --> 00:24:55.640
If you haven't used the
T-Bector test before,

00:24:55.640 --> 00:24:58.930
this is documented on the
Tips & Tricks web page.

00:24:59.790 --> 00:25:02.560
And finally,
do not rely on the CarbonLib version

00:25:02.560 --> 00:25:09.100
to determine whether a particular
API is available because CarbonLib

00:25:09.150 --> 00:25:14.950
sits on top of Mac OS 8 or 9 and in most
cases is simply exporting the APIs that

00:25:14.950 --> 00:25:17.460
are available in the underlying OS.

00:25:18.360 --> 00:25:22.000
So it's not a reliable indicator
of whether a particular API is

00:25:22.000 --> 00:25:24.310
there for you at runtime.

00:25:26.960 --> 00:25:34.380
An example of this would be if you said,
"Oh, I'm running on CarbonLib 1.3.1.

00:25:34.590 --> 00:25:37.360
The HFS+ APIs must be available to me.

00:25:37.450 --> 00:25:44.160
You would be wrong because those
APIs were introduced in Mac OS 9.

00:25:44.310 --> 00:25:48.000
So your Gestalt test would
tell you that right up front.

00:25:50.800 --> 00:25:52.600
Accessing non-carbon APIs.

00:25:52.600 --> 00:25:54.040
Yes, you can.

00:25:54.040 --> 00:25:56.400
We don't encourage it.

00:25:56.400 --> 00:26:01.300
It makes your code less portable
and more difficult to maintain,

00:26:01.330 --> 00:26:03.980
but the option is available to you.

00:26:05.650 --> 00:26:09.020
And the way you do that is using
the get shared library function to

00:26:09.020 --> 00:26:13.860
find interface lib and then the find
symbol function to locate the specific

00:26:13.860 --> 00:26:16.600
function that you want to call.

00:26:16.600 --> 00:26:20.890
And this again is documented in
the tips and tricks web page.

00:26:21.400 --> 00:26:25.260
Be sure that you verify that you're
not running on Mac OS X because

00:26:25.260 --> 00:26:30.510
InterfaceLib is not available there.

00:26:31.110 --> 00:26:34.920
If you're doing the proper error
checking with Get Shared Library,

00:26:35.020 --> 00:26:39.010
you'll of course find out it
won't return interface lib,

00:26:39.060 --> 00:26:41.680
but we find that a lot of
developers forget to do that.

00:26:41.700 --> 00:26:47.200
They just assume that it's always
going to return with interface lib,

00:26:47.200 --> 00:26:48.990
and when it doesn't, they crash.

00:26:48.990 --> 00:26:51.190
Try to avoid that.

00:26:53.030 --> 00:26:56.250
There's a few things you need to
be aware of when you're writing

00:26:56.310 --> 00:27:00.550
an app that can run in two very
different memory environments.

00:27:02.160 --> 00:27:05.460
I'm sure you're all aware that
Mac OS X provides essentially

00:27:05.460 --> 00:27:07.090
unlimited address space.

00:27:07.090 --> 00:27:09.160
Okay, four gigs, that's a lot.

00:27:09.350 --> 00:27:15.470
The main thing here is don't
try and allocate all of it.

00:27:15.980 --> 00:27:18.740
It has performance implications.

00:27:18.820 --> 00:27:24.090
There's a finite amount of RAM in
the system and even hard disk space

00:27:24.090 --> 00:27:27.900
for backing store may potentially be
limited and of course it's a lot slower.

00:27:27.900 --> 00:27:31.650
So use what you need and
give it up when you're done.

00:27:31.880 --> 00:27:34.710
That's really all you have to do.

00:27:34.990 --> 00:27:38.580
If you're currently using freemem,
find out how much memory is

00:27:38.590 --> 00:27:41.040
available for you to allocate.

00:27:41.160 --> 00:27:44.760
You're going to find that that's not
very useful on Mac OS X because it

00:27:44.810 --> 00:27:46.570
returns essentially a meaningless value.

00:27:46.570 --> 00:27:49.220
And it returns that same
value every time you call it,

00:27:49.220 --> 00:27:51.390
which is currently 20 megabytes.

00:27:51.440 --> 00:27:52.100
We might change that.

00:27:52.100 --> 00:27:52.740
It doesn't matter.

00:27:52.740 --> 00:28:01.000
It's just an amount that we set to
kind of allow apps who aren't being

00:28:01.000 --> 00:28:01.000
very smart about it to continue to run.

00:28:01.550 --> 00:28:08.940
And another final point is if you're
using zones to manage memory right now,

00:28:08.940 --> 00:28:11.740
you should know that your Grow Zone proc
won't be called on Mac OS X.

00:28:11.760 --> 00:28:15.400
Zones are essentially,
well they're unsupported in Mac OS X.

00:28:15.400 --> 00:28:20.620
Most of the zone functions
are simply no ops on X.

00:28:20.660 --> 00:28:25.420
On Mac OS 8 and 9,
you need to continue to do all

00:28:25.420 --> 00:28:28.530
the same things you've always
done to manage memory there.

00:28:29.560 --> 00:28:33.500
RAM footprint.

00:28:33.500 --> 00:28:37.430
This is primarily of concern
to apps running on 8 or 9.

00:28:38.920 --> 00:28:46.790
CarbonLib introduces,
it brings in some extra

00:28:47.140 --> 00:28:47.920
code that you're probably,

00:28:48.160 --> 00:28:51.560
wasn't there before with InterfaceLib
and so you need to adjust your

00:28:51.560 --> 00:28:54.130
memory requirements accordingly.

00:28:54.130 --> 00:28:57.770
And the amount varies widely so
we can't really give any specific

00:28:57.790 --> 00:29:03.100
recommendations other than retest
and requalify with CarbonLib.

00:29:03.100 --> 00:29:08.570
You'll need to increase your
stack and your heap some amount.

00:29:12.480 --> 00:29:17.910
If you do plug-ins or if you either write
plug-ins or use plug-ins in your app,

00:29:17.910 --> 00:29:22.070
you should know that Carbon apps can
load interface Lib-based plug-ins,

00:29:22.160 --> 00:29:23.540
no problem.

00:29:23.590 --> 00:29:24.820
That's on Mac OS 8 or 9.

00:29:24.850 --> 00:29:29.550
On Mac OS X, of course,
they can't because interface

00:29:29.550 --> 00:29:29.550
Lib is not available there.

00:29:30.910 --> 00:29:34.790
Non-Carbon apps cannot
load Carbon plugins.

00:29:34.810 --> 00:29:39.660
CarbonLib explicitly checks at
launch time that the host app

00:29:39.720 --> 00:29:42.970
is Carbon and if an interface
Lib-based plugin tries to load,

00:29:43.030 --> 00:29:46.540
it will be refused.

00:29:53.320 --> 00:29:56.540
If you've been to the
Carbon events session,

00:29:56.540 --> 00:30:00.250
the Carbon performance tuning,
actually most of the

00:30:00.360 --> 00:30:04.330
keynotes on the first day,
you've probably heard

00:30:04.330 --> 00:30:04.330
over and over again,

00:30:05.320 --> 00:30:07.300
Stop polling.

00:30:07.300 --> 00:30:11.200
Polling is bad, especially on Mac OS X.

00:30:11.210 --> 00:30:14.130
Not so bad on Mac OS 9,
nobody really notices, but on Mac OS X it

00:30:14.130 --> 00:30:15.760
really kills performance.

00:30:15.820 --> 00:30:19.690
One of the best ways to do
that is to adopt Carbon Events.

00:30:20.530 --> 00:30:24.940
The Carbon Event Manager simplifies
your code because it can handle for

00:30:25.070 --> 00:30:27.000
you your human interface elements.

00:30:27.070 --> 00:30:30.500
It can drag your windows, resize,
draw the menu bar,

00:30:30.500 --> 00:30:31.990
all these things for you.

00:30:32.020 --> 00:30:35.980
It takes that out of your event
loop and manages it for you.

00:30:38.110 --> 00:30:40.760
And it can eliminate the need
for null event processing.

00:30:40.760 --> 00:30:45.800
I'll talk about that in a second.

00:30:46.550 --> 00:30:51.130
The biggest areas where we
find application developers are

00:30:51.130 --> 00:30:55.300
polling is with mouse tracking.

00:30:55.300 --> 00:30:58.270
There's a very simple way to stop
doing that using Carbon Events.

00:30:58.320 --> 00:31:00.970
If you have code right
now that uses getMouse,

00:31:01.100 --> 00:31:05.310
button, stillDown,
those kinds of functions in a tight loop,

00:31:05.850 --> 00:31:10.850
You can instead use track mouse location.

00:31:11.470 --> 00:31:13.400
It doesn't alter your loop at all.

00:31:13.400 --> 00:31:15.970
It's very simple to adopt.

00:31:15.970 --> 00:31:21.090
But the difference is the track mouse
location does not return until the

00:31:21.330 --> 00:31:24.590
mouse is moved or a button is released.

00:31:24.710 --> 00:31:27.520
That makes for a much
more efficient system.

00:31:30.320 --> 00:31:35.840
And finally, we continue to support
wait next event in Carbon.

00:31:35.840 --> 00:31:38.470
No problem there,
but you should be aware that there

00:31:38.470 --> 00:31:43.700
are some differences in wait next
event's behavior under Carbon.

00:31:43.800 --> 00:31:48.240
And the primary one is that the
sleep time that you request is

00:31:48.260 --> 00:31:53.560
what you're going to get unless
an event arrives for your app.

00:31:53.600 --> 00:31:57.870
So if you request six ticks,
you will not get control back

00:31:57.870 --> 00:32:00.320
in two ticks with a null event.

00:32:00.350 --> 00:32:03.760
You'll get return after six ticks.

00:32:03.760 --> 00:32:08.790
So the important thing here is that you
can't get control back in two ticks.

00:32:09.280 --> 00:32:15.900
is we really recommend that
you use large sleep times.

00:32:15.900 --> 00:32:19.880
Two or three months should be
sufficient for most applications.

00:32:21.000 --> 00:32:30.690
And then use Carbon timers to get
processing time when you need it.

00:32:34.000 --> 00:32:37.480
I think the best thing to say is
that if you're relying on null events

00:32:37.480 --> 00:32:41.820
right now to do idle time processing,
you'll find that it's not going

00:32:41.910 --> 00:32:43.500
to work reliably under Carbon.

00:32:43.510 --> 00:32:46.190
So really you should
adopt Carbon event timers.

00:32:46.200 --> 00:32:48.280
And it doesn't alter your event loop.

00:32:48.280 --> 00:32:52.380
You can still keep using wait next event,
but just start using timers.

00:32:52.380 --> 00:32:53.160
You'll be much happier.

00:32:53.160 --> 00:32:57.320
Your customers will be much happier
because your app and the rest of

00:32:57.320 --> 00:32:59.790
the system will be more responsive.

00:33:02.770 --> 00:33:06.330
And finally, I'd like to put in a little
plug for application packaging.

00:33:06.390 --> 00:33:10.630
This is the preferred
way to deliver your apps.

00:33:11.500 --> 00:33:25.300
[Transcript missing]

00:33:26.080 --> 00:33:29.740
It supports the localization
scheme of Mac OS X.

00:33:29.790 --> 00:33:34.830
It works on all file systems,
flat file systems as well as HFS.

00:33:35.390 --> 00:33:39.800
And a single package can
deliver more than one binary.

00:33:39.900 --> 00:33:45.960
So you can deliver a CFM executable
for Mac OS 8 and 9 and a

00:33:45.960 --> 00:33:49.170
Mac OS executable for Mac OS X.

00:33:51.240 --> 00:33:57.060
TechNote 1188 describes
packaging today on Mac OS 9.

00:33:57.060 --> 00:34:01.140
We are working on improved
package support in an upcoming

00:34:01.140 --> 00:34:07.000
version of CarbonLib and I'll
talk a bit more about that later.

00:34:08.800 --> 00:34:13.300
And now, I would like to bring
up a very special guest,

00:34:13.300 --> 00:34:17.590
Vince Parsons of the
Adobe Acrobat engineering team,

00:34:17.590 --> 00:34:22.390
to share with you his experiences
porting Acrobat to Carbon.

00:34:23.550 --> 00:34:26.390
Okay, so Mark thought it would be
a good idea if someone who's

00:34:26.390 --> 00:34:28.680
actually been through this process

00:34:31.130 --> 00:34:33.100
I'm going to say a few
words about our experiences,

00:34:33.100 --> 00:34:37.400
what we learned, the mistakes we made,
and hopefully we can teach a little

00:34:37.400 --> 00:34:41.870
bit from what we learned and so you
won't make the same mistakes we did.

00:34:42.950 --> 00:34:45.950
So I'm calling this
CarbonLib from the trenches.

00:34:45.950 --> 00:34:49.370
So it's kind of a group of tips, tricks,
and gotchas we discovered during

00:34:49.370 --> 00:34:52.200
the development of Acrobat Reader 5.

00:34:52.670 --> 00:34:54.590
So first, why did we use CarbonLib?

00:34:54.700 --> 00:35:01.130
We've got a large legacy code base
and we wanted to move that toward 10,

00:35:01.130 --> 00:35:05.590
but we didn't want to sacrifice
our 9 and 8 development.

00:35:05.670 --> 00:35:08.140
We also didn't want to have two
different sets of code bases

00:35:08.210 --> 00:35:09.600
and two different binaries.

00:35:09.600 --> 00:35:12.460
We wanted a single binary that
worked everywhere with a single

00:35:12.460 --> 00:35:14.290
code base that worked everywhere.

00:35:14.730 --> 00:35:19.910
We also wanted to have
an easy way to debug the

00:35:19.910 --> 00:35:23.680
Carbon API code that we're using.

00:35:23.820 --> 00:35:27.910
Even with the latest version of
Metaworks they distributed to show,

00:35:28.080 --> 00:35:31.400
the debugging on OS 9
is still more mature.

00:35:31.400 --> 00:35:36.200
So you can debug your Carbon APIs on
9 as well as 10 if you use CarbonLib.

00:35:36.300 --> 00:35:40.380
And they also provide the debugging
CarbonLib library which gives

00:35:40.380 --> 00:35:44.100
you lots of nice asserts when
you're using the APIs incorrectly.

00:35:44.210 --> 00:35:46.130
And the other thing we got
is we got a lot of goodies

00:35:46.170 --> 00:35:47.590
that came free with CarbonLib.

00:35:47.710 --> 00:35:51.420
Core Foundation, MLTE,
and Carbon Events are used

00:35:51.420 --> 00:35:53.480
extensively in Acrobat.

00:35:53.570 --> 00:35:58.260
Core Foundation and MLTE are available on
OS 9 but the latest and greatest versions

00:35:58.300 --> 00:36:00.300
are only delivered via CarbonLib.

00:36:00.300 --> 00:36:02.540
So you want to make
sure you go that route.

00:36:02.800 --> 00:36:05.820
So a few tips.

00:36:05.820 --> 00:36:07.720
So as Mark discussed,
there are several runtime

00:36:07.720 --> 00:36:09.700
differences you have to worry about.

00:36:09.810 --> 00:36:11.620
There's of course the menu layout.

00:36:11.810 --> 00:36:15.700
So quit and preferences belong
over under the application menu,

00:36:15.700 --> 00:36:19.610
not under the file and edit or
wherever preferences typically goes.

00:36:19.700 --> 00:36:22.920
And rather than just do a
check on system version of 10,

00:36:23.020 --> 00:36:26.610
you should probably use the Gestalt
menu manager Aqua layout bit.

00:36:26.780 --> 00:36:29.610
That way it's more dependable
and you should actually avoid

00:36:29.700 --> 00:36:31.690
system version checks in general.

00:36:31.700 --> 00:36:34.700
The help menu is another issue.

00:36:34.740 --> 00:36:39.700
To get the help menu on 9
there was an API for it.

00:36:39.700 --> 00:36:42.700
On 10 the help menu
doesn't actually exist.

00:36:42.700 --> 00:36:47.560
There's a new API with part of
Carbon called HM get help menu.

00:36:47.700 --> 00:36:52.170
That API will on 10 actually create
the help menu if it isn't already

00:36:52.170 --> 00:36:56.330
there and will return it to you on
8 and 9 as well as tell you which

00:36:56.330 --> 00:37:00.700
offset from the beginning of the
menu the first item actually exists.

00:37:00.700 --> 00:37:02.610
So if you go to the menu and you click
on 8 and 9 when they have the show

00:37:02.610 --> 00:37:05.770
balloons and those sorts of items,
it will let you know what offset

00:37:05.770 --> 00:37:09.700
off the beginning to use when
adding your own menu items.

00:37:11.250 --> 00:37:14.590
Some other issues are window attributes.

00:37:14.670 --> 00:37:19.890
So when you're creating a window
with the Create New Window API,

00:37:19.900 --> 00:37:22.290
there are several
attributes that are 10 only.

00:37:22.290 --> 00:37:25.940
And if you actually create a window
with these attributes on 8 or 9,

00:37:26.090 --> 00:37:28.950
it will fail and you will
just get a null window back.

00:37:30.190 --> 00:37:34.370
So there are some Gestalt checks provided
for actually checking those attributes.

00:37:34.370 --> 00:37:41.530
And just make sure you check the Gestalt
bits before you assign the attributes

00:37:41.530 --> 00:37:43.050
to the window so the create works.

00:37:43.100 --> 00:37:46.080
And the other thing is memory management.

00:37:46.160 --> 00:37:49.080
Handles make little sense on OS X.

00:37:49.100 --> 00:37:54.070
They make great sense,
both handles and 10-mem handles, on OS 9.

00:37:54.100 --> 00:37:57.250
You can check the Gestalt memory
map sparse to know whether you're

00:37:57.250 --> 00:38:00.100
in a sparse environment and
you should use just pointers.

00:38:00.140 --> 00:38:02.500
Or if you're not,
then you should use the handles

00:38:02.520 --> 00:38:04.530
like you're used to under 8 and 9.

00:38:05.710 --> 00:38:10.170
So most applications will call
outside of the core set of

00:38:10.280 --> 00:38:11.760
APIs that are part of Carbon.

00:38:11.760 --> 00:38:13.600
It's just a fact of life.

00:38:13.600 --> 00:38:17.480
And Acrobat does it and it's
actually not a big deal.

00:38:17.850 --> 00:38:23.610
For calling to the OS X only APIs,
just use the callMacoFramework sample

00:38:23.610 --> 00:38:26.360
that's part of the SDK as a guide.

00:38:26.360 --> 00:38:28.600
It's a simple case of
you load a framework,

00:38:28.600 --> 00:38:31.480
find an entry point in it,
and you call it.

00:38:31.600 --> 00:38:34.940
You can use this to call
directly into Core Graphics,

00:38:35.000 --> 00:38:38.730
you can call into I/O Kit,
any of the 10 only APIs that are

00:38:38.730 --> 00:38:41.560
currently exported only through Mac OS.

00:38:41.880 --> 00:38:44.800
You can also call stuff
that exists only in 8 and 9.

00:38:44.800 --> 00:38:48.930
If you're patching traps, yes,
we still patch a trap in Acrobat.

00:38:49.040 --> 00:38:52.360
It's a big no-no, but we do it.

00:38:52.360 --> 00:38:55.510
So you can still call a get-shared
library in interface lib or

00:38:55.510 --> 00:38:59.560
whatever is the appropriate library
for the API you're looking for.

00:38:59.560 --> 00:39:03.620
And do find symbol, and just again,
call the function pointer.

00:39:03.660 --> 00:39:06.100
So you can do that for
dealing with patching traps,

00:39:06.130 --> 00:39:10.650
heap zones, any of the things that aren't
supported in the Carbon API.

00:39:11.900 --> 00:39:13.990
So you've heard a lot this
week about drawing text,

00:39:13.990 --> 00:39:15.880
and everyone says,
"Make sure you draw text the

00:39:15.880 --> 00:39:19.220
right way," because drawing
text the old way looks really,

00:39:19.220 --> 00:39:20.550
really bad on 10.

00:39:20.620 --> 00:39:23.600
So most of us still have
drawString and drawText calls,

00:39:23.840 --> 00:39:26.970
and yes, it does work, but it looks bad.

00:39:27.140 --> 00:39:31.430
The drawThemeTextBox API has been
discussed a lot this conference.

00:39:31.550 --> 00:39:32.200
It works.

00:39:32.270 --> 00:39:32.930
It works well.

00:39:33.110 --> 00:39:35.370
It draws anti-aliased with core graphics.

00:39:35.590 --> 00:39:39.290
It also, because it takes a
CFString as an argument,

00:39:39.290 --> 00:39:44.190
removes a lot of the issues of
encoding and font selection for you.

00:39:44.300 --> 00:39:48.790
So if the text,
you can just pass it in as a CFString,

00:39:48.880 --> 00:39:51.380
the OS automatically figures out, "Oh,
this is Japanese.

00:39:51.530 --> 00:39:55.490
Oh, this is Roman." And we'll pick
the appropriate font if you

00:39:55.490 --> 00:39:59.100
have the language kit installed,
and we'll display the text correctly.

00:39:59.320 --> 00:40:03.960
And starting with CarbonLib 1.3.1,
it is now available on 8 and 9,

00:40:04.000 --> 00:40:05.390
not just on 10.

00:40:05.400 --> 00:40:06.640
Amen.

00:40:08.160 --> 00:40:12.680
So, like many Adobe apps,
we have plugins and we have legacy

00:40:12.680 --> 00:40:15.100
plugins that are linked to InterfaceLib.

00:40:15.100 --> 00:40:19.100
We have to support them because
they're an existing technology.

00:40:19.230 --> 00:40:22.370
And we found a few caveats
with dealing with plugins that

00:40:22.370 --> 00:40:24.100
you should be made aware of.

00:40:24.100 --> 00:40:26.720
First of all,
when a plugin that's InterfaceLib

00:40:26.760 --> 00:40:29.120
based creates a window with,
say, Nucy window,

00:40:29.120 --> 00:40:33.090
it will not necessarily be
created in the right layer.

00:40:33.170 --> 00:40:37.070
There's a very distinct difference
between the modal and the document

00:40:37.070 --> 00:40:41.900
and the floating and those sorts
of layers with CarbonLib and on 10.

00:40:42.150 --> 00:40:46.100
They will pretty much always be
created in the document layer.

00:40:46.100 --> 00:40:49.040
So if you have a modal
dialog created from a plugin,

00:40:49.110 --> 00:40:51.090
it may end up in the wrong layer.

00:40:51.100 --> 00:40:54.390
And this is always true if you
use a custom proc ID because

00:40:54.390 --> 00:40:58.100
the system can't even try to
guess what type of window it is.

00:40:58.110 --> 00:41:02.100
So to solve this, if you see that a
plugin's created a window,

00:41:02.100 --> 00:41:07.330
you can call setWindowClass on it or the
forthcoming setWindowGroup API and just

00:41:07.520 --> 00:41:12.100
move it from the document layer to the
appropriate layer and all will be well.

00:41:13.210 --> 00:41:16.440
Another thing to think
about is Carbon events.

00:41:16.450 --> 00:41:18.110
Now if you're moving
toward Carbon events,

00:41:18.110 --> 00:41:20.710
and Carbon events are coming
anytime you call waitNextEvent,

00:41:20.710 --> 00:41:24.100
or if you're calling runEventLoop,
or there are several other ways.

00:41:24.100 --> 00:41:27.650
Anytime you call into a plugin,
they're often going to call modal dialog,

00:41:27.650 --> 00:41:30.070
they're going to call
waitNextEvent directly,

00:41:30.110 --> 00:41:33.290
they're going to call things
which may cause your Carbon events

00:41:33.370 --> 00:41:35.100
and Carbon timers to be called.

00:41:35.110 --> 00:41:39.230
And so just because you're calling
into a plugin doesn't mean you

00:41:39.230 --> 00:41:43.090
can't be ready for your code
to be called back at any time.

00:41:43.100 --> 00:41:45.980
So just be aware if you have
any re-entrancy issues in your

00:41:45.980 --> 00:41:50.380
Carbon event handlers or your timers,
make sure you think about those before

00:41:50.380 --> 00:41:53.100
you start dealing with the plugin issues.

00:41:53.100 --> 00:41:56.490
So a few tricks.

00:41:58.110 --> 00:42:05.080
There are a whole suite of APIs as
part of Carbon based on CFString.

00:42:05.090 --> 00:42:08.570
The wonderful thing about these,
and I'm sorry, you can create controls,

00:42:08.690 --> 00:42:12.300
windows, menus,
almost all the major UI elements can be

00:42:12.300 --> 00:42:15.000
created with CFStrings for their titles.

00:42:15.000 --> 00:42:19.990
This allows your UI code to be
completely font and encoding agnostic.

00:42:20.090 --> 00:42:22.000
Again, as I'm mentioning,
you stick in a Japanese CFString,

00:42:22.000 --> 00:42:26.000
you stick in a Roman CFString,
you stick in a Chinese CFString,

00:42:26.000 --> 00:42:27.000
the OS does the rest.

00:42:27.000 --> 00:42:29.240
You just pass the string,
it sets the font for you,

00:42:29.340 --> 00:42:30.990
deals with all the encoding issues.

00:42:31.000 --> 00:42:36.160
It also makes it easy if you want to
have a Roman and a non-Roman checkbox,

00:42:36.160 --> 00:42:41.000
say, next to each other,
because just passing the string,

00:42:41.000 --> 00:42:45.060
you can have any number of fonts in
the dialog for the various controls,

00:42:45.120 --> 00:42:48.000
and Carbon takes care of it for
you if the fonts are available.

00:42:50.000 --> 00:42:53.220
There are a couple of limitations.

00:42:53.280 --> 00:42:58.520
There are issues with regard
to using these on OS 9 and 8.

00:42:58.650 --> 00:43:02.410
The menu and window titles are
always going to be the system font.

00:43:02.510 --> 00:43:05.900
You can pass in another string
with a different coding.

00:43:05.900 --> 00:43:09.900
Due to limitations of the underlying OS,
they will always be the system font.

00:43:09.900 --> 00:43:14.800
And they're also limited to 255
bytes because they are translated

00:43:14.870 --> 00:43:18.810
into a Pascal string to go into
the existing functions that

00:43:18.810 --> 00:43:20.930
are underneath in the real OS.

00:43:22.460 --> 00:43:27.390
Another thing to think about is
the Create Window from Nib API.

00:43:27.580 --> 00:43:29.870
Interface Builder has been talked
a lot about in this conference.

00:43:29.950 --> 00:43:33.180
You can create your dialogs and
windows in Interface Builder and

00:43:33.180 --> 00:43:36.320
then create them in a Carbon app
with Create Window from Nib.

00:43:36.430 --> 00:43:38.960
This works on 8.6, 9, and 10.

00:43:38.960 --> 00:43:42.390
It's a whole lot easier than
dealing with D-logs and diddles.

00:43:42.400 --> 00:43:45.850
If you have existing D-logs,
you can import them directly

00:43:45.850 --> 00:43:47.460
into Interface Builder.

00:43:47.460 --> 00:43:50.270
You go to the File menu,
say Import Resource.

00:43:50.430 --> 00:43:51.400
It's there.

00:43:51.400 --> 00:43:55.400
It also has native support for
several of the new control types.

00:43:55.400 --> 00:43:58.370
You can do your bevel buttons,
your round buttons, your progress bars,

00:43:58.370 --> 00:44:03.360
all the types that previously with a
D-log diddle you had to create control

00:44:03.360 --> 00:44:06.170
resources and it was rather difficult.

00:44:06.300 --> 00:44:12.740
A couple of issues with regard to nib
files is they have to be external.

00:44:12.740 --> 00:44:16.190
You cannot embed a nib file into
your application as a resource.

00:44:16.190 --> 00:44:19.170
And this again goes toward
the packaging issue.

00:44:19.200 --> 00:44:22.930
And the nib file is actually
a package itself containing a

00:44:22.930 --> 00:44:27.190
few files and that has to sit
outside of your main executable.

00:44:27.200 --> 00:44:30.160
If you want to actually
use Create Window from Nib,

00:44:30.260 --> 00:44:33.200
see the converter nib
sample on the Carbon SDK.

00:44:33.200 --> 00:44:36.260
And it gives a good description
of how to load the nib file and

00:44:36.490 --> 00:44:38.200
then create the window from it.

00:44:38.200 --> 00:44:44.910
So with all things with new technologies,
there are a few gotchas.

00:44:46.560 --> 00:44:52.840
So there are several APIs that
are currently marked as OS X only.

00:44:53.010 --> 00:44:54.630
Don't assume they'll stay that way.

00:44:55.040 --> 00:45:01.700
Several APIs have migrated from being
X only APIs into CarbonLib over time.

00:45:01.840 --> 00:45:05.920
I mean, a couple examples:
getApplicationTextEncoding, addIn1.2,

00:45:05.920 --> 00:45:08.540
drawThemeTextBox, addIn1.3.1.

00:45:08.690 --> 00:45:10.160
There's going to be more in the future.

00:45:10.350 --> 00:45:14.850
Don't make assumption that if
drawThemeTextBox exists that you're on X,

00:45:14.860 --> 00:45:16.560
or any particular API.

00:45:16.560 --> 00:45:19.960
If you're checking on its existence,
assume that means the API exists,

00:45:19.960 --> 00:45:22.040
not what OS you're running.

00:45:23.460 --> 00:45:28.310
And as Mark said, avoid checking the
Carbon version from Gestalt.

00:45:28.570 --> 00:45:32.400
While it's useful in some minor areas,
in most cases it's a problem.

00:45:32.530 --> 00:45:37.710
This is because if you ask OS X,
it says 1.3, and you ask OS 9,

00:45:37.710 --> 00:45:39.390
it says 1.3.

00:45:39.490 --> 00:45:42.390
They don't mean the same thing,
because the versions of CarbonLib

00:45:42.400 --> 00:45:46.400
and OS X have not matched up
as nicely as they had hoped.

00:45:46.400 --> 00:45:49.380
It's always good to use narrow
Gestalt checks if you can.

00:45:49.740 --> 00:45:52.400
Check for unresolved functions
with a T vector test.

00:45:52.400 --> 00:45:55.170
And if you do need to check
for a CarbonLib version,

00:45:55.170 --> 00:45:58.400
say to work around for a bug
or some other issue like that,

00:45:58.400 --> 00:46:04.400
combine it with a system check so that
you know you're running on Mac OS 9

00:46:04.400 --> 00:46:06.400
and this is the CarbonLib version.

00:46:07.180 --> 00:46:11.060
The only time we call this API is
at lunch because we require

00:46:11.060 --> 00:46:13.100
CarbonLib 1.2.5 and later.

00:46:13.100 --> 00:46:16.310
That's the only time we check
for this API because it's a

00:46:16.310 --> 00:46:18.100
good baseline to work from.

00:46:20.500 --> 00:46:23.300
So resource chain management.

00:46:23.360 --> 00:46:28.770
So the Carbon APIs added a few new
APIs for us to modify the resource chain.

00:46:28.860 --> 00:46:30.670
Previously we had,
if you wanted to modify it,

00:46:30.780 --> 00:46:33.760
you could either open and close
or you could modify the chain

00:46:33.760 --> 00:46:35.820
directly if you knew the structure.

00:46:36.030 --> 00:46:39.490
Right now there are new APIs for
inserting a resource file,

00:46:39.620 --> 00:46:42.100
detaching a resource file,
there's several other

00:46:42.100 --> 00:46:43.350
APIs dealing with this.

00:46:43.400 --> 00:46:48.400
Use these wisely,
especially under CarbonLib.

00:46:48.580 --> 00:46:55.850
As a developer who uses plugins,
it's very tempting to every

00:46:55.980 --> 00:46:58.690
time you call into a plugin,
set up the resource chain,

00:46:58.970 --> 00:47:00.890
put everything in you need,
call the plugin,

00:47:00.900 --> 00:47:03.710
and then as soon as the plugin returns,
you pull everything out of the resource

00:47:03.710 --> 00:47:05.360
chain so you have no resource collisions.

00:47:05.400 --> 00:47:08.100
This doesn't work as well as we'd hoped.

00:47:08.100 --> 00:47:11.090
First,

00:47:11.330 --> 00:47:15.400
There's an issue with regard to it's
not the most efficient thing to do.

00:47:15.400 --> 00:47:18.250
It's far more efficient to set up
your resource chain in the right

00:47:18.250 --> 00:47:24.130
order at the beginning and then do
your get resources and the collisions

00:47:24.130 --> 00:47:28.090
won't happen if the things are aligned
all the way you want them to be.

00:47:28.450 --> 00:47:35.040
Also, there's a bug in Nav Services in
Mac OS 8.6 through 9.1 that will

00:47:35.190 --> 00:47:39.300
cause your resource chain to be
corrupted in certain scenarios.

00:47:39.440 --> 00:47:43.810
So if you actually modify the resource
chain from a Carbon event handler or

00:47:43.840 --> 00:47:47.200
timer that's called during a Nav call,
because Nav will call waitNextEvent

00:47:47.290 --> 00:47:51.410
while its dialogues are up,
it will actually corrupt the resource

00:47:51.410 --> 00:47:53.250
chain when you return from Nav.

00:47:53.330 --> 00:47:57.300
So if you do modify the resource chain
from a Carbon event timer or handler,

00:47:57.330 --> 00:48:00.290
make sure you don't do
it during a Nav call.

00:48:03.140 --> 00:48:06.530
So there are a few things that
OS X does for you just behind the

00:48:06.530 --> 00:48:09.180
scenes that CarbonLib doesn't,
and you've got to make

00:48:09.180 --> 00:48:10.300
sure you do them yourself.

00:48:10.390 --> 00:48:13.160
A couple examples: Create root control.

00:48:13.350 --> 00:48:16.800
If you want to use the new control
embedding architecture built into Carbon,

00:48:16.890 --> 00:48:19.860
you have to create root
control on OS 8 and 9.

00:48:20.180 --> 00:48:23.820
On 10 it's automatic,
on 8 and 9 you have to call

00:48:23.820 --> 00:48:27.700
it explicitly or have a
DLGX resource next to your DLOG.

00:48:28.110 --> 00:48:29.950
Also, idle controls.

00:48:30.260 --> 00:48:33.440
On 10, again, they do that for you to
animate their buttons,

00:48:33.440 --> 00:48:36.500
to animate their progress bars,
chasing arrows, etc.

00:48:36.630 --> 00:48:39.610
On OS 8 and 9,
if you don't call idle controls yourself,

00:48:39.770 --> 00:48:41.000
they won't animate.

00:48:41.100 --> 00:48:45.260
So if you want the chasing arrows,
the progress bar to animate correctly,

00:48:45.260 --> 00:48:49.690
stick a call to idle controls in a
Carbon timer and that'll take care of it.

00:48:51.000 --> 00:48:53.620
So printing.

00:48:53.700 --> 00:48:57.900
Printing is an interesting issue for
Acrobat because we do a lot of it.

00:48:58.120 --> 00:49:02.980
And moving toward the printing
manager APIs in Carbon,

00:49:02.980 --> 00:49:04.900
several things you want to be aware of.

00:49:04.900 --> 00:49:08.860
First, the Carbon printing manager on
8 and 9 is really just a wrap

00:49:08.860 --> 00:49:10.900
around the existing print manager.

00:49:11.050 --> 00:49:17.120
And a lot of the APIs for getting
page sizes and things like that are

00:49:17.120 --> 00:49:19.690
just wrappers around PR general calls.

00:49:20.400 --> 00:49:24.700
So a few mistakes we made,
and hopefully I can let you avoid them,

00:49:24.720 --> 00:49:27.380
is use the session APIs.

00:49:27.440 --> 00:49:29.570
The non-session APIs do work.

00:49:29.640 --> 00:49:32.110
The session APIs work much better.

00:49:32.230 --> 00:49:35.130
And we did the non-session first
and then rewrote our whole printing

00:49:35.130 --> 00:49:37.120
code using the session ones.

00:49:37.170 --> 00:49:39.830
Also,
write your printing code for 10 first,

00:49:39.840 --> 00:49:41.390
not the other way around.

00:49:41.420 --> 00:49:42.730
Again, we made this mistake.

00:49:42.810 --> 00:49:46.920
We wrote it for 9, got it working,
tried it on 10, didn't work at all.

00:49:47.090 --> 00:49:51.700
This is because X is far pickier about
the way you use the print manager.

00:49:51.770 --> 00:49:55.130
If you don't call things in quite
the right order in the right way,

00:49:55.150 --> 00:49:58.000
X will not like it,
but it'll work fine in CarbonLib.

00:49:58.000 --> 00:50:04.790
So we ended up having to rewrite
our printing code yet again for X,

00:50:04.790 --> 00:50:04.790
and once we had it running on X,
it worked everywhere.

00:50:05.310 --> 00:50:09.100
The biggest thing we ran into was
some driver incompatibilities.

00:50:09.100 --> 00:50:12.200
Not all drivers are fully
compatible with CarbonLib.

00:50:12.200 --> 00:50:15.190
You'll see this come up
in several different ways.

00:50:15.420 --> 00:50:19.200
Some features will just be ignored
that are part of the print driver.

00:50:19.200 --> 00:50:23.750
For example, reverse order printing,
invert pages, rotation, end up printing,

00:50:23.750 --> 00:50:25.200
those sorts of things.

00:50:25.200 --> 00:50:28.580
They just may get totally
ignored and your user may

00:50:28.580 --> 00:50:33.200
choose to do two-up printing and
it comes up without that choice.

00:50:33.200 --> 00:50:35.140
Other drivers will not print color.

00:50:35.200 --> 00:50:38.070
They'll print just complete grayscale.

00:50:38.250 --> 00:50:40.180
Again,
this is caused to incompatibilities

00:50:40.290 --> 00:50:43.200
between CarbonLib and
the printer drivers.

00:50:43.200 --> 00:50:46.190
Apple is currently working with the
driver vendors to solve these issues.

00:50:46.190 --> 00:50:49.170
So in the long run,
this will not be an issue.

00:50:49.230 --> 00:50:52.480
But in the short run,
be very aware that this will hit you

00:50:52.600 --> 00:50:54.790
if you are doing lots of printing.

00:50:57.350 --> 00:51:01.840
And the most important thing:
be sure to test, and a lot.

00:51:02.080 --> 00:51:05.710
As new versions of CarbonLib come out,

00:51:05.830 --> 00:51:08.940
Test them as quickly as you can.

00:51:08.940 --> 00:51:12.020
Treat each new version of CarbonLib
like it's a whole new version of

00:51:12.100 --> 00:51:13.790
OS 9 because in many ways it is.

00:51:13.800 --> 00:51:17.460
The seeds do get posted
on the ADC website for

00:51:17.460 --> 00:51:20.110
Select and Premier members.

00:51:20.150 --> 00:51:23.080
When they show up,
get them immediately if you've

00:51:23.080 --> 00:51:25.800
already got a shipping application
or if you're close to shipping.

00:51:25.800 --> 00:51:29.100
Test your entire product because
you can test your product far

00:51:29.100 --> 00:51:30.810
better than Apple ever could.

00:51:30.810 --> 00:51:33.990
While they may find some things,
you'll find things that they

00:51:34.090 --> 00:51:35.750
never thought to look at.

00:51:35.800 --> 00:51:38.800
You don't want to discover that
once you've got an app that's

00:51:38.800 --> 00:51:41.920
actually out there and shipping
that suddenly your user gets a

00:51:41.960 --> 00:51:45.720
new version of CarbonLib through a
software update and your app breaks.

00:51:45.820 --> 00:51:48.670
This has happened to
several third parties.

00:51:48.670 --> 00:51:50.840
You don't want it to happen to you.

00:51:50.890 --> 00:51:54.760
Get the new seeds and test them
immediately and report bugs.

00:51:54.800 --> 00:51:54.800
You don't want to discover that
once you've got an app that's

00:51:54.800 --> 00:51:54.800
actually out there and shipping
that suddenly your user gets a

00:51:54.800 --> 00:51:54.800
new version of CarbonLib through a
software update and your app breaks.

00:51:54.800 --> 00:51:54.800
This has happened to
several third parties.

00:51:54.800 --> 00:51:54.800
You don't want it to happen to you.

00:51:54.800 --> 00:51:54.800
Get the new seeds and test them
immediately and report bugs.

00:51:54.800 --> 00:51:54.800
Get the new seeds and test them
immediately and report bugs.

00:51:54.800 --> 00:51:54.800
Get the new seeds and test them
immediately and report bugs.

00:51:54.800 --> 00:51:55.800
bugs.

00:51:55.850 --> 00:51:58.370
The only way that's going to
get fixed is if you report bugs,

00:51:58.590 --> 00:52:00.900
and do that through bugreport.apple.com.

00:52:00.980 --> 00:52:04.570
So that's that's the biggest
thing I want to leave with you,

00:52:04.570 --> 00:52:06.710
is don't let
incompatibilities affect you.

00:52:06.720 --> 00:52:10.770
And that's it for my part,
thank you very much,

00:52:10.770 --> 00:52:13.970
and good luck in your carbonizing.

00:52:18.230 --> 00:52:19.630
Thank you Vince.

00:52:19.630 --> 00:52:22.490
Great presentation.

00:52:22.610 --> 00:52:27.340
You know, Vince and his team contributed
immensely to improvements in

00:52:27.410 --> 00:52:33.360
CarbonLib and you guys can too by
filing bugs and feature requests.

00:52:34.300 --> 00:52:35.850
So I really encourage you to do that.

00:52:35.860 --> 00:52:38.190
I'm going to stress it again at the end.

00:52:38.210 --> 00:52:40.220
Where are we going with CarbonLib?

00:52:40.410 --> 00:52:42.390
We're going forward.

00:52:43.130 --> 00:52:48.590
I hope it's apparent to you by now
that Apple is investing heavily in

00:52:48.590 --> 00:52:52.340
Carbon and will continue to do so.

00:52:54.400 --> 00:52:59.010
As I said earlier, as much as possible,
we will try and bring back new

00:52:59.010 --> 00:53:02.100
Carbon APIs and make them run on 8 or 9.

00:53:03.670 --> 00:53:06.040
That will make your
development efforts easier,

00:53:06.040 --> 00:53:06.820
obviously.

00:53:06.820 --> 00:53:10.460
But it's important to understand
our focus is Mac OS X.

00:53:10.460 --> 00:53:15.160
But we will continue to support all the
Carbon APIs we've already introduced.

00:53:16.960 --> 00:53:19.840
So what's next with Carbon and CarbonLib?

00:53:19.900 --> 00:53:21.010
CarbonLib 1.4.

00:53:21.140 --> 00:53:23.340
It's currently seated.

00:53:23.350 --> 00:53:27.070
You can download it from the ADC website.

00:53:27.530 --> 00:53:31.690
CarbonLib 1.4 includes some
new APIs to more closely match

00:53:31.800 --> 00:53:34.180
what you'll find on Mac OS X.

00:53:34.580 --> 00:53:38.500
Improved application package support,
as I mentioned earlier,

00:53:38.500 --> 00:53:41.920
is coming in CarbonLib 1.4.

00:53:42.690 --> 00:53:48.070
and support for more localizations:
Brazilian Portuguese, Korean,

00:53:48.180 --> 00:53:50.790
Danish and some others.

00:53:53.390 --> 00:53:55.410
Give us feedback as soon as possible.

00:53:55.510 --> 00:53:58.350
We're early in the seed stage right now.

00:53:58.720 --> 00:54:02.320
So the sooner you give us your feedback,
the more likely it is that we

00:54:02.320 --> 00:54:06.500
can fix that bug or add that
feature that you really want.

00:54:07.110 --> 00:54:08.640
How do you do that?

00:54:08.710 --> 00:54:10.760
BugReport.apple.com.

00:54:10.760 --> 00:54:15.300
Any ADC member, even online members,
can file bugs using our

00:54:15.300 --> 00:54:16.500
bug reporter system.

00:54:16.520 --> 00:54:21.090
They're funneled directly into
engineering and acted upon.

00:54:21.210 --> 00:54:24.290
So please use that method.

00:54:24.400 --> 00:54:28.130
For non-technical feedback,
you can send it to Carbon@apple.com.

00:54:28.190 --> 00:54:33.220
I will see it, others will see it,
and it's also a useful

00:54:33.220 --> 00:54:35.990
feedback mechanism.

00:54:36.260 --> 00:54:39.490
I encourage you to sign up for
the Carbon Development Discussion

00:54:39.490 --> 00:54:42.510
List at lists.apple.com.

00:54:42.590 --> 00:54:47.970
This is a great place to get your
questions answered as well as share

00:54:47.970 --> 00:54:49.660
your knowledge with other developers.

00:54:49.660 --> 00:54:53.690
It's monitored by thousands of
developers and a whole bunch

00:54:53.690 --> 00:54:55.780
of Apple engineers as well.

00:54:57.190 --> 00:55:00.210
If you need one-on-one support,
that's available through our

00:55:00.210 --> 00:55:02.500
Developer Technical Support group.

00:55:02.500 --> 00:55:04.700
You email DTS@apple.com.

00:55:04.700 --> 00:55:06.420
This is fee-based support.

00:55:06.420 --> 00:55:08.850
Those of you who are selected
Premier members receive a

00:55:08.850 --> 00:55:12.140
certain amount of tech support
incidents with your membership,

00:55:12.140 --> 00:55:14.180
but anybody can purchase those.

00:55:16.810 --> 00:55:18.010
Which brings us to the roadmap.

00:55:18.090 --> 00:55:20.750
Well, most of these sessions
have gone by already,

00:55:20.800 --> 00:55:26.740
but I encourage you to watch on ADC TV or
on the DVDs when they come out the

00:55:26.740 --> 00:55:29.240
session on the Carbon Event Manager.

00:55:29.320 --> 00:55:34.490
Remember, improve performance,
stop polling, make your code easier.

00:55:34.660 --> 00:55:38.250
Carbon Windows and Menus,
more of the same.

00:55:38.250 --> 00:55:43.200
And the application packaging and
document binding where you'll learn

00:55:43.200 --> 00:55:44.390
about packages and also how to

00:55:44.900 --> 00:55:50.400
How to use launch services to
bind your document types to

00:55:50.400 --> 00:55:53.790
your applications on Mac OS X.

00:55:53.790 --> 00:55:58.330
If you have feedback that you'd like
to give to the high level toolbox team,

00:55:58.970 --> 00:56:04.140
The feedback forum is today at 3:30,
so right after this session in room C.

00:56:04.870 --> 00:56:06.300
This is me again.

00:56:06.310 --> 00:56:10.260
I am the Carbon Technology Manager,
so I'm the guy you should send

00:56:10.260 --> 00:56:12.970
your issues and concerns to.