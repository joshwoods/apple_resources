WEBVTT

00:00:03.450 --> 00:00:04.420
Good afternoon.

00:00:04.490 --> 00:00:05.970
How's the show going for you all?

00:00:05.990 --> 00:00:08.400
Good?

00:00:08.400 --> 00:00:13.950
Looks like we got another very
pretty good crowd here today.

00:00:14.170 --> 00:00:17.360
My name is Barry Janzen,
Barry Toolman Janzen,

00:00:17.360 --> 00:00:19.690
and welcome to Tool Time.

00:00:19.700 --> 00:00:22.090
We're going to go over the
WebObjects Tools today.

00:00:22.320 --> 00:00:25.230
Before I do that, though,
I've got some good

00:00:25.230 --> 00:00:27.100
news and some bad news.

00:00:27.100 --> 00:00:32.100
The bad news is that I don't
talk as fast as Ernie Probecker,

00:00:32.360 --> 00:00:37.100
and I'm not as funny,
nor do I demo as quick as Steve Heyman.

00:00:37.650 --> 00:00:39.760
That's the bad news.

00:00:40.790 --> 00:00:46.720
The good news is that Ernie told me
that we could give away a titanium

00:00:46.720 --> 00:00:49.770
laptop with WebObjects on it,
and the way we're going

00:00:49.770 --> 00:00:53.070
to give it away is,
this is all the standard disclaimers,

00:00:53.110 --> 00:00:55.950
please invoke all the
standard disclaimers,

00:00:55.950 --> 00:00:57.010
this is a joke.

00:00:57.060 --> 00:01:01.460
Okay, but what we're going to do is
we're going to count to three,

00:01:01.540 --> 00:01:04.450
and when I say three,
the first one to stand up

00:01:04.620 --> 00:01:06.520
is going to get the laptop.

00:01:07.310 --> 00:01:08.310
Okay?

00:01:08.310 --> 00:01:13.530
So here we go, everybody seated please.

00:01:13.530 --> 00:01:16.210
One, two, three.

00:01:17.480 --> 00:01:21.650
Okay, now that I've got your attention,
let's talk about tools.

00:01:21.700 --> 00:01:24.480
The trickiest part of this presentation
is going to be trying to get through

00:01:24.480 --> 00:01:28.080
it without using this number.

00:01:29.550 --> 00:01:31.900
Otherwise it's going to cost me.

00:01:32.030 --> 00:01:36.790
So we're going to talk about
WebObjects Tools today.

00:01:38.890 --> 00:01:42.130
- If I can, there we go.

00:01:42.130 --> 00:01:47.180
So here's what you're gonna learn.

00:01:47.180 --> 00:01:47.180
We're gonna go over

00:01:47.570 --> 00:01:49.690
This session is an introduction to tools.

00:01:49.720 --> 00:01:52.600
There are many other sessions that
go into tools in greater depth,

00:01:52.750 --> 00:01:56.830
but we're going to go over the tools
that WebObjects developers will use

00:01:56.830 --> 00:01:58.940
in building a typical application.

00:01:58.960 --> 00:02:01.740
We'll build a very basic application.

00:02:01.740 --> 00:02:06.000
More specifically,
we're going to build an application that

00:02:06.000 --> 00:02:08.840
uses Direct to Web as a starting point.

00:02:10.870 --> 00:02:15.210
Along the way, we'll expose all the tools
that are typically in the

00:02:15.210 --> 00:02:19.950
WebObjects developers' arsenal,
and we'll also expose some of the

00:02:19.950 --> 00:02:22.960
things that are new in WebObjects 5.

00:02:22.960 --> 00:02:26.960
A little bit of Project Builder in that,
so for some of you,

00:02:26.960 --> 00:02:29.080
I know that will be quite new.

00:02:31.700 --> 00:02:33.280
So what are the tools?

00:02:33.310 --> 00:02:36.370
If you go online and you read
WebObjects Tools and Techniques,

00:02:36.370 --> 00:02:39.210
you'll see that there are three...

00:02:40.400 --> 00:02:41.690
Oh!

00:02:42.010 --> 00:02:43.790
I made it five minutes, okay.

00:02:44.030 --> 00:02:49.950
You'll see that there's this trilogy,
there's this trilogy of

00:02:49.950 --> 00:02:55.200
tools in Project Builder,
EOModeler, and WebObjects Builder.

00:02:55.200 --> 00:02:56.220
Okay?

00:02:56.260 --> 00:03:00.830
If you go somewhere else on the web,
if you look in Ernie's,

00:03:00.900 --> 00:03:03.160
in Ernie's presentation,
if you look at tools and techniques,

00:03:03.160 --> 00:03:05.980
it actually adds direct-to-web in there,
and doesn't talk as much

00:03:06.080 --> 00:03:07.110
about Project Builder.

00:03:07.270 --> 00:03:08.100
Okay?

00:03:08.100 --> 00:03:09.110
So what are the tools?

00:03:09.140 --> 00:03:12.350
We always kind of refer to those three,
but there's two others we'd like

00:03:12.440 --> 00:03:16.140
to talk to you about today as well,
and that's direct-to-web assistant,

00:03:16.150 --> 00:03:19.150
and direct-to-Java client assistant.

00:03:19.180 --> 00:03:19.940
Okay?

00:03:20.090 --> 00:03:24.300
And those are tools that allow us to
rapidly build these direct-to-web and

00:03:24.300 --> 00:03:26.640
direct-to-Java client applications.

00:03:26.640 --> 00:03:30.530
In direct-to-web,
it's a Java applet that connects up to

00:03:30.540 --> 00:03:32.530
your running application and modifies it.

00:03:32.690 --> 00:03:37.250
In direct-to-Java client,
it's a swing UI interface with a

00:03:37.250 --> 00:03:39.080
connection to modify your application.

00:03:39.080 --> 00:03:40.700
It's a very simple way to modify
your swing UI applications

00:03:40.700 --> 00:03:42.740
that are based on web objects.

00:03:42.850 --> 00:03:45.990
So we'll talk about five today.

00:03:46.650 --> 00:03:49.910
First of all, the tasks,
I'll go over the tasks that

00:03:50.020 --> 00:03:51.830
we're going to go through.

00:03:51.830 --> 00:03:55.920
So if you're a new developer,
this is really targeted at you.

00:03:55.920 --> 00:03:59.870
But what we want to do is
start from easiest to hardest.

00:03:59.870 --> 00:04:03.300
A lot of times we come out here,
as systems engineers,

00:04:03.300 --> 00:04:06.580
when we go out and do
demonstrations on WebObjects,

00:04:06.580 --> 00:04:10.610
it's a tremendously powerful and
flexible set of frameworks and

00:04:10.610 --> 00:04:12.740
powerful tools that go with it.

00:04:13.560 --> 00:04:18.410
And a lot of times we go very broad and
very wide and very deep very quickly,

00:04:18.410 --> 00:04:20.380
and we lose a lot of people.

00:04:20.410 --> 00:04:23.910
So we're going to kind of go
through a process here that

00:04:23.990 --> 00:04:26.470
isn't too hard to get started.

00:04:26.480 --> 00:04:31.190
I mean, if you're not a rich,
experienced WebObjects developer that's

00:04:31.220 --> 00:04:35.070
been doing this for years and years,
you should feel at home

00:04:35.070 --> 00:04:37.320
during this presentation.

00:04:37.320 --> 00:04:42.180
If you are an experienced
WebObjects developer,

00:04:42.250 --> 00:04:46.210
and perhaps you haven't... seen
some of these other technologies,

00:04:46.210 --> 00:04:49.420
or used these other
technologies extensively,

00:04:49.420 --> 00:04:53.750
my guess is you know a manager,
or you know somebody you work with,

00:04:53.750 --> 00:04:57.750
who asks you about WebObjects,
and you get the idea that maybe

00:04:57.750 --> 00:05:02.090
they're not going to drill to the
depths of insert objects into both

00:05:02.090 --> 00:05:06.140
sides of relationships with key,
and so they need something a

00:05:06.160 --> 00:05:09.080
little easier to get started with.

00:05:09.200 --> 00:05:13.190
Once they're started,
you can help them out.

00:05:13.400 --> 00:05:13.480
Right?

00:05:13.480 --> 00:05:13.500
Right?

00:05:13.500 --> 00:05:13.520
Right?

00:05:13.520 --> 00:05:13.540
Right?

00:05:13.540 --> 00:05:13.560
Right?

00:05:13.560 --> 00:05:16.860
you can call Apple I services
and we'll help you out.

00:05:16.890 --> 00:05:21.780
So there's lots of places to get help
once you get started on web objects,

00:05:21.810 --> 00:05:24.420
but the trick is to get you started.

00:05:24.500 --> 00:05:26.960
So that's what our goal is
with those technologies.

00:05:27.080 --> 00:05:29.220
Okay?

00:05:33.410 --> 00:05:36.990
Okay, so the tasks are Project Builder,
we're going to start a new project,

00:05:37.050 --> 00:05:40.300
we'll look at what is
involved in the project,

00:05:40.300 --> 00:05:42.300
where do things go,
how do we handle them,

00:05:42.300 --> 00:05:45.370
we'll compile a project,
Project Builder does this for you,

00:05:45.370 --> 00:05:48.300
we'll set some runtime parameters,
show you where that is,

00:05:48.300 --> 00:05:50.940
it's a little different than
the new Project Builder,

00:05:50.940 --> 00:05:53.160
and then we'll launch the application.

00:05:56.110 --> 00:06:01.270
Direct to Web will launch
the Direct to Web Assistant,

00:06:01.270 --> 00:06:07.460
will customize both tasks and entities
with the Direct to Web Assistant,

00:06:07.910 --> 00:06:09.640
and then we'll save and
make changes on the fly.

00:06:09.640 --> 00:06:12.560
If some of you saw
Scott Forstall in the keynote,

00:06:12.640 --> 00:06:16.900
you saw one of the hallmarks to
our way of developing technology,

00:06:16.900 --> 00:06:19.970
and that is when you
have live object systems,

00:06:19.970 --> 00:06:23.020
you can do some pretty cool
things dynamically on the fly,

00:06:23.020 --> 00:06:25.560
and that's what we're
going to try and do today.

00:06:27.430 --> 00:06:31.460
WebObjects Builder,
we're going to take some standard

00:06:31.460 --> 00:06:33.620
components that come in our
application and we're going

00:06:33.620 --> 00:06:34.650
to modify those a little bit.

00:06:34.970 --> 00:06:40.930
Steve Hayman yesterday in session 601
went over this quite a bit yesterday,

00:06:40.970 --> 00:06:44.400
so we won't go into it quite as much as
he did in their other sessions as well.

00:06:48.900 --> 00:07:02.400
[Transcript missing]

00:07:03.190 --> 00:07:05.710
And lastly, Direct to Java Client.

00:07:05.710 --> 00:07:09.380
There are other sessions on this as well,
so what we're going to do is

00:07:09.380 --> 00:07:14.580
simply launch an application,
show you where the Direct to

00:07:14.660 --> 00:07:20.900
Java Client Assistant is,
and just do some browsing of

00:07:20.900 --> 00:07:25.620
some information that we'll use
earlier on in the presentation.

00:07:28.140 --> 00:07:32.320
We'll also put this slide at the end
with some of the key other sessions,

00:07:32.320 --> 00:07:35.440
but we think you should know
this now because other sessions

00:07:35.990 --> 00:07:40.010
will talk about some of these
things and overlap a little bit.

00:07:40.070 --> 00:07:43.150
And if you want to find out,
if you find something in this

00:07:43.150 --> 00:07:46.580
presentation that you really like,
you may want to come to one

00:07:46.580 --> 00:07:48.500
of these following sessions.

00:07:48.500 --> 00:07:50.760
So Project Builder,
there are a number of sessions

00:07:50.810 --> 00:07:52.400
going on with Project Builder.

00:07:53.100 --> 00:07:55.840
I believe the first
one's already completed,

00:07:55.840 --> 00:07:59.160
but there will be a couple
of other ones on debugging.

00:07:59.160 --> 00:08:03.400
There will be a session on
Direct to Web with Miguel here.

00:08:03.420 --> 00:08:07.600
WebObjects Builder will be covered
again a little bit in getting

00:08:07.600 --> 00:08:10.120
the most out of WebObjects Tools.

00:08:14.480 --> 00:08:18.840
EOModelers will be touched upon
at a couple of other sessions

00:08:19.320 --> 00:08:21.180
because it works with EOF.

00:08:21.210 --> 00:08:25.210
So the sessions on EOF will
be covering that as well.

00:08:25.280 --> 00:08:28.630
And Direct to Java Client,
as I mentioned,

00:08:28.630 --> 00:08:34.510
there's a Direct to Java Client session
and an Advanced Java Client session.

00:08:34.630 --> 00:08:40.230
So mark those down as we go through this
and we'll try and give you the sample

00:08:40.230 --> 00:08:43.000
platter here of the WebObjects Tools.

00:08:43.000 --> 00:08:43.000
Okay.

00:08:43.950 --> 00:08:45.940
So let's build a common web app.

00:08:45.970 --> 00:08:51.490
A common question I get when
I meet with customers is,

00:08:51.490 --> 00:08:55.060
"Is WebObjects hard to use?"

00:08:56.100 --> 00:08:59.910
And I used to say, well,
there is a steep learning curve, and yes,

00:09:00.050 --> 00:09:01.520
you know,
and I'd say what Steve's saying,

00:09:01.520 --> 00:09:02.950
and so you learn a lot in
a short amount of time,

00:09:02.950 --> 00:09:05.160
and you know, blah, blah, blah, blah,
blah, blah, blah.

00:09:05.160 --> 00:09:09.400
Now I stop and ask them before
I jump into that and say,

00:09:09.400 --> 00:09:11.200
well, it depends.

00:09:11.200 --> 00:09:13.450
What problem are you trying to solve?

00:09:13.540 --> 00:09:19.020
And when customers start explaining what
kind of problems they're trying to solve,

00:09:19.050 --> 00:09:21.200
it all depends on, you know.

00:09:21.200 --> 00:09:25.100
And a typical thing they're doing
is they're looking at a database.

00:09:26.460 --> 00:09:31.210
and they're creating, reading, updating,
deleting the standard kinds of things.

00:09:31.270 --> 00:09:34.620
Not a lot of business logic,
a little bit of

00:09:34.620 --> 00:09:39.000
customization in the HTML,
and that's about it.

00:09:39.390 --> 00:09:43.170
So you look at them and say, well,
we have some frameworks and we

00:09:43.170 --> 00:09:46.300
can probably do that with no code.

00:09:46.300 --> 00:09:48.300
And they go, oh really?

00:09:48.300 --> 00:09:51.440
Well, but it goes across this table and
it has a too many relationship,

00:09:51.710 --> 00:09:54.370
and it goes across here on a many
to many and it does this and that,

00:09:54.370 --> 00:09:57.300
and here's our whole schema
and see how hard it is?

00:09:57.300 --> 00:10:03.870
And WebObjects has frameworks
in there to help you do that.

00:10:04.110 --> 00:10:07.920
to help you build an application
that does all this without

00:10:08.010 --> 00:10:09.720
having to write code to do it.

00:10:09.770 --> 00:10:14.750
It's only when you solve the hard
and the difficult problems that you

00:10:14.750 --> 00:10:18.060
really have to drill to the depths of
WebObjects to do these kinds of things.

00:10:18.060 --> 00:10:22.140
So the following session, Intro to EOF,
we'll begin to talk

00:10:22.140 --> 00:10:23.930
about that a little bit.

00:10:23.990 --> 00:10:27.790
We'll go into greater depths of how do
you use EOF to solve these hard problems

00:10:27.790 --> 00:10:30.060
that are out there in the industry.

00:10:30.060 --> 00:10:34.060
But a lot of these
problems aren't that hard.

00:10:34.210 --> 00:10:38.060
So we'll show you the get
started way on how to do that.

00:10:38.060 --> 00:10:42.060
The other thing I want to point
out is if you don't know by now,

00:10:42.060 --> 00:10:44.050
wizards are bad.

00:10:44.160 --> 00:10:47.370
If you haven't heard that from
Steve Heyman earlier or if you

00:10:47.450 --> 00:10:51.170
haven't heard that from somebody else,
when we think of wizards,

00:10:51.170 --> 00:10:53.060
we think of code generators.

00:10:53.100 --> 00:10:57.060
Wizards are okay to kind of get you
started and help you out a little bit.

00:10:57.060 --> 00:11:00.020
And Project Builder has a little
one just to sort of ask you.

00:11:00.080 --> 00:11:03.060
Ask you a few questions and just
kind of help you get started.

00:11:03.240 --> 00:11:06.060
But if a wizard is going
to generate a lot of code,

00:11:06.060 --> 00:11:11.310
that's typically a bad thing because
who ends up supporting that code?

00:11:11.740 --> 00:11:14.500
Who's got to support all the
lines of code to this gen?

00:11:14.500 --> 00:11:15.700
And the first thing you're going
to do is you're going to look

00:11:15.700 --> 00:11:18.440
at that and you're going to go,
oh my gosh, who wrote this stuff?

00:11:18.440 --> 00:11:21.520
And now I'm stuck here supporting it.

00:11:21.520 --> 00:11:25.420
So, wizards in general are bad.

00:11:25.650 --> 00:11:29.510
What is better is to use
pre-built frameworks.

00:11:29.750 --> 00:11:31.690
and to hook those and wire those up.

00:11:31.710 --> 00:11:33.440
So you'll see that metaphor
in Interface Builder.

00:11:33.440 --> 00:11:35.360
You'll see that metaphor
in WebObjects Builder.

00:11:35.480 --> 00:11:38.300
You'll see that metaphor in
a lot of places and things

00:11:38.300 --> 00:11:40.050
we do of hooking them up.

00:11:40.190 --> 00:11:43.270
We traditionally use things like plist.

00:11:43.270 --> 00:11:46.250
Well,
now the in thing to say is obviously XML.

00:11:46.360 --> 00:11:48.900
But that's how we hook these things up.

00:11:48.990 --> 00:11:51.250
That's how we get started with these.

00:11:51.350 --> 00:11:54.320
So rather than doing a wizard,
we're going to start a

00:11:54.320 --> 00:11:55.360
direct to web application.

00:11:55.360 --> 00:11:58.710
I think you'll see it's much
more flexible than a wizard.

00:11:59.280 --> 00:12:02.360
Okay,
so getting started with Project Builder.

00:12:02.360 --> 00:12:05.100
Project Builder is,
if you don't know by now,

00:12:05.100 --> 00:12:09.190
Project Builder is the way to
develop WebObjects applications.

00:12:09.200 --> 00:12:13.950
On Mac OS X with WebObjects 5,
it is a new Project Builder if you're

00:12:14.110 --> 00:12:18.970
a traditional WebObjects Builder
and you've come along the way.

00:12:19.110 --> 00:12:22.370
So there are some things in there you'll
need to be aware of that are a little

00:12:22.370 --> 00:12:24.200
bit different and we'll show those.

00:12:25.870 --> 00:12:28.380
Project Builder is our integrated
development environment.

00:12:28.380 --> 00:12:32.460
It also manages,
other than just the standard edit,

00:12:32.460 --> 00:12:36.840
compile, debug code,
it also manages resources for you.

00:12:36.860 --> 00:12:40.400
So we're creating these model files
where we've modeled a database and

00:12:40.400 --> 00:12:44.130
we've got to store that somewhere,
we've got to manage that somewhere.

00:12:44.140 --> 00:12:47.690
So that's included as
a part of the product,

00:12:47.730 --> 00:12:49.980
as a part of the project.

00:12:50.000 --> 00:12:55.290
Same thing with WebObjects Builder.

00:12:55.640 --> 00:12:59.550
It creates HTML and object
descriptions that bind to that.

00:12:59.600 --> 00:13:01.400
It also manages those.

00:13:01.400 --> 00:13:03.600
It handles web server resources.

00:13:03.600 --> 00:13:06.530
It handles a number of other
resources that you have to deal

00:13:06.590 --> 00:13:08.890
with in a typical web application.

00:13:09.530 --> 00:13:13.110
It also handles launching your
applications and runtime parameters

00:13:13.110 --> 00:13:16.600
when you launch those so that
you can test your applications.

00:13:18.880 --> 00:13:21.020
Okay, so the first thing we'll
do in Project Builder,

00:13:21.020 --> 00:13:23.140
we need to select the kind of
project we're going to build.

00:13:23.170 --> 00:13:28.180
And as a new developer told me recently,
the beauty of getting started

00:13:28.190 --> 00:13:31.460
with WebObjects is you launch
Project Builder and now you have

00:13:31.460 --> 00:13:34.390
47,000 project types to choose from.

00:13:34.440 --> 00:13:36.300
Which one?

00:13:36.440 --> 00:13:41.150
Okay, so it is a little difficult to pick
the right one or to know the right one.

00:13:41.150 --> 00:13:43.930
So we'll kind of help
you through that process,

00:13:44.000 --> 00:13:46.560
let you kind of know how to get started.

00:13:48.670 --> 00:13:51.180
But direct to web,

00:13:51.450 --> 00:13:59.500
Think of Direct to Web as creating
a model file much in the same way

00:13:59.500 --> 00:14:06.400
that we model a data dictionary or a
schema coming in from the database.

00:14:06.400 --> 00:14:07.400
It's a little bit different.

00:14:07.400 --> 00:14:10.400
It's more of a rules file, really.

00:14:10.400 --> 00:14:13.960
But you can think of it as a
little bit of abstraction from

00:14:13.960 --> 00:14:18.020
the objects in our application.

00:14:18.500 --> 00:14:22.580
So EOModelers creates an
abstraction from the database.

00:14:22.580 --> 00:14:26.020
It takes data rows and turns
them into objects that we

00:14:26.020 --> 00:14:28.570
like to program in objects,
right?

00:14:29.030 --> 00:14:34.040
and our model here will take
those objects and basically

00:14:34.040 --> 00:14:36.670
describe how to present those.

00:14:37.080 --> 00:14:41.190
So we've now isolated ourselves
both ways a little bit.

00:14:41.190 --> 00:14:43.900
From the user interface,
which can change very quickly,

00:14:43.900 --> 00:14:46.440
and from the database that
can change very quickly.

00:14:46.440 --> 00:14:51.920
So Direct to Web will give us by
default a standard login page.

00:14:52.150 --> 00:14:54.920
Nothing too exciting there.

00:14:54.920 --> 00:15:01.930
The Web Assistant then connects up to
this application that we've launched,

00:15:01.930 --> 00:15:06.450
and it'll allow us to
customize that on the fly.

00:15:06.640 --> 00:15:07.580
So that's what we're going to do.

00:15:07.580 --> 00:15:10.780
We'll launch the application,
and then we'll customize

00:15:10.780 --> 00:15:11.840
it as we go along.

00:15:13.670 --> 00:15:16.420
What do people use Direct to Web for?

00:15:16.420 --> 00:15:19.410
Traditionally,
a few people have used it for doing

00:15:19.410 --> 00:15:21.790
things like validating my model.

00:15:21.850 --> 00:15:25.180
I have an object model from my database.

00:15:25.250 --> 00:15:29.040
Can I get from my
customers to my suppliers?

00:15:29.040 --> 00:15:33.710
Can I traverse relationships?

00:15:33.710 --> 00:15:37.420
Can I traverse key value coding
through all this stuff to get through

00:15:37.580 --> 00:15:41.680
all these relationships and make my
application work the way it should?

00:15:41.680 --> 00:15:45.950
You can use it as a validation tool that,
yeah, this actually has all the

00:15:45.950 --> 00:15:48.350
relationships that I need in my model.

00:15:48.380 --> 00:15:54.430
It's also very useful for
creating administrative apps.

00:15:54.580 --> 00:15:58.810
How many of you have developed an app
and you get done and somebody says,

00:15:58.890 --> 00:16:02.720
well, we've got to have a way
for our secretaries to get

00:16:02.810 --> 00:16:05.200
information into the system?

00:16:05.200 --> 00:16:09.200
You don't want to sit there and do
a quick application or something.

00:16:09.200 --> 00:16:11.650
You can just throw it into
Direct to Web and hand it over.

00:16:11.680 --> 00:16:12.180
You can do it forever immediately.

00:16:12.180 --> 00:16:12.820
Okay?

00:16:12.820 --> 00:16:14.790
So that's another use.

00:16:14.820 --> 00:16:19.150
But what we'd like to do is customize
it just a little bit more and begin to

00:16:19.150 --> 00:16:23.750
show you how you can actually use this
as a real live running application,

00:16:23.800 --> 00:16:30.040
not just for admin apps and not just
for pumping data into the application.

00:16:31.640 --> 00:16:35.510
Again, WizardBed, remember that.

00:16:35.810 --> 00:16:38.170
We're going to build a new project,
so this is what you'll do any time

00:16:38.170 --> 00:16:40.500
you're building a WebObjects application.

00:16:40.500 --> 00:16:43.500
Again,
here's the 47,000 choices that you have.

00:16:43.930 --> 00:16:52.970
We will select a
Direct to Web application,

00:16:52.970 --> 00:16:53.000
and we'll name this app "Our School."

00:16:55.640 --> 00:16:58.800
These are the pre-built frameworks
that WebObjects includes.

00:16:58.800 --> 00:17:02.480
If I've got other ones,
such as when Steve Heyman built

00:17:02.480 --> 00:17:05.630
his demonstration yesterday,
wanted to add in a few other frameworks,

00:17:05.660 --> 00:17:08.510
you can do this up front if you
know you're going to want to include

00:17:08.510 --> 00:17:11.350
some pre-built code that either
your company's developed or maybe

00:17:11.530 --> 00:17:13.560
Apple iServices has developed for you.

00:17:14.940 --> 00:17:16.930
Let's add a model.

00:17:17.040 --> 00:17:20.540
For right now, we're just going to kind
of pass the model off until

00:17:20.540 --> 00:17:22.540
later in the presentation.

00:17:22.560 --> 00:17:26.740
Just consider it some magic
somebody has handed you on how

00:17:26.740 --> 00:17:28.940
to connect up to a database.

00:17:31.310 --> 00:17:33.780
So we choose our model.

00:17:33.820 --> 00:17:36.700
And now we have a couple
of looks in Direct to Web.

00:17:36.700 --> 00:17:39.950
We'll choose the neutral look,
but we can change this in the

00:17:39.950 --> 00:17:43.230
rules at any time if you want
to change the look and feel.

00:17:43.600 --> 00:19:51.100
[Transcript missing]

00:19:51.340 --> 00:19:54.960
WebServer Resources,
if we have WebServer Resources,

00:19:54.960 --> 00:19:58.450
things that need to go with
the HTTP server and be copied

00:19:58.450 --> 00:20:01.900
over there to be vended,
that's where they'll go.

00:20:01.900 --> 00:20:03.960
And then the frameworks
that I just included,

00:20:03.960 --> 00:20:06.720
again, if I want to include some
others after I've started up,

00:20:06.920 --> 00:20:08.320
this is where I would put them.

00:20:08.320 --> 00:20:09.740
Okay?

00:20:12.460 --> 00:20:14.520
So that's our application.

00:20:14.520 --> 00:20:17.040
Hammer means build,
so we're building the application.

00:20:17.040 --> 00:20:21.260
If you want to take a look at
what is spewing out of here,

00:20:21.260 --> 00:20:23.800
you'll notice that it's not make anymore.

00:20:23.800 --> 00:20:27.100
It's now jam,
using jam to build the files.

00:20:27.100 --> 00:20:28.880
And it's built.

00:20:30.020 --> 00:20:33.310
The other thing that's kind of new,
if you're just walking

00:20:33.310 --> 00:20:36.060
up to Project Builder and
you're like most guys,

00:20:36.060 --> 00:20:38.600
I admit it,
that don't want to read the manual

00:20:38.600 --> 00:20:42.720
or listen to your wife and pull into
a gas station to get directions,

00:20:42.720 --> 00:20:46.060
you go to enough of these sessions,
we'll all give you one or two tips,

00:20:46.060 --> 00:20:48.180
and you'll learn Project Builder here.

00:20:49.600 --> 00:20:52.320
Executables, there we go,
that's much better, thank you.

00:20:52.320 --> 00:20:56.700
Minus, whoa, port, port.

00:21:00.000 --> 00:21:05.100
[Transcript missing]

00:21:08.260 --> 00:21:10.700
You can also enter a number
of other things in there.

00:21:10.700 --> 00:21:15.620
Like I said, we will need to build this
application right now.

00:21:18.100 --> 00:21:22.080
When the build target is done,
we can launch it now.

00:21:22.080 --> 00:21:24.950
And that should go a little better.

00:21:30.350 --> 00:21:32.140
As I mentioned,
there are a number of parameters

00:21:32.170 --> 00:21:36.140
you can set when you launch this,
and those all show up here.

00:21:36.210 --> 00:21:41.720
So you can see where my port is set,
and these are all in red here,

00:21:41.720 --> 00:21:44.980
the runtime parameters
that you can set here.

00:21:45.020 --> 00:21:48.990
It used to be a separate panel,
so get used to that a little bit

00:21:48.990 --> 00:21:51.700
of the moving panels as we go here.

00:21:51.720 --> 00:21:56.530
Okay, our application is ready.

00:21:56.530 --> 00:21:56.530
Okay.

00:22:05.100 --> 00:22:10.360
Okay, so the default page in a Direct to
Web application is a query all.

00:22:10.450 --> 00:22:13.610
And query all just says,
take all the entities that you

00:22:13.610 --> 00:22:17.210
had in that database thing that
somebody handed you and pick

00:22:17.210 --> 00:22:18.720
one thing and put it in there.

00:22:19.000 --> 00:22:19.720
Take a good guess.

00:22:19.720 --> 00:22:20.280
Okay?

00:22:20.280 --> 00:22:22.160
So it takes a pretty good
guess on these things.

00:22:22.650 --> 00:22:26.790
Course, course name,
where course name begins with B.

00:22:28.550 --> 00:22:29.450
Okay, I can go out and search.

00:22:29.570 --> 00:22:32.570
Boom, there's my courses and my
course database for my school.

00:22:32.580 --> 00:22:33.240
Okay?

00:22:33.240 --> 00:22:37.170
Anytime we hit home,
we go back to the main page.

00:22:37.170 --> 00:22:37.620
Okay?

00:22:37.620 --> 00:22:40.950
We can also begin to
customize this a little bit.

00:22:41.070 --> 00:22:45.390
So if you're building your first app,
you're probably not

00:22:45.520 --> 00:22:47.910
going to do the full...

00:22:48.230 --> 00:22:50.300
Insert, Update, Delete,
all this kind of stuff with

00:22:50.330 --> 00:22:51.780
multiple tables and a big thing.

00:22:51.870 --> 00:22:56.700
If you got WebObjects out of the box,
how many of you got the book

00:22:56.780 --> 00:22:58.320
out that said Getting Started?

00:22:58.360 --> 00:23:02.060
So the Getting Started book is
probably how you got started,

00:23:02.220 --> 00:23:02.800
right?

00:23:02.800 --> 00:23:07.990
You did Guess Book,
and then you did a simple Movies Demo.

00:23:08.040 --> 00:23:12.380
So when you do a Movies Demo
or get started that way,

00:23:12.380 --> 00:23:16.060
usually you're only querying
on one or at most two entities.

00:23:17.080 --> 00:23:18.700
And then we're traversing down a path.

00:23:18.760 --> 00:23:21.400
So I don't want to make
this quite so complex.

00:23:21.460 --> 00:23:27.190
But I'll show you as we go through this,
there's two ways actually of doing this.

00:23:27.290 --> 00:23:30.160
I can launch it in the browser,
which is a simpler way.

00:23:30.160 --> 00:23:33.890
And once the browser is getting
meshed up with the underlying

00:23:33.890 --> 00:23:37.090
Java code that's in the MRJ,
they'll be able to deal

00:23:37.090 --> 00:23:38.600
with this much better.

00:23:38.600 --> 00:23:40.560
But for now...

00:23:42.580 --> 00:23:47.780
We will walk this fine line as I walk
off the edge of the stage here.

00:23:47.780 --> 00:23:51.040
So it's going to be a little tight here,
but let's see what happens.

00:23:51.040 --> 00:23:52.840
Okay, that's good.

00:23:56.310 --> 00:24:00.320
So the Query All page
is the default page.

00:24:00.320 --> 00:24:04.580
It doesn't have a customization,
but I'm going to customize the entities.

00:24:04.600 --> 00:24:07.480
As we said,
we can customize the entities and the

00:24:07.530 --> 00:24:11.000
tasks that are involved in this app.

00:24:11.020 --> 00:24:19.110
So picture your manager or your
coworker working on this and saying,

00:24:19.110 --> 00:24:21.170
OK, well, I can make all those read only.

00:24:21.230 --> 00:24:23.710
What's that-- that's going
to change a little bit.

00:24:23.800 --> 00:24:28.320
Now I can also take course-- I probably
only want to look at for now--

00:24:28.320 --> 00:24:31.910
let's pick courses and students.

00:24:35.400 --> 00:24:36.810
And let's save that off.

00:24:36.910 --> 00:24:36.940
OK.

00:24:36.980 --> 00:24:38.400
Reload.

00:24:38.480 --> 00:24:38.730
Boom.

00:24:38.740 --> 00:24:39.040
OK.

00:24:39.510 --> 00:24:40.990
So now I've only got two.

00:24:41.020 --> 00:24:42.520
I've cut that down to two entities.

00:24:42.730 --> 00:24:43.670
The others are hidden.

00:24:43.740 --> 00:24:46.380
So there were three categories here.

00:24:46.450 --> 00:24:50.310
If you can read the tiny font,
it's hidden entities, read-only entities,

00:24:50.310 --> 00:24:51.390
and read-write.

00:24:51.470 --> 00:24:52.240
OK.

00:24:52.290 --> 00:24:52.910
So now I've got two.

00:24:52.970 --> 00:24:54.440
That's a good start.

00:24:54.600 --> 00:24:54.980
OK.

00:24:55.240 --> 00:24:59.270
So let's look at students.

00:25:01.300 --> 00:25:05.300
Let's look at students whose
last name begins with B.

00:25:05.380 --> 00:25:06.590
Okay, so we've got a number of them.

00:25:06.610 --> 00:25:08.600
I don't like first name
in front of last name,

00:25:08.600 --> 00:25:12.140
so again, I can go into the Assistant.

00:25:12.260 --> 00:25:17.490
And now I'm going to go into Expert mode.

00:25:17.730 --> 00:25:23.770
Okay, so if I look at the
properties of this page,

00:25:29.180 --> 00:25:33.400
I've got first name and
I've got last name in here.

00:25:33.400 --> 00:25:41.000
And I can customize that to some
extent by selecting last name.

00:25:41.240 --> 00:25:44.000
Moving it up a notch,
so that'll come first.

00:25:44.000 --> 00:25:47.570
But you'll notice,
if you were at yesterday's session,

00:25:47.570 --> 00:25:51.430
Steve talked a little,
Steve Heyman talked a little bit about

00:25:51.430 --> 00:25:56.070
key value coding and going across
relationships that come from our model,

00:25:56.150 --> 00:25:59.730
that students have a 2-1
relationship to photo.

00:25:59.740 --> 00:26:06.010
So I can select photo.photo and
move this into my application,

00:26:06.010 --> 00:26:08.340
or move this into my page.

00:26:08.340 --> 00:26:13.820
And notice Direct to Web is
smart enough to figure out

00:26:13.820 --> 00:26:17.380
the attributes that are there.

00:26:17.380 --> 00:26:17.380
I can save this.

00:26:18.030 --> 00:26:20.460
And let's check our browser again.

00:26:20.520 --> 00:26:22.740
Ah, it looks much nicer.

00:26:22.880 --> 00:26:25.840
Although a motley crew they be,
don't they?

00:26:26.050 --> 00:26:29.290
Okay, some of you may recognize
a few of those faces.

00:26:29.880 --> 00:26:32.190
will have a quiz later.

00:26:32.220 --> 00:26:34.000
OK?

00:26:34.100 --> 00:26:37.410
So that'll be our student list page.

00:26:37.640 --> 00:26:41.600
So we can move through this
application one by one,

00:26:41.600 --> 00:26:44.460
picking off all the
different kinds of things.

00:26:44.640 --> 00:26:46.320
So this is what we can do.

00:26:46.320 --> 00:26:52.760
We can go in here and select
and fix the user interface

00:26:52.760 --> 00:26:56.860
for courses and for students,
and we'll map down until those things

00:26:56.860 --> 00:27:00.780
cross over until I look at students and
all the courses that they're taking.

00:27:00.780 --> 00:27:02.140
So why don't we do that?

00:27:03.160 --> 00:27:06.130
Okay, in this list page,
I've also got courses.

00:27:06.130 --> 00:27:08.260
Okay.

00:27:14.200 --> 00:27:22.480
So I can move courses over
here and I can inspect it.

00:27:22.480 --> 00:27:23.890
OK?

00:27:24.500 --> 00:27:27.640
I can do a too-many table,
and maybe what I want to list

00:27:27.640 --> 00:27:29.280
is specifically the course name.

00:27:29.410 --> 00:27:31.600
So let's save that.

00:27:35.020 --> 00:27:38.380
take a look at what we have.

00:27:38.390 --> 00:27:40.620
So it's collapsing the courses.

00:27:40.620 --> 00:27:42.940
Let's clean that up.

00:27:42.950 --> 00:27:44.780
Save again.

00:27:49.000 --> 00:27:52.640
So now I have the students and I've
crossed a many to many relationship

00:27:53.900 --> 00:27:56.080
and I can list the courses.

00:27:56.650 --> 00:27:57.760
Still haven't done any coding yet.

00:27:57.930 --> 00:28:02.370
Still I'm just configuring basically
the rules on how we're mapping

00:28:02.530 --> 00:28:04.950
from models to applications.

00:28:05.060 --> 00:28:10.140
So if I look at-- let's
sort these by last name.

00:28:10.210 --> 00:28:11.780
By clicking on the icon, I can sort them.

00:28:11.820 --> 00:28:17.310
Let's look at a course.

00:28:19.430 --> 00:28:25.540
Basic Circuits Inspection looks
like it could use a little work,

00:28:25.540 --> 00:28:25.540
so let's go back home
and clean up another one.

00:28:26.390 --> 00:28:28.730
So let's look at courses.

00:28:28.730 --> 00:28:31.100
We've cleaned up some
of the student pages.

00:28:31.100 --> 00:28:37.490
Let's clean up some of the courses pages.

00:28:40.240 --> 00:28:41.770
All right, so here's the courses.

00:28:41.830 --> 00:28:46.660
Let's take-- it looks like in here,

00:28:48.120 --> 00:28:49.040
Cost is free.

00:28:49.040 --> 00:28:53.000
Obviously, this is a free university.

00:28:53.060 --> 00:28:55.720
So let's take out some of these things.

00:28:55.780 --> 00:28:59.380
We'll leave in name.

00:28:59.380 --> 00:29:04.250
And let's leave in instructor name.

00:29:06.200 --> 00:29:08.960
and save that and reload.

00:29:08.960 --> 00:29:11.240
And that looks a little better.

00:29:11.240 --> 00:29:12.440
OK.

00:29:12.440 --> 00:29:14.540
Let's sort them like that.

00:29:14.540 --> 00:29:16.640
And I can do the same thing here.

00:29:16.640 --> 00:29:20.620
So I can list in this list page,
I can actually list all the students

00:29:20.680 --> 00:29:23.940
that are in that page as well
and traverse the relationship.

00:29:23.990 --> 00:29:27.950
So there's a relationship
called Students.

00:29:30.660 --> 00:29:33.400
Again, I'm crossing the barriers
from one table to another.

00:29:33.470 --> 00:29:37.300
To do this in another tool,
normally you'd be writing SQL joins

00:29:37.300 --> 00:29:41.350
and joining tables and having
to deal with all this stuff.

00:29:41.640 --> 00:29:46.590
Let's put it in a table
again and let's display their

00:29:46.590 --> 00:29:52.290
last name and let's save it.

00:29:54.020 --> 00:29:56.640
OK, there we go.

00:29:56.640 --> 00:29:59.970
OK,
so now I can begin to loop a little bit.

00:30:01.110 --> 00:30:02.500
I can look at individuals.

00:30:02.510 --> 00:30:04.060
Let's clean up one more thing.

00:30:04.060 --> 00:30:07.900
Let's clean up the
inspection for students,

00:30:07.900 --> 00:30:10.930
and let's clean up the
inspection for courses.

00:30:10.980 --> 00:30:14.090
So I don't like the fact
that it lists seven courses.

00:30:14.160 --> 00:30:16.200
That looks kind of ugly.

00:30:18.540 --> 00:30:22.740
So I'll go back to my web assistant.

00:30:22.780 --> 00:30:28.190
Let's put take out enrolled.

00:30:29.260 --> 00:30:32.510
Let's take last name and bubble it up.

00:30:32.620 --> 00:30:36.680
First name, I'm bubbling this up.

00:30:40.500 --> 00:30:44.260
Let's take photo.

00:30:44.260 --> 00:30:46.170
And actually,
I want to move that out and traverse

00:30:46.200 --> 00:30:48.940
the relationship for photo again.

00:30:48.990 --> 00:30:52.250
So as I'm inspecting a student,
we'll display their photo both in the

00:30:52.250 --> 00:30:54.340
list page and in the inspection page.

00:30:54.340 --> 00:30:56.340
Okay.

00:30:56.340 --> 00:30:58.340
Let's add that.

00:30:58.340 --> 00:31:03.340
Make it an image.

00:31:06.790 --> 00:31:11.940
And in the courses,
we're going to select the course name.

00:31:14.530 --> 00:31:17.410
Let's save that.

00:31:17.410 --> 00:31:17.940
Reload.

00:31:17.940 --> 00:31:18.530
There we go.

00:31:18.540 --> 00:31:20.450
One more thing.

00:31:22.180 --> 00:31:26.180
I'm not a big fan of collapsing.

00:31:26.180 --> 00:31:30.840
All right, so let's not allow collapsing.

00:31:30.840 --> 00:31:32.590
There we go.

00:31:42.560 --> 00:31:44.460
I'll clean it up one more time, OK?

00:31:44.460 --> 00:31:49.020
All right,
so now we basically have an application

00:31:51.550 --> 00:31:54.140
that I can take a student,
look at their courses,

00:31:54.190 --> 00:31:56.060
go across to the courses.

00:31:56.060 --> 00:31:59.650
I need to clean up the inspect
courses so that I can display

00:31:59.720 --> 00:32:01.500
who's all in the course.

00:32:01.500 --> 00:32:03.970
So let's synchronize that.

00:32:04.810 --> 00:32:15.070
This is always one that is fun to
do because we can sometimes as this

00:32:15.100 --> 00:32:23.330
application goes along we can go a
bit too quick and actually bind it up,

00:32:23.470 --> 00:32:25.880
but let's give it a shot here.

00:32:32.680 --> 00:32:36.750
Okay, so we'll keep courses and
we'll keep course instructor.

00:32:36.760 --> 00:32:37.600
There we go.

00:32:37.600 --> 00:32:38.600
Okay.

00:32:38.600 --> 00:32:43.590
Okay.

00:32:43.590 --> 00:32:44.600
That looks too simple.

00:32:44.600 --> 00:32:46.600
Let's go back and add students.

00:32:46.600 --> 00:32:57.810
And let's put a table in there
that has a student's last name.

00:33:04.400 --> 00:34:26.700
[Transcript missing]

00:34:27.370 --> 00:34:30.830
So we'll go in here and
fix or change all three.

00:34:30.830 --> 00:34:32.280
We'll change the login
panel a little bit,

00:34:32.280 --> 00:34:33.680
we'll change the menu
wrapper a little bit,

00:34:33.750 --> 00:34:35.870
and we'll change the header a little bit.

00:34:36.270 --> 00:34:39.640
We'll show off some of the
things of WebObjects Builder.

00:34:39.670 --> 00:34:43.170
WebObjects Builder is the way
that you edit HTML in WebObjects.

00:34:43.200 --> 00:34:47.330
As Steve mentioned yesterday,
if you want to deal with the files that

00:34:47.340 --> 00:34:50.260
WebObjects Builder normally deals with,
you can use anything.

00:34:50.400 --> 00:34:53.100
But we think it's easiest
to use in WebObjects Builder

00:34:53.110 --> 00:34:54.470
for a couple of reasons.

00:34:54.500 --> 00:34:58.850
It edits your HTML,
but it uses a standard metaphor

00:34:58.850 --> 00:35:04.020
that we have of objects,
an object browser on the bottom.

00:35:04.020 --> 00:35:08.820
And what we're doing is we're
binding those objects to the HTML.

00:35:08.820 --> 00:35:13.850
The only tag you'll see in the
HTML from us is the WebObjects tag.

00:35:13.860 --> 00:35:17.950
So we really try and stay out of there,
and instead we try and dynamically

00:35:17.950 --> 00:35:19.970
bind these objects with memory.

00:35:20.400 --> 00:35:25.110
So we're doing that with
minimal impact on the HTML.

00:35:25.180 --> 00:35:29.000
WebObjects Builder also
has built-in integration,

00:35:29.000 --> 00:35:33.090
as you saw yesterday in
Steve Heyman's presentation.

00:35:33.650 --> 00:35:39.620
WebObjects Builder is a web-based
software that allows you to integrate

00:35:39.620 --> 00:35:41.060
entities from EOModeler into WebObjects
Builder and it will automatically

00:35:41.060 --> 00:35:43.840
create a display group object for us
in order to connect up to the backend.

00:35:43.840 --> 00:35:47.410
WebObjects Builder also has
integration with Project Builder.

00:35:47.510 --> 00:35:53.860
So if I'm changing code
in WebObjects Builder,

00:35:53.860 --> 00:35:57.430
it automatically and instantaneously
updates in Project Builder.

00:35:57.970 --> 00:36:02.000
So let's take a look at that
and customize that a little bit.

00:36:02.000 --> 00:36:05.960
Okay,
if we can go back to the demo machine.

00:36:12.130 --> 00:36:14.040
So here are my web components.

00:36:14.040 --> 00:36:18.340
You can see I have three,
as I said before.

00:36:18.360 --> 00:36:20.350
Nobody stood up, good.

00:36:27.490 --> 00:36:31.080
Click on those to launch
WebObjects Builder.

00:36:31.080 --> 00:36:34.520
And let's go ahead and
bring up all three.

00:36:34.530 --> 00:36:40.190
And then we can just move
Project Builder to the background.

00:36:40.190 --> 00:36:40.190
Okay?

00:36:41.920 --> 00:36:44.660
First, let's take a look at our
login page that we had,

00:36:44.660 --> 00:36:47.010
our main page.

00:36:48.550 --> 00:36:53.290
So remember we said WebObjects
Builder has the HTML part on the top

00:36:53.480 --> 00:36:55.310
and the object part on the bottom.

00:36:55.390 --> 00:36:57.000
I can browse objects.

00:36:57.000 --> 00:37:02.390
You'll find the general design
pattern of browsing and browsing

00:37:02.390 --> 00:37:04.040
objects to be a standard thing.

00:37:04.040 --> 00:37:05.390
It's one of my favorite developers.

00:37:05.390 --> 00:37:06.520
I'm from Boulder, Colorado.

00:37:06.520 --> 00:37:08.190
It's one of my favorite developers.

00:37:08.190 --> 00:37:11.110
It says it's all simply
a matter of browsing.

00:37:11.160 --> 00:37:13.180
You can browse everything.

00:37:13.180 --> 00:37:17.180
So he wrote a tool that browses
the Oracle schema and browses

00:37:17.180 --> 00:37:19.100
the Objective-C runtime.

00:37:19.100 --> 00:37:21.580
It's all just browsing, he says.

00:37:21.580 --> 00:37:24.000
So that's all we're
doing here on the bottom.

00:37:24.010 --> 00:37:27.440
We can look at application objects,
session objects.

00:37:27.440 --> 00:37:32.300
Below the line are methods
or actions that I've got.

00:37:32.420 --> 00:37:35.780
So my main.java has a
default page action,

00:37:35.780 --> 00:37:39.360
which probably is bound
to the login panel.

00:37:39.360 --> 00:37:40.220
Okay?

00:37:40.220 --> 00:37:45.520
So I'm going to... clean
up the table a little bit.

00:37:45.540 --> 00:37:51.270
As we've shown you a little bit before,
you can see the HTML along the bottom,

00:37:51.270 --> 00:37:54.330
the depths of the
HTML path along the bottom.

00:37:54.440 --> 00:37:57.600
So if I want to look at
this table row right here,

00:37:57.600 --> 00:38:00.300
or if I want to look at
what is included in a form,

00:38:00.300 --> 00:38:03.940
a WebObjects form,
I can look at that level.

00:38:04.000 --> 00:38:05.240
So it's very handy.

00:38:05.240 --> 00:38:08.980
It's also very handy when
you're tying methods to objects.

00:38:09.200 --> 00:38:13.900
You can bind here or I can bind
as I drag from my... my object

00:38:13.900 --> 00:38:16.590
to bind to the HTML either place.

00:38:16.640 --> 00:38:16.820
Okay?

00:38:17.010 --> 00:38:17.710
Very handy.

00:38:17.740 --> 00:38:23.420
Sometimes if you have some complex HTML,
much easier to deal with in that fashion.

00:38:23.420 --> 00:38:24.860
Okay?

00:38:24.870 --> 00:38:26.220
All right.

00:38:26.220 --> 00:38:29.270
Let's take a look at a table row here.

00:38:29.300 --> 00:38:37.410
Let's get rid of the assistant part
because I'm not really going to have...

00:38:37.950 --> 00:38:40.980
now that our app is looking pretty good,
we're probably going to not

00:38:40.980 --> 00:38:42.650
need the assistant anymore.

00:38:43.180 --> 00:38:47.560
Let's take and center that.

00:38:47.940 --> 00:38:50.850
And let's look for an
image that we have laying,

00:38:50.880 --> 00:38:53.430
just happen to have laying around.

00:38:54.300 --> 00:38:56.830
All the education WebObjects.

00:38:56.830 --> 00:39:02.550
Now when I drag an image or any other
kind of resource into my application,

00:39:02.590 --> 00:39:05.080
it's going to ask me,
do you want to add this

00:39:05.480 --> 00:39:07.300
as a global resource?

00:39:07.300 --> 00:39:07.980
OK.

00:39:08.220 --> 00:39:09.930
So yes I do.

00:39:09.980 --> 00:39:13.640
It adds it as a global
resource to my project.

00:39:13.640 --> 00:39:14.280
OK.

00:39:14.280 --> 00:39:17.210
So I can save that.

00:39:17.770 --> 00:39:23.020
I can also look at what this
page looks like in the raw HTML.

00:39:23.020 --> 00:39:27.740
Notice what I had highlighted here.

00:39:28.240 --> 00:39:31.590
Whatever I happen to
highlight here as I move over,

00:39:31.750 --> 00:39:33.160
highlights here.

00:39:33.160 --> 00:39:36.860
So WebObject name equals
Education WebObjects.

00:39:36.860 --> 00:39:39.160
So it named that right there in the HTML.

00:39:39.160 --> 00:39:44.580
And I can easily, again,
if I'm having trouble finding

00:39:44.750 --> 00:39:50.690
something embedded in a table,
I can click on it here and switch

00:39:50.690 --> 00:39:50.690
between views and actually see where
that is where it's highlighted.

00:39:51.310 --> 00:39:56.820
I can also get somewhat of a view of
what it's going to look like as a best

00:39:57.010 --> 00:40:00.890
guess in the rendering in the HTML.

00:40:03.870 --> 00:40:06.140
There are palettes,
as Steve mentioned yesterday.

00:40:06.140 --> 00:40:10.110
He has many more palettes than I do.

00:40:10.160 --> 00:40:13.880
But you can drag and drop other
things off the palettes into here.

00:40:13.970 --> 00:40:19.210
If I had this image on a palette already,
it would be something that I could

00:40:19.210 --> 00:40:22.720
just drag into my project and bind up.

00:40:22.720 --> 00:40:26.710
The dynamic things that WebObjects
includes are on the bottom row here.

00:40:26.710 --> 00:40:31.270
So as you hold your mouse above those,
you can see all the kinds of things

00:40:31.270 --> 00:40:33.480
that we can bind up to WebObjects.

00:40:33.800 --> 00:40:34.800
Thank you.

00:40:36.920 --> 00:40:40.140
And I can also add
other variables or keys,

00:40:40.140 --> 00:40:42.180
and it does this in a very smart way.

00:40:42.180 --> 00:40:50.270
So if I want to add a key such as,
let's call it a course, and it's a class,

00:40:50.270 --> 00:40:54.120
this will list all the different
kind of classes I have access to.

00:40:54.120 --> 00:40:57.490
But it's not just the
standard object types.

00:40:57.490 --> 00:41:01.000
It also figures out and
substitutes in things like

00:41:01.420 --> 00:41:04.030
courses that come from my EOModel.

00:41:04.040 --> 00:41:08.030
So it understands how to connect
up to the database and include

00:41:08.030 --> 00:41:10.340
these things in my application.

00:41:10.340 --> 00:41:14.950
When I add that,
my course object now understands

00:41:15.060 --> 00:41:20.250
what are the attributes that
it's pulling from our model.

00:41:20.400 --> 00:41:38.700
[Transcript missing]

00:41:40.520 --> 00:41:43.210
So we'll delete that.

00:41:43.440 --> 00:41:48.020
So there's many powerful things
you can do with WebObjects Builder.

00:41:48.020 --> 00:41:49.940
We'll keep that as our main page.

00:41:49.940 --> 00:41:53.480
And let's go on to some of
the other reusable components

00:41:53.520 --> 00:41:56.200
that are in our application.

00:41:57.710 --> 00:42:03.480
So you'll notice on the page
there's a menu header and a...

00:42:04.060 --> 00:42:08.480
This is the page wrapper.

00:42:08.560 --> 00:42:13.080
It's an object that we use in WebObjects.

00:42:14.170 --> 00:42:20.350
In order to get reuse on a
lot of our pages very quickly,

00:42:20.350 --> 00:42:23.640
so I can wrap any page in this
page wrapper and it gets all

00:42:23.640 --> 00:42:28.940
the settings in there for free,
when I drag the image in again, it says,

00:42:28.940 --> 00:42:31.040
do you want to replace,
since I've already put

00:42:31.040 --> 00:42:32.710
this in the resources,
I know that,

00:42:32.710 --> 00:42:35.720
I've got something in there by that name,
do you want to replace it or

00:42:35.880 --> 00:42:37.160
do you want to just use it?

00:42:37.250 --> 00:42:38.110
Let's just use it.

00:42:38.120 --> 00:42:42.100
Okay, so we'll include that
in our page wrapper,

00:42:42.230 --> 00:42:45.760
we'll call that one good, save that.

00:42:45.790 --> 00:42:54.480
Okay, now our last page is
the menu on the side.

00:42:55.040 --> 00:42:58.750
It's a read-only application,
so we're not going to

00:42:58.750 --> 00:43:00.540
insert anything new.

00:43:00.600 --> 00:43:04.180
So again,
I can select anything that I have in

00:43:04.180 --> 00:43:08.590
WebObjects Builder and simply delete it.

00:43:08.590 --> 00:43:08.590
Okay?

00:43:09.300 --> 00:43:12.030
We probably don't want
to customize anymore.

00:43:12.400 --> 00:43:16.260
Notice I can see on the tagline that
that's what I'm trying to delete.

00:43:16.310 --> 00:43:20.270
We can delete that as well.

00:43:20.270 --> 00:43:20.270
Okay.

00:43:20.440 --> 00:43:21.920
Let's save that.

00:43:22.010 --> 00:43:25.740
And let's keep this one open so we can
show you how this can modify on the fly

00:43:25.740 --> 00:43:28.590
or how we can do other kinds of things.

00:43:28.620 --> 00:43:30.190
Okay?

00:43:30.620 --> 00:43:34.980
So that's WebObjects Builder
in a very short time frame.

00:43:34.980 --> 00:43:38.640
Let's launch our project again.

00:43:38.640 --> 00:43:40.730
Rebuild and launch.

00:43:55.600 --> 00:44:02.600
Let's take a look at what we have.

00:44:02.600 --> 00:44:08.000
Okay.

00:44:08.070 --> 00:44:09.860
So here's our new login panel.

00:44:09.870 --> 00:44:13.370
We can clean this up however you want,
but this certainly looks better

00:44:13.590 --> 00:44:16.620
than what I started with.

00:44:16.630 --> 00:44:21.710
Foo, Bar, again in my super secret
Apple Connect login panel.

00:44:22.320 --> 00:44:25.090
Okay, so now I can search.

00:44:25.340 --> 00:44:28.700
There's one thing I'm
not wild about in here.

00:44:28.860 --> 00:44:30.810
It says entities.

00:44:30.820 --> 00:44:32.010
If you can see it in the upper left.

00:44:32.010 --> 00:44:36.090
So entities doesn't probably
mean anything to most of

00:44:36.190 --> 00:44:37.760
the teachers in my school.

00:44:37.760 --> 00:44:40.100
So let's take a look
in WebObjects Builder.

00:44:40.100 --> 00:44:40.960
I don't see it.

00:44:40.960 --> 00:44:42.940
It's hard to see again in the HTML.

00:44:42.980 --> 00:44:48.950
So this is one of those instances
where it's kind of nice to go into.

00:44:51.620 --> 00:44:53.360
WebObjects Builder Raw Mode.

00:44:53.360 --> 00:44:56.220
And I can search on entities.

00:44:56.240 --> 00:44:56.920
And there it is.

00:44:56.920 --> 00:45:01.990
And let's change this
to looking for-- OK.

00:45:03.340 --> 00:45:07.140
So it's handy sometimes to have the
raw HTML there as well so I can search

00:45:07.140 --> 00:45:09.540
for difficult things that are hidden.

00:45:09.550 --> 00:45:13.020
And again,
do I have to recompile this app now?

00:45:13.020 --> 00:45:16.680
No, because it's all dynamic on the fly.

00:45:16.680 --> 00:45:19.000
And notice it's looking
for-- I can look for courses.

00:45:19.000 --> 00:45:21.540
I can look for students.

00:45:21.540 --> 00:45:25.440
Let's look for, again, courses.

00:45:29.860 --> 00:45:33.640
There's my courses, basic circuits,
and I can traverse my relationships.

00:45:33.640 --> 00:45:34.920
Okay?

00:45:34.920 --> 00:45:38.060
Not a bad app for how many minutes?

00:45:39.680 --> 00:45:41.080
About a half an hour at most.

00:45:41.110 --> 00:45:44.160
If I wasn't talking so much,
I could probably do it in about five.

00:45:44.160 --> 00:45:44.980
Okay?

00:45:44.980 --> 00:45:45.780
Thanks.

00:45:51.520 --> 00:45:57.680
Okay, so you can begin to see the power
of what we can do with these tools.

00:45:57.680 --> 00:46:00.700
And yet we're building
these straightforward apps

00:46:00.700 --> 00:46:05.480
without developing any code,
and we can do this very rapidly,

00:46:05.480 --> 00:46:08.100
but yet not lose the power
of WebObjects underneath.

00:46:08.100 --> 00:46:12.040
So we haven't taken away any of
the incredible power that a lot of

00:46:12.040 --> 00:46:15.460
serious developers that have been
using this for a long time understand

00:46:15.460 --> 00:46:16.790
is lying underneath the covers.

00:46:16.830 --> 00:46:20.490
So what a great way to get started
with a tool that isn't going to

00:46:20.490 --> 00:46:24.370
hit the ceiling as soon as we
walk away from this application.

00:46:24.380 --> 00:46:28.520
Okay, so to talk a little bit more,
I've kind of abstracted away from

00:46:28.710 --> 00:46:31.330
where this information all came from.

00:46:31.330 --> 00:46:37.980
So in order to talk about that,
I'm going to bring out Dan Montana.

00:46:38.100 --> 00:46:41.790
No, Joe Moreno to talk about EOModeler.

00:46:41.890 --> 00:46:42.360
Thank you.

00:46:44.900 --> 00:46:48.220
Afternoon,
I'm Joe Moreno with Apple Eye Services.

00:46:48.280 --> 00:46:52.290
About two minutes to two this afternoon,
I was in the WebObjects lab.

00:46:52.290 --> 00:46:56.120
Someone came up to me and said, hey Joe,
aren't you doing introduction

00:46:56.120 --> 00:46:57.320
to WebObjects Tools?

00:46:57.320 --> 00:46:59.060
And I said, why yes.

00:46:59.060 --> 00:47:02.450
And they said, well,
that begins in two minutes.

00:47:02.450 --> 00:47:06.000
So, obviously it was wrong,
but I about had a heart attack,

00:47:06.030 --> 00:47:09.280
thinking I wasn't going to
make it over here on time.

00:47:09.280 --> 00:47:12.100
For about the next 15 minutes,
or maybe even shorter

00:47:12.100 --> 00:47:14.980
if I can squeeze it in,
I'm going to talk about EOModeler.

00:47:14.980 --> 00:47:18.970
But I can't tell you what EOModeler
does unless you know what an EOModel is.

00:47:19.000 --> 00:47:22.140
So, it's going to be more on EOModel,
what an EOModel is.

00:47:22.140 --> 00:47:26.860
An EOModel provides persistent
data store connectivity.

00:47:26.860 --> 00:47:31.500
It maps data into objects
and it defines relationships.

00:47:31.500 --> 00:47:34.620
And these circles that you see,
these disks,

00:47:34.620 --> 00:47:38.880
the red disks with the yellow circles,
those represent EOs.

00:47:38.880 --> 00:47:41.430
if you've never seen that before.

00:47:42.540 --> 00:47:45.740
All an EO is is a Java object in memory.

00:47:45.830 --> 00:47:49.200
Absolutely no difference,
with the exception that an

00:47:49.200 --> 00:47:55.810
EO connotates the data came from,
say, a row in a database table.

00:47:57.400 --> 00:48:01.240
Each EOModel WebObjects app
connects to a specific data source.

00:48:01.240 --> 00:48:05.930
So in your WebObjects application you
can have multiple data connections.

00:48:06.050 --> 00:48:09.280
Now it does not have to
be a relational database.

00:48:09.290 --> 00:48:15.070
It could be a flat file, it could be XML,
or it could be screen scraping.

00:48:15.100 --> 00:48:19.240
But for the rest of my little talk here,
I'm just going to go on ace option,

00:48:19.240 --> 00:48:22.290
we're talking to a
relational database system.

00:48:22.300 --> 00:48:29.100
Also, an EOModel will map data at
runtime into particular data types.

00:48:29.100 --> 00:48:33.080
Example here is a var char would
become a Java line string and

00:48:33.080 --> 00:48:34.640
int would become a Java line num.

00:48:34.700 --> 00:48:40.240
It doesn't have to happen like this,
but that's generally what makes sense.

00:48:41.090 --> 00:48:43.290
This is the Connection
Dictionary Inspector,

00:48:43.300 --> 00:48:45.000
which I will show you on my demo.

00:48:45.000 --> 00:48:47.800
If you can see it in the back,
all it has is the Connection

00:48:47.830 --> 00:48:48.990
Dictionary information.

00:48:48.990 --> 00:48:54.720
We're using JDBC, OpenBase,
and then the URL where

00:48:54.720 --> 00:48:57.510
you find the database.

00:48:59.320 --> 00:49:03.630
There's usually, doesn't have to be,
but there is usually a one-to-one

00:49:03.630 --> 00:49:10.540
mapping between a database table and
an EL or a Java class in your project.

00:49:10.690 --> 00:49:13.830
And this is where you can
see the mapping provided.

00:49:13.830 --> 00:49:22.070
A student entity or student database in
your database table maps to a student EL.

00:49:22.160 --> 00:49:24.540
Very intuitive, makes sense.

00:49:25.740 --> 00:49:28.280
Also again,
it provides the mapping between

00:49:28.280 --> 00:49:31.580
columns and EO attributes.

00:49:32.560 --> 00:49:34.530
also creates templates for you.

00:49:34.540 --> 00:49:37.840
You will click a button and it
will generate a Java file for you

00:49:37.850 --> 00:49:39.770
which will go into your project.

00:49:39.940 --> 00:49:41.500
This is what the file looks like.

00:49:41.540 --> 00:49:45.110
This isn't the whole file,
but the top part there shows

00:49:45.110 --> 00:49:48.490
the setter and the getter
for last name and first name.

00:49:48.560 --> 00:49:52.500
And then below that white line is where
you start implementing your custom logic.

00:49:52.580 --> 00:49:55.330
For example, a very simple custom
method here is full name.

00:49:55.340 --> 00:49:57.440
It's the one we always
use for some reason.

00:49:57.440 --> 00:50:01.400
And all it does is return first
name plus a space plus last name.

00:50:03.690 --> 00:50:06.240
Also in an EOModel,
you define relationships.

00:50:06.270 --> 00:50:08.530
You define two-one relationships.

00:50:08.570 --> 00:50:11.820
You can define too many relationships,
just like you do in a database.

00:50:11.920 --> 00:50:14.660
One other thing that I think
is a big one with an EOModel is

00:50:14.660 --> 00:50:16.350
you can define a many-to-many.

00:50:16.430 --> 00:50:19.760
Now, even though your database
doesn't support the many-to-many,

00:50:19.840 --> 00:50:25.290
you can, in memory,
following too many relationships and

00:50:25.550 --> 00:50:28.050
It just works like magic
where the middle table,

00:50:28.050 --> 00:50:31.090
which is in the database,
is sort of hidden so you

00:50:31.090 --> 00:50:32.400
don't even have to pretend.

00:50:32.400 --> 00:50:34.200
You can ignore it like
your appendix or something.

00:50:34.200 --> 00:50:40.030
You can also define relationship rules,
like delete rules, cascade, deny,

00:50:40.030 --> 00:50:41.840
nullify, no action.

00:50:41.850 --> 00:50:43.350
Cascade, that's a big one.

00:50:43.360 --> 00:50:46.570
Cascade,
you have a student object and it has,

00:50:46.570 --> 00:50:49.240
let's say, a one-to-one to a photo.

00:50:49.240 --> 00:50:52.200
Every student has one and only one photo.

00:50:52.200 --> 00:50:55.700
When I delete the student,
it doesn't make sense to keep the

00:50:55.700 --> 00:50:58.200
photo object in the database anymore.

00:50:58.200 --> 00:51:04.060
That's how you get orphaned rows
in your child database tables.

00:51:04.060 --> 00:51:08.120
So you can tell EOModeler
that when I delete a student,

00:51:08.200 --> 00:51:11.640
generate the SQL also
to delete the photo.

00:51:11.640 --> 00:51:13.940
You can do deny, nullify, no action.

00:51:13.940 --> 00:51:17.030
Propagate primary key in a
one-to-one relationship again

00:51:17.030 --> 00:51:18.700
between student and photo.

00:51:18.900 --> 00:51:24.060
When I insert a new student,
it makes sense to already go

00:51:24.060 --> 00:51:28.900
ahead and insert a row into the
photo table and then join them

00:51:28.900 --> 00:51:30.520
across the same primary key.

00:51:30.520 --> 00:51:32.900
So basically the primary
key is propagated.

00:51:32.920 --> 00:51:36.230
And also owns destination,
this is a little more advanced,

00:51:36.230 --> 00:51:38.650
but again,
an example of student to photo.

00:51:38.800 --> 00:51:45.480
In memory, you can create, read, update,
delete your standard CRUD with EOs.

00:51:45.600 --> 00:51:48.870
One thing you can do is you hook them up
into relationships and you unhook them.

00:51:48.900 --> 00:51:51.470
When you unhook them,
if one owns the destination

00:51:51.470 --> 00:51:54.600
and you don't re-hook it up,
it gets deleted from the database,

00:51:54.670 --> 00:51:55.880
which may be what you want.

00:51:58.080 --> 00:52:02.090
Here are some things that EOModelers,
the tools specifically, can do.

00:52:02.110 --> 00:52:06.070
They can reverse engineer
database schemas into an EOModel,

00:52:06.120 --> 00:52:10.000
which we've done quite a few times,
probably once a session so far.

00:52:10.190 --> 00:52:15.000
Generate SQL to create
or sync database schema.

00:52:15.000 --> 00:52:16.880
This is good if you don't know SQL.

00:52:16.990 --> 00:52:22.000
Like, I don't know SQL too well,
so I just use EOModeler to cheat.

00:52:22.000 --> 00:52:24.270
It can graphically create fetch specs.

00:52:24.330 --> 00:52:28.000
In the next session,
they're going to talk about fetch specs.

00:52:28.000 --> 00:52:32.000
All a fetch spec is is
a query on a database.

00:52:32.000 --> 00:52:34.870
And you can do it programmatically
in your Java code.

00:52:34.990 --> 00:52:38.000
Again, this doesn't mean you
have to put SQL in there,

00:52:38.000 --> 00:52:41.000
but you can generate a fetch spec
programmatically in your code.

00:52:41.140 --> 00:52:43.910
Or you can store it
graphically in your EOModel.

00:52:43.910 --> 00:52:46.980
It allows importing
and exporting of data.

00:52:46.980 --> 00:52:51.000
EOModeler can import from a
flat file into a database.

00:52:51.000 --> 00:52:52.000
Or it can export.

00:52:52.000 --> 00:52:52.940
Or it can export into a flat file.

00:52:53.070 --> 00:52:56.000
These flat files we call
P lists or property lists.

00:52:56.130 --> 00:52:59.000
And you can also browse live data.

00:53:00.340 --> 00:53:02.080
EOModel is just the tip
of the iceberg though.

00:53:02.140 --> 00:53:05.930
There's a whole layer of
middleware between your WebObjects

00:53:05.930 --> 00:53:08.390
application and the database.

00:53:08.530 --> 00:53:12.300
And this whole area of
middleware we call EOF,

00:53:12.560 --> 00:53:14.240
Enterprise Objects Frameworks.

00:53:14.240 --> 00:53:17.740
And basically your EOModel
works with EOF to keep EOs,

00:53:17.740 --> 00:53:20.820
Java objects in memory,
synchronized with the

00:53:20.820 --> 00:53:22.710
database and vice versa.

00:53:22.730 --> 00:53:26.240
You make a change to a Java object
in memory that represents an EO,

00:53:26.240 --> 00:53:29.040
when you say save changes,
that SQL is going to the database.

00:53:29.040 --> 00:53:34.540
And here's an example of just
how simple it is to get data from

00:53:34.540 --> 00:53:37.160
a database in your Java code.

00:53:37.700 --> 00:53:44.500
The first line there is basically saying,
"Give me all the students with

00:53:44.500 --> 00:53:49.730
the last name Smith." So you
get an array of objects back.

00:53:49.910 --> 00:53:53.940
The next one is we're going
to take the first object,

00:53:53.940 --> 00:53:56.770
object at the next zero,
and we're going to change

00:53:56.770 --> 00:53:58.300
it from Smith to Jones.

00:53:58.300 --> 00:54:00.900
And then the last line,
we're going to save changes.

00:54:01.000 --> 00:54:04.740
Now that editing context is basically
just a bucket that your data goes into.

00:54:04.770 --> 00:54:08.420
And it watches for changes
and then updates the database.

00:54:08.500 --> 00:54:12.710
That you'll get some more exposure
to in the next session after this.

00:54:13.210 --> 00:54:14.100
So this is the key.

00:54:14.100 --> 00:54:17.240
An EOModel provides a
layer of abstraction that

00:54:17.240 --> 00:54:19.340
minimizes the cost of change.

00:54:19.340 --> 00:54:25.320
As we switch over to the demo,
I'm just going to comment

00:54:25.320 --> 00:54:25.320
that we've all experienced

00:54:25.400 --> 00:54:37.400
[Transcript missing]

00:54:43.850 --> 00:54:47.700
So what we do here is open an
EOModel and reverse engineer it.

00:54:47.700 --> 00:54:51.850
I'm going to open a database and
reverse engineer it into an EOModel

00:54:51.850 --> 00:54:55.210
like you've seen so many times before.

00:55:13.090 --> 00:55:16.320
Found the database and we're not going
to do anything with primary keys,

00:55:16.360 --> 00:55:18.880
there are not going to
be any relationships.

00:55:19.520 --> 00:55:23.500
This is going to be an EOModel of tables.

00:55:23.500 --> 00:55:25.140
So these are the tables.

00:55:25.160 --> 00:55:27.930
First thing is the connection dictionary.

00:55:27.980 --> 00:55:32.100
This is what you saw
in the slide earlier.

00:55:32.100 --> 00:55:32.100
This shows

00:55:32.610 --> 00:55:37.410
You have the database and the
EOModel talks to the database.

00:55:37.590 --> 00:55:41.480
This is the URL right here and
that's the database that it found.

00:55:41.540 --> 00:55:45.680
And you can have your login and
password here and you can go

00:55:45.680 --> 00:55:45.680
right in here and change it.

00:55:46.990 --> 00:55:49.660
So now we're going to flip
over to the diagram view,

00:55:49.660 --> 00:55:53.380
and we're all going to
focus on two entities,

00:55:53.420 --> 00:55:56.880
the student and the photo that
we were talking about earlier.

00:55:59.530 --> 00:56:00.900
There's a student, there's a photo.

00:56:01.010 --> 00:56:02.500
We didn't tell it to assign primary keys.

00:56:02.500 --> 00:56:05.970
I'm going to go in here,
assign Talent ID as a primary key,

00:56:05.970 --> 00:56:06.490
and Talent ID.

00:56:06.500 --> 00:56:08.740
This is what I really like.

00:56:08.760 --> 00:56:10.460
I always forget where
the foreign key goes,

00:56:10.460 --> 00:56:13.160
you know, well now I know it goes
on the too many side.

00:56:13.180 --> 00:56:15.250
I used to forget and I joined
the relationships wrong

00:56:15.250 --> 00:56:16.700
when I'd inspect them.

00:56:16.780 --> 00:56:19.780
So now I just click here.

00:56:20.030 --> 00:56:22.340
and then drag over to the other one now.

00:56:22.360 --> 00:56:25.210
It won't let me connect to photo
because photo is a different

00:56:25.640 --> 00:56:28.240
data type than talent ID.

00:56:28.330 --> 00:56:30.540
But it will let me connect to talent ID.

00:56:30.540 --> 00:56:33.660
It brings up this inspector,
which I'm going to minimize,

00:56:33.790 --> 00:56:34.490
close for now.

00:56:34.660 --> 00:56:38.840
And you see it's actually
joined the two tables.

00:56:38.840 --> 00:56:42.130
And there's actual
real data behind these.

00:56:42.130 --> 00:56:43.830
You can browse them.

00:56:45.170 --> 00:56:49.050
And if there was real
data... There we go.

00:56:49.280 --> 00:56:51.690
Yeah, there's real data behind them.

00:56:53.520 --> 00:56:55.740
So the next thing you
do is save your EOModel.

00:56:55.740 --> 00:56:58.140
It's going to give me a warning, I know,
because I haven't gone through

00:56:58.140 --> 00:57:00.040
and made it all copacetic.

00:57:00.040 --> 00:57:05.420
But I'll just save it in my home
directory with a unique intuitive name.

00:57:09.080 --> 00:57:11.230
Now I'm going to generate a Java class.

00:57:11.300 --> 00:57:13.580
Alright,
so I'm highlighting the student entity.

00:57:13.590 --> 00:57:16.300
I'm just going to turn this off,
which we'll explain in a

00:57:16.320 --> 00:57:18.380
later session what I just did.

00:57:18.430 --> 00:57:20.820
And we won't click on the Java here.

00:57:20.870 --> 00:57:22.890
I didn't give it a name,
so it's going to assume

00:57:23.020 --> 00:57:24.310
to use student.java.

00:57:24.500 --> 00:57:25.480
Makes sense.

00:57:25.550 --> 00:57:27.750
And it generated a student.

00:57:28.200 --> 00:57:37.800
[Transcript missing]

00:57:40.320 --> 00:57:43.780
Put setters and getters for the
first name and the last name.

00:57:43.790 --> 00:57:47.980
Now one thing you'll notice is that's
the only line of code that actually goes

00:57:48.090 --> 00:57:51.650
to the database and pulls out the data.

00:57:51.770 --> 00:57:53.010
There is no SQL in there.

00:57:53.130 --> 00:58:04.260
And then again down here you would
just start putting in your custom

00:58:04.260 --> 00:58:04.680
business logic such as full name.

00:58:09.130 --> 00:58:13.990
And the last thing,
I mentioned I don't know SQL.

00:58:13.990 --> 00:58:19.250
So if I was generating this
schema in EOModeler and there

00:58:19.250 --> 00:58:24.580
was no database under it,
I could very simply come here and

00:58:25.240 --> 00:58:27.790
Just click on the SQL panel here.

00:58:27.790 --> 00:58:30.890
Let me turn everything off to show
you explicitly what it's doing.

00:58:33.590 --> 00:58:35.460
It will create the tables that you want.

00:58:35.460 --> 00:58:37.520
There's a SQL,
and this depends on what type

00:58:37.590 --> 00:58:38.740
of database you're connected to.

00:58:38.740 --> 00:58:43.730
It'll give you primary key constraints,
primary key support, etc.

00:58:43.740 --> 00:58:47.360
And this depends on, again,
which database you're talking to.

00:58:47.360 --> 00:58:50.250
And it will generate the
whole schema for you.

00:58:52.810 --> 00:58:54.200
That concludes my portion of the talk.

00:58:54.270 --> 00:58:58.140
I'm going to turn it back over to
Barry to talk about Direct to Web.

00:58:58.220 --> 00:58:58.700
Thank you.

00:59:00.730 --> 00:59:01.270
Thanks, Joe.

00:59:01.270 --> 00:59:01.700
Good job.

00:59:10.630 --> 00:59:13.710
Okay,
we have just enough time to talk about

00:59:13.710 --> 00:59:16.440
Direct to Java Client a little bit.

00:59:16.440 --> 00:59:20.300
Direct to Java Client is
similar to Direct to Web,

00:59:20.300 --> 00:59:22.540
but it has a swing UI interface.

00:59:22.570 --> 00:59:24.360
Okay, so it's not using the browser.

00:59:24.360 --> 00:59:26.940
It's a pure Java application.

00:59:26.940 --> 00:59:31.590
It gives you a little bit
of a richer experience than

00:59:31.590 --> 00:59:35.200
the limitations of the web.

00:59:35.200 --> 00:59:39.970
Again, it's very rapid development
for these kinds of apps.

00:59:40.100 --> 00:59:45.530
And the thing to remember about
this is that it's probably easiest

00:59:45.700 --> 01:00:36.600
[Transcript missing]

01:00:42.100 --> 01:00:44.000
Let's build a new project.

01:00:44.000 --> 01:00:46.780
Okay.

01:00:46.780 --> 01:00:51.320
And it's going to be a
Direct to Java Client.

01:00:54.100 --> 01:00:59.840
Application, we'll call it My School 2.

01:00:59.840 --> 01:01:06.250
I'm going to add one additional
framework here that just simply sets up

01:01:06.420 --> 01:01:07.690
Some parameters for me.

01:01:07.700 --> 01:01:09.170
It's called the Java Client Class Loader.

01:01:09.200 --> 01:01:12.700
So it'll allow me to run
this app much quicker.

01:01:12.700 --> 01:01:15.160
Let's pick the model.

01:01:15.160 --> 01:01:17.790
Again, the model is...

01:01:18.060 --> 01:01:20.900
So we use the same model
that we were using before,

01:01:20.900 --> 01:01:24.560
except now we're going
to display it in Swing.

01:01:24.560 --> 01:01:27.520
So we can build and
launch this application.

01:01:27.520 --> 01:01:30.180
One of the things that
was set up there for me,

01:01:30.180 --> 01:01:33.680
normally this would go ahead
and launch it in the browser.

01:01:33.720 --> 01:01:40.500
I'm actually going to launch
a Java client launcher.

01:01:40.500 --> 01:01:43.220
So it's going to launch
this in a pure Java form.

01:01:43.220 --> 01:01:45.830
It can also vend this through
the browser so that if you do

01:01:45.830 --> 01:01:48.780
have to suck down swing classes,
it can actually do that for you.

01:01:48.840 --> 01:01:51.100
But in this case...

01:01:53.120 --> 01:01:55.340
We're not going to launch a browser.

01:01:55.400 --> 01:02:00.340
So let's go ahead and connect up to
our running application right now.

01:02:00.380 --> 01:02:03.330
And we'll show you in a
bit what that looks like.

01:02:03.420 --> 01:02:08.480
So it's the same logic,
the same model that was

01:02:08.480 --> 01:02:11.460
in my application before.

01:02:11.480 --> 01:02:14.340
And let's get rid of some other things.

01:02:15.250 --> 01:02:17.110
And here it is.

01:02:17.320 --> 01:02:19.120
So it's the same kind
of thing we were doing,

01:02:19.120 --> 01:02:21.770
but now it's available to me in swing.

01:02:21.820 --> 01:02:27.890
So any platform that would
have Java on it can run this.

01:02:28.080 --> 01:02:30.660
Let's look for last names again,
just to show you that we

01:02:30.660 --> 01:02:33.000
are live and connected up.

01:02:33.210 --> 01:02:35.500
Here's my last names.

01:02:35.500 --> 01:02:38.910
And let's look for a
similar kind of name.

01:02:39.190 --> 01:02:43.080
One of the things this allows me to
do is bring up other kinds of windows.

01:02:43.290 --> 01:02:47.180
So I don't need to stay
within frames or the windows.

01:02:47.180 --> 01:02:48.340
I can have multiple windows.

01:02:48.340 --> 01:02:53.600
I can click on other
people in my application.

01:02:53.620 --> 01:02:57.100
And I can have multiple
windows open at the same time.

01:02:57.240 --> 01:03:01.790
Same thing that we had before,
I've got the tools.

01:03:02.770 --> 01:03:08.540
But now instead of a Java applet,
this is what the assistant looks like.

01:03:08.650 --> 01:03:11.520
So I can customize this.

01:03:12.480 --> 01:03:16.940
If I want to get rid of facility
and I want to get rid of instructor,

01:03:16.940 --> 01:03:19.970
I can apply that and restart.

01:03:23.600 --> 01:03:25.980
Okay,
so now you can see I've restarted and

01:03:25.990 --> 01:03:29.180
I've got rid of two of the tabs and
now I have the exact same application

01:03:29.580 --> 01:03:32.570
running in a pure swing UI environment.

01:03:32.600 --> 01:03:35.600
Okay, that's it.

01:03:35.600 --> 01:03:36.600
If we can go back to the slides.

01:03:45.490 --> 01:03:48.930
Okay, so if you're interested in
checking out these tools,

01:03:48.930 --> 01:03:51.240
we would encourage you to
come to the WebObjects labs.

01:03:51.270 --> 01:03:52.960
Here's the times, here's the hours.

01:03:52.960 --> 01:03:54.560
It's a great lab.

01:03:54.590 --> 01:03:58.810
It's much cleaner and doesn't make your
hands stink as much as a cadaver lab,

01:03:58.820 --> 01:03:59.910
so it's a lot of fun.

01:04:00.000 --> 01:04:04.570
The roadmap, as I mentioned before,
I mentioned a lot more of the courses.

01:04:04.570 --> 01:04:06.660
These are some of the highlights.

01:04:06.750 --> 01:04:09.030
Stick around for Introduction to EOF.

01:04:09.110 --> 01:04:11.180
It should be very interesting.

01:04:11.180 --> 01:04:13.920
And these are some of the other
ones that are the rest of the week.

01:04:15.060 --> 01:04:18.400
Okay, people to contact at Apple, again,
Tony Triovion and Bob,

01:04:18.400 --> 01:04:21.300
our new product manager,
who I believe has misspelled his

01:04:21.370 --> 01:04:22.980
last name on the slides here.