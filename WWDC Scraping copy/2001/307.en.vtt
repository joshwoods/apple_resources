WEBVTT

00:00:00.500 --> 00:00:52.700
[Transcript missing]

00:00:59.100 --> 00:01:00.500
Good afternoon, everybody.

00:01:00.500 --> 00:01:01.460
I'm Ken McLeod.

00:01:01.500 --> 00:01:04.600
I'm an engineer in the
Data Security Group where we

00:01:04.650 --> 00:01:09.230
work on Keychain and I'll be
talking about the Keychain today.

00:01:09.900 --> 00:01:14.160
as soon as I can get this to work.

00:01:14.160 --> 00:01:17.370
So the session basically will
start off with an overview of what

00:01:17.370 --> 00:01:19.680
the Keychain is and what it does.

00:01:19.690 --> 00:01:22.710
And we'll talk to you about
the new features that are

00:01:22.710 --> 00:01:24.440
in town with the Keychain.

00:01:24.520 --> 00:01:27.820
I'll go over the Keychain
manager APIs that are available

00:01:27.840 --> 00:01:29.700
for your application to use.

00:01:29.700 --> 00:01:34.750
And the last thing I'll talk about
is the whole area of managing user

00:01:34.750 --> 00:01:37.220
interaction with the Keychain.

00:01:37.220 --> 00:01:43.300
And at the end, we'll have a demo of the
Keychain with Mac OS X and time

00:01:45.070 --> 00:01:50.840
So the three main questions that
this session is designed to answer,

00:01:50.840 --> 00:01:54.700
the questions are:
What does the Keychain give me?

00:01:54.700 --> 00:01:58.260
And how can I add support
for it to my application?

00:01:58.370 --> 00:02:01.560
And of course, where can I get more
information about it?

00:02:01.680 --> 00:02:08.200
Feel free, as the session goes on,
to sort of add your own list of questions

00:02:08.200 --> 00:02:14.180
that you can ask at the end if you have
more that the session doesn't cover.

00:02:15.480 --> 00:02:17.800
I've got here a key chain.

00:02:17.800 --> 00:02:19.850
This is a key chain in the real world.

00:02:19.850 --> 00:02:23.030
And I apologize for, you know,
right off drawing a distinction

00:02:23.030 --> 00:02:24.820
between computers and the real world.

00:02:24.820 --> 00:02:27.590
But I'll try not to do that too often.

00:02:27.640 --> 00:02:31.200
But the real convenience and
usefulness of this thing in the

00:02:31.300 --> 00:02:34.370
real world is that I don't have to
remember these things individually.

00:02:34.370 --> 00:02:37.360
I don't have to remember to bring,
you know, my car key with me,

00:02:37.410 --> 00:02:39.220
my office key, all these things.

00:02:39.220 --> 00:02:41.350
I just have to remember one object.

00:02:41.350 --> 00:02:43.560
I have to remember to bring my keys.

00:02:43.570 --> 00:02:46.630
And then I have access to
all of the services or the

00:02:46.630 --> 00:02:48.710
things that these keys unlock.

00:02:48.710 --> 00:02:53.840
And the same idea is true of the
key chain on OS X and on OS 9.

00:02:53.840 --> 00:02:57.890
The idea is to provide
something that is a convenience,

00:02:57.940 --> 00:03:01.560
but much more than a convenience,
it needs to be secure.

00:03:01.560 --> 00:03:04.860
Because when you're letting your
computer manage your keys for you,

00:03:04.860 --> 00:03:06.820
you need some level of security.

00:03:06.840 --> 00:03:10.460
So that leads me into the
definition of what the key chain is.

00:03:10.460 --> 00:03:14.680
The key chain is a secure
repository for your passwords,

00:03:14.680 --> 00:03:18.610
your digital keys,
sort of analog on the computer

00:03:18.610 --> 00:03:21.650
of what the keys are in reality.

00:03:21.660 --> 00:03:25.180
A much more appropriate metaphor
perhaps than even a key chain

00:03:25.260 --> 00:03:27.420
is a sort of bank vault.

00:03:27.470 --> 00:03:28.700
The bank vault has a door.

00:03:28.700 --> 00:03:31.480
And when that bank vault is locked,
the things that are

00:03:31.480 --> 00:03:32.770
in it are locked down.

00:03:32.800 --> 00:03:33.980
You can't get out them.

00:03:33.980 --> 00:03:35.220
They're protected.

00:03:35.220 --> 00:03:37.580
When the door is unlocked,
there's a security guard sitting

00:03:37.580 --> 00:03:40.410
there and he's monitoring all access.

00:03:40.420 --> 00:03:42.700
He's checking the credentials
of everybody who takes

00:03:42.700 --> 00:03:45.120
a key out of the vault.

00:03:45.890 --> 00:03:50.670
The Keychain is built on something
we've been talking about called CDSA,

00:03:50.700 --> 00:03:55.170
the Common Data Security Architecture,
which as of this week

00:03:55.170 --> 00:03:57.500
is all open sourced.

00:03:57.500 --> 00:04:02.790
And all of the work that the Keychain
does happens down in that layer.

00:04:02.810 --> 00:04:08.270
CDSA has a whole series of plug-ins
for doing things like data storage

00:04:08.270 --> 00:04:13.350
and cryptography and those pieces
are all part of that framework

00:04:13.350 --> 00:04:14.340
that you can take a look at.

00:04:15.360 --> 00:04:23.070
The Keychain has a convenience feature,
as I said, where clients of the Keychain

00:04:23.130 --> 00:04:26.870
can provide something called
transparent authentication.

00:04:26.960 --> 00:04:30.180
In other words,
the user experience of typing in

00:04:30.180 --> 00:04:35.520
your password once to unlock your
Keychain and then not having to

00:04:35.570 --> 00:04:40.890
type in all the passwords that are
actually stored in the Keychain,

00:04:40.890 --> 00:04:40.890
so you have a single
sign-on user experience.

00:04:41.130 --> 00:04:44.900
As Craig mentioned to start off with,
the Keychain is available

00:04:44.900 --> 00:04:46.890
on both OS 9 and OS 10.

00:04:46.890 --> 00:04:50.100
But on OS 10, every user has a Keychain.

00:04:50.360 --> 00:04:53.020
Every user logs in,
they have a user account,

00:04:53.020 --> 00:04:56.390
and a Keychain is
automatically created for them.

00:04:58.200 --> 00:05:02.050
So I like to define terms when
talking about the Keychain because

00:05:02.060 --> 00:05:04.200
it can get a little confusing.

00:05:04.200 --> 00:05:06.270
What do we mean when we
use the word Keychain?

00:05:06.350 --> 00:05:10.990
And there's a grammatical difference
here between Keychain with a capital

00:05:11.070 --> 00:05:13.100
K and Keychain with a small k.

00:05:13.100 --> 00:05:16.820
When we use Keychain with a capital K,
we're talking about the technology.

00:05:16.820 --> 00:05:20.100
We're talking about the software
that's built into the operating system.

00:05:20.100 --> 00:05:22.600
When we talk about
Keychain with a little k,

00:05:22.600 --> 00:05:26.700
we're talking about the data store,
the thing that the user has that they

00:05:26.790 --> 00:05:29.100
put their passwords and keys into.

00:05:29.100 --> 00:05:32.100
The Keychain can be in one of two states.

00:05:32.100 --> 00:05:34.060
Keychain is either locked or unlocked.

00:05:34.090 --> 00:05:39.250
And the definition of an
unlocked Keychain is one that

00:05:39.250 --> 00:05:43.100
has a key which is available to
decrypt items in the Keychain.

00:05:43.100 --> 00:05:45.700
Without that key,
nothing can be decrypted,

00:05:45.700 --> 00:05:48.230
nothing can be retrieved
from the Keychain,

00:05:48.240 --> 00:05:50.000
and the Keychain is locked.

00:05:50.570 --> 00:05:54.570
Everything that you put in a Keychain,
whether it's a key,

00:05:54.570 --> 00:05:59.500
an actual cryptographic key, a password,
a certificate,

00:05:59.500 --> 00:06:04.200
we use the term Keychain item to refer
to all of these things collectively.

00:06:04.360 --> 00:06:07.260
And the other term,
the last term that we use

00:06:07.260 --> 00:06:09.210
a lot is Default Keychain.

00:06:09.310 --> 00:06:12.700
The Default Keychain is if you
have more than one Keychain,

00:06:12.790 --> 00:06:17.180
this is the one where items are added to.

00:06:20.380 --> 00:06:25.370
So, typically, a user logs in,
they have a keychain created,

00:06:25.410 --> 00:06:29.540
but you're not limited to that
as a user or as a developer.

00:06:29.540 --> 00:06:31.530
You can create as many
keychains as you want,

00:06:31.530 --> 00:06:35.880
have as many unlocked as you
want to be unlocked at a time.

00:06:35.880 --> 00:06:40.710
If you want, you can set a keychain
to lock automatically.

00:06:40.720 --> 00:06:44.480
By default,
the keychain will be unlocked at

00:06:44.480 --> 00:06:47.180
login and locked when you log out.

00:06:47.180 --> 00:06:49.910
But if you want to
restrict that even further,

00:06:49.910 --> 00:06:54.040
that's completely available to you.

00:06:54.040 --> 00:06:58.460
The default keychain, again,
when you log in on OS X,

00:06:58.460 --> 00:07:03.690
is unlocked and it's got the
same username--or I'm sorry,

00:07:03.690 --> 00:07:08.020
the same name as your user account
and it uses the same password

00:07:08.110 --> 00:07:10.120
as that account by default.

00:07:10.170 --> 00:07:11.430
Again, you're not limited to that.

00:07:11.430 --> 00:07:15.470
You can change it at any time,
but this is just sort of to give

00:07:15.470 --> 00:07:16.320
the user a default keychain.

00:07:16.320 --> 00:07:18.280
default keychain.

00:07:18.850 --> 00:07:22.980
You can take a Keychain and move
it around from machine to machine.

00:07:23.020 --> 00:07:28.020
And what we mean by the word "portable"
here in this context is that you can

00:07:28.090 --> 00:07:30.790
take it from one machine to another,
you can take it from home to work,

00:07:30.890 --> 00:07:37.800
vice versa, so you have the keys with you
on any machine that you use.

00:07:38.060 --> 00:07:41.790
Portable in this sense does not
mean portable between 9 and 10.

00:07:41.910 --> 00:07:45.990
Now the reason for that is that,
as you'll see when you

00:07:45.990 --> 00:07:50.900
look at the CDSA pieces,
we have open sourced all of the

00:07:50.900 --> 00:07:53.890
algorithms that the Keychain uses.

00:07:53.910 --> 00:07:57.690
And on OS 9, we had some algorithms
that were proprietary and

00:07:57.690 --> 00:08:01.210
could not be open sourced,
so we moved away from using them

00:08:01.210 --> 00:08:05.900
and we moved towards something that
could be open sourced for OS 10.

00:08:06.090 --> 00:08:10.100
You can put Keychain files on a server
so that you have them available.

00:08:10.100 --> 00:08:12.480
You can put them on a CD.

00:08:12.550 --> 00:08:14.550
You can just use them
wherever they happen to be.

00:08:14.560 --> 00:08:17.990
And the CDSA architecture
doesn't limit us to that.

00:08:17.990 --> 00:08:22.100
It supports,
fully supports Keychains being on

00:08:22.100 --> 00:08:27.200
smart cards or removable tokens
so we can actually get back to

00:08:27.200 --> 00:08:32.800
having a real world Keychain that
has a little removable token that

00:08:32.800 --> 00:08:33.000
actually holds your digital keys.

00:08:35.860 --> 00:08:40.480
So here's a diagram or a map of
all of the APIs that are available

00:08:40.480 --> 00:08:44.210
across the board related to security.

00:08:44.400 --> 00:08:49.480
Starting on the left-hand side there,
an OS 9 and still available in

00:08:49.480 --> 00:08:55.150
Classic are the Keychain API and an
API that we talked about previously,

00:08:55.160 --> 00:08:58.290
Macintosh file signing,
and some other ones there.

00:08:58.420 --> 00:09:02.700
All of these are built on top of
the older version of CDSA 1.2,

00:09:02.710 --> 00:09:08.400
which had quite a lot of limitations,
but worked well for OS 9.

00:09:08.440 --> 00:09:13.430
Moving forward,
your applications on OS 10 will either

00:09:13.480 --> 00:09:17.270
use Carbon or they'll use Core Services.

00:09:17.320 --> 00:09:22.780
Now the Carbon piece sort of straddles
the line between the two implementations

00:09:22.800 --> 00:09:24.850
of CDSA and the two platforms.

00:09:24.920 --> 00:09:29.830
So if you write an application that
uses the Carbon and Keychain APIs,

00:09:29.830 --> 00:09:36.270
you can run on OS 9 or on
OS 10 if you're a CFM binary.

00:09:36.400 --> 00:10:42.000
[Transcript missing]

00:10:43.430 --> 00:10:46.180
So, what kind of items can
you store in a Keychain?

00:10:46.360 --> 00:10:50.900
Well, there's three basic classes
of items that are defined:

00:10:50.900 --> 00:10:53.300
keys, passwords, and certificates.

00:10:53.300 --> 00:10:57.300
On OS 9,
keys and certificates were there.

00:10:57.300 --> 00:11:01.370
For the first release of OS X,
we focused on getting passwords

00:11:01.370 --> 00:11:03.130
really supported well.

00:11:03.310 --> 00:11:07.960
Certainly, keys and certificates are
something that we are working on,

00:11:07.960 --> 00:11:12.100
but the focus of what I'm going to
talk about today will be passwords.

00:11:12.280 --> 00:11:17.690
And within the class of password item,
there are three sort of categories.

00:11:17.790 --> 00:11:21.800
We have Apple Share passwords,
which allow you to access

00:11:21.800 --> 00:11:23.000
Apple Share servers.

00:11:23.230 --> 00:11:29.180
Internet passwords are a more
general case for any type of

00:11:29.300 --> 00:11:33.400
You know, protocol like SMTP, FTP,
what have you,

00:11:33.400 --> 00:11:38.720
those sorts of things that require,
you know, access to a server.

00:11:38.720 --> 00:11:43.730
And then the last category of
password is sort of a generic password

00:11:43.910 --> 00:11:46.890
account and service type of item.

00:11:48.030 --> 00:11:51.570
So let's drill down a little bit
and look inside a Keychain item.

00:11:51.570 --> 00:11:54.140
A Keychain item's contents
are really simple.

00:11:54.360 --> 00:11:57.400
There's two things:
there's attributes and there's data.

00:11:57.520 --> 00:12:00.900
The data is, in this case, the password.

00:12:00.900 --> 00:12:03.250
In this example,
just the data of the password

00:12:03.300 --> 00:12:04.890
that I'm trying to protect.

00:12:04.900 --> 00:12:10.900
I can add a number of attributes to the
item that help me find the item later on.

00:12:10.900 --> 00:12:15.900
So if I'm storing, for example,
here a password for an FTP server,

00:12:15.900 --> 00:12:21.100
I might want to add my account name
and the name of the server and some

00:12:21.100 --> 00:12:25.330
other information that lets me find that
password item and match it back up when

00:12:25.330 --> 00:12:28.730
I need to log back into that server.

00:12:30.310 --> 00:12:34.400
So every item that's in a Keychain
has a set of common attributes

00:12:34.620 --> 00:12:37.890
and all these items can be
treated more or less the same.

00:12:37.910 --> 00:12:43.300
They have the class of the item,
they have things like the date when

00:12:43.300 --> 00:12:47.600
the item was created or modified,
they have a label.

00:12:48.300 --> 00:12:49.380
describes the item.

00:12:49.510 --> 00:12:52.530
There's also a description of the item.

00:12:52.670 --> 00:12:57.020
There's a comment field where,
with the Keychain Access application,

00:12:57.020 --> 00:13:02.000
a user can actually add comments to
an item that's stored in the Keychain.

00:13:02.000 --> 00:13:05.480
Within those subcategories, though,
of an Item class, there are additional

00:13:05.480 --> 00:13:07.100
attributes that are defined.

00:13:07.100 --> 00:13:09.370
So, for example,
if you have an Internet password,

00:13:09.430 --> 00:13:11.850
you have things like the
protocol and the server,

00:13:11.850 --> 00:13:16.860
which are additional attributes that
are specific to an Internet password.

00:13:16.860 --> 00:13:19.500
And the whole purpose of adding
attributes to these things is

00:13:19.500 --> 00:13:23.170
so that you can find the item
again when you're looking for it.

00:13:24.280 --> 00:13:28.490
Now the data portion of
the item is protected,

00:13:28.550 --> 00:13:29.700
as I said.

00:13:29.730 --> 00:13:32.790
Unlike attributes,
you can't search on the data of the item,

00:13:32.850 --> 00:13:36.710
so it can't be revealed
to you in that way.

00:13:36.810 --> 00:13:40.640
The data cannot ever be retrieved
unless the Keychain is unlocked,

00:13:40.750 --> 00:13:44.960
and it can't be retrieved unless
the user gives explicit permission.

00:13:45.010 --> 00:13:49.070
Now,
I'll get into that a little bit later,

00:13:49.270 --> 00:13:55.240
but in OS X and with CDSA 2.0,
we're able to let the user or

00:13:55.270 --> 00:14:00.070
the administrator configure the
access control on a Keychain

00:14:00.070 --> 00:14:02.370
item and have that be persistent.

00:14:02.650 --> 00:14:07.340
And in the case of cryptographic keys,
private and symmetric type keys,

00:14:07.380 --> 00:14:12.700
the data of those items is actually never
able to be retrieved from a Keychain.

00:14:12.780 --> 00:14:14.960
You'll only be able
to use item retrieval.

00:14:14.960 --> 00:14:18.020
references to reference the item.

00:14:18.600 --> 00:15:50.500
[Transcript missing]

00:15:50.830 --> 00:15:57.190
So, the data of an item is protected
and it can't be retrieved unless

00:15:57.200 --> 00:15:59.770
the user gives an explicit okay.

00:15:59.920 --> 00:16:03.640
Now on OS 9,
some of you have seen what this means.

00:16:03.640 --> 00:16:05.390
It means that a dialogue comes up.

00:16:05.580 --> 00:16:08.650
The dialogue says,
"This particular process is

00:16:08.930 --> 00:16:11.120
trying to access this item.

00:16:11.180 --> 00:16:16.320
Is that okay?" And the user at that
point has to make an explicit decision,

00:16:16.320 --> 00:16:20.510
"Do I want to allow this process
access to the item?" On OS 9,

00:16:20.530 --> 00:16:24.990
there was a problem though because
that dialogue box kept popping up

00:16:25.010 --> 00:16:29.620
every time you accessed an item and
it got really annoying because there

00:16:29.620 --> 00:16:33.660
was no way to securely store that
setting persistently so that after you

00:16:33.680 --> 00:16:38.790
rebooted the machine or you came back,
the same thing wouldn't happen again.

00:16:38.800 --> 00:16:40.760
You wouldn't be asked
again for permission.

00:16:40.800 --> 00:16:44.480
On OS 10,
CDSA lets us have access control

00:16:44.790 --> 00:16:48.790
lists that are persistent for an item.

00:16:48.810 --> 00:16:51.500
On OS 11,
we have a keychain that can avoid or give

00:16:51.500 --> 00:16:53.800
permission once to a particular process.

00:16:53.800 --> 00:17:00.530
What we'll do is store a hash of
that process and later when that same

00:17:00.680 --> 00:17:04.940
process tries to access the keychain,
we'll say, "Okay, yes,

00:17:04.940 --> 00:17:08.320
this is the same process you're
allowed to access without

00:17:08.330 --> 00:17:10.670
having that dialogue pop up."

00:17:11.000 --> 00:17:16.980
The application or the process that puts
an item into the Keychain by default

00:17:17.020 --> 00:17:21.860
has access to it on the philosophy that,
well, you know, they have the data

00:17:21.970 --> 00:17:26.000
that they're giving us,
so we'll trust them to access it.

00:17:26.000 --> 00:17:32.110
And that prevents a lot of unnecessary
asking of the user for permission.

00:17:33.620 --> 00:17:37.760
So, every item in the Keychain can have
its own access control list and you

00:17:37.760 --> 00:17:40.150
can configure these individually.

00:17:41.300 --> 00:17:45.800
Allow any application to access a
particular item or you can restrict

00:17:45.860 --> 00:17:50.600
it to just one application or
a whole series of applications.

00:17:50.860 --> 00:17:55.630
You can use the Keychain access utility,
which is available in

00:17:55.630 --> 00:18:00.270
the Utilities folder,
to preconfigure access.

00:18:00.270 --> 00:18:00.270
And,

00:18:00.530 --> 00:18:02.960
I will show you a little
demo of that later.

00:18:02.990 --> 00:18:08.730
The access control APIs are
available in the CDSA layer.

00:18:08.920 --> 00:18:13.500
We don't currently have any in the
Keychain Manager API to configure those.

00:18:13.500 --> 00:18:20.710
We assume that the user or the
administrator of the machine will

00:18:20.710 --> 00:18:22.000
set up the permissions as they see
fit for a particular Keychain item.

00:18:22.590 --> 00:18:26.100
And of course, access control lists
stick around on OS X.

00:18:26.110 --> 00:18:31.890
So, you know, across reboots,
it's always going to be there.

00:18:33.340 --> 00:18:37.350
So what can you do as an application
developer with the Keychain?

00:18:37.500 --> 00:18:39.400
Well, the first

00:18:39.500 --> 00:18:43.920
The most important thing is you can
store things securely there in the

00:18:43.930 --> 00:18:48.450
Keychain instead of perhaps having
to worry about how you are going

00:18:48.450 --> 00:18:51.590
to hide a particular piece of data,
whether you're going

00:18:51.590 --> 00:18:54.890
to encrypt it yourself,
put it in a preferences file, whatever.

00:18:54.890 --> 00:19:01.890
We provide that now as a system service
that you can just take advantage

00:19:01.890 --> 00:19:01.890
of and not have to worry about it.

00:19:02.200 --> 00:19:06.140
You can also look in the Keychain when
you need to connect to a particular

00:19:06.140 --> 00:19:11.470
service so the user doesn't necessarily
have to type in their password more than

00:19:11.470 --> 00:19:15.640
once if that password is available in
a Keychain and the Keychain is unlocked.

00:19:15.720 --> 00:19:19.980
So if you are connecting to, let's say,
an FTP server,

00:19:20.080 --> 00:19:23.400
you can look first in the Keychain
to see if there is a password

00:19:23.400 --> 00:19:27.640
for that FTP server and use that
instead of having to force the user

00:19:27.640 --> 00:19:30.040
to type in a password every time.

00:19:30.130 --> 00:19:33.600
And another thing you can do with it,
you're not just limited to

00:19:33.600 --> 00:19:37.980
passwords in the traditional sense,
you can use the Keychain to store,

00:19:37.980 --> 00:19:43.100
for example, cookies or software,
you know, perhaps serial numbers,

00:19:43.100 --> 00:19:48.400
registration numbers,
maybe a content key for, you know,

00:19:48.400 --> 00:19:49.340
an MP3.

00:19:49.350 --> 00:19:53.340
There's just all sorts of little
bits of data that need to be kept

00:19:53.340 --> 00:19:57.450
private by your application and
now there's a central place that

00:19:57.450 --> 00:19:59.860
you can store them in a secure way.

00:19:59.940 --> 00:20:00.970
Amen.

00:20:01.720 --> 00:20:06.380
So, here's the sort of high-level
overview of the API.

00:20:06.680 --> 00:20:08.610
There are two, uh,

00:20:09.100 --> 00:20:10.070
There's sort of divisions.

00:20:10.120 --> 00:20:13.030
There's high-level calls
and low-level calls.

00:20:13.040 --> 00:20:15.720
And it's real easy to get
started with the high-level calls

00:20:15.720 --> 00:20:17.400
because there's really only two.

00:20:17.450 --> 00:20:20.620
You'll find a password or
you'll add a password if

00:20:20.690 --> 00:20:22.980
there isn't one already there.

00:20:23.320 --> 00:20:26.420
There's a series of low-level
routines on which those

00:20:26.420 --> 00:20:28.580
high-level routines are built.

00:20:28.720 --> 00:20:38.440
And so they give you the flexibility to
do perhaps a piece of what the high-level

00:20:38.440 --> 00:20:43.100
routines do without requiring or pulling
in a lot of extra code perhaps to do

00:20:43.100 --> 00:20:43.100
the UI like the high-level routines do.

00:20:43.390 --> 00:20:48.840
These routines let you, for example,
search for multiple items or manage

00:20:49.040 --> 00:20:53.780
Keychains themselves as opposed
to the items in the Keychain.

00:20:54.090 --> 00:20:59.050
And the last area of the API is
the whole area of notification.

00:20:59.060 --> 00:21:03.010
So when something
happens with a Keychain,

00:21:03.010 --> 00:21:08.190
when a Keychain locks or unlocks
or when somebody takes data out,

00:21:08.190 --> 00:21:08.190
you can get notified
when those things occur.

00:21:08.950 --> 00:21:14.110
And then the last thing I'll talk
about there is the new factoring of the

00:21:14.110 --> 00:21:18.330
API between Carbon and core services.

00:21:19.500 --> 00:22:20.500
[Transcript missing]

00:22:20.770 --> 00:22:24.800
And then once you've figured out that
the Keychain Manager is available,

00:22:24.870 --> 00:22:27.240
you can either find or add a password.

00:22:27.320 --> 00:22:31.700
The first thing you'll do is try
to find a password in the Keychain.

00:22:31.700 --> 00:22:35.010
And there are three high-level
calls in the Keychain API and

00:22:35.010 --> 00:22:37.710
Carbon that let you do that,
depending on the type of

00:22:37.810 --> 00:22:39.200
password you're looking for.

00:22:39.200 --> 00:22:42.560
So, for example,
if you are that FTP application,

00:22:42.570 --> 00:22:46.640
you can call find_internet_password,
pass it the attributes

00:22:46.640 --> 00:22:49.160
you're looking for,
the name of the server,

00:22:49.250 --> 00:22:54.200
the fact that this is a password for FTP,
and those sorts of attributes.

00:22:54.200 --> 00:22:58.770
And then it'll return the password if
it's in fact found in the Keychain.

00:22:59.590 --> 00:23:02.150
And the flip side of
that is adding an item.

00:23:02.290 --> 00:23:04.830
If the item wasn't already there,
perhaps you want to

00:23:04.830 --> 00:23:05.960
store it in the Keychain.

00:23:05.960 --> 00:23:08.750
And there's three calls to do that,
depending on the type of

00:23:08.750 --> 00:23:10.260
password that you want to add.

00:23:10.400 --> 00:23:12.340
Again, all of these are in Carbon.

00:23:12.470 --> 00:23:17.900
And because they're high-level calls,
all of the sort of housekeeping tasks

00:23:17.960 --> 00:23:24.200
of making sure the Keychain is unlocked,
creating a Keychain if necessary,

00:23:24.200 --> 00:23:24.200
is all taken care of for you.

00:23:25.960 --> 00:23:31.070
So, as I said,
the high-level APIs sort of encompass

00:23:31.070 --> 00:23:36.160
or encapsulate a whole set of
low-level calls and just makes it

00:23:36.260 --> 00:23:38.140
convenient and easy to use for you.

00:23:38.140 --> 00:23:41.590
But the low-level calls are there
if you need the flexibility.

00:23:41.680 --> 00:23:44.650
So, in this case,
the Add Internet Password call is

00:23:45.050 --> 00:23:48.860
really just a wrapper around a whole
series of the lower-level calls.

00:23:48.910 --> 00:23:53.400
The first to create a new item and then
to add it to a particular keychain.

00:23:53.470 --> 00:23:56.900
And then we make a series of
calls to set whatever attributes

00:23:56.900 --> 00:23:58.580
we need to set on the item.

00:23:58.670 --> 00:24:01.100
And then finally,
we need to set the data of the item,

00:24:01.100 --> 00:24:03.400
the thing that's important to protect.

00:24:03.610 --> 00:24:08.580
And the last call there is Update Item,
which writes it out to the keychain.

00:24:10.670 --> 00:24:14.360
So here's that diagram again,
and here are the two sort of

00:24:14.360 --> 00:24:17.640
components of the Keychain API.

00:24:17.640 --> 00:24:21.390
If you're a Carbon application,
everything is there

00:24:21.390 --> 00:24:23.240
available to you from Carbon.

00:24:23.320 --> 00:24:26.300
If you are not wanting
to use Carbon or you are,

00:24:26.420 --> 00:24:33.190
for example, a Unix command line tool,
you can call directly to

00:24:33.190 --> 00:24:33.190
the Security Core APIs.

00:24:34.390 --> 00:24:41.360
Again, the split is sort of along the
lines of does this call require UI?

00:24:41.440 --> 00:24:45.630
So, the high level calls in Carbon,
may display user interface.

00:24:45.780 --> 00:24:48.210
For example,
if the key chain is locked and

00:24:48.310 --> 00:24:52.690
you make this call to find the
password and a password is found,

00:24:52.790 --> 00:24:56.680
the user may see a dialogue box come
up asking to unlock the key chain.

00:24:56.750 --> 00:25:01.200
And that's the sort of call
where these things happen in

00:25:01.200 --> 00:25:03.290
line and UI could come up.

00:25:03.630 --> 00:25:05.450
So, they remain in Carbon.

00:25:05.530 --> 00:25:08.060
When you're a
Carbon application using those,

00:25:08.300 --> 00:25:11.450
it automatically pulls in all
of the lower level APIs that

00:25:11.450 --> 00:25:12.710
are in Core Services.

00:25:12.740 --> 00:25:16.030
So,
everything there is available in Carbon.

00:25:16.300 --> 00:25:18.240
If you are going straight
to Core Services,

00:25:18.240 --> 00:25:25.300
if you're going straight to that level,
those API calls do not display UI.

00:25:25.360 --> 00:25:30.060
And in order to use them,
you'll include CoreServices.h.

00:25:30.110 --> 00:25:34.550
And again, this is something that can
be used by any application,

00:25:34.550 --> 00:25:40.920
but especially applications that
don't want or need to rely on Carbon.

00:25:43.490 --> 00:25:49.110
So, the basic API routines at that layer,
like I said,

00:25:49.370 --> 00:25:52.440
give you a lot of flexibility.

00:25:52.440 --> 00:25:54.560
If you want to just create
a new item without adding

00:25:54.560 --> 00:25:57.400
it to a particular Keychain,
you'll use new item.

00:25:57.500 --> 00:26:01.400
Add item, of course,
adds an item to a particular Keychain.

00:26:01.490 --> 00:26:07.600
Always you're going to access an item
through a reference called a KC Item Ref.

00:26:07.620 --> 00:26:11.400
And no matter what the item is,
they're all treated the same.

00:26:11.400 --> 00:26:15.100
You'll always use a reference
because you don't know exactly

00:26:15.100 --> 00:26:19.400
what the composition or the backing
store or any of that needs to be.

00:26:19.400 --> 00:26:23.890
If your application uses item refs,
it doesn't have to worry about

00:26:23.890 --> 00:26:26.400
any of those underlying details.

00:26:26.400 --> 00:26:29.890
You'll use get attribute when
you need to get an attribute from

00:26:29.890 --> 00:26:34.390
an item and set attribute will,
of course, set the attribute on the item.

00:26:34.400 --> 00:26:36.380
And the same thing with data.

00:26:36.390 --> 00:26:40.610
Get data will get the data of the
item and set data will set it.

00:26:43.870 --> 00:26:47.630
When you're all done sort of, you know,
adding or, you know,

00:26:47.800 --> 00:26:50.690
changing the item around,
you'll use Update Item,

00:26:50.730 --> 00:26:53.800
which will write it out to
the Keychain and commit it.

00:26:53.800 --> 00:26:59.100
And when you're all done with an item,
we want you to call

00:26:59.100 --> 00:27:02.290
KC Release Item because that will release
the memory that the item occupies.

00:27:04.900 --> 00:27:07.450
Again,
if you need the flexibility of being able

00:27:07.450 --> 00:27:12.120
to find more than one item in a Keychain,
we provide sort of a lightweight

00:27:12.120 --> 00:27:16.400
database-type API called
FindFirst and FindNextItem.

00:27:16.450 --> 00:27:20.160
FindFirstItem, of course,
you pass in the same sort of thing

00:27:20.160 --> 00:27:24.400
that you would to the higher-level
ones in terms of attributes.

00:27:24.400 --> 00:27:26.400
These are the things I'm looking for.

00:27:26.400 --> 00:27:27.400
Find these items.

00:27:27.400 --> 00:27:29.520
And what that will call,
what it will do is return

00:27:29.520 --> 00:27:30.400
a search reference.

00:27:30.490 --> 00:27:34.140
And then you can pass that search
reference to FindNextItem and continue

00:27:34.140 --> 00:27:36.400
searching until no more items match.

00:27:36.400 --> 00:27:39.400
And when you're all done with one
of those multiple item searches,

00:27:39.400 --> 00:27:44.770
you can call KC ReleaseSearch and that
will release the memory that it occupies.

00:27:45.430 --> 00:27:49.960
Now, in a similar way to using
a KC Item Ref when you're

00:27:49.960 --> 00:27:53.730
dealing with items,
you want to use something called a

00:27:53.730 --> 00:27:56.350
KC Ref to refer to keychains themselves.

00:27:56.490 --> 00:27:58.300
Most of the time,
your application won't care

00:27:58.350 --> 00:28:01.300
about keychains or where a
particular item is stored.

00:28:01.480 --> 00:28:04.290
But if you do, you'll use a KC Ref.

00:28:04.360 --> 00:28:09.160
We provide two routines there
to sort of translate between a

00:28:09.210 --> 00:28:14.300
KC Ref and an object in a file system
that's specified by an alias record.

00:28:14.300 --> 00:28:19.300
But it's real important to realize that
it's not always going to be a file.

00:28:19.340 --> 00:28:22.700
And in fact,
you really can't assume ever that

00:28:22.700 --> 00:28:25.090
a keychain is a file on the disk.

00:28:25.190 --> 00:28:26.300
That's a bad thing to do.

00:28:26.300 --> 00:28:30.450
If you were at this talk last year,
I said the same thing

00:28:30.450 --> 00:28:32.170
and it's still true.

00:28:32.300 --> 00:28:32.900
Now that we have actual keychain access,
we can't assume that a

00:28:32.900 --> 00:28:33.300
keychain is a file on the disk.

00:28:33.300 --> 00:28:33.300
So, we're going to use a
KC Ref to refer to keychains.

00:28:33.300 --> 00:28:33.300
Now,
in a similar way to using a KC Item Ref,

00:28:33.300 --> 00:28:33.300
we provide two routines there
to sort of translate between a

00:28:33.300 --> 00:28:33.300
KC Ref and an object in a file system
that's specified by an alias record.

00:28:33.300 --> 00:28:33.300
But it's real important to realize that
it's not always going to be a file.

00:28:33.300 --> 00:28:36.120
Now that we have actual
smart card support in OS X,

00:28:36.120 --> 00:28:39.300
this is going to be coming
sooner rather than later.

00:28:39.320 --> 00:28:41.290
So, it's real important to remember that.

00:28:41.300 --> 00:28:45.210
KC Get Status is a routine
that's your friend.

00:28:45.340 --> 00:28:47.300
It will tell you a lot of information.

00:28:47.300 --> 00:28:50.280
It will tell you whether
the keychain is unlocked,

00:28:50.300 --> 00:28:54.300
a particular keychain
or the default keychain.

00:28:54.460 --> 00:28:57.460
And it will tell you whether
the keychain can be written to

00:28:57.460 --> 00:28:59.300
or if it's just open read only.

00:28:59.300 --> 00:29:02.300
And Get Keychain Name is
pretty aptly named.

00:29:02.300 --> 00:29:06.060
pretty aptly named, it will tell you the
name of the keychain.

00:29:06.460 --> 00:29:11.580
If you need to explicitly
unlock a Keychain,

00:29:11.580 --> 00:29:13.380
you have KC Unlock Keychain.

00:29:13.410 --> 00:29:17.040
Again, most of the time,
you won't need to worry about whether the

00:29:17.040 --> 00:29:21.530
Keychain is locked or unlocked because
all of that will be taken care of for

00:29:21.530 --> 00:29:26.400
you and will just prompt the user to
unlock the Keychain if it's necessary.

00:29:26.400 --> 00:29:31.400
If you need to create a new Keychain,
you'll use KC Create Keychain.

00:29:31.570 --> 00:29:33.830
And if you need to look
through all the Keychains that

00:29:33.900 --> 00:29:37.340
are available in the system,
we have Count Keychains and

00:29:37.500 --> 00:29:41.980
Get End Keychain or Get a
Keychain at a Particular Index.

00:29:43.710 --> 00:29:47.740
The notification section of
the API is pretty useful.

00:29:47.740 --> 00:29:51.920
Every time an event
happens with a key chain,

00:29:52.100 --> 00:29:55.390
someone unlocks it, someone locks it,
someone adds something to it,

00:29:55.580 --> 00:29:57.100
someone retrieves data from it.

00:29:57.200 --> 00:30:01.680
This generates a key chain event and your
application can register to get these

00:30:01.680 --> 00:30:04.120
events to sort of see what's going on.

00:30:04.140 --> 00:30:07.370
Perhaps you want to write a
logging application that logs

00:30:07.370 --> 00:30:09.260
all accesses to the key chain.

00:30:09.260 --> 00:30:11.810
You can do that by registering
for key chain events.

00:30:11.810 --> 00:30:17.020
You'll call add callback and that will
register a routine that will call to

00:30:17.020 --> 00:30:19.010
let you know when these things occur.

00:30:19.020 --> 00:30:21.820
It will give you information
about what key chain it was,

00:30:21.820 --> 00:30:24.910
what key chain item it was,
what the process was

00:30:24.910 --> 00:30:26.410
that asked and so on.

00:30:26.500 --> 00:30:30.290
You can register only for those
events that you care about.

00:30:30.290 --> 00:30:33.420
For example, you may not care when the
key chain locks or unlocks.

00:30:33.530 --> 00:30:36.420
The only thing you care about
is somebody retrieved data.

00:30:36.470 --> 00:30:39.100
So you can just register, for example,
for that event.

00:30:39.100 --> 00:30:44.410
. . . . . . . . And when you're all done,
you can call Remove Callback before

00:30:44.410 --> 00:30:47.390
your application is ready to quit.

00:30:47.710 --> 00:30:53.690
Here's a little snippet of code that
shows how simple this is really to use.

00:30:53.780 --> 00:30:57.600
This routine, connect to server,
takes two arguments.

00:30:57.600 --> 00:31:00.440
We're about to connect to a
server and we know something.

00:31:00.440 --> 00:31:03.700
We know the server's name that we're
going to connect to and we know an

00:31:03.700 --> 00:31:05.600
account that we want to connect as.

00:31:05.600 --> 00:31:10.150
So the first thing is to see if there's a
password in the Keychain before we go and

00:31:10.150 --> 00:31:12.600
ask the user to type in their password.

00:31:12.600 --> 00:31:15.480
So in this case,
KC Find Internet Password

00:31:15.480 --> 00:31:17.600
takes a series of arguments.

00:31:17.600 --> 00:31:20.600
And the first argument it takes
is the name of the server.

00:31:20.610 --> 00:31:21.590
And so I can just pass that in.

00:31:21.640 --> 00:31:24.600
The server in this case
that I'm interested in.

00:31:24.680 --> 00:31:28.600
It takes a security domain argument,
which is a string.

00:31:28.600 --> 00:31:31.610
In this case,
I'm not concerned about the domain,

00:31:31.640 --> 00:31:32.590
so I pass nil.

00:31:32.590 --> 00:31:34.460
I pass in my account name.

00:31:34.610 --> 00:31:36.600
I can pass in a port.

00:31:36.600 --> 00:31:38.590
Since I'm not concerned
about a particular port,

00:31:38.590 --> 00:31:41.590
I can pass the constant anyport.

00:31:41.600 --> 00:31:41.600
I can pass in my account name.

00:31:41.600 --> 00:31:41.600
I can pass in a port.

00:31:41.600 --> 00:31:41.600
Since I'm not concerned
about a particular port,

00:31:41.600 --> 00:31:41.600
I can pass the constant anyport.

00:31:41.600 --> 00:31:41.600
I can pass in my account name.

00:31:41.600 --> 00:31:41.600
I can pass in a port.

00:31:41.600 --> 00:31:41.600
Since I'm not concerned
about a particular port,

00:31:41.600 --> 00:31:41.600
I can pass the constant anyport.

00:31:41.600 --> 00:31:45.480
I can pass in a particular protocol
type that I'm interested in

00:31:45.490 --> 00:31:47.830
finding and an authorization type.

00:31:47.830 --> 00:31:51.600
Or I'm sorry,
an authentication type constant there.

00:31:51.600 --> 00:31:56.170
And then I pass in a buffer,
a pointer to a buffer that I provide,

00:31:56.170 --> 00:31:58.590
and the length of that buffer.

00:31:58.670 --> 00:32:02.900
If this call is successful and
it actually does find a password,

00:32:03.090 --> 00:32:07.600
it will fill in the buffer with
the password and return no error.

00:32:07.600 --> 00:32:10.600
So after I've made this call,
a number of things could have happened.

00:32:10.600 --> 00:32:16.590
It could have gone off,
asked the user to unlock the keychain,

00:32:16.620 --> 00:32:18.590
created a keychain if
no keychain existed.

00:32:18.690 --> 00:32:22.600
All that stuff I don't have to
worry about in this routine.

00:32:22.600 --> 00:32:23.600
It's all sort of handled for me.

00:32:23.600 --> 00:32:26.470
So down there at the bottom,
if there's an error

00:32:26.660 --> 00:32:30.560
returned from this routine,
then I know that no password in

00:32:30.560 --> 00:32:32.600
fact was there in the keychain.

00:32:32.600 --> 00:32:35.560
And I'll need to do something
to ask the user for the

00:32:35.560 --> 00:32:37.600
password as I normally would.

00:32:37.600 --> 00:32:39.590
And I call a routine there,
my get password.

00:32:39.600 --> 00:32:42.600
And I call the user's internet password,
which actually would go off,

00:32:42.600 --> 00:32:46.600
assuming that it got the
password from the user,

00:32:46.600 --> 00:32:49.980
could go off and call kc add internet
password to put it there in the

00:32:49.980 --> 00:32:52.530
keychain so it's there for next time.

00:32:52.600 --> 00:32:55.500
And then when I get to the
very bottom of the routine,

00:32:55.560 --> 00:32:59.180
either way, I have a password and then
I can connect to the server.

00:33:01.210 --> 00:33:04.810
So the nuts and bolts of
what your application needs

00:33:04.830 --> 00:33:06.870
to do to use the Keychain.

00:33:06.960 --> 00:33:12.030
If you are a CFM application that's
going to be running on 10 and 9,

00:33:12.110 --> 00:33:15.150
you'll want to link against
CarbonLib 1.1 or greater,

00:33:15.280 --> 00:33:17.100
which has the Keychain API in it.

00:33:17.100 --> 00:33:19.270
If you're a Carbon application on 10,
of course,

00:33:19.270 --> 00:33:21.090
you will link with the Carbon framework.

00:33:21.090 --> 00:33:24.550
And if you are a Cocoa application,
you can link with either one,

00:33:24.550 --> 00:33:27.370
depending on what your needs
are and which portions of

00:33:27.370 --> 00:33:28.900
the API you want to bring in.

00:33:29.100 --> 00:33:32.520
If you are a command line tool,
you probably should not

00:33:32.520 --> 00:33:34.080
link against Carbon.

00:33:34.090 --> 00:33:38.120
You'll only want to link with the
core services framework and the things

00:33:38.120 --> 00:33:40.330
that don't necessarily require UI.

00:33:41.300 --> 00:35:04.800
[Transcript missing]

00:35:05.080 --> 00:35:07.000
The Mac OS Keychain is a tool
that is run into is an application

00:35:07.000 --> 00:35:12.320
that's perhaps a command line tool,
something running over, you know,

00:35:12.320 --> 00:35:16.440
you're logged in via SSH, let's say,
and you're running this application and,

00:35:16.460 --> 00:35:20.660
you know, you can't put up UI.

00:35:20.660 --> 00:35:23.170
You have a command line interface.

00:35:23.170 --> 00:35:23.170
So,

00:35:23.660 --> 00:35:28.970
If you have no way of unlocking
the Keychain via this dialog box,

00:35:28.970 --> 00:35:33.850
we provide the ability to unlock
it programmatically with KC Unlock,

00:35:34.160 --> 00:35:40.590
but again, this is something where UI is
not the way you want to go there.

00:35:40.600 --> 00:35:47.470
The second point that I wanted to make
is that when you're using the Keychain,

00:35:47.470 --> 00:35:51.090
you should always let the user
decide to use the Keychain and

00:35:51.090 --> 00:35:54.600
let the user make the decisions
about when to interact with it.

00:35:54.690 --> 00:35:59.230
The way a lot of apps handle this is
when you have a password dialog box,

00:35:59.330 --> 00:36:02.680
it'll have a little checkbox
next to it that says,

00:36:02.680 --> 00:36:07.950
"Add this to my Keychain," or maybe,
"Remember this password." Again,

00:36:07.960 --> 00:36:10.600
you're letting the user make
the decision at that point.

00:36:10.600 --> 00:36:13.770
whether or not they want to store it.

00:36:14.990 --> 00:36:20.310
And the final item there is a
real fundamental principle of

00:36:20.310 --> 00:36:26.930
UI design that often gets lost,
but it bears repeating.

00:36:26.930 --> 00:36:26.930
And that is,

00:36:27.320 --> 00:36:31.980
All of the things that occur that
bring up UI should be the direct result

00:36:32.010 --> 00:36:33.600
of the user having done something.

00:36:33.750 --> 00:36:38.160
So if I make a call to find
Internet password and it

00:36:38.160 --> 00:36:41.150
needs to put up a dialogue,
that's the same as my directly

00:36:41.150 --> 00:36:42.660
putting up that dialogue.

00:36:42.710 --> 00:36:46.200
And if that occurs at some
point long after the user has

00:36:46.300 --> 00:36:50.690
interacted with your application,
it can be very confusing.

00:36:50.770 --> 00:36:55.190
If I set up, for example,
a mail account and then, you know,

00:36:55.230 --> 00:37:00.380
30 minutes into the future,
mail is asking me for my Keychain

00:37:00.380 --> 00:37:04.870
password or permission to access it,
there's no consistent sort of

00:37:04.880 --> 00:37:08.590
connection in my mind between my act of,
you know,

00:37:08.610 --> 00:37:12.630
interacting with the mail client
or whatever it happens to be

00:37:12.700 --> 00:37:14.700
and its use of the password.

00:37:14.720 --> 00:37:17.510
So when you call
KC Find Internet Password

00:37:17.510 --> 00:37:20.700
or any of these high-level
APIs that can bring up the data,

00:37:20.700 --> 00:37:26.700
be sure that you do it as a result
of something the user has done.

00:37:26.700 --> 00:37:30.770
They've clicked Add, they've clicked,
you know, Connect,

00:37:30.970 --> 00:37:32.700
whatever it happens to be.

00:37:34.380 --> 00:37:39.340
So, along those lines,
it's entirely appropriate to cache items

00:37:39.340 --> 00:37:42.920
that you retrieve out of a Keychain.

00:37:42.920 --> 00:37:45.770
Especially on 10,
when you have a protected memory model,

00:37:45.830 --> 00:37:50.620
you can hold something in your own
process's memory space and other

00:37:50.620 --> 00:37:55.490
processes running on the system,
the user happens to start up,

00:37:55.490 --> 00:37:58.660
can't get access to it.

00:37:58.660 --> 00:38:02.400
The caveat there is that
while memory is protected,

00:38:02.460 --> 00:38:07.760
you want to protect against that
thing getting written out to disk.

00:38:07.800 --> 00:38:10.620
And the way to do that
is to lock the memory.

00:38:10.620 --> 00:38:14.900
You always make sure that memory is
locked if it contains sensitive data.

00:38:14.900 --> 00:38:17.780
On Carbon,
the calls that you'll use to do that are

00:38:17.910 --> 00:38:22.900
hold memory to actually lock it down and
unhold memory when you're done with it.

00:38:23.240 --> 00:38:27.950
And the same thing for,
if you're using BSD at that level,

00:38:28.290 --> 00:38:34.060
you'll use M-lock and M-unlock,
which is essentially the same thing.

00:38:35.300 --> 00:38:41.530
So now I'd like to actually show you
a demo of how this works on OS X.

00:38:45.800 --> 00:38:51.260
Down here in the Applications and
Utilities folder is your friend,

00:38:51.360 --> 00:38:52.980
Keychain Access.

00:38:52.980 --> 00:38:57.220
This little utility will show you your
keychains and let you manage them.

00:38:57.310 --> 00:38:59.240
It shows you what's in a keychain.

00:38:59.240 --> 00:39:02.060
In this case,
I have a keychain that's empty.

00:39:02.070 --> 00:39:05.060
So,
start off with nothing in my keychain.

00:39:05.060 --> 00:39:11.520
And I'll set up a mail account
in the mail application.

00:39:14.500 --> 00:39:18.180
actually have an account set up here.

00:39:18.180 --> 00:39:23.680
I have a particular email address
and I have a server name that

00:39:23.680 --> 00:39:27.810
I'm going to be connecting to
to retrieve mail and a username.

00:39:27.860 --> 00:39:32.860
Now it makes logical sense that those
are good attributes for a keychain item.

00:39:32.860 --> 00:39:35.280
If I'm storing a
password in the keychain,

00:39:35.340 --> 00:39:38.260
those are tags that I can add
as attributes so that I can find

00:39:38.420 --> 00:39:43.360
that particular password when
I go to connect to this server.

00:39:43.390 --> 00:39:47.070
I'm not going to type
in a password For now,

00:39:47.070 --> 00:39:47.070
I will...

00:39:49.700 --> 00:39:52.280
"I'm going to actually
get mail at this point,

00:39:52.360 --> 00:39:58.270
and when I click that, I guess, uh,

00:39:58.570 --> 00:40:01.120
Here, let's quit and try again.

00:40:01.130 --> 00:40:06.300
I think what Mail did was cache my
password from when I set this up.

00:40:07.010 --> 00:40:13.710
So, when mail actually goes
to connect to the server,

00:40:13.710 --> 00:40:13.710
it has

00:40:14.220 --> 00:40:18.200
looked in the Keychain,
found nothing there,

00:40:18.360 --> 00:40:21.570
and is putting up a dialog
asking me to type in my password.

00:40:21.570 --> 00:40:23.570
So I'll go ahead and do that.

00:40:24.180 --> 00:40:27.560
And then I can make the decision
to actually remember that

00:40:27.560 --> 00:40:29.240
or store it in the Keychain.

00:40:29.300 --> 00:40:32.960
And then I go off and it goes off
to the server and looks for my mail.

00:40:33.050 --> 00:40:36.060
Now notice what happened in the Keychain.

00:40:36.110 --> 00:40:38.170
An item just got added.

00:40:38.430 --> 00:40:42.560
So, let's quit mail and take
a look at this item.

00:40:42.560 --> 00:40:46.980
It's got a label here,
which is the server that I connected to.

00:40:47.020 --> 00:40:54.010
It put an internet password in there with
the account name that I logged in as.

00:40:54.570 --> 00:41:00.320
Now there's something new for OS X with
Keychain items and we have an access

00:41:00.340 --> 00:41:05.050
control pane now in Keychain access
that lets you sort of set up who has

00:41:05.330 --> 00:41:08.400
access to this particular password.

00:41:08.510 --> 00:41:13.650
So by default,
the mail application created it and we

00:41:13.650 --> 00:41:17.340
give mail access by default to this item.

00:41:17.400 --> 00:41:22.730
You can turn off access altogether or
you can allow access by any application

00:41:22.730 --> 00:41:26.400
that wants to access it without
putting up that warning dialogue.

00:41:26.400 --> 00:41:30.490
So to show you what that looks like,
I'm going to actually remove mail

00:41:30.490 --> 00:41:32.400
from that access control list.

00:41:32.410 --> 00:41:39.000
And now mail no longer has
pre-approved access to this item.

00:41:39.210 --> 00:41:43.850
So when I go to save this list,
I get asked permission to actually

00:41:43.910 --> 00:41:47.100
change the access control list here,
which I will do.

00:41:47.100 --> 00:41:51.380
And I'll go back and run mail.

00:41:54.970 --> 00:41:59.480
Mail goes off, tries to look the password
up in the Keychain,

00:41:59.890 --> 00:42:03.260
finds the password,
but it doesn't have access

00:42:03.320 --> 00:42:06.750
to just get the password
without the user's knowledge.

00:42:06.850 --> 00:42:09.080
So I get this confirmation dialogue.

00:42:09.080 --> 00:42:12.800
And I can look at, in fact,
the details of this.

00:42:12.800 --> 00:42:16.280
This is the Keychain that is
being accessed and this is

00:42:16.280 --> 00:42:19.770
the particular process that is
wanting access to this item.

00:42:19.800 --> 00:42:23.970
And my choices are I can allow
this to occur just once or

00:42:23.970 --> 00:42:28.800
I can permanently allow it to
occur by clicking Always Allow.

00:42:28.800 --> 00:42:31.640
And when I do that,
if we go back to the access

00:42:31.950 --> 00:42:35.620
control pane of this item,
we'll see that mail's

00:42:35.620 --> 00:42:38.120
been re-added to the list.

00:42:40.290 --> 00:42:44.700
So Mail is one client
of the Keychain in OS X,

00:42:44.700 --> 00:42:46.900
but it's integrated
pretty well throughout.

00:42:46.900 --> 00:42:52.970
The Finder has a connect to server to
connect to a particular Apple share,

00:42:53.020 --> 00:42:55.190
I can speak, Apple share server.

00:42:55.240 --> 00:42:59.740
In this case,
I can connect to iDisk.mac.com,

00:42:59.880 --> 00:43:02.640
which is really just an AFP server.

00:43:02.640 --> 00:43:04.640
So when I go to connect to it,

00:43:05.190 --> 00:43:07.420
It asked me for a name and password.

00:43:07.420 --> 00:43:11.260
And again,
Apple Share has provided some human

00:43:11.260 --> 00:43:15.460
interface to let me decide whether or
not I want to store it in the Keychain.

00:43:15.560 --> 00:43:17.100
So I'll click yes.

00:43:17.100 --> 00:43:25.450
I'll go ahead and log in as
the account that I set up.

00:43:34.000 --> 00:43:35.690
And I can mount that volume.

00:43:35.770 --> 00:43:40.140
Now, I talked a little bit earlier
on about providing a transparent

00:43:40.140 --> 00:43:41.770
authentication experience.

00:43:41.770 --> 00:43:48.040
So, one thing I can do in the Apple share
case is to make an alias of the server,

00:43:48.040 --> 00:43:51.610
or I'm sorry, of the volume,
and then I'll go ahead

00:43:51.610 --> 00:43:53.860
and unmount this volume.

00:43:55.860 --> 00:44:01.300
And let's first examine this item
and see who has access to it.

00:44:01.880 --> 00:44:03.790
So we see that the
finder has access to it.

00:44:03.930 --> 00:44:08.300
So now if I go back to the finder
and I double click on this alias,

00:44:08.560 --> 00:44:11.140
because the finder has access,

00:44:14.500 --> 00:44:20.000
- You get the spinning cursor and
the volume just mounts without

00:44:20.000 --> 00:44:20.000
having to type in a password.

00:44:22.690 --> 00:44:27.400
The other thing that's new in OS X with
Keychain access is the ability for users

00:44:27.400 --> 00:44:30.550
to add their own types of passwords.

00:44:30.670 --> 00:44:33.900
For example,
software registration numbers,

00:44:33.900 --> 00:44:37.140
credit card numbers, PIN numbers,
whatever it may be.

00:44:37.230 --> 00:44:41.150
All they have to do is click "Add"
and I can add something like,

00:44:41.150 --> 00:44:43.970
you know, my software serial number.

00:44:45.470 --> 00:44:56.980
For me, and I'll type in whatever
that happens to be.

00:44:56.980 --> 00:44:56.980
I can look at it in
clear text if I want to.

00:44:56.980 --> 00:44:56.980
That's not what it defaults to.

00:44:56.980 --> 00:44:56.980
I'll go ahead and add it.

00:44:57.350 --> 00:45:04.120
And now I have an item that I stored
without a whole lot of musts or fuss.

00:45:04.280 --> 00:45:04.300
I can give a

00:45:04.610 --> 00:45:07.540
applications pre-approval
to access this item.

00:45:07.610 --> 00:45:10.940
If I know that a particular
application is going to need this

00:45:10.940 --> 00:45:14.880
password or this serial number,
I can go ahead from this interface

00:45:14.950 --> 00:45:19.210
and change the access control list.

00:45:19.210 --> 00:45:19.210
I can go to

00:45:20.310 --> 00:45:24.190
For example, applications and, you know,
maybe it's a serial

00:45:24.380 --> 00:45:26.100
number for a chess game.

00:45:26.180 --> 00:45:30.090
So I can add that and now whenever
chess looks for a serial number

00:45:30.090 --> 00:45:37.710
that's stored in the Keychain,
the user won't be bothered with

00:45:37.760 --> 00:45:39.390
the dialog asking for permission
because chess is pre-approved.

00:45:41.440 --> 00:45:50.050
Now, I mentioned that by default,
the Keychain is unlocked when you log

00:45:50.050 --> 00:45:52.000
in and it's locked when you log out.

00:45:52.210 --> 00:45:55.930
You can change those
settings at any time.

00:45:55.980 --> 00:46:00.400
You can have it lock after a period of
inactivity or when the system sleeps.

00:46:00.400 --> 00:46:07.890
And of course, at any time,
you can manually lock the Keychain.

00:46:07.890 --> 00:46:07.890
So if I manually lock the Keychain,

00:46:08.620 --> 00:46:13.060
Then those things that need
to access it will require the

00:46:13.130 --> 00:46:14.780
Keychain to be unlocked first.

00:46:14.820 --> 00:46:19.270
So when I double clicked on
that alias and the finder,

00:46:19.450 --> 00:46:23.030
or in this case Apple Share,
did a find to look for its

00:46:23.040 --> 00:46:26.100
password in the Keychain,
the Keychain was locked.

00:46:26.100 --> 00:46:30.510
And so we take care of putting
up this unlock dialog for you

00:46:30.510 --> 00:46:35.800
and your application just doesn't
have to handle all of that.

00:46:35.860 --> 00:46:38.280
So I'll unlock the key chain.

00:46:38.280 --> 00:46:40.650
I did enter the wrong passphrase.

00:46:44.200 --> 00:46:50.900
[Transcript missing]

00:46:51.100 --> 00:46:54.080
And then when the Keychain unlocks,
the volume will mount.

00:46:54.200 --> 00:46:56.730
So that's pretty much it for the demo.

00:46:56.780 --> 00:47:01.430
Go back to the last slide if we could.

00:47:03.790 --> 00:47:07.370
So just to sum up,
the Keychain is like a bank vault

00:47:07.530 --> 00:47:11.240
for all of your sensitive passwords,
keys,

00:47:11.340 --> 00:47:13.430
things that you need to store securely.

00:47:13.430 --> 00:47:15.440
And it's provided for
you as a system service,

00:47:15.440 --> 00:47:18.100
so it's always there and you
don't have to roll your own

00:47:18.100 --> 00:47:19.360
code to do the encryption.

00:47:19.550 --> 00:47:21.770
It's very simple to use.

00:47:21.770 --> 00:47:26.340
Most applications just
need to do find and add.

00:47:26.350 --> 00:47:26.350
And

00:47:26.580 --> 00:47:30.600
All of this is there now in
OS X as shipped out of the box.

00:47:30.670 --> 00:47:34.640
So go ahead, get started with it,
and thank you.

00:47:34.640 --> 00:47:36.670
What I'd like...

00:47:40.700 --> 00:48:30.000
[Transcript missing]

00:48:30.560 --> 00:48:33.400
We have a number of
security sessions here.

00:48:33.530 --> 00:48:36.570
Of course,
now three of them are already over,

00:48:36.570 --> 00:48:42.010
but encourage you to look
at the session on Kerberos.

00:48:42.010 --> 00:48:45.470
And if you can, if you happen to miss
any of the other two,

00:48:45.530 --> 00:48:48.770
try to take a look at those when the
sessions become available in whatever

00:48:48.770 --> 00:48:50.500
format they become available in.

00:48:50.740 --> 00:48:53.670
And then please come on
Friday and talk to us.

00:48:53.670 --> 00:48:57.950
Tell us what you want to see,
or if you have concerns about this or

00:48:57.960 --> 00:49:00.500
suggestions for how we can improve it.

00:49:00.500 --> 00:49:02.290
Please let us know.

00:49:02.680 --> 00:49:06.630
Here's the email address
for all of your questions.

00:49:06.960 --> 00:49:07.830
Talk to Craig.

00:49:07.890 --> 00:49:12.640
Craig makes sure that we,
or the appropriate team,

00:49:12.640 --> 00:49:17.110
gets notified so that we can
handle whatever issues come up.