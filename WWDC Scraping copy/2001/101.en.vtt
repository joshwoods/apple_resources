WEBVTT

00:00:01.250 --> 00:00:03.200
How are you all doing?

00:00:03.200 --> 00:00:04.200
Good.

00:00:04.200 --> 00:00:05.200
You're awake?

00:00:05.200 --> 00:00:06.200
Yes.

00:00:06.840 --> 00:00:09.200
All right.

00:00:09.200 --> 00:00:11.630
A little bit late, but let's start.

00:00:13.800 --> 00:00:16.950
All right, you've seen the architecture
diagram for Mac OS X,

00:00:16.960 --> 00:00:20.790
and I'm here to talk about the part of
it that I am extremely passionate about,

00:00:20.910 --> 00:00:23.710
and that is the frameworks.

00:00:25.490 --> 00:00:29.190
Killer frameworks enable
killer applications.

00:00:29.240 --> 00:00:32.200
People talk about killer graphics,
they talk about killer apps,

00:00:32.230 --> 00:00:36.860
but it's really the killer frameworks
that enable you to create this

00:00:36.860 --> 00:00:38.400
application with all this functionality.

00:00:38.400 --> 00:00:43.190
And we have a bunch of different
frameworks to enable this.

00:00:44.030 --> 00:00:46.700
Now a lot of you are asking, you know,
how can you either, you know,

00:00:46.700 --> 00:00:49.900
write or bring a killer app to Mac OS X?

00:00:49.970 --> 00:00:52.510
So maybe you have a great
Mac OS 9 application and

00:00:52.510 --> 00:00:53.390
you want to bring it over.

00:00:53.400 --> 00:00:55.900
Maybe you're interested in Java or Unix.

00:00:55.900 --> 00:00:58.090
Or, you know,
you want to build a new killer

00:00:58.210 --> 00:00:59.860
application from the ground up.

00:00:59.900 --> 00:01:01.900
So how do you do that?

00:01:01.900 --> 00:01:03.900
And the answer, of course, is frameworks.

00:01:05.130 --> 00:01:08.190
So the way I see it,
there are five different

00:01:08.350 --> 00:01:09.770
framework stacks.

00:01:09.850 --> 00:01:11.400
So there's Classic.

00:01:11.410 --> 00:01:15.250
This is really the
Mac OS toolbox from Mac OS 9.

00:01:15.350 --> 00:01:18.040
So that, of course,
runs on Mac OS X as part of Classic.

00:01:18.040 --> 00:01:21.400
There's Java and the
full Java 2 platform.

00:01:21.400 --> 00:01:25.270
There's BSD and all the Unix APIs,
the POSIX APIs,

00:01:25.270 --> 00:01:27.910
which form the basis of Darwin.

00:01:27.910 --> 00:01:32.130
And there's Carbon for your Mac OS 9
applications to move this forward.

00:01:32.130 --> 00:01:33.370
And there's Cocoa.

00:01:34.150 --> 00:01:36.800
Let's start with classic.

00:01:37.140 --> 00:01:43.340
So the purpose of Classic is to make
it so Mac OS 9 applications just run.

00:01:43.340 --> 00:01:43.700
All right?

00:01:43.700 --> 00:01:45.040
No change whatsoever.

00:01:45.320 --> 00:01:47.390
Your Mac OS 9 application
just brings it over.

00:01:47.390 --> 00:01:50.670
You get a great engineering team,
they created a killer app,

00:01:50.670 --> 00:01:52.390
and that'll continue to run.

00:01:52.620 --> 00:01:55.400
So you should really consider
investing time in developing

00:01:55.400 --> 00:01:57.810
an application for Mac OS X.

00:01:57.810 --> 00:02:01.900
In classic, if your engineering team
now looks like this.

00:02:03.420 --> 00:02:07.660
That is to say, if you no longer have
an engineering team,

00:02:07.660 --> 00:02:11.390
then thank goodness your
application continues to run.

00:02:11.830 --> 00:02:14.940
But the fact that you actually
are here at the conference means

00:02:14.940 --> 00:02:21.030
you employ at least one person,
and that means Classic is not for you.

00:02:21.180 --> 00:02:23.410
So there's really only four stacks.

00:02:24.800 --> 00:02:27.400
I'm sure the classic folks are going
to beat me up in the parking lot later.

00:02:27.410 --> 00:02:31.190
All right, so let's talk about Java.

00:02:32.990 --> 00:02:38.180
Java is there to bring cross-platform
applications to Mac OS X.

00:02:38.200 --> 00:02:43.080
Java, as its very nature,
is a cross-platform API set,

00:02:43.230 --> 00:02:47.100
and we have a great implementation on X,
and the purpose is to bring those

00:02:47.310 --> 00:02:50.490
cross-platform applications to Mac OS X.

00:02:51.780 --> 00:02:54.600
So if you go out and do some market
research and you try to figure out,

00:02:54.730 --> 00:02:58.570
you know, who are the people who have
decided that Java fills the need

00:02:58.700 --> 00:03:02.280
for them for their application,
the answer is, number one,

00:03:02.350 --> 00:03:05.080
it is people who want cross-platform
to many different platforms,

00:03:05.210 --> 00:03:05.660
right?

00:03:05.660 --> 00:03:08.700
Not just two platforms,
but many different platforms.

00:03:08.950 --> 00:03:16.330
And they're really looking for a common
denominator between these platforms.

00:03:16.330 --> 00:03:16.330
And Java can solve it for these people.

00:03:16.990 --> 00:03:18.110
Enterprise customers.

00:03:18.280 --> 00:03:20.980
So Java has really taken
off in the enterprise space,

00:03:20.980 --> 00:03:23.290
so Java on the server.

00:03:25.040 --> 00:03:28.770
Then there's a set of people using
Java as an intranet solution.

00:03:28.780 --> 00:03:31.900
So within a company,
they know what the runtime is,

00:03:31.900 --> 00:03:33.900
they know they have really,
really fast bandwidth,

00:03:33.900 --> 00:03:35.890
they can download the
class files to the client.

00:03:35.890 --> 00:03:39.410
So these people are all using Java.

00:03:40.130 --> 00:03:44.340
If these describe you,
then Mac OS X is the platform for you.

00:03:44.340 --> 00:03:47.480
And really,
you can move over to Mac OS X.

00:03:48.740 --> 00:03:51.800
So on Mac OS X we start with
the standard Java pieces,

00:03:51.820 --> 00:03:52.000
right?

00:03:52.120 --> 00:03:57.600
So we have Java 2 Standard Edition 1.3.

00:03:57.600 --> 00:04:01.710
So in Java parlance, 1.3 equals 2.

00:04:04.810 --> 00:04:07.180
We have the full Swing UI toolkit.

00:04:07.250 --> 00:04:12.500
So this is their standard set of buttons
and sliders and all that sort of thing.

00:04:13.600 --> 00:04:15.090
We have the Hotspot Client VM.

00:04:15.350 --> 00:04:17.240
Now the Hotspot Client
VM is pretty interesting.

00:04:17.240 --> 00:04:19.600
It actually,
while the bytecodes are running,

00:04:19.600 --> 00:04:23.730
tries to figure out what parts of the
application are taking the most CPU and

00:04:23.830 --> 00:04:25.500
then compile those sort of dynamically.

00:04:25.600 --> 00:04:27.930
The great thing is,
since Sun is developing on a

00:04:27.930 --> 00:04:30.940
Unix-based system and they're
developing technologies like

00:04:30.990 --> 00:04:34.060
this on a Unix-based system,
we can pull that over to

00:04:34.060 --> 00:04:35.580
Mac OS X a lot faster.

00:04:35.600 --> 00:04:38.890
And in fact, now that we have Mac OS X,
we'll be able to keep up

00:04:38.890 --> 00:04:42.580
in the Java space much,
much better than we could before on 9.

00:04:44.730 --> 00:04:49.000
We have Java 2,
so their whole 2D solution.

00:04:49.040 --> 00:04:52.600
Printing support,
so Java supports printing,

00:04:52.600 --> 00:04:57.010
and after half a decade,
they support drag and drop, and so do we.

00:04:58.800 --> 00:05:00.520
All right,
but we didn't stop there with Java.

00:05:00.620 --> 00:05:02.500
We wanted to get, you know, premium Java.

00:05:02.500 --> 00:05:06.770
We wanted to make it so when you
ran a Java application on Mac OS X,

00:05:06.860 --> 00:05:10.660
it felt even better than running
it on a different platform.

00:05:11.720 --> 00:05:15.760
So the first thing we did for that
is we give it the Aqua look and feel.

00:05:15.840 --> 00:05:19.900
So when you run Java on Mac OS X,
it won't look like, you know,

00:05:19.900 --> 00:05:23.590
Motif or other nightmare UIs.

00:05:23.740 --> 00:05:26.510
It will look like Aqua.

00:05:26.590 --> 00:05:29.480
And we don't want those applications
to stand out as being different.

00:05:29.480 --> 00:05:33.480
It should just look like a standard
application on our platform.

00:05:34.340 --> 00:05:37.640
We also really care about
performance in the desktop.

00:05:37.640 --> 00:05:39.860
Okay,
so we really want Java to run well for

00:05:39.900 --> 00:05:41.630
applications you build on the desktop.

00:05:41.630 --> 00:05:45.150
Now I know that the Java community is
interested in making Java run well,

00:05:45.150 --> 00:05:48.170
you know, on rings and in cards.

00:05:48.200 --> 00:05:53.190
At Java conference a couple years
ago they gave out rings with Java.

00:05:53.190 --> 00:05:54.550
Extremely useful.

00:05:54.840 --> 00:06:01.960
So we care about making Java run well
on the desktop with an application.

00:06:02.110 --> 00:06:06.320
And so one thing we've done there is
when you launch an application we try to

00:06:06.320 --> 00:06:09.540
share certain parts of the subsystems.

00:06:09.600 --> 00:06:12.570
So Swing, for instance,
instead of having to load that several

00:06:12.950 --> 00:06:16.950
megabytes into every single application,
every single Java application,

00:06:17.000 --> 00:06:21.380
we load it once and we share it between
the different applications the same way

00:06:21.380 --> 00:06:23.730
we do with other application stacks.

00:06:24.820 --> 00:06:39.090
QuickTime for Java.

00:06:39.090 --> 00:06:39.090
So we have this great
technology in QuickTime,

00:06:39.090 --> 00:06:39.090
and we want to make sure that even
Java developers can get access to it,

00:06:39.090 --> 00:06:39.090
and so we've provided full access through
these great QuickTime for Java APIs.

00:06:39.940 --> 00:06:41.260
Double clickable applications.

00:06:41.340 --> 00:06:44.240
Here's an idea.

00:06:44.240 --> 00:06:47.350
A lot of time when people
run Java applications,

00:06:48.860 --> 00:06:56.290
They go into this cool UI called the
shell and they run a little script.

00:06:56.390 --> 00:06:57.420
This sucks, right?

00:06:57.610 --> 00:07:02.450
So on Mac OS X and even on Mac OS 9,
we believe you should go to the finder,

00:07:02.450 --> 00:07:04.090
you should see something,
you should double click it,

00:07:04.130 --> 00:07:05.680
it should run like an application.

00:07:05.740 --> 00:07:07.830
So we fully support that.

00:07:09.190 --> 00:07:13.290
We're doing more than that in that
we're opening up other parts of our

00:07:13.290 --> 00:07:16.140
system dynamically through Java beans.

00:07:16.250 --> 00:07:21.130
So we have a Java bean that will look
at the Cocoa spell checker system

00:07:21.190 --> 00:07:25.610
and it will automatically add that
functionality into your application.

00:07:26.520 --> 00:07:29.870
And as has been said previously,
WebObjects 5.0 is written

00:07:29.870 --> 00:07:30.900
completely in Java.

00:07:30.990 --> 00:07:34.900
So not only are we trying to
provide a great Java platform,

00:07:35.010 --> 00:07:37.210
we're actually using it as well.

00:07:39.300 --> 00:07:44.700
Now, I said Java is there to bring
cross-platform solutions to Mac OS X.

00:07:44.800 --> 00:07:47.830
My guess is most of you have
cross-platform solutions and most

00:07:47.830 --> 00:07:50.200
of you don't use Java to do it.

00:07:50.510 --> 00:07:53.640
The standard way of providing
cross-platform solutions is

00:07:53.640 --> 00:07:56.030
you take your application,
you parse it out into a

00:07:56.030 --> 00:07:57.790
UI piece and a non-UI piece.

00:07:57.800 --> 00:08:00.850
You make that non-UI piece portable,
right?

00:08:00.890 --> 00:08:03.510
You write it in C++, you write it in C,
you can compile it on any

00:08:03.510 --> 00:08:04.740
of the different platforms.

00:08:04.740 --> 00:08:07.030
And then on each of the
platforms you go to,

00:08:07.250 --> 00:08:10.150
you try to take full advantage
of that platform as a native

00:08:10.170 --> 00:08:12.040
application on that platform.

00:08:12.040 --> 00:08:15.100
So when you go to Windows, you know,
you give it a bad UI,

00:08:15.200 --> 00:08:16.940
but you give it the Windows UI.

00:08:17.920 --> 00:08:21.460
And then when you take it to Mac OS,
you can use either Carbon or Cocoa to

00:08:21.650 --> 00:08:24.150
build a great Aqua UI on top of it.

00:08:24.200 --> 00:08:26.740
So this is the standard way, actually,
most of you are doing it.

00:08:26.760 --> 00:08:31.080
But if you've decided that
Java does solve your needs,

00:08:31.100 --> 00:08:36.220
and you're sold on the Java story,
then we are investing very heavily

00:08:36.220 --> 00:08:40.500
to make it so Mac OS X is the place
you go for your Java solution.

00:08:42.810 --> 00:08:44.950
So we really have single stop shopping.

00:08:45.060 --> 00:08:49.870
And the first thing I mean there
is we have a single Java runtime.

00:08:49.940 --> 00:08:52.740
So on many of the other
platforms out there,

00:08:52.810 --> 00:08:54.380
there are multiple Java runtimes.

00:08:54.400 --> 00:08:58.930
In fact, since Windows doesn't even ship
Java 2 as part of the platform,

00:08:59.190 --> 00:09:02.310
either the user has to download it or,
in most cases,

00:09:02.420 --> 00:09:05.510
applications come along with
their own version of the runtime.

00:09:05.520 --> 00:09:07.660
So you get tons and tons
of versions of the runtime.

00:09:07.660 --> 00:09:08.260
This is nuts.

00:09:08.380 --> 00:09:11.120
This means that some apps don't
run because it's a slightly

00:09:11.120 --> 00:09:12.580
different version of the runtime.

00:09:12.580 --> 00:09:14.900
When the runtime changes,
things get screwed up.

00:09:14.970 --> 00:09:19.190
So what we do is we have a single
standard version of the runtime.

00:09:19.200 --> 00:09:19.730
We use it.

00:09:19.980 --> 00:09:23.400
All apps in the system that
are Java use it as well.

00:09:24.250 --> 00:09:25.690
It's a great development platform.

00:09:25.700 --> 00:09:29.070
You get all the benefits of
having a Unix base on here,

00:09:29.080 --> 00:09:31.540
and the standard Java tools all work.

00:09:31.550 --> 00:09:33.720
And it's really a great
deployment platform.

00:09:33.780 --> 00:09:37.840
So if you've decided you want to
deploy a bunch of Java into a school,

00:09:38.010 --> 00:09:41.460
say, well,
you can do this using Mac OS X,

00:09:41.460 --> 00:09:43.800
and they get this great
Aqua user interface and the

00:09:43.800 --> 00:09:46.530
rest of Mac OS X as well.

00:09:46.980 --> 00:09:49.430
So that's Java.

00:09:49.470 --> 00:09:51.780
Let's talk about BSD.

00:09:52.800 --> 00:09:59.030
So, BSD is about bringing
Unix apps to Mac OS X.

00:10:02.220 --> 00:10:06.020
So I went around and did
some research on this too.

00:10:06.020 --> 00:10:07.160
I said, you know, let's bring it on.

00:10:07.200 --> 00:10:08.390
There's a lot of Unix stuff out there.

00:10:08.510 --> 00:10:12.850
There are hundreds and hundreds
of GNU projects with lots and

00:10:13.010 --> 00:10:15.730
lots of Unix-based code in there.

00:10:16.740 --> 00:10:23.190
There are thousands of
POSIX-based applications,

00:10:23.190 --> 00:10:23.190
so applications that use
the standard POSIX APIs.

00:10:24.080 --> 00:10:27.130
And there's just millions and millions
of lines of code that have been written

00:10:27.330 --> 00:10:29.540
to Unix-based operating systems.

00:10:29.590 --> 00:10:33.750
This is especially true in
scientific and higher ed.

00:10:33.860 --> 00:10:37.590
So you go to universities and
they have Unix across the board.

00:10:37.680 --> 00:10:40.990
They have a lot of different versions of
Unix and they have a lot of old machines,

00:10:41.090 --> 00:10:43.510
but they have Unix across the board.

00:10:43.650 --> 00:10:48.330
Because the BSD layer is
built into Mac OS X as a

00:10:48.470 --> 00:10:52.750
fundamental piece of Darwin,
we can take all of those applications

00:10:52.830 --> 00:10:54.780
and move those to Mac OS X.

00:10:54.830 --> 00:10:56.780
This is amazing.

00:10:58.200 --> 00:11:04.520
So if you look at our BSD,
we base it on the BSD standard 4.4.

00:11:04.540 --> 00:11:06.260
And as you know, it's open source.

00:11:06.350 --> 00:11:09.250
So you can go, you can look at the code,
you can check it out,

00:11:09.290 --> 00:11:14.530
you can provide free engineering for
Apple by fixing bugs and submitting them.

00:11:14.580 --> 00:11:17.520
Highly encourage that.

00:11:17.550 --> 00:11:18.640
But it's open source, right?

00:11:18.760 --> 00:11:23.220
So imagine a university now,
which uses a lot of BSD code,

00:11:23.250 --> 00:11:28.530
can hand out an assignment which
is go change the pager of Mac OS X.

00:11:28.610 --> 00:11:30.220
And that can be the assignment, right?

00:11:30.340 --> 00:11:36.660
You can have them really working on a
true mass market operating system and

00:11:36.940 --> 00:11:38.830
manipulating things at the lowest level.

00:11:38.840 --> 00:11:40.910
And this is really exciting.

00:11:42.530 --> 00:11:46.380
Now if you look at the BSD layer,
it's more than just APIs.

00:11:46.460 --> 00:11:48.030
It's APIs and tools.

00:11:48.170 --> 00:11:51.800
So BSD really encompasses
a really large piece.

00:11:52.690 --> 00:11:56.520
So the APIs you're probably, you know,
many of you may be familiar with.

00:11:56.620 --> 00:12:00.360
So it's the POSIX APIs and we, you know,
support most of those.

00:12:00.420 --> 00:12:03.940
It's a set of BSD APIs,
so the standard C library and

00:12:04.040 --> 00:12:06.840
standard I/O and P threads
and all those sorts of things.

00:12:06.930 --> 00:12:10.280
So there's a large set of
APIs and you're free to use those.

00:12:10.380 --> 00:12:13.190
They're all built in as
part of Mac OS X and will

00:12:13.190 --> 00:12:15.310
continue to be going forward.

00:12:16.620 --> 00:12:19.790
The cool thing about BSD for those
folks in the audience who are

00:12:19.940 --> 00:12:24.890
Unix-type people is there's a whole
set of tools in there as well.

00:12:24.900 --> 00:12:27.440
Those tools don't just
sort of come and go.

00:12:27.440 --> 00:12:29.440
Those tools are part of
the operating system.

00:12:29.440 --> 00:12:33.560
And so if you want to use grep,
then you can use grep.

00:12:33.560 --> 00:12:34.450
You don't have to rewrite it.

00:12:34.490 --> 00:12:36.460
Your application can run
it in the background,

00:12:36.460 --> 00:12:41.120
can collect the data, can then quit that,
and actually use these different tools

00:12:41.120 --> 00:12:45.230
to really enhance your application
without rewriting things yourself.

00:12:47.220 --> 00:12:50.290
Okay, now's where I'm going to tread
on the toes of the Unix people.

00:12:50.300 --> 00:12:52.600
How many are the Unix
people in the audience?

00:12:52.700 --> 00:12:54.650
All right.

00:12:55.130 --> 00:13:01.540
Hey, no one is-- porting the apps
to Mac OS X is the easy part.

00:13:01.550 --> 00:13:07.100
Making it a great application on
Mac OS X is going to be your challenge.

00:13:07.160 --> 00:13:13.140
So a lot of my Unix friends think that
this is the greatest UI ever for chess.

00:13:15.540 --> 00:13:18.100
Yeah, the people who raised their
hands are now clapping.

00:13:18.100 --> 00:13:22.090
You know, it's not.

00:13:24.170 --> 00:13:28.720
So the great thing here is
this is a standard GNU chess.

00:13:28.720 --> 00:13:31.760
I did exactly what everyone does
when you want to run a GNU project.

00:13:31.760 --> 00:13:38.090
You download it, then you untar it,
then you configure it,

00:13:38.090 --> 00:13:41.270
then you compile it yourself,
then you run it.

00:13:41.270 --> 00:13:42.220
And it just ran.

00:13:42.220 --> 00:13:43.740
It just runs on Mac OS X, right?

00:13:43.820 --> 00:13:45.020
No changes whatsoever.

00:13:45.020 --> 00:13:45.960
So this is great.

00:13:46.020 --> 00:13:48.580
But that UI leaves a
little bit to be desired.

00:13:48.580 --> 00:13:52.270
Now, of course,
the challenge of a good chess program is

00:13:52.270 --> 00:13:56.970
the smarts of making a nice alpha-beta
pruning search and all this AI piece,

00:13:56.970 --> 00:13:58.420
all these AI pieces.

00:13:58.480 --> 00:14:00.750
But the UI there needs to
be better if you want to get

00:14:00.850 --> 00:14:02.580
things into the Mac community.

00:14:02.580 --> 00:14:04.950
Here's GNU Go.

00:14:04.950 --> 00:14:06.590
Go is pretty simple.

00:14:06.590 --> 00:14:09.960
It's X's and O's and wonderful TTY,
great UI.

00:14:10.240 --> 00:14:13.370
No, this isn't a good UI.

00:14:13.720 --> 00:14:18.080
If you want to build a great UI, though,
what you should do with your GNU source

00:14:18.400 --> 00:14:24.080
or with your Unix-based source is
take-- port it to Mac OS X using

00:14:24.080 --> 00:14:28.430
our BSD layer and then build a
Carbon or Cocoa UI on top of it.

00:14:28.540 --> 00:14:28.640
Right?

00:14:28.640 --> 00:14:30.740
This is really simple to do.

00:14:30.810 --> 00:14:32.990
Let me go ahead and show you this.

00:14:33.180 --> 00:14:38.480
So I looked around to
find a Go app out there,

00:14:38.480 --> 00:14:40.070
and it turns out--

00:14:42.400 --> 00:15:02.200
[Transcript missing]

00:15:02.640 --> 00:15:05.200
So here's a, you know,
they took that little step further

00:15:05.200 --> 00:15:07.100
than just having text in here.

00:15:07.110 --> 00:15:10.980
Now, I looked into it a little further
and they took this next step of

00:15:11.300 --> 00:15:39.100
[Transcript missing]

00:15:39.500 --> 00:15:54.100
[Transcript missing]

00:15:54.500 --> 00:16:16.600
[Transcript missing]

00:16:16.870 --> 00:16:19.120
I mean, you can actually speak to it.

00:16:19.180 --> 00:16:20.800
You can tell it to move the pieces.

00:16:20.800 --> 00:16:23.150
You can sit across,
have it on one machine in your office

00:16:23.240 --> 00:16:24.980
and continually play chess talking to it.

00:16:25.030 --> 00:16:25.790
So this is great.

00:16:25.800 --> 00:16:28.550
But again,
you take the engines that are out there,

00:16:28.550 --> 00:16:32.810
you take all that code that's
been written to the Unix base and

00:16:32.830 --> 00:16:37.590
bring it over to Mac OS X and then
put a great user interface on it.

00:16:42.700 --> 00:16:44.370
All right, so that's BSD.

00:16:44.380 --> 00:16:47.600
Now the one thing you'll notice is
I have BSD in the frameworks layer,

00:16:47.600 --> 00:16:50.900
and normally you won't see it
there because BSD is really

00:16:51.000 --> 00:16:53.500
implemented in the Darwin layer,
right?

00:16:53.570 --> 00:16:54.840
It's implemented as part of Darwin.

00:16:54.840 --> 00:17:00.170
But I put it in the frameworks layer for
today because it's a huge set of APIs.

00:17:00.300 --> 00:17:03.460
There's a lot of code you can bring over,
so it really is a framework.

00:17:03.460 --> 00:17:06.750
It's just not, you know,
it doesn't have a nice UI part to it.

00:17:06.750 --> 00:17:10.520
And so in general you should think about
it as being in the Darwin layer and using

00:17:10.940 --> 00:17:12.680
Carbon or Cocoa as the UI part of it.

00:17:12.700 --> 00:17:15.160
In fact, it just sort of fades
into Darwin normally and

00:17:15.290 --> 00:17:16.410
isn't even pulled out.

00:17:16.480 --> 00:17:20.690
But it is an important stack that you
should consider when thinking of all the

00:17:20.750 --> 00:17:22.720
things you can bring over to Mac OS X.

00:17:22.720 --> 00:17:25.210
Let's talk about Carbon.

00:17:31.460 --> 00:17:37.860
So Carbon is all about bringing your
Mac OS 9 applications to Mac OS X.

00:17:38.890 --> 00:17:43.900
When we looked out there and
saw the huge investment that all

00:17:43.900 --> 00:17:48.760
of you have made in Mac OS 9,
we realized it was silly for us not

00:17:48.920 --> 00:17:54.340
to have an easy way of you moving
your code bases forward onto Mac OS X.

00:17:54.410 --> 00:17:57.190
And so we went through
several iterations of this.

00:17:57.300 --> 00:17:59.420
We met with tons and tons of companies.

00:17:59.420 --> 00:18:01.680
We talked with lots of people.

00:18:01.770 --> 00:18:04.500
And we came up with a
solution which works great,

00:18:04.590 --> 00:18:07.020
and that is Carbon.

00:18:09.140 --> 00:18:13.260
Now I said that you should
carbonize your applications.

00:18:13.350 --> 00:18:16.000
Should you only carbonize
your applications?

00:18:16.000 --> 00:18:18.790
Well, you should certainly
carbonize your applications.

00:18:18.820 --> 00:18:20.680
That's an important piece
that you need to carbonize.

00:18:20.680 --> 00:18:24.060
Both your foreground applications,
Carbon applications,

00:18:24.060 --> 00:18:27.470
old toolbox applications that
have a UI and ones that don't.

00:18:27.470 --> 00:18:31.170
You should also carbonize
all of your plugins.

00:18:31.780 --> 00:18:36.100
A lot of the apps out there are
really just a thin veneer or a

00:18:36.120 --> 00:18:40.250
casing on a whole lot of plugins,
and the plugins define the application.

00:18:40.260 --> 00:18:43.070
So of course you need to take
and carbonize those plugins

00:18:43.070 --> 00:18:44.400
and move those forward.

00:18:46.390 --> 00:18:50.260
However,
you should not carbonize device drivers.

00:18:50.310 --> 00:18:54.570
So device drivers, by their very nature,
are an OS-specific thing, right?

00:18:54.660 --> 00:18:58.880
They live between the hardware
and the OS at the lowest level.

00:18:58.920 --> 00:19:02.120
Since they're OS-specific,
you need to use an OS-specific

00:19:02.120 --> 00:19:04.970
way of writing your device driver.

00:19:05.020 --> 00:19:09.190
So continue to use
Device Manager on Mac OS 9 and

00:19:09.190 --> 00:19:12.010
write I/O Kit drivers on Mac OS X.

00:19:12.070 --> 00:19:17.400
And I/O Kit is this great object-oriented
way of quickly writing device drivers.

00:19:18.900 --> 00:19:20.400
System extensions.

00:19:20.510 --> 00:19:24.040
So everyone loves the nits, right?

00:19:24.080 --> 00:19:28.060
What we love about them is the way it
just locks up our system all the time.

00:19:28.170 --> 00:19:33.050
So please, please,
please don't pollute Mac OS X.

00:19:33.800 --> 00:19:52.000
[Transcript missing]

00:19:53.700 --> 00:19:55.660
So this is for a few people
in the audience here who

00:19:55.680 --> 00:19:56.700
don't know what Carbon is yet.

00:19:56.770 --> 00:19:58.440
Now quickly define it.

00:19:58.550 --> 00:20:00.510
So what is Carbon?

00:20:21.500 --> 00:20:21.500
So we looked at all the
APIs that define the Mac OS,

00:20:21.500 --> 00:20:21.500
right?

00:20:21.500 --> 00:20:21.500
So all the APIs that were Mac OS 9,
earlier Mac OSs, and it's a large set,

00:20:21.500 --> 00:20:21.500
depending on your account, 8 to 10,000.

00:20:21.500 --> 00:20:21.500
And we said,

00:20:21.690 --> 00:20:27.780
We want to move applications that
use these APIs forward to Mac OS X.

00:20:27.780 --> 00:20:30.630
But we couldn't move all
of those APIs forward.

00:20:30.630 --> 00:20:31.400
So it's really simple.

00:20:31.400 --> 00:20:33.600
We just saw there's, you know,
good and bad ones.

00:20:33.600 --> 00:20:37.400
We had to then define what that meant.

00:20:37.400 --> 00:20:43.590
Now, the bad APIs are APIs that
prevent that application,

00:20:43.670 --> 00:20:47.600
that library from running on Mac OS X.

00:20:47.600 --> 00:20:50.480
So those are APIs that say,
assume that you're not in

00:20:50.480 --> 00:20:52.350
protected memory spaces,
right?

00:20:52.680 --> 00:20:55.530
That assume that everyone is sharing
memory throughout the system.

00:20:55.610 --> 00:20:59.100
All applications can poke
into each other's memory.

00:20:59.280 --> 00:21:00.900
So there's a bunch of
obvious ones like that,

00:21:00.900 --> 00:21:04.080
or things that assume that you're not
preemptively scheduled so you don't

00:21:04.080 --> 00:21:07.640
have to lock around certain things.

00:21:07.870 --> 00:21:10.400
We took it a step beyond that.

00:21:10.440 --> 00:21:15.800
We really wanted to have the ability
to move Carbon forward as we advance.

00:21:15.800 --> 00:21:17.430
We really want to grow it.

00:21:17.530 --> 00:21:20.210
So Carbon is something
we're heavily investing in.

00:21:20.420 --> 00:21:23.800
We're going to continue
heavily investing in long term.

00:21:23.850 --> 00:21:29.110
And the problem is with the way the
Mac OS toolbox was before Carbon,

00:21:29.280 --> 00:21:33.700
A lot of the APIs were sort of
implicit rather than explicit.

00:21:33.790 --> 00:21:36.630
So if you wanted to go
and set a window title,

00:21:36.630 --> 00:21:39.310
what a lot of people do is you just
sort of munch through some data

00:21:39.310 --> 00:21:42.210
structures until you find a string,
and you add that in there, and boom,

00:21:42.210 --> 00:21:43.040
you're done.

00:21:43.040 --> 00:21:46.230
That makes it pretty hard for us to go
ahead and add a Unicode string in there,

00:21:46.240 --> 00:21:48.280
because you're just
throwing in some data.

00:21:48.280 --> 00:21:50.960
We don't know if it's encoded
as UTF or how it's encoded.

00:21:50.960 --> 00:21:54.220
So what we really needed to
do was take all those places

00:21:54.220 --> 00:21:57.790
where there were implicit APIs,
where the developer would just

00:21:57.790 --> 00:22:00.880
walk through data structures,
munch through data structures,

00:22:00.880 --> 00:22:04.630
and beat on them until it
came out with the right value,

00:22:04.630 --> 00:22:06.160
and add accessors.

00:22:06.160 --> 00:22:10.300
So we had to get rid of
some of these old ones.

00:22:10.300 --> 00:22:12.250
So of course the good APIs are Carbon.

00:22:12.330 --> 00:22:13.420
Now Carbon isn't just that, right?

00:22:13.520 --> 00:22:17.160
So Carbon is growing,
so there's the new growth.

00:22:17.160 --> 00:22:20.900
Carbon is growing and continues to grow,
so some of this is accessors,

00:22:20.950 --> 00:22:23.740
and going forward we've added
a bunch of other functionality,

00:22:23.740 --> 00:22:25.490
some of which I'll
talk about in a minute.

00:22:26.340 --> 00:22:29.100
But again, this is all Carbon.

00:22:29.930 --> 00:22:32.490
When you look at an application,
and we surveyed lots and lots

00:22:32.570 --> 00:22:37.240
and lots of applications,
they're typically 95% Carbon ready.

00:22:37.250 --> 00:22:39.700
Now,
what does it mean to be Carbon ready?

00:22:39.930 --> 00:22:46.790
It means that about 5% of the
calls the application made

00:22:47.710 --> 00:22:49.730
We're calling into those old bad APIs.

00:22:49.730 --> 00:22:52.140
And it's not because you're bad people.

00:22:52.210 --> 00:22:55.090
I'm sure you're all very nice people.

00:22:55.190 --> 00:22:59.450
It's because we had no other way for you
to do that functionality in the past.

00:22:59.570 --> 00:23:03.210
And so now that we have a way in
Carbon to do it the right way,

00:23:03.240 --> 00:23:04.910
the application really needs to,
you know,

00:23:04.910 --> 00:23:07.400
move over totally into the Carbon space.

00:23:07.510 --> 00:23:09.460
So some of this work is hard.

00:23:09.670 --> 00:23:11.730
Some of this work is easy.

00:23:11.920 --> 00:23:16.390
The great thing is we have a
number of tools to help you

00:23:16.520 --> 00:23:18.710
carbonize your application.

00:23:19.830 --> 00:23:23.980
So the first one to start with,
and probably the most important one,

00:23:24.020 --> 00:23:27.400
is we actually create these
custom reports that tell you,

00:23:27.400 --> 00:23:31.760
the developer, exactly what to do to
carbonize your application.

00:23:31.830 --> 00:23:36.970
So it'll tell you exactly,
here's APIs you're using

00:23:36.970 --> 00:23:38.580
that are no longer supported.

00:23:38.660 --> 00:23:41.940
It'll have a little documentation
section just for your application saying,

00:23:42.020 --> 00:23:44.650
here's what you should do
instead in these cases.

00:23:44.730 --> 00:23:49.260
So it really is these nice custom
reports made just for your applications.

00:23:50.510 --> 00:23:52.980
So what's it going to tell you to do?

00:23:53.040 --> 00:23:56.150
Well, the first thing it's going to tell
you to do is adopt the accessors,

00:23:56.210 --> 00:23:56.390
right?

00:23:56.440 --> 00:23:57.400
As I said before.

00:23:57.400 --> 00:24:01.530
So places you weren't using accessors,
where you were talking to low mems,

00:24:01.530 --> 00:24:03.900
you now have to use these accessors.

00:24:05.330 --> 00:24:08.980
Another thing it's going to do is tell
you to adopt these new toolbox UPPs.

00:24:09.070 --> 00:24:11.650
Now you might say, you know,
why do we have UPPs since

00:24:11.650 --> 00:24:14.160
we don't have 68k anymore?

00:24:14.270 --> 00:24:16.800
The answer is because
we have two runtimes,

00:24:16.800 --> 00:24:19.960
Mac OS and CFM,
which are both completely supported,

00:24:20.220 --> 00:24:23.950
you have to have UPPs to be
able to call between them.

00:24:25.170 --> 00:24:27.860
The next thing it's going to tell
you to do is adopt Nav Services.

00:24:28.010 --> 00:24:30.470
Standard file isn't part of Carbon.

00:24:32.220 --> 00:24:35.990
and adopt the HTML-based Apple Help.

00:24:36.080 --> 00:24:39.730
So once you've done those things,
you have an application which

00:24:39.800 --> 00:24:41.320
is sort of being carbonized.

00:24:41.370 --> 00:24:45.160
And the great thing is when
you carbonize an application,

00:24:45.200 --> 00:24:49.310
it can run on both Mac OS 9 and Mac OS X.

00:24:49.410 --> 00:24:54.140
So you haven't lost all of your current
customers who are using Mac OS 9.

00:24:54.500 --> 00:24:57.920
You've gained your Mac OS X customers.

00:24:58.000 --> 00:25:01.810
Now the way this works is
since Carbon is built in as a

00:25:01.810 --> 00:25:07.090
fundamental part of Mac OS X,
the app just runs on Mac OS X.

00:25:07.290 --> 00:25:09.840
On Mac OS 9,
we have this thing called the Carbon Lib,

00:25:09.840 --> 00:25:11.600
the Carbon Library.

00:25:11.690 --> 00:25:17.530
So this is, for most APIs,
a very thin veneer, a thin shim,

00:25:17.530 --> 00:25:21.100
on top of the Mac OS 9 API,
so it calls right through.

00:25:21.440 --> 00:25:24.020
But for some things that
we've added into Carbon that

00:25:24.020 --> 00:25:26.400
weren't part of the OS before,
they're added directly

00:25:26.400 --> 00:25:28.860
into the Carbon Library.

00:25:28.940 --> 00:25:31.830
Your Carbon app sits
on top of it like that.

00:25:32.670 --> 00:25:34.670
So what do you get once you've done this?

00:25:34.880 --> 00:25:40.050
Well, by carbonizing your application,
you get the killer benefits of Mac OS X.

00:25:40.060 --> 00:25:42.010
These aren't the killer
benefits of Carbon.

00:25:42.090 --> 00:25:45.390
They're the killer benefits of
Mac OS X that if you don't carbonize,

00:25:45.390 --> 00:25:46.490
your app doesn't get.

00:25:46.580 --> 00:25:47.660
So it's things like stability.

00:25:47.660 --> 00:25:48.870
You've heard a lot about this.

00:25:48.970 --> 00:25:50.460
So you get protected memory.

00:25:50.500 --> 00:25:51.890
You get preemptive scheduling.

00:25:51.950 --> 00:25:54.060
So both of these add to stability.

00:25:54.060 --> 00:25:56.760
Another app can't smash into
your memory and crash you.

00:25:56.810 --> 00:25:58.650
Another app can't sit
there and hang the system,

00:25:58.660 --> 00:26:02.550
so people can't get back to
your application to save data.

00:26:03.150 --> 00:26:06.260
There's responsiveness,
so you get preemptive scheduling,

00:26:06.290 --> 00:26:07.670
so the app is more responsive.

00:26:07.750 --> 00:26:09.000
And threading is really interesting.

00:26:09.050 --> 00:26:12.820
You can make a lot of use of
threading on Mac OS X to have,

00:26:12.840 --> 00:26:15.550
say,
your UI thread try to be as responsive as

00:26:15.550 --> 00:26:21.140
possible and then put other actions into
background threads so that your UI is

00:26:21.140 --> 00:26:24.300
always responding as the user clicks.

00:26:27.430 --> 00:26:30.080
So here's a killer benefit
that a lot of people don't

00:26:30.080 --> 00:26:31.800
realize that we have in Carbon.

00:26:31.800 --> 00:26:36.530
And that is the Carbon file
manager actually supports a

00:26:36.530 --> 00:26:38.390
whole lot of file systems.

00:26:38.400 --> 00:26:42.100
So instead of just supporting
dual forked file systems,

00:26:42.100 --> 00:26:47.150
so the Mac OS Standard HFS and
the Mac OS Extended HFS+, when

00:26:47.180 --> 00:26:51.080
you Carbonize your application,
your Carbon application will

00:26:51.080 --> 00:26:53.930
automatically be able to
run on a UFS system or an

00:26:53.930 --> 00:26:55.990
NFS system or a web dev system.

00:26:56.000 --> 00:27:00.860
So these systems where the file
system itself is single forked,

00:27:01.000 --> 00:27:03.840
your app doesn't have to know that.

00:27:03.840 --> 00:27:07.600
The Carbon file manager will
behind your back automatically

00:27:07.730 --> 00:27:12.500
create an Apple double file,
put it into a separate file in the

00:27:12.500 --> 00:27:17.670
data fork of that file with a special
name so it can associate that along

00:27:17.740 --> 00:27:22.140
with the data fork that you tried
to save out with a resource fork,

00:27:22.590 --> 00:27:24.240
both stored in flat files.

00:27:25.320 --> 00:27:28.560
So the Carbon file manager really allows
you to use a bunch of file systems

00:27:28.770 --> 00:27:31.460
that before you couldn't use well.

00:27:33.510 --> 00:27:35.200
And there's automatic memory management.

00:27:35.200 --> 00:27:37.500
What do I mean by this?

00:27:37.690 --> 00:27:40.700
Here's the panel that
you hate as a developer.

00:27:40.730 --> 00:27:44.280
There's a panel that your tech support
hates because they get calls about it.

00:27:44.400 --> 00:27:45.380
And why do they get calls about it?

00:27:45.400 --> 00:27:48.400
Because none of your users
have any idea what it means.

00:27:48.930 --> 00:27:52.400
Having to set the memory
for an application,

00:27:52.400 --> 00:27:56.800
having to manage the memory for
an application is not something

00:27:56.800 --> 00:27:58.400
a user should have to do.

00:27:58.400 --> 00:28:02.710
So on Mac OS X, the user doesn't.

00:28:03.380 --> 00:28:06.400
Here's one that whenever I have
people make slides for me,

00:28:06.400 --> 00:28:08.900
they always look at this
and start cheering when they

00:28:08.900 --> 00:28:12.440
realize this is going to happen,
which is you won't run out of

00:28:12.440 --> 00:28:13.740
memory like you do right now.

00:28:13.740 --> 00:28:16.390
So in PowerPoint,
I often would run out of memory and say,

00:28:16.400 --> 00:28:19.540
go quit your other apps and go
give PowerPoint some more memory.

00:28:19.540 --> 00:28:22.490
No more.

00:28:23.410 --> 00:28:24.940
Of course you get Aqua, right?

00:28:24.940 --> 00:28:29.820
So if you carbonize your application,
you get a nice Aqua user interface.

00:28:29.850 --> 00:28:34.790
If you don't carbonize it,
it remains looking classic, right?

00:28:35.130 --> 00:28:39.390
So it's only through going to
Carbon that you'll get the Aqua UI if

00:28:39.480 --> 00:28:41.800
you're a Mac OS 9 application.

00:28:41.940 --> 00:28:44.800
And it's really important that your
app will stand out as a classic

00:28:44.850 --> 00:28:47.940
application so the user will know,
well, this isn't a native application.

00:28:48.240 --> 00:28:50.740
They'll look for another
native application.

00:28:53.230 --> 00:28:57.310
So we tried to make Aqua as easy
as possible for the developer.

00:28:57.310 --> 00:29:01.190
And one way we did that is we
retained the platinum metrics.

00:29:01.260 --> 00:29:04.200
So buttons are the same size,
sliders are the same size.

00:29:04.200 --> 00:29:08.670
We tried to retain the same
metrics on all the widgets.

00:29:09.470 --> 00:29:13.450
There are some places where we've
added something where we couldn't

00:29:13.710 --> 00:29:16.270
just give it to you for free,
but we've tried to make

00:29:16.270 --> 00:29:17.900
it as easy as possible.

00:29:17.970 --> 00:29:20.340
So Sheets is a good example here.

00:29:20.410 --> 00:29:23.480
We've added Sheets,
and we've added some nice simple

00:29:23.480 --> 00:29:27.000
APIs to run your panel as a sheet,
but there is some

00:29:27.080 --> 00:29:29.170
adoption necessary here.

00:29:31.350 --> 00:29:35.080
Whenever someone changes
the UI of something,

00:29:35.120 --> 00:29:37.870
suddenly everyone looks at UI a lot more.

00:29:37.900 --> 00:29:40.040
It goes under the microscope.

00:29:40.150 --> 00:29:44.300
And so as you're moving your
application from Mac OS 9 to Mac OS X,

00:29:44.300 --> 00:29:47.700
and you're carbonizing it,
and you're making use of Aqua,

00:29:47.700 --> 00:29:51.650
it's really a great time to pay
particular attention to the UI.

00:29:51.660 --> 00:29:56.540
And there's a number of people,
our UI team is actually holding some

00:29:56.590 --> 00:30:00.030
one-on-ones this week to try to help you,
the developer, out.

00:30:00.090 --> 00:30:03.730
But definitely spend a lot
of time looking at the user

00:30:03.730 --> 00:30:06.200
interface of your application.

00:30:09.780 --> 00:30:15.700
So you've heard this a couple times,
but this is possibly the most important

00:30:15.700 --> 00:30:18.120
slide in my entire Carbon section.

00:30:18.120 --> 00:30:21.410
And that is performance.

00:30:22.830 --> 00:30:26.970
When we took the APIs from
Mac OS 9 to Mac OS X,

00:30:27.170 --> 00:30:30.820
we retained the same APIs,
we retained the same

00:30:30.820 --> 00:30:34.540
semantics of the APIs,
but we did not retain

00:30:34.540 --> 00:30:37.490
the same performance
characteristics of all the APIs.

00:30:37.500 --> 00:30:39.020
This is out of necessity.

00:30:39.020 --> 00:30:42.490
On Mac OS 9, when you ask for date time,
it just checks a struct

00:30:42.500 --> 00:30:44.690
somewhere and it returns it,
and boom,

00:30:44.710 --> 00:30:46.810
you're in your own address space.

00:30:46.860 --> 00:30:47.550
It was really fast.

00:30:47.580 --> 00:30:50.850
When you go ahead and say,
give me the process ID, it's immediate.

00:30:50.860 --> 00:30:54.700
But on Mac OS X,
those turn out to be kernel traps.

00:30:54.700 --> 00:30:56.510
So you actually trap into the kernel.

00:30:56.550 --> 00:30:58.950
This is a much more expensive
operation than just checking a

00:30:58.950 --> 00:31:00.580
variable in your own address space.

00:31:00.620 --> 00:31:05.920
So even though you've spent a lot
of time tuning your application and

00:31:06.040 --> 00:31:11.030
it runs blazingly fast on Mac OS 9,
when you carbonize it,

00:31:11.040 --> 00:31:15.300
and if it doesn't run blazingly fast,
maybe it will,

00:31:15.600 --> 00:31:19.340
It's not because necessarily
there's a bug in Carbon which is

00:31:19.340 --> 00:31:21.300
making your app run very slow.

00:31:21.360 --> 00:31:25.320
It's because you were assuming the
performance characteristics of the

00:31:25.320 --> 00:31:28.910
nine implementation of the APIs.

00:31:32.380 --> 00:31:33.810
Laziness is a virtue.

00:31:33.860 --> 00:31:37.500
Here's the one time you get to be
extremely lazy when you develop.

00:31:37.500 --> 00:31:40.760
Try to make sure that you don't
load things until you need them,

00:31:40.760 --> 00:31:44.760
because a given user may go through
your application and never use

00:31:44.760 --> 00:31:46.980
some subset of the functionality.

00:31:46.980 --> 00:31:49.310
So the best thing to do
is never have loaded that

00:31:49.340 --> 00:31:51.420
functionality during that run.

00:31:51.420 --> 00:31:54.290
So until a user has gone and caused it,
your application,

00:31:54.400 --> 00:31:56.990
to load that functionality
because they want to use a

00:31:56.990 --> 00:32:01.970
certain paint tool or whatever,
you just don't load that at all.

00:32:01.990 --> 00:32:05.380
So try to be as lazy as
possible about loading stuff.

00:32:09.360 --> 00:32:11.760
So polling is very bad.

00:32:11.810 --> 00:32:14.490
You know,
Roberts in Bertrand's talk showed where

00:32:14.490 --> 00:32:18.110
an app was doing a whole lot of polling,
and it was pegging the CPU even

00:32:18.320 --> 00:32:20.700
though nothing was happening at all.

00:32:20.860 --> 00:32:24.280
On Mac OS X,
it's much better to just block

00:32:24.360 --> 00:32:26.020
and wait until you get an event.

00:32:26.080 --> 00:32:28.020
So if nothing's going on,
don't sit there and keep

00:32:28.020 --> 00:32:31.300
on pinging it and saying,
hey, is something going on?

00:32:31.360 --> 00:32:32.190
I feel like I'm out of the loop.

00:32:32.280 --> 00:32:33.400
You're not out of the loop.

00:32:33.400 --> 00:32:35.430
You'll get an event
when something happens.

00:32:35.500 --> 00:32:36.650
So you should-- don't poll.

00:32:36.780 --> 00:32:39.940
Try to make your app be as
quiescent as possible when

00:32:39.940 --> 00:32:42.190
there isn't anything happening.

00:32:45.700 --> 00:32:47.940
And it's very clear on
Mac OS X right now that,

00:32:47.960 --> 00:32:49.820
you know, we're memory bound.

00:32:49.820 --> 00:32:53.540
So the great thing about
Mac OS X is everyone shares,

00:32:53.540 --> 00:32:56.340
you know,
the memory because it all gets swapped

00:32:56.340 --> 00:32:57.700
out to disk if you use too much.

00:32:57.700 --> 00:33:00.120
So even though you have
your own address space,

00:33:00.220 --> 00:33:02.730
the more memory you use,
the more you're going to

00:33:02.870 --> 00:33:04.690
start slowing down the system.

00:33:04.700 --> 00:33:09.680
And so it's really important to try
to use the minimal memory possible.

00:33:09.770 --> 00:33:10.680
You know,
just because we have virtual memory

00:33:10.710 --> 00:33:16.310
and you can allocate a cache that's,
you know, the size of an int, don't.

00:33:18.990 --> 00:33:24.150
So there's three recommendations
I would have for you to figure out

00:33:24.360 --> 00:33:27.020
how to improve your performance,
how to make your performance

00:33:27.130 --> 00:33:28.010
as good as possible.

00:33:28.180 --> 00:33:29.030
First thing is measure.

00:33:29.040 --> 00:33:30.080
The second thing is measure.

00:33:30.080 --> 00:33:32.030
And the third thing is measure.

00:33:32.090 --> 00:33:35.200
Because you probably don't know
the performance characteristics

00:33:35.600 --> 00:33:39.760
of all the APIs on Mac OS X yet,
you really need to dig in and

00:33:39.760 --> 00:33:44.020
measure and see where it's slow
before you assume you know what you

00:33:44.020 --> 00:33:46.270
need to change to make it faster.

00:33:46.420 --> 00:33:49.040
And then of course, you know,
fixing is not bad either.

00:33:49.950 --> 00:33:55.500
So there's a set of functionality
that we've added to Carbon as part of

00:33:55.500 --> 00:33:57.500
Carbon that wasn't on Mac OS 9 before.

00:33:57.500 --> 00:33:58.480
And some of these are great.

00:33:58.620 --> 00:34:01.090
One of these is Carbon Events.

00:34:01.970 --> 00:34:21.730
Carbon Events is a way to dramatically
simplify your application.

00:34:21.730 --> 00:34:21.730
And the way it does that is instead
of having to look all over for,

00:34:21.730 --> 00:34:21.730
you know,
what event's getting sent and then

00:34:21.730 --> 00:34:21.730
sort of dispatch those yourselves and,
you know,

00:34:21.730 --> 00:34:21.730
you get a click and you're trying to
figure out what's the click in a menu,

00:34:21.730 --> 00:34:21.730
what happened,
pass that on to the right person.

00:34:21.930 --> 00:34:25.660
There's actually a really nice
framework that figures out what

00:34:25.790 --> 00:34:28.810
events are coming in and then
dispatches it to the correct handlers.

00:34:28.840 --> 00:34:31.870
And since it does that,
we can actually have a lot of

00:34:31.870 --> 00:34:36.100
default handlers that handle most
of the functionality for you.

00:34:36.900 --> 00:34:42.960
Now since we've removed general patching,
Carbon Events actually solve

00:34:42.980 --> 00:34:45.770
most of the needs you had
when you were patching before.

00:34:45.880 --> 00:34:49.380
So you can add your own handlers,
you can actually stack your own handlers,

00:34:49.380 --> 00:34:51.540
so if one handler doesn't
deal with a given event,

00:34:51.610 --> 00:34:52.800
another one can.

00:34:52.870 --> 00:34:55.750
So it's a really nice way where it
could modify an event and pass it on.

00:34:55.790 --> 00:35:00.540
So Carbon Events is a great thing
to modify certain behaviors.

00:35:01.980 --> 00:35:04.930
turns out the Carbon events also
help with performance because

00:35:05.030 --> 00:35:07.800
Carbon events are meant not to pull.

00:35:07.830 --> 00:35:11.660
They're meant to send data out
when the data needs to be sent to

00:35:11.660 --> 00:35:15.900
someone as opposed to pulling and
constantly asking where something is.

00:35:15.960 --> 00:35:18.390
So in fact,
in Robert's example from the last talk,

00:35:18.500 --> 00:35:20.840
or no, sorry,
from Avi's example this morning,

00:35:20.860 --> 00:35:25.890
the solution to the pulling
was to use Carbon events.

00:35:27.600 --> 00:35:31.400
So I get a lot of
questions about threading.

00:35:31.450 --> 00:35:35.940
And it's because a lot of people
use Thread Manager on Mac OS 9.

00:35:37.320 --> 00:35:38.970
And they ask, you know,
is this now going to be

00:35:39.130 --> 00:35:40.690
preemptively scheduled on Mac OS X?

00:35:40.690 --> 00:35:45.200
And the answer is, absolutely not,
it can't be.

00:35:45.330 --> 00:35:49.460
The reason is,
the Thread Manager was a cooperatively

00:35:49.460 --> 00:35:52.120
scheduled API on Mac OS 9.

00:35:52.120 --> 00:35:55.760
If we were to take and suddenly
turn that cooperatively scheduled

00:35:55.870 --> 00:35:59.070
API into a preemptive API on Mac OS X,
then your app will

00:35:59.070 --> 00:36:00.900
surely crash immediately.

00:36:00.900 --> 00:36:03.790
You won't have locked around
the right data structures,

00:36:03.790 --> 00:36:06.170
you won't have locked
around the right calls.

00:36:06.300 --> 00:36:11.550
And so we can't make that
preemptively scheduled on Mac OS X.

00:36:11.600 --> 00:36:16.090
What we have is the MP APIs,
the multi-processing APIs,

00:36:16.090 --> 00:36:18.020
and those are preemptively scheduled.

00:36:18.020 --> 00:36:22.080
So if you'd like to have preemptively
scheduled threads on Mac OS X,

00:36:22.100 --> 00:36:25.300
the right way to do it is
to move to the MP APIs,

00:36:25.300 --> 00:36:29.290
or you can move directly to P threads,
and we actually base all of our

00:36:29.290 --> 00:36:31.240
threading on top of P threads.

00:36:31.330 --> 00:36:33.040
Even the Thread Manager is
based on P threads,

00:36:33.140 --> 00:36:36.210
we just lock around them to make
sure they're cooperatively scheduled.

00:36:36.300 --> 00:36:37.460
Thank you.

00:36:40.280 --> 00:36:42.500
So there's a bunch of other
functionality that we wanted

00:36:42.580 --> 00:36:46.200
to add to Carbon and Cocoa.

00:36:46.250 --> 00:36:50.480
Like XML and Unicode,
we wanted great event management to be

00:36:50.480 --> 00:36:52.880
able to tie together Carbon and Cocoa.

00:36:52.880 --> 00:36:55.170
We want to have great preferences,
standard preferences

00:36:55.180 --> 00:36:56.070
for every application.

00:36:56.080 --> 00:36:59.830
We wanted it to be multilingual and
have simple application packaging.

00:36:59.920 --> 00:37:01.400
So we looked at those and we said,
you know,

00:37:01.400 --> 00:37:02.870
how should we implement all of that?

00:37:02.960 --> 00:37:05.790
And, you know, here's one solution.

00:37:07.250 --> 00:37:10.520
We could implement it twice
in both of our stacks.

00:37:10.530 --> 00:37:13.460
If someone were to come
up with this solution,

00:37:13.460 --> 00:37:17.460
I would fire them and then you
can have them as an engineer.

00:37:18.050 --> 00:37:22.180
A better solution,
which is what we actually came up with,

00:37:22.210 --> 00:37:26.190
is you create a single stack for this.

00:37:26.200 --> 00:37:29.120
And you share it between
both Carbon and Cocoa.

00:37:29.180 --> 00:37:33.220
So all this functionality
you put into a single place.

00:37:33.280 --> 00:37:35.360
And that for us is core foundation.

00:37:35.380 --> 00:37:37.270
Now I'm not going to talk about it,
but I'm going to talk

00:37:37.270 --> 00:37:38.320
about core foundation.

00:37:38.350 --> 00:37:41.800
There's a lot of other things
that we share as well that I'm

00:37:41.800 --> 00:37:44.230
not going to get into details on.

00:37:44.320 --> 00:37:48.610
Carbon and Cocoa really share
a whole lot of code below them.

00:37:48.820 --> 00:37:52.660
So we don't have totally separate
stacks of implementation from top

00:37:52.660 --> 00:37:54.300
to bottom on Carbon and Cocoa.

00:37:54.340 --> 00:37:56.300
We try to share as much as possible.

00:37:56.300 --> 00:37:58.820
Like we share the print panel,
for instance.

00:37:58.820 --> 00:38:00.640
The print panel was implemented one time.

00:38:00.640 --> 00:38:01.880
It was implemented in Carbon.

00:38:01.880 --> 00:38:06.210
And it turns out in a Cocoa application,
when you print, that sheet that comes

00:38:06.210 --> 00:38:07.710
down is a Carbon panel.

00:38:07.730 --> 00:38:09.870
You don't have to know it as a developer.

00:38:09.910 --> 00:38:11.720
The user doesn't have to know it.

00:38:12.000 --> 00:38:14.280
But we're trying to minimize our work.

00:38:14.300 --> 00:38:17.300
And so there's a lot of
places that we share code.

00:38:17.300 --> 00:38:21.360
But a really interesting one,
and a new one for a lot of people,

00:38:21.360 --> 00:38:22.890
is Core Foundation.

00:38:23.390 --> 00:38:26.000
So Core Foundation First supports XML,
right?

00:38:26.090 --> 00:38:30.400
So we have a really-- an
optimized general parser for XML.

00:38:30.860 --> 00:38:32.410
And it's really powerful.

00:38:32.420 --> 00:38:35.220
And if you want to see the code, you can.

00:38:35.220 --> 00:38:36.860
We open sourced it as well.

00:38:36.880 --> 00:38:37.570
So you can take it.

00:38:37.640 --> 00:38:40.580
You can, again,
provide me free engineering hours by

00:38:40.580 --> 00:38:43.390
fixing bugs and sending them back.

00:38:45.050 --> 00:38:48.790
When we looked at XML,
we actually looked at a lot of different

00:38:48.790 --> 00:38:55.840
data types and tried to figure out what
is the best persistent format for data.

00:38:55.840 --> 00:38:58.560
And there was no question,
XML has won the game.

00:38:58.610 --> 00:39:01.760
And so when we implemented
this great XML parser,

00:39:01.760 --> 00:39:04.370
we then went and used it
throughout the system.

00:39:04.420 --> 00:39:08.600
So everything from driver
configurations to the Carbon UI can

00:39:08.600 --> 00:39:12.410
be saved as an XML file,
to preferences, to everything in between.

00:39:12.430 --> 00:39:17.110
So whenever you see a configuration
file on the system on Mac OS X,

00:39:17.200 --> 00:39:19.230
it's going to be an XML file.

00:39:23.410 --> 00:39:26.600
We also are very,
very multilingual conscious.

00:39:26.660 --> 00:39:28.920
We want to support multiple languages.

00:39:28.920 --> 00:39:32.970
We want to be able to ship in
multiple languages on the same day.

00:39:32.980 --> 00:39:37.340
And so we added great Unicode
support through CFString.

00:39:37.340 --> 00:39:42.090
So CFString is an opaque
data type to store strings.

00:39:42.100 --> 00:39:45.100
And the great thing is it can
store it however it wants.

00:39:45.170 --> 00:39:48.740
As far as you, the developer,
are concerned, it's stored as a Unicode.

00:39:48.740 --> 00:39:50.970
But it can be a lot smarter than that.

00:39:51.050 --> 00:39:54.600
So if you pass it a Unicode string,
which happens only to have

00:39:54.660 --> 00:39:57.780
ASCII characters in it,
it can store them as single bytes.

00:39:57.780 --> 00:39:59.700
You know, saving half the memory.

00:39:59.720 --> 00:40:03.110
When you ask for the string,
it can actually pass out the

00:40:03.310 --> 00:40:06.360
double byte characters and turn
it into that if you'd like.

00:40:06.420 --> 00:40:10.700
If all you do is pass a
CFString around throughout the system,

00:40:10.700 --> 00:40:14.570
it can always stay as a single
byte holder because it's an

00:40:14.570 --> 00:40:16.950
opaque data structure to you.

00:40:16.980 --> 00:40:18.740
So we use this throughout.

00:40:18.740 --> 00:40:22.350
All of the APIs in the
high-level toolbox,

00:40:22.350 --> 00:40:25.540
so in Carbon, will now take CFString.

00:40:25.540 --> 00:40:27.860
So you can set a window to be a CFString.

00:40:27.860 --> 00:40:31.330
So you can set a window
to have a Unicode title.

00:40:33.230 --> 00:40:35.030
Now,
event management is one that's really,

00:40:35.030 --> 00:40:37.940
really interesting for us,
and it'll be somewhat

00:40:37.940 --> 00:40:42.270
interesting to a few of you,
but this is the way that we actually

00:40:42.380 --> 00:40:44.730
provide sharing between Carbon and Cocoa.

00:40:44.740 --> 00:40:47.380
So we have this thing
called the CF run loop,

00:40:47.460 --> 00:40:50.530
and the run loop gets the events
in and actually hands them

00:40:50.530 --> 00:40:53.240
off to either Cocoa or Carbon,
depending on, you know,

00:40:53.240 --> 00:40:56.720
what button you're clicking on,
what window you're clicking on.

00:40:56.720 --> 00:41:00.930
And so the great thing here is
we can really leverage a single

00:41:01.030 --> 00:41:06.220
implementation for certain parts of
the UI in both of our frameworks.

00:41:06.220 --> 00:41:10.320
So, for instance,
the menu bar is implemented once.

00:41:10.420 --> 00:41:11.900
It's implemented in Carbon.

00:41:12.000 --> 00:41:13.990
Cocoa just uses it.

00:41:17.160 --> 00:41:18.720
We think it's really
important to have a nice,

00:41:18.720 --> 00:41:21.940
standard, single place for you
to store preferences.

00:41:21.940 --> 00:41:24.880
We have that, and of course it uses XML.

00:41:24.880 --> 00:41:28.490
And Bertrand touched on
application packages a little bit.

00:41:31.430 --> 00:41:34.460
This is a really important thing
for us because it ties together a

00:41:34.460 --> 00:41:36.670
number of our different stories.

00:41:36.720 --> 00:41:41.210
So we looked out and we said,
how can we simplify the

00:41:41.250 --> 00:41:43.600
experience even for Mac OS 9?

00:41:43.600 --> 00:41:46.380
In Mac OS 9, when I go and try to
launch an application,

00:41:46.380 --> 00:41:49.820
I go into a folder,
and I see supporting libraries,

00:41:49.850 --> 00:41:52.400
and I see help files,
and I see all this stuff.

00:41:52.400 --> 00:41:54.000
I have no idea what it is.

00:41:54.010 --> 00:41:56.420
And I search for the one
icon which looks different,

00:41:56.500 --> 00:41:57.920
which is the application.

00:41:58.120 --> 00:42:01.400
What we wanted to do and what
we did is we took and we packed

00:42:01.480 --> 00:42:05.520
that all up into a single piece,
a single item in the finder.

00:42:05.570 --> 00:42:07.290
You double click and launch that.

00:42:07.370 --> 00:42:12.080
But that single item turns out to be
a folder hierarchy below the surface.

00:42:12.140 --> 00:42:15.550
But as far as the user is concerned,
it's a single item.

00:42:16.700 --> 00:42:19.510
So this allows us to have
multilingual applications.

00:42:19.590 --> 00:42:23.100
Some of the things that we store
inside this package now in standard

00:42:23.100 --> 00:42:25.300
locations are localizations.

00:42:25.360 --> 00:42:28.350
And of course these localizations
are done with XML files,

00:42:28.420 --> 00:42:33.440
supporting full Unicode within them,
so your strings files are XML files.

00:42:33.500 --> 00:42:35.540
And it allows you to
have a single binary,

00:42:35.540 --> 00:42:40.210
that single item, that single package,
that supports multiple languages.

00:42:41.360 --> 00:42:44.730
It also allows us to
have a single package,

00:42:44.770 --> 00:42:49.390
a single application that runs
on both Mac OS 9 and Mac OS X.

00:42:49.400 --> 00:42:52.760
Now as you know,
you can write a single application

00:42:52.760 --> 00:42:56.450
which is just a CFM application,
single binary, runs on both as well,

00:42:56.530 --> 00:42:57.590
and that can fit in this package.

00:42:57.600 --> 00:43:03.600
But if you choose, you can also have a
CFM application on Mac OS 9,

00:43:03.600 --> 00:43:09.040
a Mac OS application on Mac OS X,
package them within the same application

00:43:09.040 --> 00:43:12.600
package so the user is none the wiser,
and then when they double click,

00:43:12.620 --> 00:43:16.600
it'll run in using the run time,
using the binary of the platform.

00:43:16.600 --> 00:43:21.000
So again, totally up to you,
but it's hidden from the user.

00:43:21.360 --> 00:43:22.500
And these are extremely simple.

00:43:22.500 --> 00:43:25.120
I mean,
how much more simple can you get than

00:43:25.120 --> 00:43:27.950
having a single item for the user?

00:43:30.210 --> 00:43:35.280
So another question I get a lot is, well,
for Carbon, you removed a set of APIs,

00:43:35.280 --> 00:43:35.820
right?

00:43:35.820 --> 00:43:40.580
When we moved to Carbon for Mac OS 9,
we removed a set of APIs.

00:43:40.590 --> 00:43:44.040
Are you going to continue
removing APIs sort of at whim?

00:43:44.130 --> 00:43:46.590
And the answer is, again, no.

00:43:46.730 --> 00:43:49.420
Otherwise,
I wouldn't have presented it that way.

00:43:50.330 --> 00:43:53.940
Once an API is in Carbon,
it stays in Carbon.

00:43:54.020 --> 00:43:58.320
So we believe in being binary compatible,
going forward with Carbon, period,

00:43:58.400 --> 00:44:01.040
the same way the Mac OS has been.

00:44:01.130 --> 00:44:05.230
So if you look at the first Carbon lib,

00:44:12.230 --> 00:44:15.420
So, if you look at on different OSs,
there will be subsets of the API, right?

00:44:15.550 --> 00:44:20.860
So, the first OS that we supported,
Mac OS 8.1, will have the least number

00:44:20.930 --> 00:44:22.960
of Carbon API supported.

00:44:22.960 --> 00:44:23.780
Why is that?

00:44:23.850 --> 00:44:29.260
Because a lot of APIs that were added to,
say, Mac OS 8.6,

00:44:29.260 --> 00:44:33.370
to move those back in CarbonLib
to Mac OS 8.1 would be basically

00:44:33.370 --> 00:44:37.580
reinstalling the Mac OS 8.6
operating system on top of 8.1,

00:44:37.580 --> 00:44:38.190
right?

00:44:38.220 --> 00:44:40.420
So, this doesn't make any sense.

00:44:40.420 --> 00:44:45.590
So, in Mac OS 8.1,
through CarbonLib 1.0.4, you have all the

00:44:45.590 --> 00:44:49.330
Carbon APIs that were in 8.1,
plus a set of things that

00:44:49.330 --> 00:44:52.750
we did feel necessary,
it was necessary to bring back,

00:44:52.760 --> 00:44:55.540
like the accessors,
like window properties and control

00:44:55.540 --> 00:44:58.360
properties and menu properties,
like Nav Services.

00:44:58.720 --> 00:44:59.260
Pieces of core foundation.

00:44:59.260 --> 00:45:01.700
and Carbon printing.

00:45:02.380 --> 00:45:05.440
Now, Mac OS 8.6,
the operating system brought a

00:45:05.440 --> 00:45:09.670
lot of APIs to the developer,
and those are exposed

00:45:09.760 --> 00:45:11.060
through Carbon as well.

00:45:11.160 --> 00:45:15.450
So you can read at will here,
but there's a lot of

00:45:15.450 --> 00:45:18.640
APIs that we added in 8.6,
which are then available through Carbon.

00:45:18.640 --> 00:45:20.840
So you need to look,
depending on the version of the

00:45:20.840 --> 00:45:23.850
operating system you're running on,
the same way you have with

00:45:23.910 --> 00:45:27.640
your applications that run
in Mac OS 8.6 versus 8.1,

00:45:27.700 --> 00:45:30.010
what APIs are available.

00:45:30.780 --> 00:45:35.070
A Mac OS 8, you know, 9,
the HFS+ APIs were added,

00:45:35.070 --> 00:45:37.900
and then there was a lot of
performance and stability enhancements.

00:45:37.900 --> 00:45:42.190
So Carbon runs much better on Mac OS 9.

00:45:42.300 --> 00:45:45.390
And then on Mac OS X,
we added a few things, you know,

00:45:45.390 --> 00:45:48.920
Aqua being the main one,
and that's when you get Aqua when

00:45:49.000 --> 00:45:50.590
you go Carbon on Mac OS X.

00:45:50.730 --> 00:45:52.560
We're also adding
Carbon APIs all the time,

00:45:52.560 --> 00:45:53.030
right?

00:45:53.040 --> 00:45:56.930
We are growing Carbon,
and you'll get a lot

00:45:56.930 --> 00:45:58.360
of those on Mac OS X.

00:45:58.440 --> 00:46:02.970
And on Mac OS X, you can, of course,
access other parts of the system,

00:46:02.970 --> 00:46:05.570
like the POSIX APIs, if you'd like.

00:46:07.720 --> 00:46:12.360
So going forward,
we are absolutely growing, extending,

00:46:12.390 --> 00:46:13.980
investing in Carbon.

00:46:14.070 --> 00:46:15.330
Period.

00:46:15.440 --> 00:46:17.930
This is not a bridge strategy.

00:46:18.010 --> 00:46:18.730
That's a question I've heard.

00:46:18.730 --> 00:46:20.840
This is not a bridge strategy.

00:46:20.980 --> 00:46:25.920
Carbon is a fundamental framework,
a fundamental API on Mac OS X,

00:46:25.920 --> 00:46:29.290
and we are investing in it
and we are adding to it.

00:46:32.450 --> 00:46:36.820
Each new release that comes
out brings all the previous

00:46:37.900 --> 00:46:40.160
APIs and potentially some more.

00:46:40.210 --> 00:46:44.630
And then some APIs will bring
back to older operating systems.

00:46:44.720 --> 00:46:48.910
So let me go ahead and show
you a nice little Carbon demo.

00:46:54.020 --> 00:46:59.770
So in January of this year,
Apple for the first time released

00:46:59.850 --> 00:47:01.890
this application called iTunes.

00:47:01.950 --> 00:47:04.140
Who's heard of it?

00:47:04.160 --> 00:47:07.270
OK, everyone who's lazy,
not raising your hands, are liars.

00:47:08.950 --> 00:47:12.710
In February, we came out with the
second version of iTunes,

00:47:12.720 --> 00:47:12.990
right?

00:47:13.070 --> 00:47:13.920
We came out with an update.

00:47:13.920 --> 00:47:18.840
And then on March 24th,
we came out with iTunes on Mac OS X.

00:47:18.840 --> 00:47:20.970
Now,
how could we come out with it so fast,

00:47:21.060 --> 00:47:23.770
bam, bam,
back-to-back on Mac OS 9 and 10?

00:47:23.770 --> 00:47:27.040
The answer, of course,
is it's built as a Carbon application.

00:47:27.040 --> 00:47:32.090
It shares the exact same source on
Mac OS 9 as it does on Mac OS X.

00:47:32.090 --> 00:47:38.800
So you've probably seen it,
but here is iTunes running on Mac OS X.

00:47:44.810 --> 00:47:47.530
has a list of all the features
you'd expect from here.

00:47:47.620 --> 00:47:54.050
Now, iTunes is also packaged as
a multilingual application.

00:47:54.090 --> 00:47:58.010
Let me go ahead and, you know,

00:47:58.830 --> 00:48:01.940
Let me take and change
my system language.

00:48:01.940 --> 00:48:04.770
So let's say right now I have it set to

00:48:06.230 --> 00:48:08.100
The English is my preferred language.

00:48:08.100 --> 00:48:11.740
Now, let's say that English is
actually my third language,

00:48:11.740 --> 00:48:14.660
Japanese is my first,
and French is my second.

00:48:14.660 --> 00:48:16.080
Let me say this again.

00:48:16.100 --> 00:48:20.090
You actually rank your preference
order of languages in Mac OS X.

00:48:20.090 --> 00:48:22.850
It's not a,
here's the one language I speak.

00:48:22.860 --> 00:48:27.780
It is, you know, I know Japanese,
and Japanese is my primary language.

00:48:27.780 --> 00:48:30.850
But French is,
I know a little bit of French,

00:48:30.850 --> 00:48:34.930
very little English,
and maybe no Dutch or anything on.

00:48:34.940 --> 00:48:37.800
So you actually rank the languages.

00:48:37.840 --> 00:48:40.790
Now, this version of iTunes I have,
I actually have removed the

00:48:40.880 --> 00:48:43.280
Japanese localization from.

00:48:43.690 --> 00:48:46.850
So when I go ahead and run it again,
after having dynamically changed it,

00:48:46.980 --> 00:48:49.100
first it says, "Hey,
where's the Japanese?"

00:48:49.120 --> 00:48:50.100
There's no Japanese.

00:48:50.170 --> 00:48:53.360
So then it goes and
it comes up in French.

00:48:53.360 --> 00:48:57.360
So here is all the menus are in French.

00:48:57.370 --> 00:49:00.360
It continues to run the
same way it was before.

00:49:00.360 --> 00:49:06.510
So how do you localize an application?

00:49:06.570 --> 00:49:08.680
It's very, very simple.

00:49:09.690 --> 00:49:12.720
Let me go ahead and show
iTunes in the finder.

00:49:12.720 --> 00:49:15.600
Now as you see,
iTunes is a single item in the finder,

00:49:15.600 --> 00:49:15.830
right?

00:49:15.840 --> 00:49:18.700
A single icon.

00:49:18.780 --> 00:49:23.420
But for you,
I will show the dirty insides.

00:49:25.050 --> 00:49:27.460
So inside here you
have a contents folder.

00:49:27.500 --> 00:49:29.080
In here there's an Info.plist.

00:49:29.080 --> 00:49:33.780
So this is an XML file telling
it what file types it can open,

00:49:33.880 --> 00:49:36.240
things about icons.

00:49:36.390 --> 00:49:40.480
Here is the Mac OS,
so it has a single executable.

00:49:41.340 --> 00:49:42.520
Here's its plugins folder.

00:49:42.540 --> 00:49:45.360
So, unlike a Mac OS 9,
where you always have iTunes

00:49:45.410 --> 00:49:48.200
and plugins right next to it,
the plugins are hidden from the user.

00:49:48.200 --> 00:49:49.360
They don't have to worry
about looking at it.

00:49:49.550 --> 00:49:51.000
It's in here.

00:49:51.130 --> 00:49:52.800
And then here's all my resources.

00:49:52.900 --> 00:49:55.290
So you see it's localized to
Dutch and English and French.

00:49:55.430 --> 00:49:57.600
There's a bunch of other icons here.

00:49:57.700 --> 00:50:01.990
Then, you know, this is alphabetized,
so Spanish is down here.

00:50:01.990 --> 00:50:01.990
There's no Japanese in here.

00:50:02.610 --> 00:50:04.400
Here's the Japanese package.

00:50:04.470 --> 00:50:09.790
All this is are the resources,
the localized resources,

00:50:09.900 --> 00:50:29.500
[Transcript missing]

00:50:42.160 --> 00:50:46.430
So to localize your applications,
you don't have to recompile them.

00:50:46.640 --> 00:50:48.080
You don't have to link them.

00:50:48.130 --> 00:50:52.900
All you need is that set of resources
that are the localized resources,

00:50:52.920 --> 00:50:55.920
add those in,
and now you have it localized

00:50:55.920 --> 00:50:56.960
to another language.

00:50:57.030 --> 00:50:57.750
So it's an easy way.

00:50:57.800 --> 00:51:00.860
You can come out with an application
with a set of localizations and later

00:51:01.120 --> 00:51:04.770
ship just the other localizations,
and now your app is localized

00:51:04.770 --> 00:51:06.920
into more languages.

00:51:06.940 --> 00:51:07.980
That's Carbon.

00:51:08.020 --> 00:51:10.130
Let's talk about Cocoa.

00:51:12.120 --> 00:51:16.180
So Cocoa is there to help you
create the next killer app.

00:51:16.180 --> 00:51:19.700
So if you have this great gem
of an idea and you want to

00:51:19.700 --> 00:51:23.120
turn it into a new application,
Cocoa is a great way to do

00:51:23.120 --> 00:51:25.410
this and do it very quickly.

00:51:26.650 --> 00:51:30.190
The way I look at it,
a lot of people when they

00:51:30.320 --> 00:51:34.900
talk about creative genius,
they talk about artists, right?

00:51:34.900 --> 00:51:40.100
So here's our friend Picasso looking
a little happier over with his bird.

00:51:40.100 --> 00:51:43.380
And here he has, you know,
some creative genius headache

00:51:43.490 --> 00:51:44.390
bursting to come out.

00:51:44.390 --> 00:51:47.920
But most people,
they think about an artist as

00:51:47.920 --> 00:51:49.900
being having creative genius.

00:51:49.960 --> 00:51:53.380
But I think of developers
as having creative genius.

00:51:53.380 --> 00:51:57.880
Because every killer app that's
come out has been the gem in

00:51:57.880 --> 00:52:00.720
the mind of some developer.

00:52:00.770 --> 00:52:03.450
And there's been a lot of those
apps that never came out because the

00:52:03.450 --> 00:52:06.540
developer didn't have the right tools,
the right frameworks,

00:52:06.540 --> 00:52:09.990
the right operating system to
enable them to get that application

00:52:09.990 --> 00:52:12.290
and turn it into a reality.

00:52:12.350 --> 00:52:15.530
So what we really want to do
is enable all those killer

00:52:15.530 --> 00:52:18.050
ideas to turn into killer apps.

00:52:19.990 --> 00:52:24.130
So first and very simply,
Cocoa supports all the things that

00:52:24.130 --> 00:52:26.950
Mac OS X supports and Carbon supports,
right?

00:52:26.990 --> 00:52:31.560
So all the heavy hitters in here,
including really good integration

00:52:31.560 --> 00:52:33.910
with other system components.

00:52:35.030 --> 00:52:38.450
But the great part about Cocoa is it
really accelerates your development.

00:52:38.450 --> 00:52:41.740
It makes it so you can develop
applications much faster.

00:52:41.880 --> 00:52:42.600
How does it do this?

00:52:42.600 --> 00:52:45.970
Well, one way is it's object-oriented.

00:52:45.970 --> 00:52:51.130
So all the different concepts are modeled
into these nicely bundled objects.

00:52:51.200 --> 00:52:53.800
You can combine those objects together.

00:52:53.800 --> 00:52:57.580
You can actually, and, you know,
one of the really interesting things you

00:52:57.580 --> 00:52:59.260
can do with them is you can extend them.

00:52:59.260 --> 00:53:05.400
So Cocoa is really designed to allow you
to not only use the pre-built objects,

00:53:05.400 --> 00:53:09.880
the pre-built classes,
but to extend those in ways that

00:53:09.940 --> 00:53:14.050
make sense for the unique idea
that you're trying to implement.

00:53:14.100 --> 00:53:18.010
So you can subclass objects,
you can add delegation.

00:53:18.240 --> 00:53:22.580
There's a number of standard ways
for you to use the objects in new and

00:53:22.580 --> 00:53:25.390
unique ways that solve your purposes.

00:53:27.890 --> 00:53:33.200
Another great thing that Cocoa has,
which doesn't come standard with

00:53:33.200 --> 00:53:37.120
all object-oriented frameworks,
is a dynamic runtime.

00:53:37.140 --> 00:53:40.980
This means that at runtime,
a lot of information is found

00:53:40.980 --> 00:53:44.130
out that isn't known when
you compile the application.

00:53:44.140 --> 00:53:47.090
This allows you to have
things like introspection.

00:53:47.140 --> 00:53:49.090
You can look at an object
at runtime and say,

00:53:49.150 --> 00:53:53.210
"Do you implement this method?" If no,
maybe you'll look at another object to

00:53:53.210 --> 00:53:55.130
find out if it implements that method.

00:53:55.150 --> 00:53:59.140
You can find out a lot of
information at runtime.

00:53:59.140 --> 00:54:01.140
A great example of this is cut.

00:54:01.140 --> 00:54:03.140
Cut, copy, and paste.

00:54:03.190 --> 00:54:09.300
You can actually wire up your cut
menu item to this magical object,

00:54:09.330 --> 00:54:15.140
which will get determined at runtime to
see what is the currently focused widget,

00:54:15.140 --> 00:54:19.600
and tell that widget to do a cut,
as opposed to having to know at

00:54:19.600 --> 00:54:25.130
compile time what object is going
to be pointed to at any given time.

00:54:25.140 --> 00:54:29.040
And it really allows powerful tools.

00:54:29.810 --> 00:54:34.520
So Bertrand gave an example of how few
lines we need for something like mail.

00:54:34.730 --> 00:54:38.550
You know, in the Cocoa space,
it's not the number of lines you have,

00:54:38.590 --> 00:54:41.280
you know, it's how you use them.

00:54:42.690 --> 00:54:44.560
Cocoa is really easy to use also.

00:54:44.620 --> 00:54:49.650
And the main reason for this is
it's a very consistent set of APIs.

00:54:49.720 --> 00:54:53.560
So a lot of people have come to me,
after they've used Cocoa for a while,

00:54:53.610 --> 00:54:56.710
and they say,
it looks like the entire API set

00:54:56.730 --> 00:54:59.200
was designed by a single person.

00:54:59.260 --> 00:55:03.100
Because each class doesn't
have the nuances of a different

00:55:03.220 --> 00:55:06.060
person's API design skills.

00:55:06.120 --> 00:55:07.320
And that's really important.

00:55:07.500 --> 00:55:11.110
The APIs are all meant to be very,
very consistent.

00:55:11.190 --> 00:55:15.520
So when you learn a concept in one class,
that's true across all the classes.

00:55:15.580 --> 00:55:19.480
When we introduce something like a
string object or a collection class,

00:55:19.880 --> 00:55:21.860
everywhere you'd need that
sort of collection class,

00:55:21.910 --> 00:55:24.510
that one will be used.

00:55:26.450 --> 00:55:29.050
The APIs are supported
in Objective-C and Java,

00:55:29.050 --> 00:55:31.630
so you can call into Cocoa from
Objective-C and Java.

00:55:31.700 --> 00:55:36.740
So if you love the Java language
but hate the Java platform,

00:55:36.740 --> 00:55:39.760
you can use Cocoa as your API set,
as your frameworks,

00:55:39.870 --> 00:55:42.170
but use the Java language.

00:55:56.540 --> 00:55:56.540
But a lot of people look and they say,
well, you know, Objective-C,

00:55:56.540 --> 00:55:56.540
what is that?

00:55:56.540 --> 00:55:56.540
And Objective-C, I mean,
it's a very thin superset of C.

00:55:56.540 --> 00:55:56.540
I mean,
it'll take you about a day to learn.

00:55:56.540 --> 00:55:56.540
But...

00:55:56.740 --> 00:55:59.740
This does not mean that you
have to write your applications

00:55:59.800 --> 00:56:01.360
in Objective-C and Java.

00:56:01.360 --> 00:56:02.660
It's really important.

00:56:02.660 --> 00:56:07.890
You can write your applications in C,
in C++, in Objective-C and Java.

00:56:07.900 --> 00:56:12.450
So you can have, you know,
99% of your code written in C++.

00:56:12.640 --> 00:56:16.250
A few places where you call into the UI,
you have an Objective-C call.

00:56:16.320 --> 00:56:19.610
And one thing that we're actually adding
in our tools is the ability to have

00:56:19.730 --> 00:56:24.180
a file which has a bunch of C++ calls
and then interspersed will be a single

00:56:24.280 --> 00:56:27.060
Objective-C call and then a bunch of C++.

00:56:27.060 --> 00:56:30.990
So within a single source file,
you can actually intersperse

00:56:30.990 --> 00:56:32.760
Objective-C and C++.

00:56:32.760 --> 00:56:36.080
So you're really...
This is a great thing.

00:56:39.210 --> 00:56:42.310
So you're really writing
a C++ application,

00:56:42.310 --> 00:56:45.490
and it uses Objective-C where necessary.

00:56:47.310 --> 00:56:48.640
So what does Cocoa have?

00:56:48.790 --> 00:56:50.000
Well, it has widgets galore.

00:56:50.100 --> 00:56:51.400
And I'm not going to
list all the widgets,

00:56:51.510 --> 00:56:54.590
but it has-- let's see, Windows Views.

00:56:54.820 --> 00:56:57.690
It has all the widgets you'd expect.

00:56:58.320 --> 00:57:02.040
But it has a lot of other things
which are much broader concepts which

00:57:02.130 --> 00:57:03.790
really accelerate your development.

00:57:03.860 --> 00:57:06.150
It has a great document architecture.

00:57:06.170 --> 00:57:09.310
So if you're creating a
multiple document application,

00:57:09.310 --> 00:57:14.050
or just a single document application,
Cocoa will help you do that.

00:57:14.200 --> 00:57:20.590
It'll automatically run your
open and save panels for you.

00:57:20.910 --> 00:57:20.910
It'll...

00:57:21.700 --> 00:57:26.710
It'll also pay attention to whether
or not your file's been edited.

00:57:27.940 --> 00:57:31.200
So there's a very strong concept of
a document architecture built in.

00:57:31.200 --> 00:57:33.080
You can get it for free.

00:57:33.500 --> 00:57:52.000
[Transcript missing]

00:57:52.180 --> 00:57:55.900
It also allows you to plug in the
special undo for your application

00:57:55.900 --> 00:57:57.200
directly into this queue as well.

00:57:57.200 --> 00:57:59.070
It's very simple.

00:58:03.090 --> 00:58:05.130
There's a great scripting architecture.

00:58:05.130 --> 00:58:06.880
So we really,
really believe in the power of

00:58:07.000 --> 00:58:09.010
Apple Script and Apple Events.

00:58:09.130 --> 00:58:12.120
And this is built into Cocoa,
so it's really simple for

00:58:12.120 --> 00:58:16.000
you to add Apple Events and
Apple Script support to your application.

00:58:16.000 --> 00:58:20.400
There's a great tech system.

00:58:22.560 --> 00:58:25.860
So the tech system is
fully Unicode-based.

00:58:25.870 --> 00:58:27.940
Excuse me while I pull out a cough drop.

00:58:27.940 --> 00:58:31.330
As Steve said,
I woke up with a 101 fever this morning.

00:58:35.500 --> 00:58:39.640
So the text system is extremely powerful.

00:58:39.690 --> 00:58:41.990
It's fully Unicode-based.

00:58:42.030 --> 00:58:45.770
It uses Quartz to have this
beautiful anti-alias text.

00:58:45.850 --> 00:58:47.680
It has things like inline spell checking.

00:58:47.700 --> 00:58:53.250
It has advanced typographic
features like kerning and ligatures.

00:58:53.850 --> 00:58:56.530
It's really well architected
so you can actually replace,

00:58:56.600 --> 00:59:00.800
subclass, modify pieces of it to
get the job you want done.

00:59:00.800 --> 00:59:04.230
And potentially most important,

00:59:05.750 --> 00:59:10.670
It's used everywhere text
appears in a Cocoa application.

00:59:10.670 --> 00:59:15.310
So if you want ligatures,
you can get ligatures anywhere

00:59:15.310 --> 00:59:20.540
throughout an application because
it's the same text system.

00:59:20.540 --> 00:59:24.870
If you want spell checking,
it can happen in any place you have text.

00:59:24.870 --> 00:59:24.870
So even our IDE tools can use
this sort of thing because it uses

00:59:24.870 --> 00:59:24.870
the same text system everywhere.

00:59:28.250 --> 00:59:31.760
Let's talk about RAD for a minute.

00:59:31.880 --> 00:59:35.500
People have very different
ideas about what RAD means,

00:59:35.530 --> 00:59:38.500
but the general one people think of is

00:59:38.990 --> 00:59:42.150
It's a tool which spits
out a bunch of code,

00:59:42.210 --> 00:59:44.960
which helps you get
your work done quickly,

00:59:44.990 --> 00:59:49.000
but it's sort of a, you know, write once,
never modify, and then it's a one-off,

00:59:49.100 --> 00:59:50.620
you're done with it,
and you have to create a new app

00:59:50.620 --> 00:59:51.780
the next time you want to change it.

00:59:53.060 --> 00:59:58.220
So it's really important that, you know,
I think what the people are doing who

00:59:58.220 --> 01:00:00.340
are creating those sorts of tools,
they're looking for very

01:00:00.340 --> 01:00:01.450
simple applications.

01:00:01.550 --> 01:00:04.940
You know, you're going to build a very
simple application with the tool.

01:00:05.010 --> 01:00:09.510
And they're looking just at
the tool as the solution.

01:00:09.790 --> 01:00:14.810
What we do on Mac OS X is we look
at both the tool and the framework

01:00:15.500 --> 01:00:17.670
and we develop them together.

01:00:17.670 --> 01:00:18.700
So they're really married.

01:00:18.700 --> 01:00:23.140
And that allows you to have the power of
the framework and really integrate that

01:00:23.240 --> 01:00:29.240
into the power of the tool and get a way
of developing that can solve your needs

01:00:29.240 --> 01:00:31.710
at any part of the development cycle.

01:00:32.100 --> 01:00:34.600
So Interface Builder
is our tool for this.

01:00:34.600 --> 01:00:36.060
Of course,
it allows you to do simple things

01:00:36.060 --> 01:00:38.500
like visually build and edit your UI.

01:00:38.610 --> 01:00:41.120
As I said this morning,
it allows you to create

01:00:41.120 --> 01:00:43.640
Aqua compliant user interfaces.

01:00:43.640 --> 01:00:47.930
So we've built all the rules
for Aqua directly into the tool.

01:00:49.070 --> 01:00:52.050
But it's really cool in that
it can wire objects together.

01:00:52.130 --> 01:00:57.700
So it actually can connect dynamically
your different objects together.

01:00:58.940 --> 01:01:01.800
You can run your interface
without compiling.

01:01:01.860 --> 01:01:04.680
And it supports both Carbon and Cocoa.

01:01:04.730 --> 01:01:08.370
So we've actually done a lot of work in
the last year to make it so Interface

01:01:08.370 --> 01:01:10.630
Builder supports Carbon as well.

01:01:10.820 --> 01:01:14.000
Now if you look at the
Mac Toolbox three years ago,

01:01:14.000 --> 01:01:15.840
it would have been
really hard to do that.

01:01:15.950 --> 01:01:19.070
But with Carbon Events,
Carbon Events are just made for

01:01:19.070 --> 01:01:20.460
something like Interface Builder.

01:01:20.460 --> 01:01:22.850
So Interface Builder can
really accelerate your

01:01:23.120 --> 01:01:26.450
adoption of Carbon Events,
so it supports them really well.

01:01:26.600 --> 01:01:32.160
It even saves out the interface, the UI,
as an XML file for Carbon,

01:01:32.220 --> 01:01:37.380
and that's loaded and run when
you use the Carbon IB runtime.

01:01:39.580 --> 01:01:41.820
Cocoa is also very mature.

01:01:41.950 --> 01:01:44.080
For a lot of people, Cocoa is very new.

01:01:44.100 --> 01:01:46.500
You haven't heard about it or
you've heard about it once.

01:01:46.500 --> 01:01:52.500
It turns out that Cocoa has gone
through several different stages.

01:01:53.340 --> 01:01:57.220
Somewhere around the
monkey or club stage,

01:01:58.620 --> 01:02:02.610
There's this guy who had
this idea for a killer app.

01:02:02.740 --> 01:02:05.620
He had this great idea.

01:02:05.620 --> 01:02:06.900
He was a creative genius.

01:02:06.900 --> 01:02:09.760
And he said, here is this idea I have
for this killer app.

01:02:09.820 --> 01:02:14.490
And he went out there and he
chose to use a previous...

01:02:14.710 --> 01:02:18.740
version of Cocoa,
a previous incarnation of Cocoa,

01:02:18.810 --> 01:02:20.300
to build his killer app.

01:02:20.320 --> 01:02:24.930
And he did it when Cocoa had way
less features than it does today.

01:02:25.080 --> 01:02:28.970
Well, that person was Tim Berners-Lee,
and the application was

01:02:28.980 --> 01:02:31.030
the very first web browser.

01:02:31.120 --> 01:02:34.290
The web browser was
the first web browser,

01:02:34.430 --> 01:02:38.970
and the web itself was created
using a previous version of Cocoa.

01:02:39.060 --> 01:02:42.020
And that was back in the
club or the monkey stage.

01:02:42.380 --> 01:02:48.820
Imagine what you can do with Cocoa in
its current incarnation walking upright.

01:02:52.900 --> 01:02:57.030
So Apple is really one of the
biggest customers of Cocoa right now.

01:02:57.060 --> 01:02:59.520
We know it helps us build
applications faster,

01:02:59.520 --> 01:03:04.120
so a lot of the system apps
are actually built on Cocoa.

01:03:04.900 --> 01:03:08.520
So I had this really great demo
for Cocoa where I build this

01:03:08.520 --> 01:03:10.240
iMovie thing in Interface Builder.

01:03:10.240 --> 01:03:12.160
Has anyone seen it?

01:03:12.480 --> 01:03:14.070
Yeah, okay.

01:03:14.400 --> 01:03:20.500
[Transcript missing]

01:03:22.640 --> 01:03:25.180
A lot of the time I get
asked the question,

01:03:25.180 --> 01:03:28.200
what is the native
framework for Mac OS X?

01:03:28.230 --> 01:03:31.180
I want to develop an application
for the native framework.

01:03:31.240 --> 01:03:34.930
I'm looking out there and I don't
want to develop for the wrong

01:03:34.930 --> 01:03:36.990
one that you're going to drop.

01:03:39.420 --> 01:03:42.240
So what is the native framework?

01:03:42.240 --> 01:03:45.920
There's a lot of implications for
what would define a native framework.

01:03:45.920 --> 01:03:48.360
It has to obviously provide
protected memory and preemptive

01:03:48.360 --> 01:03:51.180
multitasking and support Aqua and
advanced application packaging.

01:03:51.210 --> 01:03:54.720
It has to allow you to access all
the system frameworks as well.

01:03:54.720 --> 01:03:58.440
But the most important, of course,
is it needs to be the basis

01:03:58.670 --> 01:04:01.310
for future Apple innovations.

01:04:01.950 --> 01:04:05.410
and has to be the basis on
which we build applications,

01:04:05.410 --> 01:04:08.520
on which we build other
frameworks that define the system.

01:04:08.590 --> 01:04:11.900
So what is the native
framework for Mac OS X?

01:04:11.940 --> 01:04:13.760
What's the trick question?

01:04:13.830 --> 01:04:15.390
There's two.

01:04:15.500 --> 01:04:20.520
Cocoa and Carbon are both
native frameworks for Mac OS X.

01:04:20.750 --> 01:04:26.280
In many ways,
Carbon is the procedural API of a

01:04:26.280 --> 01:04:29.600
lot of the functionality that we
have that's an implementation detail,

01:04:29.600 --> 01:04:32.930
and Cocoa is the
object-oriented API to those.

01:04:33.020 --> 01:04:36.050
We share a lot of code below the surface.

01:04:36.180 --> 01:04:38.150
We're investing heavily in both of them.

01:04:38.260 --> 01:04:41.600
They're both native APIs,
and we will bring both of them

01:04:41.600 --> 01:04:44.040
forward and evolve both of them.

01:04:44.130 --> 01:04:46.510
We're not going to stop on any.

01:04:46.830 --> 01:04:50.850
So if you build a Carbon application,
that is a native application on Mac OS X.

01:04:50.850 --> 01:04:55.400
If you build a Cocoa application,
that is a native application on X.

01:04:56.170 --> 01:04:59.300
So I look at our frameworks,
I get really excited because I think

01:04:59.920 --> 01:05:03.980
we're going to get some killer
apps from you guys because we've

01:05:04.100 --> 01:05:08.030
provided you the APIs to do so.

01:05:08.120 --> 01:05:12.630
Here's the roadmap for those of
you who think of using Classic.

01:05:15.970 --> 01:05:18.300
If you're interested in Cocoa,
stay seated.

01:05:18.300 --> 01:05:20.880
It's immediately following this hall.

01:05:20.900 --> 01:05:23.380
There's lots and lots of Carbon talks.

01:05:23.380 --> 01:05:28.630
The first one is tomorrow at 11:30,
which is Carbon Events.

01:05:29.130 --> 01:05:32.970
If you're interested in BSD and Darwin,
you missed it.

01:05:32.980 --> 01:05:35.160
It was three hours ago.

01:05:35.200 --> 01:05:38.860
But when the streaming video comes out,
you can go ahead and

01:05:38.860 --> 01:05:40.170
get that and watch it.

01:05:40.310 --> 01:05:43.910
and tomorrow morning bright
and early is the Java Overview.

01:05:43.960 --> 01:05:45.570
There's a lot of people to contact here.

01:05:45.580 --> 01:05:47.780
Mark Turner is the
Carbon Technology Manager.

01:05:47.850 --> 01:05:49.670
For your Carbon questions, go to Mark.

01:05:49.750 --> 01:05:52.310
For your Cocoa questions,
go to Heather Hickman.

01:05:52.370 --> 01:05:54.620
For your Java questions, Alan Samuel.

01:05:54.620 --> 01:06:01.980
And for your BSD and Unix questions,
go to Jason Yeo.

01:06:02.410 --> 01:06:04.000
Thank you very much.