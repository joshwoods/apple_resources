WEBVTT

00:00:02.560 --> 00:00:09.090
to the stage, Troy Dawson,
3D API engineer for Apple.

00:00:16.200 --> 00:00:19.460
I'm with the OpenGL group at Apple,
and today I'll introduce four

00:00:19.460 --> 00:00:23.200
rendering techniques to produce
interesting graphics effects

00:00:23.200 --> 00:00:25.670
on Mac OS X using OpenGL.

00:00:27.360 --> 00:00:31.360
These protects will be
cube environment mass,

00:00:31.360 --> 00:00:33.400
improved texture filtering,

00:00:34.050 --> 00:00:37.740
using .3 texture combining
to do bump mapping.

00:00:37.870 --> 00:00:40.680
And finally,
I'll talk about central shadow volumes.

00:00:45.000 --> 00:00:53.900
[Transcript missing]

00:00:54.460 --> 00:00:55.600
is the founder of OpenGL.

00:00:55.600 --> 00:00:57.850
He's also the founder of
the OpenGL environment.

00:00:57.860 --> 00:00:59.900
He's been working on a
number of new features,

00:00:59.900 --> 00:01:03.210
including a new environment environment
map to map environment lighting

00:01:03.210 --> 00:01:04.950
effects onto a rendered object.

00:01:04.950 --> 00:01:04.950
As you can see,
this is a spherical environment map.

00:01:04.950 --> 00:01:04.950
Both the front half and the back half

00:01:09.910 --> 00:01:14.490
We use this texture combined with
OpenGL's texture combining operations

00:01:14.820 --> 00:01:18.580
and the automatic coordinate generation
to simply render the environment

00:01:18.580 --> 00:01:22.180
map onto the rendered object,
as you can see here.

00:01:24.900 --> 00:01:26.790
So that was environment maps.

00:01:26.810 --> 00:01:30.560
Next,
we'll talk about cube and texture maps.

00:01:30.560 --> 00:01:32.540
This is a cube texture map.

00:01:33.010 --> 00:01:36.720
As you can see,
there's multiple faces of the images.

00:01:36.730 --> 00:01:39.680
The images are arranged
in a cube structure.

00:01:43.820 --> 00:01:47.820
For use as an environment map,
the cube texture map must have the faces

00:01:47.820 --> 00:01:53.670
arranged to form a cubic panorama that
shows the scene as you turn the object.

00:01:56.240 --> 00:02:01.580
Using cube maps is very similar to
using regular two-dimensional textures.

00:02:01.600 --> 00:02:06.460
Instead of glTextImage2D,
we use a new constant,

00:02:06.480 --> 00:02:08.320
which is textureCubeMap.

00:02:08.320 --> 00:02:10.350
And as you can see,
the texture parameters are

00:02:10.350 --> 00:02:13.730
very similar to using regular
two-dimensional textures.

00:02:20.100 --> 00:02:25.980
After we've bound our texture map object,
we need to download the textures.

00:02:25.980 --> 00:02:29.700
Downloading the textures images to
the texture objects are very similar.

00:02:29.720 --> 00:02:32.040
We have these six new constants.

00:02:32.040 --> 00:02:36.220
Each constant corresponds
to a face of the cube map.

00:02:36.220 --> 00:02:38.010
And as you can see here,
I just go through the six

00:02:38.020 --> 00:02:39.560
constants and download them.

00:02:39.560 --> 00:02:44.620
These are cube maps,
so the width and height

00:02:44.620 --> 00:02:46.080
must be identical.

00:02:54.000 --> 00:02:57.190
Rendering the QMaps is much simplified
if we do use OpenGL's texture

00:02:57.340 --> 00:02:59.690
coordinate generation facility.

00:03:01.100 --> 00:03:06.540
For Cubemaps,
we'll bind our texture object.

00:03:06.570 --> 00:03:09.780
We'll set the texture generation
to Reflection Map mode.

00:03:09.810 --> 00:03:11.770
And we enable Cubemap generation.

00:03:11.810 --> 00:03:14.240
We enable the texture
coordinate generation.

00:03:15.070 --> 00:03:16.350
If you note here,
there are three dimensions to

00:03:16.390 --> 00:03:19.430
texture coordinate generation,
while spherical map mode

00:03:19.430 --> 00:03:20.480
uses two dimensions.

00:03:20.500 --> 00:03:26.320
Now I have a demo.

00:03:35.680 --> 00:03:36.840
This is from the NVIDIA site.

00:03:36.840 --> 00:03:41.090
This is the NVIDIA Bubble demo,
modified with local scenery.

00:03:41.150 --> 00:03:43.340
As you can see here, I have a bubble.

00:03:45.360 --> 00:03:47.700
This bubble is a cube map environment.

00:03:47.720 --> 00:03:51.840
I can rotate around the scene and
you can see the environment being

00:03:51.840 --> 00:03:53.700
reflected on the surface of the sphere.

00:03:53.700 --> 00:04:01.390
It works in all dimensions,
both vertically...

00:04:07.060 --> 00:04:09.210
I can show you the actual texture images.

00:04:09.330 --> 00:04:12.880
Here are the six texture
images of the cube map.

00:04:12.950 --> 00:04:15.520
As you can see,
it does form a contiguous panorama of the

00:04:15.650 --> 00:04:19.410
scene as viewed from the rendered object.

00:04:22.150 --> 00:04:26.250
We can compare this
panorama to a spherical map.

00:04:26.250 --> 00:04:28.420
Here you see the corresponding
spherical map that was

00:04:28.420 --> 00:04:30.670
generated from these six images.

00:04:32.220 --> 00:04:35.700
As you can see, it has less information
than the cube map.

00:04:35.710 --> 00:04:40.320
Roughly 40% of the texture
map area is representing the

00:04:40.400 --> 00:04:44.000
front half of the environment,
while the next 40% is representing

00:04:44.000 --> 00:04:46.360
the back half of the environment.

00:04:46.570 --> 00:04:50.880
The black areas are wasted space,
which is about 20% of the spherical map.

00:04:51.670 --> 00:04:57.670
This inferior texture mapping
results in poor rendering quality.

00:05:00.680 --> 00:05:03.600
Here you can compare the
spherical map and the cube maps.

00:05:03.630 --> 00:05:06.100
So this is the cube map environment.

00:05:08.090 --> 00:05:10.000
This is a spherical map.

00:05:10.010 --> 00:05:14.300
There's cube and spherical.

00:05:14.450 --> 00:05:16.570
So the quality is different.

00:05:16.880 --> 00:05:19.240
and noticeably better for the cube map.

00:05:19.390 --> 00:05:24.060
Additionally, because cube maps are
not view-independent,

00:05:24.100 --> 00:05:27.020
you can see I have a very
beautiful back view here.

00:05:27.090 --> 00:05:29.400
But if I were to go
back to spherical maps,

00:05:29.440 --> 00:05:31.340
you can see that there's a singularity
at the back of the texture,

00:05:31.340 --> 00:05:34.360
which results in this
rather poor rendering.

00:05:46.450 --> 00:05:50.180
So in summary,
we saw that texture maps for using,

00:05:50.200 --> 00:05:53.250
using cube maps for
texture environments are,

00:05:53.250 --> 00:05:55.750
was better than spherical maps,
mainly because they're

00:05:55.750 --> 00:05:56.640
easier to generate.

00:05:56.660 --> 00:05:59.200
Basically, spherical maps are generated
from the cube maps,

00:05:59.200 --> 00:06:02.710
so if we skip that step,
we can probably do it faster.

00:06:04.090 --> 00:06:11.120
Additionally, the texture maps for QMaps
are viewer independent.

00:06:11.790 --> 00:06:11.800
So it's not sitting there at the back.

00:06:13.180 --> 00:06:16.340
Next I'll look at anisotropic filtering.

00:06:16.380 --> 00:06:19.600
You may have noticed in your
applications that when you have

00:06:20.070 --> 00:06:24.900
a texture that's using mipmaps,
when the texture becomes

00:06:24.900 --> 00:06:26.790
a bleak to the viewer,
you might notice that

00:06:26.790 --> 00:06:28.100
it has blurring effects.

00:06:28.100 --> 00:06:33.330
This is due to OpenGL subsampling
the mipmap levels a little

00:06:33.580 --> 00:06:35.490
bit less than optimal.

00:06:36.370 --> 00:06:41.900
: OpenGL has a new texture
parameter which will allow

00:06:41.900 --> 00:06:45.440
you to improve this sampling.

00:06:46.750 --> 00:06:48.170
Here it is.

00:06:48.250 --> 00:06:52.460
If the driver supports texture--
supports your anastropic filtering,

00:06:52.460 --> 00:06:56.610
you can use this function call to
get the maximum supported value.

00:06:58.990 --> 00:07:02.900
This number will range from 1
to some number like 8 or 16.

00:07:02.980 --> 00:07:06.900
The greater the available value,
the better the texture

00:07:07.000 --> 00:07:09.010
filtering effect available.

00:07:10.880 --> 00:07:15.940
All you do to use this abstract filtering
is use this texture parameter set

00:07:15.950 --> 00:07:19.050
value and you set it to desired value.

00:07:19.380 --> 00:07:24.300
The value set must range from one
up to the maximum available value.

00:07:24.300 --> 00:07:28.500
Another demo.

00:07:39.930 --> 00:07:41.800
Here I have a test image.

00:07:42.550 --> 00:07:43.800
Currently I'm using binary filtering.

00:07:43.800 --> 00:07:47.790
So when I move the text image down,

00:07:48.280 --> 00:07:50.370
You can see some sparkling effects.

00:07:50.590 --> 00:07:53.340
OpenGL provides trilinear filtering
to remove sparkling effects,

00:07:53.370 --> 00:07:55.500
but as you can see,
when you use trilinear filtering,

00:07:55.540 --> 00:07:58.820
the texture becomes blurred,
which isn't so good.

00:07:59.370 --> 00:08:02.470
However,
if I raise the on-stop filtering level,

00:08:02.470 --> 00:08:07.280
you can see that the image becomes sharp
even when it's viewed at a bleak angle.

00:08:07.300 --> 00:08:10.750
I have another image.

00:08:14.070 --> 00:08:18.540
Here we see Tri-Linux Filter blurs out.

00:08:18.570 --> 00:08:21.440
By using the Anisotropic
Filter parameter,

00:08:21.450 --> 00:08:23.340
we can see it's clear again.

00:08:32.880 --> 00:08:35.480
We saw how using the anisotropic
texture filter parameter will

00:08:35.480 --> 00:08:38.730
improve your texture filtering when
the texture is viewed obliquely.

00:08:38.840 --> 00:08:41.690
But this does require
a map texture loading.

00:08:42.210 --> 00:08:44.800
But you can set the desired level.

00:08:44.840 --> 00:08:49.010
Because using this
anatopic filtering will--

00:08:49.370 --> 00:08:51.700
will give you a performance
hit for fill rate.

00:08:51.790 --> 00:08:56.490
So you may need to reduce the level
to keep your performance rate.

00:09:00.340 --> 00:09:04.820
The next is using the OpenGL Texture
Combiner machinery to produce

00:09:05.240 --> 00:09:08.490
a per pixel dot product effect.

00:09:11.790 --> 00:09:14.270
Here's an overview of the process.

00:09:14.560 --> 00:09:19.980
The OpenGL Texture Combiner API allows
you to use texture stages to do

00:09:20.060 --> 00:09:22.510
certain texture combined operations.

00:09:23.060 --> 00:09:25.170
As you can see here,
we have three inputs to the

00:09:25.360 --> 00:09:29.910
texture combiners and two stages.

00:09:30.540 --> 00:09:32.600
The first stage will operate
on the primary color operand

00:09:32.600 --> 00:09:34.740
and a texture operand.

00:09:34.740 --> 00:09:37.560
The output of the first stage will
be given to the second stage to

00:09:37.610 --> 00:09:39.580
produce our final rendered image.

00:09:44.100 --> 00:09:46.840
Let's look at the actual dot product.

00:09:46.900 --> 00:09:51.390
The dot-free-texture function operand
for the GeoTexture combiner units

00:09:51.710 --> 00:09:55.880
will allow the texture units
to do a per-pixel operation.

00:09:55.960 --> 00:10:01.660
This is kind of a hack in that we have
to encode the vectors of the dot product

00:10:01.720 --> 00:10:04.600
into both color and a texture map.

00:10:05.140 --> 00:10:07.540
As you know,
a dot product takes two vectors

00:10:07.630 --> 00:10:12.520
and does a dot product operation to
produce a diffuse lighting effect.

00:10:16.160 --> 00:10:18.610
The output of the dot product
will be a scalar value,

00:10:18.610 --> 00:10:23.710
but we can duplicate the scalar value
to make the output be a light map.

00:10:27.020 --> 00:10:33.120
To calculate the local light vector
from the polygon to the light source,

00:10:33.120 --> 00:10:35.340
we can use this math.

00:10:35.380 --> 00:10:37.070
It's pretty simple.

00:10:38.550 --> 00:10:41.160
But the dot product operation
requires that the light vector

00:10:41.380 --> 00:10:44.030
be in local coordinate space.

00:10:44.110 --> 00:10:48.800
So we must rotate this light by the
inverse rotation of the polygon.

00:10:48.850 --> 00:10:50.740
In my code, I use quaternions.

00:10:50.800 --> 00:10:54.850
So mine looks like this.

00:10:54.960 --> 00:10:57.560
But I don't have a typo in my code,
hopefully.

00:11:00.050 --> 00:11:02.060
After we rotate the local
light vector into the local

00:11:02.120 --> 00:11:05.240
coordinate space of the polygon,
we have to encode the light vector

00:11:05.240 --> 00:11:08.100
into RGB color coordinate space.

00:11:08.100 --> 00:11:10.110
This is done like this.

00:11:10.600 --> 00:11:16.130
Here I'm using inside bytes
as the color components.

00:11:18.290 --> 00:11:21.300
As you can probably figure out,
the color components are

00:11:21.410 --> 00:11:23.800
mapped from 0 to 255.

00:11:23.940 --> 00:11:28.000
So a -1 vector component will map to 0,
and a +1 vector component

00:11:28.000 --> 00:11:29.800
will map to 255.

00:11:29.800 --> 00:11:34.420
Additionally,
you can do this encoding for all

00:11:34.430 --> 00:11:36.430
the vertices of your polygon.

00:11:39.140 --> 00:11:44.290
Here we have the second
operand of the first stage.

00:11:44.350 --> 00:11:46.610
This is the normal map operand.

00:11:50.120 --> 00:11:53.630
This texture map image,
each pixel of this texture map image

00:11:53.630 --> 00:11:56.520
encodes a single surface normal.

00:11:57.430 --> 00:12:03.630
The texture map image is blue because the
blue component of the color corresponds

00:12:03.630 --> 00:12:06.350
to the direction out of the screen.

00:12:09.330 --> 00:12:14.230
Usually these surface normal maps
textures are produced during your

00:12:14.340 --> 00:12:19.230
content creation phase by the artist who
has a height map and you apply a tool to

00:12:19.260 --> 00:12:22.800
convert the height map to a normal map.

00:12:26.500 --> 00:12:30.160
Let's look at the first stage.

00:12:30.180 --> 00:12:32.570
As described previously, we have

00:12:33.530 --> 00:12:38.120
The first operand,
which will be the local light vector.

00:12:38.140 --> 00:12:41.590
Our second operand will
be the encoded normal map.

00:12:43.810 --> 00:12:48.060
Here we set the operation
to dot operation.

00:12:48.140 --> 00:12:50.570
Additionally, the first texture stage for
the dot-free combiner will

00:12:50.570 --> 00:12:57.990
allow you to scale the output,
but I'll show you the code next.

00:12:58.090 --> 00:13:00.590
Here's the code that
corresponds to the first stage.

00:13:10.120 --> 00:13:15.790
: We're using the first
texture unit as the normal map.

00:13:15.790 --> 00:13:15.790
So we bind the normal map
to the first texture unit.

00:13:19.350 --> 00:13:25.240
Additionally, we set the texture
combine operation to .3.

00:13:25.280 --> 00:13:27.900
The output of the .3 can
either be a scalar value alpha,

00:13:27.920 --> 00:13:28.800
or it can be an RGB.

00:13:28.800 --> 00:13:31.970
Here I set the output to be an RGB value.

00:13:32.830 --> 00:13:37.810
And then finally I set the
two operands of the operation.

00:13:41.500 --> 00:13:45.200
The result is the-- would be
the grayscale output you see

00:13:45.200 --> 00:13:47.280
here for the dot-p result.

00:13:47.920 --> 00:13:50.250
The second stage of the operation
simply modulates the output

00:13:50.830 --> 00:13:52.810
against an unlit-based texture.

00:13:58.340 --> 00:14:01.600
Here's the code that
corresponds to the second stage.

00:14:01.600 --> 00:14:05.780
I'm using the second texture
unit for the base image.

00:14:07.170 --> 00:14:10.290
And again,
I set the combiner operation to modulate.

00:14:10.350 --> 00:14:13.720
Then I set the first operand
to be the previous output.

00:14:13.840 --> 00:14:16.690
Second operand will be the base texture.

00:14:19.470 --> 00:14:21.220
Next we'll see the code.

00:14:21.220 --> 00:14:22.390
It actually renders the image.

00:14:22.400 --> 00:14:27.770
It's a lot of code there,
so let's look at one vertex.

00:14:32.590 --> 00:14:38.130
: First I issued the local light vector,
which is an unsigned byte vector.

00:14:38.660 --> 00:14:42.220
: Then I simply issue the two
sets of texture coordinates

00:14:42.220 --> 00:14:44.160
from the source textures.

00:14:45.230 --> 00:14:48.340
As you notice,
for each vertex of the polygon,

00:14:48.340 --> 00:14:52.660
I issue a separate light
vector in the color.

00:14:52.660 --> 00:14:55.380
You can calculate these light
vectors for each vertex of

00:14:55.380 --> 00:14:57.700
the polygon and issue it like

00:14:59.970 --> 00:15:06.540
: I'm going to show you how to use
the vertex and texture program to

00:15:06.680 --> 00:15:11.350
interpret the normals across the polygon.

00:15:11.350 --> 00:15:11.350
If the smooth blending mode is enabled,
we can use the vertex

00:15:12.660 --> 00:15:15.440
However, you have to, uh,
there are issues about keeping

00:15:15.440 --> 00:15:19.340
the vectors normalized,
but there are ways to get around that.

00:15:19.430 --> 00:15:21.090
Now I have a demo.

00:15:31.220 --> 00:15:34.230
Here I have a positional light
source circling the source texture.

00:15:34.260 --> 00:15:41.040
You can see a purposeful light effect,
perhaps.

00:15:41.040 --> 00:15:43.320
Let's move in so we can see it better.

00:15:55.290 --> 00:15:57.340
This polygon is simple
for vertex polygon.

00:15:57.340 --> 00:15:58.700
There is no geometry.

00:15:58.850 --> 00:16:03.260
But because of dot-tree-texture combined,
we can see the lighting change

00:16:03.610 --> 00:16:05.540
depending on the local light vector.

00:16:05.620 --> 00:16:10.640
I can show you the colors that
correspond to the local light vector.

00:16:10.770 --> 00:16:12.550
Here you can see the color change.

00:16:12.660 --> 00:16:15.800
These colors are the
encoded local light vectors.

00:16:21.190 --> 00:16:25.000
Here you can see... Bizarre.

00:16:25.220 --> 00:16:29.410
Here you can see the geometry
of the polygon is flat.

00:16:43.120 --> 00:16:45.500
So in summary,
you saw how you can use the

00:16:45.500 --> 00:16:49.640
OpenGL texture combine API to do
a diffuse lighting effect using

00:16:49.640 --> 00:16:52.910
texture units instead of geometry.

00:16:57.300 --> 00:17:01.840
This requires you to produce
your normal map as a texture.

00:17:01.840 --> 00:17:05.840
And it's required to calculate the
local light vector for each vertex.

00:17:05.850 --> 00:17:08.910
Or you can calculate the local
light vector for the polygon.

00:17:12.180 --> 00:17:14.900
Finally, we have stencil shadow volumes.

00:17:14.900 --> 00:17:17.340
Is that the time?

00:17:17.340 --> 00:17:19.120
Oh well.

00:17:19.120 --> 00:17:21.180
This is going to be a quick session.

00:17:23.780 --> 00:17:25.000
I like shadows.

00:17:25.060 --> 00:17:26.200
Shadows are cool.

00:17:26.290 --> 00:17:30.990
Using sense of shadow volumes will
allow you to do this dynamically.

00:17:36.520 --> 00:17:40.200
Using the Stencil Buffer to do
shadows requires employing a

00:17:40.200 --> 00:17:42.230
Stencil Buffer and a Stencil Test.

00:17:42.330 --> 00:17:45.540
As you can see, a Stencil Test is part
of the Pixel Pipeline.

00:17:45.650 --> 00:17:49.120
It's a new feature in Mac OS X.

00:17:49.220 --> 00:17:52.460
We'll use the Depth Test and the
Stencil Test for this operation.

00:18:00.010 --> 00:18:04.900
The operation can be simple or
complex depending on your application.

00:18:04.920 --> 00:18:08.080
But the basic steps is to first
render your scene geometry normally,

00:18:08.080 --> 00:18:09.900
both color and depth.

00:18:09.900 --> 00:18:12.890
Then we construct our shadow volume.

00:18:15.220 --> 00:18:18.170
Then we stenciled this shadow
volume into the stencil buffer,

00:18:18.170 --> 00:18:20.380
and we used a stencil mask
to render either a lighting

00:18:20.380 --> 00:18:23.090
effect or a shadowing effect,
depending on your technique.

00:18:26.060 --> 00:18:30.340
First step is to actually
construct our shadow volumes.

00:18:30.340 --> 00:18:34.710
This can be very application specific,
so I'm going to hand wave it a bit.

00:18:35.410 --> 00:18:38.930
General idea,
this is our positional light source.

00:18:39.030 --> 00:18:42.080
And this is an occluding object.

00:18:42.530 --> 00:18:46.430
We just will construct a separate
shadow volume that will be extruded

00:18:46.520 --> 00:18:50.750
from the including object in the
direction away from the light source.

00:18:51.410 --> 00:18:54.520
It's important that this shadow
volume encompass the full scene

00:18:54.520 --> 00:18:56.480
geometry you wish to have shadowed.

00:19:00.450 --> 00:19:04.610
After we have made our shadow volume,
we will stencil it with a pretty

00:19:04.660 --> 00:19:06.920
simple two-step operation.

00:19:08.540 --> 00:19:11.560
and at the end of the stencil operation,
we'll have a stencil buffer where

00:19:11.980 --> 00:19:15.290
the stencil buffer will have non-zero
values where the scene geometry

00:19:15.300 --> 00:19:16.500
intersects the shadow volume.

00:19:16.500 --> 00:19:20.400
Here's the code for that.

00:19:31.430 --> 00:19:34.040
Stencil operation only requires
writing to the stencil buffer,

00:19:34.040 --> 00:19:36.400
not so we disable the
color and depth rights.

00:19:36.400 --> 00:19:41.380
Next I will set up the stencil operation.

00:19:42.430 --> 00:19:45.300
The GL invert operand is important.

00:19:45.300 --> 00:19:51.000
This will set the stencil
test action of the depth pass.

00:19:52.340 --> 00:19:57.990
to invert the stencil buffer when the
depth pass is for your rendered volume.

00:20:01.830 --> 00:20:03.920
Next,
I simply render our shadow volume twice.

00:20:04.110 --> 00:20:06.080
First the back faces and the front faces.

00:20:06.080 --> 00:20:10.550
Then I would reset the phrase state.

00:20:18.300 --> 00:20:20.430
After we have rendered
our stencil buffer,

00:20:20.460 --> 00:20:28.020
stencil mask, we have several options to
get the lighting effect.

00:20:29.750 --> 00:20:32.580
Perhaps the simplest is rendering
a two-dimensional overlay

00:20:32.630 --> 00:20:36.540
polygon with a shadow color
and then using alpha blending.

00:20:37.250 --> 00:20:41.640
This works well,
but does leave one artifact where

00:20:41.640 --> 00:20:45.940
the scene geometry within the shadow
volume will still exhibit diffuse

00:20:45.960 --> 00:20:49.380
and specular lighting effects,
which may not be what you want.

00:20:50.080 --> 00:20:52.280
To avoid that,
you can do more complicated

00:20:52.280 --> 00:20:57.110
multi-pass scene rendering,
where you render first an unlit scene,

00:20:57.140 --> 00:21:01.000
then use a stencil mask you've created
for your shadow volumes to mask out

00:21:01.210 --> 00:21:03.760
the diffuse and speculating effects.

00:21:03.830 --> 00:21:05.870
This will slow your rendering down.

00:21:07.780 --> 00:21:09.250
Or you can do what I do.

00:21:09.320 --> 00:21:13.220
Just render your shadow volume again into
the color buffer using alpha blending.

00:21:13.220 --> 00:21:14.790
I'll show you that now.

00:21:22.130 --> 00:21:25.880
Here we have a sphere
inside a shadow volume.

00:21:25.880 --> 00:21:27.950
I'll show you the shadow volume.

00:21:31.980 --> 00:21:36.000
As you might be able to see,
the shadow volume fully encompasses

00:21:36.000 --> 00:21:38.900
both the sphere and the ground plane.

00:21:38.900 --> 00:21:40.900
This produces the shadow effect.

00:21:40.900 --> 00:21:45.150
I can move the ball inside
and out of the sphere.

00:21:45.150 --> 00:21:48.730
Here you can see the shadow
effect of the sphere.

00:21:55.410 --> 00:22:00.350
If I disable the depth test,
the stencil test, like this,

00:22:00.360 --> 00:22:03.460
you can see how I render
the shadow volume.

00:22:13.640 --> 00:22:17.790
This shot of all I'm using
an 85% opaque alpha blend.

00:22:17.790 --> 00:22:20.500
So you can see the specular
and diffuse lighting.

00:22:20.600 --> 00:22:25.200
If I use 50% opaque opacity,
here you can see the effect

00:22:25.200 --> 00:22:26.600
is much more noticeable.

00:22:26.600 --> 00:22:30.350
But if you use 85%, it's not too bad.

00:22:50.250 --> 00:22:54.190
Finally, let's look at the 2Pass
operation in more detail.

00:22:54.300 --> 00:22:58.190
First, I'll show you the back planes.

00:22:58.260 --> 00:23:02.200
The green corresponds to the
back planes of the shadow volume.

00:23:02.200 --> 00:23:06.960
Here are the front planes.

00:23:13.780 --> 00:23:15.700
by rendering both the
backend front planes.

00:23:15.700 --> 00:23:23.290
You can see the cyan is where the
backend front planes are both rendered.

00:23:26.940 --> 00:23:28.850
The blue region is where
the front plane is rendered,

00:23:28.850 --> 00:23:31.960
but not the back plane.

00:23:31.990 --> 00:23:35.340
And you can see this blue region
corresponds to the shadow area.

00:23:49.920 --> 00:23:51.400
Should I do this for a half
hour or should I continue?

00:23:51.400 --> 00:23:59.290
I guess-- So in summary,
you saw how you can use shadow

00:23:59.290 --> 00:24:02.420
volumes in Stencil Buffer
to-- Animal-to-Pass Effect to

00:24:02.420 --> 00:24:03.780
create your shadow effect.

00:24:06.500 --> 00:24:10.900
This will require both using a
sense buffer and a depth buffer.

00:24:10.960 --> 00:24:14.810
And it's simple for my simple case,
but using it in a real scene may

00:24:14.810 --> 00:24:17.270
be more complex than I presented.

00:24:17.380 --> 00:24:21.570
So you may have to optimize both
your creation of your shadow volume

00:24:21.610 --> 00:24:24.250
and the fill rate and filling it.