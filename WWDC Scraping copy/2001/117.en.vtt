WEBVTT

00:00:01.000 --> 00:00:02.230
Good morning everyone.

00:00:02.490 --> 00:00:03.300
I'm Travis Brown.

00:00:03.300 --> 00:00:05.960
I'm the Imaging Technology Manager for
Mac OS X and I want to

00:00:05.960 --> 00:00:09.880
welcome you to session 117,
Image Capture Framework.

00:00:09.980 --> 00:00:13.330
You've already seen Image Capture
demonstrated on the keynote where

00:00:13.330 --> 00:00:19.230
you can take a USB digital camera,
plug it into a USB cable and

00:00:19.230 --> 00:00:23.630
Mac OS X will recognize that a camera
has been plugged in and will then

00:00:23.700 --> 00:00:27.500
bring up a very lightweight image
browser to enable the user to select

00:00:27.510 --> 00:00:29.890
which pictures they wish to download.

00:00:29.900 --> 00:00:32.350
There's another dimension
to Image Capture and that is

00:00:32.350 --> 00:00:33.900
the Image Capture Framework.

00:00:33.900 --> 00:00:38.480
Underneath Image Capture there is
a set of APIs that developers can

00:00:38.620 --> 00:00:42.900
use to make their applications
savvy with digital cameras.

00:00:42.900 --> 00:00:47.830
So therefore you can easily take
an application such as a database

00:00:47.850 --> 00:00:52.100
application where you might
want to give a field that could

00:00:52.110 --> 00:00:55.370
essentially capture a camera,
an image off a digital camera

00:00:55.370 --> 00:00:56.900
and put that in a database.

00:00:56.900 --> 00:00:58.900
That would be possible to
do using the framework.

00:00:58.900 --> 00:01:04.300
So there's all sorts of very interesting
possibilities for applications to

00:01:04.300 --> 00:01:09.900
create new features for their users
in conjunction with digital cameras.

00:01:12.670 --> 00:01:15.540
One of the real interesting points is
I want to point to some statistics is

00:01:15.770 --> 00:01:18.420
the digital camera market is exploding.

00:01:18.420 --> 00:01:22.820
It's one of the fastest growing
computer peripherals available.

00:01:22.820 --> 00:01:29.330
You have an interesting statistic is
that eventually that digital cameras will

00:01:29.330 --> 00:01:32.980
fairly soon surpass that of film cameras.

00:01:33.000 --> 00:01:36.940
So in terms of the way users
will interact with photography

00:01:36.940 --> 00:01:39.690
and images in the future,
it will very much be

00:01:39.700 --> 00:01:41.170
driven by digital cameras.

00:01:41.280 --> 00:01:44.470
So it really makes sense for your
applications to become aware of how to

00:01:44.560 --> 00:01:46.620
work with digital cameras and add value.

00:01:48.480 --> 00:01:51.020
An additional interesting point
that was brought up in the

00:01:51.020 --> 00:01:55.240
keynote is that of Mac users,
60% of them have digital cameras.

00:01:55.240 --> 00:01:58.060
And they would really love to have
a seamless integration of their

00:01:58.100 --> 00:02:00.140
applications with their digital cameras.

00:02:00.140 --> 00:02:03.920
So now I'd like to invite Steve Swen
on stage to continue the presentation.

00:02:13.180 --> 00:02:15.350
Thank you, Travis.

00:02:15.350 --> 00:02:17.180
Good morning.

00:02:17.260 --> 00:02:20.590
Before we start talking about
image capture for Mac OS X,

00:02:20.620 --> 00:02:24.100
let's review the current
situation on Mac OS 9.

00:02:24.200 --> 00:02:29.580
As you know, Mac OS 9 has no system-level
input architecture implemented.

00:02:29.730 --> 00:02:34.270
So all the major device manufacturers
have to do is shipping custom

00:02:34.270 --> 00:02:39.520
applications and drivers and
sometimes Photoshop plug-in.

00:02:40.830 --> 00:02:44.390
Applications will have a hard
time working with devices because

00:02:44.390 --> 00:02:48.920
doing so requires knowledge
of device level communication.

00:02:48.920 --> 00:02:52.320
That means you have to know
how to talk to each individual

00:02:52.320 --> 00:02:54.520
device using a device protocol.

00:02:56.620 --> 00:03:00.410
So Image Capture for MICOS 10,
what we're trying to do here is

00:03:00.530 --> 00:03:03.980
provide a device level abstraction.

00:03:04.100 --> 00:03:09.260
So that would enable the applications
and the device communicate through

00:03:09.260 --> 00:03:12.240
this abstraction layer very easily.

00:03:12.690 --> 00:03:17.710
It's a collection of APIs and
set of system services.

00:03:17.940 --> 00:03:21.850
Like I said before,
it enables application easy access to

00:03:21.850 --> 00:03:25.380
imaging devices such as digital camera.

00:03:27.500 --> 00:03:32.740
We also provide very tight system level
integration to take advantage of other

00:03:32.830 --> 00:03:39.810
Apple technologies such as QuickTime,
ColorSync, and Quartz.

00:03:42.310 --> 00:03:46.040
Here's a block diagram view
of Image Capture Framework.

00:03:46.130 --> 00:03:50.440
So you see the bottom layer, Darwin,
is the open source kernel.

00:03:50.500 --> 00:03:54.540
Right on top of it is
the application service,

00:03:54.560 --> 00:03:57.430
Quartz, OpenGL, and QuickTime.

00:03:58.780 --> 00:04:02.080
Image Capture Framework
is part of Carbon Library.

00:04:02.340 --> 00:04:05.360
However,
you can access Image Capture directly

00:04:05.360 --> 00:04:10.090
from either Carbon applications
or Cocoa applications.

00:04:15.040 --> 00:04:18.340
There are three major components
in Image Capture Framework.

00:04:18.460 --> 00:04:23.130
The first one, the most critical one,
is the framework itself, its set of APIs.

00:04:23.230 --> 00:04:27.420
We have a high-level API for
applications to use and also

00:04:27.490 --> 00:04:30.000
a low-level API for devices.

00:04:30.690 --> 00:04:34.010
We also ship with built-in,
a set of built-in support for

00:04:34.010 --> 00:04:35.710
cameras using standard protocols.

00:04:35.800 --> 00:04:38.660
I'll get to it later.

00:04:39.230 --> 00:04:43.070
We also ship Image Capture application,
which is a lightweight application

00:04:43.150 --> 00:04:47.930
to allow users to preview and
download images from camera.

00:04:50.280 --> 00:04:53.800
Here is another view of
Image Capture Framework.

00:04:53.870 --> 00:04:57.500
You see on the left hand side,
you have your camera.

00:04:57.560 --> 00:05:00.720
Once you connect the
camera to the computer,

00:05:01.080 --> 00:05:06.140
Image Capture will load the right
camera module for that device.

00:05:06.140 --> 00:05:10.080
And then your application and
Image Capture application can

00:05:10.120 --> 00:05:15.880
communicate with this camera to this
device abstraction layer and using

00:05:15.880 --> 00:05:18.980
the Image Capture Framework APIs.

00:05:22.270 --> 00:05:27.700
So we have built-in camera support
for four different classes of devices.

00:05:27.960 --> 00:05:33.920
The first three are camera devices that
use protocols and so you can connect

00:05:33.920 --> 00:05:36.640
the camera directly to the computer.

00:05:36.830 --> 00:05:42.080
They use PDP class, digital class,
and mass storage class.

00:05:42.260 --> 00:05:45.710
We also support a number
of removable media.

00:05:48.120 --> 00:05:50.070
PDP class.

00:05:50.070 --> 00:05:53.300
PDP stands for Picture Transfer Protocol.

00:05:53.320 --> 00:05:56.340
It's also known as PEMA 15740.

00:05:56.400 --> 00:05:59.140
PEMA is the standard organization
to find the standard.

00:05:59.140 --> 00:06:06.070
It's an industry standard group and
including platform vendors like Apple,

00:06:06.070 --> 00:06:11.770
Microsoft, and device manufacturers
such as Kodak and Sony.

00:06:13.270 --> 00:06:18.530
This protocol enables full
control of camera functions.

00:06:18.700 --> 00:06:24.450
So you can set the camera exposure
level and you can take a picture,

00:06:24.600 --> 00:06:27.810
you can retrieve picture,
you can synchronize clock,

00:06:27.810 --> 00:06:29.920
or even you can download music files.

00:06:30.000 --> 00:06:32.990
It's a very powerful protocol.

00:06:34.120 --> 00:06:37.140
It is transport independent.

00:06:37.310 --> 00:06:44.840
The USB working group has defined
the class for the PDP device already.

00:06:44.920 --> 00:06:48.860
And Mac OS X 10.0,
our first implementation,

00:06:49.010 --> 00:06:53.780
supports a set of PDP commands that
would enable you to do "plug and

00:06:53.950 --> 00:06:57.890
join operations." Typically you
go out and take a whole bunch of

00:06:57.890 --> 00:07:01.680
pictures and you come back and plug
your camera into the computer and we

00:07:01.680 --> 00:07:03.600
can download all the images for you.

00:07:05.760 --> 00:07:09.560
Recent cameras from Kodak and
Sony support this protocol.

00:07:09.560 --> 00:07:15.140
So if you want to get experience how
this camera PDP protocol works for you or

00:07:15.140 --> 00:07:19.710
you want to test with your application,
you can get one of those Kodak

00:07:19.780 --> 00:07:25.410
cameras like 4800 or MC3 or Sony S75.

00:07:25.410 --> 00:07:27.110
They are on the market today.

00:07:30.440 --> 00:07:33.400
The second class is DIGTA class.

00:07:33.690 --> 00:07:38.390
This is a vendor-specific
protocol by Flashpoint Technology.

00:07:39.390 --> 00:07:43.640
Some Kodak HP cameras
using this protocol.

00:07:43.740 --> 00:07:48.050
Since it's a vendor-specific protocol,
we rely on the device name

00:07:48.050 --> 00:07:51.410
matching to load the proper
module to support your camera.

00:07:51.420 --> 00:07:55.260
So if your camera uses this protocol,
let us know so we can

00:07:55.260 --> 00:07:57.140
add it into our database.

00:08:01.840 --> 00:08:03.690
Third class is mass storage.

00:08:03.800 --> 00:08:07.710
This is the most commonly used protocol.

00:08:07.890 --> 00:08:11.710
It basically mounts the camera to
storage devices as a MS-DOS file

00:08:11.840 --> 00:08:13.840
system on your desktop.

00:08:13.840 --> 00:08:20.060
So the advantage of doing this,
it's pretty simple, easy to implement,

00:08:20.060 --> 00:08:24.280
and it's a familiar
concept for users to use.

00:08:24.400 --> 00:08:29.400
However, the disadvantage of that is it's
really a limited interface to a camera

00:08:29.400 --> 00:08:33.860
because the only way to control that
is through file system commands.

00:08:34.450 --> 00:08:39.430
So you cannot really get and
set camera-specific properties.

00:08:43.850 --> 00:08:48.740
There's a number of removable
media we can support as well.

00:08:48.930 --> 00:08:53.540
Compact flash, smart media, memory stick,
micro drive,

00:08:53.660 --> 00:08:58.580
and the good old floppy disk, super disk,
recordable CD.

00:08:58.780 --> 00:09:03.710
This is a good way to get your image
into the computer if your camera is not

00:09:03.710 --> 00:09:10.320
USB equipped or your camera protocol
is currently not supported by MICOS 10.

00:09:11.290 --> 00:09:15.190
As long as you can take your
storage device and find a

00:09:15.250 --> 00:09:20.750
card reader and plug it in,
and as long as you can mount your

00:09:20.850 --> 00:09:23.720
storage device on the file system,
we can read it.

00:09:30.190 --> 00:09:35.500
Although the storage device
approach is easy to implement,

00:09:35.500 --> 00:09:38.250
but since we cannot
treat it like a camera,

00:09:38.250 --> 00:09:43.090
so we cannot ask the camera
where you store your files and

00:09:43.220 --> 00:09:46.690
are you a camera device or not,
so we rely on a few hints.

00:09:47.190 --> 00:09:52.300
First of all, the device has to mount
its MS-DOS file system.

00:09:52.700 --> 00:09:55.570
And then we search for,
does it have a standard

00:09:55.570 --> 00:09:56.950
DCF file structure?

00:09:57.020 --> 00:09:59.970
DCF stands for
Digital Camera File Format,

00:09:59.980 --> 00:10:03.280
which is defined by the
standard organization.

00:10:05.000 --> 00:10:08.730
If we cannot find any of
this stuff and we look for,

00:10:08.770 --> 00:10:15.530
is this one of the non-standard file
structure we stored in our own database,

00:10:15.650 --> 00:10:16.670
so we try to match that.

00:10:16.760 --> 00:10:20.550
So if you have a file structure
which is not standard,

00:10:20.900 --> 00:10:25.790
not using MS-DOS file system
or DCF file structure,

00:10:26.010 --> 00:10:29.460
or even if you do use a
standard file structure,

00:10:29.460 --> 00:10:33.420
but if you store the images
outside the DCIM folder,

00:10:33.420 --> 00:10:37.460
which is by default the
folder stores still images.

00:10:37.680 --> 00:10:42.600
However, if you have movies and sound
files stored in other folders,

00:10:42.720 --> 00:10:46.860
please let us know so we can make
sure we search through your folder.

00:10:49.980 --> 00:10:55.460
And again, unlike PDB camera,
we cannot ask the camera for image

00:10:55.460 --> 00:10:59.390
files and sound files and audio files,
video files.

00:10:59.640 --> 00:11:05.190
So we rely on some standard file
formats that we recognize to download.

00:11:05.360 --> 00:11:09.650
Currently,
mass storage interface will support JPEG,

00:11:09.810 --> 00:11:13.260
TIFF, and GIF for still image formats.

00:11:13.300 --> 00:11:16.660
Video format will support QuickTime,
MPAC,

00:11:16.680 --> 00:11:19.420
and audio file format will support MP3.

00:11:19.440 --> 00:11:21.480
Again, if you

00:11:21.710 --> 00:11:25.200
If you store files,
the file type not on the list,

00:11:25.270 --> 00:11:27.710
but it's important to
your camera function,

00:11:27.740 --> 00:11:30.310
please let us know so we can
include it in the download.

00:11:34.120 --> 00:11:37.500
So if you're a camera vendor,
there's three things to remember.

00:11:37.600 --> 00:11:41.000
First of all, use standard protocols.

00:11:41.110 --> 00:11:45.270
PDP or mass storage,
both excellent choice.

00:11:45.270 --> 00:11:48.020
You don't have to worry
about getting the driver,

00:11:48.020 --> 00:11:50.570
getting the support, installing software.

00:11:50.570 --> 00:11:52.490
User experience will be great.

00:11:52.990 --> 00:11:54.660
Second one is also very important.

00:11:54.720 --> 00:11:59.060
Send your prototypes to us
to ensure compatibility.

00:11:59.060 --> 00:12:00.650
It's very important.

00:12:03.820 --> 00:12:08.940
Send early, send often,
send multiple copies.

00:12:08.950 --> 00:12:11.310
Engineers can be bribed.

00:12:12.660 --> 00:12:15.100
And the last one,
if you have a custom file

00:12:15.180 --> 00:12:20.790
structure or a file system,
make sure you send us the file structure

00:12:20.930 --> 00:12:25.140
map so we can include it in our database.

00:12:27.840 --> 00:12:32.830
Third part of Image Capture Framework
is Image Capture Application.

00:12:32.830 --> 00:12:37.050
This is a lightweight application
to allow users to browse and

00:12:37.050 --> 00:12:40.240
download images from camera devices.

00:12:40.530 --> 00:12:45.530
And also, you can define a set of hot
plug actions and automatic tasks

00:12:45.960 --> 00:12:48.970
to customize your workflow.

00:12:49.400 --> 00:12:53.100
We also ship a number of scripts
to allow the user to do common

00:12:53.200 --> 00:12:55.950
tasks such as build web page.

00:12:57.780 --> 00:13:00.520
Here's the UI for
Image Capture application.

00:13:00.560 --> 00:13:01.800
The top part is camera.

00:13:02.040 --> 00:13:05.740
It shows you what camera device
you have currently connected.

00:13:05.780 --> 00:13:09.980
You can have multiple cameras
connected at the same time.

00:13:10.440 --> 00:13:15.800
The middle part defines hot plug
actions and automatic tasks.

00:13:16.330 --> 00:13:21.700
And the last part is you specify where
you want to download your files to.

00:13:24.000 --> 00:13:29.760
One thing about download synchronization,
camera devices are increasing in

00:13:29.990 --> 00:13:32.300
resolution at an amazing rate.

00:13:32.380 --> 00:13:39.640
And you can find cameras with 3, 4, 5,
even 6 megapixels on the market today.

00:13:39.730 --> 00:13:43.990
So you can imagine the file size
is getting bigger and bigger.

00:13:44.710 --> 00:13:49.820
So we try to avoid unnecessary
downloads by relying on a

00:13:49.880 --> 00:13:52.200
couple of things for MICOS 10.

00:13:52.300 --> 00:13:54.520
First of all, we use file name.

00:13:54.570 --> 00:13:58.450
And if we find the camera
file you tried to download,

00:13:58.450 --> 00:14:02.670
and you have identical file name
in the download folder already,

00:14:02.680 --> 00:14:06.920
and those are the size of these
two files in the camera and in

00:14:06.920 --> 00:14:11.280
the download folder are identical,
we will skip that.

00:14:12.170 --> 00:14:15.710
In the future,
we will use the capture date

00:14:16.190 --> 00:14:20.050
in addition to file name,
stored in metadata to

00:14:20.100 --> 00:14:21.700
do the synchronization.

00:14:21.830 --> 00:14:25.820
So if you're application developers,
make sure you try to

00:14:26.030 --> 00:14:30.040
preserve the metadata,
don't strip it out.

00:14:30.130 --> 00:14:33.370
And if you're camera vendors,
because the serial number,

00:14:33.570 --> 00:14:36.100
the picture serial number
is part of the file name,

00:14:36.190 --> 00:14:39.590
so make sure you don't recycle
the numbers until you run

00:14:39.590 --> 00:14:41.530
out of all the combination.

00:14:45.010 --> 00:14:45.940
Hot Plug Actions.

00:14:46.080 --> 00:14:49.960
Hot Plug Action is defined to
be when you connect your camera,

00:14:49.980 --> 00:14:51.740
what do you want to see happen?

00:14:51.830 --> 00:14:53.900
There are three possibilities here.

00:14:54.040 --> 00:14:56.900
The first one is when
you plug in the camera,

00:14:56.900 --> 00:15:00.080
we open the Image Capture
application for you.

00:15:00.090 --> 00:15:02.760
So you will see the same
UI I showed you earlier.

00:15:02.760 --> 00:15:07.790
The user can browse and download
and select images to download.

00:15:07.790 --> 00:15:10.430
That's the default behavior.

00:15:11.760 --> 00:15:16.380
or you can select
automatically download all.

00:15:17.230 --> 00:15:20.270
The advantage of doing that is
you can automate the system.

00:15:20.270 --> 00:15:23.010
When you plug in the camera,
there's no UI will come up.

00:15:23.100 --> 00:15:27.690
All the files on the camera would
be transferred to the specified

00:15:27.690 --> 00:15:30.090
download folder automatically.

00:15:30.490 --> 00:15:36.840
And if you specify an automated task,
and that one will get invoked and all

00:15:36.840 --> 00:15:42.490
the downloaded files will be passed to
that application to do post-processing.

00:15:46.130 --> 00:15:50.000
One thing to point out is even
if you select the default,

00:15:50.010 --> 00:15:55.620
you can come up with a UI and you can
select which files you want to download.

00:15:55.620 --> 00:16:00.730
And you can also specify the
post-processing automatic task.

00:16:00.860 --> 00:16:04.960
And after downloading,
it will call that automatic task as well.

00:16:04.960 --> 00:16:08.640
So the third action you
can specify is none.

00:16:08.640 --> 00:16:11.320
Basically,
there's nothing on Mac OS X 10.0,

00:16:11.390 --> 00:16:12.460
the first release.

00:16:13.140 --> 00:16:18.580
The idea here is the user may want
to use his own favorite applications

00:16:18.580 --> 00:16:21.050
to handle this camera plug-in event.

00:16:21.060 --> 00:16:27.570
So we will not invoke the Image Capture
application if you select this one.

00:16:27.580 --> 00:16:31.280
And in the future,
we want to make this more useful.

00:16:31.280 --> 00:16:34.020
You can actually select an
application on the launch when

00:16:34.020 --> 00:16:35.360
the hot plug event happens.

00:16:35.360 --> 00:16:37.630
And we call that application for you.

00:16:41.610 --> 00:16:45.600
Automatic task, like I said before,
this is a post-processing.

00:16:45.720 --> 00:16:50.190
After you've downloaded your images,
you specify this automatic

00:16:50.200 --> 00:16:54.610
task and we will call it after
we download all the images.

00:16:54.760 --> 00:16:58.880
They can be Apple scripts, applications,
or aliases.

00:16:58.990 --> 00:17:02.710
Currently,
you have to store these things in

00:17:02.710 --> 00:17:07.640
the Library Image Capture Scripts
folder so we can pick it up in the

00:17:07.640 --> 00:17:10.700
UI we show you which one to select.

00:17:10.700 --> 00:17:14.580
In the future,
we're going to put it into a

00:17:14.860 --> 00:17:17.140
preference so you can select it.

00:17:17.140 --> 00:17:20.680
You don't have to put it into
this location to get picked up.

00:17:21.810 --> 00:17:27.010
So one advantage of automatic
task is even though today

00:17:27.290 --> 00:17:33.440
Not too many applications
are image capture savvy.

00:17:33.480 --> 00:17:35.880
When I say that, it's really,
they don't really have

00:17:35.970 --> 00:17:40.320
the API calling API,
calling the image capture API to do

00:17:40.320 --> 00:17:45.980
the stuff like getting the pictures
downloaded or sending the pictures,

00:17:45.980 --> 00:17:47.750
do all this stuff.

00:17:48.010 --> 00:17:52.170
But however,
if your application can receive an open

00:17:52.170 --> 00:17:57.300
event with all these files passed in,
and you are benefiting from

00:17:57.300 --> 00:18:01.190
Image Capture Framework already,
because in that scenario,

00:18:01.200 --> 00:18:06.110
the user can select your application
as post-processing event.

00:18:08.460 --> 00:18:11.220
Future directions for
image capture application.

00:18:11.250 --> 00:18:13.860
There are a few areas we try to improve.

00:18:13.880 --> 00:18:16.480
One is metadata browser.

00:18:16.550 --> 00:18:19.440
Metadata is the per image information

00:18:21.020 --> 00:18:25.980
Such things as exposure level,
your color space, your creation date,

00:18:26.000 --> 00:18:30.080
the size, resolution,
and all this good stuff.

00:18:30.080 --> 00:18:36.720
And it helps the application to use
the metadata down the stream to do

00:18:36.720 --> 00:18:39.700
better image management and processing.

00:18:42.500 --> 00:18:48.030
We also want to improve in the browser,
you can do per image

00:18:48.030 --> 00:18:50.070
rotation and deletion.

00:18:50.200 --> 00:18:53.340
Instead of using a script,
you can actually rotate it into

00:18:53.340 --> 00:18:56.810
place and delete without downloading.

00:18:57.540 --> 00:18:59.910
Third part is we're going
to add a preference panel.

00:19:00.070 --> 00:19:04.290
Preference panel would
allow you to select,

00:19:04.290 --> 00:19:08.350
like I said before,
which application you want to see get

00:19:08.400 --> 00:19:11.290
launched when you plug in the camera.

00:19:11.290 --> 00:19:16.720
And also you can specify what
are the automatic tasks you want

00:19:16.720 --> 00:19:19.920
to see in your user pop-up menu.

00:19:22.650 --> 00:19:26.660
A couple words on scanner
support for Mac OS X.

00:19:26.690 --> 00:19:30.640
Image Capture will support
scanner devices in the future.

00:19:30.670 --> 00:19:32.320
However,

00:19:32.620 --> 00:19:36.030
Make sure you port your scanner
to MicroStand today instead

00:19:36.030 --> 00:19:38.190
of waiting for image capture.

00:19:39.110 --> 00:19:40.400
Couple easy ways to do that.

00:19:40.570 --> 00:19:42.900
First of all,
you can port your Mac OS 9 scanner

00:19:42.900 --> 00:19:46.140
application to Carbon or to Mac OS X.

00:19:46.140 --> 00:19:50.440
That's probably the least
effort involved in some cases.

00:19:50.440 --> 00:19:54.200
Or you can support your scanner
device using Twain interface.

00:19:54.200 --> 00:20:00.250
And just yesterday we had this Twain
announcement that Twain organization

00:20:00.450 --> 00:20:03.280
is porting Twain DSM to Mac OS X.

00:20:03.280 --> 00:20:06.920
So if you like to use
the Twain interface,

00:20:07.330 --> 00:20:12.320
you can write a Twain DS for
your scanner device and shipping

00:20:12.320 --> 00:20:14.440
that for Mac OS X for now.

00:20:14.440 --> 00:20:19.650
And we will figure out a way to reach the
back-end compatibility once we support

00:20:19.660 --> 00:20:22.730
scanner device in image capture natively.

00:20:25.990 --> 00:20:29.240
So although I know that you guys
probably seen the Image Capture

00:20:29.240 --> 00:20:32.380
demo many times this week,
but hopefully we show

00:20:32.380 --> 00:20:33.850
you something different.

00:20:33.880 --> 00:20:37.850
I want to introduce my colleague,
John Nagy,

00:20:37.850 --> 00:20:41.920
and to come up here to give you a
tour of Image Capture and a couple

00:20:41.920 --> 00:20:44.130
special things we did for you.

00:20:49.680 --> 00:20:50.430
Okay, thanks Steve.

00:20:50.440 --> 00:20:51.560
I'm John Nagy.

00:20:51.560 --> 00:20:54.060
I'm one of the image capture engineers.

00:20:54.080 --> 00:20:56.950
And I'm going to give you a
demo of how image capture works,

00:20:56.950 --> 00:20:59.130
kind of from a user standpoint.

00:20:59.640 --> 00:21:00.600
There you go.

00:21:00.730 --> 00:21:03.540
Does this still work?

00:21:03.540 --> 00:21:04.600
This one turned on?

00:21:04.600 --> 00:21:04.960
Okay.

00:21:04.960 --> 00:21:07.360
I'm going to give you a demo of
how Image Capture works from a

00:21:07.360 --> 00:21:11.350
user standpoint and then sort
of along the way show you where,

00:21:11.350 --> 00:21:14.640
as a developer,
you can write applications that fit in

00:21:14.650 --> 00:21:17.190
at kind of one of two different places.

00:21:18.140 --> 00:21:21.680
So, Image Capture is all
about connecting devices,

00:21:21.680 --> 00:21:24.560
so I've got a camera here.

00:21:25.540 --> 00:21:31.150
And I'm going to put it in
PC connect mode and plug it in.

00:21:39.930 --> 00:21:44.270
So you see the Image Capture app
just launched by itself here.

00:21:44.270 --> 00:21:48.290
And like Steve was saying,
the reason it did that is because it's

00:21:48.290 --> 00:21:52.800
set to open Image Capture application
on the hot plug when it's plugged in.

00:21:52.820 --> 00:21:55.300
So you can think of these hot
plug actions as what happens

00:21:55.300 --> 00:21:56.820
when the camera is connected.

00:21:56.820 --> 00:22:01.560
You can also think of them as how to
select which files you want to download.

00:22:02.940 --> 00:22:06.840
If you have the application open up,
then the user can either download

00:22:06.840 --> 00:22:10.960
some of them or download all of them
with a UI for setting preferences.

00:22:10.960 --> 00:22:12.920
Download all, there's no UI.

00:22:12.920 --> 00:22:14.340
The app doesn't come up.

00:22:14.740 --> 00:22:18.710
All you see is a little progress
bar with icons and the file name.

00:22:18.720 --> 00:22:21.100
And the images are downloaded.

00:22:21.100 --> 00:22:22.450
Or none, nothing happens.

00:22:22.450 --> 00:22:24.360
Connect the camera, nothing happens.

00:22:24.400 --> 00:22:32.360
So again, from a developer standpoint,
this app, Image Capture application,

00:22:32.940 --> 00:22:36.970
you could, if you wanted to,
write an app that did something that

00:22:37.160 --> 00:22:39.340
would take the place of this application.

00:22:39.360 --> 00:22:44.280
That's kind of the lowest level to get in
there and do something with the images.

00:22:44.280 --> 00:22:47.410
You can use the API to get
notifications of when the camera is

00:22:47.490 --> 00:22:51.320
connected and then bring up your own
UI that did whatever you wanted to.

00:22:51.320 --> 00:22:53.910
So that's the first place
to kind of slide in here.

00:22:55.790 --> 00:22:56.540
So hot plug action.

00:22:56.540 --> 00:22:58.980
See at the top here, there's a,
as far as the application

00:22:59.140 --> 00:23:00.860
that we did to do this.

00:23:01.080 --> 00:23:03.880
You've got a pop-up of
the different devices.

00:23:04.110 --> 00:23:05.820
If you had multiple devices,
you could pick which one

00:23:05.820 --> 00:23:08.060
you wanted to download from.

00:23:08.110 --> 00:23:12.060
Download folders.

00:23:12.100 --> 00:23:14.250
On Mac OS X,

00:23:15.000 --> 00:23:18.180
Go ahead and show you,
in case you don't have Mac OS X.

00:23:18.260 --> 00:23:20.100
But you should.

00:23:20.130 --> 00:23:22.570
In every user's home directory,

00:23:23.900 --> 00:23:27.620
There's a pictures folder, music folder,
and a movies folder.

00:23:27.620 --> 00:23:32.110
So that's just there by default.

00:23:32.530 --> 00:23:36.690
Although it's called Image Capture,
some devices also, like Steve said,

00:23:36.920 --> 00:23:39.800
can take pictures or store MP3s.

00:23:39.910 --> 00:23:43.550
So when the Image Capture
app downloads these files,

00:23:43.590 --> 00:23:46.490
it'll sort each file
type in the right folder.

00:23:46.500 --> 00:23:49.600
So pictures go in the Pictures folder,
movies go in the Movies folder,

00:23:49.600 --> 00:23:51.500
and MP3s in the Music folder.

00:23:51.610 --> 00:23:54.090
So that's what that radio button means.

00:23:54.240 --> 00:23:58.170
User can also select some other
folder by clicking this button

00:23:58.170 --> 00:23:59.640
and picking a different folder.

00:23:59.640 --> 00:24:02.880
So hot plug actions is
which files to download.

00:24:02.880 --> 00:24:04.600
Download folders is where they go.

00:24:04.600 --> 00:24:07.630
And automatic task is what
you want to do with the files

00:24:07.630 --> 00:24:09.750
after they've been downloaded.

00:24:09.760 --> 00:24:11.400
This is pretty straightforward.

00:24:11.400 --> 00:24:13.820
It's basically any app that
you can drag files onto.

00:24:13.900 --> 00:24:18.370
So, you know,
you could drag an alias to Photoshop,

00:24:18.490 --> 00:24:20.300
put it in this list.

00:24:20.340 --> 00:24:23.180
After the images are downloaded,
they all open up in Photoshop.

00:24:24.100 --> 00:24:27.380
Or you can have something more complex
that was really designed to open

00:24:27.380 --> 00:24:29.730
multiple images at the same time.

00:24:31.380 --> 00:24:37.660
So we shipped a bunch of apps
that the user can choose from.

00:24:37.730 --> 00:24:41.860
These are all Apple scripts that
have been saved as applications.

00:24:42.210 --> 00:24:46.430
But you could put any kind of
application that accepts multiple files

00:24:46.430 --> 00:24:48.780
being dragged onto it in this list.

00:24:48.900 --> 00:24:52.760
But for now,
I'm going to choose the format 3 by 5.

00:24:54.010 --> 00:24:57.890
And it's going to build a series
of web pages with images all

00:24:58.950 --> 00:25:01.870
scaled down and sized to fit,
laid out on a page so

00:25:01.870 --> 00:25:03.290
you can print them out.

00:25:04.220 --> 00:25:08.040
I'm going to download some and pick
which ones I want to print out here.

00:25:11.090 --> 00:25:11.840
There's two views.

00:25:11.840 --> 00:25:14.680
There's an icon view like this,
and there's a list view that gives

00:25:14.680 --> 00:25:15.510
you a little more information.

00:25:15.590 --> 00:25:19.460
Probably in the future we'll have
more of the EXIF data over here,

00:25:19.460 --> 00:25:21.110
but for now it's just
image and file size.

00:25:21.120 --> 00:25:26.980
So I'm going to pick four of these here.

00:25:27.000 --> 00:25:28.270
Image Capture Drive

00:25:35.380 --> 00:25:41.690
Actually, you know,
let me open up the pictures folder.

00:25:49.530 --> 00:25:55.000
Just so you can see him show up.

00:25:55.090 --> 00:25:58.900
So you get the icon, file name,
progress bar.

00:26:00.450 --> 00:26:03.220
Now once they finish downloading,
it's going to launch this

00:26:03.600 --> 00:26:05.760
AppleScript application.

00:26:06.010 --> 00:26:09.790
And the app is going to go through with
each image and figure out if it's wider

00:26:09.790 --> 00:26:14.740
than it is tall or taller than it is wide
and then sort it in the various pages.

00:26:14.860 --> 00:26:17.260
It generates these web pages here.

00:26:17.450 --> 00:26:22.000
So you can open this up in Explorer.

00:26:22.000 --> 00:26:25.990
Let me turn off some of
these extra bars here.

00:26:35.560 --> 00:26:38.250
So you can think of this as
being just a sheet of paper.

00:26:38.390 --> 00:26:42.810
I picked four because you can fit
four 3x5s on a single sheet of paper.

00:26:42.990 --> 00:26:47.290
If I'd selected six images,
there would be four on this page

00:26:47.450 --> 00:26:51.430
and then two on another page,
so you just print on each one.

00:26:53.780 --> 00:26:56.030
Explorer is really nice because
they have kind of a nice print

00:26:56.030 --> 00:26:59.130
preview set up where you can...

00:26:59.450 --> 00:27:03.620
Adjust the settings so you
print at the full size.

00:27:03.790 --> 00:27:08.250
Turn off headers and footers
and turn on print wide pages.

00:27:08.400 --> 00:27:11.280
Make sure the printer is turned on.

00:27:11.400 --> 00:27:15.380
Nice glossy paper.

00:27:22.750 --> 00:27:24.940
So I'm using photo paper,
so I'm going to go in here

00:27:24.940 --> 00:27:30.480
and set that so it looks nice.

00:27:30.480 --> 00:27:31.900
Photo

00:27:34.800 --> 00:27:35.830
hit print.

00:27:35.870 --> 00:27:37.030
So that's it.

00:27:37.100 --> 00:27:41.970
Now what's nice about Explore
is that even though on screen it

00:27:41.970 --> 00:27:45.760
looks like they're pretty small,
it looks like 72 DPI,

00:27:45.760 --> 00:27:49.590
when it gets printed out it will
use the original image data.

00:27:49.640 --> 00:27:53.540
So you're not limited to 72 DPI,
it will use the full image size

00:27:53.540 --> 00:27:56.330
when it prints so you get nice,
high resolution photos.

00:27:59.020 --> 00:28:02.680
So that's an example of an
application that is designed to

00:28:02.710 --> 00:28:06.140
work with multiple files called
from the Image Capture application.

00:28:06.250 --> 00:28:09.400
And that's the second place that as a
developer you can write apps that go in.

00:28:09.400 --> 00:28:13.800
That's sort of the lighter weight,
maybe a little more user friendly,

00:28:13.870 --> 00:28:15.840
cohesive UI for users.

00:28:15.840 --> 00:28:19.740
It's to write an app that deals with
multiple files and have the user make an

00:28:19.740 --> 00:28:24.340
alias and put it in that scripts folder.

00:28:24.440 --> 00:28:27.820
So I'll show you how that works.

00:28:27.820 --> 00:28:27.820
The scripts folder

00:28:33.520 --> 00:28:39.290
is in Library Image Capture Scripts.

00:28:39.400 --> 00:28:42.390
Now those called scripts,
you can really think of it as, you know,

00:28:42.730 --> 00:28:43.290
applications.

00:28:43.290 --> 00:28:44.480
It doesn't have to be a script.

00:28:44.580 --> 00:28:47.390
It can be any kind of application.

00:28:52.140 --> 00:28:56.340
And you can add to this by just making
an alias and putting an alias in here.

00:28:56.380 --> 00:29:01.040
I've got this app called Add to
Database that Werner wrote as

00:29:01.120 --> 00:29:03.340
an example of what you might do.

00:29:03.400 --> 00:29:07.620
So I'm going to add an
alias to the scripts folder.

00:29:07.650 --> 00:29:10.780
And now when I launch Image Capture App,

00:29:22.040 --> 00:29:24.490
It shows up in the pop-up here.

00:29:24.490 --> 00:29:29.280
So I'm going to select that.

00:29:29.400 --> 00:29:32.710
And pick some more images.

00:29:33.920 --> 00:29:37.560
You see when the camera first,
when the app first launches,

00:29:37.560 --> 00:29:38.920
it gets all the file names first.

00:29:38.940 --> 00:29:41.310
And once it has all the file names,
it goes through and

00:29:41.310 --> 00:29:42.620
gets all the thumbnails.

00:29:42.620 --> 00:29:46.270
So the thumbnails are actually...

00:29:46.840 --> 00:29:49.790
It's not having to get the whole
image file and shrink it down.

00:29:49.800 --> 00:29:53.550
They're actually EXIF thumbnail
tag inside each image,

00:29:53.550 --> 00:29:56.860
so that's why it's pretty
quick to get the thumbnails.

00:29:57.050 --> 00:29:59.720
So I'm going to pick some images here.

00:30:05.700 --> 00:30:10.510
Say these eight.

00:30:10.510 --> 00:30:12.140
So again, it's going to download.

00:30:12.230 --> 00:30:16.620
So what this application does
is it works with FileMaker Pro,

00:30:16.620 --> 00:30:20.870
and it adds each file to
a FileMaker Pro database.

00:30:20.870 --> 00:30:27.220
And it extracts and puts in the database
the EXIF data that's in each image.

00:30:28.800 --> 00:30:32.500
Turns out that all the images,
all the cameras that we've used are

00:30:32.660 --> 00:30:36.590
really great because they put this
EXIF data in with the image file.

00:30:36.590 --> 00:30:39.300
As a user,
you might not even know what's in

00:30:39.300 --> 00:30:42.400
there because a lot of apps don't
really show the data in there.

00:30:42.400 --> 00:30:43.760
But there's all kinds
of good stuff in there.

00:30:43.990 --> 00:30:47.210
Whether the flash was turned on or not,
the exposure time,

00:30:47.290 --> 00:30:49.820
all kinds of really useful information.

00:30:49.820 --> 00:30:55.390
So this application puts
that all in a database.

00:30:56.790 --> 00:31:01.860
Once you have it in the database,
in FileMaker you can use different

00:31:01.860 --> 00:31:05.560
layouts to see as much or as
little information as you want.

00:31:05.650 --> 00:31:09.010
Here's one layout that just has
the pretty basic information:

00:31:09.090 --> 00:31:13.000
thumbnail, date,
what kind of camera it came from,

00:31:13.100 --> 00:31:17.090
the exposure,
and whether the flash was on or not.

00:31:17.150 --> 00:31:21.400
There's another layout here
that shows more information.

00:31:22.200 --> 00:31:43.200
[Transcript missing]

00:31:44.260 --> 00:31:47.710
So here's the page that got
printed out and of course you

00:31:47.710 --> 00:31:50.340
can't see it from back there,
but it looks pretty good.

00:31:56.940 --> 00:32:01.630
So a couple of other things that
are kind of nice about Mac OS X from

00:32:01.630 --> 00:32:05.110
an image capture standpoint is

00:32:05.310 --> 00:32:06.700
You can change the size of icons.

00:32:06.700 --> 00:32:08.340
You can make icons really big.

00:32:08.510 --> 00:32:11.200
So like this pictures folder here.

00:32:11.360 --> 00:32:13.580
If I put it in icon mode,

00:32:15.910 --> 00:32:19.530
Open this up and go to View Options.

00:32:19.580 --> 00:32:25.860
Say, keep range by name.

00:32:29.100 --> 00:32:31.000
I can turn this icon size up pretty high.

00:32:31.000 --> 00:32:33.150
And then just in the finder
you get a nice preview of

00:32:33.150 --> 00:32:34.460
what the image looks like.

00:32:34.480 --> 00:32:37.020
That's pretty convenient.

00:32:37.240 --> 00:32:41.630
And then the kind of second tip
about Image Capture is that you can

00:32:41.630 --> 00:32:44.620
customize the toolbar in Mac OS X.

00:32:45.500 --> 00:32:47.750
Do Customize Toolbar.

00:32:48.840 --> 00:32:54.130
And you can add, let's see where it is,
pictures.

00:32:54.530 --> 00:32:58.060
There are buttons for
your pictures folder,

00:32:58.060 --> 00:32:59.740
your movies folder,
and your music folder.

00:32:59.740 --> 00:33:02.300
So you can add that to the toolbar.

00:33:03.380 --> 00:33:05.610
And then no matter where you are,
by clicking the pictures,

00:33:05.610 --> 00:33:07.420
you can go right to your pictures folder.

00:33:07.470 --> 00:33:09.180
It's kind of nice.

00:33:09.470 --> 00:33:11.640
So that was an example
of two applications.

00:33:11.640 --> 00:33:15.070
One of them is an
Apple script that we ship,

00:33:15.070 --> 00:33:17.050
users can use to print out 3x5s.

00:33:17.270 --> 00:33:21.830
A second one is one that Werner
did that extracts EXIF data,

00:33:21.830 --> 00:33:24.640
puts it in a FileMaker Pro database.

00:33:24.680 --> 00:33:27.140
And so that, you know,
maybe that gives you an idea of

00:33:27.140 --> 00:33:31.510
some kind of apps you can write
that deal with multiple files.

00:33:31.680 --> 00:33:35.060
So with that,
I'll hand it over to Werner.

00:33:41.600 --> 00:33:45.600
Hello, my name is Werner Neuprand and I'm
one of the image capture engineers.

00:33:45.610 --> 00:33:49.460
By now, you should have a good idea
about what image capture is and

00:33:49.460 --> 00:33:51.260
you actually saw it in action.

00:33:51.260 --> 00:33:55.160
And so let's look at what you
would have to do in order to

00:33:55.160 --> 00:33:57.280
use image capture from your

00:33:58.790 --> 00:34:01.840
So first, I'm going to talk about
the application level APIs.

00:34:02.230 --> 00:34:05.410
That means write an application
that uses image capture and

00:34:05.710 --> 00:34:08.810
gets some data from a device.

00:34:09.690 --> 00:34:14.780
Before we actually look at the APIs,
just a few words about the

00:34:14.860 --> 00:34:17.440
whole idea how to use it.

00:34:17.590 --> 00:34:22.200
So we have an object-based API,
which means we are dealing

00:34:22.200 --> 00:34:23.740
with objects and properties.

00:34:23.970 --> 00:34:25.910
More on that later.

00:34:26.270 --> 00:34:29.140
Steve was mentioning we
are device independent.

00:34:29.140 --> 00:34:32.070
That means whether it's
a scanner or a camera,

00:34:32.910 --> 00:34:36.620
scanners in the future, cameras now,
we support it.

00:34:36.620 --> 00:34:38.160
And we are transport independent.

00:34:38.230 --> 00:34:41.950
So USB devices, FireWire devices,
and whatever you can think of.

00:34:44.320 --> 00:34:47.170
When we talk about objects,
all the ICA objects,

00:34:47.250 --> 00:34:49.080
it's an opaque structure.

00:34:49.220 --> 00:34:54.200
So you use that as reference
whenever you want to access data,

00:34:54.370 --> 00:34:56.930
data from the camera.

00:34:57.250 --> 00:34:59.960
So objects,
they do have types and subtypes.

00:35:00.290 --> 00:35:02.850
They basically identify the object.

00:35:03.520 --> 00:35:06.580
Objects can contain properties.

00:35:06.800 --> 00:35:11.940
Properties, the ICAE properties,
that's where the actual data is stored.

00:35:12.630 --> 00:35:16.810
And properties as well have types
and subtypes to get identified.

00:35:17.190 --> 00:35:21.360
So the symbols model is we have one
object that may contain another object,

00:35:21.360 --> 00:35:25.290
reference to another object,
and a property.

00:35:26.770 --> 00:35:30.390
We always have a very special
object at the beginning of a tree,

00:35:30.390 --> 00:35:32.710
and that's our device list.

00:35:32.810 --> 00:35:33.660
That's always there.

00:35:33.660 --> 00:35:37.300
Even if you don't have a camera
or other device connected,

00:35:37.350 --> 00:35:38.740
you always have the device list.

00:35:38.740 --> 00:35:42.500
In this case,
we are showing multiple devices.

00:35:42.500 --> 00:35:44.860
So two cameras,
two scanners are connected.

00:35:44.860 --> 00:35:48.300
And what will happen?

00:35:48.300 --> 00:35:51.040
Well,
if we have a closer look at camera two,

00:35:51.050 --> 00:35:53.270
you will see we have three images there.

00:35:53.300 --> 00:35:57.120
And we will have some
properties for the device.

00:35:57.120 --> 00:35:59.110
For example, the name.

00:35:59.750 --> 00:36:02.380
You saw that in the
Image Capture application.

00:36:02.480 --> 00:36:04.440
We had the name and an icon.

00:36:04.440 --> 00:36:07.080
So the icon, of course,
is also a property.

00:36:07.180 --> 00:36:09.880
Clock could be a property.

00:36:09.930 --> 00:36:11.870
We could have a whole
bunch of properties.

00:36:13.910 --> 00:36:16.920
And that's the same thing for the images.

00:36:16.990 --> 00:36:20.160
So images have properties,
like the image data.

00:36:20.310 --> 00:36:21.670
They have a thumbnail property.

00:36:21.850 --> 00:36:25.700
They have the image width and height,
the image name.

00:36:25.770 --> 00:36:28.050
All these are properties.

00:36:28.220 --> 00:36:32.840
So if you look at that tree now,
then you will see in order

00:36:32.840 --> 00:36:37.780
to get to the image data,
the only direct access point

00:36:37.780 --> 00:36:39.690
you have is the device list.

00:36:39.690 --> 00:36:43.510
So from the device list,
you have to go to the device.

00:36:43.700 --> 00:36:46.520
From the device, you go to the images.

00:36:46.690 --> 00:36:49.140
And from the images,
you go to the image data.

00:36:49.160 --> 00:36:55.360
So device objects,
you access those via the device list.

00:36:55.700 --> 00:36:58.460
The image objects via the device object.

00:36:58.560 --> 00:37:03.940
And once you have device object,
you can iterate over all the properties.

00:37:04.140 --> 00:37:07.390
First you get the images and then
iterate over all the properties

00:37:07.420 --> 00:37:09.970
to get to the actual image data.

00:37:10.520 --> 00:37:16.340
All our APIs have two parameters.

00:37:16.520 --> 00:37:20.200
They all take a parameter
block and a callback,

00:37:20.210 --> 00:37:22.110
a completion block.

00:37:22.960 --> 00:37:26.860
Good idea to always clear,
so do a memset of the

00:37:26.860 --> 00:37:31.030
whole parameter block,
fill in whatever you want

00:37:31.110 --> 00:37:34.130
to pass into that call,
make the call,

00:37:34.160 --> 00:37:38.170
and then depending on whether you
make it synchronous or asynchronous,

00:37:38.280 --> 00:37:40.200
extract the data.

00:37:41.450 --> 00:37:43.350
So that's how an API looks like.

00:37:43.650 --> 00:37:47.490
So it always starts with an ICA,
the Image Capture Architecture,

00:37:47.500 --> 00:37:49.930
and returns an OS error.

00:37:50.310 --> 00:37:53.800
You pass in a parameter
block and a completion block.

00:37:53.800 --> 00:37:57.990
Now, for the completion block,
that's how you decide whether

00:37:58.610 --> 00:38:01.330
you want to make your calls
synchronous or asynchronous.

00:38:01.340 --> 00:38:06.630
If you pass in nil as completion block,
then it's a synchronous call,

00:38:06.730 --> 00:38:10.470
which means you make the call,
the camera will do

00:38:10.470 --> 00:38:14.740
whatever you tell it to do,
comes back, and you have the result.

00:38:15.960 --> 00:38:19.710
Asynchronous calls,
you specify your completion block,

00:38:19.710 --> 00:38:23.320
you do the image capture,
you call the image capture API,

00:38:23.460 --> 00:38:26.890
it immediately returns
and then it will call,

00:38:26.890 --> 00:38:29.170
whenever the data is
available from the device,

00:38:29.210 --> 00:38:31.730
it will call your completion block.

00:38:32.090 --> 00:38:34.450
Actually, that's what we do in the
Image Capture application.

00:38:34.560 --> 00:38:36.850
So all our calls are asynchronous.

00:38:37.080 --> 00:38:41.140
So the nice thing about that is you
get a pretty snappy application.

00:38:41.140 --> 00:38:42.240
So it's working.

00:38:42.240 --> 00:38:47.140
The UI is updating without having
the application to be multi-threaded.

00:38:47.250 --> 00:38:54.140
So it's a single-threaded
application and it still feels like,

00:38:54.140 --> 00:38:54.140
yeah, it's responsive.

00:38:56.170 --> 00:39:00.800
So the completion proc
has a single parameter,

00:39:00.800 --> 00:39:06.230
and that's the ICA header that
you have to typecast to whatever

00:39:07.100 --> 00:39:10.140
call result you're expecting.

00:39:10.190 --> 00:39:13.930
We will have a look at that in a bit,
so I will go to show you how to write

00:39:13.930 --> 00:39:18.490
a small image capture application,
and then we will look at that.

00:39:19.200 --> 00:39:22.970
If you look at all our APIs,
we can group them into

00:39:22.970 --> 00:39:25.200
more or less three groups.

00:39:25.320 --> 00:39:30.600
One is we have some basic functions,
then we have APIs that deal with objects,

00:39:30.710 --> 00:39:33.650
and then of course the APIs that
deal with the properties

00:39:33.650 --> 00:39:35.090
to get to the real data.

00:39:35.200 --> 00:39:38.990
So the basic functions,
we have very important accessor

00:39:39.130 --> 00:39:40.500
and that's get the device list.

00:39:40.620 --> 00:39:42.690
So remember that was the top of the tree.

00:39:42.790 --> 00:39:45.540
That's the only device
that's always there even if

00:39:45.540 --> 00:39:47.510
there's no camera connected.

00:39:47.790 --> 00:39:50.540
And then we have an object send message.

00:39:50.610 --> 00:39:54.160
That's very useful whenever
you want to send a message to,

00:39:54.160 --> 00:39:57.740
for example, the device,
like take a picture.

00:39:57.750 --> 00:40:01.040
You can also send
messages to image objects,

00:40:01.040 --> 00:40:04.020
like delete this image object.

00:40:04.060 --> 00:40:06.940
And of course,
what you want to do-- and you saw that,

00:40:07.020 --> 00:40:10.170
you will see it whenever you look
at the Image Capture application--

00:40:10.220 --> 00:40:12.380
if you launch the application
and no device is connected,

00:40:12.390 --> 00:40:16.200
then you connect the device,
then it updates automatically the UI.

00:40:16.230 --> 00:40:20.180
And that's done by using the
ICA register event notification.

00:40:20.260 --> 00:40:23.700
So you get notification,
once you register to that,

00:40:23.730 --> 00:40:27.070
whenever a device is
connected or disconnected.

00:40:28.980 --> 00:40:32.870
So once again, the device list,
the ICI eCAT device list gives you

00:40:32.890 --> 00:40:35.280
the object for the device list.

00:40:35.280 --> 00:40:38.740
And you can send a message to a device.

00:40:39.010 --> 00:40:40.610
Take a picture.

00:40:41.130 --> 00:40:53.960
The Object-Related Functions.

00:40:53.960 --> 00:40:53.960
Well, it's quite clear whenever you
look at the device object tree,

00:40:53.960 --> 00:40:53.960
you have to walk through the tree.

00:40:53.960 --> 00:40:53.960
And that's basically
what the device--what the

00:40:53.960 --> 00:40:53.960
object-related functions do.

00:40:54.680 --> 00:41:00.900
So you want to find out how many
children do you have for a given object.

00:41:01.020 --> 00:41:06.120
So if you look at the device list,
in that case, it would return a two,

00:41:06.120 --> 00:41:08.840
meaning we have two devices connected.

00:41:08.870 --> 00:41:12.780
For this second device,
index one-- so we start

00:41:12.790 --> 00:41:18.400
counting with zero-- index one,
we would get back a child count of three,

00:41:18.400 --> 00:41:22.950
meaning we have three objects,
three images in that case.

00:41:24.870 --> 00:41:29.000
As I said before,
each object has a type and subtype,

00:41:29.040 --> 00:41:33.750
and we can get to that
using the Get Object Info.

00:41:34.220 --> 00:41:40.100
So the type for the first
one would be a device.

00:41:40.120 --> 00:41:41.270
That's the device list.

00:41:41.460 --> 00:41:45.620
And then we have the device camera,
device scanner, and all those.

00:41:45.680 --> 00:41:50.970
And for the images or sound files,
we would have an identifier saying, well,

00:41:51.030 --> 00:41:54.250
it's an image, it's an audio,
it's a movie.

00:41:56.440 --> 00:42:02.180
If we want to get to a specific object,
like in that case we already

00:42:02.180 --> 00:42:06.980
captured the device and we want
to get to the second image.

00:42:07.200 --> 00:42:10.810
Well, first of all,
it's a good idea to do a get child count.

00:42:10.900 --> 00:42:12.540
Find out how many images do we have.

00:42:12.860 --> 00:42:15.050
And if you want to
iterate over all those,

00:42:15.190 --> 00:42:17.850
then we would use the get nth child.

00:42:17.880 --> 00:42:23.410
Get nth child takes an index and
returns you an object reference.

00:42:24.220 --> 00:42:26.570
Once you have an object,
you can always get to

00:42:26.570 --> 00:42:29.280
the top of the tree.

00:42:30.150 --> 00:42:33.550
To the device list using
the Get Device List call,

00:42:33.550 --> 00:42:37.930
or you can get to the top of the
device-specific object by using

00:42:37.930 --> 00:42:42.830
the Get Root of Object that will
always give you the camera device.

00:42:44.440 --> 00:42:48.360
Get Parent of Object might be useful
if you have a directory structure,

00:42:48.370 --> 00:42:51.560
which we are currently
not supporting in our UI.

00:42:51.860 --> 00:42:53.460
Currently everything is flattened out.

00:42:53.530 --> 00:42:59.780
Also the PTP and Class 1 drivers
currently flatten out everything.

00:43:00.170 --> 00:43:04.180
But in theory,
you could have like a directory object,

00:43:04.210 --> 00:43:09.180
and all those children can
access the directory object by

00:43:09.180 --> 00:43:12.060
using the Get Parent of Object.

00:43:14.200 --> 00:43:18.640
We have Revcons that you can set and get.

00:43:18.750 --> 00:43:24.210
And then we have a whole bunch of
setters and getters for properties.

00:43:24.760 --> 00:43:25.520
Same deal.

00:43:25.720 --> 00:43:28.750
If we have an object and we want
to get the number of properties,

00:43:28.850 --> 00:43:34.990
then we just do an ICA get property count
that returns us the number of properties.

00:43:34.990 --> 00:43:40.470
And to access the property,
you could do that in two ways.

00:43:40.470 --> 00:43:43.590
One way would be you can
iterate over all the properties.

00:43:43.590 --> 00:43:47.890
So get nth object, pass in 0, 1,
and so on.

00:43:47.970 --> 00:43:50.820
Or if you know exactly
what you're looking for,

00:43:50.820 --> 00:43:54.490
like in this case,
you could just look for the image width.

00:43:54.890 --> 00:43:59.000
And instead of now looping
over all properties,

00:43:59.030 --> 00:44:04.370
you would just do a get property by
type and pass in image width as the

00:44:04.370 --> 00:44:07.540
OS type that you're looking for.

00:44:09.400 --> 00:44:14.400
You can get information about
properties using Get Property Info,

00:44:14.450 --> 00:44:18.130
and you can get and
set the property data.

00:44:18.280 --> 00:44:24.460
In Mac OS 10.10.0,
the set property data is not implemented.

00:44:24.730 --> 00:44:26.260
But we will do that in the future.

00:44:26.400 --> 00:44:33.810
So you will be able to modify properties
like upload images or sound files.

00:44:34.260 --> 00:44:36.500
Get property data.

00:44:36.520 --> 00:44:42.200
This call is basically the way
to get to the actual image data

00:44:42.200 --> 00:44:48.690
or thumbnail data or whatever
you have stored in properties.

00:44:49.730 --> 00:44:52.170
Then,
in order to navigate around a bit again,

00:44:52.280 --> 00:44:56.260
there's the Get Root of Property,
which gives you the device object,

00:44:56.520 --> 00:44:59.530
and Get Parent of Property,
that's the object that

00:44:59.600 --> 00:45:01.430
contains this property.

00:45:02.200 --> 00:45:19.400
[Transcript missing]

00:45:24.470 --> 00:45:28.000
We have an application
called Image Capture Browser.

00:45:28.010 --> 00:45:31.700
And what it does is just
looking for devices,

00:45:31.910 --> 00:45:34.160
objects, properties.

00:45:34.160 --> 00:45:38.720
In this case,
I was doing the Get Device list

00:45:38.720 --> 00:45:42.070
and then get the number of
objects for that device list.

00:45:42.240 --> 00:45:43.160
Well, we have only one.

00:45:43.160 --> 00:45:44.960
So there's one camera connected.

00:45:45.020 --> 00:45:46.560
So I select that camera.

00:45:46.560 --> 00:45:49.260
And then you see all the
information flows in.

00:45:49.270 --> 00:45:51.740
Now, this is, again,
an example of writing it

00:45:51.740 --> 00:45:53.550
in an asynchronous mode.

00:45:53.680 --> 00:46:01.240
So as you saw, just clicking on it,
it really updates the UI immediately.

00:46:01.240 --> 00:46:05.360
And the data that's not available just
flows in whenever it gets available.

00:46:05.440 --> 00:46:08.010
So that's the camera that John was using.

00:46:08.110 --> 00:46:12.650
So with all the images, I can,
for example, get the volume label.

00:46:12.810 --> 00:46:15.270
So it's an HP PhotoSmart.

00:46:15.290 --> 00:46:16.290
The T is missing.

00:46:16.310 --> 00:46:21.340
That's a bug in the 1.0 version
where you have to pass in whenever

00:46:21.350 --> 00:46:25.890
you get to the volume label,
not the actual length that you have

00:46:25.960 --> 00:46:30.120
to have to increment it by one in
order to get the null termination.

00:46:31.040 --> 00:46:35.070
So you can get the camera icon so
it shows you the number of bytes.

00:46:35.220 --> 00:46:37.340
You can click on an image
and then it will display.

00:46:37.340 --> 00:46:39.390
We have currently four properties.

00:46:39.480 --> 00:46:43.050
That's the image data, thumbnail,
file name, and file size.

00:46:45.930 --> 00:46:50.360
So if I click on the file name,
so I would get the name 13

00:46:50.950 --> 00:46:53.760
bytes for that property.

00:46:53.830 --> 00:46:55.520
Thumbnail.

00:46:55.600 --> 00:47:14.800
[Transcript missing]

00:47:15.650 --> 00:47:20.740
Switching over to the project builder,
what I'm trying to do now is show

00:47:20.740 --> 00:47:25.590
you how easy it is to write an
application that uses image capture.

00:47:25.910 --> 00:47:27.970
So we start from scratch.

00:47:29.090 --> 00:47:32.500
And we look, oh, actually,
I have a small application

00:47:32.500 --> 00:47:33.270
already prepared.

00:47:33.340 --> 00:47:40.190
And you'll see it's almost from scratch.

00:47:44.160 --> 00:47:46.180
So I switch over to the resources.

00:47:46.260 --> 00:47:52.380
So it's a small Cocoa application,
and all it has is the main.

00:47:52.420 --> 00:47:59.770
And then let's go to
the interface builder.

00:48:01.960 --> 00:48:05.400
And then, well,
you see everything is just empty.

00:48:05.400 --> 00:48:11.420
And I could now start switching over
and adding an image view to do that.

00:48:11.440 --> 00:48:14.860
And what this small application
should do is just capture

00:48:14.860 --> 00:48:17.130
thumbnails from the camera.

00:48:17.560 --> 00:48:21.330
Well, I could do that,
but what I also could do is I can go to

00:48:21.390 --> 00:48:28.790
Preferences and actually use a palette,
and that's the ICAview palette.

00:48:29.190 --> 00:48:32.400
So you'll see that.

00:48:32.400 --> 00:48:35.170
And all I do is I track that over.

00:48:36.300 --> 00:48:37.980
I saved the app.

00:48:37.990 --> 00:48:40.060
I didn't change anything in here.

00:48:40.060 --> 00:48:44.100
Now let's see what
happens if we run this.

00:48:48.880 --> 00:48:51.940
It launches and it shows the thumbprint.

00:48:52.040 --> 00:48:52.990
Well, actually it does more.

00:48:53.150 --> 00:48:58.160
So it has a slider and it
can now go through all the

00:48:58.260 --> 00:49:00.250
images that are in the device.

00:49:00.310 --> 00:49:03.500
And that was without writing
a single line of code.

00:49:03.590 --> 00:49:05.500
Well, not quite.

00:49:06.170 --> 00:49:08.820
Well,
another thing that they can do is like,

00:49:08.830 --> 00:49:10.080
it allows you to track the image.

00:49:10.080 --> 00:49:13.420
So whenever you are in the mail,
you can just track that over to

00:49:13.420 --> 00:49:15.330
mail and then insert it there.

00:49:15.420 --> 00:49:19.980
So let's quit this one and let's
see where the magic really lies.

00:49:20.160 --> 00:49:25.440
If we go to the classes,
we see there's an ICA view, .h and .m.

00:49:25.510 --> 00:49:27.560
Now actually,
if you look at the documentation

00:49:27.710 --> 00:49:32.840
for Interface Builder and how to
write interface builder palettes,

00:49:32.900 --> 00:49:36.450
it tells you that there are three
ways to actually include the code.

00:49:36.550 --> 00:49:39.440
One is, in your project you
just have the sources.

00:49:39.500 --> 00:49:41.090
That's what I do.

00:49:41.310 --> 00:49:44.590
The other one would be you
just use the precompiled files,

00:49:44.590 --> 00:49:47.080
the .o files, and add those.

00:49:47.370 --> 00:49:50.450
or create a small framework and use that.

00:49:50.570 --> 00:49:53.060
Well, in this case,
since I want to show you how

00:49:53.060 --> 00:49:58.810
this view actually works,
I was including the sources.

00:49:59.280 --> 00:50:04.600
So let's go to this one and
have a look at the sources.

00:50:10.590 --> 00:50:16.260
If we do awakeFromNib,
that's the call actually

00:50:16.260 --> 00:50:19.070
that you will get whenever
your application is launched,

00:50:19.270 --> 00:50:21.110
when the Nib file is loaded.

00:50:21.290 --> 00:50:25.330
What I'm doing here,
that's a tricky thing

00:50:25.330 --> 00:50:27.130
because I want to work...

00:50:27.600 --> 00:50:47.600
[Transcript missing]

00:50:48.020 --> 00:50:51.020
And initializing the view
is actually very simple.

00:50:51.090 --> 00:50:53.210
Because all I do is--

00:50:54.650 --> 00:51:00.670
All I do is I call register
event notification.

00:51:00.980 --> 00:51:05.750
I want to get notified when a
device is connected and when

00:51:05.810 --> 00:51:07.680
a device is disconnected.

00:51:09.190 --> 00:51:14.120
Then, well, that's where we are not
quite to the standards.

00:51:14.120 --> 00:51:19.160
So the best way would actually be to get
the thumbnail for the thumbnail data,

00:51:19.160 --> 00:51:20.720
get the size of the property.

00:51:20.790 --> 00:51:23.740
That's something in the property info.

00:51:23.740 --> 00:51:28.580
So you would know how big of a thumbnail
do I really have in that camera.

00:51:28.620 --> 00:51:37.030
Well, in this case,
I know it's 128 by 128,

00:51:37.030 --> 00:51:40.520
so I'm cheating a bit.

00:51:40.520 --> 00:51:40.520
And then, after allocating this buffer,
I'm doing a re-scan for devices.

00:51:40.990 --> 00:51:45.140
So let's look at the first part,
register event notification.

00:51:45.140 --> 00:51:49.050
So what we do,
so we have an ICA register event

00:51:49.050 --> 00:51:51.580
notification parameter block.

00:51:51.660 --> 00:51:55.830
And as I told you,
it's a good idea to do a BAM set first,

00:51:55.830 --> 00:51:57.180
so clear it out.

00:51:57.320 --> 00:52:00.520
And then I set the RefCon.

00:52:02.660 --> 00:52:07.410
For the header to the self, well,
in this case, it's not needed because,

00:52:07.410 --> 00:52:09.340
as you can see down
here on the call itself,

00:52:09.380 --> 00:52:12.000
I'm doing a synchronous call.

00:52:12.380 --> 00:52:17.120
So RevCon might be nice, but not needed.

00:52:17.120 --> 00:52:22.180
I pass in as object null,
which means for the event notification,

00:52:22.180 --> 00:52:25.470
means notify me on all object changes.

00:52:25.630 --> 00:52:29.490
So I'm not interested
in a specific object,

00:52:29.590 --> 00:52:30.660
but all.

00:52:30.760 --> 00:52:34.330
And then the notified
type that got passed in,

00:52:34.420 --> 00:52:39.970
which was the device
added or device removed.

00:52:40.960 --> 00:52:46.300
So just make the call and that's it.

00:52:46.340 --> 00:52:48.410
Now the rescan--

00:52:48.600 --> 00:52:49.430
like here.

00:52:49.570 --> 00:52:54.240
So last thing we did in our
initialization was re-scan for devices.

00:52:54.250 --> 00:52:58.120
Re-scan for devices is also
pretty straightforward.

00:52:58.260 --> 00:53:02.540
What it does, well first,
if we never got initialized.

00:53:02.540 --> 00:53:05.450
So remember,
I did not have a single line of code

00:53:06.160 --> 00:53:10.140
that I created for that project that
was outside the view definition.

00:53:10.310 --> 00:53:14.650
So I did not initialize the view,
did not do anything.

00:53:14.870 --> 00:53:20.230
So what I have to do is now have
the image view that's in the snip

00:53:20.230 --> 00:53:22.220
file connected to the slider.

00:53:22.260 --> 00:53:24.310
That's what I'm doing here.

00:53:24.610 --> 00:53:28.540
And then, if we never did get
the device list before,

00:53:28.560 --> 00:53:32.450
actually, then I will get it and
just keep reference to it.

00:53:32.590 --> 00:53:34.260
So, getting the device list.

00:53:34.410 --> 00:53:39.280
Again,
I have a parameter plot that I clear.

00:53:39.790 --> 00:53:45.940
And then I call getDeviceList and
do that again in a synchronous way,

00:53:45.940 --> 00:53:48.460
so passing null as a completion block.

00:53:48.550 --> 00:53:55.820
So the device list will be set inside
this getDeviceList parameter block.

00:53:56.980 --> 00:54:01.580
Now, if we did get a device list,
what I want to do is I want to find

00:54:01.580 --> 00:54:03.690
out how many devices are connected.

00:54:03.830 --> 00:54:09.570
So I would just go ahead and--

00:54:10.200 --> 00:54:14.100
Pass in as the object
that I'm interested in,

00:54:14.100 --> 00:54:16.020
how many children do we have?

00:54:16.020 --> 00:54:17.950
That's the device list in that case.

00:54:18.110 --> 00:54:20.200
So pass that in, get child count.

00:54:20.200 --> 00:54:26.100
If the child count is zero,
so we have no cameras connected,

00:54:26.130 --> 00:54:31.140
then I just call my no device found,
which would just dim the slider

00:54:31.140 --> 00:54:33.490
and bring up a generic icon.

00:54:35.340 --> 00:54:37.140
Get nth child.

00:54:37.150 --> 00:54:40.900
Well, what I do is I want to
get the first camera.

00:54:40.960 --> 00:54:46.690
So this very simple app just
looks at the first camera,

00:54:46.690 --> 00:54:51.290
index zero,
and then tries to get the camera.

00:54:51.290 --> 00:54:51.290
So

00:54:52.510 --> 00:54:52.820
The device.

00:54:53.040 --> 00:54:57.940
So if we did get the device,
well actually, yeah, this one first.

00:54:58.070 --> 00:55:02.930
So if we have no device,
then we just take a predefined TIFF file,

00:55:02.930 --> 00:55:07.730
ICA ImageView TIFF,
and display that inside our NSU.

00:55:07.730 --> 00:55:14.410
So if we did get the device,

00:55:20.160 --> 00:55:27.060
If we did get a device,
then what we have to do is find

00:55:27.080 --> 00:55:30.400
out how many images do we have.

00:55:31.130 --> 00:55:36.500
So again, we have a
Get Child Count parameter block,

00:55:36.500 --> 00:55:38.820
and we clear it.

00:55:38.820 --> 00:55:43.600
We set the object we are
interested in to the first device,

00:55:43.740 --> 00:55:47.540
and then we just call Get Child Count.

00:55:47.540 --> 00:55:51.620
So how many images or
movie files do we have?

00:55:51.620 --> 00:55:55.070
We get the number back, save that in