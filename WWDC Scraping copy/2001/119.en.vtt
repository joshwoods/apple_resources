WEBVTT

00:00:00.430 --> 00:00:01.700
Well, good morning.

00:00:01.720 --> 00:00:06.490
Looks like a lot of you stayed up
kind of late and aren't here yet.

00:00:06.600 --> 00:00:08.060
So welcome to this session.

00:00:08.060 --> 00:00:11.900
This session is really just the,
if you think of the session

00:00:11.900 --> 00:00:14.200
that I gave yesterday,
which was session 111,

00:00:14.260 --> 00:00:17.000
talking about how to create
a great citizen on Mac OS X,

00:00:17.130 --> 00:00:19.240
citizen application on Mac OS X.

00:00:19.280 --> 00:00:21.840
And I said in that session that
I wouldn't talk about APIs,

00:00:21.870 --> 00:00:23.040
talk about conceptual ideas.

00:00:23.160 --> 00:00:25.960
This session is all about
talking through that material,

00:00:25.990 --> 00:00:28.670
but looking at it from
the Carbon API level.

00:00:28.780 --> 00:00:31.630
And so I'd like to bring on
stage Guy Fullerton from the

00:00:31.630 --> 00:00:34.730
High Level Toolbox team at Apple,
and he's going to talk through

00:00:34.820 --> 00:00:39.140
the specifics of some of that
material as it relates to the APIs.

00:00:39.200 --> 00:00:40.540
Guy?

00:00:41.740 --> 00:00:43.840
Thanks.

00:00:43.840 --> 00:00:46.730
First things first,
did anybody bring me any donuts?

00:00:46.760 --> 00:00:48.440
No?

00:00:48.440 --> 00:00:48.460
Okay.

00:00:52.700 --> 00:00:55.300
I guess everybody who got here
early saw my presentation last

00:00:55.300 --> 00:00:59.310
year and knows how fast I talk,
how fast I'm going to

00:00:59.340 --> 00:01:00.840
get through this stuff.

00:01:00.870 --> 00:01:02.680
That's me.

00:01:03.720 --> 00:01:07.630
So I want to tell you a little story that
you've probably all witnessed firsthand,

00:01:07.630 --> 00:01:10.600
and it's the story of
a Carbon application.

00:01:10.600 --> 00:01:15.660
Most Carbon applications start off as an
interface lib application on Mac OS 9,

00:01:15.660 --> 00:01:17.600
and you begin the Carbonization process.

00:01:17.600 --> 00:01:20.070
And that's fairly straightforward,
and it takes you anywhere from a

00:01:20.070 --> 00:01:21.600
couple weeks to maybe a couple months.

00:01:21.600 --> 00:01:26.300
But finally you get through the opacity
issues and weaning yourself off of some

00:01:26.300 --> 00:01:30.120
APIs and starting to use other APIs,
and you get it so it actually

00:01:30.120 --> 00:01:31.600
runs well on Carbon lib.

00:01:31.620 --> 00:01:33.600
And usually part of the
way through that process,

00:01:33.600 --> 00:01:37.550
you get your application running well
enough to try running it on Mac OS X.

00:01:37.620 --> 00:01:39.590
And the first time you try
running it on Mac OS X,

00:01:39.680 --> 00:01:42.030
it usually crashes,
because Mac OS X is really good

00:01:42.030 --> 00:01:45.600
at exposing bugs that were sort of
latent in your Mac OS 9 code base.

00:01:45.730 --> 00:01:47.600
Well, you end up fixing those.

00:01:47.600 --> 00:01:50.310
Those usually don't take too long,
because they're just typically writing

00:01:50.310 --> 00:01:52.600
to null or other strange stuff like that.

00:01:52.600 --> 00:01:54.590
You fix them,
you finally get the app to launch,

00:01:54.590 --> 00:01:57.600
and it comes up,
and it looks kind of good,

00:01:57.600 --> 00:02:00.560
but what's all that stuff going
wrong in my app's interface?

00:02:00.600 --> 00:02:03.590
So I'm going to tell you how to
fix most of those problems today,

00:02:03.600 --> 00:02:07.600
as well as certain techniques
to ease your adoption of Aqua,

00:02:07.780 --> 00:02:09.600
and how to avoid certain
user interface pitfalls.

00:02:09.600 --> 00:02:13.260
But before I go any further,
what I would like to do is show

00:02:13.260 --> 00:02:15.600
off some of the user interface
pitfalls you might fall into.

00:02:15.600 --> 00:02:25.190
And let's bring this up.

00:02:31.400 --> 00:02:35.950
Okay, so what I have here is a small
application based on an earlier version

00:02:35.950 --> 00:02:39.400
of PowerPlant that shows off some of
the problems you might run into when you

00:02:39.400 --> 00:02:40.860
bring your application up under Aqua.

00:02:40.860 --> 00:02:43.970
Now, the first thing you probably notice
when this dialog comes up is that

00:02:43.970 --> 00:02:46.840
it's got a progress bar animating
in the top left-hand corner.

00:02:46.840 --> 00:02:49.750
And initially, you might think, oh, okay,
that's right,

00:02:49.760 --> 00:02:53.210
but then you look down in the bottom
right-hand corner and you see that,

00:02:53.530 --> 00:02:55.880
well, your progress bar should
really be animating down there.

00:02:55.880 --> 00:02:57.820
Why is it animating up in
the top left-hand corner?

00:02:58.220 --> 00:03:03.390
You might also see this phenomenon with
the pulsing default button as well.

00:03:03.730 --> 00:03:05.580
One thing that I hope
shows up on the big screen,

00:03:05.580 --> 00:03:07.720
and I've got the Magnify
application running on the right

00:03:07.830 --> 00:03:11.140
to kind of show it off more,
is the white halo problem.

00:03:11.140 --> 00:03:13.700
If you look closely
at the Magnify window,

00:03:13.700 --> 00:03:16.310
you can see that the pattern
shows up on the dialog,

00:03:16.310 --> 00:03:18.960
but it doesn't show up
properly behind the text.

00:03:18.960 --> 00:03:21.950
And speaking of text,
that text doesn't exactly

00:03:21.950 --> 00:03:23.760
match the proper Aqua look.

00:03:23.860 --> 00:03:26.790
It just looks too thin,
doesn't have the right anti-aliasing,

00:03:26.790 --> 00:03:29.480
so you probably have that
in your application as well.

00:03:30.010 --> 00:03:32.280
One other subtle problem
that you may not notice here,

00:03:32.320 --> 00:03:37.350
until you look really, really closely,
is a misalignment of patterns.

00:03:37.350 --> 00:03:40.310
If you take a look at the Magnify window,
you can sort of see strange

00:03:40.580 --> 00:03:43.640
pattern alignment issues going
on on the checkbox glyph there.

00:03:43.640 --> 00:03:46.540
It's almost as though the pattern
shifted down by a few pixels.

00:03:46.540 --> 00:03:49.060
And speaking of these tabs
that the checkboxes are in,

00:03:49.060 --> 00:03:50.930
the tab pane doesn't look quite right.

00:03:50.930 --> 00:03:53.700
The tab pane is supposed to have
a border around the outside,

00:03:53.760 --> 00:03:56.570
and it's supposed to have some
shadowing around the outside,

00:03:56.570 --> 00:03:58.210
but it's just not showing up.

00:03:58.260 --> 00:03:59.530
You might also see this same problem.

00:03:59.960 --> 00:04:03.600
problem with shadows on push
buttons or other controls.

00:04:04.120 --> 00:04:07.480
Another problem that doesn't often expose
itself until you use the application for

00:04:07.480 --> 00:04:12.160
a while is over compositing of things
like focus rings and edit text frames.

00:04:12.160 --> 00:04:16.380
If you take a look in the magnify
window as I tab back and forth,

00:04:17.200 --> 00:04:30.000
[Transcript missing]

00:04:34.480 --> 00:04:36.240
So the first thing I want to
talk about and show you how to

00:04:36.390 --> 00:04:38.000
solve is the white halo problem.

00:04:38.000 --> 00:04:41.100
Now like I mentioned,
it's basically when some other color

00:04:41.100 --> 00:04:43.680
seems to surround your widgets,
your controls,

00:04:43.680 --> 00:04:48.700
your static text items in a dialog that
otherwise has the proper line background.

00:04:48.700 --> 00:04:52.570
Now fundamentally,
this is because of two things.

00:04:53.330 --> 00:04:56.800
Controls erase their
background before they draw.

00:04:56.800 --> 00:05:00.240
And the reason we have to
do this is because a lot of

00:05:00.240 --> 00:05:02.100
Aqua widgets have shadows.

00:05:02.280 --> 00:05:05.400
Under Platinum, they didn't often need to
erase behind themselves

00:05:05.580 --> 00:05:08.250
because they were fully opaque,
but now we need to

00:05:08.280 --> 00:05:09.800
erase in a lot of cases.

00:05:09.910 --> 00:05:13.540
And so when a control is about to draw,
you need to make sure that the proper

00:05:13.540 --> 00:05:16.990
background color has been set up
for that control so that the control

00:05:16.990 --> 00:05:19.020
knows the right thing to erase to.

00:05:19.760 --> 00:05:23.590
The best way to get the proper
background behind your control is to

00:05:23.590 --> 00:05:28.010
properly exploit the Control Manager's
embedding hierarchy support.

00:05:28.160 --> 00:05:31.640
Now, Control Manager embedding has
been around since Mac OS 8.0,

00:05:31.640 --> 00:05:33.740
and a lot of people haven't
yet been exposed to it,

00:05:33.740 --> 00:05:36.110
so I'm going to talk a
little bit about it now.

00:05:36.380 --> 00:05:39.290
Essentially what the embedding
hierarchy is is a view system

00:05:39.300 --> 00:05:40.660
in the Control Manager.

00:05:40.750 --> 00:05:43.140
You can take controls,
put them into other controls,

00:05:43.140 --> 00:05:44.490
move them around as a group.

00:05:44.590 --> 00:05:45.840
It's just a mini view system.

00:05:45.840 --> 00:05:49.540
It does hit testing properly,
drawing properly, things like that.

00:05:49.600 --> 00:05:53.440
Now, when the Control Manager's
embedding stuff is working well,

00:05:53.440 --> 00:05:56.340
and when you're utilizing it properly,
it will draw backgrounds

00:05:56.590 --> 00:06:00.580
properly based on parent controls
that contain other controls.

00:06:00.630 --> 00:06:03.780
For instance, you might have a push
button in a tab control.

00:06:03.820 --> 00:06:07.600
When that push button goes to erase,
it traverses up the embedding hierarchy,

00:06:07.810 --> 00:06:10.600
finds its parent that's a tab control,
and says, "Hey, tab control,

00:06:10.600 --> 00:06:13.020
will you set the background up
properly for me so I can erase

00:06:13.020 --> 00:06:16.260
now?" The tab control does that,
and then the button can go

00:06:16.260 --> 00:06:19.380
ahead and erase and draw its
structure and lights gray.

00:06:19.380 --> 00:06:24.990
If a control is embedded in such a
fashion that it isn't in a parent control

00:06:25.060 --> 00:06:29.110
that has some sort of opaque background,
ultimately,

00:06:29.110 --> 00:06:33.080
as the control traverses up the embedding
hierarchy to find the right background,

00:06:33.080 --> 00:06:35.720
it might reach the root
pane for the window.

00:06:35.720 --> 00:06:37.980
And if it does reach the
root pane for the window,

00:06:37.980 --> 00:06:41.620
it uses a background that's been
associated with the window directly

00:06:41.620 --> 00:06:44.420
via the setThemeWindowBackground API.

00:06:44.420 --> 00:06:49.220
I'm going to talk a little bit more about
setThemeWindowBackground a bit later.

00:06:49.220 --> 00:06:52.460
But basically,
what this API lets you do is associate

00:06:52.490 --> 00:06:56.250
a certain pattern or brush with the
window such that a control that is

00:06:56.250 --> 00:07:01.770
in this situation can erase to that
brush and get the right pattern.

00:07:04.500 --> 00:07:07.700
So all the system CDEFs support
control embedding properly.

00:07:07.820 --> 00:07:10.800
They do the right thing when
they're requested to have

00:07:10.800 --> 00:07:12.190
background colors set up.

00:07:12.280 --> 00:07:15.580
And if you have custom CDEFs and you want
to start taking advantage of embedding,

00:07:15.660 --> 00:07:17.130
you can do the right thing here as well.

00:07:17.140 --> 00:07:20.590
The best way to do this on
Mac OS X is to listen to the K-Event

00:07:20.590 --> 00:07:23.410
Control Apply Background Carbon Event.

00:07:23.410 --> 00:07:26.160
We talked a lot about
Carbon Event in previous sessions,

00:07:26.240 --> 00:07:29.010
and one of our main points is
that in order to adopt current

00:07:29.040 --> 00:07:32.060
and future Mac OS X technologies,
you're going to need to start

00:07:32.110 --> 00:07:34.320
leveraging Carbon Events a lot more.

00:07:34.400 --> 00:07:38.190
What just so happens is that if you
have an old school message based CDEF,

00:07:38.190 --> 00:07:41.310
you don't need this particular
Carbon Event right now.

00:07:41.330 --> 00:07:44.390
We do send out old CDEF messages
to your control definition

00:07:44.390 --> 00:07:45.870
to set up the background.

00:07:45.870 --> 00:07:48.750
You just have to do a
little bit more work.

00:07:48.910 --> 00:07:51.830
If your control has a special background,
the first thing it needs to do

00:07:51.830 --> 00:07:54.650
is tell the control manager,
"Hey, I've got a special background."

00:07:54.930 --> 00:07:58.540
And the way you do that is by
reporting that you have the K control

00:07:58.540 --> 00:08:00.900
has special background feature bit.

00:08:00.940 --> 00:08:03.900
You're going to receive a control
message requesting your features.

00:08:03.900 --> 00:08:06.890
You would set that bit on the
way out of the feature request.

00:08:06.900 --> 00:08:10.830
Once you've responded that you
support a special background,

00:08:10.830 --> 00:08:14.850
when the control manager is
trying to draw your sub-controls,

00:08:14.850 --> 00:08:18.900
it will send you a K control
message setup background message.

00:08:18.900 --> 00:08:21.300
In this message,
you can set up the current port

00:08:21.420 --> 00:08:25.310
with the proper background so that
your sub-controls can draw properly.

00:08:26.760 --> 00:08:30.020
Not everyone can take advantage of
the control embedding hierarchy fully.

00:08:30.120 --> 00:08:32.270
A lot of frameworks have
their own view system,

00:08:32.330 --> 00:08:35.230
and we're working on making it such
that you can integrate the view system

00:08:35.230 --> 00:08:37.460
with the control manager more directly.

00:08:37.460 --> 00:08:40.190
In the meantime, however,
you might not be able to fully

00:08:40.310 --> 00:08:42.770
exploit control embedding,
but you still need to set

00:08:42.840 --> 00:08:44.100
up the right background.

00:08:44.100 --> 00:08:47.100
The way you do that is
with SetControlColorProc.

00:08:47.100 --> 00:08:49.760
Simply speaking,
SetControlColorProc allows

00:08:49.800 --> 00:08:52.870
you to associate a proc
pointer with a given control,

00:08:52.870 --> 00:08:56.400
and that proc pointer will be called
to set up the background or the

00:08:56.460 --> 00:08:59.440
text color for a given control.

00:08:59.440 --> 00:09:02.030
This ControlColorProc can
actually be used in conjunction

00:09:02.050 --> 00:09:03.910
with an embedding hierarchy.

00:09:03.980 --> 00:09:06.720
If there's a color proc
associated with the control,

00:09:06.720 --> 00:09:10.640
it will override the control manager's
embedding hierarchy support for color,

00:09:10.640 --> 00:09:12.560
so you can hook in that way.

00:09:12.560 --> 00:09:16.640
I also mentioned that SetControlColorProc
allows you to customize the text.

00:09:16.640 --> 00:09:20.000
This also goes back to custom control
definitions responding to either the

00:09:20.000 --> 00:09:21.790
Carbon event or the C-DEF message.

00:09:21.850 --> 00:09:26.370
If you have a custom background,
let's say that it's totally opaque black,

00:09:26.450 --> 00:09:29.100
and somebody puts a static
text control on top of that

00:09:29.100 --> 00:09:32.280
complete opaque black control,
you need to make sure that

00:09:32.370 --> 00:09:35.240
the text that that static
text control draws is visible.

00:09:35.240 --> 00:09:37.510
The way you would do that
is probably by saying,

00:09:37.530 --> 00:09:41.040
"Hey, draw your text in white."
SetControlColorProc will let you

00:09:41.040 --> 00:09:43.930
set up a white text color as well.

00:09:43.980 --> 00:09:45.360
Like I mentioned,
you can handle the proper

00:09:45.460 --> 00:09:49.450
Carbon events or the C-DEF message
to do the same sort of thing.

00:09:52.430 --> 00:09:55.100
Now,
sometimes setControlColorProc may not

00:09:55.100 --> 00:09:59.500
do exactly what you want or it may
be a little bit of a hassle to use.

00:09:59.500 --> 00:10:03.750
So as a last-ditch effort
you can always rely--well,

00:10:03.750 --> 00:10:09.470
not always--you can sometimes rely on
the Control Manager's default behavior

00:10:09.470 --> 00:10:11.600
of erasing to the current port.

00:10:11.690 --> 00:10:14.400
If the Control Manager does not
have a color proc associated

00:10:14.400 --> 00:10:16.900
with a given control,
and if the embedding hierarchy

00:10:16.900 --> 00:10:19.270
doesn't have a color associated
with a given control,

00:10:19.390 --> 00:10:22.040
and if there's no theme brush
associated with the Windows background,

00:10:22.040 --> 00:10:26.060
we're just going to erase to whatever
color happens to be in the current port.

00:10:26.060 --> 00:10:27.960
So if you're careful,
you can use APIs like

00:10:27.960 --> 00:10:31.430
setThemeBackground--and I'm going
to talk a little bit more about that

00:10:31.430 --> 00:10:34.950
later--you can use APIs like that
to prepare the current port before

00:10:35.080 --> 00:10:38.380
you call any Control Manager API,
which might draw.

00:10:38.380 --> 00:10:42.510
Now this is going to work in most cases,
but it flat out won't work

00:10:42.510 --> 00:10:44.140
for animating controls.

00:10:44.140 --> 00:10:47.360
And the reason is that animating
controls animate behind your back.

00:10:47.360 --> 00:10:49.480
You won't have a chance
to preflight any color.

00:10:49.480 --> 00:10:54.960
So you won't be able to use this
current port technique for things

00:10:55.100 --> 00:10:59.810
like push buttons and progress bars
and the other animating controls.

00:11:01.510 --> 00:11:03.970
Now another obvious problem you'll
probably notice as soon as your

00:11:03.970 --> 00:11:06.030
application comes up is shadow clipping.

00:11:06.040 --> 00:11:08.740
I showed it in that demo
application in the tab pane,

00:11:08.740 --> 00:11:12.470
but this particular example shows
it happening on push buttons.

00:11:13.340 --> 00:11:16.060
Generally speaking,
this is caused by applications

00:11:16.070 --> 00:11:20.200
clipping to a control's bounds
before asking that control to draw.

00:11:20.200 --> 00:11:23.000
In Aqua, however,
controls have shadows that lie

00:11:23.000 --> 00:11:26.200
outside their control bounds,
and some controls, like pop-up buttons,

00:11:26.200 --> 00:11:28.200
have traditionally drawn
outside their control bounds.

00:11:28.220 --> 00:11:30.470
So in general,
clipping to a control's bounding

00:11:30.530 --> 00:11:32.200
rectangle isn't going to cut it.

00:11:32.200 --> 00:11:35.180
You're going to end up
cutting off shadows or worse.

00:11:35.200 --> 00:11:40.190
PowerPlant is probably the most obvious
victim of this particular problem.

00:11:40.230 --> 00:11:42.400
I know they're in the
process of fixing that.

00:11:42.400 --> 00:11:45.000
I think they fixed it already, in fact.

00:11:46.830 --> 00:11:50.240
So the way you fix this problem is
don't clip to the controls bounds,

00:11:50.240 --> 00:11:52.160
but you might still have clipping needs.

00:11:52.160 --> 00:11:54.570
You might still want to make sure
that the control doesn't draw willy

00:11:54.570 --> 00:11:56.210
nilly all over the whole screen.

00:11:56.270 --> 00:11:58.540
But you still need to give
the control the flexibility to

00:11:58.610 --> 00:12:00.220
draw where it needs to draw.

00:12:00.280 --> 00:12:04.150
And the way you do that is by asking
the control for its drawable area.

00:12:04.210 --> 00:12:07.350
You can use the get control
region API along with the k

00:12:07.420 --> 00:12:09.640
control structure meta part tag.

00:12:09.750 --> 00:12:11.700
And this lets the control tell you, hey,
you know what?

00:12:11.700 --> 00:12:13.660
I draw all over this area of the screen.

00:12:13.660 --> 00:12:16.740
And this region is going to include
not only the sort of opaque structure,

00:12:16.790 --> 00:12:19.940
but it'll also include the shadow
pixels and things like that.

00:12:20.020 --> 00:12:23.060
So if you make sure to clip
to this structure region,

00:12:23.070 --> 00:12:26.240
you will let the control draw
as much as it needs to draw.

00:12:26.240 --> 00:12:30.080
Now, get control region is not just
useful for finding out where to clip.

00:12:30.080 --> 00:12:34.320
Various controls support certain part
codes depending on the type of control.

00:12:34.320 --> 00:12:36.700
And you can ask, for instance,
a tab control.

00:12:36.700 --> 00:12:41.440
You can say, hey,
what's the region for your third tab?

00:12:41.440 --> 00:12:44.980
And we also have another meta part,
which is called the k control content

00:12:44.980 --> 00:12:46.720
meta part that many controls support.

00:12:46.720 --> 00:12:50.390
And this allows you to query a
control for the region that its

00:12:50.390 --> 00:12:52.100
subcontrol should be embedded into.

00:12:52.100 --> 00:12:55.750
So you can do proper positioning
of your controls within a tab pane,

00:12:55.750 --> 00:12:57.000
for instance.

00:13:00.370 --> 00:13:02.460
So I actually should have
changed the title on this slide.

00:13:02.460 --> 00:13:06.500
This is not just focus ring issues,
but this is also Edit Text Frames.

00:13:06.670 --> 00:13:09.290
As I showed you on the demo,
as I was tabbing back and forth

00:13:09.300 --> 00:13:11.450
between those edit text fields,
you could see the

00:13:11.450 --> 00:13:14.000
Edit Text Frame get darker,
and darker, and darker, and darker.

00:13:14.010 --> 00:13:16.090
And in some cases,
you'll see the same phenomenon

00:13:16.100 --> 00:13:18.480
with the focus ring.

00:13:18.490 --> 00:13:21.600
And essentially,
what this does is it just wrecks the

00:13:21.610 --> 00:13:24.440
visual appearance of your API-- sorry,
of your interface.

00:13:24.470 --> 00:13:26.660
It starts looking heavier, and heavier,
and heavier,

00:13:26.660 --> 00:13:28.350
and it just doesn't fit in with Aqua.

00:13:28.510 --> 00:13:31.590
And the reason this happens
is because certain appearance

00:13:31.690 --> 00:13:35.580
primitives now draw with Alpha,
whereas in Platinum, they did not.

00:13:35.580 --> 00:13:39.280
And the two best examples are focus
rings and the Edit Text Frame.

00:13:39.280 --> 00:13:43.050
If you're going to draw either of these--

00:13:43.490 --> 00:13:47.400
Use either of these primitives to
draw your focus rings and your frames.

00:13:47.400 --> 00:13:49.440
You need to make sure you
erase before you draw.

00:13:49.460 --> 00:13:51.130
Now erase is a little bit of a lie.

00:13:51.140 --> 00:13:59.340
What you might actually need to
do is draw the background or draw

00:13:59.380 --> 00:14:01.190
whatever happens to lie behind your
focus ring or frame because it might

00:14:01.190 --> 00:14:01.190
not just be a simple background.

00:14:04.540 --> 00:14:07.910
So in the demo app I showed you,
the progress bar was animating

00:14:07.910 --> 00:14:11.620
in the total wrong location,
but probably a worse instance of

00:14:11.620 --> 00:14:14.460
this is when your OK button that
should be down in the nice bottom

00:14:14.460 --> 00:14:17.350
right hand corner of your screen
according to the proper UI guidelines,

00:14:17.350 --> 00:14:20.230
all of a sudden jumps up to the
top left and starts pulsing.

00:14:20.320 --> 00:14:22.550
And that's a really quick
indication that something's wrong.

00:14:22.600 --> 00:14:27.500
Fundamentally,
this is caused by a non-zero-zero origin

00:14:27.500 --> 00:14:30.940
in the window that you're dealing with.

00:14:31.080 --> 00:14:35.000
And this non-zero-zero origin can
also cause pattern misalignment,

00:14:35.000 --> 00:14:37.800
like I showed you in the checkbox.

00:14:39.610 --> 00:14:41.060
But you might be thinking to yourself,
well,

00:14:41.060 --> 00:14:42.480
I've been changing the origin for years.

00:14:42.560 --> 00:14:44.550
Heck, PowerPlant does it,
my framework does it,

00:14:44.600 --> 00:14:46.040
our custom application code does it.

00:14:46.100 --> 00:14:47.530
It was working fine, right?

00:14:47.540 --> 00:14:51.950
Well, it was behaving fine,
but it really wasn't working fine.

00:14:51.950 --> 00:14:55.060
If Platinum,
if you tried to draw controls

00:14:55.060 --> 00:14:59.300
on top of patterns or other
pictures under Mac OS 9,

00:14:59.300 --> 00:15:01.090
you would have seen this
same problem happen.

00:15:01.100 --> 00:15:04.040
It just so happened that in most cases
you end up drawing with a solid color,

00:15:04.170 --> 00:15:05.690
so you didn't see the phenomenon.

00:15:05.700 --> 00:15:09.870
And generally speaking,
it's practically impossible to do

00:15:09.940 --> 00:15:14.520
willy-nilly origin changes to your
window on Mac OS X because you're

00:15:14.520 --> 00:15:16.740
going to run into these two problems.

00:15:17.730 --> 00:15:19.940
But you have good reasons for
wanting to change the origin.

00:15:19.940 --> 00:15:23.100
I mean, it's a valuable tool, right?

00:15:23.100 --> 00:15:25.850
So there are safe ways to do that.

00:15:25.990 --> 00:15:29.760
The one thing you need to keep in mind
is that the control manager really,

00:15:29.760 --> 00:15:33.270
really, really wants a zero-zero origin
associated with the window that

00:15:33.270 --> 00:15:34.930
it's drawing its controls in.

00:15:34.930 --> 00:15:39.070
And in fact, every control's bounding
rectangle must be relative to a

00:15:39.070 --> 00:15:43.250
zero-zero origin in order for the
control manager to work properly.

00:15:43.260 --> 00:15:45.540
For instance,
if you have a default button in the

00:15:45.580 --> 00:15:49.390
bottom right-hand corner of your
window and you want it at position 200,

00:15:49.530 --> 00:15:53.570
300 relative to the window's top left,
you need to make sure the control's

00:15:53.610 --> 00:15:56.310
bounding rectangle is 200,
300.

00:15:57.370 --> 00:16:00.880
If you do need to change the origin,
you want to make sure you

00:16:01.080 --> 00:16:03.200
save and restore it properly.

00:16:03.200 --> 00:16:05.860
The way to do so is very straightforward.

00:16:05.860 --> 00:16:08.660
In order to determine what
a port's current origin is,

00:16:08.660 --> 00:16:11.690
unfortunately we don't have
an API for that directly,

00:16:11.690 --> 00:16:14.200
but what you do is you get
the port's bounding rectangle,

00:16:14.200 --> 00:16:16.710
just save off the top left
corner of the bounding rectangle.

00:16:16.710 --> 00:16:17.680
That's its origin.

00:16:17.680 --> 00:16:19.730
Then you can change the origin
to whatever you need it to be,

00:16:19.730 --> 00:16:21.480
do your setup and other drawing.

00:16:21.480 --> 00:16:24.170
When you're done drawing,
restore the origin to

00:16:24.170 --> 00:16:27.410
the way it was before.

00:16:27.520 --> 00:16:29.320
Let me go into a little bit
more background about why

00:16:29.320 --> 00:16:32.740
the pulsing buttons jump,
just to give you a better feel of

00:16:32.750 --> 00:16:35.300
exactly why this problem happens.

00:16:35.300 --> 00:16:39.640
If you have your control with a
bounding rectangle whose top left is 0,

00:16:39.640 --> 00:16:44.590
0, and your framework or your application
would make sure to adjust the

00:16:44.690 --> 00:16:48.860
origin such that it's negative 200,
300 before it draws the control,

00:16:48.860 --> 00:16:53.840
hoping that the control really will draw
down 200 pixels down and 300 pixels down.

00:16:53.840 --> 00:16:55.360
If you have a bounding rectangle
with 300 pixels to the right

00:16:55.400 --> 00:16:57.970
of the window's origin,
that's going to work if and only if you

00:16:57.970 --> 00:17:02.570
have explicit time to set up the port
before you ask that control to draw.

00:17:02.660 --> 00:17:07.800
However, because controls draw in timers,
you don't have that pre-flight chance.

00:17:07.800 --> 00:17:11.760
In fact, when a control's timer fires,
it can't make any assumptions

00:17:11.940 --> 00:17:13.740
about the current port.

00:17:13.740 --> 00:17:16.130
This is also a general rule
you'll need to follow yourselves

00:17:16.130 --> 00:17:17.940
when using Carbon event timers.

00:17:17.940 --> 00:17:20.520
A timer might be firing
at some totally odd time,

00:17:20.520 --> 00:17:23.620
like when menus are down or when
you're tracking in another control.

00:17:23.670 --> 00:17:25.630
Therefore,
the origin may have been set up

00:17:25.630 --> 00:17:28.880
to do something totally different,
and your timer needs to set the

00:17:28.980 --> 00:17:31.600
origin and things like the clip
to something very predictable.

00:17:31.840 --> 00:17:34.290
And the control manager,
for predictability's sake,

00:17:34.290 --> 00:17:35.770
sets the origin to 0, 0.

00:17:35.780 --> 00:17:38.130
Therefore, if your button's top
left-hand corner is 0,

00:17:38.130 --> 00:17:41.340
0, well, your button's going to draw
at the top left-hand corner of

00:17:41.340 --> 00:17:42.870
the screen-- or of the window,
sorry.

00:17:46.040 --> 00:17:49.090
Pattern alignment is not the
only pattern issue you're going

00:17:49.090 --> 00:17:50.800
to run into in all likelihood.

00:17:50.860 --> 00:17:52.770
Sometimes you'll want
to draw with a pattern,

00:17:52.770 --> 00:17:54.140
you've got to color instead.

00:17:54.140 --> 00:17:57.120
Other times you'll want to
draw the opposite direction.

00:17:57.120 --> 00:18:00.060
You've got to color and
you wanted a pattern.

00:18:00.060 --> 00:18:02.140
Other times you'll just see
strange gray backgrounds,

00:18:02.140 --> 00:18:04.240
which look great in platinum,
but why are they coming

00:18:04.240 --> 00:18:05.110
up in my Aqua interface?

00:18:05.160 --> 00:18:07.510
And worse yet is a System 7
white background that's probably

00:18:07.510 --> 00:18:10.950
been in your application for
about the last five years.

00:18:12.980 --> 00:18:18.780
The reason this happens is
because backgrounds under Aqua can

00:18:18.830 --> 00:18:21.900
be either colors or patterns.

00:18:21.900 --> 00:18:25.690
And your application needs to be aware
of that and needs to be expecting it.

00:18:26.030 --> 00:18:29.830
Quick Draw's behavior when there
is a pattern in the current port

00:18:29.900 --> 00:18:34.600
is to draw using that pattern,
not necessarily the color you've set up.

00:18:34.720 --> 00:18:37.220
So if you use an Appearance
Manager API to set up a

00:18:37.290 --> 00:18:39.830
pattern for your window,
and then a little while later you

00:18:39.830 --> 00:18:42.700
change the color to white because
you want to draw some area white,

00:18:42.780 --> 00:18:45.200
then you go to erase and all of
a sudden the pattern comes up,

00:18:45.220 --> 00:18:48.360
but I just set the color to white,
why is this pattern coming up?

00:18:48.450 --> 00:18:50.780
Well, simply speaking,
that's because the pattern

00:18:50.910 --> 00:18:52.530
is still in the port,
and that's what

00:18:52.530 --> 00:18:53.930
Quick Draw is going to use.

00:18:54.190 --> 00:18:58.090
So in order to make sure that
you don't have unwanted patterns

00:18:58.100 --> 00:19:00.830
associated with the current port,
you can call Normalize

00:19:00.830 --> 00:19:01.980
Theme Drawing State.

00:19:02.100 --> 00:19:07.030
Now this API was introduced in,
I believe, the Mac OS 8.5 timeframe,

00:19:07.030 --> 00:19:10.360
and it was designed to just do a quick
wipe of the current port settings,

00:19:10.360 --> 00:19:13.500
such that it's in a very predictable,
clean drawing state.

00:19:13.540 --> 00:19:16.540
It will make sure to eliminate
any pattern that's in the port.

00:19:16.840 --> 00:19:18.900
It will set the
foreground color to black,

00:19:18.990 --> 00:19:22.570
the background color to white,
and tweak a few other things

00:19:22.570 --> 00:19:24.750
to make it more predictable.

00:19:25.880 --> 00:19:29.350
Now, these theme drawing state
APIs also have a saver and restore,

00:19:29.350 --> 00:19:33.510
which are very useful if you want to
make sure you don't disrupt the system's

00:19:33.510 --> 00:19:37.140
use of patterns in some callback or
possibly in a Carbon event handler.

00:19:37.140 --> 00:19:41.120
And you use the save theme drawing state
and restore theme drawing state to save

00:19:41.120 --> 00:19:43.250
and restore the theme drawing state.

00:19:43.260 --> 00:19:47.640
They will pass back out an opaque
reference to a whole bunch of settings.

00:19:47.640 --> 00:19:49.140
You hang on to these settings.

00:19:49.140 --> 00:19:51.960
You can do your own port preparation,
often with normalized theme

00:19:51.960 --> 00:19:53.730
drawing state or other preparation.

00:19:53.740 --> 00:19:55.880
Do your drawing,
and finally when you're done,

00:19:55.890 --> 00:19:58.850
you call restore theme drawing
state and pass in the opaque object,

00:19:58.860 --> 00:20:02.400
and it'll set things back
up the way they were before.

00:20:05.030 --> 00:20:09.510
Now, if you happen to be drawing gray
backgrounds in your windows just because,

00:20:09.510 --> 00:20:12.230
well, that's what you always did and
that's what looked right in Platinum

00:20:12.230 --> 00:20:15.200
and I didn't know we had to use
these Appearance Manager APIs,

00:20:15.310 --> 00:20:15.930
well, you know what?

00:20:16.100 --> 00:20:20.090
You've got to use these Appearance
Manager APIs to draw the Aqua patterns.

00:20:20.180 --> 00:20:26.750
And in fact,
these same Appearance Manager APIs will

00:20:26.750 --> 00:20:26.750
let you draw the right thing
on CarbonLib on Mac OS 9.

00:20:26.980 --> 00:20:31.280
The Appearance Manager supports a
whole bunch of different backgrounds

00:20:31.390 --> 00:20:34.720
and they're tagged at sort of a
high level with the notion of theme

00:20:34.720 --> 00:20:36.590
brushes and theme backgrounds.

00:20:36.600 --> 00:20:40.900
Theme brushes are, like I said,
used in a high level way.

00:20:40.900 --> 00:20:44.180
You tell the Appearance
Manager what sort of background

00:20:44.290 --> 00:20:45.440
for what case you're drawing in.

00:20:45.440 --> 00:20:48.020
You might say,
"I'm drawing in an active dialog

00:20:48.020 --> 00:20:52.300
right now," or "I'm drawing a toolbar
background right now," or even,

00:20:52.300 --> 00:20:55.230
"I want to draw a bevel
button center fill.

00:20:55.240 --> 00:21:00.450
Can you please set that up for me?"
We've got several dozen theme brushes

00:21:00.470 --> 00:21:03.440
and theme backgrounds in Appearance.h.

00:21:03.440 --> 00:21:05.490
You can go ahead and take
a look there and see which

00:21:05.490 --> 00:21:06.900
ones you want to start using.

00:21:06.900 --> 00:21:10.650
In general, you want to use the dialog,
alert, utility window,

00:21:10.650 --> 00:21:12.640
toolbar backgrounds, things like that.

00:21:12.640 --> 00:21:15.580
That'll get you the proper Aqua lines
on Mac OS X and on Platinum

00:21:15.650 --> 00:21:17.200
they'll draw the proper gray.

00:21:17.200 --> 00:21:20.110
The way you use these is
typically through set theme

00:21:20.110 --> 00:21:22.080
background and set theme pen.

00:21:22.080 --> 00:21:25.130
Set theme background takes a theme brush.

00:21:25.140 --> 00:21:28.980
It talks to the Appearance Manager,
figures out what color or pattern needs

00:21:28.980 --> 00:21:31.960
to be applied to the current port,
and then applies it to the current port.

00:21:32.100 --> 00:21:34.680
Set theme background applies
it to the background,

00:21:34.680 --> 00:21:37.250
so you can follow that up with
an erase rect or any other

00:21:37.250 --> 00:21:39.140
Quick Draw API that might erase.

00:21:39.180 --> 00:21:41.990
Set theme pen applies
it to the foreground,

00:21:41.990 --> 00:21:46.960
so you can follow that up with any
Quick Draw routine that's going to paint.

00:21:47.190 --> 00:21:50.560
As I mentioned before, there's this
Set Theme Window Background API.

00:21:50.610 --> 00:21:52.550
How is this different
from Set Theme Background,

00:21:52.550 --> 00:21:53.340
you might ask?

00:21:53.540 --> 00:21:58.070
Set Theme Window Background associates
a theme brush with a window

00:21:58.070 --> 00:21:59.840
on a permanent basis.

00:21:59.960 --> 00:22:02.820
You can come in later and call
Set Theme Window Background again

00:22:02.840 --> 00:22:05.140
and set up a different
theme brush to that window,

00:22:05.270 --> 00:22:07.600
but generally speaking,
it's remembered until your next

00:22:07.690 --> 00:22:09.360
call to Set Theme Window Background.

00:22:09.500 --> 00:22:13.240
Whereas Set Theme Background transiently
just applies this background

00:22:13.240 --> 00:22:16.800
setting to the port and it
can get stomped upon later.

00:22:16.920 --> 00:22:20.070
Now the other cool aspect about
Set Theme Window Background is

00:22:20.070 --> 00:22:22.570
it lets the window manager
be a lot more efficient.

00:22:22.600 --> 00:22:26.620
Because there's this brush constant
permanently associated with the window,

00:22:26.700 --> 00:22:29.670
the window manager can use it when
it needs to paint a window as it

00:22:29.760 --> 00:22:31.400
comes on screen for the first time.

00:22:31.450 --> 00:22:34.570
This saves a lot of time
and a lot of your hassle

00:22:34.730 --> 00:22:38.070
because in a normal situation,
the window might paint white and

00:22:38.160 --> 00:22:41.300
then later you'll get an update of
it and then you'll draw the lines.

00:22:41.300 --> 00:22:43.450
And you really don't want
to be seeing that sort of

00:22:43.450 --> 00:22:44.990
flicker on Mac OS X under Aqua.

00:22:45.040 --> 00:22:46.500
It's kind of crummy.

00:22:46.500 --> 00:22:48.920
So you can start using the
Set Theme Window Background API to

00:22:48.930 --> 00:22:51.500
associate a theme brush with your window.

00:22:51.500 --> 00:22:54.140
There's one other
Theme Background API and that's

00:22:54.240 --> 00:22:55.980
called Apply Theme Background.

00:22:56.040 --> 00:22:57.800
And it's a little bit different.

00:22:57.800 --> 00:23:00.900
It's essentially similar to
Set Theme Background in that it

00:23:00.900 --> 00:23:04.970
takes a theme background constant
and shoves the right color or

00:23:04.970 --> 00:23:06.900
pattern into the current port.

00:23:06.900 --> 00:23:11.140
But the difference here is that
Apply Theme Background also takes a

00:23:11.140 --> 00:23:14.190
rectangle to align that background to.

00:23:14.210 --> 00:23:16.200
The classic example of
this is a background.

00:23:16.230 --> 00:23:22.500
The background that fills a tab
pane doesn't want to align to the

00:23:22.510 --> 00:23:24.200
window's top left-hand corner.

00:23:24.280 --> 00:23:27.560
It wants to align to the top left-hand
corner of the tab pane itself.

00:23:27.700 --> 00:23:30.700
So that's why you need to pass in
a particular bounding rectangle.

00:23:30.700 --> 00:23:35.200
And we've got several theme
backgrounds that are useful

00:23:35.200 --> 00:23:37.200
for Apply Theme Background in
the right sorts of cases.

00:23:37.200 --> 00:23:40.690
You can take a look at
Appearance.h to find those as well.

00:23:44.870 --> 00:23:48.160
So non-Aqua text is
sort of a sticky issue.

00:23:48.230 --> 00:23:50.800
When you bring your app up,
you see all these really wacky white halo

00:23:50.800 --> 00:23:52.800
problems and really ugly visual things.

00:23:52.800 --> 00:23:55.240
You fix all those and you go, yeah,
I think I'm done.

00:23:55.240 --> 00:23:56.800
I think I got it ready.

00:23:56.820 --> 00:23:59.700
But you kind of glossed over the fact
that your text doesn't quite match up.

00:23:59.870 --> 00:24:02.740
And you might be really tempted to
just leave your application that way,

00:24:02.760 --> 00:24:03.680
but please don't.

00:24:03.680 --> 00:24:05.470
It looks really,
really crummy compared to

00:24:05.490 --> 00:24:06.550
the rest of the Aqua text.

00:24:06.680 --> 00:24:12.800
And there's another downside in
that the ugly text is not only ugly,

00:24:12.800 --> 00:24:15.500
but it's totally Unicode unsavvy.

00:24:15.550 --> 00:24:17.710
It's drawn with Mac encoding characters.

00:24:17.710 --> 00:24:19.680
You can't have mixed run strings.

00:24:19.680 --> 00:24:24.030
Your file system might have a file name
that has five different languages in it

00:24:24.070 --> 00:24:26.680
using five different fonts to display it.

00:24:26.680 --> 00:24:29.970
And if you try to render it with
the APIs you're currently using,

00:24:30.000 --> 00:24:32.790
you're going to just get jumbled garbage
and it's going to look just horrible.

00:24:32.800 --> 00:24:37.090
And the reason it looks bad is
because you're using the old

00:24:37.180 --> 00:24:39.710
Quick Draw text drawing APIs.

00:24:40.890 --> 00:24:45.420
There's a number of ways you can make
your text look really good under Aqua.

00:24:45.420 --> 00:24:49.940
The most straightforward way is to
adopt the system control definitions,

00:24:49.940 --> 00:24:53.620
window definitions,
and menu definitions as much as possible.

00:24:53.710 --> 00:24:55.870
The more you adopt those,
the less work you have

00:24:55.870 --> 00:24:57.200
to do in the first place.

00:24:57.260 --> 00:25:01.430
All of these devprocs have been revved
to use AquaText where it makes sense.

00:25:01.500 --> 00:25:03.530
There's actually a few
exceptions to this.

00:25:03.540 --> 00:25:06.560
The most obvious one is the
old school EditText control.

00:25:06.650 --> 00:25:09.950
The old school EditText control
is going to forever draw with

00:25:09.970 --> 00:25:14.160
QuickDrawText because it's
forever associated with TextEdit.

00:25:14.250 --> 00:25:18.460
We're not bringing TextEdit forward,
so if you really want to do

00:25:18.540 --> 00:25:21.770
proper Aqua-savvy text editing,
you should use the

00:25:21.850 --> 00:25:23.460
Unicode EditText control.

00:25:23.530 --> 00:25:26.840
Like the rest of our AquaText story,
not only does it look good,

00:25:26.960 --> 00:25:31.480
but it also fully supports Unicode in
multiple languages and stuff like that.

00:25:31.870 --> 00:25:35.040
And if you have certain static text
areas on your screen that you're using

00:25:35.040 --> 00:25:38.940
Quick Draw Text APIs to draw directly,
one easy way to make those

00:25:38.940 --> 00:25:42.530
Aqua-savvy is to begin using
the Static Text C-Def instead.

00:25:42.700 --> 00:25:46.130
The Static Text C-Def is really
good for simple needs when you just

00:25:46.160 --> 00:25:49.700
want to draw a little caption or
a little label on top of something.

00:25:49.700 --> 00:25:52.040
And using the Control Manager's
embedding support,

00:25:52.040 --> 00:25:54.700
it'll let you draw on top of
most arbitrary backgrounds.

00:25:54.700 --> 00:25:57.780
And if you don't like the overhead
of using a control or if you need

00:25:57.780 --> 00:26:01.700
a little bit of a quicker solution,
you can always use the Theme Text APIs.

00:26:01.700 --> 00:26:05.700
I'm going to talk a little bit
more about that in a slide or two.

00:26:05.700 --> 00:26:09.690
And if that doesn't work out for you,
you can always use ATSUI or MLTE.

00:26:09.700 --> 00:26:13.700
Now these are the lowest level ways for
a Carbon app to draw Aqua-savvy text.

00:26:13.700 --> 00:26:15.640
It's a little more
complex to set up and use,

00:26:15.710 --> 00:26:18.030
but it gives you a heck of
a lot more flexibility and a

00:26:18.030 --> 00:26:19.700
little bit better performance.

00:26:19.700 --> 00:26:23.760
The downside of using these APIs is
there is not currently a way to

00:26:23.760 --> 00:26:24.700
make your application more flexible.

00:26:24.700 --> 00:26:27.850
You can always use the
Theme Text API to get the proper

00:26:27.850 --> 00:26:31.700
theme fonts for given situations
to use them with ATSUI and MLTE.

00:26:31.750 --> 00:26:33.700
This is something that we're
going to add in the future,

00:26:33.700 --> 00:26:36.700
but for right now,
if you use ATSUI and MLTE,

00:26:36.700 --> 00:26:41.700
you might see a few strangenesses when
you try to render mixed language text.

00:26:44.080 --> 00:26:47.270
So the quick and easy solution
to get this Aqua text is

00:26:47.300 --> 00:26:48.960
via the theme text APIs.

00:26:48.960 --> 00:26:53.120
We've got APIs to do drawing
and measuring and truncation,

00:26:53.190 --> 00:26:57.330
and essentially they're meant to be very
easy replacements for the quick draw text

00:26:57.370 --> 00:26:59.000
routines you've already been used to.

00:26:59.000 --> 00:27:02.300
If you're using draw text or
draw string or TE text box,

00:27:02.410 --> 00:27:04.990
you'll want to use draw theme text box.

00:27:05.010 --> 00:27:07.590
Likewise, if you're using text width
or get theme font info to

00:27:07.600 --> 00:27:11.000
determine widths and heights,
you can use get theme text dimensions.

00:27:11.000 --> 00:27:13.990
Now, certain theme text draws
shadow outside of it.

00:27:13.990 --> 00:27:18.000
Two best examples are window
title bars and push button fonts.

00:27:18.010 --> 00:27:21.330
And you can determine the amount
outside of your text that the

00:27:21.330 --> 00:27:24.990
shadow will draw via the get
theme text shadow outside API.

00:27:25.030 --> 00:27:28.060
This returns a rectangle,
and each of the fields of the

00:27:28.060 --> 00:27:32.060
rectangle tells you how far out each
of the sides the shadows will draw,

00:27:32.060 --> 00:27:34.990
so you can take that into
account if you need to clip or

00:27:35.000 --> 00:27:37.000
do some other stuff like that.

00:27:37.000 --> 00:27:37.420
And if you were using trunk string
or trunk text to do your truncation,

00:27:37.420 --> 00:27:38.000
you can use get theme text box
to determine widths and heights.

00:27:39.000 --> 00:27:39.380
So if you're using draw text or
draw string or get theme text box,

00:27:39.380 --> 00:27:40.000
you'll want to use draw theme text
box to determine widths and heights.

00:27:40.000 --> 00:27:40.340
If you're using draw text or draw
string or get theme text box to

00:27:40.340 --> 00:27:40.670
determine widths and heights,
you can use get theme text box

00:27:40.680 --> 00:27:41.000
to determine widths and heights.

00:27:41.000 --> 00:27:43.760
easily switch over to
Truncate Theme Text.

00:27:43.760 --> 00:27:46.240
All of these Theme Text APIs are
Unicode savvy.

00:27:46.240 --> 00:27:48.920
They take CFStrings,
and they're fairly easy to use.

00:27:48.920 --> 00:27:50.900
I tried to model them
after the Quick Draw text

00:27:50.900 --> 00:27:53.220
routines that they replaced,
so they're pretty easy to just

00:27:53.220 --> 00:27:55.610
swap in and out very easily.

00:27:57.220 --> 00:28:01.440
All of these theme text APIs also
take the notion of a theme font ID.

00:28:01.440 --> 00:28:04.050
Theme font IDs have actually
been around for a while.

00:28:04.060 --> 00:28:07.100
The Appearance Manager supports
a way of asking,

00:28:07.100 --> 00:28:09.510
"What font will I draw on if
I want to draw on the system

00:28:09.510 --> 00:28:13.100
font?" We had this support,
I believe, in the Mac OS 8 timeframe.

00:28:13.140 --> 00:28:20.130
We took these theme font IDs forward,
added a whole bunch more,

00:28:20.130 --> 00:28:20.130
and what they essentially are is

00:28:20.310 --> 00:28:22.810
and I'll take away for you to
say you know what I want to draw

00:28:22.810 --> 00:28:25.790
a push button font or I want to
draw on the system font or I want

00:28:25.800 --> 00:28:27.960
to draw on the window title font.

00:28:27.980 --> 00:28:33.990
And the cool thing about the theme font
IDs is not only do they specify one font,

00:28:34.000 --> 00:28:37.500
they also specify that font
size and its shadowing effects.

00:28:37.520 --> 00:28:41.570
But even cooler,
it will resolve to more than one font

00:28:41.800 --> 00:28:45.600
if the string you are about to render
has more than one language in it.

00:28:45.610 --> 00:28:49.120
You can give us one CFString that
contains Roman text,

00:28:49.130 --> 00:28:53.140
Japanese text, in the future Korean text
and stuff like that.

00:28:53.180 --> 00:28:57.250
And we will render that one string in
multiple fonts as we see it's necessary.

00:28:57.280 --> 00:28:59.150
And of course,
if you call the measuring APIs,

00:28:59.280 --> 00:29:02.450
we're going to return accurate
measurements for all the variety of

00:29:02.450 --> 00:29:05.480
fonts that we're going to end up using.

00:29:08.130 --> 00:29:12.440
Now, the theme font IDs that we offer is
only a family of about a dozen of them,

00:29:12.440 --> 00:29:14.400
and you might have more custom needs.

00:29:14.420 --> 00:29:18.320
If you have custom needs, you can use the
KThemeCurrentPortMetaFont.

00:29:18.610 --> 00:29:21.210
This meta font lets you set
up the current port with

00:29:21.210 --> 00:29:26.200
whatever text font size,
style, and face you want,

00:29:26.230 --> 00:29:29.030
and the Appearance Manager routines
will pull that information

00:29:29.080 --> 00:29:31.130
out of the current port,
map it into the right

00:29:31.130 --> 00:29:35.170
data structures for ATSUI,
and end up rendering Aqua text with it.

00:29:35.520 --> 00:29:38.740
Unfortunately, there's a few limitations.

00:29:38.740 --> 00:29:40.270
It doesn't support all styles.

00:29:40.380 --> 00:29:43.550
We don't support outline and shadow
styles because the underlying engine,

00:29:43.550 --> 00:29:45.500
ATSUI, doesn't support either of those.

00:29:45.500 --> 00:29:49.490
And likewise, you don't get the proper
Aqua shadowing effects.

00:29:49.570 --> 00:29:52.890
The only way to get Aqua shadowing
effects is to use the theme font ID,

00:29:52.900 --> 00:29:55.650
which maps to one of
those shadowing effects.

00:29:55.890 --> 00:29:59.700
And the last downside is that it's
got suboptimal Unicode support.

00:29:59.700 --> 00:30:03.740
If you pass in a Unicode string
with multiple languages in it,

00:30:03.740 --> 00:30:05.750
we're going to do our best to
guess the right fonts for that,

00:30:05.990 --> 00:30:08.430
and we're going to
accurately render the glyphs,

00:30:08.430 --> 00:30:10.940
but the fonts we choose
to render other text in,

00:30:10.950 --> 00:30:14.400
let's say Japanese text or Korean text,
if you're in an otherwise

00:30:14.400 --> 00:30:17.390
Roman application,
those fonts may not match visually

00:30:17.390 --> 00:30:21.100
very well with the one font you
specified in the current port.

00:30:21.200 --> 00:30:25.200
So that's one of the drawbacks
to using the current port font.

00:30:25.200 --> 00:30:29.050
You'll want to stick with
the higher level theme font

00:30:29.050 --> 00:30:32.660
consonants as much as you can.

00:30:33.900 --> 00:30:37.770
Now the Theme Text APIs don't
actually do anything with the color.

00:30:37.990 --> 00:30:40.800
Theme Font IDs don't
actually imply a color.

00:30:40.810 --> 00:30:44.300
We let you choose what color you want to
draw the text in entirely on your own.

00:30:44.300 --> 00:30:48.800
And the easiest way to do this is
via the Set Theme Text Color API.

00:30:48.930 --> 00:30:52.270
Set Theme Text Color,
like the Draw Theme Text APIs,

00:30:52.520 --> 00:30:57.320
has a constant, a family of constants,
which lets you tell us what sort of

00:30:57.320 --> 00:30:59.040
thing you're trying to draw text on.

00:30:59.040 --> 00:31:01.020
You can say,
"I'm trying to draw text on my active

00:31:01.100 --> 00:31:05.800
dialog," or "I'm trying to draw text on
an inactive dialog," and those two theme

00:31:05.800 --> 00:31:10.200
text colors will resolve into different
raw colors to draw the font with.

00:31:10.200 --> 00:31:12.320
In the active case,
we're going to draw with black.

00:31:12.380 --> 00:31:14.580
In the inactive case,
we're going to draw with the proper gray.

00:31:14.600 --> 00:31:17.910
We have a whole bunch of these theme
text colors pretty much on a one-to-one

00:31:18.000 --> 00:31:22.050
correspondence with the various theme
buttons and theme font IDs that you might

00:31:22.050 --> 00:31:24.350
be used to from the Appearance Manager.

00:31:26.820 --> 00:31:29.500
Now, if you've had a chance to
use the Theme Text APIs,

00:31:29.500 --> 00:31:31.520
most of you probably said, "Yeah,
this works.

00:31:31.540 --> 00:31:34.920
This is pretty good." But some of
you might be trying to draw a whole

00:31:34.920 --> 00:31:36.490
lot of text in a given window.

00:31:36.570 --> 00:31:41.930
And, well, you know,
the Theme Text APIs are

00:31:41.930 --> 00:31:41.930
going to be a little slow.

00:31:42.860 --> 00:31:48.770
There are a couple ways to deal with
this and make the Theme Text APIs faster.

00:31:48.940 --> 00:31:56.150
The best way is to take advantage
of the CGContextRef parameter that

00:31:56.150 --> 00:31:56.150
DrawThemeTextBox allows you to pass in.

00:31:56.160 --> 00:31:59.270
If you've had a chance to attend
any of the Quartz drawing sessions,

00:31:59.420 --> 00:32:03.100
you'll know that a CG Context
Ref is an opaque reference.

00:32:03.100 --> 00:32:05.100
It's kind of like a Quartz graph port.

00:32:05.100 --> 00:32:07.090
It stores all your drawing
settings that you want to use.

00:32:07.100 --> 00:32:10.210
If you don't pass one of these
into the Draw Theme Text Box API,

00:32:10.220 --> 00:32:12.090
we're going to create one for you.

00:32:12.090 --> 00:32:13.020
And that's okay.

00:32:13.110 --> 00:32:15.080
We're going to even pull certain
settings out of the current port

00:32:15.080 --> 00:32:18.080
and apply them to the context,
and that's also okay.

00:32:18.240 --> 00:32:20.090
The problem is that it
takes a little bit of time.

00:32:20.090 --> 00:32:23.520
So if you have 50 calls to
Draw Theme Text Box and you pass a

00:32:23.520 --> 00:32:27.100
null context ref to each of those,
we're going to end up creating a context,

00:32:27.100 --> 00:32:29.090
syncing it with the
current port 50 times.

00:32:29.100 --> 00:32:32.770
And that's just some performance
issues you don't want to run into.

00:32:33.370 --> 00:32:36.400
If you want to bypass this,
the right thing to do is create

00:32:36.400 --> 00:32:39.140
your context ahead of time,
set it up the way you want it with

00:32:39.250 --> 00:32:41.800
the proper color and the proper
clipping and stuff like that,

00:32:41.930 --> 00:32:47.080
and then pass that one context in to each
of your 50 Draw Theme Text Box calls.

00:32:47.250 --> 00:32:49.590
That's probably going to solve
a majority of your needs.

00:32:49.730 --> 00:32:53.960
But one thing I found when I was revving
certain parts of the system to use these

00:32:54.000 --> 00:32:58.650
theme text routines is that they use
the measuring and truncation routines

00:32:58.670 --> 00:33:00.730
multiple times before each draw.

00:33:00.790 --> 00:33:04.520
The static text control, for instance,
might measure its bounds twice,

00:33:04.640 --> 00:33:06.940
once to figure out
what rectangle to clip,

00:33:06.950 --> 00:33:09.510
and then it might measure the text
again to know what rectangle to

00:33:09.580 --> 00:33:11.040
pass in to draw a theme text box.

00:33:11.040 --> 00:33:12.840
Well, that's silly,
and if your application

00:33:12.870 --> 00:33:14.750
is doing the same thing,
it should really stop.

00:33:14.940 --> 00:33:18.580
Every call to the measurement
routine is actually fairly expensive.

00:33:18.640 --> 00:33:21.630
We're working on making that a lot
faster through things like caching,

00:33:21.650 --> 00:33:23.890
but in general,
if you have redundant calls

00:33:23.890 --> 00:33:26.340
to the measuring routines or
even the drawing routines,

00:33:26.340 --> 00:33:28.130
I found a few cases in my
own code where I had that,

00:33:28.270 --> 00:33:29.440
you want to eliminate them.

00:33:29.440 --> 00:33:30.740
And cache.

00:33:30.740 --> 00:33:33.440
The measurement values, if you can.

00:33:33.440 --> 00:33:37.340
For instance,
if you're drawing a static text item,

00:33:37.460 --> 00:33:40.740
you might calculate the bounds
for that static text item once,

00:33:40.740 --> 00:33:43.740
store it off in your object pointer
that represents that static text item,

00:33:43.860 --> 00:33:45.840
and then use that bounding
rectangle every time you draw.

00:33:45.840 --> 00:33:48.280
You don't even need to measure
every time before you draw,

00:33:48.290 --> 00:33:50.610
because you've already
done the measurement once.

00:33:51.950 --> 00:33:55.490
One other thing we're working
on besides the caching,

00:33:55.510 --> 00:34:00.080
I want to make a way possible such
that you can use ATSUI and MLTE in

00:34:00.080 --> 00:34:04.970
a proper theme font fashion,
so it gives you total low-level

00:34:04.970 --> 00:34:07.990
custom control as well as the
proper Unicode font stuff.

00:34:08.080 --> 00:34:11.130
That's not available now,
but it's something I'm looking at

00:34:11.130 --> 00:34:13.040
for the relatively near future.

00:34:14.160 --> 00:34:17.400
I've talked a lot about the
Control Manager in the session so far,

00:34:17.540 --> 00:34:21.330
but a lot of the same principles
apply to the Appearance Manager.

00:34:21.390 --> 00:34:24.840
You can draw virtually any widget
that the Control Manager draws with

00:34:24.920 --> 00:34:26.370
the Appearance Manager primitives.

00:34:26.400 --> 00:34:28.490
We've got low-level primitives
for drawing buttons,

00:34:28.500 --> 00:34:32.210
for drawing edit text frames,
focus rings, tabs, group boxes,

00:34:32.250 --> 00:34:33.600
all sorts of stuff.

00:34:33.660 --> 00:34:36.320
And the important thing to realize
is you're going to run into the same

00:34:36.320 --> 00:34:39.490
sorts of visual issues if you draw
with the Appearance Manager primitives.

00:34:39.560 --> 00:34:42.490
The Appearance Manager draws with Alpha.

00:34:42.560 --> 00:34:45.060
The Appearance Manager sometimes
needs to erase.

00:34:45.130 --> 00:34:47.100
You need to be aware of
both of these things,

00:34:47.140 --> 00:34:49.770
and some of the Appearance
Manager APIs allow you to

00:34:49.770 --> 00:34:51.900
pass in a ThemeErase proc.

00:34:51.900 --> 00:34:55.120
This ThemeErase proc gives you a
chance to erase properly before the

00:34:55.240 --> 00:34:57.180
Appearance Manager needs to render.

00:34:57.240 --> 00:34:59.240
And again,
that erase should be in quotes because

00:34:59.300 --> 00:35:02.820
sometimes you're not literally erasing,
you're drawing something behind the

00:35:02.820 --> 00:35:05.290
new widget you're trying to draw.

00:35:05.600 --> 00:35:08.520
And likewise,
the Appearance Manager will draw outside

00:35:08.520 --> 00:35:10.740
of the bounding rectangles you give it.

00:35:10.740 --> 00:35:13.610
If you give the Appearance
Manager a 20 pixel tall bounding

00:35:13.610 --> 00:35:16.250
rectangle to draw a button,
well, the shadow's going to go

00:35:16.270 --> 00:35:17.960
outside that bounding rectangle.

00:35:18.030 --> 00:35:21.450
And the way you determine how
far outside is to use an API like

00:35:21.460 --> 00:35:23.820
Get Theme Button Background Bounds.

00:35:23.900 --> 00:35:26.900
This particular API tells
you how far out,

00:35:26.950 --> 00:35:30.450
at the extreme case,
a given widget will draw.

00:35:30.450 --> 00:35:33.460
And so you can do clipping or whatever
else you need to do with that.

00:35:34.200 --> 00:35:37.180
And lastly,
we offer a new API as part of Carbon in

00:35:37.270 --> 00:35:39.090
Mac OS X called Get Theme Metrics.

00:35:39.290 --> 00:35:44.550
Generally speaking widgets under Aqua are
about the same size under Platinum,

00:35:44.670 --> 00:35:46.100
but there are a few exceptions.

00:35:46.110 --> 00:35:48.950
I think the tabs and tab
panes are a few pixels taller.

00:35:49.100 --> 00:35:52.000
The amount that a focus
ring draws outside the input

00:35:52.000 --> 00:35:54.100
rectangle is a little bit wider.

00:35:54.100 --> 00:35:57.970
Edit text frames actually don't
draw as far outside the bounding

00:35:57.970 --> 00:36:01.330
rectangle as they did on Platinum,
but they draw inside the

00:36:01.330 --> 00:36:03.100
rectangle somewhat now,
too.

00:36:03.230 --> 00:36:07.100
And we offer theme metrics for you
to ask for this sort of information.

00:36:07.100 --> 00:36:09.640
There's probably, wow,
five or six dozen theme

00:36:09.640 --> 00:36:11.100
metrics in the headers.

00:36:11.100 --> 00:36:15.040
You can find out how tall the tabs are,
how much an individual

00:36:15.040 --> 00:36:18.060
tab overlaps the tab pane,
stuff like that.

00:36:19.730 --> 00:36:21.240
Alright,
so I've talked about the Control Manager,

00:36:21.250 --> 00:36:23.920
I've talked about the Appearance Manager,
and they're pretty much equal,

00:36:24.050 --> 00:36:25.780
but which one should you use?

00:36:25.840 --> 00:36:29.090
Generally speaking,
you want to use the Control Manager.

00:36:29.090 --> 00:36:33.090
There are some things that the Appearance
Manager just can't do for you right now.

00:36:33.100 --> 00:36:35.900
In some cases,
the Control Manager implements

00:36:35.900 --> 00:36:37.970
certain things directly itself.

00:36:37.970 --> 00:36:41.470
The best example of this
is the pulsing button.

00:36:41.560 --> 00:36:44.770
There is no way to draw a properly
pulsing button on Mac OS X right now

00:36:44.770 --> 00:36:46.920
if you use the Appearance Primitives.

00:36:46.940 --> 00:36:50.140
You must draw with the
Control Manager if you want those.

00:36:50.140 --> 00:36:54.530
But in the rest of the cases,
the Appearance Manager works very,

00:36:54.540 --> 00:36:55.500
very well.

00:36:59.630 --> 00:37:01.450
All right,
so you heard about the problems.

00:37:01.480 --> 00:37:02.720
Well, what do you do now?

00:37:02.720 --> 00:37:05.560
The best thing is go out
there and start aquafying.

00:37:05.560 --> 00:37:08.640
If you got a chance to see John's
session yesterday on adopting Aqua,

00:37:08.880 --> 00:37:10.880
Aqua's totally leveled the playing field.

00:37:10.880 --> 00:37:13.300
A lot of applications are
just getting on board now.

00:37:13.300 --> 00:37:17.300
And this is your chance to go out there
and really polish your user interface,

00:37:17.360 --> 00:37:20.280
and really step over your competition,
and show, hey, you know what,

00:37:20.350 --> 00:37:21.620
we've got this great interface.

00:37:21.620 --> 00:37:23.380
And the users will really like that.

00:37:23.380 --> 00:37:26.380
A crummy interface really
taints the user experience.

00:37:26.420 --> 00:37:29.320
First time you launch an app,
you see all these funky visual problems.

00:37:29.320 --> 00:37:31.310
You're going to go, whoa, well,
they didn't spend much time

00:37:31.310 --> 00:37:32.420
working on the interface.

00:37:32.420 --> 00:37:34.200
I wonder how much time they
spent working on the code.

00:37:34.250 --> 00:37:35.310
Is this app going to crash?

00:37:35.320 --> 00:37:37.240
And it just puts a bad
taste in your mouth.

00:37:37.240 --> 00:37:41.620
So you want to make sure your application
is as Aqua pretty as possible.

00:37:41.650 --> 00:37:45.000
Take advantage of shadowing
as much as you can.

00:37:45.070 --> 00:37:47.500
Do the theme text stuff
as much as you can.

00:37:47.500 --> 00:37:51.110
And the final word I want to make
is that the Carbon high-level

00:37:51.110 --> 00:37:54.560
toolbox is a perfect way to
deliver Carbon applications.

00:37:54.560 --> 00:37:56.900
Yeah, we've got a few shortcomings,
but we're working on that.

00:37:56.900 --> 00:38:00.060
But I want to assure you that we're
bringing the high-level toolbox forward.

00:38:00.060 --> 00:38:02.680
You saw yesterday's window
and menu manager session.

00:38:02.680 --> 00:38:04.300
We've added a lot of features there.

00:38:04.300 --> 00:38:06.370
We've added a bunch of features
in the control manager.

00:38:06.380 --> 00:38:08.200
I'm going to talk about it
at the session after this.

00:38:08.200 --> 00:38:11.150
And we're going to continue enriching
the control window menu and all

00:38:11.190 --> 00:38:13.300
the high-level toolbox managers.

00:38:13.330 --> 00:38:18.030
So with that, I would like to do some
Q&A and go through the roadmap.

00:38:18.070 --> 00:38:20.520
And so I'll bring up John Galenzi.

00:38:28.320 --> 00:38:32.130
Great, thanks Guy.

00:38:32.180 --> 00:38:34.990
So the roadmap just talks about
some other sessions that relate to

00:38:34.990 --> 00:38:40.140
this material and that relate to the
topic of user experience on Mac OS X.

00:38:40.170 --> 00:38:41.800
The second session,
which is just right after

00:38:41.900 --> 00:38:44.590
this one right here,
so you don't even need to move,

00:38:44.590 --> 00:38:47.190
is 120 Controls & Appearance,
where Guy's just going to keep

00:38:47.190 --> 00:38:50.340
talking about the same sort of stuff,
dock, animating dock icons,

00:38:50.360 --> 00:38:53.230
that sort of stuff,
and continue on this track.

00:38:53.500 --> 00:38:55.560
And then the feedback forum
for the high-level toolbox.

00:38:55.560 --> 00:38:58.990
It's a great opportunity for you to
come and give your feedback as to

00:38:59.000 --> 00:39:02.430
things that you think are missing in
terms of controls or functionality

00:39:02.490 --> 00:39:05.330
within the Appearance Manager,
whatever relates to

00:39:05.330 --> 00:39:06.890
the high-level toolbox.

00:39:07.120 --> 00:39:11.550
Then session 112,
which is today at 2:00 PM, I believe.

00:39:11.740 --> 00:39:15.090
No, that was yesterday at 2:00 PM,
so watch it on DVD.

00:39:16.050 --> 00:39:17.360
Designing and using Aqua Icons.

00:39:17.360 --> 00:39:20.410
I talked about that one at the
end of my session 111 yesterday,

00:39:20.410 --> 00:39:23.630
which is a great session to come to to
learn how to critique the icons that

00:39:23.630 --> 00:39:24.890
are being designed for your application.

00:39:24.900 --> 00:39:26.310
Then today, Apple Help.

00:39:26.390 --> 00:39:29.310
Learning about how to do a good
help system and provide user

00:39:29.430 --> 00:39:31.660
assistance with your product on 10.

00:39:31.660 --> 00:39:34.020
And then Speech Recognition
and Synthesis.

00:39:34.020 --> 00:39:37.570
Fantastic session to learn how to
add speech synthesis or recognition

00:39:37.570 --> 00:39:41.340
to your application and really
extend the user experience on 10.

00:39:42.000 --> 00:39:45.080
And then yesterday's 114,
which if you didn't get there,

00:39:45.080 --> 00:39:45.980
watch it on DVD.

00:39:47.630 --> 00:39:52.500
and then some other sessions that
were yesterday or the day before.

00:39:52.620 --> 00:39:54.720
So let's get into the Q&A.

00:39:54.720 --> 00:39:56.160
This is my contact information.

00:39:56.160 --> 00:39:58.760
If you have any comments about this
session or if you have feedback

00:39:58.760 --> 00:40:01.700
in terms of what's supported
within High Level Toolbox or within

00:40:01.790 --> 00:40:04.070
Carbon in terms of user interface,
please get in touch with me.