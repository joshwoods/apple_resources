WEBVTT

00:00:03.870 --> 00:00:04.940
Good afternoon, everybody.

00:00:04.940 --> 00:00:05.960
I'm Chris Espinosa.

00:00:05.960 --> 00:00:08.580
I head the Components and
Scripting group at Apple.

00:00:08.580 --> 00:00:12.800
If you've been to a few developers'
conferences and the AppleScript sessions,

00:00:12.800 --> 00:00:14.990
I should be dullingly familiar by now.

00:00:14.990 --> 00:00:18.780
I'm going to be with you
the rest of the afternoon.

00:00:18.780 --> 00:00:21.100
I'm standing between you
and Memorial Day weekend,

00:00:21.100 --> 00:00:22.310
so I'm going to make it crisp.

00:00:22.310 --> 00:00:24.900
I'm going to try to make it clear,
and I'm going to make it

00:00:25.010 --> 00:00:26.410
entirely Mac OS X focused.

00:00:26.430 --> 00:00:30.200
What we're here to talk about
today is the yearly update

00:00:30.260 --> 00:00:34.580
on the status of AppleScript,
primarily focused on Mac OS X and the key

00:00:34.670 --> 00:00:39.200
changes in Mac OS X that affect you as
scripters and affect you as developers.

00:00:39.200 --> 00:00:43.340
The first session is going to be
mostly for scripters and developers.

00:00:43.430 --> 00:00:48.430
The second session will be exclusively
for people writing software for Mac OS X.

00:00:48.540 --> 00:00:51.820
So if you are a scripter,
you can go play some pinball

00:00:51.820 --> 00:00:54.200
during the second session,
and then we'll see you at the

00:00:54.200 --> 00:00:55.970
feedback forum immediately following.

00:00:55.980 --> 00:00:58.900
I am going to talk in the first
session about things we are

00:00:58.900 --> 00:01:03.440
going to change in the future,
things we know about in AppleScript 1.6,

00:01:03.440 --> 00:01:06.560
things we know about in Mac OS X that
we're going to be addressing,

00:01:06.560 --> 00:01:09.500
but I'll be dealing
with that only briefly.

00:01:09.550 --> 00:01:12.110
There's not a lot of forward-looking
promises in this session.

00:01:12.110 --> 00:01:16.600
It's going to be focused primarily
on shipping apps and getting

00:01:16.600 --> 00:01:19.400
your scripts running on Mac OS X.

00:01:19.410 --> 00:01:23.040
What you'll learn is the new features
of AppleScript 1.6 in Mac OS 9 and

00:01:23.040 --> 00:01:26.250
Mac OS X that you can take advantage of,
what to do about your scripts

00:01:26.300 --> 00:01:28.780
and scripting additions,
how to move them across,

00:01:28.780 --> 00:01:32.000
where to put them, things like that,
and how to plan for changes that

00:01:32.000 --> 00:01:34.580
we expect in future versions.

00:01:34.580 --> 00:01:37.560
But first, I want to thank all the
developers who shipped scriptable

00:01:37.560 --> 00:01:39.410
applications this year.

00:01:39.500 --> 00:01:42.000
I couldn't fit it all on one screen.

00:01:42.000 --> 00:01:45.510
There are a lot of people that
did updates to their applications.

00:01:45.540 --> 00:01:47.520
They shipped Mac OS X versions.

00:01:47.520 --> 00:01:50.440
They shipped new code, and I really,
really appreciate your getting

00:01:50.440 --> 00:01:54.540
behind the platform and keeping
your scriptable applications

00:01:54.540 --> 00:01:57.040
alive and fresh for Mac OS X.

00:01:57.500 --> 00:02:01.440
And as usual, we had some version
interesting things this year.

00:02:01.440 --> 00:02:05.310
Notice that we didn't do a .0.1 release.

00:02:05.310 --> 00:02:09.050
I consider that a personal triumph,
is that most of the stuff we shipped

00:02:09.230 --> 00:02:10.900
was good the first time around.

00:02:12.370 --> 00:02:17.110
We shipped AppleScript 1.5 in
the customer beta for Mac OS X.

00:02:17.200 --> 00:02:22.480
We shipped AppleScript 1.5.5
in the Mac OS 9.1 release,

00:02:22.770 --> 00:02:27.250
and it was a version of the
Mac OS X version backported to Mac OS 9,

00:02:27.250 --> 00:02:29.460
and it had a few problems.

00:02:30.520 --> 00:02:34.760
And when we came out with Mac OS X,
we shipped 1.6 on Mac OS X,

00:02:34.760 --> 00:02:39.090
and then shortly thereafter as
a software update for Mac OS 9.

00:02:39.440 --> 00:02:40.500
I highly recommend that you
run AppleScript 1.5 in the

00:02:40.500 --> 00:02:41.180
customer beta for Mac OS X.

00:02:42.180 --> 00:02:46.050
If you have Mac OS 9.1,
it's really the right

00:02:46.050 --> 00:02:47.990
version to be running.

00:02:47.990 --> 00:02:52.650
One of the most common
problems that we've seen on the

00:02:52.650 --> 00:02:58.100
AppleScript lists is people saying,
Oh, I run my scripts and my

00:02:58.100 --> 00:03:01.020
scripting additions aren't there,
and I get all these Chevron

00:03:01.230 --> 00:03:02.770
syntax things in my scripts.

00:03:03.540 --> 00:03:06.160
And the common thing is people have
turned off their security extensions.

00:03:06.160 --> 00:03:14.320
One of the things that we did in 1.5.6,
was allow the mount volume

00:03:14.400 --> 00:03:17.320
command to use the keychain,
and in order to do that,

00:03:17.320 --> 00:03:21.390
we created a dependency on the
security system extensions.

00:03:22.080 --> 00:03:23.280
A lot of people turned those off.

00:03:23.400 --> 00:03:25.570
That turned off all of
scripting additions,

00:03:25.570 --> 00:03:27.300
and we fixed that in 1.6.

00:03:27.960 --> 00:03:30.340
So if you're having problems
that your scripts don't run

00:03:30.340 --> 00:03:35.830
or your scripting additions
aren't recognized in Mac OS 9.1,

00:03:35.950 --> 00:03:40.490
upgrade to AppleScript 1.6,
and that'll fix it.

00:03:41.180 --> 00:03:44.070
Here are some of the new features
that we introduced in 1.5,

00:03:44.260 --> 00:03:48.560
1.5.5, and 1.6, basically since the last
time we were here last year.

00:03:48.560 --> 00:03:51.090
For developers,
one of the things I'm going

00:03:51.230 --> 00:03:54.310
to be covering is that we
introduced into Carbon,

00:03:54.310 --> 00:03:59.900
into CarbonLib on Mac OS 9 and into
the Carbon framework in Mac OS X,

00:03:59.900 --> 00:04:04.630
the AE Gizmos functionality that
Jens Alfke wrote a low so many years

00:04:04.630 --> 00:04:09.470
ago and all of you have been using
as a link library for many years.

00:04:09.480 --> 00:04:13.380
We actually built that into
the operating system in 1.5.

00:04:13.490 --> 00:04:15.040
Scripters won't notice.

00:04:15.110 --> 00:04:18.160
It will have no effect on scripters,
but it will help developers

00:04:18.160 --> 00:04:19.840
get their software to Mac OS X.

00:04:19.840 --> 00:04:23.450
We added a fix for the double as problem.

00:04:23.450 --> 00:04:25.760
I'll be going into that.

00:04:25.910 --> 00:04:28.960
If you are frustrated with the finder,
Andy Pachorski is happy.

00:04:28.960 --> 00:04:33.530
If you are frustrated with the problem
that when you ask an application

00:04:33.530 --> 00:04:38.060
to get something as something else
and you get an error can't coerce,

00:04:38.180 --> 00:04:39.680
we have a fix for you.

00:04:39.680 --> 00:04:42.770
It requires developers to
modify their applications,

00:04:43.040 --> 00:04:45.180
but it allows them to do the right thing.

00:04:45.390 --> 00:04:51.720
We are fully supporting Unicode text as
a first class data type in Apple script.

00:04:51.830 --> 00:04:52.960
I'll be doing a demo of that.

00:04:52.960 --> 00:04:56.460
That's mainly important when
you're using the Mac OS X finder,

00:04:56.460 --> 00:05:00.160
either for Mac OS X or from
scripts running in the classic

00:05:00.160 --> 00:05:04.060
environment where the Mac OS X finder
is the only finder around.

00:05:04.060 --> 00:05:08.020
Mac OS X finder returns its
file names as Unicode text,

00:05:08.220 --> 00:05:13.570
and if your scripts were expecting
standard strings and were doing

00:05:13.570 --> 00:05:16.780
operations such as concatenation
or text extraction on them,

00:05:16.780 --> 00:05:19.720
it would have failed in 1.5 and 1.5.5.

00:05:19.770 --> 00:05:23.620
Now it works in 1.6 because we have
fully first class Unicode text support.

00:05:23.780 --> 00:05:29.480
We added support for packaged apps and
packaged scripting editions for Mac OS X,

00:05:29.770 --> 00:05:34.730
support for script files that don't
have type in creators and have all of

00:05:34.730 --> 00:05:38.160
their script code in the data fork,
and that's a fix.

00:05:38.190 --> 00:05:41.860
We have a Mac OS X convention so
that you can actually send a script

00:05:41.900 --> 00:05:47.260
across the internet as a single
file without having to bin hex it or

00:05:47.260 --> 00:05:49.180
compress it or do anything like that.

00:05:49.180 --> 00:05:51.180
It'll actually work when
you get it to the other end.

00:05:51.180 --> 00:05:54.380
And we have a different methodology
for dispatching events to

00:05:54.380 --> 00:05:56.140
scripting editions on Mac OS X.

00:05:56.230 --> 00:05:58.310
I'll talk a little bit about that.

00:05:58.560 --> 00:06:00.290
We also fixed some bugs.

00:06:00.420 --> 00:06:01.860
Some of these you didn't know about.

00:06:02.020 --> 00:06:04.750
Some of these you've relied
on and now you have to change.

00:06:04.750 --> 00:06:08.410
I don't think you relied on middle
item of an empty list crashing.

00:06:08.410 --> 00:06:12.050
It's a convenient way to crash
your machine if you need to,

00:06:12.050 --> 00:06:13.320
but we fixed that.

00:06:16.140 --> 00:06:18.520
Item zero of a list used to not fail.

00:06:18.520 --> 00:06:19.710
It returned silently.

00:06:19.710 --> 00:06:21.760
Now it does fail,
and so that should help you

00:06:21.860 --> 00:06:24.940
catch some bugs in your scripts
where you're actually trying

00:06:24.940 --> 00:06:26.450
to get item zero of a list.

00:06:26.530 --> 00:06:29.380
Now it will actually fail,
which is the correct behavior.

00:06:29.380 --> 00:06:33.180
The Info4 scripting edition
couldn't handle files greater

00:06:33.180 --> 00:06:35.000
than two gigabytes in size.

00:06:35.000 --> 00:06:37.160
Now it can, files and folders.

00:06:37.160 --> 00:06:45.020
The text-to-Unicode text coercion
assumed that the incoming text was Mac.

00:06:45.140 --> 00:06:47.360
Now it looks at what
your system script is,

00:06:47.360 --> 00:06:49.670
so if you're running
a non-English system,

00:06:49.670 --> 00:06:52.340
the Unicode coercion
will happen correctly.

00:06:52.340 --> 00:06:57.510
In random numbers,
if you had similar large seed values,

00:06:57.600 --> 00:07:04.610
such as the current time as seconds,
they would produce similar initial random

00:07:04.610 --> 00:07:08.330
numbers and then be random after that.

00:07:08.440 --> 00:07:11.140
That disturbed some people
because they wanted all the

00:07:11.140 --> 00:07:14.680
random numbers to be random rather
than just the second through nth.

00:07:15.250 --> 00:07:16.110
So we fixed that.

00:07:16.140 --> 00:07:20.580
There's a very interesting problem where,
I guess that's,

00:07:20.580 --> 00:07:23.550
I'm going to cast off commas here, one,
two, three, four, five,

00:07:23.570 --> 00:07:34.710
536,870,911 plus one equal
negative 536,870,921,

00:07:34.720 --> 00:07:37.170
which is not the correct answer.

00:07:37.320 --> 00:07:39.490
We fixed that.

00:07:39.660 --> 00:07:43.580
And Mount Volume didn't look at keychain,
which some considered a bug.

00:07:43.580 --> 00:07:45.570
We considered it a new feature addition.

00:07:45.640 --> 00:07:46.370
We added that.

00:07:46.440 --> 00:07:49.920
In 1.6,
which is what you get in Mac OS X and

00:07:49.920 --> 00:07:54.650
what you get when you do the
software update to Mac OS 9.1,

00:07:54.650 --> 00:07:59.610
we fixed some read-write
commands that we broke in 1.5.5.

00:07:59.660 --> 00:08:02.870
We just out-and-out
checked in the wrong code,

00:08:02.870 --> 00:08:04.640
and we just had to fix it.

00:08:06.000 --> 00:08:09.790
A problem that had been creeping
around for quite a long time

00:08:09.790 --> 00:08:13.020
was manifesting itself different
in different operating systems.

00:08:13.020 --> 00:08:16.080
It was that if you were displaying
the contents of a string and

00:08:16.080 --> 00:08:18.780
there was a null character,
an ASCII zero in there,

00:08:18.780 --> 00:08:23.020
it would display differently on
different systems at different times.

00:08:23.060 --> 00:08:24.790
Sometimes it would just be blank.

00:08:25.100 --> 00:08:26.580
Sometimes it would be a backslash.

00:08:26.590 --> 00:08:29.790
Sometimes it would be a large
number of garbage characters.

00:08:29.800 --> 00:08:35.740
We fixed it so that it now displays
as an ASCII null character.

00:08:36.000 --> 00:08:38.500
You can actually copy and
paste and reinterpret.

00:08:38.580 --> 00:08:41.000
We believe that that's
the correct behavior now.

00:08:41.210 --> 00:08:41.890
You will see it.

00:08:42.080 --> 00:08:45.490
It will look like an empty string in
most fonts because most fonts don't have

00:08:45.490 --> 00:08:47.210
a glyph for the ASCII zero character.

00:08:47.320 --> 00:08:51.630
But it's actually a string
with one character in there,

00:08:51.630 --> 00:08:53.670
which is an ASCII zero.

00:08:53.680 --> 00:08:57.160
If you copy and paste it,
the right thing will happen.

00:08:57.400 --> 00:10:43.500
[Transcript missing]

00:10:43.750 --> 00:10:46.200
There are some bugs we know about in 1.6.

00:10:46.200 --> 00:10:49.210
These are things we've found since
the introduction of 1.6 that we will

00:10:49.210 --> 00:10:50.750
be fixing in subsequent versions.

00:10:50.840 --> 00:10:54.470
The Info4 scripting edition
fails if you target it at a

00:10:54.470 --> 00:10:56.500
Unix or an NFS file system.

00:10:56.500 --> 00:10:57.570
Don't try it.

00:10:57.570 --> 00:10:59.100
We'll be fixing it.

00:10:59.100 --> 00:11:04.200
The low-level Unicode
text-to-text coercion is broken,

00:11:04.230 --> 00:11:10.270
so that if you get type Unicode text
as an application developer and you

00:11:10.470 --> 00:11:16.190
try to use the low-level coercion,
the Apple Event Manager coercion

00:11:16.190 --> 00:11:19.780
to coerce it to a type char,
that will fail.

00:11:19.780 --> 00:11:23.090
If you try to coerce it
to a type styled text,

00:11:23.090 --> 00:11:26.760
that will succeed,
and the type styled text is a record,

00:11:26.760 --> 00:11:29.460
one element of which is the type char.

00:11:29.460 --> 00:11:31.210
So that's your workaround.

00:11:31.210 --> 00:11:34.580
You coerce it to type styled text,
coerce that to a record,

00:11:34.720 --> 00:11:38.690
get the first item of that record,
which is the character element,

00:11:38.800 --> 00:11:41.060
and then that will be your plain text.

00:11:41.060 --> 00:11:42.820
And we'll be fixing that.

00:11:43.600 --> 00:11:49.640
The mount volume command broke on
third-party user authentication modules,

00:11:49.640 --> 00:11:55.700
and that includes Unix file servers
and Windows 2000 AFP servers.

00:11:55.700 --> 00:11:57.170
We're still not sure why it did.

00:11:57.170 --> 00:12:00.370
We think it's something that happened
in the Apple Share client itself,

00:12:00.370 --> 00:12:03.580
because we didn't change any of
the mount volume code in this area.

00:12:03.580 --> 00:12:05.640
We're trying to get
to the bottom of that,

00:12:05.650 --> 00:12:07.170
but in the next version...

00:12:09.250 --> 00:12:13.420
We will make sure that
Mountain Volume works on

00:12:13.570 --> 00:12:15.840
all major AFP platforms.

00:12:15.860 --> 00:12:19.010
The read as list using
delimiters is broken.

00:12:19.040 --> 00:12:21.770
So even though we fixed
the read-write OSACs,

00:12:21.830 --> 00:12:24.600
there are still a couple of
little bugs hanging around.

00:12:24.600 --> 00:12:27.570
Read as list using
delimiters is one of them.

00:12:28.250 --> 00:12:32.110
And sometimes if you...

00:12:32.350 --> 00:12:36.950
Send a first event to an application
from a script without launching it first.

00:12:36.950 --> 00:12:40.140
The first event will time out,
but subsequent events,

00:12:40.140 --> 00:12:41.680
if you rerun the script, it'll work.

00:12:41.760 --> 00:12:45.880
We think that that's a subtle timing
problem in the Apple Event Manager or

00:12:45.880 --> 00:12:49.080
something that we're doing
wrong with noticing whether

00:12:49.080 --> 00:12:50.830
the application is up or not.

00:12:50.830 --> 00:12:53.950
We're going to address
that in a future version.

00:12:55.720 --> 00:13:00.660
Here are some new features,
and these are primarily for developers.

00:13:00.660 --> 00:13:03.770
The AE Helpers,
the support for the double-As problem,

00:13:03.840 --> 00:13:05.540
and the Unicode class support.

00:13:05.560 --> 00:13:08.100
I'm going to go over each of these.

00:13:08.120 --> 00:13:11.040
AE Helpers was born as AE Gizmos.

00:13:11.110 --> 00:13:17.500
It's a quick and easier way to deal with
building Apple event descriptor records.

00:13:17.520 --> 00:13:20.580
Jens Alfke from the original
AppleScript team wrote

00:13:20.720 --> 00:13:25.120
this support library in,
I believe it was something

00:13:25.120 --> 00:13:27.960
like 1993 or 1994.

00:13:27.980 --> 00:13:29.320
Shipped it as object code.

00:13:29.420 --> 00:13:33.240
People have been linking that with
their systems and shipping that.

00:13:33.270 --> 00:13:37.390
That object code doesn't link,
doesn't build anymore.

00:13:37.410 --> 00:13:39.260
You can't use it on Carbon systems.

00:13:39.280 --> 00:13:43.930
And developers have wanted another
link library or access to the

00:13:43.930 --> 00:13:45.960
source code or something like that.

00:13:46.000 --> 00:13:49.920
We decided just to build that
functionality into Carbon,

00:13:49.920 --> 00:13:54.190
into CarbonLib for Mac OS 9 and into
the Carbon framework for Mac OS X.

00:13:56.480 --> 00:13:57.380
What do these do?

00:13:57.380 --> 00:14:04.480
AE Build and Print are a very easy way to
go between a textual description of your

00:14:04.480 --> 00:14:06.580
Apple event and the Apple event itself.

00:14:06.640 --> 00:14:10.200
Rather than going through,
because an Apple event, as you know,

00:14:10.300 --> 00:14:13.510
can be a deeply nested structure
with descriptors inside

00:14:13.510 --> 00:14:15.280
descriptors inside descriptors.

00:14:15.280 --> 00:14:18.340
Rather than going through
and building a descriptor,

00:14:18.440 --> 00:14:22.060
adding it to another descriptor,
throwing away the original,

00:14:22.060 --> 00:14:25.190
coercing it to another descriptor,
throwing away the other one,

00:14:25.810 --> 00:14:27.940
adding that to another descriptor,
throwing it away,

00:14:27.940 --> 00:14:32.360
each time doing a relatively
heavyweight handle-based memory event.

00:14:32.360 --> 00:14:38.350
What AE Build does is it takes a
textual representation of your event,

00:14:38.930 --> 00:14:42.980
does substitution,
like in a printf statement,

00:14:42.980 --> 00:14:48.960
of your actual variables for
placeholders inside the text event,

00:14:48.960 --> 00:14:52.630
and then builds the whole
descriptor or event in one shot,

00:14:52.630 --> 00:14:53.940
in one operation.

00:14:55.260 --> 00:14:57.160
It's much faster,
it's much lighter weight,

00:14:57.160 --> 00:15:00.380
it doesn't create nearly as many
intermediate copies of things,

00:15:00.750 --> 00:15:02.780
just gets the job done much faster.

00:15:02.780 --> 00:15:05.380
AE Print is sort of
the converse operation.

00:15:05.380 --> 00:15:07.900
It takes a descriptor record,
which could be all the

00:15:07.930 --> 00:15:10.760
way up to an Apple event,
and then spools it out in a

00:15:10.760 --> 00:15:14.930
reinterpretable text form to
make an Apple event readable.

00:15:14.940 --> 00:15:17.270
This is very useful in debugging,
and I'm going to show

00:15:17.270 --> 00:15:18.380
some examples of that.

00:15:18.440 --> 00:15:23.210
The principal routines are AE Build Desk,
which builds a descriptor.

00:15:24.570 --> 00:15:28.860
AE Parameters, which adds something to an
already existing descriptor.

00:15:28.930 --> 00:15:33.350
Or AE Build Apple Event,
which takes the appropriate parameters

00:15:33.360 --> 00:15:35.720
and builds an Apple event all in one.

00:15:35.910 --> 00:15:40.910
It's like AE Create Apple Event,
but it lets you specify everything

00:15:40.910 --> 00:15:42.680
you need in one statement.

00:15:42.780 --> 00:15:47.400
And then the converse event
is the AE Print functionality.

00:15:47.720 --> 00:15:52.220
AE Print Desk to Handle
takes a descriptor,

00:15:52.220 --> 00:15:57.420
a list, a record, an Apple event,
and it prints it in raw text to a handle,

00:15:57.420 --> 00:16:02.720
which then you can print out or dump in
a debug window or something like that.

00:16:02.760 --> 00:16:07.790
This text representation
has a syntax all its own,

00:16:07.800 --> 00:16:12.020
and so far the only documentation for
it is Jens' original documentation,

00:16:12.020 --> 00:16:17.910
which is back in the circa 1993 SDKs.

00:16:18.020 --> 00:16:21.230
We're working on updating that,
but for now if you can find an

00:16:21.230 --> 00:16:23.900
old copy of that SDK and you can
get the original documentation,

00:16:23.920 --> 00:16:25.530
that works.

00:16:25.650 --> 00:16:27.180
We've only made a couple of changes.

00:16:27.250 --> 00:16:32.140
Jens' original implementation
relied on high ASCII characters,

00:16:32.270 --> 00:16:37.410
curly quotes and chevrons,
to encase strings and

00:16:37.410 --> 00:16:39.400
hexadecimal strings.

00:16:39.400 --> 00:16:42.900
And we've added some straight
ASCII alternatives in case you happen

00:16:42.900 --> 00:16:46.060
to be working in an ASCII preferential
development environment.

00:16:46.150 --> 00:16:52.230
The hex delimiters are dollar signs,
you know, dollar signs at the

00:16:52.230 --> 00:16:53.720
beginning and the end.

00:16:53.720 --> 00:16:53.720
And then we've added some straight
ASCII alternatives in case you happen

00:16:53.720 --> 00:16:53.720
to be working in an ASCII preferential
development environment.

00:16:53.720 --> 00:16:53.720
The hex delimiters are dollar signs,
you know, dollar signs at the

00:16:53.720 --> 00:16:53.720
beginning and the end.

00:16:53.720 --> 00:16:53.720
And then we've added some straight
ASCII alternatives in case you happen

00:16:53.720 --> 00:16:53.720
to be working in an ASCII preferential
development environment.

00:16:53.720 --> 00:16:53.720
The hex delimiters are dollar signs,
you know, dollar signs at the

00:16:53.720 --> 00:16:53.720
beginning and the end.

00:16:53.820 --> 00:16:57.190
And the quote characters
are straight single quotes,

00:16:57.200 --> 00:17:00.720
which you then have to escape,
but you're grownups, you can do that.

00:17:00.720 --> 00:17:10.220
So the language has constants,
it has a special interpretation

00:17:10.220 --> 00:17:12.720
for four character codes,
because most events and descriptors

00:17:12.720 --> 00:17:14.700
are built out of four character codes.

00:17:14.750 --> 00:17:19.270
You can usually do four character codes
just by typing the four characters.

00:17:19.320 --> 00:17:22.320
If there's high ASCII or
something special in there,

00:17:22.340 --> 00:17:23.520
then you enclose them in here.

00:17:23.520 --> 00:17:25.520
You can use them in single quotes.

00:17:25.690 --> 00:17:29.420
The language will do coercions in place.

00:17:29.520 --> 00:17:33.520
If you say four character code, paren,
and then some value,

00:17:33.540 --> 00:17:37.520
it'll apply that coercion
before it puts it in the event.

00:17:37.520 --> 00:17:40.520
And so you can do pretty much coercions
in line in this text descriptor.

00:17:40.520 --> 00:17:42.520
I'll show you a little example of that.

00:17:42.520 --> 00:17:46.520
You can describe lists and
records in the text format.

00:17:46.710 --> 00:17:49.520
And at the bottom you see
the substitution language.

00:17:49.520 --> 00:17:53.270
An at sign substitutes an AEDESC.

00:17:53.420 --> 00:17:57.320
AEDESC parameter, right in that position.

00:17:57.320 --> 00:18:00.920
A double at, a cast,
that is a type and then

00:18:01.090 --> 00:18:05.390
an at sign in parentheses,
takes a special structure which

00:18:05.490 --> 00:18:08.500
you have to build a struct for,
which is a long of the length and

00:18:08.500 --> 00:18:10.320
then a pointer to the actual data.

00:18:10.360 --> 00:18:14.850
So you can put arbitrary data in as
long as you create this struct which

00:18:15.000 --> 00:18:19.320
has the long and the pointer to it,
the length and the pointer to it.

00:18:19.320 --> 00:18:23.120
And then if you have a handle,
when we can find the length of a handle,

00:18:23.120 --> 00:18:23.120
because, well, it's a handle.

00:18:23.120 --> 00:18:26.150
You just put in two at signs and
then the value of that handle will

00:18:26.150 --> 00:18:28.110
be put in at that point in the event.

00:18:28.120 --> 00:18:32.120
So here's a basic usage.

00:18:32.150 --> 00:18:36.120
This is how you build a
descriptor that says every line,

00:18:36.120 --> 00:18:40.080
the equivalent of every line of document,
quote, name, end quote.

00:18:40.320 --> 00:18:43.110
It would be that in Apple script.

00:18:43.120 --> 00:18:47.390
AE build desk first takes
the destination desk,

00:18:47.390 --> 00:18:50.850
a pointer to that,
a pointer to a build error structure

00:18:50.850 --> 00:18:52.870
which is really useful for debugging.

00:18:52.920 --> 00:18:55.830
This is something that we've
added in the Carbon version.

00:18:55.950 --> 00:18:58.830
If there's an error,
we tell you what the error is and

00:18:58.830 --> 00:19:03.160
what line of your text it occurred on,
which is very helpful for debugging

00:19:03.170 --> 00:19:04.860
the syntax of this string.

00:19:04.920 --> 00:19:08.850
And then you pass it the string and
then a variable list of parameters.

00:19:08.920 --> 00:19:12.700
And the string we're passing is
first single quote OBJ single quote,

00:19:12.780 --> 00:19:15.880
which means we're going to
build an object specifier.

00:19:16.160 --> 00:19:19.630
And then parens,
which means we're going to coerce into

00:19:19.670 --> 00:19:22.720
an object specifier from something else.

00:19:22.720 --> 00:19:25.300
And then the parens are braces,
which means, oh,

00:19:25.300 --> 00:19:28.410
we're going to coerce into an
object specifier from a record.

00:19:28.870 --> 00:19:29.470
Okay.

00:19:29.520 --> 00:19:30.520
Well, that makes sense.

00:19:30.520 --> 00:19:35.080
If you're building an object specifier
in straight Apple event calls,

00:19:35.080 --> 00:19:36.520
that's what you do.

00:19:36.520 --> 00:19:39.520
You build a record and then you
coerce it to an object specifier.

00:19:39.520 --> 00:19:43.870
Here instead of making three calls,
we did it in seven characters,

00:19:43.870 --> 00:19:45.390
which is really nice.

00:19:45.520 --> 00:19:48.920
And then we have our four
fields of our record,

00:19:48.920 --> 00:19:52.510
the want, the from, the form,
and the SELD.

00:19:52.820 --> 00:19:57.170
And the want is a
CLIN coerced to a type type.

00:19:57.410 --> 00:19:58.320
That's nice.

00:19:58.470 --> 00:20:01.320
And the form is an
INDX coerced to an enum.

00:20:01.320 --> 00:20:03.270
That's exactly what you want.

00:20:03.670 --> 00:20:11.160
And the SELD is a type form
absolute position of ALL space.

00:20:11.420 --> 00:20:14.310
And because there's space in there,
we have to put that in single quotes.

00:20:14.320 --> 00:20:17.320
And then notice the from parameter.

00:20:17.320 --> 00:20:21.250
The from is another object specifier.

00:20:21.330 --> 00:20:22.320
And see?

00:20:22.320 --> 00:20:27.110
We're building an object specifier inside
an object specifier in one system call.

00:20:27.450 --> 00:20:29.120
That's what makes it fast.

00:20:29.210 --> 00:20:32.120
And the from is another object specifier
built pretty much the same way.

00:20:32.120 --> 00:20:35.870
A coercion of a record of a want, a from,
a form, and an SELD.

00:20:36.380 --> 00:20:40.120
And the SELD is a TEXT with an at sign.

00:20:40.120 --> 00:20:42.120
And the at sign is our substitution.

00:20:42.120 --> 00:20:46.120
That means since this is the first at
sign that's encountered in the text,

00:20:46.160 --> 00:20:52.120
substitute in the first
following parameter in the call.

00:20:52.120 --> 00:20:55.050
And way down at the bottom of the screen,
the first parameter is doc name.

00:20:55.120 --> 00:21:02.120
So what it will do is it will take
doc name as a pointer to text.

00:21:02.260 --> 00:21:08.030
And it will create a text AEDESC or
text descriptor for the SELD.

00:21:08.160 --> 00:21:12.120
So here, if you want to build an object
specifier with the value in it,

00:21:12.120 --> 00:21:16.010
with a nested object specifier,
you can do it in one call.

00:21:17.730 --> 00:21:20.030
Similarly, you can build whole
Apple events that way.

00:21:20.250 --> 00:21:24.780
AE Build Apple Event looks a whole
lot like AE Create Apple Event,

00:21:24.840 --> 00:21:27.920
except it takes,
instead of giving you pretty

00:21:27.960 --> 00:21:31.260
much an empty Apple event,
you then have to fill in,

00:21:31.270 --> 00:21:34.630
here's the direct parameter,
and here are the optional parameters,

00:21:34.630 --> 00:21:36.390
and here are my other attributes.

00:21:37.050 --> 00:21:40.980
You give it the event
class and the event code.

00:21:40.980 --> 00:21:45.680
You give it the information,
the target information,

00:21:45.680 --> 00:21:50.310
the type and a pointer to what
it is and the size of that,

00:21:50.640 --> 00:21:55.540
the flags of what,
the return flag and the transaction flag,

00:21:55.540 --> 00:21:58.150
and then you pass it a string.

00:21:58.160 --> 00:22:02.110
And this string says basically,
our direct parameter,

00:22:02.190 --> 00:22:05.660
the quote dash dash dash end quote,
is an alias.

00:22:05.760 --> 00:22:06.960
And I'm going to show you how to do that.

00:22:06.960 --> 00:22:10.850
And I'm going to substitute in a handle,
because the double ats,

00:22:10.850 --> 00:22:14.170
and that means the first
parameter following the string

00:22:14.170 --> 00:22:17.550
had better be an alias handle,
and in that case it is.

00:22:17.600 --> 00:22:21.290
And what this will do is it will
build an Apple event with the direct

00:22:21.300 --> 00:22:24.720
parameter with an alias handle in that,
and in one call.

00:22:24.720 --> 00:22:30.410
And that saves you two additional calls
and a dispose of a transitory descriptor.

00:22:30.420 --> 00:22:33.280
And this will make,
if you're creating Apple events

00:22:33.280 --> 00:22:35.710
to send to yourself,
using AE Build is going

00:22:35.710 --> 00:22:36.940
to be a lot easier.

00:22:36.940 --> 00:22:39.290
going to really speed things up.

00:22:40.830 --> 00:22:43.090
Let me show you the
first demo on demo one,

00:22:43.090 --> 00:22:45.810
if we can get that up on both screens.

00:22:50.550 --> 00:22:54.000
I have here our venerable
simple text project.

00:22:54.100 --> 00:22:59.130
And let me go to...

00:23:00.170 --> 00:23:06.450
Where SimpleText has an event
to send an open Apple event.

00:23:06.480 --> 00:23:08.620
I'm not exactly sure
what they use it for,

00:23:08.620 --> 00:23:10.730
but I found it in here,
so I decided to demo it.

00:23:10.920 --> 00:23:12.700
And they do a lot of things.

00:23:12.710 --> 00:23:16.220
They null out all of the
descriptors they build.

00:23:16.220 --> 00:23:20.840
Then they have to get current process
and then create a descriptor and then

00:23:20.840 --> 00:23:25.640
create an Apple event and then put
the parameter in as the direct object.

00:23:25.640 --> 00:23:28.380
And then they have to
dispose of it later.

00:23:28.380 --> 00:23:30.780
And it gets to be a lot of work.

00:23:30.880 --> 00:23:42.370
Well, what we can do is we've got a
replacement that uses AE helpers here.

00:23:42.400 --> 00:23:50.290
And we can just find all of this.

00:24:03.470 --> 00:24:12.700
And notice what we do here in our
replacement is we call AE build

00:24:12.700 --> 00:24:19.110
Apple event with the direct parameter
and a single at sign and then the list

00:24:19.620 --> 00:24:23.600
that we've already got of things to open.

00:24:23.600 --> 00:24:28.190
So we save a couple of descriptors,
we save having to dispose them,

00:24:28.300 --> 00:24:30.650
we save building an extra handle.

00:24:31.200 --> 00:24:33.380
It just makes it a lot easier to do that.

00:24:33.400 --> 00:24:44.160
It makes that much easier to implement.

00:24:49.560 --> 00:24:51.780
There's another big package in A.E.

00:24:51.780 --> 00:24:53.450
Helpers called the A.E.

00:24:53.500 --> 00:24:54.650
Streams Package.

00:24:54.650 --> 00:24:58.640
And the Streams Package is a lot
of calls for building a deep A.E.

00:24:58.650 --> 00:25:01.580
descriptor incrementally,
little by little.

00:25:01.580 --> 00:25:05.450
And it basically works in an open, write,
close kind of protocol.

00:25:05.820 --> 00:25:10.620
And if you're being nested, you open,
write, open, write, open, write, write,

00:25:10.770 --> 00:25:13.030
write, close, close, close.

00:25:13.050 --> 00:25:16.840
There are a bunch of calls,
basically open, write,

00:25:16.840 --> 00:25:19.370
and close for each kind of thing.

00:25:19.400 --> 00:25:21.140
in your writing.

00:25:21.830 --> 00:25:26.480
And if you want to use them,
basically this is what

00:25:26.570 --> 00:25:28.320
the code looks like.

00:25:28.400 --> 00:25:31.680
You open, you write, you write,
you open a sub-record, you write,

00:25:31.680 --> 00:25:34.120
you write, you write, you write,
you write, you close,

00:25:34.120 --> 00:25:37.770
you write some more, you write some more,
you close, you close, and you're done.

00:25:37.820 --> 00:25:43.390
And this is more efficient than having
to get all of the things that you

00:25:43.390 --> 00:25:47.490
need collected together at one time,
and then creating a desk,

00:25:47.490 --> 00:25:50.320
and then putting that
desk into another desk,

00:25:50.370 --> 00:25:52.130
and then putting that
desk into another desk.

00:25:52.300 --> 00:25:55.620
This saves copies,
especially if you have a streaming

00:25:55.620 --> 00:25:59.260
model in the first place,
and if you don't want to make multiple

00:25:59.260 --> 00:26:03.230
copies of large chunks of information,
this allows you to stream into

00:26:03.230 --> 00:26:07.250
a descriptor without having
to make multiple copies of

00:26:07.360 --> 00:26:08.950
large amount of information.

00:26:08.960 --> 00:26:10.650
It's a little more complex.

00:26:10.760 --> 00:26:13.620
It'll be used in more rare circumstances.

00:26:13.640 --> 00:26:16.790
We actually use a lot of
this inside AppleScript,

00:26:16.870 --> 00:26:19.640
but now it's available
to you in the internet.

00:26:20.100 --> 00:26:20.930
It's called the AE Helpers package.

00:26:20.940 --> 00:26:23.840
So let me tell you
what this means to you.

00:26:23.840 --> 00:26:26.540
For developers, for scripters,
it doesn't mean anything.

00:26:26.540 --> 00:26:29.970
Hopefully it will mean that the
applications that you're scripting

00:26:29.970 --> 00:26:31.190
will work a little better.

00:26:31.200 --> 00:26:33.370
To developers,
it means that if you've got

00:26:33.370 --> 00:26:36.730
code that relies on AE Gizmos,
you can port it to Mac OS X or to

00:26:36.730 --> 00:26:42.260
Carbon applications on Mac OS 9 without
having to carry on that old link library.

00:26:42.260 --> 00:26:47.400
And with the AE Print facility that I'm
going to show you more of a little later,

00:26:47.710 --> 00:26:50.080
it helps you debug because
you can actually see it.

00:26:50.100 --> 00:26:53.850
You can see what's going on inside
your descriptors in a printf function.

00:26:55.580 --> 00:26:58.640
So let's move on to the next one,
support for the double as problem.

00:26:58.640 --> 00:27:01.780
How many of you have run into
this in real life when you ask an

00:27:01.870 --> 00:27:06.860
application from a script to give
you some value as some other type,

00:27:06.870 --> 00:27:12.020
and it gives you a list of things of that
value and then complains that it can't

00:27:12.020 --> 00:27:15.080
coerce that list into what you asked for?

00:27:15.590 --> 00:27:17.460
Fair number have run into that.

00:27:17.500 --> 00:27:20.680
That's because the as term is
used in two ways in AppleScript.

00:27:20.790 --> 00:27:23.260
One, it's a binary coercion operator.

00:27:23.300 --> 00:27:25.090
Take this and coerce it to that type.

00:27:25.170 --> 00:27:27.840
And second,
it's used as a parameter to events.

00:27:27.840 --> 00:27:30.270
And when it's used as
a parameter to events,

00:27:30.270 --> 00:27:33.000
AppleScript isn't really
smart enough to say,

00:27:33.000 --> 00:27:34.630
oh, I'm going to use this.

00:27:35.000 --> 00:27:37.830
The application must have handled that,
so I'm not going to do

00:27:37.840 --> 00:27:39.210
an additional coercion.

00:27:39.210 --> 00:27:41.240
It tries to be too helpful.

00:27:41.240 --> 00:27:46.330
It knows that you want, for example,
the files as file

00:27:46.430 --> 00:27:49.610
specifications or as aliases.

00:27:49.610 --> 00:27:52.890
So it takes the result and it tries
to coerce it to what you ask for,

00:27:53.080 --> 00:27:54.620
even if the result is a list.

00:27:55.870 --> 00:27:57.830
And so you get one of two things.

00:27:57.870 --> 00:28:01.760
One is you either get a coercion
error or you get a bad coercion.

00:28:01.760 --> 00:28:04.430
For example,
if you ask for things as strings,

00:28:04.450 --> 00:28:07.230
it's going to take this list,
and if the list can be

00:28:07.230 --> 00:28:09.300
coerced to a string,
it'll do it.

00:28:10.140 --> 00:28:13.040
Which isn't nice if you were asking
for the file names of every file

00:28:13.150 --> 00:28:16.480
and you get one string with all the
file names concatenated together.

00:28:20.180 --> 00:28:24.300
So this is primarily troublesome for
plural key forms or whose clauses,

00:28:24.340 --> 00:28:29.050
which are really the most useful things,
because whose clauses let

00:28:29.140 --> 00:28:31.600
the application do the work
without you having to iterate.

00:28:31.600 --> 00:28:33.630
In order to work around this,
you have to iterate,

00:28:33.630 --> 00:28:34.950
you have to send more events.

00:28:34.950 --> 00:28:37.450
It's much slower,
and it forces scripters to

00:28:37.450 --> 00:28:39.490
write unnecessarily slow loops.

00:28:41.490 --> 00:28:43.880
So we've got a solution,
and the solution is,

00:28:43.880 --> 00:28:47.350
in your applications,
if you handled the as parameter,

00:28:47.380 --> 00:28:51.550
all you have to do is to put an
optional parameter in the reply

00:28:51.550 --> 00:28:55.000
of the getData event saying,
I handled the as parameter.

00:28:55.000 --> 00:28:57.260
And AppleScript will
look at that and say,

00:28:57.260 --> 00:29:00.470
hey, somebody handled the as parameter,
and it won't try to

00:29:00.590 --> 00:29:01.910
do the coercion again.

00:29:01.970 --> 00:29:03.480
It's actually very straightforward.

00:29:03.480 --> 00:29:06.260
And it's compatible,
so that if your application

00:29:06.340 --> 00:29:09.570
doesn't supply it,
AppleScript will do it the old way.

00:29:10.400 --> 00:29:12.630
Scripts that didn't work
will continue not to work,

00:29:12.710 --> 00:29:15.450
and scripts that did use the
workaround will continue to work.

00:29:15.500 --> 00:29:19.430
So that if you do this,
let your scripters know that you do this,

00:29:19.430 --> 00:29:23.120
so that they won't have to
use the workarounds anymore.

00:29:23.120 --> 00:29:25.660
So let me show you how it works.

00:29:25.660 --> 00:29:31.040
Once again,
we're in our simple text application.

00:29:31.040 --> 00:29:34.480
Oh no,
we're not in our simple text application,

00:29:34.490 --> 00:29:38.240
because we have a different
application for this.

00:29:41.820 --> 00:29:47.840
To demo this,
we're using Quinn's vulnerable Moro SL.

00:29:48.470 --> 00:29:56.800
And more OSL is a lovely framework for
building very scriptable applications.

00:29:56.800 --> 00:30:03.580
And one of the things,
and let's just show an example of

00:30:03.580 --> 00:30:07.210
more OSL and run the application.

00:30:10.200 --> 00:30:12.200
And here's a script.

00:30:12.200 --> 00:30:14.090
It makes three new windows,
and it gets the name of

00:30:14.090 --> 00:30:15.600
every window as string,
right?

00:30:15.600 --> 00:30:19.630
Well, this is a classic double as case.

00:30:19.630 --> 00:30:29.390
Or let's say, I think that'll work.

00:30:39.710 --> 00:30:44.060
So this makes three new windows,
window A, window B, window C,

00:30:44.360 --> 00:30:48.810
and it returns the name of
every window as Unicode text.

00:30:49.140 --> 00:30:54.640
But what happened is that MoroSL gave
me the name of every window as a

00:30:54.640 --> 00:30:57.850
list of three Unicode text items,
and then AppleScript said, oh,

00:30:57.880 --> 00:30:59.530
it wants that list as Unicode text.

00:30:59.610 --> 00:31:03.570
So it concatenated them all
into one Unicode text string.

00:31:04.130 --> 00:31:06.890
So when my application

00:31:08.550 --> 00:31:12.490
has four windows named
CBA and Untitled One.

00:31:12.830 --> 00:31:16.200
What I get is a single string
that says CBA Untitled One.

00:31:16.230 --> 00:31:17.790
That's not very helpful.

00:31:19.900 --> 00:31:28.000
[Transcript missing]

00:31:31.810 --> 00:31:38.180
And what we do is right here,
if this is a get data event,

00:31:38.180 --> 00:31:42.100
and if it has an as parameter,
we took care of it.

00:31:42.220 --> 00:31:46.720
And so what we do is we
basically put the IDAS,

00:31:46.900 --> 00:31:54.030
the I did as parameter,
as true into the reply.

00:31:54.040 --> 00:31:55.150
Okay.

00:31:57.220 --> 00:31:58.510
And that's basically all we do.

00:31:58.510 --> 00:32:02.550
Let's quit the application
and rebuild it.

00:32:06.320 --> 00:32:09.170
And run it again.

00:32:09.270 --> 00:32:11.890
And this time when we run the script.

00:32:14.670 --> 00:32:18.550
You see our result is a list
of four Unicode text strings,

00:32:18.550 --> 00:32:20.030
which is pretty much what we wanted.

00:32:20.040 --> 00:32:21.990
We wanted it as four Unicode text.

00:32:21.990 --> 00:32:25.040
So thank you, Quinn,
for providing a great framework.

00:32:29.870 --> 00:32:31.210
So it's really simple.

00:32:31.390 --> 00:32:36.060
If your application handled the as,
all you do is put IDAS true in the reply,

00:32:36.060 --> 00:32:36.770
and there you go.

00:32:36.870 --> 00:32:39.520
And we have the slides back.

00:32:40.520 --> 00:32:44.660
What this means to you is you can choose,
if you did the coercion,

00:32:44.660 --> 00:32:46.780
to let AppleScript know
that you did it or not.

00:32:46.840 --> 00:32:50.720
What this means to scripters is that
applications should improve and you

00:32:50.820 --> 00:32:55.030
should be able to use fewer workarounds,
fewer loops, and use more applications'

00:32:55.030 --> 00:32:56.160
native capabilities.

00:32:56.180 --> 00:32:57.600
Okay?

00:32:57.600 --> 00:33:01.940
Now, I got some Unicode text there,
and you saw that the Unicode text all

00:33:02.010 --> 00:33:04.660
got concatenated together as a string.

00:33:04.660 --> 00:33:07.800
Well, that's something that didn't
happen prior to AppleScript 1.6.

00:33:08.360 --> 00:33:11.650
Unicode class support is something
that we added in 1.6 primarily to

00:33:11.740 --> 00:33:13.630
handle what's going on with the finder.

00:33:13.640 --> 00:33:18.810
The finder 10 now returns all
file names as Unicode text.

00:33:18.820 --> 00:33:23.170
AppleScript 1.4.3 could take these,
and it could send them

00:33:23.170 --> 00:33:27.300
to other applications,
but it displayed them as data, Chevron,

00:33:27.300 --> 00:33:29.910
UTXT, and then a bunch of hexadecimal.

00:33:29.920 --> 00:33:33.510
It was better than nothing,
but it wasn't great.

00:33:33.580 --> 00:33:37.360
1.5 and 1.5.5 added some
Unicode text support,

00:33:37.360 --> 00:33:38.340
but it was broken into two.

00:33:38.360 --> 00:33:40.780
It was broken into two in some places,
and it didn't have any of

00:33:40.780 --> 00:33:42.150
the concatenation operations.

00:33:42.260 --> 00:33:43.970
It didn't have the substring operations.

00:33:44.080 --> 00:33:46.690
It didn't do anything
that you wanted it to do.

00:33:46.700 --> 00:33:51.610
When we realized that if you were
running Mac OS 9 scripts on Mac OS X,

00:33:51.610 --> 00:33:55.320
and the only finder around
was the Mac OS X finder,

00:33:55.320 --> 00:33:59.790
and the Mac OS X finder always
returned Unicode file names,

00:33:59.790 --> 00:34:04.700
and your scripts wanted to take file
names and concatenate them and piece them

00:34:04.710 --> 00:34:08.190
apart and do all these things with them,
those scripts.

00:34:08.300 --> 00:34:10.540
Those scripts would break unless
we could do full Unicode text.

00:34:10.630 --> 00:34:13.810
So we moved that to high priority,
and we implemented it in 1.6,

00:34:13.810 --> 00:34:15.230
both for 9 and for 10.

00:34:17.840 --> 00:34:20.870
So Unicode strings for the
scripter have character,

00:34:20.910 --> 00:34:24.300
word, paragraph, and text item elements,
just like strings.

00:34:24.300 --> 00:34:27.100
They have a length property,
just like strings.

00:34:27.100 --> 00:34:31.640
They have coercions to lists, records,
strings, style text, and number.

00:34:31.640 --> 00:34:33.760
They have the concatenation operator.

00:34:33.760 --> 00:34:36.260
They have a number of
comparison operators.

00:34:36.260 --> 00:34:39.400
Their comparisons obey
the considerations,

00:34:39.400 --> 00:34:45.180
but they actually obey the considerations
according to Unicode comparison rules,

00:34:45.180 --> 00:34:47.680
not the styled text comparison rules.

00:34:47.700 --> 00:34:50.700
So less than,
greater than may be interpreted

00:34:50.700 --> 00:34:55.090
differently for Unicode text than you
would expect it to be for style text,

00:34:55.170 --> 00:34:57.580
especially when it comes
to things like case.

00:34:57.580 --> 00:35:02.670
And they support all of the key forms,
absolute position, the first, last,

00:35:02.670 --> 00:35:05.140
middle, sum, every, and range.

00:35:05.280 --> 00:35:10.620
Characters 1 through
negative 2 of Unicode text.

00:35:10.620 --> 00:35:12.560
Some character of Unicode text.

00:35:12.570 --> 00:35:14.620
We'll pick one out of the middle.

00:35:14.620 --> 00:35:17.620
Chris Nebel always wants
to do some integerization.

00:35:17.700 --> 00:35:21.820
and have that generate a random number,
but that's a different item.

00:35:27.070 --> 00:35:29.260
So if we could have the
Demo 1 machine up again.

00:35:29.300 --> 00:35:35.060
Quit this fine application.

00:35:36.510 --> 00:35:44.780
So here's a script that scripts
the finder to get a name.

00:35:54.670 --> 00:35:56.600
We'll get the class of the file name.

00:35:56.600 --> 00:36:03.490
That's not what I wanted.

00:36:03.560 --> 00:36:05.920
I wanted the class.

00:36:05.990 --> 00:36:09.120
The class of the file
name is Unicode text.

00:36:11.200 --> 00:36:18.200
I can get the individual
characters of the file name.

00:36:18.470 --> 00:36:34.590
This is a hack here because for some
reason the finder is returning an extra

00:36:34.590 --> 00:36:34.590
garbage Unicode character at the end of a
Japanese file name that it doesn't return

00:36:34.590 --> 00:36:34.590
at the end of a non-Japanese file name.

00:36:34.590 --> 00:36:34.590
So there's a hack here.

00:36:34.590 --> 00:36:34.590
We haven't figured out what's going on.

00:36:34.590 --> 00:36:34.590
But if

00:36:34.770 --> 00:36:36.920
This is an English system.

00:36:36.920 --> 00:36:39.840
It's set to English language,
but if I get the characters

00:36:39.840 --> 00:36:41.950
of the file name,
I get them in Japanese in

00:36:41.950 --> 00:36:43.220
the script editor.

00:36:43.220 --> 00:36:58.690
I can say character 1
of the file name and...

00:37:08.830 --> 00:37:11.020
I'm going a little off-road here
because I didn't practice this.

00:37:11.020 --> 00:37:15.070
And I get the concatenation
of the Japanese character

00:37:15.070 --> 00:37:17.340
and the English character.

00:37:17.340 --> 00:37:18.600
So concatenation works.

00:37:18.600 --> 00:37:21.020
As you saw before, range works.

00:37:21.020 --> 00:37:31.510
If I say file one,
and I say every word...

00:37:33.400 --> 00:37:38.500
[Transcript missing]

00:37:38.900 --> 00:38:52.200
[Transcript missing]

00:38:54.390 --> 00:38:58.230
Let me tell you about some differences
between Mac OS 9 and Mac OS X.

00:38:58.640 --> 00:39:01.090
Scripting editions are the first ones.

00:39:01.310 --> 00:39:06.060
There are some new features in
Mac OS X that are actually really great.

00:39:06.290 --> 00:39:08.560
They're going to be hard to get used to,
but they're really great.

00:39:09.920 --> 00:39:15.610
The scripting editions folders follow the
locales model that Mac OS X introduced.

00:39:15.640 --> 00:39:19.170
What that means is that there
isn't just a single system folder.

00:39:19.170 --> 00:39:22.200
There's no unity between you,
your operating system,

00:39:22.200 --> 00:39:23.880
and your machine anymore.

00:39:23.880 --> 00:39:26.940
It used to be,
when I was a young lad and we

00:39:26.940 --> 00:39:31.350
invented personal computers,
that if you had a machine,

00:39:31.350 --> 00:39:35.760
the machine and your environment
and the operating system

00:39:35.760 --> 00:39:38.450
software were all the same thing.

00:39:38.560 --> 00:39:39.900
That's why it's so important to have
a system that's as good as a machine.

00:39:39.900 --> 00:39:41.850
That's why there's one
system folder on Mac OS 9.

00:39:41.850 --> 00:39:44.620
But that doesn't work
for shared machines,

00:39:44.620 --> 00:39:48.520
and that doesn't work for
machines in network environments,

00:39:48.590 --> 00:39:52.510
and that doesn't work for machines that
you want to keep running reliably for

00:39:52.510 --> 00:39:56.450
long periods of time without screwing
around with the system software.

00:39:56.460 --> 00:39:59.840
So Mac OS X separates those.

00:39:59.840 --> 00:40:04.170
There is a system folder for the machine,
there's a system folder

00:40:04.230 --> 00:40:07.920
for the operating system,
and there's a system folder

00:40:07.920 --> 00:40:09.880
for each individual user.

00:40:09.880 --> 00:40:13.180
And when you log in as that user,
you get your own special

00:40:13.350 --> 00:40:15.260
system extensions and editions.

00:40:15.260 --> 00:40:20.200
And we followed this model in that there
are at least three scripting editions

00:40:20.200 --> 00:40:23.630
folders on every Mac OS X system,
sometimes five.

00:40:23.660 --> 00:40:29.720
The three are systems, libraries,
scripting editions, which is the one the

00:40:29.720 --> 00:40:33.280
operating system provides,
and that's the one pre-populated

00:40:33.280 --> 00:40:35.090
with Apple editions,
and that's where the

00:40:35.090 --> 00:40:36.300
standard editions are.

00:40:39.860 --> 00:40:40.960
And we followed this model
in that there are systems,

00:40:41.130 --> 00:40:42.420
libraries, scripting editions,
which is common to that machine

00:40:42.420 --> 00:40:43.140
and which is changeable.

00:40:43.140 --> 00:40:45.460
If you're an administrator,
you can put new scripting

00:40:45.470 --> 00:40:48.760
editions in there,
and they will be available by all

00:40:48.760 --> 00:40:53.680
users on that machine without having
to change what's in your scripting

00:40:53.680 --> 00:40:55.820
editions folder in your operating system.

00:40:55.820 --> 00:40:59.600
So that if you really want to get
back to a clean default machine,

00:40:59.600 --> 00:41:02.830
just throw out slash library
slash scripting editions,

00:41:02.990 --> 00:41:05.520
and the OS will be the
way it was shipped.

00:41:05.600 --> 00:41:09.580
You don't have to hunt through, you know,
was this a system one?

00:41:09.840 --> 00:41:11.800
Or was this something I added?

00:41:11.820 --> 00:41:14.910
And then if you've got
multiple users on the machine,

00:41:14.910 --> 00:41:17.520
every user has their own
in their user folder,

00:41:17.570 --> 00:41:20.500
in their libraries folder,
in their user folder,

00:41:20.500 --> 00:41:23.360
they can have a scripting
editions folder.

00:41:23.360 --> 00:41:26.010
And if they populate that
with scripting editions,

00:41:26.010 --> 00:41:28.220
those will be available
just to that user,

00:41:28.220 --> 00:41:30.710
but they won't be
available to other users.

00:41:30.720 --> 00:41:34.530
So if you've got a machine that you
want to use as a graphics processing

00:41:34.530 --> 00:41:38.340
workstation sometimes or as a
database machine some other times,

00:41:38.340 --> 00:41:39.820
and they have different scripts.

00:41:39.930 --> 00:41:41.750
And they might conflict.

00:41:41.970 --> 00:41:45.090
You can have some in one and some in
another and just log in as a different

00:41:45.090 --> 00:41:48.710
user and you get a different set and
you can keep conflicting ones apart.

00:41:48.730 --> 00:41:50.880
It's actually a very useful structure.

00:41:52.450 --> 00:41:55.480
The code model for writing
scripting editions,

00:41:55.480 --> 00:42:00.150
if you're a developer, is different,
and this is a little problematic.

00:42:00.160 --> 00:42:04.480
On Mac OS X, all code must be Carbon.

00:42:04.480 --> 00:42:07.920
On Mac OS 9,
system code and scripting editions

00:42:07.920 --> 00:42:10.880
are system code because they can
be invoked by any application,

00:42:10.880 --> 00:42:12.620
cannot be Carbon.

00:42:12.620 --> 00:42:16.620
And so that means it's technically
impossible to write a scripting edition

00:42:16.670 --> 00:42:18.850
that will work on both 9 and 10.

00:42:19.600 --> 00:42:21.580
And so don't even try it.

00:42:21.860 --> 00:42:23.650
It's just not worth it.

00:42:23.840 --> 00:42:26.210
If you want to ship
Mac OS X scripting editions,

00:42:26.210 --> 00:42:28.990
you have to take your
Mac OS 9 scripting edition,

00:42:28.990 --> 00:42:32.820
carbonize it, package it for Mac OS X,
and ship it for Mac OS X.

00:42:32.820 --> 00:42:34.200
And they'll be separate.

00:42:34.220 --> 00:42:39.520
Scripting editions for Mac OS X can
be either the CFM model that

00:42:39.610 --> 00:42:43.760
you build with CodeWarrior,
or they can be the Mach-O model

00:42:43.760 --> 00:42:45.930
that you build with Project Builder.

00:42:45.940 --> 00:42:49.350
And they can be flat, single file,
or they can be packaged.

00:42:49.360 --> 00:42:52.050
In bundles,
if you went to the application

00:42:52.050 --> 00:42:57.940
packaging and extensions,
they're actually bundles, not packages,

00:42:57.940 --> 00:43:00.860
because packages are applications,
but that's a different thing

00:43:00.860 --> 00:43:02.460
I don't quite understand yet.

00:43:02.500 --> 00:43:03.710
They're packages.

00:43:03.780 --> 00:43:05.340
They're not bundles.

00:43:05.340 --> 00:43:05.940
They are packages.

00:43:05.940 --> 00:43:06.740
Okay.

00:43:06.740 --> 00:43:08.850
They are bundles that are packages.

00:43:13.900 --> 00:43:16.610
But theoretically,
you could build a package that

00:43:16.610 --> 00:43:19.640
had both the classic and the
Mac OS X deliverable in it,

00:43:19.720 --> 00:43:21.820
but that would be kind of useless.

00:43:21.820 --> 00:43:25.480
It would be helpful for you to
upload and download just one copy,

00:43:25.480 --> 00:43:28.840
but the user would have to put it
both in their Mac OS X scripting

00:43:28.840 --> 00:43:32.800
editions folder and in their
Mac OS 9 scripting editions folder.

00:43:32.800 --> 00:43:37.460
And so you'd have a copy of a useless
scripting edition in each of the folders.

00:43:37.460 --> 00:43:39.540
You'd have four copies of the code.

00:43:39.780 --> 00:43:42.800
When you only really need to have two,
it's just not worth it.

00:43:42.800 --> 00:43:44.180
So we don't recommend that.

00:43:44.380 --> 00:43:49.190
If you have old scripting editions,
you want to migrate to 10.

00:43:49.520 --> 00:43:53.890
Migrate them to Carbon and ship them as
Mac OS X only is the right way to do it.

00:43:55.370 --> 00:43:58.310
Access to scripting editions
is really interesting.

00:43:58.440 --> 00:44:01.700
I tried to go through this last year
and I think I confused more people,

00:44:01.700 --> 00:44:04.940
including myself, than I got clear.

00:44:05.170 --> 00:44:08.480
Mac OS 9 and Classic really
behave as always.

00:44:08.630 --> 00:44:13.420
Classic applications will only have
access to classic scripting editions.

00:44:13.530 --> 00:44:19.260
Mac OS X scripts will have access to the
Mac OS X scripting editions in all of

00:44:19.260 --> 00:44:23.070
the Mac OS X scripting editions folders.

00:44:23.260 --> 00:44:26.550
And they can get at Mac OS 9
scripting editions by targeting a

00:44:26.550 --> 00:44:28.530
Mac OS 9 application with an event.

00:44:28.580 --> 00:44:35.260
So if you send an event from 10 to 9,
from a 10 script to a 9 application,

00:44:35.320 --> 00:44:39.360
and that event is a
scripting edition event,

00:44:39.360 --> 00:44:42.250
it will execute with
9 scripting editions.

00:44:42.260 --> 00:44:47.400
Which is both important to know if you
want to invoke the 9 scripting edition,

00:44:47.400 --> 00:44:51.450
and important to know if you
don't have a 10 equivalent of it.

00:44:53.200 --> 00:44:57.940
The scripting edition
will get invoked in that.

00:44:58.100 --> 00:45:04.390
So if you say, tell application launcher,
display dialog, display dialog will

00:45:04.390 --> 00:45:06.470
happen in the 9 space.

00:45:06.550 --> 00:45:09.480
It will happen in classic,
and the display dialog you'll

00:45:09.490 --> 00:45:13.780
get is 9's display dialog,
not 10's display dialog,

00:45:13.780 --> 00:45:15.830
so it will come out platinum, not Aqua.

00:45:16.060 --> 00:45:17.110
Important to know.

00:45:19.020 --> 00:45:22.890
Another important thing to know
is that Mac OS X applications

00:45:22.900 --> 00:45:26.600
don't execute scripting additions
in their own application space.

00:45:26.600 --> 00:45:31.400
In fact, most Mac OS X applications don't
know about scripting additions.

00:45:31.470 --> 00:45:35.960
And so AppleScript in Mac OS X,
if it sends a scripting addition event to

00:45:35.970 --> 00:45:40.490
an application and the application says,
"I didn't handle that event,"

00:45:40.680 --> 00:45:44.950
then AppleScript re-dispatches
the scripting addition event

00:45:45.170 --> 00:45:48.210
to the sending application.

00:45:48.320 --> 00:45:52.200
To get executed in the
sending applications process.

00:45:52.200 --> 00:45:55.530
So if, sorry,
I'm going back a little bit.

00:45:55.610 --> 00:45:59.590
To execute a scripting edition in 9,
you've got to do two things.

00:45:59.600 --> 00:46:01.690
You've got to target a
Mac OS 9 application,

00:46:01.690 --> 00:46:05.260
and what Doug Korns of our group
tends to do is he puts Launcher

00:46:05.260 --> 00:46:08.120
in the startup items folder.

00:46:08.120 --> 00:46:12.480
And Launcher is a great application
because you can target it with scripts,

00:46:12.480 --> 00:46:15.400
it always hangs around,
it's relatively unobtrusive,

00:46:15.400 --> 00:46:18.720
and it's useful for launching your
Mac OS 9 applications in Classic.

00:46:18.720 --> 00:46:24.280
And then he uses the using terms
from clause to actually target,

00:46:24.280 --> 00:46:27.320
to actually compile the script.

00:46:27.490 --> 00:46:30.420
So basically,
you have to do a little setup

00:46:30.420 --> 00:46:32.700
to actually get at Launcher.

00:46:32.700 --> 00:46:35.410
You tell the Launcher,
using terms from the

00:46:35.520 --> 00:46:37.130
real scripting edition,

00:46:38.860 --> 00:46:40.570
Get monitor depth or something like that.

00:46:40.570 --> 00:46:42.150
And then end and end.

00:46:42.160 --> 00:46:45.240
And this script,
if you actually run it in

00:46:45.370 --> 00:46:48.610
10 with classic running,
it will send an event

00:46:48.610 --> 00:46:50.280
over to the launcher.

00:46:50.280 --> 00:46:53.080
Launcher will execute it in classic.

00:46:53.080 --> 00:46:57.490
It will execute even a 68K scripting
edition and return the result

00:46:57.490 --> 00:46:59.440
back to your Mac OS X script.

00:46:59.640 --> 00:47:05.490
So if you want to use your old classic
scripting editions for Mac OS X scripts,

00:47:05.490 --> 00:47:09.130
this is the structure
that you use to do them.

00:47:12.230 --> 00:47:15.580
On Mac OS X,
scripting editions aren't loaded

00:47:15.580 --> 00:47:18.630
in the system heap at startup time
because there is no system heap and

00:47:18.640 --> 00:47:20.140
there basically is no startup time.

00:47:20.140 --> 00:47:21.240
So we can't do that.

00:47:22.750 --> 00:47:25.240
We were thinking of loading
scripting editions behind the

00:47:25.240 --> 00:47:27.670
back of every application,
but that would burden every

00:47:27.670 --> 00:47:31.810
application launch time with the
scripting edition's load time,

00:47:31.810 --> 00:47:35.180
and applications on 10 don't need
to do more work at launch time.

00:47:35.230 --> 00:47:37.150
We don't want to add
another bounce just for us.

00:47:37.480 --> 00:47:41.490
So, to make us not have our own
bounce for every application,

00:47:41.490 --> 00:47:44.590
applications don't load
scripting editions,

00:47:44.590 --> 00:47:48.570
and when we send an application
a scripting edition command,

00:47:48.640 --> 00:47:52.720
if it doesn't handle it,
then we execute it basically ourselves

00:47:52.820 --> 00:47:55.550
in the current application context.

00:47:55.640 --> 00:47:59.640
So, an application, if it chooses to,
if it's an OSA client,

00:47:59.640 --> 00:48:04.110
if it's going to execute scripts,
and it would be better off to execute

00:48:04.110 --> 00:48:07.450
scripting editions in its own context,
it'll have to do that.

00:48:07.460 --> 00:48:11.310
So, if it does have scripting editions,
if not, we'll just handle it for it.

00:48:11.390 --> 00:48:14.170
The result to the scripter
should be transparent,

00:48:14.170 --> 00:48:18.740
and the result to the programmer should
be that your application launches faster,

00:48:18.740 --> 00:48:23.260
and that people can send all sorts of
scripting editions to your application.

00:48:23.360 --> 00:48:25.100
You just won't handle them.

00:48:25.100 --> 00:48:27.320
You'll never even see them,
but the scripter will

00:48:27.320 --> 00:48:28.450
have the same result.

00:48:28.460 --> 00:48:30.600
Let's see how that works.

00:48:38.750 --> 00:48:41.160
So here I've got a couple
of scripting additions.

00:48:41.240 --> 00:48:44.130
I guess I can quit this.

00:48:44.380 --> 00:48:48.440
And I'll go to the finder
and go to my home directory

00:48:48.440 --> 00:48:50.890
and to my libraries folder.

00:48:51.140 --> 00:48:54.500
And note that I don't have a
scripting additions folder here.

00:48:54.620 --> 00:48:57.010
So I have to create one.

00:49:00.460 --> 00:49:01.890
And for now, I didn't add a space.

00:49:01.980 --> 00:49:06.050
That's an oversight that
we hope to be able to fix.

00:49:06.060 --> 00:49:10.170
And I take a scripting edition,
and I drop it in my

00:49:10.180 --> 00:49:12.780
scripting editions folder.

00:49:15.600 --> 00:49:19.990
So now I have access to that
scripting edition's terminology,

00:49:19.990 --> 00:49:21.740
and I can run it, and it works.

00:49:21.740 --> 00:49:26.460
And what's interesting is that...

00:49:27.300 --> 00:49:32.280
I still have access to scripting
editions from all other applications.

00:49:32.340 --> 00:49:35.100
Let me go down and see if
Simple Text is still running here.

00:49:35.100 --> 00:49:36.960
So here's Simple Text.

00:49:36.960 --> 00:49:38.590
Here's that script.

00:49:38.690 --> 00:49:42.790
I bet you didn't know
Simple Text had this option,

00:49:42.790 --> 00:49:43.740
did you?

00:49:47.480 --> 00:49:51.780
So you can see that SimpleText has
access to that scripting edition too.

00:49:51.780 --> 00:49:52.280
Okay?

00:49:53.820 --> 00:49:57.700
Now, the Finder,

00:50:05.460 --> 00:50:08.480
The Finder doesn't execute scripts,
so it doesn't have

00:50:08.580 --> 00:50:10.320
scripting editions loaded.

00:50:10.410 --> 00:50:12.560
So,
this Open for Access scripting edition

00:50:12.560 --> 00:50:16.300
and this Parse XML scripting edition
commands will be sent to the Finder,

00:50:16.360 --> 00:50:18.800
but the Finder's going to say,
"I don't handle these."

00:50:18.890 --> 00:50:22.970
But instead of getting an error,
event not handled,

00:50:22.970 --> 00:50:27.310
AppleScript will just resend
it to the script editor.

00:50:27.340 --> 00:50:31.700
The script editor will execute it,
and you get the right results.

00:50:31.700 --> 00:50:31.700
And if you look at the event log,

00:50:34.010 --> 00:50:37.300
You'll see that you don't
even see that redispatch.

00:50:37.400 --> 00:50:41.150
It thinks it's telling the finder,
it thinks the finder's executing it,

00:50:41.160 --> 00:50:46.460
but the finder is not, script editor is,
you're just getting the right result.

00:50:53.900 --> 00:50:56.300
So what this means to developers
is that you should port your

00:50:56.300 --> 00:50:59.760
scripting editions to Carbon in
order to get them on Mac OS X.

00:50:59.780 --> 00:51:03.890
And you need to release both separate
Mac OS 9 and Mac OS X versions

00:51:03.900 --> 00:51:05.660
of your scripting editions.

00:51:05.700 --> 00:51:10.380
To scripters, what this means is,
you know, for optimum benefit,

00:51:10.380 --> 00:51:15.680
you could and should move your scripting
edition calls out of your tell blocks.

00:51:15.970 --> 00:51:20.440
Since if they're sent to an application
that doesn't understand them,

00:51:20.440 --> 00:51:25.360
they're just going to be redispatched
to the script application anyway.

00:51:25.360 --> 00:51:27.490
You might as well move
them out of your telblocks.

00:51:27.630 --> 00:51:31.930
It'll just save an extra event
send to the application for that.

00:51:31.980 --> 00:51:35.350
And if you want to
target Mac OS 9 editions,

00:51:35.350 --> 00:51:38.820
you need to enclose those in a
telblock for the Mac OS 9 edition.

00:51:38.820 --> 00:51:42.750
A couple more differences in
Mac OS X that I want to cover

00:51:42.750 --> 00:51:45.410
before we end and go to questions.

00:51:45.900 --> 00:51:48.430
One is the packages issue.

00:51:48.440 --> 00:51:52.830
Mac OS X apps are folders, not files.

00:51:52.920 --> 00:51:57.980
As you heard in the bundles and
extensions discussion on Friday,

00:51:57.980 --> 00:52:03.960
this is for being able to work on
non-HFS file systems and being able to

00:52:03.960 --> 00:52:07.570
transport things over the network without
having resource forks and types and

00:52:07.610 --> 00:52:09.480
creators and things like that mangled.

00:52:09.480 --> 00:52:13.150
But there are some key differences
there because your scripts,

00:52:13.300 --> 00:52:15.880
as scripters,
probably assume that you're not

00:52:15.880 --> 00:52:15.880
going to be able to do that.

00:52:16.120 --> 00:52:18.330
That if you get an application,
it's a file.

00:52:18.340 --> 00:52:19.580
It's not a file.

00:52:19.610 --> 00:52:22.820
Info 4 will report that the
application is a directory.

00:52:22.820 --> 00:52:25.520
If you ask for path 2
with an application,

00:52:25.520 --> 00:52:27.910
it's going to have a colon at the end.

00:52:27.980 --> 00:52:30.000
And it's going to end in .app actually.

00:52:30.000 --> 00:52:34.160
It's going to end in .app colon because
that's its real name on the file system.

00:52:34.160 --> 00:52:39.850
You are going to see differences between
what the real thing is on the disk

00:52:39.880 --> 00:52:43.720
from what the user sees in the finder.

00:52:43.720 --> 00:52:46.550
Now,
we're going to work on... showing you

00:52:46.550 --> 00:52:51.250
both versions and giving you access to
what the truth is and what the user sees.

00:52:51.260 --> 00:52:54.020
We need some help from the finder
and from the system in doing that.

00:52:54.100 --> 00:52:55.890
That will come in subsequent versions.

00:52:55.950 --> 00:52:59.840
But for now,
remember that when you use AppleScript,

00:52:59.990 --> 00:53:03.060
AppleScript will tell you
the truth of the file system

00:53:03.100 --> 00:53:05.200
in that an app is a folder.

00:53:05.340 --> 00:53:09.660
It ends in a colon and it ends
in .app even if it doesn't

00:53:09.810 --> 00:53:12.290
look like that in the finder.

00:53:17.440 --> 00:53:18.430
Paths and extensions.

00:53:18.430 --> 00:53:22.810
We didn't change,
and we're still using most

00:53:22.990 --> 00:53:26.620
of the Carbon APIs for this,
we didn't change the way that

00:53:26.630 --> 00:53:30.460
we interpret and show things
to the user in Mac OS X.

00:53:30.480 --> 00:53:33.240
If you're accustomed to
colon-separated path names,

00:53:33.240 --> 00:53:36.310
you get colon-separated path names,
so your scripts that parse

00:53:36.500 --> 00:53:38.070
colon paths will still work.

00:53:38.150 --> 00:53:41.700
If you ask the finder for every disk,
you're going to get the

00:53:41.700 --> 00:53:45.140
disks on your desktop,
and you can start a colon-delimited

00:53:45.300 --> 00:53:47.280
path with those disk names.

00:53:47.400 --> 00:53:50.590
That's not the way the
file system really is,

00:53:50.590 --> 00:53:51.180
though.

00:53:51.580 --> 00:53:55.580
The file system really starts at slash,
and those disks are in slash

00:53:55.580 --> 00:53:56.990
volume slash something.

00:53:56.990 --> 00:54:01.960
We debated long and hard about whether to
give you access to both colon-delimited

00:54:02.050 --> 00:54:05.730
and slash-delimited file names,
and we thought that it was just

00:54:05.730 --> 00:54:08.570
going to be a total nightmare
for scripters to do that.

00:54:08.640 --> 00:54:11.610
So we're maintaining for
the file and alias types,

00:54:11.630 --> 00:54:16.500
the colon-delimited file name,
and for path two,

00:54:16.500 --> 00:54:19.540
and anything that returns
the file name as a string.

00:54:19.550 --> 00:54:20.760
We're going to continue to do that.

00:54:20.820 --> 00:54:25.190
We will probably not ever
support slash-delimited paths,

00:54:25.730 --> 00:54:28.190
but we'll support file URLs,
which I'll talk about

00:54:28.190 --> 00:54:29.110
in the next session.

00:54:30.620 --> 00:54:32.440
The Finder hides file extensions.

00:54:32.440 --> 00:54:33.880
It hides .app now.

00:54:33.880 --> 00:54:36.400
It will probably hide other
extensions in the future.

00:54:36.400 --> 00:54:40.270
Info 4, if you want to do anything
in the file system,

00:54:40.270 --> 00:54:43.500
you really need the full
name with the extension.

00:54:43.500 --> 00:54:47.620
So if you say tell app simple text,
we're doing a nice thing by not

00:54:47.620 --> 00:54:51.100
making you type simple text .app,
but the real name of the

00:54:51.100 --> 00:54:52.730
application is simple text .app.

00:54:53.100 --> 00:54:56.400
Info 4 will tell you that.

00:54:56.520 --> 00:54:58.520
Path 2, Info 4 will require that.

00:54:58.640 --> 00:55:00.290
Path 2 will tell you that.

00:55:00.600 --> 00:55:03.530
And in future releases,
we'll provide you more information

00:55:03.530 --> 00:55:06.570
on what the file extension is
and whether the file extension is

00:55:06.710 --> 00:55:10.290
showing or not in order to enable
your scripts to do the right thing.

00:55:12.690 --> 00:55:19.100
We are using extensions
more in AppleScript.

00:55:19.100 --> 00:55:21.860
As was talked about in the
presentation on Wednesday,

00:55:21.860 --> 00:55:25.620
extensions are not required,
but if present, they'll be interpreted.

00:55:25.620 --> 00:55:29.660
So if you get a script across
the internet that has no type,

00:55:29.660 --> 00:55:33.890
no creator, but ends in .script and
you double-click it,

00:55:34.150 --> 00:55:38.030
the script editor will open and it
will read it as a compiled script.

00:55:38.560 --> 00:55:40.700
So scpt is our compiled script file.

00:55:40.700 --> 00:55:45.060
.applescript is our uncompiled
raw text of AppleScript,

00:55:45.360 --> 00:55:48.960
and I assume that there will
be other .script files that

00:55:49.390 --> 00:55:52.870
may or may not be opened in the
script editor for other types.

00:55:53.000 --> 00:55:55.770
And we have two special
types for terminologies.

00:55:55.770 --> 00:55:59.830
.osax is a scripting edition,
and .asdictionary is for anything else

00:55:59.830 --> 00:56:02.990
that has an AppleScript dictionary,
whether or not it has

00:56:03.040 --> 00:56:04.340
code attached to it.

00:56:04.440 --> 00:56:08.320
For now,
if the user wants the extension on it,

00:56:08.400 --> 00:56:10.660
the user has to add
the extension manually.

00:56:10.660 --> 00:56:12.580
We don't add any
extensions automatically.

00:56:12.580 --> 00:56:17.780
As the system evolves to allow
extensions to be added automatically,

00:56:17.780 --> 00:56:20.970
if the user desires that,
we'll take advantage of that.

00:56:21.070 --> 00:56:24.100
But for now,
we don't put one on automatically.

00:56:24.190 --> 00:56:26.270
If the user wants one, they can use it.

00:56:26.360 --> 00:56:29.340
And the script editor will
continue to set the type and

00:56:29.340 --> 00:56:33.780
creator of new files it creates,
so that those files can be

00:56:33.990 --> 00:56:36.320
used on a Mac OS 9 system.

00:56:36.320 --> 00:56:39.470
And the AppleScript 1.6,
the Mac OS 9 version,

00:56:39.470 --> 00:56:41.970
will also understand files
without type and creator,

00:56:42.020 --> 00:56:43.300
but only in extension.

00:56:45.680 --> 00:56:49.590
So let me tell you what we're working
on before we close and go to questions.

00:56:49.600 --> 00:56:53.630
Our number one priority is getting
more Apple applications scriptable.

00:56:54.010 --> 00:56:57.510
AppleScript itself, we think,
is pretty good.

00:56:57.520 --> 00:56:58.970
We offered a solid product.

00:56:59.130 --> 00:57:02.860
It offers high degree of
compatibility with Mac OS 9.

00:57:02.860 --> 00:57:07.160
It's reasonably bug-free,
but it's the sound of one hand clapping.

00:57:07.160 --> 00:57:11.390
Until you can script the finder and
the preferences and mail and connect

00:57:11.520 --> 00:57:14.920
to the Internet and choose printers,
we don't think AppleScript is

00:57:14.920 --> 00:57:16.560
done on Mac OS X,
and so we're continuing

00:57:16.560 --> 00:57:17.460
to work on those things.

00:57:18.980 --> 00:57:22.130
We think the loss of networked
Apple events is a big hole.

00:57:22.140 --> 00:57:23.420
We're working on that.

00:57:23.420 --> 00:57:26.360
That looks very good for
the short-term future,

00:57:26.360 --> 00:57:28.820
is getting networked
Apple events back in.

00:57:28.870 --> 00:57:33.150
We want to more smoothly integrate
with features of Mac OS X.

00:57:33.150 --> 00:57:36.320
Paths and extensions are one.

00:57:36.350 --> 00:57:41.400
And the other capabilities of
Mac OS X that allow you to,

00:57:41.540 --> 00:57:46.610
say, execute things in the terminal.

00:57:47.630 --> 00:57:52.410
Let me just show you,
because this is a little hack

00:57:52.580 --> 00:57:58.990
that somebody put together,
but hacks are good, right?

00:58:01.150 --> 00:58:05.880
As I told you, there are separate
folders in each domain,

00:58:05.970 --> 00:58:10.840
and there's a components
folder in your library domain.

00:58:10.840 --> 00:58:14.990
And you can take, for example...

00:58:17.830 --> 00:58:25.090
A new OSA component and just drop it
in your /library/components folder.

00:58:28.320 --> 00:58:32.370
And when you run the script editor,
you have multiple items

00:58:32.550 --> 00:58:36.240
here in your pop-up,
so you have more than one OSA language.

00:58:36.240 --> 00:58:41.180
But this isn't Mark Aldrich's JavaScript,
this is something called Bundle Shell.

00:58:41.370 --> 00:58:47.920
And I can type ps-ax, for example,
and get a list of the processes

00:58:48.450 --> 00:58:50.710
running on the machine.

00:58:56.340 --> 00:58:59.340
This is actually Bundle Shell.

00:58:59.340 --> 00:59:04.640
This is a cheap little demo which
just takes the script and executes

00:59:04.740 --> 00:59:09.610
it from the Unix command line and
takes the result and pipes it back.

00:59:13.900 --> 00:59:15.400
Just to prove it's Unix.

00:59:15.400 --> 00:59:17.730
There we go.

00:59:17.730 --> 00:59:20.580
There's your password file.

00:59:21.780 --> 00:59:22.640
Back to the slides, please.

00:59:22.640 --> 00:59:26.570
So that's what I mean by more
integration with Mac OS X.

00:59:26.580 --> 00:59:30.620
And then there are two perennial
projects that I've been talking about

00:59:30.630 --> 00:59:32.480
forever and we're still working on.

00:59:32.480 --> 00:59:36.420
As soon as they stop revving the
OS so we can sit and work on our own

00:59:36.420 --> 00:59:39.860
code for a while rather than port,
we'll get through these.

00:59:39.860 --> 00:59:43.340
But a plug-in model for applications
so that your applications can

00:59:43.410 --> 00:59:45.150
more easily support plug-ins.

00:59:45.620 --> 00:59:49.830
And for AppleScript itself,
so we can extend things like adding a

00:59:49.830 --> 00:59:53.480
full Unicode class without having to
go into the bowels of AppleScript and

00:59:53.480 --> 00:59:54.950
hack everything ourselves.

00:59:54.960 --> 00:59:57.210
And then full object
model support for lists,

00:59:57.210 --> 00:59:59.280
records, and strings and other classes.

00:59:59.280 --> 01:00:02.480
Because we know that scripters
are really confused by using the

01:00:02.720 --> 01:00:05.290
object model in applications,
but they can't delete a

01:00:05.290 --> 01:00:07.550
character from a string,
for example.

01:00:09.440 --> 01:00:12.780
So in summary,
AppleScript in Mac OS X is pretty useful.

01:00:12.780 --> 01:00:14.560
It's pretty reliable.

01:00:14.560 --> 01:00:17.470
It's got everything that
the 9 version has got.

01:00:17.660 --> 01:00:19.220
It works pretty well.

01:00:19.370 --> 01:00:22.410
We lack the scriptable
applications on the Apple side,

01:00:22.410 --> 01:00:26.890
and we're getting good scriptable
applications on the third-party side.

01:00:26.900 --> 01:00:29.490
We're continuing to add
new stuff to AppleScript.

01:00:29.590 --> 01:00:32.440
We're not just sitting still
with the implementation,

01:00:32.440 --> 01:00:34.570
but we are evolving it
as we get a chance to,

01:00:34.650 --> 01:00:39.030
and we're trying to do so in a compatible
way so that your scripts continue to run.

01:00:40.300 --> 01:00:43.600
Mac OS X and classic versions
will stay in sync for a while.

01:00:43.600 --> 01:00:47.170
While you are migrating
your solutions from 9 to 10,

01:00:47.170 --> 01:00:52.090
we will continue to make sure that your
scripts can run in either environment.

01:00:52.100 --> 01:00:55.710
There will be some point in the future
where we'll discontinue 9 support,

01:00:55.710 --> 01:00:58.680
but that's in the distant future,
not in the near future.

01:00:58.680 --> 01:01:01.760
And the Mac OS X version
will support new features and

01:01:01.760 --> 01:01:04.770
idiosyncrasies of the Mac OS,
and that will only be

01:01:04.770 --> 01:01:06.260
in the Mac OS X version.

01:01:06.260 --> 01:01:08.280
So we'll start to diverge a little.

01:01:08.280 --> 01:01:10.410
We're not going to... We're
not going to imbue 9 with all

01:01:10.530 --> 01:01:12.840
sorts of 10-like features,
but we will make sure that 9

01:01:12.970 --> 01:01:14.780
and 10 remain somewhat parallel.

01:01:17.430 --> 01:01:20.680
There's another session coming
up in about half an hour,

01:01:20.680 --> 01:01:24.450
which is the
Building AppleScript Application session.

01:01:24.460 --> 01:01:28.610
If you are writing a scriptable
application or writing an OSA client,

01:01:28.730 --> 01:01:30.260
that session is for you.

01:01:30.260 --> 01:01:36.220
If you are a scripter,
go out and get a soda, play some pinball,

01:01:36.220 --> 01:01:39.070
and we'll see you at the
feedback forum at 5 o'clock,

01:01:39.440 --> 01:01:42.260
which will be in room C, which is...

01:01:43.820 --> 01:01:47.640
If you have questions,
I'm always available.

01:01:47.890 --> 01:01:49.600
I'm the middle guy.

01:01:49.600 --> 01:01:55.300
Our technology manager is Jason Yeo,
who is across the street doing

01:01:55.300 --> 01:01:58.380
Darwin presentations right now.

01:01:58.440 --> 01:02:01.380
And our esteemed marketing guy,
Sal Sagoian.

01:02:01.550 --> 01:02:06.380
As always, the AppleScript implementers
and AppleScript users lists are

01:02:06.380 --> 01:02:10.840
great places to get advice from
other scripters or programmers.

01:02:11.640 --> 01:02:15.820
And I frequent the developers,
the implementers list quite a bit,

01:02:15.820 --> 01:02:19.870
and Chris Nebel is on the users
list quite frequently as well.