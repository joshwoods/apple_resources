WEBVTT

00:00:05.110 --> 00:00:10.920
Thank you,
and welcome to the second day of WWDC.

00:00:11.730 --> 00:00:13.250
As Travis mentioned,
my name is Derek Clegg.

00:00:13.300 --> 00:00:16.180
I work in Quartz Imaging Technologies.

00:00:16.300 --> 00:00:21.230
I'm the Principal Engineer responsible
for our PDF support in Mac OS X.

00:00:21.440 --> 00:00:24.720
So today what we're going
to talk about is what's PDF.

00:00:24.720 --> 00:00:25.940
That's the principal focus.

00:00:25.940 --> 00:00:29.360
I think a lot of people don't
actually understand what PDF is,

00:00:29.360 --> 00:00:32.700
what it does, so we're going to focus
a lot on PDF per se.

00:00:32.920 --> 00:00:37.610
And then also we want to
talk about how Mac OS X,

00:00:37.610 --> 00:00:37.610
in particular Quartz, uses PDF.

00:00:38.340 --> 00:00:39.080
So what's PDF?

00:00:39.280 --> 00:00:43.100
Well, all it really is, at the bottom,
is just a file format.

00:00:43.100 --> 00:00:48.690
It's a way of specifying
how data goes into a file.

00:00:48.910 --> 00:00:51.300
But what it's trying to
do is provide a persistent

00:00:51.300 --> 00:00:54.680
representation of document layout.

00:00:54.680 --> 00:00:57.610
And what's really important
for us in particular,

00:00:57.610 --> 00:01:00.280
and what's very nice about PDF,
is that it's independent

00:01:00.280 --> 00:01:02.420
of your software,
your hardware, your operating system.

00:01:02.600 --> 00:01:10.240
A PDF file sort of works on Mac OS X,
it works on Mac OS 9,

00:01:10.240 --> 00:01:11.070
it works on Windows.

00:01:11.070 --> 00:01:11.070
So that's a very valuable thing for us.

00:01:12.250 --> 00:01:15.640
So the thing-- PDF is
actually a specification.

00:01:15.640 --> 00:01:17.580
It's published by Adobe.

00:01:17.580 --> 00:01:19.010
You can go download it from the web.

00:01:19.060 --> 00:01:21.000
You can go buy it as a book.

00:01:21.010 --> 00:01:25.400
The current version is the 1.3,
second edition.

00:01:25.400 --> 00:01:29.380
It's a very nice specification,
unlike some specifications in the world.

00:01:29.380 --> 00:01:33.360
And Adobe has just recently
published the 1.4 differences.

00:01:33.360 --> 00:01:39.240
This is the document that describes
how PDF 1.4 differs from PDF 1.3.

00:01:39.270 --> 00:01:41.350
So they actually haven't
published the 1.4 spec yet,

00:01:41.450 --> 00:01:45.470
but they do have information
about what's coming down the road.

00:01:46.420 --> 00:01:48.600
So let's talk a little
bit about what PDF,

00:01:48.630 --> 00:01:50.710
the problem PDF is trying to solve.

00:01:50.790 --> 00:01:55.680
Okay, so we have a document,
we have information we want to convey.

00:01:55.680 --> 00:01:58.470
If you think about that,
the basic bottom level is just content.

00:01:58.470 --> 00:02:02.710
It's like the words you're using and it's
the images you're using and it's the,

00:02:02.800 --> 00:02:05.540
you know,
the line art you're trying to display.

00:02:05.640 --> 00:02:08.620
And sometimes it's sufficient
just to have content alone.

00:02:08.620 --> 00:02:09.980
A good example of that is HTML.

00:02:09.980 --> 00:02:12.800
HTML is a format which has pure content.

00:02:13.010 --> 00:02:15.840
It really doesn't have
a strong layout sense.

00:02:15.840 --> 00:02:19.060
If your browser decides to use
a different font or position

00:02:19.060 --> 00:02:22.310
things on the page in its own way,
it's free to do that.

00:02:22.480 --> 00:02:24.760
That's good,
but that's often not sufficient.

00:02:24.760 --> 00:02:27.940
And in particular,
you often want to add layout

00:02:27.940 --> 00:02:31.800
information into your content stream.

00:02:31.800 --> 00:02:34.550
So you want to be able to say, "Okay,
this image appears here and there's

00:02:34.690 --> 00:02:37.600
this title here and this text flows
this way around here and this,

00:02:37.790 --> 00:02:40.270
you know, this page number appears right
at this point on the bottom

00:02:40.270 --> 00:02:44.050
of the page." A traditional
example of this is PostScript.

00:02:44.210 --> 00:02:47.580
PostScript represents
document content and layout

00:02:47.580 --> 00:02:49.550
information in a very nice way.

00:02:49.550 --> 00:02:52.000
PDF is exactly analogous in that sense.

00:02:52.000 --> 00:02:56.610
It contains both content
and layout information.

00:02:56.610 --> 00:03:02.480
And it sort of--whoops--sort of lives
one step above the actual device.

00:03:02.550 --> 00:03:05.240
I mean, you can sort of say, well,
you go from content which is

00:03:05.250 --> 00:03:08.090
an abstract representation,
sort of like the words you're using,

00:03:08.170 --> 00:03:10.380
to layout which is positioning
information as well.

00:03:10.500 --> 00:03:13.920
So, you can say, "Okay,
I'm going to print this thing on a

00:03:13.930 --> 00:03:17.800
piece of paper." PDF lives in this
middle area where you have all of the

00:03:17.880 --> 00:03:21.450
information you need in terms of content,
but you don't--you're not

00:03:21.630 --> 00:03:23.210
tied to a particular device.

00:03:23.210 --> 00:03:27.600
You're not tied to a resolution,
to a particular color space, to,

00:03:27.600 --> 00:03:29.680
you know, a piece of paper.

00:03:29.680 --> 00:03:32.190
So,
PDF and PostScript live in the same place

00:03:32.190 --> 00:03:35.030
in terms of the document representation.

00:03:36.380 --> 00:03:40.320
So as I mentioned, PDF contains sort of
describes the document.

00:03:40.320 --> 00:03:42.360
And there's really two parts
that we're interested in.

00:03:42.360 --> 00:03:46.700
In Quartz, we're interested in one part,
and PDF contains an additional part.

00:03:46.980 --> 00:03:50.760
The page content is the part
of PDF that actually says,

00:03:50.800 --> 00:03:52.370
here's what a page looks like.

00:03:52.430 --> 00:03:56.000
This is the titles here,
and there's these 14 lines of text,

00:03:56.030 --> 00:03:57.560
and then there's an image.

00:03:57.640 --> 00:04:01.500
The document itself, though,
is bigger than that in PDF.

00:04:01.500 --> 00:04:05.740
There's sort of additional metadata
that can go into a document.

00:04:06.110 --> 00:04:09.700
There's a page that describes information
about the document that's not actually

00:04:09.850 --> 00:04:11.880
displayed as part of the page.

00:04:12.820 --> 00:04:15.000
So, as an example,
the document can contain

00:04:15.000 --> 00:04:17.340
things like annotations,
additional information

00:04:17.340 --> 00:04:19.740
that's relative to the page,
which isn't actually

00:04:19.740 --> 00:04:23.320
part of the page itself,
hypertext links,

00:04:23.320 --> 00:04:26.240
interactive forms--some of you might
have used Acrobat and brought up a

00:04:26.240 --> 00:04:28.860
PDF file and been able to fill in a form.

00:04:28.860 --> 00:04:33.300
In PDF 1.4, they've added what's known
as logical structure tagging.

00:04:33.300 --> 00:04:36.820
This is a mechanism where you can say,
"Oh, on this page,

00:04:36.820 --> 00:04:40.780
this is a paragraph and this word
in this paragraph is in Spanish and

00:04:40.830 --> 00:04:45.150
this word over here is in,
I don't know, Chinese." And so it's pure

00:04:45.150 --> 00:04:49.700
meta information that's not
really part of the page proper.

00:04:49.700 --> 00:04:51.340
It's sort of information about the page.

00:04:51.340 --> 00:04:53.810
It doesn't affect how
the page is displayed.

00:04:53.950 --> 00:04:57.300
The page content itself is
made up of three pieces.

00:04:57.300 --> 00:05:00.950
There's text, pretty obviously you need
text to convey information,

00:05:01.140 --> 00:05:03.760
vector art, and sampled images.

00:05:04.670 --> 00:05:08.420
Now, Quartz 2D,
what we care about in Mac OS X and

00:05:08.540 --> 00:05:12.500
on the Quartz 2D part,
we only are interested in page content.

00:05:12.500 --> 00:05:15.490
The document content,
while it's very important,

00:05:15.640 --> 00:05:20.840
is not something that we can take
advantage of on the level of Quartz 2D.

00:05:20.840 --> 00:05:23.500
We want to have a persistent
graphics representation,

00:05:23.500 --> 00:05:25.630
so we're concerned
primarily with page content,

00:05:25.630 --> 00:05:27.980
and that's what I'm going
to be talking about today.

00:05:27.980 --> 00:05:30.880
Some people sort of have
referred to this as dumb PDF,

00:05:30.880 --> 00:05:31.680
which is sort of true.

00:05:31.680 --> 00:05:35.970
It's the PDF without as much
metadata as you might get if

00:05:35.970 --> 00:05:38.720
you generate it from Macrobat,
but that's perfectly appropriate for the

00:05:38.720 --> 00:05:44.430
applications we use it for in Quartz 2D.

00:05:48.680 --> 00:05:53.160
So let's dive down a little
bit into what is in a page,

00:05:53.210 --> 00:05:55.700
what's the page content.

00:05:56.290 --> 00:06:01.020
A page description is a way of
representing the page in a device

00:06:01.190 --> 00:06:04.130
and resolution independent manner.

00:06:04.330 --> 00:06:07.640
What that means is that the
page isn't tied to a particular,

00:06:07.740 --> 00:06:10.340
say, screen that you're going to display
on or printer you're going to.

00:06:10.340 --> 00:06:11.600
It's independent of that.

00:06:11.600 --> 00:06:15.470
It's an abstract specification of
how the document gets laid out.

00:06:15.710 --> 00:06:17.300
And it's resolution independent.

00:06:17.300 --> 00:06:20.040
You're not tied to a particular
bit depth or color space.

00:06:20.040 --> 00:06:22.400
You can go to CMYK or RGB printers.

00:06:22.400 --> 00:06:25.760
The document is the same,
independent of the destination.

00:06:25.760 --> 00:06:28.950
The contents are
independent of the creator,

00:06:29.090 --> 00:06:33.450
which means in particular that all
the PDF that's generated is going

00:06:33.450 --> 00:06:35.190
to end up being the same format.

00:06:35.250 --> 00:06:39.090
It's not like a special Windows PDF or a
special Adobe PDF or a special Apple PDF.

00:06:39.150 --> 00:06:40.100
PDF is the same.

00:06:40.100 --> 00:06:43.120
And in particular,
we take that very seriously at Apple.

00:06:43.120 --> 00:06:46.320
We're not going to generate special
Apple PDF that only works on

00:06:46.320 --> 00:06:48.600
Mac OS X machines or anything like that.

00:06:48.600 --> 00:06:54.300
What we generate will work on Acrobat,
on Windows, on Mac, on Unix platforms.

00:06:54.300 --> 00:06:57.690
So we want to make sure that we are
generating PDF that is independent of,

00:06:57.690 --> 00:07:00.690
in some sense, independent of us,
that works everywhere.

00:07:00.700 --> 00:07:04.590
And the page itself is based on the,
the PDF page description is based

00:07:04.970 --> 00:07:07.100
on the PostScript imaging model.

00:07:07.100 --> 00:07:10.210
Those of you who are familiar with
PostScript might recognize this,

00:07:10.250 --> 00:07:11.600
and I'll talk about
this a little bit more.

00:07:11.600 --> 00:07:15.240
So the question is,
what's an imaging model?

00:07:15.240 --> 00:07:18.220
I mean, when we sort of talk about the
PostScript imaging model or the

00:07:18.220 --> 00:07:21.260
Quartz Studio imaging model,
an imaging model is just an

00:07:21.290 --> 00:07:24.040
abstract way of saying how you're
going to put things on a page.

00:07:24.040 --> 00:07:27.300
so that you get the
result you want to get.

00:07:27.520 --> 00:07:32.600
Obviously, an imaging model needs to be
capable of describing simple things,

00:07:32.600 --> 00:07:33.290
complex things.

00:07:33.300 --> 00:07:36.290
If you want to do anything complicated
like a magazine illustration or an ad

00:07:36.290 --> 00:07:39.280
for a magazine or something like that,
you're going to need to have a

00:07:39.350 --> 00:07:41.940
relatively sophisticated imaging model.

00:07:42.160 --> 00:07:45.210
Unsurprisingly,
you're going to have to have fonts,

00:07:45.250 --> 00:07:49.780
you're going to have to have images like
you might get from a digital camera,

00:07:49.780 --> 00:07:51.710
and you're going to need vector art.

00:07:52.150 --> 00:07:56.120
PDF has a particular imaging model,
a particular way of specifying

00:07:56.120 --> 00:07:57.650
how things get put on the page.

00:07:57.650 --> 00:08:02.400
Its imaging model is based
on the painter's algorithm,

00:08:02.400 --> 00:08:05.670
which is essentially
how a painter paints.

00:08:05.740 --> 00:08:08.570
You put down paint on a page,
you put down more paint on top,

00:08:08.570 --> 00:08:11.360
what you put down on top
obscures what's underneath,

00:08:11.360 --> 00:08:14.700
and you sort of build up your image,
your page,

00:08:14.700 --> 00:08:18.070
by putting more important paint up,
and you sort of build from the bottom up.

00:08:18.160 --> 00:08:22.630
Now, one thing that's slightly
different in PDF 1.4,

00:08:22.660 --> 00:08:25.000
they've added the notion of transparency.

00:08:25.000 --> 00:08:28.800
So, it's not, it's,
the paint you put on top

00:08:28.800 --> 00:08:31.300
doesn't necessarily completely
obscure what's underneath.

00:08:31.300 --> 00:08:33.720
You can think of it as the paint,
sort of like watercolors.

00:08:33.720 --> 00:08:36.260
When you put a watercolor down,
you don't obscure what's underneath,

00:08:36.260 --> 00:08:38.170
you sort of shade what's underneath.

00:08:38.320 --> 00:08:39.990
So, that's the same sort of idea.

00:08:40.010 --> 00:08:43.210
In PDF, the imaging model,
you can paint things,

00:08:43.220 --> 00:08:46.200
you can paint glyphs,
you can paint vectors,

00:08:46.220 --> 00:08:47.290
you can paint images.

00:08:47.320 --> 00:08:48.000
Um, that's the idea.

00:08:48.010 --> 00:08:48.120
Um, that's the idea.

00:08:48.120 --> 00:08:50.120
That's sort of their
basic set of three things.

00:08:50.120 --> 00:08:51.920
There's nothing else
that's available for you.

00:08:52.080 --> 00:08:55.260
Turns out that's actually rich enough for
pretty much everything you want to do.

00:08:55.370 --> 00:09:00.390
Um, and the paint, in this metaphor,
is a color, for example,

00:09:00.400 --> 00:09:02.550
RGB values or CMYK values.

00:09:02.910 --> 00:09:06.020
It could be a grayscale value.

00:09:06.080 --> 00:09:09.890
A paint can also be a pattern,
so you might have a replicated sequence

00:09:09.890 --> 00:09:11.900
of stars or ducks or something.

00:09:12.030 --> 00:09:14.560
And, um, it could be a gradient,
which is, you know,

00:09:14.570 --> 00:09:18.080
a smooth transition from one color
to another over a range of space.

00:09:21.710 --> 00:09:27.080
Another very important part of the
imaging model is that paint only is

00:09:27.080 --> 00:09:28.840
drawn within a current clip region.

00:09:28.840 --> 00:09:32.260
This is, again,
if you'll let me extend the metaphor,

00:09:32.260 --> 00:09:33.440
this is exactly what a painter does.

00:09:33.440 --> 00:09:35.360
You put down some tape,
and when you paint,

00:09:35.360 --> 00:09:39.600
you're only going to show the paint
in that region which you've taped off.

00:09:39.730 --> 00:09:43.200
This is very valuable when you're
trying to draw complicated images.

00:09:43.250 --> 00:09:46.800
I built up a complicated piece of artwork
to be able to clip to a certain region.

00:09:46.800 --> 00:09:49.250
The key thing,
and I think the thing that's very

00:09:49.250 --> 00:09:53.570
important for PDF is that the PDF and
PostScript imaging models are identical.

00:09:53.880 --> 00:09:56.990
Anything you can represent in PostScript,
you can represent in PDF.

00:09:57.000 --> 00:09:58.830
So that's very, very powerful.

00:09:58.840 --> 00:10:01.990
But that doesn't mean that
they're the same thing.

00:10:01.990 --> 00:10:05.140
PDF is a more restricted
format than PostScript.

00:10:05.240 --> 00:10:06.140
There's a lot more stuff you can do.

00:10:06.140 --> 00:10:08.620
There's different types
of things you can do in

00:10:08.720 --> 00:10:12.040
PostScript that you can't do in PDF,
but the end result is that everything

00:10:12.040 --> 00:10:15.550
that you can image in PostScript,
you can image in PDF.

00:10:16.950 --> 00:10:22.030
So, now we're going to talk a little
bit about a PDF document and

00:10:22.030 --> 00:10:23.200
what's actually inside there.

00:10:23.200 --> 00:10:26.580
So, the PDF document is the thing
that's like foo.pdf if you look

00:10:26.650 --> 00:10:29.340
at it in your Mac OS X machine.

00:10:29.340 --> 00:10:33.560
It can contain more than one page,
obviously.

00:10:33.560 --> 00:10:36.860
You might have, say, a book, for example,
that you're publishing.

00:10:36.860 --> 00:10:40.500
As I mentioned before,
pages can contain text, vector art,

00:10:40.630 --> 00:10:43.600
and sampled images,
and then as I mentioned before,

00:10:43.600 --> 00:10:48.990
documents may contain this metadata that
tells you information about the pages.

00:10:49.520 --> 00:10:55.030
So let's go into that a little bit more,
into the contents of a particular page.

00:10:55.550 --> 00:11:00.750
So the vector art is
actually relatively simple,

00:11:00.830 --> 00:11:02.600
and yet it's very rich and very powerful.

00:11:02.600 --> 00:11:05.640
All vector art is
constructed from curves,

00:11:05.640 --> 00:11:08.240
in this case, Bezier curves,
that's the only curve you can use,

00:11:08.240 --> 00:11:09.680
and lines.

00:11:09.790 --> 00:11:12.640
So you can build up any shape you
want to from curves and lines.

00:11:12.640 --> 00:11:14.850
It turns out that's actually
a pretty rich set of,

00:11:14.850 --> 00:11:17.480
even though it's simple,
it actually lets you do almost all

00:11:17.480 --> 00:11:19.400
vector art that you would like to do.

00:11:19.400 --> 00:11:24.990
When you build up a path,
you can stroke it, or you can fill it,

00:11:25.070 --> 00:11:28.090
or you can use the path
to specify a clip region.

00:11:28.100 --> 00:11:31.980
So you might, for example,
have four curves that you collect

00:11:32.070 --> 00:11:34.680
together and create a circle,
and you could fill the circle

00:11:34.770 --> 00:11:37.400
and then clip to that and draw
some stuff inside of that,

00:11:37.400 --> 00:11:38.390
and so on.

00:11:38.400 --> 00:11:41.630
And then another important part,
and this sort of follows through

00:11:41.630 --> 00:11:44.240
for each of the pieces of
PDF that you can draw on a page,

00:11:44.240 --> 00:11:47.390
is something known as the
current transformation matrix.

00:11:47.400 --> 00:11:49.400
This is a transformation
that lets you draw a page.

00:11:49.400 --> 00:11:51.390
So this is a transformation
that lets you map,

00:11:51.420 --> 00:11:53.690
to sort of essentially
modify the coordinates,

00:11:53.690 --> 00:11:57.400
the drawing, from what you specify to
what gets drawn on the page.

00:11:57.400 --> 00:12:00.050
So you can change the
transformation matrix,

00:12:00.050 --> 00:12:03.380
you can rotate it, or you can scale it,
and what you draw,

00:12:03.380 --> 00:12:07.400
what you specify will be drawn through
that transformation matrix onto the page.

00:12:07.400 --> 00:12:09.620
So for example, if you wanted to draw
a rotated rectangle,

00:12:09.620 --> 00:12:11.570
you could just draw your
rectangle the regular way,

00:12:11.570 --> 00:12:13.400
change the transformation
matrix to rotate,

00:12:13.400 --> 00:12:17.390
and then when the rectangle
gets put on the page,

00:12:17.400 --> 00:12:17.400
it's drawn rotated.

00:12:17.450 --> 00:12:19.400
This is actually very powerful.

00:12:19.400 --> 00:12:21.400
It's part of the PostScript image.

00:12:21.400 --> 00:12:24.220
PostScript uses the same thing,
and it makes it easy to do

00:12:24.220 --> 00:12:25.400
complicated drawing simply.

00:12:28.060 --> 00:12:31.080
The second part of PDF in terms
of building up the page content

00:12:31.090 --> 00:12:32.980
that's important is sample images.

00:12:32.980 --> 00:12:36.840
Sample images are just like what
you get from your digital camera.

00:12:36.840 --> 00:12:38.710
It's just an array of samples.

00:12:38.880 --> 00:12:42.640
This many samples across, 1,078,
this many samples down.

00:12:42.640 --> 00:12:45.990
Each sample represents a color.

00:12:46.000 --> 00:12:49.020
It's just a value that represents a
color at that point in the rectangle.

00:12:49.020 --> 00:12:53.600
PDF has a nice,
rich set of bit depths that it supports.

00:12:53.600 --> 00:12:56.940
It supports 1, 2, 4, and 8.

00:12:57.070 --> 00:12:58.620
This is pretty much industry standard.

00:12:58.620 --> 00:13:02.630
There's also 12-bit images,
but those aren't so common currently.

00:13:02.650 --> 00:13:06.240
PDF may and I don't know whether
they'll support that in the future.

00:13:06.240 --> 00:13:09.670
Again, just like with vector art,
all the images that are

00:13:10.100 --> 00:13:13.680
drawn are mapped through the
current transformation matrix.

00:13:13.720 --> 00:13:17.200
That means that you can take your image,
your 10x7 image,

00:13:17.280 --> 00:13:19.020
and rotate the transformation matrix.

00:13:19.020 --> 00:13:21.020
You can draw the image,
and the image will show up rotated.

00:13:21.020 --> 00:13:24.880
You don't actually have to calculate
what the pixel values are as

00:13:24.880 --> 00:13:27.020
you rotate the image yourself.

00:13:27.020 --> 00:13:30.960
PDF knows how to do that for you,
and you end up with a very nice,

00:13:30.960 --> 00:13:35.960
rotated image without actually
having to rotate it yourself.

00:13:36.870 --> 00:13:40.960
And then finally, fonts,
so pretty much for page content,

00:13:41.130 --> 00:13:43.960
you know, the meat of things is the text,
the information,

00:13:44.040 --> 00:13:48.950
the words you're trying to convey,
fonts are used to convey that obviously,

00:13:49.070 --> 00:13:51.590
and each font consists
of a set of glyphs,

00:13:51.590 --> 00:13:55.210
a glyph is just a representation
of a character in the font,

00:13:55.210 --> 00:13:59.480
it's treated from the point of view
of PDF typically as an outline,

00:13:59.480 --> 00:14:02.400
just like a piece of
vector art essentially.

00:14:02.400 --> 00:14:04.940
As a consequence,
glyphs can be stroked or filled

00:14:05.030 --> 00:14:08.140
just like with vector art,
and you can also clip through them,

00:14:08.140 --> 00:14:10.910
so you can have a big capital letter
A and you can say clip to that and

00:14:10.910 --> 00:14:13.680
everything you draw from that point on
would be clipped through that letter A.

00:14:14.320 --> 00:14:19.400
So you can get nice complicated
graphic results using it very simply.

00:14:19.400 --> 00:14:22.560
And as with vector art and with images,
glyphs are mapped through the

00:14:22.560 --> 00:14:25.920
current transformation matrix,
so if you want to draw a rotated text,

00:14:26.000 --> 00:14:28.640
you can do that simply,
the same font can be used to draw

00:14:28.640 --> 00:14:31.340
a skewed text or a scaled text,
so everything sort of

00:14:31.340 --> 00:14:32.280
goes through the context.

00:14:32.280 --> 00:14:32.280
So if you want to draw a rotated text,
you can do that simply,

00:14:32.280 --> 00:14:32.280
the same font can be used to draw
a skewed text or a scaled text,

00:14:32.280 --> 00:14:32.320
so everything sort of goes
through the context of the text.

00:14:32.320 --> 00:14:36.340
To the left is an image that
appears for the internet server,

00:14:36.340 --> 00:14:39.220
which; should appear
for the internet server.

00:14:40.160 --> 00:14:44.240
Now fonts are actually a
big thing in the industry.

00:14:44.240 --> 00:14:49.620
There's lots of different types of fonts
that have come through over the years.

00:14:49.780 --> 00:14:52.610
The big ones are the ones
from Adobe and TrueType.

00:14:52.930 --> 00:14:54.760
Adobe Type 1 is innate.

00:14:54.760 --> 00:14:56.490
Obviously the Adobe ones are part of PDF.

00:14:56.890 --> 00:14:59.290
Adobe Type 1 is fully supported in PDF.

00:14:59.470 --> 00:15:02.120
The Adobe Type 1 Multiple Master as well.

00:15:02.160 --> 00:15:07.130
Adobe, the CFF, Compact Font Format,
is also supported.

00:15:07.170 --> 00:15:09.700
That's essentially sort
of a variation of Type 1,

00:15:09.700 --> 00:15:10.800
but it's a smaller format.

00:15:10.800 --> 00:15:12.880
It's used as the basis for OTF fonts.

00:15:13.190 --> 00:15:18.550
Adobe Type 0 is sort of a
container for CID fonts.

00:15:18.680 --> 00:15:23.850
CID fonts are used for Chinese, Japanese,
Korean, Vietnamese languages.

00:15:24.090 --> 00:15:27.270
Essentially any language where
you have a large number of glyphs,

00:15:27.620 --> 00:15:31.060
typically in the order of many thousands,
to represent the language.

00:15:31.060 --> 00:15:34.740
This is a very important thing for, say,
the Japanese market,

00:15:34.840 --> 00:15:37.840
where you want to be able
to support various forms of

00:15:38.220 --> 00:15:41.220
Japanese fonts that have many,
many glyphs in them.

00:15:41.220 --> 00:15:47.510
And then, of course, TrueType,
probably an old standard for most of you.

00:15:49.100 --> 00:17:37.400
[Transcript missing]

00:17:39.630 --> 00:17:42.830
There are cases when,
for copyright reasons or a variety,

00:17:42.830 --> 00:17:49.060
maybe user choice, it's impossible or not
reasonable to embed the font.

00:17:49.190 --> 00:17:53.540
So PDF, unlike PostScript,
PDF actually also lets you

00:17:53.560 --> 00:17:56.030
specify metadata about a font.

00:17:56.040 --> 00:18:00.320
So you may put a reference into your
document that you're using Optima,

00:18:00.320 --> 00:18:03.160
but you might not, for some reason,
embed Optima.

00:18:03.160 --> 00:18:07.400
But you can include enough information
in the PDF document that allows

00:18:07.400 --> 00:18:12.280
some other system to fo the font,
to create an approximate font that

00:18:12.280 --> 00:18:15.140
looks very close to the original font.

00:18:15.140 --> 00:18:17.660
And this is really valuable when
you are in a situation where,

00:18:17.660 --> 00:18:19.840
for some reason,
you can't embed the font or you

00:18:19.880 --> 00:18:21.180
have files that don't have it.

00:18:21.350 --> 00:18:23.320
You get a pretty close look,
it's not 100%, but

00:18:23.410 --> 00:18:25.910
it's a lot better than,
for example, in PostScript where if

00:18:25.910 --> 00:18:29.560
you didn't have the font,
you get Courier, which looked awful.

00:18:29.640 --> 00:18:32.610
Some of you may actually remember that.

00:18:33.200 --> 00:19:43.900
[Transcript missing]

00:19:44.600 --> 00:19:48.500
So there's two major types of color
spaces that are interesting in PDF.

00:19:48.500 --> 00:19:52.420
There's device-dependent color.

00:19:52.490 --> 00:19:52.490
It's...

00:19:52.850 --> 00:19:55.450
It's used in the situations where
you're not as concerned with the

00:19:55.560 --> 00:19:58.040
fidelity of the color representation.

00:19:58.040 --> 00:20:00.510
In general, we,
because we're very interested in

00:20:00.510 --> 00:20:04.870
high fidelity color reproduction,
aren't too keen on encouraging it,

00:20:04.950 --> 00:20:06.000
but it is available.

00:20:06.150 --> 00:20:08.780
There's Device Gray, Device RGB,
Device CMYK.

00:20:08.800 --> 00:20:12.800
The device independent colors,
basically the calibrated colors,

00:20:12.910 --> 00:20:14.800
are also supported.

00:20:14.800 --> 00:20:18.800
And in that case, there's Calibrated
Gray and Calibrated RGB.

00:20:18.800 --> 00:20:21.760
L*, A*, B*,
which is a color science color

00:20:21.780 --> 00:20:26.600
space that you could probably forget
about and never be affected by.

00:20:26.600 --> 00:20:29.580
And then finally, the important one,
which is ICC Profiles.

00:20:29.730 --> 00:20:31.570
Same sort of thing we use in ColorSync.

00:20:31.780 --> 00:20:35.160
They're much more common nowadays
than the other two color spaces,

00:20:35.170 --> 00:20:39.070
and they do provide for
high calibrated color.

00:20:39.280 --> 00:20:42.870
In addition, PDF lets you do two other
special color spaces.

00:20:43.010 --> 00:20:46.230
There's the index color space
where what you're specifying at

00:20:46.230 --> 00:20:52.050
that point is each value is an
index into a table of other colors.

00:20:52.160 --> 00:20:54.440
So a good example of this is GIF images.

00:20:54.440 --> 00:20:57.030
Some of you may be familiar
with that where you really,

00:20:57.040 --> 00:21:01.450
your image is only 256 values,
but each value from 0 to 255 is an

00:21:01.450 --> 00:21:03.760
index into some other color table.

00:21:03.760 --> 00:21:05.460
So PDF has that support in there.

00:21:05.460 --> 00:21:09.080
It's perhaps not as
used as much nowadays.

00:21:09.110 --> 00:21:10.860
But it is available.

00:21:10.970 --> 00:21:13.670
And then separation and device in.

00:21:13.840 --> 00:21:15.190
These are essentially the same thing.

00:21:15.340 --> 00:21:17.850
Separation is like device one.

00:21:17.980 --> 00:21:21.040
What it allows you to do,
this is used when you're

00:21:21.280 --> 00:21:23.210
for printing typically.

00:21:23.360 --> 00:21:27.660
You often will want to
do a CMYK printing pass.

00:21:27.770 --> 00:21:30.580
And you might have another
separation or two or three,

00:21:30.580 --> 00:21:31.770
maybe an orange.

00:21:31.910 --> 00:21:34.300
CMYK is cyan, magenta, yellow, black.

00:21:34.390 --> 00:21:37.060
So because it's difficult to
get a pure orange or a pure

00:21:37.200 --> 00:21:39.000
purple or some other color.

00:21:39.090 --> 00:21:40.200
You might have an additional separation.

00:21:40.200 --> 00:21:41.340
So PDF allows you to do this.

00:21:41.340 --> 00:21:44.440
This is really for high
end printing applications.

00:21:44.440 --> 00:21:48.780
It's not typical for most use,
but it is available.

00:21:48.940 --> 00:21:52.140
Okay, so we've talked at this
point about the PDF content,

00:21:52.330 --> 00:21:55.380
what goes into it, the painting,
the color and so on.

00:21:55.570 --> 00:22:00.370
So you have now sort of you can imagine
maybe to build up a magazine page.

00:22:00.380 --> 00:22:03.750
You have all these images and all this
vector art and all this text and these

00:22:03.840 --> 00:22:05.740
fonts and all this other stuff in there.

00:22:05.970 --> 00:22:08.900
And that could be huge.

00:22:09.030 --> 00:22:10.540
And then you have the PDF file.

00:22:10.540 --> 00:22:12.910
And the first thing that
you run into immediately is,

00:22:13.190 --> 00:22:15.700
well how do I keep the file
size to be a reasonable size?

00:22:15.700 --> 00:22:18.460
Fortunately,
PDF has built into it a way to

00:22:18.580 --> 00:22:21.120
compress the data in the PDF file.

00:22:21.170 --> 00:22:24.320
And some of you may or may not
have opened up a PDF file and

00:22:24.320 --> 00:22:25.760
noticed it's lots of binary data.

00:22:25.780 --> 00:22:27.630
And you think, oh my goodness,
this is a binary format.

00:22:27.660 --> 00:22:30.660
It's actually, I mean it's,
it is a binary format in some sense.

00:22:30.660 --> 00:22:34.290
But really what you're seeing is
the compressed data typically.

00:22:34.300 --> 00:22:38.800
Not necessarily some sort of weird
structure that you can't understand.

00:22:38.890 --> 00:22:41.710
So there's two mechanisms
for compressing data in PDF.

00:22:41.840 --> 00:22:44.830
There's the lossless one,
the case which you typically

00:22:44.830 --> 00:22:47.700
want for page content where you
don't want to lose information.

00:22:47.800 --> 00:22:50.960
And then for images,
there's both lossless

00:22:51.020 --> 00:22:52.760
mechanisms and lossy.

00:22:52.930 --> 00:22:57.690
Lossy is really very valuable
for say images with color.

00:22:57.920 --> 00:23:01.720
It's basically the
basis of JPEG and so on.

00:23:02.380 --> 00:23:05.970
So for page content,
there's two typical ways.

00:23:06.000 --> 00:23:09.100
There's LZW, which is,
many of you are familiar with that

00:23:09.100 --> 00:23:12.900
from the patent issues and so on,
compression.

00:23:13.030 --> 00:23:15.560
And then there's flake compression,
it's also called,

00:23:15.680 --> 00:23:18.800
it's available like Zlib
and stuff like that.

00:23:19.120 --> 00:23:21.050
This is another,
this is a really much more common

00:23:21.140 --> 00:23:25.120
method because it's patent free
that's being used more and more now.

00:23:25.230 --> 00:23:28.430
But both of these are very,
can be very powerful in their own ways

00:23:28.600 --> 00:23:31.890
and are supported natively in PDF.

00:23:32.080 --> 00:23:34.880
For images,
it's a little bit more complicated.

00:23:35.120 --> 00:23:43.230
For lossless compression of images,
which is typically good for grayscale,

00:23:43.310 --> 00:23:45.070
there's a PNG equivalent.

00:23:45.530 --> 00:23:50.400
PNG specifies a way to use flight
compression for encoding image data,

00:23:50.400 --> 00:23:53.910
so there's an equivalent
way in PDF to specify that,

00:23:53.930 --> 00:23:57.940
although PDF doesn't allow you
to embed a PNG image directly.

00:23:57.940 --> 00:23:59.860
It lets you embed the PNG data directly.

00:24:01.300 --> 00:24:05.780
For grayscale proper, typically one bit,
a fax for example,

00:24:05.860 --> 00:24:10.530
there's the CCIT group 3 and
group 4 compression mechanisms,

00:24:10.620 --> 00:24:13.760
and also run length, not so interesting,
but it's available.

00:24:13.760 --> 00:24:17.480
And then in 1.4,
there's this new cool thing,

00:24:17.480 --> 00:24:21.020
which is actually going to
replace CCITT group 3 and

00:24:21.310 --> 00:24:24.600
group 4 in the industry,
called JBIG2,

00:24:24.600 --> 00:24:30.600
which is a way of compressing
specifically sort of tailored to fax data

00:24:30.600 --> 00:24:35.060
in a very nice way that's a lot great,
gives you a lot better compression

00:24:35.150 --> 00:24:37.460
than CCITT fax compression.

00:24:37.610 --> 00:24:39.710
But that's in 1.4.

00:24:40.240 --> 00:24:44.790
The two lossy ways of compressing,
there's JPEG for color,

00:24:44.820 --> 00:24:47.080
is the most interesting case.

00:24:47.080 --> 00:24:48.840
Grayscale doesn't compress
very well with JPEG.

00:24:48.840 --> 00:24:50.800
And of course, Grayscale,
you can compress it

00:24:50.910 --> 00:24:52.870
with JPEG or with JBIG2.

00:24:52.880 --> 00:24:57.980
There's a mechanism for JBIG2 which lets
you do lossy compression of Grayscale.

00:24:57.980 --> 00:25:00.690
Now we have a PDF document.

00:25:00.690 --> 00:25:04.360
You have everything's compressed,
it's all ready.

00:25:04.380 --> 00:25:07.370
So let's talk a little bit about
what it's like to actually create

00:25:07.380 --> 00:25:09.320
a PDF document or display it.

00:25:09.320 --> 00:25:13.060
So I wrote a lot of the code that
creates both PostScript and PDF files.

00:25:13.060 --> 00:25:16.000
And this first one is a big,
big advantage.

00:25:16.000 --> 00:25:18.760
You can do single pass file
generation when you're generating PDF.

00:25:18.760 --> 00:25:21.990
That means that--well,
basically PDF has a way of

00:25:21.990 --> 00:25:25.990
referencing objects before they're
actually specified in the file.

00:25:26.010 --> 00:25:28.050
So you can--if you
want to write an image,

00:25:28.060 --> 00:25:30.380
you can say, "Oh,
here's an image that I want

00:25:30.380 --> 00:25:33.180
you to display now." And then
sometime down the road,

00:25:33.180 --> 00:25:34.920
you can actually write
out the image data.

00:25:34.920 --> 00:25:38.240
The problem--the reason that's good
is because you can actually--you

00:25:38.240 --> 00:25:38.240
can actually--you can actually--you
can actually--you can actually

00:25:38.270 --> 00:25:41.360
sort of create the file as you're
going along and when you're ready,

00:25:41.360 --> 00:25:42.810
you can dump the image data.

00:25:42.810 --> 00:25:46.560
You don't have to sort of store
the image data someplace else

00:25:46.560 --> 00:25:49.350
and then copy it back into the
file when you need to display it.

00:25:49.440 --> 00:25:53.510
I mean, PostScript has not one pass file
generation and it's terrible.

00:25:53.510 --> 00:25:55.280
You do--and it puts
lots of temporary files,

00:25:55.280 --> 00:25:57.580
you're copying stuff all the time,
it's a big mess.

00:25:57.770 --> 00:25:59.910
PDF is really great because
you can do one pass,

00:25:59.920 --> 00:26:00.260
done.

00:26:00.350 --> 00:26:01.210
You have the output.

00:26:01.460 --> 00:26:03.990
This is really good when you're
spooling and you're spooling large

00:26:03.990 --> 00:26:08.240
files because you're spooling time to
the printer is going to be a lot faster.

00:26:08.240 --> 00:26:09.770
So you can do a lot faster.

00:26:09.770 --> 00:26:13.450
The sort of the--the corollary
to that is that what you end up

00:26:13.570 --> 00:26:17.160
with when you're trying to display
the document is random access.

00:26:17.260 --> 00:26:20.770
It's not like PostScript where you
have to sort of start at the beginning

00:26:20.770 --> 00:26:22.640
and seek to the information you need.

00:26:22.660 --> 00:26:25.460
PDF has a cross-reference table
at the end that tells you where

00:26:25.620 --> 00:26:27.400
every object in the document lives.

00:26:27.440 --> 00:26:30.180
So you can quickly go to
page number so and so,

00:26:30.180 --> 00:26:33.190
image number so and so,
and pretty much constant time

00:26:33.190 --> 00:26:35.780
independent of the number of pages,
the file size and so on.

00:26:35.790 --> 00:26:37.160
So that's a really big one
when you're displaying.

00:26:37.170 --> 00:26:37.700
It's actually a big one.

00:26:37.700 --> 00:26:39.140
And then you can do a
lot of things with it.

00:26:39.240 --> 00:26:42.330
So you can do a lot of things with it.

00:26:42.330 --> 00:26:44.550
So you can do a lot of things

00:26:45.100 --> 00:26:50.010
And what's also nice about
PDF is that it's-- and each page

00:26:50.010 --> 00:26:51.500
is independent of other pages.

00:26:51.510 --> 00:26:54.300
Those of you who might have
worked with PostScript before,

00:26:54.300 --> 00:26:59.140
know that to display page number 355,
you pretty much need to display

00:26:59.140 --> 00:27:00.560
all the pages up until then.

00:27:00.710 --> 00:27:02.320
Unless, you know,
you sort of hope that the

00:27:02.320 --> 00:27:05.260
document structure and comments
are correct and the pages really

00:27:05.260 --> 00:27:06.550
are independent and so on.

00:27:06.700 --> 00:27:10.320
But if a bad PostScript file,
you've got to display everything

00:27:10.320 --> 00:27:13.190
until that page in order to
make sure you know it's correct.

00:27:13.320 --> 00:27:17.910
PDF encapsulates each page
as an independent entity.

00:27:18.140 --> 00:27:22.780
They're not-- they don't refer
to pages prior or after them.

00:27:22.910 --> 00:27:24.840
So this is really good for display.

00:27:24.840 --> 00:27:30.190
You can quickly display the 30th page,
the 300th page in constant time.

00:27:30.260 --> 00:27:32.680
I've talked a little bit
about PostScript and PDF.

00:27:32.740 --> 00:27:35.780
And I want to talk a little bit
more about the differences there,

00:27:35.830 --> 00:27:37.680
those of you-- this might be
more interesting to those of

00:27:37.690 --> 00:27:40.840
you who are more familiar with
PostScript and not so much with PDF.

00:27:41.220 --> 00:27:46.240
PDF is really an absolute-- it's not an
absolute description of where things go.

00:27:46.240 --> 00:27:48.840
It's not a calculated
description of where things go.

00:27:48.840 --> 00:27:53.360
So PostScript allows you to
calculate the positions of things,

00:27:53.360 --> 00:27:56.070
it allows you to measure
strings and do divide by two

00:27:56.070 --> 00:27:58.240
to center and stuff like that.

00:27:58.240 --> 00:28:02.630
PostScript is a calculated
way of displaying content.

00:28:02.640 --> 00:28:04.440
PDF is an absolute way.

00:28:04.440 --> 00:28:06.680
And so that's actually a big
difference for those of you who

00:28:06.680 --> 00:28:08.040
are familiar with PostScript.

00:28:08.040 --> 00:28:11.100
You need to sort of know where
everything's going to end up in

00:28:11.180 --> 00:28:12.000
order to generate your PDF file.

00:28:12.040 --> 00:28:14.370
Unlike with PostScript,
where you sort of figure

00:28:14.370 --> 00:28:15.680
it out on the printer.

00:28:16.080 --> 00:28:17.680
On the other hand,
it's good to not have to do that

00:28:17.680 --> 00:28:20.000
because it's less work if you know
where everything's supposed to be.

00:28:20.000 --> 00:28:25.700
Of course, PDF can contain hyperlinks,
metadata, annotations,

00:28:25.700 --> 00:28:29.200
things that are going to be used
when you're displaying it in Acrobat

00:28:29.200 --> 00:28:31.060
or some other interactive mechanism.

00:28:31.240 --> 00:28:33.210
PostScript doesn't have that.

00:28:33.300 --> 00:28:36.020
PostScript is pretty much pure content,
pure layout.

00:28:36.330 --> 00:28:39.230
It doesn't have this sort
of additional information.

00:28:41.180 --> 00:28:46.040
And also PDF, unlike PostScript,
is a really strictly

00:28:46.040 --> 00:28:48.520
defined file structure.

00:28:48.560 --> 00:28:50.590
It's hard to write a PDF file by hand.

00:28:50.590 --> 00:28:53.330
It's really easy to write
PostScript files by hand.

00:28:53.510 --> 00:28:56.540
But that's good because that
means that a computer can read and

00:28:56.540 --> 00:28:58.750
process a PDF file very rapidly.

00:28:58.930 --> 00:29:03.490
PostScript,
you have to do a lot of processing

00:29:03.490 --> 00:29:03.490
and parsing and interpretation.

00:29:03.870 --> 00:29:05.860
So what that means is, of course,
you get, as I mentioned before,

00:29:05.860 --> 00:29:08.740
random access of your data
and page independence.

00:29:08.830 --> 00:29:11.160
That's a really key feature.

00:29:11.290 --> 00:29:16.590
And then, as I mentioned before,
the font foeing, for example,

00:29:16.810 --> 00:29:19.830
PDF files will contain additional
information that might be

00:29:19.830 --> 00:29:22.980
used in the case that you
have to substitute in some sense.

00:29:23.080 --> 00:29:27.690
You can't fully get what you need because
the PDF file doesn't embed the font.

00:29:27.700 --> 00:29:36.570
So it has extra stuff that allows you to
synthesize more correctly what you get.

00:29:36.760 --> 00:29:41.380
Not just a replacement with Courier,
but a replacement with a Sans Serif

00:29:41.380 --> 00:29:45.170
multiple master font that's tweaked just
the right way so it looks pretty good.

00:29:46.100 --> 00:29:51.540
So that's sort of a big, you know,
wide overview of what PDF, what contains,

00:29:51.690 --> 00:29:54.960
what's interesting about PDF from
the point of view of Quartz 2D.

00:29:54.960 --> 00:29:56.690
So the real question
at that point is like,

00:29:56.840 --> 00:29:58.720
why did we choose to
use PDF of all things?

00:29:58.720 --> 00:30:02.220
I mean, we could have gone out and said,
well, we want a persistent

00:30:02.330 --> 00:30:06.350
graphics file format,
let's write our own or let's use

00:30:06.350 --> 00:30:09.780
PNG or something weird like that.

00:30:09.780 --> 00:30:12.660
So what we wanted is something
clearly that was robust.

00:30:12.660 --> 00:30:15.390
We needed something that was,
that people in the industry use,

00:30:15.390 --> 00:30:19.660
not just us,
but everybody in the industry.

00:30:19.900 --> 00:31:26.900
[Transcript missing]

00:31:27.220 --> 00:31:27.980
So how do we use it?

00:31:28.250 --> 00:31:33.040
Well, at the bottom,
the most important part is in Quartz 2D.

00:31:33.150 --> 00:31:34.900
We looked at the PDF imaging model.

00:31:34.900 --> 00:31:38.380
We said, OK,
that's what we want as our imaging model.

00:31:38.410 --> 00:31:42.440
We want to use the same ideas
that PDF has to build up

00:31:42.550 --> 00:31:44.940
the Quartz 2D imaging model.

00:31:45.050 --> 00:31:48.680
So we took the ideas
wholesale and we said,

00:31:48.680 --> 00:31:50.470
this is how we're going
to draw on the screen,

00:31:50.480 --> 00:31:52.220
on the piece of paper, and so on.

00:31:52.360 --> 00:31:56.030
As a consequence, we also said,
obviously, we want this to be our

00:31:56.030 --> 00:31:57.500
persistent graphics format.

00:31:57.500 --> 00:32:00.030
We want to be able to say,
if we're drawing on the screen

00:32:00.040 --> 00:32:02.880
and using this imaging model,
we want to write it out to PDF so

00:32:02.880 --> 00:32:06.240
we can actually get good results
when we go to the printer and so on.

00:32:06.380 --> 00:32:09.470
And what we also are
not interested in doing,

00:32:09.500 --> 00:32:11.960
we don't want to say, oh, OK, well,
this is good.

00:32:11.960 --> 00:32:13.260
And we're just going to stay here.

00:32:13.260 --> 00:32:15.090
We're going to-- now
we're going to diverge.

00:32:15.200 --> 00:32:17.620
We're going to make our own PDF.

00:32:17.720 --> 00:32:18.760
We don't want to do that.

00:32:18.760 --> 00:32:19.180
That's bad.

00:32:19.240 --> 00:32:20.760
We want to track the Adobe standard.

00:32:20.760 --> 00:32:25.100
We want to be in sync with them,
keep as close as possible with them.

00:32:25.100 --> 00:32:27.620
So that we don't diverge
from their model.

00:32:27.620 --> 00:32:29.120
Because we're using their model.

00:32:29.120 --> 00:32:32.200
And we're sort of want to pay deference
to that and make sure that we track

00:32:32.200 --> 00:32:35.130
their standard as closely as possible.

00:32:36.790 --> 00:32:44.290
So, what we have right now in PDF,
sorry in Quartz 2D is support

00:32:44.290 --> 00:32:49.170
for the 1.2 specification and
much of the 1.3 specification.

00:32:49.280 --> 00:32:54.680
The 1.4 spec is going to be
coming out soon and we want to

00:32:54.680 --> 00:32:57.040
be able to track that as well,
so we're, you know,

00:32:57.040 --> 00:33:01.670
we're really committed to trying to make
sure that we keep on top of the 1.3 spec,

00:33:01.750 --> 00:33:05.860
1.4 spec and make sure that
we have support and that our

00:33:06.210 --> 00:33:09.680
model matches what PDF provides.

00:33:09.800 --> 00:33:12.260
And what I want to
emphasize in particular,

00:33:12.410 --> 00:33:16.370
as you can see here,
we're interested in not all of the spec.

00:33:16.380 --> 00:33:19.480
As I mentioned before,
the spec is actually very

00:33:19.480 --> 00:33:21.420
complicated and large,
there's lots of pieces to it.

00:33:21.420 --> 00:33:24.580
A lot of it is document,
the document model specific.

00:33:24.580 --> 00:33:27.250
It's sort of the part that says,
you know, here's how annotations work,

00:33:27.420 --> 00:33:29.400
here's how hypertext
links work and so on.

00:33:29.660 --> 00:33:33.670
So, we're not on the Quartz 2D level
interested in that part of it.

00:33:33.830 --> 00:33:34.700
That's something that's a high priority.

00:33:34.700 --> 00:33:36.260
We're interested in
the higher level thing,

00:33:36.260 --> 00:33:38.140
for example,
for Acrobat or other programs that

00:33:38.140 --> 00:33:40.300
might be doing interactive PDF display.

00:33:40.470 --> 00:33:43.600
We're, since we're focused on the
persistent graphics format,

00:33:43.660 --> 00:33:46.630
we're tailoring our support
specifically to the part of the

00:33:46.710 --> 00:33:48.680
document model that's relevant.

00:33:48.730 --> 00:33:50.760
And as you can see on the other axis,
the imaging model,

00:33:50.880 --> 00:33:53.460
sort of all of the imaging model,
however, we want to keep that

00:33:53.460 --> 00:33:55.270
going up all the way.

00:33:56.600 --> 00:34:02.000
Now, in addition to Quartz 2D,
which is a big part of our PDF usage,

00:34:02.180 --> 00:34:09.900
Mac OS X uses PDF in other ways,
mostly by leveraging what

00:34:09.900 --> 00:34:09.900
we provide in Quartz 2D.

00:34:10.050 --> 00:34:14.450
Pretty much in Mac OS X,
PDF is our high-fidelity digital master

00:34:14.840 --> 00:34:16.140
recording of application drawing.

00:34:16.160 --> 00:34:18.810
So, the idea is that if an application
draws on the screen a certain

00:34:18.810 --> 00:34:23.210
way using the course 2D APIs,
what they get out, if they choose to,

00:34:23.210 --> 00:34:27.230
is a PDF file that represents
that drawing precisely.

00:34:27.240 --> 00:34:32.100
So that if we took that PDF file
and brought it up in Acrobat,

00:34:32.100 --> 00:34:35.500
they would see the same thing in Acrobat
that they're seeing on the screen.

00:34:35.500 --> 00:34:38.630
That's a really important feature
for us to make sure that the

00:34:38.730 --> 00:34:43.000
drawing that you do to the screen
ends up in the PDF file precisely.

00:34:43.360 --> 00:34:45.280
Including things like all
the fonts being correct,

00:34:45.280 --> 00:34:48.290
all the colors being calibrated,
everything that you've

00:34:48.290 --> 00:34:49.550
actually asked for.

00:34:49.800 --> 00:36:29.200
[Transcript missing]

00:36:29.830 --> 00:36:32.300
So just to summarize,
I've talked about a bunch of

00:36:32.300 --> 00:36:36.610
different parts of PDF and what
it's like and then how we use it.

00:36:36.660 --> 00:36:38.510
It really is, it's really powerful.

00:36:38.560 --> 00:36:40.880
It's a super format.

00:36:40.940 --> 00:36:44.090
I like it a lot, it turns out,
and it provides a really good high

00:36:44.090 --> 00:36:47.530
fidelity representation of information.

00:36:47.580 --> 00:36:50.540
It's really good for color calibration,
font preservation,

00:36:50.540 --> 00:36:54.030
all the stuff you need to make sure that
what you're drawing on the screen matches

00:36:54.030 --> 00:36:57.460
exactly what you're printing to the page.

00:36:57.460 --> 00:37:00.600
And it's our native format for
persistent graphics representation.

00:37:00.600 --> 00:37:06.020
We want to make sure that we keep
it as our way of representing what's

00:37:06.020 --> 00:37:09.620
drawn persistently into a file.

00:37:09.620 --> 00:37:14.640
And all of the Quartz 2D imaging model
is built on top of the PDF imaging model.

00:37:14.640 --> 00:37:17.970
There's another talk later,
I think it's right after this one,

00:37:17.970 --> 00:37:20.830
which goes more in depth into
the Quartz 2D APIs and how some

00:37:20.870 --> 00:37:24.580
of that relates directly to what
I've been talking here about.

00:37:24.580 --> 00:37:27.440
We're pretty consistent in terms
of what you're going to see.

00:37:27.440 --> 00:37:29.300
So, we're going to be looking
at the Quartz 2D APIs,

00:37:29.300 --> 00:37:31.460
what you can do with the Quartz 2D APIs,
with what you can do,

00:37:31.460 --> 00:37:32.580
what the imaging model is in PDF.

00:37:32.580 --> 00:37:34.780
So, there's almost a one-to-one
mapping in some cases,

00:37:34.780 --> 00:37:37.790
because we really think it's
a very valuable imaging model,

00:37:37.830 --> 00:37:39.890
very important format to support.

00:37:41.910 --> 00:37:45.400
So if you want more information
about PDF in particular,

00:37:45.510 --> 00:37:48.900
go to the Adobe website,
not the Apple website.

00:37:48.900 --> 00:37:53.630
They have the PDF spec,
they have the 1.4 differences,

00:37:53.750 --> 00:37:56.120
you can download a bunch of
other information about PDF.

00:37:56.270 --> 00:38:00.530
It's got a lot of detail there
that you might want to know about.

00:38:00.610 --> 00:38:04.460
I think you can buy the PDF 1.3
specification from Amazon.

00:38:04.460 --> 00:38:08.230
I certainly think you can download
it from here as a PDF file.

00:38:08.540 --> 00:38:13.170
And I think at this point
I want to bring back Travis,

00:38:13.170 --> 00:38:14.660
who will talk a little
bit about the roadmap,

00:38:14.660 --> 00:38:16.640
and then we'll open it up
for question and answers.

00:38:16.640 --> 00:38:17.800
Thank you, Derek.

00:38:17.930 --> 00:38:19.160
Yeah,
before we go to question and answer,

00:38:19.160 --> 00:38:21.230
I just want to be able to
point you to some of the other

00:38:21.280 --> 00:38:24.050
graphic-related sessions at WWDC.

00:38:24.190 --> 00:38:27.250
Obviously we're in 108, PDF, Quartz,
and Mac OS X.

00:38:27.270 --> 00:38:33.130
As Derek mentioned, a follow-on session,
which is in Room A1 at 10:30,

00:38:33.230 --> 00:38:35.390
is the 2D Graphics Using Quartz.

00:38:35.420 --> 00:38:38.010
If you want to empower your
application with the ability to

00:38:38.010 --> 00:38:42.340
create PDFs and leverage our services,
that's the session you need to attend.

00:38:42.430 --> 00:38:48.400
We'll be talking about the Quartz
2D API and tell you how to use it.

00:38:48.510 --> 00:38:53.410
Then also, a common request we get,
Quartz-related request we get from

00:38:53.410 --> 00:38:55.900
developers is anti-alias text.

00:38:56.040 --> 00:39:00.930
And we have several sessions that
are going to tell you how to use the

00:39:00.930 --> 00:39:05.400
existing text APIs in Mac OS X and
have them leverage the Quartz 2D API.

00:39:05.400 --> 00:39:08.480
And then we have the Quartz 2D API,
which is going to be able

00:39:08.490 --> 00:39:10.640
to leverage Quartz for the
final drawing or rendering,

00:39:10.640 --> 00:39:13.530
where you get the nice subpixel
anti-aliasing that Mac OS X is

00:39:13.530 --> 00:39:14.800
capable of providing.

00:39:15.190 --> 00:39:17.400
That's session 110.

00:39:17.400 --> 00:39:20.400
Then we have session 117,
which is going to be all

00:39:20.460 --> 00:39:23.950
about Image Capture Framework,
which is a new framework that

00:39:23.950 --> 00:39:27.400
allows your application to
interact with digital cameras.

00:39:27.400 --> 00:39:28.640
It's very, very interesting.

00:39:28.660 --> 00:39:30.570
You've seen it demoed in several of
the introductory sessions yesterday.

00:39:31.170 --> 00:39:33.460
Next we have color sync.

00:39:33.460 --> 00:39:35.690
Color sync is very, very important.

00:39:35.790 --> 00:39:40.500
One of the sort of key hidden
features in Mac OS X's imaging

00:39:40.500 --> 00:39:45.040
model in particular Quartz is the
fact that it's fully color managed.

00:39:45.040 --> 00:39:50.230
So if you're using the Quartz 2D APIs to
draw your graphics or you're doing

00:39:50.280 --> 00:39:55.370
something like drawing a PDF on screen,
Mac OS X knows how to interact with

00:39:55.400 --> 00:40:00.540
color sync and provide high level
color management to that content.

00:40:01.150 --> 00:40:04.660
And it is something that's fairly
simple to do and we want to spend time

00:40:04.770 --> 00:40:08.300
in the color sync session educating
developers on how they need to do

00:40:08.300 --> 00:40:12.040
things like tag profiles and understand
how the color workflow works internally.

00:40:12.040 --> 00:40:15.860
So that you can make any application
on Mac OS X be fully color managed

00:40:15.920 --> 00:40:19.410
regardless if it's displaying
content on screen or sending the

00:40:19.410 --> 00:40:21.540
content out to an output device.

00:40:21.540 --> 00:40:26.450
We have another session on text so
that if you still want to learn how to

00:40:26.520 --> 00:40:30.300
do nice anti-alias text using Quartz,
there's some content in

00:40:30.300 --> 00:40:31.080
the text on Mac OS X.

00:40:31.080 --> 00:40:34.360
We have a session on text on the
Mac OS X session which although

00:40:34.360 --> 00:40:37.330
it talks about some of the
other text APIs such as MLTE,

00:40:37.360 --> 00:40:42.160
those are fully interoperable in terms of
having the graphics displayed by Quartz.

00:40:42.180 --> 00:40:47.870
And then a very interesting session is
404 which is OpenGL high performance 2D.

00:40:47.880 --> 00:40:50.470
If you're doing anything
with large bitmaps and you

00:40:50.560 --> 00:40:53.840
want very high performance,
getting those bitmaps on screen,

00:40:53.840 --> 00:40:55.870
then you need to see this session.

00:40:55.880 --> 00:40:58.370
Some very,
very interesting demonstrations.

00:40:58.450 --> 00:41:01.100
Some very interesting concepts
will be expressed at this session.

00:41:01.100 --> 00:41:04.090
And then we also have a printing
session where we'll talk about

00:41:04.090 --> 00:41:07.170
Mac OS X printing architecture
and we'll cover printing from the

00:41:07.290 --> 00:41:09.150
perspective of Carbon developers.

00:41:09.300 --> 00:41:13.180
We'll even get into a little bit
for developers who are familiar

00:41:13.180 --> 00:41:17.210
with BSD and we'll also talk a
little bit about Cocoa printing.

00:41:17.540 --> 00:41:19.400
Finally,
we have a very interesting session,

00:41:19.400 --> 00:41:21.940
which is the Graphics and
Imaging Tips and Tricks.

00:41:21.940 --> 00:41:25.640
If you're a Carbon developer and
you want to learn how to fully

00:41:25.710 --> 00:41:29.090
leverage Quartz in your application,
this will be an important

00:41:29.100 --> 00:41:30.510
session for you to attend.

00:41:31.130 --> 00:41:37.080
We have a lot of content relating to
Quick Draw and Quartz integration,

00:41:37.080 --> 00:41:41.070
and also cover certain cases
like how do you print content.

00:41:41.100 --> 00:41:45.960
Also talk about the printing
context on Mac OS X,

00:41:45.960 --> 00:41:49.700
which are a little bit different from
what you might be used to in Mac OS 9.

00:41:49.700 --> 00:41:51.780
So it's also a very, very good session.

00:41:51.800 --> 00:41:56.900
Then we'll finish the graphic sessions at
this Worldwide Developer Conference with

00:41:56.900 --> 00:41:59.360
a feedback forum Friday at 2 p.m.