WEBVTT

00:00:00.630 --> 00:00:05.500
Ladies and gentlemen,
please welcome Godfrey DiGiorgi.

00:00:05.500 --> 00:00:12.180
Good morning.

00:00:12.180 --> 00:00:14.340
I'm glad to see so many people
were able to get out of bed

00:00:14.340 --> 00:00:16.880
on this third day of WWDC.

00:00:17.020 --> 00:00:18.720
How's the show for you?

00:00:18.850 --> 00:00:20.530
Doing good?

00:00:21.600 --> 00:00:23.140
Fantastic.

00:00:23.140 --> 00:00:25.170
OK, so this morning,
this is the Project Builder

00:00:25.200 --> 00:00:27.200
In-Depth session,
where we're going to take you

00:00:27.200 --> 00:00:31.740
into some of the more curious
details of Project Builder and

00:00:31.760 --> 00:00:33.760
show you how to get things done.

00:00:33.760 --> 00:00:37.370
And to that effect,
I'll introduce right away Mike Ferris,

00:00:37.370 --> 00:00:40.990
the manager of the Project Builder
IDE development team.

00:00:47.960 --> 00:00:50.700
Hello.

00:00:50.780 --> 00:00:53.460
So we have a lot of stuff to cover today.

00:00:53.480 --> 00:00:57.810
And so I'm going to go
ahead and dive right in.

00:00:58.040 --> 00:01:01.120
Basically,
we're going to try to focus today

00:01:01.120 --> 00:01:04.140
on some of the more advanced
features in Project Builder,

00:01:04.160 --> 00:01:10.990
and we're going to concentrate
on features of the build system.

00:01:11.730 --> 00:01:18.000
Project Builder does pretty automatic
support for most of your needs in

00:01:18.000 --> 00:01:22.280
terms of the building of your project.

00:01:23.170 --> 00:01:25.700
Every project,
every real project is probably going

00:01:25.700 --> 00:01:29.100
to have a few things that fall a
little bit outside the scope of what

00:01:29.210 --> 00:01:30.940
PBE handles really automatically.

00:01:30.940 --> 00:01:35.690
And so what we want to do today
is talk about what features are

00:01:35.690 --> 00:01:38.700
there in Project Builder to let
you do the kind of things that

00:01:38.700 --> 00:01:43.810
we haven't possibly anticipated
or that aren't directly supported

00:01:43.830 --> 00:01:46.200
and automatic in Project Builder.

00:01:47.710 --> 00:01:53.330
So small projects may be very simple.

00:01:53.340 --> 00:01:54.540
You create a project template.

00:01:54.540 --> 00:01:55.220
It builds.

00:01:55.220 --> 00:01:57.140
Everything works fine.

00:01:57.180 --> 00:01:59.540
But large projects often
get more complicated.

00:01:59.540 --> 00:02:07.180
And an IDE has to be able
to build your projects.

00:02:07.740 --> 00:02:09.540
The project templates get you started.

00:02:09.730 --> 00:02:12.440
You're going to add a
bunch of stuff to that.

00:02:12.440 --> 00:02:14.710
We have to support you adding all that.

00:02:14.720 --> 00:02:20.070
And we also have to be prepared
to let you get stuff done that we

00:02:20.070 --> 00:02:22.280
don't even know about right now.

00:02:22.280 --> 00:02:27.760
So there may be some new requirement
that comes up in six months.

00:02:27.820 --> 00:02:33.290
And if you can't get Project Builder
to satisfy that requirement,

00:02:33.400 --> 00:02:35.430
you're kind of stuck.

00:02:37.400 --> 00:02:39.720
And when it comes to this
future extensibility,

00:02:39.720 --> 00:02:43.500
the most important part is
the build system because

00:02:44.280 --> 00:02:45.840
If Project Builder can't
build your project,

00:02:45.910 --> 00:02:48.200
it doesn't matter what
other features it has.

00:02:48.200 --> 00:02:52.770
So again, we're going to concentrate
on the build system today.

00:02:54.210 --> 00:02:56.180
This is basically what we're
going to go through today.

00:02:56.180 --> 00:03:02.500
We'll start with importing projects
and source code into Project Builder.

00:03:02.500 --> 00:03:07.060
This will give us a project that
we can then use throughout the

00:03:07.060 --> 00:03:11.160
rest of the session to show you
some of the more advanced features.

00:03:11.400 --> 00:03:14.590
Once we get the project up and running,
we're going to talk a

00:03:14.590 --> 00:03:17.470
little bit about targets,
and then start talking about some of

00:03:17.550 --> 00:03:21.600
the specific features that go along
with targets in Project Builder.

00:03:21.740 --> 00:03:25.430
Build styles,
which let you modify the way that

00:03:25.430 --> 00:03:28.040
a particular target gets built.

00:03:28.040 --> 00:03:30.960
So if you want to have a target
that builds your application,

00:03:30.960 --> 00:03:33.080
but sometimes you'd like
to build it for debugging,

00:03:33.080 --> 00:03:34.860
and sometimes you'd like
to build it for profiling,

00:03:34.860 --> 00:03:36.970
and sometimes you'd like
to build it to put it on a

00:03:36.970 --> 00:03:42.070
CD and ship to your customers,
you would use build styles to customize

00:03:42.070 --> 00:03:44.590
the way that the target gets built.

00:03:45.120 --> 00:03:50.460
Build phases are sort of the
basic building blocks of a target.

00:03:50.460 --> 00:03:54.600
So a target is basically a
sequence of build phases.

00:03:54.600 --> 00:04:00.640
And build phases do different things
to the files that they contain.

00:04:00.640 --> 00:04:03.480
And we'll talk a little
bit about what that means.

00:04:03.510 --> 00:04:06.030
And then at the end,
we're going to talk a little

00:04:06.040 --> 00:04:07.160
bit about legacy targets.

00:04:07.160 --> 00:04:11.490
And a legacy target is a special kind
of target in Project Builder which

00:04:11.490 --> 00:04:15.700
basically circumvents Project Builder's
build system altogether.

00:04:15.730 --> 00:04:20.070
And so one common use for a legacy target
would be if you have a project that's,

00:04:20.080 --> 00:04:23.300
say, an open source project
and it has a make file,

00:04:23.300 --> 00:04:25.930
you can set up a legacy target
that will invoke make to build

00:04:25.930 --> 00:04:29.770
the project instead of using
Project Builder's built-in system.

00:04:30.820 --> 00:04:35.790
All right, so let's get started on
importing our source code.

00:04:36.560 --> 00:04:38.720
Basically,
you have a few different ways to

00:04:38.720 --> 00:04:39.900
get started with Project Builder.

00:04:39.900 --> 00:04:43.030
If you're starting a brand new project,
okay, great.

00:04:43.100 --> 00:04:46.180
You just pick a project template
that's closest to whatever,

00:04:46.180 --> 00:04:47.760
you know, you want to end up building.

00:04:47.760 --> 00:04:51.500
And you start with that and you just
start adding your code and writing it.

00:04:51.500 --> 00:04:53.610
And eventually you will be done.

00:04:53.640 --> 00:04:57.110
But a lot of you all have
existing source code.

00:04:57.120 --> 00:05:00.400
And so then the question becomes,
how do I get all this code I already

00:05:00.400 --> 00:05:02.230
have into Project Builder and building?

00:05:02.260 --> 00:05:04.940
And we provide a couple
different ways to do that.

00:05:05.210 --> 00:05:09.760
We can directly import projects
from two different IDEs,

00:05:09.760 --> 00:05:13.110
from Code Warrior and from the old
version of Project Builder called

00:05:13.110 --> 00:05:14.980
Project Builder WO these days.

00:05:17.200 --> 00:05:20.140
The third way to get source into
your project is that you can

00:05:20.140 --> 00:05:25.140
just directly import whole trees,
folders full of source code,

00:05:25.140 --> 00:05:27.740
into Project Builder in
a fairly automated way.

00:05:27.740 --> 00:05:29.500
And we'll show a little bit of that, too.

00:05:29.580 --> 00:05:33.060
So today what we're going to
do is we're going to start by

00:05:33.060 --> 00:05:35.910
importing a Code Warrior project.

00:05:36.100 --> 00:05:39.300
And to import a project
from Code Warrior,

00:05:39.350 --> 00:05:42.230
you start in Code Warrior because
you're going to have to basically

00:05:43.170 --> 00:05:47.180
export your project as an XML file,
and then Project Builder

00:05:47.180 --> 00:05:48.380
can read in the XML file.

00:05:48.380 --> 00:05:52.700
Before you export the project as XML,
it's important to set in your

00:05:52.700 --> 00:05:57.210
project settings for Code Warrior the
little checkbox that says save

00:05:57.210 --> 00:05:59.880
project entries as relative paths.

00:05:59.880 --> 00:06:05.700
PB can import this stuff a lot better if
it has the relative paths to the files.

00:06:06.000 --> 00:06:07.080
Thank you.

00:06:08.730 --> 00:06:12.360
Once you import the project,
Project Builder will automatically

00:06:12.360 --> 00:06:15.560
get from this XML the whole group
structure of the Code Warrior project.

00:06:15.600 --> 00:06:21.220
It will bring over any targets that are
in the Code Warrior project and convert

00:06:21.240 --> 00:06:23.600
them into Project Builder targets.

00:06:23.650 --> 00:06:26.200
Once it's all in there,
you're almost certainly going to have

00:06:26.210 --> 00:06:29.980
to do a little bit of hand tuning of the
resulting project before it is complete

00:06:29.980 --> 00:06:32.400
and buildable in Project Builder.

00:06:34.250 --> 00:06:36.390
So the other thing that we're
going to talk about a little

00:06:36.390 --> 00:06:41.020
bit today is importing just
folders full of source code.

00:06:41.040 --> 00:06:45.640
You can just drag a folder into
Project Builder from Finder,

00:06:45.660 --> 00:06:49.480
and Project Builder will offer
to recursively import all

00:06:49.510 --> 00:06:51.790
the stuff inside the folder.

00:06:52.360 --> 00:06:54.750
When you're going to do that,
it's usually the best thing to

00:06:54.780 --> 00:06:58.320
create the target that you want to
use to build that source code first,

00:06:58.430 --> 00:07:01.140
because as Project Builder
is importing all this stuff,

00:07:01.190 --> 00:07:03.020
it can automatically add it to a target.

00:07:03.020 --> 00:07:06.400
So if the target already exists,
you can say, OK, add it to my new target.

00:07:06.400 --> 00:07:09.440
And as it's processing all the files,
it'll figure out which build

00:07:09.440 --> 00:07:12.410
phase each file belongs in and
put it in there automatically.

00:07:14.560 --> 00:07:16.530
Once it's all in there,
you probably have some more

00:07:16.610 --> 00:07:19.140
configuration to do on the
target before it actually builds.

00:07:21.510 --> 00:07:23.500
So all right,
let's get started with the demo.

00:07:23.540 --> 00:07:27.220
And to help me with the demo,
we'll bring Anders Bertelrud

00:07:27.220 --> 00:07:29.000
onto the stage.

00:07:29.000 --> 00:07:31.890
Anders is a member of
the Project Builder team.

00:07:33.240 --> 00:07:37.740
So let's get started by importing
our Code Warrior project.

00:07:37.990 --> 00:07:40.930
So the first thing we're going
to do is fire up Code Warrior and

00:07:41.000 --> 00:07:42.560
open up this project.

00:07:42.560 --> 00:07:46.480
This is a sample project that you
can get off of Apple's website.

00:07:46.480 --> 00:07:51.320
It's provided by the developer,
tech services people,

00:07:51.320 --> 00:07:54.560
and it's a simple little application.

00:07:54.570 --> 00:08:00.060
It actually ships with both
a Code Warrior version and

00:08:00.060 --> 00:08:01.130
a Project Builder version.

00:08:01.230 --> 00:08:04.190
We've thrown away the Project Builder
version so that we can show

00:08:04.190 --> 00:08:05.930
you how to do the importing.

00:08:06.020 --> 00:08:08.530
So first of all,
let's go ahead and make sure

00:08:08.540 --> 00:08:12.010
that the checkbox is checked
for the relative paths.

00:08:14.100 --> 00:08:18.810
and once we know that that's all done,
we can go ahead and from the File menu,

00:08:18.890 --> 00:08:21.340
just choose Export Project.

00:08:21.390 --> 00:08:24.210
And this is going to save an XML file.

00:08:26.100 --> 00:08:35.120
And we'll go ahead and put it in the
actual folder that the project is in.

00:08:36.890 --> 00:08:38.620
So now we've generated this XML file.

00:08:38.620 --> 00:08:40.360
Okay, now we're done with Code Warrior.

00:08:40.360 --> 00:08:44.410
So let's go ahead and get out of
Code Warrior and go to Project Builder.

00:08:47.910 --> 00:08:50.250
and we can choose Import Project.

00:08:50.250 --> 00:08:52.060
And you get a choice of what
kind of project to import,

00:08:52.200 --> 00:08:54.900
so we're going to import
a Code Warrior project.

00:08:55.050 --> 00:08:58.420
And then we just have to
point it at this XML file.

00:09:03.680 --> 00:09:06.840
Okay, and now we're done.

00:09:06.840 --> 00:09:10.040
We can just go ahead and
let the import happen.

00:09:10.040 --> 00:09:13.360
You'll notice that it imports
and we get all the groups,

00:09:13.610 --> 00:09:19.400
so we can go ahead and check out and
make sure all the files got in there.

00:09:20.340 --> 00:09:22.300
Okay.

00:09:22.300 --> 00:09:26.180
Now actually I'm a little bit
lost on the demo script here,

00:09:26.180 --> 00:09:26.180
so let me...

00:09:27.350 --> 00:09:30.450
So now,
when Code Warrior builds this thing,

00:09:30.450 --> 00:09:34.110
it's going to build a pef binary,
and so it links against

00:09:34.110 --> 00:09:36.040
the CarbonLib libraries.

00:09:36.040 --> 00:09:39.770
And we're going to build a Mac O binary,
so we're going to go ahead and

00:09:39.770 --> 00:09:42.540
get rid of the libraries that
came over from Code Warrior.

00:09:42.540 --> 00:09:45.590
And we'll add in the
frameworks we need in a moment.

00:09:45.710 --> 00:09:49.060
But first, let's go ahead and look at
the target that got imported.

00:09:49.060 --> 00:09:51.580
And you'll notice that in Code Warrior,
this target was called

00:09:51.580 --> 00:09:55.360
something kind of funky,
so maybe we should rename it to be

00:09:55.360 --> 00:09:58.970
something a little bit more reasonable.

00:10:06.840 --> 00:10:09.940
And also,
if you go to the Build Settings tab,

00:10:09.940 --> 00:10:15.170
the application that Code Warrior was
generating has this weird

00:10:15.170 --> 00:10:17.250
PPC in parentheses after it.

00:10:17.260 --> 00:10:19.970
We don't really need that,
so let's get rid of that.

00:10:20.150 --> 00:10:25.650
And okay, now let's actually go back to
the files tab here and make

00:10:25.740 --> 00:10:29.800
sure that we are linking against
the frameworks that we need.

00:10:29.900 --> 00:10:32.730
So first, okay,
we have this Mac libraries group.

00:10:32.800 --> 00:10:35.840
Let's go ahead and rename
that to be frameworks.

00:10:39.250 --> 00:10:42.160
And then from the project menu,
you can choose Add Frameworks.

00:10:42.200 --> 00:10:47.540
And we'll go ahead and
find the two that we need.

00:10:47.540 --> 00:10:49.940
And this example uses
Carbon and QuickTime.

00:10:49.940 --> 00:10:53.680
So we'll get the Carbon framework
and the QuickTime framework

00:10:53.780 --> 00:10:55.710
and add them in there.

00:10:57.900 --> 00:11:00.840
make sure that they get
added to the target.

00:11:00.840 --> 00:11:04.790
And you'll notice that they
appear there in the Framework and

00:11:04.790 --> 00:11:07.490
Libraries build phase of the target.

00:11:07.600 --> 00:11:11.240
So for this example,
this is actually all we have to do.

00:11:11.240 --> 00:11:14.350
Now we're ready to
actually build the thing.

00:11:14.360 --> 00:11:17.960
So let's go ahead and build it and
make sure that it actually works.

00:11:26.600 --> 00:11:28.660
Okay, there's Build.

00:11:28.710 --> 00:11:30.730
Go ahead and run it just to make sure.

00:11:31.020 --> 00:11:32.640
So this example,
all it does is it takes a

00:11:32.640 --> 00:11:35.300
screenshot of the screen,
it lets you scale it,

00:11:35.300 --> 00:11:38.310
and it actually lets you save it,
which we'll show a

00:11:38.350 --> 00:11:40.690
little bit more of later.

00:11:40.800 --> 00:11:46.050
In fact, when you save it,
it saves as a picked file.

00:11:48.100 --> 00:11:50.020
and Interesting.

00:11:50.130 --> 00:11:53.750
So-- - Can also-- - That was
not part of the demo script.

00:11:53.760 --> 00:11:55.440
- If that happens to you,
you can actually kill

00:11:55.440 --> 00:11:56.610
it with a stop button.

00:11:56.650 --> 00:11:58.590
- Right, so.

00:11:58.800 --> 00:12:01.980
As shipped from Apple, this thing saves
screenshots as picked files.

00:12:01.980 --> 00:12:03.820
And we thought, well,
maybe it'd be nice to be

00:12:03.820 --> 00:12:05.500
able to save as a TIFF file.

00:12:05.500 --> 00:12:08.480
So in order to do that,
first we're going to need

00:12:08.480 --> 00:12:09.610
some TIFF handling code.

00:12:09.650 --> 00:12:12.780
So what I did is I went
out to SGI's website,

00:12:12.780 --> 00:12:17.720
and I downloaded the free
TIFF library that Sam Leffler wrote,

00:12:17.720 --> 00:12:22.200
which is sort of the standard
implementation of the TIFF library.

00:12:22.200 --> 00:12:26.550
And what we're going to do now is
actually import that TIFF library

00:12:26.550 --> 00:12:31.750
into this project so that we can
build a library that handles TIFF,

00:12:31.770 --> 00:12:33.500
and then we'll make the
app link against it.

00:12:33.570 --> 00:12:36.420
So again,
to get started when you're going to

00:12:36.420 --> 00:12:38.820
import a bunch of raw source code,
it's best to create the

00:12:38.820 --> 00:12:40.270
target that you want first.

00:12:40.310 --> 00:12:43.270
So let's go ahead and
create a new target.

00:12:44.040 --> 00:12:46.090
We're going to build
a static library here,

00:12:46.170 --> 00:12:48.000
so we'll create a library target.

00:12:48.240 --> 00:12:50.910
Let's call it libhiff.a.

00:12:53.000 --> 00:12:55.040
Now when the target gets created,
why don't you go ahead and

00:12:55.110 --> 00:12:59.620
close the Build tab up there
too so that we can see more.

00:12:59.940 --> 00:13:02.480
It has no files in it,
but that's okay because we're

00:13:02.480 --> 00:13:03.870
going to add the files right now.

00:13:04.360 --> 00:13:08.080
Actually, before we add the files,
let's go ahead and look at the

00:13:08.080 --> 00:13:10.490
Build Settings tab of the target.

00:13:11.710 --> 00:13:13.850
and make sure that
everything is okay there.

00:13:13.950 --> 00:13:16.290
So the thing is going
to be named libhift.a.

00:13:16.400 --> 00:13:22.460
And actually, let's go ahead and set it
to install in /applications.

00:13:22.570 --> 00:13:23.460
Not the library.

00:13:23.460 --> 00:13:24.400
You know what?

00:13:24.400 --> 00:13:25.580
You're right.

00:13:25.780 --> 00:13:26.540
and Never mind.

00:13:26.630 --> 00:13:30.160
So, did we skip that step?

00:13:30.350 --> 00:13:34.080
Let's go back to the snapshot
target actually and do that.

00:13:37.980 --> 00:13:40.930
So this illustrates that even if you
make a mistake when you first start,

00:13:40.980 --> 00:13:44.610
you can always go back and change it.

00:13:44.710 --> 00:13:45.860
So, all right, there we go.

00:13:45.860 --> 00:13:49.140
We're gonna install the
application in /applications.

00:13:49.150 --> 00:13:52.690
And, okay, so now let's go back to the
TIFF target so that we can see all

00:13:52.790 --> 00:13:54.940
the files as they get imported.

00:13:54.940 --> 00:13:59.930
And we'll switch to the File tab,
and then go to Finder.

00:14:02.700 --> 00:14:04.690
and Let's group those together.

00:14:04.700 --> 00:14:05.700
That's a good idea.

00:14:05.700 --> 00:14:08.590
So we'll go ahead and put all the
source code for the snapshot stuff

00:14:08.660 --> 00:14:13.380
into its own group so that it doesn't
get confused with the TIFF source code.

00:14:17.960 --> 00:14:21.100
Now we have a library,
or we have the folder with all

00:14:21.100 --> 00:14:25.510
the source code here in Finder,
and we can just drag that in.

00:14:26.470 --> 00:14:28.580
You get a few options here.

00:14:28.620 --> 00:14:37.720
Let's go ahead and have it copy that
source code into our project and

00:14:37.720 --> 00:14:37.720
we'll tell it to recursively import
all the contents of that folder.

00:14:38.320 --> 00:14:43.190
and we'll add it to the lib tiff
target that we just created.

00:14:43.490 --> 00:14:45.560
So all that stuff comes in and
you can see that it's all been

00:14:45.560 --> 00:14:48.900
added to the build phases here.

00:14:49.040 --> 00:14:52.610
We have actually made some
minor modifications to the

00:14:52.610 --> 00:14:54.680
source code we got from SGI.

00:14:54.680 --> 00:14:58.190
The only thing that we've done is
we removed some files which are

00:14:58.210 --> 00:15:06.530
used only for other platforms,
just to avoid having to get rid of

00:15:06.530 --> 00:15:06.530
them once we've imported it here.

00:15:07.490 --> 00:15:10.300
Now we have a target that
builds the TIFF library.

00:15:10.320 --> 00:15:15.970
And let's go ahead and build it,
just to make sure.

00:15:18.570 --> 00:15:23.360
So we make the active target be the
new TIFF target and go ahead and build.

00:15:23.670 --> 00:15:26.460
Now this is actually going
to take a moment because this

00:15:26.460 --> 00:15:30.400
library has a lot of files in it.

00:15:31.080 --> 00:15:32.660
We'll see that it does
have some warnings.

00:15:32.660 --> 00:15:34.790
If we were going to be
conscientious about things,

00:15:34.790 --> 00:15:39.310
we might go in and fix those warnings,
but we'll let that be for now.

00:15:41.430 --> 00:15:45.860
So, still building.

00:15:45.910 --> 00:15:47.460
If you did want to fix the warnings,
of course,

00:15:47.460 --> 00:15:51.020
you can just click on the lines and go
to the code and figure out what's wrong.

00:15:51.020 --> 00:15:52.780
So the build's done?

00:15:52.780 --> 00:15:53.830
The build is done.

00:15:53.850 --> 00:15:57.080
So, okay, let's go ahead and
close up that build tab.

00:15:57.080 --> 00:16:01.750
The last thing I'd like to show in
this segment of the demo is we'd like

00:16:01.750 --> 00:16:06.940
for the Super Snapshot application
to link against this TIFF library.

00:16:07.710 --> 00:16:14.100
So, to do that, we can go back to the
target for Super Snapshot.

00:16:20.920 --> 00:16:25.040
If we go back to the file space again,
the products group is sort of special.

00:16:25.040 --> 00:16:29.240
That has a reference in it to each
thing that is built by your project.

00:16:29.240 --> 00:16:31.610
So every target you add will
typically cause something to be

00:16:31.610 --> 00:16:32.970
added to that products group.

00:16:32.970 --> 00:16:35.890
And you can see that we
have two things in there,

00:16:35.890 --> 00:16:40.870
the application and the library that
we're building with the lib tiff target.

00:16:40.920 --> 00:16:45.120
So one of the reasons why this
is available is so that you can

00:16:45.120 --> 00:16:50.360
actually establish linkage between
the different target products.

00:16:50.360 --> 00:16:54.430
So to link against the lib tiff target,
we can just set the active target

00:16:54.430 --> 00:16:58.880
to be the snapshot target and then
click in that left hand column.

00:16:58.900 --> 00:17:01.680
And that library will be added
to the snapshot target in the

00:17:01.700 --> 00:17:03.430
frameworks and libraries phase.

00:17:03.430 --> 00:17:05.960
And when we build the
snapshot target the next time,

00:17:05.960 --> 00:17:07.870
it will link against the library.

00:17:07.880 --> 00:17:10.870
Now one more thing that we actually
should do just to be clear.

00:17:10.880 --> 00:17:11.920
And be complete.

00:17:11.960 --> 00:17:15.710
Is in the targets tab,
we can establish a target

00:17:15.990 --> 00:17:19.920
dependency so that every time
we build the snapshot target,

00:17:19.920 --> 00:17:21.880
we'll make sure to first
build the tiff library.

00:17:21.980 --> 00:17:24.660
So in case we didn't build
the tiff library first,

00:17:24.690 --> 00:17:28.830
we can still link against it because
it will get built automatically.

00:17:29.000 --> 00:17:34.030
So now we have a complete project here,
and we'll use this as the starting point

00:17:34.090 --> 00:17:35.920
for the rest of the demos in the session.

00:17:36.160 --> 00:17:40.890
But now, let's have Anders talk a
little bit about build styles.

00:17:40.900 --> 00:17:41.900
Okay.

00:17:41.900 --> 00:17:43.610
So let's go back to the slides.

00:17:43.850 --> 00:17:45.530
Thank you, Mike.

00:17:49.010 --> 00:17:50.990
So if we could have the
slides back on the screen,

00:17:50.990 --> 00:17:53.440
please.

00:17:53.440 --> 00:17:56.350
I'm going to move the mouse
pointer a little bit here.

00:17:57.000 --> 00:18:03.330
Okay, so now we have a project that's
had the sources imported into it,

00:18:03.440 --> 00:18:05.000
and so we can build it.

00:18:05.120 --> 00:18:07.990
And what I'm going to talk about now
is a feature we call Build Styles.

00:18:08.050 --> 00:18:13.520
And this is a feature that
we added to help you maintain

00:18:13.670 --> 00:18:16.900
your project in the long run.

00:18:17.390 --> 00:18:18.440
So what is build style?

00:18:18.440 --> 00:18:20.490
Okay,
so the basics of a build style is that

00:18:20.610 --> 00:18:26.130
it allows you to build a single target or
a set of targets in many different ways.

00:18:26.130 --> 00:18:28.780
So if you have one logical
product that you want to build,

00:18:28.780 --> 00:18:31.020
let's say one application,
but you might want to

00:18:31.210 --> 00:18:32.950
build it for profiling,
for debugging,

00:18:32.950 --> 00:18:36.280
you might want to try it out using a
hash table or a linked list algorithm,

00:18:36.350 --> 00:18:37.180
whatever.

00:18:37.180 --> 00:18:40.370
You wouldn't want to set up lots of
different targets and have all the

00:18:40.370 --> 00:18:43.830
same source files in all those targets
because then as you maintain them,

00:18:43.830 --> 00:18:46.220
if you add a source file,
you have to remember to add

00:18:46.290 --> 00:18:47.280
it to each of those targets.

00:18:47.300 --> 00:18:50.320
If you change the build setting,
that should not change

00:18:50.400 --> 00:18:52.710
between the targets,
you've got to make the

00:18:52.710 --> 00:18:53.710
change to all of them.

00:18:53.820 --> 00:18:57.510
So a build style is just like a
filter that gets applied on top of

00:18:57.510 --> 00:18:59.830
the target settings in build time.

00:18:59.840 --> 00:19:01.780
So here are some examples of that.

00:19:01.780 --> 00:19:06.090
You can enable, disable features,
experiment with different algorithms,

00:19:06.090 --> 00:19:08.500
different optimization levels, etc.

00:19:08.500 --> 00:19:09.770
Okay.

00:19:10.140 --> 00:19:11.940
Okay, so how does this actually
affect the build?

00:19:12.100 --> 00:19:16.010
Well, the basics is that a build style,
it changes the settings

00:19:16.620 --> 00:19:18.730
of the target dynamically.

00:19:18.800 --> 00:19:22.540
So it doesn't actually modify the target,
it just allows you to pick a

00:19:22.540 --> 00:19:26.180
different set of settings to apply
on top of them at build time.

00:19:26.180 --> 00:19:30.370
And a target's build settings,
like optimization level and what

00:19:30.380 --> 00:19:33.850
flags to pass to the preprocessor,
that's just really a

00:19:33.910 --> 00:19:35.760
dictionary of settings.

00:19:35.760 --> 00:19:39.970
And so even if you check a checkbox
or choose a menu item from a

00:19:40.020 --> 00:19:42.950
pop-up in the target editor,
what you're really doing is just

00:19:42.950 --> 00:19:44.740
changing the contents of that dictionary.

00:19:44.740 --> 00:19:47.760
So a build style just
selectively replaces or appends

00:19:47.760 --> 00:19:49.380
to some of those entries.

00:19:49.380 --> 00:19:52.560
So we see an example here,
debugging symbols equals no,

00:19:52.590 --> 00:19:56.320
that would replace the setting
that was defined in the target.

00:19:56.320 --> 00:20:01.160
If a build style has a plus equals,
that means that it actually

00:20:01.160 --> 00:20:04.920
just appends to the value of
the setting in the target.

00:20:04.920 --> 00:20:09.960
And one very useful thing is that one
build setting can refer to another one,

00:20:09.960 --> 00:20:09.960
and that's a very useful thing.

00:20:09.960 --> 00:20:09.960
So a build style can
refer to another one,

00:20:09.980 --> 00:20:13.930
and using syntax that's fairly,
should be fairly familiar to those

00:20:13.940 --> 00:20:15.100
who have experience with make.

00:20:15.200 --> 00:20:17.780
So you can say A equals dollar B,
for example, right,

00:20:17.780 --> 00:20:19.980
to refer to the value of
the build setting called B.

00:20:19.980 --> 00:20:25.900
Now, obviously the build style can
refer to the target settings,

00:20:25.900 --> 00:20:30.400
but also the target settings can
refer back up to the build styles.

00:20:30.420 --> 00:20:34.480
So it's actually fairly flexible,
and it's possible to configure

00:20:34.480 --> 00:20:37.560
your settings to do a variety
of interesting things.

00:20:37.560 --> 00:20:39.910
The one thing that's not
permitted is circular reference.

00:20:39.940 --> 00:20:39.940
So if you're using a building setting,
you're going to have to do a

00:20:39.940 --> 00:20:41.170
lot of circular references,
right?

00:20:41.170 --> 00:20:43.260
You can't define a build
setting in terms of itself,

00:20:43.300 --> 00:20:45.290
because

00:20:46.010 --> 00:20:49.900
So since we have these
different layers of settings,

00:20:49.900 --> 00:20:53.370
the targets, the build styles,
we need a precedent for that.

00:20:53.500 --> 00:20:55.730
So here's a summary of the precedents.

00:20:56.310 --> 00:20:59.070
The very highest level are
the settings passed to the

00:20:59.070 --> 00:21:01.320
PBX build command line build tool.

00:21:01.320 --> 00:21:04.230
Now if you're running the IDE,
there are no PBX build settings,

00:21:04.240 --> 00:21:05.720
so that part just goes away.

00:21:05.720 --> 00:21:08.360
But this is also intuitive
to those using Make.

00:21:08.360 --> 00:21:11.370
Anything you pass on the
command line to your invocation

00:21:11.420 --> 00:21:13.240
will override anything else.

00:21:14.990 --> 00:21:18.070
Anything that's not defined there,
the build system looks in the

00:21:18.070 --> 00:21:19.520
build style that's in effect.

00:21:19.530 --> 00:21:22.880
And if it's not there,
it goes on to the target settings, etc.

00:21:22.880 --> 00:21:26.570
So by using this precedence,
you can set up some really interesting

00:21:26.580 --> 00:21:30.070
configurations that let you just
switch the build style and give

00:21:30.100 --> 00:21:32.410
very interesting behavior changes.

00:21:36.380 --> 00:21:37.570
And, okay, great.

00:21:37.650 --> 00:21:40.130
So now we've configured the build styles,
but how do we actually use them?

00:21:40.140 --> 00:21:45.420
Well, currently the IDE has a pop-up that
you can put in your toolbar using

00:21:45.420 --> 00:21:46.640
the customized toolbar command.

00:21:46.640 --> 00:21:50.390
And that's a pop-up that's very
similar to the target selection pop-up,

00:21:50.460 --> 00:21:52.720
the one that chooses the active target.

00:21:52.720 --> 00:21:56.080
This one sets the active build style,
and the IDE currently always

00:21:56.080 --> 00:21:57.640
has one build style active.

00:21:57.640 --> 00:22:00.560
So you can pick any one you want,
say development or deployment,

00:22:00.560 --> 00:22:04.260
and just when you click on the hammer,
that's the build style that gets used.

00:22:04.300 --> 00:22:05.140
You saw that in the demo.

00:22:06.300 --> 00:22:07.980
Actually, sorry,
you saw that for the target,

00:22:07.980 --> 00:22:09.670
but it works the same
way for the build style.

00:22:09.720 --> 00:22:10.600
You'll see that in the next demo.

00:22:10.600 --> 00:22:16.600
Now, the PBX build command line tool is a
little bit more flexible than that.

00:22:16.620 --> 00:22:19.940
If you don't specify any build style,
then none of the build

00:22:20.140 --> 00:22:23.360
styles have any effect,
and the settings defined in the

00:22:23.460 --> 00:22:25.540
target are the ones that get used.

00:22:25.560 --> 00:22:30.150
But as we see in the second example here,
you can build for install, for example,

00:22:30.150 --> 00:22:33.500
and you can specify by name
the deployment build style.

00:22:33.500 --> 00:22:35.010
Now, you can call that anything you want.

00:22:35.070 --> 00:22:36.280
So you could add as many of
the build styles that you want.

00:22:36.280 --> 00:22:42.280
And the last example here just
shows that the active build

00:22:42.280 --> 00:22:50.120
style that was set in the target,
in the project, is a per user setting.

00:22:50.160 --> 00:22:53.740
And so you have access to that from
the command line if you use PBX build.

00:22:53.740 --> 00:22:57.390
So you can just say, the last one says,
use whatever build style was active

00:22:57.530 --> 00:22:59.560
in the IDE when I edited this project.

00:22:59.640 --> 00:23:01.370
Can be handy.

00:23:03.270 --> 00:23:05.380
And by default,
new projects get two build

00:23:05.380 --> 00:23:06.970
styles just to start you off.

00:23:07.090 --> 00:23:09.420
There's deployment and the
development build styles.

00:23:09.450 --> 00:23:15.440
And so development is by default set up
to enable debugging symbols and to let

00:23:15.440 --> 00:23:18.270
you basically have a debuggable build.

00:23:18.270 --> 00:23:21.810
The deployment one is when you want
to build it for putting on a CD,

00:23:21.810 --> 00:23:22.660
for example.

00:23:22.660 --> 00:23:26.390
So that would turn off debugging symbols,
have a higher optimization, et cetera.

00:23:26.400 --> 00:23:29.120
But you can add any number of
build styles to your project.

00:23:29.120 --> 00:23:31.860
So you could just define
anything you want to.

00:23:32.000 --> 00:23:36.920
We're going to see in the demo
definition of preprocessor macros.

00:23:37.480 --> 00:23:39.030
Alright,
so I'd like to invite Christian Molick

00:23:39.170 --> 00:23:41.880
up onto the stage and we're
going to do a little demo.

00:23:41.880 --> 00:23:45.590
Hopefully I'll remember the script.

00:23:49.460 --> 00:23:50.860
Okay, great.

00:23:50.860 --> 00:23:52.820
So first of all,
what we're going to do is we're going

00:23:52.820 --> 00:23:55.110
to configure the targets that we have,
the two targets,

00:23:55.180 --> 00:23:59.520
Super Snapshot and LibTIF,
to turn off debugging symbols

00:23:59.520 --> 00:24:03.450
because we want the default case
to be built for CD in this case.

00:24:03.460 --> 00:24:08.010
So Christian's going to open up
both of the targets here and we

00:24:08.010 --> 00:24:13.350
just uncheck the generate debug
symbols checkbox for each of those.

00:24:15.530 --> 00:24:18.920
So now if we build without
any build style at all,

00:24:18.930 --> 00:24:23.160
then we're just going to
build for putting on a CD.

00:24:23.160 --> 00:24:27.040
So now in order to be able to
set the active build style,

00:24:27.040 --> 00:24:28.790
we actually want to
customize the toolbar here.

00:24:28.790 --> 00:24:32.670
So we want to go ahead and do that.

00:24:34.000 --> 00:24:36.300
Just go ahead and control click on that,
say Customize Toolbar,

00:24:36.300 --> 00:24:38.420
and just drag up the Build Style.

00:24:38.490 --> 00:24:42.320
Active Build Style pop-up,
just drop it in there, and click Done.

00:24:42.440 --> 00:24:44.570
We don't put it in there by
default because we want to keep the

00:24:44.570 --> 00:24:48.660
UI and the concepts a little bit
simple when you first start out.

00:24:48.760 --> 00:24:51.610
So, it says no Build Style since
we don't have any defined yet,

00:24:51.820 --> 00:24:53.880
so let's define some Build Styles.

00:24:54.000 --> 00:24:58.460
So, let's go ahead and go down to, yeah,
Build Styles and create

00:24:58.480 --> 00:24:59.440
a new Build Style.

00:24:59.520 --> 00:25:01.480
Let's call this Development.

00:25:07.800 --> 00:25:10.320
and if we click on that,
the development build style,

00:25:10.370 --> 00:25:11.200
we can edit it.

00:25:11.230 --> 00:25:14.180
Now right now we don't have any
graphical UI for any of the settings.

00:25:14.220 --> 00:25:18.980
We're planning on adding that,
but this gives you control

00:25:19.240 --> 00:25:22.080
over the exact dictionary of
settings that are available.

00:25:22.080 --> 00:25:25.360
Let's go ahead and add one that's
called Debugging Underbar Symbols.

00:25:25.380 --> 00:25:30.260
And so you just click in there and
hit return and that adds a new one.

00:25:30.580 --> 00:25:32.190
and you just tab between the fields.

00:25:32.200 --> 00:25:34.520
So debugging symbols,
let's set that to yes,

00:25:34.580 --> 00:25:35.970
because we're doing development.

00:25:36.220 --> 00:25:37.380
And let's add another one.

00:25:37.450 --> 00:25:39.790
And this one is going
to be other C flags,

00:25:39.790 --> 00:25:42.540
which is just a bucket where
we can put any other C flag we

00:25:42.540 --> 00:25:45.000
want to pass to the compiler.

00:25:45.230 --> 00:25:48.180
Actually, C flags.

00:25:48.200 --> 00:25:49.150
Other C flags.

00:25:49.180 --> 00:25:50.590
Yeah.

00:25:51.880 --> 00:25:53.550
Yeah, so just double click on that.

00:25:53.660 --> 00:25:53.860
Right.

00:25:54.040 --> 00:25:55.600
I got it.

00:25:55.610 --> 00:25:57.800
Others and bugs.

00:25:57.900 --> 00:26:02.290
And we can set the value to be -D Debug.

00:26:03.320 --> 00:26:06.490
So this is just going to define
the debug preprocessor macro.

00:26:06.570 --> 00:26:08.500
So now if we click on
the equals sign there,

00:26:08.590 --> 00:26:10.040
you'll see it turn into a plus equals.

00:26:10.040 --> 00:26:12.000
Maybe you don't see that,
but it's a little bit small,

00:26:12.000 --> 00:26:13.980
but you see that when you
sit in front of the screen.

00:26:13.980 --> 00:26:17.250
And what that means is we're just going
to append the value to the end of the

00:26:17.330 --> 00:26:19.290
value that was defined by the target.

00:26:19.840 --> 00:26:20.270
Okay, great.

00:26:20.270 --> 00:26:22.160
So now we have the development
build style set up.

00:26:22.160 --> 00:26:24.620
Let's go ahead and create
a deployment build style.

00:26:24.620 --> 00:26:26.570
And to start off,
we're just going to select

00:26:26.570 --> 00:26:27.860
all these settings here.

00:26:27.860 --> 00:26:31.440
Just select them both,
and we're just going to copy them.

00:26:31.440 --> 00:26:34.300
So you can actually copy and
paste these settings between

00:26:34.380 --> 00:26:35.990
the different build styles.

00:26:35.990 --> 00:26:38.520
Let's go ahead and create a new
build style called deployment.

00:26:42.520 --> 00:26:43.340
Actually, I take that back.

00:26:43.340 --> 00:26:46.940
Let's call that Save as TIFF because
we imported the libTIFF library.

00:26:46.940 --> 00:26:50.870
And so one of the things we want
to demonstrate here is defining a

00:26:50.950 --> 00:26:55.320
preprocessor macro that causes the
source code to use the TIFF library.

00:26:55.510 --> 00:26:58.600
I've actually modified this
Super Snapshot project to do that.

00:26:58.730 --> 00:27:02.970
So let's go ahead and paste in the
settings from the other build style.

00:27:06.020 --> 00:27:09.960
And all we want to do now is just
add to the value of other C flags,

00:27:10.280 --> 00:27:13.700
dash capital D, save as tiff.

00:27:19.310 --> 00:27:24.250
Okay, so now we have defined
our two build styles.

00:27:24.300 --> 00:27:28.150
We can see that they showed up in
the pop-up menu up in the toolbar.

00:27:28.150 --> 00:27:30.580
So we can set which one is active.

00:27:30.580 --> 00:27:35.380
So let's go ahead and set the
development one to be active.

00:27:35.380 --> 00:27:42.100
Go ahead and go to the files menu or
files tab and click on supersnapchat.c.

00:27:42.100 --> 00:27:45.420
So this is the file in which
we've added some pound if defs

00:27:45.420 --> 00:27:47.450
for save as tiff and for debug.

00:27:47.800 --> 00:27:49.280
So debug causes it to print
out some of the files.

00:27:49.330 --> 00:27:52.790
Save as tiff causes it to use the
tiff library when you choose save.

00:27:52.790 --> 00:28:00.250
Let's go ahead and just save this file,
make sure it's dirty, and hit build.

00:28:03.270 --> 00:28:06.170
So now we're building using the
development build styles so the debug

00:28:06.170 --> 00:28:08.150
preprocessor macro is in effect.

00:28:08.150 --> 00:28:11.230
And so if you run this,
and if we choose Save,

00:28:11.370 --> 00:28:13.950
then we should see some debug output.

00:28:21.170 --> 00:28:23.340
So just go ahead and save that.

00:28:23.350 --> 00:28:25.040
And we see that it's writing a pic file.

00:28:25.060 --> 00:28:25.610
OK, great.

00:28:25.820 --> 00:28:26.640
So let's quit that.

00:28:26.670 --> 00:28:30.350
And then we're going to go ahead and
choose the other active-- the other

00:28:30.350 --> 00:28:32.810
build style from the pop-up menu.

00:28:32.930 --> 00:28:37.330
So now we want to build this using the
algorithm that uses the lib tiff library.

00:28:37.410 --> 00:28:39.770
So we just go ahead and build again.

00:28:47.500 --> 00:28:48.500
Okay.

00:28:48.500 --> 00:28:53.990
So it looks like this machine is
not configured exactly the way

00:28:53.990 --> 00:28:55.120
the other one was configured.

00:28:59.850 --> 00:29:03.140
Okay, we can either spend a lot of
time and install libraries here,

00:29:03.140 --> 00:29:04.740
or we can say, trust us.

00:29:04.740 --> 00:29:10.280
So you see the, if not defined,
save as TIFF there.

00:29:10.280 --> 00:29:13.180
What's happening is that we're
apparently using a quick drop call

00:29:13.180 --> 00:29:15.060
that is not in the public headers.

00:29:15.060 --> 00:29:15.870
That's my fault.

00:29:15.900 --> 00:29:21.020
So the point is, though,
that because we got this error this time,

00:29:21.020 --> 00:29:22.920
you're seeing that the different
build styles are in effect.

00:29:23.030 --> 00:29:26.640
And in fact... Right?

00:29:31.390 --> 00:29:32.990
Which was the point of the demo.

00:29:33.030 --> 00:29:36.180
So, successful demo.

00:29:36.180 --> 00:29:41.860
OK, at this point,
I'd like to invite Christian to talk

00:29:41.860 --> 00:29:43.980
some more about the build phases.

00:29:44.030 --> 00:29:45.260
Here you go, Christian.

00:29:45.260 --> 00:29:48.580
Which is another feature
of the build system.

00:29:48.590 --> 00:29:50.370
Can I have slides, please?

00:29:53.300 --> 00:29:56.180
So what I'd like to talk to you a
bit is about how Project Builder

00:29:56.180 --> 00:29:59.700
organizes builds of individual targets
into build phases to make it easy

00:29:59.700 --> 00:30:04.170
to see and modify what's actually
going to happen during a build.

00:30:05.260 --> 00:30:08.020
So they seem a little
bit complicated at first.

00:30:08.020 --> 00:30:10.760
They're pretty simple actually,
though some fairly difficult and

00:30:10.760 --> 00:30:12.700
dangerous things can be done with them.

00:30:12.710 --> 00:30:17.060
Basic idea is that a target is
built in a series of phases that

00:30:17.070 --> 00:30:18.920
do happen one after the other.

00:30:19.230 --> 00:30:23.340
New phases can be added or deleted
to tune exactly what's gonna

00:30:23.340 --> 00:30:25.280
happen during a project build.

00:30:25.280 --> 00:30:27.890
New files,
when they're added to a project,

00:30:28.000 --> 00:30:30.300
to a target, get added to the correct
phase automatically.

00:30:30.360 --> 00:30:33.840
So phases don't, you don't need to be
conscious of them normally.

00:30:33.840 --> 00:30:36.050
You can just see your files
where you expect them and if you

00:30:36.050 --> 00:30:38.200
need to tune a build process,
you can go and touch

00:30:38.200 --> 00:30:39.580
them in their phases.

00:30:39.610 --> 00:30:43.980
So files can be added to or
removed from individual phases,

00:30:43.980 --> 00:30:47.780
moved between phases,
or within a phase to different locations.

00:30:47.780 --> 00:30:51.220
So the files will be processed in
the order they appear in that phase,

00:30:51.220 --> 00:30:54.350
as well as the phases
themselves happening in order.

00:30:56.360 --> 00:30:59.960
So standard build phases that you see
in target templates or in distributed

00:30:59.960 --> 00:31:03.070
examples are a headers build phase,
which is used for copying

00:31:03.070 --> 00:31:05.800
headers that are part of a
distributed project into place.

00:31:05.880 --> 00:31:07.920
Currently,
some extra work is done during headers

00:31:07.960 --> 00:31:10.890
build phase to make sure that those
headers are available to other targets

00:31:10.890 --> 00:31:13.820
that you might be building or other
targets in other projects that you

00:31:13.980 --> 00:31:15.490
might be building simultaneously.

00:31:15.600 --> 00:31:19.010
Next is the bundle resources phase.

00:31:19.080 --> 00:31:21.320
In this phase,
all of your bundle resource

00:31:21.320 --> 00:31:24.800
files get copied into their
appropriate localized locations,

00:31:24.800 --> 00:31:28.360
as well as files that Project Builder
is responsible for generating,

00:31:28.480 --> 00:31:31.690
such as the Info.plist property
settings file and the package

00:31:31.690 --> 00:31:34.370
info file that goes in the bundle,
all get generated and copied

00:31:34.370 --> 00:31:35.790
into place during this phase.

00:31:37.350 --> 00:31:39.700
During the sources phase is where
the bulk of the work happens.

00:31:39.700 --> 00:31:43.680
This is where new sources are derived
from given source derivation and all

00:31:43.680 --> 00:31:47.400
your sources that are already present
and the derived sources actually

00:31:47.620 --> 00:31:49.990
get compiled and put in order.

00:31:50.610 --> 00:31:54.590
Then during the Java Archive phase,
a hierarchy is constructed,

00:31:54.590 --> 00:31:56.960
which has all of your compiled
class files as well as extra

00:31:57.020 --> 00:32:00.500
resources that need to be in any
Java archives that get constructed.

00:32:00.500 --> 00:32:04.050
Following that is a Frameworks
and Libraries phase.

00:32:04.050 --> 00:32:07.720
This is where the libraries
that actually get linked to by a

00:32:07.790 --> 00:32:11.200
product actually are all listed,
and this phase actually

00:32:11.200 --> 00:32:12.880
builds the final executable.

00:32:13.850 --> 00:32:17.420
Finally, the Resource Manager phase will
actually go and add resource

00:32:17.500 --> 00:32:24.800
manager resources to a product,
potentially on a resource fork.

00:32:24.880 --> 00:32:28.460
So that's a good basis to start with,
but it's often not enough.

00:32:28.640 --> 00:32:30.630
There are a bunch of custom phases
that can allow you to tune the

00:32:30.760 --> 00:32:34.110
process in a bunch of different ways,
the most basic being

00:32:34.120 --> 00:32:35.720
the copy files phase.

00:32:35.720 --> 00:32:39.600
This allows you to copy special
product contents like readmes

00:32:39.720 --> 00:32:41.500
and other such into a product.

00:32:41.810 --> 00:32:44.650
It also is the primary model that
we use for product inclusion.

00:32:44.660 --> 00:32:46.940
So the way that a product
that includes another product,

00:32:47.070 --> 00:32:52.190
such as an application that has plug-ins,
works is that you add a copy files

00:32:52.190 --> 00:32:56.160
phase that refers to that product
reference in the product section and

00:32:56.160 --> 00:32:58.590
brings it into the actual built product.

00:32:59.630 --> 00:33:01.720
Finally, there's the script phase.

00:33:01.820 --> 00:33:05.700
This is the most general mechanism where,
by default, shell is run,

00:33:05.700 --> 00:33:08.300
but really any utility
can be run during a build.

00:33:08.500 --> 00:33:12.760
So this can be used, by default,
shell is invoked, but C-Shell, Perl,

00:33:12.760 --> 00:33:16.580
AppleScript can all be used to
do various things during a build.

00:33:17.040 --> 00:33:19.090
So those are build phases.

00:33:19.100 --> 00:33:21.600
It might be interesting
to actually see these.

00:33:21.600 --> 00:33:27.170
And if I can get Dave Ewing to help me
work a little more with this project.

00:33:31.110 --> 00:33:33.910
So the first thing that I'd like
to do is show you the actual phases

00:33:33.920 --> 00:33:38.070
that are in this downloaded example.

00:33:38.140 --> 00:33:44.310
You could open up the snapshot target
and go to the files and build phases tab.

00:33:44.510 --> 00:33:45.780
So there they all are.

00:33:45.780 --> 00:33:47.820
One thing about this is
we're not building this with

00:33:47.820 --> 00:33:50.060
a bunch of other targets,
and the header isn't all that

00:33:50.060 --> 00:33:51.480
interesting for the application itself.

00:33:51.660 --> 00:33:55.140
So let's try just deleting
that phase to clarify what's

00:33:55.150 --> 00:33:57.190
happening during the build.

00:33:57.930 --> 00:33:58.740
That's better.

00:33:59.520 --> 00:34:04.310
So, more important is getting
extra stuff into the build.

00:34:04.510 --> 00:34:07.030
Simple thing to start
with first is adding this,

00:34:07.110 --> 00:34:10.420
a readme to this application,
and I think it actually came with

00:34:10.420 --> 00:34:12.470
one that we could add to the project.

00:34:12.560 --> 00:34:14.150
- Okay, well.

00:34:22.300 --> 00:34:31.560
- Level up, oh, there it is.

00:34:32.470 --> 00:34:32.660
And yeah, we're gonna add this to
no target to begin with.

00:34:35.810 --> 00:34:40.130
So what we want is a copy
files phase added to this.

00:34:40.240 --> 00:34:43.360
Easiest thing to do would be to
select the last phase and add a copy

00:34:43.360 --> 00:34:46.000
files phase from the project menu.

00:34:47.110 --> 00:34:50.580
Then drag that readme
into the file section.

00:34:50.580 --> 00:34:52.570
And we'd like to have
this happen every time,

00:34:52.670 --> 00:34:53.910
so copy when installing isn't necessary.

00:34:54.000 --> 00:34:57.000
And that should go into the
wrapper of the application.

00:34:57.000 --> 00:34:59.900
So if someone actually looks
into this built application,

00:34:59.900 --> 00:35:02.990
the first thing they'll see, hopefully,
is this readme.

00:35:03.910 --> 00:35:05.740
Okay,
so there's a simple copy files phase.

00:35:05.740 --> 00:35:07.240
Let's try something a
little bit trickier.

00:35:07.320 --> 00:35:10.020
What might be interesting for this
example is to actually distribute

00:35:10.100 --> 00:35:13.260
this custom TIFF library that
we built so maybe someone else

00:35:13.370 --> 00:35:14.620
can get at saving his TIFF.

00:35:14.800 --> 00:35:19.220
So let's make another copy files phase.

00:35:24.360 --> 00:35:27.510
and drag the lib tiff
product reference into it.

00:35:27.540 --> 00:35:35.320
This isn't really useful to us when we're
just doing normal development builds,

00:35:35.320 --> 00:35:37.380
so we're gonna do this
only when installing,

00:35:37.430 --> 00:35:39.360
and we're gonna give this
an absolute location.

00:35:39.520 --> 00:35:45.180
Because it's a library,
we're gonna put it in user local lib,

00:35:45.320 --> 00:35:47.180
standard library distribution place.

00:35:47.340 --> 00:35:49.170
For a technical issue,
this means we're building a route

00:35:49.330 --> 00:35:51.950
for distribution where we're gonna
have user local lib and slash

00:35:51.950 --> 00:35:56.100
applications rather than just the
drag and drop install application.

00:35:56.780 --> 00:35:59.000
Presumably because we're
including the library,

00:35:59.000 --> 00:36:00.030
it's for developers anyway.

00:36:00.040 --> 00:36:04.040
And actually, it would be nice to have
the readme in any case,

00:36:04.130 --> 00:36:05.740
even if a build fails
partway along the way.

00:36:05.740 --> 00:36:07.860
So why don't you drag that phase
to be the first thing that happens?

00:36:07.860 --> 00:36:09.730
So even if the
compilations don't go well,

00:36:09.730 --> 00:36:12.320
we're going to have a readme
in whatever we end up with.

00:36:12.400 --> 00:36:16.990
So copy files phases are one thing,
but more interesting are these script

00:36:17.130 --> 00:36:18.380
phases that are completely general.

00:36:18.380 --> 00:36:24.960
So let's add one to the
end of the... Actually,

00:36:24.960 --> 00:36:26.590
it's added to the end.

00:36:26.700 --> 00:36:27.780
Thank you.

00:36:30.970 --> 00:36:33.320
We've actually got a few scripts
ready to go and some stickies,

00:36:33.320 --> 00:36:34.220
I think.

00:36:34.290 --> 00:36:37.550
The first one we're going to
put on is an accumulating log,

00:36:37.550 --> 00:36:40.580
which will put in an entry for
any given build that we do,

00:36:40.880 --> 00:36:43.200
saying exactly what got
build and I believe what

00:36:43.340 --> 00:36:45.720
style was used for the build.

00:36:45.720 --> 00:36:47.780
This is going to use shell for this.

00:36:47.780 --> 00:36:49.130
And it's going to run with every build.

00:36:49.140 --> 00:36:52.560
Now let's try something a
little bit trickier even still.

00:36:52.560 --> 00:36:55.530
Add another shell script phase.

00:37:00.720 --> 00:37:03.070
And this one, what we're going to do is,
on the case of install builds,

00:37:03.070 --> 00:37:04.760
when we're doing final
builds for distribution,

00:37:04.760 --> 00:37:07.240
what we'd like to do is see them
in the finder so that we can go

00:37:07.240 --> 00:37:09.590
and immediately check them out and
see what the user would see just

00:37:09.590 --> 00:37:10.900
to make sure that they're right.

00:37:10.960 --> 00:37:14.190
So this is going to use shell to
invoke an Apple script that will

00:37:14.530 --> 00:37:17.880
raise the install builds location
in the finder for us so that we

00:37:17.880 --> 00:37:19.710
can go and take a look at this.

00:37:19.810 --> 00:37:25.430
And because this is really only
interesting when we're doing full builds,

00:37:25.430 --> 00:37:25.430
we're going to make this
happen only when installing.

00:37:27.610 --> 00:37:28.980
So there's a bunch of custom stuff.

00:37:28.980 --> 00:37:35.610
Let's do a normal build in the
PBUI of the application target

00:37:38.390 --> 00:37:39.500
Let's change our build style.

00:37:39.500 --> 00:37:40.500
Oh, right.

00:37:40.500 --> 00:37:42.220
Yeah, you're going to have to change
the build style that works.

00:37:50.850 --> 00:37:52.700
Now if we can show that in the finder.

00:37:52.700 --> 00:37:58.650
So what are we looking for?

00:37:58.690 --> 00:38:00.230
Let's see.

00:38:06.980 --> 00:38:07.890
There they are.

00:38:07.900 --> 00:38:14.320
Oh, there's the build log.

00:38:15.320 --> 00:38:17.300
Oh!

00:38:17.300 --> 00:38:18.300
So we created a build log.

00:38:18.300 --> 00:38:20.340
We did get a build log.

00:38:21.630 --> 00:38:24.600
Interesting.

00:38:24.660 --> 00:38:25.600
That's a start.

00:38:25.820 --> 00:38:28.980
Perhaps more interesting would
be to actually take a look

00:38:29.060 --> 00:38:32.120
at a final deployment build,
which will invoke all

00:38:32.120 --> 00:38:33.090
of these build phases.

00:38:33.100 --> 00:38:34.570
So if you could bring
up the terminal window.

00:38:34.570 --> 00:38:37.720
Ooh, and crank up the font.

00:38:37.780 --> 00:38:39.900
Oh, man.

00:38:43.680 --> 00:38:44.740
Big enough?

00:38:45.110 --> 00:38:45.410
Bigger?

00:38:45.410 --> 00:38:46.260
Big enough?

00:38:46.260 --> 00:38:46.680
There we go.

00:38:46.700 --> 00:38:50.220
All right, enough.

00:38:53.260 --> 00:38:56.660
- And I believe that's
in the project directory,

00:38:56.660 --> 00:39:02.710
so if you do a pbx build install
with dstroot set to slash install,

00:39:02.710 --> 00:39:06.060
slash build, whichever exists.

00:39:10.900 --> 00:39:13.600
So this will do a deployment build
in that slash install location.

00:39:13.600 --> 00:39:17.440
You can see those build phases sort of
happening quickly in the background.

00:39:17.440 --> 00:39:20.480
And the finder did raise
with a copy of our route.

00:39:20.480 --> 00:39:23.390
Inside the applications folder,
you should see the

00:39:23.390 --> 00:39:24.580
actual built application.

00:39:24.600 --> 00:39:28.500
And if you use Control-Click
to look inside that wrapper,

00:39:28.510 --> 00:39:29.750
we should be able to see that.

00:39:29.760 --> 00:39:31.550
Read me.

00:39:31.580 --> 00:39:33.070
There it is.

00:39:39.310 --> 00:39:40.300
and David Farnes.

00:39:40.300 --> 00:39:44.310
With that,
I'm going to turn this over to Dave,

00:39:44.310 --> 00:39:48.380
who's going to show us a bit
about how to do legacy targets.

00:39:51.300 --> 00:39:55.450
Back to the slides.

00:39:55.490 --> 00:39:59.760
OK, well you might wonder why the
Java debugger engineer is talking

00:39:59.760 --> 00:40:04.300
about legacy targets and you know what,
I don't really know.

00:40:04.300 --> 00:40:10.410
But it turns out it's kind of fun
because I get to show you how to

00:40:10.410 --> 00:40:16.190
package your final application
the way we want you to package the

00:40:16.190 --> 00:40:16.190
application and that's in a disk image.

00:40:19.570 --> 00:40:21.300
Okay, Legacy Target.

00:40:21.300 --> 00:40:27.380
Well, the basics of a Legacy Target are
that they are used to invoke

00:40:27.380 --> 00:40:30.370
custom command line tools.

00:40:31.470 --> 00:40:34.660
As Mike said earlier in the talk,
the most common thing you

00:40:34.660 --> 00:40:38.720
would do probably is use it to
call out to make or something,

00:40:38.830 --> 00:40:41.740
maybe for an open source project.

00:40:41.830 --> 00:40:44.240
But there's lots of other
things you can do with it.

00:40:44.240 --> 00:40:47.590
There's lots of other
build tools out there.

00:40:47.740 --> 00:40:50.500
being one of them.

00:40:50.550 --> 00:40:56.300
Well, you can also use them to create,
to generate source files that

00:40:56.300 --> 00:41:00.680
are used in other targets,
or to do some pre or post

00:41:00.680 --> 00:41:02.960
processing on targets.

00:41:04.980 --> 00:41:09.010
and of course you can run anything
from a legacy makefile target,

00:41:09.010 --> 00:41:10.900
so to do just about anything.

00:41:10.900 --> 00:41:14.990
An example of some of those other
things you might want to do well,

00:41:15.070 --> 00:41:15.900
package disk images.

00:41:15.900 --> 00:41:17.900
That's what we're going
to do in this demo.

00:41:17.930 --> 00:41:21.670
You can also do build statistics,
you know,

00:41:21.670 --> 00:41:23.900
log statistics at the end of builds.

00:41:24.080 --> 00:41:28.720
Or send out notifications after a build,
like sending an email

00:41:28.750 --> 00:41:30.880
or something like that.

00:41:34.780 --> 00:41:37.240
Let's see, and with that, actually,
we're going to bring Mike back

00:41:37.240 --> 00:41:40.030
up here and just show this.

00:41:40.240 --> 00:41:45.020
Okay, so we have the demo machine.

00:41:45.020 --> 00:41:45.560
Great.

00:41:51.200 --> 00:41:54.440
Well, the first thing we're going to do
is bring up the shell script that

00:41:54.470 --> 00:41:58.520
we built up for this that does
the creation of the disk image.

00:42:02.070 --> 00:42:04.480
Go ahead and find that out in the
finder and bring it into the target.

00:42:04.480 --> 00:42:07.990
We don't need to add it to any target.

00:42:08.060 --> 00:42:10.940
Bring it into the project,
but don't add it to a target.

00:42:10.940 --> 00:42:14.000
If you take a quick look at that.

00:42:14.000 --> 00:42:16.100
Why don't you close up the panel.

00:42:16.100 --> 00:42:17.250
No?

00:42:17.250 --> 00:42:20.100
So I don't want to go
into detail in here.

00:42:20.100 --> 00:42:22.100
There's a few commands that
are sort of interesting.

00:42:22.100 --> 00:42:25.960
You can find documentation
on the system for,

00:42:26.100 --> 00:42:28.100
with man, I believe.

00:42:28.100 --> 00:42:28.580
Man pages.

00:42:29.030 --> 00:42:31.500
But HDI Util and HDID.

00:42:31.500 --> 00:42:36.210
And there's also makefs underscore
HFS that actually creates the

00:42:36.210 --> 00:42:38.970
HFS volume inside of the disk image.

00:42:39.040 --> 00:42:42.250
There's an article on how to do
a lot of this stuff on Stepwise,

00:42:42.250 --> 00:42:43.500
which I recommend.

00:42:48.470 --> 00:42:53.470
OK, so let's go ahead and
create a new target,

00:42:53.590 --> 00:42:55.750
a legacy makefile target.

00:42:59.800 --> 00:43:02.560
and we'll give it a nice name
so that we know what it is.

00:43:02.560 --> 00:43:06.800
And let's go ahead and
put this at the top.

00:43:06.800 --> 00:43:10.780
This is actually going to be the main
target for the project because it does

00:43:10.840 --> 00:43:15.030
the final processing that's involved
in building this little demo here.

00:43:15.390 --> 00:43:21.110
And go ahead and make the
other targets depend on it.

00:43:21.280 --> 00:43:21.300
So.

00:43:21.770 --> 00:43:25.560
So now when we actually
build that target,

00:43:25.560 --> 00:43:28.960
it'll make sure all the other
targets are built first.

00:43:29.680 --> 00:43:32.320
Okay, well now let's do the real work.

00:43:32.470 --> 00:43:34.600
Actually,
the real work was in the shell script.

00:43:34.600 --> 00:43:38.870
So let's change the build tool
here to actually be bin SH so

00:43:38.870 --> 00:43:40.710
that it does run a shell script.

00:43:40.710 --> 00:43:43.820
And we'll go over to our stickies
and drag in the command line.

00:43:43.820 --> 00:43:45.230
Well, we're copying and pasting it.

00:43:47.920 --> 00:43:50.720
And this command line,
all it does is it's creating

00:43:50.790 --> 00:43:52.310
an 8 megabyte disk image.

00:43:52.570 --> 00:43:54.840
I was a little lazy
writing the shell script,

00:43:54.840 --> 00:43:57.550
so I didn't actually compute
how much space it would take.

00:43:57.610 --> 00:44:01.230
And it's going to name the
disk image snapshot and copy

00:44:01.230 --> 00:44:03.340
in the application itself.

00:44:03.340 --> 00:44:05.890
So I think that's it.

00:44:06.020 --> 00:44:08.160
Shall we build it?

00:44:08.220 --> 00:44:09.380
Let's build it.

00:44:12.900 --> 00:44:15.900
You'll see down here that it's actually
echoing some stuff about what it's

00:44:15.900 --> 00:44:18.720
doing to create this disk image.

00:44:21.910 --> 00:44:37.730
Copy files.

00:44:37.730 --> 00:44:37.730
It actually compresses
the disk image too,

00:44:37.730 --> 00:44:37.730
so you don't really have to worry about
creating a disk image that's too large.

00:44:37.730 --> 00:44:37.730
Because the final disk
image will be quite small.

00:44:37.730 --> 00:44:37.730
So we'll go actually to
the project directory.

00:44:40.070 --> 00:44:42.800
Because that's where we
decided to put the disk image.

00:44:42.840 --> 00:44:47.000
And there should be snapshot.dmd.

00:44:47.000 --> 00:44:48.950
And double click on it.

00:44:50.030 --> 00:44:52.240
and it's mounting in disk copy.

00:44:52.250 --> 00:44:53.080
No surprises there.

00:44:53.080 --> 00:44:55.940
And look, there we have a disk image and
an application inside it that

00:44:55.940 --> 00:44:58.190
you can just launch and run.

00:45:03.100 --> 00:45:06.630
And with that, back to Mike.

00:45:06.660 --> 00:45:08.770
OK.

00:45:08.850 --> 00:45:12.500
So let's have the slides
back for a moment here.

00:45:18.630 --> 00:45:22.500
All right,
so we've covered a few things today.

00:45:22.500 --> 00:45:24.000
And I just want to sum up.

00:45:24.000 --> 00:45:27.840
Basically,
Project Builder provides a number of

00:45:27.840 --> 00:45:32.140
ways to import code into Project Builder
so that you can begin using it.

00:45:32.140 --> 00:45:35.100
If you already have an existing
project in Code Warrior or

00:45:35.100 --> 00:45:38.480
in the old Project Builder,
you can bring those in directly.

00:45:38.490 --> 00:45:40.750
And as we saw,
it's pretty easy just to import

00:45:40.750 --> 00:45:46.050
a whole lot of source code
that you got from wherever.

00:45:47.000 --> 00:45:49.680
You know, the build system,
we've tried to make it flexible.

00:45:49.850 --> 00:45:58.110
We've tried to give you all ways to
customize the build process to do things

00:45:58.120 --> 00:46:02.260
that we didn't necessarily anticipate
and to give you basically ways to solve

00:46:02.260 --> 00:46:04.920
problems that we haven't solved yet.

00:46:05.260 --> 00:46:07.180
Now, this is not to say that
we're not planning on solving

00:46:07.180 --> 00:46:08.120
a lot of these problems.

00:46:08.120 --> 00:46:10.160
Eventually,
it'd be nice if you didn't have

00:46:10.160 --> 00:46:13.170
to write some gnarly shell script
and set up all this legacy target

00:46:13.170 --> 00:46:15.580
just to build a disk image,
and I think we can expect to

00:46:15.580 --> 00:46:18.180
see Project Builder do a lot of
these things more automatically.

00:46:18.230 --> 00:46:22.130
The point is that until we
get around to doing this,

00:46:22.130 --> 00:46:24.340
you're not totally stuck.

00:46:24.400 --> 00:46:27.520
So, that was the main point
of the session today.

00:46:27.520 --> 00:46:32.890
And at this point,
I'll ask Godfrey to come back on stage.

00:46:32.900 --> 00:46:35.220
And we'll go through a couple of these.

00:46:35.260 --> 00:46:38.510
These info slides and have a little Q&A.

00:46:38.520 --> 00:46:42.200
Thank you, Mike.

00:46:47.640 --> 00:46:48.560
Pretty amazing stuff.

00:46:48.560 --> 00:46:53.120
I think we're going to get a lot of use
out of Project Builder with you guys.

00:46:53.280 --> 00:46:54.470
Can we have the house lights up?

00:46:54.610 --> 00:46:59.150
We're going to start a little Q&A session
while I talk over the information slides.

00:46:59.210 --> 00:47:02.280
These are our information addresses.

00:47:02.280 --> 00:47:04.730
The top one is our tools page.

00:47:04.800 --> 00:47:07.960
We list all Mac OS X tools
available there.

00:47:07.960 --> 00:47:10.620
We have a special page
for Project Builder.

00:47:10.670 --> 00:47:13.910
Project Builder pages include updates.

00:47:14.000 --> 00:47:16.680
So as new things happen,
as new details occur,

00:47:16.680 --> 00:47:21.240
as press events and other
things come to the public,

00:47:21.380 --> 00:47:22.980
we put them onto that page.

00:47:23.020 --> 00:47:25.880
We also have a series of
mailing lists that we host.

00:47:25.910 --> 00:47:29.410
The URL there is the
master mailing list page.

00:47:29.480 --> 00:47:34.810
And the three Project Builder users,
Cocoa Developer and Carbon Developer,

00:47:34.810 --> 00:47:37.680
are mailing lists that are in
heavy use by our community.

00:47:37.720 --> 00:47:40.670
Can we have all the
Q&A presenters up on stage,

00:47:40.670 --> 00:47:41.480
please?

00:47:45.530 --> 00:47:48.190
This is the roadmap for sessions
through the rest of the week.

00:47:48.330 --> 00:47:51.470
Starting at 10:30,
we're talking about Java development

00:47:51.470 --> 00:47:52.900
tools over in room A1.

00:47:53.040 --> 00:47:55.740
And tomorrow,
we do compiler technologies and

00:47:55.740 --> 00:47:58.290
Apple performances tools in this room.

00:47:58.350 --> 00:48:00.600
I hope to see a lot of you there again.

00:48:00.660 --> 00:48:03.350
And then through the week,
debugging on Mac OS X Friday morning,

00:48:03.350 --> 00:48:04.200
very important.

00:48:04.200 --> 00:48:08.300
Our C++ frameworks group and
our feedback forum on Friday.

00:48:08.410 --> 00:48:10.610
Hope to see a lot of you there.

00:48:10.970 --> 00:48:14.210
And if you need to contact
me or the engineering team,

00:48:14.210 --> 00:48:15.100
here's two addresses.

00:48:15.190 --> 00:48:18.740
My address, I'm the technology manager
for development tools.

00:48:19.220 --> 00:48:21.320
Always interested to hear your feedback,
always interested to

00:48:21.360 --> 00:48:23.940
hear what your needs are,
what your product needs might be

00:48:24.060 --> 00:48:26.100
that need interaction with the team.

00:48:26.100 --> 00:48:30.320
And the Mac OS X tools feedback
mailing list is a place where you

00:48:30.320 --> 00:48:35.300
can send product enhancement ideas,
general questions that you want to

00:48:35.300 --> 00:48:37.940
go to the engineering team itself.