WEBVTT

00:00:07.340 --> 00:00:10.400
We've all had a good nap,
and you're ready to learn about

00:00:11.980 --> 00:00:14.750
the great new features we've
added to the Window Manager and

00:00:14.750 --> 00:00:20.160
the Menu Manager to make your
applications look great on Mac OS X.

00:00:20.960 --> 00:00:24.930
And to introduce you to
all that groovy new stuff,

00:00:24.930 --> 00:00:27.840
let me bring out the manager
of the High Level Toolbox team,

00:00:27.950 --> 00:00:29.820
Ed Voas.

00:00:42.630 --> 00:00:45.050
Alright, so the Window and Menu Managers
are actually pretty important

00:00:45.050 --> 00:00:47.300
to every Carbon application.

00:00:47.300 --> 00:00:49.300
You need windows, you need menus.

00:00:49.300 --> 00:00:52.300
So, what we're planning to do in this
session is kind of lead you through

00:00:52.300 --> 00:00:54.750
an overview of all the different
things that we've added to the

00:00:54.850 --> 00:00:57.300
Carbon Window and Menu Managers.

00:00:57.300 --> 00:01:00.370
Here's a list on this slide,
but we're going to hit each

00:01:00.370 --> 00:01:02.300
one of the points individually.

00:01:02.560 --> 00:01:04.160
First, sheets.

00:01:04.240 --> 00:01:07.880
Sheets are one of the most
visible features of Aqua,

00:01:07.980 --> 00:01:10.400
and one of those features which
you actually need to adopt.

00:01:10.400 --> 00:01:12.700
It doesn't come for free.

00:01:13.180 --> 00:01:17.100
The whole point of a sheet is to
provide a document model experience.

00:01:17.100 --> 00:01:20.580
This means that the sheet
makes the document that the

00:01:20.580 --> 00:01:22.490
sheet is bound to go modal.

00:01:22.580 --> 00:01:24.700
The user can't interact with
the document any longer,

00:01:24.700 --> 00:01:26.940
they must interact
with the sheet instead,

00:01:27.050 --> 00:01:30.660
but the user can still
deal with other documents,

00:01:30.720 --> 00:01:35.490
other windows, and the rest of your
application in general.

00:01:37.200 --> 00:01:40.600
To get sheets the easy way,
we have a few APIs.

00:01:40.680 --> 00:01:43.060
The first is called
Create Standard Sheet.

00:01:43.060 --> 00:01:46.100
And if you're familiar with
Standard Alert or Create Standard Alert,

00:01:46.220 --> 00:01:50.340
this is the equivalent
in the world of sheets.

00:01:51.240 --> 00:01:55.030
You can also get sheets for free through
Navigation Services and Print Panels

00:01:55.100 --> 00:01:59.930
by passing the appropriate parameters
to the calls in those two components.

00:02:00.430 --> 00:02:03.000
Or you can create sheets yourself.

00:02:03.060 --> 00:02:06.480
To do that, you have to create a window
of KSheetWindowClass.

00:02:06.490 --> 00:02:10.210
And this is actually enforced
by the Window Manager.

00:02:11.630 --> 00:02:13.870
Once you have this sheet,
you should install the

00:02:13.870 --> 00:02:18.270
Carbon Event Handler to handle the
K event window draw content event.

00:02:18.330 --> 00:02:21.460
This is important because we
actually need to render the content

00:02:21.570 --> 00:02:25.230
before we put the sheet on screen
because we need to do the animation.

00:02:25.300 --> 00:02:28.760
So all the bits need to be in place
before we can run that animation.

00:02:28.910 --> 00:02:31.690
So it's important to
install that handler.

00:02:32.290 --> 00:02:35.660
Once you have your sheet and
you've installed your handler,

00:02:35.770 --> 00:02:37.590
you probably want to see it on screen.

00:02:37.670 --> 00:02:41.540
And the easy way to do that is
just call Show Sheet Window.

00:02:42.200 --> 00:02:44.790
And that API basically takes
the parent window that you

00:02:44.800 --> 00:02:48.690
want to bind the sheet to,
and when you call this function,

00:02:48.790 --> 00:02:51.070
we do the animation,
we make the sheet appear,

00:02:51.070 --> 00:02:56.100
and the Carbon Event Model then knows,
oh, we're in a document modal situation,

00:02:56.100 --> 00:02:58.930
and it knows how to deal
with clicks appropriately.

00:02:59.110 --> 00:03:02.000
Once you're done with the sheet,
the user has interacted with it,

00:03:02.000 --> 00:03:03.460
we call it Hide Sheet Window.

00:03:03.460 --> 00:03:06.580
We will do the inverse animation,
make the sheet kind of get sucked

00:03:06.650 --> 00:03:09.950
back up into the title bar,
and then you have to remember

00:03:10.040 --> 00:03:12.970
that once you've hidden it,
it's just hidden, it still exists,

00:03:12.970 --> 00:03:14.990
you still need to dispose that window.

00:03:17.160 --> 00:03:20.740
Transparent sheets are actually part
of the Human Interface Guidelines.

00:03:20.810 --> 00:03:23.500
You're actually supposed to
be able to see through sheets.

00:03:23.570 --> 00:03:26.800
Now that's supported in Cocoa in
the first release of Mac OS X,

00:03:26.800 --> 00:03:30.280
but not in Carbon,
but it is something we're working on.

00:03:31.020 --> 00:03:35.490
And I'm just making you aware of
this because there's a few rules

00:03:35.490 --> 00:03:39.460
that you should follow in order
for us to try to turn this feature

00:03:39.470 --> 00:03:42.090
on for free in most situations.

00:03:42.880 --> 00:03:47.610
In general, you will probably need to
switch this on manually.

00:03:47.820 --> 00:03:51.140
However,
for APIs like Create Standard Sheet,

00:03:51.250 --> 00:03:54.040
we want to be able to turn this
on and just have it work for free,

00:03:54.040 --> 00:03:55.040
so you don't have to do anything.

00:03:55.040 --> 00:03:57.960
You get all the benefits
of transparent sheets.

00:03:58.800 --> 00:04:00.540
In order to do that,
we actually have to make

00:04:00.650 --> 00:04:02.790
changes to the Control Manager.

00:04:02.790 --> 00:04:05.820
As you know, the Control Manager likes
to erase behind controls.

00:04:05.890 --> 00:04:08.270
And this presents problems
because when we erase,

00:04:08.420 --> 00:04:11.680
we use Quick Draw,
and Quick Draw does not deal with alpha,

00:04:11.680 --> 00:04:13.690
and transparency means alpha.

00:04:13.700 --> 00:04:18.210
So we did have to make
some changes there.

00:04:19.290 --> 00:04:23.000
So the goal is that
Create Standard Sheet will just work.

00:04:23.060 --> 00:04:27.200
However, Create Standard Sheet actually
returns the dialog ref to you.

00:04:27.270 --> 00:04:29.880
And at that point,
you can actually take that dialog

00:04:29.960 --> 00:04:32.830
ref and start inserting dialog items.

00:04:34.210 --> 00:04:37.930
So, that may actually work against
the goal of us being able

00:04:37.940 --> 00:04:39.700
to turn it on automatically.

00:04:39.790 --> 00:04:42.820
So what we ask is that if
you are going to do that,

00:04:42.820 --> 00:04:46.590
make sure you add standard controls,
because all of the standard

00:04:47.570 --> 00:04:50.190
controls that are supplied by the
toolbox will automatically work in

00:04:50.190 --> 00:04:53.040
this new transparent sheet mode.

00:04:54.170 --> 00:04:57.440
And if you're running custom controls,
be aware that because

00:04:57.440 --> 00:04:59.940
sheets are transparent,
alpha, that whole thing,

00:05:00.180 --> 00:05:04.360
you will have to actually render
your controls with core graphics,

00:05:04.420 --> 00:05:07.280
Quartz, and not Quick Draw.

00:05:09.540 --> 00:05:14.720
So, historically,
we've supported three types of an alert:

00:05:14.800 --> 00:05:18.670
the Note, the Caution,
and the Stop Alert.

00:05:20.590 --> 00:05:25.440
You'll notice on Mac OS X that
when you call these APIs or

00:05:25.440 --> 00:05:29.900
specify these types of alerts,
you actually don't see the correct icon.

00:05:30.860 --> 00:05:33.050
At the very least,
you should see the caution icon,

00:05:33.060 --> 00:05:35.980
because that's part of our
human interface guidelines.

00:05:36.210 --> 00:05:38.700
We are working on fixing that
and doing the right thing.

00:05:38.870 --> 00:05:42.840
So it's important for your
applications to not try to

00:05:42.840 --> 00:05:44.750
replace the icon yourselves.

00:05:44.970 --> 00:05:47.590
Just keep using the constants as
you always have and we'll do the

00:05:47.600 --> 00:05:50.140
right thing in a future release.

00:05:52.920 --> 00:05:56.780
Window groups are a brand new
feature to the Window Manager.

00:05:56.800 --> 00:06:01.680
Historically,
people have done many evil things with

00:06:01.680 --> 00:06:04.720
the Window Manager by manipulating
the window list themselves,

00:06:04.750 --> 00:06:10.010
doing things that would
probably scare your grandmother.

00:06:10.280 --> 00:06:13.990
The problem with that isn't that
they were really doing anything evil.

00:06:14.120 --> 00:06:17.960
The problem was that the toolbox
couldn't actually rely on what

00:06:17.960 --> 00:06:21.710
it thought the correct state was.

00:06:21.970 --> 00:06:26.360
In Carbon, we actually want to be able to
have both the toolbox and your

00:06:26.380 --> 00:06:31.300
application play in the same sandbox
and always know the correct state.

00:06:31.370 --> 00:06:35.200
So it allows you to actually
change window layering.

00:06:35.320 --> 00:06:39.370
It also allows you to change the
way you do window activation.

00:06:39.370 --> 00:06:39.370
But...

00:06:39.510 --> 00:06:42.070
The most important thing is that
the toolbox is still in the loop,

00:06:42.070 --> 00:06:44.890
and we can continue
to do the right thing.

00:06:44.990 --> 00:06:50.850
For example, if you click on an
application's icon in the dock,

00:06:51.170 --> 00:06:54.090
up comes a pop-up menu,
and in that pop-up menu is a

00:06:54.090 --> 00:06:55.740
list of all the document windows.

00:06:55.840 --> 00:06:59.360
Well, we need to be able to just call
Select Window on that window,

00:06:59.390 --> 00:07:00.550
or Activate Window.

00:07:00.810 --> 00:07:06.360
and have it actually do something correct
that your application can deal with,

00:07:06.410 --> 00:07:08.890
and we don't trip up your application.

00:07:11.310 --> 00:07:13.940
So one of the most common uses
for window groups is to actually

00:07:13.940 --> 00:07:16.840
move windows between groups.

00:07:16.880 --> 00:07:19.720
And in some sense, you can actually think
of groups as layers.

00:07:19.850 --> 00:07:23.400
So we have a document layer,
we have a floating window layer,

00:07:23.450 --> 00:07:25.790
and we have like a modal layer.

00:07:26.880 --> 00:07:31.130
There are times when applications want to
take a document window and make it float,

00:07:31.130 --> 00:07:34.770
or make a floating window not float.

00:07:34.800 --> 00:07:37.800
And you can do that through
the Window Group API.

00:07:40.000 --> 00:07:43.240
Actually, if you were here yesterday
for the Carbon Event talk,

00:07:43.240 --> 00:07:45.120
we showed an application called Magnify.

00:07:45.230 --> 00:07:50.320
And part of the preferences there was a
checkbox to allow the window to actually

00:07:50.770 --> 00:07:54.530
float above all windows or just be a
floating window in that application.

00:07:54.560 --> 00:07:58.110
And the way that we actually make
that switch is through window groups.

00:07:59.340 --> 00:08:02.480
So that's one aspect of it.

00:08:02.520 --> 00:08:05.700
The other aspect is
the activation aspect.

00:08:05.700 --> 00:08:09.320
There are actually times in
certain applications where they

00:08:09.320 --> 00:08:14.080
want to make a window active,
and that window is not

00:08:14.080 --> 00:08:16.280
the frontmost window.

00:08:17.460 --> 00:08:19.740
To accommodate this,
we've implemented a new

00:08:19.830 --> 00:08:21.690
API called ActivateWindow.

00:08:21.930 --> 00:08:25.660
This basically does the
mechanics of SelectWindow,

00:08:26.060 --> 00:08:29.090
and that it actually posts an
Activate event to the window,

00:08:29.100 --> 00:08:31.640
but it doesn't actually
change its Z order.

00:08:31.730 --> 00:08:34.270
So it'll deactivate whatever the
currently active window is and make

00:08:34.270 --> 00:08:37.250
the window that you specify active.

00:08:37.340 --> 00:08:41.640
To go along with that,
we have ActiveNonFloatingWindow.

00:08:41.650 --> 00:08:44.060
This is what you should
probably use in place of

00:08:44.180 --> 00:08:46.640
FrontNonFloatingWindow or FrontWindow.

00:08:49.730 --> 00:08:55.400
In fact, it's actually a bad thing to
just use Front Window at all,

00:08:55.440 --> 00:08:57.480
unless you really,
really know what you're doing and you

00:08:57.480 --> 00:08:58.710
know how to walk through the window list.

00:08:58.910 --> 00:09:02.600
There may be times when the system
has windows in your window list,

00:09:02.660 --> 00:09:05.240
like for example,
an input method has a window up.

00:09:05.280 --> 00:09:07.310
And if you call Front Window,
you're not going to get

00:09:07.310 --> 00:09:09.630
your document window,
you're going to end up getting

00:09:09.680 --> 00:09:10.960
the input method window.

00:09:11.010 --> 00:09:14.830
So you need to be able to code
in such a way that you can

00:09:14.830 --> 00:09:17.240
deal with these situations.

00:09:20.620 --> 00:09:24.490
One of the best parts about window
groups is that you can create your own.

00:09:24.490 --> 00:09:28.270
You can create your own group,
put your windows in it,

00:09:28.370 --> 00:09:30.580
and then you can actually do
interesting things like make them

00:09:30.580 --> 00:09:32.490
move together or Z-order together.

00:09:32.500 --> 00:09:35.500
So treat them almost as one window.

00:09:35.500 --> 00:09:36.500
Sheets actually use this.

00:09:36.500 --> 00:09:39.450
So when the sheet is bound
to its document window,

00:09:39.560 --> 00:09:42.440
it creates a window group,
and then that pairing

00:09:42.440 --> 00:09:44.430
of windows acts as one.

00:09:44.600 --> 00:09:46.960
When you move the parent,
the sheet moves with it.

00:09:46.960 --> 00:09:48.920
When you click on one
or the other window,

00:09:48.920 --> 00:09:51.410
they both come forward
or they both go backward.

00:09:53.680 --> 00:09:59.030
Overlay windows are our solution to
allow you to actually draw on the screen.

00:10:00.120 --> 00:10:02.240
But you're really not
drawing on the screen.

00:10:02.340 --> 00:10:06.640
What you're drawing into is a transparent
window at a very high window level,

00:10:06.750 --> 00:10:11.710
meaning that it is above the
menu bar and above the dock.

00:10:12.820 --> 00:10:13.660
Now, this is really cool.

00:10:13.740 --> 00:10:14.690
I could draw all over the screen.

00:10:14.800 --> 00:10:15.300
That's great.

00:10:15.490 --> 00:10:19.290
But it does have its implications.

00:10:19.290 --> 00:10:19.290
For one,

00:10:19.790 --> 00:10:24.510
A window that is the size of
the screen at 32-bit on a 10x7

00:10:24.650 --> 00:10:26.740
display is going to take 3 meg.

00:10:26.840 --> 00:10:29.840
Just because you can't see it
doesn't mean it doesn't exist.

00:10:29.980 --> 00:10:32.810
We actually have a back buffer for it.

00:10:34.570 --> 00:10:36.670
So it's important to actually
size your windows appropriately

00:10:36.750 --> 00:10:39.360
for whatever you're doing.

00:10:39.360 --> 00:10:42.060
It also requires core
graphics to do your drawing.

00:10:42.060 --> 00:10:45.600
Again, Quick Draw doesn't deal
well with an alpha channel,

00:10:45.620 --> 00:10:47.740
so you have to use CG.

00:10:48.500 --> 00:10:52.580
And the last thing is it can have
nasty effects on classic windows.

00:10:52.720 --> 00:10:55.250
Classic windows are what
we term non-retained.

00:10:55.590 --> 00:10:57.490
There is no back buffer for them.

00:10:57.490 --> 00:10:59.400
If something obscures it, it's

00:10:59.900 --> 00:11:18.000
[Transcript missing]

00:11:21.130 --> 00:11:26.000
One thing that we've added is the
concept of automatic window positioning.

00:11:26.130 --> 00:11:30.820
Whenever the monitor size changes,
or a monitor size changes,

00:11:30.820 --> 00:11:35.780
or maybe the dock appears
because you have it on,

00:11:35.780 --> 00:11:37.530
you know,
you turn it on so you want it to show up,

00:11:37.550 --> 00:11:40.720
or you've resized the dock,
we will actually go and move

00:11:40.720 --> 00:11:44.610
windows around if their title
bars have become obscured.

00:11:46.870 --> 00:11:49.110
Now,
sometimes you don't want that to happen,

00:11:49.230 --> 00:11:51.300
and you can actually override that.

00:11:51.300 --> 00:11:55.290
We send out a K event window
constraint event to all windows

00:11:55.490 --> 00:11:56.800
when we're about to do this.

00:11:57.010 --> 00:12:00.240
And you can intercept that event by
installing a Carbon Event Handler on the

00:12:00.440 --> 00:12:03.740
window and just return no error saying,
"Oh no, don't do anything.

00:12:03.810 --> 00:12:06.630
I handled this, even though you really
didn't do anything."

00:12:08.700 --> 00:12:12.290
And with the advent of the Dock,
it's a little tougher to actually find

00:12:12.290 --> 00:12:14.820
out where you can put your windows.

00:12:14.910 --> 00:12:17.190
It used to be,
if you were on the main monitor,

00:12:17.280 --> 00:12:19.100
you'd say, "Alright,
I'll subtract out the menu bar height

00:12:19.100 --> 00:12:20.920
from the top." But now we have this Dock.

00:12:21.040 --> 00:12:21.700
How big is that?

00:12:21.920 --> 00:12:24.400
How do I, uh, you know,
how do I subtract its height?

00:12:24.470 --> 00:12:26.600
Where do I get the Dock rectangle?

00:12:26.650 --> 00:12:27.960
Well, you can't.

00:12:28.040 --> 00:12:31.890
But what you can do is called
Get Available Window Positioning Bounds.

00:12:32.030 --> 00:12:34.580
This is a new API that we've added.

00:12:34.670 --> 00:12:37.420
For any monitor,
for any G device that you hand it,

00:12:37.620 --> 00:12:41.230
it will hand you back a rectangle,
which is the legal space

00:12:41.230 --> 00:12:43.150
that a window can live in.

00:12:43.190 --> 00:12:45.460
So it's important to start using that.

00:12:46.150 --> 00:12:50.990
Some of the APIs that we have actually
already take the dock into consideration.

00:12:51.100 --> 00:12:55.840
So for example,
resize window or zoom window.

00:12:55.840 --> 00:12:57.940
So you don't need to deal
with it in that situation.

00:12:57.980 --> 00:13:00.330
We'll automatically handle it for you.

00:13:01.630 --> 00:13:03.990
The Window Menu is something new,
and it's completely

00:13:03.990 --> 00:13:05.500
supported by the Toolbox.

00:13:05.500 --> 00:13:10.390
It automatically tracks
Document Class windows.

00:13:10.990 --> 00:13:14.840
And you add it to your menu bar by
calling Create Standard Window Menu.

00:13:14.870 --> 00:13:15.970
It hands you back a menu.

00:13:16.030 --> 00:13:19.920
You then take the menu and insert
it into the menu bar yourself.

00:13:20.250 --> 00:13:25.560
The reason that we don't insert it
for you is you might have different

00:13:25.890 --> 00:13:31.460
requirements for where it lives
with your particular menu bar.

00:13:32.740 --> 00:13:36.750
All the menu items in the standard menu
are handled automatically by the toolbox,

00:13:36.870 --> 00:13:40.970
but you can actually add items to this
menu and not affect the menu adversely.

00:13:41.030 --> 00:13:44.280
We drive it completely by menu commands,
so as long as you don't

00:13:44.280 --> 00:13:48.050
steal our commands,
we'll just handle it for you.

00:13:48.140 --> 00:13:53.130
You can add your own commands,
maybe you want to add a menu item to do

00:13:53.130 --> 00:13:56.400
tiling or stacking or whatever you want.

00:13:57.720 --> 00:14:03.280
Another thing that we've added though
is this concept of alternate titles.

00:14:03.280 --> 00:14:06.320
We have API to set a
Windows alternate title.

00:14:06.370 --> 00:14:09.560
And what we use this for,
we use it for like three things.

00:14:11.360 --> 00:14:14.540
The first is we will show
it in the Window menu.

00:14:14.620 --> 00:14:17.840
The second thing we'll use it for
is when you minimize a window,

00:14:17.950 --> 00:14:23.930
its alternate title will show up when you
roll over it with the mouse in the dock.

00:14:24.120 --> 00:14:26.160
And the third place you'll see
it is actually in the doc pop-up

00:14:26.230 --> 00:14:28.440
when it shows the window list.

00:14:28.450 --> 00:14:32.900
The reason for this particular
alternate title concept is that you

00:14:32.900 --> 00:14:36.800
may have windows in your application
that all have the actual same title,

00:14:36.800 --> 00:14:42.720
but maybe they're showing different parts
of the file system or whatever it is.

00:14:42.720 --> 00:14:46.300
You can actually leave
the window titles alone,

00:14:46.300 --> 00:14:48.610
but specify an alternate title,
and that's what will show

00:14:48.610 --> 00:14:49.610
up in the window menu.

00:14:49.740 --> 00:14:51.010
Certainly when you're
looking at a window,

00:14:51.020 --> 00:14:53.240
you can pretty much tell, oh,
this is for that, you know,

00:14:53.290 --> 00:14:55.700
I'm looking at, you know,
whatever part of the file system

00:14:55.750 --> 00:14:59.200
or that part of the file system
or whatever the case might be.

00:14:59.250 --> 00:15:02.650
But if you're looking in the window menu,
there's no way to discriminate between

00:15:03.180 --> 00:15:06.140
the two or between all of your windows.

00:15:06.140 --> 00:15:09.820
So alternate titles allow you
to specify different titles.

00:15:14.440 --> 00:15:18.610
So we have a lot of default
behavior in the toolbox,

00:15:18.620 --> 00:15:21.400
and we don't allow you
to patch these days.

00:15:21.510 --> 00:15:23.830
But we do have Carbon events.

00:15:24.320 --> 00:15:31.300
So you can actually customize the
Window Manager to your own desire

00:15:31.300 --> 00:15:34.300
by installing Carbon Event Handlers.

00:15:34.330 --> 00:15:38.150
And if you look at carbonevents.h,
there are a lot of events

00:15:38.270 --> 00:15:39.280
that we send out for windows.

00:15:39.300 --> 00:15:41.820
I want to just point out some
of the more common ones that

00:15:41.820 --> 00:15:43.300
you would tend to override.

00:15:43.300 --> 00:15:46.300
The first is KEventWindowBoundsChange.

00:15:46.450 --> 00:15:49.320
Whenever you are dragging a
window or resizing a window,

00:15:49.380 --> 00:15:52.300
we will send out
KEventWindowBoundsChange.

00:15:52.300 --> 00:15:57.060
It could actually be changing,
but it's a little typo there.

00:15:58.280 --> 00:16:00.790
And you can actually use
this to do window gridding,

00:16:00.790 --> 00:16:01.870
snap to behavior.

00:16:01.880 --> 00:16:05.190
We can have pallets snap together
or to the edges of the screen.

00:16:05.290 --> 00:16:07.790
That would be the most
common use for that.

00:16:08.670 --> 00:16:11.980
The next one is K-Event
Window Get Click Activation.

00:16:12.030 --> 00:16:14.600
This allows you to do click-through.

00:16:14.600 --> 00:16:22.040
Whenever the toolbox detects a click on
a window that is not the front window,

00:16:22.090 --> 00:16:24.600
not the active window
in your application,

00:16:24.600 --> 00:16:29.080
we will send this event to it, asking it,
"What should we do?

00:16:29.080 --> 00:16:30.590
How do you want to handle this?

00:16:30.650 --> 00:16:31.600
We just got a click.

00:16:31.600 --> 00:16:35.060
Should we bring you forward
or not?" There are a couple of

00:16:35.190 --> 00:16:37.600
results that you can return.

00:16:37.710 --> 00:16:39.860
To do click-through,
you would basically say,

00:16:39.860 --> 00:16:41.980
"Don't activate me,
but I do want to handle the

00:16:41.980 --> 00:16:44.600
click." This is how you can
accomplish background dragging.

00:16:44.600 --> 00:16:47.550
Dragging from a window that's in
the background onto some window

00:16:47.550 --> 00:16:50.900
that's in the foreground without
that window coming forward first.

00:16:52.770 --> 00:16:56.240
The next event is Kevent
Window Handle Content Click.

00:16:56.310 --> 00:16:59.000
If you're using the
standard window handler,

00:16:59.060 --> 00:17:03.280
this is the way you would intercept
clicks on your own custom content.

00:17:03.440 --> 00:17:05.790
This is essentially,
what it does is it represents

00:17:05.840 --> 00:17:10.020
a click that is not in any
toolbox entity that we know of.

00:17:10.060 --> 00:17:14.390
It's in effectively some
other region of the window.

00:17:14.700 --> 00:17:17.880
So if you have like custom views,
but you have standard controls,

00:17:17.930 --> 00:17:19.930
the standard controls would
actually be handled by the toolbox,

00:17:19.930 --> 00:17:22.730
but you can handle your custom views
just by intercepting this event.

00:17:22.810 --> 00:17:24.600
And it's effectively a mouse down event.

00:17:24.600 --> 00:17:26.880
It has all the same parameters.

00:17:30.240 --> 00:17:33.300
Now the toolbox, as I said,
has a lot of default behaviors.

00:17:33.300 --> 00:17:36.790
And for example,
we will actually zoom windows for you.

00:17:37.500 --> 00:17:40.700
When we do that,
we need to know information.

00:17:40.760 --> 00:17:43.340
Like,
what is the ideal size of the window?

00:17:43.470 --> 00:17:45.940
So when a zoom is detected,
and we're about to do a zoom,

00:17:45.940 --> 00:17:51.990
we will actually send the window a
K event window get ideal size event.

00:17:52.880 --> 00:17:55.110
In response to that,
your application should say, "Oh,

00:17:55.110 --> 00:17:57.960
I should be so big."
Store that back into the event,

00:17:58.020 --> 00:18:00.640
and then the toolbox
can do the right thing.

00:18:00.770 --> 00:18:06.630
Likewise, for a resize window,
when we are about to resize,

00:18:06.720 --> 00:18:08.640
we will send out a
KEventWindow.getMinimum

00:18:08.640 --> 00:18:09.840
and getMaximum size.

00:18:09.840 --> 00:18:12.320
You just tell us what
those constraints are,

00:18:12.320 --> 00:18:14.490
and we'll do the right thing with it.

00:18:18.280 --> 00:18:22.800
This next slide is about a feature
that we're going to attempt to turn on

00:18:22.800 --> 00:18:26.200
in the next major release of Mac OS X.

00:18:26.230 --> 00:18:30.710
The reason that I'm bringing it
up though is because I want to

00:18:30.710 --> 00:18:33.490
kind of get you ready for it.

00:18:34.260 --> 00:18:36.430
Server-side window dragging.

00:18:36.470 --> 00:18:39.930
What that means is that the
window server is in control of

00:18:39.930 --> 00:18:41.270
dragging the windows around.

00:18:41.470 --> 00:18:43.080
Cocoa already does this.

00:18:43.140 --> 00:18:45.590
We're going to turn this on in Carbon.

00:18:46.860 --> 00:18:49.840
The advantages are first that
we don't actually have to keep

00:18:49.920 --> 00:18:51.090
talking to the Windows Server.

00:18:51.200 --> 00:18:54.910
So right now what happens is we get a
mouse move while we're tracking a window,

00:18:54.930 --> 00:18:57.080
and we say, "Okay,
move the window." We tell

00:18:57.080 --> 00:18:58.880
the Windows Server,
"Move the window." It sends

00:18:58.880 --> 00:19:01.160
us another mouse move event,
and we keep this back and forth traffic

00:19:01.160 --> 00:19:02.860
as you're dragging a window around.

00:19:02.860 --> 00:19:05.550
It's kind of a lot of crosstalk.

00:19:07.630 --> 00:19:09.560
So we want to eliminate that.

00:19:09.560 --> 00:19:13.100
The next thing is that if your
application is just stopped dead,

00:19:13.220 --> 00:19:15.450
something's happened,
you're in a tight loop or you

00:19:15.450 --> 00:19:18.330
just went away for a while,
the user can still move the

00:19:18.330 --> 00:19:19.830
windows of your application.

00:19:19.870 --> 00:19:22.510
You don't have to be
actually handling that.

00:19:22.510 --> 00:19:25.590
And this is kind of useful at times.

00:19:25.640 --> 00:19:29.990
This also has an effect that it
actually makes your application

00:19:29.990 --> 00:19:29.990
seem much more responsive.

00:19:30.930 --> 00:19:35.980
The reason is, let's say your application
was swapped out.

00:19:36.100 --> 00:19:39.660
He's got a lot of applications open
and we had to swap your app out.

00:19:39.780 --> 00:19:43.770
So then we click on it,
he needs to swap it back in.

00:19:44.420 --> 00:19:47.090
And normally we'd have to swap back
in all the code that had to deal with

00:19:47.090 --> 00:19:49.610
dragging and all of that fun stuff.

00:19:50.890 --> 00:19:53.120
Because the Windows server is in control,
we can actually start to

00:19:53.120 --> 00:19:54.300
drag the window immediately.

00:19:54.390 --> 00:19:57.740
So rather than seeing a big delay before
the window started to follow the mouse,

00:19:57.840 --> 00:19:59.450
the window would actually
start moving immediately.

00:19:59.560 --> 00:20:02.860
And this has a profound impact
on the user because they

00:20:02.950 --> 00:20:04.680
feel like they're in control,
you know,

00:20:04.680 --> 00:20:08.590
the system's keeping up with them,
and it's rather important.

00:20:09.180 --> 00:20:13.110
Now the reason that I'm talking
about this at all is because it's

00:20:13.110 --> 00:20:15.940
going to require changes to WDEFs.

00:20:16.020 --> 00:20:19.400
What we want to do is
give a window definition

00:20:20.000 --> 00:20:23.720
The coordinate system that starts at 0,
0, not at the global coordinates

00:20:23.720 --> 00:20:24.700
that the window is.

00:20:24.700 --> 00:20:28.210
So if you are writing WDEFs,
you will need to be aware

00:20:28.210 --> 00:20:30.200
of this when this happens.

00:20:30.200 --> 00:20:33.400
Now, we're not going to break
any existing WDEFs,

00:20:33.400 --> 00:20:37.850
but it will mean that if the WDEF does
not support this server-side dragging,

00:20:37.860 --> 00:20:41.010
we can't turn it on for your application.

00:20:42.400 --> 00:20:45.350
Now, you're going to have to turn
this on manually if you're doing

00:20:45.410 --> 00:20:46.590
the window dragging yourself.

00:20:46.700 --> 00:20:48.830
If you are using the
standard window handler,

00:20:48.860 --> 00:20:50.730
this will be turned on for free.

00:20:50.790 --> 00:20:54.130
Again, provided that the WF supports it.

00:20:58.540 --> 00:21:03.190
Custom WDEFs are still supported.

00:21:03.330 --> 00:21:05.790
For any WDEF that we need
to reference in a resource,

00:21:05.840 --> 00:21:10.460
like a wind resource,
you can register the resource ID.

00:21:10.610 --> 00:21:13.320
with the toolbox along
with the PROC pointer,

00:21:13.320 --> 00:21:18.790
which implements the def.proc
with register window definition.

00:21:19.000 --> 00:21:23.350
If you happen to have,
or you happen to start writing

00:21:23.350 --> 00:21:27.900
a Carbon Event based DefProc,
you would use Registered Toolbox Object.

00:21:27.900 --> 00:21:29.980
And then you just use
Create Custom Window,

00:21:30.070 --> 00:21:33.900
and your custom window runs,
and it's all good.

00:21:34.170 --> 00:21:38.160
Now, what I'd like to do is show you
a little bit about the stuff

00:21:38.220 --> 00:21:39.900
that we just talked about,
and to do that,

00:21:39.900 --> 00:21:41.900
I'd like to bring up Guy Fullerton.

00:21:42.810 --> 00:21:45.900
But I do have to remind Ed that
I won the last game last night,

00:21:45.900 --> 00:21:46.900
so... That was luck.

00:21:46.900 --> 00:21:48.910
not always a target.

00:21:49.800 --> 00:21:53.630
First demo I want to show you
guys has to do with window groups.

00:21:53.700 --> 00:21:57.830
One possible use you might have for
window groups is if you have just a

00:21:57.830 --> 00:22:01.800
window that happens to display little
subwindows for editing purposes.

00:22:01.890 --> 00:22:05.850
Like let's say this is a very,
very primitive mail application

00:22:06.270 --> 00:22:09.260
that needs a way to add a
name to an address book.

00:22:09.340 --> 00:22:11.240
And it happens to pop up
a little subwindow here,

00:22:11.240 --> 00:22:13.500
which is implemented as
another window manager window.

00:22:13.600 --> 00:22:15.970
Now you can type in there and all,
but with window groups,

00:22:15.970 --> 00:22:18.750
we actually allow you to tie those
two windows together so that you

00:22:18.750 --> 00:22:23.360
can drag them around together and
have them z-order together properly.

00:22:26.030 --> 00:22:28.430
And another cool thing about window
groups is they're totally arbitrary.

00:22:28.440 --> 00:22:32.100
You can set up whatever groups you
like and you can include or remove

00:22:32.100 --> 00:22:33.590
windows from them as you wish.

00:22:33.700 --> 00:22:36.420
So I've got these four windows
that as you saw just then as

00:22:36.420 --> 00:22:39.200
I was clicking on each of them,
they activated separately.

00:22:39.330 --> 00:22:41.150
Now that I have them
all grouped together,

00:22:41.150 --> 00:22:43.360
they activate together
just as you would expect.

00:22:43.430 --> 00:22:46.690
And you can drag them together
just as you would expect.

00:22:46.750 --> 00:22:51.790
And they minimize together
just as you would expect.

00:22:56.370 --> 00:22:59.400
So the next thing I want to show you
is some of the overlay window support.

00:22:59.400 --> 00:23:03.320
One thing you might want to do
with overlay windows is give the

00:23:03.330 --> 00:23:05.740
user a way to sort of draw on
arbitrary parts of the screen.

00:23:05.800 --> 00:23:09.290
So this Event Horizon application
has overlay support built into it,

00:23:09.400 --> 00:23:11.560
and I just turned on the
overlay window for this app,

00:23:11.560 --> 00:23:14.290
so I can start to scribble
wherever I want over the screen.

00:23:14.290 --> 00:23:16.410
I can scribble over the dock.

00:23:16.410 --> 00:23:20.230
I can scribble over finder icons,
do whatever I want.

00:23:20.270 --> 00:23:22.790
You could even use it as sort
of a primitive coach marking

00:23:22.790 --> 00:23:22.790
mechanism if you wanted to.

00:23:24.060 --> 00:23:26.040
Oh, oh, oh.

00:23:26.100 --> 00:23:29.110
We might have just gotten
ourselves in trouble.

00:23:29.900 --> 00:23:31.800
Well, I guess that would be
me that got in trouble.

00:23:31.800 --> 00:23:32.110
Oh, no, okay.

00:23:32.190 --> 00:23:32.600
It worked out.

00:23:32.720 --> 00:23:33.550
Let's close that window.

00:23:33.640 --> 00:23:36.520
Now,
another use for overlay windows might

00:23:36.590 --> 00:23:40.010
be if you're an alien race that wants
to invade the planet and you need to

00:23:40.010 --> 00:23:42.280
throw a message up on somebody's screen.

00:23:42.420 --> 00:23:44.900
You could also do that just in one shot.

00:23:51.680 --> 00:23:54.560
So one of the other things
Ed mentioned is we've been working on

00:23:54.650 --> 00:23:56.840
transparent sheet support for Carbon.

00:23:56.900 --> 00:23:59.630
And what I'm running here
isn't exactly Mac OS X GM.

00:23:59.640 --> 00:24:01.250
We've got some bleeding-age
pieces in there,

00:24:01.250 --> 00:24:03.400
and I want to show you the
progress we've been making.

00:24:03.460 --> 00:24:04.920
This application is simpler text.

00:24:04.970 --> 00:24:06.000
I showed this off yesterday.

00:24:06.000 --> 00:24:07.760
It's just a replacement for simple text.

00:24:07.820 --> 00:24:11.800
And it uses the standard
Nav Services Save/Don't Save dialog.

00:24:11.850 --> 00:24:13.950
But on the system,
we've enabled transparent sheets.

00:24:14.020 --> 00:24:16.710
So if I try to close the window,
you can see that the sheet

00:24:16.710 --> 00:24:17.710
really is transparent.

00:24:17.760 --> 00:24:19.880
It uses all the standard
control manager controls,

00:24:19.880 --> 00:24:22.120
and it just works when we turn that on.

00:24:25.300 --> 00:24:27.400
Now, I showed this app yesterday.

00:24:27.400 --> 00:24:28.430
This is Live Buttons.

00:24:28.490 --> 00:24:31.010
The cool thing about this actually
has to do with the fact that we

00:24:31.060 --> 00:24:33.930
install Carbon event handlers
to allow you to manipulate an

00:24:33.930 --> 00:24:36.040
otherwise static user interface.

00:24:36.160 --> 00:24:39.140
And while we were
writing this application,

00:24:39.220 --> 00:24:41.840
it brought to the forefront one
of the really major problems

00:24:41.840 --> 00:24:43.040
with the control manager.

00:24:43.130 --> 00:24:48.220
And that is that if you have peer
controls that happen to overlap,

00:24:48.310 --> 00:24:51.310
you get--let's do this too--

00:24:52.570 --> 00:24:55.540
You get some really strange behaviors
with the interface where whatever

00:24:55.540 --> 00:24:59.440
control you happen to click on last
is what sort of owns the draw area,

00:24:59.440 --> 00:25:01.460
and you get really ugly looking graphics.

00:25:01.540 --> 00:25:03.090
And in fact,
let's say you try to throw a picture

00:25:03.100 --> 00:25:04.540
into the background of that window.

00:25:04.630 --> 00:25:07.090
Not only do you get the...

00:25:07.900 --> 00:25:33.000
[Transcript missing]

00:25:33.250 --> 00:25:33.670
Oh, you know what?

00:25:33.700 --> 00:25:34.850
I'm clicking on text at that point.

00:25:34.890 --> 00:25:36.300
If I click on it over here,
you can see that just

00:25:36.300 --> 00:25:38.440
the picture highlights,
none of the other controls highlight.

00:25:38.500 --> 00:25:39.700
All the animation just works.

00:25:39.700 --> 00:25:44.390
You still have a spinning progress
arrows drawing on top of the OK button.

00:25:44.660 --> 00:25:46.930
So this is something that
you can look forward to in a

00:25:46.930 --> 00:25:48.940
future release of Mac OS X.

00:25:48.940 --> 00:25:52.300
And now I'm going to send it
back to Ed to talk a little

00:25:52.300 --> 00:25:54.510
bit about the Menu Manager.

00:25:58.840 --> 00:26:01.560
So obviously the first bit of
that that you'll see would be the

00:26:01.710 --> 00:26:04.870
transparent sheets and later on
we'll actually make that a general

00:26:05.050 --> 00:26:07.590
purpose thing that anybody can use.

00:26:07.930 --> 00:26:09.100
So the Menu Manager.

00:26:09.160 --> 00:26:13.430
We made quite a few changes
to the Menu Manager as well.

00:26:14.500 --> 00:26:16.590
First,
you can have icons for menu titles.

00:26:16.660 --> 00:26:19.820
Oh yes, believe it.

00:26:19.880 --> 00:26:22.830
Next thing is we support Indication
and Menu Section support.

00:26:22.850 --> 00:26:24.920
A good example of this
is the Recent Items menu,

00:26:24.940 --> 00:26:26.920
which is under the
Apple menu in Mac OS X.

00:26:26.920 --> 00:26:28.090
You can actually do this.

00:26:28.130 --> 00:26:30.060
We support it fully in the Menu Manager.

00:26:30.060 --> 00:26:31.990
You don't have to write a custom MDEF.

00:26:33.340 --> 00:26:35.590
We have much better command ID access.

00:26:35.700 --> 00:26:40.360
So command IDs are a way
to identify a menu item,

00:26:40.430 --> 00:26:44.200
which is a position
independent method of doing so.

00:26:44.290 --> 00:26:48.160
And that's great,
but you actually want to manipulate those

00:26:48.160 --> 00:26:50.080
menu items using the command ID as well.

00:26:50.190 --> 00:26:53.930
And we have full support
for doing so with Carbon.

00:26:54.200 --> 00:26:56.200
We support ref counting.

00:26:56.340 --> 00:26:57.800
Dynamic Items.

00:26:57.830 --> 00:27:04.100
This would be if you have a particular
menu accelerator in your menu and you

00:27:04.200 --> 00:27:08.150
want it to actually change the text
depending on what modifier keys are down,

00:27:08.150 --> 00:27:09.300
we support that.

00:27:09.950 --> 00:27:13.700
We actually have, and we also have much
better hierarchical support.

00:27:14.180 --> 00:27:17.660
Historically,
what you've done is you insert your menu,

00:27:17.670 --> 00:27:21.700
your hierarchical menu,
into the hierarchical menu list using,

00:27:21.710 --> 00:27:26.550
you know, insert menu negative one,
and then you reference that

00:27:26.590 --> 00:27:31.540
by putting the ID of that menu
into the actual parent item.

00:27:31.550 --> 00:27:33.800
Well,
we've come up with a slightly better way,

00:27:33.800 --> 00:27:36.840
which is you just take the menu ref
and you set it on the parent item,

00:27:36.840 --> 00:27:37.690
and you're done.

00:27:37.690 --> 00:27:39.900
You don't have to play
those games anymore.

00:27:41.520 --> 00:27:45.300
We also support certain Carbon Events.

00:27:45.400 --> 00:27:47.680
The first is Begin and End Tracking.

00:27:47.740 --> 00:27:51.440
Whenever the mouse goes down in the
menu bar and we are about to call,

00:27:51.440 --> 00:27:55.410
or basically when Menu Select is called,
is what it comes down to,

00:27:55.480 --> 00:27:58.350
when we start Menu Select,
we send out Begin Tracking.

00:27:58.420 --> 00:28:01.820
When we end Menu Select,
we call End Tracking,

00:28:01.900 --> 00:28:03.860
and we send that event out.

00:28:04.120 --> 00:28:06.490
And this might be useful if you
have timers which are firing

00:28:06.530 --> 00:28:08.700
but you don't want them to
fire while the menus are down.

00:28:08.730 --> 00:28:12.540
You can actually disable them by
looking for this notification.

00:28:14.360 --> 00:28:19.580
We also have a really cool event
called K-Event Menu Opening.

00:28:19.580 --> 00:28:22.060
And you can do this for
lazy construction of menus.

00:28:22.100 --> 00:28:25.300
Let's say you had a hierarchical
menu and it showed part of

00:28:25.450 --> 00:28:27.300
a file system or something.

00:28:27.320 --> 00:28:30.240
You don't necessarily want to
populate it all up at once.

00:28:30.310 --> 00:28:32.200
That might be kind of intensive.

00:28:32.310 --> 00:28:36.630
So what you can do is wait for
K-Event Menu Opening and then

00:28:36.630 --> 00:28:40.040
go out to the file system,
fill in the menu,

00:28:40.040 --> 00:28:40.790
and then it will be displayed
with those contents.

00:28:41.160 --> 00:28:44.300
And lastly,
we have what is the direct replacement

00:28:44.300 --> 00:28:48.280
for the menu hook function:
KEVENT_MENU_TARGET_ITEM.

00:28:48.280 --> 00:28:51.450
So whenever you are rolling over an item,
we will send this event out,

00:28:51.580 --> 00:28:54.760
and you can use that notification
to maybe put up some contextual

00:28:54.760 --> 00:28:56.580
help or whatever you need to do.

00:29:02.500 --> 00:29:08.500
[Transcript missing]

00:29:08.770 --> 00:29:11.380
And it supports commands.

00:29:11.450 --> 00:29:13.800
Like I said,
we have much better command ID support.

00:29:13.920 --> 00:29:19.770
Part of that involves dealing with
enabling and disabling menu items.

00:29:20.770 --> 00:29:25.260
Whenever a menu is about to be
shown for every item in the menu,

00:29:25.260 --> 00:29:27.990
we send out kevent command
update status events.

00:29:28.050 --> 00:29:32.260
That's your time to say update the text,
add a check mark,

00:29:32.260 --> 00:29:34.330
whatever you want to do.

00:29:35.020 --> 00:29:36.940
Now, like I said,
we do that for every item in the menu.

00:29:37.010 --> 00:29:39.710
So that could potentially be a
lot of different update status

00:29:39.820 --> 00:29:41.930
commands that we're sending around.

00:29:42.620 --> 00:29:44.910
Your application might
want to do it all at once,

00:29:44.910 --> 00:29:50.700
and you can do that by intercepting
the KEVENT_MENU_ENABLE_ITEMS event.

00:29:50.700 --> 00:29:54.980
In fact, the default toolbox response to
an unhandled ENABLE_ITEMS event

00:29:55.050 --> 00:30:00.000
is to send out update status
for every item in the menu.

00:30:00.030 --> 00:30:04.320
So maybe your application
architecture only works based

00:30:04.320 --> 00:30:08.300
on a per-menu enabling strategy,
so that's the event that

00:30:08.300 --> 00:30:09.820
you would tap in for that.

00:30:11.810 --> 00:30:15.500
It's actually important that
WaitNext event-based apps

00:30:15.630 --> 00:30:19.700
respond to these events as well
as pure Carbon event-based apps.

00:30:19.800 --> 00:30:26.150
And the reason is that if you happen to
have event handlers in your application,

00:30:26.150 --> 00:30:31.410
they will be called while you
are inside WaitNext event.

00:30:33.400 --> 00:30:36.200
Typically what would happen in the past
is you'd exit from Wait Next Event,

00:30:36.300 --> 00:30:38.550
find out you had a keyboard
event or maybe a mouse event that

00:30:38.570 --> 00:30:41.780
happened to be in the menu bar,
and then you would go and update

00:30:41.780 --> 00:30:43.980
the status of your menu items.

00:30:46.120 --> 00:30:49.620
Well, because we're dispatching
this inside of WaitNextEvent,

00:30:49.680 --> 00:30:52.510
you don't necessarily get that chance.

00:30:52.950 --> 00:30:58.040
So it might be that it
usually hits a command key,

00:30:58.220 --> 00:31:01.500
That item is enabled
currently in the menu bar.

00:31:01.580 --> 00:31:06.080
We will actually go and call
a command handler for that.

00:31:06.160 --> 00:31:08.820
It might not even be the effect
that you want because it might

00:31:08.820 --> 00:31:10.500
actually be the quit command.

00:31:10.500 --> 00:31:13.940
So your application may end
up getting a quit Apple event

00:31:13.940 --> 00:31:15.850
and you didn't expect it to.

00:31:15.870 --> 00:31:19.130
So in those cases you need to make
sure that you're dealing with enabling

00:31:19.130 --> 00:31:21.200
and disabling the items appropriately.

00:31:22.700 --> 00:31:28.630
Back in traditional Mac OS,
we dealt with the Edit menu

00:31:28.680 --> 00:31:31.460
in a very interesting manner.

00:31:31.930 --> 00:31:33.510
Basically,
we had this thing which kind of looked

00:31:33.680 --> 00:31:35.200
for any window as they were coming up.

00:31:35.200 --> 00:31:38.080
It was like a JG&E filter,
and we'd see a new window and go, "Oh,

00:31:38.080 --> 00:31:38.640
a new window.

00:31:38.640 --> 00:31:40.800
Is it a dialog?" And then we'd say, "Oh,
yeah, it's a dialog.

00:31:40.800 --> 00:31:43.150
Is there a text field?" They'd go, "Yes,
oh, good.

00:31:43.150 --> 00:31:43.550
Great.

00:31:43.630 --> 00:31:45.110
Then let's deal with the Edit Menu.

00:31:45.110 --> 00:31:48.840
Where is it?" "Oh, I don't know.

00:31:48.970 --> 00:31:54.390
Go scan the menu bar for anything
with an X or a V next to it."

00:31:54.390 --> 00:31:54.390
That must be the Edit Menu.

00:31:54.680 --> 00:31:58.640
That has some negative
connotations in that,

00:31:58.640 --> 00:32:03.100
first off, it pulls like crazy,
and we don't want to do that in Mac OS X.

00:32:03.100 --> 00:32:05.480
Second off, it's just bad code,
and we don't want that.

00:32:05.640 --> 00:32:09.140
So, we already had this mechanism,
which was the command ID mechanism.

00:32:09.140 --> 00:32:11.620
It's the right mechanism.

00:32:11.890 --> 00:32:15.740
So, it's actually important that
for your edit menus in Carbon,

00:32:15.740 --> 00:32:21.160
you use the standard command IDs that
we've put into carbon-events.h.

00:32:21.260 --> 00:32:23.600
It doesn't hurt anything if
you're not using the command

00:32:23.600 --> 00:32:25.140
IDs for your application at all.

00:32:25.140 --> 00:32:27.200
It doesn't hurt you,
but it allows us to at least

00:32:27.200 --> 00:32:28.360
find them in the menu bar.

00:32:28.360 --> 00:32:32.730
And this is important,
particularly when we put up dialogues,

00:32:32.730 --> 00:32:36.600
because the dialogue manager still wants
to deal with the edit menu appropriately.

00:32:36.600 --> 00:32:39.920
And actually, it's not even the dialogue
manager these days,

00:32:39.920 --> 00:32:42.140
it's the individual edit text controls.

00:32:42.160 --> 00:32:44.690
Because they are the focus,
they get to control the

00:32:44.690 --> 00:32:46.160
edit menu appropriately.

00:32:48.020 --> 00:32:51.930
And lastly, it's important to note that
these update status commands can

00:32:51.930 --> 00:32:54.240
actually be sent out at any time.

00:32:54.270 --> 00:32:57.070
It's not just, "Oh,
there was a key down," or "There

00:32:57.070 --> 00:33:00.120
was a mouse down" in the menu bar.

00:33:01.020 --> 00:33:04.480
It might have been some
programmatic change of the

00:33:04.810 --> 00:33:07.040
window ordering or something.

00:33:07.060 --> 00:33:11.870
Maybe somebody called Select Window,
like the Toolbox.

00:33:12.300 --> 00:33:17.380
When that happens,
if you had a focused edit text control,

00:33:18.140 --> 00:33:21.010
which was only in the Edit menu,
and now you're in a

00:33:21.010 --> 00:33:23.830
window which has no focus,
the Edit menu should

00:33:23.830 --> 00:33:25.000
actually be disabled.

00:33:25.000 --> 00:33:29.330
So the toolbox will actually
in that case detect,

00:33:29.330 --> 00:33:30.960
"Oh, I need to, you know,
the focus has changed.

00:33:31.000 --> 00:33:34.800
I need to go and dirty the menu bar."
So when it sees that it's dirty,

00:33:34.800 --> 00:33:38.000
it will actually send out
these update status commands.

00:33:38.000 --> 00:33:42.120
So be aware that they could
be flying at you at any time.

00:33:45.420 --> 00:33:50.100
The Apple and Application menus
are one and the same on Mac OS 9,

00:33:50.190 --> 00:33:53.360
but they're different on Mac OS X.

00:33:54.110 --> 00:33:56.090
The Apple menu just exists on Mac OS X.

00:33:56.100 --> 00:34:01.540
It's always there, omnipresent,
staring at you, watching you.

00:34:01.660 --> 00:34:05.660
But the Apple menu on Mac OS 9 is
the Apple menu that you always knew,

00:34:05.660 --> 00:34:08.240
while on Mac OS X it becomes what
we term the application menu.

00:34:08.240 --> 00:34:11.270
It's the menu with the
name of your application.

00:34:11.780 --> 00:34:13.670
You should continue to insert
your Apple Menu into the

00:34:13.670 --> 00:34:15.910
Menu Bar just like you always have.

00:34:16.320 --> 00:34:17.480
Basically, it's the placeholder.

00:34:17.570 --> 00:34:19.880
It's the place that you put your
About item and whatever other items

00:34:19.880 --> 00:34:21.380
that you've historically put there.

00:34:21.400 --> 00:34:22.700
So you want to keep doing that.

00:34:22.890 --> 00:34:25.860
And like I said, on 9,
it just is the Apple Menu like

00:34:25.860 --> 00:34:27.240
you always knew it.

00:34:27.240 --> 00:34:30.000
And on 10, it's the Application Menu.

00:34:30.340 --> 00:34:33.490
Most of the items in these
menus are handled automatically.

00:34:33.500 --> 00:34:38.190
The exceptions are really
quit and preferences.

00:34:38.340 --> 00:34:40.200
These are commands that
you need to deal with.

00:34:40.200 --> 00:34:44.000
Obviously, if the user selects Command Q,
they want to quit your app,

00:34:44.050 --> 00:34:47.600
you should probably respond
and quit being so stubborn.

00:34:48.110 --> 00:34:50.720
For preferences,
the user wants to change some

00:34:50.720 --> 00:34:53.000
aspect of your application,
the way it works or whatever.

00:34:53.130 --> 00:34:55.430
You need to respond to that.

00:34:55.530 --> 00:34:58.260
By default,
the Preferences item is disabled.

00:34:58.380 --> 00:35:00.870
So it's actually up to your
application to enable it.

00:35:00.900 --> 00:35:02.390
And you can do it by Command ID.

00:35:02.400 --> 00:35:06.230
We supply the Command ID in
carbonevents.h.

00:35:06.960 --> 00:35:11.100
And you can also enable and disable
the Quit menu item however you

00:35:11.100 --> 00:35:14.090
need to via Command ID as well.

00:35:18.540 --> 00:35:20.490
Now don't let the first bullet scare you.

00:35:20.490 --> 00:35:24.690
I mean, we don't by default
have a Help menu there.

00:35:24.800 --> 00:35:31.680
However, if you call hm get help menu,
we will automatically insert one.

00:35:33.690 --> 00:35:37.790
If your application happens to specify
a help book in your Info.plist,

00:35:37.940 --> 00:35:42.170
we will automatically create
the help menu for you as well.

00:35:43.970 --> 00:35:46.850
As in the past,
you can just add menu items

00:35:46.850 --> 00:35:49.000
as you see fit to this menu.

00:35:49.000 --> 00:35:52.890
For any menu items that you add,
you will get the commands for them.

00:35:52.890 --> 00:35:54.900
You can just install a command handler.

00:35:55.200 --> 00:35:58.860
For any items that the
system has installed,

00:35:59.020 --> 00:36:02.200
we'll handle them automatically.

00:36:03.420 --> 00:36:05.040
Well, that was short.

00:36:05.040 --> 00:36:08.950
That was because they dropped
a couple of my slides out.

00:36:11.130 --> 00:36:13.280
Either that or I talk too fast.

00:36:13.430 --> 00:36:16.000
So the bottom line here is we've done
a lot of work in the Menu Manager.

00:36:16.000 --> 00:36:17.490
We've done a lot of work
in the Window Manager.

00:36:17.530 --> 00:36:19.200
The Window Manager, just think about it.

00:36:19.200 --> 00:36:23.760
I mean, we've taken it from a system
where everything was non-retained,

00:36:23.760 --> 00:36:26.300
we had to deal with
damage repair ourselves,

00:36:26.300 --> 00:36:29.440
all of these other things,
to a system where we actually

00:36:29.440 --> 00:36:32.280
have window buffering,
which was the slide that was missing,

00:36:32.280 --> 00:36:32.760
by the way.

00:36:32.950 --> 00:36:36.450
And, I mean,
we've just added window groups,

00:36:36.450 --> 00:36:40.990
we have overlay windows,
and the Window Manager is actually

00:36:40.990 --> 00:36:44.120
in such a state these days that
we can start adding new window

00:36:44.280 --> 00:36:47.000
classes at a very fast pace.

00:36:47.050 --> 00:36:50.390
The entire code base of the high-level
toolbox is in great shape these days,

00:36:50.390 --> 00:36:52.520
and we're making constant improvements.

00:36:52.630 --> 00:36:54.540
And especially with the
advent of Carbon events,

00:36:54.560 --> 00:36:57.240
you know, mixing in with that,
we can actually just

00:36:57.240 --> 00:36:58.590
start going wild now.

00:36:58.600 --> 00:37:02.190
So now is the time that it's
really getting exciting.

00:37:02.280 --> 00:37:07.100
You should look at carbonevents.h as
always if you're looking to override

00:37:07.100 --> 00:37:10.200
a lot of the window behaviors,
menu behaviors.

00:37:10.200 --> 00:37:12.150
And it's important to go
import your application.

00:37:12.240 --> 00:37:13.100
That's why you're here.

00:37:13.200 --> 00:37:14.780
You're trying to learn about Mac OS X.

00:37:14.840 --> 00:37:18.210
We're trying to tell you all we can.

00:37:18.210 --> 00:37:21.200
We're trying to help you along.

00:37:21.200 --> 00:37:26.000
So with that,
I'd like to bring Mark Turner back out,

00:37:26.000 --> 00:37:26.000
take you through roadmap,
and then we'll do Q&A.

00:37:26.000 --> 00:37:26.000
Thanks.

00:37:30.310 --> 00:37:32.340
Thank you, Ed.

00:37:32.390 --> 00:37:37.120
So coming up tomorrow morning,
we have Controls and Appearance

00:37:37.120 --> 00:37:38.610
1 and 2 back-to-back.

00:37:40.100 --> 00:37:55.000
[Transcript missing]

00:37:55.420 --> 00:37:57.300
This is me.

00:37:57.300 --> 00:38:02.320
My job is to help you adopt
Carbon and get your apps to Mac OS X.

00:38:02.360 --> 00:38:08.100
So if you have questions,
either today or after WWDC, email me.