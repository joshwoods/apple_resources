WEBVTT

00:00:03.900 --> 00:00:04.900
I'm Craig Keithley.

00:00:04.900 --> 00:00:07.360
I'm the Security and
Cryptography Technology Manager.

00:00:07.410 --> 00:00:09.190
I have another role,
which is also USB and

00:00:09.190 --> 00:00:10.700
FireWire Technology Manager.

00:00:10.700 --> 00:00:13.510
So if you've seen me in the
USB and FireWire sessions,

00:00:13.510 --> 00:00:14.450
I do that too.

00:00:14.450 --> 00:00:17.400
And there's actually a
little bit of an overlap.

00:00:17.400 --> 00:00:20.900
There's a number of security
dongles that are USB-based.

00:00:20.900 --> 00:00:24.450
So I take my skills from USB and
I apply them to those as well.

00:00:24.930 --> 00:00:27.180
Today we're going to be talking
about security in Mac OS X from a

00:00:27.180 --> 00:00:28.500
high-level kind of point of view.

00:00:28.510 --> 00:00:31.020
We'll be talking about the new
features that have been added.

00:00:31.020 --> 00:00:33.830
One of the things I'm really
pleased to be able to say is

00:00:33.830 --> 00:00:38.280
that starting with 10.0.3,
we now have PCSE, or Smart Card Support,

00:00:38.280 --> 00:00:40.470
built into the operating system.

00:00:40.480 --> 00:00:43.710
So without much further ado,
I'll bring up John Hurley,

00:00:43.710 --> 00:00:47.090
who will give you the
presentation on Security Overview.

00:00:47.120 --> 00:00:47.920
Thanks.

00:01:01.200 --> 00:01:02.840
Okay, good morning everyone.

00:01:02.900 --> 00:01:04.980
Good to have you all here.

00:01:05.210 --> 00:01:10.900
I'm going to try and give you
an overview of the new security

00:01:10.900 --> 00:01:13.400
features that we put into OS X.

00:01:15.240 --> 00:01:20.210
We've been really excited
to be able to work with X.

00:01:20.370 --> 00:01:25.620
It's given us a lot of new possibilities.

00:01:25.620 --> 00:01:31.540
I mean, really the chance to actually
start working towards a secure OS.

00:01:31.540 --> 00:01:34.480
So that's been great for us to work on.

00:01:34.480 --> 00:01:39.140
We have a lot of developer-related
features as well,

00:01:39.140 --> 00:01:42.760
so I'll try and indicate some of those.

00:01:42.760 --> 00:01:45.220
And we have sessions going
on the rest of the week.

00:01:45.220 --> 00:01:47.300
And we're going to start today as
well with some of these things.

00:01:47.300 --> 00:01:53.280
I guess one of our biggest...

00:01:53.630 --> 00:02:00.100
The idea behind the messages or design
goals really is that we're trying to

00:02:00.230 --> 00:02:03.780
make the security in OS X configurable.

00:02:03.780 --> 00:02:09.560
So the default out-of-the-box thing
that goes to the home user or whatever

00:02:09.560 --> 00:02:12.700
is going to have one configuration.

00:02:12.700 --> 00:02:18.160
And ideally they won't even really
think for two seconds about security.

00:02:18.160 --> 00:02:20.540
It should just kind of
be in the background.

00:02:20.540 --> 00:02:27.020
But we want to be able to enable
all these other markets that

00:02:27.020 --> 00:02:33.510
really are interested in security
and see Mac OS X as a great

00:02:33.510 --> 00:02:37.400
platform to implement that on.

00:02:39.120 --> 00:02:47.540
OK, so I'll talk about our
architecture for data security.

00:02:47.700 --> 00:03:32.400
[Transcript missing]

00:03:34.300 --> 00:03:41.530
Okay, so some of the opportunities
that we've been able to really

00:03:41.540 --> 00:03:48.340
leverage on with OS X that we
never had available to us before.

00:03:49.290 --> 00:03:51.740
Probably the biggest thing
maybe is protected memory.

00:03:51.780 --> 00:03:57.610
We can have memory that's
in a particular process and,

00:03:57.650 --> 00:04:03.020
you know, unless you have root access,
you can't actually see that memory.

00:04:03.020 --> 00:04:04.020
You can't really get to it.

00:04:04.040 --> 00:04:08.910
So we have, for example,
we have a process called

00:04:08.920 --> 00:04:15.510
the security server,
which contains the keys as they're used.

00:04:18.220 --> 00:04:20.540
And being able to leverage
that is really great.

00:04:20.570 --> 00:04:23.160
It gives us a good chance
to make things more secure.

00:04:23.160 --> 00:04:27.090
Being able to take advantage
of the multitasking stuff

00:04:27.090 --> 00:04:30.770
means we can do things,
we don't have to worry about

00:04:30.770 --> 00:04:35.980
being preempted or worrying about
other processes that need to run.

00:04:35.980 --> 00:04:41.880
One really big advantage is that we
have this whole BSD infrastructure

00:04:42.070 --> 00:04:44.130
that we can build on.

00:04:47.250 --> 00:04:52.270
We can do security work
that's been done on standard,

00:04:52.270 --> 00:04:55.240
you know, Unix level security.

00:04:55.240 --> 00:05:00.300
And wherever appropriate,
we've taken advantage of that.

00:05:00.400 --> 00:05:07.480
Maybe one of the biggest things is that
we've been able to have a fresh start.

00:05:07.590 --> 00:05:14.340
Of course, Classic still supports
the OS 9 environment,

00:05:14.340 --> 00:05:18.470
but being able to move to this
completely different operating

00:05:18.540 --> 00:05:22.300
system meant that we could kind
of shake things up a little bit.

00:05:22.520 --> 00:05:26.910
And some of the things that had
kind of gelled over the years,

00:05:26.960 --> 00:05:32.060
we were able to get in at the
beginning and start really implementing

00:05:32.060 --> 00:05:34.630
security from the beginning.

00:05:35.270 --> 00:05:40.100
Okay, now the last bullet here
is the announcement.

00:05:40.100 --> 00:05:42.870
And this is really,
we've been wanting to do this

00:05:42.920 --> 00:05:46.000
for a really long time and we
finally pulled it all together.

00:05:46.000 --> 00:05:51.690
So the announcement is that
we're making most of our data

00:05:51.740 --> 00:05:55.540
security components open source.

00:05:55.540 --> 00:06:03.320
So they will be available.

00:06:03.750 --> 00:06:09.940
We're really happy about it because
it just gives us so many advantages.

00:06:09.940 --> 00:06:12.830
One of the things with
security is peer review.

00:06:12.930 --> 00:06:16.500
You can't do security through obscurity.

00:06:16.500 --> 00:06:22.900
You have to have people being able to
look at the code and try and find holes.

00:06:22.900 --> 00:06:28.010
So it's great that we're able to do this.

00:06:28.320 --> 00:06:33.600
We've open sourced pretty much
everything that makes sense

00:06:33.780 --> 00:06:37.960
from a Darwin perspective.

00:06:38.190 --> 00:06:42.000
So the idea is that if you
have your Darwin system,

00:06:42.000 --> 00:06:43.270
you can compile that.

00:06:43.370 --> 00:06:48.580
These are all the components
that you could compile in.

00:06:49.100 --> 00:06:51.460
and get working without--
it doesn't have,

00:06:51.500 --> 00:06:55.770
say, the high level UI components,
but all the low level stuff,

00:06:55.910 --> 00:07:01.390
all the cryptography,
the CDSA plug-in modules-- actually the

00:07:01.390 --> 00:07:05.460
next slide sort of talks about that.

00:07:05.460 --> 00:07:09.560
It makes it a little bit easier
for us to do export compliance.

00:07:09.560 --> 00:07:12.190
And the last point is really important.

00:07:12.370 --> 00:07:14.580
We really value your contributions.

00:07:14.580 --> 00:07:18.190
I mean,
the open source community has been great

00:07:18.440 --> 00:07:25.760
in looking over things and providing
suggestions and code and whatever.

00:07:25.800 --> 00:07:29.390
So we're really looking
forward to getting that input

00:07:29.390 --> 00:07:33.220
from all of you out there.

00:07:34.980 --> 00:07:41.240
So in more detail,
the things that we're making open source,

00:07:41.360 --> 00:07:44.920
the security.framework,
all the subprojects of that,

00:07:45.030 --> 00:07:48.820
so the authorization subframework,
secure transport,

00:07:48.900 --> 00:07:53.380
which is our SSL implementation
that ties into CDSA and all that,

00:07:53.380 --> 00:07:54.940
so that's in there.

00:07:56.740 --> 00:07:59.940
Keychain,
not the highest level APIs because

00:07:59.940 --> 00:08:04.190
those are actually in Carbon,
so that's not open source,

00:08:04.260 --> 00:08:08.730
but you can do all the Keychain
functionality with these lower level

00:08:08.730 --> 00:08:14.380
APIs and the code for security server.

00:08:14.820 --> 00:08:33.800
All of the plug-in modules for CDSA,
so the data library and

00:08:33.800 --> 00:08:33.800
cryptographic service provider.

00:08:33.800 --> 00:08:33.800
There's some ASN1 code.

00:08:33.800 --> 00:08:33.800
There's a lot of good utility code.

00:08:33.800 --> 00:08:33.800
There's a lot of really,
really good stuff in there,

00:08:33.800 --> 00:08:33.800
so we're really excited to be
able to make that available.

00:08:33.960 --> 00:08:38.690
I'll just have to mention what
the web page is because this

00:08:38.730 --> 00:08:41.830
just went live last night,
so of course it didn't

00:08:41.830 --> 00:08:44.220
make it on the slides,
but if you go to

00:08:44.340 --> 00:08:50.050
www.opensource.apple.com,
you can find the little

00:08:50.050 --> 00:08:53.360
blurb on security,
and that tells you where you can

00:08:53.360 --> 00:08:55.700
get the source from and all that.

00:09:03.450 --> 00:09:07.400
Okay, so talking just briefly
about the Keychain,

00:09:07.400 --> 00:09:14.120
this is a feature that a lot of you
will be familiar with from OS 9.

00:09:14.120 --> 00:09:20.560
A lot of the look and feel of it is
very much the same as it was on 9.

00:09:21.560 --> 00:09:24.870
I think the biggest thing
to realize is that on OS X,

00:09:24.870 --> 00:09:27.310
every single user has a Keychain.

00:09:27.310 --> 00:09:30.280
So you can pretty much count on that.

00:09:30.310 --> 00:09:32.850
I mean, even on 9,
if they didn't have one and you used it,

00:09:32.850 --> 00:09:35.210
it would come up and give
them the dialog to create one.

00:09:35.220 --> 00:09:40.270
But on 10, when they log in,
they have a default Keychain that's

00:09:40.270 --> 00:09:43.200
created with their login password.

00:09:43.200 --> 00:09:48.340
And all the system services use
that to store their passwords.

00:09:48.340 --> 00:09:54.910
So, for example, mail or... or, um, um,

00:09:59.700 --> 00:09:59.890
I can't think of the other ones now,
but anyway, with iTools and whatever.

00:09:59.890 --> 00:10:03.090
So all those passwords are
stored in the user's keychain.

00:10:03.090 --> 00:10:07.040
And we've actually done a really good
job of kind of making that transparent.

00:10:07.040 --> 00:10:08.080
So you log in.

00:10:08.310 --> 00:10:13.700
By default, it's unlocked throughout the
whole time that you are logged in.

00:10:13.700 --> 00:10:16.390
But of course,
you can change that setting so that

00:10:16.420 --> 00:10:18.690
it automatically locks or whatever.

00:10:18.700 --> 00:10:25.090
The idea is to make it as simple as
possible kind of for the average user.

00:10:25.090 --> 00:10:30.700
But if you're more security conscious,
you can do things like

00:10:32.390 --> 00:10:35.440
Make it lock more frequently.

00:10:35.460 --> 00:10:41.950
The biggest message that I have
to say about that-- and of course,

00:10:41.950 --> 00:10:44.520
Ken will go into real
detail about how to use it.

00:10:44.530 --> 00:10:48.860
Biggest message I have is if you are
saving-- if you need to save a password,

00:10:48.910 --> 00:10:50.270
use the keychain to do it.

00:10:50.440 --> 00:10:51.680
It's really, really easy.

00:10:51.880 --> 00:10:54.930
You only need basically two calls.

00:10:54.950 --> 00:10:57.970
You find it to see if it's there,
and if it's not there already,

00:10:57.970 --> 00:10:58.800
you can add it.

00:10:58.820 --> 00:10:59.460
That's it.

00:10:59.520 --> 00:11:04.490
And it's a very,
very small amount of code.

00:11:04.500 --> 00:11:09.090
It will save you perhaps some
embarrassment if you didn't

00:11:09.220 --> 00:11:10.340
quite implement it right.

00:11:10.340 --> 00:11:12.720
I mean,
we've gone to a lot of trouble to make

00:11:12.720 --> 00:11:17.260
sure that the keychain file is protected,
and applications that are not

00:11:17.260 --> 00:11:21.250
allowed to use a particular
password will either warn the user

00:11:21.250 --> 00:11:23.220
or prevent them from doing so.

00:11:23.290 --> 00:11:24.830
So we put in a lot of work.

00:11:24.840 --> 00:11:26.320
It's easy for you to use it.

00:11:26.320 --> 00:11:29.500
So that's my big message to you,
is just use it.

00:11:29.500 --> 00:11:33.700
If you have passwords, store them there.

00:11:33.710 --> 00:11:40.600
As I said,
it's mostly transparent to the users.

00:11:40.600 --> 00:11:44.440
We've really changed a lot since OS 9.

00:11:44.440 --> 00:11:47.170
Probably a lot of you are
familiar with the old rogue app

00:11:47.180 --> 00:11:48.490
alert that would pop up a lot.

00:11:48.650 --> 00:11:54.880
But we've managed to-- because
of the capabilities of OS 10,

00:11:54.880 --> 00:11:57.260
we've finally been able to do
that kind of the right way.

00:11:57.260 --> 00:11:59.360
And so the rogue app alert
just doesn't show up.

00:11:59.360 --> 00:12:04.310
It really only shows up
when it's supposed to.

00:12:04.370 --> 00:12:07.730
And it's an API that's
available through Carbon.

00:12:07.960 --> 00:12:12.300
Or you can now also call
these lower level APIs that

00:12:12.300 --> 00:12:14.690
are part of the open source.

00:12:16.890 --> 00:12:26.630
Okay, a completely new API that we've
introduced on X is the Authorization API.

00:12:26.850 --> 00:12:31.100
And I think right after this session,
Michael Brower is doing a

00:12:31.220 --> 00:12:34.880
complete walkthrough of all
the API calls and all that.

00:12:34.900 --> 00:12:39.520
But I did want to spend some time
here just so that people at least

00:12:39.520 --> 00:12:44.740
understand why we did that and why it
might be worth your while to go to the

00:12:44.740 --> 00:12:47.620
next session to hear more about it.

00:12:51.080 --> 00:12:56.840
One thing we realized looking at, well,
even on 9, but particularly on 10,

00:12:56.840 --> 00:13:02.280
there are a lot of places
where the user needs to,

00:13:02.480 --> 00:13:06.160
say, enter their admin
password to do something.

00:13:06.160 --> 00:13:08.340
So we've kind of...

00:13:17.390 --> 00:13:17.390
So, I've locked it down a little bit
so that you can't accidentally

00:13:17.390 --> 00:13:17.390
make a mistake or whatever.

00:13:17.390 --> 00:13:17.390
But initially,

00:13:17.900 --> 00:13:20.300
Different groups at Apple were
kind of doing it a different way,

00:13:20.300 --> 00:13:23.420
and they would check it here,
and there was no real central way.

00:13:23.420 --> 00:13:26.820
So one thing we did was we kind of
went around to all the groups and said,

00:13:26.820 --> 00:13:30.620
okay,
let's funnel through this one bottleneck,

00:13:30.630 --> 00:13:37.640
and with the idea that for any
given operation that you're doing,

00:13:37.640 --> 00:13:42.600
you can basically find out from
the user or find out from some

00:13:42.650 --> 00:13:48.510
settings that maybe the administrator
or the machine has configured,

00:13:48.560 --> 00:13:53.860
you can find out whether they are allowed
to do that operation at that time.

00:13:56.200 --> 00:14:00.550
And bottlenecking it through one
spot allows us to do a lot of

00:14:00.550 --> 00:14:04.870
great things like being able to,
say, cache the password for five

00:14:04.870 --> 00:14:06.480
minutes or something like that.

00:14:06.530 --> 00:14:09.590
It just kind of streamlines it a
little bit for the user so they're not

00:14:09.590 --> 00:14:11.550
typing this password in all the time.

00:14:11.560 --> 00:14:19.890
So from a really high level,
the Authorization API is basically

00:14:19.890 --> 00:14:24.900
trying to answer a yes-no question.

00:14:25.090 --> 00:14:31.170
Given an operation,
am I allowed to do it right now?

00:14:31.900 --> 00:14:35.560
I guess the really interesting part
comes through maybe the side effects,

00:14:35.560 --> 00:14:38.010
which is, okay,
how do you figure out whether they

00:14:38.200 --> 00:14:40.100
are allowed to do that or not?

00:14:40.150 --> 00:14:52.020
And one of the basic side effects that
can happen there is it may call off to

00:14:52.140 --> 00:14:58.010
these plugin modules that we have to
do different types of authentication.

00:14:58.010 --> 00:14:58.010
So,

00:14:58.510 --> 00:15:01.660
Let's take the really,
really simple example of if

00:15:01.800 --> 00:15:04.580
you have the Prefs panel,
you have the little lock.

00:15:04.580 --> 00:15:09.410
You just want to know whether
you are allowed to turn on

00:15:09.410 --> 00:15:12.630
your screensaver or something.

00:15:12.860 --> 00:15:16.290
If you click on that lock,
it might do a very simple

00:15:16.290 --> 00:15:17.740
authentication thing.

00:15:17.740 --> 00:15:21.070
It might say, oh,
is this user the administrator of that

00:15:21.070 --> 00:15:23.300
machine and does the password match?

00:15:23.300 --> 00:15:25.200
Okay, you're allowed to do it.

00:15:26.860 --> 00:15:30.540
But through this API,
we've set it up so that you can

00:15:30.580 --> 00:15:35.570
plug in different modules and those
could get evaluated and return,

00:15:35.570 --> 00:15:40.810
you know, ask for different types of
authentication from the user.

00:15:40.810 --> 00:15:43.790
For example,
as Craig mentioned with the PCSC stuff,

00:15:43.790 --> 00:15:45.600
now we can do smart card stuff.

00:15:45.620 --> 00:15:51.290
So you could be getting information off a
smart card or voice print or fingerprint,

00:15:51.380 --> 00:15:52.250
whatever.

00:15:52.250 --> 00:15:56.020
There are a lot of different
things that you can do.

00:15:56.020 --> 00:15:56.830
And it's set up so that you can
do a lot of different things.

00:15:56.850 --> 00:16:01.890
And it's set up so that you can chain
a whole bunch of these together and

00:16:01.890 --> 00:16:04.700
get answers from each one of them.

00:16:06.350 --> 00:16:10.300
I guess one other thing that I want
to point out is that it's not,

00:16:10.300 --> 00:16:14.410
this is not,
it does not give you the ability

00:16:14.460 --> 00:16:16.140
to do a particular operation.

00:16:16.140 --> 00:16:20.720
It's kind of assumed that it's
being called from a trusted

00:16:20.720 --> 00:16:23.150
app that could do it anyway.

00:16:23.150 --> 00:16:28.090
So it's really, in a way,
it's really a convenience or a

00:16:28.090 --> 00:16:33.410
service to the user that you are
asking the user whether or not

00:16:33.410 --> 00:16:36.280
you're allowed to do this operation.

00:16:36.300 --> 00:16:40.210
Because, of course,
if it wasn't a trusted process,

00:16:40.260 --> 00:16:44.190
they could just, well,
not call the API and just bypass

00:16:44.230 --> 00:16:46.830
all that authentication stuff.

00:16:46.830 --> 00:16:49.210
So that's something to keep in mind,
that that's,

00:16:49.210 --> 00:16:51.420
it's not really providing the capability.

00:16:51.420 --> 00:16:55.600
And as Michael will say later on,
you'll end up needing to have

00:16:55.600 --> 00:16:59.860
probably a set UID root tool or
something like that that can do,

00:16:59.860 --> 00:17:03.660
if that's what would be
required for the operation.

00:17:07.000 --> 00:17:11.740
The authentication modules could
do a couple different things.

00:17:11.740 --> 00:17:13.750
They might figure out who you are.

00:17:13.750 --> 00:17:18.750
So, for example,
look you up in some directory services

00:17:19.040 --> 00:17:22.280
database or net info or whatever.

00:17:22.280 --> 00:17:27.540
Or it could be looking at, say,
a fingerprint reader.

00:17:29.260 --> 00:17:34.770
The three things I list there are kind
of the security questions that you

00:17:34.770 --> 00:17:38.180
want to find out about authentication.

00:17:38.180 --> 00:17:40.630
Could be who you are.

00:17:40.630 --> 00:17:45.390
So, that's actually something
like a fingerprint.

00:17:45.400 --> 00:17:49.260
What you know would be like a
password and what you have might

00:17:49.260 --> 00:17:51.520
be something like a smart card.

00:17:51.520 --> 00:17:53.810
So,
if you have all three of those together,

00:17:53.840 --> 00:17:56.820
then you've really added
some security to the system.

00:17:58.940 --> 00:18:05.740
One other thing with these authentication
modules is that they may generate

00:18:05.740 --> 00:18:10.820
some sideband information that's
needed either for the next module

00:18:10.820 --> 00:18:17.800
down the line or for the ultimate
service that may need something.

00:18:17.800 --> 00:18:20.270
Like, for example,
let's say you're logging

00:18:20.270 --> 00:18:21.400
in with Kerberos.

00:18:21.430 --> 00:18:24.140
You need to know not only
username and password,

00:18:24.140 --> 00:18:26.230
but you also need to know the realm.

00:18:26.230 --> 00:18:30.140
So,
that would be... Those would be things

00:18:30.140 --> 00:18:35.540
that would get passed along so that at
the end of the operation you would know

00:18:35.540 --> 00:18:38.480
what you need to know to move forward.

00:18:38.750 --> 00:18:43.190
And then the last point is,
in a lot of cases,

00:18:43.390 --> 00:18:45.260
this operation might just succeed.

00:18:45.260 --> 00:18:49.010
Like the answer to the question,
you know, can I do this operation?

00:18:49.020 --> 00:18:50.460
The answer is always yes.

00:18:50.460 --> 00:18:53.550
It never does anything,
never throws a dialogue,

00:18:53.550 --> 00:18:55.400
never asks the user at all.

00:18:55.400 --> 00:18:58.570
The point is that you can configure
it for these different operations.

00:18:58.590 --> 00:19:05.910
So if you're in a more secure setup,
you could, you know, lock that down more.

00:19:06.200 --> 00:19:09.490
So we're, you know,
we're moving towards getting

00:19:09.490 --> 00:19:11.760
all that stuff working nicely.

00:19:16.270 --> 00:19:22.450
Okay, so just an example of probably
maybe a typical operation you

00:19:22.450 --> 00:19:24.340
might think of for authorization.

00:19:24.340 --> 00:19:27.480
Let's say you're logging
into the console.

00:19:27.480 --> 00:19:33.360
You could have several different steps
that you might have to go through.

00:19:33.360 --> 00:19:36.240
So you might have to type in
your username and password.

00:19:36.280 --> 00:19:39.830
The username, for example,
can go look off in a directory

00:19:39.830 --> 00:19:44.220
somewhere and figure out where your
home directory is and all that.

00:19:44.220 --> 00:19:48.210
The password, ideally you want to ask the
user for that because then

00:19:48.260 --> 00:19:50.220
they can unlock the keychain.

00:19:50.220 --> 00:19:59.910
You might have to insert a smart card or
fingerprint reader or voice recognition.

00:20:00.470 --> 00:20:04.600
Some of the operations that
you might be able to do,

00:20:04.600 --> 00:20:08.270
I mean logging in is an obvious one, but

00:20:08.340 --> 00:20:10.480
Unlocking the screen saver.

00:20:10.480 --> 00:20:14.220
You know, it would be nice to be able to
step up to your machine and as

00:20:14.220 --> 00:20:16.470
you walk back to your office say,
hey, I'm back,

00:20:16.520 --> 00:20:20.900
and have the screen saver just unlock
without having to type a password.

00:20:20.900 --> 00:20:27.980
Playing a CD is something that
comes up a lot in K-12 market.

00:20:27.980 --> 00:20:33.780
The teachers want to restrict
what CDs the kids can play.

00:20:33.780 --> 00:20:40.930
So that's an operation that we can,
by calling the Authorization API,

00:20:41.010 --> 00:20:44.120
you could set it up to configure
it so it could go off and look up

00:20:44.140 --> 00:20:49.570
in a playlist whether or not it's
actually allowed to play that CD.

00:20:49.600 --> 00:21:00.410
and Formatted Disk.

00:21:00.410 --> 00:21:00.410
That's kind of a good one to turn
on for your kindergarten kids so

00:21:00.410 --> 00:21:00.410
that they don't format your stuff.

00:21:02.870 --> 00:21:06.520
Okay, so anyway,
there's a more detailed session

00:21:06.520 --> 00:21:08.030
on that next after this.

00:21:09.800 --> 00:21:17.800
CDSA is the foundation for
this security architecture

00:21:17.800 --> 00:21:18.950
that I've been talking about.

00:21:18.950 --> 00:21:21.730
The Keychain is based on it.

00:21:21.840 --> 00:21:26.030
The secure transport stuff uses all that.

00:21:26.160 --> 00:21:29.070
All the cryptography stuff
that we do goes through this.

00:21:30.400 --> 00:21:33.490
It stands for
Common Data Security Architecture.

00:21:33.650 --> 00:21:38.890
Originally it came from Intel,
but now it's an open group standard.

00:21:38.890 --> 00:21:45.320
On OS 9 we implemented the
1.2 version of the standard.

00:21:45.320 --> 00:21:53.310
We learned a lot from doing that
and contributed a lot to the

00:22:03.670 --> 00:22:03.670
So that's what is in
OS X is the 2.0 standard.

00:22:04.000 --> 00:22:09.280
I guess one of the biggest features that
stands out about CDSA is that it uses

00:22:09.280 --> 00:22:11.830
plug-in modules to do a lot of the work.

00:22:11.920 --> 00:22:17.000
So, for example,
the Data Library module or CSP,

00:22:17.000 --> 00:22:22.040
Cryptographic Service Provider,
you can plug in,

00:22:22.060 --> 00:22:25.860
you can write a module to do
different types of crypto.

00:22:25.960 --> 00:22:31.070
Certificate Library and
Trust Policy module.

00:22:34.600 --> 00:22:42.130
Here's kind of a really rough block
diagram of how these things are laid out.

00:22:42.140 --> 00:22:46.360
Kind of the pieces in purple at
the bottom are the plug-in modules,

00:22:46.360 --> 00:22:51.770
and the CSSM layer is the kind of guts
of it that loads the different modules

00:22:51.770 --> 00:22:55.120
and helps them interact with each other.

00:22:55.600 --> 00:23:00.990
The layers in red are just some of
the sort of middle layers that we've

00:23:00.990 --> 00:23:03.700
written on top of the CDSA APIs.

00:23:03.700 --> 00:23:07.920
CDSA is a pretty extensive standard.

00:23:07.920 --> 00:23:12.340
I mean, the manual is about that thick,
you know, like 1,300 pages.

00:23:12.340 --> 00:23:15.650
So there's tons and tons of APIs,
but we found that when

00:23:15.650 --> 00:23:18.020
we were using them,
we kind of tended to

00:23:18.020 --> 00:23:20.210
group them together and,
you know,

00:23:20.310 --> 00:23:22.760
maybe use them in a particular way.

00:23:22.760 --> 00:23:27.130
So a lot of the stuff that you
would see in... in Security Core,

00:23:27.130 --> 00:23:30.840
for example, which you can see in
the open source archive,

00:23:30.840 --> 00:23:34.600
those are collecting together
these CDSA functions.

00:23:34.600 --> 00:23:38.720
Security HI is the user interface
stuff that you might see,

00:23:38.720 --> 00:23:42.540
like the dialog that pops
up to enter your password.

00:23:42.540 --> 00:23:47.120
Secure Transport is our
SSL implementation that uses

00:23:47.140 --> 00:23:51.600
our certificate libraries
and things like that.

00:23:51.620 --> 00:23:55.170
And then, you know,
you can write apps on top of that.

00:23:55.600 --> 00:24:00.980
I guess the biggest point is that if
you're writing to the APIs on top,

00:24:01.130 --> 00:24:04.210
even if the plugin stuff changes below,
your application isn't

00:24:04.210 --> 00:24:05.570
going to have to change.

00:24:05.580 --> 00:24:09.580
So you can really leverage as
people develop more stuff below.

00:24:09.690 --> 00:24:13.920
Your app can just, you know,
if there's suddenly a

00:24:13.920 --> 00:24:18.400
hardware crypto module,
then you could take advantage of that.

00:24:19.700 --> 00:24:29.100
[Transcript missing]

00:24:33.200 --> 00:24:44.430
So, the keychain is basically
the Apple file CSP DL.

00:24:44.450 --> 00:24:50.330
So, it's a combination of cryptographic
service provider and data library module.

00:24:50.330 --> 00:24:53.900
And that way,
when we write the keys out to the file,

00:24:53.900 --> 00:24:56.200
we can do the encryption
at the same time.

00:24:56.200 --> 00:24:58.200
We could have done it
as maybe separate ones,

00:24:58.200 --> 00:24:59.170
but it just turned out
to be a separate module.

00:24:59.200 --> 00:25:03.560
to be convenient to put it in one module.

00:25:04.210 --> 00:25:08.560
Another example of a DL that we
don't have now but would be not too

00:25:08.560 --> 00:25:10.910
hard to write would be an LDAP DL.

00:25:10.920 --> 00:25:14.970
So you could store things,
particularly say certificates

00:25:15.010 --> 00:25:17.760
or something like that,
you could store them in

00:25:17.780 --> 00:25:19.870
a public LDAP directory.

00:25:22.250 --> 00:25:27.410
Certificate Library Modules.

00:25:27.410 --> 00:25:32.220
Roughly it just knows how to
parse a public key certificate.

00:25:32.260 --> 00:25:44.240
So the one that we ship by default
does X.509 version 3 certificates.

00:25:44.610 --> 00:25:49.130
For a particular field
in the certificate,

00:25:49.160 --> 00:25:53.770
the layers up above can ask, okay,
what's the modification date on

00:25:53.770 --> 00:25:57.740
this or who signed it or whatever,
and the certificate library knows where

00:25:57.740 --> 00:26:00.100
in the certificate to grab that value.

00:26:00.100 --> 00:26:05.050
It would be possible to write
one that would know how to

00:26:05.050 --> 00:26:10.440
deal with a PGP certificate
or attribute certificates,

00:26:10.440 --> 00:26:14.940
which contain,
it's basically a way to take a

00:26:14.940 --> 00:26:19.230
bunch of attributes about something
and then sign it so that it's a

00:26:19.230 --> 00:26:23.190
little bit more certified maybe.

00:26:24.220 --> 00:26:28.290
Trust Policy Modules.

00:26:28.290 --> 00:26:32.710
This is an interesting one because
I think this is one that a lot of

00:26:33.590 --> 00:26:39.210
corporations or universities might
be interested in writing because

00:26:39.210 --> 00:26:43.870
the standard one that we ship,

00:26:44.390 --> 00:26:48.650
Basically says, okay,
given a certificate,

00:26:48.780 --> 00:26:52.330
how do you know whether or
not the user trusts that?

00:26:52.340 --> 00:26:56.150
And so the standard one
that we ship for X.509,

00:26:56.150 --> 00:26:59.930
we look, given a certificate,
we see who signed it,

00:26:59.960 --> 00:27:03.540
and then we see who signed that,
and finally we get down to a list

00:27:03.540 --> 00:27:05.590
of trusted root certificates.

00:27:05.620 --> 00:27:07.960
And if it matches one of
those root certificates,

00:27:07.960 --> 00:27:09.750
then we say, okay, it's trusted.

00:27:10.400 --> 00:27:16.260
But it could be that you don't
necessarily want to do it that way.

00:27:16.260 --> 00:27:20.600
One example there is you
could do a web of trust.

00:27:20.620 --> 00:27:23.390
So you could say, okay,
I'm only going to trust

00:27:23.430 --> 00:27:24.980
it if my pal trusted it.

00:27:25.000 --> 00:27:28.600
And so that would be a
different way to implement a TP.

00:27:28.600 --> 00:27:31.720
Or you could go look it up
in a corporate database.

00:27:31.720 --> 00:27:37.300
So there's a lot of different ways
that you can change how certificates

00:27:37.300 --> 00:27:39.380
are trusted on the system.

00:27:40.320 --> 00:27:44.450
by writing a trust policy module.

00:27:46.200 --> 00:28:10.600
[Transcript missing]

00:28:11.060 --> 00:28:16.100
I think the SDK is posted
on the security page,

00:28:16.100 --> 00:28:21.490
so for actually developing it,
that's available there.

00:28:23.290 --> 00:28:29.580
We wanted to make sure that it was
easy using this API to get to the

00:28:29.580 --> 00:28:34.320
CDSA APIs and try and make it pretty
easy if you had an application that was

00:28:34.320 --> 00:28:40.660
already using PCSC on another platform,
you'd at least be able to

00:28:40.660 --> 00:28:45.000
bring over that portion of the
code pretty easily onto 10.

00:28:46.700 --> 00:28:51.310
We tried really,
really hard to make it very easy to

00:28:51.310 --> 00:28:57.490
write a driver for the different readers
and there are several manufacturers

00:28:57.500 --> 00:29:08.890
that have already completed drivers
for different smart card readers.

00:29:23.460 --> 00:29:23.460
And for different types of smart cards,
you can actually write a different

00:29:23.460 --> 00:29:23.460
CSP to deal with to use the
cryptography that might be on the card.

00:29:24.770 --> 00:29:30.880
Here's kind of a complicated diagram
with how this all fits together.

00:29:30.880 --> 00:29:34.400
You can see down at the bottom that the
readers and the cards are down there.

00:29:34.400 --> 00:29:39.020
The idea is basically that you have
the applications at the top and if

00:29:39.040 --> 00:29:41.420
they're calling through these APIs,
they don't really need to

00:29:41.420 --> 00:29:43.320
know any of the details.

00:29:43.320 --> 00:29:46.780
I mean, PCSC can deal with,
it deals with all the

00:29:46.810 --> 00:29:48.620
resource management.

00:29:48.620 --> 00:29:51.540
So, for example, if you have a

00:29:51.900 --> 00:29:54.600
If you're in a situation where
you have like 10 different readers

00:29:54.600 --> 00:29:57.910
plugged in and they all have
different kinds of cards and whatever,

00:29:58.060 --> 00:29:59.220
this sorts it all out.

00:29:59.320 --> 00:30:04.290
It knows whether several
applications can talk to a particular

00:30:04.370 --> 00:30:06.760
reader at once or whatever.

00:30:06.760 --> 00:30:12.760
So all those details are
basically taken care of for you.

00:30:18.400 --> 00:30:32.500
[Transcript missing]

00:30:32.900 --> 00:30:36.500
This is an area, of course,
that a lot of you,

00:30:36.500 --> 00:30:43.140
if you're familiar with Unix,
then you know a lot of these things,

00:30:43.140 --> 00:30:46.060
security features that you can use.

00:30:46.060 --> 00:30:53.410
Basically, OS X ships with most of
the services turned off.

00:30:53.440 --> 00:30:58.320
So, you know, FTP and Telnet,
things like that.

00:30:58.740 --> 00:31:04.420
The average user,
the average Macintosh customer, you know,

00:31:04.420 --> 00:31:08.130
if they're not familiar with that,
it's safer to just leave it off.

00:31:08.160 --> 00:31:11.070
If they find out,
or if they're interested,

00:31:11.070 --> 00:31:13.250
they can go and re-enable that.

00:31:16.550 --> 00:31:26.620
We turn off the root password by default,
but that can be re-enabled.

00:31:26.620 --> 00:31:29.660
And I think that was one of
the very common questions.

00:31:29.660 --> 00:31:32.910
People weren't complaining
that we had turned off root,

00:31:32.910 --> 00:31:36.140
they just wanted to know how
to turn it back on again.

00:31:36.140 --> 00:31:45.830
So there's a Tech Info library note on
that if you search the TIL database,

00:31:45.830 --> 00:31:48.590
you can find that.

00:31:50.710 --> 00:31:55.110
File permissions has been
one of the areas that's been

00:31:55.170 --> 00:31:57.400
pretty tricky to figure out.

00:31:57.400 --> 00:32:01.630
And I think roughly the basic goal
is we're trying to make sure that

00:32:01.640 --> 00:32:05.900
it works the right way with OS 9.

00:32:05.940 --> 00:32:10.210
And so a lot of those things are...

00:32:10.940 --> 00:32:13.230
Maybe not set the way
that you're used to,

00:32:13.230 --> 00:32:17.290
say, from another Unix system, but

00:32:17.700 --> 00:32:25.360
and John Hurley.

00:32:25.370 --> 00:32:25.370
They're set up to work,
to interoperate with

00:32:25.370 --> 00:32:25.370
Classic and things like that.

00:32:27.470 --> 00:32:33.690
I guess the biggest thing is there are a
lot of different books on Unix security,

00:32:33.690 --> 00:32:38.090
and most of those things
apply on Mac OS X.

00:32:38.100 --> 00:32:46.540
So I would say look to the resources
that you know from that area.

00:32:46.540 --> 00:32:52.300
We try and keep things pretty much
standard if we can at that level.

00:32:53.440 --> 00:32:59.160
And as we hook it more
up into the upper levels,

00:32:59.160 --> 00:33:05.100
well, we try and keep the behavior pretty
much the same as you're used to.

00:33:23.390 --> 00:33:23.390
I think they talked a little bit more
about this in the BSD session too.

00:33:25.240 --> 00:33:33.530
So here are some of the resources
for these things that are available.

00:33:33.750 --> 00:33:38.500
The security webpage at
developer.apple.com has some good

00:33:38.500 --> 00:33:49.730
links off to our software and to some
other links that are interesting.

00:33:51.110 --> 00:33:57.240
can find the specifications
for CDSA at the Open Group.

00:33:57.240 --> 00:34:02.580
We also have a pointer there
on the security web page.

00:34:03.350 --> 00:34:09.930
And as I mentioned,
the www.opensource.apple.com

00:34:09.940 --> 00:34:15.520
has our source.

00:34:16.290 --> 00:34:18.340
Oh, that's, sorry.

00:34:18.340 --> 00:34:21.620
Again,
here's another thing that just came up,

00:34:21.700 --> 00:34:23.520
so it's not on the slides,
but I'm glad I remembered

00:34:23.550 --> 00:34:24.220
to talk about it.

00:34:24.220 --> 00:34:30.160
We have posted a security webpage.

00:34:30.160 --> 00:34:33.660
A lot of people had
kind of been wondering,

00:34:33.660 --> 00:34:37.260
you know,
how we would deal with things like

00:34:37.260 --> 00:34:42.960
cert advisories and just security
holes that might pop up in OS X.

00:34:42.960 --> 00:34:49.440
So, sorry that this isn't on the slide,
but again, this page went live yesterday.

00:34:49.440 --> 00:35:00.720
So, if you go to www.apple.com
slash support slash security.

00:35:02.300 --> 00:35:05.300
and then security.html.

00:35:05.310 --> 00:35:11.730
That has a whole page that is
designed for people that have,

00:35:11.900 --> 00:35:17.960
they think they've found a security
problem with OS X or they may

00:35:17.960 --> 00:35:20.220
need some security assistance.

00:35:20.240 --> 00:35:27.730
And that page contains the resources
that kind of tell you how to

00:35:29.590 --> 00:35:34.090
So, it's a central point for
kind of reporting problems.

00:35:34.090 --> 00:35:39.590
We have a team within Apple,
so that stuff gets distributed, you know,

00:35:39.590 --> 00:35:41.400
really immediately.

00:35:41.400 --> 00:35:44.640
And we, depending,
it gets routed to a lot

00:35:44.640 --> 00:35:46.440
of different groups.

00:35:46.440 --> 00:35:51.660
Each group will kind of look at it
and determine if it's something that

00:35:51.660 --> 00:35:54.540
is in their area of responsibility.

00:35:54.660 --> 00:35:58.580
And we'll try and fix it
as quickly as possible.

00:35:58.600 --> 00:36:04.910
We, of course,
have the software update mechanism,

00:36:04.910 --> 00:36:13.130
so we have been able to actually already
release some fixes in each of the

00:36:13.130 --> 00:36:18.260
software updates that's gone out so far.

00:36:18.260 --> 00:36:18.260
I think we pretty much shipped

00:36:19.600 --> 00:36:35.100
[Transcript missing]

00:36:39.170 --> 00:36:42.500
Here are some of the related
sessions that I mentioned.

00:36:42.500 --> 00:36:47.280
Right after this is the
Authorization API session.

00:36:47.280 --> 00:36:51.180
At 2 o'clock is the
session on the Keychain,

00:36:51.180 --> 00:36:53.560
learning how to use that.

00:36:53.560 --> 00:36:58.670
Tomorrow afternoon,
there's a session on Kerberos.

00:36:58.670 --> 00:37:02.620
We'll talk about what
we're doing with Kerberos.

00:37:02.620 --> 00:37:08.200
And on Friday,
there's the feedback forum.

00:37:11.000 --> 00:37:27.900
[Transcript missing]

00:37:28.010 --> 00:37:32.110
I think you can also find
that on the web page.

00:37:32.110 --> 00:37:35.340
If you have any questions,
particularly if you're interested in

00:37:35.340 --> 00:37:38.960
developing security related products,
he can find all the

00:37:38.960 --> 00:37:40.490
right resources for you.