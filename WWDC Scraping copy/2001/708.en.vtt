WEBVTT

00:00:01.050 --> 00:00:06.460
is Godfrey DiGiorgi.

00:00:09.350 --> 00:00:10.100
Thank you very much.

00:00:10.100 --> 00:00:12.500
It's a pleasure to see so
many people here today.

00:00:12.500 --> 00:00:15.400
You are the survivors.

00:00:15.470 --> 00:00:17.230
There's only a couple
more sessions after this.

00:00:17.290 --> 00:00:19.620
There are feedback forums,
which we would like you to attend.

00:00:19.620 --> 00:00:23.290
And without any further ado,
as tenacious as you are,

00:00:23.300 --> 00:00:26.260
I'd like to introduce Mike Rossetti, Mr.

00:00:26.260 --> 00:00:27.850
Tenacious himself.

00:00:30.630 --> 00:00:32.580
Okay.

00:00:32.720 --> 00:00:35.600
Thanks, Jonathan.

00:00:35.710 --> 00:00:36.600
That's a joke.

00:00:36.650 --> 00:00:39.100
All right.

00:00:39.260 --> 00:00:41.090
Well, welcome.

00:00:41.790 --> 00:00:49.180
There was this Microsoft engineer
and this Cocoa engineer

00:00:49.230 --> 00:00:52.190
and Godfrey on this train.

00:00:55.590 --> 00:00:58.600
Sorry I'm not going there.

00:00:58.620 --> 00:01:00.780
We'll do this instead.

00:01:00.850 --> 00:01:02.960
So welcome.

00:01:02.970 --> 00:01:04.440
No, you're not getting that joke.

00:01:04.440 --> 00:01:07.270
I'll tell you later
if you really want it.

00:01:07.860 --> 00:01:12.690
They should put a "up",
this side "up" on here.

00:01:12.710 --> 00:01:14.800
Okay.

00:01:15.000 --> 00:01:16.460
Why are you here today?

00:01:16.460 --> 00:01:19.800
Well, we're going to be slightly
irreverent in this session.

00:01:19.800 --> 00:01:22.510
Maybe crack a couple of inside jokes.

00:01:22.660 --> 00:01:23.230
You'll pick them up.

00:01:23.530 --> 00:01:27.020
But I certainly hope that this
session is going to be full of good

00:01:27.200 --> 00:01:31.180
information that will help you make
a decision in how you're going to

00:01:31.180 --> 00:01:37.790
approach your development in getting
your application onto Mac OS X.

00:01:37.800 --> 00:01:43.560
And so that's the intent
of the presentation today.

00:01:44.320 --> 00:01:51.360
Now, these objectives that are on this
slide haven't changed in years.

00:01:51.550 --> 00:01:54.370
They haven't changed since 1985, really.

00:01:54.380 --> 00:01:58.040
And so I don't think there's any
need to go through each one of them.

00:01:58.040 --> 00:01:59.360
I mean, the languages have changed.

00:01:59.430 --> 00:02:01.760
The operating systems have changed.

00:02:01.800 --> 00:02:05.740
But the goal of any framework
is to make it possible for you

00:02:05.750 --> 00:02:10.100
to get your application out and
going and take advantage of the

00:02:10.100 --> 00:02:12.540
wonderful Mac OS technology.

00:02:14.290 --> 00:02:18.870
And we think that the
Apple C++ frameworks are the

00:02:19.010 --> 00:02:20.870
key to success in this realm.

00:02:21.010 --> 00:02:23.540
Here's what we're going to discuss today.

00:02:23.540 --> 00:02:26.040
Many of you are familiar with Mac App.

00:02:26.340 --> 00:02:27.520
One more poll question.

00:02:27.520 --> 00:02:31.220
How many of you are
familiar with Mac App?

00:02:31.370 --> 00:02:31.760
Very good.

00:02:31.800 --> 00:02:34.540
And there's a number of you
who'd like to be a little more

00:02:34.540 --> 00:02:37.040
familiar because of the C++ term.

00:02:37.040 --> 00:02:39.030
Is that correct?

00:02:40.190 --> 00:02:40.420
Okay.

00:02:40.420 --> 00:02:45.950
We're going to talk about
the Apple Class Suites,

00:02:46.060 --> 00:02:50.320
which is a new offering,
or should I say an offspring of Mac App.

00:02:50.590 --> 00:02:54.900
And you may remember that, you know,
previously Mac App was this huge

00:02:54.900 --> 00:02:58.820
monolithic framework where if you,
it's like a camel, you know,

00:02:58.820 --> 00:03:02.730
the nose got in the tent and all
of a sudden you had this big beast.

00:03:02.760 --> 00:03:06.290
Well, it's not that way anymore,
and anyone familiar with

00:03:06.290 --> 00:03:09.900
Mac App over the last few years
knows that that's the case.

00:03:10.100 --> 00:03:14.390
We want to talk about a few new
Mac OS features and how you can take

00:03:14.490 --> 00:03:17.330
advantage of those in ACS and Mac App.

00:03:17.600 --> 00:03:20.880
And we want to talk about our
progress in the C++ standard

00:03:20.880 --> 00:03:22.980
library adoption that we have.

00:03:23.230 --> 00:03:26.170
And, of course,
to iterate over the Project Builder

00:03:26.170 --> 00:03:28.670
CodeWarrio development environments.

00:03:28.760 --> 00:03:33.030
What we won't discuss,
this is not a tutorial on Mac App.

00:03:33.160 --> 00:03:37.030
So, if you're hoping to learn everything
there is to know about Mac App,

00:03:37.120 --> 00:03:39.940
come next year when we'll
have about six sessions.

00:03:40.130 --> 00:03:44.340
This isn't going to be a tutorial on ACS.

00:03:44.470 --> 00:03:46.430
We're not going to
teach you all about C++.

00:03:46.560 --> 00:03:51.310
What we're going to do is hit the
highlights of our C++ offerings that

00:03:51.330 --> 00:03:56.530
will leverage your investment in your
current C++ code or what you'd like,

00:03:56.540 --> 00:03:58.600
decide you'd like to do.

00:03:58.600 --> 00:04:03.060
You know, we want to help you get that
killer application out there.

00:04:03.080 --> 00:04:06.030
Now,
you might have seen this slide earlier.

00:04:06.040 --> 00:04:10.080
And this is one of the advantages of
having a late afternoon Friday slide.

00:04:10.080 --> 00:04:12.840
You can go rip off the other sessions.

00:04:12.840 --> 00:04:17.100
And, well, there have been many
frameworks introduced since

00:04:17.100 --> 00:04:19.760
1985 when Mac App came out.

00:04:19.760 --> 00:04:22.330
And before Mac App,
there were a few other things like

00:04:22.480 --> 00:04:24.340
ClassGal and some small talk stuff.

00:04:24.490 --> 00:04:29.050
But Mac App was really the first
commercially available framework.

00:04:29.060 --> 00:04:34.700
And some other frameworks like to roll
out their pedigree like there's some

00:04:34.830 --> 00:04:37.850
royal heritage associated with it.

00:04:37.860 --> 00:04:41.390
But with Mac App and ACS,
we think... we've taken the next step.

00:04:45.120 --> 00:04:56.540
So, 7 of 9 in this slide
represents Mac App Release 15,

00:04:56.540 --> 00:04:59.360
and then R2D2 represents ACS.

00:05:02.640 --> 00:05:05.590
Well, how does this all fit together?

00:05:05.920 --> 00:05:12.260
Essentially, we want you to take your
investment in your product,

00:05:12.260 --> 00:05:12.260
your key

00:05:12.500 --> 00:05:43.300
[Transcript missing]

00:05:43.510 --> 00:05:45.920
So I gave a little bit of history
on Mac App for those of you

00:05:45.920 --> 00:05:47.240
who aren't familiar with it.

00:05:47.240 --> 00:05:51.760
It started in Object Pascal,
and over the years it's migrated to C++.

00:05:51.980 --> 00:05:58.110
And it's gotten away from the monolithic
class hierarchy approach that it had.

00:05:58.120 --> 00:06:02.070
And now we're introducing, well,
we introduced ACS a couple of years ago,

00:06:02.080 --> 00:06:05.500
but we're able to productize it now
so that you can actually download

00:06:05.500 --> 00:06:10.050
it and use it in your applications
without pulling in all of Mac App.

00:06:10.060 --> 00:06:13.640
So I'm going to talk about that
a little bit more in a second.

00:06:18.490 --> 00:06:20.900
Let's make sure I don't miss a note here.

00:06:20.900 --> 00:06:22.580
It's about Mac App and a lot more.

00:06:22.580 --> 00:06:25.240
It's maturing offspring.

00:06:25.240 --> 00:06:26.780
Let's see.

00:06:27.540 --> 00:06:33.450
So, I want to emphasize this ACS side
of things because now I don't

00:06:33.450 --> 00:06:35.990
want you to have the wrong
impression about Mac App being

00:06:36.200 --> 00:06:39.260
this huge monolithic framework.

00:06:39.260 --> 00:06:43.740
For example, Tom's going to talk a little
bit about C Carbon Event,

00:06:43.740 --> 00:06:47.180
which is a thin wrapper on
the Carbon events that you've

00:06:47.180 --> 00:06:49.180
been hearing about all week.

00:06:49.390 --> 00:06:52.740
Well, this C++ wrapper class on
Carbon events provides you nice,

00:06:52.750 --> 00:06:56.100
convenient accessors and
mutators for that Carbon event.

00:06:56.800 --> 00:06:59.260
And pre-flighting, a little robustness,
you know.

00:06:59.260 --> 00:07:02.380
And so instead of checking for no,
we'll throw an exception

00:07:02.380 --> 00:07:03.850
or something like that.

00:07:03.860 --> 00:07:07.300
Things that a C++ person
really wants to see.

00:07:09.220 --> 00:07:12.650
All right,
this is the way up until last year

00:07:12.770 --> 00:07:16.210
or so an application written to
Mac App might have looked like.

00:07:16.300 --> 00:07:18.700
Before that,
it would have just been Mac App.

00:07:18.740 --> 00:07:20.960
But we introduced the Apple Class Suites.

00:07:21.110 --> 00:07:21.990
That's what ACS is.

00:07:22.050 --> 00:07:23.330
I think I forgot to mention that.

00:07:23.570 --> 00:07:26.910
And so your application mixes
in a little Mac App and a little

00:07:26.920 --> 00:07:28.720
bit of the Apple Class Suites.

00:07:28.740 --> 00:07:31.340
Now, you can still build your
applications this way,

00:07:31.350 --> 00:07:35.200
much to the relief of those who
have a lot of legacy code in here.

00:07:35.220 --> 00:07:38.090
But this is no longer
the only way to do it.

00:07:38.600 --> 00:07:39.950
You could just use ACS.

00:07:40.230 --> 00:07:44.400
You could just pull in C string AC,
which is a thin wrapper on the

00:07:44.400 --> 00:07:46.650
standard library string class.

00:07:46.760 --> 00:07:50.590
And the reason we did that one
was because we wanted to provide a

00:07:50.600 --> 00:07:55.830
little compatibility with resource
files and conversion to CFString,

00:07:55.840 --> 00:07:56.660
things like that.

00:07:57.200 --> 00:08:00.950
And I mentioned Carbon events.

00:08:02.900 --> 00:08:07.540
And you can build ACS as a static
library or as a dynamic library if you

00:08:07.670 --> 00:08:10.550
want and take advantage of everything
that's in it or just pick and choose.

00:08:10.640 --> 00:08:11.110
But what's in it?

00:08:11.220 --> 00:08:16.920
So here's a list of the suites,
the class suites that are available

00:08:17.090 --> 00:08:19.450
in the Apple Class Suites.

00:08:19.600 --> 00:08:23.410
These suites comprise ACS.

00:08:23.440 --> 00:08:27.890
And they're basically the conceptual
children of Mac App over the years.

00:08:27.970 --> 00:08:29.450
We've started to distill them out.

00:08:29.960 --> 00:08:36.900
Mac App pioneered things like
dependencies and adorners and commands

00:08:36.900 --> 00:08:40.780
and things that are now written
about in design patterns books.

00:08:42.400 --> 00:08:44.920
So we allow you to take advantage
of that without pulling in

00:08:44.920 --> 00:08:47.750
all of Mac App if you choose,
or you can pull in the

00:08:47.980 --> 00:08:50.040
heavier Mac App classes.

00:08:52.490 --> 00:08:57.580
Of course, everything we do in the C++
Frameworks group is buzzword enabled.

00:08:58.550 --> 00:09:02.850
If we didn't use standard C++,
the cost to you would be much higher.

00:09:02.860 --> 00:09:05.210
You'd have two different
types of iterators.

00:09:05.220 --> 00:09:07.640
You'd have the
Mac App ACS type of iterators,

00:09:07.840 --> 00:09:10.170
and you'd have the
standard library iterators.

00:09:10.240 --> 00:09:12.250
Well, why do that?

00:09:12.380 --> 00:09:15.960
So we've been moving to using
standard library iterators,

00:09:15.960 --> 00:09:17.580
standard containers.

00:09:17.580 --> 00:09:23.540
In fact, one of the suites we provide
in ACS is a thing called FTL,

00:09:23.540 --> 00:09:29.680
and it provides some compatibility with
the standard library iterator classes.

00:09:29.680 --> 00:09:31.170
I believe Tom might mention that.

00:09:31.230 --> 00:09:34.860
So I won't steal his thunder thumper.

00:09:34.860 --> 00:09:37.490
You'll cut that, won't you?

00:09:41.640 --> 00:09:45.570
So, the other thing is that we try to
make it easy to take advantage of

00:09:45.650 --> 00:09:47.540
those great Mac OS technologies.

00:09:47.540 --> 00:09:49.180
One of those is AppleScript.

00:09:49.280 --> 00:09:51.060
Use AppleScript.

00:09:51.060 --> 00:09:52.200
It's wonderful.

00:09:52.200 --> 00:09:57.600
It makes products very
valuable to people.

00:09:57.600 --> 00:10:00.560
Look at Photoshop.

00:10:00.560 --> 00:10:02.880
They used scriptability a long time ago.

00:10:02.880 --> 00:10:07.790
Well, Mac App makes it possible
with very little effort.

00:10:07.860 --> 00:10:11.070
Scriptable, recordable, attachable.

00:10:11.500 --> 00:10:13.580
Now, most of you know what scriptable is.

00:10:13.690 --> 00:10:15.700
I think all of you know
what scriptable is.

00:10:15.750 --> 00:10:17.760
Most of you know what recordable is,
but attachable?

00:10:17.760 --> 00:10:19.130
I mean, this is really cool stuff.

00:10:19.180 --> 00:10:23.250
You can attach scripts to documents
that you save that do things like

00:10:23.330 --> 00:10:25.360
if you try to open a document,
they ask for a password

00:10:25.460 --> 00:10:26.600
or do something like that.

00:10:26.750 --> 00:10:30.850
It's way cool stuff,
and we make it easy for you to use this.

00:10:32.360 --> 00:10:34.400
I believe in Apple script, by the way.

00:10:34.510 --> 00:10:38.980
The other key point I'd like to
make is that Apple Class Suites

00:10:39.000 --> 00:10:41.180
works with other frameworks,
such as Power Plant.

00:10:41.180 --> 00:10:46.570
In fact, we do have an example of that,
I believe, in the release that we have

00:10:46.720 --> 00:10:49.000
called the counter example.

00:10:49.130 --> 00:10:53.530
Well, with this brief introduction,
I'd like to introduce Tom Becker,

00:10:53.530 --> 00:10:56.980
who will give an architectural
overview of some of the

00:10:56.980 --> 00:11:00.300
work that we've been doing,
and with some emphasis on how it

00:11:00.410 --> 00:11:06.490
will affect your code and some topics
about some of the lightweight classes.

00:11:06.500 --> 00:11:10.690
Tom is an invaluable member of the team,
and I certainly heartily

00:11:10.700 --> 00:11:12.880
welcome him up on stage with me.

00:11:12.940 --> 00:11:15.350
Okay, thank you.

00:11:15.360 --> 00:11:16.180
Tom.

00:11:19.360 --> 00:11:21.490
Here's a clicker, by the way.

00:11:21.520 --> 00:11:23.780
Now what button do I press?

00:11:26.400 --> 00:11:28.200
That went backwards.

00:11:28.220 --> 00:11:30.400
OK.

00:11:30.400 --> 00:11:32.540
All right, so--

00:11:33.280 --> 00:11:39.560
What I would like to do is go into a
little bit of technical detail about some

00:11:39.560 --> 00:11:46.760
of the design issues and architectural
features in what we've got pretty

00:11:46.990 --> 00:11:52.350
much focused on the current release,
the stuff that is new that's

00:11:52.870 --> 00:11:57.190
available right now if you go
to the developer tools website.

00:11:57.390 --> 00:12:02.090
And so we're going to talk
about the Apple Class Suites

00:12:02.100 --> 00:12:07.300
and how they work by themselves,
talk about Core Foundation and

00:12:07.300 --> 00:12:09.840
what we're doing with that,
what we're doing with standard

00:12:09.840 --> 00:12:11.690
library and Carbon events.

00:12:13.630 --> 00:12:17.160
Okay,
so the basic idea of Apple Class Suites,

00:12:17.160 --> 00:12:19.840
as Mike has explained,
is that it's a lightweight

00:12:19.940 --> 00:12:21.540
utility class library.

00:12:21.540 --> 00:12:29.120
I wouldn't necessarily use the word
framework to describe it because

00:12:29.300 --> 00:12:33.710
it doesn't really affect the way
that you do your programming.

00:12:33.720 --> 00:12:36.530
It doesn't affect your overall
flow program or overall design.

00:12:36.640 --> 00:12:42.500
Instead, it's lots of very useful C++
classes that you can take advantage

00:12:42.500 --> 00:12:46.480
of anywhere in your application
that you feel the need to.

00:12:46.480 --> 00:12:51.060
And it doesn't require Mac App.

00:12:51.080 --> 00:12:54.780
So the emphasis on this has
always been lightweight,

00:12:54.790 --> 00:12:56.720
efficient, easy to use.

00:12:56.760 --> 00:13:01.140
And let's see.

00:13:03.360 --> 00:13:07.480
Now, one of the new examples that
we've got is the counter example,

00:13:07.480 --> 00:13:12.360
and that's an example that DTS did
that is written in Power Plant,

00:13:12.360 --> 00:13:19.100
and it shows how you can use ACS in
conjunction with Power Plant,

00:13:19.100 --> 00:13:22.380
and it shows really how easy it is.

00:13:23.170 --> 00:13:26.850
And we just had to do a couple of
little tweaks in ACS in order to

00:13:26.850 --> 00:13:31.810
make sure that it would go along with
Power Plant's way of doing things.

00:13:31.820 --> 00:13:35.780
So that means, for example,
if any code in ACS throws an exception,

00:13:35.880 --> 00:13:40.250
it actually throws an L exception so
that the standard Power Plant exception

00:13:40.500 --> 00:13:42.240
catching code will catch it.

00:13:42.280 --> 00:13:46.710
And so the idea there is that
ACS is very good at fitting in,

00:13:46.790 --> 00:13:52.130
and that's the general philosophy
that we want to continue with it.

00:13:52.170 --> 00:13:52.220
Okay.

00:13:52.530 --> 00:13:56.380
And, you know, it's placing the emphasis
again on being easy to use,

00:13:56.580 --> 00:13:59.770
and in order for it to be easy to use,
it has to work the way that the

00:13:59.860 --> 00:14:01.370
calling code expects it to work.

00:14:03.670 --> 00:14:09.090
And there are a lot of classes in ACS.

00:14:09.180 --> 00:14:12.520
I mean,
you saw the diagram that Mike showed

00:14:12.520 --> 00:14:13.940
with all of the suites there.

00:14:13.940 --> 00:14:18.550
And so I can't really go
into it all in detail.

00:14:18.630 --> 00:14:23.260
But if you're doing some work
in Power Plant and you're going,

00:14:23.260 --> 00:14:25.270
gee,
I wish there was a class that did this,

00:14:25.790 --> 00:14:27.620
take a look in ACS.

00:14:27.620 --> 00:14:31.960
Like we've got a really nice class for
working with QuickTime Atom containers.

00:14:32.160 --> 00:14:35.340
We've got a really nice class
for working with Carbon Events.

00:14:35.360 --> 00:14:42.760
And there are also some classes
like Templatized Handle Locker

00:14:42.760 --> 00:14:47.520
that works better than the one
that is built into Power Plant.

00:14:47.540 --> 00:14:49.640
And you can just use it.

00:14:49.660 --> 00:14:55.000
The footprint contribution on
something like this is in single-digit

00:14:55.010 --> 00:14:57.640
number of K bytes kind of thing.

00:14:57.640 --> 00:14:59.760
It's a very, very small effect.

00:15:00.720 --> 00:15:02.730
You pay only for what you use.

00:15:08.310 --> 00:15:13.210
There are a couple of
different ways you can use ACS.

00:15:13.380 --> 00:15:17.990
If you are using Mac App,
you're already using ACS.

00:15:18.290 --> 00:15:21.110
That's pretty easy right there.

00:15:21.620 --> 00:15:24.700
Like I said,
you can create Power Plant graphical

00:15:24.700 --> 00:15:27.300
applications and use ACS in those.

00:15:27.510 --> 00:15:30.630
You can also,
if you have your own framework

00:15:30.630 --> 00:15:35.280
or you've got a different
framework that you're using,

00:15:35.400 --> 00:15:37.300
ACS is something that
could really help you out.

00:15:37.300 --> 00:15:39.110
It helps us out with Mac App.

00:15:39.300 --> 00:15:41.300
It could help you out
with your framework.

00:15:41.450 --> 00:15:44.250
You can also do things that don't
have a graphical interface at all.

00:15:44.320 --> 00:15:52.430
Several of the ACS examples that
we've got are for command line tools.

00:15:57.630 --> 00:16:03.890
Let's see, so now moving forward,
I want to...

00:16:05.010 --> 00:16:08.500
Let's see, switch to demo.

00:16:08.590 --> 00:16:10.120
We've got it.

00:16:10.280 --> 00:16:16.140
And show a little bit of what we've
got with the Carbon Event Support that

00:16:16.190 --> 00:16:18.690
we have in Mac App.

00:16:18.930 --> 00:16:25.510
And so this is the standard Mac app
skeleton sample application.

00:16:26.710 --> 00:16:31.700
And this is, can you see right here
where the CPU monitor is?

00:16:31.700 --> 00:16:38.300
And now, actually it took a little bit of
work to put this demo together

00:16:38.330 --> 00:16:43.180
because we actually had to find
something where a Mac app wasn't

00:16:43.180 --> 00:16:45.120
already incredibly well behaved.

00:16:45.390 --> 00:16:51.670
But we were able to find that there
actually is an issue with mouse tracking,

00:16:51.740 --> 00:16:54.000
so if I click, you know,
just hold the mouse down,

00:16:54.000 --> 00:16:57.120
you can see that we're
doing an awful lot of,

00:16:57.120 --> 00:17:02.230
you know, while not, you know,
while still down, mouse tracking in here.

00:17:02.340 --> 00:17:05.380
So we're taxing the CPU pretty heavily.

00:17:05.380 --> 00:17:08.620
And of course,
if you do this in your application,

00:17:08.620 --> 00:17:12.300
what's gonna happen is your customers
are gonna ask if all of your programmers

00:17:12.300 --> 00:17:14.430
are rejects from the Word 6 project.

00:17:15.400 --> 00:17:17.520
And

00:17:18.390 --> 00:17:23.430
And so you go, gosh,
what can I do about that?

00:17:23.570 --> 00:17:26.740
And the answer is you can actually
switch to using Carbon events.

00:17:26.780 --> 00:17:29.110
So here's the Carbon event
version of Skeleton.

00:17:29.160 --> 00:17:30.680
I'm going to click the mouse down.

00:17:30.680 --> 00:17:32.940
As you can see,
I'm doing mouse tracking and

00:17:32.940 --> 00:17:37.200
auto-scrolling and stuff like that,
and the CPU usage is quite reasonable.

00:17:37.200 --> 00:17:39.420
And the cool thing about this, you go,
well,

00:17:39.420 --> 00:17:41.350
what do I have to do in order to do this?

00:17:41.480 --> 00:17:45.680
And the answer is going to
come up in a future slide,

00:17:46.100 --> 00:17:50.100
But it's pretty easy.

00:17:50.200 --> 00:17:53.340
So, there we go.

00:17:53.340 --> 00:17:56.960
In fact, it's one line of code.

00:17:56.970 --> 00:18:02.190
Let me actually go ahead and--

00:18:02.610 --> 00:18:04.900
There's the line of code.

00:18:05.040 --> 00:18:08.380
F use Carbon events equals true.

00:18:09.530 --> 00:18:11.950
This is the very first
release where we've got

00:18:11.950 --> 00:18:15.640
Carbon Event Support in the framework.

00:18:15.640 --> 00:18:18.480
By default,
we're shipping with it turned off.

00:18:18.480 --> 00:18:21.180
We're being a little bit
conservative about it.

00:18:21.280 --> 00:18:24.720
It's the sort of thing where there may
be some stuff in your application where

00:18:24.760 --> 00:18:31.100
you might need to write some code in
order to fully utilize the Carbon Events.

00:18:31.100 --> 00:18:35.270
What we're heading for is a
future release where it's going

00:18:35.270 --> 00:18:39.400
to be turned on by default and
you get all this stuff for free.

00:18:39.400 --> 00:18:44.700
Actually, I'm being a little bit
fast and loose here.

00:18:44.700 --> 00:18:46.980
I actually changed two lines of code.

00:18:46.980 --> 00:18:50.010
The other line is I changed skeleton
application to Carbon Events so

00:18:50.010 --> 00:18:51.300
you could see which is which.

00:18:54.150 --> 00:18:56.060
So let's get back to where I was.

00:18:56.060 --> 00:18:56.550
OK.

00:18:56.560 --> 00:19:05.240
Now, talking about some other really
cool stuff that we've got in

00:19:05.240 --> 00:19:11.720
release 15 is we have a set of C++
interfaces for Core Foundation.

00:19:11.720 --> 00:19:18.990
If you're using Carbon or
if you want to use Mac OS X,

00:19:19.190 --> 00:19:22.960
Core Foundation is
essential for doing that.

00:19:22.960 --> 00:19:26.340
And what we're trying to do is we're
trying to make programming with

00:19:26.340 --> 00:19:34.740
Core Foundation natural for C++
developers so that it's object-oriented,

00:19:34.740 --> 00:19:39.140
the syntax is as simple and
straightforward as it can be,

00:19:39.140 --> 00:19:42.170
the error handling is done
through exceptions the way

00:19:42.170 --> 00:19:43.740
that you would expect it.

00:19:47.780 --> 00:19:51.930
The way to think about it,
and actually I should give credit

00:19:51.930 --> 00:19:56.040
to Andrew Demkin on the Finder
team who helped us out with

00:19:56.040 --> 00:20:00.020
some really great ideas for how
to structure these interfaces.

00:20:00.110 --> 00:20:05.780
And so he's one of the key people
who's responsible for making

00:20:05.890 --> 00:20:09.010
them as easy to use as they are.

00:20:09.010 --> 00:20:13.870
The idea is that we're defining the
interfaces that you would expect

00:20:13.870 --> 00:20:16.460
ought to have been there always.

00:20:16.460 --> 00:20:21.220
And what you have to do in
order to actually start using

00:20:21.300 --> 00:20:27.450
Core Foundation in an object-oriented
way is include the header.

00:20:28.110 --> 00:20:34.520
And then all of your Core Foundation type
references that you already

00:20:34.750 --> 00:20:36.200
have now are object references.

00:20:36.200 --> 00:20:42.250
If you just go and you can start making
method calls on them and it just works.

00:20:42.300 --> 00:20:45.860
The one caveat,
one thing you have to kind of

00:20:45.930 --> 00:20:51.100
watch out for is if you use C++
syntax for calling Core Foundation,

00:20:51.100 --> 00:20:53.400
if there's an error it
will throw an exception.

00:20:53.400 --> 00:20:59.880
If you use the procedural syntax,
which then if there is an

00:20:59.980 --> 00:21:05.690
error it will return a code or
it will not return anything.

00:21:05.910 --> 00:21:09.300
But it won't throw, you know,
because you're just calling

00:21:09.300 --> 00:21:11.120
this procedural interface.

00:21:11.280 --> 00:21:14.180
But I think that's also
what you would expect too.

00:21:16.240 --> 00:21:19.120
Okay,
now another cool thing that we have,

00:21:19.170 --> 00:21:23.540
and this is really something that
we're just getting started on.

00:21:23.540 --> 00:21:28.740
It's going to be something that
I think will be very useful.

00:21:28.740 --> 00:21:31.720
But what we've got is
we've got the basic idea,

00:21:31.730 --> 00:21:34.740
we've got an implementation
which is out there,

00:21:34.740 --> 00:21:37.540
and we want to get it out there and
get people looking at it and get

00:21:37.540 --> 00:21:41.260
people thinking about the issues
of how well does it work for them,

00:21:41.260 --> 00:21:45.840
and giving us feedback on the design
and on the implementation and what

00:21:45.840 --> 00:21:48.400
other stuff they would like to see.

00:21:48.400 --> 00:21:55.420
And this is bridge classes between C++
standard containers and style programming

00:21:55.510 --> 00:21:58.850
and the Core Foundation containers.

00:21:58.920 --> 00:22:04.250
And so the first class that we
have is the Foundation Template

00:22:04.340 --> 00:22:11.060
Library String class,
and it stores a string using a CFString.

00:22:11.260 --> 00:22:18.270
So that it's fully compatible with the
Mac OS X APIs for Unicode strings and

00:22:18.400 --> 00:22:25.370
for all of the new features that you
really want to be able to connect to.

00:22:25.500 --> 00:22:25.720
But you can construct that string using
standard template library iterators,

00:22:25.720 --> 00:22:25.860
you can construct them from
standard library strings,

00:22:25.870 --> 00:22:26.070
you can use standard library algorithms,
you can use standard library code,

00:22:26.070 --> 00:22:26.400
you can use standard
code from the library.

00:22:26.400 --> 00:22:30.640
So that's a really cool thing
that we're going to be able to do.

00:22:30.640 --> 00:22:34.010
And you can build your
own version of the String.

00:22:34.010 --> 00:22:36.520
And it's going to be really cool.

00:22:36.520 --> 00:22:36.520
And I think it's going to be
really cool to see how that works.

00:22:36.610 --> 00:22:42.110
So that's a really cool thing
that we're going to be able to do.

00:22:42.110 --> 00:22:46.470
And you can build your
own version of the String.

00:22:46.590 --> 00:22:51.620
And it's going to be really
cool to see how that works.

00:22:52.110 --> 00:22:55.920
I want to give a little bit of a caveat.

00:22:55.920 --> 00:23:01.080
This is not intended to be
the absolute best string for

00:23:01.080 --> 00:23:02.640
doing absolutely everything.

00:23:02.640 --> 00:23:09.930
You're going to find that in some cases
you really want to use a C-CF string,

00:23:09.930 --> 00:23:11.960
which is our object-oriented C-F string.

00:23:12.530 --> 00:23:16.790
In some cases, you're going to just want
to use standard strings,

00:23:16.800 --> 00:23:23.700
or you may have a library that has
come in from somewhere else that is

00:23:23.700 --> 00:23:25.160
implemented using standard strings.

00:23:25.270 --> 00:23:26.010
That's just fine.

00:23:26.020 --> 00:23:27.180
Just keep on doing that.

00:23:27.240 --> 00:23:31.510
And what FTL string can do is it
makes it incredibly easy to build

00:23:31.510 --> 00:23:36.180
this bridge or connection between
the standard library way of doing

00:23:36.180 --> 00:23:40.650
things and the Mac OS X interface
that you want to connect to.

00:23:46.270 --> 00:23:50.340
Okay, now what are we actually doing
with the standard library itself?

00:23:50.340 --> 00:23:54.880
Our basic philosophy is the
standard library is the wheel

00:23:54.880 --> 00:23:57.700
that is like the best wheel.

00:23:57.700 --> 00:23:59.720
We think it's great.

00:23:59.720 --> 00:24:02.680
We are moving to adopt it.

00:24:02.680 --> 00:24:06.130
We have done an awful lot
already in adopting it.

00:24:06.190 --> 00:24:07.780
There is still more that we need to do.

00:24:07.780 --> 00:24:13.170
We're taking a stepwise,
incremental approach towards doing it,

00:24:13.190 --> 00:24:15.880
in part because we want to
bring you along with us.

00:24:15.940 --> 00:24:20.810
And make it so that it's easy for you
to transition to the benefits of using

00:24:20.920 --> 00:24:23.460
the standard library and your stuff.

00:24:23.780 --> 00:24:29.080
And we also want to make sure that
we're getting it right as we go along.

00:24:30.840 --> 00:24:36.200
But the basic idea is that
we're Apple C++ frameworks.

00:24:36.260 --> 00:24:38.400
We're making it easy
to use C++ on the Mac.

00:24:38.710 --> 00:24:44.330
That means we're also making it easy
to use standard C++ types on the Mac.

00:24:44.940 --> 00:24:50.300
And so for where we're at
right now in this process,

00:24:51.170 --> 00:24:54.680
If you use Release 15,
you will be using standard strings.

00:24:54.720 --> 00:25:03.190
And we have put a lot of work into
compatibility so that instead of

00:25:03.190 --> 00:25:07.440
using standard string directly,
we've created the CstringAC,

00:25:07.440 --> 00:25:09.910
which is a very thin
wrapper on standard string,

00:25:09.920 --> 00:25:13.130
and it will automatically
convert Pascal strings to

00:25:13.130 --> 00:25:14.940
standard strings for you.

00:25:16.260 --> 00:25:21.410
And we're making it very easy to convert
back and forth in order to work with

00:25:21.490 --> 00:25:24.540
the toolbox because that's something
that we know that you need to do.

00:25:28.660 --> 00:25:34.670
So that's an area where we're already
well along on the conversion process.

00:25:35.310 --> 00:25:40.660
And let's see, the next one,
as far as standard containers,

00:25:40.780 --> 00:25:43.740
we're using them in several places now.

00:25:43.740 --> 00:25:48.900
And it's something that you
really ought to consider using.

00:25:48.920 --> 00:25:56.120
The legacy containers that we've got,
CListAC, CDynamicArrayAC,

00:25:56.200 --> 00:26:02.420
the standard containers are going
to replace those in pretty much

00:26:02.420 --> 00:26:03.530
everywhere in the framework.

00:26:03.720 --> 00:26:08.710
I think we'll continue to make the
legacy containers available so that

00:26:08.820 --> 00:26:11.860
if you don't want to change your code,
you don't have to.

00:26:11.860 --> 00:26:14.470
But as time goes on,
we really are going to be moving

00:26:14.530 --> 00:26:16.840
towards using the standard containers.

00:26:16.840 --> 00:26:20.670
We think they're more efficient
and they're easier to work with.

00:26:23.690 --> 00:26:27.850
And now as far as streams are concerned,
there are some really nifty

00:26:27.900 --> 00:26:29.800
features in ACS streams.

00:26:29.800 --> 00:26:37.160
And we're looking at ways that we can
make it so that those features will be

00:26:37.300 --> 00:26:40.150
available with standard streams as well.

00:26:40.160 --> 00:26:43.880
But for right now,
we're continuing to use ACS streams

00:26:43.880 --> 00:26:50.490
because things like counting streams and
handle streams are so incredibly useful.

00:26:51.600 --> 00:26:54.890
And we're not going to get
away from that right now.

00:26:57.810 --> 00:27:05.680
Okay, for Carbon Events, check out the
C Carbon Event AC class in ACS.

00:27:05.800 --> 00:27:10.540
It makes it really easy, convenient,
and safer to access Carbon Events.

00:27:11.240 --> 00:27:16.250
Whether you're using Mac App or not,
actually,

00:27:16.250 --> 00:27:20.200
especially if you're not using Mac App,
if you're going to look at one class,

00:27:20.280 --> 00:27:23.700
this is the class I would recommend
that you take a look at because it

00:27:23.710 --> 00:27:27.410
will make it an awful lot easier
for you to get up and running on

00:27:27.410 --> 00:27:31.360
Carbon Events if you're using your
own framework or if you're using a

00:27:31.360 --> 00:27:33.810
different framework other than Mac App.

00:27:33.820 --> 00:27:37.590
If you are using Mac App,
then you might want to consider

00:27:37.590 --> 00:27:39.850
writing one more line of code.

00:27:39.880 --> 00:27:47.180
Okay, so let's bring back Mike.

00:27:54.220 --> 00:27:55.200
Thank you, Tom.

00:27:55.200 --> 00:28:00.360
Good stuff there.

00:28:00.680 --> 00:28:04.430
Let's talk for a minute about
the challenge of getting your

00:28:04.980 --> 00:28:12.500
microphone in your back pocket.

00:28:12.500 --> 00:28:12.500
I should have shaved this morning.

00:28:17.680 --> 00:28:21.270
Okay,
I think you got the impression from Tom.

00:28:21.320 --> 00:28:23.330
These aren't slides,
these aren't just slides.

00:28:23.460 --> 00:28:25.270
This stuff actually works.

00:28:25.430 --> 00:28:26.780
It's ready for you today.

00:28:26.930 --> 00:28:31.540
Go to the Mac App website, download ACS,
take a look at it, give us some feedback,

00:28:31.960 --> 00:28:35.080
tell us if you like it,
tell us what you don't like about it,

00:28:35.170 --> 00:28:36.730
we'll fix it.

00:28:36.880 --> 00:28:39.680
But you can move your applications
to Mac OS X today and take

00:28:39.710 --> 00:28:41.300
advantage of these features.

00:28:41.300 --> 00:28:43.440
And there are people who
are actually doing it.

00:28:43.560 --> 00:28:46.800
There are some in the audience
who have already moved R15.

00:28:46.800 --> 00:28:49.520
In fact,
there are some in the audience who moved

00:28:49.610 --> 00:28:51.820
R15 after it was posted on Tuesday.

00:28:51.820 --> 00:28:55.630
There are wonderful PowerBooks that
they are carrying around with

00:28:55.630 --> 00:28:57.400
them using AirPort today.

00:28:57.400 --> 00:28:59.480
Incredible technology, isn't it?

00:28:59.580 --> 00:29:00.720
I'll mention a couple.

00:29:00.720 --> 00:29:05.760
Artma Medical Technologies,
they've got a couple of applications.

00:29:06.670 --> 00:29:10.700
Virtual Implant Navigator,
Virtual Implant Simulator.

00:29:10.700 --> 00:29:12.600
They use Mac App and QuickTime.

00:29:12.600 --> 00:29:14.490
Scheduled for a summer release.

00:29:14.500 --> 00:29:17.510
This is an application that
helps dentists in the planning

00:29:17.510 --> 00:29:19.410
and drilling of dental implants.

00:29:19.440 --> 00:29:20.810
I was hoping to have a demo.

00:29:25.970 --> 00:29:32.900
Tom Myers and his crew, Pete Hawk,
this is BD Biosciences, is that right?

00:29:32.900 --> 00:29:32.900
That's Pete.

00:29:32.900 --> 00:29:34.440
That's Pete.

00:29:34.630 --> 00:29:37.140
Well, I mentioned Tom anyway.

00:29:37.140 --> 00:29:39.140
BD BD.

00:29:39.140 --> 00:29:44.860
They're porting a suite of
applications and drivers to

00:29:44.860 --> 00:29:46.180
OS X that use the C++ framework.

00:29:46.460 --> 00:29:49.010
Flow Cytometry.

00:29:49.020 --> 00:29:50.680
This is like blood analysis.

00:29:50.680 --> 00:29:53.100
Another wonderful demo.

00:29:53.370 --> 00:29:58.680
They're in various stages of development,
looking to launch six applications and

00:29:58.680 --> 00:30:02.300
three drivers by the end of the year,
followed on by three more.

00:30:02.300 --> 00:30:07.300
TextCo has -- that's Anders, isn't it?

00:30:07.300 --> 00:30:09.910
Anders Pitta.

00:30:11.440 --> 00:30:12.680
Texco is his client.

00:30:12.880 --> 00:30:17.140
Gene Construction Kit 2.5.

00:30:18.520 --> 00:30:23.600
Okay, coming, he says on here,
possibly a beta test

00:30:23.720 --> 00:30:24.750
version within a week.

00:30:24.840 --> 00:30:28.470
And, okay, so what else?

00:30:33.470 --> 00:30:36.200
I mentioned Calc and
Apple System Profiler,

00:30:36.200 --> 00:30:40.450
and Calc is about my level of capability,
and I'll let Mark take the real

00:30:40.450 --> 00:30:42.140
complex Apple System Profiler.

00:30:42.140 --> 00:30:47.060
We would have had a really great
experience converting Calc.

00:30:47.220 --> 00:30:50.590
It just was too short of an effort.

00:30:50.620 --> 00:30:52.440
It literally took minutes of work.

00:30:52.520 --> 00:30:56.930
It essentially took about five
minutes to set up the project,

00:30:57.030 --> 00:30:59.760
builder project, then I compiled.

00:31:00.740 --> 00:31:03.810
And unfortunately,
I shot myself in the foot by

00:31:03.930 --> 00:31:07.930
changing do-need-disk-space,
which will be familiar to old Mac appers,

00:31:07.930 --> 00:31:10.080
to a const C++ function.

00:31:10.080 --> 00:31:12.800
And as you know,
when you change a function to const,

00:31:12.850 --> 00:31:14.300
it has this ripple effect.

00:31:14.420 --> 00:31:17.050
But I'm happy to say I've
shot you all in the foot,

00:31:17.160 --> 00:31:17.560
too.

00:31:17.560 --> 00:31:23.030
The lesson for this is do not
postpone your day of constness.

00:31:23.040 --> 00:31:28.720
The other thing I did was I used
pre-built resources in the example,

00:31:28.800 --> 00:31:32.010
so when you take a look at Calc,
you'll notice that all the resources

00:31:32.080 --> 00:31:33.240
have been pre-built in there.

00:31:33.680 --> 00:31:37.400
The reason for that was because when
I did this project late last year,

00:31:37.660 --> 00:31:39.840
the resource compiler wasn't quite ready.

00:31:40.250 --> 00:31:42.820
It is ready now,
and so we'll put an update in that

00:31:43.060 --> 00:31:47.250
will actually build the resources
for you using project builder.

00:31:47.280 --> 00:31:48.800
It wasn't a big deal.

00:31:48.800 --> 00:31:53.860
So, quick build,
and Calc was ready to run as

00:31:53.870 --> 00:31:57.300
an honorable Maco citizen.

00:31:58.140 --> 00:32:00.410
Let's see,
now let me bring Mark Dawson up.

00:32:00.500 --> 00:32:02.430
There we go.

00:32:02.590 --> 00:32:04.280
Let me bring Mark Dawson up.

00:32:04.360 --> 00:32:08.220
He's the author, I guess I could say,
of Apple System Profiler.

00:32:08.220 --> 00:32:13.150
And Apple System Profiler is a
wonderful application for demonstrating

00:32:13.150 --> 00:32:15.330
Mac app and ACS capabilities.

00:32:15.330 --> 00:32:17.340
I'll let Mark talk to that.

00:32:17.380 --> 00:32:20.060
But it is fully
scriptable and recordable,

00:32:20.060 --> 00:32:20.790
isn't it?

00:32:20.930 --> 00:32:21.900
Is it recordable?

00:32:21.900 --> 00:32:22.540
No, it's recordable.

00:32:22.590 --> 00:32:24.260
Okay, well it's wonderfully scriptable.

00:32:24.260 --> 00:32:24.610
Yes.

00:32:24.640 --> 00:32:26.930
And I'll let him address this.

00:32:26.930 --> 00:32:27.700
Mark?

00:32:28.200 --> 00:32:31.910
Okay.

00:32:32.870 --> 00:32:37.460
Well, for those of you who don't know,
Apple System Profiler creates

00:32:37.570 --> 00:32:39.950
a profile of your software
and hardware on your drive.

00:32:40.000 --> 00:32:42.440
On OS 9, it can find a lot of stuff.

00:32:42.560 --> 00:32:45.220
On OS 10, it can actually,
using some routines,

00:32:45.340 --> 00:32:46.760
find even more stuff on your drive.

00:32:46.800 --> 00:32:52.510
Using Mac App,
it was extremely fast to make the port.

00:32:53.600 --> 00:32:58.920
Some of you were last year, just before,
actually a few hours before the demo,

00:32:58.920 --> 00:33:01.420
I was able to demo
Apple System Profiler coming up

00:33:01.420 --> 00:33:04.200
on OS X using Carbon and Mac App.

00:33:04.360 --> 00:33:07.710
In the worldwide beta,
I was able to ship a product,

00:33:07.710 --> 00:33:11.370
and then around December,
I was able to port in about one

00:33:11.370 --> 00:33:13.770
week with the code I had to Mac O.

00:33:13.780 --> 00:33:18.140
And Apple System Profiler ships
on OS X as a Mac O application

00:33:18.140 --> 00:33:21.100
in the 10.0 release and on.

00:33:23.200 --> 00:33:24.530
*starts to cough*

00:33:25.940 --> 00:33:29.980
It was a very quick transition,
I'd say two weeks for the UI.

00:33:29.980 --> 00:33:35.240
Going from the R14 to the R15
was only about a couple days.

00:33:35.240 --> 00:33:39.580
And most of the transition time
I took was to use a lot of the

00:33:39.580 --> 00:33:41.950
new ACS classes that help a lot.

00:33:42.340 --> 00:33:45.560
Right now, I have two versions of
Apple System Profiler,

00:33:45.560 --> 00:33:48.160
one for OS X and one for OS 9.

00:33:48.160 --> 00:33:54.240
The OS 9 one still uses CodeWarrior 4,
just for compatibility reasons.

00:33:54.300 --> 00:33:59.190
I can ship the same exact source
code with only a few power defines

00:33:59.300 --> 00:34:02.520
from R15 and Mac OS and also OS 9.

00:34:02.520 --> 00:34:05.410
So it's just a matter of one's
compiled on CodeWarrior and one's

00:34:05.600 --> 00:34:07.000
compiled on Project Builder.

00:34:07.000 --> 00:34:08.240
So it's actually that easy.

00:34:08.240 --> 00:34:12.150
And what really made that transition
smooth was using the ACS suites.

00:34:12.210 --> 00:34:15.600
As Mike said,
my application is very scriptable.

00:34:15.600 --> 00:34:20.330
I think, I believe in the Carbon book,
it is actually an example of

00:34:20.330 --> 00:34:22.660
scripting for Apple programs.

00:34:22.760 --> 00:34:25.820
It's probably the next most
scriptable program after the Finder.

00:34:25.820 --> 00:34:30.450
And what has really helped me was
the ACS classes for scripting.

00:34:30.460 --> 00:34:33.340
You just take,
basically you shove a value in

00:34:33.340 --> 00:34:37.220
a variable and you pass it and
Mac App takes care of everything else.

00:34:37.310 --> 00:34:39.360
I don't really know how
to script an application,

00:34:39.360 --> 00:34:39.970
to be honest.

00:34:40.060 --> 00:34:42.210
If something breaks, I have to go to Tom.

00:34:42.220 --> 00:34:45.230
Because it's so easy,
I actually haven't had to learn it,

00:34:45.230 --> 00:34:48.580
which may be good, maybe it's bad,
but I haven't had to do it.

00:34:48.680 --> 00:34:51.920
And Apple System Profiler
is fully scriptable.

00:34:52.840 --> 00:34:55.580
Again, the transition was very,
very small.

00:34:55.580 --> 00:34:58.760
Most of the problems I had
is I was the test case,

00:34:58.760 --> 00:35:02.230
the big app test case for most of
Mac App as it was being brought up.

00:35:02.340 --> 00:35:06.740
And as part of the Mac App team,
if I found something, I had to fix it.

00:35:06.820 --> 00:35:13.290
So, actually Mac App has been tested
on Apple System Profiler and I use

00:35:13.290 --> 00:35:16.920
quite a bit of Mac App and all my
tabs and controls and everything.

00:35:16.920 --> 00:35:19.150
Unfortunately for some of you,
I don't use pop-ups.

00:35:19.240 --> 00:35:20.830
So I know that's one of
the things that's come up.

00:35:20.990 --> 00:35:23.730
But it has been a very...
It's been a quick transition.

00:35:23.820 --> 00:35:25.780
It's gone very smooth.

00:35:25.920 --> 00:35:28.420
Again, I say the ACS classes have really,
really helped.

00:35:28.640 --> 00:35:32.440
I'm as much of a developer as any of you.

00:35:32.440 --> 00:35:34.430
I run into all the same problems.

00:35:34.440 --> 00:35:36.620
I read the Carbon list all the time.

00:35:36.740 --> 00:35:39.530
And ACS again and again has helped me.

00:35:39.600 --> 00:35:42.620
And then Mac App,
I really haven't had to do much work.

00:35:42.620 --> 00:35:44.630
It's outside of the
initial Carbon transition.

00:35:44.680 --> 00:35:50.660
So for me as a developer and not just
reporting to Mike Rossetti over here,

00:35:50.660 --> 00:35:52.360
Mac App has been a great win for me.

00:35:52.760 --> 00:35:56.100
I just haven't had to do a lot of work.

00:35:57.550 --> 00:36:01.000
I guess the lessons learned,
things you all will run into.

00:36:01.000 --> 00:36:04.710
Carbonizing will unearth bugs.

00:36:04.710 --> 00:36:05.620
It did for me.

00:36:05.620 --> 00:36:07.870
You'll be really lucky
if it doesn't for you.

00:36:07.870 --> 00:36:10.260
Most of it,
a lot of times it's memory bugs.

00:36:10.280 --> 00:36:15.130
OS X is a great platform for catching
memory bugs because if you write to zero,

00:36:15.310 --> 00:36:19.860
instead of the system letting you
do that and corrupting someone else,

00:36:19.860 --> 00:36:21.280
it just crashes.

00:36:21.280 --> 00:36:24.230
And if you've been to any of
the GDB sessions and stuff,

00:36:24.240 --> 00:36:26.980
they have wonderful
tools for finding leaks.

00:36:27.570 --> 00:36:30.170
Something equivalent to Spotlight
you can do using GDB and it's

00:36:30.170 --> 00:36:31.560
really been very wonderful.

00:36:31.560 --> 00:36:36.460
The other thing I ran into a lot,
and it's my own programming fault,

00:36:36.680 --> 00:36:41.620
is on OS X, on Project Builder,
Bool is four bytes, not one byte.

00:36:41.630 --> 00:36:44.940
And if you have structures that
require that you know where

00:36:44.940 --> 00:36:47.590
things are in the structure,
you'll lose.

00:36:47.590 --> 00:36:48.850
And I had.

00:36:49.050 --> 00:36:50.070
And those were my bugs.

00:36:50.070 --> 00:36:51.480
Those weren't Mac app bugs.

00:36:51.480 --> 00:36:53.200
I have to say they were just mine.

00:36:53.200 --> 00:36:57.370
Those are the kind of things I ran
into that had nothing to do with Mac.

00:36:57.500 --> 00:37:00.880
But again, the stuff I had to do
with Mac app went very,

00:37:00.880 --> 00:37:02.710
very smoothly.

00:37:04.650 --> 00:37:07.420
The things I've done that
changed a little with ASP,

00:37:07.420 --> 00:37:09.820
I have a single source code.

00:37:09.820 --> 00:37:12.500
I've included the
Mac app sources into ASP.

00:37:12.500 --> 00:37:17.550
A lot of that was done just
because so the build systems

00:37:17.550 --> 00:37:20.550
in Apple could compile them.

00:37:20.550 --> 00:37:23.640
They can't compile right now
sources that are outside and

00:37:23.640 --> 00:37:27.180
libraries and applications together,
so I've had to do that.

00:37:27.710 --> 00:37:29.790
The other thing I did
is just to save time,

00:37:29.820 --> 00:37:32.620
I ripped out files that
I didn't particularly use.

00:37:32.620 --> 00:37:34.440
That saves time compiling.

00:37:34.440 --> 00:37:38.130
The other thing I did,
actually this shows up in a post.

00:37:38.130 --> 00:37:40.900
If you have developers,
you can look on the

00:37:40.900 --> 00:37:43.120
developer seed sites for ASP.

00:37:43.120 --> 00:37:49.130
But I've created a static text control
using the current static text in

00:37:49.130 --> 00:37:55.600
Mac app uses an edit text view instead
of the Carbon static text control.

00:37:55.600 --> 00:37:57.520
And I've converted that to use that.

00:37:57.620 --> 00:38:00.820
And it's helped a lot since the edit
text doesn't give you anti-alias text.

00:38:00.820 --> 00:38:04.630
And that should be showing
up in a future Mac app soon.

00:38:04.720 --> 00:38:09.620
But again,
the Mac app has made my transition a lot.

00:38:09.770 --> 00:38:11.710
And ASP is a big app.

00:38:11.970 --> 00:38:13.300
Well, probably medium, I'd say.

00:38:13.300 --> 00:38:14.810
It's probably about
100,000 lines of code.

00:38:14.900 --> 00:38:17.200
So it's not tiny.

00:38:17.300 --> 00:38:20.660
I know some people have
a million lines of code,

00:38:20.750 --> 00:38:23.200
but it takes a while to compile.

00:38:24.360 --> 00:38:26.500
So I'll leave it over
here to Mike Rossetti.

00:38:26.500 --> 00:38:27.660
And just leave you with it.

00:38:27.660 --> 00:38:32.340
Mac App has really made my life-- Thanks,
Mark.

00:38:32.350 --> 00:38:32.830
Thanks, Mark.

00:38:32.840 --> 00:38:34.570
Thanks, Mark.

00:38:42.320 --> 00:38:47.780
Some of you saw this slide a
little bit earlier in the week.

00:38:47.780 --> 00:38:50.660
And I'm not actually with a slide.

00:38:50.660 --> 00:38:55.720
I'm not actually taking a
license with what Ed said.

00:38:55.720 --> 00:39:04.160
Ed Bose, who's done incredible work
on the Carbon event model.

00:39:04.160 --> 00:39:06.910
He was explaining, of course,
during the session how

00:39:07.290 --> 00:39:11.660
back in the early days,
this is how you wrote your application.

00:39:11.680 --> 00:39:15.980
And all the applications had to
write their own event loop and their

00:39:15.980 --> 00:39:20.660
own dispatcher and their handlers
for whatever events came through.

00:39:20.690 --> 00:39:27.740
And then he explained that, of course,
16 years later, after he graduated-- he

00:39:27.770 --> 00:39:29.720
graduated 16 years ago.

00:39:29.770 --> 00:39:35.820
Don't want to give the wrong impression--
how the new Carbon event manager

00:39:36.300 --> 00:39:38.960
actually handles a lot of this for you.

00:39:38.960 --> 00:39:41.210
But now,
those of you with some experience in

00:39:41.270 --> 00:39:44.990
Mac App know that we were doing this
16 years ago in Mac App because this is

00:39:45.080 --> 00:39:49.120
the responsibility of a good framework,
is to take those things

00:39:49.120 --> 00:39:52.160
that you do all the time,
that everybody has to do,

00:39:52.160 --> 00:39:55.340
and provide the implementation of them.

00:39:55.410 --> 00:40:02.040
So we're delighted that the new
Carbon event mechanism provides this

00:40:02.040 --> 00:40:07.680
for us because now we can take-- it's a
wonderful fit for the event dispatching

00:40:07.680 --> 00:40:10.540
that's implemented in Mac App.

00:40:10.650 --> 00:40:12.900
And this just fits right in.

00:40:13.230 --> 00:40:18.920
So you'll see that the dispatcher
in Mac App will become extremely

00:40:18.920 --> 00:40:20.520
simple or maybe just disappear.

00:40:20.870 --> 00:40:22.900
So we're very happy about this.

00:40:23.100 --> 00:40:25.550
But we did it 16 years ago.

00:40:26.060 --> 00:40:30.580
So one perspective is when
you build your applications,

00:40:30.580 --> 00:40:32.310
this is the model that
you could build against.

00:40:32.330 --> 00:40:34.350
And there's nothing wrong with this.

00:40:34.460 --> 00:40:38.380
I mean, build a Carbon if that's
what you like to do.

00:40:38.380 --> 00:40:42.220
But how does Mac App and
ACS fit into this model?

00:40:42.220 --> 00:40:49.950
Well, it provides a nice higher-level
framework on top of the Carbon APIs and

00:40:49.950 --> 00:40:54.420
the Carbon low-level framework that
they're providing in Carbon Events.

00:40:55.770 --> 00:40:57.670
And if I say so myself,
it's a perfect fit.

00:40:57.790 --> 00:41:02.580
I mean, do you want exceptions thrown
when there's a problem in Carbon?

00:41:02.580 --> 00:41:03.680
Yes, I think you do.

00:41:03.680 --> 00:41:08.030
Do you want robustness in the interfaces
so that if you pass a bad value,

00:41:08.040 --> 00:41:09.210
that's caught?

00:41:09.250 --> 00:41:10.760
Yes, I think you do.

00:41:10.760 --> 00:41:13.690
So if you're using C++,
this is the way to get it.

00:41:14.030 --> 00:41:18.090
ACS or Mac App provide that for you.

00:41:18.540 --> 00:41:22.740
So what does Mac App and
ACS Release 15 bring to the

00:41:22.830 --> 00:41:26.400
party besides adding 15% to 10?

00:41:26.400 --> 00:41:33.680
Just to kind of go over this quickly,
Project Builder support,

00:41:33.680 --> 00:41:37.260
the Core Foundation classes,
the Carbon Event support,

00:41:37.260 --> 00:41:38.050
Standards Strings.

00:41:38.090 --> 00:41:39.090
I think Tom said all of this.

00:41:39.180 --> 00:41:40.750
Have this slide get in here.

00:41:40.760 --> 00:41:44.390
And ACS is available all
by itself if you choose.

00:41:44.480 --> 00:41:46.710
And in Project Builder,
I wanted to hit just a

00:41:46.710 --> 00:41:48.260
couple of highlights here.

00:41:48.260 --> 00:41:53.420
You can build the Apple Class Suites as a
static library or as a dynamic framework,

00:41:53.430 --> 00:41:54.890
ACS.framework.

00:41:54.900 --> 00:41:58.650
We provide some ACS stationery,
so if you want to write

00:41:58.650 --> 00:42:03.120
Hello World with ACS,
you can put that together very easily.

00:42:03.120 --> 00:42:06.820
Mac App projects are provided as well,
debug and a non-debug version.

00:42:06.820 --> 00:42:10.060
Right now, we're only building them
as static libraries.

00:42:10.060 --> 00:42:11.940
ACS is incorporated into it.

00:42:11.950 --> 00:42:17.380
Now, you might ask why we don't provide a
framework target for Project Builder.

00:42:17.900 --> 00:42:22.060
And the reason is because all you
Mac Appers like to touch the code.

00:42:22.060 --> 00:42:27.140
So we're going to leave it that way for
a while just to see how it works out.

00:42:27.140 --> 00:42:31.080
But ACS Framework is fine because
I think very few developers have

00:42:31.080 --> 00:42:34.920
any need to actually touch the
ACS code at this point in time.

00:42:34.920 --> 00:42:37.410
And, of course, the example projects.

00:42:39.600 --> 00:42:44.330
CodeWarrio Pro 6 support for
all of the usual targets,

00:42:44.330 --> 00:42:46.860
including 68K still.

00:42:46.860 --> 00:42:50.620
And we're going to provide,
fairly quickly here,

00:42:50.620 --> 00:42:56.380
some CodeWarrio Pro 7 projects so that
you don't have to do that for yourself.

00:42:56.380 --> 00:42:59.450
Now keep these things in mind.

00:42:59.670 --> 00:43:04.330
Budget your time to manage the changes
that you're going to have to adopt

00:43:04.540 --> 00:43:10.380
as you move to Carbon because there's
changes in the APIs and the tools.

00:43:10.460 --> 00:43:15.250
Project Builder and GDB and GCC, etc.

00:43:15.540 --> 00:43:19.420
GCC, for example,
has helped us identify a number of

00:43:19.420 --> 00:43:25.710
problems that were in the old framework
that we never saw with the old compilers.

00:43:26.610 --> 00:43:29.510
So running your code through this
new compiler will expose probably

00:43:29.510 --> 00:43:32.460
some errors you'd be surprised at.

00:43:32.480 --> 00:43:33.560
There will be a cost, of course.

00:43:33.660 --> 00:43:35.400
You know,
there's a little learning curve in that.

00:43:35.510 --> 00:43:41.730
But I think we believe that the
benefits far outweigh the costs.

00:43:41.760 --> 00:43:43.510
So be prepared for the learning curve.

00:43:43.520 --> 00:43:48.910
And so I call this like the three
curves of the development biorhythm.

00:43:48.920 --> 00:43:52.840
And I think they're coming
to a curve right now.

00:43:52.840 --> 00:43:56.140
But once you get over that,
things are going to look a lot better.

00:43:56.140 --> 00:43:58.340
Important future directions.

00:43:58.660 --> 00:44:01.730
So keep up the work on Carbon Events.

00:44:02.060 --> 00:44:06.150
Provide a nice wrapper
around the data browser,

00:44:06.250 --> 00:44:11.410
something that's long been requested,
which is an MLTE view, TMLTE view,

00:44:11.410 --> 00:44:12.780
whatever.

00:44:12.810 --> 00:44:14.320
More work in the standard libraries.

00:44:14.360 --> 00:44:16.440
Tom talked about Unicode strings.

00:44:16.530 --> 00:44:21.240
Plus the same work that has
resulted in the Apple Class Suites,

00:44:21.240 --> 00:44:24.200
where we've kind of pushed
down on Mac App and stuff have

00:44:24.200 --> 00:44:25.750
come out on the bottom in ACS.

00:44:25.940 --> 00:44:27.500
This is going to continue.

00:44:27.530 --> 00:44:29.140
I mean, this is an evolving process.

00:44:29.210 --> 00:44:31.420
So I can't promise what
you're going to see there.

00:44:31.450 --> 00:44:35.670
But I could say that perhaps
you're going to see things like

00:44:35.670 --> 00:44:39.980
dependencies moving down there,
or maybe event handling.

00:44:39.980 --> 00:44:42.480
It'll become behavior-based.

00:44:42.480 --> 00:44:47.360
I'm just spouting off
the top of my head here.

00:44:48.260 --> 00:44:53.480
And the thing I want to
stress about all of this,

00:44:53.630 --> 00:44:57.380
the future directions and that is,
whether you're an old Mac apper

00:44:57.410 --> 00:45:00.250
or a new C++ programmer,
you never used a framework or

00:45:00.340 --> 00:45:02.960
you've used some other framework,
I want to stress that

00:45:03.080 --> 00:45:05.860
you take a look at ACS,
Apple Class Suites,

00:45:05.860 --> 00:45:11.280
so that you get the benefit of our
working with the people within Apple to

00:45:11.280 --> 00:45:16.640
make sure that those capabilities
are in the framework that you want.

00:45:16.940 --> 00:45:18.340
Let us know what they are.

00:45:18.400 --> 00:45:22.620
We'll bring up email addresses.

00:45:22.620 --> 00:45:24.680
There's a Mac App Dev mailing list.

00:45:24.880 --> 00:45:27.170
You can send mail directly to me.

00:45:27.170 --> 00:45:29.780
But if we know what you want,
we'll respond.

00:45:29.780 --> 00:45:30.740
We try to do that.

00:45:30.930 --> 00:45:32.790
That is our ultimate goal.

00:45:32.800 --> 00:45:33.930
We want to have fun.

00:45:34.110 --> 00:45:36.000
We want to have a great framework.

00:45:36.000 --> 00:45:38.460
But we also, I think,
need to make sure that

00:45:38.460 --> 00:45:39.870
you get what you want.

00:45:39.930 --> 00:45:45.850
That reminds me,
we hope you have a good experience.

00:45:46.000 --> 00:45:47.780
You know,
the definition of experience is,

00:45:47.870 --> 00:45:50.710
experience is what you get when
you don't get what you want.

00:45:50.870 --> 00:45:52.540
We don't want it to be that way.

00:45:52.540 --> 00:45:53.800
We want you to get what you want.

00:45:53.820 --> 00:45:57.210
And before Godfrey comes back up,
I'd just like to thank

00:45:57.280 --> 00:45:59.020
the developer community.

00:45:59.110 --> 00:46:04.160
It's given us a wonderful
response and feedback so far.

00:46:04.160 --> 00:46:08.530
And it's helped guide our efforts
to provide ACS and to do things

00:46:08.530 --> 00:46:12.040
like make sure that Carbon events
work and that your applications are

00:46:12.040 --> 00:46:13.900
going to be speedy under Mac OS X.

00:46:14.840 --> 00:46:17.030
And thank you for that feedback.

00:46:17.150 --> 00:46:20.250
Thank you for the support that you
provide each other on the mailing

00:46:20.250 --> 00:46:23.940
list and the news group because
this is critical for developing

00:46:24.050 --> 00:46:27.750
a consensus in the community and
making sure that we do what you want.

00:46:27.880 --> 00:46:29.980
So please keep that good work up.

00:46:30.100 --> 00:46:32.230
And also,
I have this little kitty cat up here

00:46:32.230 --> 00:46:34.220
and some of you know what that means.

00:46:34.220 --> 00:46:37.000
I'd like to thank one of
our developers for his gift,

00:46:37.000 --> 00:46:39.220
Norio Ota, who's sitting back here.

00:46:39.220 --> 00:46:43.320
And just wanted to tell you that
if you want to get faster email

00:46:43.470 --> 00:46:44.600
response to your applications,
you can do that.

00:46:44.630 --> 00:46:48.580
to your bug reports and questions.

00:46:51.160 --> 00:46:56.810
Gifts are great,
but wonderful Mac OS X applications

00:46:56.810 --> 00:46:59.420
are even greater,
so we encourage you to do that.

00:46:59.500 --> 00:47:00.200
Godfrey?

00:47:00.200 --> 00:47:02.280
Thank you, Mike.

00:47:09.960 --> 00:47:14.040
So the whole point of the Apple C++
Frameworks is to continue to

00:47:14.210 --> 00:47:17.500
support all the developer needs,
new Apple technologies,

00:47:17.500 --> 00:47:19.900
and the industry standards going forward.

00:47:19.940 --> 00:47:23.400
This is a fantastic set of technologies
for people who are Carbon developers,

00:47:23.400 --> 00:47:26.490
who want to move forward,
who have a large body of C++

00:47:26.490 --> 00:47:30.360
code that they want to move from
another platform and want to

00:47:30.360 --> 00:47:33.000
stay within the C++ environment.

00:47:34.090 --> 00:47:36.360
Information Resources.

00:47:36.360 --> 00:47:38.780
Those of you who have been through
the other tool sessions have seen

00:47:38.780 --> 00:47:41.200
most of these addresses before.

00:47:41.200 --> 00:47:47.290
Our overall page for Mac OS X tools,
developer.apple.com.tools,

00:47:47.290 --> 00:47:53.640
and the C++ Frameworks webpages at
the developer.apple.com.tools.macapp.

00:47:55.660 --> 00:47:57.660
We get a lot of hits on these pages.

00:47:57.660 --> 00:48:00.170
We've gotten,
I think over the course of the week,

00:48:00.260 --> 00:48:02.880
we've had over 10,000 hits
when I called in last.

00:48:02.880 --> 00:48:04.780
So that's quite a bit of activity.

00:48:04.780 --> 00:48:09.330
And we have a master mailing list
for all of our mailing lists,

00:48:09.330 --> 00:48:13.360
I mean a master webpage for
all of our mailing lists.

00:48:13.360 --> 00:48:15.140
Mac App Dev is one of them.

00:48:15.140 --> 00:48:17.920
There's also the Carbon Dev, Cocoa Dev,
Project Builder users.

00:48:17.920 --> 00:48:20.670
All of these would be
useful to you as resources.

00:48:23.120 --> 00:48:28.900
We decided to give you a back road map
through the show since this is Friday,

00:48:28.930 --> 00:48:30.790
very nearly the last sessions of the day.

00:48:31.240 --> 00:48:35.370
These are some of the sessions
that hallmark our tools,

00:48:35.370 --> 00:48:40.620
various other things that you could use,
and when you get your DVDs,

00:48:40.780 --> 00:48:43.440
because everybody at the show is
receiving DVDs of these sessions,

00:48:43.440 --> 00:48:46.730
you can review these if you've
had to be at other sessions

00:48:46.730 --> 00:48:48.500
over the course of the week.

00:48:50.740 --> 00:48:52.790
Questions about C++ frameworks?

00:48:52.800 --> 00:48:56.430
You can always contact me as the
Technology Manager for Development Tools.

00:48:56.430 --> 00:48:59.700
I'm very interested in your feedback,
ideas, directions.

00:48:59.850 --> 00:49:02.650
And Mike Rossetti for questions
on the frameworks themselves,

00:49:02.650 --> 00:49:06.020
who is always extremely active
about answering those questions.