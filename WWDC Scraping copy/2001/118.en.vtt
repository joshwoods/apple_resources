WEBVTT

00:00:01.750 --> 00:00:02.660
Good afternoon, everyone.

00:00:02.660 --> 00:00:06.020
I'd like to welcome you to session 118,
which is ColorSync.

00:00:06.040 --> 00:00:08.100
Again, I'm Travis Brown.

00:00:08.100 --> 00:00:10.040
I'm the Mac OS X imaging
technology manager,

00:00:10.040 --> 00:00:13.300
and I'll be being assisted by
the ColorSync engineering team.

00:00:14.930 --> 00:00:18.950
ColorSync has a new role in Mac OS X,
and what's important to note

00:00:19.020 --> 00:00:21.070
is that it's fundamentally
integrated in the operating system.

00:00:21.080 --> 00:00:23.230
And this is a different story
from ColorSync on previous

00:00:23.740 --> 00:00:26.440
versions of the Mac OS,
where it was an optional extension.

00:00:26.440 --> 00:00:29.980
In fact, many users who were not maybe in
the professional publishing space

00:00:29.980 --> 00:00:33.060
never even bothered to install it
or never even knew what it did.

00:00:33.120 --> 00:00:37.910
Well, Mac OS X takes the opportunity to
integrate ColorSync because color

00:00:37.940 --> 00:00:42.780
and color management is very,
very important to a customer experience,

00:00:43.260 --> 00:00:46.150
whether it be a high-end publishing
customer or even someone using,

00:00:46.150 --> 00:00:48.440
let's say,
a digital camera and trying to look at

00:00:48.440 --> 00:00:50.020
an image on screen and then print it.

00:00:50.100 --> 00:00:53.340
For that reason,
Quartz takes advantage of

00:00:53.340 --> 00:00:55.640
ColorSync in great detail.

00:00:55.640 --> 00:00:58.910
Additionally,
it's used throughout the print

00:00:58.910 --> 00:01:04.000
path to provide color-matching
services for printer drivers as well.

00:01:06.040 --> 00:01:07.790
Because of this,
I want to bracket the sort of

00:01:07.820 --> 00:01:09.190
content for today's session.

00:01:09.200 --> 00:01:12.930
We're going to aim some of the
content at developers who maybe

00:01:13.000 --> 00:01:16.480
have never used ColorSync or
even may be aware of ColorSync.

00:01:16.500 --> 00:01:18.720
So we're going to start with
an overview of ColorSync.

00:01:18.760 --> 00:01:21.750
And then we're going to drop
down into a fairly detailed

00:01:22.220 --> 00:01:26.040
discussion of how ColorSync and
Quartz interreact to provide a

00:01:26.060 --> 00:01:28.000
color-managed experience on Mac OS X.

00:01:28.000 --> 00:01:33.010
Then we're going to come back up a
level and talk about profiles and CMMs.

00:01:33.110 --> 00:01:37.510
This will be familiar to developers
who are used to developing with the

00:01:37.510 --> 00:01:40.160
ColorSync APIs on Mac OS X and earlier.

00:01:40.160 --> 00:01:44.880
And then one thing we think is very
important is since all applications

00:01:44.880 --> 00:01:50.330
can share in the color-managed workflow
that exists within any Mac OS X system,

00:01:50.340 --> 00:01:55.400
we feel it's important for developers to
take advantage of the preference systems,

00:01:55.400 --> 00:01:58.620
the preference APIs that
are available in Mac OS X,

00:01:58.620 --> 00:02:01.320
for you to figure out what the
user wants in terms of color.

00:02:02.160 --> 00:02:05.990
This is something that is going to be
very important because you could have,

00:02:06.090 --> 00:02:10.600
for example, a designer who maybe
creates content for the web.

00:02:10.650 --> 00:02:13.820
And therefore,
they want their primary RGB color

00:02:13.820 --> 00:02:16.490
space to be maybe something like sRGB.

00:02:16.500 --> 00:02:20.370
And it's very important for application
developers to learn how to pick

00:02:20.370 --> 00:02:22.560
that information up from the system.

00:02:22.560 --> 00:02:25.720
Then we'll also talk about
device integration where you can

00:02:25.720 --> 00:02:29.620
associate profiles with devices
that are available on the computer.

00:02:29.640 --> 00:02:31.260
And then we'll conclude
with a question and answer.

00:02:32.170 --> 00:02:34.840
So what I want to do now is turn
things over to David Hayward

00:02:34.840 --> 00:02:38.690
who's going to tell you more,
give you an overview of ColorSync.

00:02:42.430 --> 00:02:43.580
Good afternoon, everyone.

00:02:43.640 --> 00:02:44.840
Thanks for coming.

00:02:45.070 --> 00:02:48.790
Again, I want to start out today talking
about a general overview of ColorSync.

00:02:48.790 --> 00:02:52.360
For those of you in the audience who may
not be familiar with color management

00:02:52.410 --> 00:02:54.650
in general or ColorSync in particular,

00:02:54.880 --> 00:02:56.760
First thing to be aware of
is what is the problem that

00:02:56.760 --> 00:02:58.080
ColorSync is trying to solve?

00:02:58.350 --> 00:03:00.900
Well, as we're all aware,
there's a wide variety of devices

00:03:01.000 --> 00:03:02.660
that we all work with these days.

00:03:02.660 --> 00:03:07.940
Some of them such as flatbed scanners,
digital cameras, LCD displays,

00:03:07.940 --> 00:03:11.230
tube displays, toner printers,
inkjet printers.

00:03:11.240 --> 00:03:13.550
All of these devices
represent colors in very,

00:03:13.550 --> 00:03:14.810
very different ways.

00:03:14.820 --> 00:03:18.250
They have different color spaces
and also they have different gamuts,

00:03:18.250 --> 00:03:21.380
which is a term for the range of
colors that a device can represent.

00:03:22.080 --> 00:03:26.180
So this is the problem that makes it
very difficult for a document that's

00:03:26.180 --> 00:03:30.150
acquired from one device to be rendered
correctly on another device or in a

00:03:30.150 --> 00:03:32.010
printer or a different kind of printer.

00:03:32.020 --> 00:03:35.360
The solution is ColorSync,
which is an established solution

00:03:35.510 --> 00:03:38.680
that provides a complete
color management solution,

00:03:38.760 --> 00:03:43.580
which is designed to provide consistent
color across a wide variety of devices.

00:03:43.580 --> 00:03:46.940
Even more than that, though,
ColorSync can also be used to do color

00:03:47.050 --> 00:03:51.320
management or color transformations that
are not even associated with devices.

00:03:52.080 --> 00:03:55.040
Such as hue rotation or
contrast enhancement.

00:03:55.040 --> 00:03:58.140
But for most of the subject
we'll be talking about today,

00:03:58.140 --> 00:04:01.680
you can think of ColorSync as a
way of transforming colors from one

00:04:01.680 --> 00:04:04.140
source device to a destination device.

00:04:06.130 --> 00:04:08.590
So that's the problem and the solution.

00:04:08.650 --> 00:04:12.910
The two key foundations upon which
ColorSync are built are ICC profiles

00:04:13.280 --> 00:04:15.470
and color management modules,
or CMMs.

00:04:15.470 --> 00:04:18.550
I want to talk in a little bit more
detail about these two key ingredients.

00:04:20.550 --> 00:04:21.760
First of all, ICC profiles.

00:04:21.770 --> 00:04:26.060
The ICC profile is a cross-platform
file format defined by the

00:04:26.060 --> 00:04:29.420
International Color Consortium,
or ICC, which is made up of members

00:04:29.440 --> 00:04:31.130
from 70 different companies.

00:04:31.160 --> 00:04:35.050
You can find out more information
about them from their website,

00:04:35.080 --> 00:04:37.070
which is www.color.org.

00:04:37.580 --> 00:04:41.270
The idea behind the profile format
is it's a document that contains

00:04:41.390 --> 00:04:45.470
data that describes how to transform
between device color space and

00:04:45.480 --> 00:04:47.800
an intermediate color space,
or PCS,

00:04:47.850 --> 00:04:50.390
which is the term that the ICC promotes.

00:04:52.060 --> 00:04:54.810
Now,
this file format allows for description

00:04:54.960 --> 00:04:58.260
of a wide variety of devices,
but also encompasses several

00:04:58.260 --> 00:05:00.660
standard color spaces,
which you may have worked with,

00:05:00.800 --> 00:05:04.120
such as sRGB, NTSC, et cetera.

00:05:04.210 --> 00:05:07.700
The data that's contained in the profile,
to a certain extent,

00:05:07.740 --> 00:05:11.260
implies a certain processing model,
but it's also flexible and open.

00:05:11.260 --> 00:05:14.450
The profile format can be
extended by optional tags,

00:05:14.450 --> 00:05:18.090
which vendors can take advantage
of in order to provide specific

00:05:18.100 --> 00:05:19.850
solutions for their customers.

00:05:19.860 --> 00:05:23.420
Also, the ICC profile format
is an evolving format.

00:05:23.420 --> 00:05:26.340
It's ongoing improvements
are being made to it.

00:05:26.430 --> 00:05:29.370
I'll be talking more about that
later when we talk about the ICC4

00:05:29.540 --> 00:05:31.350
profile format that's on the horizon.

00:05:34.510 --> 00:05:39.680
So if you think of profiles as the data
that are used for color management,

00:05:39.720 --> 00:05:41.390
CMMs are the code.

00:05:41.450 --> 00:05:45.660
And the CMM, or Color Management Module,
provides the mathematical engine

00:05:45.690 --> 00:05:49.080
to perform profile-to-profile
transformations.

00:05:49.120 --> 00:05:51.740
There's a default CMM that
Apple ships as part of ColorSync,

00:05:51.800 --> 00:05:53.340
which is the Apple CMM.

00:05:53.380 --> 00:05:57.630
And this is the same CMM that we
ship on Mac OS 9 and Mac OS X.

00:05:57.930 --> 00:06:00.690
However, again, we've designed the system
to be open and expandable.

00:06:00.690 --> 00:06:04.500
Third parties can add their own CMMs if
they want to provide their own alternate

00:06:04.500 --> 00:06:07.930
methods for doing color transformations,
and several have been provided in the

00:06:07.930 --> 00:06:09.730
past by a wide variety of vendors.

00:06:12.910 --> 00:06:15.340
So this is a classic diagram
to show how ColorSync fits

00:06:15.340 --> 00:06:17.240
into the Mac OS X architecture.

00:06:17.410 --> 00:06:19.360
At the top,
you have the familiar purple boxes

00:06:19.710 --> 00:06:21.600
for Carbon and Cocoa applications.

00:06:21.700 --> 00:06:25.350
These applications can call ColorSync
either directly or indirectly by

00:06:25.450 --> 00:06:30.520
going through other APIs such as
QuickDraw and Quartz rendering system.

00:06:31.070 --> 00:06:33.640
ColorSync can then dynamically
call CMMs as needed,

00:06:33.640 --> 00:06:36.240
either using the Apple CMM or
third-party CMMs,

00:06:36.240 --> 00:06:40.970
and all of this system is based upon the
Darwin Foundation provided in Mac OS X.

00:06:43.460 --> 00:06:44.940
So that's sort of the
architectural overview.

00:06:44.940 --> 00:06:49.010
Here's a diagram that I wanted to
add to give an idea of how color

00:06:49.010 --> 00:06:51.660
management is actually used in practice,
for those of you who are not aware.

00:06:51.660 --> 00:06:54.710
The idea is, again,
you have an application at the top,

00:06:54.780 --> 00:06:58.060
which is using ColorSync
either indirectly or directly.

00:06:58.060 --> 00:07:01.960
And what the document wants to do,
or the application wants to do,

00:07:02.030 --> 00:07:04.340
is to render a document correctly.

00:07:04.340 --> 00:07:07.420
That document, let's say, for example,
it comes from a digital camera.

00:07:07.420 --> 00:07:10.810
The document may contain a profile
embedded with it that describes

00:07:10.830 --> 00:07:12.400
that device's color space.

00:07:12.740 --> 00:07:14.600
Or it's also possible,
if that profile doesn't

00:07:14.600 --> 00:07:16.130
contain a profile,
to obtain a correct

00:07:16.130 --> 00:07:17.240
profile for that device.

00:07:18.780 --> 00:07:22.130
Given a correct profile for that device,
we now know how to correctly

00:07:22.380 --> 00:07:25.580
understand the colors that are
represented within that document.

00:07:25.580 --> 00:07:27.830
Without a profile,
those values are just values we don't

00:07:27.930 --> 00:07:29.630
know how to correctly interpret them.

00:07:29.660 --> 00:07:32.700
Now, if we want to render this
image correctly on the display,

00:07:32.700 --> 00:07:34.740
then we need a destination profile.

00:07:34.740 --> 00:07:37.060
In this case, we need to obtain the
profile for the display.

00:07:37.060 --> 00:07:39.880
Once we have a source
and destination profile,

00:07:39.980 --> 00:07:44.060
now we can match the pixel data
from the source or camera profile

00:07:44.060 --> 00:07:47.200
to the destination or display
profile in order to provide the most

00:07:47.200 --> 00:07:50.560
faithful reproduction of that source
image on that destination device.

00:07:50.620 --> 00:07:53.560
The story when it comes time
to print is very similar.

00:07:53.560 --> 00:07:55.140
Again, you need a destination profile.

00:07:55.140 --> 00:07:58.040
In this case,
we can obtain a profile from the printer.

00:07:58.040 --> 00:08:00.550
And again,
we can now match from the source

00:08:00.620 --> 00:08:04.660
to the destination printer profile
in order to provide the best,

00:08:04.820 --> 00:08:09.300
most faithful representation of
the image across to print time.

00:08:13.000 --> 00:08:15.700
And lastly, just a little bit of a
history lesson of ColorSync.

00:08:15.700 --> 00:08:19.910
ColorSync started back in 1993
in version 1.0 and has grown and

00:08:20.010 --> 00:08:23.870
become more and more established
along the way to version 3.1,

00:08:23.880 --> 00:08:25.640
which ships today as part of Mac OS X.

00:08:25.640 --> 00:08:29.610
So it's been an exciting
project to be involved with.

00:08:30.400 --> 00:08:34.270
The ColorSync 2.0 and greater API,
which many of you who are familiar

00:08:34.270 --> 00:08:38.620
with using ColorSync on Mac OS 9,
is fully supported on Mac OS X,

00:08:38.620 --> 00:08:41.410
which means that it should be very,
very easy for you to port your

00:08:41.410 --> 00:08:44.080
applications that are using
ColorSync today to Mac OS X.

00:08:45.690 --> 00:08:47.570
That being said,
there are also some new API and

00:08:47.570 --> 00:08:50.220
new functionality provided
for ColorSync on Mac OS X,

00:08:50.290 --> 00:08:54.400
which will provide some new enhancements
which you may want to take advantage of.

00:08:55.790 --> 00:08:58.290
And also, what's very,
very important is that Quartz

00:08:58.410 --> 00:09:01.940
and the printing model on
Mac OS X make full use of ColorSync,

00:09:02.100 --> 00:09:05.480
which provides a good segue for
me to pass off to Luke Wallis,

00:09:05.630 --> 00:09:08.240
who will be talking about
ColorSync and Quartz.

00:09:08.270 --> 00:09:10.090
Thanks.

00:09:14.970 --> 00:09:16.900
Thank you, David.

00:09:17.030 --> 00:09:21.170
As you just learned,
ColorSync API on Mac OS X is

00:09:21.170 --> 00:09:22.800
fully implemented.

00:09:22.960 --> 00:09:28.490
It covers completely the
ColorSync API on Mac OS 9.

00:09:28.590 --> 00:09:32.790
It includes some new features,
and it's available for all

00:09:32.790 --> 00:09:35.530
applications that want to use it.

00:09:35.810 --> 00:09:39.810
In Mac OS X, however,
ColorSync was assigned a new role.

00:09:39.950 --> 00:09:45.940
Besides the standard application
services similar to those on Mac OS 9,

00:09:46.070 --> 00:09:50.340
ColorSync is now also used
to provide color management

00:09:50.430 --> 00:09:52.940
to other system components.

00:09:53.080 --> 00:09:58.500
One of those components is Quartz,
our new graphics system based

00:09:58.630 --> 00:10:01.100
on the PDF imaging model.

00:10:01.700 --> 00:10:06.400
I would like to show you how
ColorSync is used in Quartz.

00:10:06.500 --> 00:10:10.560
As you are going to see,
Quartz created a new paradigm

00:10:10.670 --> 00:10:14.220
for color management,
which offers an alternative

00:10:14.390 --> 00:10:16.950
access to ColorSync functionality.

00:10:17.760 --> 00:10:20.690
And if I wanted to be very
specific about the topic,

00:10:20.790 --> 00:10:25.980
I would rephrase it as ColorSync
and Quartz Color Management.

00:10:28.540 --> 00:10:32.810
The objective for the Quartz color
management was to integrate graphics

00:10:32.840 --> 00:10:38.040
and color management services,
satisfying some basic requirements.

00:10:38.040 --> 00:10:42.490
First of all,
Quartz needed an ability to composite

00:10:42.490 --> 00:10:45.900
different color spaces and opacity.

00:10:46.380 --> 00:10:51.150
To meet this requirement,
ColorSync is used to convert data

00:10:51.150 --> 00:10:57.420
from many different color spaces
into the one selected by Quartz as

00:10:57.440 --> 00:11:00.490
a working space for compositing.

00:11:01.620 --> 00:11:06.260
The second requirement is focused
on the needs of developers.

00:11:06.340 --> 00:11:13.040
It comes from the fact that all
applications using Quartz will

00:11:13.050 --> 00:11:15.120
have to work with color management.

00:11:15.120 --> 00:11:19.530
A scalable solution,
which is implemented in Quartz,

00:11:19.530 --> 00:11:23.360
should serve the needs of a
wide range of applications.

00:11:23.680 --> 00:11:26.600
On one end,
the involvement of an application

00:11:26.710 --> 00:11:30.990
in color management can be very
minimal and just limited to the

00:11:30.990 --> 00:11:34.710
use of some predefined default
settings provided by Quartz.

00:11:34.800 --> 00:11:38.770
But on the other end,
an application will have the same

00:11:38.980 --> 00:11:44.520
full control over color management
as in accessing ColorSync directly.

00:11:46.700 --> 00:11:55.500
[Transcript missing]

00:11:58.440 --> 00:12:03.570
In simple terms,
quartz color management could be

00:12:03.570 --> 00:12:09.740
described as built around ColorSync,
which is used as an engine to process

00:12:10.210 --> 00:12:13.280
PDF color data produced by quartz.

00:12:13.300 --> 00:12:16.240
But in order to better
understand its design,

00:12:16.290 --> 00:12:25.300
let's review some of the basic concepts
pertaining to color in PDF and ColorSync.

00:12:26.250 --> 00:12:31.580
In PDF, color is defined by one
of the known color spaces:

00:12:31.620 --> 00:12:35.920
device, calibrated, or ICC-based.

00:12:35.960 --> 00:12:38.800
As you can see,
this list reflects in essence

00:12:38.800 --> 00:12:41.160
the history of color management.

00:12:41.200 --> 00:12:44.560
Initially,
only device color spaces were supported.

00:12:44.610 --> 00:12:49.920
As we can say from today's perspective,
those merely provided a classification

00:12:49.920 --> 00:12:53.070
of different process color models.

00:12:53.310 --> 00:12:56.610
And because the color
appearance is device-dependent,

00:12:56.860 --> 00:13:02.140
these spaces are, as a matter of fact,
the worst choice for the fateful color

00:13:02.140 --> 00:13:05.480
reproduction across different devices.

00:13:06.030 --> 00:13:11.500
Next, calibrated color was invented,
along with the idea of color conversions

00:13:11.960 --> 00:13:14.660
through device-independent color.

00:13:14.820 --> 00:13:18.980
The advantage of this method is a
significant improvement in color

00:13:19.110 --> 00:13:21.770
matching across different devices.

00:13:21.940 --> 00:13:27.010
PDF follows that by adding
calibrated color spaces.

00:13:27.630 --> 00:13:30.920
Later on,
calibrated color evolved into the

00:13:30.920 --> 00:13:35.800
standard form that we here in this
crowd are quite familiar with,

00:13:35.860 --> 00:13:39.360
and this standard form
is the ICC profile.

00:13:40.820 --> 00:13:46.800
When the color management based on
ICC profiles gained its popularity

00:13:47.430 --> 00:13:51.640
and became the de facto standard
among color professionals,

00:13:51.730 --> 00:13:56.400
PDF added ICC-based color space,
which allows for embedding

00:13:56.400 --> 00:13:59.060
ICC profiles in PDF documents.

00:13:59.350 --> 00:14:04.800
PDF color conversions could be described
as a function of source color space,

00:14:04.920 --> 00:14:07.730
destination color space,
and rendering intent.

00:14:10.190 --> 00:14:14.830
Please take note of the rendering
intent values in PDF as they

00:14:14.830 --> 00:14:17.520
will refer to the next slide.

00:14:18.750 --> 00:14:25.420
Let's take a look now how ColorSync and
ICC define color and color conversions.

00:14:25.450 --> 00:14:27.140
Naturally,

00:14:27.450 --> 00:14:29.540
Color is defined by an ICC profile.

00:14:29.550 --> 00:14:35.340
As I mentioned a moment ago,
the ICC profile is, in practice,

00:14:35.340 --> 00:14:39.400
the most general form of
the color space description.

00:14:41.300 --> 00:14:47.200
ICC color conversions are basically
very similar to those in PDF.

00:14:47.360 --> 00:14:52.400
The difference is an option for
inserting the intermediate profiles

00:14:52.400 --> 00:14:53.890
between the source and destination.

00:14:53.960 --> 00:14:58.360
These additional profiles are
used in advanced color management

00:14:58.360 --> 00:15:02.250
for things like soft proofing,
color device simulation,

00:15:02.360 --> 00:15:05.480
applying special effects, etc.

00:15:07.650 --> 00:15:12.450
As we can see now,
the rendering intent values in ICC are

00:15:12.450 --> 00:15:16.490
exactly the same as those in PDF.

00:15:19.530 --> 00:15:25.690
The color model in Quartz was created
by integrating PDF and ICC color models.

00:15:25.720 --> 00:15:29.780
Let's review some of the most
important features of this model.

00:15:29.780 --> 00:15:34.230
First of all,
all PDF color spaces are expressed

00:15:34.470 --> 00:15:37.160
in Quartz as ICC profiles.

00:15:37.200 --> 00:15:41.380
Device color spaces are
assigned default profiles.

00:15:42.450 --> 00:15:46.520
Calibrated color spaces
contain the calibration record,

00:15:46.520 --> 00:15:49.580
which can be very easily
repackaged as the ICC profile.

00:15:49.580 --> 00:15:52.760
And finally,
ICC-based color spaces provide

00:15:53.350 --> 00:15:55.060
their own ICC profiles.

00:15:58.180 --> 00:16:04.160
Another simple but very important
concept that Quartz inherited from

00:16:04.720 --> 00:16:07.480
PDF is color space equivalence.

00:16:07.620 --> 00:16:14.000
An implied rule is that color conversions
are necessary only if the source color

00:16:14.000 --> 00:16:16.780
space is different from the destination.

00:16:16.950 --> 00:16:21.400
Quartz takes advantage of this
simple rule to properly organize

00:16:21.930 --> 00:16:26.510
the flow of color data through
multiple rendering stages.

00:16:28.610 --> 00:16:33.350
As I mentioned,
all PDF color spaces are expressed

00:16:33.350 --> 00:16:38.800
in Quartz and ICC profile in
the manner which is seamless and

00:16:38.800 --> 00:16:43.510
transparent to all applications
working in the PDF imaging model.

00:16:43.540 --> 00:16:47.950
But at the same time,
we needed provision in Quartz

00:16:48.260 --> 00:16:54.090
to create color transformations
from more than two profiles.

00:16:54.960 --> 00:16:58.940
For that reason,
we designed a color space which can

00:16:58.940 --> 00:17:01.930
consist of one or more ICC profiles.

00:17:01.940 --> 00:17:06.080
This way, we are able to preserve the
PDF concept of matching a single

00:17:06.080 --> 00:17:08.180
source to a single destination.

00:17:08.280 --> 00:17:11.670
But at the same time,
we are able to create those complex

00:17:12.200 --> 00:17:16.860
color transformations which are
suitable for advanced color management.

00:17:16.860 --> 00:17:21.560
And if the need arises for such a
color space to be embedded in PDF,

00:17:21.560 --> 00:17:23.830
the multiple profiles contained
in such a color space will be

00:17:23.860 --> 00:17:24.940
able to be embedded in PDF.

00:17:24.960 --> 00:17:28.560
space can be concatenated by
color syncing to a single profile.

00:17:31.870 --> 00:17:35.960
For the completeness,
it's worth mentioning that Quartz

00:17:35.960 --> 00:17:40.740
can also encompass implicit
device conversions as defined

00:17:40.740 --> 00:17:45.700
in PDF by proper configuration
of the default color spaces.

00:17:45.740 --> 00:17:51.740
Here is an example of a configuration
handling device gray to device RGB and

00:17:51.740 --> 00:17:55.170
device CMYK to device RGB conversions.

00:17:59.370 --> 00:18:04.870
Let's see now how all the things
I was talking about come together to

00:18:04.960 --> 00:18:10.820
provide the desired color processing
in the Quartz drawing model.

00:18:10.980 --> 00:18:15.030
From the top-level perspective,
there are three main components

00:18:15.030 --> 00:18:18.400
involved in this model:
an application generating

00:18:18.400 --> 00:18:23.220
the graphic contents,
Quartz providing the rendering services,

00:18:23.310 --> 00:18:26.940
and the destination for
the rasterized data.

00:18:28.550 --> 00:18:34.490
In terms of color processing,
the application can request

00:18:34.530 --> 00:18:40.200
cords to render data in any
of the PDF color spaces.

00:18:41.500 --> 00:18:44.950
To accomplish that,
Quartz will convert all

00:18:44.950 --> 00:18:47.180
these into ICC profiles.

00:18:47.180 --> 00:18:50.180
The default profiles
are selected by Quartz,

00:18:50.220 --> 00:18:53.490
but can be overloaded by the application.

00:18:55.040 --> 00:18:58.160
Quartz will do all compositing
in the working space.

00:18:58.160 --> 00:19:06.760
And ColorSync will be invoked to perform
color transformations from any of the

00:19:06.760 --> 00:19:09.140
source color spaces to the working space.

00:19:11.330 --> 00:19:14.540
And finally,
when compositing is completed,

00:19:14.560 --> 00:19:18.020
the rasterized data will be
sent to the desired destination.

00:19:18.100 --> 00:19:21.310
Naturally,
if the color space of the destination

00:19:21.310 --> 00:19:25.110
doesn't match the working space,
an additional conversion must

00:19:25.120 --> 00:19:27.840
be done between the working
space and the destination.

00:19:31.590 --> 00:19:36.500
Here is an example of quartz
color management usage.

00:19:36.520 --> 00:19:43.170
An application creates contents
in the device RGB color space.

00:19:43.190 --> 00:19:47.050
After being rendered,
that content should be

00:19:47.050 --> 00:19:53.130
displayed on the primary monitor
without any color conversions.

00:19:53.830 --> 00:20:00.800
From the color management point of view,
we can classify this case as

00:20:01.800 --> 00:20:07.710
are creating and rendering the
data in the same color space.

00:20:08.010 --> 00:20:14.410
This case can be a typical case of a
very simple application which doesn't

00:20:14.410 --> 00:20:18.250
have any color management capabilities.

00:20:18.970 --> 00:20:23.830
If that were the old system and
the application opened a file

00:20:24.360 --> 00:20:29.750
which contained data in different
color spaces than device RGB,

00:20:29.770 --> 00:20:34.830
then the application itself would have to
convert the data to the system profile.

00:20:34.840 --> 00:20:37.760
Otherwise,
displaying such data would cause

00:20:38.160 --> 00:20:42.380
the color errors or perhaps
would be even possible at all.

00:20:43.300 --> 00:20:47.630
Let's see what happens in Quartz
if the application didn't do

00:20:47.630 --> 00:20:52.060
anything about converting color and
pass the data directly to Quartz.

00:20:52.180 --> 00:20:56.140
As you have seen,
all conversions happened

00:20:56.140 --> 00:20:59.910
correctly in Quartz,
and the data from different

00:20:59.910 --> 00:21:03.830
color spaces is converted
properly to the primary display.

00:21:03.840 --> 00:21:08.820
As a matter of fact,
this configuration is a predefined

00:21:08.930 --> 00:21:12.050
default setting used by Quartz.

00:21:12.780 --> 00:21:17.400
The same configuration could be used
by the advanced color applications,

00:21:17.510 --> 00:21:22.340
which would like to use Quartz only for
rendering without any color conversions.

00:21:23.170 --> 00:21:28.110
Obviously, many other combinations
are also possible here.

00:21:28.610 --> 00:21:32.710
Let me show you now how convenient
quartz color management can be

00:21:32.970 --> 00:21:36.980
for some other color operations.

00:21:37.150 --> 00:21:40.360
For example,
applying special effects to all

00:21:40.370 --> 00:21:44.720
data can be very easily achieved
by simply adding the abstract

00:21:44.720 --> 00:21:46.730
profile to the working space.

00:21:47.110 --> 00:21:50.590
As you can see,
all conversions to the working space

00:21:51.160 --> 00:21:56.020
will include the transformation
defined in the abstract profile.

00:21:56.350 --> 00:21:58.770
Another example could be soft proofing.

00:21:58.850 --> 00:22:04.490
The only thing we need to do is to add
the printer profile to the working space.

00:22:05.390 --> 00:22:08.460
And this way,
all color corrections defined in the

00:22:08.590 --> 00:22:13.360
printer profile will be reflected in
the working space and consequently

00:22:13.360 --> 00:22:15.400
shown on the primary display.

00:22:16.440 --> 00:22:21.220
The use of multi-profile color spaces
is not limited to quasi-internals.

00:22:21.270 --> 00:22:23.550
An application also could use it.

00:22:24.010 --> 00:22:30.560
Here is an example of an application
using this kind of color space to create

00:22:30.650 --> 00:22:35.760
some kind of free transform color space
for some additional color effects.

00:22:40.380 --> 00:22:45.230
To complete my story about
color management in Quartz,

00:22:45.230 --> 00:22:49.400
let me tell you how color is
handled in printing from Quartz.

00:22:49.550 --> 00:22:53.530
So far, I was talking about the main
flow of the color data from

00:22:53.530 --> 00:22:55.940
the source to destination.

00:22:56.070 --> 00:22:59.810
But one more step is possible here.

00:23:00.150 --> 00:23:05.880
The contents can be spooled
in the PDF form for printing,

00:23:05.930 --> 00:23:09.270
which will be handled
by the print center.

00:23:09.730 --> 00:23:13.820
There is one very important
fact about the spooled data.

00:23:13.830 --> 00:23:18.600
As I pointed out here,
all color data is tagged in spooled PDF,

00:23:18.600 --> 00:23:23.600
and all end profiles are assigned
to the data exactly the same way as

00:23:23.600 --> 00:23:26.620
they were for ColorSync processing.

00:23:29.770 --> 00:23:35.440
Quartz is also used to rasterize this
pooled PDF at the printing backend.

00:23:35.610 --> 00:23:39.850
From the color management perspective,
we have a few options here.

00:23:39.950 --> 00:23:44.090
The first one is to use
ColorSync for color matching.

00:23:44.440 --> 00:23:48.240
In this case,
the working space is created from

00:23:48.670 --> 00:23:52.360
a printer profile and a special
kind of working space profile.

00:23:52.360 --> 00:23:56.890
This working space profile has
a gamut large enough to contain

00:23:56.890 --> 00:24:02.110
the gamut of the printer profile,
but at the same time has all the features

00:24:02.200 --> 00:24:04.810
needed by Quartz for compositing.

00:24:06.920 --> 00:24:12.140
The reason for adding the printer
profile is to assure that all data

00:24:12.240 --> 00:24:17.590
tagged with different rendering intents
in the spooled PDF will be rendered

00:24:17.800 --> 00:24:23.370
according to the corresponding tags
contained in the printer profile.

00:24:23.550 --> 00:24:28.000
When the rendering is completed,
the PrintJobManager will convert

00:24:28.010 --> 00:24:32.070
the data from the working
space to the printer profile.

00:24:33.570 --> 00:24:39.540
Another option is custom
driver color matching.

00:24:39.600 --> 00:24:42.710
By assumption,
our goal here is to provide

00:24:42.780 --> 00:24:45.810
the best WYSIWYG experience.

00:24:46.050 --> 00:24:49.740
For that reason,
the color data by design is

00:24:49.780 --> 00:24:54.200
going to be handed off in the
system profile color space.

00:24:54.340 --> 00:24:58.660
For that reason, working space is set
to the system profile.

00:24:58.720 --> 00:25:02.380
As a result,
all data which is tagged with system

00:25:02.380 --> 00:25:05.810
profiles will remain untouched.

00:25:06.090 --> 00:25:09.820
and obviously all other color
data will be converted by

00:25:09.890 --> 00:25:12.810
ColorSync to the system profile.

00:25:14.710 --> 00:25:18.600
ColorSync is also involved
in PostScript backend.

00:25:18.720 --> 00:25:23.530
From the color management perspective,
our goal here is to convert

00:25:23.980 --> 00:25:28.270
the color spaces containing the
spooled PDF to PostScript CSAs.

00:25:28.880 --> 00:25:32.660
For those of you who are not familiar
with the term of PostScript CSA,

00:25:32.660 --> 00:25:37.290
let me briefly explain that
CSA stands for color space array,

00:25:37.630 --> 00:25:43.950
and it is used in PostScript the same way
for containing the calibration record as

00:25:43.950 --> 00:25:47.780
calibrated spaces in PDF or ICC profiles.

00:25:47.820 --> 00:25:54.230
Quartz has internal capabilities
to convert PDF calibrated color

00:25:54.230 --> 00:25:58.110
spaces directly to PostScript CSAs.

00:25:58.620 --> 00:26:04.290
All ICC profiles will be converted
to PostScript CSAs using ColorSync.

00:26:04.820 --> 00:26:08.290
And this concludes my talk
on Quartz and ColorSync.

00:26:08.400 --> 00:26:10.340
So now I'll pass it back to David.

00:26:10.460 --> 00:26:11.190
Thank you for your attention.

00:26:17.340 --> 00:26:20.340
Thanks, Luke.

00:26:20.460 --> 00:26:23.630
So after that detailed discussion,
I want to go back and go into

00:26:23.630 --> 00:26:27.040
a little bit more detail on the
subject of ColorSync profiles

00:26:27.110 --> 00:26:29.590
and how they work on Mac OS X.

00:26:29.640 --> 00:26:33.490
As you may be aware from Mac OS 9,
profiles are traditionally stored in the

00:26:33.700 --> 00:26:36.360
Profiles folder within the System folder.

00:26:36.520 --> 00:26:39.480
If an application wanted to
get access to that folder,

00:26:39.520 --> 00:26:44.680
it would use the ColorSync
API cm get ColorSyncFolderSpec,

00:26:44.730 --> 00:26:48.020
passing in for the vrefnum
constant kSystemDisk,

00:26:48.020 --> 00:26:50.980
or I forget the other constants
that were equivalent to that.

00:26:51.020 --> 00:26:53.270
But the idea behind it is that
would give you the location of

00:26:53.280 --> 00:26:54.490
the ColorSyncProfiles folder.

00:26:54.690 --> 00:26:58.190
You could also use find folder,
which is an equivalent API.

00:26:58.740 --> 00:27:01.650
However, on Mac OS X,
one of the key features in Mac OS X is

00:27:01.650 --> 00:27:05.580
that it's designed from the get-go
to be multi-user and network savvy.

00:27:05.580 --> 00:27:08.120
And for this reason,
there's no longer just one location

00:27:08.120 --> 00:27:09.840
where profiles can be installed.

00:27:09.840 --> 00:27:12.030
So now there's several locations.

00:27:12.040 --> 00:27:15.060
First of all, there's a special location
inside the system folder,

00:27:15.060 --> 00:27:17.220
which is system, library, ColorSync,
profiles.

00:27:17.220 --> 00:27:20.510
And this is where ColorSync
stores a few profiles that it

00:27:20.510 --> 00:27:24.330
needs for critical operations,
which it needs even if all the other

00:27:24.330 --> 00:27:27.530
profiles were to be trashed by users,
they could--ColorSync could

00:27:27.630 --> 00:27:29.980
still work with just these few
profiles to a limited extent.

00:27:29.980 --> 00:27:33.070
This profiles folder is
locked and protected,

00:27:33.080 --> 00:27:36.440
but if you need to get access to be able
to read the profiles in this directory,

00:27:36.440 --> 00:27:39.930
you can get access to this
location by--still by calling

00:27:39.930 --> 00:27:44.460
CM get ColorSync folder spec,
but instead you can pass in k system

00:27:44.460 --> 00:27:47.270
domain for the vrefnum parameter.

00:27:47.900 --> 00:27:51.170
The main place where profiles are
stored is in library ColorSync profiles.

00:27:51.240 --> 00:27:53.830
This is where we ship the
majority of our profiles.

00:27:53.830 --> 00:27:59.000
This location is actually
read and writable by users,

00:27:59.130 --> 00:28:02.290
so your application or users can
install profiles in here as well.

00:28:02.290 --> 00:28:04.400
If you need to get
access to this location,

00:28:04.400 --> 00:28:07.480
you can pass in Klocal domain
for the read VREFNUM constant.

00:28:07.480 --> 00:28:11.750
If you're in a network environment and
your administrator has installed profiles

00:28:11.850 --> 00:28:15.060
on the network for your network devices,
these can be installed in

00:28:15.060 --> 00:28:18.480
the standard location network
library ColorSync profiles.

00:28:18.480 --> 00:28:22.480
You can get access to this by
passing in Knetwork domain.

00:28:22.770 --> 00:28:24.670
Lastly,
users can install their own personal

00:28:24.670 --> 00:28:28.090
profiles within their home directory,
which is in the Unix Parlance

00:28:28.090 --> 00:28:30.910
Tilda library ColorSync profiles.

00:28:30.960 --> 00:28:34.060
And as on Mac OS 9,
ColorSync also supports looking in

00:28:34.200 --> 00:28:38.260
subfolders of all of these directories,
or aliases to folders,

00:28:38.260 --> 00:28:40.200
or aliases to profiles.

00:28:40.200 --> 00:28:43.550
So the end-all situation we have
here is there's a lot of locations

00:28:43.550 --> 00:28:45.320
where profiles can be stored.

00:28:45.320 --> 00:28:48.600
So what this means is it's
probably more important than ever.

00:28:48.600 --> 00:28:51.400
If you're an application and you
want to present a pop-up menu

00:28:51.400 --> 00:28:54.100
that shows a list of profiles
that are installed to the user,

00:28:54.100 --> 00:28:57.560
you really want to use the
CM Iterate ColorSync Folder API.

00:28:57.560 --> 00:29:01.530
This API will quickly call a
callback proc for every profile

00:29:01.880 --> 00:29:04.300
that is installed in the system.

00:29:04.320 --> 00:29:07.780
In addition to simplifying your code from
having to deal with all these locations,

00:29:07.780 --> 00:29:10.590
it also has performance
benefits in that it caches the

00:29:10.590 --> 00:29:12.560
frequently needed information.

00:29:14.310 --> 00:29:17.700
One caveat to mention, however,
is if you're running Mac OS X and you

00:29:17.850 --> 00:29:22.300
have a classic system folder set up,
ColorSync will not automatically

00:29:22.300 --> 00:29:25.580
search in the classic system
folder's profiles directory.

00:29:25.580 --> 00:29:29.880
However, if your application wants to get
access at this location to show

00:29:30.020 --> 00:29:33.880
those profiles to your user,
you can easily do that by again

00:29:33.980 --> 00:29:38.250
calling CM_GetColorSyncFolderSpec,
and this time you can pass

00:29:38.250 --> 00:29:40.310
in the k classic domain.

00:29:41.200 --> 00:29:43.990
So that's a lot of directories, I know,
and it's one of the more

00:29:44.130 --> 00:29:46.220
common questions we have is,
quite simply,

00:29:46.220 --> 00:29:47.810
where do I install my profiles?

00:29:47.820 --> 00:29:51.960
And the short answer to the question is,
applications should install

00:29:51.960 --> 00:29:55.850
profiles in library ColorSync
profiles or in a subfolder of it.

00:29:55.930 --> 00:29:58.950
That being said,
users can install profiles if they

00:29:58.950 --> 00:30:01.100
wish in their own home directory.

00:30:03.820 --> 00:30:05.660
So what does it mean to be a profile?

00:30:05.740 --> 00:30:09.450
Well, traditionally,
profiles were filtered based on

00:30:09.450 --> 00:30:11.900
their type and creator on Mac OS 9.

00:30:11.960 --> 00:30:14.890
The type was prof,
and the creator was sync.

00:30:15.530 --> 00:30:17.940
But in actuality,
that's not all that important,

00:30:17.980 --> 00:30:20.200
because profiles actually come
from a variety of sources,

00:30:20.200 --> 00:30:22.520
and they may not have types and creators.

00:30:22.520 --> 00:30:26.110
So ColorSync no longer checks
the type and creator of profiles.

00:30:26.130 --> 00:30:30.460
Also, profiles need not have any suffix,
or they may have any suffix.

00:30:30.550 --> 00:30:31.010
It doesn't matter.

00:30:31.020 --> 00:30:35.080
But if you are going to have a suffix,
we request that you use .icc.

00:30:35.080 --> 00:30:38.100
By standardizing on one suffix,
it makes it easier for

00:30:38.200 --> 00:30:42.290
applications that are using the
Cocoa NS Open Panel to filter profiles.

00:30:43.160 --> 00:30:45.300
For the same reason, if you are going to
use a type and creator,

00:30:45.300 --> 00:30:48.580
we'd recommend you use profsync,
because that'll make it easier

00:30:48.580 --> 00:30:50.930
for applications that are
using the Carbon Navigation

00:30:50.930 --> 00:30:52.380
Services to filter profiles.

00:30:52.440 --> 00:30:55.090
But at its heart,
ColorSync doesn't care about type,

00:30:55.150 --> 00:30:56.290
creator, or suffix.

00:30:56.400 --> 00:30:58.370
It'll just make life
easier for your users.

00:30:58.400 --> 00:31:03.170
What really matters that distinguishes a
profile from any other file on your disk

00:31:03.250 --> 00:31:05.800
is that it have the valid ICC profile.

00:31:05.800 --> 00:31:09.070
And one quick way of determining
that is if there's an appropriate

00:31:09.140 --> 00:31:12.970
offset within the header,
there's a signature bytes.

00:31:13.450 --> 00:31:14.670
Which are ACSP.

00:31:14.760 --> 00:31:16.750
ColorSync Profile,
I believe it stands for.

00:31:16.760 --> 00:31:20.350
And that's what really matters,
and that's what ColorSync uses to

00:31:20.400 --> 00:31:21.640
determine if a file is a profile.

00:31:21.760 --> 00:31:25.390
We also impose the additional
restriction that the profile have

00:31:25.390 --> 00:31:26.830
a valid description tag in it.

00:31:26.980 --> 00:31:30.520
Because we realize in actual practice,
a lot of applications put up pop-up

00:31:30.520 --> 00:31:32.480
menus or scrolling lists with profiles.

00:31:32.480 --> 00:31:36.230
And if a profile has a bad name in it,
it can either be rendered as

00:31:36.270 --> 00:31:38.590
garbage or cause other problems.

00:31:38.680 --> 00:31:42.050
So in order to avoid this problem,
it's more important than ever to

00:31:42.120 --> 00:31:46.160
use the Profile First Aid ColorSync
utility to make sure that the

00:31:46.160 --> 00:31:50.150
profiles that your application ships
or creates are free of common errors.

00:31:50.150 --> 00:31:52.800
I'll show that a little bit later.

00:31:54.440 --> 00:31:57.600
Also, another one of the key features
of Mac OS X is that it's,

00:31:57.600 --> 00:32:00.380
for the first time,
it's a multi-localized operating system,

00:32:00.440 --> 00:32:02.950
which means that a given
CD of Mac OS X contains

00:32:03.560 --> 00:32:05.810
multiple languages on it.

00:32:05.900 --> 00:32:09.290
We wanted to provide that same
functionality for ICC profiles,

00:32:09.410 --> 00:32:11.940
which previously did
not have this support.

00:32:13.480 --> 00:32:17.430
So we defined a new optional
tag type of type MLUC,

00:32:17.570 --> 00:32:20.400
which stands for
multi-localized Unicode string.

00:32:20.430 --> 00:32:23.700
And this tag, you can think of it as
containing a list of a string,

00:32:23.750 --> 00:32:25.910
be it the name of the
profile or whatever,

00:32:25.910 --> 00:32:29.400
which has been localized for
multiple language and regions.

00:32:29.470 --> 00:32:36.400
We've also provided an easy
API for you to access this data.

00:32:36.400 --> 00:32:36.400
That's turned out to
be tricky in the past.

00:32:36.750 --> 00:32:39.800
So first off,
there's the API CM copy profile

00:32:39.800 --> 00:32:42.230
localized string dictionary.

00:32:42.300 --> 00:32:46.140
And what this API does is allow
you to get a CFDictionary which

00:32:46.190 --> 00:32:51.270
contains the language locale and
string for multiple localizations.

00:32:51.270 --> 00:32:56.310
And it'll return that to you from
a specific tag of a given profile.

00:32:56.480 --> 00:32:59.500
Similarly, there's a CM Set Profile
localized string dictionary,

00:32:59.720 --> 00:33:01.880
which allows you to write
a dictionary of localized

00:33:01.900 --> 00:33:03.480
strings into a tag of a profile.

00:33:03.480 --> 00:33:07.880
In more typical practice, however,
your application just wants to get

00:33:07.880 --> 00:33:10.200
one specific name out of a profile.

00:33:10.200 --> 00:33:15.180
And for that, we have an API,
CM Copy Profile Localized String,

00:33:15.180 --> 00:33:20.760
which you give it a profile, a tag,
a requested language and region,

00:33:20.760 --> 00:33:23.460
and then it will return to
you the actual language and

00:33:23.690 --> 00:33:25.290
region and the actual string.

00:33:26.410 --> 00:33:28.950
Here's an example of it being used
in practice at the bottom here.

00:33:28.980 --> 00:33:32.860
It is a CM Copy Profile Localized String.

00:33:32.860 --> 00:33:35.980
We pass in the prof, the DSCM tag,
which is the optional tag

00:33:35.980 --> 00:33:37.700
where this might be stored.

00:33:37.700 --> 00:33:40.940
And then, in this case,
the application is looking to see

00:33:40.940 --> 00:33:43.150
a US English string being returned.

00:33:43.160 --> 00:33:46.160
If that profile does not
contain a US English string,

00:33:46.160 --> 00:33:48.620
it will try to return an English string.

00:33:48.620 --> 00:33:50.230
If it doesn't do that,
it will fall back to

00:33:50.290 --> 00:33:51.360
a reasonable default.

00:33:53.100 --> 00:33:56.370
Another typical usage of this API is
if your application doesn't even

00:33:56.660 --> 00:34:00.080
care what language is being returned,
you can pass in nil where

00:34:00.080 --> 00:34:02.440
the EN-US is passed in here.

00:34:02.440 --> 00:34:05.250
In this situation,
which is very simple to call,

00:34:05.490 --> 00:34:10.020
the ColorSync will automatically return
the best language in the profile,

00:34:10.020 --> 00:34:12.480
given the user's current
preferred language settings.

00:34:16.830 --> 00:34:20.150
So, while still talking about profiles,
I want to talk for a

00:34:20.150 --> 00:34:23.340
bit about ICC profiles,
which is an important change

00:34:23.400 --> 00:34:24.820
that's on the horizon.

00:34:24.930 --> 00:34:28.740
The ICC Consortium has been
working long and hard on a new

00:34:28.740 --> 00:34:32.740
format for profiles in order to
provide more flexibility and power,

00:34:32.740 --> 00:34:36.340
and they're calling it
ICC version 4.0 profiles.

00:34:36.440 --> 00:34:38.500
I don't want to go into all
the details of the changes.

00:34:38.500 --> 00:34:41.980
You can probably get information
on that in more detail on the web,

00:34:42.050 --> 00:34:43.840
but I just want to give you a
few highlights of the changes

00:34:43.940 --> 00:34:44.750
and what to be aware of.

00:34:44.860 --> 00:34:47.100
First off,
there's obviously a new version

00:34:47.100 --> 00:34:50.310
field in the header of the profile,
so that you can tell whether

00:34:50.310 --> 00:34:53.500
a profile is a version for a
profile or an earlier version.

00:34:53.520 --> 00:34:58.700
Also, there's an MD5, or Message Digest,
checksum within the profile header,

00:34:58.700 --> 00:35:01.930
which is a very useful feature if your
application wants to be able to tell

00:35:02.060 --> 00:35:05.210
if two profiles are identical or not,
or to tell if a profile

00:35:05.320 --> 00:35:06.500
has changed over time.

00:35:06.520 --> 00:35:10.420
You can either access this MD5
checksum directly from the header,

00:35:10.480 --> 00:35:14.400
16-byte value,
or you can also use the ColorSync API,

00:35:14.400 --> 00:35:16.390
cm-get-profile-md5.

00:35:16.440 --> 00:35:19.980
The ColorSync API has the advantage
that it works on both ICC4

00:35:19.980 --> 00:35:22.610
profiles and earlier profiles,
which don't have it

00:35:22.690 --> 00:35:23.560
embedded in the header.

00:35:26.070 --> 00:35:28.940
There's also some new tag data types,
which are really where the

00:35:29.080 --> 00:35:33.580
new power and flexibility come
with ICC version 4 profiles.

00:35:33.640 --> 00:35:36.510
For one thing,
they've standardized on the MLUC,

00:35:36.510 --> 00:35:39.360
or multi-localized Unicode tag,
which I spoke about

00:35:39.360 --> 00:35:40.410
in the previous slide.

00:35:40.420 --> 00:35:43.860
But also, there's some new
multi-dimensional transform tags,

00:35:43.980 --> 00:35:49.240
or multi-purpose transfer tags,
MBA and MAB, that provide a lot of

00:35:49.240 --> 00:35:51.620
power to profile creators.

00:35:52.400 --> 00:35:55.440
The important thing to be aware
of is that some of your existing

00:35:55.560 --> 00:35:59.620
tags that you're used to reading
may contain the new data formats,

00:35:59.760 --> 00:36:01.500
whereas before it contained
the old data format.

00:36:01.500 --> 00:36:03.840
So, for example,
if you were to look in the

00:36:03.860 --> 00:36:07.260
A to B0 tag of a profile,
traditionally that used to contain

00:36:07.260 --> 00:36:09.650
either the MFT1 or MFT2 tag types.

00:36:09.660 --> 00:36:13.490
But starting with ICC version 4,
that data may actually be of

00:36:13.490 --> 00:36:17.220
a completely different type,
which is the MBA or MAB tag.

00:36:17.260 --> 00:36:22.250
So, the good news is that
ColorSync and AppleSync...

00:36:22.330 --> 00:36:24.860
...will be fully ICC 4 savvy.

00:36:24.940 --> 00:36:28.940
Which means that if your application
doesn't do any parsing of profiles,

00:36:28.940 --> 00:36:31.970
and all it does is open profile
references and does color

00:36:31.970 --> 00:36:35.000
management using those references,
or uses ColorSync

00:36:35.000 --> 00:36:38.820
indirectly through Quartz,
then everything will work perfectly.

00:36:39.380 --> 00:36:41.620
However,
if your application is in the business of

00:36:41.620 --> 00:36:45.280
creating profiles or modifying profiles,
you need to be aware of these

00:36:45.360 --> 00:36:49.130
new tag types and make sure that
you handle those cases correctly.

00:36:50.830 --> 00:36:54.480
So I want to go into a little bit more
detail on CMMs on Mac OS X as well.

00:36:54.480 --> 00:36:59.170
Like with profiles,
CMMs can also be installed

00:36:59.170 --> 00:37:01.040
in multiple locations.

00:37:01.250 --> 00:37:04.540
The typical location if an application
wanted to install a profile would

00:37:04.540 --> 00:37:06.330
be in library ColorSync CMMs.

00:37:06.350 --> 00:37:10.420
I don't know if you've noticed the
sort of family here is that a lot of

00:37:10.420 --> 00:37:14.600
the ColorSync stuff is stored within
some library ColorSync directory.

00:37:14.600 --> 00:37:17.540
So in this case,
it's library ColorSync CMMs.

00:37:17.540 --> 00:37:19.620
Also, a user,
if they had a CMM that they wanted to use

00:37:19.620 --> 00:37:23.090
just personally but didn't want to force
everyone on that machine to use that CMM,

00:37:23.090 --> 00:37:27.380
they can have a personal CMM installed,
which is a great way to debug CMMs,

00:37:27.380 --> 00:37:33.060
by the way, installing it in tilde
library ColorSync CMMs.

00:37:33.440 --> 00:37:37.300
So what this means is that if you have an
application that wants to present a list

00:37:37.420 --> 00:37:40.240
of CMMs to the user that are available,
so that the user can

00:37:40.240 --> 00:37:44.830
choose a preferred CMM,
you want to use the iterateCMM info API.

00:37:44.840 --> 00:37:47.400
This call will give you
information about all the CMMs

00:37:47.440 --> 00:37:50.990
that are installed in the system,
including the default Apple CMM.

00:37:53.340 --> 00:37:58.120
If your solution involves building a CMM,
there's some things you

00:37:58.120 --> 00:37:59.010
need to be aware of.

00:37:59.290 --> 00:38:02.610
The one key thing is that CMMs
on Mac OS X are CF bundle-based,

00:38:03.140 --> 00:38:05.400
whereas on Mac OS X they
were component manager-based.

00:38:05.400 --> 00:38:09.670
So you'll want to take a look at the
CFBundle documentation for information

00:38:09.670 --> 00:38:12.220
on how to package your CMM as a CFBundle.

00:38:12.220 --> 00:38:15.100
But for the most part,
the CMM will be very

00:38:15.100 --> 00:38:17.160
familiar to you on Mac OS X.

00:38:17.160 --> 00:38:20.280
Again, all your entry points that
you've supported in the past,

00:38:20.280 --> 00:38:24.280
CMM open, CMM concat, CMM match bitmap,
will all be there.

00:38:24.280 --> 00:38:27.210
The only difference is that instead
of having a component manager

00:38:27.210 --> 00:38:30.280
wrapper around these entry points,
you'll have a CFBundle wrapper

00:38:30.280 --> 00:38:31.240
around it instead.

00:38:35.850 --> 00:38:38.460
The Apple CMM,
which we ship as part of Mac OS X,

00:38:38.480 --> 00:38:42.260
has undergone a lot of work in order
to make sure that it is tuned and

00:38:42.370 --> 00:38:46.370
integrated fully with the core system,
and it works fully in that environment.

00:38:46.380 --> 00:38:48.480
And as such,
it has gone to some effort to make

00:38:48.520 --> 00:38:51.850
sure that it handles all the various
profile types and all the different

00:38:51.850 --> 00:38:53.580
image color spaces correctly.

00:38:53.580 --> 00:38:57.000
What this means is that if you're
developing your own third-party CMM,

00:38:57.000 --> 00:38:59.780
and you want it to work in
this ColorSync environment,

00:38:59.780 --> 00:39:04.030
you need to make sure to thoroughly test
your CMM under a wide variety of cases.

00:39:04.210 --> 00:39:07.350
Because if the user chooses
your CMM as a default CMM,

00:39:07.350 --> 00:39:10.670
it will be used throughout
the core's imaging model.

00:39:10.700 --> 00:39:12.060
It's a very powerful feature.

00:39:15.160 --> 00:39:17.700
So we've had a lot of talk so far.

00:39:17.700 --> 00:39:19.790
I want to just do a
little bit of a demo here,

00:39:19.800 --> 00:39:24.100
just to kind of give you a
guided tour of where things and

00:39:24.200 --> 00:39:25.490
how things live on Mac OS X.

00:39:25.500 --> 00:39:28.190
So first of all,
I'm just started out in the

00:39:28.190 --> 00:39:30.230
root level of the hard drive.

00:39:30.240 --> 00:39:31.960
I want to go on my Mac OS X volume.

00:39:31.960 --> 00:39:34.980
I can go into the library,
ColorSync directory.

00:39:34.980 --> 00:39:37.120
And inside here,
we have the majority of the

00:39:37.210 --> 00:39:38.700
profiles that we install.

00:39:38.700 --> 00:39:41.140
And all of these end in .icc.

00:39:41.710 --> 00:39:44.910
There's also a displays profiles folder,
which is where profiles that are for

00:39:45.200 --> 00:39:47.900
actual displays are installed as well.

00:39:47.900 --> 00:39:51.980
We also have a bunch of example scripts
for the ColorSync scripting environment.

00:39:51.980 --> 00:39:56.740
Not be showing that much today there,
but there's a lot of power in there.

00:39:56.740 --> 00:39:59.380
You might want to investigate those
scripts if you're an Apple scripter.

00:40:01.230 --> 00:40:04.030
Also, if you actually want to know
where ColorSync resides,

00:40:04.100 --> 00:40:09.290
which can be a little tricky,
you go into System Library.

00:40:10.660 --> 00:40:11.600
Frameworks.

00:40:11.600 --> 00:40:14.200
Let's see, where are we here?

00:40:14.270 --> 00:40:15.480
Frameworks.

00:40:15.590 --> 00:40:22.230
ColorSync is a sub-framework of
the application services framework.

00:40:22.230 --> 00:40:28.530
So you go into application
services frameworks,

00:40:28.530 --> 00:40:30.500
and then there lies ColorSync.

00:40:30.500 --> 00:40:30.500
And this is where you can find
the headers for your browsing.

00:40:31.810 --> 00:40:35.930
Also, if we go back up a directory,
we can also see in the

00:40:35.930 --> 00:40:41.250
system library path,
there's a ColorSync directory where

00:40:41.460 --> 00:40:46.700
the minimum required set of profiles
that Apple needs are installed.

00:40:46.700 --> 00:40:49.900
We also have plug-ins for
our scripting architecture,

00:40:49.900 --> 00:40:53.900
or Apple scripting architecture here,
for various file types.

00:40:54.920 --> 00:40:58.660
Also, there's a few applications
that ColorSync has installed.

00:40:58.710 --> 00:41:01.580
One is, if you go into application,

00:41:01.820 --> 00:41:02.790
Let's see, where's utilities?

00:41:02.800 --> 00:41:08.000
It's always at the bottom.

00:41:08.000 --> 00:41:08.000
There is the

00:41:08.100 --> 00:41:08.440
Where is it?

00:41:08.470 --> 00:41:09.300
Display Calibrator.

00:41:09.350 --> 00:41:10.830
This is where our calibrator resides.

00:41:11.030 --> 00:41:12.610
Currently, it's an application.

00:41:12.750 --> 00:41:14.260
I can just launch this real quickly.

00:41:14.450 --> 00:41:20.960
It's very similar to the
old display calibrator,

00:41:20.960 --> 00:41:20.960
although with a slightly
more updated look to it.

00:41:21.150 --> 00:41:23.970
And we can go through and do our
typical display calibration set.

00:41:24.220 --> 00:41:26.340
We'll skip that today.

00:41:29.550 --> 00:41:33.100
There's also the ColorSync
Utility application,

00:41:33.100 --> 00:41:37.330
which in the version that
ships with Mac OS X today,

00:41:37.380 --> 00:41:41.200
has within it the functionality
of Profile First Aid.

00:41:41.200 --> 00:41:43.870
I'd actually kind of like to show
you a new version of ColorSync

00:41:43.970 --> 00:41:46.960
Utility that we're working on,
which has this plus some more.

00:41:46.960 --> 00:41:48.300
Let me launch it real quickly.

00:41:50.930 --> 00:41:53.200
So as you can see,
one of its functionality

00:41:53.240 --> 00:41:54.840
is Profile First Aid.

00:41:54.940 --> 00:41:56.340
And so this is familiar.

00:41:56.340 --> 00:41:58.050
If you've used Profile
First Aid in the past,

00:41:58.150 --> 00:42:00.510
you can hit Verify,
and it'll go through and search

00:42:00.640 --> 00:42:02.760
all the profiles on your disk.

00:42:03.570 --> 00:42:08.120
Also, however, it has some new modules,
one of which is the Profiles module.

00:42:08.120 --> 00:42:11.370
And this is sort of the
beginning of a work in progress.

00:42:11.600 --> 00:42:17.280
But what this module does is it's
client of the CM Profile Iteration API.

00:42:17.280 --> 00:42:20.280
So it uses the API to locate
all the profiles on the disk

00:42:20.340 --> 00:42:23.740
and then present them to the
user in a variety of fashions.

00:42:23.740 --> 00:42:26.050
Here we have them all
grouped by location.

00:42:26.100 --> 00:42:30.150
So you can see system library,
ColorSync profiles, slash library,

00:42:30.570 --> 00:42:31.960
ColorSync profiles.

00:42:31.960 --> 00:42:33.480
We can see all the profiles.

00:42:33.610 --> 00:42:36.250
We can see basic information
about the profiles that even

00:42:36.250 --> 00:42:38.470
a novice can understand,
the full path,

00:42:38.470 --> 00:42:40.600
the color space when it was created.

00:42:40.600 --> 00:42:45.030
We can also, however, as a convenience,
group these by different things.

00:42:45.030 --> 00:42:49.540
If you just want to, say, for example,
see where all the CMYK profiles are,

00:42:49.760 --> 00:42:53.290
you can just check out the
CMYK profiles and look at them there.

00:42:55.470 --> 00:42:59.540
So I'm going to show more of this later,
but now I think I'll

00:42:59.550 --> 00:43:01.430
go back to the slides.

00:43:06.200 --> 00:43:07.970
And actually,
this provides a good opportunity

00:43:08.050 --> 00:43:10.310
for me to pass the microphone
over to Eric Broadben,

00:43:10.310 --> 00:43:13.880
who will be talking about ColorSync
preferences and supporting APIs.

00:43:13.880 --> 00:43:14.380
Thanks.

00:43:15.240 --> 00:43:16.310
Thanks, David.

00:43:19.480 --> 00:43:22.160
Alright, well I wanted to start out today
with a little bit of an overview.

00:43:22.210 --> 00:43:27.590
Why are we even talking about ColorSync
preferences and supporting APIs?

00:43:28.690 --> 00:43:35.770
Well, here's a view of an application
in classic Mac OS and how it

00:43:35.770 --> 00:43:39.390
interacts with different parts
of the system and the user.

00:43:39.400 --> 00:43:43.990
Applications, generally speaking,
did not have any knowledge

00:43:43.990 --> 00:43:46.020
of devices on the system.

00:43:46.020 --> 00:43:51.240
So applications that are doing
color management would often

00:43:51.250 --> 00:43:56.000
want to have an idea of that,
so they would present a user

00:43:56.000 --> 00:43:59.560
interface so that the user could
tell them what kinds of devices

00:43:59.560 --> 00:44:00.580
they would have on their system.

00:44:02.210 --> 00:44:05.260
and the application would get
some information about that in

00:44:05.260 --> 00:44:09.260
order to do color management
to those devices or from them.

00:44:09.440 --> 00:44:12.480
Similarly, applications,
if they really want to

00:44:12.480 --> 00:44:15.310
do color management,
also sometimes need to understand

00:44:15.590 --> 00:44:20.140
where data is coming from in
documents if there are no profiles.

00:44:20.250 --> 00:44:23.220
So again, applications would,
as part of the user interface,

00:44:23.260 --> 00:44:28.890
often have parts of it which would allow
the user to select a default profile for

00:44:28.900 --> 00:44:30.810
a color space or something like that.

00:44:30.940 --> 00:44:32.910
And this was actually very good.

00:44:32.910 --> 00:44:37.300
We were encouraged by the fact that
applications were starting to do this

00:44:37.420 --> 00:44:40.230
over the last few years because it meant
that they were taking color management

00:44:40.440 --> 00:44:44.020
seriously and they were putting an
effort into their applications to

00:44:44.020 --> 00:44:47.460
make sure that they did things right.

00:44:47.580 --> 00:44:50.410
There was a little bit of a
problem though over time where,

00:44:50.510 --> 00:44:56.670
as more and more applications did this,
there were slight differences

00:44:56.670 --> 00:44:59.920
between the user interfaces and
users were becoming... A lot of

00:44:59.920 --> 00:45:02.670
the power users were not confused,
but some of the users

00:45:02.740 --> 00:45:05.320
were confused about,
you know, how come I have to do this

00:45:05.320 --> 00:45:07.710
in this application and this
in this application and the

00:45:07.750 --> 00:45:09.420
terminology is slightly different.

00:45:09.420 --> 00:45:14.040
So the end story at that point was
that the application would simply call

00:45:14.070 --> 00:45:16.780
ColorSync to do its color management.

00:45:17.510 --> 00:45:22.400
We wanted to provide a better story for
both application developers and users.

00:45:22.400 --> 00:45:26.720
So on Mac OS X, we think we have a more
intelligent way of doing this.

00:45:26.840 --> 00:45:31.240
First of all, ColorSync is aware of
devices on Mac OS X,

00:45:31.240 --> 00:45:32.820
which we'll see.

00:45:32.820 --> 00:45:36.320
And secondly,
we've redesigned our user interface to

00:45:36.320 --> 00:45:40.180
take advantage of some of this knowledge,
so some of the devices are actually

00:45:40.190 --> 00:45:42.000
reflected in our user interface.

00:45:43.520 --> 00:45:49.100
The user interface covers a lot of
the data points that the applications

00:45:49.100 --> 00:45:50.610
use to try to collect from the user.

00:45:53.340 --> 00:45:55.690
Applications can use
the APIs behind these,

00:45:55.770 --> 00:46:01.470
which we'll talk about,
to get the preferences for profiles,

00:46:01.470 --> 00:46:04.900
incoming default profiles
for color spaces,

00:46:04.900 --> 00:46:08.060
and in some cases,
actual profiles for devices,

00:46:08.060 --> 00:46:09.560
instead of guessing about them.

00:46:09.560 --> 00:46:13.170
And then the application can go
ahead and do what it's good at

00:46:13.170 --> 00:46:16.230
or what it was designed to do,
which is, in this case,

00:46:16.230 --> 00:46:18.790
image manipulation or
something like that,

00:46:18.830 --> 00:46:22.860
and then call ColorSync the same way
as before to do the color management.

00:46:23.700 --> 00:46:25.960
So as I said,
our preference panel was redesigned.

00:46:25.960 --> 00:46:30.580
It was introduced in ColorSync 3.0,
which shipped on Mac OS 9 first.

00:46:31.120 --> 00:46:38.600
And it was designed to provide a single
point for users to go to to control color

00:46:38.680 --> 00:46:42.240
in terms of profiles on their system.

00:46:42.250 --> 00:46:47.920
Also, it allowed us to formalize some of
the concepts and terminology that are

00:46:47.920 --> 00:46:50.720
important for users to understand,
so they really understand what

00:46:50.720 --> 00:46:54.080
color management is about,
color devices and color spaces.

00:46:54.080 --> 00:47:00.240
And we built it on a model that allows
for us to easily add to it in the future

00:47:00.240 --> 00:47:05.740
in terms of providing more support
for new color spaces and new devices.

00:47:05.800 --> 00:47:11.440
So here's a look at what the new
panel looks like on Mac OS X.

00:47:11.460 --> 00:47:14.250
There's several panes of it,
but we're just going to talk

00:47:14.250 --> 00:47:15.690
about the Profiles pane.

00:47:15.710 --> 00:47:22.060
It has the first view of this is
default profiles for documents.

00:47:22.130 --> 00:47:27.100
Documents can contain lots
of different types of data.

00:47:27.100 --> 00:47:33.630
So an application can utilize the fact
that this is where users can set up

00:47:33.730 --> 00:47:37.100
profiles for different color spaces
that will be contained in documents.

00:47:37.100 --> 00:47:40.590
Now, if the data has a profile
associated with it,

00:47:40.670 --> 00:47:43.320
then that takes precedence,
but often documents don't

00:47:43.450 --> 00:47:44.800
have profiles in them.

00:47:44.800 --> 00:47:48.570
And this is where the user gets to
set up their preferences for what

00:47:48.570 --> 00:47:52.360
happens when there is no profile
associated with the color data.

00:47:52.480 --> 00:47:57.660
The application can get access
to this preference by using the

00:47:57.660 --> 00:48:00.890
CM/GET default profile by space API.

00:48:01.120 --> 00:48:05.060
They pass in one of the color space
types that are defined in our headers,

00:48:05.060 --> 00:48:07.910
and they get back a profile reference.

00:48:08.150 --> 00:48:11.100
And this would be appropriate, obviously,
as a source profile.

00:48:11.100 --> 00:48:15.070
It's a default profile
for the colors coming in.

00:48:16.010 --> 00:48:21.610
The second view in the Profiles pane
is the profiles for standard devices.

00:48:21.610 --> 00:48:25.410
Here, applications, obviously,
many of them that are doing color

00:48:25.420 --> 00:48:29.640
management want to know where the
data is going to and need a profile

00:48:29.640 --> 00:48:33.100
for that or where it came from if
they know that it came from a device.

00:48:33.160 --> 00:48:38.930
ColorSync actually will reflect devices
that are installed on the user's system

00:48:39.120 --> 00:48:41.550
into this so that users can see that.

00:48:41.600 --> 00:48:46.420
Applications can get access to
these preferences by calling the

00:48:46.420 --> 00:48:50.860
CMGetDefaultProfileByUse API,
passing in one of the standard

00:48:50.860 --> 00:48:53.330
use types and again getting
back a profile reference.

00:48:53.420 --> 00:48:55.140
Often this would be a
destination profile,

00:48:55.140 --> 00:48:56.800
but it can still be an input profile.

00:48:56.800 --> 00:49:03.000
I wanted to give an example of
how an application might benefit.

00:49:03.000 --> 00:49:04.140
I wanted to give an example
of how an application might

00:49:04.140 --> 00:49:06.360
benefit from these APIs in a
simple color management example.

00:49:06.360 --> 00:49:10.430
I have a sample code
which would not compile,

00:49:10.540 --> 00:49:13.490
obviously,
but my match image routine which

00:49:13.640 --> 00:49:16.640
takes some kind of an image
reference which the application can

00:49:16.640 --> 00:49:19.230
extract information or data from.

00:49:19.240 --> 00:49:23.720
As I said before,
the first thing an application should do

00:49:23.750 --> 00:49:28.710
when managing color from a document is to
find out if there is a profile embedded,

00:49:28.800 --> 00:49:32.840
or in this case an image.

00:49:32.840 --> 00:49:36.600
Modern image formats contain
containers for profiles,

00:49:36.600 --> 00:49:39.880
so there are known ways to find
out if there is a profile in an

00:49:39.880 --> 00:49:41.800
image and get it out of there.

00:49:41.890 --> 00:49:43.070
If there is one, great.

00:49:43.080 --> 00:49:46.120
If there is not,
well then we can go ahead and use

00:49:46.140 --> 00:49:48.680
the API CMGetDefaultProfileBySpace.

00:49:48.790 --> 00:49:52.440
But of course first we need to find
out what color space the image is in.

00:49:52.530 --> 00:49:57.220
Once we complete that,
we can go ahead and get a reasonable

00:49:57.220 --> 00:50:00.790
default source profile for that image.

00:50:01.580 --> 00:50:03.620
Once, at that point,
we have a source profile,

00:50:03.620 --> 00:50:06.980
we want to go ahead and
get a destination profile.

00:50:06.980 --> 00:50:09.100
So,
let's say we're matching to the display.

00:50:09.100 --> 00:50:12.290
We can call cmget default
profile by use display,

00:50:12.310 --> 00:50:15.640
cmdisplay use,
and get a destination profile.

00:50:15.640 --> 00:50:17.600
And now we have source and destination.

00:50:17.600 --> 00:50:20.620
We can do our color management,
get the bitmap from the image,

00:50:20.620 --> 00:50:21.990
and go ahead and match it.

00:50:22.040 --> 00:50:24.140
Now,
there's a little bit of a caveat here.

00:50:24.140 --> 00:50:28.870
This code sample would be
appropriate for a classic or

00:50:29.080 --> 00:50:32.300
Carbon application running on Mac OS X.

00:50:32.300 --> 00:50:35.820
On Mac OS X,
as you saw in Luke's presentation,

00:50:35.820 --> 00:50:39.220
much of the destination color
management is done for you.

00:50:39.360 --> 00:50:42.450
So, you don't really need to do
this kind of matching if your

00:50:42.500 --> 00:50:44.310
application utilizes Quartz.

00:50:44.320 --> 00:50:48.970
But at least what you should do is be
aware of where the data is coming from.

00:50:48.980 --> 00:50:51.820
And if there's no profile
associated with it,

00:50:51.820 --> 00:50:55.890
you can tag it using our... APIs.

00:50:57.230 --> 00:51:01.060
So in summary, in terms of where
ColorSync preferences go,

00:51:01.160 --> 00:51:05.950
all data is now color-managed on Quartz,
and your application can really be a

00:51:05.950 --> 00:51:13.050
full player in the color management
story by simply making sure that data is

00:51:13.050 --> 00:51:18.700
associated with a correct source profile,
and if need be, a destination profile.

00:51:18.700 --> 00:51:23.360
Most applications can simply use
these APIs for color management

00:51:23.360 --> 00:51:26.360
and have the knowledge that they're
getting the user's preferences.

00:51:27.100 --> 00:51:31.190
A lot of applications will still need
to put up their own user interfaces.

00:51:31.200 --> 00:51:36.320
We don't mean to say that the ColorSync
preference panel is the be-all,

00:51:36.320 --> 00:51:40.300
end-all of what color management
is about on the system,

00:51:40.300 --> 00:51:43.120
but we're hoping that a lot
of applications will simply

00:51:43.120 --> 00:51:46.300
be able to use our preference
panel and the APIs behind it.

00:51:46.510 --> 00:51:48.110
Again, they're extensible.

00:51:48.110 --> 00:51:51.890
They allow us to add support for
future devices and color spaces,

00:51:51.890 --> 00:51:55.300
and again,
they're flexible in that applications can

00:51:55.300 --> 00:52:00.900
manage color from both a document-centric
or device-centric perspective.

00:52:01.380 --> 00:52:06.290
Speaking of devices,
another new feature in ColorSync

00:52:06.290 --> 00:52:09.490
on Mac OS X is device support.

00:52:10.770 --> 00:52:17.700
And on Mac OS X, we have new kernel,
new I/O, and new device managers for

00:52:17.700 --> 00:52:20.160
input display and printing.

00:52:20.160 --> 00:52:25.670
And this gave us an opportunity to
integrate ColorSync with those device

00:52:25.670 --> 00:52:33.160
managers to allow ColorSync to be aware
of actual devices and their profiles.

00:52:33.270 --> 00:52:34.960
This is very powerful.

00:52:34.960 --> 00:52:38.540
It was implemented with the
following services in general:

00:52:38.580 --> 00:52:41.190
device registration,
profile registration,

00:52:41.190 --> 00:52:45.790
the notion of defaults
for devices and profiles,

00:52:45.890 --> 00:52:49.830
and notification services,
which we'll talk about later.

00:52:51.350 --> 00:52:54.310
A little bit more detail on
device and profile registration.

00:52:54.310 --> 00:52:57.240
Again, we rely on the device managers.

00:52:57.240 --> 00:53:01.660
We built support into them for this.

00:53:01.660 --> 00:53:04.670
They are the points on the
system that understand when

00:53:04.670 --> 00:53:06.710
devices are attached or removed.

00:53:06.750 --> 00:53:11.360
They also are the points on the system
that can discover profiles for printing.

00:53:11.360 --> 00:53:13.320
There's a known way to do that.

00:53:13.800 --> 00:53:14.880
Display, same thing.

00:53:14.880 --> 00:53:20.120
The display manager knows how to discover
or build device profiles for the display.

00:53:20.540 --> 00:53:24.680
Then they go ahead and use some
ColorSync APIs to tell ColorSync

00:53:24.790 --> 00:53:27.280
about the device and its profiles.

00:53:27.280 --> 00:53:30.740
There's register, unregister,
and there's CM set

00:53:30.840 --> 00:53:32.820
device factory profiles.

00:53:32.820 --> 00:53:36.710
ColorSync makes a distinction between
factory profiles and custom profiles,

00:53:36.710 --> 00:53:39.100
and we'll talk about
that a little bit later.

00:53:40.810 --> 00:53:45.130
In terms of defaults,
we saw that the APIs in the profiles

00:53:45.220 --> 00:53:50.600
for standard devices and the
API reflectors give access to defaults,

00:53:50.760 --> 00:53:53.030
not just any device profile.

00:53:53.040 --> 00:53:57.280
And the way this works is that
when profiles are registered,

00:53:57.280 --> 00:54:00.410
one of them is identified as
the default for that device.

00:54:01.270 --> 00:54:03.680
Over time,
a user may change their settings.

00:54:03.680 --> 00:54:07.120
For example, maybe initially when
installing a printer driver,

00:54:07.120 --> 00:54:12.410
plain paper is a default setting,
and then they go ahead and change

00:54:12.410 --> 00:54:14.150
it to glossy or something like that.

00:54:14.220 --> 00:54:19.480
The device manager is aware
of that and tells us that the

00:54:19.480 --> 00:54:22.580
default profile has changed.

00:54:22.640 --> 00:54:25.670
So again,
the device managers are the place

00:54:25.740 --> 00:54:30.300
where these changes are noticed,
and they go ahead and notify ColorSync.

00:54:30.780 --> 00:54:34.800
And then they can use CM Set Default
Device if a default device changes,

00:54:34.800 --> 00:54:40.820
or CM Set Device Default Profile
ID if a default profile changes.

00:54:42.010 --> 00:54:43.880
So one of the things
that this allows for,

00:54:43.900 --> 00:54:48.420
which we haven't had on Mac OS before,
is support for calibration.

00:54:48.440 --> 00:54:54.980
And this is done because of the
data that we have with a profile.

00:54:54.980 --> 00:55:00.440
Along with the profile, we get an ID,
which has to be unique per device,

00:55:00.440 --> 00:55:03.800
a mode name,
which really means under what

00:55:03.800 --> 00:55:08.340
conditions is this profile used,
like plain paper, glossy, transparency,

00:55:08.340 --> 00:55:09.130
and so on.

00:55:09.650 --> 00:55:12.780
It's not the name of the profile,
it's the name of the condition

00:55:12.780 --> 00:55:15.510
under which the profile is used,
and actually something

00:55:15.510 --> 00:55:17.570
that's not listed here,
but a URL for where the

00:55:17.570 --> 00:55:18.880
profile is on the system.

00:55:20.370 --> 00:55:24.300
And profiles are actually
referenced most of the time by ID,

00:55:24.300 --> 00:55:28.190
so we don't bind with the URL until
late in the game when we actually

00:55:28.190 --> 00:55:29.340
need to do the color management.

00:55:29.340 --> 00:55:32.770
What this means is that

00:55:33.320 --> 00:55:38.050
Those profiles can be customized by an
application that knows how to do it.

00:55:38.150 --> 00:55:42.490
So a calibration application might go
ahead and get the factory profiles,

00:55:42.490 --> 00:55:45.370
ask the user by putting
up a list of modes,

00:55:45.370 --> 00:55:49.490
which mode they want to calibrate for,
do their calibration,

00:55:49.490 --> 00:55:53.690
and then overlay by ID with a new URL,
a new profile that's on a

00:55:53.690 --> 00:55:56.140
different place in the system.

00:55:56.900 --> 00:56:00.380
And the printer, the print system,
or the user,

00:56:00.560 --> 00:56:03.150
doesn't have to go and set anything else.

00:56:03.210 --> 00:56:04.770
The calibration
application has done this.

00:56:04.770 --> 00:56:09.200
That new profile will be used when it
comes time to do the color management.

00:56:10.670 --> 00:56:13.550
So there are some APIs that support this.

00:56:13.640 --> 00:56:17.310
GetDeviceFactoryProfiles, and then set,
we could have called it

00:56:17.320 --> 00:56:20.320
setDeviceCustomProfiles,
but we just called it setDeviceProfiles

00:56:20.410 --> 00:56:24.320
and setDeviceProfile if the calibration
application just wants to do one profile.

00:56:24.320 --> 00:56:28.180
Up until this point,
the APIs in the device support

00:56:28.180 --> 00:56:32.870
have pretty much been things
that just the system would call,

00:56:32.870 --> 00:56:36.550
but at this point,
if a calibration application

00:56:36.580 --> 00:56:38.370
wants to get involved,
it would use these APIs.

00:56:39.540 --> 00:56:45.260
Finally, as part of our device support,
if applications want to,

00:56:45.260 --> 00:56:49.710
they can become aware of the changes
in devices on their system that

00:56:49.710 --> 00:56:51.020
the device managers tell us about.

00:56:51.080 --> 00:56:56.320
ColorSync will post notifications
to a distributed center,

00:56:56.320 --> 00:57:01.740
and by this we just mean that any process
on the system can get a notification if

00:57:01.750 --> 00:57:04.900
it registers with a distributed center.

00:57:05.960 --> 00:57:09.900
Some of the things you can get notified
for are changes to a default device

00:57:09.900 --> 00:57:13.690
for a device class if the user plugs
in a new printer and sets it as their

00:57:13.750 --> 00:57:15.920
default printer or something like that.

00:57:16.310 --> 00:57:17.910
There's a notification for that.

00:57:18.000 --> 00:57:22.640
Changes to factory or custom profiles,
changes to a default profile,

00:57:22.640 --> 00:57:25.480
and registration and unregistration.

00:57:25.480 --> 00:57:31.690
There are no ColorSync APIs for
this because we don't actually

00:57:31.840 --> 00:57:35.250
support notification per se.

00:57:35.460 --> 00:57:38.700
We post notifications through
the services available,

00:57:38.700 --> 00:57:40.830
and an application needs to
register with them through

00:57:40.990 --> 00:57:42.500
either Core Foundation or Cocoa.

00:57:42.520 --> 00:57:47.300
So go ahead and look at those
APIs if you're interested in that.

00:57:47.320 --> 00:57:50.650
You will need to look in the
ColorSync headers for the notification

00:57:50.650 --> 00:57:52.500
strings that you register for.

00:57:55.300 --> 00:57:59.060
So in summary, we've integrated on
Mac OS X with device managers.

00:57:59.060 --> 00:58:02.850
This gives us some new features
and some new integration.

00:58:02.900 --> 00:58:07.220
Applications have access
to default profiles simply

00:58:07.220 --> 00:58:09.960
through our preferences APIs.

00:58:09.960 --> 00:58:14.550
Applications can actually get
more specific profile information

00:58:14.560 --> 00:58:17.020
if they want using some new APIs.

00:58:17.020 --> 00:58:21.370
Calibration is supported because
of the way we register and deal

00:58:21.370 --> 00:58:23.560
with profiles on the system.

00:58:23.560 --> 00:58:28.350
And finally, applications can get
notified of these changes.

00:58:28.680 --> 00:58:32.260
Speaking of which,
I believe we have a demo, David,

00:58:32.260 --> 00:58:36.330
of an application which
will take advantage of this.

00:58:36.340 --> 00:58:38.730
Thanks, Eric.

00:58:38.740 --> 00:58:43.580
Okay, so switching to...

00:58:48.300 --> 00:58:52.220
So as I left you wondering about before,
we have this Devices button in

00:58:52.220 --> 00:58:53.920
the ColorSync Utility module.

00:58:53.920 --> 00:58:56.640
And what this module is,
is it's a client of the

00:58:56.640 --> 00:58:58.240
device integration API.

00:58:58.240 --> 00:59:01.850
And what it'll do is it'll show you
a list of all the devices that have

00:59:01.850 --> 00:59:04.160
registered profiles on this system.

00:59:04.160 --> 00:59:07.450
And what I have here is we have
different classes of devices,

00:59:07.460 --> 00:59:11.790
general classes, scanners, cameras,
displays, printers, proofers.

00:59:11.820 --> 00:59:14.340
And there's one display registered.

00:59:14.340 --> 00:59:18.180
Also, for purposes of demoing,
I've registered two cameras as well.

00:59:18.200 --> 00:59:20.650
If we look at the--we have two cameras.

00:59:20.650 --> 00:59:23.760
For each of these cameras,
there's two different

00:59:23.820 --> 00:59:25.130
modes associated with it.

00:59:25.190 --> 00:59:28.340
If I click on the indoor mode,
it will show what the

00:59:28.400 --> 00:59:32.080
factory profile for that is,
which in this case just defaults to sRGB.

00:59:32.630 --> 00:59:36.760
And there's also an additional
profile if it's been overridden

00:59:36.760 --> 00:59:39.200
by the user or by a calibrator.

00:59:39.250 --> 00:59:40.900
And there's a second
profile for that as well.

00:59:40.900 --> 00:59:44.180
So we're going to have
different device classes,

00:59:44.270 --> 00:59:47.190
different devices, and different modes
within a given device.

00:59:48.200 --> 00:59:51.270
So this application is kind of nice
because it allows you in one spot

00:59:51.270 --> 00:59:55.170
to be able to browse the list of
ColorSync-savvy devices on the system.

00:59:55.190 --> 00:59:59.200
We can also change what
the profile is here.

00:59:59.200 --> 01:00:02.490
If we don't have a specific calibrator,
we could create our own calibrated

01:00:02.620 --> 01:00:07.130
profile and just associate that
profile with this device if we wish.

01:00:07.230 --> 01:00:09.150
And it'll be used automatically.

01:00:09.200 --> 01:00:12.680
Also, we have the display here,
which also has a profile

01:00:12.720 --> 01:00:14.070
associated with it.

01:00:14.400 --> 01:00:18.200
This is the profile that was generated
automatically when the system is booted.

01:00:18.270 --> 01:00:21.740
So it's based on information
returned from the EDID.

01:00:21.740 --> 01:00:25.050
But if I actually go into
the system control panel,

01:00:25.050 --> 01:00:27.780
system preferences, go to displays,

01:00:28.560 --> 01:00:30.900
and go to the color tab.

01:00:30.950 --> 01:00:32.740
This also shows me the same profile.

01:00:32.920 --> 01:00:36.340
So we have two different
clients of the same database,

01:00:36.340 --> 01:00:38.100
if you want to think of it.

01:00:38.100 --> 01:00:40.150
Now,
one other thing about this application

01:00:40.210 --> 01:00:44.260
is it's registered that it wants to
receive notifications of any changes.

01:00:44.360 --> 01:00:47.310
So if I go to this tab here
and change the profile to

01:00:47.730 --> 01:00:51.300
Multiscan 17 for some reason,
you'll see that in the background,

01:00:51.300 --> 01:00:53.380
this app has already received
that notification and

01:00:53.390 --> 01:00:55.100
it's already been updated.

01:00:55.210 --> 01:00:56.600
If I flip it back.

01:00:56.600 --> 01:00:59.000
Also, if I were to go and calibrate
and go through the process

01:00:59.140 --> 01:01:01.890
of calibrating the display,
again, this is--the profile for this

01:01:01.890 --> 01:01:06.220
display would be changed and it
would be reflected in this database.

01:01:06.320 --> 01:01:08.280
So this is really powerful.

01:01:08.280 --> 01:01:13.220
It allows applications in a standardized
way to calibrate a wide variety

01:01:13.220 --> 01:01:17.110
of devices and for the users to
get the best possible color out of

01:01:17.110 --> 01:01:19.640
their--out of their individual devices.

01:01:19.640 --> 01:01:22.460
Another way of kind of demonstrating
this is we have a printer we've hooked

01:01:22.460 --> 01:01:25.020
up here that registers for profiles.

01:01:25.070 --> 01:01:32.220
If I just go in here and plug it in, USB,
excuse me, bring this app to front and

01:01:32.380 --> 01:01:35.690
then go to print center.

01:01:40.900 --> 01:01:41.900
A little bit of a beach ball.

01:01:41.920 --> 01:01:44.510
It's automatically
recognized the printer,

01:01:44.510 --> 01:01:47.400
and as you can see, let's see,
did it register?

01:01:47.400 --> 01:01:48.870
Oops.

01:01:48.880 --> 01:01:55.680
Let me delete it, quit it,
and launch it again.

01:01:55.680 --> 01:01:55.680
Sorry about that.

01:02:01.980 --> 01:02:03.980
No, it's decided to be honorary.

01:02:03.980 --> 01:02:05.440
This was working earlier, I swear.

01:02:05.440 --> 01:02:08.940
Okay, well, that's a good demo without
something not working as expected.

01:02:08.940 --> 01:02:13.120
But anyhow,
you can see we're receiving notifications

01:02:13.120 --> 01:02:16.960
for the different devices and
they'll be registered automatically.

01:02:16.990 --> 01:02:21.130
The real advantage of this is by having
a device that registers for profiles,

01:02:21.440 --> 01:02:24.890
registers its profiles,
it allows a savvy user of your device

01:02:24.890 --> 01:02:28.410
to be able to query to see that
device's profiles and also to be able

01:02:28.550 --> 01:02:32.360
to calibrate that to be able to get the
best possible results out of that device.

01:02:32.360 --> 01:02:34.400
So I think that's it for now.

01:02:34.400 --> 01:02:39.010
We have a minor mystery of why it didn't

01:02:39.990 --> 01:02:40.900
Oh, look, it's back.

01:02:40.900 --> 01:02:41.660
I needed to relaunch.

01:02:41.660 --> 01:02:43.700
Sorry about that.

01:02:43.700 --> 01:02:48.100
So here we see the Stylus Color 880
coming up and registering no less than,

01:02:48.100 --> 01:02:50.810
I believe, eight different profiles,
all slightly different

01:02:50.810 --> 01:02:52.370
for different print modes.

01:02:52.370 --> 01:02:54.930
I think they could be
named slightly differently,

01:02:54.930 --> 01:02:58.310
but it's really great that they're
registering all these modes.

01:02:58.310 --> 01:03:02.160
We can also change which one is
the default mode for this printer.

01:03:02.160 --> 01:03:04.230
If we had multiple printers,
we could check which one

01:03:04.230 --> 01:03:05.340
is the default printer.

01:03:08.880 --> 01:03:11.190
All right, that's it for now.

01:03:17.070 --> 01:03:18.980
So as always,
where to go for more information?

01:03:19.100 --> 01:03:21.900
If you're more interested in
getting more detailed information,

01:03:21.900 --> 01:03:27.190
you can go get information on
ColorSync from www.apple.com/colorsync

01:03:27.340 --> 01:03:29.160
or the SDK site as well.

01:03:29.190 --> 01:03:32.400
Also, I always make a pitch for the
ColorSync dev and ColorSync users list.

01:03:32.400 --> 01:03:38.050
There's a lot of great
information there as well.

01:03:38.050 --> 01:03:38.050
And feedback can be sent
to colorsync@apple.com.

01:03:39.370 --> 01:03:42.060
and I'll pass it over to
Travis for a few more words.

01:03:42.060 --> 01:03:44.710
Thank you, David.

01:03:44.780 --> 01:03:46.940
I want to just quickly go through
the roadmap of the remaining

01:03:46.940 --> 01:03:50.010
graphic sessions here at WWDC.

01:03:50.210 --> 01:03:54.490
We have 1.13, which is text on Mac OS X,
which is very important if you're

01:03:54.490 --> 01:03:57.900
interested in doing advanced
text drawing on X and also text

01:03:57.900 --> 01:04:00.080
drawing in conjunction with Quartz.

01:04:00.250 --> 01:04:03.440
We have another interesting session,
which is OpenGL High Performance 2D.

01:04:03.440 --> 01:04:06.760
If you're looking to do some 2D
graphics and make them go very,

01:04:06.760 --> 01:04:11.620
very fast, there's some interesting
applications of OpenGL to do that.

01:04:11.920 --> 01:04:16.190
We also have a printing session,
which is on Thursday, which will cover

01:04:16.190 --> 01:04:23.200
Mac OS X printing tips for Carbon,
Cocoa and also some BSD.

01:04:23.570 --> 01:04:25.600
Then we also have on
Friday a very important talk,

01:04:25.640 --> 01:04:28.510
if you're a Carbon developer,
where we have the graphics

01:04:28.580 --> 01:04:31.100
and imaging tips and tricks,
where we'll go over quite

01:04:31.100 --> 01:04:35.000
extensively issues such as
QuickDraw and Quartz integration,

01:04:35.000 --> 01:04:39.320
in addition to talking about
the optimization of graphics in

01:04:39.320 --> 01:04:43.780
general by working in conjunction
with Quartz Compositor.

01:04:46.380 --> 01:04:47.760
This is the contact information.

01:04:47.760 --> 01:04:49.950
I can be reached if you have
any questions about ColorSync.

01:04:49.950 --> 01:04:52.400
You can reach me at travisb.apple.com.

01:04:52.400 --> 01:04:54.720
We also have a product manager
for ColorSync technology,

01:04:54.720 --> 01:04:55.680
who's John Zimmer.

01:04:55.680 --> 01:04:58.950
If you have any suggestions on
how ColorSync can be improved,

01:04:58.950 --> 01:05:00.440
feel free to email John.

01:05:00.440 --> 01:05:02.240
He's available at johnz.apple.com.