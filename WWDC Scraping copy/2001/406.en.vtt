WEBVTT

00:00:06.340 --> 00:00:10.340
I'm Chris LeCroy,
I'm the engineering manager

00:00:10.410 --> 00:00:11.340
for the streaming server.

00:00:11.340 --> 00:00:13.260
I've been doing that
for about three years,

00:00:13.270 --> 00:00:13.640
I guess.

00:00:13.640 --> 00:00:19.600
I'm going to talk to you at a high level
about the QuickTime streaming server.

00:00:19.600 --> 00:00:24.740
Some of the things I'll talk about are,
kind of explain what the servers do,

00:00:24.740 --> 00:00:25.950
what they are.

00:00:25.960 --> 00:00:29.560
I'll give you some status
on our latest version.

00:00:29.560 --> 00:00:33.210
I'm also going to give you an overview
of some of the functionality and some of

00:00:33.210 --> 00:00:35.540
the typical configurations of the server.

00:00:36.300 --> 00:00:38.380
Which is something that's
in the documentation,

00:00:38.380 --> 00:00:41.200
but it might be nice for me to get up
and actually talk about it a little bit.

00:00:41.200 --> 00:00:46.000
I'll give a real high level overview
of some of the streaming protocols.

00:00:46.000 --> 00:00:48.850
Which is important because it's
actually possible to write tools

00:00:49.000 --> 00:00:52.580
around these protocols that
will interact and interoperate

00:00:52.640 --> 00:00:55.660
completely with the streaming
server and the streaming client.

00:00:55.660 --> 00:01:00.270
I'll also mention a couple of ways that
you can extend the streaming server.

00:01:00.360 --> 00:01:03.260
Go through a few of the development
opportunities and then just kind of

00:01:03.340 --> 00:01:05.200
talk about our general future direction.

00:01:08.400 --> 00:01:12.600
So what are the QuickTime Streaming
Server and the Darwin Streaming Server?

00:01:12.610 --> 00:01:15.580
It says three servers in one,
but actually it's more than three.

00:01:15.620 --> 00:01:18.790
But the three major things
we do are video on demand,

00:01:18.790 --> 00:01:22.100
which basically allows you to serve
stored content off of a hard drive.

00:01:22.100 --> 00:01:25.450
It's a lot like a web
server serving static HTML,

00:01:25.480 --> 00:01:29.480
except the server streams movies
instead of serving up HTML.

00:01:29.700 --> 00:01:32.600
The server does live stream reflecting.

00:01:32.600 --> 00:01:36.580
And what that means is that you've got
a broadcaster or some kind of an input

00:01:36.600 --> 00:01:40.600
source sending media to the server.

00:01:40.750 --> 00:01:43.600
And then the server reflects that
out to a massive number of clients,

00:01:43.600 --> 00:01:44.600
thousands of clients.

00:01:44.600 --> 00:01:47.620
We also do something we call
simulated live using our

00:01:47.700 --> 00:01:49.600
playlist broadcaster feature.

00:01:49.610 --> 00:01:54.750
And what that allows you to do is to
have stored content on the server and

00:01:54.750 --> 00:01:58.600
have that broadcast kind of in a delayed
fashion as if it were a live broadcast.

00:01:58.600 --> 00:02:02.070
It's really good for doing delayed
broadcasts obviously and also

00:02:02.070 --> 00:02:05.600
for doing things like setting
up internet radio stations.

00:02:05.600 --> 00:02:10.080
You can actually create playlists of
songs or of videos and play that out to

00:02:10.080 --> 00:02:12.600
the server as if it were a live stream.

00:02:12.600 --> 00:02:15.600
The server is completely standards based.

00:02:15.600 --> 00:02:18.530
When we decided to get into
the streaming server business,

00:02:18.640 --> 00:02:21.590
we kind of took a look around and
decided that we didn't need another,

00:02:21.590 --> 00:02:23.600
a third proprietary format.

00:02:23.600 --> 00:02:25.600
So we decided to go
completely with standards.

00:02:25.600 --> 00:02:27.590
And we actually believe in it's standard.

00:02:27.600 --> 00:02:30.740
Believe in it so much that Apple is
one of the founding members of the

00:02:30.870 --> 00:02:35.600
Internet Streaming Media Alliance,
which is an organization whose

00:02:35.600 --> 00:02:39.060
charter is basically to make sure
that MPEG-4 streaming and MPEG-4 in

00:02:39.060 --> 00:02:45.600
general works in an interoperable
fashion between different vendors.

00:02:45.600 --> 00:02:48.570
The server scales really well.

00:02:48.660 --> 00:02:52.920
On a single processor machine,
we can do over 2,000 concurrent

00:02:52.990 --> 00:02:56.600
off of disk movies or off of
disk connections or streams.

00:02:56.600 --> 00:03:01.600
And we can do well over 3,000 when
it's reflected from a live broadcast.

00:03:01.600 --> 00:03:03.600
That's on a single processor machine.

00:03:03.600 --> 00:03:07.370
There are also ways to kind
of tie machines together and

00:03:07.410 --> 00:03:09.600
do even larger broadcasts.

00:03:10.580 --> 00:03:18.900
The Relay feature allows you to set up
a collection of machines so that one

00:03:18.900 --> 00:03:23.540
relay can relay out to other relays,
which allows you to do instead

00:03:23.610 --> 00:03:26.050
of maybe 2,000 clients,
you can have 10 machines

00:03:26.240 --> 00:03:28.220
and do 20,000 clients.

00:03:28.450 --> 00:03:30.680
and we of course support UDP.

00:03:30.680 --> 00:03:35.400
UDP is, for those of you who don't know,
is kind of the sister

00:03:35.400 --> 00:03:38.400
or the brother to TCP,
except that it's not reliable.

00:03:38.400 --> 00:03:43.740
And that's the normal way
to stream media using RTP,

00:03:43.740 --> 00:03:44.660
which is a standard protocol.

00:03:44.660 --> 00:03:51.560
We also can tunnel over HTTP,
and the reason we do that is

00:03:53.750 --> 00:03:59.000
is to allow streams to get through
firewalls that are not configured to

00:03:59.000 --> 00:04:00.940
allow RTP traffic to come through.

00:04:00.940 --> 00:04:04.640
So basically a request will
look just like an HTTP request

00:04:04.710 --> 00:04:06.580
to a firewall or to a proxy.

00:04:06.580 --> 00:04:09.080
And everything,
all the media can get through

00:04:09.080 --> 00:04:10.880
without any trouble that way.

00:04:10.880 --> 00:04:12.460
The IS people love us for doing that.

00:04:15.010 --> 00:04:17.370
The QuickTime Streaming
Server and the Darwin Streaming

00:04:17.370 --> 00:04:18.740
Server are also open sourced.

00:04:18.740 --> 00:04:22.430
So a point of confusion for
a lot of people has been that

00:04:22.470 --> 00:04:24.990
they're continually asking,
"What's QuickTime Streaming Server and

00:04:24.990 --> 00:04:26.120
what's Darwin Streaming Server?

00:04:26.120 --> 00:04:27.930
What's different about
these two?" And the answer,

00:04:27.930 --> 00:04:30.890
especially as of the latest version,
is that there's absolutely

00:04:30.890 --> 00:04:31.960
no difference whatsoever.

00:04:31.960 --> 00:04:36.440
We simply use QuickTime Streaming
Server as the brand name for the

00:04:36.440 --> 00:04:37.700
Mac OS X version of the server.

00:04:37.700 --> 00:04:41.120
And we use Darwin Streaming
Server to refer to any other

00:04:41.120 --> 00:04:43.990
platform that the server runs on,
and to the open source project.

00:04:45.510 --> 00:04:49.590
So we build obviously for Mac OS X and
we ship a binary for that.

00:04:49.600 --> 00:04:54.420
We also build binaries under
the Darwin name for Linux,

00:04:54.420 --> 00:04:57.610
Solaris, FreeBSD, and Windows NT 2000.

00:04:57.640 --> 00:05:02.230
And we actually build these things and
treat them as a first class citizen

00:05:02.230 --> 00:05:04.560
in terms of being equal to Mac OS X.

00:05:04.560 --> 00:05:06.400
We do test those versions of the server.

00:05:06.400 --> 00:05:08.790
We do put effort into making
sure that they perform well.

00:05:08.790 --> 00:05:13.230
So you can download the binaries
and you can be assured that it's

00:05:13.230 --> 00:05:15.340
at least as good as Mac OS X.

00:05:15.400 --> 00:05:16.560
Thank you.

00:05:16.930 --> 00:05:20.130
In addition to that,
because we're open sourced,

00:05:20.160 --> 00:05:22.760
developers have ported the
Darwin Streaming Server to

00:05:22.800 --> 00:05:24.470
a wide variety of platforms.

00:05:24.480 --> 00:05:27.470
Basically every major
platform you can think of.

00:05:27.500 --> 00:05:31.440
It's been ported to Mac OS 9
by some people in Brazil.

00:05:31.440 --> 00:05:33.590
It's been ported to SGI's iRix.

00:05:33.660 --> 00:05:36.730
It's been ported to
Hewlett Packard's HPUX.

00:05:36.960 --> 00:05:40.820
Compaq ported it to their
True64 operating system.

00:05:40.820 --> 00:05:44.590
It's been ported to basically
every flavor of Linux in the world.

00:05:45.800 --> 00:05:47.300
It's available on almost everything.

00:05:47.300 --> 00:05:49.420
I think I heard something
about a BOS version,

00:05:49.420 --> 00:05:51.850
but I'm not actually sure if
that's out or around right now.

00:05:51.870 --> 00:05:57.490
And because it's open source, we...

00:05:57.940 --> 00:06:01.550
Also make the source code available
to the public in kind of two forms.

00:06:01.550 --> 00:06:04.990
You can download the source code for
any GM version just as a tarball.

00:06:04.990 --> 00:06:09.600
So you've always got a copy of
the GM version of the source code.

00:06:09.600 --> 00:06:11.650
In addition to that,
we actually do our development

00:06:11.760 --> 00:06:14.440
in a public CVS repository.

00:06:14.440 --> 00:06:17.860
So if you were to bop over to our
CVS repository right now and do an

00:06:17.860 --> 00:06:21.310
update or a checkout from there,
you'd actually get code that's in

00:06:21.310 --> 00:06:25.780
progress by the Apple engineers
and various Darwin developers.

00:06:25.880 --> 00:06:27.910
It's a great way to help us out.

00:06:28.270 --> 00:06:29.860
You can download that stuff.

00:06:29.890 --> 00:06:30.940
And if you see a bug, fix it for us.

00:06:30.940 --> 00:06:33.960
If there's been a bug,
we'd be happy to roll it into

00:06:34.260 --> 00:06:38.260
the CVS repository for you.

00:06:38.260 --> 00:06:40.770
So where are we at today?

00:06:42.660 --> 00:06:47.970
probably all know that we just released
QuickTime Streaming Server 3.0 this week.

00:06:47.990 --> 00:06:51.280
It's available for download
on the web as an installer,

00:06:51.280 --> 00:06:54.760
and that can install on
Mac OS X desktop or Mac OS X server.

00:06:54.760 --> 00:06:58.600
But it's actually already included
with Mac OS X server as one of the

00:06:58.600 --> 00:07:02.620
standard services on that package,
or on that product.

00:07:02.730 --> 00:07:05.100
And of course,
we've got all of the Darwin binaries

00:07:05.100 --> 00:07:07.750
up there for download as well
for all the various platforms

00:07:07.780 --> 00:07:10.630
that Apple actually builds on.

00:07:14.650 --> 00:07:16.600
What's new in 3.0?

00:07:16.600 --> 00:07:21.600
I'll give you a high-level
overview of each of these.

00:07:21.600 --> 00:07:23.600
I'm going to go into detail
on each of these in a second.

00:07:23.840 --> 00:07:25.480
Skip protection is a new feature.

00:07:25.600 --> 00:07:27.600
It's actually not a feature.

00:07:27.600 --> 00:07:30.230
It's more of a collection of
quality of service enhancements

00:07:30.230 --> 00:07:31.600
that we've added to the server.

00:07:31.670 --> 00:07:34.590
It's an ongoing process for
us to always improve quality.

00:07:34.600 --> 00:07:38.600
We've added a web-based
administration to the server.

00:07:38.600 --> 00:07:40.570
If you're familiar with
Streaming Server 2,

00:07:40.600 --> 00:07:46.600
we had for Mac OS X a little Cocoa-based
app that did some limited administration.

00:07:46.600 --> 00:07:47.580
It looked nice.

00:07:47.610 --> 00:07:48.600
It was aquafied.

00:07:48.600 --> 00:07:53.860
But for the other platforms,
configuration basically meant that

00:07:53.860 --> 00:07:57.600
you needed to get over to the server,
tell it in, modify some text files,

00:07:57.600 --> 00:07:59.600
stop the server or send
a SIGHUB to the server,

00:07:59.600 --> 00:08:03.600
and hope you got everything right,
hope you didn't screw up the config file.

00:08:03.640 --> 00:08:05.600
And we decided that that
was too complicated,

00:08:05.600 --> 00:08:08.590
so we decided to do a
UI for all platforms.

00:08:08.600 --> 00:08:10.590
We've strengthened the other features.

00:08:10.650 --> 00:08:12.600
We've added authentication.

00:08:12.600 --> 00:08:15.320
And by that I mean authentication
that happens when a client tries

00:08:15.320 --> 00:08:19.600
to connect to the server and access
a movie that's been protected.

00:08:19.600 --> 00:08:22.600
And we've also,
in conjunction with QuickTime 5,

00:08:22.690 --> 00:08:28.690
added some APIs that allow you to do
live broadcasts and to do basically

00:08:28.740 --> 00:08:33.600
encoding from an input source,
broadcast that out to a server.

00:08:33.600 --> 00:08:35.590
So we support that,
and we support some of the

00:08:35.590 --> 00:08:38.600
new features they added,
such as announce support.

00:08:38.670 --> 00:08:40.600
I'll get into that in a second.

00:08:40.600 --> 00:08:42.600
And broadcasting via reliable transport.

00:08:42.600 --> 00:08:46.120
We've also done a couple of
API enhancements that I'll talk about,

00:08:46.120 --> 00:08:46.600
too.

00:08:49.800 --> 00:08:51.170
So skip protection.

00:08:51.250 --> 00:08:54.440
If you guys were at the keynote,
you probably saw Avi do the demo where

00:08:54.440 --> 00:08:55.870
he had two movies up side by side.

00:08:55.870 --> 00:09:00.640
He pulled the plug, which was intended to
simulate packet loss.

00:09:00.640 --> 00:09:03.210
The old 2.0 version
of the stream stopped,

00:09:03.210 --> 00:09:05.820
and the 3.0 version just kept on going.

00:09:05.820 --> 00:09:08.460
There are a couple of things that
we did that allowed that to happen.

00:09:08.980 --> 00:09:11.750
So the first thing that we
do is we now do intelligent

00:09:11.800 --> 00:09:13.820
retransmission of lost packets.

00:09:13.840 --> 00:09:16.970
Basically,
the client is continually telling the

00:09:16.970 --> 00:09:21.470
server which packets it got and lost,
and the server makes some decisions based

00:09:21.470 --> 00:09:25.710
upon whether there's enough bandwidth,
whether the packet's really important,

00:09:25.710 --> 00:09:28.400
or whether the client will
even be able to use it.

00:09:28.400 --> 00:09:29.830
It may be too late to even retransmit.

00:09:29.840 --> 00:09:31.670
So it does some intelligent
retransmission there.

00:09:31.680 --> 00:09:35.800
In conjunction with that,
we actually do congestion

00:09:35.800 --> 00:09:38.340
avoidance in our algorithms.

00:09:38.980 --> 00:09:43.300
We don't just blindly retransmit things,
and the reason we do that is that if the

00:09:43.300 --> 00:09:46.540
server's being notified of packet loss,
and we just start

00:09:46.580 --> 00:09:49.210
retransmitting more data,
and it turns out that the packet

00:09:49.210 --> 00:09:51.610
loss is caused because there's
not enough bandwidth or there's a

00:09:51.640 --> 00:09:53.970
congested link somewhere on the net,
all we're going to do is

00:09:53.970 --> 00:09:55.010
exasperate the problem.

00:09:55.020 --> 00:09:58.260
So we try to be really smart
about what we actually retransmit.

00:09:58.260 --> 00:10:04.030
In conjunction with this,
we do something we call over-buffering.

00:10:04.040 --> 00:10:08.960
And what that is is
basically sending the media.

00:10:08.960 --> 00:10:10.610
We send the media at
faster than real time.

00:10:10.620 --> 00:10:13.630
And the reason we do that is
that typically you've got a

00:10:13.630 --> 00:10:17.620
three-second buffer in the client,
and what over-buffering allows is

00:10:17.660 --> 00:10:20.940
for us to stretch that buffer out,
and it gives us a lot more

00:10:20.940 --> 00:10:22.980
time to perform retransmit.

00:10:23.030 --> 00:10:26.470
So instead of performing retransmit
up in this little three-second buffer,

00:10:26.540 --> 00:10:28.850
we may have up to 25
seconds to do a retransmit,

00:10:28.890 --> 00:10:32.160
which gives us a lot of time to recover
from just temporary conditions on

00:10:32.160 --> 00:10:34.020
the internet and things like that.

00:10:37.680 --> 00:10:40.130
So over buffering is cool,
but you don't want to just like

00:10:40.180 --> 00:10:41.400
send things as fast as you can.

00:10:41.400 --> 00:10:45.240
We actually need to know how fast
of a connection each client has.

00:10:45.270 --> 00:10:47.950
So we have something,
we've built some technologies into

00:10:47.950 --> 00:10:51.130
the server that actually can detect
the available bandwidth for each

00:10:51.130 --> 00:10:52.960
of the clients that are connected.

00:10:52.960 --> 00:10:54.730
And we use that when we're
doing the over buffering.

00:10:56.090 --> 00:10:59.040
In addition to that,
we've improved our thinning algorithms.

00:10:59.060 --> 00:11:03.800
And what thinning is,
is there are situations where

00:11:04.580 --> 00:11:07.530
There just isn't enough bandwidth
and somebody's asked to watch a

00:11:07.530 --> 00:11:13.420
movie that maybe requires 44k but
their modem is only running at 40k.

00:11:13.420 --> 00:11:16.640
So what thinning is,
is a mechanism where we actually

00:11:17.200 --> 00:11:21.640
select packets based upon their
priority and just don't send those.

00:11:21.640 --> 00:11:25.750
And the idea there is to decrease
the bandwidth of that stream so

00:11:25.750 --> 00:11:30.240
that the client gets at least
some semblance of a usable stream.

00:11:31.010 --> 00:11:33.960
In the past with 2.0,
the shifts when we were doing

00:11:34.170 --> 00:11:35.780
thinning were pretty abrupt.

00:11:35.860 --> 00:11:37.980
You'd see a movie,
it would look like crap.

00:11:38.050 --> 00:11:40.760
We would thin,
it would immediately go to a slideshow.

00:11:40.760 --> 00:11:42.760
If that didn't work,
we'd go down to audio.

00:11:42.760 --> 00:11:45.500
And basically we've just kind of
smoothed that progression a little bit.

00:11:48.200 --> 00:11:50.280
And skip protection is, like I said,
it's not a feature.

00:11:50.280 --> 00:11:56.240
It's just our umbrella term for quality
of service enhancements to the server.

00:11:56.240 --> 00:11:58.760
And the things we've added for
3.0 are just the beginning.

00:11:58.760 --> 00:12:01.170
We plan to do quality of service
enhancements for every release

00:12:01.170 --> 00:12:02.480
of the server moving forward.

00:12:02.480 --> 00:12:05.670
An obvious goal is to get the
broadcast quality at some point.

00:12:05.800 --> 00:12:07.740
And even beyond that,
better than broadcast quality.

00:12:07.740 --> 00:12:10.500
There are some things we think
we can do with interactivity and

00:12:10.500 --> 00:12:13.480
just really high quality video,
high resolution video that we're

00:12:13.480 --> 00:12:15.310
going to be looking into over time.

00:12:15.320 --> 00:12:16.620
It's going to take a long time,
obviously.

00:12:20.140 --> 00:12:24.440
Next new feature is our
web-based administration.

00:12:24.480 --> 00:12:29.000
And one of our goals with kind
of from the beginning with this

00:12:29.000 --> 00:12:32.060
server is that we wanted to make
it extensible for developers and

00:12:32.130 --> 00:12:34.380
we wanted it to be easy to extend.

00:12:34.380 --> 00:12:37.490
So we kind of took that
philosophy to heart when we did

00:12:37.500 --> 00:12:38.880
the web-based administration.

00:12:38.940 --> 00:12:45.290
And the way this works is we implemented
it as basically a collection of HTML that

00:12:45.290 --> 00:12:49.340
contains some tags in it and some
Perl scripts that know how to parse

00:12:49.810 --> 00:12:53.920
those HTML files and read those tags,
make a request off to the

00:12:53.920 --> 00:12:57.670
streaming server for data,
and kind of reformat the

00:12:57.670 --> 00:13:02.330
HTML so that it looks like
normal HTML on the web browser.

00:13:02.570 --> 00:13:05.730
We built kind of a mini
web server based on Pearl,

00:13:05.740 --> 00:13:09.600
which is just a very simple
little web server for actually

00:13:09.600 --> 00:13:10.590
talking to the web browsers.

00:13:10.600 --> 00:13:13.500
The web browsers never talk
directly to the streaming server.

00:13:13.500 --> 00:13:16.370
And as I said,
it's extensible just by replacing

00:13:16.370 --> 00:13:19.870
some of the -- in simple cases,
just adding some additional

00:13:19.870 --> 00:13:21.450
HTML with whatever tags.

00:13:21.560 --> 00:13:23.820
In more complex cases,
if you've got some complicated

00:13:23.820 --> 00:13:26.520
data that you need to parse,
then you might have to write a little

00:13:26.530 --> 00:13:28.490
Pearl CGI that does the parsing for you.

00:13:28.500 --> 00:13:30.500
And of course, it's secure.

00:13:30.500 --> 00:13:34.690
The little mini web
server actually does SSL.

00:13:37.030 --> 00:13:38.920
- And I probably have this upside down,
don't I?

00:13:38.920 --> 00:13:40.080
Okay, and here's a screenshot.

00:13:40.080 --> 00:13:41.520
I'm actually gonna demo.

00:13:41.620 --> 00:13:43.910
I was gonna show you just a screenshot,
but I decided that a

00:13:43.910 --> 00:13:45.380
demo might be better.

00:13:47.800 --> 00:13:52.690
Just going to quickly show you a couple
of the features in the web-based admin.

00:13:53.050 --> 00:13:54.620
So this is kind of the initial screen.

00:13:54.620 --> 00:14:00.280
It's basically just a snapshot of
what's happening with the server.

00:14:00.280 --> 00:14:02.980
Hopefully you guys can
all see that in the back.

00:14:03.570 --> 00:14:08.540
If I had a lot of,
I could check my CPU load here,

00:14:08.670 --> 00:14:10.780
I can see how many
bytes have been served,

00:14:10.780 --> 00:14:12.500
I can see how much
bandwidth is going out.

00:14:12.500 --> 00:14:14.500
Kind of a convenient thing.

00:14:14.500 --> 00:14:16.500
Here are some of the
general settings here.

00:14:16.630 --> 00:14:19.690
You navigate just by
moving through these tabs.

00:14:21.020 --> 00:14:24.520
and you can view the logs in the admin.

00:14:24.550 --> 00:14:27.270
Here's an error log, lots of errors.

00:14:27.720 --> 00:14:32.160
And another thing we added is
UI for the Playlist Broadcaster.

00:14:32.160 --> 00:14:36.490
If you guys are familiar with that,
you'll actually like this.

00:14:36.800 --> 00:14:38.920
In the past,
you actually needed-- setting up

00:14:38.920 --> 00:14:42.890
the playlist broadcaster on all
platforms really consisted of

00:14:43.250 --> 00:14:47.460
modifying multiple text files and
people inevitably got it wrong.

00:14:47.460 --> 00:14:48.770
And so we've added UI here.

00:14:48.780 --> 00:14:53.060
Basically, you can create a new playlist.

00:14:53.160 --> 00:14:55.630
Here are all the movies listed down
here that are in this playlist.

00:14:55.680 --> 00:14:57.920
You can tell it how
you'd like it to play,

00:14:57.950 --> 00:15:00.660
sequential, weighted random.

00:15:00.660 --> 00:15:04.660
You can tell it to turn logging on,
things like that.

00:15:04.680 --> 00:15:07.570
And then turning this on or off
is just a matter by clicking

00:15:07.570 --> 00:15:09.590
the little play button here.

00:15:10.570 --> 00:15:13.570
and the broadcast automatically
gets started up and automatically

00:15:13.670 --> 00:15:16.400
starts talking to the server and
you've automatically got your

00:15:16.400 --> 00:15:20.120
internet radio station or your
broadcast happening at that point.

00:15:24.950 --> 00:15:26.900
I guess you guys hated the text files,
huh?

00:15:26.900 --> 00:15:32.140
Announce support.

00:15:32.180 --> 00:15:35.860
So like I mentioned,
QuickTime 5 has added,

00:15:35.860 --> 00:15:39.900
they've made the broadcaster APIs public.

00:15:39.900 --> 00:15:42.740
So in the past we had,
there was one broadcaster,

00:15:42.740 --> 00:15:46.630
it was Sorenson,
and the way that worked is that

00:15:46.790 --> 00:15:50.250
you would set up your broadcast,
plug your camera in,

00:15:50.290 --> 00:15:53.260
you'd have the Sorenson
broadcaster generate an SDP file,

00:15:53.260 --> 00:15:56.620
which is a file that had basically
a description of the session,

00:15:56.620 --> 00:15:59.580
you would,

00:16:00.870 --> 00:16:03.650
So, you have to take that file,
get access to the server that

00:16:03.650 --> 00:16:05.130
you're going to broadcast to.

00:16:05.130 --> 00:16:06.970
In a lot of cases,
you actually had to go in

00:16:07.070 --> 00:16:09.450
and modify the SDP file,
which meant that you needed

00:16:09.450 --> 00:16:11.270
to understand the SDP format.

00:16:11.490 --> 00:16:15.100
After that,
you would start the broadcaster

00:16:15.100 --> 00:16:17.160
up and typically it wouldn't
work the first time.

00:16:17.160 --> 00:16:19.160
You'd look at your SDP file,
figure out what's going on.

00:16:19.160 --> 00:16:21.540
Basically, it was a mess and we didn't
think it was easy enough.

00:16:21.600 --> 00:16:24.490
So we decided we needed to automate that.

00:16:24.530 --> 00:16:30.340
So we've added some support to the
broadcaster APIs to use standard RTSP and

00:16:30.340 --> 00:16:33.060
to use the announce method in RTSP.

00:16:33.120 --> 00:16:37.840
And what that means is that all you
need to do now is type in an IP address

00:16:37.840 --> 00:16:40.260
on the broadcaster application.

00:16:40.510 --> 00:16:45.000
Specify the name of the
broadcast and press start.

00:16:45.000 --> 00:16:48.660
At that point what happens is the
broadcaster will send all of that

00:16:48.660 --> 00:16:51.400
information that was originally
in the SDP over to the server.

00:16:51.400 --> 00:16:54.330
The server will say,
first of all it will ask are

00:16:54.370 --> 00:16:58.470
you okay to do this and actually
authenticate the broadcaster.

00:16:58.470 --> 00:17:00.520
The reason for that is you don't
want to have anybody being able

00:17:00.520 --> 00:17:02.400
to broadcast to your server.

00:17:02.490 --> 00:17:05.540
Once it decides that the
authentication is okay,

00:17:05.540 --> 00:17:08.670
it will let the broadcaster
know things are cool,

00:17:08.670 --> 00:17:12.400
go ahead and send me over all
of the information that I need.

00:17:12.480 --> 00:17:15.400
The broadcaster will start
broadcasting and you're done.

00:17:15.400 --> 00:17:18.000
Basically it's type
in a couple of fields,

00:17:18.000 --> 00:17:19.950
push a button, you're done.

00:17:25.220 --> 00:17:28.710
In addition to the announced
support for broadcasters,

00:17:28.820 --> 00:17:33.690
there was a problem with the original
broadcaster broadcast only on UDP.

00:17:33.700 --> 00:17:37.630
And as I mentioned,
UDP is a non-reliable transport,

00:17:37.800 --> 00:17:40.630
which means that packets can get lost.

00:17:40.640 --> 00:17:44.580
So that's a minor problem when
you're a client watching a stream

00:17:44.790 --> 00:17:47.880
and one or two packets get lost and
then everything's fine after that.

00:17:47.880 --> 00:17:52.270
It's a major problem when a broadcaster
is sending data to a reflector and

00:17:52.270 --> 00:17:55.650
it loses packets because then every
single client loses those packets.

00:17:55.660 --> 00:17:58.420
So we decided we needed to
have a reliable transport.

00:17:58.420 --> 00:18:04.130
And we decided to just go with TCP rather
than doing anything real complex.

00:18:04.140 --> 00:18:10.040
The second problem with using TCP is that
the buffer sizes are typically too small.

00:18:10.040 --> 00:18:13.560
So with reliable broadcast,
the broadcaster is actually

00:18:13.560 --> 00:18:17.240
able to tell the server how
large it would like its buffer.

00:18:17.240 --> 00:18:17.860
So it can tell the server.

00:18:17.880 --> 00:18:19.480
I'd like a one-minute buffer.

00:18:19.480 --> 00:18:25.070
And what that allows is for situations
where TCP gets into congestion problems

00:18:25.120 --> 00:18:28.720
or maybe a little flow control problem,
it gives the broadcaster plenty

00:18:28.720 --> 00:18:31.920
of time or the TCP stack plenty
of time to get caught up and make

00:18:31.920 --> 00:18:34.900
sure that basically all the packets
get through and everybody's happy.

00:18:34.930 --> 00:18:38.070
Which means that all of your clients
will receive a much better quality

00:18:38.070 --> 00:18:41.550
stream in the case of packet loss
between the broadcaster and the server.

00:18:41.560 --> 00:18:46.820
So those are the new features.

00:18:51.440 --> 00:18:55.080
I'm going to talk about some of
the typical configurations that

00:18:55.110 --> 00:18:56.400
you can put the server into.

00:18:56.840 --> 00:19:02.400
The thing to note is that these are
not modes that the server goes into.

00:19:02.400 --> 00:19:04.850
The server can be configured
to do any one of these or

00:19:04.850 --> 00:19:06.400
all of them at the same time.

00:19:06.560 --> 00:19:08.400
These are just different ways
the server can be operated.

00:19:08.400 --> 00:19:12.790
We've got video on demand,
simulated live streaming,

00:19:12.790 --> 00:19:17.400
and a more advanced
configuration is relay streaming.

00:19:17.400 --> 00:19:18.240
Relay streaming.

00:19:18.240 --> 00:19:19.240
So I'll go into those in more detail.

00:19:19.240 --> 00:19:21.860
I actually have pictures
here for you guys to look at.

00:19:22.270 --> 00:19:26.640
So probably the most typical
form of streaming is stored media

00:19:26.640 --> 00:19:28.480
streaming or video on demand.

00:19:28.480 --> 00:19:32.820
And this is actually, as I mentioned,
just like, or it's analogous to web

00:19:32.820 --> 00:19:38.080
servers serving static HTML.

00:19:38.080 --> 00:19:40.740
Basically, all you need to do is take
some hinted movie files,

00:19:40.810 --> 00:19:43.540
drop them into a
directory on your server.

00:19:43.540 --> 00:19:45.970
The client will make a request
to the server just using a URL.

00:19:45.970 --> 00:19:48.960
It looks like an
HTTP URL except it says RTSP.

00:19:48.960 --> 00:19:53.090
Server will go out,
try to find that movie and then just

00:19:53.090 --> 00:19:55.600
begin streaming it to the server.

00:19:56.610 --> 00:19:59.470
And as I mentioned,
these movies need to be hinted.

00:19:59.470 --> 00:20:02.770
And what hinting does is it takes
a standard QuickTime movie and

00:20:02.770 --> 00:20:05.340
it adds some additional track
for each track in the movie.

00:20:05.340 --> 00:20:09.480
It adds an additional track and that
track basically contains information

00:20:09.570 --> 00:20:13.410
that the server uses to determine
which blobs of media to put into which

00:20:13.410 --> 00:20:15.720
packets and what time to send them out.

00:20:15.860 --> 00:20:20.700
So one of the big advantages of that
is that it allows the server to be

00:20:20.910 --> 00:20:24.080
completely agnostic about media formats.

00:20:24.110 --> 00:20:28.200
That's why we're able to stream media
on a Linux server or a FreeBSD server

00:20:28.200 --> 00:20:32.650
where QuickTime APIs don't exist
and the codecs don't exist.

00:20:35.610 --> 00:20:37.960
Next configuration is live streaming,
which adds a couple of

00:20:37.960 --> 00:20:38.730
pieces to the puzzle.

00:20:38.730 --> 00:20:43.500
First, you need a camera or some
form of an input source.

00:20:43.500 --> 00:20:47.500
And what you do is hook that camera
up to an encoder broadcaster machine.

00:20:47.500 --> 00:20:51.420
And the job of the broadcaster or
the encoder is to obviously encode

00:20:51.420 --> 00:20:55.120
the incoming stream and then to
packetize it into RTP format and

00:20:55.120 --> 00:20:57.380
send it off to a server or a client.

00:20:57.380 --> 00:20:59.180
So in this picture, though,
you'll see that it sends

00:20:59.180 --> 00:21:00.500
it off to a server,
and there's a really

00:21:00.500 --> 00:21:01.370
good reason for that.

00:21:01.370 --> 00:21:05.250
You technically can send things
directly from the broadcaster,

00:21:05.280 --> 00:21:05.480
but you can't send things
directly from the server.

00:21:05.500 --> 00:21:08.240
So decoding and encoding
can take quite a bit of CPU,

00:21:08.270 --> 00:21:11.060
and so it's really not a good
idea if you want to scale to

00:21:11.060 --> 00:21:12.810
any more than a few clients.

00:21:12.820 --> 00:21:16.940
So what happens in this case is that
the encoder encodes one stream and

00:21:16.940 --> 00:21:20.500
broadcasts one stream to the server,
and then the server,

00:21:20.500 --> 00:21:24.460
which has hardly any load on it
because it's not doing any encoding,

00:21:24.560 --> 00:21:27.530
can broadcast out to
thousands of clients.

00:21:30.430 --> 00:21:32.350
Simulated Live.

00:21:32.350 --> 00:21:35.800
This is the playlist
broadcaster I just showed you.

00:21:35.800 --> 00:21:40.040
And the way that works is kind of
a combination of live streaming,

00:21:40.040 --> 00:21:43.080
not really, and video on demand.

00:21:43.080 --> 00:21:47.160
And the way it works is you put your
hinted movie files onto the hard drive

00:21:47.160 --> 00:21:52.760
of the server and you create a playlist,
which can be either a single movie

00:21:52.760 --> 00:21:55.440
or unlimited number of movies.

00:21:55.440 --> 00:21:58.360
And then there's a little tiny
process that runs for each playlist

00:21:58.430 --> 00:21:59.940
on the server machine itself.

00:21:59.960 --> 00:22:02.110
And it basically goes through
and parses those files,

00:22:02.110 --> 00:22:05.010
reads the hint tracks,
and then streams those things in local

00:22:05.010 --> 00:22:08.070
loopback to the streaming server,
which then broadcasts that

00:22:08.130 --> 00:22:09.980
out to all of your clients.

00:22:09.980 --> 00:22:14.180
So what this looks like from a
client perspective is a live feed,

00:22:14.180 --> 00:22:15.080
even though it's really not.

00:22:15.220 --> 00:22:17.320
They're not going to be able to
thumb back and forth in the movie.

00:22:17.350 --> 00:22:20.020
They're all going to see the
same thing at the same time.

00:22:20.020 --> 00:22:22.480
And it's really useful for doing
things like delayed broadcasts.

00:22:22.480 --> 00:22:24.580
Let's say you've got an
event that you pre-recorded.

00:22:24.580 --> 00:22:27.800
You can drop that on the server,
create a playlist with

00:22:27.970 --> 00:22:30.560
that individual file in it,
start it up at whatever

00:22:30.560 --> 00:22:33.190
time you want to start it,
and then everybody can tune in.

00:22:33.300 --> 00:22:35.410
And then as I mentioned,
it's also really good for creating

00:22:35.450 --> 00:22:37.070
things like internet radio stations.

00:22:37.080 --> 00:22:40.930
If you go to -- actually go up
to Apple's QuickTime TV site

00:22:40.940 --> 00:22:43.390
and look at Warner Records,
for example.

00:22:43.390 --> 00:22:45.940
They've actually created kind of a
mini-MTV using the playlist broadcaster.

00:22:45.940 --> 00:22:50.930
It just shows video after
video throughout the day.

00:22:51.910 --> 00:22:56.000
and more complex,
and probably doesn't affect most of you,

00:22:56.000 --> 00:22:59.280
but it can certainly affect some of you,
is a configuration we

00:22:59.280 --> 00:23:01.240
call relay streaming.

00:23:01.350 --> 00:23:06.410
And relay streaming is used
for live or simulated live,

00:23:06.490 --> 00:23:09.460
and it's used for

00:23:09.630 --> 00:23:14.020
allowing you to do events that are much
bigger than what one server can handle.

00:23:14.020 --> 00:23:19.650
So basically we've added just another
layer between the server connected

00:23:19.670 --> 00:23:21.300
to the encoder and the client.

00:23:21.300 --> 00:23:24.040
So you've got the live stream
coming into your relay server,

00:23:24.040 --> 00:23:26.940
and instead of that server
broadcasting out to clients,

00:23:26.970 --> 00:23:30.330
it broadcasts out to other servers,
which means that you can have,

00:23:30.330 --> 00:23:34.890
instead of one machine doing 3,000,
you could have maybe 10 machines

00:23:34.900 --> 00:23:37.700
doing 30,000 concurrent streams.

00:23:37.700 --> 00:23:39.160
So it allows you to do
really large events.

00:23:39.600 --> 00:23:44.110
This is effectively what companies
like Akamai and Digital Island are

00:23:44.200 --> 00:23:46.360
doing for their live events.

00:23:46.360 --> 00:23:50.820
I don't think they're using our code,
but they've got something that

00:23:50.820 --> 00:23:52.290
looks really similar to this.

00:23:52.300 --> 00:23:56.150
So I'm going to go over kind
of the three major protocols

00:23:56.150 --> 00:23:58.320
we use really briefly here.

00:24:04.120 --> 00:24:08.480
First one is RTSP, and it stands for
Real Time Streaming Protocol.

00:24:08.480 --> 00:24:12.750
The second one is RTP,
and Real Time Streaming Protocol actually

00:24:12.750 --> 00:24:17.260
is kind of the control mechanism
from the client to the server.

00:24:17.260 --> 00:24:18.920
It lets the client tell
the server what to do.

00:24:18.920 --> 00:24:24.110
Real Time Transport Protocol is
the protocol that the

00:24:24.110 --> 00:24:28.720
media is actually sent on,
and that operates under UDP typically.

00:24:28.720 --> 00:24:30.400
It can be on TCP.

00:24:30.460 --> 00:24:32.330
We do both actually with HTTP tunneling.

00:24:33.000 --> 00:24:35.940
And RTCP is Real Time Control Protocol.

00:24:35.940 --> 00:24:39.830
It's actually used by the – the
way it works is that the client

00:24:39.940 --> 00:24:44.040
uses that protocol to tell the
server how things are going.

00:24:44.040 --> 00:24:45.920
Is it losing packets?

00:24:45.920 --> 00:24:47.560
Is there network jitter happening?

00:24:47.560 --> 00:24:48.920
Things like that.

00:24:48.960 --> 00:24:51.800
And I've got a little
picture here that'll –

00:24:52.470 --> 00:24:54.420
RTSP is based on HTTP.

00:24:54.420 --> 00:24:57.780
It actually looks almost identical.

00:24:57.780 --> 00:25:02.340
The difference is that
instead of HTTP in the header,

00:25:02.340 --> 00:25:03.820
it'll say RTSP.

00:25:03.860 --> 00:25:10.010
And instead of methods like GET and PUT,
it'll have methods like PLAY and

00:25:10.010 --> 00:25:12.990
PAUSE and DESCRIBE and SETUP.

00:25:15.040 --> 00:25:17.110
RTP runs on a different port.

00:25:17.190 --> 00:25:19.840
RTSP typically is on port 554.

00:25:19.840 --> 00:25:23.680
RTP happens on a different
port from the server.

00:25:23.680 --> 00:25:27.340
And that's the stream that the
media actually gets streamed on.

00:25:28.700 --> 00:25:32.250
RTP is basically the
way the packets look.

00:25:32.300 --> 00:25:32.980
It's pretty simple.

00:25:32.980 --> 00:25:36.310
It's just got a little header on
the top of the packet that is in

00:25:36.330 --> 00:25:38.600
RTP format and then a blob of media.

00:25:38.600 --> 00:25:44.580
The client knows how to decode that
media once it gets it or de-packetize it.

00:25:44.580 --> 00:25:48.370
RTCP, as I mentioned,
is a status channel from the

00:25:48.380 --> 00:25:50.610
client back to the server.

00:25:51.040 --> 00:25:54.610
And that's what the server actually
uses that for doing all of the

00:25:54.680 --> 00:25:57.890
quality of service features that
I talked about with skip protection.

00:25:57.900 --> 00:26:01.350
That's how we get notified that
packets are getting lost and

00:26:01.350 --> 00:26:02.900
which packets are getting lost.

00:26:02.900 --> 00:26:06.380
Whoops.

00:26:08.200 --> 00:26:10.100
Here's an example session.

00:26:10.100 --> 00:26:12.600
I think you guys can read that.

00:26:12.600 --> 00:26:14.830
So I'm going to walk through what
happens when somebody presses

00:26:14.870 --> 00:26:17.520
the play button on a movie.

00:26:17.520 --> 00:26:20.300
So the first thing that happens
is the client will send an

00:26:20.300 --> 00:26:22.960
RTSP describe request to the server.

00:26:22.960 --> 00:26:26.240
That contains just a URL, basically.

00:26:26.240 --> 00:26:27.940
And the URL looks a lot like an HTTP URL.

00:26:27.940 --> 00:26:31.180
It will have the server name, slash,
and then a path to the movie.

00:26:31.180 --> 00:26:34.190
And the server responds
to a describe request with

00:26:34.520 --> 00:26:36.540
information about that movie.

00:26:36.540 --> 00:26:40.220
And the information that it responds with
are things like the number of tracks,

00:26:40.220 --> 00:26:42.960
what types of media
each of the tracks are,

00:26:43.060 --> 00:26:47.240
maybe the bit rate of each track,
the language of the tracks,

00:26:47.240 --> 00:26:48.550
things like that.

00:26:48.560 --> 00:26:50.510
So once the client's
got that information,

00:26:50.550 --> 00:26:53.070
it can then make a decision
about which tracks it actually

00:26:53.070 --> 00:26:54.010
would like to listen to.

00:26:54.010 --> 00:26:55.580
For example,
you might have a movie that's

00:26:55.640 --> 00:27:00.120
got a single video track
and three language tracks,

00:27:00.160 --> 00:27:03.300
Spanish, English, and French.

00:27:03.300 --> 00:27:05.680
The client will then send a setup
request for each of the tracks that

00:27:05.760 --> 00:27:06.920
it actually wants to listen to.

00:27:06.920 --> 00:27:09.400
So in this case, it's going to say,
"I'm going to send back a setup for the

00:27:09.530 --> 00:27:13.570
video track and a setup for one of the
audio tracks that it would like to hear."

00:27:14.220 --> 00:27:16.550
server will respond with
OKs to both of those.

00:27:16.560 --> 00:27:20.190
And then the client sends a play
request which tells the server,

00:27:20.250 --> 00:27:23.210
OK, now start streaming me the things
that I asked you to set up.

00:27:23.260 --> 00:27:26.230
At that point,
media just gets sent out over RTP.

00:27:26.270 --> 00:27:28.110
Everybody's happy.

00:27:28.600 --> 00:27:33.110
Nothing more happens until the stream
either ends or the client sends

00:27:33.350 --> 00:27:37.040
either a teardown request if the
movie wants to be completely shut down

00:27:37.040 --> 00:27:40.590
or somebody presses the pause button
and they just want to pause the movie.

00:27:40.800 --> 00:27:52.900
[Transcript missing]

00:27:58.110 --> 00:28:02.450
There are a lot of ways to
extend the streaming server.

00:28:02.450 --> 00:28:07.140
I think it's pretty clear that
the QuickTime streaming server

00:28:07.140 --> 00:28:10.050
is easily the most extensible
streaming server in the world.

00:28:10.050 --> 00:28:13.640
There are other servers out there
that are not typically extensible

00:28:13.640 --> 00:28:15.680
other than maybe some module APIs.

00:28:15.680 --> 00:28:17.680
We have a lot of ways to extend.

00:28:18.380 --> 00:28:20.900
The most obvious way is that the
source code is all available.

00:28:20.900 --> 00:28:23.340
You can take the source code and
do whatever you want with it.

00:28:23.360 --> 00:28:24.640
We have source for the server.

00:28:24.640 --> 00:28:27.060
We also have a proxy server
that we have source for.

00:28:27.060 --> 00:28:31.860
All of the source code is available
for the admin that we added for 3.0.

00:28:31.860 --> 00:28:35.790
The only issue here is that
Apple's got a license we call

00:28:35.790 --> 00:28:38.480
the Apple Public Source License.

00:28:38.480 --> 00:28:44.170
What that license says is if you're going
to make modifications to the core code of

00:28:44.170 --> 00:28:48.360
products that are open sourced by Apple,
we just ask that you send it to us.

00:28:48.380 --> 00:28:50.080
We send those changes back so
that we can share them with the

00:28:50.080 --> 00:28:51.240
rest of the open source community.

00:28:51.240 --> 00:28:55.180
Other than that,
you're free to do whatever you'd like.

00:28:55.400 --> 00:28:58.880
And a lot of times you might make
changes that have no meaning to us,

00:28:58.900 --> 00:28:59.960
and we're not going to
roll that into the server,

00:28:59.960 --> 00:29:03.330
but you still need to post
that so the public can see it.

00:29:04.980 --> 00:29:06.860
There's a way to get around that
with the streaming server though.

00:29:06.920 --> 00:29:10.930
Because we recognize that there are
companies that are going to want to

00:29:10.930 --> 00:29:14.070
build things that have some really
strong intellectual property value

00:29:14.150 --> 00:29:18.420
or are just proprietary and they
don't want other people to see it.

00:29:18.530 --> 00:29:23.640
The way to do that is to build a
module that attaches into the server.

00:29:23.700 --> 00:29:26.300
And the reason it doesn't fall
under the APSL is that you're not

00:29:26.440 --> 00:29:29.670
modifying any of our source code,
you're actually just writing brand

00:29:29.670 --> 00:29:31.440
new source code that belongs to you.

00:29:31.500 --> 00:29:35.080
The plugin API that we use for these is
really similar to the Apache plugin API,

00:29:35.080 --> 00:29:36.130
if you're aware of that.

00:29:36.140 --> 00:29:41.750
It uses concept of roles and callbacks
during different states in the server.

00:29:41.860 --> 00:29:44.100
There are two ways to build modules.

00:29:44.100 --> 00:29:46.930
You can build them as dynamic modules.

00:29:46.940 --> 00:29:50.040
And those are basically standalone
little shared libraries that

00:29:50.040 --> 00:29:51.440
you drop into a directory.

00:29:51.440 --> 00:29:55.400
The server auto-discovers those,
asks them to register for their roles,

00:29:55.400 --> 00:29:56.540
and away they go.

00:29:56.570 --> 00:30:00.940
Or you can compile the module
directly into the server.

00:30:00.940 --> 00:30:01.440
And then it just becomes a module.

00:30:01.440 --> 00:30:04.170
It becomes a part of the
single server binary.

00:30:04.220 --> 00:30:07.440
And in fact, most of the server features
are implemented as modules.

00:30:07.450 --> 00:30:11.930
So things like the ability to
reflect live streams as a module,

00:30:11.950 --> 00:30:17.430
error logging, access logging,
authentication, the module that lets the

00:30:17.460 --> 00:30:19.690
web-based admin work,
those are all done as modules that

00:30:19.690 --> 00:30:21.440
are just built into the server.

00:30:21.440 --> 00:30:25.140
We think we did a really good job
of making sure that that API or

00:30:25.140 --> 00:30:29.440
that architecture was really high
performance because we use it.

00:30:30.150 --> 00:30:43.180
This session covers the latest
features of Version 3.0 of

00:30:43.180 --> 00:30:43.180
the Darwin Streaming Server.

00:30:43.180 --> 00:30:43.180
Chris LeCroy

00:30:43.380 --> 00:30:48.200
is basically a way to get and
set attributes in the server

00:30:48.200 --> 00:30:50.040
using simple HTTP requests.

00:30:50.040 --> 00:30:53.980
And the requests will basically
have a URL to the server,

00:30:53.980 --> 00:30:59.160
and then maybe some parameters at
the end that tell the admin module

00:30:59.160 --> 00:31:01.800
whether you want to get a value,
set a value, delete a value,

00:31:01.810 --> 00:31:02.760
things like that.

00:31:02.800 --> 00:31:06.040
And this is what the web-based
admin uses this primarily.

00:31:06.040 --> 00:31:08.500
So the things that can
be built around this are,

00:31:08.500 --> 00:31:12.480
like, I'd like to see somebody write some
really cool monitoring applications.

00:31:12.480 --> 00:31:15.370
They don't have to be written
in Perl or anything like that.

00:31:15.430 --> 00:31:18.940
They can be written in any language
because it is just straight HTTP.

00:31:18.960 --> 00:31:24.140
Maybe some advanced configuration or
advanced administration applications,

00:31:24.140 --> 00:31:25.490
things like that.

00:31:25.540 --> 00:31:31.290
The kind of last way to extend the
server I want to talk about is...

00:31:32.500 --> 00:31:38.300
[Transcript missing]

00:31:38.730 --> 00:31:40.840
There are a couple of really
good reasons for doing this.

00:31:40.940 --> 00:31:42.640
First one might be that maybe
you don't like our admin.

00:31:42.640 --> 00:31:46.250
Maybe you want to repurpose it for your
corporation or you want to repurpose

00:31:46.250 --> 00:31:47.760
it and sell a product to somebody.

00:31:47.760 --> 00:31:50.510
You can just take the
existing admin and modify it.

00:31:51.280 --> 00:31:54.590
Probably a more common reason to extend
it would be that you write a module

00:31:54.810 --> 00:31:58.500
for the server and you want to have
some user interface for your module.

00:31:58.500 --> 00:32:03.310
So what you can do is just create
some HTML files with the special tags,

00:32:03.310 --> 00:32:07.220
possibly write a Perl CGI,
drop it into a directory and it

00:32:07.220 --> 00:32:11.540
will automatically appear in the
user interface along with all

00:32:11.570 --> 00:32:13.890
of the UI that we've written.

00:32:13.900 --> 00:32:17.650
It basically becomes a first
class citizen in the admin.

00:32:17.660 --> 00:32:21.220
It might show up as an additional tab
in our admin or something like that.

00:32:21.240 --> 00:32:22.600
Yeah.

00:32:23.910 --> 00:32:27.960
and all of these ways
of extending the server.

00:32:27.960 --> 00:32:29.600
There's a session
immediately following this,

00:32:29.600 --> 00:32:31.700
and we'll have some streaming
server engineers up to show you

00:32:31.700 --> 00:32:35.240
how to do each of these extensions.

00:32:35.340 --> 00:32:38.780
See a little bit more of the web admin
and a little bit about the API as well

00:32:38.780 --> 00:32:40.950
as how the admin protocol can work.

00:32:42.700 --> 00:32:45.160
So, development opportunities.

00:32:45.170 --> 00:32:47.780
So we don't have...

00:32:48.050 --> 00:32:50.380
A gigantic team at Apple working
on the streaming server.

00:32:50.380 --> 00:32:53.620
So we can only do so much.

00:32:53.620 --> 00:32:55.880
We think we've done a really
great reference server.

00:32:55.880 --> 00:32:57.580
We think it's a really
high-performance server.

00:32:57.580 --> 00:33:00.720
But there are, like,
hundreds of features that we're just

00:33:00.720 --> 00:33:02.900
never going to be able to get to because
we don't have enough people to do it.

00:33:03.030 --> 00:33:05.650
We do have, on the other hand,
500 Darwin developers that are

00:33:05.650 --> 00:33:07.200
building things around this thing.

00:33:07.200 --> 00:33:11.080
So we really want to get developers
out there building things around this,

00:33:11.160 --> 00:33:14.940
possibly building the server and
repurposing it as your own product.

00:33:15.010 --> 00:33:16.450
We actually really promote that.

00:33:16.460 --> 00:33:18.320
As long as you follow the
Apple public software license,

00:33:18.320 --> 00:33:20.530
there's actually absolutely
no issue with doing that.

00:33:23.300 --> 00:33:36.400
[Transcript missing]

00:33:38.330 --> 00:33:45.330
You can take the server,
port it over to your device,

00:33:45.330 --> 00:33:45.330
and then you can go

00:33:46.190 --> 00:33:50.010
There are also a bunch of
plug-ins we'd like to see written.

00:33:50.010 --> 00:33:53.840
So we have some really basic
authentication in the server.

00:33:53.840 --> 00:33:57.580
I'd like to see a module that
does some authentication with a

00:33:57.580 --> 00:34:02.240
stronger back-end authority maybe
or with a database of user accounts.

00:34:02.250 --> 00:34:06.470
It's also possible to write modules
that use a database as the means

00:34:06.470 --> 00:34:08.790
of storage for all of your content.

00:34:08.790 --> 00:34:13.080
I think that's kind of a vertical market,
but there's definitely an

00:34:13.080 --> 00:34:15.280
opportunity to do that.

00:34:15.280 --> 00:34:15.280
And I think that's a
great way to do that.

00:34:16.350 --> 00:34:19.270
And of course you can do additional
logging and reporting modules.

00:34:19.290 --> 00:34:23.460
And maybe a cool feature would be,
or a cool product would be to

00:34:23.560 --> 00:34:26.880
kind of build an entire broadcast
system for internet broadcasting,

00:34:26.880 --> 00:34:28.720
similar to what TV stations use.

00:34:28.720 --> 00:34:32.470
They've got software that manages all of
the scheduling and which content to serve

00:34:32.470 --> 00:34:34.560
and add-in solution and things like that.

00:34:34.580 --> 00:34:37.810
And it might be interesting to see
somebody write some modules into

00:34:37.810 --> 00:34:41.180
the server that do that and kind
of go after that vertical market.

00:34:42.360 --> 00:34:45.160
And as I mentioned,
monitoring tools via the admin protocol.

00:34:45.300 --> 00:34:47.820
Admin protocol's new,
so I hope to see a bunch

00:34:47.820 --> 00:34:49.080
of those coming out.

00:34:49.210 --> 00:34:56.780
And of course web-based
administration extensions,

00:34:56.780 --> 00:34:56.780
possibly.

00:34:57.140 --> 00:34:59.560
Do a web-based admin that's
purposed for some corporation

00:34:59.560 --> 00:35:02.600
and sell it into the corporation,
things like that.

00:35:05.390 --> 00:35:10.980
So our future directions
are actually pretty simple.

00:35:10.980 --> 00:35:16.100
We plan to continue working towards
standards and to support standards.

00:35:16.100 --> 00:35:19.650
We actually work with the IETF to
extend the protocols when we think

00:35:19.650 --> 00:35:21.420
that they've got some limitations.

00:35:21.420 --> 00:35:26.550
A good example of that is that we
recently proposed an internet draft

00:35:26.550 --> 00:35:32.160
to the IETF that makes it possible to
write streaming caching servers that

00:35:32.210 --> 00:35:35.680
work much better with streaming media.

00:35:35.680 --> 00:35:37.460
Nobody else has done this,
and it was something that

00:35:37.460 --> 00:35:38.500
was desperately needed.

00:35:38.500 --> 00:35:42.600
Basically the streaming caches
were at the mercy of the network.

00:35:42.600 --> 00:35:45.230
They didn't have any information coming
to them about packets that were being

00:35:45.230 --> 00:35:48.600
sent to them or ways to get the media
sent to them in a reliable fashion.

00:35:48.600 --> 00:35:51.920
And so we worked on an extension
with the IETF to do that.

00:35:51.920 --> 00:35:54.550
As I mentioned,
Apple is also a founding member of

00:35:54.550 --> 00:35:59.020
the Internet Streaming Media Alliance,
which is basically an MPEG-4 alliance,

00:35:59.020 --> 00:36:02.660
and we are big on making sure that MPEG-4
works with all of the different vendors,

00:36:02.690 --> 00:36:04.470
and I think you're going to
see a lot of MPEG-4 coming out

00:36:04.470 --> 00:36:07.900
of Apple over the next year.

00:36:07.900 --> 00:36:11.500
And of course we plan to
continuously improve quality

00:36:11.500 --> 00:36:13.540
and of course performance.

00:36:13.540 --> 00:36:15.070
Sometimes we get lucky,
we get a really fast machine

00:36:15.070 --> 00:36:17.350
and that helps us automatically,
but we're continually looking at

00:36:17.350 --> 00:36:21.200
the software and looking for ways
to make the software perform better.

00:36:21.200 --> 00:36:23.530
And of course we'll always be
looking at adding new features

00:36:23.530 --> 00:36:27.350
and looking for other leading edge
technologies to add into the server.

00:36:32.880 --> 00:36:35.400
So there are a few places that
you can go to get more information

00:36:35.400 --> 00:36:36.800
about the streaming server.

00:36:36.800 --> 00:36:41.430
The first place,
or maybe the second place or third place,

00:36:41.430 --> 00:36:43.140
I'm not sure, depends on you,
but we have a mailing

00:36:43.210 --> 00:36:43.800
list for developers.

00:36:43.800 --> 00:36:48.800
And that list is actually
a really high quality list.

00:36:48.800 --> 00:36:50.790
I've gone on a lot of mailing lists,
some of them are not high quality.

00:36:50.840 --> 00:36:51.690
This one is good.

00:36:51.790 --> 00:36:54.800
The traffic is probably
between 5 to 20 messages a day.

00:36:54.800 --> 00:36:56.780
They're all very focused and
very development related.

00:36:56.800 --> 00:37:00.960
It's a great way to have contact with the
engineers because all of the engineers

00:37:00.960 --> 00:37:05.090
and some of the marketing people are
actually on this mailing list and

00:37:05.090 --> 00:37:08.570
monitoring and replying to questions.

00:37:09.180 --> 00:37:13.390
The best way to get to it is to just go
to lists.apple.com and search for the

00:37:13.390 --> 00:37:18.000
word "stream." You'll find the developers
list and you'll also see a users list,

00:37:18.000 --> 00:37:21.950
which is interesting too if you want
to find out what users are doing or if

00:37:21.950 --> 00:37:26.120
you want to become a user and figure
out how to use the server better.

00:37:26.470 --> 00:37:31.480
All of the open source information,
the Darwin versions of the server,

00:37:31.480 --> 00:37:37.720
are all available on Apple's open source
website at www.opensource.apple.com.

00:37:38.310 --> 00:37:42.330
and for things that are more client
related or authoring related,

00:37:42.330 --> 00:37:45.180
you should go to Apple's
developer site for QuickTime.

00:37:45.180 --> 00:37:51.220
That's developer.apple.com/quicktime.

00:37:51.330 --> 00:37:53.200
Even though you may not ever
write any networking code,

00:37:53.200 --> 00:37:56.800
it's actually a good idea to understand
what the protocols do and how they work.

00:37:56.840 --> 00:38:02.300
And so go to the IETF site and check out
the RFCs for the major protocols we use.

00:38:02.340 --> 00:38:11.800
RTSP is 2326, RTP is RFC 1889,
and SDP is 1998.

00:38:16.420 --> 00:38:19.560
And here are the sessions that
are remaining at WWDC that are

00:38:19.560 --> 00:38:20.900
related to the streaming server.

00:38:20.910 --> 00:38:23.740
So immediately following
this session in this room,

00:38:23.740 --> 00:38:24.890
you don't even have to
get out of your chairs,

00:38:24.920 --> 00:38:28.680
is a session on how to customize
and extend the streaming server.

00:38:28.710 --> 00:38:32.420
And we'll have some streaming
server engineers up for that.

00:38:32.500 --> 00:38:35.860
There's a feedback forum
tonight at 3:30 in room J1.

00:38:35.900 --> 00:38:38.330
And that's going to be -- that feedback
forum is actually intended for both

00:38:38.430 --> 00:38:39.690
QuickTime client and server issues.

00:38:39.700 --> 00:38:43.870
It's just kind of an uber
QuickTime feedback forum.

00:38:44.100 --> 00:38:55.500
[Transcript missing]

00:38:57.820 --> 00:39:02.010
If you need to contact anybody
with developer related questions,

00:39:02.010 --> 00:39:03.800
you should contact Jeff Lowe.

00:39:03.800 --> 00:39:08.800
He's the QuickTime Technology Manager for
Apple Worldwide Developer Relations.

00:39:08.800 --> 00:39:14.800
His email is jefflowe@apple.com.

00:39:14.800 --> 00:39:18.800
He also handles both
QuickTime server and client.