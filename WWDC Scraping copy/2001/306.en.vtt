WEBVTT

00:00:02.200 --> 00:00:05.250
Good morning and thank you for coming
to the Authorization API session.

00:00:05.250 --> 00:00:07.920
I want to apologize for the misprint
that you might have seen which

00:00:07.920 --> 00:00:09.340
showed this as authentication.

00:00:09.340 --> 00:00:10.100
That's my fault.

00:00:10.290 --> 00:00:13.010
I got the changes in at the
wrong time and they didn't get

00:00:13.010 --> 00:00:14.580
reflected out on the website.

00:00:14.650 --> 00:00:17.150
So we will be talking about
authorization in this session,

00:00:17.150 --> 00:00:18.100
not authentication.

00:00:18.100 --> 00:00:19.230
I'm Craig Keithley.

00:00:19.300 --> 00:00:22.600
I'm the Security and Cryptography
Technology Manager in Apple's

00:00:22.600 --> 00:00:37.100
Worldwide Developer Relations Group.

00:00:37.100 --> 00:00:37.100
I work closely with the engineers on
all security aspects and I'm pleased

00:00:37.100 --> 00:00:37.100
to bring up Michael Brouwere to
talk about the Authorization APIs.

00:00:37.100 --> 00:00:37.100
Thanks.

00:00:46.400 --> 00:00:53.310
We're going to talk about authorization
and authentication on Mac OS X.

00:00:55.170 --> 00:00:59.830
I'll start off by talking about
some recommended ways to use the

00:00:59.830 --> 00:01:06.150
Authorization API and what you as
developers can do to make OS X more

00:01:06.250 --> 00:01:09.750
secure by using the Authorization API.

00:01:11.500 --> 00:03:15.100
[Transcript missing]

00:03:15.830 --> 00:03:22.220
So, first part, I'll talk about
understanding authorization.

00:03:22.260 --> 00:03:30.030
Authorization is the answer to the
question of "may I do something"

00:03:30.030 --> 00:03:35.840
or "can I do this" rather than
"who am I?" Authentication

00:03:35.840 --> 00:03:37.950
answers the "who am I" question.

00:03:38.040 --> 00:03:40.500
Authorization makes the
access control decision.

00:03:40.500 --> 00:03:46.740
I'll talk about some of the things,
what it does and doesn't do,

00:03:46.740 --> 00:03:51.060
and finally I'll go over the actual API.

00:03:52.300 --> 00:05:09.600
[Transcript missing]

00:05:10.150 --> 00:05:16.000
So, why use authorization as the
authorization we're providing?

00:05:16.000 --> 00:05:22.580
So one of the reasons is that it's much
better than the current ad hoc methods

00:05:22.580 --> 00:05:24.190
used for performing authorization.

00:05:24.310 --> 00:05:27.400
To give you an example,
the way UNIX determines whether

00:05:28.020 --> 00:05:32.650
you can log in is if you're in the
UNIX password database and you happen

00:05:32.650 --> 00:05:36.130
not to be in the /etc/no/login file,
then you're okay.

00:05:36.380 --> 00:05:39.620
The way FTP lets you log
in is a similar mechanism,

00:05:39.620 --> 00:05:42.210
but yet again slightly different.

00:05:42.410 --> 00:05:46.280
Each protocol and each
way to access the system,

00:05:46.350 --> 00:05:49.240
traditionally in UNIX,
uses its own ad hoc method.

00:05:49.240 --> 00:05:52.600
And in many cases,
authorization isn't even performed.

00:05:52.670 --> 00:05:55.050
It's just as soon as
you've authenticated,

00:05:55.070 --> 00:05:58.240
it's assumed that you also
may access this service.

00:05:58.240 --> 00:06:04.240
By using authorization,
you're making an explicit decision,

00:06:04.290 --> 00:06:07.550
which means you can have a user in
the system which doesn't automatically

00:06:07.550 --> 00:06:10.240
mean he can use every single
service available in the system.

00:06:10.240 --> 00:06:14.740
So, you can control access to
which parts of the system you

00:06:14.790 --> 00:06:17.320
want people to have access to.

00:06:18.510 --> 00:06:25.060
Some of the benefits of having
a centralized Authorization API,

00:06:25.060 --> 00:06:29.400
as we're providing, is it makes your
applications easier to audit.

00:06:29.410 --> 00:06:33.670
Like I said before,
one of the things I'll talk about

00:06:33.670 --> 00:06:36.760
later is the ability for you to split
your application into two components,

00:06:36.810 --> 00:06:41.400
one component running non-privileged and
one running with elevated privileges.

00:06:41.400 --> 00:06:46.610
The part with elevated privileges is
going to be much smaller depending

00:06:46.610 --> 00:06:49.240
on less external frameworks,
which will make it

00:06:49.300 --> 00:06:50.300
easier for you to audit.

00:06:50.400 --> 00:06:53.260
Unlike on Mac OS 9,
on Unix when you're running

00:06:53.350 --> 00:06:57.120
something with root privileges,
you really want to make sure you

00:06:57.120 --> 00:07:00.820
walk through every single line
of code to make sure that your

00:07:00.820 --> 00:07:05.400
application isn't causing the next
cert advisory security vulnerability

00:07:05.400 --> 00:07:08.400
against our operating system.

00:07:08.400 --> 00:07:10.400
Because it would make you and
your company look really bad.

00:07:10.400 --> 00:07:15.840
Michael Brouwere So, the other thing,
it's configurable, it's securable,

00:07:15.930 --> 00:07:20.330
which means that in the default
out-of-the-box experience,

00:07:20.430 --> 00:07:23.510
the way we'll ship it,
it'll just be easy to use and

00:07:23.680 --> 00:07:27.270
your app probably won't work any
different from how it worked on OS 9.

00:07:27.550 --> 00:07:33.190
However, once administrative tools become
available to have more fine-grained

00:07:33.220 --> 00:07:37.140
control over who can do what,
it can be used in situations

00:07:37.140 --> 00:07:39.400
other than you've anticipated.

00:07:39.400 --> 00:07:40.310
And used to set up a
system that's more secure.

00:07:40.410 --> 00:07:45.150
Michael Brouwere So,
we're aiming to make it scale all the

00:07:45.160 --> 00:07:52.670
way from my mother using her iMac at home
to a corporate or government institution

00:07:52.670 --> 00:07:56.400
that needs a totally secure system.

00:07:56.970 --> 00:07:59.320
and it's flexible.

00:07:59.320 --> 00:08:01.280
And like I said before,
we're doing explicit,

00:08:01.320 --> 00:08:04.280
you're making explicit access
control decisions rather

00:08:04.280 --> 00:08:06.690
than just doing it ad hoc.

00:08:08.370 --> 00:08:16.140
So, here's the recommended architecture
for you writing an application.

00:08:16.140 --> 00:08:19.590
The application is your actual
app with the GUI and whatnot.

00:08:19.630 --> 00:08:23.060
The tool is the component of
your application which will

00:08:23.060 --> 00:08:25.960
run with elevated privileges.

00:08:25.960 --> 00:08:28.160
There are different ways
to make that happen.

00:08:28.160 --> 00:08:32.720
One of the ways is to have the installer
install a setuidroot component.

00:08:32.720 --> 00:08:36.570
So your application will launch
the tool on demand when it needs

00:08:36.570 --> 00:08:39.280
to perform a privilege operation.

00:08:39.280 --> 00:08:42.050
Now, there's a third thing in this
picture which is a security server,

00:08:42.180 --> 00:08:44.990
and that's a process running
on Mac OS X all the time,

00:08:44.990 --> 00:08:49.940
which is essentially the part of
the system that holds onto all the

00:08:49.940 --> 00:08:51.550
security-sensitive information.

00:08:51.560 --> 00:08:56.010
It's--for example,
it's the basis for storing

00:08:56.010 --> 00:08:59.500
keys in the keychain,
and it's the basis for storing

00:08:59.550 --> 00:09:02.370
state for the Authorization API,
as you'll

00:09:03.240 --> 00:09:09.490
So, first thing that happens is your
application obtains authorization

00:09:09.490 --> 00:09:12.220
to perform a certain operation.

00:09:12.320 --> 00:09:17.720
The security server will actually go out
and do any necessary UI at this point.

00:09:17.720 --> 00:09:21.360
So, even if your application
is not actually a GUI app,

00:09:21.360 --> 00:09:26.480
but let's say it's a command line
tool or some other application,

00:09:26.480 --> 00:09:32.230
we can still do UI for you if you pass us
the flag saying do whatever UI is needed.

00:09:32.230 --> 00:09:36.470
The security server actually launches a
separate process and does the UI there.

00:09:36.470 --> 00:09:40.170
So, it doesn't matter whether you're
Carbon or Cocoa or whatever,

00:09:40.270 --> 00:09:42.940
we'll present the UI in a
consistent way to the user.

00:09:42.940 --> 00:09:46.260
So now,
after you've obtained the authorization,

00:09:46.260 --> 00:09:49.320
the security server remembers
some state about the fact that

00:09:49.320 --> 00:09:51.300
you've gotten this authorization.

00:09:51.300 --> 00:09:54.630
The next thing is you externalize
that authorization and pass it

00:09:54.630 --> 00:09:56.570
from your application to your tool.

00:09:56.620 --> 00:10:00.250
And there are a couple of different ways
to do that and I'll show you that later.

00:10:00.260 --> 00:10:00.760
Okay.

00:10:00.760 --> 00:10:05.900
Then, the tool,
which is a Situated Root program,

00:10:05.900 --> 00:10:09.510
which means that anyone can execute it
and potentially have it do something,

00:10:09.550 --> 00:10:13.800
before it does anything at all,
the first thing it does is it checks the

00:10:13.870 --> 00:10:19.160
rights of the passed in authorization
to see if they allow what the tool has

00:10:19.220 --> 00:10:21.320
been asked to do by the application.

00:10:21.380 --> 00:10:26.310
So, even though your tool is actually
running with elevated privileges,

00:10:26.330 --> 00:10:30.580
it won't do anything unless, unless,
unless you've, you know,

00:10:30.580 --> 00:10:33.970
you've checked and made sure
that what you've been asked

00:10:33.970 --> 00:10:36.020
to do is actually allowed.

00:10:37.570 --> 00:10:39.410
And finally,
the tool performs the operation.

00:10:39.410 --> 00:10:44.500
And you can launch the
tool each time you do this,

00:10:44.500 --> 00:10:48.450
or you can write a tool that keeps on
running as long as your application runs.

00:10:48.490 --> 00:10:51.830
There's different models for this.

00:10:53.420 --> 00:10:56.530
So, a little bit about what
it does and doesn't do.

00:10:56.560 --> 00:11:01.680
Currently,
it's password-based only using that info.

00:11:01.710 --> 00:11:06.820
So that means that it uses users
and groups from that info and you

00:11:06.820 --> 00:11:11.050
authenticate using a password just
like when you log into Mac OS X.

00:11:11.150 --> 00:11:14.370
It answers the "Do I have the
right to do this?" question,

00:11:14.580 --> 00:11:16.740
but it doesn't in and
of itself grant access.

00:11:16.900 --> 00:11:21.430
You still need--you need to
already be privileged and have the

00:11:21.580 --> 00:11:24.220
privileges to perform the operation.

00:11:24.220 --> 00:11:27.370
Authorization API in and of itself
doesn't give you the privilege to do it,

00:11:27.400 --> 00:11:32.630
but what it helps you do is determine
whether or not you should do it.

00:11:32.630 --> 00:11:37.210
So it lets you make tools that
don't compromise system security.

00:11:37.210 --> 00:11:39.980
And it's up to the
administrator of the system,

00:11:39.980 --> 00:11:44.780
whether that be you, the owner,
or some actual administrator in the lab,

00:11:44.860 --> 00:11:48.440
to determine who can do what rather
than you having to make that decision.

00:11:48.440 --> 00:11:54.740
Michael Brouwere So,
just to make this clear,

00:11:54.740 --> 00:11:58.200
Mac OS X is not a
capability-based operating system.

00:11:58.200 --> 00:12:01.280
There aren't really any
capability-based commercial

00:12:01.820 --> 00:12:04.080
operating systems out there today.

00:12:04.080 --> 00:12:08.590
It would be really cool to have that,
which would basically mean that in

00:12:08.590 --> 00:12:11.430
asking for the right to do something,
you would now also be able to do it.

00:12:11.490 --> 00:12:14.010
Unfortunately,
that's not something that Kernel and the

00:12:14.010 --> 00:12:15.680
whole Unix environment supports today.

00:12:15.680 --> 00:12:18.200
There is some work going on in that.

00:12:18.330 --> 00:12:20.270
Michael Brouwere So,
the reason why we're doing this

00:12:20.270 --> 00:12:22.290
is because we're not really
going to be able to do it.

00:12:22.290 --> 00:12:24.580
We're not going to be able to do
it in the open source community

00:12:24.590 --> 00:12:25.660
and in other communities.

00:12:25.660 --> 00:12:27.940
So, maybe a couple years down the road,
we will have that.

00:12:27.960 --> 00:12:29.610
Just today,
the Authorization API lets you

00:12:29.610 --> 00:12:32.490
solve this problem by splitting
your app into two components.

00:12:32.800 --> 00:12:36.590
And finally, we provide user
interaction when necessary,

00:12:36.590 --> 00:12:42.140
so you don't have to go and program the
UI for getting all this information,

00:12:42.140 --> 00:12:43.340
et cetera.

00:12:43.450 --> 00:12:46.500
One thing I do want to say is that even
though today it's password-based only,

00:12:46.500 --> 00:12:51.320
we are looking into making the backend
for the Authorization API pluggable,

00:12:51.450 --> 00:12:55.910
which means we might support other
forms of authentication in the future.

00:12:56.030 --> 00:13:00.600
Think of smart card-based
or biometrics and whatnot.

00:13:01.260 --> 00:13:05.180
and when that happens,
your applications won't have to change,

00:13:05.230 --> 00:13:08.420
which means if you're using the
Authorization API today and those

00:13:08.420 --> 00:13:11.750
things get added to the system,
if an administrator configures

00:13:11.750 --> 00:13:14.090
it that you need a smart
card to reboot your server,

00:13:14.230 --> 00:13:20.840
then that automatically happens without
you or need a smart card to access the

00:13:20.840 --> 00:13:26.950
administration interface of your database
engine or whatever it is that you wrote.

00:13:26.950 --> 00:13:29.100
That'll happen without you
having to rev your product.

00:13:31.810 --> 00:13:34.700
So, a little bit about the API itself.

00:13:35.050 --> 00:13:38.040
First thing, the naming of rights.

00:13:38.050 --> 00:13:41.930
Authorization API works
with things called rights.

00:13:42.070 --> 00:13:47.460
Basically, you ask for the right to
perform a certain operation,

00:13:47.480 --> 00:13:50.740
and a right is really
nothing more than a string,

00:13:50.760 --> 00:13:51.700
a C string.

00:13:51.860 --> 00:13:56.190
We have some proposed naming for rights.

00:13:56.190 --> 00:14:00.540
Of course,
we list a number of rights that

00:14:00.740 --> 00:14:03.410
we internally use in the system,
but we can't predict which rights

00:14:03.410 --> 00:14:05.700
your application would want to use.

00:14:05.700 --> 00:14:14.500
I mean, an example of a right might be
com.mycompany.initialize.database,

00:14:14.980 --> 00:14:18.380
which we can't predict what
kind of operations you want

00:14:18.380 --> 00:14:20.690
to perform authorization for.

00:14:20.720 --> 00:14:21.630
So, you get to make a list of rights.

00:14:21.720 --> 00:14:24.240
And then,
once you make up those names for rights,

00:14:24.290 --> 00:14:27.550
we'll give you some guidelines
on what they should look like.

00:14:28.700 --> 00:15:30.700
[Transcript missing]

00:15:31.740 --> 00:15:35.160
So, naming of writes.

00:15:35.210 --> 00:15:38.330
Writes are mapped into a
hierarchical namespace,

00:15:38.370 --> 00:15:43.760
sort of like a DNS-like with dots.

00:15:43.760 --> 00:15:45.630
We define like different
high level domains,

00:15:45.730 --> 00:15:48.740
but like I said,
we don't define each individual

00:15:48.740 --> 00:15:52.260
write since the needs of each
application are different.

00:15:52.450 --> 00:15:55.720
And some example of write
names that we currently use

00:15:55.770 --> 00:16:00.390
would be system.logon.console,
which is the ability to

00:16:00.390 --> 00:16:03.020
log on in login window.

00:16:03.020 --> 00:16:05.740
System.logon.remote would be...

00:16:10.220 --> 00:16:11.250
The ability to log on, let's say,
through Telnet.

00:16:11.250 --> 00:16:14.630
You could further qualify that,
let's say, system.login.remote.telnet,

00:16:14.720 --> 00:16:18.440
system.login.remote.rlogin, etc.

00:16:18.440 --> 00:16:22.560
One of the things we allow in
the configuration is wildcard

00:16:22.560 --> 00:16:26.080
matching on prefixes of write names.

00:16:26.120 --> 00:16:29.790
So that means if you choose
your hierarchy of names,

00:16:29.820 --> 00:16:33.040
you might want to think of it in a--you
might want to name writes in a way

00:16:33.040 --> 00:16:41.110
that if someone puts some prefix star,
it actually makes sense for your

00:16:41.110 --> 00:16:48.140
application so that you'd qualify the
details towards the end of the name.

00:16:48.140 --> 00:16:51.620
We explicitly didn't want to allow for,
like, arbitrary regular expressions

00:16:51.630 --> 00:16:57.540
of write names in the rules
configuration because if we do that,

00:16:57.540 --> 00:17:01.140
it's going to be very unclear
which rule gets matched in certain

00:17:01.140 --> 00:17:02.970
situations for an administrator.

00:17:02.980 --> 00:17:06.560
So we want to try and keep it simple
so that someone administering this

00:17:06.560 --> 00:17:07.980
can actually understand this can
actually understand what's going

00:17:07.980 --> 00:17:11.040
to happen in a particular situation.

00:17:11.590 --> 00:17:13.970
And there's some others here.

00:17:14.070 --> 00:17:19.610
One that's the particularly noticeable
one is the system.privilege.admin,

00:17:19.610 --> 00:17:26.170
which is the right that gives you the
ability to run an arbitrary process as

00:17:26.170 --> 00:17:30.950
a root using the API for installers.

00:17:31.980 --> 00:17:36.050
So, like I said before,
application communication,

00:17:36.060 --> 00:17:38.720
one of the things it enables
you to do is to split off,

00:17:38.720 --> 00:17:42.300
I can't stress this enough,
is to split off the security

00:17:42.410 --> 00:17:47.520
sensitive operations into small well
understood tools that are auditable,

00:17:47.520 --> 00:17:52.900
that don't depend on like the entire
OS 10 stack and don't depend on core

00:17:52.960 --> 00:17:57.700
graphics and whatnot and App Kit and
Carbon so that the amount of code

00:17:57.700 --> 00:18:01.000
running with elevated privileges
is as little as possible and you

00:18:01.000 --> 00:18:03.830
actually know what's going on there.

00:18:03.870 --> 00:18:10.000
and to do that we provide APIs to pass
authorization tokens between processes.

00:18:11.040 --> 00:18:17.240
So, there's a slight,
something I didn't mention before,

00:18:17.240 --> 00:18:20.930
there's a slight difference between
authorization and pre-authorization,

00:18:20.930 --> 00:18:29.160
and that's when an application asks for
authorization in the original first step,

00:18:29.180 --> 00:18:32.160
it would be,
let's say you present a button that says,

00:18:32.250 --> 00:18:34.820
"Press this button to unlock the
UI so you can make changes to

00:18:34.820 --> 00:18:36.740
the administrator," whatever.

00:18:36.760 --> 00:18:39.840
That's called pre-authorization.

00:18:40.050 --> 00:18:42.020
At that point,
you're asking for permission

00:18:42.020 --> 00:18:44.270
to do something in the future,
but you're not actually

00:18:44.290 --> 00:18:45.390
doing it at this point.

00:18:45.400 --> 00:18:49.020
When you actually go off in your
tool and perform the operation,

00:18:49.020 --> 00:18:51.350
you're doing actual authorization.

00:18:51.350 --> 00:18:55.720
And the reason we want to make that
distinction is that certain operations

00:18:55.720 --> 00:18:59.320
might be so sensitive that we don't,
that an administrator doesn't want

00:18:59.320 --> 00:19:01.190
to allow them to be pre-authorized.

00:19:01.200 --> 00:19:03.900
Which means when you do
the pre-authorization,

00:19:03.900 --> 00:19:06.400
you'll get an answer back saying, "Yes,
you can do that."

00:19:06.400 --> 00:19:09.370
And then you'll be like,
"Yes, you can do this,

00:19:09.510 --> 00:19:14.100
but we can't confirm it until later,
until you actually go and do it."

00:19:14.160 --> 00:19:18.500
In Mac OS X today,
whenever you ask for a write

00:19:18.500 --> 00:19:22.820
in the current configuration,
things can be pre-authorized

00:19:22.950 --> 00:19:25.790
and your authorization stays
valid for five minutes,

00:19:25.890 --> 00:19:31.050
which basically means if you go
into one app and authorize to a

00:19:31.050 --> 00:19:35.050
panel there using admin privileges,
you go to a different app,

00:19:35.170 --> 00:19:38.100
you're still authorized
for the next five minutes,

00:19:38.170 --> 00:19:41.100
which we chose to do this.

00:19:41.100 --> 00:19:43.820
It's a slight balance between
security and usability.

00:19:43.840 --> 00:19:47.040
It means that the traditional OS 9 user,
after you log in,

00:19:47.040 --> 00:19:50.530
if you go directly to system
preferences and make some changes,

00:19:50.530 --> 00:19:51.980
you're still authorized.

00:19:51.980 --> 00:19:53.990
Five minutes later, you're not.

00:19:54.080 --> 00:19:55.760
You'd be asked for your password again.

00:19:55.890 --> 00:19:58.190
It also means if you go
to 15 different panels,

00:19:58.190 --> 00:19:59.840
it's all have different writes.

00:19:59.990 --> 00:20:03.570
You don't have to type your
password 15 different times if

00:20:03.570 --> 00:20:05.840
you're changing them all at once.

00:20:05.940 --> 00:20:09.480
Of course,
in more security-sensitive environments,

00:20:09.480 --> 00:20:13.320
people might want to tighten that down,
which we allow for.

00:20:13.580 --> 00:20:16.990
The decision whether or not that happens
actually happens in the configuration

00:20:16.990 --> 00:20:18.570
rather than in your application.

00:20:18.580 --> 00:20:22.630
If you're alarmed about this happening
today and you might want to think

00:20:22.630 --> 00:20:27.040
about trying to tie that down,
we recommend you not do that because we

00:20:27.040 --> 00:20:31.790
really want to have the administrator
be able to control how that works

00:20:31.790 --> 00:20:35.580
rather than the application developers.

00:20:36.620 --> 00:20:45.580
So, the first thing that happens is
that with the pre-authorization,

00:20:46.170 --> 00:20:50.690
I should probably skip to the next
slide and come back to this later.

00:20:50.690 --> 00:20:52.440
So I'll get back to this one in a second.

00:20:52.610 --> 00:20:56.090
First thing that happens when you're
using the Authorization API is

00:20:56.140 --> 00:20:59.710
you create an authorization ref,
which is basically a handle

00:21:00.120 --> 00:21:05.100
to the security server that
represents the rights you have.

00:21:05.100 --> 00:21:09.800
You can create an authorization
ref and figure out what's currently

00:21:09.800 --> 00:21:12.100
allowed by using copyrights.

00:21:12.100 --> 00:21:16.620
The way you use copyrights is you ask
for all the rights--you list all the

00:21:16.620 --> 00:21:20.000
rights that you might potentially be
interested in having and figure out

00:21:20.010 --> 00:21:21.100
which of them are currently allowed.

00:21:21.100 --> 00:21:23.400
Since, like I said before,
we have this notion of this

00:21:23.400 --> 00:21:25.580
five-minute timeout by default,
it could be that when

00:21:25.710 --> 00:21:28.370
your app gets launched,
it's already allowed to do everything

00:21:28.370 --> 00:21:31.740
you would possibly ever want to do,
in which case you show your UI unlocked

00:21:31.740 --> 00:21:34.100
and show all the fields editable.

00:21:34.100 --> 00:21:35.100
Okay.

00:21:35.730 --> 00:21:39.310
If it's not,
you can lock down the UI and when

00:21:39.510 --> 00:21:43.600
the user wants to make changes by
clicking a button or some other,

00:21:43.600 --> 00:21:45.970
whatever UI you want to use for that,
I mean,

00:21:45.970 --> 00:21:49.600
traditionally OS X uses a little press
to the lock button to make changes here.

00:21:49.600 --> 00:21:53.600
So that's probably what you should
do if you want to be consistent.

00:21:53.600 --> 00:21:56.300
You perform a pre-authorization
using copyrights,

00:21:56.300 --> 00:21:59.660
which the pre-authorization
basically just means you're passing

00:21:59.660 --> 00:22:03.080
an extra flag to copyrights saying,
please do a pre-authorization

00:22:03.080 --> 00:22:04.590
instead of a regular one.

00:22:04.600 --> 00:22:07.440
And you ask for the same rights again.

00:22:07.440 --> 00:22:10.890
The only difference is this time you say,
and do any UI that's

00:22:10.890 --> 00:22:12.590
needed to get these rights.

00:22:12.590 --> 00:22:17.000
In which case, we'll go off, do the UI,
and extend whatever rights you have

00:22:17.160 --> 00:22:19.600
to match what you're asking for.

00:22:19.720 --> 00:22:23.360
If your application is willing
to deal with only getting part

00:22:23.360 --> 00:22:26.930
of the rights that you need,
you can pass a flag for that and

00:22:26.930 --> 00:22:31.190
you'd have to check the returned
rights to see which of the ones you've

00:22:31.190 --> 00:22:33.530
asked for have actually come in.

00:22:33.600 --> 00:22:36.910
So if you want all or nothing,
you just don't ask for partial

00:22:36.910 --> 00:22:40.600
rights and will fail if you don't
get everything you asked for.

00:22:41.340 --> 00:22:46.040
Then you can pass that authorization
ref to your privileged tool or

00:22:46.040 --> 00:22:51.300
daemon by calling authorization
externalize or create external form,

00:22:51.300 --> 00:22:53.300
I think is what the API is called.

00:22:53.600 --> 00:22:57.300
And then we get to the tool.

00:22:57.300 --> 00:23:02.670
So you pass that ref to your tool,
preferably through any method

00:23:02.670 --> 00:23:06.510
other than the environment
or command line arguments,

00:23:06.510 --> 00:23:06.510
since

00:23:06.750 --> 00:23:10.300
Both of those can actually
be snooped by running PS.

00:23:10.360 --> 00:23:17.300
So you'd want to pass it out through
pipe or using CF messages or Mach IPC or

00:23:17.300 --> 00:23:21.120
whatever communication mech-- There's
a number of different communication

00:23:21.120 --> 00:23:22.740
mechanisms available on OS X.

00:23:22.740 --> 00:23:25.260
We just recommend you not do
it through the environment,

00:23:25.400 --> 00:23:28.200
the Unix environment or the command line.

00:23:28.860 --> 00:23:34.180
So then your tool calls create
from external to basically

00:23:34.660 --> 00:23:37.420
create the authorization ref,
which is essentially the same

00:23:37.420 --> 00:23:38.800
one as in the application.

00:23:39.030 --> 00:23:42.960
And then it calls copyrights to determine
whether the right that is needed to do

00:23:42.960 --> 00:23:44.750
what it needs to do has been granted.

00:23:45.800 --> 00:23:47.750
When it's doing that,
it can also pass in the flag saying,

00:23:47.750 --> 00:23:52.440
"And do any UI that's needed to
really have this happen." Which means

00:23:52.440 --> 00:23:56.070
that even though your tool isn't
a Cocoa or Carbon or whatever app,

00:23:56.070 --> 00:23:58.960
we'll still go off and do
whatever UI is needed to make

00:23:58.960 --> 00:24:00.780
the actual operation happen.

00:24:00.800 --> 00:24:05.230
Which, the reason we want you to do that
is if for some reason a particular

00:24:05.230 --> 00:24:08.800
operation can't be preauthorized,
the UI won't actually

00:24:08.800 --> 00:24:10.790
happen until you get here.

00:24:10.800 --> 00:24:13.800
So if you don't pass that flag,
in certain setups,

00:24:13.800 --> 00:24:14.780
the operation will not be
able to be preauthorized.

00:24:14.830 --> 00:24:16.790
might fail.

00:24:17.610 --> 00:24:22.980
And then you perform the requested
operations if copyright says you can.

00:24:25.500 --> 00:24:34.100
So, just coming back to this slide,
the pre-authorization again, you...

00:24:34.120 --> 00:24:38.560
do the preauthorization--
is my mic still on?

00:24:38.770 --> 00:24:43.460
You do the preauthorization in the app,
but not in the tool.

00:24:43.480 --> 00:24:48.690
And so one of the other reasons we want
you to have the preauthorization is

00:24:49.120 --> 00:24:52.640
to keep the final call to copyrights
as close as possible to the operation.

00:24:52.730 --> 00:24:55.610
So you make the call, saying,
this is when I'm going to do it,

00:24:55.720 --> 00:24:57.270
and then do it.

00:24:57.380 --> 00:25:00.920
This also allows us to add audit
logging to the authorization

00:25:00.920 --> 00:25:03.140
system in the future,
which means we could actually

00:25:03.140 --> 00:25:06.140
track what things have actually
been done on the system,

00:25:06.140 --> 00:25:09.070
which rights have been
granted to which processes.

00:25:09.190 --> 00:25:14.060
And so that you could later
go back and look and see who's

00:25:14.060 --> 00:25:16.140
done what to your computer.

00:25:16.140 --> 00:25:21.290
And it allows for a zero length timeout,
which essentially means that you have

00:25:21.290 --> 00:25:25.280
to enter the password or whatever
authentication is needed to perform

00:25:25.280 --> 00:25:30.140
this right exactly when it happens,
rather than having it be valid

00:25:30.290 --> 00:25:32.880
for the next five minutes.

00:25:33.060 --> 00:25:35.750
And for example,
removable tokens like smart cards

00:25:35.830 --> 00:25:37.790
and things like that in the future.

00:25:39.830 --> 00:25:47.260
So, strange title for this slide,
but this is what the UI currently

00:25:47.260 --> 00:25:49.230
looks like that we present.

00:25:49.380 --> 00:25:50.720
This is actually directory setup.

00:25:50.810 --> 00:25:52.800
I don't know if any of you
have been to that session.

00:25:52.800 --> 00:25:57.060
So it presents a dialog that,
with a text telling the user,

00:25:57.060 --> 00:26:01.350
you need to enter administrator
name and password to make

00:26:01.350 --> 00:26:03.800
changes in directory setup.

00:26:03.800 --> 00:26:09.800
So, this is what the UI looks like.

00:26:09.800 --> 00:26:15.800
One of the things we'd like to have some
feedback on is ways to improve this.

00:26:15.800 --> 00:26:17.800
I know that there's been some
comments from people where you

00:26:17.800 --> 00:26:17.800
would like to have the UI be
more custom to your application.

00:26:17.840 --> 00:26:22.720
And during the Q&A we can go
over some of those things.

00:26:22.830 --> 00:26:27.050
One of the issues we have is we don't
want to have it be possible for the

00:26:27.050 --> 00:26:31.800
application to mislead the user in
what he's really granting access to.

00:26:31.800 --> 00:26:32.800
So, there needs to be balance between how
much of the user is really granted

00:26:32.800 --> 00:26:32.800
access to the UI and how much of the
user is not granted access to the UI.

00:26:32.810 --> 00:26:33.230
So, there needs to be balance between how
much of the user is really granted

00:26:33.230 --> 00:26:33.800
access to the UI and how much of the
user is not granted access to the UI.

00:26:33.800 --> 00:26:36.300
can be customized.

00:26:36.300 --> 00:26:40.760
So right now we actually hint
the user name of the current user

00:26:40.870 --> 00:26:46.140
that's logged in if he would be
allowed to perform that operation.

00:26:46.140 --> 00:26:47.670
And like I said,
we're looking into ways to

00:26:47.680 --> 00:26:51.090
making all of this pluggable,
which means you actually,

00:26:51.170 --> 00:26:54.320
as a plug-in developer,
be able to provide your own completely

00:26:54.380 --> 00:26:58.410
custom UI that says put your finger
on the fingerprint reader or enter

00:26:58.410 --> 00:27:05.680
your magic passphrase now or whatever,
or speak your name.

00:27:06.340 --> 00:27:11.780
So, finally is the temporary solution
for third party installers,

00:27:11.780 --> 00:27:16.540
and that's the API is called
Authorization Execute with Privileges.

00:27:16.540 --> 00:27:21.410
The right required to use that
is system.privilege.admin.

00:27:21.410 --> 00:27:24.780
So basically you need to create
an authorization ref that grants

00:27:24.860 --> 00:27:28.360
the right system.privilege.admin,
and then you can call system--call

00:27:28.550 --> 00:27:31.000
Authorization Execute with Privileges.

00:27:31.170 --> 00:27:35.560
Now, this is a way to sort of work around
the problem of having to be installed,

00:27:35.560 --> 00:27:39.190
set your ID root and whatnot,
and just launch your tool

00:27:39.310 --> 00:27:41.070
with root privileges.

00:27:41.780 --> 00:27:46.770
However, depending on what the right is
that your tool is needing to do,

00:27:46.780 --> 00:27:51.900
let's say if it's a web server and all
it's really doing is binding to port 80,

00:27:51.900 --> 00:27:55.300
we can configure it in such a way that
the asking for the right to bind to

00:27:55.430 --> 00:27:58.940
port 80 really doesn't do any UI at all
in the common case because it's like,

00:27:58.940 --> 00:28:01.820
well, if my mother launches
her personal web sharing,

00:28:01.830 --> 00:28:06.100
why should she have to
enter an admin password?

00:28:06.100 --> 00:28:09.140
If you're using this API,
we're always going to do UI.

00:28:09.190 --> 00:28:13.580
So we really--because basically we're
letting you execute an arbitrary

00:28:13.580 --> 00:28:16.370
binary with root privileges.

00:28:16.440 --> 00:28:21.190
And this is currently the only way
to do it on OS X other than going

00:28:21.190 --> 00:28:23.800
through sudo on the command line.

00:28:24.090 --> 00:28:28.020
So, it's there,
but we'd really like you to use the

00:28:28.020 --> 00:28:30.990
Authorization API as I've talked
about the rest of the session,

00:28:31.050 --> 00:28:34.620
rather than just shortcut
everything and use this API.

00:28:37.400 --> 00:28:50.100
[Transcript missing]

00:28:50.790 --> 00:28:53.790
You ask for a right to do something,
having that right doesn't

00:28:53.790 --> 00:28:54.910
actually let you do it yet.

00:28:55.030 --> 00:28:58.060
You still need to actually have
those privileges in the first place

00:28:58.420 --> 00:29:00.240
to be able to perform the operation.

00:29:00.330 --> 00:29:03.690
So like I said before,
what we do is help you make

00:29:03.690 --> 00:29:07.780
the decision of should I do
this on behalf of the user.

00:29:08.000 --> 00:29:12.140
Your application should not
run with root privileges.

00:29:12.140 --> 00:29:14.900
You want to split that off
into the separate tool.

00:29:14.900 --> 00:29:19.140
And you want to pre-authorize the rights,
then pass them to the tool,

00:29:19.140 --> 00:29:20.900
and then actually do the operation.

00:29:20.900 --> 00:29:25.900
And finally, keep the privilege tool as
small as possible and audit it.

00:29:25.900 --> 00:29:27.900
I can't stress this enough.

00:29:27.900 --> 00:29:32.870
I mean, any of you familiar with Unix
or Linux know that anything

00:29:32.870 --> 00:29:36.470
that's set your ID root,
or anything that even isn't set

00:29:36.470 --> 00:29:40.250
your ID root but you run using
authorization execute with privileges,

00:29:40.340 --> 00:29:46.110
needs to be very carefully examined
because any potential security hole in

00:29:46.110 --> 00:29:49.050
that can compromise the whole system.

00:29:51.750 --> 00:29:57.420
So here are some resources to go look at.

00:29:57.450 --> 00:30:01.810
There's a developer page.

00:30:01.900 --> 00:30:06.390
The CDSA spec,
all of our security work that

00:30:06.420 --> 00:30:12.040
we've been doing in the last
two years is based on CDSA 2.0,

00:30:12.050 --> 00:30:14.380
which is an open group standard.

00:30:14.380 --> 00:30:20.110
And all of the work CDSA and below,
actually even up to

00:30:20.110 --> 00:30:26.540
the Authorization API,
is now open source and is available on

00:30:26.540 --> 00:30:31.870
the cvs.opensource.apple.com server.

00:30:31.900 --> 00:30:40.680
And you can follow the PCSC links
for the smart card access stuff.

00:30:41.760 --> 00:30:45.900
So, there's a number of related sessions.

00:30:46.130 --> 00:30:50.080
There's a security overview
that you already missed.

00:30:50.220 --> 00:30:55.100
and there's a Kerberos
session later this week.

00:30:55.100 --> 00:30:59.530
Actually, there's also a Keychain session
right after this session,

00:30:59.620 --> 00:31:04.490
which is well worth attending if
you're interested in security.

00:31:05.660 --> 00:31:07.310
And then finally there's
the feedback forum.

00:31:07.380 --> 00:31:10.840
So any questions that you
can't get answered today,

00:31:10.840 --> 00:31:15.000
you can all come to the feedback
forum and talk about it there.

00:31:17.330 --> 00:31:21.400
Craig, who was here before me,
is the person in contact with

00:31:21.400 --> 00:31:25.470
any technical or developer
questions related to this.

00:31:25.470 --> 00:31:29.290
And he'll make sure it gets forwarded
to the appropriate people in our team.