WEBVTT

00:00:10.470 --> 00:00:13.400
So since we're going to be talking
about application localization,

00:00:13.400 --> 00:00:16.340
we're going to do a
presentation in French today.

00:00:16.340 --> 00:00:19.290
OK, just kidding,
but we have some Irish people.

00:00:20.150 --> 00:00:23.350
All right,
I'd like to welcome you to session 129,

00:00:23.350 --> 00:00:26.100
Mac OS X Application Localization.

00:00:26.140 --> 00:00:28.090
Last year,
we talked a lot about how you're

00:00:28.130 --> 00:00:30.550
going to be able to localize
your application on Mac OS X.

00:00:30.830 --> 00:00:32.790
We talked about this
new bundle mechanism,

00:00:32.790 --> 00:00:34.660
which is going to make your
life easier to ship one

00:00:34.660 --> 00:00:36.860
application in several languages.

00:00:36.930 --> 00:00:38.660
We talked about Appleglot 3.

00:00:38.710 --> 00:00:41.830
And I think this session will
cover actually how you're going

00:00:41.830 --> 00:00:43.760
to be able to do the real work.

00:00:43.820 --> 00:00:45.800
This year,
we have the whole solution for you.

00:00:45.820 --> 00:00:48.590
And tonight, going back to your hotel,
you'll be able to start actually

00:00:48.590 --> 00:00:50.700
localizing your application in French.

00:00:50.750 --> 00:00:53.610
I'd like to introduce for this session

00:00:54.420 --> 00:00:57.460
Chris Hansen,
who works in the RE here in Cupertino

00:00:57.460 --> 00:01:01.160
and will talk about the advantages of
Mac OS X and the international issues.

00:01:01.160 --> 00:01:03.310
Thank you.

00:01:07.300 --> 00:06:09.900
[Transcript missing]

00:06:10.550 --> 00:06:13.940
So all these international
technologies I've alluded to,

00:06:13.940 --> 00:06:16.400
like Unicode for text
rendering and font management,

00:06:16.570 --> 00:06:18.680
so on,
they have other sessions here at WWDC,

00:06:18.680 --> 00:06:20.730
and I encourage you to go to
those or review them for some

00:06:20.730 --> 00:06:21.980
that have already occurred.

00:06:21.980 --> 00:06:24.220
But I do want to touch on
one area in particular,

00:06:24.220 --> 00:06:28.290
and that's application packaging and
how that enables multiple localization.

00:06:28.300 --> 00:06:31.750
So you're all familiar with the
application packaging mechanism

00:06:31.770 --> 00:06:34.080
that's used for application packaging.

00:06:34.080 --> 00:06:35.460
I use that in quotes online.

00:06:35.740 --> 00:06:37.200
It's a single file model.

00:06:37.200 --> 00:06:39.620
You have a resource fork, a data fork.

00:06:39.620 --> 00:06:42.020
Your HI is typically
in the resource fork.

00:06:42.090 --> 00:06:45.850
Your executable is
typically in the data fork.

00:06:45.860 --> 00:06:50.640
So this single file model enables
a couple of very nice things.

00:06:50.640 --> 00:06:52.980
So one thing is it's very
simple for the users,

00:06:52.980 --> 00:06:53.520
right?

00:06:53.520 --> 00:06:56.640
So there's a single icon in the finder,
double clickable.

00:06:56.640 --> 00:06:59.240
The user doesn't have to know
anything about the internals

00:06:59.240 --> 00:07:00.480
of this file structure.

00:07:00.480 --> 00:07:05.620
The other thing that's very nice about
this mechanism and this model is that,

00:07:05.830 --> 00:07:08.110
the executables and the
resources are separate.

00:07:08.200 --> 00:07:12.900
So we can localize an application,
and we don't have to recompile the code.

00:07:12.960 --> 00:07:15.010
Typically,
we don't have to touch the executables.

00:07:15.070 --> 00:07:17.830
So that's a very nice advantage
of this resource fork,

00:07:17.830 --> 00:07:18.770
data fork split.

00:07:18.870 --> 00:07:21.690
But this model does
have some shortcomings,

00:07:21.690 --> 00:07:24.300
especially with modern applications.

00:07:24.410 --> 00:07:28.190
So one issue we have is that there's
no support for multiple localizations

00:07:28.200 --> 00:07:30.020
within a single resource fork.

00:07:30.040 --> 00:07:32.330
So if you want to ship a French,
a German,

00:07:32.330 --> 00:07:34.850
a Japanese version of your application,
well,

00:07:34.850 --> 00:07:35.620
you have to create a new application.

00:07:35.620 --> 00:07:35.620
So you have to create a new application.

00:07:35.620 --> 00:07:35.720
So you have to create a new application.

00:07:35.740 --> 00:07:36.980
So you have to create three
versions of that application,

00:07:36.980 --> 00:07:41.110
localize the HI within those resources
to the appropriate target locale,

00:07:41.120 --> 00:07:44.030
and then you, of course,
have duplicates of the executables

00:07:44.030 --> 00:07:45.280
in each of those files.

00:07:45.280 --> 00:07:47.440
So there's no support for
multiple localizations.

00:07:47.440 --> 00:07:51.030
The other issue is that modern
applications have a lot of different

00:07:51.130 --> 00:07:54.990
types of files that don't fit
very well into the resource fork,

00:07:54.990 --> 00:07:56.720
resource sort of model.

00:07:56.720 --> 00:08:01.960
So things like plug-ins and help files
and other things like that aren't easy to

00:08:01.960 --> 00:08:05.160
shoehorn into the resource fork format.

00:08:05.160 --> 00:08:07.350
So you typically... So you typically
have a bunch of loose files sitting

00:08:07.350 --> 00:08:12.310
around that may be necessary or
useful for your application to run.

00:08:12.460 --> 00:08:14.090
So that's the Mac OS 9 model, right?

00:08:14.110 --> 00:08:18.360
So on Mac OS X,
applications are packaged as a set

00:08:18.360 --> 00:08:19.530
of folders or folder hierarchy.

00:08:19.590 --> 00:08:23.000
So there's a place within
this folder hierarchy for,

00:08:23.310 --> 00:08:24.350
for example, your executables.

00:08:24.350 --> 00:08:27.030
So you could, for example,
have multiple executables

00:08:27.030 --> 00:08:30.100
within this application package
for different platforms.

00:08:30.100 --> 00:08:33.460
So if you wanted your application
to launch a different executable,

00:08:33.560 --> 00:08:36.290
if your user launched it on Mac OS 9,
you can do that.

00:08:37.380 --> 00:08:39.890
There's also a place
within this application,

00:08:39.890 --> 00:08:43.590
excuse me, this folder hierarchy for
multiple localizations.

00:08:43.650 --> 00:08:49.190
So the language project or lproj folders
contain resources for different locales.

00:08:49.190 --> 00:08:53.810
So you can recognize these language
project or lproj folders within

00:08:53.810 --> 00:08:57.620
the application package by name,
by language name.

00:08:57.620 --> 00:09:00.060
Sometimes they'll be
called like english.lproj,

00:09:00.060 --> 00:09:02.820
french.lproj, japanese.lproj,
things like that.

00:09:02.820 --> 00:09:04.040
You recognize those.

00:09:04.040 --> 00:09:04.280
Chris Hansten, Jack Sampson, Mike Butler,
and Chris Halpern.

00:09:04.300 --> 00:09:04.300
So you can recognize these language
project or lproj folders within

00:09:04.300 --> 00:09:04.300
the application package by name,
by language name.

00:09:04.300 --> 00:09:04.300
Sometimes they'll be
called like english.lproj,

00:09:04.300 --> 00:09:04.300
french.lproj, japanese.lproj,
things like that.

00:09:04.300 --> 00:09:04.340
You recognize those.

00:09:04.340 --> 00:09:04.520
Chris Hansten, Jack Sampson, Mike Butler,
and Chris Halpern.

00:09:04.560 --> 00:09:08.920
This mechanism also supports
an ISO naming convention.

00:09:08.920 --> 00:09:11.380
And so for example,
you might have en.lproj,

00:09:11.380 --> 00:09:13.740
which would be universal english content.

00:09:13.740 --> 00:09:17.710
You might have ja.lproj, japanese,
universal japanese content.

00:09:17.720 --> 00:09:23.000
And en.gb.lproj, which is british english
specific content.

00:09:23.000 --> 00:09:26.180
That mechanism is a little
more flexible than the language

00:09:26.180 --> 00:09:27.870
naming and is recommended.

00:09:27.880 --> 00:09:32.470
There's also a place within this
application package for the other stuff.

00:09:32.580 --> 00:09:34.500
So things like help files.

00:09:34.520 --> 00:09:38.710
And plugins and package data,
other metadata can be

00:09:38.710 --> 00:09:42.130
packaged together within this
application package structure.

00:09:42.220 --> 00:09:46.020
So you see the point of this,
the purpose here is to group

00:09:46.020 --> 00:09:50.200
all of these required resources
together into one folder hierarchy.

00:09:50.200 --> 00:09:53.920
And yet still make it simple for
the user so they see one double

00:09:53.920 --> 00:09:56.510
clickable application in the finder.

00:09:56.670 --> 00:09:59.430
So let's look at a very
simplified example here.

00:09:59.430 --> 00:10:01.280
This is extremely simplified.

00:10:01.280 --> 00:10:02.630
I've left some things out of this.

00:10:02.680 --> 00:10:04.680
But there's a simple app package.

00:10:04.680 --> 00:10:08.280
You see at the top there,
mail.app or mail,

00:10:08.380 --> 00:10:11.120
the user will still see a single
icons double clickable item.

00:10:11.320 --> 00:10:13.510
If you actually expand
that in the file system,

00:10:13.510 --> 00:10:16.290
you'll see there's various
folders under there and files.

00:10:16.440 --> 00:10:22.220
And looking on the right side of it,
the Mac OS folder contains the

00:10:22.220 --> 00:10:25.300
executable for the Mac OS platform.

00:10:25.320 --> 00:10:29.140
You could potentially have other folders
there supporting other platforms.

00:10:29.160 --> 00:10:32.310
If you look on the left side of it,
the resources folder.

00:10:32.430 --> 00:10:34.040
There's a couple things there.

00:10:34.310 --> 00:10:36.610
There's a myapp.rsrc.

00:10:37.030 --> 00:10:39.550
Now that file contains global content.

00:10:39.940 --> 00:10:43.080
Content that applies to all
of your localizations and

00:10:43.080 --> 00:10:44.250
does not need to be localized.

00:10:44.360 --> 00:10:47.770
So that might contain things like
icons or pictures or other things

00:10:47.850 --> 00:10:49.680
that don't require localization.

00:10:49.800 --> 00:10:55.480
The English L approach contains the
content that does require localization.

00:10:55.480 --> 00:11:00.040
So for example, the localized.rsrc,
should say localized.rsrc,

00:11:00.040 --> 00:11:02.040
would contain things that
do require localization.

00:11:02.040 --> 00:11:05.130
Your strings, your layouts,
your other content that

00:11:05.150 --> 00:11:08.600
should be localized on a per
locale or per language basis.

00:11:08.600 --> 00:11:13.280
So the strength of this mechanism,
if I wanted to localize this

00:11:13.280 --> 00:11:18.680
application into say French or German,
all I need to do is duplicate

00:11:18.680 --> 00:11:19.640
the English L approach.

00:11:19.640 --> 00:11:20.690
Name it appropriately.

00:11:20.800 --> 00:11:24.470
So French L approach, German L approach,
etc.

00:11:24.530 --> 00:11:26.760
And localize the content
within that L approach.

00:11:26.760 --> 00:11:29.200
So I can use the localization
tools that will be discussed

00:11:29.200 --> 00:11:30.430
to localize that content.

00:11:31.720 --> 00:11:34.720
If I then put those L approaches
back within this application package,

00:11:34.830 --> 00:11:35.560
as in this picture.

00:11:35.560 --> 00:11:37.850
So I have a French L approach there,
a German L approach there.

00:11:38.060 --> 00:11:40.700
The great thing about this is
that this application is now

00:11:40.770 --> 00:11:42.760
localized and multilingualized.

00:11:42.930 --> 00:11:46.900
So if the user that has this on
their system was running with

00:11:46.910 --> 00:11:49.080
French as their preferred language,
let's say.

00:11:49.200 --> 00:11:51.070
And they launch this app,
it will show the content that's

00:11:51.070 --> 00:11:52.110
in the French L approach.

00:11:52.250 --> 00:11:53.560
It will have a French UI.

00:11:53.710 --> 00:11:58.320
And they decide to switch to German as
a preferred language or more likely

00:11:58.320 --> 00:12:00.240
another user to multi-user system.

00:12:00.520 --> 00:12:01.400
Another user logs on.

00:12:01.400 --> 00:12:03.170
And they want to be running in German.

00:12:03.450 --> 00:12:04.440
They launch Mail app.

00:12:04.530 --> 00:12:05.530
It will be running in German.

00:12:05.780 --> 00:12:06.100
Okay.

00:12:06.270 --> 00:12:09.710
Very nice for the user.

00:12:10.230 --> 00:12:13.560
So what have we learned in doing
these couple versions of the OS,

00:12:13.560 --> 00:12:15.720
doing the multi-lingual,
that's helpful for you guys?

00:12:15.720 --> 00:12:17.340
Well, there's really two main things.

00:12:17.340 --> 00:12:21.130
One is to use this application
packaging mechanism.

00:12:21.140 --> 00:12:24.270
This gives you a flexible
delivery mechanism.

00:12:24.280 --> 00:12:27.210
So on the one hand,
you could potentially package

00:12:27.280 --> 00:12:31.480
together multiple UIs within your
application with one executable

00:12:31.480 --> 00:12:34.560
and deliver that in a single CD or
single deliverable to your users.

00:12:34.600 --> 00:12:36.330
On the other hand,
if you don't want to do

00:12:36.330 --> 00:12:39.230
that for whatever reason,
you could also deliver that

00:12:39.230 --> 00:12:41.750
language later as an add-on,
a plug-in of some sort.

00:12:41.760 --> 00:12:45.300
So you could, for example,
ship your application and version of your

00:12:45.360 --> 00:12:48.440
application and then deliver a language
over the web as an add-in plug-in.

00:12:48.530 --> 00:12:49.260
It's a separate folder.

00:12:49.260 --> 00:12:51.460
All of this stuff can just be
plugged into your application

00:12:51.460 --> 00:12:52.720
and will just start working.

00:12:52.720 --> 00:12:57.290
The other nice thing about this is
it's very flexible for your users.

00:12:57.300 --> 00:13:00.540
So many of your users may
want to run their application,

00:13:00.550 --> 00:13:02.650
run their system,
with other languages than

00:13:02.650 --> 00:13:05.880
English as their preferred language,
and they would like it if your

00:13:06.010 --> 00:13:07.550
application responds to that.

00:13:07.900 --> 00:13:10.830
and displays its UI in that language.

00:13:11.300 --> 00:13:15.240
So the other thing we learned is
to use the Mac OS X international

00:13:15.330 --> 00:13:16.870
support that's available.

00:13:17.700 --> 00:13:20.800
Never forget when you're working on
your app that it is a multi-script,

00:13:20.800 --> 00:13:23.540
multi-local,
and multi-lingual environment.

00:13:23.580 --> 00:13:26.620
And use all of the international support,
the Unicode for text rendering,

00:13:26.620 --> 00:13:29.550
the font management, MLTE,
all the different things.

00:13:29.650 --> 00:13:31.810
There's other sessions that
you can look at on that.

00:13:32.070 --> 00:13:32.490
Use those.

00:13:32.630 --> 00:13:35.590
And if you do use those technologies,
then there's a lot of really cool

00:13:35.590 --> 00:13:40.430
things you can do for your international
users in your application on Mac OS X.

00:13:40.570 --> 00:13:43.790
So with that, I'd like to turn this
over to Jack Sampson,

00:13:43.790 --> 00:13:45.860
who's our Localization
Tools Development Manager,

00:13:46.010 --> 00:13:48.280
and he'll talk to you about
the Localization Tool side.

00:13:48.340 --> 00:13:49.280
Thank you very much.

00:13:54.700 --> 00:13:58.300
Thanks, Chris.

00:13:58.320 --> 00:14:03.580
We are delighted to show you Apple's
very latest localization tools today,

00:14:03.580 --> 00:14:06.180
namely Appleglot 3 and Monte.

00:14:06.510 --> 00:14:11.680
Appleglot 3 is Apple's
incremental localization tool.

00:14:11.720 --> 00:14:15.190
It supports incremental
localization for Classic,

00:14:15.440 --> 00:14:17.670
Carbon, and Cocoa applications.

00:14:17.900 --> 00:14:24.940
It uses the Monte API to access and
decompress resource type structured data.

00:14:24.960 --> 00:14:28.960
Monte, which was announced at
last year's conference,

00:14:28.990 --> 00:14:33.640
has been updated to support Appleglot
3's features and requirements.

00:14:36.750 --> 00:14:40.120
But before we get into
the detail of Appleglot 3,

00:14:40.190 --> 00:14:44.590
let's talk about the concept
of incremental localization.

00:14:44.640 --> 00:14:46.290
What is it?

00:14:47.250 --> 00:14:50.500
When we talk about
incremental localization,

00:14:50.560 --> 00:14:58.170
we're talking about the reuse
of translations that have been

00:14:58.420 --> 00:14:59.290
used in a previous version
of a particular application.

00:14:59.860 --> 00:15:02.450
This assumes, of course,
that localizable elements in

00:15:02.450 --> 00:15:06.660
the previous version are exactly
the same in the current version.

00:15:08.030 --> 00:15:10.130
Nothing has changed.

00:15:13.800 --> 00:15:16.400
Let's take an example.

00:15:16.560 --> 00:15:21.580
Say I've developed Super Mega App 1.0.

00:15:21.670 --> 00:15:23.450
It's brand new.

00:15:23.560 --> 00:15:29.120
All the GUI are populated with
text strings which are in English.

00:15:31.170 --> 00:15:35.040
As we've already heard from Chris,
Mac OS X applications are

00:15:35.040 --> 00:15:37.080
inherently multilingual.

00:15:37.080 --> 00:15:40.310
They can support multiple
language translations.

00:15:41.470 --> 00:15:48.040
We can translate all the text strings
in version 1.0 into various languages.

00:15:48.070 --> 00:15:51.750
And we can enclose them within
the application framework.

00:15:55.130 --> 00:16:00.500
Now, I realize that SuperMegaApp,
I'd like to add some extra features.

00:16:00.590 --> 00:16:03.240
Now, not everything has changed.

00:16:03.360 --> 00:16:07.230
We would like to pull forward
automatically the localized elements that

00:16:07.610 --> 00:16:10.290
have existed in the previous version.

00:16:12.320 --> 00:16:17.390
This leaves us with just the work
of translating the changes that

00:16:17.390 --> 00:16:23.640
have occurred in version 2.0.

00:16:23.720 --> 00:16:27.150
This is the essence of
incremental localization.

00:16:29.760 --> 00:16:32.740
Some of you may be familiar with
previous versions of Appleglot,

00:16:32.790 --> 00:16:34.700
such as 2.4.

00:16:34.820 --> 00:16:37.540
Appleglot 3 is completely new.

00:16:37.550 --> 00:16:41.090
It has been designed and
written from the ground up.

00:16:41.280 --> 00:16:47.720
It is based on the
Monte architecture and technology.

00:16:48.140 --> 00:16:53.550
It supports a state machine
architecture and has a very

00:16:53.550 --> 00:16:57.940
powerful extensible plugin system.

00:16:58.010 --> 00:17:02.490
This is available to not just in-house
but also third-party developers.

00:17:06.310 --> 00:17:08.580
But rather than talking
about Appleglot 3,

00:17:08.600 --> 00:17:12.440
I'd like to hand this
presentation over to Mike Butler,

00:17:12.440 --> 00:17:17.460
who is the principal engineer
and developer for Appleglot.

00:17:21.400 --> 00:17:23.880
Thanks, Jack.

00:17:24.050 --> 00:17:24.320
OK.

00:17:24.430 --> 00:17:27.480
I'm going to talk to you
today about Appleglot 3.

00:17:27.530 --> 00:17:30.010
And the easiest way for me to
do that is to actually work

00:17:30.020 --> 00:17:33.020
through a couple of examples,
a couple of things you

00:17:33.020 --> 00:17:34.320
normally do with it.

00:17:34.380 --> 00:17:39.440
So some of the things you're going to
see as we work through these examples,

00:17:39.610 --> 00:17:41.680
we're going to create a new environment.

00:17:41.690 --> 00:17:44.300
And I'll explain a little
later what an environment is.

00:17:44.320 --> 00:17:47.950
But if you've used Appleglot 2 before,
you'll see that the environment

00:17:48.000 --> 00:17:49.160
is actually quite similar.

00:17:49.220 --> 00:17:50.800
It's only some small changes.

00:17:50.810 --> 00:17:52.660
And I'll point those out.

00:17:52.970 --> 00:17:57.700
We'll show you how Appleglot figures out
where to pull the right information from.

00:17:57.700 --> 00:18:01.540
We'll show you what we've done to
hopefully make it a little easier to use.

00:18:01.660 --> 00:18:04.770
For example, we know that you
typically using Appleglot,

00:18:04.770 --> 00:18:07.810
you're going to jump out into the finder,
jump back into Appleglot,

00:18:07.810 --> 00:18:10.180
jump into your own application
that you're localizing,

00:18:10.340 --> 00:18:12.560
maybe run a few tools,
come back into Appleglot.

00:18:12.630 --> 00:18:15.930
We're trying to make it all much easier,
flow much better.

00:18:17.110 --> 00:18:22.550
As Chris has explained,
OS X provides support for a

00:18:22.790 --> 00:18:26.000
number of different locales
all within the one package.

00:18:26.070 --> 00:18:28.740
So obviously,
Appleglot has to support this.

00:18:28.750 --> 00:18:33.340
We'll show you how it does
it and how seamless it is.

00:18:33.370 --> 00:18:36.150
We'll also take a look at
some of the support files that

00:18:36.150 --> 00:18:37.840
Appleglot uses and produces.

00:18:37.870 --> 00:18:40.880
And we'll show you what we've
done to hopefully make these

00:18:40.980 --> 00:18:45.700
more accessible to other users or
other tools and other processes.

00:18:46.170 --> 00:18:48.410
And finally,
we'll show you just incremental

00:18:48.410 --> 00:18:52.220
localization and how it'll
work with packaged apps,

00:18:52.220 --> 00:18:57.590
classic apps, funded apps, Cocoa, Carbon,
all the bits and pieces

00:18:57.600 --> 00:19:00.720
you're going to find on OS X.

00:19:00.810 --> 00:19:03.180
So I'm just going to go to demo now.

00:19:08.600 --> 00:19:18.200
[Transcript missing]

00:19:22.180 --> 00:19:25.340
I'm going to go and
create an environment.

00:19:25.350 --> 00:19:29.650
Now, Appleglot deals with a
large number of files.

00:19:29.660 --> 00:19:31.760
And most of these will
have very similar names.

00:19:31.770 --> 00:19:34.300
And they'll only be just different
versions of the same file.

00:19:34.390 --> 00:19:38.440
So we need to have a safe way of knowing
which file we want to pull information

00:19:38.580 --> 00:19:42.920
from so we do it right and safely.

00:19:43.010 --> 00:19:46.410
So I'll just close up that example there.

00:19:47.880 --> 00:19:50.030
We use what's called an environment.

00:19:50.170 --> 00:19:55.090
And basically,
it's a hierarchy of folders.

00:19:55.810 --> 00:19:59.040
Each folder in this hierarchy
has its own specific job.

00:19:59.130 --> 00:20:01.770
So when we put something in there,
we know that we can safely

00:20:02.130 --> 00:20:03.050
deal with it a certain way.

00:20:05.760 --> 00:20:09.480
So if I just open up
an environment there,

00:20:09.480 --> 00:20:14.080
I'll show you what it
looks like in Appleglot.

00:20:25.000 --> 00:20:32.500
[Transcript missing]

00:20:32.790 --> 00:20:35.980
To create an environment,
we'll just go up to the tool menu,

00:20:36.030 --> 00:20:38.320
choose Create Empty Environment,

00:20:39.230 --> 00:20:41.340
And we'll pick where we want it.

00:20:41.370 --> 00:20:49.850
So I'm just going to pick a new folder in
here and type in the name of our example.

00:20:54.300 --> 00:20:56.540
Now I'm going to tell Appleglot
to populate that with all

00:20:56.640 --> 00:20:58.060
the folders that we need.

00:20:58.090 --> 00:21:00.690
So if I go and look
at that in the finder,

00:21:02.100 --> 00:21:04.460
just the same place again.

00:21:04.470 --> 00:21:07.640
WC, example environment,
we'll see there's all the

00:21:07.760 --> 00:21:09.850
folders that is created.

00:21:09.850 --> 00:21:14.250
Now as I said, most of these will be
familiar to you from Apiglat2.

00:21:14.250 --> 00:21:16.590
Some are new,
like we have a temporary one

00:21:16.590 --> 00:21:19.390
and we have a translators
folder then to support Monty.

00:21:19.810 --> 00:21:23.740
But most of them as I said are
as you've seen with Apiglat2.

00:21:23.740 --> 00:21:29.010
So this is my first time around,
I have a brand new application.

00:21:29.010 --> 00:21:32.820
I need to produce a localised version.

00:21:32.820 --> 00:21:35.050
So what I'm going

00:21:35.760 --> 00:21:40.320
drop in those applications
that I want to localize.

00:21:40.420 --> 00:21:42.320
Simply drop them into
the new base folder.

00:21:42.320 --> 00:21:48.880
Now if I go and open that
environment with Appleglot,

00:21:51.900 --> 00:21:52.700
So it's selected already.

00:21:52.820 --> 00:21:54.540
Choose.

00:21:54.540 --> 00:21:55.660
OK.

00:21:55.690 --> 00:21:59.220
So you can see Appleglot here
is mimicking some of the folders

00:21:59.220 --> 00:22:00.860
that you-- in the finder there.

00:22:00.890 --> 00:22:03.360
So we have a new base, new loc, old base,
old loc.

00:22:03.360 --> 00:22:06.760
And anything that's in those folders
will show up here in these columns.

00:22:06.800 --> 00:22:09.760
So I true in disk copy
and mail into new base.

00:22:09.830 --> 00:22:12.570
So they show up here
in the new base column.

00:22:13.810 --> 00:22:18.940
Now, as Chris already mentioned,
we have support for multiple locales.

00:22:19.000 --> 00:22:23.160
So previously with Appleglot,
you would have just run Appleglot,

00:22:23.180 --> 00:22:25.460
put in your translations,
and whatever translations you put in,

00:22:25.480 --> 00:22:27.500
well,
that meant it was for that language.

00:22:27.550 --> 00:22:31.530
So if you did put in French translations,
we had a French version.

00:22:31.590 --> 00:22:34.740
This time around,
you need to tell Appleglot what

00:22:34.740 --> 00:22:36.730
locale you want to produce.

00:22:37.770 --> 00:22:41.880
So if you look at the title here,
for our example environment here,

00:22:42.000 --> 00:22:46.980
we have our base locale as English and
our target locale as French.

00:22:46.980 --> 00:22:49.140
These are just defaults
from my preferences.

00:22:49.140 --> 00:22:51.670
If I wanted to change them,
I just go up to the Tools menu,

00:22:51.780 --> 00:22:57.200
choose Set Base Target Locales,
and I just pick a few.

00:22:57.200 --> 00:22:59.560
I pick whatever I needed from here.

00:22:59.560 --> 00:23:00.600
There's only a few here.

00:23:00.600 --> 00:23:02.460
This is just in this preview release.

00:23:02.460 --> 00:23:06.360
As we go forward,
we put in the rest of the locales.

00:23:06.690 --> 00:23:09.760
So I'm just going to
stick with French here.

00:23:10.170 --> 00:23:13.770
What I'm going to do is I'm
going to choose this copy here,

00:23:13.770 --> 00:23:14.620
and I want to process that.

00:23:14.750 --> 00:23:16.860
Now, there's a number of
files in the environment,

00:23:16.940 --> 00:23:21.020
so I just want to tell Apple that
I just want to localize this copy.

00:23:21.020 --> 00:23:25.240
So I just tick here, and as you can see,
it tells us that one item

00:23:25.260 --> 00:23:27.500
is selected for processing.

00:23:28.920 --> 00:23:32.760
Okay, so I'm just going to go ahead
and go to the Actions menu and

00:23:32.760 --> 00:23:33.900
choose Generate Glossaries.

00:23:33.900 --> 00:23:36.840
And Appleglot is going to start working.

00:23:36.840 --> 00:23:38.640
So what Appleglot is doing now,
it's running through all

00:23:38.640 --> 00:23:41.890
the different resources,
all the data that it can find,

00:23:41.890 --> 00:23:46.880
looking to see if it can find any textual
information or localizable information,

00:23:47.070 --> 00:23:51.100
pulling it out, and it's going to store
it in one of two places.

00:23:51.100 --> 00:23:55.250
So if we have a translation available,
then it will get stored in what's

00:23:55.350 --> 00:23:57.160
called an application dictionary.

00:23:57.250 --> 00:24:01.190
If we have no translations available,
then the information will be stored

00:24:01.190 --> 00:24:03.540
in what's called a work glossary.

00:24:03.590 --> 00:24:06.060
This is our first time through,
so we shouldn't have any

00:24:06.130 --> 00:24:08.810
translations available,
so everything should just

00:24:08.930 --> 00:24:10.880
go into the work glossary.

00:24:11.470 --> 00:24:16.900
Okay, this is going to take about
another 30 or 40 seconds.

00:24:17.550 --> 00:24:22.440
So once we have our work glossary,
we can start working with that and

00:24:22.440 --> 00:24:24.400
putting it in our translations.

00:24:24.400 --> 00:24:30.510
Which should be any minute today.

00:24:34.080 --> 00:24:36.050
So at the moment,
as you can see from the progress there,

00:24:36.050 --> 00:24:38.940
what it's doing is it's reinserting
information into Nib files.

00:24:39.070 --> 00:24:45.300
So it's at this Nib file stage
and putting information back in.

00:24:45.380 --> 00:24:49.470
And as we've had no translations,
this might seem strange,

00:24:49.470 --> 00:24:52.690
but what's really happening is even
though we have no translations,

00:24:52.690 --> 00:24:55.180
we've still produced a localized version.

00:24:55.260 --> 00:24:58.020
So this is still the
double clickable app here.

00:24:58.040 --> 00:24:59.990
If we had translations,
what would happen is the

00:25:00.030 --> 00:25:01.120
translations would be put in.

00:25:01.120 --> 00:25:02.680
It'd still be a double clickable app.

00:25:02.700 --> 00:25:07.790
When you ran it, you'd get your partially
localized application.

00:25:08.940 --> 00:25:12.470
So if we just take a look at over here,
you can see that a work last

00:25:12.510 --> 00:25:15.240
year was produced for this copy.

00:25:15.280 --> 00:25:17.630
And we'll just have a look at that.

00:25:19.940 --> 00:25:23.050
Now I know if you've
worked with Appleglot 2,

00:25:23.240 --> 00:25:26.680
you're used to much
simpler work glossaries.

00:25:26.790 --> 00:25:31.300
So this actually would look
quite daunting or complicated.

00:25:31.430 --> 00:25:35.790
But if you also notice, it's an XML file.

00:25:36.300 --> 00:25:41.340
So this opens up work glossaries to
numerous other tools that can read XML.

00:25:41.530 --> 00:25:44.140
Or if you want to write your own tool,
you don't have to try and figure

00:25:44.140 --> 00:25:45.500
out what Appleglot's format is.

00:25:45.560 --> 00:25:47.030
You don't have to write
a parser for that.

00:25:47.250 --> 00:25:54.060
You just use your own XML parser
that comes with the system,

00:25:54.060 --> 00:25:57.380
and you gain instant access to the
work glossaries or any other files

00:25:57.380 --> 00:25:57.380
that Appleglot produces in XML.

00:25:58.120 --> 00:26:01.930
Also, being XML,
you can take advantage of

00:26:02.010 --> 00:26:03.760
XML tools that are out there.

00:26:03.780 --> 00:26:07.000
And as we go forward,
XML will become much more popular.

00:26:07.170 --> 00:26:10.610
As it becomes more mature,
it will find its way into

00:26:10.670 --> 00:26:12.870
all types of applications.

00:26:13.000 --> 00:26:18.980
So your favorite text editor
will eventually have XML support.

00:26:20.070 --> 00:26:24.900
So this text editor here
actually has some XML support.

00:26:24.920 --> 00:26:29.240
I can go in and turn on what
it calls Syntax Styling.

00:26:34.630 --> 00:26:42.480
Now if we look at that XML file again,
while it's still quite complicated,

00:26:42.510 --> 00:26:43.360
it stands out more.

00:26:43.470 --> 00:26:45.840
The information you want stands out more.

00:26:45.860 --> 00:26:51.680
And you can tell it what way you
want the information to be displayed.

00:26:52.560 --> 00:26:55.590
As we go forward,
you may produce something yourself

00:26:55.720 --> 00:26:58.860
which will translate this XML into HTML.

00:26:58.980 --> 00:27:04.820
You can view it that way and
maybe use backend scripts to

00:27:04.820 --> 00:27:07.470
populate guesses or whatever.

00:27:08.200 --> 00:27:13.380
So if we take a look
at this work glossary,

00:27:13.380 --> 00:27:16.320
if you're used to Appleglot 2,
you'll be used to all the

00:27:16.570 --> 00:27:20.700
information from one file
goes into one work glossary.

00:27:20.710 --> 00:27:21.890
Now, we have a packaged app.

00:27:21.900 --> 00:27:25.570
We have loads of different
files there inside the package.

00:27:25.680 --> 00:27:28.880
So instead of having a separate
work glossary for each file,

00:27:28.890 --> 00:27:31.790
we have all of the appropriate files,
all of the information from

00:27:31.790 --> 00:27:34.660
all of the different files goes
into the one work glossary.

00:27:34.670 --> 00:27:37.300
This makes it easier
for you to work with.

00:27:38.130 --> 00:27:41.820
So if you can see here,
we have all our Info.plist information

00:27:41.820 --> 00:27:42.640
has gone in here.

00:27:42.930 --> 00:27:44.820
So we have the bundle name,
so we can change the

00:27:44.820 --> 00:27:46.300
name of the application.

00:27:46.330 --> 00:27:48.480
We also have some nibs here.

00:27:48.530 --> 00:27:52.910
If you scroll down through,
you can see more nib files.

00:27:54.550 --> 00:27:59.200
So what I'm going to do is I'm going
to change or enter some translations.

00:27:59.320 --> 00:28:03.100
So if I pick a couple of easy ones,
we'll take the name of

00:28:03.100 --> 00:28:05.690
the application itself.

00:28:07.020 --> 00:28:09.500
So I'm not very good at French,
unfortunately.

00:28:09.580 --> 00:28:13.100
So I'm just going to cheat and call it.

00:28:16.380 --> 00:28:19.780
Follow the-- the funny
was always so easy.

00:28:19.800 --> 00:28:24.220
OK, and one of the other-- like here,
the text that I'm entering that

00:28:24.220 --> 00:28:26.900
I want to have-- the translated
text that I'm entering is

00:28:27.010 --> 00:28:27.830
coming up in a different color.

00:28:27.930 --> 00:28:31.360
It's a visual cue that I'm
typing in the right place.

00:28:31.360 --> 00:28:34.970
You can do some much more strict things.

00:28:35.050 --> 00:28:38.370
I believe a future version of this
application will not let you type inside

00:28:38.370 --> 00:28:41.510
tags so that you can't damage the format.

00:28:42.660 --> 00:28:44.750
Okay, let me pick something else.

00:28:44.810 --> 00:28:47.050
Say, let me look for a window.

00:28:47.280 --> 00:28:49.710
Something that'll pop up in the menu bar.

00:28:49.840 --> 00:28:54.500
Okay, so again, cheat,

00:28:55.980 --> 00:29:02.240
So all I'm going to do is save
that and go back into Appleglot.

00:29:02.240 --> 00:29:06.260
Now if I go up to the Actions,
I can produce a finished version.

00:29:06.730 --> 00:29:09.030
And it's very similar
to the Generate classes,

00:29:09.160 --> 00:29:12.970
but this time it's going to go through,
turn away.

00:29:13.900 --> 00:29:15.380
And it's going to do
the same stuff again.

00:29:15.490 --> 00:29:18.400
It's going to try and pull out
all the information it can,

00:29:18.400 --> 00:29:22.000
look, see if it has translations for it,
reinsert it, whatever.

00:29:22.050 --> 00:29:27.080
Except this time around,
we're going to find two translations.

00:29:27.110 --> 00:29:29.840
So there's going to be-- the
name-- the application name

00:29:29.840 --> 00:29:33.680
is going to have fr.discopy.

00:29:33.680 --> 00:29:37.150
And the window title will
come up as-- they'll have a

00:29:37.150 --> 00:29:39.110
translation for our window.

00:29:40.760 --> 00:29:43.810
So this time around,
not everything will appear

00:29:43.810 --> 00:29:44.940
in the work glossary.

00:29:44.940 --> 00:29:47.500
Only the things that need translations
go into the work glossary.

00:29:47.560 --> 00:29:52.390
So the two files that we've-- or the two
translations that we've just entered,

00:29:52.570 --> 00:29:55.090
they'll go into the
application dictionary.

00:29:58.030 --> 00:30:03.300
So again, we're reinserting information
into the Nib files here.

00:30:03.300 --> 00:30:05.380
It's just finishing up.

00:30:06.770 --> 00:30:09.710
So when this is finished,
what we can do is we can

00:30:09.710 --> 00:30:14.500
actually go and have a look and
see if our translations worked.

00:30:16.630 --> 00:30:18.060
Okay, so it's done.

00:30:18.140 --> 00:30:23.060
So what we can do now is we can
go to our system preferences.

00:30:27.430 --> 00:30:30.840
Wait for it.

00:30:30.890 --> 00:30:34.150
And it's over on this
window machine over there.

00:30:34.170 --> 00:30:35.140
OK.

00:30:35.220 --> 00:30:37.950
So now if I go to International.

00:30:40.880 --> 00:30:43.860
choose French as my main language.

00:30:43.860 --> 00:30:45.590
Click that.

00:30:45.620 --> 00:30:49.900
With the wonders of Mac OS N technology,
I should be able to run this

00:30:49.910 --> 00:30:55.070
copy here and see it in French,
or at least my version of French.

00:30:59.860 --> 00:31:00.880
So there you have it.

00:31:00.880 --> 00:31:02.420
This copy of the name was translated.

00:31:02.420 --> 00:31:10.270
So as you noticed,
the information for the name of the

00:31:10.360 --> 00:31:13.300
application came from the strings--
the Info.plist strings file.

00:31:13.300 --> 00:31:18.260
And the name for the window came
from a completely separate nib file.

00:31:18.290 --> 00:31:20.560
So as a translator, I wouldn't care.

00:31:20.620 --> 00:31:22.220
It would all just be in the work class.

00:31:22.220 --> 00:31:24.860
I'd do whatever I have to do,
and it would all just work.

00:31:24.860 --> 00:31:28.150
The whole point of this version of
Appleglot is that it's supposed to

00:31:28.200 --> 00:31:31.860
hide any complexities of OS X from you.

00:31:31.860 --> 00:31:35.060
OK, so I'll just quit that.

00:31:36.190 --> 00:31:40.140
So now we'll take a look at a
slightly more complicated example.

00:31:40.140 --> 00:31:47.870
So if I open up another environment,
which has a few more files in it,

00:31:52.390 --> 00:31:55.950
Okay,
so I have a whole bunch of files in here.

00:31:55.950 --> 00:31:59.090
And I see I have new disk copy.

00:31:59.300 --> 00:32:03.300
Okay, so I know I've just done disk copy.

00:32:03.340 --> 00:32:07.360
So what I want to do is not have
to go reinsert and reenter those

00:32:07.360 --> 00:32:08.840
translations that I've just done.

00:32:08.970 --> 00:32:12.130
It takes too long to
enter those two strings.

00:32:12.600 --> 00:32:17.580
Okay, so what I'm going to do is
I have my original versions here,

00:32:17.580 --> 00:32:23.370
but I'm just going to copy over a whole
bunch of them as well at the same time.

00:32:25.220 --> 00:32:30.540
So this is Olock,
so it goes in the Olock folder.

00:32:30.600 --> 00:32:34.960
So these are previous localized
versions of certain applications.

00:32:35.030 --> 00:32:37.770
Now if I look at my old base.

00:32:39.340 --> 00:32:42.780
So we're going to copy all these
over to the old base folder.

00:32:42.780 --> 00:32:46.140
And these are the old original
versions of the applications.

00:32:47.090 --> 00:32:54.100
Now, if I look at that environment again,
now if I go back into Appleglot,

00:32:54.860 --> 00:32:59.170
We should see there,
it's after automatically matching up all

00:32:59.170 --> 00:33:01.580
those files that I'm after putting in.

00:33:03.530 --> 00:33:06.690
So it knows that if it goes here,
it can find the previous

00:33:06.690 --> 00:33:07.920
old address book.

00:33:07.920 --> 00:33:10.140
And it knows if it goes here,
it can find the previous old

00:33:10.290 --> 00:33:12.670
localized version of the address book.

00:33:13.940 --> 00:33:19.060
So what we wanted to do with Appleglot,
we wanted to make it as

00:33:19.060 --> 00:33:21.380
extensible as possible.

00:33:21.390 --> 00:33:22.880
Why?

00:33:22.880 --> 00:33:23.320
Did somebody say?

00:33:23.460 --> 00:33:24.770
Sorry.

00:33:25.860 --> 00:33:29.750
So what we did was we,
from the ground up,

00:33:29.850 --> 00:33:32.560
we made it a plugin-based architecture.

00:33:32.590 --> 00:33:35.320
And we didn't just leave
one section of a B plugin.

00:33:35.320 --> 00:33:38.270
We tried to bring that philosophy
throughout the whole app.

00:33:38.490 --> 00:33:43.850
So you can write plugins that will
provide services to Appleglot itself.

00:33:43.880 --> 00:33:48.640
You can provide plugins that can
provide services to other plugins.

00:33:48.670 --> 00:33:52.930
You can write plugins that can
process data that Appleglot

00:33:52.990 --> 00:33:55.090
doesn't already process.

00:33:55.960 --> 00:33:58.080
And you can write plugins
that just sit there,

00:33:58.300 --> 00:34:02.060
watch all the data flying by, and say,
record information or maybe change

00:34:02.070 --> 00:34:04.130
the behavior of certain plugins.

00:34:04.550 --> 00:34:10.340
So the benefits of this are the
general benefits you get from plugins.

00:34:10.340 --> 00:34:12.740
From our point of view,
we have quicker update time.

00:34:12.740 --> 00:34:16.320
We don't have to turn Appleglot
again if something comes up,

00:34:16.470 --> 00:34:18.500
if a feature comes up
that we hadn't thought of.

00:34:18.640 --> 00:34:21.700
We maybe just do a plugin
and release that plugin.

00:34:21.700 --> 00:34:23.320
It's much simpler.

00:34:23.800 --> 00:34:27.140
For yourselves,
if a process that you have that

00:34:27.260 --> 00:34:30.730
doesn't quite work with Appleglot
or Appleglot doesn't support it,

00:34:31.080 --> 00:34:34.270
then there's the ability there
for you to write plugins.

00:34:34.320 --> 00:34:38.270
If you've thought of writing plugins,
if you've come up with something

00:34:38.270 --> 00:34:42.470
that you could write a plugin for,
then maybe somebody else could use it.

00:34:42.680 --> 00:34:45.780
Maybe you could give it to them,
or maybe they've already done it,

00:34:45.780 --> 00:34:47.620
so you can just take it from them.

00:34:49.960 --> 00:34:54.580
Okay, so just a couple of examples of
the kind of plugins that we wrote.

00:34:54.800 --> 00:34:58.860
The first one is the NibTool plugin,
and you've actually seen that

00:34:58.990 --> 00:35:01.260
without really noticing it.

00:35:01.260 --> 00:35:04.710
The NibTool plugin basically allows
Appleglot to process nib files,

00:35:04.710 --> 00:35:06.720
which is what I did earlier.

00:35:06.720 --> 00:35:10.790
And it's a good example of a plugin
because we were able to leverage from

00:35:10.960 --> 00:35:14.300
work that was done by other people.

00:35:14.300 --> 00:35:18.020
The interface builder team
had already written the tool,

00:35:18.020 --> 00:35:21.770
the command line tool,
the Unix command line tool,

00:35:21.800 --> 00:35:24.200
and that was able to go take a nib file

00:35:24.270 --> 00:35:25.140
and the rest of the team.

00:35:54.200 --> 00:35:57.800
- NibTool, do your wonder stuff there.

00:35:57.800 --> 00:36:01.080
It puts out all the information,
and AppleGot goes along as normal.

00:36:01.110 --> 00:36:03.460
And all the information still
ends up in the same place,

00:36:03.500 --> 00:36:06.250
still ends up in the work glossary,
the glossary that you've seen

00:36:06.250 --> 00:36:08.280
there and you normally work with.

00:36:08.330 --> 00:36:14.000
So if you're just a translator,
everything that you want just

00:36:14.090 --> 00:36:15.660
appears in the one place.

00:36:15.660 --> 00:36:18.620
You don't have to worry about how
you would deal with nib files.

00:36:18.620 --> 00:36:22.310
You don't have to worry about how
you would deal with classic apps.

00:36:23.340 --> 00:36:28.200
Another kind of plugin
that we used was ResStats.

00:36:28.240 --> 00:36:34.680
When we were developing Appleglot,
obviously we wanted to make

00:36:34.810 --> 00:36:39.200
sure that we were hitting every
resource type we should be.

00:36:39.300 --> 00:36:42.630
We also wanted to know if we were
pulling out all the information

00:36:42.950 --> 00:36:45.200
out of those data types.

00:36:45.200 --> 00:36:47.200
We wanted to know how
long it was taking us.

00:36:47.200 --> 00:36:49.290
So we wrote a little plugin,
it's called ResStats,

00:36:49.290 --> 00:36:52.200
and it just sits there and watches
all the information fly by.

00:36:52.200 --> 00:36:55.200
And it just takes a few notes.

00:36:55.240 --> 00:36:59.290
So at the end, then,
it just checks out a file and...

00:36:59.720 --> 00:37:03.940
Basically, it just tells you, right,
you had 10 resources in there,

00:37:03.960 --> 00:37:05.020
and they were blah.

00:37:05.300 --> 00:37:10.990
And of those 10,
only two of them produced any

00:37:10.990 --> 00:37:18.150
localizable information and entered
10 strings into the work glossary.

00:37:18.300 --> 00:37:20.160
So you're able to see one
of the strange things,

00:37:20.160 --> 00:37:23.490
or one of the enlightening things,
I suppose, was that we saw that maybe

00:37:23.530 --> 00:37:27.630
just 10% of the resource types
that we were supporting had any

00:37:27.640 --> 00:37:28.960
localizable information in it.

00:37:29.050 --> 00:37:32.980
So 10% produced 90% of the
information that we were localizing.

00:37:32.980 --> 00:37:36.040
So just by being able to produce a
small little plugin that sat there,

00:37:36.040 --> 00:37:38.020
watched things go by,
we were able to find out

00:37:38.020 --> 00:37:39.480
that sort of information.

00:37:39.500 --> 00:37:43.140
And we were able to see that, yeah,
I'm looking at it in Resourcer here.

00:37:43.140 --> 00:37:44.320
I can see 10 resources.

00:37:44.320 --> 00:37:46.720
Yeah, Appleglot worked with 10 resources.

00:37:46.880 --> 00:37:48.400
And I can see that there
was 10 strings in here.

00:37:48.400 --> 00:37:50.370
Yeah, grand,
Appleglot worked with 10 strings.

00:37:50.380 --> 00:37:52.190
So it was very handy for us.

00:37:52.340 --> 00:37:54.430
So in a similar situation,
if you needed to check things,

00:37:54.440 --> 00:37:56.710
or if you needed to add
something or watch something,

00:37:56.710 --> 00:37:58.150
you can write plugins to do that.

00:37:59.450 --> 00:38:01.110
At this point,
I was supposed to hand over to Kristian,

00:38:01.160 --> 00:38:01.790
but we'll see.

00:38:01.890 --> 00:38:05.900
So just before Kristian does come up,
I'll just tell you that Monte is a

00:38:05.900 --> 00:38:09.340
core technology that Appleglot uses.

00:38:09.480 --> 00:38:14.240
It's what allows us to access resources,
whether in the data file or in the

00:38:14.330 --> 00:38:16.400
data fork or in the resource fork.

00:38:16.400 --> 00:38:19.020
And it lets us do that pretty seamlessly.

00:38:19.020 --> 00:38:23.520
So I'd just like to welcome
Kristian Walsh on stage to

00:38:23.520 --> 00:38:23.520
talk to you about Monte.

00:38:35.570 --> 00:38:38.920
So Monte is a technology that
we in Apple developed to deal

00:38:38.920 --> 00:38:44.440
with structured binary data
types or resources to you and me.

00:38:44.440 --> 00:38:48.840
And Appleglot uses Monte for its
Carbon and Classic resource support.

00:38:48.840 --> 00:38:52.430
But one of the best things about Monte is
that we get full Unicode support.

00:38:52.600 --> 00:38:54.880
Monte is entirely Unicode based.

00:38:54.960 --> 00:38:57.220
So all the editing,
all the extraction of text,

00:38:57.230 --> 00:38:58.840
it comes out of Monte in Unicode.

00:38:58.870 --> 00:39:01.820
When we want to make a change,
it goes into Monte in Unicode.

00:39:01.830 --> 00:39:04.650
Monte handles the conversion
of that text from Unicode to

00:39:04.650 --> 00:39:06.200
whatever the native encoding is.

00:39:06.480 --> 00:39:10.180
So for Classic applications,
when we ask for some text

00:39:10.180 --> 00:39:13.210
to be set to Japanese,
Monte will handle the conversion from

00:39:13.240 --> 00:39:17.100
that Japanese text to Shift JIS encoding
or whatever the Mac is using.

00:39:17.100 --> 00:39:19.960
As part of this,
we also have data validation.

00:39:20.040 --> 00:39:22.720
So that if we took the same
Japanese text and tried to

00:39:22.720 --> 00:39:25.880
set it into a French resource,
we get an error saying that, well,

00:39:25.880 --> 00:39:27.820
you've said that this resource is French.

00:39:27.860 --> 00:39:30.060
That cannot encode
this particular stream,

00:39:30.160 --> 00:39:31.700
so I'm not going to let you.

00:39:31.720 --> 00:39:34.610
And doing things like this
prevents your editing tools from

00:39:34.660 --> 00:39:38.970
corrupting the data you're editing,
which is an occasional cause of these

00:39:39.150 --> 00:39:43.530
bugs that it takes weeks to track down.

00:39:43.690 --> 00:39:46.740
Also, we tried to make Monte extensible.

00:39:46.770 --> 00:39:50.170
Anyone who's had to deal with
frameworks and class libraries,

00:39:50.330 --> 00:39:52.080
particularly power planters
is the most popular,

00:39:52.080 --> 00:39:55.640
will find that they keep having
to rev the PPob translator.

00:39:55.660 --> 00:39:58.600
Every time a new subtype comes along,
you've got to rev the

00:39:58.630 --> 00:40:01.280
whole PPob translator,
which is quite big now.

00:40:01.320 --> 00:40:04.540
But with Monte,
we've designed a system whereby we

00:40:04.540 --> 00:40:08.470
just have to add the extra pieces,
just add what's changed,

00:40:08.470 --> 00:40:11.920
and we can leverage on the
existing stuff we've done.

00:40:12.140 --> 00:40:14.770
So it makes it very quick,
very easy to do this.

00:40:14.770 --> 00:40:17.000
It also makes it easy
to control the changes.

00:40:17.020 --> 00:40:20.100
But if you have a lot of templates,
and you still need them

00:40:20.100 --> 00:40:23.200
for your own process,
we have a template conversion tool,

00:40:23.200 --> 00:40:26.950
which will automatically convert the
ResEdit or Resourcer templates into

00:40:26.950 --> 00:40:30.680
Monte translators suitable for Appleglot,
which is a great starting point

00:40:30.730 --> 00:40:33.580
for you to get advantage of all the
features that Monte will offer you.

00:40:35.110 --> 00:40:38.820
Okay, so I'm going to ask Jack Sampson
to come up and wrap up the session.

00:40:38.820 --> 00:40:48.200
Thanks, Kristian.

00:40:58.730 --> 00:41:03.600
Okay, we got there.

00:41:03.990 --> 00:41:08.600
You have just seen, yes,
Apple's very latest localization

00:41:08.600 --> 00:41:11.600
tools and technology in action.

00:41:11.600 --> 00:41:15.300
You've seen the power of Appleglot 3.

00:41:17.880 --> 00:41:22.430
and yes,
the very powerful Monte technology.

00:41:22.560 --> 00:41:24.900
And all running on Mac OS X.

00:41:25.630 --> 00:41:28.760
We've gone through incremental
localization of Classic,

00:41:29.130 --> 00:41:29.930
Carbon, Cocoa.

00:41:29.990 --> 00:41:31.450
We've leveraged previous translations.

00:41:31.540 --> 00:41:36.310
We can give better efficiency
and accuracy of localization.

00:41:37.350 --> 00:41:40.260
have been examples of the
scalability of Appleglot 3 with

00:41:40.260 --> 00:41:42.300
its extensive plugin technology.

00:41:42.300 --> 00:41:48.110
Mike has gone through the NibTool
plugin and the ResStats plugin.

00:41:48.790 --> 00:41:53.850
All the files that Appleglot uses are
in XML format and have the capability

00:41:53.850 --> 00:41:58.100
going forward even for XSL format.

00:41:59.010 --> 00:42:02.660
You've seen the Monte translator,
which we've been able to update

00:42:02.880 --> 00:42:07.340
quite easily using the PPOD resource.

00:42:08.660 --> 00:42:12.900
Now that we know what Appleglot 3 is,
or does,

00:42:12.940 --> 00:42:17.900
I'd like to take some time to talk
about what Appleglot 3 is not.

00:42:18.030 --> 00:42:21.900
Appleglot 3 is not a
machine translation tool.

00:42:21.990 --> 00:42:27.100
Neither does it support document
localization or multimedia localization.

00:42:27.170 --> 00:42:30.900
If you're so inclined,
please feel free to write a plugin

00:42:30.900 --> 00:42:34.550
which will interface with Appleglot
3 so that it can use already

00:42:34.570 --> 00:42:37.930
well-established translation mechanisms.

00:42:38.070 --> 00:42:41.860
At this venture, I'd like to hand the
presentation back to Xavier,

00:42:41.970 --> 00:42:45.780
who will address the
very burning question,

00:42:45.880 --> 00:42:49.000
where can we get Appleglot 3?

00:42:49.000 --> 00:42:49.000
Xavier.

00:42:57.070 --> 00:42:59.100
Okay, just a quick wrap up.

00:42:59.160 --> 00:43:01.840
I'd like to remind you
that with Mac OS X,

00:43:01.920 --> 00:43:03.960
we're shipping with several languages.

00:43:03.960 --> 00:43:06.600
As Avi mentioned in his
presentation as well,

00:43:06.720 --> 00:43:08.820
we just released a new
version for traditional,

00:43:08.820 --> 00:43:11.060
simplified Chinese and the
rest of the European languages.

00:43:11.060 --> 00:43:15.470
One out of two Macintoshes
are sold outside of the U.S.

00:43:15.470 --> 00:43:18.030
So for you as a developer,
it's very important as well

00:43:18.080 --> 00:43:19.800
to localize your application.

00:43:20.400 --> 00:43:22.740
So of course,
French is one of these languages,

00:43:22.740 --> 00:43:24.960
but don't forget Japan and China,
who are like, you know,

00:43:24.960 --> 00:43:27.160
main markets now where
things are growing very fast.

00:43:28.480 --> 00:43:31.470
We showed you in this presentation
that actually now we have the tools

00:43:31.560 --> 00:43:35.330
for third parties for you to have
and localize your application,

00:43:35.430 --> 00:43:38.640
support all these languages,
support application bundle,

00:43:38.640 --> 00:43:42.380
and actually support whatever
needs you have as a third party.

00:43:42.400 --> 00:43:44.880
So we saw that Monte is
very powerful because now,

00:43:45.010 --> 00:43:48.000
you know, it was a nightmare to
translate before with like,

00:43:48.000 --> 00:43:51.360
you know, resourcer or things like that,
things like PPOBs.

00:43:51.410 --> 00:43:54.460
Well, with Monte,
you're going to be able to actually

00:43:54.460 --> 00:43:56.400
write your own defined templates.

00:43:56.400 --> 00:43:59.260
And Appleglot will take, like, you know,
advantage of all the plugins

00:43:59.260 --> 00:44:00.340
you'll be able to write.

00:44:00.420 --> 00:44:02.880
So I think I'm very happy about
the work that Jack's group

00:44:02.880 --> 00:44:04.400
has been doing this last year.

00:44:04.400 --> 00:44:09.400
It was very difficult to support many
platforms and many types of objects.

00:44:09.500 --> 00:44:13.260
And believe me, it's very great to see
Appleglot 3 in action.

00:44:13.520 --> 00:44:18.320
So when do I get Appleglot 3 and Monte?

00:44:18.880 --> 00:44:19.230
Soon.

00:44:19.400 --> 00:44:20.290
You'll get it soon.

00:44:20.550 --> 00:44:24.400
And actually, we hope to post it on the
web probably next month.

00:44:24.450 --> 00:44:25.400
Maybe before that.

00:44:25.400 --> 00:44:28.600
But this is something that you'll
be able to download directly from

00:44:28.600 --> 00:44:32.400
our website of developer.apple.com
in the international web page.

00:44:32.470 --> 00:44:34.400
We have already posted
there some glossaries.

00:44:34.400 --> 00:44:36.400
Some of the developers have
been asking about that.

00:44:36.400 --> 00:44:40.710
Right now, we have support for French,
Italian, Spanish, German, and English,

00:44:40.820 --> 00:44:41.400
of course.

00:44:41.440 --> 00:44:44.400
We'll be adding
Japanese probably next week.

00:44:44.400 --> 00:44:47.690
And we hope to have, of course,
simplified traditional Chinese,

00:44:47.690 --> 00:44:49.400
Korean in the upcoming month.

00:44:50.430 --> 00:44:55.440
So please, try to download the Monte SDK,
try to get your hands on Appleglot 3,

00:44:55.550 --> 00:44:57.530
and of course,
try to write as many plugins

00:44:57.530 --> 00:45:01.600
as you want to integrate in
your localization process.

00:45:02.390 --> 00:45:05.260
Should you have any questions,
please don't hesitate to

00:45:05.340 --> 00:45:07.300
contact me at xavier@apple.com.

00:45:07.310 --> 00:45:10.170
We're more than happy to
show you the powerful Monte.

00:45:10.350 --> 00:45:12.620
If you need to get your hands
on VSDK and you cannot find it,

00:45:12.740 --> 00:45:14.680
please send me an email.