WEBVTT

00:00:07.110 --> 00:00:07.950
Okay, welcome back.

00:00:08.110 --> 00:00:11.180
The fewer, the heartier,
the people without lives or families

00:00:11.180 --> 00:00:12.870
to spend Memorial Day weekend with.

00:00:12.940 --> 00:00:18.000
This is part two of our
AppleScript Festival.

00:00:18.000 --> 00:00:20.000
This is
Building AppleScript Applications.

00:00:20.000 --> 00:00:22.330
I'm Chris Espinosa,
the manager of the Components

00:00:22.330 --> 00:00:25.510
and Scripting Group,
and we're going to take you through

00:00:25.510 --> 00:00:29.710
some of the particular issues in
implementing your Mac OS X applications.

00:00:30.000 --> 00:00:32.320
Some on just porting
the application over,

00:00:32.320 --> 00:00:37.370
some on taking advantage of new
features and idiosyncrasies of Mac OS X.

00:00:37.380 --> 00:00:39.360
It's a real nuts and bolts coding.

00:00:39.360 --> 00:00:41.680
I'm going to spend a lot
of time in ProjectBuilder,

00:00:41.680 --> 00:00:43.460
going to spend a lot of time in C code.

00:00:43.460 --> 00:00:46.580
It will be Cocoa-free.

00:00:46.580 --> 00:00:48.260
So, I...

00:00:53.400 --> 00:00:55.420
Yeah, that always gets a mixed response.

00:00:55.500 --> 00:01:01.140
What you'll learn is how to
port your scriptable apps to 10,

00:01:01.140 --> 00:01:02.750
which is basically carbonized.

00:01:02.820 --> 00:01:04.620
There's really not a lot more than that.

00:01:04.770 --> 00:01:07.030
A couple of special issues.

00:01:07.040 --> 00:01:11.250
What to do about the FS spec problem,
which you may not have run into yet,

00:01:11.390 --> 00:01:12.980
but as soon as you do, it will be tragic.

00:01:12.980 --> 00:01:17.180
How to deal with new
Mac OS X constructs like Sheets.

00:01:17.180 --> 00:01:20.630
I thank Mark Aldred for
bringing up both of these to us.

00:01:20.760 --> 00:01:22.780
He was the lone voice crying
in the wilderness on the

00:01:22.790 --> 00:01:24.400
Mac OS X implementers list.

00:01:24.500 --> 00:01:26.070
What about Sheets?

00:01:26.440 --> 00:01:27.810
What about FS specs?

00:01:27.950 --> 00:01:31.510
And we were so busy porting it to
Mac OS X and getting the product out that

00:01:31.510 --> 00:01:35.600
we didn't really get together and say,
you know, he's right.

00:01:35.710 --> 00:01:38.930
This is a problem until getting
ready for this presentation.

00:01:38.940 --> 00:01:40.420
So we've got some fixes.

00:01:40.420 --> 00:01:44.420
And how to debug scriptable
applications and scripts.

00:01:44.600 --> 00:01:49.840
One of the greatest losses that people
feel in working on... I want to go

00:01:49.860 --> 00:01:51.120
see what they're doing over there.

00:01:51.120 --> 00:01:52.320
They're having a hell of a time.

00:01:52.520 --> 00:01:54.530
Maybe they're giving away T-shirts.

00:01:54.540 --> 00:01:58.760
One of the greatest losses people feel
in moving to Mac OS X as a development

00:01:58.810 --> 00:02:03.360
environment is the loss of maxbug and
all of those great decommands that help

00:02:03.360 --> 00:02:04.900
you know what's going on in your system.

00:02:04.900 --> 00:02:07.250
Well,
we're going to be showing you how to make

00:02:07.300 --> 00:02:09.730
up some of that loss in this session.

00:02:11.350 --> 00:02:13.780
So let's jump right into it.

00:02:14.130 --> 00:02:15.440
You've got source code.

00:02:15.460 --> 00:02:16.880
It's in ProjectBuilder.

00:02:16.920 --> 00:02:18.470
You want to make it scriptable.

00:02:18.570 --> 00:02:19.270
How do you do it?

00:02:19.550 --> 00:02:20.540
It's really very simple.

00:02:20.540 --> 00:02:22.840
If we could have demo one up.

00:02:27.430 --> 00:02:33.780
This is our old friend, SimpleText,
which, as you saw in the last session,

00:02:33.950 --> 00:02:35.910
has some scripting capabilities.

00:02:36.030 --> 00:02:39.070
It's got Apple event handlers in it,
and it's got an ability

00:02:39.250 --> 00:02:43.130
to execute Apple scripts,
but it's not scriptable per se.

00:02:43.140 --> 00:02:45.730
Well, we can fix that.

00:02:53.430 --> 00:02:56.360
So if I want to take simple
text and make it scriptable,

00:02:56.360 --> 00:02:58.620
it's a simple matter of adding a file.

00:02:58.620 --> 00:03:02.170
And yes, we do want to copy it in
the new groups folder.

00:03:05.200 --> 00:03:09.760
So we add a terminology file,
and the terminology file is our AETE,

00:03:09.760 --> 00:03:13.100
as we know it and love it.

00:03:13.100 --> 00:03:19.500
In this case, though,
since this application is

00:03:19.500 --> 00:03:26.550
a bundled application and
it has different variants,

00:03:26.550 --> 00:03:31.710
what I have to do here
is go to the target,

00:03:31.710 --> 00:03:33.190
look at the resources,

00:03:36.360 --> 00:03:41.180
Notice that terminology.r
doesn't have any variants.

00:03:41.300 --> 00:03:46.600
So I need to go back to the files.

00:03:48.550 --> 00:03:49.560
Right.

00:03:49.580 --> 00:03:50.790
There we go.

00:03:50.910 --> 00:03:57.800
And pick localization platforms and
add a localized variant for English.

00:03:58.640 --> 00:04:01.090
Okay, so now terminology.r has
an English variant that

00:04:01.090 --> 00:04:02.500
looks like everything else.

00:04:02.500 --> 00:04:05.690
And then I do a build.

00:04:11.110 --> 00:04:14.460
And this is going to do a complete build,
so it'll take a little while.

00:04:14.480 --> 00:04:18.100
Really, all you need to do is add
a terminology resource.

00:04:18.100 --> 00:04:21.920
And AppleScript will recognize
the application as scriptable

00:04:21.920 --> 00:04:23.480
if it has an AET in it.

00:04:23.530 --> 00:04:28.480
Cocoa applications have
a special Info.plist flag

00:04:28.480 --> 00:04:32.910
called NSAppleScriptEnabled,
which is set to true.

00:04:33.030 --> 00:04:35.470
You can go ahead and set
that in your Info.plist,

00:04:35.570 --> 00:04:37.660
even if you're not a Cocoa application.

00:04:37.660 --> 00:04:39.570
That will speed things up for us.

00:04:39.660 --> 00:04:43.520
We'll recognize you as a scriptable
application more readily if that's true.

00:04:43.520 --> 00:04:47.580
But really, all you need to do is add
a terminology resource.

00:04:47.580 --> 00:04:48.780
So here we go.

00:04:48.880 --> 00:04:50.480
We've built.

00:04:50.550 --> 00:04:56.200
Now we should have a
simple text executable.

00:04:56.200 --> 00:04:59.580
And if we drag and drop
this on script editor.

00:04:59.580 --> 00:05:02.830
Script editor.

00:05:02.920 --> 00:05:06.100
editor shows us the
simple text dictionary.

00:05:08.000 --> 00:05:22.700
[Transcript missing]

00:05:35.300 --> 00:05:56.100
[Transcript missing]

00:06:16.940 --> 00:06:17.900
There we go.

00:06:17.900 --> 00:06:21.160
There we go.

00:06:21.390 --> 00:06:23.200
So, scriptable, simple text.

00:06:23.240 --> 00:06:25.280
That's all you needed to do.

00:06:27.680 --> 00:06:30.290
Now,
when you have a scriptable application,

00:06:30.340 --> 00:06:32.730
you're suddenly faced
with the problem of,

00:06:32.780 --> 00:06:35.210
okay, now I want to see what's going on.

00:06:35.220 --> 00:06:40.200
And Project Builder has a very
functional debugger where you can look

00:06:40.200 --> 00:06:45.730
at variables and where you can step
through applications step by step,

00:06:45.840 --> 00:06:50.080
but where if you're used to
looking at it in Project Builder,

00:06:50.080 --> 00:06:53.900
in Code Warrior,
where you could format the variables in

00:06:53.900 --> 00:06:58.250
different ways as characters or whatever,
or in MaxBug,

00:06:58.530 --> 00:07:05.240
where you could look at it in
hex or ASCII as well as decimal,

00:07:05.240 --> 00:07:11.400
you'll find that there are some
inherent limitations in Project Builder

00:07:11.400 --> 00:07:16.450
and its underlying debug engine,
GDB, that don't have the things you're

00:07:16.510 --> 00:07:20.030
familiar with and really rely
on in debugging Apple events,

00:07:20.140 --> 00:07:24.580
mainly because Apple events are deep,
complex, variable-length data structures

00:07:24.580 --> 00:07:26.040
that involve a lot of things.

00:07:26.040 --> 00:07:33.160
That are 32-bit quantities that are
interpreted by us as four characters,

00:07:33.160 --> 00:07:35.630
but aren't actually
string or character types.

00:07:35.640 --> 00:07:40.280
And so GDB basically says, hey,
this is an unbounded, long,

00:07:40.280 --> 00:07:42.790
opaque data type that
has a lot of hex in it,

00:07:42.880 --> 00:07:46.280
so I'm going to show you the hex
or maybe the octal if you're lucky.

00:07:46.280 --> 00:07:49.420
This is not very helpful for debugging.

00:07:49.420 --> 00:07:51.850
You want to look at four-character codes.

00:07:51.860 --> 00:07:54.600
You want to find out where your
Apple event handlers are installed.

00:07:55.260 --> 00:07:57.660
You want to set breakpoints
in interesting places.

00:07:57.720 --> 00:07:59.890
You want to look at
Apple events and AEDesks.

00:08:00.180 --> 00:08:04.700
And you want to do these all in your
GDB environment without resorting to

00:08:04.700 --> 00:08:06.640
the command line or special tools.

00:08:06.680 --> 00:08:08.360
Well, here's some help for you.

00:08:08.380 --> 00:08:11.850
First of all,
write these down and memorize them.

00:08:11.940 --> 00:08:13.100
They're very, very handy.

00:08:13.420 --> 00:08:21.000
If you want to look at an OS type,
all you have to do is cast it.

00:08:21.210 --> 00:08:23.650
If you want to print
the value of a variable,

00:08:23.650 --> 00:08:27.840
like the descriptor type of an A desk,
if you just print desk.descriptorType,

00:08:27.840 --> 00:08:29.440
you'll get it in hexadecimal.

00:08:29.440 --> 00:08:31.400
If you want to see what
the four-character code is,

00:08:31.400 --> 00:08:35.840
you cast it to a char4,
and that will print it the characters.

00:08:35.840 --> 00:08:38.930
If you want to set it,
you can set it in GDB by saying

00:08:39.080 --> 00:08:42.970
set desk.descriptorType equals,
but then you have to type

00:08:42.970 --> 00:08:44.360
the hex or the decimal.

00:08:44.980 --> 00:08:49.780
If you want to set it as four characters,
you just cast it to a star,

00:08:50.010 --> 00:08:51.810
long star of a string.

00:08:51.820 --> 00:08:55.540
The string will essentially give
you a pointer to a temporary,

00:08:55.540 --> 00:08:59.270
and then you cast that to a long star,
and then you assign that,

00:08:59.460 --> 00:09:01.920
and then that will do the
assignment as a four-byte quantity.

00:09:01.920 --> 00:09:07.330
These are two very helpful things
to setting and getting descriptor

00:09:07.340 --> 00:09:10.060
types or OS types in GDB.

00:09:10.060 --> 00:09:11.600
Breaking.

00:09:11.600 --> 00:09:17.460
If you want to set breakpoint,
you can set breakpoints in the

00:09:17.650 --> 00:09:22.360
Apple Event Manager that will
be hit before the Apple event is

00:09:22.700 --> 00:09:25.080
dispatched to your application.

00:09:25.080 --> 00:09:28.080
This is especially important
with the Carbon event model.

00:09:28.080 --> 00:09:31.330
With the Carbon event model,
you don't usually have a place

00:09:31.470 --> 00:09:35.510
where you call AEProcessAppleEvent.

00:09:35.540 --> 00:09:37.940
Carbon just dispatches directly to you.

00:09:37.960 --> 00:09:41.240
If somebody is sending
you an Apple event,

00:09:41.260 --> 00:09:43.660
and none of your handlers
are getting fired,

00:09:43.660 --> 00:09:44.880
how do you know?

00:09:44.900 --> 00:09:47.490
There's no bottleneck in your
code to set a breakpoint on.

00:09:47.500 --> 00:09:52.100
Well, you can set a breakpoint
in the Apple Event Manager.

00:10:11.000 --> 00:10:18.640
Okay.

00:10:18.690 --> 00:10:20.610
Okay, now I'm at AEM Dispatcher.

00:10:20.740 --> 00:10:21.330
This is right.

00:10:21.490 --> 00:10:25.390
And at AEM Dispatcher,

00:10:26.580 --> 00:10:31.740
Register 3 is the pointer
to my Apple event.

00:10:37.560 --> 00:10:43.700
And if I look at it,
in hex it's 61657674,

00:10:43.720 --> 00:10:46.420
and then a short hex value
which looks like a handle.

00:10:46.420 --> 00:10:50.380
So that looks like an AE desk,
and that's great, except it's hex.

00:10:50.380 --> 00:10:59.890
So let's use the trick I used before,
which is print casting to char 4.

00:11:00.680 --> 00:11:07.960
of a dereference of $R3
and it says it's AEVT.

00:11:08.030 --> 00:11:08.860
Yay!

00:11:09.050 --> 00:11:13.840
So I know it's an AEVT.

00:11:14.250 --> 00:11:17.060
Let's leave this here for a while,
go back to the slides,

00:11:17.090 --> 00:11:21.710
because now the problem is, okay,
I want to see what that Apple event is.

00:11:23.530 --> 00:11:25.460
And how do I know what
that Apple event is?

00:11:25.460 --> 00:11:29.720
Well, I could go in and I could
dereference the handle doubly,

00:11:29.720 --> 00:11:32.190
and then examine memory from
there and poke through it,

00:11:32.240 --> 00:11:37.420
and I might see the event
class and the event code,

00:11:37.420 --> 00:11:39.220
and then the parameters
might be in there,

00:11:39.220 --> 00:11:41.800
and if they happen to be in ASCII,
I could probably figure it out.

00:11:42.000 --> 00:11:43.280
But that's not very helpful.

00:11:43.700 --> 00:11:50.160
Andy Bachorski wrote for us a great
d command in MacsBug called AEVT,

00:11:50.250 --> 00:11:53.910
which will dump it all out,
but we don't have that in gdb.

00:11:53.910 --> 00:11:57.260
So what we need to do is
write a short gdb script.

00:11:57.260 --> 00:12:01.700
And one of the good things about gdb,
and I know MacsBug can do this too,

00:12:01.700 --> 00:12:06.120
is that gdb can actually call
library functions from a gdb script.

00:12:06.210 --> 00:12:09.320
So what we're going to do is
we're going to call AEPrint,

00:12:09.390 --> 00:12:13.580
the AE helpers routine that takes an
Apple event and turns it to ASCII.

00:12:13.620 --> 00:12:16.360
And we're going to do some
things like calling malloc

00:12:16.500 --> 00:12:19.720
to allocate temporary memory,
which we have to deallocate.

00:12:20.040 --> 00:12:23.620
And then we're going to
put this all in a script.

00:12:23.800 --> 00:12:26.980
We're going to put it
in our home directory,

00:12:26.980 --> 00:12:31.370
and then we're going to invoke
it from the command line.

00:12:31.400 --> 00:12:34.410
And this is basically what
our script looks like.

00:12:34.410 --> 00:12:38.460
It's got AEPrintDesk to handle,
and then a printf in it,

00:12:38.840 --> 00:12:41.890
and then a couple of dispose statements.

00:12:44.000 --> 00:12:51.700
[Transcript missing]

00:12:58.030 --> 00:13:01.980
Let's take this and put
it in my home directory.

00:13:05.750 --> 00:13:10.750
and then in ProjectBuildeR.

00:13:10.790 --> 00:13:11.510
Slide down the debugger.

00:13:11.750 --> 00:13:18.190
This is what the gdb AE Desk looks like,
just like on the screen.

00:13:18.690 --> 00:13:23.520
So let's go back to
where my breakpoint is.

00:13:23.520 --> 00:13:30.950
And I'm going to type source
tilde slash gdb aedesk.

00:13:33.430 --> 00:13:39.310
And then just to confirm that it loaded,
I'm going to type help user defined.

00:13:40.350 --> 00:13:45.540
Okay, and it says list of commands,
AEDesk, and AEGetAppleEventHandler.

00:13:45.550 --> 00:13:47.910
Those are two very useful
things that are defined in that.

00:13:48.000 --> 00:13:54.570
So now I can type AEDesk $R3.

00:13:55.600 --> 00:14:01.130
and it'll chug for a while,
and it tells me that it's an AEVT,

00:14:01.130 --> 00:14:04.600
it's an OAPP,
and it's being sent to this PSN,

00:14:04.600 --> 00:14:06.720
and there are no parameters.

00:14:06.810 --> 00:14:11.770
So I'm using the AE print function in
AE Helpers from a gdb script in order,

00:14:11.780 --> 00:14:16.330
in the, at a debugging breakpoint in
the Apple Event Manager to see

00:14:16.330 --> 00:14:18.700
what my incoming Apple event is.

00:14:18.730 --> 00:14:22.690
This is going to be very,
very helpful for you in debugging

00:14:22.700 --> 00:14:24.930
your AppleScript applications.

00:14:25.890 --> 00:14:30.800
Similarly, if you want to know where an
event handler is installed,

00:14:30.800 --> 00:14:35.220
if you don't know where your code is,
there's some code here.

00:14:35.220 --> 00:14:39.060
It calls actually the
actual Apple event routine,

00:14:39.060 --> 00:14:40.460
AE get event handler.

00:14:40.460 --> 00:14:44.560
You pass it two strings for the
event class and the event code,

00:14:44.560 --> 00:14:46.360
and it'll tell you the
address of the handler,

00:14:46.360 --> 00:14:47.950
and then you can set
a break point on that,

00:14:48.280 --> 00:14:52.420
and then you will get a break
when that handler fires.

00:14:52.600 --> 00:14:58.800
This is very handy for figuring out
when a particular handler fires,

00:14:58.800 --> 00:15:02.780
especially if the handler
is a wildcard handler.

00:15:02.780 --> 00:15:04.340
Okay?

00:15:06.700 --> 00:15:09.930
So, with the preliminaries done,
let's talk about the difficult stuff.

00:15:10.120 --> 00:15:15.040
Special topics for coding for Mac OS X,
things you may not have anticipated

00:15:15.150 --> 00:15:18.940
or known about in making
your application scriptable.

00:15:18.940 --> 00:15:23.290
We're going to talk about a minor
housekeeping note is a change in

00:15:23.290 --> 00:15:26.540
the Apple event handler prototype,
which is going to involve you

00:15:26.550 --> 00:15:27.720
changing some of your code.

00:15:27.720 --> 00:15:30.630
We're going to talk about FS specs,
we're going to talk about sheets,

00:15:30.820 --> 00:15:33.120
and we're going to talk about
loading scripting additions

00:15:33.120 --> 00:15:34.310
into your application.

00:15:35.820 --> 00:15:37.860
The Apple event prototype changed.

00:15:37.860 --> 00:15:40.820
This is something really unfortunate,
but we felt we had to do it,

00:15:40.820 --> 00:15:42.840
and the Mac OS X transition
was a good time.

00:15:42.840 --> 00:15:46.780
Historically,
Apple event handlers have had a refcon,

00:15:46.860 --> 00:15:50.790
like Windows have refcons
and controls have refcons.

00:15:50.800 --> 00:15:55.120
Apple event handlers have had refcons,
and historically that refcon

00:15:55.120 --> 00:15:57.310
has been a signed long integer.

00:15:57.320 --> 00:16:00.990
We noticed in putting together
the headers for Mac OS X that

00:16:00.990 --> 00:16:05.430
all of the other refcons in the
system were unsigned long integers.

00:16:05.440 --> 00:16:05.440
We noticed in putting together
the headers for Mac OS X that

00:16:05.440 --> 00:16:05.520
all of the other refcons in the
system were unsigned long integers.

00:16:06.150 --> 00:16:09.800
all the other Refcons are signed.

00:16:09.800 --> 00:16:12.400
Historically, the Apple event handlers
have been unsigned.

00:16:12.400 --> 00:16:16.290
We decided to fix this,
and fixing this means that you're

00:16:16.380 --> 00:16:19.580
going to have to change the prototypes
on your Apple event handlers

00:16:19.600 --> 00:16:27.680
and the headers on the handlers,
but not the installation code.

00:16:27.680 --> 00:16:32.190
Otherwise,
you would have to do a lot of casts.

00:16:32.420 --> 00:16:36.180
It's not pleasant,
but it's just something you have to do.

00:16:36.180 --> 00:16:39.540
It's just some housekeeping,
but I just wanted to let you

00:16:39.540 --> 00:16:41.070
know that that's coming up.

00:16:42.520 --> 00:16:45.640
More serious is the issue of FS specs.

00:16:45.640 --> 00:16:50.550
FS specs have been pretty much the
hard coin of talking to the file system

00:16:50.620 --> 00:16:55.820
since people really started using the
new file system calls in Mac OS 8.

00:16:55.890 --> 00:16:57.980
FS specs have been fairly useful.

00:16:57.980 --> 00:17:02.520
They let you get at things in the file
system without having to deal with paths,

00:17:02.570 --> 00:17:05.010
but there are some problems in Mac OS X.

00:17:05.620 --> 00:17:08.620
FS specs, first of all, are limited.

00:17:08.620 --> 00:17:14.020
Their path name is a char255,
and it's intended to be

00:17:14.020 --> 00:17:16.170
in the system encoding.

00:17:16.180 --> 00:17:21.570
And that means that an FS spec can't
really refer to a long file name or

00:17:21.570 --> 00:17:24.900
refer to a Unicode file name very well.

00:17:24.920 --> 00:17:28.920
We're strongly recommending you
work with FS refs that can do this,

00:17:28.920 --> 00:17:31.760
but FS specs have a
fundamental limitation.

00:17:33.220 --> 00:17:34.000
But there's a problem.

00:17:34.000 --> 00:17:37.450
FS refs can't refer
to non-existent files,

00:17:37.560 --> 00:17:40.670
and FS specs can,
and the reason why a lot of people

00:17:40.680 --> 00:17:43.660
like FS specs is that you can
use them in creating a new file,

00:17:43.700 --> 00:17:48.190
and that's important in Apple event,
Apple scripting application,

00:17:48.190 --> 00:17:52.470
where a script may want to tell a
application to create a new file.

00:17:52.470 --> 00:17:55.310
You want some compact,
useful way of saying

00:17:55.310 --> 00:17:59.030
what new file to create,
and an FS spec can't do it because

00:17:59.030 --> 00:18:03.920
it can't use long Unicode file names,
and then an FS ref can't do it because

00:18:03.920 --> 00:18:06.640
it can't refer to non-existent files.

00:18:06.640 --> 00:18:10.580
What complicates this is
that in the Carbon model,

00:18:10.580 --> 00:18:16.090
each Carbon application has
its own view of the VCB queue.

00:18:16.090 --> 00:18:20.550
That means each Carbon application
has its own list of volumes that

00:18:20.900 --> 00:18:22.470
may be in a different order.

00:18:22.470 --> 00:18:28.050
So a volume refnum is not
valid across processes.

00:18:28.250 --> 00:18:31.760
That means that an FS spec and an FS ref,
which are volume refnums,

00:18:31.760 --> 00:18:32.220
are not valid across processes.

00:18:32.220 --> 00:18:32.220
So a volume refnum is not
valid across processes.

00:18:32.220 --> 00:18:40.010
So you can't really legally send
an FS spec or an FS ref from a

00:18:40.010 --> 00:18:44.170
script to an application because
its volume list may be different,

00:18:44.260 --> 00:18:46.080
and it may be talking
about a different volume.

00:18:46.080 --> 00:18:48.690
We get these bugs every once in a while.

00:18:48.810 --> 00:18:51.140
I wrote this script,
and I told this application

00:18:51.260 --> 00:18:54.260
to save the file,
but it's saving it on a different disk.

00:18:54.270 --> 00:18:54.930
Why is that?

00:18:54.990 --> 00:18:57.400
Well,
it's saving it on disk negative two,

00:18:57.440 --> 00:18:59.970
and in that application,
disk negative two is a

00:18:59.980 --> 00:19:01.790
different disk than in that one.

00:19:01.800 --> 00:19:02.200
So it's not valid across processes.

00:19:02.200 --> 00:19:04.070
If you're lucky, it works.

00:19:04.140 --> 00:19:06.200
If you're not lucky and
you're going deep down,

00:19:06.230 --> 00:19:10.040
you probably don't have the same
directory structure on each disk.

00:19:10.160 --> 00:19:14.800
The dir IDs are probably not the same,
and it just plain doesn't work.

00:19:15.160 --> 00:19:16.900
So we need a solution to this.

00:19:17.000 --> 00:19:21.170
If you want to send a save event
to your--if your application

00:19:21.260 --> 00:19:25.690
wants to process a save event,
you need a way of getting the file name

00:19:25.690 --> 00:19:28.420
that's not FS ref or FS spec based.

00:19:28.710 --> 00:19:31.940
Well, the answer is, you know,
whenever you can,

00:19:31.940 --> 00:19:35.820
you use type alias for open or
for print events or for anything

00:19:35.820 --> 00:19:37.680
else dealing with a file.

00:19:37.680 --> 00:19:42.160
Type aliases are valid across processes,
and they can represent

00:19:42.160 --> 00:19:45.070
long Unicode file names,
but they too cannot

00:19:45.070 --> 00:19:46.940
represent non-existent files.

00:19:46.980 --> 00:19:50.220
So for non-existent files,
we are creating a new

00:19:50.360 --> 00:19:52.340
type called type file URL.

00:19:52.340 --> 00:19:58.530
And the date of a type file URL is the
same format as the FURL drag flavor.

00:19:58.540 --> 00:20:04.690
If the finder drags a file to you,

00:20:04.930 --> 00:20:07.040
using the drag manager
and drops it on you.

00:20:07.040 --> 00:20:10.260
When you get it out,
you probably coerce it to

00:20:10.260 --> 00:20:14.180
an FS spec or an FS ref,
and then you get it in your context.

00:20:14.320 --> 00:20:19.030
But interprocess,
it's being sent as this FURL data type.

00:20:19.070 --> 00:20:23.200
And this FURL data type
is process independent.

00:20:23.200 --> 00:20:29.500
It can refer to non-existent files,
and it doesn't rely on volume refnums,

00:20:29.500 --> 00:20:32.290
so it's legal to send across processes.

00:20:32.570 --> 00:20:36.260
We're going to use the same data format
with the same four-character code

00:20:36.260 --> 00:20:38.960
to specify new files in AppleScript.

00:20:38.960 --> 00:20:45.500
What's nice about it is that
it is file system independent.

00:20:45.610 --> 00:20:48.570
It encodes special characters,
so you can have a file name

00:20:48.570 --> 00:20:52.480
with colons or slashes,
and you don't have to parse them out.

00:20:52.480 --> 00:20:56.460
It can distinguish between files
on volumes that have the same name,

00:20:56.460 --> 00:20:58.990
which is really important,
and it's valid across

00:20:58.990 --> 00:21:00.240
processes and boxes.

00:21:00.240 --> 00:21:00.540
And since it's valid
across processes and boxes,

00:21:00.540 --> 00:21:00.840
it's valid across processes and boxes.

00:21:00.900 --> 00:21:01.550
It's a URL.

00:21:01.560 --> 00:21:04.440
It's even valid across machines, really.

00:21:04.710 --> 00:21:06.980
We're going to provide
you with some sample code.

00:21:07.130 --> 00:21:11.100
George Warner and John Montriand
are working on this now.

00:21:11.100 --> 00:21:16.040
We're providing a few routines
to basically create and extract

00:21:16.700 --> 00:21:20.170
file URL data types from
things that you see every day,

00:21:20.340 --> 00:21:25.820
from nav services replies,
from AEDesks to get them

00:21:25.820 --> 00:21:30.030
in and out of Apple events,
and also to create a new file

00:21:30.260 --> 00:21:33.760
given an FURL in one step,
rather than having to take it apart

00:21:33.760 --> 00:21:37.720
and find the file name portion,
the directory name portion,

00:21:37.720 --> 00:21:40.560
and call the fs create unicode call.

00:21:40.630 --> 00:21:43.380
So we're just packaging this
up as a bunch of sample code.

00:21:43.410 --> 00:21:47.160
We're also providing coercions
between this FURL and all

00:21:47.160 --> 00:21:50.200
of the interesting types,
all of the interesting character types,

00:21:50.230 --> 00:21:52.970
type chart, type style text,
type unicode text,

00:21:53.010 --> 00:21:57.420
so that users could see these if they
wanted and they could create them.

00:21:57.430 --> 00:22:01.140
And all the type files,
the c file object specifier,

00:22:01.160 --> 00:22:06.860
the type fss, and type fs ref aliases,
and the object specifier, of course,

00:22:07.070 --> 00:22:10.580
so that people can actually
compile these in Apple script.

00:22:11.010 --> 00:22:13.100
So how you use these is
very straightforward.

00:22:13.100 --> 00:22:17.900
Say that you are an application
that is factored and you

00:22:17.900 --> 00:22:19.340
send yourself a save event.

00:22:19.450 --> 00:22:23.940
So after somebody chooses save and
they fill out the nav reply record,

00:22:23.940 --> 00:22:27.570
you want to generate a save event with
the file name that's been picked in

00:22:27.580 --> 00:22:31.240
the nav reply record and send it to
yourself to actually save the file.

00:22:31.970 --> 00:22:38.440
Well, the nav reply record gives
you a directory URL and a

00:22:38.620 --> 00:22:42.690
CFString of the Unicode file name.

00:22:42.800 --> 00:22:46.760
Those aren't very useful to you when
you want to get them into an AE desk.

00:22:46.860 --> 00:22:53.710
So we've created one call that takes
that nav reply and makes it into a CFURL,

00:22:53.710 --> 00:22:58.240
the underlying core
foundation URL data type.

00:22:58.300 --> 00:23:01.520
And then another call
that puts that CFURL.

00:23:01.840 --> 00:23:06.420
Into an Apple event as an F URL parameter
and all you have to provide is the key.

00:23:06.420 --> 00:23:11.490
So in basically three lines of code,
you can take your nav services reply and

00:23:11.940 --> 00:23:16.820
stuff the fully transportable file name
from that into an outgoing Apple event.

00:23:19.220 --> 00:23:23.520
Similarly,
on your save file Apple event handler,

00:23:23.520 --> 00:23:26.830
you're going to get an in parameter in.

00:23:26.830 --> 00:23:28.380
And it can be anything.

00:23:28.380 --> 00:23:31.990
It can be an alias, it can be an FS spec,
it can be an FS ref,

00:23:32.130 --> 00:23:33.700
it can be a type file URL.

00:23:33.700 --> 00:23:37.910
But you basically want
to know two things.

00:23:37.920 --> 00:23:40.960
One, does it already exist?

00:23:40.960 --> 00:23:44.020
And if it doesn't already exist,
how can I make a file that

00:23:44.120 --> 00:23:47.210
does exist so I can write into
it and get an FS ref from it?

00:23:47.600 --> 00:23:52.100
And so basically what you do is
you get the in parameter as you

00:23:52.100 --> 00:23:54.010
try getting it as an FS ref.

00:23:54.050 --> 00:23:58.100
If that fails, then either there wasn't
something there or there was

00:23:58.110 --> 00:24:01.950
something there that couldn't be
resolved to a file that exists.

00:24:02.060 --> 00:24:04.720
So you guess, okay,
if my FS ref succeeded,

00:24:04.720 --> 00:24:06.710
I'm writing to an existing file.

00:24:06.760 --> 00:24:09.890
If it failed,
I probably want to create a new file.

00:24:09.890 --> 00:24:14.720
So then you try to get the
in parameter as an URL.

00:24:14.720 --> 00:24:17.580
And if that succeeds, then you know, hey,
I'm going to get an in parameter.

00:24:17.600 --> 00:24:46.900
And if that fails, then you know, hey,
I'm going to get an in parameter.

00:24:47.600 --> 00:24:49.940
So now I'll show you
how that actually works,

00:24:50.040 --> 00:24:52.530
once again in simple text.

00:24:56.300 --> 00:25:06.000
[Transcript missing]

00:25:19.070 --> 00:25:27.510
for my .h file, and add that .h file.

00:25:33.400 --> 00:25:37.400
And that's going to be this.

00:25:37.400 --> 00:25:40.370
Here's my file, Earldesk.h.

00:25:57.800 --> 00:26:19.200
[Transcript missing]

00:26:23.240 --> 00:26:29.810
And basically it defines
a create from nav reply,

00:26:29.840 --> 00:26:36.120
create desk from CFURL,
put param and put key CFURL.

00:26:36.370 --> 00:26:40.060
Create one from a desk,
create it from an Apple event parameter,

00:26:40.230 --> 00:26:42.570
create it from a record key.

00:26:45.190 --> 00:26:48.380
Create it from an FS spec.

00:26:48.550 --> 00:26:51.430
Create a new file with a neural.

00:26:53.290 --> 00:26:56.040
and then a couple of coercion handlers.

00:26:56.040 --> 00:26:59.410
And one of the things we want to do is we
want to install those coercion handlers.

00:26:59.450 --> 00:27:02.090
So let's get the source.

00:27:16.700 --> 00:27:23.170
Okay.

00:27:23.170 --> 00:27:27.200
Now, I want to add a save event handler,
and we're going to call a save event

00:27:27.200 --> 00:27:28.480
handler and see how this does it.

00:27:28.540 --> 00:27:34.610
So I'll go open up my add-ins.

00:27:37.360 --> 00:27:42.480
And I've got a Save Apple Event Handler
Julia Child format.

00:27:43.600 --> 00:27:49.800
I'm already canned, and I'll go to where
I should add my save event.

00:27:50.420 --> 00:27:54.970
and pasted in and i'll go back and

00:27:56.260 --> 00:27:58.110
Install my save event handler.

00:27:58.260 --> 00:27:59.350
This is the code to do that.

00:27:59.430 --> 00:28:03.990
And then install a couple of
coercion handlers so that I can

00:28:03.990 --> 00:28:07.030
process FURL types coming in.

00:28:07.030 --> 00:28:09.380
I'll copy those.

00:28:10.550 --> 00:28:14.500
And I will add them right in here.

00:28:14.500 --> 00:28:15.910
Okay.

00:28:16.180 --> 00:28:21.180
And then I will build.

00:28:27.810 --> 00:28:33.330
While that's building, what I'll do is--

00:28:35.100 --> 00:28:45.130
Go to my home library
scripting editions folder,

00:28:45.640 --> 00:28:46.290
and I'm going to copy in

00:28:46.630 --> 00:28:54.380
A special version of standard editions
which has a version of choose file name,

00:28:54.380 --> 00:28:59.510
which has been updated to return FURL,
and we'll see this in the event log.

00:29:03.260 --> 00:29:06.030
And we'll quit the script
editor just for fun,

00:29:06.030 --> 00:29:11.350
and we'll quit simple
text just to make sure.

00:29:13.180 --> 00:29:15.800
And our build has succeeded.

00:29:15.920 --> 00:29:18.600
So now we'll run.

00:29:25.040 --> 00:29:27.440
And we'll open up this Save As example.

00:29:27.440 --> 00:29:33.680
And so this is fairly simple.

00:29:33.680 --> 00:29:36.570
This is what you might see in any script,
set F to choose file name,

00:29:36.640 --> 00:29:37.900
save document one in F.

00:29:38.140 --> 00:29:41.290
But normally,
choose file name would return

00:29:41.290 --> 00:29:44.920
you a file specification,
and you'd send it to save.

00:29:44.980 --> 00:29:51.360
But now we're sending it a FURL,
and the FURL will result in a new file.

00:29:51.360 --> 00:29:54.860
So we'll turn on the event logs so
we can see exactly what's happening.

00:29:55.000 --> 00:29:56.590
Run it.

00:29:57.080 --> 00:29:59.040
Choose file name.

00:30:00.110 --> 00:30:01.780
Okay.

00:30:01.870 --> 00:30:05.620
So notice that it said save
document one in file URL,

00:30:05.620 --> 00:30:09.660
file colon slash slash local
host slash users slash sbch

00:30:09.660 --> 00:30:12.440
slash document slash baz.txt.

00:30:12.440 --> 00:30:12.680
Okay.

00:30:12.680 --> 00:30:16.200
So instead of an FS spec,
it came across as a URL.

00:30:16.200 --> 00:30:21.120
Notice that simple text
saved it as baz.txt.

00:30:21.120 --> 00:30:26.270
And when we go back to the
finder and go look in my home

00:30:26.270 --> 00:30:29.820
directory in my documents folder,

00:30:30.550 --> 00:30:32.080
There it is.

00:30:32.140 --> 00:30:39.770
So this is an example of
how you can very simply,

00:30:39.770 --> 00:30:49.360
without really changing your
application architecture,

00:30:49.790 --> 00:30:51.320
just use a different data type,
in this case the FURL data type, to

00:30:51.720 --> 00:30:56.860
get around the problem that fs refs
and fs specs can't be sent in apple

00:30:56.860 --> 00:31:01.240
events as i said we're working on the
sample code for this it's going to be

00:31:01.240 --> 00:31:05.370
released as a tech note and you'll have
access to this to incorporate into your

00:31:05.490 --> 00:31:09.470
applications the coercion handlers that
i talked about we will incorporate into

00:31:09.470 --> 00:31:14.820
a future version uh if you want to ship
something now for Mac OS 10.0.3 you can

00:31:14.820 --> 00:31:18.190
install the coercion handlers yourself
in the later version of the operating

00:31:18.190 --> 00:31:21.340
system when they're already installed
you can either continue to install

00:31:21.350 --> 00:31:24.730
them or just stop installing them and
you'll inherit the ones from the system

00:31:26.500 --> 00:31:30.590
So what this means to you is
that with this sample code,

00:31:30.710 --> 00:31:35.070
it's safe and probably important
to remove all type FS specs

00:31:35.160 --> 00:31:37.580
from your scripting interface.

00:31:37.590 --> 00:31:42.190
If you're doing OSACs,
OSACs and if you're doing

00:31:42.190 --> 00:31:44.170
factored applications,
if you're doing send

00:31:44.180 --> 00:31:46.830
to self applications,
you should probably not

00:31:46.970 --> 00:31:48.480
send yourself FS specs.

00:31:48.560 --> 00:31:52.200
You should probably not expect
to get FS specs or FS refs

00:31:52.260 --> 00:31:54.320
from other applications.

00:31:54.330 --> 00:31:56.460
You should really migrate
to this new data type.

00:31:56.460 --> 00:31:59.440
It's the same one that we
use in the drag manager.

00:31:59.500 --> 00:32:00.530
It's URL based.

00:32:00.720 --> 00:32:04.640
There's support for
it in core foundation.

00:32:04.640 --> 00:32:06.540
We're providing sample
code for you to do it.

00:32:06.680 --> 00:32:10.750
It's something you should
really look at migrating to.

00:32:13.080 --> 00:32:17.110
The second issue in
Mac OS X is handling sheets.

00:32:17.240 --> 00:32:19.560
Sheets are window modal dialog boxes.

00:32:19.700 --> 00:32:24.870
And as window modal dialog boxes,
they behave differently then

00:32:24.870 --> 00:32:27.730
dialog boxes do on Mac OS 9.

00:32:27.880 --> 00:32:30.370
Mac OS 9 dialog boxes
are application modal.

00:32:30.520 --> 00:32:32.300
They block the whole application.

00:32:32.410 --> 00:32:37.010
So that when a script tells you to do
something and you put up a dialog box,

00:32:37.010 --> 00:32:39.200
that script halts.

00:32:39.290 --> 00:32:42.580
Because you won't send back
a reply Apple event until

00:32:42.670 --> 00:32:44.580
that dialog box is dismissed.

00:32:44.610 --> 00:32:48.290
In many cases,
this is what users-- what scripters want,

00:32:48.300 --> 00:32:51.180
because it mimics the user experience.

00:32:51.350 --> 00:32:56.220
The problem is with
window modal dialog box,

00:32:56.260 --> 00:32:59.040
your application doesn't halt.

00:32:59.050 --> 00:33:05.940
What happens is that you
get a Carbon event in,

00:33:05.950 --> 00:33:10.060
and you show the sheet,
and then your Carbon event handler exits,

00:33:10.150 --> 00:33:13.510
and then your application
is just running,

00:33:13.510 --> 00:33:17.540
and the sheet is going to
be called by a callback,

00:33:17.630 --> 00:33:19.260
a sheet event handler.

00:33:19.260 --> 00:33:22.440
And then you install a procedure
on that to actually do what the

00:33:22.440 --> 00:33:24.760
sheet does whenever it's dismissed.

00:33:24.800 --> 00:33:27.710
So you basically have these
two threads of execution.

00:33:27.720 --> 00:33:30.670
One is the main event handler,
and one is whatever happens when

00:33:30.680 --> 00:33:33.380
your sheet event handler gets called.

00:33:33.720 --> 00:33:35.830
Well, if you mimic that with
an Apple event handler,

00:33:35.830 --> 00:33:38.190
what's going to happen is that
the Apple event will come in,

00:33:38.200 --> 00:33:43.100
it will pull down the sheet,
and it will return without an

00:33:43.170 --> 00:33:47.170
answer because the user hasn't
filled out and okayed the sheet yet.

00:33:47.330 --> 00:33:52.010
If this is like a save dialog box,
then you won't know whether

00:33:52.010 --> 00:33:53.950
it actually got saved.

00:33:54.060 --> 00:33:59.360
If it's a sheet that says,
this document has not been saved,

00:33:59.440 --> 00:34:01.780
are you sure you want to?

00:34:01.820 --> 00:34:06.000
When the user presses cancel,
maybe you want to return a user canceled

00:34:06.000 --> 00:34:09.640
error from that rather than just say,
oh, it's okay.

00:34:09.640 --> 00:34:12.990
Because basically your script
will continue executing,

00:34:12.990 --> 00:34:16.330
and it will continue executing
on the assumption that the

00:34:16.330 --> 00:34:19.630
previous event has been fully
handled when in fact it hasn't.

00:34:19.640 --> 00:34:21.910
It's still waiting there for user input.

00:34:21.920 --> 00:34:24.070
Bad things can happen.

00:34:25.900 --> 00:34:28.760
So there are four solutions to this.

00:34:29.010 --> 00:34:33.540
The first one is the easiest way,
and it's probably the best way,

00:34:33.540 --> 00:34:37.490
is to always provide a way from
your scripting interface to let the

00:34:37.710 --> 00:34:40.090
scripter avoid pulling down the sheet.

00:34:40.290 --> 00:34:41.400
That's going to be the safest.

00:34:41.400 --> 00:34:45.010
If the scripter can provide all
the information that's supposed

00:34:45.010 --> 00:34:48.950
to be in the sheet in the event,
and you can avoid pulling down the sheet

00:34:48.960 --> 00:34:51.960
altogether and just process the event,
do that.

00:34:52.140 --> 00:34:53.570
It's the best, safest way.

00:34:53.880 --> 00:34:57.970
But what if there are cases where
you have to pull down the sheet,

00:34:58.120 --> 00:35:01.660
or if the scripter actually
wants you to pull down the sheet

00:35:01.700 --> 00:35:04.860
and have user intervention,
such as the shut down

00:35:04.860 --> 00:35:06.770
the entire system event?

00:35:06.820 --> 00:35:11.290
You don't want to prevent the
user from having the opportunity

00:35:11.390 --> 00:35:13.990
of saving open documents in that.

00:35:14.230 --> 00:35:17.550
Those sheets really have to execute,
and you don't want the shut

00:35:17.660 --> 00:35:21.900
down the system event to say,
okay, I'm done, and shut down the system,

00:35:21.900 --> 00:35:21.900
while all these sheets are
pulled down waiting for the

00:35:21.900 --> 00:35:21.960
scripter to pull down the sheet.

00:35:21.960 --> 00:35:26.160
It's not the right thing to do.

00:35:27.530 --> 00:35:31.390
So the wrong way is to just return
even with the sheets are still down.

00:35:31.390 --> 00:35:33.910
Your script and your application
will get out of sync,

00:35:34.010 --> 00:35:37.280
your script will continue executing,
it'll keep firing events

00:35:38.000 --> 00:35:39.370
with the assumption that,
say,

00:35:39.370 --> 00:35:42.840
that window has already been closed or
that document has already been saved.

00:35:42.960 --> 00:35:47.740
Or it may go look for that
document in the file system now,

00:35:47.740 --> 00:35:51.200
even though it hasn't been saved yet,
and it won't find it,

00:35:51.200 --> 00:35:51.200
and it'll be an error.

00:35:51.200 --> 00:35:51.200
You don't want to do that.

00:35:51.510 --> 00:35:56.760
The cheap way is to see if you're
pulling down the sheet based on a

00:35:56.760 --> 00:35:59.780
user action or from an Apple event.

00:35:59.840 --> 00:36:02.080
And if it's being pulled
down from a user action,

00:36:02.080 --> 00:36:02.950
make it a sheet.

00:36:02.960 --> 00:36:05.380
And if it's not,
make it application modal.

00:36:05.380 --> 00:36:09.180
And if you make it application modal,
it will behave like Mac OS 9.

00:36:09.180 --> 00:36:10.280
It will block the application.

00:36:10.340 --> 00:36:12.560
That's a cheap way to do it.

00:36:12.750 --> 00:36:13.580
It's effective.

00:36:13.580 --> 00:36:15.070
It's really easy to do with sheets.

00:36:15.160 --> 00:36:17.120
It's fairly easy to do with nav dialogs.

00:36:18.220 --> 00:36:22.780
There's just actually one bit you set
in nav dialog to say make this app modal

00:36:22.780 --> 00:36:24.180
rather than making it window modal.

00:36:24.180 --> 00:36:25.800
And it does the rest for you.

00:36:26.250 --> 00:36:28.320
It'll work.

00:36:28.440 --> 00:36:30.420
It doesn't provide the
best user experience.

00:36:30.460 --> 00:36:35.010
The nice way and the way that works if
you really want your scripts to be able

00:36:35.010 --> 00:36:39.800
to pull down sheets and wait for user
input before resuming is you have to

00:36:39.800 --> 00:36:45.680
suspend the incoming Apple event and then
resume it when the sheet is dismissed.

00:36:45.680 --> 00:36:48.030
And let me show you how that works.

00:36:48.220 --> 00:36:49.300
*Growl*

00:36:50.000 --> 00:36:53.980
So somebody sends a close
Apple event to your application.

00:36:53.980 --> 00:36:55.180
You create the sheet.

00:36:55.180 --> 00:36:56.720
You install the sheet event handler.

00:36:56.720 --> 00:36:57.670
You show the sheet.

00:36:57.720 --> 00:37:00.180
And then you suspend the incoming event.

00:37:00.180 --> 00:37:04.520
And when you return from
the Apple event handler,

00:37:04.520 --> 00:37:06.590
you don't return all the way.

00:37:06.640 --> 00:37:10.540
It doesn't fill out a reply and send
it back to the original application.

00:37:10.620 --> 00:37:15.310
It leaves that application hanging fire
until the reply is actually filled in.

00:37:15.990 --> 00:37:18.760
This is the behavior you want
because if this is coming

00:37:18.760 --> 00:37:22.010
in from an external script,
that external script will just think,

00:37:22.130 --> 00:37:25.700
gee, it's taking a long time
to process this event.

00:37:25.720 --> 00:37:27.340
And maybe it'll time out.

00:37:27.420 --> 00:37:29.230
If it's got a long time out, it'll wait.

00:37:29.240 --> 00:37:30.640
The right thing happens.

00:37:32.320 --> 00:37:35.050
Then your sheet event handler,
when somebody actually

00:37:35.050 --> 00:37:37.160
does click a button,
you hide the sheet,

00:37:37.160 --> 00:37:40.040
you dispose the sheet,
you get the information

00:37:40.130 --> 00:37:43.780
about what they actually did,
you maybe put that in the reply,

00:37:43.780 --> 00:37:45.670
and then you resume the Apple event.

00:37:45.780 --> 00:37:48.290
And at that point,
the reply Apple event is

00:37:48.310 --> 00:37:52.290
actually delivered to the caller,
and then the script says, oh,

00:37:52.290 --> 00:37:55.790
this is what happens,
and then execution proceeds.

00:37:55.800 --> 00:37:59.270
And then in your process,
then you can hide the window and dispose

00:37:59.270 --> 00:38:01.500
the window and do everything you want.

00:38:02.200 --> 00:38:05.090
And your sheet handler proceeds.

00:38:06.440 --> 00:38:10.240
Well, you want a special case that,
because you don't want to hang

00:38:10.240 --> 00:38:13.810
yourself while waiting for a
sheet application to occur.

00:38:13.810 --> 00:38:16.590
So basically,
in your window event handler,

00:38:16.590 --> 00:38:19.650
if somebody clicks the
close box or chooses close,

00:38:19.650 --> 00:38:22.450
you can create a close
Apple event and send it.

00:38:22.540 --> 00:38:25.400
And then your Apple event
handler has to notice,

00:38:25.520 --> 00:38:28.840
hey, this is sent to self,
not sent from somebody else.

00:38:28.840 --> 00:38:30.760
There's nobody waiting on me.

00:38:30.760 --> 00:38:32.940
I'm just going to execute and return.

00:38:33.080 --> 00:38:35.870
I'm not going to suspend the event.

00:38:35.880 --> 00:38:37.450
And this is the crucial part.

00:38:37.490 --> 00:38:39.400
If the event's coming from outside,
you suspend it.

00:38:39.590 --> 00:38:42.460
If it's a send to self event, you don't.

00:38:42.830 --> 00:38:45.060
And then similarly,
in your sheet event handler,

00:38:45.060 --> 00:38:47.970
if there's a suspended event,
you resume it.

00:38:47.970 --> 00:38:50.020
And if there's not, you don't.

00:38:50.020 --> 00:38:52.790
Makes kind of sense,
because if you try to resume

00:38:52.790 --> 00:38:56.440
and there is no suspended event,
well, it doesn't quite work.

00:38:56.520 --> 00:39:00.160
So going back to sample code.

00:39:09.620 --> 00:39:16.490
I have here,
I took the Sheets sample code

00:39:16.490 --> 00:39:20.520
from DTS and hacked it up fairly
majorly to make it scriptable.

00:39:20.720 --> 00:39:22.880
Added in a bunch of events.

00:39:22.880 --> 00:39:29.370
But you can see that

00:39:31.670 --> 00:39:37.000
I've added Apple event handlers
for open and reopen and open doc.

00:39:37.200 --> 00:39:42.590
And I've added an Apple event
handler for make a new window.

00:39:43.020 --> 00:39:49.260
And this creates a new window.

00:39:49.260 --> 00:39:49.260
And then in the

00:39:49.780 --> 00:39:53.530
And I've also added an Apple event
handler to close the window.

00:39:53.540 --> 00:39:54.100
Okay?

00:39:54.100 --> 00:39:59.460
And in the Carbon event
handler... Here is the

00:39:59.460 --> 00:40:05.800
Carbon event handler for close...

00:40:14.630 --> 00:40:21.780
Basically what I do is I use
the very convenient AE helpers

00:40:21.960 --> 00:40:27.070
to build an Apple event,
and I build

00:40:27.560 --> 00:40:31.370
An Apple event that
says close saving ask,

00:40:31.560 --> 00:40:33.700
and I send it to myself.

00:40:33.830 --> 00:40:36.940
And so when I click the close box or
when I choose close from the menu,

00:40:36.940 --> 00:40:40.500
I'm going to generate an Apple event,
which is good for recording purposes.

00:40:40.500 --> 00:40:43.220
And then I'm going to catch it
in my close Apple event handler.

00:40:43.220 --> 00:40:44.280
OK?

00:40:44.310 --> 00:40:48.140
Well, let's look at what happens.

00:40:48.160 --> 00:40:50.620
I have a switch in here.

00:40:50.640 --> 00:40:54.380
And right now,
I'm going to handle it just by returning.

00:40:54.410 --> 00:40:58.560
And I believe that this is already built.

00:41:03.240 --> 00:41:07.940
So if I run this application,
it comes up and nothing happens.

00:41:07.940 --> 00:41:10.010
And let me open--

00:41:10.300 --> 00:41:11.860
This little script.

00:41:11.870 --> 00:41:13.940
And what this script does
is it makes two windows,

00:41:14.700 --> 00:41:18.140
closes one, saving ask,
and then uses a speech generator,

00:41:18.140 --> 00:41:21.780
and I hope the sound's working,
to say I'm done with the script.

00:41:21.980 --> 00:41:24.770
If sound isn't working,
just watch the stop button.

00:41:27.250 --> 00:41:28.700
So I run the script.

00:41:28.710 --> 00:41:30.740
I'm done with the script.

00:41:30.750 --> 00:41:35.900
Now, it's done with the script,
but the close operation hasn't finished.

00:41:35.910 --> 00:41:39.600
And in fact,
the application's still live.

00:41:39.620 --> 00:41:44.260
And I could cancel this,
or I could close a different window.

00:41:44.330 --> 00:41:48.040
But the script is already proceeded
on the basis of the understanding that

00:41:48.140 --> 00:41:50.080
the first window was already closed.

00:41:50.100 --> 00:41:55.700
This is not the behavior that we want.

00:42:01.950 --> 00:42:07.500
So let's quit that,
and let's go back to our switch

00:42:08.270 --> 00:42:16.290
here and say handle by suspending.

00:42:17.560 --> 00:42:28.530
Let's put a breakpoint at
suspend the current event,

00:42:28.530 --> 00:42:28.530
and a breakpoint... Okay, so...

00:42:34.500 --> 00:42:40.570
I only have one scriptable sheet, great,
and it's bouncing and it's running.

00:42:40.570 --> 00:42:40.570
So we run.

00:42:42.530 --> 00:42:46.250
And we hit our suspend breakpoint, okay?

00:42:46.300 --> 00:42:54.110
Now, let's-- and our script
hasn't terminated yet.

00:42:54.110 --> 00:42:54.110
So we go back to Scriptable Sheets,
we click OK.

00:42:55.650 --> 00:42:57.660
We hit the resume breakpoint.

00:42:57.790 --> 00:42:57.900
Continue.

00:42:57.900 --> 00:42:58.970
I'm done with the script.

00:42:58.970 --> 00:43:01.480
And then we're done with the script.

00:43:06.290 --> 00:43:08.040
So this will be releasing
a sample code too.

00:43:08.040 --> 00:43:09.080
It's fairly straightforward.

00:43:09.080 --> 00:43:11.410
There are a couple of
complications though,

00:43:11.410 --> 00:43:12.600
if we could go back to the slide.

00:43:15.160 --> 00:43:18.580
The one thing I talked about before is
you don't resume the send to self events.

00:43:18.580 --> 00:43:20.560
That, it just doesn't work.

00:43:20.590 --> 00:43:21.420
Don't do it.

00:43:21.540 --> 00:43:26.840
The second interesting thing is if
you have a coding style where you,

00:43:26.840 --> 00:43:29.930
if there's an Apple event error,
you propagate that through

00:43:29.930 --> 00:43:31.000
up to upper levels.

00:43:31.020 --> 00:43:34.360
It's really interesting,
in your Carbon event handler,

00:43:34.360 --> 00:43:37.280
if your Carbon event
handler sends Apple events,

00:43:37.280 --> 00:43:41.120
and the Apple events receive errors,
don't propagate those errors back

00:43:41.120 --> 00:43:44.120
out of your Carbon event handler,
because what'll happen is that

00:43:44.320 --> 00:43:48.050
Carbon will dispatch that back
up the Carbon calling chain.

00:43:48.060 --> 00:43:51.710
So, you need to be intelligent about the
relationship between your Apple event

00:43:51.710 --> 00:43:58.200
handlers and your Carbon event handlers,
and understand that if an Apple event,

00:43:58.200 --> 00:44:01.100
because the,
when you suspend an Apple event,

00:44:01.100 --> 00:44:04.390
it actually returns a
timeout error to the caller.

00:44:04.440 --> 00:44:08.380
So if you're sending, well,
you need to work out the relationship

00:44:08.440 --> 00:44:09.360
between your Carbon event and
your Carbon event handler.

00:44:09.360 --> 00:44:10.140
So,
you can't send that back up the chain.

00:44:10.140 --> 00:44:11.190
You need to go through all your
events and Apple events and not

00:44:11.280 --> 00:44:11.900
send things back up the chain.

00:44:12.100 --> 00:44:15.360
Because Carbon will redispatch it,
and then you will get several

00:44:15.420 --> 00:44:18.590
invocations of the same event,
which is not what you want.

00:44:18.830 --> 00:44:23.480
In this case,
you get two sheets on one window,

00:44:24.190 --> 00:44:25.710
which is not good.

00:44:25.850 --> 00:44:28.660
If you're an attachable application,
there are a couple of

00:44:28.660 --> 00:44:30.560
things to make sure of.

00:44:30.630 --> 00:44:35.130
You want attached scripts to
behave like external ones in that

00:44:35.200 --> 00:44:39.910
you want the scripts to pause,
but when you're executing the script,

00:44:40.140 --> 00:44:41.990
the events are being sent to self.

00:44:42.050 --> 00:44:44.820
So your simple case of if
it's coming from outside,

00:44:44.960 --> 00:44:46.560
it's a script I suspend.

00:44:46.560 --> 00:44:51.800
If it's coming from inside,
it's a factored command I just executed.

00:44:51.800 --> 00:44:52.790
That doesn't work.

00:44:54.220 --> 00:44:56.450
But you can't suspend it
because it's sent to self.

00:44:56.520 --> 00:44:57.390
So what do you do?

00:44:57.400 --> 00:45:00.610
Well, in the case of if you're
executing a script that is

00:45:00.750 --> 00:45:04.690
sending your self commands,
what you need to do is execute that

00:45:04.690 --> 00:45:09.010
script on a thread and have a send
function for that script execution

00:45:09.160 --> 00:45:13.080
for that call to OSA execute or
execute event that blocks that

00:45:13.300 --> 00:45:15.640
thread until the event returns.

00:45:15.640 --> 00:45:19.210
And that's essentially a way to
suspend and resume that event

00:45:19.210 --> 00:45:23.500
execution under your control rather
than the Apple event manager control.

00:45:23.640 --> 00:45:26.000
And then you unblock the
thread in your sheet handler.

00:45:26.000 --> 00:45:31.090
There are not a lot of attachable
applications that are going to be

00:45:31.090 --> 00:45:34.320
scripting save or things with sheets.

00:45:34.320 --> 00:45:36.980
If you happen to be in that
case and Mark wanted to know

00:45:36.980 --> 00:45:40.250
about this because he is,
this is how we think we should do it.

00:45:41.930 --> 00:45:46.060
So what this means to you,
if you adopt window modal dialogues,

00:45:46.180 --> 00:45:49.330
if you adopt sheets or the
sheet style nav dialogues,

00:45:49.330 --> 00:45:52.200
you have to change the way
you deal with event handlers.

00:45:52.200 --> 00:45:54.740
You pretty much have to go
to the Carbon event model.

00:45:54.740 --> 00:45:56.700
It really helps to go to
the Carbon event model.

00:45:56.700 --> 00:46:00.180
And you need to plan the relationship
between your Carbon event handlers

00:46:00.220 --> 00:46:02.170
and your Apple event equivalents.

00:46:04.100 --> 00:46:07.080
Let me do one quick thing about
scripting additions in Mac OS X from

00:46:07.080 --> 00:46:08.710
the programmer's point of view.

00:46:08.710 --> 00:46:11.550
I talked about it from the user's
point of view of where you put

00:46:11.550 --> 00:46:13.000
them and how you invoke them.

00:46:13.010 --> 00:46:16.680
From the programmer's point of view,
you don't get scripting additions in your

00:46:16.790 --> 00:46:20.150
application unless you make an OSA call,
in which case you do.

00:46:20.160 --> 00:46:23.300
But what if you wanted to
get scripting additions and

00:46:23.370 --> 00:46:27.040
execute them in your context,
and you don't want to have to go

00:46:27.050 --> 00:46:31.370
through the overhead of starting
up AppleScript in order to do it?

00:46:32.950 --> 00:46:34.150
We have some following magic stuff.

00:46:34.150 --> 00:46:35.960
Read quickly.

00:46:35.960 --> 00:46:40.310
Basically, you grope our library for
a special symbol called

00:46:40.310 --> 00:46:42.490
OSA install standard handlers.

00:46:42.490 --> 00:46:46.590
If it's there, you call it,
and then you send yourself a

00:46:46.590 --> 00:46:49.580
special event called the GDUT event.

00:46:49.840 --> 00:46:52.660
This is the event that AppleScript sends
to load scripting additions.

00:46:52.660 --> 00:46:56.090
And when you send this to yourself,
then it'll load all the scripting

00:46:56.090 --> 00:46:57.830
additions into your partition.

00:46:57.860 --> 00:47:01.740
You only need to do this if you
really want scripting additions.

00:47:02.960 --> 00:47:04.960
You don't want to have to go
through the overhead of starting

00:47:04.960 --> 00:47:07.250
up AppleScript in order to execute
inside your application space,

00:47:07.250 --> 00:47:08.500
inside your application process.

00:47:08.500 --> 00:47:10.500
And you're not going to execute
an AppleScript yourself.

00:47:10.510 --> 00:47:11.560
It's a fairly rare case.

00:47:11.620 --> 00:47:16.530
We generally don't recommend groping
our frameworks to find private symbols,

00:47:16.710 --> 00:47:18.460
but this is a fairly safe one.

00:47:18.460 --> 00:47:21.060
You're only calling it if it's there.

00:47:21.060 --> 00:47:24.180
And in the future,
if we do this differently,

00:47:24.180 --> 00:47:27.990
we'll remove that symbol,
and then your test will fail.

00:47:28.130 --> 00:47:29.710
You won't do anything.

00:47:29.950 --> 00:47:31.810
Everything will just work.

00:47:31.960 --> 00:47:35.530
In the future, they may be loaded into
every application by default.

00:47:35.620 --> 00:47:37.160
We're still looking at that.

00:47:37.160 --> 00:47:39.690
There are some security
implications to that.

00:47:39.690 --> 00:47:42.660
We definitely don't want people sending,
for example,

00:47:42.660 --> 00:47:46.300
terminal or login window events that
get executed by secret scripting

00:47:46.300 --> 00:47:49.880
additions that they put in the
network scripting additions folder,

00:47:50.040 --> 00:47:52.440
and all of a sudden they
get root privileges and can

00:47:52.440 --> 00:47:54.530
write all over your machine.

00:47:54.540 --> 00:47:57.240
We need to look at that model
before we execute scripting

00:47:57.240 --> 00:47:59.100
additions in every application.

00:47:59.100 --> 00:48:00.660
There are alternatives.

00:48:00.660 --> 00:48:02.880
And one of the alternatives
is... This is a great third-party

00:48:03.090 --> 00:48:05.770
product called Script Debugger,
and Mark Aldrich is going to come

00:48:05.770 --> 00:48:09.340
up and show you how you can use
Script Debugger to debug scripts

00:48:09.370 --> 00:48:11.150
executing inside your application.

00:48:11.150 --> 00:48:11.770
Mark?

00:48:15.170 --> 00:48:20.010
So I'll start by showing you a few
features of Script Debugger as just

00:48:20.010 --> 00:48:24.100
an AppleScript debugger so you can
see how your script might execute.

00:48:24.170 --> 00:48:29.620
What I have here is a little FileMaker
database with a picture and some

00:48:29.620 --> 00:48:35.130
text and a script that works with it.

00:48:40.100 --> 00:48:44.860
So what this script does is essentially
read some data out of this FileMaker

00:48:44.860 --> 00:48:47.100
database and do some stuff with it.

00:48:47.160 --> 00:48:53.470
Script Debugger gives you all the
standard debugging things you need,

00:48:53.470 --> 00:48:53.470
breakpoints,

00:48:54.100 --> 00:49:10.600
[Transcript missing]

00:49:11.070 --> 00:49:14.070
Script Debugger shows you the scope
of all of your variables as you go.

00:49:14.080 --> 00:49:16.920
Anything that has a white
background is global.

00:49:16.930 --> 00:49:19.500
Anything that has a yellow background
is local to this function or

00:49:19.500 --> 00:49:21.520
handler in AppleScript terms.

00:49:21.550 --> 00:49:25.970
And anything with a blue background
is built into AppleScript itself.

00:49:29.340 --> 00:49:31.490
One of the things you can do is
if you don't like the way the

00:49:31.560 --> 00:49:34.840
browser operates or you want to
see something in a larger view,

00:49:34.840 --> 00:49:39.950
you can open a separate window and
you can view it in a print form as the

00:49:40.020 --> 00:49:43.320
source code from AppleScript or in Best.

00:49:43.420 --> 00:49:48.200
And one of the cool things about
Best is that it allows you to deal

00:49:48.260 --> 00:49:51.180
with things other than textual data.

00:49:51.180 --> 00:49:55.500
So for example,
as this script reads pictures and text,

00:49:55.500 --> 00:49:57.030
the debugger shows you
the actual live data.

00:50:04.810 --> 00:50:13.910
Now if you're trying to debug a script
running within your own application,

00:50:14.040 --> 00:50:20.890
Script Debugger gives you the
ability to actually invoke that

00:50:20.890 --> 00:50:20.890
debugger from your context,
not just the Script Debugger application.

00:50:20.890 --> 00:50:20.890
And the user interface for this

00:50:21.720 --> 00:50:27.400
is simply switching OSA languages.

00:50:27.460 --> 00:50:35.930
So you switch from AppleScript to
AppleScript Debugger

00:50:35.930 --> 00:50:38.490
and save your script.

00:50:38.490 --> 00:50:38.490
In this instance, it's an applet.

00:50:38.490 --> 00:50:38.490
And then when I drop
a few files on there,

00:50:38.850 --> 00:50:43.390
The applet launches as it normally would,
and then ScriptyBugger comes forward

00:50:43.400 --> 00:50:47.450
and you can actually see exactly what
your applet received from the finder,

00:50:47.490 --> 00:50:50.700
which in this case is a pair of aliases.

00:50:50.700 --> 00:50:57.510
And bear with me, it's still beta.

00:50:57.510 --> 00:50:57.510
You can step along.

00:50:59.970 --> 00:51:06.170
The key element here is that if you
support what's known as the generic

00:51:06.270 --> 00:51:10.220
OSA component in your application,
if you have a script menu or

00:51:10.220 --> 00:51:13.760
any other setting in which
you would execute a script,

00:51:13.850 --> 00:51:19.350
the generic component will automatically
load the appropriate script.

00:51:21.780 --> 00:51:23.290
language.

00:51:23.290 --> 00:51:27.770
And by doing so,
you let the author of the script--

00:51:35.260 --> 00:51:38.630
You let the author of the
script make the choice.

00:51:38.630 --> 00:51:42.490
And in this instance,
they've chosen the debugger,

00:51:42.490 --> 00:51:42.490
but they might choose the OS--

00:51:45.200 --> 00:51:49.070
The Unix shell OSA component that
Chris was demonstrating earlier on.

00:51:49.110 --> 00:51:51.770
And so with that simple
switch of a language,

00:51:51.770 --> 00:51:55.770
the debugger can be executed
inside your application,

00:51:55.770 --> 00:51:59.050
and you can see exactly
what you're doing.

00:51:59.050 --> 00:51:59.050
And, uh...

00:51:59.390 --> 00:52:05.570
as sort of the final example
of how cool that might be.

00:52:39.910 --> 00:52:45.760
So there, you can have the debugging
running inside the show.

00:52:45.760 --> 00:52:47.810
Thank you very much.

00:52:47.810 --> 00:52:48.780
Great.

00:52:48.790 --> 00:52:50.200
Thanks, Mark.

00:52:51.660 --> 00:52:56.890
So, Mark's done a lot of work over a
period of years trying to work around,

00:52:56.890 --> 00:53:06.250
if we could have the slides back,
the fact that AppleScript doesn't

00:53:06.250 --> 00:53:06.250
have any system level debug APIs.

00:53:06.470 --> 00:53:10.040
And we're trying to rectify that
and work with him and the developers

00:53:10.040 --> 00:53:13.730
of other debugging applications,
if we could have the slides back,

00:53:13.790 --> 00:53:20.180
to actually put in some debugging
APIs into AppleScript so that they

00:53:20.180 --> 00:53:23.180
could take advantage of them and you
could take advantage of them in your

00:53:23.180 --> 00:53:28.380
applications or invoke them from GDB,
for example, to find out what's actually

00:53:28.380 --> 00:53:31.640
going on inside your application
when you're executing scripts.

00:53:31.640 --> 00:53:35.700
We have a framework for
what the APIs look like.

00:53:36.200 --> 00:53:39.870
The basic concept is that
there's a debug session,

00:53:39.940 --> 00:53:44.370
which is based on OSA IDs,
and there are stack frames,

00:53:44.370 --> 00:53:48.910
and you can walk the stack
chain and look at globals,

00:53:48.940 --> 00:53:53.640
locals, and properties of a handler or
a script in the stack frame.

00:53:53.640 --> 00:53:57.800
That looks like it'll have a good match
with the user interface of the current

00:53:57.800 --> 00:54:02.250
debuggers and also all the things that
you may want to do from inside a script.

00:54:02.580 --> 00:54:06.550
Also providing an interface to
break and single step and step into,

00:54:06.550 --> 00:54:09.310
step over, continue, all the things you'd
expect from a debugger.

00:54:09.320 --> 00:54:14.580
The important thing is that it
needs a remote mode as well,

00:54:14.580 --> 00:54:17.020
and that remote mode will, of course,
be via Apple Events,

00:54:17.020 --> 00:54:19.420
so that you could send,
from your debugger,

00:54:19.420 --> 00:54:24.040
you could send an Apple Event to
any application executing a script

00:54:24.150 --> 00:54:28.050
to halt that script application
and then have the entire debugging

00:54:28.050 --> 00:54:30.080
transaction over Apple Events.

00:54:30.290 --> 00:54:34.230
This would be very exciting when
we've got Apple Events over the

00:54:34.230 --> 00:54:35.800
Internet again because you could do that.

00:54:35.800 --> 00:54:38.070
You could do remote debugging
over the Internet between

00:54:38.250 --> 00:54:39.430
two machines on Apple Script.

00:54:39.490 --> 00:54:43.070
We're really looking forward to that
and we're working closely with the

00:54:43.070 --> 00:54:45.720
developers of debugging applications.

00:54:47.530 --> 00:54:51.050
So to summarize,
everything you need to make a

00:54:51.050 --> 00:54:55.300
good scriptable application,
both an application that implements

00:54:55.300 --> 00:54:59.760
scriptability and an application
that executes Apple scripts

00:54:59.760 --> 00:55:01.750
is in Carbon Framework now.

00:55:01.750 --> 00:55:04.820
And there should be nothing
holding you back from developing

00:55:04.820 --> 00:55:06.590
great scriptable applications.

00:55:06.660 --> 00:55:07.960
If there is, let us know.

00:55:08.030 --> 00:55:10.280
It's easy to invoke
scripts from your code.

00:55:10.380 --> 00:55:12.910
I mean, simple text does it in the demo.

00:55:12.910 --> 00:55:15.060
It's three or four lines of code.

00:55:15.070 --> 00:55:18.420
And if you do,
make sure that you're OSA component

00:55:18.420 --> 00:55:22.690
agnostic so you can take advantage
of things like the OSA script,

00:55:22.880 --> 00:55:29.400
the shell scripting component,
or Mark Aldrich's debugging component,

00:55:29.400 --> 00:55:33.600
so that if you execute scripts,
you don't just execute Apple scripts,

00:55:33.650 --> 00:55:36.720
but you execute any scripts,
because we'll be widening the

00:55:36.760 --> 00:55:38.750
range of scripts in the future.

00:55:38.750 --> 00:55:43.330
Make sure you migrate away from FS specs,
because FS specs are not the right way

00:55:43.330 --> 00:55:45.550
to send things between applications.

00:55:45.840 --> 00:55:51.110
Please adopt the sheet user interface
in Aqua and take the ways we've shown

00:55:51.280 --> 00:55:53.460
you to make sheets work in scripts.

00:55:53.470 --> 00:55:54.860
And use the development tools.

00:55:54.920 --> 00:55:58.000
Project Builder is a very effective
development tool for developing,

00:55:58.000 --> 00:56:01.540
testing, debugging,
and deploying your application.

00:56:01.880 --> 00:56:05.320
There's only one more thing left to do,
and that's the feedback forum,

00:56:05.390 --> 00:56:10.320
which is going to be across the hall,
because we have 16, 15, 14 seconds left.

00:56:10.470 --> 00:56:14.700
We're not going to take any Q&A here,
but we'll take any in the feedback forum.

00:56:14.700 --> 00:56:17.420
Once again,
Jason is the technology manager.

00:56:17.420 --> 00:56:18.080
Contact him.

00:56:18.110 --> 00:56:19.890
I'm the engineering manager.

00:56:19.890 --> 00:56:20.740
Use the lists.

00:56:20.740 --> 00:56:22.620
George Warner is our fine tech support.