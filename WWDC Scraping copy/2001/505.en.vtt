WEBVTT

00:00:01.370 --> 00:00:05.200
Okay, welcome to the session on
JBuilder 5 for Mac OS X.

00:00:05.200 --> 00:00:12.200
So, many of you have seen me before
in one session or another.

00:00:12.200 --> 00:00:15.130
My name is Blake Stone,
Chief Scientist for Borland

00:00:15.130 --> 00:00:17.200
Software Corporation.

00:00:17.200 --> 00:00:22.380
We dumped the in-prize moniker for good.

00:00:22.380 --> 00:00:22.380
Yes.

00:00:23.250 --> 00:00:25.810
And we'll be spending a lot
of time looking at a lot of

00:00:25.810 --> 00:00:27.340
detailed features in JBuilder.

00:00:27.340 --> 00:00:29.920
You've probably seen some
quick overview views.

00:00:29.920 --> 00:00:33.270
You've seen a smattering of features,
but not a lot of explanation

00:00:33.280 --> 00:00:35.370
for what's behind them,
and no look really at

00:00:35.510 --> 00:00:38.720
what's new in JBuilder 5,
especially since JBuilder is

00:00:38.730 --> 00:00:42.610
really new to the Macintosh
community as a whole at this point.

00:00:42.650 --> 00:00:45.270
But I know there's some of you
out there who are already JBuilder

00:00:45.270 --> 00:00:47.670
users and are just waiting,
so we'll showcase some of the

00:00:47.670 --> 00:00:49.320
JBuilder 5 new features as well.

00:00:49.880 --> 00:00:52.650
Why don't we have a look, in fact,
at what we're going to do.

00:00:52.770 --> 00:00:55.370
With the tour of JBuilder 5,
we're going to try to walk

00:00:55.370 --> 00:00:58.060
through the major areas,
but it's a big, deep product.

00:00:58.160 --> 00:00:59.770
Anybody who's used it knows that.

00:00:59.770 --> 00:01:01.760
I'll try to give you a
hint of what's there,

00:01:01.760 --> 00:01:04.260
but if you don't see something
you're interested in,

00:01:04.290 --> 00:01:05.120
get a hold of us.

00:01:05.120 --> 00:01:07.810
Get on the news group,
check out the CD we've handed out,

00:01:07.810 --> 00:01:08.780
whatever it takes.

00:01:08.870 --> 00:01:11.480
Make sure that you find out
the answer to your question.

00:01:11.490 --> 00:01:14.080
And of course,
I'll be hovering around the conference

00:01:14.080 --> 00:01:16.130
for the next day or two as well.

00:01:16.700 --> 00:01:18.950
We're going to cover
some of the new features.

00:01:19.370 --> 00:01:20.560
We're going to look at the
new features in JBuilder 5,

00:01:20.560 --> 00:01:21.990
and we're going to look
a little bit at writing

00:01:21.990 --> 00:01:26.220
Macintosh-specific code in JBuilder,
because we keep talking about pure

00:01:26.310 --> 00:01:29.170
Java and how JBuilder is pure Java,
and some people confuse that

00:01:29.220 --> 00:01:30.760
with being swing-specific.

00:01:30.760 --> 00:01:32.300
Java is Java.

00:01:32.300 --> 00:01:34.950
You can as easily write
Cocoa applications in Java,

00:01:34.950 --> 00:01:37.410
with a few caveats we'll
talk about in a little bit,

00:01:37.530 --> 00:01:40.180
as you can write swing applications,
and so that's an

00:01:40.260 --> 00:01:42.080
interesting topic by itself.

00:01:42.100 --> 00:01:45.620
We'll talk a little bit about the preview
CD you got and how to get that up and

00:01:45.620 --> 00:01:48.070
running to the best of its ability,
especially getting a

00:01:48.080 --> 00:01:48.980
hold of the new features.

00:01:49.740 --> 00:01:52.890
We'll get a hold of the update
that you require to the VM from

00:01:52.890 --> 00:01:56.570
Apple to really make it sing,
and then we'll have a Q&A session.

00:01:58.220 --> 00:02:00.900
So JBuilder, the basics that we're
going to walk through.

00:02:00.900 --> 00:02:03.440
You'll see everything, of course,
uses the Aqua look and feel.

00:02:03.440 --> 00:02:07.370
And this is courtesy more of Apple's
work than anything we've done.

00:02:07.370 --> 00:02:10.490
We've tried to make sure
that we use Swing purely for

00:02:10.580 --> 00:02:12.350
all of our user interface.

00:02:12.350 --> 00:02:15.800
And so the Aqua look and feel
does a great job of translating

00:02:15.800 --> 00:02:19.690
our appearance into a really
nice Macintosh user experience.

00:02:21.700 --> 00:02:24.740
So JBuilder, the basics that we're
going to walk through.

00:02:24.870 --> 00:02:28.090
You'll see everything, of course,
uses the Aqua look and feel.

00:02:28.110 --> 00:02:31.700
And this is courtesy more of Apple's
work than anything we've done.

00:02:31.700 --> 00:02:35.420
And so the Aqua look and feel
does a great job of translating

00:02:35.420 --> 00:02:39.590
our appearance into a really
nice Macintosh user experience.

00:02:40.720 --> 00:02:41.260
So JBuilder focuses very much
on allowing you to keep directly

00:02:41.290 --> 00:02:41.700
in touch with your source code.

00:02:41.700 --> 00:02:46.330
It differs from some of the other major
tools out there in that not only do

00:02:46.330 --> 00:02:48.700
we get direct access to your source
code and you spend a lot of time on it,

00:02:48.700 --> 00:02:48.700
but it also allows you to keep
in touch with your source code.

00:02:48.820 --> 00:02:51.560
code and you spend a lot of time
in the editor manipulating code,

00:02:51.560 --> 00:02:54.330
but we store your source
code in just standard files.

00:02:54.330 --> 00:02:57.940
There's no binary repository anywhere
that hides your code from you so

00:02:58.020 --> 00:03:01.700
you can very easily use JBuilder in
conjunction with other tools that expect

00:03:01.800 --> 00:03:04.940
you to have direct access to your code.

00:03:04.940 --> 00:03:08.310
We're going to talk a little bit about
the performance of the editor because

00:03:08.370 --> 00:03:12.860
that's something that I think is an
interesting topic for Java developers.

00:03:12.900 --> 00:03:15.310
Everybody was told from
day one Java is slow.

00:03:15.310 --> 00:03:16.120
Java is slow.

00:03:16.120 --> 00:03:18.960
You hear it often enough
and you begin to believe it.

00:03:18.960 --> 00:03:22.220
But the actual fact is that
Java code is amazingly quick.

00:03:22.450 --> 00:03:25.530
Hotspot is a startling technology
and can do a lot of things in a

00:03:25.530 --> 00:03:28.850
dynamic compiler that you can't
even do in a static compiler.

00:03:28.970 --> 00:03:30.910
So we wring a lot of performance
out of it and you'll see a

00:03:30.910 --> 00:03:32.510
lot of that in the editor.

00:03:32.610 --> 00:03:35.250
The editor does some interesting
structural analysis that if you

00:03:35.250 --> 00:03:38.730
were at the Java developer tool
session we talked about a little bit.

00:03:38.830 --> 00:03:42.860
And of course we added something to the
editor to make it comfortable for you.

00:03:42.860 --> 00:03:45.500
We added key bindings
that mirror the text edit,

00:03:45.500 --> 00:03:46.580
project builder,
sort of the standard class editor.

00:03:46.580 --> 00:03:49.930
They're sort of the standard classical
Apple key bindings as well as the

00:03:49.930 --> 00:03:53.560
BB edit slash code warrior key bindings
that you may be accustomed to so you

00:03:53.560 --> 00:03:58.040
don't have to retrain your fingers
for a whole new set of keystrokes.

00:03:58.040 --> 00:04:00.280
We're also going to talk a
little bit about navigation

00:04:00.310 --> 00:04:03.530
through your source code,
code insight and Java doc

00:04:03.610 --> 00:04:07.740
and how they increase your
productivity right from day one.

00:04:07.740 --> 00:04:09.530
And this is going to be
kind of an ongoing theme,

00:04:09.540 --> 00:04:10.600
this increased productivity.

00:04:10.600 --> 00:04:14.470
How do we make you more productive each
and every day in the product rather

00:04:14.470 --> 00:04:16.760
than how do we provide some things
that we don't want to be able to do?

00:04:16.760 --> 00:04:18.110
So you may be able to do a lot of
things that look good in a demo and

00:04:18.170 --> 00:04:21.370
may help you learn on the first few
days but then you grow beyond them.

00:04:21.480 --> 00:04:23.920
No, no, no,
these are tools that you will use

00:04:23.920 --> 00:04:28.060
again and again and again as you
continue to develop Java code.

00:04:28.060 --> 00:04:30.370
We're going to go from there
into a little bit more about the

00:04:30.410 --> 00:04:33.790
project orientation of JBuilder,
the fact that the project structure

00:04:33.800 --> 00:04:37.220
isn't something you need to spend a
lot of time fiddling with in JBuilder.

00:04:37.360 --> 00:04:41.160
There are a lot of other products where
you need to add every single source file.

00:04:41.230 --> 00:04:44.820
Well, we deal with projects of thousands
of source files and so if adding

00:04:44.820 --> 00:04:46.060
and removing them from your project
is not the right thing to do,

00:04:46.060 --> 00:04:46.190
then it is.

00:04:46.190 --> 00:04:46.910
We're going to be able to do
that in a little bit more detail

00:04:46.910 --> 00:04:47.230
in a little bit more detail.

00:04:47.230 --> 00:04:47.890
But if you're going to do a lot
of work in a project that is

00:04:47.900 --> 00:04:49.310
a major maintenance nightmare,
that's something we need to get rid of.

00:04:49.310 --> 00:04:51.780
And in fact, we've done some very
interesting work on that area.

00:04:51.890 --> 00:04:53.230
We've got a very fast compiler.

00:04:53.340 --> 00:04:57.350
You'll see that every single demo I do,
of course, the compiler will kick in with

00:04:57.350 --> 00:04:59.220
very clever dependency checking.

00:04:59.270 --> 00:05:00.940
We'll talk a little bit about that.

00:05:01.220 --> 00:05:03.190
And a very powerful archive builder.

00:05:03.190 --> 00:05:07.140
So if your project construction process
involves producing a jar for someone,

00:05:07.140 --> 00:05:08.520
we can help you out there too.

00:05:08.520 --> 00:05:13.360
So let's have a look at those very
basic characteristics of JBuilder.

00:05:14.190 --> 00:05:17.730
If we can flip to the
system in front of me here,

00:05:17.730 --> 00:05:20.690
we'll go ahead and bring JBuilder up.

00:05:21.310 --> 00:05:24.530
see how well the optical mouse
tracks on this lovely surface.

00:05:24.730 --> 00:05:30.120
And JBuilder is structured so that you
can see a number of things at once.

00:05:30.120 --> 00:05:32.580
And I might as well introduce them
before we get a little bit deeper.

00:05:32.590 --> 00:05:35.970
The project view in the upper
left-hand corner here is where you

00:05:35.970 --> 00:05:39.930
see the structure of your project,
the packages that comprise your project,

00:05:39.930 --> 00:05:40.960
your source files.

00:05:40.960 --> 00:05:43.200
The lower left is where you
see structural information,

00:05:43.200 --> 00:05:45.280
and the center is where
you see the content view,

00:05:45.500 --> 00:05:47.970
where we can open any number
of files concurrently.

00:05:48.080 --> 00:05:50.880
So I've got, in this case,
Welcome app and Welcome frame open,

00:05:50.890 --> 00:05:53.160
which we can flip back and forth between.

00:05:53.160 --> 00:05:55.930
Along the bottom of the content view,
we have a number of different

00:05:55.930 --> 00:05:58.360
viewers for that particular content.

00:05:58.360 --> 00:05:59.860
And we'll see some of
those a little bit later.

00:05:59.860 --> 00:06:03.600
But just so you know what's where and
why I'm doing the things I'm doing.

00:06:03.600 --> 00:06:05.850
We focus on the editor a lot of the time.

00:06:05.920 --> 00:06:07.960
So the editor had better be fast.

00:06:07.960 --> 00:06:11.360
It had better just keep up with
my typing as fast as I can type.

00:06:11.360 --> 00:06:14.270
It had better scroll
quickly through my code,

00:06:14.270 --> 00:06:16.460
so I'm not waiting for it a lot.

00:06:16.460 --> 00:06:19.740
And that's not all that impressive
until you realize that every single

00:06:19.740 --> 00:06:23.700
line of code-- every single line of
code in JBuilder is written in Java.

00:06:23.700 --> 00:06:27.480
So your applications can look this fast,
have this kind of

00:06:27.480 --> 00:06:29.040
response and performance.

00:06:29.140 --> 00:06:31.320
So if you were concerned about
Java from that standpoint,

00:06:31.630 --> 00:06:32.640
please don't be.

00:06:32.640 --> 00:06:35.870
Also, we do a lot of structural
analysis on the code.

00:06:35.900 --> 00:06:38.530
So as I type slash and
I'm about to hit a star,

00:06:38.590 --> 00:06:41.850
you'll notice that we can immediately
note that all of that is a comment,

00:06:41.910 --> 00:06:44.380
there is no structure,
we've colored it green,

00:06:44.380 --> 00:06:46.960
and just as quickly, it comes back.

00:06:46.960 --> 00:06:49.080
So very, very quick analysis.

00:06:49.080 --> 00:06:50.280
And we talked about this a
little bit in another session,

00:06:50.310 --> 00:06:51.840
just in case you weren't there.

00:06:51.860 --> 00:06:53.840
And out of interest,
how many people here weren't

00:06:53.840 --> 00:06:57.340
at the developer tools session
for Java earlier today?

00:06:57.340 --> 00:06:58.580
OK, a number of you out there.

00:06:58.700 --> 00:07:00.600
So if you were, please forgive me.

00:07:00.740 --> 00:07:04.460
We'll try not to dwell a lot on
things that were talked about there.

00:07:05.600 --> 00:07:08.740
But the structure over here shows me the
structure of the class I'm working with.

00:07:08.840 --> 00:07:15.000
And so if I declare a new integer,
it shows up in that structural view.

00:07:15.110 --> 00:07:18.550
We can actually control how
quickly these things are updated,

00:07:18.620 --> 00:07:20.510
and we've got it set
about as fast as it'll go.

00:07:21.280 --> 00:07:23.960
So as I continue to type,
you can see that on the fly,

00:07:23.960 --> 00:07:26.350
in real time,
we're able to discover that this

00:07:26.380 --> 00:07:28.600
variable name is changing over here.

00:07:28.600 --> 00:07:33.220
So that gives us the ability really
to give you a constant heads up

00:07:33.260 --> 00:07:35.600
about the state of your file.

00:07:36.190 --> 00:07:39.060
Because not only can we show you
the class and its members and give

00:07:39.130 --> 00:07:41.710
you a quick navigational interface,
we can also show you

00:07:41.710 --> 00:07:44.600
if you make a mistake,
like omitting a closed brace here,

00:07:44.600 --> 00:07:47.600
that there are structural
errors in your code immediately.

00:07:48.600 --> 00:07:49.460
So that you know what's going on.

00:07:50.040 --> 00:07:50.600
You can find out what's going on.

00:07:51.180 --> 00:07:53.750
And you can see that there is no
catch associated with this try

00:07:53.760 --> 00:07:55.560
because we never closed the try block.

00:07:55.660 --> 00:07:57.520
And just that fast we can
correct it without ever going

00:07:57.520 --> 00:07:58.600
through a compile cycle.

00:07:59.320 --> 00:08:01.750
So that's a really important
piece of getting you

00:08:01.750 --> 00:08:03.580
performant in the environment.

00:08:04.280 --> 00:08:08.390
By the way, as far as the editor goes,
again, for those of you who weren't here,

00:08:08.470 --> 00:08:10.000
it's very fully featured.

00:08:10.250 --> 00:08:14.050
So I can do things like block, indent,
and unindent no problem,

00:08:14.060 --> 00:08:18.320
comment out a set of lines,
a whole bunch of very helpful keystrokes,

00:08:18.380 --> 00:08:22.800
and a bunch of quick mechanisms
for typing common structures.

00:08:22.800 --> 00:08:25.140
Like if I want to put
an if block in place,

00:08:25.260 --> 00:08:28.530
I can put an if else block
and expand that template with

00:08:28.530 --> 00:08:30.580
just a couple of keystrokes.

00:08:31.020 --> 00:08:35.680
All of these things are customizable
for your preferred key bindings.

00:08:35.680 --> 00:08:40.020
So I can easily go in and say,
I'd like to customize a key

00:08:40.020 --> 00:08:44.000
binding and change the keystrokes,
or even just go in and use one of

00:08:44.000 --> 00:08:47.560
the prefab ones like my Macintosh or
Macintosh Code Warrior key bindings.

00:08:50.000 --> 00:11:19.400
[Transcript missing]

00:11:21.080 --> 00:11:25.630
And I'm going to accept all of the
defaults here for an untitled project,

00:11:25.630 --> 00:11:28.110
but I'm going to tell it that
I already have source code for

00:11:28.110 --> 00:11:30.230
this project in another location.

00:11:30.290 --> 00:11:33.770
Specifically, I'm going to go look at the
samples we provide and pick

00:11:33.880 --> 00:11:36.800
up the chess sample source.

00:11:37.280 --> 00:11:42.620
So if I go ahead and build this project,
immediately my project pane shows me

00:11:42.680 --> 00:11:44.390
that these are the packages I have.

00:11:44.510 --> 00:11:46.760
They're sub-packages and
all of the source files.

00:11:46.940 --> 00:11:48.590
I don't need to define this by hand.

00:11:48.670 --> 00:11:50.670
And in fact,
if I were to go and check code out

00:11:50.720 --> 00:11:53.820
of a repository into that directory,
I can easily refresh and get

00:11:53.820 --> 00:11:55.540
the up-to-date information.

00:11:55.540 --> 00:11:58.070
Or next time I open the project,
it'd just be there without

00:11:58.140 --> 00:11:59.300
my having to ask for it.

00:11:59.480 --> 00:12:00.920
So very powerful tool.

00:12:01.210 --> 00:12:05.220
Now all I need to do to build
this project is request a compile,

00:12:05.220 --> 00:12:06.830
and the compiler kicks in.

00:12:07.150 --> 00:12:08.340
It's interesting,
we're not getting a whole bunch

00:12:08.360 --> 00:12:09.440
of build progress reported.

00:12:09.440 --> 00:12:14.120
Of course, I am working with an interim
build of the Java VM here,

00:12:14.120 --> 00:12:17.180
so heaven knows what we'll run into,
the usual demo gremlins.

00:12:17.180 --> 00:12:19.620
But as you saw there,
it didn't take very long.

00:12:19.620 --> 00:12:22.120
It's hard to believe
it did anything at all,

00:12:22.120 --> 00:12:26.560
but in fact, it just produced class files
for every single source in here.

00:12:26.560 --> 00:12:28.900
And as you saw a moment ago,
there's a number of

00:12:28.900 --> 00:12:32.140
packages and sub-packages,
and everything was compiled.

00:12:33.490 --> 00:12:36.050
Subsequent compiles are
amazingly quick as well.

00:12:36.050 --> 00:12:39.600
If I go into a particular file,
and we'll just mark it dirty

00:12:39.640 --> 00:12:42.140
by making a change to it,
and then go ahead and say

00:12:42.270 --> 00:12:45.390
recompile this project,
then it notices very quickly there's only

00:12:45.450 --> 00:12:47.280
one file that needs to be recompiled.

00:12:47.300 --> 00:12:51.290
But it's not like your typical system
where if I'd made a change in the

00:12:51.290 --> 00:12:55.000
API that somebody else required,
it would just be broken.

00:12:55.000 --> 00:12:55.530
No, no.

00:12:55.530 --> 00:12:58.240
If I make a change that
somebody else is going to call,

00:12:58.240 --> 00:13:01.600
then it notices that not only does
this file need to be compiled,

00:13:01.600 --> 00:13:03.440
but, eh,
turns out it's not going to be compiled.

00:13:03.440 --> 00:13:05.080
that's API nobody else uses.

00:13:05.180 --> 00:13:06.930
Wouldn't you know it?

00:13:08.000 --> 00:13:09.760
I don't know this
particular demo real well.

00:13:09.760 --> 00:13:12.090
I love just sort of flying
by the seat of my pants.

00:13:12.170 --> 00:13:15.710
It finds that in fact there's a
reference to that method somewhere

00:13:15.710 --> 00:13:19.860
else and it tried to recompile all the
files that required that piece of API.

00:13:20.320 --> 00:13:24.170
So it's a very frighteningly
complicated system,

00:13:24.170 --> 00:13:28.010
but in fact one that just takes
care of all the grunge work for you.

00:13:28.960 --> 00:13:33.520
I work on a project that has thousands
and thousands of source files.

00:13:33.520 --> 00:13:34.240
JBuilder.

00:13:34.240 --> 00:13:38.270
And I use JBuilder as my IDE and I can
compile changes in a matter of seconds

00:13:38.270 --> 00:13:42.320
to this enormous project and it follows
all of the dependencies for me and

00:13:42.320 --> 00:13:44.460
takes care of all of the details.

00:13:44.460 --> 00:13:46.940
So that's pretty amazing
from my perspective.

00:13:46.940 --> 00:13:48.900
I'm not going to save my changes.

00:13:49.600 --> 00:13:52.240
The next thing that I mentioned
is that once I'm done building a

00:13:52.240 --> 00:13:54.630
project and I've got a bunch of files,
I probably want to

00:13:54.630 --> 00:13:56.000
deliver that to someone.

00:13:56.420 --> 00:13:58.000
And so archive building is
an important part of that.

00:13:58.310 --> 00:14:01.090
It's an important part of the compiler,
the build process.

00:14:01.180 --> 00:14:05.590
So what we've got is a technology
called the archive wizard.

00:14:06.290 --> 00:14:10.140
All I do is go into the archive
builder wizard here and say I'd like

00:14:10.140 --> 00:14:12.660
to build an application from this.

00:14:12.660 --> 00:14:16.340
I can set all sorts of
options or accept defaults.

00:14:16.450 --> 00:14:19.310
I can come in at any later time to
any of the jars that I'm trying to

00:14:19.310 --> 00:14:21.310
build and edit their characteristics.

00:14:21.350 --> 00:14:24.450
In this case,
I'd like to specify a particular class

00:14:24.530 --> 00:14:27.010
as the main class for this application.

00:14:33.360 --> 00:14:33.930
If I remember correctly,
we'll go ahead and pick the server

00:14:33.930 --> 00:14:34.420
side of this particular chess app.

00:14:34.420 --> 00:14:37.760
And now when I go to recompile,
it's going to recompile my files.

00:14:37.760 --> 00:14:42.920
Did I actually save that accidentally?

00:14:42.920 --> 00:14:45.430
That would be bad.

00:14:51.360 --> 00:14:54.780
We'll go ahead and look for it.

00:14:54.810 --> 00:14:55.880
Yeah, I accidentally did.

00:14:55.920 --> 00:14:58.970
One of the things I'm using here,
by the way, I'm just typing in a tree.

00:14:58.980 --> 00:15:00.980
And it brings up a little
search mechanism that allows

00:15:01.060 --> 00:15:02.000
me to search the tree.

00:15:02.000 --> 00:15:05.830
It's kind of interesting because I can
search based on wildcards and find

00:15:05.830 --> 00:15:07.840
all of the things that start with GE.

00:15:07.840 --> 00:15:11.200
Or say, I'd like to find the things
that have PL somewhere in them

00:15:11.200 --> 00:15:12.720
and then move among those.

00:15:12.720 --> 00:15:14.220
It turns out to be only one.

00:15:14.220 --> 00:15:16.300
So let's go ahead and change this back.

00:15:16.300 --> 00:15:17.860
Apologies on that.

00:15:17.870 --> 00:15:21.190
So now it goes ahead and
compiles and creates the archive.

00:15:21.420 --> 00:15:24.220
So it's built a jar for me that
contains all of my classes,

00:15:24.220 --> 00:15:26.130
that contains the manifest entries.

00:15:26.150 --> 00:15:28.830
And I can verify that by actually
opening the jar in the product

00:15:28.900 --> 00:15:32.020
and having a look at its contents,
including the manifest file.

00:15:32.140 --> 00:15:36.770
So really quick way of going
ahead and dealing with projects,

00:15:36.840 --> 00:15:37.720
building output.

00:15:37.930 --> 00:15:40.220
It's not something you
would expect from Java.

00:15:40.270 --> 00:15:44.050
But having built this over time,
we've gained really a new appreciation

00:15:44.160 --> 00:15:45.860
for just how fast Java can be.

00:15:45.890 --> 00:15:49.020
If I can get back to my slides, please.

00:15:51.570 --> 00:15:54.280
So I promised we would go through
this at a fairly blistering pace.

00:15:54.490 --> 00:15:55.210
Please excuse me.

00:15:55.220 --> 00:15:59.380
I normally like interactive sessions,
but there's just far too many

00:15:59.380 --> 00:16:01.820
people further back to make
that really practical here,

00:16:01.820 --> 00:16:03.320
so we'll take Q&A at the end.

00:16:03.340 --> 00:16:06.830
Visual design is a big piece of
the JBuilder environment because

00:16:06.840 --> 00:16:10.370
Java beans are a big piece of
the set of Java specifications.

00:16:10.380 --> 00:16:13.690
They were a very early player
in the numerous Java specs

00:16:13.860 --> 00:16:17.290
that are out there now,
but they're an important part of

00:16:17.440 --> 00:16:21.970
how we take a class-based language,
because Java really understands classes

00:16:21.970 --> 00:16:25.520
and members at the lowest level,
but doesn't have any component-based

00:16:25.630 --> 00:16:28.300
architecture at the language level,
and layers on top of that a

00:16:28.300 --> 00:16:31.840
component architecture that
understands properties and events.

00:16:31.840 --> 00:16:35.260
So JBuilder understands the
Java beans architecture and provides

00:16:35.260 --> 00:16:37.140
a very sophisticated designer.

00:16:37.140 --> 00:16:42.780
So you can take Java beans from anywhere,
Java beans from Sun, like AWT and Swing,

00:16:42.780 --> 00:16:46.420
although I'd argue about Swing being
acceptable Java beans occasionally,

00:16:46.420 --> 00:16:48.500
Java beans from Borland.

00:16:48.500 --> 00:16:49.740
And we provide a set of databases.

00:16:49.920 --> 00:16:53.290
We have data access technologies
and Data Express that really

00:16:53.290 --> 00:16:55.680
are layered over top of JDBC,
DBSwing,

00:16:55.680 --> 00:16:58.530
which are data-aware Swing components,
and Internet Beans,

00:16:58.530 --> 00:17:01.440
which allow you to produce
dynamic HTML using a set of beans,

00:17:01.440 --> 00:17:05.040
or third-party components,
because Java beans is a standard and

00:17:05.100 --> 00:17:08.250
we can drop any bean into the IDE,
and we'll look at how easy

00:17:08.370 --> 00:17:09.720
that kind of thing is to do.

00:17:09.740 --> 00:17:14.190
All of this is done using Borland's
patented two-way tool technology,

00:17:14.250 --> 00:17:19.040
and two-way tools are what allow us
to do visual manipulation of a file,

00:17:19.090 --> 00:17:19.540
and then go back and modify it.

00:17:19.540 --> 00:17:22.590
So you can go back and modify the source
code and see those changes reflected

00:17:22.590 --> 00:17:25.650
dynamically in the graphical environment,
so that you can seamlessly

00:17:25.650 --> 00:17:26.510
move back and forth.

00:17:26.920 --> 00:17:29.820
There's no code generated that
you aren't allowed to touch.

00:17:29.870 --> 00:17:30.830
It's your code.

00:17:30.900 --> 00:17:33.180
So let's have a look at that.

00:17:33.300 --> 00:17:36.450
Again, back to the demo machine, please.

00:17:37.530 --> 00:17:38.860
They're going to get
sick of my saying that.

00:17:38.980 --> 00:17:41.000
They know they should switch
back to the demo machine.

00:17:42.810 --> 00:17:46.450
So if we go into just a very
simple application here,

00:17:46.460 --> 00:17:48.760
this Welcome app,
and I go ahead and open the

00:17:48.760 --> 00:17:52.200
Welcome frame in the designer,
what's going on now is we're having

00:17:52.200 --> 00:17:54.750
a look at the source code and
figuring out what it looks like.

00:17:54.750 --> 00:17:57.580
And it looks like a very,
very empty frame.

00:17:58.940 --> 00:18:00.090
So that's fine.

00:18:00.090 --> 00:18:03.630
I can start with this as a
starting point and say I'd like

00:18:03.630 --> 00:18:07.360
this frame to use an XY layout,
which is sort of an absolute

00:18:07.480 --> 00:18:09.120
positioning technology.

00:18:09.300 --> 00:18:12.170
I'd like to put a button
and a text field on it,

00:18:12.180 --> 00:18:16.760
and perhaps I'd like to put a
scrolling area and a tree as well.

00:18:17.620 --> 00:18:20.830
And everything I'm doing here
is generating source code.

00:18:20.830 --> 00:18:23.950
If you look at this JB init method,
this is sort of my static

00:18:24.400 --> 00:18:26.510
construction of this environment.

00:18:27.040 --> 00:18:30.890
But I can do... Again,
this manipulation of code

00:18:30.890 --> 00:18:32.250
or manipulation visually.

00:18:32.360 --> 00:18:33.310
Either way, it's up to me.

00:18:33.330 --> 00:18:35.510
So if I don't like the
text on that button,

00:18:35.510 --> 00:18:38.020
I want the text on
that button to say add.

00:18:38.050 --> 00:18:41.450
And again, if you weren't there,
I did a rather perverse little

00:18:41.560 --> 00:18:46.060
demonstration a moment ago
in one of the other sessions.

00:18:46.060 --> 00:18:48.150
I actually put an expression in here.

00:18:48.860 --> 00:18:51.500
Well,
let's be even more obnoxious about this,

00:18:51.500 --> 00:18:55.360
and let's go between JButton1
and setText and add a comment.

00:18:56.350 --> 00:18:58.140
So we've got here a piece of logic.

00:18:58.870 --> 00:19:01.460
We've got a legal Java code
that has changed the label

00:19:01.460 --> 00:19:03.230
on this button to add item.

00:19:03.480 --> 00:19:07.480
And if we flip back to the designer,
the designer parses through that and says

00:19:07.480 --> 00:19:09.940
the button has the text add item in it.

00:19:09.940 --> 00:19:11.540
Nice stuff.

00:19:12.120 --> 00:19:13.380
It goes a step further.

00:19:16.840 --> 00:19:19.800
Let's say I change that
text to remove item.

00:19:20.030 --> 00:19:22.860
Well, it's got an expression and a
comment and a bunch of other

00:19:22.990 --> 00:19:24.440
sort of nasty stuff in there.

00:19:24.540 --> 00:19:27.230
So if I make that change and
go back to my source code,

00:19:27.400 --> 00:19:28.100
what happens?

00:19:28.250 --> 00:19:32.330
Well, we leave everything in your code
the way it was and make a surgical

00:19:32.330 --> 00:19:36.250
change to replace only the expression
that used to be there with the

00:19:36.290 --> 00:19:38.480
new value that you've typed in.

00:19:38.600 --> 00:19:40.600
So again, it's your source code.

00:19:40.720 --> 00:19:42.710
We just help you with it.

00:19:44.830 --> 00:19:47.360
So what I've got here is
I've got a fairly basic and

00:19:47.360 --> 00:19:50.350
relatively unattractive layout,
but if you'll excuse me,

00:19:50.530 --> 00:19:52.560
I'll just sort of juggle
that a little bit here.

00:19:52.560 --> 00:19:56.540
One of the important things
about Java are layout managers.

00:19:56.540 --> 00:19:59.530
There are some slick technologies
in Interface Builder for

00:19:59.530 --> 00:20:02.600
helping you position things,
but you're still positioning

00:20:02.600 --> 00:20:04.500
them using absolute positioning.

00:20:04.880 --> 00:20:08.360
What happens when I then translate
my application into another language

00:20:08.360 --> 00:20:10.170
and the text on a button gets longer?

00:20:10.170 --> 00:20:13.950
Well, you need to come up with another
set of absolute positions for that.

00:20:14.040 --> 00:20:15.290
Or what if I change my font size?

00:20:15.450 --> 00:20:17.740
Then everything needs to
be arranged differently,

00:20:17.740 --> 00:20:19.790
and that's sort of
difficult to deal with.

00:20:19.960 --> 00:20:22.590
Well, Java uses layout managers
to cope with this,

00:20:22.590 --> 00:20:25.230
but layout managers can
be tough to understand.

00:20:25.230 --> 00:20:28.490
There's one called grid bag
layout that's the most powerful,

00:20:28.490 --> 00:20:30.710
perhaps,
and it would allow me to do a lot of

00:20:30.710 --> 00:20:33.280
very sophisticated manipulation of this.

00:20:34.610 --> 00:20:37.820
But I would need to know all
about grid bag constraints.

00:20:37.820 --> 00:20:41.920
So instead, what we can do is we can use
JBuilder to help me out here.

00:20:42.010 --> 00:20:44.100
So I'm going to lay things
out the way I want them,

00:20:44.100 --> 00:20:47.050
and then go back and say,
I don't want to use XY layout.

00:20:47.300 --> 00:20:49.300
What I want to do is use grid bag layout.

00:20:49.300 --> 00:20:52.940
And behind the scenes,
what we've done is translate all of

00:20:53.010 --> 00:20:57.140
my calls with absolute positioning
into grid bag constraints.

00:20:59.900 --> 00:21:04.530
Some of you have obviously
done some grid bag work before.

00:21:04.660 --> 00:21:07.690
So we can literally go
through and resize this,

00:21:07.780 --> 00:21:10.980
and you'll see that we have
inferred some rather reasonable

00:21:10.980 --> 00:21:12.850
resizing behaviors for this.

00:21:12.950 --> 00:21:15.820
So the designer is a pretty
cool piece of technology,

00:21:15.820 --> 00:21:19.020
even if you think about it in
terms of standard components.

00:21:19.250 --> 00:21:20.770
But what if we want to
write our own components?

00:21:20.870 --> 00:21:24.730
Has anybody here tried to add a
component to Interface Builder's palette?

00:21:25.490 --> 00:21:26.570
The one or two.

00:21:26.870 --> 00:21:30.640
You know, the rest of you haven't tried
it because you knew it was easy,

00:21:30.640 --> 00:21:31.850
right?

00:21:32.140 --> 00:21:37.340
I'm sorry to pick on it,
but really it's an early component model

00:21:37.630 --> 00:21:41.700
where the important thing was being
able to provide reusable components.

00:21:41.780 --> 00:21:44.050
And for us,
we decided that it was important to

00:21:44.050 --> 00:21:46.230
be able to create reusable components.

00:21:46.330 --> 00:21:49.550
So I'm going to create one right now.

00:21:49.860 --> 00:21:51.000
Thank you.

00:21:51.090 --> 00:21:54.000
So what I'm going to do
is create a new class.

00:21:54.530 --> 00:21:57.600
And this particular class
I'm going to call myButton,

00:21:57.670 --> 00:22:04.240
and it's going to descend
from javax-swing-jbutton.

00:22:04.270 --> 00:22:07.710
So it's just a button at this point.

00:22:08.940 --> 00:22:11.120
And we go ahead and generate some code.

00:22:11.120 --> 00:22:14.200
We have a look at it to see if you
need to do anything in particular.

00:22:14.320 --> 00:22:18.610
And all I'm going to do in my
button is go ahead and say,

00:22:18.610 --> 00:22:21.570
by default,
I'm going to set the background

00:22:21.570 --> 00:22:23.810
on the button to the color green.

00:22:23.850 --> 00:22:28.540
And if there are any people here who
worked on the Aqua look and feel,

00:22:28.610 --> 00:22:30.020
they may be cringing at this moment.

00:22:30.020 --> 00:22:32.640
Is this a good build to do this in?

00:22:34.060 --> 00:22:35.050
We'll find out.

00:22:35.180 --> 00:22:38.750
So what I've done is I've
created a new button here.

00:22:38.830 --> 00:22:44.360
And of course we actually
need to import Java AWT.

00:22:46.120 --> 00:22:50.820
to get access to color constants.

00:22:50.850 --> 00:22:53.000
So I've got a new button here.

00:22:53.030 --> 00:22:56.180
What if I go into my code and
I want to use one of those?

00:22:56.210 --> 00:22:58.320
Well, for one thing,
grid bag is not the friendliest

00:22:58.480 --> 00:22:59.780
place to manipulate things.

00:22:59.780 --> 00:23:03.180
So I'm going to go ahead-- although we
do provide you a lot of hints about what

00:23:03.370 --> 00:23:06.820
the various insets are and so forth,
and you can visually manipulate them.

00:23:06.820 --> 00:23:07.620
That's kind of nice.

00:23:07.620 --> 00:23:11.540
But I'm going to flip back to xy layout,
so I can go ahead and use absolute

00:23:11.540 --> 00:23:13.580
positioning and bring my new bean in.

00:23:13.640 --> 00:23:14.540
How hard is it?

00:23:14.580 --> 00:23:16.880
Well, you could add it to the palette
using a couple of steps.

00:23:16.930 --> 00:23:19.500
But you could also just say,
I'd like to use the Any Bean tool

00:23:19.640 --> 00:23:21.240
and just go out and find it.

00:23:21.240 --> 00:23:25.430
And so in this case,
I have this com_borland--

00:23:25.510 --> 00:23:26.960
we're still in samples,
right?

00:23:26.970 --> 00:23:28.940
Welcome my button.

00:23:29.000 --> 00:23:33.260
So I can go and pick a new button that
I've created and drop it in place.

00:23:33.260 --> 00:23:36.140
Green background setting
was not a good choice.

00:23:36.140 --> 00:23:36.630
I take it.

00:23:36.640 --> 00:23:43.910
Let's go ahead and set the
foreground color instead.

00:23:46.260 --> 00:23:48.690
Let's change this to set foreground.

00:23:48.730 --> 00:23:49.960
I don't need to spell the whole thing.

00:23:49.960 --> 00:23:52.180
Code Insight will give me a hand there.

00:23:52.480 --> 00:23:54.710
Go ahead and compile that.

00:23:55.850 --> 00:23:59.660
and come back to welcome frame now you
notice a couple of interesting things

00:23:59.780 --> 00:24:04.210
one I change the class on the fly and we
picked up the new version of the class

00:24:04.310 --> 00:24:08.080
and injected into your existing a code
here so you can do it or if development

00:24:08.080 --> 00:24:11.080
you don't need to shut down and restart
or anything like that will just pick

00:24:11.150 --> 00:24:14.270
up new versions the being as fast as
you can throw them at us but second

00:24:14.350 --> 00:24:18.710
you'll notice that we have a new being
dropped in just like that now let's

00:24:18.710 --> 00:24:23.770
go one step further I could go zillions
of steps further but this is a a limited

00:24:23.940 --> 00:24:33.930
session of course I'm gonna do a get foo
method and a public void set foo method

00:24:35.460 --> 00:24:38.560
And I'm going to be really obnoxious
and not do anything with the value.

00:24:38.670 --> 00:24:43.080
Perhaps GetFu will always return-- sorry.

00:24:43.080 --> 00:24:46.580
Go ahead and compile this.

00:24:46.620 --> 00:24:49.990
Flip back to my welcome frame.

00:24:53.760 --> 00:24:55.730
Are we seeing just paint issues?

00:24:55.850 --> 00:25:00.130
And what we'll see is that the foo
showed up in our inspector automatically.

00:25:00.270 --> 00:25:01.380
No work on my behalf.

00:25:01.570 --> 00:25:04.700
It notices that it's a string and
gives you a string type editor for it.

00:25:08.400 --> 00:25:10.400
That's JavaBeans and the visual designer.

00:25:10.400 --> 00:25:13.340
There's some incredibly slick
stuff that you can do here.

00:25:13.400 --> 00:25:16.380
I could get into database components,
what have you.

00:25:16.430 --> 00:25:18.380
If we have enough time,
we'll come back and we'll

00:25:18.390 --> 00:25:19.400
look at some of those things.

00:25:19.400 --> 00:25:24.390
But if we can return to the slides,
we'll move on from visual design.

00:25:25.300 --> 00:25:27.530
Java server pages and servlets.

00:25:27.630 --> 00:25:30.180
This is a big deal for a lot
of people looking at Java for

00:25:30.290 --> 00:25:31.580
server-side development.

00:25:31.580 --> 00:25:36.010
It's a technology that's blessed
by Sun as the standard way of

00:25:36.010 --> 00:25:40.160
doing dynamic content because,
of course, in the web,

00:25:40.160 --> 00:25:42.420
static HTML is yesterday.

00:25:42.420 --> 00:25:43.600
That's not interesting anymore.

00:25:43.600 --> 00:25:46.220
What we want is content
that's generated on the fly.

00:25:46.220 --> 00:25:48.950
And JBuilder provides some
very interesting support for

00:25:49.290 --> 00:25:52.320
dynamic web content through
Java server pages and servlets.

00:25:52.520 --> 00:25:55.480
One of the things, of course,
is that with JSPs,

00:25:55.620 --> 00:25:57.780
what you have is a mix of HTML and Java.

00:25:57.790 --> 00:26:02.180
Now, we wouldn't recommend that you
embed a lot of Java in your HTML.

00:26:02.180 --> 00:26:06.320
Typically, what you're going to embed are
references to significant other

00:26:06.320 --> 00:26:10.730
technology that you maintain elsewhere
so that you don't have your presentation

00:26:10.730 --> 00:26:12.910
and your behavior too intermixed.

00:26:12.920 --> 00:26:17.160
But it still gives you the flexibility
of choosing on a variety of

00:26:17.160 --> 00:26:22.460
interesting ways what content to call
in dynamically into your static HTML.

00:26:22.540 --> 00:26:24.960
It's just that we need a
way to edit this stuff.

00:26:24.960 --> 00:26:27.270
Also, we need to be able to run it.

00:26:27.270 --> 00:26:32.550
So you could take that JSP page and set
up a server and get the server running

00:26:32.560 --> 00:26:34.650
and open your web browser and view it,
but it would be nice if

00:26:34.720 --> 00:26:36.280
we did something there,
so we'll show you that.

00:26:36.400 --> 00:26:39.360
And, of course,
all the way through to actually

00:26:39.400 --> 00:26:41.290
viewing it in an HTML viewer.

00:26:41.440 --> 00:26:43.920
JBuilder integrates this whole process,
and we'll see how.

00:26:44.000 --> 00:26:46.490
There are a bunch of new
things in JBuilder 5 that,

00:26:46.490 --> 00:26:48.600
if you're familiar
with servlets and JSPs,

00:26:48.600 --> 00:26:50.220
might be of interest to you.

00:26:50.620 --> 00:26:52.520
Support for multiple servlet contexts.

00:26:52.520 --> 00:26:53.320
This is one of them.

00:26:53.320 --> 00:26:56.680
Before,
we supported a single servlet context,

00:26:56.680 --> 00:27:00.870
and that was sort of annoying if you
needed to integrate several different

00:27:01.710 --> 00:27:06.620
servlets which had references to,
quote, "absolute positions" within their

00:27:06.730 --> 00:27:08.400
context that conflicted with one another.

00:27:08.490 --> 00:27:11.940
If you integrated those into one project,
things got confusing.

00:27:11.990 --> 00:27:15.810
So now we allow you to separate
those into two separate servlet

00:27:15.810 --> 00:27:20.500
contexts that have their own root
level for the set of HTML references.

00:27:20.500 --> 00:27:22.520
It's also interesting
to generate WAR files.

00:27:22.520 --> 00:27:23.210
Why?

00:27:23.220 --> 00:27:25.910
Before,
JSPs and servlets were individual files

00:27:26.020 --> 00:27:27.820
that you sort of managed on your own.

00:27:28.060 --> 00:27:31.020
Now there's a new
standard for web archives,

00:27:31.020 --> 00:27:33.410
WARS,
that you want to be able to deploy a

00:27:33.470 --> 00:27:38.420
whole set of functionality in one go,
and JBuilder will build your WAR for you.

00:27:38.450 --> 00:27:42.950
Also, vaguely related, but, you know,
didn't want to slide on its own,

00:27:42.960 --> 00:27:44.120
Web Start bundling.

00:27:44.480 --> 00:27:47.740
Did anybody here see the
Web Start demo in the Java intro?

00:27:47.740 --> 00:27:48.850
A couple of people here.

00:27:48.970 --> 00:27:52.490
So Web Start is a neat way of
delivering your application.

00:27:52.540 --> 00:27:55.980
What you can do is bundle it up
with a web page with a bunch of

00:27:55.980 --> 00:27:59.220
things and a bunch of XML and,
well, wouldn't it be nice if you

00:27:59.220 --> 00:28:00.520
didn't have to do that?

00:28:00.520 --> 00:28:01.420
Somebody else did it for you.

00:28:01.550 --> 00:28:04.170
And that's what JBuilder's here for.

00:28:04.890 --> 00:28:07.330
We're also going to talk a
little bit about Java debugging.

00:28:07.360 --> 00:28:09.720
I didn't want to do too many flips
back and forth between the slides,

00:28:09.840 --> 00:28:11.440
so we'll have a look
at this a little bit.

00:28:11.590 --> 00:28:14.730
Because if there's anything
you spend perhaps as much time

00:28:14.820 --> 00:28:17.800
in as your source code editor,
it's probably your debugger.

00:28:17.800 --> 00:28:20.130
I'll admit it, I don't write bug-free
code the first pass,

00:28:20.130 --> 00:28:22.900
but by the time I'm done with it,
it's in great shape because we provide

00:28:22.900 --> 00:28:24.650
you a lot of really powerful tools.

00:28:24.900 --> 00:28:27.020
So we'll talk a little bit
about the Java debugger.

00:28:27.020 --> 00:28:30.230
It's an integrated debugger in the IDE,
and a couple of the things that it

00:28:30.230 --> 00:28:32.750
does that are really noteworthy,
not only can you browse

00:28:32.830 --> 00:28:34.960
through objects and so forth,
but we provide full

00:28:34.960 --> 00:28:36.400
expression evaluation.

00:28:36.400 --> 00:28:39.310
That means not only can I see
the value of a variable,

00:28:39.310 --> 00:28:42.470
I can call a method on an object
and see the return of that,

00:28:42.470 --> 00:28:45.800
or I can even modify it by
calling a setter or something.

00:28:45.800 --> 00:28:48.600
So it's a very sophisticated
debugger from that perspective.

00:28:48.690 --> 00:28:52.570
And it provides you the ability
to edit absolutely any data type.

00:28:52.610 --> 00:28:54.870
A lot of people will say, yeah,
we can modify data types.

00:28:54.930 --> 00:28:57.770
We can modify data in ours,
but they usually mean we

00:28:57.800 --> 00:29:00.670
can modify primitives,
integers, and characters,

00:29:00.800 --> 00:29:02.610
and if you're really lucky,
maybe strings.

00:29:02.610 --> 00:29:05.470
But in practice, we can actually edit
just about any data type,

00:29:05.470 --> 00:29:06.610
which is pretty neat.

00:29:06.610 --> 00:29:09.170
It also has extremely
flexible breakpoints.

00:29:09.340 --> 00:29:12.220
Everybody's used to seeing the click
on a line and get a breakpoint,

00:29:12.320 --> 00:29:14.870
but we provide line breakpoints,
class breakpoints.

00:29:15.050 --> 00:29:15.710
That's kind of interesting.

00:29:15.800 --> 00:29:19.620
I want to know any time anybody
calls any method in a given class.

00:29:19.620 --> 00:29:22.090
And you can use wildcards
for the name of the class.

00:29:22.090 --> 00:29:24.870
So you could say any class with the
letter E or something equal to E.

00:29:24.960 --> 00:29:25.340
That's basically silly.

00:29:25.340 --> 00:29:27.470
But there are times.

00:29:27.500 --> 00:29:29.520
Anything in this package, for example.

00:29:29.520 --> 00:29:31.960
Field access and field modification.

00:29:31.960 --> 00:29:36.070
If the underlying VM supports it,
we allow you to provide breakpoints

00:29:36.190 --> 00:29:40.490
on modification and access to fields,
which is pretty slick stuff.

00:29:40.640 --> 00:29:45.640
That's similar in some ways to database
breakpoints in traditional C debugger,

00:29:45.770 --> 00:29:50.420
except that we're able to say for any
member or for any instance of this class,

00:29:50.550 --> 00:29:52.840
whenever this field is touched.

00:29:52.840 --> 00:29:54.880
So you don't need to try to
track down where all of this is.

00:29:54.900 --> 00:29:57.640
And we can also provide
breakpoints on exceptions.

00:29:57.640 --> 00:30:00.290
So you want to know, of course,
I've got an exception

00:30:00.290 --> 00:30:03.150
handler for my IO exception,
but I want to stop if an

00:30:03.150 --> 00:30:05.280
IO exception is actually thrown.

00:30:05.280 --> 00:30:06.850
And we can do that with our debugger.

00:30:06.860 --> 00:30:10.460
Also, of course, once the debugger has
a breakpoint defined,

00:30:10.460 --> 00:30:12.920
you want to be able to refine it further.

00:30:12.920 --> 00:30:15.890
Provide an expression that gets
evaluated or provide a number of

00:30:15.990 --> 00:30:19.130
times through that it needs to
go before it will actually break.

00:30:19.180 --> 00:30:22.850
Or even provide an expression that gets
logged and not have it stop at all.

00:30:22.850 --> 00:30:24.880
These are all features of
the debugger that we have.

00:30:24.880 --> 00:30:26.880
So let's see both of these things.

00:30:26.880 --> 00:30:30.480
We'll go through some of the web
technology and we'll go through a

00:30:30.480 --> 00:30:33.080
little bit of the debugging technology.

00:30:33.080 --> 00:30:37.380
So I'm going to start a brand new
project to look at some of the web stuff.

00:30:39.810 --> 00:30:43.510
And within this project,
I'm going to create just an empty JSP.

00:30:43.820 --> 00:30:47.350
Nothing particularly fascinating here,
but actually, yeah,

00:30:47.500 --> 00:30:48.660
let's go ahead and do that.

00:30:48.660 --> 00:30:58.700
So where's my project?

00:31:04.380 --> 00:31:07.430
And you'll see that,
and actually let's add

00:31:07.430 --> 00:31:08.780
that to my project as well.

00:31:08.780 --> 00:31:09.760
It's probably something
I shouldn't have done.

00:31:09.760 --> 00:31:12.140
By the way,
a lot of you may have seen this

00:31:12.140 --> 00:31:16.260
file browser that comes up,
and it's not the standard file browser.

00:31:16.350 --> 00:31:16.760
Why?

00:31:16.760 --> 00:31:18.650
We do some interesting things with it.

00:31:19.320 --> 00:31:24.880
In Java, you need to be able to drill
into some file types that you

00:31:24.880 --> 00:31:27.200
might not normally look into.

00:31:27.200 --> 00:31:30.230
For example, if I've got a jar,
it would be sort of nice to be able

00:31:30.230 --> 00:31:33.790
to see the directories in the jar,
the files in those individual

00:31:33.790 --> 00:31:37.290
directories inside the jar,
and be able to open those files.

00:31:37.290 --> 00:31:38.510
We provide you that kind of depth.

00:31:38.620 --> 00:31:41.380
So there's a lot of extra
functionality tacked in here.

00:31:41.380 --> 00:31:44.260
But that's not what I was about to show.

00:31:44.260 --> 00:31:45.860
Excuse me for getting sidetracked.

00:31:45.860 --> 00:31:47.800
I'm easily excited by
my own product here.

00:31:52.970 --> 00:31:56.920
So we'll go ahead with this foo.jsp.

00:31:56.920 --> 00:32:02.640
And with this jsp, of course,
what we can do is write HTML.

00:32:03.010 --> 00:32:05.700
So I'm going to write
just some basic HTML here.

00:32:05.700 --> 00:32:12.860
You'll notice that the structure
pane gives you the same ability to

00:32:12.860 --> 00:32:12.860
jump to tags as it gave within--

00:32:14.120 --> 00:32:15.130
within Java source.

00:32:15.320 --> 00:32:17.650
So my body's not going to
be especially interesting.

00:32:17.870 --> 00:32:23.950
But how about the random
number for the day is?

00:32:24.230 --> 00:32:27.360
And we'll go ahead and spit out
the random number for the day.

00:32:27.500 --> 00:32:30.300
You'll see that these special
tags are colored differently.

00:32:30.300 --> 00:32:30.600
Why?

00:32:30.600 --> 00:32:32.920
Because they're an indication
of something very interesting.

00:32:32.960 --> 00:32:36.970
We've now switched from HTML mode,
where we're syntax highlighting in HTML,

00:32:36.990 --> 00:32:40.200
to Java mode, where we'll start
recognizing Java keywords,

00:32:40.200 --> 00:32:41.170
things like if.

00:32:41.170 --> 00:32:42.760
That's pretty cool.

00:32:42.760 --> 00:32:46.610
But it's even cooler when you
start doing something like out dot,

00:32:46.610 --> 00:32:49.250
and it recognizes that
I'm embedded in a JSP,

00:32:49.440 --> 00:32:51.390
and out has a meaning within a JSP.

00:32:51.390 --> 00:32:54.110
It's a variable of a particular type,
and code insight kicks in.

00:32:54.210 --> 00:32:57.200
And shows you these are the various
methods that you can use here.

00:32:57.200 --> 00:33:00.660
So our coding tools work even
in this hybrid environment,

00:33:00.730 --> 00:33:02.660
which is extremely powerful.

00:33:02.830 --> 00:33:09.850
and I could go ahead and
print something in here,

00:33:09.850 --> 00:33:09.850
what have you.

00:33:09.850 --> 00:33:13.800
What I'm going to do is just go to
a prefab project just to save time.

00:33:19.790 --> 00:33:22.420
Where I have a more
sophisticated example.

00:33:22.690 --> 00:33:26.820
This calendar JSP goes through
and uses embedded Java,

00:33:26.820 --> 00:33:31.980
as you can see, a mix of Java and HTML,
to create a calendar for the current

00:33:32.090 --> 00:33:34.040
month with the current day selected.

00:33:34.040 --> 00:33:38.110
All I need to do to run that is
just go ahead and say web run.

00:33:38.110 --> 00:33:41.640
And what we'll do is notice, hey,
you're trying to run a JSP.

00:33:41.640 --> 00:33:45.150
Let's make sure that that's legal first,
so we'll precompile it so that you

00:33:45.220 --> 00:33:47.120
can fix any errors within the IDE.

00:33:47.680 --> 00:33:49.800
Then we'll go ahead and start Tomcat.

00:33:49.910 --> 00:33:50.820
Why is that interesting?

00:33:50.820 --> 00:33:53.890
Because Tomcat is the
JSP engine for Apache,

00:33:54.050 --> 00:33:58.660
which, of course, is your web server,
courtesy Mac OS X server.

00:33:58.660 --> 00:34:02.160
So we're testing using the same
underlying JSP engine that you'll

00:34:02.180 --> 00:34:03.860
be using on the server side.

00:34:03.860 --> 00:34:08.290
We then feed it the JSP,
take the results of processing the JSP,

00:34:08.290 --> 00:34:11.430
and show it in our
integrated HTML viewer.

00:34:11.440 --> 00:34:13.960
So you've got the complete experience,
end to end.

00:34:20.790 --> 00:34:21.420
Pretty cool stuff.

00:34:21.830 --> 00:34:25.080
Along the way,
and we'll just shut that browser down,

00:34:25.080 --> 00:34:27.780
and you can, of course,
see the actual source that was emitted.

00:34:27.780 --> 00:34:30.740
If you want to have a look
at exactly what was emitted,

00:34:30.740 --> 00:34:31.220
etc.

00:34:31.220 --> 00:34:37.730
We created this web app,
and a web app is this servlet context.

00:34:37.880 --> 00:34:40.630
A web application defines a context.

00:34:40.700 --> 00:34:45.080
It also defines a deployment descriptor,
which we provide a graphical editor for,

00:34:45.080 --> 00:34:49.120
so that if you want to
build a web archive,

00:34:49.120 --> 00:34:53.410
you can do so just by going ahead
and building this particular web app,

00:34:53.730 --> 00:34:58.060
and we'll build the WAR file for
you and do all of the packaging

00:34:58.180 --> 00:35:03.460
that's required in the WAR file to
include the actual executable code,

00:35:03.460 --> 00:35:06.180
the JSP itself, etc., etc.

00:35:06.180 --> 00:35:08.400
So a lot of technology bundled together.

00:35:09.920 --> 00:35:13.410
I also mentioned that we can
do Web Start bundling for you.

00:35:13.410 --> 00:35:16.000
And if you want to take an application
and deploy it to Web Start,

00:35:16.140 --> 00:35:17.900
this is pretty powerful stuff.

00:35:18.010 --> 00:35:21.850
So I've got an application,
this Welcome app that we built earlier,

00:35:21.850 --> 00:35:27.190
and I'm going to use the Archive Builder
to go ahead and bundle that up as an

00:35:27.190 --> 00:35:30.890
application for me and build the jar.

00:35:31.810 --> 00:35:34.700
Now I want to go ahead and turn
that into a Web Start application.

00:35:34.850 --> 00:35:35.880
How tough is that?

00:35:36.040 --> 00:35:40.010
Well, we go to the Web tab and say
I want a Web Start launcher.

00:35:41.330 --> 00:35:45.570
I want to call this my welcome demo.

00:35:45.600 --> 00:35:47.240
It's going to use the default web app.

00:35:47.320 --> 00:35:48.210
That's fine.

00:35:48.330 --> 00:35:53.800
The jar file is the welcome
jar that I just generated.

00:35:54.070 --> 00:35:57.080
That, of course, is the directory.

00:35:57.360 --> 00:35:58.720
This is the file.

00:35:58.760 --> 00:36:00.260
JAR files are a little weird that way.

00:36:00.350 --> 00:36:01.620
They're a little bit of both.

00:36:01.660 --> 00:36:03.230
And I want it to, yes,
to go ahead and create

00:36:03.320 --> 00:36:04.410
that home page for me.

00:36:04.440 --> 00:36:07.760
I want to give it some meaningful
information about the title,

00:36:07.760 --> 00:36:10.710
the vendor, the description,
which can help the user understand what

00:36:10.800 --> 00:36:13.980
application it is they're installing,
and finish.

00:36:14.010 --> 00:36:18.770
And what it's done is it's
built the HTML for Welcome Demo

00:36:18.860 --> 00:36:21.550
for the Web Start application.

00:36:21.830 --> 00:36:25.410
So if your user were to go to this page,
what they would get is

00:36:25.550 --> 00:36:29.950
this message that says,
"Hey, you don't have Web Start installed.

00:36:29.990 --> 00:36:32.750
It's a plug-in for your browser
that allows you to automatically

00:36:32.750 --> 00:36:35.400
download Java applications,
and you need to install it like any

00:36:35.490 --> 00:36:39.290
other plug-in." This page automatically
detects that the plug-in isn't installed,

00:36:39.440 --> 00:36:42.950
gives you the information about
where to go to get the plug-in.

00:36:43.080 --> 00:36:46.120
Unfortunately, Apple hasn't finished
the plug-in just yet.

00:36:46.280 --> 00:36:49.700
So it'll be up there as soon as
the Web Start project is finished,

00:36:49.700 --> 00:36:51.540
and your users would
be able to get at it.

00:36:51.760 --> 00:36:54.880
But it's also built the
other piece that's necessary,

00:36:54.880 --> 00:36:59.390
the JNLP file, which is an XML file that
contains the information about

00:36:59.390 --> 00:37:00.930
my application and its structure.

00:37:01.080 --> 00:37:04.180
So it's done all the work
necessary to go ahead and build

00:37:04.280 --> 00:37:06.880
a Web Startable application,
which is pretty cool stuff.

00:37:09.100 --> 00:37:10.960
So hang on to your seat belts.

00:37:10.960 --> 00:37:13.760
We'll keep going here at this pace,
and we'll jump right on into

00:37:13.760 --> 00:37:16.160
the debugging side of things.

00:37:16.290 --> 00:37:17.520
Just quick pulse.

00:37:17.540 --> 00:37:21.280
Are we going way too fast,
or is this about right?

00:37:21.430 --> 00:37:21.940
Good?

00:37:21.940 --> 00:37:23.040
OK.

00:37:23.040 --> 00:37:24.920
We'll keep moving.

00:37:25.030 --> 00:37:28.960
So let's launch into the debugging stuff.

00:37:30.360 --> 00:37:35.730
I'm going to go and open another project
that I have lying around in my home.

00:37:35.800 --> 00:37:40.130
That has a couple of really simple
things that we can examine and

00:37:40.130 --> 00:37:42.960
manipulate for debugging purposes.

00:37:43.030 --> 00:37:44.890
I didn't cook up anything
that had any bugs,

00:37:44.940 --> 00:37:45.690
I'm sorry.

00:37:45.900 --> 00:37:48.160
But if you want to see
the debugger at work,

00:37:48.360 --> 00:37:50.770
you just need to know that you
have certain facilities that

00:37:50.780 --> 00:37:52.310
you've been used to all along.

00:37:52.430 --> 00:37:55.400
So what we'll do is we'll just
place the typical line break

00:37:55.410 --> 00:37:57.260
point in this and get it started.

00:37:57.430 --> 00:37:59.170
Launch the debugger.

00:37:59.290 --> 00:38:01.850
The debugger needs to
know the main class,

00:38:01.850 --> 00:38:04.880
which apparently I never
bothered to define.

00:38:08.600 --> 00:38:14.140
And it brings up a user interface
at the bottom of the screen that

00:38:14.140 --> 00:38:17.220
gives me my full debugging power
while still having access to

00:38:17.220 --> 00:38:19.200
everything else in my environment.

00:38:19.320 --> 00:38:21.920
I can still switch
between multiple projects.

00:38:22.080 --> 00:38:23.380
I can compile things.

00:38:23.430 --> 00:38:24.740
I can edit code.

00:38:24.740 --> 00:38:26.080
I can do everything I want.

00:38:26.110 --> 00:38:27.560
And there's a debugger down there.

00:38:27.600 --> 00:38:32.710
And you'll note the debugger has
a tab at the bottom of the screen.

00:38:32.840 --> 00:38:33.470
Why?

00:38:33.610 --> 00:38:36.320
Because you can have multiple
debuggers open concurrently.

00:38:36.320 --> 00:38:38.440
So if you're working on a
client server application,

00:38:38.470 --> 00:38:41.510
you can be debugging the client
and the server simultaneously.

00:38:41.520 --> 00:38:43.930
Each one has a full
debugger user interface.

00:38:43.950 --> 00:38:47.720
Just, you know, little tidbits.

00:38:50.000 --> 00:41:12.300
[Transcript missing]

00:41:13.900 --> 00:41:14.900
It's pretty cool stuff.

00:41:14.900 --> 00:41:19.480
It means that I now have full control
over any data type in my environment.

00:41:19.480 --> 00:41:22.420
I can actually go in,
and I can cut objects.

00:41:22.680 --> 00:41:24.040
Let's see.

00:41:24.040 --> 00:41:25.040
There we go.

00:41:25.040 --> 00:41:27.620
You don't have the key
bindings I'm used to.

00:41:27.720 --> 00:41:30.500
So I can cut this object,
and I wind up with a null value.

00:41:30.500 --> 00:41:35.370
But I could also go through and change
this value by selecting Change Value.

00:41:35.380 --> 00:41:37.960
And I am asked to enter an
expression of type string,

00:41:37.990 --> 00:41:41.180
by which I do not mean just
a collection of characters.

00:41:41.180 --> 00:41:44.920
If I wanted the collection of characters,
sure, I could go ahead and type that in.

00:41:44.920 --> 00:41:49.250
I mean, if I want to change this,
I can now create a string

00:41:49.310 --> 00:41:55.060
by doing something like,
say, oh, this.getClass.getName.

00:41:55.060 --> 00:41:58.750
And we'll get the name of the
current class and set that,

00:41:58.820 --> 00:42:00.930
debugDemo.debugName.

00:42:04.770 --> 00:42:05.740
So pretty slick stuff.

00:42:05.930 --> 00:42:09.060
A very, very,
very powerful debugging environment.

00:42:09.060 --> 00:42:12.320
We won't go through all of the features,
but just sort of as a quick glimpse,

00:42:12.350 --> 00:42:17.500
we have the ability to set
watches on individual items.

00:42:17.500 --> 00:42:20.150
So if I want to watch
this particular object,

00:42:20.250 --> 00:42:24.140
I can create an object watch,
call it buddy, and it will show up on

00:42:24.140 --> 00:42:25.590
the list of watches.

00:42:25.620 --> 00:42:27.690
I can see all of the
classes that are loaded.

00:42:27.710 --> 00:42:34.600
So if I want to see static variables,
I could drill in and say that Java, IO,

00:42:34.600 --> 00:42:34.680
and Java.

00:42:34.700 --> 00:42:36.970
So buffered stream has
a default buffered size,

00:42:37.080 --> 00:42:39.190
so I can go and examine
static information,

00:42:39.190 --> 00:42:42.480
see the set of breakpoints
that are currently set,

00:42:42.480 --> 00:42:45.850
add various types of breakpoints,
go in and look at the

00:42:45.970 --> 00:42:49.230
breakpoints we already have,
and say, you know,

00:42:49.280 --> 00:42:52.170
I'd like to log a message
instead of stopping,

00:42:52.170 --> 00:42:55.710
or I'd like to provide a
condition or a pass count.

00:42:55.710 --> 00:42:57.480
So again, a lot of flexibility on that.

00:42:57.550 --> 00:43:00.450
And get a list of all of the
classes for which I'm not

00:43:00.450 --> 00:43:02.620
interested in stepping into them.

00:43:02.640 --> 00:43:07.150
Have you ever before done the
step into and then realized,

00:43:07.150 --> 00:43:11.730
oh no, I've stepped into somebody else's
library and I'm debugging their code,

00:43:11.740 --> 00:43:15.850
but step over is no good either
because you've got this huge expression

00:43:15.850 --> 00:43:19.960
that calls a few of people's other
methods and then calls one of yours.

00:43:19.960 --> 00:43:23.610
Well, here you can block particular
packages or particular classes

00:43:23.730 --> 00:43:25.750
from being traced into,
and we block all the

00:43:25.830 --> 00:43:26.790
Java ones by default.

00:43:26.930 --> 00:43:28.260
Or you can trace into them.

00:43:28.260 --> 00:43:29.460
That's your choice.

00:43:29.460 --> 00:43:31.210
So pretty powerful stuff.

00:43:31.210 --> 00:43:34.220
And lastly, there's one tab at the top
that I'm going to show you.

00:43:34.220 --> 00:43:34.720
It's called the top here.

00:43:34.720 --> 00:43:40.580
You see this little screen icon that if
I step over something that sends output,

00:43:40.590 --> 00:43:43.470
will go green to indicate that
there is output waiting for me,

00:43:43.630 --> 00:43:45.460
console I/O, from my application.

00:43:45.460 --> 00:43:48.060
And actually,
you can type into this as well,

00:43:48.060 --> 00:43:49.660
and it provides a full console I/O.

00:43:49.660 --> 00:43:51.460
So if you're not doing
a graphical application,

00:43:51.460 --> 00:43:55.630
you again have everything you need
to work on your server-side app

00:43:55.750 --> 00:43:59.000
or your console-based application
directly within the environment

00:43:59.000 --> 00:44:01.490
without having to turn elsewhere.

00:44:01.900 --> 00:44:09.200
[Transcript missing]

00:44:11.100 --> 00:44:13.160
And we'll turn back to the slides.

00:44:13.170 --> 00:44:15.320
XML.

00:44:15.320 --> 00:44:17.640
Somebody managed to
miss the XML revolution.

00:44:17.640 --> 00:44:19.950
It seems that this has taken over.

00:44:20.280 --> 00:44:23.500
All of us are now to
do everything in XML.

00:44:23.500 --> 00:44:26.260
According to some magazines
we should stop programming

00:44:26.260 --> 00:44:28.140
in Java and program in XML.

00:44:28.140 --> 00:44:30.930
Other magazines would tell
us that in fact XML will

00:44:30.930 --> 00:44:32.830
simply solve all our problems.

00:44:33.020 --> 00:44:35.900
And in reality those of us who've
worked with it a little bit,

00:44:36.110 --> 00:44:39.160
just enough to get the feel for it,
understand that what XML is,

00:44:39.160 --> 00:44:43.690
is it's a very powerful tool for solving
a very small part of every problem.

00:44:45.050 --> 00:44:48.120
So if every single problem is
going to be solved this way,

00:44:48.120 --> 00:44:51.300
then I better have some tools to
work with XML because it's not

00:44:51.300 --> 00:44:52.740
going to solve things for me.

00:44:52.740 --> 00:44:56.430
I better have some basic understanding
of what it is capable of and my

00:44:56.430 --> 00:44:58.550
tools had better let me work with it.

00:44:58.570 --> 00:45:02.490
And that's what JBuilder does is it
provides XML support not in terms of

00:45:02.500 --> 00:45:06.550
being an XML IDE but providing the
kinds of things that a Java developer is

00:45:06.550 --> 00:45:11.210
likely to be interested in because you're
going to interact with XML a little bit.

00:45:11.210 --> 00:45:12.410
Everybody is.

00:45:13.220 --> 00:45:16.660
So XML support provides us some basic
navigation and editing facilities,

00:45:16.660 --> 00:45:20.900
validation facilities, DTD generation,
and transformation.

00:45:20.900 --> 00:45:25.500
XML by itself is neat in a way, but XSL,
which allows me to provide a style

00:45:25.500 --> 00:45:29.740
sheet for transforming one piece
of XML into another piece of XML,

00:45:29.810 --> 00:45:31.460
is much cooler still.

00:45:31.460 --> 00:45:33.210
So we'll show you what
we've been working on,

00:45:33.310 --> 00:45:35.160
what's new in JBuilder 5 in terms of XML.

00:45:38.370 --> 00:45:41.350
I'm going to go and
open a sample project.

00:45:41.430 --> 00:45:43.190
It actually comes with the product.

00:45:43.340 --> 00:45:47.890
We provide zillions of little
samples to help you get started.

00:45:50.300 --> 00:45:51.680
Yes, I'm sorry.

00:45:51.730 --> 00:45:54.100
Let me just make sure that, yes,
there's a demo.

00:45:54.100 --> 00:45:57.590
That was your cue, I'm sorry.

00:45:57.890 --> 00:46:03.780
If I drill down into an existing
project here that's designed to

00:46:03.780 --> 00:46:07.940
showcase some of the XML functionality,
we'll see that what we have in here

00:46:07.940 --> 00:46:10.090
is a DTD and a couple of XSL files.

00:46:10.100 --> 00:46:11.730
We can look at the DTD.

00:46:11.790 --> 00:46:14.260
It's exciting if you are
into that sort of thing.

00:46:14.260 --> 00:46:15.730
We can look at the XSL files.

00:46:15.780 --> 00:46:18.490
And you'll see that we do
syntax highlighting for them.

00:46:18.540 --> 00:46:22.540
We recognize the file type and
we provide syntax highlighting.

00:46:22.640 --> 00:46:25.330
We provide basic navigation facilities.

00:46:25.450 --> 00:46:26.140
So that's pretty cool.

00:46:26.140 --> 00:46:26.820
It gives you something.

00:46:27.800 --> 00:46:32.690
But a DTD is interesting partially
because it describes what a

00:46:32.690 --> 00:46:34.950
valid XML file looks like.

00:46:34.950 --> 00:46:39.140
So one of the things we should be
able to do is take DTD and say,

00:46:39.140 --> 00:46:41.940
you know,
I'd like to generate an XML file

00:46:41.940 --> 00:46:45.540
that complies with this,
that uses the XML employees

00:46:45.540 --> 00:46:47.180
as the root element.

00:46:47.180 --> 00:46:56.610
And I'm going to go ahead and
specify that we're going to

00:46:56.610 --> 00:46:56.610
use the system DTD here for...

00:46:57.080 --> 00:47:01.280
is a great example of how
to use Blake Stone to get

00:47:01.390 --> 00:47:04.000
the most out of your data.

00:47:28.000 --> 00:47:29.840
So, we've got some XML here, and again,
we have the same sort of structural

00:47:29.840 --> 00:47:34.000
view here that we can parse through
and find any of this information.

00:47:34.000 --> 00:47:39.000
It'd be kind of nice if I could come
back and validate this particular XML,

00:47:39.000 --> 00:47:41.070
and sure enough,
we can say validate this,

00:47:41.070 --> 00:47:44.000
and we'll figure out what
DTD it's involved with.

00:47:44.000 --> 00:47:49.200
And apparently, ah,
I specified the wrong path to get to it,

00:47:49.200 --> 00:47:53.400
so it is invalid,
but let me validate that again,

00:47:53.400 --> 00:47:55.000
and it is valid.

00:47:55.000 --> 00:47:57.000
Now, if I make a mistake in it...

00:47:57.720 --> 00:48:01.230
First thing you'll notice is our
little error insight kicks in and says,

00:48:01.230 --> 00:48:02.610
hey, this doesn't even balance.

00:48:02.650 --> 00:48:05.540
So you don't need to go all the
way to validation to find out

00:48:05.640 --> 00:48:07.460
that this isn't even legal XML.

00:48:07.460 --> 00:48:09.520
We'll find that for you on the fly.

00:48:09.520 --> 00:48:12.830
But once you get to the point where
this is legal XML and you want to know

00:48:12.830 --> 00:48:15.950
whether it really complies with the DTD,
that's a little bit more

00:48:15.950 --> 00:48:17.210
like the compile pass.

00:48:17.210 --> 00:48:20.310
And we'll do the validation,
tell you where the error is,

00:48:20.310 --> 00:48:23.110
and then you can go through
and actually correct it.

00:48:23.640 --> 00:48:28.020
So that gets you some of the sort
of mechanics of working with XML.

00:48:28.090 --> 00:48:30.140
But transformation is
what's really important.

00:48:30.140 --> 00:48:32.280
You get your raw data this way,
and if you wanted to

00:48:32.280 --> 00:48:34.600
present it to somebody,
you need to transform it into

00:48:34.600 --> 00:48:36.150
something other than raw XML.

00:48:36.160 --> 00:48:40.770
And the typical thing to do
is to transform it into HTML.

00:48:41.640 --> 00:48:45.750
So if we go to the transform view,
we provide you the ability

00:48:45.940 --> 00:48:50.150
to pick any style sheet,
and it's just telling me it couldn't find

00:48:50.270 --> 00:48:53.060
a style sheet for that particular one.

00:49:02.220 --> 00:49:08.040
And then I can pick one of those,
the list view or the table view,

00:49:08.040 --> 00:49:10.480
and it shows me the output of this.

00:49:10.590 --> 00:49:14.680
Now the output in this case isn't
necessarily exciting because it's

00:49:14.680 --> 00:49:19.580
going through another style sheet,
which I'll talk about in a second.

00:49:19.580 --> 00:49:23.180
But if we turn that off,
then you begin to see where

00:49:23.440 --> 00:49:27.000
the power of XML comes in,
is this ability to take this raw data,

00:49:27.040 --> 00:49:33.450
transform it, and show it to somebody
in another fashion.

00:49:33.450 --> 00:49:33.450
So now if I go into my raw data,

00:49:33.800 --> 00:49:35.700
It's actually here, isn't it?

00:49:35.860 --> 00:49:41.600
And say, I'd like to change this by
declaring another employee

00:49:44.800 --> 00:49:49.460
perhaps Steve Jobs,
and go back to my transformation

00:49:49.460 --> 00:49:50.870
view and refresh that.

00:49:51.210 --> 00:49:54.260
Then we'll go and apply that
same transformation and get

00:49:54.260 --> 00:49:56.300
this dynamic data thing going.

00:49:56.300 --> 00:49:59.670
So this is a set of tools that
doesn't solve your problem,

00:49:59.670 --> 00:50:02.360
because XML doesn't solve your problem.

00:50:02.500 --> 00:50:04.910
It's a set of tools to help
you get familiar with XML,

00:50:05.020 --> 00:50:07.550
to help you start learning
what XML is capable of,

00:50:07.550 --> 00:50:11.370
and to take advantage of some of
the XML libraries that we provide,

00:50:11.410 --> 00:50:13.800
because we provide the
Xerces parser and so forth,

00:50:13.880 --> 00:50:17.900
and we provide the libraries that define
those as part of your environment.

00:50:17.900 --> 00:50:22.260
So that's hopefully an exciting first
look at what we're doing with XML.

00:50:30.640 --> 00:50:35.590
So if we can get back to the slides here.

00:50:35.660 --> 00:50:36.910
That's all well and good.

00:50:37.000 --> 00:50:38.940
You know,
we can do pure Java development.

00:50:38.940 --> 00:50:42.600
We can do a bunch of cool
stuff with Java beans.

00:50:42.600 --> 00:50:47.200
But if you're a Macintosh user,
you know there's nothing quite

00:50:47.330 --> 00:50:48.850
like your native environment.

00:50:48.920 --> 00:50:51.970
And you've seen hints of some of
the facilities that are available.

00:50:51.970 --> 00:50:57.250
If you went to Steve Llewellyn's talk
on wrapping Cocoa APIs in Java beans,

00:50:57.250 --> 00:50:58.650
very cool stuff.

00:50:58.820 --> 00:51:02.300
The speech synthesis and recognition
and spell checking neatly wrapped

00:51:02.360 --> 00:51:05.720
up so that you can just use them
in an environment like JBuilder.

00:51:05.720 --> 00:51:08.770
And that's a hint that yes,
you can get direct access to

00:51:08.830 --> 00:51:10.930
Cocoa stuff from within JBuilder.

00:51:10.930 --> 00:51:13.800
So you could just drop those
beans in and take advantage of it.

00:51:13.860 --> 00:51:17.900
But in fact, you could go a little
bit further than that.

00:51:17.900 --> 00:51:23.300
You could go through and start writing
Cocoa applications in a pure sense.

00:51:23.300 --> 00:51:24.320
So we'll look at that.

00:51:24.400 --> 00:51:29.300
But we'll also talk a little bit
about how JBuilder... So JBuilder

00:51:29.400 --> 00:51:31.700
helps you with new classes in general.

00:51:31.700 --> 00:51:35.680
Because Apple provides you with a bunch
of classes that may not be familiar.

00:51:35.680 --> 00:51:38.590
If you're an MRJ user,
you may know some of them already.

00:51:38.770 --> 00:51:42.640
If you wait around a little while,
there's going to be a bunch more.

00:51:42.640 --> 00:51:46.530
And what's important about JBuilder
is that it dynamically adapts to

00:51:46.530 --> 00:51:48.640
any new class you can throw at it.

00:51:48.640 --> 00:51:52.160
So all of our coding tools,
Code Insight technology,

00:51:52.250 --> 00:51:55.000
our class browsers and
so on and so forth,

00:51:55.000 --> 00:51:57.350
will learn about new classes
that you throw at it and give

00:51:57.350 --> 00:51:58.660
you those same kinds of help.

00:51:58.680 --> 00:52:00.660
So we'll look at that
a little bit as well.

00:52:00.660 --> 00:52:04.660
But when it comes right down to it,
you're going to be left with a choice.

00:52:04.660 --> 00:52:10.690
You can use these tools to do pure
Java in a cross-platform sense or write

00:52:10.940 --> 00:52:15.410
pure Java code that really wrings every
last ounce of performance and flexibility

00:52:15.460 --> 00:52:17.420
out of the Macintosh platform.

00:52:17.450 --> 00:52:18.350
We don't make that choice.

00:52:18.490 --> 00:52:21.420
The choice is up to you.

00:52:21.420 --> 00:52:26.370
So let's have a little bit of a
look at what we can do in this area.

00:52:28.260 --> 00:52:33.700
Now, you may have noticed I don't
really believe in scripts here.

00:52:33.700 --> 00:52:36.600
I kind of like winging
things an awful lot more.

00:52:36.600 --> 00:52:39.470
So this is sort of a first
crack at some of this stuff,

00:52:39.470 --> 00:52:43.550
and I'm still waiting for answers from
a couple of Apple engineers because

00:52:43.550 --> 00:52:46.050
I started thinking about this on Monday.

00:52:47.200 --> 00:52:51.840
But it's really interesting to see
that I can sit down and write an

00:52:51.840 --> 00:52:57.200
application and take advantage of the
right way to do a Cocoa interface,

00:52:57.200 --> 00:52:59.320
which is not Java Bean,
so of course that means

00:52:59.320 --> 00:53:01.480
Interface Builder,
and all the power of JBuilder

00:53:01.590 --> 00:53:02.880
and meld them together.

00:53:02.880 --> 00:53:05.770
So we're going to use JBuilder,
and we're going to use Interface Builder,

00:53:05.770 --> 00:53:08.450
and we're going to tie the two
together into a brand new project.

00:53:08.520 --> 00:53:12.590
So if I create a new project...

00:53:19.760 --> 00:53:23.170
Within this project,
I'm going to create a new

00:53:23.340 --> 00:53:26.350
class that's my main class.

00:53:27.750 --> 00:53:32.300
And let's give this a
slightly better package name.

00:53:32.420 --> 00:53:35.760
So I'll put this in
the Cocoa demo package,

00:53:35.760 --> 00:53:42.630
and we'll call this Cocoa demo perhaps,
generate a main method.

00:53:45.730 --> 00:53:51.400
And keep my fingers crossed
that I actually remembered what

00:53:51.400 --> 00:53:54.470
I was doing and brought along

00:53:54.760 --> 00:53:55.960
My Cocoa main.

00:53:56.190 --> 00:53:57.480
Please excuse me.

00:53:57.590 --> 00:53:58.430
Okay.

00:53:58.640 --> 00:54:00.590
Not entirely scripted,
but I didn't want to torture

00:54:00.600 --> 00:54:02.380
you by going through this.

00:54:02.490 --> 00:54:06.170
What this is,
is it's the stuff necessary to go

00:54:06.170 --> 00:54:10.050
and find a nib file and open it up.

00:54:10.440 --> 00:54:14.280
And I'm going to go with cocodemo.nib.

00:54:14.990 --> 00:54:17.660
But of course, we could deliver this
template with JBuilder.

00:54:17.660 --> 00:54:20.500
We haven't actually finished
JBuilder 5 for Mac OS X.

00:54:20.500 --> 00:54:22.300
We haven't signed it off,
so maybe I'll sneak that

00:54:22.300 --> 00:54:23.480
in at the very last minute.

00:54:23.580 --> 00:54:27.980
What this does-- some people would
like that-- is it gives you the

00:54:27.980 --> 00:54:33.290
framework necessary to call this
nib in and get things started and

00:54:33.290 --> 00:54:35.190
running as a Cocoa application.

00:54:35.340 --> 00:54:39.500
Now, if I was really starting
from scratch on this,

00:54:39.500 --> 00:54:44.140
and I had no real idea of how
to get to some of these classes,

00:54:45.310 --> 00:54:48.320
So long as you tell
JBuilder about the path,

00:54:48.500 --> 00:54:52.000
and so I'm going to add the set
of Cocoa classes to the path,

00:54:52.000 --> 00:54:57.200
JBuilder can find out dynamically
for you about things like,

00:54:57.200 --> 00:55:00.910
oh, I'm going to need to import
some of the right things.

00:55:00.910 --> 00:55:06.510
Let's see, com, apple, Cocoa, and

00:55:06.950 --> 00:55:09.250
is the founder of the
Mac OS X-specific foundation.

00:55:09.250 --> 00:55:12.340
So you can see it helping me already
in finding the correct import names

00:55:12.340 --> 00:55:15.150
because I don't remember them offhand,
and application.

00:55:15.590 --> 00:55:18.400
So that if I go and ask, you know,
what are the methods for NSBundle?

00:55:18.510 --> 00:55:23.180
It'll show me the bundle for class
and bundle with path methods.

00:55:23.200 --> 00:55:25.720
It will show me that
for bundle with path,

00:55:25.720 --> 00:55:28.140
what I need to do is pass it as string.

00:55:28.140 --> 00:55:32.310
So all of these kinds of things
are a lot easier to find.

00:55:32.340 --> 00:55:34.970
And it's not because JBuilder
knew about them ahead of time.

00:55:35.050 --> 00:55:37.310
It's because I added those
classes to my class path,

00:55:37.310 --> 00:55:39.280
JBuilder found them,
and did the right thing

00:55:39.280 --> 00:55:40.500
with them on the fly.

00:55:40.500 --> 00:55:43.960
It can do an awful lot more if
it can find the sources in terms

00:55:43.960 --> 00:55:47.430
of parameter names and so forth,
but even just the raw class

00:55:47.450 --> 00:55:49.470
files give us an immediate start.

00:55:49.470 --> 00:55:52.570
So now we have this
particular application.

00:55:52.570 --> 00:55:56.500
It's not all that exciting
because there is no Cocoa.nib.

00:55:56.500 --> 00:56:01.130
Let's go ahead and get interface
builder involved in this.

00:56:05.010 --> 00:56:08.420
So what I'm doing, of course,
is assuming-- thank you-- the

00:56:08.420 --> 00:56:11.810
developer applications are
installed on this machine.

00:56:12.040 --> 00:56:14.990
This is a developer's conference,
after all.

00:56:15.080 --> 00:56:17.920
And I'll bring Interface Builder up,
and we'll go and open an

00:56:17.920 --> 00:56:21.940
example nib file and have a
look at the way it's structured,

00:56:21.940 --> 00:56:24.410
what's been set up in it already.

00:56:29.260 --> 00:56:38.540
So if I go and open from my--quick
question because I've been an

00:56:38.540 --> 00:56:41.490
Apple advocate for a long time,
but I've got to admit I was

00:56:41.500 --> 00:56:42.700
out of it for a while.

00:56:42.760 --> 00:56:46.540
Does everybody intuitively
recognize this as the option

00:56:46.670 --> 00:56:49.160
or alt key or is it just me?

00:56:49.350 --> 00:56:51.960
You know,
has that been a standard long enough?

00:56:52.100 --> 00:56:53.200
Sorry.

00:56:53.200 --> 00:56:54.640
That just, it gets to me.

00:56:54.640 --> 00:57:01.440
So I'm going to go ahead and open
this CocoaDemo.nib file that I have,

00:57:01.620 --> 00:57:02.440
and we'll have a look at it.

00:57:02.630 --> 00:57:03.860
This should be really familiar.

00:57:03.860 --> 00:57:07.330
Everybody built this application
at least once in Objective-C,

00:57:07.330 --> 00:57:10.430
and if you've gone through the
Java tutorial for how to build

00:57:10.520 --> 00:57:14.240
this stuff with Project Builder,
you've also seen the same one.

00:57:14.620 --> 00:57:18.890
What we have here are the Fahrenheit and
Celsius fields that we can type into,

00:57:18.890 --> 00:57:22.950
and if you look at them, you'll see that,
sure enough, when I hit enter,

00:57:22.950 --> 00:57:26.480
they'll send an action that I've
got a temperature controller,

00:57:26.480 --> 00:57:30.090
and if we look at the
temperature controller class...

00:57:30.390 --> 00:57:33.500
"Which I have here called converter.

00:57:33.530 --> 00:57:37.270
It has outlets for Celsius and
Fahrenheit and an action convert.

00:57:37.330 --> 00:57:42.180
And surprise, surprise,
I've got all these things wired up so

00:57:42.180 --> 00:57:48.530
that you can get to the appropriate
fields and the fields both fire convert.

00:57:49.380 --> 00:57:57.810
methods when you hit the Enter key.

00:57:57.810 --> 00:57:57.810
So I've got everything I need in place.

00:57:57.810 --> 00:57:57.810
All I need to do is go ahead
and save this nib in my project.

00:58:03.300 --> 00:58:09.000
[Transcript missing]

00:58:10.090 --> 00:58:14.640
And then go ahead and generate the
source code for Cocodemo.converter.

00:58:14.640 --> 00:58:17.500
So I'm going to go
ahead and create files.

00:58:17.600 --> 00:58:22.340
Say I want to go ahead and
generate that one into my source.

00:58:22.440 --> 00:58:24.930
Oh, that's going to be bad, isn't it?

00:58:25.060 --> 00:58:27.150
I mistyped the package name.

00:58:28.690 --> 00:58:31.940
We'll go ahead and correct that
and see a few other JBuilder

00:58:31.940 --> 00:58:32.850
features while we're at it.

00:58:32.920 --> 00:58:38.230
You know, this is why I made this little
comment about this is live.

00:58:38.230 --> 00:58:41.570
I don't really script all this
stuff to the nth degree because

00:58:41.570 --> 00:58:44.070
I believe I can probably fix
this sort of thing on my feet.

00:58:44.080 --> 00:58:50.880
So, if we go into my JB project
directory and look at source CocoaDem

00:58:50.880 --> 00:58:55.320
and change this to CocoaDemo,
what I've done, of course,

00:58:55.450 --> 00:58:57.230
is change the structure of my project.

00:58:57.300 --> 00:59:00.900
And within JBuilder now,
if I just refresh, it notices, hey,

00:59:00.900 --> 00:59:02.620
your source has changed.

00:59:02.620 --> 00:59:03.780
You've got a different package.

00:59:09.190 --> 00:59:13.500
So we'll go ahead and change this
to Cocoa Demo and get that right.

00:59:13.500 --> 00:59:15.230
And we've also generated this converter.

00:59:15.230 --> 00:59:18.820
And so the converter that's been
generated for me by Interface Builder,

00:59:18.820 --> 00:59:20.660
because Interface
Builder understands Java,

00:59:20.660 --> 00:59:25.430
Apple's right with the program here,
is it's generated this stub here that has

00:59:25.430 --> 00:59:30.210
the appropriate object references that
Interface Builder is going to go ahead

00:59:30.210 --> 00:59:32.760
and set when I instantiate this nib.

00:59:32.760 --> 00:59:34.620
And it's got this convert method.

00:59:34.620 --> 00:59:36.760
All I need to do is fill
out the convert method.

00:59:37.250 --> 00:59:40.430
Well, I hope you're not too entirely
shocked that I had the

00:59:40.440 --> 00:59:42.500
converter pre-written as well.

00:59:42.500 --> 00:59:44.600
So just a little thing.

00:59:44.600 --> 00:59:48.310
I don't know if this
means anything to you.

00:59:48.310 --> 00:59:50.210
It means a lot to me.

00:59:50.210 --> 00:59:53.760
If I go ahead and take that same
template and expand it elsewhere,

00:59:53.800 --> 00:59:55.960
it pays attention to the indent level.

00:59:55.960 --> 00:59:59.340
You know, it's the little things
that matter sometimes.

00:59:59.340 --> 01:00:01.380
Thank you.

01:00:04.410 --> 01:00:07.040
And if you look at this converter,
it's not all that exciting.

01:00:07.040 --> 01:00:11.870
It plays a sound just because it can,
and then checks to see who it is that

01:00:11.870 --> 01:00:16.290
sent it and converts the temperature
and stores the result in the other one.

01:00:16.440 --> 01:00:21.950
So I should have here an application
that if I go ahead and run and

01:00:22.040 --> 01:00:29.380
specify my main class here,
and it's Cocoa Demo.

01:00:34.000 --> 01:00:38.190
That we actually should get-- and let's
go ahead and hide interface builder,

01:00:38.190 --> 01:00:42.570
because it's going to
confuse the situation here.

01:00:44.130 --> 01:00:46.050
We should have gotten the user interface.

01:00:46.110 --> 01:00:50.520
Let me just very quickly scan
through this and make sure

01:00:50.570 --> 01:00:52.540
that there's no surprises.

01:00:54.530 --> 01:00:57.400
: Cocoa demo converter.

01:00:57.410 --> 01:00:58.490
What's a J button?

01:00:58.500 --> 01:01:00.470
: It's an import.

01:01:00.550 --> 01:01:01.500
: It's an import.

01:01:01.500 --> 01:01:02.370
Oh, my main class is a button.

01:01:02.500 --> 01:01:04.500
Oh goodness, that's evil.

01:01:04.500 --> 01:01:06.500
Thank you.

01:01:06.500 --> 01:01:09.420
That's what I get for
going through this quickly.

01:01:09.540 --> 01:01:12.480
So let's recompile that.

01:01:14.700 --> 01:01:16.390
And run it.

01:01:16.390 --> 01:01:18.620
And so we get our temperature
converter over here.

01:01:18.720 --> 01:01:21.300
We can go into the temperature
converter and type a value.

01:01:21.310 --> 01:01:22.600
We get the conversion.

01:01:22.600 --> 01:01:25.260
And what we have here
is a Cocoa application.

01:01:25.260 --> 01:01:27.970
Very, very cool stuff.

01:01:31.520 --> 01:01:32.870
I've got to fess up to something.

01:01:32.940 --> 01:01:35.140
It's not a full-fledged
Cocoa application.

01:01:35.310 --> 01:01:37.640
By the time I get a few answers
from a few more Apple engineers,

01:01:37.640 --> 01:01:39.530
it will actually have
an icon on the dock.

01:01:39.530 --> 01:01:43.180
But that's what we're all here for,
right?

01:01:43.350 --> 01:01:45.640
Get answers to the ponderable side here.

01:01:45.640 --> 01:01:48.150
But let's go one step further.

01:01:48.150 --> 01:01:50.550
We have a Cocoa application.

01:01:50.550 --> 01:01:55.650
Let's go ahead and drop a breakpoint
in our Cocoa application and go

01:01:55.760 --> 01:01:58.870
and debug it from within JBuilder.

01:01:59.240 --> 01:02:01.400
So we can compile this.

01:02:01.400 --> 01:02:03.430
We get it started.

01:02:05.640 --> 01:02:11.000
We'll get our UI over here and
go ahead and type in a value.

01:02:11.400 --> 01:02:14.540
If I go from the correct field,
I probably put the breakpoint

01:02:14.540 --> 01:02:15.430
the other direction.

01:02:15.590 --> 01:02:15.800
There we go.

01:02:15.800 --> 01:02:18.350
We'll hit that breakpoint
from within JBuilder,

01:02:18.530 --> 01:02:23.350
and then inside JBuilder,
I can start examining things,

01:02:23.350 --> 01:02:23.350
and I can see...

01:02:24.040 --> 01:02:26.870
Put this in the correct place.

01:02:26.950 --> 01:02:30.890
I can see, for example,
that sender is an instance

01:02:30.950 --> 01:02:35.330
of NSTextField and Celsius is
an instance of NSTextField.

01:02:35.340 --> 01:02:40.500
And I could even go ahead and take
advantage of what we like to call

01:02:40.500 --> 01:02:45.220
the world's largest tooltip and click
on one of these and browse those

01:02:45.400 --> 01:02:49.660
directly in place and see what we can
see from the Java side of the bridge.

01:02:50.100 --> 01:02:53.190
Perhaps not a whole bunch,
but it's sort of interesting to start

01:02:53.190 --> 01:02:56.850
examining the internals of Cocoa directly
from within a Java debugger.

01:02:56.850 --> 01:02:58.340
So again, Cocoa from Java.

01:02:58.390 --> 01:03:01.760
This is something that we're going
to spend some time researching

01:03:01.760 --> 01:03:05.040
and make sure that it's an
option that's available to you.

01:03:12.200 --> 01:03:16.190
So if we can flip back to the slides.

01:03:16.260 --> 01:03:19.500
JBuilder is a really interesting
product from a lot of points of view.

01:03:19.500 --> 01:03:20.990
I love that it's written in Java.

01:03:21.000 --> 01:03:25.360
I love that it's actually
the same object code,

01:03:25.400 --> 01:03:27.400
not just the same source code,
but the same object code

01:03:27.400 --> 01:03:28.690
running on all these platforms.

01:03:28.700 --> 01:03:32.770
I love that the first time we
got the debugger up and running,

01:03:32.780 --> 01:03:37.420
we took it to Solaris and said,
what happens if we run it over here?

01:03:37.420 --> 01:03:41.250
And the debugger worked on another
platform the very first time we tried it.

01:03:41.410 --> 01:03:42.180
This is really good.

01:03:42.280 --> 01:03:45.020
It's really compelling
and powerful stuff to me.

01:03:45.020 --> 01:03:48.570
And as potential Java developers or as
Java developers out in the audience,

01:03:48.570 --> 01:03:50.660
it should be equally exciting
from your perspective.

01:03:50.660 --> 01:03:53.800
But I really like how dynamic Java is.

01:03:53.800 --> 01:03:56.940
So when we had a chance to
redesign JBuilder and really

01:03:57.130 --> 01:04:00.240
put everything in Java,
we took advantage of it and

01:04:00.290 --> 01:04:04.220
really to the hilt went for
dynamic discovery of features.

01:04:04.220 --> 01:04:07.000
It's what we call the JBuilder
open tools architecture.

01:04:07.000 --> 01:04:09.820
It means that JBuilder,
when you launch it,

01:04:10.100 --> 01:04:12.180
learns about the things that it can do.

01:04:12.200 --> 01:04:13.960
It's what it can do
from scratch every time.

01:04:13.960 --> 01:04:17.530
You may have worked with other
people's plug-in architectures before,

01:04:17.620 --> 01:04:21.780
and you may have seen that what's typical
of a plug-in architecture is that the

01:04:21.780 --> 01:04:25.630
plug-ins let you do some cool things,
but that there are a lot of things

01:04:25.630 --> 01:04:29.620
that they did that you can't do
through the plug-in architecture.

01:04:29.620 --> 01:04:33.160
Well, JBuilder is written with its
own open tools architecture.

01:04:33.160 --> 01:04:38.920
That means our designer is just a viewer
plugged into our open tools architecture.

01:04:38.920 --> 01:04:41.470
All of our editor key bindings
are plugged in through the

01:04:41.470 --> 01:04:42.180
open tools architecture.

01:04:42.260 --> 01:04:48.610
JBuilder itself consists of close to 300
open tools loosely clustered together.

01:04:48.650 --> 01:04:53.040
In fact, if you remove all of the open
tools and the libraries they use,

01:04:53.110 --> 01:04:55.700
there's one class and one interface.

01:04:55.740 --> 01:04:56.710
That's it.

01:04:56.840 --> 01:05:00.560
So it's a pretty powerful framework,
and it's one that we strongly encourage

01:05:00.600 --> 01:05:02.100
other people to plug things into.

01:05:02.100 --> 01:05:04.330
So if you want to tailor the environment,
you can.

01:05:04.420 --> 01:05:08.730
You can add new viewers, file types,
editor behaviors, dialogues, and much,

01:05:08.730 --> 01:05:11.980
much more, to use the typical phrase.

01:05:12.200 --> 01:05:13.760
But we mean it.

01:05:13.760 --> 01:05:14.730
I mean, this is powerful stuff.

01:05:14.820 --> 01:05:18.140
We've seen third parties do very,
very cool things using the

01:05:18.140 --> 01:05:19.640
open tools architecture.

01:05:19.790 --> 01:05:22.500
And if you look around,
you'll find that there are a number

01:05:22.810 --> 01:05:27.330
of application server vendors and
big companies who have products

01:05:27.490 --> 01:05:29.300
that they'd like a Java IDE for.

01:05:29.480 --> 01:05:32.150
But instead of inventing
one from scratch,

01:05:32.150 --> 01:05:35.750
they can just tailor JBuilder
and make it work for them.

01:05:36.100 --> 01:05:39.500
What's especially cool about that
is anybody who writes an open

01:05:39.500 --> 01:05:40.840
tool has to write it in Java.

01:05:40.840 --> 01:05:45.700
And if it's written in Java,
it probably already works on Mac OS X.

01:05:45.700 --> 01:05:48.140
So all of those open tools
that have been written,

01:05:48.140 --> 01:05:50.940
you can take advantage of them
the day JBuilder hits the street.

01:05:50.940 --> 01:05:53.220
And in fact, if you're brave,
you could probably take the

01:05:53.220 --> 01:05:54.800
copy that's in your bag,
go home,

01:05:54.800 --> 01:05:58.230
download a couple of those open tools,
and start using them today.

01:05:58.240 --> 01:06:00.610
So that's really compelling stuff.

01:06:01.500 --> 01:06:05.240
As I was in the prior session,
I realized I wasn't planning on

01:06:05.240 --> 01:06:07.560
making a USB device anytime soon.

01:06:07.560 --> 01:06:10.490
I just really wanted to be in the room,
and there was not that much point

01:06:10.550 --> 01:06:11.970
in my paying a lot of attention.

01:06:11.980 --> 01:06:15.360
So I spent the last half of the
session writing an open tool

01:06:15.360 --> 01:06:17.480
that sort of just occurred to me.

01:06:17.500 --> 01:06:20.650
And let's have a look at what
you can do in half a session

01:06:20.650 --> 01:06:24.260
when you're worried a little bit
about battery life and everything

01:06:24.260 --> 01:06:25.440
else that goes along with that.

01:06:28.680 --> 01:06:31.830
You can take an idea and
almost get it all the way.

01:06:31.830 --> 01:06:35.400
Well, if we can, oh yes, my apologies.

01:06:35.400 --> 01:06:37.470
I keep not going to the Clue slides.

01:06:37.530 --> 01:06:40.090
I'm probably their least
favorite presenter by this point.

01:06:42.660 --> 01:06:46.460
I'm going to go to my home
and have a look at AppWrapper.

01:06:46.460 --> 01:06:52.190
Because one of the things that people
will point to JBuilder and say is that,

01:06:52.330 --> 01:06:55.780
you know,
obviously it's a pure Java environment.

01:06:55.780 --> 01:06:59.510
They build jars, they build wars,
they build rars, they build, I mean,

01:06:59.570 --> 01:07:02.120
literally,
these things are all valid acronyms,

01:07:02.170 --> 01:07:02.880
ears, etc.

01:07:02.880 --> 01:07:06.820
But what about a
double-clickable application?

01:07:06.820 --> 01:07:10.590
And it just, you know,
we're trying to get the first

01:07:10.590 --> 01:07:11.840
copy out to get things going.

01:07:11.860 --> 01:07:12.980
We're trying to get things
going as fast as possible.

01:07:12.980 --> 01:07:17.410
And building a double-clickable
application was just too late in the

01:07:17.480 --> 01:07:19.820
cycle for us to put in the product.

01:07:19.940 --> 01:07:23.110
But as an open tool,
it's a very different story.

01:07:23.120 --> 01:07:27.150
So what I did is I sat down and looked
at the process of what it would take

01:07:27.150 --> 01:07:31.370
to build an open tool that gives
you a double-clickable application.

01:07:31.380 --> 01:07:35.700
And just to give you
kind of a quick sample,

01:07:35.700 --> 01:07:38.030
this is all the code.

01:07:38.660 --> 01:07:42.830
And just kind of what it does,
the initialize open tool goes into

01:07:42.830 --> 01:07:47.080
our project view mechanism and
registers a context action provider.

01:07:47.080 --> 01:07:50.990
So that means that in our project view,
if we bring up a context

01:07:50.990 --> 01:07:54.030
menu on something,
we should be able to now have

01:07:54.030 --> 01:07:56.390
new functionality registered.

01:07:56.740 --> 01:08:00.380
And it goes on to say this functionality
should only show up if you have a

01:08:00.390 --> 01:08:06.490
single thing selected and that thing
is a jar file and it should bring up

01:08:06.600 --> 01:08:10.840
something that says create app wrapper
for this jar file and then go through

01:08:10.840 --> 01:08:15.530
the motions of creating the basic
structure and copying things into it.

01:08:15.740 --> 01:08:19.030
And if I had any of the
documentation handy,

01:08:19.030 --> 01:08:23.350
I would have actually used
the standard MRJ app builder,

01:08:23.560 --> 01:08:25.200
but instead I just sort of rolled my own.

01:08:25.380 --> 01:08:29.180
This allows me then, theoretically,
to extend JBuilder.

01:08:29.230 --> 01:08:31.230
Well, let's go ahead and compile it.

01:08:31.300 --> 01:08:33.100
You'll notice the compile
took a whole bunch of time.

01:08:33.100 --> 01:08:37.420
And what it did was built this
app wrapper jar file that contains

01:08:37.420 --> 01:08:41.980
the necessary class and a manifest
file that tells JBuilder that,

01:08:42.070 --> 01:08:44.110
yes, this is an open tool.

01:08:45.240 --> 01:08:51.360
If I were to go to some application
in JBuilder without modifications,

01:08:51.420 --> 01:08:57.460
such as my welcome application,
and bring up the context menu for a jar,

01:08:57.460 --> 01:09:00.300
you'd see that it has
a variety of options,

01:09:00.300 --> 01:09:02.100
but it doesn't have
anything for an app wrapper.

01:09:02.100 --> 01:09:04.610
Well, let's change that.

01:09:08.340 --> 01:09:11.920
What I'm going to do is
not save all of this.

01:09:11.930 --> 01:09:13.440
I suppose it doesn't matter.

01:09:13.440 --> 01:09:18.320
What I'm going to do is go and
find a directory that contains

01:09:18.590 --> 01:09:23.400
all of our open tool definitions.

01:09:28.710 --> 01:09:29.930
It's in JBuilder 5.

01:09:30.100 --> 01:09:33.010
It's a directory called Open Tools.

01:09:33.010 --> 01:09:37.360
It's actually installed as user
writable so that you can drop

01:09:37.550 --> 01:09:41.690
things in like my tweak to turn on
hardware graphics acceleration here.

01:09:42.140 --> 01:09:46.900
Or in this case, go into my

01:09:47.450 --> 01:09:55.460
AppWrapper and find that jar file,
drop a jar file in, and restart JBuilder.

01:09:55.520 --> 01:09:55.970
That's it.

01:09:56.300 --> 01:09:58.950
So the installation process
is pretty straightforward.

01:09:58.950 --> 01:10:01.330
You drop something in
the open tools directory,

01:10:01.330 --> 01:10:03.860
start the product,
and at launch time we dynamically

01:10:03.960 --> 01:10:05.640
discover new capabilities.

01:10:05.640 --> 01:10:09.080
And this new capability in particular
should be that it can create a

01:10:09.230 --> 01:10:10.980
double clickable application.

01:10:10.980 --> 01:10:14.730
Now I will admit I came down
to the final seconds of the

01:10:14.750 --> 01:10:17.200
session and I had a bug left.

01:10:17.400 --> 01:10:21.190
So it gets almost all the way and
I'll show you what we have to do

01:10:21.190 --> 01:10:22.710
to get it the rest of the way.

01:10:22.710 --> 01:10:25.590
Go to welcome jar and note
create app wrapper for

01:10:25.680 --> 01:10:27.590
welcome jar now just shows up.

01:10:27.590 --> 01:10:31.400
This is one of the zillions of
places you can plug things in.

01:10:31.400 --> 01:10:35.100
If you'll excuse me while I sort
of take a divergent story,

01:10:35.100 --> 01:10:39.450
we actually got a message through
tech support from a fellow working

01:10:39.450 --> 01:10:43.850
for a company that said I'm trying to
write a whole new file system based

01:10:43.960 --> 01:10:46.400
on XML and plug it into JBuilder.

01:10:46.400 --> 01:10:47.320
And it worked.

01:10:47.410 --> 01:10:48.400
It works fine.

01:10:48.400 --> 01:10:51.880
I can open things and so forth,
but I need to be able to go

01:10:52.110 --> 01:10:57.400
ahead and add to my source path
pointers into my XML file system.

01:10:57.400 --> 01:10:59.400
And we were able to actually tell them,
well,

01:10:59.400 --> 01:11:03.890
that's nice because the open dialogue
actually allows you to extend the

01:11:04.030 --> 01:11:08.400
set of root elements in the directory
browser with things in any virtual file

01:11:08.400 --> 01:11:10.400
system that you've written in Java.

01:11:10.400 --> 01:11:14.400
So little things like that are
getting done by people out there.

01:11:14.400 --> 01:11:14.670
Why?

01:11:14.800 --> 01:11:17.380
We built the architecture for
ourselves and we've just opened it.

01:11:17.380 --> 01:11:19.120
We've opened it to the rest of the world.

01:11:19.300 --> 01:11:22.150
I'm sorry, again,
a little bit of a sidetracked topic,

01:11:22.160 --> 01:11:24.380
but let's go ahead and
create app wrapper for this.

01:11:24.380 --> 01:11:28.390
And boom, it's gone off and it's
done the basic work.

01:11:29.860 --> 01:11:33.320
If I were to actually go
to that welcome project,

01:11:33.320 --> 01:11:38.690
and the welcome project is in our
samples in the JBuilder framework.

01:12:09.690 --> 01:12:09.690
Welcome.

01:12:09.690 --> 01:12:09.690
I'd find welcome.app.

01:12:09.690 --> 01:12:09.690
So it's built me a little app wrapper.

01:12:09.690 --> 01:12:09.690
Unfortunately,
it's left out one line in one

01:12:09.690 --> 01:12:09.690
file and forgotten to set the
executable bit on something.

01:12:09.690 --> 01:12:09.690
Sigh.

01:12:09.690 --> 01:12:09.690
Last minute demos.

01:12:09.690 --> 01:12:09.690
I thought you'd be forgiving.

01:12:09.690 --> 01:12:09.690
You're a developer audience after all,
and real demos are always

01:12:09.690 --> 01:12:09.690
much better than canned demos.

01:12:09.690 --> 01:12:09.690
So let's go in and have a look at
this welcome app and it created

01:12:09.980 --> 01:12:12.240
Does everybody else get 2Ds sometimes?

01:12:12.250 --> 01:12:13.940
Let's see.

01:12:13.940 --> 01:12:19.140
It's left off one line
in-- not the executable.

01:12:19.140 --> 01:12:24.700
It's left off one line in a config file.

01:12:24.700 --> 01:12:32.290
To specify the main class,
I should have known.

01:12:37.440 --> 01:12:41.300
And it's forgotten to set the
executable bit on Java Launcher.

01:12:41.380 --> 01:12:46.480
I'll get both of those
things in there shortly.

01:12:49.550 --> 01:12:52.780
We should have-- see, it's on the dock.

01:12:52.780 --> 01:12:57.810
It should be loading bits and
pieces of swing as we speak.

01:13:03.590 --> 01:13:06.960
And have I-- yes, live demos.

01:13:06.960 --> 01:13:13.000
Does anybody remember the last thing
I did in Welcome App before I turned

01:13:13.000 --> 01:13:15.300
it into a double-clickable application?

01:13:15.300 --> 01:13:19.050
Let's see what the launcher does.

01:13:19.060 --> 01:13:21.290
Activating lightweight.

01:13:21.540 --> 01:13:22.450
xy layout.

01:13:22.620 --> 01:13:25.450
I didn't bundle my xy layout,
which I was still using in there.

01:13:25.630 --> 01:13:27.480
So you can see we have
got double clickable.

01:13:27.480 --> 01:13:28.540
It shows up on the dock.

01:13:28.660 --> 01:13:31.370
If I had code that
would actually execute,

01:13:31.390 --> 01:13:33.270
it would actually run it.

01:13:38.900 --> 01:13:41.940
So to clarify, of course,
this isn't a feature of JBuilder.

01:13:41.950 --> 01:13:45.640
This is a feature I whipped up in a
few minutes during the last session.

01:13:45.640 --> 01:13:46.920
You can do the same.

01:13:46.920 --> 01:13:48.640
We'll continue to do the same.

01:13:48.640 --> 01:13:51.550
And we'll continue to make sure
that if we find cool things we

01:13:51.550 --> 01:13:54.320
can do on the Mac OS X platform,
open tools are one easy way

01:13:54.320 --> 01:13:57.050
to slip things out the side
door without having to wait for

01:13:57.100 --> 01:13:59.090
another release of the product.

01:14:00.900 --> 01:14:04.150
One very last thing, by the way,
because it never gets brought up,

01:14:04.250 --> 01:14:06.110
and is it a Macintosh-like thing?

01:14:06.300 --> 01:14:06.520
No.

01:14:06.520 --> 01:14:10.110
But some of us here have to
deal with reality constraints.

01:14:10.180 --> 01:14:13.820
How many people here have to automate
a build process for a project?

01:14:13.820 --> 01:14:14.900
Right?

01:14:14.900 --> 01:14:17.730
Graphical tools work real well for that.

01:14:17.750 --> 01:14:20.560
You run into some problems.

01:14:20.920 --> 01:14:24.580
So one of the things that we did
is made sure that JBuilder actually

01:14:24.580 --> 01:14:26.520
has a command line behavior.

01:14:27.400 --> 01:14:35.140
So in this case, we can say things like,
"JBuilder, build the project at developer

01:14:35.700 --> 01:14:43.600
applications." Let's see if
I can find this one again.

01:14:44.070 --> 01:14:49.450
Samples, welcome, welcome.jpx.

01:14:49.450 --> 01:14:53.690
And it'll kick up the command line
version of the JBuilder build process and

01:14:53.690 --> 01:14:56.000
do everything in my project definition.

01:14:56.000 --> 01:15:01.240
It'll check the Java dependencies,
compile necessary files, build archives,

01:15:01.390 --> 01:15:04.220
build war files, ear files, you name it.

01:15:07.800 --> 01:15:09.960
It's the attention to detail
that makes it obvious we've

01:15:09.960 --> 01:15:11.400
been at this for a little bit.

01:15:11.480 --> 01:15:14.190
So if we can switch back to the slides.

01:15:15.550 --> 01:15:18.640
The preview CD you've got,
I want to mention really briefly,

01:15:18.640 --> 01:15:21.500
you definitely must get
Apple's Java VM update.

01:15:21.500 --> 01:15:25.470
Yes, you can run it on Mac OS X,
the initial release.

01:15:25.470 --> 01:15:28.120
We'll bring up a warning letting
you know that it's going to be a

01:15:28.120 --> 01:15:31.530
little bit suboptimal on that release
because the debugger really desperately

01:15:31.530 --> 01:15:33.740
needs some JDK 1.3.1 technology.

01:15:33.760 --> 01:15:36.480
And also, of course,
we benefit from a lot of the work

01:15:36.480 --> 01:15:39.790
the team has been pouring their
hearts into over the past couple of

01:15:39.880 --> 01:15:41.930
months since the release of Mac OS X.

01:15:41.930 --> 01:15:45.400
You need to go to the Borland
community site to get a license.

01:15:45.620 --> 01:15:48.970
But don't worry,
you can opt out of any possible contact,

01:15:49.100 --> 01:15:52.640
so we'll just make sure that
we get the license key to you.

01:15:52.660 --> 01:15:55.180
But if you're interested
in JBuilder information,

01:15:55.180 --> 01:15:58.380
then that's a way to make sure that
you get further information from

01:15:58.490 --> 01:16:01.900
us to let you know when JBuilder
for Mac is actually going to ship.