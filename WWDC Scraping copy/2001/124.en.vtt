WEBVTT

00:00:10.100 --> 00:00:15.500
[Transcript missing]

00:00:15.820 --> 00:00:17.680
When it came time to put the
slides together for this year,

00:00:17.680 --> 00:00:19.700
we looked back at what we'd done
for the last couple of years.

00:00:19.700 --> 00:00:21.820
About two years ago,
we talked about the architecture

00:00:21.820 --> 00:00:23.060
and a bunch of APIs.

00:00:23.060 --> 00:00:27.540
Last year, we went through APIs again,
showed you how to write plugins

00:00:27.550 --> 00:00:29.320
for the print dialogues.

00:00:29.330 --> 00:00:32.160
So this year, we're going to do something
a little different.

00:00:33.260 --> 00:00:36.790
And the agenda is basically the
topics that have spawned the most

00:00:36.890 --> 00:00:40.650
amount of email between developers
and us to the various developer

00:00:40.850 --> 00:00:42.990
mailing lists over the last year.

00:00:42.990 --> 00:00:46.490
The topics that have been the
most interesting to discuss with

00:00:46.490 --> 00:00:48.340
the developers and in-house.

00:00:49.730 --> 00:00:51.690
Hopefully, we've got a little bit of
something for everybody.

00:00:51.830 --> 00:00:53.960
We've got some do's
and don'ts for Carbon,

00:00:53.960 --> 00:00:56.990
a little bit of information
about how Cocoa glues onto the

00:00:56.990 --> 00:01:00.010
underlying printing system,
a little bit on Unix

00:01:00.010 --> 00:01:02.350
printing in the system,
some diagnostic tools.

00:01:03.130 --> 00:01:06.950
And we'll end up talking a little
bit about printing and color.

00:01:07.030 --> 00:01:10.060
Before I go on,
I want to say thanks to everybody here

00:01:10.070 --> 00:01:12.620
who has reported bugs against printing.

00:01:12.620 --> 00:01:14.250
It has been appreciated.

00:01:14.250 --> 00:01:15.420
It's kept us busy.

00:01:15.450 --> 00:01:19.130
And also, thanks for all the
suggestions for improvements,

00:01:19.130 --> 00:01:20.850
which we'll work on.

00:01:22.630 --> 00:01:28.290
So before we get into this,
I got one slide.

00:01:30.070 --> 00:01:32.560
Some of you may have seen before,
so hands up all those

00:01:32.650 --> 00:01:33.940
who've seen this slide.

00:01:37.120 --> 00:01:40.660
Well, that's very interesting because
all the printing engineers

00:01:41.170 --> 00:01:43.620
didn't put their hands up,
so that's why we got these bugs.

00:01:46.810 --> 00:01:51.820
So I'm going to explain to the printing
team and some of you very quickly

00:01:51.820 --> 00:01:55.150
how the architecture is put together,
mainly so that you understand

00:01:55.260 --> 00:01:57.220
the terminology we're going to
use in the subsequent slides.

00:01:57.260 --> 00:02:00.380
And I was thinking of doing this
with my eyes shut because I've

00:02:00.440 --> 00:02:04.180
done it so many times before,
but I'll probably fall off the stage.

00:02:04.200 --> 00:02:08.470
So we'll start over on your left towards
the top where your application is

00:02:08.470 --> 00:02:11.140
linked against the printing framework.

00:02:11.140 --> 00:02:14.000
That's the box we call
the print job creator.

00:02:15.060 --> 00:02:19.150
That serves up all the APIs that are
in the two main printing headers,

00:02:19.150 --> 00:02:20.940
PM core, PM application.

00:02:20.940 --> 00:02:25.460
PM application for the UI related APIs,
PM core for all the rest.

00:02:25.520 --> 00:02:29.840
Those APIs let you set up what
we call the page format object

00:02:30.050 --> 00:02:33.830
and the print settings object,
bring up the print dialogues,

00:02:33.870 --> 00:02:35.220
and execute the print loop.

00:02:35.240 --> 00:02:37.840
And a result of that,
you get a print job.

00:02:37.890 --> 00:02:40.910
And the print job is that
PDF school file shown here and a

00:02:40.910 --> 00:02:42.940
meta file we call the job ticket.

00:02:43.420 --> 00:02:46.740
The job ticket contains most
of the settings you put in,

00:02:46.740 --> 00:02:51.250
the user does in the print dialogue and
a bunch of other things that are needed

00:02:51.250 --> 00:02:53.690
for processing the job downstream.

00:02:55.570 --> 00:02:58.500
Underneath that print
job creator is a plugin,

00:02:58.650 --> 00:03:00.450
Print Dialog Extensions.

00:03:00.470 --> 00:03:03.960
Those are CFPlugins.

00:03:04.010 --> 00:03:06.330
They can be written by
application developers,

00:03:06.330 --> 00:03:08.930
by printer driver developers,
and they're written by

00:03:09.000 --> 00:03:10.340
us in the printing team.

00:03:30.170 --> 00:03:30.180
Underneath that print
job creator is a plugin,

00:03:30.180 --> 00:03:30.180
Print Dialog Extensions.

00:03:30.180 --> 00:03:30.180
Those are CFPlugins.

00:03:30.180 --> 00:03:30.180
They can be written by
application developers,

00:03:30.180 --> 00:03:30.180
by printer driver developers,
and they're written by

00:03:30.180 --> 00:03:30.180
us in the printing team.

00:03:30.320 --> 00:03:33.360
Moving across, we have the print server.

00:03:33.360 --> 00:03:36.860
The print server is,
when you think about it,

00:03:36.860 --> 00:03:38.400
it's the nerve center
of the printing system.

00:03:38.400 --> 00:03:44.510
It's responsible for sending print jobs
downstream from the print job creator

00:03:44.510 --> 00:03:50.670
and relaying status and error information
back up to the UI from the modules,

00:03:50.680 --> 00:03:53.750
which we'll talk about in a second.

00:03:54.380 --> 00:03:58.990
The print server is its own
process and manages all the queues.

00:04:00.430 --> 00:04:04.900
When a job is ready to print,
PrintServer runs a process

00:04:04.900 --> 00:04:07.170
called the Print Job Manager.

00:04:07.320 --> 00:04:10.970
As its name implies,
it does everything that's needed

00:04:10.970 --> 00:04:12.700
to do to get a job printed.

00:04:12.730 --> 00:04:14.820
It runs

00:04:15.140 --> 00:04:18.630
These modules over on the
right are in separate threads.

00:04:18.630 --> 00:04:20.310
The first one we call the converter.

00:04:20.400 --> 00:04:22.700
Actually,
that's a bit of an oversimplification.

00:04:22.700 --> 00:04:27.360
The converter is a set of libraries that
do various things to do with converting

00:04:27.360 --> 00:04:29.780
from one graphics format to another.

00:04:29.780 --> 00:04:35.500
For example, there's a converter library
that turns PDF into raster data,

00:04:35.610 --> 00:04:38.330
one to turn PDF into PostScript.

00:04:38.350 --> 00:04:42.100
Converters are also used up in the
front end of the printing system

00:04:42.250 --> 00:04:44.380
to generate the spool file itself.

00:04:45.000 --> 00:04:49.440
So it's involved in turning Quickdraw
drawing into a PDF spool file or Quartz

00:04:49.450 --> 00:04:51.650
2D drawing into a PDF spool file.

00:04:53.050 --> 00:04:55.260
Next one down, the printer module.

00:04:55.260 --> 00:04:59.020
The printer module is pretty
much the only thing that's

00:04:59.120 --> 00:05:01.560
left of classic print drivers.

00:05:01.560 --> 00:05:05.430
Classic print drivers used
to do everything themselves,

00:05:05.430 --> 00:05:10.760
UI, spooling, quick draw conversion,
chooser packs, IO, everything.

00:05:10.760 --> 00:05:12.570
Now the system is a lot more modular.

00:05:12.570 --> 00:05:14.830
Printer modules,
basically all they have to do

00:05:14.830 --> 00:05:17.730
these days is tell the converter
what sort of data they want,

00:05:17.730 --> 00:05:20.580
and once they receive that data,
package it appropriately

00:05:20.580 --> 00:05:22.140
and send it to the printer.

00:05:22.900 --> 00:05:25.420
So in the case of a
Raster printer module,

00:05:25.530 --> 00:05:29.360
it would tell the converter the
color space and the resolution

00:05:29.360 --> 00:05:31.420
of the Raster data it wanted.

00:05:31.420 --> 00:05:33.960
As it received bands from the converter,
compress them,

00:05:33.980 --> 00:05:37.060
insert some engine control codes,
and send them off downstream.

00:05:37.060 --> 00:05:41.270
Talking about talking to the printer,
that's where the IO modules come in.

00:05:41.300 --> 00:05:46.220
Those are today mainly written by Apple.

00:05:46.220 --> 00:05:48.400
We have an IO module
for Apple talk printing,

00:05:48.400 --> 00:05:49.980
for LPR printing, for USB.

00:05:49.980 --> 00:05:51.540
The list can go on.

00:05:51.540 --> 00:05:52.760
We'll probably add to it.

00:05:52.800 --> 00:05:54.800
Also third bodies can add to it.

00:05:54.800 --> 00:05:58.770
Down at the bottom, printer browsers.

00:05:58.770 --> 00:06:02.940
Those provide the UI for the IO modules.

00:06:03.020 --> 00:06:05.380
They basically provide the
UI for discovering printers.

00:06:05.400 --> 00:06:11.140
So there's one for using the MVP protocol
to discover Apple talk printers,

00:06:11.170 --> 00:06:13.530
one that scans the USB bus
looking for printers.

00:06:13.600 --> 00:06:16.830
And those printer browser
modules are actually loaded

00:06:17.010 --> 00:06:19.860
by the last box on this slide,
which is print center,

00:06:19.860 --> 00:06:22.680
which is the application that
presumably everybody's used.

00:06:22.700 --> 00:06:25.630
The application that you use
for setting up print queues,

00:06:25.630 --> 00:06:27.780
monitoring, and managing print jobs.

00:06:29.470 --> 00:06:33.110
So that's the architecture in a nutshell.

00:06:33.180 --> 00:06:35.990
The one thing I have to say is
it's a lot more modular than

00:06:36.000 --> 00:06:41.260
whatever we used to have in
MacÂ OS 9 and 8 and earlier versions.

00:06:41.260 --> 00:06:42.780
It's a lot more extensible.

00:06:42.780 --> 00:06:47.080
And our goal is that-- hopefully
we're partially achieving that-- is

00:06:47.080 --> 00:06:49.880
that if you're in the business of
writing printer drivers or even if

00:06:49.880 --> 00:06:53.380
you're in the business of running
applications to do a lot of printing,

00:06:53.390 --> 00:06:58.770
Apple's done a lot more work for
you than was the case in the past.

00:07:00.030 --> 00:07:02.040
Okay, so back onto the agenda.

00:07:02.040 --> 00:07:03.780
We're going to talk a little
bit about Carbon printing.

00:07:03.780 --> 00:07:07.830
And we're going to cover both
printing from Carbon apps running

00:07:07.920 --> 00:07:13.140
on MacÂ OS 8 and 9 under CarbonLib as
well as Carbon apps running on 10.

00:07:13.140 --> 00:07:16.300
And as you're probably aware,
the printing system underneath those

00:07:16.300 --> 00:07:18.100
two environments is very different.

00:07:18.100 --> 00:07:21.840
That raises some issues and that's why
we need to talk about some of them here.

00:07:24.300 --> 00:07:28.840
My first slide here is probably exactly
the same as the one I had last year,

00:07:28.840 --> 00:07:29.850
although I didn't check.

00:07:29.920 --> 00:07:35.090
The message is use the APIs that
take a session argument as opposed

00:07:35.090 --> 00:07:36.800
to their counterparts which don't.

00:07:36.840 --> 00:07:42.540
If you're familiar with the headers,
you'll see there are about 40

00:07:42.650 --> 00:07:47.100
APIs where there's a non-session
and a session version.

00:07:47.100 --> 00:07:50.910
It sounds a bit crazy that there's
a historical reason behind that.

00:07:51.360 --> 00:07:54.280
Originally the non-session
APIs appeared in MacÂ OSÂ X,

00:07:54.280 --> 00:07:54.280
but now they're in MacÂ OSÂ X.

00:07:54.280 --> 00:07:54.280
So I'm going to show you how to use them.

00:08:24.300 --> 00:08:28.070
With a parallel set of APIs which
take a session parameter.

00:08:28.160 --> 00:08:31.780
In that way we can manage
printing within an application,

00:08:31.870 --> 00:08:35.030
printing multiple documents concurrently.

00:08:36.700 --> 00:08:38.720
Our favorite APIs are the session ones.

00:08:38.800 --> 00:08:40.900
Those are the ones we'll carry forward.

00:08:40.900 --> 00:08:44.340
If you're using the non-session ones,
we'd likely ask you to switch

00:08:44.370 --> 00:08:45.900
over to the session ones.

00:08:47.860 --> 00:08:50.550
What you've probably noticed in the
last year is that we've added new APIs.

00:08:50.680 --> 00:08:51.580
They're session only.

00:08:51.580 --> 00:08:54.200
That's one way of coercing you
into doing the right things.

00:08:55.090 --> 00:08:58.130
Putting up here a note to
say we will deprecate the

00:08:58.130 --> 00:09:00.580
non-session ones eventually.

00:09:00.580 --> 00:09:02.940
Not this year, but soon.

00:09:05.260 --> 00:09:07.280
All our sample code
uses the session APIs.

00:09:09.040 --> 00:09:11.600
A couple of technical restrictions.

00:09:11.600 --> 00:09:14.200
One is that when you're
running on 8 and 9,

00:09:14.200 --> 00:09:17.780
you're limited to a single session,
and that's just because of the nature

00:09:17.780 --> 00:09:21.430
of the underlying printing system with
the print dialogs being system modal,

00:09:21.430 --> 00:09:22.290
for example.

00:09:22.300 --> 00:09:24.560
So you have to check your
environment at runtime.

00:09:24.560 --> 00:09:26.760
If you're running on 8
and 9 under CarbonLib,

00:09:26.760 --> 00:09:28.380
limit yourself to one session.

00:09:28.380 --> 00:09:30.840
On 10, you can have as many as you like.

00:09:30.840 --> 00:09:33.900
Every window can have
its own print dialog,

00:09:33.900 --> 00:09:35.000
for example.

00:09:37.320 --> 00:09:40.660
If you are using multiple sessions,
you should be aware of the fact that the

00:09:40.660 --> 00:09:44.360
page format and print settings objects
can be shared amongst those sessions.

00:09:44.360 --> 00:09:47.550
Pretty much the only limitation,
but an obvious one,

00:09:47.660 --> 00:09:52.430
is that each session can only have one
print dialog up at any particular time.

00:09:56.100 --> 00:10:02.490
So somewhat related to that is using
sheets for your print dialogues.

00:10:02.540 --> 00:10:05.540
You can't do this on 8 and 9,
but you can definitely do it on 10,

00:10:05.590 --> 00:10:06.910
and we want you to do it on 10.

00:10:06.920 --> 00:10:09.520
We want it to be the standard
user experience for printing.

00:10:09.520 --> 00:10:13.600
Actually, not all Apple applications
do it right now,

00:10:13.670 --> 00:10:18.160
and they should,
so hopefully that'll happen quite soon.

00:10:20.750 --> 00:10:23.770
Obvious benefits of the dialogues
appearing as sheets is that the printing

00:10:23.930 --> 00:10:28.160
control is always in a predictable
place relative to the document window,

00:10:28.160 --> 00:10:32.770
and the other nice thing is that the user
can switch from one window to another,

00:10:32.780 --> 00:10:34.940
from one application to another.

00:10:34.940 --> 00:10:38.520
The dialogue is no longer modal to
either the application or the system.

00:10:39.950 --> 00:10:43.840
The two APIs that are up there,
if you're running at run time,

00:10:43.840 --> 00:10:48.900
you want to check your environment before
you start using PM session use sheets

00:10:48.900 --> 00:10:51.580
because you can't do this thing online.

00:10:51.580 --> 00:10:57.540
Even though you can bring up a print
dialog for each open document window,

00:10:57.540 --> 00:11:03.510
whether or not you want to spool multiple
documents in parallel is up to you.

00:11:03.520 --> 00:11:07.480
It can be tricky if you're a
quick draw based application.

00:11:07.530 --> 00:11:10.730
You've got to carefully coordinate
your use of printing ports.

00:11:10.740 --> 00:11:14.670
There's actually a limitation on
Cocoa Apps at the moment because

00:11:14.680 --> 00:11:17.650
the spooling dialog is modal,
but we'll get rid of

00:11:17.650 --> 00:11:20.120
that in a future release,
I'm sure.

00:11:20.120 --> 00:11:24.650
You can print multiple documents or
spool multiple documents in parallel,

00:11:24.650 --> 00:11:26.690
but be a little careful on that.

00:11:27.950 --> 00:11:33.420
I mentioned that CarbonLib printing,
you don't get sheets.

00:11:33.420 --> 00:11:36.410
Basically, you get the classic drivers,
print dialogues.

00:11:36.420 --> 00:11:40.890
And I've got this bullied
item on several slides.

00:11:40.930 --> 00:11:42.480
We have got sample code.

00:11:42.480 --> 00:11:44.770
It's in the posted online documentation.

00:11:44.870 --> 00:11:46.430
It's on the developer CD.

00:11:46.490 --> 00:11:48.310
It's a little out of date now.

00:11:48.310 --> 00:11:49.680
We are improving it.

00:11:49.800 --> 00:11:51.960
Until we can get another
developer CD out,

00:11:51.960 --> 00:11:54.920
we are actually going to
provide more sample code to DTS.

00:11:54.920 --> 00:11:57.980
And so DTS will be able
to post this sample code,

00:11:57.980 --> 00:11:59.680
hopefully quite soon.

00:12:04.000 --> 00:12:08.800
Another UI related thing is how
do you extend the print dialog.

00:12:08.800 --> 00:12:13.000
When I say print dialog,
I mean the page setup and print dialogs.

00:12:13.010 --> 00:12:18.710
The message here is to write
these print dialog extensions.

00:12:19.630 --> 00:12:22.140
Instead of using the old
append-dittle mechanism,

00:12:22.140 --> 00:12:27.880
append-dittle was the way in which
you used to extend the print dialogs

00:12:27.880 --> 00:12:33.400
back on older versions of the OS using
PM dialog init and main calls.

00:12:33.400 --> 00:12:35.180
And it was a little kludgy.

00:12:35.180 --> 00:12:39.650
You really had no control over how
you could lay out your controls for

00:12:39.900 --> 00:12:42.900
whatever print-specific features you had.

00:12:42.920 --> 00:12:46.130
What you can do with
PDEs is that you can have,

00:12:46.130 --> 00:12:50.140
if you like, multiple panels added
to the print dialog,

00:12:50.200 --> 00:12:52.400
or the page setup dialog for that matter.

00:12:52.400 --> 00:12:55.500
Lay them out exactly as you like,
so it's a lot more powerful.

00:12:55.500 --> 00:13:00.480
The only restriction is that
PDEs are only supported on 10.

00:13:04.350 --> 00:13:12.610
A couple of things to mention
in connection with PDEs is that

00:13:14.200 --> 00:13:17.790
You're welcome to write PDEs and
add any features you like,

00:13:17.810 --> 00:13:21.370
but we would definitely like you to
talk to us before you start doing that.

00:13:21.430 --> 00:13:25.290
You don't have to register
PDEs because they are plug-ins,

00:13:25.290 --> 00:13:29.900
they use the UUID mechanism,
so they're all by definition unique.

00:13:29.960 --> 00:13:34.830
But we'd rather you didn't write a
PDE for a feature that you know deep

00:13:34.830 --> 00:13:37.940
down is something that Apple should do.

00:13:37.940 --> 00:13:41.110
And if you're an application developer,
we'd rather you didn't write a

00:13:41.110 --> 00:13:44.000
PDE for a feature that really
should belong to the printer.

00:13:45.210 --> 00:13:48.660
And vice versa, if you're developing
printer modules for X,

00:13:48.660 --> 00:13:52.620
we don't want you putting features
in that really should be provided by

00:13:52.620 --> 00:13:55.300
Apple or maybe are application specific.

00:13:55.300 --> 00:14:00.810
So you're very welcome to run your ideas
by us and we'll give you some advice.

00:14:00.810 --> 00:14:03.380
We'll certainly tell you if we're
planning to write a PDE for a

00:14:03.530 --> 00:14:04.890
feature that you think you need.

00:14:05.920 --> 00:14:08.720
And we're acutely aware of
the fact that there are some

00:14:08.720 --> 00:14:11.710
that we should write and add,
and we're working on that,

00:14:11.710 --> 00:14:13.910
so patience is always appreciated.

00:14:14.100 --> 00:14:17.130
I appreciate it.

00:14:18.450 --> 00:14:23.720
I should mention in connection with
PDEs that we strongly encourage you

00:14:23.720 --> 00:14:31.510
to think about the UI design and the
layout to follow Apple's example.

00:14:31.980 --> 00:14:35.370
If you're a printer module,
you may be very tempted to make

00:14:35.370 --> 00:14:40.240
your UI look exactly like your
print dialogues on MacÂ OS 9 or 8 or,

00:14:40.250 --> 00:14:42.220
heaven forbid, on some other platform.

00:14:42.220 --> 00:14:45.860
And we strongly encourage
you not to do that,

00:14:46.000 --> 00:14:49.490
to take a step back,
look at how things look on

00:14:49.490 --> 00:14:51.920
MacÂ OSÂ X and fit in with that.

00:14:52.000 --> 00:14:56.050
Certainly users don't want to see
any inconsistencies as they switch

00:14:56.050 --> 00:15:00.140
between one panel and another or
between one printer and another.

00:15:00.980 --> 00:15:03.320
So same applies to
application developers.

00:15:03.320 --> 00:15:07.800
You might want to do something that
looks just like your application

00:15:08.090 --> 00:15:13.390
printing extensions on 8 or 9,
but try to do the ACWA thing if you can.

00:15:13.400 --> 00:15:16.370
And certainly we're here to
give you advice if you have

00:15:16.420 --> 00:15:18.080
any questions about that.

00:15:20.420 --> 00:15:21.400
Let's see.

00:15:21.400 --> 00:15:26.940
So if you're an application developer and
you've added a panel to the print dialog,

00:15:26.940 --> 00:15:29.660
you want to know what the
user did in that panel.

00:15:29.660 --> 00:15:33.900
So the two routines down here
are used for that purpose.

00:15:33.920 --> 00:15:38.280
Your plugin is going to call
PM session set data in session,

00:15:38.280 --> 00:15:41.480
and you can use the get
call to fish that out,

00:15:41.480 --> 00:15:46.090
and then your application mainline
code is going to know what it

00:15:46.250 --> 00:15:48.540
needs to do in the print loop.

00:15:49.860 --> 00:15:51.830
Again, sample code from DTS.

00:15:51.870 --> 00:15:56.930
One small thing that's probably
worth mentioning is that you

00:15:56.970 --> 00:16:00.880
do have a choice when you're
building your PDEs as to whether

00:16:00.880 --> 00:16:03.340
to build them as pair form or code.

00:16:03.340 --> 00:16:08.130
Even if you're a CFM app,
there's glue code from DTS.

00:16:08.220 --> 00:16:09.300
So it's your choice.

00:16:09.300 --> 00:16:10.840
It's perfectly doable.

00:16:26.460 --> 00:16:32.240
Okay, now a plug for a few APIs that we
certainly use in our sample code.

00:16:32.270 --> 00:16:39.040
These are not exactly taken at random,
but there are a lot of APIs in PM core,

00:16:39.040 --> 00:16:40.470
PM application.

00:16:40.470 --> 00:16:45.080
Some of them have rather
specialized purposes.

00:16:45.080 --> 00:16:48.100
Others, hopefully,
are obvious why you should use them.

00:16:48.100 --> 00:16:49.930
But there's a lot of APIs,
so it may not be obvious

00:16:49.930 --> 00:16:51.110
which ones you should use.

00:16:51.110 --> 00:16:54.660
Here are a few that we encourage
you to use all the time.

00:16:55.580 --> 00:17:00.460
The first one, PM set job name CFString,
is a function you should

00:17:00.460 --> 00:17:02.300
call to name your print job.

00:17:02.320 --> 00:17:05.380
By default,
if you don't call this routine,

00:17:05.380 --> 00:17:08.190
we'll get the window title and use that.

00:17:08.260 --> 00:17:11.150
But there are applications that
don't necessarily have windows

00:17:11.150 --> 00:17:14.080
or have multiple windows and do
strange things at print time.

00:17:14.080 --> 00:17:17.230
So this is a great way of
providing a user-friendly,

00:17:17.690 --> 00:17:18.500
meaningful name.

00:17:18.500 --> 00:17:22.660
That name will be displayed by
print center in the queue window.

00:17:22.660 --> 00:17:24.400
It'll be displayed in the print window.

00:17:24.400 --> 00:17:25.020
The second one, PM set job name CFString,
is a function you

00:17:25.020 --> 00:17:25.280
should use all the time.

00:17:25.470 --> 00:17:30.400
This will be displayed as a default
file name if you're printing the disk.

00:17:30.570 --> 00:17:34.400
We'll put it in the job title comment
in PostScript files we generate.

00:17:34.550 --> 00:17:38.590
It's used in various other places,
so please use that routine.

00:17:38.730 --> 00:17:41.840
PM Set Page Range is quite
a useful API as well.

00:17:41.840 --> 00:17:48.160
You use it basically to tell our
Copies and Pages panel how to limit

00:17:48.160 --> 00:17:54.270
the from-to fields when the user's
typing in the pages they want to print.

00:17:54.270 --> 00:17:57.180
You can use this in connection
with another routine,

00:17:57.310 --> 00:17:59.770
PM Set Last Page,
to prime the print dialog so

00:17:59.780 --> 00:18:03.130
you can actually tell the user
what the first page and what the

00:18:03.230 --> 00:18:05.190
last pages are in the document.

00:18:06.210 --> 00:18:11.100
It prevents people typing crazy numbers
in there and then your application has

00:18:11.140 --> 00:18:13.280
to deal with that in the print loop.

00:18:13.300 --> 00:18:17.370
PM Session Error

00:18:18.470 --> 00:18:21.770
You really need to use this in
your print loop and you have to

00:18:21.850 --> 00:18:26.270
make sure that you always call it
before the begin page function.

00:18:26.440 --> 00:18:29.580
If you do detect an
error with this routine,

00:18:29.580 --> 00:18:30.920
don't bail immediately.

00:18:30.920 --> 00:18:34.720
What you should do is make sure
you call the end document routine.

00:18:34.720 --> 00:18:38.490
That allows us to clean up any memory
we've allocated and then you can

00:18:38.490 --> 00:18:41.450
safely get out of the print loop,
just post your error

00:18:41.450 --> 00:18:44.030
message if you need to,
and exit cleanly.

00:18:45.910 --> 00:18:49.730
You should use PM Session Set Error
within the print loop to set your own

00:18:49.730 --> 00:18:54.620
error codes or error conditions that
will be picked up after that page has

00:18:54.620 --> 00:18:57.720
been processed by PM Session Error.

00:18:57.720 --> 00:19:01.590
PM Session Set Error is the way you
register your application-specific

00:19:01.590 --> 00:19:05.710
error conditions that you encountered
while trying to draw your pages.

00:19:05.710 --> 00:19:09.940
Obviously,
you don't want to use it for...

00:19:10.000 --> 00:19:19.000
[Transcript missing]

00:19:21.800 --> 00:19:26.450
So how many people remember the original
articles called The Perils of PostScript?

00:19:26.460 --> 00:19:30.320
Ten, eleven years old they were written.

00:19:30.320 --> 00:19:30.860
Okay.

00:19:30.860 --> 00:19:35.210
Written by a guy called Zizi
Zimmerman who's I think the

00:19:35.210 --> 00:19:36.920
originator of the dog cow.

00:19:36.920 --> 00:19:38.240
Pretty famous guy in his time.

00:19:39.860 --> 00:19:43.590
I'm certainly not trying
to emulate what he did,

00:19:43.700 --> 00:19:46.880
which is a lot better
than what I'm doing today,

00:19:46.880 --> 00:19:51.310
but it's worth talking about some of the
tricky aspects of mixing PostScript with

00:19:51.310 --> 00:19:52.450
Quick Draw when you're printing.

00:19:52.460 --> 00:19:56.110
Historically,
every application that's had moderate

00:19:56.150 --> 00:20:01.030
to sophisticated drawing requirements
or capabilities has had to resort

00:20:01.030 --> 00:20:04.590
to PostScript at print time,
obviously if you're only

00:20:04.590 --> 00:20:07.740
printing to a PostScript printer,
because Quick Draw really won't cut it.

00:20:08.260 --> 00:20:10.160
For things like smooth shading, etc.

00:20:10.160 --> 00:20:13.360
For a long time,
application developers have

00:20:13.360 --> 00:20:17.690
been using PIC comments,
inserting snippets of PostScript or

00:20:17.690 --> 00:20:21.430
huge chunks of PostScript in
their PIC spool files,

00:20:21.430 --> 00:20:25.350
and getting to know the idiosyncrasies
of different versions of print drivers,

00:20:25.350 --> 00:20:25.830
etc.

00:20:25.840 --> 00:20:29.310
We recognize that the folks
who've written these sort of

00:20:29.350 --> 00:20:34.080
applications probably got a lot of
code they need to bring over to 10.

00:20:34.080 --> 00:20:35.520
They can't do it immediately.

00:20:35.520 --> 00:20:38.080
We'd obviously like you
to go towards the PDF.

00:20:38.260 --> 00:20:40.870
We have a PDF imaging model,
but in the meantime,

00:20:40.940 --> 00:20:44.260
we do have what we call the Laser Iterate
compatibility path in printing.

00:20:44.260 --> 00:20:49.290
So you can tell the printing system that
you want to pick with PostScript spool

00:20:49.320 --> 00:20:51.720
file instead of a PDF spool file.

00:20:51.720 --> 00:20:54.530
These are the two routines
you use to do that.

00:20:54.600 --> 00:20:57.650
You call PM session,
get document format generation

00:20:57.750 --> 00:21:01.320
to get back a list of spool
file formats that are supported.

00:21:01.320 --> 00:21:03.760
And obviously,
you've got to call this after the

00:21:03.840 --> 00:21:05.680
print dialog's been dismissed.

00:21:05.680 --> 00:21:08.000
Because before that, nobody knows.

00:21:08.260 --> 00:21:11.060
They don't know what the target printer
is and whether it's a PostScript printer.

00:21:11.060 --> 00:21:13.800
So call it after the print
dialog's been dismissed.

00:21:13.800 --> 00:21:14.750
You get back a list.

00:21:14.800 --> 00:21:19.480
The list will always contain PDF as
a supported spool file format.

00:21:19.480 --> 00:21:22.230
And maybe it's going to contain
PIC with PostScript if the target

00:21:22.230 --> 00:21:23.920
printer's a PostScript printer.

00:21:23.920 --> 00:21:27.100
So having discovered that,
you can then call PM session

00:21:27.100 --> 00:21:30.490
set document format generation,
pass in PIC with PostScript as

00:21:30.590 --> 00:21:31.840
your preferred format.

00:21:31.840 --> 00:21:34.720
And basically, from that point on,
when you draw your

00:21:34.720 --> 00:21:38.110
pages in the print loop,
you can use PIC.

00:21:38.260 --> 00:21:42.610
comments, and insert your own postscript.

00:21:43.410 --> 00:21:50.260
The sample code is already
on the developer CD.

00:21:50.290 --> 00:21:53.100
It's not bad,
but I think we've got a better

00:21:53.100 --> 00:21:59.290
version coming out very soon,
again through DTS.

00:22:00.880 --> 00:22:02.220
Those are the routines you should use.

00:22:02.240 --> 00:22:06.780
There's a routine that's in
PM Core called PM is PostScript Driver.

00:22:06.780 --> 00:22:08.680
It might sound like it
does the same thing.

00:22:08.680 --> 00:22:09.420
It doesn't.

00:22:09.430 --> 00:22:11.430
It just tells you whether
the current printer,

00:22:11.550 --> 00:22:14.630
basically it tells you whether the
current printer is LaserWrite or 8 or

00:22:14.640 --> 00:22:18.140
whether the current printer on 8 and 9,
whether it's WDEV field is 3.

00:22:18.140 --> 00:22:22.860
So you could use it on 8 and
9 to see if you're printing to

00:22:22.860 --> 00:22:27.110
LaserWrite or 8 or Adobe PS,
but don't try to use it

00:22:27.170 --> 00:22:29.270
on 10 for this purpose.

00:22:29.270 --> 00:22:29.270
Paul Danbold

00:22:29.870 --> 00:22:33.490
So having told the printing system you
want to generate your own PostScript,

00:22:33.500 --> 00:22:39.720
these are the five pick comment routines
you can use to put your PostScript in.

00:22:39.720 --> 00:22:41.810
I say be careful with PostScript.

00:22:41.840 --> 00:22:44.000
Anybody who's doing this
stuff already knows why.

00:22:44.100 --> 00:22:46.820
You have to be careful.

00:22:47.000 --> 00:22:50.060
It's only designed for inserting
PostScript in page drawing

00:22:50.060 --> 00:22:52.980
to supplement what you're
already doing with Quick Draw.

00:22:52.980 --> 00:22:57.430
Be careful, especially be careful
about assuming existence of

00:22:57.510 --> 00:23:00.590
resources like font resources,
etc.

00:23:00.600 --> 00:23:06.560
The Space Hacks does still work,
but if you've got code that is

00:23:06.650 --> 00:23:11.180
currently compatible with LaserWriter 8,
it's going to be compatible with

00:23:11.460 --> 00:23:13.230
this method of printing on 10.

00:23:15.560 --> 00:23:22.500
There used to be a mechanism to
send your own PostScript procedures

00:23:22.500 --> 00:23:24.160
down with the print job.

00:23:24.210 --> 00:23:27.900
It goes by the name of
the P-REC 103 mechanism.

00:23:27.900 --> 00:23:29.610
It's a resource you have
in your application.

00:23:29.620 --> 00:23:32.690
That's the way in which you get
your own PostScript into the

00:23:32.690 --> 00:23:36.110
header or into the document page
setup sections of the print job.

00:23:37.240 --> 00:23:40.570
You can still use P-REC 103,
but there's a much better

00:23:40.570 --> 00:23:43.900
API and mechanism for doing it,
and that is this PM Session

00:23:43.900 --> 00:23:46.400
Set PostScript Injection Data routine.

00:23:46.400 --> 00:23:48.450
It's documented.

00:23:48.610 --> 00:23:50.900
It's in PM Core today.

00:23:50.900 --> 00:23:55.220
Basically, you provide a dictionary
of key value pairs.

00:23:55.220 --> 00:23:57.880
The keys are tags into
the PostScript job.

00:23:57.900 --> 00:24:03.250
The values are snippets of PostScript you
want us to insert at specific places.

00:24:03.250 --> 00:24:05.740
It gives you fine control over
the PostScript job you generate.

00:24:06.640 --> 00:24:08.480
You still obviously have to be
careful about what you're doing,

00:24:08.480 --> 00:24:13.750
but it's a lot better than P-REC 103,
and you should use it if you are

00:24:13.750 --> 00:24:17.340
forced to use the LaserWriter
8 compatibility path on 10.

00:24:18.990 --> 00:24:22.340
A couple of disadvantages,
or obvious disadvantages,

00:24:22.340 --> 00:24:23.190
of using all this stuff.

00:24:23.210 --> 00:24:27.310
The first thing is that Preview,
which the Preview app we use

00:24:27.310 --> 00:24:30.930
for previewing spool files,
can handle PDF, but we don't have a

00:24:30.930 --> 00:24:32.960
PostScript rip in the system.

00:24:32.960 --> 00:24:36.190
So if you're doing the
PostScript printing path on 10,

00:24:36.190 --> 00:24:38.290
you can't preview your documents.

00:24:40.250 --> 00:24:43.530
What's more, if you're doing this,
one day we'll support drag and

00:24:43.530 --> 00:24:46.470
drop in Print Center and you'll
be able to drag spool files

00:24:46.590 --> 00:24:50.600
from one print queue to another,
or documents onto queues, for example,

00:24:50.640 --> 00:24:56.360
and you can't drag a PostScript spool
file onto a queue for a Raster printer

00:24:56.360 --> 00:24:59.480
because we can't render PostScript.

00:24:59.520 --> 00:25:03.810
So use this stuff if you need to,
if it's a short-term

00:25:03.980 --> 00:25:07.160
solution for getting onto 10.

00:25:07.160 --> 00:25:12.170
But go to... The Graphics and
Imaging Tips and Trips session

00:25:12.170 --> 00:25:15.320
tomorrow morning at 9 o'clock,
where one of my colleagues,

00:25:15.340 --> 00:25:18.220
sitting in the front row there,
is going to tell you a lot more

00:25:18.220 --> 00:25:22.700
about QuickDraw and Quartz 2D,
and I think you'll find the information

00:25:22.860 --> 00:25:25.420
you get out of there really shows
you a much better way of doing

00:25:25.420 --> 00:25:29.860
sophisticated printing on 10 than
the old QuickDraw and PostScript route.

00:25:33.590 --> 00:25:36.980
Now for a topic that has
generated a ton of email,

00:25:36.980 --> 00:25:39.270
a lot of bug reports.

00:25:39.270 --> 00:25:42.550
Actually, we've put a lot of bug
fixes in CarbonLib.

00:25:42.550 --> 00:25:48.630
The issue is how we get routines like PM,
set, get, scaling resolution,

00:25:49.350 --> 00:25:50.470
orientation, etc.

00:25:50.470 --> 00:25:56.470
to work accurately when you're
printing through CarbonLib on MacÂ OSÂ X.

00:26:19.630 --> 00:26:23.580
So it's difficult for us algorithmically
to figure out how to deal with

00:26:23.580 --> 00:26:25.500
all these different print drivers,
print records.

00:26:26.500 --> 00:26:29.370
So what we've done,
and we've been doing this

00:26:29.390 --> 00:26:32.950
for the last year or so,
we've been encouraging printer

00:26:32.950 --> 00:26:36.290
driver developers to help
us create this database,

00:26:36.450 --> 00:26:40.640
which we call the PDAT database,
that's inside of CarbonLib.

00:26:42.430 --> 00:26:45.880
It contains information that tells
us for these various settings

00:26:45.930 --> 00:26:49.500
like copies and orientation,
the offset into the print record,

00:26:49.500 --> 00:26:53.340
the size, bitmask to separate the
parameter from its neighbors,

00:26:53.340 --> 00:26:56.000
and some information to handle.

00:26:57.500 --> 00:26:58.450
So it's pretty good.

00:26:58.450 --> 00:27:00.550
There's about 40 PDATs
in CarbonLib today.

00:27:00.550 --> 00:27:03.960
It covers about 250-odd drivers,
but there are other drivers out there,

00:27:03.960 --> 00:27:07.280
and you'll probably encounter them,
or your customers will encounter them,

00:27:07.420 --> 00:27:10.710
and they'll complain, and you tell us,
and we'll talk to the driver developer,

00:27:10.710 --> 00:27:12.300
and we'll add another PDAT.

00:27:12.460 --> 00:27:13.230
So it's pretty good.

00:27:13.230 --> 00:27:15.170
There's about 40 PDATs
in CarbonLib today.

00:27:15.170 --> 00:27:18.170
It covers about 250-odd drivers,
but there are other drivers out there,

00:27:18.170 --> 00:27:21.110
and you'll probably encounter them,
or your customers will encounter them,

00:27:21.110 --> 00:27:24.130
and they'll complain, and you tell us,
and we'll talk to the driver developer,

00:27:24.130 --> 00:27:25.500
and we'll add another PDAT.

00:27:25.660 --> 00:27:27.530
And that's the way it works.

00:27:27.620 --> 00:27:29.690
And in the meantime, code defensively.

00:27:29.690 --> 00:27:33.760
It's just as bad as the situation
when you were printing directly

00:27:33.760 --> 00:27:37.740
to those drivers on 8 and 9
last year or the year before.

00:27:37.740 --> 00:27:39.860
So it's a compatibility problem.

00:27:39.860 --> 00:27:40.970
We're working on it.

00:27:41.010 --> 00:27:44.520
It's getting better,
but we certainly appreciate your support.

00:27:44.520 --> 00:27:47.990
And bug reports are just
a fine way of doing it.

00:27:54.660 --> 00:27:57.800
We use the PR general function, again,
under CarbonLib against

00:27:57.810 --> 00:28:00.450
the classic drivers,
and for those to work reliably,

00:28:00.450 --> 00:28:03.440
we need that driver to support
the various opcodes associated

00:28:03.440 --> 00:28:04.880
with those functions.

00:28:04.880 --> 00:28:07.390
If the driver doesn't
support that opcode,

00:28:07.580 --> 00:28:10.450
the only thing we can do is
return KPM not implemented,

00:28:10.550 --> 00:28:12.460
and you have to deal with that.

00:28:12.460 --> 00:28:15.570
Again, it's no worse than the
situation ever was,

00:28:15.570 --> 00:28:19.070
but the message is,
if you're printing through CarbonLib,

00:28:19.220 --> 00:28:22.280
be careful,
because there are some drivers out there

00:28:22.360 --> 00:28:24.640
that we don't know how to deal with.

00:28:24.660 --> 00:28:26.550
how to handle it.

00:28:31.220 --> 00:28:31.620
All right.

00:28:31.910 --> 00:28:35.200
Probably going to trip
over myself on this one.

00:28:35.210 --> 00:28:40.520
I'm going to try to talk about
some page and paper wreck issues.

00:28:40.520 --> 00:28:45.260
So first of all, terminology.

00:28:45.260 --> 00:28:48.620
The formatting printer is the printer
you see in the page setup dialog.

00:28:50.870 --> 00:28:54.640
On 10,
we are gently trying to educate users

00:28:54.640 --> 00:28:59.870
that when they format a document,
it's not necessarily going to

00:28:59.870 --> 00:29:04.320
be printed to the same printer
that they format it for,

00:29:04.320 --> 00:29:09.040
and it might well be printed
to a variety of printers.

00:29:09.040 --> 00:29:13.440
So we've introduced this entry
in the pop-up called Any Printer,

00:29:13.440 --> 00:29:15.980
which we call the generic printer.

00:29:15.980 --> 00:29:20.460
The idea is that the user who, well,
actually the user who doesn't care.

00:29:20.680 --> 00:29:21.960
He isn't even going to
bring this dialog up,

00:29:21.980 --> 00:29:22.960
and they'll never see anything.

00:29:22.960 --> 00:29:25.650
But when the page format
object is created,

00:29:25.650 --> 00:29:29.920
we'll create it for this generic printer,
which has associated with

00:29:29.920 --> 00:29:33.240
it a set of standard papers
and a set of safe margins.

00:29:33.240 --> 00:29:38.370
If you go into the page setup dialog,
you can pick another printer,

00:29:38.370 --> 00:29:43.220
one of the printers that you see
that you set up in Print Center,

00:29:43.280 --> 00:29:46.700
and you can pick a specific paper
size supported by your printer.

00:29:46.700 --> 00:29:49.710
And you will get,
courtesy of the printer module,

00:29:49.710 --> 00:29:50.660
downstream.

00:29:50.660 --> 00:29:52.530
So you can get,
courtesy of the printer module,

00:29:52.740 --> 00:29:54.990
downstream exact margins for
that selected paper size.

00:29:55.000 --> 00:30:00.260
But the important thing is that
whatever you format your document for

00:30:00.260 --> 00:30:06.290
is quite separate from what happens
when you decide to print that document.

00:30:06.300 --> 00:30:10.440
So the formatting for printer is
totally independent of the printer

00:30:10.440 --> 00:30:12.980
entry that you see in the print dialog.

00:30:12.980 --> 00:30:18.920
And it's a little bit of a leap of, well,
it's a change of model for some users.

00:30:18.960 --> 00:30:23.080
But we feel... We feel that it's a
sensible step in the right direction.

00:30:23.080 --> 00:30:29.970
So the current and the default printers,
those are only relevant in

00:30:30.170 --> 00:30:35.290
the context of printing,
as in the print dialog.

00:30:35.300 --> 00:30:38.000
When you bring the print
dialog up for the first time,

00:30:38.000 --> 00:30:41.840
the printer pop-up will always contain
the name of the default printer.

00:30:41.840 --> 00:30:44.780
The default printer is the
printer you set in Print Center.

00:30:44.780 --> 00:30:47.510
Typically,
that's the last printer you set up.

00:30:47.560 --> 00:30:52.680
And if you fiddle with the pop-up...
You can change the printer entry.

00:30:52.680 --> 00:30:55.100
So you're changing, at that point,
the current printer.

00:30:55.100 --> 00:30:59.920
So there are cases where you will format
for one printer and print to another.

00:30:59.920 --> 00:31:00.940
And that's fine.

00:31:00.940 --> 00:31:04.780
I mean,
we've got this nice PDF imaging model.

00:31:04.780 --> 00:31:10.460
We can handle mapping, you know,
the document to different paper sizes.

00:31:10.460 --> 00:31:12.610
The default behavior
right now is we clip.

00:31:12.640 --> 00:31:17.170
But we'll provide some more functionality
to allow people to do things like scale

00:31:17.240 --> 00:31:19.420
and center their pages on the paper.

00:31:20.710 --> 00:31:23.930
But the main thing for people to
come to terms with is the fact that

00:31:24.150 --> 00:31:26.820
formatting for a printer is very
different from the current printer

00:31:26.820 --> 00:31:27.720
that you see in the print dialog.

00:31:31.380 --> 00:31:37.570
Let's see, what else to say about that?

00:31:37.840 --> 00:31:40.170
You can't change,
there's no programmatic way of

00:31:40.230 --> 00:31:41.120
changing the default printer.

00:31:41.120 --> 00:31:42.780
That is the user's decision.

00:31:42.780 --> 00:31:44.460
The user can do that
through Print Center.

00:31:44.460 --> 00:31:49.220
Today you can't change the
current printer through any APIs,

00:31:49.220 --> 00:31:52.300
but we do recognize that there
are some applications that

00:31:52.300 --> 00:31:53.620
want to do this sort of thing.

00:31:53.620 --> 00:31:56.520
If you're writing a printer utility,
for example, you might want to do it.

00:31:56.540 --> 00:32:00.620
So here are a couple of APIs,
PM Session Create Printer List and

00:32:00.620 --> 00:32:04.270
PM Session Set Current Printer,
which respectively will give

00:32:04.270 --> 00:32:06.640
you a list of the printers
that you see in Print Center.

00:32:07.420 --> 00:32:09.040
And they will let you
change the current printer.

00:32:09.040 --> 00:32:10.880
They're not available today.

00:32:10.880 --> 00:32:13.460
They will be available
in some future release.

00:32:13.480 --> 00:32:16.560
And I think if you write to
DTS in a week or so from now,

00:32:16.560 --> 00:32:19.730
they'll be able to provide
you with some details.

00:32:19.740 --> 00:32:24.100
Again, you can't use them today,
but if you're trying to do functionality

00:32:24.100 --> 00:32:28.670
that requires access to the printer list,
we do have a solution for you.

00:32:30.490 --> 00:32:34.160
The other thing I need to say,
well it's a bit of a confession really,

00:32:34.160 --> 00:32:38.120
is that the page setup dialog
doesn't exactly work the way it's

00:32:38.130 --> 00:32:43.080
supposed to in 10.0 or 10.0.1,
2, and 3, but we are fixing it.

00:32:43.100 --> 00:32:46.060
I'm sure you've noticed if you
go to the page setup dialog,

00:32:46.170 --> 00:32:48.770
pick a printer, pick a paper size,
okay the dialog,

00:32:48.820 --> 00:32:51.490
and then come back to it later,
it doesn't appear that

00:32:51.490 --> 00:32:53.130
the settings have stuck.

00:32:53.140 --> 00:32:57.170
So we are very well aware
of that problem and we have,

00:32:57.170 --> 00:33:00.090
I think it's safe to say we fixed it.

00:33:00.400 --> 00:33:03.960
So you'll be getting those fixes,
hopefully quite soon.

00:33:05.340 --> 00:33:11.320
A few words about paper and pages
and the first thing I have to say in

00:33:11.420 --> 00:33:15.580
connection with these routines that
are generally used by applications that

00:33:15.660 --> 00:33:19.600
are trying to format a document that
maybe have come from another platform

00:33:19.600 --> 00:33:23.250
or been formatted for another printer
without using the page setup dialogue.

00:33:23.250 --> 00:33:27.010
These routines,
you have to be very careful about

00:33:27.010 --> 00:33:31.640
using them on 8 and 9 because there's
no programmatic way on 8 and 9 to

00:33:31.750 --> 00:33:35.250
tell the driver what to put in,
well, to put in a document.

00:33:35.300 --> 00:33:37.950
You can't put different R paper,
R page settings into the print

00:33:37.950 --> 00:33:40.860
record without going through the
driver's page setup dialogue.

00:33:40.860 --> 00:33:42.460
So the APIs are there.

00:33:42.460 --> 00:33:44.900
Use them carefully on 8 and 9.

00:33:44.900 --> 00:33:50.230
They do work on 10 as
advertised or as expected.

00:33:50.300 --> 00:33:54.620
So you really do have a lot more control
over your paper and page recs on 10.

00:33:54.620 --> 00:33:57.800
If you're going to print without a UI,
you can do that and you've

00:33:57.800 --> 00:34:00.440
got a reasonable amount
of control over margins.

00:34:02.520 --> 00:34:05.110
A The last bullet item here
is extremely important.

00:34:05.300 --> 00:34:07.290
and

00:34:07.330 --> 00:34:11.540
Before you call any of the
GET functions to get the page rec,

00:34:11.540 --> 00:34:17.000
for example, always make sure you call
the validate call after any

00:34:17.000 --> 00:34:20.230
set call to set orientation,
set scale, set resolution,

00:34:20.260 --> 00:34:24.750
set paper or page rec because that's
the only time we sync everything up.

00:34:24.750 --> 00:34:28.740
In fact, we're even fixing a few
bugs in that routine,

00:34:28.740 --> 00:34:31.260
so we'll get it right very soon.

00:34:34.790 --> 00:34:38.970
So that's pretty much all
I've got now for Carbon.

00:34:38.970 --> 00:34:43.310
Just to recap, do use the session APIs,
display your print

00:34:43.450 --> 00:34:47.370
dialogs as sheets on 10,
develop your own PDEs,

00:34:47.370 --> 00:34:52.830
go to tomorrow morning's session,
look forward to using Quartz 2D instead

00:34:53.110 --> 00:34:59.890
of mixing up Quickdraw and PostScript,
and program defensively when you're

00:35:00.490 --> 00:35:04.160
running on 8 and 9 on CarbonLib.

00:35:04.700 --> 00:35:05.180
We do our best.

00:35:05.180 --> 00:35:07.560
Compatibility is getting better,
but be aware of some

00:35:07.670 --> 00:35:08.550
of the issues we face.

00:35:13.500 --> 00:35:16.220
Now we're going to switch
horses for a moment to talk a

00:35:16.220 --> 00:35:17.430
little bit about Cocoa Printing.

00:35:17.440 --> 00:35:20.670
What I'm not going to do...

00:35:22.010 --> 00:35:26.200
I'd like to tell you what to do in
your application because there's

00:35:26.220 --> 00:35:30.800
a session straight after this on
advanced Cocoa topics in Hall 2.

00:35:30.800 --> 00:35:34.270
And there's a lot more information there,
so I encourage you to go to that

00:35:34.270 --> 00:35:37.110
session if you're a Cocoa app
developer and want to know a bit

00:35:37.110 --> 00:35:39.220
more about how to do printing right.

00:35:39.220 --> 00:35:41.900
What I'm going to talk about
is the relationship between

00:35:41.900 --> 00:35:44.810
the AppKit printing classes,
there's only four of them that

00:35:44.810 --> 00:35:48.590
are really relevant for printing,
and the underlying printing system.

00:35:49.640 --> 00:35:52.670
So we're just going to go through these
classes fairly quickly and I'll just try

00:35:52.760 --> 00:35:54.640
to explain how they map to each other.

00:35:54.640 --> 00:35:58.100
The first one, NSPrintInfo.

00:35:58.100 --> 00:36:02.330
If you look in NSPrintInfo,
look at the online documentation

00:36:02.330 --> 00:36:06.660
or look at the code itself,
you'll see it's a dictionary

00:36:06.660 --> 00:36:09.630
that contains all the settings
that are usually associated with

00:36:09.690 --> 00:36:11.380
the page setup and print dialog.

00:36:11.380 --> 00:36:14.200
So in theory,
it maps directly to our page

00:36:14.200 --> 00:36:16.860
format and print settings objects.

00:36:18.520 --> 00:36:20.840
As a Cocoa application,
you automatically get a

00:36:20.840 --> 00:36:22.260
shared NSPrintInfo object.

00:36:22.280 --> 00:36:26.780
There's always a notion of a
current one that's used for

00:36:26.780 --> 00:36:28.440
the current print operation.

00:36:28.440 --> 00:36:31.350
You can create multiple instances of it.

00:36:31.440 --> 00:36:34.620
There are accessor functions
for the various things that

00:36:34.620 --> 00:36:37.890
are stored in NSPrintInfo,
although most of them are changed

00:36:38.020 --> 00:36:41.680
by bringing up the dialogs,
the page setup and print dialogs.

00:36:41.760 --> 00:36:47.760
The thing that we need to do
is we need to sync NSPrintInfo.

00:36:47.760 --> 00:36:48.360
NSPrintInfo.

00:36:48.360 --> 00:36:51.170
A little bit more closely with
page format and print settings

00:36:51.170 --> 00:36:54.370
because there's a couple of things
in NSPrintInfo that aren't supported

00:36:54.430 --> 00:36:56.100
by the underlying printing system.

00:36:56.100 --> 00:36:59.100
We need to take care
of that and vice versa.

00:36:59.160 --> 00:37:01.460
There's a couple of things that
we have in the underlying print

00:37:01.460 --> 00:37:02.980
system that aren't in NSPrintInfo.

00:37:02.980 --> 00:37:07.820
Just a few things like NSPrintInfo's
got some fax settings which we

00:37:07.820 --> 00:37:10.560
don't carry through downstream.

00:37:10.560 --> 00:37:14.300
The underlying printing system's
got settings for things like print

00:37:14.300 --> 00:37:16.410
quality modes and things like that.

00:37:16.510 --> 00:37:17.690
So we'll be syncing those two up.

00:37:20.360 --> 00:37:25.610
NSPageLayout,
basically that's the page setup dialog.

00:37:25.790 --> 00:37:33.250
You really don't have to do a
lot of coding with NSPageLayout.

00:37:33.620 --> 00:37:39.700
It basically accesses and has print and
post as things like the paper size and

00:37:39.700 --> 00:37:42.540
the scaling orientation for the document.

00:37:42.540 --> 00:37:45.920
The one thing I want to point out is
that you can invoke it in two ways.

00:37:45.920 --> 00:37:50.120
You can invoke it as a modal dialog
and you can invoke it as a sheet.

00:37:50.150 --> 00:37:55.700
So you'll know which one you should do.

00:37:56.080 --> 00:37:58.480
One thing I could have mentioned
is that you can extend the page

00:37:58.540 --> 00:38:02.360
setup dialog in a Cocoa app,
but very few applications

00:38:02.360 --> 00:38:03.160
have need to do that.

00:38:03.260 --> 00:38:05.940
And it's Print Panel,
which is a print dialog, obviously.

00:38:05.940 --> 00:38:07.650
You can do the same thing.

00:38:07.650 --> 00:38:10.390
You can add an accessory view,
and it's sort of equivalent

00:38:10.460 --> 00:38:13.480
to print dialog extensions
for Carbon applications.

00:38:13.500 --> 00:38:16.590
You can add a view,
put your application in

00:38:16.590 --> 00:38:19.020
specific print settings in it.

00:38:19.740 --> 00:38:22.490
The only restriction today
with Cocoa apps is that you can

00:38:22.490 --> 00:38:24.140
only have one accessory view.

00:38:24.140 --> 00:38:28.120
I'm sure we'll work on that and enable
you to have more if you need them.

00:38:28.140 --> 00:38:30.140
And actually,
if you need to do that sort of thing,

00:38:30.140 --> 00:38:33.090
I think you should tell Apple,
so we understand the priority for that.

00:38:33.120 --> 00:38:37.020
And obviously,
NS Print Panel sets the things in

00:38:37.020 --> 00:38:42.400
NS Print Info that you see in the
dialogs like copies and page range,

00:38:42.400 --> 00:38:43.160
etc.

00:38:45.700 --> 00:38:48.780
Last but not least is
NS Print Operation where

00:38:48.780 --> 00:38:50.000
all the good stuff happens.

00:38:50.000 --> 00:38:54.000
When you pull down the file menu,
hit print,

00:38:54.050 --> 00:38:59.790
you create an NS Print Operation that
takes a copy of NS Print Info,

00:38:59.790 --> 00:39:03.700
brings the print dialog up,
merges the results back

00:39:03.780 --> 00:39:06.750
into NS Print Info,
and then it's up to NS View to

00:39:06.750 --> 00:39:07.910
do all the real work.

00:39:08.000 --> 00:39:11.480
NS View draws all the pages,
goes into the spool file,

00:39:11.480 --> 00:39:14.440
the PDF spool file,
and that spool file goes through

00:39:14.440 --> 00:39:16.610
the rest of the printing system
just like any other print job,

00:39:16.670 --> 00:39:18.780
maybe from other Cocoa apps
or from other Carbon apps.

00:39:22.710 --> 00:39:23.870
Basically, that's it.

00:39:24.030 --> 00:39:27.640
There's very little for you to
worry about for Cocoa printing.

00:39:27.640 --> 00:39:35.800
There's a little bit of work for us to do
to more tightly sync the AppKit classes

00:39:35.800 --> 00:39:39.310
up to our underlying data structures,
but it works pretty well today.

00:39:43.590 --> 00:39:48.330
Now for the power of printing, sorry,
the power of Unix and printing.

00:39:51.760 --> 00:39:54.710
So we don't expect a lot of consumers
to do printing from the command line,

00:39:54.710 --> 00:39:57.880
but maybe some of you guys in this
room will want to do that occasionally.

00:39:57.880 --> 00:39:59.580
So you can.

00:39:59.580 --> 00:40:04.990
The LPR family is in the BST layer.

00:40:04.990 --> 00:40:06.870
LPR works.

00:40:08.320 --> 00:40:10.830
Just a couple of things to mention.

00:40:10.940 --> 00:40:13.940
Today,
LPR and its associated tools like LPC,

00:40:14.160 --> 00:40:19.130
LPQ, LPRM, etc., they work,
but they're not really well integrated

00:40:19.130 --> 00:40:22.080
with the rest of the printing system.

00:40:22.080 --> 00:40:25.210
In other words, or for example,
when you say LPR-P,

00:40:25.440 --> 00:40:29.230
you want to type in your printer name,
you can't type in necessarily

00:40:29.330 --> 00:40:32.940
any of the print queue names
that you see in Print Center.

00:40:32.940 --> 00:40:38.460
The only exception to that is that
you can use... printer entries

00:40:38.580 --> 00:40:40.350
that are stored in NetInfo.

00:40:40.360 --> 00:40:45.100
So you can put NetInfo printer
entries in when you're LPR printing.

00:40:45.100 --> 00:40:50.710
The other thing, of course,
with LPR is that you don't get

00:40:50.740 --> 00:40:54.080
user-friendly status and error
messages if anything goes wrong.

00:40:54.080 --> 00:40:56.830
And you're limited in the
file types you can print.

00:40:56.860 --> 00:41:01.840
Generally, text and PostScript files work
well and others not so well.

00:41:01.840 --> 00:41:06.460
So LPR works,
but there's actually a better tool.

00:41:06.460 --> 00:41:09.870
And... if you haven't found it already,
it's just called the Print Tool.

00:41:09.980 --> 00:41:11.340
It's in the user S bin.

00:41:11.490 --> 00:41:15.040
The difference is that the
Print Tool is actually integrated

00:41:15.170 --> 00:41:16.480
with the rest of the printing system.

00:41:16.580 --> 00:41:20.160
So when you specify your printer,
you can specify any printer queue

00:41:20.160 --> 00:41:21.930
name that you see in Print Center.

00:41:22.000 --> 00:41:25.310
You can, for example,
print PDF files to raster

00:41:25.310 --> 00:41:27.560
printers using the Print Tool.

00:41:27.990 --> 00:41:34.720
There's an NUP flag you can use, dash N,
so you can print your files 2UP, 4UP,

00:41:34.770 --> 00:41:35.290
etc.

00:41:35.670 --> 00:41:39.630
So... and... and once you've printed,
you can see that your job's

00:41:39.730 --> 00:41:42.480
in the queues along with
everything else via Print Center.

00:41:42.480 --> 00:41:45.180
So... if you want to do
command line printing,

00:41:45.340 --> 00:41:47.720
print is a little better
than LPR at the moment.

00:41:49.260 --> 00:41:51.280
LPD is in the system.

00:41:51.490 --> 00:41:54.060
Obviously,
it's used when you print through LPR.

00:41:54.060 --> 00:41:58.860
It's not...

00:41:59.970 --> 00:42:04.060
It's not set up by default
to enable remote printing,

00:42:04.060 --> 00:42:05.230
but you can do that.

00:42:05.310 --> 00:42:08.500
So if you know what you're doing,
you can edit the config files and you

00:42:08.550 --> 00:42:11.160
can run LPD maybe from a startup script.

00:42:11.160 --> 00:42:16.710
And other clients on the LAN can print to
your LPD spool or running on your system

00:42:16.720 --> 00:42:19.760
to whatever printers you're set up for.

00:42:19.800 --> 00:42:21.530
So LPD works.

00:42:21.530 --> 00:42:25.440
It's not our long-term
solution for print sharing,

00:42:25.440 --> 00:42:26.790
but it's there.

00:42:29.600 --> 00:42:33.540
I mentioned a moment ago NetInfo.

00:42:33.570 --> 00:42:37.660
Something you may not know is whenever
you set up an LP operator in PrintCenter,

00:42:37.660 --> 00:42:39.500
we actually create a local NetInfo entry.

00:42:39.500 --> 00:42:45.480
I'm not going to get into NetInfo
because I'm definitely not the

00:42:45.610 --> 00:42:50.740
right person to talk about it,
but NetInfo is...

00:42:50.800 --> 00:42:56.660
A very convenient way of making
LPR printers available to everybody

00:42:56.660 --> 00:42:59.530
on the network without them having
to know their domain names or

00:42:59.580 --> 00:43:01.140
IP addresses or anything like that.

00:43:01.140 --> 00:43:05.320
But you can't use Print Center to
create global NetInfo entries or

00:43:05.340 --> 00:43:09.560
NetInfo entries that are exported
to higher network domains.

00:43:09.560 --> 00:43:11.950
You have to use NetInfo
Manager to do that,

00:43:11.950 --> 00:43:15.490
and you have to be appropriately
privileged to be able to create

00:43:15.520 --> 00:43:19.370
network-wide NetInfo things.

00:43:19.510 --> 00:43:21.870
So you can do it.

00:43:21.990 --> 00:43:23.900
If you're going to
create a printer entry,

00:43:23.900 --> 00:43:28.460
the PrintCap man page tells you about
the keys that you have to put in.

00:43:28.460 --> 00:43:29.920
You have to be careful there.

00:43:29.920 --> 00:43:32.770
I mean, we have to know,
you have to be exactly right when you

00:43:32.890 --> 00:43:36.040
specify the name of the printer and the
name of the machine that's running LPD,

00:43:36.040 --> 00:43:36.660
for example.

00:43:36.660 --> 00:43:40.720
There's one instance
there which I'm flagging.

00:43:40.720 --> 00:43:44.640
There's a TY key, which we use,
the value associated with that,

00:43:44.720 --> 00:43:49.360
we use to find the PPD file
for the PostScript printer.

00:43:49.380 --> 00:43:51.730
So you can use Print Center associated
with that NetInfo entry.

00:43:51.740 --> 00:43:57.200
And NetInfo is limited in
the bytecodes it can accept.

00:43:57.280 --> 00:43:59.690
It doesn't like forward
slashes and spaces,

00:43:59.720 --> 00:44:00.520
for example.

00:44:00.580 --> 00:44:03.670
Some PPD files may have
those in the file name.

00:44:03.680 --> 00:44:08.320
So if you're going to put
the PPD name in the entry,

00:44:08.320 --> 00:44:14.330
you can replace those slashes
and spaces with an underscore.

00:44:14.340 --> 00:44:15.930
So there's some subtleties there.

00:44:15.940 --> 00:44:19.340
I'm sure DTS can handle that.

00:44:19.380 --> 00:44:21.380
They can handle questions on it.

00:44:21.380 --> 00:44:24.890
But it's a nice way of making
your printers available to

00:44:24.890 --> 00:44:26.380
everybody on the network.

00:44:28.790 --> 00:44:30.170
So it's demo time.

00:44:30.290 --> 00:44:31.690
So is Phil Schiller here?

00:44:31.690 --> 00:44:33.880
Oh, okay.

00:44:33.880 --> 00:44:37.500
So I'll do the demo.

00:44:42.700 --> 00:44:43.800
We're already running terminal.

00:44:43.800 --> 00:44:46.340
It's going to be a very exciting demo.

00:44:46.340 --> 00:44:52.550
So exciting that...

00:44:54.070 --> 00:44:57.760
I think a lot of people
may want to leave now.

00:44:57.820 --> 00:45:00.500
Alright,
so we're running top over here just

00:45:00.500 --> 00:45:02.020
so that you can see what's going on.

00:45:02.070 --> 00:45:04.680
Not much happening right now,
though we've got PrintCentre

00:45:04.730 --> 00:45:07.630
running down here.

00:45:07.870 --> 00:45:11.990
Let me say a few words
about CPL Util first of all.

00:45:11.990 --> 00:45:14.850
It's a tool that was written
a while back when we were

00:45:14.850 --> 00:45:15.980
developing the printing system.

00:45:15.980 --> 00:45:21.040
It was written for Intel News originally,
but it's become quite useful for

00:45:21.040 --> 00:45:25.130
people who are doing print testing,
people who are trying to

00:45:25.130 --> 00:45:30.320
troubleshoot print jobs,
especially for printer driver developers.

00:45:30.370 --> 00:45:33.910
If you're feeling brave and
you're having a printing problem,

00:45:33.910 --> 00:45:36.180
CPL Util is a great
way of finding out if,

00:45:36.280 --> 00:45:39.080
for example, print queues have got
corrupted in some way,

00:45:39.130 --> 00:45:43.920
when a job fails, how far the print job
got through the pipeline.

00:45:43.920 --> 00:45:47.800
I'm going to show you a
little bit about CPL Util,

00:45:47.800 --> 00:45:52.400
but by no means give you a
comprehensive walkthrough.

00:45:52.400 --> 00:45:58.480
If we go to Developer Tools,

00:46:00.110 --> 00:46:04.940
We'll see, oops, where are we?

00:46:04.940 --> 00:46:05.520
Oh, CD.

00:46:09.670 --> 00:46:13.000
Of course this requires that I can type.

00:46:13.100 --> 00:46:14.920
See a bunch of things in
there that Apple provides that

00:46:14.920 --> 00:46:18.200
aren't in the standard BSD set,
but there's CPL Util,

00:46:18.610 --> 00:46:26.700
so we can run CPL Util and first
off get ready for the scrolling.

00:46:26.720 --> 00:46:31.030
We can see all the things
that CPL Util does.

00:46:31.600 --> 00:46:34.310
We're not going to try
many of these commands,

00:46:34.390 --> 00:46:37.630
but here's one that we can do.

00:46:37.640 --> 00:46:42.800
ShowWorksetPrinters is a command
we can use in CPL Util to see

00:46:42.800 --> 00:46:44.390
what print queues we've set up.

00:46:51.060 --> 00:46:54.320
We can do this and we can see, oh,
I don't have any print queues.

00:46:54.320 --> 00:47:00.530
So let's go to, well,

00:47:01.660 --> 00:47:04.710
Let's get print center,
let's get CPL Util listening to all

00:47:04.720 --> 00:47:08.870
the things that the print server does.

00:47:08.870 --> 00:47:12.810
That'll be one way of seeing whether
operations like creating a queue or

00:47:12.910 --> 00:47:14.520
printing a job work successfully.

00:47:14.580 --> 00:47:22.600
So, first thing I'm going to do is,
I'm not going to trust my typing.

00:47:22.600 --> 00:47:26.680
We're going to start the server.

00:47:31.320 --> 00:47:34.360
Top has beautifully shown that
the print server is now running.

00:47:34.360 --> 00:47:36.490
So now we can...

00:47:39.730 --> 00:47:44.990
You can listen to servers.

00:47:45.010 --> 00:47:45.010
So what we're doing now,
I mentioned earlier on that

00:47:45.120 --> 00:47:46.900
Print Server is the nerve
center of the system.

00:47:46.900 --> 00:47:49.480
So we're now listening on
a port to Print Server.

00:47:49.480 --> 00:47:51.600
We're finding out
everything that happens.

00:47:51.710 --> 00:47:54.770
If queues are created,
if jobs are printed,

00:47:54.770 --> 00:47:56.760
if queues are deleted, etc.

00:47:56.760 --> 00:47:59.940
So we're listening to
Print Server at this time.

00:48:01.110 --> 00:48:05.040
What we're going to do is we are
going to run Print Center down here

00:48:05.040 --> 00:48:06.660
and we're going to add a printer.

00:48:06.660 --> 00:48:10.880
And I just happen to have
down here a USB printer.

00:48:10.880 --> 00:48:14.770
It's on and hey presto, I can see it.

00:48:14.770 --> 00:48:17.990
I can create a queue for it.

00:48:19.500 --> 00:48:20.620
you'll see a few things happen.

00:48:21.380 --> 00:48:28.960
And what you'll see in the
CPL util log is you'll see

00:48:28.960 --> 00:48:31.310
that a queue has been created.

00:48:31.310 --> 00:48:33.820
You'll see the name of the queue.

00:48:33.820 --> 00:48:37.430
And you'll see a bunch
of other information.

00:48:37.510 --> 00:48:43.630
This rather un-user-friendly string is
the name of the queue directory that

00:48:43.630 --> 00:48:45.760
we've created in VAS full printing.

00:48:45.760 --> 00:48:49.630
If you had appropriate privileges,
you could navigate down there,

00:48:49.700 --> 00:48:52.690
go into that directory,
and you'd find a bunch of files

00:48:52.690 --> 00:48:56.700
containing information about
the print queue and the printer,

00:48:56.700 --> 00:48:59.210
the directories for the spool files,
et cetera.

00:48:59.280 --> 00:49:00.240
We won't do that now.

00:49:00.240 --> 00:49:03.810
And you don't really need to do it,
because CPL util is a much easier

00:49:03.810 --> 00:49:07.940
way of finding out information about
the printer or the print queue.

00:49:07.940 --> 00:49:18.660
So we'll stop listening for a moment,
and we will... We'll use

00:49:18.660 --> 00:49:22.680
the get queue info command.

00:49:27.090 --> 00:49:30.480
You have to type in everything
exactly as it's supposed to be,

00:49:30.730 --> 00:49:32.720
otherwise it's not
going to be recognized.

00:49:32.760 --> 00:49:37.640
Get Queue Info tells me a little bit
about the queue that I just created.

00:49:39.910 --> 00:49:40.990
Let's see what we've got here.

00:49:41.420 --> 00:49:54.260
Here we've got the URL to the printer
module associated with this queue.

00:49:54.260 --> 00:50:03.240
Down here we've got the URL to the
IO module associated with this queue.

00:50:04.360 --> 00:50:10.410
Further on, if I can find it,
we've got the URL to the print dialog

00:50:10.410 --> 00:50:12.660
extension associated with this queue.

00:50:12.660 --> 00:50:16.010
We've got the name of the queue
and a bunch of other information.

00:50:16.020 --> 00:50:20.500
So you can,
especially if you're a driver developer,

00:50:20.500 --> 00:50:23.180
you can use this sort of tool to make
sure everything got set up correctly.

00:50:24.710 --> 00:50:29.080
So now let's do something a little
bit more adventurous and we'll print

00:50:29.100 --> 00:50:31.420
a job and we'll see what can happen.

00:50:31.460 --> 00:50:32.070
I will

00:50:37.010 --> 00:50:38.260
I'll do listen to server again.

00:50:38.260 --> 00:50:44.520
And okay, so we're now waiting
for something to happen.

00:50:44.520 --> 00:50:47.270
Let's go and find a job to print.

00:50:47.280 --> 00:50:48.300
Oops, I didn't do that.

00:50:48.300 --> 00:50:50.550
Let's do this one.

00:50:52.680 --> 00:50:55.540
I'll print out the other
one later if you like.

00:50:55.670 --> 00:50:58.780
So, this is a much more
politically correct document.

00:50:58.920 --> 00:51:00.720
So let's print it.

00:51:00.960 --> 00:51:03.940
and we're not going to do much which
is going to print it because we're

00:51:03.940 --> 00:51:06.290
actually seeing what CPLUtil does.

00:51:06.340 --> 00:51:11.160
And if we're patient,
first of all if we were

00:51:11.250 --> 00:51:13.310
down in print center,

00:51:14.300 --> 00:51:16.770
We would see that the
document's printing.

00:51:16.850 --> 00:51:20.420
Sitting over here watching the log,
we'll actually wait for the

00:51:20.420 --> 00:51:23.630
print job to go through and
then we'll take a quick look.

00:51:23.760 --> 00:51:27.840
You'll see there's basically a
sequence of messages that come through.

00:51:27.840 --> 00:51:31.740
It's a pretty predictable sequence
and it's one way of finding out did

00:51:31.740 --> 00:51:35.240
your job actually get through to,
was a school file created,

00:51:35.400 --> 00:51:38.340
was a connection to the
printer successfully opened,

00:51:38.400 --> 00:51:42.960
was the job sent to the printer,
was the connection closed, etc.

00:51:43.070 --> 00:51:46.440
So it's one way of monitoring the
entire life cycle of a print job.

00:51:47.770 --> 00:51:50.180
Did I mention that we were going
to work on printing performance?

00:51:50.180 --> 00:51:53.680
Well, maybe we are printing.

00:51:53.680 --> 00:51:54.260
Let's see.

00:51:54.260 --> 00:51:57.820
The thing to look for when
you're looking at this,

00:51:57.820 --> 00:52:03.920
yes, if you look at the event text field,
that's basically the thing to look for.

00:52:03.920 --> 00:52:06.020
That tells you what sort
of event has happened.

00:52:06.020 --> 00:52:08.660
So if you don't mind,
we'll work backwards.

00:52:08.660 --> 00:52:10.710
If you see down here
associated with event text,

00:52:10.710 --> 00:52:12.930
we've got the message that
the job's been deleted.

00:52:12.960 --> 00:52:17.640
If we go back, we've got a message that
the job's been deleted.

00:52:17.720 --> 00:52:20.830
That's on the next line down.

00:52:20.830 --> 00:52:23.260
Print job completed.

00:52:23.260 --> 00:52:25.440
Looks pretty good.

00:52:25.510 --> 00:52:28.700
Closing printer connection.

00:52:28.700 --> 00:52:31.580
A few progress messages.

00:52:34.980 --> 00:52:37.710
So it might sound strange to
go through this backwards,

00:52:37.820 --> 00:52:39.210
but I think you get the gist of it.

00:52:39.350 --> 00:52:40.330
Printing job.

00:52:42.580 --> 00:52:46.720
Opening printer connection, starting job,
job created.

00:52:46.720 --> 00:52:51.680
So that's the reverse healthy life
cycle of a successful print job.

00:52:51.720 --> 00:52:54.700
And I know you won't believe me,
but the page did actually print.

00:52:57.830 --> 00:52:59.440
That's CPL Util.

00:52:59.600 --> 00:53:04.100
There's a lot of stuff in
there that I could show you.

00:53:04.280 --> 00:53:06.180
Some of it's for some
fairly brave people.

00:53:06.180 --> 00:53:11.570
You have to be appropriately privileged
to do some things like delete queues,

00:53:11.730 --> 00:53:12.170
etc.

00:53:12.240 --> 00:53:15.420
But certainly if you're a
printer driver developer,

00:53:15.420 --> 00:53:19.890
maybe if you're an application developer,
certainly if you're a tester,

00:53:19.890 --> 00:53:24.040
CPL Util is a tool that's available
and comes in handy sometimes.

00:53:25.630 --> 00:53:30.080
So that's all we've got for the demo.

00:53:30.180 --> 00:53:32.790
So if we could switch over to the slides.

00:53:35.700 --> 00:55:49.000
[Transcript missing]

00:55:50.520 --> 00:55:53.250
The last topic is probably
the most controversial one.

00:55:53.300 --> 00:55:58.440
I'm talking about it this year because
it's important that we emphasize

00:55:58.540 --> 00:56:01.330
the fact that the printing system,
the graphics system,

00:56:01.330 --> 00:56:04.640
the color sync system,
are far more tightly integrated on

00:56:04.660 --> 00:56:08.320
X than they ever were on MacÂ OS 8,
9 or its predecessors.

00:56:11.820 --> 00:56:12.660
This is all good stuff.

00:56:12.660 --> 00:56:14.910
I mean, it's much better to have a
tightly integrated system,

00:56:14.950 --> 00:56:16.300
but it does have implications.

00:56:16.300 --> 00:56:19.640
It has implications for application
developers and it has implications

00:56:19.640 --> 00:56:21.300
for printer driver developers.

00:56:21.950 --> 00:56:23.140
So I'll mention some of those.

00:56:24.020 --> 00:56:29.380
First thing to talk about are the main
differences between printing on X versus

00:56:29.380 --> 00:56:32.260
printing on earlier versions of the OS.

00:56:36.360 --> 00:56:39.080
First bullet item,
applications can print in

00:56:39.080 --> 00:56:40.110
or can draw their pages.

00:56:40.940 --> 00:56:44.720
Obviously a lot of Carbon applications
are going to be drawing

00:56:44.720 --> 00:56:49.050
with QuickDraw and RGB,
but Cocoa apps can use any

00:56:49.150 --> 00:56:51.380
of the PDF color spaces.

00:56:52.400 --> 00:56:56.540
Things can be drawn in device colors,
device gray, RGB,

00:56:56.540 --> 00:57:01.020
etc., and in device independent, CIE,
color spaces.

00:57:01.680 --> 00:57:04.740
So it's no longer a safe assumption
if you're a printer driver

00:57:04.740 --> 00:57:08.000
developer that the source material
is going to be drawn in RGB.

00:57:10.820 --> 00:57:14.330
Another thing that's different is
that everything that goes into the

00:57:14.440 --> 00:57:16.260
PDF spool file is automatically tagged.

00:57:16.880 --> 00:57:19.290
Obviously it's nicer if
the application does this,

00:57:19.290 --> 00:57:23.160
but if the application doesn't do it,
we'll make sure that every shape

00:57:23.160 --> 00:57:27.270
in the spool file gets a profile
and gets a rendering intent.

00:57:28.090 --> 00:57:32.890
If the application hasn't done it for us,
everything gets a system profile,

00:57:32.910 --> 00:57:37.780
images automatically get perceptual,
everything else, line art and text,

00:57:37.890 --> 00:57:39.960
gets relative colorimetric.

00:57:41.360 --> 00:57:46.890
So the PDF spool file,
everything has a source profile.

00:57:47.630 --> 00:57:50.720
That is definitely different
from the way things typically

00:57:50.740 --> 00:57:52.380
worked on MacÂ OS 8 and 9.

00:57:53.040 --> 00:57:55.270
I should emphasize the
fact that this is all,

00:57:55.340 --> 00:57:57.630
we're talking about source profiles here.

00:57:58.410 --> 00:58:01.490
We've got quite a nice,
clean dividing line between

00:58:01.490 --> 00:58:05.130
what happens in spooling,
which is the domain of the graphics

00:58:05.130 --> 00:58:07.600
system and the application,
Paul Danbold and what

00:58:07.600 --> 00:58:09.150
happens at rendering time,
which is obviously the

00:58:09.150 --> 00:58:10.120
domain of the application.

00:58:10.580 --> 00:58:13.440
So we're talking about the domain of
the graphics system and printer drivers.

00:58:14.470 --> 00:58:20.650
Printer drivers don't get to control the
tagging of anything with source profiles,

00:58:20.650 --> 00:58:25.100
and they certainly don't get
to control rendering intents.

00:58:25.770 --> 00:58:28.810
So in print drivers on 10,
you won't see color panels

00:58:28.810 --> 00:58:31.010
offering rendering intent options.

00:58:31.900 --> 00:58:35.510
That's all handled upstream
when the spool file is created.

00:58:35.790 --> 00:58:42.630
It also falls out from this that
obviously we want good color

00:58:42.770 --> 00:58:46.340
sync profiles in the system,
not just for printers, for displays,

00:58:46.340 --> 00:58:48.540
scanners, any sort of input device.

00:58:48.620 --> 00:58:54.390
So obviously everything's going to
work just fine if there's accurate and

00:58:54.980 --> 00:58:59.370
versatile profiles for all the devices
involved in the printing pipeline.

00:59:01.760 --> 00:59:08.980
And obviously printers need to have
profiles and we obviously work with

00:59:08.980 --> 00:59:13.890
the printer vendors to encourage them
to develop good quality profiles.

00:59:13.900 --> 00:59:17.880
The printer modules down at the back
end actually provide their profiles.

00:59:17.880 --> 00:59:20.670
When the queue is created we ask
the printer module to tell us

00:59:20.800 --> 00:59:22.400
about the destination profile.

00:59:25.650 --> 00:59:28.310
I'll talk a little bit more
about that on the next slide.

00:59:28.610 --> 00:59:32.920
The final bullet item sounds a
little controversial to some folks.

00:59:33.040 --> 00:59:35.280
Basically,
no way to turn off color matching.

00:59:35.280 --> 00:59:36.710
It's a simplification.

00:59:36.800 --> 00:59:40.670
Basically,
there's only one scenario in which

00:59:40.670 --> 00:59:44.170
color values are not changed,
and that's when the source and the

00:59:44.170 --> 00:59:45.730
destination profiles are identical.

00:59:45.780 --> 00:59:48.480
In all other cases,
if the application is drawing in a

00:59:48.480 --> 00:59:52.200
different color space from the one
specified by the printer module,

00:59:52.200 --> 00:59:54.450
we have to match.

00:59:54.580 --> 00:59:57.250
The color sync CMM gets in
there and does its thing.

00:59:57.920 --> 01:00:00.000
Typically,

01:00:02.970 --> 01:00:06.770
If everybody's doing the right thing,
if everything's being tagged,

01:00:06.800 --> 01:00:09.800
there's a good chance that color
data will be managed through the

01:00:09.800 --> 01:00:13.390
printing system and printer modules
will get data that's been matched.

01:00:13.400 --> 01:00:21.250
Once it's matched, once PDF is rendered,
shape-specific information is lost.

01:00:21.300 --> 01:00:25.030
So there are implications for printer
drivers in connection with that.

01:00:25.040 --> 01:00:29.490
So let's talk about raster
printing for a moment.

01:00:32.180 --> 01:00:34.590
So although everything
gets color matched,

01:00:34.610 --> 01:00:39.110
it's not to say the printer
drivers don't have a lot to do

01:00:39.110 --> 01:00:41.980
with final print quality output,
color fidelity.

01:00:42.060 --> 01:00:44.160
There's a couple of
things they can do here.

01:00:44.380 --> 01:00:47.510
First one,
there's an image access callback.

01:00:47.600 --> 01:00:50.620
It's probably not as
powerful as it needs to be,

01:00:50.800 --> 01:00:52.530
and we'll be working on it.

01:00:52.640 --> 01:00:54.760
But basically,
this is a callback that enables

01:00:54.760 --> 01:00:58.660
printer modules to get at image data,
sampled image data, before it's rendered.

01:00:59.320 --> 01:01:01.990
So they get an opportunity
to do edge enhancement,

01:01:01.990 --> 01:01:05.300
resample images,
color balance adjustment, whatever,

01:01:05.300 --> 01:01:07.400
if they need to do that
and want to do that,

01:01:07.840 --> 01:01:10.410
before the PDF page is rendered.

01:01:13.850 --> 01:01:18.170
To make this system shine and to
make it just a great color platform,

01:01:18.260 --> 01:01:23.040
we want every printer driver
developer to provide accurate,

01:01:23.040 --> 01:01:24.850
versatile profiles.

01:01:24.860 --> 01:01:27.460
And it's most important, of course,
that they cover all the permutations

01:01:27.490 --> 01:01:29.640
of all the media types that
are supported by the printer,

01:01:29.640 --> 01:01:31.160
all the print quality modes.

01:01:31.240 --> 01:01:35.960
It's recommended that those profiles
include profile connection space tags so

01:01:35.990 --> 01:01:40.630
we can optimize the number of transitions
or transformations that happen when

01:01:40.630 --> 01:01:41.960
we're doing our color matching.

01:01:42.580 --> 01:01:44.970
So it's very important that
we get good quality profiles

01:01:44.970 --> 01:01:46.720
for all the printers on 10.

01:01:46.720 --> 01:01:50.540
Now remember I said that
there is a scenario where

01:01:50.540 --> 01:01:53.170
data can go through unmatched.

01:01:56.300 --> 01:01:59.120
In that case, a printer module could
apply its own color science.

01:01:59.120 --> 01:02:03.060
There's really two options
for printer modules.

01:02:03.060 --> 01:02:06.060
When they tell the converter
what sort of data they want,

01:02:06.060 --> 01:02:08.990
they can omit a profile reference,
in which case we have

01:02:09.090 --> 01:02:10.500
to make an assumption.

01:02:10.500 --> 01:02:15.030
That assumption is that the destination
profile is a system profile,

01:02:15.030 --> 01:02:18.700
and if it matches the source profile,
we'll do nothing,

01:02:18.700 --> 01:02:23.130
but otherwise we'll render to
the system profile's color space.

01:02:23.540 --> 01:02:27.140
That's not great because system
profile generally doesn't have

01:02:27.140 --> 01:02:30.540
different conversion mechanisms,
or generally has the same

01:02:30.610 --> 01:02:33.870
conversion mechanism for
different rendering intents,

01:02:33.870 --> 01:02:34.540
but that...

01:02:36.430 --> 01:02:39.730
The printer module could get data
rendered to the system profile and

01:02:39.900 --> 01:02:41.820
then apply its own color science.

01:02:41.890 --> 01:02:47.600
Better than that, actually,
is for the printer module to

01:02:47.940 --> 01:02:53.700
give us a profile that represents
a wide gamut color space.

01:02:54.770 --> 01:02:58.980
We will render to that space and
from that point on the printer module

01:02:58.980 --> 01:03:04.490
could provide or could execute its
own proprietary table-based color

01:03:04.500 --> 01:03:06.700
matching to the printer device.

01:03:08.100 --> 01:03:11.840
Generally speaking,
to enable vendor-specific color matching,

01:03:11.840 --> 01:03:14.820
we'd recommend that the printer
module provides this wide gamut

01:03:15.120 --> 01:03:16.940
profile as a destination space.

01:03:18.380 --> 01:03:22.500
This is a fairly complicated topic.

01:03:22.500 --> 01:03:22.500
I'm certainly only sort of...

01:03:23.650 --> 01:03:25.480
touching the surface of it.

01:03:25.480 --> 01:03:29.550
We are working on a tech
note and hopefully in

01:03:29.840 --> 01:03:37.090
will have an eTech note out
that explains color matching

01:03:37.090 --> 01:03:37.090
on X with respect to printing.

01:03:38.930 --> 01:03:43.660
I need to mention PostScript quickly.

01:03:43.670 --> 01:03:46.700
The simple way of saying this is that

01:03:46.980 --> 01:03:50.800
Color PostScript printing is
handled on 10 exactly the way it

01:03:50.800 --> 01:03:54.890
was with LaserWriter 8 on 8 and
9 if you pick PostScript matching

01:03:54.890 --> 01:03:56.500
and the printer's default.

01:03:56.500 --> 01:04:02.740
Because what we do is we turn all
the source profiles in the PDF spool

01:04:02.740 --> 01:04:06.160
file into color space invocations,
send them down in the

01:04:06.400 --> 01:04:10.440
print job to the printer,
use the printer's own embedded

01:04:10.730 --> 01:04:15.090
color rendering dictionary
as a destination color space,

01:04:15.110 --> 01:04:17.620
and let the PostScript machinery
do the color matching.

01:04:17.620 --> 01:04:27.370
We will probably, in a future release,
allow host-based printer profiles to

01:04:27.370 --> 01:04:35.020
be converted to color spaces and sent
down to the printer so we don't have

01:04:35.130 --> 01:04:38.140
to use the printer's own CRD in the
case where you've got a calibrated.

01:04:38.270 --> 01:04:39.650
profile.

01:04:39.730 --> 01:04:40.540
That's for the future.

01:04:40.540 --> 01:04:45.120
And that is all I have to
say about printing in color.

01:04:45.120 --> 01:04:49.100
Just quickly,
the three follow-on sessions

01:04:49.100 --> 01:04:51.540
that we'd like you to go to.

01:04:51.780 --> 01:04:56.680
After this, if you're a Cocoa person,
go to the Advanced Cocoa Topics session.

01:04:56.680 --> 01:05:02.270
Tomorrow morning,
David is wandering around there.

01:05:02.320 --> 01:05:05.460
He's going to tell you all
about how QuickDraw and Quartz

01:05:05.460 --> 01:05:07.540
2D is going to come together.

01:05:07.540 --> 01:05:08.140
That's that.

01:05:08.160 --> 01:05:12.040
If you've recovered from the
beer bash tonight in time,

01:05:12.040 --> 01:05:13.560
get up and go to the 9 a.m.

01:05:13.560 --> 01:05:13.920
session.

01:05:13.920 --> 01:05:17.080
And last but not least,
there's a feedback forum

01:05:17.130 --> 01:05:19.740
tomorrow afternoon for,
I guess,

01:05:19.830 --> 01:05:24.090
all your questions about graphics, color,
printing, and related technologies.

01:05:24.100 --> 01:05:28.630
And with that,
I'm going to hand you back to Travis.

01:05:34.300 --> 01:05:35.560
Thank you, Paul.

01:05:35.560 --> 01:05:38.900
Okay, what I want to do is give
you my contact information.

01:05:38.900 --> 01:05:41.480
We obviously hit you with a lot
of information in today's session.

01:05:41.480 --> 01:05:43.950
If you have any further questions,
feel free to email me

01:05:43.950 --> 01:05:45.440
at travisb at apple.com.

01:05:45.570 --> 01:05:48.160
This extends for both printing
and any of the 2D graphic

01:05:48.570 --> 01:05:50.400
technologies that are in MacÂ OSÂ X.