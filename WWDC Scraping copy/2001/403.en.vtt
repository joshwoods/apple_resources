WEBVTT

00:00:04.160 --> 00:00:07.170
So welcome to session 403,
Broadcasting Live with

00:00:07.280 --> 00:00:13.690
QuickTime Streaming with the
extra added bonus of MPEG-4.

00:00:15.590 --> 00:00:17.490
My name is Ann Jones.

00:00:17.590 --> 00:00:21.700
I'm a member of the network
media group in QuickTime.

00:00:27.210 --> 00:00:30.180
Today we'll talk a little
bit about streaming,

00:00:30.180 --> 00:00:32.600
and then we'll go more deeply
into the broadcast APIs that

00:00:32.710 --> 00:00:34.440
are new in QuickTime 5.

00:00:34.440 --> 00:00:38.560
And then we'll have a
discussion about MPEG.

00:00:38.560 --> 00:00:40.720
And I know it's been a long day
and this is the last session,

00:00:40.750 --> 00:00:44.500
but be sure to stay for the MPEG talk
because it's really interesting and

00:00:44.500 --> 00:00:46.870
you'll see some cool MPEG-4 demos.

00:00:49.960 --> 00:00:53.240
Today, you'll learn a little bit about
QuickTime Streaming and some

00:00:53.240 --> 00:00:57.140
basic network concepts that are
interesting in the streaming realm.

00:00:57.140 --> 00:01:00.980
You'll learn how to write
a broadcast application,

00:01:00.980 --> 00:01:05.510
and you'll learn some stuff about
MPEG-4 and how it relates to QuickTime.

00:01:08.110 --> 00:01:13.030
Okay,
so how has QuickTime and QuickTime Movies

00:01:13.370 --> 00:01:15.090
been able to be played on the internet?

00:01:15.100 --> 00:01:18.220
Well, in QuickTime 3,
we introduced Fast Start,

00:01:18.220 --> 00:01:20.700
and that was good for some things,
but not for everything.

00:01:20.730 --> 00:01:25.110
In QuickTime 4, we introduced streaming,
and that was good,

00:01:25.110 --> 00:01:29.360
but mostly you could receive,
and only very limited applications

00:01:29.360 --> 00:01:31.220
could actually broadcast.

00:01:31.310 --> 00:01:33.990
In QuickTime 5,
we added broadcast APIs so

00:01:33.990 --> 00:01:37.150
that third parties could write
broadcasting applications.

00:01:40.960 --> 00:01:43.200
So first, what is Fast Start?

00:01:43.210 --> 00:01:46.520
Fast Start is basically an
HTTP download of a movie.

00:01:46.520 --> 00:01:49.450
And there are some smarts inside
QuickTime that allow you to start to

00:01:49.460 --> 00:01:52.820
begin playing the movie before the
entire movie has been downloaded.

00:01:52.820 --> 00:01:55.180
Now there's lots of good things
you can do with Fast Start,

00:01:55.180 --> 00:01:57.220
even today.

00:01:57.230 --> 00:02:00.820
One good thing is you could host
it on any standard HTTP server.

00:02:00.820 --> 00:02:04.900
Another thing is that even if
your connection speed is low,

00:02:04.930 --> 00:02:07.320
you can watch high quality,
high data rate movies.

00:02:07.350 --> 00:02:10.450
So if you have a slow 56K
modem using Fast Start,

00:02:10.460 --> 00:02:14.960
you can still watch really
high quality movie trailers.

00:02:14.960 --> 00:02:17.350
But Fast Start isn't good for everything.

00:02:17.610 --> 00:02:21.120
For instance,
since it's basically HTTP download,

00:02:21.120 --> 00:02:23.140
you can only use it for stored movies.

00:02:23.140 --> 00:02:25.770
This means that the movie had
to live on your hard drive,

00:02:25.770 --> 00:02:27.680
and if you didn't have enough
hard drive space for it,

00:02:27.680 --> 00:02:29.810
you couldn't really view the movie.

00:02:29.820 --> 00:02:34.340
And this is a problem with really
long movies and really big movies.

00:02:34.350 --> 00:02:36.960
Also, you could only watch
stored content with it.

00:02:36.960 --> 00:02:39.880
You couldn't watch any
live content with it.

00:02:39.960 --> 00:02:44.410
So to solve some of those problems,
we introduced QuickTime streaming.

00:02:48.560 --> 00:02:51.400
QuickTime Streaming uses different
protocols than FastStart.

00:02:51.430 --> 00:02:52.710
FastStart uses HTTP.

00:02:52.810 --> 00:02:55.430
QuickTime Streaming uses RTSP and RTP.

00:02:55.760 --> 00:03:02.000
These protocols assume that the data
arrives in real time or near real time.

00:03:02.490 --> 00:03:07.140
In trade-off for that,
in these protocols you can lose packets,

00:03:07.140 --> 00:03:10.650
and that results in lesser quality.

00:03:10.770 --> 00:03:14.360
But some of the advantages
of QuickTime Streaming is not

00:03:14.360 --> 00:03:17.770
only can you view stored data,
you can view live events,

00:03:17.800 --> 00:03:23.110
such as concerts and keynotes
and presentations like this.

00:03:23.420 --> 00:03:30.150
Also, you can't save the movie,
so that means you can watch broadcasts

00:03:30.360 --> 00:03:33.320
for days at a time without having to
worry about your hard drive filling up.

00:03:33.400 --> 00:03:36.590
Also,
a lot of content providers prefer this

00:03:36.700 --> 00:03:41.790
method over FastStart because that
means people can't take their movies and

00:03:41.790 --> 00:03:44.800
redistribute it without the permission.

00:03:48.220 --> 00:03:52.760
So in QuickTime 5.0,
we introduced broadcast APIs.

00:03:52.770 --> 00:03:56.660
These APIs allow you developers,
third parties,

00:03:56.700 --> 00:04:01.220
to write authoring-- to write
broadcasting applications.

00:04:01.220 --> 00:04:04.680
They're meant to give you
very basic functionality.

00:04:04.680 --> 00:04:07.020
If you just want to add
basic functionality,

00:04:07.080 --> 00:04:11.960
send from the audio and video-- basic
audio/video capture to your app,

00:04:11.960 --> 00:04:15.220
then you just have to use very few calls.

00:04:15.220 --> 00:04:17.950
But if you want a more
complicated app or do more things,

00:04:18.040 --> 00:04:20.980
then that functionality is available,
but you have to do a

00:04:20.980 --> 00:04:22.330
little bit more work.

00:04:26.260 --> 00:04:28.760
So streaming is all about getting,
you know,

00:04:28.810 --> 00:04:31.720
sending packets over the network,
sending media packets over the network.

00:04:31.890 --> 00:04:34.940
So before we delve more deeply
into the broadcast APIs,

00:04:34.940 --> 00:04:38.040
let's talk about a few really
basic networking concepts that

00:04:38.040 --> 00:04:40.270
are interesting in streaming.

00:04:40.840 --> 00:04:45.600
So, you might have wondered, you know,
I've heard the words multicast, unicast.

00:04:45.730 --> 00:04:46.700
What's the difference between them?

00:04:46.700 --> 00:04:48.340
Why is that interesting to me?

00:04:49.150 --> 00:04:52.490
Well, unicast is basically a
one-to-one relationship.

00:04:52.530 --> 00:04:55.560
So, whenever a server is sending
a stream to a client,

00:04:55.560 --> 00:04:58.810
it's sending that stream
directly to that one client.

00:04:58.820 --> 00:05:01.570
So, if three clients are
connected to the server,

00:05:01.860 --> 00:05:04.090
the server is sending out three streams.

00:05:04.090 --> 00:05:06.200
If a thousand clients are
connected to the server,

00:05:06.270 --> 00:05:08.380
the server is sending
out a thousand streams.

00:05:09.100 --> 00:05:12.750
So, this isn't very efficient
bandwidth-wise because you quickly

00:05:12.990 --> 00:05:16.490
fill up your bandwidth and you
can't service very many clients.

00:05:17.920 --> 00:05:21.580
Multicast, on the other hand,
is a one-to-many relationship.

00:05:21.710 --> 00:05:25.180
So no matter how many clients
are connected to the server,

00:05:25.180 --> 00:05:26.910
the server is only
sending out one stream.

00:05:26.920 --> 00:05:28.630
If three clients are
connected to that server,

00:05:28.670 --> 00:05:30.320
the server is sending out one stream.

00:05:30.320 --> 00:05:32.250
If 1,000 clients are
connected to the server,

00:05:32.320 --> 00:05:34.560
the server is still sending
out only one stream.

00:05:34.570 --> 00:05:38.080
This is very efficient bandwidth-wise.

00:05:38.090 --> 00:05:40.720
And you want to use
Multicast whenever possible,

00:05:40.780 --> 00:05:43.520
but in a lot of situations, you can't.

00:05:43.530 --> 00:05:46.630
The hardware between the client and
the server needs to support Multicast,

00:05:46.740 --> 00:05:47.900
and that isn't usually the case.

00:05:47.900 --> 00:05:50.090
on the public internet.

00:05:56.700 --> 00:06:01.730
So another basic networking concept
that's interesting in streaming is

00:06:01.810 --> 00:06:05.690
the difference between TCP and UDP.

00:06:05.770 --> 00:06:09.290
Well, there's lots of differences,
but the differences that we

00:06:09.380 --> 00:06:13.630
care about for streaming is that
TCP is a protocol that guarantees

00:06:13.730 --> 00:06:16.110
the packets arrive on time.

00:06:16.250 --> 00:06:18.990
I mean, sorry, that's wrong.

00:06:19.270 --> 00:06:22.200
TCP is a protocol that guarantees
that the packets arrive.

00:06:22.260 --> 00:06:26.830
But when there's congestion,
the packets can take a

00:06:26.830 --> 00:06:28.760
really long time to arrive.

00:06:28.860 --> 00:06:32.720
So when you're using protocols
that assume that the packets arrive

00:06:32.720 --> 00:06:35.530
in real time or near real time,
this can be a problem,

00:06:35.560 --> 00:06:38.590
and sometimes the packets
then arrive too late.

00:06:39.010 --> 00:06:43.080
So a lot of the streaming
protocols prefer to use UDP.

00:06:43.530 --> 00:06:47.400
In UDP, the packets will arrive,
but when congestion occurs,

00:06:47.400 --> 00:06:50.180
instead of delaying the packet,
the packet just gets dropped,

00:06:50.180 --> 00:06:52.180
and the client never receives the packet.

00:06:52.320 --> 00:06:56.810
So then you get data loss,
and you get lesser quality.

00:06:59.680 --> 00:07:01.190
So what are the different
ways that clients,

00:07:01.340 --> 00:07:04.840
servers, and broadcasters can connect?

00:07:04.840 --> 00:07:09.460
In the typical video on demand case,
a client connects via unicast to a

00:07:09.510 --> 00:07:12.200
server and receives the data that way.

00:07:12.200 --> 00:07:14.940
Since this session is mostly
focused on broadcasting,

00:07:14.940 --> 00:07:19.290
we'll go into more detail about the
four different ways that broadcasters

00:07:19.480 --> 00:07:22.190
can connect to servers and clients.

00:07:27.660 --> 00:07:31.200
In a unicast broadcast,
the broadcaster sends out a

00:07:31.200 --> 00:07:32.980
set of streams to one client.

00:07:33.160 --> 00:07:36.240
Now, the broadcaster is not a server,
so it can only send

00:07:36.240 --> 00:07:37.740
out one set of streams.

00:07:37.740 --> 00:07:42.310
So when you're doing a unicast broadcast,
it can only service one client.

00:07:46.420 --> 00:07:49.380
In a multicast broadcast,
the broadcaster still

00:07:49.600 --> 00:07:51.830
sends out just one stream,
but it sends it out to

00:07:51.830 --> 00:07:53.300
a multicast address.

00:07:53.520 --> 00:07:58.210
This situation is similar to a
TV station where the TV station is

00:07:58.210 --> 00:08:00.160
sending out its signal on channel 10.

00:08:00.300 --> 00:08:03.820
Clients who wish to connect
to this broadcast then connect

00:08:03.960 --> 00:08:06.300
to that multicast address,
get the packets,

00:08:06.300 --> 00:08:07.300
and start viewing the broadcast.

00:08:07.300 --> 00:08:10.840
And this is similar to you
turning on your TV to channel

00:08:10.930 --> 00:08:13.110
10 to watch that station.

00:08:13.720 --> 00:08:17.100
Now, as I said before,
in order to get multicasts,

00:08:17.150 --> 00:08:19.830
the hardware between the
server and the client,

00:08:19.830 --> 00:08:21.840
or in this case,
the broadcaster and the client,

00:08:21.850 --> 00:08:24.190
has to support multicasts.

00:08:24.200 --> 00:08:28.350
So, on the public internet, you know,
even if the ISPs have the

00:08:28.350 --> 00:08:32.130
hardware that support multicasts,
most ISPs don't turn on that

00:08:32.220 --> 00:08:34.050
functionality and allow you to get it.

00:08:34.120 --> 00:08:38.850
So, you know, on the public internet,
most people can't get multicasts.

00:08:40.860 --> 00:08:43.250
So,
multicasts is mostly used in corporate,

00:08:43.250 --> 00:08:46.350
private intranets and also
universities and colleges.

00:08:51.800 --> 00:08:55.980
Okay, so on the public internet,
you'll mostly see broadcasts

00:08:56.000 --> 00:08:57.860
in this configuration.

00:08:58.190 --> 00:09:03.310
Here the broadcaster sends a unicast
stream to a streaming server.

00:09:03.940 --> 00:09:07.230
Then clients who wish to connect
to that broadcast connect to that

00:09:07.280 --> 00:09:09.680
streaming server via Unicast.

00:09:09.680 --> 00:09:11.620
And the server does the
job of replicating all the

00:09:11.620 --> 00:09:13.840
packets for the clients.

00:09:14.450 --> 00:09:16.900
If you notice here,
the link between the broadcaster

00:09:16.900 --> 00:09:19.450
and the server is a UDP link.

00:09:19.950 --> 00:09:24.160
So since UDP is a lossy protocol,
packets between the broadcaster

00:09:24.160 --> 00:09:25.250
and the server can be lost.

00:09:25.660 --> 00:09:30.030
Any packet that's lost between
the broadcaster and the server is,

00:09:30.140 --> 00:09:35.510
of course, in addition,
lost between all the connections

00:09:35.510 --> 00:09:35.510
between the server and the
client viewing that broadcast.

00:09:35.510 --> 00:09:35.510
So this is pretty bad.

00:09:36.220 --> 00:09:41.600
So new in QuickTime 5,
we introduced a new mode of connecting.

00:09:41.840 --> 00:09:43.880
which is called reliable broadcast.

00:09:43.880 --> 00:09:46.400
Here,
the configuration is the same as before,

00:09:46.620 --> 00:09:51.010
except the link between the broadcaster
and the server is a TCP connection.

00:09:51.550 --> 00:09:56.360
So this solves the problem
of losing packets between the

00:09:56.420 --> 00:09:58.590
broadcaster and the server,
but this does require

00:09:58.590 --> 00:10:01.990
additional bandwidth between
the broadcaster and the server.

00:10:05.130 --> 00:10:10.310
Okay, when you want to connect to a
stream or a broadcast as a client,

00:10:10.310 --> 00:10:14.660
usually all you need to know is the
URL that you want to connect to.

00:10:14.660 --> 00:10:18.730
When you're producing the broadcast,
however, not only do you need to know the

00:10:18.730 --> 00:10:21.920
connection information such as
the URL or the server that you're

00:10:21.920 --> 00:10:25.300
going to send your broadcast to,
you need to know things like how

00:10:25.520 --> 00:10:28.180
many streams you're going to send,
what types of streams

00:10:28.220 --> 00:10:31.300
you'll send such as audio,
video, or text streams.

00:10:31.300 --> 00:10:33.820
You'll also need to know where the
data for that stream comes from.

00:10:33.820 --> 00:10:38.370
For instance, your video camera,
your microphone, or a stored movie.

00:10:39.000 --> 00:10:44.910
This information is provided to
QuickTime Streaming through SDP or XML.

00:10:45.170 --> 00:10:48.560
SDP is an IETF standard that's
often used in streaming.

00:10:48.620 --> 00:10:52.280
However, it's confusing for users
to look at and understand,

00:10:52.340 --> 00:10:55.940
and it's a little bit kludgy to extend.

00:10:56.100 --> 00:10:58.400
So, in QuickTime, we prefer to use XML.

00:10:58.400 --> 00:11:03.110
The XML import for broadcasting
uses the W3C syntax with

00:11:03.110 --> 00:11:05.790
tags added for broadcasting.

00:11:05.790 --> 00:11:11.520
And that's the format when we add new
functionality to QuickTime broadcasting,

00:11:11.640 --> 00:11:14.770
that's the format that will
allow you to access that.

00:11:18.630 --> 00:11:24.680
So let's go over to demo four,
where Kevin Marks will show

00:11:24.680 --> 00:11:27.600
you a broadcasting demo.

00:11:27.720 --> 00:11:32.390
So here's an XML file used
to specify a broadcast.

00:11:32.590 --> 00:11:37.690
You can see here that the outer
structure is a presentation,

00:11:37.690 --> 00:11:41.340
and if you're familiar with XML,
there are tags nested within

00:11:41.340 --> 00:11:43.600
tags that define sub-pieces.

00:11:43.600 --> 00:11:45.520
So this is defining a presentation.

00:11:45.520 --> 00:11:47.520
Within that, it's defining a stream.

00:11:47.600 --> 00:11:48.510
It's a video stream.

00:11:48.610 --> 00:11:51.600
Then it's defining some
network information here.

00:11:51.600 --> 00:11:56.620
There's RTP information here,
and there's the multicast

00:11:56.620 --> 00:12:01.600
address defined here at the top,
and the port it's going to go out on.

00:12:01.600 --> 00:12:04.210
And then there's some additional
information down here to define

00:12:04.210 --> 00:12:05.600
the dimensions of the stream.

00:12:05.600 --> 00:12:08.220
Information that's not
defined in this file,

00:12:08.220 --> 00:12:10.580
QuickTime will pick defaults for you.

00:12:10.630 --> 00:12:12.600
So for example, we'll pick the C-Series.

00:12:12.600 --> 00:12:15.600
We'll pick the sequence grabber
as the default capture device,

00:12:15.600 --> 00:12:20.110
as the default source for the broadcast,
and we'll pick a default

00:12:20.110 --> 00:12:21.600
compressor for you.

00:12:21.640 --> 00:12:24.550
So what we have here is an
application called Usher,

00:12:24.550 --> 00:12:27.600
which is our example
broadcasting application.

00:12:27.600 --> 00:12:30.310
And I'm going to open
the XML file with that,

00:12:30.310 --> 00:12:33.600
and this will start a
broadcast straight away.

00:12:33.600 --> 00:12:37.600
And you can see it's broadcasting
the furry animals over here.

00:12:37.600 --> 00:12:41.600
And this is in fact Usher,
which the program is named for.

00:12:41.600 --> 00:12:47.200
And it's picked some default values
for the sequence grabber and for the

00:12:47.200 --> 00:12:49.600
codecs to start a broadcast for you.

00:12:49.600 --> 00:12:53.580
So, and it's now going to explain
what you have to do to,

00:12:53.840 --> 00:12:56.600
what you have to call to
broadcast such a file.

00:12:56.600 --> 00:13:00.670
Okay, can we go back to slides?

00:13:09.210 --> 00:13:14.940
Okay, so the program that Kevin Marks
showed you is a sample code

00:13:14.940 --> 00:13:17.640
program that we developed,
and it will be,

00:13:17.720 --> 00:13:21.740
it and its sample code will be available
for download off of our website.

00:13:21.740 --> 00:13:27.040
So, what can you do with the
broadcast APIs that we publish?

00:13:27.040 --> 00:13:30.060
You can send audio, video,
and text streams.

00:13:30.060 --> 00:13:33.340
You're not limited to the number
of streams except you're limited

00:13:33.340 --> 00:13:35.720
by the bandwidth that you have and,
you know, common sense.

00:13:35.740 --> 00:13:40.200
So, you can send, you know,
two video streams and an audio stream or,

00:13:40.200 --> 00:13:44.760
you know, two audio streams and a text
stream or something like that.

00:13:44.780 --> 00:13:50.950
You can, the media that you send can
come from various places.

00:13:50.950 --> 00:13:55.180
Capture devices such as your
video camera and your microphone.

00:13:55.180 --> 00:13:59.400
It can come from a stored movie that
you have on your local hard drive,

00:13:59.400 --> 00:14:02.170
and it can come from
someplace that your app,

00:14:02.170 --> 00:14:05.090
you know, that you implement in your app.

00:14:05.250 --> 00:14:09.260
These streams are sent via the
standard RTSP/RTP protocols,

00:14:09.260 --> 00:14:13.900
and these streams can be viewed by
QuickTime 4.0 clients and above.

00:14:18.060 --> 00:14:21.760
Okay,
so if you want to write a broadcaster,

00:14:21.810 --> 00:14:23.780
you know,
what does QuickTime provide for you,

00:14:23.830 --> 00:14:26.950
and what does QuickTime do for you,
and what do you need to do?

00:14:27.320 --> 00:14:31.580
Well, QuickTime will handle most,
pretty much all of the

00:14:31.580 --> 00:14:33.960
networking aspects for you.

00:14:33.960 --> 00:14:36.150
It handles making
connections to the server,

00:14:36.190 --> 00:14:40.200
making any negotiations
necessary on the server.

00:14:40.200 --> 00:14:43.270
It'll handle taking the media
samples and converting them into

00:14:43.270 --> 00:14:44.980
packets in the correct format.

00:14:45.180 --> 00:14:49.400
It'll handle if you want to use your
video camera or your microphone,

00:14:49.400 --> 00:14:54.030
it'll handle taking the video and
audio from there and sending that out.

00:14:56.210 --> 00:15:01.280
Your application, in turn,
is responsible for providing all the

00:15:01.280 --> 00:15:04.580
UI to the user to get the information
that we talked about before,

00:15:04.580 --> 00:15:07.840
such as the number of streams
that you want to send,

00:15:07.840 --> 00:15:10.320
the type of streams,
where this data comes from,

00:15:10.320 --> 00:15:12.200
such as your video camera.

00:15:12.200 --> 00:15:17.950
It's also responsible for sending that
information to QuickTime Streaming.

00:15:22.100 --> 00:15:24.960
So how does it send this
information to QuickTime Streaming?

00:15:25.010 --> 00:15:29.370
The main thing that your application will
interface with is a QTS presentation.

00:15:29.450 --> 00:15:35.220
A presentation manages and contains
all the streams of your broadcast,

00:15:35.220 --> 00:15:37.400
such as your audio and video stream.

00:15:37.400 --> 00:15:39.560
This is very similar on the
receive side to a movie,

00:15:39.600 --> 00:15:41.580
where the movie will
contain all the track,

00:15:41.670 --> 00:15:45.180
you know, will contain and manage the
tracks inside the movie,

00:15:45.180 --> 00:15:47.270
such as your audio and video track.

00:15:48.740 --> 00:15:52.140
So how do you make a presentation?

00:15:52.230 --> 00:15:58.440
Call QTS New Presentation from File and
pass in the XML or SDP information.

00:15:58.490 --> 00:16:02.540
Inside the XML or SDP,
you pass in the things we talked about,

00:16:02.620 --> 00:16:06.700
such as connection information,
where that data comes from,

00:16:07.060 --> 00:16:09.840
how you want it compressed, et cetera.

00:16:13.280 --> 00:16:17.250
Once you have a presentation,
call QTS Prez Idle on the presentation.

00:16:17.250 --> 00:16:19.640
And it's then that QuickTime Streaming
does most of the work,

00:16:19.790 --> 00:16:21.110
so you need to call that.

00:16:21.250 --> 00:16:27.080
And on Mac OS X, you should use the
Carbon Event Loop Timer or CF Run Loop.

00:16:27.720 --> 00:16:31.540
You also should install a
notification proc on the presentation.

00:16:31.540 --> 00:16:35.600
The notification proc is the way the
presentation tells your application

00:16:35.600 --> 00:16:38.300
about events that happen asynchronously.

00:16:38.440 --> 00:16:41.190
So, for instance,
when the presentation is making

00:16:41.370 --> 00:16:44.690
a connection to the server,
this might take a long time.

00:16:44.820 --> 00:16:47.240
When the connection
either succeeds or fails,

00:16:47.460 --> 00:16:51.790
your notification proc will get
told of the success or failure.

00:16:56.620 --> 00:17:00.540
So, once you have a presentation
and you've configured it,

00:17:00.580 --> 00:17:03.000
how do you start the broadcast?

00:17:03.000 --> 00:17:06.680
Call QTS Prez Pre-Roll
on the presentation.

00:17:06.820 --> 00:17:10.950
It's at that time that the presentation
will make the connection to the server,

00:17:11.310 --> 00:17:13.330
negotiate whatever is
necessary with the server,

00:17:13.330 --> 00:17:17.080
set up any structures that are necessary,
set up the sequence grabber,

00:17:17.080 --> 00:17:18.790
and get it ready for broadcasting.

00:17:20.500 --> 00:17:22.890
When all that is done,
your notification proc will be

00:17:22.990 --> 00:17:26.540
called with KQTS-Pres Preroll
Act with a success or failure.

00:17:26.650 --> 00:17:30.840
If everything went well,
then you can call QTS-Pres Start,

00:17:30.940 --> 00:17:33.890
and at that time the packets will
start flowing from your machine and

00:17:33.890 --> 00:17:36.650
clients can view your broadcast.

00:17:44.030 --> 00:17:49.080
So now you know basically how to make
a presentation and start the broadcast.

00:17:49.120 --> 00:17:51.700
What are some things you can do
in your application to make your

00:17:51.700 --> 00:17:54.070
application interesting and unique?

00:17:54.580 --> 00:17:57.080
Well, in QuickTime 5,
we introduced a new type of

00:17:57.170 --> 00:17:59.390
component called Sourcer Components.

00:17:59.440 --> 00:18:02.380
Sourcer Components,
the job of the Sourcer Components are

00:18:02.400 --> 00:18:06.140
to get media data from wherever it is
appropriate for that Sourcer Component,

00:18:06.220 --> 00:18:10.100
and also a sample description
describing that media data,

00:18:10.100 --> 00:18:12.670
and send it off for broadcasting.

00:18:12.900 --> 00:18:17.520
So earlier I had talked about
grabbing the audio and video

00:18:17.620 --> 00:18:19.620
from your camera and microphone.

00:18:19.790 --> 00:18:23.780
To do that, you use a standard
sequence grabber sourcer.

00:18:23.820 --> 00:18:27.960
If you want to send data from
a movie that you have stored

00:18:27.960 --> 00:18:30.500
on your local hard drive,
you can use the track

00:18:30.500 --> 00:18:31.850
sourcer that we provide.

00:18:32.020 --> 00:18:39.200
And this is similar to a news broadcast
where you have a live camera feed,

00:18:39.200 --> 00:18:42.620
and then they switch to a
previously stored segment.

00:18:43.770 --> 00:18:46.340
Okay,
so you would use the Push Data Sourcer

00:18:46.340 --> 00:18:48.760
to do all other things.

00:18:49.210 --> 00:18:53.810
The Push Data Sourcer basically just
waits for data from the application,

00:18:53.820 --> 00:18:56.460
and when it gets its data,
it sends it out to be broadcast.

00:18:56.550 --> 00:19:00.010
Then it's up to your application
and your imagination as to

00:19:00.010 --> 00:19:01.620
where you can get the data.

00:19:02.030 --> 00:19:07.180
And this is also the way that you
would send text and URL tracks.

00:19:07.510 --> 00:19:12.190
So let's go over to demo two,
where Kevin Marks is going to

00:19:12.190 --> 00:19:15.970
show an interesting application
of using the Push Data Sourcer.

00:19:16.840 --> 00:19:23.860
So what you're watching here is the
client receiving the live broadcast.

00:19:24.130 --> 00:19:26.060
which is coming from a push data sourcer.

00:19:26.090 --> 00:19:29.160
What I'm doing is I'm
taking data from a movie,

00:19:29.210 --> 00:19:33.840
taking image data from a movie,
decompressing that into a G-World,

00:19:33.870 --> 00:19:36.850
compressing that data again,
and sending that out through

00:19:36.850 --> 00:19:40.260
the push data sourcer,
which does sound rather cumbersome,

00:19:40.260 --> 00:19:43.060
and why would I do that rather
than use the track sourcer?

00:19:43.090 --> 00:19:46.340
Well, the G-World that I'm using
is actually the screen.

00:19:46.400 --> 00:19:52.640
So I can actually send any part of
the screen around to you over there.

00:20:00.690 --> 00:20:04.560
So the point of this is that
anything you can draw in a GWorld,

00:20:04.570 --> 00:20:07.320
you can broadcast with
QuickTime Streaming.

00:20:07.780 --> 00:20:09.550
Any text you can generate,
you can broadcast with

00:20:09.550 --> 00:20:10.320
QuickTime Streaming.

00:20:10.320 --> 00:20:12.220
Or any sound you can generate,
you can broadcast with

00:20:12.220 --> 00:20:13.260
QuickTime Streaming.

00:20:13.270 --> 00:20:15.340
Anything you can make on the
computer as QuickTime media,

00:20:15.340 --> 00:20:18.420
you can send over the wire,
have it received live by someone else.

00:20:18.420 --> 00:20:25.300
Can we go back to slides?

00:20:35.530 --> 00:20:41.820
OK, so in summary, the broadcast APIs are
available in QuickTime 5.

00:20:42.110 --> 00:20:44.540
Please go look at them
and try to use them.

00:20:44.610 --> 00:20:46.580
Do you have interesting
ideas that you want to do?

00:20:46.780 --> 00:20:48.850
Do you want to write a
conferencing application?

00:20:48.900 --> 00:20:51.620
Do you want to write a--

00:20:51.910 --> 00:20:56.800
Do you want to write an internet
radio station application?

00:20:56.800 --> 00:21:03.440
Please send us this information and any
other feedback to QTSWfeedback@apple.com.

00:21:03.550 --> 00:21:08.650
All that email will be personally
read by Adam Wells right over there,

00:21:08.650 --> 00:21:12.910
who will then forward it
to the appropriate place.

00:21:13.800 --> 00:21:19.890
Also sending email to that address
will allow you to be put on a private

00:21:20.290 --> 00:21:23.160
NDA seed program if you wish to do that.

00:21:23.470 --> 00:21:29.540
And also participate in a private
email list about broadcasting.

00:21:30.010 --> 00:21:33.100
Sample code and documentation
can be found at these

00:21:33.100 --> 00:21:36.900
URLs from the Apple website,
and this slide will be put back

00:21:36.990 --> 00:21:38.900
up at the end of the program.

00:21:43.510 --> 00:21:48.870
So here's Shilong to talk
about MPEG and MPEG-4.

00:22:07.740 --> 00:22:08.660
Thanks for staying.

00:22:08.810 --> 00:22:14.240
I'm Shi Long,
and I have the privilege of managing

00:22:14.320 --> 00:22:16.690
an awesome team of Kodak guys.

00:22:16.760 --> 00:22:18.430
This is one of them, Thomas Pun.

00:22:18.540 --> 00:22:20.700
He's the standards boy from this morning.

00:22:20.700 --> 00:22:27.090
MPEG-4, let's see.

00:22:27.090 --> 00:22:27.090
I've got to figure out
how to do this here.

00:22:37.410 --> 00:22:40.580
Okay, I haven't figured this out,
but we'll figure it out.

00:22:40.580 --> 00:22:41.430
Oh, I got you, I got you.

00:22:41.610 --> 00:22:45.590
So, ooh, that's backwards, isn't it?

00:22:53.000 --> 00:22:58.060
So I want to give you a brief technology
overview of what we're doing with MPEG-4.

00:22:58.100 --> 00:23:01.900
MPEG-4 is sort of the newest thing
in the standards block to come by,

00:23:01.900 --> 00:23:02.900
and we think it's pretty cool.

00:23:02.900 --> 00:23:05.390
So we're going to talk a little
bit about standards and how

00:23:05.390 --> 00:23:06.890
it's fitting with QuickTime.

00:23:06.890 --> 00:23:08.800
We're going to talk a little
bit about the MPEG family,

00:23:08.900 --> 00:23:10.900
because I'm most interested in it.

00:23:10.900 --> 00:23:13.500
And then, of course,
we want to get to MPEG-4.

00:23:17.430 --> 00:23:19.070
So QuickTime and standards.

00:23:19.140 --> 00:23:22.200
We've been doing
standards for a long time.

00:23:22.200 --> 00:23:25.490
We shipped JPEG with the very
first release of QuickTime.

00:23:25.790 --> 00:23:28.220
And since then we've done quite a bit.

00:23:28.220 --> 00:23:31.400
And it spans sort of the whole spectrum
of functionalities in QuickTime.

00:23:31.560 --> 00:23:38.610
We've done video, audio streaming, MPEG,
you know, and the ever popular

00:23:38.770 --> 00:23:41.260
Tiff Fax is in there.

00:23:41.260 --> 00:23:42.780
We like standards.

00:23:42.780 --> 00:23:47.220
And we think open standards are
the way to go because it allows,

00:23:47.220 --> 00:23:51.440
it facilitates interoperability
between the various communities

00:23:51.440 --> 00:23:55.110
that form around these things,
like the content providers,

00:23:55.110 --> 00:23:57.700
the deliverers, and the consumers.

00:23:57.700 --> 00:24:03.870
And we find that the communities that
converge around these things outlast

00:24:03.940 --> 00:24:06.900
any single member of these things,
of the communities.

00:24:06.900 --> 00:24:11.080
So all the effort that you put into
building apps around the standards,

00:24:11.100 --> 00:24:11.240
it's not going to happen.

00:24:11.240 --> 00:24:12.240
So we're going to be working on that.

00:24:13.260 --> 00:24:13.800
So QuickTime and standards.

00:24:13.800 --> 00:24:15.840
You can be sure that it'll
be relevant for a while.

00:24:15.840 --> 00:24:16.840
So we like it a lot.

00:24:16.840 --> 00:24:20.140
I'd like to point out that
the file format stuff,

00:24:20.140 --> 00:24:22.800
MPEG-4 file format is
actually based on QuickTime.

00:24:22.800 --> 00:24:25.220
I've spent quite a bit
of time doing that.

00:24:25.220 --> 00:24:27.500
So we're quite proud of it.

00:24:30.090 --> 00:24:33.980
MPEG-1, MPEG-2,
we're quite familiar with.

00:24:34.190 --> 00:24:36.870
MPEG-4,
I just want to get to that quickly.

00:24:36.940 --> 00:24:42.860
Each of these standards have a
target application and a set of

00:24:42.860 --> 00:24:47.800
technologies that each of these
guys define and standardize.

00:24:47.800 --> 00:24:51.660
You'll find that as you move from MPEG-1,
2, and all the way to 4,

00:24:51.720 --> 00:24:54.660
that the target applications
and the technologies that are

00:24:54.660 --> 00:24:59.620
involved start to become bigger
and bigger until they go crazy.

00:25:01.600 --> 00:25:03.990
I've got to stand here.

00:25:04.000 --> 00:25:05.000
There we go.

00:25:05.000 --> 00:25:06.900
MPEG applications.

00:25:06.900 --> 00:25:08.840
Let me talk about that a little bit.

00:25:08.840 --> 00:25:15.260
MPEG-1 is probably some sort of de
facto standard for enterprise streaming,

00:25:15.260 --> 00:25:18.280
and internet sort of high
rate kind of streaming stuff.

00:25:18.280 --> 00:25:22.970
It's used very often in video CDs,
and of course the MP3 audio stuff that

00:25:22.980 --> 00:25:27.080
you've all come to love is MPEG-1.

00:25:27.080 --> 00:25:29.110
MPEG-2

00:25:30.420 --> 00:25:38.910
hits a little higher quality,
higher bit rate broadcasting, digital TV,

00:25:38.910 --> 00:25:39.390
DVDs.

00:25:39.420 --> 00:25:43.660
The technologies in MPEG-2
actually can be used in the

00:25:43.920 --> 00:25:45.820
market areas for MPEG-1 as well.

00:25:45.820 --> 00:25:50.710
This is not to say that one
is exclusive of the other.

00:25:51.300 --> 00:25:53.530
And then MPEG-4 just goes big and crazy.

00:25:53.540 --> 00:25:56.500
It has just about everything
else in there that you want.

00:25:56.550 --> 00:26:00.200
Internet streaming, consumer electronics,
you can read this stuff.

00:26:00.260 --> 00:26:02.900
Now, the thing is,
a lot of people think that MPEG-4

00:26:02.900 --> 00:26:06.410
is a crappy video at low rates
kind of stuff for streaming only,

00:26:06.410 --> 00:26:07.560
and that's not true.

00:26:07.610 --> 00:26:12.790
The technologies in MPEG-4, again,
similar to MPEG-2, can be used for any

00:26:12.800 --> 00:26:14.870
of those other spaces.

00:26:16.820 --> 00:26:20.690
Okay, so let's go through some of the
technologies that are in there.

00:26:20.790 --> 00:26:23.470
I failed to mention,
but under technologies,

00:26:23.470 --> 00:26:27.700
MPEG standardizes three basic components.

00:26:27.700 --> 00:26:30.140
The system layer, the video layer,
and the audio layers,

00:26:30.140 --> 00:26:32.520
or audio components,
let's just call them components.

00:26:32.520 --> 00:26:38.910
So, in video and audio and systems,
MPEG-1 is actually the most basic

00:26:39.180 --> 00:26:41.060
of the three MPEG standards.

00:26:41.060 --> 00:26:48.290
And video is about 320 by 240,
gives you about a megabit of bit rate.

00:26:48.300 --> 00:26:53.680
Audio comes in three layers, stereo,
and gives you these sort of kilobits.

00:26:53.680 --> 00:26:56.980
And the three layers get more
complex as you go up the layers.

00:26:56.980 --> 00:26:59.360
And then layer three is, of course,
MP3 that we know.

00:26:59.360 --> 00:27:01.400
Synchronization is very simple.

00:27:01.400 --> 00:27:04.620
They do... Basically,
so the systems layer is just the

00:27:04.620 --> 00:27:06.960
synchronization and multiplexing.

00:27:06.960 --> 00:27:10.920
And this thing, it was meant for local
storage type issues.

00:27:10.920 --> 00:27:12.710
So,
you'll see that the system layer doesn't

00:27:12.720 --> 00:27:14.460
include anything network-related.

00:27:18.900 --> 00:27:20.060
I guess we're up for demo.

00:27:20.060 --> 00:27:24.530
On demo three, we're going to show
you MPEG-1 running at,

00:27:24.620 --> 00:27:30.110
I think the video's at 1.2 megabits,
and audio's around 192 kilobits,

00:27:30.210 --> 00:27:31.420
joint stereo.

00:27:31.420 --> 00:27:32.910
Go for it.

00:27:42.000 --> 00:27:48.760
♪ She's back in the atmosphere ♪ ♪
With drops of Jupiter in her hair ♪ Okay,

00:27:48.950 --> 00:27:49.790
thanks.

00:27:49.860 --> 00:27:55.740
We've been shipping MPEG-1
with Macintoshes since '96,

00:27:55.830 --> 00:27:56.750
I think.

00:27:56.750 --> 00:28:02.690
And then new in QuickTime 5.0,
we've got Windows support

00:28:02.690 --> 00:28:04.780
and also streaming.

00:28:04.780 --> 00:28:05.230
So that's all good stuff.

00:28:05.230 --> 00:28:05.230
Yeah, back to slides, please.

00:28:05.230 --> 00:28:05.230
Thank you.

00:28:09.840 --> 00:28:15.690
So MPEG-2 technologies,
still sort of the basic set of components

00:28:15.780 --> 00:28:18.740
that you've recognized from MPEG-1,
except everything goes

00:28:18.790 --> 00:28:19.680
up higher a little bit.

00:28:19.890 --> 00:28:25.250
You've got audio hitting 5.1 channels,
and then audio introduces a

00:28:25.250 --> 00:28:30.130
new type of coding technology
called advanced audio coding.

00:28:30.140 --> 00:28:35.500
And that's on top of the three layers
of audio that you saw in MPEG-1.

00:28:36.150 --> 00:28:38.340
Video, everything gets bigger, 720p,
480p.

00:28:38.490 --> 00:28:42.200
The megabits, the bitrate is like
whopping 4 to 15 megabits.

00:28:42.430 --> 00:28:43.180
That's sort of the target.

00:28:43.180 --> 00:28:47.420
You can actually change the
sizes on any of these things.

00:28:47.420 --> 00:28:49.740
These are just the target
sizes and target bitrates.

00:28:49.740 --> 00:28:51.350
Adds a number of technologies.

00:28:51.440 --> 00:28:53.050
It's scalable.

00:28:53.060 --> 00:28:55.160
It handles internet video.

00:28:55.160 --> 00:28:55.880
It's very nice.

00:28:55.960 --> 00:28:59.580
And then the system layer,
on top of synchronization,

00:28:59.580 --> 00:29:02.590
it puts a data transport layer,
so it becomes a little

00:29:02.590 --> 00:29:04.820
bit more network aware,
which is good.

00:29:04.820 --> 00:29:06.040
And we've got a demo for this, too,
I think.

00:29:06.080 --> 00:29:07.290
Thank you.

00:29:07.920 --> 00:29:11.860
OK, so on demo three,
we've got-- and this is a big two.

00:29:11.860 --> 00:29:13.240
You'll see this is much bigger.

00:29:13.240 --> 00:29:14.280
720p 480.

00:29:14.280 --> 00:29:16.950
I believe it's at 8 megabits a second.

00:29:17.010 --> 00:29:18.390
So let's go.

00:29:33.100 --> 00:29:40.680
Back in the atmosphere with
drops of Jupiter in her hand.

00:29:40.680 --> 00:29:44.810
So we keep cutting train off,
but the experience is much better.

00:29:44.880 --> 00:29:48.940
And the audio, I think,
is layer two audio from MPEG-1.

00:29:48.940 --> 00:29:49.940
And back to Slice, please.

00:29:49.940 --> 00:29:51.320
Thanks.

00:29:52.410 --> 00:29:53.400
So let's go back.

00:29:53.510 --> 00:29:57.520
MPEG-1 technology,
this is the basic three blocks.

00:29:57.520 --> 00:29:58.510
We've got the basic stuff.

00:29:58.520 --> 00:30:00.360
MPEG-2 sort of adds this thing.

00:30:00.360 --> 00:30:01.750
It gets bigger and better.

00:30:01.780 --> 00:30:03.800
And then you get to MPEG-4.

00:30:03.820 --> 00:30:05.300
Boom.

00:30:05.300 --> 00:30:07.210
Right?

00:30:08.580 --> 00:30:15.690
To the untrained eye,
this may seem confusing and impossible.

00:30:15.880 --> 00:30:18.700
But let me assure you,
to those of us skilled in the art,

00:30:18.730 --> 00:30:22.260
this stuff is confusing and impossible.

00:30:22.260 --> 00:30:26.220
So, just a little bit of a...

00:30:27.900 --> 00:30:32.840
If you go back, see those, for example,
say video, that block there?

00:30:33.070 --> 00:30:35.830
That block gets mapped into...

00:30:35.900 --> 00:31:29.500
[Transcript missing]

00:31:30.120 --> 00:31:32.900
So the experts understand this.

00:31:32.900 --> 00:31:34.140
Oops, this way.

00:31:34.140 --> 00:31:38.400
And so they've tried to come up
with place conformance points.

00:31:38.400 --> 00:31:41.280
And these are defined in
terms of profiles and levels.

00:31:41.280 --> 00:31:42.640
You might have heard about these.

00:31:42.750 --> 00:31:48.040
So profiles are subsets of technologies
targeted at specific solutions.

00:31:48.040 --> 00:31:51.760
So some of those-- if you wanted
to just stream basic video,

00:31:51.760 --> 00:31:53.340
then you wouldn't need
all that other stuff.

00:31:53.480 --> 00:31:56.850
So they've come up with something--
some small set of these things that

00:31:56.850 --> 00:32:01.020
you just need to implement in order
to be compliant with some other set

00:32:01.020 --> 00:32:03.200
of servers or something like that.

00:32:03.200 --> 00:32:06.320
The levels now, per profile,
the levels indicate

00:32:06.540 --> 00:32:09.470
the system constraints,
like the memory that

00:32:09.470 --> 00:32:12.300
the decoder has to have,
the bandwidth that the

00:32:12.300 --> 00:32:17.240
system has to sustain,
and computational complexity,

00:32:17.240 --> 00:32:18.760
and things like that.

00:32:18.970 --> 00:32:20.680
So--

00:32:21.170 --> 00:32:23.490
But when you put a bunch
of experts together,

00:32:23.520 --> 00:32:26.270
you get a whole bunch of opinions.

00:32:26.320 --> 00:32:27.500
So this is what happened.

00:32:27.530 --> 00:32:30.560
Just for visual now, we have 10 profiles.

00:32:30.600 --> 00:32:33.620
And per profile, you've got five levels.

00:32:33.630 --> 00:32:34.360
So what do you do?

00:32:34.360 --> 00:32:36.480
You've got a ton of conformance points.

00:32:36.530 --> 00:32:41.280
And if you're a tiny little
company A trying to be compliant,

00:32:41.310 --> 00:32:45.460
this becomes quite a bit
of a problem to deal with.

00:32:45.550 --> 00:32:48.870
So MPEG-4 is huge,
in spite of all the conformance points.

00:32:48.950 --> 00:32:51.170
and where do you start

00:32:52.800 --> 00:33:00.500
Apple has been fortunate enough
to team up with a number of other

00:33:00.500 --> 00:33:05.450
streaming companies to form the
Internet Streaming Media Alliance.

00:33:05.530 --> 00:33:09.300
It's a bunch of guys that want
to make sure that MPEG-4 gets

00:33:09.300 --> 00:33:12.720
deployed quickly and well.

00:33:12.720 --> 00:33:14.980
We'd like you to join us if you can.

00:33:14.980 --> 00:33:19.070
We intend to integrate on a
small number of subsets of

00:33:19.070 --> 00:33:22.140
MPEG-4 plus some IETF standards.

00:33:22.140 --> 00:33:23.830
I think we're coming along very well.

00:33:23.870 --> 00:33:27.140
We've got an interesting
set of things to work on.

00:33:27.140 --> 00:33:34.840
You can check us out at www.isma.tv,
and we want you to do so.

00:33:35.460 --> 00:33:38.700
What is QuickTime doing with MPEG-4?

00:33:38.750 --> 00:33:44.020
In the short term, we're going to focus
on something feasible.

00:33:44.090 --> 00:33:46.740
Inside the visual component,
we're just going to

00:33:46.740 --> 00:33:50.640
handle frame-based video,
probably around 320 by 240,

00:33:50.640 --> 00:33:53.400
probably going to hit
anywhere from 300 kilobits.

00:33:53.550 --> 00:33:57.260
That seems to be the big thing now,
all the way up to maybe

00:33:57.260 --> 00:33:58.880
two or three megabits.

00:33:58.880 --> 00:34:03.800
And audio will handle kelp for
speech and AAC for general music.

00:34:03.800 --> 00:34:08.020
It turns out AAC is actually very
good technology for general music.

00:34:11.240 --> 00:34:15.320
and the system stuff,
we've always done IETF streaming.

00:34:15.350 --> 00:34:20.340
And then, of course, the MP4 file

00:34:22.390 --> 00:34:24.620
So at this point,
we want to show you a number of stuff

00:34:24.620 --> 00:34:29.020
that we can do in QuickTime with MPEG-4.

00:34:29.020 --> 00:34:31.740
This is just stuff that
we've been playing with.

00:34:31.740 --> 00:34:34.580
The thing that I want you to get across,
I want you to get through this,

00:34:34.630 --> 00:34:37.280
is that MPEG-4,
when we do ship this thing,

00:34:37.280 --> 00:34:38.640
it's just going to work.

00:34:38.640 --> 00:34:42.420
It's part of QuickTime,
and it's going to be just as if it

00:34:42.420 --> 00:34:43.560
were just another codec in there.

00:34:43.560 --> 00:34:44.380
So go ahead.

00:34:44.380 --> 00:34:44.710
Let's see.

00:34:44.780 --> 00:34:49.780
Since this is a broadcasting demo,
here's a broadcast of MPEG-4 coming

00:34:49.780 --> 00:34:54.860
live from that cool titanium power
book that's sitting right there.

00:34:55.150 --> 00:34:56.600
There you go.

00:34:59.320 --> 00:35:00.800
Thank you, Kevin.

00:35:00.870 --> 00:35:03.140
Maybe a little song and dance?

00:35:03.140 --> 00:35:03.750
Yeah.

00:35:04.050 --> 00:35:04.330
Thanks.

00:35:04.490 --> 00:35:06.300
Okay, so --

00:35:07.670 --> 00:35:10.830
Ooh, it's about half a, five minutes,
we'll talk later.

00:35:10.880 --> 00:35:11.670
Come talk to me.

00:35:11.700 --> 00:35:17.410
And let's see, so earlier today you saw
a whole bunch of skins,

00:35:17.420 --> 00:35:18.380
so here you go.

00:35:18.380 --> 00:35:19.910
We can throw this in a skin as well.

00:35:20.000 --> 00:35:20.840
So let's try that.

00:35:20.840 --> 00:35:26.280
This is the awesome power, ooh,
the iBook.

00:35:37.430 --> 00:35:39.940
So it basically works
with a lot of stuff.

00:35:40.220 --> 00:35:45.720
We can throw this into the player,
and all the functionality in the player

00:35:45.720 --> 00:35:48.440
should map straight onto this stuff.

00:35:48.440 --> 00:35:51.790
So let's try that.

00:35:56.460 --> 00:36:02.540
We can flip it around
as we're playing it.

00:36:03.300 --> 00:36:06.000
You can flip it upside down.

00:36:06.000 --> 00:36:07.300
We can go sideways.

00:36:07.300 --> 00:36:10.420
Yeah, that's kind of cool.

00:36:10.420 --> 00:36:16.410
You can change the color on these
things as well with our new controls.

00:36:16.600 --> 00:36:17.600
You can turn green.

00:36:17.600 --> 00:36:18.600
Yeah, do green.

00:36:18.600 --> 00:36:19.590
Green is good.

00:36:19.590 --> 00:36:20.940
Yeah.

00:36:22.300 --> 00:36:24.550
So there's a lot of interesting
things that you can just

00:36:24.680 --> 00:36:27.540
pop this stuff right into,
and it ought to work.

00:36:27.540 --> 00:36:29.660
So that's sort of the message.

00:36:29.670 --> 00:36:34.700
One last thing we want to do before
we leave is-- so just to prove that

00:36:34.700 --> 00:36:38.760
MPEG-4 can be used at the high rates,
the quality stuff,

00:36:38.760 --> 00:36:43.700
I want to show you what we can do
at-- this is running at 3 megabits.

00:36:44.000 --> 00:36:48.380
and sort of comparable to something
you might see off with EVD.

00:36:48.380 --> 00:36:49.270
So go ahead.

00:37:29.560 --> 00:37:30.490
It's not bad.

00:37:30.510 --> 00:37:33.420
And software decode, all good.

00:37:33.420 --> 00:37:35.380
Can we go back to the slides, please?

00:37:40.500 --> 00:37:44.040
So in summary,
I just want to say that MPEG-4 is going

00:37:44.040 --> 00:37:50.090
to be a full citizen of QuickTime,
which means that you can create

00:37:50.090 --> 00:37:52.780
and play back MPEG-4 content.

00:37:52.780 --> 00:37:55.300
And all the tools that you're
writing today are going to support

00:37:55.380 --> 00:37:59.160
this stuff and be able to take
advantage of MPEG-4 immediately.

00:37:59.160 --> 00:38:02.190
We'll be able to do things
like export and import video

00:38:02.190 --> 00:38:04.280
and audio tracks from MPEG-4.

00:38:04.280 --> 00:38:08.740
You'll be able to mix those things up
with other types of QuickTime media,

00:38:08.930 --> 00:38:13.800
Flash, wired sprites, QuickTime VR,
that kind of stuff.

00:38:13.800 --> 00:38:15.880
So it's coming.

00:38:18.610 --> 00:38:20.560
Oh, wow.

00:38:20.620 --> 00:38:24.990
We have a QuickTime feedback
forum tomorrow at 3:30.

00:38:25.030 --> 00:38:28.740
And then there's some streaming
issues that you might want to

00:38:28.750 --> 00:38:31.140
visit tomorrow also in the morning.

00:38:31.240 --> 00:38:32.100
It's a little early.

00:38:32.120 --> 00:38:34.020
But please do that.

00:38:37.200 --> 00:38:41.300
And if four sessions of
QuickTime hasn't been enough for you,

00:38:41.310 --> 00:38:44.760
we've got an entire conference
on QuickTime for you.

00:38:44.760 --> 00:38:47.200
So you ought to come.

00:38:47.200 --> 00:38:52.040
October, and we'll talk about things
like authoring and making

00:38:52.140 --> 00:38:54.800
QuickTime applications.

00:38:54.800 --> 00:38:56.600
Is that correct?

00:38:56.600 --> 00:38:59.590
And let me put up this information panel.

00:39:00.120 --> 00:39:03.600
So that you all can get
the information you need.

00:39:03.600 --> 00:39:07.100
So some of us will be down here,
and you can talk to us if you'd like.

00:39:07.190 --> 00:39:09.050
Thanks.