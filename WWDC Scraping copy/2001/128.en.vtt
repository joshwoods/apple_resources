WEBVTT

00:00:06.360 --> 00:00:08.930
Hi,
I'd like to welcome you to session 128,

00:00:09.050 --> 00:00:11.540
Font Management on OS X.

00:00:11.590 --> 00:00:15.060
The font management on Mac OS X has
changed a lot compared with Mac OS X and

00:00:15.060 --> 00:00:16.620
the font formats we supported.

00:00:16.640 --> 00:00:18.520
I think we're going to
have a great session today.

00:00:18.560 --> 00:00:21.240
We have actually an extra guest,
a special guest, I should say,

00:00:21.320 --> 00:00:21.920
from Macromedia.

00:00:21.920 --> 00:00:26.500
We'll talk about his migration from
Mac OS X to Mac OS X and the APIs he

00:00:26.500 --> 00:00:31.460
used to replace the whole course he
had on Mac OS X and go around the

00:00:31.460 --> 00:00:34.980
limitations of a resource manager.

00:00:35.110 --> 00:00:37.010
So let's stop now.

00:00:37.150 --> 00:00:39.730
I'd like to introduce Nathan Taylor,
who's actually a software

00:00:39.820 --> 00:00:41.570
engineer in the Type group,
who has been working on the

00:00:41.670 --> 00:00:45.290
Font Manager for Mac OS X.

00:00:49.450 --> 00:00:51.400
Alright, well,
thank you for the introduction, Xavier.

00:00:55.970 --> 00:00:59.500
Well, I'd like to announce that
we've shipped Mac OS X.

00:00:59.540 --> 00:01:02.360
We've done a lot of work here
getting it ready for you guys.

00:01:02.450 --> 00:01:04.740
And we can't wait to see what
great applications that you

00:01:04.840 --> 00:01:07.310
will create for this platform.

00:01:07.410 --> 00:01:11.150
Today's agenda is an agenda
for answering questions.

00:01:11.360 --> 00:01:13.340
We've received many
questions along the road,

00:01:13.450 --> 00:01:15.540
and we hope to answer
a few of them today.

00:01:15.600 --> 00:01:18.930
I'm going to start off by going
into the inner workings of

00:01:18.930 --> 00:01:21.430
ATS and the Font Manager on OS X.

00:01:21.800 --> 00:01:25.230
Then we will go into programming
examples and getting into the programming

00:01:25.230 --> 00:01:30.470
interface and getting into the nuts and
bolts of the APIs that you will be using.

00:01:30.560 --> 00:01:35.010
And finally, we'll have a real-life
example to spice things up.

00:01:37.060 --> 00:01:42.140
In development of ATS for Mac OS X,
we had several enhancements

00:01:42.240 --> 00:01:43.640
that we wanted to make.

00:01:43.760 --> 00:01:45.670
First off,
we created a specialized database

00:01:45.790 --> 00:01:48.770
for handling fonts and font data.

00:01:49.450 --> 00:01:53.740
This obviated the need to use the
Resource Manager and as a result we

00:01:53.740 --> 00:01:58.700
get better performance from taking
advantage of Mac OS X's kernel features.

00:01:59.180 --> 00:02:03.660
Additionally, from this approach,
we can enhance scalability.

00:02:03.760 --> 00:02:08.100
We can now handle many more
fonts and many more font formats.

00:02:08.290 --> 00:02:11.940
Additionally,
now there is no longer an upper limit

00:02:12.310 --> 00:02:15.460
to the number of fonts that can be
installed in the system except for the

00:02:15.480 --> 00:02:17.590
RAM that a user might have installed.

00:02:19.190 --> 00:02:21.450
In doing this,
we wanted to improve the extensibility

00:02:21.990 --> 00:02:25.690
of the font system on Mac OS X.

00:02:25.770 --> 00:02:29.040
and we also mentioned before we
support more font technologies

00:02:29.100 --> 00:02:30.880
and font packaging formats.

00:02:30.920 --> 00:02:33.920
Additionally,
we have support for plug-in font

00:02:33.920 --> 00:02:37.820
rasterizers so we can create new font
rasterizers to support such things

00:02:37.820 --> 00:02:40.080
as stroke-based fonts in the future.

00:02:42.690 --> 00:02:46.660
A major design goal of this rewrite
for Mac OS X was to provide a

00:02:46.660 --> 00:02:49.700
consistent programmer interface.

00:02:50.480 --> 00:02:52.840
This way,
developers who want to use fonts

00:02:52.840 --> 00:02:55.580
don't have to know the specific
details of the font formats

00:02:55.670 --> 00:02:57.640
that they're going to be using,
and they don't need to be

00:02:57.780 --> 00:03:00.190
wizards of the Resource Manager.

00:03:01.210 --> 00:03:04.790
Another major feature is that we
feature non-invasive file access.

00:03:04.790 --> 00:03:08.100
You can be assured that when
you install fonts from a CD,

00:03:08.240 --> 00:03:10.630
those fonts will not be modified.

00:03:13.710 --> 00:03:19.920
This graphic here shows an outline
of the ATS client hierarchy.

00:03:20.030 --> 00:03:22.240
As you can see, ATS lies at the bottom.

00:03:22.240 --> 00:03:26.390
It's the foundation for all
the text handling in Mac OS X.

00:03:27.110 --> 00:03:30.200
There are different frameworks here
that you can take advantage with your

00:03:30.200 --> 00:03:33.830
application and they will all call
into ATS to get font and font data.

00:03:37.990 --> 00:03:42.540
One of the major questions we have
received most frequently is what

00:03:42.600 --> 00:03:45.000
type of font formats do we support?

00:03:45.280 --> 00:03:49.900
We support the TrueType font technologies
in various packaging formats.

00:03:49.940 --> 00:03:53.990
We support the standard Macintosh
resource-based font suitcases that you

00:03:54.090 --> 00:03:55.800
know from previous versions of the OS.

00:03:55.970 --> 00:03:59.390
We also support a new format,
the D-Font format,

00:03:59.390 --> 00:04:04.330
which is a data fork packaged font
very similar to the resource fork.

00:04:05.220 --> 00:04:08.710
We also support now Windows TrueType
fonts so you can install

00:04:08.710 --> 00:04:12.580
TTF and TTC fonts and they
will just work in Mac OS X.

00:04:15.710 --> 00:04:16.930
Thank you.

00:04:16.950 --> 00:04:20.540
Additionally, we support a wide variety
of PostScript fonts.

00:04:20.690 --> 00:04:27.260
We now support the up and coming standard
OpenType from Microsoft and Adobe.

00:04:27.270 --> 00:04:29.350
And we also support the
Type 1 format that you all

00:04:29.350 --> 00:04:31.760
know from Adobe Type Manager.

00:04:32.220 --> 00:04:36.010
Finally, we have support for Asian fonts
using the Character Identifier

00:04:36.010 --> 00:04:38.340
keyed PostScript fonts.

00:04:41.770 --> 00:04:45.510
Another frequently asked question is,
where should fonts be

00:04:45.510 --> 00:04:47.260
installed in the system?

00:04:47.260 --> 00:04:50.790
These areas in the system are listed
in precedence order here and we use the

00:04:50.790 --> 00:04:53.980
precedence to resolve font duplicates.

00:04:55.200 --> 00:04:57.760
We consider these areas
domains in the system.

00:04:57.760 --> 00:05:00.540
The highest precedence
domain is the user domain.

00:05:00.540 --> 00:05:03.740
It's in the user's home directory.

00:05:03.760 --> 00:05:06.740
They have a library fonts folder.

00:05:06.780 --> 00:05:09.570
Users can install any fonts
they want in this directory.

00:05:09.570 --> 00:05:13.770
They will take precedence over other
fonts and the user will get to see

00:05:13.770 --> 00:05:15.800
the fonts that they intend to use.

00:05:16.620 --> 00:05:19.020
Additionally,
the next domain in the precedence

00:05:19.020 --> 00:05:20.500
chain is the local domain.

00:05:20.500 --> 00:05:23.740
This is where a system
administrator can install fonts

00:05:23.740 --> 00:05:26.260
for use by all users on a system.

00:05:26.390 --> 00:05:30.670
It is also where we encourage developers
to install application-specific

00:05:30.670 --> 00:05:34.670
fonts and fonts they decide to
share between other applications.

00:05:35.600 --> 00:05:38.120
Another interesting domain
is the network domain,

00:05:38.120 --> 00:05:41.500
where a corporation can install
a corporate-specific font.

00:05:41.580 --> 00:05:43.680
At Apple,
we install Apple Garamond TrueType

00:05:43.750 --> 00:05:47.650
in the network domain and use
it on all corporate systems.

00:05:48.760 --> 00:05:52.190
The fourth domain which I have
highlighted here is the System Domain.

00:05:52.300 --> 00:05:55.730
The System Domain is where
Apple installs the system fonts.

00:05:55.900 --> 00:05:59.580
We recommend that this domain not
be used for installing third-party

00:05:59.580 --> 00:06:02.290
fonts or application fonts.

00:06:02.750 --> 00:06:07.940
Finally, we also support fonts from the
standard Mac OS 9 system folder

00:06:08.220 --> 00:06:11.680
These fonts will be picked up from
a previous install of Mac OS 9 and

00:06:11.680 --> 00:06:14.690
used with all Mac OS X applications.

00:06:15.260 --> 00:06:17.520
There is a caveat to this though.

00:06:17.540 --> 00:06:22.480
The classic applications that you run
will not get to see other Mac OS X fonts.

00:06:22.480 --> 00:06:26.520
They will only see the fonts that
are in the classic system folder.

00:06:26.750 --> 00:06:31.060
This system folder changes when a
user changes their specific classic

00:06:31.260 --> 00:06:33.990
folder in the Preferences panel.

00:06:35.180 --> 00:06:38.220
and one other thing I'd like to note,
all of these domains are scanned

00:06:38.220 --> 00:06:40.980
and activated when a user logs in.

00:06:43.340 --> 00:06:48.260
Another area of concern is where
can developers install fonts?

00:06:48.390 --> 00:06:50.200
We are actually very flexible.

00:06:50.290 --> 00:06:52.210
Fonts can be installed in
almost any directory on the

00:06:52.280 --> 00:06:55.300
system and programmatically
activated from an application.

00:06:55.490 --> 00:06:58.170
However,
there are some recommended locations

00:06:58.170 --> 00:07:00.000
that you install your fonts.

00:07:00.330 --> 00:07:02.350
One place you might want to
consider if you are a vendor that

00:07:02.370 --> 00:07:05.350
ships multiple applications that
wants to share a set of fonts,

00:07:05.350 --> 00:07:08.540
you may want to consider making
an application library directory

00:07:08.860 --> 00:07:13.390
inside of the local library or
a user's library to share fonts

00:07:13.820 --> 00:07:16.170
between your various applications.

00:07:16.540 --> 00:07:19.030
More specifically,
if you require a specific

00:07:19.440 --> 00:07:23.830
font for your user interface,
you might want to consider installing the

00:07:23.830 --> 00:07:26.100
font inside of your application's bundle.

00:07:26.270 --> 00:07:30.750
This can be programmatically activated
locally only to that application and

00:07:30.750 --> 00:07:36.230
your application will be assured that it
gets the font that it needs for its UI.

00:07:37.990 --> 00:07:42.430
Additionally, we support activation from
memory-resident fonts and also

00:07:42.510 --> 00:07:44.400
application from resource forks.

00:07:44.400 --> 00:07:48.520
If you insist on bundling a fork
inside your application's resource,

00:07:48.530 --> 00:07:51.590
you can activate that particular
file and it will activate the

00:07:51.680 --> 00:07:53.510
font right from the resource fork.

00:07:54.050 --> 00:07:55.910
I'd like to make one note.

00:07:56.020 --> 00:07:59.700
Fonts that are activated programmatically
take precedence over the fonts that are

00:07:59.790 --> 00:08:02.180
activated from the multiple domains.

00:08:02.180 --> 00:08:07.140
And above all, the local domain,
when you activate a font programmatically

00:08:07.140 --> 00:08:10.310
locally to your application,
you will be assured that

00:08:10.400 --> 00:08:11.980
you will get that font.

00:08:14.840 --> 00:08:19.900
Font installation on Mac OS X is as
simple a procedure as it was before.

00:08:19.940 --> 00:08:22.150
It's a simple matter of locating
the font directory that you

00:08:22.260 --> 00:08:25.420
want to install the font,
dragging the fonts you want installed,

00:08:25.610 --> 00:08:27.440
and dropping them in that folder.

00:08:27.440 --> 00:08:29.340
Deactivation works very similarly.

00:08:29.370 --> 00:08:31.050
Just take them out.

00:08:31.610 --> 00:08:36.690
These directories will get re-scanned
when you launch your application.

00:08:36.790 --> 00:08:40.340
Also, they get scanned when a
user logs into a system.

00:08:40.500 --> 00:08:44.710
One caveat to this is that running
applications will not see an

00:08:44.710 --> 00:08:49.490
update of the directories until
another application is launched.

00:08:49.650 --> 00:08:54.340
When this application is launched,
it triggers a re-scan of the directories.

00:08:56.390 --> 00:08:58.880
Since we have multiple
domains for installing fonts,

00:08:58.880 --> 00:09:01.130
there's the issue of
handling duplicate fonts.

00:09:01.130 --> 00:09:03.600
And as I mentioned before,
we handle these based on a

00:09:03.730 --> 00:09:05.690
precedence ordering of the domains.

00:09:05.850 --> 00:09:10.810
The user domain takes precedence over all
the standard domains and programmatically

00:09:10.820 --> 00:09:16.200
activated fonts will take precedence
over fonts in the standard font folders.

00:09:17.880 --> 00:09:20.560
Conflicts are handled in a
slightly different manner.

00:09:20.560 --> 00:09:25.640
We handle font conflicts by synthesizing
an entry in the font database.

00:09:25.700 --> 00:09:28.800
This is to facilitate the fact,
as I mentioned before,

00:09:29.010 --> 00:09:33.470
that we will not modify the files
and support non-invasive file access.

00:09:37.220 --> 00:09:43.340
Font selection on Mac OS X works
just like it did before.

00:09:43.540 --> 00:09:47.020
We have rewritten the APIs for
creating the standard font menus and

00:09:47.450 --> 00:09:50.470
they act as clients directly to ATS.

00:09:50.700 --> 00:09:53.600
Carbon developers using the
Carbon framework can present

00:09:53.600 --> 00:09:55.800
their font menu in two manners.

00:09:55.800 --> 00:09:59.210
You get a standard,
flat font menu as users

00:09:59.210 --> 00:10:03.270
are used to for Mac OS 9,
and then there is a new, more compact,

00:10:03.270 --> 00:10:05.890
hierarchical format font menu.

00:10:06.660 --> 00:10:10.320
If you are writing a Cocoa application,
you get the benefit of

00:10:10.450 --> 00:10:12.060
the new AppKit font panel.

00:10:12.060 --> 00:10:15.960
This font panel makes it easy to
access your fonts in large collections,

00:10:16.090 --> 00:10:19.240
manage your collections,
and also gives the user an easy

00:10:19.290 --> 00:10:21.680
way to visualize the font family,
style,

00:10:21.910 --> 00:10:23.650
and size that they are currently using.

00:10:28.600 --> 00:10:32.540
The printing system on
Mac OS X is a major client of ATS.

00:10:32.540 --> 00:10:36.200
It uses ATS to convert fonts
from the standard display

00:10:36.200 --> 00:10:39.970
format to formats appropriate
for embedding in PDF documents

00:10:40.320 --> 00:10:42.740
or downloading to a printer.

00:10:43.280 --> 00:10:46.700
The printing is handled through
a standard dialog in all

00:10:46.700 --> 00:10:51.760
Carbon and Cocoa applications
and uses a PDF as an intermediary

00:10:52.160 --> 00:10:54.390
throughout the entire process.

00:10:55.300 --> 00:10:59.440
Fonts are streamed from ATS and
embedded in this PDF file.

00:10:59.440 --> 00:11:02.200
And we also do sub-setting
of the fonts for this.

00:11:02.430 --> 00:11:06.580
Because the fonts are embedded,
these PDF files can be shared

00:11:06.580 --> 00:11:10.390
between platforms and viewed
with a standard PDF viewer and

00:11:10.550 --> 00:11:15.670
expected to display as they should.

00:11:17.970 --> 00:11:21.010
Okay, I'd like to take a moment to
discuss what I'll be showing

00:11:21.020 --> 00:11:23.250
in a brief demonstration here.

00:11:23.420 --> 00:11:27.940
I will illustrate the standard
font directories on Mac OS X.

00:11:27.990 --> 00:11:31.190
Then I will illustrate the
methods for selecting fonts,

00:11:31.400 --> 00:11:34.820
printing and printing to
PDF and exchange of PDFs.

00:11:34.820 --> 00:11:37.830
And finally,
an application I have that does a

00:11:37.830 --> 00:11:40.490
local activation of a specific font.

00:11:56.730 --> 00:12:02.580
Okay, first off, I'd like to show you,
this is the classic

00:12:03.170 --> 00:12:07.060
So this is the classic domain where
classic system fonts are from.

00:12:07.200 --> 00:12:09.910
You can see it's coming from the
standard Mac OS 9 system folder

00:12:09.910 --> 00:12:11.700
that's installed on the system.

00:12:13.570 --> 00:12:17.630
Additionally here,
this is the system domain where you can

00:12:17.760 --> 00:12:25.140
see where we have our system fonts that
are stored as D fonts and OTF fonts.

00:12:28.340 --> 00:12:31.660
Additionally,
I have the local domain here

00:12:32.020 --> 00:12:34.750
where system administrators will
install system-wide fonts for

00:12:34.760 --> 00:12:37.410
use by all the users of a system.

00:12:39.560 --> 00:12:42.940
and finally,
users have their own font folder inside

00:12:42.940 --> 00:12:47.490
the user home directory where they
can install any fonts they choose.

00:12:48.260 --> 00:12:50.920
Font installation, as I mentioned,
is a simple process.

00:12:50.930 --> 00:12:53.640
I have here a collection of
multiple formats of fonts.

00:12:53.660 --> 00:13:01.160
And I'll install some OTF fonts here,
some PostScript character

00:13:01.160 --> 00:13:02.980
identifier keyed fonts.

00:13:06.080 --> 00:13:12.160
Standard PostScript Type 1 fonts
and finally a Windows Troop

00:13:12.270 --> 00:13:14.720
type font in TTF format.

00:13:22.290 --> 00:13:24.870
Sorry,
the command key on the left is broken on

00:13:24.870 --> 00:13:26.920
this keyboard and I keep forgetting it.

00:13:27.020 --> 00:13:27.800
OK.

00:13:27.820 --> 00:13:30.420
As I mentioned,
I just installed the fonts here

00:13:30.440 --> 00:13:36.590
and you can see that they are not
actually activated inside of this menu.

00:13:40.040 --> 00:13:42.910
If I launch a new
application as I'm doing now,

00:13:43.040 --> 00:13:45.310
these fonts will be activated.

00:13:45.500 --> 00:13:49.290
The directory will be re-scanned and
you can see an example right here.

00:13:49.440 --> 00:13:53.510
I have Arial in the TTF format,
the Windows format I just installed,

00:13:53.630 --> 00:13:55.390
and it's a simple matter to use it.

00:13:55.390 --> 00:13:58.710
I can select my text and change to it.

00:14:00.420 --> 00:14:03.960
Now I have two demo apps here.

00:14:04.050 --> 00:14:07.080
This one first shows the standard flat

00:14:08.650 --> 00:14:12.800
Flat Style Font Menu in Carbon and then
I have a new one that I have implemented

00:14:13.370 --> 00:14:15.790
with a Hierarchical Style Menu

00:14:20.300 --> 00:14:26.870
And then, as I said before,
Cocoa applications get the benefit

00:14:27.220 --> 00:14:31.730
of the new font panel where
it's easy to see the family,

00:14:31.910 --> 00:14:37.150
typeface, and size and change this
to a font I activated.

00:14:37.300 --> 00:14:42.250
We'll go with Tekton Pro, Oblique.

00:14:44.530 --> 00:14:47.020
Now, as I mentioned,
printing is a simple process

00:14:47.470 --> 00:14:50.800
presented in a standard dialog.

00:14:50.830 --> 00:14:52.780
I can choose to print.

00:14:54.100 --> 00:14:57.670
and preview this directly,
which will generate a PDF.

00:14:57.880 --> 00:15:02.150
The fonts are streamed to it, subsetted,
and embedded in the PDF document.

00:15:02.500 --> 00:15:07.180
This document now is
savable as a PDF document.

00:15:11.770 --> 00:15:14.440
Save it to the desktop, whatever.

00:15:14.450 --> 00:15:19.890
And then I have one I previously created,
which can be shared cross-platform

00:15:20.110 --> 00:15:24.740
in this example with classic
using Acrobat Reader 4.

00:15:25.860 --> 00:15:29.360
Finally, as I mentioned,
I wanted to show an example

00:15:29.360 --> 00:15:32.340
of locally activated fonts.

00:15:32.360 --> 00:15:34.370
This version of--

00:15:34.850 --> 00:15:40.190
of Simple Text with the
hierarchical menus has a copy of

00:15:40.230 --> 00:15:44.940
Apple Garamond TrueType embedded
in the applications bundle.

00:15:45.010 --> 00:15:48.790
I call centered APIs to
locate this and activate it.

00:15:49.050 --> 00:15:55.400
It's activated locally only
to this application and is not

00:15:55.400 --> 00:15:55.400
available to other applications.

00:16:03.260 --> 00:16:07.720
As you see,
if I go to this other simple text here,

00:16:07.750 --> 00:16:08.740
there is no Apple Garamond.

00:16:08.800 --> 00:16:13.500
There's an Apple Chancery that
came from the classic domain.

00:16:13.500 --> 00:16:13.500
And additionally,

00:16:16.160 --> 00:16:19.980
TextEdit doesn't have it either.

00:16:20.000 --> 00:16:21.340
That concludes the demonstration.

00:16:29.050 --> 00:16:32.710
I'd like to introduce Julio González,
a senior software engineer

00:16:32.810 --> 00:16:33.640
in the type group.

00:16:33.640 --> 00:16:36.620
He will go into the programming
interfaces of ATS and

00:16:36.620 --> 00:16:39.040
Font Manager on Mac OS X.

00:16:54.630 --> 00:16:58.290
Thank you, Nathan.

00:16:58.290 --> 00:17:01.980
I'll be talking today about basically
the APIs that are available to

00:17:01.980 --> 00:17:07.500
you for font management and some
of the issues related to OS X.

00:17:07.540 --> 00:17:12.260
I'll start with the API sets,
some concepts, tasks,

00:17:12.540 --> 00:17:17.370
especially from the point of view or
from the angle of all the questions we've

00:17:17.370 --> 00:17:22.100
received as people have been bringing
up their applications to run OS X.

00:17:22.100 --> 00:17:25.260
And finally,
I will touch up on some of the

00:17:25.260 --> 00:17:30.050
performance issues that might bite you,
especially if you're

00:17:30.060 --> 00:17:32.100
coming from Mac OS 9.

00:17:33.600 --> 00:17:40.740
Before I get into everything,
while I was writing up this presentation,

00:17:40.780 --> 00:17:42.580
I just decided,
let me take a look at what

00:17:42.580 --> 00:17:44.090
font management used to be.

00:17:44.210 --> 00:17:48.860
And I opened up inside Mac, Volume 1,
and that's what I came up with.

00:17:48.970 --> 00:17:51.290
There were seven simple APIs.

00:17:51.430 --> 00:17:53.740
Boy, do I miss those days.

00:17:53.810 --> 00:17:56.290
A lot less work,
but we've come a long way,

00:17:56.660 --> 00:17:58.230
especially with 10.

00:17:58.450 --> 00:18:02.290
So, let's get into it now.

00:18:02.730 --> 00:18:07.250
One of the issues or things
that presented some confusion as

00:18:07.360 --> 00:18:11.960
we introduced Mac OS X is that
there are two set of APIs that

00:18:11.960 --> 00:18:14.310
you can use for font management.

00:18:14.630 --> 00:18:18.350
The first one being the Font Management,
the extended Font Management set

00:18:18.350 --> 00:18:20.640
of APIs that are present on 9.

00:18:20.660 --> 00:18:24.400
They're also available to you
or we export it by CarbonLib and

00:18:24.400 --> 00:18:26.420
also of course available in 10.

00:18:26.450 --> 00:18:33.100
But then there's a new set of
APIs that some of you have seen

00:18:33.140 --> 00:18:35.020
that are part of the ATS framework.

00:18:35.050 --> 00:18:39.160
It's the header is ATSfont.h.

00:18:39.220 --> 00:18:41.190
And I want to make mention of this.

00:18:41.410 --> 00:18:44.850
This is a new set of APIs that
we've created and are only

00:18:44.850 --> 00:18:47.100
available under Mac OS X.

00:18:47.130 --> 00:18:51.920
We have no plans at this point to take
that back to CarbonLib or Mac OS 9.

00:18:51.960 --> 00:18:56.700
The intent of this API was to fill
in some of the gaps that were created

00:18:56.900 --> 00:19:04.070
as we moved to Mac OS X and try to
address some of the system differences.

00:19:05.140 --> 00:19:12.780
Moreover, there are opportunities here in
this new set of APIs to address some

00:19:12.780 --> 00:19:18.100
features that we can no longer address
under the Font Management set of APIs.

00:19:18.130 --> 00:19:22.250
So once again,
this is only available on Mac OS X.

00:19:24.500 --> 00:19:29.680
So, let's get started with some
of the programming concepts.

00:19:29.750 --> 00:19:31.880
First one being the
font family reference.

00:19:31.940 --> 00:19:33.680
Hopefully most of you are aware of that.

00:19:33.690 --> 00:19:37.580
It's basically an opaque reference
to a collection of fonts that share

00:19:37.580 --> 00:19:39.940
the same design characteristics.

00:19:39.950 --> 00:19:41.680
Then there are font references.

00:19:41.700 --> 00:19:45.650
Basically these are opaque
references to specific strike or

00:19:45.770 --> 00:19:48.740
specific font in that font family.

00:19:48.750 --> 00:19:50.460
Then there are containers.

00:19:50.500 --> 00:19:57.260
Containers are opaque references to
where the data for the font resides.

00:19:57.310 --> 00:20:01.580
This could get a little ambiguous
as we now support different

00:20:01.710 --> 00:20:03.700
file formats for the fonts.

00:20:03.830 --> 00:20:06.170
So where does the data really live?

00:20:06.300 --> 00:20:11.880
We like to keep that as much of it hidden
from you as to prevent some confusion.

00:20:11.880 --> 00:20:14.460
This is something, for example,
that we'll try to address

00:20:14.990 --> 00:20:18.410
in the new set of APIs.

00:20:18.680 --> 00:20:21.720
Finally,
there's the concept of generation.

00:20:21.760 --> 00:20:27.400
As we moved away in Mac OS X from
using the Resource Manager to

00:20:27.400 --> 00:20:34.980
keep track of all our font data,
we created our own font database.

00:20:34.980 --> 00:20:34.980
In fact, this is also present in 9.

00:20:36.110 --> 00:20:41.150
So, in order to keep track of when
the data change or when fonts

00:20:41.150 --> 00:20:43.940
were added or got deleted,
we have a generation,

00:20:43.990 --> 00:20:46.120
a generation seed that
we can keep track of.

00:20:46.220 --> 00:20:48.220
And there are APIs where
you can get the seed.

00:20:48.220 --> 00:20:51.420
So this is how you can tell when
something has changed in the database.

00:20:51.420 --> 00:20:54.460
So, yes, we know you still have to pull.

00:20:54.460 --> 00:20:57.770
Notification hopefully
will be on the way.

00:21:00.290 --> 00:21:02.360
Okay, the next one is the data types.

00:21:02.410 --> 00:21:06.130
This has definitely caused some
grief for some of the developers

00:21:06.130 --> 00:21:11.070
out there and we'd like to take
some time now to clarify this.

00:21:11.280 --> 00:21:14.400
Basically,
you have data types for specifying font

00:21:14.400 --> 00:21:16.860
references and font family references.

00:21:16.950 --> 00:21:21.190
And for the font references,
we have the FM font and the

00:21:21.280 --> 00:21:24.570
ATSU font ID and the ATS font ref.

00:21:25.020 --> 00:21:28.780
FM Font and ATSU Font ID are
basically the same thing and

00:21:28.780 --> 00:21:30.900
can be used interchangeably.

00:21:31.100 --> 00:21:37.060
However, ATS font refs are not the same,
even though at this moment they are

00:21:37.060 --> 00:21:39.720
the same and you can get away with it,
but they are not intended

00:21:39.720 --> 00:21:40.890
to be the same thing.

00:21:40.980 --> 00:21:45.310
If you use them interchangeably,
you will surely run into trouble.

00:21:45.750 --> 00:21:49.640
Same thing goes for the FNFont
family and ATSFontFamilyRef.

00:21:49.640 --> 00:21:52.730
Here it's a little bit more
obvious as the FNFontFamily is

00:21:52.950 --> 00:21:56.640
the usual signed 16-bit number,
basically the resource ID,

00:21:56.640 --> 00:22:02.680
whereas the ATSFontFamilyRef
is an opaque 32-bit data type.

00:22:02.770 --> 00:22:07.030
Once again,
they cannot be used interchangeably.

00:22:09.440 --> 00:22:14.500
So next we'll move into some of the
programming tasks that I'd like to cover.

00:22:14.500 --> 00:22:16.420
And again,
these are tasks where people have

00:22:16.470 --> 00:22:20.040
been having troubles or questions
as they've come up to OS X.

00:22:20.170 --> 00:22:24.480
Storing font references,
data access especially, enumeration,

00:22:24.550 --> 00:22:27.660
that is how to find out what
fonts are installed in the system,

00:22:27.750 --> 00:22:30.600
conversion compatibility,
how to go about activating

00:22:30.600 --> 00:22:34.550
fonts and deactivating them,
and finally how to go about

00:22:34.640 --> 00:22:37.070
selecting the fonts through the UI.

00:22:38.400 --> 00:22:39.640
Storing font references.

00:22:39.650 --> 00:22:42.530
We get asked this
question year after year.

00:22:42.570 --> 00:22:45.840
What is Apple's recommendation
to store font references?

00:22:45.840 --> 00:22:48.360
Well, we're still at the same stage.

00:22:48.360 --> 00:22:51.920
We have no strong recommendation
on what to do about it,

00:22:51.920 --> 00:22:56.240
but let's examine what people have done
in the past and some of the caveats here.

00:22:56.280 --> 00:23:02.460
Some applications have gone in and stored
the font family ID as a font reference.

00:23:02.460 --> 00:23:08.000
That worked mostly fine on 9S
confined to one particular system.

00:23:08.010 --> 00:23:13.400
But on 10, that could break even quicker.

00:23:13.410 --> 00:23:18.140
Reason being, as Nathan mentioned before,
we no longer modify font files as we

00:23:18.140 --> 00:23:20.640
install the fonts into the system.

00:23:20.670 --> 00:23:23.950
As we used to do in 9,
if we found that there was

00:23:24.060 --> 00:23:28.210
a resource ID conflict,
we would go ahead and modify the font

00:23:28.330 --> 00:23:31.480
or the suitcase before it got placed in.

00:23:31.680 --> 00:23:36.980
On 10, we no longer modify the files
and what we do is we do create

00:23:36.980 --> 00:23:42.250
a synthetic resource ID entry,
if you will, a font family entry.

00:23:42.260 --> 00:23:46.080
So depending on what fonts you
install or you install new fonts,

00:23:46.200 --> 00:23:48.320
this ID is no longer guaranteed.

00:23:48.320 --> 00:23:50.910
So it's a really,
really bad idea to store a

00:23:50.910 --> 00:23:52.930
font family ID as a reference.

00:23:53.360 --> 00:23:59.730
So you can still do it if it's applicable
or enough for your application,

00:23:59.800 --> 00:24:02.810
store the font name as a reference.

00:24:02.840 --> 00:24:07.590
But better suggestions, for example,
the Quartz engine stores

00:24:07.590 --> 00:24:09.370
PostScript's names.

00:24:09.380 --> 00:24:14.540
At SUI, or sorry, not at SUI, but MLTE,
it stores a combination of font names.

00:24:14.540 --> 00:24:18.040
You can get creative and pick
up a different set of names,

00:24:18.040 --> 00:24:21.050
store them all, and then as you open
the document later on,

00:24:21.050 --> 00:24:22.500
try to match on the font name.

00:24:23.220 --> 00:24:26.440
However,
as far as the API sets that we provide,

00:24:26.440 --> 00:24:29.820
the best way still to
store a font reference,

00:24:29.820 --> 00:24:32.910
if you want to be guaranteed of the
font that you stored as the same

00:24:32.910 --> 00:24:36.510
font that you're going to be using,
is to use a font sync reference.

00:24:39.500 --> 00:24:42.600
Okay, next point is data access.

00:24:42.660 --> 00:24:47.560
Let's examine what we do typically
online regarding font data access.

00:24:47.680 --> 00:24:51.680
Typically we use heavily
the resource manager to get

00:24:51.680 --> 00:24:53.990
at the data that we needed.

00:24:54.160 --> 00:24:57.570
With 10,
we moved completely away from relying

00:24:57.570 --> 00:25:00.940
on the Resource Manager to get our data.

00:25:01.070 --> 00:25:03.260
So this is a big issue now.

00:25:03.290 --> 00:25:05.800
The same goes with low memory globals.

00:25:05.840 --> 00:25:07.050
On 9, they were truly globals.

00:25:07.170 --> 00:25:09.570
On 10, they were per application,
per context.

00:25:09.670 --> 00:25:11.000
Not that you care that much.

00:25:11.120 --> 00:25:13.460
But there are some caveats
about low memory globals.

00:25:13.490 --> 00:25:19.500
As we stepped away from using the
Resource Manager to keep our data,

00:25:19.800 --> 00:25:23.510
Some of the low memory globals
that we have store data references

00:25:23.610 --> 00:25:26.140
which were resource handles.

00:25:26.140 --> 00:25:29.650
So if you were to access those
low memory globals and expect

00:25:29.800 --> 00:25:35.020
to see a resource handle there,
you'll be up for a surprise.

00:25:35.020 --> 00:25:37.900
Whenever possible,
we store nulls in there to sort

00:25:37.900 --> 00:25:42.510
of warn you that this reference
is no longer applicable.

00:25:42.870 --> 00:25:47.550
Another thing was that on 9,
any font file or any access

00:25:47.680 --> 00:25:49.900
to a font that you had,
you were guaranteed that

00:25:50.010 --> 00:25:51.520
the font file was open.

00:25:51.560 --> 00:25:52.760
Not so in 10.

00:25:52.900 --> 00:25:56.800
Even though through enumeration
you can get at the font,

00:25:56.980 --> 00:25:58.740
the font file might not be open.

00:25:59.880 --> 00:26:03.880
So,
what is the recommended way for you to

00:26:04.060 --> 00:26:07.800
move on and get at the data on the font?

00:26:07.800 --> 00:26:10.350
It's to use some of the accesses
that we've provided in the

00:26:10.450 --> 00:26:11.800
font management set of APIs.

00:26:11.800 --> 00:26:15.800
For example, the FMGit Font Table,
FMGit Font Table Directory,

00:26:15.800 --> 00:26:18.800
FMGit Font Container,
and there are others.

00:26:18.800 --> 00:26:24.560
Here's a preview of some of the data
accesses that APIs that we provide

00:26:24.770 --> 00:26:28.800
in the ATS font set of APIs that
might be useful to you at this stage.

00:26:29.800 --> 00:26:31.940
For example,
the ATS font Git Postscript Name,

00:26:31.940 --> 00:26:35.130
which will return to you the postscript
name and you don't have to go dig it

00:26:35.130 --> 00:26:36.800
from the font or anything like that.

00:26:36.800 --> 00:26:41.680
And given the right options,
it will also return to you the CID name.

00:26:41.800 --> 00:26:45.870
Also, there's the ATS font Git Horizontal
Metrics and Git Vertical Metrics,

00:26:45.960 --> 00:26:49.690
which will return to you some
metrics information that you might

00:26:49.690 --> 00:26:53.800
have otherwise gathered from the
width tables or FM Swap Font.

00:26:56.260 --> 00:27:00.060
So, now,
what if we don't have the APIs right

00:27:00.680 --> 00:27:03.420
now to get at the data that you want?

00:27:03.420 --> 00:27:06.960
For example, one typical request that
we got from developers was,

00:27:07.010 --> 00:27:08.130
"How do I get at the font?

00:27:08.250 --> 00:27:12.420
I still need to get access to the font
and process the data in my own way." So,

00:27:12.420 --> 00:27:15.800
this is something that we'll have,
hopefully, later in the future in

00:27:15.810 --> 00:27:19.100
the ATS font set of APIs,
but you can do that with the set

00:27:19.100 --> 00:27:21.190
of APIs that we have right now.

00:27:21.320 --> 00:27:24.020
First, presumably,
you're going to be starting from

00:27:24.020 --> 00:27:28.180
a font family reference and also,
hopefully, a Quick Draw style or weight.

00:27:28.200 --> 00:27:32.320
So, from there,
you can call fmgit font from font family

00:27:32.780 --> 00:27:35.190
instance and get a font reference.

00:27:35.540 --> 00:27:39.830
Given the font reference,
you can call fmgit font container,

00:27:39.830 --> 00:27:42.200
which will give you the FS spec.

00:27:42.340 --> 00:27:46.200
And next,
you've got to call open resource fork.

00:27:46.200 --> 00:27:48.200
Again, you've got to call it because
the file might not be open.

00:27:48.200 --> 00:27:50.190
It's not guaranteed to be open.

00:27:50.310 --> 00:27:53.200
That in itself might fail
because it might be a defont,

00:27:53.200 --> 00:27:57.750
so you'll need to call the
appropriate Carbon calls to open

00:27:57.750 --> 00:28:00.200
the data fork resource font.

00:28:00.200 --> 00:28:03.640
Once you do that, you can get the font
family name and from there,

00:28:03.640 --> 00:28:05.970
call get one name resource
to get at the font.

00:28:06.310 --> 00:28:08.040
Notice I used the name.

00:28:08.140 --> 00:28:12.200
We did not use the font family
ID to get at the resource.

00:28:12.200 --> 00:28:17.190
Reason being, the font family ID might
be a synthetic font family,

00:28:17.200 --> 00:28:19.200
so you're not going to be able
to get at the resource that way.

00:28:19.200 --> 00:28:20.330
get at the resource that way.

00:28:20.340 --> 00:28:22.590
So please use the name.

00:28:24.680 --> 00:28:29.370
Okay, the next question is,
how do I find out what fonts

00:28:29.450 --> 00:28:31.500
are installed in the system?

00:28:31.500 --> 00:28:33.850
Before it was very simple,
you could enumerate through

00:28:33.850 --> 00:28:37.120
the Resource Manager and
it'll give you all the fonts.

00:28:37.120 --> 00:28:38.480
Not so under 10.

00:28:38.480 --> 00:28:43.540
So there's a couple of iterator
APIs that are available to you,

00:28:43.680 --> 00:28:50.990
both on the font, FM font set of APIs and
the ATS font set of APIs.

00:28:52.200 --> 00:28:55.540
With this,
there is an issue that developers

00:28:55.540 --> 00:28:59.260
had in reading the documentation
that is up on the web.

00:28:59.350 --> 00:29:04.010
Basically, the documentation stated that
neither one of these iterators

00:29:04.010 --> 00:29:07.740
would return to you all the fonts
that are installed in the system.

00:29:07.820 --> 00:29:12.760
That is mostly true and
it's a little bit confusing.

00:29:12.890 --> 00:29:16.660
Where that statement
comes from is that on 9,

00:29:16.660 --> 00:29:20.840
you can't get all the fonts installed
in the system simply because on 9,

00:29:21.030 --> 00:29:23.300
we do not support data fork fonts.

00:29:23.380 --> 00:29:26.320
And our conflict resolution
and duplicate resolution is

00:29:26.320 --> 00:29:28.100
not as strong as it is on 10.

00:29:28.250 --> 00:29:30.880
However, on 10,
you can get all the fonts that

00:29:30.940 --> 00:29:32.640
are installed in the system.

00:29:32.710 --> 00:29:37.090
If you call a font reference iterator,
you get all the outline fonts only.

00:29:37.230 --> 00:29:39.540
You will not get any of the bitmap fonts.

00:29:39.600 --> 00:29:41.510
Basically,
because if you try to use a font

00:29:41.510 --> 00:29:45.190
reference in a bitmap font in some
of the APIs that we have there,

00:29:45.190 --> 00:29:46.680
you basically get an error.

00:29:46.720 --> 00:29:51.020
There's no sense in getting a
table for a bitmap-only font,

00:29:51.020 --> 00:29:52.280
for example.

00:29:53.400 --> 00:29:56.820
However,
using the font family iterators along

00:29:56.820 --> 00:30:00.770
with the font family instance iterators,
you'll be able to get at every

00:30:00.770 --> 00:30:04.010
single font and font strike
that is installed on the system.

00:30:04.010 --> 00:30:07.540
Whether it's a data fork font,
a bitmap font, an outline font, whatever.

00:30:07.580 --> 00:30:12.170
You'll be able to get at every single
one of the fonts that are installed.

00:30:13.280 --> 00:30:16.440
One nice thing about these
iterators is the filters.

00:30:16.500 --> 00:30:18.730
There's some set of
filters that you can use.

00:30:18.850 --> 00:30:22.700
We provide some standard ones
such as the technology filter.

00:30:22.760 --> 00:30:26.040
And you can tell it,
"Please give me all the True Tribe fonts

00:30:26.040 --> 00:30:30.070
or all the Type 1 fonts that are
installed." The container filter,

00:30:30.070 --> 00:30:33.780
so given a container reference that
you might have obtained elsewhere,

00:30:33.890 --> 00:30:37.500
give me all the fonts or font families
that belong to this container.

00:30:37.580 --> 00:30:39.940
Generation,
which you might find useful if you're

00:30:40.050 --> 00:30:44.210
keeping track of the generation to
let you know what fonts got installed,

00:30:44.420 --> 00:30:46.100
just got installed on the system.

00:30:46.180 --> 00:30:50.820
And also we provide you with some
callbacks that you can use to

00:30:50.820 --> 00:30:53.580
filter the fonts as you go along.

00:30:54.720 --> 00:31:00.520
So here's some example on how to get
every single one of the strikes on 10.

00:31:00.520 --> 00:31:04.180
You basically first call
fmcreate font family iterator,

00:31:04.180 --> 00:31:07.660
which will return an
iterator cookie to you.

00:31:07.660 --> 00:31:10.420
You use this cookie to
call fmgetnext font family,

00:31:10.420 --> 00:31:15.050
and it just basically gives you
every font family from that point on.

00:31:15.140 --> 00:31:17.450
Once you have the font family,
you can create a font

00:31:17.450 --> 00:31:18.940
family instance iterator.

00:31:19.070 --> 00:31:22.370
This iterator will return to
you each one of the weights

00:31:22.750 --> 00:31:25.990
that are part of this family,
along with any duplicates

00:31:26.240 --> 00:31:28.040
that we might have resolved.

00:31:28.050 --> 00:31:30.390
So you'll get every single
font that got installed.

00:31:30.400 --> 00:31:33.600
At the end,
you just dispose the iterators.

00:31:33.600 --> 00:31:39.760
One thing to note that in the while loop,
we check for the errors here.

00:31:39.760 --> 00:31:42.270
One of the errors that you
might get as a valid error is

00:31:42.270 --> 00:31:43.820
that the iteration is done.

00:31:43.820 --> 00:31:46.710
But another interesting error
that you can get is that the

00:31:46.710 --> 00:31:48.640
font object database has changed.

00:31:48.640 --> 00:31:52.150
So as you're iterating,
you can get note of this error and decide

00:31:52.570 --> 00:31:56.600
whether you want to make sure that the
database has changed and just proceed.

00:31:56.600 --> 00:31:57.590
Or you can reset.

00:31:57.600 --> 00:32:01.100
There's a reset call that you
can call and reset the iterator

00:32:01.100 --> 00:32:02.680
and start all over again.

00:32:06.380 --> 00:32:07.620
Conversion APIs.

00:32:07.670 --> 00:32:11.370
At the moment,
we only have conversion APIs that

00:32:11.450 --> 00:32:15.410
can take you all within the
FN Font Management set of

00:32:15.410 --> 00:32:20.010
APIs from a font reference
to a font family reference,

00:32:20.080 --> 00:32:21.920
a font family instance reference.

00:32:21.980 --> 00:32:25.300
There is no way at this
point in time to go from

00:32:25.400 --> 00:32:30.540
An FN font ref to an ATS font ref
and the same goes for the ATS font

00:32:30.540 --> 00:32:34.330
family ref and FN font family ref.

00:32:34.410 --> 00:32:36.490
That will be forthcoming.

00:32:38.510 --> 00:32:41.220
Compatibility,
we have that in the layer of the

00:32:41.220 --> 00:32:46.440
ATS font and it's basically a meager
attempt actually to just get some

00:32:47.560 --> 00:32:49.240
compatibility with the Quick Draw space.

00:32:49.300 --> 00:32:53.590
And there will be more in this
arena too as we try to make it

00:32:53.590 --> 00:32:58.880
easier for you to transition from
the FM font management set of APIs,

00:32:58.880 --> 00:33:01.440
which is for the moment the
recommended way to do things,

00:33:01.500 --> 00:33:06.540
to the ATS font set of APIs,
which will be in the future the

00:33:06.630 --> 00:33:10.300
right way to carry on if you're
developing exclusively for OS X.

00:33:10.300 --> 00:33:14.520
Another interesting API here is the
ATS font get file specification,

00:33:14.520 --> 00:33:17.420
which has sort of a counterpart
on the FM side of things.

00:33:17.420 --> 00:33:19.200
I think it's FM get font container.

00:33:19.200 --> 00:33:23.700
The ATS font get file specification
takes a font reference and in

00:33:23.700 --> 00:33:27.380
general font references are
references to outline data.

00:33:27.500 --> 00:33:31.030
So this will get you directly to
the outline data as opposed to say

00:33:31.480 --> 00:33:34.920
in an LWFN font it won't point back
to you at where the suitcase is.

00:33:34.980 --> 00:33:36.240
Thank you.

00:33:37.710 --> 00:33:40.640
Okay,
now how do I go about programmatically

00:33:40.640 --> 00:33:43.300
activating and deactivating fonts?

00:33:43.400 --> 00:33:45.490
Some of these APIs have
been available in 9,

00:33:45.500 --> 00:33:48.500
the FM Activate Fonts
and FM Deactivate Fonts.

00:33:48.560 --> 00:33:51.900
You can activate a single file
or a whole directory of files.

00:33:51.980 --> 00:33:57.570
Please note that if you pass in
a directory to get activated,

00:33:57.570 --> 00:34:00.340
we only activate the files
that are in that space,

00:34:00.350 --> 00:34:01.800
in that directory.

00:34:01.800 --> 00:34:06.710
We don't go and recursively activate
all the fonts in the directories.

00:34:07.240 --> 00:34:10.840
In the ATS font side of things,
there's a couple of nice ways to

00:34:10.840 --> 00:34:14.100
activate and deactivate font files.

00:34:14.480 --> 00:34:18.520
And it has a nice feature,
the ATS font activate from

00:34:18.620 --> 00:34:22.100
file specification that
you can specify a context.

00:34:22.100 --> 00:34:25.100
So you can,
like Nathan showed in his demo,

00:34:25.100 --> 00:34:27.370
if you make this call,
you can specify a local context so

00:34:27.440 --> 00:34:33.100
that that font is only visible to
that running process or application.

00:34:33.230 --> 00:34:36.200
Lastly, there's the ATS font
activate from memory,

00:34:36.240 --> 00:34:39.100
which given a stream and if you
give us some hints about the stream,

00:34:39.100 --> 00:34:42.100
we can activate the font for you.

00:34:42.100 --> 00:34:49.010
This is heavily used by the Quartz
engine to render embedded PDF fonts.

00:34:51.150 --> 00:34:54.960
So here's the demo and this is
basically some source code for

00:34:55.230 --> 00:34:58.000
what Nathan showed in his demo.

00:34:58.000 --> 00:35:02.270
Say you were an application,
a 9 application that is quickly coming

00:35:02.270 --> 00:35:06.000
up to 10 and you still have your
fonts as part of your resource fork.

00:35:06.000 --> 00:35:10.710
Well, in 9,
as the resource fork for the application

00:35:10.710 --> 00:35:16.120
opened up as the application launched,
the font immediately became part of the

00:35:16.130 --> 00:35:22.670
resource chain and it became available or
visible for the Font Manager and actually

00:35:22.780 --> 00:35:25.230
to all applications that were running.

00:35:25.610 --> 00:35:30.460
In Tencent, we no longer rely on
the Resource Manager.

00:35:30.460 --> 00:35:35.500
If you wish for the font to be activated,
you must programmatically do so.

00:35:35.720 --> 00:35:39.890
One way to do this is you call the
Process Manager APIs and whatever else

00:35:39.890 --> 00:35:42.440
to get at what is the file spec for
the currently running application,

00:35:42.500 --> 00:35:43.500
your application.

00:35:43.500 --> 00:35:46.530
Once you have the FS spec,
you can call this API,

00:35:46.530 --> 00:35:49.500
ATS Font Activate from
File Specification.

00:35:49.500 --> 00:35:52.500
Pass that off the application file spec.

00:35:52.500 --> 00:35:53.500
You can specify the context.

00:35:53.500 --> 00:35:55.500
If you for some reason
wanted it to be global,

00:35:55.500 --> 00:35:58.520
you can specify that there,
but preferably or most of

00:35:58.570 --> 00:35:59.500
the time it will be local.

00:35:59.500 --> 00:36:03.500
And it will return to you an
opaque container reference.

00:36:03.500 --> 00:36:07.400
Lastly, if you care to do so,
you can find what fonts are part

00:36:07.400 --> 00:36:11.190
of this container by calling
ATS Find Font from Container.

00:36:11.470 --> 00:36:15.890
No, the preferred way actually to,
as Nathan said,

00:36:15.920 --> 00:36:19.140
to ship fonts for your application
would be to just place a directory

00:36:19.720 --> 00:36:23.790
full of fonts in your application
bundle instead of just having it

00:36:23.790 --> 00:36:27.130
be part of your resource work.

00:36:27.590 --> 00:36:29.570
It's just a little cleaner.

00:36:31.050 --> 00:36:31.860
Now, selection.

00:36:31.880 --> 00:36:34.850
This is another question that
we've been getting from our

00:36:35.080 --> 00:36:39.140
developers on the Carbon side,
is how do you go about selecting fonts?

00:36:39.140 --> 00:36:43.060
So, the answer is, as Nathan showed,
at least from the Carbon side of things,

00:36:43.060 --> 00:36:46.940
is that you have to still use and
depend on the Carbon set of APIs,

00:36:47.160 --> 00:36:51.270
which means that you don't have access
to the font panel that Cocoa has for you.

00:36:51.590 --> 00:36:55.210
That will be forthcoming too,
and it's a high priority.

00:36:55.970 --> 00:36:59.850
So how do you go about having
a font menu intent since we no

00:36:59.850 --> 00:37:02.190
longer use a Resource Manager?

00:37:02.330 --> 00:37:05.900
Well, you can still call a pen rest menu
and it will do the right thing.

00:37:05.900 --> 00:37:10.600
It will create the standard flat
font menu that you all know.

00:37:10.600 --> 00:37:15.420
But it basically ends up calling create
standard font menu to do its job.

00:37:15.420 --> 00:37:18.580
And there are a couple of new
APIs that go along with this that

00:37:18.660 --> 00:37:21.330
I'll talk to you about in a minute.

00:37:21.720 --> 00:37:25.110
So here's the
Create Standard Font menu call.

00:37:25.170 --> 00:37:27.300
Basically you get your menu handle.

00:37:27.360 --> 00:37:31.300
And as Nathan showed in his demo,
you have two options.

00:37:31.340 --> 00:37:32.940
Excuse me.

00:37:32.940 --> 00:37:39.170
You can create a flat representation
of the font or a hierarchical,

00:37:39.170 --> 00:37:42.790
more compact representation of the font,
which basically takes a font

00:37:42.960 --> 00:37:47.700
family and then appends a submenu
with all the criteria styles

00:37:47.780 --> 00:37:49.670
that are associated with it.

00:37:49.850 --> 00:37:52.700
So here in the call, it's very simple.

00:37:52.700 --> 00:37:54.900
In this one,
you specify the hierarchical font menu,

00:37:54.900 --> 00:38:00.500
and it returns to you a hierarchical font
menu count cookie that you'll need later.

00:38:01.970 --> 00:38:06.260
So, what happens when the user
clicks on the font menu?

00:38:06.290 --> 00:38:11.780
So, if you had just your plain
old flat space font menu,

00:38:11.780 --> 00:38:16.380
you called menu select and get the
menu item and the name and then

00:38:16.440 --> 00:38:18.840
from there go to the font family.

00:38:18.850 --> 00:38:23.110
A better way to do this,
which takes advantage of

00:38:23.150 --> 00:38:27.900
some of the features of TEN,
is to, before you call menu select,

00:38:27.900 --> 00:38:30.840
you call update standard font menu.

00:38:30.840 --> 00:38:34.250
What this does for you,
if you created the font using the

00:38:34.250 --> 00:38:38.010
create API that I just showed you,
is that it will keep track

00:38:38.010 --> 00:38:39.820
of the generation for you.

00:38:39.970 --> 00:38:43.140
So, if you call this call
before the menu select,

00:38:43.140 --> 00:38:47.060
it will find out if the database,
the font object database

00:38:47.200 --> 00:38:51.080
has changed and if so,
it will recreate the font menu and

00:38:51.080 --> 00:38:53.410
Nathan showed that in his demo.

00:38:53.790 --> 00:38:57.440
So once you have that,
once you call menu select,

00:38:57.630 --> 00:39:01.590
you get the menu ID and from
there you can call get font

00:39:01.710 --> 00:39:04.850
family from menu selection,
which in the flat menu space will

00:39:04.870 --> 00:39:06.620
just return to you the font family.

00:39:06.620 --> 00:39:09.380
But in the case of the hierarchical menu,
it will also give you the

00:39:09.380 --> 00:39:10.610
style that the user picked.

00:39:15.540 --> 00:39:19.350
Lastly, I want to talk a little
bit about performance,

00:39:19.490 --> 00:39:22.740
some of the issues that you
might or might not be aware of

00:39:22.740 --> 00:39:25.930
as you start developing for Tent.

00:39:26.640 --> 00:39:30.000
The history here is that we moved to 10.

00:39:30.000 --> 00:39:33.490
The major issue was that we don't have
the single memory space that we had on 9.

00:39:33.500 --> 00:39:38.660
So font data is quite extensive and
we had to come up with a way to share

00:39:38.660 --> 00:39:42.500
this data across all the ATS clients.

00:39:42.500 --> 00:39:45.500
So we ended up having a server.

00:39:45.790 --> 00:39:50.750
What this means to the client is
that some of the APIs you call end

00:39:50.750 --> 00:39:53.760
up sending messages to the server,
whereas before on 9

00:39:53.760 --> 00:39:56.500
there was no such thing,
it was quite fast.

00:39:56.500 --> 00:40:01.250
So it is something that you might need
to pay attention to if you start to

00:40:01.270 --> 00:40:06.500
see that some things that were faster,
seem faster on 9 and not so on 10.

00:40:06.500 --> 00:40:10.210
You can start using some of the
tools available on 10 such as

00:40:10.210 --> 00:40:17.120
Stop or Sample to find out what
the activity is to the ATS server.

00:40:17.540 --> 00:40:24.310
Another area of concern
is font file on the OS X.

00:40:24.510 --> 00:40:28.160
On Mac OS X, every single font file that
was available to you was open,

00:40:28.160 --> 00:40:28.720
basically.

00:40:28.810 --> 00:40:31.120
On X,
we can't afford to do that since every

00:40:31.120 --> 00:40:34.600
process lives in its own little world,
so we manage this.

00:40:34.770 --> 00:40:38.310
So, through font file iteration,
it is possible that you will iterate

00:40:38.380 --> 00:40:39.800
through every single font file.

00:40:39.890 --> 00:40:43.200
Say if you wanted to
create your standard,

00:40:43.250 --> 00:40:47.300
sorry, not your standard, but you know,
a special font menu, some nifty font menu

00:40:47.300 --> 00:40:49.840
that we do not provide,
and you want to iterate through

00:40:49.840 --> 00:40:51.060
all the fonts in the system.

00:40:51.150 --> 00:40:53.820
Well,
this will cost messaging to the server.

00:40:53.870 --> 00:40:55.790
Along with that,
it will cost some of the file

00:40:55.790 --> 00:40:59.750
caches that we have to get thrashed,
which is perfectly fine if

00:40:59.750 --> 00:41:03.230
we do not provide what you
need in the APIs that we have.

00:41:03.370 --> 00:41:05.900
However,
what you need to keep in mind is that

00:41:05.900 --> 00:41:11.400
you might want to cache this information
to avoid this sort of iteration.

00:41:11.540 --> 00:41:15.320
Another way is the usage
of the APIs we provide.

00:41:15.450 --> 00:41:18.790
For example,
the activation set of APIs allows you

00:41:18.790 --> 00:41:21.950
to activate a font file or a directory.

00:41:22.060 --> 00:41:25.400
So, it's far more efficient to activate a
directory than if you had some old code

00:41:25.460 --> 00:41:28.620
that had just activated a file at a time,
because that will create

00:41:28.620 --> 00:41:30.780
multiple messages to the server.

00:41:30.920 --> 00:41:36.140
So, one final note is,
please use the APIs that we've provided

00:41:36.140 --> 00:41:40.280
whenever possible and not go to the
low level and dig your own data.

00:41:40.340 --> 00:41:43.950
The reason being is that we
have optimized the APIs for

00:41:43.950 --> 00:41:47.730
messaging to the server,
for keeping the files open.

00:41:47.800 --> 00:41:50.580
Moreover, we have a good set of
caches on the server,

00:41:50.580 --> 00:41:52.480
that makes things easier for us.

00:41:52.660 --> 00:41:56.490
So, please stick to the
APIs whenever you can.

00:41:57.530 --> 00:42:01.560
Now, I'd like to take a moment and invite
Scott Thompson from Macromedia and he'll

00:42:01.560 --> 00:42:06.240
give us a real-life example of what he
had to do to bring up this app under 10,

00:42:06.420 --> 00:42:08.980
especially to do with font management.

00:42:16.430 --> 00:42:18.060
Hope you don't mind my cheat sheet here.

00:42:18.160 --> 00:42:20.720
Let's see if I can figure
out how this magic works.

00:42:20.740 --> 00:42:22.260
Okay, great.

00:42:22.360 --> 00:42:23.970
So, my name is Scott Thompson.

00:42:24.010 --> 00:42:28.110
I'm a senior software alchemist
and the Macintosh technical

00:42:28.230 --> 00:42:29.760
lead for Macromedia Freehand.

00:42:29.780 --> 00:42:31.310
We just recently shipped Freehand 10.

00:42:31.310 --> 00:42:32.800
They showed a demo of it in the keynote.

00:42:32.800 --> 00:42:34.420
I hope you all enjoyed that.

00:42:34.440 --> 00:42:36.650
What I want to do is I want to start
by telling you a little bit about

00:42:36.700 --> 00:42:40.100
what Freehand's text needs are,
and in particular some of the

00:42:40.220 --> 00:42:41.840
font things that we have to do.

00:42:41.870 --> 00:42:44.720
Then I'm going to talk a little bit about
the sort of things that we had to do

00:42:44.720 --> 00:42:49.150
to adopt to the new Font Manager under
CarbonLib and Mac OS X.

00:42:49.160 --> 00:42:55.540
Freehand 10 as a shipping application
is a CFM Carbon application.

00:42:55.540 --> 00:42:58.270
It uses Quick Draw to do its drawing,
despite what you may have seen in

00:42:58.310 --> 00:43:00.420
some of the reviews of Freehand.

00:43:00.420 --> 00:43:03.700
We don't do Quartz yet.

00:43:03.700 --> 00:43:08.500
We began carbonizing Freehand in
July of the year 2000 in earnest.

00:43:08.500 --> 00:43:11.370
We just finished shipping in May.

00:43:11.370 --> 00:43:14.400
So, just to give you an idea
of how long it went.

00:43:14.400 --> 00:43:16.900
When we decided to implement
the Carbon feature,

00:43:16.900 --> 00:43:20.810
we implemented it as a feature,
we set out a big schedule

00:43:20.810 --> 00:43:21.830
at the very beginning.

00:43:21.830 --> 00:43:24.040
We knew that two areas that we
were going to have to do a lot of

00:43:24.040 --> 00:43:27.260
work on were fonts and printing.

00:43:27.340 --> 00:43:29.940
So, we put those at the very
beginning of the schedule,

00:43:29.940 --> 00:43:33.920
thinking that if they ran long,
we could kind of hop out.

00:43:33.920 --> 00:43:36.850
Since printing depended on fonts,
it turns out that font manager

00:43:36.860 --> 00:43:39.900
support turned out to be item
number one on our Carbon schedule.

00:43:39.900 --> 00:43:41.820
Having gone through it,
fonts was also the

00:43:41.830 --> 00:43:41.830
biggest thing that we did.

00:43:41.830 --> 00:43:41.920
It is a very important thing.

00:43:41.920 --> 00:43:46.680
It consumed the most of my time anyway.

00:43:46.680 --> 00:43:49.540
Part of that was because
it was very complicated.

00:43:49.540 --> 00:43:52.840
Freehand's usage of fonts
was very complicated.

00:43:53.420 --> 00:43:55.550
Part of that was because
I know a lot more about fonts

00:43:55.550 --> 00:43:57.800
now than I did when I began.

00:43:57.800 --> 00:43:59.750
What we see on this slide is
a little bit about the text

00:43:59.750 --> 00:44:03.660
handling capabilities of Freehand,
just to give you an idea of what we have.

00:44:03.660 --> 00:44:05.940
I call it a mid-range text
handling capabilities.

00:44:06.040 --> 00:44:08.840
We don't do any real
super-duper advanced typography.

00:44:08.840 --> 00:44:11.900
But we do a little bit more
than your average text editor.

00:44:11.960 --> 00:44:14.580
We do multi-column text.

00:44:14.580 --> 00:44:18.220
We do justification of text, fill,
justifying, left, justifying,

00:44:18.220 --> 00:44:18.320
all that good stuff.

00:44:18.320 --> 00:44:21.940
We allow the user to do custom
kerning and tracking of the text.

00:44:21.940 --> 00:44:27.080
We do text on a path, text in a path,
text flowing around a path,

00:44:27.080 --> 00:44:31.280
meaning that you have an object in there
and the text goes on the outside of it.

00:44:31.280 --> 00:44:33.880
And we do postscript output.

00:44:34.250 --> 00:44:35.170
So where do we begin?

00:44:35.170 --> 00:44:38.280
Well, the first thing that I started
with was the font menu.

00:44:38.280 --> 00:44:43.670
Our font menu was being created by, uh,
append res menu and all that good stuff.

00:44:43.800 --> 00:44:48.580
One of our big goals for Freehand was
to sort of get away from the idea that

00:44:48.580 --> 00:44:52.910
all fonts had to have a resource fork,
in particular a font, because, you know,

00:44:52.910 --> 00:44:56.230
one of the really nice features that
you can do on Mac OS X that a lot

00:44:56.230 --> 00:44:58.940
of our customers are really excited
about is you grab your Windows font,

00:44:58.940 --> 00:45:02.160
drag it over to the Mac OS X machine,
drop it in there, it shows up, it works,

00:45:02.180 --> 00:45:03.020
it's really great.

00:45:03.090 --> 00:45:06.130
So a lot of our code was
geared at understanding that

00:45:06.280 --> 00:45:08.620
fonts always had a font,
always had resources,

00:45:08.640 --> 00:45:10.780
and we had to get away from that.

00:45:10.820 --> 00:45:13.610
Um, so in that vein,
the first thing we did

00:45:13.640 --> 00:45:14.530
was create the font menu.

00:45:14.530 --> 00:45:16.420
It was being done
through append res menu.

00:45:16.470 --> 00:45:19.380
Uh, we had to change that to use
create standard font menu.

00:45:19.410 --> 00:45:21.220
Uh,
we ran into one little interesting thing.

00:45:21.220 --> 00:45:23.980
In that Freehand is a
quick draw application,

00:45:24.010 --> 00:45:26.550
uh,
when we created the hierarchical menu,

00:45:26.550 --> 00:45:30.210
using the hierarchical option, uh,
we found out that it was adding a lot

00:45:30.350 --> 00:45:33.940
of fonts that are available to at SUI,
but are not necessarily

00:45:33.940 --> 00:45:35.170
available through QuickTime.

00:45:35.320 --> 00:45:36.510
So that's something you
want to keep in mind.

00:45:36.550 --> 00:45:38.750
If you want to have the hierarchical
menu inside your quick draw application,

00:45:38.750 --> 00:45:38.900
you can do it,
but you're going to have to

00:45:38.900 --> 00:45:39.110
do it in a different way.

00:45:39.140 --> 00:45:39.140
So, we're going to do that.

00:45:39.210 --> 00:45:43.510
But you're going to have to
use the font iterators to,

00:45:43.510 --> 00:45:46.140
uh, to create your own menu and
all the other good stuff.

00:45:46.890 --> 00:45:49.260
Um,

00:45:50.350 --> 00:45:54.620
Oh my dear, what did I write?

00:45:54.620 --> 00:46:01.120
So in the vein of getting rid of fonts
or getting our reliance on fonts done,

00:46:01.120 --> 00:46:04.000
we had one interesting challenge
and the biggest challenge turned

00:46:04.000 --> 00:46:08.300
out being that we wanted Freehand 10
to continue to support Mac OS 8.6.

00:46:08.300 --> 00:46:11.490
Mac OS 8.6 doesn't have all the
nice font manager routines that you

00:46:11.550 --> 00:46:14.660
have under Mac OS 9 and Mac OS X.

00:46:14.660 --> 00:46:16.490
So we had to do a little
bit of abstraction,

00:46:16.490 --> 00:46:19.310
a little bit of keeping the old code
around so they could still parse

00:46:19.420 --> 00:46:20.780
the fonts and that sort of thing.

00:46:20.780 --> 00:46:23.000
In the end,
it turned out that that wasn't such

00:46:23.000 --> 00:46:26.810
a bad idea because we found some
pitfalls along the way with using the

00:46:26.920 --> 00:46:31.640
font manager routines where there were
differences between the information

00:46:31.640 --> 00:46:35.180
that we got back from the font manager
routines and the information that

00:46:35.330 --> 00:46:37.000
you would pull out of the fonts.

00:46:37.000 --> 00:46:39.580
Some of those things have been taken care
of because we reported them as bugs and

00:46:39.660 --> 00:46:41.220
the Apple engineers fixed them for us.

00:46:41.220 --> 00:46:44.200
So hopefully, you'll never have to see
those sorts of things.

00:46:44.200 --> 00:46:47.070
So this slide talks a little bit
about the kinds of things that

00:46:47.070 --> 00:46:49.440
we used to get out of the font.

00:46:49.440 --> 00:46:50.720
We used to get font names.

00:46:50.720 --> 00:46:53.250
In particular, we were interested in the
PostScript font name because Freehand

00:46:53.320 --> 00:46:55.140
downloads PostScript to the printer.

00:46:55.140 --> 00:46:57.130
We deal a lot with PostScript names.

00:46:57.150 --> 00:46:59.980
In terms of saving our font IDs,
that's what we save usually

00:46:59.980 --> 00:47:02.360
is the PostScript font name.

00:47:02.360 --> 00:47:06.060
We would get glyph widths
and other glyph metrics.

00:47:06.060 --> 00:47:09.860
Some of those things, I had no idea what
they were but by golly,

00:47:09.880 --> 00:47:10.820
I learned.

00:47:10.820 --> 00:47:12.500
We had to get the glyph
re-encoding tables.

00:47:12.560 --> 00:47:14.280
If you're downloading
fonts to the printer,

00:47:14.280 --> 00:47:16.210
you have to know how the
fonts can be re-encoded,

00:47:16.220 --> 00:47:17.740
the Mac encodings and all
that other good stuff.

00:47:17.740 --> 00:47:23.100
We got things like kerning pair
information and other such things.

00:47:23.100 --> 00:47:27.060
We were able to find substitutes
for all of these things in

00:47:27.070 --> 00:47:28.920
the new font manager APIs.

00:47:29.130 --> 00:47:31.600
For 8.6, of course,
we just continued using fonts

00:47:31.600 --> 00:47:34.180
and didn't have a problem.

00:47:34.180 --> 00:47:39.220
Under Mac OS 9, we tended to lean more
towards the FM Font Manager,

00:47:39.310 --> 00:47:43.160
the calls that begin with FM,
and we used some of the

00:47:43.240 --> 00:47:45.400
ATSU font manager routines.

00:47:45.400 --> 00:47:47.930
And then on Mac OS X,
there are actually two cases where

00:47:47.930 --> 00:47:53.280
you had to drop to the ATS framework,
load the framework out from the system.

00:47:53.280 --> 00:47:56.690
One of those was
ATS Find Font Family Resource.

00:47:58.780 --> 00:48:02.440
You'll have to ask Julio
later whether you should use

00:48:02.530 --> 00:48:06.210
ATS Find Font Family Resource or
whether you should actually go through

00:48:06.210 --> 00:48:07.510
the thing that he had on the slide.

00:48:07.580 --> 00:48:09.670
We're probably doing the wrong thing.

00:48:09.680 --> 00:48:14.840
And then we also had another routine
that called ATS Activate Font.

00:48:14.840 --> 00:48:18.560
Freehand has two fonts that it stores
in its resource fork and we had to

00:48:18.560 --> 00:48:23.440
activate those fonts so we had to
load that out of the Carbon bundle,

00:48:23.440 --> 00:48:25.800
or out of the bundle using CFBundle.

00:48:26.110 --> 00:48:29.210
For the Postscript names,
the routines that we found particularly

00:48:29.210 --> 00:48:39.010
helpful was ATSU Find Font Name and
ATSU Find Font Name.

00:48:39.160 --> 00:48:43.970
The ATSU routines give you a lot of
information about how to get names out

00:48:44.260 --> 00:48:48.080
of the font tables and they're really
handy for finding a lot of information.

00:48:48.100 --> 00:48:50.790
For example,
I didn't know that fonts can actually

00:48:50.880 --> 00:48:53.510
contain localized font names,
but you can get those

00:48:53.510 --> 00:48:54.840
using ATSU Find Font Name.

00:48:54.840 --> 00:49:00.120
I want to warn you a little bit about
the routine ATSU Find Font From Name.

00:49:00.240 --> 00:49:04.100
We used
ATSU Find Font From Name initially in

00:49:04.400 --> 00:49:09.050
our first pass to find fonts based on
their postscript name all the time.

00:49:09.080 --> 00:49:12.490
That turned out to be a little bit of
a mistake because that routine doesn't

00:49:12.600 --> 00:49:14.280
perform really well on Mac OS 9.

00:49:14.420 --> 00:49:18.450
I'm led to understand that the
caching schemes on Mac OS 9 and

00:49:18.580 --> 00:49:23.680
Mac OS X are very different and so as
a result it performs fine on Mac OS X,

00:49:23.680 --> 00:49:27.730
but under Mac OS 9 you can get poor
performance out of the routine.

00:49:27.920 --> 00:49:32.780
What we ended up doing was continuing
to rely on the font information,

00:49:32.780 --> 00:49:35.550
trying to find the font
by parsing the font first,

00:49:35.690 --> 00:49:39.140
and if that doesn't work then we
go to ATSU Find Font From Name.

00:49:39.190 --> 00:49:41.380
That worked out really well.

00:49:42.080 --> 00:49:46.480
Glyph widths and other glyph metrics,
I found replacements for

00:49:46.480 --> 00:49:51.900
those in a lot of the updated
Quick Draw font measuring routines.

00:49:52.330 --> 00:49:53.000
Sounds really odd.

00:49:53.000 --> 00:49:55.950
You have to remember freehand
is a really old application.

00:49:56.060 --> 00:50:00.150
A lot of the stuff that we did during our
carbonization was actually modernization,

00:50:00.150 --> 00:50:03.000
bring us up to the new brave new world.

00:50:03.080 --> 00:50:06.900
And so we were relying on some stuff from
the font that could actually be gotten

00:50:06.900 --> 00:50:08.990
from Quick Draw routines from then on.

00:50:09.080 --> 00:50:12.360
Glyph re-encoding tables,
I believe we get those

00:50:12.360 --> 00:50:13.860
from the font as well.

00:50:14.010 --> 00:50:16.940
If there's not a font,
then we just let the printer driver

00:50:16.940 --> 00:50:18.730
handle it and go on with our lives.

00:50:19.050 --> 00:50:23.010
Currenting pair information also,
I believe, comes from the font and

00:50:23.140 --> 00:50:25.580
if the font's not there,
we just skip it.

00:50:25.890 --> 00:50:31.220
The other big change that we made in
Freehand was finding glyph outlines.

00:50:31.220 --> 00:50:34.560
In Freehand you can take a bunch of text,
convert it to paths,

00:50:34.720 --> 00:50:37.800
get the outlines of the fonts,
and then do special effects on them.

00:50:37.800 --> 00:50:41.750
These are the four ways that Freehand 10
can actually use to get font outlines.

00:50:41.790 --> 00:50:46.800
We have our own PostScript Type 1
font parser that's inside of Freehand.

00:50:46.800 --> 00:50:48.800
We have our own TrueType font parser.

00:50:48.800 --> 00:50:51.800
We also talked to the
Adobe Type Manager backend.

00:50:51.800 --> 00:50:53.800
For those of you that are going
through Adobe Type Manager,

00:50:53.800 --> 00:50:57.200
I don't know if Adobe's actually
released sort of a carbonized glue

00:50:57.200 --> 00:50:59.930
code for their Adobe Type Manager,
but I was able to load some

00:50:59.960 --> 00:51:02.870
routines from Interface Live and
actually continue to use the

00:51:02.870 --> 00:51:04.730
Adobe Type Manager backend online.

00:51:04.800 --> 00:51:07.710
And now we use the Atsui
low-level programming interface.

00:51:07.830 --> 00:51:10.800
The Atsui stuff is actually really,
really nice.

00:51:10.800 --> 00:51:12.800
It's really handy.

00:51:12.800 --> 00:51:16.730
You pass it off a set of glyphs
that you want the outlines for,

00:51:16.960 --> 00:51:17.800
give it a set of callbacks.

00:51:17.800 --> 00:51:18.780
It comes back.

00:51:18.890 --> 00:51:23.260
and iterates two things.

00:51:23.600 --> 00:51:26.480
In closing,
I'd like to talk about one pitfall

00:51:26.560 --> 00:51:29.880
that I ran into that you'll probably
want to start thinking about.

00:51:30.040 --> 00:51:32.930
Number one,
you'll notice that a lot of the

00:51:33.160 --> 00:51:39.680
higher-end text formatting options that
Freehand has can now be handled by Atsui.

00:51:39.840 --> 00:51:42.710
So if you have the choice
between using your own font

00:51:42.720 --> 00:51:46.570
layout engine or using Atsui,
my recommendation would be try and use

00:51:46.570 --> 00:51:50.270
Atsui first because it's going to save
us a whole lot of trouble in the future,

00:51:50.370 --> 00:51:51.000
I think.

00:51:51.140 --> 00:51:54.000
Another one that I would
encourage anyone that's writing

00:51:54.010 --> 00:51:57.580
an application that uses fonts,
go ahead and call the folks at

00:51:57.720 --> 00:52:01.490
Adobe and buy some OpenType fonts
and start testing with them now.

00:52:01.500 --> 00:52:04.400
OpenType fonts don't have resource forks.

00:52:04.540 --> 00:52:05.690
They have special things.

00:52:05.790 --> 00:52:08.100
They don't tend to go through
TrueType parsers the way you might

00:52:08.260 --> 00:52:11.000
think because sometimes the found
outlines aren't TrueType outlines.

00:52:11.000 --> 00:52:14.200
They're CFF or
PostScript Type 1 outlines.

00:52:14.330 --> 00:52:17.400
And Freehand was a challenge.

00:52:17.400 --> 00:52:20.720
It was a lot of fun and I hope that the
information I provided has been useful.

00:52:20.850 --> 00:52:20.900
Okay.

00:52:21.000 --> 00:52:21.840
Okay?

00:52:21.840 --> 00:52:23.530
Thank you.

00:52:35.730 --> 00:52:39.100
Thank you Scott, that was great.

00:52:39.210 --> 00:52:43.830
Just to wrap it up in summary,
Scott basically summarized

00:52:43.920 --> 00:52:46.090
it all for us here.

00:52:46.330 --> 00:52:50.090
As you go on and bring
your applications up to 10,

00:52:50.210 --> 00:52:55.780
the first thing to do is remove as
much Resource Manager dependencies

00:52:55.780 --> 00:52:58.230
as you have in your application.

00:52:58.470 --> 00:53:02.440
Please try to remember just
like Scott did in his app,

00:53:02.440 --> 00:53:05.940
not all fonts that are going
to be present are going

00:53:05.940 --> 00:53:07.640
to have a font in there.

00:53:07.640 --> 00:53:11.300
They're not going to even
have a resource fork in them.

00:53:11.300 --> 00:53:15.300
So try to move as much away from
using the Resource Manager to

00:53:15.300 --> 00:53:17.210
get your data as possible.

00:53:17.370 --> 00:53:21.280
And we'll be giving you some help
with that in the future also.

00:53:21.300 --> 00:53:25.330
Then, as far as the API sets
that I talked about,

00:53:25.630 --> 00:53:29.760
the same as Scott did,
the FM set of APIs are available

00:53:29.760 --> 00:53:32.300
to you under 9 and Carbon Live.

00:53:32.300 --> 00:53:36.750
Whereas the ATS font set of
APIs are just available for 10 and

00:53:36.860 --> 00:53:39.300
it's basically work in progress.

00:53:39.300 --> 00:53:43.210
That's where we want to be in the future,
but we're not quite there yet.

00:53:43.360 --> 00:53:48.370
So concentrate on using the FM font
set of APIs and we're pretty certain

00:53:48.370 --> 00:53:51.300
that you can get most of what you need.

00:53:51.300 --> 00:53:55.610
In some cases,
you might have to dip down and

00:53:55.620 --> 00:53:59.900
go to the ATS font API set,
but hopefully that won't

00:53:59.900 --> 00:54:01.300
have to be too much.

00:54:03.630 --> 00:54:09.620
So here are some sessions that
have gone on that are related to,

00:54:09.650 --> 00:54:11.400
somewhat related to font management.

00:54:11.400 --> 00:54:13.300
There was the text session yesterday.

00:54:13.360 --> 00:54:15.570
I don't know if all of
you were able to attend,

00:54:16.080 --> 00:54:20.680
but you can find that session
on video and you will,

00:54:21.520 --> 00:54:25.500
especially you will,
the references that Scott made to Atsui,

00:54:25.500 --> 00:54:28.490
the Atsui set of APIs,
they were talked about in this session,

00:54:28.490 --> 00:54:30.120
so you might find that useful.

00:54:30.820 --> 00:54:33.700
Coming up,
there's the Using Cocoa session,

00:54:33.910 --> 00:54:37.260
and you can learn how text and
fonts are handled by Cocoa.

00:54:37.540 --> 00:54:41.280
And later today on at 5,
there's the International Feedback Forum,

00:54:41.410 --> 00:54:45.380
in which you can also ask us some
questions that you might have,

00:54:45.380 --> 00:54:48.310
that we might not have time
to answer here later on.

00:54:50.960 --> 00:54:54.900
So here's some pointers for
you regarding documentation.

00:54:54.900 --> 00:54:58.390
There is, up on the website right now,
the Font Manager technical

00:54:58.390 --> 00:54:59.870
documentation that you see there.

00:55:00.230 --> 00:55:04.340
It covers the FM font set of APIs,
the Extended

00:55:04.450 --> 00:55:06.800
Quick Draw Text Font Manager APIs.

00:55:06.800 --> 00:55:11.800
However, there is no documentation to the
ATS font set of APIs at the moment.

00:55:11.800 --> 00:55:14.130
Again, it's a work in progress and
as soon as we complete it,

00:55:14.270 --> 00:55:16.790
there will be some documentation
that goes along with it.

00:55:17.800 --> 00:55:22.750
If you're interested in storing pretty
good font references in your documents,

00:55:22.820 --> 00:55:26.610
I recommend that you read the
Font Sync technical documentation

00:55:26.610 --> 00:55:28.720
that is also there on the website.

00:55:28.860 --> 00:55:31.370
Finally,
I want to make mention of something

00:55:31.370 --> 00:55:34.980
that is not on this slide,
which is there's a tech note that we're

00:55:34.980 --> 00:55:38.700
working on and we've got almost complete,
which covers most of what

00:55:38.810 --> 00:55:42.510
I've talked about here today,
but in far more detail.

00:55:42.800 --> 00:55:46.800
So please look for it on the website
where all the technical notes are issued.

00:55:47.800 --> 00:55:48.800
be forthcoming.

00:55:48.800 --> 00:55:51.590
I don't expect it to be much longer.

00:55:53.140 --> 00:55:59.100
Finally, if something comes up tomorrow,
day after tomorrow,

00:55:59.100 --> 00:56:03.340
and you need to talk to us about
a feature that you want added,

00:56:03.370 --> 00:56:06.300
some problem that you have,
some issue that we haven't

00:56:06.300 --> 00:56:12.300
addressed properly in our APIs,
please feel free to contact Xavier Legro,

00:56:12.300 --> 00:56:17.130
who is the Worldwide
Developer Relations contact

00:56:17.900 --> 00:56:19.090
for our group.

00:56:20.180 --> 00:56:23.730
he's got our ear pretty much to his

00:56:25.180 --> 00:56:28.850
He acts pretty good and we
do pay attention to him.

00:56:28.850 --> 00:56:30.200
He gives us a lot of good feedback.