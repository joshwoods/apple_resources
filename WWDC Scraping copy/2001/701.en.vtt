WEBVTT

00:00:07.930 --> 00:00:08.530
Welcome.

00:00:08.640 --> 00:00:10.440
Good afternoon.

00:00:10.570 --> 00:00:11.800
Boy, these lights are horrible.

00:00:12.000 --> 00:00:15.780
There's a lot of you here today
and I'm hoping that you have a good

00:00:15.780 --> 00:00:18.100
time listening to this discussion.

00:00:18.420 --> 00:00:21.480
The development tools are the key.

00:00:21.830 --> 00:00:24.970
Development tools are what
will make Mac OS X successful,

00:00:25.070 --> 00:00:27.790
will make your application successful,
and will get us all to the

00:00:27.790 --> 00:00:29.260
place that we want to be.

00:00:29.370 --> 00:00:32.800
So without further ado,
I want to introduce Dave Payne,

00:00:32.800 --> 00:00:36.150
the manager of the
Development Environment Team.

00:00:39.500 --> 00:00:42.500
Thanks, Jeffrey.

00:00:42.500 --> 00:00:44.740
All right, great.

00:00:45.220 --> 00:00:46.960
Okay, let's go ahead and get started.

00:00:46.960 --> 00:00:51.860
So what we're going to take a look at
today is the power of Project Builder.

00:00:51.860 --> 00:00:54.350
What you can do with it, how to do it.

00:00:54.460 --> 00:00:56.750
So we'll go through a number of things.

00:00:56.750 --> 00:01:01.240
Basically walking through all the
features of Project Builder for creating,

00:01:01.240 --> 00:01:03.760
editing, and navigating your projects.

00:01:04.440 --> 00:01:08.240
Take a look at source code management
from within Project Builder.

00:01:08.240 --> 00:01:11.410
Configuring, building,
and debugging your targets

00:01:11.560 --> 00:01:12.850
for building products.

00:01:13.020 --> 00:01:16.870
And then, so a lot of what we're going
to do really is kind of walking

00:01:17.060 --> 00:01:21.020
through a lot of the features,
make sure that you know what exists.

00:01:21.070 --> 00:01:26.020
Maybe for those of you who've used it,
it's some review for some of that.

00:01:26.020 --> 00:01:29.600
In this particular session,
more than most, or more than hardly

00:01:29.600 --> 00:01:32.370
any in this conference,
we are going to be talking a

00:01:32.380 --> 00:01:34.020
little bit about future stuff.

00:01:34.130 --> 00:01:38.910
We will discuss what's new in
Project Builder on the developer tool

00:01:38.910 --> 00:01:43.780
CD that you received when you registered
or when you walked in this morning.

00:01:43.780 --> 00:01:46.980
And then, as I mentioned,
we'll talk about the future of

00:01:47.000 --> 00:01:50.690
Project Builder to show sort
of where we're going with this.

00:01:51.390 --> 00:01:55.840
So let's go ahead and get started
on what is Project Builder.

00:01:55.900 --> 00:01:59.170
So Project Builder is our
integrated development environment

00:01:59.380 --> 00:02:01.400
for Mac OS X from Apple.

00:02:01.420 --> 00:02:04.940
With this, we build all of Mac OS X.

00:02:04.970 --> 00:02:09.040
Carbon applications such as the Finder,
Help Viewer,

00:02:09.040 --> 00:02:12.300
Sherlock are built with Project Builder.

00:02:12.340 --> 00:02:16.730
Cocoa applications, our favorite,
Project Builder itself is

00:02:16.850 --> 00:02:18.340
built with Project Builder.

00:02:18.350 --> 00:02:22.640
Interface Builder, Mail,
the WebObjects tools,

00:02:22.790 --> 00:02:26.030
a lot of very heavy use
of Cocoa within Apple.

00:02:26.200 --> 00:02:31.750
There's a full Java 2 environment that
you can develop with Project Builder.

00:02:31.760 --> 00:02:36.800
And now on the May 2001
Developer Tools CD,

00:02:36.800 --> 00:02:41.100
you also have the ability to
develop WebObjects 5 applications.

00:02:41.100 --> 00:02:44.180
So that's a lot of what
we've been doing for that.

00:02:44.400 --> 00:02:50.700
You can develop Unix tools,
such as daemons server process,

00:02:50.700 --> 00:02:55.620
you might want to build tools that then
you access from graphical applications.

00:02:55.700 --> 00:02:58.700
You can build kernel
extensions and device drivers.

00:02:58.700 --> 00:03:02.700
So really the whole spectrum of
everything that you can do with Mac OS X,

00:03:02.700 --> 00:03:05.660
you can do it from Project Builder.

00:03:05.710 --> 00:03:09.700
But a lot of times you don't
create source from scratch,

00:03:09.750 --> 00:03:13.860
so there's a number of ways that
you can get source code into

00:03:13.990 --> 00:03:15.700
Project Builder from other places.

00:03:15.700 --> 00:03:20.400
And I'll talk a little bit
more about that later on.

00:03:23.140 --> 00:03:26.560
So Project Builder is really the
centerpiece of our development

00:03:26.560 --> 00:03:28.150
environment strategy at Apple.

00:03:28.230 --> 00:03:30.200
It's your development hub.

00:03:30.270 --> 00:03:33.130
We've been working very heavily
with a lot of other teams within

00:03:33.140 --> 00:03:37.610
Apple to ensure that Project Builder
integrates well with those other

00:03:37.610 --> 00:03:39.820
applications that others are working on.

00:03:40.000 --> 00:03:43.970
So for instance,
we interface with Interface Builder,

00:03:43.970 --> 00:03:49.900
which is our user interface construction
tool for Cocoa and Carbon applications.

00:03:49.990 --> 00:03:53.710
You can hear a lot about that in
the next session in this hall.

00:03:54.000 --> 00:03:57.970
New again on the May 2001
Developer Tools CD,

00:03:57.970 --> 00:04:02.000
we integrate with WebObjects
Builder and EO Modeler,

00:04:02.000 --> 00:04:05.920
and the WebObjects team will be showing
that off in a lot of their sessions

00:04:05.920 --> 00:04:07.990
throughout the course of the week.

00:04:08.000 --> 00:04:09.000
We also interact with
the WebObjects team.

00:04:09.000 --> 00:04:09.000
So Project Builder integrates
well with the WebObjects team.

00:04:09.000 --> 00:04:09.000
We've been working
very heavily with them.

00:04:09.000 --> 00:04:09.000
We've been working
very heavily with them.

00:04:09.000 --> 00:04:09.000
So Project Builder integrates
well with the WebObjects team.

00:04:09.000 --> 00:04:09.000
We've been working
very heavily with them.

00:04:09.000 --> 00:04:09.000
We've been working
very heavily with them.

00:04:09.000 --> 00:04:13.790
interact with the file merge tool
for graphical comparison of files,

00:04:13.790 --> 00:04:19.740
and with a lot of the performance tools
such as Object Alloc and Malloc debug.

00:04:19.740 --> 00:04:22.540
So we have integration with
some of these at this point.

00:04:22.540 --> 00:04:26.260
We intend to have further integration
with others as we move on in the future.

00:04:26.310 --> 00:04:28.320
Plus,
there's some other things that we're

00:04:28.490 --> 00:04:33.390
-- teams we're working with that
aren't yet depicted on this list.

00:04:34.770 --> 00:04:38.800
So sometimes in the email lists
and other places people ask me,

00:04:38.800 --> 00:04:41.830
so can I really use Project Builder
for my big applications?

00:04:41.840 --> 00:04:44.470
And the answer is emphatically yes.

00:04:44.540 --> 00:04:48.620
We use Project Builder for
over 250 projects that feed

00:04:48.620 --> 00:04:50.600
into Mac OS X within Apple.

00:04:50.600 --> 00:04:55.180
They are across the board from
applications to frameworks,

00:04:55.310 --> 00:05:00.320
plug-ins for all the screen savers
and system preference panels,

00:05:00.320 --> 00:05:02.790
all of our device drivers,
everything else goes

00:05:02.790 --> 00:05:04.300
through Project Builder.

00:05:04.810 --> 00:05:07.520
So it's really in very heavy
usage and that's great for us.

00:05:07.680 --> 00:05:11.400
We really try to establish tight
feedback loops with those teams

00:05:11.400 --> 00:05:15.000
so that if they have a problem,
we send people over,

00:05:15.000 --> 00:05:18.140
we work with them to ensure
that we can solve those problems

00:05:18.140 --> 00:05:19.740
and get developers past that.

00:05:19.740 --> 00:05:23.800
And that helps us deliver a better
product for all of you as well.

00:05:23.800 --> 00:05:27.600
Project Builder also really
facilitates team development.

00:05:27.600 --> 00:05:30.370
It's pretty rare that you
have on a major application

00:05:30.440 --> 00:05:32.170
just one person working on it.

00:05:32.240 --> 00:05:34.430
So of course as you would expect.

00:05:34.850 --> 00:05:36.700
There's preferences for the application.

00:05:36.730 --> 00:05:42.350
But something kind of innovative,
every developer on a project has

00:05:42.360 --> 00:05:47.210
their own user settings for that
particular project that's stored

00:05:47.210 --> 00:05:50.020
within the project files directory.

00:05:50.020 --> 00:05:52.010
It's one of our wrapped directories.

00:05:52.020 --> 00:05:56.800
So each of you has a separate file there,
which means that with our

00:05:57.120 --> 00:06:03.620
integration with source code control,
you can actually check the files.

00:06:03.620 --> 00:06:04.210
Your settings files.

00:06:04.230 --> 00:06:05.220
So you can delete the whole
project off the disk then.

00:06:05.230 --> 00:06:06.220
And then six months later if you have
to come back and do some maintenance,

00:06:06.220 --> 00:06:06.220
then all of your user
settings are still there.

00:06:06.220 --> 00:06:06.620
So there's editor settings,
build settings,

00:06:06.620 --> 00:06:07.150
and debugger settings are all
stored on a per user basis.

00:06:07.240 --> 00:06:08.160
And we'll take a look at some
of those as we go through here.

00:06:25.760 --> 00:06:28.500
So before I get into the
meat of the product itself,

00:06:28.500 --> 00:06:31.300
I'd like to talk a little bit about
the evolution of Project Builder.

00:06:31.300 --> 00:06:33.930
Where are we and how did we get here?

00:06:34.100 --> 00:06:39.850
So we kicked this project off two
years ago in February of 1999.

00:06:39.860 --> 00:06:43.600
The first code was written,
the first lines of code.

00:06:43.760 --> 00:06:47.210
There were two engineers on
the product at that point.

00:06:47.520 --> 00:06:52.190
It's been my pleasure to build the
team over the past couple of years,

00:06:52.240 --> 00:06:56.240
transitioning people from
our older Project Builder WO,

00:06:56.450 --> 00:07:01.460
older IDE, onto this and hiring
new people internally.

00:07:01.510 --> 00:07:05.110
Steve Naroff mentioned this morning
in our tools overview that we're

00:07:05.200 --> 00:07:07.450
continuing to heavily invest in tools.

00:07:07.460 --> 00:07:10.510
We've actually had five
new engineers join the team

00:07:10.960 --> 00:07:12.730
since February of this year.

00:07:12.840 --> 00:07:15.640
There's other new employees
out in the audience.

00:07:15.790 --> 00:07:17.010
Hi, welcome.

00:07:17.100 --> 00:07:20.880
So I'm really looking forward
to the power of this team,

00:07:20.880 --> 00:07:23.140
what we can do moving forward.

00:07:23.300 --> 00:07:26.260
In February of 2000,
we started rolling it out with an Apple.

00:07:26.420 --> 00:07:29.760
We had been using it before that,
but now we start asking

00:07:29.760 --> 00:07:31.410
other people to use it.

00:07:31.660 --> 00:07:34.340
The March 2000 version
that you got on the,

00:07:34.570 --> 00:07:38.040
2001,
you got on the developer tools CD and

00:07:38.040 --> 00:07:41.280
the original Mac OS X is our version 1.0.

00:07:41.280 --> 00:07:42.620
It's a fully usable product.

00:07:42.720 --> 00:07:44.720
You can use it for all your development.

00:07:44.780 --> 00:07:46.580
But again,
we've got our first up to date version.

00:07:46.580 --> 00:07:55.610
So we're going to get into the
first update here in May 2001.

00:07:56.420 --> 00:08:00.700
The WebObjects 5 support,
but there's a number of other

00:08:00.700 --> 00:08:03.470
general purpose fixes as well.

00:08:03.470 --> 00:08:06.690
And we are going to be
doing new improvements,

00:08:06.780 --> 00:08:09.290
new releases on a regular
basis for the product.

00:08:09.300 --> 00:08:12.300
So you should see things
coming out well for us.

00:08:12.470 --> 00:08:15.840
Okay, so now let's go ahead and
start taking a look into the

00:08:15.840 --> 00:08:20.300
product itself with creating,
editing, and navigating projects.

00:08:20.300 --> 00:08:26.300
So to help me do that,
I'd like to bring on stage Mike Ferris,

00:08:26.300 --> 00:08:29.290
who now works for me as the manager
of the Project Builder team itself.

00:08:29.300 --> 00:08:32.430
So I have the Project Builder team,
the compiler team,

00:08:32.430 --> 00:08:36.210
debugger and performance tools,
and a QA and integration team.

00:08:36.330 --> 00:08:39.300
So Mike and I have been
working together for a while.

00:08:39.300 --> 00:08:42.170
We're going to do a walkthrough of
the features of Project Builder.

00:08:42.300 --> 00:08:46.150
So the way we're going to do this...

00:08:46.500 --> 00:08:51.900
If we can go ahead and have
a demo on the other screen.

00:08:52.580 --> 00:08:55.080
Now for those of you sitting in
the far wings of the audience,

00:08:55.080 --> 00:08:58.040
you may want to move in a little bit
because we are going to do slides

00:08:58.040 --> 00:09:01.200
on one screen and demo on the other.

00:09:02.620 --> 00:09:06.340
So let's take a look at the
overall user interface first.

00:09:06.470 --> 00:09:09.640
So we've got a project window open here.

00:09:09.700 --> 00:09:13.250
On the left side of the window
are the project structure panes.

00:09:13.380 --> 00:09:16.680
So this is where we keep information
that's stored on disk about

00:09:16.810 --> 00:09:18.200
the structure of your product.

00:09:18.340 --> 00:09:22.340
So the groups and files
outline is first shown.

00:09:22.340 --> 00:09:26.340
Below that we've got bookmarks for
navigating through your project,

00:09:26.530 --> 00:09:29.570
then targets to represent
your build products,

00:09:29.570 --> 00:09:32.780
and then breakpoints for debugging.

00:09:32.780 --> 00:09:37.740
On the right side of the window we've
got editor panes with a navigation

00:09:37.740 --> 00:09:40.270
bar at the top of each editor pane.

00:09:40.270 --> 00:09:42.810
We'll talk a lot more about that.

00:09:43.390 --> 00:09:46.420
At the top of the window,
we've got a toolbar that's now

00:09:46.500 --> 00:09:50.030
a configurable toolbar just
as in the Finder and in Mail,

00:09:50.030 --> 00:09:52.690
and many of you may want
to take advantage of that

00:09:52.690 --> 00:09:54.300
in your products as well.

00:09:54.430 --> 00:09:57.650
This is using facilities
provided to us by Cocoa.

00:09:57.740 --> 00:10:03.170
We'll be providing additional icons to
add more facilities to let you customize

00:10:03.170 --> 00:10:06.850
your toolbar as you'd like over time.

00:10:08.010 --> 00:10:14.040
If you bring down the tool panes here,
above the editor panes,

00:10:14.130 --> 00:10:21.400
we've got tools for project-wide find,
for build output, for the console output,

00:10:21.500 --> 00:10:24.450
input and output when
you're running a product,

00:10:24.560 --> 00:10:28.500
and for the debugger.

00:10:28.910 --> 00:10:31.500
How do we create a new
project in Project Builder?

00:10:31.690 --> 00:10:36.450
So if we go up to the File menu and
bring up the New Project menu item,

00:10:36.450 --> 00:10:41.340
we can see that the
New Project dialog comes up.

00:10:41.500 --> 00:10:44.280
It's got a lot of different
project types listed here.

00:10:44.460 --> 00:10:49.840
So applications, bundles, frameworks,
kernel extensions, and I/O Kit drivers,

00:10:49.990 --> 00:10:53.530
tools, really everything that you
want to do on Mac OS X.

00:10:53.760 --> 00:10:56.940
Within each of these, we have different
subsets of these as well.

00:10:57.160 --> 00:11:02.180
So you can do Carbon applications
or Nib-based Carbon applications.

00:11:02.240 --> 00:11:05.920
You can do Cocoa applications
or Document-based Cocoa apps if

00:11:05.920 --> 00:11:08.230
you're using the NS Document model.

00:11:08.310 --> 00:11:13.500
So sometimes we get the
questions on the list of,

00:11:13.500 --> 00:11:15.700
"Gee,
this is my first experience with it.

00:11:15.700 --> 00:11:17.750
I want to create a C++-based tool.

00:11:17.770 --> 00:11:22.280
How would I do that?" Well,
maybe the C++ tool item is a good choice.

00:11:22.300 --> 00:11:27.100
But let's go ahead and create a document.

00:11:27.100 --> 00:11:30.040
a document-based Cocoa application.

00:11:30.200 --> 00:13:35.800
[Transcript missing]

00:13:36.980 --> 00:13:41.920
So taking a closer look at our
groups and files outline here,

00:13:41.920 --> 00:13:46.650
we can see that this is just a
user-definable grouping of files.

00:13:46.700 --> 00:13:50.100
If you have experience with our
previous version of Project Builder,

00:13:50.100 --> 00:13:51.970
this is much more flexible now.

00:13:52.110 --> 00:13:57.470
The files here are completely independent
of the physical location on the disk.

00:13:57.630 --> 00:14:01.840
It's independent of any particular
restrictions of the build system.

00:14:02.130 --> 00:14:04.560
So you can reorient
this however you want.

00:14:04.660 --> 00:14:07.230
You can move files
around just by dragging.

00:14:07.340 --> 00:14:11.170
You can select groups or files
and just delete them if you wish.

00:14:11.380 --> 00:14:16.200
You can select multiple files and
put them into a new group through

00:14:16.400 --> 00:14:19.150
the Project Group menu item.

00:14:19.250 --> 00:14:23.680
Hey,
you can go back and ungroup it again.

00:14:24.450 --> 00:14:29.180
So you can also add new files to
your project or add new frameworks,

00:14:29.180 --> 00:14:31.300
so link against new frameworks.

00:14:31.300 --> 00:14:35.510
To add a new file,
you can either go to the project menu

00:14:35.610 --> 00:14:39.740
and use add file or add frameworks,
but you can also drag in from the finder.

00:14:39.740 --> 00:14:42.690
So in this case,
we'll take an icon file and drag it into

00:14:42.700 --> 00:14:44.970
our resources group here in our project.

00:14:45.680 --> 00:14:51.780
Now when you add a file, it asks you,
do you want to copy this item into the

00:14:51.780 --> 00:14:56.020
group or into your project hierarchy,
so if it's somewhere else on your system.

00:14:56.400 --> 00:14:58.820
Typically,
you'd probably want to say yes.

00:14:58.820 --> 00:15:03.030
It also asks you what targets
you want to add the file to.

00:15:03.110 --> 00:15:05.020
So in this case, we only have one target.

00:15:05.180 --> 00:15:10.810
If we add more,
you can choose to add it to multiple

00:15:10.810 --> 00:15:14.410
targets right at that point.

00:15:14.910 --> 00:15:19.800
So, among the other things that Groups
and Files Outline gives you access

00:15:19.920 --> 00:15:23.690
to is you can navigate down into
your frameworks if you'd like to

00:15:23.710 --> 00:15:27.000
take a look at what headers do I have
available to me in this framework.

00:15:27.000 --> 00:15:31.000
So, this is one of the mechanisms
for getting to headers.

00:15:31.000 --> 00:15:32.520
There's a number of others as well.

00:15:32.520 --> 00:15:35.320
So, in this case,
we're navigating down into

00:15:35.320 --> 00:15:37.050
the foundation headers.

00:15:37.060 --> 00:15:39.640
So, we can see that those
come up in the editor,

00:15:39.640 --> 00:15:40.990
a whole list of those.

00:15:42.040 --> 00:15:44.820
Also, then,
this is especially interesting.

00:15:44.820 --> 00:15:49.180
Besides frameworks,
we've also got your built products there.

00:15:49.180 --> 00:15:53.910
So, we can see down here a products group
that Project Builder has created for us.

00:15:54.000 --> 00:15:58.990
Well, that's interesting that
foo.app is shown in red here.

00:15:59.000 --> 00:16:02.950
Now, that's because foo.app doesn't
yet exist on the disk because we

00:16:02.950 --> 00:16:05.000
haven't built this project yet.

00:16:05.000 --> 00:16:08.400
If I had a file that was deleted
from the disk or doesn't exist,

00:16:08.400 --> 00:16:10.940
that would show in red as well,
and you might need to fix

00:16:11.050 --> 00:16:12.020
up the reference to that.

00:16:12.020 --> 00:16:14.530
But in this case,
we can fix up the fact that the

00:16:14.600 --> 00:16:16.570
app doesn't exist by building it.

00:16:16.650 --> 00:16:20.440
So, if you remember,
this was a Cocoa document-based

00:16:20.440 --> 00:16:23.000
application that we had created.

00:16:23.040 --> 00:16:26.770
And now we go off and build,
and the build tab came up

00:16:26.770 --> 00:16:31.110
to show us the build output,
and we closed that back up.

00:16:31.190 --> 00:16:36.070
Now we can go down into the products
group and navigate down in and

00:16:36.070 --> 00:16:38.600
see the bundle contents here.

00:16:38.730 --> 00:16:41.480
So, an application package on the build
tab is a package that we can build.

00:16:41.580 --> 00:16:43.180
So, the package on Mac OS X is a bundle.

00:16:43.180 --> 00:16:44.290
You've heard a lot about this.

00:16:44.380 --> 00:16:45.510
You'll hear a lot more about it.

00:16:45.580 --> 00:16:49.610
So, within here,
we can see the Info.plist.

00:16:49.780 --> 00:16:52.640
So, we can click on that
and see the XML of that.

00:16:52.700 --> 00:16:57.260
Project Builder took the information
that you had supplied in the project,

00:16:57.480 --> 00:17:01.360
which in this case is default,
and created that for us.

00:17:01.440 --> 00:17:07.440
We've got the Mac OS X directory that
the binary for Mac OS X is in here.

00:17:07.440 --> 00:17:11.160
There's the pkg info
file that's necessary.

00:17:11.580 --> 00:17:14.970
There's the pkg_finder_launch_services
to find this application

00:17:15.030 --> 00:17:16.580
package as an application.

00:17:16.580 --> 00:17:20.500
And then there's the whole
resources group as well,

00:17:20.570 --> 00:17:23.140
with, in this case, English resources.

00:17:23.270 --> 00:17:26.850
So, if you had your project localized
into multiple languages,

00:17:26.870 --> 00:17:30.780
this is where you would see the .l
projects for your different languages.

00:17:30.780 --> 00:17:36.010
So, we'll be enhancing this facility over
time to give you full inspection of

00:17:36.010 --> 00:17:38.480
the built results of your project.

00:17:38.480 --> 00:17:41.380
So,
you can envision things like the size.

00:17:41.420 --> 00:17:45.570
The size of the binary and the groups
and permissions and things like that.

00:17:48.560 --> 00:17:51.810
So let's take a look at some of
the capabilities of the editor.

00:17:52.000 --> 00:17:54.590
So we'll go back to the more
complex Sketch project here

00:17:54.870 --> 00:17:56.540
that we've already had open.

00:17:56.540 --> 00:18:00.000
So Sketch is one of the
example projects for Cocoa.

00:18:00.000 --> 00:18:05.340
It's an NS document based project
that's out in developer examples Cocoa.

00:18:05.380 --> 00:18:08.790
So we can select a file and
we can see that we've got full

00:18:08.790 --> 00:18:11.220
syntax coloring here in the file.

00:18:11.290 --> 00:18:16.520
We can do things like splitting
the window by going up here to

00:18:16.580 --> 00:18:18.480
the split bar or split icon.

00:18:18.500 --> 00:18:21.900
We can resize each of the split panes.

00:18:22.130 --> 00:18:23.490
We can create more if we want.

00:18:23.500 --> 00:18:29.450
We can close up any
particular split panes.

00:18:29.750 --> 00:18:33.160
Now a lot of people are looking for
more flexibility in the environment.

00:18:33.160 --> 00:18:36.120
So what if I don't want to be
constrained inside that window?

00:18:36.260 --> 00:18:39.300
Well you can bring up files in other
windows by just going and double

00:18:39.450 --> 00:18:42.690
clicking in the outline view and now
it comes up in a separate window.

00:18:42.700 --> 00:18:47.700
You've got all the same capabilities
here where you can split the editor pane.

00:18:47.700 --> 00:18:50.850
Each of the editor panes has a
navigation bar here so you can

00:18:50.850 --> 00:18:53.700
flip between different files,
show the same file,

00:18:53.700 --> 00:18:57.050
different parts of the same file,
or you can show different

00:18:57.050 --> 00:18:58.630
files in the same editor pane.

00:18:58.700 --> 00:19:00.290
pain.

00:19:00.530 --> 00:19:04.290
Some people occasionally ask us,
is there a facility for showing

00:19:04.370 --> 00:19:07.960
what line number I'm currently on
or going to a specific line number?

00:19:07.960 --> 00:19:12.130
So to go to a specific line number,
let's bring up the go-to line

00:19:12.270 --> 00:19:14.520
menu item under the find menu.

00:19:14.520 --> 00:19:17.980
And Mike,
what line number should we go to here?

00:19:17.980 --> 00:19:19.740
Oh, I don't know.

00:19:19.740 --> 00:19:20.720
How about 20?

00:19:20.720 --> 00:19:21.680
Line 20.

00:19:21.810 --> 00:19:22.760
Sounds good.

00:19:22.760 --> 00:19:24.690
Okay, so we go directly to that.

00:19:25.620 --> 00:19:29.750
Now,
also we find that if we keep that window

00:19:29.750 --> 00:19:33.700
open and we move around between the file,
the auto-update is almost barely

00:19:33.740 --> 00:19:35.760
visible on the screen up there.

00:19:35.760 --> 00:19:38.450
So clearly this is an
opportunity for some future

00:19:38.450 --> 00:19:40.560
improvements in the product here.

00:19:43.760 --> 00:19:45.910
Now, when you're editing,
there's a number of different

00:19:46.030 --> 00:19:49.440
parameters you can set for the
text settings of the files.

00:19:49.580 --> 00:19:54.240
So we can do this by selecting a file and
then going up into the project menu doing

00:19:54.240 --> 00:19:57.560
Show Info to bring up the file inspector.

00:19:57.800 --> 00:20:00.390
So we can do things
like set the tab width,

00:20:00.390 --> 00:20:01.910
set the indent width.

00:20:02.030 --> 00:20:04.100
You can set the end of line characters.

00:20:04.170 --> 00:20:08.800
So do you want to use the Mac end of line
carriage return character or do you want

00:20:08.800 --> 00:20:12.400
to use the Unix end of line character,
which is a line feed?

00:20:12.570 --> 00:20:15.890
And in the case of--

00:20:16.000 --> 00:20:20.150
We've actually enhanced the preprocessor,
the compiler,

00:20:20.150 --> 00:20:23.180
and the debugger to be able to
handle either of these properly.

00:20:23.180 --> 00:20:27.670
But you may find that if you're going
to work with Unix tools with your files,

00:20:27.890 --> 00:20:30.860
for example,
run Perl scripts across them to

00:20:30.860 --> 00:20:35.690
look for word counts or something,
you might want to switch to using

00:20:35.690 --> 00:20:38.440
Unix end-of-line characters.

00:20:38.440 --> 00:20:41.830
You can also set the file encodings.

00:20:41.870 --> 00:20:46.260
So let's say that you wanted to put kanji
comments into your source code files.

00:20:46.270 --> 00:20:50.080
Well, we've got a whole set of
different file encodings here.

00:20:50.080 --> 00:20:55.320
If you switch to UTF-8,
then you can represent Unicode characters

00:20:55.320 --> 00:21:01.680
in files that can still be processed by
our compiler tool chain properly as well.

00:21:01.680 --> 00:21:06.230
Go ahead and put all the kanji
comments in that you want.

00:21:08.060 --> 00:21:11.880
Other capabilities from the
Inspector here is that you can change

00:21:11.880 --> 00:21:15.390
the reference style for how we're
accessing this file on the disk.

00:21:15.400 --> 00:21:19.380
So you might want to have the file be
relative to the group that contains

00:21:19.380 --> 00:21:21.140
it in the Groups and Files outline.

00:21:21.140 --> 00:21:25.460
So you can say that a group matches
up to a specific folder on the disk,

00:21:25.710 --> 00:21:26.900
but you don't have to.

00:21:26.900 --> 00:21:32.640
You can also have a file be relative
to the project that contains it,

00:21:32.640 --> 00:21:36.120
or you can also say that
it's an absolute path.

00:21:36.140 --> 00:21:40.000
So if you're going to be
moving a project around at all,

00:21:40.200 --> 00:21:43.290
or moving it between machines,
you'll probably want to use one

00:21:43.290 --> 00:21:44.860
of the relative reference styles.

00:21:44.900 --> 00:21:48.410
Now you've heard me talk about
the fact that your applications

00:21:48.410 --> 00:21:52.300
can be localized into multiple
languages with our bundle facilities.

00:21:52.300 --> 00:21:54.900
This is where you would do
this in Project Builder.

00:21:54.900 --> 00:21:58.060
So we can select a Nib file here,
which is one of the document

00:21:58.280 --> 00:22:00.140
files of Interface Builder.

00:22:00.140 --> 00:22:04.640
You can see in this case that we've got
an English localized variant of this,

00:22:04.640 --> 00:22:06.130
as opposed to it being completely global.

00:22:06.140 --> 00:22:09.140
So we can select that
Nib file and say that,

00:22:09.140 --> 00:22:12.140
well, actually we'd like to add
a localized variant here.

00:22:12.140 --> 00:22:16.000
So, Mike, what should we put here?

00:22:16.140 --> 00:22:17.140
Let's try Japanese.

00:22:17.140 --> 00:22:19.140
Okay, let's try Japanese.

00:22:19.140 --> 00:22:22.270
So we can add a Japanese localized
variant to the file,

00:22:22.430 --> 00:22:28.410
and now we've got two
localizations of this Nib file.

00:22:29.070 --> 00:22:34.540
So one more thing to note about this,
actually you can also switch things

00:22:34.540 --> 00:22:36.760
to be global resources again.

00:22:36.790 --> 00:22:40.430
One more thing about the groups
and files outline that you should

00:22:40.440 --> 00:22:44.200
know is if you go up to the very
top of the groups and files outline

00:22:44.330 --> 00:22:48.960
and select the topmost item,
basically the root group,

00:22:49.000 --> 00:22:53.310
in this case Sketch,
now the inspector changes to show that

00:22:53.440 --> 00:22:56.230
we're inspecting the project itself.

00:22:56.360 --> 00:22:59.690
So I'll touch on this a
bit more later in the talk,

00:22:59.820 --> 00:23:05.150
but this is where you would set a build
location for this project specifically,

00:23:05.190 --> 00:23:07.250
and I'll talk about why
you might want to do that.

00:23:07.320 --> 00:23:12.360
And it's also where you would
select to commit changes for

00:23:12.360 --> 00:23:15.390
SCM across the entire project.

00:23:17.170 --> 00:23:20.290
Now let's talk about
navigating through the project.

00:23:20.430 --> 00:23:23.540
In order to use some of our more
advanced navigation facilities,

00:23:23.660 --> 00:23:25.600
you first need to index your project.

00:23:25.680 --> 00:23:29.770
So currently with the shipping
versions of Project Builder,

00:23:29.820 --> 00:23:31.860
we don't index by default.

00:23:31.930 --> 00:23:35.710
So if you wish to index,
you go up to the project menu,

00:23:35.720 --> 00:23:37.410
select index project.

00:23:37.610 --> 00:23:41.940
This goes through the compiler to
index all the C-based languages,

00:23:41.950 --> 00:23:44.770
so C, C++, and Objective-C.

00:23:44.850 --> 00:23:49.160
It uses a separate parser for Java.

00:23:49.220 --> 00:23:53.440
If you do have any problems indexing in
this current version of Project Builder,

00:23:53.440 --> 00:23:55.160
you should go to the
console and look at that.

00:23:55.160 --> 00:23:59.060
We aren't currently invoking the
build system in quite the same way as

00:23:59.060 --> 00:24:01.340
when we invoke to build your project.

00:24:01.460 --> 00:24:04.980
That's something we're going to
be fixing in the next release.

00:24:05.080 --> 00:24:08.260
As I mentioned,
the index is then used for some of our

00:24:08.280 --> 00:24:10.960
more advanced navigation mechanisms.

00:24:11.030 --> 00:24:14.600
But let's talk about
navigation as a whole first.

00:24:14.750 --> 00:24:19.640
So for moving around between files,
in the navigation bar

00:24:19.840 --> 00:24:23.780
above each editor pane,
we have a pop-up menu to show

00:24:24.350 --> 00:24:26.000
the recently viewed files.

00:24:26.150 --> 00:24:28.240
So you can move between those.

00:24:28.370 --> 00:24:32.150
There's also back and forward buttons,
so you can move back and

00:24:32.150 --> 00:24:37.410
forward as in a web browser,
kind of a stack-based there.

00:24:37.500 --> 00:24:40.530
You also have easy
access to included files.

00:24:40.670 --> 00:24:44.400
So we have what we call the counterpart
button here and an icon on the bottom.

00:24:44.400 --> 00:24:46.900
And there's a button on the
right of the navigation bar

00:24:46.900 --> 00:24:48.790
that lets you switch between,
in this case,

00:24:48.960 --> 00:24:53.300
the class file and the header file
for that particular class file.

00:24:53.300 --> 00:24:55.400
So we can move back and forth there.

00:24:55.410 --> 00:24:59.620
But if you've indexed your project,
this is a little bit of a hidden feature.

00:24:59.820 --> 00:25:03.400
If you hold down the
mouse button on the icon,

00:25:03.400 --> 00:25:07.230
the counterpart icon,
that shows all the files

00:25:07.320 --> 00:25:09.700
that this file is including.

00:25:09.780 --> 00:25:14.200
So we can go from this source
file to one of its header files.

00:25:14.200 --> 00:25:17.940
And the other thing is now you can walk
up and down your include hierarchy.

00:25:18.010 --> 00:25:21.250
So you can see that this header
file is being included by

00:25:21.250 --> 00:25:23.200
two of the source code files.

00:25:23.200 --> 00:25:28.990
We can also go to on up the
header hierarchy and say,

00:25:29.150 --> 00:25:30.400
well, let me see.

00:25:30.400 --> 00:25:32.800
Gee, we're importing appkit.h.

00:25:32.800 --> 00:25:34.800
Let me see what all it imports.

00:25:34.800 --> 00:25:37.200
And from there,
that's another mechanism to

00:25:37.200 --> 00:25:38.800
get to framework headers.

00:25:38.800 --> 00:25:43.010
So a way of seeing the header
file dependencies in your project.

00:25:43.540 --> 00:25:48.990
For navigating within a file, we have,
again, if the project is indexed,

00:25:49.010 --> 00:25:50.830
we've got the symbol pop-up here.

00:25:50.910 --> 00:25:54.580
So you can move between different
methods within this file.

00:25:54.580 --> 00:26:00.230
And if you're in the source code and
you see a method that you want to see,

00:26:00.230 --> 00:26:04.320
say,
let me see the definition of this method.

00:26:04.320 --> 00:26:07.780
So shared print info here,
if I want to see the definition of that,

00:26:07.780 --> 00:26:10.610
we can do a command,
double-click on that,

00:26:10.610 --> 00:26:13.220
and that takes us to the declaration.

00:26:13.400 --> 00:26:18.480
If we had multiple declarations
of the same function,

00:26:18.480 --> 00:26:23.400
then it would put up a little pop-up
menu if there's a small number of them.

00:26:23.400 --> 00:26:26.760
If there's a lot of them,
it would actually populate the

00:26:26.870 --> 00:26:31.390
find panel and pop down with that,
and you can select any lines there.

00:26:31.910 --> 00:26:35.010
So, I think that covers that.

00:26:35.470 --> 00:26:38.790
So, another navigation
mechanism is bookmarks.

00:26:38.810 --> 00:26:41.220
These are completely under your control.

00:26:41.220 --> 00:26:43.760
Each user has their own set of bookmarks.

00:26:43.760 --> 00:26:47.640
So, to set a bookmark in your project,
you would select a line of code and

00:26:47.640 --> 00:26:51.310
then go up to the Add to Bookmarks
menu item in the navigation menu.

00:26:51.380 --> 00:26:53.840
So, we can add a couple of bookmarks.

00:26:53.890 --> 00:26:56.300
Now,
if we go over here to the Bookmarks tab,

00:26:56.410 --> 00:27:00.280
we can see that this is a way
of navigating around between

00:27:00.280 --> 00:27:02.270
different locations in our project.

00:27:02.310 --> 00:27:08.960
So, we can actually rename those by
holding the Option button and clicking.

00:27:08.970 --> 00:27:11.530
So, you can,
if you're working on a large project and

00:27:11.530 --> 00:27:15.110
you're working on specific parts of it,
you can set up bookmarks to

00:27:15.230 --> 00:27:17.430
easily allow you to jump to that.

00:27:17.430 --> 00:27:20.040
So, again,
because this is on a per user basis

00:27:20.140 --> 00:27:23.660
and multiple users will work on
different aspects of the project,

00:27:23.820 --> 00:27:28.150
each person gets their bookmarks
saved persistently with the project.

00:27:28.150 --> 00:27:30.260
They can be checked into CVS, et cetera.

00:27:30.260 --> 00:27:32.870
Um...

00:27:34.160 --> 00:27:37.940
Okay, we also have a project-wide
find and replace capability

00:27:38.170 --> 00:27:39.430
here in the find panel.

00:27:39.430 --> 00:27:42.020
So there's a lot of
power built into this.

00:27:42.020 --> 00:27:46.310
We can control how far we want to search,
so the search space here by

00:27:46.310 --> 00:27:48.070
going into the find options.

00:27:48.070 --> 00:27:50.980
So you can say I just want
to search in this project,

00:27:51.110 --> 00:27:53.520
or I want to search in
all of my open projects,

00:27:53.650 --> 00:27:57.980
or I want to search in my projects and
my frameworks or just my frameworks.

00:27:57.980 --> 00:28:00.140
So there's a lot of control there.

00:28:00.140 --> 00:28:03.850
So you can set up individual find sets.

00:28:03.970 --> 00:28:05.780
You can set up individual find
sets however you want for that.

00:28:05.940 --> 00:28:10.870
So if we close that back up,
we can see that we've also got different

00:28:11.070 --> 00:28:12.880
types of searches that you can do.

00:28:12.960 --> 00:28:16.780
So textual or regular expression
for just plain string searches.

00:28:17.030 --> 00:28:21.640
If you've indexed your project,
you can do definition searches

00:28:22.140 --> 00:28:26.780
as well and switch to finding
the definitions of methods.

00:28:26.880 --> 00:28:30.610
So let's look for init with frame.

00:28:32.350 --> 00:28:36.870
And we can see here that based on the
find set that we had selected that

00:28:36.870 --> 00:28:42.520
we are seeing all the init with frame
methods both from Cocoa framework

00:28:42.610 --> 00:28:45.730
headers themselves and from my project.

00:28:45.880 --> 00:28:49.540
So when we click on a method
there in the find pane,

00:28:49.660 --> 00:28:55.330
it takes us to that implementation
or declaration in the source code.

00:28:56.270 --> 00:28:59.940
Okay, so that covers that for
our initial creating,

00:28:59.940 --> 00:29:03.290
editing,
and navigating projects walkthrough.

00:29:03.410 --> 00:29:03.840
Thanks, Mike.

00:29:03.920 --> 00:29:06.480
If we can go back to
slides on both screens,

00:29:06.490 --> 00:29:07.270
please.

00:29:11.440 --> 00:29:17.570
I generally don't do these things
where I talk all the way through.

00:29:17.670 --> 00:29:19.520
Bear with me.

00:29:19.830 --> 00:29:23.390
So now let's take a look at some of the
source code navigation or source code

00:29:23.400 --> 00:29:26.290
management facilities of Project Builder.

00:29:26.550 --> 00:29:30.570
So, currently Project Builder
interfaces with one source code

00:29:30.570 --> 00:29:33.030
management system and that's CVS.

00:29:33.480 --> 00:29:35.380
You may have heard of
CVS or you may not have.

00:29:35.390 --> 00:29:39.400
It's the concurrent versioning system.

00:29:39.400 --> 00:29:43.470
This is an open source source code
management system that's used for a lot

00:29:43.470 --> 00:29:45.490
of the open source projects out there.

00:29:45.490 --> 00:29:47.180
It's cross platforms.

00:29:47.260 --> 00:29:50.250
It runs on a whole variety
of different systems,

00:29:50.320 --> 00:29:53.240
a lot of different Unix platforms,
Windows NT,

00:29:53.350 --> 00:29:55.790
there's clients for the Macintosh.

00:29:56.500 --> 00:30:00.030
It comes on the developer tool CD,
so when you install the

00:30:00.030 --> 00:30:02.100
developer tools you get CVS.

00:30:02.200 --> 00:30:05.580
We use it very extensively
for Mac OS X within Apple,

00:30:05.780 --> 00:30:09.040
which for us allows us to
test our Project Builder

00:30:09.060 --> 00:30:11.550
interfaces with this very well.

00:30:11.560 --> 00:30:15.300
And if you're going to be working
with the Darwin sources at all,

00:30:15.360 --> 00:30:19.350
you may already be familiar with
CVS because the Darwin sources are

00:30:19.360 --> 00:30:23.530
kept in CVS repositories and you can
access those out on the network and

00:30:23.530 --> 00:30:26.340
check out the Darwin sources directly.

00:30:26.400 --> 00:30:27.640
time.

00:30:28.700 --> 00:30:32.160
So there are some places you
can get documentation for

00:30:32.160 --> 00:30:33.600
using CVS in Project Builder.

00:30:33.600 --> 00:30:38.400
We put the manual on the system itself
in Developer Documentation Commands,

00:30:38.400 --> 00:30:39.240
CVS.

00:30:39.880 --> 00:30:45.350
I think we'll have URLs for this
type of thing later up on the web.

00:30:45.620 --> 00:30:49.770
Also,
if you go to Project Builder's Help menu,

00:30:49.770 --> 00:30:54.470
in the Projects section,
there's a Source Code Management section

00:30:54.580 --> 00:30:57.330
there that covers a lot of
what I'm going to talk about.

00:30:58.350 --> 00:31:01.590
So in order to use
CVS within Project Builder,

00:31:01.590 --> 00:31:04.900
there's some things you have
to do to set up for this first.

00:31:05.080 --> 00:31:08.370
Number one is you have to have a
CVS repository somewhere that you're

00:31:08.410 --> 00:31:10.200
going to be storing your project in.

00:31:10.470 --> 00:31:14.080
Typically there's one CVS repository
for a whole group of developers.

00:31:14.190 --> 00:31:16.790
We have about three of them within Apple.

00:31:16.790 --> 00:31:20.000
So the Darwin CVS repository,
CoreOS has one,

00:31:20.050 --> 00:31:22.420
and then everybody else has one.

00:31:22.520 --> 00:31:28.180
You can use either local access
to that and NFS access to that.

00:31:28.200 --> 00:31:29.740
CVS looks local.

00:31:29.740 --> 00:31:33.740
Or you can use client server
access to a remote CVS repository.

00:31:33.850 --> 00:31:36.090
It could even be on a
different type of machine,

00:31:36.100 --> 00:31:38.000
but of course you'll want it on Mac OS X.

00:31:38.000 --> 00:31:41.410
For remote,
you can use P server authentication

00:31:41.410 --> 00:31:45.310
or with the new system,
sorry, I jumped again there.

00:31:45.310 --> 00:31:48.610
You can now use
SSH authentication as well.

00:31:48.620 --> 00:31:52.720
Another requirement is that your
project already has to be in CVS.

00:31:52.720 --> 00:31:55.980
We'll be enhancing some of
these things in the future,

00:31:56.100 --> 00:31:58.180
but for now this is the
way that you would use it.

00:31:58.200 --> 00:32:01.540
So from the command line
in a terminal window,

00:32:01.540 --> 00:32:04.790
for example,
you would do a CVS import on your

00:32:04.790 --> 00:32:07.580
project to add it to the repository.

00:32:07.700 --> 00:32:11.130
And then you have to check
it back out of the repository

00:32:11.130 --> 00:32:13.260
into a CVS working directory.

00:32:13.260 --> 00:32:16.330
So on the command line, check it out.

00:32:16.420 --> 00:32:21.100
Some people on the email list ask, gee,
Project Builder doesn't seem

00:32:21.100 --> 00:32:23.100
to have my SCM menu enabled.

00:32:23.100 --> 00:32:24.100
Why is that?

00:32:24.120 --> 00:32:27.880
A lot of times it's because you don't
have your project in a working directory.

00:32:28.440 --> 00:32:30.210
Maybe you haven't yet put it into CVS.

00:32:30.210 --> 00:32:32.160
Those are some of the precursors.

00:32:32.160 --> 00:32:35.750
And one thing I forgot on here is that
you actually have to have your CVS root

00:32:35.900 --> 00:32:38.610
environment variable set up properly,
I believe.

00:32:38.770 --> 00:32:40.390
And that's documented as well.

00:32:40.540 --> 00:32:43.650
Once you've done this,
then there's menu items for

00:32:43.650 --> 00:32:47.850
committing changes on selected files
or if you have groups selected,

00:32:47.900 --> 00:32:52.590
it commits all the changes and files
that have been modified in that group.

00:32:52.820 --> 00:32:55.210
If you want to commit
everything in your project,

00:32:55.320 --> 00:32:58.010
including the project file itself,
you would select that type.

00:32:58.160 --> 00:33:01.620
And then you have that top
level group that I showed in

00:33:01.660 --> 00:33:03.960
the groups and files outline.

00:33:03.960 --> 00:33:06.890
When you commit,
that makes the addition and

00:33:06.890 --> 00:33:08.960
removal of files permanent.

00:33:08.960 --> 00:33:12.990
But before CVS knows about the
addition or removal of files,

00:33:12.990 --> 00:33:13.990
you have to tell it.

00:33:14.140 --> 00:33:19.950
So there's an add to repository menu
item or you can just delete files.

00:33:20.520 --> 00:33:26.300
The SEM status of files is shown
in the Groups and Outlines view.

00:33:26.480 --> 00:33:30.040
So there's modified.

00:33:30.430 --> 00:33:34.960
U means that it's updated out in the
repository and you need to update to it.

00:33:35.320 --> 00:33:36.390
Somebody else has changed it.

00:33:36.990 --> 00:33:40.270
Question mark means it's
not yet in the repository.

00:33:40.270 --> 00:33:44.180
A means that you've added it
and will be committed later.

00:33:44.180 --> 00:33:46.120
R means that it's been removed.

00:33:46.180 --> 00:33:47.890
So it shows in gray there.

00:33:47.900 --> 00:33:53.160
And check my time here.

00:33:54.120 --> 00:33:58.240
The C means there's been conflicts.

00:33:58.360 --> 00:34:01.340
So you can also compare
different revisions of the

00:34:01.470 --> 00:34:02.840
files through file merge.

00:34:02.900 --> 00:34:06.240
You can look at the change logs
in the file inspector to see

00:34:06.360 --> 00:34:07.980
all the different revisions.

00:34:08.090 --> 00:34:11.000
You can compare with the
base revision of a file.

00:34:11.000 --> 00:34:12.880
You can compare with the latest revision.

00:34:12.880 --> 00:34:17.880
If you're going to be checking in,
nib files from Interface Builder.

00:34:17.880 --> 00:34:22.310
Mac OS X in a fair number
of cases use what we call

00:34:22.670 --> 00:34:25.000
wrapped files or packages even.

00:34:25.000 --> 00:34:28.460
What we do internally within
Apple at this point is use

00:34:28.460 --> 00:34:30.540
what's called CVS wrappers.

00:34:30.540 --> 00:34:34.210
In order to do this,
there's a configuration file that

00:34:34.390 --> 00:34:38.180
we supply in developer tools,
CVS wrappers that you would

00:34:38.180 --> 00:34:42.280
need to commit into the top
level of your CVS repository.

00:34:42.280 --> 00:34:42.540
And the CVS wrapper is the
one that's going to be used

00:34:42.570 --> 00:34:42.870
to build the C++ application.

00:34:42.970 --> 00:34:44.440
So you can see the CVS root directory.

00:34:44.480 --> 00:34:48.130
In client server mode,
each user needs access to that.

00:34:48.290 --> 00:34:52.060
So you put it in a .CVS wrappers
file in your home directory.

00:34:52.110 --> 00:34:54.220
This is all documented,
actually in the last

00:34:54.220 --> 00:34:56.650
place we documented it,
which was the release

00:34:56.650 --> 00:34:58.660
notes for public beta,
which are actually still

00:34:58.660 --> 00:35:00.800
in the product as well.

00:35:00.940 --> 00:35:05.720
So I'd like to show a quick demo
of source code management and

00:35:06.360 --> 00:35:08.440
the comparing of files here.

00:35:08.560 --> 00:35:11.950
So bringing Mike back up on stage.

00:35:12.400 --> 00:35:16.510
So let's go back into
the Sketch Project here.

00:35:16.520 --> 00:35:21.380
And if we open up, say,
our Model Classes group,

00:35:22.370 --> 00:35:24.450
We can see here that
when we open this up,

00:35:24.450 --> 00:35:26.800
there's a file here marked with a U.

00:35:26.800 --> 00:35:32.350
This means that typically we
do check for SCM status when we

00:35:32.350 --> 00:35:34.590
open a group for the first time.

00:35:34.600 --> 00:35:37.930
Remember the U meant that
somebody outside had modified

00:35:37.940 --> 00:35:39.800
the file in the repository.

00:35:39.800 --> 00:35:42.990
So we'd really like to see,
I don't really want to update to that

00:35:43.010 --> 00:35:44.370
until I know what they've done to it.

00:35:44.400 --> 00:35:50.580
So let's go ahead and go to
the SCM menu item and do a

00:35:50.730 --> 00:35:54.930
compare with latest revision.

00:35:54.930 --> 00:35:54.930
Now this will launch file merge.

00:35:56.110 --> 00:35:59.600
And we see in File Merge here that down
in the lower left it shows that there's

00:35:59.600 --> 00:36:03.640
been one difference in the file that,
wow, somebody added a new comment.

00:36:03.770 --> 00:36:06.640
Well that looks pretty important
so we better update to that.

00:36:06.640 --> 00:36:11.640
So now let's go back to the SCM menu and
we can do an update to latest revision.

00:36:11.770 --> 00:36:13.940
So bring in what's in the repository.

00:36:14.040 --> 00:36:17.000
If there were conflicts in that
update it would show as a C.

00:36:17.160 --> 00:36:21.270
You could have used File Merge
to do a merge of that as well.

00:36:21.470 --> 00:36:23.400
Let's see.

00:36:23.400 --> 00:36:26.400
Demo scripts.

00:36:26.400 --> 00:36:28.400
Next time,
now we're going to modify a file.

00:36:28.460 --> 00:36:30.400
Yeah, why don't we modify a file?

00:36:30.400 --> 00:36:31.270
That's a good idea.

00:36:31.390 --> 00:36:35.350
So let's go into Draw Documents
and add an NSLog message here.

00:36:35.510 --> 00:36:38.580
So in Cocoa, this is a way,
this is a foundation

00:36:38.630 --> 00:36:42.290
call that you can use to,
it's like printouts essentially.

00:36:42.420 --> 00:36:44.400
It comes out in the console.

00:36:44.400 --> 00:36:45.400
So we can add that.

00:36:45.400 --> 00:36:47.400
When we save the file,
we can see that it's now marked

00:36:47.400 --> 00:36:50.400
in the Groups and Files outline
as having been modified.

00:36:50.400 --> 00:36:54.750
And we can commit that by
going up to the SCM menu item,

00:36:54.750 --> 00:36:58.390
Commit Changes, and enter a commit log.

00:36:58.420 --> 00:37:00.270
Personally,
I like to commit things in sets.

00:37:00.270 --> 00:37:04.400
So things that had the
specific change of one nature,

00:37:04.400 --> 00:37:08.400
commit them all together,
have the same commit log and all.

00:37:08.520 --> 00:37:13.270
So we can also inspect the
file and see all the different

00:37:13.270 --> 00:37:19.330
revisions that we've had here in
the SCM tab of the File Inspector.

00:37:19.440 --> 00:37:22.400
We've got essentially seven
revisions since the 1.1.

00:37:22.400 --> 00:37:26.400
So let's pick a couple of
those and compare them.

00:37:28.120 --> 00:37:32.370
So select a couple arbitrary revisions,
hit Compare, and again this launches

00:37:32.370 --> 00:37:36.980
File Merge and shows us the
comparison here in File Merge.

00:37:37.060 --> 00:37:41.000
In this case there's 10 differences
and you can move between those.

00:37:41.320 --> 00:37:45.000
Okay, so that's it for our SEM demo.

00:37:45.030 --> 00:37:46.980
That's File Merge for you.

00:37:53.490 --> 00:37:57.160
Now let's talk about configuring,
building and debugging targets.

00:37:57.160 --> 00:37:58.930
So what is a target?

00:37:59.010 --> 00:38:01.800
Targets are really the face of the
build system in Project Builder.

00:38:01.910 --> 00:38:05.090
A target just defines a product to build.

00:38:05.240 --> 00:38:08.700
A project consists of
one or more targets,

00:38:08.850 --> 00:38:10.120
presumably.

00:38:10.120 --> 00:38:14.130
Probably wouldn't be that interesting
to have a project without targets.

00:38:14.270 --> 00:38:18.400
Targets can depend on other targets,
and we'll talk about that.

00:38:18.400 --> 00:38:22.580
You can have build styles to allow
different variations of the same target.

00:38:22.580 --> 00:38:26.380
This is a really innovative capability.

00:38:26.380 --> 00:38:29.820
Build phases control when
you're building a project,

00:38:29.840 --> 00:38:32.600
a specific target, how does it get built.

00:38:32.630 --> 00:38:34.340
I'm not going to go into detail on this.

00:38:34.340 --> 00:38:37.100
You can learn lots about this in
Project Builder in depth tomorrow

00:38:37.100 --> 00:38:40.200
morning with Mike and the team.

00:38:40.310 --> 00:38:43.500
Each user has an active build
style and an active target.

00:38:43.500 --> 00:38:47.120
So I might be building,
working on the framework of the project.

00:38:47.120 --> 00:38:49.320
You might be working
on the test tool of it,

00:38:49.320 --> 00:38:51.700
and he might be working
on the app portion.

00:38:51.700 --> 00:38:52.560
When we build,
it's a very simple process.

00:38:52.560 --> 00:38:56.500
that might do different
things for each of us.

00:38:57.050 --> 00:38:58.840
There's a bunch of
standard types of targets,

00:38:58.890 --> 00:39:01.930
so we've talked a lot about apps,
bundles, etc.

00:39:02.000 --> 00:39:06.210
You can add as many new targets to a
project as you want by just going to the

00:39:06.210 --> 00:39:09.330
New Target menu item in the Project menu.

00:39:09.640 --> 00:39:11.870
There's a couple of special
types of targets that we

00:39:11.870 --> 00:39:13.370
should highlight a little bit.

00:39:13.530 --> 00:39:17.290
We have aggregate targets that
don't build anything themselves,

00:39:17.490 --> 00:39:20.890
they just express
dependencies on other targets.

00:39:21.030 --> 00:39:24.180
So this can be useful,
let's say that I have a set

00:39:24.290 --> 00:39:28.230
of command line tools like
the file commands on Mac OS X.

00:39:28.320 --> 00:39:31.840
You can put all those in one project
and have an aggregate that builds them.

00:39:31.840 --> 00:39:35.130
It is useful to have that as the
first target and I'll explain

00:39:35.130 --> 00:39:36.660
why in a couple of minutes.

00:39:36.860 --> 00:39:40.240
You can also have, if you have,
normally Project Builder controls

00:39:40.390 --> 00:39:41.900
the build system for you.

00:39:41.900 --> 00:39:45.140
You don't ever have to edit
a make file or anything else.

00:39:45.210 --> 00:39:48.100
But there's a lot of power to change
that if you wish with the build

00:39:48.100 --> 00:39:49.790
phases you can learn about tomorrow.

00:39:50.130 --> 00:39:53.590
You can also have targets where you
control the build system or you're

00:39:53.590 --> 00:39:56.730
using open source projects and
you don't want to change the build

00:39:56.770 --> 00:39:58.410
system that somebody else set up.

00:39:58.510 --> 00:40:01.440
You can just create a legacy
make file for that and you can

00:40:01.440 --> 00:40:03.290
specify what build tool it is.

00:40:03.300 --> 00:40:06.100
It might be make,
but it could be any other

00:40:06.100 --> 00:40:08.290
command on the system as well.

00:40:08.920 --> 00:40:11.800
So let's look a little bit
more at target dependencies.

00:40:11.800 --> 00:40:15.860
So you might have, for example,
if your application is well factored,

00:40:16.220 --> 00:40:19.290
you could have an application
and a test tool for it.

00:40:19.480 --> 00:40:23.260
So, for example,
Project Builder itself is a small

00:40:23.260 --> 00:40:27.030
application that links with a
few large private frameworks

00:40:27.170 --> 00:40:28.960
that have all the functionality.

00:40:29.060 --> 00:40:33.220
And then we have tools that link
with those frameworks as well.

00:40:33.390 --> 00:40:38.540
So in this case we have the My Framework
target represented in the diagram there.

00:40:38.600 --> 00:40:40.660
My application depends on My Framework.

00:40:40.880 --> 00:40:42.560
My test tool depends on My Framework.

00:40:42.670 --> 00:40:45.830
You could select any of those as
your active target and it would

00:40:45.830 --> 00:40:48.020
ensure that the framework gets built.

00:40:48.110 --> 00:40:51.750
You could also have an aggregate
that depends on all three here.

00:40:51.930 --> 00:40:55.110
So the aggregate, again,
the aggregate doesn't

00:40:55.120 --> 00:40:58.790
build anything itself,
but it ensures that the others get built.

00:40:58.910 --> 00:41:03.330
Having the framework there is
optional from the aggregate because

00:41:03.330 --> 00:41:05.840
it'll get built once regardless.

00:41:05.910 --> 00:41:08.280
You can configure your target
through the target editor.

00:41:08.280 --> 00:41:10.820
We're not going to go
through this in great depth,

00:41:11.050 --> 00:41:14.630
but I'll talk about
different aspects of this.

00:41:14.820 --> 00:41:19.780
So to set up your build phases,
indicating what files are in your

00:41:19.780 --> 00:41:24.940
target and how to process them,
what source files do we compile,

00:41:25.090 --> 00:41:31.180
etc., you would go through the files and
build phases aspect of the target editor.

00:41:31.230 --> 00:41:34.010
For build settings,
this is where you would control

00:41:34.010 --> 00:41:37.980
your compiler and linker options,
things like your optimization settings,

00:41:38.050 --> 00:41:40.360
do you want to generate
debug symbols or not,

00:41:40.360 --> 00:41:43.340
the install path of your project.

00:41:43.520 --> 00:41:47.180
And for advanced capabilities,
there is an expert editor down

00:41:47.340 --> 00:41:51.290
there that lets you set any build
variable and values for that.

00:41:51.400 --> 00:41:55.860
That can be useful in some circumstances.

00:41:56.560 --> 00:42:02.140
The InfoP list that we showed previously
in the new project that we had created,

00:42:02.140 --> 00:42:06.420
there's a bundle editor here
or bundle settings that you can

00:42:06.500 --> 00:42:10.290
change the different configuration
settings for applications,

00:42:10.380 --> 00:42:13.390
for frameworks, for bundles,
for plug-ins.

00:42:13.400 --> 00:42:16.560
So you can set, for example,
the identifier that the

00:42:16.560 --> 00:42:21.900
preference system would use,
the type and signature for applications.

00:42:21.900 --> 00:42:23.430
You can set what the icon is.

00:42:23.440 --> 00:42:27.700
This is also where you would set up
what the document types your project,

00:42:27.700 --> 00:42:29.780
your application could handle.

00:42:29.780 --> 00:42:34.780
So you can set up as a reader or
as an editor of document types.

00:42:34.840 --> 00:42:37.230
Or if you just want to put
it out on the pasteboard,

00:42:37.240 --> 00:42:40.900
you can set it up with none if you don't
actually handle documents of that type.

00:42:40.940 --> 00:42:45.160
Then for the debugging system,
there's a number of things

00:42:45.160 --> 00:42:49.000
you can configure about how to
launch your executable here for

00:42:49.000 --> 00:42:50.480
either running or debugging.

00:42:50.480 --> 00:42:53.380
So let's say that you have a plugin.

00:42:53.380 --> 00:42:55.970
So you have a plugin that you're
working on and that's all that's

00:42:56.070 --> 00:42:57.320
in your project is a plugin.

00:42:57.420 --> 00:43:01.620
Well, we can't just launch that and
have it do anything interesting.

00:43:01.620 --> 00:43:04.440
So we have to specify an
application as the context

00:43:04.610 --> 00:43:06.620
that that plugin would run in.

00:43:06.620 --> 00:43:08.280
This is where you would do that.

00:43:08.280 --> 00:43:12.640
You can hear a lot more about that in
the debugging session on Friday morning.

00:43:13.740 --> 00:43:17.200
All this ties into a very powerful
build system that does automatic

00:43:17.440 --> 00:43:19.610
dependency analysis of your headers.

00:43:19.740 --> 00:43:22.040
Again, I've mentioned there's
no make files to edit.

00:43:22.140 --> 00:43:25.360
We do leverage a lot of command
line utilities underneath this.

00:43:25.360 --> 00:43:28.250
So Jam is a utility
that's a lot like Make.

00:43:28.470 --> 00:43:32.600
That's what Project Builder calls,
but very few of you should ever

00:43:32.710 --> 00:43:34.870
need to look at Jam files at all.

00:43:35.880 --> 00:43:39.630
We talk to a lot of lower
level compiler tools,

00:43:39.630 --> 00:43:43.770
so GCC for C-based languages,
Res for .R files,

00:43:43.970 --> 00:43:46.800
Java C or Jyx for Java compiling.

00:43:46.860 --> 00:43:51.140
If you want lots of access to the
full power of Unix underneath you,

00:43:51.180 --> 00:43:53.380
it's there for you,
either in script build

00:43:53.380 --> 00:43:56.870
phases that you can put in,
find more about that tomorrow,

00:43:56.870 --> 00:44:00.440
or the legacy make file
targets that I talked about.

00:44:00.590 --> 00:44:02.110
Where do build results go?

00:44:02.290 --> 00:44:04.450
So normally when you hit
build in your project,

00:44:04.560 --> 00:44:07.440
it goes into a build
directory in that project.

00:44:07.570 --> 00:44:13.060
But you might want to specify a common
build directory for all of your projects.

00:44:13.150 --> 00:44:17.260
And this would allow Project Builder
to-- let's say that you had multiple

00:44:17.260 --> 00:44:20.900
different projects where you've got
an application in one project and it

00:44:20.900 --> 00:44:24.720
depends on three frameworks and you've
got each of those in different projects.

00:44:24.790 --> 00:44:27.120
If you set them all up to
build into the same place,

00:44:27.120 --> 00:44:30.090
then without actually
installing that on your system,

00:44:30.480 --> 00:44:33.070
Project Builder can automatically
configure the dynamic

00:44:33.170 --> 00:44:36.290
loader to find all of that,
your development versions

00:44:36.390 --> 00:44:37.850
of all of that when you run.

00:44:38.020 --> 00:44:41.360
So again,
find more details on Friday about that.

00:44:41.360 --> 00:44:46.600
You would set that either for all of your
projects in your building preferences

00:44:46.720 --> 00:44:51.060
panel or you might have sets of projects
that you want to work on together.

00:44:51.060 --> 00:44:54.930
So put this set over here,
put this set over here when you build.

00:44:55.040 --> 00:44:57.580
That's what-- when
inspecting the project,

00:44:57.580 --> 00:44:58.680
you might want to set that up.

00:44:58.960 --> 00:45:03.780
You can change on each project's
basis where that project builds to

00:45:03.780 --> 00:45:06.540
and that's why you would do that.

00:45:07.430 --> 00:45:10.400
The compiler,
I'd mentioned that we're using GCC,

00:45:10.520 --> 00:45:13.540
so we use GCC 2.95.2 currently.

00:45:13.540 --> 00:45:17.490
We build all of Mac OS X with this,
so we've cranked a lot of

00:45:17.500 --> 00:45:20.300
code through this compiler,
very heavily tested.

00:45:20.300 --> 00:45:25.120
It supports all of our C-based languages,
and as you may have already heard,

00:45:25.120 --> 00:45:30.620
we are working on resurrecting Objective
C++ to allow Cocoa applications to take

00:45:30.620 --> 00:45:33.550
advantage of existing C++ libraries.

00:45:33.560 --> 00:45:38.930
Go to the compiler technology session
with John Graziano and company on

00:45:39.100 --> 00:45:42.570
Thursday morning to hear more about that.

00:45:42.600 --> 00:45:49.570
You've also got support for
Velocity Engine in the compiler.

00:45:50.100 --> 00:45:56.190
C++, GCC is a fairly strict about
its anti-compliance on things.

00:45:56.230 --> 00:46:01.000
That's important to know if you're
coming in from other environments.

00:46:01.050 --> 00:46:06.000
We've done some performance improvements
for C++ code generation recently,

00:46:06.000 --> 00:46:10.000
so we've improved the exception
handling and coalescing of symbols.

00:46:10.000 --> 00:46:14.000
So you can get more information about
that again from the compiler session.

00:46:14.000 --> 00:46:20.000
We are going to be working with the
latest versions of GCC as it advances.

00:46:20.000 --> 00:46:25.960
So one thing that you should
definitely know is that the C++ ABI,

00:46:26.040 --> 00:46:32.000
the Application Binary Interface,
is changing between GCC 295 and GCC 3.

00:46:32.100 --> 00:46:38.000
So you don't want to have any shared
libraries that export C++ API.

00:46:38.000 --> 00:46:41.190
Put a C wrapper around that.

00:46:41.900 --> 00:48:06.100
[Transcript missing]

00:48:07.270 --> 00:48:10.720
Now I mentioned that Project Builder
has been factored into an

00:48:10.720 --> 00:48:12.680
application and some frameworks.

00:48:12.850 --> 00:48:17.310
One of the tools that also links with
those frameworks is called PBX Build.

00:48:17.660 --> 00:48:21.280
This allows you to do automation
of your builds so you can have a

00:48:21.280 --> 00:48:26.100
Unix cron job going nightly to build
all the sources of your project.

00:48:26.140 --> 00:48:29.140
Apple does this kind of
thing with all of Mac OS X.

00:48:29.140 --> 00:48:31.860
We use PBX Build command
to build everything.

00:48:31.970 --> 00:48:34.230
So again,
this uses the same build machinery

00:48:34.230 --> 00:48:35.800
as Project Builder itself.

00:48:35.930 --> 00:48:42.560
By default, if you just run PBX Build,
it builds the first target in your list.

00:48:42.660 --> 00:48:45.870
So this is where having an
aggregate here as the first

00:48:45.960 --> 00:48:47.860
target might be useful to you.

00:48:47.920 --> 00:48:51.860
If you want to make sure that all
or most of your project gets built.

00:48:51.920 --> 00:48:55.480
The invocations of this look
just like invoking make.

00:48:55.740 --> 00:49:00.360
So PBX Build clean or PBX Build install.

00:49:00.420 --> 00:49:03.450
So if you're going to set things
up to actually put them in to

00:49:03.630 --> 00:49:06.560
the install places you want,
we don't currently have a way

00:49:06.570 --> 00:49:07.960
of doing this from the IDE.

00:49:07.960 --> 00:49:09.950
You would do this from the command line.

00:49:10.070 --> 00:49:13.530
Some people ask us,
well why does it build into /temp?

00:49:13.640 --> 00:49:16.960
Well, we don't think it's a good thing
to by default build what could be

00:49:16.960 --> 00:49:20.940
a buggy product directly into the
install directories on your system.

00:49:21.110 --> 00:49:24.680
So we put it in /temp
and the hierarchy there.

00:49:24.810 --> 00:49:27.840
If you want it installed
directly when you build,

00:49:27.920 --> 00:49:30.910
set destroot equals slash.

00:49:31.420 --> 00:49:34.240
For debugging,
we have an extensible architecture

00:49:34.240 --> 00:49:37.880
that talks to GDB for debugging
all the C-based languages,

00:49:38.020 --> 00:49:41.240
talks to the Java VM for debugging Java.

00:49:41.430 --> 00:49:43.860
It's full graphical
source level debugging,

00:49:43.860 --> 00:49:46.150
so threads, stack traces, variables.

00:49:46.300 --> 00:49:50.300
You can have breakpoints that
are saved on a per user basis.

00:49:50.300 --> 00:49:54.260
They're saved not only between
different runs of the debugger,

00:49:54.370 --> 00:49:57.300
but between different runs
of the IDE as a whole.

00:49:57.300 --> 00:50:02.630
And again, I talked about how the
Project Builder system controls

00:50:02.630 --> 00:50:07.300
the dynamic loader to use multiple
projects at a time for debugging.

00:50:07.300 --> 00:50:10.300
So development versions
of your frameworks.

00:50:10.300 --> 00:50:14.170
And for those of you who
aren't familiar with GDB,

00:50:14.300 --> 00:50:17.380
it's a very powerful open source
debugger that comes with the

00:50:17.380 --> 00:50:21.200
Mac OS X development tools,
handles all your C-based languages.

00:50:21.450 --> 00:50:26.300
You can handle arbitrary expression
evaluation or invoke functions

00:50:26.300 --> 00:50:27.300
to get the values of open source.

00:50:27.300 --> 00:50:30.300
And it's also able to set opaque
data types such as those from Carbon.

00:50:30.420 --> 00:50:33.300
You can set commands and
conditions on breakpoints.

00:50:33.300 --> 00:50:36.270
And it's got a very
powerful macro capability.

00:50:36.300 --> 00:50:39.300
Again,
the debugger session on Friday morning,

00:50:39.300 --> 00:50:41.570
you can learn lots more
about not only C language

00:50:41.570 --> 00:50:44.300
debugging from Project Builder,
but Java as well.

00:50:44.300 --> 00:50:47.300
And lots about advanced features of GDB.

00:50:47.300 --> 00:50:52.300
So I'd like to show you some quick rounds
of building and debugging demo here.

00:50:52.300 --> 00:50:57.300
So we can switch back to demo six,
I believe it is.

00:51:02.570 --> 00:51:07.610
So if we go back and bring
up that Sketch project again,

00:51:08.090 --> 00:51:11.070
We had previously made some
changes to the project,

00:51:11.080 --> 00:51:14.980
so let's go ahead and build it and
see what we've got at this point.

00:51:15.000 --> 00:51:15.980
So we hit Build.

00:51:15.980 --> 00:51:20.160
The project was previously compiled,
so in this case we do an incremental

00:51:20.160 --> 00:51:23.000
build with just the SKT draw document.

00:51:23.000 --> 00:51:26.840
We can close up the Build tab here
because we got a successful build.

00:51:27.000 --> 00:51:30.000
Now let's go ahead and run.

00:51:30.000 --> 00:51:34.000
So we can hit the little monitor
icon there to run the application.

00:51:34.000 --> 00:51:37.000
So it fires up,
brings it to the foreground,

00:51:37.000 --> 00:51:40.690
but we can see that in
the run tool pane here,

00:51:41.090 --> 00:51:44.940
we got the console output from the NS log
message that we had previously put in.

00:51:45.030 --> 00:51:46.630
So great.

00:51:47.230 --> 00:51:50.000
But let's actually take
a look at debugging.

00:51:50.000 --> 00:51:54.400
So let's quit out of this at
this point and let's say that

00:51:54.400 --> 00:51:56.990
we want to debug the project.

00:51:57.000 --> 00:52:00.240
Now by default,
when you build within Project Builder,

00:52:00.240 --> 00:52:02.950
it assumes that you're doing development.

00:52:03.060 --> 00:52:04.000
So it builds for debugging.

00:52:04.000 --> 00:52:07.000
That's why some of you
look at it and say,

00:52:07.000 --> 00:52:10.060
"Why is my executable so large?" That's
because it's got debugging symbols

00:52:10.060 --> 00:52:13.180
in it until you build for deployment,
which we'll find more

00:52:13.430 --> 00:52:15.000
about that tomorrow.

00:52:15.540 --> 00:52:21.590
So... Sorry, I got ahead of myself here.

00:52:22.810 --> 00:52:26.730
Okay,
so what I'd like to do is I remember that

00:52:26.800 --> 00:52:31.080
there were some issues there with the...

00:52:31.570 --> 00:52:34.090
Align Left Edges methods of Sketch.

00:52:34.210 --> 00:52:37.770
So let's go and find
that method in the code.

00:52:41.600 --> 00:52:46.290
We select the source for that and
we can put a breakpoint here on that

00:52:46.290 --> 00:52:48.440
by clicking in the breakpoint well.

00:52:48.790 --> 00:52:50.530
Actually,
why don't you bring up the breakpoints

00:52:50.530 --> 00:52:54.140
tab and just show that so now you can
see where the breakpoint is listed there.

00:52:54.140 --> 00:52:55.590
You can enable or disable it.

00:52:55.610 --> 00:53:00.350
Let's go ahead and go
back into the application.

00:53:00.700 --> 00:53:06.800
[Transcript missing]

00:53:08.100 --> 00:53:11.670
fires up GDB on it and
launches the project.

00:53:11.670 --> 00:53:14.590
So now we can draw a few objects here.

00:53:15.390 --> 00:53:23.420
Couple objects and do a select all
and then go and say align left edges.

00:53:24.100 --> 00:53:27.360
Boom, we hit the break point.

00:53:27.360 --> 00:53:32.300
Now we can see a variety of
things here shown in the debugger.

00:53:32.300 --> 00:53:35.470
We can see that we've got the
stack back trace where we stopped.

00:53:35.500 --> 00:53:40.100
So you can see some stack frames are
shown in bold and some are in gray.

00:53:40.100 --> 00:53:42.860
So we have source code for
those that are shown in bold.

00:53:42.860 --> 00:53:44.860
For the ones in gray,
they're in the frameworks.

00:53:44.860 --> 00:53:46.230
We don't have source code for that.

00:53:46.240 --> 00:53:52.230
We've got a threads pop-up to show the
different threads in your application.

00:53:52.280 --> 00:53:54.080
Most Mac OS X applications
have more than one thread,

00:53:54.080 --> 00:53:58.140
although keep it minimal.

00:53:58.260 --> 00:54:02.100
We've got variable inspection here
for all your different variable types.

00:54:02.180 --> 00:54:06.750
In the May 2001 tool CD,
you can now set the values of variables

00:54:06.790 --> 00:54:12.940
when you're debugging in Java,
and we have worked on that for C as well.

00:54:13.010 --> 00:54:15.830
If we start stepping
through the code here,

00:54:15.920 --> 00:54:20.200
we can see that variables
start to turn red if they've

00:54:20.210 --> 00:54:21.930
changed in the previous step.

00:54:21.990 --> 00:54:24.270
So we can go down and look
at first bounds and say,

00:54:24.270 --> 00:54:27.890
"Okay, here's a structure." We can see
the contents of that structure.

00:54:27.940 --> 00:54:31.940
When we step over the line here
that's going to set first bounds,

00:54:32.040 --> 00:54:34.930
it shows us that all the values
of the structure had changed.

00:54:34.940 --> 00:54:41.940
And if we step through a little bit,
for Cocoa programming,

00:54:42.050 --> 00:54:44.930
seeing the description of an
object is a very important thing.

00:54:44.940 --> 00:54:48.010
So if you want to do that,
what you have to do currently

00:54:48.100 --> 00:54:51.940
is bring down the GDB console,
do a PO for Cocoa.

00:54:51.940 --> 00:54:56.630
Do a print object of a particular object.

00:54:56.980 --> 00:54:58.930
So in this case, Curr graphic.

00:54:58.940 --> 00:55:00.850
We can print the object there.

00:55:00.980 --> 00:55:03.870
We'll be providing better user
interface for this as well.

00:55:03.940 --> 00:55:07.940
And again, the debugging session will go
into more detail on these things.

00:55:07.950 --> 00:55:09.940
And then if we were to
step around the loop,

00:55:09.940 --> 00:55:13.940
we'd see it continue to
increment the loop variables.

00:55:15.810 --> 00:55:20.100
So we can see that now I is on value two,
for example.

00:55:20.150 --> 00:55:20.940
Okay?

00:55:20.940 --> 00:55:25.060
So that's it for that demo.

00:55:25.130 --> 00:55:26.830
Thanks, Mike.

00:55:32.980 --> 00:55:36.760
Okay, let's take a look at what's on the
May 2001 Developer Tools CD that

00:55:36.760 --> 00:55:38.190
you just got in your packet.

00:55:38.210 --> 00:55:40.820
Some of you probably had
high expectations that,

00:55:40.930 --> 00:55:43.350
"Ooh,
I hope my pet feature is fixed." Well,

00:55:43.350 --> 00:55:47.230
we've got full support for
WebObjects 5 development here,

00:55:47.230 --> 00:55:50.900
so you can still do all your
other development as well.

00:55:50.900 --> 00:55:54.230
But the primary theme again
was WebObjects 5 for both

00:55:54.230 --> 00:55:55.760
Project Builder and Interface Builder.

00:55:55.900 --> 00:56:00.560
The WebObjects 5 developer
packages themselves are included

00:56:00.740 --> 00:56:02.820
on the CD this time around.

00:56:02.960 --> 00:56:07.730
We don't plan to do that in the future,
but we'll give exposure

00:56:07.730 --> 00:56:09.650
to WebObjects this time.

00:56:10.180 --> 00:56:12.470
There's also a limited
version of the runtime,

00:56:12.470 --> 00:56:15.240
so it's a time-limited,
restricted version of the

00:56:15.240 --> 00:56:18.820
runtime that you can test your
WebObjects applications with.

00:56:18.900 --> 00:56:21.880
There's new system documentation.

00:56:21.900 --> 00:56:23.900
There's some additional
examples for AppKit,

00:56:23.900 --> 00:56:25.900
like I think one for the use of the app.

00:56:25.900 --> 00:56:27.900
There's also some examples
for the NS Toolbar.

00:56:27.900 --> 00:56:30.900
And then some Interface
Builder examples as well that

00:56:30.900 --> 00:56:32.650
Henri will probably talk about.

00:56:32.940 --> 00:56:37.850
On the Project Builder enhancements,
it's been localized into Japanese.

00:56:37.910 --> 00:56:41.820
General purpose enhancements,
you can now continue your build after

00:56:41.820 --> 00:56:43.890
there's been an error in one file.

00:56:43.900 --> 00:56:47.840
So it can go off and continue to
try to compile all your other files.

00:56:47.970 --> 00:56:49.730
That's on the building preferences.

00:56:49.940 --> 00:56:54.600
There's a check syntax check
mark in the right portion of the

00:56:54.620 --> 00:56:56.690
navigation bar with which you can do,
essentially,

00:56:56.690 --> 00:57:00.890
a single file compile check to make sure
that you're using the syntax correctly.

00:57:00.900 --> 00:57:04.900
I talked about the precompiled,
implicitly included header files.

00:57:04.900 --> 00:57:07.900
That's in what you've just received.

00:57:07.900 --> 00:57:12.900
There's build support for
HeaderDoc and some bug fixes as well.

00:57:13.580 --> 00:57:18.000
I talked about enhancements for
Java so you can now merge JAR files

00:57:18.000 --> 00:57:20.900
automatically during the build process.

00:57:21.010 --> 00:57:26.060
There were a couple of problems with
building large projects for Java,

00:57:26.060 --> 00:57:28.910
hitting command line length
restrictions and things like that.

00:57:29.000 --> 00:57:29.780
Those have been fixed.

00:57:29.840 --> 00:57:32.460
And build performance improvements.

00:57:32.550 --> 00:57:35.770
So if you've indexed your
project and you're getting,

00:57:35.890 --> 00:57:38.560
therefore getting
Java dependency analysis,

00:57:38.780 --> 00:57:43.840
we now are again throwing multiple
files at the compiler at the same time

00:57:43.840 --> 00:57:46.080
which processes them more quickly.

00:57:46.080 --> 00:57:48.790
There's build support for Java wrappers.

00:57:48.830 --> 00:57:52.120
So this is a Java wrapper
around Objective-C frameworks.

00:57:52.190 --> 00:57:58.100
And I mentioned that you can set
values when you're debugging Java.

00:57:58.800 --> 00:59:25.200
[Transcript missing]

00:59:28.300 --> 00:59:30.200
So yeah,
those of you who have used Help Viewer

00:59:30.200 --> 00:59:35.320
to try to access developer documentation,
you can sometimes see that it

00:59:35.460 --> 00:59:39.670
might be nice to have faster,
more flexible viewing there.

00:59:39.930 --> 00:59:41.240
And then some underlying support.

00:59:41.240 --> 00:59:43.400
I talked about Objective C++.

00:59:43.470 --> 00:59:46.190
One other thing we're working on
is two-level namespace supports

00:59:46.280 --> 00:59:50.200
in the linker and loader that
will let us add new APIs to our

00:59:50.200 --> 00:59:54.900
frameworks without breaking your
applications by conflicting with that.

00:59:55.100 --> 00:59:59.140
So you can find out more about
that in the compiler session.

00:59:59.480 --> 01:00:02.090
So let's talk about the
class browser a little bit.

01:00:02.290 --> 01:00:06.880
So Cocoa is a very big framework
that's new to a lot of people.

01:00:07.020 --> 01:00:09.180
It's really not hard
to learn Objective C,

01:00:09.180 --> 01:00:10.160
the language.

01:00:10.430 --> 01:00:13.720
But learning the frameworks
is always the hard part.

01:00:14.010 --> 01:00:15.880
What can we do to help you there?

01:00:16.020 --> 01:00:19.700
So that's what a class
browser can help with.

01:00:19.910 --> 01:00:23.300
For example,
where is this class in the hierarchy?

01:00:23.520 --> 01:00:27.970
What's inherited, etc.? Let's see a demo.

01:00:31.580 --> 01:00:33.980
So if we can switch back to demo, great.

01:00:34.050 --> 01:00:40.860
So going over to the other
machine that's got the special

01:00:40.860 --> 01:00:44.500
sneak preview version here,
we can see that we've now got

01:00:44.500 --> 01:00:47.620
a fifth tab here in the project
structure tabs on the left.

01:00:47.670 --> 01:00:51.460
So a classes tab that
when we bring this over,

01:00:51.460 --> 01:00:56.740
we can see that it's got the NSObject
and NSProxy root classes for Cocoa.

01:00:56.740 --> 01:01:01.470
So we can navigate down in and see all
the different subclasses of NSObject.

01:01:01.530 --> 01:01:08.480
We can scroll down through that and see,
for example, NSResponder.

01:01:08.480 --> 01:01:10.330
We might want to look at what's in that.

01:01:10.330 --> 01:01:14.490
And we can see that NSView here.

01:01:14.620 --> 01:01:16.920
So scrolling on down
a little bit further,

01:01:16.920 --> 01:01:19.530
we can see, oh, hey, look,
there's some classes

01:01:19.530 --> 01:01:21.130
highlighted in bold here.

01:01:21.310 --> 01:01:25.740
Now that indicates that they're classes
that are actually in your project

01:01:25.740 --> 01:01:28.200
as opposed to in the frameworks.

01:01:28.450 --> 01:01:33.380
So we can click on a class and we can
see the members that are defined there.

01:01:33.420 --> 01:01:37.210
Click on one of the members and we
can see the declaration of that.

01:01:37.210 --> 01:01:39.300
So that's pretty cool.

01:01:39.300 --> 01:01:42.640
But let's say that I knew
the name of the class,

01:01:42.640 --> 01:01:46.300
but I didn't know where
it was in the hierarchy.

01:01:46.420 --> 01:01:50.270
Well we've got some options you can
set up down here in a pop-up to say,

01:01:50.410 --> 01:01:53.300
let's say, let's look at a flat
listing of all the classes.

01:01:53.300 --> 01:01:56.520
So now we see this all alphabetical,
but wow,

01:01:56.520 --> 01:01:59.300
that's still kind of overwhelming.

01:01:59.300 --> 01:02:01.300
Why don't you just show me
my project classes for now?

01:02:01.300 --> 01:02:04.300
And I see a list of just
the projects in my class.

01:02:04.300 --> 01:02:12.130
So we can select one of those,
say SKT Image, and we can flip back to

01:02:12.150 --> 01:02:14.180
the hierarchy here now.

01:02:14.350 --> 01:02:18.190
And it shows us, wow, okay,
that's a subclass of SKT graphic

01:02:18.340 --> 01:02:21.300
and you can look back
through the class hierarchy.

01:02:21.630 --> 01:02:25.300
So if we were to

01:02:25.990 --> 01:02:27.940
Take a look at, I believe, next.

01:02:27.940 --> 01:02:29.500
See the inherited members.

01:02:29.520 --> 01:02:31.000
Inherited members, yes.

01:02:31.110 --> 01:02:33.980
So if we look at the options,
there's a lot of power

01:02:33.980 --> 01:02:35.930
in this options panel.

01:02:36.110 --> 01:02:40.510
There's how you would set up the
different option sets for the pop-up.

01:02:40.600 --> 01:02:42.100
You can configure that.

01:02:42.180 --> 01:02:43.800
We'll have some default sets.

01:02:43.800 --> 01:02:46.120
There's a Show Inherited
Members checkbox here.

01:02:46.120 --> 01:02:49.680
So if we check that,
now we can see that in gray,

01:02:49.680 --> 01:02:55.730
we're seeing all the members that we're
inheriting from the frameworks classes.

01:02:55.880 --> 01:03:00.320
So, but what are these book
icons next to some of these?

01:03:00.360 --> 01:03:03.720
Let's take a look at one of those, Mike.

01:03:04.150 --> 01:03:07.090
So we click on the book for
the class method and boom,

01:03:07.100 --> 01:03:12.800
the HTML documentation for NSObject
shows up right here in Project Builder.

01:03:16.040 --> 01:03:19.560
So we can also,
because we had previously showed that

01:03:19.560 --> 01:03:24.310
files can be opened in separate windows,
let's take a look at NS Bezier

01:03:24.310 --> 01:03:26.400
path off in a separate window.

01:03:26.400 --> 01:03:27.350
How would we do that?

01:03:27.380 --> 01:03:30.660
Let's just go down,
double click on the book icon

01:03:30.660 --> 01:03:33.020
for set default line join style.

01:03:33.020 --> 01:03:36.930
And off into a separate window,
the HTML comes up.

01:03:36.930 --> 01:03:41.840
So you can copy and paste
out of this multi-window.

01:03:42.640 --> 01:03:47.020
We're really working to integrate this
seamlessly and well into Project Builder.

01:03:47.040 --> 01:03:52.280
So it's not ready to ship yet,
but we think you'll like it

01:03:52.370 --> 01:03:54.420
when it gets fully there.

01:03:54.420 --> 01:03:56.790
Okay, thanks Mike.

01:04:02.410 --> 01:04:04.520
So what else is on the drawing board?

01:04:04.670 --> 01:04:07.760
Well, one of the things we've heard
loud and clear is that some of

01:04:07.760 --> 01:04:10.230
you would like more flexible UI.

01:04:10.370 --> 01:04:13.030
So, for example,
we showed the tools panes coming

01:04:13.030 --> 01:04:14.730
down in the project window.

01:04:14.800 --> 01:04:18.790
It might be nice to be able to have those
outside of the window and in general

01:04:18.790 --> 01:04:21.070
have a more flexible multi-window UI.

01:04:21.310 --> 01:04:24.120
Yes, we've heard that.

01:04:24.860 --> 01:04:28.300
And yes, we'll be working on that.

01:04:28.330 --> 01:04:30.960
Other things,
plug-in editors and plug-in build tools.

01:04:30.960 --> 01:04:35.480
We've been migrating the project
towards that capability already.

01:04:35.480 --> 01:04:38.840
So the documentation viewing
that you just saw is actually

01:04:38.840 --> 01:04:40.610
implemented as an editor plug-in.

01:04:40.980 --> 01:04:44.740
This is letting us get the
APIs to a state where in a

01:04:45.020 --> 01:04:49.800
bit we'll be able to bring on,
make those APIs more public.

01:04:49.800 --> 01:04:53.910
We're looking for tighter integration
with other tools such as Interface

01:04:54.050 --> 01:04:58.180
Builder and the performance tools so
the ability to directly launch malloc

01:04:58.290 --> 01:05:02.800
debug or sampler or object alloc on your
application from within Project Builder.

01:05:02.800 --> 01:05:08.380
And then on the compiler side of things,
we need to do a lot of work on faster

01:05:08.380 --> 01:05:14.720
C++ compilation and we are also working
on code generation improvements as well.

01:05:14.810 --> 01:05:18.790
So in summary,
Project Builder is a very powerful idea.

01:05:18.800 --> 01:05:20.650
We're working hard to
improve it in a lot of ways.

01:05:20.820 --> 01:05:27.120
We've got a great team working
on this and we're continuing

01:05:27.230 --> 01:05:28.680
to build up that team.

01:05:28.820 --> 01:05:30.800
Send us your feedback.

01:05:30.800 --> 01:05:32.740
Many of you already have been.

01:05:32.860 --> 01:05:36.680
And most important,
finish up and ship your applications.

01:05:36.800 --> 01:05:39.800
So with that,
that finishes up what I had to say.

01:05:39.800 --> 01:05:42.770
There's a variety of
information pages out here.

01:05:42.830 --> 01:05:46.020
I'd like to bring Godfrey
back on the stage for what

01:05:46.020 --> 01:05:47.800
remaining Q&A time we have.

01:05:50.480 --> 01:05:51.340
Thank you very much, Dave.

01:05:51.340 --> 01:05:55.640
I think we need a big hand for
Dave and the Project Builder team.

01:05:57.900 --> 01:06:00.920
I think the advancements we're making
with Project Builder are more than just

01:06:00.920 --> 01:06:05.040
impressive and that it's going to be
a tremendous tool for all of your use.

01:06:05.080 --> 01:06:09.500
This is just a roadmap to all the further
tools-related sessions through the show.

01:06:09.640 --> 01:06:13.040
We felt that in this session it was
useful to give this to you again so

01:06:13.050 --> 01:06:14.620
you have an idea where we're going.

01:06:14.900 --> 01:06:18.420
The next session in this hall
is Interface Builder and we'll

01:06:18.420 --> 01:06:20.500
be doing a similar presentation.

01:06:20.550 --> 01:06:24.970
And now let's kind of walk through these.

01:06:26.210 --> 01:06:29.700
That's my information in
case you need to contact us.

01:06:29.700 --> 01:06:34.850
The Mac OS Tools feedback mailing
address sends information to all of the

01:06:34.920 --> 01:06:39.050
development team on a one-by-one basis,
feature requests, feature enhancements.

01:06:39.450 --> 01:06:41.050
Remember also to file bugs.

01:06:41.060 --> 01:06:44.340
When you run into bugs,
use the bug reporter.

01:06:44.340 --> 01:06:47.890
It's fully accessible for this project.