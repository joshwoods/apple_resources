WEBVTT

00:00:00.667 --> 00:00:09.442
[ Silence ]

00:00:11.144 --> 00:00:12.646
>> Hello, everyone.

00:00:12.646 --> 00:00:14.481
I’m Tim Hatcher.

00:00:14.481 --> 00:00:15.115
Good morning.

00:00:15.115 --> 00:00:16.383
Thanks for coming.

00:00:16.383 --> 00:00:20.888
[ Applause ]

00:00:20.888 --> 00:00:23.224
So I’m going to talk to
you about Web Inspector

00:00:23.223 --> 00:00:27.494
and Modern JavaScript.

00:00:27.494 --> 00:00:32.065
But first, I’m going to just
talk about Modern JavaScript.

00:00:32.065 --> 00:00:35.936
So, what exactly is
Modern JavaScript?

00:00:35.936 --> 00:00:39.473
Well, let’s go through some
of the history of JavaScript

00:00:39.473 --> 00:00:42.910
which is also known
as ECMAScript

00:00:42.910 --> 00:00:44.979
as some of you may know.

00:00:44.978 --> 00:00:46.613
But it’s had a long history.

00:00:46.613 --> 00:00:49.049
It’s been around since the ’90s.

00:00:49.049 --> 00:00:53.020
And it had a lot of
momentum back in the ’90s

00:00:53.020 --> 00:00:56.824
when it was first part
of the browser wars,

00:00:56.823 --> 00:00:59.492
but it kind of sputtered
and stalled.

00:00:59.493 --> 00:01:02.629
But JavaScript is alive
and well nowadays.

00:01:02.629 --> 00:01:07.701
Everyone is using it from web
apps to server applications,

00:01:07.701 --> 00:01:13.273
and some of the standards bodies
have been battling over some

00:01:13.273 --> 00:01:18.378
of what should be included in
the next version of JavaScript.

00:01:18.378 --> 00:01:24.618
And I’m happy to say that they
finally started coming together

00:01:24.618 --> 00:01:31.658
and started releasing what
is known as ECMAScript 6.

00:01:31.658 --> 00:01:36.496
And the sixth edition
brings a lot of cool things

00:01:36.496 --> 00:01:39.132
and it’s really just JavaScript

00:01:39.132 --> 00:01:42.969
and that’s how I’m
going to refer to it.

00:01:42.970 --> 00:01:47.675
In this modern JavaScript world,
there’s a lot of great things.

00:01:47.674 --> 00:01:49.142
And this is just some of them.

00:01:49.142 --> 00:01:53.780
There’s some destructuring,
maps, promises.

00:01:53.780 --> 00:01:55.749
And let’s go over some
of these new features

00:01:55.749 --> 00:02:03.890
that are also now available
in iOS 8 and OS X Yosemite.

00:02:03.890 --> 00:02:09.162
So when they’re available, I
mean, you can use them in Safari

00:02:09.162 --> 00:02:13.667
or your iOS applications or
Mac applications and not just

00:02:13.667 --> 00:02:17.905
in web views but also a
JavaScriptCore context.

00:02:17.904 --> 00:02:22.876
So let’s talk over
some of these.

00:02:22.876 --> 00:02:25.912
Let’s first talk about
some math additions.

00:02:25.912 --> 00:02:31.117
JavaScript has had a math object
pretty much since day one.

00:02:31.118 --> 00:02:37.891
But JavaScript nowadays is super
fast, with the modern LLVM JIT

00:02:37.891 --> 00:02:42.028
that we have in iOS
8 and OS X Yosemite.

00:02:42.029 --> 00:02:45.833
You need these super fast math
functions to do complex things

00:02:45.832 --> 00:02:51.738
like WebGL or complex
scientific calculations.

00:02:51.738 --> 00:02:56.042
And most of you will recognize
a lot of things in this list

00:02:56.043 --> 00:02:59.947
that you’ve used in the past
for your own applications.

00:02:59.946 --> 00:03:02.982
And they’re now available
in Modern JavaScript.

00:03:02.983 --> 00:03:07.187
So that’s the math additions.

00:03:07.187 --> 00:03:11.091
Now let’s talk about
maps and sets.

00:03:11.091 --> 00:03:14.661
So, what do I mean
by maps and sets?

00:03:14.661 --> 00:03:19.799
Well, in JavaScript, you
might think of this as a map.

00:03:19.800 --> 00:03:24.004
This is something that you
create as a generic object

00:03:24.004 --> 00:03:26.106
and it’s really just
a property bag.

00:03:26.106 --> 00:03:28.976
You can throw whatever
you want on this object.

00:03:28.975 --> 00:03:34.647
You can set simple strings and
any object can be the value.

00:03:34.648 --> 00:03:38.886
And you can remove
things from that map.

00:03:38.885 --> 00:03:41.554
Well, these maps have
some limitations.

00:03:41.555 --> 00:03:45.359
There’s string coercion when
you’re-when it comes to the key.

00:03:45.358 --> 00:03:48.528
Everything that is the key needs
to be coerced into a string,

00:03:48.528 --> 00:03:51.031
so it’s not going to give
you exactly what you want.

00:03:51.031 --> 00:03:52.165
If you want to use it

00:03:52.165 --> 00:03:55.969
for a property bag
that’s tracking some node,

00:03:55.969 --> 00:03:59.639
it won’t work.

00:03:59.639 --> 00:04:03.409
Well in Modern JavaScript,
there’s now a map object.

00:04:03.410 --> 00:04:05.579
And it does pretty
much the same thing

00:04:05.579 --> 00:04:08.449
that you would do
with an object.

00:04:08.448 --> 00:04:11.885
It has a little bit
different syntax and API,

00:04:11.885 --> 00:04:13.754
but it’s pretty much
all the same.

00:04:13.754 --> 00:04:15.956
The most powerful
thing you can do

00:04:15.956 --> 00:04:21.361
with the map object is you
can use any value as the key.

00:04:21.361 --> 00:04:25.532
And a lot of people will
use this to track DOM nodes

00:04:25.532 --> 00:04:29.136
that they have in the page,
adding some additional data

00:04:29.136 --> 00:04:33.941
on the side instead of tacking
it onto the DOM node itself.

00:04:33.940 --> 00:04:37.110
So it really allows you
to compartmentalize data

00:04:37.110 --> 00:04:39.045
that you’re tracking
on the page.

00:04:39.045 --> 00:04:42.949
But there are some
issues with that.

00:04:42.949 --> 00:04:45.618
If you add it to the
map, that map is going

00:04:45.619 --> 00:04:47.321
to hold a hard reference to it

00:04:47.320 --> 00:04:51.057
and that’s why Modern
JavaScript has a WeakMap.

00:04:51.057 --> 00:04:56.329
And that means whenever
the key disappears

00:04:56.329 --> 00:04:59.933
or gets garbage collected,
it’s also removed from the map.

00:04:59.933 --> 00:05:04.371
So in this case, I have a
node in my WeakMap and when

00:05:04.371 --> 00:05:09.376
that node is removed by doing
a remove call or a removeChild

00:05:09.376 --> 00:05:12.412
in that page, it would
no longer be in the map

00:05:12.412 --> 00:05:13.947
and the data that’s associated

00:05:13.947 --> 00:05:16.383
with it will also get
garbage collected.

00:05:16.383 --> 00:05:20.554
So that’s maps and sets.

00:05:20.554 --> 00:05:23.857
And there’s also a set
object that I didn’t cover

00:05:23.857 --> 00:05:25.225
but it’s pretty straightforward.

00:05:25.225 --> 00:05:30.931
It only allows the key
to be added to the set.

00:05:30.931 --> 00:05:33.767
So now let’s talk
about Destructuring.

00:05:35.502 --> 00:05:39.206
If you got excited about some
of the new features in Swift,

00:05:39.206 --> 00:05:44.511
this will be right up your
alley as far as JavaScript goes.

00:05:44.511 --> 00:05:49.016
It allows you to return like
multiple objects in an array.

00:05:49.015 --> 00:05:53.653
In this case, I have an
array of two numbers here.

00:05:53.653 --> 00:05:55.889
And traditionally, I
would have to collect

00:05:55.889 --> 00:05:58.158
that in a result object.

00:05:58.158 --> 00:06:03.130
And I would have to break
each piece off from that array

00:06:03.129 --> 00:06:06.432
to use it in a separate
variable that made more sense

00:06:06.433 --> 00:06:09.703
in the scope I was using it in.

00:06:09.703 --> 00:06:14.508
But with destructuring, we can
break that down into one line.

00:06:14.507 --> 00:06:19.145
Now my function that’s
returning two results

00:06:19.145 --> 00:06:20.913
that maybe didn’t
make sense as array,

00:06:20.914 --> 00:06:25.685
but it was what I could use to
return multiple things at once,

00:06:25.685 --> 00:06:28.888
I can now save those
into the alpha

00:06:28.889 --> 00:06:33.794
and beta variables
right there in one line.

00:06:33.793 --> 00:06:38.164
And this might look like an
array but when it’s on-when it’s

00:06:38.164 --> 00:06:44.237
on the left side, we’re dealing
with the destructuring syntax.

00:06:45.205 --> 00:06:48.041
And it’s not just for arrays.

00:06:48.041 --> 00:06:50.243
You can destructure objects.

00:06:50.243 --> 00:06:53.546
And this is when it becomes
more of a pattern matching.

00:06:53.546 --> 00:06:57.950
So in my example here,
say I have a point object.

00:06:57.951 --> 00:07:01.721
And normally, I would have
to save it off into a result

00:07:01.721 --> 00:07:03.590
and break each piece
out if I wanted

00:07:03.590 --> 00:07:08.428
to use some more concise
syntax for those variables.

00:07:08.428 --> 00:07:14.901
But now, I have object
destructuring in this case.

00:07:14.901 --> 00:07:19.172
And if I’d want a different
variable name than the property,

00:07:19.172 --> 00:07:22.942
I can separate them by colons,
so x is the value that’s coming

00:07:22.943 --> 00:07:25.679
out of the object
pattern matching

00:07:25.679 --> 00:07:30.250
and my x is the variable name
in the local scope in this case.

00:07:30.250 --> 00:07:33.019
But if I want to
use the same name,

00:07:33.019 --> 00:07:36.155
I could omit the second
piece and just use y.

00:07:36.156 --> 00:07:39.559
And y is now a local
variable in this scope.

00:07:39.559 --> 00:07:44.230
And you can do some
really fancy things

00:07:44.230 --> 00:07:45.598
that I don’t examples for.

00:07:45.598 --> 00:07:49.102
But you can deeply nest these
pattern matches and objects

00:07:49.102 --> 00:07:50.837
with arrays and vice versa.

00:07:50.837 --> 00:07:53.106
So you can really
break apart your object

00:07:53.106 --> 00:07:56.576
if that-if that’s what
works for your application.

00:07:57.911 --> 00:07:59.546
So that’s destructuring.

00:07:59.546 --> 00:08:05.152
Now let’s talk about what
we call the Spread Operator.

00:08:05.151 --> 00:08:09.589
And this is something that is
borrowed from many languages,

00:08:09.589 --> 00:08:15.562
but it comes in very, very
handy and I love using it.

00:08:15.562 --> 00:08:20.000
It’s-It really takes away
some of the common idioms

00:08:20.000 --> 00:08:24.738
that you would do before if
you’re building up arguments

00:08:24.738 --> 00:08:28.075
that you want to call in
a function as an array,

00:08:28.074 --> 00:08:32.679
before you would have to
resort to .call or .apply

00:08:32.679 --> 00:08:36.149
and pass in those arguments.

00:08:36.149 --> 00:08:39.452
But now, with the Spread
Operator which is represented

00:08:39.452 --> 00:08:43.690
by three dots prefixing
an object.

00:08:43.690 --> 00:08:46.560
And in this case
it’s-it’s an array.

00:08:46.559 --> 00:08:50.430
But secretly, the Spread
Operator works on anything.

00:08:50.430 --> 00:08:52.032
It even works on maps.

00:08:52.032 --> 00:08:57.137
And it will break it out
in key value sequences.

00:08:57.137 --> 00:09:00.641
So, anything that’s has support
for iteration, which I’ll talk

00:09:00.640 --> 00:09:02.375
about in a bit, can be spread.

00:09:02.375 --> 00:09:05.912
And this will spread it out
and call my function foo

00:09:05.912 --> 00:09:10.550
with the three arguments
that are in the array.

00:09:10.550 --> 00:09:13.286
One thing that you could
never do in JavaScript

00:09:13.286 --> 00:09:16.990
and you can only do now with
the Spread Operator is called a

00:09:16.990 --> 00:09:22.696
constructor with an array
input or a map input.

00:09:22.695 --> 00:09:26.966
You can now take your parts
of a date and spread them

00:09:26.966 --> 00:09:29.902
across the date constructor
instead of having

00:09:29.903 --> 00:09:36.309
to manually do 0, 1, 2 and
break it out like that.

00:09:39.012 --> 00:09:41.882
The Spread Operator
is also useful

00:09:41.881 --> 00:09:45.051
in the construction
of array literals.

00:09:45.051 --> 00:09:47.820
Say you have something
that’s pretty repetitious.

00:09:47.821 --> 00:09:51.191
You want to have a separate
form and a combined form.

00:09:51.191 --> 00:09:54.995
Normally you have to either
repeat the data or push and pop

00:09:54.994 --> 00:09:59.732
and add everything,
concatenate everything together.

00:09:59.732 --> 00:10:04.070
But with the Spread Operator
you can just spread those other

00:10:04.070 --> 00:10:07.707
arrays right out into the new
array that you’re constructing.

00:10:07.707 --> 00:10:12.912
So this is a handy way to do
pretty complex concatenation.

00:10:12.912 --> 00:10:15.381
And you can understand
what it’s doing

00:10:15.381 --> 00:10:18.818
without having the
parse different calls

00:10:18.818 --> 00:10:21.020
to different array functions.

00:10:21.020 --> 00:10:24.390
So that’s the Spread Operator.

00:10:24.390 --> 00:10:27.426
Now let’s talk about
something new.

00:10:27.427 --> 00:10:32.098
A new For loop that’s
available in JavaScript.

00:10:32.098 --> 00:10:35.702
JavaScript has traditional
loops, which you can iterate

00:10:35.702 --> 00:10:39.139
over an array by doing
an index and a length.

00:10:39.139 --> 00:10:43.043
And you still might need
to use this if you care

00:10:43.042 --> 00:10:44.744
about the index or the length.

00:10:44.744 --> 00:10:49.582
And you’re doing some complex
operation based on those.

00:10:49.582 --> 00:10:58.257
Some people have avoided this
syntax because it’s ugly.

00:10:58.258 --> 00:11:02.863
And they use something
for-called forEach on an array

00:11:02.862 --> 00:11:05.732
that lets you iterate
over individual items

00:11:05.732 --> 00:11:09.135
and you handily get
the item right there

00:11:09.135 --> 00:11:10.703
that you can work with.

00:11:10.703 --> 00:11:12.605
But this creates a closure.

00:11:12.605 --> 00:11:16.642
It does a lot of complex
things that you might not want

00:11:16.643 --> 00:11:19.179
to deal with overhead-wise.

00:11:20.513 --> 00:11:25.084
Well, with the new For loop
that’s in modern JavaScript,

00:11:25.084 --> 00:11:29.322
this is all you have to write
to iterate over an array.

00:11:29.322 --> 00:11:33.726
And this will iterate over
every item in the array

00:11:33.726 --> 00:11:35.561
if you break early,
it will stop.

00:11:35.562 --> 00:11:37.864
But it starts at the first item.

00:11:37.864 --> 00:11:41.234
But it’s not just for arrays.

00:11:41.234 --> 00:11:44.337
Say you have a set, you
can iterate over that set.

00:11:44.337 --> 00:11:49.642
And if you have a map you can
iterate over the key and value.

00:11:49.642 --> 00:11:52.745
Very similar to what
you can do in Swift.

00:11:52.745 --> 00:11:56.983
So now you have the key in value
right there to process both

00:11:56.983 --> 00:11:59.352
at the same time instead
of doing extra lines

00:11:59.352 --> 00:12:02.121
of code using the for-in loop

00:12:02.121 --> 00:12:03.356
which is available
on JavaScript.

00:12:03.356 --> 00:12:06.860
Now you can do it
right here with for-of.

00:12:06.859 --> 00:12:09.862
And for-of is the
only way to iterate

00:12:09.862 --> 00:12:13.032
over the keys in values in maps.

00:12:13.032 --> 00:12:15.401
For-in will not do
what you expect

00:12:15.401 --> 00:12:19.672
and that-for reasons I’m
not going to go into.

00:12:19.672 --> 00:12:23.042
But maybe you want to
iterate over a WeakMap.

00:12:23.042 --> 00:12:25.211
That’s not supported.

00:12:25.211 --> 00:12:29.782
For reasons that involve
the garbage collection,

00:12:29.782 --> 00:12:33.152
you cannot iterate over the
keys and values of the WeakMap

00:12:33.152 --> 00:12:42.228
and this is part of the spec.
So, that’s for-of loops.

00:12:43.429 --> 00:12:46.732
Now, one of the new
things in modern JavaScript

00:12:46.733 --> 00:12:50.737
that I’m really excited
about is Promises.

00:12:50.737 --> 00:12:54.407
And it solves a longstanding
problem of JavaScript.

00:12:54.407 --> 00:12:56.109
Now that JavaScript
is moving more

00:12:56.109 --> 00:13:00.013
and more asynchronous everything
is asynchronous, you don’t want

00:13:00.013 --> 00:13:02.682
to be blocking your application.

00:13:02.682 --> 00:13:08.288
And say you have a function that
you’ve written that loads a URL,

00:13:08.288 --> 00:13:12.225
maybe it does an XHR behind
the scenes for you to wrap

00:13:12.225 --> 00:13:14.828
up all the different
browser incompatibilities

00:13:14.827 --> 00:13:16.195
that are out there.

00:13:16.195 --> 00:13:20.766
So this will load a URL
and that’s all it’ll do.

00:13:20.767 --> 00:13:22.569
You can’t get the data.

00:13:22.568 --> 00:13:26.305
To get the data, you might be
inclined to do a return result

00:13:26.306 --> 00:13:29.342
that gives you the
data that was loaded.

00:13:29.342 --> 00:13:31.044
But this is synchronous.

00:13:31.044 --> 00:13:34.648
You can’t get away with
this in a shipping product

00:13:34.647 --> 00:13:39.018
without blocking
your user interface.

00:13:39.018 --> 00:13:42.121
So, you have to resort
to a callback function.

00:13:42.121 --> 00:13:45.391
And JavaScript makes
this real easy.

00:13:45.391 --> 00:13:47.960
I do this everyday
in JavaScript:

00:13:47.960 --> 00:13:49.762
pass in a callback function.

00:13:49.762 --> 00:13:55.568
And it works and it’s very
usable and it’s very handy.

00:13:55.568 --> 00:14:00.373
But when it gets deeply
nested and you’re passing

00:14:00.373 --> 00:14:02.475
in multiple information

00:14:02.475 --> 00:14:05.545
and it just gets confusing
and hard to follow.

00:14:05.545 --> 00:14:08.615
You have all these load
calls in this case.

00:14:08.614 --> 00:14:11.550
Which one is handling
which information?

00:14:11.551 --> 00:14:15.455
Well, this is what
Promises solved.

00:14:15.455 --> 00:14:19.125
With Promises you can
write something like this

00:14:19.125 --> 00:14:23.529
where the first load
returns a promise.

00:14:23.529 --> 00:14:25.531
And immediately on
returning that promise,

00:14:25.531 --> 00:14:27.433
I can call the .then function.

00:14:27.433 --> 00:14:29.368
And that’s pretty much
the only API you need

00:14:29.369 --> 00:14:32.205
to be concerned about
with Promises.

00:14:32.205 --> 00:14:35.542
And you can pass a call
back to that .then function

00:14:35.541 --> 00:14:40.379
which will get called when
that promise is fulfilled.

00:14:40.380 --> 00:14:46.253
And that callback can
return another promise.

00:14:46.252 --> 00:14:48.087
And this where it’s magical,

00:14:48.087 --> 00:14:51.624
you can chain-keep
chaining along that.

00:14:51.624 --> 00:14:56.562
So these callbacks are in line
here just for clarity for you.

00:14:56.562 --> 00:14:59.465
But they might be
named functions

00:14:59.465 --> 00:15:01.334
that you have somewhere else.

00:15:01.334 --> 00:15:07.240
And it makes it very clear that
this is the order of operations.

00:15:08.508 --> 00:15:11.011
So that’s Promises.

00:15:11.010 --> 00:15:16.849
And taking it to the next level
you can then use another API,

00:15:16.849 --> 00:15:20.786
a global API, Promise.all.

00:15:20.787 --> 00:15:26.526
And what this does is you can
pass in an array of promises.

00:15:26.526 --> 00:15:30.897
And it will return a new
promise and that new promise

00:15:30.897 --> 00:15:37.337
that it returns is dependent on
all of those promises finishing.

00:15:37.336 --> 00:15:39.572
If any of them error out,

00:15:39.572 --> 00:15:42.508
your "then" object can
get past the callback

00:15:42.508 --> 00:15:44.310
that gets called for errors.

00:15:44.310 --> 00:15:48.181
But in this case, "done"
will get called when only all

00:15:48.181 --> 00:15:53.019
of those promises
succeed or fulfilled.

00:15:54.487 --> 00:15:56.756
But maybe you only care
about the first one.

00:15:56.756 --> 00:15:58.057
You’re loading a bunch of images

00:15:58.057 --> 00:16:00.693
and once you got one
image you’re ready to go.

00:16:00.693 --> 00:16:02.795
That’s where Promise.race
comes in.

00:16:02.795 --> 00:16:07.867
It will call your
callback when the first one

00:16:07.867 --> 00:16:10.036
of those promises is fulfilled.

00:16:10.036 --> 00:16:13.973
So that’s a quick
glance of Promises.

00:16:13.973 --> 00:16:19.078
So that pretty much wraps it
up with Modern JavaScript,

00:16:19.078 --> 00:16:21.781
at least the parts that
we’ve already implemented

00:16:21.781 --> 00:16:24.384
and decided were
ready for consumption.

00:16:24.383 --> 00:16:25.851
There’s a lot that’s being done

00:16:25.852 --> 00:16:29.155
in ECMAScript 6 that
is not ready.

00:16:29.155 --> 00:16:31.591
And it’s going to be
coming down the pipeline.

00:16:31.591 --> 00:16:34.094
But these pieces we feel
that you’re ready to use

00:16:34.093 --> 00:16:41.567
in your application, in
browsers that support them.

00:16:41.567 --> 00:16:44.670
So now let’s talk about
the Web Inspector.

00:16:45.905 --> 00:16:49.876
So if you’re not familiar
with the Web Inspector,

00:16:49.876 --> 00:16:52.679
this is what it looks like.

00:16:52.678 --> 00:16:56.382
And we’ve had this UI for a
while but we’ve done a lot.

00:16:56.382 --> 00:16:57.884
We’ve fixed a lot of bugs.

00:16:57.884 --> 00:17:00.820
We’ve added a lot of features.

00:17:00.820 --> 00:17:04.090
But the main thing we’ve done
this year is make the Web

00:17:04.090 --> 00:17:07.160
Inspector available
in more places.

00:17:07.159 --> 00:17:10.129
We’ve listened to your
feedback and you want to be able

00:17:10.129 --> 00:17:12.164
to inspect your Mac application.

00:17:12.164 --> 00:17:15.434
You want to be able to inspect
your JavaScriptCore context.

00:17:15.434 --> 00:17:21.874
And that’s exactly what you can
do with iOS 8 and OS X Yosemite.

00:17:21.874 --> 00:17:29.014
So with Safari, you’ve been
able to inspect your iOS apps

00:17:29.015 --> 00:17:33.686
and iOS Safari by tethering
up to your computer.

00:17:33.686 --> 00:17:42.762
But now you can inspect your
Mac application and right there

00:17:43.963 --> 00:17:46.232
from Safari see a list
of your Mac applications.

00:17:46.232 --> 00:17:48.935
So what’s that look like?

00:17:48.935 --> 00:17:51.271
But first, like I said, you want

00:17:51.270 --> 00:17:54.340
to inspect your JavaScriptCore
context.

00:17:54.340 --> 00:17:57.844
But Web Inspector is
all about the web.

00:17:57.843 --> 00:18:02.114
And it’s only been able to work
with WebKit up until this point.

00:18:02.114 --> 00:18:04.350
But now Web Inspector
can connect

00:18:04.350 --> 00:18:07.220
to your JavaScriptCore-based
applications.

00:18:07.219 --> 00:18:09.688
So even if you’re
not using a web view

00:18:09.689 --> 00:18:13.593
but you’re using JavaScriptCore
for some logic in your game,

00:18:13.593 --> 00:18:16.596
you can now debug
that JavaScript right

00:18:16.596 --> 00:18:19.666
in the Web Inspector
and it’s really great.

00:18:19.665 --> 00:18:22.701
So let’s-let’s show
you what it looks like.

00:18:22.702 --> 00:18:28.841
So, Mac App inspection, like I
said, will show up right next

00:18:28.841 --> 00:18:31.911
to your iOS devices
in the Develop menu.

00:18:31.911 --> 00:18:36.649
In this case, I have two Mac
Apps and the second one here,

00:18:36.649 --> 00:18:39.652
JSPong, is a JavaScriptCore app.

00:18:39.652 --> 00:18:41.320
The first one is a web view

00:18:41.320 --> 00:18:43.422
but they’re right
there side by side.

00:18:43.422 --> 00:18:45.291
They’re first class citizens.

00:18:45.291 --> 00:18:48.628
And like I said, you
can also still connect

00:18:48.628 --> 00:18:51.764
to your iOS applications
and iOS Safari

00:18:51.764 --> 00:18:53.699
from the same Develop menu.

00:18:53.699 --> 00:18:58.804
But for Mac App inspection
we require you

00:18:58.804 --> 00:19:02.441
to add an entitlement
to your app.

00:19:02.441 --> 00:19:05.377
You don’t want anyone else
debugging your JavaScript

00:19:05.378 --> 00:19:07.914
context or stealing
your JavaScript code

00:19:07.913 --> 00:19:11.083
from your Mac Application
that you’ve worked so hard on.

00:19:11.083 --> 00:19:15.321
So we require you to have this
entitlement on your applications

00:19:15.321 --> 00:19:17.890
that you’re developing locally.

00:19:17.890 --> 00:19:21.494
And it’s very simple to do
and I’ll give you a demo

00:19:21.494 --> 00:19:23.730
of it here in a little bit.

00:19:23.729 --> 00:19:26.198
But what about JavaScriptCore
inspection?

00:19:26.198 --> 00:19:28.767
What’s that look like?

00:19:28.768 --> 00:19:32.739
Well, it looks just
like the Web Inspector.

00:19:32.738 --> 00:19:35.874
This is the same Web Inspector
that you saw a little bit ago.

00:19:35.875 --> 00:19:38.044
The other one was
for the web view.

00:19:38.044 --> 00:19:40.346
This one is for JavaScriptCore
context.

00:19:40.346 --> 00:19:43.649
There’s a couple of buttons that
are missing that don’t apply

00:19:43.649 --> 00:19:45.151
to JavaScriptCore context like,

00:19:45.151 --> 00:19:48.187
styles and the DOM
and things like that.

00:19:48.187 --> 00:19:51.457
But for the most part
it’s everything you need

00:19:51.457 --> 00:19:54.293
to debug your JavaScriptCore
application.

00:19:54.293 --> 00:19:58.397
And you have the full console.

00:19:58.397 --> 00:20:03.102
You can do a REPL, evaluate
JavaScript or see console.logs.

00:20:03.102 --> 00:20:07.907
Console.log is now available in
your JavaScriptCore application.

00:20:07.907 --> 00:20:10.910
So if you have your own log
function you can now abandon it

00:20:10.910 --> 00:20:14.247
and start using console.log
and get all the great benefits

00:20:14.246 --> 00:20:16.615
of the Web Inspector’s
Log functions.

00:20:16.615 --> 00:20:20.719
But if you don’t do anything,

00:20:20.720 --> 00:20:23.723
the console is pretty much
all you have available.

00:20:23.723 --> 00:20:25.291
And I’ll tell you why.

00:20:25.291 --> 00:20:27.560
We don’t know what
you’re evaluating

00:20:27.560 --> 00:20:30.029
in your JavaScriptCore context.

00:20:30.029 --> 00:20:31.964
If you’re evaluating
large scripts,

00:20:31.964 --> 00:20:33.732
those are something you
probably want to debug

00:20:33.733 --> 00:20:38.438
but you could be evaluating
something every 200 milliseconds

00:20:38.437 --> 00:20:41.373
and that would quickly
pollute the sidebar here.

00:20:41.373 --> 00:20:43.842
So you-any script
that you want to debug

00:20:43.843 --> 00:20:48.548
in the Web Inspector we will
need you to supply a URL

00:20:48.547 --> 00:20:52.317
or just a plain name
for that script.

00:20:52.318 --> 00:20:56.155
And we’ve given you a
couple new APIs for this.

00:20:56.155 --> 00:21:00.559
There has always been the
EvaluateScript functions.

00:21:00.559 --> 00:21:04.396
We now have a new Objective-C
one that takes a sourceURL,

00:21:04.396 --> 00:21:06.665
and this URL can be a file URL.

00:21:06.665 --> 00:21:07.799
It can be any URL.

00:21:07.800 --> 00:21:12.038
The Web Inspector really
doesn’t take it other

00:21:12.037 --> 00:21:14.606
than to get the name
at this point.

00:21:14.607 --> 00:21:17.477
But if it’s a file URL, it will
have a little bit extra benefit

00:21:17.476 --> 00:21:20.212
and I’ll talk to you
about that a little bit,

00:21:20.212 --> 00:21:24.283
but JSEvaluateScript has
always supported the sourceURL

00:21:24.283 --> 00:21:26.519
but a lot of people
just pass null to it.

00:21:26.519 --> 00:21:29.188
So if you’re using
the old C API,

00:21:29.188 --> 00:21:32.024
make sure to start passing
a sourceURL for things

00:21:32.024 --> 00:21:34.226
that you want to debug
that way they will show

00:21:34.226 --> 00:21:36.261
up in the Web Inspector.

00:21:36.262 --> 00:21:38.297
And that’s for scripts.

00:21:38.297 --> 00:21:39.732
But what about your context?

00:21:39.732 --> 00:21:42.602
Identifying a context is pretty
difficult with JavaScript.

00:21:42.601 --> 00:21:45.337
We don’t know what it is.

00:21:45.337 --> 00:21:48.807
By default it will just say
JSContext in the Develop menu.

00:21:48.808 --> 00:21:51.477
But if you have a multiple
context, you don’t want

00:21:51.477 --> 00:21:55.247
to see a list that says
JSContext, JSContext, JSContext,

00:21:55.247 --> 00:21:58.350
you want to identify those.

00:21:58.350 --> 00:22:00.786
And as the developer, you
should know what you’re using

00:22:00.786 --> 00:22:03.622
that context for and
we provide this new API

00:22:03.622 --> 00:22:06.225
that allows you to
name your context.

00:22:06.225 --> 00:22:08.260
And the name is only
used for debugging.

00:22:08.260 --> 00:22:10.863
It will only show up in
Safari’s Develop menu.

00:22:10.863 --> 00:22:14.433
So let’s just give
a demo of this.

00:22:14.433 --> 00:22:19.371
So I have a sample application
that we released a while ago

00:22:19.371 --> 00:22:23.442
at a previous WWDC: JSPong.

00:22:23.442 --> 00:22:25.477
And it’s a simple pong game.

00:22:25.477 --> 00:22:29.481
But I have some things I need
to do to it to make it work

00:22:29.481 --> 00:22:31.316
with JSContext inspection.

00:22:31.317 --> 00:22:33.986
The first thing I need to do
is make sure the entitlement

00:22:33.986 --> 00:22:34.887
is there.

00:22:34.887 --> 00:22:36.288
And if you’re in the Apps Store,

00:22:36.288 --> 00:22:38.757
you probably already have
an entitlements file.

00:22:38.757 --> 00:22:41.126
In this case, I already
have an App Sandbox

00:22:41.126 --> 00:22:43.328
and that will give
me an entitlement.

00:22:43.329 --> 00:22:47.633
And I have it right here in the
sidebar, JSPong.entitlements.

00:22:47.633 --> 00:22:53.172
So let’s go in and add the
entitlement that we need.

00:22:53.172 --> 00:23:01.747
And I said it was
com.apple.security.

00:23:01.747 --> 00:23:07.686
get-task-allow, and
it’s a Boolean.

00:23:07.686 --> 00:23:12.624
And we’ll go ahead
and say "Yes."

00:23:13.959 --> 00:23:15.627
So that’s all I need to do

00:23:15.628 --> 00:23:19.432
to allow JSContext
inspection in my application.

00:23:19.431 --> 00:23:20.599
And I’ll go ahead and save that.

00:23:20.599 --> 00:23:25.771
And I’ll go ahead
and build and run it.

00:23:25.771 --> 00:23:27.940
And it’s a very simple
pong game.

00:23:27.940 --> 00:23:30.543
The AI is controlled
by a JavaScript

00:23:30.542 --> 00:23:32.077
that you can modify
here in the app.

00:23:32.077 --> 00:23:34.479
I’m not going to
talk about that.

00:23:34.480 --> 00:23:40.152
But now I can go to Safari
and, in the Develop menu,

00:23:40.152 --> 00:23:46.492
I will see Mac Pro and I will
see JSPong and my JSContext.

00:23:46.492 --> 00:23:48.327
And I didn’t name
the context yet,

00:23:48.327 --> 00:23:50.696
so it’s getting the
default name.

00:23:50.696 --> 00:23:52.131
And I’ll go ahead
and inspect that.

00:23:52.131 --> 00:23:54.700
And you’ll see the
resources are empty.

00:23:54.700 --> 00:23:58.904
I’m not seeing that that
AI script that I’ve loaded.

00:23:58.904 --> 00:24:02.341
But I-if I want to debug that,
I’ll need to give that a name.

00:24:02.341 --> 00:24:06.512
But at this point, I have
access to the console.

00:24:06.512 --> 00:24:07.780
If you don’t do anything,

00:24:07.780 --> 00:24:11.617
you can do evaluations
here in the console.

00:24:11.617 --> 00:24:14.520
You can get access
to any globals

00:24:14.520 --> 00:24:18.657
that you might have
available in your context.

00:24:18.657 --> 00:24:22.728
And you will see exceptions
in logs and errors.

00:24:22.728 --> 00:24:25.965
And in this case, we
have an example exception

00:24:25.965 --> 00:24:27.633
and this will give
you a back trace,

00:24:27.633 --> 00:24:31.570
not just of your JavaScript,
but of your native code.

00:24:31.570 --> 00:24:34.907
So you can see exactly
where that function

00:24:34.907 --> 00:24:38.144
or script was evaluated all
the way to your native codes

00:24:38.143 --> 00:24:41.947
so you can trace it back
to the exist-the origin.

00:24:43.248 --> 00:24:49.521
So let’s go back into Xcode
and name some of these.

00:24:49.521 --> 00:24:50.422
So it’s pretty simple.

00:24:50.422 --> 00:24:51.757
I’ll just comment this out.

00:24:51.757 --> 00:24:54.793
This will name my
context, Pong Context.

00:24:54.793 --> 00:24:56.194
I only have one context.

00:24:56.195 --> 00:24:57.396
But if I had multiple ones,

00:24:57.396 --> 00:25:01.734
it would be imperative
for me to name them.

00:25:01.734 --> 00:25:05.771
And when I’m evaluating
the AI script,

00:25:05.771 --> 00:25:08.374
all I have to do
is construct a URL.

00:25:08.374 --> 00:25:11.577
In this case, I’m just
making a URL with a string

00:25:11.577 --> 00:25:14.947
and it really doesn’t
have a location.

00:25:14.947 --> 00:25:19.385
And I’ll just use the
new withSourceURL method

00:25:19.385 --> 00:25:22.989
and pass in that URL.

00:25:22.988 --> 00:25:26.325
Now let’s build and run
and see what happens

00:25:26.325 --> 00:25:28.260
in the Web Inspector.

00:25:30.763 --> 00:25:33.633
We’ll go ahead and
reconnect to the pong game.

00:25:33.632 --> 00:25:39.371
In the Resource sidebar,
we now have that AI script.

00:25:39.371 --> 00:25:42.541
And in the app, we didn’t
syntax highlight it.

00:25:42.541 --> 00:25:44.276
But Web Inspector
knows exactly how

00:25:44.276 --> 00:25:46.478
to syntax highlight JavaScript.

00:25:46.478 --> 00:25:49.648
So we can set breakpoints
right here.

00:25:49.648 --> 00:25:55.020
And since the script is called
every iteration of the movement,

00:25:55.020 --> 00:25:56.021
it should break right away.

00:25:56.021 --> 00:25:58.490
And now I’m in the debugger.

00:25:58.490 --> 00:26:01.426
I have access to the call stack.

00:26:01.427 --> 00:26:04.463
There’s nothing other than
this function being called.

00:26:04.463 --> 00:26:06.332
But if there was a
deeply nested call stack,

00:26:06.331 --> 00:26:09.034
you would see it right
there in the sidebar.

00:26:09.034 --> 00:26:14.039
And I can also bring open the
scope chain and we can-just

00:26:14.039 --> 00:26:16.241
like you would any
JavaScript context,

00:26:16.241 --> 00:26:19.878
you can now inspect the objects
that you’re getting passed

00:26:19.878 --> 00:26:24.516
around or your global
scope in this case.

00:26:24.516 --> 00:26:30.589
And we can do what any
debugger does and step through,

00:26:30.589 --> 00:26:34.159
and do anything you would
do in a normal debugger,

00:26:34.159 --> 00:26:37.162
in addition to hovering
over variables

00:26:37.162 --> 00:26:40.899
to see their current
value or evaluate things

00:26:40.899 --> 00:26:44.336
in this current scope
in the console.

00:26:44.336 --> 00:26:53.412
So in this case, let’s try
modifying the ball here.

00:26:54.580 --> 00:26:58.017
Maybe we want to modify
the rules of pong here

00:26:58.016 --> 00:27:01.052
and make something
really easy to hit.

00:27:01.053 --> 00:27:02.688
So I’ve gone ahead
and modified that.

00:27:02.688 --> 00:27:09.862
And I have an update function
here that will redraw my scene.

00:27:09.862 --> 00:27:12.665
And you can see the
ball increase in size

00:27:12.664 --> 00:27:15.233
as I may-after I
made that change.

00:27:15.234 --> 00:27:18.637
And this is working with
Objective-C bridged objects.

00:27:18.637 --> 00:27:22.908
The ball object here is a
bridged Objective-C object

00:27:22.908 --> 00:27:28.514
that you can use as you would
a normal JavaScript object.

00:27:28.514 --> 00:27:31.217
So that’s JSContext inspection.

00:27:31.216 --> 00:27:32.451
And we’ll go ahead and play it

00:27:32.451 --> 00:27:35.454
and the ball stays the same
size and keeps on going.

00:27:36.855 --> 00:27:41.760
So again, any web view, any
JavaScript context that you have

00:27:41.760 --> 00:27:44.496
in your application can
be debugged now as long

00:27:44.496 --> 00:27:46.198
as you have the right
entitlement.

00:27:46.198 --> 00:27:48.200
And this also applies for iOS.

00:27:48.200 --> 00:27:52.037
So only builds that you build
and run on to your device

00:27:52.037 --> 00:27:55.107
or into the iOS simulator
will be inspectable.

00:27:55.107 --> 00:27:57.710
Any app from the App
Store will not be allowed

00:27:57.709 --> 00:28:00.545
to be inspected by anyone else.

00:28:00.546 --> 00:28:03.416
So that’s all you need.

00:28:03.415 --> 00:28:06.118
And again, name your context
and name your scripts,

00:28:06.118 --> 00:28:08.854
so you can easily identify
them when you’re debugging.

00:28:08.854 --> 00:28:14.493
So now let’s talk about
something that we’ve had

00:28:14.493 --> 00:28:18.697
in the Web Inspector for
a while: the Timeline.

00:28:18.697 --> 00:28:21.333
And something new this year
is the Source Code Timelines.

00:28:21.333 --> 00:28:22.868
So what do I mean by that?

00:28:22.868 --> 00:28:26.138
What sorts of problems
does it solve?

00:28:26.138 --> 00:28:31.710
So Source Code Timelines help
you answer this question.

00:28:31.710 --> 00:28:36.081
What happened when I click
on something on the page?

00:28:36.081 --> 00:28:38.383
Maybe it’s a new project
that you’re working on,

00:28:38.383 --> 00:28:39.985
maybe it’s something
you wrote years ago

00:28:39.985 --> 00:28:42.554
and you don’t remember how it
worked and you want to find

00:28:42.554 --> 00:28:46.158
that line of code that handles
this click, so you can fix a bug

00:28:46.158 --> 00:28:50.929
or so you can just modify
it for some new behavior

00:28:50.929 --> 00:28:53.899
that your client is
asking you to add.

00:28:53.899 --> 00:28:56.335
So, when this click happens,
there’s a lot of stuff

00:28:56.335 --> 00:28:58.103
that probably going on.

00:28:58.103 --> 00:29:00.939
But you really only care
about code that you wrote,

00:29:00.939 --> 00:29:04.276
maybe you have some analytics
code or a lot of other code

00:29:04.276 --> 00:29:06.245
that it might be
hard to decipher

00:29:06.245 --> 00:29:11.217
or see interleaved functions
and event calls and all of these

00:29:11.216 --> 00:29:15.454
that happen in a big
modern web application.

00:29:15.454 --> 00:29:22.027
So when I click on that,
you start wondering, "OK,

00:29:22.027 --> 00:29:24.963
what script is handling
this button?"

00:29:24.963 --> 00:29:28.166
And it turns out it’s this one.

00:29:28.166 --> 00:29:32.470
But with the new Web
Inspector, we can dig deeper.

00:29:32.471 --> 00:29:36.775
In the script, I can now see
a timeline representation

00:29:36.775 --> 00:29:39.778
of what the script was doing.

00:29:39.778 --> 00:29:43.482
So I can see over time where
the mouse events are coming in,

00:29:43.482 --> 00:29:46.118
where the clicks events,
where the timer was added,

00:29:46.118 --> 00:29:48.020
where the timers are firing,

00:29:48.020 --> 00:29:50.756
where I might be
doing forced layout,

00:29:50.756 --> 00:29:56.528
which is a pretty evil thing
to do in a modern web app.

00:29:56.528 --> 00:29:59.731
So what’s it looked like
in the Web Inspector?

00:29:59.731 --> 00:30:03.802
Well, here’s the new
Web Inspector Timeline.

00:30:03.802 --> 00:30:09.908
And you can see in the sidebar
here we have all of our scripts

00:30:09.908 --> 00:30:14.045
and resources from the page
broken out in their hierarchy

00:30:14.046 --> 00:30:19.218
of how they’re included by
you, the developer, in the page

00:30:19.217 --> 00:30:23.755
and you can expand
each script to see what

00:30:23.755 --> 00:30:27.859
that script was doing and
where the line of code was.

00:30:27.859 --> 00:30:30.762
And in this case, you’ll
see a whole timeline

00:30:30.762 --> 00:30:32.697
where things are
happening repeatedly.

00:30:32.698 --> 00:30:34.934
You’ll start seeing
patterns and allow you

00:30:34.933 --> 00:30:38.336
to identify problem areas if
something is firing too much,

00:30:38.337 --> 00:30:43.242
too little, not at all, if
you don’t see it in the list.

00:30:43.241 --> 00:30:46.745
And if you want to dig deeper
into the code, all you have

00:30:46.745 --> 00:30:48.947
to do is click right
there on the sidebar

00:30:48.947 --> 00:30:52.184
and it will take you right to
that location, and you can mouse

00:30:52.184 --> 00:30:56.021
up and down through the sidebar
and have your code on one side

00:30:56.021 --> 00:30:58.457
and your timeline
data in the sidebar.

00:30:58.457 --> 00:31:01.560
So you can get a good overview

00:31:01.560 --> 00:31:04.730
of what the script is
doing really quick.

00:31:05.997 --> 00:31:07.799
So that’s the Source
Code Timelines

00:31:07.799 --> 00:31:11.236
and I’ll give you a demo
here in a little minute.

00:31:12.270 --> 00:31:14.439
So something else that’s new

00:31:14.439 --> 00:31:17.976
in the Web Inspector
is Breakpoint Probes.

00:31:17.976 --> 00:31:22.280
So you might have some
information that you want

00:31:22.280 --> 00:31:25.316
to know when that
mouse is clicked

00:31:25.317 --> 00:31:27.753
or when your mouse is moving.

00:31:27.753 --> 00:31:30.889
And those things are kind of
hard to debug in the debugger.

00:31:30.889 --> 00:31:33.158
You often have to resort
to printf debugging

00:31:33.158 --> 00:31:36.261
because you don’t want to
constantly be switching context

00:31:36.261 --> 00:31:42.267
between your app in the
page and the Web Inspector.

00:31:42.267 --> 00:31:45.637
So you often result to printf
debugging and you’re cluttering

00:31:45.637 --> 00:31:48.840
up your console with thousands
of lines and it’s hard

00:31:48.840 --> 00:31:52.110
to decipher, especially if
you’re debugging multiple areas

00:31:52.110 --> 00:31:55.480
that are not related
and you don’t care

00:31:55.480 --> 00:31:58.350
about the interloop data.

00:31:58.350 --> 00:32:00.786
So this is where
Breakpoint Probes comes in.

00:32:00.786 --> 00:32:04.757
It let’s you see these
properties that you might care

00:32:04.756 --> 00:32:07.492
about without having to
breakout into the Web Inspector.

00:32:07.492 --> 00:32:11.930
So let’s just go ahead
and give a demo of this.

00:32:11.930 --> 00:32:14.833
So let’s go to Safari here.

00:32:14.833 --> 00:32:20.272
And I have a simple
stack the block game

00:32:22.574 --> 00:32:27.512
that I want to-it’s been a while
since this was written so I want

00:32:27.512 --> 00:32:28.713
to see what’s going on.

00:32:28.713 --> 00:32:32.050
Let’s go ahead and use the
Timeline panel for this.

00:32:32.050 --> 00:32:34.252
I’ll go ahead and bring
up the Web Inspector

00:32:34.252 --> 00:32:38.723
in the Develop menu,
show Web Inspector.

00:32:38.723 --> 00:32:41.292
And we’ll go to the
Timeline panel.

00:32:41.293 --> 00:32:43.128
And by default, the
Timeline is empty.

00:32:43.128 --> 00:32:45.130
It’s not recording all the time.

00:32:45.130 --> 00:32:49.001
And it only automatically
records when you reload the page

00:32:49.000 --> 00:32:53.104
or when you press the Record
button up here in the corner.

00:32:53.104 --> 00:32:55.440
And this can record
any length of time

00:32:55.440 --> 00:32:57.709
that you would like to record.

00:32:57.709 --> 00:32:59.744
But when you-when
I reload the page,

00:32:59.744 --> 00:33:01.713
it will only record
a little bit.

00:33:01.713 --> 00:33:04.549
So I’m just going to go ahead
and start recording here

00:33:04.549 --> 00:33:08.353
and see what this page is doing
as I interact with this game.

00:33:08.353 --> 00:33:11.756
And you’ll see the
events and all the work

00:33:11.756 --> 00:33:14.092
that the engine is
doing in response

00:33:14.092 --> 00:33:17.829
to these events start
filling up on the Timeline.

00:33:17.829 --> 00:33:21.633
And I’ll go ahead and stop this.

00:33:21.633 --> 00:33:25.804
And my application has three
scripts, but the logic is all

00:33:25.804 --> 00:33:28.907
in blocks.js, all the other
stuff is stuff I didn’t

00:33:28.907 --> 00:33:29.975
even write.

00:33:29.975 --> 00:33:31.777
I don’t even know
what’s going on there.

00:33:31.776 --> 00:33:34.812
So I can ignore those, but
they’re doing some work.

00:33:34.813 --> 00:33:37.316
And normally that
would clutter up my UI.

00:33:37.315 --> 00:33:41.085
But they’re collapsed here, so
they’re not taking up any space.

00:33:41.086 --> 00:33:44.756
I’ll go ahead and expand the
script that I care about here

00:33:44.756 --> 00:33:51.730
and I can see that Timers are
firing pretty-at a pretty good

00:33:51.730 --> 00:33:56.001
clip as I’m interacting with
the page and there’s key events

00:33:56.001 --> 00:33:59.004
that are firing every
time I press a key.

00:33:59.004 --> 00:34:01.707
Some of the other new
features of the timeline here,

00:34:01.706 --> 00:34:05.877
we can now zoom and scale the
overview panel so if you want

00:34:05.877 --> 00:34:11.516
to dig in to see where things
are happening across domains.

00:34:11.516 --> 00:34:14.753
In this case, we have three
Timelines, the Network Request,

00:34:14.753 --> 00:34:16.788
Layout and Rendering,
and JavaScript.

00:34:16.788 --> 00:34:22.060
And all three play a key role
in the performance of your page.

00:34:22.060 --> 00:34:24.563
So if you see anything
interesting happening

00:34:24.563 --> 00:34:28.667
in a specific time range,
you can zoom in on it,

00:34:28.667 --> 00:34:31.370
make a selection and that
information will show

00:34:31.369 --> 00:34:34.906
up below in the Timeline.

00:34:34.906 --> 00:34:38.109
And you can also drag this
around to scroll and scrub

00:34:38.109 --> 00:34:44.649
through your time as things
were happening on the page.

00:34:44.649 --> 00:34:50.255
So in this case, let me reload
and I’ll show you the networks.

00:34:50.255 --> 00:34:54.126
And in this case,
it’s a local file.

00:34:54.125 --> 00:34:57.161
But we now have network load
information and you see those

00:34:57.162 --> 00:35:00.232
on the network timeline
and you’ll notice

00:35:00.231 --> 00:35:01.999
that the Timeline just
automatically stops

00:35:02.000 --> 00:35:02.968
recording there.

00:35:02.968 --> 00:35:04.403
It records up to
a certain amount

00:35:04.402 --> 00:35:07.839
of time unless you manually
hit the Record button again

00:35:07.839 --> 00:35:10.575
to record more information.

00:35:10.575 --> 00:35:13.445
So let’s look into the
network timeline here.

00:35:13.445 --> 00:35:15.948
And we can see all of
the network details

00:35:15.947 --> 00:35:17.315
that you might be familiar

00:35:17.315 --> 00:35:20.218
with in the previous
network timeline.

00:35:20.218 --> 00:35:23.121
They’re all there and you
can sort-sort these columns

00:35:23.121 --> 00:35:26.224
by whatever information
you find most interesting.

00:35:26.224 --> 00:35:29.928
If you’re looking for a
large script, you can sort

00:35:29.928 --> 00:35:33.165
by transfer size and see
the biggest script show

00:35:33.164 --> 00:35:35.400
up right there.

00:35:35.400 --> 00:35:38.570
Let’s go back to start time.

00:35:38.570 --> 00:35:41.606
You can also do-click
on the other timelines

00:35:41.606 --> 00:35:44.642
and get detailed tab-linear data

00:35:44.643 --> 00:35:47.246
of what was happening
in that time range.

00:35:47.245 --> 00:35:49.347
And again this is
all time range-based.

00:35:49.347 --> 00:35:53.618
So you can see, as these layout
and rendering events filter out,

00:35:53.618 --> 00:35:57.922
they disappear from
the display below.

00:35:57.922 --> 00:36:01.759
JavaScript and Events
is a special view.

00:36:01.760 --> 00:36:05.097
And if you’re looking
for the old profile data,

00:36:05.096 --> 00:36:06.998
this is where it’s moved to.

00:36:06.998 --> 00:36:11.269
So as you’re recording Timeline,
we would now capture profiles

00:36:11.269 --> 00:36:13.972
of all those entry points
into your JavaScript.

00:36:13.972 --> 00:36:18.944
So whenever script is evaluated,
you can expand these to see all

00:36:18.943 --> 00:36:22.480
of the functions that
were called in your script

00:36:22.480 --> 00:36:26.250
and how much time each
individual function took to make

00:36:26.251 --> 00:36:29.521
up that piece of
that entry point.

00:36:29.521 --> 00:36:33.358
So that’s a brief
glance at the Timeline.

00:36:33.358 --> 00:36:35.460
But there is one cool thing
that people always forget

00:36:35.460 --> 00:36:38.163
about when they’re
talking about the Timeline.

00:36:38.163 --> 00:36:39.698
And that’s the Filter.

00:36:39.698 --> 00:36:43.769
The Filter bar is
vastly underappreciated

00:36:43.768 --> 00:36:47.705
in the Web Inspector and even
Xcode where it comes from,

00:36:47.706 --> 00:36:50.309
where you can filter
down this list

00:36:50.308 --> 00:36:53.278
to find what exactly you want.

00:36:53.278 --> 00:36:56.414
So, in this case I’d look-I
did a filter for event

00:36:56.414 --> 00:36:58.616
and it found addEventListener
right there

00:36:58.616 --> 00:36:59.951
and it brought it to the front.

00:36:59.951 --> 00:37:02.120
It expanded those
profiles and showed me

00:37:02.120 --> 00:37:04.789
that exact function
I was looking for.

00:37:04.789 --> 00:37:07.592
So that’s the Filter
Bar and I encourage you

00:37:07.592 --> 00:37:09.327
to start using filtering
more often

00:37:09.327 --> 00:37:11.196
in the Web Inspector
and even Xcode.

00:37:11.196 --> 00:37:13.865
We’ll go back to my
block application

00:37:13.865 --> 00:37:16.601
and bring up the Web Inspector.

00:37:16.601 --> 00:37:23.374
And let’s go ahead and go to
the Resource sidebar here.

00:37:23.374 --> 00:37:28.379
And I really want to improve
this key function listener-this

00:37:28.379 --> 00:37:30.081
key listener.

00:37:30.081 --> 00:37:33.451
It’s using key code,
which is pretty arcane.

00:37:33.451 --> 00:37:36.187
And there’s some new API
key identifier that’s been

00:37:36.187 --> 00:37:38.056
out for years that I could use

00:37:38.056 --> 00:37:40.892
that would give string
representations

00:37:40.892 --> 00:37:45.430
of these-for my cases
instead of the numbers.

00:37:45.430 --> 00:37:50.902
So what I’ll do, like I said,
when we set a breakpoint anytime

00:37:50.902 --> 00:37:53.872
that key is pressed it’s
going to interrupt my process.

00:37:53.872 --> 00:37:56.942
So now to do another key,
I have to hit Continue

00:37:56.941 --> 00:37:58.843
and log what I wanted.

00:37:58.843 --> 00:38:02.580
And press another key, figure
out what I’m doing here.

00:38:02.580 --> 00:38:08.186
But with this breakpoint we
can add a breakpoint action.

00:38:08.186 --> 00:38:12.590
And I’ll go ahead and edit this
breakpoint, which will bring

00:38:12.590 --> 00:38:15.760
up the breakpoint
Action popover.

00:38:15.760 --> 00:38:19.364
And let’s go ahead
and add a probe.

00:38:19.364 --> 00:38:21.233
So we have a few
actions available.

00:38:21.232 --> 00:38:22.533
I’m not going to cover them.

00:38:22.534 --> 00:38:24.736
But they’re pretty
self-explanatory.

00:38:24.736 --> 00:38:27.505
Probe Expression in
this case is brand new.

00:38:27.505 --> 00:38:30.975
And we’ll go ahead and
evaluate an expression

00:38:30.975 --> 00:38:32.343
that we’re interested in.

00:38:32.343 --> 00:38:37.381
And we have an an event object
here and I want to know what

00:38:37.382 --> 00:38:39.317
that key identifier is.

00:38:39.317 --> 00:38:43.388
And that’s all I need to type.

00:38:43.388 --> 00:38:46.358
And I want to automatically
continue after evaluating

00:38:46.357 --> 00:38:49.060
so it doesn’t pause
in the debugger.

00:38:50.195 --> 00:38:52.998
So we’ll go ahead and
break out in here.

00:38:52.997 --> 00:38:55.032
And when I added that probe,

00:38:55.033 --> 00:38:57.969
it added a new sidebar
item called Probes.

00:38:57.969 --> 00:39:01.940
And this is where that data
will show up in the table.

00:39:01.940 --> 00:39:06.244
So I’m going to go back to
my game and interact with it.

00:39:06.244 --> 00:39:09.781
And now it’s logging that key
identifier every time I press

00:39:09.781 --> 00:39:12.951
the key and showing
me the values

00:39:12.951 --> 00:39:17.155
that I can now take an input
into my code and improve my code

00:39:17.155 --> 00:39:21.059
and I didn’t-this would have
been a back and forth process

00:39:21.059 --> 00:39:24.062
or a lot of assumption of
what these identifiers were.

00:39:24.062 --> 00:39:26.331
Now I can see them all
in a table and go back

00:39:26.331 --> 00:39:30.001
to my case and modify them.

00:39:31.569 --> 00:39:33.438
So that’s Probes.

00:39:33.438 --> 00:39:36.741
So that’s a little bit
about Breakpoint Probes

00:39:36.741 --> 00:39:38.009
and Source Code Timelines.

00:39:38.009 --> 00:39:40.545
And I encourage you to
play around with them

00:39:40.545 --> 00:39:44.449
and see how they can fit
into your debugging workflow.

00:39:45.617 --> 00:39:48.753
So now let’s talk
about Accessibility.

00:39:48.753 --> 00:39:50.321
A new in the Web Inspector,

00:39:50.321 --> 00:39:53.724
we have an Accessibility
Details View.

00:39:53.725 --> 00:39:58.597
And this is pretty,
pretty important.

00:39:58.596 --> 00:40:01.532
If you’re working
on a major website,

00:40:01.532 --> 00:40:04.035
you want to be accessible
to everyone.

00:40:04.035 --> 00:40:06.237
Apple cares a lot
about accessibility.

00:40:06.237 --> 00:40:11.309
And we do a lot of work to
make accessibility matter.

00:40:11.309 --> 00:40:15.580
But it only goes so far as
to how much you put into it

00:40:15.580 --> 00:40:18.416
when you’re developing
your own applications.

00:40:18.416 --> 00:40:20.551
And that goes for
iOS applications

00:40:20.551 --> 00:40:23.387
and web applications.

00:40:23.388 --> 00:40:26.524
And on the web, we have
something called ARIA.

00:40:26.524 --> 00:40:29.761
And it’s recently hit
a milestone ARIA 1

00:40:29.761 --> 00:40:32.364
or it’s about to.

00:40:32.363 --> 00:40:37.568
And that allows you to
define for a DOM node what

00:40:37.568 --> 00:40:40.137
that DOM node does as a role.

00:40:40.138 --> 00:40:43.241
And those roles are
translated into things

00:40:43.241 --> 00:40:48.680
that the person using the
computer with VoiceOver can hear

00:40:48.680 --> 00:40:53.852
or see with your-with
your web application.

00:40:53.851 --> 00:40:56.854
And in this case,
I have a webpage

00:40:56.854 --> 00:41:00.291
that has an alert,
an HTML alert.

00:41:00.291 --> 00:41:04.495
And those are notoriously
hard to debug or hard

00:41:04.495 --> 00:41:09.734
for a sighted-non-sighted
person to see when they pop

00:41:09.734 --> 00:41:13.871
up in a webpage because they’re
not going to be able to see

00:41:13.871 --> 00:41:20.244
that content unless you
annotate it with ARIA roles.

00:41:20.244 --> 00:41:24.682
And in this case, the
VoiceOver machinery

00:41:24.682 --> 00:41:29.720
and the Accessibility machinery
in web view exposes a lot

00:41:29.721 --> 00:41:32.257
of details like child
relationships.

00:41:32.256 --> 00:41:35.693
And these relationships are
not necessarily the same

00:41:35.693 --> 00:41:38.529
as a normal DOM node
relationship

00:41:38.529 --> 00:41:43.601
where your parent could be
someone that’s deeply-a deep

00:41:43.601 --> 00:41:45.803
ancestor of you.

00:41:45.803 --> 00:41:49.340
And we show those
in the sidebar here

00:41:49.340 --> 00:41:50.808
as a parent-child relationship.

00:41:50.808 --> 00:41:51.976
And they’re all linkable.

00:41:51.976 --> 00:41:54.045
So I can click on
them and go directly

00:41:54.045 --> 00:41:59.250
to these other child nodes
that are part of my alert.

00:41:59.250 --> 00:42:02.720
And see that this button has
the right role for a button.

00:42:02.720 --> 00:42:06.557
And it will allow people-it
won’t allow people to focus it,

00:42:06.557 --> 00:42:08.392
but it allows people
to click it.

00:42:08.393 --> 00:42:11.963
And that’s a brief
summary of what you can do

00:42:11.963 --> 00:42:14.732
with the Web Inspector
and Accessibility.

00:42:14.732 --> 00:42:16.634
There’s a session
tomorrow morning

00:42:16.634 --> 00:42:19.704
that covers Accessibility
and the web.

00:42:19.704 --> 00:42:21.573
And I encourage you
to go check it out.

00:42:21.572 --> 00:42:24.875
If you have a website or
a web view in your iOS

00:42:24.876 --> 00:42:29.314
or Mac application, please
do make it accessible.

00:42:30.848 --> 00:42:33.617
So that’s accessibility details.

00:42:33.618 --> 00:42:36.821
Now let’s talk about
something that’s really fun,

00:42:36.821 --> 00:42:39.590
which is Color.

00:42:39.590 --> 00:42:42.326
Color is one of those things-we

00:42:42.326 --> 00:42:46.197
as people can understand
numbers.

00:42:46.197 --> 00:42:49.233
But colors, there’s
millions of them.

00:42:49.233 --> 00:42:53.437
And it’s very visual and
a very personal process

00:42:53.438 --> 00:42:55.707
of picking the right color.

00:42:55.706 --> 00:43:00.444
And if you’re like me and
you’re working on a webpage,

00:43:00.445 --> 00:43:02.314
you might have a
client come in and say,

00:43:02.313 --> 00:43:07.385
"I want this color salmon"
or "this color taupe."

00:43:07.385 --> 00:43:12.824
It’s hard for them to take those
words and you can translate

00:43:12.824 --> 00:43:14.693
that into the right color.

00:43:14.692 --> 00:43:16.661
Wouldn’t it be great if you
can just bring up the color,

00:43:16.661 --> 00:43:18.630
pick it right there
in the webpage

00:43:18.629 --> 00:43:21.499
and modify it right
there in front of them.

00:43:21.499 --> 00:43:23.501
So that’s what we’ve added
in the Web Inspector,

00:43:23.501 --> 00:43:25.069
and I’ll give you a demo.

00:43:25.069 --> 00:43:28.105
So I have an icon that
I’ve been mocking up.

00:43:28.106 --> 00:43:30.842
And often I do these
things in the web

00:43:30.842 --> 00:43:32.811
because that’s something
I understand.

00:43:32.810 --> 00:43:35.112
I can play around
with it a lot easier

00:43:35.113 --> 00:43:37.549
than maybe I could
do in Photoshop.

00:43:37.548 --> 00:43:40.918
And this icon is a little small
so I’ll just go ahead and bring

00:43:40.918 --> 00:43:45.122
up the Web Inspector here.

00:43:45.123 --> 00:43:49.594
And I have a class
that I can add

00:43:49.594 --> 00:43:52.163
to make it a little
bigger for you.

00:43:52.163 --> 00:43:54.265
So, now I have my icon.

00:43:54.265 --> 00:43:55.333
It has a couple colors.

00:43:55.333 --> 00:43:56.901
It’s got this color
for the glyph

00:43:56.901 --> 00:43:59.237
and it’s got a gradient
in the background.

00:43:59.237 --> 00:44:06.511
I can bring up the Style
sidebar and see those colors.

00:44:06.511 --> 00:44:10.248
And in this case, I’m
using some named colors.

00:44:10.248 --> 00:44:12.450
CSS has hundreds
of named colors.

00:44:12.450 --> 00:44:14.886
But maybe it’s not
the right teal.

00:44:14.886 --> 00:44:17.689
That’s a little more
green than I expected

00:44:17.688 --> 00:44:22.693
or the light blue is
not enough sea foam

00:44:22.693 --> 00:44:26.630
or whatever your client is
telling you to make this color.

00:44:26.631 --> 00:44:33.905
So, I can click on these colors
swatches and get a Color Editor.

00:44:33.905 --> 00:44:37.942
Or I can switch over
to the CSS resource

00:44:37.942 --> 00:44:41.245
and get the exact
same experience.

00:44:41.245 --> 00:44:44.115
But in this case, we want
your source code to be front

00:44:44.115 --> 00:44:47.318
and center, so we don’t even
add those color swatches.

00:44:47.318 --> 00:44:49.387
But we have a new feature

00:44:49.387 --> 00:44:53.725
that let you get a data
detector-like experience.

00:44:53.724 --> 00:44:55.259
When we detect that
it’s a color,

00:44:55.259 --> 00:44:59.897
we will show a color wheel
next to it as you hover it.

00:44:59.897 --> 00:45:02.633
And when you click
on that wheel,

00:45:02.633 --> 00:45:05.202
we bring up the color popover.

00:45:05.203 --> 00:45:07.739
And in this case we
could just click around

00:45:07.738 --> 00:45:10.674
and you can see the color
updating live right there

00:45:10.675 --> 00:45:13.144
in the web page.

00:45:13.144 --> 00:45:15.847
And I can find the right color

00:45:15.846 --> 00:45:19.183
that I’m looking
for, for this glyph.

00:45:19.183 --> 00:45:21.986
And if it’s a named color
it will default back

00:45:21.986 --> 00:45:23.654
to the named color syntax.

00:45:23.654 --> 00:45:25.422
But if it’s not something
that’s named,

00:45:25.423 --> 00:45:29.661
it will just give you
the RGB syntax or RGBa

00:45:29.660 --> 00:45:32.696
if you picked an alpha.

00:45:32.697 --> 00:45:35.200
But we didn’t stop there.

00:45:35.199 --> 00:45:37.802
We now let you do gradients.

00:45:37.802 --> 00:45:41.406
And gradients are even more
hard to visualize than color

00:45:41.405 --> 00:45:43.407
because you have that interplay

00:45:43.407 --> 00:45:46.543
of the colors transitioning
from one to another.

00:45:46.544 --> 00:45:49.814
And it’s hard to see
those in your mind.

00:45:49.814 --> 00:45:53.518
But we can go ahead
and edit this gradient.

00:45:53.517 --> 00:45:56.754
And it gives you a simple slider

00:45:56.754 --> 00:46:00.558
that you might be familiar
with from other UIs.

00:46:00.558 --> 00:46:02.427
And I can drag these around

00:46:02.426 --> 00:46:05.329
and you’ll see it’s updating
the source code as I drag this.

00:46:05.329 --> 00:46:07.298
The percentage is changing.

00:46:07.298 --> 00:46:09.767
And when I let go, it
updates the page live.

00:46:09.767 --> 00:46:15.273
So I can see exactly what
is applying to this page.

00:46:15.273 --> 00:46:18.343
But you can’t just
edit the color stops.

00:46:18.342 --> 00:46:25.850
You can edit the type of
gradient or you can pick radial

00:46:25.850 --> 00:46:28.686
so it’s coming out
from the center.

00:46:28.686 --> 00:46:31.756
And I can click on these
colors and get the color wheel

00:46:31.756 --> 00:46:36.060
and start editing each of
these color stops directly.

00:46:36.060 --> 00:46:40.231
So I can find the exact
look I’m looking for.

00:46:40.231 --> 00:46:45.837
Drag this around.

00:46:45.836 --> 00:46:49.640
Maybe we’ll run it to be
more of the starburst look.

00:46:51.909 --> 00:46:53.978
A little bit more yellow.

00:46:53.978 --> 00:46:57.582
Or the client might say, "Oh,

00:46:57.581 --> 00:47:00.317
I want a linear gradient
in this case."

00:47:00.318 --> 00:47:03.321
So let’s go back to the
traditional iOS look

00:47:03.321 --> 00:47:10.028
for gradients and start picking
some pretty wild colors here.

00:47:10.027 --> 00:47:15.232
So that’s the gradient editor
at the new Web Inspector.

00:47:15.232 --> 00:47:24.975
And what I didn’t show you here,
let’s go back and reload here.

00:47:29.647 --> 00:47:33.184
If I make any of
these changes, say,

00:47:33.184 --> 00:47:37.655
I want to go back and save it.

00:47:37.655 --> 00:47:41.125
Let’s make this a red
and that looks good.

00:47:41.125 --> 00:47:43.461
That looks like a sunset.

00:47:43.461 --> 00:47:46.798
In the Web Inspector, I can
just go ahead and hit Command+S

00:47:46.797 --> 00:47:49.466
that will bring up the
traditional Save dialogue.

00:47:49.467 --> 00:47:51.202
Go ahead and replace it.

00:47:51.202 --> 00:47:54.305
And now, if I close the Web
Inspector, reload the page,

00:47:54.305 --> 00:47:57.542
I have that gradient
color right there.

00:47:57.541 --> 00:48:00.377
The icon is a different size
because I was modifying the DOM

00:48:00.378 --> 00:48:02.013
and it that doesn’t save.

00:48:02.012 --> 00:48:04.281
But if you’re editing
a CSS resource

00:48:04.281 --> 00:48:07.718
or any other local file resource
you can save those right back

00:48:07.718 --> 00:48:10.955
to disk from the Web Inspector.

00:48:10.955 --> 00:48:12.690
So that’s Color and
Gradient Editing.

00:48:12.690 --> 00:48:15.126
And I hope you play around
with it and try it out.

00:48:15.126 --> 00:48:20.565
It’s really fun to just get down
and dirty with those colors.

00:48:20.564 --> 00:48:23.434
And the gradient
syntax is something

00:48:23.434 --> 00:48:25.503
that I still have
trouble remembering.

00:48:25.503 --> 00:48:28.106
But the Web inspector will
just help you right there

00:48:28.105 --> 00:48:31.375
and get the right
syntax and let you go

00:48:31.375 --> 00:48:33.978
on to do more important
things in your code.

00:48:33.978 --> 00:48:38.049
So that’s the summary
of all the new features,

00:48:38.048 --> 00:48:40.484
and just a brief introduction

00:48:40.484 --> 00:48:43.287
of all the new features
in the Web Inspector.

00:48:44.422 --> 00:48:47.425
So, I encourage you
to take advantage

00:48:47.425 --> 00:48:49.594
of the new JavaScript
language features.

00:48:49.593 --> 00:48:54.398
As you’re able to release and
use the new modern browsers,

00:48:54.398 --> 00:49:00.037
or use iOS 8 exclusively, or
Mac OS Yosemite exclusively,

00:49:00.037 --> 00:49:01.171
you could start using some

00:49:01.172 --> 00:49:04.108
of these new language
and syntax features.

00:49:05.209 --> 00:49:08.446
The Web Inspector is
now available again

00:49:08.446 --> 00:49:09.948
from your Mac Applications.

00:49:09.947 --> 00:49:11.715
If you have a web view
that you’ve always wanted

00:49:11.715 --> 00:49:13.884
to see what it’s doing
in your application,

00:49:13.884 --> 00:49:15.285
there’s been a few
ways to do it.

00:49:15.286 --> 00:49:17.855
But you can now officially
use the web inspector

00:49:17.855 --> 00:49:20.624
in your Mac Application.

00:49:20.624 --> 00:49:23.560
And I want you to
enjoy debugging your

00:49:23.561 --> 00:49:24.629
JavaScript context.

00:49:24.628 --> 00:49:27.297
This is something
that may seem simple.

00:49:27.298 --> 00:49:28.866
Oh yeah, there’s now a debugger.

00:49:28.866 --> 00:49:32.269
But, yeah, now there’s
a debugger.

00:49:32.269 --> 00:49:35.272
You can now debug this
JavaScript that’s been plaguing

00:49:35.272 --> 00:49:40.077
you or giving you this weird
errors or it’s always been hard

00:49:40.077 --> 00:49:43.514
to debug these contexts because
there’s been no debugger that’s

00:49:43.514 --> 00:49:47.651
been able to give
you that information.

00:49:47.651 --> 00:49:50.087
And again, it’s really important

00:49:50.087 --> 00:49:52.323
to make your web
applications accessible

00:49:52.323 --> 00:49:55.426
and your iOS application
accessible.

00:49:55.426 --> 00:49:57.695
And be a colorful person.

00:49:57.695 --> 00:50:01.299
Enjoy color editing in the Web
Inspector and gradient editing.

00:50:01.298 --> 00:50:06.303
And again, for more information,
you can contact Evangelism

00:50:06.303 --> 00:50:11.008
at this email address, or the
Developer Technical support,

00:50:11.008 --> 00:50:12.343
and even the Apple Forums.

00:50:12.343 --> 00:50:14.145
I’m in the Apple Forums
if you have a question

00:50:14.144 --> 00:50:17.014
about the Web Inspector,
or anything web-related,

00:50:17.014 --> 00:50:21.352
or one of our team will be
able to answer it or I would.

00:50:21.352 --> 00:50:23.821
There-Again, there’s
a couple more sessions

00:50:23.821 --> 00:50:27.692
that might interest you as web
developers or iOS developers

00:50:27.691 --> 00:50:30.894
that have web or
JavaScript context.

00:50:30.895 --> 00:50:33.498
You can go to the
session tomorrow morning

00:50:33.497 --> 00:50:35.833
and learn all you need to
know about accessibility

00:50:35.833 --> 00:50:37.268
in your web application.

00:50:37.268 --> 00:50:40.238
And then stay in that
same room and learn

00:50:40.237 --> 00:50:44.308
about responsive web design
for making your web apps scale

00:50:44.308 --> 00:50:47.077
from desktop size
to iPhone size.

00:50:47.077 --> 00:50:48.245
And that’s it.

00:50:48.245 --> 00:50:49.413
Thanks a lot.

00:50:49.413 --> 00:50:51.482
[ Applause ]