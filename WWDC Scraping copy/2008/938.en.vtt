WEBVTT

00:00:20.830 --> 00:00:24.700
Good morning and welcome
to Friday at WWDC.

00:00:24.700 --> 00:00:28.260
I hope you're all enjoying your
day and the rest of your time here.

00:00:28.260 --> 00:00:33.490
My name is Christian Wagner and I am the
guy standing in front of you right now.

00:00:34.250 --> 00:00:36.000
So I hope you're excited
for a good session.

00:00:36.000 --> 00:00:40.380
We're going to be talking about Dashboard
widgets and iPhone web apps today.

00:00:40.380 --> 00:00:42.800
So just a brief recap.

00:00:42.800 --> 00:00:45.380
Behind me, you'll see Mac OS X for Tiger.

00:00:45.380 --> 00:00:49.490
And one of the biggest features of
Mac OS X for Tiger was Dashboard,

00:00:49.500 --> 00:00:51.590
which had these little widgets on them.

00:00:51.600 --> 00:00:56.200
And widgets are small applications
built using web technologies like HTML,

00:00:56.200 --> 00:00:57.760
CSS, and JavaScript.

00:00:57.780 --> 00:01:00.680
So they were Ajax before Ajax was Ajax.

00:01:00.990 --> 00:01:03.460
So it's one of those things that,
you know,

00:01:03.460 --> 00:01:07.160
we brought these into Leopard then
and added a couple more widgets.

00:01:07.200 --> 00:01:11.940
And we also added Dashcode,
the IDE for creating Dashboard widgets.

00:01:11.980 --> 00:01:15.560
And Dashcode ships with 10 templates
that make it very simple to start

00:01:15.560 --> 00:01:17.260
off your widget development.

00:01:17.260 --> 00:01:19.990
They come with all of the code
and some design to kind of get

00:01:19.990 --> 00:01:21.540
you hit the ground running.

00:01:21.540 --> 00:01:25.920
Now, we're going to spend today's
session talking about two things.

00:01:25.920 --> 00:01:30.380
One, we're going to talk about taking a
web application for the iPhone and

00:01:30.660 --> 00:01:32.800
bringing it onto Dashboard as a widget.

00:01:32.800 --> 00:01:34.200
Why would you want to do that?

00:01:34.290 --> 00:01:38.030
Well, you'd want to do that because this
is a great way to take some existing

00:01:38.030 --> 00:01:41.230
work that you've already done and
expose it to a whole new platform,

00:01:41.240 --> 00:01:43.090
the Mac, a whole new audience.

00:01:43.100 --> 00:01:45.990
Being on the desktop gives
you a whole new user base,

00:01:45.990 --> 00:01:48.700
people that you wouldn't
normally be exposed to.

00:01:48.700 --> 00:01:51.790
And that's a great thing you can
do with a small investment and

00:01:51.790 --> 00:01:54.210
some right kind of tips that we're
going to give you in this session.

00:01:54.220 --> 00:01:56.680
And then after we talk about that,
we're going to talk

00:01:56.710 --> 00:01:59.140
about taking your widget,
if you're a widget developer,

00:01:59.520 --> 00:02:02.740
and bringing it onto the iPhone
as an iPhone web application.

00:02:02.740 --> 00:02:04.700
We're going to do this
for the same reasons.

00:02:04.720 --> 00:02:07.340
It's a great way to kind of capitalize
on some of the work that you've

00:02:07.360 --> 00:02:11.480
done making a widget and turning
it into an iPhone web application.

00:02:11.480 --> 00:02:12.880
But first...

00:02:15.570 --> 00:02:18.280
We're going to go and make ourselves
the eight-minute Twitter widget.

00:02:18.280 --> 00:02:19.220
That went really quick there.

00:02:19.220 --> 00:02:21.650
I'd like to bring my boss,
Kirk Huddleston, on board.

00:02:21.650 --> 00:02:25.620
And Kirk here, well, we're going to do a
little bit of a gamble.

00:02:25.620 --> 00:02:27.980
I said this is the
eight-minute Twitter widget.

00:02:27.980 --> 00:02:31.420
So Kirk here has his iPhone
with the timer application,

00:02:31.470 --> 00:02:34.780
and I'm going to make this
widget in eight minutes.

00:02:34.830 --> 00:02:40.150
If I don't, all of the wonderful people
in this session are going to

00:02:40.150 --> 00:02:42.770
get Milky Ways and Hershey's.

00:02:42.860 --> 00:02:44.120
Just Halloween.

00:02:44.220 --> 00:02:47.820
Some more Milky Ways and
Three Musketeers and Kit Kats.

00:02:47.820 --> 00:02:49.700
So.

00:02:49.730 --> 00:02:51.650
Woo.

00:02:53.300 --> 00:02:55.050
So I'd like to go on to the demos,
please.

00:02:55.050 --> 00:02:57.770
Kirk, are you ready?

00:02:57.790 --> 00:03:00.580
All right, and go.

00:03:00.580 --> 00:03:02.240
So we're going to start off here.

00:03:02.240 --> 00:03:04.180
This is your standard-issue
Mac OS X 5 install,

00:03:04.180 --> 00:03:07.280
and I'm going to launch Dashcode.

00:03:07.280 --> 00:03:09.780
Dashcode, as you see here,
has this new capability

00:03:09.780 --> 00:03:12.840
of doing web applications,
but we're going to go down here

00:03:12.840 --> 00:03:14.230
and look at the Dashboard widgets.

00:03:14.240 --> 00:03:16.280
And I'm going to choose a custom widget.

00:03:16.280 --> 00:03:19.580
So Dashcode's user interface
has this area on the left over

00:03:19.580 --> 00:03:21.400
here called the Navigator.

00:03:21.860 --> 00:03:23.710
This is where you have your
DOM tree and a bunch of other

00:03:23.710 --> 00:03:24.850
things that widgets need.

00:03:24.860 --> 00:03:27.040
Underneath that,
you have steps that kind of guide you

00:03:27.040 --> 00:03:28.870
through the widget development process.

00:03:28.880 --> 00:03:30.860
And then over here in the
main part of the window,

00:03:31.080 --> 00:03:32.500
you'll see that we have the Canvas.

00:03:32.500 --> 00:03:33.890
This is where you design your widgets.

00:03:33.900 --> 00:03:37.600
So I'm going to go about,
I'm going to design my Twitter widget.

00:03:37.600 --> 00:03:40.330
So I'm going to reuse
this Hello World text,

00:03:40.580 --> 00:03:43.000
drop it up at the top,
and I'm going to call

00:03:43.010 --> 00:03:44.660
this Twitter-tastic.

00:03:46.670 --> 00:03:48.600
You have to have Twitter in the
name of your Twitter widget.

00:03:48.600 --> 00:03:50.840
And I'm going to keep this
info button and move it up.

00:03:50.980 --> 00:03:52.360
So you'll see that in the canvas here.

00:03:52.360 --> 00:03:53.860
You know, it's literally drag-and-drop.

00:03:53.860 --> 00:03:55.540
You can move things around
however you see fit.

00:03:55.590 --> 00:03:56.430
It's very visual.

00:03:56.440 --> 00:03:59.180
Then I'm going to bring
up the library here.

00:03:59.180 --> 00:04:01.330
The library is where we
have these Dashcode parts.

00:04:01.440 --> 00:04:03.730
These are prepackaged
bits of functionality,

00:04:03.910 --> 00:04:05.740
styling code,
all sorts of stuff that kind of

00:04:05.830 --> 00:04:07.280
jumpstart your widget development.

00:04:07.600 --> 00:04:12.920
So I'm going to grab a part
here called the scroll area.

00:04:12.920 --> 00:04:16.360
So the scroll area gives us a kind of,
you know, content area.

00:04:16.360 --> 00:04:19.160
And if it overflows,
it gives us a scroll bar.

00:04:19.160 --> 00:04:19.760
Okay?

00:04:19.760 --> 00:04:23.680
So I'm going to grab that
and kind of size it like so.

00:04:23.680 --> 00:04:29.100
Now, one of the new things that we have
in Dashcode 2 for you is a list part.

00:04:29.120 --> 00:04:33.510
The list part will take
a kind of template row,

00:04:33.510 --> 00:04:36.460
and it will stamp out multiple instances.

00:04:36.460 --> 00:04:38.730
N instances of that row,
however you set it up.

00:04:38.800 --> 00:04:41.300
And then you provide some
code to kind of shove the data

00:04:41.300 --> 00:04:42.660
in each row as you see fit.

00:04:42.660 --> 00:04:43.880
We'll get into that later.

00:04:43.880 --> 00:04:46.030
But right now,
what I'm going to do is I'm going

00:04:46.160 --> 00:04:47.590
to take the template row here.

00:04:47.590 --> 00:04:49.700
I'm going to make it 48 pixels high.

00:04:49.700 --> 00:04:52.980
There's already one text
field or text area in here.

00:04:52.980 --> 00:04:56.090
I'm going to just take that,
move it over here or so.

00:04:56.200 --> 00:04:58.440
I'm going to add a second one there.

00:04:58.440 --> 00:05:00.630
So the first one I'm going
to use for the person's name

00:05:00.640 --> 00:05:01.990
that I'm going to be getting.

00:05:02.000 --> 00:05:04.260
The second one I'm going to
use for their Twitter status.

00:05:04.300 --> 00:05:04.720
Okay?

00:05:04.720 --> 00:05:06.000
So I'm going to grab a text part.

00:05:06.460 --> 00:05:07.610
- You hurt?

00:05:09.460 --> 00:05:12.260
Grab this one, and we're just going to
put that right underneath.

00:05:12.260 --> 00:05:14.770
And then I'm also going to grab,
while I'm here, a box.

00:05:14.780 --> 00:05:18.200
So a box is just essentially,
if you're savvy in the

00:05:18.210 --> 00:05:20.820
wonderful ways of HTML and CSS,
it's just a div.

00:05:20.840 --> 00:05:24.080
Okay, but this is where I'm going to be
putting people's user pictures.

00:05:24.080 --> 00:05:26.760
Okay, so that's all I need from
the library right now.

00:05:26.760 --> 00:05:27.600
I'm going to close the library.

00:05:27.600 --> 00:05:29.530
I'm going to bring up
Dashcode's inspector.

00:05:29.640 --> 00:05:33.270
The inspector lets you
inspect any item's properties.

00:05:33.290 --> 00:05:35.860
Okay, so you can add handlers,
you can change its style,

00:05:35.860 --> 00:05:38.510
anything that involves that part,
you can mess with that.

00:05:38.990 --> 00:05:43.380
So what I'm going to do here is I'm
going to turn off this box's stroke,

00:05:43.530 --> 00:05:44.550
because I don't need any line around it.

00:05:44.600 --> 00:05:45.700
There's going to be a picture in there.

00:05:45.700 --> 00:05:48.430
And then I'm going to turn on
something new that we added in

00:05:48.430 --> 00:05:50.090
Dashcode to its design guide.

00:05:50.100 --> 00:05:51.400
I'm going to click away from the box.

00:05:51.460 --> 00:05:52.700
You'll see that it just
kind of disappears.

00:05:52.700 --> 00:05:56.540
Turning on the design guide just leaves
a little bit of an outline there,

00:05:56.540 --> 00:05:58.150
so I know that, yes,
there's something there.

00:05:58.200 --> 00:06:01.410
So I'm going to align
that in the top here,

00:06:01.410 --> 00:06:05.770
and then I'm going to
make it 48 by 48 pixels.

00:06:05.800 --> 00:06:08.400
I happen to know that
Twitter user images are 48 by 48.

00:06:08.400 --> 00:06:12.030
And then while I'm here,
I'm also going to say that I want

00:06:12.030 --> 00:06:14.700
this picture to be vertically aligned.

00:06:14.700 --> 00:06:18.460
And then I'm going to take the status.

00:06:18.640 --> 00:06:19.980
I'm going to make it document flow.

00:06:19.980 --> 00:06:22.220
And what that means is it's
going to actually push down,

00:06:22.220 --> 00:06:25.330
it's going to actually make the rows
bigger as the status text grows.

00:06:25.450 --> 00:06:26.890
We'll get into that a
little bit more later,

00:06:26.890 --> 00:06:29.240
too,
but I'm going to make that about yay big.

00:06:29.240 --> 00:06:31.800
I'm going to make it grow on the inside.

00:06:31.800 --> 00:06:33.100
I'm going to make it document flow.

00:06:33.100 --> 00:06:35.280
I'm going to tell the
template row to grow.

00:06:35.400 --> 00:06:37.900
Last things I need to do
around here right now is,

00:06:37.930 --> 00:06:41.620
I need to actually give each of
these elements a unique ID that I can

00:06:41.630 --> 00:06:43.380
reference them from in JavaScript.

00:06:43.400 --> 00:06:45.880
So we're going to say the
name should be the name.

00:06:45.900 --> 00:06:48.900
The second text field
should be the status.

00:06:48.900 --> 00:06:51.380
And the box should be the picture.

00:06:51.400 --> 00:06:54.400
So right now I've got a kind of
bland-looking Twitter widget.

00:06:54.400 --> 00:06:56.400
Let's make it look a little bit snazzier.

00:06:56.400 --> 00:06:59.400
I'm going to take the
three text bits here.

00:06:59.400 --> 00:07:05.840
I'm going to make them white
and give them a black shadow.

00:07:05.900 --> 00:07:07.400
Now, of course, you can't see them.

00:07:07.400 --> 00:07:11.400
So I'm going to make the background
of the widget solid black.

00:07:11.400 --> 00:07:12.900
And I'm going to make the background
of the widget solid black.

00:07:14.860 --> 00:07:17.040
And because it's not on the Mac,
if it's not on the Mac,

00:07:17.040 --> 00:07:17.880
it's got to have glass.

00:07:17.900 --> 00:07:20.300
Basically, it's going to be on the Mac,
so we'll add a glass effect here.

00:07:20.300 --> 00:07:25.730
We're going to take down the curvature,
cut down on the shine a little bit.

00:07:27.170 --> 00:07:29.680
I'm going to move it up to about there.

00:07:29.780 --> 00:07:30.980
Okay, so that looks a little bit better.

00:07:31.170 --> 00:07:32.900
And just to make it fit in
that much more in the Mac,

00:07:32.900 --> 00:07:36.300
we are going to make
it a little bit opaque.

00:07:36.410 --> 00:07:37.300
So that's cool.

00:07:37.300 --> 00:07:39.690
Now, the list is white,
so let's just get rid

00:07:39.690 --> 00:07:41.100
of its background color.

00:07:41.170 --> 00:07:42.560
And that's our design.

00:07:42.610 --> 00:07:44.580
So let's go into code now.

00:07:44.710 --> 00:07:47.050
Now, if I swap out the steps here,
you'll see I can get to the

00:07:47.050 --> 00:07:48.390
code that makes the widget.

00:07:48.530 --> 00:07:49.520
How are we doing on time, Kirk?

00:07:49.750 --> 00:07:50.700
I'm at five minutes.

00:07:50.700 --> 00:07:52.440
I got to do some three minutes.

00:07:54.400 --> 00:10:19.200
[Transcript missing]

00:10:19.830 --> 00:10:20.200
All right.

00:10:20.200 --> 00:10:20.900
That's pretty good.

00:10:20.940 --> 00:10:21.690
I'm going to run it.

00:10:22.150 --> 00:10:23.700
And...gah!

00:10:23.700 --> 00:10:23.700
Didn't work.

00:10:23.700 --> 00:10:24.370
All right.

00:10:24.370 --> 00:10:25.700
So what am I going to do?

00:10:25.700 --> 00:10:27.700
I'm going to look at this
performance monitor here.

00:10:27.700 --> 00:10:29.700
Look at the performance monitor.

00:10:29.700 --> 00:10:31.700
You see that no network,
nothing loaded over the network.

00:10:31.700 --> 00:10:35.700
So if I go back to the, uh, resource log,
you'll see, and I go to network here,

00:10:35.700 --> 00:10:38.540
and I got this file, but this file,
this JSON file doesn't

00:10:38.540 --> 00:10:39.700
have any information in it.

00:10:39.700 --> 00:10:41.700
And this is a common gotcha
in widget development.

00:10:41.700 --> 00:10:44.590
I need to declare my intention
to use network access.

00:10:44.710 --> 00:10:46.670
I click network access.

00:10:46.700 --> 00:10:46.700
I click stop.

00:10:46.760 --> 00:10:48.700
I'm going to run it now.

00:10:48.700 --> 00:10:49.630
Who thinks it's going to work now?

00:10:49.700 --> 00:10:51.700
Going to click run.

00:10:51.930 --> 00:10:52.700
And it works.

00:10:52.700 --> 00:10:53.700
Time.

00:10:53.700 --> 00:10:58.570
7:54.

00:10:58.700 --> 00:11:00.320
Whoo!

00:11:06.410 --> 00:11:07.360
Thank you very much, Kirk.

00:11:07.360 --> 00:11:09.380
That said,
stop by our lab this afternoon,

00:11:09.380 --> 00:11:10.560
have at the candy.

00:11:10.560 --> 00:11:12.180
You can have as much as you like, okay?

00:11:12.180 --> 00:11:14.350
Can I get back the slides, please?

00:11:29.200 --> 00:11:30.340
All right,
so now that we've talked a little

00:11:30.350 --> 00:11:32.490
bit about making your first widget,
I hope you've gotten a good

00:11:32.490 --> 00:11:33.840
introduction to how Dashcode works.

00:11:33.840 --> 00:11:37.000
I want to spend some time talking
about taking your iPhone web

00:11:37.000 --> 00:11:40.190
application and making a widget,
just some things that you should know.

00:11:40.200 --> 00:11:43.070
So first and foremost,
I want to talk about the idea

00:11:43.130 --> 00:11:44.750
of Model View Controller.

00:11:44.760 --> 00:11:46.820
Now, I'm sure you've heard
all about this all week,

00:11:46.820 --> 00:11:49.950
so I'm going to just go over it
briefly and just let you know that

00:11:49.950 --> 00:11:54.360
it does apply to web applications and
widgets just as well as it applies

00:11:54.430 --> 00:11:59.580
to Ruby on Rails applications or
a Cocoa Touch or Cocoa application.

00:11:59.580 --> 00:12:02.540
So in this case,
we're going to have our model,

00:12:02.630 --> 00:12:05.460
and it might be something like,
I don't know,

00:12:05.570 --> 00:12:09.050
an RSS feed or a Rails server,
something that's providing the

00:12:09.050 --> 00:12:11.930
data that you want to show to
your widget or web app users.

00:12:11.940 --> 00:12:14.480
On the other side,
you're going to have your view.

00:12:14.480 --> 00:12:17.040
This is how you present
your data in HTML and CSS,

00:12:17.040 --> 00:12:17.700
usually.

00:12:17.720 --> 00:12:20.960
In between them,
we have this controller code.

00:12:20.960 --> 00:12:24.440
This is the code that kind of marshals
the data between the view and any

00:12:24.440 --> 00:12:26.660
changes from the view back into the data.

00:12:26.660 --> 00:12:29.770
Now,
if this were your iPhone web application,

00:12:29.780 --> 00:12:34.320
you would have, you know,
your web app interface in the front here,

00:12:34.320 --> 00:12:37.660
but you could very easily just swap
that in with a widget interface,

00:12:37.720 --> 00:12:40.620
assuming you've structured
your code with MVC in mind.

00:12:40.620 --> 00:12:43.830
And then you would just provide
some different controller code

00:12:43.910 --> 00:12:47.080
to make sure that the information
fits into your widget instead

00:12:47.080 --> 00:12:48.440
of your iPhone web application.

00:12:48.440 --> 00:12:52.050
So now that I've talked about MVC,
I want to spend some time

00:12:52.050 --> 00:12:53.570
talking about widget design.

00:12:53.580 --> 00:12:58.040
So web applications tend
to organically grow down.

00:12:58.040 --> 00:12:59.940
This is the idea of
document flow positioning,

00:12:59.940 --> 00:13:05.070
where the layout of the web application
just kind of flows to its natural size.

00:13:05.080 --> 00:13:08.190
So it just kind of grows organically
down and stops when it's done.

00:13:08.200 --> 00:13:09.950
But widgets are a little bit different.

00:13:09.960 --> 00:13:13.800
Widgets are like applications in
the sense they fit in a fixed place,

00:13:13.800 --> 00:13:16.030
and that if there's any
overflow information,

00:13:16.030 --> 00:13:18.190
you would use something
like a scroll bar,

00:13:18.200 --> 00:13:18.640
okay?

00:13:18.640 --> 00:13:20.940
But one thing which I kind
of want to talk about is,

00:13:20.940 --> 00:13:22.980
one of the things I want to
implore you to do is to think

00:13:23.020 --> 00:13:25.830
about widget design and kind of,
instead of providing, you know,

00:13:25.830 --> 00:13:27.900
scrolling content,
to try to put all of your

00:13:27.900 --> 00:13:30.460
information in one widget,
in one place without

00:13:30.460 --> 00:13:31.870
any type of scrolling.

00:13:31.880 --> 00:13:36.540
The real kind of essence of widget design
is to get your information at a glance,

00:13:36.540 --> 00:13:39.590
so that you just look at it and
then you can get rid of it again,

00:13:39.840 --> 00:13:40.120
okay?

00:13:40.120 --> 00:13:42.390
So that's something I want to
implore you to think about when

00:13:42.400 --> 00:13:43.810
you're designing your widgets.

00:13:45.370 --> 00:13:47.850
Another thing I want you to think
about is taking a look at this widget,

00:13:47.850 --> 00:13:50.710
you'll see that there's this kind
of pop-up menu at the bottom of the

00:13:50.710 --> 00:13:54.660
widget that lets you choose where the
city that this content is coming from,

00:13:54.660 --> 00:13:55.860
where it should go.

00:13:55.930 --> 00:13:58.290
Instead of putting it on
the front of your widget,

00:13:58.290 --> 00:14:01.260
where people aren't going to
really touch it very often,

00:14:01.260 --> 00:14:03.370
you should probably put it
on the back of your widget.

00:14:03.380 --> 00:14:06.510
Widgets have these backs,
and they're intended for things

00:14:06.510 --> 00:14:09.740
like preferences and also
things like about information,

00:14:09.740 --> 00:14:13.000
so your website name and any
other copyright information.

00:14:13.180 --> 00:14:14.850
That tends to go on a widget back.

00:14:14.970 --> 00:14:18.280
It's not necessary for daily use,
so just put it there,

00:14:18.280 --> 00:14:21.420
let people get to it with
an info button on the front.

00:14:21.420 --> 00:14:24.300
And that frees up that whole
swath of space on the front,

00:14:24.490 --> 00:14:26.290
makes your widget a little bit smaller,
which is good,

00:14:26.300 --> 00:14:28.770
because the smaller your widget,
that means more widgets people

00:14:28.770 --> 00:14:31.940
can have on people's Dashboard,
and we want to spread the love there.

00:14:31.940 --> 00:14:34.040
And the other thing is
that by getting rid of the

00:14:34.060 --> 00:14:36.980
Super Concerts banner at the top,
we can put this kind of day

00:14:37.080 --> 00:14:38.680
controller at the top instead.

00:14:38.680 --> 00:14:43.090
And that actually provides something
more useful in the same space.

00:14:43.540 --> 00:14:46.020
So another thing I wanted
to talk about was fonts.

00:14:46.090 --> 00:14:49.300
So you might have an amazing
number of fonts on your Mac,

00:14:49.300 --> 00:14:53.150
but that set of fonts might not
be on every Mac that's out there.

00:14:53.160 --> 00:14:56.160
The fonts listed here are
kind of the safe fonts.

00:14:56.240 --> 00:14:57.700
They're included with every Mac.

00:14:57.750 --> 00:15:00.070
And you don't have to sit
here and write this all down.

00:15:00.080 --> 00:15:03.660
To remember what this list of fonts is,
actually just pop up the Stickies

00:15:03.730 --> 00:15:07.340
widget and take a look at the fonts
on the back of the Stickies widget.

00:15:07.340 --> 00:15:08.370
It's the same list.

00:15:08.420 --> 00:15:11.270
So if you stick to these fonts,
you know you'll be safe and your

00:15:11.440 --> 00:15:12.980
widget will work fine on any Mac.

00:15:15.090 --> 00:15:17.590
So another thing that'll make
your design a little bit easier

00:15:17.600 --> 00:15:18.960
is Dashcode's parts library.

00:15:19.120 --> 00:15:21.900
And you saw this briefly in my demo,
but Dashcode provides a number of

00:15:21.900 --> 00:15:25.070
prepackaged parts so you don't have to
write all the code to get them working

00:15:25.090 --> 00:15:28.270
and you don't have to do any of the
design work if you don't want to.

00:15:28.280 --> 00:15:29.890
So poke through these things.

00:15:29.890 --> 00:15:32.180
And each one of these
parts has an API to them,

00:15:32.180 --> 00:15:34.880
which is what I want to spend
some time talking about,

00:15:34.880 --> 00:15:35.880
the idea of APIs.

00:15:35.880 --> 00:15:37.450
So widgets are web applications.

00:15:37.450 --> 00:15:39.280
They have a lot of web
technology in them,

00:15:39.280 --> 00:15:41.630
but they're a little bit more
in the sense that they're

00:15:41.630 --> 00:15:43.120
also desktop applications.

00:15:43.700 --> 00:15:47.040
So the Dashboard provides a
number of APIs for you to use

00:15:47.220 --> 00:15:48.800
for application-like behavior.

00:15:48.800 --> 00:15:54.270
So you'll see in a lot of the code
that there's this widget object.

00:15:54.280 --> 00:15:59.360
And the widget object is the bridge
between Dashboard and the desktop.

00:15:59.360 --> 00:16:01.400
So the widget object
has a lot of APIs on it,

00:16:01.400 --> 00:16:03.100
which I'm going to discuss now.

00:16:03.100 --> 00:16:08.110
Usually we wrap the calls to the widget
object in this window.widget check.

00:16:08.170 --> 00:16:10.870
So that way if you were to
take this file and run it in

00:16:10.870 --> 00:16:14.880
Safari or a regular web browser,
it would notice that the widget

00:16:14.880 --> 00:16:18.030
object isn't available and then
the code in between just wouldn't

00:16:18.030 --> 00:16:19.240
run and it wouldn't accept.

00:16:19.290 --> 00:16:20.030
And that's important.

00:16:20.130 --> 00:16:21.700
You don't want to have
your code accepting.

00:16:21.700 --> 00:16:25.920
So the first one I wanted to
talk about was widget.openurl.

00:16:25.920 --> 00:16:29.960
So when you have an href,
a link inside of your widget,

00:16:29.960 --> 00:16:33.180
if you were to just click on it,
you would see that the content

00:16:33.300 --> 00:16:35.900
of your widget would be
replaced with that web page.

00:16:35.980 --> 00:16:37.350
And that's actually
behavior you don't want.

00:16:37.430 --> 00:16:38.620
You want it to always be present.

00:16:38.620 --> 00:16:42.370
Instead, you want the link to open in
the person's default browser.

00:16:42.980 --> 00:16:47.320
So if you're using Safari or Firefox,
so widget.openurl will take

00:16:47.320 --> 00:16:49.840
whatever URL is passed in and
open it in the user's browser.

00:16:51.460 --> 00:16:53.480
The next one I want to talk
about is preference for key

00:16:53.480 --> 00:16:55.020
and set preference for key.

00:16:55.020 --> 00:16:58.990
This is a way for you to persist
information that you want to have

00:16:59.000 --> 00:17:02.790
between restarts and logins and
logouts and all that sort of stuff.

00:17:02.890 --> 00:17:04.760
So if there's any information
you want to keep around,

00:17:04.760 --> 00:17:07.700
any preference that a user set,
you would use preference for key

00:17:07.700 --> 00:17:11.940
to retrieve that and set preference
for key to set that preference.

00:17:11.940 --> 00:17:15.980
Now, one thing to keep in mind
is that Dashboard allows

00:17:15.980 --> 00:17:18.670
multiple instances of widgets.

00:17:19.200 --> 00:17:22.780
So you can have n number of copies
of your widget running at any time.

00:17:22.780 --> 00:17:25.120
When you save a preference
with just a generic key,

00:17:25.120 --> 00:17:27.960
that's going to be a global preference
available to all your widgets.

00:17:27.960 --> 00:17:31.270
And that might be useful, but in reality,
you probably want

00:17:31.270 --> 00:17:33.060
per-instance preferences.

00:17:33.060 --> 00:17:36.680
And that's where the idea of
widget.identifier comes into play.

00:17:36.680 --> 00:17:41.030
Dashboard provides a unique identifier
for every instance of a widget.

00:17:41.040 --> 00:17:44.230
And so if you take this identifier
and mangle it with the key,

00:17:44.350 --> 00:17:47.700
you'll get pretty much for
free per-instance preferences.

00:17:51.100 --> 00:17:53.900
So the next thing I wanted to talk about
were a number of handlers that you'll

00:17:53.900 --> 00:17:57.980
want to implement in order to adopt
more proper behavior on the Dashboard.

00:17:57.980 --> 00:18:00.230
The first is Widget on Hide.

00:18:00.240 --> 00:18:02.740
So if you provide a handler
for the on-hide call,

00:18:02.740 --> 00:18:06.140
this is going to be called when Dashboard
is hidden from the user's desktop.

00:18:06.140 --> 00:18:09.550
The reason you want to provide a
handler here is to turn off any timers

00:18:09.610 --> 00:18:11.490
or any other CPU-intensive tasks.

00:18:11.560 --> 00:18:15.830
When the Dashboard is hidden,
your widget shouldn't

00:18:15.910 --> 00:18:17.700
be taking up any CPU.

00:18:18.100 --> 00:18:20.980
So you want to turn off anything
that's CPU-intensive because if,

00:18:21.050 --> 00:18:24.670
you know, basically you're grabbing
globs of CPU time,

00:18:24.680 --> 00:18:26.780
people are going to probably figure
out it's you and then they're going to

00:18:26.780 --> 00:18:27.940
get mad at you and you don't want that.

00:18:27.980 --> 00:18:32.420
So now converse to on-hide,
you're going to have on-show.

00:18:32.420 --> 00:18:34.700
So this is called when your widget shows.

00:18:34.700 --> 00:18:36.430
And this is where you
can then start up time,

00:18:36.540 --> 00:18:38.520
refresh your state,
read your preferences.

00:18:38.520 --> 00:18:40.820
It's a time for you to kind
of catch up on lost time.

00:18:42.240 --> 00:18:47.570
Something new we added in Mac OS X 5
is the widget on sync call.

00:18:47.740 --> 00:18:52.780
So the dock and dashboard allow
its preferences to be synced across

00:18:52.780 --> 00:18:58.070
multiple computers using .mac or me.com
or whatever it's called these days.

00:18:58.260 --> 00:19:01.590
And when that happens,
when that sync is complete,

00:19:01.720 --> 00:19:04.630
your widget will get this call,
and that's kind of a prompt for

00:19:04.760 --> 00:19:07.600
you to read your preferences,
see if they're different, and if so,

00:19:07.600 --> 00:19:10.190
apply that to your widget.

00:19:10.510 --> 00:19:13.700
And the final kind of piece of
this puzzle is widget.onremove.

00:19:13.740 --> 00:19:16.830
So when you save preferences,
they're just left on the

00:19:16.840 --> 00:19:18.300
file system in a file.

00:19:18.300 --> 00:19:22.940
If someone's removing your widget,
you'll want to remove those by passing

00:19:22.940 --> 00:19:27.760
the null argument to preference for key,
set preference for key.

00:19:27.760 --> 00:19:29.730
And that was just going to
wipe out that preference.

00:19:29.730 --> 00:19:31.880
So that's something
you'll want to do as well.

00:19:32.240 --> 00:19:35.940
Now, in the kind of WebKit realm,
there is also drag-and-drop

00:19:35.960 --> 00:19:37.120
functionality.

00:19:37.120 --> 00:19:39.460
People can drag-and-drop
files on your widget.

00:19:39.460 --> 00:19:42.070
And that's a great way for people
to interact with your widget.

00:19:42.070 --> 00:19:44.970
And this is something that
WebKit provides on any DOM element.

00:19:44.980 --> 00:19:46.440
This is not unique to Dashboard.

00:19:46.440 --> 00:19:49.230
And you just provide onDrop and
a number of associated handlers,

00:19:49.230 --> 00:19:51.620
and all those events will
just get handled for you.

00:19:51.620 --> 00:19:54.980
Similarly,
there's also support for copy and paste.

00:19:54.980 --> 00:19:58.830
So if you look at the calculator widget,
there's no explicit place for you

00:19:58.830 --> 00:20:02.170
to go to select the value on the
display and copy and paste it.

00:20:02.210 --> 00:20:05.260
Yet somehow, if you're using it,
you would expect to be able

00:20:05.260 --> 00:20:07.660
to copy a value in or to be
able to copy a value out.

00:20:07.770 --> 00:20:10.590
So you would provide on the
body element of your widget,

00:20:10.610 --> 00:20:13.970
on paste or on copy handlers,
and that would be your opportunity to

00:20:13.970 --> 00:20:16.240
put things to and from the pasteboard.

00:20:17.740 --> 00:20:20.090
and finally,
there's the Widget.System call.

00:20:20.270 --> 00:20:23.240
Widget.System is unique to Dashboard,
and it allows you to run

00:20:23.240 --> 00:20:24.940
any command line utility.

00:20:24.940 --> 00:20:26.700
There's a whole bunch of
documentation in this.

00:20:26.750 --> 00:20:28.750
I won't get into it all,
but it's a handy little thing to have.

00:20:28.800 --> 00:20:32.350
So, in addition to your HTML, CSS,
and JavaScript,

00:20:32.470 --> 00:20:35.980
widgets need a couple of other things,
and Dashcode provides easy

00:20:35.980 --> 00:20:37.430
interfaces to do all this work.

00:20:37.480 --> 00:20:39.450
The first is in the Widget
Attributes Inspector.

00:20:39.460 --> 00:20:42.610
This is kind of a friendly
UI on the Widgets Info.plist,

00:20:42.680 --> 00:20:47.380
and this is where you provide metadata
for your widget for Dashboard.

00:20:47.460 --> 00:20:48.540
You're going to be able
to use your widget.

00:20:48.540 --> 00:20:51.260
So, things like identifiers
and version numbers,

00:20:51.260 --> 00:20:53.620
and also stuff like
localization information.

00:20:53.620 --> 00:20:56.320
Next on the list is the Default Image.

00:20:56.320 --> 00:21:00.480
The Default Image is where you
basically get to preview what your

00:21:00.480 --> 00:21:02.460
widget will look like when it loads.

00:21:02.480 --> 00:21:06.820
So, when Dashboard loads your widget,
while it's actually loading the widget,

00:21:06.820 --> 00:21:10.560
HTML and CSS, it's actually going to
put up this default image,

00:21:10.560 --> 00:21:12.240
and this is where you get
to take a look at that.

00:21:12.280 --> 00:21:14.840
And finally, there's the Widget Icon.

00:21:14.840 --> 00:21:18.470
This is an icon which shows up
in the widget bar in Dashboard.

00:21:18.480 --> 00:21:21.240
It just represents that you want to
provide a unique one for your widget.

00:21:21.240 --> 00:21:23.560
So, at this point,
I'd like to bring my colleague,

00:21:23.560 --> 00:21:24.680
Chris Ryan, on the stage.

00:21:24.700 --> 00:21:28.920
He's going to demo taking a widget,
I'm sorry, a web app into Dashboard.

00:21:28.920 --> 00:21:29.960
Thank you.

00:21:29.980 --> 00:21:31.450
Thank you.

00:21:34.630 --> 00:21:35.710
Thank you, Christian.

00:21:35.720 --> 00:21:40.790
I'm going to show you
guys the 45-minute widget.

00:21:41.210 --> 00:21:42.100
Just kidding.

00:21:42.100 --> 00:21:45.530
So we're going to start with a
web application I've created.

00:21:45.540 --> 00:21:48.900
It shows three times for
different Mars spacecrafts,

00:21:48.900 --> 00:21:51.140
and I'm using very
sophisticated math here,

00:21:51.140 --> 00:21:53.640
so please don't take
these as accurate times.

00:21:53.850 --> 00:21:56.390
And we're going to make
a widget out of this.

00:21:56.600 --> 00:21:58.670
Before I get started,
I just want to show you we have

00:21:58.700 --> 00:22:03.190
our Martian clock code here,
which I've taken care to make sure that

00:22:03.190 --> 00:22:07.760
it follows the model view controller
model as Christian spoke about.

00:22:07.760 --> 00:22:13.860
And so this martianclock.js file
has our model and controller code.

00:22:15.250 --> 00:22:17.100
And I'm going to just
put that away for now.

00:22:17.100 --> 00:22:20.420
And we're going to start
with a new Dashcode project.

00:22:20.450 --> 00:22:22.200
Make a Dashboard widget.

00:22:23.770 --> 00:22:25.850
To start, we're going to take the
web application we had.

00:22:25.850 --> 00:22:28.270
It showed three clocks,
and we're going to bring it down

00:22:28.280 --> 00:22:30.890
to just show one clock at a time,
and then add preferences so

00:22:30.890 --> 00:22:33.460
that we can let the users choose
which clock they want to see.

00:22:33.520 --> 00:22:39.580
And since Dashboard widgets
allow for multiple instances,

00:22:39.930 --> 00:22:45.200
your users can actually open up
multiple copies of that widget

00:22:45.200 --> 00:22:45.200
and show each item one at a time.

00:22:45.200 --> 00:22:45.200
So we're going to shrink this guy down.

00:22:49.340 --> 00:22:53.140
by changing the width
and height of our widget,

00:22:53.580 --> 00:22:58.730
and then give it a better look to
make it look more like a Mars...

00:22:59.800 --> 00:23:01.160
Mars widget here.

00:23:01.170 --> 00:23:03.060
Got an image here.

00:23:03.060 --> 00:23:06.710
Add some of that nice glass that
Christian was speaking about.

00:23:12.220 --> 00:23:14.400
Now we want to grab our title.

00:23:14.420 --> 00:23:16.700
And we're going to use this--
this widget's going to be dynamic.

00:23:16.700 --> 00:23:18.210
It's going to change
which clock it shows,

00:23:18.210 --> 00:23:19.570
depending on the preferences.

00:23:19.700 --> 00:23:21.780
So we want to make this
title nice and big.

00:23:21.840 --> 00:23:24.740
First, we're going to make it big enough
for you guys to actually see.

00:23:25.700 --> 00:23:28.660
And we're going to use Spirit for now.

00:23:28.660 --> 00:23:33.480
And make it nice and big to fit Spirit,
Opportunity, and Phoenix that we're

00:23:33.480 --> 00:23:35.650
going to show here.

00:23:35.670 --> 00:23:37.530
And we want to center it.

00:23:38.970 --> 00:23:40.900
The next thing we're going to do is
we're actually going to take this widget

00:23:40.900 --> 00:23:42.130
and we're going to bring some advances.

00:23:42.140 --> 00:23:45.780
Use the same model and controller code
that we had in our web application

00:23:45.780 --> 00:23:47.650
and add some new little touches.

00:23:47.790 --> 00:23:54.050
So what I want to do is
actually create an analog clock

00:23:54.050 --> 00:23:56.300
as well as a digital clock,
and then create some preferences

00:23:56.300 --> 00:23:56.300
to allow your users to change
which clock they want to see.

00:23:56.520 --> 00:23:58.470
To do that,
we're going to use a new part in

00:23:58.510 --> 00:24:00.690
Dashcode 2.0 called the Stack Layout.

00:24:00.730 --> 00:24:03.380
It's available for both
web apps and widgets.

00:24:03.400 --> 00:24:06.370
And the Stack Layout allows you
to switch dynamically between

00:24:06.900 --> 00:24:10.400
different HTML snippets at runtime.

00:24:10.400 --> 00:24:15.400
And it also makes it easy to design
multiple views as part of your widget.

00:24:15.550 --> 00:24:20.200
Here, the Stack Layout has two views.

00:24:20.200 --> 00:24:20.200
We're going to make
the digital view first.

00:24:21.030 --> 00:24:24.400
and the analog view and name
them so we can later on switch

00:24:24.460 --> 00:24:25.780
between the views we want to see.

00:24:25.780 --> 00:24:29.330
Let's get started just
doing the digital clock.

00:24:29.480 --> 00:24:32.730
So I'm going to start by
dragging in the text part.

00:24:32.780 --> 00:24:40.580
Let's make that big enough so you
guys can actually see back there.

00:24:40.580 --> 00:24:40.580
40.

00:24:44.310 --> 00:24:48.740
I'm going to build the colon in
just to make it a little easier.

00:24:48.820 --> 00:24:50.570
Duplicate that.

00:24:50.760 --> 00:24:53.940
And notice once I duplicate it,
I've moved the second piece over.

00:24:53.940 --> 00:24:54.880
I'm going to make my seconds.

00:24:54.900 --> 00:24:58.490
And when I duplicate it-- oh,
that actually did not work.

00:24:58.830 --> 00:25:01.230
Typically,
the duplication actually goes right

00:25:01.240 --> 00:25:05.510
where you put it the last time to make it
easier for making multiple duplications.

00:25:07.110 --> 00:25:12.030
I'm just going to center this,
remove the colon from the seconds field,

00:25:12.030 --> 00:25:14.560
and right align my hours.

00:25:14.570 --> 00:25:18.380
The next thing we want to do is
actually-- get rid of that dialogue

00:25:18.390 --> 00:25:20.790
there-- is to make this white.

00:25:23.630 --> 00:25:26.550
And now we need to actually change
the IDs for these elements so we

00:25:26.560 --> 00:25:28.300
can access them later on in code.

00:25:28.370 --> 00:25:29.710
So we're going to have ours.

00:25:29.720 --> 00:25:32.240
Oops.

00:25:32.260 --> 00:25:33.160
Editing in the wrong place here.

00:25:33.180 --> 00:25:34.860
Ours.

00:25:37.590 --> 00:25:40.150
The demo gods are with
me-- are not with me today.

00:25:40.340 --> 00:25:44.500
Hours, minutes, and seconds.

00:25:44.820 --> 00:25:46.490
And last, we need to take the
code that we had before,

00:25:46.500 --> 00:25:50.180
the model controller code,
bring it into this project,

00:25:50.180 --> 00:25:51.490
and hook it up.

00:25:51.550 --> 00:25:53.100
So let's open that project.

00:25:53.140 --> 00:25:56.360
I'm just going to drag
the martianclock.js file

00:25:56.500 --> 00:25:57.970
right into our widget.

00:25:58.700 --> 00:26:00.200
Let's take a look real quick.

00:26:00.210 --> 00:26:02.940
And here we have all
the code we had before.

00:26:03.030 --> 00:26:06.750
And we're then going to actually
make sure that we include this

00:26:06.940 --> 00:26:12.330
JavaScript file as part of our
main HTML file so it loads at run.

00:26:18.500 --> 00:26:21.500
So I don't want you guys to
watch me type all day long.

00:26:21.500 --> 00:26:24.500
I have some code in my code
snippet library to actually

00:26:24.500 --> 00:26:26.490
hook up some of these pieces.

00:26:27.120 --> 00:26:28.380
We have update time.

00:26:28.380 --> 00:26:32.240
And update time just gets the
spirit time from our model code.

00:26:32.240 --> 00:26:35.200
And then calls updateDigitalClock,
which is some controller code that

00:26:35.200 --> 00:26:39.350
was in the martianclock.js file,
which takes the time object,

00:26:39.950 --> 00:26:44.460
and then references to the hours,
minutes, and seconds elements

00:26:44.620 --> 00:26:45.750
and updates the time.

00:26:45.890 --> 00:26:48.410
And lastly,
we need to actually call the code.

00:26:48.470 --> 00:26:52.710
We have a set clock timer here as
part of the martianclock.js file,

00:26:53.130 --> 00:26:56.310
which will call our code every
second or so to update our clocks.

00:26:58.190 --> 00:26:58.930
So let's call that.

00:26:58.940 --> 00:27:01.590
We need to pass through the
function it needs to call.

00:27:01.600 --> 00:27:03.600
Update time.

00:27:04.350 --> 00:27:08.360
Okay, so if all works well,
we should have a nice widget.

00:27:08.360 --> 00:27:11.250
Here we go,
we have a widget with our Mars time

00:27:11.390 --> 00:27:13.220
for Spirit in only a couple minutes.

00:27:20.260 --> 00:27:21.440
Now, I'm not just satisfied with that.

00:27:21.440 --> 00:27:23.520
I told you we'd want to add an
analog clock and preferences

00:27:23.520 --> 00:27:24.260
and those sort of things.

00:27:24.280 --> 00:27:28.020
And I want to spend some time showing
you guys how to customize your widget and

00:27:28.020 --> 00:27:30.460
do things that are very widget-specific.

00:27:30.540 --> 00:27:33.250
So let's start with our analog clock.

00:27:33.400 --> 00:27:35.380
And I'm going to bring up the library.

00:27:35.440 --> 00:27:38.370
And to do that,
we have a gauge part here that

00:27:38.370 --> 00:27:40.860
looks very much like a clock.

00:27:40.950 --> 00:27:43.680
And we're going to use that gauge part.

00:27:44.710 --> 00:27:47.260
And we're actually going to stack
three of them on top of each other,

00:27:47.280 --> 00:27:53.100
one for minutes, or hours, minutes,
and seconds.

00:27:53.130 --> 00:27:56.020
And I'm going to go into my inspector.

00:27:56.950 --> 00:27:58.390
And just change some of the ranges.

00:27:58.490 --> 00:28:01.040
We're going to go from 0 to 12.

00:28:01.180 --> 00:28:02.220
And change the threshold.

00:28:02.220 --> 00:28:06.010
The threshold allows you to have
different images based on the values.

00:28:09.500 --> 00:28:15.700
Let's change our angles
from 180 to 540 here.

00:28:15.900 --> 00:28:18.820
And the next thing we're going to
do is for the front-most clock part,

00:28:18.820 --> 00:28:23.220
we're going to have a clear image so
that the different parts behind it show.

00:28:23.350 --> 00:28:25.060
So I'm going to just drag that in.

00:28:25.090 --> 00:28:28.060
And rather than spend a lot of time
messing with these images here,

00:28:28.100 --> 00:28:30.480
I actually have a project
that already has this done,

00:28:30.480 --> 00:28:32.530
so you guys don't have
to watch me do this.

00:28:32.570 --> 00:28:35.260
So just open that right up.

00:28:35.600 --> 00:28:36.900
Great.

00:28:36.930 --> 00:28:37.480
So here's our clock.

00:28:37.530 --> 00:28:39.720
So the next thing we want to do
is actually hook this clock up.

00:28:39.760 --> 00:28:45.990
So to do that, I'm going to replace my
update time function,

00:28:46.170 --> 00:28:50.890
pre-written code,
back to my code library.

00:28:53.300 --> 00:28:56.000
And what this function is doing, again,
it's getting the spirit time.

00:28:56.040 --> 00:29:00.400
It's getting the stack layout
object using the dot object notation

00:29:00.400 --> 00:29:01.660
on the stack layout element.

00:29:01.660 --> 00:29:05.380
And then it's calling
the API getCurrentView,

00:29:05.380 --> 00:29:08.920
which returns the element for the
stack layout that's currently visible,

00:29:08.920 --> 00:29:10.200
and it gets the ID.

00:29:10.200 --> 00:29:12.520
And if it's digital,
it calls our old code before,

00:29:12.630 --> 00:29:13.810
updateDigitalClock.

00:29:13.880 --> 00:29:16.230
And if it's analog,
it calls another function,

00:29:16.230 --> 00:29:18.830
updateAnalogClock,
to update the analog clock.

00:29:21.170 --> 00:29:23.140
So the next thing we need to do is
actually make it so you can actually

00:29:23.140 --> 00:29:24.900
change between the different clocks.

00:29:24.980 --> 00:29:27.650
So let's add some
preferences to our widgets.

00:29:27.770 --> 00:29:34.850
So to do that,
I am going to add a pop-up, text part.

00:29:37.620 --> 00:29:39.300
This is going to be the Mars spacecraft.

00:29:39.300 --> 00:29:44.830
Let's make our pop-up bigger.

00:29:50.300 --> 00:29:53.260
and to make sure that it's white so you
can actually see it on the back here.

00:29:53.260 --> 00:29:54.000
OK.

00:29:54.000 --> 00:29:57.140
The next thing we do is actually
fill in the pop-up object.

00:29:57.140 --> 00:29:58.740
We need to give it a proper ID.

00:29:58.740 --> 00:30:00.980
So it's going to be the craft pop-up.

00:30:02.800 --> 00:30:04.030
Before I do that,
I'm going to duplicate this

00:30:04.030 --> 00:30:09.360
and use it for our clock type,
the analog and digital.

00:30:09.390 --> 00:30:13.000
We're going to go back,
and we're going to have the craft pop up.

00:30:13.010 --> 00:30:17.540
And then we're going to have spirit,
opportunity,

00:30:20.500 --> 00:30:21.740
and the Phoenix.

00:30:21.750 --> 00:30:24.540
Hope that can spell here.

00:30:24.820 --> 00:30:28.590
And the next thing we're going to
do is we're going to actually add

00:30:28.590 --> 00:30:31.950
a handler for our Mars spacecraft.

00:30:32.160 --> 00:30:35.280
And it's going to be the
Change Spacecraft Handler.

00:30:35.280 --> 00:30:39.330
And this is going to be called every
time your user changes the pop-up menu.

00:30:39.520 --> 00:30:42.000
So here it's added code
for us automatically.

00:30:42.020 --> 00:30:45.280
I'm just going to replace that with
some code I've already written.

00:30:50.520 --> 00:30:54.460
What this code is doing is it's getting
the title element that we created before.

00:30:54.460 --> 00:30:57.340
This is the title on the front.

00:30:57.610 --> 00:31:01.150
it is getting the value
of the popup elements,

00:31:01.150 --> 00:31:06.310
setting the title to that value,
so Spirit, opportunity, or Phoenix,

00:31:06.510 --> 00:31:10.540
and then calling widget set
preference as Christian spoke of,

00:31:10.570 --> 00:31:13.760
passing in the craft name,
so Spirit or opportunity,

00:31:13.760 --> 00:31:18.250
and then calling a built-in dash code
convenience that basically takes the

00:31:18.300 --> 00:31:27.600
widget identifier and the key you pass
in to create a per instance specific key.

00:31:28.090 --> 00:31:28.600
So let me do that real
quick for the clock type.

00:31:35.800 --> 00:31:43.800
[Transcript missing]

00:31:45.500 --> 00:31:46.840
Zedor there.

00:31:46.850 --> 00:31:51.250
And we will make a handler for
when you change that type as well.

00:31:51.260 --> 00:31:53.240
Change clock type.

00:31:53.240 --> 00:31:58.170
And again,
I have handy code here to replace that.

00:32:00.480 --> 00:32:04.750
So again, we're grabbing the value of
the type pop up so we know

00:32:04.750 --> 00:32:07.060
whether it's digital or analog.

00:32:07.060 --> 00:32:11.170
We're also grabbing the stack layout
element and grabbing the object from that

00:32:11.170 --> 00:32:15.880
element to access the JavaScript-backed
object for the stack layout.

00:32:15.880 --> 00:32:20.000
And we're setting the current view of
the stack layout to switch between the

00:32:20.000 --> 00:32:23.460
analog and digital views at runtime here.

00:32:23.460 --> 00:32:26.770
And lastly, we're setting the preferences
so this can be saved later on.

00:32:26.780 --> 00:32:31.590
And the next time the widget is opened,
we can actually retrieve these values,

00:32:31.710 --> 00:32:36.870
again, using the create instance
preference key convenience function.

00:32:37.400 --> 00:32:40.380
So now we've saved these values.

00:32:40.380 --> 00:32:41.960
We've learned how to
switch back and forth.

00:32:42.060 --> 00:32:45.040
We need to actually load these values
the next time the widget is loaded

00:32:45.040 --> 00:32:46.820
or when you hide or show the widget.

00:32:47.080 --> 00:32:52.530
So to do that,
I have a load preferences function.

00:32:54.300 --> 00:32:56.700
And the load preferences
function does the similar things.

00:32:56.700 --> 00:33:01.770
It calls widget preference for key,
and it calls create instance preference

00:33:01.820 --> 00:33:07.400
for key with craft and type to get the
instance preference for these two items,

00:33:07.430 --> 00:33:15.410
and then sets the pop-ups appropriately,
and calls change spacecraft

00:33:15.410 --> 00:33:15.410
and change clock type so that
the views are actually updated.

00:33:17.160 --> 00:33:19.440
The next thing we need to do is find
a location to call these preferences

00:33:19.750 --> 00:33:21.230
or to load the preferences.

00:33:21.230 --> 00:33:23.280
And we have to go to our load handler.

00:33:23.310 --> 00:33:26.310
When your widget is loaded,
the load handler is called.

00:33:26.700 --> 00:33:28.360
So we're going to load the preferences.

00:33:28.360 --> 00:33:31.120
And also, as Christian spoke of,
when your widget is synced with

00:33:31.130 --> 00:33:36.580
.Mac and the preferences are synced,
we need to update our preferences.

00:33:38.180 --> 00:33:39.920
So before I go on,
there's a couple things that

00:33:39.920 --> 00:33:41.180
I want to speak of here.

00:33:41.480 --> 00:33:43.910
One of them is that our title
may update in the front,

00:33:43.910 --> 00:33:48.030
but we're not actually updating which
clock that we're getting the data from.

00:33:48.040 --> 00:33:53.410
So I'm going to make a quick change here.

00:33:53.570 --> 00:33:54.540
And any of you JavaScript people might
want to close your eyes for this one.

00:33:54.540 --> 00:33:54.540
It's a little bit of a hack.

00:33:56.450 --> 00:34:03.470
Here I'm grabbing the craft pop-up and
then evaling the get spirit time function

00:34:03.480 --> 00:34:05.400
or whatever the craft is at runtime.

00:34:05.440 --> 00:34:07.640
We can close our eyes for that one.

00:34:07.740 --> 00:34:11.900
One of the things I want to speak
of is the code is already here,

00:34:11.970 --> 00:34:14.040
but make sure you guys understand this.

00:34:14.040 --> 00:34:16.740
When you hide the function,
when the widget is hidden,

00:34:16.740 --> 00:34:18.570
you want to stop your timers
so that you're not actually

00:34:18.670 --> 00:34:20.780
processing data in the background.

00:34:20.810 --> 00:34:24.320
And then again, when the widget is shown,
you want to actually start

00:34:24.320 --> 00:34:26.100
your timer back up again.

00:34:26.350 --> 00:34:29.100
And one last thing with preferences.

00:34:29.750 --> 00:34:34.530
is when your widget is removed,
you want to make sure that you actually

00:34:34.530 --> 00:34:39.080
remove the preferences so that if another
widget of a similar identifier comes up,

00:34:39.100 --> 00:34:41.460
you don't get your preferences in there.

00:34:41.460 --> 00:34:43.390
So we have craft.

00:34:43.580 --> 00:34:47.140
And we have type,
so we're going to move those preferences.

00:34:47.200 --> 00:34:50.530
So let's go run this real
quick and see if it works.

00:34:51.120 --> 00:34:52.760
Hopefully it does.

00:34:52.810 --> 00:34:53.190
So here we go.

00:34:53.200 --> 00:34:55.420
We have the spirit clock
you saw this before,

00:34:55.530 --> 00:34:57.360
the digital clock.

00:34:57.420 --> 00:35:01.040
We can flip to the back,
get our preferences,

00:35:01.120 --> 00:35:03.540
change our clock and the type.

00:35:03.580 --> 00:35:05.820
And here we have an analog
clock for opportunity.

00:35:05.850 --> 00:35:07.840
That's pretty good.

00:35:07.940 --> 00:35:10.710
So now we want to do our
finishing touches on our widget.

00:35:12.930 --> 00:35:16.500
I want to go to the widget attributes,
make sure that we have an appropriate

00:35:16.500 --> 00:35:18.200
identifier to identify our widget.

00:35:18.530 --> 00:35:20.620
And I like this here,
my Martian widget step one.

00:35:20.620 --> 00:35:23.390
Actually,
let's just make it Martian widget.

00:35:23.610 --> 00:35:25.840
We want to go to the default image.

00:35:25.860 --> 00:35:28.060
And the default image is what's
shown when your widget first launches

00:35:28.060 --> 00:35:30.740
before the preferences are loaded
and everything else is running.

00:35:30.770 --> 00:35:35.520
And we don't really want the digital
clock here because you may have your

00:35:35.520 --> 00:35:38.100
preference set to show the analog clock.

00:35:38.140 --> 00:35:41.370
And so to change that,
you can go to any element in

00:35:41.560 --> 00:35:43.560
your widget and in the inspector,

00:35:43.780 --> 00:35:46.230
You can change the-- it's
kind of hard to see here,

00:35:46.230 --> 00:35:48.140
but the show in default image setting.

00:35:48.230 --> 00:35:50.050
And I'm going to go to the
stack layout and just make sure

00:35:50.090 --> 00:35:51.340
none of the clocks are showing.

00:35:51.420 --> 00:35:53.390
So I'm going to remove that
from the default image.

00:35:53.470 --> 00:35:54.610
Let's go back there.

00:35:54.770 --> 00:35:55.200
So there we go.

00:35:55.200 --> 00:35:57.000
It's not showing.

00:35:57.080 --> 00:35:57.860
Go to the widget icon.

00:35:57.860 --> 00:35:58.600
That looks pretty good.

00:35:58.600 --> 00:36:00.880
The icon, you'll see in a second,
it shows when your widget is

00:36:00.980 --> 00:36:03.560
first launched into Dashboard.

00:36:03.600 --> 00:36:07.480
And now we're going to go to a new
panel in Dashcode 2.0 called Share.

00:36:07.730 --> 00:36:10.810
And we're going to change some of the
attributes here that our widget has,

00:36:10.810 --> 00:36:11.980
and we're going to just--

00:36:12.370 --> 00:36:14.060
Give it our name, Martian Clock.

00:36:14.060 --> 00:36:16.480
And all the rest of
the settings look good,

00:36:16.530 --> 00:36:19.570
so we're going to deploy to Dashboard.

00:36:19.670 --> 00:36:20.640
And here we have that icon.

00:36:20.640 --> 00:36:23.690
It's asking us if we want
to install on the Dashboard.

00:36:25.040 --> 00:36:25.760
And there it is.

00:36:25.770 --> 00:36:27.480
Let's keep it.

00:36:27.520 --> 00:36:29.840
And so here we have our widget,
and the great thing is,

00:36:29.840 --> 00:36:32.360
we can open up multiple instances.

00:36:32.360 --> 00:36:38.120
Let's do three, one for Spirit,
Opportunity, and Phoenix.

00:36:38.160 --> 00:36:42.590
Change the clock type and the
actual Mars spacecraft it's showing.

00:36:45.140 --> 00:36:45.490
And there we go.

00:36:45.500 --> 00:36:48.010
Just in a couple minutes,
we've taken our web application and

00:36:48.090 --> 00:36:51.400
created a great widget to deploy on
millions of Mac machines out there.

00:36:51.420 --> 00:36:52.600
Thank you.

00:36:52.600 --> 00:36:54.880
All righty.

00:36:54.880 --> 00:36:59.300
Back to slides, please.

00:37:05.870 --> 00:37:08.170
All right,
so what Chris just showed you is

00:37:08.210 --> 00:37:10.900
how if you structure your code
using Model View Controller,

00:37:10.900 --> 00:37:14.420
he was able to take a whole swath of
code that does all the calculations

00:37:14.490 --> 00:37:17.450
for the clocks and just drag
those right into his widget.

00:37:17.460 --> 00:37:20.610
So by just being smart and kind of
laying out the code ahead of time,

00:37:20.670 --> 00:37:22.510
he's saved himself a lot of hassle.

00:37:22.520 --> 00:37:25.800
Beyond that,
he's made a unique design for his widget.

00:37:25.800 --> 00:37:28.320
His web application had
all three clocks at once,

00:37:28.450 --> 00:37:30.720
but on Dashboard,
he let it be so that every user

00:37:30.830 --> 00:37:34.710
can have whichever combination and
whichever style of clock he wanted.

00:37:35.000 --> 00:37:37.850
So that's a very handy,
good point to take away from there.

00:37:37.860 --> 00:37:42.120
He also managed to leverage Dashcode
parts to save himself a lot of hassle.

00:37:42.120 --> 00:37:44.710
By using the gauge part,
he was able to make a

00:37:44.810 --> 00:37:46.260
clock very trivially.

00:37:47.790 --> 00:37:50.500
He used widget preferences to make
sure that if a person logs out,

00:37:50.500 --> 00:37:53.160
when they come back,
each clock will remember which type of

00:37:53.240 --> 00:37:55.040
clock it is and which clock it's showing.

00:37:55.060 --> 00:37:58.860
And finally,
he provided unique information

00:37:58.860 --> 00:38:01.200
for his Info.plist,
a unique default image,

00:38:01.200 --> 00:38:04.710
and a good widget icon so that his widget
will stand out amongst all the others.

00:38:04.720 --> 00:38:08.590
So now that we've spent time
talking about taking your iPhone web

00:38:08.590 --> 00:38:12.920
application and making it into a widget,
I'd like to spend some time talking about

00:38:12.920 --> 00:38:14.760
making widgets into web applications.

00:38:15.700 --> 00:38:17.740
And I'm just going to sound
like a broken record now,

00:38:17.740 --> 00:38:20.570
but Model-View-Controller really
is the one paradigm you want

00:38:20.570 --> 00:38:21.660
to use in this whole thing.

00:38:21.660 --> 00:38:25.360
Doing this will just let you move a big
swath of code between one and the other,

00:38:25.360 --> 00:38:27.400
and it'll make your life a lot easier.

00:38:28.910 --> 00:38:31.380
Beyond that,
I want to talk a little bit about layout.

00:38:31.500 --> 00:38:33.740
So this here,
let's pretend this is kind of something

00:38:33.740 --> 00:38:36.750
that's a widget that we've just
brought right over onto the phone.

00:38:36.760 --> 00:38:38.960
And it's positioned using
absolute positioning,

00:38:38.960 --> 00:38:41.070
which is typical for
just about most widgets.

00:38:41.110 --> 00:38:45.960
What happens in absolute positioning
is that an item's placement is

00:38:45.960 --> 00:38:50.670
set hard-coded absolutely versus
the top left corner of its view.

00:38:50.680 --> 00:38:54.530
So you'll see the box with the text in it
right now is 35 pixels down from the top.

00:38:54.540 --> 00:38:56.470
And when you have just two
lines of text in there,

00:38:56.470 --> 00:38:57.170
this is fine.

00:38:57.180 --> 00:38:58.720
It fits in the box and
everything works great.

00:38:58.800 --> 00:39:01.300
And if this were a widget and
you wound up having more text,

00:39:01.300 --> 00:39:03.900
you would just put a scroll area,
you'd wrap it in a scroll area

00:39:03.900 --> 00:39:05.080
and get a scroll bar on the side.

00:39:05.080 --> 00:39:07.970
But the thing is, on a phone,
that would be kind of strange to have

00:39:07.970 --> 00:39:11.510
a scroll area inside of something
that already scrolls with your finger.

00:39:11.520 --> 00:39:13.780
And so instead of putting
a scroll area in there,

00:39:13.920 --> 00:39:17.900
you would want to make sure that this box
doesn't have a fixed height of 50 pixels,

00:39:17.900 --> 00:39:20.400
but instead sets its
height automatically,

00:39:20.400 --> 00:39:24.760
which means it would then just be kind
of growing with the size of its content.

00:39:24.760 --> 00:39:27.690
But now you'll see the problem,
and that is that this box that was

00:39:27.690 --> 00:39:31.250
underneath the one that... that has
the text in it has now just fixed

00:39:31.250 --> 00:39:34.230
positioning and they're colliding
and it doesn't look very nice.

00:39:34.300 --> 00:39:39.290
So instead of positioning it absolutely
versus the top left corner of the view,

00:39:39.390 --> 00:39:43.190
I want it to move its... I want it
to position itself relatively using

00:39:43.480 --> 00:39:47.750
document flow positioning and have it be
10 pixels away from the one before it.

00:39:47.820 --> 00:39:50.890
So that means that no matter what
the size of the element above it,

00:39:50.980 --> 00:39:52.880
this one will always be after it.

00:39:52.900 --> 00:39:56.200
So this is Dashcode's
document flow positioning.

00:39:56.260 --> 00:39:58.500
This is the metrics
inspector inside of Dashcode.

00:39:58.500 --> 00:39:58.580
And I lose it.

00:39:58.580 --> 00:39:58.760
So this is Dashcode's
document flow positioning.

00:39:58.760 --> 00:39:58.780
This is the metrics
inspector inside of Dashcode.

00:39:58.800 --> 00:40:01.870
I alluded to this in my first demo,
but you'll see that there's this

00:40:01.950 --> 00:40:03.590
new pop-up for layout up here.

00:40:03.680 --> 00:40:06.670
It lets you choose between absolute
and document flow positioning.

00:40:06.680 --> 00:40:09.840
And then once you've decided
to go with document flow,

00:40:09.840 --> 00:40:12.650
you'll see that you can set the margin,
where this element sits with

00:40:12.650 --> 00:40:14.040
respect to its neighbors.

00:40:14.040 --> 00:40:18.490
I, in the previous slide,
had an offset of 10 pixels on the top,

00:40:18.600 --> 00:40:20.390
so I would set that top value to be 10.

00:40:20.400 --> 00:40:23.140
Also,
you can choose your auto-resize behavior.

00:40:23.140 --> 00:40:25.050
If you're familiar
with Interface Builder,

00:40:25.120 --> 00:40:27.100
this is a springs and
struts kind of idea.

00:40:27.100 --> 00:40:29.310
And then finally,
you can also... You can also set some

00:40:29.310 --> 00:40:32.430
constraints so that each element has
a minimum height or maximum height.

00:40:32.440 --> 00:40:37.980
So also, when you're bringing your
widget onto the phone,

00:40:37.980 --> 00:40:41.340
Dashcode's part library, again,
will prove to be very useful.

00:40:41.340 --> 00:40:46.280
We have a number of parts for things like
arrowed buttons and call and map buttons.

00:40:46.280 --> 00:40:48.420
If you just bring these in,
you won't have to do any work.

00:40:48.480 --> 00:40:50.920
You can just provide whatever
URL you want to go to,

00:40:50.920 --> 00:40:52.550
and these all just work for you.

00:40:53.950 --> 00:40:58.170
Also something we have in Dashcode, too,
is an improved glass styling.

00:40:58.290 --> 00:40:59.880
So you saw that in the first demo.

00:41:00.030 --> 00:41:00.590
Play with that.

00:41:00.610 --> 00:41:01.940
It gets really good results.

00:41:02.010 --> 00:41:05.250
We also added this new
styling called Recessed,

00:41:05.330 --> 00:41:07.670
and it makes the plastic
look like it's pushed in.

00:41:07.770 --> 00:41:09.030
So this is something
we think you'll like,

00:41:09.030 --> 00:41:09.290
too.

00:41:09.310 --> 00:41:11.330
So go ahead and play with that as well.

00:41:11.410 --> 00:41:15.000
So now to show you a little bit
more about bringing your widget as

00:41:15.000 --> 00:41:18.800
a web application onto the iPhone,
I'd like to bring up Han-Ming Ong.

00:41:18.930 --> 00:41:20.970
Han- Thank you, Christian.

00:41:22.210 --> 00:41:26.860
So in this part of the demo here,
we're going to take a widget

00:41:27.370 --> 00:41:29.310
and do two things to it.

00:41:29.640 --> 00:41:32.960
First thing we're going
to do is to-- well,

00:41:32.960 --> 00:41:39.110
we're going to convert the widget into
a web application in a sort of a quick

00:41:39.380 --> 00:41:42.160
and dirty way so they get a feel of it.

00:41:42.160 --> 00:41:42.160
Next thing we're going to do is to
apply some design touches to it so it

00:41:42.160 --> 00:41:42.160
looks and feels like a web application.

00:41:43.310 --> 00:41:44.000
All right.

00:41:44.020 --> 00:41:46.060
Now,
the widget we're going to use is a widget

00:41:46.060 --> 00:41:48.220
that most of you should be familiar with.

00:41:48.240 --> 00:41:50.100
It's a tile game widget in Dashboard.

00:41:50.150 --> 00:41:53.470
For those who have not seen it,
I happen to have a copy here.

00:41:54.930 --> 00:41:58.080
And I'll just run it for you
guys who have not seen it before.

00:41:58.130 --> 00:42:02.590
So when you run it,
the tower board with 16 tiles, one empty,

00:42:02.960 --> 00:42:04.000
would come up.

00:42:04.030 --> 00:42:07.020
The first click shuffles
it around randomly.

00:42:07.270 --> 00:42:10.110
Second click stops it,
and your objective is to start

00:42:10.250 --> 00:42:15.800
clicking around the tile to rearrange
it back to the original configuration.

00:42:16.380 --> 00:42:19.290
Let's take a look at the JavaScript file,
actually.

00:42:19.580 --> 00:42:23.220
Now, the original author has done a
very good job in adhering to the

00:42:23.220 --> 00:42:25.000
Model-View-Controller pattern.

00:42:25.080 --> 00:42:30.300
For example, this is his TAL class right
here in a generic class way,

00:42:30.300 --> 00:42:34.960
a generic class description.

00:42:35.320 --> 00:42:38.500
And here, for example,
is his controller code set on board

00:42:38.500 --> 00:42:41.570
that interacts with his Model class.

00:42:42.080 --> 00:42:45.640
And another example is,
it is a layout function which

00:42:45.640 --> 00:42:47.500
interacts with the view.

00:42:47.570 --> 00:42:50.450
All right,
we're going to reuse this JavaScript file

00:42:50.550 --> 00:42:53.940
wholesale because everything there is,
you know, good for us.

00:42:53.990 --> 00:42:56.300
I'm going to create a
web application now.

00:42:56.350 --> 00:42:59.000
And for this demo,
we can actually start with

00:42:59.000 --> 00:43:01.260
the custom or the utility.

00:43:01.330 --> 00:43:03.150
We're going to make use of
the utility because we're

00:43:03.150 --> 00:43:04.400
going to build on top of it.

00:43:04.530 --> 00:43:06.250
So let's do that.

00:43:07.100 --> 00:43:11.070
Now, very, very briefly,
the utility template, this project here,

00:43:11.180 --> 00:43:13.410
has two views, the front and the back.

00:43:13.640 --> 00:43:17.710
The front has a message element that
allows you to type in your message.

00:43:17.890 --> 00:43:21.050
The back has some settings,
like font and so on,

00:43:21.320 --> 00:43:24.100
that allows you to customize the message.

00:43:24.100 --> 00:43:29.140
It makes use of a local
database to save the settings.

00:43:29.830 --> 00:43:33.310
Now, we're not going to
create a message element,

00:43:33.500 --> 00:43:35.390
so we're going to delete it.

00:43:35.390 --> 00:43:38.730
And the next thing I'm going
to do is to drag over my

00:43:38.730 --> 00:43:41.640
tilegame.js into my new project.

00:43:41.650 --> 00:43:45.760
And let's make sure that
our HTML is aware of it.

00:43:46.180 --> 00:43:47.970
So let's go over there.

00:43:52.000 --> 00:43:55.000
and include tallyan.js right here.

00:43:55.570 --> 00:43:59.800
Let's just save it.

00:44:01.690 --> 00:44:06.320
All right, so I'm also now ready to
copy over the CSS selectors.

00:44:06.320 --> 00:44:12.580
And since there are only three of them,
I'm just going to copy

00:44:12.580 --> 00:44:15.930
and paste to my main.css.

00:44:20.740 --> 00:44:24.950
The widget actually has image
resources that I want to reuse as well.

00:44:25.230 --> 00:44:29.170
Just drag over and drop it
over in my images folder.

00:44:29.510 --> 00:44:31.690
I'm not actually ready to
copy over the DOM element,

00:44:31.690 --> 00:44:36.600
but I want to box it up so that I can
move them around later on if I want to.

00:44:36.780 --> 00:44:39.700
So let's just call the box "towels."

00:44:41.400 --> 00:44:44.490
and resize a little.

00:44:44.510 --> 00:44:46.540
And I actually don't
want to have a stroke,

00:44:46.600 --> 00:44:49.260
so let's get rid of the border.

00:44:49.260 --> 00:44:52.020
Now, let's go over to my widget.

00:44:54.110 --> 00:44:57.680
HTML, and there are only three
elements I want to copy over.

00:44:57.750 --> 00:44:59.630
So let's just copy.

00:45:02.900 --> 00:45:06.440
and go back to my index.main.html file.

00:45:06.470 --> 00:45:11.790
Find our box.

00:45:11.790 --> 00:45:11.790
And this is where I want to drop it in.

00:45:15.880 --> 00:45:18.180
So let's make it look nice here.

00:45:18.180 --> 00:45:18.680
Oops.

00:45:18.680 --> 00:45:23.980
If I do this right,
if I click on the canvas right now,

00:45:23.980 --> 00:45:26.600
they should just appear here in my DOM.

00:45:26.630 --> 00:45:29.870
And let's center it a little.

00:45:30.330 --> 00:45:33.570
Last thing I want to do is to make sure
that the initializer codes that I have

00:45:33.570 --> 00:45:36.400
in my tilegame.js has a chance to be run.

00:45:36.400 --> 00:45:39.500
So here is my three initializers.

00:45:39.530 --> 00:45:43.160
I'm going to cut and put it
in my real load function,

00:45:43.160 --> 00:45:45.680
which is in my main.js.

00:45:49.600 --> 00:45:50.980
and delete stuff that I don't need.

00:45:50.980 --> 00:45:56.900
This is the message element.

00:45:56.900 --> 00:46:00.600
I want you guys to just ignore
the database part for now.

00:46:00.600 --> 00:46:00.600
We're going to touch on it a little.

00:46:00.600 --> 00:46:00.600
And let's just run it.

00:46:01.890 --> 00:46:04.180
So the first quick and dirty
port actually brings it over.

00:46:04.180 --> 00:46:07.870
You actually have your tile game
right now as a web application.

00:46:08.130 --> 00:46:09.400
The animation is still there.

00:46:09.410 --> 00:46:11.460
You can go ahead and play it.

00:46:11.780 --> 00:46:15.860
So next thing I want to do actually is to
style it a little so that it looks and,

00:46:15.860 --> 00:46:17.660
you know, feels like a web application.

00:46:17.660 --> 00:46:19.890
Let's change the name to TileGameForce.

00:46:22.190 --> 00:46:25.720
And if you notice,
when the widget comes up, in this case,

00:46:25.720 --> 00:46:29.060
the game comes up,
it has the yellowish tinge to it.

00:46:29.060 --> 00:46:31.590
So let's just make the color harmonize.

00:46:31.640 --> 00:46:37.480
I happen to have three chips here,
color chips.

00:46:37.860 --> 00:46:40.210
Let's not forget about the border.

00:46:44.040 --> 00:46:46.160
And then when the widget
comes out in Dashboard,

00:46:46.220 --> 00:46:48.910
it has a board to define its boundary,
because in Dashboard,

00:46:48.910 --> 00:46:51.000
there are other kind of widgets running.

00:46:51.010 --> 00:46:53.680
But on the phone,
the screen defines the boundary.

00:46:53.830 --> 00:47:00.600
And actually, here,
we actually have the background

00:47:00.600 --> 00:47:03.000
image as the boundary.

00:47:03.000 --> 00:47:03.000
So what that means is
I actually don't need the board.

00:47:03.000 --> 00:47:03.000
So let's just delete it.

00:47:03.250 --> 00:47:05.100
And now, but the white is gone now.

00:47:05.170 --> 00:47:05.960
So I need to put it back.

00:47:06.090 --> 00:47:07.210
But I have a box to do that.

00:47:07.400 --> 00:47:09.250
So let's just do that.

00:47:09.250 --> 00:47:13.530
And maybe a little bit of transparency.

00:47:14.650 --> 00:47:16.360
Next thing I want to talk
about is pretty important.

00:47:16.360 --> 00:47:21.240
Now, on the widget,
we define a 36 by 36 pixels tile.

00:47:21.240 --> 00:47:25.300
That's good enough for the
desktop because the mouse

00:47:25.300 --> 00:47:26.780
is a very precise pointer.

00:47:26.780 --> 00:47:28.720
You can just accurately hit on the tile.

00:47:28.720 --> 00:47:31.580
But on the iPhone,
your finger is now the pointer,

00:47:31.580 --> 00:47:34.930
so you want to make the tile pretty
big to make it easier for the

00:47:35.020 --> 00:47:37.040
finger to select the right tile.

00:47:37.040 --> 00:47:39.120
So I'm going to make it 60 by 60.

00:47:39.120 --> 00:47:41.790
So let's just deal with
a great four-start.

00:47:42.280 --> 00:47:44.540
60 times 4 is 240, okay?

00:47:44.600 --> 00:47:49.410
And make the box size big as well.

00:47:51.820 --> 00:47:54.780
And just do some alignment here.

00:47:55.050 --> 00:47:56.910
Let's center it again.

00:47:58.340 --> 00:48:00.930
So, okay,
we have done the change to the view.

00:48:01.190 --> 00:48:03.200
Let's make sure our code agrees.

00:48:03.460 --> 00:48:08.900
And again, the author has done a very,
very good job in making sure

00:48:09.230 --> 00:48:14.200
that we have a variable here that
defines the size of the tile.

00:48:14.250 --> 00:48:16.120
He uses 60,
so I'm going to change it to 60.

00:48:16.200 --> 00:48:19.200
And the rest of the calculation,
you can see, is based on this variable.

00:48:19.200 --> 00:48:22.170
So by just changing one variable,
I get the whole effect.

00:48:22.200 --> 00:48:25.590
So let's run it again.

00:48:25.780 --> 00:48:29.780
And this time it actually comes up,
and it looks like a web application,

00:48:29.780 --> 00:48:33.870
much bigger, way easier for your finger,
and you can still see the

00:48:33.870 --> 00:48:37.000
animation going on here.

00:48:37.070 --> 00:48:39.330
So back to you, Christian.

00:48:44.100 --> 00:48:45.610
All right, thank you, Han-Ming.

00:48:45.720 --> 00:48:48.950
So Han-Ming has shown you how you can
take a widget and very easily bring it

00:48:48.980 --> 00:48:51.240
into the iPhone as a web application.

00:48:51.240 --> 00:48:54.530
But I'd like to spend some time for
you widget developers talking about

00:48:54.530 --> 00:48:58.050
moving some other things that you're
probably used to doing from widgets

00:48:58.060 --> 00:49:02.290
to ways that you can do them in web
applications that work with some new

00:49:02.290 --> 00:49:05.500
features on the iPhone and iPhone OS 2.0.

00:49:05.500 --> 00:49:08.000
The first one of these
is WebKit transitions.

00:49:08.000 --> 00:49:11.660
So if you're a widget developer,
you're probably familiar with the

00:49:11.730 --> 00:49:14.880
Apple Animator JavaScript class,
and it's a timer-based

00:49:14.880 --> 00:49:17.170
implementation used for animation.

00:49:17.180 --> 00:49:21.330
And something new in iPhone OS 2, though,
is this declarative

00:49:21.420 --> 00:49:23.100
CSS style of animation.

00:49:23.100 --> 00:49:26.060
And basically what you're seeing here
are three properties on an element.

00:49:26.060 --> 00:49:28.890
And one just tells you which
properties should be animated.

00:49:28.890 --> 00:49:32.080
Second one tells you over what
duration they should be animated.

00:49:32.080 --> 00:49:35.470
And finally, the third one tells you
which timing function to use.

00:49:35.550 --> 00:49:39.210
And ease in/out in this case kind of
gives you a nice curve of animation.

00:49:39.290 --> 00:49:41.960
So you can do this all
declarative in CSS.

00:49:42.000 --> 00:49:43.960
And on top of that,
you get the added benefit of

00:49:43.960 --> 00:49:45.710
it being hardware accelerated.

00:49:45.830 --> 00:49:50.180
So we definitely encourage you when
you're bringing your widget over onto

00:49:50.180 --> 00:49:52.330
the phone to use these CSS values.

00:49:52.510 --> 00:49:55.460
There's a session that you'll be
able to get on iTunes a little bit

00:49:55.460 --> 00:49:57.440
later devoted to this whole section.

00:49:57.440 --> 00:49:59.970
It was actually passed Wednesday,
and it's all about enhancing

00:49:59.980 --> 00:50:03.390
web applications with
transforms and animations.

00:50:03.590 --> 00:50:06.130
In addition to that,
you can just use Dashcode's

00:50:06.150 --> 00:50:07.330
stack layout part.

00:50:07.620 --> 00:50:09.730
Chris showed this in his demo,
but it's also available for

00:50:09.900 --> 00:50:11.380
the iPhone web applications.

00:50:11.380 --> 00:50:13.550
And when you use one
of these stack layouts,

00:50:13.560 --> 00:50:17.170
you can set transitions
between the different views.

00:50:17.180 --> 00:50:20.370
You'll see in the inspector,
you get this little pop-up that

00:50:20.460 --> 00:50:24.140
lets you choose between pushes,
slides, and also 3D effects like the

00:50:24.220 --> 00:50:25.840
cube and the flip animation.

00:50:25.840 --> 00:50:28.140
So you can get all these
things for no code.

00:50:28.140 --> 00:50:29.800
You won't have to write
any code to make them work.

00:50:29.880 --> 00:50:32.070
So give them a shot,
play around with them.

00:50:32.360 --> 00:50:34.080
And one thing to remember
about the stack layout is that

00:50:34.090 --> 00:50:37.720
it works for large layouts,
or it also works on a per-element item.

00:50:37.740 --> 00:50:39.940
So you can use them as
large or small as you like.

00:50:41.610 --> 00:50:44.850
Another feature that Han-Ming
alluded to was the database feature,

00:50:44.850 --> 00:50:46.580
the client-side database feature.

00:50:46.580 --> 00:50:48.600
So if you're used to using
preference for key and set

00:50:48.600 --> 00:50:51.270
preference for key in your widget,
you'll know that those aren't

00:50:51.300 --> 00:50:53.020
available for iPhone web applications.

00:50:53.020 --> 00:50:57.350
Now, we do provide in iPhone OS 2.0,
though, this database functionality,

00:50:57.350 --> 00:51:00.790
and this allows you to store
information using SQL statements.

00:51:00.800 --> 00:51:03.390
To open a database,
you would call Open Database and

00:51:03.440 --> 00:51:06.020
provide a name and a version,
and once you do that,

00:51:06.020 --> 00:51:08.000
you would set up a new transaction.

00:51:08.590 --> 00:51:09.810
You'd pass in a closure to that.

00:51:09.820 --> 00:51:12.400
That gets the transaction back,
and in the transaction,

00:51:12.400 --> 00:51:14.580
you would just execute an SQL statement.

00:51:14.580 --> 00:51:16.310
So this is a great way
to save preferences,

00:51:16.410 --> 00:51:18.390
any type of state,
any information that you'd

00:51:18.390 --> 00:51:19.590
like to be kept around.

00:51:19.600 --> 00:51:22.110
Now, there are some caveats that
you should be aware of,

00:51:22.110 --> 00:51:25.240
too, when you're bringing your widget
over to a web application.

00:51:25.240 --> 00:51:27.820
First off,
if you're used to using Widget.System,

00:51:27.820 --> 00:51:31.240
being able to call any command line
utility from within your widget,

00:51:31.240 --> 00:51:34.500
you won't be able to do that inside
of an iPhone web application.

00:51:35.620 --> 00:51:39.010
Also, Dashboard uses an Elproj-based
system for localization.

00:51:39.140 --> 00:51:41.340
That won't work on the iPhone, either.

00:51:41.440 --> 00:51:44.090
But you should be able to bring those
strings just into your JavaScript file,

00:51:44.090 --> 00:51:45.140
and that should work fine.

00:51:45.180 --> 00:51:49.260
And finally,
there's the single source restriction.

00:51:49.340 --> 00:51:51.290
Now,
most of you with widgets are just used

00:51:51.290 --> 00:51:54.330
to being able to take an RSS feed or
a feed from anywhere and just bring

00:51:54.330 --> 00:51:57.000
that into your widget and not really
have to worry about this limitation.

00:51:57.080 --> 00:52:00.930
But if you're running a web page
inside of any browser out there,

00:52:00.970 --> 00:52:03.970
you need to make sure that the
feed is originating from the same

00:52:03.970 --> 00:52:05.580
domain as you're being hosted.

00:52:05.600 --> 00:52:07.470
So, if you're using a web page,
you need to make sure that the

00:52:07.470 --> 00:52:09.740
feed is originating from the same
domain as you're being hosted.

00:52:09.740 --> 00:52:09.740
If not, you will get an error,
and it won't load that feed.

00:52:09.740 --> 00:52:12.150
There are a number of
workarounds available using

00:52:12.150 --> 00:52:13.830
Apache stuff and PHP scripts.

00:52:13.840 --> 00:52:16.100
I'll let you Google for those,
but that's just something

00:52:16.100 --> 00:52:17.150
you should be aware of.

00:52:17.180 --> 00:52:19.480
So,
I also want to talk about a session that

00:52:19.540 --> 00:52:23.620
we did this past Wednesday afternoon,
and it was devoted to using Dashcode

00:52:23.620 --> 00:52:25.960
for making iPhone web applications.

00:52:25.960 --> 00:52:28.710
I won't be able to go into nearly
all the stuff that you can do with

00:52:28.730 --> 00:52:31.520
Dashcode for iPhone web applications,
so take a look on iTunes

00:52:31.530 --> 00:52:34.130
after the conference and
take a look at this session.

00:52:34.160 --> 00:52:36.280
And with that,
I'd like to bring... I'd like to bring my

00:52:36.290 --> 00:52:39.460
colleague Han Ming-Ong back on stage to
finish off the TileGame web application.

00:52:42.950 --> 00:52:45.500
I didn't know I'm called
a Pazier Master here.

00:52:45.810 --> 00:52:48.830
So second part of the demo,
we're going to take the web app

00:52:48.830 --> 00:52:51.600
that we have developed so far,
and we're going to do

00:52:51.640 --> 00:52:55.030
three more things to it,
all of which are more code intensive.

00:52:55.080 --> 00:52:57.690
First thing we're going to
do is to migrate from the

00:52:57.830 --> 00:53:02.080
JavaScript-based animation to the new
WebKit transition-based animation.

00:53:02.090 --> 00:53:05.030
And then we're going to allow
a way for the user to select

00:53:05.030 --> 00:53:06.500
and choose a new picture.

00:53:06.500 --> 00:53:10.360
And finally, we're going to save that new
selection to the database.

00:53:10.360 --> 00:53:11.050
All right.

00:53:11.050 --> 00:53:12.780
Demo machine, please.

00:53:14.410 --> 00:53:15.490
Thank you.

00:53:15.640 --> 00:53:18.420
So this is the web application
where we last left it at.

00:53:18.630 --> 00:53:20.280
Let's save it.

00:53:21.800 --> 00:53:25.000
Okay, so first thing.

00:53:25.050 --> 00:53:27.700
First thing we're gonna do is
migrate to the WebKit transition.

00:53:27.710 --> 00:53:30.140
And to do that,
we need to let the transition engine

00:53:30.140 --> 00:53:33.000
know to register our intent to use it.

00:53:33.100 --> 00:53:35.750
So I'm gonna find the function here.

00:53:37.740 --> 00:53:42.000
This is a function that tries to
find the bot element for each tile,

00:53:42.000 --> 00:53:42.960
the element.

00:53:42.960 --> 00:53:47.190
I'm going to drag in a
snippet from my library.

00:53:51.220 --> 00:53:54.280
So what it does here is pretty simple.

00:53:54.310 --> 00:53:57.860
Once you get hold of the element,
it gets its inline style.

00:53:57.910 --> 00:54:01.520
And it's telling the engine that, look,
when the top or the left changes,

00:54:01.520 --> 00:54:04.060
I want you to do some animation over it.

00:54:04.080 --> 00:54:05.960
Now, as Christian mentioned,
there's actually a session

00:54:05.960 --> 00:54:07.240
that goes very deep into it.

00:54:07.440 --> 00:54:12.410
So here, the demo time is short,
so I'm just going to talk about it.

00:54:13.170 --> 00:54:16.030
And then the next thing I'm going to
do is to change one of the functions

00:54:16.100 --> 00:54:18.210
that actually does the animation.

00:54:18.400 --> 00:54:21.290
Here, I'm going to delete the old stuff.

00:54:21.720 --> 00:54:23.400
And this whole chunk right here,
actually,

00:54:23.400 --> 00:54:27.330
I'm going to reuse because what it's
doing is calculating the top and left.

00:54:27.460 --> 00:54:31.200
So I'm not going to throw away good
code that does all this good job.

00:54:31.470 --> 00:54:33.320
So I'm just going to reuse it.

00:54:33.350 --> 00:54:36.290
But here, let's delete away the old code.

00:54:37.400 --> 00:54:39.150
and drag in another piece here.

00:54:39.290 --> 00:54:42.980
So once I have the top and left, again,
I stick it to the style,

00:54:43.280 --> 00:54:46.640
and when there's a delta,
I can trust the transition engine

00:54:46.640 --> 00:54:48.240
to do the animation for me.

00:54:48.660 --> 00:54:51.400
Next chunk over here,
what it does is instead of making

00:54:51.400 --> 00:54:56.160
use of the old JavaScript timer
base to call you back,

00:54:56.270 --> 00:54:59.370
timer to call you back,
it makes use of a more DOM-friendly way.

00:54:59.500 --> 00:55:02.520
So I'm registering for a
new event called -- well,

00:55:02.520 --> 00:55:05.700
surprise,
surprise -- WebKit transition end event.

00:55:05.790 --> 00:55:09.590
And when the event ends,
my callback will get called,

00:55:09.590 --> 00:55:13.680
and I get to decide if I should
keep the animation going or not.

00:55:13.770 --> 00:55:16.740
There's a whole slew of changes
I need to make to this file,

00:55:16.790 --> 00:55:20.380
and you are not here to
watch me do repetitive stuff,

00:55:20.520 --> 00:55:23.690
so I'm going to jump
to my first snapshot.

00:55:24.810 --> 00:55:25.740
All right.

00:55:25.910 --> 00:55:29.460
So this is with all the changes applied.

00:55:29.460 --> 00:55:31.480
If I run it now--

00:55:34.150 --> 00:55:35.730
You will see not much of a change.

00:55:35.730 --> 00:55:38.060
The animation is still like before,
which is good.

00:55:38.110 --> 00:55:42.010
But the point is, behind the scene,
I just got rid of about

00:55:42.050 --> 00:55:44.640
100 lines of old code,
which you don't have to maintain anymore.

00:55:44.640 --> 00:55:48.810
I put in probably 10 lines of very
clear CSS declarative way of saying

00:55:49.200 --> 00:55:51.530
I want the transition to take over.

00:55:51.530 --> 00:55:56.720
So for that, it's very easy to read,
very easy to maintain in future.

00:55:57.330 --> 00:55:59.980
And also, really,
you're making use of the engine now,

00:56:00.020 --> 00:56:02.360
natively on the phone,
to do your animation.

00:56:02.450 --> 00:56:06.360
So when the engine picks
up a Revit's performance,

00:56:06.400 --> 00:56:09.300
get more frame rate in there
to have a smoother animation,

00:56:09.330 --> 00:56:11.820
you just benefit from it for free.

00:56:12.300 --> 00:56:12.510
All right.

00:56:12.790 --> 00:56:16.420
Now that we have done the migration
to the new WebKit transition,

00:56:16.420 --> 00:56:18.820
I want to talk about a different topic.

00:56:18.840 --> 00:56:21.700
On the widget, there's a way.

00:56:21.700 --> 00:56:23.790
I don't know whether
it's discoverable or not,

00:56:23.800 --> 00:56:26.580
but whatever it is,
you can drag a picture from

00:56:26.670 --> 00:56:29.330
Finder or a different application,
hit F12,

00:56:29.420 --> 00:56:34.280
and drop it onto the tile game board,
and you have a new picture.

00:56:34.280 --> 00:56:36.630
But obviously,
there's no drag-and-drop between

00:56:36.710 --> 00:56:39.520
applications on the iPhone,
so we have to have a new way.

00:56:39.740 --> 00:56:42.340
So we sat down, brainstormed a little,
and realized, okay,

00:56:42.340 --> 00:56:45.980
why don't we make use of the back
to let the user select the pictures?

00:56:45.980 --> 00:56:49.360
Now, there's more possibilities
here once you do that,

00:56:49.360 --> 00:56:52.630
because the web app is
actually hosted on a website.

00:56:52.690 --> 00:56:57.790
Webmaster could have a different page
for PC or Mac users for the other users

00:56:57.790 --> 00:57:01.530
to load the pictures of their kids,
their grandkids, their pets.

00:57:01.580 --> 00:57:04.860
And when it's served out to the iPhone,
you can have a different set,

00:57:04.860 --> 00:57:05.660
a random set.

00:57:05.730 --> 00:57:09.580
Here, we're just going to have
six pictures of the cats.

00:57:09.740 --> 00:57:12.140
And we're going to represent
our operating system,

00:57:12.140 --> 00:57:15.020
starting from Sheeda to a leopard.

00:57:15.280 --> 00:57:17.090
So let's do that.

00:57:20.620 --> 00:57:23.990
I'm going to go to the back and delete
away the stuff that I don't need.

00:57:24.120 --> 00:57:30.130
I'm going to keep the purple color chip
just to have an easier time to change it.

00:57:30.360 --> 00:57:33.710
So again, I'm going to make it
easier for my finger.

00:57:34.650 --> 00:57:36.810
For my user's finger.

00:57:36.840 --> 00:57:41.600
And instead of the gradient,
I'm going to have an image fill.

00:57:41.600 --> 00:57:44.640
I happen to have six images here.

00:57:48.100 --> 00:57:51.780
Let's drag it over to my images folder.

00:57:51.830 --> 00:57:54.910
And I'm going to look for Leopard.

00:57:55.820 --> 00:57:58.420
and drag it over to my image well.

00:57:58.420 --> 00:58:00.520
There you go.

00:58:00.520 --> 00:58:02.800
Let's move the check
mark over here as well.

00:58:02.930 --> 00:58:05.860
The check mark is simply something
that we put in there to denote

00:58:05.860 --> 00:58:08.590
that you have chosen this picture.

00:58:09.130 --> 00:58:15.940
So next thing I want to do is,
what happens when the picture is clicked?

00:58:15.940 --> 00:58:17.100
So you want something to happen.

00:58:17.100 --> 00:58:26.050
So here, because we make use of the
previous color chipped,

00:58:26.050 --> 00:58:26.050
it says color changed.

00:58:26.050 --> 00:58:26.050
I want it to be picture changed.

00:58:27.080 --> 00:58:28.000
All right.

00:58:28.000 --> 00:58:30.920
I got to do this five more times
because I have five other pictures.

00:58:30.920 --> 00:58:32.620
Again, let's not do that on stage.

00:58:32.620 --> 00:58:34.480
Let's open up my second snapshot.

00:58:34.480 --> 00:58:37.750
Excuse me.

00:58:41.790 --> 00:58:43.660
So now I have my six pictures.

00:58:43.880 --> 00:58:45.610
Now that I've allowed a
user to choose the picture,

00:58:45.620 --> 00:58:48.930
I actually need a
function to vent it out.

00:58:49.070 --> 00:58:51.480
So let's do that.

00:58:52.030 --> 00:58:53.730
Get picture name.

00:58:54.660 --> 00:58:57.960
It makes use of a global
variable picture name,

00:58:57.960 --> 00:58:59.840
and it just vents it
out whenever it changes.

00:59:00.020 --> 00:59:02.990
I now want to write my
picture change function.

00:59:03.230 --> 00:59:06.090
Instead of writing it from me,
I actually can reuse

00:59:06.110 --> 00:59:07.990
this function right here.

00:59:08.150 --> 00:59:09.260
Color changed.

00:59:09.260 --> 00:59:12.280
And instead of looking for
the substring color chip,

00:59:12.290 --> 00:59:14.490
I want to look for picture.

00:59:15.620 --> 00:59:18.350
Once I get it,
I want to have a new function

00:59:18.430 --> 00:59:19.600
update picture to do my job.

00:59:19.680 --> 00:59:24.100
Again,
let's ignore the database part for now.

00:59:27.800 --> 00:59:31.630
is dragging my update picture function.

00:59:31.770 --> 00:59:32.960
What it does is pretty simple.

00:59:32.960 --> 00:59:38.380
It makes sure that the check mark
appears underneath the right picture.

00:59:39.130 --> 00:59:42.950
updates my global variable
picture name and calls a relocate

00:59:42.950 --> 00:59:47.510
image function in my tilegame.js,
whose job is simply to point

00:59:47.510 --> 00:59:49.020
to the right image now.

00:59:50.060 --> 00:59:52.720
One more thing I need to do,
which is to make use of

00:59:52.720 --> 00:59:54.460
this get picture name.

00:59:54.460 --> 00:59:58.140
Now, in my tallygame.js,
in my layout function,

00:59:58.140 --> 01:00:00.010
we actually had coded.

01:00:00.050 --> 01:00:01.200
This is from before, right?

01:00:01.240 --> 01:00:09.320
So let's just make sure it
makes use of our new function.

01:00:09.320 --> 01:00:09.320
All right.

01:00:09.320 --> 01:00:09.320
Let's run it.

01:00:11.370 --> 01:00:14.700
Flip to the back,
and here you see our 60 majors.

01:00:14.770 --> 01:00:18.750
And I want to start
with my cheetah picture.

01:00:19.180 --> 01:00:22.370
So, and I start playing it,
and then suddenly I have a

01:00:22.370 --> 01:00:24.320
Napoleon Dynamite moment.

01:00:24.320 --> 01:00:27.500
I'm like, oh,
do cheetahs have retractable claws?

01:00:27.500 --> 01:00:30.510
And, you know, I'm really obsessed
with this question now.

01:00:30.510 --> 01:00:31.960
So I want to go and find out.

01:00:35.990 --> 01:00:36.910
Do chickens have talons?

01:00:37.030 --> 01:00:37.900
Anyway.

01:00:38.090 --> 01:00:39.700
So here's my Google.

01:00:39.700 --> 01:00:40.510
I go and find out.

01:00:40.730 --> 01:00:43.370
And now I found the answer.

01:00:43.370 --> 01:00:46.710
I want to go back to my game.

01:00:47.320 --> 01:00:48.140
Gosh!

01:00:48.170 --> 01:00:50.510
Now where's my, where's my, you know,
cheetah picture?

01:00:50.510 --> 01:00:52.020
Now I have my leopard picture back.

01:00:52.210 --> 01:00:53.470
Well,
it's simply because we didn't save it,

01:00:53.470 --> 01:00:53.830
right?

01:00:53.970 --> 01:00:55.520
So we have a new way to save it.

01:00:55.610 --> 01:01:03.170
And as Christian said,
in HTML5 on the iPhone,

01:01:03.170 --> 01:01:05.470
we actually have the local database.

01:01:05.470 --> 01:01:05.470
I'm going to make use of it to save it.

01:01:05.470 --> 01:01:05.470
Let's quit.

01:01:07.190 --> 01:01:09.940
Let's go back to main.js.

01:01:09.940 --> 01:01:13.860
Our database is-- for this simple case,
we're going to have a table.

01:01:13.860 --> 01:01:21.000
And this table is going to have a
simple key column and a value column.

01:01:21.000 --> 01:01:23.200
And we're just going to save
the last selected picture.

01:01:23.310 --> 01:01:26.780
You can imagine you want to save
the position of the tiles and so on.

01:01:27.150 --> 01:01:31.060
We'll leave it as an
exercise for you guys.

01:01:31.060 --> 01:01:33.780
So let's uncomment the unitdb.

01:01:38.400 --> 01:01:43.160
My database is going
to be called Talgame.

01:01:43.160 --> 01:01:46.590
This is the user readable string.

01:01:48.190 --> 01:01:49.960
If the table doesn't exist,
I need to create it.

01:01:50.130 --> 01:01:55.070
So let's call it initTileGame.

01:02:02.510 --> 01:02:03.740
Let's change it there.

01:02:03.760 --> 01:02:04.990
Delete stuff.

01:02:04.990 --> 01:02:11.260
Like I said,
I'm going to only insert a row.

01:02:11.260 --> 01:02:11.260
So,

01:02:15.520 --> 01:02:18.400
The key is going to be picture,
and the original value,

01:02:18.450 --> 01:02:20.580
I want it to be just leopard.

01:02:24.960 --> 01:02:31.360
Go back to the initdb function
and change a couple more things.

01:02:32.520 --> 01:02:36.220
Now I want it to be called load--
once I've initialized the table,

01:02:36.220 --> 01:02:38.150
I want to load data from it.

01:02:45.200 --> 01:02:46.800
So let's look for our load message.

01:02:46.840 --> 01:02:55.740
All right,
so once you get the results set,

01:02:55.740 --> 01:02:58.420
this is a SQLite table,
so if you are familiar with it,

01:02:58.420 --> 01:03:02.310
you can see it'll be like
a fish in water here.

01:03:03.570 --> 01:03:07.990
So once you get it,
once you find the key, which is picture,

01:03:07.990 --> 01:03:10.110
which is what I just put in,
you want to update,

01:03:10.340 --> 01:03:12.460
make use of the function
that we just wrote,

01:03:12.460 --> 01:03:14.050
which is update picture.

01:03:15.690 --> 01:03:17.840
Oops, sorry.

01:03:17.960 --> 01:03:20.140
All right, right,
by now you're pretty sick of my typing,

01:03:20.140 --> 01:03:23.200
so again,
I'm going to make use of similar changes.

01:03:23.330 --> 01:03:25.990
So let's not do that on stage.

01:03:26.110 --> 01:03:29.290
I'm going to open my last snapshot here.

01:03:30.260 --> 01:03:32.900
With all the changes applied,
you can see that.

01:03:32.960 --> 01:03:35.480
So let's run it one last time.

01:03:35.480 --> 01:03:36.790
Maybe not.

01:03:37.310 --> 01:03:39.120
So again, you have Leopard.

01:03:39.170 --> 01:03:40.920
I'm going to flip to the back.

01:03:41.010 --> 01:03:43.240
And now I finished my Cheetah.

01:03:43.290 --> 01:03:45.910
I want to start with-- I want
to play the Puma game now.

01:03:46.250 --> 01:03:48.430
And you go ahead and click on it.

01:03:48.790 --> 01:03:50.600
And obviously, you have another question,
right?

01:03:50.700 --> 01:03:53.180
So what's the difference
between Puma and Mountain Lion?

01:03:53.340 --> 01:03:55.880
So what's-- I'm going to find out now.

01:03:58.500 --> 01:04:03.620
When you go and do your Google search
and happy with the answer,

01:04:03.620 --> 01:04:07.770
you go back, and when you go back,
there you go.

01:04:07.770 --> 01:04:07.770
That's your Puma.

01:04:10.900 --> 01:04:15.240
Actually, one last thing,
because I think this is pretty-- so

01:04:15.240 --> 01:04:22.290
you spend a lot of effort and probably
money also in paying your web designer

01:04:22.290 --> 01:04:25.240
or someone to come up with a nice icon,
right?

01:04:25.240 --> 01:04:27.740
I mean I actually think
this icon looks pretty nice.

01:04:27.820 --> 01:04:31.040
So I want to reuse it
in my web application.

01:04:31.270 --> 01:04:32.740
So to do that,
what you do is you go to your

01:04:32.740 --> 01:04:36.910
home screen icon composer,
drag in your icon.png from

01:04:37.040 --> 01:04:41.180
the file view of your widget,
drop it over here in the white area.

01:04:41.220 --> 01:04:47.540
And we make sure that we down sample it
to this interesting 57 by 57 size that

01:04:47.540 --> 01:04:49.770
the iPhone takes so that it looks nice.

01:04:50.080 --> 01:04:54.630
So in this simple step,
you have a pretty nice icon here.

01:04:54.720 --> 01:04:57.150
To prove it to you, I'll just run it.

01:04:57.290 --> 01:04:58.920
And you have a pre-- you know,
you like this game now.

01:04:58.990 --> 01:05:02.700
So you're like, OK,
let me put it to the home screen.

01:05:02.700 --> 01:05:02.700
And--

01:05:05.930 --> 01:05:07.100
Let's call it tile game.

01:05:07.150 --> 01:05:09.340
So whenever you're sick of the
job that your boss gave you,

01:05:09.350 --> 01:05:11.480
you're like, OK, let me play the game,
man.

01:05:11.490 --> 01:05:11.920
There you go.

01:05:11.920 --> 01:05:14.920
All right, back to you, Christian.

01:05:17.320 --> 01:05:18.540
Thank you very much, Han-Ming.

01:05:18.540 --> 01:05:23.460
So to wrap up this portion here, again,
Model-View-Controller really kind

01:05:23.460 --> 01:05:28.210
of made bringing the tile game over
into the web application very easy.

01:05:28.450 --> 01:05:33.740
Beyond that,
Han-Ming was able to use Dashcode Parts

01:05:33.740 --> 01:05:33.740
to kind of jumpstart the development.

01:05:33.940 --> 01:05:36.310
WebKit transition is a
great way to kind of replace

01:05:36.360 --> 01:05:40.740
JavaScript timer-based code and use
hardware-- get hardware-accelerated

01:05:40.740 --> 01:05:43.340
transitions and animations for free.

01:05:43.500 --> 01:05:45.550
And finally,
he was able to use the client-side

01:05:45.550 --> 01:05:50.040
database stuff that's in iPhone
OS 2 to replace his preference code.

01:05:50.160 --> 01:05:53.730
So to conclude our session today,
I just want to encourage you that if you

01:05:53.730 --> 01:05:56.960
have an iPhone web application today,
to make a widget.

01:05:57.040 --> 01:06:01.200
And the idea is that you would be able
to get onto every Mac user's desktop and

01:06:01.200 --> 01:06:05.230
have a presence there in addition to your
iPhone users for a small amount of work.

01:06:05.260 --> 01:06:08.390
So we think this is gonna be something
that's gonna be real easy to do and

01:06:08.390 --> 01:06:09.760
that we'd really like you to do.

01:06:09.860 --> 01:06:12.240
And also, if you have a widget,
why don't you make a

01:06:12.240 --> 01:06:13.430
web application as well?

01:06:13.600 --> 01:06:15.610
Take that code that you already have,
reuse it,

01:06:15.730 --> 01:06:19.620
and get it to a whole new platform
that's the hottest thing going right now.

01:06:20.170 --> 01:06:22.260
Model View Controller will
help you get there.

01:06:22.350 --> 01:06:25.000
So we really want you to use
that and adopt that paradigm.

01:06:25.050 --> 01:06:28.450
And Dashcode is the IDE that
we think you'll want to use

01:06:28.450 --> 01:06:30.140
to make that all happen.

01:06:30.400 --> 01:06:32.850
So for more information,
we have a whole slew of evangelists

01:06:32.850 --> 01:06:34.600
who are ready to answer your questions.

01:06:34.600 --> 01:06:38.070
Matt Drance is the Dashboard evangelist,
Mike Jurowicz is the Tools evangelist,

01:06:38.150 --> 01:06:42.320
and Vicki Murley is the
Safari Technologies evangelist.

01:06:42.350 --> 01:06:43.560
So send them your questions.

01:06:43.560 --> 01:06:45.660
We have a couple of
sessions that have happened.

01:06:45.660 --> 01:06:47.480
You'll be able to pick
these up in iTunes,

01:06:47.480 --> 01:06:50.600
but we have the Dashcode session
for iPhone web apps and three

01:06:50.900 --> 01:06:54.220
iPhone-related Safari sessions for you.

01:06:55.260 --> 01:06:58.840
And this afternoon, from 2 to 6,
we do have a Dashcode for

01:06:58.840 --> 01:07:02.280
widget development lab
down in the Foundation lab.

01:07:02.300 --> 01:07:04.390
So please join us with your
questions and pick up your

01:07:04.390 --> 01:07:05.860
chocolate while you're there.

01:07:05.860 --> 01:07:07.550
I've got a whole bunch of candy
here I've got to get rid of.