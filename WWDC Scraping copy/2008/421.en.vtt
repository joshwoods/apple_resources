WEBVTT

00:00:21.460 --> 00:00:23.540
Hej och vÃ¤lkomna till
introduktion till Kerbero.

00:00:23.770 --> 00:00:24.860
Oh, I'm just kidding.

00:00:24.880 --> 00:00:29.400
I'm not going to encrypt this in Swedish,
but I'm going to talk about encryption.

00:00:29.400 --> 00:00:31.900
And this is an introduction to Kerbero.

00:00:31.900 --> 00:00:36.690
My name is Love Hornquist Astrand,
and I'm a security engineer.

00:00:36.870 --> 00:00:40.510
So I'm going to start to
talk about what Kerbero is,

00:00:40.510 --> 00:00:45.530
and what it is,
and why you want to use Kerbero,

00:00:45.760 --> 00:00:49.560
and where Kerbero is found today,
and what systems are out there.

00:00:49.770 --> 00:00:52.940
Also, I'm going to tell you
about how Kerbero is,

00:00:52.940 --> 00:00:56.960
and how it works on the inside,
and how the ticket flies around.

00:00:57.160 --> 00:01:02.140
And then some new features in
Leopard that are used in Kerbero.

00:01:02.390 --> 00:01:05.040
Lastly,
I'm going to talk about how you add on

00:01:05.040 --> 00:01:08.180
Kerbero support in your application.

00:01:10.770 --> 00:01:13.770
So to understand what Kerbero is,
we're going to look at

00:01:13.780 --> 00:01:16.540
the definition of Kerbero,
and we're going to take it

00:01:16.540 --> 00:01:20.590
out of the O'Reilly book,
The Definite Guide to Kerbero.

00:01:20.800 --> 00:01:22.700
And they have a very
nice definition there.

00:01:22.710 --> 00:01:27.520
This Kerbero is a network authentication
protocol that provides a secure,

00:01:27.520 --> 00:01:32.700
single sign-on, trusted, third-party,
mutual authentication service.

00:01:32.700 --> 00:01:36.540
It's a little bit of a mouthful,
so let's break it down

00:01:36.950 --> 00:01:38.690
to buzzword instead.

00:01:38.700 --> 00:01:42.700
So we get authentication,
trusted third-party,

00:01:43.220 --> 00:01:47.570
mutual authentication, single sign-on,
secure and protocol.

00:01:47.700 --> 00:01:51.790
So let's go through all these words
and see what it actually means,

00:01:51.790 --> 00:01:55.760
and take some examples out from both
the computer world and the real world,

00:01:56.100 --> 00:01:59.910
how this all fit together and
how they relate to Kerbero.

00:02:01.020 --> 00:02:03.040
So first, authentication.

00:02:03.070 --> 00:02:05.780
Authentication is to prove your identity.

00:02:05.870 --> 00:02:08.460
For example, when you go to a supermarket
and pay by a check,

00:02:08.660 --> 00:02:12.900
you prove your identity by
showing your driver's license.

00:02:13.390 --> 00:02:17.060
However, just by showing your driver's
license doesn't mean that you

00:02:17.060 --> 00:02:19.800
are allowed to use the check,
and that's the second bullet.

00:02:20.500 --> 00:02:22.440
Authentication is not authorization.

00:02:22.570 --> 00:02:26.650
Just because you claim that you are a
person and you can prove it doesn't mean

00:02:26.880 --> 00:02:32.180
that you're allowed to access all the
resources or what you wanted to get.

00:02:32.180 --> 00:02:34.490
For example,
when you log into a file server,

00:02:34.490 --> 00:02:37.830
you will only accept your files on
the file server or the groups that

00:02:38.060 --> 00:02:42.560
you belong to on the file server,
but not all files on the file server.

00:02:45.040 --> 00:02:46.420
Trusted Third Party.

00:02:46.430 --> 00:02:48.960
Kerbero is a trusted
third party solution.

00:02:49.040 --> 00:02:51.530
Authentication is done
through a central server.

00:02:51.640 --> 00:02:55.850
In the case of a driver's license,
the trusted third party is DMV,

00:02:55.850 --> 00:02:59.390
the party that issued the
driver's license to you.

00:03:00.340 --> 00:03:04.200
In the computer world,
trusted third party can

00:03:04.200 --> 00:03:06.420
be the certificate CAs.

00:03:06.450 --> 00:03:09.250
But unlike the CA system
or certificate system,

00:03:09.590 --> 00:03:16.120
Kerbero is using shared keys
instead of public and private keys.

00:03:16.380 --> 00:03:19.880
So Kerbero is using symmetric crypto.

00:03:23.040 --> 00:03:26.000
Kerbero is also providing
mutual authentication.

00:03:26.030 --> 00:03:27.900
And it's two parts.

00:03:28.150 --> 00:03:31.640
First, client is usually proving
the identity to the server.

00:03:31.870 --> 00:03:35.790
This is usually what you think about
when you're talking about logins.

00:03:36.400 --> 00:03:41.430
But you also want to prove that
the server proves identity to you.

00:03:41.750 --> 00:03:45.230
You don't want to hand over your check to
some random person you find in the aisle.

00:03:45.430 --> 00:03:48.800
You want to have the right look to them,
so you know that you're actually handing

00:03:48.800 --> 00:03:50.760
over your money to the right person.

00:03:50.790 --> 00:03:53.280
And the same thing in the computer world.

00:03:53.330 --> 00:03:57.180
You don't want to act on data that
you got from some random server,

00:03:57.190 --> 00:04:00.310
or you don't want to send up
some random data or your secret

00:04:00.410 --> 00:04:04.520
data to a server that you trust.

00:04:06.670 --> 00:04:10.620
So, when you SSH to a machine,
it will ask you for a public key,

00:04:10.690 --> 00:04:13.590
and you need to verify
the fingerprint there,

00:04:13.590 --> 00:04:15.450
and the second time it will remember it.

00:04:15.670 --> 00:04:19.340
So this is the establishment
of the identity of the server,

00:04:19.390 --> 00:04:22.590
and Kerbero has also
provided this functionality.

00:04:25.490 --> 00:04:26.970
Single Sign On.

00:04:26.970 --> 00:04:31.040
Kerbero allows you to log in in the
morning when you get to your work,

00:04:31.040 --> 00:04:34.080
and then for about 10 hours, usually.

00:04:34.090 --> 00:04:37.380
You can use all the
services in the system.

00:04:37.420 --> 00:04:39.780
And it will single sign
on into the system,

00:04:39.860 --> 00:04:42.460
so you never need to enter your
username or password again.

00:04:42.490 --> 00:04:44.500
You will access all the resources.

00:04:44.570 --> 00:04:48.950
So when you got here this Monday,
you showed your driver's

00:04:48.950 --> 00:04:52.300
license or your passport,
and then you got your badge.

00:04:52.300 --> 00:04:54.260
And the badge is a Single Sign On token.

00:04:54.290 --> 00:04:57.150
And with the Single Sign On tokens,
it allows you to get into all

00:04:57.150 --> 00:04:59.630
the session and get your swag.

00:05:02.650 --> 00:05:05.420
There's web systems that are
also used in Single Sign On.

00:05:05.710 --> 00:05:09.610
You'll log into one site,
and then you can access the maps

00:05:09.610 --> 00:05:12.380
or the mail and the web search.

00:05:12.560 --> 00:05:16.740
And there are many vendors that provide
this kind of federation service.

00:05:18.790 --> 00:05:21.050
Kerbero is also a secure system.

00:05:21.130 --> 00:05:23.920
It never transports your
passwords over the network.

00:05:24.160 --> 00:05:27.540
So you don't need to worry
about exposing the password.

00:05:27.590 --> 00:05:32.390
Kerbero is also using symmetric crypto.

00:05:32.980 --> 00:05:39.420
So it's using a Kerbero
like triple-des and AS.

00:05:39.660 --> 00:05:43.620
It's extensible crypto,
so it will be upgraded to newer versions

00:05:43.620 --> 00:05:47.310
of crypto when they're available,
and users don't need to care about this.

00:05:47.320 --> 00:05:49.960
There's something will
happen in the background.

00:05:50.550 --> 00:05:56.710
Kerbero's, in addition to just provide
the initial step of providing

00:05:57.040 --> 00:06:00.160
the identification step,
there's also providing crypto

00:06:00.330 --> 00:06:03.850
keys for doing the second step,
the part they actually also care about,

00:06:03.850 --> 00:06:05.400
and that's transport security.

00:06:05.400 --> 00:06:10.220
You want your data in your protocol,
the part that you are

00:06:10.570 --> 00:06:14.510
providing as a developer,
you want the protocol

00:06:14.600 --> 00:06:16.310
data also to be secure,
and Kerbero's provide that feature too.

00:06:16.890 --> 00:06:22.220
Kerbero has been along for about,
in some way or other, for about 20 years.

00:06:22.340 --> 00:06:26.670
So it's been very time tested and been
seeing through a lot of problems already.

00:06:26.670 --> 00:06:30.170
So there's not really any problems
going to show up in the next three,

00:06:30.170 --> 00:06:33.520
four years just because, well,
we haven't thought about it before.

00:06:33.520 --> 00:06:38.370
And this is important because some
time ago they installed these simplex

00:06:38.370 --> 00:06:42.440
locks and the little push button lock
that allows you to go in through doors.

00:06:42.440 --> 00:06:44.740
And they installed them on
many university campuses

00:06:44.840 --> 00:06:46.970
and high schools in the US.

00:06:47.590 --> 00:06:50.240
However, there was a flaw in the system.

00:06:50.240 --> 00:06:52.860
You couldn't set the key
that you could choose one,

00:06:52.860 --> 00:06:56.550
two, three, four as your key,
but you couldn't repeat any numbers.

00:06:56.550 --> 00:07:00.510
So you couldn't have one, one, two,
three as a code.

00:07:00.520 --> 00:07:03.520
And that changed the
brute force key space.

00:07:03.520 --> 00:07:07.520
From about four hours to brute
force a key to about ten minutes.

00:07:07.650 --> 00:07:09.480
So they had to change all the keys.

00:07:09.570 --> 00:07:12.440
And Kerbero has been
through this already,

00:07:12.570 --> 00:07:14.540
so you don't need to worry about it.

00:07:14.540 --> 00:07:18.490
So don't do that.

00:07:20.930 --> 00:07:23.380
Kerbero is a protocol.

00:07:23.380 --> 00:07:27.130
And it's just a description
of a series of exchanges.

00:07:27.320 --> 00:07:29.020
But protocols can be very simple.

00:07:29.120 --> 00:07:32.470
It can be a type of a knock, knock,
knock, knock, knock, who's there?

00:07:32.540 --> 00:07:33.160
Orange.

00:07:33.190 --> 00:07:34.420
Orange who?

00:07:34.520 --> 00:07:38.240
Orange you glad you bought
your ticket before it sold out?

00:07:39.090 --> 00:07:45.310
But it can also be very complicated,
like the whole IETF TCP/IP stack.

00:07:45.480 --> 00:07:50.180
And Kerbero is maintained by IETF,
and it's a Kerbero working

00:07:50.180 --> 00:07:53.530
group on IETF that maintains it,
and is still continuing today

00:07:53.540 --> 00:07:56.000
and improving the document.

00:07:56.000 --> 00:07:59.230
And there's many implementations
of the Kerbero protocol,

00:07:59.230 --> 00:08:03.000
and MIT Kerbero is one of them,
and we use it in MacÂ OSÂ X.

00:08:03.000 --> 00:08:07.590
And other implementations,
like the Java one, Haymdahl,

00:08:07.590 --> 00:08:12.000
there's GNU one,
it's used in Windows Active Directory,

00:08:12.000 --> 00:08:14.350
and many others.

00:08:14.520 --> 00:08:16.670
So it's important to
have a standard protocol,

00:08:16.670 --> 00:08:19.700
because that will allow you to
become vendor independent and

00:08:19.700 --> 00:08:24.430
have interoperability between
different implementations.

00:08:27.700 --> 00:08:34.260
So why would you like to use Kerbero
in your application or in your system?

00:08:34.410 --> 00:08:36.500
Authentication is very easy to get wrong.

00:08:36.570 --> 00:08:37.630
It seems very simple.

00:08:37.640 --> 00:08:42.550
You tell who you are to the other side,
but as has been shown before,

00:08:42.570 --> 00:08:44.960
this is something that
is not very easy to do.

00:08:45.100 --> 00:08:50.600
So you should really use something that
people have thought about doing before,

00:08:50.710 --> 00:08:55.500
and reuse what other people have done.

00:08:55.750 --> 00:08:59.220
Kerbero is also a standardized
protocol with many implementations

00:08:59.720 --> 00:09:03.700
and people working with it,
so it's a secure solution.

00:09:03.850 --> 00:09:06.560
And this is important for you as a
developer because it allows you to

00:09:06.560 --> 00:09:09.700
get an interoperable solution when
you want to talk to other systems.

00:09:09.700 --> 00:09:14.700
And you can plug in your applications
into an already existing system.

00:09:17.980 --> 00:09:21.840
Kerbero was designed for
a hostile environment.

00:09:21.850 --> 00:09:25.410
An environment where people could
insert packets into a network,

00:09:25.410 --> 00:09:30.460
and they could listen on any packet,
and Kerbero is secure in this solution.

00:09:30.460 --> 00:09:33.680
And this is something
that was designed at MIT.

00:09:33.870 --> 00:09:40.290
So you have all these smart students
that are trying to get better grades.

00:09:40.290 --> 00:09:40.290
So really, it needs to be secure.

00:09:41.010 --> 00:09:44.630
Kerbero also scales to
millions of users and services.

00:09:44.630 --> 00:09:47.000
So you won't have the problem
that Kerbero won't scale.

00:09:47.010 --> 00:09:47.780
It will scale.

00:09:47.820 --> 00:09:49.890
It's been proven before.

00:09:52.300 --> 00:09:59.940
Kerbero's never transmits username,
passwords to, between, over the network.

00:10:00.090 --> 00:10:05.950
So you as a server,
when you're using Kerbero's,

00:10:05.970 --> 00:10:07.600
don't need to care about password.

00:10:07.710 --> 00:10:11.200
This is important for you and
the system administrators.

00:10:11.240 --> 00:10:14.800
It is also a good thing for the
user because they only need to use,

00:10:14.800 --> 00:10:18.450
log in once to the system,
and then they can use all these different

00:10:18.880 --> 00:10:20.780
services by just using Kerbero's.

00:10:20.900 --> 00:10:24.900
And I said it was important for
you as a developer because now

00:10:24.900 --> 00:10:28.900
you don't need to maintain a
username and password database.

00:10:29.080 --> 00:10:32.250
And your user will be more happy
because they don't need to have

00:10:32.250 --> 00:10:36.580
yet another system where they're
maintaining password information and

00:10:36.580 --> 00:10:39.220
get all their users confused because,
well, what password should

00:10:39.220 --> 00:10:40.310
I use for this system?

00:10:40.390 --> 00:10:43.180
And like, it was, like,
you need to change it every three months,

00:10:43.250 --> 00:10:47.040
and, well, you have one password,
one username, and that's it.

00:10:47.840 --> 00:10:50.800
I've been talking about all passwords,
but Kerbero support more

00:10:50.800 --> 00:10:52.140
than just passwords.

00:10:52.190 --> 00:10:56.640
There's also smart card support
or one time token support.

00:10:56.800 --> 00:11:00.790
So password is not the only
thing that you can use.

00:11:01.470 --> 00:11:05.360
The good thing about Kurobras
is that once upon a time,

00:11:05.360 --> 00:11:06.470
DES was really good.

00:11:06.480 --> 00:11:11.510
And when 20 years later,
DES is kind of a yoke.

00:11:11.620 --> 00:11:13.440
It's not really secure anyway.

00:11:13.440 --> 00:11:16.380
And Kurobras adapts to
newer crypto systems.

00:11:16.380 --> 00:11:19.850
And you don't need to change your
application to get a new functionality

00:11:19.850 --> 00:11:22.100
of Kurobras and newer crypto.

00:11:22.100 --> 00:11:26.220
It's just that you update the crypto
library and the Kurobras library,

00:11:26.220 --> 00:11:27.600
and you're all set.

00:11:27.940 --> 00:11:31.060
There's no code changes and no
recompilation of the server.

00:11:31.530 --> 00:11:34.830
your application it just works.

00:11:36.090 --> 00:11:40.140
So where is Kerbero
use today in MacÂ OSÂ X?

00:11:40.170 --> 00:11:45.700
Well, many of the application that you
get with MacÂ OS supports Kerbero.

00:11:45.830 --> 00:11:50.380
We have the remote login,
like screen sharing, SSH, Telnet,

00:11:50.430 --> 00:11:54.180
but also the file sharing protocol,
the NFS, SMB, and AFB.

00:11:54.200 --> 00:11:56.940
They all support Kerbero and use it.

00:11:56.990 --> 00:11:59.020
There's also web application.

00:11:59.020 --> 00:12:02.760
The web browser all use support Kerbero,
and I'm going to show it in the demo.

00:12:02.770 --> 00:12:07.210
And also the mail, mail.app,
and other mail applications

00:12:07.300 --> 00:12:08.780
support Kerbero.

00:12:08.820 --> 00:12:10.400
But this is just for the Mac.

00:12:10.580 --> 00:12:12.680
But how about other operating systems?

00:12:12.730 --> 00:12:18.960
Well, we got all the Unix systems,
like the BSC, Solaris, Linux, and AIX,

00:12:18.960 --> 00:12:21.800
and of course, Windows Active Directory.

00:12:21.840 --> 00:12:24.820
Active Directory is the
big consumer of Kerbero,

00:12:24.820 --> 00:12:27.540
and it's actually the main
authentication system used here.

00:12:27.620 --> 00:12:32.300
So if you want to interrupt with AD,
well, Kerbero is your only choice.

00:12:32.900 --> 00:12:37.450
There's also Novell E Directory,
and Java is using Kerbero as a

00:12:37.600 --> 00:12:40.930
support as part of the GAS system.

00:12:41.000 --> 00:12:44.210
And of course,
MacÂ OSÂ X Open Directory is using Kerbero.

00:12:44.350 --> 00:12:47.030
So this is nothing new for us.

00:12:48.300 --> 00:12:51.640
So now we're going to have some flying
tickets and describe how Kerbero work.

00:12:51.670 --> 00:12:54.860
And I'm going to go through the
protocol exchanges a couple of times,

00:12:54.860 --> 00:12:59.780
and for each iteration I'm going to get
more and more into detail how it works.

00:13:00.710 --> 00:13:03.440
So let's start out with some concepts.

00:13:03.460 --> 00:13:07.380
We have a Realm,
and Realm usually looks like a DNS name,

00:13:07.380 --> 00:13:10.440
but the spell is used uppercase letters.

00:13:10.510 --> 00:13:15.200
And this is by convention,
and you should really try to use

00:13:15.200 --> 00:13:21.400
uppercase letters if you want to use
Kerbero because many applications assumes

00:13:21.510 --> 00:13:25.580
that the Realm is going to be uppercase,
and uppercase is for you,

00:13:25.580 --> 00:13:29.600
and you're going to be very sad
if you use lowercase letters.

00:13:29.630 --> 00:13:33.600
There's two different kind
of principles in Kerbero.

00:13:33.600 --> 00:13:36.100
There's the users and there's services.

00:13:36.120 --> 00:13:41.590
And they could have used the same
name for this users and services,

00:13:41.760 --> 00:13:48.100
but the users usually look like,
by convention, an email address with,

00:13:48.100 --> 00:13:49.600
of course, the domain part in uppercase.

00:13:49.600 --> 00:13:55.450
And the servers look like
service/hostname@Realm.

00:13:55.580 --> 00:13:58.600
So this is also by convention,
but you don't really

00:13:58.600 --> 00:13:58.600
have a short-term name.

00:13:58.600 --> 00:14:01.710
you don't really have any choice,
this is how it works.

00:14:02.020 --> 00:14:07.320
There's also a trusted
third party in Kerberoes,

00:14:07.330 --> 00:14:09.900
and that's the KDC,
the Key Distribution Center.

00:14:09.970 --> 00:14:13.180
And this is the machine that the
users and the server are trusting.

00:14:13.180 --> 00:14:20.390
So this is the machine that keeps
track of all the keys in the system and

00:14:20.390 --> 00:14:20.390
makes sure that the trust is correct.

00:14:23.160 --> 00:14:25.340
I've been talking about flying tickets.

00:14:25.520 --> 00:14:29.340
Kerbero, the main data type in Kerbero
is the Kerbero's ticket.

00:14:29.540 --> 00:14:32.410
There's a special ticket that's
called a ticket grounding ticket.

00:14:32.640 --> 00:14:35.220
This is a ticket that provides
a Single Sign On solution.

00:14:35.220 --> 00:14:37.660
It's going to be very
obvious later when this,

00:14:37.720 --> 00:14:40.100
what the ticket's, what the ticket is.

00:14:40.250 --> 00:14:45.430
It's the yellowish orange
ticket in my older slides.

00:14:45.890 --> 00:14:49.600
Users, when they log into Kerbero,
is using password or other system,

00:14:49.750 --> 00:14:53.400
other initial authentication system,
but usually passwords.

00:14:53.400 --> 00:14:55.500
Servers don't have passwords.

00:14:55.570 --> 00:14:56.800
They have key tabs.

00:14:56.910 --> 00:15:01.070
Basically,
key tabs are random generated keys stored

00:15:01.140 --> 00:15:05.340
on the server in a special key tab file.

00:15:05.450 --> 00:15:08.130
So servers do not have passwords.

00:15:09.910 --> 00:15:11.200
Right.

00:15:11.230 --> 00:15:13.330
So the ticket granting
ticket is just a principle,

00:15:13.600 --> 00:15:14.720
like all other tickets.

00:15:14.750 --> 00:15:16.050
It's a special format of it.

00:15:16.200 --> 00:15:23.620
It's .

00:15:26.780 --> 00:15:28.850
So we have a client and a server.

00:15:28.930 --> 00:15:32.390
So let's add the rel and the KDC.

00:15:32.560 --> 00:15:36.310
And now, when the client wants
to talk to the server,

00:15:36.310 --> 00:15:40.590
it starts with getting an
initial ticket from the KDC.

00:15:40.710 --> 00:15:43.360
And that's the authentication
service request.

00:15:43.460 --> 00:15:46.700
And then it's going to
talk again to the server,

00:15:46.700 --> 00:15:47.530
the KDC.

00:15:47.800 --> 00:15:49.970
And that's to get a service
ticket for the host.

00:15:49.970 --> 00:15:52.140
And that's the second
step of the protocol.

00:15:52.180 --> 00:15:54.820
That's called the
ticket granting service.

00:15:54.820 --> 00:15:58.640
And last,
it's going to finally talk to the server.

00:15:58.960 --> 00:16:01.810
And this is called the
application protocol.

00:16:02.050 --> 00:16:07.050
And that's sending over the ticket to the
application and logging into the service.

00:16:08.110 --> 00:16:12.090
So we have the client and the KDC,
and we start out doing the

00:16:12.340 --> 00:16:13.660
authentication service.

00:16:13.660 --> 00:16:16.000
And this is the authentication
and getting your ticket,

00:16:16.040 --> 00:16:17.660
granting ticket from the KDC.

00:16:17.720 --> 00:16:20.730
The server's not part
of the transaction yet.

00:16:22.370 --> 00:16:23.640
So we asked for a
ticket-and-running ticket,

00:16:23.680 --> 00:16:27.410
and guest-packed the ticket-and-running
ticket and stored it in the cache.

00:16:27.840 --> 00:16:29.940
And then we're going
to do the second step,

00:16:29.990 --> 00:16:31.330
the ticket granting service.

00:16:31.520 --> 00:16:34.960
This is to get a service ticket
to talk to this specific server.

00:16:35.110 --> 00:16:41.140
So for each server,
you get a specific service ticket.

00:16:41.240 --> 00:16:44.470
So we take our ticket granting ticket,
send it over to the KDC,

00:16:44.690 --> 00:16:46.700
and get back a service ticket.

00:16:46.740 --> 00:16:49.300
Now we don't need to talk to the
KDC again when we want to talk

00:16:49.390 --> 00:16:52.650
to this service until our tickets
expire and we need to log in again.

00:16:52.700 --> 00:16:58.990
So we have a service ticket,
and we're going to send it over to

00:16:58.990 --> 00:16:58.990
the KDC in the application protocol.

00:17:00.580 --> 00:17:06.170
and it goes over and we can use
our application at the server.

00:17:06.290 --> 00:17:10.090
So that's Kerbero.

00:17:10.090 --> 00:17:10.090
It's everything that it does.

00:17:10.700 --> 00:17:13.290
So let's go over this one more time.

00:17:13.420 --> 00:17:19.100
So we started with the AES Exchange,
that's authentication service.

00:17:19.150 --> 00:17:22.040
And when you do network
traces and stuff like that,

00:17:22.070 --> 00:17:26.080
these names will, the AES and TGS and AP,
they will show up over and over again.

00:17:26.080 --> 00:17:30.610
So it's easy to figure out what part
of the protocol that doesn't work,

00:17:30.610 --> 00:17:34.010
or what is working and what
you should concentrate your

00:17:34.270 --> 00:17:36.480
searching on what the failure is.

00:17:37.290 --> 00:17:42.270
Second step was the TGS Exchange.

00:17:42.270 --> 00:17:42.270
Third, the Application Exchange.

00:17:42.710 --> 00:17:46.610
So let's go through this in more
detail and see what actually is

00:17:46.610 --> 00:17:51.170
sent in the tickets when you want
to talk to different services.

00:17:52.990 --> 00:17:56.120
When we ask for a ticket
granting ticket as a client,

00:17:56.240 --> 00:17:58.740
we send over our
username that we want to,

00:17:58.820 --> 00:18:02.160
what service we want to get,
and how long time that we want

00:18:02.200 --> 00:18:03.740
the ticket to be valid for.

00:18:03.940 --> 00:18:06.890
Maybe we know that we're only going
to use the ticket for five minutes,

00:18:06.990 --> 00:18:09.270
and then we're only going to ask
for five minutes because we don't

00:18:09.280 --> 00:18:12.410
want the ticket granting ticket
that will give us access to all the

00:18:12.410 --> 00:18:14.900
services around for last for 10 hours.

00:18:14.900 --> 00:18:16.740
So we only ask for five minutes.

00:18:16.900 --> 00:18:18.900
This is a hint to the KDC.

00:18:18.900 --> 00:18:22.890
The KDC might return a ticket that
is shorter lived than we ask for.

00:18:22.890 --> 00:18:26.830
But usually this is 10
hours for a working day,

00:18:26.920 --> 00:18:29.880
unless you're working for the
slide for this presentation,

00:18:29.930 --> 00:18:33.150
and then you need to
log in at least twice.

00:18:33.980 --> 00:18:38.620
So the KDC sends back this
ticket-granting ticket.

00:18:38.640 --> 00:18:42.380
And it's a ticket-granting ticket,
and we store it in the

00:18:42.380 --> 00:18:44.130
cache in the client.

00:18:46.150 --> 00:18:50.010
So now, the second step of the protocol,
the ticket granting service.

00:18:50.080 --> 00:18:52.900
The ticket granting service,
we send over what server

00:18:52.940 --> 00:18:54.980
we want to talk to,
and in addition,

00:18:55.000 --> 00:18:57.640
we send over the ticket granting ticket.

00:18:57.690 --> 00:19:00.250
But you know, you can't just send over
the ticket granting ticket,

00:19:00.320 --> 00:19:04.070
because then someone else might
replay this to the KDC and say,

00:19:04.070 --> 00:19:05.680
oh, here's some data.

00:19:05.680 --> 00:19:09.130
I want to talk to that server,
so give me a service ticket.

00:19:09.360 --> 00:19:10.780
So you add an authenticator.

00:19:10.900 --> 00:19:15.090
This was made Kerbero's
tickets one time use only.

00:19:15.360 --> 00:19:18.240
I'm going to talk about how the
ticket and the authenticator

00:19:18.240 --> 00:19:22.140
works fits together later,
so don't worry about that right now.

00:19:22.320 --> 00:19:25.410
We send it over to the KDC.

00:19:27.280 --> 00:19:31.790
and we'll get back the service ticket
and we'll store it in the local cache.

00:19:33.390 --> 00:19:36.370
So now we don't need to
talk for a server KDC again.

00:19:36.480 --> 00:19:39.400
So we take our ticket,
and just like the KDC,

00:19:39.400 --> 00:19:41.260
we add an authenticator.

00:19:41.290 --> 00:19:44.890
And then we send over the
authenticator to our server.

00:19:44.920 --> 00:19:47.940
Now the server creates a
beautiful authentication token.

00:19:48.120 --> 00:19:52.280
This is to prove the server is
the server we're talking to.

00:19:55.000 --> 00:19:57.780
and it sends back to the client
and the client can verify the

00:19:57.780 --> 00:19:59.600
mutual authentication service.

00:19:59.660 --> 00:20:02.990
So we know that we're
talking to the right server.

00:20:03.040 --> 00:20:05.410
And every time we want to redo
this transaction to log into the

00:20:05.410 --> 00:20:08.220
server again because we tore down
the network connection of that,

00:20:08.320 --> 00:20:11.080
we just take the service ticket,
add the authenticator,

00:20:11.080 --> 00:20:12.750
send it over to the server,
and get back to the

00:20:12.840 --> 00:20:14.000
mutual authentication.

00:20:14.000 --> 00:20:16.690
There's no need to talk to the KDC here.

00:20:20.720 --> 00:20:24.010
So we've been talking
about this simple concept.

00:20:24.010 --> 00:20:26.530
We have a client and a server,
but we in engineering,

00:20:26.540 --> 00:20:28.830
we don't really trust
that marketing guys.

00:20:28.910 --> 00:20:32.540
But we want to see the
keynote slides they're doing.

00:20:32.710 --> 00:20:36.140
So we want to access the resources,
but we don't want to

00:20:36.360 --> 00:20:38.020
have them in our system.

00:20:38.020 --> 00:20:40.290
So how do we solve that?

00:20:40.580 --> 00:20:45.030
Well, we can add another realm and
then add trust between them.

00:20:45.210 --> 00:20:48.120
And this concept is called cross realm.

00:20:48.230 --> 00:20:51.990
So you can traverse between two different
realms and use services in other systems.

00:20:52.000 --> 00:20:53.950
So I have a ticket here in engineering.

00:20:53.950 --> 00:20:56.410
It has already got a ticket,
a grounding ticket.

00:20:56.550 --> 00:20:59.500
And now when it wants to talk
to the server at the other end,

00:20:59.500 --> 00:21:03.650
we start with adding a
trust between the two KDCs.

00:21:03.660 --> 00:21:07.420
And the trust is only for
identifying users and services.

00:21:07.420 --> 00:21:10.360
So you can see that
the first server is 10.

00:21:10.360 --> 00:21:13.240
And the first KDC is
telling the other KDC,

00:21:13.240 --> 00:21:17.790
you know, this user I'm talking about
right now is this identity.

00:21:17.890 --> 00:21:20.090
It doesn't tell you what rights you get.

00:21:20.190 --> 00:21:23.870
As I said before,
Kerbero is just providing

00:21:24.640 --> 00:21:27.580
authentication and not authorization.

00:21:27.580 --> 00:21:30.140
So just identity.

00:21:30.200 --> 00:21:33.420
So the client takes the
ticket grounding ticket,

00:21:33.420 --> 00:21:37.440
sends it over to the KDC,
gets back its special service tickets

00:21:37.490 --> 00:21:40.340
that allows it to talk to the other KDCs.

00:21:40.340 --> 00:21:46.100
And then the other KDC is sending
the service ticket to the other KDC.

00:21:47.280 --> 00:21:49.540
and get back a service ticket.

00:21:49.730 --> 00:21:53.610
And the service ticket is for the server,
so now we can just send over the

00:21:54.140 --> 00:21:58.770
service ticket to the server and
get access to all the resources.

00:21:58.920 --> 00:22:01.020
And we can read the key now.

00:22:02.640 --> 00:22:05.960
And of course,
this scales to multiple hierarchies

00:22:05.960 --> 00:22:08.260
or non-hierarchical solutions.

00:22:08.260 --> 00:22:11.440
So you can add trust between
two KDCs and end out there.

00:22:11.470 --> 00:22:14.280
And you can actually jump
between the KDCs and the realms.

00:22:14.410 --> 00:22:16.720
So you can go from the
first KDC to the second KDC,

00:22:16.720 --> 00:22:18.600
and then go through the third KDC.

00:22:18.600 --> 00:22:25.190
So Kerbero can create this complex
solution that will fit your organization.

00:22:26.630 --> 00:22:31.640
and I've been talking about this flying
tickets and flying all over the place and

00:22:31.640 --> 00:22:37.470
I've been talking about authenticators,
so let's look on how

00:22:37.470 --> 00:22:37.470
they actually look like.

00:22:38.630 --> 00:22:42.810
The ticket that I'm going to look at
first is a ticket granting ticket.

00:22:42.810 --> 00:22:46.590
But it could be any service
ticket that I'm going to show you.

00:22:46.610 --> 00:22:51.430
So the name of the service that I'm
using this ticket is for is instantly

00:22:51.430 --> 00:22:53.600
in the plain text of the ticket.

00:22:53.600 --> 00:22:57.300
And in the bottom of the ticket
is some data that's encrypted

00:22:57.300 --> 00:22:59.580
with the server's long-term key.

00:22:59.680 --> 00:23:02.590
That's the key inside the key tab.

00:23:05.300 --> 00:23:11.080
And with the long-term key,
you can decrypt the data inside it.

00:23:11.100 --> 00:23:15.870
And inside the data,
there's a client name,

00:23:15.990 --> 00:23:19.830
so the server who know who the client is.

00:23:20.140 --> 00:23:24.550
There's also expiration time,
and that's a fixed time in the future,

00:23:24.550 --> 00:23:28.060
or hopefully for the user,
so they can access the resources.

00:23:28.210 --> 00:23:31.370
There's also session key,
and the session key is shared

00:23:31.420 --> 00:23:33.540
between the user and the service.

00:23:33.610 --> 00:23:35.810
So you have to remember,
this part of the ticket is

00:23:35.860 --> 00:23:38.980
only readable to the server,
so the user can't read this.

00:23:39.060 --> 00:23:42.350
So how do the user get
hold of the session key?

00:23:43.060 --> 00:23:47.600
In the authentication service reply,
that's the first transaction

00:23:47.600 --> 00:23:50.180
you did when you talked to
the server when you logged in.

00:23:50.240 --> 00:23:52.690
Then they added some
more data to that ticket.

00:23:52.800 --> 00:23:54.600
So you got back in the
user's ticket for use,

00:23:54.710 --> 00:23:57.840
and this is ticket,
and so some more data.

00:23:57.920 --> 00:24:01.360
And this other encrypted data is
encrypted with the user's password.

00:24:01.600 --> 00:24:03.920
And we can decrypt this
and see what's inside it.

00:24:03.970 --> 00:24:07.600
And it's pretty much the same
thing as it was inside a ticket.

00:24:07.700 --> 00:24:10.510
It was a server that you want to talk to.

00:24:10.810 --> 00:24:15.930
and the expiration time,
and the same session key

00:24:15.980 --> 00:24:17.850
that's inside the ticket.

00:24:18.000 --> 00:24:22.850
So now the server and the
client is sharing the same key.

00:24:23.500 --> 00:24:25.820
So let's look on the
service ticket again.

00:24:26.000 --> 00:24:30.560
We have this part of the tickets that's
encrypted with the service long-term key.

00:24:30.630 --> 00:24:34.800
And we added an authenticator
to make it one-time use only,

00:24:34.800 --> 00:24:37.510
so anybody can't steal the
ticket off the network.

00:24:37.540 --> 00:24:42.090
So we add on the authenticator,
and inside the authenticator,

00:24:42.120 --> 00:24:46.450
the client is putting its name,
and that will match with the thing

00:24:46.450 --> 00:24:49.480
that's inside the service ticket,
or the ticket granting

00:24:49.560 --> 00:24:52.800
ticket in this case,
and a timestamp that's now.

00:24:52.800 --> 00:24:57.130
And it's only valid
for about five minutes,

00:24:57.130 --> 00:25:00.130
plus two and a half minutes.

00:25:00.150 --> 00:25:04.700
That's what makes Kerbero time sensitive.

00:25:04.760 --> 00:25:07.060
The last step is adding a subkey.

00:25:07.120 --> 00:25:09.800
The subkey is important because
it allows the protocol for each

00:25:09.880 --> 00:25:16.290
authentication you're doing to use a
new key to authenticate through service.

00:25:16.560 --> 00:25:23.010
and for each connection
you do to the service,

00:25:23.010 --> 00:25:28.590
you get new, fresh keys that are not
using the session key.

00:25:28.590 --> 00:25:28.590
So you won't reuse the session key,
and the session key is only used

00:25:28.590 --> 00:25:28.590
to protect the Kerberoos exchange.

00:25:30.030 --> 00:25:35.590
And we take the session key
and encrypt the authenticator,

00:25:35.590 --> 00:25:39.900
and the main data of the ticket is
encrypted with this long-term key.

00:25:40.050 --> 00:25:43.340
So now we have a fully
protected ticket-granting

00:25:43.360 --> 00:25:48.580
ticket with an authenticator,
and this is what makes Kerbero secure.

00:25:50.640 --> 00:25:58.260
So let's demo Kerbero
and see how it works.

00:25:58.280 --> 00:26:00.220
The demo please.

00:26:05.460 --> 00:26:11.310
So I'm going to show you using a web
browser talking to a Kerbero web server.

00:26:11.900 --> 00:26:16.220
When I start my Safari,
I get a question that I want to

00:26:16.220 --> 00:26:19.480
authorize against the web server.

00:26:19.480 --> 00:26:22.160
So I pull up a terminal.

00:26:23.690 --> 00:26:28.000
and kinet as a stem.

00:26:28.020 --> 00:26:29.990
And log in as stem.

00:26:31.650 --> 00:26:34.030
And then I can check my
credential cache on local machine

00:26:34.390 --> 00:26:36.040
to see what tickets I have.

00:26:36.080 --> 00:26:39.980
And the first ticket I get
is a ticket granting ticket.

00:26:41.120 --> 00:26:45.840
So now I can go back to
my web browser and reload.

00:26:45.900 --> 00:26:47.590
And I'm logged in.

00:26:49.700 --> 00:26:51.940
and the web server knew who I am.

00:26:51.950 --> 00:26:55.970
And when we go back to look at the
credential cache again with K-List,

00:26:55.970 --> 00:27:00.690
we can see that I got
HTTP service ticket.

00:27:00.740 --> 00:27:05.180
And of course, if I destroy the oldest
tickets with K-Destroy,

00:27:06.170 --> 00:27:08.140
So, no ticket.

00:27:08.400 --> 00:27:12.600
And going back to the Safari again,
and reloading,

00:27:12.620 --> 00:27:15.400
I'm not logging in anymore.

00:27:15.500 --> 00:27:18.190
So, let's go back to the presentation.

00:27:24.080 --> 00:27:28.950
So I've been talking about this,
about how Kerbero is used in MacÂ OSÂ X.

00:27:29.480 --> 00:27:34.280
It's been in MacÂ OSÂ X since 10.0.

00:27:34.630 --> 00:27:40.380
It's also is the primary authentication
mechanism open directory.

00:27:41.750 --> 00:27:46.770
And Kerbero is supported in
many applications in MacÂ OSÂ X.

00:27:46.830 --> 00:27:50.930
For example, the all the file sharing,
printer sharing, screen sharing,

00:27:50.930 --> 00:27:55.070
and many of the applications
that you get with MacÂ OSÂ X.

00:27:57.040 --> 00:28:01.370
So let's talk about the new features
that I would introduce with Leopard.

00:28:01.450 --> 00:28:04.000
The first is a local KDC.

00:28:05.990 --> 00:28:11.500
typical managed environment,
then you have the KDC,

00:28:11.510 --> 00:28:14.220
the server and the client.

00:28:14.370 --> 00:28:19.630
And in Leopard,
we combine them into one service,

00:28:19.640 --> 00:28:21.260
the local KDC.

00:28:21.260 --> 00:28:22.340
And all these services are
running on one machine,

00:28:22.340 --> 00:28:22.340
because that's usually how it
looks like in your environment.

00:28:22.340 --> 00:28:22.340
You have one machine.

00:28:23.270 --> 00:28:29.020
In the local KDC,
the realm name is actually lkdc.trial1

00:28:29.090 --> 00:28:31.600
and there's a big number of hex digits.

00:28:31.650 --> 00:28:37.270
And that's the signature or the checksum
of a certificate that's generated the

00:28:37.470 --> 00:28:45.240
first time your machine starts the
KDC and needs to use this service.

00:28:46.840 --> 00:28:49.180
But users don't want to
type in this long name,

00:28:49.180 --> 00:28:52.620
so the Realm discovery to find out
what Realm the machine is talking

00:28:53.000 --> 00:28:57.190
or using is done through Bonjour.

00:28:58.090 --> 00:29:00.350
So we have this local KDC.

00:29:00.490 --> 00:29:05.380
And to make this simpler,
I'm going to name this KDC to Stamps.

00:29:05.940 --> 00:29:09.040
Stamps iMac, because, well,
so we have a name.

00:29:09.180 --> 00:29:11.950
And Stamps has a friend, Owl.

00:29:12.400 --> 00:29:16.080
And on our computer,
there's some screen sharing

00:29:16.080 --> 00:29:18.420
or file serving we want to do.

00:29:18.600 --> 00:29:23.140
So, Stan wants to take a random ticket,
he gets a ticket,

00:29:23.140 --> 00:29:27.410
he wants a service ticket,
he gets a service ticket,

00:29:27.410 --> 00:29:31.460
and he can run the file
sharing on our computer.

00:29:31.460 --> 00:29:33.450
So, how do we get this to work?

00:29:33.550 --> 00:29:38.630
Well, if he wants to use other services,
he can just get service ticket

00:29:38.740 --> 00:29:40.160
for those services the next time.

00:29:40.160 --> 00:29:42.150
They don't need to log in again.

00:29:43.040 --> 00:29:46.390
So on local KDC,
all Macs today on Leopard

00:29:46.480 --> 00:29:50.610
is running a Kerbero KDC if
they're using printer sharing or

00:29:50.740 --> 00:29:52.650
screen sharing or file sharing.

00:29:52.710 --> 00:29:57.450
And it's used to log in when you're
using local accounts on the machine,

00:29:57.600 --> 00:30:02.220
but not when you're using the
equivalent of an open directory or AD.

00:30:04.790 --> 00:30:08.730
So in the demo I did just recently,
I was kind of cheating because

00:30:09.000 --> 00:30:12.990
this didn't look like that actually
when you tried to use it yourself.

00:30:13.180 --> 00:30:16.480
So you had Stam's iMac,
and he tried to use the

00:30:16.580 --> 00:30:19.900
service on the other machine,
so I got a ticket running ticket there.

00:30:19.970 --> 00:30:23.010
And when he got back the
ticket running ticket,

00:30:23.010 --> 00:30:24.620
he got a login window.

00:30:24.620 --> 00:30:28.010
And he had to remember the username,
he's on the other machine,

00:30:28.090 --> 00:30:32.100
and you know the password there,
I don't know, was something simple.

00:30:32.100 --> 00:30:34.700
I think it was like my username.

00:30:35.200 --> 00:30:37.190
So it's not really secure,
and it's kind of easy to

00:30:37.190 --> 00:30:39.740
brute force these solutions,
and you have to remember passwords

00:30:39.860 --> 00:30:41.050
for all different services.

00:30:41.120 --> 00:30:43.000
So can we do this better?

00:30:43.370 --> 00:30:45.430
Yeah, we could use certificates.

00:30:45.560 --> 00:30:46.940
There's no need to remember them.

00:30:46.940 --> 00:30:50.530
They're like the data blobs
that you store on your computer,

00:30:50.530 --> 00:30:55.150
and there's no simple passwords,
so you don't need to bother about that.

00:30:56.660 --> 00:30:58.560
And there's also fewer dialogues,
because, well,

00:30:58.560 --> 00:31:00.900
we have this certificate that you
can pull up from the keychain,

00:31:00.900 --> 00:31:01.580
and you just use it.

00:31:01.670 --> 00:31:07.900
So the user don't need to worry
about all the Android passwords

00:31:07.900 --> 00:31:08.520
and stuff like that.

00:31:08.620 --> 00:31:10.740
But there are some problems with it.

00:31:11.010 --> 00:31:12.220
They are difficult to manage.

00:31:12.220 --> 00:31:15.660
You need to be a computer
expert to create certificates.

00:31:15.890 --> 00:31:17.700
Well, at least create them correctly.

00:31:17.700 --> 00:31:22.410
And also, you need to distribute your
certificates between all the

00:31:22.410 --> 00:31:24.030
computers and stuff like that.

00:31:24.140 --> 00:31:25.880
So we want to make this
a little bit simpler.

00:31:27.180 --> 00:31:33.450
So we can do that by adding the
.Mac into the whole equation.

00:31:33.450 --> 00:31:38.810
So with .Mac,
we can make this solution really simple.

00:31:39.240 --> 00:31:43.110
So, in this example,
we have joined both Stam and

00:31:43.110 --> 00:31:46.450
IELTS Computer to the .Mac service.

00:31:46.480 --> 00:31:50.100
So, that's basically all the things that
we need to do from the beginning.

00:31:50.250 --> 00:31:54.100
And now, we just created a sharing-only
account for Stam on IELTS Computer.

00:31:54.100 --> 00:32:00.100
And we do that by going into the
Preference Panel and adding Stam's name,

00:32:00.100 --> 00:32:03.100
adding a sharing-only
account for Stam first.

00:32:03.100 --> 00:32:10.100
And then we add Stam's .Mac account,
and that's Stamerson, we enter it here.

00:32:10.120 --> 00:32:14.100
And what that does in the background is,
first, when Stam joined his

00:32:14.100 --> 00:32:17.690
computer to the .Mac,
he actually downloaded a certificate

00:32:18.120 --> 00:32:20.030
and a private key into his machine.

00:32:20.100 --> 00:32:23.460
And then, when we created
IELTS Computer on IELTS iMac,

00:32:23.460 --> 00:32:28.100
we downloaded a certificate from the
.Mac and installed it on IELTS iMac.

00:32:28.100 --> 00:32:33.050
And these certificates are automatically
updated whenever they change on the .Mac.

00:32:33.140 --> 00:32:36.180
Mac service,
so we don't need to worry about that.

00:32:36.460 --> 00:32:40.070
So we got the creation and the
distribution problem solved.

00:32:40.350 --> 00:32:42.030
And now,

00:32:42.510 --> 00:32:46.160
We don't need to use .Mac anymore,
so you can use it on your

00:32:46.160 --> 00:32:49.840
private network over a FireWire
cable and access resources.

00:32:49.840 --> 00:32:52.750
So when asking for a
ticket granting ticket,

00:32:52.750 --> 00:32:55.760
we encrypt the reply
using the certificate,

00:32:55.760 --> 00:32:58.460
and then we can get the
service ticket as usual,

00:32:58.460 --> 00:33:02.150
and just get service ticket
and get to our file sharing.

00:33:02.160 --> 00:33:07.270
So let's demo this.

00:33:12.400 --> 00:33:16.310
10 more, please.

00:33:24.270 --> 00:33:26.080
On both of the demo,
one of the demo machines I'm

00:33:26.210 --> 00:33:28.880
working is now a Stams computer,
and I want to access

00:33:29.000 --> 00:33:31.350
resources on iOS computer.

00:33:31.510 --> 00:33:36.200
So I open the finder,
and I can find iOS iMac here.

00:33:36.230 --> 00:33:40.800
And as you can see,
I'm logged in as Stamerson at .Mac.

00:33:40.850 --> 00:33:44.810
And if I go to my terminal,
in the background,

00:33:44.980 --> 00:33:51.270
it actually got and fetched me a ticket,
running ticket for this Stam,

00:33:51.270 --> 00:33:52.100
and that's the hash of Stam's,

00:33:52.170 --> 00:33:56.670
certificate in the Darknet service
on this other weird Realm name,

00:33:56.670 --> 00:33:59.780
and that's actually
Realm name of iOS iMac.

00:33:59.830 --> 00:34:03.770
And we've got a ticket running ticket,
and it's also probed the

00:34:03.770 --> 00:34:07.410
AFP server to see what resources
we have on that machine.

00:34:07.700 --> 00:34:10.970
So let's see if we can do screen sharing.

00:34:11.920 --> 00:34:14.400
We got the machine already there.

00:34:14.500 --> 00:34:17.080
And we have nice family
photos on our computer.

00:34:17.080 --> 00:34:19.700
And we can access the
resources that we want.

00:34:19.710 --> 00:34:24.250
And when we go back to
the credential list,

00:34:25.120 --> 00:34:30.500
We see that we have a VNC ticket
that we use for screen sharing.

00:34:41.320 --> 00:34:49.440
So let's get back to the presentation.

00:34:49.540 --> 00:34:53.930
So now, how can you use Kerbero
in your presentation?

00:34:54.810 --> 00:34:59.100
Oh, sorry, in your application.

00:34:59.180 --> 00:35:02.280
Kerbero is supported
for managed environment.

00:35:02.320 --> 00:35:05.160
It's not using the .Mac service.

00:35:06.230 --> 00:35:12.030
And using Kerbero in your
application is usually using GSS API.

00:35:12.250 --> 00:35:15.460
And GSS API is both an
abstraction of protocol,

00:35:15.520 --> 00:35:18.330
a protocol itself,
and a program interface.

00:35:18.450 --> 00:35:21.940
So it's many things at the same name.

00:35:22.180 --> 00:35:28.690
And the GSS API is maintained by the
IETF in the Kitten working groups.

00:35:30.690 --> 00:35:33.440
YesSCPI, as the name says,
is a generic interface,

00:35:33.490 --> 00:35:37.040
so it supports more than just Kerbero,
it's supporting Spnego,

00:35:37.140 --> 00:35:40.240
and that's for negotiating
different mechanisms,

00:35:40.240 --> 00:35:44.230
but also NTLM for legacy applications.

00:35:49.200 --> 00:35:53.770
As an application writer,
you want to use Kerbero when you

00:35:53.770 --> 00:35:58.200
want to leverage existing Kerbero
infrastructure that exists already today.

00:35:58.200 --> 00:36:02.700
And this enables you to not need
to maintain password or user

00:36:02.700 --> 00:36:07.750
information for specific for
these users in your application.

00:36:08.160 --> 00:36:11.210
and it's also when you want to
use cross-trail support between

00:36:11.320 --> 00:36:17.020
different environments like your
AD systems or your and your Macs.

00:36:17.140 --> 00:36:21.580
Also, you want to use Kerbero as
an ESS API when you have

00:36:21.850 --> 00:36:25.940
standard protocols like IMAP or
SMTP submit or something like that,

00:36:25.980 --> 00:36:29.700
that requires use of Kerbero,
so you don't really have a choice.

00:36:32.250 --> 00:36:36.080
Just as API is a somewhat
complicated protocol,

00:36:36.130 --> 00:36:41.070
but it can be easily broken
down into some key concepts.

00:36:41.200 --> 00:36:44.170
So first we have the initiator,
and that's the client.

00:36:44.180 --> 00:36:47.440
That's the machine that
sends the first packet.

00:36:47.490 --> 00:36:49.220
And it sends it over to the acceptor.

00:36:49.270 --> 00:36:50.460
That's the server, usually.

00:36:50.660 --> 00:36:53.260
It could actually be the opposite,
but it doesn't matter.

00:36:53.450 --> 00:36:58.160
The server can be the initiator,
but in the common case,

00:36:58.200 --> 00:37:00.000
the client is the initiator.

00:37:00.080 --> 00:37:03.460
And together, the client and the server
build a security context.

00:37:05.350 --> 00:37:07.430
and the security context,
the building of it,

00:37:07.440 --> 00:37:10.440
is actually the login into this service.

00:37:10.440 --> 00:37:14.750
And when you've logged into the service,
then you can use the

00:37:14.750 --> 00:37:16.590
per message services.

00:37:17.200 --> 00:37:23.340
The per message services are encryption
and integrity controls of messages.

00:37:23.470 --> 00:37:28.650
And to build these security
contexts and application contexts,

00:37:28.650 --> 00:37:32.770
you pass around tokens between
the two different parties,

00:37:32.800 --> 00:37:35.640
the initiator and the acceptor.

00:37:35.760 --> 00:37:39.290
And the tokens are of course called
the context tokens for the context

00:37:39.590 --> 00:37:42.860
building and the per message
tokens for the message building.

00:37:45.210 --> 00:37:49.200
So we have the initiator
and the acceptor.

00:37:49.220 --> 00:37:53.540
And the first thing that the initiator
does is call it in its context.

00:37:53.660 --> 00:37:58.230
And it passes in the service
name you want to talk to.

00:37:58.350 --> 00:38:01.800
And in the background,
the library goes and talks to the

00:38:01.800 --> 00:38:04.680
KDC and gets the ticket-crowding ticket.

00:38:05.860 --> 00:38:08.970
So this is nothing your
application need to care about.

00:38:09.230 --> 00:38:12.010
However, the user needs to be logged
into the system already,

00:38:12.010 --> 00:38:14.400
so they already have a
ticket re-inning ticket.

00:38:14.400 --> 00:38:21.990
And this is nothing that
just as API solves for you,

00:38:21.990 --> 00:38:21.990
but rather some other support libraries.

00:38:22.590 --> 00:38:27.650
And then it creates a token and
sends it over to the server,

00:38:27.650 --> 00:38:31.500
and that's an AP exchange,
application protocol exchange.

00:38:31.850 --> 00:38:36.320
And the server reads in the
token using accept-tag context.

00:38:41.290 --> 00:38:43.530
And usually there's only one round trip.

00:38:43.630 --> 00:38:45.320
The packet goes from
the client over through