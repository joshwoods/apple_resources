WEBVTT

00:00:20.790 --> 00:00:21.390
Well, good morning.

00:00:21.390 --> 00:00:22.770
I hope you can hear me.

00:00:22.770 --> 00:00:26.000
My name is Gary Hoo.

00:00:26.000 --> 00:00:30.580
I'm a software engineer with the data
security group at Apple Computer,

00:00:30.580 --> 00:00:33.700
and I'm going to be talking
to you about the Authorization

00:00:33.700 --> 00:00:35.400
Services subsystem today.

00:00:36.040 --> 00:00:40.100
Now, before I get into the actual
content of the slides,

00:00:40.100 --> 00:00:44.580
I should perhaps issue the
requisite caveat that Authorization

00:00:44.710 --> 00:00:47.460
Services is a Mac OS X technology.

00:00:47.460 --> 00:00:51.320
It is, in particular,
not an iPhone technology.

00:00:51.320 --> 00:00:55.630
So if you are looking for something
directly applicable to the iPhone,

00:00:55.680 --> 00:00:58.570
this perhaps is not
quite the right session.

00:00:58.580 --> 00:01:01.760
However,
if you are going to be developing

00:01:01.760 --> 00:01:06.020
for the iPhone on Mac OS X,
you might want to stay for a while.

00:01:06.020 --> 00:01:13.880
I'm going to be talking about the
Authorization Services subsystem today.

00:01:14.370 --> 00:01:18.560
I'm going to be talking about what
Authorization Services is and why

00:01:18.560 --> 00:01:20.350
perhaps you ought to consider using it.

00:01:20.530 --> 00:01:24.200
I'll be going over some fundamental
concepts of Authorization

00:01:24.200 --> 00:01:30.550
Services and I'll be going through
an example of the use of the APIs.

00:01:31.610 --> 00:01:35.710
Authorization Services is
fundamentally a policy subsystem

00:01:36.180 --> 00:01:39.840
that answers the question,
can this user perform

00:01:39.930 --> 00:01:41.900
this particular action?

00:01:43.100 --> 00:01:46.850
Now, Authorization Services,
by virtue of its evolution,

00:01:46.850 --> 00:01:50.400
has had to be extensible,
it's had to be customizable,

00:01:50.400 --> 00:01:54.710
and it has very definitely
had to be GUI-friendly.

00:01:54.960 --> 00:01:58.760
Because a lot of the time you're entering
a password as part of authorization.

00:01:58.760 --> 00:02:01.690
Now, in case you were wondering
whether we actually use

00:02:01.690 --> 00:02:05.510
authorization services in-house,
well, we've managed to sneak it into

00:02:05.510 --> 00:02:07.250
a few corners here and there.

00:02:07.260 --> 00:02:11.420
Now, for some reason,
this panel got a little shrunk

00:02:11.420 --> 00:02:13.500
on my copy of the slides.

00:02:13.540 --> 00:02:14.800
I don't know how it looks out there.

00:02:14.800 --> 00:02:17.850
But if you've never seen this
before because perhaps you

00:02:17.850 --> 00:02:21.180
have auto-login turned on,
this is the login panel that you see

00:02:21.330 --> 00:02:23.260
when you first log into Mac OS X.

00:02:24.280 --> 00:02:30.310
And this is quite literally a side
effect of an application-making and

00:02:30.310 --> 00:02:32.550
authorization services API call.

00:02:32.560 --> 00:02:36.860
You type in your password,
your name and your password in this case,

00:02:36.880 --> 00:02:41.630
and authorization services in the
background does a whole host of

00:02:41.630 --> 00:02:46.230
interesting and potentially dangerous
things on your behalf as part of login.

00:02:46.240 --> 00:02:49.810
And then once your name and
password have been validated,

00:02:49.830 --> 00:02:54.330
login proceeds, desktop shows up,
finder starts,

00:02:54.330 --> 00:02:55.490
all the rest of that good stuff.

00:02:55.540 --> 00:02:59.750
But what you see right here is
you're right in the middle of

00:02:59.780 --> 00:03:01.160
an authorization services call.

00:03:01.160 --> 00:03:02.310
All right.

00:03:03.330 --> 00:03:04.880
So, why use it?

00:03:04.960 --> 00:03:10.010
Well, as you can see,
it does tend to save you a little

00:03:10.010 --> 00:03:14.680
bit of work because you can leverage
Mac OS X frameworks and user interface.

00:03:14.680 --> 00:03:18.480
Granted, you're probably not going to be
reusing the login panel for anything,

00:03:18.480 --> 00:03:22.970
but there is other UI in there that
you will almost certainly be using.

00:03:23.530 --> 00:03:27.540
Also, if your system administrator
at your site decides,

00:03:27.550 --> 00:03:30.470
or your customer site decides,
to swap in a new

00:03:30.910 --> 00:03:33.380
authentication mechanism,
for example,

00:03:33.480 --> 00:03:36.780
he decides that names and passwords
are no longer fashionable,

00:03:36.780 --> 00:03:40.130
it's now time to go to fingerprint
readers or to retinal scanners or

00:03:40.130 --> 00:03:45.140
to blood samplers or something else,
your application does not have to change.

00:03:46.740 --> 00:03:51.560
And if that system administrator
decides that the retinal scanner

00:03:51.560 --> 00:03:53.570
is no longer a good idea,
he wants to go back to

00:03:53.570 --> 00:03:55.500
names and passwords,
or he wants to move to smart

00:03:55.540 --> 00:03:56.970
cards or something else,
again,

00:03:57.310 --> 00:03:59.640
your application just does not change.

00:03:59.640 --> 00:04:04.850
Which brings me to the second point,
which is Authorization Services makes

00:04:04.850 --> 00:04:10.010
less work for your customers because
they don't have to rev your application

00:04:10.010 --> 00:04:12.960
if they change their security policy.

00:04:13.460 --> 00:04:16.150
They can customize policy
for the entire system,

00:04:16.310 --> 00:04:18.140
not on a per-application basis.

00:04:18.140 --> 00:04:19.940
It makes their lives much easier.

00:04:22.830 --> 00:04:27.880
Authorization Services also tends to
encourage you to factor your code into

00:04:28.030 --> 00:04:33.300
pieces that can run with privilege
and pieces that do not have to.

00:04:33.320 --> 00:04:37.580
I'll go over what that means in
greater detail a little bit later.

00:04:38.690 --> 00:04:43.880
Authorization Services also supplements
the venerable Unix permissions model.

00:04:43.880 --> 00:04:47.790
Now, for those of you for whom
that may be not as familiar,

00:04:47.790 --> 00:04:50.430
perhaps,
Unix permissions basically subdivides

00:04:50.540 --> 00:04:53.020
the world into three groups.

00:04:53.110 --> 00:04:57.660
The user, or the owner,
of a file or process.

00:04:58.240 --> 00:05:03.390
One single group associated with a
file or process and then everybody

00:05:03.390 --> 00:05:04.680
else in the rest of the world.

00:05:04.690 --> 00:05:07.340
And this works great
for a number of things,

00:05:07.340 --> 00:05:13.040
but it's a little difficult for
that kind of model to address,

00:05:13.040 --> 00:05:17.730
gee, I'd like group A and group B to
be able to administer the printer,

00:05:17.750 --> 00:05:18.900
for instance.

00:05:20.920 --> 00:05:23.720
And again,
as you saw before with the login example,

00:05:23.990 --> 00:05:29.390
Authorization Services also
allows you to extend policy to

00:05:29.450 --> 00:05:35.280
include various complex tests,
user interface, associated actions.

00:05:35.280 --> 00:05:39.490
So one thing that we have baked
into OS X right now is what do you

00:05:39.490 --> 00:05:44.190
do if an application needs to add
something to your default keychain

00:05:44.230 --> 00:05:47.330
and your default keychain isn't there?

00:05:47.980 --> 00:05:50.780
Oh, keychain, by the way,
for those of you new to OS X,

00:05:50.780 --> 00:05:57.800
is basically a bag in which we
encourage users to place passwords,

00:05:57.800 --> 00:06:00.140
private keys,
other sensitive information.

00:06:00.180 --> 00:06:03.910
Every user by default is
given a default keychain,

00:06:04.090 --> 00:06:08.280
but something can happen
to that default keychain.

00:06:08.280 --> 00:06:09.890
The user may accidentally delete it.

00:06:10.010 --> 00:06:12.530
Various bad things can happen to it.

00:06:12.630 --> 00:06:17.960
And so any time an application wants to
use the default keychain for something,

00:06:17.960 --> 00:06:21.800
and if it can't find it,
what happens kind of silently and

00:06:21.800 --> 00:06:25.960
transparently in the background
as far as that application is

00:06:25.960 --> 00:06:29.420
concerned is the system says,
oh, there doesn't seem to be

00:06:29.480 --> 00:06:31.550
a default keychain here,
so let me put up a user

00:06:31.550 --> 00:06:34.500
interface that asks,
there's no default keychain.

00:06:34.530 --> 00:06:37.900
Would you like me to reset
your default keychain for you?

00:06:37.920 --> 00:06:40.890
If the user says yes,
the user is then prompted via

00:06:40.950 --> 00:06:45.080
further user interface for a
password to protect that keychain.

00:06:45.080 --> 00:06:49.590
And if a password is provided,
then the reset keychain

00:06:49.590 --> 00:06:50.990
operation proceeds.

00:06:51.000 --> 00:06:53.860
This is all a side
effect of authorization,

00:06:53.860 --> 00:06:57.440
and that authorization in turn
is a side effect of applications

00:06:57.440 --> 00:07:01.010
simply wanting to use the default
keychain and not finding it there.

00:07:01.260 --> 00:07:06.460
So some fundamental concepts that
I want to go over before I get

00:07:06.460 --> 00:07:08.640
into the actual authorization APIs.

00:07:08.640 --> 00:07:11.810
First,
I want to clear up that authorization and

00:07:11.810 --> 00:07:14.880
authentication are two distinct concepts.

00:07:14.960 --> 00:07:17.760
Second, I want to talk about factors.

00:07:17.980 --> 00:07:20.620
I want to talk about
why it's a good idea,

00:07:20.620 --> 00:07:26.740
and then I'll go into some concepts of
authorization that you need to know,

00:07:26.740 --> 00:07:31.170
as well as a few system processes
and files that conspire to provide

00:07:31.170 --> 00:07:33.090
the authorization subsystem.

00:07:35.010 --> 00:07:39.380
So, authorization is not authentication.

00:07:39.420 --> 00:07:42.580
That's something to get clear right now.

00:07:42.650 --> 00:07:47.020
And that's because in the literature,
if you ever read security literature,

00:07:47.140 --> 00:07:49.350
which is a great way to put
yourself to sleep at night,

00:07:49.440 --> 00:07:54.600
by the way, but let's not go there,
you will notice that these two terms

00:07:54.950 --> 00:07:57.920
have very specific and precise meanings.

00:07:57.990 --> 00:08:02.610
Authentication is simply
verification of the user's identity.

00:08:02.750 --> 00:08:05.560
Authorization, however,
asks the question,

00:08:05.560 --> 00:08:09.500
assuming we can authenticate this user,
what can this user do?

00:08:09.500 --> 00:08:12.900
So authorization might
require authentication.

00:08:12.900 --> 00:08:16.580
There's at least one example, by the way,
on OS X where it doesn't,

00:08:16.780 --> 00:08:23.530
and that's when your DVD player
has been set to some particular

00:08:23.820 --> 00:08:27.670
region because it got set that way
when you first inserted a DVD with

00:08:27.720 --> 00:08:30.200
a region code into your system.

00:08:30.650 --> 00:08:34.360
You insert another DVD into your
system with a different region code,

00:08:34.360 --> 00:08:38.480
and because you can only reset that
region code a certain number of times,

00:08:38.500 --> 00:08:41.170
OS X detects this and says, well,
you know,

00:08:41.180 --> 00:08:45.040
we certainly don't want to reset the
region code out from underneath the user

00:08:45.040 --> 00:08:49.440
without at least giving him a chance
to object so he doesn't burn through his

00:08:49.450 --> 00:08:55.620
N number of resets and then suddenly find
himself locked on a region 4 DVD player

00:08:55.620 --> 00:08:57.430
when he's really living in region 1.

00:08:58.420 --> 00:09:01.100
So there all we do is pop
up a dialog that says,

00:09:01.100 --> 00:09:04.220
do you want to reset the region
or something to that effect?

00:09:04.280 --> 00:09:06.200
And there is no authentication required.

00:09:06.200 --> 00:09:07.320
You just click yes or no.

00:09:07.320 --> 00:09:10.580
But most of the time, authorization does
require authentication,

00:09:10.580 --> 00:09:14.740
and in fact, it might dictate the form
of that authentication.

00:09:18.030 --> 00:09:22.700
So now on to code factoring.

00:09:22.780 --> 00:09:29.140
Essentially what this means is dividing
up your code into that part of the code

00:09:29.140 --> 00:09:32.380
that has to do something privileged,
that is to say it needs

00:09:32.380 --> 00:09:35.240
to run as the root user,
and all the rest of it,

00:09:35.250 --> 00:09:37.920
which is generally the much
greater part of your code,

00:09:38.010 --> 00:09:41.000
which doesn't need to run as root.

00:09:41.190 --> 00:09:43.800
Now,
running as Root in one big application

00:09:43.800 --> 00:09:46.790
is enormously tempting because it
means you don't actually have to change

00:09:46.790 --> 00:09:48.200
a line of code that you've written.

00:09:48.200 --> 00:09:52.510
However,
Root is virtually unchecked on OS X and,

00:09:52.670 --> 00:09:55.430
in fact, on most Unix systems.

00:09:55.440 --> 00:09:59.580
There is great potential
for Root to do good and,

00:09:59.580 --> 00:10:01.890
therefore,
correspondingly great potential

00:10:01.890 --> 00:10:03.170
for Root to do not good.

00:10:04.000 --> 00:10:07.810
Therefore,
running as Root requires self-restraint,

00:10:08.170 --> 00:10:13.590
and factoring your code forces you
to implement that self-restraint.

00:10:15.330 --> 00:10:20.150
Now, minimizing the amount of privileged
code means that you minimize the

00:10:20.160 --> 00:10:24.020
amount of source code that you have to
audit to make sure that that code is

00:10:24.120 --> 00:10:27.790
not doing particularly silly things,
dangerous things.

00:10:27.820 --> 00:10:30.970
It's not calling bad APIs.

00:10:31.230 --> 00:10:35.720
It also tends to minimize the amount
of external linkage that you have,

00:10:35.720 --> 00:10:39.240
external libraries and frameworks that
you've got to link into your code.

00:10:39.240 --> 00:10:45.340
And all that does tend to minimize is
unexpected interactions and side effects.

00:10:45.340 --> 00:10:50.100
The less there is,
the less can go wrong in general.

00:10:50.100 --> 00:10:51.220
There are always exceptions.

00:10:53.350 --> 00:10:59.040
Okay, now to some fundamental
concepts of authorization.

00:10:59.040 --> 00:11:02.640
I'm going to go over
each of these in turn.

00:11:02.640 --> 00:11:03.520
What is a right?

00:11:03.570 --> 00:11:04.450
What is a rule?

00:11:04.450 --> 00:11:08.780
The policy database,
the system processes that actually

00:11:08.780 --> 00:11:11.960
conspire to implement authorization.

00:11:11.960 --> 00:11:17.040
I'm going to talk about some ancillary
data that we call hints and context,

00:11:17.040 --> 00:11:21.220
and also plug-ins and mechanisms,
which is how you extend the

00:11:21.230 --> 00:11:23.180
functionality of authorization.

00:11:23.200 --> 00:11:24.680
organization.

00:11:26.790 --> 00:11:29.420
So a right is a pretty
fundamental concept,

00:11:29.420 --> 00:11:30.470
and it's a pretty basic one.

00:11:30.480 --> 00:11:31.580
It's not hard to grasp.

00:11:31.580 --> 00:11:34.100
It just identifies a
privileged operation.

00:11:34.120 --> 00:11:38.690
And as such, it has some condition or
conditions that have to be met

00:11:38.820 --> 00:11:41.460
before that right can be granted.

00:11:41.460 --> 00:11:45.680
Now, as far as the names of rights go,
we do have a convention that

00:11:45.740 --> 00:11:48.660
says it ought to be something
along the lines of com,

00:11:48.680 --> 00:11:52.740
company, application, right.

00:11:52.800 --> 00:11:54.410
However--

00:11:54.530 --> 00:11:58.340
The way you name your write
is pretty much up to you.

00:11:58.390 --> 00:12:06.230
And as long as you avoid a couple
of restricted Mac OS X-specific

00:12:06.280 --> 00:12:11.430
write hierarchy names,
it's up to you how you want

00:12:11.440 --> 00:12:13.880
to name what you're doing.

00:12:15.790 --> 00:12:19.150
Now, because of the way that we
structure write names with dots

00:12:19.220 --> 00:12:23.870
between various significant pieces,
we can support the concept

00:12:24.000 --> 00:12:27.180
of a wildcard write,
which is simply one

00:12:27.180 --> 00:12:29.390
whose name ends in a dot.

00:12:29.620 --> 00:12:33.310
If a specific right that's
requested by an application

00:12:33.630 --> 00:12:38.730
can't be matched exactly by name,
then the system starts stripping

00:12:39.000 --> 00:12:44.220
off pieces of that name in order
to see if it will match a prefix,

00:12:44.220 --> 00:12:46.860
that is to say a wildcard
right within the system.

00:12:46.860 --> 00:12:51.650
And if it does, then whatever conditions,
whatever rules are associated with

00:12:51.650 --> 00:12:55.700
that right apply to the one that
the application is requesting.

00:12:55.700 --> 00:12:59.190
So wildcards are a way to
create a set of rights.

00:12:59.710 --> 00:13:02.650
to which all the same rules apply.

00:13:04.650 --> 00:13:07.290
Now, those reserved name hierarchies
I mentioned earlier are

00:13:07.290 --> 00:13:09.330
SystemDot and ConfigDot.

00:13:09.840 --> 00:13:11.600
These are both used by Mac OS X.

00:13:11.600 --> 00:13:15.000
ConfigDot in particular is used
by the authorization subsystem

00:13:15.090 --> 00:13:19.630
itself in order to manage changes
to the authorization subsystem.

00:13:19.850 --> 00:13:23.520
So if you're an application developer
and you want to start naming your rights,

00:13:23.520 --> 00:13:29.580
please avoid anything in the
SystemDot and ConfigDot hierarchies.

00:13:30.850 --> 00:13:35.460
So a rule, a condition that has to be
met in order to grant a right,

00:13:35.680 --> 00:13:37.400
very basic concept.

00:13:37.440 --> 00:13:39.780
Now there are several different--

00:13:39.970 --> 00:13:41.740
concepts that I want to go over.

00:13:41.790 --> 00:13:42.630
Actually, there's only two.

00:13:42.770 --> 00:13:43.040
All right.

00:13:43.540 --> 00:13:47.760
There's the concept of rule class,
and there are some rule

00:13:47.760 --> 00:13:52.250
properties that tend to apply
to multiple classes of rules.

00:13:54.660 --> 00:14:00.040
All right, now, these rule classes,
there are three of them that are

00:14:00.040 --> 00:14:03.020
essentially true classes of rules.

00:14:03.130 --> 00:14:06.000
That's user evaluate mechanisms
and the so-called delegation rule.

00:14:06.000 --> 00:14:10.490
And then there are a couple
of singleton rule classes,

00:14:10.490 --> 00:14:12.050
allow and deny.

00:14:12.050 --> 00:14:16.930
And allow just says, yes.

00:14:17.060 --> 00:14:19.780
If the rule granting
your right is allowed,

00:14:19.860 --> 00:14:21.900
then your right is always granted.

00:14:21.900 --> 00:14:25.920
And if the rule covering
your right is denied,

00:14:25.920 --> 00:14:28.680
then that rule can never be granted.

00:14:31.120 --> 00:14:32.800
The default rule I'll go over shortly.

00:14:32.800 --> 00:14:37.840
It's basically the rule that gets
applied if no other particular rule has

00:14:37.850 --> 00:14:41.680
been specified for the requested write.

00:14:42.780 --> 00:14:46.930
So, first rule class,
the user rule class.

00:14:47.060 --> 00:14:51.180
This essentially is a
shorthand for user in group.

00:14:51.190 --> 00:14:54.270
Now, the group is typically admin,
but it certainly doesn't have to be.

00:14:54.340 --> 00:15:00.000
There are already instances in Leopard
of groups that are not admin that

00:15:00.000 --> 00:15:05.480
still are used to grant particular
rights baked into the system.

00:15:06.690 --> 00:15:11.100
A special instance of a user
rule is the session owner.

00:15:11.280 --> 00:15:18.130
The session owner is the current user
that is logged in at this particular

00:15:18.130 --> 00:15:22.590
console or via this particular SSH login.

00:15:22.750 --> 00:15:28.070
And as long as I'm mentioning sessions,
I might as well clarify that a

00:15:28.070 --> 00:15:34.180
login session is its own domain as
far as authorization services go.

00:15:34.180 --> 00:15:37.380
And in particular,
a write granted in one login

00:15:37.380 --> 00:15:42.020
session is not automatically
granted in any other login session.

00:15:42.440 --> 00:15:46.840
So the fact that you authorized
for a particular write logged in at

00:15:46.840 --> 00:15:51.400
the console does not mean that your
SSH login into the same system has

00:15:51.400 --> 00:15:54.000
acquired that write and vice versa.

00:15:54.000 --> 00:15:58.340
That's actually kind of important to
know when you're writing applications

00:15:58.340 --> 00:16:00.260
and as users of the system.

00:16:04.000 --> 00:16:10.730
The Evaluate Mechanisms class is how
you extend authorization functionality.

00:16:10.890 --> 00:16:14.300
A mechanism is a chunk of
code that just operates on or

00:16:14.300 --> 00:16:16.510
acquires authentication data.

00:16:16.510 --> 00:16:22.540
And as such, a mechanism can put up UI,
it can have side effects on the system,

00:16:22.540 --> 00:16:27.000
it can pass data to other mechanisms
that execute subsequent to it,

00:16:27.080 --> 00:16:30.400
and these mechanisms
can run as root or not.

00:16:30.460 --> 00:16:31.680
They don't have to run as root.

00:16:32.760 --> 00:16:36.540
Mechanisms, for convenience's sake,
live in plug-ins,

00:16:36.560 --> 00:16:39.470
and I'll be going over plug-ins
and mechanisms in greater

00:16:39.470 --> 00:16:40.720
detail in a little bit.

00:16:43.130 --> 00:16:48.780
So here's an example of an
evaluate mechanisms rule.

00:16:48.830 --> 00:16:51.380
The write in question is system.shutdown.

00:16:51.400 --> 00:16:55.440
This write is invoked whenever
you try and shut down the

00:16:55.440 --> 00:16:57.520
system or restart the system.

00:16:57.550 --> 00:17:02.700
And there are users logged in in the
background via fast user switching.

00:17:03.420 --> 00:17:06.100
There is a plug-in called
Restart Authorization.

00:17:06.100 --> 00:17:08.910
It's a standard plug-in
that ships with the system,

00:17:08.910 --> 00:17:14.560
and it has at least three
mechanisms associated with it.

00:17:14.560 --> 00:17:14.560
It has

00:17:14.700 --> 00:17:17.720
Shut down, authenticate, and success.

00:17:17.830 --> 00:17:21.300
And these mechanisms each
perform a different role.

00:17:21.500 --> 00:17:29.880
One of them puts up UI and the
others actually evaluate the results

00:17:29.970 --> 00:17:34.520
of that UI when you type in an
administrator's name and password and

00:17:34.520 --> 00:17:40.710
actually give clearance to shut down
the system or to restart the system.

00:17:44.650 --> 00:17:51.920
The Delegation Rule allows you to use
one or more built-in rules on the system.

00:17:52.690 --> 00:17:57.140
There is a rules dictionary that lives in
the policy database that defines all the

00:17:57.140 --> 00:18:00.080
built-in rules available on the system.

00:18:00.230 --> 00:18:03.680
And there is something called
the K of N property that can

00:18:03.680 --> 00:18:08.320
apply to delegation rules,
and that allows a subset

00:18:08.320 --> 00:18:10.710
of rules to grant right.

00:18:12.040 --> 00:18:15.180
And we've got an example
of such a rule right now.

00:18:15.180 --> 00:18:19.760
And in particular,
you see that K of N is 1 here.

00:18:19.760 --> 00:18:21.950
N is 3.

00:18:21.960 --> 00:18:27.760
There are three possible built-in rules
that actually can apply to this right.

00:18:27.930 --> 00:18:30.820
Is LP admin, is admin,
and the default rule.

00:18:30.820 --> 00:18:34.430
However, since K of N is 1,
only one of those rules has

00:18:34.430 --> 00:18:37.860
to be satisfied in order for
this right to be granted,

00:18:37.980 --> 00:18:41.520
in order for you to be able
to administer printers.

00:18:45.290 --> 00:18:47.070
Which brings me to the default rule.

00:18:47.380 --> 00:18:50.820
Again, it's used if no other rule
is specified for a write or,

00:18:51.160 --> 00:18:55.340
as seen in the previous example,
it can also be used explicitly.

00:18:55.490 --> 00:18:57.800
Now, the default rule

00:18:57.980 --> 00:19:03.980
requires you to authenticate as an admin,
and the credential that gets generated

00:19:04.730 --> 00:19:08.230
by successfully authenticating
has a five-minute timeout,

00:19:08.280 --> 00:19:11.850
and that credential can be
shared by any other process

00:19:11.920 --> 00:19:14.160
within the same login session.

00:19:17.810 --> 00:19:22.200
So a few rule properties,
some of which we've seen before.

00:19:22.200 --> 00:19:25.520
Authenticate user is a Boolean
property that simply says,

00:19:26.590 --> 00:19:30.720
can we throw up user interface
to the user if it's necessary?

00:19:30.750 --> 00:19:32.860
If it's true, then you'll see dialogues.

00:19:32.860 --> 00:19:36.660
If it's not true,
then no dialogues can be displayed,

00:19:36.680 --> 00:19:41.690
and your rule had better
succeed on its own.

00:19:42.530 --> 00:19:45.560
The session owner property
we already discussed.

00:19:45.770 --> 00:19:50.680
Again, that's the user that's currently
logged in on that login session.

00:19:51.190 --> 00:19:55.040
The shared property simply means whether
that credential can be used by other

00:19:55.040 --> 00:19:56.940
processes in the same login session.

00:19:56.940 --> 00:20:00.320
And the timeout, again, we already saw.

00:20:00.320 --> 00:20:03.870
The only detail here to notice
is that it is specified in

00:20:03.870 --> 00:20:06.200
seconds in the policy database.

00:20:06.200 --> 00:20:09.970
You can specify also a zero timeout,
which means the credential is

00:20:09.970 --> 00:20:12.880
essentially invalid pretty much
as soon as it's been created.

00:20:12.880 --> 00:20:16.120
And an infinite timeout is also possible.

00:20:16.320 --> 00:20:19.980
It's not technically infinite,
but it will probably be long

00:20:19.980 --> 00:20:21.780
enough for your purposes.

00:20:24.810 --> 00:20:28.760
The policy database is where all
the rights and rules currently

00:20:28.760 --> 00:20:33.180
available on the system are listed.

00:20:33.620 --> 00:20:37.120
It's not actually technically true
that it lists all possible rights.

00:20:37.430 --> 00:20:41.500
Applications can request
any right they like.

00:20:41.630 --> 00:20:44.290
If a right is not matched
in the policy database,

00:20:44.450 --> 00:20:49.110
the default rule will automatically
be applied to that right.

00:20:49.400 --> 00:20:51.870
The policy database is a flat file.

00:20:51.900 --> 00:20:54.300
It's ETSI authorization.

00:20:54.390 --> 00:20:56.300
It is currently plain text.

00:20:56.510 --> 00:21:01.440
You can edit it with your
favorite text editor and sudo,

00:21:01.440 --> 00:21:05.210
but we do not guarantee that
the format of that file will

00:21:05.240 --> 00:21:07.340
not change going forward.

00:21:07.340 --> 00:21:10.190
We've been kicking around the
idea for some time of changing

00:21:10.190 --> 00:21:11.490
the format of that file.

00:21:11.500 --> 00:21:15.180
Naturally, if we do,
we'll give plenty of notice.

00:21:18.620 --> 00:21:23.180
Now, as far as the system processes that
actually implement authorization,

00:21:23.180 --> 00:21:24.850
there are three of them.

00:21:24.850 --> 00:21:27.990
At the heart of
authorization is Security D,

00:21:27.990 --> 00:21:29.640
the security demon.

00:21:29.640 --> 00:21:33.680
Starts at startup, at boot time,
runs until your system

00:21:33.770 --> 00:21:37.600
is shut down again,
and Security D is where the actual

00:21:37.600 --> 00:21:40.620
authorization policy engine lives.

00:21:50.230 --> 00:21:53.430
SecurityD, however,
does not do user interfaces.

00:21:53.440 --> 00:21:55.840
It does not link against AppKit.

00:21:56.000 --> 00:21:59.000
It will never show dialogues,
at least not as long as the current

00:21:59.000 --> 00:22:01.140
maintainer is maintaining it.

00:22:01.370 --> 00:22:07.720
So if SecurityD, or more appropriately,
the policy engine within

00:22:07.720 --> 00:22:10.830
SecurityD determines that
user interface is necessary,

00:22:11.230 --> 00:22:15.620
SecurityD has to spin off
a security agent process to

00:22:15.620 --> 00:22:19.410
handle that user interface.

00:22:19.600 --> 00:22:23.760
Security Agent literally is
Security D's user interface agent

00:22:23.820 --> 00:22:26.390
that is its sole purpose in life.

00:22:26.680 --> 00:22:30.230
When it acquires
information from the user,

00:22:30.230 --> 00:22:34.050
it passes it back to Security D,
and Security D uses it

00:22:34.050 --> 00:22:35.480
for whatever purposes.

00:22:35.660 --> 00:22:38.430
In the case of authorization,
the policy engine takes in

00:22:38.870 --> 00:22:43.000
usually names and passwords and
crunches them to make sure that,

00:22:43.000 --> 00:22:47.080
in fact,
the names and passwords are correct.

00:22:48.240 --> 00:22:51.620
Now, there is one case also where
SecurityD needs to spin

00:22:51.620 --> 00:22:57.140
off another agent process,
and that is when it has to run,

00:22:57.140 --> 00:23:03.040
as part of authorization,
a plug-in mechanism.

00:23:03.230 --> 00:23:06.360
We decided a while ago that
running plug-ins within

00:23:06.490 --> 00:23:09.880
SecurityD was not a good idea,
and so we created the

00:23:09.880 --> 00:23:15.610
Authorization Host process,
which runs root running, that is to say,

00:23:15.620 --> 00:23:18.270
privileged plug-in mechanisms.

00:23:18.280 --> 00:23:21.920
That is Authorization
Host's sole role in life.

00:23:25.240 --> 00:23:31.510
So a typical request here starts off
with a client application making its

00:23:31.510 --> 00:23:34.310
authorization request to SecurityD.

00:23:34.840 --> 00:23:38.550
I'm not good enough with Keynote to
show a spinning arrow inside SecurityD,

00:23:38.560 --> 00:23:45.110
but that would basically be the policy
engine going over whatever rules apply to

00:23:45.110 --> 00:23:48.080
the right that the client is requesting.

00:23:48.110 --> 00:23:53.060
Now, let's assume for a moment that the
client is requesting a right that

00:23:53.180 --> 00:23:56.490
requires user interaction of some sort.

00:23:56.890 --> 00:24:00.480
Then SecurityD,
if a security agent process

00:24:00.480 --> 00:24:05.310
is not already running,
will start a security agent process.

00:24:06.320 --> 00:24:08.840
And the graphics people lied to
me that text was not supposed

00:24:08.840 --> 00:24:09.970
to be truncated like that.

00:24:10.100 --> 00:24:12.230
Sorry.

00:24:12.710 --> 00:24:18.510
So Security Agent process gets
launched and SecurityD makes its

00:24:18.550 --> 00:24:22.040
request to Security Agent to acquire
the appropriate or to display the

00:24:22.040 --> 00:24:26.050
appropriate user interface and
to acquire whatever information

00:24:26.050 --> 00:24:29.110
it deems necessary from the user.

00:24:29.540 --> 00:24:31.310
That information is
returned to SecurityD,

00:24:31.520 --> 00:24:35.230
policy engine crunches some more,
and determines that, oh, well,

00:24:35.290 --> 00:24:37.390
a route running mechanism
needs to be run.

00:24:37.400 --> 00:24:40.930
Again, if...

00:24:41.200 --> 00:24:44.240
An authorization host process
is not already running.

00:24:44.240 --> 00:24:45.500
One is spun off.

00:24:45.500 --> 00:24:50.100
SecurityD makes its request
to Authorization Host to

00:24:50.120 --> 00:24:52.780
run a particular mechanism.

00:24:52.780 --> 00:24:57.860
Authorization Host runs that mechanism,
sends its return to SecurityD.

00:24:57.860 --> 00:25:01.900
This process of calling into
Security Agent and Authorization

00:25:02.000 --> 00:25:06.420
Host from SecurityD and getting
back results can happen an arbitrary

00:25:06.420 --> 00:25:09.000
number of times for any given write.

00:25:10.300 --> 00:25:14.190
But eventually, SecurityD decides,
or the policy engine

00:25:14.190 --> 00:25:18.700
within SecurityD decides,
yes or no as far as do we grant

00:25:18.700 --> 00:25:22.680
or deny this requested write,
and a response is sent

00:25:22.680 --> 00:25:24.030
back to the client.

00:25:28.280 --> 00:25:37.540
So, ancillary information can be provided
by either the client or provided by the

00:25:37.540 --> 00:25:43.540
authorization subsystem itself in the
course of evaluating a set of rules.

00:25:43.540 --> 00:25:47.860
This ancillary information,
if it's provided by the client

00:25:47.990 --> 00:25:52.960
or provided pre-evaluation,
is called, or we call them hints.

00:25:53.650 --> 00:25:57.830
Now, in the APIs for authorization,
you'll see those as the

00:25:58.070 --> 00:26:02.240
authorization environment that
gets passed into the API calls.

00:26:02.240 --> 00:26:04.840
It's basically input to
assist authorization,

00:26:04.840 --> 00:26:11.220
and one common piece of input is the
administrator's name in a dialog.

00:26:11.220 --> 00:26:14.980
If the user happens to be logged
in as an administrator and an

00:26:15.190 --> 00:26:19.400
administrator's name and password
is required for a given rule,

00:26:19.400 --> 00:26:23.240
then the administrator's
name will be in dialog.

00:26:23.820 --> 00:26:26.690
the dialogue when it pops up.

00:26:27.730 --> 00:26:32.880
Now the one thing about hints is that
they are not preserved after evaluation.

00:26:33.020 --> 00:26:34.540
The assumption is they don't have to be.

00:26:34.750 --> 00:26:36.490
They were just

00:26:37.020 --> 00:26:38.940
Little crutches,
little bits of assistance

00:26:39.030 --> 00:26:41.960
to authorization,
not strictly necessary.

00:26:42.020 --> 00:26:44.990
Context, however,

00:26:45.610 --> 00:26:47.390
is necessary.

00:26:47.530 --> 00:26:51.590
Context consists of byproducts
of policy evaluation.

00:26:51.720 --> 00:26:54.950
Context may or may not be
available to the caller.

00:26:55.350 --> 00:26:59.060
There are certain things that you might
not want the caller to be able to see,

00:26:59.170 --> 00:27:02.330
for example, perhaps the user's password.

00:27:02.410 --> 00:27:07.500
It's worth noting that the authorization
subsystem helps to ensure that

00:27:08.180 --> 00:27:13.670
client processes never need to
actually see the user's password

00:27:13.860 --> 00:27:17.760
unless they actually need to do
something with that user's password.

00:27:17.890 --> 00:27:22.760
If all that the application needs
is for the user to authenticate,

00:27:22.960 --> 00:27:25.040
the application never
needs that password,

00:27:25.050 --> 00:27:30.960
and authorization ensures that the
application does not get the password.

00:27:31.810 --> 00:27:34.290
This ancillary information,
both hints and context,

00:27:34.450 --> 00:27:37.520
is all managed by the Policy Engine.

00:27:39.140 --> 00:27:42.940
So how do you go about extending
authorization's functionality?

00:27:43.170 --> 00:27:47.230
You write a plug-in and
a set of mechanisms.

00:27:47.360 --> 00:27:51.730
Now these tend to be very
application specific.

00:27:52.430 --> 00:27:57.250
Now, all a plug-in is is a
bundle of mechanisms,

00:27:57.330 --> 00:27:59.950
quite literally a CFBundle.

00:28:00.590 --> 00:28:03.650
Application-specific
mechanisms can be installed in

00:28:03.650 --> 00:28:08.940
/library/security/securityagent plug-ins.

00:28:09.030 --> 00:28:14.190
You do have to be an admin
to write into that directory.

00:28:16.700 --> 00:28:21.240
The naming convention is plugin.bundle,
where plugin is whatever

00:28:21.240 --> 00:28:22.490
plugin name you decide.

00:28:22.550 --> 00:28:26.400
We saw an example of one earlier,
the restart authorization bundle.

00:28:26.510 --> 00:28:29.470
That's a system bundle that lives
in a slightly different location,

00:28:29.470 --> 00:28:34.000
but it gives you the flavor of
application-specific bundles.

00:28:35.040 --> 00:28:40.440
Now, in ETSI authorization,
in order to use a bundle,

00:28:40.440 --> 00:28:45.150
in order to use a plug-in
and a set of mechanisms,

00:28:45.280 --> 00:28:50.450
you have to specify as part
of the evaluate mechanisms

00:28:50.450 --> 00:28:53.620
class the name of your plug-in,

00:28:54.360 --> 00:28:57.000
along with the mechanism name.

00:28:57.010 --> 00:29:01.080
Now, if the mechanism name has a
comma privileged following it,

00:29:01.090 --> 00:29:04.880
that means that that mechanism
is intended to be executed within

00:29:04.890 --> 00:29:06.920
the context of authorization host.

00:29:06.920 --> 00:29:10.680
That is to say,
it's going to run as root.

00:29:12.030 --> 00:29:14.010
Now, there is one reserved plug-in name.

00:29:14.240 --> 00:29:17.210
Please do not use the
plug-in name built in.

00:29:18.220 --> 00:29:22.260
That is, naturally enough,
what we use internally to Mac OS X.

00:29:22.260 --> 00:29:26.000
You may get some interesting
misbehavior if you decide to try to

00:29:26.000 --> 00:29:27.980
use that for your own mechanisms.

00:29:31.080 --> 00:29:34.490
Now, the plug-in lifecycle.

00:29:34.640 --> 00:29:42.370
Plug-ins essentially are the way that
mechanisms talk to the policy engine.

00:29:42.520 --> 00:29:44.840
Plug-ins manage mechanisms.

00:29:44.910 --> 00:29:49.190
So plug-ins, once they're instantiated,
their main role in life

00:29:49.500 --> 00:29:54.100
is to stage mechanisms,
to control the mechanism lifecycle.

00:29:54.670 --> 00:29:58.010
Mechanisms themselves have
four major stages in life:

00:29:58.190 --> 00:30:03.810
creation, invocation, deactivation,
and destruction.

00:30:05.240 --> 00:30:08.370
Now,
there are a few places where mechanisms

00:30:08.650 --> 00:30:12.490
interact directly with the policy engine.

00:30:12.760 --> 00:30:18.010
One of them is the getting and
setting of hints and context.

00:30:18.340 --> 00:30:22.080
Another is actually setting
the evaluation result.

00:30:22.300 --> 00:30:26.200
So when a mechanism runs,
it's got to say whether it allowed or

00:30:26.200 --> 00:30:32.400
denied or whether the user canceled,
potentially.

00:30:33.850 --> 00:30:36.620
Now,
mechanisms can also interrupt evaluation.

00:30:36.620 --> 00:30:40.930
This is something that
bears some attention.

00:30:40.940 --> 00:30:47.920
Mechanism interruption can happen if
something about the system changes,

00:30:47.920 --> 00:30:53.380
such that you might want to restart
this entire authorization evaluation.

00:30:53.380 --> 00:30:58.080
Now, currently in Mac OS X,
there's one place where I know

00:30:58.080 --> 00:31:02.660
of that that specifically occurs,
and that is if your system is

00:31:02.660 --> 00:31:06.950
configured to permit smart card login,

00:31:07.180 --> 00:31:12.660
and somebody actually plugs
a smart card into the system.

00:31:13.170 --> 00:31:18.610
Now, if the system is sitting at the
login prompt or the login panel,

00:31:18.610 --> 00:31:21.740
then suddenly it doesn't make
any sense for the user to type

00:31:21.740 --> 00:31:23.980
in a name and a password anymore.

00:31:24.050 --> 00:31:28.120
If the smart card has been plugged in,
then what the user needs

00:31:28.120 --> 00:31:30.180
to do is to type in a PIN.

00:31:30.670 --> 00:31:34.250
Now,
we've decided that we need to display a

00:31:34.250 --> 00:31:36.320
different user interface in that case.

00:31:36.320 --> 00:31:40.950
So when somebody plugs a
smart card into such a system,

00:31:40.950 --> 00:31:42.870
the user interface changes.

00:31:42.880 --> 00:31:47.890
That actually is a side effect of an
interrupt being sent to the entire

00:31:48.260 --> 00:31:55.290
mechanism chain for login and evaluation
of that mechanism chain restarting,

00:31:56.370 --> 00:32:01.160
only this time there's a little bit of
information in the context that says,

00:32:01.180 --> 00:32:03.010
hey, there's a smart card present.

00:32:03.060 --> 00:32:08.000
Therefore,
different user interface is displayed.

00:32:10.700 --> 00:32:17.250
So that's one case where I know where
interrupt evaluation is necessary.

00:32:17.650 --> 00:32:21.090
And finally,
because mechanisms can be interrupted,

00:32:22.240 --> 00:32:25.190
They need to confirm that
they have actually deactivated

00:32:25.290 --> 00:32:29.710
themselves if they happen to be
running when an interrupt occurs.

00:32:29.950 --> 00:32:32.710
And that way,
the policy engine knows that it's

00:32:32.710 --> 00:32:36.510
safe to go and restart the evaluation.

00:32:38.630 --> 00:32:42.830
Now, one particular plug-in that might
be of interest to you is one called

00:32:42.830 --> 00:32:44.820
the SF Authorization Plug-in View.

00:32:44.820 --> 00:32:49.750
It's essentially our attempt
to provide developers with a

00:32:49.750 --> 00:32:52.920
base for custom user interface.

00:32:52.920 --> 00:32:57.400
It adds a special view,
an application-specific view,

00:32:57.400 --> 00:33:00.050
to authentication dialogues.

00:33:00.120 --> 00:33:06.180
It's in Objective-C, which is, of course,
how we expect people to be

00:33:06.180 --> 00:33:08.440
writing user interfaces on OS X.

00:33:08.600 --> 00:33:09.680
Thank you.

00:33:10.450 --> 00:33:12.500
I'm not going to say a
whole lot about this,

00:33:12.500 --> 00:33:15.950
but I will refer you to the
proper header file and some

00:33:15.960 --> 00:33:18.650
documentation a little bit later on.

00:33:19.730 --> 00:33:25.970
Now I'm going to go over an actual
example of using the authorization APIs.

00:33:26.150 --> 00:33:31.580
Better Authorization Sample is code that
is available up on developer.apple.com.

00:33:31.710 --> 00:33:36.160
It's an example of using
Cocoa and authorization together.

00:33:36.370 --> 00:33:40.330
It is properly factored code.

00:33:40.400 --> 00:33:55.800
[Transcript missing]

00:33:56.010 --> 00:33:58.880
And from my standpoint,
perhaps the most important thing about

00:33:58.880 --> 00:34:04.210
Better Authorization Sample is that it
is very well commented and it explains

00:34:04.210 --> 00:34:06.740
why the code looks the way it does.

00:34:09.780 --> 00:34:14.170
So, Better Authorization Sample
factors the code into two pieces,

00:34:14.390 --> 00:34:17.840
the GUI front end,
that is to say the application,

00:34:17.850 --> 00:34:23.010
and a helper tool that runs privileged,
it runs as root.

00:34:23.310 --> 00:34:27.850
Now the way it typically operates,
the application pre-authorizes.

00:34:28.040 --> 00:34:34.970
That is to say, it acquires rights on
the helper tool's behalf.

00:34:35.480 --> 00:34:38.180
User interaction, therefore,
happens within the context

00:34:38.590 --> 00:34:40.170
of the application.

00:34:40.430 --> 00:34:46.980
That has certain nice consequences
for the user interface in that we

00:34:46.980 --> 00:34:51.740
can gather a lot more information
about the actual end user,

00:34:51.790 --> 00:34:58.220
like the username and whether or not that
user is an admin and certain preferences,

00:34:58.220 --> 00:35:01.360
than we could if the
authorization were to happen in

00:35:01.360 --> 00:35:05.280
the context of the helper tool,
which will be running as root.

00:35:06.690 --> 00:35:11.850
Now, the application,
if pre-authorization is successful,

00:35:11.870 --> 00:35:17.090
forwards the authorization reference
that it gets to the helper tool.

00:35:17.120 --> 00:35:21.140
And then the tool verifies that the
authorization was actually granted,

00:35:21.140 --> 00:35:24.260
and then and only then does
it do its privileged work.

00:35:24.330 --> 00:35:27.260
This is a general model for
how to use authorization.

00:35:30.090 --> 00:35:33.530
So this is the window that
you'll see when you first start

00:35:33.530 --> 00:35:34.960
Better Authorization Sample.

00:35:34.960 --> 00:35:38.500
There are three actions
that are defined there.

00:35:38.500 --> 00:35:42.740
One of them is just getting
the version of the application.

00:35:42.740 --> 00:35:48.000
One of them is getting the real and
effective UIDs for the helper tool.

00:35:48.000 --> 00:35:52.380
And then the last button there
gets a set of low-numbered ports.

00:35:53.320 --> 00:35:57.260
And on OS X, as on other Unix systems,
low-numbered ports,

00:35:57.330 --> 00:36:01.810
that is to say network ports below 1024,
can only be given to

00:36:02.220 --> 00:36:04.120
root-running processes.

00:36:07.730 --> 00:36:11.550
So the actual authorization-gated
operations in Better Authorization

00:36:11.640 --> 00:36:15.620
Sample are getting the real and
effective UIDs of the helper tool,

00:36:15.620 --> 00:36:19.470
getting those loaner reports,
and an invisible one,

00:36:19.470 --> 00:36:22.870
installing the helper
tool in the first place.

00:36:24.950 --> 00:36:28.240
So, as an example,
let's see what happens when

00:36:28.240 --> 00:36:30.850
the application needs to
get some low-numbered ports.

00:36:30.940 --> 00:36:37.130
Now, the write it is requesting here is
com.example.betterauthorizationsample.low

00:36:37.400 --> 00:36:38.420
numberedports.

00:36:38.420 --> 00:36:44.080
And that uses the default rule,
which to refresh your memory

00:36:44.080 --> 00:36:48.240
requires that you authenticate
as a member of the admin group.

00:36:48.680 --> 00:36:52.180
And the credential that gets generated
is subject to a five-minute timeout,

00:36:52.410 --> 00:36:55.050
and that credential can be
shared by any other process

00:36:55.060 --> 00:36:56.780
running in the same session.

00:36:59.050 --> 00:37:04.780
So the first step that the application
takes in order to get that right

00:37:05.110 --> 00:37:07.890
is to get an authorization ref.

00:37:08.010 --> 00:37:13.230
An authorization ref is your handle
into the authorization subsystem.

00:37:13.320 --> 00:37:18.160
And you get that handle with
the authorization create

00:37:18.320 --> 00:37:20.010
Call.

00:37:20.030 --> 00:37:23.220
Now, the first two arguments to
authorization create are both

00:37:23.220 --> 00:37:27.710
null because the first argument is
the write that you would request.

00:37:27.720 --> 00:37:29.560
Well, in this case,
we don't actually need

00:37:29.560 --> 00:37:30.480
to request a write.

00:37:30.480 --> 00:37:33.010
We're just interested
in getting a handle.

00:37:33.160 --> 00:37:36.280
The second argument would be any
hints that you want to pass in.

00:37:36.490 --> 00:37:38.400
In this case,
we're not passing any hints,

00:37:38.410 --> 00:37:40.580
so that again is null.

00:37:41.510 --> 00:37:45.460
The flags argument, which is the third,
allows you to customize the

00:37:45.460 --> 00:37:49.060
behavior of the authorization
subsystem in some regards.

00:37:49.060 --> 00:37:51.290
And in this case,
we're not actually asking

00:37:51.290 --> 00:37:53.980
to customize any of that,
so we set it to default.

00:37:53.980 --> 00:38:00.230
And the last argument is the address
of an authorization ref object.

00:38:02.340 --> 00:38:05.420
Now,
in spite of the fact that the variable

00:38:05.680 --> 00:38:09.720
that the Better Authorization sample
writers decided to use for the return

00:38:09.720 --> 00:38:15.790
of Authorization Create is called junk,
it's actually worth paying attention to.

00:38:15.800 --> 00:38:24.920
Any call that returns any error
code needs to be paid attention to.

00:38:24.920 --> 00:38:28.880
And so don't let the fact that it's
called junk in this case mislead you.

00:38:29.370 --> 00:38:33.260
Do pay attention,
do check that that value is no error,

00:38:33.350 --> 00:38:35.930
because if it's not no error,
then something went wrong and you

00:38:35.930 --> 00:38:37.320
shouldn't proceed any further.

00:38:41.640 --> 00:38:45.500
Now,
actually asking for the right in question

00:38:45.720 --> 00:38:51.500
requires that you wrap up the name of
the right inside a special structure

00:38:51.500 --> 00:38:55.770
called an authorization rights structure,
and then that you call the

00:38:55.840 --> 00:38:59.320
authorization copyrights call.

00:38:59.430 --> 00:39:03.940
Now, in this case,
you'll notice that we're customizing

00:39:04.020 --> 00:39:06.200
the flags to some degree.

00:39:06.330 --> 00:39:10.540
We're asking to extend rights,
which means that we actually

00:39:10.540 --> 00:39:13.960
want the policy subsystem
to generate a credential.

00:39:13.960 --> 00:39:15.520
We don't just want it to
go through the motions.

00:39:15.520 --> 00:39:19.010
If you don't specify extend rights,
then the policy engine will

00:39:19.010 --> 00:39:22.980
simply go through the motions,
make sure that, in fact, you have the,

00:39:23.240 --> 00:39:26.210
that you can get that right,
but it won't actually generate

00:39:26.210 --> 00:39:30.130
a credential that says,
yes, he has it, that application has it.

00:39:31.310 --> 00:39:33.960
Also,
authorization flag interaction allowed,

00:39:33.960 --> 00:39:36.810
very important,
because the default is to assume

00:39:36.810 --> 00:39:38.980
that interaction is not allowed.

00:39:40.920 --> 00:39:45.010
And finally,
pre-authorize signifies that we

00:39:45.010 --> 00:39:48.820
actually do want to generate a
credential that somebody else is

00:39:48.870 --> 00:39:50.730
going to use further down the line.

00:39:50.740 --> 00:39:55.630
There are some edge cases where
you can request extend rights and

00:39:55.630 --> 00:40:01.400
pre-authorize and it won't succeed,
but those are edge cases typically where,

00:40:01.400 --> 00:40:04.860
for example,
the timeout of the credential is zero.

00:40:05.120 --> 00:40:09.240
It's not going to help you to try and
pre-authorize something with a credential

00:40:09.240 --> 00:40:13.520
whose timeout is zero because next time
you ask for authorization somewhere else,

00:40:13.520 --> 00:40:18.530
that authorization is not going to
succeed or it's going to require

00:40:18.620 --> 00:40:22.390
that the user go through the
entire policy evaluation again.

00:40:24.620 --> 00:40:27.420
So this is the dialogue that
you actually get when you

00:40:27.420 --> 00:40:29.680
call authorization copyrights.

00:40:29.810 --> 00:40:33.640
Now, I don't know if you can
actually read this out there,

00:40:33.640 --> 00:40:36.350
but the first sentence
in the dialogue says,

00:40:36.590 --> 00:40:41.730
"You must be authorized to open
low-numbered TCP ports." That's an

00:40:41.730 --> 00:40:44.180
example of a customizable prompt.

00:40:44.460 --> 00:40:47.750
That is something that was provided
by the Better Authorization

00:40:47.910 --> 00:40:49.840
Sample application itself.

00:40:49.990 --> 00:40:55.430
It helps to put the reason for
the dialogue in some context.

00:40:55.670 --> 00:40:59.900
Now, the second sentence, however,
"Type in administrator's name

00:40:59.900 --> 00:41:05.240
and password to allow application
name to make changes," that part

00:41:05.240 --> 00:41:07.060
is cooked into the dialogue.

00:41:07.210 --> 00:41:10.220
That is invariant,
and that helps to promote some

00:41:10.220 --> 00:41:14.220
consistency of UI within the system.

00:41:15.340 --> 00:41:18.900
One other thing to notice is
that the name field is empty.

00:41:19.050 --> 00:41:25.340
Had I been logged in as an admin when
I took the snapshot of this dialogue,

00:41:25.450 --> 00:41:30.430
the name field would have been
filled in with my admin username.

00:41:32.640 --> 00:41:36.790
So that's just something to notice
in case people ask you about that.

00:41:36.870 --> 00:41:41.410
If they don't see a name here,
it's because they weren't

00:41:41.420 --> 00:41:43.310
logged in as an admin.

00:41:44.470 --> 00:41:48.750
Now, assuming that the user typed in an
administrator's name and password,

00:41:48.970 --> 00:41:51.020
and that name and password
was actually valid,

00:41:51.020 --> 00:41:55.120
the authorization handle needs
to be sent off to the tool.

00:41:55.120 --> 00:41:57.520
The tool is a completely
separate process.

00:41:57.520 --> 00:42:01.260
Therefore,
simply sending across the authorization

00:42:01.260 --> 00:42:06.480
ref as it stands will not work because
the authorization ref is something,

00:42:06.480 --> 00:42:10.940
it's a value that's only valid within
your application's address space.

00:42:11.470 --> 00:42:16.620
So, what we want to do is package up that
handle in some sort of external form

00:42:16.990 --> 00:42:22.730
that the other process can absorb and
turn back into an authorization handle

00:42:22.780 --> 00:42:24.980
that's valid within its address space.

00:42:24.980 --> 00:42:29.190
So, what Better Authorization Sample
does first is it launches the

00:42:29.510 --> 00:42:33.770
tool and sets up the inter-process
communication mechanism that it's

00:42:33.890 --> 00:42:36.280
going to use to talk to that tool.

00:42:36.280 --> 00:42:39.300
That's outside of authorization per se.

00:42:41.760 --> 00:42:44.610
However,
Authorization Make External Form is

00:42:44.610 --> 00:42:48.900
what Better Authorization Sample uses
to turn the authorization handle,

00:42:48.900 --> 00:42:51.610
the authorization ref,
into some form that can

00:42:51.740 --> 00:42:53.730
be sent between processes.

00:42:53.740 --> 00:42:58.280
In this case, we call it an Authorization
External Form.

00:42:58.280 --> 00:43:03.490
And there should be a space between
Authorization External Form and XedAuth.

00:43:03.630 --> 00:43:06.100
XedAuth is the name of the variable.

00:43:06.100 --> 00:43:06.900
Sorry about that.

00:43:08.030 --> 00:43:13.910
And Better Authorization Sample finally
sends XedAuth to the tool via the

00:43:13.990 --> 00:43:16.090
IPC channel that it already set up.

00:43:19.280 --> 00:43:23.460
The tool itself goes and internalizes
the authorization ref that it got,

00:43:23.550 --> 00:43:26.280
the externalized form of the
authorization ref that it got,

00:43:26.400 --> 00:43:30.430
using the authorization create
from external form call.

00:43:30.550 --> 00:43:32.700
Pretty straightforward there.

00:43:33.880 --> 00:43:40.760
The tool then verifies that the
application actually did authorize

00:43:40.760 --> 00:43:44.090
for the right that was required.

00:43:44.100 --> 00:43:48.680
So the tool actually goes and calls
authorization copyrights again.

00:43:48.680 --> 00:43:51.530
It will allow user interaction.

00:43:51.560 --> 00:43:57.300
So if for any reason the right is no
longer granted or was never granted,

00:43:57.890 --> 00:44:01.630
the tool itself will trigger the
user interface necessary in order

00:44:02.030 --> 00:44:03.840
for that right to be authorized.

00:44:05.950 --> 00:44:10.840
And finally, assuming authorization was
granted one way or another,

00:44:10.840 --> 00:44:15.690
then the tool actually goes and gets
the loan number ports in question.

00:44:16.620 --> 00:44:19.470
You may not be able to
read the output from there,

00:44:19.550 --> 00:44:22.230
but basically it got
three different ports,

00:44:22.230 --> 00:44:25.390
ports 130, 131, and 132.

00:44:27.290 --> 00:44:30.820
Now, before it could actually get
any ports or do anything else,

00:44:30.830 --> 00:44:34.160
Better Authorization Sample
had to install the privileged

00:44:34.160 --> 00:44:36.140
helper tool in the first place.

00:44:36.140 --> 00:44:39.880
Now, implicit in doing so,
it asked for the

00:44:39.880 --> 00:44:43.430
system.privilege.admin right.

00:44:43.460 --> 00:44:46.420
That's a special right
that's baked into the system.

00:44:46.420 --> 00:44:50.100
The rule associated with it
is if you're running as root,

00:44:50.190 --> 00:44:51.360
it's all good.

00:44:51.390 --> 00:44:52.860
You're just authorized.

00:44:54.280 --> 00:44:59.320
Otherwise, you have to authenticate
as an administrator.

00:44:59.640 --> 00:45:02.610
The credential that gets
generated as a result is not

00:45:02.810 --> 00:45:08.330
shared with any other process,
and that credential times

00:45:08.600 --> 00:45:10.150
out in five minutes.

00:45:10.800 --> 00:45:16.710
So again, in order to install the tool,
in order to actually get

00:45:16.710 --> 00:45:20.360
system.privilege.admin,
you first have to call authorization

00:45:20.360 --> 00:45:22.270
create to get yourself a handle.

00:45:22.600 --> 00:45:26.570
And then Better Authorization
Sample calls Authorization

00:45:26.890 --> 00:45:28.640
Execute with Privileges.

00:45:29.090 --> 00:45:35.360
Authorization Execute with Privileges
is a fairly dangerous call because

00:45:35.360 --> 00:45:39.640
what it ends up doing is it
requests system.privilege.admin

00:45:39.640 --> 00:45:41.960
on behalf of the caller.

00:45:41.960 --> 00:45:47.160
And if the caller succeeds
in authorizing that right,

00:45:47.160 --> 00:45:53.920
Authorization Execute with
Privileges will execute a tool of

00:45:53.920 --> 00:46:00.990
the caller's choosing as root via
a setUID root tool of its own.

00:46:02.450 --> 00:46:11.240
Now, you can specify a communications
channel that you can use between

00:46:11.670 --> 00:46:18.390
the tool that gets executed as root
and the frontmost client process.

00:46:19.840 --> 00:46:23.730
Now, the reason authorization
execute with privileges-- oh,

00:46:23.820 --> 00:46:24.310
sorry.

00:46:24.360 --> 00:46:26.700
I guess we're going to see the UI first.

00:46:26.700 --> 00:46:30.070
So this is what you see from
Better Authorization Sample when

00:46:30.070 --> 00:46:32.690
it first needs to install the tool.

00:46:33.700 --> 00:46:37.640
This, again,
is the dialog that you get in order

00:46:37.640 --> 00:46:40.060
to type an admin's name and password.

00:46:40.060 --> 00:46:45.440
Now, for this dialog, we do not allow
applications to customize.

00:46:45.440 --> 00:46:49.970
So here you only see that you
have to type an administrator's

00:46:50.020 --> 00:46:53.960
name and password in order for
the application to make changes.

00:46:53.980 --> 00:46:57.910
Now, what I've done is I've opened up
the disclosure triangle here to show

00:46:58.210 --> 00:47:02.900
some of the details because this is
something that can help you verify that,

00:47:02.900 --> 00:47:05.830
for example,
the authorization dialog you're

00:47:05.840 --> 00:47:09.250
getting is for your application
and not for some other application.

00:47:09.260 --> 00:47:12.880
The requested right here
is system.privilege.admin,

00:47:12.880 --> 00:47:16.320
and the actual application
requesting that right is,

00:47:16.320 --> 00:47:20.570
well, it's truncated,
but it says better authorization sample,

00:47:20.610 --> 00:47:21.940
sampleapp.app.

00:47:21.940 --> 00:47:27.660
And you can actually get the
full path to the application if

00:47:27.660 --> 00:47:29.130
you click on the application.

00:47:29.340 --> 00:47:33.110
on that name, which is actually a button.

00:47:35.580 --> 00:47:42.820
So, Authorization Execute with
Privileges runs a set UID root tool.

00:47:42.820 --> 00:47:47.980
It does attempt to sanitize the
environment to that tool to some degree.

00:47:47.980 --> 00:47:54.390
However, it's kind of dangerous because
there are no restrictions on the

00:47:54.390 --> 00:47:59.340
tool that can be executed via
Authorization Execute with Privileges.

00:47:59.340 --> 00:48:05.170
Now, this was an appropriate solution at
the time that Authorization Execute

00:48:05.300 --> 00:48:08.460
with Privileges was introduced to OS X.

00:48:08.460 --> 00:48:12.180
However, that was a little while ago,
and in the meantime,

00:48:12.290 --> 00:48:15.610
we've gotten a better
solution added to the system.

00:48:15.620 --> 00:48:17.540
It's called LaunchD.

00:48:17.540 --> 00:48:23.180
LaunchD is how most processes are
launched on the system nowadays.

00:48:23.180 --> 00:48:29.250
I strongly encourage you to look into
using LaunchD to do this sort of thing.

00:48:29.340 --> 00:48:32.620
Rather than Authorization
Execute with Privileges,

00:48:32.620 --> 00:48:36.340
now you're expecting me to explain
how you go about doing this,

00:48:36.340 --> 00:48:41.340
and I'm going to tell you that that
requires an entirely different session.

00:48:41.340 --> 00:48:46.340
Now, I don't know the schedule
for WWDC this year,

00:48:46.340 --> 00:48:49.340
so I'm not sure whether that
session has already occurred,

00:48:49.340 --> 00:48:50.260
unfortunately.

00:48:50.370 --> 00:48:52.320
But look it up.

00:48:52.370 --> 00:48:57.240
I'm sure that you can find some
documentation about that session.

00:48:57.280 --> 00:48:59.280
There's certainly a lot of documentation.

00:48:59.280 --> 00:49:01.340
There's certainly a lot of
documentation about LaunchD,

00:49:01.400 --> 00:49:05.270
and I'll give you a few pointers at the
end of this talk to more information.

00:49:08.060 --> 00:49:15.320
Now, you can request any arbitrary
string and call it a write.

00:49:15.320 --> 00:49:20.060
You can request com.fubar.fu,
and the system will

00:49:20.060 --> 00:49:22.220
respond intelligently.

00:49:22.220 --> 00:49:28.380
It will, in all likelihood,
use the default rule to cover that write,

00:49:28.500 --> 00:49:32.720
because com.fubar.fu certainly doesn't
ship with OS X's ETSI authorization,

00:49:32.720 --> 00:49:35.110
and nobody's likely to have
added it to the system.

00:49:36.010 --> 00:49:38.700
However,
if you want your write to be subject

00:49:38.700 --> 00:49:43.000
to your specific set of mechanisms,
for instance,

00:49:43.010 --> 00:49:48.740
then you will need to use these calls,
authorization write set and

00:49:48.740 --> 00:49:50.730
potentially authorization write get.

00:49:52.620 --> 00:49:56.760
Authorization Right Get, in this case,
is being called by Authorization

00:49:56.760 --> 00:50:01.120
Sample to see whether or not the right
name already exists in the system.

00:50:01.140 --> 00:50:06.780
If it does, Authorization Right Get will
return a CFDictionary,

00:50:06.780 --> 00:50:13.320
that's the second argument here,
that contains the properties associated,

00:50:13.320 --> 00:50:16.680
that is to say the rules
associated with that right.

00:50:17.260 --> 00:50:22.960
Now, if Authorization Right Get returns
Authorization Denied,

00:50:22.960 --> 00:50:26.100
that indicates the right
doesn't exist in the system.

00:50:26.120 --> 00:50:32.560
So Better Authorization Sample then goes
ahead and calls Authorization Right Set,

00:50:32.560 --> 00:50:35.120
specifying the name of the right.

00:50:35.440 --> 00:50:40.190
The rule, if applicable.

00:50:40.340 --> 00:50:44.200
The description,
which is a right description,

00:50:44.350 --> 00:50:46.770
and a bundle for localizations.

00:50:47.110 --> 00:50:49.680
Those two really are for localizations.

00:50:49.800 --> 00:50:55.140
Those are definite courtesies that
we encourage you to make for users,

00:50:55.150 --> 00:51:00.160
especially if you're going to be
shipping your application overseas.

00:51:00.840 --> 00:51:04.000
And then also a description
string table name.

00:51:04.190 --> 00:51:12.790
That's for essentially a bunch of strings
that are included in your plug-in.

00:51:17.070 --> 00:51:20.420
Now finally, any application,
for that matter any tool,

00:51:20.420 --> 00:51:24.520
that gets an authorization handle
needs to dispose of it properly because

00:51:24.990 --> 00:51:30.090
otherwise you may find that authorization
state lives on in the credentials cache

00:51:30.190 --> 00:51:32.860
where you didn't really want it to live.

00:51:33.530 --> 00:51:39.180
Now finally, any application,
for that matter any tool,

00:51:39.180 --> 00:51:45.960
that gets an authorization handle
needs to dispose of it properly because

00:51:46.440 --> 00:51:53.410
otherwise you may find that authorization
state lives on in the credentials cache

00:51:53.960 --> 00:51:57.700
where you didn't really want it to live.

00:52:00.440 --> 00:52:03.590
The APIs generally live in
one of these header files.

00:52:03.650 --> 00:52:06.050
Authorization.h is the main one.

00:52:06.160 --> 00:52:11.640
Authorization.db.h is where APIs to
manipulate the policy database,

00:52:11.640 --> 00:52:14.670
like Authorization write get
and Authorization write set,

00:52:14.870 --> 00:52:15.110
live.

00:52:15.120 --> 00:52:20.880
Authorization.plugin.h is where we
define the APIs and the structures

00:52:20.880 --> 00:52:24.340
associated with plug-ins and mechanisms.

00:52:26.700 --> 00:52:29.860
And then the
SF Authorization Plugin View,

00:52:29.860 --> 00:52:33.800
that base class that you can
use if you want to design your

00:52:33.870 --> 00:52:38.920
custom UI for your application,
the APIs and the structures for that

00:52:38.920 --> 00:52:47.330
are in the Security Interface Framework
in SF Authorization Plugin View.h.

00:52:48.260 --> 00:52:52.000
For more information,
sample code for better

00:52:52.020 --> 00:52:55.950
authorization sample in particular
is available at this URL,

00:52:55.950 --> 00:53:00.870
developer.apple.com/samplecode/better-
authorization-sample.

00:53:01.470 --> 00:53:07.140
There are a couple of sample
authorization plug-ins that you can use.

00:53:07.230 --> 00:53:11.980
Null auth plug-in is a very simple
example of how to use or how to

00:53:11.990 --> 00:53:14.420
write an authorization plug-in.

00:53:14.570 --> 00:53:19.160
Name and password is an example
of a plug-in that uses the

00:53:19.260 --> 00:53:22.730
SF authorization plug-in view.

00:53:24.960 --> 00:53:27.980
There is an excellent document
called Performing Privileged

00:53:27.990 --> 00:53:30.300
Operations with Authorization Services.

00:53:30.300 --> 00:53:32.780
It's also available on
developer.apple.com.

00:53:32.780 --> 00:53:39.010
And there is a tech note specifically
for running daemons and agents via

00:53:39.010 --> 00:53:44.360
LaunchD and via other mechanisms as well,
but we encourage you to use LaunchD.

00:53:44.360 --> 00:53:47.900
And that tech note is
available at that URL,

00:53:47.900 --> 00:53:51.280
which I have not memorized.

00:53:51.280 --> 00:53:53.010
So you can take a look at the slides.

00:53:54.370 --> 00:54:00.030
Okay, so authorization helps you to
reduce the amount of effort you

00:54:00.530 --> 00:54:08.120
have to put in in order to take
advantage of policy on OS X.

00:54:08.370 --> 00:54:13.800
It promotes a consistent user experience
that is nevertheless customizable.

00:54:14.100 --> 00:54:18.180
And it encourages you to factor your
code so that you have much less code

00:54:18.180 --> 00:54:23.580
running as root and therefore you have,
you open a much smaller window,

00:54:23.600 --> 00:54:26.270
I should say,
to any bad guys that want to

00:54:26.270 --> 00:54:29.330
exploit root running code on the
system to subvert the system.