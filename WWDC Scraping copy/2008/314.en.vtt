WEBVTT

00:00:20.500 --> 00:00:22.160
- Hello, everyone.

00:00:22.310 --> 00:00:30.740
Good morning and welcome to the
Java and WebObjects Overview session.

00:00:30.740 --> 00:00:38.930
My name is Francois Jouaux and I am
the system tools manager at Apple,

00:00:39.260 --> 00:00:41.810
which includes the
Java and WebObjects teams.

00:00:41.810 --> 00:00:41.810
I think it would be better
if I use my clicker.

00:00:47.900 --> 00:00:52.490
This session is about Java cross-platform
development on Mac OS X.

00:00:52.610 --> 00:00:56.480
Whether you are a new or
seasoned Java developer on

00:00:56.480 --> 00:00:59.440
a Mac Pro or a MacBook Pro,

00:00:59.640 --> 00:01:04.780
Whether you're targeting
Java desktop applications or

00:01:04.780 --> 00:01:08.420
heavy-duty server solutions,
this session is for you.

00:01:08.440 --> 00:01:12.360
This is not a session
about Java on the iPhone.

00:01:16.300 --> 00:01:20.480
Although we believe that there
is an opportunity for WebObjects

00:01:20.480 --> 00:01:27.780
application servers as application
servers for iPhone-based,

00:01:27.780 --> 00:01:31.270
whether native or web applications.

00:01:34.600 --> 00:01:36.380
So what's new about Java?

00:01:36.420 --> 00:01:40.440
A month ago, we attended Java 1,
and it really looks like Mac laptops

00:01:40.550 --> 00:01:45.940
have become the development platform,
the Java development platform of choice.

00:01:46.010 --> 00:01:50.880
They were everywhere,
in the audience more than ever.

00:01:51.310 --> 00:01:55.360
On stage, they were running their
presentation on Macs,

00:01:55.380 --> 00:02:01.110
but also all the coolest demos in
the biggest keynotes run on Macs.

00:02:01.590 --> 00:02:04.440
even the latest JavaFX demos.

00:02:04.470 --> 00:02:08.090
The reason is backstage more
and more Sun engineers are using

00:02:08.810 --> 00:02:13.240
Macs as their Java development
platform of choice as well.

00:02:13.280 --> 00:02:19.480
This is really a tribute to the quality
of the Java implementation on Mac OS X.

00:02:20.700 --> 00:02:24.060
And this slide is also here to
remind you to download the latest

00:02:24.060 --> 00:02:25.680
Java 6 on your MacBook Air.

00:02:25.850 --> 00:02:30.170
It will not only keep levitating,
but it will also fly.

00:02:34.970 --> 00:02:37.820
Combining Java and WebObjects,
we believe,

00:02:37.910 --> 00:02:43.600
gives you the strongest enterprise
development and deployment platform.

00:02:44.970 --> 00:02:48.900
So WebObjects community
is alive and strong.

00:02:48.920 --> 00:02:52.630
Over last weekend,
we attended a pre-WWDC WebObjects

00:02:52.730 --> 00:02:56.000
conference that was impressive
by the number of attendees,

00:02:56.040 --> 00:03:00.010
50% more than last year,
and impressive by the quality and

00:03:00.010 --> 00:03:02.880
complexity of the solutions presented.

00:03:03.450 --> 00:03:06.760
It has been true for the last 10 years.

00:03:06.810 --> 00:03:09.570
Every year,
web designers and standard committees

00:03:10.060 --> 00:03:13.580
throw at us new web technologies,
and every year,

00:03:13.580 --> 00:03:16.730
WebObjects adapts to them.

00:03:25.800 --> 00:03:31.810
With the latest multi-core Macs combined

00:03:32.680 --> 00:03:38.590
With the just announced
Snow Leopard 64-bit OS,

00:03:38.640 --> 00:03:44.090
we believe that you have at
your fingertip an incredible,

00:03:44.090 --> 00:03:46.760
immense amount of computing power.

00:03:46.870 --> 00:03:50.480
Java 64-bit has been shipping
for more than six months.

00:03:50.580 --> 00:03:56.400
And with Java and WebObjects,
you are best positioned to take

00:03:56.400 --> 00:03:56.400
advantage of this computing power.

00:03:57.800 --> 00:03:59.830
So our agenda of the day is quite simple.

00:04:00.090 --> 00:04:04.910
We will spend half of the session talking
about Java enhancement in Snow Leopard,

00:04:05.090 --> 00:04:10.050
and the other half about the latest
WebObjects features and releases.

00:04:11.810 --> 00:04:14.160
So who are the Mac guys of the day?

00:04:14.210 --> 00:04:19.480
Well, first we'll start with Tom O'Brien,
a beloved Java engineering manager,

00:04:19.580 --> 00:04:24.180
followed by Pierre Frisch that
everybody knows as a WebObjects manager,

00:04:24.210 --> 00:04:28.710
and his sidekick, Daryl Lee,
our demo guru of the day.

00:04:28.990 --> 00:04:31.990
But forget the Mac guys,
it's all about Snow Leopard

00:04:32.540 --> 00:04:35.380
and Java 64-bit,
along with WebObjects.

00:04:35.570 --> 00:04:37.810
So Tom, come on up.

00:04:43.170 --> 00:04:43.940
Thank you, Francois.

00:04:43.940 --> 00:04:46.830
Francois is a great choice for
waking everyone up at 9 o'clock

00:04:46.880 --> 00:04:49.480
in the morning on day two.

00:04:51.400 --> 00:04:53.210
Quick show of hands,
how many of you in the audience

00:04:53.340 --> 00:04:58.270
are experienced Java developers
who are new to the Mac platform?

00:04:59.380 --> 00:04:59.910
Okay, great.

00:05:00.040 --> 00:05:03.960
And how many of you are Java developers
who have been with us developing

00:05:03.960 --> 00:05:06.400
on Mac OS X for quite a while?

00:05:07.900 --> 00:05:11.040
We have news today that's going
to be interesting to both of you.

00:05:11.210 --> 00:05:16.640
We're going to start out with a
quick overview of Java on Mac OS X,

00:05:16.650 --> 00:05:18.550
especially for those of you
who are new to the platform,

00:05:18.560 --> 00:05:22.390
just to recap some of the
most important points.

00:05:22.980 --> 00:05:25.640
We'll also highlight a few of the
updates that we've shipped in the

00:05:25.640 --> 00:05:28.200
past year for Java on Mac OS X.

00:05:28.240 --> 00:05:32.370
We'll tell you the latest
about Java 6 and 64-bit.

00:05:32.990 --> 00:05:35.650
We'll give you some pointers to
some great UI enhancements you

00:05:35.650 --> 00:05:39.510
can make to your applications to
make them really look great on

00:05:39.600 --> 00:05:42.180
Mac OS X but stay cross-platform.

00:05:42.180 --> 00:05:45.120
And we'll tell you about a
couple other efforts that have

00:05:45.250 --> 00:05:51.580
been going on this past year in
SWT and in the Java plug-in space.

00:05:51.960 --> 00:05:54.920
and we're also going to be looking
at the Java that you're getting

00:05:54.920 --> 00:05:59.090
at the Snow Leopard preview
at the conference this week.

00:06:01.010 --> 00:06:05.780
So if you're new to Mac OS X,
a key point about Java on Mac OS X is

00:06:05.820 --> 00:06:07.100
that it's a core framework.

00:06:07.100 --> 00:06:12.130
It's been built into the operating
system since the very first release.

00:06:12.420 --> 00:06:15.250
Unlike on other platforms,
Java is part of the operating system

00:06:15.270 --> 00:06:18.180
so you don't have to bundle it with
your application and you don't have

00:06:18.180 --> 00:06:20.920
to deal with installation issues
and configuration issues for your

00:06:20.920 --> 00:06:25.590
customers because they've already got
a Java version that runs great with

00:06:25.620 --> 00:06:28.100
your application on their system.

00:06:29.240 --> 00:06:32.060
As a core feature of Mac OS X,
Java is available in all the

00:06:32.070 --> 00:06:35.550
deployment modes that you're used
to and your customers expect.

00:06:35.710 --> 00:06:39.300
Applets running in the web browser,
WebStart applications,

00:06:39.370 --> 00:06:42.230
double-clickable bundled
applications on the desktop,

00:06:42.320 --> 00:06:45.390
and command line and server code.

00:06:48.800 --> 00:06:52.030
As Java developers, you already know,
or you should know if you're

00:06:52.030 --> 00:06:54.790
coming to the platform,
that the Java code that you depend

00:06:54.870 --> 00:06:58.000
on to develop your applications
and the Java applications you

00:06:58.000 --> 00:06:59.520
ship run great on Mac OS X.

00:06:59.520 --> 00:07:04.460
So tools like Idea and Eclipse,
Apache Tomcat,

00:07:04.460 --> 00:07:09.750
and many more are all running
great with the built-in

00:07:09.780 --> 00:07:12.470
Java that's on Mac OS X today.

00:07:12.470 --> 00:07:12.470
And it can be true of your
apps that you develop as well.

00:07:14.490 --> 00:07:18.150
The next key point about Java on
Mac OS X is that at any time we

00:07:18.150 --> 00:07:23.600
focus our efforts on one preferred
Java VM for a particular hardware and

00:07:23.600 --> 00:07:27.110
software configuration and OS release.

00:07:27.120 --> 00:07:30.690
And over the releases of Mac OS X,
we've moved that preferred

00:07:30.690 --> 00:07:34.690
Java version forward,
starting with Java 1.3.1 and the very

00:07:34.690 --> 00:07:38.400
first release of Mac OS X years ago,
moving forward to current

00:07:38.430 --> 00:07:42.360
releases where we have Java 1.5
as the preferred version.

00:07:43.080 --> 00:07:45.160
As we move the preferred
Java version forward,

00:07:45.160 --> 00:07:48.850
we transition our efforts off of older
versions to focus our attention on the

00:07:48.860 --> 00:07:53.590
latest preferred Java version to keep it
the most compatible and most stable and

00:07:53.590 --> 00:07:56.560
secure for you and for your customers.

00:07:57.400 --> 00:08:02.090
So at this point in Leopard,
the preferred Java version is Java 1.5.

00:08:02.090 --> 00:08:05.440
But let's take a closer look
at the Java versions that

00:08:05.440 --> 00:08:07.090
are available on Leopard.

00:08:07.770 --> 00:08:13.090
First, as I said, Java 1.5, Java SE 5.0,
to use its full Sun marketing name,

00:08:13.090 --> 00:08:17.640
is available on Leopard,
and it's the focus because it supports

00:08:17.640 --> 00:08:23.140
the range of hardware that is the
supporting configurations for Leopard.

00:08:23.140 --> 00:08:27.760
It's available in both
Intel 64 and 32-bit versions,

00:08:27.760 --> 00:08:29.420
as well as PowerPC.

00:08:29.800 --> 00:08:44.500
[Transcript missing]

00:08:45.430 --> 00:08:49.520
There's also a Java 6 version,
a Java 1.6 version available for Leopard

00:08:49.520 --> 00:08:56.030
for Intel 64-bit hardware that allows
you to move forward to 64-bit and to

00:08:56.090 --> 00:09:01.580
Java 6 with your applications and get a
jump on the future of Java in Mac OS X.

00:09:04.830 --> 00:09:07.080
Because there can be multiple
versions of Java available

00:09:07.080 --> 00:09:12.210
on the platform at any point,
users have the option of choosing

00:09:12.210 --> 00:09:16.350
a different Java version to run
as their version rather than the

00:09:16.350 --> 00:09:20.950
default preferred version that
we set for that configuration.

00:09:21.560 --> 00:09:24.230
Most customers don't need to change this,
but you should be aware

00:09:24.230 --> 00:09:25.240
that it's an option.

00:09:25.360 --> 00:09:28.990
And if they want to, for their particular
configuration or their needs,

00:09:29.130 --> 00:09:33.160
they can override the versions by
reordering the list of available

00:09:33.160 --> 00:09:38.630
VMs in this list so that they launch
applications in a VM of their choosing

00:09:38.630 --> 00:09:40.860
that's available on the system.

00:09:40.980 --> 00:09:44.720
They can also change the version
that they use for launching

00:09:44.720 --> 00:09:46.540
applets in web browsers.

00:09:47.240 --> 00:09:52.950
So these version settings let you or your
users control which versions are being

00:09:52.950 --> 00:09:56.660
launched on that particular machine,
on that particular configuration

00:09:57.200 --> 00:10:01.860
for double-clickable applications,
for WebStart applications, for applets.

00:10:01.860 --> 00:10:04.470
And a new feature we added in Leopard
that you're probably aware of if

00:10:04.470 --> 00:10:07.740
you were here at the conference
last year is that this also changes

00:10:07.740 --> 00:10:12.180
the version of Java run on the
command line for command line code.

00:10:13.460 --> 00:10:16.440
Speaking of the command line, again,
if you're new to the platform,

00:10:16.440 --> 00:10:20.660
there are a couple key file system
path tips that you should know

00:10:20.720 --> 00:10:24.980
about if you're an experienced
Java developer coming to Mac OS X.

00:10:25.880 --> 00:10:27.600
There's two main paths you should know.

00:10:27.670 --> 00:10:32.570
First, user bin Java is a symbolic link
that tracks the Java version that

00:10:32.570 --> 00:10:36.100
is selected in the Java preferences
application that I just showed you.

00:10:36.120 --> 00:10:40.560
So that can change both on different
versions of Mac OS X and even on

00:10:40.560 --> 00:10:45.540
individual customers' machines,
but it'll track the version that is the

00:10:45.540 --> 00:10:48.190
most compatible for their situation.

00:10:48.890 --> 00:10:52.380
LibraryJava Home is fixed for
the particular configuration and

00:10:52.380 --> 00:10:56.320
release of Java and the operating
system on that machine by Apple,

00:10:56.320 --> 00:10:59.490
and that tracks the preferred
Java version that Apple has set.

00:10:59.560 --> 00:11:04.410
So, for example, in Leopard,
LibraryJava Home is a reference

00:11:04.530 --> 00:11:07.800
to Java 1.5's LibraryJava Home.

00:11:10.800 --> 00:11:13.820
Now because Java is a framework,
like other frameworks on Mac OS X,

00:11:13.820 --> 00:11:16.060
it lives in system library frameworks.

00:11:16.100 --> 00:11:19.700
But relying on any paths that are
inside system library frameworks

00:11:19.700 --> 00:11:23.520
is really fragile and is prone to
breaking and compatibility issues

00:11:23.690 --> 00:11:26.810
as we change versions of Java or
move the operating system forward.

00:11:26.810 --> 00:11:29.590
So if you need to rely
on file system paths,

00:11:29.590 --> 00:11:31.620
pick one of those first two.

00:11:34.170 --> 00:11:36.970
Let's take a quick look at a couple
of the recent Java updates that

00:11:36.970 --> 00:11:38.150
we've shipped over the past year.

00:11:38.210 --> 00:11:42.710
At the conference last year,
you got updated versions of

00:11:42.710 --> 00:11:46.100
Java in the Leopard preview
that was shipped 12 months ago.

00:11:46.100 --> 00:11:50.950
And we also shipped a version
of Java 6 as a developer preview

00:11:50.950 --> 00:11:53.290
that would run on Leopard.

00:11:54.850 --> 00:11:58.730
In the fall, when Leopard GMed,
there were even newer versions of

00:11:58.730 --> 00:12:02.240
Java 1.4.2 and Java 1.5 in that GM build.

00:12:02.260 --> 00:12:06.210
And we also shipped in
December an update for Tiger,

00:12:06.480 --> 00:12:10.260
Mac OS 10.4,
to bring its Java 1.4 and 1.5

00:12:10.370 --> 00:12:13.570
versions up to date with the latest
versions available at that point.

00:12:13.580 --> 00:12:16.930
And that was a very focused release,
mostly focused on getting those

00:12:16.930 --> 00:12:19.000
versions to change and be compatible.

00:12:19.880 --> 00:12:23.560
We continued doing developer
previews of Java 6 for Leopard,

00:12:23.560 --> 00:12:28.880
and we shipped the GM version of the
Java 6 update in April of this year.

00:12:28.880 --> 00:12:32.330
And now at the conference this week,
there's an even newer Java in

00:12:32.330 --> 00:12:35.740
the build that you're getting
in the Snow Leopard preview.

00:12:40.400 --> 00:12:43.390
One of the essential ways that we
move Java forward on the Mac for

00:12:43.390 --> 00:12:48.910
compatibility and for making sure it's
best for your customers is to listen

00:12:48.910 --> 00:12:53.800
to your bug requests and enhancement
requests and respond to them in updates.

00:12:53.800 --> 00:12:56.720
For example, in Leopard,
we dealt with a wide range of issues

00:12:56.720 --> 00:13:00.300
in moving the operating system forward
to newer versions of Java and making

00:13:00.300 --> 00:13:02.380
it the best possible Java on Leopard.

00:13:02.940 --> 00:13:08.140
And we also rolled in over 270 critical
issues that came from you as developers

00:13:08.140 --> 00:13:12.900
that were important for moving
Java forward for your particular needs.

00:13:12.900 --> 00:13:16.990
In the Tiger update last fall,
which I said was a very focused update

00:13:17.030 --> 00:13:20.580
and had a very narrow range of bugs,
mostly based on moving

00:13:20.580 --> 00:13:25.120
the Java versions forward,
we still managed to bring in 25% of the

00:13:25.120 --> 00:13:30.340
bugs as critical developer fixes for key
issues that were needed for compatibility

00:13:30.370 --> 00:13:32.800
on Tiger for critical customers.

00:13:32.800 --> 00:13:36.800
And in the Java 6 update
that we GMed early this year,

00:13:36.800 --> 00:13:41.040
in addition to bringing out
a whole new version of Java,

00:13:41.040 --> 00:13:45.020
we addressed over 180 bugs that
came from you as developers in

00:13:45.020 --> 00:13:48.790
the developer previews and from
previous releases to make it the

00:13:48.790 --> 00:13:50.770
best possible Java it could be.

00:13:50.780 --> 00:13:54.300
All of those bugs came to
us through Bug Reporter.

00:13:54.320 --> 00:13:57.090
And here's the URL for Bug Reporter,
which I'm sure most of

00:13:57.100 --> 00:13:58.450
you already know about.

00:13:58.480 --> 00:13:59.990
And if you don't, you shouldn't.

00:13:59.990 --> 00:14:00.610
You should.

00:14:00.660 --> 00:14:01.450
And we also rolled in over 180 bugs
that came from you as developers

00:14:01.450 --> 00:14:02.190
in the developer previews and from
previous releases to make it the

00:14:02.240 --> 00:14:02.660
best possible Java it could be.

00:14:02.800 --> 00:14:03.800
Thank you.

00:14:05.400 --> 00:14:09.360
One important thing you should
know about the bugs that come

00:14:09.360 --> 00:14:11.840
in through Bug Reporter is that
every single feature request,

00:14:11.840 --> 00:14:15.510
every single enhancement,
every single bug report that we get

00:14:15.510 --> 00:14:20.570
through Bug Reporter gets read by
Apple Engineering within 48 hours.

00:14:20.600 --> 00:14:24.730
We use your information that you
provide in the bugs to prioritize

00:14:24.950 --> 00:14:29.150
our work and to focus our attention
on things that will make it the best

00:14:29.230 --> 00:14:31.580
possible Java for you on Mac OS X.

00:14:35.870 --> 00:14:40.550
If you're already working on Mac OS X,
you almost certainly know about JavaDev.

00:14:40.560 --> 00:14:42.930
And if you're new to Mac OS X,
it's a great place to

00:14:43.000 --> 00:14:44.360
learn more about Java.

00:14:44.360 --> 00:14:49.050
JavaDev is an active discussion
list where new Java developers on

00:14:49.050 --> 00:14:54.310
Mac OS X come to learn more about the
platform and where experienced developers

00:14:54.720 --> 00:14:59.500
can have in-depth discussions with
Apple engineers about Java on Mac OS X.

00:15:00.790 --> 00:15:03.700
Here's the URL, and we'll be putting
it up again at the end,

00:15:03.710 --> 00:15:06.600
but here's the URL for
getting on the JavaDev list.

00:15:12.270 --> 00:15:16.440
Okay, that is our quick overview
of Java on Mac OS X,

00:15:16.440 --> 00:15:19.180
especially for those of you who are new
to the platform to get you oriented.

00:15:21.550 --> 00:15:26.360
Let's talk about a couple of -- let's
highlight a couple of enhancements

00:15:26.360 --> 00:15:30.400
that have been happening to Java on
Mac OS X over the past year since

00:15:30.420 --> 00:15:32.590
the last developer conference.

00:15:32.820 --> 00:15:37.050
One of the key things that we
improved in Leopard was an ability

00:15:37.050 --> 00:15:42.420
for you to add great user interface
enhancements to your swing application

00:15:42.420 --> 00:15:46.970
to make it look great on Mac OS X.

00:15:48.490 --> 00:15:51.350
With swing client properties
that are custom for

00:15:51.410 --> 00:15:55.780
Mac OS X but are cross-platform,
you can take this GUI,

00:15:55.780 --> 00:15:58.330
which is built with
standard swing components,

00:15:58.330 --> 00:16:02.770
and add cross-platform code and make
it look even better on Mac OS X.

00:16:02.780 --> 00:16:04.870
This is the same components
using the swing client

00:16:04.880 --> 00:16:08.340
properties that are available,
and this code continues to run and

00:16:08.340 --> 00:16:12.760
work on other platforms just great,
but it looks even better on Mac OS X.

00:16:12.760 --> 00:16:17.710
It really looks at home on Mac OS X with
the enhancements you can use.

00:16:17.970 --> 00:16:22.520
We've been adding even more ability
for you to add the polish to your

00:16:22.520 --> 00:16:28.590
Java applications on Mac OS X that
your users expect and really give

00:16:28.590 --> 00:16:32.320
them the extra touches that they
expect out of Mac applications.

00:16:32.320 --> 00:16:35.010
For example,
a long-standing feature request was

00:16:35.010 --> 00:16:39.540
implementing modal dialogues with Sheets,
and that's now available for you to use.

00:16:40.800 --> 00:16:44.260
We're also using the
JavaX Script API in Java 6 to

00:16:44.260 --> 00:16:49.410
allow you to access AppleScript,
which gives your applications much

00:16:49.410 --> 00:16:53.020
better integration with the other
applications on Mac OS X to really

00:16:53.060 --> 00:16:56.820
get them to integrate with the rest
of the OS and the other applications

00:16:56.910 --> 00:16:58.820
that your customers are using.

00:17:00.610 --> 00:17:04.300
and we've added even more functionality,
like letting you add a customizable

00:17:04.370 --> 00:17:06.140
dock menu to your application.

00:17:06.220 --> 00:17:10.560
Again, these are great extra steps for
your application that really make

00:17:10.560 --> 00:17:15.200
them stand out for your users and
give them the extra polish that they

00:17:15.200 --> 00:17:18.160
expect out of a Macintosh application.

00:17:20.980 --> 00:17:24.980
In addition to the enhancements
that we've been working on for

00:17:24.980 --> 00:17:28.850
Java at Apple and the new releases
that we've been bringing out,

00:17:28.860 --> 00:17:32.520
there have been other developments
in the Mac OS X Java community,

00:17:32.520 --> 00:17:34.720
and we'll highlight a
couple of them here quickly.

00:17:34.720 --> 00:17:39.680
First, if you're in Java development,
you almost certainly know about SWT.

00:17:39.680 --> 00:17:45.200
SWT is the foundation toolkit
for Eclipse that the Eclipse IDE,

00:17:45.200 --> 00:17:49.760
other IDEs,
and other applications are built on.

00:17:51.960 --> 00:17:55.990
A critical point about SWT on Mac OS X is
that the current implementation

00:17:55.990 --> 00:17:58.610
is based on the Carbon Framework.

00:17:58.700 --> 00:18:03.200
and as you may know, not all of Carbon is
moving forward to 64-bit.

00:18:03.300 --> 00:18:10.200
So in order for SWT to have a
future in the future of Mac OS X,

00:18:10.300 --> 00:18:13.950
SWT needs to migrate
from Carbon to Cocoa.

00:18:14.210 --> 00:18:17.750
Now,
the good news is that there's already an

00:18:17.750 --> 00:18:22.540
effort underway to migrate SWT to Cocoa,
which will give it access to full 64-bit

00:18:22.540 --> 00:18:27.560
support and all of the other enhancements
that are happening to the operating

00:18:27.600 --> 00:18:29.970
system as Mac OS X moves forward.

00:18:30.320 --> 00:18:34.190
We'll be talking more about this
in the talk in this room at 10:30,

00:18:34.440 --> 00:18:37.360
but you should know that the
port is underway and they're

00:18:37.360 --> 00:18:39.790
actively looking for contributors.

00:18:42.520 --> 00:18:46.870
Another effort that's been going
on for Java in Mac OS X is the

00:18:47.240 --> 00:18:51.660
Java plugin enhancements that Sun has
been doing over the past year.

00:18:51.670 --> 00:18:56.560
Sun has been working on a new
out-of-process browser plugin model,

00:18:56.590 --> 00:19:01.860
which allows the applet process that
runs your Java applet and the browser

00:19:01.940 --> 00:19:05.660
to run separately in separate processes.

00:19:06.950 --> 00:19:11.720
This has great advantages for stability
because suppose the Java process were

00:19:11.780 --> 00:19:13.950
to crash and the applet were to go away.

00:19:13.950 --> 00:19:15.660
Theoretically, it could happen.

00:19:15.660 --> 00:19:20.380
The Java applet process can die,
but the browser process

00:19:20.640 --> 00:19:25.230
will continue to run,
which is great for stability.

00:19:26.420 --> 00:19:29.990
Also, because the applet and the
browser are running in completely

00:19:30.040 --> 00:19:33.490
separate address spaces,
it has great advantages

00:19:33.490 --> 00:19:35.300
for security as well.

00:19:35.390 --> 00:19:40.320
It also has advantages in allowing you
to have more version flexibility in the

00:19:40.320 --> 00:19:42.900
Java version you use to run applets.

00:19:43.040 --> 00:19:47.210
For example,
a 32-bit-based browser could launch

00:19:47.210 --> 00:19:50.610
Java applets running in a 64-bit VM.

00:19:53.150 --> 00:19:58.700
For a lot more about the user interface
enhancements that we quickly went over,

00:19:58.700 --> 00:20:03.250
the SWT Cocoa port,
and the Java plug-in work from Sun,

00:20:03.250 --> 00:20:07.480
please stay where you are for
the talk at 10:30 in this room,

00:20:07.700 --> 00:20:11.030
Building Great Java Applications
on Mac OS X.

00:20:16.390 --> 00:20:19.390
So that brings us up to date
with the Java in the past,

00:20:19.610 --> 00:20:20.460
the Java in Leopard.

00:20:20.460 --> 00:20:23.790
Now let's take a look at the
Java you're getting in the Snow Leopard

00:20:23.900 --> 00:20:25.470
preview at the conference this week.

00:20:27.870 --> 00:20:30.620
First, quickly,
let's recap the Java versions

00:20:30.930 --> 00:20:32.310
available on Leopard.

00:20:32.310 --> 00:20:34.040
Java 5 was preferred.

00:20:34.040 --> 00:20:37.350
It was focused on the main
compatible hardware for

00:20:37.480 --> 00:20:40.020
Leopard that Leopard supported.

00:20:40.020 --> 00:20:42.910
Java 1.4.2 was present
but was going away,

00:20:42.910 --> 00:20:45.000
intended as a transition strategy.

00:20:45.000 --> 00:20:50.950
And Java 6 was available for you as
developers for Intel 64-bit hardware

00:20:50.990 --> 00:20:57.020
to move forward to 64-bit development
and to move forward to Java 6.

00:20:58.900 --> 00:21:02.100
In the Snow Leopard preview that you're
getting at the conference this week,

00:21:02.100 --> 00:21:03.930
we're making a bold jump forward.

00:21:03.930 --> 00:21:09.420
We're moving the Java 6 preview,
the Java 6 implementation from

00:21:09.420 --> 00:21:13.410
Leopard forward to Snow Leopard,
and we're making it the preferred

00:21:13.410 --> 00:21:15.060
version in Snow Leopard.

00:21:17.520 --> 00:21:22.770
Because it's also the only
version of Java in Snow Leopard,

00:21:22.990 --> 00:21:26.020
We're making it compatible
with the supported hardware

00:21:26.020 --> 00:21:29.670
configurations for Snow Leopard,
which means it's available for both

00:21:29.710 --> 00:21:32.880
Intel 64 and Intel 32-bit hardware.

00:21:37.800 --> 00:21:40.430
So the Java 6 and the Snow Leopard
Disk you're getting this week

00:21:40.520 --> 00:21:44.640
is both Intel 32 and Intel 64.

00:21:46.410 --> 00:21:51.140
But the really main focus
of Snow Leopard is 64-bit.

00:21:51.220 --> 00:21:54.490
So as Java developers,
you're in a great position to

00:21:54.490 --> 00:21:58.900
take advantage of moving your
applications forward to 64-bit.

00:21:59.180 --> 00:22:01.840
The main advantage that you
get out of moving to 64-bit,

00:22:01.840 --> 00:22:05.690
in fact, the fundamental advantage,
is unlimited virtual memory.

00:22:05.690 --> 00:22:07.930
It's essentially as
much as you can count.

00:22:08.040 --> 00:22:11.640
127 terabytes is a really,
really big number.

00:22:12.390 --> 00:22:17.120
What you can do with that is
have giant data sets in memory.

00:22:17.120 --> 00:22:23.120
You can run simulations of
weather across the entire globe.

00:22:23.290 --> 00:22:26.160
You can simulate all the
air traffic in the US.

00:22:26.300 --> 00:22:33.290
You can process medical images
that are in huge image files.

00:22:33.430 --> 00:22:36.260
You can do many things that you
couldn't do when you were dealing with

00:22:36.260 --> 00:22:39.760
a 32-bit VM where you were limited to
two gigabytes or less of address space.

00:22:41.480 --> 00:22:43.660
The great news for you as
Java developers is your

00:22:43.760 --> 00:22:46.070
application already runs in 64-bit.

00:22:46.080 --> 00:22:51.280
Because Java's pointer size agnostic,
pure Java code moves forward

00:22:51.280 --> 00:22:55.110
seamlessly and just can continue
running great in 64-bit.

00:22:55.140 --> 00:22:58.470
So you have a leap ahead compared
to other developers who are

00:22:58.470 --> 00:23:00.800
moving their applications forward.

00:23:00.800 --> 00:23:06.110
A pure Java application running on
a 32-bit VM with 32-bit frameworks

00:23:06.110 --> 00:23:11.040
continues to run just great on
64-bit with no change on your part.

00:23:12.640 --> 00:23:14.850
Now, a bunch of you are already ahead
of me because you know that there

00:23:14.850 --> 00:23:17.440
are some Java applications that
don't move forward with zero steps.

00:23:17.440 --> 00:23:19.010
They need one more step.

00:23:19.040 --> 00:23:22.440
If you have a Java application
with native code,

00:23:22.440 --> 00:23:25.930
with a native JNI library
that's built for 32-bit,

00:23:25.930 --> 00:23:30.330
when you move the Java VM and the
frameworks that it depends on forward,

00:23:30.410 --> 00:23:33.810
there is no 64-bit version
of the JNI code that your

00:23:33.820 --> 00:23:36.000
application is depending on.

00:23:36.050 --> 00:23:41.420
And so your application won't launch,
it won't load because of this dependency.

00:23:42.600 --> 00:23:45.310
There's one additional step you
need to do if you have something

00:23:45.310 --> 00:23:49.030
that involves JNI libraries,
which is just rebuild your JNI library

00:23:49.080 --> 00:23:53.170
to be universal so it has both
a 32-bit and a 64-bit segment,

00:23:53.220 --> 00:23:57.100
and it will run great in
both 32-bit and 64-bit Java.

00:23:59.950 --> 00:24:01.960
Okay, so great.

00:24:01.990 --> 00:24:04.960
You have a head start on moving
your application forward to

00:24:04.960 --> 00:24:06.320
64-bit as Java developers.

00:24:06.320 --> 00:24:08.500
You've done either zero or one steps.

00:24:08.500 --> 00:24:12.160
Your application is running great,
and you're thinking about all the

00:24:12.330 --> 00:24:15.780
cool things you could do with all
of that enhanced address space.

00:24:15.780 --> 00:24:17.530
Is there any downside to this?

00:24:17.530 --> 00:24:20.240
Do you pay a performance penalty,
for example?

00:24:21.760 --> 00:24:26.070
The great news as Java developers is that
the Java 64-bit version in Snow Leopard

00:24:26.410 --> 00:24:30.140
runs even faster than the 32-bit version.

00:24:30.510 --> 00:24:34.810
So you have a great,
it's up to 61% faster.

00:24:34.820 --> 00:24:36.600
Sorry, I meant to say that magic number.

00:24:40.020 --> 00:24:42.450
You're in a great position
as Java developers.

00:24:42.550 --> 00:24:45.790
Your app comes over faster
than for any other developers.

00:24:45.800 --> 00:24:48.140
If it's pure Java code, it's no steps.

00:24:48.230 --> 00:24:49.920
Otherwise,
you have to rebuild your JNI library.

00:24:49.920 --> 00:24:53.900
You get the advantage of all
of this great address space,

00:24:53.900 --> 00:24:57.370
and your code runs even
faster on Snow Leopard.

00:24:57.610 --> 00:24:59.960
You're in a great position
to move forward with 64-bit.

00:24:59.970 --> 00:25:03.550
So let's talk about the key
points in the Snow Leopard

00:25:03.640 --> 00:25:04.870
Preview Java that you're getting.

00:25:04.870 --> 00:25:09.140
Java 6 is the Java in
the Snow Leopard Preview.

00:25:09.140 --> 00:25:11.620
It's available for 64 and 32-bit.

00:25:11.690 --> 00:25:13.820
64-bit is the default version.

00:25:13.820 --> 00:25:17.880
You should start moving your
applications forward today to 64-bit.

00:25:17.880 --> 00:25:21.420
Take advantage of all that address
space and work with Java 1.6.

00:25:21.420 --> 00:25:24.840
Tell us about any issues you
find at bugreporter.apple.com,

00:25:24.840 --> 00:25:27.000
but you really can get started today.

00:25:29.800 --> 00:25:33.500
For a lot more about 64-bit
and the Java in Snow Leopard,

00:25:33.760 --> 00:25:37.840
please stay where you are for the
next talk at 10:30 in this room,

00:25:37.880 --> 00:25:41.020
Building Great Java Applications
on Mac OS X.

00:25:45.980 --> 00:25:52.230
So we sped through a quick
tour of Java on Mac OS X.

00:25:52.610 --> 00:25:57.410
to recap the essential things you
need to know as new developers,

00:25:57.470 --> 00:26:01.840
new enhancements in the past year,
and Java in Snow Leopard.

00:26:02.450 --> 00:26:05.600
What are the essential things you should
take away from this section of the talk?

00:26:05.650 --> 00:26:08.550
First,
there's a 64-bit Java version available

00:26:08.690 --> 00:26:12.300
for both Leopard and for Snow Leopard.

00:26:12.320 --> 00:26:17.180
So you should get started running
your apps in 64-bit today.

00:26:17.820 --> 00:26:20.350
Second,
learn about and take advantage of the

00:26:20.350 --> 00:26:23.760
great enhancements that you can make
to your applications to make them

00:26:23.760 --> 00:26:28.260
really look great on Mac OS X and
fit what your customers expect

00:26:28.350 --> 00:26:30.480
out of a Macintosh application.

00:26:32.690 --> 00:26:45.380
and Paul Schmitz.

00:26:46.160 --> 00:26:46.480
And finally,
the fundamental thing under all

00:26:46.480 --> 00:26:46.480
of this is that Java is a core
framework for Mac OS -- on Mac OS X.

00:26:46.480 --> 00:26:46.480
It's a great foundation for
your Java development and it's a

00:26:46.480 --> 00:26:46.480
great foundation for delivering
applications to your customers.

00:26:47.510 --> 00:26:51.800
It's also a great foundation for
other technologies on Mac OS X.

00:26:51.800 --> 00:26:56.680
And I'd like to welcome up Pierre Frisch,
who's going to tell you about WebObjects,

00:26:56.690 --> 00:27:00.870
one of the great technologies
based on Java on Mac OS X.

00:27:07.600 --> 00:27:09.060
Thank you, Tom.

00:27:09.370 --> 00:27:10.670
So, good morning.

00:27:10.800 --> 00:27:12.140
I'm Pierre Frisch.

00:27:12.140 --> 00:27:13.940
I'm sure that most of you know me.

00:27:14.040 --> 00:27:17.690
For those who don't know me, I'm Mr.

00:27:17.730 --> 00:27:19.180
WebObject.

00:27:20.580 --> 00:27:22.340
So what are we going to
talk about this morning?

00:27:22.580 --> 00:27:25.200
Well, we have got quite a
number of topics to cover.

00:27:25.200 --> 00:27:27.490
First of all,
for those who don't know WebObjects,

00:27:27.550 --> 00:27:31.610
I'm going to go and do a small summary
of what WebObjects is all about.

00:27:31.660 --> 00:27:37.000
Then we're going to talk about
WebObjects 5.5 and some of the future.

00:27:37.000 --> 00:27:41.140
Then we go back on the tools and talk
about the WebObjects community and that

00:27:41.270 --> 00:27:43.430
great event that we did last weekend.

00:27:45.280 --> 00:27:47.090
So, what is WebObject?

00:27:47.200 --> 00:27:50.320
WebObject is actually the
granddaddy of all the application

00:27:50.320 --> 00:27:51.700
servers on the Internet.

00:27:51.710 --> 00:27:57.420
WebObject was created in 1996
in Objective-C and started its

00:27:57.520 --> 00:28:04.520
life...actually Francois was one of the
first engineers to work on WebObject.

00:28:05.200 --> 00:28:09.820
In 2001,
WebObjects was ported to pure Java and

00:28:09.820 --> 00:28:15.200
actually started to be really the
mainstay of the application service.

00:28:15.200 --> 00:28:19.170
Last year,
we released version 5.4 of WebObjects,

00:28:19.190 --> 00:28:24.730
and with Snow Leopard,
we are going to release version 5.5.

00:28:24.740 --> 00:28:28.070
The main highlight of 5.4 was
actually compatibility with Java 5.

00:28:28.080 --> 00:28:32.900
The main highlight of WebObjects 5.5
will be the compatibility with Java 6.

00:28:33.370 --> 00:28:36.020
And obviously,
64-bit and all the goodies that

00:28:36.030 --> 00:28:38.130
you get with Java 6 and 64-bit.

00:28:40.210 --> 00:28:41.240
WebObjects is the marketplace.

00:28:41.240 --> 00:28:45.090
Well, WebObjects, first of all,
is used internally by

00:28:45.090 --> 00:28:47.060
Apple to run the company.

00:28:47.060 --> 00:28:50.580
We use WebObjects for the Apple Store,
so if you bought a

00:28:50.650 --> 00:28:53.550
Mac on the Apple Store,
you use WebObjects.

00:28:53.760 --> 00:28:57.090
We also use it internally
to run systems like DotMacs,

00:28:57.140 --> 00:29:00.220
eMusicStore,
which is probably one of the largest

00:29:00.220 --> 00:29:04.030
e-commerce sites on the planet,
but we also use it internally

00:29:04.210 --> 00:29:08.050
for manufacturing and running
our own internal business.

00:29:08.460 --> 00:29:11.500
If you look at your Mac,
every single part of every single

00:29:11.570 --> 00:29:16.100
machine that we manufacture is actually
tracked by a WebObjects application.

00:29:16.100 --> 00:29:18.910
So we actually use it
for very small things,

00:29:19.000 --> 00:29:21.820
but we also use it for huge applications.

00:29:21.820 --> 00:29:25.220
So you can scale, and don't worry,
if you build an application

00:29:25.240 --> 00:29:27.330
with WebObjects,
you can scale it.

00:29:29.050 --> 00:29:34.310
Outside,
last year when I was on this stage,

00:29:34.750 --> 00:29:37.680
I actually counted the number of
pages that you can actually see on

00:29:37.680 --> 00:29:39.640
the internet made with WebObjects.

00:29:39.750 --> 00:29:40.540
There was 4 million.

00:29:40.540 --> 00:29:43.040
This year, there are 6 million.

00:29:43.040 --> 00:29:44.870
So you have been very busy.

00:29:44.870 --> 00:29:46.450
Thank you very much.

00:29:50.380 --> 00:29:54.120
And that obviously doesn't
include any of the private page.

00:29:54.160 --> 00:29:58.020
So WebObjects is well
alive and growing very,

00:29:58.020 --> 00:29:59.320
very fast.

00:30:00.980 --> 00:30:03.110
WebObject 5.4, what we did last year.

00:30:03.300 --> 00:30:08.320
We released in October a new release,
5.4 with Leopard.

00:30:08.320 --> 00:30:13.060
We released an update in February,
and today, posted on ADC,

00:30:13.060 --> 00:30:16.650
you are going to find
WebObject 5.4.2 available.

00:30:22.880 --> 00:30:24.600
We also cleaned up the license.

00:30:24.600 --> 00:30:30.280
We got a lot of criticism,
so we actually made it absolutely

00:30:30.280 --> 00:30:33.700
abundantly clear that the
WebObjects application that

00:30:33.810 --> 00:30:37.890
you can develop on WebObjects,
you can deploy it on any machine of

00:30:37.890 --> 00:30:40.630
any system that your customer requires.

00:30:40.660 --> 00:30:43.240
So it's absolutely, absolutely clear.

00:30:46.900 --> 00:31:11.800
[Transcript missing]

00:31:12.920 --> 00:31:16.630
So I'm absolutely sure it's the first
time and last time you ever read it,

00:31:16.740 --> 00:31:18.590
so at least you have read it once.

00:31:23.400 --> 00:31:29.280
Anyway, so you have read the license,
you're happy with it, we can go on.

00:31:29.820 --> 00:31:33.000
and also we fixed,
during the course of the year,

00:31:33.010 --> 00:31:33.960
210 bug fixes.

00:31:33.960 --> 00:31:38.780
We actually been very,
very busy on trying to fix the

00:31:38.780 --> 00:31:41.180
bugs and make the enhancement.

00:31:41.180 --> 00:31:43.960
And most of those bugs
actually come for you.

00:31:43.980 --> 00:31:49.770
45% of the bugs that we fixed were
actually issues or improvement

00:31:49.860 --> 00:31:52.400
or requests that you made.

00:31:52.400 --> 00:31:57.640
And so it's very important that you
keep carrying on sending us requests.

00:31:57.640 --> 00:32:02.230
33% are actually internal developers,
so that bugs that are actually

00:32:02.230 --> 00:32:06.760
discovered or issues that are
requested by internal developer,

00:32:06.760 --> 00:32:09.470
our own internal use.

00:32:09.730 --> 00:32:14.880
So please carry on sending us
reports on bugreporter.apple.com.

00:32:16.250 --> 00:32:20.350
So, now that we've seen what's passed,
what's coming?

00:32:20.360 --> 00:32:24.000
Well, we are working on WebObjects 5.5.

00:32:24.010 --> 00:32:26.950
5.5 is going to be
released with No Leopard.

00:32:27.700 --> 00:32:39.900
[Transcript missing]

00:32:41.230 --> 00:32:42.240
So, change.

00:32:42.240 --> 00:32:44.890
A lot of things have
changed under the hood.

00:32:44.930 --> 00:32:49.990
We try to keep the public API stable,
but...

00:32:50.780 --> 00:32:52.900
You don't make an omelet
without breaking eggs.

00:32:52.920 --> 00:32:57.290
Anything which is
private API has changed,

00:32:57.320 --> 00:33:04.120
will change, and so if you subclass or
patch private internal API,

00:33:04.150 --> 00:33:06.570
your code will break.

00:33:09.800 --> 00:33:15.200
[Transcript missing]

00:33:18.100 --> 00:33:19.790
So, localization.

00:33:19.790 --> 00:33:21.060
What did we do?

00:33:21.100 --> 00:33:27.060
We actually introduced a feature
that was requested since 1997.

00:33:27.060 --> 00:33:34.120
And we actually moved from
language string to local,

00:33:34.120 --> 00:33:35.700
to Java local.

00:33:35.700 --> 00:33:41.260
So, we are all here in America and we
all know what a gas station is.

00:33:41.280 --> 00:33:44.580
Fortunately, in England,
you go to the petrol

00:33:44.580 --> 00:33:46.420
station to fill your tank.

00:33:47.230 --> 00:33:51.020
or you check the level under
the bonnet and not the hood.

00:33:51.900 --> 00:34:04.500
[Transcript missing]

00:34:06.910 --> 00:34:10.740
We also, to make it really easy for
you to use those features,

00:34:10.740 --> 00:34:13.410
added some localization in components.

00:34:13.540 --> 00:34:16.490
So you can now write

00:34:16.680 --> 00:34:19.270
Directly into your string,
a localized string,

00:34:19.310 --> 00:34:22.980
so you can actually address from the key
and the default and you don't have to

00:34:22.980 --> 00:34:29.460
actually write the glue in the Java code
to actually call the localized string.

00:34:29.960 --> 00:34:33.000
So that would make your life simpler.

00:34:33.000 --> 00:34:36.120
And the last feature in localization,
but not the least,

00:34:36.120 --> 00:34:37.630
is we introduce geolocation.

00:34:37.660 --> 00:34:42.080
So you can not only know what
the browser is reporting,

00:34:42.080 --> 00:34:44.800
but you can also,
from the IP address of the browser,

00:34:44.800 --> 00:34:46.500
know where your customer is coming from.

00:34:46.500 --> 00:34:51.200
And even if you are in New Zealand,
which is that map of the world,

00:34:51.200 --> 00:34:54.600
you can find the people where they are.

00:34:54.810 --> 00:34:58.790
and for that I'm going to ask Daryl to
show you a short demo of that feature.

00:34:58.800 --> 00:35:00.780
Okay, thank you, Pierre.

00:35:00.780 --> 00:35:05.910
So I prefer the view of the northern
hemisphere this way on a map.

00:35:05.970 --> 00:35:10.450
So what I'd like to show you is
a quick preview of some of the

00:35:10.450 --> 00:35:16.200
geolocation features and just how
easy it is to use localization

00:35:16.200 --> 00:35:18.850
tables within WebObjects 5.5.

00:35:18.860 --> 00:35:24.200
So for this demo I'm going to actually
have to spoof some IP addresses because,

00:35:24.320 --> 00:35:26.780
well,
we're in San Francisco right now and

00:35:26.780 --> 00:35:31.120
I'm going to need some to generate
requests from various parts of the world.

00:35:31.360 --> 00:35:36.980
So I create this map and say we
get a request from South Africa.

00:35:39.220 --> 00:35:43.470
What just happened right there
is that we made a request from

00:35:43.470 --> 00:35:49.370
the IP address 4131.255.255,
and we realized that this was in

00:35:49.440 --> 00:35:53.910
the country region of South Africa,
and we did a lookup in

00:35:53.970 --> 00:35:58.730
the localized table,
and we got a localized hello greeting,

00:35:58.730 --> 00:36:00.520
hello from Cape Town.

00:36:00.540 --> 00:36:03.930
And so let me try a
couple other addresses,

00:36:03.930 --> 00:36:07.470
like let's go do a German one,
so Guten Tag,

00:36:07.490 --> 00:36:12.370
or let's go to the United States here,
and...

00:36:12.800 --> 00:36:37.300
[Transcript missing]

00:36:41.310 --> 00:36:43.380
And so the next great feature
I want to talk to you about

00:36:43.390 --> 00:36:44.980
in 5.5 is codeless component.

00:36:44.980 --> 00:36:49.090
We've discovered that most of
WebObject applications write

00:36:49.090 --> 00:36:50.370
quite a lot of glue code.

00:36:50.380 --> 00:36:54.060
And one of them being for
the iteration variable.

00:36:54.060 --> 00:36:58.280
So we actually made it easier for
you to not have to declare those

00:36:58.280 --> 00:37:00.530
iteration variables in the Java code.

00:37:00.580 --> 00:37:04.150
So instead of writing this type of code,
which is a classic way of

00:37:04.150 --> 00:37:10.450
writing WebObject iteration,
you can now just put directly into

00:37:10.470 --> 00:37:14.640
your Word file the iteration variable.

00:37:14.640 --> 00:37:17.240
So don't go and write any more of those.

00:37:19.200 --> 00:37:26.400
[Transcript missing]

00:37:27.430 --> 00:37:29.780
and the same thing,
we went a step further.

00:37:29.780 --> 00:37:33.990
It's that very often when you do
a repetition on a bunch of objects

00:37:33.990 --> 00:37:38.940
that you grab from the database,
so we actually added to the repetition

00:37:38.940 --> 00:37:42.680
a fetch binding that enabled you to
return directly a list of objects

00:37:42.780 --> 00:37:44.980
from the fetch spec in the database.

00:37:44.980 --> 00:37:47.010
So how does that work?

00:37:47.080 --> 00:37:52.180
It works with using name fetch spec,
and we pass as a binding all

00:37:52.310 --> 00:37:55.020
the values that you build
in your variable dictionary.

00:37:55.640 --> 00:37:58.480
So actually you can make
some really interesting pages

00:37:58.480 --> 00:38:02.070
directly without any Java code.

00:38:02.140 --> 00:38:05.130
And for that,
Daryl is going to show you another

00:38:05.130 --> 00:38:07.090
demo of what we can do with it.

00:38:08.930 --> 00:38:09.570
Thank you, Pierre.

00:38:09.580 --> 00:38:13.240
So I just wanted to give you
a quick tour of a component

00:38:13.320 --> 00:38:14.220
that I wrote really quickly.

00:38:14.220 --> 00:38:16.040
It's a master detail-like component.

00:38:16.040 --> 00:38:19.890
And it kind of leverages a lot
of new features in WebRx 5.5,

00:38:19.890 --> 00:38:23.600
but we laid down the foundation
of this with WebRx 5.4 and

00:38:23.600 --> 00:38:25.320
the new bindings parser.

00:38:26.070 --> 00:38:31.400
And in 5.5, as Pierre mentioned,
we introduced a fetch type of binding.

00:38:31.400 --> 00:38:35.750
So what this little highlighted
code says here is that I want

00:38:35.750 --> 00:38:40.650
to reference the movie entity,
and I want to call the fetch all

00:38:40.650 --> 00:38:43.540
movies name fetch specification.

00:38:43.540 --> 00:38:47.790
And I'm stuffing this into
a world repetition list,

00:38:47.790 --> 00:38:53.910
and then for each item in that list,
let's stuff that into a variable name,

00:38:53.910 --> 00:38:54.920
a movie.

00:38:55.980 --> 00:38:58.900
And this allows us to do
a lot of great things.

00:38:58.970 --> 00:39:02.620
So I can reference that variable
while in my repetition and

00:39:02.620 --> 00:39:04.890
reference the title right here.

00:39:04.920 --> 00:39:07.320
But I can also traverse relationships.

00:39:07.320 --> 00:39:11.550
So as you can see,
I've created another repetition here,

00:39:11.570 --> 00:39:14.930
and I'm traversing and
iterating over roles,

00:39:15.030 --> 00:39:19.010
and I'm printing out the role
name and printing the first

00:39:19.150 --> 00:39:21.310
and last name of the actor.

00:39:21.470 --> 00:39:23.970
and just to show you,
I'm not writing any Java code.

00:39:24.240 --> 00:39:25.700
Here's the basic templating code.

00:39:25.770 --> 00:39:29.030
There's no specific bindings there,
no Java code at all.

00:39:29.140 --> 00:39:33.080
It's purely within the
HTML code right here.

00:39:33.100 --> 00:39:37.560
And so here's my app really
quickly and how that turns out.

00:39:37.590 --> 00:39:41.200
And as you can see,
here's Indiana Jones movie.

00:39:41.210 --> 00:39:45.640
The master or the movies entity is
printed on the left column right here.

00:39:45.650 --> 00:39:48.190
If you look to the right,
we've got detailed relationship

00:39:48.300 --> 00:39:52.460
like the studio and various
actors and actor names.

00:39:52.460 --> 00:39:56.940
And hopefully that gives you
an idea of how just quickly

00:39:56.940 --> 00:40:01.920
and painless it is to access
functionality and the new bindings.

00:40:01.920 --> 00:40:03.870
So back to Pierre.

00:40:03.910 --> 00:40:05.810
- Thank you, Darryl.

00:40:10.750 --> 00:40:16.420
The next feature is that we
change the login in WebObject.

00:40:16.440 --> 00:40:18.980
You have been requested
that for a number of years,

00:40:18.980 --> 00:40:22.500
and we actually agree that
NSLog is a very nice feature,

00:40:22.500 --> 00:40:23.900
but it's a bit complicated to use.

00:40:23.900 --> 00:40:28.000
So instead of keeping NSLog
internally in WebObject,

00:40:28.000 --> 00:40:29.520
we actually move to Log4j.

00:40:29.520 --> 00:40:35.040
So actually, all of WebObject code is
moving from NSLog to Log4j.

00:40:35.040 --> 00:40:37.380
And it's a much simpler API.

00:40:37.380 --> 00:40:41.060
I think all of you are using it already.

00:40:41.060 --> 00:40:45.070
You can actually turn on
and off the logging without

00:40:45.140 --> 00:40:47.820
restarting the application,
which is a great, great feature,

00:40:47.820 --> 00:40:50.550
because when you have got an application
that's run away in production

00:40:50.560 --> 00:40:53.810
and you want to see something,
being able to turn on and off the

00:40:53.810 --> 00:40:57.780
logging while the application is
running is really a great saving.

00:40:57.780 --> 00:41:00.390
And you can also do remote logging.

00:41:00.400 --> 00:41:04.100
Log4j will support and does
support remote logging,

00:41:04.100 --> 00:41:06.240
so you can actually log on
a separate machine if you

00:41:06.240 --> 00:41:07.240
need to in this production.

00:41:07.380 --> 00:41:12.710
And I'm just going to start to show
us the logging page so that you

00:41:12.710 --> 00:41:14.140
can actually see what's on there.

00:41:16.940 --> 00:41:18.140
Okay, so thank you, Pierre.

00:41:18.140 --> 00:41:22.280
So what we did is we created a component
within the Java OLO extensions,

00:41:22.280 --> 00:41:27.940
and what it will allow you to do is
actually dynamically reconfigure the

00:41:27.940 --> 00:41:33.900
logging for any class that you have
or that's in the WebObjects runtime.

00:41:33.900 --> 00:41:37.430
So it's not just limited to our classes.

00:41:37.430 --> 00:41:40.050
And it's just as easy,
or we have all the log levels

00:41:40.050 --> 00:41:41.890
exposed right here in a pop-up.

00:41:41.890 --> 00:41:46.240
So here's like the info level,
and we have a nice little icon

00:41:46.250 --> 00:41:51.020
here that displays what log
level or associates that with it.

00:41:51.110 --> 00:41:55.100
So I just want to log out
fatal errors to NSArray.

00:41:55.100 --> 00:41:58.460
Now, we have a lot of classes within
the WebObjects runtime and

00:41:58.580 --> 00:42:00.940
probably in your applications,
too.

00:42:00.940 --> 00:42:03.180
So you might want to
quickly search for them.

00:42:03.900 --> 00:42:05.940
When you want to set a custom log level.

00:42:06.030 --> 00:42:13.470
So if I want to set something
on EO editing context,

00:42:13.470 --> 00:42:13.470
edits.

00:42:14.100 --> 00:42:46.300
[Transcript missing]

00:42:50.700 --> 00:42:51.360
Thank you, Darryl.

00:42:51.360 --> 00:42:55.890
The next feature I want to
talk about is qualifiers.

00:42:55.890 --> 00:43:00.560
We discovered that in some cases,
the current qualifiers

00:43:00.560 --> 00:43:01.900
are not fast enough.

00:43:01.960 --> 00:43:04.520
And so we introduced a
new set of qualifiers,

00:43:04.520 --> 00:43:07.820
essentially the in-qualifier
and the set qualifier,

00:43:07.820 --> 00:43:13.440
that are now fully integrated
in the core of the WebObject.

00:43:14.220 --> 00:43:19.100
And we did some testing on performance,
and actually on performance

00:43:19.490 --> 00:43:23.130
with the in-qualifier versus
the set of and and ors,

00:43:23.170 --> 00:43:25.860
or the except qualifier
of the same condition.

00:43:25.860 --> 00:43:30.970
And running on a sustained system,
so that when the database

00:43:31.000 --> 00:43:36.010
has time to optimize a query,
we get about 50% gain.

00:43:36.020 --> 00:43:38.910
On a cold system,
where the database has no

00:43:38.910 --> 00:43:43.860
chance of optimizing the query,
we can get up to 10 times faster.

00:43:44.000 --> 00:43:49.040
So this is a great,
great way of optimizing your

00:43:49.430 --> 00:43:53.200
queries when you have problems
in terms of performance.

00:43:53.200 --> 00:43:55.220
I hope that you're going to like that.

00:43:57.310 --> 00:44:00.520
And the last feature I wanted to
talk about about 5.5 is foundation.

00:44:01.140 --> 00:44:06.840
Foundation is relying a lot on
locking and protection from threads.

00:44:06.840 --> 00:44:11.300
We are moving to Java concurrency class,
which instead of a re-entrant,

00:44:11.300 --> 00:44:13.770
instead of locking,
that should actually improve the

00:44:13.770 --> 00:44:16.200
performance dramatically in some cases.

00:44:16.200 --> 00:44:20.180
We have seen in some of our
testing for internal apps up to

00:44:20.180 --> 00:44:22.790
50% gain on key value coding.

00:44:22.800 --> 00:44:26.830
So this should also improve
the performance of your app.

00:44:27.200 --> 00:44:29.000
dramatically.

00:44:34.520 --> 00:44:38.030
The last thing is that we
actually reintegrated properly

00:44:38.310 --> 00:44:41.340
WebObjects in the server admin,
so you can actually now

00:44:41.350 --> 00:44:44.880
access Monitor directly
from the server admin UI.

00:44:47.040 --> 00:44:51.020
You can also access some of the
more obscure features of WebObjects,

00:44:51.020 --> 00:44:54.760
like you can actually go and access
the WOTA-SD configuration that

00:44:54.770 --> 00:44:58.940
very few people know how to access,
but now it's directly in the code.

00:45:00.840 --> 00:45:03.900
You can also look at your logs,
directly the log for Monitor and

00:45:03.900 --> 00:45:07.330
WOTSD in the server admin,
and you can actually configure

00:45:07.450 --> 00:45:09.650
everything directly from the admin panel.

00:45:09.660 --> 00:45:12.350
So we hope that the server
admin panel is going to be a

00:45:12.350 --> 00:45:14.120
lot more useful than before.

00:45:15.690 --> 00:45:20.100
and from that,
I'm going to talk about something

00:45:20.100 --> 00:45:21.930
that is very unusual here.

00:45:22.100 --> 00:45:26.990
I'm talking about a
roadmap for WebObjects.

00:45:28.500 --> 00:45:31.340
And no,
I'm not going to talk about version 66.

00:45:36.190 --> 00:45:39.340
Okay,
so what are we working on in the future?

00:45:39.350 --> 00:45:41.840
We are working about a new
deployment architecture.

00:45:41.840 --> 00:45:46.540
So we are going to rewrite Monitor and
WaterSD to make them more stable,

00:45:46.600 --> 00:45:50.260
more useful,
and give you a better ease of

00:45:50.260 --> 00:45:53.380
deploying WebObjects application,
especially on Mac OS X,

00:45:53.470 --> 00:45:57.280
but still keeping the
compatibility with other platforms.

00:45:58.230 --> 00:45:59.920
We're going to add asynchronous fetch.

00:45:59.920 --> 00:46:03.010
This has been a long-running request.

00:46:03.100 --> 00:46:08.540
What we're going to do is enable you
to have a pool of stacks so that you

00:46:08.540 --> 00:46:14.190
can actually fetch on various pools
and various connections transparently.

00:46:14.860 --> 00:46:17.590
and we're working on a set of
AO extensions so that you can

00:46:17.590 --> 00:46:23.370
actually not rewrite code all
the time for accessing user and

00:46:23.400 --> 00:46:27.420
accessing GNDI integration so
that if you need to have the

00:46:27.460 --> 00:46:29.930
LDAP users or access control list.

00:46:33.040 --> 00:46:40.680
Okay, so in terms of tools, first of all,
I want to reiterate that our recommended

00:46:40.680 --> 00:46:42.060
tools are Eclipse and Wallips.

00:46:42.060 --> 00:46:45.110
And I know that Wallips is supported
by the community and I want to

00:46:45.170 --> 00:46:48.390
extend a very warm thank you to
all the people that contribute.

00:46:48.990 --> 00:46:51.870
But...

00:46:56.720 --> 00:46:58.470
Today we are introducing one more thing.

00:46:58.500 --> 00:47:06.240
And this is that you can access
today everything that we've

00:47:06.360 --> 00:47:07.280
talked about this morning.

00:47:08.780 --> 00:47:11.030
All of the features that I've
talked about this morning

00:47:11.030 --> 00:47:13.020
are available today on ADC.

00:47:14.760 --> 00:47:18.780
You can gain early access to everything
through what we are going to do,

00:47:18.780 --> 00:47:22.450
which is releasing every
day our nightly build.

00:47:22.540 --> 00:47:27.380
So you are going to find
our own Apple internal

00:47:27.380 --> 00:47:35.170
nightly build of WebObjects,
all three versions, on ADC every day.

00:47:35.280 --> 00:47:38.890
and for making that really
easy for you to use,

00:47:39.040 --> 00:47:43.780
we have contributed a significant
plugin to Wallips to actually

00:47:43.870 --> 00:47:48.470
enable you to access those,
check them, and verify that your

00:47:48.470 --> 00:47:50.440
bugs have been fixed.

00:47:50.470 --> 00:47:53.140
And for that,
I'm going to ask Daryl to actually

00:47:53.320 --> 00:47:55.420
show you the demo of how it's done.

00:47:56.500 --> 00:47:57.060
Thank you, Pierre.

00:47:57.060 --> 00:48:04.430
So we contributed a Eclipse plug-in
or a plug-in to WorldLibs that

00:48:04.430 --> 00:48:09.240
will enable you to link against
the Nightly Build repository.

00:48:09.340 --> 00:48:12.540
And one of the things we did is
to make it easy for you guys is

00:48:12.540 --> 00:48:14.360
to create some project templates.

00:48:14.360 --> 00:48:17.700
And let me just go create a
project really quick and show

00:48:17.700 --> 00:48:19.680
you how to access this stuff.

00:48:19.840 --> 00:48:23.740
So what we did was actually
add two project templates,

00:48:23.790 --> 00:48:26.730
one for creating a Maven
WebObjects application,

00:48:26.730 --> 00:48:30.140
and then there's a
framework-styled project.

00:48:30.140 --> 00:48:33.880
So I'm going to create a quick
application for you right now.

00:48:37.700 --> 00:48:40.720
Let me show you some of the
significant parts of this.

00:48:40.730 --> 00:48:44.550
So the real significant page right
here actually is the artifact page

00:48:44.550 --> 00:48:48.370
and this particular pop-up where
you pick the WebObjects version.

00:48:48.370 --> 00:48:51.870
And right now we have a
WebObjects 5.4.2 snapshot,

00:48:51.870 --> 00:48:54.780
a 5.5 snapshot, and a 6.0 snapshot.

00:48:54.780 --> 00:48:58.260
So I'm going to pick up the
WebObjects 5.5 snapshot and of

00:48:58.370 --> 00:49:00.400
course we have a licensing text here.

00:49:00.490 --> 00:49:04.190
I encourage you all to read that and
I'll click through that and we'll

00:49:04.190 --> 00:49:06.740
just finish our application here.

00:49:08.630 --> 00:49:12.170
So what that's doing is grabbing
all the necessary information

00:49:12.180 --> 00:49:15.470
to find my local repository and

00:49:15.600 --> 00:49:30.700
[Transcript missing]

00:49:31.000 --> 00:49:37.900
[Transcript missing]

00:49:39.800 --> 00:49:42.530
Okay, save that, and no link errors.

00:49:42.750 --> 00:49:46.060
We're all happy and ready to go.

00:49:46.150 --> 00:49:49.700
So say I've got this 5.5 app,
and I'm not sure if this

00:49:49.700 --> 00:49:54.910
feature was available in 5.4.2,
or is there a bug in 5.4.2 or 5.5

00:49:54.990 --> 00:49:57.140
that I want to regress against?

00:49:57.430 --> 00:49:59.900
Let me go change the
version really quick.

00:50:00.010 --> 00:50:03.090
So I select the project properties.

00:50:03.800 --> 00:50:10.130
here, and I select our plugin,
and it's called the Apple MIM plugin,

00:50:10.130 --> 00:50:14.000
and let me just switch that to webbox542.

00:50:14.000 --> 00:50:15.330
More licensing text.

00:50:15.520 --> 00:50:20.240
But one other thing I want to point
out to you is that this is an area

00:50:20.240 --> 00:50:24.480
where you would also customize
where your local repository is,

00:50:24.480 --> 00:50:26.530
and there'll be more
information following that,

00:50:26.530 --> 00:50:29.980
but these are two other fields
that you might be interested in,

00:50:30.060 --> 00:50:31.800
the repository URLs.

00:50:31.810 --> 00:50:36.260
Okay, so I selected webbox542,
let me hit okay, and we're rebuilding,

00:50:36.570 --> 00:50:39.300
and all of a sudden we got a link error,
because that API is not

00:50:39.300 --> 00:50:42.100
available in webbox542.

00:50:42.250 --> 00:50:45.970
Okay, so that's a really quick demo,
and...

00:50:51.800 --> 00:51:15.700
[Transcript missing]

00:51:18.480 --> 00:51:22.020
So, after that, I want to thank you,
to extend a very warm thank you

00:51:22.020 --> 00:51:24.670
to a number of people that works
with WebObjects and help us to

00:51:24.790 --> 00:51:27.750
make WebObjects a very great,
great product.

00:51:27.820 --> 00:51:30.400
First of all,
I want to extend an extremely warm

00:51:30.400 --> 00:51:35.780
thank you to Wallips and all the people
that contribute to Wallips that made

00:51:35.780 --> 00:51:42.140
some great tools that not only you use,
but Apple uses internally to

00:51:42.140 --> 00:51:46.170
actually develop WebObjects
applications and that we personally

00:51:46.180 --> 00:51:48.210
use for developing WebObjects.

00:51:48.400 --> 00:51:52.930
So, we are using the same tools for doing
WebObjects that you are using externally.

00:51:52.940 --> 00:51:56.030
So, thank you very much for everyone
that contributed to Wallips.

00:52:03.660 --> 00:52:08.480
The next group that I want to
recognize is the WoW Community Group.

00:52:08.480 --> 00:52:12.940
WoW Community Group do an awesome
job at marketing WebObjects.

00:52:12.940 --> 00:52:17.850
WoW Community is, at the same time,
an organization and a website.

00:52:17.880 --> 00:52:23.810
The organization that actually did the
WoW Odyssey conference last weekend,

00:52:23.820 --> 00:52:26.760
which was extremely well
attended and there was extremely

00:52:26.760 --> 00:52:30.480
good technical presentation,
but also maintains a website

00:52:30.480 --> 00:52:36.000
where you can find podcasts,
you can find help, consultings,

00:52:36.000 --> 00:52:39.240
people that you need for developing
your great WebObjects application,

00:52:39.240 --> 00:52:44.650
and also reference sites,
applications that have been developed

00:52:44.650 --> 00:52:48.060
with WebObjects that you can actually
use to show to your customers.

00:52:48.060 --> 00:52:51.170
So, if you don't know WoW Community,
go and have a look.

00:52:51.280 --> 00:52:53.720
It's really an interesting website.

00:52:56.200 --> 00:53:00.900
and the last one I want to actually
acknowledge is Project Wander.

00:53:00.900 --> 00:53:05.320
Project Wander is a collection
of all the frameworks and all the

00:53:05.370 --> 00:53:09.470
bits and pieces of development
that you can find on WebObject.

00:53:09.510 --> 00:53:13.750
If you have got a hard problem to solve,
chance are somebody did

00:53:13.750 --> 00:53:15.520
it in Project Wander.

00:53:15.520 --> 00:53:20.930
That's where you go if you need
to do something on WebObject.

00:53:22.180 --> 00:53:27.340
So, in summary,
WebObject is why make your life difficult

00:53:27.340 --> 00:53:29.170
when you can have a very simple solution?

00:53:33.700 --> 00:53:34.700
and many more.

00:53:34.700 --> 00:53:36.260
Really, make your life simple.

00:53:36.260 --> 00:53:37.700
Use WebObjects.

00:53:37.700 --> 00:53:41.100
WebObjects is a proven way to
create web applications from

00:53:41.100 --> 00:53:45.540
the tiniest things to the very,
very large e-commerce solutions.

00:53:45.540 --> 00:53:47.800
It's really,
really fast in development and we

00:53:47.800 --> 00:53:52.280
are trying to make it even faster
to just make you write less code.

00:53:52.530 --> 00:53:54.300
Really, you should try it out.

00:53:54.600 --> 00:53:57.030
Actually,
we have got a great session coming

00:53:57.030 --> 00:54:02.480
at 2:00 this afternoon where we have
got two trainers that are going to

00:54:02.480 --> 00:54:08.400
build a full WebObject application
on stage in less than one hour.

00:54:08.400 --> 00:54:11.430
So if you want to see how a
WebObject application is built,

00:54:11.430 --> 00:54:15.240
I invite you all to come to the session
this afternoon where you're going to

00:54:15.560 --> 00:54:19.420
see how it's done in less than an hour.

00:54:19.500 --> 00:54:23.490
On that,
I'm going to call Francois back on stage.

00:54:31.150 --> 00:54:35.690
- I realize that the second part of this
session was very WebObjects-centric.

00:54:35.800 --> 00:54:40.140
For Java desktop developers,
stay tuned and stay seated

00:54:40.140 --> 00:54:43.260
because next session,
the session starting

00:54:43.260 --> 00:54:48.700
in about half an hour,
I'd say, will be all about Java on

00:54:48.710 --> 00:54:51.450
the Mac OS X on Snow Leopard.

00:54:53.780 --> 00:54:55.940
So the conference is young.

00:54:55.980 --> 00:54:58.160
We know that throughout the
week you're going to hear about

00:54:58.310 --> 00:55:02.750
competing server technologies such
as Ruby on Rails on whichever new

00:55:02.750 --> 00:55:07.070
interpreted web stuff there is,
I don't know.

00:55:08.180 --> 00:55:11.760
Let me restate a simple fact.

00:55:11.900 --> 00:55:18.120
Mac OS X server, Java, WebObjects,
all of Apple's business is

00:55:18.190 --> 00:55:20.640
built on these technologies.

00:55:22.260 --> 00:55:27.760
Every way money comes into
Apple goes through Java.

00:55:28.150 --> 00:55:31.060
We are not taking chance
with anything else.

00:55:31.140 --> 00:55:34.000
The question is,
should you take any chance?

00:55:38.170 --> 00:55:42.150
At this point of the presentation,
I'd like to welcome my co-presenters to

00:55:42.150 --> 00:55:44.320
come back on stage and prepare for Q&A.

00:55:44.320 --> 00:55:48.720
But in the meantime,
I have a few announcements to make.

00:55:48.960 --> 00:55:52.330
For more information,
please contact Matt Trans,

00:55:52.330 --> 00:55:56.060
who was brave enough to
put his email on the slide.

00:55:56.060 --> 00:56:01.440
And you can also participate in the
Java Dev and WebObjects dev mailing list,

00:56:01.440 --> 00:56:03.870
but be aware these
lists are not under NDA,

00:56:03.930 --> 00:56:07.520
so you cannot discuss whatever
you have learned today.

00:56:07.900 --> 00:56:12.160
Documentation sample code,
the demo code that Daryl

00:56:12.160 --> 00:56:15.950
has so well presented,
will be available on the

00:56:15.950 --> 00:56:19.510
developer.apple.com WODC website.

00:56:20.300 --> 00:56:24.300
We have two related sessions,
one right after on Java,

00:56:24.300 --> 00:56:26.080
one this afternoon on WebObjects.

00:56:26.080 --> 00:56:30.510
We also have two labs throughout the week
and a WebObjects community gathering.