WEBVTT

00:00:20.180 --> 00:00:21.490
My name is Ken McLeod.

00:00:21.500 --> 00:00:24.100
I'm an engineer in the data
security group at Apple.

00:00:24.100 --> 00:00:28.100
Data security is kind of responsible
for all those security pieces,

00:00:28.100 --> 00:00:33.980
security framework, keychain,
certificates, code signing and the like.

00:00:33.980 --> 00:00:35.220
So let's get started.

00:00:36.560 --> 00:00:39.740
Some of the things
we'll be covering today,

00:00:39.740 --> 00:00:41.860
first just a bit of review.

00:00:41.860 --> 00:00:44.830
What exactly do we mean
by a digital identity?

00:00:44.830 --> 00:00:47.090
We'll cover that.

00:00:47.090 --> 00:00:48.520
And how do you get one?

00:00:48.570 --> 00:00:49.780
How do you create one?

00:00:49.780 --> 00:00:51.840
If you already got one,
how do you import it?

00:00:51.840 --> 00:00:54.380
Just, you know, where does it come from?

00:00:54.380 --> 00:00:57.480
Once I've got it,
how can I move it to another system?

00:00:57.480 --> 00:01:02.270
A big one here we're going to be
covering is how certificates are

00:01:02.270 --> 00:01:04.700
actually trusted on Mac OS X.

00:01:04.700 --> 00:01:06.380
And this has changed.

00:01:06.560 --> 00:01:08.530
So, we're going to be talking
about the different types

00:01:08.700 --> 00:01:11.430
of certificates in Mac OS X,
X5 from previous systems,

00:01:11.540 --> 00:01:13.300
if you were familiar with those.

00:01:13.340 --> 00:01:19.280
We'll talk a bit about how you find
a user's preferred identity and what

00:01:19.280 --> 00:01:22.020
exactly a preferred identity is on OS X.

00:01:22.170 --> 00:01:25.420
Now, we're talking about OS X here,
but all of this applies if you're

00:01:25.420 --> 00:01:28.450
an iPhone developer as well,
because you'll be doing this on

00:01:28.450 --> 00:01:31.260
OS X when you're developing for iPhone.

00:01:31.910 --> 00:01:35.310
And especially if you're going to
use your identity for code signing,

00:01:35.440 --> 00:01:37.440
as we learned in the
code signing session,

00:01:37.440 --> 00:01:40.220
you'll be able to find
out how to do that here.

00:01:40.220 --> 00:01:41.460
So let's get started.

00:01:41.460 --> 00:01:44.720
First things first,
what do we mean by identity?

00:01:44.720 --> 00:01:47.210
And identity is two things.

00:01:47.250 --> 00:01:50.760
The identity is a private
key and a certificate.

00:01:50.840 --> 00:01:53.600
Now you need both of those
and it's very important.

00:01:53.670 --> 00:01:57.270
The private key is something that
you have and no one else has.

00:01:57.310 --> 00:01:59.550
That establishes who you are.

00:02:00.100 --> 00:02:02.640
An identity answers the question,
who am I?

00:02:02.950 --> 00:02:06.360
And I am the person that holds
this key and nobody else has it.

00:02:06.440 --> 00:02:11.420
And the identity is also the certificate,
which identifies you as the key holder

00:02:11.420 --> 00:02:15.730
and it also has some information
about what you can do with that key,

00:02:15.730 --> 00:02:19.600
usually limiting the types
of usages that you can do.

00:02:19.600 --> 00:02:20.800
It's very important.

00:02:20.880 --> 00:02:23.720
We've had a lot of bug reports,
people saying, well,

00:02:23.720 --> 00:02:27.940
I took my certificate and I copied it
to another machine and it doesn't work.

00:02:28.290 --> 00:02:32.150
Well, you need both the certificate and
the key to make up an identity

00:02:32.210 --> 00:02:33.940
and that's very important.

00:02:33.940 --> 00:02:35.510
I'll touch on that again later.

00:02:35.640 --> 00:02:41.250
Identities live in key chains
and a key chain can be a standard

00:02:41.250 --> 00:02:44.340
file-based key chain on Mac OS X.

00:02:44.540 --> 00:02:49.840
Key chains can also be tokens like smart
cards that are secure that you plug in.

00:02:49.940 --> 00:02:53.470
We have something called a token
D module that you can write

00:02:53.470 --> 00:02:57.550
and get more information about
from the developer support site.

00:02:57.640 --> 00:03:01.170
Which supports different kinds
of smart cards or tokens.

00:03:01.180 --> 00:03:06.340
And if you have an LDAP directory,
you can look up certificates there.

00:03:06.340 --> 00:03:08.960
They can live in a user record
if you have the appropriate

00:03:08.960 --> 00:03:12.220
attribute set that contain the
certificates in the user record.

00:03:14.240 --> 00:03:16.300
Here's something that's very important.

00:03:16.370 --> 00:03:19.850
A single user can have
all sorts of identities.

00:03:19.960 --> 00:03:22.530
There's a one-to-many mapping here.

00:03:22.670 --> 00:03:25.230
I'm different people at work and at home.

00:03:25.240 --> 00:03:28.340
I have a different email address
for each and I sort of have

00:03:28.450 --> 00:03:30.730
different uses for each of those.

00:03:30.900 --> 00:03:33.640
I can also have certificates
from different issuers.

00:03:33.690 --> 00:03:36.620
I can have one that's issued to
me from .Mac or from Apple and

00:03:36.770 --> 00:03:40.100
I can have one that's issued
to me from VeriSign or Thought.

00:03:40.330 --> 00:03:43.940
And I also have different identities
based on what it is I'm doing.

00:03:43.950 --> 00:03:46.700
So if I'm signing email,
that's one identity.

00:03:46.740 --> 00:03:50.190
If I'm encrypting data,
that's another identity.

00:03:51.100 --> 00:06:17.500
[Transcript missing]

00:06:18.070 --> 00:06:19.840
So here's the process.

00:06:19.890 --> 00:06:24.840
You start off by creating a key pair,
a public-private key pair,

00:06:24.840 --> 00:06:26.040
locally on the user's machine.

00:06:26.040 --> 00:06:30.330
This is done for you by Safari in
cases where you're going to a

00:06:30.520 --> 00:06:31.940
certificate authority's website.

00:06:31.940 --> 00:06:35.630
It ends up calling an
API setkeycreatepair,

00:06:35.630 --> 00:06:38.500
which is in the security
framework in setkey.

00:06:38.500 --> 00:06:41.600
And that creates a key pair
for you on your computer.

00:06:42.600 --> 00:06:46.540
And then the next step is to take
that public key and the browser

00:06:46.540 --> 00:06:50.600
will wrap it up in the form of
a certificate signing request,

00:06:50.600 --> 00:06:51.130
a CSR.

00:06:51.130 --> 00:06:55.880
And that CSR gets sent off
to the certificate authority.

00:06:57.280 --> 00:07:01.400
The certificate authority processes
it and signs your certificate.

00:07:01.450 --> 00:07:03.750
And when it's ready,
you'll either download

00:07:03.750 --> 00:07:05.560
it or get it via email.

00:07:05.610 --> 00:07:09.800
And it'll go into your
keychain where identities live.

00:07:10.320 --> 00:07:14.680
The kind of alternate method
that we see a lot in enterprise

00:07:14.690 --> 00:07:18.750
and large organizations is
where the certificate authority,

00:07:19.000 --> 00:07:22.970
sort of the IT infrastructure,
generates the key pair and the cert and

00:07:23.070 --> 00:07:25.340
then pushes it to the user in some way.

00:07:25.340 --> 00:07:30.450
Typically, this is done by giving you a
wrapped encrypted container,

00:07:30.450 --> 00:07:31.810
a P12 file.

00:07:31.820 --> 00:07:35.780
This PKCS 12 standard is an
encrypted standard to let you

00:07:35.780 --> 00:07:38.140
transport it between machines.

00:07:38.920 --> 00:07:43.110
You can also get it in the form of a
smart card or a token that has your

00:07:43.110 --> 00:07:46.070
private key and your certificate on it.

00:07:46.180 --> 00:07:51.200
So that gets given to our user here,
in this case, Bob,

00:07:51.200 --> 00:07:53.280
and then the end result is the same.

00:07:53.280 --> 00:07:55.930
He ends up with an identity,
which is the private key

00:07:55.940 --> 00:07:58.820
and the certificate in his
key chain on his computer.

00:07:58.820 --> 00:08:02.420
If you already have an
identity from somewhere else,

00:08:02.420 --> 00:08:07.900
again, I mentioned the standard way of
moving that around is with PKCS 12.

00:08:08.170 --> 00:08:09.500
That's just a standard format.

00:08:09.500 --> 00:08:14.710
We support the extensions there, P12,
PKCS 12, PFX.

00:08:14.780 --> 00:08:18.220
We see PFX when those files
are created on Windows,

00:08:18.220 --> 00:08:19.260
typically.

00:08:19.260 --> 00:08:22.200
But it's a standard format,
so you can bring those over,

00:08:22.200 --> 00:08:25.950
and you can either import them with
the Keychain Access utility just

00:08:26.240 --> 00:08:29.900
by double-clicking or drag-and-drop
or importing with the menu.

00:08:29.900 --> 00:08:35.080
You have most options that are available
in Keychain Access are also available at

00:08:35.130 --> 00:08:38.020
the command line with the security tool.

00:08:38.140 --> 00:08:38.970
It's in user bin.

00:08:38.980 --> 00:08:43.080
That really is a Swiss army knife
of security-related functionality.

00:08:43.080 --> 00:08:45.540
And in this case,
there's an import command that

00:08:45.540 --> 00:08:47.460
lets you import from a PKCS 12.

00:08:47.460 --> 00:08:51.380
You can also go down and use the
API that that tool is calling,

00:08:51.380 --> 00:08:53.810
which is SecKeychainItemImport.

00:08:53.820 --> 00:08:57.310
That's been in there since
Tiger in the SecImportExport

00:08:57.310 --> 00:08:59.600
header is where you'll find that.

00:08:59.640 --> 00:09:03.800
In this case,
if you were importing from a P12 file,

00:09:03.800 --> 00:09:08.020
you'll specify the constant
KSEC format PKCS 12.

00:09:08.140 --> 00:09:10.120
Which says my input format is that.

00:09:10.140 --> 00:09:13.380
And if you have a key that
you're bringing in from OpenSSL,

00:09:13.380 --> 00:09:15.100
there's a constant for that as well.

00:09:15.100 --> 00:09:17.840
So that lets you import
all sorts of things.

00:09:19.330 --> 00:09:22.580
The flip side of that,
you can also export an identity

00:09:22.580 --> 00:09:25.200
that's in your keychain the same way.

00:09:25.210 --> 00:09:29.250
With the GUI with Keychain Access,
you just select export

00:09:29.660 --> 00:09:31.160
and save it to the file.

00:09:31.280 --> 00:09:33.820
You can use the command
line tool security export.

00:09:33.820 --> 00:09:37.260
There is also the API set
keychain item export,

00:09:37.260 --> 00:09:40.390
which does exactly what you would think.

00:09:40.390 --> 00:09:43.730
And in this case,
if I want to export to a P12 file,

00:09:43.730 --> 00:09:47.690
I can specify that constant and
it will create the file for me.

00:09:48.800 --> 00:09:53.330
Something that we've had as a
feature request in previous WWDCs,

00:09:53.330 --> 00:09:56.980
people want to be able to
import or create an identity

00:09:56.980 --> 00:10:01.160
in a keychain container and not
have it be able to be exported.

00:10:01.160 --> 00:10:02.180
And that is possible.

00:10:02.180 --> 00:10:06.710
And the way to do that is to
clear the extractable flag.

00:10:06.710 --> 00:10:11.930
There's a set of flags when you call set
keychain item import that are passed in.

00:10:11.930 --> 00:10:15.470
And one of those flags is
CSSM key adder extractable.

00:10:15.470 --> 00:10:21.150
And if that is cleared,
then the private key cannot be removed

00:10:21.150 --> 00:10:25.530
from that keychain container or exported.

00:10:27.420 --> 00:10:30.790
So when we're creating identities,
here's kind of the blueprint,

00:10:30.790 --> 00:10:31.800
the template here.

00:10:31.800 --> 00:10:36.430
You'll want to either, well,
we'll start by creating

00:10:36.500 --> 00:10:38.350
a certificate authority.

00:10:38.350 --> 00:10:41.890
And then you can use that
certificate authority to issue

00:10:41.890 --> 00:10:44.400
certificates directly from there.

00:10:44.400 --> 00:10:48.030
Or what a lot of people will
do is issue an intermediate

00:10:48.030 --> 00:10:52.800
certificate authority from that for
a particular subset of the hierarchy

00:10:53.020 --> 00:10:55.780
of their business or organization.

00:10:56.500 --> 00:11:01.200
And the other thing to think about is
you have to have some way of providing

00:11:01.200 --> 00:11:08.890
the root certificate to your users so
they're able to set up a chain of trust.

00:11:08.890 --> 00:11:08.890
And we'll talk about
how trust happens here.

00:11:09.400 --> 00:13:15.300
[Transcript missing]

00:13:16.200 --> 00:15:51.200
[Transcript missing]

00:15:52.930 --> 00:15:55.250
So I've got these
identities on my system.

00:15:55.250 --> 00:15:57.380
What are some of the opportunities?

00:15:57.430 --> 00:15:59.460
What are some of the things I can do?

00:15:59.460 --> 00:16:01.870
Well, first off,
I could use an identity to

00:16:01.990 --> 00:16:03.580
sign or encrypt something.

00:16:03.580 --> 00:16:06.440
And the API for signing or
encrypting that you'll be

00:16:06.440 --> 00:16:08.360
interested in here is CMS ENCODE.

00:16:08.420 --> 00:16:11.540
CMS stands for Cryptographic
Message Syntax.

00:16:11.540 --> 00:16:14.830
But that's, again,
in the security framework.

00:16:14.830 --> 00:16:18.920
Look in the CMS ENCODER header
and you'll find the API there.

00:16:19.200 --> 00:16:21.140
It takes a secidentity reference.

00:16:21.140 --> 00:16:23.640
So it's a reference to
one of those identities.

00:16:23.910 --> 00:16:25.500
Remember the private
key and the certificate.

00:16:25.500 --> 00:16:29.440
And then you can sign or encrypt
something to some recipients whose

00:16:29.440 --> 00:16:31.880
certificates you've also looked up.

00:16:31.900 --> 00:16:36.920
Another thing you can do with identities,
obviously, is client-side authentication.

00:16:36.920 --> 00:16:41.670
If you're using the secure
transport APIs directly down at

00:16:41.670 --> 00:16:46.770
the lowest level of the stack here,
you can use SSL set certificate

00:16:46.830 --> 00:16:49.180
to set a particular identity.

00:16:49.180 --> 00:16:51.520
That you'll use to authenticate.

00:16:51.710 --> 00:16:55.890
Or if you're using CF Network,
which is built on top of that,

00:16:56.160 --> 00:16:59.600
there is a property,
KCF Stream SSL Certificates.

00:16:59.600 --> 00:17:04.810
And if you have an identity that you
want to pass as the client certificate,

00:17:04.810 --> 00:17:06.920
you'll set that there.

00:17:08.690 --> 00:17:13.870
If you need even lower level access,
SecIdentity has accessors to get

00:17:13.870 --> 00:17:17.940
out the certificate or the private
key given an identity reference.

00:17:18.030 --> 00:17:22.890
And then you can do whatever functions
in the SecCertificate or SecKey

00:17:22.910 --> 00:17:29.140
headers that you would need to do
things individually with those.

00:17:30.240 --> 00:17:32.780
How do I know out of all
of the identities that

00:17:32.790 --> 00:17:34.900
I've got which one to use?

00:17:34.900 --> 00:17:38.000
Looking up is something that
you're going to be doing.

00:17:38.000 --> 00:17:41.870
Well,
there are a lot of considerations here.

00:17:41.980 --> 00:17:45.770
I could be needing an identity to sign
an email with and perhaps I need to

00:17:45.890 --> 00:17:48.100
find one that matches my email address.

00:17:48.100 --> 00:17:50.340
That's kind of the common use case.

00:17:50.340 --> 00:17:54.830
I might be doing a SSL server
and in that case I need to have

00:17:54.830 --> 00:17:58.820
an identity that matches perhaps
the host name that I'm serving.

00:17:59.620 --> 00:18:01.490
So, name is a consideration.

00:18:01.790 --> 00:18:03.300
Issuer is also a consideration.

00:18:03.300 --> 00:18:06.570
Obviously,
if you're sending a client certificate,

00:18:06.760 --> 00:18:10.540
some servers will only accept identities
that are signed by a particular CA.

00:18:10.540 --> 00:18:13.190
So,
you may need to narrow it down that way.

00:18:13.190 --> 00:18:15.800
Usage is a consideration.

00:18:15.800 --> 00:18:20.570
Obviously, if you have something
that requires encryption,

00:18:20.690 --> 00:18:24.590
you only want to get identities
that will be able to be

00:18:24.600 --> 00:18:27.240
capable of doing encryption.

00:18:29.140 --> 00:18:31.480
You need an identity
that can sign your code.

00:18:31.690 --> 00:18:33.500
Well, that narrows it down.

00:18:33.650 --> 00:18:35.250
Not every identity can sign code.

00:18:35.290 --> 00:18:40.810
So, you'll need to look for an
identity that does that.

00:18:40.890 --> 00:18:46.150
For most of that,
you need to find out what the user wants.

00:18:46.150 --> 00:18:49.640
And there are preference
considerations here because users,

00:18:49.640 --> 00:18:52.080
as I said,
often have more than one identity.

00:18:52.080 --> 00:18:55.990
In the past,
we've had even Apple applications

00:18:56.090 --> 00:18:59.450
fall into this trap where they
just blindly picked an identity.

00:18:59.470 --> 00:19:00.310
Oh, that one matches.

00:19:00.310 --> 00:19:00.820
Let's use it.

00:19:00.890 --> 00:19:03.540
But no,
you really have to have the user involved

00:19:03.580 --> 00:19:05.900
in this to say which identity is correct.

00:19:06.000 --> 00:19:09.490
So all of these are considerations
when looking up an identity.

00:19:09.520 --> 00:19:13.050
So how do we narrow that down?

00:19:13.050 --> 00:19:18.140
Well, one tool that came in with Leopard,
Certificate Preferences,

00:19:18.140 --> 00:19:22.130
lets us specify which identity
or certificate we want to

00:19:22.130 --> 00:19:24.190
use for a particular use.

00:19:24.190 --> 00:19:28.390
So if I have an email address,
I can set up a preferred identity

00:19:28.390 --> 00:19:31.180
that's mapped to that email address.

00:19:31.180 --> 00:19:34.930
Or if I'm visiting a particular server,
I can set up an identity

00:19:34.930 --> 00:19:38.740
preference that maps the
certificate I want to that server.

00:19:38.740 --> 00:19:41.270
I can also...

00:19:41.390 --> 00:19:42.290
The key usage.

00:19:42.290 --> 00:19:49.060
I can set up a signing key or
encryption key for those purposes.

00:19:49.060 --> 00:19:51.860
These certificate preference
items or identity preferences

00:19:51.860 --> 00:19:53.680
are just standard keychain items.

00:19:53.860 --> 00:19:58.800
The advantage of that is you
can sync them across machines.

00:19:58.800 --> 00:20:01.300
They're just normal keychain items.

00:20:01.300 --> 00:20:02.400
They go back and forth.

00:20:02.460 --> 00:20:06.280
Right now Safari and iChat
are big users of these.

00:20:06.280 --> 00:20:09.700
We're seeing more uses come online.

00:20:09.700 --> 00:20:14.180
The standard use case here that
we envision is that you'll only

00:20:14.180 --> 00:20:16.100
create these when you need to.

00:20:16.290 --> 00:20:20.680
So at the time that there's some
ambiguity and you need to ask the user

00:20:20.730 --> 00:20:25.530
which identity do you want to use,
at that time you can create a

00:20:25.600 --> 00:20:28.460
preference in line as needed.

00:20:28.530 --> 00:20:32.390
But there will be cases where you can
also create a preference manually ahead

00:20:32.530 --> 00:20:37.630
of time if you need to preconfigure a
system to have a particular preference.

00:20:37.770 --> 00:20:40.090
And there's a few ways to do that.

00:20:40.450 --> 00:20:46.460
There is a lot of use cases that allow
you to create a preference manually.

00:20:46.470 --> 00:20:49.140
So let's go ahead and look at this.

00:20:49.180 --> 00:20:51.430
So this is the most common use case.

00:20:51.430 --> 00:20:54.910
If you're using a keychain access,
you're going to have to

00:20:54.930 --> 00:20:57.840
create a preference in line,
which is a keychain access.

00:20:57.920 --> 00:21:01.130
So you can set a preference in line,
and you can also create a

00:21:01.130 --> 00:21:03.120
preference for a keychain access.

00:21:03.120 --> 00:21:07.880
You can create a preference in line,
which is a keychain access.

00:21:07.940 --> 00:21:10.510
You can create a preference in line,

00:21:19.050 --> 00:21:23.860
So the primary APIs that will
be of interest here when working

00:21:23.860 --> 00:21:28.320
with certificate preferences,
you have SecIdentityCopyPreference.

00:21:28.590 --> 00:21:35.660
Now, this lets you pass in the particular
name or URL that you're looking for

00:21:35.830 --> 00:21:39.480
and to see if there is a preferred
identity that the user is said to use.

00:21:39.600 --> 00:21:43.110
Now,
this can return nil and be prepared for

00:21:43.110 --> 00:21:45.900
there to be no preference at that time.

00:21:45.970 --> 00:21:50.720
And we'll talk about how to
handle that in the next slide.

00:21:50.970 --> 00:21:55.020
There is also obviously a way
to set that with set preference.

00:21:55.130 --> 00:22:00.960
SecCertificateCopyPreference lets you
look up a preference for someone else.

00:22:01.050 --> 00:22:04.530
So for example,
if I want to send an email

00:22:04.530 --> 00:22:08.290
to Perry or to Murph,
they may have a preferred address

00:22:08.290 --> 00:22:12.400
that they want to receive or
to use for encrypted email.

00:22:12.460 --> 00:22:15.900
And that preference will let
me find out what that is.

00:22:21.600 --> 00:22:24.790
And when you set that API-- excuse me.

00:22:24.840 --> 00:22:27.950
When you set that preference,
the API to use is sex

00:22:27.950 --> 00:22:30.200
certificate set preference.

00:22:35.130 --> 00:22:38.840
So here's the general process
for looking up an identity.

00:22:38.840 --> 00:22:43.480
On Mac OS X, you'll start with
SecIdentityCopyPreference.

00:22:43.520 --> 00:22:44.900
That's just the first step.

00:22:44.960 --> 00:22:46.920
Is there a preferred identity?

00:22:46.920 --> 00:22:48.250
And if there is, you're done.

00:22:48.250 --> 00:22:48.950
You found it.

00:22:49.020 --> 00:22:50.920
You can go ahead and use that identity.

00:22:50.940 --> 00:22:55.400
If there isn't, then you can look up what
identities are available.

00:22:55.400 --> 00:22:58.470
And to do that,
you'll use SecIdentitySearchCreate.

00:22:58.520 --> 00:23:02.400
SecIdentitySearchCreate lets
you set up the parameters.

00:23:02.400 --> 00:23:04.480
And it's an iterative call.

00:23:04.640 --> 00:23:07.570
So you'll call
SecIdentitySearchCopyNext to get

00:23:07.790 --> 00:23:12.910
as many as you need that match
the criteria until you're done.

00:23:12.920 --> 00:23:19.480
Now, this is a pretty broad search,
and there's not a lot of ways to

00:23:19.600 --> 00:23:21.520
narrow it other than by key usage.

00:23:25.450 --> 00:23:29.930
You'll often have more than
one identity that matches.

00:23:30.150 --> 00:23:32.010
And in that case,

00:23:37.200 --> 00:23:38.520
Throat's been doing this to me all week.

00:23:38.570 --> 00:23:42.100
In that case, you'll usually have to
ask the user to choose.

00:23:42.100 --> 00:23:44.920
Now, iPhone is a little bit different.

00:23:44.930 --> 00:23:50.400
A lot of you have noticed that the
security frameworks have diverged

00:23:50.400 --> 00:23:52.470
between the iPhone and Mac OS X.

00:23:52.470 --> 00:23:56.080
And unfortunately,
they haven't converged yet.

00:23:56.110 --> 00:23:58.140
We're on a path to bring them together.

00:23:58.140 --> 00:24:08.140
But the iPhone OS is first to
implement sec item copy matching.

00:24:08.140 --> 00:24:09.480
Now, this is also coming to Mac OS X,
the desktop as well.

00:24:09.480 --> 00:24:11.320
But this is kind of the next
generation of looking up items,

00:24:11.320 --> 00:24:14.060
identities, keychain items,
what have you,

00:24:14.080 --> 00:24:18.870
by passing in a CFDictionaryRef that
comprises a dictionary of the

00:24:18.870 --> 00:24:21.280
things that you want to match.

00:24:21.280 --> 00:24:25.220
And it will return the items
that it's found as a CFArray.

00:24:25.220 --> 00:24:27.850
And this is the direction we're going.

00:24:28.210 --> 00:24:31.250
So, we're going to be using the phone
and the Mac OS X to try to merge

00:24:31.250 --> 00:24:33.010
APIs between the phone and Mac OS X.

00:24:33.120 --> 00:24:36.150
So, I mentioned that there are going
to be times when you have more

00:24:36.150 --> 00:24:39.540
than one match and you're going
to have to ask the user to choose.

00:24:39.540 --> 00:24:44.820
There is a standard piece of
user interface on Mac OS X here

00:24:44.850 --> 00:24:48.130
called SF Choose Identity Panel.

00:24:48.140 --> 00:24:53.030
And this has been available since 10.4.

00:24:53.470 --> 00:24:57.230
And it just lets you present a
list of identities in a standard

00:24:57.230 --> 00:25:00.010
way the user can pick from.

00:25:05.120 --> 00:25:08.900
If it all possible, don't make it modal.

00:25:09.300 --> 00:25:10.850
Modal is always a better solution.

00:25:10.860 --> 00:25:15.510
So if you can present that perhaps
as a pop-up menu of choices that the

00:25:15.510 --> 00:25:19.880
user can pick from when they need to,
that's kind of a better

00:25:19.880 --> 00:25:22.040
way than a modal dialog.

00:25:22.090 --> 00:25:25.180
If there is a preferred identity
and you already know how to find it,

00:25:25.250 --> 00:25:28.290
you call secidentitycopypreference
to find it.

00:25:28.290 --> 00:25:31.350
If there is one,
that could be the default

00:25:31.810 --> 00:25:33.520
choice in your menu.

00:25:33.520 --> 00:25:36.580
So switching gears quickly.

00:25:36.840 --> 00:25:41.700
There have been some changes since
10.4 and earlier in the trust model.

00:25:41.700 --> 00:25:44.440
It was pretty simple before.

00:25:44.700 --> 00:25:47.700
You had a single source of
trust for all certificates.

00:25:47.700 --> 00:25:51.790
If the root certificate
lived in X.509 anchors,

00:25:51.910 --> 00:25:52.700
then it was trusted.

00:25:52.700 --> 00:25:54.550
Now,

00:25:54.910 --> 00:25:58.790
The problem there is that you had to
be an administrator in the system in

00:25:58.800 --> 00:26:02.980
order to get anything trusted or to
add anything to that or modify it.

00:26:04.140 --> 00:26:07.800
In Leopard 10.5 and later,
there are actually things

00:26:07.800 --> 00:26:08.990
called trust domains.

00:26:08.990 --> 00:26:11.990
System trust is something
that doesn't change.

00:26:12.000 --> 00:26:13.310
It's what ships out of the box.

00:26:13.310 --> 00:26:15.960
It is the set of root
certificates Apple ships you.

00:26:15.960 --> 00:26:20.170
But you can override those in the
admin trust domain by adding your

00:26:20.170 --> 00:26:24.640
own root certificates or own trust
settings and even override things

00:26:24.640 --> 00:26:26.980
that Apple has said was trusted.

00:26:26.980 --> 00:26:30.380
And then the user trust domain
is a per user domain that

00:26:30.430 --> 00:26:32.380
can override both of those.

00:26:32.380 --> 00:26:35.790
Now, if you're an administrator
that needs to disable that,

00:26:35.790 --> 00:26:37.320
there's a way to do that.

00:26:37.320 --> 00:26:41.500
But in general,
the user has the ability to say which

00:26:41.500 --> 00:26:48.280
certificates they trust and to add
trust just for their own user account.

00:26:50.420 --> 00:26:55.980
So a key thing to remember here
is that trust is no longer tied

00:26:56.220 --> 00:26:57.890
to where the certificate lives.

00:26:58.010 --> 00:27:01.290
There's no magic keychain location
that if you put a certificate in,

00:27:01.300 --> 00:27:01.720
it's trusted.

00:27:01.720 --> 00:27:04.300
Certificates can
essentially live anywhere.

00:27:04.300 --> 00:27:09.050
Don't put them in X.509 anchors
anymore because that won't trust them.

00:27:10.380 --> 00:27:14.610
So we provide again the system roots
in system library keychains and there's

00:27:14.610 --> 00:27:16.860
actually several keychains there.

00:27:16.860 --> 00:27:20.330
But when you add a root
certificate to the system,

00:27:20.330 --> 00:27:23.120
you can add it to the system keychain.

00:27:23.120 --> 00:27:26.090
Well, why there instead of anywhere else?

00:27:26.140 --> 00:27:30.860
The system keychain has the property of
being shared across all user accounts.

00:27:30.860 --> 00:27:34.440
So all user accounts can see
the system keychain by default.

00:27:34.470 --> 00:27:37.820
So if you add a root certificate there,
then it's able to be

00:27:38.050 --> 00:27:39.510
seen across the system.

00:27:40.360 --> 00:27:42.410
But it really doesn't matter.

00:27:42.410 --> 00:27:47.460
Your trusted root certificates can
live actually in any keychain you want.

00:27:51.570 --> 00:27:56.150
The way we establish trust is
by starting with a certificate

00:27:56.180 --> 00:27:58.130
we call the LEAF certificate,
the one we're interested in.

00:27:58.140 --> 00:27:59.500
Is this trusted?

00:27:59.540 --> 00:28:01.500
And we look and see who signed it.

00:28:01.720 --> 00:28:04.350
Typically that may be an
intermediate or it may be the root.

00:28:04.350 --> 00:28:07.470
If there's another
certificate that signed it,

00:28:07.470 --> 00:28:11.220
we look at it and so on until we
get to one at the end of the chain

00:28:11.290 --> 00:28:13.360
that we can't go any further.

00:28:13.360 --> 00:28:14.420
It's signed itself.

00:28:14.440 --> 00:28:17.820
And if that certificate is trusted,
then we've built a chain of

00:28:17.820 --> 00:28:21.290
trust and we know we can trust
the LEAF certificate at the end.

00:28:21.500 --> 00:28:24.070
Well, the problem here--

00:28:24.490 --> 00:28:28.090
is that you're trusting an
awful big scope of things by

00:28:28.140 --> 00:28:29.500
trusting the root certificate.

00:28:29.570 --> 00:28:32.540
If you're trusting something like
VeriSign with the thousands and

00:28:32.540 --> 00:28:36.230
thousands of certificates they issue,
you know, by trusting them,

00:28:36.240 --> 00:28:38.430
you're trusting
everything they've issued.

00:28:38.530 --> 00:28:41.350
So there are cases where you'll
want to narrow the scope of trust

00:28:41.410 --> 00:28:43.980
and maybe set a trusted anchor.

00:28:44.160 --> 00:28:48.640
A little bit lower down the chain
and this is trusting less things.

00:28:48.700 --> 00:28:52.520
And in fact,
I can even say that just one certificate,

00:28:52.620 --> 00:28:55.830
just that leaf certificate is
trusted and I don't have to go

00:28:55.830 --> 00:29:00.100
up any higher or extend any trust
beyond that one certificate.

00:29:00.360 --> 00:29:09.050
So, there are, time for the water again.

00:29:11.640 --> 00:29:15.460
So Leopard makes it pretty easy
with Certificate Assistant to set

00:29:15.740 --> 00:29:18.800
up a CA and create certificates.

00:29:18.800 --> 00:29:23.100
And this has some things to think about,
some implications.

00:29:23.100 --> 00:29:27.250
You obviously want to make sure
that the private key that goes

00:29:27.270 --> 00:29:31.520
with that is trusted because your
CA is only as trustworthy as,

00:29:31.520 --> 00:29:35.640
you know, that the private key is
held in your possession.

00:29:35.640 --> 00:29:40.360
If that gets out,
then your CA is no longer trustworthy.

00:29:40.360 --> 00:29:44.490
If you're setting up systems
for an organization or for,

00:29:44.490 --> 00:29:50.410
you know, a lab, there is a big kind of
shift between 10.4 and 10.5.

00:29:50.870 --> 00:29:53.570
Previously,
you added it to the X.500 Anchors

00:29:53.630 --> 00:29:57.740
keychain because that was the
magic location that was trusted.

00:29:57.970 --> 00:30:02.530
In Leopard, in X.509 and later,
go ahead and add it to the system

00:30:02.530 --> 00:30:06.200
keychain if you want it to be seen
across all users of the system.

00:30:06.200 --> 00:30:08.510
But you'll need to do an additional step.

00:30:08.580 --> 00:30:10.160
You'll need to mark the
certificate as trusted.

00:30:10.240 --> 00:30:12.120
Now, how do I do that?

00:30:12.360 --> 00:30:16.730
Well, the security tool,
obviously the jack-of-all-trades

00:30:16.730 --> 00:30:19.810
security tool,
has an add-trusted cert command.

00:30:19.820 --> 00:30:25.350
And add-trusted cert lets me
add trust in the admin domain.

00:30:25.650 --> 00:30:28.420
We talked about the admin domain
being an override of the system.

00:30:28.420 --> 00:30:31.520
And I can do that with the dash-D flag.

00:30:31.520 --> 00:30:33.580
Or I can add trust in the user domain.

00:30:33.580 --> 00:30:35.380
And that's just specific to one user.

00:30:35.380 --> 00:30:40.040
Again, I mentioned that if the
administrator needs this ability,

00:30:40.040 --> 00:30:42.630
they can turn off user trust settings.

00:30:42.640 --> 00:30:45.780
If you've got to validate
your certificate chain all

00:30:45.780 --> 00:30:48.790
the way back to a root,
rather than allowing those

00:30:48.790 --> 00:30:52.270
intermediate or leaf anchors,
you can turn that off, again,

00:30:52.270 --> 00:30:53.560
with the security tool.

00:30:53.560 --> 00:30:55.580
Security, user trust settings enabled.

00:30:55.600 --> 00:30:59.270
And it has a disable
or enable flag there.

00:30:59.550 --> 00:31:04.500
If you are using the API level,
the Sec Trust APIs,

00:31:04.500 --> 00:31:07.000
you can use Sec Trust Set Anchor
Certificates.

00:31:07.050 --> 00:31:11.450
And when you make that API call,
that overrides anything, any user trust,

00:31:11.510 --> 00:31:14.980
admin trust that may be present there.

00:31:16.060 --> 00:31:20.820
So here's the general way a
certificate becomes trusted.

00:31:20.850 --> 00:31:24.290
When you encounter a certificate
for the first time-- many of you

00:31:24.290 --> 00:31:27.500
have seen this in Safari when you
go to a site that has a certificate

00:31:27.500 --> 00:31:32.220
you've never seen before-- you'll be
asked on the first time it's used.

00:31:32.240 --> 00:31:35.660
This varies depending
on your application.

00:31:35.730 --> 00:31:38.620
But the key thing here is that
authentication is required in

00:31:38.620 --> 00:31:42.170
order to modify those settings.

00:31:42.330 --> 00:31:45.590
Root, of course, being root,
can change trust without

00:31:45.670 --> 00:31:47.670
that authentication.

00:31:48.460 --> 00:31:50.030
You can also use Keychain Access.

00:31:50.180 --> 00:31:55.010
It's got a GUI which actually you
see the panel here as an example

00:31:55.510 --> 00:31:58.490
of how to change trust settings
on a particular certificate.

00:31:58.560 --> 00:32:02.020
You can open that up and you
have a variety of options to

00:32:02.020 --> 00:32:04.150
set trust on a per policy level.

00:32:04.150 --> 00:32:06.260
Of course,
all of that is available at the

00:32:06.270 --> 00:32:09.760
command line as well with the
security add trust insert command.

00:32:09.760 --> 00:32:13.930
And then that's built on top of
an API called set trust settings,

00:32:13.930 --> 00:32:17.100
set trust settings,
which is quite a mouthful,

00:32:17.100 --> 00:32:18.380
but lets me set the trust settings.

00:32:18.400 --> 00:32:21.530
settings from an application.

00:32:22.570 --> 00:32:29.250
So when you first encounter that
untrusted certificate or you really

00:32:29.250 --> 00:32:32.640
need to ask the user what to do,
and there's a standard way

00:32:32.640 --> 00:32:33.840
to ask a trust question.

00:32:33.840 --> 00:32:36.620
And you've probably seen a panel
like this before in Safari.

00:32:36.620 --> 00:32:40.460
It's a standard piece of UI that
your apps can use as well.

00:32:40.480 --> 00:32:42.580
SF Certificate Trust Panel.

00:32:42.580 --> 00:32:44.340
That's in the security
interface framework.

00:32:44.340 --> 00:32:48.750
So if you need to ask a trust question
when you're encountering untrusted certs,

00:32:48.790 --> 00:32:51.110
this is the thing that
will let you do that.

00:32:51.830 --> 00:32:57.250
It has all of the display built in so you
don't have to write that code yourself.

00:32:57.260 --> 00:33:00.320
And it also has a nifty
little thing here,

00:33:00.320 --> 00:33:04.080
a checkbox that lets me
specify that I want to set the

00:33:04.080 --> 00:33:06.660
trust settings permanently.

00:33:06.660 --> 00:33:10.980
And in 10.5, we also narrow this down.

00:33:11.000 --> 00:33:13.360
So I don't think this is quite readable.

00:33:13.360 --> 00:33:16.210
But in this case,
it lets me always trust a

00:33:16.210 --> 00:33:20.710
particular certificate only
when going to a particular site.

00:33:21.240 --> 00:33:26.110
So trust settings have the ability to
have constraints such as a particular

00:33:26.110 --> 00:33:31.390
site that you're using it for,
a particular policy, and so on.

00:33:33.490 --> 00:33:38.560
One word about an older
API that you may have seen,

00:33:38.560 --> 00:33:41.360
SecTrustSetUserTrust.

00:33:41.360 --> 00:33:44.810
This differs from SecTrustSet--
I can't even say that--

00:33:44.920 --> 00:33:52.060
SecTrustSettingsSetTrustSettings in that
the first one wasn't really secured.

00:33:52.060 --> 00:33:53.650
It was just a preference.

00:33:53.810 --> 00:33:58.770
So when you called SecTrustSetUserTrust,
it happily said, yes,

00:33:58.770 --> 00:34:00.640
the user said to trust that.

00:34:00.730 --> 00:34:02.340
But there was no authentication.

00:34:02.570 --> 00:34:07.800
So any application could use that and
just silently change the trust settings.

00:34:07.900 --> 00:34:09.360
Well, that wasn't a good thing.

00:34:09.360 --> 00:34:11.020
And we knew it wasn't a good thing.

00:34:11.160 --> 00:34:15.440
So SecTrustEvaluate,
the main call to evaluate trust,

00:34:15.500 --> 00:34:16.840
never took that into account.

00:34:17.090 --> 00:34:21.100
This was just an advisory preference
that your application could go after

00:34:21.100 --> 00:34:26.290
it had performed a trust evaluation
and then called SecTrustGetUserTrust

00:34:26.430 --> 00:34:28.270
to see if that preference had been set.

00:34:28.340 --> 00:34:33.520
And you could do your own evaluation
or take that into account.

00:34:33.580 --> 00:34:37.210
The difference with the new API,
SecTrustSettingsSetTrust Settings,

00:34:37.250 --> 00:34:39.080
is that it actually is secured.

00:34:39.260 --> 00:34:43.580
And any time it's called,
authentication is required to change it.

00:34:43.670 --> 00:34:48.460
And because authentication is required,
the main trust evaluator that's used,

00:34:48.510 --> 00:34:53.430
SecTrustEvaluate, which is at the heart
of trust evaluations in

00:34:53.450 --> 00:34:58.040
Safari and iChat and wherever,
will take that into account now.

00:34:58.090 --> 00:35:01.810
And in fact, the implementation of the
former call is changed.

00:35:01.980 --> 00:35:05.360
So it's just a call
through to the new call.

00:35:06.260 --> 00:35:09.990
So I can set up trust
settings on one machine,

00:35:09.990 --> 00:35:13.800
but wouldn't it be great if I could
set up one machine and then replicate

00:35:13.870 --> 00:35:17.460
that to my entire lab or another
machine that I have in my office?

00:35:17.460 --> 00:35:20.800
And you can do that with
a pair of APIs here.

00:35:20.800 --> 00:35:25.020
You can create an external
representation of your trust settings,

00:35:25.020 --> 00:35:30.300
which is just a CFDataRef, a blob,
and then put that on another system.

00:35:30.320 --> 00:35:33.450
Move that over and import it
with the corresponding command,

00:35:33.450 --> 00:35:35.400
import external representation.

00:35:36.310 --> 00:35:39.390
And that lets me import into
either the admin or the user

00:35:39.390 --> 00:35:43.060
domain and basically blast my
configuration onto another machine.

00:35:43.060 --> 00:35:46.000
And of course, there are command line
ways of doing this too.

00:35:46.000 --> 00:35:49.870
The security tool has trust settings
export and trust settings import.

00:35:52.310 --> 00:35:55.920
So with that,
I'd like to switch over to the demo

00:35:56.030 --> 00:36:01.090
and kind of go through a demo of

00:36:02.170 --> 00:36:03.240
Certificate management.

00:36:03.340 --> 00:36:09.810
So the first thing I want to show you is
how can I set up a certificate authority?

00:36:09.960 --> 00:36:11.690
In the last session,
Perry said you could set up a

00:36:11.760 --> 00:36:13.330
certificate authority in five minutes.

00:36:13.470 --> 00:36:17.200
I think I can do it in less.

00:36:17.200 --> 00:36:17.200
So let's see.

00:36:17.780 --> 00:36:22.870
In Keychain Access, there is a menu item,
Certificate Assistant, and this lets me,

00:36:23.160 --> 00:36:26.530
among other things,
create a certificate authority.

00:36:26.910 --> 00:36:29.210
This is an assistant,
so it will walk me through the steps.

00:36:29.300 --> 00:36:32.760
The first thing I have to do,
and this is kind of daunting,

00:36:32.760 --> 00:36:34.400
is pick a name for my CA.

00:36:34.400 --> 00:36:38.190
Ken's Certificate Authority doesn't
sound official enough,

00:36:38.230 --> 00:36:43.520
so I'm going to go ahead and call it
something like Ken's Platinum Assurance.

00:36:43.520 --> 00:36:45.200
That gives me a warm feeling.

00:36:45.200 --> 00:36:50.860
I'm going to go ahead and take a
look at some of the other panels.

00:36:50.860 --> 00:36:56.280
This is just a more than
one panel option here.

00:36:56.800 --> 00:37:00.020
I'll set up an email address.

00:37:00.020 --> 00:37:04.160
This is obviously not my email address,
but it's something to go on.

00:37:07.670 --> 00:37:11.310
The thing I really want to show
you is on the next panel here.

00:37:11.310 --> 00:37:14.580
The Certificate Assistant lets you
specify a serial number for your cert.

00:37:14.590 --> 00:37:18.840
This is very important because
certificates are unique by serial number.

00:37:18.840 --> 00:37:22.140
So it's important to change it
to something other than one.

00:37:22.140 --> 00:37:23.270
I have a little trick.

00:37:23.360 --> 00:37:25.460
I just like to kind of
put in today's date,

00:37:25.460 --> 00:37:27.160
which is I think the 12th.

00:37:27.160 --> 00:37:29.050
And this is the first
cert I've made today.

00:37:29.050 --> 00:37:30.480
So we'll give it a number there.

00:37:30.480 --> 00:37:34.720
And we'll make it two
years until it expires.

00:37:35.720 --> 00:37:40.160
I can have a default template set up
for the types of certs I'll issue,

00:37:40.160 --> 00:37:42.600
but I can override those,
as I'll show you later.

00:37:42.600 --> 00:37:45.550
I'm not going to go ahead
and do the signed invitation,

00:37:45.560 --> 00:37:47.140
so let's keep going here.

00:37:48.890 --> 00:37:53.790
I'll fill in my email address again
and give myself an organization.

00:37:53.800 --> 00:37:59.850
Maybe I'm R&D and my organizational unit
is software and I'm based in Cupertino.

00:37:59.940 --> 00:38:03.900
So put that in.

00:38:04.740 --> 00:38:08.510
And that's pretty much the hardest part.

00:38:08.890 --> 00:38:13.430
I'll just accept the defaults for the
key size here and the key extensions.

00:38:13.540 --> 00:38:16.160
They're typically set
up the way I want them,

00:38:16.160 --> 00:38:18.800
so I'll just keep clicking through here.

00:38:18.950 --> 00:38:21.900
I'm going to go ahead and specify
a location where this will go,

00:38:22.040 --> 00:38:23.900
my login keychain.

00:38:23.900 --> 00:38:25.840
So it creates the cert and I'm done.

00:38:25.980 --> 00:38:26.860
Is anybody timing that?

00:38:26.860 --> 00:38:28.900
I'm now a certificate authority.

00:38:28.900 --> 00:38:34.540
So I look at my keychain and I see that,
in fact, I have my identity.

00:38:34.570 --> 00:38:37.640
Now, remember,
identity is not just the cert.

00:38:37.680 --> 00:38:39.990
Identity is also the private key.

00:38:40.000 --> 00:38:43.480
So I have both the certificate
and the private key here.

00:38:43.480 --> 00:38:46.020
And, in fact, there's a little category
over here on the side,

00:38:46.020 --> 00:38:47.720
my certificates,
that lets me see the ones

00:38:47.720 --> 00:38:48.880
that I'm going to use.

00:38:48.900 --> 00:38:52.440
So I can see the ones that are actually
corresponding to a private key.

00:38:52.440 --> 00:38:56.470
And the little turn down there
makes it simple to match those up.

00:38:56.550 --> 00:39:01.440
So now that I'm a certificate authority,
I want to assign myself a code

00:39:01.440 --> 00:39:05.520
signing certificate so I can
start signing my code like the

00:39:05.520 --> 00:39:08.320
previous session told me I should.

00:39:08.320 --> 00:39:12.280
So back to Certificate Assistant and
I'll create a new certificate.

00:39:12.300 --> 00:39:15.740
And, well, I won't just be Ken.

00:39:15.740 --> 00:39:18.640
Let's be Ken's software.

00:39:18.900 --> 00:39:22.880
Oh, and I better be LLC to
limit my liability.

00:39:22.920 --> 00:39:25.710
And this is going to
be a lease certificate.

00:39:25.760 --> 00:39:30.570
Now, I'll override the defaults here just
to show you what the options are.

00:39:30.810 --> 00:39:34.090
Again,
the serial number has to be unique,

00:39:34.090 --> 00:39:36.500
so I'll give myself another one.

00:39:36.570 --> 00:39:39.770
And this is the second one, so it's 02.

00:39:40.330 --> 00:39:41.520
Now this is important.

00:39:41.700 --> 00:39:43.530
What type of certificate
is this going to be?

00:39:43.750 --> 00:39:47.190
Well, we have one of the defaults
set up is code signing.

00:39:47.240 --> 00:39:48.870
So I'll go ahead and choose that.

00:39:48.870 --> 00:39:51.110
And by choosing that,
that sets up all of my key usage

00:39:51.200 --> 00:39:54.440
and extended key usage extensions
correctly in the next panels.

00:39:54.650 --> 00:39:57.660
So let's rip through those.

00:39:57.760 --> 00:40:05.030
I am, again, some email address,
some organization.

00:40:07.100 --> 00:40:14.000
[Transcript missing]

00:40:14.370 --> 00:40:16.540
And I can choose an issuer
to sign this certificate.

00:40:16.540 --> 00:40:21.650
Well, fortunately I just made one,
so let's pick that.

00:40:22.120 --> 00:40:25.600
Again,
all of these I can override if I want to,

00:40:25.700 --> 00:40:29.970
but they're set up correctly for me
and I'll go ahead and create that.

00:40:40.620 --> 00:40:43.350
Okay.

00:40:43.460 --> 00:40:47.700
So going back here,
I see that I now have another identity.

00:40:47.950 --> 00:40:51.340
for my code signing identity
for my company that I'm

00:40:51.340 --> 00:40:52.800
going to sign my code with.

00:40:52.940 --> 00:40:53.800
Well, okay, great.

00:40:53.800 --> 00:40:56.500
How do I do that?

00:40:57.820 --> 00:41:02.000
The new version of Xcode lets you
do code signing with an identity.

00:41:02.140 --> 00:41:06.540
So let me open up my app here,
my test app.

00:41:07.600 --> 00:41:10.990
And in Xcode Now,
I can look at the settings

00:41:10.990 --> 00:41:15.880
and I see that there is a set
of options for code signing.

00:41:16.100 --> 00:41:21.560
One of these is I can pick a code
signing identity to sign my code with.

00:41:21.790 --> 00:41:22.650
And I have an identity.

00:41:22.700 --> 00:41:24.440
It's Ken Software LLC.

00:41:24.620 --> 00:41:26.270
So that's great.

00:41:26.350 --> 00:41:27.740
That's all set up well.

00:41:27.900 --> 00:41:30.080
So let's build my app.

00:41:32.000 --> 00:41:34.900
And it's compiling and linking.

00:41:34.900 --> 00:41:36.720
And now it asks me to code sign.

00:41:36.720 --> 00:41:40.590
Well, Xcode is just calling through to
the command line version here,

00:41:40.610 --> 00:41:42.340
the code sign utility.

00:41:42.340 --> 00:41:46.100
And it knows that it wants to
use my identity to sign my app.

00:41:46.150 --> 00:41:49.710
So since I'm going to
do this more than once,

00:41:49.710 --> 00:41:51.490
probably, I'll always allow it.

00:41:51.500 --> 00:41:53.080
And then that just automates the process.

00:41:53.080 --> 00:41:55.410
I don't have to answer that anymore.

00:41:55.490 --> 00:41:56.580
Code sign has access.

00:41:56.690 --> 00:42:02.010
So let's take a look at my app,
which I built.

00:42:03.600 --> 00:42:06.100
And here, yes it is.

00:42:06.110 --> 00:42:10.100
Well, it doesn't look any
different and if I run it,

00:42:10.100 --> 00:42:12.900
it just runs,
but how do I know it's signed?

00:42:12.900 --> 00:42:17.350
Well, let's take a look with
the code sign command.

00:42:18.030 --> 00:42:22.280
I can use the -d to display and
because Perry has thoughtfully

00:42:22.280 --> 00:42:27.560
built in a lot of verbosity,
I'll add some Vs to get more output.

00:42:27.620 --> 00:42:32.970
And I'll just take a look at this, oops,
let's put a space there.

00:42:33.680 --> 00:42:35.740
this app that I've signed.

00:42:35.810 --> 00:42:38.120
And I can see that in
fact it did get signed.

00:42:38.330 --> 00:42:43.500
It was signed with my identifier,
with my Ken software LLC authority

00:42:43.500 --> 00:42:46.590
that was signed in turn by
a platinum assurance CA.

00:42:46.600 --> 00:42:50.240
So I won't go into all the things
that you can do with code signing.

00:42:50.240 --> 00:42:51.680
That was the last session.

00:42:51.760 --> 00:42:54.850
But I just wanted to show you that much.

00:42:55.230 --> 00:42:57.770
I do want to show you something
that's very important.

00:42:58.020 --> 00:43:00.260
We've gotten a lot of
bug reports about this,

00:43:00.280 --> 00:43:00.790
as I said.

00:43:01.050 --> 00:43:03.190
And I can't stress this enough.

00:43:03.530 --> 00:43:06.090
When you have an identity,
it's not just the cert.

00:43:06.250 --> 00:43:07.820
It is two things.

00:43:07.880 --> 00:43:12.210
It is my certificate and my private key.

00:43:12.520 --> 00:43:14.680
So it's both of these things.

00:43:14.740 --> 00:43:15.940
And I want to make a backup of this.

00:43:15.980 --> 00:43:19.220
I want to move this identity to
another machine so that I can do

00:43:19.220 --> 00:43:22.510
development on an iMac as well,
let's say.

00:43:22.660 --> 00:43:25.630
So I can export both of these together.

00:43:25.880 --> 00:43:29.270
One thing that makes it even easier,
again, is this My Certificates.

00:43:29.290 --> 00:43:33.410
I can select it there and also export it.

00:43:33.650 --> 00:43:37.380
Remember we talked about the P12 format,
PKCS 12.

00:43:37.380 --> 00:43:46.290
That's the encrypted container that will
let me move from machine to machine.

00:43:46.290 --> 00:43:46.290
I see it's selected here by default.

00:43:46.450 --> 00:43:51.960
Call it my identity and I'll
pick a location to save it to.

00:43:52.900 --> 00:43:56.020
And when I save it,
it's an encrypted container,

00:43:56.110 --> 00:43:59.460
so it wants a password that will
wrap this to keep it secure.

00:43:59.670 --> 00:44:02.780
So I'll give it one.

00:44:06.620 --> 00:44:10.840
I'm going to export the key and
now I have a P12 file that I can

00:44:10.840 --> 00:44:13.920
move around from machine to machine
and import and I can back up and

00:44:14.000 --> 00:44:15.640
this is probably very important.

00:44:15.880 --> 00:44:19.600
I can back up somewhere safe so
that I have a backup of that.

00:44:19.600 --> 00:44:26.880
So if something terrible went wrong like,
oh my gosh, I just deleted.

00:44:27.300 --> 00:44:28.960
My identity, it's gone, oh no.

00:44:29.180 --> 00:44:33.900
Well, I have a backup, this P12 file that
I can just double-click,

00:44:33.940 --> 00:44:36.150
import the identity.

00:44:36.270 --> 00:44:40.000
And remember that password that
I put on the encrypted container.

00:44:40.020 --> 00:44:41.890
And it's back.

00:44:42.910 --> 00:44:47.270
So the final thing I want to show
you is not what I originally planned,

00:44:47.530 --> 00:44:52.200
but got quite a lot of questions and
comments about something that's become

00:44:52.200 --> 00:44:55.340
a hot issue for a lot of people,
client certificate

00:44:55.340 --> 00:44:57.480
authentication in Safari.

00:44:57.480 --> 00:45:01.130
This changed in 10.5.3,
as many of you know.

00:45:01.310 --> 00:45:09.480
So let's take a look, first of all,
at-- I picked them as a guinea pig-- MIT.

00:45:09.730 --> 00:45:15.390
First of all, when we go to MIT,
we see that there's an untrusted cert.

00:45:15.390 --> 00:45:16.840
What's going on here?

00:45:16.840 --> 00:45:19.430
We see that they have their
own certificate authority,

00:45:19.430 --> 00:45:22.900
Massachusetts Institute of Technology,
and I don't have their root.

00:45:24.060 --> 00:45:28.680
But Safari is using here
the standard trust panel,

00:45:28.680 --> 00:45:31.210
SF Certificate Trust Panel,
which we mentioned your

00:45:31.300 --> 00:45:33.850
app can use as well,
to ask that trust question.

00:45:33.960 --> 00:45:34.680
Is this trusted?

00:45:34.680 --> 00:45:38.410
And I also have the option
to always trust this when I'm

00:45:38.500 --> 00:45:40.800
going to that particular site.

00:45:40.800 --> 00:45:44.220
But let's just go ahead and continue.

00:45:45.070 --> 00:45:49.950
The thing about this particular
server is an HTTPS connection to MIT.

00:45:50.250 --> 00:45:52.280
They require a client certificate.

00:45:52.630 --> 00:45:56.990
And the change in Safari here
can tell when a server has

00:45:56.990 --> 00:45:59.360
required a client certificate.

00:45:59.360 --> 00:46:04.640
And it uses that other piece of user
interface that your app can also use,

00:46:04.640 --> 00:46:08.230
the SF Choose Identity panel,
to present a list of

00:46:08.270 --> 00:46:10.320
possible certificates.

00:46:10.320 --> 00:46:13.650
Because I have a bunch
that I could use here,

00:46:13.680 --> 00:46:17.500
the one I just made or my iChat
encryption certificate here.

00:46:17.500 --> 00:46:19.270
So it wants me to pick one.

00:46:19.270 --> 00:46:22.250
And I'll just go ahead and try to log in.

00:46:22.250 --> 00:46:24.130
Well, guess what?

00:46:24.170 --> 00:46:28.350
It wasn't accepted because I don't
have any affiliation to MIT.

00:46:28.380 --> 00:46:30.960
They haven't issued me anything,
so I can't get in there.

00:46:30.960 --> 00:46:35.490
But what it did do is give me
the opportunity to pick one.

00:46:35.490 --> 00:46:38.240
And that let me set an
identity preference.

00:46:38.240 --> 00:46:40.240
So let's take a look at that.

00:46:40.320 --> 00:46:45.500
Over in Keychain Access, if I look here,
I now have an item for

00:46:45.500 --> 00:46:47.710
that particular server.

00:46:47.890 --> 00:46:51.820
And this item specifies the preferred
certificate that I just selected.

00:46:51.910 --> 00:46:56.530
Now I can change that if I want to later.

00:46:56.530 --> 00:46:58.610
But that's kind of automatic.

00:47:00.310 --> 00:47:08.860
What we also have though is a case
where a server is configured to

00:47:08.880 --> 00:47:11.910
optionally accept a certificate.

00:47:12.790 --> 00:47:17.200
This site I just showed you required one,
so we were able to deal with that.

00:47:17.380 --> 00:47:22.130
Here's a server at Apache,
and sending a client certificate to

00:47:22.130 --> 00:47:24.690
this server is completely optional.

00:47:24.920 --> 00:47:27.700
And in this case,
Safari doesn't prompt you.

00:47:27.700 --> 00:47:30.610
Well, we know it should,
but what do we do about this?

00:47:30.650 --> 00:47:32.690
Well,
we need to set an identity preference.

00:47:32.700 --> 00:47:35.700
So let's go back here.

00:47:35.700 --> 00:47:39.830
We'll grab the page that
we're trying to go to.

00:47:40.060 --> 00:47:42.700
And we'll find the certificate
that we want to use.

00:47:42.780 --> 00:47:46.200
So let's say it's this
certificate here that I've issued.

00:47:46.530 --> 00:47:52.670
I can directly create with this
UI an identity preference here.

00:47:52.970 --> 00:47:58.060
For the particular page or,
and this is not in 10.5.3 yet,

00:47:58.230 --> 00:48:02.780
but it is in an upcoming build,
I can just specify one for the server

00:48:02.780 --> 00:48:05.840
itself and have it apply to any
page that I go to on that server.

00:48:05.900 --> 00:48:09.660
So I'll go ahead and add that.

00:48:10.720 --> 00:48:14.790
And next time I go back to
this page and reload it,

00:48:14.830 --> 00:48:16.850
you see that the content here
is a little bit different.

00:48:17.070 --> 00:48:20.690
I've actually, this time,
sent a client certificate

00:48:20.700 --> 00:48:22.040
and I see which one it was.

00:48:22.040 --> 00:48:26.100
It was my Ken McLeod certificate
signed by Apple Data Security Test CA.

00:48:26.100 --> 00:48:30.820
So that's sort of the workaround for
now for those particular sites if

00:48:30.820 --> 00:48:36.600
they don't actually require the client
certificate presentation as optional.

00:48:36.600 --> 00:48:43.400
So with that,
I'd like to switch back to the slides.

00:48:46.600 --> 00:48:50.640
And to sum up here,
it's important to remember users are

00:48:50.640 --> 00:48:52.120
going to have multiple identities.

00:48:52.250 --> 00:48:56.010
They're going to have identities
issued from perhaps your organization,

00:48:56.320 --> 00:49:00.640
perhaps from .Mac or MobileMe or
whatever it's called.

00:49:00.840 --> 00:49:02.940
So there's going to
be a plethora of them.

00:49:03.230 --> 00:49:07.980
So the first thing to do is always to
look for the preferred identity and use

00:49:07.980 --> 00:49:11.410
SecIdentityCopyPreference to do that.

00:49:11.610 --> 00:49:14.560
And then if you can't
find a preferred identity,

00:49:14.560 --> 00:49:15.010
ask.

00:49:15.160 --> 00:49:18.280
You have tools to ask with.

00:49:18.280 --> 00:49:23.100
Very important to remember the trust
model that no longer relies on location.

00:49:23.130 --> 00:49:25.630
So if you were formerly
putting certificates into

00:49:25.630 --> 00:49:30.100
X.509 anchors to trust them,
that no longer is the case on Leopard.

00:49:30.100 --> 00:49:31.860
And just be aware of that.

00:49:31.890 --> 00:49:35.240
So we have a lot of tools for
managing these certificates.

00:49:35.240 --> 00:49:38.060
At the high level,
we have keychain access.

00:49:38.060 --> 00:49:41.400
That's sort of the top
level user interface.

00:49:41.400 --> 00:49:44.130
And we have certificate assistant
for letting you set up a certificate

00:49:44.130 --> 00:49:47.200
authority or issue your own certs.

00:49:47.200 --> 00:49:51.980
One thing I forgot to mention is that
this won't actually let you put code

00:49:52.010 --> 00:49:55.300
on the iPhone with my Ken software LLC.

00:49:55.300 --> 00:49:58.140
If I wanted to actually
put my code on the iPhone,

00:49:58.240 --> 00:50:03.660
I would need the certificate that
was issued from WWDR to do that.

00:50:03.660 --> 00:50:06.250
At the command line level,
you have security,

00:50:06.270 --> 00:50:08.030
the security tool in UserBin.

00:50:08.100 --> 00:50:10.290
That's sort of your
jack of all trades tool,

00:50:10.300 --> 00:50:14.820
your Swiss Army knife for
dealing at the command line.

00:50:14.820 --> 00:50:17.630
The API level,
security framework provides

00:50:17.710 --> 00:50:19.400
a lot of access with APIs.

00:50:19.400 --> 00:50:21.910
And the security
interface framework there,

00:50:21.910 --> 00:50:25.390
which we saw two examples of,
gives you some panels that are

00:50:25.390 --> 00:50:29.790
standard that do a lot of work for
you in presenting certificates.

00:50:30.660 --> 00:50:31.800
More information.

00:50:31.800 --> 00:50:37.370
So the security page on
developer.apple.com has a bunch of links

00:50:37.440 --> 00:50:42.660
to obviously documentation and places
to go to get more information here.

00:50:42.660 --> 00:50:47.240
A very good resource I want to
point out is the CDSA mailing list.

00:50:47.280 --> 00:50:50.920
CDSA being the
Common Data Security Architecture that

00:50:51.180 --> 00:50:55.000
is at the root
of the security framework on Mac OS X.

00:50:55.000 --> 00:50:59.640
But we have a lot of Apple people
that monitor and read that list and

00:50:59.640 --> 00:51:03.300
there's a lot of questions that get
asked and answered on that list.

00:51:03.410 --> 00:51:06.760
So it's a good resource for you.

00:51:06.830 --> 00:51:13.120
If your organization is interested
in setting up a certificate authority

00:51:13.120 --> 00:51:17.000
that Apple provides and you want
more information about that,

00:51:17.060 --> 00:51:21.830
there is a page to go to for
the information and requirements

00:51:21.990 --> 00:51:24.670
for being a root CA in Mac OS X.

00:51:26.220 --> 00:51:30.090
Craig, as always,
is the person to contact for any kind

00:51:30.090 --> 00:51:32.940
of security-related technology request.

00:51:32.940 --> 00:51:37.700
If this is something that you don't
want to share with us in the Q&A part,

00:51:37.830 --> 00:51:39.320
talk to Craig.

00:51:41.460 --> 00:51:43.750
If only there were a time machine.

00:51:43.890 --> 00:51:46.000
We have time machine but we
don't have a time machine to

00:51:46.000 --> 00:51:47.180
go back and look at these.

00:51:47.300 --> 00:51:50.300
But these were the sessions
that really relate to this.

00:51:50.300 --> 00:51:54.580
Obviously, if you have a chance later on
and you didn't get a chance

00:51:54.590 --> 00:51:58.250
to go to these sessions,
you'll want to check them out.