WEBVTT

00:00:20.530 --> 00:00:24.130
My name is Tim Monroe and I am a
QuickTime engineer and I will be joined

00:00:24.170 --> 00:00:26.400
about halfway through by David Underwood.

00:00:26.400 --> 00:00:28.960
And this is the first of four
sessions that I think should

00:00:28.960 --> 00:00:30.390
be of interest to you today.

00:00:30.420 --> 00:00:36.400
This is an introductory session
talking about QTKit and our media APIs.

00:00:36.400 --> 00:00:39.700
After this,
session 712 in this room is a more

00:00:39.810 --> 00:00:44.400
advanced look at QTKit and that's
where we'll talk about QuickTime 10.

00:00:44.400 --> 00:00:46.980
So if you have issues about
QuickTime 10 or questions or

00:00:46.980 --> 00:00:49.400
want to see how to work with it,
come to that session.

00:00:49.400 --> 00:00:53.210
I've also highlighted
here a noon talk by Dr.

00:00:53.660 --> 00:00:56.400
Michael Johnson from Pixar Studios.

00:00:56.400 --> 00:01:00.000
He was one of the very early
adopters of QTKit and I don't know

00:01:00.000 --> 00:01:03.400
if he's going to be talking about
it in this particular talk at noon.

00:01:03.610 --> 00:01:06.890
But he's a great speaker and
if you haven't heard him talk,

00:01:06.890 --> 00:01:09.400
definitely go to that noon time talk.

00:01:09.540 --> 00:01:12.990
And then later today,
we have a lab in the Graphics and

00:01:12.990 --> 00:01:18.400
Media Lab starting at 2 and ending
whenever anyone is done with a question.

00:01:18.400 --> 00:01:21.400
So I highly encourage you to
go to the following session,

00:01:21.440 --> 00:01:24.370
the noon time talk,
and if you have other questions,

00:01:24.370 --> 00:01:25.290
come to the lab.

00:01:25.490 --> 00:01:27.400
So what are we going to talk about today?

00:01:27.400 --> 00:01:31.360
QTKit, as you probably know,
is a Cocoa framework that is

00:01:31.360 --> 00:01:36.160
designed for working with media
files and media generating devices.

00:01:36.250 --> 00:01:39.460
That's just a fancy way of saying
that we can play back existing movies

00:01:39.910 --> 00:01:44.400
and we can also capture movies from
devices attached to your computer.

00:01:44.460 --> 00:01:47.140
Now to say that it's a
Cocoa framework means that it

00:01:47.140 --> 00:01:49.480
exposes a set of Objective-C classes.

00:01:49.480 --> 00:01:52.910
And we do all the nice
Cocoa goodness with notifications

00:01:52.960 --> 00:01:54.870
and delegate methods and all that.

00:01:54.870 --> 00:01:58.710
So if you're experienced with Cocoa,
this will have the kind of

00:01:58.710 --> 00:02:01.360
API flavor that you're used to.

00:02:01.670 --> 00:02:06.050
QTKit, as you've heard in several of
the State of the Union sessions,

00:02:06.180 --> 00:02:12.600
is now the preferred way to handle
media or media capture on Mac OS X.

00:02:12.600 --> 00:02:16.600
It really permeates all of Snow Leopard.

00:02:16.600 --> 00:02:19.370
Anywhere in Snow Leopard that
you see a movie being played

00:02:19.880 --> 00:02:22.980
back or a thumbnail of a movie,
chances are very good that

00:02:22.980 --> 00:02:26.600
QTKit is being used to generate
that playback or that thumbnail.

00:02:27.680 --> 00:02:30.580
Similarly,
anywhere that you take a picture or

00:02:30.580 --> 00:02:34.520
capture a movie in the operating system
or the Apple-supplied application,

00:02:34.630 --> 00:02:37.140
again,
chances are very good that QTKit is

00:02:37.140 --> 00:02:39.600
what's doing the work under the hood.

00:02:40.710 --> 00:02:43.880
It's also widely used in a
lot of third-party apps and

00:02:43.880 --> 00:02:45.950
some in-house applications.

00:02:46.000 --> 00:02:49.350
Again, Pixar has been using QTKit for a
number of years and it's become

00:02:49.800 --> 00:02:51.580
part of their standard workflow.

00:02:51.770 --> 00:02:55.940
So all of their recent movies have
been built with a process that

00:02:56.440 --> 00:02:59.600
crucially involves QTKit applications.

00:03:00.090 --> 00:03:02.000
So what are we going to
talk about in this session?

00:03:02.300 --> 00:03:07.990
First, I'm going to give an overview of
QTKit's playback and editing classes.

00:03:08.280 --> 00:03:12.060
Then I will actually show you here
on stage how to build a simple movie

00:03:12.060 --> 00:03:14.470
playback application from scratch.

00:03:14.500 --> 00:03:17.920
It really is, you know, 20 lines of code,
not even that.

00:03:18.260 --> 00:03:21.260
I'll talk a little bit about
how QTKit integrates nicely

00:03:21.260 --> 00:03:25.910
with other graphics technologies
on the Mac OS X platform,

00:03:25.910 --> 00:03:28.130
in particular core image
and core animation.

00:03:28.200 --> 00:03:31.130
Then we'll shift our attention
to talk about capture.

00:03:31.220 --> 00:03:34.640
David will come up and talk
about the various capture related

00:03:35.160 --> 00:03:38.150
classes and again he will build
a simple capture application.

00:03:38.200 --> 00:03:42.700
So let's start talking about QTKit.

00:03:43.530 --> 00:03:48.040
These are the basic classes that
you will use for movie playback.

00:03:48.040 --> 00:03:50.410
As you know,
QTKit is a very thin wrapper on

00:03:50.410 --> 00:03:52.400
top of the QuickTime framework.

00:03:52.400 --> 00:03:54.880
And again, as you probably know,
QuickTime works with

00:03:54.960 --> 00:03:56.400
things called movies.

00:03:56.460 --> 00:03:59.780
A movie is composed of various tracks,
and tracks are associated

00:03:59.890 --> 00:04:01.250
with things called media.

00:04:01.400 --> 00:04:06.930
So we have three classes in QTKit,
namely QTMovie, QTTrack, and QTMedia,

00:04:06.930 --> 00:04:11.400
which are object-oriented
wrappers on those concepts.

00:04:11.670 --> 00:04:15.270
And as you can also see,
I've listed QTMovieView,

00:04:15.270 --> 00:04:19.410
which is a subclass of NSView,
which is used to display

00:04:19.410 --> 00:04:21.220
and control a movie.

00:04:25.160 --> 00:04:29.140
Here's just some random QT movie
methods that I've selected.

00:04:29.310 --> 00:04:33.220
One thing you need to do if you want
to play back a movie is open it.

00:04:33.240 --> 00:04:36.000
And so we have the initWithUrl method.

00:04:36.030 --> 00:04:40.240
You pass in a URL and we'll
pass you back a QT movie object.

00:04:40.280 --> 00:04:43.080
We also have initWithFile
which I'll use in a little bit.

00:04:43.100 --> 00:04:46.600
And there are several other init
methods that are of interest.

00:04:46.740 --> 00:04:50.640
If you want to set an attribute,
change a property of a QT movie object,

00:04:50.960 --> 00:04:53.630
you will use the set
attribute for key method.

00:04:53.630 --> 00:04:53.700
You pass in the desired value and the
key and the attribute will be changed.

00:04:54.020 --> 00:05:04.530
There are also some basic control,
movie control methods.

00:05:04.700 --> 00:05:08.700
So play, if you want to change the time,
we have go to beginning, go to end,

00:05:08.790 --> 00:05:13.040
or you can specify a certain
time that you want to go to.

00:05:13.040 --> 00:05:15.810
And finally,
a very popular set of APIs is those

00:05:15.990 --> 00:05:18.280
that give you images of the movie.

00:05:18.280 --> 00:05:20.780
So here I've listed current frame image.

00:05:20.780 --> 00:05:26.890
We'll pass you back an NSImage of
the movie at whatever time it's at.

00:05:28.280 --> 00:05:32.370
QTMovieView, as I said,
is a subclass of NSView that you use to

00:05:32.520 --> 00:05:35.200
display and control a movie in the UI.

00:05:35.200 --> 00:05:40.170
Well, once you have a QTMovieView,
the basic thing you want to

00:05:40.170 --> 00:05:41.190
do on it is set the movie.

00:05:41.200 --> 00:05:49.250
So you'll set movie and pass in a
QTMovie and then that will be the movie

00:05:49.250 --> 00:05:49.250
that's displayed in the movie view.

00:05:49.600 --> 00:05:51.700
If you have a movie view and
you want to find out what

00:05:51.770 --> 00:05:55.200
movie is associated with it,
just call the movie method and that

00:05:55.200 --> 00:05:57.500
will tell you what the current movie is.

00:05:57.910 --> 00:06:03.490
There are also a number of IB action
methods that allow you to edit the movie.

00:06:03.520 --> 00:06:06.010
Here I will cut, copy, paste.

00:06:06.170 --> 00:06:09.260
And lastly, as you know,
QuickTime can put that little

00:06:09.260 --> 00:06:13.870
controller bar underneath a movie that
allows the user to scrub in the movie

00:06:13.930 --> 00:06:15.860
or pause it or adjust the volume.

00:06:16.190 --> 00:06:20.750
If you want to hide that, you can use the
SetControllerVisible method.

00:06:21.800 --> 00:06:25.840
Now aside from the various
classes that QTKit exposes,

00:06:25.970 --> 00:06:28.300
it also defines some data structures.

00:06:28.300 --> 00:06:30.660
In particular,
we use data structures and not

00:06:30.790 --> 00:06:33.900
objects to work with movie times.

00:06:33.910 --> 00:06:38.810
The top one here is QTTime,
a very simple structure,

00:06:38.880 --> 00:06:40.600
consists of three fields.

00:06:40.600 --> 00:06:44.200
The one to start with
is the time scale field.

00:06:44.250 --> 00:06:48.890
That essentially is the number of
units per second that you want to work

00:06:49.010 --> 00:06:51.600
with when you're talking about time.

00:06:51.910 --> 00:06:55.730
The time value field is the
number of those things in this

00:06:56.200 --> 00:06:59.260
duration or this point in time.

00:06:59.910 --> 00:07:10.730
and QTTimeRange as you can see
is just two QTTime structures,

00:07:10.730 --> 00:07:11.310
one of which indicates the start
time of the range and the other which

00:07:11.310 --> 00:07:11.310
indicates the duration of the range.

00:07:11.720 --> 00:07:14.840
We have a large number of functions,
not methods,

00:07:14.840 --> 00:07:18.600
that you can use to operate on
QT times and QT time ranges.

00:07:18.600 --> 00:07:23.650
One that you'll call all
the time is QTMakeTime.

00:07:23.740 --> 00:07:26.600
You pass in the desired time value
and the time scale you want to use

00:07:26.600 --> 00:07:29.600
and it will pass you back at QT time.

00:07:29.600 --> 00:07:32.480
If you want to increment
two QT time structures,

00:07:32.570 --> 00:07:34.600
we have the QTTimeIncrement.

00:07:34.600 --> 00:07:39.600
There's also QTTimeDecrement that
you can use to subtract two QT times.

00:07:39.600 --> 00:07:42.180
If you have a QT time and
you want to rescale it,

00:07:42.180 --> 00:07:46.100
you want to change the time scale field,
we can do that for you because

00:07:46.100 --> 00:07:47.420
it's a little bit tricky.

00:07:47.750 --> 00:07:51.600
We have the QTMakeTimeScaled function.

00:07:51.600 --> 00:07:54.450
And finally,
if you want to make a time range,

00:07:54.450 --> 00:07:58.630
pass us in the two QT times and
we'll pass you back a QT time range.

00:07:59.060 --> 00:08:03.600
So that's a good intro to what
QTKit has to offer in terms of playback.

00:08:03.620 --> 00:08:07.420
Let's actually see how easy it is
to build a playback application.

00:08:07.470 --> 00:08:10.380
So if I could go to the demo machine,
please.

00:08:17.500 --> 00:08:19.900
- Can I have demo one please?

00:08:19.900 --> 00:08:25.740
Here we go.

00:08:25.740 --> 00:08:29.620
Alright, so I'm just going to launch,
not dash code, but Xcode.

00:08:39.230 --> 00:08:44.230
So here's Xcode and I'm just
going to create a new project.

00:08:44.230 --> 00:08:47.210
And I want to build a
Cocoa document-based application so

00:08:47.310 --> 00:08:54.100
that I can open one or more movies and
display them in Windows on the screen.

00:08:54.270 --> 00:08:58.610
And I'll just call this WWDC Demo.

00:09:08.070 --> 00:09:10.560
And here's our basic project file.

00:09:10.630 --> 00:09:16.000
Now the first thing you want to do is
add QTKit to your linked frameworks.

00:09:16.160 --> 00:09:20.280
So I'll come down here and
say add an existing framework.

00:09:20.660 --> 00:09:24.420
And then I'll look down here in
my list of frameworks for QTKit.

00:09:24.450 --> 00:09:25.440
There it is.

00:09:25.500 --> 00:09:26.990
And add that to my project.

00:09:29.330 --> 00:09:33.940
Now the next thing you want to do before
you forget is set the kinds of files you

00:09:33.940 --> 00:09:36.600
want your application to be able to open.

00:09:36.770 --> 00:09:43.340
So I will select the target and do get
information and then under properties,

00:09:43.670 --> 00:09:46.540
I can set the kind of
extensions I want it to open.

00:09:46.540 --> 00:09:52.710
In this case I'll let it open MOV files,
which are of type MOV.

00:09:52.710 --> 00:09:54.920
And I want to add one more type.

00:09:55.140 --> 00:10:02.180
Let's call it, let's open m4v files,
and I don't know their OS types,

00:10:02.240 --> 00:10:05.810
so I'll just say mpeg,
which may or may not be right.

00:10:13.700 --> 00:10:16.260
We're good there.

00:10:16.350 --> 00:10:20.380
Okay, so let's look at our classes.

00:10:21.540 --> 00:10:28.210
Instead of importing Cocoa,
we can import QTKit.

00:10:29.900 --> 00:10:32.200
and QTKit.h.

00:10:32.270 --> 00:10:35.180
And I'm going to have one
instance variable in this sample.

00:10:35.180 --> 00:10:36.740
It'll be...

00:10:39.530 --> 00:10:46.630
of type QTMovieView,
and let's just call it MovieView.

00:10:48.400 --> 00:10:57.800
Okay, now let's set up the user
interface by finding our nib file.

00:11:05.600 --> 00:11:07.360
So this is our default document layout.

00:11:07.450 --> 00:11:10.410
Let's get rid of this text box here.

00:11:10.430 --> 00:11:13.890
And over here in the library,
we have this QTMovieView,

00:11:14.210 --> 00:11:15.000
QuickTime Movie View.

00:11:15.000 --> 00:11:21.300
So we'll drag that over into our window,
make it a little bigger.

00:11:23.380 --> 00:11:25.020
Now, if all goes well,
I should be able to

00:11:25.050 --> 00:11:28.230
just control click here,
and there it is, movie view,

00:11:28.310 --> 00:11:31.800
because I tagged it in my
header file as an IB outlet.

00:11:32.120 --> 00:11:34.880
And I think I'm done there.

00:11:36.390 --> 00:11:41.850
Now all we need to do is add some
code to the .m file to find a file

00:11:41.930 --> 00:11:44.370
and open it and set it in that view.

00:11:44.490 --> 00:11:48.010
So let's come down here to
MovieControllerDidLoadNib.

00:11:49.500 --> 00:12:02.610
And we want to do the following:
If the user has selected a file,

00:12:02.610 --> 00:12:02.610
so then self file name will have a value.

00:12:04.980 --> 00:12:11.520
So if there is a file name here,
I want to open that file.

00:12:11.610 --> 00:12:14.110
So I'll create a QT movie.

00:12:15.270 --> 00:12:19.500
And I'll do movie with file.

00:12:19.530 --> 00:12:22.810
And I'll just pass in
that same file name.

00:12:25.040 --> 00:12:28.380
And error,
I won't bother passing in any error

00:12:28.380 --> 00:12:31.950
because I trust QTKit not to fail.

00:12:32.070 --> 00:12:34.570
And what do I want to do?

00:12:34.630 --> 00:12:39.000
Then I want to set that
movie on the movie view.

00:12:39.180 --> 00:12:43.680
Set movie and that will, whoops, I need a

00:12:48.100 --> 00:12:50.810
So I've got a movie,
I'll set it on the view.

00:12:50.810 --> 00:12:51.530
And this should work.

00:12:51.610 --> 00:12:53.820
Let's try building this.

00:12:55.610 --> 00:12:56.350
Build succeeded.

00:12:56.530 --> 00:12:58.940
Let's try running it.

00:12:59.110 --> 00:13:02.940
Let's open a movie.

00:13:03.120 --> 00:13:06.050
Go to the desktop.

00:13:06.050 --> 00:13:06.050
I have a movie there.

00:13:08.010 --> 00:13:11.760
And let's see if it plays.

00:13:11.760 --> 00:13:13.420
So that was pretty easy.

00:13:13.490 --> 00:13:16.100
With that little bit of code,
we're able to go out,

00:13:16.130 --> 00:13:19.290
select a movie file from the
desktop or from anywhere,

00:13:19.290 --> 00:13:21.420
and have it play back here.

00:13:21.440 --> 00:13:23.020
Now let's look at the Edit menu.

00:13:23.050 --> 00:13:25.730
All the good editing stuff is disabled.

00:13:26.100 --> 00:13:30.170
We can fix that very easily
with one nice line of code,

00:13:30.170 --> 00:13:31.680
and we can do that like this.

00:13:31.700 --> 00:13:34.720
Let us change one of the
properties of the movie.

00:13:34.770 --> 00:13:37.120
So we'll use our Set attribute.

00:13:37.140 --> 00:13:43.510
And I want that value
to be in this number.

00:13:51.010 --> 00:13:52.140
Number with Bool.

00:13:52.340 --> 00:13:57.660
And I want the value to be yes.

00:13:57.690 --> 00:14:05.910
And the attribute that I wanted to
change is the QTMovieEditable attribute.

00:14:09.720 --> 00:14:12.540
And let's see if that builds.

00:14:12.560 --> 00:14:15.100
Yep, now let's run that.

00:14:15.120 --> 00:14:17.820
Now let's try opening that same file.

00:14:18.250 --> 00:14:21.070
And here my edit menu is enabled.

00:14:21.070 --> 00:14:24.480
So we could go in here and
select a portion of it,

00:14:24.510 --> 00:14:27.060
come up and cut it.

00:14:27.090 --> 00:14:28.740
Maybe that goes better here
at the end of the movie,

00:14:28.740 --> 00:14:31.890
so we'll come over there and paste it in.

00:14:32.080 --> 00:14:35.760
Director says that sucks,
so let's undo that.

00:14:35.760 --> 00:14:38.800
We'll undo the paste,
undo the original cut.

00:14:38.890 --> 00:14:41.800
So you see we have basically
unlimited stack of undo's.

00:14:41.820 --> 00:14:44.200
You can do a lot of
stuff and then undo it.

00:14:44.270 --> 00:14:46.220
So let's quit that.

00:14:46.230 --> 00:14:49.210
And if I could go back to slides please.

00:14:54.650 --> 00:14:56.600
So this is the code that we just built.

00:14:56.620 --> 00:15:02.430
We selected a file,
we called movieWithFile to open that file

00:15:02.450 --> 00:15:05.600
and get a Qt movie associated with it.

00:15:05.740 --> 00:15:09.440
We set the attribute,
its editability to be on,

00:15:09.440 --> 00:15:12.100
and then we set that movie into the view.

00:15:12.160 --> 00:15:16.770
It's really very simple and we could
open anything that was a .mov or

00:15:16.770 --> 00:15:19.750
an m4v and it would play back fine.

00:15:20.370 --> 00:15:25.570
Now what if we had a movie open and
we want to export it or create a

00:15:25.610 --> 00:15:28.090
movie that has a different format.

00:15:28.190 --> 00:15:30.860
So I've got some movies but
I want to make them playable

00:15:30.870 --> 00:15:32.210
on my iPod for instance.

00:15:32.300 --> 00:15:36.110
To do that we want to export
the movie in a different format.

00:15:36.530 --> 00:15:38.300
And it's really very simple.

00:15:38.300 --> 00:15:43.300
We would use the
QTMovieWriteToFileWithAttributes method.

00:15:43.350 --> 00:15:47.260
And the idea is we will set
up a dictionary that indicates

00:15:47.260 --> 00:15:51.000
the desired operations we
want QTKit to perform on it.

00:15:51.580 --> 00:15:56.200
And if you look at the dictionary
here I'm saying yes I want you to

00:15:56.240 --> 00:15:59.300
export it and the export type is 3GPP.

00:15:59.300 --> 00:16:03.170
So if I were to run this code on one
of the movies that I opened I would get

00:16:03.170 --> 00:16:09.300
a movie whose size was appropriate for
playback on some of the devices we have.

00:16:09.510 --> 00:16:12.300
And the audio would be
transcoded into AAC.

00:16:12.300 --> 00:16:13.300
That would play back 90% of the movie.

00:16:13.300 --> 00:16:16.100
nicely on your devices.

00:16:17.100 --> 00:17:21.000
[Transcript missing]

00:17:21.340 --> 00:17:25.280
So here are the five available
types of images you can request.

00:17:25.350 --> 00:17:27.430
You can get back an NSImage if you want.

00:17:27.500 --> 00:17:32.950
You can also get back a CGImageRef,
a CIImage, a CVPixelBuffer,

00:17:32.950 --> 00:17:35.210
or an OpenGLTexture.

00:17:36.230 --> 00:17:40.620
So here is a very simple snippet
showing how with an open movie I can

00:17:40.620 --> 00:17:44.000
get a CG image ref at a specific time.

00:17:44.000 --> 00:17:46.970
And in this case, as you can see,
I'm asking for the image

00:17:46.970 --> 00:17:48.510
at the current time.

00:17:54.030 --> 00:17:56.590
So as you can see,
basic playback and editing with

00:17:56.590 --> 00:17:58.700
QTKit is really very simple.

00:17:58.880 --> 00:18:01.690
Like all Cocoa frameworks,
it's designed to make

00:18:01.690 --> 00:18:03.620
the easy things easy.

00:18:04.000 --> 00:18:07.370
One nice thing about QTKit is
that it plays well with others.

00:18:07.540 --> 00:18:11.790
It is able to interact nicely with
core animation and core image.

00:18:11.900 --> 00:18:15.990
To interact with core animation,
we define two classes that allow

00:18:16.110 --> 00:18:17.870
you to do things in layers.

00:18:17.900 --> 00:18:22.880
We have a QTMovie layer where you
will have a QTMovie and then say,

00:18:22.900 --> 00:18:25.810
"I want you to play it back in
this layer." And then that layer

00:18:25.810 --> 00:18:28.730
could be part of a core animation
presentation that you have.

00:18:28.900 --> 00:18:33.030
Also, if you are doing capture through
a device attached to the machine,

00:18:33.030 --> 00:18:37.710
you can preview what is being
captured in a QTCapture layer.

00:18:40.040 --> 00:18:44.640
We also, because we integrate
nicely with core animation,

00:18:44.770 --> 00:18:48.410
make it very easy for you to
apply core image filters to

00:18:48.410 --> 00:18:51.340
the output in a movie view.

00:18:51.770 --> 00:18:54.230
And so let's take a quick look at that.

00:18:54.290 --> 00:18:56.920
If I could go back to the demo machine.

00:19:09.430 --> 00:19:13.900
Let me just open this existing project.

00:19:14.100 --> 00:19:16.300
And the basic idea here is very simple.

00:19:16.640 --> 00:19:19.020
Let me open my nib file.

00:19:24.380 --> 00:19:26.090
Here's my user interface.

00:19:26.130 --> 00:19:28.380
It's got a button to
start and stop the movie,

00:19:28.480 --> 00:19:32.300
and it's got a pop-up menu where I'll
be able to pick a core image filter.

00:19:32.630 --> 00:19:36.300
This is a QT Movie View right
in the center there.

00:19:36.300 --> 00:19:39.300
Let's take a look at
this particular panel.

00:19:39.300 --> 00:19:44.220
Notice that the Movie View has a checkbox
next to the "Once Core Animation" layer.

00:19:44.300 --> 00:19:51.420
This is telling the underlying frameworks
that when it creates this Movie View,

00:19:51.420 --> 00:19:55.300
it wants there to be a layer
that is associated with that.

00:19:55.300 --> 00:19:59.430
What's called a "layer-backed
view." Since this view will

00:19:59.500 --> 00:20:02.200
now have a layer in it,
we can do nice things.

00:20:02.300 --> 00:20:06.600
Let's quit that and actually
look at the code here.

00:20:12.900 --> 00:20:15.140
Scroll down a little bit.

00:20:15.210 --> 00:20:16.980
And it's actually very simple.

00:20:17.000 --> 00:20:20.710
Let's suppose that we have an array
with a bunch of filters in it.

00:20:20.820 --> 00:20:25.900
We can then set those filters on the
layer associated with the movie view.

00:20:25.900 --> 00:20:27.280
And it's really that simple.

00:20:27.370 --> 00:20:32.020
So let's run this and see what
sorts of things we can do.

00:20:32.020 --> 00:20:34.010
We'll open a movie.

00:20:35.900 --> 00:20:38.040
Actually, let's just play this through
all the way because this,

00:20:38.050 --> 00:20:39.800
well, let's not.

00:20:39.940 --> 00:20:41.860
Let's start it playing.

00:20:41.960 --> 00:20:47.890
And I can come over here
and select a filter.

00:20:49.350 --> 00:20:53.200
Here is a posterized,
we can do some dot screens.

00:20:53.200 --> 00:20:58.520
So we can take any one of
the available CI filters and

00:20:58.550 --> 00:21:01.200
apply it to our movie view.

00:21:01.200 --> 00:21:04.170
Okay, so it's really just that simple.

00:21:04.190 --> 00:21:06.920
If I could go back to slides.

00:21:12.090 --> 00:21:13.880
So let me just close my portion of it.

00:21:14.000 --> 00:21:18.500
You've seen that it's very,
very simple to open a movie,

00:21:18.560 --> 00:21:23.990
stick it in a movie view,
and let the user work with it from there.

00:21:24.000 --> 00:21:28.960
The two classes, QTMovie and QTMovieView,
do 99% of what you want if you

00:21:28.960 --> 00:21:30.820
want simple movie playback.

00:21:31.000 --> 00:21:33.720
And as we saw,
QTKit is a good citizen in the

00:21:33.770 --> 00:21:36.000
whole graphics architecture.

00:21:36.000 --> 00:21:41.990
We vend layer classes and we're
able to apply filters to our view

00:21:42.000 --> 00:21:44.310
in a very straightforward way.

00:21:44.460 --> 00:21:46.830
So with that,
I'd like to bring up David Underwood,

00:21:46.830 --> 00:21:51.560
who will talk to us about the
capture capabilities in QTKit.

00:21:58.500 --> 00:22:01.640
Thank you, Tim.

00:22:01.780 --> 00:22:06.740
So at the high level,
what QTKit Capture enables you to do is

00:22:07.210 --> 00:22:12.570
enables your application to grab media
from some sort of real-time media source.

00:22:12.660 --> 00:22:14.640
And we have a couple of
examples of that here.

00:22:14.660 --> 00:22:19.310
So a really good example is the EyeSight,
which is a camera that we have built into

00:22:19.360 --> 00:22:21.900
almost all the computers that we sell.

00:22:21.900 --> 00:22:23.270
But there are other
sources you can think of,

00:22:23.280 --> 00:22:23.540
too.

00:22:23.590 --> 00:22:25.340
So for instance,
consumer and professional

00:22:25.390 --> 00:22:28.730
camcorders and tape decks,
and also any number of audio sources like

00:22:28.740 --> 00:22:30.960
microphones and different audio decks.

00:22:31.060 --> 00:22:35.350
And QTKit Capture lets you take the media
that you get from those various sources

00:22:35.350 --> 00:22:38.630
and apply it to various destinations.

00:22:38.780 --> 00:22:40.900
So a good example is a QuickTime movie.

00:22:40.900 --> 00:22:42.900
Maybe you want to record it to disk.

00:22:42.900 --> 00:22:45.160
You also probably want to
preview what you're capturing,

00:22:45.180 --> 00:22:47.520
so you want to have an
audio and a video preview.

00:22:47.570 --> 00:22:50.810
And in addition,
you want to capture to-- maybe

00:22:50.810 --> 00:22:53.170
your application needs to do
some special processing on

00:22:53.170 --> 00:22:54.240
the samples you're capturing.

00:22:54.240 --> 00:22:58.910
So QTKit Capture will also give you
raw decompressed audio and also video

00:22:58.910 --> 00:23:03.030
samples that you can use for any
additional processing that you need.

00:23:04.370 --> 00:23:07.090
So when we talk about these
sources and destinations,

00:23:07.100 --> 00:23:10.400
we can kind of visualize
them as inputs and outputs.

00:23:10.420 --> 00:23:13.900
And we just have a conceptual
diagram of this here.

00:23:13.900 --> 00:23:16.700
This is just an example use case
involving inputs and outputs.

00:23:16.700 --> 00:23:21.140
So say you have a camera and a microphone
attached to your computer somehow.

00:23:21.200 --> 00:23:24.550
And you want to capture that
and you want to send it to,

00:23:24.550 --> 00:23:27.100
well, say, a window on the screen.

00:23:27.170 --> 00:23:29.380
Maybe you want to preview the audio
through the speakers on your computer.

00:23:29.380 --> 00:23:31.620
And you want to record it
to a QuickTime movie file.

00:23:32.240 --> 00:23:36.520
So QTKit Capture represents this
concept of inputs and outputs

00:23:36.620 --> 00:23:39.780
directly using classes that
are defined in the framework.

00:23:39.780 --> 00:23:43.250
So your inputs are represented
by the QTCapture input class and

00:23:43.250 --> 00:23:47.720
your outputs are represented by,
logically, the QTCapture output class.

00:23:47.720 --> 00:23:49.860
And then we also have this
thing in the middle here,

00:23:49.980 --> 00:23:51.500
which we call a QTCapture session.

00:23:51.520 --> 00:23:53.170
And this class is very important.

00:23:53.270 --> 00:23:55.150
Effectively,
what this does is this is the traffic

00:23:55.230 --> 00:23:57.080
manager for everything that's going on.

00:23:57.210 --> 00:24:00.460
It's responsible for getting that
media data from all of the inputs

00:24:00.460 --> 00:24:02.100
and then distributing it out.

00:24:02.280 --> 00:24:05.250
So in this example,
you see we have both an audio and a

00:24:05.270 --> 00:24:07.550
video stream coming in on the input.

00:24:07.550 --> 00:24:11.310
But one of the outputs,
which is just to a window on the screen,

00:24:11.310 --> 00:24:12.660
it only needs video.

00:24:12.670 --> 00:24:17.010
So the QTCapture session knows that
and just gives it the video stream.

00:24:17.010 --> 00:24:18.830
The speakers only want audio.

00:24:19.080 --> 00:24:22.440
So likewise,
the capture session gives it audio.

00:24:22.440 --> 00:24:24.430
And then finally, we have our movie file.

00:24:24.490 --> 00:24:25.970
And that wants all of the media.

00:24:25.970 --> 00:24:29.410
So the capture session knows to
distribute both bits of media to that.

00:24:32.040 --> 00:24:34.740
QT Capture Output are
just abstract classes.

00:24:34.740 --> 00:24:38.710
They define a general interface for
how you would hook these things up.

00:24:38.740 --> 00:24:41.950
QT Kit Capture provides a number
of actual concrete classes that

00:24:41.950 --> 00:24:44.940
are subclasses of QT Capture
Input and QT Capture Output that

00:24:44.940 --> 00:24:47.260
you'll use in your application.

00:24:47.380 --> 00:24:50.520
So, for QT Capture Input we
have the most obvious case,

00:24:50.520 --> 00:24:52.690
which is we provide a
QT Capture Device Input,

00:24:52.880 --> 00:24:56.330
and this will allow you to use any
device that's attached or built

00:24:56.330 --> 00:24:58.960
into the computer as a media source.

00:24:59.110 --> 00:25:02.150
We also, for outputs,
we provide all sorts of things to you.

00:25:02.350 --> 00:25:06.000
So, one of them is if you want to
write to a QuickTime movie file,

00:25:06.000 --> 00:25:08.900
you would use QT Capture
Movie File Output.

00:25:09.010 --> 00:25:12.400
If you need to preview
your video or your audio,

00:25:12.400 --> 00:25:14.900
we have a few preview outputs
that you can use to do that.

00:25:14.960 --> 00:25:17.880
And finally,
we have outputs that give you raw data,

00:25:17.950 --> 00:25:21.890
so the decompressed video output
and the audio data output.

00:25:22.970 --> 00:25:24.770
So if you take a look at these,
depending on what your

00:25:24.880 --> 00:25:27.260
application needs to do,
you can use these concrete

00:25:27.260 --> 00:25:30.200
input and output classes,
basically like building blocks.

00:25:30.320 --> 00:25:33.860
So you assemble them together
to create the use case that your

00:25:33.860 --> 00:25:35.320
application is interested in.

00:25:35.350 --> 00:25:37.200
So in this one example
that I'm gonna show you,

00:25:37.300 --> 00:25:40.260
say we take just these classes
that I've highlighted here.

00:25:40.330 --> 00:25:45.300
So the device input,
and say you want to record to a movie

00:25:45.400 --> 00:25:46.520
file and preview what you're doing.

00:25:46.640 --> 00:25:50.400
So you'd use the movie file output
and these two preview outputs.

00:25:50.400 --> 00:25:52.860
And going back to one of these
flow chart diagrams again,

00:25:52.870 --> 00:25:54.300
it would look something like this.

00:25:54.320 --> 00:25:57.560
So say you have a camera and
a microphone in your computer,

00:25:57.560 --> 00:26:00.460
you would use QT capture
device input for each of those,

00:26:00.540 --> 00:26:03.620
plug those into the capture session,
which controls the traffic

00:26:03.620 --> 00:26:04.600
coming out of them.

00:26:04.620 --> 00:26:08.520
And then your output destinations
would be a decompressed video output,

00:26:08.520 --> 00:26:13.070
an audio preview output,
and a movie file output.

00:26:14.860 --> 00:26:17.500
So to show you an example
of how to do this in code,

00:26:17.500 --> 00:26:20.000
I'm going to go ahead and build
an application for you on stage.

00:26:20.000 --> 00:26:24.250
It'll be a very simple
movie recording application.

00:26:24.520 --> 00:26:26.540
You can actually see a more
complete version of this

00:26:26.540 --> 00:26:28.190
sample on our developer page.

00:26:28.200 --> 00:26:31.540
It's been up for a while now,
so if you want to follow along,

00:26:31.540 --> 00:26:33.630
you can open it now,
or if you want to review it later,

00:26:33.630 --> 00:26:35.000
it's available at this URL.

00:26:35.000 --> 00:26:37.300
And this application
basically does one thing.

00:26:37.300 --> 00:26:41.290
It captures media and records
it to a QuickTime file.

00:26:43.820 --> 00:26:46.380
So before I dive into code,
I'm just going to go

00:26:46.380 --> 00:26:49.890
over some basic steps,
tell you exactly what you might

00:26:49.890 --> 00:26:52.700
need to do when you build one
of these capture applications.

00:26:52.700 --> 00:26:54.700
And even though we're
just doing recording here,

00:26:54.700 --> 00:26:57.990
these steps really will apply
to any QTKit capture application

00:26:57.990 --> 00:26:59.700
that you might want to build.

00:26:59.700 --> 00:27:03.700
And really, at the highest level,
these steps are very simple.

00:27:03.710 --> 00:27:05.780
You're going to build
your capture session,

00:27:05.780 --> 00:27:08.200
so get your outputs and
your inputs in your session,

00:27:08.200 --> 00:27:10.700
and then you're going to
use the capture session.

00:27:10.700 --> 00:27:11.700
Sounds easy, right?

00:27:11.700 --> 00:27:15.530
So going to a little more detail,
one of the very first things you're

00:27:15.530 --> 00:27:19.220
going to need to do in building a
capture session is you're going to

00:27:19.220 --> 00:27:21.700
want to find a device to record from.

00:27:21.700 --> 00:27:25.350
The way you do this is you
use the QTCaptureDevice class,

00:27:25.350 --> 00:27:28.920
and this is a class whose
instances represent all of the

00:27:28.920 --> 00:27:33.490
devices that are attached to or
built into the user's computer.

00:27:33.800 --> 00:27:35.740
Once you've found the
device that you want,

00:27:35.750 --> 00:27:37.850
and there are a lot of ways to do that,
and I'll show you one of them,

00:27:38.080 --> 00:27:40.690
you need to open the
device to capture it.

00:27:40.700 --> 00:27:44.800
And what that means is you're effectively
telling the underlying device system,

00:27:44.800 --> 00:27:48.150
"I'm about to grab data from this device,
so allocate any resources you need

00:27:48.150 --> 00:27:52.100
to do this and make sure that this
device is as available as it can be

00:27:52.100 --> 00:27:55.880
for the application." And this is
very important because devices on

00:27:55.880 --> 00:27:57.700
the system are a shared resource.

00:27:57.700 --> 00:27:59.700
Many applications can access
them at the same time.

00:27:59.710 --> 00:28:03.250
And so the application needs to be
explicit to the device system about

00:28:03.250 --> 00:28:07.700
when it's using the device so that it
doesn't hog the resource unnecessarily.

00:28:08.590 --> 00:28:12.630
Once you've found your device,
now you're ready to build your

00:28:12.780 --> 00:28:14.860
QT Capture session itself.

00:28:14.860 --> 00:28:18.700
The way you do that is you create
instances of subclasses of QT Capture

00:28:18.700 --> 00:28:20.740
input and QT Capture output.

00:28:20.740 --> 00:28:23.260
In the example I'm about to show you,
this will be pretty simple.

00:28:23.260 --> 00:28:27.120
We're just going to use QT Capture device
input and QT Capture movie file output.

00:28:27.120 --> 00:28:32.110
We'll capture from a device
and output to a movie file.

00:28:32.410 --> 00:28:35.020
Once you have those instances,
you're going to add them

00:28:35.040 --> 00:28:37.820
to your QT Capture session,
which is again going

00:28:37.820 --> 00:28:39.800
to do all the traffic.

00:28:39.870 --> 00:28:44.120
And finally, we have another class
called a QT Capture View,

00:28:44.120 --> 00:28:48.100
which is somewhat similar to a
QT Movie View that Tim showed you.

00:28:48.140 --> 00:28:51.520
It's just going to do all of the work
of automatically previewing the video

00:28:51.660 --> 00:28:53.100
going through your capture session.

00:28:53.100 --> 00:28:56.470
And you're going to interact with
this class and code very little.

00:28:56.500 --> 00:28:58.190
Most of it's just going to
be an Interface Builder,

00:28:58.190 --> 00:29:00.390
and I'll show you that in a second.

00:29:01.050 --> 00:29:02.840
So now you have your QTCapture session.

00:29:02.870 --> 00:29:03.770
Now you actually want to use it.

00:29:03.860 --> 00:29:05.660
Your application's supposed
to do something with it.

00:29:05.680 --> 00:29:07.900
So first you tell it to start running.

00:29:07.930 --> 00:29:12.070
And what this does is this tells it to
start pulling media data out of those

00:29:12.070 --> 00:29:15.180
inputs that are hooked up to it and to
start distributing it out to its outputs.

00:29:15.180 --> 00:29:18.420
And it'll keep on doing that
until you tell it to stop.

00:29:18.450 --> 00:29:22.840
Then we're gonna go and talk to the movie
file output that we added to the session.

00:29:22.840 --> 00:29:24.810
And since this is the class
that's responsible for

00:29:24.810 --> 00:29:26.860
actually recording the file,
we're gonna tell it to start

00:29:26.960 --> 00:29:29.380
recording and then tell it to
stop recording sometime later,

00:29:29.380 --> 00:29:31.440
depending on what the user does.

00:29:31.490 --> 00:29:33.620
And then finally,
we need to implement a delegate

00:29:33.720 --> 00:29:37.090
method on the movie file output
that will get called back when the

00:29:37.090 --> 00:29:38.500
file's actually finished writing.

00:29:38.520 --> 00:29:42.000
And I'll show you how that
works concretely in a second.

00:29:42.060 --> 00:29:45.090
So if we could go to the demo machine,
please.

00:29:48.520 --> 00:29:51.120
All right, I'm just gonna close this off.

00:29:51.120 --> 00:29:56.260
So we're gonna build this
roughly from scratch.

00:29:56.260 --> 00:29:59.820
I'm gonna cheat a little more than
Tim did and I'll have some snippets of

00:29:59.820 --> 00:30:02.890
code here that I already have written.

00:30:04.590 --> 00:30:08.060
So we're gonna go into Xcode
and create a new project.

00:30:08.070 --> 00:30:10.640
And this is gonna be a very simple,
single-windowed application.

00:30:10.640 --> 00:30:12.940
So I'm just gonna make
a new Cocoa application.

00:30:12.940 --> 00:30:17.870
And let's call it My Recorder.

00:30:21.300 --> 00:30:23.290
And just as before,
the very first thing that

00:30:23.290 --> 00:30:28.330
we need to do is add the
QTKit framework to our project.

00:30:36.300 --> 00:30:37.420
Now we're good there.

00:30:37.440 --> 00:30:40.320
And because this is a
relatively simple application,

00:30:40.350 --> 00:30:45.820
really we just have a user interface
and the actual capture objects in QTKit.

00:30:45.820 --> 00:30:48.830
So the model objects,
QTCaptureSession and

00:30:48.830 --> 00:30:49.860
the inputs and outputs.

00:30:49.950 --> 00:30:53.480
So we really just need one controller
class that ties it all together.

00:30:53.490 --> 00:30:57.670
And we're going to create that
here now by making a new file.

00:30:58.650 --> 00:31:02.000
And we're going to define
a new Objective-C class.

00:31:02.000 --> 00:31:05.380
And let's call it MyRecorderController.

00:31:10.750 --> 00:31:14.080
And let's just go ahead and define
what we'll see in the header file.

00:31:14.080 --> 00:31:15.640
Let's look at the general
interface of this class.

00:31:15.640 --> 00:31:18.890
I'm just gonna get rid
of that template stuff.

00:31:19.800 --> 00:31:22.560
dragging what we need in the header file.

00:31:22.600 --> 00:31:26.080
So you see there's not a whole lot to it.

00:31:26.080 --> 00:31:28.060
One thing we have in here is
we have an interface builder

00:31:28.060 --> 00:31:30.570
outlet to a QT capture view,
and we're gonna need that so

00:31:30.570 --> 00:31:34.540
we can associate the capture
view with the session in code.

00:31:34.540 --> 00:31:37.590
You notice we also have a few instance
variables for those QTKitCapture

00:31:37.620 --> 00:31:39.660
objects that we're going to create.

00:31:39.660 --> 00:31:44.620
So we have a QTCaptureSession object,
a movie file output, and a device input.

00:31:44.630 --> 00:31:46.720
Finally,
this controller class is defining a

00:31:46.800 --> 00:31:50.300
couple of action methods that we're gonna
hook up to buttons in our user interface,

00:31:50.300 --> 00:31:53.100
and this will be what the user
uses to actually tell us to start

00:31:53.100 --> 00:31:55.740
recording and to stop recording.

00:31:55.740 --> 00:31:57.780
So I'm just gonna save that.

00:31:57.790 --> 00:31:59.780
And now that we have
that header file defined,

00:31:59.880 --> 00:32:01.920
let's go ahead and build
the user interface,

00:32:01.920 --> 00:32:02.820
the application.

00:32:02.820 --> 00:32:06.090
So let's open our nib file.

00:32:07.140 --> 00:32:09.700
And right here in the
Interface Builder library,

00:32:09.750 --> 00:32:13.500
right next to QT Movie View,
we see we also have a QT Capture View.

00:32:13.500 --> 00:32:17.490
And just as before, we'll drag that out.

00:32:20.200 --> 00:32:21.040
Nicely.

00:32:21.040 --> 00:32:26.780
And we're also gonna add a couple
of buttons to this interface,

00:32:26.790 --> 00:32:30.010
and those are gonna let
the user control recording.

00:32:30.210 --> 00:32:36.040
So let's have a stop
button and a start button,

00:32:36.040 --> 00:32:39.780
and we'll line those up.

00:32:43.090 --> 00:32:46.320
And finally,
I'm just going to set some resizing

00:32:46.380 --> 00:32:49.530
attributes in Interface Builder
so that the window resizes nicely

00:32:49.530 --> 00:32:50.690
and the controls are laid out.

00:32:50.740 --> 00:32:53.890
So I'm going to pin these two buttons
in the lower right-hand corner,

00:32:53.900 --> 00:32:58.290
and I'm going to make it so the capture
view resizes nicely with the window also.

00:32:59.670 --> 00:33:03.640
Finally, we need an instance of our
controller class to hook up the

00:33:03.640 --> 00:33:05.780
user interface to the capture.

00:33:05.810 --> 00:33:07.920
But luckily we can do that
right in the nib file.

00:33:07.920 --> 00:33:12.070
And the way we do that is we get an
object from the Interface Builder

00:33:12.070 --> 00:33:14.760
library and drag that into the nib file.

00:33:14.920 --> 00:33:17.600
and that object needs to be an
instance of our controller class.

00:33:17.600 --> 00:33:21.970
So we go to the custom class pane of
the inspector and we say that this is an

00:33:22.010 --> 00:33:25.790
instance of my recorder controller and
you see Interface Builder automatically

00:33:25.930 --> 00:33:27.420
found all the outlets and actions.

00:33:27.440 --> 00:33:30.850
And so we'll hook this
up to our capture view.

00:33:30.860 --> 00:33:32.410
There we go.

00:33:32.440 --> 00:33:36.270
And we'll hook up the
start and stop buttons.

00:33:41.050 --> 00:33:41.840
We're good to go.

00:33:41.840 --> 00:33:44.840
So let's write some code.

00:33:44.940 --> 00:33:48.870
So we'll open up the implementation
file from iRecorder Controller.

00:33:49.310 --> 00:33:53.230
So if you recall,
I outlined two basic steps for

00:33:53.680 --> 00:33:56.850
working with QTKit Capture,
which is to set up your capture session

00:33:56.900 --> 00:33:59.200
and then run it and do something with it.

00:33:59.200 --> 00:34:02.460
So a logical place to do this setup,
since our controller class is being

00:34:02.460 --> 00:34:08.200
instantiated inside of a nib file,
is inside of the AwakeFromNib method.

00:34:11.040 --> 00:34:16.530
And this method is called for any class
that's instantiated inside of a nib file,

00:34:16.540 --> 00:34:19.630
so it'll just get called
when the nib is first loaded.

00:34:20.070 --> 00:34:22.000
And we'll start doing some setup.

00:34:22.040 --> 00:34:23.990
So again,
the very first thing we're gonna wanna

00:34:24.390 --> 00:34:26.740
do is create our QT Capture Session.

00:34:26.740 --> 00:34:29.580
And that's just simply a matter of
doing QT Capture Session alloc init.

00:34:29.740 --> 00:34:31.510
It's all you need to do.

00:34:31.880 --> 00:34:42.030
Then we need to find a device.

00:34:42.030 --> 00:34:42.030
So we've simplified this a little bit
over the sample that's available online.

00:34:42.030 --> 00:34:42.030
And right now we're just
going to record video.

00:34:42.030 --> 00:34:42.030
So I'm going to look for a video device.

00:34:42.460 --> 00:34:45.380
One of the ways to do
that is to ask the system,

00:34:45.380 --> 00:34:48.000
"What's the default video
input device on the system?

00:34:48.000 --> 00:34:52.350
What's the most logical one that could
be used by default?" So for example,

00:34:52.350 --> 00:34:56.300
on the iMac or a laptop,
that would be the built-in iSight.

00:34:56.490 --> 00:34:59.000
And the way that we get that
is with the class method,

00:34:59.090 --> 00:35:01.270
default input device with media type.

00:35:01.450 --> 00:35:03.820
And the media type you pass
here is what kind of media the

00:35:03.820 --> 00:35:05.300
device is going to give you.

00:35:05.300 --> 00:35:07.640
So in this case, we want video.

00:35:08.600 --> 00:35:10.630
Now that we've found our device,
we need to open it.

00:35:10.640 --> 00:35:13.550
Again, to tell the device system

00:35:14.130 --> 00:35:16.750
I'm about to capture from this device,
allocate any resources

00:35:16.750 --> 00:35:17.820
that you need to do that.

00:35:17.820 --> 00:35:20.490
And we do that with the
QTCaptureDevice.open

00:35:20.490 --> 00:35:21.970
method on that instance.

00:35:22.100 --> 00:35:26.330
This method also returns an
NSError optionally if you want to

00:35:26.430 --> 00:35:31.310
find out if it failed for some reason,
and it returns a Boolean value just

00:35:31.310 --> 00:35:33.100
if you need to check the failure case.

00:35:33.130 --> 00:35:35.000
So one very important thing,
it's the reason why it's

00:35:35.000 --> 00:35:37.510
highlighted in this code,
often in these demos we

00:35:37.510 --> 00:35:41.540
leave out error handling,
but your application absolutely

00:35:41.540 --> 00:35:44.230
must check to see if open succeeded.

00:35:44.230 --> 00:35:47.100
And the reason for that is that
there is always a rational reason

00:35:47.100 --> 00:35:49.090
that the open method can fail.

00:35:49.270 --> 00:35:54.220
So for example, say the user had a camera
plugged into the computer,

00:35:54.220 --> 00:35:58.100
and you went and called this method
while that camera was plugged in,

00:35:58.100 --> 00:36:00.100
and it returned the
QTCaptureDevice for that camera.

00:36:00.100 --> 00:36:03.090
And then between this method
finishing and you calling open,

00:36:03.100 --> 00:36:06.080
the user, you know, they like to try to
break your application.

00:36:06.120 --> 00:36:08.090
They go and yank the
camera out of the system.

00:36:08.100 --> 00:36:09.100
Well, that's not the case.

00:36:09.100 --> 00:36:12.090
So the QTCaptureDevice instance,
the object is still valid,

00:36:12.100 --> 00:36:14.100
but the device is gone.

00:36:14.100 --> 00:36:16.030
So if you try to open
it on the device system,

00:36:16.030 --> 00:36:17.100
it's going to fail.

00:36:17.100 --> 00:36:20.100
And so your application always needs
to be able to deal with that case.

00:36:20.260 --> 00:36:23.070
So in this case,
it's not all that elegant,

00:36:23.100 --> 00:36:26.090
but basically we say, okay,
this isn't useful anymore,

00:36:26.130 --> 00:36:27.100
so we'll nil it out.

00:36:27.100 --> 00:36:29.760
Probably you would want to
display an error message or

00:36:29.800 --> 00:36:31.340
something similar to that.

00:36:32.860 --> 00:36:38.270
So now that we've found our device,
we can create our inputs and our outputs

00:36:38.300 --> 00:36:40.790
and add them to the capture session.

00:36:42.290 --> 00:36:45.520
So the first input we'll create
is a QTCaptureDevice input,

00:36:45.540 --> 00:36:48.290
and we just create that around
the device that we just found

00:36:48.290 --> 00:36:50.710
using the initWithDevice method.

00:36:51.230 --> 00:36:58.490
Once we've done that,
QT Capture Session has

00:36:58.490 --> 00:37:02.290
an addInput method.

00:37:02.290 --> 00:37:02.290
And so we take that input that we just
created and add it to the session.

00:37:02.290 --> 00:37:02.290
And this also returns an error
that you can optionally check.

00:37:03.970 --> 00:37:07.020
For our output case,
we create a QTCaptureMovieFile output,

00:37:07.050 --> 00:37:09.660
which will be responsible for
writing the data to the file.

00:37:09.720 --> 00:37:13.240
And again, we just initialize that by
saying alloc init and adding it

00:37:13.240 --> 00:37:17.740
as an output using the addOutput
method to the QTCapture session.

00:37:17.760 --> 00:37:19.730
One additional thing you
need to do with the MovieFile

00:37:19.730 --> 00:37:21.650
output is set a delegate on it.

00:37:21.660 --> 00:37:24.100
In this case,
we'll just set ourselves as the delegate.

00:37:24.120 --> 00:37:28.700
And the reason for this is that
QTCaptureMovieFile output will

00:37:28.700 --> 00:37:31.780
call back the delegate with
actually all sorts of information.

00:37:31.780 --> 00:37:33.320
It exposes a lot of delegate methods.

00:37:33.320 --> 00:37:35.590
So for example,
it tells the delegate when it's

00:37:35.590 --> 00:37:37.800
started to write to the file.

00:37:37.840 --> 00:37:40.350
It even actually has a delegate
method that's called for every

00:37:40.350 --> 00:37:42.820
single media sample that comes
into the MovieFile output.

00:37:42.820 --> 00:37:46.140
So if you wanna control really precisely
when to start and stop recording,

00:37:46.140 --> 00:37:47.320
you can do that.

00:37:47.360 --> 00:37:50.550
But in this case, we only care about one
thing that's very important,

00:37:50.560 --> 00:37:53.270
which is we wanna find out when
the file is finished writing.

00:37:53.280 --> 00:37:58.550
And I'll show you in a second why that
has to be done with the delegate method

00:37:58.650 --> 00:38:00.980
when I show you the delegate method.

00:38:02.440 --> 00:38:07.400
Just sort of to write sane
amounts of data to the disk,

00:38:07.560 --> 00:38:11.840
what we also want to do is compress
the media that we're writing through.

00:38:11.850 --> 00:38:16.310
And the way that we do that is using
this QT compression options API,

00:38:16.310 --> 00:38:21.440
which is a very simple API in
QTKit Capture for choosing what sorts

00:38:21.440 --> 00:38:24.500
of options for compression you might
want to use for a piece of media.

00:38:24.540 --> 00:38:27.300
And basically it just exposes
a bunch of compression presets.

00:38:27.300 --> 00:38:30.010
So for example, in this case,
we're going to create a QT compression

00:38:30.010 --> 00:38:33.280
options object with just this preset,
which is we just want to do

00:38:33.280 --> 00:38:35.110
kind of small H.264 video.

00:38:35.430 --> 00:38:36.900
So we don't really care
about it being big.

00:38:36.900 --> 00:38:39.620
We just want to record something,
have it not take up very much space.

00:38:39.680 --> 00:38:43.100
And it will compress that live
as you're recording to disk.

00:38:43.360 --> 00:38:46.140
And when you get that
QT compression options object,

00:38:46.140 --> 00:38:49.420
you're going to apply it
to the movie file output.

00:38:49.470 --> 00:38:52.660
And this goes into a little
more detail than I'm going

00:38:52.660 --> 00:38:55.760
to go into in this session,
but you have to do it for these

00:38:55.780 --> 00:38:57.340
QT capture connection objects.

00:38:57.350 --> 00:39:00.180
And if you're really curious to
know what these objects are for,

00:39:00.180 --> 00:39:02.760
what their significance is,
stick around for the next session,

00:39:02.760 --> 00:39:04.900
the advanced session
will go into more detail.

00:39:04.930 --> 00:39:07.800
But I'll just suffice it to say here,
this is how you would apply

00:39:07.940 --> 00:39:11.390
these compression options
to this movie file output.

00:39:11.770 --> 00:39:14.580
Finally, we want to preview the
video we're recording,

00:39:14.580 --> 00:39:18.040
so we add an outlet and interface
builder to our capture view.

00:39:18.060 --> 00:39:20.730
And we're just going to say,
tell the capture view,

00:39:20.730 --> 00:39:23.100
this is your capture session,
which was the capture session

00:39:23.100 --> 00:39:24.380
we created at the beginning.

00:39:24.410 --> 00:39:27.530
And finally, we have everything set up,
so we tell the capture session,

00:39:27.570 --> 00:39:28.460
start running.

00:39:28.500 --> 00:39:31.110
Start grabbing media from the
camera and sending it out to

00:39:31.120 --> 00:39:33.070
where you need to send it.

00:39:34.490 --> 00:39:36.000
So our capture session has been built.

00:39:36.000 --> 00:39:39.870
And whenever you set things up,
you also need to clean them up.

00:39:39.950 --> 00:39:41.520
Always important.

00:39:41.520 --> 00:39:45.910
And we do this in two ways.

00:39:46.450 --> 00:39:49.560
So first, actually I forgot to do
this in the nib file,

00:39:49.560 --> 00:39:51.770
so I'm gonna do this pretty quickly.

00:39:52.030 --> 00:39:58.170
We're going to make our controller the
delegate of our application's window.

00:39:58.360 --> 00:40:02.410
- And what this enables us to do is,
when the window is about to close,

00:40:02.420 --> 00:40:04.100
it's gonna call this method.

00:40:04.150 --> 00:40:07.410
And this is a good opportunity to clean
up some of the really critical shared

00:40:07.420 --> 00:40:09.280
resources that our application is using.

00:40:09.280 --> 00:40:12.760
So most importantly,
this is our opportunity to close that

00:40:12.760 --> 00:40:15.120
QT Capture device that we opened earlier.

00:40:15.270 --> 00:40:17.140
And this is really
important because again,

00:40:17.170 --> 00:40:19.740
we don't wanna keep it open
for longer than we need to,

00:40:19.750 --> 00:40:22.350
so the window closing is a good
time 'cause the user obviously

00:40:22.350 --> 00:40:23.580
doesn't need it anymore.

00:40:24.510 --> 00:40:29.360
In addition,
your application should basically always

00:40:29.430 --> 00:40:31.360
close a QT Capture device that it opens.

00:40:31.360 --> 00:40:35.060
So wherever you call open,
you need a matched call to close

00:40:35.060 --> 00:40:37.520
elsewhere in your application
when you're done with it.

00:40:37.540 --> 00:40:40.750
This is also a good time to tell the
capture session to stop running because

00:40:40.800 --> 00:40:44.790
that also just uses a lot of CPU and
bus bandwidth and we don't need it

00:40:44.790 --> 00:40:47.180
anymore 'cause the window's gonna close.

00:40:47.240 --> 00:40:49.630
Finally, in our DLLIC method,
this is where we just go and do

00:40:49.630 --> 00:40:53.970
the standard Cocoa releasing of
the objects that we've created.

00:40:56.210 --> 00:40:59.310
So we have our setup code and
we have our teardown code.

00:40:59.370 --> 00:41:01.570
Let's actually use this thing.

00:41:02.140 --> 00:41:06.130
And that turns out to be
pretty simple in this case.

00:41:06.480 --> 00:41:09.020
Here are two Interface Builder actions.

00:41:09.090 --> 00:41:13.330
The start recording action simply
tells the movie file output

00:41:14.120 --> 00:41:17.460
record to the file at this URL.

00:41:17.460 --> 00:41:19.260
And we just have a hard
coded path in this case,

00:41:19.270 --> 00:41:22.320
but you could obviously bring up the
user interface to make it more complex.

00:41:22.320 --> 00:41:25.560
And then the stop recording method says,
okay,

00:41:25.640 --> 00:41:27.610
just don't record to anything anymore.

00:41:27.840 --> 00:41:29.580
You pass nil.

00:41:29.800 --> 00:41:33.530
An important thing to note about this
particular method is when you call this,

00:41:33.530 --> 00:41:36.330
it will effectively return immediately.

00:41:36.470 --> 00:41:39.040
So even if the file isn't
finished writing yet,

00:41:39.180 --> 00:41:40.700
this method is still going to return.

00:41:40.710 --> 00:41:43.420
And the reason for this is
that QTKit capture is very

00:41:43.600 --> 00:41:46.700
heavily asynchronous and
very heavily multithreaded.

00:41:46.700 --> 00:41:51.700
And sometimes, for example,
with a QuickTime movie file,

00:41:51.700 --> 00:41:55.180
even when you've run out of data
that you need to write to the file,

00:41:55.220 --> 00:41:57.030
so media data,
there's some extra stuff you need

00:41:57.030 --> 00:41:59.700
in that file so that it'll open
correctly as a QuickTime file.

00:41:59.700 --> 00:42:02.800
So for example,
QuickTime movies need a sample table so

00:42:02.800 --> 00:42:06.700
that they know where the media samples
are and what times they correspond to,

00:42:06.700 --> 00:42:09.700
so the user can play
and scrub efficiently.

00:42:09.700 --> 00:42:11.700
And that might take
some time to write out,

00:42:11.700 --> 00:42:14.670
but we don't want to block the main
user interface while that's happening.

00:42:14.700 --> 00:42:17.340
So even if the file isn't
actually finished yet,

00:42:17.460 --> 00:42:19.700
this is going to return immediately.

00:42:19.700 --> 00:42:22.290
But your application most likely
wants to do something with that

00:42:22.290 --> 00:42:24.080
file after it's been finished,
so you need to find

00:42:24.080 --> 00:42:24.700
out when it's finished.

00:42:24.700 --> 00:42:25.700
So you need to find
out when it's finished.

00:42:25.700 --> 00:42:28.700
And it really was finished so
that that file can be open.

00:42:28.700 --> 00:42:31.690
And the way that you do that,
if you recall,

00:42:31.690 --> 00:42:34.700
we set ourselves as a delegate
on the movie file output before,

00:42:34.810 --> 00:42:36.700
is you implement this delegate method.

00:42:36.700 --> 00:42:39.660
Just capture output,
did finish recording to output file

00:42:39.660 --> 00:42:41.700
URL for connections due to error.

00:42:41.700 --> 00:42:44.700
So it's a bit of a mouthful,
but in this case,

00:42:44.700 --> 00:42:46.660
we don't have to do a whole lot with it.

00:42:46.750 --> 00:42:47.700
It's pretty simple.

00:42:47.700 --> 00:42:49.700
We're just going to tell
the shared NS workspace,

00:42:49.700 --> 00:42:52.710
"Open up this file," which we'll
just launch it in QuickTime Player,

00:42:52.770 --> 00:42:54.700
because we know it's finished
and we know it can be played,

00:42:54.700 --> 00:42:56.700
and we'll open it in
a player application.

00:42:56.700 --> 00:43:01.700
So we'll save that and build it,
and that should be everything we need.

00:43:01.700 --> 00:43:03.700
Oh, no, no it's not.

00:43:03.840 --> 00:43:05.700
Ah, I know what I forgot to do.

00:43:07.800 --> 00:43:11.920
Just as it's very important to
include QTKit in your project,

00:43:11.920 --> 00:43:13.860
you also need to bring in the header.

00:43:13.860 --> 00:43:19.050
There we go.

00:43:22.200 --> 00:43:23.510
And here's our application.

00:43:23.560 --> 00:43:26.220
And you see we have our
QT capture view up here.

00:43:26.890 --> 00:43:28.220
And it's previewing what we have.

00:43:28.270 --> 00:43:32.390
And our faithful test subject here
for all of our videos today is going

00:43:32.390 --> 00:43:34.750
to be this little stuffed elephant.

00:43:34.830 --> 00:43:35.240
Say hello.

00:43:35.240 --> 00:43:39.200
And we'll just record a little
movie with the elephant in it.

00:43:39.200 --> 00:43:40.380
So let's start this thing.

00:43:40.380 --> 00:43:42.580
And now it's recording the file.

00:43:42.580 --> 00:43:45.870
And I will make him turn
in a circle or something.

00:43:45.870 --> 00:43:45.870
Yeah.

00:43:47.600 --> 00:43:49.440
Sure, that's pretty good.

00:43:49.450 --> 00:43:51.220
And we'll hit stop.

00:43:51.220 --> 00:43:52.610
And there you go.

00:43:52.620 --> 00:43:55.230
The movie was recorded to
a file and we automatically

00:43:55.230 --> 00:43:56.660
launched it in QuickTime Player.

00:43:56.660 --> 00:43:58.790
And there it is.

00:43:59.320 --> 00:44:01.490
And you'll notice it's
a little cheesy here,

00:44:01.490 --> 00:44:04.040
seeing my hand here in the
frame turning the elephant.

00:44:04.040 --> 00:44:05.370
That's not very convincing.

00:44:05.470 --> 00:44:07.170
He doesn't look like he's
moving under his own power.

00:44:07.280 --> 00:44:10.910
We'll show you how to fix
that problem in a second.

00:44:13.700 --> 00:44:16.870
And just to show that
our compression worked,

00:44:16.870 --> 00:44:20.020
you'll see that if we open the
info window in QuickTime Player,

00:44:20.040 --> 00:44:23.860
you'll see that we are in fact using
the H.264 decoder to decode this movie.

00:44:23.860 --> 00:44:25.560
So that's what it was
written out to file as.

00:44:25.560 --> 00:44:28.140
So we got a pretty small file for this.

00:44:28.140 --> 00:44:31.580
So, you know, this is a tiny file for
this quality of video.

00:44:31.580 --> 00:44:36.690
And that's a very simple capture
application with QTKit Capture API.

00:44:36.900 --> 00:44:42.680
So if I could go back to slides, please.

00:44:51.800 --> 00:44:54.540
So that was just one example of the
way that you can take the concrete

00:44:54.600 --> 00:44:58.020
classes that QTKit Capture gives you
and assemble them together to meet a

00:44:58.020 --> 00:44:59.950
certain use case of the application.

00:45:00.060 --> 00:45:01.800
Well,
say you have something more creative

00:45:01.800 --> 00:45:03.490
in mind than writing to disk.

00:45:03.530 --> 00:45:05.480
Say you have something more open-ended.

00:45:05.520 --> 00:45:08.680
Well,
we can use a different set of classes

00:45:08.680 --> 00:45:10.090
and use those as building blocks.

00:45:10.290 --> 00:45:13.540
So again, we're just gonna kind of pick
and choose out of what's given.

00:45:13.540 --> 00:45:15.460
And again,
we'll use a QTCapture device input.

00:45:15.480 --> 00:45:16.780
It's really our only choice.

00:45:16.810 --> 00:45:19.340
And we're gonna use this different
class called the QTCapture

00:45:19.340 --> 00:45:21.330
decompressed video output.

00:45:22.450 --> 00:45:27.460
What this class allows you to do is
get each individual frame of video

00:45:27.610 --> 00:45:32.280
that comes from the capture session as
it's captured as quickly as possible.

00:45:32.360 --> 00:45:34.290
It tries to give them to you.

00:45:34.290 --> 00:45:39.430
If the device that you were capturing
from happens to do video compression,

00:45:39.430 --> 00:45:43.300
for example, it's a DV camcorder,
that's compressed video,

00:45:43.450 --> 00:45:46.160
this output will decompress that
video for you so you'll always

00:45:46.250 --> 00:45:49.040
get raw pixels that you can use
for various types of processing.

00:45:49.300 --> 00:45:52.900
And what this class,
this class gives you the video in

00:45:52.900 --> 00:45:57.750
the form of the CV image buffer type,
which is a common class that's

00:45:57.750 --> 00:46:01.300
exposed by core video that
contains buffers of video.

00:46:01.300 --> 00:46:03.300
It's very appropriate for video buffers.

00:46:03.300 --> 00:46:05.390
And again,
the flow chart here looks pretty

00:46:05.390 --> 00:46:07.210
similar to what you've seen before.

00:46:07.330 --> 00:46:09.260
On the input end,
we have our device input.

00:46:09.410 --> 00:46:11.300
The capture session is
distributing the traffic.

00:46:11.300 --> 00:46:15.220
And on the output end,
we have our decompressed video output.

00:46:17.600 --> 00:47:40.500
[Transcript missing]

00:47:43.290 --> 00:47:44.810
Thanks.

00:47:44.820 --> 00:47:47.040
Okay, so I'll just close this off.

00:47:47.040 --> 00:47:50.500
And I'm not gonna build this
one completely from scratch.

00:47:50.500 --> 00:47:52.580
I'll walk through most of the code.

00:47:52.580 --> 00:47:55.150
And the reason for that is 'cause you've,
a lot of the basic steps

00:47:55.150 --> 00:47:56.240
are exactly the same.

00:47:56.240 --> 00:47:57.500
I don't need to show them to you again.

00:47:57.500 --> 00:48:00.560
I'll show you where they're the same,
but not so much different.

00:48:00.560 --> 00:48:04.470
So I'm just gonna open this project
and this is the same one that's

00:48:04.470 --> 00:48:06.870
available on the developer page.

00:48:07.360 --> 00:48:10.550
And the first thing we'll look at
actually is the user interface.

00:48:10.790 --> 00:48:14.060
So, gonna open up our new file.

00:48:14.080 --> 00:48:15.800
And unlike the previous
application that I built,

00:48:15.800 --> 00:48:17.120
this one is document-based.

00:48:17.120 --> 00:48:20.490
So you'll actually be able to
have multiple animations going

00:48:20.560 --> 00:48:23.800
at the same time and save them
out to separate documents.

00:48:23.850 --> 00:48:27.180
And in our user interface,
it's not that much more complex.

00:48:27.190 --> 00:48:30.760
On the left side here,
we have again our QT Capture view.

00:48:30.810 --> 00:48:32.770
And this is gonna show us
what's happening live in

00:48:32.850 --> 00:48:34.800
front of the camera right now.

00:48:34.830 --> 00:48:38.100
But then on the right side,
we have a QT Movie view.

00:48:38.140 --> 00:48:41.170
And that's gonna show us the
actual movie that we've assembled

00:48:41.170 --> 00:48:42.980
so far in our application.

00:48:43.060 --> 00:48:45.680
Finally, we have a button here,
and this button's gonna be responsible

00:48:45.740 --> 00:48:49.820
for taking whatever's currently in the
scene and appending it over into the

00:48:49.820 --> 00:48:51.720
movie so we can build our animation.

00:48:51.880 --> 00:48:53.950
So, pretty simple.

00:48:58.760 --> 00:49:02.860
So let's take a quick look
at the actual implementation.

00:49:02.860 --> 00:49:07.340
And again, this method is called,
it's similar to Awake from Nib,

00:49:07.370 --> 00:49:10.200
it's called in a document-based
application whenever the Nib file

00:49:10.200 --> 00:49:13.480
is actually loaded and the user
interface is about to come up.

00:49:14.650 --> 00:49:18.260
And you'll notice again,
we do very similar things

00:49:18.320 --> 00:49:19.590
with QTKit Capture.

00:49:19.600 --> 00:49:24.340
We create a capture session,
we get our default QTCapture device

00:49:24.400 --> 00:49:28.780
and we open it and very importantly,
check whether that succeeded or not.

00:49:28.810 --> 00:49:30.440
And in this case,
we're a little friendlier actually,

00:49:30.440 --> 00:49:32.780
we bring up an alert if
that failed for some reason,

00:49:32.790 --> 00:49:35.520
so it's a little more
helpful to the user.

00:49:35.540 --> 00:49:39.110
We make our device input,
we add it to the session.

00:49:40.020 --> 00:49:43.700
and the new thing here is we create
our decompressed video output

00:49:43.740 --> 00:49:47.000
instead of the file output since
we're not writing directly to file.

00:49:47.040 --> 00:49:50.840
And this is gonna do the meat
of the work of our application.

00:49:50.870 --> 00:49:54.420
But similarly to the movie file output,
we're gonna set a delegate on this class.

00:49:54.420 --> 00:49:56.920
And in this case,
the delegate is going to get

00:49:56.920 --> 00:50:00.860
called back every single time the
output receives a new video frame.

00:50:00.920 --> 00:50:04.380
So this is what you're gonna use
to actually grab those raw frames.

00:50:04.390 --> 00:50:07.510
And we add that as an
output to the session.

00:50:07.770 --> 00:50:11.170
Hook up the capture view, same thing,
and we start the session running.

00:50:11.190 --> 00:50:14.260
So this should look very,
very similar to what I did before,

00:50:14.260 --> 00:50:17.750
sort of swapping out parts
basically in our setup for a

00:50:17.750 --> 00:50:20.170
different type of use case.

00:50:20.310 --> 00:50:22.930
You might have also seen up here
is a little bit of extra work,

00:50:22.980 --> 00:50:26.320
which is we're actually
going to create a QT movie.

00:50:26.320 --> 00:50:30.070
And this is the movie object
that we're going to write into

00:50:30.100 --> 00:50:31.710
to assemble our animation.

00:50:31.870 --> 00:50:37.380
And we have a special initializer here,
which defines some data in memory

00:50:37.380 --> 00:50:40.340
that we can write into so the
movie knows where to store those

00:50:40.340 --> 00:50:42.720
samples as we add them to it.

00:50:45.290 --> 00:50:48.290
Again, we also have basically
the same cleanup code.

00:50:48.470 --> 00:50:51.900
Very importantly, you need to close the
device if you've opened it.

00:50:51.900 --> 00:50:54.780
And we wanna stop the capture session
from running 'cause there's no

00:50:54.780 --> 00:50:56.780
reason to be using those resources.

00:50:58.500 --> 00:51:01.580
This code is responsible for
reading and writing files.

00:51:01.580 --> 00:51:06.200
It's basic NS document stuff,
but not too important for showing

00:51:06.250 --> 00:51:08.090
you exactly what you need to do.

00:51:08.430 --> 00:51:12.310
And so now you have a capture
session and you're running it and

00:51:12.310 --> 00:51:14.320
here's where we start using it.

00:51:14.420 --> 00:51:16.610
And this is a little more complex
than what I showed you in the

00:51:16.610 --> 00:51:22.190
simple recording application,
but again, it's actually not so complex.

00:51:22.500 --> 00:51:26.340
So the main thing you want to do is
you need to implement this method,

00:51:26.350 --> 00:51:29.420
and this is the delegate method that
gets called by the decompressed video

00:51:29.420 --> 00:51:31.020
output whenever it gets a video frame.

00:51:31.120 --> 00:51:34.310
It's called capture output,
did output video frame with

00:51:34.410 --> 00:51:36.390
sample buffer from connection.

00:51:36.670 --> 00:51:40.430
And the parameter to this that
we're interested in is the CV image

00:51:40.430 --> 00:51:44.400
buffer ref that it's giving us
that's already all packaged up.

00:51:45.050 --> 00:51:48.700
And all we're gonna do with it is we
have an instance variable defined for

00:51:48.700 --> 00:51:50.600
this class called CurrentImageBuffer.

00:51:50.620 --> 00:51:53.660
And we're just gonna store the
video frame that was given to

00:51:53.750 --> 00:51:56.100
us in this instance variable.

00:51:56.140 --> 00:51:59.200
There's one additional little
bit of complexity here,

00:51:59.230 --> 00:52:03.330
which is that this method will
almost definitely not be called

00:52:03.330 --> 00:52:05.470
on your application's main thread.

00:52:05.490 --> 00:52:07.340
And again,
the reason for this is that QTKit Capture

00:52:07.360 --> 00:52:11.490
tries to do everything very,
very asynchronously and is very

00:52:11.490 --> 00:52:15.500
heavily multithreaded and takes a lot
of advantage of multiple processors.

00:52:15.530 --> 00:52:18.780
So it's not going to block up
your main thread by default,

00:52:18.830 --> 00:52:19.880
calling you back here.

00:52:19.880 --> 00:52:24.900
So the way that you need to deal with
that is you just have to be careful

00:52:24.900 --> 00:52:28.520
and make sure that if two threads are
accessing the same instance variable,

00:52:28.560 --> 00:52:31.240
which is the case here,
you need to lock around

00:52:31.240 --> 00:52:32.480
that instance variable.

00:52:32.480 --> 00:52:35.160
And we do this a very simple way here,
which is we use the

00:52:35.240 --> 00:52:40.500
Objective-C @Synchronized block in
order to protect that segment of code.

00:52:40.500 --> 00:52:45.170
You could also use NSLock or Pthread
mutexes or anything that you think would

00:52:45.170 --> 00:52:48.930
be more efficient for your application,
but here's just a simple example.

00:52:49.170 --> 00:52:52.620
And again, since we're just capturing the
current state of the scene to

00:52:52.620 --> 00:52:56.110
add a frame to our animation,
we're really only interested in the

00:52:56.110 --> 00:52:57.930
latest image buffer that's come in.

00:52:57.940 --> 00:53:00.630
So there will be image buffers
coming in constantly all the time,

00:53:00.630 --> 00:53:02.770
but if the user doesn't
click that Add Frame button,

00:53:02.780 --> 00:53:04.030
we don't really care about the old ones.

00:53:04.080 --> 00:53:05.260
We just throw them out.

00:53:05.310 --> 00:53:10.850
And that's the reason why we just store
this latest one in the instance variable.

00:53:13.280 --> 00:53:16.240
So now that we have that going,
we have the actual Interface

00:53:16.240 --> 00:53:19.020
Builder action called Add Frame.

00:53:19.190 --> 00:53:24.060
The very first thing we do is we retrieve
whatever that latest image buffer was.

00:53:24.100 --> 00:53:26.990
And again, because this is going to be
on your main thread instead

00:53:27.000 --> 00:53:30.180
of the different thread that
QTKit Capture is calling you back on,

00:53:30.190 --> 00:53:32.940
you just need to be a little bit
careful and put the synchronized block

00:53:32.940 --> 00:53:36.920
around here so that you don't get the,
you don't read back from that variable

00:53:36.920 --> 00:53:39.450
when it's in an inconsistent state.

00:53:41.230 --> 00:53:45.790
And now that you have an image buffer,
you're going to convert it to an

00:53:45.790 --> 00:53:50.200
NSImage and then use this QTMovie API,
which is,

00:53:50.200 --> 00:53:53.920
QTMovie actually has many APIs and
encourage you to look at it,

00:53:54.130 --> 00:53:57.040
which is called
AddImageForDurationWithAttributes.

00:53:57.050 --> 00:54:00.220
And this is a method
that takes an NSImage,

00:54:00.260 --> 00:54:01.860
in this case,
the one that we've just created,

00:54:01.870 --> 00:54:04.440
and you specify how long
it's gonna last in the movie.

00:54:04.440 --> 00:54:06.440
And then maybe you can specify
how it'll be compressed.

00:54:06.440 --> 00:54:09.480
So in this case, again,
just save a little bit of space.

00:54:09.490 --> 00:54:11.760
We're gonna JPEG compress it.

00:54:11.760 --> 00:54:13.260
Excuse me.

00:54:13.460 --> 00:54:17.280
And that's pretty much
all there is to it.

00:54:17.490 --> 00:54:21.010
So we've gotten our CVImageBufferRefs
live from the camera and we're

00:54:21.010 --> 00:54:22.560
just gonna add them to the movie.

00:54:22.560 --> 00:54:27.590
And let's go ahead and build that.

00:54:33.300 --> 00:54:35.310
Okay, and let's run this.

00:54:35.560 --> 00:54:41.220
And so again, we see on the left,
we have our live video preview.

00:54:41.250 --> 00:54:43.180
And on the right,
we have the movie that we're gonna build.

00:54:43.230 --> 00:54:46.360
So you remember before I said
we had a bit of a problem.

00:54:46.360 --> 00:54:48.500
My movie was really cheesy
'cause my hand was in it.

00:54:48.500 --> 00:54:51.010
You could tell that the elephant
wasn't moving under his own power.

00:54:51.030 --> 00:54:52.120
We're gonna fix that.

00:54:52.120 --> 00:54:57.200
So maybe he'll start turning around.

00:54:57.200 --> 00:55:01.260
Turn around a little bit more.

00:55:04.300 --> 00:55:07.300
And something about the camera is
really making the elephant angry,

00:55:07.300 --> 00:55:10.120
so he's going to stampede towards it.

00:55:19.460 --> 00:55:22.500
Okay, anyway, I could do this for hours.

00:55:22.520 --> 00:55:25.840
But what you can see here is we
have a pretty cool animated movie.

00:55:25.840 --> 00:55:27.400
I mean,
you could really go to town with this,

00:55:27.420 --> 00:55:29.400
just with a pretty simple
piece of sample code,

00:55:29.400 --> 00:55:31.700
just bringing these few
classes together and doing

00:55:31.700 --> 00:55:33.400
something interesting with them.

00:55:33.400 --> 00:55:36.390
You can actually write a pretty
entertaining application.

00:55:36.510 --> 00:55:39.950
And because this is
just a QT movie object,

00:55:39.950 --> 00:55:43.230
we can go ahead and save this file out.

00:55:43.230 --> 00:55:46.100
And we'll just call it Elephant.

00:55:46.100 --> 00:55:46.400
Oh, that needs to be spelled right.

00:55:52.540 --> 00:55:57.740
And you'll see we just have a movie now
that can be opened and played anywhere.

00:56:00.890 --> 00:56:01.990
There it is.

00:56:02.020 --> 00:56:03.970
So we'll just open
that up and quick look.

00:56:04.000 --> 00:56:06.260
There we go.

00:56:06.480 --> 00:56:08.920
See, and we have our QuickTime movie.

00:56:14.570 --> 00:56:16.660
So if we could go back to the slides,
please.

00:56:16.660 --> 00:56:21.680
Thank you.

00:56:21.920 --> 00:56:25.620
So just to do a quick review
of some of the APIs that you've

00:56:25.620 --> 00:56:28.240
seen kind of formally declared
as they are on the headers,

00:56:28.240 --> 00:56:30.770
I'll just go through some of
the APIs that you will almost

00:56:30.770 --> 00:56:33.870
always use if you're building
a QTKit capture application.

00:56:34.030 --> 00:56:37.030
So first we have QTCaptureSession,
which is the class that you

00:56:37.030 --> 00:56:39.840
will always create because it's
the class that needs to mediate

00:56:39.860 --> 00:56:41.380
between the inputs and the outputs.

00:56:41.380 --> 00:56:46.160
And the methods you will most commonly
use are addInput and addOutput.

00:56:46.160 --> 00:56:49.900
And these methods optionally return an
NSError if there was a problem doing it.

00:56:49.900 --> 00:56:53.060
Also,
what you need to do with the session

00:56:53.100 --> 00:56:55.860
is once you have everything set up,
you need to start it running to

00:56:55.880 --> 00:56:58.680
tell it to actually grab that media
data and send it to the outputs.

00:56:58.680 --> 00:57:00.580
And that's done with
the startRunning method.

00:57:00.580 --> 00:57:03.000
And then when you're done with it,
when you don't wanna use the bus and

00:57:03.000 --> 00:57:07.290
use all that bandwidth and that memory,
you can say stop running after that.

00:57:09.290 --> 00:57:13.030
When you're capturing from devices,
which in this case will be every case,

00:57:13.100 --> 00:57:15.580
you will always interact with
the QTCaptureDevice class.

00:57:15.590 --> 00:57:19.430
And this is the class whose instances,
each instance of this class represents

00:57:19.470 --> 00:57:22.050
a single device on the system.

00:57:22.230 --> 00:57:25.580
In all the demos that I showed you,
I showed you the very simple case

00:57:25.580 --> 00:57:28.540
of looking for a QT capture device,
which is to ask the system

00:57:28.540 --> 00:57:31.780
for its default input device
of a certain media type.

00:57:31.860 --> 00:57:33.060
And I showed you video devices.

00:57:33.060 --> 00:57:34.780
You can also get the
default audio device,

00:57:34.860 --> 00:57:37.250
for example,
which is the device that the user has

00:57:37.250 --> 00:57:39.560
selected in the sound preference pane.

00:57:39.630 --> 00:57:42.060
But your application,
lots of applications probably

00:57:42.080 --> 00:57:44.610
want to do something a little
more complex than that.

00:57:44.730 --> 00:57:47.010
For example,
maybe they want to have a pop-up

00:57:47.010 --> 00:57:50.370
menu that shows a list of devices
from which the user can pick,

00:57:50.380 --> 00:57:52.840
so they can actually decide
which device connected to use.

00:57:52.850 --> 00:57:57.410
And QT capture device exposes that
very simply by using an NSArray.

00:57:57.520 --> 00:58:01.070
So there's this input devices with
media type method that returns

00:58:01.100 --> 00:58:04.560
an array of all of the devices
that media type on your system.

00:58:04.900 --> 00:58:08.420
There are various bits of information
you can get about QT Capture Device.

00:58:08.480 --> 00:58:11.930
A pretty simple example is you
can get a localized name for it

00:58:11.930 --> 00:58:13.800
so you can display it in your UI.

00:58:13.800 --> 00:58:16.070
And finally,
something you always need to do with

00:58:16.100 --> 00:58:19.250
a QT Capture Device before you use
it is you need to open it to tell the

00:58:19.250 --> 00:58:22.380
device system that you're using it,
and you need to close it again

00:58:22.380 --> 00:58:23.930
when you're done with it.

00:58:24.560 --> 00:58:27.820
QDCaptureDevice also exposes
a bit of information about its

00:58:27.840 --> 00:58:29.440
current state on the system.

00:58:29.710 --> 00:58:33.740
So the class exposes two
notifications that tell you

00:58:33.740 --> 00:58:37.290
when devices appear and go away,
because the user can plug them

00:58:37.290 --> 00:58:38.840
in and unplug them at any time.

00:58:38.900 --> 00:58:41.900
And there are also a few methods
on the device itself where you

00:58:41.900 --> 00:58:43.040
can find out if it's connected.

00:58:43.040 --> 00:58:47.320
And for certain devices,
if an application is hogging it,

00:58:47.370 --> 00:58:50.820
if it can't be used by your application,
it happens to be the case that

00:58:50.820 --> 00:58:53.450
the vast majority of devices,
including all iSites

00:58:53.470 --> 00:58:55.750
and all DV camcorders,
can be shared across multiple

00:58:55.750 --> 00:58:57.160
applications at the same time.

00:58:57.160 --> 00:59:00.010
So usually that's not gonna be a problem.

00:59:02.410 --> 00:59:04.070
With QT Capture Device,
you're going to use the

00:59:04.070 --> 00:59:08.120
QT Capture Device input class,
and that's just as simple as initializing

00:59:08.190 --> 00:59:11.300
it with the QT Capture Device,
and that's pretty much all

00:59:11.360 --> 00:59:12.660
you need to do with it.

00:59:13.990 --> 00:59:16.820
On the output front,
if you're recording to

00:59:16.820 --> 00:59:18.770
a QuickTime movie file,
you'll use the

00:59:18.830 --> 00:59:20.900
QTCaptureMovieFileOutput class.

00:59:20.900 --> 00:59:25.970
This class is actually a concrete
subclass of QTCaptureFileOutput,

00:59:26.020 --> 00:59:27.900
which is a subclass of QTCaptureOutput.

00:59:27.900 --> 00:59:30.240
So if you're poking through
the headers and you open up

00:59:30.290 --> 00:59:33.030
QTCaptureMovieFileOutput.h
and you see that it's empty,

00:59:33.030 --> 00:59:36.350
go look at QTCaptureFileOutput,
which will actually show you all

00:59:36.350 --> 00:59:37.900
the methods that you need to call.

00:59:37.900 --> 00:59:41.710
And the methods that you almost always
will use are RecordToOutputFileURL,

00:59:41.710 --> 00:59:43.900
which specifies a recording destination.

00:59:43.900 --> 00:59:46.300
And you will definitely want to
implement this delegate method

00:59:46.300 --> 00:59:48.900
that calls you back when the file
is actually finished writing.

00:59:48.900 --> 00:59:51.160
This class actually has
tons of other features,

00:59:51.160 --> 00:59:54.890
including features that let you record
on exact frame and sample boundaries,

00:59:54.900 --> 00:59:56.840
and you should definitely check it out.

00:59:56.920 --> 00:59:59.080
It's a pretty powerful class.

00:59:59.660 --> 01:00:02.230
Also, if you're interested in
getting raw video frames,

01:00:02.230 --> 01:00:04.340
as I showed you earlier,
you can use QTCapture

01:00:04.360 --> 01:00:05.980
decompressed video output.

01:00:06.010 --> 01:00:09.060
And the key thing here is
implementing this delegate method,

01:00:09.110 --> 01:00:11.780
which will call you every time
a new video frame comes in.

01:00:11.780 --> 01:00:16.810
It will give you a CV image buffer
with which you can do as you please.

01:00:18.520 --> 01:00:31.000
QTCaptureView is a wrapper around the
QTCaptureVideoPreviewOutput class.

01:00:31.000 --> 01:00:33.900
Almost always if you're doing a
Cocoa or an AppKit application,

01:00:33.900 --> 01:00:36.440
you're going to use
QTCaptureView and never really use

01:00:36.440 --> 01:00:38.790
QTCaptureVideoPreviewOutput directly.

01:00:38.800 --> 01:00:42.140
But that class is available
independent of a view in case you

01:00:42.140 --> 01:00:44.300
need to do some custom previewing.

01:00:44.300 --> 01:00:46.440
Also in general,
QTCaptureView is something you

01:00:46.450 --> 01:00:48.100
never create programmatically.

01:00:48.100 --> 01:00:51.040
You'll probably just drag it into
your nib file in Interface Builder,

01:00:51.040 --> 01:00:53.100
so you generally don't need
to interact with it that much.

01:00:53.100 --> 01:00:55.250
One thing that you do need
to do though is tell it which

01:00:55.290 --> 01:00:57.870
capture session it's previewing,
and you do that with the

01:00:57.960 --> 01:00:59.500
setCaptureSession method.

01:00:59.500 --> 01:01:02.500
There are also a few attributes
it has that govern its appearance

01:01:02.560 --> 01:01:05.640
such as the color that it fills
in behind the video and whether or

01:01:05.640 --> 01:01:09.440
not it preserves the aspect of the
ratio of the video as it's playing.

01:01:10.280 --> 01:01:15.830
A quick note on what devices
are supported by QTKit Capture.

01:01:16.000 --> 01:02:25.300
[Transcript missing]

01:02:27.330 --> 01:02:31.250
So to summarize a little bit,
and this pretty much parallels

01:02:31.250 --> 01:02:34.400
Tim's half of the talk,
if you're doing real-time capture

01:02:34.400 --> 01:02:37.140
from devices in your application,
use QTKit.

01:02:37.340 --> 01:02:42.320
It's the preferred API from here on out,
and it really provides a lot of

01:02:42.320 --> 01:02:43.980
power without a lot of complexity.

01:02:43.980 --> 01:02:48.670
In order to do that,
you pretty much will always

01:02:48.740 --> 01:02:52.670
rely on using QTCaptureSession,
QTCaptureInput, and QTCaptureOutput,

01:02:52.680 --> 01:02:55.220
and you'll use those as building
blocks to assemble what your

01:02:55.220 --> 01:02:59.130
application needs to do,
depending on its needs.

01:03:00.930 --> 01:03:03.840
If you want more information,
first of all,

01:03:03.860 --> 01:03:06.710
definitely just stay put in this room.

01:03:06.720 --> 01:03:09.540
In the next session,
we're gonna dive into a lot more

01:03:09.580 --> 01:03:14.000
detail about both the playback
and editing aspects of QTKit as

01:03:14.000 --> 01:03:15.540
well as the capture aspect.

01:03:15.540 --> 01:03:17.520
So we're gonna go into
some more advanced topics.

01:03:17.650 --> 01:03:20.660
And we're also gonna talk
a bit about QuickTime 10.

01:03:20.760 --> 01:03:24.700
And again, we strongly recommend that you
check out that lunchtime session.

01:03:24.700 --> 01:03:27.110
It's sure to be very interesting.

01:03:27.310 --> 01:03:29.570
It's always a very good speaker.

01:03:30.140 --> 01:03:33.640
Also, if you have any questions or any
problems or specific concerns,

01:03:33.640 --> 01:03:38.000
you just want to chat,
go meet us up in the lab later today and

01:03:38.000 --> 01:03:42.470
we'll be around and we'll be there to
answer any questions that you might have.

01:03:43.020 --> 01:03:44.780
And also,
if you want to get more information,

01:03:44.780 --> 01:03:46.060
first talk to Alan Schaffer.

01:03:46.190 --> 01:03:48.740
He knows everything about
everything or knows people who

01:03:48.740 --> 01:03:50.330
know things about everything.

01:03:50.390 --> 01:03:51.900
So he's the one to talk to.

01:03:51.900 --> 01:03:55.210
And also, we have tons of documentation
and sample code and other

01:03:55.210 --> 01:03:56.850
things on the developer page.

01:03:56.980 --> 01:03:58.590
So just surf through there
and you'll see a lot more

01:03:58.600 --> 01:03:59.890
examples of all of these things.