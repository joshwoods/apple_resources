WEBVTT

00:00:20.940 --> 00:00:22.100
Good morning.

00:00:22.120 --> 00:00:26.970
My name is Paul Marcos.

00:00:29.620 --> 00:00:31.520
It's great to see so many
of you here this morning,

00:00:31.520 --> 00:00:32.220
even you, Dan.

00:00:32.260 --> 00:00:39.480
We have a terrific mix of people in
the crowd here at WWDC this week.

00:00:39.520 --> 00:00:42.940
We've got a whole bunch of people that
are familiar with the Mac already,

00:00:42.990 --> 00:00:45.020
like our friend Dan here.

00:00:46.380 --> 00:00:49.270
And as such,
you're familiar with the operating system

00:00:49.270 --> 00:00:53.700
and the tools and the language that we
use for developing iPhone applications.

00:00:53.700 --> 00:00:55.960
And that gives you a great leg up.

00:00:56.040 --> 00:00:59.230
And then on the other hand,
we have a whole bunch of new

00:00:59.230 --> 00:01:02.930
people to Apple and to WWDC,
and a number of you are coming from

00:01:02.930 --> 00:01:08.760
other mobile device platforms like
Windows Mobile or Symbian or Blackberry.

00:01:08.830 --> 00:01:13.190
And you guys understand the issues that
face mobile application development,

00:01:13.190 --> 00:01:17.160
things like limited resources,
a small screen size,

00:01:17.230 --> 00:01:21.250
the challenge of building a
usable and friendly application

00:01:21.250 --> 00:01:23.840
on a small device like that.

00:01:24.320 --> 00:01:29.120
And so we have this new platform now
that faces all of those same challenges,

00:01:29.170 --> 00:01:32.060
but it's built on top of that great
technology from Mac OS X that so

00:01:32.060 --> 00:01:34.150
many of you are familiar with.

00:01:34.270 --> 00:01:36.840
And that's what we're here
to talk about this morning.

00:01:36.980 --> 00:01:40.770
So this presentation is going to
be mostly conceptual in nature.

00:01:40.970 --> 00:01:42.200
We're going to look at
a little bit of code.

00:01:42.200 --> 00:01:44.090
We'll do a little bit of interface stuff.

00:01:44.270 --> 00:01:48.920
But what I'm covering is primarily
the designs behind Cocoa Touch on

00:01:48.920 --> 00:01:51.910
the phone and iPhone OS development.

00:01:52.860 --> 00:01:55.830
There are a couple things that
are helpful for you to know about

00:01:56.080 --> 00:01:58.700
going into iPhone app development.

00:01:58.840 --> 00:02:02.840
And the two primary ones are just
object-oriented programming in general,

00:02:02.940 --> 00:02:06.410
and whether that's from Java or C++,
or even some of the scripting

00:02:06.520 --> 00:02:09.820
languages that use object-oriented
principles these days.

00:02:09.960 --> 00:02:13.080
And the second is the C language syntax.

00:02:13.200 --> 00:02:16.860
The language that we use is C-based,
so understanding things like pointers

00:02:16.870 --> 00:02:20.340
and memory management is really helpful.

00:02:21.700 --> 00:02:24.310
So the topics that I'm going to
cover here this morning are just

00:02:24.310 --> 00:02:26.160
a real brief overview of the OS.

00:02:26.160 --> 00:02:28.060
You heard a lot about it yesterday.

00:02:28.110 --> 00:02:29.900
I can add a couple points to that.

00:02:29.990 --> 00:02:32.320
And then I want to go
through three steps.

00:02:32.370 --> 00:02:36.970
And I remember when I joined the iPhone
team about two and a half years ago,

00:02:37.110 --> 00:02:40.780
I thought what the heck am I doing
developing for a mobile device?

00:02:40.780 --> 00:02:43.300
I've never done that in my life.

00:02:43.300 --> 00:02:46.600
I had come out of the
Mac OS X desktop world,

00:02:46.600 --> 00:02:49.180
and, you know,
I was very intimidated and scared.

00:02:49.180 --> 00:02:51.640
And typically when I'm
faced with a new platform,

00:02:51.640 --> 00:02:54.660
I like to break it down into
three steps that I try to perform.

00:02:54.930 --> 00:02:57.240
The first is I just want
to get something on screen.

00:02:57.240 --> 00:02:59.900
I just want to get the app to
launch and get something on

00:02:59.900 --> 00:03:01.950
screen so that I understand,
you know,

00:03:01.960 --> 00:03:06.060
the tools that are required to get that
far and how to get something on screen.

00:03:06.180 --> 00:03:07.670
And then the next thing,
I want to make it do

00:03:07.670 --> 00:03:10.940
something very simple,
just a button, hello world,

00:03:11.040 --> 00:03:13.290
something really, really basic.

00:03:13.480 --> 00:03:15.170
And then with all of
those pieces in place,

00:03:15.260 --> 00:03:17.440
then I can kind of embark on building
a mobile device that I can use to

00:03:17.440 --> 00:03:20.320
build the rest of the application
and making it do something.

00:03:20.380 --> 00:03:21.880
And so in my case,
when I joined the team,

00:03:21.970 --> 00:03:22.910
I started on that app.

00:03:22.990 --> 00:03:24.620
I went through these simple steps.

00:03:24.690 --> 00:03:27.740
And that app that I had started and
used as my beginning ultimately went

00:03:27.750 --> 00:03:31.640
on to become the Photos application
that we ship on the phone today.

00:03:31.690 --> 00:03:34.650
So it turned out I was able to
develop on a mobile platform.

00:03:34.650 --> 00:03:38.390
And it was actually very familiar,
as you'll see here.

00:03:38.820 --> 00:03:41.560
So let's just jump in with
a quick overview of the OS.

00:03:41.650 --> 00:03:45.190
And as you saw yesterday,
we have this layer diagram that

00:03:45.190 --> 00:03:49.320
we use showing all the different
layers of the operating system.

00:03:49.410 --> 00:03:53.150
And the important points are the
lower three are the same as Mac OS X.

00:03:53.430 --> 00:03:55.540
So for those of you coming
from that direction,

00:03:55.620 --> 00:03:56.590
these are very familiar.

00:03:56.840 --> 00:03:58.720
They're the same layers.

00:03:58.790 --> 00:04:01.190
As iPhone app developers,
we're going to spend most of our

00:04:01.200 --> 00:04:04.400
time at the Cocoa Touch layer,
because that's where most of the services

00:04:04.400 --> 00:04:07.060
that we use and that we need exist.

00:04:07.140 --> 00:04:11.520
And the point that I wanted to add here
was for each of these lower layers,

00:04:11.600 --> 00:04:14.400
you can feel free to dive down as needed.

00:04:14.480 --> 00:04:17.840
And in some cases,
you may need to open a raw BSD socket.

00:04:17.840 --> 00:04:21.450
So you can just open that directly if
you have existing code or whatever.

00:04:21.610 --> 00:04:25.850
Or at the core services layer,
you may need to use SQLite.

00:04:26.040 --> 00:04:27.250
So you have those APIs.

00:04:27.400 --> 00:04:30.180
So you may kind of need
to dive down for those.

00:04:30.270 --> 00:04:32.860
Or even at the media layer,
if you're doing something with audio,

00:04:32.860 --> 00:04:35.720
we have audio libraries
for you to use there.

00:04:35.800 --> 00:04:38.030
So while we'll spend most of our
time at the Cocoa Touch layer,

00:04:38.030 --> 00:04:40.940
just keep in mind,
you can dive down as needed to any

00:04:40.940 --> 00:04:43.400
of these other layers that you need.

00:04:44.380 --> 00:04:49.140
So talking about the Cocoa Touch layer,
it's broken into two frameworks.

00:04:49.180 --> 00:04:52.220
The lower level one is
Foundation Framework.

00:04:52.450 --> 00:04:55.310
And this is, again,
the same as that exists on Mac OS X.

00:04:55.310 --> 00:04:57.690
So if you're familiar with that,
you already know a whole

00:04:57.730 --> 00:04:58.670
bunch of these APIs.

00:04:58.670 --> 00:04:59.560
It's all the same.

00:04:59.560 --> 00:05:01.480
It's a subset of what we have there.

00:05:02.920 --> 00:05:05.690
And in this framework,
we have object wrappers

00:05:05.770 --> 00:05:09.430
around basic data structures,
arrays, and dictionaries.

00:05:09.550 --> 00:05:13.690
And then we also have object wrappers
around a bunch of system services,

00:05:13.800 --> 00:05:17.240
like accessing the file system
or some networking APIs.

00:05:18.340 --> 00:05:21.730
So a lot of kind of lower
level non-UI pieces.

00:05:22.670 --> 00:05:25.780
The upper portion of
Cocoa Touch is UIKit Framework.

00:05:25.840 --> 00:05:29.430
And that's where the machinery for
running the application exists.

00:05:30.240 --> 00:05:32.200
That's where the windows exist
and the views that you're seeing.

00:05:33.750 --> 00:05:42.980
So we've added some APIs for accessing
the device of this same layer.

00:05:43.790 --> 00:05:46.440
So I've used the term
framework a couple times,

00:05:46.440 --> 00:05:50.090
so I want to just talk a little
bit about what a framework is.

00:05:50.400 --> 00:05:55.480
So to Apple, a framework is a way of
packaging our system interfaces.

00:05:55.550 --> 00:05:58.790
And it's physically a way
of packaging it on disk,

00:05:58.800 --> 00:06:02.770
where we have a directory that
contains not only the binary for

00:06:02.770 --> 00:06:07.060
the code that is in that framework,
but also any associated resources,

00:06:07.060 --> 00:06:11.760
like the header files that you need to
build and link against that framework,

00:06:11.820 --> 00:06:15.310
or things like in UIKit, the resources,
the images and sounds,

00:06:15.310 --> 00:06:22.300
and all the pieces that we need to
actually present the UI at runtime.

00:06:22.300 --> 00:06:24.500
And since we ship in
now a zillion languages,

00:06:24.500 --> 00:06:27.560
we also have all the localizations.

00:06:27.700 --> 00:06:31.790
So it's this nice self-contained
unit where all of the pieces that

00:06:31.790 --> 00:06:33.210
are associated with the framework go.

00:06:34.530 --> 00:06:38.100
On Mac OS X, you're probably familiar
with System Library Framework

00:06:38.200 --> 00:06:39.440
in the file system.

00:06:39.490 --> 00:06:43.350
When you install the iPhone OS SDK,
they're installed in the

00:06:43.450 --> 00:06:45.570
platform SDK in this path.

00:06:46.430 --> 00:06:49.530
And as an app developer,
you live on top of the frameworks,

00:06:49.530 --> 00:06:52.420
and there's this notion of
living with the frameworks,

00:06:52.540 --> 00:06:55.010
and most importantly,
working with the frameworks,

00:06:55.010 --> 00:06:55.940
not against them.

00:06:55.940 --> 00:06:57.950
And so what do I mean by that?

00:06:58.300 --> 00:07:01.770
Well, for the people that are new
to the platform especially,

00:07:01.980 --> 00:07:05.590
you may come to Cocoa Touch,
and it's very natural to try to

00:07:05.590 --> 00:07:09.370
apply the same design approaches
that you've applied on other

00:07:09.370 --> 00:07:10.990
platforms to this platform.

00:07:11.000 --> 00:07:14.960
And what you may find is that you may
encounter some impedance mismatch with

00:07:14.960 --> 00:07:18.990
the way that you've done things in the
past and how we do them in Cocoa Touch.

00:07:19.080 --> 00:07:23.130
So it's important to step back and
try to get your head around kind of

00:07:23.130 --> 00:07:27.070
the big picture design of Cocoa Touch,
and that's what we're going to

00:07:27.100 --> 00:07:29.940
be trying to do here this morning
and the course of this week.

00:07:32.500 --> 00:07:35.170
For example,
a lot of the classes in the frameworks

00:07:35.220 --> 00:07:38.440
that we provide are intended just
to be used right out of the box.

00:07:38.490 --> 00:07:39.270
No modification.

00:07:39.270 --> 00:07:42.130
You just take them, you use them,
they do something, and that's great.

00:07:42.480 --> 00:07:45.350
Other classes are explicitly
intended to be subclassed.

00:07:45.350 --> 00:07:48.900
They provide some generic behavior,
but really can't do anything

00:07:48.900 --> 00:07:50.690
without the use of a subclass.

00:07:50.780 --> 00:07:55.110
And one of the best ways to understand
which of these cases you're looking

00:07:55.110 --> 00:07:57.520
at is just to use our documentation.

00:07:57.900 --> 00:08:00.120
So I'll give a plug to the
documentation that we have.

00:08:00.330 --> 00:08:03.370
In particular,
there are two documents that

00:08:03.370 --> 00:08:06.620
I wanted to call out that are really
important for you to understand.

00:08:06.620 --> 00:08:09.930
The first is the
Cocoa Fundamentals Guide.

00:08:09.930 --> 00:08:14.230
And while written for the
Mac OS X Cocoa framework,

00:08:14.580 --> 00:08:18.380
so many of the designs are
the same in Cocoa Touch.

00:08:18.500 --> 00:08:21.400
So it just gives a great basis
for a number of the designs,

00:08:21.400 --> 00:08:25.490
defines a lot of the terminology and
whatnot that we use on the phone as well.

00:08:26.950 --> 00:08:29.360
And then the second is the
iPhone OS Programming Guide,

00:08:29.390 --> 00:08:32.100
which is more specific
to the phone itself.

00:08:32.210 --> 00:08:34.670
So two great documents give
you an understanding of what

00:08:34.740 --> 00:08:36.880
the frameworks are all about.

00:08:38.640 --> 00:08:41.090
So the design patterns that we're
going to talk about here this morning,

00:08:41.090 --> 00:08:42.880
there are three that
I'm going to focus on.

00:08:42.920 --> 00:08:46.320
The first, you've already heard
some about each of these.

00:08:46.320 --> 00:08:48.450
Model View Controller.

00:08:48.650 --> 00:08:51.380
delegation, and target action.

00:08:51.450 --> 00:08:54.290
So let's just jump in with
Model View Controller.

00:08:54.810 --> 00:08:56.770
The fundamental premise
of Model-View-Controller,

00:08:56.770 --> 00:09:00.200
which you may already be familiar
with from other platforms,

00:09:00.270 --> 00:09:03.780
is a separation of the
model and the view.

00:09:05.620 --> 00:09:07.500
And on the model side,
you have kind of the back end

00:09:07.500 --> 00:09:08.950
state of your application.

00:09:09.090 --> 00:09:12.840
The data that's stored,
some basic logic of your application,

00:09:12.840 --> 00:09:14.740
but nothing in the UI.

00:09:14.850 --> 00:09:18.740
And then on the view side,
you have the presentation of that data.

00:09:18.830 --> 00:09:22.600
And you want to try to encapsulate both
of these things separately so that they

00:09:22.600 --> 00:09:24.400
don't need to know much about each other.

00:09:24.400 --> 00:09:26.600
Ideally, nothing about each other.

00:09:26.690 --> 00:09:29.580
But then you have this kind of
division here where the rubber needs

00:09:29.610 --> 00:09:30.970
to meet the road at some point.

00:09:31.270 --> 00:09:32.530
How does that happen?

00:09:32.650 --> 00:09:35.770
Well, that's the job of the
controller in the middle.

00:09:36.020 --> 00:09:39.680
And what the controller does is
mediate between these two worlds.

00:09:39.740 --> 00:09:43.540
It pulls data out of the model and
hands it to the view for presentation.

00:09:43.850 --> 00:09:46.290
And then as the user
interacts with the view,

00:09:46.320 --> 00:09:51.060
it intercepts those interactions and
performs some manipulation of the data.

00:09:52.830 --> 00:09:56.320
So looking at how this breakdown
of Model-View-Controller

00:09:56.320 --> 00:10:00.010
applies to the frameworks,
we see on the model side,

00:10:00.010 --> 00:10:01.580
we have foundation framework.

00:10:01.670 --> 00:10:05.160
And as I said, that's the non-UI
portion of the framework.

00:10:05.250 --> 00:10:10.090
And then on the view side, we have UIKit,
and in particular, the UIView subclasses.

00:10:10.260 --> 00:10:12.630
And we'll talk about
UIView a little bit later.

00:10:12.840 --> 00:10:15.980
And then in the center,
since we only have two frameworks,

00:10:16.080 --> 00:10:21.050
we had to find a place for it,
the controllers actually exist in UIKit.

00:10:21.440 --> 00:10:25.120
And we've put the idea of controllers
under this umbrella that we call

00:10:25.120 --> 00:10:28.000
"view controllers." And you'll hear
that term in the iPhone sessions

00:10:28.360 --> 00:10:32.240
over and over because it's really,
really fundamental and critical.

00:10:32.590 --> 00:10:34.960
But these pieces are
only half of the picture.

00:10:35.010 --> 00:10:39.920
The other half is your code,
which exists in all three places.

00:10:40.150 --> 00:10:43.260
Right, and so there's this notion of
your code with the framework code,

00:10:43.260 --> 00:10:47.770
and that's what makes up the
building blocks for the application.

00:10:48.260 --> 00:10:51.480
And when we write our apps,
and we've written a bunch of apps,

00:10:51.540 --> 00:10:54.680
we've kind of strived to keep this
breakdown of the model view controller.

00:10:54.680 --> 00:10:59.210
And we try to do that because it
really helps produce cleaner code.

00:10:59.210 --> 00:11:03.210
It forces us to think about,
for particular chunks of functionality,

00:11:03.260 --> 00:11:04.480
where does it exist?

00:11:04.650 --> 00:11:05.270
Is it in the model?

00:11:05.270 --> 00:11:05.920
Is it in the view?

00:11:05.920 --> 00:11:06.940
Is it in the controller?

00:11:06.940 --> 00:11:11.380
We try to maintain a discipline of
keeping clean APIs between these pieces.

00:11:11.380 --> 00:11:14.670
It helps with just understanding
how something works,

00:11:14.670 --> 00:11:17.800
especially as we get new
engineers joining teams.

00:11:17.800 --> 00:11:20.580
They can kind of easily break
down functionality in an

00:11:20.580 --> 00:11:23.540
application and get a quicker,
a quick understanding

00:11:23.720 --> 00:11:26.300
of how the code works,
how it's structured.

00:11:26.420 --> 00:11:29.120
It makes it easier to test
when you have these nice APIs,

00:11:29.120 --> 00:11:30.940
these well-defined boundaries.

00:11:31.020 --> 00:11:34.710
You can do things like write unit
tests and test the functionality

00:11:34.820 --> 00:11:36.770
of just an isolated component.

00:11:38.080 --> 00:11:40.770
We've also found that it
helps with reusability,

00:11:40.770 --> 00:11:43.400
so that when you do define
these modular components,

00:11:43.400 --> 00:11:47.800
you can use them in ways that you never
foresaw when you initially designed them.

00:11:47.860 --> 00:11:50.570
And for us,
that happened when we decided to

00:11:50.650 --> 00:11:52.980
put a public API on top of our APIs.

00:11:53.040 --> 00:11:56.290
We realized we already have a whole
bunch of these modular units that

00:11:56.290 --> 00:12:02.060
we could expose the APIs and give
functionality to you very easily.

00:12:02.410 --> 00:12:05.310
And perhaps most importantly,
is when you do follow this

00:12:05.310 --> 00:12:09.040
model view controller paradigm,
it just naturally aligns you with the

00:12:09.040 --> 00:12:13.690
way that Cocoa Touch works and kind of
puts you in the same buckets and puts

00:12:13.780 --> 00:12:18.740
you amongst the friends and classes
that we use in those same buckets.

00:12:20.010 --> 00:12:23.660
So that's just a brief overview
of the fundamental concept behind

00:12:23.660 --> 00:12:27.960
Cocoa Touch and Cocoa on the desktop,
Model View Controller.

00:12:28.050 --> 00:12:31.640
And what I wanted to do next is
just start off with step number one.

00:12:31.710 --> 00:12:34.100
Let's get something on screen.

00:12:35.430 --> 00:12:37.950
Now, in order to get something on screen,
we need to understand the

00:12:37.950 --> 00:12:39.820
tools that we're using.

00:12:39.870 --> 00:12:42.030
And as you saw yesterday,
we have some awesome tools for

00:12:42.030 --> 00:12:43.840
developing apps on the phone.

00:12:43.870 --> 00:12:48.230
We have Xcode for editing your source
code and maintaining your project,

00:12:48.230 --> 00:12:51.330
Interface Builder for laying
out your interface and

00:12:51.330 --> 00:12:53.700
graphically connecting objects.

00:13:11.690 --> 00:13:11.690
The iPhone simulator for
doing rapid application

00:13:11.690 --> 00:13:11.690
development all on one screen,
right in the convenience of your own Mac.

00:13:11.690 --> 00:13:11.690
You can just do it right on your screen.

00:13:11.690 --> 00:13:11.690
It's really easy.

00:13:11.690 --> 00:13:11.690
You can turn around, compile, link,
debug.

00:13:11.690 --> 00:13:11.690
It's a great environment.

00:13:11.690 --> 00:13:11.690
And then when you need to,
flip a switch and you're

00:13:11.690 --> 00:13:11.690
running on the device.

00:13:12.500 --> 00:13:14.300
So these three we're
going to look at today,

00:13:14.310 --> 00:13:16.760
and then the fourth, instruments,
which is kind of outside of

00:13:16.760 --> 00:13:18.950
the scope of this presentation,
for doing performance

00:13:18.950 --> 00:13:20.150
analysis and tuning.

00:13:22.480 --> 00:13:24.940
So let me just start off
with a quick demo just to set

00:13:25.020 --> 00:13:28.080
the stage for our concepts.

00:13:28.150 --> 00:13:32.890
And the demo that I'm going to be
working on is a very simple app.

00:13:33.120 --> 00:13:35.760
If I can wake my notebook up.

00:13:35.760 --> 00:13:38.630
It's a hello world class application.

00:13:38.640 --> 00:13:40.990
So it's very simple, again,
just to kind of set the

00:13:41.010 --> 00:13:42.400
stage for discussion.

00:13:42.480 --> 00:13:46.270
And it's basically just going to be a
light bulb on the screen with a switch

00:13:46.290 --> 00:13:48.580
and a label that we update some status.

00:13:49.310 --> 00:13:52.760
So I'm going to bring up Xcode here.

00:13:52.810 --> 00:13:55.590
We're just going to start
a brand new project.

00:13:56.020 --> 00:13:58.790
And the template I'm going to use is
this view-based application template,

00:13:58.790 --> 00:14:01.590
which is a very generic starting point.

00:14:01.770 --> 00:14:02.330
So we'll pick that.

00:14:02.460 --> 00:14:05.760
I'm going to save this
as demo on my desktop.

00:14:05.790 --> 00:14:08.670
And here we have our project.

00:14:10.800 --> 00:14:12.300
So as you saw,
we have a number of classes in here.

00:14:12.300 --> 00:14:15.200
We're going to come back to the code
later because our primary goal right

00:14:15.260 --> 00:14:17.560
now is just to get something on screen.

00:14:18.050 --> 00:14:20.260
We have a couple resources,
which are the interface files

00:14:20.260 --> 00:14:21.450
that we'll be working with.

00:14:21.570 --> 00:14:23.940
And I have a few additional
resources on the desktop,

00:14:23.940 --> 00:14:24.940
just some images.

00:14:25.600 --> 00:14:28.480
So I'm just going to drag
those into my resources bucket,

00:14:28.520 --> 00:14:30.740
tell Xcode to copy them into my project.

00:14:30.820 --> 00:14:32.100
And there we go.

00:14:32.660 --> 00:14:34.480
So in this template,
we have two interface

00:14:34.480 --> 00:14:35.700
files that get created.

00:14:35.770 --> 00:14:39.440
And I just wanted to point out the
first one is this main window nib.

00:14:39.830 --> 00:14:41.040
We're not actually going
to do any work in here.

00:14:41.040 --> 00:14:43.440
I just want to call
attention to a couple things.

00:14:44.210 --> 00:14:47.870
One is that in the document window,
we have a handful of objects.

00:14:47.980 --> 00:14:51.380
And these objects live in the nib,
or they may be proxies for other

00:14:51.380 --> 00:14:53.640
objects that live in the application.

00:14:54.120 --> 00:14:57.180
And we'll come back to talking about a
couple of these objects in a little bit.

00:14:57.720 --> 00:15:00.220
The other main thing that we have
in this particular nib is the

00:15:00.220 --> 00:15:01.780
main window for the application.

00:15:02.120 --> 00:15:03.680
And again, we're not going to do
anything with the main window.

00:15:03.680 --> 00:15:05.470
And generally,
you don't need to know very

00:15:05.480 --> 00:15:06.780
much about the main window.

00:15:07.360 --> 00:15:09.040
Just that it's here in the main nib.

00:15:09.080 --> 00:15:09.080
It gets created automatically.

00:15:10.040 --> 00:15:15.780
And it's the container in which all of
the views that you build go inside of.

00:15:16.470 --> 00:15:18.580
And in this case,
we see the contents of our

00:15:18.580 --> 00:15:20.300
main window is this view.

00:15:20.370 --> 00:15:23.930
NIB is telling us this particular
view in this template is loaded from

00:15:23.930 --> 00:15:25.930
this demo view controller nib file.

00:15:26.000 --> 00:15:28.080
And that's actually where
we're going to do our work.

00:15:28.080 --> 00:15:31.800
So let me go open that.

00:15:31.890 --> 00:15:36.080
So that's this second nib here,
this demo view controller.

00:15:36.150 --> 00:15:40.200
And again, this nib has a couple objects
up here that we'll come back to.

00:15:40.270 --> 00:15:43.170
And then it has our view file,
which is our blank

00:15:43.300 --> 00:15:45.580
canvas for us to work in.

00:15:45.800 --> 00:15:47.910
And the first thing I want to
do is actually the background

00:15:47.910 --> 00:15:49.080
in this template is white.

00:15:49.240 --> 00:15:50.940
The images I'm using
have a black background,

00:15:50.940 --> 00:15:53.020
so I want to change the background color.

00:15:53.140 --> 00:15:56.500
So if I go into the Tools menu and
bring up the Attributes Inspector,

00:15:56.550 --> 00:15:58.510
I can just change the
background of this view,

00:15:58.510 --> 00:16:00.180
and I'm going to change it to black.

00:16:00.400 --> 00:16:02.010
There we go.

00:16:02.320 --> 00:16:05.040
And now I just want to pull out
a couple of interface pieces.

00:16:05.170 --> 00:16:07.800
So I go over to the library window,
switch to the media,

00:16:07.800 --> 00:16:12.650
and you see IB has recognized those
resources that I dragged into my project.

00:16:12.840 --> 00:16:15.200
And I'm just going to drag
out one of the images,

00:16:15.250 --> 00:16:17.550
this beautiful light bulb.

00:16:17.880 --> 00:16:19.900
And then the other two interface
elements that I want to pull out

00:16:20.020 --> 00:16:24.310
are the switch that I'll use for
turning the light bulb on and off,

00:16:24.310 --> 00:16:26.480
and then a text label.

00:16:26.550 --> 00:16:29.440
And one subtle thing-- I think
IB is such an awesome tool.

00:16:29.440 --> 00:16:30.180
I love it.

00:16:30.240 --> 00:16:32.060
You notice as I'm
dragging this text label,

00:16:32.060 --> 00:16:32.740
it's black.

00:16:32.800 --> 00:16:34.780
And then as I drag it
over the black background,

00:16:34.780 --> 00:16:37.570
IB notices and inverts
it so it turns it white,

00:16:37.700 --> 00:16:39.510
which is just really nice,
nice little touch.

00:16:39.690 --> 00:16:41.320
IB's full of those.

00:16:41.320 --> 00:16:44.000
So let me set some default state here.

00:16:44.100 --> 00:16:46.340
Turn the light on.

00:16:47.700 --> 00:16:49.240
Oops, center that.

00:16:49.270 --> 00:16:52.140
And since the light actually is off,
I'm going to change the state again

00:16:52.140 --> 00:16:56.650
in the attributes inspector so
that the default position is off.

00:16:57.640 --> 00:17:00.340
So now we have some interface laid out.

00:17:00.410 --> 00:17:03.320
That's all we're going to do in
Interface Builder at the moment.

00:17:03.380 --> 00:17:06.060
I'm going to go back over to Xcode.

00:17:06.140 --> 00:17:10.580
And the other thing I wanted to add
was just an icon for our application.

00:17:10.690 --> 00:17:14.460
So I'm going to go to the Get Info
window for the target we're building.

00:17:14.540 --> 00:17:19.510
And on the Properties tab,
just fill in the icon name.

00:17:20.230 --> 00:17:23.340
And I think that should be it.

00:17:23.440 --> 00:17:25.180
Let me just build and go there.

00:17:25.180 --> 00:17:27.380
We'll see what happens
if I missed anything.

00:17:27.500 --> 00:17:28.330
So the app is built.

00:17:28.540 --> 00:17:29.860
The simulator launches automatically.

00:17:29.860 --> 00:17:31.510
It's installed in the simulator.

00:17:31.630 --> 00:17:32.130
And there we go.

00:17:32.370 --> 00:17:33.510
Now we have our interface.

00:17:33.740 --> 00:17:35.600
We've succeeded in step number one.

00:17:35.760 --> 00:17:36.660
We've seen the tools.

00:17:36.660 --> 00:17:37.840
We've gotten the application built.

00:17:37.840 --> 00:17:39.220
And we've got something on screen.

00:17:39.470 --> 00:17:42.340
It doesn't do anything because
we haven't hooked anything up.

00:17:42.480 --> 00:17:44.560
But that's a good starting point.

00:17:44.660 --> 00:17:48.570
And it sets the stage for--
if we go back to slides now--

00:18:02.100 --> 00:18:02.100
So if we look at what we saw,
what we got out of that,

00:18:02.100 --> 00:18:02.100
basically we got the
application infrastructure.

00:18:02.100 --> 00:18:02.100
We got the scaffolding of an application
from which we're going to start to build.

00:18:02.380 --> 00:18:06.050
We got the main window loaded,
and we had that empty interface

00:18:06.170 --> 00:18:09.240
that came out of the template,
and we started adding stuff to it.

00:18:09.330 --> 00:18:13.400
One note, there's a handful of templates
that come with the SDK,

00:18:13.490 --> 00:18:16.650
and you should kind of take a look
at each one of those to understand,

00:18:16.670 --> 00:18:19.360
you know, for any given application,
which one is the best starting point.

00:18:19.430 --> 00:18:21.440
This one is fairly vanilla.

00:18:21.520 --> 00:18:24.360
The other ones have a little
bit more structure to them.

00:18:24.480 --> 00:18:27.830
So kind of get to know
what the templates are.

00:18:29.200 --> 00:18:32.170
So what I wanted to go through now
was kind of what happened when the

00:18:32.170 --> 00:18:37.220
application launched and set the
stage for the application lifecycle.

00:18:37.730 --> 00:18:40.380
And as I mentioned,
we are a C-based language,

00:18:40.380 --> 00:18:42.580
and as just about every
C-based program in the world,

00:18:42.700 --> 00:18:44.030
we start life in main.

00:18:44.180 --> 00:18:45.840
We have a main function
that's in the template.

00:18:45.840 --> 00:18:46.930
You can see it.

00:18:47.050 --> 00:18:48.190
It doesn't do very much.

00:18:48.320 --> 00:18:52.120
It basically hands off
control immediately to UIKit.

00:18:52.300 --> 00:18:55.600
And in particular, it calls a function
called UIApplicationMain.

00:18:55.650 --> 00:18:59.810
And that's kind of where the
application really starts to take off.

00:19:00.250 --> 00:19:02.950
One of the main things
UI Application Main does is it

00:19:03.010 --> 00:19:08.210
creates the UI Application Object,
which is a shared global object that

00:19:08.520 --> 00:19:10.160
effectively runs the application.

00:19:10.160 --> 00:19:14.130
It's kind of in charge
of all the app behavior.

00:19:14.200 --> 00:19:16.340
And at this point in time,
at the launch time,

00:19:16.400 --> 00:19:20.760
its primary goal is to get us to the
event loop as quickly as possible,

00:19:20.860 --> 00:19:24.200
because that defines
what your launch time is.

00:19:24.260 --> 00:19:26.540
And we want our launch times
to be as short as possible so

00:19:26.540 --> 00:19:31.620
that the apps feel responsive,
And we're now listening to the user.

00:19:31.820 --> 00:19:35.590
But along the way,
we do a couple very important things.

00:19:35.730 --> 00:19:39.380
One of the most important things is
we'll create this object on the side

00:19:39.380 --> 00:19:41.760
called the UI Application Delegate.

00:19:41.840 --> 00:19:45.110
And it's an object that works
with the UI Application Object.

00:19:45.390 --> 00:19:47.740
And as you can see, it's a delegate.

00:19:47.830 --> 00:19:48.680
So what is a delegate?

00:19:48.760 --> 00:19:51.250
We're going to kind of take a
little side turn here and talk

00:19:51.260 --> 00:19:52.830
about delegates a little bit.

00:19:52.970 --> 00:19:57.100
And this is the second kind of key
concept that I want to cover here.

00:19:57.530 --> 00:20:00.420
So what a delegate is,
delegation is a way for you to

00:20:00.610 --> 00:20:02.140
customize complex behaviors.

00:20:02.140 --> 00:20:05.180
And you can do so in two ways.

00:20:05.180 --> 00:20:09.250
One is you can provide input
kind of along the course of

00:20:09.250 --> 00:20:11.710
a behavior that's being done.

00:20:11.730 --> 00:20:15.820
So you can kind of fine tune the
generic behavior that UIKit provides.

00:20:17.430 --> 00:20:20.790
And the second is there are clearly
defined call outs for kind of

00:20:20.880 --> 00:20:23.970
beginning before something happens,
you get a call out,

00:20:23.970 --> 00:20:26.910
and then after something
is done being performed,

00:20:26.910 --> 00:20:28.320
you get a second call out.

00:20:28.370 --> 00:20:33.150
So you kind of have these interesting
before and after points where you can

00:20:33.150 --> 00:20:35.790
hook in code and customize behavior.

00:20:36.020 --> 00:20:38.140
Delegation is seen as,
you can look at it as an

00:20:38.180 --> 00:20:39.850
alternative to subclassing.

00:20:39.850 --> 00:20:46.900
Where subclassing, sometimes you may want
to override a behavior,

00:20:46.970 --> 00:20:48.660
but you don't want to
override the entire behavior.

00:20:48.660 --> 00:20:52.720
You may just want to kind of
interject certain things in the

00:20:52.800 --> 00:20:55.410
context of a superclass's method.

00:20:55.570 --> 00:20:57.830
And if you want to do it in the
middle of a superclass's method,

00:20:57.830 --> 00:21:00.120
you really can't do that with a subclass.

00:21:00.240 --> 00:21:04.670
So using delegates kind of gives you
those interesting points in the context

00:21:04.710 --> 00:21:10.090
of the superclass's implementation where
you can interject some code and behavior.

00:21:10.620 --> 00:21:14.730
Another problem with subclassing
is it may be confusing,

00:21:14.730 --> 00:21:18.190
like, when do you invoke your
superclasses implementation?

00:21:18.200 --> 00:21:20.000
Do you have to do it at the beginning?

00:21:20.100 --> 00:21:21.500
Can you do it at the end?

00:21:21.590 --> 00:21:23.180
Can you do it in the middle?

00:21:23.300 --> 00:21:24.460
Can you do it multiple times?

00:21:24.480 --> 00:21:26.480
Do you have to do it at all?

00:21:26.480 --> 00:21:29.170
I mean, usually the documentation
will make this clear,

00:21:29.170 --> 00:21:30.530
but sometimes it doesn't.

00:21:31.890 --> 00:21:35.560
And by separating these behaviors,
and especially these chunks of code

00:21:35.560 --> 00:21:39.340
that get interjected in the context
of a superclass's implementation,

00:21:39.430 --> 00:21:41.550
it keeps specific logic
in the right place.

00:21:41.550 --> 00:21:45.450
The generic behavior in the
superclass's UI kit implementation,

00:21:45.770 --> 00:21:50.290
and then specific code that's interjected
kind of off on the side in your code.

00:21:51.280 --> 00:21:53.610
So I wanted to go through an
example of how delegate works,

00:21:53.610 --> 00:21:58.540
just to give you a flavor of the kind of
interchange between the UIKit objects or

00:21:58.540 --> 00:22:00.440
the framework objects and your objects.

00:22:00.530 --> 00:22:02.620
And the example I'm going
to use is a text field.

00:22:02.720 --> 00:22:07.230
So it's a pretty simple example,
although editing text is, while simple,

00:22:07.230 --> 00:22:09.180
made up of a number of steps.

00:22:09.380 --> 00:22:12.030
So in UIKit,
there's an object called UITextField,

00:22:12.030 --> 00:22:14.580
which is the visual
representation of the text field.

00:22:14.660 --> 00:22:16.910
And it allows for a delegate.

00:22:18.460 --> 00:22:24.680
And when the user comes in and clicks on
the text field-- and I should also say,

00:22:24.720 --> 00:22:27.100
throughout the course of this week,
all of the engineers

00:22:27.100 --> 00:22:28.000
are going to say click.

00:22:28.300 --> 00:22:30.360
And when we say click, we mean tap.

00:22:30.430 --> 00:22:32.360
We think of it roughly the same.

00:22:32.460 --> 00:22:33.700
It's a single event.

00:22:34.030 --> 00:22:34.930
You tap on something.

00:22:35.130 --> 00:22:37.560
So just in your mind, when we say click,
think tap.

00:22:37.620 --> 00:22:40.310
So the user comes in
and taps on the field.

00:22:40.420 --> 00:22:42.200
And before the field is
actually made editable,

00:22:42.210 --> 00:22:46.240
the UI text field will check
in with the delegate and say,

00:22:46.340 --> 00:22:47.620
should I begin editing?

00:22:47.660 --> 00:22:49.900
And this is a point where
you can refine this behavior.

00:22:49.900 --> 00:22:51.790
And you can determine,
given the current state

00:22:51.870 --> 00:22:54.980
in my application,
is it OK to allow the user to edit?

00:22:55.020 --> 00:22:57.480
And you can indicate yes or no.

00:22:58.260 --> 00:23:01.300
And so in this case, we're going to say,
yeah, sure, go ahead.

00:23:01.430 --> 00:23:03.700
And then just before the text
field is actually made editable

00:23:03.700 --> 00:23:05.940
and the user starts editing,
the text field will come

00:23:05.950 --> 00:23:08.650
back to its delegate and say,
OK, I'm about to begin editing.

00:23:08.650 --> 00:23:12.960
And so this is kind of your before
hook that you can hook into.

00:23:13.000 --> 00:23:16.300
And you can do any kind of setup
or preparation that you need to

00:23:16.300 --> 00:23:18.290
in order to edit this text field.

00:23:19.300 --> 00:23:21.650
And then after that,
the text field is made editable.

00:23:21.650 --> 00:23:22.820
The user can edit the text.

00:23:22.920 --> 00:23:24.710
And when focus goes away
from the text field,

00:23:24.950 --> 00:23:27.020
then the UI text will come
back to its delegate and say,

00:23:27.140 --> 00:23:28.610
OK, now we're done editing.

00:23:28.610 --> 00:23:30.110
The operation is finished.

00:23:30.110 --> 00:23:32.120
And so you can take the
value out of the text field.

00:23:32.120 --> 00:23:34.180
You can respond to it in
whatever way you need to.

00:23:34.180 --> 00:23:39.150
And that's kind of a very typical flow
of a framework object going to its

00:23:39.150 --> 00:23:44.730
delegate and asking for permission or
clarification of what should be done.

00:23:44.740 --> 00:23:49.070
And then a before the action
and after the action callback.

00:23:49.300 --> 00:23:50.300
Thank you.

00:23:50.590 --> 00:23:53.380
And you'll see delegates
used throughout our APIs.

00:23:53.440 --> 00:23:55.600
And here's just a small handful of them.

00:23:55.660 --> 00:23:59.100
The text field in the middle,
the UI table views,

00:23:59.170 --> 00:24:04.580
even things like web views have delegates
and participate in the complex operation

00:24:04.580 --> 00:24:07.710
of displaying and loading a web page.

00:24:09.330 --> 00:24:13.040
So let's go back to our lifecycle
diagram and drill into a little bit

00:24:13.100 --> 00:24:15.960
more detail of how the UI application
object and its delegate work.

00:24:16.030 --> 00:24:19.590
And as I said,
the UI application delegate is your code.

00:24:19.590 --> 00:24:22.290
So you specify or you provide
the code for this object.

00:24:22.570 --> 00:24:25.850
And it conforms to the
UI application delegate protocol.

00:24:25.900 --> 00:24:29.830
And when we say the word protocol,
all that really is is it's a

00:24:29.880 --> 00:24:34.720
specification of a set of methods
that an object agrees to implement.

00:24:34.750 --> 00:24:39.180
Many of the methods in a protocol may be
optional and they're defined as optional.

00:24:39.240 --> 00:24:40.690
Some of them are required.

00:24:40.700 --> 00:24:43.690
The required ones, obviously,
you have to implement.

00:24:44.760 --> 00:24:47.550
And in the UI Application Delegate case,
here's just a couple of

00:24:47.550 --> 00:24:48.720
the methods that we have.

00:24:48.760 --> 00:24:50.840
UI Application did finish launching.

00:24:50.950 --> 00:24:54.900
And that's an interesting one because
it's the first point where your

00:24:54.900 --> 00:24:56.950
code gets control of execution.

00:24:57.560 --> 00:24:59.400
And you almost always implement it.

00:24:59.400 --> 00:25:00.860
In fact,
it's implemented in the template.

00:25:00.860 --> 00:25:02.400
I'll show you that in a second.

00:25:02.400 --> 00:25:05.400
It's a very, very common place for
you to put some code.

00:25:05.480 --> 00:25:09.340
And then another very common place
is in application will terminate.

00:25:09.660 --> 00:25:13.390
And that's kind of the last
stop before the app exits.

00:25:14.670 --> 00:25:18.400
If we look at the details
of the application delegate

00:25:18.500 --> 00:25:22.040
and the application object,
what happens at launch time,

00:25:22.040 --> 00:25:26.100
the UI application will load
that main nib file that we saw.

00:25:26.100 --> 00:25:29.020
And along the way,
it creates that main window.

00:25:29.020 --> 00:25:32.490
And one of those objects that
I mentioned was in that interface

00:25:32.620 --> 00:25:34.960
file is actually the delegate itself.

00:25:34.960 --> 00:25:37.310
That's actually where it lives.

00:25:37.310 --> 00:25:41.240
And when that nib file is loaded,
that's when the application comes into

00:25:41.300 --> 00:25:43.730
existence and is actually instantiated.

00:25:44.600 --> 00:25:47.870
and it gets set as the
application delegate.

00:25:48.990 --> 00:25:52.000
So once these things are done,
then the UI application calls over

00:25:52.130 --> 00:25:55.670
to the application delegate and calls
the application didFinishLaunching

00:25:55.670 --> 00:25:58.170
method if you implement it.

00:25:58.810 --> 00:26:02.070
And in that method,
typically you will load some

00:26:02.100 --> 00:26:06.030
state and then configure the UI,
whether that's the initial time your

00:26:06.030 --> 00:26:10.400
app is launched or you may be returning
the user to whatever point they were at

00:26:10.400 --> 00:26:11.810
the last time they launched your app.

00:26:12.060 --> 00:26:14.730
And the important point to
note here is the main window,

00:26:14.730 --> 00:26:17.920
while it's been created,
has not been shown on screen yet.

00:26:18.070 --> 00:26:21.540
So you can do any of this setup,
and it's before the user sees anything.

00:26:21.540 --> 00:26:24.880
So whatever setup you make,
that's the first thing they'll see.

00:26:25.560 --> 00:26:27.610
So once you're done here,
then the main window

00:26:27.610 --> 00:26:29.880
is brought on screen,
control flows back over to

00:26:29.890 --> 00:26:32.440
the UI application object,
and then we drop into

00:26:32.550 --> 00:26:35.940
the main event loop,
and the app is up and running.

00:26:38.230 --> 00:26:42.700
So just to cover this briefly,
UIKit drives the process.

00:26:42.780 --> 00:26:46.200
In reality, UIKit is really--it's
in the driver's seat.

00:26:46.270 --> 00:26:48.840
You primarily are just
kind of along for the ride.

00:26:48.900 --> 00:26:52.600
You're giving a lot of directions
and telling us where to go,

00:26:52.600 --> 00:26:55.500
but UIKit is really
driving the machinery.

00:26:55.970 --> 00:26:59.660
We've seen how you can customize the
behavior in UIKit using delegates,

00:26:59.720 --> 00:27:02.180
and in particular,
the UI application and its delegate

00:27:02.310 --> 00:27:05.290
work together through a set of
methods where you can refine

00:27:05.420 --> 00:27:08.180
the behavior of the application.

00:27:08.980 --> 00:27:10.440
So that's step number one.

00:27:10.480 --> 00:27:11.580
We've got something on screen.

00:27:11.580 --> 00:27:13.400
Now let's talk about
making it do something,

00:27:13.580 --> 00:27:15.300
because that's the interesting part.

00:27:15.370 --> 00:27:18.280
And in order to make it do something,
we have to cover two topics.

00:27:18.350 --> 00:27:21.760
The first is the language that we use,
because we're going to write some code.

00:27:21.820 --> 00:27:26.560
And the second is how to actually connect
the view to the controller in order

00:27:26.590 --> 00:27:28.990
to respond to the user in some way.

00:27:29.160 --> 00:27:32.650
So the language that
we use is Objective-C.

00:27:32.790 --> 00:27:35.260
For those of you that
haven't seen Objective-C,

00:27:35.310 --> 00:27:36.740
it's a superset of ANSI C.

00:27:36.740 --> 00:27:38.700
So it's based on C.

00:27:38.750 --> 00:27:42.200
And on top of straight C,
it adds object-oriented extensions.

00:27:42.240 --> 00:27:46.540
And it tries to do so in as
minimal a fashion as possible in

00:27:46.540 --> 00:27:50.390
order to add these object-oriented
principles-- encapsulation,

00:27:50.470 --> 00:27:53.460
polymorphism, inheritance,
all the things we know and

00:27:53.500 --> 00:27:55.360
love about object orientation.

00:27:55.400 --> 00:27:57.700
It's single inheritance.

00:27:58.640 --> 00:28:01.200
It has a dynamic runtime,
so we can do things like the

00:28:01.320 --> 00:28:04.700
UI application object can ask
whether an object implements

00:28:04.700 --> 00:28:06.290
application did finish launching.

00:28:06.520 --> 00:28:08.840
We can do that runtime dynamically.

00:28:08.900 --> 00:28:13.280
And we've gone to great lengths to
prevent throwing in a kitchen sink,

00:28:13.340 --> 00:28:14.630
piling on a ton of syntax.

00:28:14.740 --> 00:28:17.540
We try to keep it as simple as possible.

00:28:18.300 --> 00:28:21.320
It's a very easy language to learn.

00:28:21.370 --> 00:28:24.540
I've seen a ton of Apple engineers
that are new to the company

00:28:24.540 --> 00:28:25.530
come in and learn it.

00:28:25.750 --> 00:28:29.070
And one of the common things that
people ask when they come into Apple is,

00:28:29.080 --> 00:28:31.760
you know, oh, I'm going to have this
ramp-up time with Objective-C.

00:28:31.760 --> 00:28:33.180
You know, I'm going to need a week or so.

00:28:33.180 --> 00:28:35.290
And in many cases, like,
by the end of the day,

00:28:35.350 --> 00:28:38.400
they're writing Objective-C code
and feel very comfortable.

00:28:38.400 --> 00:28:40.240
And I think it's a fun language.

00:28:40.240 --> 00:28:41.670
It's very lighthearted.

00:28:41.750 --> 00:28:42.930
It's easy to learn.

00:28:42.930 --> 00:28:43.830
It's fun to use.

00:28:43.910 --> 00:28:44.580
I love it.

00:28:44.710 --> 00:28:46.220
And I hope you will, too.

00:28:47.160 --> 00:28:50.400
For those of you that are familiar
with it and already love it,

00:28:50.400 --> 00:28:53.120
I should point out we
support Objective-C 2.0,

00:28:53.120 --> 00:28:54.360
which was added in Leopard.

00:28:54.460 --> 00:28:57.420
So things like properties and
dot syntax and fast enumeration,

00:28:57.420 --> 00:28:58.840
we have support for those.

00:28:58.840 --> 00:29:02.030
One notable exception is we do
not support garbage collection.

00:29:02.030 --> 00:29:04.480
So on the phone,
memory is managed manually.

00:29:04.480 --> 00:29:05.690
And that's critical.

00:29:05.830 --> 00:29:08.620
And we spend a lot of time
focusing on memory management,

00:29:08.620 --> 00:29:12.030
making sure we're not leaking,
making sure that we're allocating

00:29:12.030 --> 00:29:15.380
memory only when we need it and
only the amount that we need.

00:29:16.120 --> 00:29:18.760
because we have limited resources,
so it's important to keep

00:29:18.760 --> 00:29:20.470
your memory under control.

00:29:21.560 --> 00:29:24.400
So let's just look through
a couple simple examples.

00:29:24.490 --> 00:29:28.820
So in C++ and Java,
you'd invoke a syntax method like this.

00:29:28.880 --> 00:29:31.890
In Objective-C, slightly different,
same pieces involved.

00:29:31.890 --> 00:29:34.820
You'll see the square brackets
around the message send.

00:29:34.900 --> 00:29:37.350
You'll come to love square brackets.

00:29:37.500 --> 00:29:38.900
They're a great thing in the language.

00:29:39.940 --> 00:29:43.340
And if I may,
I hope not to offend anybody,

00:29:43.340 --> 00:29:46.890
but I consider myself part of this crowd.

00:29:47.000 --> 00:29:50.670
But for the older folks in the crowd,
you might recognize some of this.

00:29:50.960 --> 00:29:51.700
It's similar to Smalltalk.

00:29:51.700 --> 00:29:55.650
In fact, Objective-C has kind of a
heritage from Smalltalk.

00:29:56.890 --> 00:30:01.280
Another example, looking at a method
called with arguments.

00:30:01.390 --> 00:30:05.040
So here's what we'd call subtract
with a couple arguments passed.

00:30:05.110 --> 00:30:07.300
Here you see a little bit, again,
slight difference.

00:30:07.300 --> 00:30:11.440
Some identifiers that precede
the arguments that are passed in.

00:30:11.450 --> 00:30:14.940
And this is a subtle thing and
frequently sparks religious debates,

00:30:14.950 --> 00:30:16.960
but we think it's really important.

00:30:16.960 --> 00:30:21.850
And it helps just produce readable code,
highly readable code.

00:30:21.860 --> 00:30:26.770
And when you couple this language feature
with the design that we have of our APIs,

00:30:26.800 --> 00:30:29.650
you find that our APIs are very verbose.

00:30:29.820 --> 00:30:32.440
We're not afraid to use our words.

00:30:33.140 --> 00:30:37.840
And we try to really
make our APIs expressive.

00:30:37.990 --> 00:30:41.770
We also try-- and this is sometimes
borders on the ridiculous-- we

00:30:41.840 --> 00:30:43.560
try to be grammatically correct.

00:30:43.690 --> 00:30:45.220
We have a subject and a verb.

00:30:45.520 --> 00:30:47.300
You know,
we pay attention to these things.

00:30:47.300 --> 00:30:51.760
We have debates at Apple about
these points of the API design.

00:30:51.920 --> 00:30:54.000
But we take our APIs very,
very seriously.

00:30:54.000 --> 00:30:56.400
We try to make them highly consistent.

00:30:56.490 --> 00:31:00.100
In fact, you'll see consistency not just
from the Cocoa Touch layer,

00:31:00.240 --> 00:31:01.840
but even the layers beneath it.

00:31:01.960 --> 00:31:06.000
We try to maintain a consistency so
that when you do encounter a new API,

00:31:06.120 --> 00:31:07.900
it feels familiar.

00:31:08.030 --> 00:31:10.550
And when you see new code,
you can just start reading it

00:31:10.690 --> 00:31:12.990
and get an understanding of it.

00:31:14.460 --> 00:31:17.580
Another example of declaring a method.

00:31:17.620 --> 00:31:20.900
Again, slightly different syntax,
same basic principles.

00:31:20.950 --> 00:31:21.900
Is it an instance method?

00:31:21.900 --> 00:31:22.900
Is it a class method?

00:31:22.900 --> 00:31:23.680
What are the arguments?

00:31:23.790 --> 00:31:24.510
What's the return type?

00:31:24.570 --> 00:31:27.790
It's all the same basic C types,
C stuff that you would

00:31:27.790 --> 00:31:29.110
need to put in there.

00:31:29.430 --> 00:31:32.040
So there's a session on
Objective-C that would be a great

00:31:32.040 --> 00:31:34.960
thing to go to if you're familiar,
if you're new to the language especially.

00:31:34.960 --> 00:31:37.500
And then there's a lab on
the Objective-C 2.0 specific

00:31:37.510 --> 00:31:38.980
features that have been added.

00:31:38.980 --> 00:31:41.050
And I wanted to point out about the labs.

00:31:41.130 --> 00:31:44.590
The labs are this remarkable opportunity,
especially for the folks

00:31:44.590 --> 00:31:47.230
that are here in person,
where you get to sit down and

00:31:47.230 --> 00:31:49.160
meet the engineers one-on-one.

00:31:49.160 --> 00:31:51.840
You can ask questions,
and these are the people

00:31:51.840 --> 00:31:54.660
that designed this stuff,
so we generally have an

00:31:54.660 --> 00:31:56.030
idea of how it works.

00:31:58.130 --> 00:31:59.620
You can ask us any questions.

00:31:59.620 --> 00:32:01.500
We're happy to talk about
the design of your apps,

00:32:01.560 --> 00:32:04.900
how you should use the APIs effectively,
pitfalls,

00:32:05.040 --> 00:32:06.850
things that you might want to avoid,
stuff like that.

00:32:06.990 --> 00:32:07.640
So go to the labs.

00:32:07.640 --> 00:32:09.100
They're really, really awesome.

00:32:09.200 --> 00:32:10.660
We've got a ton of engineers here.

00:32:10.660 --> 00:32:13.820
They're a great, great opportunity to
take advantage of them.

00:32:15.670 --> 00:32:17.320
There's also some documentation.

00:32:17.330 --> 00:32:20.920
Again, documentation is great
that we have on this.

00:32:20.940 --> 00:32:23.440
There's an Objective-C 2.0
language guide,

00:32:23.480 --> 00:32:25.940
covers all the details
of the language itself.

00:32:25.970 --> 00:32:28.960
And then another guide that I wanted
to point out is this object-oriented

00:32:28.960 --> 00:32:30.820
programming with Objective-C.

00:32:30.850 --> 00:32:34.520
And as you look at any kind of
object-oriented environment,

00:32:34.540 --> 00:32:36.290
everybody has their own spin on it.

00:32:36.300 --> 00:32:39.100
They have a certain set of terminology,
they use the terminology

00:32:39.100 --> 00:32:41.440
in a certain way,
and we're no different.

00:32:41.460 --> 00:32:45.040
And the important thing about this
document is it gives you our view of

00:32:45.040 --> 00:32:50.360
object-oriented programming from the
perspective of Objective-C and also

00:32:50.360 --> 00:32:52.860
from the perspective of our frameworks.

00:32:52.990 --> 00:32:58.240
So again, it helps with that step back,
get a big picture around the frameworks,

00:32:58.240 --> 00:33:02.510
the designs that we use,
and reduce that impedance mismatch.

00:33:03.600 --> 00:33:05.640
So that's the language that we have.

00:33:05.710 --> 00:33:10.090
And now let's talk about how we
connect the views to the controllers.

00:33:10.700 --> 00:33:13.480
So that we can listen,
we can respond to the user input.

00:33:13.560 --> 00:33:16.580
And so the user interacts
with the device,

00:33:16.770 --> 00:33:18.490
with the user interface
through the views,

00:33:18.500 --> 00:33:22.100
and they do so through
three primary means.

00:33:22.180 --> 00:33:25.490
One is through standard controls,
the buttons and sliders

00:33:25.490 --> 00:33:27.260
and switches and things.

00:33:27.320 --> 00:33:30.890
The second one is through
custom views that you create,

00:33:30.900 --> 00:33:36.160
and whether that's custom controls or a
custom view where you're presenting data

00:33:36.160 --> 00:33:41.900
in a certain way and allowing the user to
interact with that in a particular way.

00:33:41.950 --> 00:33:46.100
And then the third way is through
sensors on the phone and the iPod Touch,

00:33:46.180 --> 00:33:50.100
through sensors like the accelerometer,
where the user can just turn the device,

00:33:50.100 --> 00:33:52.980
and that's a form of input indicating
that they want to either rotate

00:33:52.980 --> 00:33:57.260
the interface or that they need
to see something in landscape mode.

00:33:58.570 --> 00:34:00.900
And so the controller objects
tend to be the ones that are

00:34:01.180 --> 00:34:05.790
responding to that input and
actually performing some action.

00:34:06.630 --> 00:34:12.250
So the views that the user interacts
with are instances of the UIView class.

00:34:12.250 --> 00:34:15.240
And UIView provides two key roles.

00:34:15.240 --> 00:34:17.590
The first is it just gives
you that rectangular region

00:34:17.650 --> 00:34:22.240
on screen to present content,
whether it's an image or content

00:34:22.300 --> 00:34:23.440
that you're drawing on the fly.

00:34:23.440 --> 00:34:28.900
It's just that space in the screen
real estate that you have to work in.

00:34:28.940 --> 00:34:33.430
And then the second thing UIView does
is it responds--it handles the events.

00:34:33.430 --> 00:34:38.340
It's kind of where the basic
event mechanism is hooked in.

00:34:39.070 --> 00:34:43.360
And one note on the event side,
UI views are single touch by default.

00:34:43.440 --> 00:34:46.920
So when you create a UI view,
it will only respond to a single finger.

00:34:46.980 --> 00:34:50.000
If you do put two fingers
down or more fingers down,

00:34:50.040 --> 00:34:52.960
it will only respond to
the first one that we see.

00:34:53.020 --> 00:34:55.420
The other ones will
basically be dead to us.

00:34:55.480 --> 00:34:58.620
There's a switch that you can
flip to turn on multi-touch,

00:34:58.620 --> 00:35:02.480
but just keep that in mind that
views are single touch by default.

00:35:03.510 --> 00:35:08.300
In the context of responding to the user,
the interesting subclass

00:35:08.300 --> 00:35:10.960
of UIView is UIControl.

00:35:11.050 --> 00:35:15.080
And both UIView and UIControl
are abstract classes.

00:35:15.150 --> 00:35:17.940
In the case of UIControl,
we have this whole collection of

00:35:18.030 --> 00:35:20.610
controls that we have out of the box,
all the common things

00:35:20.650 --> 00:35:22.720
that you would expect.

00:35:23.090 --> 00:35:27.180
And what UI Control adds to the
party is the notion of responding

00:35:27.180 --> 00:35:30.060
to events and invoking actions.

00:35:30.130 --> 00:35:32.990
And the events that it responds
to are things like touchdown,

00:35:33.000 --> 00:35:36.230
touch up, drag events,
or in the case we're going

00:35:36.230 --> 00:35:38.810
to use here of the switch,
just a simple value change.

00:35:38.860 --> 00:35:41.300
So we've gone from off to on.

00:35:42.550 --> 00:35:46.280
And in response to particular events,
a control will invoke an action

00:35:46.280 --> 00:35:48.320
commonly on the controller.

00:35:48.390 --> 00:35:53.890
And we've given a name to this idea,
and that's target action.

00:35:54.830 --> 00:35:58.660
And this is the third main concept
that I wanted to cover here today.

00:35:58.760 --> 00:36:01.660
So simply put,
target action is just connecting

00:36:01.660 --> 00:36:05.200
this control to the controller.

00:36:05.260 --> 00:36:07.740
And in the example I'm going to use,
the event that's going to be

00:36:07.740 --> 00:36:09.740
generated is a value changed event.

00:36:10.010 --> 00:36:13.300
So when the switch moves and turns on,
the value is changed.

00:36:13.360 --> 00:36:16.890
And in response to that event,
the control will invoke

00:36:16.890 --> 00:36:19.460
an action on the target,
the target here being

00:36:19.460 --> 00:36:21.060
our controller object.

00:36:21.130 --> 00:36:26.050
And the action that it's going to
invoke is this toggle light method.

00:36:26.130 --> 00:36:28.500
And we'll see that in code in a second.

00:36:28.560 --> 00:36:32.060
And this notion of the target action,
controls responding to an event,

00:36:32.110 --> 00:36:38.100
invoking an action on its target,
is the same as what's in Cocoa on OS X.

00:36:38.160 --> 00:36:40.760
So for those folks coming
from that direction,

00:36:40.870 --> 00:36:44.500
same exact concept, same exact mechanism.

00:36:44.560 --> 00:36:49.160
And you're familiar with the limitation
of a control has a single target action.

00:36:49.220 --> 00:36:51.060
And sometimes if you've needed
to invoke multiple actions,

00:36:51.090 --> 00:36:54.550
you've had to do that in your code,
have the control invoke your action,

00:36:54.600 --> 00:36:58.060
and then you manually
invoke other actions.

00:36:58.200 --> 00:37:00.860
Well, in Cocoa Touch,
we've extended this.

00:37:00.990 --> 00:37:05.060
And we've added the support for
having multiple targets and actions.

00:37:05.190 --> 00:37:08.940
So now in the demo that I'll do here,
we're going to have a second action

00:37:08.990 --> 00:37:12.700
that's invoked on our controller,
which is the update label method.

00:37:12.820 --> 00:37:16.620
And so you can have an arbitrary number
of actions triggered by different events.

00:37:16.620 --> 00:37:17.900
They don't all have to be the same event.

00:37:17.900 --> 00:37:20.560
You can hook different actions up to
different targets to different events.

00:37:20.560 --> 00:37:26.090
So it's -- it's a nice set of flexibility
that's kind of grown out of Cocoa.

00:37:26.710 --> 00:37:29.940
So with that stage set of the
language and now knowing how we

00:37:29.940 --> 00:37:32.850
hook up the view to the controller,
let's actually write

00:37:32.920 --> 00:37:33.960
a little bit of code.

00:37:34.030 --> 00:37:36.360
And so these are the two things that
we're going to do is actually connect

00:37:36.480 --> 00:37:39.950
the views graphically in Interface
Builder and then add action methods.

00:37:40.070 --> 00:37:43.750
So let me go back to our demo.

00:37:52.550 --> 00:37:55.460
I should point out
from our previous demo,

00:37:55.460 --> 00:37:57.560
you can see we have our
beautiful icon here.

00:37:57.580 --> 00:38:00.000
It has the lovely glass
reflection added automatically.

00:38:00.000 --> 00:38:01.700
That wasn't in the icon itself.

00:38:01.700 --> 00:38:05.930
So now to add the code,
let's have a look at some of the

00:38:05.940 --> 00:38:08.780
classes that got created here.

00:38:09.310 --> 00:38:10.810
Give myself a little room.

00:38:11.150 --> 00:38:14.340
So here you see we have
the AppDelegate class.

00:38:14.340 --> 00:38:16.300
This is in the template already.

00:38:16.300 --> 00:38:19.140
If we look at the code briefly here,
you can see here's the application

00:38:19.140 --> 00:38:20.370
didFinishLaunching method.

00:38:20.470 --> 00:38:23.440
So we're all ready for just
hooking in whatever launching

00:38:23.440 --> 00:38:26.220
logic you need to add in there.

00:38:26.380 --> 00:38:28.180
We're not going to do
anything with the AppDelegate.

00:38:28.180 --> 00:38:30.020
It works just fine as it is.

00:38:30.090 --> 00:38:33.590
Where we're going to add our code
is over in the ViewController.

00:38:33.730 --> 00:38:35.640
So this is our controller class.

00:38:35.720 --> 00:38:38.280
And I'm going to add two
things in the header file.

00:38:38.340 --> 00:38:42.060
The first is a handful
of instance variables,

00:38:42.120 --> 00:38:44.610
one for the image view,
which was that light that

00:38:44.650 --> 00:38:47.630
I dragged into the interface,
and the second is for the label that

00:38:47.660 --> 00:38:50.040
was up at the top of the window.

00:38:50.190 --> 00:38:53.200
And then in addition to
these instance variables,

00:38:53.250 --> 00:38:55.680
I'm going to add declarations
for a couple action methods,

00:38:55.780 --> 00:38:58.330
the toggle light and the update label
method that we saw a second ago.

00:38:58.340 --> 00:39:02.780
And I wanted to point out a
little bit of the syntax here,

00:39:02.780 --> 00:39:05.740
just because this historically has
caused some confusion for people,

00:39:05.740 --> 00:39:08.930
and people seem to wrestle with it,
so I'll try to demystify some of it.

00:39:08.980 --> 00:39:12.180
There are these IB outlet
and IB action keywords,

00:39:12.180 --> 00:39:16.960
and those aren't part of the language,
those are just a little bit of syntax

00:39:16.960 --> 00:39:21.910
that gives a hint to Interface Builder
that these things are items that

00:39:21.910 --> 00:39:27.840
should appear in the lists in Interface
Builder that the user can connect to.

00:39:27.840 --> 00:39:31.550
So in this case, the IB outlet for the
two instance variables,

00:39:31.550 --> 00:39:35.190
those are outlets that can point
to user interface elements,

00:39:35.200 --> 00:39:38.960
and the IB action indicates that these
are action methods that are going to be

00:39:38.960 --> 00:39:38.960
used to connect to the user interface.

00:39:39.310 --> 00:39:40.850
And then in addition to
these instance variables,

00:39:40.850 --> 00:39:42.140
I'm going to add a little
bit of syntax here,

00:39:42.150 --> 00:39:44.280
just because this historically has
caused some confusion for people,

00:39:44.280 --> 00:39:46.110
and people seem to wrestle with it,
so I'll try to demystify some

00:39:46.190 --> 00:39:47.870
of these instance variables,
those are outlets that can

00:39:47.890 --> 00:39:49.040
point to user interface.

00:39:50.190 --> 00:39:52.690
So now with those hints in place,
actually if we go over to

00:39:52.690 --> 00:39:57.940
Interface Builder now-- actually,
let me get rid of the simulator there.

00:39:58.000 --> 00:40:02.190
If we go back over to Interface Builder
to our demo view controller nib file,

00:40:02.870 --> 00:40:06.520
I wanted to talk a little bit
about the objects that are here.

00:40:06.620 --> 00:40:09.500
This files owner, again,
this is a concept that takes a little

00:40:09.600 --> 00:40:10.940
bit of getting your head around.

00:40:10.940 --> 00:40:15.820
But what the files owner is,
this icon is a representation of the

00:40:15.820 --> 00:40:18.920
object that is loading this nib file.

00:40:18.920 --> 00:40:24.360
And it gives us that icon that we
can graphically connect things to.

00:40:24.360 --> 00:40:26.090
And those connections
are formed at runtime.

00:40:26.160 --> 00:40:29.400
This object doesn't actually
live in the interface file.

00:40:29.400 --> 00:40:32.460
We just have an icon here,
which at runtime,

00:40:32.730 --> 00:40:35.180
the the real object is plugged into.

00:40:36.200 --> 00:40:37.870
And in our case,
the files owner is our demo

00:40:37.870 --> 00:40:40.820
view controller object,
the one that I just added a few instance

00:40:40.890 --> 00:40:42.860
variables and action methods to.

00:40:43.630 --> 00:40:46.540
And if we look at -- let
me bring up the view here.

00:40:46.640 --> 00:40:50.620
If I select the files owner over
here and I go down to the connections

00:40:50.660 --> 00:40:55.200
inspector under the tools menu,
we can see the list of things that

00:40:55.200 --> 00:40:56.940
can be connected to this object.

00:40:57.050 --> 00:41:00.690
And now this list contains those
items that I added in the header file,

00:41:00.970 --> 00:41:05.190
namely the image view, the label,
and the two action methods down here.

00:41:06.390 --> 00:41:08.460
So those are the pieces
that we're going to connect.

00:41:08.490 --> 00:41:12.180
And first I'm going to add-- I'm going
to form connections for the outlets.

00:41:12.370 --> 00:41:14.120
So for the image view,
I just drag from the little

00:41:14.240 --> 00:41:18.200
connection circle here,
drag over to the light, and let go.

00:41:18.230 --> 00:41:20.220
And that sets that connection.

00:41:20.250 --> 00:41:22.430
And then for the label,
I just drag that over

00:41:22.520 --> 00:41:23.980
to the label and let go.

00:41:24.020 --> 00:41:25.900
And now we have those connections formed.

00:41:25.940 --> 00:41:28.580
And when the nib file is loaded,
those instance variables will

00:41:28.580 --> 00:41:32.600
be set to point to the objects
that are in the interface.

00:41:33.100 --> 00:42:19.600
[Transcript missing]

00:42:20.010 --> 00:42:22.880
And now we can see in the inspector
we have multiple target action

00:42:22.950 --> 00:42:28.730
connections from our single switch
for the value changed event.

00:42:31.900 --> 00:42:35.130
And I think those are all the
connections we need to make

00:42:35.510 --> 00:42:36.560
since this is a simple app.

00:42:36.560 --> 00:42:40.000
So I'm going to save the nib
file and we'll go back to Xcode

00:42:40.050 --> 00:42:42.550
and now actually add some code.

00:42:42.720 --> 00:42:45.960
And you can see from-- oops,
that won't be good.

00:42:45.960 --> 00:42:49.500
Well, you can see in the template,
there's some methods here that are

00:42:49.500 --> 00:42:52.750
implemented that you can choose to add,
extend if you need to.

00:42:52.870 --> 00:42:56.600
But we're just adding these
two new action methods.

00:42:56.740 --> 00:43:00.020
And like any good cooking show,
I have it ready in the oven.

00:43:00.020 --> 00:43:02.220
So we have toggle light
and update method.

00:43:02.310 --> 00:43:03.610
Both of these are basically the same.

00:43:03.770 --> 00:43:08.440
Again, I'm just using this as a setting
the stage for the discussion.

00:43:08.560 --> 00:43:11.430
In both of these cases,
the methods take a single argument,

00:43:11.550 --> 00:43:12.750
which is the sender.

00:43:12.840 --> 00:43:16.140
And the sender is the object
that is invoking this action.

00:43:16.140 --> 00:43:20.480
In our case, it's the instance of
that UI switch object.

00:43:20.960 --> 00:43:23.800
And so in both of these cases,
we're just going to ask,

00:43:23.840 --> 00:43:25.440
is the switch on?

00:43:25.490 --> 00:43:27.520
And if it is on,
we're going to do one thing.

00:43:27.520 --> 00:43:29.320
And if it's off, we'll do something else.

00:43:29.360 --> 00:43:32.880
In the case of when it's on,
we set the image of the image

00:43:32.960 --> 00:43:35.480
view to the on PNG image.

00:43:35.550 --> 00:43:38.030
And if it's off,
we set it to the off PNG image.

00:43:38.120 --> 00:43:40.820
Those were two of the images
that I dragged in earlier.

00:43:40.870 --> 00:43:43.310
And for the update label,
we do basically the same thing.

00:43:43.390 --> 00:43:45.510
If the switch is on,
we set the text of the

00:43:45.510 --> 00:43:46.800
label to one thing.

00:43:46.860 --> 00:43:49.440
And otherwise,
we set it to something else.

00:43:50.660 --> 00:43:52.160
And so now we've implemented our actions.

00:43:52.260 --> 00:43:56.010
Let me save that, build and go.

00:43:56.130 --> 00:43:58.200
And now hopefully-- there we go.

00:43:58.280 --> 00:44:02.180
Now our light turns on,
the label changes at the top.

00:44:02.250 --> 00:44:06.120
And you can see that single event,
the value changed, is triggering multiple

00:44:06.790 --> 00:44:08.580
actions at the same time.

00:44:10.530 --> 00:44:14.600
So that's, I think,
the rest of that demo.

00:44:14.610 --> 00:44:17.470
Oh, and then as you saw yesterday,

00:44:17.710 --> 00:44:20.370
In order to build it on the device,
we would just select the

00:44:20.370 --> 00:44:23.850
device from the active SDK,
build and run, and would install it

00:44:23.940 --> 00:44:27.000
on the actual device,
and we'd be off and running.

00:44:27.840 --> 00:44:30.440
So now we've accomplished
goal number two.

00:44:30.500 --> 00:44:32.810
And if we go back to the slides--

00:44:33.970 --> 00:44:36.600
We can see the things that we saw
there were we connected the user

00:44:36.600 --> 00:44:40.230
interface to the controller in the back.

00:44:40.250 --> 00:44:43.890
We implemented a couple action methods,
and we used target action to

00:44:43.890 --> 00:44:48.200
respond to an event in order to
invoke an action on our controller.

00:44:48.280 --> 00:44:52.550
And we used multiple target
actions for a single control.

00:44:52.970 --> 00:44:56.240
So a couple other points
about the actions.

00:44:56.410 --> 00:44:58.560
You can define your
actions in three ways.

00:44:58.600 --> 00:45:01.680
This is again an extension
from the Cocoa mechanism,

00:45:01.830 --> 00:45:04.450
where we use the middle one,
which is the same one that Cocoa uses.

00:45:04.730 --> 00:45:07.190
But there's a single sender argument.

00:45:08.200 --> 00:45:11.260
You can also define the action
methods with no arguments if you

00:45:11.270 --> 00:45:13.240
don't care who it's coming from.

00:45:13.300 --> 00:45:17.080
Or if you need additional details
about the event that caused

00:45:17.080 --> 00:45:19.980
this action to be invoked,
you can pass an optional

00:45:19.980 --> 00:45:21.030
with event argument.

00:45:21.120 --> 00:45:27.550
And then you can introspect the event
and see what was going on in more detail.

00:45:28.090 --> 00:45:30.840
Our outlets that we hooked
up to the user interface get

00:45:30.840 --> 00:45:32.720
defined as instance variables.

00:45:32.720 --> 00:45:36.810
And again, just to drill this point home,
IB action, IB outlet,

00:45:36.900 --> 00:45:39.850
these two lines are copy and
pasted from our source code.

00:45:39.960 --> 00:45:40.840
They're nothing special.

00:45:40.840 --> 00:45:43.420
IB outlet, in fact,
just disappears altogether.

00:45:43.490 --> 00:45:45.030
IB action is synonymous with void.

00:45:45.030 --> 00:45:49.820
So don't let that confuse you in any way.

00:45:49.820 --> 00:45:49.820
It's really, really simple.

00:45:50.160 --> 00:45:52.880
There are a couple sessions on
Interface Builder and designing apps.

00:45:53.030 --> 00:45:56.490
There's an introductory one
and a more advanced one.

00:45:57.490 --> 00:46:02.400
And then the third-- oh,
our session got renamed.

00:46:02.490 --> 00:46:06.480
2D Graphics and Animations
for the iPhone and Mac.

00:46:07.190 --> 00:46:08.440
Learn about animations.

00:46:08.440 --> 00:46:10.930
If you're going to incorporate
animations into your application,

00:46:11.070 --> 00:46:15.410
you can do so and learn
about controls and views.

00:46:17.820 --> 00:46:21.060
And just to wrap up the make
it do something section.

00:46:21.060 --> 00:46:24.920
So when you're writing Cocoa Touch code,
you're writing that in Objective-C.

00:46:24.920 --> 00:46:30.040
Keep in mind that the lower level
frameworks are primarily C-based.

00:46:30.040 --> 00:46:33.060
So you may have this mix of
Objective-C and C code if you're

00:46:33.060 --> 00:46:34.900
using lower level frameworks.

00:46:34.900 --> 00:46:38.260
And you're also free to use C++ if
you have existing classes that you

00:46:38.260 --> 00:46:39.940
want to leverage on the iPhone.

00:46:39.940 --> 00:46:43.240
You can bring those over and you
can intermix all three of these.

00:46:43.240 --> 00:46:45.380
You have a lot of flexibility there.

00:46:58.660 --> 00:46:58.780
Target action for control,
connecting your controls to invoking

00:46:58.780 --> 00:46:58.780
actions in response to particular events.

00:46:58.780 --> 00:46:58.780
And we used Interface Builder for
forming those connections graphically.

00:46:58.780 --> 00:46:58.780
You can certainly do the,
make those connections.

00:46:59.110 --> 00:47:01.890
In code, if you want,
it's just a heck of a lot

00:47:01.890 --> 00:47:04.110
easier in NIV just to drag them.

00:47:05.160 --> 00:47:06.100
So that's step number two.

00:47:06.100 --> 00:47:07.560
We've made our app do something.

00:47:07.610 --> 00:47:11.000
And that brings us to step
number three of expand it and

00:47:11.000 --> 00:47:13.440
actually turn it into a real app.

00:47:13.490 --> 00:47:15.560
And at this point,
you're faced with probably

00:47:15.560 --> 00:47:19.560
one of two choices in which
direction you're going to go.

00:47:20.150 --> 00:47:23.390
Either you'll probably go an
OpenGL direction if you're

00:47:23.390 --> 00:47:27.420
doing game development,
say, or you may stick with the native

00:47:27.420 --> 00:47:30.960
UI kit Cocoa Touch interfaces,
such as most of the apps

00:47:30.960 --> 00:47:32.730
that we ship on the phone.

00:47:33.000 --> 00:47:35.740
If you are doing game
development using OpenGL,

00:47:35.790 --> 00:47:38.240
we have OpenGL ES 1.1.

00:47:38.290 --> 00:47:41.900
If you have existing OpenGL ES stuff
from another platform,

00:47:41.930 --> 00:47:44.680
another mobile platform, say,
you should be able to bring that over.

00:47:44.680 --> 00:47:48.790
And we've seen a ton of these
games come over in no time because

00:47:48.790 --> 00:47:51.520
they're implemented using OpenGL.

00:47:53.280 --> 00:47:58.160
There's a session for game development
for the phone in particular,

00:47:58.230 --> 00:48:02.500
and then a more general 3D graphics
for the phone using OpenGL ES.

00:48:02.550 --> 00:48:06.100
So if you're doing game development,
these are of interest to you.

00:48:06.160 --> 00:48:08.400
And we're not going to talk
much about the OpenGL stuff.

00:48:08.470 --> 00:48:10.200
I'm not an OpenGL programmer.

00:48:10.260 --> 00:48:13.480
We're going to talk about
the native interface side.

00:48:14.230 --> 00:48:18.240
And as you expand your app,
one of the things that we found when

00:48:18.390 --> 00:48:22.900
we expanded our apps and turned them
into real apps was we saw this design

00:48:22.900 --> 00:48:28.460
approach kind of emerge of designing
our applications one screen at a time.

00:48:28.540 --> 00:48:31.520
And you'll hear this a number of times
through the session of focusing on

00:48:31.750 --> 00:48:33.910
presenting one screen of data at a time.

00:48:35.260 --> 00:48:38.310
And here's an example of our clock
application where we have a small

00:48:38.310 --> 00:48:43.820
number of features in the application,
each one presented in its own screen

00:48:43.950 --> 00:48:48.620
with control at the bottom for the
user to switch between those screens.

00:48:49.430 --> 00:48:53.690
So we just present one piece of
functionality in a screen at a time.

00:48:53.700 --> 00:48:57.830
And this is a pretty common
design that we've seen emerge,

00:48:57.850 --> 00:49:00.690
this kind of tab switching approach.

00:49:01.450 --> 00:49:05.670
A second one that we've seen emerge
is a hierarchical navigation of data.

00:49:06.000 --> 00:49:10.560
You see this in the iPod
application or in this example,

00:49:10.640 --> 00:49:13.890
the app that's near and dear to my heart,
the Photos application,

00:49:13.960 --> 00:49:17.000
where we have three primary
levels in the hierarchy.

00:49:17.080 --> 00:49:20.400
We have the list of albums that the
user has in their photo library.

00:49:20.400 --> 00:49:23.050
As they select one of the albums,
we drill down to a second level

00:49:23.050 --> 00:49:24.350
that shows the thumbnails.

00:49:24.380 --> 00:49:27.630
And then as they select
one of the thumbnails,

00:49:27.630 --> 00:49:30.390
we go down to the full
screen display of that image.

00:49:30.690 --> 00:49:33.810
So one screen at a time,
presenting specific

00:49:33.810 --> 00:49:35.970
information along the way.

00:49:36.850 --> 00:49:40.800
Another design aspect that we saw
emerge as we built these things

00:49:41.020 --> 00:49:46.100
is the notion of coupling the
screen with a specific controller.

00:49:46.100 --> 00:49:49.530
So a one-to-one mapping of a
screen full of content with the

00:49:49.580 --> 00:49:52.090
controller that manages that screen.

00:49:53.760 --> 00:49:54.840
In this case,
we have a library controller

00:49:54.840 --> 00:49:56.870
that's solely responsible
for the list of albums.

00:49:56.870 --> 00:50:00.270
We have a thumbnail controller,
which is just responsible for the

00:50:00.270 --> 00:50:02.180
presentation of the thumbnails.

00:50:02.180 --> 00:50:06.210
And then we have a separate controller
for the full screen display of

00:50:06.210 --> 00:50:08.220
displaying just that one image.

00:50:08.880 --> 00:50:12.160
And each controller is just responsible
for the screen full of content that

00:50:12.160 --> 00:50:15.360
it's managing and responding to the
user as they interact with that.

00:50:16.030 --> 00:50:19.210
So you can see we have this very
clear separation of the view

00:50:19.210 --> 00:50:22.740
from the controller and sitting
behind that to roundup the screen.

00:50:23.370 --> 00:50:26.530
And what we found out the model
view controller design is the

00:50:26.530 --> 00:50:29.860
image database that we have of
images synced over from iTunes or

00:50:29.860 --> 00:50:31.760
taken on the camera from the phone.

00:50:32.850 --> 00:50:36.180
So very clearly delineated
model view controller pieces.

00:50:36.180 --> 00:50:37.960
We practice what we preach.

00:50:38.740 --> 00:50:42.150
And this notion of pairing the
screen full of data with the

00:50:42.150 --> 00:50:46.120
controller gives you this nice
modular unit of functionality,

00:50:46.120 --> 00:50:49.560
which then as a module can be
plugged together with other

00:50:49.560 --> 00:50:51.730
modules in interesting ways.

00:50:52.530 --> 00:50:55.970
So here we see these three are
plugged together hierarchically.

00:50:56.670 --> 00:50:58.800
And in UIKit,
there's an object that facilitates

00:50:58.800 --> 00:51:02.460
that hierarchical navigation,
which is in the view controller category.

00:51:02.880 --> 00:51:04.160
We call it a navigation controller.

00:51:04.890 --> 00:51:08.870
And it manages this navigation from
one unit of functionality to another,

00:51:09.100 --> 00:51:12.210
where you're providing the logic
in that controller for any one

00:51:12.460 --> 00:51:14.090
screen full of content at a time.

00:51:15.110 --> 00:51:17.200
There's a second one
from the previous screen,

00:51:17.200 --> 00:51:20.860
the tab controller, which facilitates
switching between the tabs.

00:51:21.180 --> 00:51:22.660
Again, where each screen full
of content has a tab.

00:51:22.790 --> 00:51:25.020
has its own controller.

00:51:26.310 --> 00:51:29.620
This notion of the view controllers
that you write managing specific

00:51:29.620 --> 00:51:33.320
screenfuls of content and the ones that
we provide to help with that fall under

00:51:33.320 --> 00:51:35.700
this umbrella of view controllers.

00:51:35.700 --> 00:51:37.260
And it's really, really important.

00:51:37.260 --> 00:51:41.650
This is, I would say, this whole week,
one of the biggest goals that you should

00:51:41.650 --> 00:51:46.100
have is understand view controllers,
understand how to use them efficiently,

00:51:46.140 --> 00:51:49.730
how you should design your apps
using them in order to achieve this

00:51:49.730 --> 00:51:52.000
one screenful of content at a time.

00:51:52.820 --> 00:51:55.080
And to help with that,
there's a couple sessions that

00:51:55.080 --> 00:51:56.390
you should absolutely go to.

00:51:56.390 --> 00:51:57.560
These are not to be missed.

00:51:57.560 --> 00:52:00.870
Understanding view controllers
is an introductory session.

00:52:00.920 --> 00:52:04.240
Explains the design behind it,
kind of the basics of how they work,

00:52:04.280 --> 00:52:05.550
what you do with them.

00:52:05.550 --> 00:52:08.260
And then later in the week,
there's a mastering

00:52:08.260 --> 00:52:12.460
iPhone view controllers,
which goes into a little bit more detail.

00:52:12.460 --> 00:52:14.820
There's two labs for view controllers.

00:52:14.820 --> 00:52:17.430
We think it's that
important we get two labs.

00:52:17.430 --> 00:52:20.730
So come down, meet the engineers
that design this stuff,

00:52:20.730 --> 00:52:22.530
the folks that are using it.

00:52:22.840 --> 00:52:23.160
And then we'll have a little
bit of a discussion about how

00:52:23.160 --> 00:52:23.820
we think you should use view
controllers for our applications.

00:52:23.820 --> 00:52:27.160
Again, we'd love to discuss, you know,
the design of your application,

00:52:27.160 --> 00:52:31.030
how we think you should use view
controllers for really effective use.

00:52:33.180 --> 00:52:36.740
So view control is very important
in case you missed that point.

00:52:36.810 --> 00:52:38.600
And then the rest-- excuse me.

00:52:38.670 --> 00:52:40.260
The rest of the slides,
I just wanted to go through

00:52:40.260 --> 00:52:43.820
some functional areas to kind
of call attention to them.

00:52:43.870 --> 00:52:45.540
The first one, table views.

00:52:45.590 --> 00:52:49.340
This is another very important UI element
that we see cropping up in a lot of our

00:52:49.340 --> 00:52:52.290
apps and a lot of your apps as well.

00:52:52.510 --> 00:52:56.320
So hierarchical presentation of data
is commonly done with a table view.

00:52:56.610 --> 00:52:59.400
You can also use them just
for displaying straight lists.

00:52:59.460 --> 00:53:00.600
They're highly customizable.

00:53:00.600 --> 00:53:03.900
You can customize them
to suit your application.

00:53:03.970 --> 00:53:08.480
There's a view controller that is
associated with table views for helping

00:53:08.520 --> 00:53:11.020
manage that screen full of content.

00:53:11.940 --> 00:53:14.200
There are two sessions, again,
an introductory and a more

00:53:14.200 --> 00:53:16.760
advanced session for table views.

00:53:16.860 --> 00:53:20.110
And there's also a lab for
table views that you can go to.

00:53:21.420 --> 00:53:26.050
And then the next area is multi-touch.

00:53:26.170 --> 00:53:28.800
So as I said,
the UI views are by default single touch.

00:53:28.870 --> 00:53:31.340
If you do flip that switch
to enable multi-touch,

00:53:31.500 --> 00:53:33.360
you can do some fascinating
things with multi-touch.

00:53:33.430 --> 00:53:37.170
And I think we're just scratching the
surface of what apps will do with this.

00:53:38.130 --> 00:53:42.400
There's a couple methods in UIView that
you can override for hooking into the

00:53:42.400 --> 00:53:46.450
event processing system and getting
all the access to the details about the

00:53:46.450 --> 00:53:49.770
touches and what's going on with them.

00:53:50.070 --> 00:53:53.060
If you are going to be doing
multi-touch development,

00:53:53.100 --> 00:53:55.860
I'd suggest going to
the multi-touch session.

00:53:55.920 --> 00:53:59.110
It talks about gestures and events,
how they hook into the views,

00:53:59.220 --> 00:54:02.030
what the overall process is.

00:54:03.880 --> 00:54:10.580
The next one is a set of APIs that we
put under the umbrella of device APIs.

00:54:10.810 --> 00:54:12.240
There are three of them.

00:54:12.240 --> 00:54:15.460
The first one is the image
picker and the camera interface.

00:54:15.530 --> 00:54:20.230
This is an example of a delegate-based
API where you create the image picker,

00:54:20.500 --> 00:54:24.500
you bring it on screen,
and then the user navigates through

00:54:24.510 --> 00:54:28.250
their library or takes a picture,
and then the delegate object

00:54:28.250 --> 00:54:30.470
that you provide gets a callback.

00:54:30.830 --> 00:54:33.500
Image picker controller
did finish picking image.

00:54:33.620 --> 00:54:37.060
Here you can see an example
of one of our verbose APIs.

00:54:37.190 --> 00:54:39.100
Hopefully, did finish picking image.

00:54:39.200 --> 00:54:41.890
It's kind of clear
when that'll be called.

00:54:43.480 --> 00:54:46.610
Another device API that
we have is Core Location.

00:54:46.840 --> 00:54:49.990
So location-aware
software would use this.

00:54:50.420 --> 00:54:51.900
Again, a delegate-based API.

00:54:52.200 --> 00:54:53.560
The general idea is very simple.

00:54:53.560 --> 00:54:56.870
You turn on the location manager,
indicating you are interested

00:54:56.890 --> 00:54:58.280
in location events.

00:54:58.360 --> 00:55:01.750
And as the device gets
a new fix on a location,

00:55:01.730 --> 00:55:06.540
The delegate gets a call back,
did update to location, from location.

00:55:06.590 --> 00:55:08.140
So you're given the old
and the new position.

00:55:08.140 --> 00:55:10.270
And then you can do something with that.

00:55:11.190 --> 00:55:13.800
The third one is the accelerometer.

00:55:13.870 --> 00:55:15.760
A delegate-based API again.

00:55:15.830 --> 00:55:18.900
You turn the accelerometer on,
and then at that point,

00:55:18.950 --> 00:55:21.530
the delegate that you provide
gets this steady stream at a

00:55:21.660 --> 00:55:26.540
fixed interval that you define,
indicating what's happening with the

00:55:26.540 --> 00:55:31.100
sensor and what's being detected in
terms of the acceleration going on.

00:55:31.240 --> 00:55:33.750
So accelerometer did accelerate.

00:55:34.650 --> 00:55:37.230
There's a session that
covers the device APIs,

00:55:37.230 --> 00:55:39.980
and it goes into details like
how do you actually process the

00:55:40.100 --> 00:55:43.120
acceleration data that's given to you?

00:55:43.120 --> 00:55:46.290
Or what are the details of the
locations that are handed to your

00:55:46.320 --> 00:55:48.360
delegate when you get called back?

00:55:48.440 --> 00:55:52.190
So it's a good session to go to if
you're using some of the device APIs.

00:55:53.350 --> 00:55:56.280
And then the last one
was the address book.

00:55:56.380 --> 00:55:59.430
So if you need to integrate contact
information into your application

00:55:59.430 --> 00:56:03.600
or if you have contact-like
information that you want to present,

00:56:03.680 --> 00:56:07.960
we have two levels of API here,
a lower level and a higher level.

00:56:08.080 --> 00:56:11.680
The lower level gives you access
to the user's contact database in

00:56:11.680 --> 00:56:15.590
a structured fashion so you don't
have to write SQLite directly.

00:56:16.890 --> 00:56:21.540
You would use this if you have
contact information that you want to

00:56:21.600 --> 00:56:25.800
fill into particular fields in the
contacts database that is relevant

00:56:25.800 --> 00:56:29.960
to your application that would
be stored with a particular contact.

00:56:29.960 --> 00:56:33.910
And then the high-level APIs are
the UI pieces for allowing

00:56:33.910 --> 00:56:35.980
the user to pick a contact.

00:56:35.980 --> 00:56:37.280
There's a people picker.

00:56:39.400 --> 00:56:43.280
If you're creating new contacts,
you can show that to the user and let

00:56:43.280 --> 00:56:47.050
them add it to an existing contact
or create a new contact for it.

00:56:47.260 --> 00:56:49.920
Or if you just have contact
information that you want to

00:56:49.920 --> 00:56:53.830
display in a consistent fashion with
how we display contact information,

00:56:53.840 --> 00:56:56.800
the nice little rounded bubbles
where we have the addresses

00:56:56.800 --> 00:56:59.960
and phone numbers or whatever,
we have API for that.

00:57:02.210 --> 00:57:05.980
There's a session on Address
Book to give you all the details

00:57:05.980 --> 00:57:10.350
about how to integrate contacts and
information into your application.

00:57:12.100 --> 00:57:15.400
And so that's just a list
of a bunch of sessions.

00:57:15.460 --> 00:57:19.720
As a parting thought, I just want to say,
remember the fundamentals.

00:57:19.790 --> 00:57:21.520
Work with the frameworks,
not against them.

00:57:21.520 --> 00:57:22.860
Take that step back.

00:57:22.950 --> 00:57:25.330
Take the time to read some of
the documentation and really

00:57:25.330 --> 00:57:28.550
understand the concepts that go
into the frameworks and the designs

00:57:28.620 --> 00:57:31.000
that we've chosen to implement.

00:57:31.230 --> 00:57:33.040
Learn the designs,
the three that we covered here,

00:57:33.040 --> 00:57:35.510
Model View Controller,
so fundamental to all the

00:57:35.530 --> 00:57:40.020
designs that we have both on the
phone as well as on the desktop.

00:57:40.930 --> 00:57:44.400
Delegation,
where you can customize default

00:57:44.470 --> 00:57:48.150
behavior in the frameworks,
and target action for connecting

00:57:48.150 --> 00:57:49.430
the view to the controls.

00:57:49.440 --> 00:57:52.500
And again,
for doing iPhone app development,

00:57:52.500 --> 00:57:54.400
use the view controllers.

00:57:54.400 --> 00:57:56.940
There's a ton of functionality
in the view controller

00:57:56.940 --> 00:57:58.430
layer that you get for free.

00:57:58.440 --> 00:58:03.100
We found as we developed our apps,
we would do the same thing over and over,

00:58:03.100 --> 00:58:06.560
and actually we have a rule of three,
that on the third time we do it,

00:58:06.560 --> 00:58:07.830
we stop and we factor it out.

00:58:08.830 --> 00:58:11.960
So we've done that factoring,
and now all of that existing

00:58:11.970 --> 00:58:15.440
behavior that's so generic to so
many apps is just there for you

00:58:15.440 --> 00:58:17.560
to use through view controllers.

00:58:19.670 --> 00:58:22.320
So for more information that
you didn't get from here or

00:58:22.320 --> 00:58:25.300
in the labs that you'll go to,
you can contact Derek Horn,

00:58:25.300 --> 00:58:28.360
our application technologies evangelist.

00:58:29.490 --> 00:58:31.160
And with that,
I'd just like to say thank you.

00:58:31.250 --> 00:58:32.540
Have a great week.

00:58:32.810 --> 00:58:36.460
The engineers at Apple are thrilled to
see the apps that you guys are making.

00:58:36.460 --> 00:58:38.830
We are seeing awesome
applications come out.

00:58:38.960 --> 00:58:41.980
We're really excited to see what you
do with the frameworks we provide.

00:58:41.980 --> 00:58:45.520
We're really interested in meeting you
in the labs and talking one-on-one.

00:58:45.520 --> 00:58:47.180
So have a great week at WWDC.

00:58:47.180 --> 00:58:48.430
Thank you very much.