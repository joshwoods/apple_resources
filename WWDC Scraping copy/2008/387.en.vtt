WEBVTT

00:00:20.310 --> 00:00:23.740
So welcome to Text Input on iPhone.

00:00:23.780 --> 00:00:25.890
I'm Ken Kocienda.

00:00:26.090 --> 00:00:27.550
And let's get started.

00:00:27.660 --> 00:00:33.670
So you've got your
terrific iPhone and you

00:00:33.910 --> 00:00:34.250
Start it up.

00:00:34.470 --> 00:00:36.280
Start up one of the apps on the iPhone.

00:00:36.320 --> 00:00:40.260
Say something like SMS.

00:00:41.570 --> 00:00:44.560
Safari,
you do a search or enter in a URL,

00:00:44.560 --> 00:00:48.860
or you go into Maps and
you type in a map location,

00:00:48.880 --> 00:00:53.580
or you're in Contacts and you enter
in a phone number for somebody.

00:01:18.090 --> 00:01:18.090
So, what's the common task
in all of these things?

00:01:18.090 --> 00:01:18.090
Well, it's the keyboard and text input.

00:01:18.090 --> 00:01:18.090
So, during this session,
that's what we're going

00:01:18.090 --> 00:01:18.090
to be talking about.

00:01:18.090 --> 00:01:18.090
I got out my purple crayon
just so that we could kind of

00:01:18.090 --> 00:01:18.090
really focus in on that area,
the keyboard and text input.

00:01:18.090 --> 00:01:18.090
So,
that's what it's all going to be about,

00:01:18.090 --> 00:01:18.090
text input on iPhone.

00:01:18.550 --> 00:01:21.770
And here is really an overview
of everything I'd like to

00:01:21.770 --> 00:01:23.930
cover during this session.

00:01:24.030 --> 00:01:27.760
So to start off,
we'll be looking at text input on

00:01:27.860 --> 00:01:33.450
iPhone from a user perspective,
okay, as you are using the phone,

00:01:33.450 --> 00:01:35.640
interacting with the applications.

00:01:35.740 --> 00:01:40.230
And then I'd like to change
over from that and look at

00:01:40.230 --> 00:01:43.070
what you can do as developers.

00:01:43.120 --> 00:01:45.670
Look at things from the
developer perspective,

00:01:45.670 --> 00:01:48.940
what the big pieces are,
and how you start hooking things

00:01:48.940 --> 00:01:52.180
up so that you can take advantage
of all the features that we've got

00:01:52.180 --> 00:01:53.920
on the platform for text input.

00:01:53.920 --> 00:01:57.290
And then after this,
we'll be going over some examples,

00:01:57.290 --> 00:01:59.900
be looking at some code,
and then finally,

00:01:59.930 --> 00:02:03.260
I'd like to look at some things
that sort of go beyond those

00:02:03.260 --> 00:02:05.000
very first steps and tips.

00:02:05.720 --> 00:02:08.620
And tricks,
so that you really get going and take

00:02:08.620 --> 00:02:13.200
advantage of what we've got and get
started making your own applications.

00:02:13.500 --> 00:02:17.620
So if you look at things,
I can't go back to this for a second,

00:02:18.010 --> 00:02:21.210
look now from the user perspective first.

00:02:21.400 --> 00:02:24.100
The question that you
might ask yourself first,

00:02:24.190 --> 00:02:27.210
if you've never seen an iPhone
or you've picked it up for

00:02:27.280 --> 00:02:30.530
the first time in the store,
is that, you ask yourself,

00:02:30.640 --> 00:02:33.150
how does it work,
and what are the features?

00:02:33.290 --> 00:02:37.140
It's a different text input system
than it is available naturally in a

00:02:37.210 --> 00:02:40.160
computer and certainly other cell phones.

00:02:40.920 --> 00:02:42.430
So let's go over that a little bit.

00:02:42.460 --> 00:02:46.090
The first thing, of course,
you'd notice is that the keyboard is

00:02:46.290 --> 00:02:48.520
virtual and that it appears when needed.

00:02:48.540 --> 00:02:49.260
Okay?

00:02:49.260 --> 00:02:53.050
Whenever you sort of go from
an application into a situation

00:02:53.150 --> 00:02:56.010
where you need to enter text,
the keyboard appears.

00:02:56.080 --> 00:02:59.700
Naturally, when you turn the phone
into landscape mode,

00:02:59.700 --> 00:03:01.340
the keyboard appears.

00:03:01.530 --> 00:03:05.280
In landscape mode,
we've got portrait and landscape

00:03:05.280 --> 00:03:08.180
keyboards for all of our languages.

00:03:08.180 --> 00:03:09.610
Okay?

00:03:10.140 --> 00:03:14.710
You then note if you,
once you've got some text typed in, that,

00:03:14.710 --> 00:03:17.060
well,
we've got a very simple selection model.

00:03:17.060 --> 00:03:21.330
You use this text loop or magnifier
to move the insertion point

00:03:21.680 --> 00:03:25.580
around to make a correction,
move to someplace else.

00:03:25.630 --> 00:03:27.900
So a very simple selection model.

00:03:29.100 --> 00:03:33.840
Okay, we've got many keyboard types here,
and that those keyboard types

00:03:33.940 --> 00:03:35.580
are adapted to the task at hand.

00:03:35.720 --> 00:03:40.680
Here, you see just an SMS,
a sort of free-form text situation,

00:03:40.890 --> 00:03:44.460
right,
just a plain sort of QWERTY keyboard.

00:03:45.290 --> 00:03:48.150
If you go over into
Safari and you enter in a URL,

00:03:48.150 --> 00:03:53.180
you'll see that that area on the bottom,
right, changes from the space bar.

00:03:53.180 --> 00:03:56.210
It divides up into the three
keys that are really going to

00:03:56.210 --> 00:03:57.880
be optimized for entering text.

00:03:58.600 --> 00:04:03.460
And you also notice that the return key,
right, changes from return to go, really,

00:04:03.460 --> 00:04:05.140
again, adapted to the task.

00:04:05.140 --> 00:04:08.320
Email, very similar situation.

00:04:08.320 --> 00:04:12.600
Those keys on the bottom are adapted
then to typing in an email address,

00:04:12.600 --> 00:04:14.030
space, add, and dot.

00:04:15.270 --> 00:04:20.160
Okay, this is a keyboard also optimized
for typing in phone numbers,

00:04:20.190 --> 00:04:20.960
okay?

00:04:20.960 --> 00:04:23.050
And we've also got a
couple different looks,

00:04:23.140 --> 00:04:24.740
actually two different looks.

00:04:24.740 --> 00:04:29.410
The standard ones that we've seen,
sort of that standard blue look,

00:04:29.470 --> 00:04:33.390
but then this is a look
that is suitable for alerts.

00:04:34.190 --> 00:04:36.180
Okay, so type in a password as an alert.

00:04:36.230 --> 00:04:37.300
You just get that keyboard.

00:04:37.300 --> 00:04:40.080
And then, of course,
we've got this really sort of

00:04:40.080 --> 00:04:43.300
highlights the fact that these
alert keyboards are translucent.

00:04:43.340 --> 00:04:46.960
Some of the content from
behind can show on through.

00:04:46.960 --> 00:04:50.730
So we've got a whole number
of keyboards available,

00:04:50.820 --> 00:04:53.400
and they adapt to the task at hand.

00:04:53.400 --> 00:04:57.160
Now, changing from that to
where the text is going.

00:04:57.160 --> 00:05:01.360
Okay,
so we've got single line editing fields.

00:05:01.550 --> 00:05:04.400
We've got multi-line editing fields,
right?

00:05:04.710 --> 00:05:09.640
And one thing that is worth
pointing out in this situation here,

00:05:09.640 --> 00:05:13.420
there's only one text
style per container.

00:05:13.590 --> 00:05:17.060
So if you've got a text
view or a text field,

00:05:17.060 --> 00:05:22.410
right, just one style in there,
one font at one size.

00:05:22.720 --> 00:05:26.700
There are also quite a
number of settings available.

00:05:26.700 --> 00:05:28.970
So if you go into the
Settings application and go and

00:05:28.970 --> 00:05:32.240
click on the keyboard section,
we've got a couple of controls there

00:05:32.290 --> 00:05:37.290
that can change the behavior of text
input in subtle but useful ways.

00:05:37.340 --> 00:05:41.290
And then if you click through,
you'll see that we've got this long list

00:05:41.370 --> 00:05:45.760
of keyboards and input methods available
for a wide variety of languages.

00:05:46.310 --> 00:05:51.120
It's really very exciting to announce
that we've got support now in iPhone

00:05:51.230 --> 00:05:56.250
OS 2.0 for 20 different languages,
and that there's full

00:05:56.250 --> 00:05:58.840
dictionary support for each.

00:05:58.840 --> 00:06:02.180
And that is new for iPhone OS 2.0.

00:06:02.180 --> 00:06:05.970
And here is the full list of
languages that we have available.

00:06:05.980 --> 00:06:09.320
Hopefully, there's no Klingon up there,
so I don't know if you

00:06:09.320 --> 00:06:11.910
need to squint to see it,
but we've got a nice full

00:06:11.910 --> 00:06:13.740
list of languages available.

00:06:14.070 --> 00:06:16.160
Hopefully,
one of those will be available.

00:06:16.220 --> 00:06:17.220
And that will be your favorite.

00:06:17.230 --> 00:06:21.570
Now, about the keyboards themselves.

00:06:21.950 --> 00:06:27.680
So now we've got English standard,
QWERTY keyboard standard for English.

00:06:27.680 --> 00:06:32.160
We've got French,
a XERTY keyboard standard for French.

00:06:32.340 --> 00:06:34.290
We've also got a lot of
support for languages.

00:06:34.340 --> 00:06:36.630
You'll notice that as we
switch to the Swedish keyboard,

00:06:36.630 --> 00:06:41.310
the return key and the space key change
to be in the appropriate language

00:06:41.410 --> 00:06:43.810
for the text that's being input.

00:06:44.050 --> 00:06:45.390
We've also got Russian support.

00:06:45.530 --> 00:06:51.650
We've got a Cyrillic keyboard now,
support for Korean text input.

00:06:52.240 --> 00:06:55.280
And that really sort of covers the
different keyboard options that we have.

00:06:55.340 --> 00:06:58.410
But of course,
some languages really sort of need more

00:06:58.410 --> 00:07:00.600
help than just a standard keyboard.

00:07:00.600 --> 00:07:03.530
You really need sort
of a full input method,

00:07:03.550 --> 00:07:08.440
and we have that also
available now on iPhone OS 2.0.

00:07:28.340 --> 00:07:28.480
And that really sort of covers the
different keyboard options that we have.

00:07:28.480 --> 00:07:28.480
But of course,
some languages really sort of need more

00:07:28.480 --> 00:07:28.480
help than just a standard keyboard.

00:07:28.480 --> 00:07:28.480
You really need sort
of a full input method,

00:07:28.480 --> 00:07:28.480
and we have that also
available now on iPhone OS 2.0.

00:07:29.400 --> 00:07:34.460
We have Chinese pinyin, and we have,
it's very, very exciting,

00:07:34.500 --> 00:07:39.270
Chinese handwriting recognition,
both for simplified and traditional.

00:07:39.640 --> 00:07:44.460
So what I'd like to do is to just give
you a quick demo of some of those things

00:07:44.860 --> 00:07:46.860
in case you've not seen it before.

00:07:46.970 --> 00:07:49.580
So if you can go to the demo machine.

00:07:55.500 --> 00:09:34.400
[Transcript missing]

00:09:35.560 --> 00:09:40.020
You'll see here now that as
I type the phonetics for Tokyo,

00:09:40.020 --> 00:09:41.640
it comes up as the candidate.

00:09:41.640 --> 00:09:42.390
I can click it.

00:09:42.600 --> 00:09:44.600
And then there's another
wonderful feature here,

00:09:44.600 --> 00:09:49.260
which is after I've typed Tokyo,
it gives me an option for, well,

00:09:49.260 --> 00:09:52.180
what are some things that
would follow on after Tokyo?

00:09:52.180 --> 00:09:53.870
I don't know how well
you can see in the back,

00:09:54.040 --> 00:09:55.240
but I've accepted the Tokyo.

00:09:55.240 --> 00:09:59.600
And then the first suggestion
here is for station.

00:09:59.600 --> 00:10:02.020
So maybe I want to talk
about Tokyo station,

00:10:02.150 --> 00:10:05.450
go and catch a train
to meet up with Tokyo.

00:10:05.520 --> 00:10:08.390
some people, something like that.

00:10:09.480 --> 00:10:14.840
Okay, and then lastly, I would like to,
oh, maybe before lastly here,

00:10:14.840 --> 00:10:19.150
just show you a very,
very little bit about

00:10:19.150 --> 00:10:21.490
Japanese KANA input.

00:10:21.750 --> 00:10:28.440
Maybe an example like, like, like, yeah,
here, a single character.

00:10:28.440 --> 00:10:32.320
And then, let me just go back and
go over that more slowly.

00:10:32.320 --> 00:10:35.780
So now I've got this one syllable.

00:10:35.780 --> 00:10:38.930
Now, naturally,
there are a large number of characters,

00:10:38.930 --> 00:10:41.420
which might be the one
that I'm looking for.

00:10:41.750 --> 00:10:48.640
And so we've got this expanded candidate
user interface in case the character that

00:10:48.750 --> 00:10:53.340
I was looking for did not appear in those
first couple of choices under the text

00:10:53.340 --> 00:10:55.580
input right as I typed in the character.

00:10:55.580 --> 00:10:59.520
So you see here I've got
quite a number of characters.

00:10:59.520 --> 00:11:04.380
Sure,
eight is the one that I was looking for.

00:11:05.570 --> 00:11:08.360
Okay, and then lastly,
it's going to be a little bit hard doing

00:11:08.360 --> 00:11:11.840
it with the mouse in the simulator,
but you'll see that even so,

00:11:12.000 --> 00:11:15.120
that with Chinese...

00:11:15.350 --> 00:11:19.640
Handwriting recognition that even
with the mouse it recognizes the

00:11:19.640 --> 00:11:21.200
character that I'm looking for.

00:11:21.410 --> 00:11:24.390
Middle,
and again similar to Japanese text input,

00:11:24.680 --> 00:11:29.800
we've got these suggestions which come
after you choose and confirm a candidate.

00:11:29.800 --> 00:11:32.830
Here I can go very,
very easily and type in the three

00:11:32.830 --> 00:11:34.800
characters for Chinese person.

00:11:34.980 --> 00:11:39.600
Okay, by just typing in the one character
and then choosing the selections

00:11:39.600 --> 00:11:42.140
from those follow-on suggestions.

00:11:45.900 --> 00:11:47.440
Okay.

00:11:47.600 --> 00:11:53.000
Can we go back to the slides then,
please?

00:11:53.370 --> 00:11:57.370
So from the user perspective,
here are just some of those

00:11:57.370 --> 00:11:59.580
top ideas that will come up.

00:11:59.580 --> 00:12:03.480
What do you think about when you
think about the text input and the

00:12:03.660 --> 00:12:06.040
keyboard experience on the iPhone?

00:12:06.040 --> 00:12:08.960
Well, first of all,
the keyboard appears when it's needed.

00:12:08.960 --> 00:12:10.640
It's adapted to the task at hand.

00:12:10.660 --> 00:12:15.640
Hopefully it supports your language,
so I support for several languages there.

00:12:16.240 --> 00:12:19.150
And then,
as I highlighted in particular for

00:12:19.150 --> 00:12:23.790
the new Asian language support,
how it provides assistance to you.

00:12:23.800 --> 00:12:26.270
Not only assistance in
recognizing your handwriting,

00:12:26.280 --> 00:12:30.580
but then assistance in following on,
helping you enter in the

00:12:30.750 --> 00:12:32.810
text that you want to enter.

00:12:33.540 --> 00:12:36.490
And then, of course,
it should also be clear to you,

00:12:36.630 --> 00:12:39.140
hopefully that's one of the
reasons why you're here,

00:12:39.140 --> 00:12:41.770
is you think that text input is
essential to your application,

00:12:41.780 --> 00:12:45.920
whether it be Mail, Safari, those really,
really popular built-in applications.

00:12:45.920 --> 00:12:50.330
But then, of course, your application,
the applications that we hope to see

00:12:50.330 --> 00:12:54.590
from you after you leave this conference
and go back and start getting busy,

00:12:54.700 --> 00:12:55.800
getting to work.

00:12:57.830 --> 00:13:00.870
So with that as an overview
of just give you a little,

00:13:00.870 --> 00:13:04.600
you know, a view of what those new
features are if you've not seen

00:13:04.600 --> 00:13:07.740
them yet for iPhone OS 2.0,
just cover those from

00:13:07.740 --> 00:13:08.900
the user perspective.

00:13:08.900 --> 00:13:12.340
Now changing over to the
developer perspective,

00:13:12.390 --> 00:13:15.760
to your perspective,
as you're going to be making

00:13:15.760 --> 00:13:18.150
use of all of these features,
well,

00:13:18.150 --> 00:13:21.040
the question that you have to be asking,
well, how do I control all this?

00:13:22.930 --> 00:13:26.320
Well, first of all,
I'd like to say before we sort of

00:13:26.320 --> 00:13:30.910
dip into what these features are,
there are some things that, well,

00:13:30.910 --> 00:13:34.640
the frameworks and the system
will do for you automatically,

00:13:34.750 --> 00:13:36.440
like this keyboard animation.

00:13:36.440 --> 00:13:39.100
Sort of a typical
scenario in application.

00:13:39.100 --> 00:13:40.360
Application is notes here.

00:13:40.360 --> 00:13:44.720
If we go and click on that Done button
in the upper part of the screen,

00:13:44.720 --> 00:13:46.380
you click on the Done button,
the keyboard will just

00:13:46.460 --> 00:13:47.520
animate out automatically.

00:13:47.600 --> 00:13:49.570
That's not anything that
you need to worry about.

00:13:49.900 --> 00:13:52.900
The keyboard comes and
goes as it's needed.

00:13:52.900 --> 00:13:56.800
We'll talk about that in some
detail as we go later on.

00:13:57.230 --> 00:13:59.340
Another important thing to point out...

00:14:00.630 --> 00:14:04.710
is that there are aspects of the
system that are not under your control.

00:14:04.850 --> 00:14:09.600
And really, a couple of these settings
here are good examples of that.

00:14:09.690 --> 00:14:13.020
But really, most importantly,
it's the language and the input method.

00:14:13.020 --> 00:14:14.840
That's under your user's control.

00:14:14.840 --> 00:14:18.030
So there is no programmatic
way to say you must use

00:14:18.240 --> 00:14:23.040
Chinese handwriting here or you must
use English or anything like that.

00:14:23.260 --> 00:14:26.220
The language and the input method,
and it's particularly important

00:14:26.310 --> 00:14:28.950
for those languages that have
more than one input method,

00:14:29.010 --> 00:14:35.310
as we saw, like with Japanese,
that is always under the user's control.

00:14:36.030 --> 00:14:38.940
Okay, so then what is under your control?

00:14:38.940 --> 00:14:43.610
Now to talk about that,
I'd really like to focus the discussion

00:14:43.950 --> 00:14:47.340
on the text containers themselves.

00:14:47.340 --> 00:14:49.000
So what do I mean by text containers?

00:14:49.000 --> 00:14:52.780
Well, things like the single line
editing field that you'll see

00:14:52.780 --> 00:14:54.920
on the top of many applications.

00:14:54.920 --> 00:14:59.050
That is a UI text field,
and that's a standard class in

00:14:59.180 --> 00:15:01.730
UIKit for single line editing.

00:15:02.200 --> 00:15:06.470
Okay, for multi-line editing,
as you'll see in notes, UI text view.

00:15:06.470 --> 00:15:09.580
That's the class in
UIKit for multi-line editing.

00:15:11.770 --> 00:15:12.530
OK?

00:15:12.600 --> 00:15:17.700
And then also, really,
we have some amount of control also

00:15:18.000 --> 00:15:22.420
over form input elements in web pages.

00:15:22.500 --> 00:15:28.680
So those also sort of count as the
text input or the text container

00:15:29.130 --> 00:15:31.160
form input elements in web pages.

00:15:31.310 --> 00:15:32.160
So text containers.

00:15:32.160 --> 00:15:35.500
Now, if we sort of take a
look inside of these,

00:15:36.220 --> 00:15:39.100
Here's really where we start
getting into the developer control,

00:15:39.100 --> 00:15:42.950
what you have available to
you to sort of make what you

00:15:43.050 --> 00:15:45.840
will of these text containers.

00:15:45.840 --> 00:15:48.910
And really, for those of you who are
familiar with Cocoa programming,

00:15:48.940 --> 00:15:50.740
this will seem very, very familiar.

00:15:50.740 --> 00:15:53.580
These classes are Objective-C classes.

00:15:53.580 --> 00:15:54.760
They're UI kit classes.

00:15:54.760 --> 00:15:57.780
And the way that you manipulate
them is mostly delegates,

00:15:57.860 --> 00:15:59.590
notifications, and methods.

00:15:59.660 --> 00:16:02.840
Again, very,
very familiar to Cocoa developers.

00:16:02.840 --> 00:16:05.970
And to those of you who are new to Cocoa,
I'm sure you're hearing a lot about

00:16:05.970 --> 00:16:07.940
these kinds of things in other sessions.

00:16:07.940 --> 00:16:10.080
So that's really pretty standard.

00:16:11.560 --> 00:16:16.640
But then what's new and different for
text input on the iPhone are these

00:16:16.640 --> 00:16:20.210
things called text input traits.

00:16:20.300 --> 00:16:21.870
What are those text input traits?

00:16:22.020 --> 00:16:26.740
Well, text input traits are represented
by a protocol in UIKit.

00:16:26.800 --> 00:16:32.900
And that protocol is conformed to
by UI text field and UI text view.

00:16:32.900 --> 00:16:38.130
So they both adopt this protocol,
UI text input traits.

00:16:38.290 --> 00:16:40.360
And here's what these
text input traits are.

00:16:40.360 --> 00:16:45.750
There are these aspects of text editing,
sort of the characteristics of a text

00:16:45.750 --> 00:16:51.960
input container that then sort of adapt
and change what the keyboard does and

00:16:51.960 --> 00:16:56.140
what the text input experience is.

00:16:56.140 --> 00:16:59.490
This is really the way that,
if you remember those slides that

00:16:59.570 --> 00:17:03.260
I showed before about how the
keyboard adapts to the task at hand,

00:17:03.620 --> 00:17:08.010
well, this is really your main
control for making that happen.

00:17:08.680 --> 00:17:12.360
text input traits.

00:17:12.420 --> 00:17:16.190
And so here's an example of
text input traits in action.

00:17:16.520 --> 00:17:18.130
You're in Safari.

00:17:18.220 --> 00:17:21.240
And you click up on the URL bar,
and you'll notice that

00:17:21.300 --> 00:17:24.440
when the keyboard appears,
that it shows the space bar.

00:17:24.440 --> 00:17:27.160
In place of the space bar,
it has the special function keys,

00:17:27.490 --> 00:17:29.740
the dot, the slash, and the dot com.

00:17:29.770 --> 00:17:35.380
And that the return key turns
from return into a Go button.

00:17:35.410 --> 00:17:38.290
What's really good about this view is
that if you then just go and click in

00:17:38.290 --> 00:17:43.790
that Google field right beneath it,
naturally the keyboard changes.

00:17:44.180 --> 00:17:47.860
Sort of back to the default keyboard,
back to the regular space bar,

00:17:47.890 --> 00:17:52.220
but then the return key changes
to be a search specific button,

00:17:52.220 --> 00:17:54.210
in this case Google.

00:17:55.330 --> 00:18:01.530
Okay, so now those are really the pieces
that are under your control for

00:18:01.600 --> 00:18:05.830
sort of starting to get into
this text input system and making

00:18:05.830 --> 00:18:08.240
it work for your application.

00:18:08.240 --> 00:18:14.480
Okay, so now you start, you know,
if we want to start now thinking about,

00:18:14.480 --> 00:18:17.040
well, what's the process for
using these things?

00:18:17.040 --> 00:18:21.610
Well, one of the interesting things that
we realized as we were putting

00:18:21.610 --> 00:18:27.460
this system together is that really
designing your text input is really,

00:18:27.460 --> 00:18:29.710
is a design time activity.

00:18:29.720 --> 00:18:32.580
It's something that you do in Xcode,
in Interface Builder,

00:18:32.580 --> 00:18:35.590
as you're building your application,
as you're designing how

00:18:35.590 --> 00:18:37.030
it looks and how it works.

00:18:37.040 --> 00:18:38.420
Okay?

00:18:38.420 --> 00:18:43.730
And so let's take the example
of wanting to make a URL field

00:18:43.730 --> 00:18:46.940
like is in Safari that has a URL.

00:18:47.130 --> 00:18:48.390
And so you're going to have
a button and a go button.

00:18:48.400 --> 00:18:53.050
So you put this together either in Xcode,
in code, by writing the code,

00:18:53.050 --> 00:18:56.450
or in Interface Builder by
using Interface Builder's

00:18:56.450 --> 00:18:58.380
inspectors to set that up.

00:18:58.480 --> 00:19:03.310
Now, at runtime, after you've built this
and you've debugged it,

00:19:03.560 --> 00:19:08.370
and now you've started up that app,
now at runtime, when that text field

00:19:08.510 --> 00:19:12.940
becomes first responder,
right, when the user indicates that, yes,

00:19:12.940 --> 00:19:15.820
this is the thing that
I want to be in focus,

00:19:15.820 --> 00:19:19.430
right, that first responder, terminology,
I don't know, folks who are new to Cocoa,

00:19:19.430 --> 00:19:20.680
don't let that throw you.

00:19:20.680 --> 00:19:22.970
All that means is that I've
clicked in that text field,

00:19:23.070 --> 00:19:25.820
and I'm going to get the little
blinking insertion point there,

00:19:25.900 --> 00:19:28.500
yeah, now, and, right,
the user has indicated that that's

00:19:28.500 --> 00:19:30.130
the thing they want to look at.

00:19:30.190 --> 00:19:33.930
Now, what just happened when that text
field became first responder,

00:19:34.050 --> 00:19:34.520
right?

00:19:34.540 --> 00:19:37.990
Text field becomes first responder,
and the keyboard automatically appears.

00:19:39.810 --> 00:19:45.690
And then that process of those text
fields and the keyboard hookup finishes,

00:19:45.690 --> 00:19:51.650
and the keyboard will adopt those traits
that we've assigned to that text field.

00:19:51.780 --> 00:19:55.800
And so, yes, again, right,
in this situation,

00:19:55.800 --> 00:20:00.900
that's how the space bar changes
to those special function keys,

00:20:00.900 --> 00:20:03.970
and that's how the return
key takes on that go label,

00:20:04.180 --> 00:20:06.200
right, by doing those traits.

00:20:06.270 --> 00:20:08.530
And again, right, same thing here.

00:20:08.780 --> 00:20:11.480
By clicking down,
you change the first responder,

00:20:11.480 --> 00:20:14.290
you change the area of user focus,
and of course,

00:20:14.310 --> 00:20:16.290
the keyboard will adapt accordingly.

00:20:16.300 --> 00:20:17.620
Okay?

00:20:17.620 --> 00:20:23.470
So here are the three main pieces,
text field, text view, and web forms,

00:20:23.710 --> 00:20:28.280
and the four sort of main
pieces of developer control.

00:20:29.680 --> 00:20:41.300
So, there is just a very quick overview
of what you've got at your disposal to

00:20:41.300 --> 00:20:41.310
start making text input work for you.

00:20:43.230 --> 00:20:47.310
What I'd like to do next is take
a look at some common tasks.

00:20:47.650 --> 00:20:51.800
How do we really put this
into action in a real example?

00:20:55.910 --> 00:20:57.640
Okay.

00:20:57.810 --> 00:21:01.490
So to do that,
I'd like to give two quick demos.

00:21:01.770 --> 00:21:08.540
What is going to be a UI text field demo,
and then we'll have a quick web demo.

00:21:08.810 --> 00:21:11.090
So now, about this UI text field demo.

00:21:11.100 --> 00:21:11.540
What is it?

00:21:11.540 --> 00:21:13.100
What am I going to show you?

00:21:13.180 --> 00:21:15.500
Well,
I'm going to show you an application,

00:21:15.590 --> 00:21:17.550
very, very simple application
that looks like this.

00:21:17.550 --> 00:21:23.040
It's got a text field on top and sort
of just this color field beneath it.

00:21:23.140 --> 00:21:26.590
And what I'd like to do is that
when I click into that text

00:21:26.920 --> 00:21:30.920
field and type a color into it,
that then the field beneath it will

00:21:30.920 --> 00:21:35.670
change to correspond to that color,
either red or blue, so forth.

00:21:38.330 --> 00:21:41.400
OK, so now let's take a look at that.

00:21:49.390 --> 00:21:54.730
Okay, so let me just sort of start
up this demo first here.

00:21:55.100 --> 00:22:00.280
Now, it doesn't work right now exactly
as I showed in the slides.

00:22:00.390 --> 00:22:03.480
There is actually a text field there,
but it's sort of not showing up,

00:22:03.600 --> 00:22:09.400
and it's not really going to look and
feel and sort of be as easy to use or

00:22:09.400 --> 00:22:12.450
as helpful as we saw in the slides.

00:22:12.450 --> 00:22:17.330
So let's take a look at how
to really make that happen.

00:22:17.680 --> 00:22:23.070
Okay,
so really here is pretty much all of

00:22:23.180 --> 00:22:28.000
the code in the application so far.

00:22:28.000 --> 00:22:32.430
But you saw that the text
field when I was running the

00:22:32.500 --> 00:22:35.600
application didn't show up.

00:22:35.770 --> 00:22:40.110
And so I've got a couple of snippets of
code here that I'm going to add in that

00:22:40.110 --> 00:22:42.550
are going to help us out a little bit.

00:22:43.350 --> 00:22:46.550
Okay, now thinking back to that slide
that we've got methods and delegates

00:22:46.550 --> 00:22:48.720
and notifications and traits,
right,

00:22:48.720 --> 00:22:52.790
as our main pieces that we've got for
developer control over these things.

00:22:52.860 --> 00:22:56.710
Well, here's an example of using
some methods on UI text field.

00:22:56.720 --> 00:23:02.280
Okay, so I'm changing the border around
the field to make it a bezel,

00:23:02.660 --> 00:23:04.220
make it visible.

00:23:05.090 --> 00:23:08.880
I'm also adding a placeholder,
a little piece of descriptive text

00:23:08.980 --> 00:23:12.630
that will show up in the field when
the field isn't active or when there's

00:23:12.740 --> 00:23:16.720
no text in it to sort of help the user,
prompt the user for what kind of

00:23:17.300 --> 00:23:20.830
information should really go in there.

00:23:20.910 --> 00:23:25.520
And then I've also used another method
on UI text field to set a clear button.

00:23:25.710 --> 00:23:30.010
So that just is sort of automatic
feature that's available as part of

00:23:30.150 --> 00:23:31.360
UIKit so that you don't have to do it.

00:23:31.460 --> 00:23:35.390
Sort of a common piece of functionality
we've built in a little clear button.

00:23:37.570 --> 00:23:42.640
Okay, so let me just build and run
this to show that we're getting a

00:23:42.640 --> 00:23:45.300
little bit closer to where we want.

00:23:45.800 --> 00:23:49.080
So now that field is visible, and again,
I've got that placeholder in there.

00:23:49.080 --> 00:23:50.940
I click into the field.

00:23:50.970 --> 00:23:51.880
I type something.

00:23:51.880 --> 00:23:53.330
The clear button shows up.

00:23:53.470 --> 00:23:57.010
I can click the clear button,
and the text goes away.

00:23:57.010 --> 00:23:57.790
So great.

00:23:57.800 --> 00:23:59.350
So that's making some good progress.

00:23:59.360 --> 00:24:03.360
So now the next thing that I'd like
to do is point out that I've also

00:24:03.490 --> 00:24:07.790
taken advantage of some of the traits
that are available on the text field.

00:24:07.900 --> 00:24:15.050
I've picked out a couple of traits that
control the auto-correction behavior

00:24:15.100 --> 00:24:18.360
and the auto-capitalization behavior,
sort of these assistive

00:24:18.580 --> 00:24:19.740
bits of technology here.

00:24:20.020 --> 00:24:23.010
This is just an example
of me turning them off.

00:24:23.260 --> 00:24:26.770
Okay, so if that's something that is
important to your application,

00:24:26.800 --> 00:24:30.330
a lot of times use cases things
like entering in URLs or,

00:24:30.330 --> 00:24:33.540
you know,
maybe if you have a license code for,

00:24:33.540 --> 00:24:36.440
you know, an application or something,
something that's free-form text

00:24:36.440 --> 00:24:39.630
but isn't anything that really
the dictionary could guess at,

00:24:39.630 --> 00:24:43.300
you can turn off auto-correction
or auto-capitalization like that.

00:24:43.380 --> 00:24:44.530
Okay.

00:24:44.770 --> 00:24:49.120
Now, one other trait that's illustrated
there is auto-enabling the return key.

00:24:49.120 --> 00:24:52.850
So now when a text field is empty,
this will actually disable the

00:24:52.970 --> 00:24:55.910
return key so that pressing
it just won't do anything.

00:24:55.920 --> 00:25:01.100
And you'll see that now I've
changed the return key to go.

00:25:01.100 --> 00:25:04.940
So let's just sort of go back to
the application as it's running,

00:25:04.940 --> 00:25:09.380
and you'll see that the return key
is disabled with no text in it.

00:25:09.860 --> 00:25:15.630
Now it enables as soon
as I type a character.

00:25:15.630 --> 00:25:15.630
Click the clear button,
it disables again.

00:25:17.720 --> 00:25:21.240
Okay, and then lastly, what I've said,
I'm now setting this up for delegation.

00:25:21.240 --> 00:25:25.590
So this object,
this sort of application delegate

00:25:25.590 --> 00:25:29.070
here is now going to be the
delegate of that text field,

00:25:29.070 --> 00:25:32.810
and that's just sort of setting
us up for some later work.

00:25:32.920 --> 00:25:35.870
So now, what part is that later
work going to play?

00:25:35.870 --> 00:25:39.560
Well, you'll see that if I actually
type red in here and click go,

00:25:39.560 --> 00:25:41.400
well, nothing happens.

00:25:41.400 --> 00:25:45.440
And it's actually two bits
of nothing happen there.

00:25:45.890 --> 00:25:48.420
Well, first of all,
I clicked the go button,

00:25:48.420 --> 00:25:50.200
and we didn't go, right?

00:25:50.200 --> 00:25:53.180
And second of all,
I typed in a color that the

00:25:53.420 --> 00:25:58.610
application should recognize by design,
but the field is still gray.

00:25:58.610 --> 00:26:03.580
Okay,
so now let's go and take care of that.

00:26:06.860 --> 00:26:10.260
So now back in my example code,
I've got a couple of other

00:26:10.600 --> 00:26:12.000
little snippets here.

00:26:12.010 --> 00:26:16.680
One for setting up a couple of delegates.

00:26:17.760 --> 00:26:22.450
Okay, so now I've got two delegates,
one that is going to respond,

00:26:22.710 --> 00:26:25.690
that's going to,
the delegate is going to get

00:26:25.690 --> 00:26:30.520
this callback when the user hits
the return key in a text field.

00:26:31.300 --> 00:26:34.410
And another,
or I should point out in that delegate,

00:26:34.450 --> 00:26:37.770
one of the important things that I do,
one of the two important

00:26:37.770 --> 00:26:40.480
things that I do,
and there are two lines of code,

00:26:40.590 --> 00:26:42.400
is that I resign first responder.

00:26:42.400 --> 00:26:45.610
Okay, so this is just a method
that's on UI responder,

00:26:45.620 --> 00:26:48.120
UI text field subclasses UI responder.

00:26:48.120 --> 00:26:50.730
This is the way to make
the keyboard go away.

00:26:50.760 --> 00:26:54.410
Okay, the keyboard appearance
is again automatic,

00:26:54.540 --> 00:26:59.200
and it's tied to whether a text
container is the first responder.

00:27:00.150 --> 00:27:05.460
So here, by clicking the return button,
you resign first responder,

00:27:05.530 --> 00:27:06.570
the keyboard goes away.

00:27:06.580 --> 00:27:08.700
Okay, very, very simple to do.

00:27:08.700 --> 00:27:09.940
This is how you do it.

00:27:11.820 --> 00:27:13.540
Okay,
and then next I've just got a little bit

00:27:13.540 --> 00:27:17.580
of processing after the field end goes,
go and read out the value of the text

00:27:17.660 --> 00:27:23.210
field and do some sort of trivial
little string matching and set the

00:27:23.210 --> 00:27:24.990
color of that field appropriately.

00:27:25.040 --> 00:27:28.650
So let's actually build
and run this version.

00:27:30.270 --> 00:27:32.470
Okay,
so now I click up in the text field.

00:27:32.760 --> 00:27:34.580
Naturally, again,
you see that the keyboard

00:27:34.580 --> 00:27:38.040
comes on to screen when the
text field becomes active.

00:27:38.040 --> 00:27:42.460
And now, when I go and click go,
the two correct things happen.

00:27:42.460 --> 00:27:47.060
The field changes to red,
and the keyboard is dismissed.

00:27:54.830 --> 00:28:01.100
Okay, now one last thing that I'd
like to point out here is that,

00:28:01.200 --> 00:28:04.920
right, so I click the go button,
and you'll see that

00:28:05.560 --> 00:28:07.880
this field is taking up

00:28:08.480 --> 00:28:11.260
Really all of the content
area on the screen.

00:28:11.330 --> 00:28:14.580
And when I click back in to
the text field and the keyboard

00:28:14.580 --> 00:28:16.850
comes back onto the screen,
well,

00:28:16.870 --> 00:28:19.590
that field is really still behind there.

00:28:20.380 --> 00:28:24.700
And there are going to be times in
your application where that's fine,

00:28:24.770 --> 00:28:27.140
and there are going to be other
times when that doesn't really work.

00:28:27.220 --> 00:28:32.560
What you'd like to do is you'd like
to change your application so that

00:28:32.560 --> 00:28:37.600
you're really just using the amount
of space not taken up by the keyboard.

00:28:37.700 --> 00:28:38.140
Okay?

00:28:38.350 --> 00:28:39.860
So there's a way to do that as well.

00:28:39.900 --> 00:28:42.050
Let me illustrate that.

00:28:42.550 --> 00:28:50.880
The way we do it is that we've got
some notifications that get sent.

00:28:52.180 --> 00:28:57.780
When the keyboard appears,
when it's about to appear,

00:28:57.810 --> 00:29:02.160
and after it's appeared,
and then also when it's about

00:29:02.320 --> 00:29:04.850
to hide and after it's hidden.

00:29:04.860 --> 00:29:08.380
So here what I've done is
I've added just some very,

00:29:08.410 --> 00:29:12.140
very simple standard
notification signups here,

00:29:12.140 --> 00:29:17.280
adding observers for UI keyboard
did show and UI keyboard did hide.

00:29:17.690 --> 00:29:22.320
And then I've got a couple of method
implementations down here that are going

00:29:22.440 --> 00:29:25.250
to run when those notifications get sent.

00:29:27.550 --> 00:29:29.160
Okay,
and really what I'd like to point out

00:29:29.160 --> 00:29:32.730
is that in this UI keyboard did show,
all I'm going to do is I'm going to

00:29:32.820 --> 00:29:38.180
take that color field and I'm going
to adjust the size of its frame.

00:29:38.570 --> 00:29:42.180
So that it's sort of more suitable to
the amount of area that's left after

00:29:42.180 --> 00:29:45.790
the keyboard has come onto the screen.

00:29:45.970 --> 00:29:47.970
So let's build and run that.

00:29:50.890 --> 00:29:55.010
Okay,
so now when I click into the text field,

00:29:55.010 --> 00:29:59.640
you'll see that the field changes size,
sort of animates up.

00:29:59.670 --> 00:30:02.510
I type this time, let's say, blue.

00:30:03.990 --> 00:30:08.160
And I go,
the field changes color appropriately,

00:30:08.160 --> 00:30:14.710
and then after the keyboard orders out,
it adjusts back down to full size.

00:30:17.000 --> 00:30:20.100
Okay.

00:30:20.260 --> 00:30:20.840
Good.

00:30:21.010 --> 00:30:23.710
Okay, can we go back to the slides,
please?

00:30:30.630 --> 00:30:32.360
Okay, so now what did this show?

00:30:32.360 --> 00:30:36.500
This actually showed examples
of all of these traits,

00:30:36.660 --> 00:30:40.520
methods, delegation, and notifications,
an example of really all of them.

00:30:41.110 --> 00:30:44.860
Really, the tools that you have available
to you to really make the most

00:30:44.860 --> 00:30:46.680
out of text input on the iPhone.

00:30:46.680 --> 00:30:49.150
Now what I'd like to do

00:30:49.410 --> 00:30:52.870
is really kind of just go over
this code a little bit more,

00:30:52.870 --> 00:30:55.860
but really with the
purpose of focusing on,

00:30:55.860 --> 00:31:00.990
well, where can you find this code and
information about it in all of the

00:31:01.040 --> 00:31:03.520
APIs and the API documentation?

00:31:03.520 --> 00:31:07.580
So if we go and take a look at
this sort of text field setup,

00:31:07.580 --> 00:31:12.180
you'll see that right there
I used methods on UI text field.

00:31:12.180 --> 00:31:15.870
So you can find that in the
UI text field documentation.

00:31:16.680 --> 00:31:20.800
The traits can be found
in UI text input traits.

00:31:20.800 --> 00:31:22.400
That protocol is documentation.

00:31:25.790 --> 00:31:28.440
And then the delegate,
there's again documentation

00:31:28.440 --> 00:31:30.360
on UI text field delegates.

00:31:30.460 --> 00:31:34.450
So that's where you find out methods
like text field should return

00:31:34.560 --> 00:31:36.770
and text field did end editing.

00:31:36.820 --> 00:31:41.770
Okay, and then finally,
these UI keyboard hide and

00:31:41.870 --> 00:31:45.840
show notifications are actually
documented as part of UI window.

00:31:46.020 --> 00:31:49.220
So I just want to make sure
that as you leave here,

00:31:49.220 --> 00:31:50.900
if you're going to try to
put some of this together,

00:31:50.900 --> 00:31:53.400
that you realize that there
are sort of different places

00:31:53.400 --> 00:31:54.900
where the documentation are.

00:31:55.160 --> 00:31:58.530
And sort of that you have a good idea of
how you can gather all of this together

00:31:58.530 --> 00:32:00.970
and actually make use of the code.

00:32:03.600 --> 00:32:04.720
OK.

00:32:04.740 --> 00:32:07.720
Right, so those pieces again.

00:32:07.800 --> 00:32:07.920
OK.

00:32:08.270 --> 00:32:11.830
So now, one thing I want to point out
is that even though my example

00:32:11.880 --> 00:32:15.310
was about UI text field,
if you wanted to make a very

00:32:15.380 --> 00:32:17.470
similar example with UI text view,
there's very,

00:32:17.470 --> 00:32:19.000
very little that you'd have to do.

00:32:19.210 --> 00:32:22.720
Instead of looking at the UI text
field methods and delegation,

00:32:22.850 --> 00:32:26.290
you look at the UI text
view methods and delegation,

00:32:26.420 --> 00:32:29.400
the traits,
and the keyboard notifications,

00:32:29.440 --> 00:32:32.200
that's pretty much the same.

00:32:36.700 --> 00:32:42.460
Okay,
so now there's an example that uses Xcode

00:32:42.460 --> 00:32:44.320
to sort of type all of these things out.

00:32:44.570 --> 00:32:45.990
Well, what about Interface Builder?

00:32:46.000 --> 00:32:48.130
Well,
Interface Builder actually has very,

00:32:48.130 --> 00:32:51.940
very good support for the things
that we've looked at so far.

00:32:51.940 --> 00:32:56.340
So you can just use drag and drop
and then use the Interface Builder

00:32:56.340 --> 00:33:00.400
inspectors to set up many of
the things like placeholders and

00:33:00.400 --> 00:33:06.780
borders on the text field and return
key auto-enabling and so forth.

00:33:09.160 --> 00:33:12.240
Okay, so now that's about UIKit.

00:33:12.350 --> 00:33:13.780
What about the web?

00:33:13.860 --> 00:33:15.940
So if we can go back, yes, thank you.

00:33:15.990 --> 00:33:18.990
Back to the demo machine.

00:33:19.030 --> 00:33:24.130
I've got a little example here in Safari,
a very, very simple web document

00:33:24.270 --> 00:33:25.930
that's got a form in it.

00:33:27.360 --> 00:33:31.090
And when I click in the form,
naturally again the keyboard shows up,

00:33:31.090 --> 00:33:35.040
and I can type in, and I've typed in RHE,
yes, and I get my nice

00:33:35.050 --> 00:33:37.270
auto-correction to the again,
right?

00:33:37.350 --> 00:33:40.350
So we've got those same...

00:33:40.720 --> 00:33:47.440
The same sort of assistive technologies
available for entering text in the

00:33:48.400 --> 00:34:00.600
[Transcript missing]

00:34:00.610 --> 00:34:02.600
There are two that I would
want to point out to you.

00:34:02.700 --> 00:34:06.800
One is control over auto-correction,
and one is control over

00:34:06.900 --> 00:34:08.780
auto-capitalization.

00:34:08.960 --> 00:34:13.400
As you can see here in this example,
I've got auto-correction on.

00:34:13.430 --> 00:34:21.100
I can turn auto-correction off
and sort of reload that document,

00:34:21.100 --> 00:34:24.470
and you'll notice that
then I type my RHE example,

00:34:24.470 --> 00:34:24.470
and it just leaves it as RHE.

00:34:24.900 --> 00:34:27.150
So again,
this would be most useful to you if

00:34:27.250 --> 00:34:32.930
you have sort of a piece of text that
really isn't part of any language,

00:34:32.970 --> 00:34:37.860
maybe a URL or some, you know,
maybe some string for a game that

00:34:37.860 --> 00:34:40.670
you're writing or some such like that.

00:34:44.890 --> 00:34:46.540
OK, can I go back to the slides, please?

00:34:46.540 --> 00:35:01.430
OK, so the story is a lot simpler when
you are doing web page design.

00:35:01.800 --> 00:35:04.260
The text input story is a lot simpler.

00:35:04.310 --> 00:35:07.120
Now, I do want to point out one thing,
is that we had some documentation

00:35:07.140 --> 00:35:10.000
that was out there that maybe if
you're really enthusiastic about

00:35:10.110 --> 00:35:14.630
text input and web page documents,
that for a while there we were looking

00:35:14.630 --> 00:35:17.320
at the name attribute on form elements.

00:35:17.360 --> 00:35:19.840
And unfortunately,
our experience shows that

00:35:19.840 --> 00:35:21.270
that really doesn't work.

00:35:21.360 --> 00:35:23.390
It's not a very useful heuristic.

00:35:23.400 --> 00:35:27.870
And so it no longer looks at the
name value of a form field to sort

00:35:27.880 --> 00:35:30.200
of decide what keyboard to show.

00:35:30.200 --> 00:35:33.090
We had some code that would
show if you had a zip field

00:35:33.110 --> 00:35:35.000
that would show the numbers.

00:35:35.000 --> 00:35:38.120
And again,
that heuristic was not powerful enough.

00:35:38.240 --> 00:35:42.200
So I guess one of the things that
I would ask from you all is help us

00:35:42.540 --> 00:35:46.390
improve this and sort of bring some
more of these text input controls

00:35:46.680 --> 00:35:49.060
over to web page documentation.

00:35:49.190 --> 00:35:51.280
I'd really love to get
your feedback on that,

00:35:51.410 --> 00:35:53.380
either in this session or in the future.

00:35:53.400 --> 00:35:56.960
I think we'll have a lot of
questions about that in the next

00:35:56.960 --> 00:35:58.900
session or later on in bugs.

00:35:58.910 --> 00:36:02.790
Okay, so there's common tasks.

00:36:04.820 --> 00:36:07.820
And so finally,
what I'd like to do is talk

00:36:07.820 --> 00:36:13.010
about some tips and tricks,
some things that

00:36:13.470 --> 00:36:16.400
Now that you've sort of gotten the
basics and you sort of understand,

00:36:16.400 --> 00:36:20.180
you started maybe developing
your application and you've

00:36:20.180 --> 00:36:24.140
got the basics up and running,
that first version,

00:36:24.140 --> 00:36:27.030
what are some of those things that
maybe you might want to know to

00:36:27.190 --> 00:36:29.920
sort of enhance your application
and really make it better,

00:36:29.920 --> 00:36:37.250
really sort of bring it up to the level
that you'd like to deliver to your users?

00:36:37.770 --> 00:36:41.080
Now, the first thing that I would
like to urge you to do,

00:36:41.210 --> 00:36:44.030
if you have sort of more
interest in this area,

00:36:44.030 --> 00:36:47.700
is to come to the Text Input
Lab tomorrow at 2 p.m.

00:36:49.360 --> 00:36:57.460
So now getting into the tips themselves.

00:36:57.460 --> 00:37:03.020
We saw the example of a UI text
field about placeholders.

00:37:03.020 --> 00:37:07.280
So if you're going to put a UI text
field into your application,

00:37:07.310 --> 00:37:09.450
use that placeholder text.

00:37:09.730 --> 00:37:12.750
Okay, it's really, you know,
if you sort of think about the iPhone

00:37:12.750 --> 00:37:16.530
sort of user interface sort of scenario,
you just don't have as much screen

00:37:16.530 --> 00:37:19.480
space to have that descriptive
text next to your text field as

00:37:19.540 --> 00:37:20.880
you would say in a Mac application.

00:37:20.920 --> 00:37:27.020
So this placeholder text really takes
the place of that feature or sort of

00:37:27.020 --> 00:37:30.680
that user interface paradigm on the Mac.

00:37:30.760 --> 00:37:33.150
So use that placeholder text.

00:37:33.200 --> 00:37:36.410
UI text view, however,
does not have placeholders.

00:37:38.020 --> 00:37:41.110
And that's just usually because
of the scenarios that we found,

00:37:41.220 --> 00:37:43.940
it's just been sort of
easier to sort of introduce.

00:37:43.940 --> 00:37:44.900
It's sort of clearer.

00:37:44.900 --> 00:37:49.240
You open up notes, and it's very,
very clear that you type into the note,

00:37:49.240 --> 00:37:53.090
whereas in UI text field,
many times you have many of them, say,

00:37:53.090 --> 00:37:54.730
in like an address form.

00:37:54.730 --> 00:37:57.480
Really very helpful to have
that placeholder text there.

00:37:59.310 --> 00:38:03.360
But don't go looking for it on
UI TextView because it's not there.

00:38:03.570 --> 00:38:07.130
So now, I guess what should be obvious is
that if we're looking at text input,

00:38:07.190 --> 00:38:10.480
which is what we've been
talking about all along here,

00:38:10.520 --> 00:38:14.280
is that, well, that's in the situations
that you need to edit text.

00:38:14.330 --> 00:38:18.740
Well, what about those situations where
you simply maybe want to display

00:38:18.740 --> 00:38:21.470
text instead of editing it?

00:38:21.670 --> 00:38:26.540
So I thought it would maybe be a
good idea to take a quick diversion

00:38:26.980 --> 00:38:33.660
off into some of the support that
we have in UIKit for text display.

00:38:33.850 --> 00:38:38.580
Okay, and here are the three pieces:
UILabel, the NSString additions,

00:38:38.950 --> 00:38:41.540
which are defined in the
UIStringDrawing.h header,

00:38:41.940 --> 00:38:43.490
and UIWebView.

00:38:43.780 --> 00:38:46.100
So now,
what are the three use cases for these?

00:38:46.100 --> 00:38:51.810
Well, if you want to draw static text,
I suggest you use UILabel.

00:38:52.410 --> 00:38:56.390
If you want to draw and measure text,
perhaps dynamic text that

00:38:56.390 --> 00:38:58.800
you're generating from
inside of your application,

00:38:58.960 --> 00:39:05.290
use these NSString additions defined
in the UIStringDrawingHeader in UIKit.

00:39:05.510 --> 00:39:08.950
And then finally,
if you want to draw multi-style text,

00:39:09.290 --> 00:39:09.430
right?

00:39:09.680 --> 00:39:12.460
If you remember I said before,
and of course, if you're already

00:39:12.460 --> 00:39:15.220
familiar with the iPhone,
there is just one text

00:39:15.220 --> 00:39:17.060
style per container.

00:39:17.060 --> 00:39:21.170
But in those situations where
you do need to display text with

00:39:21.310 --> 00:39:24.870
multiple styles or sizes or colors,
what have you,

00:39:24.950 --> 00:39:27.990
you can use UI WebView for text display.

00:39:27.990 --> 00:39:29.900
Okay?

00:39:29.900 --> 00:39:33.880
So I've got an example where I show that.

00:39:35.400 --> 00:39:44.110
Let's get rid of this other one.

00:39:44.110 --> 00:39:44.110
Okay.

00:39:50.570 --> 00:39:51.340
So just build and run this.

00:39:51.340 --> 00:39:55.340
I've got a demo for each of UILabel
and UISTringDrawing and UIwebView.

00:39:55.340 --> 00:39:57.180
Let's just go and look at UILabel.

00:39:57.250 --> 00:40:01.200
Here's just a very,
very simple situation where I've got,

00:40:01.280 --> 00:40:05.430
again, just two sizes,
a large size and sort of the

00:40:05.430 --> 00:40:08.480
smaller size text beneath it.

00:40:10.040 --> 00:40:13.280
Static text, it's not editable,
I can click on it all I want

00:40:13.670 --> 00:40:15.830
and the keyboard won't come up.

00:40:15.970 --> 00:40:19.660
And of course this is just very,
very simple to use.

00:40:19.920 --> 00:40:23.630
It does have some useful features though,
particularly in this

00:40:23.660 --> 00:40:25.160
multi-line label example.

00:40:25.160 --> 00:40:29.750
I just want to highlight that
there's more text in that

00:40:29.750 --> 00:40:32.650
label than is being displayed.

00:40:33.160 --> 00:40:36.770
And if we click back on that field,
you see that I've limited it to

00:40:36.770 --> 00:40:40.840
four lines and that we've got
some truncation on the end there.

00:40:40.920 --> 00:40:44.150
So that can be very useful if, again,
you're generating some

00:40:44.260 --> 00:40:46.900
text in your program,
and you know it needs to fit

00:40:46.900 --> 00:40:47.950
in a certain amount of space.

00:40:48.060 --> 00:40:51.750
And perhaps it's even text that
you're accepting from your users.

00:40:51.780 --> 00:40:55.440
Maybe they type it into some other field,
and then you display it elsewhere.

00:40:55.550 --> 00:40:59.730
So this can be a very useful way
to sort of manage your space and

00:40:59.820 --> 00:41:05.260
display the text in a way that's
suitable for your application.

00:41:05.370 --> 00:41:07.400
Static text.

00:41:09.700 --> 00:41:16.920
OK, and then the string drawing-- this
is an example which measures text,

00:41:16.920 --> 00:41:19.720
that again,
that I'm going to be typing into the

00:41:20.120 --> 00:41:22.390
application and then displaying it.

00:41:22.720 --> 00:41:26.530
What I'd like to do here also is sort of,
I guess, a diversion on a diversion,

00:41:26.530 --> 00:41:29.980
is that you'll notice that all of the
demos that I've been showing so far,

00:41:29.980 --> 00:41:33.260
and unfortunately I don't have one of
those cool projectors in this room,

00:41:33.380 --> 00:41:36.520
but it's good for that reason
because I get to demo the

00:41:36.520 --> 00:41:41.550
wonderful iPhone simulator,
which is running all of these demos.

00:41:41.620 --> 00:41:42.890
And it's really great for developing.

00:41:42.900 --> 00:41:47.790
Well, one of the features that you'll see
me using now is that I'm going to

00:41:48.130 --> 00:41:54.140
use the keyboard on my laptop here
to just type in really quickly.

00:41:54.140 --> 00:41:59.420
And you'll see that as I did that,
that I'm getting autocorrection,

00:41:59.420 --> 00:42:02.920
that I type in this and that field
is set up to do autocapitalization.

00:42:02.920 --> 00:42:06.100
So the full engine is running,
even though I'm not actually

00:42:06.310 --> 00:42:08.470
poking with the mouse.

00:42:08.740 --> 00:42:11.640
So it's really sort of
a really fully featured,

00:42:11.640 --> 00:42:14.720
fully integrated simulator environment.

00:42:14.990 --> 00:42:17.020
So I'm just going to type a
little bit of text in here

00:42:17.020 --> 00:42:18.280
and then click the Go button.

00:42:18.400 --> 00:42:22.770
And then here's an example of measuring
and laying out and drawing some

00:42:23.130 --> 00:42:29.720
dynamic text with a little bit of
a-- where each word is in a bubble.

00:42:30.230 --> 00:42:33.820
If I click back in the field
and sort of type there,

00:42:33.930 --> 00:42:40.590
you'll see that it just sort of updates
and measures the text and can redraw it.

00:42:42.470 --> 00:42:48.290
So again, just sort of focusing in on the
important parts of this little demo,

00:42:48.290 --> 00:42:52.420
the big important parts that I'd
like to point out are measuring,

00:42:52.470 --> 00:42:57.300
getting the size of an
NSString in a certain font.

00:42:57.430 --> 00:43:01.470
The font is just the bold system size,
24 points.

00:43:01.680 --> 00:43:05.310
And this is just a little method
that does a little bit of very,

00:43:05.430 --> 00:43:08.380
very simplistic line layout,
as you can see.

00:43:08.590 --> 00:43:13.300
And then when it comes time to draw,
that I just call this draw at

00:43:13.300 --> 00:43:19.690
point in my drawRect method of
these individual word bubbles.

00:43:21.190 --> 00:43:25.330
Alright,
so there's just a little bit of a demo

00:43:25.900 --> 00:43:32.030
on using UIKit to measure and draw
text dynamically that you're getting

00:43:32.030 --> 00:43:34.150
from your user in your application.

00:43:34.940 --> 00:43:41.000
Okay, and then finally, is a very, very,
just about the most trivial example,

00:43:41.000 --> 00:43:42.800
but here's a web document.

00:43:42.800 --> 00:43:45.100
Well, you never know that I worked
on Safari for years.

00:43:45.100 --> 00:43:47.400
This was the web document
that I came up with.

00:43:47.400 --> 00:43:53.730
But again,
the example is just to show that you

00:43:53.730 --> 00:43:59.310
can display static multi-style text.

00:43:59.480 --> 00:44:01.600
In your application, if that's necessary.

00:44:01.600 --> 00:44:07.030
Here, I just loaded it from a markup
file that is on disk in my project,

00:44:07.150 --> 00:44:10.530
but then here are the
two important pieces.

00:44:11.100 --> 00:44:17.050
Create a UI web view and load
an HTML string that I built up,

00:44:17.170 --> 00:44:23.600
or in this case,
just loaded a static one off disk.

00:44:24.200 --> 00:44:28.550
Right, so there's just a quick example
of drawing multi-styled text.

00:44:28.850 --> 00:44:31.300
And I do want to point out that
since you're using UI WebView,

00:44:31.300 --> 00:44:33.390
you have,
you can certainly make a much more

00:44:33.470 --> 00:44:35.340
complicated example than I've shown here.

00:44:35.340 --> 00:44:43.310
You have full access to the
entirety of WebKit there,

00:44:43.310 --> 00:44:46.880
all of the CSS and style
features that WebKit supports.

00:44:47.530 --> 00:44:49.900
to draw your multi-style text.

00:44:50.060 --> 00:44:52.770
Okay, can we go back to the slides,
please?

00:44:55.030 --> 00:44:56.840
Okay.

00:44:56.950 --> 00:45:00.640
So moving on from that,
I'd like to talk about

00:45:00.890 --> 00:45:02.160
text container positioning.

00:45:02.160 --> 00:45:06.690
Now, I showed a little bit of an example
of that earlier with the keyboard

00:45:06.860 --> 00:45:11.030
when that color field changed its
size according to the constraints,

00:45:11.270 --> 00:45:14.500
really,
of the keyboard appearing and taking up

00:45:14.590 --> 00:45:17.520
a large amount of the screen real estate.

00:45:17.520 --> 00:45:20.720
So as you're thinking about
designing your application,

00:45:20.720 --> 00:45:23.800
you do need an application
that uses text input,

00:45:23.920 --> 00:45:27.500
you do need to think about, well,
how is this all going to work?

00:45:27.620 --> 00:45:32.590
How is my application content still
going to be visible as the keyboard

00:45:32.600 --> 00:45:35.150
comes and goes as the user uses it?

00:45:35.480 --> 00:45:40.500
So you do need to deal
with keyboard geometry.

00:45:41.160 --> 00:45:46.460
As you design your application now,
figure your developers, you want to know,

00:45:46.460 --> 00:45:47.300
well, what are the numbers?

00:45:47.300 --> 00:45:48.180
So here are the numbers.

00:45:48.280 --> 00:45:57.660
The keyboard in portrait orientation is
216 pixels high in all of the variations.

00:45:57.880 --> 00:46:03.000
So even the Chinese handwriting keyboard,
it's 216 pixels tall and

00:46:03.490 --> 00:46:05.930
the full width 320 pixels.

00:46:06.850 --> 00:46:12.250
When you change over to landscape,
the keyboard is 162 pixels.

00:46:12.510 --> 00:46:14.800
This is actually new for iPhone OS 2.0.

00:46:14.800 --> 00:46:17.380
We actually made it a little bit shorter.

00:46:17.470 --> 00:46:23.080
And sort of being baseball fans,
I pushed very heavily to make it 162.

00:46:23.820 --> 00:46:25.140
Baseball fans out there?

00:46:25.140 --> 00:46:25.460
No.

00:46:25.460 --> 00:46:26.530
Nobody gets that.

00:46:26.530 --> 00:46:30.450
I'll make even a worse joke,
which was I was pushing for 154 because

00:46:30.450 --> 00:46:32.120
I really like sort of Babe Ruth.

00:46:32.220 --> 00:46:34.380
We were going to have to put an asterisk.

00:46:34.380 --> 00:46:35.660
No, never mind.

00:46:35.730 --> 00:46:36.200
Okay.

00:46:36.290 --> 00:46:39.360
So 162 pixels tall, 480 pixels wide.

00:46:39.360 --> 00:46:41.560
But now really,
I tell that to you because

00:46:42.000 --> 00:46:43.470
probably you want to know.

00:46:43.470 --> 00:46:47.690
But really, if you're going to be making
sort of a best practice in using

00:46:47.690 --> 00:46:51.400
the geometry of the keyboard,
you're going to want to know what

00:46:51.400 --> 00:46:53.670
the geometry of the keyboard is.

00:46:53.700 --> 00:46:58.290
So you really should be listening
to the keyboard notifications.

00:46:58.290 --> 00:47:02.290
I showed, again,
the example of that in the earlier demo.

00:47:02.370 --> 00:47:06.770
And the one thing that I didn't sort
of dip into just to keep the demo

00:47:06.770 --> 00:47:11.020
simple was that that notification
passes you as part of the info

00:47:11.290 --> 00:47:15.850
dictionary on the notification,
the geometry of the keyboard.

00:47:15.850 --> 00:47:20.380
So that's really what you should be
tying into and listening to and adjusting

00:47:20.420 --> 00:47:22.590
your user interface accordingly.

00:47:25.670 --> 00:47:27.450
Okay, so there's no real guarantee.

00:47:27.740 --> 00:47:30.800
I mean, as I just said,
the landscape keyboard changed

00:47:30.820 --> 00:47:36.250
dimensions from iPhone OS 1.0 to 2.0,
and there's no guarantee

00:47:36.340 --> 00:47:39.680
that that won't happen again,
particularly as we add support for

00:47:39.680 --> 00:47:43.790
more languages and more input methods,
we may change the geometry.

00:47:43.790 --> 00:47:47.700
If you have, again, you know,
this is a great area,

00:47:47.700 --> 00:47:51.600
if you have real interest in this,
to come to the lab,

00:47:51.600 --> 00:47:55.130
and we can talk through
the issues that you have.

00:47:55.900 --> 00:47:57.500
So now moving on to the next tip.

00:47:57.820 --> 00:48:02.070
Well, what about text input in tables?

00:48:03.030 --> 00:48:08.720
Now, this is sort of the two things
that I would advise you to think

00:48:08.720 --> 00:48:14.100
about as you're going to maybe
make an application that does this,

00:48:14.260 --> 00:48:18.280
is that you want to create a custom
table cell for your text input.

00:48:18.280 --> 00:48:20.940
And of course, again,
you need to deal with the

00:48:20.940 --> 00:48:23.010
keyboard geometry in most cases.

00:48:23.010 --> 00:48:25.690
So let's, I've got a demo of that.

00:48:25.790 --> 00:48:27.980
Let's take a look at that.

00:48:35.070 --> 00:48:42.000
Okay, so the first suggestion, right,
is that you create an editing cell.

00:48:42.000 --> 00:48:45.080
And this is just a very,
very simple subclass

00:48:45.460 --> 00:48:47.000
of UI table view cell.

00:48:47.000 --> 00:48:51.600
I've implemented the UI text
field delegate protocol,

00:48:51.600 --> 00:48:59.270
and I've got a UI text field as
an IVAR in this editing cell.

00:48:59.280 --> 00:49:02.520
And I've done some very,
very simple setup on it,

00:49:02.520 --> 00:49:06.880
as should now be familiar to you,
the kinds of traits and methods

00:49:06.880 --> 00:49:08.960
and borders and font setups.

00:49:10.910 --> 00:49:15.980
That are very typical
uses of UI text field.

00:49:16.900 --> 00:49:19.390
Okay, so now, very simple.

00:49:19.530 --> 00:49:23.700
Okay, so now,
dealing with the keyboard geometry.

00:49:23.760 --> 00:49:27.740
Well, how about I run this application so
that we can actually see what it does?

00:49:28.100 --> 00:49:34.370
Okay, so what I've got here is a list.

00:49:35.970 --> 00:49:37.170
of letters.

00:49:37.170 --> 00:49:37.700
OK.

00:49:37.700 --> 00:49:41.260
So now if I click in
any one of these rows,

00:49:41.540 --> 00:49:44.920
what you'll see is that
the keyboard comes up.

00:49:44.920 --> 00:49:49.950
Now in many situations, right, you know,
I click on, you know, epsilon, and great,

00:49:49.950 --> 00:49:52.640
you know,
there's no real geometry challenge there.

00:49:52.640 --> 00:49:58.230
But you'll notice that as I fumble,
as I scroll down to the very bottom.

00:49:58.230 --> 00:50:00.700
Well, what about omega?

00:50:00.700 --> 00:50:04.300
You'll see that as I'm sort of
bottoming out on this table,

00:50:04.320 --> 00:50:05.710
there is no more there there.

00:50:05.710 --> 00:50:08.200
There's no more area to scroll.

00:50:08.200 --> 00:50:14.900
So now if you click into omega, well,
now you need to do a bit of work to

00:50:14.900 --> 00:50:18.810
sort of make some room available,
sort of adjust the size

00:50:18.830 --> 00:50:22.200
of that table in very,
very much the same way that

00:50:22.350 --> 00:50:26.770
the sort of more trivial color
field example did before.

00:50:29.060 --> 00:50:31.560
Okay, so adjusting that,
you'll notice that, of course, if I,

00:50:31.750 --> 00:50:33.500
you know,
just type in there and click done.

00:50:33.500 --> 00:50:36.860
So now I click done,
and the table resizes now to

00:50:37.220 --> 00:50:41.050
take full advantage of this
full screen real estate that's

00:50:41.050 --> 00:50:46.800
available now that the application,
excuse me, now that the keyboard has been

00:50:46.810 --> 00:50:49.260
dismissed by clicking the done.

00:50:49.260 --> 00:50:49.820
Okay.

00:50:51.990 --> 00:50:55.300
And really, you know, it's very,
very simple.

00:50:55.300 --> 00:50:59.280
You'll see that I've got, as before,
a UI keyboard will hide.

00:50:59.280 --> 00:51:03.990
All I'm doing is adjusting
the height of that table.

00:51:05.230 --> 00:51:09.780
And the show is just a
little bit more code,

00:51:10.100 --> 00:51:12.680
but really not very
much more complicated.

00:51:12.760 --> 00:51:16.470
There's just a check in here to
sort of see if we need to make any

00:51:16.470 --> 00:51:18.320
change to the size of the table.

00:51:18.320 --> 00:51:21.560
But really, as you can see,
if it's on one screen, very,

00:51:21.560 --> 00:51:23.520
very simple little bit of code.

00:51:23.520 --> 00:51:25.940
Now, you might ask yourself, well,
how come we're not doing

00:51:25.940 --> 00:51:27.060
this then automatically?

00:51:27.170 --> 00:51:30.500
And it's just experience shows
that there are so many different

00:51:30.500 --> 00:51:33.730
sort of interactions with views
and tables that as of right now,

00:51:33.840 --> 00:51:36.440
it's really sort of an
exercise that's left for you.

00:51:36.440 --> 00:51:40.770
But as you can see,
not a very difficult exercise to

00:51:40.810 --> 00:51:45.960
just do a little bit of math and
make sure that it works with the

00:51:46.260 --> 00:51:49.740
details of your application's design.

00:51:49.740 --> 00:51:52.560
Okay.

00:51:53.520 --> 00:51:57.230
Yeah, as you can see, a very,
very simple little application

00:51:57.340 --> 00:51:59.750
that's really all there is to it.

00:52:04.130 --> 00:52:05.400
Can we go back to the slides, please?

00:52:05.400 --> 00:52:06.790
OK.

00:52:06.790 --> 00:52:09.040
Right.

00:52:09.070 --> 00:52:12.790
So if you want to implement
text input in tables,

00:52:12.820 --> 00:52:16.270
make that UI table view
subclass for editing,

00:52:16.270 --> 00:52:20.670
and then again dealing
with the keyboard geometry.

00:52:21.730 --> 00:52:24.400
OK,
and then really about future directions.

00:52:24.400 --> 00:52:30.320
If you saw Bertrand
Serlet's keynote on Monday,

00:52:30.340 --> 00:52:37.570
when he talked about APIs,
he was very clear in saying that we make

00:52:37.570 --> 00:52:41.320
APIs that we're prepared to commit to,
and that we certainly realize

00:52:41.320 --> 00:52:43.260
that we don't have everything.

00:52:43.310 --> 00:52:48.380
And so we really,
really want you to get this SDK and dig

00:52:48.380 --> 00:52:52.230
into it and make some terrific apps,
and that while you're doing that,

00:52:52.240 --> 00:52:55.760
give us your feedback for
what you want in the future.

00:52:55.800 --> 00:52:59.360
We definitely want your feedback,
and it really is important to us to

00:52:59.360 --> 00:53:02.510
know what's most important to you.

00:53:02.620 --> 00:53:08.160
So we definitely want to get your
feedback on future directions.

00:53:10.360 --> 00:53:12.990
Okay, and yeah,
if you have those pressing

00:53:12.990 --> 00:53:16.780
questions right now,
come to the lab tomorrow.

00:53:20.290 --> 00:53:25.710
Okay, and that sort of wraps up what
I have for today on tips and tricks.

00:53:26.100 --> 00:53:30.040
Right, if you have,
if you want more information, Derek Horn,

00:53:30.070 --> 00:53:33.920
the Application Technologies Evangelist,
and that we've got a lot of

00:53:33.920 --> 00:53:38.860
documentation available actually
on developer.apple.com/iphone.

00:53:39.010 --> 00:53:42.850
There we go, Q&A.