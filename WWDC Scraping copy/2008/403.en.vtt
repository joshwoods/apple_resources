WEBVTT

00:00:20.390 --> 00:00:21.800
Good morning.

00:00:21.840 --> 00:00:24.100
Welcome to the AJAX session.

00:00:24.140 --> 00:00:25.100
I'm Geoff Garen.

00:00:25.100 --> 00:00:28.090
I'm an engineer on the
Safari and WebKit team.

00:00:28.250 --> 00:00:30.330
I hope that some of you at
least had a chance to come to

00:00:30.340 --> 00:00:32.930
the WebKit party Tuesday night.

00:00:32.980 --> 00:00:34.570
Anybody?

00:00:36.570 --> 00:00:38.600
For those of you who came,
I hope that your hangovers

00:00:38.680 --> 00:00:41.420
the next morning were mild.

00:00:41.680 --> 00:00:44.340
So what is AJAX?

00:00:44.410 --> 00:00:49.550
Well, in the beginning, God,
as we all know, created the internet.

00:00:50.540 --> 00:00:54.130
And the Internet was a web browser
pulling data from a server and

00:00:54.130 --> 00:00:55.480
pushing it out to the user.

00:00:55.480 --> 00:00:56.100
Pretty simple.

00:00:56.100 --> 00:00:59.630
But soon enough,
there were enough servers and enough

00:00:59.640 --> 00:01:03.910
users that we started to think of the
Internet as an information superhighway.

00:01:03.920 --> 00:01:08.000
And I would call this the first
technology revolution on the Internet.

00:01:08.000 --> 00:01:10.400
For its time, this was amazing.

00:01:10.400 --> 00:01:13.720
You could be sitting in your basement,
probably in your underwear,

00:01:13.720 --> 00:01:18.120
and you could access a
document located in Berkeley,

00:01:18.120 --> 00:01:22.200
California, or in Cambridge,
Massachusetts, or London, England,

00:01:22.200 --> 00:01:24.590
or anywhere else all over the world.

00:01:26.540 --> 00:01:30.640
But there was an important limitation
to this version of the internet.

00:01:30.670 --> 00:01:33.840
The information superhighway
was a one-way street.

00:01:33.870 --> 00:01:36.270
You could access a document
anywhere in the world,

00:01:36.280 --> 00:01:38.740
go to any web page,
but once you were there,

00:01:38.740 --> 00:01:40.420
you were kind of stuck.

00:01:40.440 --> 00:01:44.070
You couldn't interact with it the
way you could interact with the rest

00:01:44.170 --> 00:01:46.720
of the applications on your system.

00:01:47.110 --> 00:01:49.600
What you could do is you
could click a link that would

00:01:49.710 --> 00:01:52.740
take you to another web page,
and from there you could click

00:01:53.010 --> 00:01:55.870
another link to another web page,
and so you could go from place to

00:01:55.870 --> 00:01:57.460
place to place on the Internet.

00:01:57.460 --> 00:02:02.320
And that experience of going places
on the Internet was so fundamental

00:02:02.320 --> 00:02:06.700
to the Internet in its time that
Microsoft even coined the trademark,

00:02:06.700 --> 00:02:08.520
where do you want to go today?

00:02:09.900 --> 00:02:11.760
Does anybody remember that?

00:02:11.780 --> 00:02:15.960
Microsoft's technology
luminary on the internet?

00:02:16.050 --> 00:02:20.560
So eventually we all realized we weren't
really happy with that situation.

00:02:20.560 --> 00:02:27.360
It wasn't really as interesting
as the desktop experience,

00:02:27.370 --> 00:02:29.890
and I think that's what brought
about the second technology

00:02:29.890 --> 00:02:29.890
revolution on the internet,
AJAX.

00:02:30.210 --> 00:02:34.640
Standard techniques on the client
side with JavaScript to update a

00:02:34.640 --> 00:02:39.690
user interface in response to user
behavior and simultaneously through

00:02:39.690 --> 00:02:45.930
asynchronous XMLHttpRequest to fetch
new data from the server as necessary.

00:02:46.120 --> 00:02:49.640
So here's an example of one of
the first AJAX applications,

00:02:49.640 --> 00:02:50.720
and still I think one of the best.

00:02:50.800 --> 00:02:53.960
This is Google Maps,
and I can go to maps.google.com

00:02:53.960 --> 00:02:55.970
and do a search for San Francisco,
California.

00:02:55.970 --> 00:02:58.020
And once I've done that,
I have all kinds of

00:02:58.210 --> 00:02:59.500
user interface widgets.

00:02:59.500 --> 00:03:02.580
I can slide a slider or click
a button or drag the map,

00:03:02.580 --> 00:03:06.620
or I can even use my mouse wheel
in order to interact with this map.

00:03:06.780 --> 00:03:09.030
So I can zoom down here
to the Moscone Center,

00:03:09.030 --> 00:03:12.610
and I can zoom in a little further
through Street View to see the front

00:03:12.610 --> 00:03:14.940
door we all came through this morning.

00:03:14.940 --> 00:03:15.980
This is pretty great technology.

00:03:16.000 --> 00:03:20.130
I think I can zoom one more level all
the way into the conference itself.

00:03:20.190 --> 00:03:25.420
And here we have an Apple engineer
hard at work in the lab.

00:03:28.800 --> 00:03:33.440
But now, the kids these days,
with their hippin' and their hoppin'

00:03:33.440 --> 00:03:37.960
and their bippin' and their boppin'
and their remixing and their sampling,

00:03:37.960 --> 00:03:41.980
they love to take content that's already
out there on the internet and mash it

00:03:42.030 --> 00:03:45.880
all up together into a new experience
that's greater than the sum of its parts.

00:03:45.880 --> 00:03:48.980
And so we call this mashups,
and I think it's the beginning

00:03:48.980 --> 00:03:52.030
of the third technology
revolution on the internet.

00:03:52.720 --> 00:03:55.320
And I say beginning because I think
that there are some critical

00:03:55.320 --> 00:04:00.000
limitations in the way that mashups
work today and the APIs that they rely

00:04:00.000 --> 00:04:04.240
on that have really held back mashups
from reaching their full potential.

00:04:05.800 --> 00:04:06.700
Let me give you some examples.

00:04:06.700 --> 00:04:10.060
Here's Zillow.com,
and it has that same AJAX map

00:04:10.060 --> 00:04:13.600
interface that I showed you earlier,
but Zillow has mashed up into

00:04:13.600 --> 00:04:17.290
the map their own real estate
and housing information.

00:04:17.310 --> 00:04:19.990
So as I look at an area on the map,
I can see homes for

00:04:19.990 --> 00:04:22.510
sale and their prices,
and also recently sold

00:04:22.510 --> 00:04:24.150
homes and things like that.

00:04:24.220 --> 00:04:27.370
Simultaneously,
on the left side of this web page,

00:04:27.440 --> 00:04:30.890
I have an ad for Lowe's Home Improvement,
which is a document that came

00:04:30.990 --> 00:04:32.280
from another part of the Internet.

00:04:32.860 --> 00:04:35.300
The assumption being that, you know,
if I'm looking for a home,

00:04:35.300 --> 00:04:37.200
I'm probably interested
in home improvement.

00:04:38.590 --> 00:04:44.500
The limitation here is that the Lowe's ad
doesn't know what the map is looking at.

00:04:44.560 --> 00:04:47.300
If it did, it could show me something
a lot more relevant.

00:04:47.380 --> 00:04:50.900
For example,
locations of Lowe's stores in the area.

00:04:50.960 --> 00:04:55.300
Or it could even go out and fetch me Yelp
reviews of Lowe's stores in that area,

00:04:55.300 --> 00:04:57.800
assuming that the reviews are positive.

00:04:57.810 --> 00:05:00.360
Maybe there could be some filtering.

00:05:00.450 --> 00:05:01.820
So here's another example.

00:05:02.000 --> 00:05:02.700
This is a fun one.

00:05:02.700 --> 00:05:05.300
This is Yahoo Pipes,
which is an application for making your

00:05:05.300 --> 00:05:08.530
own mashups and then publishing them.

00:05:08.640 --> 00:05:11.900
And here I've made the
I Can Has Cheeseburger pipe,

00:05:11.930 --> 00:05:15.190
which will go out and search
Flickr for photos that match

00:05:15.270 --> 00:05:19.500
I Can Has Cheeseburger and then display
the results in a Yahoo web page.

00:05:19.520 --> 00:05:22.080
And this is what that looks like.

00:05:22.340 --> 00:05:24.880
So once again, this is great technology.

00:05:24.910 --> 00:05:27.600
Obviously,
we need to accelerate the speed at which

00:05:27.600 --> 00:05:29.190
kittens proliferate on the internet.

00:05:29.190 --> 00:05:32.700
But there are some critical
limitations here as well.

00:05:32.700 --> 00:05:36.280
The main limitation being that
I have to do all my communication

00:05:36.280 --> 00:05:37.760
through the Yahoo servers.

00:05:37.760 --> 00:05:41.780
So there's an extra round trip for
every single resource that I request,

00:05:41.910 --> 00:05:45.600
basically making my application
twice as slow as it needs to be.

00:05:45.830 --> 00:05:47.990
And also,
I can only make requests for things

00:05:48.060 --> 00:05:52.180
that are statically supported by
programs written on the Yahoo servers.

00:05:52.200 --> 00:05:54.720
So I can't make arbitrary requests.

00:05:54.720 --> 00:05:58.270
And if you're maintaining mashups like
this on your own server-side mashups,

00:05:58.270 --> 00:06:00.880
then you have to write a lot
of glue code on the server-side

00:06:00.950 --> 00:06:02.530
in order to make this happen.

00:06:05.190 --> 00:06:07.360
So that's really what my
presentation today is about.

00:06:07.430 --> 00:06:10.510
It's about the third technology
revolution on the internet,

00:06:10.550 --> 00:06:11.040
mashups.

00:06:11.240 --> 00:06:13.950
And critically,
it's about new standards that

00:06:13.950 --> 00:06:18.550
we've implemented in Safari to
release mashups from their existing

00:06:18.550 --> 00:06:23.630
limitations and allow them to fulfill
their full potential in your websites

00:06:23.640 --> 00:06:28.770
and web applications and desktop
applications that rely on web content.

00:06:29.470 --> 00:06:32.460
I'll cover three categories of APIs.

00:06:32.700 --> 00:06:37.990
First, I'm going to cover APIs for
document manipulation.

00:06:38.000 --> 00:06:41.050
When you get new data over the server,
these are the APIs that can initialize

00:06:41.050 --> 00:06:45.720
your web page or update parts of
its user interface as necessary.

00:06:45.720 --> 00:06:47.430
And mostly,
these are things that have been around

00:06:47.430 --> 00:06:50.540
in libraries for quite some time now,
and now they've been standardized and

00:06:50.540 --> 00:06:53.910
implemented natively in the browser,
making them easier and

00:06:53.950 --> 00:06:55.190
quite a bit faster.

00:06:55.930 --> 00:06:57.630
Then I'll move on to message passing.

00:06:57.640 --> 00:07:02.020
This is a new API that allows documents
on the client side to communicate

00:07:02.470 --> 00:07:05.020
and interact with one another,
even though they don't completely trust

00:07:05.020 --> 00:07:09.940
each other and they need security in
an environment of mutual suspicion.

00:07:11.050 --> 00:07:16.740
And finally, I'll cover Access Control,
a new standard implemented in Safari that

00:07:16.740 --> 00:07:21.240
allows your documents on the client side
to access not just your own servers,

00:07:21.240 --> 00:07:25.290
but any other server they need
access to on the Internet.

00:07:25.710 --> 00:07:29.440
And I think that these three
APIs together create a compelling story

00:07:29.440 --> 00:07:32.960
for the future of the Internet where
in very simple and efficient

00:07:32.980 --> 00:07:37.470
ways you can update your document
either through communication with other

00:07:37.490 --> 00:07:41.530
documents on the client side or as each
document communicates with any server

00:07:41.530 --> 00:07:43.700
it needs access to on the Internet.

00:07:43.700 --> 00:07:47.610
And I think that these together
can maybe take that Web 2.0

00:07:47.750 --> 00:07:52.410
plus and kick it up a notch,
maybe even to Web 3.0.

00:07:52.660 --> 00:07:57.170
And the reason I would call it
that is that here we have internet

00:07:57.270 --> 00:08:00.540
technology not just trying to
catch up to the desktop anymore,

00:08:00.540 --> 00:08:02.940
but maybe even surpassing it,
doing things that you can't

00:08:02.940 --> 00:08:07.060
really do with a static bucket
of bits on a hard drive.

00:08:08.620 --> 00:08:11.620
So let me get started with
document manipulation.

00:08:11.620 --> 00:08:14.830
Here we have one of my favorite blogs,
the Death Bacon Kket.

00:08:15.030 --> 00:08:18.940
I like this blog because it tells me
what I'm going to have for dinner.

00:08:19.000 --> 00:08:23.090
And as you're probably familiar,
there are critical portions of

00:08:23.240 --> 00:08:26.210
this website that if I were going
to reference them in my markup,

00:08:26.290 --> 00:08:28.120
there are pretty
standard ways to do that.

00:08:28.210 --> 00:08:31.500
So for example, I have a masthead,
which is a div with the

00:08:31.500 --> 00:08:32.880
ID attribute masthead.

00:08:33.200 --> 00:08:36.660
And in CSS, to style that masthead,
I just need to use the number

00:08:36.780 --> 00:08:38.760
sign followed by its ID,
and bingo,

00:08:38.820 --> 00:08:41.240
I can set a font or anything else I need.

00:08:41.270 --> 00:08:42.900
In JavaScript,
we have the same capability.

00:08:42.900 --> 00:08:45.720
You can call getElementById to
grab that masthead and maybe

00:08:45.730 --> 00:08:50.220
programmatically insert text or
do anything else that you need to.

00:08:50.490 --> 00:08:51.760
So this is a pretty simple API.

00:08:51.760 --> 00:08:52.840
It's been around forever.

00:08:52.840 --> 00:08:54.010
It's quite fast.

00:08:54.200 --> 00:08:56.830
But it is limited,
and the limitation is that

00:08:56.830 --> 00:08:58.720
it doesn't scale very well.

00:08:58.750 --> 00:09:02.060
I can't really set an ID on
every single element in my page,

00:09:02.080 --> 00:09:06.410
and sometimes I need to reference
more than one element at once.

00:09:06.910 --> 00:09:10.450
So scaling up a little bit,
we also have the ability to reference

00:09:10.510 --> 00:09:12.750
elements by their tag names.

00:09:12.920 --> 00:09:16.790
So here I've referenced all the
anchor tags in the DeathBake and KCAT.

00:09:16.990 --> 00:09:19.910
In CSS, I just need to supply that A,
the anchor tag,

00:09:19.920 --> 00:09:23.230
and then I can style them,
turn them all red, something like that.

00:09:23.300 --> 00:09:26.910
In JavaScript,
I can call getElements by tag

00:09:26.910 --> 00:09:31.880
name and supply that anchor tag,
and bingo, now I can add dynamic

00:09:31.880 --> 00:09:31.880
behaviors to them as well.

00:09:33.020 --> 00:09:35.820
But there's one other element on
this page I want to talk about,

00:09:35.820 --> 00:09:40.920
and here we have three portions of
the page that are all picture frames.

00:09:40.920 --> 00:09:42.070
They look like picture frames.

00:09:42.080 --> 00:09:43.320
I need them styled that way.

00:09:43.320 --> 00:09:46.080
And that's how I think of
them when I'm interacting with

00:09:46.080 --> 00:09:47.520
this page and composing it.

00:09:47.600 --> 00:09:49.790
And in CSS,
I can reference them because I've

00:09:49.790 --> 00:09:52.320
given them all the class name,
picture frame.

00:09:52.320 --> 00:09:54.950
And so I just use that dot
picture frame notation,

00:09:54.950 --> 00:09:58.520
and I can style all my picture frames
and add the border that I need.

00:09:58.540 --> 00:10:01.540
But you'll notice that the
JavaScript box is empty.

00:10:01.680 --> 00:10:03.840
There's no way to grab all
the picture frames on the site

00:10:04.280 --> 00:10:06.610
in order to work with them.

00:10:07.750 --> 00:10:10.590
So new in Safari 3.1,
we've implemented that

00:10:10.600 --> 00:10:14.180
ability in JavaScript,
and it's called GetElementsByClassName.

00:10:14.180 --> 00:10:17.190
This is a new standard as well.

00:10:17.800 --> 00:10:18.700
It's pretty simple.

00:10:18.700 --> 00:10:20.730
It takes a space-separated
list of class names so you

00:10:20.730 --> 00:10:24.730
can supply one class or many,
and it returns to you a live

00:10:24.730 --> 00:10:26.950
node list of all the elements
that have that class name.

00:10:26.960 --> 00:10:31.580
So this is a node list that will
update as you update your DOM.

00:10:33.360 --> 00:10:38.060
Here's an example where I've grabbed
all the posts from the DeathBake in

00:10:38.060 --> 00:10:41.170
KCAT by calling getElementsByClassName
and passing in the class post.

00:10:41.180 --> 00:10:44.000
So you can start to see how
there's a structure in my web

00:10:44.000 --> 00:10:47.800
page that I can reference because
it's already there for CSS,

00:10:47.800 --> 00:10:52.180
but it doesn't necessarily
conform just to tag names or IDs.

00:10:54.020 --> 00:10:56.330
Here's an example of using
more than one class name.

00:10:56.440 --> 00:10:58.630
So I'm trying to access
just the new posts.

00:10:58.850 --> 00:11:02.400
So I pass posts separated
by a space from new,

00:11:02.420 --> 00:11:06.250
and I get all the elements that
have both of those class names.

00:11:07.880 --> 00:11:11.130
One interesting use of Access by
Class Name is microformats.

00:11:11.260 --> 00:11:15.250
Microformats are mini standards for ways
to compose the data in your documents

00:11:15.690 --> 00:11:19.090
in a standard way so that different
tools can read them and access them.

00:11:19.230 --> 00:11:22.260
So if your web page conforms
to the Hcard microformat,

00:11:22.300 --> 00:11:25.460
you have data in your web page
that's contact information.

00:11:25.730 --> 00:11:27.980
And if you need to get at all
the contacts in your web page,

00:11:28.050 --> 00:11:31.480
all you do is you call
getElementsByClassName and you pass

00:11:31.480 --> 00:11:37.170
the Hcard class name and bingo,
that's all of the contacts in your page.

00:11:39.620 --> 00:11:42.570
If you were at the
Rich User Interface in Safari session,

00:11:42.570 --> 00:11:46.880
you know that there's a new API,
a standard API in Safari for adding

00:11:46.880 --> 00:11:50.500
accessibility annotations to your page,
and that's called ARIA.

00:11:50.500 --> 00:11:53.410
And basically you set attributes
on elements that annotate

00:11:53.410 --> 00:11:55.500
what kind of element they are.

00:11:55.500 --> 00:11:59.500
So if you have images on your page,
for example, that function as buttons,

00:11:59.500 --> 00:12:02.500
you need to set a role attribute on
those images and say this is a button.

00:12:02.500 --> 00:12:05.460
So here's a really simple way to do
that when you initialize your web page.

00:12:05.500 --> 00:12:09.560
You get elements by class name to
grab all the buttons on your page,

00:12:09.560 --> 00:12:12.500
and then you iterate through them,
setting the attribute role to button.

00:12:12.500 --> 00:12:14.880
And all of a sudden,
you have this rich user interface

00:12:14.880 --> 00:12:16.490
in accessibility land as well.

00:12:20.020 --> 00:12:24.220
We did some ad hoc performance testing
because we love performance testing,

00:12:24.220 --> 00:12:27.250
and we discovered that accessing
elements by class name in

00:12:27.300 --> 00:12:31.580
Safari is a full 30 times faster
than the fastest alternative,

00:12:31.580 --> 00:12:35.140
which is XPath, a fairly complicated
XML querying language.

00:12:35.310 --> 00:12:38.660
And XPath is itself, I don't know,
maybe between 3 and 10 times

00:12:38.790 --> 00:12:42.140
faster than doing this manually
through JavaScript and DOM.

00:12:42.140 --> 00:12:44.000
So at the limit,
we're talking about a speedup

00:12:44.110 --> 00:12:48.250
of between 100 and 300x.

00:12:48.470 --> 00:12:49.340
Think about that for a minute.

00:12:49.430 --> 00:12:53.240
That's like when Steve Jobs came on
stage to announce the new Intel machines,

00:12:53.240 --> 00:12:56.410
the switch from PowerPC, and he said,
5x faster.

00:12:56.420 --> 00:12:58.460
Now imagine that immediately
after that he said,

00:12:58.550 --> 00:13:00.440
but there's one more thing,
and he threw that

00:13:00.440 --> 00:13:03.150
computer in the garbage,
and he brought out a new computer,

00:13:03.270 --> 00:13:04.890
and he said, 5x faster again.

00:13:04.920 --> 00:13:07.420
Then he threw out that computer,
and he said, wait,

00:13:07.420 --> 00:13:10.780
there's one additional thing,
and he brought out a new computer.

00:13:10.780 --> 00:13:12.120
That's what you get here.

00:13:13.080 --> 00:13:16.740
So I think if you haven't been doing
this kind of dynamic content before,

00:13:16.740 --> 00:13:19.440
you should consider it because
the performance really is there

00:13:19.510 --> 00:13:21.160
to support it on the client side.

00:13:21.160 --> 00:13:24.220
And if you have been doing it already,
either through libraries

00:13:24.220 --> 00:13:26.420
or through your own code,
you're going to get a

00:13:26.420 --> 00:13:27.860
magic speedup in Safari.

00:13:30.520 --> 00:13:35.200
So as the big Lebowski likes to say,
you've got to feed the monkey.

00:13:35.200 --> 00:13:39.720
And I've decided to monetize this web
page by adding Flash ads all over it.

00:13:39.720 --> 00:13:41.000
I think they look great.

00:13:41.000 --> 00:13:43.640
I have on the left-hand
side the Home Depot,

00:13:43.640 --> 00:13:45.580
because this is a pretty homey website.

00:13:45.750 --> 00:13:48.600
And on the right-hand side, Heineken,
because nothing goes better with

00:13:48.600 --> 00:13:51.440
chocolate cake than Heineken.

00:13:51.440 --> 00:13:54.040
And I don't think they detract
from the user experience at all.

00:13:54.040 --> 00:13:56.860
And I'm making a killing on these.

00:13:57.260 --> 00:14:01.200
And so in CSS, if I want to style all
the ads on my web page,

00:14:01.210 --> 00:14:05.580
I have this very complex and
interesting and powerful selector

00:14:05.680 --> 00:14:08.280
language to reference different
elements through different criteria.

00:14:08.280 --> 00:14:11.860
Here, I've selected all my ads
through the following criteria.

00:14:11.860 --> 00:14:13.740
I want everything that
has the class Movie,

00:14:13.740 --> 00:14:15.850
but I don't want all
the movies on my page.

00:14:15.890 --> 00:14:18.530
I don't want to select the movie of
chopping onions or anything like that.

00:14:18.580 --> 00:14:21.610
And I also don't want the
movies that are not plugins,

00:14:21.610 --> 00:14:24.720
so I want it to be an element
that has the tag name Object.

00:14:25.940 --> 00:14:28.490
And finally,
I want it to be a descendant of

00:14:28.490 --> 00:14:30.140
something that has the tag name Add.

00:14:30.160 --> 00:14:31.590
Or, I'm sorry, the class name Add.

00:14:31.720 --> 00:14:34.960
So that's how I know I have all
the Flash ads on my website.

00:14:36.540 --> 00:14:39.400
You'll notice once again that
the JavaScript box is empty.

00:14:39.480 --> 00:14:42.960
So there's a new standard that we've
implemented in Safari 3.1 called

00:14:43.070 --> 00:14:47.320
querySelector that allows me to do
the exact same thing from JavaScript.

00:14:47.510 --> 00:14:52.270
It takes as its argument a CSS selector,
and it returns the first element that

00:14:52.270 --> 00:14:54.400
matches that selector in document order.

00:14:54.400 --> 00:14:58.000
So here's an example where I grab
the first Flash ad on my website by

00:14:58.000 --> 00:15:03.350
calling querySelector and passing that
same selector I showed you from CSS.

00:15:03.400 --> 00:15:07.400
Of course, what I really want is to get
all of the ads on my site.

00:15:07.400 --> 00:15:11.280
So another new standard implemented
in Safari 3.1 is querySelectorAll

00:15:11.400 --> 00:15:15.400
that does the exact same thing,
but it gives me all the elements

00:15:15.400 --> 00:15:18.400
that match that selector,
not just the first one.

00:15:18.450 --> 00:15:22.630
So once again,
it takes as its argument a CSS selector,

00:15:22.630 --> 00:15:25.400
and it returns a static node list.

00:15:25.400 --> 00:15:29.400
So this is not a node list that will
update as layout and rendering change.

00:15:29.400 --> 00:15:32.400
The reason is that layout and
rendering need to be wicked fast.

00:15:32.400 --> 00:15:35.400
So we give you a snapshot of what
things look like at the time,

00:15:35.400 --> 00:15:38.020
and if you want to run this
CSS selector again later to

00:15:38.020 --> 00:15:42.380
see if something has changed,
you should just call querySelector again.

00:15:43.590 --> 00:15:45.870
So here's an example of getting
all the movies on my web page

00:15:45.940 --> 00:15:48.500
by calling querySelectorAll.

00:15:48.500 --> 00:15:52.070
One reason I might want to do this is
because my evil Sith Lords have told me

00:15:52.420 --> 00:15:55.680
that they're not going to pay me unless
all of their annoying ads start running

00:15:55.680 --> 00:15:57.560
the moment that the web page loads.

00:15:57.800 --> 00:15:59.100
So here's a way I can do that.

00:15:59.190 --> 00:16:02.000
I make my selector to
grab all my Flash ads.

00:16:02.030 --> 00:16:03.780
But once again,
I don't want to accidentally

00:16:03.780 --> 00:16:06.080
start the onion chopping
video or anything like that.

00:16:06.110 --> 00:16:09.040
Then I pass it to querySelectorAll,
and I get a list of all the ads.

00:16:09.040 --> 00:16:11.150
And then I can run through
the list calling startPlay to

00:16:11.330 --> 00:16:13.320
start all the Flash movies.

00:16:13.350 --> 00:16:17.580
Now I'm sure that most of you will
be more merciful to your users.

00:16:17.580 --> 00:16:21.620
And so you would probably use this
technology for good and rather than evil.

00:16:21.620 --> 00:16:23.820
And you might have a link
on your web page that says,

00:16:23.820 --> 00:16:24.990
OK, I've seen enough of your ads.

00:16:25.140 --> 00:16:26.260
Please pause them.

00:16:26.290 --> 00:16:28.720
And that would look exactly the same way,
except you would call

00:16:28.750 --> 00:16:31.140
stopPlay instead of start.

00:16:31.190 --> 00:16:33.920
So the lesson to take away here is
that the browser is doing all of the

00:16:33.990 --> 00:16:38.000
heavy lifting now of selecting all
the elements that you need to update.

00:16:38.040 --> 00:16:40.970
And all you need to do is write
the code that actually adds the

00:16:40.980 --> 00:16:43.140
behavior you're interested in.

00:16:44.610 --> 00:16:46.960
Once again, we did a little ad hoc
performance testing,

00:16:46.960 --> 00:16:50.820
and we found that the Access by
CSS selector in Safari 3.1 was

00:16:50.820 --> 00:16:54.140
a full 10 times faster than the
fastest library implementation here.

00:16:54.140 --> 00:16:56.440
And, you know,
it's not that these libraries are

00:16:56.440 --> 00:16:58.310
any slouches or anything like that.

00:16:58.320 --> 00:17:01.420
It's just that the engine is already
computing a lot of this information

00:17:01.520 --> 00:17:04.530
for the sake of layout and rendering,
and now we're just making that

00:17:04.660 --> 00:17:06.470
computation available to JavaScript.

00:17:06.600 --> 00:17:09.110
So we have a lot more power
in the engine than libraries

00:17:09.110 --> 00:17:10.610
do with a lot less overhead.

00:17:11.260 --> 00:17:12.980
So if you're using one of
these libraries already,

00:17:12.980 --> 00:17:16.840
they will automatically fall back
and use the native implementation,

00:17:16.900 --> 00:17:18.430
and you'll just get a magic speedup.

00:17:18.630 --> 00:17:22.210
If you're not using these libraries,
then I encourage you to consider

00:17:22.660 --> 00:17:25.910
this a new tool in your arsenal
for addressing your document.

00:17:28.100 --> 00:17:31.050
So we have a demo for you of
Access by Class Name and CSS Selector,

00:17:31.050 --> 00:17:32.500
some of the things you can do with it.

00:17:32.660 --> 00:17:36.310
And for that, I'd like to invite to the
stage Kevin McCullough.

00:17:40.400 --> 00:17:43.880
Thank you, Geoff.

00:17:44.050 --> 00:17:48.300
I am Kevin McCullough,
engineer on the Safari and WebKit team,

00:17:48.300 --> 00:17:50.950
and I'm going to show you a demo of
what Geoff was just talking about.

00:17:51.070 --> 00:17:54.920
So let's bring up Safari here.

00:17:56.480 --> 00:18:03.310
And I've created a website that is
a copy of our Surf and Safari blog.

00:18:04.360 --> 00:18:05.720
On the right hand side,
if you haven't seen the blog,

00:18:05.800 --> 00:18:08.040
please go to it, webkit.org/blog.

00:18:08.040 --> 00:18:10.530
On the right hand side,
we have a list of links that

00:18:10.530 --> 00:18:12.240
are interesting to the blog.

00:18:12.240 --> 00:18:14.610
And down the center,
we have a set of posts.

00:18:14.730 --> 00:18:16.960
And if I scroll down this page,
on the right,

00:18:16.960 --> 00:18:20.770
you're going to see our archives
that are listed by month and year.

00:18:20.770 --> 00:18:24.090
And you can click on any of one of those,
and it will take you to

00:18:24.150 --> 00:18:27.410
that month in that year,
and you can see all the posts there.

00:18:27.530 --> 00:18:31.670
What this site is missing is
a list of links that tell you

00:18:31.670 --> 00:18:34.420
what posts are on this page.

00:18:34.420 --> 00:18:38.160
So what I've set up is using
getElementsByClassName.

00:18:38.160 --> 00:18:42.360
On the right hand side, I have a button.

00:18:42.390 --> 00:18:45.930
And using that button,
it will generate a list of links for

00:18:46.180 --> 00:18:50.820
every post in the page that will take
you to that post if you click on it.

00:18:51.180 --> 00:18:53.840
And it gets those posts by using
getElementsByClassName because

00:18:53.840 --> 00:18:58.060
I happen to know that every
post has the class name post.

00:18:58.060 --> 00:18:59.850
So let's do that right now.

00:19:02.670 --> 00:19:04.300
So there's all the links.

00:19:04.300 --> 00:19:06.240
And I can take you to each
or any of these links.

00:19:06.240 --> 00:19:07.680
Let's just pick one.

00:19:07.720 --> 00:19:10.440
And it scrolls partway down the page,
and it finds the post

00:19:10.440 --> 00:19:11.410
that was on the page.

00:19:11.490 --> 00:19:14.040
So let's scroll back to the top.

00:19:14.080 --> 00:19:20.580
And let's look at the code for that.

00:19:24.460 --> 00:19:26.270
This code is fairly simple.

00:19:26.460 --> 00:19:30.320
If you look at the top function,
all I'm doing is getElement by className,

00:19:30.320 --> 00:19:33.720
and I give it the className post,
which is this one here.

00:19:33.740 --> 00:19:37.690
I iterate over the list of links or
list of elements that are returned.

00:19:37.700 --> 00:19:40.740
I create list items out of them,
and then I append them

00:19:40.850 --> 00:19:42.400
to the unordered list.

00:19:42.400 --> 00:19:46.060
And if you read the next function,
I do the exact same thing

00:19:46.560 --> 00:19:48.460
with querySelectorAll.

00:19:48.460 --> 00:19:51.910
But the querySelector
is a little different.

00:19:52.630 --> 00:19:54.620
I want to get all the posts,
but I want all the

00:19:54.620 --> 00:19:55.960
images in all the posts.

00:19:56.110 --> 00:19:58.500
So what I want to do is find
every image on the page,

00:19:58.600 --> 00:20:00.550
but I don't want every image on the page.

00:20:00.800 --> 00:20:04.100
I just want the images that
are inside of the posts.

00:20:04.100 --> 00:20:08.740
So it uses, obviously, as Geoff told you,
the CSS selector syntax,

00:20:08.820 --> 00:20:13.120
and it gets only images on
the posts-- or in the posts.

00:20:13.120 --> 00:20:15.710
So, for example,
the Surf and Safari logo in

00:20:15.720 --> 00:20:19.340
the top left is not going to be
found when I click this link.

00:20:19.480 --> 00:20:21.390
So let's do that now.

00:20:21.790 --> 00:20:23.660
And here's all the
images in all the posts,

00:20:23.660 --> 00:20:25.980
and I can click on any one of those,
and it'll bring up.

00:20:26.080 --> 00:20:29.500
There's our beloved Kate Hyatt,
daughter of Dave.

00:20:29.560 --> 00:20:31.930
And let's click another one.

00:20:33.230 --> 00:20:34.080
There she is again.

00:20:34.210 --> 00:20:37.910
So hopefully this shows you
just how easy it is to use.

00:20:37.940 --> 00:20:40.740
If you're using a library already,
you should be able to just

00:20:40.740 --> 00:20:41.940
use the exact same function.

00:20:41.940 --> 00:20:44.950
If not,
it was obviously very simple to just

00:20:45.070 --> 00:20:52.840
generate all the elements that I was
looking for using getElementsByClassName

00:20:52.840 --> 00:20:54.470
or CSSSelector syntax.

00:20:54.470 --> 00:20:54.470
And now I'll turn you back over to Geoff.

00:21:00.310 --> 00:21:05.310
Ladies and gentlemen,
Kate Hyatt and Kevin McCullough.

00:21:06.980 --> 00:21:08.440
So that was document manipulation.

00:21:08.440 --> 00:21:11.080
We showed you get elements by
class name when you want to rely on

00:21:11.080 --> 00:21:16.270
the class-based structure of your
document rather than tag names or IDs.

00:21:16.330 --> 00:21:18.730
And also,
for the most powerful syntax available,

00:21:18.800 --> 00:21:20.340
query selector and querySelectorAll.

00:21:23.840 --> 00:21:26.730
Now let's move on to the good stuff,
the new stuff, message passing.

00:21:26.730 --> 00:21:31.730
As you may remember from grade school,
life is a lot more fun

00:21:31.850 --> 00:21:34.730
when you can pass messages,
when you can connect and interact

00:21:34.760 --> 00:21:36.200
with the people around you.

00:21:36.200 --> 00:21:37.950
And the same is the case on the Internet.

00:21:37.950 --> 00:21:42.340
It's more interesting when documents that
you load can interact with one another.

00:21:42.340 --> 00:21:46.540
For example, what I described earlier,
the Lowe's ad knowing what I'm

00:21:46.540 --> 00:21:50.240
looking at in the map so that
it can give me tailored content.

00:21:51.020 --> 00:21:54.580
So I guess what I'd really like on the
client side is for all the documents

00:21:54.580 --> 00:21:58.630
I load into my web browser to be able
to access one another so that they can

00:21:58.630 --> 00:22:01.180
do that kind of sharing and cooperation.

00:22:02.820 --> 00:22:04.610
But there's a problem.

00:22:04.840 --> 00:22:08.450
You see, on the internet,
nobody knows that you're a dog.

00:22:09.380 --> 00:22:13.740
Which is my way of saying
that it's largely anonymous.

00:22:13.800 --> 00:22:17.400
You know, you don't -- when you click the
first link in an RSS feed or on Digg,

00:22:17.400 --> 00:22:20.420
you don't really do a background
check on the author of the page.

00:22:20.470 --> 00:22:21.790
You don't even know who
the author of the page is,

00:22:21.790 --> 00:22:22.500
and you don't care.

00:22:22.500 --> 00:22:28.750
You just trust that the browser's
going to display the page and,

00:22:28.750 --> 00:22:28.750
you know, not do anything bad.

00:22:29.380 --> 00:22:32.800
Of course, the author of the page may
not be a human or a dog.

00:22:33.000 --> 00:22:37.280
The author might be the Big Bad Wolf,
a hacker or a phisher or some other

00:22:37.280 --> 00:22:46.320
attacker who wants to steal your private
data in order to make bank transactions

00:22:46.320 --> 00:22:46.320
and send your account to Nigeria.

00:22:46.920 --> 00:22:49.430
Try to save a prince in Nigeria?

00:22:49.830 --> 00:22:53.190
Buy a bedpost from Nigeria?

00:22:53.940 --> 00:22:58.950
So I want to give you some examples,
two examples of the attacks that

00:22:58.960 --> 00:23:00.900
are possible in the web browser.

00:23:00.900 --> 00:23:04.100
This won't be a comprehensive discussion
of security in the web browser,

00:23:04.100 --> 00:23:07.120
but it should be enough
to give you a context for

00:23:07.320 --> 00:23:09.570
understanding message passing.

00:23:09.720 --> 00:23:13.490
So in the first attack, the question is,
what happens if documents can read

00:23:13.490 --> 00:23:15.700
from one another on the client side?

00:23:15.790 --> 00:23:19.780
So I have open in one window
my bank account website.

00:23:19.820 --> 00:23:24.150
And because I got to check my ad revenue,
I mean.

00:23:24.370 --> 00:23:26.530
And I have in the other
window a hacker website that

00:23:26.530 --> 00:23:27.790
I accidentally stumbled upon.

00:23:28.010 --> 00:23:30.700
So if documents on the client
side can read from one another,

00:23:30.730 --> 00:23:33.960
you'll notice that my bank account has
sensitive information in the website.

00:23:33.960 --> 00:23:38.150
It has my account number, my name,
my address, enough information to be

00:23:38.250 --> 00:23:39.790
able to withdraw funds.

00:23:40.010 --> 00:23:42.700
So if they can read from one another,
that hacker website can

00:23:42.700 --> 00:23:44.040
grab that data for itself.

00:23:44.040 --> 00:23:47.260
And now they're off to the
races with my ad revenue.

00:23:47.430 --> 00:23:51.580
If this happens to your own
website and the users of your site,

00:23:51.600 --> 00:23:56.180
then it can really cause you to fold.

00:23:57.700 --> 00:24:00.930
So in the second example, you might say,
OK, I'm not going to allow documents

00:24:01.090 --> 00:24:01.970
to read from one another.

00:24:02.020 --> 00:24:03.930
But what if I just allow them
to write to one another so

00:24:03.930 --> 00:24:05.130
they can at least communicate?

00:24:05.250 --> 00:24:08.750
Well, there's a problem here, too,
because you'll notice that the

00:24:08.750 --> 00:24:13.150
hacker has cleverly crafted a login
field that exactly matches the

00:24:13.150 --> 00:24:15.640
look and feel of my bank website.

00:24:15.640 --> 00:24:18.180
It has the same color scheme
and borders and everything.

00:24:18.180 --> 00:24:21.670
And so if the hacker can write
to a document on the client side,

00:24:21.670 --> 00:24:22.680
they can do this.

00:24:23.560 --> 00:24:25.860
And then all of a sudden,
I think that my bank account is

00:24:25.870 --> 00:24:30.170
asking me for my name and password,
and I type it in, and the hacker is once

00:24:30.170 --> 00:24:32.090
again off to the races.

00:24:32.980 --> 00:24:36.710
Because of these dangers,
the default browser security model

00:24:36.710 --> 00:24:42.000
simply prohibits access between
any documents on the client side,

00:24:42.070 --> 00:24:43.580
with one exception.

00:24:43.660 --> 00:24:48.570
The exception is if both documents
came from exactly the same origin,

00:24:48.820 --> 00:24:52.860
the assumption being that the origin
isn't keeping secrets from itself.

00:24:53.470 --> 00:24:57.680
In order to determine origin,
the browser applies a three-pronged test.

00:24:57.740 --> 00:24:59.990
The first prong is host.

00:25:00.610 --> 00:25:03.330
So, for example,
if I load a document from apple.com

00:25:03.390 --> 00:25:07.350
and a document from google.com,
they can't access one another

00:25:07.350 --> 00:25:09.390
because the host does not match.

00:25:10.030 --> 00:25:11.860
The second prong is port number.

00:25:12.020 --> 00:25:14.200
So, for example,
even if I load two documents,

00:25:14.200 --> 00:25:16.410
both from apple.com,
they still can't access one

00:25:16.410 --> 00:25:21.160
another if I loaded one from
port 80 and one from port 81.

00:25:21.900 --> 00:25:24.960
And finally, the third prong is Scheme.

00:25:25.120 --> 00:25:27.800
So once again,
two documents from apple.com.

00:25:27.890 --> 00:25:30.590
If I load them into the browser,
they still can't access one another if

00:25:30.590 --> 00:25:35.870
I loaded one through an HTTP URL and
the other through an FTP URL.

00:25:38.520 --> 00:25:41.960
Because of this browser security model,
I think you basically see two kinds

00:25:41.960 --> 00:25:44.040
of mashups on the Internet today.

00:25:44.150 --> 00:25:47.500
And the first I'll call no access.

00:25:47.630 --> 00:25:51.440
What we have here is a web page with
sensitive information from secure.com,

00:25:51.550 --> 00:25:53.620
and it wants to embed a banner ad.

00:25:53.770 --> 00:25:57.940
So what it does is it cuts out a portion
of its page where that ad will render,

00:25:58.040 --> 00:26:02.270
and it sticks the ad there in an iframe,
in a separate document.

00:26:02.490 --> 00:26:05.380
This is pretty good for ads
because it gives you a black box,

00:26:05.390 --> 00:26:07.900
but it's completely secure.

00:26:07.960 --> 00:26:10.920
But if the ad wants to use
JavaScript to access the context

00:26:11.110 --> 00:26:14.400
surrounding it in order to see
what's going on and customize itself,

00:26:14.480 --> 00:26:16.250
that's forbidden by the browser.

00:26:16.490 --> 00:26:19.230
So this model is pretty
good because it's secure,

00:26:19.240 --> 00:26:21.590
but it's not very flexible.

00:26:22.680 --> 00:26:26.240
And the second kind of
mashup I'll call full access.

00:26:26.350 --> 00:26:29.100
Here on secure.com,
I don't just want an ad anymore.

00:26:29.100 --> 00:26:31.480
I want to embed a full
user interface widget.

00:26:31.580 --> 00:26:34.940
So it really needs access to the
document around it in order to respond

00:26:34.940 --> 00:26:39.120
to events and interact and be a part of
the correct layout and things like that.

00:26:39.340 --> 00:26:41.350
So here the widget comes from widget.com.

00:26:41.370 --> 00:26:45.060
And in order to accomplish
this interaction,

00:26:45.060 --> 00:26:49.990
I've embedded the widget directly
into my document by loading

00:26:50.000 --> 00:26:50.240
a script from widget.com.

00:26:50.740 --> 00:26:54.400
In this full access mashup,
the flexibility is great.

00:26:54.400 --> 00:26:58.380
Through JavaScript,
the widget can access the whole document.

00:26:58.510 --> 00:27:02.690
But the danger here is that
the user will be hacked.

00:27:03.310 --> 00:27:06.220
If you include a script in this way,
you really have to trust the

00:27:06.310 --> 00:27:09.550
script's author and hope that
they're not going to conduct the

00:27:09.550 --> 00:27:12.830
kind of attack I showed you earlier,
either by reading information or

00:27:12.910 --> 00:27:16.970
by writing information or by karate
chopping and kicking your dog.

00:27:16.980 --> 00:27:20.810
And that's why I think we
see basically two kinds of

00:27:20.810 --> 00:27:23.480
mashups today on the Internet.

00:27:23.480 --> 00:27:28.170
We see ads, and we also see mashups with
highly trusted sources like mashups

00:27:28.310 --> 00:27:30.130
with Google and Microsoft Maps.

00:27:31.620 --> 00:27:32.560
But I want to see more.

00:27:32.560 --> 00:27:35.660
I want to see all of the potential
of the internet unleashed.

00:27:35.660 --> 00:27:38.160
And I think for this what we
need is a kind of Goldilocks

00:27:38.310 --> 00:27:43.760
solution that is not no access,
but at the same time it's not full

00:27:44.270 --> 00:27:45.800
access that leaves you insecure.

00:27:46.020 --> 00:27:52.460
Instead, it's kind of mediated access,
and that's what we call message passing.

00:27:53.400 --> 00:27:55.600
And here's what it looks like.

00:27:55.700 --> 00:27:59.200
So what we have here is two different
documents on different domains.

00:27:59.270 --> 00:28:01.640
And so we've loaded them
into different documents,

00:28:01.660 --> 00:28:04.880
and that way the browser applies
all of its security measures.

00:28:04.960 --> 00:28:07.080
But at the same time, the documents,
if they choose,

00:28:07.170 --> 00:28:10.380
can pass messages to one another,
and then the recipient can decide

00:28:10.380 --> 00:28:12.060
what to do with that message.

00:28:12.120 --> 00:28:15.830
And that way,
the message passer has no direct control

00:28:15.910 --> 00:28:19.280
and therefore cannot conduct attacks.

00:28:20.730 --> 00:28:24.700
There are new standards implemented
in the Safari 4 Developer Preview

00:28:24.820 --> 00:28:29.170
and also available in WebKit Nightly
Builds that implement this technology.

00:28:29.500 --> 00:28:32.900
The first half is the ability to
send a message to another document,

00:28:32.900 --> 00:28:36.340
and that's called
postMessage in JavaScript.

00:28:36.950 --> 00:28:40.780
It takes as its argument a message
string and a destination origin.

00:28:40.820 --> 00:28:42.680
Each of these arguments is important.

00:28:42.750 --> 00:28:46.060
The message is a string because
we don't want to let you send

00:28:46.180 --> 00:28:49.170
behavior to another document,
like an object or a function.

00:28:49.190 --> 00:28:51.740
If you could do that,
then you could conduct the second

00:28:51.740 --> 00:28:54.180
kind of attack I described,
of inserting a login field

00:28:54.180 --> 00:28:55.210
or something like that.

00:28:55.390 --> 00:28:57.620
So you can only send
primitive data a string,

00:28:57.620 --> 00:29:01.280
and it's up to the recipient
to decide what to do with it.

00:29:01.500 --> 00:29:04.640
You need to supply a destination
origin because if you're

00:29:04.640 --> 00:29:07.130
sending sensitive information,
you want to make sure that the

00:29:07.130 --> 00:29:10.910
browser verifies that it's going
only to the right recipients.

00:29:11.070 --> 00:29:13.390
If you like, if you're not sending
sensitive information,

00:29:13.440 --> 00:29:16.540
if you're just sending like the weather
or where we're located on a map,

00:29:16.630 --> 00:29:20.450
you can supply a wildcard, star,
and then anybody can receive

00:29:20.550 --> 00:29:22.070
the message if they like.

00:29:22.980 --> 00:29:24.980
Finally,
message passing through postMessage

00:29:24.980 --> 00:29:28.060
dispatches asynchronously,
so the browser won't really

00:29:28.170 --> 00:29:30.800
tell you who's receiving your
message or anything like that.

00:29:30.930 --> 00:29:34.130
Once again, for the sake of security,
and if you want a kind of API where

00:29:34.130 --> 00:29:36.790
you can know that people have
listened and received your messages,

00:29:36.790 --> 00:29:39.820
then they need to send
a message back to you.

00:29:40.770 --> 00:29:42.570
So here's an example
of calling postMessage.

00:29:42.580 --> 00:29:44.440
This is kind of a hello world.

00:29:44.460 --> 00:29:45.750
I'm on secure.com.

00:29:45.800 --> 00:29:48.100
I've embedded a widget
in another document.

00:29:48.110 --> 00:29:49.720
And I post a message, hello widget.

00:29:49.720 --> 00:29:52.900
And I specify I want this to go
to a document from widget.com.

00:29:52.900 --> 00:29:53.870
I think that's where it's going.

00:29:53.990 --> 00:29:55.670
Please verify.

00:29:57.370 --> 00:29:59.030
On the other side of the fence,
you need to be able to

00:29:59.030 --> 00:30:01.660
listen for messages,
and this is another new standard

00:30:01.660 --> 00:30:05.320
implemented in the Safari 4 developer
preview in the latest WebKit Nightly

00:30:05.320 --> 00:30:08.330
Builds for receiving a message,
and that's the message event.

00:30:08.340 --> 00:30:11.230
This is a message just like
any other message in the DOM,

00:30:11.230 --> 00:30:16.300
like onClick or the load event,
but this is the message event.

00:30:16.300 --> 00:30:20.180
And so here's an example of
registering for that inside the widget.

00:30:20.180 --> 00:30:23.750
First, I call addEventListener,
and I pass the string message to say

00:30:23.750 --> 00:30:25.860
I'm listening for the message event.

00:30:26.670 --> 00:30:28.940
And then I supply a function
that should be called when

00:30:28.960 --> 00:30:31.090
that message is passed to me.

00:30:31.260 --> 00:30:34.050
Importantly,
the first thing I always do is I check

00:30:34.230 --> 00:30:36.890
and verify the origin of the sender.

00:30:37.030 --> 00:30:38.790
For example,
if I'm going to respond to a message

00:30:38.800 --> 00:30:41.380
by coughing up sensitive information,
I need to make sure that the

00:30:41.490 --> 00:30:43.510
person asking is the right person.

00:30:43.640 --> 00:30:46.130
Otherwise,
a hacker can conduct an attack,

00:30:46.130 --> 00:30:47.930
even in this model.

00:30:48.450 --> 00:30:50.580
The second thing that I do
is I take the event data and

00:30:50.990 --> 00:30:52.740
I do my useful work with it.

00:30:52.790 --> 00:30:55.940
And the event data is the string
that was sent to postMessage.

00:30:55.940 --> 00:30:58.190
So here it's helloWidget.

00:30:58.440 --> 00:31:01.790
And finally, I might even reply to the
original sender so we can get

00:31:01.900 --> 00:31:03.660
two-way communication going.

00:31:03.660 --> 00:31:06.560
So this is a very powerful
API for two-way communication.

00:31:08.790 --> 00:31:11.730
So we have a demo of some of the
things you can do with message passing,

00:31:11.730 --> 00:31:14.140
and I'd like to invite back
to the stage Kate Hyatt,

00:31:14.180 --> 00:31:17.590
Kevin McCullough.

00:31:21.540 --> 00:31:23.400
Thank you, Geoff.

00:31:23.400 --> 00:31:28.040
So let's take a look at that.

00:31:28.060 --> 00:31:30.990
I've created yet another website.

00:31:31.680 --> 00:31:33.690
It's a fake social networking site.

00:31:33.820 --> 00:31:35.400
I call it My Planet WebKit.

00:31:35.400 --> 00:31:39.600
I've got my sufficiently awkward
self-image off to the right.

00:31:39.600 --> 00:31:43.410
It has some third-party applications,
and in the middle I have

00:31:43.520 --> 00:31:44.600
my list of friends.

00:31:44.600 --> 00:31:47.770
And apparently I need to get out more
because they're all inanimate objects.

00:31:48.020 --> 00:31:49.770
Or me.

00:31:51.320 --> 00:31:56.130
But let's say for this whole mashup
and message passing scenario,

00:31:56.140 --> 00:31:57.570
I want to play this third party game.

00:31:57.670 --> 00:31:59.740
On the far left, you see there's a third
party game button.

00:31:59.740 --> 00:32:00.700
I'm going to click that.

00:32:00.830 --> 00:32:02.380
And what it's going to do,
it's going to open the

00:32:02.380 --> 00:32:03.140
game in a new window.

00:32:03.380 --> 00:32:07.580
And I'm doing that because I want to show
you that these are on different domains.

00:32:08.860 --> 00:32:10.410
So here's my game.

00:32:10.500 --> 00:32:14.200
And I'm going to use the
Zoom feature to show you that--

00:32:14.850 --> 00:32:19.940
This domain is myplanetwebkit.org,
and this is game.thirdparty.com.

00:32:20.000 --> 00:32:21.920
Very creative.

00:32:23.030 --> 00:32:26.120
But you'll notice that the third
party game has my friends in there.

00:32:26.120 --> 00:32:30.090
It has their images, it has their names,
you can't see their names right now,

00:32:30.090 --> 00:32:30.860
but why is that?

00:32:30.950 --> 00:32:35.420
That's because I used post
message when the game was opened,

00:32:35.450 --> 00:32:40.250
to tell it that these are the URLs of
the images for these friends and it

00:32:40.250 --> 00:32:44.230
gave some context information so that
when I click on one of these images,

00:32:44.230 --> 00:32:47.730
it's gonna use post message back
to my social network to tell me

00:32:47.730 --> 00:32:51.900
that that friend was clicked on and
increase their score in the game.

00:32:51.900 --> 00:32:53.060
So I'll give you an example.

00:32:53.060 --> 00:32:55.090
It's very simple, obviously.

00:32:55.340 --> 00:32:55.850
Safari.

00:32:55.850 --> 00:32:57.680
Now, it has a click count of two.

00:32:57.700 --> 00:32:59.970
I clicked on it twice
on a different domain.

00:33:00.080 --> 00:33:00.990
It sent the message over.

00:33:01.120 --> 00:33:02.900
But this isn't really what you want.

00:33:02.920 --> 00:33:05.580
You want this game embedded
in your social network.

00:33:05.630 --> 00:33:07.990
So what I'm going to do is I've
set up so that when I click

00:33:08.060 --> 00:33:11.060
on the top image of the game,
it will embed itself

00:33:11.060 --> 00:33:12.800
inside the social network.

00:33:13.040 --> 00:33:14.740
So now it's in here.

00:33:14.740 --> 00:33:17.050
So now I can do the same thing.

00:33:17.560 --> 00:33:18.300
I can click.

00:33:18.310 --> 00:33:20.900
It's a really fun game.

00:33:20.900 --> 00:33:21.930
Safari is leading.

00:33:21.930 --> 00:33:23.340
Seafoam breaks ahead.

00:33:23.420 --> 00:33:26.520
Safari, Seafoam, who's going to -- oh!

00:33:27.750 --> 00:33:30.320
I play this all the time.

00:33:30.610 --> 00:33:33.010
So let's take a look at the code.

00:33:36.500 --> 00:33:40.210
So here's the code in the social network.

00:33:40.250 --> 00:33:44.100
At the top, I add an event listener
for the new message event.

00:33:44.450 --> 00:33:47.570
And then the next function under
it is a post message handler.

00:33:47.790 --> 00:33:54.250
And it checks the origin to see that
it came from the third party game.

00:33:54.250 --> 00:33:54.250
Just this line right here.

00:33:55.200 --> 00:35:28.600
[Transcript missing]

00:35:29.180 --> 00:35:34.760
If you notice this function, addToScore,
it actually uses querySelector.

00:35:34.800 --> 00:35:39.260
Remember from previously,
querySelector will get the first

00:35:39.320 --> 00:35:43.700
element that matches the CSS selector,
and I am dynamically inserting

00:35:43.700 --> 00:35:48.000
the friend's name into the ID that
I want to use to get which friend,

00:35:48.000 --> 00:35:51.100
because I know each friend
has a score element,

00:35:51.100 --> 00:35:55.970
or an element with the score class name,
but I don't know which one it is until

00:35:55.970 --> 00:35:58.520
the post message is actually received.

00:35:58.560 --> 00:36:01.210
So that's just another example
of how to use querySelector.

00:36:01.210 --> 00:36:04.100
And with that,
I'll turn you back over to Geoff.

00:36:09.410 --> 00:36:11.650
Thanks, Kevin.

00:36:11.970 --> 00:36:14.660
So that was message passing.

00:36:14.660 --> 00:36:17.060
You use postMessage in
order to send a message,

00:36:17.130 --> 00:36:21.560
and you call addEventListener and specify
the message event in order to listen.

00:36:21.840 --> 00:36:25.420
Kevin showed you an example of two
components that really trust one another.

00:36:25.530 --> 00:36:28.680
So you're sending names of friends
and images and things like that.

00:36:28.790 --> 00:36:30.900
And that's one possible configuration.

00:36:31.060 --> 00:36:33.750
But the important thing to take away
here is that there's a wide range

00:36:33.750 --> 00:36:35.940
of configurations available to you.

00:36:36.050 --> 00:36:39.250
So sometimes, you're going to make data
available to everybody,

00:36:39.340 --> 00:36:40.440
for example, the weather.

00:36:40.620 --> 00:36:43.950
And sometimes, you're going to decide not
to make any data available,

00:36:43.950 --> 00:36:45.620
for example, a bank website.

00:36:45.640 --> 00:36:48.480
And there's a lot of in
between there as well,

00:36:48.520 --> 00:36:50.800
depending on what you're trying to do.

00:36:52.350 --> 00:36:56.440
Finally, let's cover access control.

00:36:56.590 --> 00:36:59.040
So here I have Google Maps,
and it's great.

00:36:59.040 --> 00:37:02.150
I can interact with this
map that it's showing me.

00:37:02.500 --> 00:37:05.360
But critically,
it gets all of its data to update

00:37:05.360 --> 00:37:08.160
the map from maps.google.com.

00:37:08.320 --> 00:37:10.310
For example,
you can't configure your server to

00:37:10.420 --> 00:37:15.310
store your data on data.google.com or
anything like that because the browser

00:37:15.310 --> 00:37:20.520
will prohibit that access based on
the origin test I described earlier.

00:37:20.660 --> 00:37:23.870
That also means that you can't
include multiple kinds of

00:37:23.880 --> 00:37:25.140
data from different sources.

00:37:25.150 --> 00:37:27.880
For example,
when I'm looking at San Francisco,

00:37:27.950 --> 00:37:29.970
I'd really like to know
about the weather here.

00:37:30.180 --> 00:37:34.140
But Google can't go out to weather.com
or the National Observatory in

00:37:34.160 --> 00:37:39.810
order to get that data because the
browser denies that access as well.

00:37:40.080 --> 00:37:41.960
Another thing that would be
great for Google to show me in

00:37:41.960 --> 00:37:44.140
San Francisco is maybe the news.

00:37:44.240 --> 00:37:47.510
I learned at the WebKit party that
the New York Times is looking into

00:37:47.570 --> 00:37:51.030
making freely available a lot of
its news stories for any websites

00:37:51.030 --> 00:37:52.530
that want to aggregate them.

00:37:52.770 --> 00:37:55.470
And this would have been really
helpful for me when I lived in

00:37:55.470 --> 00:37:58.560
San Francisco because I used to
go to this barbecue joint all the

00:37:58.560 --> 00:38:01.780
time and I would get directions
to that through Google Maps.

00:38:01.920 --> 00:38:05.020
And it turns out that that was really
the number one place for people

00:38:05.080 --> 00:38:06.820
to be murdered in San Francisco.

00:38:06.890 --> 00:38:10.130
And maybe a couple news stories along
that line as I was looking at part

00:38:10.270 --> 00:38:12.840
of that map would have been nice,
you know.

00:38:13.110 --> 00:38:16.130
But don't worry, I survived.

00:38:16.140 --> 00:38:17.790
So like I said,
the browser security model

00:38:17.790 --> 00:38:18.910
prohibits that access.

00:38:19.140 --> 00:38:21.440
And the reason is that
the hosts don't match.

00:38:21.490 --> 00:38:24.930
Maps.google.com does not
match data.google.com,

00:38:25.130 --> 00:38:28.400
nor does it match weather.com
or any of those other servers

00:38:28.410 --> 00:38:31.950
you might want to access,
newyorktimes.com, et cetera.

00:38:32.590 --> 00:38:34.850
So in order to explain this,
I'm going to give you another brief

00:38:34.880 --> 00:38:37.010
explanation of a potential attack.

00:38:37.290 --> 00:38:39.740
Once again,
I have a hacker website accidentally

00:38:39.740 --> 00:38:42.720
opened in one window and my
bank website in another window.

00:38:42.780 --> 00:38:46.410
And each of those is able to
get access to its own server,

00:38:46.580 --> 00:38:48.930
hacker.com and bank.com.

00:38:49.010 --> 00:38:54.140
But what happens now if the hacker
website tries to make a request to my

00:38:54.140 --> 00:38:59.300
bank web server in order to directly
initiate a funds transfer to Nigeria?

00:38:59.300 --> 00:39:03.070
What happens is on the internet,
nobody knows you're a dog.

00:39:03.080 --> 00:39:03.880
They don't know who you are.

00:39:03.880 --> 00:39:05.220
It's largely anonymous.

00:39:05.350 --> 00:39:09.370
All that the bank sees is that there's
a request coming from my web browser

00:39:10.030 --> 00:39:13.890
over my IP address during my session,
which is maintained by

00:39:13.950 --> 00:39:15.260
cookies and other things.

00:39:15.490 --> 00:39:16.940
So it looks like me.

00:39:17.070 --> 00:39:20.570
The hacker is masquerading as me when
it makes this request to my bank.

00:39:20.660 --> 00:39:23.300
And that's why the browser prohibits it.

00:39:23.340 --> 00:39:26.950
Once again, what we need is a kind of
Goldilocks solution that doesn't

00:39:26.950 --> 00:39:28.940
prohibit any access to any server.

00:39:29.000 --> 00:39:34.170
But at the same time, when you do access,
it doesn't allow you to pretend to be me.

00:39:34.220 --> 00:39:37.040
And so that's the new standard
that we've implemented in Safari,

00:39:37.040 --> 00:39:38.340
and it's called access control.

00:39:38.380 --> 00:39:40.690
And basically,
all it is is when you make one

00:39:40.690 --> 00:39:44.240
of these cross-site requests,
we stamp it with the identity of

00:39:44.250 --> 00:39:46.140
the origin making the request.

00:39:46.310 --> 00:39:49.070
So here we've stamped the
hacker onto the request.

00:39:49.200 --> 00:39:53.520
And I'm pretty sure the bank
is going to say no to this one.

00:39:54.680 --> 00:39:57.000
So this is a new standard we've
implemented in the Safari 4

00:39:57.000 --> 00:39:59.720
developer preview in the
latest WebKit Nightly Builds.

00:39:59.760 --> 00:40:02.960
It's called Access Control,
and it's a two-part stage,

00:40:03.110 --> 00:40:04.450
two-part handshake.

00:40:04.690 --> 00:40:06.660
The first part of the
handshake is Safari's job,

00:40:06.660 --> 00:40:11.100
where it will send an extra
request header in the HTTP requests

00:40:11.100 --> 00:40:12.390
you see on the server side.

00:40:12.440 --> 00:40:15.120
And that header is Access Control origin.

00:40:15.140 --> 00:40:18.200
That's what stamps the big
bad wolf onto the connection.

00:40:18.200 --> 00:40:21.380
It says the origin of
this request is whomever.

00:40:21.600 --> 00:40:25.370
So in the maps.google.com case,
you'll see something like this when

00:40:25.370 --> 00:40:26.780
the request comes over the wire.

00:40:26.790 --> 00:40:31.200
Access Control origin
of http maps.google.com.

00:40:31.480 --> 00:40:34.680
Now, once you see a request on
the server side like this,

00:40:34.870 --> 00:40:37.990
you have a wide range of
options available to you.

00:40:38.180 --> 00:40:40.000
The first thing that you
can do is you can do exactly

00:40:40.000 --> 00:40:41.360
what your servers do today.

00:40:41.490 --> 00:40:44.490
Ignore this extra header,
respond to the request as normal,

00:40:44.580 --> 00:40:47.990
and then the browser will see that you
have not participated in the handshake,

00:40:48.090 --> 00:40:51.270
and it will drop the request,
and the connection will

00:40:51.270 --> 00:40:52.770
fail as it does today.

00:40:52.980 --> 00:40:56.200
The second option you have is
you can inspect the request,

00:40:56.240 --> 00:40:58.400
look at the origin,
decide if you want to send back data,

00:40:58.400 --> 00:41:00.360
and maybe you decide no.

00:41:00.410 --> 00:41:02.430
In that case, just don't respond.

00:41:02.510 --> 00:41:06.720
And the browser will drop
the request just like today.

00:41:06.780 --> 00:41:09.900
But if you do choose to respond
and participate in the handshake,

00:41:09.950 --> 00:41:13.200
your server needs to send
back another special header,

00:41:13.200 --> 00:41:15.300
the access control header.

00:41:15.360 --> 00:41:18.940
And this header specifies who
should get access to this response,

00:41:19.050 --> 00:41:21.880
the origin that should get
access to this response.

00:41:22.050 --> 00:41:23.420
So the simplest-- I'm sorry.

00:41:23.420 --> 00:41:27.460
There's a fairly powerful syntax
available to you where you can

00:41:27.560 --> 00:41:31.680
supply a whitelist and a blacklist
through allow and exclude.

00:41:31.730 --> 00:41:34.080
The excludes are optional.

00:41:35.470 --> 00:41:38.580
I'm not going to go deeply into
the syntax because the simplest

00:41:38.630 --> 00:41:41.530
thing for you to do is just make
the decision on the server side of

00:41:41.530 --> 00:41:44.700
whether you want to allow or deny,
and then just copy and paste

00:41:44.870 --> 00:41:48.670
the URL that is the origin into
your access control response.

00:41:48.720 --> 00:41:51.920
So here the simplest thing to do,
if weather.com wants to provide

00:41:51.920 --> 00:41:55.410
the weather to google.com,
it can just respond by saying

00:41:55.420 --> 00:41:57.790
allow http maps.google.com.

00:41:58.780 --> 00:42:03.080
Or maybe Google hasn't paid its
bill this year and weather.com

00:42:03.080 --> 00:42:06.120
wants to deny the data,
in which case it can just not respond

00:42:06.120 --> 00:42:09.510
or respond without the special
header and the connection will fail.

00:42:16.780 --> 00:42:20.700
We have a demo of Access Control,
and here's Kevin McCullough.

00:42:21.980 --> 00:42:28.470
Thanks again, Geoff.

00:42:31.850 --> 00:42:37.800
So in this fictitious world of
social networks that I've created,

00:42:37.800 --> 00:42:40.220
I'm also assuming-- well,
I'm going to assume,

00:42:40.290 --> 00:42:44.050
I'm going to assert-- that I've
created an online dating site.

00:42:44.160 --> 00:42:45.660
And these are on two different domains.

00:42:45.660 --> 00:42:47.220
They're two different sites.

00:42:47.240 --> 00:42:50.620
But I've made both of them,
and I'd like to be able to share that

00:42:51.000 --> 00:42:53.660
information if the user opts into it.

00:42:53.660 --> 00:42:56.980
So if you'll notice on
the left of my demo here,

00:42:57.000 --> 00:43:01.500
there's this red heart, and it says,
to get my romance connection information.

00:43:01.670 --> 00:43:05.330
And that's going to make a
cross-domain XML HTTP request to

00:43:05.330 --> 00:43:11.090
attempt to figure out who I've
registered as my romantic interest.

00:43:14.530 --> 00:43:17.880
says, if that's too small, but it says,
I'm not authorized.

00:43:17.890 --> 00:43:18.990
I haven't actually set that up yet.

00:43:19.100 --> 00:43:21.150
So let's go ahead and do that.

00:43:25.490 --> 00:43:32.750
Open a new window, and I'm going to go
to Romance Connection.

00:43:32.860 --> 00:43:34.870
I look pretty good.

00:43:35.900 --> 00:43:40.140
Again, I have kind of-- you can tell
it's made by the same person.

00:43:40.140 --> 00:43:42.120
I've got my user information on the left.

00:43:42.230 --> 00:43:45.520
I've got people interested in the middle.

00:43:45.520 --> 00:43:45.520
Geoff?

00:43:46.840 --> 00:43:50.700
Let's go ahead and click
reject on that one.

00:43:50.700 --> 00:43:53.340
So I have a couple of
people interested in me,

00:43:53.340 --> 00:43:56.850
and on the right-hand side
I have a button that says to

00:43:56.980 --> 00:44:01.150
share my romance connection
information with my other site,

00:44:01.150 --> 00:44:03.150
myplanet.webkit.org.

00:44:03.400 --> 00:44:05.450
So I'm going to click on that.

00:44:05.710 --> 00:44:10.840
And it says the Romance Connection is now
sharing information with MyPlanet WebKit.

00:44:11.220 --> 00:44:17.060
And what that's done is behind the scenes
registered that domain in a database.

00:44:17.390 --> 00:44:22.410
So when we look later at the header,
you'll see that that gets added

00:44:22.430 --> 00:44:24.760
to the access control list.

00:44:24.760 --> 00:44:28.860
Then I'm going to have to go ahead and
pick somebody who I'm interested in.

00:44:29.070 --> 00:44:32.280
And of course, who wouldn't pick Seafoam?

00:44:32.920 --> 00:44:35.780
And so I'm all set to go.

00:44:35.880 --> 00:44:39.110
Except on the far left here in
this black and white button,

00:44:39.140 --> 00:44:44.030
you might notice it says,
show malicious gossip ad.

00:44:44.150 --> 00:44:47.730
I haven't embedded that because
I want to pop it open again and show

00:44:47.730 --> 00:44:49.500
you that it's on a different domain.

00:44:49.600 --> 00:44:52.760
So just like the third party game,
I'm going to do that.

00:44:53.440 --> 00:44:57.800
And it opens kevingossip.com because
in the world that I've set up,

00:44:57.930 --> 00:45:00.530
somebody is interested in gossip on me.

00:45:00.870 --> 00:45:02.760
And this is my demo,
so you're all living in my

00:45:02.760 --> 00:45:04.940
fantasy world for today.

00:45:05.370 --> 00:45:08.300
Let's go ahead and look at that domain.

00:45:08.410 --> 00:45:11.690
And it is in fact kevin.gossip.com.

00:45:11.750 --> 00:45:16.160
I'm going to go ahead and embed
that back into my Romance website.

00:45:16.260 --> 00:45:19.170
So now this is the scenario that
Geoff was talking about where I've

00:45:19.170 --> 00:45:23.100
got a malicious ad that I'm logged in,
so it's got my session cookies being

00:45:23.100 --> 00:45:25.200
sent when it makes an XMLHttpRequest.

00:45:25.420 --> 00:45:28.700
And likewise, it's from my IP address.

00:45:28.740 --> 00:45:31.600
So for a lot of ways,
it might seem like this

00:45:31.600 --> 00:45:33.060
is me making this request.

00:45:33.360 --> 00:45:36.250
This would probably happen on load,
but I've set it up so

00:45:36.340 --> 00:45:39.340
when I click this button,
it's going to attempt to

00:45:39.610 --> 00:45:44.590
make that request of my
Romance Connections database.

00:45:45.230 --> 00:45:47.890
And it could not get my information,
so that's great.

00:45:47.940 --> 00:45:50.600
So let's take a look at
that code real quick.

00:45:53.600 --> 00:45:59.540
So here's the code for the
gossip website malicious ad.

00:45:59.590 --> 00:46:05.000
All it's doing is making
an XMLHttpRequest.

00:46:05.000 --> 00:46:08.840
It does a get on
romanceconnection.com database

00:46:08.840 --> 00:46:13.400
romancecgi and sends that request.

00:46:14.170 --> 00:46:17.480
If it fails,
then it puts up this blocked message.

00:46:17.490 --> 00:46:20.200
If it succeeds, it's going to put up
the accessed message.

00:46:20.850 --> 00:46:25.690
Now, the next piece of code I'm going to
show you is the exact same function.

00:46:26.300 --> 00:47:20.100
[Transcript missing]

00:47:22.270 --> 00:47:24.560
And let's see what happens now.

00:47:24.630 --> 00:47:26.390
Hey, Seafoam.

00:47:26.540 --> 00:47:28.920
So this is our mashup.

00:47:28.980 --> 00:47:31.600
We have three different domains.

00:47:31.600 --> 00:47:34.150
We have a dating website,
we have a social networking site,

00:47:34.230 --> 00:47:36.050
and we have a third-party game.

00:47:36.090 --> 00:47:39.440
They're all interacting with
the main host site in ways

00:47:39.440 --> 00:47:43.330
that are opt-in and secure,
and you have now data from

00:47:43.330 --> 00:47:46.870
all these different domains
interacting with each other.

00:47:46.870 --> 00:47:50.870
And so with that,
I'll turn you back over to Geoff.

00:47:55.810 --> 00:48:00.900
Thanks, Kevin.

00:48:00.980 --> 00:48:02.140
So that was Access Control.

00:48:02.140 --> 00:48:05.040
It's a new handshake between
the browser and the server.

00:48:05.190 --> 00:48:07.330
The browser will send an
Access Control origin to

00:48:07.370 --> 00:48:10.320
stamp a connection with the
origin making the request.

00:48:10.370 --> 00:48:14.150
And if the server wants to opt in,
it can send an Access Control response

00:48:14.220 --> 00:48:18.980
to specify what origin can
access the resulting data.

00:48:19.080 --> 00:48:21.550
Just like with postMessage
and the message event,

00:48:21.680 --> 00:48:25.740
Access Control allows a wide
range of security configurations.

00:48:25.940 --> 00:48:29.020
Some servers will just say, "Yeah, sure,
always.

00:48:29.070 --> 00:48:29.460
I don't care.

00:48:29.560 --> 00:48:30.950
It's the weather.

00:48:30.970 --> 00:48:34.490
It's the news." Some servers
will just not participate at all,

00:48:34.490 --> 00:48:35.050
like my bank.

00:48:35.100 --> 00:48:38.030
I sure hope it doesn't
participate in this handshake.

00:48:38.180 --> 00:48:41.880
And some servers will have interesting
intermediate configurations where

00:48:41.880 --> 00:48:45.560
they'll make some of the decisions
or they'll ask the web browser to

00:48:45.560 --> 00:48:49.370
make the decision for them based
on a list of allow and exclude.

00:48:49.580 --> 00:48:52.530
The point here is that it's
really up to you to configure

00:48:52.550 --> 00:48:54.450
your servers as you like.

00:48:54.460 --> 00:48:56.520
And I think that with both
of these technologies,

00:48:56.520 --> 00:49:00.950
Access Control and message passing,
what you'll start seeing is that

00:49:01.040 --> 00:49:04.960
different sources will start rolling
out support for these technologies.

00:49:04.960 --> 00:49:06.990
For example, you know,
the New York Times will start

00:49:06.990 --> 00:49:10.780
supporting with its own data servers,
and other clients that you interact

00:49:10.780 --> 00:49:15.580
with might want to start configuring
their ads to accommodate these APIs.

00:49:15.580 --> 00:49:18.080
And more and more,
you'll see support for this on the web.

00:49:18.080 --> 00:49:20.620
And if you're managing your
own data and your own servers,

00:49:20.620 --> 00:49:21.080
you get that flexibility.

00:49:21.080 --> 00:49:21.550
- Yeah.

00:49:21.620 --> 00:49:21.620
- Yeah.

00:49:21.670 --> 00:49:23.560
You get that flexibility immediately.

00:49:23.630 --> 00:49:27.020
You can start putting data on whatever
origin you like and configuring it,

00:49:27.020 --> 00:49:29.390
configuring your hosts how you like.

00:49:30.070 --> 00:49:31.160
So that's all I have for you today.

00:49:31.160 --> 00:49:34.260
We covered document manipulation,
APIs that have been in use

00:49:34.590 --> 00:49:36.790
sort of for a while now,
but haven't been standardized.

00:49:36.800 --> 00:49:37.990
Now they are standardized.

00:49:38.170 --> 00:49:39.540
They're implemented in Safari.

00:49:39.750 --> 00:49:42.180
They're a lot easier to
use and faster than before.

00:49:42.200 --> 00:49:45.340
We covered message passing,
a technology for documents on

00:49:45.340 --> 00:49:49.070
the client side from different
origins to securely communicate

00:49:49.070 --> 00:49:51.380
and mash up in an opt-in fashion.

00:49:51.410 --> 00:49:54.740
And finally, access control,
technology for a document on

00:49:54.740 --> 00:49:57.980
the client side to be able
to access data from multiple

00:49:58.030 --> 00:50:00.650
servers if they choose to opt in.

00:50:01.900 --> 00:50:05.370
For more information on WebKit,
the engine that powers Safari on

00:50:05.370 --> 00:50:09.070
iPhone and Macintosh and Windows,
you can check out the

00:50:09.070 --> 00:50:10.760
WebKit open source project.

00:50:10.940 --> 00:50:13.950
We have a website and
also an IRC channel.

00:50:15.360 --> 00:50:19.560
Our technologies evangelists are
Vicki Murley and Mark Malone,

00:50:19.560 --> 00:50:20.820
if you want to get in
touch with them by email.

00:50:22.680 --> 00:50:26.420
We've got some great related
sessions coming up later today.

00:50:26.580 --> 00:50:30.080
Utilizing offline data in Safari will
teach you how to keep data that's

00:50:30.080 --> 00:50:33.070
specific to the user on the user's
computer so they can continue using

00:50:33.070 --> 00:50:36.990
your application even when they're
offline and so that when they're online,

00:50:37.000 --> 00:50:40.490
the application runs a little faster
because it doesn't have to round trip to

00:50:40.490 --> 00:50:45.200
your network in order to get data that
doesn't really need to be on your host.

00:50:45.200 --> 00:50:47.080
It's not as dynamic as the other stuff.

00:50:47.130 --> 00:50:50.500
We'll also cover debugging websites
using our integrated developer tools,

00:50:50.580 --> 00:50:54.640
which is really essential if you're
trying to do anything complex in Safari.