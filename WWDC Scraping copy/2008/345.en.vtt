WEBVTT

00:00:20.100 --> 00:00:21.080
My name is Shawn Geddis.

00:00:21.160 --> 00:00:24.800
I'm security consulting engineer
in Apple's enterprise division.

00:00:24.970 --> 00:00:28.550
And hopefully today most of you
are either in the IT space or if

00:00:28.550 --> 00:00:31.260
you're a developer you just want
to get a little bit more knowledge

00:00:31.830 --> 00:00:33.400
with respect to certificates.

00:00:33.560 --> 00:00:35.700
Because this is more,
this session is geared more

00:00:35.700 --> 00:00:38.560
towards kind of the high level
approach on certificates,

00:00:38.610 --> 00:00:41.390
validation uses of identities
and things like that.

00:00:41.520 --> 00:00:44.860
So just to help set expectations.

00:00:45.710 --> 00:00:47.870
Let's kind of move forward here.

00:00:48.150 --> 00:00:52.380
First of all,
what do we mean by the use of identities

00:00:52.410 --> 00:00:56.190
and what is it that we really want to
kind of introduce to you here today?

00:00:56.360 --> 00:00:59.060
When you're in kind of the digital world,
you've got to prove who you

00:00:59.060 --> 00:01:00.730
are or kind of assert yourself.

00:01:00.920 --> 00:01:04.600
So that's one of the things we want to
get into is using trusted identities.

00:01:04.600 --> 00:01:07.860
We want to walk you through,
hopefully we'll give you some new

00:01:07.860 --> 00:01:11.790
information here about the creation,
the management and the use of those

00:01:11.790 --> 00:01:13.850
identities in the digital world.

00:01:13.880 --> 00:01:17.860
And that should then allow you
to leverage the collaboration

00:01:17.860 --> 00:01:22.160
services we have built into the
OS or things like on the phone.

00:01:23.080 --> 00:01:27.100
And then show you or kind of
walk you through kind of that

00:01:27.130 --> 00:01:31.850
improved user experience related
to the use of identities.

00:01:32.310 --> 00:01:35.200
So again, kind of emphasizing here
about the retrieving,

00:01:35.200 --> 00:01:40.580
storing and validating identities itself,
the trust.

00:01:40.580 --> 00:01:44.180
There's a lot of folks within
IT space that are moving towards

00:01:44.390 --> 00:01:51.580
heavy use of PKI certificates,
the public private key approach here.

00:01:51.660 --> 00:01:55.520
And the whole concept trust
gets a little bit complicated.

00:01:55.570 --> 00:01:58.130
We've been dealing with this
kind of content for the last

00:01:58.130 --> 00:02:00.160
couple of years within WWDC.

00:02:00.240 --> 00:02:03.910
And we just have realized from
experience with some attendees,

00:02:03.910 --> 00:02:06.740
we just need to kind of reinforce
some of this as we go forward.

00:02:06.790 --> 00:02:09.450
But most of all,
we want to show you some of those

00:02:09.670 --> 00:02:12.090
built-in services within OS X.

00:02:12.210 --> 00:02:15.690
So as we talk about these
identities or these services,

00:02:15.700 --> 00:02:18.420
these tools,
we always have to step back and think

00:02:18.420 --> 00:02:20.690
about the problems we're trying to solve.

00:02:20.760 --> 00:02:24.790
The real world problems we're trying
to solve in your organization,

00:02:24.790 --> 00:02:26.670
within your infrastructure.

00:02:26.790 --> 00:02:29.590
It's the assertion of who we
are in this digital world.

00:02:29.830 --> 00:02:36.000
How to acquire those identities
and retain and protect them safely.

00:02:36.420 --> 00:02:39.450
The session just earlier
was talking about secure

00:02:39.540 --> 00:02:42.040
application or secure programming.

00:02:42.130 --> 00:02:43.130
How do we do that with the identities?

00:02:43.180 --> 00:02:45.800
How do we keep that
secure once we obtain it?

00:02:45.880 --> 00:02:48.780
How do we prove who we are
and then are always able to

00:02:48.940 --> 00:02:50.830
assert that wherever we are?

00:02:51.040 --> 00:02:54.880
Again, collaboration with the
trusted identities.

00:02:55.960 --> 00:02:57.410
We want to generate and deploy this.

00:02:57.510 --> 00:03:02.700
Many of you may have begun to do
some things with certificates.

00:03:02.960 --> 00:03:07.170
You may not know how best to do that
deployment within your environment,

00:03:07.350 --> 00:03:10.600
how to get those certificates
out to all your users,

00:03:10.680 --> 00:03:15.920
whether they be mobile or whether they be
within a given building or organization.

00:03:16.000 --> 00:03:19.000
How do you get these
identities to all your users?

00:03:19.800 --> 00:03:20.390
So let's do this.

00:03:20.570 --> 00:03:22.940
First of all,
I've been mentioning the word

00:03:22.940 --> 00:03:23.940
identity quite a bit here.

00:03:23.940 --> 00:03:25.850
What does it really mean?

00:03:26.080 --> 00:03:30.950
And from a standpoint of PKI here,
an identity is really a certificate

00:03:31.150 --> 00:03:33.180
with a corresponding private key.

00:03:33.260 --> 00:03:33.700
Right?

00:03:33.800 --> 00:03:37.690
And the certificate, to most,
it's easily understood if you think

00:03:37.780 --> 00:03:39.230
of kind of a bill of materials.

00:03:39.310 --> 00:03:43.090
You've got kind of a list of things
and that pulls it all together.

00:03:43.330 --> 00:03:46.000
It's kind of the association
of these objects.

00:03:46.060 --> 00:03:51.000
And combining those two
together effectively represents

00:03:51.000 --> 00:03:54.820
you as a unique identity,
again, within this digital world.

00:03:55.070 --> 00:03:56.970
And that private key
is something you have.

00:03:57.110 --> 00:04:02.000
So it's always this something you have
and something you hold and protect.

00:04:02.000 --> 00:04:03.870
Again, that being the private key.

00:04:03.990 --> 00:04:08.130
And that comes into play all along
the private and public key here.

00:04:08.260 --> 00:04:11.270
So a typical identity,
keep in mind whether you're in IT or

00:04:11.270 --> 00:04:15.900
whether you're on the development side,
that many more instances,

00:04:15.920 --> 00:04:20.400
I as an individual or you,
can have multiple identities.

00:04:20.400 --> 00:04:20.590
Right?

00:04:20.640 --> 00:04:25.070
I can have multiple identities
for a given email address.

00:04:25.110 --> 00:04:29.400
I can sign my messages with
an identity I get from,

00:04:29.400 --> 00:04:32.970
say, VeriSign or Thought or
maybe I issue my own.

00:04:33.210 --> 00:04:36.390
So don't always assume or take
for granted that every individual

00:04:36.390 --> 00:04:40.670
is always going to have a single
identity at all within this world.

00:04:40.780 --> 00:04:44.910
And a typical approach when we think
of the storing of this identity is that

00:04:44.910 --> 00:04:50.040
I have a particular kind of identity
with private key and the certificate.

00:04:50.330 --> 00:04:54.030
And then we get into the email,
we get into VPN, we get into client-side

00:04:54.030 --> 00:04:56.160
authentication for web access.

00:04:56.250 --> 00:04:58.730
These are going to be
all the different usages.

00:04:58.920 --> 00:05:02.050
So let's start with the usage scenario
that you're going to face is how

00:05:02.190 --> 00:05:05.220
do I obtain this as an end user,
as an IT individual?

00:05:05.350 --> 00:05:07.650
How do I obtain an identity?

00:05:08.050 --> 00:05:10.720
Well,
there's a couple methods and the one that

00:05:10.720 --> 00:05:15.090
we most often use is obtaining that from
some well-known certificate authority.

00:05:15.100 --> 00:05:18.900
We do the request,
we get that issued to us,

00:05:19.160 --> 00:05:21.330
we have our identity.

00:05:21.340 --> 00:05:23.180
Well, you can go further.

00:05:23.180 --> 00:05:27.170
Here we're listing web-based and
typically most of us are issuing

00:05:27.170 --> 00:05:29.360
maybe with VeriSign and others.

00:05:30.140 --> 00:05:33.860
You think about .Mac,
those of you who had .Mac services,

00:05:33.860 --> 00:05:36.950
you had iChat,
you had similar things where

00:05:36.950 --> 00:05:38.260
you get your .Mac identity.

00:05:38.300 --> 00:05:42.760
iPhone, if you are an iPhone developer,
you should have been issued your

00:05:42.760 --> 00:05:44.740
iPhone development identity as well.

00:05:44.740 --> 00:05:47.880
The final one is one that we're
going to hit on a lot today and

00:05:47.880 --> 00:05:50.860
that is creating your own identity,
creating your own certificate

00:05:51.190 --> 00:05:54.540
authority and taking kind of the
issuance into your own hands.

00:05:55.400 --> 00:05:56.990
So let's walk through this process.

00:05:57.090 --> 00:05:59.440
So if you're obtaining
an identity from a CA,

00:05:59.500 --> 00:06:02.330
the first thing is I'm
on Bob's computer here.

00:06:02.330 --> 00:06:07.340
So I'm going to create my
public/private key pair and I'm then

00:06:07.340 --> 00:06:11.770
going to submit this as a request,
a CSR, certificate signing request.

00:06:11.830 --> 00:06:16.000
I'm going to submit that to the CA,
the certificate authority,

00:06:16.000 --> 00:06:19.740
saying please issue me a
certificate for this purpose,

00:06:19.740 --> 00:06:23.390
for various purposes that,
for maybe email, again for VPN,

00:06:23.400 --> 00:06:24.700
things like this.

00:06:24.750 --> 00:06:29.050
And once that is approved at the CA,
that's going to be issued back

00:06:29.050 --> 00:06:30.580
to me for the actual certificate.

00:06:30.630 --> 00:06:35.140
Now again, remember that's that bill of
materials now associates my keys,

00:06:35.310 --> 00:06:38.490
who I am and binds all
that information together.

00:06:39.050 --> 00:06:42.140
So if I do that effectively,
that's one method.

00:06:42.210 --> 00:06:46.250
But another similar method is how about
if the CA did the actual creation of

00:06:46.310 --> 00:06:48.600
those keys and pushed them all to me.

00:06:48.620 --> 00:06:52.680
So this would be, again,
the situation of the certificate

00:06:52.680 --> 00:06:56.240
authority generating the
key pairs on my behalf.

00:06:56.280 --> 00:06:59.940
This may be an environment like
auto-enrollment where you are

00:06:59.940 --> 00:07:03.350
the IT admin and you are kind
of pre-enrolling your users and

00:07:03.540 --> 00:07:05.900
pushing out their identity to them.

00:07:06.800 --> 00:07:10.080
So the CA in this case
generates the key pairs,

00:07:10.290 --> 00:07:14.090
signs the certificate itself
and then does that wrapping of

00:07:14.300 --> 00:07:16.210
that identity into the P12 file.

00:07:16.260 --> 00:07:19.750
That's really kind of the secure
wrapping of the full identity.

00:07:19.760 --> 00:07:23.140
Pushes it down to the individual,
Bob's computer.

00:07:23.600 --> 00:07:27.960
They import that into
their key chain in OS X.

00:07:27.960 --> 00:07:30.950
Now they have the same end result,
their public/private key

00:07:31.070 --> 00:07:32.580
pair and their certificate.

00:07:32.580 --> 00:07:36.620
Again, two different methods
of obtaining that CA.

00:07:37.080 --> 00:07:40.990
Now, if you've got the actual P12
file that I was just mentioning,

00:07:40.990 --> 00:07:45.990
some of the scenarios of getting that
into an OS X machine to manage that

00:07:46.090 --> 00:07:50.240
for use of various services is the
simplest way is obviously the GUI.

00:07:50.240 --> 00:07:51.500
You just double click on the file.

00:07:51.500 --> 00:07:55.460
Keychain access comes up and asks
you which keychain to import it into.

00:07:55.460 --> 00:07:59.720
Keychain being that secure
credential store for that identity.

00:07:59.720 --> 00:08:05.330
Those can select the import menu
option as well within keychain access.

00:08:05.710 --> 00:08:11.580
But I'm probably pretty sure that most
of you in the IT space are now wanting

00:08:11.640 --> 00:08:15.040
to think about how you script this on
a large scale to a lot of your users,

00:08:15.040 --> 00:08:15.980
a lot of your machines.

00:08:15.980 --> 00:08:19.270
That's when you want to rely
on the security command.

00:08:19.280 --> 00:08:22.870
And user bin security,
that gives you the full capabilities of

00:08:22.890 --> 00:08:26.970
doing this management of the keychains,
the importing and the trust

00:08:27.070 --> 00:08:30.600
you'll see in a little bit of
these certificates and keys.

00:08:30.600 --> 00:08:34.320
So security command will
be your best friend.

00:08:34.400 --> 00:08:37.650
If you're trying to script or
do some kind of large scale

00:08:37.760 --> 00:08:42.000
deployment from the command line
or from kind of back end tools.

00:08:43.480 --> 00:08:45.710
The nice thing about this as
well is keychain access and

00:08:45.710 --> 00:08:48.840
security tool also give you the
ability of doing that export.

00:08:48.950 --> 00:08:51.650
So if you're either creating your
own and you want to export that

00:08:51.660 --> 00:08:55.750
identity and share it between multiple
machines that you may have personally

00:08:56.260 --> 00:09:02.340
or between multiple admin machines,
again both the keychain access

00:09:02.370 --> 00:09:08.670
application itself and security
gives you the export capabilities.

00:09:09.550 --> 00:09:11.700
So, we take the next step.

00:09:11.790 --> 00:09:19.040
Great, I've got this identity myself,
but how do I access these within OS X?

00:09:19.200 --> 00:09:22.900
How do I leverage that identity?

00:09:23.150 --> 00:09:27.560
The identities themselves are
stored in a couple different places.

00:09:27.680 --> 00:09:29.980
First of all,
we just walked through the typical

00:09:29.980 --> 00:09:33.080
store of your identities in a keychain.

00:09:33.100 --> 00:09:36.190
Most of you would probably
store it in your login keychain.

00:09:37.670 --> 00:09:40.080
Second of all,
some of you might be familiar with

00:09:40.080 --> 00:09:42.120
or have heard about smart cards.

00:09:42.120 --> 00:09:46.750
Smart cards would be a physical
kind of a token device that now

00:09:46.750 --> 00:09:51.600
is secure protection of that
same kind of credential store.

00:09:51.600 --> 00:09:53.990
So if I had a smart card
into my OS X system,

00:09:54.120 --> 00:09:57.070
I could be storing my
identity on that smart card.

00:09:57.080 --> 00:10:01.220
And then finally,
when you are pulling either your own

00:10:01.220 --> 00:10:06.960
identity information or you're pulling
public certs for the recipients,

00:10:06.960 --> 00:10:08.730
maybe you want to encrypt
an email message to them,

00:10:08.730 --> 00:10:11.910
you'd be pulling it from a
LDAP accessible directory

00:10:11.910 --> 00:10:14.140
service environment where you're,
again,

00:10:14.140 --> 00:10:18.960
pulling those from the user certificate
or the user SMIME certificate attributes

00:10:18.960 --> 00:10:20.190
within that directory service.

00:10:20.300 --> 00:10:21.800
So that's where they're stored.

00:10:21.800 --> 00:10:24.800
And when you go to view this,
if you're not familiar,

00:10:24.800 --> 00:10:28.430
within keychain access,
as you open up keychain access window,

00:10:28.520 --> 00:10:33.720
down in the categories area,
there are a couple category listed.

00:10:33.720 --> 00:10:35.880
There's been some confusion in the past.

00:10:36.640 --> 00:10:39.480
So certificates,
they just would list the public

00:10:39.570 --> 00:10:42.570
certificates that you have in
various keychains that you've

00:10:42.640 --> 00:10:44.020
got in your keychain list.

00:10:44.190 --> 00:10:48.120
When you select my certificates,
that's showing you those identities.

00:10:48.120 --> 00:10:51.190
It's showing you the correlation or
the association between the certificate

00:10:51.190 --> 00:10:53.030
and the corresponding private key.

00:10:53.120 --> 00:10:57.390
In this case,
I'm just showing some of the identities

00:10:57.390 --> 00:11:00.120
that I had in my keychains here.

00:11:00.780 --> 00:11:04.400
So many of you that
are iPhone developers,

00:11:04.400 --> 00:11:05.900
this should look familiar to you.

00:11:05.900 --> 00:11:10.280
This would actually be the iPhone
identity issued to you as a developer.

00:11:10.280 --> 00:11:13.400
And again, I just imported it into
a different keychain.

00:11:13.400 --> 00:11:15.620
You see the keychain
name there is iPhone Dev.

00:11:15.940 --> 00:11:18.580
You can have as many
keychains as you need.

00:11:18.580 --> 00:11:20.920
You're not limited to one or two.

00:11:21.010 --> 00:11:22.940
I think I have about five or six.

00:11:22.940 --> 00:11:25.220
And I typically do that
for various purposes.

00:11:25.220 --> 00:11:29.690
I may store very public,
kind of freely disposable items in

00:11:29.690 --> 00:11:33.840
one keychain that I just kind of
discard or wipe out periodically.

00:11:33.840 --> 00:11:36.960
Those that are more secure,
I may change the mechanism

00:11:36.960 --> 00:11:38.110
that protects it.

00:11:38.110 --> 00:11:41.280
Maybe I change the passphrase
on that keychain or I protect

00:11:41.350 --> 00:11:42.980
it with a smart card.

00:11:42.980 --> 00:11:45.920
It gives me some different
levels of protection.

00:11:45.920 --> 00:11:50.140
So if you're doing a lookup, again,
this is kind of where do we

00:11:50.180 --> 00:11:52.280
go to get these identities.

00:11:52.280 --> 00:11:55.920
When you're looking
on both 10.4 and 10.5,

00:11:55.920 --> 00:12:00.820
there's kind of a two-prong approach or
two-step configuration into pulling these

00:12:00.820 --> 00:12:03.440
identities from the directory services.

00:12:03.440 --> 00:12:08.120
The first is on that particular
host needs to be configured for

00:12:08.120 --> 00:12:13.800
LDAP access to that remote directory
store where the certificates are.

00:12:13.800 --> 00:12:15.900
10.4, you use directory access.

00:12:15.900 --> 00:12:18.280
10.5, you use directory utility.

00:12:18.280 --> 00:12:20.730
The second step is
within keychain access,

00:12:20.730 --> 00:12:24.750
this is the utility you're doing all
the management of your identities,

00:12:24.750 --> 00:12:28.160
certs, you do the enablement in
the preference panel there,

00:12:28.160 --> 00:12:32.070
do the enablement for search
directory services for certificates.

00:12:32.280 --> 00:12:36.670
That then leverages all of
those directory service entries

00:12:36.670 --> 00:12:41.590
you've created for those
LDAP accessible directory services.

00:12:42.210 --> 00:12:48.090
Now, when you have multiple identities,
I may have, I think in my case for mail,

00:12:48.100 --> 00:12:49.200
I may have three or four.

00:12:49.200 --> 00:12:51.580
I have some identities
for some other purposes.

00:12:51.580 --> 00:12:56.080
How do you go about selecting which one
to use for each one of those services?

00:12:57.900 --> 00:13:00.590
And many of you have probably seen
some various dialogues come up,

00:13:00.720 --> 00:13:02.790
windows that have a list of identities.

00:13:02.800 --> 00:13:08.340
What's really happening is you have a,
you're particularly accessing a service.

00:13:08.360 --> 00:13:12.250
It may be a secure website that
you're accessing now and you need

00:13:12.440 --> 00:13:16.420
to select which identity you're
going to use for that purpose.

00:13:16.420 --> 00:13:21.470
What would appear is a list of
identities that match the usage of

00:13:21.470 --> 00:13:24.600
the service you're going to access.

00:13:25.980 --> 00:13:26.880
And once you select that,
you're going to have

00:13:26.880 --> 00:13:26.880
a list of identities.

00:13:27.330 --> 00:13:30.640
And once you select that,
here's another option here for selecting

00:13:30.640 --> 00:13:34.540
yet another identity panel and you're
seeing the full certificate view.

00:13:34.540 --> 00:13:40.290
What actually happens is it creates what
we refer to as an identity preference.

00:13:40.300 --> 00:13:44.620
When it comes to PKI and the use
of identities and certificates,

00:13:44.620 --> 00:13:49.500
Apple works very hard to reach kind
of a zero configuration approach.

00:13:49.500 --> 00:13:53.830
And so when you're needing to
manage between which identity

00:13:53.910 --> 00:13:59.430
to leverage for these services,
there comes a time where rather than

00:13:59.430 --> 00:14:03.570
throw that UI in front of the user,
you need the OS to know

00:14:03.570 --> 00:14:05.090
which identity to use.

00:14:05.120 --> 00:14:08.070
This leverages those
identity preferences.

00:14:08.120 --> 00:14:10.870
So if you weren't aware,
within Keychain Access,

00:14:10.890 --> 00:14:16.050
you can manage and enter and create
these identity preferences even manually.

00:14:16.120 --> 00:14:18.930
I will show you a little bit
of how the OS manages that.

00:14:19.120 --> 00:14:22.920
But you can manually select,
do your contextual menus on that

00:14:22.950 --> 00:14:26.840
identity within Keychain Access,
and you'll get a little pop up here.

00:14:26.840 --> 00:14:30.220
And you'll see that you can
create identity preferences

00:14:30.580 --> 00:14:32.430
for URLs or email addresses.

00:14:32.460 --> 00:14:37.130
This gives you a manual way of picking
and choosing which identity to leverage.

00:14:37.460 --> 00:14:40.460
And then you're going to select
which certificate to use.

00:14:40.460 --> 00:14:43.200
In this case,
it was kind of a reference to

00:14:43.210 --> 00:14:47.020
a SSL VPN server maybe that
I was accessing at the time.

00:14:47.680 --> 00:14:49.530
You're going to see the-- this
is just a quick view of the

00:14:49.570 --> 00:14:51.100
identity preference itself.

00:14:51.200 --> 00:14:53.630
And at any time,
if I want to go back and switch

00:14:53.690 --> 00:14:59.370
which identity that any application
leveraging that network access for

00:14:59.370 --> 00:15:03.350
that particular type of service,
it's always going to use the

00:15:03.350 --> 00:15:05.600
identity that I selected here.

00:15:05.670 --> 00:15:09.420
Quick view of what it looks like.

00:15:09.420 --> 00:15:12.300
It looks almost like the little V card
within the keychain access here.

00:15:13.500 --> 00:15:20.230
So we talk about obtaining,
we talk about selecting these identities.

00:15:20.330 --> 00:15:24.770
When it comes to PKI,
when it comes to certificates,

00:15:24.930 --> 00:15:27.980
you really-- everything
comes down to validity.

00:15:28.160 --> 00:15:28.960
How do you validate this?

00:15:28.960 --> 00:15:31.660
And a little bit later,
I have a colleague come up and talk

00:15:31.720 --> 00:15:33.860
about the trust model within OS X.

00:15:33.940 --> 00:15:36.500
But let's look at
validating certificates.

00:15:36.640 --> 00:15:42.130
What does OS X do in trying to
validate those certificates?

00:15:42.580 --> 00:15:47.240
Within certificate validation,
historically,

00:15:47.240 --> 00:15:51.360
there's been a method referred to
as Certificate Revocation List,

00:15:51.370 --> 00:15:52.710
or CRL.

00:15:52.920 --> 00:15:57.960
It's kind of the legendary
approach of solving this problem.

00:15:58.080 --> 00:16:01.690
And the way I describe it to many is,
it's very much like downloading the

00:16:01.690 --> 00:16:04.850
whole phone book and then trying to
look somebody up and trying to figure

00:16:04.850 --> 00:16:08.120
out whether they're still there or not,
whether they're at the same address,

00:16:08.130 --> 00:16:09.450
they have the same phone number.

00:16:09.550 --> 00:16:10.830
It requires a lot of bandwidth.

00:16:10.880 --> 00:16:11.000
Right?

00:16:11.000 --> 00:16:11.740
You're downloading
those huge phone books,

00:16:11.800 --> 00:16:16.240
and you can refresh that and
get kind of a new copy of the

00:16:16.330 --> 00:16:18.300
book every year they publish it.

00:16:18.340 --> 00:16:19.480
But there's a lot of bandwidth.

00:16:19.680 --> 00:16:23.920
There's a lot of kind of
data being pushed around.

00:16:23.950 --> 00:16:28.940
New methods, new approaches to this,
kind of a successor to CRL, is the OCSP,

00:16:28.940 --> 00:16:32.470
is the Online Certificate
Status Protocol,

00:16:32.520 --> 00:16:36.120
which is very close to now you being
able to call up that operator and saying,

00:16:36.220 --> 00:16:38.960
does this individual still exist,
and where can I find them?

00:16:39.010 --> 00:16:39.910
Are they still valid?

00:16:40.060 --> 00:16:41.680
Are they still employee
of this organization?

00:16:41.740 --> 00:16:47.500
The process within OS X that
does both CRL and OCSP is,

00:16:47.500 --> 00:16:50.260
in fact, the OCSPD process running.

00:16:50.570 --> 00:16:53.820
So many folks were
looking for a CRL process,

00:16:53.820 --> 00:16:55.680
and they may be running TOP,
and they're looking for it,

00:16:55.680 --> 00:16:57.370
and they didn't find it.

00:16:57.510 --> 00:17:04.060
It's all being managed by OCSPD to
do the certificate validation for

00:17:04.300 --> 00:17:09.900
both CRL distribution points and
for OCSP for the AI extensions.

00:17:10.550 --> 00:17:12.780
Now,
if you look in Keychain Access within

00:17:13.110 --> 00:17:16.400
the preference and you go over
to the tab on certificates,

00:17:16.490 --> 00:17:20.830
we have the ability to set
how you want those certificate

00:17:20.830 --> 00:17:23.240
validations to take place.

00:17:23.240 --> 00:17:27.280
In this case, by default,
I was showing here about best attempt.

00:17:27.430 --> 00:17:33.000
That means it's going to go out and
attempt to get the revocation list,

00:17:33.030 --> 00:17:36.460
the CRL, or in this case,
get a response from OCSP.

00:17:36.460 --> 00:17:39.280
And you can also set that
up for prioritization.

00:17:40.000 --> 00:17:43.110
There are many folks that
have either one or the other,

00:17:43.110 --> 00:17:47.130
CRL distribution pointer or OCSP.

00:17:47.160 --> 00:17:49.030
points in their certificates.

00:17:49.040 --> 00:17:54.680
We can set up the prioritization as you
see here and either disable or set that

00:17:54.680 --> 00:17:57.460
up for best attempt for both types.

00:17:58.600 --> 00:18:01.330
By default, they're both set to off,
so it's not going to go out and do

00:18:01.370 --> 00:18:02.920
some additional validation on it.

00:18:03.080 --> 00:18:05.810
Any environments that you
have that you want to do full

00:18:05.950 --> 00:18:10.270
end-to-end OS X validation,
both Tumbleweed and CoreStreet have

00:18:10.270 --> 00:18:16.790
provided for quite some time the server
validators for OS ASP on Mac OS X server.

00:18:16.800 --> 00:18:19.340
These are just some
good references for you.

00:18:19.720 --> 00:18:25.540
So let me move on and hand things over to
colleague Ken McLeod to walk you through

00:18:25.540 --> 00:18:28.650
the whole trust model within Mac OS X.

00:18:28.660 --> 00:18:30.240
All right.

00:18:30.400 --> 00:18:30.780
Thanks, Shawn.

00:18:36.450 --> 00:18:37.720
Hi, everybody.

00:18:37.860 --> 00:18:38.990
I'm Ken McLeod.

00:18:39.000 --> 00:18:41.500
I'm an engineer in the data
security group at Apple.

00:18:41.500 --> 00:18:46.740
Data security is responsible for,
obviously, certificates, key chain,

00:18:46.740 --> 00:18:49.140
security frameworks, that sort of thing.

00:18:49.140 --> 00:18:54.120
What I'd like to talk about
today is the second part.

00:18:54.210 --> 00:18:58.410
Shawn talked to you about an
identity and what that means.

00:18:58.420 --> 00:18:59.970
That says who you are.

00:19:00.480 --> 00:19:02.980
That answers the question, who is this?

00:19:02.980 --> 00:19:07.180
This is somebody that's certified
with a particular private key.

00:19:07.180 --> 00:19:09.790
But how do you know you
can trust that person?

00:19:09.800 --> 00:19:12.170
How do you know you can trust
the particular certificate

00:19:12.170 --> 00:19:13.630
that's being presented to you?

00:19:15.310 --> 00:19:19.030
Well,
we do this with X.509 validation and

00:19:19.030 --> 00:19:24.360
X.509 certificate trust validation
starts off with a leaf certificate.

00:19:24.430 --> 00:19:26.930
This is the certificate
that we're interested in to

00:19:27.030 --> 00:19:28.200
know whether it's trusted.

00:19:28.200 --> 00:19:32.010
So we look and see who signed that
certificate and if the certificate

00:19:32.010 --> 00:19:35.800
is signed maybe by an intermediate,
we can follow the chain back

00:19:35.810 --> 00:19:37.200
and see who signed that.

00:19:37.200 --> 00:19:40.830
And at some point,
we will get back to a certificate at

00:19:40.830 --> 00:19:45.200
the end of the chain that is signed
itself at the end of the chain.

00:19:45.200 --> 00:19:47.200
And we ask the question,
is that certificate signed?

00:19:47.200 --> 00:19:49.730
And if it is,
then we've built a chain of trust

00:19:49.730 --> 00:19:53.210
from the leaf to the root and
we know we can trust that leaf

00:19:53.230 --> 00:19:55.830
certificate that's been presented.

00:19:56.110 --> 00:19:58.600
There's a problem with that.

00:19:58.700 --> 00:20:02.000
The farther back and
the longer the chain is,

00:20:02.000 --> 00:20:04.990
the more certificates end up
being signed by that route.

00:20:05.110 --> 00:20:09.490
If you chain back to VeriSign
or one of the large CAs,

00:20:09.630 --> 00:20:12.340
they've issued thousands upon
thousands of certificates.

00:20:12.460 --> 00:20:19.020
If you trust their route,
you're essentially trusting everything

00:20:19.090 --> 00:20:22.490
that they may have signed and
everything down the stream from them.

00:20:22.860 --> 00:20:26.540
To solve that kind of problem
and to be able to narrow

00:20:26.540 --> 00:20:31.540
the scope of what you trust,
in Mac OS X 10.5,

00:20:31.540 --> 00:20:36.790
we allow you to specify a trusted
anchor that is not a root but

00:20:36.800 --> 00:20:39.520
is rather further down the line.

00:20:39.590 --> 00:20:41.860
And in fact,
I can take this to its logical

00:20:41.860 --> 00:20:45.510
conclusion and set my trust
on an individual certificate.

00:20:45.620 --> 00:20:48.800
So I don't even have to build a chain
beyond the particular certificate

00:20:48.800 --> 00:20:52.170
that I want to trust at the end there.

00:20:52.970 --> 00:20:59.160
Now, 10.5 is very different in this
respect from what came before.

00:20:59.280 --> 00:21:03.150
Before Leopard,
we had a very simple trust model and

00:21:03.150 --> 00:21:04.970
there was a single source of trust.

00:21:05.130 --> 00:21:09.830
You had a root certificate and if it
was in a special keychain container,

00:21:09.830 --> 00:21:14.670
X.509 anchors, many of you have heard of
that X.509 anchors keychain,

00:21:14.670 --> 00:21:18.590
your root certificate had to go in
there to establish any kind of trust.

00:21:18.590 --> 00:21:20.910
And of course,
you had to be an administrator

00:21:20.910 --> 00:21:22.310
of the machine to do that.

00:21:24.600 --> 00:21:26.490
But this got a lot easier with Leopard.

00:21:26.690 --> 00:21:32.810
In Leopard, we no longer use a particular
location as the source of trust.

00:21:33.020 --> 00:21:37.000
So X.509 Anchors is no longer magic
and putting something in there

00:21:37.000 --> 00:21:38.760
will not cause it to be trusted.

00:21:38.760 --> 00:21:42.650
Instead, there are three levels,
there are three domains.

00:21:42.650 --> 00:21:46.940
And we have the same root
certificates that we provided in

00:21:47.010 --> 00:21:50.280
X.509 Anchors are still there.

00:21:50.280 --> 00:21:53.360
They're in a new keychain
called system root certificates.

00:21:53.360 --> 00:21:56.380
But again,
where they live is not as important

00:21:56.380 --> 00:21:58.820
as the fact that they're trusted.

00:21:58.820 --> 00:22:01.580
So the system provided
ones go in that keychain.

00:22:01.580 --> 00:22:06.200
And then there's another level where
you can override that or add to it.

00:22:06.220 --> 00:22:11.080
You can add your own root certificates
to start a chain in the system keychain.

00:22:11.080 --> 00:22:14.540
Now, why the system keychain if it
doesn't matter where they live?

00:22:14.570 --> 00:22:19.700
The system keychain is the
keychain that every user can see.

00:22:19.700 --> 00:22:22.960
It's configured to be available
to every user of the system.

00:22:22.960 --> 00:22:26.440
So it's a handy place to store
root certificates if you want

00:22:26.440 --> 00:22:28.290
multiple users to see them.

00:22:28.350 --> 00:22:29.960
But of course,
they don't have to go there.

00:22:29.960 --> 00:22:35.120
If you have certificates that only you
trust in one particular user account,

00:22:35.120 --> 00:22:36.750
they can go anywhere.

00:22:38.630 --> 00:22:43.260
So there are three what we
call trust domains here.

00:22:43.300 --> 00:22:48.180
And we have the system trust domain,
which is kind of at the lowest level.

00:22:48.220 --> 00:22:50.670
This is what ships out
of the box in Mac OS X.

00:22:50.810 --> 00:22:52.240
This is what Apple provides to you.

00:22:52.420 --> 00:22:55.590
And Apple has said,
these things are trusted out of the box.

00:22:55.780 --> 00:23:00.390
We give you Ferris sign and whoever else,
the standard list of root

00:23:00.420 --> 00:23:02.320
CAs that are trusted.

00:23:02.350 --> 00:23:07.520
You can override this in the next level,
which is the admin trust domain,

00:23:07.560 --> 00:23:12.440
by either saying these things are
not trusted that Apple provided,

00:23:12.460 --> 00:23:14.900
or maybe you've added some
of your own and you say,

00:23:14.950 --> 00:23:18.040
these are in addition and
I want to trust them as well.

00:23:18.170 --> 00:23:22.300
Now, the admin trust domain is seen
by all users of the system.

00:23:22.300 --> 00:23:25.540
It applies across the board
to every user account.

00:23:25.580 --> 00:23:30.880
In your own user account,
you have a user trust domain.

00:23:30.880 --> 00:23:34.720
And you can specify that certain
things can override either what's

00:23:34.720 --> 00:23:36.480
specified by the administrator.

00:23:36.650 --> 00:23:39.720
Or what's specified by
Apple in the system domain.

00:23:39.840 --> 00:23:45.770
Now, I should point out that some of you
were concerned by that in sessions past.

00:23:45.950 --> 00:23:47.360
That is able to be disabled.

00:23:47.610 --> 00:23:51.620
So if an administrator does
not want a user trust domain

00:23:51.620 --> 00:23:54.380
on the system to override their
choices when they've set up,

00:23:54.380 --> 00:23:55.660
it can be disabled.

00:23:55.660 --> 00:23:59.200
I'll show you that in a little bit.

00:23:59.700 --> 00:24:05.820
In 10.5,
it's pretty easy to create an identity

00:24:05.840 --> 00:24:08.690
and to create a certificate authority.

00:24:08.690 --> 00:24:12.600
And a certificate authority is really
nothing more than just a identity

00:24:12.600 --> 00:24:14.190
that's allowed to sign other certs.

00:24:14.220 --> 00:24:19.270
But it's kind of special in that
you really want it to be trustworthy

00:24:19.270 --> 00:24:22.250
if you are a certificate authority.

00:24:22.520 --> 00:24:25.850
And the only way to do that is
to know that you are the only

00:24:25.850 --> 00:24:29.850
person that has the private key,
that has access and is able to

00:24:29.850 --> 00:24:31.190
use that certificate authority.

00:24:31.200 --> 00:24:34.890
So you really have to
think about securing that.

00:24:34.890 --> 00:24:37.690
And in fact,
the large CAs have a very complicated

00:24:37.730 --> 00:24:41.870
process for securing those that involves
locked rooms and steel cages and

00:24:41.870 --> 00:24:45.450
armed guards and that sort of thing,
just like the movies.

00:24:45.460 --> 00:24:48.910
And these are things that you actually
have to think about because if

00:24:48.910 --> 00:24:53.140
somebody gets hold of your private key,
they essentially have stolen that

00:24:53.140 --> 00:24:56.720
identity and they can issue things and,
you know, a certificate issued from

00:24:56.720 --> 00:24:59.090
that certificate authority
would be indistinguishable

00:24:59.210 --> 00:25:00.550
from one that you had issued.

00:25:00.570 --> 00:25:04.970
So another way of keeping things
secure is to make sure that

00:25:04.970 --> 00:25:08.930
when you issue certificates
that the key usage is limited,

00:25:09.080 --> 00:25:12.840
that you only issue things or
you only use the certificate for

00:25:12.970 --> 00:25:17.420
a particular use that you need
it for and not across the board.

00:25:18.090 --> 00:25:21.980
So these changes that were
introduced in 10.5 have some

00:25:21.980 --> 00:25:25.960
pretty big implications for people,
especially supporting

00:25:25.960 --> 00:25:30.010
large organizations,
universities, you know, IT.

00:25:30.740 --> 00:25:33.840
You've got a new trust
model to deal with.

00:25:33.900 --> 00:25:36.400
Now, previously,
all you had to do was add a

00:25:36.490 --> 00:25:39.680
certificate to the X.509 Anchors
keychain and you were done.

00:25:39.680 --> 00:25:40.690
It was trusted.

00:25:40.880 --> 00:25:42.260
You were set up.

00:25:42.570 --> 00:25:47.410
On Leopard and later,
you'll need to put your, obviously,

00:25:47.410 --> 00:25:48.670
certificate somewhere.

00:25:48.810 --> 00:25:53.180
We recommend the system keychain because
it's one that's available for everyone.

00:25:53.240 --> 00:25:58.120
But you'll also have to add
trust to that as a separate step.

00:25:58.150 --> 00:26:01.500
And Shawn mentioned the security command,
which is in user bin security.

00:26:01.720 --> 00:26:05.410
That's a very handy tool for
doing all sorts of configuration

00:26:05.420 --> 00:26:07.860
related to security and trust.

00:26:07.900 --> 00:26:10.750
Specifically here,
there's an add trusted cert

00:26:10.750 --> 00:26:13.750
command that will let you add
a certificate with particular

00:26:13.830 --> 00:26:15.900
trust settings that you specify.

00:26:15.910 --> 00:26:18.670
And I'll give you a little
demo of that in a minute here.

00:26:18.680 --> 00:26:23.680
If you add it to the admin domain
by passing the dash D option,

00:26:23.840 --> 00:26:26.840
you won't have any interaction required
and you can write a script that does

00:26:26.840 --> 00:26:30.510
automatic setup for your organization.

00:26:31.890 --> 00:26:37.500
So how exactly does a certificate
go from just being a certificate

00:26:37.750 --> 00:26:40.670
to actually gaining trust?

00:26:40.760 --> 00:26:43.180
Again, out of the box,
if it chains back to one

00:26:43.180 --> 00:26:44.910
of those trusted things,
we know we can trust it.

00:26:44.940 --> 00:26:49.110
But very often you will encounter
a website or you'll communicate

00:26:49.260 --> 00:26:53.300
with some other entity and their
certificate you'll not have seen

00:26:53.300 --> 00:26:55.560
before and it won't be trusted.

00:26:55.570 --> 00:26:56.930
So how do you bootstrap that?

00:26:57.030 --> 00:27:01.780
Usually it's best to do this on
the first time you've seen it.

00:27:01.800 --> 00:27:05.200
You encounter it right at the time
that the certificate is being used.

00:27:05.300 --> 00:27:08.130
And the sort of canonical
example here is Safari.

00:27:08.130 --> 00:27:11.060
If you go to an HTTPS website
in Safari and it is signed

00:27:11.260 --> 00:27:15.350
with an untrusted certificate,
you get a little dialogue that asks,

00:27:15.350 --> 00:27:17.300
do you trust this at that time?

00:27:17.300 --> 00:27:24.080
And you can trust the certificate
because there's separate trust domains.

00:27:24.080 --> 00:27:28.490
You can either trust it on a per user
basis for the user trust domain or for

00:27:28.490 --> 00:27:31.110
all users with the admin trust domain.

00:27:32.000 --> 00:27:35.660
The keychain access utility lets
you go in manually and edit any

00:27:35.660 --> 00:27:37.900
trust settings on certificates.

00:27:37.900 --> 00:27:40.880
The diagram there that you see
is what that looks like when

00:27:40.970 --> 00:27:42.480
you open up a certificate.

00:27:42.480 --> 00:27:45.500
For various usages,
you have the ability to say,

00:27:45.550 --> 00:27:49.530
I trust this, but perhaps I don't trust
it for another usage.

00:27:49.530 --> 00:27:52.120
And again,
anything or almost anything you can do

00:27:52.120 --> 00:27:56.150
in keychain access can be done on the
command line with the security tool.

00:27:56.150 --> 00:27:59.610
So the security tool lets you
add trusted cert to add and

00:27:59.650 --> 00:28:01.660
change the trust settings.

00:28:01.800 --> 00:28:05.790
And it also has a handy thing
called trust settings import,

00:28:06.040 --> 00:28:09.400
which lets you take a canned
file of trust settings and

00:28:09.420 --> 00:28:13.590
sort of duplicate those,
replicate them across many machines

00:28:13.670 --> 00:28:15.540
if you need to set them up.

00:28:16.370 --> 00:28:20.800
So here's that dialogue I alluded to
that you see in Safari and other places.

00:28:20.840 --> 00:28:24.000
It's a SF certificate trust panel.

00:28:24.000 --> 00:28:29.060
That is something that's provided
in the security interface framework.

00:28:29.110 --> 00:28:31.340
And it's a standard
certificate dialogue for OS X.

00:28:31.430 --> 00:28:32.620
So you'll see this in Safari.

00:28:32.620 --> 00:28:38.590
You'll see it in Mail, iCal,
things that need to ask a trust question.

00:28:38.830 --> 00:28:41.340
I've encountered a certificate.

00:28:41.440 --> 00:28:43.580
I'm not able to build
that chain of trust.

00:28:43.800 --> 00:28:44.960
So what do I do?

00:28:45.230 --> 00:28:48.230
And-- excuse me.

00:28:49.130 --> 00:28:54.910
In Safari here and in other places,
you'll notice that you have

00:28:55.670 --> 00:29:01.110
the ability in 10.5 to add a
little bit of restriction to

00:29:01.110 --> 00:29:04.100
how you trust the certificate.

00:29:04.400 --> 00:29:07.410
For example,
I may not want to trust the certificate

00:29:07.410 --> 00:29:09.320
across the board for every use.

00:29:09.560 --> 00:29:14.090
I only want to trust it when I'm
going to one particular website

00:29:14.150 --> 00:29:18.310
and the UI gives you the ability
to narrow down that trust here.

00:29:18.780 --> 00:29:24.350
So let me switch over to the demo machine
here and give you a look at what that

00:29:24.880 --> 00:29:27.780
process looks like for starting trust.

00:29:30.550 --> 00:29:35.380
Again, Safari is kind of a
canonical example here.

00:29:35.420 --> 00:29:41.530
I'll go to a site and the first
time I've gone to this Red Hat site,

00:29:41.530 --> 00:29:44.340
I noticed that it, well,
doesn't have a trusted certificate.

00:29:44.340 --> 00:29:47.910
And I can examine that,
look at the details here,

00:29:47.970 --> 00:29:51.650
and I see that Red Hat has a
certificate that was issued by

00:29:51.650 --> 00:29:53.520
something called Certificate Shack.

00:29:53.520 --> 00:29:55.720
Well, I...

00:29:55.960 --> 00:29:59.240
I have never heard of certificate
shack and I don't know how big

00:29:59.240 --> 00:30:03.800
the shack is and whether they're
dealing stuff out of the back.

00:30:03.800 --> 00:30:05.210
I really don't know too much about them.

00:30:05.220 --> 00:30:10.780
So I would be very leery of taking the
certificate shack route and trusting

00:30:10.810 --> 00:30:12.540
it across the board of my system.

00:30:12.540 --> 00:30:21.080
But because we have the user trust
domain and the ability to extend

00:30:21.080 --> 00:30:22.840
trust only to one particular cert,

00:30:22.910 --> 00:30:27.970
I can decide to trust just the
Red Hat server and additionally

00:30:28.140 --> 00:30:33.350
specify that I only want to trust this
when I'm actually going to that site.

00:30:35.730 --> 00:30:41.740
So because this is a change in trust,
I need to authenticate.

00:30:41.800 --> 00:30:44.550
I'll type in my password here.

00:30:45.960 --> 00:30:49.930
And when I go and examine the
certificate chain up here by clicking

00:30:49.930 --> 00:30:56.480
the lock icon that's up in the corner,
I can see that the Red Hat server

00:30:56.480 --> 00:30:58.680
now is marked as trusted.

00:30:58.680 --> 00:31:02.440
We have a new status that I've
trusted this for this account

00:31:02.440 --> 00:31:04.120
and the user trust domain.

00:31:04.180 --> 00:31:08.040
And the thing to notice here is that
there's only one certificate now

00:31:08.360 --> 00:31:12.760
because the chain only needed to be
built just at that one certificate.

00:31:12.830 --> 00:31:15.940
And I didn't need to build it all
the way back to certificate shack

00:31:15.940 --> 00:31:18.470
in order to trust the certificate.

00:31:19.060 --> 00:31:21.000
Let's look at another example.

00:31:21.000 --> 00:31:24.000
A server at the University of Maryland.

00:31:24.110 --> 00:31:30.880
They're an interesting case because
they have set up a complete certificate

00:31:30.880 --> 00:31:35.500
authority for their organization and
they have a route that they created and

00:31:35.500 --> 00:31:38.920
then they issued a certificate from it,
an intermediate and then another

00:31:38.920 --> 00:31:43.300
server signing cert and they have it
parceled out in a nice hierarchy here.

00:31:44.270 --> 00:31:46.570
Now, of course,
if I just want to go to this

00:31:46.570 --> 00:31:49.740
one particular web server at
the University of Maryland,

00:31:49.800 --> 00:31:52.730
I could trust it just like
I trusted the Red Hat site.

00:31:52.730 --> 00:31:57.720
But let me put on my system administrator
hat for a minute and think about this.

00:31:57.920 --> 00:32:00.190
You know,
I really want to extend trust to the

00:32:00.190 --> 00:32:04.300
whole organization and I want to set up
my machine or multiple machines so that

00:32:04.300 --> 00:32:08.640
I'm not bothered with these dialogues
and I just trust it across the board.

00:32:08.640 --> 00:32:12.140
So let's look at another
way to extend trust.

00:32:12.480 --> 00:32:17.110
I've downloaded the route for
this particular organization

00:32:17.110 --> 00:32:19.390
here and I'll just open it up.

00:32:19.610 --> 00:32:23.690
When I open it, it opens up in keychain
access and asks me,

00:32:23.690 --> 00:32:25.770
do I want to add the certificate?

00:32:25.780 --> 00:32:28.560
Now, remember,
if I want to add it in a way that all

00:32:28.560 --> 00:32:33.220
accounts across the system can see it,
I should add it to the system keychain.

00:32:33.220 --> 00:32:35.090
So I'll go ahead and do that.

00:32:35.140 --> 00:32:39.310
And in order to add it,
I need to authenticate.

00:32:41.350 --> 00:32:45.200
All I did there was just add
it to the system keychain.

00:32:45.200 --> 00:32:49.000
And remember, it's very important,
just being in a particular keychain

00:32:49.000 --> 00:32:50.790
does not trust the certificate.

00:32:51.060 --> 00:32:54.200
Trust is completely separate
from where the cert lives.

00:32:54.340 --> 00:32:58.630
So I'm additionally asked if I want
to trust this particular route.

00:32:58.850 --> 00:33:00.000
I'll go ahead and do that.

00:33:00.000 --> 00:33:03.980
And again, it's a decision that
requires authentication.

00:33:04.500 --> 00:33:09.130
Now I can go into the system keychain
and I see that I have this certificate

00:33:09.140 --> 00:33:14.320
and it's marked as trusted for all users
because it's trusted in the admin domain.

00:33:14.400 --> 00:33:19.050
So if I was to go back
to this server here,

00:33:19.600 --> 00:33:35.600
[Transcript missing]

00:33:38.600 --> 00:33:41.870
So let's look at a few
more options we have,

00:33:41.890 --> 00:33:44.250
in this case on the command line.

00:33:46.880 --> 00:33:51.020
I don't necessarily need to,
as I showed you with the checkbox,

00:33:51.050 --> 00:33:55.440
to trust a certificate at just
the granularity across the board.

00:33:55.440 --> 00:34:02.730
I can trust it for a particular server
and I can add conditions to trust that.

00:34:02.990 --> 00:34:07.430
The security command here, again,
it's very versatile.

00:34:07.490 --> 00:34:08.750
It's add trusted cert.

00:34:08.780 --> 00:34:10.500
It has a variety of options.

00:34:10.500 --> 00:34:15.540
And the first option there, minus D,
is the one that you use to control

00:34:15.540 --> 00:34:20.010
whether it's in the admin domain,
this is a decision across all users,

00:34:20.010 --> 00:34:21.420
or the user domain.

00:34:21.420 --> 00:34:25.900
And there's a variety of other ones here,
policy, I won't get into all of them,

00:34:25.900 --> 00:34:30.940
app, policy strings, allowed errors,
but what I'll go ahead and do

00:34:30.940 --> 00:34:36.760
here is show you a sample command
that adds a trusted certificate.

00:34:36.760 --> 00:34:40.610
I've passed in here the minus D option,
which says that I want this

00:34:40.610 --> 00:34:42.260
to be in the admin domain.

00:34:42.260 --> 00:34:46.130
I've passed a minus K option,
which is a particular keychain

00:34:46.220 --> 00:34:50.500
that I want to add this to,
in this case, the system keychain.

00:34:51.370 --> 00:34:55.620
And then the file that contains my
certificate that I want to trust.

00:34:55.620 --> 00:34:57.840
So I'll go ahead and
execute this command.

00:34:57.840 --> 00:35:02.080
And it just executes because,
as many of you have noticed already,

00:35:02.080 --> 00:35:05.560
I'm running a root shell here,
so it just works.

00:35:05.560 --> 00:35:09.320
So if we look at what the trust
settings are now in keychain access,

00:35:09.320 --> 00:35:13.300
I'll look in the system keychain,
and I now have an Apple data security

00:35:13.300 --> 00:35:15.660
root that I've marked as trusted.

00:35:15.660 --> 00:35:19.420
And that's just one way
to set things up here.

00:35:21.270 --> 00:35:26.890
But I can also take a snapshot here.

00:35:27.940 --> 00:35:30.340
with trust settings export.

00:35:30.380 --> 00:35:33.590
Now trust settings export will let me,

00:35:33.940 --> 00:35:37.640
Either export all the system
trust settings or just a

00:35:37.640 --> 00:35:39.240
particular user's trust settings.

00:35:39.300 --> 00:35:43.200
So let me quickly.

00:35:44.250 --> 00:35:49.280
I'm going to dump what I've got here,
-d again, the admin domain,

00:35:49.360 --> 00:35:52.200
and I'll save that to a temporary file.

00:35:52.250 --> 00:35:56.200
It tells me that I've
done it successfully.

00:35:56.480 --> 00:35:59.200
And then I can go back in,
and if I'm a student,

00:35:59.200 --> 00:36:05.200
maybe I'm mucking around or I'm
changing this configuration,

00:36:05.200 --> 00:36:09.200
I'll go ahead and remove the trust here.

00:36:09.200 --> 00:36:11.270
I'll never trust this one.

00:36:11.710 --> 00:36:14.180
And I'll authenticate
to make that change.

00:36:14.190 --> 00:36:19.510
And that's no longer trusted and
I can make some other changes.

00:36:19.700 --> 00:36:24.590
But what I can do at the end of the day,

00:36:25.200 --> 00:36:29.140
is reverse those and take the
snapshot that I made earlier

00:36:29.670 --> 00:36:33.040
and use trust settings import
to blast it back into place.

00:36:33.150 --> 00:36:36.580
So I'll do the reverse of what
I did here using that file

00:36:36.970 --> 00:36:38.610
and import the trust settings.

00:36:38.700 --> 00:36:41.670
And now if we look back here,
we'll see things are exactly

00:36:41.810 --> 00:36:45.450
back to the way they were when
I took the snapshot and my data

00:36:45.450 --> 00:36:47.940
security server is trusted again.

00:36:49.910 --> 00:36:57.070
So that's kind of a high level basic
overview of setting up trust on Mac OS X.

00:36:57.250 --> 00:37:01.630
I have a session on
Thursday at I believe 5:00,

00:37:01.710 --> 00:37:04.520
session 427,
that gets more in depth into this.

00:37:04.730 --> 00:37:07.250
So I hope that if you're
interested you'll come to that.

00:37:07.370 --> 00:37:11.490
And with that I'd like to
turn it back over to Shawn.

00:37:11.650 --> 00:37:14.800
So if we could have
the slide machine back.

00:37:15.350 --> 00:37:15.800
Thanks.

00:37:15.800 --> 00:37:17.440
Thank you, Ken.

00:37:19.220 --> 00:37:22.900
So what we want to spend a
little bit of time now on is

00:37:23.530 --> 00:37:27.110
many of you kind of wanted to,
again, take the issuance into your own

00:37:27.130 --> 00:37:30.700
hand and you wanted to be able to
start creating your own CAs and

00:37:30.700 --> 00:37:34.420
issue your own certificates,
maybe for creating your own services

00:37:34.420 --> 00:37:38.690
within a work group or within an
agency to just maybe even set up a test

00:37:38.690 --> 00:37:41.260
lab and test some of these services.

00:37:41.640 --> 00:37:45.700
So what we want to do is share a
little bit of what you can do with

00:37:45.730 --> 00:37:51.030
creating these identities using
the built-in services within OS X.

00:37:51.190 --> 00:37:54.940
Now, when you create these identities,
first of all,

00:37:54.980 --> 00:37:57.940
you need to define your root certificate.

00:37:58.010 --> 00:38:00.980
What Ken was just showing
you is that whole trust model

00:38:00.980 --> 00:38:03.900
going back to the trusted root,
the anchor.

00:38:03.900 --> 00:38:09.040
And what you first of all do is define
your own root certificate authority,

00:38:09.040 --> 00:38:13.210
that kind of central third party
authority that does the whole

00:38:13.280 --> 00:38:15.400
validation of certificates.

00:38:15.400 --> 00:38:18.900
And then you're going to
issue either an intermediate,

00:38:18.950 --> 00:38:20.030
kind of a sub CA.

00:38:20.120 --> 00:38:23.170
I think Ken was showing you a
couple of them where they had a

00:38:23.170 --> 00:38:25.290
couple intermediates in line there.

00:38:25.430 --> 00:38:28.740
And then ultimately you're going
to issue those certificates to your

00:38:28.740 --> 00:38:31.220
end users for various purposes,
maybe for SMIME.

00:38:31.400 --> 00:38:36.590
So if you think about your thought
process through this and how you want

00:38:36.590 --> 00:38:40.820
to issue this in your environment,
of course we're going to

00:38:40.820 --> 00:38:42.400
start with the root CA.

00:38:42.400 --> 00:38:44.400
So it's kind of my enterprise.

00:38:44.400 --> 00:38:45.400
I'm going to create my
own certificate authority.

00:38:45.400 --> 00:38:48.860
Well, as I go forward,
the first thing I need to

00:38:49.000 --> 00:38:53.340
think about is how am I going
to separate kind of the usage.

00:38:53.590 --> 00:38:57.380
Ken had mentioned it's very
good to create certificates,

00:38:57.460 --> 00:39:02.060
particularly in this case,
that have a particular or a single usage.

00:39:02.400 --> 00:39:06.240
So I'm going to create an intermediate,
and the only purpose for

00:39:06.250 --> 00:39:10.400
that intermediate is to sign
SMIME certificates for your end users.

00:39:10.540 --> 00:39:14.890
So you have a limited scope of
what that intermediate can do.

00:39:15.590 --> 00:39:18.390
At this point, then I'm issuing
certificates for my users,

00:39:18.540 --> 00:39:18.660
right?

00:39:18.780 --> 00:39:22.220
Joe user at my company
or my organization.

00:39:22.220 --> 00:39:25.490
And I can then be issuing to
each one of my users just for

00:39:25.490 --> 00:39:28.330
the sole purposes for S/MIME.

00:39:28.540 --> 00:39:29.440
I would take that further.

00:39:29.650 --> 00:39:31.500
Maybe there's some
in-house coding going on.

00:39:31.500 --> 00:39:35.870
So now I'm going to create a
code signing intermediate that,

00:39:35.870 --> 00:39:38.130
again,
does the same kind of thing as issue

00:39:38.130 --> 00:39:40.350
those certificates for the developers.

00:39:40.580 --> 00:39:43.490
Some folks might think
that this would be easier.

00:39:43.500 --> 00:39:46.500
Why don't you just create those
intermediates to do everything?

00:39:46.500 --> 00:39:48.500
You know, kind of the key usage of any.

00:39:48.830 --> 00:39:52.310
Separating the usage, again,
limits scope.

00:39:52.310 --> 00:39:58.500
It limits the kind of your exposure if
for any reason the initial identity,

00:39:58.500 --> 00:40:02.500
the private key for that particular
usage was compromised in any way.

00:40:02.500 --> 00:40:08.230
You can go ahead and revoke that
and issue a new certificate for

00:40:08.230 --> 00:40:09.500
that purpose without revoking it.

00:40:09.500 --> 00:40:11.840
You can go ahead and revoke that and
issue a new certificate for that purpose

00:40:11.890 --> 00:40:14.500
without revoking the whole function for
all your services for all your users.

00:40:14.500 --> 00:40:18.110
So, again, it limits scope,
gives you a little bit of better control

00:40:18.570 --> 00:40:20.410
with the issuance of certificates.

00:40:20.500 --> 00:40:24.610
So as you look at your cert, right,
so here's my root certificate

00:40:24.620 --> 00:40:26.500
authority that I created.

00:40:26.500 --> 00:40:30.410
And the key thing is that the
only function that this root

00:40:30.660 --> 00:40:34.410
has is for digital signature
and the key cert signing.

00:40:34.830 --> 00:40:38.180
That's the only functionality
that that root has.

00:40:38.400 --> 00:44:51.800
[Transcript missing]

00:44:52.550 --> 00:44:55.340
So a thing to keep in mind,
now we're kind of drawing a

00:44:55.340 --> 00:44:58.470
little bit of the differences
between the phone and OS X,

00:44:58.520 --> 00:45:00.980
because everything that we've
been talking about really applies

00:45:00.980 --> 00:45:02.250
to both of those environments.

00:45:02.260 --> 00:45:04.920
First of all,
the key point about the phone is

00:45:04.920 --> 00:45:09.500
that it's the same root certificates
in the phone with the 2.0 release as

00:45:09.510 --> 00:45:12.680
is available and shipped in 10.5.3.

00:45:12.680 --> 00:45:15.720
So those root certificates,
as Ken had mentioned,

00:45:15.850 --> 00:45:19.070
in the system root keychain,
those are the exact same

00:45:19.270 --> 00:45:20.940
ones that are in the phone.

00:45:22.060 --> 00:45:26.170
And the way to get or add additional
anchors to the phone itself,

00:45:26.330 --> 00:45:28.170
there's three methods.

00:45:28.180 --> 00:45:31.460
And typically those are going
to be done within IT departments

00:45:31.460 --> 00:45:33.320
with configuration profiles.

00:45:33.320 --> 00:45:37.700
But you can also get those onto the
phones through email attachments,

00:45:37.700 --> 00:45:41.370
where again they would be
opened up from the phone side.

00:45:41.380 --> 00:45:45.770
Or they would be accessing a
secure website and again opening

00:45:45.780 --> 00:45:49.660
up that particular object itself,
downloading it in

00:45:49.660 --> 00:45:51.800
Safari and adding it to the,
you know, the OS X.

00:45:51.850 --> 00:45:54.090
particular phone itself.

00:45:54.350 --> 00:45:57.990
So we've been creating,
we've been issuing, we've been kind of

00:45:58.090 --> 00:45:59.070
viewing all this stuff.

00:45:59.150 --> 00:46:01.930
Where can you use it as a user?

00:46:01.930 --> 00:46:06.250
We've been referring to Safari as
kind of the typical app.

00:46:06.340 --> 00:46:09.570
Of course, in mail,
you can do the sign-in encryption

00:46:09.590 --> 00:46:11.740
of email with these identities.

00:46:11.740 --> 00:46:15.860
iChat, hopefully many of you have been
leveraging the secure iChat

00:46:15.860 --> 00:46:19.400
capabilities where you can
encrypt your text messaging,

00:46:19.400 --> 00:46:22.740
your video and audio with
other .Mac customers.

00:46:24.570 --> 00:46:26.030
Back to my Mac.

00:46:26.150 --> 00:46:29.260
You aren't aware of or you're
not really doing any kind of

00:46:29.260 --> 00:46:33.490
configuration yourself related to
certificates for the Back to my Mac.

00:46:33.560 --> 00:46:36.110
But when you enable that
between two machines,

00:46:36.200 --> 00:46:40.190
it's leveraging your identity
associated with that .Mac account.

00:46:40.490 --> 00:46:45.810
That ties in with the local KDC that
is being used for Back to my Mac.

00:46:45.910 --> 00:46:46.960
The VPN.

00:46:46.960 --> 00:46:51.120
Just about all of you are probably
using either Layer 2 or Point to

00:46:51.120 --> 00:46:54.180
Point or now you may be doing or
leveraging more of the PureVPN.

00:46:54.200 --> 00:46:56.230
The Pure IPsec that's
available with the phone.

00:46:56.240 --> 00:47:00.140
Again, a key area that you'll be using
these identities that either you

00:47:00.200 --> 00:47:03.800
issue yourself with certificate
assistant or you're getting from

00:47:03.800 --> 00:47:05.930
another certificate authority.

00:47:05.940 --> 00:47:07.480
802.1X.

00:47:07.480 --> 00:47:10.480
And if you're into the development realm,
again, code signing.

00:47:10.500 --> 00:47:15.680
The other points I wanted to bring out
about this is historically the iChat

00:47:15.690 --> 00:47:21.020
certificates or the certificates to
use for encryption of iChat sessions

00:47:21.020 --> 00:47:24.080
was always automatically being done.

00:47:24.200 --> 00:47:28.370
And leveraged when you're
using iChat AV itself.

00:47:28.450 --> 00:47:32.410
But with certificate assistant,
you can actually issue certificates

00:47:32.410 --> 00:47:37.000
with the capability of doing the
encryption for iChat sessions.

00:47:37.120 --> 00:47:40.540
That would give you the ability to
issue your own search within your

00:47:40.620 --> 00:47:42.860
own kind of organization environment.

00:47:43.000 --> 00:47:44.910
Again, the same with code signing.

00:47:44.920 --> 00:47:50.130
Issue your own code signing certificates
from the certificate assistant if you're

00:47:50.130 --> 00:47:52.590
not part of the iPhone development.

00:47:54.570 --> 00:47:58.040
This is a couple kind of
walkthrough of the applications.

00:47:58.040 --> 00:48:00.670
Ken was talking about the
typical dialogues you face.

00:48:00.670 --> 00:48:03.550
Earlier I had mentioned about
the leveraging of identities and

00:48:03.550 --> 00:48:05.000
setting the identity preferences.

00:48:05.020 --> 00:48:08.870
If you're hitting websites,
if things are requiring

00:48:08.870 --> 00:48:13.560
client-side authentication,
you're going to be prompted with a

00:48:13.570 --> 00:48:16.620
selection of one of those identities.

00:48:17.000 --> 00:48:19.370
If you're in mail,
and I always bring this

00:48:19.370 --> 00:48:22.680
up as a good example,
just to be sure that folks truly

00:48:22.840 --> 00:48:28.280
understand how mail automatically
picks up the use of your identity.

00:48:28.280 --> 00:48:32.250
In this case,
the account that I'm leveraging

00:48:32.250 --> 00:48:35.680
is my Geddis at Apple.com account.

00:48:35.910 --> 00:48:38.650
And you'll note that it's all lowercase.

00:48:38.650 --> 00:48:42.920
And what mail was doing
is requesting to the OS,

00:48:42.920 --> 00:48:49.430
is there a corresponding identity,
essentially with a certificate with

00:48:49.570 --> 00:48:54.040
the ability of doing digital signature,
with an email address,

00:48:54.060 --> 00:48:57.730
or the RFC822 name,
with Geddis at Apple.com.

00:48:57.770 --> 00:48:59.960
So it's kind of the default.

00:49:00.010 --> 00:49:04.160
It's happening on my behalf without me
specifically configuring mail to do this.

00:49:04.330 --> 00:49:09.500
Now, if I had configured mail
to have an uppercase G,

00:49:09.560 --> 00:49:13.020
lowercase e-d-d-i-s,
mail would not be showing

00:49:13.110 --> 00:49:16.420
me the ability of digitally
signing that message by default.

00:49:17.020 --> 00:49:20.470
And one of the points that we
always bring out to IT folks is

00:49:20.500 --> 00:49:25.920
that we're very much conforming to
the RFC that everything to the left

00:49:25.920 --> 00:49:28.510
of the at symbol is case sensitive.

00:49:28.520 --> 00:49:34.830
And it's an environment that is
frequently ignored in other mail agents.

00:49:34.890 --> 00:49:40.000
So take note on OS X that in this case,
I need to be sure that the case of

00:49:40.000 --> 00:49:44.450
everything to the left of the at symbol
matches what's in my certificate.

00:49:44.580 --> 00:49:46.580
It's a very key piece.

00:49:47.050 --> 00:49:50.450
Same thing when I'm going to send
the email message to an individual,

00:49:50.600 --> 00:49:51.480
in this case, Joe User.

00:49:51.480 --> 00:49:56.340
If I key in their email address and
I have access either inside one of my

00:49:56.370 --> 00:50:01.940
keychains to their public certificate
or a LDAP store that I can pull it from,

00:50:01.940 --> 00:50:04.670
I would then be able to
encrypt that message to them.

00:50:04.760 --> 00:50:07.300
But in a like manner,
as I just mentioned in

00:50:07.300 --> 00:50:10.780
my digitally signing and
matching the case sensitivity,

00:50:10.780 --> 00:50:14.210
same thing with the encryption
to a recipient itself.

00:50:14.370 --> 00:50:15.780
You'll note in iChat AV,
I'm not going to be able to

00:50:15.780 --> 00:50:16.970
encrypt that message to them.

00:50:17.000 --> 00:50:20.430
But in iChat AV now,
it's kind of an update recently,

00:50:20.430 --> 00:50:24.690
is that you have the ability of
selecting between which certificates

00:50:24.900 --> 00:50:29.060
you're using for the signing
and encryption within iChat.

00:50:29.060 --> 00:50:31.500
Previously,
you kind of had an on and off.

00:50:31.630 --> 00:50:34.790
You enabled iChat encryption,
and that was kind of it.

00:50:34.820 --> 00:50:36.220
It was kind of an on or off situation.

00:50:36.220 --> 00:50:39.280
Here, you're also able to select
which ones are in use.

00:50:39.280 --> 00:50:43.080
This gives you the ability, again,
going back, and if you wanted to issue

00:50:43.080 --> 00:50:46.200
your own certificates out of
the certificate assistant,

00:50:47.000 --> 00:50:49.320
we're issuing this from
your own enterprise CA,

00:50:49.320 --> 00:50:52.440
you could now select those certificates.

00:50:54.800 --> 00:53:35.200
[Transcript missing]

00:53:35.510 --> 00:53:39.960
Some of the good related sessions to
some of the content that we've hit here.

00:53:39.960 --> 00:53:42.360
Again, this was very much of a
high-level discussion.

00:53:42.360 --> 00:53:48.160
We could spend a while getting and
burrowing down into each type of service

00:53:48.160 --> 00:53:51.080
or use of trust and certificates.

00:53:51.770 --> 00:53:55.000
One of the key ones is managing
secure data on the iPhone.

00:53:55.000 --> 00:53:57.080
That's later in the week on Thursday.

00:53:57.080 --> 00:53:59.960
Signing your application
identity with code signing.

00:53:59.960 --> 00:54:02.890
That's now taking your iPhone
identity that you get issued

00:54:02.900 --> 00:54:06.380
by Developer Relations,
leveraging that with your applications,

00:54:06.380 --> 00:54:07.860
pushing it onto the phone.

00:54:07.860 --> 00:54:13.030
And then, of course, a more technical,
lower-level API discussion,

00:54:13.050 --> 00:54:17.340
very much of similar content
that we covered here today.

00:54:17.340 --> 00:54:20.920
Ken will be doing managing X.509
certificates and digital identities.

00:54:21.440 --> 00:54:25.510
also in the afternoon on Thursday.

00:54:25.710 --> 00:54:33.830
So I think at this point probably the
best thing is to shift on over to Q&A.

00:54:33.880 --> 00:54:35.600
I'll turn things over to Jason.