WEBVTT

00:00:20.810 --> 00:00:23.100
Hi, everyone, and good morning.

00:00:23.190 --> 00:00:26.000
I appreciate all of you coming
here because it is pretty early.

00:00:26.000 --> 00:00:27.770
I mean,
I'm usually sleeping around that time.

00:00:27.870 --> 00:00:30.160
So my name is Antoine.

00:00:30.160 --> 00:00:33.130
I'll be joined during this
session by my colleague,

00:00:33.130 --> 00:00:33.750
Chris.

00:00:33.760 --> 00:00:39.410
We both work on a great team at Apple,
and working on implementing these

00:00:39.410 --> 00:00:42.480
great new features that have been
talked about during the week.

00:00:42.540 --> 00:00:45.200
And today,
we're really going to go inside the code.

00:00:45.200 --> 00:00:48.160
It's all going to be about code,
very little about theory.

00:00:48.160 --> 00:00:50.980
It's really just going to be
about seeing how you make all

00:00:51.020 --> 00:00:54.230
of these new features we have in
Safari and iPhone working together.

00:00:54.240 --> 00:00:57.700
So it's really about how can
you practically integrate all

00:00:57.700 --> 00:01:01.500
these new great technologies
that we have for you on iPhone.

00:01:01.500 --> 00:01:05.420
So we have CSS transforms,
which gives you hardware-accelerated

00:01:05.420 --> 00:01:09.230
2D and now also 3D transforms
right into your browser with

00:01:09.230 --> 00:01:13.710
no plug-in or any extra,
just strictly in your browser.

00:01:13.720 --> 00:01:17.270
And we also have CSS transitions,
which allow you to leverage

00:01:17.310 --> 00:01:18.140
your browser to your iPhone.

00:01:18.140 --> 00:01:22.350
So we have a very average hardware
acceleration for animations done

00:01:22.450 --> 00:01:26.380
implicitly by simply describing
two states and the browser taking

00:01:26.380 --> 00:01:28.470
care of everything on its own.

00:01:29.150 --> 00:01:32.440
And we also have touch events,
which really, you know,

00:01:32.440 --> 00:01:34.270
the iPhone is all about multi-touch.

00:01:34.270 --> 00:01:37.560
And you have all these functionality
now directly in the browser.

00:01:37.680 --> 00:01:40.920
So using JavaScript events,
just like any other events

00:01:40.920 --> 00:01:44.410
you use on a web page,
you'll be able to react to touches

00:01:44.410 --> 00:01:48.060
and have a really responsive
and very flexible UI for your

00:01:48.060 --> 00:01:50.150
web application on iPhone.

00:01:50.770 --> 00:01:53.040
And finally,
we also introduced JavaScript media

00:01:53.040 --> 00:01:57.410
APIs so that you can control the
playback of your movies on iPhone

00:01:57.710 --> 00:02:02.080
using your own UI that you will
implement using HTML and CSS and use

00:02:02.170 --> 00:02:06.860
JavaScript to hook up to the media
layer and play content and control it.

00:02:06.930 --> 00:02:11.880
And all of these things are brand
new for Safari on iPhone 2.0.

00:02:13.470 --> 00:02:14.820
So we actually start with a demo.

00:02:14.930 --> 00:02:18.060
Today we're going to build a demo that
you might have already seen this week.

00:02:18.080 --> 00:02:21.470
But I'm going to go
through it quickly again.

00:02:21.570 --> 00:02:24.590
So can we switch to the phone, please?

00:02:27.730 --> 00:02:31.260
Okay, so we load up our demos
called Fingertips,

00:02:31.260 --> 00:02:37.250
and Apple created a lot of videos,
small tutorial videos we call Fingertips,

00:02:37.250 --> 00:02:41.160
so that you can learn about
features of your iPhone in a minute.

00:02:41.160 --> 00:02:44.260
And so obviously all these videos
play on the iPhone as well,

00:02:44.260 --> 00:02:45.610
which is really great.

00:02:45.860 --> 00:02:50.280
And we created, using all our technology,
a 3D ring where we lay

00:02:50.280 --> 00:02:53.340
out all this content,
and you can just navigate through it.

00:02:53.450 --> 00:02:56.470
And of course, given it's iPhone,
you really want to flick

00:02:56.470 --> 00:02:59.030
through the content,
and we can flick at various

00:02:59.200 --> 00:03:01.910
speeds depending on how
fast the finger's moving.

00:03:01.980 --> 00:03:04.690
We can select an item.

00:03:04.860 --> 00:03:08.680
get a nice little animated transitions,
find out more information

00:03:08.840 --> 00:03:10.140
about this content.

00:03:10.140 --> 00:03:11.960
We can go into landscape mode.

00:03:12.000 --> 00:03:14.580
The content will
automatically change a ratio.

00:03:14.580 --> 00:03:19.320
We can change the layout so that it's
more adapted to our content here.

00:03:19.320 --> 00:03:23.240
We have touch event support so we can
do ratings straight onto the device,

00:03:23.310 --> 00:03:24.580
really responsive, really fast.

00:03:24.700 --> 00:03:26.040
And we can go back to the ring.

00:03:26.040 --> 00:03:29.300
And as you see, with the power of CSS,
just based on the

00:03:29.300 --> 00:03:32.350
orientation of the phone,
we can actually change the

00:03:32.420 --> 00:03:36.220
direction of the ring and also
adapt the content we see on there.

00:03:36.250 --> 00:03:37.520
We always have the poster frames.

00:03:37.520 --> 00:03:38.980
We also have a bigger title.

00:03:39.000 --> 00:03:41.020
But we don't have as much
room for a short description.

00:03:41.020 --> 00:03:42.250
So that's all we got here.

00:03:42.370 --> 00:03:43.290
Select an item again.

00:03:43.410 --> 00:03:47.000
And we have movie playback on iPhone,
of course.

00:03:47.070 --> 00:03:49.270
So we can just play a movie.

00:03:50.100 --> 00:03:50.670
Oops.

00:03:50.760 --> 00:03:52.900
And there it is playing straight away.

00:03:53.020 --> 00:03:54.810
And as you'll notice,
we actually provided our

00:03:54.810 --> 00:03:56.110
own custom UI for this.

00:03:57.190 --> 00:03:59.200
is a great way to-- ALAIN VONGSOUVANH:
This is our own little play button.

00:03:59.200 --> 00:04:01.330
It doesn't look like the play
button you get usually by

00:04:01.330 --> 00:04:02.700
embedding a movie in your page.

00:04:02.760 --> 00:04:07.820
So that is what we're
going to be building today.

00:04:07.960 --> 00:04:11.150
So back to the slides, please.

00:04:14.170 --> 00:04:17.820
And so just give you a quick
overview of how our web

00:04:17.820 --> 00:04:19.480
application is going to be built.

00:04:19.510 --> 00:04:20.940
It's actually very traditional.

00:04:21.030 --> 00:04:25.410
So we have an HTML page, call it index.

00:04:25.730 --> 00:04:28.810
And this page is going to have
all the markup to have the

00:04:28.820 --> 00:04:30.440
core components of our page.

00:04:30.560 --> 00:04:35.560
So the items in the info pane,
the ring markup, and et cetera.

00:04:35.700 --> 00:04:40.180
And this HTML page loads up CSS,
style.css file,

00:04:40.180 --> 00:04:43.380
which is a CSS resource where
all the CSS declarations are

00:04:43.380 --> 00:04:46.290
going to be put in that file.

00:04:46.450 --> 00:04:50.340
We have a main script where all the
interactivity is going to be implemented.

00:04:50.400 --> 00:04:52.490
And finally,
we have a data source that we chose to

00:04:52.600 --> 00:04:54.580
implement using a JavaScript structure.

00:04:54.720 --> 00:04:57.780
But really, in this app,
you could load the data with

00:04:57.780 --> 00:05:01.240
XML HTTP requests or any
AJAX methodology that you would like.

00:05:01.600 --> 00:05:03.320
It is all browser-based technology.

00:05:03.320 --> 00:05:06.290
And any workflow that you've been
using so far will work right out

00:05:06.300 --> 00:05:09.450
of the box with all these new
technologies that we implemented.

00:05:10.320 --> 00:05:14.360
And so we're going to build this
demo step by step so that we really

00:05:14.360 --> 00:05:18.650
highlight in each step a very
crucial part of our technology.

00:05:18.690 --> 00:05:22.370
So the first step will
be setting the stage.

00:05:22.460 --> 00:05:27.880
It's actually pretty intense because
we're going to get into 3D here,

00:05:27.880 --> 00:05:32.020
and it will be all about how you
can take a flat HTML list and

00:05:32.230 --> 00:05:36.250
actually style it so that it's
mapped on what looks like a 3D ring.

00:05:36.260 --> 00:05:38.460
So we're going to be
using CSS transforms here.

00:05:39.320 --> 00:05:42.190
And the second stage will be adding
interactivity with touch events.

00:05:42.240 --> 00:05:45.010
So using our fingers,
we'll be able to flick

00:05:45.090 --> 00:05:48.150
through the content,
just tap and drag and release,

00:05:48.200 --> 00:05:50.400
and that will be how we navigate.

00:05:50.400 --> 00:05:53.400
So we'll be using touch events in
this case to add that interactivity.

00:05:53.400 --> 00:05:56.890
The third step will be
adding the functionality to

00:05:56.890 --> 00:05:59.040
slide inside the InfoView.

00:05:59.040 --> 00:06:02.040
So it will really be all about
updating transforms on the fly,

00:06:02.040 --> 00:06:04.760
all through script,
and having the changes

00:06:04.760 --> 00:06:07.330
transition with a nice animation.

00:06:09.150 --> 00:06:12.620
and the fourth step,
we're going to add a new behavior

00:06:12.710 --> 00:06:16.110
to the selection so that the
ring rotates before it slides.

00:06:16.200 --> 00:06:20.620
So we'll be looking at how you can chain
different transitions together using

00:06:20.720 --> 00:06:24.780
events in our CSS transitions technology.

00:06:25.320 --> 00:06:30.020
And the final step is actually just
going to be hooking up movie playback.

00:06:30.070 --> 00:06:33.480
And once all this is done,
the demo will be complete.

00:06:33.530 --> 00:06:37.780
And I'd like to invite my colleague,
Chris, who is really our main 3D

00:06:37.780 --> 00:06:40.390
guy on our team and wizard,
really.

00:06:40.400 --> 00:06:42.720
And he's going to come on stage
and demonstrate how we get

00:06:42.870 --> 00:06:44.620
started and build the first stage.

00:06:44.620 --> 00:06:45.960
Thanks.

00:06:48.800 --> 00:06:53.400
Thanks, Antoine.

00:06:53.580 --> 00:06:57.490
So Antoine showed you this really
nice web application that we're

00:06:57.500 --> 00:06:58.870
going to be building today.

00:06:59.240 --> 00:07:05.730
And the central component of that is
this really nice 3D ring that contains

00:07:05.790 --> 00:07:11.070
all these elements that are going to
be the contents of the fingertips demo.

00:07:11.270 --> 00:07:16.100
And so what I want to show you now
is how do we build that 3D ring.

00:07:16.190 --> 00:07:22.770
3D rings, building 3D things in our
CSS properties is really easy.

00:07:22.770 --> 00:07:28.130
It's something that allows us to position
things in three-dimensional space,

00:07:28.130 --> 00:07:31.130
to rotate them, translate them,
scale them.

00:07:31.180 --> 00:07:34.570
And what I want to show you first
is a little demo I put together to

00:07:34.570 --> 00:07:36.430
show how this ring gets built up.

00:07:41.200 --> 00:07:44.280
Could we have this monitor please?

00:07:52.440 --> 00:07:55.840
Okay,
so I wrote this to run on the phone,

00:07:55.840 --> 00:07:57.460
so let me show it to you
in the simulator here.

00:07:57.460 --> 00:08:01.600
If we go to the first step,
we can see what we've got is just

00:08:01.600 --> 00:08:04.230
the normal XY coordinate space.

00:08:04.290 --> 00:08:06.290
This is just normal CSS coordinate space.

00:08:06.440 --> 00:08:08.850
X goes to the right, Y goes down.

00:08:08.850 --> 00:08:13.230
But when we're doing 3D transforms,
we add a Z transform,

00:08:13.230 --> 00:08:18.310
which goes out of the screen toward
the viewer for positive Z values and

00:08:18.310 --> 00:08:21.340
into the screen for negative Z values.

00:08:23.800 --> 00:08:25.770
The first thing we add is
we have a parent element.

00:08:25.770 --> 00:08:29.050
This is going to be the parent
of all of these items that are

00:08:29.050 --> 00:08:31.500
going to be populating the ring.

00:08:31.500 --> 00:08:34.430
It's going to be the thing that
we're going to be animating

00:08:34.440 --> 00:08:36.060
as we spin the ring around.

00:08:36.060 --> 00:08:38.280
So let me go ahead and get that spinning.

00:08:38.280 --> 00:08:42.060
I'm spinning it about X,
which is going to spin about

00:08:42.100 --> 00:08:44.500
the central axis of that item.

00:08:44.500 --> 00:08:45.520
That's the default.

00:08:45.570 --> 00:08:49.440
Rotations go about the center of
the item that you're rotating.

00:08:49.440 --> 00:08:52.220
But you'll notice that this
doesn't really look very good.

00:08:52.270 --> 00:08:53.560
It doesn't really look 3D.

00:08:53.560 --> 00:08:56.980
It it really just kind of looks
like a trapezoid that's getting

00:08:56.980 --> 00:08:58.600
smashed down and stretched out.

00:08:58.640 --> 00:09:01.470
And that's because we don't
have perspective on it.

00:09:01.500 --> 00:09:06.520
If you went to the really great talk on
CSS animations and transforms yesterday

00:09:06.520 --> 00:09:10.880
that Simon Fraser and Dean Jackson gave,
you'll see that we have a lot of

00:09:10.880 --> 00:09:14.480
different properties to support
the transform capabilities in CSS,

00:09:14.480 --> 00:09:16.060
perspective being one of them.

00:09:16.060 --> 00:09:18.610
Let me go ahead and add
the perspective to this.

00:09:19.520 --> 00:09:23.960
And you can see now that
this plane looks a lot nicer.

00:09:23.960 --> 00:09:27.170
It is foreshortened,
and so it looks further away

00:09:27.180 --> 00:09:31.150
when it's more distant and
larger when it's closer to you.

00:09:31.180 --> 00:09:33.420
So this gives you a lot better 3D look.

00:09:33.520 --> 00:09:36.890
So let's go ahead then
and add an item to that.

00:09:37.190 --> 00:09:40.840
This is going to be one of the items
that is going to be in our ring.

00:09:40.840 --> 00:09:44.740
In the demo, it's going to be populated
with text and graphics.

00:09:44.740 --> 00:09:46.830
In this case,
I just have something simple on

00:09:46.830 --> 00:09:48.440
it for illustration purposes.

00:09:48.440 --> 00:09:51.370
So the first thing... The first thing
we want to do is we want to push

00:09:51.370 --> 00:09:52.930
this into the middle of the parent.

00:09:53.000 --> 00:09:56.960
That allows it to rotate also
about its central x-axis.

00:09:56.960 --> 00:09:58.330
And that's what we want.

00:09:58.400 --> 00:10:02.620
But what we really want is for
that to be at the edge of a ring.

00:10:02.620 --> 00:10:05.770
So the next thing we're
going to do is we're going to

00:10:05.770 --> 00:10:07.660
push that element out in z.

00:10:07.660 --> 00:10:10.830
So now we can see,
if we kind of spin it around,

00:10:10.830 --> 00:10:15.850
that that item is now pushed
out in z by the distance of what

00:10:15.850 --> 00:10:17.230
we're going to use as the radius.

00:10:17.240 --> 00:10:19.460
But it's still rotating about that.

00:10:19.530 --> 00:10:20.950
It's still at that central point.

00:10:21.050 --> 00:10:23.520
And so it's rotating essentially
at the edge of a cylinder.

00:10:23.780 --> 00:10:26.520
Next step, of course,
is just to add another item.

00:10:26.520 --> 00:10:30.520
And you can see this item,
it's been rotated a little bit.

00:10:30.520 --> 00:10:35.030
It's actually been rotated by 30 degrees
relative to its neighbor because we're

00:10:35.030 --> 00:10:36.520
going to have 12 items around this ring.

00:10:36.520 --> 00:10:39.520
So it's 1/12 of the
distance around that circle.

00:10:39.520 --> 00:10:45.520
So if we push this one out now,
you see it ends up next to its neighbor,

00:10:45.520 --> 00:10:46.520
which is exactly what we want.

00:10:46.520 --> 00:10:49.480
Now, the only thing left, really,
is to add another item.

00:10:49.560 --> 00:10:51.520
So we have the ring fully populated.

00:10:51.520 --> 00:10:56.520
And now we have essentially what we want,
except for one little problem.

00:10:56.520 --> 00:10:58.520
So we're going to have
to add another item.

00:10:58.520 --> 00:11:00.520
And we're going to have
to add another item.

00:11:01.710 --> 00:11:06.840
I'm a big fat liar,
and it's not actually this easy,

00:11:06.970 --> 00:11:12.650
because I showed you a very nice 3D ring,
but this is not the default behavior.

00:11:12.650 --> 00:11:18.020
If you saw the talk yesterday,
you saw that the default behavior

00:11:18.240 --> 00:11:22.750
in CSS is for it to look like this.

00:11:23.600 --> 00:11:25.260
And that doesn't look very good.

00:11:25.380 --> 00:11:26.990
It actually is still a 3D ring.

00:11:26.990 --> 00:11:29.920
As you can see,
the items that are more distant

00:11:29.920 --> 00:11:32.240
are smaller and the items
that are closer are larger.

00:11:32.240 --> 00:11:36.660
But it's flattened against its parent,
and that's the default behavior

00:11:36.660 --> 00:11:41.200
in these new CSS properties is for
items to flatten into their parent.

00:11:41.220 --> 00:11:46.610
Well, that's obviously not what we want,
and so we've added a new property,

00:11:46.610 --> 00:11:49.800
which is called WebKit Transform Style.

00:11:49.800 --> 00:11:52.500
And if we set that
Transform Style to preserve 3D,

00:11:52.500 --> 00:11:57.100
then it takes away that
restriction of all of the elements

00:11:57.100 --> 00:12:00.350
being on their parent plane,
and it allows them to

00:12:00.360 --> 00:12:01.400
sit above and below it.

00:12:01.460 --> 00:12:02.940
So that's exactly what we want.

00:12:02.940 --> 00:12:03.810
We've got that.

00:12:03.870 --> 00:12:08.070
Now, one last thing is you'll notice that
you can see the more distant objects,

00:12:08.070 --> 00:12:10.750
and you'll be able to see
this more clearly when we go

00:12:10.750 --> 00:12:12.460
to the actual application.

00:12:12.540 --> 00:12:15.830
But that can be really distracting
to see those distant objects,

00:12:15.850 --> 00:12:18.440
especially when there's
some nice text up there.

00:12:18.440 --> 00:12:21.920
So what we want to do is we want to
get rid of that using another property

00:12:22.080 --> 00:12:23.460
that is called WebKit Transform Style.

00:12:23.460 --> 00:12:28.520
So we're going to make it so that
when the items aren't facing you,

00:12:28.520 --> 00:12:33.240
when they're facing away from you,
they're going to disappear.

00:12:33.240 --> 00:12:34.160
They're not going to be shown.

00:12:34.160 --> 00:12:36.740
And so that's exactly what we want.

00:12:36.770 --> 00:12:38.360
We have a nice ring.

00:12:38.360 --> 00:12:43.300
And so why don't we go ahead
and build that ring right now.

00:12:57.920 --> 00:13:02.850
Okay, so here we have in
Dashcode all of our files.

00:13:02.950 --> 00:13:07.300
The three files that are interesting
to us are this index.html,

00:13:07.300 --> 00:13:08.740
which is really very simple.

00:13:08.740 --> 00:13:10.420
It's got some nice setup.

00:13:10.420 --> 00:13:14.540
It's going to set up the viewport
so that we have a fixed window.

00:13:14.540 --> 00:13:17.420
We're not going to be doing
any scaling because we want the

00:13:17.420 --> 00:13:20.980
application to look exactly,
layout exactly the way we want it to.

00:13:20.980 --> 00:13:24.130
We have some other pretty
standard setup stuff here.

00:13:24.130 --> 00:13:25.700
And then we have this ring.

00:13:25.700 --> 00:13:27.880
This is going to be
the parent of our app.

00:13:27.900 --> 00:13:29.700
our content.

00:13:31.870 --> 00:13:34.860
If we look at the style,
it's all pretty standard stuff.

00:13:34.860 --> 00:13:36.560
We're setting up the page.

00:13:36.570 --> 00:13:38.520
We're setting up some
pretty simple style.

00:13:38.570 --> 00:13:43.380
Then we have a bunch of style here
for laying out each of the items.

00:13:44.220 --> 00:13:45.500
Script also is pretty simple.

00:13:45.540 --> 00:13:46.760
There's some initialization.

00:13:46.760 --> 00:13:49.880
And then this main function here,
populate ring,

00:13:49.880 --> 00:13:54.690
which is going to create each element,
populate it, add its style so that it

00:13:54.720 --> 00:13:57.510
looks the way you want it to,
and then it's going

00:13:57.510 --> 00:13:58.830
to add it to the ring.

00:14:00.370 --> 00:14:03.650
And so let's look at this without
any changes and see what we've got.

00:14:03.690 --> 00:14:06.240
And you can see all the
items are shown there,

00:14:06.240 --> 00:14:09.280
but they're all sitting on top of
each other because we haven't moved

00:14:09.330 --> 00:14:11.030
them into their proper place yet.

00:14:11.070 --> 00:14:13.000
So let's go ahead and do that.

00:14:13.070 --> 00:14:16.770
If we go here and grab some
code and drop it right here,

00:14:16.770 --> 00:14:20.660
you can see what this is,
is it's setting the angle of each

00:14:20.660 --> 00:14:23.000
element to go around the ring.

00:14:23.040 --> 00:14:26.130
And then we are positioning
each element at that angle,

00:14:26.130 --> 00:14:29.140
and we're pushing it out
by the value of its radius.

00:14:29.400 --> 00:14:31.550
So just by adding that,
we go from a ring where

00:14:31.550 --> 00:14:34.720
everything's sitting on top of
each other to something that looks,

00:14:34.820 --> 00:14:37.240
starts to look like what
we want it to look like.

00:14:37.290 --> 00:14:41.570
First thing you might notice here is
that we haven't added perspective,

00:14:41.570 --> 00:14:44.680
and so all of the items
look like they're very flat.

00:14:44.680 --> 00:14:47.670
And so let's go ahead and add that.

00:14:47.690 --> 00:14:51.760
First thing we're going to do is we want
to add perspective to the parent of the

00:14:51.890 --> 00:14:55.400
ring so that we keep the perspective
separate from the animations that

00:14:55.770 --> 00:14:57.780
we're going to be doing on the ring.

00:14:58.630 --> 00:15:03.190
So let's go ahead and replace
this hierarchy with one

00:15:03.280 --> 00:15:05.570
that's just slightly bigger.

00:15:07.680 --> 00:15:09.510
So here all we've done is
we've added a ring container.

00:15:09.510 --> 00:15:17.660
This is the thing that we're going
to apply the new property to.

00:15:17.660 --> 00:15:20.390
Let's actually go to the CSS.

00:15:23.170 --> 00:15:26.220
So let's go ahead and
add the style for that.

00:15:26.300 --> 00:15:29.980
So you can see this style is going
to set the perspective to 1,000.

00:15:29.980 --> 00:15:32.000
1,000 is a pretty moderate
amount of perspective.

00:15:32.070 --> 00:15:33.800
It's not going to have a
whole lot of foreshortening.

00:15:33.800 --> 00:15:35.440
It's going to give us
about the look we want.

00:15:35.470 --> 00:15:37.380
We're turning on Preserve 3D.

00:15:37.380 --> 00:15:39.880
Like I said,
through the entire hierarchy,

00:15:39.880 --> 00:15:43.290
you're going to want to have
Preserve 3D so that the items can

00:15:43.290 --> 00:15:45.510
live on top and below their parent.

00:15:45.740 --> 00:15:48.810
We're also here setting
WebKit perspective origin.

00:15:48.810 --> 00:15:53.260
What that's going to do is normally
the perspective is centered at the

00:15:53.390 --> 00:15:55.980
center of the item that it's placed on.

00:15:55.980 --> 00:15:58.810
But since our item here doesn't
have a width or a height,

00:15:58.810 --> 00:16:01.060
we're going to have to set it ourselves.

00:16:01.060 --> 00:16:02.720
We're going to set it right
in the middle of the screen.

00:16:02.720 --> 00:16:05.610
The reason we don't have a width
and a height is because we don't

00:16:05.620 --> 00:16:08.960
want this element to interfere with
the interaction that we're going to

00:16:08.960 --> 00:16:12.190
be doing later when Antoine shows
you how to interact with this.

00:16:12.200 --> 00:16:15.120
And so now we've added those two things.

00:16:15.120 --> 00:16:15.710
Let's see what we've done.

00:16:15.720 --> 00:16:20.620
We've got -- now you can see we've
got something that looks pretty 3D.

00:16:20.620 --> 00:16:23.070
Things in front are
bigger than things behind.

00:16:23.130 --> 00:16:26.240
But then, of course,
we can see those things behind,

00:16:26.460 --> 00:16:28.120
and that's not what we want.

00:16:28.340 --> 00:16:31.600
Turn on the back face
visibility to hidden.

00:16:31.680 --> 00:16:34.690
So let's go ahead and do that.

00:16:39.290 --> 00:16:42.380
So we've just turned on
backface visibility hidden here.

00:16:42.380 --> 00:16:45.140
If we look now, looks the same,
except that you're not

00:16:45.220 --> 00:16:46.160
seeing those back faces.

00:16:46.160 --> 00:16:48.120
We're starting to look pretty close here.

00:16:48.130 --> 00:16:52.240
And so a couple more things that you're
going to notice is that the text,

00:16:52.360 --> 00:16:55.580
especially this text right in front,
looks pretty fuzzy.

00:16:55.580 --> 00:16:56.980
It doesn't really look very good.

00:16:57.000 --> 00:16:59.080
And that front item is too big.

00:16:59.210 --> 00:17:00.500
It stretches out.

00:17:00.510 --> 00:17:02.580
And that, of course,
is because we've pushed

00:17:02.580 --> 00:17:05.960
it out by the radius,
and so it's closer to the viewer.

00:17:05.980 --> 00:17:09.200
And so it's going to look larger
because of the perspective we've added.

00:17:09.220 --> 00:17:11.580
And so what we want to do is
we want to push that back,

00:17:11.580 --> 00:17:15.060
because that item is going to look
best if it's at the z equals 0 plane.

00:17:15.060 --> 00:17:17.340
We've kind of laid it
out to look best there.

00:17:17.350 --> 00:17:20.790
And so we're going to push the entire
ring back by the distance of the radius

00:17:21.060 --> 00:17:26.940
so that the ring is still going to rotate
about the center of the ring parent,

00:17:26.950 --> 00:17:29.500
but it's going to be pushed
back so the frontmost item

00:17:29.580 --> 00:17:31.810
is at the z equals 0 plane.

00:17:31.900 --> 00:17:36.090
To do that, we're going to have to,
again,

00:17:36.740 --> 00:17:41.710
Add another layer of hierarchy
here so we have something to add.

00:17:43.060 --> 00:17:46.400
and I will be talking
about the pushback tool.

00:17:46.440 --> 00:17:48.320
So here, in addition to the ring
container and the ring,

00:17:48.320 --> 00:17:50.460
we've added this thing
called ring aligner.

00:17:50.470 --> 00:17:53.790
That's just going to be
a static transform in Z.

00:17:53.890 --> 00:17:56.310
So let's go ahead and add that.

00:18:01.110 --> 00:18:04.000
Sorry.

00:18:04.000 --> 00:18:05.860
Let's try that.

00:18:05.930 --> 00:18:08.860
So here we have a style
for the ring aligner.

00:18:08.860 --> 00:18:12.220
It's going to also be preserved
3D so that we can make sure that

00:18:12.280 --> 00:18:13.880
we maintain that 3D hierarchy.

00:18:14.080 --> 00:18:16.830
And all we're going to do is
we're just going to translate

00:18:16.830 --> 00:18:21.250
it in Z by this amount,
which happens to be our radius.

00:18:21.390 --> 00:18:24.640
So now when we look at it one more time,
now you can see that frontmost item.

00:18:24.640 --> 00:18:29.680
It looks sharp, it looks crisp,
and it's filling the screen just fine.

00:18:29.680 --> 00:18:32.800
So this looks pretty
close to what we want.

00:18:32.850 --> 00:18:36.090
There's one last thing
that I need to check out.

00:18:36.130 --> 00:18:39.050
If you look at the ring,
you can see that in the ring

00:18:39.050 --> 00:18:43.660
aligner and the ring container,
I added Preserve 3D, but the ring style,

00:18:43.660 --> 00:18:47.600
which was pre-existing,
that doesn't have Preserve 3D.

00:18:47.610 --> 00:18:50.520
It looks fine because we
haven't started animating,

00:18:50.520 --> 00:18:51.280
but once we start animating,
it looks fine.

00:18:51.300 --> 00:18:55.180
You'll see that all those elements
are going to be flat unless we

00:18:55.220 --> 00:18:57.240
add a Preserve 3D to the ring,
too.

00:18:57.240 --> 00:18:59.820
So let me do that so that
when Antoine starts animating,

00:18:59.900 --> 00:19:01.170
everything looks good.

00:19:01.170 --> 00:19:03.360
You can see we've added it.

00:19:03.560 --> 00:19:04.310
We go here now.

00:19:04.310 --> 00:19:05.850
It looks the same,
but when we animate it,

00:19:05.850 --> 00:19:07.520
it's going to start looking a lot better.

00:19:07.520 --> 00:19:09.940
So let's go back to
the slides real quick,

00:19:10.030 --> 00:19:12.450
and let's summarize what we've done.

00:19:18.330 --> 00:19:20.100
That's what we just did.

00:19:20.260 --> 00:19:24.200
Okay, so the properties that we've
looked at is 3D transforms.

00:19:24.280 --> 00:19:28.650
3D transforms are the basic
property that you're going to use to

00:19:28.830 --> 00:19:30.210
position things in three dimensions.

00:19:30.210 --> 00:19:34.130
You can position things like we did,
rotate them like we did.

00:19:34.160 --> 00:19:35.000
You can also scale.

00:19:35.000 --> 00:19:38.250
We didn't really have to use that today,
but that's available too.

00:19:38.280 --> 00:19:40.660
You can also combine all
these as you've seen.

00:19:42.120 --> 00:19:44.700
And in support of that,
we have WebKit Perspective.

00:19:44.800 --> 00:19:47.640
We've used a WebKit Perspective
that was fairly small.

00:19:47.640 --> 00:19:51.570
You can use some perspectives
that make things look very,

00:19:51.570 --> 00:19:55.600
very warped or whatever kind
of look you're looking for.

00:19:55.620 --> 00:19:57.240
We used one that's pretty moderate.

00:19:57.240 --> 00:20:01.000
So it looks 3D, but it doesn't kind of
get in your face too much.

00:20:02.440 --> 00:20:06.240
And then we've used
this Preserve 3D flag,

00:20:06.240 --> 00:20:10.540
which basically allows you to
make sure that things that are

00:20:10.540 --> 00:20:12.360
positioned in Z actually live in Z.

00:20:12.360 --> 00:20:15.630
And it's hierarchical,
and so you can have things that are

00:20:15.640 --> 00:20:20.200
positioned by one element in Z and then
positioned differently so that you can

00:20:20.200 --> 00:20:25.370
animate around different armatures and
have some pretty complex 3D hierarchies.

00:20:25.800 --> 00:20:29.220
And finally, we hid the back faces.

00:20:29.280 --> 00:20:31.310
In a demo like this is what you want.

00:20:31.460 --> 00:20:32.110
Sometimes you don't.

00:20:32.230 --> 00:20:36.250
Sometimes you want to see the back faces,
but a lot of times this really helps out.

00:20:36.260 --> 00:20:39.270
And so let's, we stepped into the code.

00:20:39.360 --> 00:20:44.090
Let's go to the second step,
and I'll give you back to Antoine.

00:20:53.120 --> 00:20:54.870
Thanks, Chris.

00:20:54.980 --> 00:20:57.620
So I hope you got all that,
because it's not the easiest part.

00:20:57.700 --> 00:20:59.340
From now on,
it's going to be a lot easier,

00:20:59.370 --> 00:21:01.760
and we're going to do a lot
more stuff with a lot less code,

00:21:01.760 --> 00:21:04.900
actually, because it's really the
power of what we implemented.

00:21:04.900 --> 00:21:07.280
It's really easy for
you to get things done.

00:21:07.280 --> 00:21:10.750
So the second step is,
like I said earlier,

00:21:10.780 --> 00:21:13.540
we're going to add the
first bit of interactivity.

00:21:13.580 --> 00:21:15.840
We want to be able to
drag around the ring.

00:21:15.880 --> 00:21:18.340
And so Chris has already
done the main setup.

00:21:18.340 --> 00:21:20.050
The ring is laid out in 3D.

00:21:20.290 --> 00:21:21.890
Preserve 3D is preserved on the ring.

00:21:22.020 --> 00:21:25.550
So if we change the
rotation of the whole ring,

00:21:25.630 --> 00:21:28.450
the thing will move in 3D,
and everything will look

00:21:28.540 --> 00:21:29.740
exactly like we intend to.

00:21:29.990 --> 00:21:32.520
So what we really need to do now--

00:21:33.030 --> 00:21:36.160
is we need to listen to touch events.

00:21:36.190 --> 00:21:40.180
Like I said, in Safari on iPhone now,
we have multi-touch events straight

00:21:40.180 --> 00:21:42.860
into your JavaScript using DOM events.

00:21:42.930 --> 00:21:46.490
And reacting to these events,
we're going to figure out what the

00:21:46.490 --> 00:21:50.480
delta is between each interaction
and update the rotation of the

00:21:50.860 --> 00:21:53.090
whole ring as we drag along.

00:21:54.290 --> 00:21:58.380
So let me tell you a little bit about
how touch events work with the DOM and

00:21:58.380 --> 00:22:00.220
JavaScript in your web content.

00:22:00.220 --> 00:22:06.070
So the first thing you're going to
want to do is on each of our elements,

00:22:06.440 --> 00:22:09.990
we want to add an event listener and
start listening to the TouchStart event.

00:22:10.100 --> 00:22:13.620
TouchStart is one of the new events
that we introduced for touch event

00:22:13.710 --> 00:22:15.940
support in Safari and iPhone.

00:22:15.960 --> 00:22:20.780
And this will tell us the user
has put his finger on the screen.

00:22:20.800 --> 00:22:23.130
And at this point,
we'll want to start listening to

00:22:23.130 --> 00:22:26.260
all the other events to have the
dragging interaction working.

00:22:26.260 --> 00:22:28.580
You'll notice the second
argument to this function,

00:22:28.580 --> 00:22:31.260
which is a standard
DOM function at event listener,

00:22:31.280 --> 00:22:33.840
is an object.

00:22:33.840 --> 00:22:36.940
And this object will conform
to a protocol from DOM events,

00:22:37.120 --> 00:22:38.920
which is event listener protocol.

00:22:38.940 --> 00:22:43.340
And that means that if we implement
and handle event method on this object,

00:22:43.340 --> 00:22:46.440
all the events that we use will
be routed to that function.

00:22:46.440 --> 00:22:50.760
So we use a single scoped method
to handle all our event handling.

00:22:50.760 --> 00:22:53.020
So we'll look into that in more detail.

00:22:53.040 --> 00:22:56.040
And we'll get back to the code.

00:22:56.110 --> 00:22:58.200
So we're going to start
by having a TouchStart.

00:22:58.220 --> 00:23:01.260
User touches the screen.

00:23:01.280 --> 00:23:03.710
At this point, register new events for
touch move and touch end.

00:23:03.780 --> 00:23:06.290
So touch move is when the user is
going to move around the screen

00:23:06.440 --> 00:23:08.500
while keeping pressure on the screen.

00:23:08.530 --> 00:23:11.350
And finally, on touch end,
we'll do some cleanup after

00:23:11.350 --> 00:23:15.580
our interaction when the user
lifts the finger off the screen.

00:23:15.610 --> 00:23:18.720
And all this interaction is
going to go to a single function,

00:23:18.960 --> 00:23:20.860
which is handle event
on a controller object.

00:23:20.910 --> 00:23:22.840
Because we implement the
right event listener protocol,

00:23:22.840 --> 00:23:25.280
we're going to have a protocol
from DOM events specification.

00:23:25.320 --> 00:23:28.740
So this is basically how we're
going to work all of this.

00:23:28.740 --> 00:23:32.300
So if we get into the code-- and I'd
like to switch to a demo machine,

00:23:32.670 --> 00:23:36.660
please-- we can get started
doing this right away.

00:23:37.680 --> 00:23:39.260
All right.

00:23:39.390 --> 00:23:43.640
So let me get rid of the previous
version of the code that we have,

00:23:43.640 --> 00:23:47.510
load up the new project in Dash Code,

00:23:52.300 --> 00:23:57.640
Okay, so we're really starting
from the same amount of code

00:23:57.640 --> 00:23:59.060
as we had before with Chris.

00:23:59.060 --> 00:24:01.640
So we have our JavaScript here.

00:24:01.840 --> 00:24:04.960
We still have our HTML,
which is populated by

00:24:05.030 --> 00:24:07.010
script like it used to be.

00:24:07.720 --> 00:24:10.700
And the first thing we got to do,
like I said, we need to start

00:24:10.710 --> 00:24:12.770
listening to touch events.

00:24:13.060 --> 00:24:16.640
So while we're populating events
and setting up the transforms

00:24:16.830 --> 00:24:20.380
for the individual items in the
ring to have the right rotation,

00:24:20.380 --> 00:24:23.900
et cetera, we're actually going to start

00:24:31.680 --> 00:24:34.330
We're actually going to start by adding
an event listener on each of our items.

00:24:34.340 --> 00:24:37.580
So this is pretty much the
code that we saw on the slide.

00:24:37.580 --> 00:24:39.630
We register an event for touch start.

00:24:39.640 --> 00:24:42.350
We pass the ring controller
object as the object is going

00:24:42.350 --> 00:24:43.790
to take care of the events.

00:24:43.840 --> 00:24:47.260
And if we take a look
further down in the file,

00:24:47.260 --> 00:24:49.440
we do have our ring
controller already set up.

00:24:49.540 --> 00:24:52.090
Ring controller is going
to really control the whole

00:24:52.090 --> 00:24:53.620
interactivity in our ring.

00:24:53.620 --> 00:24:56.020
So we have a field,
a single field to track what

00:24:56.020 --> 00:24:57.460
the current rotation is.

00:24:58.160 --> 00:25:00.750
And that field will be updated
as we call set rotation,

00:25:00.820 --> 00:25:03.560
which we'll call continuously
as we implement the interaction,

00:25:03.560 --> 00:25:06.640
which will track the rotation
and also apply it to the

00:25:06.820 --> 00:25:08.580
ring using WebKit transform.

00:25:11.320 --> 00:25:13.300
That's what the setRetention method does.

00:25:13.450 --> 00:25:15.530
And of course,
we implement the handleEvent method,

00:25:15.540 --> 00:25:19.260
which is the method where all the events
are going to go to as we register them.

00:25:19.340 --> 00:25:23.240
So what we'll do is we'll just branch
those events into separate methods

00:25:23.240 --> 00:25:26.400
so that when we get a touch start,
we'll call it an interaction start.

00:25:26.440 --> 00:25:28.250
Touch moves,
we'll call it an interaction move,

00:25:28.250 --> 00:25:29.280
and so on.

00:25:29.440 --> 00:25:33.460
So there's another thing we're
going to want to do here is,

00:25:33.480 --> 00:25:36.580
because we're going to
implement selection later on,

00:25:36.600 --> 00:25:42.080
I really want to track the
index of the item that will

00:25:42.080 --> 00:25:43.450
be receiving the interaction.

00:25:43.560 --> 00:25:46.810
So we have an index as
we go through the ring,

00:25:46.810 --> 00:25:49.050
and this is mapped to the
data source that we have.

00:25:49.060 --> 00:25:52.220
We'll look at that a
little bit more later.

00:25:52.240 --> 00:25:55.170
And we'll just track that
on a custom JavaScript field

00:25:55.200 --> 00:25:56.670
directly on the node in the DOM.

00:25:56.840 --> 00:26:00.470
So when we will be done
with selection behavior,

00:26:00.470 --> 00:26:04.150
we'll be able to go back and look
at that index and figure out what

00:26:04.160 --> 00:26:06.940
was touched and know that this
is the item that was selected.

00:26:06.940 --> 00:26:11.730
So we're done with the initial work here,
and we're all set up to

00:26:11.730 --> 00:26:13.540
react to touch start events.

00:26:13.870 --> 00:26:16.920
So now we really have to go into
interaction start and start writing

00:26:17.050 --> 00:26:20.860
the code that we need to get this
dragging interaction working.

00:26:21.410 --> 00:26:23.480
So there's a few things
we're going to do here.

00:26:23.570 --> 00:26:28.400
First of all, we need to track some start
stage for the interaction.

00:26:28.500 --> 00:26:32.490
So we need to start tracking where
the user touched on the screen

00:26:32.490 --> 00:26:34.140
to get the interaction started.

00:26:34.230 --> 00:26:38.280
So usually with mouse events,
you just go event.pageY or clientY,

00:26:38.280 --> 00:26:41.000
depending on what information
you're interested in.

00:26:41.040 --> 00:26:43.160
In our case,
we're dealing with touch events.

00:26:43.210 --> 00:26:45.600
And on iPhone, we have multi-touch.

00:26:45.850 --> 00:26:50.620
And so if the user uses three fingers,
you'll need to get various

00:26:50.620 --> 00:26:54.900
coordinates to find the
coordinates of all those fingers.

00:26:55.060 --> 00:26:59.860
So you now have a new
array on the event object,

00:27:00.100 --> 00:27:02.390
which will give you access to all
of these touches individually.

00:27:02.500 --> 00:27:04.140
So we just care about
the first touch here.

00:27:04.140 --> 00:27:06.060
We're going to do one finger dragging.

00:27:06.120 --> 00:27:08.360
And we're going to get pageY,
and that'll be our start

00:27:08.360 --> 00:27:09.520
position for rotation.

00:27:09.560 --> 00:27:12.250
We also need to track what the
current rotation was before

00:27:12.250 --> 00:27:16.400
we started the interaction,
so that as we go along,

00:27:16.400 --> 00:27:18.860
we can just build on top of that.

00:27:18.900 --> 00:27:22.770
And we also need to track what
the angle difference was for our

00:27:22.810 --> 00:27:26.160
object compared to the center,
so that we have a really

00:27:26.160 --> 00:27:27.600
accurate rotation.

00:27:27.690 --> 00:27:30.810
So now we're done tracking
this base information.

00:27:30.920 --> 00:27:35.540
We want to track now the touch move
and touch end event listeners so

00:27:35.540 --> 00:27:40.080
that we can really have callbacks
every time the user moves the finger.

00:27:40.150 --> 00:27:44.200
However,
you notice that we do not register

00:27:44.550 --> 00:27:47.080
the events on our item in the ring.

00:27:47.080 --> 00:27:49.900
We're actually going to register
the events on the whole window.

00:27:50.090 --> 00:27:53.840
And we do that because if you want to
have a good drag and drop interaction,

00:27:53.840 --> 00:27:56.590
you want to be able to drag the
finger anywhere on the screen and

00:27:56.590 --> 00:27:58.480
have the interaction follow along.

00:27:58.480 --> 00:28:02.080
So even if we take the finger out of
the object that started the interaction,

00:28:02.080 --> 00:28:04.780
we still want the ring to
keep going and rotating.

00:28:04.920 --> 00:28:07.390
So in this case,
we add event listener on window

00:28:07.400 --> 00:28:10.720
so that we always get events
wherever they happen on screen.

00:28:10.720 --> 00:28:13.250
We pass this as the handler object.

00:28:13.410 --> 00:28:15.790
So once again,
everything will go through ring

00:28:15.790 --> 00:28:18.560
controller and the handle event method.

00:28:18.870 --> 00:28:21.740
And finally, we set capture mode
in our event handling.

00:28:21.740 --> 00:28:25.240
That means that the event is going
to go straight into the window.

00:28:25.240 --> 00:28:28.480
And we'll be able to handle the
event as soon as it happens.

00:28:28.480 --> 00:28:32.600
And you'll notice we'll be using
that in a little while just to make

00:28:32.600 --> 00:28:34.270
sure things work very smoothly.

00:28:34.380 --> 00:28:38.810
So now we are ready to start
listening to touch events.

00:28:38.820 --> 00:28:42.340
But we also need to implement, of course,
what happens when a touch move comes in.

00:28:42.420 --> 00:28:44.250
So this all happens in our
interaction move method,

00:28:44.290 --> 00:28:46.560
which was routed from handle event.

00:28:46.560 --> 00:28:48.860
So let's drop the code in here.

00:28:48.860 --> 00:28:50.810
And what we're going to
do here is reminiscent of

00:28:50.810 --> 00:28:52.120
what we did in touch start.

00:28:52.120 --> 00:28:54.200
We need to figure out
what the current y is,

00:28:54.200 --> 00:28:55.240
because we're going to
have to do a lot of things.

00:28:55.260 --> 00:28:59.050
Because based on that current y,
we'll be able to subtract that to the

00:28:59.050 --> 00:29:03.840
previous y and figure out how much
delta there was in our interaction.

00:29:03.840 --> 00:29:09.900
So what we do here is we
take our start y angle,

00:29:09.920 --> 00:29:12.740
and we subtract to that the new
y angle for this position so that

00:29:12.750 --> 00:29:17.310
we're going to get the exact angle
delta between the first interaction

00:29:17.310 --> 00:29:19.200
and the current interaction.

00:29:19.340 --> 00:29:21.220
And once we figure out
what this angle delta is,

00:29:21.240 --> 00:29:25.200
we just call set rotation,
subtract the new angle delta,

00:29:25.240 --> 00:29:27.320
to the star rotation,
and that will give us our current

00:29:27.320 --> 00:29:29.510
rotation for the whole ring.

00:29:30.940 --> 00:29:32.500
So before we-- we're almost done here.

00:29:32.500 --> 00:29:35.680
Technically, we'll be rotating along
as we touch along.

00:29:35.680 --> 00:29:38.490
But the problem is we also need to
clean up when the interaction ends.

00:29:38.650 --> 00:29:41.510
So-- oops, sorry.

00:29:41.720 --> 00:29:45.450
At interaction end,
we really need to just remove the event

00:29:45.450 --> 00:29:47.370
listeners that we placed dynamically.

00:29:47.460 --> 00:29:49.520
So we don't want to listen
to touch move anymore,

00:29:49.580 --> 00:29:52.080
and we do not want to
listen to touch end anymore.

00:29:52.080 --> 00:29:55.660
We still want to listen to touch start,
because we'll need that to start again

00:29:55.660 --> 00:29:59.200
when we drag in another point later on.

00:29:59.200 --> 00:30:00.700
So we're going to keep that intact.

00:30:00.700 --> 00:30:04.480
So at this point,
it seems like we've done all that

00:30:04.480 --> 00:30:07.580
we need to do for our rotations.

00:30:07.600 --> 00:30:09.240
We're ready for touch
move and touch ends,

00:30:09.240 --> 00:30:11.060
and we're updating the
rotation as we go along.

00:30:11.240 --> 00:30:13.820
So I'm going to touch on
this and start dragging.

00:30:13.820 --> 00:30:16.580
Oh, so something-- that's
not exactly what I want,

00:30:16.580 --> 00:30:19.340
because we do get a
certain amount of rotation,

00:30:19.340 --> 00:30:22.630
but we also see the whole page panning.

00:30:23.100 --> 00:31:33.200
[Transcript missing]

00:31:33.480 --> 00:31:38.400
and David . It really
looks like it this time.

00:31:38.520 --> 00:31:39.400
So that is all we need
to do for step two.

00:31:39.400 --> 00:31:41.010
Can we switch back to the slides, please?

00:31:44.440 --> 00:31:48.340
So let's take another look-- whoops,
sorry.

00:31:48.400 --> 00:31:51.220
We're done with step two.

00:31:51.330 --> 00:31:53.400
So now we're done with
the dragging interaction.

00:31:53.440 --> 00:31:59.370
We want to be able to tap on items in
the ring and slide into the info view.

00:32:01.390 --> 00:32:06.240
So you probably noticed that
current web applications actually

00:32:06.240 --> 00:32:08.740
do that kind of effect on iPhone.

00:32:08.800 --> 00:32:13.440
But they do that with really what
can be considered as a big fat hack.

00:32:13.440 --> 00:32:16.580
They just scroll the whole view around.

00:32:16.620 --> 00:32:18.720
And they get decent performance with it.

00:32:18.770 --> 00:32:22.920
And in our case,
we already have WebKit Transform,

00:32:22.930 --> 00:32:25.320
which are great
hardware-accelerated transforms,

00:32:25.350 --> 00:32:26.940
and we also have CSS transitions.

00:32:27.120 --> 00:32:29.700
And we really want to start
leveraging this so that we can have

00:32:29.700 --> 00:32:32.740
smooth interaction going in and out.

00:32:32.780 --> 00:32:35.930
And we'll be able to do that
just as many times as we please.

00:32:36.200 --> 00:32:39.240
And it's actually going to be
pretty simple to implement.

00:32:39.340 --> 00:32:42.870
So our goal here is we
want to detect selection.

00:32:43.200 --> 00:32:46.750
And we're not going to use clicks,
because we want to be a

00:32:46.750 --> 00:32:48.320
really responsive application.

00:32:48.400 --> 00:32:51.550
So we want to use touch events
to figure out as soon as a

00:32:51.550 --> 00:32:53.500
tap happened on our page.

00:32:53.630 --> 00:32:57.070
And we want to be able to slide
the ring out and the info pane in,

00:32:57.340 --> 00:32:59.250
and the opposite when we
want to get back to the ring.

00:32:59.300 --> 00:33:01.830
And so to do that,
we're going to track touch moves to

00:33:01.910 --> 00:33:04.560
figure out when a selection happens.

00:33:04.680 --> 00:33:07.560
A tap is really going to be
touch start and touch end events

00:33:07.770 --> 00:33:10.800
happening one after the other,
no touch move in between.

00:33:10.880 --> 00:33:14.200
So we're going to be tracking touch
moves to make sure to identify

00:33:14.200 --> 00:33:16.800
if we have a selection or not.

00:33:16.840 --> 00:33:19.880
We're also going to want to set up
CSS transitions so that when we update

00:33:20.040 --> 00:33:23.680
the transform of either the ring
container or the info pane container,

00:33:23.820 --> 00:33:28.600
that we have a nicely hardware-animated
transition going on automatically.

00:33:28.660 --> 00:33:31.810
And finally-- So we're going to be
able to update the transform of each

00:33:31.890 --> 00:33:34.680
of those containers so they actually
get transition in and out of screen.

00:33:34.680 --> 00:33:41.870
So let's get back into the code
and switch to the demo machine,

00:33:41.870 --> 00:33:43.370
please.

00:33:46.900 --> 00:33:53.210
All right, so we're going to quit this
version of the project and load

00:33:53.210 --> 00:33:55.790
up a third step right here.

00:33:59.310 --> 00:34:01.620
So there's a bit more code
that's already in here.

00:34:01.620 --> 00:34:04.480
It's not that interesting,
so I thought I would spare you,

00:34:04.490 --> 00:34:05.940
but let's go and take a quick look.

00:34:06.150 --> 00:34:08.970
So we're going to introduce
the info pane here,

00:34:08.970 --> 00:34:14.080
the info view, and we have all the basic
HTML for it already laid out.

00:34:14.220 --> 00:34:16.970
So we have a back button,
we'll have an info image,

00:34:16.970 --> 00:34:20.700
which is like the snapshot of
the movie that we'll be playing,

00:34:20.700 --> 00:34:23.860
some metadata, a wrapper for the title,
duration, date, and the description.

00:34:23.860 --> 00:34:27.940
All of this is going to be populated
by JavaScript in a single new

00:34:28.250 --> 00:34:32.420
function that we introduced,
which is called update info pane.

00:34:32.420 --> 00:34:35.580
And based on a current index
that we'll be updating,

00:34:35.580 --> 00:34:38.790
global variable,
we'll get into the data source,

00:34:38.790 --> 00:34:41.990
which is a simple little
JavaScript file which has little

00:34:41.990 --> 00:34:44.980
objects in an array with title,
fields, desk, and et cetera.

00:34:44.980 --> 00:34:49.030
Based on that,
we'll be updating all the elements in

00:34:49.030 --> 00:34:52.320
the DOM to content from the data source.

00:34:52.380 --> 00:34:53.830
So this is not really interesting.

00:34:53.860 --> 00:34:56.660
I mean, that's really pretty
standard functionality.

00:34:56.700 --> 00:34:59.450
And we have a little bit of script,
of course, to take care of all of that.

00:34:59.580 --> 00:35:03.500
So just info title, info description,
all these are going to be laid out,

00:35:03.500 --> 00:35:05.290
font size set, and et cetera.

00:35:05.400 --> 00:35:09.980
So we're not going to
worry about this right now.

00:35:10.350 --> 00:35:14.520
We have to focus on the interaction here,
because the first thing we've got

00:35:14.520 --> 00:35:18.190
to do is we've got to figure out
if we have a selection or not.

00:35:18.290 --> 00:35:20.540
So like I said,
we want to detect that by figuring out

00:35:20.540 --> 00:35:24.180
if we have a touch start and a touch
end happening right one after the other.

00:35:24.180 --> 00:35:26.580
We do not want any touch
move happening in the middle.

00:35:26.580 --> 00:35:31.780
So to do that, we're actually going
to do a simple thing,

00:35:31.780 --> 00:35:37.330
is that when the interaction starts,
we're going to want to...

00:35:38.820 --> 00:35:44.220
track a new object that's going
to figure out if touchMoved

00:35:44.220 --> 00:35:46.140
has been set to true or false.

00:35:46.140 --> 00:35:50.300
So each time an interaction starts,
we're going to say no touchMoved so far,

00:35:50.300 --> 00:35:53.060
we just started interaction,
so touchMoved is false.

00:35:53.060 --> 00:35:55.280
And we also want-- because
we're going to do selection,

00:35:55.280 --> 00:35:59.500
we want to figure out
what item we touched,

00:35:59.500 --> 00:36:01.970
so that we can track it at the end
of a written interaction and say,

00:36:01.970 --> 00:36:04.520
that was the item that was touched,
get to the index on it,

00:36:04.650 --> 00:36:07.500
and figure out what item needs
to be populated in the info pane.

00:36:07.500 --> 00:36:11.130
So we're just going to track the current
item as well in the scope of our object,

00:36:11.130 --> 00:36:12.740
in a controller object,
and that will be just the

00:36:12.740 --> 00:36:13.940
current target of the event.

00:36:13.940 --> 00:36:18.220
That means the element that
was tapped into our code.

00:36:18.320 --> 00:36:20.160
So that's it for Interaction Start.

00:36:20.210 --> 00:36:23.480
But of course, in Interaction Move,
you probably guessed what

00:36:23.480 --> 00:36:24.600
we're going to do here.

00:36:24.670 --> 00:36:27.470
We're just going to update Touch Moved.

00:36:28.000 --> 00:38:18.800
[Transcript missing]

00:38:19.040 --> 00:38:22.690
So we can still drag around the screen,
and if we release,

00:38:22.800 --> 00:38:24.980
nothing happens because we figured
out this is not a selection.

00:38:25.040 --> 00:38:27.840
However, if we just tap,
we got a selection.

00:38:27.900 --> 00:38:29.660
And we went straight into the info view.

00:38:29.660 --> 00:38:31.940
Well, OK, it looks fine.

00:38:31.940 --> 00:38:35.300
We have content based
on what we just touched.

00:38:35.350 --> 00:38:37.160
Everything was updated,
and it looks pretty good.

00:38:37.160 --> 00:38:38.720
But what happened to our transitions?

00:38:40.600 --> 00:38:44.420
And we did update the transform,
but we need to say, well,

00:38:44.420 --> 00:38:47.760
we need to tell the browser,
I need this transform when it

00:38:47.760 --> 00:38:51.010
changes from a state to another
state to be transitioned with a nice,

00:38:51.140 --> 00:38:52.750
smooth animation.

00:38:53.100 --> 00:38:54.970
So it's probably going
to be a lot of work,

00:38:54.980 --> 00:38:55.540
right?

00:38:55.540 --> 00:38:58.550
I mean, if you did this in JavaScript,
you'd take a lot of code,

00:38:58.550 --> 00:39:00.340
have to manage your own timer.

00:39:00.370 --> 00:39:02.060
It'd be pretty tedious.

00:39:02.100 --> 00:39:05.680
But, fortunately,
we did a lot of work for you here.

00:39:05.720 --> 00:39:09.880
And all we've got to do is
declaratively in our CSS just say,

00:39:09.900 --> 00:39:14.240
when this element
changes WebKit transform,

00:39:14.240 --> 00:39:16.750
animate this change of
state during a certain time.

00:39:16.830 --> 00:39:19.430
So let's start with our info pane.

00:39:19.590 --> 00:39:22.460
Info pane, we're changing the transform.

00:39:22.490 --> 00:39:25.790
It has a base transform of 320 pixels,
which makes it out of the

00:39:25.930 --> 00:39:27.560
screen so we don't see it.

00:39:27.610 --> 00:39:34.120
And what we're going to do here is we're
just going to add two lines of CSS.

00:39:34.150 --> 00:39:37.550
And the two lines of CSS just say,
I want the property

00:39:37.670 --> 00:39:40.670
WebKit transform to be animated,
and I want this to happen

00:39:40.790 --> 00:39:42.140
across 0.5 seconds.

00:39:42.140 --> 00:39:44.260
You can put in any old
time you want here.

00:39:44.440 --> 00:39:47.070
So that means now every time we're
going to change the transform,

00:39:47.070 --> 00:39:51.040
our info view is going to slide
as opposed to just snapping.

00:39:51.340 --> 00:39:52.760
And we didn't really do anything here.

00:39:52.760 --> 00:39:55.130
I mean, we're just changing the--
it's really about thinking

00:39:55.130 --> 00:39:56.130
what you do on the high level.

00:39:56.140 --> 00:39:58.870
You're just changing the value
and let the browser work the

00:39:58.870 --> 00:40:02.180
magic to make it all happen,
animated and very smooth,

00:40:02.180 --> 00:40:05.570
because all of this is done in the GPU.

00:40:06.000 --> 00:40:09.200
And so we also have to do it
on the container because both

00:40:09.250 --> 00:40:11.010
elements need to slide together.

00:40:11.020 --> 00:40:14.370
So we'll do the exact same thing,
dragging a little bit of code,

00:40:14.370 --> 00:40:17.700
set up WebKit transition
probability with WebKit transform,

00:40:17.700 --> 00:40:20.490
and set up the duration
to be 0.5 seconds.

00:40:21.280 --> 00:40:24.600
So that's probably all
we really need here.

00:40:24.600 --> 00:40:26.770
So let's run it again
and see what happens.

00:40:26.800 --> 00:40:28.100
I'm going to drag around.

00:40:28.100 --> 00:40:28.940
Nothing happens.

00:40:28.980 --> 00:40:31.860
Hit Select, and things slide in.

00:40:31.940 --> 00:40:35.130
So we really didn't do that much
extra work to get the animation,

00:40:35.130 --> 00:40:36.290
just a couple lines of CSS.

00:40:36.440 --> 00:40:38.320
There's still a little
bit of work left to do.

00:40:38.320 --> 00:40:39.860
I mean, we want to go back.

00:40:39.870 --> 00:40:43.030
And we have an item here on screen,
but we didn't hook up

00:40:43.030 --> 00:40:44.520
any behavior to it yet.

00:40:44.620 --> 00:40:49.620
So going back to the script,
we have the button in our HTML,

00:40:49.620 --> 00:40:51.620
and it's called info back button.

00:40:51.890 --> 00:40:53.740
We had an even listener for touch end.

00:40:53.740 --> 00:40:55.880
That means the touch was released on it.

00:40:55.920 --> 00:40:58.890
And we want to call
go back at this point.

00:40:59.140 --> 00:41:01.640
So Go Back is all set up for us.

00:41:01.700 --> 00:41:04.890
We just need to do a little bit
of magic here to do the inverse of

00:41:05.000 --> 00:41:06.890
what we just did in Item Selected.

00:41:07.010 --> 00:41:09.810
So Item Selected is here,
which is Update WebKit Transform and

00:41:09.980 --> 00:41:11.620
to a new Translate X.

00:41:11.970 --> 00:41:15.830
And so here, we're just going to
do the exact opposite.

00:41:16.070 --> 00:41:19.600
So now the ring container
is going to go back to zero.

00:41:19.600 --> 00:41:21.350
And the info pane is going
to go back to screen width,

00:41:21.350 --> 00:41:24.170
which means that its left will be
aligned to the right of the screen,

00:41:24.200 --> 00:41:26.380
and essentially we won't
be seeing it anymore.

00:41:26.510 --> 00:41:28.760
So that should be pretty simple.

00:41:28.850 --> 00:41:30.520
Do it again.

00:41:30.990 --> 00:41:36.490
Select an item,
and we can go in and out very easily.

00:41:37.920 --> 00:41:39.820
And so that concludes step three.

00:41:39.840 --> 00:41:42.450
We did a lot of work
in not that much code,

00:41:42.450 --> 00:41:42.730
actually.

00:41:42.740 --> 00:41:45.560
Just a little bit of script to
figure out the tech selection.

00:41:45.590 --> 00:41:48.300
Just updating transform and a
little CSS to say we want the

00:41:48.300 --> 00:41:50.580
animation happening on transform.

00:41:50.610 --> 00:41:52.930
Can we jump back to the slides, please?

00:41:55.290 --> 00:41:58.320
So to recap,
the core things we need to do is

00:41:58.320 --> 00:42:03.000
set up CSS transitions so that the
animations happen automatically

00:42:03.060 --> 00:42:04.450
as transform properties change.

00:42:04.600 --> 00:42:07.060
So you want to set a base state for this.

00:42:07.310 --> 00:42:09.360
A transition happens from
a value to a new value.

00:42:09.470 --> 00:42:15.380
So we had translate exit to zero on
the ring container when we started.

00:42:15.420 --> 00:42:20.180
And we also set the WebKit transition
property to WebKit transform.

00:42:20.180 --> 00:42:22.660
And the WebKit transition
duration is 0.5 seconds.

00:42:22.860 --> 00:42:24.890
If you got that,
any change of WebKit transform

00:42:24.940 --> 00:42:28.220
from that point on in the
element will just animate.

00:42:28.550 --> 00:42:30.520
And the second thing was a
beta transform from script.

00:42:30.700 --> 00:42:35.320
So it's really cool how we define
anything in CSS declaratively,

00:42:35.330 --> 00:42:38.470
but we still can do everything
based on JavaScript.

00:42:38.600 --> 00:42:43.140
So any old context-related
interaction based on things

00:42:43.140 --> 00:42:46.500
you need to evaluate in script,
you can do all that with no problem,

00:42:46.500 --> 00:42:48.400
because you can change the
style from the JavaScript.

00:42:48.480 --> 00:42:49.790
So in our case, that's what we do.

00:42:49.910 --> 00:42:54.240
We just change the translate to
slide things in and out screen.

00:42:54.280 --> 00:42:55.360
And that concludes step three.

00:42:55.360 --> 00:42:57.680
It was really pretty straightforward.

00:42:58.190 --> 00:43:02.340
Now we're going to want
to take it a step further.

00:43:02.410 --> 00:43:05.160
When we transition
things to the Info View,

00:43:05.160 --> 00:43:08.580
we kind of lost context of what
was activated in the first place.

00:43:08.580 --> 00:43:10.780
So we tap on an item at
the top of the screen,

00:43:11.030 --> 00:43:14.730
we go into the Info View, and we go back,
and we're not really sure

00:43:14.850 --> 00:43:17.810
where we hit anymore,
and we lose context.

00:43:17.920 --> 00:43:21.720
And it'd be really cool if we could just
rotate the selected item to the center

00:43:21.720 --> 00:43:24.360
before we transition into the Info View.

00:43:24.480 --> 00:43:27.330
And that is exactly
what we're going to do.

00:43:27.560 --> 00:43:30.570
We're going to tap on something,
and it's going to center

00:43:30.570 --> 00:43:33.040
the ring to center the item.

00:43:33.650 --> 00:43:36.540
And so the key thing here is
that we want to be able to do two

00:43:36.540 --> 00:43:38.280
transitions one after another.

00:43:38.370 --> 00:43:39.810
First transition, rotate center.

00:43:40.040 --> 00:43:42.180
Second transition,
do what we just did before,

00:43:42.320 --> 00:43:45.500
slide the info view in and
the ring container out.

00:43:45.800 --> 00:44:52.500
[Transcript missing]

00:44:52.710 --> 00:44:56.150
So what we did here to make sure
that you always have synchronized

00:44:56.160 --> 00:45:00.280
behaviors based on your transition
is that we added a new DOM event,

00:45:00.560 --> 00:45:03.220
which is called WebKit Transition End.

00:45:03.290 --> 00:45:04.970
And based on that event,
you can tell that a

00:45:05.010 --> 00:45:07.110
transition has finished,
and you're ready to go

00:45:07.170 --> 00:45:08.160
to do something else.

00:45:08.300 --> 00:45:12.080
So based on that,
we're going to listen to that event,

00:45:12.180 --> 00:45:13.610
and we're going to chain transition.

00:45:13.690 --> 00:45:15.540
We're going to start the first
rotation through the center,

00:45:15.540 --> 00:45:19.000
and once it's done,
slide the info view in.

00:45:19.810 --> 00:45:22.000
And so we're going to get
back into the code here,

00:45:22.040 --> 00:45:23.450
so I'd like to go back
to the demo machine,

00:45:23.450 --> 00:45:25.010
please.

00:45:27.920 --> 00:45:30.380
and hopefully we can do that
without too much trouble.

00:45:30.380 --> 00:45:34.120
All right, so, load up first step.

00:45:34.130 --> 00:45:35.380
As you notice, we're almost done here.

00:45:35.380 --> 00:45:37.100
I mean, just two steps to go.

00:45:37.280 --> 00:45:39.670
You almost have the hook.

00:45:40.790 --> 00:45:45.380
And we already have a little bit
of code already set up for us here.

00:45:45.380 --> 00:45:48.670
We have a new init function on the
ring controller because we're going

00:45:48.670 --> 00:45:50.240
to need to do a new thing here.

00:45:50.340 --> 00:45:57.650
And that thing is that we
need to set up transition and

00:45:57.650 --> 00:46:02.770
event on our ring container.

00:46:03.010 --> 00:46:05.370
So this function is going
to be called just once.

00:46:05.390 --> 00:46:07.990
The same time we register
touch event handlers at the

00:46:07.990 --> 00:46:10.450
very beginning of our code,
we now need to make sure that we

00:46:10.450 --> 00:46:12.480
listen to WebKit transition and events.

00:46:12.510 --> 00:46:13.700
We only need to do that once.

00:46:13.820 --> 00:46:19.470
We don't need to do that dynamically
each time we transition in and out.

00:46:20.730 --> 00:46:24.960
To do that, we just slide in a code,
and we just add a new

00:46:24.960 --> 00:46:27.830
event listener on our ring,
WebKitTransitionIn,

00:46:27.930 --> 00:46:31.370
and it's always going to go back
again to our ring controller,

00:46:31.440 --> 00:46:33.760
which is this object in this context.

00:46:33.830 --> 00:46:36.430
And this means that to be
able to take care of it,

00:46:36.430 --> 00:46:39.580
we're going to need a new
case in our switch statement.

00:46:39.580 --> 00:46:40.990
So that's pretty easy.

00:46:40.990 --> 00:46:45.100
It looks like any other switch statement,
case WebKitTransitionIn.

00:46:45.100 --> 00:46:47.620
And we're going to want to
call a new function called

00:46:47.950 --> 00:46:48.690
settingSelectionTransitionDone.

00:46:50.460 --> 00:46:52.320
So a few other changes
we made to this code.

00:46:52.320 --> 00:46:54.980
Because the selection behavior
is going to be a bit more

00:46:54.980 --> 00:46:58.020
complex than what we did before,
we're now going to call a new

00:46:58.020 --> 00:47:01.590
function called perform selection,
which is empty so far.

00:47:01.870 --> 00:47:04.340
And instead of having a
single callback on selection,

00:47:04.340 --> 00:47:06.980
which would automatically drag
the info view straight in,

00:47:07.140 --> 00:47:08.800
we actually want to do two things.

00:47:08.860 --> 00:47:13.100
We want to have a callback for when the
ring starts animating to the center,

00:47:13.100 --> 00:47:16.930
and another callback when it's done
with this and ready to actually end the

00:47:17.090 --> 00:47:19.220
transition and go into the info view.

00:47:19.350 --> 00:47:21.260
So we now have two functions.

00:47:21.260 --> 00:47:23.740
We have item being selected,
which is going to be called as

00:47:23.860 --> 00:47:27.160
soon as we get the touch-in event
and the ring starts to rotate.

00:47:27.210 --> 00:47:29.100
And we're going to have
item selected as well,

00:47:29.190 --> 00:47:31.630
which is called when the rotation
is done and we're good to go

00:47:31.640 --> 00:47:33.160
for the rest of the animation.

00:47:33.290 --> 00:47:36.460
So item selected looks
exactly like it looked before.

00:47:36.460 --> 00:47:39.720
We have -- that's where we change
the transform of the different

00:47:39.720 --> 00:47:41.360
containers to slide things in and out.

00:47:41.600 --> 00:47:43.710
We already know how to do that.

00:47:44.150 --> 00:47:46.360
But the code to populate
the info pane has been moved

00:47:46.460 --> 00:47:47.480
to the item being selected.

00:47:47.510 --> 00:47:49.030
We already know what's
going to be selected,

00:47:49.110 --> 00:47:53.370
so we want to update our content
straight away so there's no delay.

00:47:53.710 --> 00:47:54.440
All right, OK.

00:47:54.520 --> 00:47:57.890
So you also notice that we get an
extra parameter called is immediate,

00:47:58.000 --> 00:48:00.890
because if we hit an item that's
already in the center of the ring,

00:48:00.990 --> 00:48:02.370
we're not going to have any rotation.

00:48:02.380 --> 00:48:06.520
So we just want to go straight to item
selected and update the info pane.

00:48:06.520 --> 00:48:10.590
All right,
so far we haven't really done anything.

00:48:10.610 --> 00:48:13.860
We really need to get started
on perform selection here.

00:48:13.940 --> 00:48:17.630
So in perform selection,
we're just going to start

00:48:17.630 --> 00:48:18.960
another transition from script.

00:48:23.040 --> 00:48:25.910
Sorry, what have I done here?

00:48:29.010 --> 00:48:29.800
OK.

00:48:29.850 --> 00:48:31.980
So in performSelection,
we want to update the

00:48:31.980 --> 00:48:33.200
rotation of the whole ring.

00:48:33.250 --> 00:48:35.860
So we already know how to update
the rotation of the whole ring.

00:48:35.860 --> 00:48:38.300
We have setRotation built up for that.

00:48:38.630 --> 00:48:40.580
We used that when we did
dragging around the ring,

00:48:40.580 --> 00:48:42.960
which is called setRotation all the time.

00:48:43.000 --> 00:48:46.520
Because setRotation just changes
the WebKit transform of the ring.

00:48:46.520 --> 00:48:48.780
So what we have to do here is
we're going to figure out what

00:48:48.780 --> 00:48:51.660
the new rotation is going to be
for the object that we selected.

00:48:51.660 --> 00:48:54.080
So we look at the index
of the current item,

00:48:54.080 --> 00:48:57.610
multiply it by a fraction
of the full rotation,

00:48:57.670 --> 00:49:00.220
which is going to be based on
the number of ports that we got.

00:49:00.260 --> 00:49:02.220
So it's really going to
be-- we've got 12 ported,

00:49:02.220 --> 00:49:04.320
so it's going to be 30 degrees.

00:49:04.320 --> 00:49:09.280
And that tells us that's the rotation
that we need to center that item.

00:49:09.600 --> 00:50:27.000
[Transcript missing]

00:50:27.720 --> 00:50:30.820
And so what we're going
to do here is just say,

00:50:30.910 --> 00:50:32.320
rotation selection is done.

00:50:32.350 --> 00:50:34.640
We want to go to the next
step of the transition,

00:50:34.640 --> 00:50:36.280
which is sliding items in and out.

00:50:36.560 --> 00:50:38.490
And that's done by our
item selected callback,

00:50:38.490 --> 00:50:40.760
just like we used to in
the previous piece of code.

00:50:40.830 --> 00:50:43.270
Update ring container and info container.

00:50:43.410 --> 00:50:46.470
So it looks like we're done here.

00:50:47.360 --> 00:50:49.640
So now, when we select,
hopefully it's going to rotate

00:50:49.750 --> 00:50:53.460
to the center and slide to
the rest of the content.

00:50:53.470 --> 00:50:55.890
And that works perfectly.

00:50:55.900 --> 00:50:56.280
That's great.

00:50:56.490 --> 00:50:58.720
So now we can drag again.

00:50:58.720 --> 00:51:00.480
Oh dear.

00:51:00.500 --> 00:51:01.860
Things are going south here.

00:51:01.860 --> 00:51:04.050
I mean, the ring,
it looks like there's a delay

00:51:04.640 --> 00:51:05.860
as we drag along the ring,
huh?

00:51:05.860 --> 00:51:07.160
Isn't there?

00:51:07.220 --> 00:51:11.920
So the problem here is that we did set
the transition on the whole ring here.

00:51:11.930 --> 00:51:15.200
We did say WebCon transition
duration 0.5 second.

00:51:15.210 --> 00:51:17.640
But when we drag along,
we do pretty much the same thing.

00:51:17.640 --> 00:51:19.320
We update the rotation.

00:51:19.340 --> 00:51:22.580
That means from now on,
every time we drag along the ring,

00:51:22.600 --> 00:51:26.020
we're actually going to have rotations
going on on each change of the value.

00:51:26.040 --> 00:51:31.040
And because the transitions have a
nice little easing animation behavior,

00:51:31.040 --> 00:51:32.960
it's actually going to
look like there's a delay.

00:51:32.960 --> 00:51:35.000
Because it's really changing
a bunch of animations,

00:51:35.000 --> 00:51:35.790
like a lot of them.

00:51:35.920 --> 00:51:38.480
Every time we change
position of the finger,

00:51:38.480 --> 00:51:39.920
it's going to call the new transition.

00:51:39.930 --> 00:51:41.800
And that's not what we want to do.

00:51:41.800 --> 00:51:47.740
We want to kill transitions when we're
done with the rotation transition here.

00:51:47.830 --> 00:51:50.000
So it's actually going to be pretty easy.

00:51:50.000 --> 00:51:53.460
Because the way we turned on transition
by setting transition to 0.5 second,

00:51:53.580 --> 00:51:58.270
we're just going to do the opposite
and set it back to 0 second.

00:51:58.630 --> 00:52:01.890
So in selection transition done,
when the rotation is done,

00:52:01.890 --> 00:52:06.170
we want to reset the behavior and not
have transitions happening anymore.

00:52:06.620 --> 00:52:10.810
So we just set the WebKit transition
duration back to zero second.

00:52:10.810 --> 00:52:14.580
And hopefully now we can
have a nice transition,

00:52:14.590 --> 00:52:18.360
go into the info view, go back,
and get back to dragging our

00:52:18.590 --> 00:52:20.160
ring with no side effect.

00:52:20.240 --> 00:52:22.770
And that's all we need
to do for step four.

00:52:22.770 --> 00:52:25.850
We really unleashed the power
of CSS transitions here by not

00:52:25.850 --> 00:52:29.250
just having declarative behavior,
but also have nice little

00:52:29.250 --> 00:52:30.770
hookups into our script.

00:52:30.880 --> 00:52:33.130
So I'd like to go back to the slides,
please.

00:52:33.390 --> 00:52:36.390
And just quickly recap
what we just did here.

00:52:36.500 --> 00:52:37.580
Thank you.

00:52:38.470 --> 00:52:39.520
So we're changing transitions.

00:52:39.520 --> 00:52:42.670
And to do that, we just set up an even
listener to begin with,

00:52:42.870 --> 00:52:45.130
WebKit transition end,
transition is over.

00:52:45.200 --> 00:52:46.540
That's what we got here.

00:52:46.590 --> 00:52:50.330
And just call code based on that
callback to do whatever it needs

00:52:50.430 --> 00:52:51.760
to do when transition is over.

00:52:52.020 --> 00:52:54.780
It'd be really convenient, for example,
if you want to fade something

00:52:54.780 --> 00:52:58.220
out on your page and remove it
completely from the page to set

00:52:58.220 --> 00:53:00.800
display none or remove it from the
tree when the transition is over.

00:53:00.990 --> 00:53:05.590
Stuff like that really gives you control
to exactly what you want to do here.

00:53:06.710 --> 00:53:09.360
And toggling transitions, well,
there are different ways you can do it.

00:53:09.380 --> 00:53:12.980
You can set transition duration
like we did to a positive value

00:53:13.260 --> 00:53:15.760
and set it back to zero to stop
transitions from happening.

00:53:15.780 --> 00:53:22.880
You can also change WebKit transition
property to be a name of a

00:53:22.880 --> 00:53:25.000
property like we had before,
WebKit transform,

00:53:25.000 --> 00:53:25.000
or just be none where you don't
really need anything else going on.

00:53:25.710 --> 00:53:29.780
And that really wraps up
what we needed for step four.

00:53:29.810 --> 00:53:34.620
And so the last step is going
to be hooking up movie playback.

00:53:34.760 --> 00:53:36.580
And it's actually going
to be the easiest step.

00:53:36.620 --> 00:53:38.700
Even though it looks like
it's doing a lot of stuff,

00:53:38.700 --> 00:53:43.930
the new JavaScript APIs we added in
Safari on iPhone makes this really easy

00:53:44.080 --> 00:53:48.400
for you to build your custom UI and
hook up into the media layer on iPhone.

00:53:48.460 --> 00:53:52.320
And so all we got to do here is
when we detect a touch end on the

00:53:52.320 --> 00:53:56.860
Play button that's overlaid on the image,
just tell our movie to play.

00:53:56.960 --> 00:53:58.770
And a movie is just going
to be an embed element.

00:53:58.900 --> 00:54:04.320
That's what we always do on the web
to play movies so far on iPhone.

00:54:04.380 --> 00:54:06.690
And we're going to use the
JavaScript Media APIs to just say,

00:54:06.690 --> 00:54:08.680
well, here's the URL for this movie.

00:54:08.680 --> 00:54:11.700
We'll load that from the data source,
and please play it now.

00:54:11.700 --> 00:54:14.360
And so that's what we're going to
do now by getting into the code.

00:54:14.360 --> 00:54:16.580
So I'd like to switch
back to the demo machine,

00:54:16.580 --> 00:54:17.190
please.

00:54:20.080 --> 00:54:25.690
close our previous projects
and go back to the last step.

00:54:29.920 --> 00:54:33.780
So we do have a little
bit more code set up here,

00:54:33.810 --> 00:54:36.190
namely in the HTML.

00:54:36.310 --> 00:54:39.230
We have our play button,
which is just the image,

00:54:39.280 --> 00:54:41.900
a nice little icon,
custom icon that we made that's going

00:54:41.940 --> 00:54:43.180
to be overlaid on top of the image.

00:54:43.330 --> 00:54:45.800
So the cool thing here is that even
though it's a static button here,

00:54:45.800 --> 00:54:48.260
if you really want to get fancy,
you could have like a big

00:54:48.260 --> 00:54:51.190
throbbing animation on your
button using CSS animation so

00:54:51.190 --> 00:54:52.660
that it's really look alive.

00:54:52.660 --> 00:54:55.820
And that's the kind of thing you
couldn't do with built-in controls

00:54:56.320 --> 00:54:59.500
of movie playback in iPhone in
previous versions of Safari on iPhone.

00:54:59.500 --> 00:55:02.590
But we're adding new features
here so we can have our own

00:55:02.590 --> 00:55:04.340
icon to do movie playback.

00:55:04.990 --> 00:55:07.910
And we need to have an embed
element to actually-- that will

00:55:07.940 --> 00:55:09.940
hook up the media layer right here.

00:55:09.960 --> 00:55:14.340
And so our embed just-- we just
give the mind type of the video

00:55:14.340 --> 00:55:17.580
and give it a little handle movie
so that we can get to it and call

00:55:17.690 --> 00:55:20.230
JavaScript APIs on that element later on.

00:55:20.970 --> 00:55:25.210
So we're actually looks like we already
have a bunch of stuff ready for us to go.

00:55:25.320 --> 00:55:27.900
So let's look at what it does now.

00:55:27.910 --> 00:55:29.780
The ring looks the same.

00:55:29.780 --> 00:55:33.050
If we go into the ring,
we'll have a nice little play button.

00:55:33.290 --> 00:55:36.450
But we do have a little problem
here is that we see an icon here,

00:55:36.450 --> 00:55:39.580
and that is because embed on
Safari on iPhone has a bunch of

00:55:39.580 --> 00:55:41.440
default behaviors already hooked up.

00:55:41.560 --> 00:55:43.850
So that when you just say,
here's the movie I want

00:55:43.930 --> 00:55:45.860
to embed in my web page,
you don't need to do extra

00:55:45.860 --> 00:55:48.250
work to provide UI controls or
anything if you don't want to.

00:55:48.310 --> 00:55:50.290
If you just want to use
a built-in behavior,

00:55:50.290 --> 00:55:51.040
that's fine.

00:55:51.040 --> 00:55:54.460
But what happens here is that instead
of showing the poster frame for it

00:55:54.460 --> 00:55:59.940
or the play button for it that the
embed element would show by default,

00:56:00.000 --> 00:56:02.140
because there's no
SRC set up on our embed,

00:56:02.140 --> 00:56:05.900
it actually shows an icon saying,
I can play that movie.

00:56:05.940 --> 00:56:08.200
And we don't want to set
up an SRC attribute yet,

00:56:08.200 --> 00:56:10.060
because that's going to
be done dynamically as we

00:56:10.060 --> 00:56:11.730
select elements in the page.

00:56:11.870 --> 00:56:15.950
So the first thing we're going to want
to do is make sure this doesn't show up.

00:56:16.270 --> 00:56:18.120
We can do that really easily.

00:56:18.160 --> 00:56:19.760
It's a bit of a trick.

00:56:19.760 --> 00:56:21.600
Actually, in the CSS, sorry.

00:56:21.650 --> 00:56:23.890
It's a bit of a trick,
but I feel pretty comfortable at

00:56:23.890 --> 00:56:26.600
this time doing these kind of things,
because what we've done

00:56:26.680 --> 00:56:28.120
so far was all so clean.

00:56:28.280 --> 00:56:31.670
So select on the movie,
and all we're going to do is push

00:56:31.830 --> 00:56:33.090
it to the left of the screen.

00:56:33.220 --> 00:56:34.700
That means it's always
going to be on the page,

00:56:34.700 --> 00:56:36.070
but it's just never going to be visible.

00:56:36.300 --> 00:56:38.860
320 pixels out of the screen,
it's just going to be out there,

00:56:38.910 --> 00:56:40.390
and we don't have to worry about it.

00:56:40.550 --> 00:56:43.520
So let's read our project.

00:56:43.670 --> 00:56:46.100
And we don't have anything
getting in our way.

00:56:46.230 --> 00:56:48.070
So that's really cool.

00:56:48.530 --> 00:56:51.640
So we did a little bit more
work already in the script.

00:56:51.640 --> 00:56:54.990
Just like we hooked up touch events on
the back button in the previous step,

00:56:54.990 --> 00:56:56.630
we do the exact same
thing on the play button.

00:56:56.650 --> 00:56:59.310
Get a handle to it with
document.galvinbyid,

00:56:59.460 --> 00:57:02.860
add event listener and touch end,
and call the play movie function.

00:57:04.120 --> 00:57:09.000
So we already have Play Movie set
up for us right here.

00:57:09.030 --> 00:57:12.300
And what we need to do here is really
just set the source of the elements

00:57:12.840 --> 00:57:16.740
to be the new URL for the movie that
we selected and call play because

00:57:16.740 --> 00:57:20.440
we're ready to go and we need to
just get into movie playback mode.

00:57:20.470 --> 00:57:22.760
And so to do that,
I'm just going to drag a

00:57:22.760 --> 00:57:24.440
little piece of code here.

00:57:24.470 --> 00:57:25.990
And it's really three easy steps.

00:57:26.210 --> 00:57:27.860
First step, get a pointer to the movie.

00:57:28.040 --> 00:57:30.880
That's our embed element in our HTML.

00:57:30.890 --> 00:57:33.290
And this is where all the
new JavaScript media APIs are

00:57:33.330 --> 00:57:34.320
going to be exposed on.

00:57:34.620 --> 00:57:38.520
So on this element, we'll be able to call
new API straight away.

00:57:38.590 --> 00:57:42.930
So we get back into our data
source with the current index,

00:57:42.930 --> 00:57:46.180
get the movie URL,
and set that URL using set URL.

00:57:46.320 --> 00:57:49.520
That's a new function
in Safari on iPhone 2.0.

00:57:49.530 --> 00:57:54.660
We can now dynamically change the
URL of movies right using JavaScript.

00:57:54.690 --> 00:57:57.040
And now the URL is set,
all we want to do is

00:57:57.040 --> 00:57:58.700
actually play the movie.

00:57:58.800 --> 00:58:00.550
So hopefully we're done here.

00:58:02.770 --> 00:58:03.940
At this point, we get really nervous.

00:58:04.010 --> 00:58:06.800
I mean, what if everything goes wrong,
and as the last step,

00:58:06.800 --> 00:58:07.720
I'll look really bad?

00:58:07.860 --> 00:58:11.080
So hopefully,
we're going to click on there.

00:58:11.440 --> 00:58:17.870
And you'll notice that we actually have
a little touch state here for our button.

00:58:17.950 --> 00:58:23.030
So this was actually done simply
in CSS by having on our info

00:58:23.110 --> 00:58:24.920
play button an active state.

00:58:24.950 --> 00:58:27.130
And every time you're going
to touch on an element,

00:58:27.130 --> 00:58:30.110
if you implement the active pseudo class,
you'll be able to change

00:58:30.110 --> 00:58:31.560
properties of the element.

00:58:31.560 --> 00:58:33.020
So in that case,
we changed the background image

00:58:33.170 --> 00:58:34.260
to have the little button ring.

00:58:34.260 --> 00:58:36.280
So that's actually pretty cool.

00:58:36.280 --> 00:58:38.680
So let's try and click it again.

00:58:38.680 --> 00:58:40.120
We have our nice touch state.

00:58:40.320 --> 00:58:42.870
And if we release it,
we get into movie view,

00:58:42.870 --> 00:58:44.980
and we just play a movie
straight out from the internet.

00:58:47.350 --> 00:58:49.390
And that's all we needed to do.

00:58:49.420 --> 00:58:52.990
We can actually play it,
which would be even better.

00:58:53.620 --> 00:58:56.360
And once we're done,
we can just reuse the current

00:58:56.360 --> 00:59:00.060
UI that's already exposed for us and
just get back in our presentation.

00:59:00.100 --> 00:59:00.970
And we're done.

00:59:01.220 --> 00:59:03.800
The code is finished now,
and we have all the features

00:59:03.800 --> 00:59:05.240
we wanted to implement.

00:59:05.330 --> 00:59:07.200
So can we go back to the slides, please,
so we can wrap it up?

00:59:07.410 --> 00:59:08.380
Thanks.

00:59:08.450 --> 00:59:10.200
Thank you.

00:59:12.940 --> 00:59:17.300
So just to recap what we did here,
get a pointer to the movie elements,

00:59:17.350 --> 00:59:19.980
which is an embed,
and just call setURL and play.

00:59:20.170 --> 00:59:20.960
That's all you got to do.

00:59:20.960 --> 00:59:23.070
There's a lot more stuff
you can do with this.

00:59:23.070 --> 00:59:25.700
You can get events when you get
in and out of full screen view.

00:59:25.700 --> 00:59:28.940
You can detect when a movie is done
playing so that you can play another one.

00:59:28.940 --> 00:59:30.350
You can do playlists like that.

00:59:30.350 --> 00:59:32.170
I mean,
there's a lot of stuff you can do.

00:59:32.170 --> 00:59:35.560
I mean, you have to go and dig into that
because it's just fantastic.

00:59:36.600 --> 00:59:40.370
And so to wrap things up,
what we did here is that we put

00:59:40.470 --> 00:59:43.240
together all this cool stuff we got
for you in Safari on iPhone 2.0.

00:59:43.400 --> 00:59:46.020
We used CSS Transform to
leave the ring out in 3D.

00:59:46.020 --> 00:59:48.610
Obviously,
this is a first in any kind of web

00:59:48.610 --> 00:59:51.250
content strictly based on web standards.

00:59:51.270 --> 00:59:54.290
And that's coming first
on Safari on iPhone 2.0.

00:59:54.340 --> 00:59:55.860
And we used Touch Event as well.

00:59:55.860 --> 00:59:59.410
Obviously, an innovation, again,
of iPhone because we're the only device

00:59:59.410 --> 01:00:02.710
which has this great multi-touch display,
and that's what gives you the

01:00:02.710 --> 01:00:06.200
opportunity to create those really
advanced interactions in a web app.

01:00:08.270 --> 01:00:10.940
And the third stage,
we're adding CSS transitions to

01:00:10.940 --> 01:00:15.280
automatically have a state-based,
hardware-accelerated animation

01:00:15.300 --> 01:00:18.640
going from one state to the
other to slide things in and out.

01:00:18.670 --> 01:00:20.990
And the fourth step,
we took that thing further and

01:00:20.990 --> 01:00:23.570
add the advanced support for
CSS transitions to actually change

01:00:23.570 --> 01:00:25.420
transitions based on events.

01:00:25.590 --> 01:00:27.250
And that was really just fantastic.

01:00:27.290 --> 01:00:31.060
And finally, we just played movies using
JavaScript media APIs.

01:00:31.340 --> 01:00:35.390
And once again, all of this stuff is new
in Safari on iPhone 2.0.

01:00:35.900 --> 01:00:38.480
So looking forward,
we have actually a bit more features

01:00:38.480 --> 01:00:41.740
implemented in the main demo that
we saw at the very beginning.

01:00:41.820 --> 01:00:43.740
And all that code is actually
going to be available to you.

01:00:43.740 --> 01:00:44.820
I'll give you the URL in a minute.

01:00:44.970 --> 01:00:47.800
So you'll be able to actually get
the code we've just done here and

01:00:47.800 --> 01:00:50.370
actually add all these great features
if you're really feeling adventurous

01:00:50.460 --> 01:00:52.640
and feel you have a knack for it all.

01:00:52.750 --> 01:00:53.720
So we had a selection highlight.

01:00:53.720 --> 01:00:56.180
When you tap on something,
it had a little blue background.

01:00:56.240 --> 01:00:56.960
That's really pretty easy.

01:00:56.960 --> 01:00:59.430
You just change the background
color of the items in the ring.

01:00:59.640 --> 01:01:01.970
There's really nothing fancy here.

01:01:02.300 --> 01:01:04.490
Landscape mode, again, is pretty easy.

01:01:04.500 --> 01:01:09.740
You just listen to orientation
change events in your script.

01:01:09.770 --> 01:01:12.560
You can just change the CSS properties
for the ring to change from a

01:01:12.760 --> 01:01:14.360
vertical ring to a horizontal ring.

01:01:14.430 --> 01:01:15.640
Just relay out your items.

01:01:15.670 --> 01:01:19.730
And we actually did this all in CSS by
just applying different selectors.

01:01:20.370 --> 01:01:21.490
We also had really great flicking.

01:01:21.570 --> 01:01:23.740
So that was actually a bit too
much for this session because we

01:01:23.740 --> 01:01:25.160
didn't have time to put it all in.

01:01:25.160 --> 01:01:27.750
But using CSS animations,
which are different from transition

01:01:27.780 --> 01:01:31.320
because you have key frames and you can
really specify what the animation does,

01:01:31.320 --> 01:01:34.570
you can just flick, lift your finger,
and just let the ring animate

01:01:34.640 --> 01:01:38.980
based on the interaction
data that you just recorded.

01:01:39.510 --> 01:01:42.790
And we also had great things with
selecting a rating with touch events.

01:01:42.870 --> 01:01:44.710
So it's pretty obvious,
and it's really the same kind

01:01:44.710 --> 01:01:47.410
of interaction that we did
in the ring where you want to

01:01:47.410 --> 01:01:49.400
track touch moves and et cetera.

01:01:49.510 --> 01:01:53.600
And we also have really advanced hit
testing in our demo because we had really

01:01:53.600 --> 01:01:57.620
drop shadows on top of the ring at the
bottom and the top so that we can really

01:01:57.620 --> 01:01:59.390
have more depth to our presentation.

01:01:59.440 --> 01:02:01.250
And because we have
stuff on top of the ring,

01:02:01.250 --> 01:02:03.060
we don't get even straight into the ring.

01:02:03.120 --> 01:02:04.380
We get it on other elements.

01:02:04.410 --> 01:02:07.580
So to figure out what we hit,
we actually have our own custom hit

01:02:07.580 --> 01:02:11.910
testing based on the 2D point APIs that
we get from the touch events and map them

01:02:11.910 --> 01:02:16.400
out to the 3D content in the ring because
we have special point conversion APIs.

01:02:16.400 --> 01:02:19.840
And so the code for this is all
available for you right now for free

01:02:20.030 --> 01:02:24.400
on the developer.apple.com website,
the attendee site for WWDC.

01:02:24.400 --> 01:02:27.390
So I'll let you take a minute
to actually write this down.

01:02:27.420 --> 01:02:30.380
And if you navigate to the session 391,
which is our session,

01:02:30.380 --> 01:02:33.400
you'll get the code link straight from
here as well as a lot of documents.

01:02:33.400 --> 01:02:34.380
So if you want to get the code,
you can get it from here.

01:02:34.480 --> 01:02:37.150
And we have documentation for all
the technology that's relevant

01:02:37.150 --> 01:02:38.400
to our presentation here.

01:02:38.400 --> 01:02:42.400
So developer.apple.com/wwdc/attendee.

01:02:44.060 --> 01:02:46.540
And so I really hope
you can take this home,

01:02:46.570 --> 01:02:48.890
look at it,
review all the code we've done.

01:02:49.050 --> 01:02:52.910
You can download the podcast
later on and just get a good

01:02:53.020 --> 01:02:54.500
feel of how everything was done.

01:02:54.610 --> 01:02:56.150
For more information,
we have great evangelists.

01:02:56.320 --> 01:02:59.080
We have Vicky, who really helped us come
up with this session.

01:02:59.160 --> 01:03:00.500
Mark Malone as well.

01:03:00.670 --> 01:03:05.180
Contact these people if you need any
help with this or want to find out more.

01:03:05.490 --> 01:03:06.560
And we have a coming session.

01:03:06.560 --> 01:03:09.300
We have debugging websites using
Safari's integrated developer tools,

01:03:09.300 --> 01:03:11.350
where you can find out how you
can do these kind of things and go

01:03:11.460 --> 01:03:15.260
into bugs and actually solve them,
because it's not always that easy.

01:03:15.300 --> 01:03:18.030
And also, it's a great session about
improving responsiveness of

01:03:18.030 --> 01:03:23.440
websites and web applications,
where we'll be focusing on performance.

01:03:23.560 --> 01:03:26.090
And there were other sessions
this week that already passed,

01:03:26.090 --> 01:03:28.820
but you really want to check
those out when the podcasts come

01:03:28.950 --> 01:03:30.500
out on iTunes and download them.

01:03:30.500 --> 01:03:33.970
And if you missed any of this,
you can go back to the fundamentals

01:03:34.040 --> 01:03:35.880
of what we talked about today.

01:03:35.940 --> 01:03:39.210
And there's a great live this afternoon
directly related to this session,

01:03:39.270 --> 01:03:42.700
so I hope you can come and
stump us with great questions.

01:03:43.030 --> 01:03:46.860
All the team will be here-- Simon, Chris,
Dean, myself, Barry, and our manager,

01:03:46.860 --> 01:03:47.140
Gilles.

01:03:47.310 --> 01:03:51.130
So come around and just ask us
anything you want to know to make

01:03:51.140 --> 01:03:52.310
this happen in your own application.

01:03:53.590 --> 01:03:56.580
And we're a bit short of time,
but I think we can

01:03:56.580 --> 01:03:59.500
open the floor for Q&A.

01:03:59.500 --> 01:04:00.000
Thanks.

01:04:00.000 --> 01:04:11.380
Just didn't have time to go.

01:04:11.380 --> 01:04:12.760
Gilles, do you still want to do it?

01:04:12.830 --> 01:04:14.370
What if you were here?

01:04:25.200 --> 01:04:27.530
So actually we have a last demo.

01:04:27.600 --> 01:04:29.110
Because we had some
technical difficulties at

01:04:29.150 --> 01:04:31.600
the beginning of the week,
there's a demo that we couldn't do at

01:04:31.600 --> 01:04:34.870
a Grifix in Media State of the Union,
which is actually pretty amazing.

01:04:34.870 --> 01:04:37.040
I mean,
it's just a lot of work put into it,

01:04:37.040 --> 01:04:38.300
and it's fantastic.

01:04:38.300 --> 01:04:42.340
So if you can go back to the phone here,
please.

01:04:42.340 --> 01:04:45.800
And Chris will show it to you right now.

01:04:49.860 --> 01:04:50.800
There we go.

01:04:50.800 --> 01:04:52.290
Okay, so we love 3D.

01:04:52.290 --> 01:04:56.840
3D is such a fun thing to
put into Safari on iPhone.

01:04:56.840 --> 01:05:00.180
And so we wanted to see
how far we could push it.

01:05:00.250 --> 01:05:02.180
You know, rings, that's fine.

01:05:02.180 --> 01:05:03.640
Practical UIs, that's great.

01:05:03.640 --> 01:05:05.760
But we wanted to see how
far we could take it,

01:05:05.760 --> 01:05:07.870
so we went and did a little demo here.

01:05:07.870 --> 01:05:09.700
This is a map of the world.

01:05:09.700 --> 01:05:12.560
You might notice that it's,
you can kind of see them.

01:05:12.620 --> 01:05:14.340
It's actually made up of
a bunch of little tiles.

01:05:14.340 --> 01:05:16.560
These are just background images.

01:05:16.560 --> 01:05:22.160
And they just make a nice
flat map of the earth.

01:05:22.270 --> 01:05:27.680
But of course, if we work at it,
since we have CSS, transitions,

01:05:28.480 --> 01:05:34.480
transforms, we can reshape those tiles
into a very nice looking globe.

01:05:34.480 --> 01:05:39.270
And in fact, we can style --

01:05:41.600 --> 01:05:44.450
We can add some nice shadowing
so it looks a lot better.

01:05:44.550 --> 01:05:48.010
And then we can add,
these are just little pop-ups

01:05:48.030 --> 01:05:51.800
that have some straight HTML,
CSS formatted information.

01:05:51.800 --> 01:05:53.600
And it's just, you know,
where people went,

01:05:53.640 --> 01:05:55.910
where people have been,
what they've been doing.

01:05:55.910 --> 01:06:00.980
We can have that or we can also
touch down and we can have direct

01:06:01.430 --> 01:06:04.100
interaction with this globe.

01:06:04.100 --> 01:06:07.280
We can flick the globe
and have it spin around.

01:06:07.280 --> 01:06:11.110
We can look all over the place, you know,
see where different people were.

01:06:11.500 --> 01:06:15.370
And then we can let go and we can
let it go back into its automatic

01:06:15.370 --> 01:06:17.740
mode and see where other people were.

01:06:17.770 --> 01:06:22.500
We can also go to one particular
little information pop-up here.

01:06:22.530 --> 01:06:25.720
And what it is, is this is Peter.

01:06:25.720 --> 01:06:26.970
He actually was in New York.

01:06:27.090 --> 01:06:33.140
He actually was in New York and he sent
us a little video that we can show.

01:06:33.400 --> 01:06:35.500
You might have seen this already,
so I won't go through the whole thing,

01:06:35.500 --> 01:06:38.280
but it's a very fun little short video.

01:06:38.280 --> 01:06:41.320
And also, we can look at some pictures.

01:06:41.320 --> 01:06:44.040
This is another thing
that we put together.

01:06:44.040 --> 01:06:48.700
You've probably seen this in other
sessions this week because it's very

01:06:48.700 --> 01:06:51.280
cool and a lot of people really enjoy it.

01:06:51.860 --> 01:06:56.640
Basically, what it is is it looks like
just a regular picture,

01:06:56.640 --> 01:06:59.520
but what it actually is is a panorama.

01:06:59.980 --> 01:07:03.690
It's actually six images
put together in a box,

01:07:03.690 --> 01:07:10.040
in a cube, just using CSS transforms and
transitions to do the spinning.

01:07:10.040 --> 01:07:12.820
And it allows you to
look in all directions.

01:07:12.820 --> 01:07:17.400
You can actually go and grab a lot of
different panoramas that are cube-mapped,

01:07:17.550 --> 01:07:21.990
six different images,
and apply these and use any one you want.

01:07:22.060 --> 01:07:24.990
And so this is something that we
put together just to kind of show

01:07:25.080 --> 01:07:28.650
how far we could go with the 3D,
and that's what I wanted to show you.