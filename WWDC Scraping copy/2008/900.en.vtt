WEBVTT

00:00:20.250 --> 00:00:23.440
Good afternoon and welcome to the
developer tools State of the Union.

00:00:23.440 --> 00:00:30.850
Since Apple started shipping Mac OS X,
we have been building up a fantastic

00:00:30.870 --> 00:00:34.490
set of tools for you guys to
develop innovative Mac applications.

00:00:34.500 --> 00:00:38.260
And as all of you know,
with our upcoming Xcode 3.1 release,

00:00:38.370 --> 00:00:41.200
we're going to extend that
same set of mature tools,

00:00:41.200 --> 00:00:44.670
so that you can not only develop
applications for the Mac,

00:00:44.670 --> 00:00:46.260
but also for the iPhone.

00:00:46.890 --> 00:00:50.000
And boy, are we engineers here at
Apple excited about the iPhone SDK.

00:00:50.020 --> 00:00:53.820
To be here from the beginning for the
creation of a new development platform,

00:00:53.820 --> 00:00:57.740
to see the first applications from you
guys springing to life on these devices,

00:00:57.780 --> 00:01:01.370
is really an opportunity of a lifetime,
and we've been working very hard on it.

00:01:03.260 --> 00:01:04.930
In this session,
we're going to go over the

00:01:04.930 --> 00:01:08.450
entire development process for
both the Mac and the iPhone.

00:01:08.760 --> 00:01:12.490
And what you will see is that our tools
cover the entire development process,

00:01:12.610 --> 00:01:15.660
from the creation of your projects,
to writing your code,

00:01:15.660 --> 00:01:19.000
to optimizing them and getting
them ready for deployment.

00:01:19.940 --> 00:01:22.410
Let me start out by giving you
a quick overview of the major

00:01:22.410 --> 00:01:25.040
components of our tool suite.

00:01:25.440 --> 00:01:28.800
At the center of your development
process is our primary IDE,

00:01:28.800 --> 00:01:29.640
Xcode.

00:01:29.670 --> 00:01:33.300
Xcode really is the hub of your
entire development experience.

00:01:33.340 --> 00:01:35.730
It does everything you
need from a great IDE.

00:01:35.930 --> 00:01:41.070
It is fast, it is scalable,
it is customizable, and it's easy to use.

00:01:41.900 --> 00:01:44.590
Now for designing the user
interfaces of your applications,

00:01:44.590 --> 00:01:47.100
you will use Interface Builder,
which is one of the tools

00:01:47.220 --> 00:01:50.860
that really distinguishes our
development platform from others.

00:01:50.960 --> 00:01:53.840
In Interface Builder,
you can quickly pull together UIs by

00:01:53.850 --> 00:01:57.680
just dragging objects out of the library,
arranging them just the way you want,

00:01:57.720 --> 00:02:01.200
and hooking them up to the
application logic you wrote in Xcode.

00:02:01.320 --> 00:02:04.800
You can even test your interfaces right
from within Interface Builder without

00:02:04.800 --> 00:02:08.030
building your projects in between,
which gives you truly

00:02:08.030 --> 00:02:10.270
fantastic turnaround times.

00:02:13.440 --> 00:02:17.210
Instruments is a fantastic performance
tool that is also unique in the industry.

00:02:17.440 --> 00:02:22.290
It uses a gorgeous, very clear way of
visualizing performance data.

00:02:22.860 --> 00:02:24.650
With Instruments,
you can look in great detail

00:02:24.830 --> 00:02:27.290
into different aspects and the
different behaviors of your

00:02:27.290 --> 00:02:34.200
applications at the same time,
which really allows you to

00:02:34.200 --> 00:02:36.490
understand how different parts of
your application work together,

00:02:36.490 --> 00:02:36.490
how they interact with each other,
and with the system.

00:02:38.490 --> 00:02:41.390
Now, Xcode, Interface Builder,
and Instruments are used to

00:02:41.390 --> 00:02:45.010
develop native applications for
both the Mac and the iPhone.

00:02:45.110 --> 00:02:47.200
But we're also shipping a
tool that is dedicated to

00:02:47.210 --> 00:02:49.360
the creation of Web 2.0 apps.

00:02:49.540 --> 00:02:51.640
And it's called Dashcode.

00:02:52.070 --> 00:02:54.420
In Xcode,
you create widgets for Mac OS X,

00:02:54.610 --> 00:02:57.500
and going forward,
also full-featured iPhone web

00:02:57.500 --> 00:03:01.450
applications that run directly in the
Safari web browser on your iPhones.

00:03:01.460 --> 00:03:04.240
So Xcode is a full-featured web IDE.

00:03:04.240 --> 00:03:05.630
It's very easy to use.

00:03:05.720 --> 00:03:10.100
And it covers the entire process for
creating widgets and web applications,

00:03:10.120 --> 00:03:11.920
including the deployment.

00:03:13.550 --> 00:03:16.330
And these four applications
I just described to you are just

00:03:16.330 --> 00:03:20.380
four of the many applications
that form our entire tool suite.

00:03:20.680 --> 00:03:25.120
We ship tools to you that cover graphics,
automation, package building,

00:03:25.300 --> 00:03:28.790
more performance tools,
and dedicated file comparison tools.

00:03:28.910 --> 00:03:33.750
And this entire suite of applications
is included with every Mac.

00:03:33.850 --> 00:03:38.290
The Apple developer tools are
free to every user of Mac OS X.

00:03:38.700 --> 00:03:41.050
Now let's not just talk about them,
let's actually see them

00:03:41.050 --> 00:03:41.850
live and in action.

00:03:41.910 --> 00:03:45.100
And for our first demo of today,
I'd like to ask Todd Fernandez to

00:03:45.230 --> 00:03:50.110
come up on stage and give you a demo
for how to build a Mac application.

00:03:54.400 --> 00:03:56.400
Thank you, Andreas, and good afternoon,
developers.

00:03:56.550 --> 00:03:58.820
I'm very pleased to be
here to show you how Xcode,

00:03:58.820 --> 00:04:02.290
Interface Builder,
and Instruments can work together to help

00:04:02.370 --> 00:04:06.000
you build great-looking Mac applications
with excellent performance,

00:04:06.280 --> 00:04:10.480
while keeping your focus on your
application and not the tools.

00:04:10.560 --> 00:04:13.900
To show you how, I'm going to build a
simple game called Baffle.

00:04:13.960 --> 00:04:16.200
We'll see if some of
you may recognize it.

00:04:16.360 --> 00:04:20.020
To get started,
I'm going to create a new Xcode project.

00:04:25.720 --> 00:04:30.100
So I'll use Xcode's new
project chooser to get started.

00:04:30.140 --> 00:04:33.700
And since the easiest way to create a
great Mac application is to use Cocoa,

00:04:33.700 --> 00:04:36.920
I'm going to use the
Cocoa application template.

00:04:44.580 --> 00:04:47.860
So I've created my
project on the desktop.

00:04:47.940 --> 00:04:49.940
And let me give you a little
tour of the Xcode window.

00:04:49.940 --> 00:04:52.500
I have my source editor
here on the right.

00:04:52.580 --> 00:04:55.110
And on the left side,
the Groups and Files view shows

00:04:55.110 --> 00:04:59.380
me the organization of my project,
my source code, my resources,

00:04:59.380 --> 00:05:04.110
including my user interface file and
any artwork or sound I might need.

00:05:05.030 --> 00:05:07.100
and the target,
which are the instructions that

00:05:07.190 --> 00:05:12.230
Xcode uses to turn my source code and
resources into my built application.

00:05:14.200 --> 00:05:17.010
So I'm going to cheat a little
bit and drag in some code

00:05:17.020 --> 00:05:23.240
that I've already prepared,
and some resources, and some more code.

00:05:23.320 --> 00:05:29.330
I have nothing up my sleeves, really.

00:05:32.690 --> 00:05:36.440
So now I have the skeleton of my
application laid out in Xcode.

00:05:36.480 --> 00:05:40.150
I want to edit my user interface
file in Interface Builder.

00:05:44.780 --> 00:05:46.990
So here in Interface Builder,
I have the file view,

00:05:46.990 --> 00:05:51.360
which contains all the objects that
I currently have in my user interface.

00:05:51.400 --> 00:05:53.220
I have my main window,
which I'm going to make

00:05:53.230 --> 00:05:54.810
a little bit bigger.

00:05:57.600 --> 00:06:02.730
And I can use the inspector to rename
my window to match the name of my game.

00:06:02.810 --> 00:06:05.490
I seem to be having
troubles with A's today.

00:06:06.520 --> 00:06:09.780
and Interface Builder's library,
which contains dozens of objects,

00:06:09.850 --> 00:06:13.080
different user interface elements
that make it really easy for me to

00:06:13.080 --> 00:06:15.230
make a great-looking Mac application.

00:06:15.580 --> 00:06:17.860
But more importantly,
Xcode and Interface Builder

00:06:17.860 --> 00:06:21.310
work very closely together,
and Interface Builder now knows all

00:06:21.350 --> 00:06:25.530
about those classes and resources
that I've already added to my project.

00:06:25.640 --> 00:06:28.900
So if I switch to the
Media tab of the library,

00:06:28.960 --> 00:06:34.570
I can easily access those resources,
including the background of my game.

00:06:34.960 --> 00:06:38.080
So I'll go ahead and line
that up in my window,

00:06:38.080 --> 00:06:40.620
and resize the window to match.

00:06:42.370 --> 00:06:44.250
All right, well,
the next thing I need to do is lay

00:06:44.250 --> 00:06:47.170
out the actual views of my game.

00:06:47.260 --> 00:06:50.040
So I'm going to add two custom views.

00:06:51.390 --> 00:06:53.830
One for my game board,
and if you look closely,

00:06:53.830 --> 00:06:58.170
you'll see the blue guidelines
that Interface Builder provides

00:06:58.270 --> 00:07:02.170
to help me conform to Apple's
human interface guidelines.

00:07:02.810 --> 00:07:03.730
That looks about right.

00:07:03.960 --> 00:07:07.100
And drag out a second one
for my scratchpad view.

00:07:07.290 --> 00:07:09.760
Again,
using the guides to line things up and

00:07:09.760 --> 00:07:13.570
maintain the right margins and spacing.

00:07:14.020 --> 00:07:17.120
So those are the views I need,
but I also need a controller object

00:07:17.190 --> 00:07:19.260
to keep everything tied together.

00:07:19.440 --> 00:07:21.380
So I'm going to drag in.

00:07:22.120 --> 00:07:23.340
An object.

00:07:23.370 --> 00:07:25.640
And again, use the inspector,
but now I'm going to set

00:07:25.730 --> 00:07:26.970
the identity of that class.

00:07:27.090 --> 00:07:30.160
What class do I really want
that controller object to be?

00:07:30.190 --> 00:07:33.160
And again, Interface Builder knows all
about the classes that I've

00:07:33.160 --> 00:07:34.780
already added to my project.

00:07:34.820 --> 00:07:37.480
So I can just get type completion,

00:07:37.760 --> 00:07:42.840
For my game controller object,
and similarly for my two views,

00:07:42.900 --> 00:07:47.510
my game board view and
my scratch pad view.

00:07:49.290 --> 00:07:49.890
That's great.

00:07:49.900 --> 00:07:52.110
I'm almost done laying
out my user interface,

00:07:52.130 --> 00:07:54.180
but I still need a way
to start a new game.

00:07:54.350 --> 00:07:56.550
So I'm going to add a toolbar.

00:08:03.700 --> 00:08:06.110
And once again,
take advantage of the access to

00:08:06.110 --> 00:08:11.150
the artwork that I've added to my
project to add some new toolbar items.

00:08:11.370 --> 00:08:13.900
So as I drag each image--

00:08:14.640 --> 00:08:18.740
Interface Builder is creating
a new toolbar item for me.

00:08:18.940 --> 00:08:22.100
So now I have all the elements
in my user interface I need,

00:08:22.160 --> 00:08:25.700
but I still need to wire them up so
I get the right behavior at runtime.

00:08:25.730 --> 00:08:28.720
And Interface Builder makes it
really easy to connect each user

00:08:28.720 --> 00:08:33.470
interface element to my source code,
which actually implements its behavior.

00:08:34.890 --> 00:08:38.040
So I can just Control-drag from
my new game toolbar item down to

00:08:38.080 --> 00:08:41.800
the game controller and connect
it up to my new game method,

00:08:41.850 --> 00:08:44.160
which will create the new game.

00:08:44.190 --> 00:08:46.620
And while I'm here,
I'll go ahead and configure

00:08:48.010 --> 00:08:51.760
my default toolbar.

00:08:51.850 --> 00:08:54.630
And then connect up my views.

00:09:01.700 --> 00:09:02.730
That's our user interface.

00:09:02.980 --> 00:09:08.600
So let's switch back to Xcode.

00:09:08.600 --> 00:09:11.200
And one more item of
housekeeping I need to do,

00:09:11.200 --> 00:09:15.230
I want to actually set the
icon for my application,

00:09:15.600 --> 00:09:19.040
which I can use Xcode's inspector to do.

00:09:19.040 --> 00:09:21.200
And again,
this was one of those shared resources

00:09:21.280 --> 00:09:22.750
I dragged in at the beginning.

00:09:24.910 --> 00:09:29.200
All right, well, let's go ahead and
build and run our game.

00:09:29.340 --> 00:09:32.850
So Xcode compiles all of my
source files and copies all the

00:09:32.850 --> 00:09:35.420
resources into the app bundle,
and--

00:09:35.930 --> 00:09:37.840
Uh-oh.

00:09:37.970 --> 00:09:43.020
You might notice down here in the bottom
that Xcode now has a scary red 1 badge.

00:09:43.220 --> 00:09:45.700
I've got a build error in my project.

00:09:45.980 --> 00:09:49.750
Fortunately for me, since I'm on stage,
Xcode makes it really easy

00:09:49.750 --> 00:09:53.400
for me to get right to the
bug that's in my source code.

00:09:53.430 --> 00:09:57.080
I can just do Command-Equals,
and Xcode takes me right

00:09:57.080 --> 00:09:58.810
to the line of source.

00:09:59.530 --> 00:10:03.440
And I can also hover over the gutter
here and focus in on just that block

00:10:03.440 --> 00:10:08.200
of code to see what the problem is,
which Xcode makes even easier

00:10:08.200 --> 00:10:10.870
by providing the actual text of
the error message in a message

00:10:10.870 --> 00:10:13.430
bubble right there next to the
line of source with the problem,

00:10:13.430 --> 00:10:16.300
where it's pretty easy to
see where the blame lies.

00:10:16.300 --> 00:10:21.000
So let's use code completion to
fix the name of that variable,

00:10:21.110 --> 00:10:25.070
and let's compile to make
sure we've fixed that.

00:10:25.820 --> 00:10:28.500
So this is just a very quick
demonstration of how Xcode makes it

00:10:28.500 --> 00:10:31.660
really easy for me to do the work
I need to do with my source code,

00:10:31.890 --> 00:10:36.900
fix build errors, typos,
and others more difficult to track down.

00:10:37.250 --> 00:10:39.800
What's also great is Xcode makes
it easy to do the work I want

00:10:39.800 --> 00:10:41.800
to do with my source code.

00:10:42.150 --> 00:10:43.880
For example,

00:10:44.120 --> 00:10:47.070
Now that I'm looking at this method,
I really don't like that argument,

00:10:47.080 --> 00:10:48.020
game controller.

00:10:48.020 --> 00:10:50.100
It's so pedestrian.

00:10:50.100 --> 00:10:52.240
I think we can do something a
little bit more interesting.

00:10:52.240 --> 00:10:55.490
Perhaps something that would
be more interesting to my boss,

00:10:55.490 --> 00:10:56.200
Andreas.

00:10:56.200 --> 00:10:59.350
But one of the things about
making changes like that,

00:10:59.350 --> 00:11:02.840
even in the small scope like this,
especially if your method is longer,

00:11:02.840 --> 00:11:06.170
is you have to make sure you get every
instance and change them together,

00:11:06.170 --> 00:11:07.920
or you'll break your application.

00:11:08.380 --> 00:11:11.080
Well,
Xcode 3.1 has a great new feature called

00:11:11.080 --> 00:11:15.800
Edit All in Scope that makes it trivial
to make these kinds of changes safely.

00:11:17.160 --> 00:11:18.900
I can just click on one of them.

00:11:18.900 --> 00:11:21.500
You can see they're indicated right away.

00:11:21.620 --> 00:11:24.770
And then we can rename this.

00:11:32.870 --> 00:11:35.700
Clearly a vast improvement to my program.

00:11:35.700 --> 00:11:39.780
So yeah, I'd like to pause also.

00:11:39.780 --> 00:11:41.320
I think many of you are like me.

00:11:41.320 --> 00:11:42.980
We write code because we love to do it.

00:11:43.140 --> 00:11:46.810
But when the tools make it fun,
it's even that much better.

00:11:47.630 --> 00:11:50.580
So now that I'm in here and kind
of playing around with my code,

00:11:50.580 --> 00:11:54.030
making it just the way I want
without breaking my application,

00:11:54.100 --> 00:11:57.010
I want to get a higher
level view of my class.

00:11:57.110 --> 00:12:01.570
So I'm going to go ahead and fold
all the methods in the class.

00:12:02.240 --> 00:12:05.560
And when I do that,
I notice Scratchpad View.

00:12:05.600 --> 00:12:09.140
I've never really thought that
was the right name for this class.

00:12:09.180 --> 00:12:12.050
But changing the name of a
class is a much wider-ranging,

00:12:12.090 --> 00:12:14.600
project-wide scope change
that I need to make.

00:12:14.670 --> 00:12:17.600
And of course, if I want to change it,
I want to do so without

00:12:17.670 --> 00:12:19.260
breaking my application.

00:12:19.300 --> 00:12:23.470
Well, Xcode makes that easy, too,
by supporting refactoring.

00:12:23.660 --> 00:12:26.290
So I'm going to refactor that class.

00:12:26.670 --> 00:12:29.240
Bring up the refactoring window where
I can see that I have a number of

00:12:29.320 --> 00:12:33.000
different types of refactorings I can do,
but I want to rename.

00:12:33.040 --> 00:12:36.320
And I think that really
should be score pad view.

00:12:37.620 --> 00:12:40.520
So when I preview,
Xcode analyzes all of the source and

00:12:40.520 --> 00:12:46.010
resources in my project and finds all the
instances of references to that class.

00:12:46.430 --> 00:12:48.750
and then presents me with
a handy before and after,

00:12:48.750 --> 00:12:53.010
which I can quickly scan through to make
sure that these are the changes I want.

00:12:53.300 --> 00:12:55.820
And in fact, if you'll notice,
not only did Xcode find the

00:12:55.820 --> 00:12:59.590
references to this class in my class's
declaration and implementation,

00:12:59.590 --> 00:13:03.110
as you'd expect,
including changing the names

00:13:03.490 --> 00:13:09.290
of those source files to match,
it also found the reference to that

00:13:09.290 --> 00:13:13.670
class in my user interface file,
again, making it very easy for you to be

00:13:13.670 --> 00:13:13.670
playful and experimental with your
code without breaking your application.

00:13:15.680 --> 00:13:18.550
So I'll go ahead and apply
those changes to my program,

00:13:18.560 --> 00:13:21.990
and let's see if we're a little more
successful building and running.

00:13:24.340 --> 00:13:26.700
So here,
I again want to pause and point out

00:13:26.760 --> 00:13:30.520
to some of you who may not have seen
a game like this before that I need

00:13:30.520 --> 00:13:34.940
to connect the letters in various
ways to spell words and score points.

00:13:35.020 --> 00:13:37.700
Now, you may think that I'm doing
this demo for all of you,

00:13:37.900 --> 00:13:41.800
but in fact, this is just part of a
very serious competition.

00:13:41.900 --> 00:13:44.930
So please, no help from the audience.

00:13:47.210 --> 00:13:49.600
So I'll start a new game,
and an important part of this game

00:13:49.600 --> 00:13:54.560
is you must shake up the board very
well to distribute the letters.

00:13:54.650 --> 00:13:58.160
And let's see what we can find.

00:13:58.250 --> 00:14:00.280
I like this board.

00:14:14.720 --> 00:14:15.940
All right, 18.

00:14:15.940 --> 00:14:17.920
OK, I guess I'm relatively
satisfied with that.

00:14:17.940 --> 00:14:20.380
We'll see how that does
in the competition later.

00:14:20.430 --> 00:14:22.000
And that was a lot of fun,
and I'm sure fun for

00:14:22.000 --> 00:14:23.910
you to watch me play.

00:14:24.850 --> 00:14:25.600
So we're done, right?

00:14:25.600 --> 00:14:26.930
We're ready to ship our game, baffle?

00:14:26.940 --> 00:14:28.440
Well, of course not.

00:14:28.470 --> 00:14:31.380
We need to optimize it and
make sure it's making the best

00:14:31.380 --> 00:14:35.020
use of the system resources,
from memory to CPU to the file system.

00:14:35.020 --> 00:14:38.220
And to do that, we have a great tool,
Instruments.

00:14:38.280 --> 00:14:42.360
So I'm going to quit my application,
return to Xcode,

00:14:42.360 --> 00:14:46.250
and point out that I've just
been running my application,

00:14:46.280 --> 00:14:49.030
which I could do again from the Run menu,
but I can also choose to

00:14:49.140 --> 00:14:50.950
start with Performance Tool.

00:14:50.960 --> 00:14:54.360
And there are a number of different
Instruments templates that I can

00:14:54.360 --> 00:14:57.240
choose to analyze different
aspects of my program's behavior.

00:14:58.850 --> 00:15:00.640
Right now,
what I would like to do is analyze it

00:15:00.640 --> 00:15:03.910
to find any memory leaks to fix those.

00:15:04.850 --> 00:15:09.050
So when I choose the Leaks template,
Instruments will launch my application

00:15:09.170 --> 00:15:14.040
again and begin gathering data
about the object allocations.

00:15:14.210 --> 00:15:16.300
So we can start a new
game and shake it out.

00:15:16.300 --> 00:15:17.680
It looks like we've got a leak already.

00:15:17.680 --> 00:15:19.410
That's trouble.

00:15:20.160 --> 00:15:22.420
So let's see what I've got here.

00:15:22.460 --> 00:15:25.210
Feeling very logical right now.

00:15:26.380 --> 00:15:29.400
And don't worry,
I won't keep playing this forever.

00:15:29.500 --> 00:15:31.670
So I think that's enough data.

00:15:31.920 --> 00:15:35.560
So I can stop recording,
my program quits, and now I can analyze

00:15:35.670 --> 00:15:37.330
the data in Instruments.

00:15:37.360 --> 00:15:39.740
And you can now see
that on the left side,

00:15:39.740 --> 00:15:43.100
you can have as many instruments as you
want to gather different types of data.

00:15:43.100 --> 00:15:45.220
Instruments library has dozens.

00:15:45.220 --> 00:15:48.460
And then along to the right,
each instrument captures

00:15:48.460 --> 00:15:51.860
data along the timeline,
allowing you to very easily visually

00:15:52.000 --> 00:15:56.220
correlate how different events affect
your programs and the system's behavior.

00:15:56.220 --> 00:16:00.930
Right now, what I want to do is focus
in on this leak peak.

00:16:03.010 --> 00:16:05.480
And we can see down
here in the detail view,

00:16:05.480 --> 00:16:07.800
each block that was leaked.

00:16:07.940 --> 00:16:13.650
And I can further explore,
see what exactly has happened there,

00:16:13.660 --> 00:16:16.210
and get the malloc history.

00:16:17.320 --> 00:16:20.960
Furthermore,
I can actually get a stack trace for

00:16:20.970 --> 00:16:24.360
that allocation and look through to
see if any of my code is involved

00:16:24.460 --> 00:16:26.860
in that block being allocated where
I might be able to fix a leak.

00:16:26.940 --> 00:16:30.680
And sure enough,
down here I see BG Sandglass View,

00:16:30.680 --> 00:16:32.720
which is the class
that handles the timer.

00:16:34.080 --> 00:16:36.230
And if I double-click
on that stack frame,

00:16:36.230 --> 00:16:39.600
Instruments sends me right back
to that line of source in Xcode,

00:16:39.600 --> 00:16:43.650
again, making it very easy for me to see
that now I've unfortunately made a

00:16:43.650 --> 00:16:47.500
common error in Cocoa programming,
where I've copied an object

00:16:47.500 --> 00:16:49.880
but failed to auto-release it.

00:16:50.010 --> 00:16:52.870
So I will fix that bug.

00:16:55.250 --> 00:16:58.200
Again, using code completion.

00:16:58.230 --> 00:17:00.660
And let's build and go again.

00:17:00.670 --> 00:17:03.280
Xcode is smart enough to know
that since the previous run,

00:17:03.300 --> 00:17:07.140
I ran with the leaks template,
it ran with the leaks template again.

00:17:07.190 --> 00:17:12.720
So I can easily compare before and
after I made that source change.

00:17:12.720 --> 00:17:16.120
I promise this is the last time
I'll play the game for you.

00:17:25.210 --> 00:17:27.340
So we can see it looks
like we fixed our leak.

00:17:27.360 --> 00:17:28.780
Excellent.

00:17:28.810 --> 00:17:29.580
Yes, thank you.

00:17:29.580 --> 00:17:32.130
I do accept applause.

00:17:34.690 --> 00:17:36.560
But even more,
Instruments makes it really easy

00:17:36.560 --> 00:17:39.910
for me to compare one run against
another to see how the behavior

00:17:39.940 --> 00:17:44.450
of my application changed once
I made that change in my source.

00:17:44.810 --> 00:17:48.090
So this has been a quick demonstration
of how our developer tools can

00:17:48.090 --> 00:17:51.920
help you build great-looking,
well-optimized applications for your Mac.

00:17:52.000 --> 00:17:53.270
Thanks very much.

00:18:02.400 --> 00:18:03.400
Thank you, Todd.

00:18:03.400 --> 00:18:05.510
So I think this is a great
demo because it really shows

00:18:05.670 --> 00:18:08.400
how well these three tools,
Xcode, Interface Builder,

00:18:08.400 --> 00:18:11.480
and Instruments, are integrated and work
together to create a really

00:18:11.600 --> 00:18:12.810
great experience for you guys.

00:18:12.880 --> 00:18:16.510
Our tools use a very mature foundation
that we've built up over nearly

00:18:16.510 --> 00:18:20.040
a decade of shipping Macros 10,
and they also use a unique approach

00:18:20.160 --> 00:18:23.080
to the development process that
really make our tools stand out.

00:18:23.140 --> 00:18:26.770
Let me explain that a little bit more,
starting with our source editor.

00:18:27.550 --> 00:18:30.170
The source editor is probably the
part of the developer tools where

00:18:30.170 --> 00:18:32.550
you will spend most of your time,
and so we in turn spend a

00:18:32.550 --> 00:18:34.980
lot of time every release to
making it better and better.

00:18:34.980 --> 00:18:37.320
We really put your code at center stage.

00:18:38.740 --> 00:18:41.450
Xcode does everything you would
expect from a great source editor.

00:18:41.520 --> 00:18:44.210
For example, it has code completion that
knows everything about the

00:18:44.310 --> 00:18:46.080
Cocoa and Cocoa Touch APIs.

00:18:46.080 --> 00:18:49.190
It also has conveniences
like code folding.

00:18:49.550 --> 00:18:52.270
And the editor hooks right
into the refactoring engine,

00:18:52.360 --> 00:18:54.680
which really is a huge
productivity feature.

00:18:54.880 --> 00:18:58.320
Refactoring allows you to make
large-scale structural changes,

00:18:58.460 --> 00:19:01.640
like renaming a class,
to your entire project at once

00:19:01.780 --> 00:19:03.880
in an assisted and safe way.

00:19:05.310 --> 00:19:07.310
Now, as I said,
we really believe that your code

00:19:07.380 --> 00:19:08.810
deserves to be at center stage.

00:19:08.930 --> 00:19:12.750
And so instead of creating workflows
that take you away from the source code,

00:19:12.770 --> 00:19:15.360
or workflows that minimize the
amount of screen real estate

00:19:15.420 --> 00:19:19.280
you can allocate to your editor,
we bring the right information

00:19:19.280 --> 00:19:21.140
to you inside the editor.

00:19:21.150 --> 00:19:24.240
As you saw in the demo,
when you get bit errors and warnings,

00:19:24.390 --> 00:19:27.010
we will show them to you in the
form of message bubbles right

00:19:27.010 --> 00:19:30.990
in the source code next to the
line that they actually occurred.

00:19:31.880 --> 00:19:34.190
You also bring the debugging
experience into the editor.

00:19:34.200 --> 00:19:36.500
When we start debugging,
we roll down the debugger

00:19:36.500 --> 00:19:39.370
strip at the top of the editor,
which contains all the essential

00:19:39.370 --> 00:19:42.400
controls that you need for most
of the common debugging tasks,

00:19:42.480 --> 00:19:45.680
like stepping and
looking at stack traces.

00:19:45.980 --> 00:19:48.610
And also while debugging,
you can simply hover with your

00:19:48.970 --> 00:19:53.000
mouse over a variable or data
structure to get what we call a data

00:19:53.050 --> 00:19:54.980
tip that shows you their values.

00:19:55.050 --> 00:19:57.500
You can drill down deeply
into the data structures,

00:19:57.510 --> 00:20:00.480
and you can even edit the values
in the data tips without ever

00:20:00.480 --> 00:20:02.760
leaving the context of your editor.

00:20:02.840 --> 00:20:05.030
So these center stage features
really mean that you can

00:20:05.110 --> 00:20:06.670
focus on your source code.

00:20:06.760 --> 00:20:10.900
You can really allocate a lot of space on
the screen to your editor and not clutter

00:20:10.900 --> 00:20:15.400
the screen with additional views in
Windows just to see some auxiliary data.

00:20:16.780 --> 00:20:19.370
So Xcode is a great source editor,
and Interface Builder

00:20:19.380 --> 00:20:21.940
is a great UI editor.

00:20:22.010 --> 00:20:27.200
What really makes Interface Builder
stand out is that it manipulates real

00:20:27.220 --> 00:20:29.960
objects instead of generating code.

00:20:30.000 --> 00:20:33.140
Avoiding code generation means that
your source stays a lot cleaner,

00:20:33.330 --> 00:20:36.260
and it also means that you can
test your interfaces right from

00:20:36.260 --> 00:20:39.330
within Interface Builder without
building your projects in between.

00:20:39.540 --> 00:20:43.830
Gives you great prototyping experience
and very rapid turnaround times.

00:20:45.780 --> 00:20:48.290
Now, Interface Builder works
very closely with Xcode,

00:20:48.320 --> 00:20:50.500
and it accesses the
same class information.

00:20:50.620 --> 00:20:53.170
So if you go into Xcode
and you add a class,

00:20:53.170 --> 00:20:56.100
a method, or a variable,
they would show up immediately

00:20:56.190 --> 00:20:57.320
in the design tool as well.

00:20:57.320 --> 00:21:02.270
So you can hook up your UI elements to
the application logic you just wrote.

00:21:03.830 --> 00:21:05.940
Now,
one of the primary reasons why we're able

00:21:05.940 --> 00:21:10.130
to implement a great tool like Interface
Builder is that we chose Objective-C as

00:21:10.180 --> 00:21:14.700
our programming language for both the
Cocoa and the Cocoa Touch frameworks.

00:21:14.820 --> 00:21:19.080
Objective-C really is the engine behind
Apple's frameworks and applications.

00:21:19.110 --> 00:21:23.360
Objective-C is one of the reasons
why we can very quickly ship new

00:21:23.550 --> 00:21:26.090
releases of Mac OS X and the iPhone OS.

00:21:26.870 --> 00:21:30.000
The highly dynamic nature of
the Objective-C language is

00:21:30.000 --> 00:21:33.310
what enables Interface Builder
to work with live objects,

00:21:33.350 --> 00:21:37.180
and to have those same objects be loaded
at runtime into your applications,

00:21:37.180 --> 00:21:40.520
but they get stitched together
with your compiled code.

00:21:41.640 --> 00:21:43.840
Recently in Leopard,
we've begun to aggressively

00:21:43.840 --> 00:21:45.600
evolve the Objective-C language.

00:21:45.600 --> 00:21:48.890
We added mechanisms and
constructs that allow you to

00:21:48.890 --> 00:21:54.040
read and write code more easily,
to actually use fewer lines of code,

00:21:54.250 --> 00:21:59.920
And at the same time, benefit from faster
execution time and runtime.

00:22:00.160 --> 00:22:03.480
So Objective-C2 really was a giant
step forward to modernize the language.

00:22:03.500 --> 00:22:06.900
And most importantly,
we added Garbage Collection.

00:22:06.920 --> 00:22:09.340
In addition to Garbage Collection,
we implemented a number of

00:22:09.350 --> 00:22:13.400
features with a special focus
on performance and robustness.

00:22:13.440 --> 00:22:18.060
We're going to continue this trend
with Objective-C2.1 and Snow Leopard.

00:22:18.220 --> 00:22:20.130
On top of the--

00:22:33.320 --> 00:22:35.840
So on top of the lightweight
blocks construct that Bertrand

00:22:35.840 --> 00:22:37.950
already introduced you to
in the previous session,

00:22:37.950 --> 00:22:39.950
which will be very helpful
when you're tackling mighty

00:22:40.000 --> 00:22:42.250
core problems going forward.

00:22:42.530 --> 00:22:46.110
We're again adding a number of features
with a special focus on performance,

00:22:46.130 --> 00:22:50.880
like faster method dispatch and faster
startup times for your applications.

00:22:53.100 --> 00:22:55.190
All the Objective-C code
you write will end up in a

00:22:55.190 --> 00:22:56.760
compiler at some point in time.

00:22:56.760 --> 00:22:59.050
And with Xcode 3.1,
we have some fantastic

00:22:59.050 --> 00:23:00.540
news in this space as well.

00:23:00.590 --> 00:23:04.010
Because in Xcode 3.1,
you get the choice of

00:23:04.010 --> 00:23:06.020
multiple great compilers.

00:23:06.530 --> 00:23:11.910
Our current default compiler for both
Leopard and the iPhone OS is GCC 4.0.

00:23:11.910 --> 00:23:13.590
And in Snow Leopard,
we're going to replace

00:23:13.590 --> 00:23:16.490
it with a newer version,
GCC 4.2.

00:23:16.520 --> 00:23:19.980
But we're already making 4.2
available to you now so that you can

00:23:20.150 --> 00:23:22.170
get ready for a smooth transition.

00:23:24.130 --> 00:23:26.760
The focus of GCC 4.2 is performance.

00:23:26.780 --> 00:23:29.970
It adds support for OpenMP and
also implements a long list of

00:23:29.980 --> 00:23:35.080
new optimizations and improvements
to the auto vectorization engine.

00:23:35.090 --> 00:23:38.540
The detailed feature set of GCC 4.2
is flying by here in the background.

00:23:38.540 --> 00:23:40.100
And if you actually know
what any of that means,

00:23:40.150 --> 00:23:42.510
then you know how great
the feature set of 4.2 is.

00:23:42.710 --> 00:23:44.120
And if not, that's fine.

00:23:44.120 --> 00:23:47.450
It does a lot of geeky stuff
that is very good for you.

00:23:50.240 --> 00:23:53.440
So also in Xcode 3.1,
we're going to add a brand new

00:23:53.440 --> 00:23:57.380
compiler technology that we've been
working on for a number of years.

00:23:57.540 --> 00:24:01.170
And it's called LLVM, which stands for--

00:24:05.890 --> 00:24:08.350
So LLVM stands for
low-level virtual machine,

00:24:08.350 --> 00:24:13.790
and the reason why we've been
investing into it is speed.

00:24:15.960 --> 00:24:19.300
LLVM has a very modern,
very modular code base that allows

00:24:19.380 --> 00:24:20.860
us to innovate very quickly.

00:24:20.860 --> 00:24:23.620
It allows us to make changes
very swiftly to the compiler,

00:24:23.620 --> 00:24:28.630
much more than we've been able
to do with traditional compilers.

00:24:28.650 --> 00:24:32.170
So the advantages of LLVM are
that it compiles code faster,

00:24:32.330 --> 00:24:36.490
that it generates code that runs faster,
and it can apply strong

00:24:36.490 --> 00:24:39.560
optimizations across multiple files.

00:24:39.570 --> 00:24:41.810
So let's take a look at some numbers.

00:24:43.090 --> 00:24:47.020
This graph shows a build time
comparison between LLVM and GCC for a

00:24:47.020 --> 00:24:49.440
number of select projects in Mac OS X.

00:24:49.520 --> 00:24:53.970
What you can see from this graph is that
already in this first release of LLVM,

00:24:53.970 --> 00:24:58.290
we're achieving build time
improvements between 20% and 40%.

00:24:58.990 --> 00:25:01.320
And not only do we compile
the code a lot faster,

00:25:01.320 --> 00:25:03.290
LLVM also runs the code faster.

00:25:03.440 --> 00:25:05.490
To test LLVM, just--

00:25:06.040 --> 00:25:08.690
We ran a few benchmarks of
some performance-sensitive

00:25:08.690 --> 00:25:10.120
areas that we know in Mac OS X.

00:25:10.130 --> 00:25:12.720
In one case,
we measured the number of frames

00:25:12.720 --> 00:25:14.080
per second for video playback.

00:25:14.110 --> 00:25:16.420
In the other case,
we measured the number of

00:25:16.670 --> 00:25:19.280
signing operations that
OpenSSA can perform per second.

00:25:19.520 --> 00:25:23.190
And what we found is that
LLVM runs the same source,

00:25:23.190 --> 00:25:26.580
in one case 15,
in the other case 25% faster.

00:25:26.580 --> 00:25:30.060
So gains like this,
15 to 25%, are very hard

00:25:30.060 --> 00:25:32.160
to achieve with a compiler.

00:25:32.160 --> 00:25:35.130
So I really think it speaks
for the potential of LLVM,

00:25:35.130 --> 00:25:37.760
the high quality of
code that it generates.

00:25:39.810 --> 00:25:42.690
Now these numbers look very promising,
but one thing that's important

00:25:42.690 --> 00:25:46.900
to notice is that LLVM is still
an early adopter technology.

00:25:46.970 --> 00:25:51.280
LLVM simply has not seen the huge
masses of code that GCC has compiled

00:25:51.280 --> 00:25:53.040
over the last several decades.

00:25:53.130 --> 00:25:56.510
And so the optimizations we
implemented in LLVM might not apply

00:25:56.510 --> 00:25:58.790
evenly to all areas of your code.

00:25:58.800 --> 00:26:02.860
It's likely that you will see different
results with different kind of projects.

00:26:02.960 --> 00:26:06.660
And so while we very highly
encourage you to try out LLVM,

00:26:06.780 --> 00:26:09.520
just notice that mileage may vary.

00:26:14.030 --> 00:26:18.380
We already used GCC 4.2 to
build all of Snow Leopard today.

00:26:18.440 --> 00:26:22.150
So GCC 4.2 is definitely
ready for you to be used.

00:26:23.040 --> 00:26:26.460
And most of your projects will
make the transition to GCC 4.2 very

00:26:26.460 --> 00:26:29.100
soon when Snow Leopard comes along.

00:26:29.190 --> 00:26:32.280
So once your projects
have made this transition,

00:26:32.360 --> 00:26:35.770
it's very easy for you
to try out LLVM as well.

00:26:35.870 --> 00:26:38.380
We've made it exceptionally easy for you.

00:26:38.490 --> 00:26:41.900
If you look at an architecture
diagram for a compiler,

00:26:42.990 --> 00:26:45.480
We typically distinguish between
what we call the front end,

00:26:45.480 --> 00:26:49.050
which is pretty much the pass of the
compiler that reads in your source code,

00:26:49.050 --> 00:26:52.450
and the back end that contains
different code generators for all the

00:26:52.450 --> 00:26:54.190
architectures that you're developing for.

00:26:54.200 --> 00:26:58.390
And what we are doing in Xcode
3.1 is that we are simply sliding

00:26:58.390 --> 00:27:02.930
in LLVM as an alternative back
end behind the GCC 4.2 front end.

00:27:02.960 --> 00:27:07.010
So we are reusing the
parser of GCC 4.2 with LLVM.

00:27:07.080 --> 00:27:10.060
And that, of course,
means for you that LLVM is fully

00:27:10.190 --> 00:27:12.270
source code compatible with GCC.

00:27:12.900 --> 00:27:18.090
And of course,
the code we generated with LLVM

00:27:18.850 --> 00:27:20.650
There's also fully binary compatible.

00:27:20.720 --> 00:27:23.550
So if you have code that is
fully source code and binary

00:27:23.550 --> 00:27:27.730
compatible between LLVM and GCC,
you can very easily try out LLVM and

00:27:27.730 --> 00:27:30.490
actually mix and match different
pieces of code that are compiled

00:27:30.620 --> 00:27:32.900
with the two different back ends.

00:27:35.010 --> 00:27:38.850
So we've been working quite hard
on LLVM the last several years,

00:27:39.010 --> 00:27:41.900
but so have many other
engineers outside of Apple,

00:27:41.900 --> 00:27:44.080
because LLVM is open source.

00:27:44.170 --> 00:27:47.890
And you find the community
website here at llvm.org.

00:27:48.010 --> 00:27:51.490
And so we regularly contribute our
version of the compiler to the community,

00:27:51.500 --> 00:27:54.500
but we would very much
appreciate your help as well.

00:27:54.500 --> 00:27:56.560
In fact,
I believe that LLVM is a tremendous

00:27:56.560 --> 00:28:00.110
opportunity for you as the
Apple developer community to really

00:28:00.130 --> 00:28:03.970
shape the future of our compiler
technologies and to make the compiler

00:28:03.970 --> 00:28:06.620
exactly into what you want it to be.

00:28:06.990 --> 00:28:09.900
If you go and visit this website,
you will also find that we've

00:28:09.900 --> 00:28:12.520
begun work on another project,
which we call Clang.

00:28:12.560 --> 00:28:18.330
Clang is intended to be our future
LLVM front-end for C languages,

00:28:18.330 --> 00:28:21.000
for C, Objective-C, and C++.

00:28:21.020 --> 00:28:24.920
And Clang is going to open the
door to a bright future for us.

00:28:24.940 --> 00:28:28.710
Clang is designed from the ground
up to be extremely lightweight and

00:28:28.710 --> 00:28:30.990
to run inside the Xcode application.

00:28:31.180 --> 00:28:34.460
And not only will that give us
dramatically improved compile times,

00:28:34.460 --> 00:28:37.960
it will also allow us to
create a brand new light-speed

00:28:38.170 --> 00:28:39.960
indexing and refactoring engine.

00:28:43.100 --> 00:28:46.070
So the compilers in
Xcode 3.1 are GCC 4.0,

00:28:46.230 --> 00:28:48.880
GCC 4.2, and LLVM.

00:28:48.970 --> 00:28:52.580
And all of them are, of course,
driven by the Xcode Build System,

00:28:52.600 --> 00:28:55.410
which has proven to be
very flexible and scalable.

00:28:55.530 --> 00:28:58.060
But if you want to build a
small project like TextEdit,

00:28:58.140 --> 00:29:01.050
your own suite of applications,
or an entire OS like

00:29:01.130 --> 00:29:04.650
Mac OS X or the iPhone OS,
the Xcode Build System will

00:29:04.730 --> 00:29:06.760
stitch them together just fine.

00:29:06.810 --> 00:29:09.620
It is really designed to make
great use of modern hardware,

00:29:09.770 --> 00:29:12.950
most importantly,
multiple processor cores.

00:29:13.720 --> 00:29:17.000
This graph shows you how build time
decreases with the number of processor

00:29:17.000 --> 00:29:19.090
cores you have available in your machine.

00:29:19.100 --> 00:29:21.820
So as you can see,
we make great use of every core there is,

00:29:21.820 --> 00:29:24.440
and it usually pays off nicely
to get your boss to buy you

00:29:24.440 --> 00:29:26.910
this fully loaded Mac Pro.

00:29:28.840 --> 00:29:30.400
Here's a different view at build time.

00:29:30.430 --> 00:29:33.420
This graph shows how build time
has decreased over the last

00:29:33.680 --> 00:29:37.090
several years when measured on the
latest and greatest version of the

00:29:37.090 --> 00:29:39.650
hardware and the OS and the tools.

00:29:39.800 --> 00:29:43.720
So through a combination of improvements
to the hardware and the software,

00:29:43.740 --> 00:29:46.780
we've been able to decrease
build time by a factor of 15.

00:29:46.850 --> 00:29:51.350
We've literally gone from hours
of compile time to minutes.

00:29:52.120 --> 00:29:54.940
Now, these graphs illustrate another very
important point that I'd like to make,

00:29:55.060 --> 00:29:58.710
and that is that well-performing
applications need to make best use of

00:29:58.710 --> 00:30:02.230
modern hardware and OS capabilities.

00:30:03.220 --> 00:30:05.130
What that means for you is
dealing with multiple threats

00:30:05.330 --> 00:30:06.840
and multiple processor cores.

00:30:06.840 --> 00:30:10.550
It means also to reach low
power consumption goals,

00:30:10.800 --> 00:30:14.600
and it means to interact very carefully
with the more and more processes

00:30:14.600 --> 00:30:16.560
running in a modern OS nowadays.

00:30:16.560 --> 00:30:19.780
There are many new and
exciting capabilities that new

00:30:19.960 --> 00:30:22.830
OSes and new hardware have,
but you as developers

00:30:22.830 --> 00:30:24.900
need to be aware of them,
and you need to do your

00:30:25.020 --> 00:30:25.870
part in playing nice.

00:30:25.980 --> 00:30:28.940
So it's not good enough
anymore to just measure the raw

00:30:28.940 --> 00:30:32.500
CPU performance of your own process
when you're analyzing performance.

00:30:32.500 --> 00:30:35.970
You really need to take a holistic
approach to the entire performance

00:30:36.820 --> 00:30:38.880
picture in the entire system.

00:30:38.880 --> 00:30:42.750
And that's precisely why
we created Instruments.

00:30:44.570 --> 00:30:48.020
Instruments allows you to
combine multiple different types

00:30:48.090 --> 00:30:51.500
of data sources together and
really monitor multiple aspects,

00:30:51.560 --> 00:30:55.400
multiple types of behaviors in
your applications at the same time.

00:30:55.400 --> 00:30:59.400
You can look at CPU usage, graphics,
memory, network, file system activity,

00:30:59.400 --> 00:31:02.630
and there are even instruments
that are specific to individual

00:31:02.790 --> 00:31:04.620
frameworks like Core Data.

00:31:05.620 --> 00:31:08.740
The most unique feature of
Instruments is that it uses a great,

00:31:08.810 --> 00:31:11.760
very intuitive, garage-band-like UI.

00:31:11.880 --> 00:31:14.830
It uses a timeline view that
allows you to visually correlate

00:31:14.890 --> 00:31:18.750
the different events and to find
dependencies and interactions between

00:31:18.860 --> 00:31:21.990
subsystems in your applications
that would otherwise be hidden if

00:31:21.990 --> 00:31:24.120
you would measure them individually.

00:31:25.400 --> 00:31:28.850
And Instruments gets
complemented by another fantastic

00:31:28.910 --> 00:31:31.100
performance tool that we have,
which is called Shark.

00:31:31.160 --> 00:31:33.540
Shark is a very powerful profiling tool.

00:31:33.540 --> 00:31:36.300
It is great at taking
CPU samples with a very,

00:31:36.300 --> 00:31:38.720
very low overhead,
which makes it ideal for

00:31:38.720 --> 00:31:40.610
fine-grained performance analysis.

00:31:40.620 --> 00:31:45.780
And you can run both Instruments
and Shark against the production

00:31:45.780 --> 00:31:48.080
versions of your applications.

00:31:48.080 --> 00:31:51.220
There's no need to rebuild your
projects with special build settings,

00:31:51.220 --> 00:31:54.600
no need to link in special libraries
just to enable the performance tool.

00:31:54.950 --> 00:31:56.660
They work against any
version of your program.

00:31:56.660 --> 00:31:58.900
They're very easy to
apply against your code,

00:31:58.920 --> 00:32:01.910
and you will be surprised what they can
show you once you start running them.

00:32:07.290 --> 00:32:09.030
So that was a quick
tour through our tools.

00:32:09.080 --> 00:32:12.640
And I hope it became clear that just
like the consumer product space,

00:32:12.850 --> 00:32:15.850
the users benefit tremendously
from Apple being the single

00:32:15.880 --> 00:32:18.860
source that delivers the
entire experience of hardware,

00:32:18.950 --> 00:32:20.640
software, and services.

00:32:20.640 --> 00:32:23.410
You, the developer community,
benefit tremendously from us being

00:32:23.410 --> 00:32:26.960
the single source that delivers
the entire development experience.

00:32:26.960 --> 00:32:29.220
Our tools, our frameworks,
our programming languages,

00:32:29.240 --> 00:32:32.620
and our hardware work together
very closely to deliver a

00:32:32.650 --> 00:32:34.970
truly outstanding experience.

00:32:43.890 --> 00:32:46.240
Now we've taken everything
we've learned with the Mac about

00:32:46.310 --> 00:32:50.710
being a great platform company,
and we applied it to our new platform,

00:32:50.860 --> 00:32:51.590
the iPhone OS.

00:32:51.680 --> 00:32:56.950
The iPhone SDK comes loaded with a ton
of iPhone-specific tools extensions

00:32:56.950 --> 00:33:01.710
that get activated when you choose the
iPhone SDK for one of your projects.

00:33:01.820 --> 00:33:05.330
Those of you that have developed
Mac applications in the past are

00:33:05.330 --> 00:33:07.500
already familiar with the term SDK.

00:33:08.640 --> 00:33:12.240
Using an SDK means that you're using
the latest version of the OS and

00:33:12.320 --> 00:33:15.550
the latest version of the tools,
but you're targeting the behaviors and

00:33:15.550 --> 00:33:17.760
APIs of a different version of Mac OS X.

00:33:17.760 --> 00:33:21.240
So an SDK essentially is a snapshot
of headers and libraries of a

00:33:21.240 --> 00:33:23.070
different version of Mac OS X.

00:33:23.100 --> 00:33:27.830
And with Xcode 3.1, you've extended the
meaning of what an SDK is.

00:33:27.940 --> 00:33:30.940
And now if you select the iPhone OS,
you not only select a set

00:33:30.940 --> 00:33:33.620
of headers and libraries,
but also a completely

00:33:33.620 --> 00:33:35.590
parallel low-level tool chain.

00:33:35.600 --> 00:33:38.260
So the iPhone SDK comes
with an iPhone OS,

00:33:38.390 --> 00:33:42.140
comes with a set of ARM build tools,
ARM is the processor used on the iPhone,

00:33:42.140 --> 00:33:45.900
comes with a simulator application,
and it comes with a number of other

00:33:45.900 --> 00:33:49.490
utilities that actually really make
it fun to develop for the iPhone.

00:33:49.500 --> 00:33:51.120
So let's show that to you, too.

00:33:51.120 --> 00:33:53.760
For our second demo,
I'd like to ask Matt Furtick to

00:33:53.770 --> 00:33:57.260
come up on stage and show us how
to build an iPhone application.

00:34:04.490 --> 00:34:07.010
Thank you, Andreas.

00:34:07.120 --> 00:34:10.530
One of the most amazing and exciting
things about developing with

00:34:10.540 --> 00:34:14.690
Apple technologies is the fact that
skills and techniques you learn for one

00:34:14.940 --> 00:34:20.410
platform translate directly to the other,
because of the commonality of the system,

00:34:20.530 --> 00:34:22.860
the frameworks, and the underlying tools.

00:34:22.950 --> 00:34:25.240
So just a show of hands,
how many people are actually here

00:34:25.240 --> 00:34:27.430
to build an iPhone application?

00:34:28.330 --> 00:34:31.440
That's pretty much everyone.

00:34:31.440 --> 00:34:34.740
That's going to be a really
big application store.

00:34:34.740 --> 00:34:36.740
So many of you may be sitting
in the audience wondering,

00:34:36.740 --> 00:34:38.910
all right,
how do I take my application and

00:34:38.910 --> 00:34:40.580
build a version for the iPhone?

00:34:40.690 --> 00:34:42.950
And to demonstrate how easy that is,
what we're going to do is

00:34:42.950 --> 00:34:45.510
take the game that Todd built,
and we're going to build

00:34:45.560 --> 00:34:46.520
a version for the phone.

00:34:46.600 --> 00:34:49.510
So let's build Baffle Touch.

00:34:51.370 --> 00:34:55.530
So I'll go to my machine here,
and we'll bring up Xcode,

00:34:55.570 --> 00:34:57.680
and we will create a new project.

00:34:57.720 --> 00:35:01.860
But this time, I'm going to pick from one
of the iPhone OS templates.

00:35:01.860 --> 00:35:04.760
We'll choose this one,
and we'll call it Baffle Touch.

00:35:04.830 --> 00:35:09.210
I also have problems
with the letter A and O.

00:35:09.710 --> 00:35:11.670
So we'll save that to the desktop.

00:35:11.770 --> 00:35:14.030
Now you'll see that the project
looks pretty much the same as

00:35:14.030 --> 00:35:15.800
it did for our Cocoa project.

00:35:15.850 --> 00:35:18.080
And in fact,
I'm going to use some of the elements

00:35:18.170 --> 00:35:20.040
that Todd used to start with.

00:35:20.150 --> 00:35:23.180
So because the shared code,
because the core of our application

00:35:23.490 --> 00:35:26.440
is written in just pure Objective-C,
I can use that in my

00:35:26.440 --> 00:35:27.880
Cocoa Touch application.

00:35:27.930 --> 00:35:30.570
And the same thing is true
for the shared resources.

00:35:30.710 --> 00:35:34.570
So we'll drag in the shared code,
and we'll drag in those

00:35:34.570 --> 00:35:36.580
same images and audio files.

00:35:36.640 --> 00:35:39.580
But instead of using the
Cocoa views that Todd built,

00:35:39.620 --> 00:35:42.860
I'm going to use the
Cocoa Touch views that I built

00:35:42.920 --> 00:35:45.150
to put together our interface.

00:35:45.230 --> 00:35:45.630
So there we go.

00:35:45.760 --> 00:35:47.270
Our project is all set up.

00:35:47.430 --> 00:35:49.760
Let's design our interface.

00:35:49.880 --> 00:35:52.890
So I'll open the main window
here in Interface Builder,

00:35:53.000 --> 00:35:55.380
and we'll hide Xcode to make
that a little more visible.

00:35:55.560 --> 00:35:57.880
And you'll see that now we're
back in Interface Builder.

00:35:57.950 --> 00:36:00.720
And it may look pretty much
the same as it did for Cocoa.

00:36:00.780 --> 00:36:03.360
The important element to note
is that on the left here,

00:36:03.360 --> 00:36:05.530
the library is now full
of Cocoa Touch views.

00:36:05.810 --> 00:36:09.400
These are views that we can use
to design our iPhone applications.

00:36:09.440 --> 00:36:13.100
We have access to all the same media
that we used for our other game.

00:36:13.160 --> 00:36:14.780
In this case,
we're going to use a slightly

00:36:14.780 --> 00:36:16.810
different background image,
because you'll note that the

00:36:16.810 --> 00:36:20.570
iPhone window here is a little
bit smaller than a Cocoa window.

00:36:20.700 --> 00:36:22.990
So we'll drag that in,
place it where we want,

00:36:23.090 --> 00:36:25.760
and now we'll design the
rest of our interface.

00:36:25.800 --> 00:36:28.340
Now, for the iPhone version
of this application,

00:36:28.500 --> 00:36:31.980
we used subclasses of image views
rather than just regular views.

00:36:32.050 --> 00:36:34.940
So what this means is I can actually
use images to lay out my interface.

00:36:34.940 --> 00:36:38.320
So I'll drag in the same
board view that Todd did.

00:36:38.320 --> 00:36:39.320
We'll put that down.

00:36:39.320 --> 00:36:43.320
I'll drag out the same image
Todd used for the scratch pad.

00:36:43.320 --> 00:36:46.320
You'll note that it's much bigger than
I want for my particular interface here,

00:36:46.320 --> 00:36:50.300
but Interface Builder lets me resize that
down and put it exactly where I want.

00:36:50.320 --> 00:36:52.180
So now we've got our two main views.

00:36:52.320 --> 00:36:54.160
We want to put in a toolbar.

00:36:54.320 --> 00:36:56.010
Now, for Cocoa Touch,
the toolbars go at the

00:36:56.090 --> 00:36:57.310
bottom instead of the top.

00:36:57.380 --> 00:37:00.200
I'm going to use one of the
features of Interface Builder,

00:37:00.320 --> 00:37:02.850
which is the ability to design
views and put them back in

00:37:02.930 --> 00:37:04.220
the library for use later.

00:37:04.320 --> 00:37:09.320
So I can just drag out my pre-configured
toolbar and just drop that in place.

00:37:09.320 --> 00:37:12.410
So now I have the basics of my interface.

00:37:12.970 --> 00:37:15.360
Like Todd,
we're going to put in a game controller.

00:37:15.360 --> 00:37:17.800
This is the core application logic.

00:37:17.850 --> 00:37:19.810
We'll drop that into our document here.

00:37:19.890 --> 00:37:24.860
And we need to set the custom class so
that it is one of our game controllers.

00:37:25.080 --> 00:37:28.500
So now what I need to do is set
the custom classes of my interface.

00:37:28.540 --> 00:37:29.930
We do that in the same way that Todd did.

00:37:30.060 --> 00:37:31.230
I'll select each view.

00:37:31.400 --> 00:37:34.020
So this becomes my game board view.

00:37:34.080 --> 00:37:36.480
This becomes my scratch pad view.

00:37:36.520 --> 00:37:40.160
And we're actually going to put
in a custom toolbar as well.

00:37:40.400 --> 00:37:42.620
So now I just need to connect stuff up.

00:37:42.640 --> 00:37:45.670
We'll connect the game board
to the game controller so that

00:37:45.670 --> 00:37:48.820
we know how to get our pieces,
connect our scratchpad view,

00:37:48.820 --> 00:37:52.140
the name which I don't mind,
up to our game controller so that

00:37:52.140 --> 00:37:54.260
we can get our words and our score.

00:37:54.290 --> 00:37:57.830
We're also going to connect up our
toolbar to our game controller so that

00:37:57.920 --> 00:38:01.180
we can move the toolbar out of the way,
since we're dealing with

00:38:01.180 --> 00:38:02.760
a smaller geometry here.

00:38:03.120 --> 00:38:05.620
And we'll also connect up one
of the buttons in our toolbar

00:38:05.620 --> 00:38:09.670
to make sure that we can build
a new game or run a new game.

00:38:09.770 --> 00:38:10.220
So there we go.

00:38:10.330 --> 00:38:11.680
We've designed our interface.

00:38:11.750 --> 00:38:15.730
Let's go back to Xcode and take
a look and see how it works.

00:38:16.680 --> 00:38:20.480
So here we are back in Xcode,
and I want to test my application.

00:38:20.520 --> 00:38:22.440
Now I have two options to do this.

00:38:22.480 --> 00:38:25.950
I can use the simulator,
or I can use the phone.

00:38:26.010 --> 00:38:28.800
To pick between those two,
we would use the overview pop-up

00:38:28.840 --> 00:38:30.500
here in the upper left of the window.

00:38:30.520 --> 00:38:32.440
You can see it's already
set on simulator,

00:38:32.560 --> 00:38:34.960
so I will just build and go with that.

00:38:35.220 --> 00:38:38.420
So Xcode's going to compile
my application and launch it.

00:38:38.420 --> 00:38:39.120
And here we are.

00:38:39.120 --> 00:38:40.820
Here's my game in the simulator.

00:38:40.890 --> 00:38:44.250
Don't worry, the views actually come in
when we click the New button.

00:38:44.380 --> 00:38:45.220
So there it is.

00:38:45.390 --> 00:38:46.780
And of course, we do the same thing.

00:38:46.780 --> 00:38:49.400
We'll shake up our game
and just start to play.

00:38:49.600 --> 00:38:52.850
Now, unlike Todd, I think we're in this
presentation together.

00:38:53.050 --> 00:38:55.630
So if you see any large words,
feel free to shout them out.

00:38:55.680 --> 00:39:02.090
Anything long, like rhinoceros,
or anything particularly large.

00:39:02.100 --> 00:39:03.760
But you can see,
now we're going to use the

00:39:03.820 --> 00:39:06.480
Cocoa Touch interface and
just start to play our game.

00:39:06.540 --> 00:39:09.800
And we can start to build more and
more into our application using

00:39:09.990 --> 00:39:12.210
both Xcode and the simulator.

00:39:12.240 --> 00:39:15.330
Now, as part of the development process,
I happen to know that there is

00:39:15.330 --> 00:39:18.000
a bug in this code somewhere
that I want to root out.

00:39:18.080 --> 00:39:20.360
And you may be asking me,
how do I know that?

00:39:20.410 --> 00:39:28.450
Well, as Todd and I have been working on
these demos and putting stuff together,

00:39:28.450 --> 00:39:28.450
we've been comparing notes.

00:39:28.450 --> 00:39:28.450
And by and large,
Todd's scores are better than mine.

00:39:29.780 --> 00:39:31.260
Clearly a bug.

00:39:31.440 --> 00:39:34.500
So, we'll go into our source code here.

00:39:34.500 --> 00:39:36.740
We'll go into the core game
controller by selecting it

00:39:36.760 --> 00:39:38.240
in the Groups and Files view.

00:39:38.350 --> 00:39:40.780
And I'm going to look
for a particular method.

00:39:40.980 --> 00:39:43.640
In this case, the one I'm looking for
is Advanced Progress.

00:39:43.720 --> 00:39:46.100
This is a method that gets
fired as the game is running,

00:39:46.180 --> 00:39:49.300
as the hourglass kind of goes
down and keeps track of things.

00:39:49.410 --> 00:39:51.740
So, our game is still
running in the simulator.

00:39:51.790 --> 00:39:55.200
I'm going to take a look at some
debugging information by just clicking in

00:39:55.200 --> 00:39:57.200
the gutter here and setting a breakpoint.

00:39:57.280 --> 00:40:00.280
So, you can see the little blue
chevron here appears in my code.

00:40:00.380 --> 00:40:03.300
We'll now go back into the
simulator and click New,

00:40:03.430 --> 00:40:04.370
start to play our game.

00:40:04.500 --> 00:40:06.400
And you'll note that as
the game starts to run,

00:40:06.450 --> 00:40:08.100
we instantly hit our breakpoint.

00:40:08.180 --> 00:40:11.360
So, now I can start looking at
some information about my app.

00:40:11.430 --> 00:40:13.890
I could hover over any of the
instance variables and start

00:40:13.890 --> 00:40:15.480
to use the debugging tool tips.

00:40:15.580 --> 00:40:18.780
And here's the information about my game.

00:40:18.960 --> 00:40:22.510
Now I can go and use the debugging
strip up here at the top of the

00:40:22.510 --> 00:40:25.450
editor to advance and click continue,
and you'll note that my

00:40:25.450 --> 00:40:26.600
breakpoint gets hit again.

00:40:26.620 --> 00:40:28.830
Well,
it's because the game keeps advancing.

00:40:28.830 --> 00:40:32.040
This is going to make it really difficult
for me to figure out why my scores

00:40:32.040 --> 00:40:35.720
aren't as good as Todd's if it keeps
hitting this breakpoint over and over.

00:40:35.720 --> 00:40:39.460
But Xcode provides a feature for me
to make that a little bit easier.

00:40:39.460 --> 00:40:42.520
I'm going to show the message
bubble here under my breakpoint,

00:40:42.650 --> 00:40:44.940
and I'm going to set a
breakpoint condition.

00:40:44.990 --> 00:40:48.070
In this case, I happen to know that the
variable that's right here,

00:40:48.070 --> 00:40:50.790
current progress,
is a variable that goes between

00:40:50.790 --> 00:40:52.940
zero and one as the game progresses.

00:40:53.020 --> 00:40:55.510
So what I want to do is I want
to stop the execution of my

00:40:55.510 --> 00:40:57.260
app just before it's done.

00:40:57.260 --> 00:41:00.510
So we'll say that this breakpoint
should fire when the current

00:41:00.510 --> 00:41:02.900
progress is greater than 0.95.

00:41:02.920 --> 00:41:05.690
So now you'll note that
when I click continue,

00:41:05.690 --> 00:41:09.200
the game should continue to run.

00:41:10.630 --> 00:41:13.900
Three Rs, two As, one O.

00:41:13.900 --> 00:41:15.320
Thank you.

00:41:15.320 --> 00:41:17.470
See,
help from the audience is a good thing.

00:41:17.470 --> 00:41:20.400
And so now we can actually go
and continue to play our game.

00:41:20.400 --> 00:41:25.420
We can start to pick words.

00:41:25.420 --> 00:41:26.980
Come on, guys,
you need to help me out here.

00:41:26.980 --> 00:41:26.980
I'm never going to beat Todd this way.

00:41:27.280 --> 00:41:29.110
said.

00:41:29.210 --> 00:41:33.710
So now-- I want good help, come on.

00:41:34.000 --> 00:41:36.700
But now you know that as we get
to the end of our game here,

00:41:36.700 --> 00:41:39.630
just about the time the hourglass
is going to get to the bottom,

00:41:39.670 --> 00:41:41.020
we hit our break point.

00:41:41.030 --> 00:41:44.640
Now, OK, 3 is certainly not going
to beat Todd's score here.

00:41:44.640 --> 00:41:46.980
What we can do, though,
is go and inspect the value.

00:41:47.000 --> 00:41:48.030
And yep, here it is.

00:41:48.190 --> 00:41:51.580
Current progress is greater than 0.95.

00:41:51.610 --> 00:41:55.480
But if I change that value
in the tool tip to 0,

00:41:55.520 --> 00:41:59.650
and I continue, you'll note that the
hourglass is now back up to 0.

00:41:59.700 --> 00:42:06.900
And we can start continuing on to pick
some more words and to try and beat Todd.

00:42:06.900 --> 00:42:10.560
OK, yeah, yeah, we can beat Todd,
we know.

00:42:10.650 --> 00:42:14.520
So you can see it's very easy to set up
debugging and work with the simulator

00:42:14.520 --> 00:42:18.340
to rapidly work with your application
and to test out your interface.

00:42:18.340 --> 00:42:20.220
But I can tell you from
personal experience,

00:42:20.280 --> 00:42:22.000
running the simulator is great.

00:42:22.080 --> 00:42:24.840
But running it on an iPhone is amazing.

00:42:24.840 --> 00:42:27.410
There's something really,
really special about having your app

00:42:27.830 --> 00:42:29.400
running in the palm of your hand.

00:42:29.480 --> 00:42:32.790
And the tools make it really,
really easy to do that.

00:42:32.940 --> 00:42:36.650
I'm going to quit the application in
the simulator here for just a second,

00:42:36.650 --> 00:42:40.030
and we're going to go back to the
overview pop-up and pick device.

00:42:40.030 --> 00:42:42.390
So we'll pick this and
click build and go.

00:42:42.400 --> 00:42:45.720
So just like that,
we are now going to bring

00:42:46.130 --> 00:42:49.040
up two displays here,
and I have this iPhone

00:42:49.040 --> 00:42:49.920
connected to this machine.

00:42:49.920 --> 00:42:52.370
So Xcode is now building
this application,

00:42:52.750 --> 00:42:56.730
signing it,
transmitting it over to the device.

00:42:56.920 --> 00:42:58.870
It's installing it.

00:42:58.930 --> 00:43:01.860
It's going to run it,
then set up some debugging services

00:43:01.960 --> 00:43:04.290
and connect Xcode to my running app.

00:43:04.440 --> 00:43:05.940
And so here we go.

00:43:05.940 --> 00:43:08.860
Here's baffle touch on the device.

00:43:09.230 --> 00:43:10.850
So we'll click New.

00:43:10.880 --> 00:43:12.600
Of course,
you want to put in great features.

00:43:12.600 --> 00:43:14.560
So to shake, what would you do?

00:43:14.560 --> 00:43:16.440
Shake the device.

00:43:16.510 --> 00:43:18.040
And so there, the device starts up.

00:43:18.280 --> 00:43:19.760
And now we can start playing the game.

00:43:19.760 --> 00:43:24.510
So we can get great words like the, set,
net.

00:43:24.630 --> 00:43:27.140
So you can start to test
how your interface functions

00:43:27.140 --> 00:43:29.510
responding to touch events.

00:43:29.760 --> 00:43:31.600
and the rest of the team.

00:44:00.190 --> 00:44:02.200
- And set a break point here.

00:44:02.200 --> 00:44:03.980
I know, you can see where this is going.

00:44:04.080 --> 00:44:08.440
So we'll hover over the
score here and let's see.

00:44:08.440 --> 00:44:11.640
Size of audience, lights,
performing in front of audience.

00:44:11.640 --> 00:44:14.590
237.

00:44:14.710 --> 00:44:17.420
So now you watch on the right
hand side as we continue.

00:44:17.430 --> 00:44:21.820
Our game ends and there's
our high score of 237.

00:44:28.200 --> 00:44:30.590
So albeit that this demonstration
is somewhat whimsical,

00:44:30.600 --> 00:44:32.760
there's a very,
very important takeaway here,

00:44:32.790 --> 00:44:34.460
which is in a very few
short number of minutes,

00:44:34.560 --> 00:44:37.560
I took some source code I already
had from a previous project,

00:44:37.610 --> 00:44:40.740
created an iPhone project,
put together an interface,

00:44:40.790 --> 00:44:44.010
connected it up to the
underlying source code,

00:44:44.060 --> 00:44:47.060
I tested it in the simulator,
set up some debugging,

00:44:47.200 --> 00:44:50.290
deployed it to the phone,
and then also interacted live

00:44:50.290 --> 00:44:53.710
with it on the phone to get and
set different values without ever

00:44:53.710 --> 00:44:55.600
leaving my source code editor.

00:44:55.640 --> 00:44:58.790
And it's that kind of power of allowing
the tools to focus on the process

00:44:59.150 --> 00:45:02.310
and allowing you guys to focus on the
product that makes the solution really,

00:45:02.310 --> 00:45:03.740
really great.

00:45:04.900 --> 00:45:07.760
But wait, there's more.

00:45:07.880 --> 00:45:13.100
If we go back to our tools for a moment,
in addition to using the

00:45:13.100 --> 00:45:16.550
debugger with the iPhone,
we can also use some additional

00:45:16.660 --> 00:45:18.340
tools to get some information.

00:45:18.340 --> 00:45:22.440
So I'm going to go up under the window
menu and pull down the organizer.

00:45:22.440 --> 00:45:25.420
Now, the organizer is the window
and the element of Xcode that

00:45:25.500 --> 00:45:29.140
provides you access to the device
that's connected to this machine.

00:45:29.140 --> 00:45:32.030
We can see I have the device
here selected on the left,

00:45:32.140 --> 00:45:35.060
and the summary tab shows
me some basic information.

00:45:35.160 --> 00:45:37.810
Serial number, name of the unit,
stuff like that.

00:45:37.950 --> 00:45:39.290
Also down here,
we can see the application

00:45:39.290 --> 00:45:39.970
I've installed.

00:45:39.970 --> 00:45:42.340
There's baffle touch already installed.

00:45:42.340 --> 00:45:45.140
Across the top are some tabs
that provide useful features.

00:45:45.170 --> 00:45:47.660
For example, here's console,
which is analogous to the

00:45:47.660 --> 00:45:49.230
system console on Mac OS X.

00:45:49.260 --> 00:45:52.040
We can see any output
that we might need there.

00:45:52.090 --> 00:45:55.330
Crash logs, not that these ever happen,
would appear here if you

00:45:55.410 --> 00:45:56.980
wanted to take a look at them.

00:45:57.000 --> 00:45:58.900
But the fourth tab over
here is screenshot.

00:45:58.940 --> 00:46:01.360
And screenshot is a really,
really great feature that

00:46:01.390 --> 00:46:02.940
allows you to do exactly that.

00:46:02.940 --> 00:46:07.430
Take a screenshot of what's ever running
on your phone at any moment in time.

00:46:07.600 --> 00:46:11.270
So this is great for documentation,
adding stuff to user guides,

00:46:11.270 --> 00:46:14.110
taking screenshots of pictures
to show to QA or engineering

00:46:14.170 --> 00:46:15.410
when stuff's not going right.

00:46:15.500 --> 00:46:20.370
In this case, I can click capture,
and I can preserve in perpetuity my

00:46:20.400 --> 00:46:23.440
wonderful score for this particular game.

00:46:23.440 --> 00:46:26.360
And even better,
I can click the save as default

00:46:26.360 --> 00:46:28.730
image and select my current image.

00:46:28.800 --> 00:46:29.740
So I can save my current project.

00:46:29.850 --> 00:46:32.130
And you'll see that Xcode
automatically adds it to my project

00:46:32.260 --> 00:46:35.370
and sets that as the default image
for my application on startup.

00:46:35.650 --> 00:46:38.430
So now every time
Todd runs this application,

00:46:38.550 --> 00:46:40.380
he will know who's the best.

00:46:41.970 --> 00:46:44.020
So let's go back to the
organizer for a second.

00:46:44.150 --> 00:46:46.800
And I mentioned before there's
the application section

00:46:46.800 --> 00:46:48.480
down here at the bottom.

00:46:48.480 --> 00:46:51.880
If I expand the application,
we can see that there's an element

00:46:51.880 --> 00:46:53.760
beneath it called application data.

00:46:53.760 --> 00:46:56.460
Now because we're deploying
our application to the device,

00:46:56.460 --> 00:46:58.180
it means it's kind of at arm's length.

00:46:58.190 --> 00:47:01.140
And for things like output and stuff,
you may have your application

00:47:01.140 --> 00:47:03.280
generate while it's on the phone.

00:47:03.280 --> 00:47:05.750
Those are really important
elements for your debugging.

00:47:05.770 --> 00:47:08.100
And Xcode allows you
to get access to those.

00:47:08.170 --> 00:47:13.200
So I can select this item here,
and we'll call this baffle-content.

00:47:13.200 --> 00:47:16.190
And Xcode is going to
download that content from the

00:47:16.960 --> 00:47:18.060
iPhone onto my desktop here.

00:47:18.060 --> 00:47:20.410
We also handily put it in the organizer.

00:47:20.450 --> 00:47:22.860
And if I expand this,
we can see here's my documents,

00:47:22.860 --> 00:47:24.370
and here's the game history file.

00:47:24.380 --> 00:47:26.710
So this is the history that's
been generated by the game

00:47:26.780 --> 00:47:28.920
as we're playing all along.

00:47:28.920 --> 00:47:32.540
Now you may actually note the
scroller for this is pretty small.

00:47:32.580 --> 00:47:35.340
This file is actually pretty big,
and it looks like we're

00:47:35.350 --> 00:47:36.980
logging a lot of stuff.

00:47:36.980 --> 00:47:39.360
And on the iPhone,
this may be causing a performance

00:47:39.500 --> 00:47:40.480
problem while I'm running my app.

00:47:40.500 --> 00:47:41.500
map.

00:47:41.630 --> 00:47:44.420
Let's figure out if it is
by running instruments.

00:47:44.630 --> 00:47:46.320
So I will quit the running app.

00:47:46.410 --> 00:47:49.840
I'll go under the Run menu and
select Start with Performance Tool.

00:47:49.940 --> 00:47:52.740
And this time,
I'm going to pick System Usage.

00:47:52.820 --> 00:47:55.270
So by selecting this,
Instruments will come up on my Mac here,

00:47:55.390 --> 00:47:58.830
and it's going to launch my
application on the iPhone.

00:47:59.270 --> 00:48:01.850
Now I'm just going to play this for you,
and I'm not going to worry about

00:48:01.930 --> 00:48:03.080
beating Todd's score anymore.

00:48:03.300 --> 00:48:04.880
I'm just going to start selecting words.

00:48:04.940 --> 00:48:07.920
But if you watch the track view
at the very top of the screen,

00:48:07.990 --> 00:48:10.080
you'll note that as I select
different words here,

00:48:10.130 --> 00:48:12.120
you'll start to see
different kinds of output.

00:48:12.170 --> 00:48:14.280
And this is outputs that
Instruments is checking and

00:48:14.280 --> 00:48:18.410
recording while my application
is running here on the device.

00:48:18.520 --> 00:48:20.670
So as I pick here,
pick some more and more words,

00:48:20.700 --> 00:48:22.680
that should be enough for now.

00:48:22.860 --> 00:48:23.730
We can stop this.

00:48:23.840 --> 00:48:25.690
And you may be sitting
there in the back going,

00:48:25.810 --> 00:48:28.380
yeah, that doesn't look like
that's all that much.

00:48:28.430 --> 00:48:33.160
Well, what we can do is give ourselves a
little more real estate and expand this.

00:48:33.160 --> 00:48:35.700
And you can start to see that
although the peaks aren't as high

00:48:35.700 --> 00:48:38.420
as you might expect for a really,
really bad problem,

00:48:38.570 --> 00:48:40.220
the trough is actually pretty wide.

00:48:40.220 --> 00:48:43.340
And there's actually a lot
of reads and writes going on.

00:48:43.470 --> 00:48:47.100
I can scrub through, just like Todd did,
and pick any particular event.

00:48:47.160 --> 00:48:49.300
And we see down here at the bottom,
for those who are close enough,

00:48:49.470 --> 00:48:50.780
there's a lot of opens and closes.

00:48:50.820 --> 00:48:53.910
It looks like we're actually opening
and closing the log file every time

00:48:53.910 --> 00:48:56.730
rather than opening and appending to it.

00:48:56.820 --> 00:48:58.340
I can expose my stack frame view.

00:48:58.340 --> 00:49:01.240
I can go back to my view
here and look at it.

00:49:01.240 --> 00:49:03.790
And sure enough, I can pick an element.

00:49:03.800 --> 00:49:05.270
And we see, yep, here it is.

00:49:05.300 --> 00:49:08.780
We are logging to the file, in fact,
quite a bit in this method.

00:49:08.780 --> 00:49:12.310
So the solution here would probably be to
make this a debug flag or turn down the

00:49:12.310 --> 00:49:14.600
logging until we know we have a problem.

00:49:14.600 --> 00:49:17.000
But just like that,
all the same techniques that Todd used

00:49:17.070 --> 00:49:19.660
for building a Cocoa application,
you guys can use for building

00:49:19.770 --> 00:49:20.900
an iPhone application.

00:49:20.900 --> 00:49:24.080
And whether you test it in the
simulator or you test it on an iPhone,

00:49:24.080 --> 00:49:25.700
I bet you'll have fun doing it.

00:49:34.930 --> 00:49:38.060
Thank you, Matt.

00:49:38.140 --> 00:49:41.770
So what you saw in this demo is that
developing a Cocoa Touch application

00:49:41.770 --> 00:49:45.220
for the iPhone is just like developing
a Cocoa application for the Mac.

00:49:45.390 --> 00:49:49.770
Use the same tools, the same workflows,
the same concepts and paradigms.

00:49:49.830 --> 00:49:54.090
And often, you can even share code
between applications.

00:49:54.750 --> 00:49:57.330
Now we have added one tool
that is specific to the iPhone,

00:49:57.330 --> 00:49:59.380
and that's the iPhone Simulator.

00:49:59.450 --> 00:50:03.120
The iPhone Simulator runs
natively on your Mac.

00:50:03.260 --> 00:50:08.540
It is an application that runs the iPhone
OS frameworks compiled for your Mac.

00:50:08.680 --> 00:50:12.200
So it is not an emulator,
but it is a Mac-specific,

00:50:12.260 --> 00:50:15.060
fast implementation of the
Cocoa Touch frameworks that give

00:50:15.060 --> 00:50:19.020
you access to the same APIs that
you have available on the device.

00:50:19.090 --> 00:50:21.530
It makes it a very convenient
testing and debugging tool,

00:50:21.880 --> 00:50:24.450
with very fast turnaround times.

00:50:25.000 --> 00:50:29.530
Now, while the iPhone simulator is a huge
convenience and a great time saver,

00:50:29.600 --> 00:50:34.370
we've also made it as easy to run your
applications natively on the iPhone,

00:50:34.400 --> 00:50:37.240
so that you can experience
them on the touchscreen,

00:50:37.240 --> 00:50:40.960
and so that you can study
performance in a real-world scenario.

00:50:42.740 --> 00:50:44.900
The Mac and the iPhone
really have a lot in common.

00:50:44.900 --> 00:50:47.110
In fact,
if you bring up this diagram that we

00:50:47.110 --> 00:50:50.820
had on the slides a few minutes ago,
then we will see that much of the

00:50:50.820 --> 00:50:53.330
software stack is actually the same.

00:50:53.380 --> 00:50:54.550
The tools are the same.

00:50:54.680 --> 00:50:58.320
Many of the underlying frameworks
in both OSs are the same.

00:50:58.380 --> 00:51:00.640
The programming languages are the same.

00:51:00.640 --> 00:51:03.750
Pretty much the entire
programming model is the same.

00:51:04.290 --> 00:51:06.960
The one thing that's different
is the hardware underneath.

00:51:06.980 --> 00:51:08.660
And that, of course,
has some implications for

00:51:08.660 --> 00:51:09.780
you that I'd like to go over.

00:51:09.800 --> 00:51:13.020
Let me start out by pointing
out a few capabilities that

00:51:13.250 --> 00:51:15.110
are specific to the iPhone.

00:51:15.120 --> 00:51:17.240
The iPhone is always connected.

00:51:17.240 --> 00:51:19.470
It's always live in the Internet.

00:51:19.480 --> 00:51:21.880
It's also location-aware.

00:51:21.880 --> 00:51:25.710
And it has a few sensors that
a Mac doesn't necessarily have.

00:51:25.820 --> 00:51:28.840
It has an accelerometer,
and it's guaranteed to have a camera.

00:51:29.720 --> 00:51:33.090
So new capabilities always means
new opportunities for you guys to

00:51:33.180 --> 00:51:34.590
come up with new creative ideas.

00:51:34.700 --> 00:51:37.500
And we are very much looking
forward to seeing your applications.

00:51:39.660 --> 00:51:42.100
Of course,
the iPhone also has a touchscreen

00:51:42.290 --> 00:51:44.100
and a very small form factor.

00:51:44.240 --> 00:51:46.820
That's something that you
need to design for explicitly.

00:51:46.980 --> 00:51:51.480
You need to design user interfaces
that use few controls at a time,

00:51:51.480 --> 00:51:54.940
and that are easily operated by
a human finger instead of the

00:51:54.990 --> 00:51:56.840
precise tip of a mouse pointer.

00:51:57.010 --> 00:52:02.510
You will also want to consider
supporting two form factors for the two

00:52:02.510 --> 00:52:02.510
different rotation angles of the iPhone.

00:52:04.970 --> 00:52:07.050
Now the iPhone is really
a very compact device.

00:52:07.050 --> 00:52:09.000
It is designed to fit in your pocket.

00:52:09.030 --> 00:52:11.340
And in fact,
if you hold it side by side with a Mac,

00:52:11.500 --> 00:52:14.720
you will find that an iPhone is
smaller than some of the graphics

00:52:14.770 --> 00:52:17.020
cards you can put in a Mac nowadays.

00:52:17.080 --> 00:52:21.710
So while the iPhone is an exceptionally
powerful device for a small mobile phone,

00:52:21.710 --> 00:52:24.080
a Mac clearly has more power to burn.

00:52:24.170 --> 00:52:26.200
And what that means for you is
that you need to become good

00:52:26.320 --> 00:52:27.910
friends with instruments and shark.

00:52:27.910 --> 00:52:32.170
It is very important that you spend a
lot of time tuning your applications.

00:52:32.180 --> 00:52:35.080
You need to monitor your CPU usage,
your memory usage.

00:52:35.120 --> 00:52:37.870
You need to make sure you don't
use up too much storage space.

00:52:37.870 --> 00:52:42.230
And also very important on the iPhone,
you need to monitor power consumption.

00:52:42.390 --> 00:52:45.980
You don't want to burn through the
battery life of your users too quickly.

00:52:47.390 --> 00:52:50.280
Now there's one more aspect that's
going to impact development,

00:52:50.280 --> 00:52:52.100
and that is security.

00:52:52.160 --> 00:52:54.700
So that malicious,
anonymous malicious software

00:52:54.830 --> 00:52:56.140
can't run on the iPhone.

00:52:56.140 --> 00:52:59.870
The iPhone OS will require every
application to be code signed,

00:53:00.090 --> 00:53:03.740
and that's why we created
the iPhone Developer Program.

00:53:04.980 --> 00:53:07.300
In addition to the actual tools,
you need two more things from

00:53:07.300 --> 00:53:11.140
Apple before you can start
developing natively for the iPhone.

00:53:11.240 --> 00:53:14.870
One is a signing certificate,
which will clearly identify you as

00:53:14.870 --> 00:53:17.140
the author of your own applications.

00:53:17.220 --> 00:53:19.310
The other one is what we
call a provisioning profile,

00:53:19.350 --> 00:53:22.990
which you will install on your
iPhones with the help of Xcode.

00:53:23.080 --> 00:53:26.560
The provisioning profile authorizes
you to run pre-release versions

00:53:26.750 --> 00:53:31.260
of your applications on your
own devices during development.

00:53:35.780 --> 00:53:37.810
So let's look at that
in a little more detail.

00:53:37.840 --> 00:53:39.790
Let's take a look behind the scenes.

00:53:40.070 --> 00:53:43.300
And a good way to do that is to
actually take a look at the actions

00:53:43.300 --> 00:53:48.110
and events that take place when you
press the Build and Go button in Xcode.

00:53:48.340 --> 00:53:51.770
So as the name kind of implies,
there are two parts to this action.

00:53:51.800 --> 00:53:54.580
The first part,
Xcode will build your project,

00:53:54.580 --> 00:53:57.860
will compile all your sources,
and will build your application bundle.

00:53:57.940 --> 00:54:00.420
The second part,
it will ask the OS to launch

00:54:00.420 --> 00:54:01.900
your application for you.

00:54:01.930 --> 00:54:03.940
And if you would be
developing a Mac application,

00:54:03.960 --> 00:54:06.090
that's really all there is to it.

00:54:06.340 --> 00:54:08.710
But if you develop an application
for the iPhone and you want to

00:54:08.710 --> 00:54:11.770
run it natively on the iPhone,
well, then you pretty much have to start

00:54:11.770 --> 00:54:13.950
your application on a remote computer.

00:54:14.040 --> 00:54:16.590
There are also these security
considerations I just mentioned.

00:54:16.620 --> 00:54:18.950
So when we launch an
application on the iPhone,

00:54:19.040 --> 00:54:21.430
there are a few steps in between.

00:54:21.600 --> 00:54:24.840
And while the tools conveniently
hide all these steps for you

00:54:24.860 --> 00:54:27.660
and make it very easy for you,
it's still important to

00:54:27.660 --> 00:54:29.460
understand what's going on.

00:54:29.560 --> 00:54:32.390
So let's say we open a project
in Xcode and we build it.

00:54:32.390 --> 00:54:37.490
Then Xcode will create your
application bundle locally on your Mac.

00:54:37.940 --> 00:54:40.130
And at the end of the build process,
it will immediately

00:54:40.340 --> 00:54:41.810
sign your application.

00:54:41.940 --> 00:54:45.160
For that, it will take a look in your
key chain and find the signing

00:54:45.160 --> 00:54:46.960
certificate that we provided you with.

00:54:47.060 --> 00:54:52.090
And it will use that certificate to apply
your signature to the application bundle.

00:54:52.430 --> 00:54:56.070
And then Xcode will find
your device on the USB bus.

00:54:57.780 --> 00:55:01.620
Now the iPhone is the home of
a very important kind of guy.

00:55:01.710 --> 00:55:03.690
And for the purposes
of this presentation,

00:55:03.740 --> 00:55:04.990
we call him the bouncer.

00:55:05.390 --> 00:55:08.190
So the role of the bouncer is
to watch over security and make

00:55:08.240 --> 00:55:11.300
sure that nothing goes wrong
during the installation process.

00:55:11.390 --> 00:55:13.520
So what will happen is that
Xcode will knock on the door of

00:55:13.610 --> 00:55:15.300
the bouncer in a friendly way.

00:55:15.300 --> 00:55:17.300
It will ask it for some
help with the heavy lifting,

00:55:17.300 --> 00:55:21.450
which is to copy the application
over from your Mac to the iPhone,

00:55:21.460 --> 00:55:25.260
just like iTunes would upload
a song over the USB cable.

00:55:25.950 --> 00:55:27.900
And the bouncer will then do
what every good bouncer does,

00:55:27.900 --> 00:55:29.780
which is check your ID.

00:55:29.870 --> 00:55:33.090
So it will compare your application
signature with what's specified

00:55:33.090 --> 00:55:35.970
in the provisioning profile that
you installed on your phone.

00:55:36.080 --> 00:55:38.850
And assuming that it matches,
the bouncer will let

00:55:38.850 --> 00:55:39.970
the application come in.

00:55:40.000 --> 00:55:42.600
It will allow the
installation to proceed.

00:55:42.980 --> 00:55:45.660
Now he's a smart kind of guy,
and he knows if your application

00:55:45.660 --> 00:55:48.400
has been run on your device before.

00:55:48.440 --> 00:55:50.270
If it has,
it would be so kind to preserve

00:55:50.350 --> 00:55:52.030
the application's user data.

00:55:52.150 --> 00:55:55.810
So while uploading an application,
we will preserve the user

00:55:55.810 --> 00:55:57.490
state of a previous run.

00:55:58.300 --> 00:56:00.370
And then Xcode will ask the
bouncer for one more favor,

00:56:00.380 --> 00:56:03.530
which is to launch a bunch of
device-side services that Xcode

00:56:03.530 --> 00:56:05.840
needs to control your application.

00:56:05.930 --> 00:56:07.660
And once that's done,
you fortunately don't have to

00:56:07.660 --> 00:56:10.680
talk to the bouncer anymore,
but Xcode can launch your application

00:56:10.680 --> 00:56:12.910
and it can attach to the bugger.

00:56:15.750 --> 00:56:19.490
So by launching an application
on a remote secure device,

00:56:19.590 --> 00:56:21.300
it's relatively involved.

00:56:21.520 --> 00:56:23.810
The tools that we ship
make it very easy for use.

00:56:23.920 --> 00:56:27.200
That for you, it's just build and go,
just like you saw in the

00:56:27.250 --> 00:56:28.910
demo that Matt gave you.

00:56:30.550 --> 00:56:31.650
So that's the iPhone SDK.

00:56:31.860 --> 00:56:34.300
It contains everything that
you need to develop great

00:56:34.340 --> 00:56:36.360
applications for your iPhones.

00:56:36.410 --> 00:56:39.300
But there's one thing that
we haven't talked about yet,

00:56:39.310 --> 00:56:41.120
and that is the web.

00:56:41.510 --> 00:56:44.200
So while the iPhone SDK clearly
is the best way to get the

00:56:44.200 --> 00:56:46.960
most out of your iPhones,
we do realize that sometimes

00:56:47.030 --> 00:56:49.760
it makes sense for you to
develop a web application.

00:56:49.780 --> 00:56:51.800
Web applications have a few advantages.

00:56:51.800 --> 00:56:53.850
Among other things,
they don't have any client-side

00:56:53.970 --> 00:56:55.240
installation requirements.

00:56:55.260 --> 00:56:59.380
They also make it very easy to hook
into back-end enterprise servers.

00:56:59.420 --> 00:57:03.050
And so we wanted to support creation
of web applications as well.

00:57:03.400 --> 00:57:06.420
And that's why we extended Xcode,
so that you can not only develop

00:57:06.520 --> 00:57:09.730
widgets that run on Mac S10,
but also full-featured web

00:57:09.740 --> 00:57:13.170
applications that run directly
in Safari on your iPhone.

00:57:13.180 --> 00:57:14.640
Let's show you that, too.

00:57:14.640 --> 00:57:17.460
For our last demo for today,
I'd like to ask Max Drukman to come

00:57:17.460 --> 00:57:20.520
up on stage and show you how to
build an iPhone web application.

00:57:27.330 --> 00:57:27.910
Thank you, Andreas.

00:57:28.090 --> 00:57:29.560
Good afternoon, everybody.

00:57:29.660 --> 00:57:34.200
Now, can we switch the demo machine,
please?

00:57:34.200 --> 00:57:39.720
Before I get started with my demo,
I want to answer a question that's been

00:57:39.720 --> 00:57:44.200
on a lot of people's minds these days,
and that is, who's that guy?

00:57:44.570 --> 00:57:49.590
That, my friends,
is WWDC superstar Dave Payne.

00:57:49.790 --> 00:57:50.950
Yeah, that's right.

00:57:51.190 --> 00:57:51.630
Let it out.

00:57:51.700 --> 00:57:57.760
Now, Dave Payne knows everything
there is to know about WWDC.

00:57:57.860 --> 00:57:59.690
He practically invented it.

00:57:59.700 --> 00:58:03.920
In fact, when I find myself towards
the end of a session,

00:58:03.920 --> 00:58:08.060
like now-ish, wondering which session
I'm going to go to next,

00:58:08.220 --> 00:58:10.730
and I'm confused by
all the great choices,

00:58:10.730 --> 00:58:13.710
I stop and I ask myself,
where would Dave go?

00:58:13.710 --> 00:58:16.460
And that helps me make my decision.

00:58:17.100 --> 00:58:19.460
Now, I need a little bit more than that,
though.

00:58:19.460 --> 00:58:21.500
I need to know what's next.

00:58:21.500 --> 00:58:30.600
So I thought I'd create a dashcode
iPhone web app to show me exactly that,

00:58:30.980 --> 00:58:32.960
what's next.

00:58:32.960 --> 00:58:32.960
Let's have a look at it.

00:58:33.790 --> 00:58:38.410
So now as Andreas mentioned,
Dash Code 2 now does for iPhone web

00:58:38.410 --> 00:58:40.930
apps what it's always done for widgets.

00:58:41.040 --> 00:58:43.640
In other words,
make them fun and easy to build.

00:58:43.790 --> 00:58:48.910
So in addition to all of the
widget templates you expect,

00:58:49.040 --> 00:58:52.160
we now have web application
templates as well.

00:58:52.230 --> 00:58:56.670
I'm going to choose the browser
template and create a new project.

00:58:56.860 --> 00:58:58.920
Now,
one of the great things about Dashcode

00:58:58.990 --> 00:59:01.210
templates is that they come ready to run.

00:59:01.240 --> 00:59:03.160
That means you can put
them through their paces,

00:59:03.160 --> 00:59:06.970
see how they look, feel,
and behave before you customize them.

00:59:07.130 --> 00:59:08.560
And that's exactly what I'm going to do.

00:59:08.560 --> 00:59:10.740
This is probably going to
start looking familiar,

00:59:10.740 --> 00:59:13.470
but I'm going to hit the Run button,
and up comes, of course,

00:59:13.500 --> 00:59:14.640
the iPhone simulator.

00:59:14.640 --> 00:59:17.340
Now, in this case,
we're running in the Safari browser,

00:59:17.340 --> 00:59:22.610
and you'll see we have a single
list browser that is U.S.

00:59:22.610 --> 00:59:24.790
National Parks.

00:59:25.450 --> 00:59:26.550
Each row is one park.

00:59:26.640 --> 00:59:30.570
If I click on one of the rows,
the browser navigates

00:59:30.570 --> 00:59:32.600
down to a detail level.

00:59:32.600 --> 00:59:33.660
That's pretty simple.

00:59:33.660 --> 00:59:34.820
It's the basics of a browser.

00:59:34.820 --> 00:59:37.180
There's a Back button to take me back.

00:59:37.260 --> 00:59:38.690
That's pretty much it.

00:59:38.960 --> 00:59:42.040
And that's great,
because that's exactly what I want

00:59:42.110 --> 00:59:43.980
to start with for my web app.

00:59:45.360 --> 00:59:47.940
I'm going to close the
iPhone simulator now.

00:59:48.070 --> 00:59:50.300
And before I delve in,
I just want to orient you

00:59:50.300 --> 00:59:51.340
to the Dashcode interface.

00:59:51.340 --> 00:59:52.840
It's pretty simple.

00:59:53.010 --> 00:59:55.980
Right up here, front and center,
is the canvas where you lay out the

00:59:55.980 --> 00:59:58.040
user interface of your projects.

00:59:58.190 --> 01:00:00.740
To the left of the
canvas is the Navigator,

01:00:00.860 --> 01:00:03.120
which allows you access to
the hierarchy of objects,

01:00:03.250 --> 01:00:07.420
or the DOM in web parlance,
of your project.

01:00:07.550 --> 01:00:10.420
And there are some important
editing contexts there as well.

01:00:10.560 --> 01:00:13.600
Immediately below the Navigator
is the Workflow Steps view.

01:00:13.740 --> 01:00:16.770
Now, the Workflow Steps view
provides you template-specific

01:00:16.830 --> 01:00:18.160
workflow guidance and help.

01:00:18.280 --> 01:00:19.600
It's built right into Dashcode.

01:00:19.600 --> 01:00:21.540
It's really useful.

01:00:21.690 --> 01:00:24.480
But you've got me today,
so I'm going to close it.

01:00:24.620 --> 01:00:26.440
We're not going to need it.

01:00:26.590 --> 01:00:29.620
So now,
if you remember when we ran my project,

01:00:29.770 --> 01:00:34.880
each row of our list was a national park.

01:00:35.040 --> 01:00:39.880
When I'm done with it, though,
I want each row to be a WWDC session

01:00:40.420 --> 01:00:43.590
so that I can make my choice
about exactly where Dave's going.

01:00:43.600 --> 01:00:47.920
So,
session title names get a little long.

01:00:48.040 --> 01:00:51.100
So the first thing I want to do is
just start working with this list,

01:00:51.160 --> 01:00:56.470
and I'm going to make sure that each
row can display two lines of text.

01:00:56.590 --> 01:01:00.720
So I'm going to just grab it in
the canvas and start moving around.

01:01:00.890 --> 01:01:04.660
So you'll notice now that as
I edit the one in the top row,

01:01:04.700 --> 01:01:06.880
all of the other rows are changing, too.

01:01:06.920 --> 01:01:09.200
That's because the top row
is acting as a template,

01:01:09.240 --> 01:01:13.600
and any design changes I make to the top
row will be reflected in the other rows.

01:01:14.680 --> 01:01:17.450
Now, I'm also going to change the
type around a little bit by

01:01:17.450 --> 01:01:19.510
bringing up the inspector.

01:01:19.650 --> 01:01:21.890
I'm going to make the
text a little bit smaller,

01:01:22.080 --> 01:01:23.530
16 pixels seems good.

01:01:23.840 --> 01:01:25.930
And because it's two lines,
I want to make sure that

01:01:25.930 --> 01:01:26.930
text wrapping is on.

01:01:26.940 --> 01:01:28.970
There, I'm pretty much good to go.

01:01:29.020 --> 01:01:32.780
Now, you'll notice I left myself some
space to the left of that text,

01:01:32.780 --> 01:01:35.260
and that's because I want to add an icon.

01:01:35.260 --> 01:01:40.350
Every session here at WWDC has a track,
and I want to use an

01:01:40.350 --> 01:01:42.540
icon to portray that.

01:01:42.840 --> 01:01:45.600
So I have an icon right here.

01:01:45.840 --> 01:01:48.890
This represents the
Mac-specific sessions.

01:01:49.110 --> 01:01:51.940
Now, again,
I dragged it into the top row,

01:01:51.940 --> 01:01:53.840
and it's reflected in all the others.

01:01:53.850 --> 01:01:57.440
Now,
I've also just dragged in a static image.

01:01:57.520 --> 01:02:02.080
If I don't do anything in code with that,
it's going to display a Mac icon

01:02:02.080 --> 01:02:05.080
next to every row in the list,
but my code's going to

01:02:05.080 --> 01:02:08.350
know where to find it,
so it can change it out for the

01:02:08.350 --> 01:02:10.400
exact right icon when I run.

01:02:10.560 --> 01:02:12.920
So I'm pretty much done with this level.

01:02:12.920 --> 01:02:15.600
Let me have a look at the detail level.

01:02:15.660 --> 01:02:17.080
So we saw this running again.

01:02:17.080 --> 01:02:17.880
It's pretty simple.

01:02:17.880 --> 01:02:20.280
There's title, location, and description.

01:02:20.280 --> 01:02:22.500
That's exactly what
I need for my project.

01:02:22.560 --> 01:02:24.840
But I want to highlight
the location a little bit.

01:02:24.850 --> 01:02:26.580
Because remember,
we're trying to figure out

01:02:26.690 --> 01:02:28.820
where to go here at WWDC.

01:02:28.820 --> 01:02:32.440
And it's very important to know
exactly where Dave's going.

01:02:32.490 --> 01:02:36.920
So I'm going to highlight that
location by adding another element.

01:02:36.920 --> 01:02:39.880
I'm going to do that by
bringing up the library.

01:02:39.880 --> 01:02:40.710
And

01:02:42.530 --> 01:02:45.800
Finding a rounded box.

01:02:45.810 --> 01:02:48.570
And I'm simply going to add it
to this level and position it.

01:02:48.750 --> 01:02:52.060
Dashcode gives me guidelines to
put it exactly where I want it.

01:02:52.340 --> 01:02:55.550
And now what I want to do
is grab this location type,

01:02:55.550 --> 01:02:57.570
and I want to put it in the box.

01:02:57.570 --> 01:03:00.770
And I can do that simply by
dragging it in the navigator.

01:03:00.770 --> 01:03:02.530
And now I've reparented it.

01:03:02.690 --> 01:03:05.490
So now whenever that box moves around,
the type's going to move with it.

01:03:05.490 --> 01:03:07.100
Pretty simple.

01:03:07.100 --> 01:03:10.900
Now I'll just style it exactly as I want,
make sure it's not right

01:03:10.940 --> 01:03:12.380
up against the edge.

01:03:12.400 --> 01:03:15.480
And I don't know, I'll make it bold.

01:03:15.950 --> 01:03:17.820
So now it stands out a little bit better.

01:03:17.930 --> 01:03:20.900
So I've customized the two
levels that came with my browser,

01:03:21.090 --> 01:03:25.980
but now I want to go the extra
mile and add some more stuff.

01:03:26.840 --> 01:03:31.100
And the way I do that is
here in the stack layout.

01:03:31.230 --> 01:03:35.280
Now, the stack layout is a powerful new
part in Dashcode that allows you

01:03:35.280 --> 01:03:38.740
to have multiple views that you
can swap between with animations.

01:03:38.910 --> 01:03:42.470
So that's really the driver
of the browser that we saw

01:03:42.470 --> 01:03:44.610
working in the simulator.

01:03:45.460 --> 01:03:48.090
I'm going to go now to
the attributes inspector,

01:03:48.090 --> 01:03:51.400
and we see here are my
levels that already exist,

01:03:51.410 --> 01:03:52.340
list and detail.

01:03:52.410 --> 01:03:54.430
And I'm going to add two more.

01:03:54.560 --> 01:03:56.320
I want to add a home level.

01:03:56.400 --> 01:04:00.280
This will be the level that I see
when I first run my web application.

01:04:00.360 --> 01:04:07.120
And I want to add a map level,
because I have some Moscone Center floor

01:04:07.120 --> 01:04:12.720
maps that I want to be able to look
at so I can really track Dave down.

01:04:12.790 --> 01:04:16.010
Now,
next thing I'm going to do is simply drag

01:04:16.090 --> 01:04:18.800
the home level to the top of the list,
and that means it's first.

01:04:19.010 --> 01:04:21.820
As I said, I want it to be first,
and now I'm going to

01:04:21.820 --> 01:04:23.510
customize it a little bit.

01:04:23.770 --> 01:04:26.050
So in the home level,
I'm going to go to the

01:04:26.180 --> 01:04:29.600
Fill and Stroke Inspector now,
and I'm going to make it black

01:04:29.600 --> 01:04:32.240
so it's all kind of iPhone shiny.

01:04:32.280 --> 01:04:36.920
And now I'm going to add a graphic.

01:04:36.960 --> 01:04:39.790
After all, it's all about Dave.

01:04:41.080 --> 01:04:45.950
So I just position
Dave exactly where I want him.

01:04:46.370 --> 01:04:49.360
And while I'm here,
I guess I'll probably change

01:04:49.360 --> 01:04:50.270
the name of this browser.

01:04:50.470 --> 01:04:53.200
Browser's pretty descriptive,
but not very exciting.

01:04:53.200 --> 01:04:56.200
I'm going to call this Hey Dave.

01:04:56.200 --> 01:04:58.120
Now,
one last thing I want to do this level,

01:04:58.120 --> 01:05:01.760
I want to add a button,
because I want my iPhone web app

01:05:01.830 --> 01:05:05.310
to come up just like that and give
me a button that I can press on to

01:05:05.320 --> 01:05:07.200
see the list of the next sessions.

01:05:07.480 --> 01:05:10.330
That's easy enough to do by
going back to the library,

01:05:10.440 --> 01:05:13.200
and this time I'm going
to grab a push button.

01:05:14.650 --> 01:05:18.760
Now I can lay this out just like
I do any other element in Dashcode,

01:05:18.760 --> 01:05:21.400
and I'm going to change
the text here as well.

01:05:21.510 --> 01:05:24.130
I'm going to call this "Where To."

01:05:24.860 --> 01:05:26.400
So now I've got my button.

01:05:26.730 --> 01:05:28.520
It doesn't do anything
yet because I haven't told

01:05:28.520 --> 01:05:31.600
Dashcode what I want it to do,
but that's pretty easy to do too.

01:05:31.600 --> 01:05:34.760
I'm going to go now to
the Behaviors Inspector.

01:05:34.760 --> 01:05:40.010
Now in the Behaviors Inspector,
I can wire up JavaScript events that

01:05:40.010 --> 01:05:45.380
this object can listen to and create code
that will make it do what I want it to.

01:05:45.380 --> 01:05:48.230
In this case,
I'm going to give it a handler,

01:05:48.380 --> 01:05:51.900
go to list, because that's exactly
what I want it to do.

01:05:52.550 --> 01:05:54.950
Now when I hit return,
Dashcode is going to create that

01:05:54.950 --> 01:05:56.660
for me because it doesn't exist yet.

01:05:56.740 --> 01:06:00.200
And not only that,
it brings up the source code view,

01:06:00.200 --> 01:06:03.270
scrolls it down,
and shows me exactly where I need to

01:06:03.290 --> 01:06:05.680
start adding my code to make this work.

01:06:05.780 --> 01:06:08.500
Now, you don't want to watch me type.

01:06:08.500 --> 01:06:10.660
I don't want to type either.

01:06:10.660 --> 01:06:14.480
So I'm going to show off another
feature of the Dashcode library,

01:06:14.480 --> 01:06:16.100
and that is code snippets.

01:06:16.200 --> 01:06:19.860
Dashcode comes with dozens
and dozens of code snippets.

01:06:20.180 --> 01:06:24.420
And you can add little bits of
JavaScript that you can add to your

01:06:24.420 --> 01:06:26.970
projects to extend their functionality.

01:06:27.180 --> 01:06:29.500
Plus, you can save your own.

01:06:29.740 --> 01:06:33.550
I just happen to have one
right here called go to list,

01:06:33.750 --> 01:06:36.120
and that's the body of that function.

01:06:36.340 --> 01:06:40.090
Now, while I'm hearing the code,
I think I'll do a little bit more.

01:06:40.090 --> 01:06:41.000
Let's see.

01:06:41.000 --> 01:06:44.100
So I'm going to get rid of that
and maybe change this a little bit.

01:06:44.180 --> 01:06:47.410
And well, all right,
I'm going to get rid of all of it.

01:06:47.410 --> 01:06:52.160
Because I have a big old snippet
that I'll just drag in right there.

01:06:52.160 --> 01:06:55.640
Now, just because I swapped in all the
code doesn't mean that I didn't

01:06:55.640 --> 01:06:58.580
stay with the pattern that
the template brought with me.

01:06:58.580 --> 01:07:02.120
It's just going to take too long
for me to show you everything I did.

01:07:02.140 --> 01:07:07.090
One thing I do want to point out, though,
my very first function here,

01:07:07.090 --> 01:07:10.140
list controller,
for you Cocoa programmers,

01:07:10.300 --> 01:07:14.810
this might be familiar to you,
Dashcode is bringing the

01:07:14.810 --> 01:07:18.380
MVC code pattern to JavaScript.

01:07:18.390 --> 01:07:23.450
So we want to be able to get everybody
into the way of thinking that views

01:07:23.560 --> 01:07:26.500
have controllers just like in Cocoa.

01:07:27.910 --> 01:07:30.060
So now I'm getting
pretty darn close here.

01:07:30.270 --> 01:07:31.760
I've got my button.

01:07:31.790 --> 01:07:34.540
Now,
you'll remember I created a map level,

01:07:34.600 --> 01:07:36.660
but I don't have anything on there yet.

01:07:36.700 --> 01:07:38.640
I'm going to do just
like I did on the list.

01:07:38.640 --> 01:07:41.110
I'm going to drag in an image.

01:07:41.270 --> 01:07:44.920
Here's a Moscone floor map that
highlights the Haight-Ashbury room,

01:07:44.920 --> 01:07:46.470
which is downstairs, I believe.

01:07:46.470 --> 01:07:49.360
And again, it's a static image,
but my code is going to

01:07:49.390 --> 01:07:51.970
know where to find it,
and it'll swap it out.

01:07:52.250 --> 01:07:56.680
Now, the one thing I don't have yet
is a way to get to the map level.

01:07:56.680 --> 01:08:00.880
You'll remember that on the detail level,
I called out the location.

01:08:00.980 --> 01:08:04.830
So I figure as long as that box is
telling me what the location is,

01:08:04.830 --> 01:08:07.770
I might as well be able to
poke on it and see the map,

01:08:07.810 --> 01:08:08.550
right?

01:08:09.350 --> 01:08:14.160
So I'm going to turn that
box into a button as well.

01:08:14.160 --> 01:08:17.830
And that's easy enough to do by
simply wiring up the onClick event.

01:08:17.830 --> 01:08:20.440
In this case,
I'm going to call it GoToMap.

01:08:20.480 --> 01:08:25.770
Now, if you notice,
Dashcode is now auto-completing GoToMap.

01:08:25.860 --> 01:08:29.960
Now, GoToMap was part of that big
hunk of code that I dragged in.

01:08:30.000 --> 01:08:33.340
But as soon as it was there,
Dashcode made it immediately

01:08:33.340 --> 01:08:36.740
available for me to wire up to,
and code completes to it.

01:08:37.040 --> 01:08:40.320
So now when I hit return,
instead of creating a new function,

01:08:40.320 --> 01:08:42.940
it's simply wiring up to
that existing function.

01:08:44.630 --> 01:08:47.930
All right,
I swear we're getting close here.

01:08:48.020 --> 01:08:50.360
Dave must be around here somewhere.

01:08:50.470 --> 01:08:53.820
So what I need to do now is,
you remember I dragged

01:08:53.820 --> 01:08:55.220
in one icon and one map.

01:08:55.540 --> 01:09:00.500
Now I just need all the rest of those
so I don't get any missing images.

01:09:00.550 --> 01:09:02.060
I have those right here.

01:09:02.080 --> 01:09:07.000
Here are the rest of my
icons and all my maps.

01:09:07.000 --> 01:09:09.900
I'm going to simply drag them from
the Finder into the Images view.

01:09:10.320 --> 01:09:12.890
Now,
the images view is in the files view,

01:09:12.890 --> 01:09:16.010
and that shows all of the
files of your project.

01:09:16.070 --> 01:09:20.450
There's one more file I need,
and that is my data source.

01:09:20.450 --> 01:09:24.080
And it's a JSON file,
which is a type of XML pretty

01:09:24.080 --> 01:09:27.730
common on the web these days,
and that just has all

01:09:27.730 --> 01:09:29.580
of the sessions in it.

01:09:29.640 --> 01:09:31.660
So my code knows where
to go to find that,

01:09:31.740 --> 01:09:34.050
and we're going to display our sessions.

01:09:35.810 --> 01:09:40.540
So, who wants to bet that this will work?

01:09:40.540 --> 01:09:41.090
Anybody?

01:09:41.090 --> 01:09:41.870
Probably not.

01:09:41.880 --> 01:09:44.690
Let's hit run, see what happens.

01:09:44.920 --> 01:09:45.580
So there we go.

01:09:45.690 --> 01:09:48.300
Now I'm running in the simulator again.

01:09:48.370 --> 01:09:49.510
There's Dave.

01:09:49.600 --> 01:09:52.210
I'm going to ask the age-old question.

01:09:52.350 --> 01:09:52.860
There we go.

01:09:52.860 --> 01:09:54.400
Here are our sessions.

01:09:54.540 --> 01:09:57.060
Those are the sessions that are
coming up immediately after this one.

01:09:57.060 --> 01:10:04.190
Now,
I know that Dave is secretly an IT guy.

01:10:04.430 --> 01:10:07.900
And so I think he's going to
want to go to the getting started

01:10:07.900 --> 01:10:09.940
with Mac OS X administration.

01:10:10.070 --> 01:10:11.540
Sorry, Dave, if you're here.

01:10:11.740 --> 01:10:15.980
I didn't mean to out you,
but what are you going to do?

01:10:16.080 --> 01:10:22.220
So that's in the Nob Hill room,
and there's my map to it.

01:10:22.260 --> 01:10:26.760
OK, so you know-- There, it works.

01:10:28.300 --> 01:10:34.140
Now, I have to say, though,
that was too easy.

01:10:34.180 --> 01:10:36.450
I don't think I even had
to ask where Dave would go,

01:10:36.460 --> 01:10:40.340
since I know he's a closet IT guy.

01:10:40.340 --> 01:10:42.780
But what happens tomorrow or the
rest of the week when there are

01:10:42.780 --> 01:10:44.540
a lot more sessions going on?

01:10:44.590 --> 01:10:46.380
I have my work cut out for me.

01:10:46.440 --> 01:10:49.060
I'm not sure if I'm going
to be able to do it.

01:10:49.110 --> 01:10:52.180
Luckily, I can test it in Dashcode.

01:10:52.500 --> 01:10:55.370
I don't have to wait
till tomorrow to see it.

01:10:55.510 --> 01:10:59.240
I'm going to use a feature of
the Dashcode Debugger now to

01:10:59.240 --> 01:11:03.580
change the date so I can see what
things will look like tomorrow.

01:11:03.710 --> 01:11:07.740
Now, the Dashcode Debugger is a
full-on JavaScript debugger,

01:11:07.760 --> 01:11:10.860
lets you set breakpoints,
pause and resume your code.

01:11:10.870 --> 01:11:14.200
You can evaluate your variables,
check your stack frames,

01:11:14.270 --> 01:11:20.420
all kinds of interesting stuff,
including use a JavaScript evaluator.

01:11:20.440 --> 01:11:25.210
Now, the evaluator is a full-running
console that allows you to interact

01:11:25.590 --> 01:11:28.140
with your code while it's running.

01:11:28.150 --> 01:11:31.810
Now, I'm going to drag one last
thing now from the library,

01:11:31.920 --> 01:11:35.320
and that is my reload sessions.

01:11:35.330 --> 01:11:38.460
Now, reload sessions is my function
that goes and fetches the

01:11:38.570 --> 01:11:40.340
data and populates the list.

01:11:40.360 --> 01:11:44.230
But now I'm just going to pass it
a parameter of tomorrow so I can

01:11:44.300 --> 01:11:46.440
see what I've got cut out for me.

01:11:46.470 --> 01:11:49.970
Hit return, and now you see, well,
that's going to--

01:11:51.360 --> 01:11:53.330
That's not going to be easy at all.

01:11:53.440 --> 01:11:55.290
There's two IT sessions, for one thing.

01:11:55.320 --> 01:11:56.760
That's going to be tricky.

01:11:56.760 --> 01:12:01.520
Now, even more tricky is, well,
how am I even going to do this tomorrow?

01:12:01.520 --> 01:12:06.660
I've got my iPhone web app
here running in the simulator,

01:12:06.740 --> 01:12:10.530
but I want to have it
in my phone with me.

01:12:10.530 --> 01:12:13.650
That means what I want to do
is I want to take this project,

01:12:13.690 --> 01:12:16.590
I want to deploy it to a web
server so that I can hit it over

01:12:16.670 --> 01:12:18.460
the air no matter where I am.

01:12:19.140 --> 01:12:22.480
Now, luckily, of course,
I'll bet you can guess,

01:12:22.560 --> 01:12:24.030
Dashcode makes that easy, too.

01:12:26.250 --> 01:12:31.560
So now if I go to share,
I can tell Dashcode where

01:12:31.560 --> 01:12:33.180
I want this project deployed.

01:12:33.180 --> 01:12:37.270
So I'm going to send it over to a web
server that is going to know where to

01:12:37.410 --> 01:12:41.020
pick up the files and send them to my
phone so I can hit them in the browser.

01:12:41.020 --> 01:12:50.500
Now, Dashcode allows you to save them to
servers that use the WebDAV protocol.

01:12:50.500 --> 01:12:53.960
You can save it to your .mac,
or is it .me now?

01:12:53.960 --> 01:12:54.630
I don't know.

01:12:55.100 --> 01:12:56.690
You can save it to your .mac account.

01:12:56.700 --> 01:13:00.360
Or in this case,
I'm just saving it to local host.

01:13:00.480 --> 01:13:02.680
So that's the web server
that runs on this machine.

01:13:02.680 --> 01:13:04.710
It's the web server that
comes with every Mac.

01:13:04.810 --> 01:13:07.280
I'm just going to make sure
it's named the right thing,

01:13:07.280 --> 01:13:12.390
WWDG,
and I'm going to click the deploy button.

01:13:12.400 --> 01:13:14.860
So that went by really quick.

01:13:15.220 --> 01:13:18.760
There's not much data in my project,
and of course, I'm deploying it locally.

01:13:18.760 --> 01:13:24.730
So that went really probably
faster than many of you could see.

01:13:25.100 --> 01:13:27.790
Let's see if it made it.

01:13:28.020 --> 01:13:33.210
So now on my device,
when I bring up the Safari browser,

01:13:34.410 --> 01:13:40.500
Let's make sure that we
have a nice clean page.

01:13:41.410 --> 01:13:45.300
And I have a bookmark right
here that I made earlier,

01:13:45.350 --> 01:13:49.230
just a bookmark,
and let's see it live and running.

01:13:50.820 --> 01:13:52.700
All right, there's Dave.

01:13:52.800 --> 01:13:54.720
So now tomorrow I'll be able to ask.

01:13:54.850 --> 01:13:57.600
It's, of course,
telling us what's going on today.

01:13:57.600 --> 01:13:59.220
There's my detail.

01:13:59.220 --> 01:14:00.570
There's my map.

01:14:00.570 --> 01:14:03.130
All working right over the air.

01:14:09.480 --> 01:14:10.850
So there you saw it.

01:14:11.010 --> 01:14:14.880
Dash code from end to end,
getting you started with great templates,

01:14:14.930 --> 01:14:17.830
allowing you to very easily
extend the user interface and

01:14:17.830 --> 01:14:20.420
the code of your projects,
and even going as far as

01:14:20.590 --> 01:14:22.490
deploying it to your web server.

01:14:22.650 --> 01:14:25.320
So the whole thing from Dash code.

01:14:25.390 --> 01:14:29.040
Thank you.

01:14:29.040 --> 01:14:29.040
Andreas?

01:14:34.900 --> 01:14:38.240
Thank you, Max.

01:14:38.260 --> 01:14:41.640
So Dashcode allows you to build some
great web applications for your iPhone

01:14:41.670 --> 01:14:44.010
that feel just like native applications.

01:14:44.040 --> 01:14:48.260
It covers the entire process-- design,
simulation, debugging,

01:14:48.330 --> 01:14:50.380
and even deployment.

01:14:51.150 --> 01:14:53.250
The new Dashcode also knows
everything there is to know

01:14:53.430 --> 01:14:55.840
about Safari on the iPhone.

01:14:55.900 --> 01:14:58.110
When you actually simulate an
application from within Dashcode,

01:14:58.140 --> 01:15:01.180
it will start the iPhone simulator,
so that you can test your application

01:15:01.190 --> 01:15:03.920
in the mobile version of Safari.

01:15:03.960 --> 01:15:07.280
It also knows how to hook into the
hardware-accelerated transitions and

01:15:07.280 --> 01:15:09.030
animations that we saw in the demo.

01:15:09.340 --> 01:15:12.200
It knows about viewport options
that determine the scaling factor

01:15:12.200 --> 01:15:16.040
when you rotate the device,
and it has a home screen icon editor.

01:15:16.090 --> 01:15:18.760
Dashcode really is a
full-featured web IDE,

01:15:18.780 --> 01:15:21.060
and as you kind of saw,
it's a lot of fun to use.

01:15:21.060 --> 01:15:22.060
Thank you.

01:15:24.660 --> 01:15:27.580
So here are our four
major tools one more time.

01:15:27.600 --> 01:15:30.320
All of these tools now support
creating applications for

01:15:30.320 --> 01:15:32.500
both the Mac and the iPhone.

01:15:32.690 --> 01:15:36.110
And that's, of course,
a huge opportunity for you guys.

01:15:36.520 --> 01:15:40.720
Learning about the tools and APIs of
one of the platforms means that you

01:15:40.720 --> 01:15:44.440
automatically learn about the tools
and APIs of the other platform as well,

01:15:44.450 --> 01:15:48.060
which enables you to develop for two
of the fastest growing and two of the

01:15:48.060 --> 01:15:50.090
most exciting platforms in the world.