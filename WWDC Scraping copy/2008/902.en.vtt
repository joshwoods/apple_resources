WEBVTT

00:00:20.150 --> 00:00:22.680
- Good afternoon, I'm Pierre Frisch.

00:00:22.730 --> 00:00:26.040
You probably,
some of you at least know me.

00:00:26.180 --> 00:00:30.160
Some of you don't, and I'm the WebObject
Engineering Manager,

00:00:30.170 --> 00:00:30.850
Mr.

00:00:30.850 --> 00:00:33.090
WebObject at Apple.

00:00:33.700 --> 00:00:37.500
and I actually manage all the
engineering effort around the WebObject.

00:00:37.520 --> 00:00:40.930
And this afternoon, we have got

00:00:44.850 --> 00:00:50.300
and this afternoon we have got a very
interesting session where Jay and Guidoo,

00:00:50.300 --> 00:00:53.790
who are two trainers on WebObjects,
who are going to build in

00:00:53.790 --> 00:00:58.430
front of you a full WebObject
application in under an hour.

00:00:59.980 --> 00:01:05.180
So let me now invite
Jay and Guidon on stage.

00:01:05.190 --> 00:01:07.450
And let's get started.

00:01:15.920 --> 00:01:18.800
So, hello everyone.

00:01:18.830 --> 00:01:19.670
It's pretty full.

00:01:19.670 --> 00:01:20.750
It's amazing.

00:01:21.060 --> 00:01:23.680
So you're all interested in WebObjects.

00:01:23.850 --> 00:01:25.150
That's good.

00:01:25.400 --> 00:01:29.490
Just a show of hands,
who here has not used WebObjects before?

00:01:29.770 --> 00:01:31.310
Nice, excellent.

00:01:31.480 --> 00:01:34.180
Then we'll go ahead with the demo.

00:01:34.180 --> 00:01:35.020
Okay.

00:01:35.320 --> 00:01:44.020
So what you will see today here is we
start by using a plain Eclipse and we

00:01:44.020 --> 00:01:47.680
show you how to get the tools installed.

00:01:47.930 --> 00:01:53.980
We create a simple WebObjects application
and we will use the Flickr API to show

00:01:54.260 --> 00:01:58.420
you how to access a third party website.

00:01:58.420 --> 00:02:03.310
We will use a database to store
some local data and we use the Ajax

00:02:03.330 --> 00:02:09.570
framework from Project Wander to add
some nice things to our application.

00:02:09.580 --> 00:02:14.830
We will also show you one of the key
features of WebObjects and that is

00:02:14.940 --> 00:02:18.570
how to build reusable components.

00:02:19.050 --> 00:02:22.670
and last but not least,
deciding on a deployment strategy

00:02:22.850 --> 00:02:28.590
is something that needs to be done
and we will talk about that too.

00:02:29.900 --> 00:02:31.950
Thank you all for coming this afternoon.

00:02:32.170 --> 00:02:37.660
WebObjects is a mature, scalable,
and a very powerful platform.

00:02:37.680 --> 00:02:41.850
And it can meet the demands
of enterprise-level needs of

00:02:41.850 --> 00:02:48.560
organizations such as Apple and BBC,
but it can also meet the needs of the

00:02:48.560 --> 00:02:52.910
most modern web application development

00:02:53.260 --> 00:02:56.710
So, since this is an intro session,
we're just going to go ahead and build

00:02:56.770 --> 00:02:59.250
a Web 2.0 mashup application for you.

00:02:59.280 --> 00:03:02.410
But before we get started
with building the project,

00:03:02.410 --> 00:03:04.020
we're going to need
to get you some tools.

00:03:04.020 --> 00:03:06.800
And the tools are, first, WebObjects.

00:03:06.860 --> 00:03:10.890
They are an optional install on
your Xcode and developer tools,

00:03:10.890 --> 00:03:12.940
so go ahead and install them.

00:03:12.940 --> 00:03:15.380
Next thing you're going
to need is Eclipse.

00:03:15.380 --> 00:03:19.800
Eclipse is an open source
development platform.

00:03:19.800 --> 00:03:24.950
It is the officially recommended platform
by Apple and the most widely used

00:03:24.950 --> 00:03:27.000
by WebObjects developers everywhere.

00:03:27.000 --> 00:03:32.380
Eclipse is plugin-based and it
comes with an extensible tool set.

00:03:32.420 --> 00:03:35.430
And so to bring in your
WebObjects development to Eclipse,

00:03:35.430 --> 00:03:37.120
you're going to need Wallips.

00:03:37.140 --> 00:03:41.440
Wallips and the Woe Project is also
an open source plugin being actively

00:03:41.440 --> 00:03:43.900
developed and enhanced all the time.

00:03:43.940 --> 00:03:49.780
Wallips and Woe Project are going
to keep track of your projects.

00:03:49.850 --> 00:03:53.290
They also will give you access
to some awesome goodies.

00:03:53.300 --> 00:03:59.020
EO generator, a database modeling tool
that is Entity Modeler.

00:03:59.020 --> 00:04:03.200
And also it will give you access
to the WebObjects nightly builds,

00:04:03.200 --> 00:04:07.120
which we announced earlier this
morning that they're going to

00:04:07.120 --> 00:04:09.440
be available for daily updates.

00:04:09.440 --> 00:04:13.260
So, luckily,
we have all of these tools on stage.

00:04:13.260 --> 00:04:15.980
So we're just going to go ahead and
use them to build an application.

00:04:15.980 --> 00:04:19.780
Worth mentioning, though,
is that there is an integrated installer.

00:04:19.800 --> 00:04:22.020
So if you've never
used WebObjects before,

00:04:22.020 --> 00:04:25.400
get your hands on the integrated
installer and try it out.

00:04:25.420 --> 00:04:28.840
Now we're going to go to demo
and Guido will show us how to

00:04:28.840 --> 00:04:30.960
build our first application.

00:04:32.480 --> 00:04:36.360
So what you see here is a
freshly installed Eclipse,

00:04:36.560 --> 00:04:42.500
no plugins installed, just downloaded,
unpacked and started.

00:04:42.530 --> 00:04:45.190
As you are all developers here,
we assume you have the developer's

00:04:45.190 --> 00:04:50.670
tools installed and that you
have also checked the WebObjects

00:04:50.670 --> 00:04:58.360
checkbox to install WebObjects
while or with the developer tools.

00:04:58.360 --> 00:05:01.080
Eclipse, the work,
the welcome screen here

00:05:01.420 --> 00:05:06.260
just has some overviews,
what's new, samples, tutorials,

00:05:06.260 --> 00:05:10.000
but we want to go
directly to the workbench.

00:05:10.000 --> 00:05:13.970
The workbench is basically
this window here,

00:05:13.970 --> 00:05:17.840
a window which has several perspectives.

00:05:17.840 --> 00:05:20.030
Perspectives are layouts for that window.

00:05:20.240 --> 00:05:25.380
Volips will install a new perspective
optimized for WebObjects development.

00:05:25.380 --> 00:05:30.570
So we go ahead and install Volips
by going to the software updates,

00:05:30.570 --> 00:05:35.180
find and We want to add a
new feature to our Eclipse.

00:05:35.600 --> 00:05:38.690
We install from a local Volips site
just to make it a little bit faster.

00:05:38.740 --> 00:05:41.480
And click on Finish here.

00:05:41.480 --> 00:05:44.060
We select the standard install.

00:05:44.060 --> 00:05:45.160
It's all we need.

00:05:45.160 --> 00:05:47.380
No profiling, no scripting, no whatever.

00:05:47.380 --> 00:05:52.380
We accept the license,
which is a BSD license.

00:05:52.380 --> 00:05:54.910
Volips is open source,
so you can contribute there.

00:05:54.920 --> 00:05:58.300
And we finish that.

00:05:58.340 --> 00:06:01.460
Eclipse downloads now the plugin.

00:06:01.460 --> 00:06:06.220
As soon as everything is downloaded,
we install it.

00:06:06.260 --> 00:06:15.390
And we just restart our workbench
to come back to Eclipse with

00:06:15.390 --> 00:06:17.860
the Volips plugin now installed.

00:06:17.860 --> 00:06:20.160
Okay, you see, nothing has changed.

00:06:20.180 --> 00:06:21.020
Wow.

00:06:21.020 --> 00:06:26.380
So we need to switch now
to the Volips perspective.

00:06:26.380 --> 00:06:30.700
Again, a little bit has changed,
not much.

00:06:30.700 --> 00:06:34.760
You see now here in the lower
left corner is the related view.

00:06:35.500 --> 00:06:39.270
In the upper left corner
is the Vopackage Explorer.

00:06:39.390 --> 00:06:42.920
These are two views that
know about WebObjects,

00:06:42.930 --> 00:06:49.900
that know how to present
WebObjects parts of your project.

00:06:49.920 --> 00:06:55.440
So I go ahead now and create
a new WebObjects application,

00:06:55.440 --> 00:06:58.890
which I name Hello World.

00:07:01.800 --> 00:07:13.800
[Transcript missing]

00:07:14.750 --> 00:07:16.700
and Paul Schmitz.

00:07:16.700 --> 00:07:19.860
Next, we don't add something here,
so let's just finish that.

00:07:19.900 --> 00:07:25.110
Volips takes now a template for a
new project and builds a project

00:07:25.420 --> 00:07:31.780
from scratch for you with everything
that is needed in that project.

00:07:32.620 --> 00:07:36.600
One feature of Eclipse that is
particularly nice is that it builds your

00:07:36.680 --> 00:07:41.540
project on the fly as soon as you add
files or as soon as you change files.

00:07:41.540 --> 00:07:45.190
So when this checkbox,
when this checkmark here is

00:07:45.200 --> 00:07:50.780
set to build automatically,
your project is built and good to go.

00:07:50.780 --> 00:07:55.780
So what I do here is I select
the application.java file.

00:07:57.950 --> 00:08:02.950
I go to Run as, VoIPlication,
I haven't written any code.

00:08:03.360 --> 00:08:07.620
and The application starts up and
we come back with a hello world,

00:08:07.620 --> 00:08:12.630
just fresh from the templates in about,
I don't know, two minutes, three minutes.

00:08:12.650 --> 00:08:14.620
So that's pretty easy.

00:08:14.810 --> 00:08:19.800
But it's not boring,
but it doesn't do much,

00:08:19.800 --> 00:08:22.520
so I want to explain a little
bit what's going on here.

00:08:22.520 --> 00:08:28.100
The main page that is
shown is this one here.

00:08:28.100 --> 00:08:29.820
So, this is main.java.

00:08:29.820 --> 00:08:31.790
Not much going on on that.

00:08:31.800 --> 00:08:35.830
So, with a shortcut,
I switch to the HTML file for that.

00:08:35.860 --> 00:08:39.500
And you can see here it
has a simple template.

00:08:39.500 --> 00:08:43.510
It took that from the project
template to just build the

00:08:43.510 --> 00:08:46.340
Hello World example out of the box.

00:08:47.740 --> 00:08:54.760
What we want to do now is we want to
access some third-party API to make

00:08:54.820 --> 00:08:56.640
that demo a little bit more interesting.

00:08:56.640 --> 00:09:00.560
So I'm going to the finder now.

00:09:02.160 --> 00:09:10.100
and Paul Schmitz, and Paul Schmitz,
and Paul Schmitz, and Paul Schmitz,

00:09:10.100 --> 00:09:18.020
and Paul Schmitz, and Paul Schmitz,
and Paul Schmitz, and Paul Schmitz,

00:09:18.100 --> 00:09:26.620
and Paul Schmitz, and Paul Schmitz,
and Paul Schmitz, and Paul Schmitz, and

00:09:28.220 --> 00:09:31.240
The next thing where I have
to cheat a little bit,

00:09:31.290 --> 00:09:39.700
unfortunately,
is that I want to don't write that HTML.

00:09:39.750 --> 00:09:42.420
So I'm going to paste that in,
and I'll explain in a

00:09:42.420 --> 00:09:44.640
minute what that's doing.

00:09:45.540 --> 00:09:50.050
and I'll add a small
Java class that helps us to,

00:09:50.050 --> 00:09:56.380
or well, with wrapping the Flickr
API with some very simple calls.

00:09:56.380 --> 00:09:59.630
I will show you that it's not doing much,
it's just for our convenience that we

00:09:59.630 --> 00:10:05.500
don't have to write too much code and
don't confuse you with the Flickr calls.

00:10:05.540 --> 00:10:08.700
We want to show WebObjects
and not the Flickr API.

00:10:08.900 --> 00:10:16.750
So, what we see here now is the component
editor which is part of Volips.

00:10:16.890 --> 00:10:21.380
The component editor helps
you write your HTML files.

00:10:21.510 --> 00:10:24.790
You see there are a couple
of errors at the moment.

00:10:24.890 --> 00:10:26.920
There is no key search value in main.

00:10:27.080 --> 00:10:29.720
There's no key search in main,
which is true because

00:10:29.740 --> 00:10:33.220
main is just plain empty.

00:10:33.230 --> 00:10:37.150
And we will start using Volips
features now to add the stuff we need.

00:10:38.820 --> 00:10:42.320
What we have here,
I make that a little bit bigger.

00:10:42.370 --> 00:10:46.270
What we have here is a Vau column,
Vau form tag.

00:10:46.370 --> 00:10:51.200
This is used by WebObjects to
render a form tag in the final HTML.

00:10:51.290 --> 00:10:57.520
That form tag includes a text field
which puts its value into a variable

00:10:57.540 --> 00:11:02.330
called search value and a submit
button which will call a search

00:11:02.330 --> 00:11:05.880
action and will have the label go.

00:11:06.330 --> 00:11:10.200
When we get back the results,
we want to show them in a list.

00:11:10.200 --> 00:11:15.320
So we use a VORepetition
which iterates over a list of

00:11:15.320 --> 00:11:20.470
results and puts each item,
which will be a photo,

00:11:20.520 --> 00:11:25.580
into a photo variable while
it's iterating over that.

00:11:25.580 --> 00:11:30.360
And a VORepetition works the way
that it displays the part that

00:11:30.370 --> 00:11:36.080
is inside the repetition for
each item that is in the list.

00:11:36.390 --> 00:11:38.610
Unfortunately,
we're not using the new WebObjects

00:11:38.630 --> 00:11:46.290
features with the namespaces
and the var colon notation,

00:11:46.290 --> 00:11:50.450
but that will come with the
next WebObjects release,

00:11:50.450 --> 00:11:55.460
and I think it's a great feature to
even have less code on a page like that.

00:11:55.460 --> 00:11:58.350
So we start going now
and add the search value,

00:11:58.350 --> 00:12:03.160
which will be, the variable name will
be just search value.

00:12:03.160 --> 00:12:07.030
It will be a string,
and we want to add a method for

00:12:07.030 --> 00:12:08.590
getting and setting the value.

00:12:08.600 --> 00:12:12.740
We add that,
bring us back to our component Java file,

00:12:12.740 --> 00:12:17.420
and you see here,
Volips generated the needed code for us.

00:12:17.420 --> 00:12:20.590
When I switch back to the component,
that error is gone.

00:12:20.600 --> 00:12:24.170
I'll do the same for the other variables.

00:12:24.180 --> 00:12:28.290
Which in that... In that case,
the result is a mutable

00:12:28.290 --> 00:12:30.400
array of photo objects.

00:12:30.400 --> 00:12:33.300
Photo objects is something
that is in the Flickr package.

00:12:33.300 --> 00:12:37.400
So I add that, I save again,
I switch back.

00:12:37.400 --> 00:12:44.130
I add a photo, which is just one single
photo in our results array.

00:12:48.400 --> 00:12:49.380
go.

00:12:49.400 --> 00:12:51.440
Everything is there.

00:12:51.440 --> 00:12:55.820
It found now also the
photo.url as a key path to the

00:12:55.820 --> 00:12:58.820
URL attribute of the photo object.

00:12:58.820 --> 00:13:03.100
This is called key value coding,
and you provide a key path

00:13:03.100 --> 00:13:08.690
to the photo object and the
URL attribute to that object.

00:13:08.690 --> 00:13:16.940
This photo object is the currently
displayed photo in this result list.

00:13:16.940 --> 00:13:19.290
Now we have one error remaining.

00:13:19.290 --> 00:13:22.300
That is the action for the search button.

00:13:22.300 --> 00:13:24.710
We'll add that too.

00:13:24.760 --> 00:13:27.470
I do all the time command
click on these errors,

00:13:27.470 --> 00:13:32.780
and Volips helps me to generate
the appropriate methods.

00:13:32.780 --> 00:13:34.040
Here it is.

00:13:34.040 --> 00:13:37.990
What I want to do now
is call the Flickr API.

00:13:37.990 --> 00:13:37.990
I'm going

00:13:38.100 --> 00:13:44.400
[Transcript missing]

00:13:45.710 --> 00:13:48.050
and to our results array.

00:13:48.170 --> 00:13:52.320
So we do this search photos
with our search value.

00:13:52.320 --> 00:13:58.160
And I want to show you that there's
not much going on in that class,

00:13:58.160 --> 00:14:00.000
so we don't cheat too much.

00:14:00.000 --> 00:14:02.400
So this is just calling search.

00:14:02.400 --> 00:14:03.380
I go down here.

00:14:03.480 --> 00:14:07.760
The search method just does a
rest call to the Flickr API.

00:14:07.780 --> 00:14:13.050
Pretty simple with our search
value and gets back some results.

00:14:13.640 --> 00:14:18.400
So I'm basically done with what
I wanted to do for that part,

00:14:18.400 --> 00:14:21.270
so I start the application again.

00:14:21.660 --> 00:14:24.860
And we have our text field now.

00:14:24.920 --> 00:14:28.410
You can type in San Francisco,
because we are in

00:14:28.410 --> 00:14:30.210
San Francisco right now.

00:14:30.280 --> 00:14:35.550
Click on Go, and the application does
a call out to Flickr,

00:14:35.550 --> 00:14:37.210
hopefully.

00:14:37.870 --> 00:14:40.910
and it doesn't work.

00:14:41.790 --> 00:14:44.190
That's pretty interesting.

00:14:44.690 --> 00:14:49.230
and Paul Schmitz,
the founder of WebObjects,

00:14:49.270 --> 00:14:54.000
are the founders of the
WebObjects platform.

00:14:54.150 --> 00:14:57.600
and for whatever reason,
maybe I mistyped something,

00:14:57.660 --> 00:15:00.210
we have no results here and

00:15:01.910 --> 00:15:04.280
Going back to the component,
I can show you that

00:15:04.280 --> 00:15:10.080
I have linked the image,
like the photo here,

00:15:10.080 --> 00:15:13.590
with a VoHyperlink tag
that goes to the photo URL.

00:15:13.790 --> 00:15:15.800
That is something we
get back from Flickr.

00:15:15.800 --> 00:15:20.570
I switch to Safari again,
I click on that photo, and there it is,

00:15:20.660 --> 00:15:23.910
a very nice photo from Cupertino.

00:15:24.030 --> 00:15:26.790
So, back to slides, please.

00:15:29.900 --> 00:19:26.100
[Transcript missing]

00:19:26.630 --> 00:19:28.890
because it's rainy and
you want to stay dry.

00:19:29.020 --> 00:19:31.110
Don't repeat yourself,
just write code once,

00:19:31.230 --> 00:19:35.030
put it in a component,
and reuse that component.

00:19:35.160 --> 00:19:39.100
If I want to write two applications
that use that Flickr search,

00:19:39.100 --> 00:19:42.720
I don't want to have to rewrite
all the stuff that Guido wrote

00:19:42.720 --> 00:19:44.400
because he dumped it into main.

00:19:44.400 --> 00:19:47.000
If he wrote it into a component,
then I can take that component,

00:19:47.040 --> 00:19:48.780
use it in another application.

00:19:48.850 --> 00:19:52.840
And we're gonna talk about more
advanced ways of reusing code later on.

00:19:52.910 --> 00:19:56.570
Also, writing things into components
allows you to style them,

00:19:56.620 --> 00:20:00.740
to create look and feel,
and to be very specific with that.

00:20:00.840 --> 00:20:04.800
And also,
you can use it to integrate third-party

00:20:04.800 --> 00:20:08.500
components and third-party functionality.

00:20:08.610 --> 00:20:11.780
Most often than not,
somebody has written what you want,

00:20:11.780 --> 00:20:16.710
and so don't reinvent the wheel,
and learn to use, to reuse.

00:20:16.810 --> 00:20:20.580
And eventually,
say you're trying to build

00:20:20.580 --> 00:20:24.420
social networking applications
all over the place,

00:20:24.420 --> 00:20:28.040
so you make collections of
these components that you

00:20:28.040 --> 00:20:31.010
can reuse all over the place,
and build your own tool set,

00:20:31.010 --> 00:20:35.280
which is really gonna dramatically
cut down on your development time.

00:20:35.660 --> 00:20:39.460
So now we're going to go back to
demo and see how we can use the

00:20:39.460 --> 00:20:41.990
database and the entity modeler.

00:20:42.210 --> 00:20:45.980
Yeah, enough of these dry theories.

00:20:46.110 --> 00:20:52.780
That's pretty interesting about talking
about your adapter and all that stuff,

00:20:52.780 --> 00:20:52.780
but

00:20:52.900 --> 00:23:08.100
[Transcript missing]

00:23:08.210 --> 00:23:10.090
So, enough theory.

00:23:10.330 --> 00:23:12.790
We want to go in here and
add a new entity that we

00:23:12.790 --> 00:23:14.100
will use in the next example.

00:23:14.100 --> 00:23:16.430
And that is a tag.

00:23:16.720 --> 00:23:18.640
We name the entity tag.

00:23:18.710 --> 00:23:20.830
The table name is tag.

00:23:20.840 --> 00:23:24.640
And the class name for our
Java class is this one here,

00:23:24.640 --> 00:23:27.090
www.dc.tripliner.eo.tag.

00:23:27.100 --> 00:23:33.220
It took entity modeler,
this is that window here, which is,

00:23:33.240 --> 00:23:35.680
again, a part of the Volips plugin.

00:23:36.440 --> 00:23:40.980
Took this path here, the class path,
not the class path, the package name,

00:23:40.980 --> 00:23:45.490
from other entities we have in here,
so we don't have to type that.

00:23:45.500 --> 00:23:49.000
And entity modeler is pretty
intelligent with that.

00:23:49.020 --> 00:23:53.600
It saves you writing lots of
stupid things you never remember,

00:23:53.600 --> 00:23:58.460
and you always type wrong, at least I do,
and so very handy here.

00:23:58.480 --> 00:24:01.680
We add a new attribute by
double-clicking in that part here.

00:24:01.680 --> 00:24:07.830
I need an ID for a tag,
which is the ID prototype,

00:24:07.830 --> 00:24:10.720
and here you can see it automatically
switches the data type to integer.

00:24:10.720 --> 00:24:15.290
Then I add a tag name,

00:24:16.200 --> 00:24:28.290
and the table for that or the
table column for that is tech_name

00:24:28.290 --> 00:24:28.290
and this is a varchar255.

00:24:28.310 --> 00:24:31.130
So when I save that,
EntityModeler comes up

00:24:31.270 --> 00:24:32.870
with some hints for us.

00:24:32.890 --> 00:24:36.290
Oh, we forgot to assign a primary key.

00:24:36.550 --> 00:24:37.970
Nice, we will do that now.

00:24:38.050 --> 00:24:43.090
We click on the little key icon
in this column here for the ID.

00:24:43.260 --> 00:24:44.050
We save again.

00:24:44.060 --> 00:24:47.920
Error is gone,
so our model is valid at the moment.

00:24:47.920 --> 00:24:53.180
But it's not very useful right now,
so we want to add a relationship

00:24:53.280 --> 00:24:55.370
between tag and visitor.

00:24:55.910 --> 00:24:59.040
We say new relationship
between these two objects,

00:24:59.160 --> 00:25:03.490
a tag relates to one visitor,
and it should use an attribute

00:25:03.490 --> 00:25:05.240
called the VisitorID.

00:25:05.300 --> 00:25:09.090
I like the lowercase D here better,
and it should use the

00:25:09.090 --> 00:25:11.400
table column VisitorID.

00:25:11.480 --> 00:25:14.480
From visitor,
a visitor can have many tags,

00:25:14.540 --> 00:25:17.770
and so we don't have to do anything,
because that wizard here

00:25:17.770 --> 00:25:21.120
did everything right for us,
and that situation,

00:25:21.230 --> 00:25:25.190
we have set up a relationship
between tags and visitors.

00:25:25.520 --> 00:25:28.470
We will do the same now for the photos.

00:25:28.660 --> 00:25:30.700
We add a new relationship.

00:25:30.810 --> 00:25:34.900
So, from Flickr photo,
each photo belongs to one tag,

00:25:34.960 --> 00:25:41.100
but in that case, we already have a key
in our attributes added,

00:25:41.100 --> 00:25:46.120
so I switch off that box,
and now can just go in here and select

00:25:46.640 --> 00:25:48.890
the attribute I want to use for that.

00:25:49.130 --> 00:25:53.850
This is tag ID on the photo,
and relates to, as a foreign key,

00:25:54.090 --> 00:25:56.860
to the ID of tag.

00:25:56.860 --> 00:26:01.840
On the tag side, again,
there's not much to do, everything fine.

00:26:01.820 --> 00:26:05.420
Click okay here, now our model is done.

00:26:05.420 --> 00:26:08.540
As I said, we cheat a little bit,
we just created one entity,

00:26:08.690 --> 00:26:13.980
but I think you got the feeling
for how easy it is to work with

00:26:14.120 --> 00:26:17.080
database models in Entity Modeler.

00:26:17.260 --> 00:26:22.680
If we don't have a database right now,
we can just select our root entity,

00:26:22.680 --> 00:26:29.000
or our root entry for that model here,
and, whoops, click on create SQL,

00:26:29.000 --> 00:26:35.460
and it creates all the SQL we need
to create that database for us.

00:26:36.670 --> 00:26:39.420
We don't want to do that because
we already created that database,

00:26:39.530 --> 00:26:44.680
so I close that window
again and also close that.

00:26:44.680 --> 00:26:49.600
So now, what we have is a model,
but we need Java files.

00:26:49.600 --> 00:26:52.760
The Java files for these entities.

00:26:52.760 --> 00:26:57.730
This is why we are having all
these errors here because we

00:26:58.010 --> 00:27:02.100
are missing the Java files,
for example, for tag.

00:27:04.420 --> 00:27:07.920
So, we don't want to write code
again because we are lazy,

00:27:07.920 --> 00:27:11.920
we are WebObjects developers,
and we want to let the tool

00:27:11.920 --> 00:27:13.930
handle that task for us.

00:27:13.940 --> 00:27:18.810
So, I do a right-click on the model
and I go to the Volips tools

00:27:18.810 --> 00:27:21.700
and create an EO generator file.

00:27:21.720 --> 00:27:28.760
An EO generator file is a configuration
file for a tool called EO generator,

00:27:28.760 --> 00:27:34.130
which will take the entity
and create Java files for us.

00:27:34.320 --> 00:27:37.160
For each entity,
it will create two Java files.

00:27:37.180 --> 00:27:42.000
One that is regenerated every
time we do the generation.

00:27:42.000 --> 00:27:46.180
The other one is a
subclass of that first one.

00:27:46.180 --> 00:27:50.660
And this is the place where we can
add our business logic so we never

00:27:50.660 --> 00:27:53.170
have to bother about merging code.

00:27:54.920 --> 00:27:59.160
So I'll do that now by
right-clicking on the EOGEN file,

00:27:59.160 --> 00:28:01.830
say EOGENERATE.

00:28:01.900 --> 00:28:05.110
It created here the package for us.

00:28:05.120 --> 00:28:07.850
I can open that now,
and you see there's an underscore.

00:28:07.880 --> 00:28:11.740
Let's take the tag,
because we have built that.

00:28:11.740 --> 00:28:15.360
An underscore tag.java
file and a tag.java.

00:28:15.360 --> 00:28:17.380
So let's take a look in here.

00:28:17.380 --> 00:28:24.660
This is the file that gets generated
every time you do the EO generate task.

00:28:25.120 --> 00:28:28.700
It has a lot of nice
little things in here,

00:28:28.700 --> 00:28:33.500
like tag name key,
which relates to tag name.

00:28:33.500 --> 00:28:36.360
So we can use that for key value coding.

00:28:36.360 --> 00:28:41.320
It has a lot of methods
here to create new tags,

00:28:41.320 --> 00:28:46.920
to access parts of our tag,
to access the Flickr photos for a tag.

00:28:47.120 --> 00:28:52.770
Everything built, again,
from a template that ships with Volips.

00:28:53.860 --> 00:28:59.130
Now I open the tag itself.

00:28:59.660 --> 00:29:00.540
Empty class.

00:29:00.730 --> 00:29:04.220
If you write any business logic
that relates to a tag or to a

00:29:04.220 --> 00:29:11.040
visitor or to a flicker photo,
you would put that code in this class

00:29:11.040 --> 00:29:18.880
and this will never get regenerated
as long as it is in your project.

00:29:19.340 --> 00:29:21.200
Basically, we're done again.

00:29:21.200 --> 00:29:26.070
I want to stop that application,
and then I'll explain how the rest works.

00:29:26.260 --> 00:29:30.490
So,
I do a run as a web application again.

00:29:33.100 --> 00:29:38.730
because I'm a lazy developer but I learn,
so I use Cupertino now.

00:29:39.500 --> 00:30:02.700
[Transcript missing]

00:30:03.160 --> 00:30:07.440
and It again happens
all on the main.java.

00:30:07.550 --> 00:30:10.440
That is the Java file for the main page.

00:30:10.440 --> 00:30:15.820
Right now we are still
single page application,

00:30:15.830 --> 00:30:17.580
pretty simple.

00:30:17.580 --> 00:30:21.080
So the search we have
beefed up a little bit.

00:30:21.100 --> 00:30:25.240
So that part does now,
you know that from the first demo,

00:30:25.240 --> 00:30:31.190
return null means please
return the same page again.

00:30:31.800 --> 00:30:33.700
and Alex Hauke.

00:30:33.700 --> 00:30:42.940
We have a method to
find the existing tag.

00:30:42.940 --> 00:30:52.050
This uses EO qualifiers to qualify on
the tag name and the current visitor.

00:30:52.050 --> 00:30:57.380
We get the current visitor by setting
a user cookie during the page response.

00:30:57.470 --> 00:31:01.610
It's not very interesting to show that,
so I'll skip that.

00:31:01.720 --> 00:31:05.290
that for now, it's pretty basic stuff.

00:31:05.540 --> 00:31:11.100
Let's just say we get a visitor
from the database by using a cookie,

00:31:11.100 --> 00:31:16.370
looking up the value in the database,
and loading that visitor to our session.

00:31:16.380 --> 00:31:22.210
And these qualifiers here will
build parts of your where clause

00:31:22.210 --> 00:31:25.340
that gets sent to the database.

00:31:25.340 --> 00:31:29.920
In that case, for the tag name,
it uses the tag name key as

00:31:30.000 --> 00:31:32.400
the attribute to search on.

00:31:32.400 --> 00:31:35.980
It uses the search value
as the value to search for,

00:31:35.980 --> 00:31:42.680
and it uses a case insensitive like
on the database to find that tag.

00:31:42.680 --> 00:31:47.300
For the visitor,
we do a slightly different one.

00:31:47.320 --> 00:31:51.890
We use, again, the tag visitor key,
which tells the tag, hey,

00:31:51.890 --> 00:31:58.380
look for a visitor with the
current visitor of the session.

00:31:58.380 --> 00:32:00.860
And we want that to be equal.

00:32:00.860 --> 00:32:02.830
Because the current visitor is an object.

00:32:02.840 --> 00:32:05.320
So you see,
we don't have to pass in primary keys.

00:32:05.320 --> 00:32:08.580
We don't have to say, okay,
get the primary key for that current

00:32:08.580 --> 00:32:10.320
visitor for the cookie value.

00:32:10.320 --> 00:32:12.280
We all get that from EOF.

00:32:12.300 --> 00:32:17.430
Next thing we do is we combine
these two qualifiers with an and.

00:32:17.440 --> 00:32:23.150
That's just done by using an EO and
qualifier and putting an array of

00:32:23.150 --> 00:32:26.780
our two prebuilt qualifiers in there.

00:32:26.780 --> 00:32:32.860
Then we just ask the default editing
context to... find these objects.

00:32:32.860 --> 00:32:37.450
And we assume we get only one back,
but I was lazy with

00:32:37.720 --> 00:32:39.060
writing that thing here.

00:32:39.060 --> 00:32:46.320
So I just... If the result is not null,
we take the last object and return

00:32:46.320 --> 00:32:49.840
that to our calling method here.

00:32:49.840 --> 00:32:52.120
And found an existing tag.

00:32:52.570 --> 00:32:54.540
If not, we create a new one.

00:32:54.540 --> 00:33:00.680
We use one of these prebuilt methods
that were built by the... EOGENIC.

00:33:00.680 --> 00:33:04.020
The generator template
to pass in the context,

00:33:04.020 --> 00:33:08.600
the value we searched for,
and the current visitor to build

00:33:08.600 --> 00:33:10.460
the appropriate relationships.

00:33:12.280 --> 00:33:15.140
and We tell the session
to save the changes.

00:33:15.150 --> 00:33:19.120
And as Jay said,
we should code defensively,

00:33:19.120 --> 00:33:22.750
so I'll add a try-catch block here now.

00:33:26.100 --> 00:33:30.250
Use a little bit code completion here.

00:33:30.250 --> 00:33:32.750
That might throw an NS validation, oops.

00:33:33.580 --> 00:33:37.660
and his validation exception.

00:33:37.720 --> 00:33:41.730
It might throw others,
but I don't want to bother with them now.

00:33:41.740 --> 00:33:44.950
We print the stack trace
and ignore the rest.

00:33:45.230 --> 00:33:49.560
because we know it will work,
'cause we are good coders here.

00:33:49.790 --> 00:33:55.100
Okay, now, at that point here,
when we are after that collie brace,

00:33:55.230 --> 00:33:56.280
we have a tag.

00:33:56.280 --> 00:33:58.640
Either we found one or we created one.

00:33:58.660 --> 00:34:02.140
So, we set this as the current
tag on the session,

00:34:02.140 --> 00:34:05.870
and do the search,
and now can relate photos

00:34:06.210 --> 00:34:07.960
to this current tag.

00:34:08.260 --> 00:34:12.300
The select photo does
something very similar,

00:34:12.340 --> 00:34:15.400
but it just uses, again,
an editing context as the

00:34:15.410 --> 00:34:19.040
sandbox for doing things,
creates a new photo with

00:34:19.040 --> 00:34:22.880
all the information that we
get from the Flickr photo,

00:34:22.880 --> 00:34:28.750
and stores that related to our tag
in the database by just calling

00:34:28.750 --> 00:34:30.570
editing context save changes.

00:34:30.680 --> 00:34:31.770
I have one note here.

00:34:31.940 --> 00:34:34.820
We use the session
default editing context,

00:34:34.820 --> 00:34:38.140
and in all the WebObjects books,
and all the sessions you will hear,

00:34:38.160 --> 00:34:39.620
this is not good practice.

00:34:39.800 --> 00:34:43.660
For us,
we just wanted to show how it works,

00:34:43.660 --> 00:34:46.400
and the sessions editing context,
the default editing context

00:34:46.400 --> 00:34:48.040
has one big advantage.

00:34:48.040 --> 00:34:50.240
It gets auto-locked by the session.

00:34:50.240 --> 00:34:51.750
We don't have to do anything.

00:34:51.760 --> 00:34:55.660
We don't clutter our code here with lock,
unlock,

00:34:55.660 --> 00:35:01.400
and all the handling that can happen
if something throws an exception or so.

00:35:01.430 --> 00:35:04.980
So, if you do that,
take a look at editing context

00:35:04.980 --> 00:35:08.270
patterns best practices,
and do it right.

00:35:08.380 --> 00:35:11.780
Use the default editing
context maybe for reading,

00:35:11.780 --> 00:35:15.190
and use new editing context
you can just create on the fly

00:35:15.500 --> 00:35:20.950
for writing to the database,
so you don't poison your default

00:35:20.960 --> 00:35:24.100
editing context with stuff that will
never get saved to the database,

00:35:24.100 --> 00:35:27.060
or might be undone, or whatever.

00:35:27.060 --> 00:35:32.960
So, the remove method, again,
uses that editing context from the photo.

00:35:32.960 --> 00:35:36.620
It removes the photo from the visitor.

00:35:36.620 --> 00:35:41.640
In that case, it works just for us,
it works also on the

00:35:41.700 --> 00:35:45.680
tag if we delete that,
but don't want to show that.

00:35:45.680 --> 00:35:49.700
It's just, this is how you remove
something from a relationship,

00:35:49.700 --> 00:35:51.940
and then you say,
tell the editing context

00:35:51.940 --> 00:35:54.820
to delete the object,
and to save its changes,

00:35:54.820 --> 00:35:57.020
and return the same page again.

00:35:57.020 --> 00:35:58.760
That's what was done here.

00:35:58.760 --> 00:36:02.950
When I click remove,
you return the same page, image is gone,

00:36:03.060 --> 00:36:04.960
and it's saved to the database.

00:36:04.960 --> 00:36:07.370
That, it is gone,
so it was deleted from the database,

00:36:07.380 --> 00:36:08.890
not saved.

00:36:09.150 --> 00:36:15.920
So, another very,
very helpful tool when you

00:36:15.980 --> 00:36:20.000
develop with WebObjects,
as Jay said, is the component model.

00:36:20.040 --> 00:36:22.210
You can nest components into each other.

00:36:22.330 --> 00:36:27.400
Components are just snippets of
HTML with the related Java code.

00:36:27.540 --> 00:36:32.580
What I want to show is how you
create a consistent look and feel.

00:36:32.900 --> 00:36:36.480
and when I switch to the
component for this file,

00:36:36.480 --> 00:36:40.290
you see that I have the
HTML body declaration.

00:36:40.300 --> 00:36:45.060
We have the closing
declaration down here.

00:36:45.060 --> 00:36:47.740
And I want to take that off of
that page because we don't want

00:36:47.740 --> 00:36:51.470
to write that for every component,
every page we add to that

00:36:51.470 --> 00:36:53.440
application later on.

00:36:53.440 --> 00:36:58.260
So I'll create now a look and feel
component by clicking on the components

00:36:58.260 --> 00:37:02.160
folder and selecting new component.

00:37:02.160 --> 00:37:04.960
We name this one the page wrapper.

00:37:05.500 --> 00:37:08.040
It's not a specific name,
you can use whatever name you like,

00:37:08.160 --> 00:37:12.120
but page wrapper is something that
is used in parts of WebObjects

00:37:12.130 --> 00:37:15.630
and just became something
like a naming convention.

00:37:15.840 --> 00:37:20.140
Some people call it site look
and feel or look and feel,

00:37:20.170 --> 00:37:23.120
just name it whatever you like.

00:37:23.580 --> 00:37:26.350
It will go to the
components package again.

00:37:26.480 --> 00:37:29.830
Again here,
Bollips was smart and tells us, "Oh yeah,

00:37:29.830 --> 00:37:32.800
you have a components package,
"so why not putting it

00:37:32.840 --> 00:37:35.040
there?" And I'll do that now.

00:37:35.040 --> 00:37:37.910
Just click Finish, that thing is empty.

00:37:38.110 --> 00:37:41.370
Yeah, sure, because I wanted to
have an empty component.

00:37:41.550 --> 00:37:47.460
I get the header part from the HTML,
paste it in the page wrapper,

00:37:47.490 --> 00:37:52.140
go back here,
take that part of the HTML out of main,

00:37:52.140 --> 00:37:54.800
and put it into the wrapper.

00:37:54.800 --> 00:37:58.260
So this is now our look
and feel component,

00:37:58.280 --> 00:38:03.500
but how do we tell WebObjects that
all the pages should get placed here?

00:38:03.520 --> 00:38:06.690
This is done by using a tag,
a WebObjects tag called

00:38:06.730 --> 00:38:08.760
the VogueComponentContent.

00:38:08.760 --> 00:38:13.260
It tells WebObjects,
whatever is the current

00:38:13.260 --> 00:38:17.760
page that gets displayed,
or the content that tells WebObjects,

00:38:17.760 --> 00:38:24.840
please wrap me inside a page
wrapper to put the HTML in here.

00:38:25.020 --> 00:38:28.720
So we just place this
tag on our page wrapper,

00:38:28.730 --> 00:38:34.790
and now we say on main that we want it
to be wrapped inside a page wrapper.

00:38:34.920 --> 00:38:38.680
Use code completion again in here.

00:38:38.930 --> 00:38:42.460
That's a quite nice thing from Bollips,
that you have code

00:38:42.460 --> 00:38:44.510
completion nearly everywhere.

00:38:44.770 --> 00:38:49.740
Like you can use code completion
for resolving this one here,

00:38:51.580 --> 00:38:55.160
by typing SE and relating
it to search value.

00:38:55.250 --> 00:38:59.320
It works not only on Java,
it works on your project.

00:38:59.320 --> 00:39:08.010
And another nice thing is that,
let's just do that again on page wrapper.

00:39:08.540 --> 00:39:14.220
and Yann Le Pallon, and I'm going to show
you how WebObjects works.

00:39:14.460 --> 00:39:21.350
Open one view here and
use this view here.

00:39:21.440 --> 00:39:26.010
With that one,
we can take something from, for example,

00:39:26.110 --> 00:39:29.640
our application and take
an attribute from here,

00:39:29.640 --> 00:39:33.360
in that case the name,
and just drag it to our HTML.

00:39:33.360 --> 00:39:37.050
And if I let go now,
it will just add this

00:39:37.050 --> 00:39:40.000
one as the value binding.

00:39:40.000 --> 00:39:42.680
As it is done,
I don't want to do it right now.

00:39:42.690 --> 00:39:44.370
We just save that now.

00:39:44.400 --> 00:39:46.850
our application is

00:39:48.490 --> 00:39:52.940
And now, we have added a page wrapper
as our look and feel component.

00:39:52.940 --> 00:39:57.770
We started again and we expected to
look exactly the same as it was before.

00:39:57.790 --> 00:40:00.430
So, if I search now again, Cupertino.

00:40:00.470 --> 00:40:04.300
Nothing really special in that example,
but if you have like

00:40:04.510 --> 00:40:07.610
navigation components,
complex HTML headers,

00:40:07.610 --> 00:40:11.380
JavaScripts you want to load,
CSS files you want to load,

00:40:11.380 --> 00:40:15.260
you can add them on the page
wrapper and you never have to worry

00:40:15.440 --> 00:40:18.130
about that from your components.

00:40:18.460 --> 00:40:20.140
Again.

00:40:20.190 --> 00:40:25.140
So,
this was a little introduction to EOF and

00:40:25.140 --> 00:40:27.140
the component model in WebObjects.

00:40:27.240 --> 00:40:30.380
And we go back to slides, please.

00:40:31.100 --> 00:42:30.400
[Transcript missing]

00:42:37.310 --> 00:42:42.800
First of all, we need to add our

00:42:44.360 --> 00:42:45.470
AJAX Frameworks.

00:42:45.590 --> 00:42:48.920
So we go to our build path,
configure our build path,

00:42:49.140 --> 00:42:53.120
go to our WebObjects frameworks,
edit them.

00:42:53.170 --> 00:42:56.180
I go to our local library frameworks,
and what am I going to add?

00:42:56.190 --> 00:42:57.340
I'm going to add AJAX.

00:42:57.340 --> 00:43:04.140
I'm going to add the ERX extensions
and the ER jars from Project Wonder.

00:43:04.140 --> 00:43:09.250
And that's all I have to do,
and I'm done with adding frameworks.

00:43:10.020 --> 00:43:13.210
Now we have to do two little more things.

00:43:13.320 --> 00:43:20.430
First, we need to extend our application
to use Project Wonder.

00:43:21.400 --> 00:43:24.830
I'm going to do a couple of things
here that are not necessary for

00:43:24.900 --> 00:43:26.600
this particular little application.

00:43:26.620 --> 00:43:32.510
But if you want to do more complex AJAX,
it is nice for you to just extend

00:43:40.400 --> 00:43:53.100
[Transcript missing]

00:44:08.800 --> 00:44:31.300
[Transcript missing]

00:44:32.000 --> 00:44:39.700
[Transcript missing]

00:44:40.190 --> 00:44:49.100
and David DeRose, and David DeRose,
and David DeRose, and David DeRose,

00:44:49.100 --> 00:44:58.100
and David DeRose, and David DeRose,
and David DeRose, and David DeRose, and

00:45:00.750 --> 00:45:07.340
and And notice that right now I have, oh,
I don't have an error, haha.

00:45:07.340 --> 00:45:11.090
I was gonna show you a neat feature of a

00:45:12.600 --> 00:45:14.580
clips but I can still show it to you.

00:45:14.580 --> 00:45:18.960
Notice here how my imports,
I have ERX session but I also have one

00:45:19.010 --> 00:45:21.180
that I don't need anymore over here.

00:45:21.180 --> 00:45:27.370
So command shift O to organize
my imports and it does it for me.

00:45:27.380 --> 00:45:33.100
And it's when you have complex projects,
it's a really satisfying shortcut.

00:45:33.110 --> 00:45:39.520
So now we are pretty much
done and we can just use the

00:45:39.630 --> 00:45:41.810
AJAX framework in our application.

00:45:41.970 --> 00:45:44.590
I have already added my

00:45:44.910 --> 00:45:48.820
My component in there,
which is my Ajax Flickr photo search.

00:45:48.820 --> 00:45:50.840
So let's just go ahead
and have a look at it.

00:45:50.840 --> 00:45:52.070
What do we have in there?

00:45:52.150 --> 00:45:54.830
We have the page wrapper
that Guidro wrote for us.

00:45:54.830 --> 00:45:58.800
And in there as well,
we're going to have a container

00:45:59.400 --> 00:46:05.220
and we're going to define something
called an Ajax droppable area.

00:46:05.220 --> 00:46:06.990
A left one and a right one.

00:46:07.080 --> 00:46:11.790
And in the left one, you know,
we're going to have the same repetition

00:46:11.790 --> 00:46:14.780
that he had that has our search results.

00:46:14.800 --> 00:46:17.420
And it rates over photo.

00:46:17.420 --> 00:46:20.540
So to display our search
results over there.

00:46:20.540 --> 00:46:21.560
So not much change in here.

00:46:21.580 --> 00:46:25.220
Except we're going to define that image
as opposed to just a regular image.

00:46:25.280 --> 00:46:27.640
We're going to define
it as an Ajax draggable.

00:46:27.640 --> 00:46:30.210
So we're just enabling drag on that item.

00:46:30.210 --> 00:46:34.420
And in the right-hand side,
we're going to do the same thing.

00:46:34.420 --> 00:46:38.490
We're going to define...

00:46:40.370 --> 00:46:44.000
and An Ajax droppable area with
a word repetition that's going to

00:46:44.000 --> 00:46:47.300
repeat over our favorite photos.

00:46:47.340 --> 00:46:52.200
And each photo is also going
to be a draggable item.

00:46:52.450 --> 00:46:56.220
So there is no change
really to the Java side.

00:46:56.220 --> 00:46:58.680
I'm just changing HTML here.

00:46:58.700 --> 00:47:02.830
And I'm going to go to our page wrapper.

00:47:05.100 --> 00:47:08.460
Make sure that in the
page wrapper right now,

00:47:08.460 --> 00:47:15.400
I am going to be calling no longer
just the regular simple Flickr search.

00:47:16.000 --> 00:47:20.320
Which I had gotten out
into a separate component.

00:47:20.340 --> 00:47:22.560
And what are we calling it?

00:47:22.680 --> 00:47:26.680
Ajax, Flickr, Photo Search.

00:47:28.900 --> 00:47:31.140
and we're going to save that.

00:47:31.140 --> 00:47:35.740
I'm trying to think,
is there anything else we need to do?

00:47:35.740 --> 00:47:36.970
We shouldn't.

00:47:36.990 --> 00:47:42.140
But we have an error here,
so let me double check what's going on.

00:47:44.860 --> 00:47:53.800
and David DeRose, and David DeRose,
and David DeRose, and David DeRose,

00:47:53.800 --> 00:48:01.800
and David DeRose, and David DeRose,
and David DeRose, and David DeRose,

00:48:01.800 --> 00:48:09.800
and David DeRose, and David DeRose,
and David DeRose, and David DeRose,

00:48:09.800 --> 00:48:13.800
and David DeRose, and David DeRose,

00:48:14.310 --> 00:48:15.800
and Regina.

00:48:15.850 --> 00:48:19.320
Thanks Dimitri for helping us out
on that and run the application.

00:48:19.320 --> 00:48:22.510
Hopefully it runs and
doesn't embarrass us.

00:48:28.400 --> 00:48:35.900
[Transcript missing]

00:48:36.170 --> 00:48:40.490
Well, can anybody see what I did wrong?

00:48:40.590 --> 00:48:43.790
Not the ARX application, ARX session.

00:48:44.000 --> 00:48:46.630
We've added everything.

00:48:47.030 --> 00:48:49.540
Can you see anything, Guido?

00:48:49.540 --> 00:48:51.540
Guido Noguera: No.

00:48:51.540 --> 00:49:00.480
Let's double check that we've
added the frameworks we have right.

00:49:13.800 --> 00:49:21.800
[Transcript missing]

00:49:23.850 --> 00:49:24.790
up up up.

00:49:24.800 --> 00:49:26.680
So, okay, Ajax is there.

00:49:26.680 --> 00:49:29.750
Yeah, that's what I was first thought,
but I'm not sure.

00:49:29.840 --> 00:49:30.760
Okay.

00:49:30.760 --> 00:49:35.580
Um, I guess we don't want to bother
with searching now for that arrow.

00:49:35.580 --> 00:49:39.620
Maybe you just go to the application we
have prepared for a case like that when

00:49:39.630 --> 00:49:42.720
things happen that shouldn't happen and,
you know.

00:49:42.720 --> 00:49:43.720
Okay.

00:49:43.720 --> 00:49:45.420
No, it's, it just has not finished
building in the background.

00:49:45.460 --> 00:49:46.440
Here you go.

00:49:46.520 --> 00:49:47.480
It's back up.

00:49:47.480 --> 00:49:48.300
Okay.

00:49:48.480 --> 00:49:53.080
Um, so now this is our photo, um,
component and all we added

00:49:53.080 --> 00:49:57.970
is a style sheet around it,
and this is the drag and drop component.

00:49:59.370 --> 00:50:03.540
and We go and search for Cupertino again,
and now we have our little photos here.

00:50:03.550 --> 00:50:06.040
And, you know,
we added just a little bit of

00:50:06.040 --> 00:50:09.510
animation using WebKit here to
just like magnify the photos so

00:50:09.510 --> 00:50:11.610
we can look at them and marvel.

00:50:11.830 --> 00:50:16.070
And so now we just want to add
something to our favorites,

00:50:16.070 --> 00:50:17.980
and we added over here.

00:50:19.100 --> 00:50:22.900
and it is in our favorites bucket.

00:50:22.900 --> 00:50:26.080
Another thing that I wanted
to show you was that,

00:50:26.080 --> 00:50:29.020
you know,
Guidon and I spent some time trying

00:50:29.020 --> 00:50:33.540
to work together and just wrote a
bunch of social networking tools.

00:50:33.540 --> 00:50:39.590
So basically went out and found
APIs to things like Twitter and

00:50:39.590 --> 00:50:43.760
like Yahoo and stuff like that
and wrote a couple of components.

00:50:43.770 --> 00:50:47.940
One that reads news is an
RSS reader and one that posts your

00:50:47.940 --> 00:50:50.460
Twitter messages out to Twitter.

00:50:50.520 --> 00:50:54.530
So we wanted to see if we can break it,
I guess.

00:50:54.540 --> 00:50:57.880
So we go back to our
page wrapper and this,

00:50:57.890 --> 00:51:01.140
we just collected all
of these components.

00:51:01.140 --> 00:51:06.520
We wanted to talk about more advanced
ways of architecting your code.

00:51:06.670 --> 00:51:10.420
So all of these things
I want to use in every social

00:51:10.420 --> 00:51:12.160
networking application I write.

00:51:12.160 --> 00:51:17.090
So I just dumped them in a social
networking tools4j and I just put them

00:51:17.200 --> 00:51:19.460
in a web objects framework which is just,
you know,

00:51:19.460 --> 00:51:22.420
you write a new framework by going file,
new,

00:51:22.420 --> 00:51:26.950
web objects framework and just collect
all of your components and all of

00:51:26.950 --> 00:51:30.450
your libraries that you're going
to reuse across your organization

00:51:30.450 --> 00:51:32.300
or different projects in there.

00:51:32.300 --> 00:51:35.390
And once they are here and you've
related them to your project,

00:51:35.390 --> 00:51:40.230
you can, you just use them as if they
were in your own application.

00:51:40.240 --> 00:51:43.320
So in here, I'm going to also add,

00:51:44.140 --> 00:51:49.830
and Al Shachar,
the founder of WebObjects,

00:51:49.850 --> 00:51:55.190
are the founders of WebObjects.com.

00:51:55.400 --> 00:52:01.500
[Transcript missing]

00:52:02.400 --> 00:52:07.960
News, what was it called?

00:52:07.960 --> 00:52:07.960
News widget, here we go.

00:52:10.530 --> 00:52:14.300
So we add that to our application,
just hit save.

00:52:14.300 --> 00:52:18.910
I don't really need to reload my
application to restart my application.

00:52:18.960 --> 00:52:23.550
I just reload it and
hopefully it shows up.

00:52:26.070 --> 00:52:32.390
Yahoo might be just a little slow.

00:52:32.390 --> 00:52:32.390
Or Flickr might be a little slow.

00:52:35.000 --> 00:52:36.280
We're missing something again.

00:52:36.280 --> 00:52:44.940
So now you see how it is an iterative
process to develop software.

00:52:44.940 --> 00:52:48.880
Regardless, it's unimportant to show
that particular component.

00:52:48.880 --> 00:52:50.200
It's just an extra component.

00:52:50.200 --> 00:52:53.010
If it's not working in our framework,
that's something we can debug later.

00:52:53.020 --> 00:53:00.170
But basically,
it did not take us much to be able to add

00:53:00.180 --> 00:53:01.720
a little more gloss to our application.

00:53:02.640 --> 00:53:07.070
And just by using a few
more clicks and adding the

00:53:07.070 --> 00:53:09.660
AJAX framework into our application.

00:53:09.660 --> 00:53:14.930
So next, we are going to...

00:53:16.050 --> 00:53:17.000
Back to slides, Paula.

00:53:17.000 --> 00:53:19.420
Talk a little bit more about
frameworks since they're not

00:53:19.430 --> 00:53:21.500
working right now for us.

00:53:22.520 --> 00:53:27.200
So yeah, thanks Jay for that demo.

00:53:27.200 --> 00:53:30.840
We saw the concept of
frameworks in that demo.

00:53:30.960 --> 00:53:33.840
We were using the Ajax
framework from Project Wander.

00:53:33.840 --> 00:53:38.520
You saw that Jay created a
social networking tools for Jay,

00:53:38.590 --> 00:53:39.880
and I hope it's also for me, right?

00:53:40.340 --> 00:53:41.100
Framework.

00:53:41.100 --> 00:53:42.380
They're just the job.

00:53:42.380 --> 00:53:49.140
And this is a great way
to organize your project.

00:53:49.190 --> 00:53:52.230
Frameworks help you to
don't repeat yourself.

00:53:52.680 --> 00:53:54.490
Why am I going to say that all the time?

00:53:55.150 --> 00:54:00.920
They help you to structure your
code by placing things that belong

00:54:00.990 --> 00:54:03.360
to each other inside one framework.

00:54:03.360 --> 00:54:08.020
Like you can put all your business
logic in a business logic framework

00:54:08.020 --> 00:54:11.120
with your database models,
with all the logic going

00:54:11.120 --> 00:54:12.360
on within the framework.

00:54:12.380 --> 00:54:12.950
And then you can use that logic
to create a framework for your

00:54:12.950 --> 00:54:13.380
business and your business.

00:54:13.380 --> 00:54:14.030
So you can create a framework for
your business and your business,

00:54:14.030 --> 00:54:15.380
and then you can use that framework to
create a framework for your business.

00:54:15.380 --> 00:54:16.380
So that's what we're
going to do in this demo.

00:54:16.380 --> 00:54:17.380
I'm going to show you how
we can use the framework.

00:54:17.380 --> 00:54:18.370
So we're going to go to
the enterprise object.

00:54:18.390 --> 00:54:18.920
And like in this example,
you can create a framework

00:54:18.940 --> 00:54:19.380
for social networking tools.

00:54:19.380 --> 00:54:27.220
And you can just use these components,
these utilities that are in the framework

00:54:27.760 --> 00:54:31.280
as they were in the application.

00:54:31.280 --> 00:54:34.560
And a great thing with that is you
can use third party frameworks.

00:54:34.560 --> 00:54:35.900
We use the Ajax framework here.

00:54:35.900 --> 00:54:41.520
We use your extensions as
the base for our Ajax demo.

00:54:41.560 --> 00:54:42.360
And there are many,
many other frameworks that we can use.

00:54:42.360 --> 00:54:45.780
Any third party frameworks
out there you can use.

00:54:45.780 --> 00:54:48.780
And Project Wander is just the
biggest and I guess the most

00:54:48.780 --> 00:54:52.640
active of these because there
are many contributors to it.

00:54:52.640 --> 00:54:56.270
And it has that really great
Ajax framework which you should

00:54:56.270 --> 00:55:00.770
explore and just take a look at it,
learn from it, and use it because

00:55:00.770 --> 00:55:02.630
I think it's really cool.

00:55:05.180 --> 00:55:09.320
So, we have one remaining item
that is deployment and

00:55:09.330 --> 00:55:12.200
Jay will talk about that part.

00:55:13.860 --> 00:55:16.240
So, deployment.

00:55:16.240 --> 00:55:20.890
Now we have an application and the
last thing you want to do is deploy it.

00:55:20.950 --> 00:55:24.970
Deployment means to make your
application available for users so

00:55:24.970 --> 00:55:27.380
it can serve its intended purpose.

00:55:28.610 --> 00:55:32.160
One important thing about
deployment is never think of your

00:55:32.160 --> 00:55:34.200
deployment as a one-time task.

00:55:34.200 --> 00:55:36.120
Deployment is a strategy.

00:55:36.140 --> 00:55:39.540
It's a strategy that needs to be
organic and needs to be responding

00:55:39.540 --> 00:55:42.690
to how your application is growing,
how it's behaving in the

00:55:42.760 --> 00:55:44.080
production environment.

00:55:44.080 --> 00:55:48.190
And you need to take a number of...

00:55:49.500 --> 00:55:51.320
items into consideration.

00:55:51.600 --> 00:55:52.660
First of all, security.

00:55:52.830 --> 00:55:57.280
Is this an app that needs
to be accessed over SSL?

00:55:57.340 --> 00:55:59.430
Is this for internal use or external use?

00:55:59.510 --> 00:56:00.640
Who has access to it?

00:56:00.660 --> 00:56:03.720
Expected user load.

00:56:03.720 --> 00:56:07.240
Is this an application that's
gonna have the same small number

00:56:07.240 --> 00:56:09.330
of users using it all the time.

00:56:09.390 --> 00:56:12.210
Is this something that's gonna,
where the user load is gonna

00:56:12.210 --> 00:56:13.500
grow and how is it gonna grow?

00:56:13.500 --> 00:56:17.020
It's important to think about the
projected growth of your application.

00:56:17.920 --> 00:56:19.880
What is your application server load?

00:56:19.960 --> 00:56:22.360
What else is on that server?

00:56:22.360 --> 00:56:25.860
And how CPU intensive
are your operations?

00:56:25.860 --> 00:56:28.380
How much memory is a
single instance using?

00:56:29.230 --> 00:56:31.900
Performance expectations.

00:56:32.010 --> 00:56:34.240
Is this an app that is mission critical?

00:56:34.240 --> 00:56:38.710
Does it need to be up 24/7?

00:56:39.490 --> 00:56:41.270
and Phil over support.

00:56:41.400 --> 00:56:44.600
How are you going to handle it
when your instance goes offline,

00:56:44.600 --> 00:56:48.200
your whole application goes offline,
and your database goes offline?

00:56:48.200 --> 00:56:51.760
These are things that you cannot
leave until the moment they happen.

00:56:51.760 --> 00:56:56.100
They need to be part of your deployment
strategy to think about all of these

00:56:56.100 --> 00:57:00.900
things and then go ahead and choose a
deployment strategy and keep monitoring.

00:57:00.900 --> 00:57:01.780
Use the tools.

00:57:01.780 --> 00:57:03.640
There's a statistics page.

00:57:03.640 --> 00:57:09.300
Look at that and always keep your
application under surveillance and

00:57:09.300 --> 00:57:09.380
see if it's going to be able to do it.

00:57:09.400 --> 00:57:11.200
how it's behaving.

00:57:11.920 --> 00:57:15.170
You have multiple deployment
options with WebObjects.

00:57:15.320 --> 00:57:17.550
First, you have Direct Connect,
which let me clarify,

00:57:17.560 --> 00:57:19.320
this is not actually
a deployment strategy.

00:57:19.320 --> 00:57:21.440
This is for you while you're developing.

00:57:21.440 --> 00:57:22.880
It's a startup argument.

00:57:22.930 --> 00:57:25.570
You can set what
Direct Connect enabled to true,

00:57:25.600 --> 00:57:28.300
and this way you don't have
to set your own deployment

00:57:28.490 --> 00:57:31.000
environment when you're coding.

00:57:31.000 --> 00:57:35.180
It allows you to do some resource hot
swapping and do it without having to

00:57:35.200 --> 00:57:37.830
affect other users or other programmers.

00:57:39.280 --> 00:57:44.380
You can do a WebObjects deployment
as a regular J2EE deployment.

00:57:44.380 --> 00:57:50.240
For servlet deployment, just include the
Java WoJSP servlet framework.

00:57:50.240 --> 00:57:56.960
You can also do it as an SSDD deployment,
which means that all of your frameworks,

00:57:56.990 --> 00:58:01.380
all of your WebObjects frameworks,
including your system frameworks,

00:58:01.380 --> 00:58:05.000
are going to be embedded
in that and deployed.

00:58:05.000 --> 00:58:08.760
Now, you can do the same thing
with a traditional deployment,

00:58:09.020 --> 00:58:11.020
which is really what I'm
going to recommend you do.

00:58:11.230 --> 00:58:13.630
Traditional deployment just means
that you are going to use the

00:58:13.660 --> 00:58:15.250
tools provided to you by Apple.

00:58:15.260 --> 00:58:17.700
There's a WoT SD that's
managing the communication.

00:58:17.700 --> 00:58:21.330
You're going to use
Apache as your web server.

00:58:21.530 --> 00:58:25.310
There's a WebObjects Apache model
that tells Apache how to

00:58:25.310 --> 00:58:26.920
handle WebObjects requests.

00:58:26.920 --> 00:58:31.550
And use the Java monitor to
start and stop your instances.

00:58:31.560 --> 00:58:36.030
And instead of just talking about that,
we're just going to show you quickly

00:58:36.210 --> 00:58:38.460
what Java Monitor looks like and how
to start and stop your instances.

00:58:38.460 --> 00:58:38.710
And instead of just talking about that,
we're just going to show you quickly

00:58:38.760 --> 00:58:39.000
what Java Monitor looks like and how
to start and stop your instances.

00:58:39.000 --> 00:58:40.200
and stop an instance.

00:58:40.200 --> 00:58:43.120
So we'll go back to demo.

00:58:44.060 --> 00:58:48.480
So yeah,
a deployment for WebObjects is pretty

00:58:48.480 --> 00:58:55.400
much a basic task you have to do
like more often than you will expect.

00:58:55.400 --> 00:58:59.780
And it's pretty simple if
you stay within the normal,

00:58:59.780 --> 00:59:02.400
small scale deployments.

00:59:02.400 --> 00:59:04.340
It can grow with you.

00:59:04.340 --> 00:59:05.630
You can script everything.

00:59:05.630 --> 00:59:07.120
You can call it from the command line.

00:59:07.120 --> 00:59:13.000
You can create complex staging scripts to
stage your application to a test server.

00:59:13.000 --> 00:59:18.960
It's using Ant for building
the deployable bundles.

00:59:19.000 --> 00:59:26.300
And the first thing I want to do here
is tell that this project is using the

00:59:26.300 --> 00:59:30.570
framework that is also in our workspace.

00:59:30.600 --> 00:59:34.420
And I just say that it has
a project reference to the

00:59:34.430 --> 00:59:36.790
social networking tools for J.

00:59:36.930 --> 00:59:43.050
and then I can go in here and say, oh,
I want to do something else

00:59:43.120 --> 00:59:48.580
because Jay talked about the
including everything deployment.

00:59:48.580 --> 00:59:50.540
I just want to make things hard for you.

00:59:50.540 --> 00:59:55.440
That would mean we have to embed
our frameworks and everything

00:59:55.440 --> 00:59:57.560
that is needed by the application.

00:59:57.560 --> 01:00:00.370
It's not a servlet
deployment I'm doing here,

01:00:00.400 --> 01:00:03.070
so I just, for now,
I take it easy and just

01:00:03.110 --> 01:00:04.800
say true in that case.

01:00:05.720 --> 01:00:07.680
I say,

01:00:08.090 --> 01:00:13.180
WebObjects is a web application
based on the WebObjects

01:00:13.180 --> 01:00:16.060
runtime and the system root.

01:00:16.060 --> 01:00:21.140
The system root is the
framework from your user home.

01:00:21.140 --> 01:00:25.230
The system root is the system frameworks.

01:00:25.230 --> 01:00:29.300
In that case, this is WebObjects itself.

01:00:29.370 --> 01:00:34.490
If you set this to true,
it will embed a whole WebObjects

01:00:34.490 --> 01:00:37.830
runtime to your application.

01:00:38.000 --> 01:00:42.850
You can deploy to a machine that just
has Java installed and the needed

01:00:43.050 --> 01:00:46.060
tools like Java Monitor and Votasty.

01:00:46.090 --> 01:00:48.060
And you have WebObjects there.

01:00:48.060 --> 01:00:54.270
It's running out of your application,
so you don't have to do much more.

01:00:54.280 --> 01:01:01.000
I click now on my project here and I say,
yeah, tools install.

01:01:01.000 --> 01:01:07.160
And because I set this as
a reference to my project.

01:01:08.090 --> 01:01:09.890
It automatically selected that one.

01:01:09.890 --> 01:01:15.820
Now, I can't really do that deployment
with the system frameworks right

01:01:15.830 --> 01:01:17.380
now because that will take too long.

01:01:17.380 --> 01:01:19.320
That's about 5,000 files.

01:01:19.320 --> 01:01:22.990
And that will take like three
to four minutes on that little

01:01:22.990 --> 01:01:25.360
hard drive we have prepared here.

01:01:25.360 --> 01:01:29.760
If you use the Java frameworks
from the new WebObjects nightly

01:01:29.760 --> 01:01:33.890
or from the WebObjects 5.4,
I learned that they are

01:01:33.890 --> 01:01:37.000
included since 5.2 something.

01:01:38.000 --> 01:01:41.120
These are just way less files.

01:01:41.120 --> 01:01:44.520
So it would be much faster,
but we haven't done that here.

01:01:44.520 --> 01:01:46.070
We use the standard frameworks.

01:01:46.070 --> 01:01:47.840
And so we don't want to do that.

01:01:47.840 --> 01:01:49.720
We don't want to copy 5,000 files now.

01:01:49.720 --> 01:01:53.120
What we have done here is prepared that.

01:01:53.120 --> 01:02:01.860
So I can go now to that library,
WebObjects, applications, the demo three.

01:02:01.860 --> 01:02:07.700
And this is what is built by Eclipse
if you go on the install dot dot.

01:02:08.000 --> 01:02:09.780
And then we can do the actual install.

01:02:09.860 --> 01:02:15.630
You can see in the contents in library
there are all the frameworks we need.

01:02:15.670 --> 01:02:16.590
There's Ajax framework.

01:02:16.630 --> 01:02:17.720
There's E-extensions.

01:02:17.720 --> 01:02:22.920
There are all the WebObjects framework
included right in our application bundle.

01:02:22.920 --> 01:02:26.860
We can take that, drag that to a server,
set it up,

01:02:26.860 --> 01:02:29.630
and be done with the deployment.

01:02:29.740 --> 01:02:31.850
The tools for that are here.

01:02:32.060 --> 01:02:35.100
Oops, that was one of our problem views.

01:02:35.110 --> 01:02:38.750
- That was our Twitter,
trying to bring down Twitter using

01:02:38.810 --> 01:02:40.120
WebObjects application.

01:02:40.120 --> 01:02:40.950
- Oh, okay.

01:02:40.960 --> 01:02:45.860
I have already added
that application here.

01:02:45.870 --> 01:02:52.100
And that is done by typing the name here,
using a wizard to just provide the path

01:02:52.420 --> 01:02:55.100
to the executable for our application.

01:02:55.100 --> 01:02:58.940
And then we get a
configured application here.

01:02:59.930 --> 01:03:04.900
Okay, that was prepared for the demo.

01:03:04.900 --> 01:03:08.400
So this is the path to our executable.

01:03:08.400 --> 01:03:10.590
It writes its logs to
library WebObjects logs.

01:03:10.690 --> 01:03:15.230
These are all default values,
so we haven't changed much in

01:03:15.230 --> 01:03:20.050
here besides just setting the
path to the actual application.

01:03:20.060 --> 01:03:25.260
And the detail view for
that application is here.

01:03:25.260 --> 01:03:29.240
This is one instance of this application.

01:03:29.380 --> 01:03:34.100
We could add more instances
to handle a higher load,

01:03:34.110 --> 01:03:40.090
to be able to have more
concurrent requests,

01:03:40.220 --> 01:03:41.040
and so on.

01:03:41.150 --> 01:03:45.860
So this can really scale on that
machine with more instances,

01:03:45.860 --> 01:03:48.970
and you can add more machines
and add instances there,

01:03:49.010 --> 01:03:51.470
too,
if you just deploy to these machines,

01:03:51.470 --> 01:03:56.220
too, and tell Java Monitor where it
can -- Java Monitor and the one

01:03:56.230 --> 01:03:58.820
thing that is in the background,
it coordinates,

01:03:58.820 --> 01:04:04.150
it's requests that come in from
the browsers to your application.

01:04:04.220 --> 01:04:06.930
The thing is called BotaskD.

01:04:06.960 --> 01:04:11.920
It knows about these applications because
Java Monitor writes a configuration file,

01:04:11.920 --> 01:04:15.160
and BotaskD reads it,
knows about the application,

01:04:15.160 --> 01:04:19.510
and can redirect requests
to these applications.

01:04:19.580 --> 01:04:21.360
And now this application is running.

01:04:21.360 --> 01:04:24.130
I can click on that,
and I hopefully don't

01:04:24.130 --> 01:04:25.830
see an error right now.

01:04:25.890 --> 01:04:31.070
Maybe I do, but it worked on the demo
hard drive quite fine,

01:04:31.180 --> 01:04:32.310
but -- Oh, yeah.

01:04:32.510 --> 01:04:33.040
Here we go.

01:04:33.040 --> 01:04:36.880
Here is that component that we
added that will not show up.

01:04:36.880 --> 01:04:37.300
Right.

01:04:37.380 --> 01:04:38.420
That's a news component.

01:04:38.450 --> 01:04:40.450
That's the thing that
takes longer to load.

01:04:40.550 --> 01:04:46.630
It does a call out to
Yahoo News with the WWDC08 search

01:04:46.680 --> 01:04:50.740
word and shows live news from --

01:04:50.740 --> 01:04:52.470
These news.

01:04:52.560 --> 01:04:55.240
Okay, news are gone.

01:04:55.270 --> 01:04:57.160
No longer there.

01:04:57.470 --> 01:05:03.500
So that was deployment with
the traditional VOA style,

01:05:03.500 --> 01:05:09.870
meaning we install from within Eclipse,
we take the created bundle with all our

01:05:10.350 --> 01:05:15.740
frameworks with WebObjects in there,
drag it to a folder on our server,

01:05:15.740 --> 01:05:20.960
and start it up with Java Monitor and
let Votacity coordinate the rest.

01:05:20.960 --> 01:05:22.800
Back to slides, please.

01:05:23.630 --> 01:05:27.810
So now we have shown you how to
create this whole entire WebObjects

01:05:27.810 --> 01:05:32.380
application from a fresh Eclipse
install all the way to deployment

01:05:32.380 --> 01:05:39.060
and using Java Monitor starting
and stopping the application.

01:05:41.550 --> 01:05:45.100
What's the point of a lot of the
stuff that we have shown you?

01:05:45.100 --> 01:05:46.950
Oh, yeah, I have to say it again.

01:05:46.960 --> 01:05:48.700
It's don't repeat yourself.

01:05:48.700 --> 01:05:51.650
I don't know whether it's
a third time or the X time.

01:05:51.660 --> 01:05:52.110
I don't know.

01:05:52.130 --> 01:05:55.010
Yeah, that is the motto of WebObjects.

01:05:55.090 --> 01:05:56.740
Do it once and debug it forever.

01:05:56.740 --> 01:05:59.920
Use Eclipse Volips tools.

01:05:59.970 --> 01:06:03.320
They are being worked on all the time.

01:06:03.340 --> 01:06:08.200
So just use them and learn
all the tips and tricks.

01:06:08.200 --> 01:06:10.660
There is tons of tips
and tricks in Eclipse.

01:06:11.320 --> 01:06:16.120
and it'll make your
development cycle really tight.

01:06:17.180 --> 01:06:19.840
So, and learn to use EOF.

01:06:20.190 --> 01:06:26.280
The Enterprise Objects Framework is one
of the very nice tools inside WebObjects.

01:06:26.300 --> 01:06:30.130
It helps you accessing a database
without writing SQL code,

01:06:30.130 --> 01:06:33.730
without handling all that
table generation stuff,

01:06:33.730 --> 01:06:34.430
and so on.

01:06:34.430 --> 01:06:37.620
You can do that,
and in some situations you have to,

01:06:37.660 --> 01:06:41.610
but you don't have to do it normally,
in your normal workflow.

01:06:41.760 --> 01:06:43.450
It provides you with the hooks.

01:06:43.470 --> 01:06:46.130
If you know how it works,
you can use these hooks.

01:06:46.180 --> 01:06:48.000
Otherwise,
it'll work just right out of the box.

01:06:48.000 --> 01:06:53.520
Also, leverage the powerful third-party
frameworks and libraries.

01:06:53.520 --> 01:06:57.980
As we've shown you, Wonder has tons of
stuff out there for you.

01:06:57.980 --> 01:07:00.870
There are similar open
source applications that

01:07:00.870 --> 01:07:02.560
are active and out there.

01:07:02.560 --> 01:07:05.850
If you need it, somebody probably written
something similar to it,

01:07:05.850 --> 01:07:08.010
go learn from them or
just use their stuff.

01:07:11.600 --> 01:07:15.060
and one of the key features
of modern applications is to

01:07:15.120 --> 01:07:17.800
integrate with external services.

01:07:17.800 --> 01:07:22.640
We have seen or we tried to
show the Twitter service,

01:07:22.640 --> 01:07:25.420
oh we didn't do that,
we didn't want to bring Twitter down

01:07:25.420 --> 01:07:26.840
with its Ruby on Rails implementation.

01:07:26.840 --> 01:07:27.340
I know.

01:07:27.350 --> 01:07:27.820
No worries.

01:07:27.880 --> 01:07:29.540
No.

01:07:29.540 --> 01:07:33.420
We used the Flickr API,
we accessed Yahoo News with a keyword

01:07:33.420 --> 01:07:37.560
to show news from Yahoo all inside
one simple WebObjects application by

01:07:37.560 --> 01:07:44.350
just using their provided Java APIs to
integrate a whole lot of network

01:07:44.350 --> 01:07:48.570
tools out there into one application.

01:07:48.660 --> 01:07:51.500
And if social networking
is not your thing,

01:07:51.600 --> 01:07:54.930
there are other services
you can be hooking up to,

01:07:54.930 --> 01:07:58.500
geolocation services,
to credit card services.

01:07:58.500 --> 01:08:02.860
It's just WebObjects is adding
and continuously improving web

01:08:02.890 --> 01:08:05.580
services as part of the framework.

01:08:05.580 --> 01:08:09.820
So just keep learning
about it and use it.

01:08:09.860 --> 01:08:11.700
And finally,
get involved in the community.

01:08:11.700 --> 01:08:13.130
It's an active community.

01:08:13.300 --> 01:08:18.080
We had a wonderful two days before
WWDC where we had lots of sessions.

01:08:18.130 --> 01:08:19.580
You spoke there as well.

01:08:19.850 --> 01:08:22.210
And it's a very active community.

01:08:22.210 --> 01:08:24.060
There are mailing lists.

01:08:24.060 --> 01:08:24.840
Join them.

01:08:24.990 --> 01:08:26.620
Learn from the people.

01:08:26.620 --> 01:08:27.920
Ask questions.

01:08:27.970 --> 01:08:29.570
And last but not least.

01:08:29.710 --> 01:08:30.230
Yeah.

01:08:30.230 --> 01:08:32.830
In our own interest, get training.

01:08:32.930 --> 01:08:35.230
If you don't know how to do it,
find someone who does

01:08:35.240 --> 01:08:36.450
and they'll show you how.

01:08:36.600 --> 01:08:39.020
And we'll give back to Pierre.

01:08:45.900 --> 01:08:48.650
I just want to say thank
you to Jay and Guido.

01:08:48.650 --> 01:08:51.950
At the same time,
I want to give you the date of the next

01:08:52.210 --> 01:08:56.680
training session they are organizing,
one in Seattle, one in Frankfurt.

01:08:59.070 --> 01:09:01.010
- I thought it was Atlanta.

01:09:01.120 --> 01:09:02.130
Okay, Frankfurt.

01:09:02.480 --> 01:09:08.820
And also, they would organize training
session for you if you don't

01:09:08.820 --> 01:09:12.540
want to go in those training
which are just regular classroom.

01:09:12.610 --> 01:09:15.760
You can actually ask them
to organize custom training.

01:09:15.760 --> 01:09:17.160
- Custom training and custom training.

01:09:17.160 --> 01:09:19.660
- I know they do that
regularly for groups.

01:09:19.660 --> 01:09:23.600
So if you have got a group of
developers that you want to train,

01:09:23.600 --> 01:09:25.430
that's a new problem.

01:09:27.100 --> 01:09:32.140
Again, if you want to know more,
Matt is here and he's going to join us on

01:09:32.140 --> 01:09:34.940
this stage for the question and answers.

01:09:34.940 --> 01:09:41.620
Documentation, community, labs.

01:09:42.380 --> 01:09:47.410
Why is there normally two labs?

01:09:47.410 --> 01:09:47.410
There is one on Wednesday and
one on Thursday.

01:09:47.910 --> 01:09:48.900
There is one that disappeared.

01:09:48.900 --> 01:09:49.200
Okay.

01:09:49.200 --> 01:09:51.660
It's meant to be two labs.

01:09:51.710 --> 01:09:53.160
There is one on Wednesday,
one on Thursday.

01:09:53.210 --> 01:09:57.580
And there is a community event on
Thursday afternoon where you are going to

01:09:57.580 --> 01:10:02.760
have a number of developers showing their
great apps and talking about WebObjects.

01:10:02.760 --> 01:10:04.740
So if you want to know
more about WebObjects,

01:10:04.740 --> 01:10:06.140
that's a great place to go.