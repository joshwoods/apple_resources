WEBVTT

00:00:20.540 --> 00:00:22.840
Good morning.

00:00:22.840 --> 00:00:28.210
Thanks for coming out this
last morning of the week.

00:00:28.260 --> 00:00:29.040
I know it's been a busy week.

00:00:29.040 --> 00:00:31.400
We've thrown a lot of
stuff at you this week.

00:00:31.400 --> 00:00:34.990
But we're going to cover some
pretty important stuff this morning,

00:00:34.990 --> 00:00:37.030
so I'm glad you guys all made it out.

00:00:37.890 --> 00:00:42.280
As you may or may not know,
virtually every application

00:00:42.280 --> 00:00:45.630
on the phone uses table views,
and virtually everyone that does

00:00:45.630 --> 00:00:47.430
customizes them in some way.

00:00:47.440 --> 00:00:51.650
So we're really going to get
into a lot of that this morning.

00:00:51.760 --> 00:00:54.140
How to make the table view
do some pretty cool stuff,

00:00:54.140 --> 00:00:57.700
and really customize the look
and feel of your application.

00:00:58.030 --> 00:01:00.000
Didn't realize it advanced.

00:01:00.000 --> 00:01:00.900
My name is Jason Beaver.

00:01:00.900 --> 00:01:03.600
I work on the UI kit team.

00:01:03.600 --> 00:01:06.580
There were a couple of sessions
earlier this week that talked

00:01:06.660 --> 00:01:10.930
about basics of table views,
how to get some content in there.

00:01:11.080 --> 00:01:14.150
If you're a desktop Cocoa developer,
you might have gone to the iPhone

00:01:14.150 --> 00:01:17.140
for Mac developers session,
and they talked some basic stuff about

00:01:17.140 --> 00:01:22.060
how it's different than the desktop
table view and how to load content in.

00:01:22.300 --> 00:01:24.060
If you're new to the
Mac or iPhone platform,

00:01:24.060 --> 00:01:27.700
you might have gone to the
Understanding iPhone Table Views session.

00:01:27.740 --> 00:01:30.700
And again,
they cover the same basic stuff there.

00:01:30.700 --> 00:01:32.580
We're going to kind of pick
up from where that left off.

00:01:32.740 --> 00:01:34.700
We're not going to cover anything basic.

00:01:34.700 --> 00:01:38.770
We're just going to jump right into how
to do some of the advanced features.

00:01:39.940 --> 00:01:44.680
So we're going to cover
three basic areas.

00:01:44.680 --> 00:01:49.030
We're going to talk about editing in the
table view and how you can control that.

00:01:49.120 --> 00:01:52.330
We're going to talk about a couple
of different ways you can customize

00:01:52.330 --> 00:01:54.040
the cells in the table view.

00:01:54.160 --> 00:01:58.540
And then we're going to talk
about inserting and deleting.

00:01:58.640 --> 00:02:00.790
So let's start with editing.

00:02:04.570 --> 00:02:05.470
You've probably seen this.

00:02:05.540 --> 00:02:07.160
This is the phone application.

00:02:07.160 --> 00:02:10.640
When you edit this,
we indent the content,

00:02:10.690 --> 00:02:12.700
make room for some editing
controls on the side.

00:02:12.700 --> 00:02:15.370
We also add a few rows.

00:02:16.020 --> 00:02:18.240
In other applications
like the World Clock,

00:02:18.240 --> 00:02:21.150
you'll notice the time on the
right hand side and the day of the

00:02:21.150 --> 00:02:24.660
week actually slides out to the
right when we go into editing mode.

00:02:28.170 --> 00:02:30.140
Some things like the stock
applications actually don't

00:02:30.270 --> 00:02:31.600
transition into editing mode.

00:02:31.600 --> 00:02:33.250
You flip them over,
there's a different table view

00:02:33.260 --> 00:02:35.020
that's already in editing mode.

00:02:35.260 --> 00:02:37.500
So there's a lot of different
ways your users can interact with

00:02:37.500 --> 00:02:39.680
the content of the table view.

00:02:40.580 --> 00:02:43.150
So there's one method to put the
table view into editing mode,

00:02:43.150 --> 00:02:44.840
and that is set editing animated.

00:02:44.840 --> 00:02:46.680
The first argument says
whether you want to transition

00:02:46.750 --> 00:02:48.900
into or out of editing mode.

00:02:48.950 --> 00:02:53.040
And the last argument says whether you
want to do this in an animated fashion.

00:02:53.190 --> 00:02:56.150
If the table view is on the screen
and the user is looking at it,

00:02:56.190 --> 00:02:58.500
you probably want to do
that in an animated fashion.

00:02:58.620 --> 00:03:01.500
But if you're getting ready to bring
that table view in from off screen,

00:03:01.620 --> 00:03:04.500
or you're just launching the app and
you want to leave it in that state,

00:03:04.620 --> 00:03:07.810
you probably want to do that
in a non-animated fashion.

00:03:08.060 --> 00:03:13.440
So, we're going to show several kind of
examples of how we can control editing.

00:03:13.560 --> 00:03:16.440
On the left-hand side,
there's a plain style table view,

00:03:16.440 --> 00:03:19.340
and on the right is a
group style table view.

00:03:19.450 --> 00:03:24.920
And if you just take a stock table view
and call set editing animated on it,

00:03:25.700 --> 00:03:28.250
All the rows will inset a little bit,
and we'll see a bunch of remove

00:03:28.250 --> 00:03:29.860
controls down the left-hand side.

00:03:29.900 --> 00:03:33.720
We'll also see a bunch of reorder
controls down the right-hand side.

00:03:36.100 --> 00:03:38.170
But you don't always want to
allow the users to edit every

00:03:38.170 --> 00:03:41.000
single row in the table view,
so there's a delegate method

00:03:41.000 --> 00:03:46.220
you can implement called
Table View Can Edit Row and Index Path.

00:03:46.250 --> 00:03:49.480
So here we've got an example where a
delegate has implemented this method,

00:03:49.480 --> 00:03:51.180
and we've turned no for
the first four rows.

00:03:51.180 --> 00:03:54.590
When we transition into editing mode,
notice the first four

00:03:54.590 --> 00:03:56.130
rows remain unchanged.

00:04:00.620 --> 00:04:02.300
Now, if you don't do anything else,
you get the remove control

00:04:02.300 --> 00:04:04.440
on the left-hand side,
but you can control that as well.

00:04:04.440 --> 00:04:06.620
We have an editing
style that you can set,

00:04:06.790 --> 00:04:08.910
and there are four or
three basic editing styles.

00:04:08.940 --> 00:04:11.140
There's the none,
which indicates you don't

00:04:11.140 --> 00:04:14.080
want anything to appear there,
and the user can't insert

00:04:14.080 --> 00:04:15.600
or delete on this row.

00:04:16.150 --> 00:04:19.240
And there's the delete control we saw,
and there's also an insert control.

00:04:19.320 --> 00:04:24.200
So here we've implemented our delegate
to return none for the first three rows,

00:04:24.200 --> 00:04:26.590
and delete for the next three,
and insert for the remaining.

00:04:27.490 --> 00:04:31.850
And as we transition into editing mode,
you'll see how that looks.

00:04:31.940 --> 00:04:36.500
Notice that when we said on the group
style that you can't edit a row,

00:04:36.500 --> 00:04:38.510
the content doesn't inset.

00:04:38.780 --> 00:04:44.200
Excuse me, if you do say it can edit,
but you return an editing style of none,

00:04:44.200 --> 00:04:45.990
it will inset.

00:04:48.910 --> 00:04:52.020
You can also control whether that reorder
control appears on the right-hand side on

00:04:52.020 --> 00:04:57.340
a per row basis using the delegate method
table view can move row at index path.

00:04:58.310 --> 00:05:01.030
Here we've specified that the
first four rows cannot be moved,

00:05:01.030 --> 00:05:05.480
and when we transition into editing mode,
you'll see there's no reorder

00:05:05.550 --> 00:05:07.700
control over on the right.

00:05:12.370 --> 00:05:14.970
So in the group style table view,
there's one additional

00:05:14.970 --> 00:05:18.430
thing you can control,
which is should that rounded rectangle

00:05:18.500 --> 00:05:20.820
indent when we go into editing mode?

00:05:20.830 --> 00:05:25.570
You notice in the stocks application,
the editing controls appear

00:05:25.640 --> 00:05:26.860
inside that rounded rectangle.

00:05:26.960 --> 00:05:30.230
So there's a delegate method you can
implement called table view should

00:05:30.310 --> 00:05:33.820
indent while editing row and index path.

00:05:33.990 --> 00:05:36.820
So here we've got group style table view.

00:05:37.030 --> 00:05:40.600
And on the left hand side,
we're going to specify

00:05:40.600 --> 00:05:41.310
that it should not indent.

00:05:41.320 --> 00:05:42.960
And on the right hand side,
we'll specify it does.

00:05:43.030 --> 00:05:45.830
And you can see how the
content still insets,

00:05:45.890 --> 00:05:48.400
but the rounded rectangle stays the same.

00:05:48.440 --> 00:05:50.180
If you implement this on
a plain style table view,

00:05:50.180 --> 00:05:52.610
it doesn't actually do anything.

00:05:53.400 --> 00:05:57.480
So everything up to this point has been
about how to control the appearance

00:05:57.610 --> 00:06:02.060
of the table view and each individual
row while going into editing mode.

00:06:02.880 --> 00:06:05.030
Now that you're in editing mode,
the user can interact with those

00:06:05.030 --> 00:06:06.010
editing controls on the left.

00:06:06.120 --> 00:06:09.410
And by default,
if they hit the delete control,

00:06:09.690 --> 00:06:12.800
a little delete button will animate
it on the right to confirm that.

00:06:12.800 --> 00:06:16.800
If they hit the insert control,
you're asked directly to deal with that.

00:06:16.800 --> 00:06:19.720
But in either case,
you're going to get sent a

00:06:19.720 --> 00:06:23.790
table view commit editing style
for row and index path method.

00:06:25.250 --> 00:06:28.300
And let's look at a little sample
implementation of what you might do here.

00:06:28.550 --> 00:06:30.340
In this case,
we're only handling the delete,

00:06:30.380 --> 00:06:33.160
but you could do a similar
thing for the insert.

00:06:33.460 --> 00:06:37.420
The first thing you need to do is
delete the object from your model.

00:06:39.200 --> 00:06:42.540
Because when you next tell the
table view to delete that row,

00:06:42.540 --> 00:06:45.210
we're gonna turn around and query
you about your model to make

00:06:45.210 --> 00:06:46.880
sure we've got everything right.

00:06:46.880 --> 00:06:50.590
And the remaining thing is you need to
tell the table view to delete the row.

00:06:51.150 --> 00:06:54.450
And you do this by calling
the delete rows at index path

00:06:54.730 --> 00:06:55.880
with row animation method.

00:06:55.880 --> 00:06:58.880
We'll cover this in a little
more detail a little later.

00:06:58.880 --> 00:07:02.830
But basically this will tell the
table view to animate that row out.

00:07:05.530 --> 00:07:08.400
You also need to handle the case
where the user is reordering using the

00:07:08.400 --> 00:07:10.400
reorder controls over on the right.

00:07:10.400 --> 00:07:16.400
And you do this with the TableView move
row at index path to index path method.

00:07:16.620 --> 00:07:18.500
This implementation is pretty simple.

00:07:18.500 --> 00:07:22.500
All you have to do is update your
model to reflect the new state,

00:07:22.500 --> 00:07:25.600
because visually the user's already
moved and dropped that row there,

00:07:25.600 --> 00:07:29.290
so visually the table view already
reflects the new destination.

00:07:29.580 --> 00:07:32.170
So you just need to update
your model to match that.

00:07:38.190 --> 00:07:42.640
Now, every point in the table view might
not be a valid drop point for that

00:07:42.640 --> 00:07:46.750
row that the user's trying to reorder,
so you can control this using the table

00:07:47.300 --> 00:07:52.280
view target index path for move from row
at index path to proposed index path,

00:07:52.280 --> 00:07:54.220
which is quite a mouthful.

00:07:57.800 --> 00:07:59.560
Here's a little sample
implementation of that.

00:07:59.560 --> 00:08:03.560
You basically first need to
validate that drop point.

00:08:03.560 --> 00:08:06.490
Now, this validate reorder
destination for row method is

00:08:06.490 --> 00:08:08.460
something you'd need to provide.

00:08:08.500 --> 00:08:10.390
It's not something you can
call on our objects because we

00:08:10.390 --> 00:08:14.370
don't know where it might be a
valid drop point in your model.

00:08:14.640 --> 00:08:17.540
And if that's not a valid drop point,
you just need to return an alternate one.

00:08:17.540 --> 00:08:20.720
So again, we call this method alternate
reorder destination for row.

00:08:20.760 --> 00:08:23.100
That would be something you'd provide.

00:08:23.160 --> 00:08:26.590
But if that is an okay place to drop it,
all you need to do is return

00:08:26.590 --> 00:08:30.360
that proposed destination index
path that was passed into you,

00:08:30.390 --> 00:08:33.150
and we'll open up a gap at that location.

00:08:35.410 --> 00:08:39.260
So we're going to look at a demo now.

00:08:39.290 --> 00:08:42.760
If you've come to one of several sessions
earlier in the week where we've been

00:08:42.760 --> 00:08:45.990
building this recipes application,
we're going to sort of finish it up a

00:08:45.990 --> 00:08:50.330
little bit this morning by adding the
ability to edit a couple of places.

00:08:50.540 --> 00:08:53.800
So the first thing we're going to do
is in that recipes list at the top,

00:08:53.830 --> 00:08:57.480
we're going to allow users to
delete the various recipes.

00:08:57.620 --> 00:09:01.040
And in the detail pane,
we're going to allow the user to delete

00:09:01.460 --> 00:09:04.090
some of the individual ingredients.

00:09:17.800 --> 00:09:31.810
Let's just remind everybody
where we're starting out with.

00:09:31.960 --> 00:09:33.820
So we have a recipes application here.

00:09:33.920 --> 00:09:35.700
It's got a top-level list of recipes.

00:09:35.700 --> 00:09:38.700
Each row has a picture and a recipe name.

00:09:38.760 --> 00:09:41.170
And if we click on one of these,
there's a detail view where

00:09:41.170 --> 00:09:45.500
we can see a category,
an ingredient list, instructions,

00:09:45.500 --> 00:09:48.290
and there's a few other
things we can do here as well.

00:09:50.780 --> 00:09:54.960
So the first thing we want to do is
in that top level view controller,

00:09:54.960 --> 00:09:57.800
which is our recipes list
table view controller,

00:09:57.840 --> 00:09:59.910
we need to put an edit button.

00:10:00.800 --> 00:10:04.350
So we'll specify that the
navigation item's left bar

00:10:04.350 --> 00:10:07.090
button is an edit button item.

00:10:08.980 --> 00:10:10.480
And because we're a
table view controller,

00:10:10.480 --> 00:10:13.780
this will automatically transition our
table view in and out of editing mode.

00:10:13.840 --> 00:10:16.840
But we need to handle those two delegate
methods that we're going to get when

00:10:16.840 --> 00:10:20.540
users delete or reorder recipes.

00:10:20.660 --> 00:10:23.370
So we're going to start by
implementing the table view

00:10:23.370 --> 00:10:24.960
commit editing style method.

00:10:26.190 --> 00:10:28.100
We're only going to handle
the delete in this case,

00:10:28.220 --> 00:10:31.290
so we'll check to make sure
we are getting the delete.

00:10:31.410 --> 00:10:38.040
We'll simply remove the object from
our recipes at the index as specified.

00:10:38.120 --> 00:10:43.090
And then we'll tell the table view to
delete that row with row animation left,

00:10:43.110 --> 00:10:47.000
which will cause it to
slide out to the left.

00:10:47.020 --> 00:10:49.770
Scroll up here?

00:10:49.850 --> 00:10:51.690
Okay, sorry.

00:10:59.280 --> 00:11:02.570
We also need to implement the
delegate method to handle reordering.

00:11:02.600 --> 00:11:09.000
So we'll implement the table view move
row at index path to index path method.

00:11:09.150 --> 00:11:15.080
Let me, yeah,
we'll bring these down a little bit

00:11:15.140 --> 00:11:16.920
so everybody can see what these are.

00:11:20.990 --> 00:11:26.900
So we need to get the recipe
that's represented by--

00:11:26.900 --> 00:11:29.090
that we're looking at here.

00:11:30.100 --> 00:11:34.600
And we need to remove that object from
the recipes at the index where it was,

00:11:34.600 --> 00:11:38.280
and just add it back at the new location.

00:11:40.560 --> 00:11:43.450
We need to do a similar thing over in
the recipe detail view controller so that

00:11:43.450 --> 00:11:46.250
we can reorder that list of ingredients.

00:11:46.530 --> 00:11:49.890
So in our init with style,
we'll also add an editing button in,

00:11:49.900 --> 00:11:51.960
this time on the right side.

00:11:55.040 --> 00:11:57.550
And we'll implement those
same two delegate methods.

00:11:57.730 --> 00:12:03.310
The table view commit editing
style for row and index path.

00:12:07.690 --> 00:12:11.920
And here we're going to check to see if
the section is the ingredients section,

00:12:11.920 --> 00:12:15.210
and also check the editing
style to make sure it's delete.

00:12:19.400 --> 00:12:22.550
And if it is,
we'll remove that ingredient at that

00:12:22.690 --> 00:12:30.900
index and tell the table view to
delete the row at that index path.

00:12:31.010 --> 00:12:34.720
We also need to implement
the move row at index path.

00:12:35.480 --> 00:12:40.320
And we'll just get the ingredient
that was specified there,

00:12:40.350 --> 00:12:46.460
remove that from the ingredients list,
and add it back at the new location.

00:12:51.160 --> 00:12:56.980
So if we run the demo now,
so you have an edit control,

00:12:56.980 --> 00:13:00.310
and if we click on that,
we'll transition into editing mode.

00:13:00.400 --> 00:13:05.900
And if we go into a particular recipe,
we can transition into editing mode now.

00:13:05.900 --> 00:13:10.630
And we can reorder these
and delete these as well.

00:13:15.970 --> 00:13:19.950
If you notice down in the detail,
we have edit controls everywhere

00:13:20.550 --> 00:13:23.050
on our category and instructions.

00:13:23.060 --> 00:13:23.900
We really don't want that.

00:13:23.900 --> 00:13:26.100
We really only want the user
to be able to delete the

00:13:26.190 --> 00:13:27.660
rows in the ingredients list.

00:13:27.800 --> 00:13:30.420
So let's see how we would fix this.

00:13:32.790 --> 00:13:34.860
We want to implement one
additional delegate method.

00:13:34.900 --> 00:13:40.570
That's the table view editing
style for row and index path.

00:13:43.700 --> 00:13:47.200
And if the index path dot section
is the ingredient section,

00:13:47.270 --> 00:13:48.900
so we're looking at a row
in the ingredient section,

00:13:48.900 --> 00:13:51.840
we're going to return
editing style delete.

00:13:51.910 --> 00:13:54.200
Otherwise,
we're going to return editing style none.

00:13:54.200 --> 00:14:00.300
So now let's see how that looks.

00:14:06.860 --> 00:14:08.980
So it looks better,
but we still have reorder

00:14:08.980 --> 00:14:10.220
controls everywhere.

00:14:10.220 --> 00:14:13.710
We really only want them
to reorder ingredients.

00:14:14.510 --> 00:14:18.100
So let's step back and also
implement the table view can

00:14:18.100 --> 00:14:20.600
move row and index path method.

00:14:20.930 --> 00:14:23.140
Again, we'll check to see if we're
looking at the Ingredients section.

00:14:23.140 --> 00:14:25.600
If so, we'll say yes, that can be moved.

00:14:25.810 --> 00:14:27.740
Otherwise, we can't move that row.

00:14:27.740 --> 00:14:36.030
So let's see how this looks.

00:14:45.120 --> 00:14:47.300
Okay, this looks pretty good.

00:14:47.360 --> 00:14:49.500
So let's see,
we can pick up a row and reorder it,

00:14:49.500 --> 00:14:53.100
but ooh, we can actually drag this
down into other sections.

00:14:53.100 --> 00:14:55.710
That's probably also not what we want.

00:14:55.810 --> 00:14:58.730
So let's go implement that
additional delegate method to

00:14:58.860 --> 00:15:01.800
control where is a valid drop point.

00:15:02.160 --> 00:15:07.140
So this is the table view,
target index path for move from row

00:15:07.140 --> 00:15:10.990
at index path to proposed index path.

00:15:12.210 --> 00:15:15.440
We'll check to see if the place we're
trying to drop the section for that

00:15:15.440 --> 00:15:17.140
is prior to the ingredients section.

00:15:17.140 --> 00:15:20.600
We'll just open a gap at the very
first row of the ingredients section.

00:15:20.600 --> 00:15:23.650
That's row zero in the
ingredients section.

00:15:34.870 --> 00:15:34.870
And if we're trying to drop at a section
that's after the ingredients section,

00:15:34.870 --> 00:15:34.870
we'll just open a row at the end,
basically the last row in

00:15:34.870 --> 00:15:34.870
the ingredients section.

00:15:36.900 --> 00:15:39.500
Otherwise, we'll just return the
one that's passed in.

00:15:39.500 --> 00:15:41.240
So if you're within
the ingredient section,

00:15:41.240 --> 00:15:43.870
we'll just open a row
right below your finger.

00:15:53.030 --> 00:15:56.100
All right, let's try this now.

00:15:56.160 --> 00:15:58.100
Still pick up a row here, but good.

00:15:58.100 --> 00:15:59.840
I can't drag it down here.

00:15:59.840 --> 00:16:00.810
I can't drag it up here.

00:16:00.890 --> 00:16:04.880
If I let go,
it'll snap back to the gap we opened.

00:16:04.880 --> 00:16:07.520
All right, let's go back to slides.

00:16:14.850 --> 00:16:16.800
So now we're going to get into
a little bit about how you can

00:16:16.800 --> 00:16:18.040
customize the cells in your table view.

00:16:18.040 --> 00:16:20.240
And there's, like I mentioned before,
two ways.

00:16:20.450 --> 00:16:23.690
You can just add subviews indirectly,
and you can subclass the cell.

00:16:23.760 --> 00:16:28.110
So let's first talk about how to
add subviews directly to the cell.

00:16:28.540 --> 00:16:31.880
I want to briefly cover again
sort of the anatomy of a cell.

00:16:31.880 --> 00:16:33.590
If you went to the
Understanding Table Views session,

00:16:33.600 --> 00:16:36.170
you're familiar with this slide.

00:16:37.150 --> 00:16:41.540
On the left hand side is an image,
and in the middle is a text label

00:16:41.540 --> 00:16:45.090
that will stretch to fill the full
width if there isn't an image.

00:16:45.190 --> 00:16:46.400
And on the right is an accessory view.

00:16:46.400 --> 00:16:48.620
There's several built-in types,
and you can of course put

00:16:48.620 --> 00:16:50.920
your own views over there.

00:16:50.990 --> 00:16:54.300
But in the middle,
that you can't really see,

00:16:54.330 --> 00:16:55.910
is a content view.

00:16:56.960 --> 00:17:00.700
And this content view is where you're
going to add your own subviews.

00:17:00.770 --> 00:17:03.540
Because remember,
a cell on the iPhone is actually a view,

00:17:03.540 --> 00:17:05.740
and so you can return an
entire view hierarchy here,

00:17:05.740 --> 00:17:08.990
and it'll get placed at the
appropriate spot in the table view.

00:17:10.400 --> 00:17:15.080
The content view will inset automatically
as you go into and out of editing mode.

00:17:15.320 --> 00:17:20.150
So if you put your sub views in there and
set up appropriate auto resizing masks,

00:17:20.160 --> 00:17:24.150
they'll move around as appropriate
to stay within that content view.

00:17:24.520 --> 00:17:26.740
Here's what it looks
like in a group style.

00:17:26.740 --> 00:17:30.640
It's basically entirely the area
inside the rounded rectangle,

00:17:30.690 --> 00:17:32.000
but when you transition
into editing mode,

00:17:32.000 --> 00:17:35.710
we'll make room for some
controls on the left and right.

00:17:35.960 --> 00:17:37.600
So let's look at a rather complex cell.

00:17:37.600 --> 00:17:40.200
This is one of the YouTube cells.

00:17:41.680 --> 00:17:45.530
Everything to the left of that
accessory view is the content view.

00:17:45.630 --> 00:17:49.000
And if we sort of break this down,
you'll see we have a content

00:17:49.150 --> 00:17:53.010
view that fills that entire area,
and it has a bunch of sub views,

00:17:53.070 --> 00:17:57.790
basically labels, image views,
a little rating control.

00:18:01.560 --> 00:18:02.690
So great,
we know we're going to add these

00:18:02.690 --> 00:18:05.480
sub views to the content view,
but how do we configure these

00:18:05.590 --> 00:18:06.600
for optimal performance?

00:18:06.680 --> 00:18:10.060
If you went to any of several
performance sessions this week,

00:18:10.160 --> 00:18:13.900
you know we're really performance
sensitive on the device,

00:18:13.910 --> 00:18:16.420
and we need to do everything we
can to make performance fast.

00:18:16.490 --> 00:18:20.030
So the first thing you need to
do is make sure all of these

00:18:20.180 --> 00:18:21.970
views you add are opaque.

00:18:22.540 --> 00:18:25.330
Now, at first this seems like
maybe not what you want,

00:18:25.330 --> 00:18:27.320
because when we select,
we put this nice blue

00:18:27.320 --> 00:18:30.740
gradient behind the row,
and you want to make sure that you

00:18:30.780 --> 00:18:35.200
don't obscure part of that with a big,
you know, solid opaque rectangle.

00:18:35.350 --> 00:18:38.120
But the table view takes care
of a lot of this for you.

00:18:38.330 --> 00:18:41.600
It will actually crawl through
the entire view hierarchy,

00:18:41.680 --> 00:18:47.350
marking views non-opaque when they're
a sub-view of a row that's selected.

00:18:47.460 --> 00:18:50.850
Also make sure the backgrounds are
all clear and do some other cleanup.

00:18:50.860 --> 00:18:53.400
And then we'll put all that
back when the row is no longer

00:18:53.490 --> 00:18:56.230
selected so you get nice,
fast scrolling performance.

00:18:58.040 --> 00:19:01.180
You want to make sure that those
rectangles or those subviews have the

00:19:01.180 --> 00:19:02.600
same background color as your cell.

00:19:02.600 --> 00:19:04.930
Now this is typically white.

00:19:07.330 --> 00:19:11.520
And you want to specify an
alternate highlight display.

00:19:11.640 --> 00:19:12.500
So here's an example.

00:19:12.600 --> 00:19:14.420
This is out of the Settings application.

00:19:14.640 --> 00:19:19.100
If you look at that middle row where
it says Show and 50 Recent Messages,

00:19:19.230 --> 00:19:23.460
Notice that the labels are black
on the left-hand side and blue

00:19:23.460 --> 00:19:25.430
over on the right-hand side.

00:19:25.650 --> 00:19:28.730
- But when we select those,
we want them to go to white.

00:19:29.020 --> 00:19:31.290
So all you need to do to do this,

00:19:32.060 --> 00:19:37.930
is, if you're using a label,
set the highlighted text color.

00:19:38.190 --> 00:19:41.010
If you have your own control,
you just need to make sure that

00:19:41.030 --> 00:19:44.720
control has a highlighted property,
and set some alternate

00:19:44.720 --> 00:19:46.820
display when that's set.

00:19:46.890 --> 00:19:49.640
And if you watch carefully
as this row deselects,

00:19:49.640 --> 00:19:52.140
it'll do that in an animated fashion,
and when we get to right at

00:19:52.140 --> 00:19:55.840
the midpoint of the animation,
we'll toggle that highlighted flag,

00:19:55.840 --> 00:19:58.990
and all your controls will be asked to
redraw with the new highlighted state.

00:19:59.110 --> 00:20:01.780
And then once the animation completes,
we'll go through,

00:20:01.790 --> 00:20:05.360
mark everything opaque again,
reset the background colors, so again,

00:20:05.370 --> 00:20:07.710
you get nice, fast scrolling performance.

00:20:09.210 --> 00:20:11.660
So we're going to look at
another little demo here.

00:20:11.660 --> 00:20:16.470
We're going to continue to
extend the recipes application.

00:20:16.600 --> 00:20:19.350
In the ingredients list,
we're going to add an amount

00:20:19.350 --> 00:20:21.190
field over on the right.

00:20:34.900 --> 00:20:38.300
So we're in our Recipe
Detail View Controller.

00:20:38.300 --> 00:20:41.530
We're going to be adding a subview here,
and so we need a way to get a hold of

00:20:41.690 --> 00:20:43.800
that later when we're reusing that cell.

00:20:43.800 --> 00:20:48.850
So we're going to add a tag that
we'll just assign to that cell,

00:20:48.910 --> 00:20:50.790
and then we can access it later.

00:20:54.400 --> 00:20:58.990
Now in our cell for row
at index path method,

00:20:58.990 --> 00:21:01.010
we're going to check to see if we're
dealing with the ingredients section,

00:21:01.020 --> 00:21:04.700
because we want to return a
different type of cell in this case.

00:21:04.970 --> 00:21:09.320
So we'll create a different
ingredient cell identifier to

00:21:09.320 --> 00:21:11.870
identify those types of cells.

00:21:12.960 --> 00:21:15.880
And we're going to attempt to dequeue
a reusable cell with that identifier.

00:21:16.120 --> 00:21:18.330
And if we don't get one,
we'll allocate a new one.

00:21:18.340 --> 00:21:21.660
This is basically the same pattern
you've been seeing all week.

00:21:23.400 --> 00:21:26.380
We're then going to add an
amount label over on the right.

00:21:26.380 --> 00:21:29.080
So this first line just
creates a rectangle for that,

00:21:29.280 --> 00:21:32.510
and then this will allocate that label.

00:21:32.770 --> 00:21:35.590
And we'll set the auto-resizing mask
so there's a flexible left margin.

00:21:35.690 --> 00:21:39.690
So as the cell goes into editing control,
that'll stay sort of pinned to the

00:21:39.690 --> 00:21:42.170
right side of that content view.

00:21:44.490 --> 00:21:47.660
We'll assign it a tag, again,
so we can find it later.

00:21:47.950 --> 00:21:50.900
And we'll set its alignment
to text align right.

00:21:50.900 --> 00:21:52.540
This will keep it no matter
what we put in there,

00:21:52.540 --> 00:21:56.200
it'll stay right aligned with
the edge of that content view.

00:21:56.260 --> 00:21:58.670
We'll set a text color here
to that bluish color that

00:21:58.940 --> 00:22:00.970
you've seen a lot of places.

00:22:01.730 --> 00:22:04.930
And we'll set that highlighted text
color so that when the row is selected,

00:22:04.930 --> 00:22:07.800
we'll toggle over to a white color.

00:22:09.740 --> 00:22:14.600
And at this point we'll just add that
as a sub-view of our content view.

00:22:14.600 --> 00:22:18.430
And then release the label.

00:22:19.630 --> 00:22:22.140
So now we have a cell,
whether we just created it

00:22:22.140 --> 00:22:26.210
or whether we dequeued it,
we need to fill it in.

00:22:26.670 --> 00:22:29.500
So we're going to get the
Ingredients Dictionary,

00:22:29.520 --> 00:22:31.700
and we're just going to use
the cells built-in label to

00:22:32.080 --> 00:22:34.590
specify the ingredient name.

00:22:37.620 --> 00:22:41.270
And then we're going to ask
the cell for the view with tag,

00:22:41.270 --> 00:22:45.700
amount tag, to get a hold of that amount
label that we threw in there.

00:22:45.800 --> 00:22:47.990
And we're just going
to put the amount in.

00:22:47.990 --> 00:22:50.610
This amount's already in our model.

00:22:51.310 --> 00:22:54.600
So all we need to do at this
point is return this cell.

00:22:54.660 --> 00:22:59.240
Now, this is for the Ingredients section,
so we can come down here below where we

00:22:59.240 --> 00:23:00.520
were handling the Ingredients section.

00:23:00.520 --> 00:23:03.990
We don't need to handle it here
now since it's handled above.

00:23:14.400 --> 00:23:17.040
All right, now we've got the amounts
over on the right hand side.

00:23:17.040 --> 00:23:20.600
Notice as we transition into
and out of editing mode,

00:23:20.820 --> 00:23:23.240
Those automatically stay
against the right-hand side.

00:23:23.240 --> 00:23:26.200
All right, let's go back to slides.

00:23:32.360 --> 00:23:36.010
So that's great, it's really easy to do,
but sometimes you need a little

00:23:36.180 --> 00:23:40.000
more control of what happens when
you go into or out of editing mode,

00:23:40.000 --> 00:23:42.880
or some other state changes in your cell.

00:23:42.880 --> 00:23:48.490
This is when customizing your cells
by subclassing is a great way to go.

00:23:49.650 --> 00:23:51.400
So, how do we do this?

00:23:51.510 --> 00:23:53.120
Well,
the first thing is that your content's

00:23:53.120 --> 00:23:55.830
added in exactly the same way.

00:23:56.120 --> 00:23:59.290
When you create your subclasses cell,
you're still going to create

00:23:59.290 --> 00:24:03.650
separate views and add those as
subviews to the content view.

00:24:03.880 --> 00:24:06.690
But now you have some control
over the positions of those

00:24:06.790 --> 00:24:09.120
things as state changes,
because you can simply override the

00:24:09.120 --> 00:24:13.460
appropriate methods and reposition
these things as appropriate.

00:24:17.330 --> 00:24:20.150
So I mentioned that world clock example.

00:24:20.370 --> 00:24:25.390
Again, notice that the time and the day
of the week slide out to the right.

00:24:26.960 --> 00:24:29.300
We couldn't have done this
by just adding those views as

00:24:29.300 --> 00:24:31.360
sub views of the content view.

00:24:31.360 --> 00:24:34.450
We really needed some control
there to cause them to move

00:24:34.450 --> 00:24:38.350
outside the visible area when
we transition into editing mode.

00:24:40.690 --> 00:24:42.600
There's one caution though.

00:24:42.690 --> 00:24:45.400
If you subclass cell,
and it is just a view,

00:24:45.400 --> 00:24:48.490
and views implement draw rect,
you're not going to get the

00:24:48.500 --> 00:24:50.820
behavior you expect if you
override draw rect in your cell.

00:24:50.820 --> 00:24:55.000
And the reason is that when
a user selects that cell,

00:24:55.040 --> 00:24:56.420
we insert that blue gradient.

00:24:56.420 --> 00:24:59.300
That's inserted as a view
right above your cell,

00:24:59.300 --> 00:25:01.150
but below the content view.

00:25:01.160 --> 00:25:03.980
So that's actually going to
obscure any drawing you try

00:25:04.080 --> 00:25:05.740
to do directly in your cell.

00:25:06.310 --> 00:25:07.820
If you find you need
to do custom drawing,

00:25:07.820 --> 00:25:08.660
it's really easy.

00:25:08.660 --> 00:25:10.670
You can just create a
view to do that drawing,

00:25:10.680 --> 00:25:13.200
and add that view as a
subview of the content view.

00:25:18.600 --> 00:25:22.030
Another thing you might need
to do when you subclass cell

00:25:22.040 --> 00:25:25.110
is do a little additional
cleanup when the cell is reused.

00:25:25.160 --> 00:25:31.240
Your table view cell has a
method called prepare for reuse.

00:25:31.240 --> 00:25:34.660
We call this basically as soon as
the cell disappears out of the view

00:25:34.660 --> 00:25:38.030
and is thrown in the reuse queue,
we call prepare for use to allow

00:25:38.070 --> 00:25:39.200
the cell to clean up a little bit.

00:25:39.360 --> 00:25:41.500
If you have additional
cleanup you need to do,

00:25:41.500 --> 00:25:44.210
you have to reset some things in
your cell to a default state so

00:25:44.430 --> 00:25:48.330
that the next time it's reused,
you know the position and

00:25:48.330 --> 00:25:49.630
size and color of everything.

00:25:49.980 --> 00:25:53.170
You can override this method,
do whatever little bit of

00:25:53.170 --> 00:25:55.140
cleanup you need to do there.

00:25:56.990 --> 00:25:59.350
said reset those to the default values,
but you need to make sure you

00:25:59.390 --> 00:26:01.800
always call super when you do this.

00:26:01.800 --> 00:26:05.700
UI Table View Cell does its own clean up,
and if you don't do that,

00:26:05.730 --> 00:26:07.970
can't guarantee the state of the cell.

00:26:10.560 --> 00:26:13.290
So we're going to continue to
extend the recipes demo now.

00:26:13.400 --> 00:26:16.380
We're going to take that
top level recipes list,

00:26:16.380 --> 00:26:20.420
and we're going to create a custom
subclass of table view cell,

00:26:20.510 --> 00:26:24.180
so that instead of just the
image of the recipe and the name,

00:26:24.180 --> 00:26:26.520
we'll also see a
description and a prep time,

00:26:26.520 --> 00:26:28.850
and we'll do some cool things
as we transition it out

00:26:41.000 --> 00:26:44.270
So we'll go back to the recipe
list table view controller,

00:26:44.270 --> 00:26:48.190
because this manages that
top level list of recipes.

00:26:52.740 --> 00:26:55.450
And in our cell for row,
we used to just create a

00:26:55.840 --> 00:26:58.140
standard table view cell and
set the text and image on it.

00:26:58.290 --> 00:27:01.430
So we're going to throw
away all of this code.

00:27:02.090 --> 00:27:03.630
And instead,
we're going to create an instance

00:27:03.720 --> 00:27:08.400
of a recipe table view cell,
which we'll get to in just a minute.

00:27:08.470 --> 00:27:09.560
So the pattern will look the same.

00:27:09.560 --> 00:27:11.310
We'll attempt to dequeue one of those.

00:27:11.400 --> 00:27:15.080
If we can't find one,
we'll allocate a new one.

00:27:15.350 --> 00:27:19.980
Because this is our own class now,
we can set a property on that.

00:27:20.430 --> 00:27:22.630
for the recipe,
and we can just fill in that recipe,

00:27:22.630 --> 00:27:25.300
and the cell will know how
to extract the bits it needs.

00:27:25.370 --> 00:27:27.970
So we can now just return that cell.

00:27:29.060 --> 00:27:32.120
So let's go look at this
recipe table view cell.

00:27:32.220 --> 00:27:35.270
Subclass of UI table view cell,
but we're going to need a few little

00:27:35.270 --> 00:27:37.030
additional instance variables here.

00:27:37.200 --> 00:27:39.880
The first is the recipe
that was just assigned,

00:27:39.920 --> 00:27:42.130
and then we'll go ahead and
create instance variables for

00:27:42.130 --> 00:27:46.910
the four pieces that we need
to display the bits of content.

00:27:47.480 --> 00:27:51.470
will also define the
property that can be set,

00:27:51.470 --> 00:27:54.500
that's set by the recipe
list table view controller.

00:27:57.700 --> 00:28:02.480
So we've got a few defines at the top
that we'll use to position some things.

00:28:02.510 --> 00:28:05.220
But basically nothing
else is in this class.

00:28:05.300 --> 00:28:08.760
So we need to create all of those views.

00:28:08.870 --> 00:28:14.170
So in our knit with frame,
we'll first create the image view.

00:28:14.790 --> 00:28:15.700
and add that as a sub-view.

00:28:15.700 --> 00:28:18.840
Now notice we passed in CG Rec 0.

00:28:18.890 --> 00:28:20.180
We haven't yet tried to position it.

00:28:20.240 --> 00:28:24.120
We're going to override layout sub-views,
and I'll talk about that in a little bit,

00:28:24.200 --> 00:28:26.790
to position all these things.

00:28:28.750 --> 00:28:30.600
Next,
we're going to create that name label.

00:28:30.710 --> 00:28:34.200
It's again just a label
and it's with the CG0,

00:28:34.200 --> 00:28:34.930
Erect0.

00:28:35.300 --> 00:28:37.200
We're going to set its font,
because we don't want the

00:28:37.200 --> 00:28:38.300
default font we get here.

00:28:38.300 --> 00:28:41.850
We want to use something smaller to
make room for a description below that.

00:28:42.500 --> 00:28:45.380
We'll set its text color to black,
and its highlighted text color to

00:28:45.380 --> 00:28:47.570
white so that it highlights properly.

00:28:47.660 --> 00:28:50.840
And we'll add that as a
sub-view of our content view.

00:28:50.930 --> 00:28:55.320
Now we're going to have similar blocks
of code here for a description label.

00:28:55.820 --> 00:28:56.890
and a prep time label.

00:28:56.900 --> 00:28:59.580
And the only difference with
the prep time label is that's

00:28:59.900 --> 00:29:02.160
going to be right aligned.

00:29:10.690 --> 00:29:17.320
So we need to figure out what the frames
of all of those controls are going to be,

00:29:17.320 --> 00:29:19.030
both in and out of editing mode.

00:29:19.120 --> 00:29:22.600
So we're going to write a few little
convenience methods to do that for us.

00:29:22.720 --> 00:29:25.420
So the first is the Image View Frame.

00:29:25.480 --> 00:29:29.520
And if we are in editing mode,
we're going to return one rectangle.

00:29:29.520 --> 00:29:32.410
And the only real difference between
that and the one that we return if

00:29:32.410 --> 00:29:36.380
we're not in editing is we're going
to get this little editing inset,

00:29:36.450 --> 00:29:37.920
so things look nicely aligned.

00:29:38.020 --> 00:29:41.730
We'll have similar methods
here for the Name Label Frame,

00:29:41.740 --> 00:29:46.050
the Description Label Frame,
and the Prep Time Label Frame.

00:29:48.800 --> 00:29:50.820
So now we actually need
to position these things.

00:29:50.820 --> 00:29:55.990
And the way you do that in UIKit is to
override layout sub views in your view.

00:29:56.730 --> 00:29:58.850
You need to always call super,
make sure anything else that's

00:29:58.850 --> 00:30:01.600
in there gets laid out properly.

00:30:01.610 --> 00:30:05.980
And then all we're going to do is
call set frame on each of these

00:30:06.140 --> 00:30:09.850
things and pass in the frames
that we compute in each of these

00:30:09.850 --> 00:30:12.400
convenience methods we just wrote.

00:30:12.620 --> 00:30:14.440
And notice we didn't have
to take care of doing any

00:30:14.440 --> 00:30:16.500
animation or anything like that.

00:30:16.500 --> 00:30:20.500
The reason for this is when
you call set editing animated,

00:30:20.620 --> 00:30:24.500
we'll call layout subviews inside
that within an animation block.

00:30:24.540 --> 00:30:26.590
So if you just specify
the frame that you want,

00:30:26.590 --> 00:30:28.500
or any other attributes that
are animatable you want,

00:30:28.500 --> 00:30:31.500
we'll actually animate all those for you.

00:30:34.220 --> 00:30:37.000
We also need to define the
methods for that property,

00:30:37.020 --> 00:30:41.340
so we'll add a set recipe
that fills in the recipe IVAR,

00:30:41.500 --> 00:30:44.660
and then extracts the bits we need,
the thumbnail image, the name,

00:30:44.660 --> 00:30:48.170
the description, and the prep time,
and assigns those to the

00:30:48.890 --> 00:30:50.900
appropriate views on screen.

00:30:50.980 --> 00:30:54.400
And of course,
we need a getter for our property.

00:30:54.460 --> 00:31:01.100
We added a few IVARs,
we need to make sure we clean those up.

00:31:01.100 --> 00:31:03.790
Let's take a look at
what this looks like now.

00:31:10.550 --> 00:31:11.400
That looks a lot nicer.

00:31:11.450 --> 00:31:14.600
We've still got our
image now and our name,

00:31:14.600 --> 00:31:17.530
but now we've got this great description
and some information the user can

00:31:17.530 --> 00:31:21.100
use to figure out if maybe this is
going to take too much time tonight.

00:31:21.150 --> 00:31:23.810
Let's see what happens when
we go into editing mode.

00:31:24.350 --> 00:31:26.060
It's starting to look kind of busy.

00:31:26.060 --> 00:31:29.000
So, when we're in editing mode,
I don't think we really need

00:31:29.070 --> 00:31:31.120
to see maybe the prep time.

00:31:31.250 --> 00:31:35.170
So, let's see how we would take that
out when we go into editing mode.

00:31:38.470 --> 00:31:41.500
- We basically need to go
into our layout sub views,

00:31:41.520 --> 00:31:44.840
and just say if we are in editing mode,
we want to set the alpha

00:31:44.860 --> 00:31:46.280
of that prep time to zero.

00:31:46.400 --> 00:31:49.350
And if we're not in editing mode,
we want it to be one,

00:31:49.470 --> 00:31:51.070
so it's fully opaque.

00:31:56.800 --> 00:31:58.700
Let's see what this looks like.

00:31:58.700 --> 00:32:03.150
There we go.

00:32:03.800 --> 00:32:05.460
So now that cleans it up,
looks a little nicer when

00:32:05.460 --> 00:32:06.740
it's in editing mode,
but if you notice,

00:32:06.740 --> 00:32:10.260
that's actually fading in and out.

00:32:10.780 --> 00:32:12.600
Again,
we call your layout subviews within

00:32:12.600 --> 00:32:16.370
the context of an animation block,
so anything that you set in there

00:32:16.370 --> 00:32:20.200
that's animatable automatically
will be animated properly.

00:32:20.210 --> 00:32:22.150
All right.

00:32:31.200 --> 00:32:33.970
So we talked about a couple of
ways to customize your cells.

00:32:34.140 --> 00:32:38.390
So let's briefly cover why you might
want to choose one versus the other.

00:32:40.610 --> 00:32:43.440
Any time your content can
be completely specified,

00:32:43.440 --> 00:32:47.540
the layout of that content can be
specified with auto-resizing masks,

00:32:47.640 --> 00:32:51.820
that might be a good candidate to do
it just by adding those sub views.

00:32:52.610 --> 00:32:55.070
And anytime you don't need to modify
the default behavior of the cell,

00:32:55.070 --> 00:32:59.000
in that ingredient cell we did,
we really just needed to add a label over

00:32:59.000 --> 00:33:01.000
there and make sure it indented properly.

00:33:01.060 --> 00:33:02.750
We didn't really need
a subclass to do that.

00:33:02.860 --> 00:33:07.850
This was a great candidate for just
adding subviews into the content view.

00:33:10.340 --> 00:33:13.380
But any time you do need that
custom layout code in that top

00:33:13.380 --> 00:33:17.230
level cell that we defined,
we really did kind of want that

00:33:17.230 --> 00:33:19.520
prep time level to fade out.

00:33:19.520 --> 00:33:22.260
We might have wanted it to
slide completely off the screen,

00:33:22.290 --> 00:33:23.660
things like that.

00:33:23.690 --> 00:33:26.000
This is a great time to subclass.

00:33:26.920 --> 00:33:29.600
And there's other things you might want
to do to change the behavior of that.

00:33:29.600 --> 00:33:33.690
You might want to override what
happens when the cell goes into

00:33:33.700 --> 00:33:36.030
editing mode or other state changes.

00:33:36.200 --> 00:33:37.400
Do whatever you'd like there.

00:33:37.450 --> 00:33:40.870
Those are great times when
you'd want to subclass.

00:33:44.490 --> 00:33:47.150
So when you're subclassing,
you very frequently are gonna be

00:33:47.150 --> 00:33:48.780
dealing with multiple use identifiers.

00:33:48.780 --> 00:33:50.560
This has been covered
a little bit briefly,

00:33:50.560 --> 00:33:52.480
but I just wanna reiterate it.

00:33:52.530 --> 00:33:54.700
Here we have,

00:33:54.950 --> 00:33:58.230
The settings application,
and there are several different,

00:33:58.230 --> 00:34:00.440
or a couple different types of cells.

00:34:00.510 --> 00:34:04.280
All the things at the top that are
in that orange rectangle have sort

00:34:04.280 --> 00:34:05.660
of a similar appearance to them.

00:34:05.660 --> 00:34:09.020
They have a black label on the
left and a blue label on the right.

00:34:09.020 --> 00:34:13.390
In the case of that ad account,
that just doesn't have a value to it.

00:34:14.300 --> 00:34:17.500
Any cell that you use there could
be used for any of those positions.

00:34:17.550 --> 00:34:21.220
So when you need a cell there,
if you have a reuse identifier

00:34:21.220 --> 00:34:25.010
defined for that type,
you can reuse any one of those cells.

00:34:25.360 --> 00:34:29.140
The ones at the bottom also
have their own sort of type.

00:34:29.140 --> 00:34:32.970
A label on the left and
a switch on the right.

00:34:33.030 --> 00:34:35.380
And again,
anyone there can be reused at any

00:34:35.380 --> 00:34:37.580
other position in the table view.

00:34:40.460 --> 00:34:45.800
So, we want to make sure we have
really good scrolling performance.

00:34:46.080 --> 00:34:50.530
And there was a great session yesterday,
which I'll talk about a little bit here,

00:34:50.530 --> 00:34:52.640
that covers some of this.

00:34:52.760 --> 00:34:55.530
And we want to make sure

00:34:55.930 --> 00:34:58.070
We're always reusing cells.

00:34:58.140 --> 00:34:59.800
We've reiterated this over and over.

00:34:59.960 --> 00:35:03.390
There's absolutely no way to
get good scrolling performance

00:35:03.400 --> 00:35:04.460
without reusing cells.

00:35:04.520 --> 00:35:07.370
The cost, it's not just the cost
of allocating the cells,

00:35:07.400 --> 00:35:10.160
it's the cost of allocating the
core animation backing stores

00:35:10.270 --> 00:35:11.570
for all the pieces in that cell.

00:35:11.570 --> 00:35:15.080
Pushing all those things
across to the graphics card,

00:35:15.080 --> 00:35:16.790
it's all very expensive.

00:35:20.600 --> 00:35:24.030
When you're reusing a cell,
we want to try to avoid re-layout.

00:35:24.090 --> 00:35:27.440
A good example of this might
be if you have a label,

00:35:27.500 --> 00:35:31.300
and you're putting a new value in
it each time you reuse the cell,

00:35:31.350 --> 00:35:34.520
you probably don't want to cause, like,
size to fit on that,

00:35:34.520 --> 00:35:37.360
which would change the size
of that label each time.

00:35:37.420 --> 00:35:40.020
Doing that will invalidate the
Core Animation Backing Store,

00:35:40.130 --> 00:35:42.120
cause us to create a new one,
just the same as creating

00:35:42.120 --> 00:35:44.240
a brand new label will.

00:35:44.380 --> 00:35:46.340
In this case,
you probably want to try to create that

00:35:46.340 --> 00:35:50.590
label to be whatever size you need to
display any row in your table view,

00:35:50.600 --> 00:35:54.980
and leave it that size so that we
can just reuse that backing store.

00:35:56.300 --> 00:35:59.600
And again,
make sure these things are opaque.

00:35:59.600 --> 00:36:03.880
Even the small amounts of transparency
have noticeable impacts on scrolling.

00:36:04.130 --> 00:36:08.740
Sometimes you can't avoid it,
but try really hard to figure

00:36:08.740 --> 00:36:14.410
out ways to do your own,
use custom images or whatever you need

00:36:14.860 --> 00:36:20.490
to give the appearance of translucency,
but still have opaque views.

00:36:22.140 --> 00:36:23.940
This is that performance
session I mentioned.

00:36:24.040 --> 00:36:26.340
If you missed this,
I really urge you to go take a

00:36:26.340 --> 00:36:28.420
look at this when it's posted.

00:36:28.550 --> 00:36:30.830
The Optimizing Performance in
iPhones application,

00:36:30.840 --> 00:36:32.650
there was a lot of great
tips and tricks there,

00:36:32.820 --> 00:36:37.580
as well as tools you can use to see
where your apps are slowing down.

00:36:40.480 --> 00:36:46.120
So the last thing we're going to talk
about is how to insert and delete things.

00:36:46.170 --> 00:36:49.210
We've seen a lot of applications
where when somebody needs to

00:36:49.210 --> 00:36:51.760
change what's in a table view,
they call reload data.

00:36:51.970 --> 00:36:55.240
And while this works,
it's a pretty expensive way to update

00:36:55.240 --> 00:36:56.950
the content in your table view.

00:36:57.110 --> 00:36:59.100
We end up having to throw
a lot of things away,

00:36:59.140 --> 00:37:00.740
recreate them.

00:37:00.740 --> 00:37:02.530
And again, performance is pretty
limited on this device.

00:37:02.540 --> 00:37:05.600
And so as much as possible,
we want to avoid that.

00:37:05.610 --> 00:37:10.780
So we've provided some APIs to
allow you to just insert and delete

00:37:10.840 --> 00:37:14.760
rows directly in a table view,
and not have to reload.

00:37:15.060 --> 00:37:19.900
So the first is insert rows at
index path with row animation.

00:37:19.960 --> 00:37:21.050
First argument there is an array.

00:37:21.060 --> 00:37:25.720
So you can specify an arbitrary
set of rows to be inserted,

00:37:25.810 --> 00:37:29.160
all with the same row animation.

00:37:30.450 --> 00:37:32.780
There's a corresponding
delete rows at index path,

00:37:32.780 --> 00:37:36.310
so you can specify an arbitrary
set of rows to be deleted.

00:37:36.480 --> 00:37:39.920
And our table view supports sections,
so we have a corresponding set of

00:37:39.920 --> 00:37:47.050
methods to insert entire sections
and delete entire sections,

00:37:47.050 --> 00:37:48.360
again in an animated fashion.

00:37:48.400 --> 00:37:53.400
Now sometimes you need to do both an
insert and a delete at the same time.

00:37:53.400 --> 00:37:56.950
If you need to do that,
we have some methods that you

00:37:56.950 --> 00:38:00.400
can use to wrap all these,
begin updates and end updates.

00:38:00.400 --> 00:38:04.560
So you can call begin updates,
insert and delete an arbitrary

00:38:04.560 --> 00:38:07.540
set of sections and rows,
and then call end updates

00:38:07.590 --> 00:38:10.320
and all of those animations
will happen at the same time.

00:38:10.400 --> 00:38:14.140
And at the end of this,
whether you call one of these methods

00:38:14.270 --> 00:38:18.450
directly to just insert a row,
or you call begin updates and do a whole

00:38:18.450 --> 00:38:21.450
bunch of stuff and call end updates,
at the end of this,

00:38:21.450 --> 00:38:24.330
the table view's state
internally is already the final

00:38:24.510 --> 00:38:26.280
state of all those animations.

00:38:26.520 --> 00:38:30.400
So what this means is, even while those
animations are in flight,

00:38:30.410 --> 00:38:34.390
you can turn around and call additional
methods to insert or delete more rows.

00:38:34.530 --> 00:38:36.390
They can even be the rows
that are still animating in.

00:38:36.400 --> 00:38:39.300
So for example,
a row could be animating in,

00:38:39.470 --> 00:38:40.580
you could turn around
and tell it to delete it,

00:38:40.580 --> 00:38:43.880
and it'll animate on out,
right from wherever it

00:38:43.880 --> 00:38:45.400
happens to be already.

00:38:47.780 --> 00:38:52.110
So most of those methods take this
table view row animation argument.

00:38:52.260 --> 00:38:54.200
There's five things
you can specify there.

00:38:54.200 --> 00:38:55.840
The first is a fade.

00:38:55.940 --> 00:39:00.050
So for example, if you're animating in,
that row will fade in as the

00:39:00.050 --> 00:39:02.700
other rows move out of the way.

00:39:02.700 --> 00:39:05.040
You can also specify one of
the four cardinal directions

00:39:05.130 --> 00:39:07.430
to cause that row to slide.

00:39:07.600 --> 00:39:10.380
For example, if you pick the table
view row animation right,

00:39:10.420 --> 00:39:12.260
and you're inserting,
it'll animate in from the right.

00:39:12.260 --> 00:39:15.150
And if you're deleting,
it'll animate out to the right.

00:39:16.920 --> 00:39:20.210
So let's now look at how to do
insertion/deletion in our recipes list.

00:39:20.280 --> 00:39:23.980
The one thing we haven't done in
our recipes application is allow

00:39:23.980 --> 00:39:25.470
the user to add an ingredient.

00:39:25.570 --> 00:39:28.610
We want to do this a lot like
the phone application does it,

00:39:28.690 --> 00:39:31.600
where when we go into editing
mode on that ingredients list,

00:39:31.600 --> 00:39:34.450
we want to add a row at the bottom
with a plus sign next to it that

00:39:34.450 --> 00:39:37.150
lets us add a new ingredient.

00:39:47.920 --> 00:39:49.400
Can we get the demo machine?

00:39:49.400 --> 00:39:58.710
OK, so we're going to go into our
Recipe Detail View Controller.

00:40:02.410 --> 00:40:07.610
We're going to override what happens
when we go into editing mode.

00:40:08.680 --> 00:40:11.400
Provide our own implementation
for set editing.

00:40:11.450 --> 00:40:14.470
And we're going to call begin updates,
because we want to insert that

00:40:14.470 --> 00:40:17.680
row-- or insert or delete that row,
depending on whether we're going

00:40:17.680 --> 00:40:19.270
into or out of editing mode.

00:40:19.360 --> 00:40:22.780
We want to call super set
editing animated to make sure

00:40:22.780 --> 00:40:26.400
the table view updates properly,
and any other state that

00:40:26.400 --> 00:40:28.880
needs to get set is reflected.

00:40:46.650 --> 00:40:46.650
And then we're just going to create
that array representing the index

00:40:46.650 --> 00:40:46.650
path we're going to be manipulating.

00:40:46.650 --> 00:40:46.650
So that's just an array
with one index path,

00:40:46.650 --> 00:40:46.650
and that's an index path that
specifies the one row past the

00:40:46.650 --> 00:40:46.650
end of the ingredients list
in the ingredients section.

00:40:50.450 --> 00:40:53.820
And if we're going into editing mode,
we want to tell the table view to

00:40:53.820 --> 00:40:58.590
insert rows at that index path,
and we'll specify--

00:40:59.340 --> 00:41:01.200
Row animation top,
so it looks like it sort of

00:41:01.280 --> 00:41:04.630
slides out from the row above it.

00:41:05.900 --> 00:41:10.380
And when we're going out of editing mode,
we just want to delete that row.

00:41:10.520 --> 00:41:13.570
Again, with row animation top,
so it looks like it slides back

00:41:13.750 --> 00:41:15.800
up under the rows that are there.

00:41:15.800 --> 00:41:23.840
And then we want to call end
updates to kick off that animation.

00:41:28.600 --> 00:41:32.000
So now we've told the table view
that we want to add a row there,

00:41:32.000 --> 00:41:34.620
but our model has to reflect this,
because the table view is going to

00:41:34.690 --> 00:41:39.440
turn around and ask us for information
about that newly inserted row.

00:41:40.330 --> 00:41:44.480
So the first thing we want to do is in
our number of rows in section method,

00:41:44.530 --> 00:41:48.240
here in our ingredients section,
when we're in editing mode,

00:41:48.240 --> 00:41:51.490
we want to return one additional row.

00:41:57.420 --> 00:42:03.340
And in our cell for row
at index path method,

00:42:03.370 --> 00:42:06.910
here's where we're populating the
value of that ingredients cell,

00:42:06.920 --> 00:42:09.700
but now we're going to come through
this for a row that actually

00:42:09.700 --> 00:42:11.760
isn't in that ingredients array.

00:42:11.830 --> 00:42:16.080
So we're going to do a check here
to see if the row that we're asking

00:42:16.420 --> 00:42:19.090
for is within that ingredients list.

00:42:19.420 --> 00:42:23.400
and only then will we get the name
and amount out of the ingredient.

00:42:23.550 --> 00:42:25.350
If it's not,

00:42:26.280 --> 00:42:28.240
We're going to assume
it's that last row there,

00:42:28.240 --> 00:42:31.150
and we're just going to set the
cells text to add ingredient.

00:42:31.280 --> 00:42:33.810
Now we might be reusing this row,
so we need to make sure we

00:42:33.810 --> 00:42:37.970
get that amount label and set
its value to the empty string.

00:42:43.730 --> 00:42:48.400
We also want there to be a plus
sign to the left of that new row.

00:42:48.580 --> 00:42:52.170
So in our editing style
for row at index path,

00:42:52.240 --> 00:42:54.330
here we've said that if it's
in the ingredient section,

00:42:54.330 --> 00:42:57.740
we want to be delete, but we want to make
one small change here.

00:42:57.810 --> 00:43:00.220
If the row that we're
looking at is that last row,

00:43:00.390 --> 00:43:02.670
one past the end of the
number of ingredients,

00:43:02.980 --> 00:43:06.060
we're going to specify
the insert editing style.

00:43:18.490 --> 00:43:22.630
So when we go into editing mode, great,
we've got this extra row that appears

00:43:22.640 --> 00:43:25.920
when we go in and out a couple of times,
so you can see how that animates.

00:43:26.200 --> 00:43:28.700
It sort of appears to slide
out from the rows above it,

00:43:28.700 --> 00:43:33.050
and it's got the
appropriate editing type.

00:43:34.900 --> 00:43:39.800
We've got a reorder control on that,
which is probably not what we want.

00:43:39.950 --> 00:43:41.900
So let's go back.

00:43:43.390 --> 00:43:48.480
And go to the can move row at index
path and put a similar check in here.

00:43:49.670 --> 00:43:52.840
The row we're looking at is that one
that represents the add ingredients.

00:43:52.870 --> 00:43:57.590
We'll just return no to indicate
that row's not reorderable.

00:43:59.090 --> 00:44:03.040
We also don't want the user
to be able to drag one of the

00:44:03.040 --> 00:44:05.590
ingredients below that add

00:44:05.900 --> 00:44:15.300
[Transcript missing]

00:44:16.220 --> 00:44:19.600
Remember this first set of if blocks
checks to see if the section is before

00:44:19.600 --> 00:44:21.020
or after the ingredients section.

00:44:21.160 --> 00:44:22.740
So if we get past that,
we're definitely in the

00:44:22.740 --> 00:44:25.300
ingredients section,
but we want to make one more check here.

00:44:25.460 --> 00:44:29.630
We want to see if the proposed
destination index path is greater

00:44:29.690 --> 00:44:33.440
than that last row of the ingredients.

00:44:33.610 --> 00:44:37.210
And if that is,
we want to just return that last row.

00:44:51.690 --> 00:44:56.160
Okay, so now let's go into editing here.

00:44:56.310 --> 00:44:58.520
Notice we don't have the
reorder control there,

00:44:58.520 --> 00:45:02.190
and if I try to pick up one of these
other rows and drag it down here,

00:45:02.290 --> 00:45:06.120
it'll just open a gap right
above the add ingredient row,

00:45:06.120 --> 00:45:09.190
so we can't drag
anything down below that.

00:45:15.310 --> 00:45:18.370
So we now want to allow the
user to select those rows in

00:45:18.370 --> 00:45:22.620
the Ingredients section so that
they can edit those ingredients.

00:45:22.960 --> 00:45:26.650
So Table View by default doesn't let you
select rows when you're in editing mode,

00:45:26.660 --> 00:45:29.490
but there's a method to override this.

00:45:37.200 --> 00:45:42.310
We just need to set the property,
allows selection during editing to yes.

00:45:44.360 --> 00:45:45.960
And then we need to make
a couple of changes.

00:45:46.030 --> 00:45:49.480
The first is in our will
select row and index path.

00:45:52.480 --> 00:45:55.470
This block of code says we don't
allow ingredients to be selected,

00:45:55.470 --> 00:45:58.060
so when we're not in editing mode,
we allow everything but

00:45:58.060 --> 00:45:59.000
ingredients to be selected.

00:45:59.000 --> 00:46:02.240
But we want to flip that
when we're in editing mode.

00:46:02.370 --> 00:46:05.960
So we'll create an if block,
and if we are editing,

00:46:06.710 --> 00:46:08.940
will say if the section
that we're looking at is

00:46:08.940 --> 00:46:13.360
not the ingredients section,
deselect the row, return nil.

00:46:13.380 --> 00:46:15.560
Otherwise, return the index path.

00:46:15.570 --> 00:46:20.550
And then if we are not in editing,
we'll do the code that was here before.

00:46:26.000 --> 00:46:28.140
Finally,
in our did select row at index path,

00:46:28.140 --> 00:46:30.930
we've never had to handle the
ingredients section here before

00:46:31.030 --> 00:46:34.900
because we didn't allow selection,
but now we do.

00:46:34.900 --> 00:46:38.090
So we'll add one more else clause here.

00:46:38.300 --> 00:46:39.960
We're in the Ingredients section.

00:46:40.020 --> 00:46:43.590
We'll create a new view controller,
which is the Ingredient

00:46:43.590 --> 00:46:45.960
Detail View Controller.

00:46:46.000 --> 00:46:48.310
We'll assign its recipe.

00:46:50.230 --> 00:46:55.410
And then if it's one of those rows where
there's already an ingredient displayed,

00:46:55.760 --> 00:47:01.440
will get that ingredient and set that
ingredient on that view controller.

00:47:01.580 --> 00:47:02.740
Otherwise,
there won't be an ingredient there,

00:47:02.740 --> 00:47:05.710
and this means we want to add a new one.

00:47:19.260 --> 00:47:20.940
Okay, so let's go in here.

00:47:21.200 --> 00:47:24.780
Go into editing mode.

00:47:24.810 --> 00:47:28.900
Now we can click on this, cloves like,
good, we can change this,

00:47:29.020 --> 00:47:33.980
maybe make this a half teaspoon
of cloves if we'd like.

00:47:34.570 --> 00:47:35.600
Maybe we want to add an ingredient.

00:47:35.680 --> 00:47:37.300
I tried these.

00:47:37.300 --> 00:47:39.830
There's something that's clearly missing.

00:47:40.080 --> 00:47:41.700
So we'll try that.

00:47:41.700 --> 00:47:45.440
I really like bacon,
so I'm going to do about a pound of that.

00:47:45.440 --> 00:47:47.800
Lovely.

00:47:47.800 --> 00:47:49.280
All right.

00:47:49.280 --> 00:47:50.980
And we're done.

00:47:58.580 --> 00:48:02.170
So we talked about a bunch of stuff
about how to control the table view,

00:48:02.170 --> 00:48:05.210
do a lot of great customization
of the table view.

00:48:05.800 --> 00:48:07.340
This sample's available.

00:48:07.340 --> 00:48:11.190
I urge you to go download it,
take a look at it, try to understand how

00:48:11.190 --> 00:48:14.390
we're doing everything,
and then go out and build some really

00:48:14.930 --> 00:48:17.380
great user interfaces with table views.

00:48:18.590 --> 00:48:22.260
If you need more information,
you can contact Derek Horn.

00:48:22.260 --> 00:48:24.660
He's the application
framework evangelist.

00:48:24.720 --> 00:48:27.770
There's also documentation
on the website.

00:48:29.180 --> 00:48:32.800
There's a lab for this immediately
following this session in iPhone Lab A.

00:48:32.800 --> 00:48:34.100
It'll run until about 2 o'clock today.