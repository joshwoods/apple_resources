WEBVTT

00:00:23.790 --> 00:00:25.360
Nice crowd.

00:00:25.430 --> 00:00:26.650
I'm Tim Hatcher.

00:00:26.710 --> 00:00:29.380
I'm an engineer on the
Safari and WebKit team.

00:00:29.420 --> 00:00:31.850
And I'm going to be
presenting with Adam Roben,

00:00:31.850 --> 00:00:35.560
who's going to come on stage
later during the presentation.

00:00:35.950 --> 00:00:40.960
So you're here to hear about
debugging websites using Safari's

00:00:40.960 --> 00:00:43.000
Integrated Developer Tools.

00:00:43.040 --> 00:00:46.740
And how many of you have
used debugging tools that are

00:00:46.740 --> 00:00:49.300
available in other browsers?

00:00:51.160 --> 00:00:54.060
So we have a lot of web developers,
it seems.

00:00:54.090 --> 00:00:58.580
How many of you are familiar with
Safari's current developer tools?

00:00:59.770 --> 00:01:01.460
Great, that's good to see.

00:01:01.520 --> 00:01:03.140
And one last question.

00:01:03.210 --> 00:01:07.780
How many of you have downloaded
a WebKit nightly build?

00:01:07.880 --> 00:01:09.680
Great.

00:01:09.820 --> 00:01:11.530
Keep doing that.

00:01:12.670 --> 00:01:16.960
So when you're making a website,
you're going to use a lot of these

00:01:17.360 --> 00:01:21.220
different web development tools,
from a text editor that does

00:01:21.280 --> 00:01:25.440
basic syntax highlighting,
all the way to a full-featured

00:01:25.440 --> 00:01:28.430
IDE like Coda or Dashcode.

00:01:28.610 --> 00:01:31.780
And some of you have probably
even written some of these

00:01:31.780 --> 00:01:33.350
apps that I have up here.

00:01:33.490 --> 00:01:37.350
But there's always something
that's missing when you're

00:01:37.350 --> 00:01:39.310
using one of these apps.

00:01:39.600 --> 00:01:42.840
And that's the browser.

00:01:42.910 --> 00:01:45.600
There's always a need to use the browser.

00:01:45.600 --> 00:01:47.900
You're always going to need
to see exactly what the user

00:01:47.900 --> 00:01:53.000
is going to look at your site,
exactly how it's going to look.

00:01:53.190 --> 00:01:56.280
So hopefully that's
Safari for every one of you.

00:01:56.280 --> 00:01:59.900
And hopefully you're targeting Safari,
developing apps for Safari,

00:01:59.900 --> 00:02:03.140
and users tell us they love using Safari.

00:02:03.140 --> 00:02:06.890
They love Safari for its great
user experience and great feel.

00:02:07.280 --> 00:02:13.470
And we've heard in the past that
developers are using other browsers

00:02:13.660 --> 00:02:15.840
because they like the tools.

00:02:15.850 --> 00:02:18.690
Well, we've changed that.

00:02:18.840 --> 00:02:24.100
We've drastically increased our tools
that we have available in Safari.

00:02:24.100 --> 00:02:27.940
So hopefully the same browser
that your users are using,

00:02:27.940 --> 00:02:31.220
you can be using to
develop your websites with.

00:02:33.800 --> 00:03:52.300
[Transcript missing]

00:03:52.930 --> 00:03:55.030
Once you turn this on,
you get a menu that looks

00:03:55.160 --> 00:03:56.460
something like this.

00:03:56.530 --> 00:04:01.560
And the menu's changed a little
bit in Safari 4 Developer Preview.

00:04:01.660 --> 00:04:04.020
And there's a couple new items
that we're going to talk about

00:04:04.100 --> 00:04:06.360
later in the presentation.

00:04:07.320 --> 00:04:10.380
But first I'm going to talk
about this first group of items.

00:04:10.570 --> 00:04:15.140
This group is about
browser interoperability.

00:04:15.140 --> 00:04:16.740
And what's browser interoperability?

00:04:16.740 --> 00:04:19.200
Well, if you're a web developer,
you already know.

00:04:19.210 --> 00:04:21.240
Your page has to work in other browsers.

00:04:21.240 --> 00:04:25.850
You're developing your website to
web standards and you want to test

00:04:25.850 --> 00:04:30.390
between all the browsers to make
sure these standards work exactly

00:04:30.390 --> 00:04:33.020
how you think in all the browsers.

00:04:33.340 --> 00:04:35.940
So the first item does
exactly what it's titled.

00:04:35.940 --> 00:04:40.540
It opens the page with whatever
browser you select from this menu.

00:04:40.540 --> 00:04:45.250
So it'll open in Firefox or Opera and
tell that browser to open to that

00:04:45.440 --> 00:04:48.110
URL that you're currently viewing.

00:04:48.120 --> 00:04:52.100
So it's great to jump back and
forth between Safari and the

00:04:52.100 --> 00:04:54.710
other browsers to test your page.

00:04:56.400 --> 00:06:32.700
[Transcript missing]

00:06:33.000 --> 00:06:34.840
So you can type whatever you want here.

00:06:34.840 --> 00:06:40.490
And Safari will send this user agent
string to the server and post it to

00:06:40.500 --> 00:06:46.960
your scripts available until you close
the window or change the user agent

00:06:46.960 --> 00:06:49.790
back to the default or some other item.

00:06:51.300 --> 00:06:54.730
So now let's talk about
the Snippet Editor.

00:06:55.070 --> 00:06:57.150
I'm skipping over the other
items that we're going to talk

00:06:57.160 --> 00:06:59.640
about later in the presentation.

00:06:59.900 --> 00:07:02.870
So the snippet editor I love using.

00:07:03.220 --> 00:07:11.030
And I hope you guys really take advantage
of the snippet editor and its power

00:07:11.030 --> 00:07:19.360
to let you quickly and easily test
WebKit and use your HTML snippets and

00:07:19.790 --> 00:07:23.200
ideas that you might brainstorm in
the shower in the morning or something.

00:07:24.260 --> 00:07:28.410
So you have this idea of this CSS style
and you want to try it out real quick.

00:07:28.760 --> 00:07:32.130
Well,
I hate creating test.html or test.html42

00:07:32.130 --> 00:07:36.210
all over my hard drive and all over
my desktop and just to test out a

00:07:36.550 --> 00:07:41.190
short little thing that Dave Hyatt
just blogged about on the WebKit blog.

00:07:41.200 --> 00:07:45.540
So I can fire up the nightly build,
open up the snippet editor,

00:07:45.540 --> 00:07:49.000
type in some HTML and see
it update live right in the

00:07:49.000 --> 00:07:51.400
snippet editor as I'm typing.

00:07:51.400 --> 00:07:55.720
So you can quickly and easily change
different... Try different tags,

00:07:55.730 --> 00:07:58.740
try anything you want,
anything that you can

00:07:59.330 --> 00:08:02.910
render as a web page,
you can type in here and see exactly

00:08:02.950 --> 00:08:05.640
as you want it in the preview pane.

00:08:08.400 --> 00:08:11.000
So that's the snippet editor.

00:08:11.000 --> 00:08:12.740
And I'm skipping over
the other two items,

00:08:12.740 --> 00:08:14.660
but let's talk about the disable items.

00:08:14.800 --> 00:08:16.540
This is the bulk of the menu.

00:08:16.570 --> 00:08:19.640
There's a lot of things you
can disable in a web browser.

00:08:19.670 --> 00:08:24.080
And some of your users are gonna
have some of these items disabled.

00:08:24.080 --> 00:08:26.940
Maybe JavaScript,
some of the other things we

00:08:26.940 --> 00:08:30.840
don't expose to the user,
but are available to you to disable to

00:08:31.070 --> 00:08:36.370
test different code paths and different
scenarios that other users from different

00:08:36.370 --> 00:08:38.380
browsers might actually experience.

00:08:38.420 --> 00:08:39.910
And they're good for
testing other things.

00:08:40.050 --> 00:08:42.410
So what are they good for testing?

00:08:43.030 --> 00:08:46.960
Well, the caches, you can disable all
of the browser caches.

00:08:47.320 --> 00:08:49.480
Browsers have many caches.

00:08:49.530 --> 00:08:52.400
There's the back-forward cache,
there's the disk cache,

00:08:52.420 --> 00:08:54.900
there's the memory cache,
there's the application cache,

00:08:54.920 --> 00:08:57.360
there's all sorts of caches.

00:08:58.100 --> 00:09:03.240
While testing networking loading,
you don't want to ever get the cache.

00:09:03.240 --> 00:09:05.600
You always want to get your
resources over the network.

00:09:05.680 --> 00:09:08.440
So disabling the cache is good for that.

00:09:09.500 --> 00:09:13.360
And other situations where
you're updating your site live,

00:09:13.360 --> 00:09:15.480
you're uploading new
versions every two seconds,

00:09:15.580 --> 00:09:18.600
and you want to make sure you're
always getting that fresh version.

00:09:18.600 --> 00:09:20.240
I hate when it's 3 a.m.

00:09:20.240 --> 00:09:23.870
and I'm working on a site and
I upload a resource and I reload the

00:09:23.870 --> 00:09:28.060
browser and things don't work and it
turns out the browser is still using

00:09:28.060 --> 00:09:31.880
the last version and I've spent
an hour trying to figure it out.

00:09:31.920 --> 00:09:34.470
So that's why you want
to disable the caches.

00:09:34.470 --> 00:09:37.710
And we've heard a lot of feedback
of people want to do this,

00:09:37.710 --> 00:09:39.390
so this was added for you.

00:09:39.500 --> 00:09:40.550
Amen.

00:09:41.870 --> 00:09:44.320
Images, Styles, and JavaScript.

00:09:44.360 --> 00:09:49.140
You can already disable JavaScript from
the security preferences,

00:09:49.180 --> 00:09:50.120
I believe, in Safari.

00:09:50.120 --> 00:09:54.180
And we want to give you, the developer,
quick access to that so you

00:09:54.180 --> 00:09:57.300
can quickly disable JavaScript,
test your site,

00:09:57.310 --> 00:10:01.680
make sure it's going to work for those
users that are paranoid and want to

00:10:01.680 --> 00:10:04.380
keep JavaScript off for some reason.

00:10:04.380 --> 00:10:08.680
I don't know how they get around the
web nowadays with JavaScript disabled,

00:10:08.680 --> 00:10:11.020
but it's always good to test, right?

00:10:11.800 --> 00:10:15.040
And there's always browsers
that don't support JavaScript,

00:10:15.210 --> 00:10:18.080
so you want to test those cases.

00:10:18.460 --> 00:10:22.060
Then there's testing semantic markup.

00:10:22.070 --> 00:10:26.480
That's the popular trend now,
is separating presentation from style.

00:10:26.480 --> 00:10:29.730
Or, not presentation from style,
that's the same thing, right?

00:10:29.730 --> 00:10:32.100
Separating content from style.

00:10:34.060 --> 00:10:36.620
So,
you can easily disable the style sheet.

00:10:36.750 --> 00:10:40.250
And when you choose this item,
it turns off all the author style

00:10:40.250 --> 00:10:42.550
sheets and all of the user style sheets.

00:10:42.550 --> 00:10:45.800
So, you'll see exactly what your
HTML markup will look like,

00:10:45.800 --> 00:10:49.230
say, in like a text browser like
links or something like that.

00:10:51.370 --> 00:10:54.130
Then there's the runaway
JavaScript timer.

00:10:54.140 --> 00:10:57.090
And you might not know what the
runaway JavaScript timer is.

00:10:57.220 --> 00:10:58.920
You might not have experienced it before.

00:10:59.110 --> 00:11:00.230
Hopefully you haven't.

00:11:00.310 --> 00:11:04.300
And that means websites are doing the
right thing and not hogging the user

00:11:04.490 --> 00:11:06.750
experience with long-running scripts.

00:11:06.750 --> 00:11:16.790
But sometimes you need to debug or test
out a script that runs for many seconds.

00:11:16.790 --> 00:11:16.790
And

00:11:17.200 --> 00:11:22.300
[Transcript missing]

00:11:22.600 --> 00:11:26.900
We would always just let the
JavaScript do whatever they want.

00:11:27.050 --> 00:11:30.710
And users would get the beach
ball or things like that.

00:11:30.890 --> 00:11:34.630
So in Safari,
we've added a dialogue that comes

00:11:34.630 --> 00:11:38.660
up for the user that lets the user
interrupt the script in case the

00:11:38.700 --> 00:11:40.740
site has gone off the deep end.

00:11:40.810 --> 00:11:44.320
And the user needs a
way to exit the script.

00:11:44.590 --> 00:11:47.680
Otherwise, they're going to have
to force quit Safari.

00:11:47.770 --> 00:11:49.570
And we never want that, right?

00:11:50.130 --> 00:11:54.190
But there's cases where you,
the developer, need to test your scripts,

00:11:54.440 --> 00:11:56.780
figure out why this script
has gone off the deep end.

00:11:56.970 --> 00:12:00.880
And you want to see if it actually
ever ends or if it's an infinite loop.

00:12:01.080 --> 00:12:04.240
So you can just disable this timer,
and you'll never see the

00:12:04.240 --> 00:12:06.630
dialogue as a developer.

00:12:07.530 --> 00:12:12.290
So that's the disable
items of the develop menu.

00:12:12.610 --> 00:12:16.440
Now I'm going to invite Adam on stage,
and he's going to talk to

00:12:16.440 --> 00:12:18.080
you about the Web Inspector.

00:12:24.220 --> 00:12:25.540
Thanks, Tim.

00:12:25.540 --> 00:12:26.700
So I am Adam Roben.

00:12:26.700 --> 00:12:29.490
I'm another engineer on
the Safari and WebKit team,

00:12:29.490 --> 00:12:32.480
and I'm going to be talking to you today,
and Tim is also going to be

00:12:32.480 --> 00:12:35.580
talking to you for the rest of the
session about the Web Inspector.

00:12:35.640 --> 00:12:39.420
This is one of our main web
development tools in Safari.

00:12:39.420 --> 00:12:43.770
It was first introduced in Safari 3.0,
although it was hidden inside a hidden

00:12:43.770 --> 00:12:48.120
menu that you couldn't get to without
running some script on the command line.

00:12:49.000 --> 00:12:51.850
In Safari 3.1,
it was promoted to the Develop menu,

00:12:51.860 --> 00:12:54.180
which Tim already showed
you how to turn on.

00:12:54.180 --> 00:12:56.580
And now,
in the Safari 4 developer preview,

00:12:56.580 --> 00:13:00.000
we've really enhanced our existing
features and added a lot of great

00:13:00.000 --> 00:13:03.450
new features based on the feedback
we've gotten from all of you.

00:13:03.460 --> 00:13:05.210
So we'd really like you
all to check it out,

00:13:05.210 --> 00:13:07.270
and I'm going to give you
a little overview of it.

00:13:07.360 --> 00:13:09.860
But first of all,
how do we get to the Inspector?

00:13:09.940 --> 00:13:13.960
Well, as Tim said,
you can get to it from the Develop menu.

00:13:13.960 --> 00:13:16.350
Also,
when you have the Develop menu enabled,

00:13:16.350 --> 00:13:18.980
anytime you right-click
or control-click on a web,

00:13:18.980 --> 00:13:22.650
you'll get this extra context
menu item called Inspect Element,

00:13:22.660 --> 00:13:25.810
which will bring up the
Inspector and focus it on whatever

00:13:25.910 --> 00:13:27.940
element you clicked in the page.

00:13:27.940 --> 00:13:31.370
And once you do one of these things,
you're going to see the brand-new,

00:13:31.380 --> 00:13:35.650
redesigned Web Inspector that's included
in the Safari 4 developer preview.

00:13:35.660 --> 00:13:37.330
And it looks like this.

00:13:40.400 --> 00:13:47.700
[Transcript missing]

00:13:48.980 --> 00:13:51.150
So I'm going to give you an
overview of the three main

00:13:51.210 --> 00:13:53.280
parts of the Web Inspector.

00:13:53.390 --> 00:13:56.100
First, at the top of the window,
you can see that we have a toolbar

00:13:56.580 --> 00:14:00.640
that lets you access the five different
panels that break the Inspector up.

00:14:00.670 --> 00:14:06.060
Each of these panels is designed to let
you focus on a particular debugging task.

00:14:06.110 --> 00:14:09.720
Down at the bottom of the window is
an interactive JavaScript console

00:14:09.860 --> 00:14:14.060
where you can enter JavaScript and
have it evaluated live at any time.

00:14:14.100 --> 00:14:16.440
And the third main part
of the Web Inspector is

00:14:16.440 --> 00:14:17.700
not in the window at all.

00:14:17.950 --> 00:14:22.160
It's an API for your website to use
to provide you with detailed debugging

00:14:22.160 --> 00:14:24.280
information and functionality.

00:14:24.330 --> 00:14:26.040
So first, let's go through the panels.

00:14:26.270 --> 00:14:28.540
And the first one is called Elements.

00:14:28.580 --> 00:14:30.380
And this is what it looks like.

00:14:30.410 --> 00:14:31.940
Now,
this may look pretty familiar to you if

00:14:32.020 --> 00:14:34.170
you've used the Web Inspector before.

00:14:34.180 --> 00:14:37.220
The main feature of it is a
DOM tree on the left side.

00:14:37.240 --> 00:14:41.620
On the right is style information for the
element that's selected in the DOM tree.

00:14:41.640 --> 00:14:45.360
And down at the bottom of the window is
a breadcrumb that shows you where in the

00:14:45.360 --> 00:14:46.900
tree the selected element is located.

00:14:46.900 --> 00:14:52.320
The next panel is called Resources,
and it looks like this.

00:14:52.560 --> 00:14:56.790
And now this may also look familiar to
you if you ever used the network view of

00:14:56.870 --> 00:14:58.300
previous versions of the Web Inspector.

00:14:58.300 --> 00:15:01.150
You see here on the right,
we have a graph showing you the

00:15:01.150 --> 00:15:03.100
loading profile of your web page.

00:15:03.100 --> 00:15:05.430
Up at the top is a summary
graph that also shows you

00:15:05.430 --> 00:15:07.330
information about the data loaded.

00:15:07.340 --> 00:15:12.040
And on the left side is a list of all
the resources that your page loaded.

00:15:12.040 --> 00:15:15.740
If you click on any one of these,
you'll see either the textual

00:15:15.900 --> 00:15:19.610
source for the resource,
if it was something like a document

00:15:19.610 --> 00:15:22.070
or a JavaScript file or a style sheet.

00:15:22.650 --> 00:15:25.250
And if you click on an image
resource or a font resource,

00:15:25.260 --> 00:15:29.290
you'll see a preview right
in the resources panel.

00:15:29.700 --> 00:15:33.920
Now the next panel is something entirely
new to the Safari 4 Developer Preview.

00:15:34.010 --> 00:15:36.840
It's called Scripts,
and this is what it looks like.

00:15:36.950 --> 00:15:40.380
This is the home to our new
integrated JavaScript debugger,

00:15:40.630 --> 00:15:43.800
which Tim is going to tell
you a lot more about later.

00:15:49.510 --> 00:15:53.410
The panel after scripts is also new
in the Safari for Developer Preview.

00:15:53.670 --> 00:15:56.300
It's called Profiles, and here it is.

00:15:56.430 --> 00:16:00.060
Now, this exposes some new functionality
that we've built right into WebKit's

00:16:00.060 --> 00:16:03.450
JavaScript engine that lets you
profile your JavaScript source

00:16:03.450 --> 00:16:06.680
code and see the fastest functions,
the slowest functions,

00:16:06.680 --> 00:16:11.890
and figure out where your page is
spending time when it's executing script.

00:16:12.270 --> 00:16:15.070
The final panel you may have seen a
little bit of if you were here in the

00:16:15.170 --> 00:16:18.460
previous session about offline data,
and that's the Databases panel.

00:16:18.460 --> 00:16:21.040
This was also in Safari 3.1.

00:16:21.040 --> 00:16:25.200
Now this lets you get at the
HTML5 client-side database

00:16:25.270 --> 00:16:27.720
storage that WebKit supports.

00:16:27.720 --> 00:16:31.530
And this is a way for you to
store structured data persistently

00:16:31.530 --> 00:16:33.240
on the user's computer.

00:16:33.240 --> 00:16:36.650
It's a new feature of the
upcoming HTML5 standard,

00:16:36.650 --> 00:16:39.170
and it's fully supported in WebKit.

00:16:39.400 --> 00:16:43.320
On the left, we have a list of all of the
databases that your page opened,

00:16:43.330 --> 00:16:46.080
and each of the tables that each
of those databases contains.

00:16:46.150 --> 00:16:49.940
When you have a database selected,
as we currently do in this screenshot,

00:16:49.940 --> 00:16:54.140
you are shown a query view where
you can enter SQL queries and have

00:16:54.140 --> 00:16:56.830
them evaluated live against the
database that you've selected.

00:16:56.960 --> 00:17:00.080
And if you select one of the tables,
you'll see a database browser,

00:17:00.080 --> 00:17:03.780
a table browser that will show you
all of the data in the database,

00:17:03.780 --> 00:17:08.000
all the columns and all the rows
and all the data in the cells.

00:17:08.350 --> 00:17:10.660
So those are the inspector's panels.

00:17:10.660 --> 00:17:12.430
The next thing I want to
talk to you about is the

00:17:12.430 --> 00:17:14.540
interactive JavaScript console.

00:17:14.550 --> 00:17:17.350
Now the console is a very useful thing,
so we want to enable you

00:17:17.460 --> 00:17:18.700
to get to it at any time.

00:17:18.730 --> 00:17:20.960
So no matter where you
are in the inspector,

00:17:20.970 --> 00:17:23.430
at any moment,
you can click on the show console

00:17:23.430 --> 00:17:26.910
button down in the status bar,
or you can press the escape

00:17:27.070 --> 00:17:28.840
key to bring up the console.

00:17:28.840 --> 00:17:31.710
And up it will come,
and right away you can start entering

00:17:31.750 --> 00:17:35.190
JavaScript expressions and evaluating
them right in the inspector as if

00:17:35.330 --> 00:17:38.140
they were being evaluated in the page.

00:17:38.150 --> 00:17:42.190
Now two new features to the console in
the Safari for Developer Preview are

00:17:42.190 --> 00:17:46.650
tab completion and auto completion,
which makes it really easy to type

00:17:46.650 --> 00:17:49.250
in long JavaScript expressions.

00:17:53.390 --> 00:17:56.310
So the final part of the inspector
that I mentioned before is

00:17:56.310 --> 00:17:58.240
the API for your sites to use.

00:17:58.300 --> 00:18:00.970
And this is exposed through
the window.console object.

00:18:00.980 --> 00:18:05.540
Now the window.console object has been
available in Safari for quite some time,

00:18:05.540 --> 00:18:08.270
but we've recently made some big
improvements and added a lot of

00:18:08.330 --> 00:18:11.830
new functionality to it to make
it even more useful for your site.

00:18:12.020 --> 00:18:16.460
The console object has methods for
debugging logging and assertions and

00:18:16.590 --> 00:18:18.970
for starting and stopping profiles.

00:18:19.120 --> 00:18:22.280
And all of this information appears right
in the inspector where you can see it

00:18:22.280 --> 00:18:24.300
while debugging the rest of your website.

00:18:24.300 --> 00:18:27.600
And I should also note that
we've taken care to make sure

00:18:27.600 --> 00:18:31.880
that all of our console API is
completely compatible with Firebug.

00:18:31.890 --> 00:18:34.090
So if your site is already
coded to use Firebug,

00:18:34.200 --> 00:18:38.000
it'll work right away in the inspector
without you having to change a thing.

00:18:38.000 --> 00:18:39.180
Thank you.

00:18:43.900 --> 00:18:46.520
So those are the three main
parts of the Inspector.

00:18:46.550 --> 00:18:49.620
Now, at this point,
you might be thinking to yourself,

00:18:49.670 --> 00:18:51.250
you know,
this Inspector thing sounds like

00:18:51.250 --> 00:18:54.820
it's pretty useful and pretty cool,
you know, but I have a WebKit application

00:18:54.820 --> 00:18:57.460
that has a lot of web content in it,
and I want to be able to use the

00:18:57.460 --> 00:18:59.900
Inspector to debug that content.

00:18:59.950 --> 00:19:03.510
Or maybe you're thinking that you're
a web developer and you try to always

00:19:03.510 --> 00:19:06.500
stay on top of the latest standards
and technologies in the web world,

00:19:06.500 --> 00:19:09.290
and these things move pretty fast,
and you don't want to have to wait

00:19:09.430 --> 00:19:12.170
for a new version of Safari to be
released just so you can try out

00:19:12.250 --> 00:19:16.310
the new features in the Inspector to
support these new technologies.

00:19:16.510 --> 00:19:19.480
Or maybe if you're my
favorite kind of developer,

00:19:19.530 --> 00:19:21.600
and maybe you're at the
WebKit party if you're like this,

00:19:21.600 --> 00:19:24.490
you were thinking, boy,
I have some really great ideas

00:19:24.490 --> 00:19:27.270
for how to make this inspector
so much better than before,

00:19:27.270 --> 00:19:29.200
and I want to implement them myself.

00:19:29.240 --> 00:19:31.660
Well,
if you're thinking any of these things,

00:19:31.670 --> 00:19:35.160
you're in luck, because the inspector
is not a Safari feature.

00:19:35.160 --> 00:19:36.740
It's actually a WebKit feature.

00:19:36.740 --> 00:19:39.740
It's included in the WebKit framework,
and it's part of the

00:19:39.740 --> 00:19:41.300
WebKit open source project.

00:19:41.810 --> 00:19:45.940
This means that on any day, at any time,
you can download the very latest version

00:19:45.940 --> 00:19:50.200
of WebKit using a WebKit nightly build
from nightly.webkit.org and try out

00:19:50.200 --> 00:19:53.440
the latest version of the inspector
with all of its newest features.

00:19:53.440 --> 00:19:57.450
You can also file bugs on the inspector
about new features that you would like

00:19:57.450 --> 00:20:01.270
or things that aren't working quite
the way you would expect at our public

00:20:01.270 --> 00:20:03.900
Bugzilla database at bugs.webkit.org.

00:20:03.900 --> 00:20:06.880
And finally,
you can check out and build the code

00:20:06.880 --> 00:20:11.590
yourself from our public subversion
repository at svn.webkit.org.

00:20:11.760 --> 00:20:11.760
And if you're a web developer,
you can download the

00:20:11.760 --> 00:20:11.820
inspector from the webkit.org.

00:20:11.950 --> 00:20:15.330
And get started right away making changes
to the inspector and improvements.

00:20:15.340 --> 00:20:19.350
And the inspector is written almost
entirely using web technologies.

00:20:19.350 --> 00:20:22.810
That means it's written using HTML, CSS,
and JavaScript.

00:20:22.810 --> 00:20:25.150
The entire user interface is this way.

00:20:25.160 --> 00:20:27.820
And so it's really easy to get
started if you're a web developer

00:20:27.890 --> 00:20:29.570
making changes to the inspector.

00:20:32.930 --> 00:20:35.040
So that's pretty much
it for the inspector.

00:20:35.040 --> 00:20:36.620
Now you have an overview of what's there.

00:20:36.630 --> 00:20:38.680
And now we're going to move
into the first of the more

00:20:38.680 --> 00:20:40.960
practical sessions of this talk.

00:20:41.020 --> 00:20:43.890
So first we're going to talk
about finding and fixing

00:20:43.890 --> 00:20:46.270
content and layout errors.

00:20:46.920 --> 00:20:49.700
So what do we mean when
we're talking about content?

00:20:49.750 --> 00:20:52.660
Well, really there are two types of
content that we're concerned with.

00:20:52.700 --> 00:20:57.200
There is your page's style and
appearance and your page's markup.

00:20:57.300 --> 00:21:00.060
First, we're going to talk about
the style and appearance.

00:21:00.110 --> 00:21:01.940
But, you know,
we've shown you a lot of slides and

00:21:01.940 --> 00:21:04.940
you're probably a little anxious to see
how this whole inspector thing works,

00:21:04.940 --> 00:21:07.590
so we're going to go straight to a demo.

00:21:13.260 --> 00:21:14.520
So here we are.

00:21:14.520 --> 00:21:19.720
We've just installed our developer DVD,
and I'm going to open up Safari.

00:21:20.090 --> 00:21:22.020
And turn on the web inspector.

00:21:22.210 --> 00:21:26.010
So as Tim said,
you just go to Safari's preferences and

00:21:26.010 --> 00:21:30.400
in the advanced pane of the preferences,
there's a checkbox, show develop menu.

00:21:30.400 --> 00:21:32.950
So I'm going to check that and
you'll see up in the menu bar,

00:21:32.950 --> 00:21:35.620
the develop menu appears
right next to the window menu.

00:21:35.620 --> 00:21:39.030
And now I have access to all of those
features that Tim was talking about,

00:21:39.030 --> 00:21:41.990
the user agent menu, the open page width,
and the ways to get to

00:21:41.990 --> 00:21:43.310
the inspector itself.

00:21:44.980 --> 00:21:50.910
So, if you were here in the
offline data session,

00:21:50.910 --> 00:21:53.450
you probably saw a pretty
cool web calendar demo,

00:21:53.450 --> 00:21:55.250
and we're going to use that a
little more in this session.

00:21:55.260 --> 00:21:57.370
So let's open that up.

00:21:57.690 --> 00:21:58.660
So here it is.

00:21:58.680 --> 00:22:02.110
We've entered a bunch of events here,
and all of our data is being

00:22:02.120 --> 00:22:05.810
loaded off of a SQL database,
off of the local disk,

00:22:05.860 --> 00:22:06.960
and it's really pretty useful.

00:22:06.960 --> 00:22:10.460
But you might notice that we have some
scroll bars here that seem to be kind

00:22:10.460 --> 00:22:14.380
of obscuring our content and making it
a little hard to see what's going on.

00:22:14.400 --> 00:22:18.050
So I'm going to choose to inspect
right here by right-clicking and

00:22:18.050 --> 00:22:22.170
choosing Inspect Element to see what
the inspector can tell me about the

00:22:22.170 --> 00:22:26.520
style in this area that might be
causing these scroll bars to appear.

00:22:27.300 --> 00:22:30.620
So if I choose Inspect Element,
the inspector comes up and it

00:22:30.620 --> 00:22:34.330
puts me right in the Elements
panel and selects the element that

00:22:34.330 --> 00:22:36.340
I was clicking on in the page.

00:22:36.340 --> 00:22:39.280
Now you can see over on the
right here in the Styles pane,

00:22:39.280 --> 00:22:41.880
the first item is called
the Computed Style.

00:22:41.880 --> 00:22:45.080
This is the style that the element
is being rendered with on the page.

00:22:45.080 --> 00:22:48.420
And if you scroll down a little farther,
you can see all of the CSS rules

00:22:48.420 --> 00:22:51.500
that we declared in our style
sheets and that the browser applies

00:22:51.500 --> 00:22:55.390
automatically and how these were built
up to obtain that computed style.

00:22:56.790 --> 00:22:59.420
So I'm going to collapse the computed
style for a moment and look mostly at

00:22:59.420 --> 00:23:00.920
the style sheet that we've created here.

00:23:00.940 --> 00:23:04.370
Now I can see that we
have an overflow rule.

00:23:04.380 --> 00:23:09.850
Now overflow is a property that controls
what happens when content extends

00:23:09.900 --> 00:23:11.960
outside of the element containing it.

00:23:12.070 --> 00:23:15.820
It can turn on and off scroll bars
and make them appear only when needed.

00:23:15.970 --> 00:23:18.700
And so this seems probably like the
place we need to look to figure out

00:23:18.700 --> 00:23:20.130
what's going on with these scroll bars.

00:23:20.140 --> 00:23:23.470
Now here we have auto set,
which means that when

00:23:23.540 --> 00:23:25.980
the content is too big,
scroll bars should appear.

00:23:25.980 --> 00:23:27.420
And when it's not too big,
they shouldn't.

00:23:27.420 --> 00:23:31.900
Now I'm going to try just removing
the overflow property entirely,

00:23:32.070 --> 00:23:35.010
just to see if Safari's defaults
give me the appearance I want.

00:23:35.020 --> 00:23:38.050
You can edit any CSS in the
inspector in the styles pane

00:23:38.050 --> 00:23:39.820
just by double clicking on it.

00:23:39.820 --> 00:23:43.180
And this brings up an edit field.

00:23:43.180 --> 00:23:44.780
You can select any text and delete it.

00:23:44.780 --> 00:23:48.300
And I'm going to try just deleting
all of the text in the rule and

00:23:48.330 --> 00:23:49.550
hitting enter to commit that.

00:23:49.690 --> 00:23:52.700
So when I hit enter,
you can see that in the page,

00:23:52.700 --> 00:23:54.300
the styles updated live.

00:23:54.450 --> 00:23:56.650
Now the scroll bars did go away,
but I think now we have a problem

00:23:56.650 --> 00:23:59.540
that's a little bit different,
which is that our data is now extending

00:23:59.610 --> 00:24:01.340
into the following days on the calendar.

00:24:01.340 --> 00:24:04.200
So this doesn't seem quite what we want.

00:24:04.300 --> 00:24:06.620
So maybe we should try
a few other properties,

00:24:06.620 --> 00:24:08.060
values for the overflow property.

00:24:08.060 --> 00:24:11.580
Now it looks like here we're extending
a lot in the vertical direction.

00:24:11.580 --> 00:24:14.060
So I'm going to try
modifying overflow Y first,

00:24:14.060 --> 00:24:15.260
which controls just that direction.

00:24:15.260 --> 00:24:19.190
And if you want to add a new property,
you can just double click on any existing

00:24:19.190 --> 00:24:21.510
property and start typing right now,
overflow Y.

00:24:21.590 --> 00:24:23.890
And then you can see that the
data is now extending into the

00:24:24.330 --> 00:24:24.780
following days on the calendar.

00:24:24.780 --> 00:24:25.560
So I'm going to try to do that.

00:24:25.590 --> 00:24:29.750
So I'm going to type overflow Y hidden.

00:24:29.980 --> 00:24:32.380
Now I think that this will
fix some of our issues.

00:24:32.380 --> 00:24:34.220
And sure enough, it did.

00:24:34.220 --> 00:24:36.700
Now we're not extending in
the Y direction anymore,

00:24:36.700 --> 00:24:39.560
but we still do seem to have a
horizontal scroll bar on some days.

00:24:39.680 --> 00:24:41.300
So to get rid of that,
we're going to do the

00:24:41.310 --> 00:24:42.540
same thing for overflow X.

00:24:42.540 --> 00:24:45.450
So I'll double click and
type in the property I want.

00:24:45.580 --> 00:24:46.650
And then I'm going to type
in the property I want.

00:24:47.500 --> 00:24:50.950
And when I hit enter, the styles update,
and now it looks like our

00:24:50.950 --> 00:24:52.420
problem has been fixed.

00:24:52.600 --> 00:24:55.420
So you can see how the inspector
makes it really easy to update styles

00:24:55.470 --> 00:24:58.920
live in the page and experiment
around with different looks.

00:24:58.970 --> 00:25:01.470
Now, of course, if we want this data to
go live to our users,

00:25:01.540 --> 00:25:05.400
we'll have to make the same edits in the
source file and upload it to our server.

00:25:05.460 --> 00:25:09.700
The edits that we make here are just
modifying the live representation

00:25:09.700 --> 00:25:11.520
of the page in the browser.

00:25:11.580 --> 00:25:14.080
So can we go back to slides, please?

00:25:17.400 --> 00:25:19.300
So that's how to find
and fix layout errors.

00:25:19.300 --> 00:25:22.060
And now let's talk about the
other part of content errors

00:25:22.060 --> 00:25:24.440
that I mentioned before,
which are markup errors.

00:25:24.440 --> 00:25:27.600
Now there are two main
kinds of markup errors.

00:25:27.600 --> 00:25:30.460
The first kind are syntax errors.

00:25:30.460 --> 00:25:34.640
This is when you have content that
is just not valid HTML syntax at all.

00:25:34.660 --> 00:25:37.440
One example of this
would be misnested tags.

00:25:37.440 --> 00:25:41.270
If you have tags that are opening
and closing in the wrong order,

00:25:41.360 --> 00:25:45.170
then this is one kind of syntax
error that you'll encounter.

00:25:46.120 --> 00:25:49.560
Another kind of syntax error
is to have extra closing tags.

00:25:49.710 --> 00:25:53.120
In general, you're supposed to have one
opening tag for each closing tag.

00:25:53.120 --> 00:25:57.550
And so if these opening tags and
closing tags don't match up in number,

00:25:57.550 --> 00:26:01.390
then you have some extra tags
that you'll need to get rid of.

00:26:01.570 --> 00:26:09.330
Markup Error #2:
Non-conforming content This is

00:26:09.330 --> 00:26:14.280
content that is syntactically valid,
but doesn't conform to the HTML standard.

00:26:14.310 --> 00:26:16.410
To even recognize one of
these kinds of errors,

00:26:16.410 --> 00:26:19.740
you have to have your head really
deep in the HTML standard and know

00:26:19.740 --> 00:26:21.740
all of the different rules in it.

00:26:21.740 --> 00:26:26.380
One example of an error like this is
when you have a tag that's placed in

00:26:26.380 --> 00:26:29.120
an area that HTML says is not allowed.

00:26:29.120 --> 00:26:33.260
For example, here we have a form tag
that's a child of a table tag.

00:26:33.260 --> 00:26:36.090
And while this is
syntactically valid HTML,

00:26:36.090 --> 00:26:39.200
the HTML specification
says it's not allowed.

00:26:39.200 --> 00:26:41.640
Now to find these errors in the past,
either you had to just

00:26:41.650 --> 00:26:43.380
know what they were,
like I said,

00:26:43.610 --> 00:26:48.600
or you had to use some external
tools such as an HTML validator.

00:26:48.600 --> 00:26:51.830
And these other tools are very useful,
but they can't tell you what the browser

00:26:51.830 --> 00:26:54.060
will actually do when it finds it.

00:26:54.060 --> 00:26:56.040
And it's an external tool that
you have to use in addition to

00:26:56.040 --> 00:26:58.740
everything else that you're already
using to debug your website.

00:26:58.800 --> 00:27:03.380
So a new feature in the WebKit engine
that's built right in is the ability

00:27:03.380 --> 00:27:06.800
to find and identify and explain
these errors to you and tell you

00:27:06.800 --> 00:27:08.780
what WebKit does in response to them.

00:27:08.780 --> 00:27:11.680
And this is all exposed
through the inspector.

00:27:11.680 --> 00:27:14.580
So let's see how we might use this.

00:27:14.900 --> 00:27:16.990
So here we have a page
that we're inspecting.

00:27:17.160 --> 00:27:19.750
We opened up the inspector
and loaded the page,

00:27:19.750 --> 00:27:20.940
and we're looking at the DOM tree.

00:27:20.940 --> 00:27:23.570
Now you can notice that
down in the bottom right,

00:27:23.570 --> 00:27:25.480
we have this little error count.

00:27:25.500 --> 00:27:28.530
If you're a user of Xcode,
this will look very familiar to you.

00:27:28.540 --> 00:27:31.340
It shows you compiler errors
and warnings in the same place.

00:27:31.340 --> 00:27:35.260
So here the inspector is telling us
that we have three errors in our page.

00:27:35.260 --> 00:27:38.660
And if we click on that error count,
the console will appear with a

00:27:39.170 --> 00:27:40.630
listing of all of those errors.

00:27:41.100 --> 00:27:46.320
Now next to each error is a hyperlink
that takes you right to the source file

00:27:46.320 --> 00:27:48.280
and source line where the error occurred.

00:27:48.280 --> 00:27:52.260
So if you click on one of those,
we'll move over to the resources panel.

00:27:52.260 --> 00:27:54.650
And the resource where the
error occurred will be selected,

00:27:54.650 --> 00:27:55.770
so you can see its source.

00:27:55.780 --> 00:27:58.290
And the line where the error
occurred will be highlighted,

00:27:58.290 --> 00:27:59.670
so you can find it right away.

00:27:59.680 --> 00:28:03.000
Now you can see that we've also
inserted these red error bubbles to

00:28:03.000 --> 00:28:06.940
show you the errors right in line and
all the context that surrounds them.

00:28:06.960 --> 00:28:10.160
So this makes it very easy to see
where the errors are occurring

00:28:10.160 --> 00:28:11.080
and to get a handle on them.

00:28:11.100 --> 00:28:12.900
and what's going on.

00:28:19.090 --> 00:28:21.160
So let's look at the
very first error here.

00:28:21.440 --> 00:28:24.660
Often these kinds of content errors,
the markup errors,

00:28:24.680 --> 00:28:27.980
will cascade and cause many other
errors farther down the line.

00:28:27.980 --> 00:28:30.490
So it's good to focus
on the first ones first.

00:28:30.610 --> 00:28:35.370
So the first error we have here says,
XML self-closing tag syntax

00:28:35.370 --> 00:28:37.330
used on the anchor element.

00:28:37.720 --> 00:28:39.850
This tag will not be closed.

00:28:40.170 --> 00:28:42.280
So you may not be able to see
this in the screenshot here.

00:28:42.280 --> 00:28:45.820
So here's a larger version of the
markup that is being talked about.

00:28:45.880 --> 00:28:48.840
Here we have an anchor element,
and on the right edge of it,

00:28:48.850 --> 00:28:51.370
you can see that we have a
forward slash just preceding

00:28:51.410 --> 00:28:53.460
the closing right angle bracket.

00:28:53.470 --> 00:28:57.840
Now this syntax is valid in XML,
but is not valid in HTML.

00:28:57.880 --> 00:29:01.520
And so WebKit is telling you
that since this is HTML content,

00:29:01.630 --> 00:29:05.720
this tag actually won't be closed at all,
and the tag will remain open.

00:29:06.140 --> 00:29:11.040
So it turns out that this error is
actually causing all of the errors

00:29:11.040 --> 00:29:12.600
that we're seeing on this page.

00:29:12.610 --> 00:29:15.440
And so the other errors here are
saying that an anchor element is

00:29:15.490 --> 00:29:17.270
misnested or not properly closed.

00:29:17.300 --> 00:29:19.060
Which is the case here.

00:29:19.080 --> 00:29:23.100
It's cloning the anchor element in order
to preserve the styles applied by it.

00:29:23.190 --> 00:29:26.480
So this is something that web browsers
have to do when they encounter misnested

00:29:26.800 --> 00:29:30.920
or not properly closed content,
just to make your page look the way

00:29:30.920 --> 00:29:32.980
you might expect it to from the markup.

00:29:32.990 --> 00:29:35.620
And you can see the effect
of this here in the DOM tree.

00:29:35.630 --> 00:29:38.280
It turns out that this anchor
element has actually been cloned

00:29:38.280 --> 00:29:40.300
into two other places in the DOM.

00:29:40.360 --> 00:29:44.680
And in some cases,
it even has child elements, child nodes.

00:29:44.700 --> 00:29:45.780
Now these are real nodes.

00:29:45.780 --> 00:29:48.100
They're not just something that
we're showing you in the inspector.

00:29:48.100 --> 00:29:49.280
They're actually in the DOM.

00:29:49.340 --> 00:29:52.060
And this will even affect scripts
that are running on your page.

00:29:52.110 --> 00:29:55.220
For example, if we use the inspector's
console to find out how many

00:29:55.220 --> 00:29:58.680
anchor elements are on the page,
it'll tell us that there are four,

00:29:58.710 --> 00:30:01.800
even though in our original source code,
we only had two.

00:30:01.840 --> 00:30:06.190
So these two cloned elements really do
exist and they can trip up your page.

00:30:06.410 --> 00:30:07.480
So how can we fix this?

00:30:07.480 --> 00:30:10.020
Well,
WebKit has already told us that we're

00:30:10.020 --> 00:30:13.810
using an XML self-closing tag syntax,
and so all we have to do

00:30:13.820 --> 00:30:14.950
is get rid of that syntax.

00:30:15.020 --> 00:30:18.690
So here again is the self-closing syntax,
and to turn this into

00:30:18.690 --> 00:30:22.580
syntactically valid HTML,
all we have to do is remove the forward

00:30:22.610 --> 00:30:25.030
slash and place a closing tag after it.

00:30:25.120 --> 00:30:28.120
And so if we make this change in
our source and upload it to the

00:30:28.120 --> 00:30:31.130
server again and reload the page,
then you can see that

00:30:31.140 --> 00:30:35.080
down in the bottom right,
we don't have any errors anymore.

00:30:35.480 --> 00:30:37.720
The source code doesn't have
any error bubbles in it,

00:30:37.770 --> 00:30:40.620
and if we go over to the elements
panel and look at the DOM tree,

00:30:40.620 --> 00:30:43.160
we don't have any cloned
anchor elements anymore.

00:30:43.160 --> 00:30:45.840
The DOM looks just like we would
expect from the source of the page.

00:30:47.290 --> 00:30:50.410
So the inspector makes it really,
really easy to find out where

00:30:50.410 --> 00:30:53.520
these errors are on your
page and how to fix them.

00:30:53.630 --> 00:30:56.630
So now that we've talked about
content and layout errors,

00:30:56.650 --> 00:30:58.940
I'm going to give it back over to Tim,
who's going to tell you how to

00:30:59.060 --> 00:31:03.320
find and fix JavaScript bugs in
your page using the inspector.

00:31:10.010 --> 00:31:11.690
Thanks, Adam.

00:31:11.950 --> 00:31:17.300
So a lot of you said you were
familiar with the Nightly Builds

00:31:17.300 --> 00:31:19.260
or have downloaded one in the past.

00:31:19.430 --> 00:31:24.170
And you might have seen a debugger that
we've had in the past called Drosera.

00:31:24.360 --> 00:31:27.700
And you've probably used it and
filed a bunch of bugs about it,

00:31:27.700 --> 00:31:30.600
I hope,
and shared your experiences with us.

00:31:30.820 --> 00:31:34.060
And we've heard a lot of feedback
about that experimental app

00:31:34.060 --> 00:31:37.390
that we've been shipping with
the Nightly Builds for a while.

00:31:37.620 --> 00:31:42.940
And we've taken all that feedback that
you've given us and designed a brand

00:31:42.940 --> 00:31:48.630
new JavaScript debugger that's now
integrated directly in the Web Inspector.

00:31:48.800 --> 00:31:52.430
So it's exactly what all of
you have been asking for.

00:31:53.200 --> 00:31:56.600
So let's talk about
this brand new debugger.

00:31:56.630 --> 00:31:57.440
Well, it's fast.

00:31:57.440 --> 00:31:59.310
It's a lot faster than
the previous counterpart,

00:31:59.410 --> 00:32:01.870
the previous thing that
I was talking about,

00:32:01.900 --> 00:32:02.480
Drosera.

00:32:02.690 --> 00:32:04.370
And it's great.

00:32:04.480 --> 00:32:08.470
It lets you break,
pause your program any time.

00:32:08.590 --> 00:32:11.590
And here's what it looks like.

00:32:12.950 --> 00:32:18.720
This is our debugging tool now
shipping in Safari Developer Preview 4.

00:32:18.930 --> 00:32:20.430
Well, not really.

00:32:20.630 --> 00:32:22.800
It does ship with
Safari Developer Preview 4,

00:32:22.800 --> 00:32:25.800
but you've already used it,
you've seen it before.

00:32:25.860 --> 00:32:29.140
The alert function lets
you inspect variables,

00:32:29.140 --> 00:32:29.840
right?

00:32:29.840 --> 00:32:32.890
But this is really what you're here for.

00:32:32.910 --> 00:32:37.810
It's the brand new debugger built
right into the Web Inspector.

00:32:39.720 --> 00:32:44.140
So let's talk about this
debugger a little bit.

00:32:44.150 --> 00:32:45.180
It's great.

00:32:45.180 --> 00:32:46.510
It's better than Alert.

00:32:46.520 --> 00:32:47.970
It's better than Console.log.

00:32:48.100 --> 00:32:50.900
Console.log is great too
for certain situations,

00:32:50.900 --> 00:32:52.960
but it's not great for debugging.

00:32:52.970 --> 00:32:56.440
No one likes instrumenting
code just to debug some problem

00:32:56.440 --> 00:32:57.720
that they're running into.

00:32:57.760 --> 00:33:02.810
And everyone knows JavaScript is a
finicky language and it has all these

00:33:02.880 --> 00:33:09.640
different quirks that it has that is
very different than many other languages.

00:33:09.830 --> 00:33:13.640
So it's great for no code
instrumentation debugging,

00:33:13.640 --> 00:33:16.390
this brand new debugger that we have.

00:33:16.740 --> 00:33:19.600
And it works with any production website.

00:33:19.720 --> 00:33:22.700
So maybe you can't even
instrument your code.

00:33:22.740 --> 00:33:26.000
You can still debug your
website using this new debugger.

00:33:26.100 --> 00:33:30.980
And it provides a great amount
of detail that you can't get with

00:33:31.100 --> 00:33:33.900
any other alert or console.log.

00:33:34.000 --> 00:33:38.390
So let's show you how to get
started using the debugger.

00:33:38.820 --> 00:33:42.920
And one of the items I skipped over
earlier is the Start Debugging item

00:33:42.920 --> 00:33:45.200
now available in the Develop menu.

00:33:45.340 --> 00:33:48.000
This is new in the
Safari Developer Preview.

00:33:48.160 --> 00:33:51.200
And it lets you jump right
into the Web Inspector,

00:33:51.200 --> 00:33:55.450
goes to the Scripts panel,
and starts debugging right away.

00:33:55.610 --> 00:33:59.980
But if you don't choose this menu item
and you just open the Web Inspector and

00:33:59.980 --> 00:34:03.300
go to the Scripts panel,
you'll see something like this.

00:34:03.450 --> 00:34:08.400
And since our JavaScript engine
is the fastest out there,

00:34:08.510 --> 00:34:12.480
we want to keep that way
for all the end users.

00:34:12.610 --> 00:34:15.100
Even people that have the
Web Inspector turned on.

00:34:15.120 --> 00:34:17.860
But maybe they're not
actively debugging JavaScript.

00:34:18.070 --> 00:34:20.230
We don't want to have to
slow down the JavaScript.

00:34:20.390 --> 00:34:23.540
And when I say slow down the
JavaScript just for debugging,

00:34:23.780 --> 00:34:25.380
it's still fast.

00:34:25.500 --> 00:34:29.450
Debugging with this brand new
Web Inspector is as fast as using

00:34:29.450 --> 00:34:33.050
JavaScript as we shipped it in Safari 3.

00:34:33.200 --> 00:34:38.620
So when I talk about slow,
Safari 3 was still fast in JavaScript.

00:34:38.890 --> 00:34:45.000
So our debugger is great
even when you're attached.

00:34:45.810 --> 00:34:52.570
Still, Safari 4 is lightning speed
compared to Safari 3's JavaScript.

00:34:52.730 --> 00:34:55.440
So we give you an option
to start debugging,

00:34:55.490 --> 00:34:58.830
and this adds those extra hooks
that the Web Inspector needs

00:34:58.980 --> 00:35:01.100
to debug your JavaScript.

00:35:01.170 --> 00:35:04.920
So just clicking the Start Debugging
button will reload your page

00:35:05.360 --> 00:35:07.960
and enter those debugging hooks.

00:35:08.170 --> 00:35:11.490
So let's go right into a demo.

00:35:15.340 --> 00:35:20.610
So using this calendar app,
I was talking to Ada and Brady,

00:35:20.610 --> 00:35:24.700
and they shared with me some
experiences while developing this

00:35:24.870 --> 00:35:27.320
that they needed a debugger for.

00:35:27.350 --> 00:35:29.470
And let's talk about that.

00:35:29.720 --> 00:35:34.410
So I have a version of the calendar here,
and it's actually broken.

00:35:34.410 --> 00:35:38.200
So I'm now on the broken calendar.

00:35:38.420 --> 00:35:40.200
Well, it doesn't look broken visually.

00:35:40.200 --> 00:35:42.690
All the events are showing up.

00:35:42.740 --> 00:35:46.400
But let's take a look
at the Web Inspector.

00:35:46.510 --> 00:35:52.120
So under the development menu,
we can bring up the error console.

00:35:52.540 --> 00:35:59.030
The error console will just open the
Web Inspector and animate in the console.

00:35:59.130 --> 00:36:01.800
Well, the page looks fine.

00:36:02.000 --> 00:36:04.360
We didn't have any errors.

00:36:04.410 --> 00:36:06.990
And we still don't have any errors.

00:36:07.280 --> 00:36:13.110
So, let's figure out what's going
on and where my error went.

00:36:16.940 --> 00:36:18.490
That's correct.

00:36:18.670 --> 00:36:21.690
So my colleagues are telling
me I need to do a search,

00:36:21.690 --> 00:36:23.040
and that's where the broken code is.

00:36:23.040 --> 00:36:25.100
So let's bring up the error console.

00:36:25.100 --> 00:36:29.760
We don't have any errors except for this
resource being interpreted as text HTML.

00:36:30.020 --> 00:36:30.700
That's fine.

00:36:30.700 --> 00:36:32.330
We can just ignore that.

00:36:32.580 --> 00:36:34.180
So let's go ahead and search.

00:36:34.180 --> 00:36:36.320
Let's search for Safari.

00:36:36.320 --> 00:36:37.620
Oh, there's our error.

00:36:37.620 --> 00:36:40.600
So now we have an error
count and one warning.

00:36:40.600 --> 00:36:45.680
And right here in the console,
you can see our JavaScript exception.

00:36:45.680 --> 00:36:49.470
And just like the markup errors
that Adam was talking about,

00:36:49.560 --> 00:36:52.010
we give you a link right to the source.

00:36:52.100 --> 00:36:55.560
You can click on that,
and it takes you directly to that

00:36:55.560 --> 00:36:59.550
line of code in the resources
panel and highlights the line and

00:36:59.550 --> 00:37:02.070
gives you the inline error bubble.

00:37:02.580 --> 00:37:08.540
So thank you.

00:37:08.540 --> 00:37:08.540
Great.

00:37:09.660 --> 00:37:11.730
Glad you like that.

00:37:11.880 --> 00:37:14.940
So I really don't know what's going on,
what's undefined here.

00:37:15.030 --> 00:37:18.900
The error is a little vague
and the nature of JavaScript,

00:37:18.970 --> 00:37:20.030
it can be really anything.

00:37:20.200 --> 00:37:22.600
So let's jump right into the debugger.

00:37:22.890 --> 00:37:25.300
Let's go to the scripts panel.

00:37:26.100 --> 00:37:28.550
And start debugging.

00:37:28.670 --> 00:37:31.760
So you notice the page reloads,
and now we're presented with all the

00:37:31.760 --> 00:37:36.230
scripts that were loaded in that process,
in that page.

00:37:36.580 --> 00:37:39.860
and they're available
from the pop-up menu here.

00:37:40.110 --> 00:37:41.400
So this is the Scripts Panel.

00:37:41.400 --> 00:37:45.400
I'll go over the various pieces
of the UI here in a second.

00:37:45.460 --> 00:37:52.100
And one other item down here is
the Pause on Exceptions button.

00:37:52.220 --> 00:37:53.940
And you can turn this on or off.

00:37:54.010 --> 00:37:57.670
And whenever an exception is encountered,
the debugger will break and pause

00:37:57.670 --> 00:38:01.780
and show you where that exception
is happening right when it happens.

00:38:01.930 --> 00:38:04.780
So let's go ahead and
do the search again.

00:38:07.710 --> 00:38:08.360
And there we are.

00:38:08.410 --> 00:38:10.180
We're broken in the debugger.

00:38:10.290 --> 00:38:12.360
And now the UI has really come to life.

00:38:12.530 --> 00:38:15.800
Before you're paused,
it's kind of empty and boring.

00:38:15.840 --> 00:38:20.700
And once you're paused on a statement,
you can see the sidebar has filled

00:38:20.700 --> 00:38:24.100
in with a lot of information,
such as the call stack.

00:38:24.270 --> 00:38:27.600
And since this is a callback
function from a database query,

00:38:27.640 --> 00:38:30.890
we only have one function
in our call stack.

00:38:31.340 --> 00:38:34.600
And below that,
we have all of the scope variables.

00:38:34.660 --> 00:38:39.400
And since this function was
defined inside of another function,

00:38:39.420 --> 00:38:41.220
it created a closure.

00:38:41.260 --> 00:38:44.280
And those familiar with
JavaScript will know what a closure is.

00:38:44.310 --> 00:38:47.900
It lets you get access
to the parent functions,

00:38:47.910 --> 00:38:52.600
local variables that were in scope at
that time when the function was declared.

00:38:52.650 --> 00:38:56.020
So you can see we separate
the different scopes.

00:38:56.080 --> 00:38:59.920
So you have your local scope and
then you have your closure scope,

00:38:59.960 --> 00:39:01.190
and that can keep chaining.

00:39:01.250 --> 00:39:02.780
You can have multiple closures.

00:39:02.780 --> 00:39:07.230
And then we have your global scope,
which you can toggle this open

00:39:07.490 --> 00:39:09.920
and we keep it closed by default.

00:39:09.920 --> 00:39:12.640
But you can see all of the
properties on the window object.

00:39:12.670 --> 00:39:14.070
And we're inspecting this live.

00:39:14.160 --> 00:39:17.940
These are the variables and the values of
all the JavaScript objects that are here.

00:39:18.100 --> 00:39:20.980
And you can toggle these down
and see what's in these arrays

00:39:21.170 --> 00:39:25.370
and deeply nested object graphs.

00:39:26.080 --> 00:39:31.340
So we're here and I remember
it was complaining about

00:39:31.490 --> 00:39:33.320
some undefined variable.

00:39:33.320 --> 00:39:38.940
So I have a hunch that it might
be this function that we're trying

00:39:38.940 --> 00:39:40.230
to call inside this callback.

00:39:40.240 --> 00:39:42.550
The function,
the callback is only doing one thing,

00:39:42.640 --> 00:39:44.550
so it has to be something like this,
right?

00:39:44.690 --> 00:39:47.060
So we can evaluate stuff
while we're paused.

00:39:47.070 --> 00:39:49.910
And sure enough,
this function is undefined and you

00:39:49.910 --> 00:39:52.500
can't call an undefined function,
right?

00:39:55.800 --> 00:39:56.700
What could this be?

00:39:56.700 --> 00:39:59.980
Well, maybe the this object is undefined.

00:39:59.980 --> 00:40:04.300
Well, this is a special variable
and it's never undefined.

00:40:04.300 --> 00:40:06.540
It's always defined to something,
I believe.

00:40:06.540 --> 00:40:11.520
And the this object,
the this variable is a magic function.

00:40:11.520 --> 00:40:15.440
It changes and morphs around and
masquerades as different things.

00:40:16.240 --> 00:40:19.380
And it depends on how the
function was called in JavaScript.

00:40:19.450 --> 00:40:21.690
And in this case, it was a callback.

00:40:21.780 --> 00:40:25.430
So you really have no control as a
developer of what the this object

00:40:25.500 --> 00:40:27.610
is when your callback is called.

00:40:27.620 --> 00:40:32.840
So you need, if you're going to access
external data or another object,

00:40:32.950 --> 00:40:36.190
you need to have some other
way to access that instead of

00:40:36.190 --> 00:40:37.570
relying on the this variable.

00:40:39.730 --> 00:40:44.450
So, and you can also see what the
this variable value is over here,

00:40:44.450 --> 00:40:46.400
and I evaluated it in the console.

00:40:46.540 --> 00:40:48.740
And at this point in time,
it's the function,

00:40:48.740 --> 00:40:50.160
it's the current function.

00:40:50.160 --> 00:40:51.780
And that's not what we need.

00:40:51.780 --> 00:40:57.050
You can see that this variable,
this object, doesn't have the function

00:40:57.050 --> 00:40:58.530
we're looking for on it.

00:40:58.760 --> 00:41:02.380
So let's go into Xcode
and see what we can do.

00:41:03.320 --> 00:41:07.200
and open up our broken JavaScript.

00:41:07.330 --> 00:41:10.490
And let's go down to the line of code.

00:41:15.680 --> 00:41:19.040
Here's where we need to look.

00:41:19.190 --> 00:41:23.980
So here's the line of code that
we're using the this property,

00:41:24.000 --> 00:41:25.030
the this variable, I mean.

00:41:25.040 --> 00:41:29.580
So since we have a closure
here with this callback,

00:41:29.690 --> 00:41:33.080
we can define another variable
that we can access later.

00:41:33.080 --> 00:41:36.910
So we can just say
variable self equals this.

00:41:36.940 --> 00:41:41.780
And self is not a keyword in JavaScript,
unlike Objective-C.

00:41:41.780 --> 00:41:45.600
So a lot of developers have worked
around issues just like this.

00:41:45.760 --> 00:41:48.000
This, right?

00:41:48.000 --> 00:41:53.910
Where they need some other name for a
variable that they're going to access

00:41:54.000 --> 00:41:57.430
inside of one of these callback functions
or inside of a closure like this.

00:41:57.520 --> 00:42:01.760
So we can now use self
in replace of this.

00:42:02.000 --> 00:42:05.760
And that self variable is going to
be in scope because we're creating a

00:42:05.760 --> 00:42:08.280
closure by using this callback like this.

00:42:08.380 --> 00:42:10.460
So let's go ahead and save this.

00:42:12.120 --> 00:42:15.400
This, this, this, this.

00:42:15.440 --> 00:42:17.480
What this am I talking about, right?

00:42:17.640 --> 00:42:21.360
So we've reloaded the page,
and we're still in the debugger.

00:42:21.360 --> 00:42:24.780
After I've reloaded the page,
the debugger is still attached,

00:42:24.780 --> 00:42:26.400
and it keeps track of you.

00:42:26.400 --> 00:42:30.220
It updates the resources
as new scripts are loaded,

00:42:30.220 --> 00:42:34.780
as evals are evaluated,
and they would show up in the menu.

00:42:34.780 --> 00:42:38.100
And there's the same three
files I loaded earlier.

00:42:38.100 --> 00:42:41.290
And break on exceptions
is still turned on.

00:42:41.300 --> 00:42:44.700
So if an exception
would happen right now,

00:42:44.700 --> 00:42:46.000
it would break right in the debugger.

00:42:46.000 --> 00:42:49.100
So let's go ahead and
do the search again.

00:42:49.270 --> 00:42:50.590
Safari.

00:42:50.730 --> 00:42:50.890
Oh.

00:42:51.100 --> 00:42:54.120
Well,
I don't have any data in my database.

00:42:54.120 --> 00:42:56.960
So something has happened there.

00:42:56.960 --> 00:42:58.340
There we go.

00:42:58.340 --> 00:43:00.590
We still got the undefined.

00:43:00.610 --> 00:43:03.490
Let's see where that's happening.

00:43:05.350 --> 00:43:07.490
Well, that's curious.

00:43:07.900 --> 00:43:11.050
So let's reload again.

00:43:12.030 --> 00:43:13.340
and try our search.

00:43:13.370 --> 00:43:14.160
There we go.

00:43:14.400 --> 00:43:15.500
It was just a caching issue.

00:43:15.500 --> 00:43:19.450
I should have turned off
caches in the development menu,

00:43:19.450 --> 00:43:20.250
right?

00:43:25.890 --> 00:43:29.640
Well, it looks like we fixed search,
but the debugger can be used

00:43:29.810 --> 00:43:34.330
for a lot more than just fixing
code as an exception happens.

00:43:34.560 --> 00:43:39.240
You might have never written any of this
code and you've been tasked to fix it,

00:43:39.240 --> 00:43:39.470
right?

00:43:39.560 --> 00:43:41.770
That happens all the time
in the development world,

00:43:41.770 --> 00:43:42.200
right?

00:43:42.360 --> 00:43:45.840
Someone else drops this big pile
of code on your lap and you need

00:43:45.840 --> 00:43:50.410
to figure out how it works in
two days and ship it for a demo,

00:43:50.410 --> 00:43:51.910
right?

00:43:52.870 --> 00:43:57.070
I love this app and Ada did
a great job in writing this

00:43:57.070 --> 00:44:01.040
demo for the previous session,
but I had no clue how it worked.

00:44:01.080 --> 00:44:03.390
I'd never seen this code before.

00:44:03.540 --> 00:44:08.350
So I was very curious of how the days
are populated up here on this chart.

00:44:08.500 --> 00:44:13.270
So one feature of the debugger is

00:44:13.620 --> 00:44:18.230
You can just click the pause button
and here's all the function flow

00:44:19.020 --> 00:44:24.040
controls that we have available for
stepping and pausing and continuing.

00:44:24.210 --> 00:44:29.550
Very similar if you have used XCodes
inline debugger that's available.

00:44:29.870 --> 00:44:32.820
So we can go ahead and hit pause.

00:44:33.110 --> 00:44:36.340
Well, it didn't pause, right?

00:44:36.480 --> 00:44:38.440
JavaScript's not always running.

00:44:38.590 --> 00:44:44.620
So until the next JavaScript execution,
we're waiting to have something

00:44:45.200 --> 00:44:48.930
triggered so we can pause.

00:44:49.110 --> 00:44:51.400
So the next time we click
one of these buttons or an

00:44:51.400 --> 00:44:55.280
event fires or a timer fires,
then the debugger will inter-pause

00:44:55.680 --> 00:44:58.560
the pause state and show you
the line of code where it's at.

00:44:58.800 --> 00:45:01.990
Until then,
it's just waiting for a user event.

00:45:02.340 --> 00:45:05.000
So let's go ahead and
click the next arrow.

00:45:05.080 --> 00:45:06.900
And that triggered an on click.

00:45:07.020 --> 00:45:10.510
As you can see in the call stack here,

00:45:11.810 --> 00:45:17.080
And we're now paused in the debugger
and this on click has some script.

00:45:17.080 --> 00:45:22.920
And you can set breakpoints by
clicking anywhere in the gutter here.

00:45:22.920 --> 00:45:26.420
And very similar to any other
debugging interface you've

00:45:26.420 --> 00:45:28.210
probably used in the past.

00:45:28.720 --> 00:45:30.130
Well, let's go ahead and step in.

00:45:30.140 --> 00:45:31.140
Step in.

00:45:31.140 --> 00:45:34.710
Let's keep going and see if we
can find something interesting.

00:45:34.830 --> 00:45:39.200
And you can see the execution
line update as I step,

00:45:39.250 --> 00:45:41.670
and it changes files just
like you would expect.

00:45:41.760 --> 00:45:46.820
And the scope variables will change,
though there's not much interesting here.

00:45:46.820 --> 00:45:49.060
You saw a month title change.

00:45:49.060 --> 00:45:53.450
Let's get into some interesting
code that we might figure out

00:45:53.620 --> 00:45:55.800
how the day grids initialize.

00:45:56.690 --> 00:45:59.600
So here, I just stepped into the
function initDayGrid.

00:45:59.600 --> 00:46:01.450
So this sounds like
what I was looking for,

00:46:01.450 --> 00:46:01.920
right?

00:46:01.920 --> 00:46:04.580
I need to figure out how
this day grid is populated.

00:46:04.580 --> 00:46:07.890
Maybe there's a bug I need to fix,
or I'm just curious about it.

00:46:09.860 --> 00:46:14.570
So I don't want to step too much,
so let's go ahead and set a break

00:46:14.570 --> 00:46:16.300
point and we'll go ahead and continue.

00:46:16.300 --> 00:46:20.270
We've just stepped over all that code and
continued right to that point when the

00:46:20.490 --> 00:46:22.860
execution happened on that line of code.

00:46:22.860 --> 00:46:26.010
So now we have a bunch of
undefined variables still,

00:46:26.020 --> 00:46:28.360
nothing really interesting here.

00:46:28.360 --> 00:46:30.540
Let's go ahead and step over.

00:46:30.540 --> 00:46:33.040
Now we're going to get
into this day grid.

00:46:33.060 --> 00:46:36.730
Oh, wait,
something happened in the background.

00:46:36.740 --> 00:46:39.420
Our calendar is no longer there.

00:46:39.520 --> 00:46:42.480
I guess some line of code earlier
that I stepped over must have

00:46:42.630 --> 00:46:45.260
removed the elements in that grid.

00:46:45.260 --> 00:46:49.140
So it looks like this for loop is
going to populate the new days.

00:46:50.630 --> 00:46:56.200
Let's keep stepping and it looks like
we're about ready to add the new day.

00:46:56.200 --> 00:46:58.370
And sure enough, there it is.

00:46:58.530 --> 00:47:02.280
So as you're incrementally
stepping through your code,

00:47:02.360 --> 00:47:07.820
Safari is still there and updating
the rendering as new DOM elements

00:47:07.910 --> 00:47:09.900
are added and resized and things.

00:47:09.970 --> 00:47:16.350
So you can really see exactly what's
going on in between various big functions

00:47:16.410 --> 00:47:20.400
like this init day grid where all of
a sudden the whole day grid is filled in.

00:47:20.400 --> 00:47:23.170
but you don't know what
happens in between.

00:47:23.370 --> 00:47:25.740
So let's go ahead and set
another breakpoint right here.

00:47:25.740 --> 00:47:28.470
So this gets hit for every day grid.

00:47:28.610 --> 00:47:32.540
And if you notice in the background,
it's going to be populating the day

00:47:32.540 --> 00:47:34.420
grid as I keep clicking continue.

00:47:34.420 --> 00:47:37.130
I keep hitting this breakpoint.

00:47:37.130 --> 00:47:40.990
And you can see the local variables
are updating as I step through.

00:47:41.100 --> 00:47:44.980
And everything that you're going
to expect from a debugger is right

00:47:45.150 --> 00:47:47.420
here available at your fingertips.

00:47:47.420 --> 00:47:50.170
So...

00:47:50.620 --> 00:47:52.630
What if I want to experiment a little?

00:47:52.640 --> 00:47:54.510
Debuggers are great with that, right?

00:47:54.520 --> 00:47:58.230
You can inspect, but you can also change.

00:47:58.240 --> 00:48:02.660
So let's go ahead and type i equals 20.

00:48:02.660 --> 00:48:06.280
So now we've changed
the local variable i,

00:48:06.280 --> 00:48:09.820
and you'll notice it
changed over here too.

00:48:09.820 --> 00:48:12.780
So before it was like 3
or something like that.

00:48:12.780 --> 00:48:14.050
Now it's 20.

00:48:14.050 --> 00:48:15.100
What's that going to mean?

00:48:15.100 --> 00:48:16.510
What's that going to do to our code?

00:48:16.520 --> 00:48:21.170
So let's go ahead and disable this
breakpoint so the code just runs

00:48:21.440 --> 00:48:26.740
full speed until we hit another
breakpoint or until we pause it again.

00:48:26.740 --> 00:48:30.160
So we've now initialized
our whole day grid,

00:48:30.160 --> 00:48:34.860
but it looks like my actions have
messed up the code a little bit.

00:48:34.860 --> 00:48:38.430
We have hanging days and
an extra week we shouldn't.

00:48:38.580 --> 00:48:43.690
So it really lets you see the
power and flexibility of the new

00:48:43.700 --> 00:48:49.460
debugger that lets you experiment
and be more playful with your code.

00:48:49.460 --> 00:48:52.680
And test out different
things that you might not try

00:48:52.680 --> 00:48:54.780
otherwise without a debugger.

00:48:54.800 --> 00:48:57.630
So let's go back to slides.

00:49:05.970 --> 00:49:07.300
So that's the brand new debugger.

00:49:07.300 --> 00:49:11.410
I hope every one of you goes and
downloads the new Safari 4 developer

00:49:11.480 --> 00:49:15.560
preview if you haven't already
and try out the new Web Inspector,

00:49:15.560 --> 00:49:17.720
including the debugger
I just talked about.

00:49:17.720 --> 00:49:22.540
And like Adam said,
we're constantly improving these tools.

00:49:22.540 --> 00:49:27.370
So any feedback you have on these tools,
you should go to the open source project,

00:49:27.390 --> 00:49:30.790
file bugs, enhancement requests,
things you might like

00:49:30.810 --> 00:49:32.250
to see in these tools.

00:49:32.260 --> 00:49:37.010
Or if you're a handy web developer
and know JavaScript and HTML,

00:49:37.010 --> 00:49:39.360
which who doesn't, right?

00:49:39.360 --> 00:49:40.770
And if you're a handy web developer
and know JavaScript and HTML,

00:49:40.770 --> 00:49:40.770
which who doesn't, right?

00:49:41.010 --> 00:49:43.600
The Web Inspector is all
written in JavaScript and HTML.

00:49:43.600 --> 00:49:48.220
That debugger is written
in JavaScript and HTML.

00:49:48.340 --> 00:49:53.100
We debugged the debugger
as we were implementing it.

00:49:53.270 --> 00:49:57.210
As it got further along,
we used it to debug itself,

00:49:57.210 --> 00:50:02.270
which is... I don't even
know what that means.

00:50:03.680 --> 00:50:06.930
So feel free to jump in if you
have any feature ideas or just

00:50:06.940 --> 00:50:08.640
want to implement something.

00:50:08.640 --> 00:50:11.360
We're always available on IRC to
talk about things that you might

00:50:11.360 --> 00:50:13.560
want to implement or feature ideas.

00:50:13.560 --> 00:50:14.500
So feel free.

00:50:16.470 --> 00:50:19.070
So now I'm going to hand
it back over to Adam,

00:50:19.070 --> 00:50:22.790
and he is going to talk about
improving page performance.

00:50:28.300 --> 00:53:10.200
[Transcript missing]

00:53:11.100 --> 00:53:13.600
So next let's talk about
high latency servers.

00:53:13.650 --> 00:53:16.770
Web pages today are being served
from many different servers.

00:53:16.780 --> 00:53:19.240
Many of them are outside
of your own control.

00:53:19.240 --> 00:53:21.500
For example,
if you are embedding data from

00:53:21.500 --> 00:53:23.880
Google Maps or something like that.

00:53:23.940 --> 00:53:26.700
Now latency refers to the amount
of time spent between when the

00:53:26.740 --> 00:53:30.240
browser first requests a resource
from the server and when data is

00:53:30.340 --> 00:53:32.320
first received from that server.

00:53:32.470 --> 00:53:36.040
And we've made this very easy to find
in the Safari 4 Developer Preview

00:53:36.040 --> 00:53:37.140
and the Web Inspector.

00:53:37.250 --> 00:53:39.600
So let's take a look at how to see it.

00:53:39.900 --> 00:53:42.040
Now here we are in the
Resources panel again,

00:53:42.200 --> 00:53:44.740
and we've selected the time
graph up in the upper left.

00:53:44.840 --> 00:53:47.310
Now anytime you're
looking at the time graph,

00:53:47.410 --> 00:53:51.120
you'll notice that the bar next to each
resource is divided into three parts.

00:53:51.120 --> 00:53:54.400
This is a new feature in the
Safari 4 Developer Preview.

00:53:54.400 --> 00:53:58.530
We have a beginning of the bar,
which is when the resource was

00:53:58.660 --> 00:54:01.460
first requested from the web server.

00:54:01.460 --> 00:54:04.620
The middle of the bar,
where we change from light to dark,

00:54:04.620 --> 00:54:07.980
is when the first byte of data
was received from the server.

00:54:08.450 --> 00:54:10.680
And the right edge of the bar
is when the last byte of data

00:54:10.780 --> 00:54:12.360
was received from the server.

00:54:12.360 --> 00:54:15.140
So for example,
in this long green bar in the middle,

00:54:15.140 --> 00:54:18.270
we have a very long light area,
which means the amount of time

00:54:18.270 --> 00:54:20.940
from when we first requested the
data to when we first started

00:54:20.940 --> 00:54:22.850
receiving the data is very large.

00:54:22.860 --> 00:54:23.840
And that's the latency.

00:54:23.840 --> 00:54:26.160
The light part of the bar is the latency.

00:54:26.160 --> 00:54:29.600
Now you can scroll through all of
your resources and try to eyeball

00:54:29.650 --> 00:54:32.640
the one with the largest latency,
but we've actually made

00:54:32.730 --> 00:54:33.870
it even easier for you.

00:54:33.880 --> 00:54:37.140
Down in the status bar,
you'll notice that we have a menu that

00:54:37.140 --> 00:54:38.760
lets you change the sorting order.

00:54:39.000 --> 00:54:40.920
Right now we're sorting
by the start time,

00:54:40.920 --> 00:54:45.370
but if we change it to sort by latency,
suddenly we have our resources

00:54:45.370 --> 00:54:48.920
ordered in terms of the amount
of latency that transpired

00:54:48.920 --> 00:54:50.420
while requesting that resource.

00:54:50.420 --> 00:54:53.890
So the resources and servers
with the largest latency

00:54:54.000 --> 00:54:54.860
will float right to the top.

00:54:54.920 --> 00:54:58.380
Now you can see here that our
resources with the two highest

00:54:58.450 --> 00:55:01.410
latencies are actually both
coming from an external server.

00:55:01.420 --> 00:55:04.040
Now since the server is
outside of our control,

00:55:04.040 --> 00:55:06.920
we can't go change any settings on it,
but perhaps we could do that.

00:55:06.930 --> 00:55:10.110
We can do something to ensure that
these resources don't block the

00:55:10.120 --> 00:55:12.920
loading of the rest of the page,
so that the user can start interacting

00:55:12.920 --> 00:55:14.900
even before they've been loaded.

00:55:16.970 --> 00:55:20.540
So now let's talk about having a large
number of resources on your page.

00:55:20.570 --> 00:55:22.770
Each request that the web
browser makes to the page has

00:55:22.770 --> 00:55:26.060
a certain amount of overhead,
the HTTP headers being sent with

00:55:26.060 --> 00:55:30.220
the request and the TCP packets,
and there's also latency

00:55:30.220 --> 00:55:31.320
for each resource.

00:55:31.360 --> 00:55:34.420
So anytime you can reduce the
number of resources on your page,

00:55:34.420 --> 00:55:38.700
you stand a good chance of improving
your page's loading performance.

00:55:38.750 --> 00:55:42.250
And one particularly easy way to
reduce the number of resources on your

00:55:42.250 --> 00:55:45.920
page without actually reducing the
amount of data it loads is to combine

00:55:45.970 --> 00:55:48.560
small resources into larger ones.

00:55:48.610 --> 00:55:51.080
So let's take a look in the
Resources panel at how we can

00:55:51.080 --> 00:55:53.100
find these small resources.

00:55:53.160 --> 00:55:55.280
So here we are in the
Resources panel again,

00:55:55.290 --> 00:55:59.460
and we've chosen the size graph,
and we're sorting by size.

00:55:59.470 --> 00:56:02.600
And now if we scroll all
the way down to the bottom,

00:56:02.630 --> 00:56:05.160
we'll see all of our smallest resources.

00:56:05.180 --> 00:56:08.320
Now you can see here that, for example,
this page is loading about five

00:56:08.320 --> 00:56:12.610
or six very small CSS files,
and we could easily combine all of these

00:56:12.610 --> 00:56:17.100
files into one and have a single resource
instead of the six different ones,

00:56:17.120 --> 00:56:21.010
and similarly,
a single request instead of six requests.

00:56:21.200 --> 00:56:25.180
So this is one good way to improve
your page's loading performance.

00:56:25.820 --> 00:56:29.220
And finally, let's talk about serially
loaded resources.

00:56:29.250 --> 00:56:31.450
Now, normally when the browser
is loading your web page,

00:56:31.460 --> 00:56:33.630
it will request many
resources in parallel.

00:56:33.630 --> 00:56:36.400
But there are certain situations
where this isn't possible.

00:56:36.400 --> 00:56:38.370
For example,
if you have a resource that's

00:56:38.400 --> 00:56:41.520
being loaded by some script,
the resource can't load

00:56:41.520 --> 00:56:45.490
until the script has finished
loading and started executing.

00:56:45.820 --> 00:56:50.360
So let's see how we might identify this
kind of a situation in the Web Inspector.

00:56:50.360 --> 00:56:52.890
Here we are in the
Resources panel once more,

00:56:52.890 --> 00:56:57.270
and we've selected the time graph,
and we've chosen a sort by start time.

00:56:57.280 --> 00:56:59.950
Now here you can see that
we've got a lot of resources

00:57:00.040 --> 00:57:01.700
that are loading in parallel.

00:57:01.700 --> 00:57:05.470
We've got many CSS files loading at once,
many images loading at once,

00:57:05.470 --> 00:57:07.120
and this is really great.

00:57:07.270 --> 00:57:09.440
This is what you want to see
when your web page is loading.

00:57:09.440 --> 00:57:12.870
It means that the browser is
parallelizing things as much as it can.

00:57:12.880 --> 00:57:15.440
But if we scroll down to
the bottom of this graph,

00:57:15.440 --> 00:57:18.280
you'll actually notice that
our very last resource,

00:57:18.280 --> 00:57:21.850
this image down here, is waiting to,
it's not even being requested

00:57:21.850 --> 00:57:24.990
until almost everything
else is finished loading.

00:57:25.000 --> 00:57:28.240
And this gives us an idea that there
must be something that's holding

00:57:28.240 --> 00:57:29.970
up the request of this resource.

00:57:29.980 --> 00:57:32.490
Now if we look up above,
you'll notice that there's a

00:57:32.490 --> 00:57:35.720
script resource that seems to
vaguely line up with this one.

00:57:35.720 --> 00:57:39.080
And since both of these resources are
being served from the same server,

00:57:39.080 --> 00:57:42.840
we can make an educated guess that the
script is actually causing the image.

00:57:42.930 --> 00:57:44.920
To load,
and that's why the image isn't able to

00:57:44.920 --> 00:57:46.870
load in parallel with everything else.

00:57:46.900 --> 00:57:49.100
Now, once again,
these are the scripts and images

00:57:49.100 --> 00:57:52.240
coming from an external server,
so we can't make any direct changes.

00:57:52.300 --> 00:57:56.170
But if this were one of our scripts,
we could perhaps make the image be

00:57:56.170 --> 00:58:00.100
statically loaded inside our web page
so that it would load in parallel,

00:58:00.100 --> 00:58:01.190
just like any other image.

00:58:01.240 --> 00:58:03.870
Or at the very least,
we could have the script start the

00:58:03.870 --> 00:58:07.320
load of the image at the very beginning
of its execution so that the image

00:58:07.320 --> 00:58:09.370
would be ready as soon as possible.

00:58:10.090 --> 00:58:14.510
So those are some examples of how
to identify different kinds of page

00:58:14.510 --> 00:58:17.310
loading performance problems in
the inspector and some suggestions

00:58:17.310 --> 00:58:18.470
for maybe how to fix them.

00:58:18.580 --> 00:58:21.430
This is stuff that's normally very
hard to figure out if you're using a

00:58:21.430 --> 00:58:25.240
standard network tool like TCP flow that
shows you things at a very low level.

00:58:25.330 --> 00:58:29.450
The inspector kind of breaks it down for
you at the level that you can understand.

00:58:29.780 --> 00:58:32.430
So now let's talk about the
other side of performance,

00:58:32.430 --> 00:58:34.100
which is JavaScript performance.

00:58:34.130 --> 00:58:36.670
And for that,
I'm going to give you a demo.

00:58:41.180 --> 00:58:46.300
So here we are back in the
calendar demo that Tim showed you.

00:58:46.340 --> 00:58:48.760
Now I'm going to make sure that all of
our breakpoints here are cleared out

00:58:48.760 --> 00:58:52.450
so that they're not getting in our way.

00:58:52.760 --> 00:58:55.440
So let's see, we seem to be missing
our events once more,

00:58:55.530 --> 00:58:57.670
so we'll get those back.

00:59:00.600 --> 00:59:02.700
- Oh, I see,
we're in July where apparently

00:59:02.700 --> 00:59:03.520
I'm not doing anything.

00:59:03.520 --> 00:59:05.940
It's a big vacation.

00:59:05.940 --> 00:59:09.850
So back to June where we have to work,
but we're here at WWDC and

00:59:09.850 --> 00:59:11.350
it's really great.

00:59:12.670 --> 00:59:14.790
So as Tim showed you,
one of the features of this

00:59:14.790 --> 00:59:16.360
calendar is a search field.

00:59:16.360 --> 00:59:19.240
And when you search for events,
you get a listing of the events

00:59:19.240 --> 00:59:21.730
on the side that match the
text that you searched for,

00:59:21.870 --> 00:59:23.390
and also each of the
events gets highlighted.

00:59:23.420 --> 00:59:26.350
Now, back in previous months
when I was even more busy,

00:59:26.350 --> 00:59:29.970
I actually noticed that when searching,
when I have a lot of events,

00:59:29.970 --> 00:59:31.940
things can get a little bit slow.

00:59:31.940 --> 00:59:34.780
And so I'd like to try to figure out
what's going on here and what's causing

00:59:34.780 --> 00:59:36.320
my page to be slow when searching.

00:59:36.320 --> 00:59:39.420
And to figure this out,
I'm going to use the inspector's

00:59:39.420 --> 00:59:41.070
new JavaScript profiler.

00:59:42.020 --> 00:59:44.370
So in the inspector,
we have this profiles panel

00:59:44.380 --> 00:59:47.860
that I mentioned to you earlier,
and it will show you a profile.

00:59:47.860 --> 00:59:50.840
Now here,
we've instrumented our code using the

00:59:50.840 --> 00:59:55.960
console.profile and console.profileEnd
functions to instrument a section

00:59:55.960 --> 00:59:57.740
of our script's execution.

00:59:57.740 --> 00:59:59.880
And we've recorded a profile,
and we're seeing the

00:59:59.890 --> 01:00:00.920
profile on the right.

01:00:00.940 --> 01:00:04.260
Now let me show you where these
instrumented calls are so that

01:00:04.260 --> 01:00:06.240
you can see what's going on here.

01:00:07.590 --> 01:00:10.420
We're here in the process
query results function,

01:00:10.420 --> 01:00:11.530
and we've inserted two calls.

01:00:11.540 --> 01:00:14.120
At the beginning of the function,
we're calling console.profile,

01:00:14.120 --> 01:00:16.420
and we're passing it a
title for the profile,

01:00:16.420 --> 01:00:18.400
which you can see shows
up right in the inspector.

01:00:18.400 --> 01:00:20.380
That's the name of the
profile we've passed in.

01:00:20.380 --> 01:00:25.630
And then at the end of the function,
we're calling console.profile end,

01:00:25.630 --> 01:00:28.640
which finishes recording the profile.

01:00:28.640 --> 01:00:32.700
We're passing in the same title here so
the profiler knows which profile to stop.

01:00:33.140 --> 01:00:35.230
You can have multiple
profiles running at once,

01:00:35.230 --> 01:00:37.520
and this way the right
one will be terminated.

01:00:37.520 --> 01:00:40.500
So in the inspector,
if you've ever used any of

01:00:40.500 --> 01:00:44.660
OS X's standard performance
tools like Shark or Instruments,

01:00:44.660 --> 01:00:46.300
this should look very familiar to you.

01:00:46.300 --> 01:00:49.620
We have a number of columns here showing
you all of the information that you need.

01:00:49.680 --> 01:00:51.930
On the right,
we have the function column,

01:00:51.930 --> 01:00:55.290
which shows you the names of all
the functions called by the script

01:00:55.300 --> 01:00:57.060
while it was being profiled.

01:00:57.060 --> 01:00:59.320
And actually,
if you expand any of these functions,

01:00:59.320 --> 01:01:01.430
you'll see all of the
functions that it called,

01:01:01.860 --> 01:01:04.880
including functions that are
built into the JavaScript engine,

01:01:04.880 --> 01:01:07.190
functions that I didn't even
define in my script file,

01:01:07.200 --> 01:01:09.270
such as char at or index of.

01:01:09.320 --> 01:01:12.080
Just to the left of that,
you'll see the number of times

01:01:12.080 --> 01:01:13.560
each function was called.

01:01:13.560 --> 01:01:15.890
And then we have the two time columns.

01:01:15.900 --> 01:01:19.450
The total time column tells you how
much time was spent in each function

01:01:19.450 --> 01:01:21.670
and all of the functions that it called.

01:01:21.680 --> 01:01:25.070
And the self column shows you the amount
of time spent just in that function

01:01:25.230 --> 01:01:27.150
without any of the functions it called.

01:01:27.160 --> 01:01:29.960
So just in the source lines
of that particular function.

01:01:30.850 --> 01:01:33.620
Also, down here in the status bar,
we have a percent button.

01:01:33.620 --> 01:01:35.970
When clicked,
this will change the time from

01:01:35.970 --> 01:01:38.540
being relative percentages
to being absolute times.

01:01:38.540 --> 01:01:40.710
So you can really get a feel
for how much absolute time is

01:01:40.710 --> 01:01:42.150
being spent in each function.

01:01:42.160 --> 01:01:44.920
But for our purposes,
we're going to be looking

01:01:44.920 --> 01:01:46.500
mostly at percentages.

01:01:46.690 --> 01:01:48.560
So now since we're
sorting by the total time,

01:01:48.560 --> 01:01:51.640
we can see the slowest functions right
up at the very top of our profile here.

01:01:51.640 --> 01:01:55.010
And the very slowest one is
highlight events in calendar,

01:01:55.020 --> 01:01:56.780
highlight event in calendar.

01:01:56.780 --> 01:02:03.370
Now you can see that the self time is
36% and the total time is 57%. So this

01:02:03.370 --> 01:02:06.760
means that almost all of the time
spent within this function is actually

01:02:06.760 --> 01:02:10.130
spent in the function itself and not
any of the sub functions it's calling.

01:02:10.140 --> 01:02:12.260
But let's see what
those sub functions are.

01:02:12.260 --> 01:02:13.820
We've got three of them here.

01:02:13.820 --> 01:02:15.160
Get elements by tag name.

01:02:15.160 --> 01:02:16.220
Test.

01:02:16.600 --> 01:02:18.440
And the regular expression constructor.

01:02:18.440 --> 01:02:21.160
Now you can see that we're calling
each of these functions many,

01:02:21.160 --> 01:02:21.840
many times.

01:02:21.840 --> 01:02:25.100
So you can get an idea that this function
is doing a lot of work in calling

01:02:25.160 --> 01:02:28.650
these functions over and over to try
to highlight this event in the calendar.

01:02:28.660 --> 01:02:31.670
Now to get a sense for
the source code itself,

01:02:31.720 --> 01:02:35.400
we've given you a hyperlink next to
each function that's defined in one of

01:02:35.400 --> 01:02:39.440
your JavaScript files that will take you
right to the file in the resources panel.

01:02:39.440 --> 01:02:40.300
So here it is.

01:02:40.300 --> 01:02:43.200
We've clicked on the link and it's taken
us right to highlight event in calendar.

01:02:43.200 --> 01:02:45.340
And we can get a feel
just for what's going on.

01:02:45.360 --> 01:02:46.580
Now let's look at this.

01:02:46.580 --> 01:02:49.300
This is an Xcode where the text is a
bit bigger and you can see it better.

01:02:49.360 --> 01:02:51.970
And here is highlight event in calendar.

01:02:51.980 --> 01:02:56.030
Now this looks like some pretty
standard DOM walking code.

01:02:56.120 --> 01:02:58.870
We've got looking for all of the
unordered list elements on our

01:02:58.870 --> 01:03:01.920
page and we're looping over all of
them and we're trying to find ones

01:03:01.920 --> 01:03:03.640
that have the contents class name.

01:03:03.840 --> 01:03:07.180
And then for each of those,
we're looping over all of the list

01:03:07.190 --> 01:03:11.140
elements that it contains and we're
checking with a regular expression

01:03:11.140 --> 01:03:14.280
that those list items have a
class that matches the name of

01:03:14.280 --> 01:03:16.470
the calendar that this event is in.

01:03:16.580 --> 01:03:18.830
And once we've discovered
that that's true,

01:03:18.840 --> 01:03:22.000
we go on and check that the event
that the list item contains the

01:03:22.000 --> 01:03:24.070
title that matches the events title.

01:03:24.160 --> 01:03:28.080
And we're looking for events that are
not already highlighted and then finally

01:03:28.120 --> 01:03:32.230
adding the highlighted class to them to
give them this nice yellow appearance.

01:03:32.370 --> 01:03:35.830
So this is pretty standard code that
you might have in one of your web apps,

01:03:35.860 --> 01:03:37.540
but we'd like to kind of speed it up.

01:03:37.760 --> 01:03:41.190
Now, if you were here at the advanced
Ajax talk earlier this day,

01:03:41.190 --> 01:03:44.540
you might have heard about a new
function that's on the document

01:03:44.540 --> 01:03:46.480
that's called query selector.

01:03:46.480 --> 01:03:46.560
All.

01:03:46.560 --> 01:03:50.720
This lets you use CSS selectors to select
elements in your document and lets the

01:03:50.720 --> 01:03:54.870
browser really do the heavy lifting
of this kind of DOM traversal for you.

01:03:54.900 --> 01:03:58.260
So I'm going to try to rewrite this
function using query selector all and

01:03:58.330 --> 01:04:02.550
see if we can speed things up from our
57% of total time that we have currently.

01:04:02.560 --> 01:04:06.630
So query selector all is, as I said,
it's a method on the document and

01:04:06.630 --> 01:04:10.270
it returns a node list that I'm
going to call items because it's

01:04:10.270 --> 01:04:12.330
going to store our list items.

01:04:12.340 --> 01:04:16.280
So we're going to call document
dot query selector all.

01:04:16.600 --> 01:04:18.900
And its argument is a CSS selector.

01:04:18.900 --> 01:04:22.780
So we want to just duplicate what
our DOM walking code was doing here.

01:04:22.780 --> 01:04:26.110
So we're looking for unordered lists
that have the contents class and

01:04:26.110 --> 01:04:29.980
we're looking for their children,
which are list items that have

01:04:29.980 --> 01:04:34.300
a class name that matches the
calendar that this event was in.

01:04:34.300 --> 01:04:37.200
So here we're dynamically adding
in the name of the calendar as

01:04:37.200 --> 01:04:38.840
the class name of the list item.

01:04:38.840 --> 01:04:42.420
And we're also looking for
list items that are not already

01:04:42.420 --> 01:04:44.920
containing the highlighted class.

01:04:44.920 --> 01:04:46.580
So we're going to search for one.

01:04:46.600 --> 01:04:48.610
that aren't highlighted.

01:04:49.130 --> 01:04:50.000
And so this is our query.

01:04:50.000 --> 01:04:52.420
I hope that this will give us the
list items that we're looking for.

01:04:52.580 --> 01:04:54.190
Now, as I said,
the browser is really doing

01:04:54.190 --> 01:04:55.200
all the work for us here.

01:04:55.200 --> 01:04:57.800
So we don't have to look for
all of the unordered lists,

01:04:57.890 --> 01:05:00.350
and we don't have to check that
they have the contents class,

01:05:00.350 --> 01:05:02.300
and we don't have to look
for their list items,

01:05:02.300 --> 01:05:04.820
and we don't have to look that
they match the right class.

01:05:05.320 --> 01:05:07.490
Now,
our selector here doesn't say anything

01:05:07.490 --> 01:05:10.410
about the contents of the list item,
so I think we're going to

01:05:10.410 --> 01:05:11.810
have to keep this code.

01:05:11.810 --> 01:05:14.720
But it is checking that things
are not already highlighted,

01:05:14.720 --> 01:05:16.780
so we don't have to check the class name.

01:05:16.780 --> 01:05:19.690
And then we'll add the
class like we wanted.

01:05:19.700 --> 01:05:22.140
Now, we need to loop over these items.

01:05:22.140 --> 01:05:25.510
As I said, this is a node list
that we're getting back.

01:05:25.510 --> 01:05:29.310
So we're just going to loop over
all of our items one by one.

01:05:30.750 --> 01:05:33.600
And we'll store each one in a local
item variable since that's what the

01:05:33.600 --> 01:05:36.070
rest of the code is already using.

01:05:37.200 --> 01:05:39.440
And let me re-indent this so
it's a little bit easier to

01:05:39.440 --> 01:05:41.440
see and delete our extra brace.

01:05:41.440 --> 01:05:43.520
And so here's the new
version of our function.

01:05:43.520 --> 01:05:47.330
So let's save this and see what
this does to our profile time.

01:05:47.340 --> 01:05:50.540
Now remember,
highlight event in calendar was

01:05:50.540 --> 01:05:54.510
taking 57% of the total time when
processing these query results.

01:05:54.540 --> 01:05:57.770
So let's reload the page to try this
again and load up the new script.

01:05:57.840 --> 01:05:59.400
And we'll pull up the search field.

01:05:59.400 --> 01:06:02.180
And we'll type in
Safari just like before.

01:06:02.380 --> 01:06:06.530
And you can see in the background the
profile got recorded automatically

01:06:06.620 --> 01:06:09.800
by those console.profile and
console.profile end calls.

01:06:09.800 --> 01:06:12.840
And if we click on it,
we can see that highlight event in

01:06:12.840 --> 01:06:15.270
calendar is no longer the top function.

01:06:15.280 --> 01:06:17.460
It's actually down here
in spot number three.

01:06:17.460 --> 01:06:20.160
It's been reduced to 22% of total time.

01:06:20.160 --> 01:06:23.840
So we've really made a big impact here
on the performance of this function.

01:06:23.840 --> 01:06:27.210
And the profiler really
helped us to see how to do it.

01:06:27.240 --> 01:06:29.150
So let's go back to slides.

01:06:29.170 --> 01:06:30.470
Thank you.

01:06:35.290 --> 01:06:38.090
So, you've now seen how to improve
your page's performance,

01:06:38.090 --> 01:06:42.300
both with its network loading performance
and its JavaScript performance.

01:06:43.120 --> 01:06:45.520
And you've gotten a big overview
of all of our developer tools and

01:06:45.550 --> 01:06:46.990
particularly the Web Inspector.

01:06:47.070 --> 01:06:49.670
We hope that you've seen that we've made
some big improvements in these tools

01:06:50.020 --> 01:06:53.100
and that they've made it really easy
for you to debug your website right in

01:06:53.100 --> 01:06:55.500
the browser without going anywhere else.

01:06:55.620 --> 01:06:57.700
We hope you're really going to like them.

01:06:57.830 --> 01:07:01.080
So we hope that you walk out
of here today by going home and

01:07:01.100 --> 01:07:05.100
turning on the Develop menu from
the Advanced Preferences dialog,

01:07:05.100 --> 01:07:07.550
easily debugging your site
using the Web Inspector and

01:07:07.550 --> 01:07:11.220
the other developer tools,
and profiting.

01:07:18.000 --> 01:07:20.180
If you need any more information,
please check out the

01:07:20.180 --> 01:07:23.170
WebKit Open Source Project and the
nightly WebKit builds and contact

01:07:23.220 --> 01:07:26.000
our technologies evangelists,
Vicki Murley and Mark Malone.

01:07:26.000 --> 01:07:30.090
And now we'd like to open it up to QA.

01:07:30.550 --> 01:07:31.810
We've also got some great labs.

01:07:31.840 --> 01:07:35.830
There's an offline data solutions
lab and a compatibility lab coming up

01:07:35.840 --> 01:07:38.560
right after this session downstairs,
so please join us there.