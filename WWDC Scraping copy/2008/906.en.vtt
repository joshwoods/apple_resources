WEBVTT

00:00:20.550 --> 00:00:21.160
Good afternoon.

00:00:21.160 --> 00:00:23.000
Welcome to session 906.

00:00:23.000 --> 00:00:24.240
I'm Anders Bertelrud.

00:00:24.240 --> 00:00:25.860
I'm an Xcode architect.

00:00:25.860 --> 00:00:29.300
And in this session,
we're going to take another look at

00:00:29.400 --> 00:00:32.800
Xcode and some of the developer tools,
but do it a little bit differently than

00:00:32.800 --> 00:00:34.100
what you may be seeing in the past.

00:00:34.100 --> 00:00:37.980
In the past few days,
you've seen many examples and demos,

00:00:37.980 --> 00:00:41.080
introductions to Apple's developer tools.

00:00:42.260 --> 00:00:45.260
Here, we're assuming you are the
experienced developers.

00:00:45.260 --> 00:00:47.270
You come maybe from
Visual Studio or Eclipse,

00:00:47.350 --> 00:00:48.530
have that kind of background.

00:00:48.530 --> 00:00:51.650
So here, we'll want to give you maybe
a little bit of a broader

00:00:51.650 --> 00:00:54.700
overview of the toolbox we have,
show how it fits together,

00:00:54.800 --> 00:00:58.340
especially how it relates to
Visual Studio and Eclipse in particular.

00:00:58.340 --> 00:01:00.450
To do that,
we'll be taking a look at a sample

00:01:00.450 --> 00:01:03.780
project that you've already seen,
but we're going to take it a little

00:01:03.780 --> 00:01:07.150
bit further than you've seen in
any of the previous sessions.

00:01:07.160 --> 00:01:11.740
And we'll do that in order to
illustrate some of the differences.

00:01:12.260 --> 00:01:15.660
And some of the things that are
maybe the same with Visual Studio,

00:01:15.660 --> 00:01:18.000
Eclipse,
vis-a-vis Apple's developer tools.

00:01:18.000 --> 00:01:20.030
The goal here is not
to give you a tutorial,

00:01:20.030 --> 00:01:22.400
but to show you the tools,
how they fit together,

00:01:22.400 --> 00:01:26.190
give you a taste of their capabilities,
and help direct you to further

00:01:26.190 --> 00:01:29.620
resources like some of the
great sessions we have coming up

00:01:29.620 --> 00:01:33.700
tomorrow and the rest of the week,
and also in our documentation.

00:01:35.500 --> 00:02:48.600
[Transcript missing]

00:02:48.940 --> 00:02:51.130
A new one I want to show that
maybe you have not seen yet,

00:02:51.300 --> 00:02:55.620
this WWDC, is Quartz Composer,
which allows you to edit rich media

00:02:55.640 --> 00:02:58.700
content and then connect that into
your user interface and your code.

00:02:58.860 --> 00:03:00.700
So we'll be taking a look at that.

00:03:00.740 --> 00:03:04.910
And of course, Instruments,
which is our central place to analyze

00:03:04.910 --> 00:03:07.350
your program to see how you can tune it.

00:03:07.570 --> 00:03:14.370
And it's a multi-track recording of your
performance metrics for your program.

00:03:14.810 --> 00:03:17.540
Under the Utilities folder,
we have a bunch of other programmer

00:03:17.630 --> 00:03:18.820
tools that you may not have heard of.

00:03:18.860 --> 00:03:22.160
There's tools for comparing
files and file hierarchies.

00:03:22.160 --> 00:03:26.220
There's a tool called Package
Maker that we'll talk about today,

00:03:26.220 --> 00:03:27.820
which is for creating installer packages.

00:03:27.820 --> 00:03:31.040
Under the Graphics tools,
we have OpenGL Shader Builder,

00:03:31.040 --> 00:03:33.640
which is great if you
want to develop shaders,

00:03:33.640 --> 00:03:36.790
debug them, and other graphics
tools for high DPI work,

00:03:36.790 --> 00:03:38.720
that kind of a thing, testing.

00:03:39.390 --> 00:03:43.340
Under Performance Tools, we have Shark,
which is a great tool for more

00:03:43.690 --> 00:03:48.570
instruction-level analysis of your code,
and OpenGL Profiler or

00:03:48.570 --> 00:03:49.660
some other tools like that.

00:03:49.700 --> 00:03:53.300
That's the basics developer tools folder.

00:03:53.300 --> 00:03:55.230
Many of these icons are
already familiar to you.

00:03:55.240 --> 00:03:57.070
Where do we begin?

00:03:57.080 --> 00:03:58.620
Well, Xcode.

00:03:58.620 --> 00:04:01.560
That's the center of the
developer experience.

00:04:01.560 --> 00:04:05.490
I just want to give you a demo rather
than show you a bunch of slides.

00:04:05.500 --> 00:04:07.840
Let me show you some things.

00:04:07.840 --> 00:04:09.300
In particular,
I want to highlight some things.

00:04:09.390 --> 00:04:12.040
It may be similar with
Visual Studio or Eclipse,

00:04:12.040 --> 00:04:13.520
which you may be used to.

00:04:13.610 --> 00:04:15.280
Could we have Demo Machine 1, please?

00:04:18.780 --> 00:04:19.880
Thanks.

00:04:20.020 --> 00:04:23.170
So let me start Xcode.

00:04:23.260 --> 00:04:26.720
And one of the first things
you see is the Welcome panel.

00:04:26.800 --> 00:04:28.980
And many of you may just
click to close this,

00:04:28.980 --> 00:04:32.300
but there's actually a lot
of information here for you.

00:04:32.300 --> 00:04:34.390
Obviously,
there's the iPhone Developer Center and

00:04:34.390 --> 00:04:35.680
the Mac Developer Center.

00:04:35.840 --> 00:04:38.900
Just lots of great introductions,
not only to the APIs,

00:04:38.900 --> 00:04:45.290
but also to some things like the system
concepts that may be different for you if

00:04:45.290 --> 00:04:47.630
you're coming from another environment.

00:04:47.890 --> 00:04:52.850
We have live Xcode news that
goes out to Apple's web pages and

00:04:52.850 --> 00:04:56.910
fetches the latest updated samples,
those kinds of things, mailing lists,

00:04:56.910 --> 00:04:58.840
and all kinds of stuff like that.

00:04:58.990 --> 00:05:01.540
But to get started here,
I want to show you, first of all,

00:05:01.540 --> 00:05:03.540
what you typically do
is create new projects.

00:05:03.540 --> 00:05:05.490
We've all seen this at this point.

00:05:05.600 --> 00:05:07.180
Let me resize this.

00:05:07.570 --> 00:05:10.980
We have, obviously,
both the MacÂ OS and the

00:05:10.980 --> 00:05:15.950
iPhone OS templates,
as you've heard several times already,

00:05:16.090 --> 00:05:17.490
Xcode Interface Builder.

00:05:17.520 --> 00:05:22.370
and instruments are Apple's developer
tools for both the Mac and iPhone.

00:05:22.710 --> 00:05:24.870
What I'm going to do here though
today is to show something a

00:05:24.870 --> 00:05:25.960
little bit more interesting maybe.

00:05:25.960 --> 00:05:29.480
We also have good
SCM integration with subversion,

00:05:29.530 --> 00:05:30.940
CVS, and Perforce.

00:05:30.950 --> 00:05:34.120
And I showed you here how to
configure the repositories.

00:05:34.120 --> 00:05:36.500
I just brought up the preference panel.

00:05:36.500 --> 00:05:38.480
I'm going to go ahead and
browse the repositories.

00:05:38.480 --> 00:05:42.240
And I'm just accessing a local source
code repository that I have on disk here.

00:05:42.240 --> 00:05:46.120
And let's take the demo app that
Todd and Andreas showed in the

00:05:46.120 --> 00:05:48.280
State of the Union yesterday.

00:05:48.280 --> 00:05:50.200
I'm just going to drag
this out into the desktop.

00:05:50.340 --> 00:05:53.060
What I'm doing here is I'm
looking at my repository.

00:05:53.120 --> 00:05:53.990
I can browse it.

00:05:54.020 --> 00:05:57.520
I can say I get info and look at the
check-in history of any given file,

00:05:57.520 --> 00:05:58.980
all kinds of stuff like that.

00:05:58.990 --> 00:06:02.450
At this point, I've checked out a project
from the repository just by

00:06:02.450 --> 00:06:03.490
dragging it to the desktop.

00:06:03.610 --> 00:06:07.630
I'm going to close the repository
and just open up the project.

00:06:07.630 --> 00:06:11.390
So I'm doing this because
I want to give an overview of

00:06:11.450 --> 00:06:14.730
what's in an Xcode project,
specifically if you're coming

00:06:14.730 --> 00:06:15.780
from Studio or Eclipse.

00:06:15.780 --> 00:06:21.000
So at the top, of course,
we have a toolbar.

00:06:22.050 --> 00:06:23.590
Whoops.

00:06:24.320 --> 00:06:27.510
I wanted to create a nice
little box like that.

00:06:27.590 --> 00:06:30.360
So we have a toolbar up at the top,
fairly typical.

00:06:30.710 --> 00:06:33.670
And on then the right-hand side, sorry,
the left-hand side,

00:06:33.680 --> 00:06:35.870
we have the contents of the project.

00:06:35.870 --> 00:06:40.950
So up at the very top, we have just plain
hierarchy of references.

00:06:40.950 --> 00:06:45.890
If you're coming from Visual Studio,
a project is kind of like a solution.

00:06:45.920 --> 00:06:49.440
And then the projects underneath
in Visual Studio correspond

00:06:49.440 --> 00:06:50.760
to Xcode's targets.

00:06:50.810 --> 00:06:54.180
If you're coming from Eclipse,
this should also look fairly familiar.

00:06:54.320 --> 00:06:56.940
It's a hierarchy of references
up in the left here.

00:06:57.130 --> 00:06:59.040
So all your source code is here.

00:06:59.290 --> 00:07:02.300
The source code itself lives on disk.

00:07:02.300 --> 00:07:04.670
We don't try to have a database
with all your code in it.

00:07:04.760 --> 00:07:07.000
We still want to keep things
as flat files so you can use

00:07:07.000 --> 00:07:09.460
any tools you like on them,
such as text editors.

00:07:09.460 --> 00:07:12.530
But we reference them from the project.

00:07:12.620 --> 00:07:16.510
By clicking on the project here,
on the group here,

00:07:16.550 --> 00:07:18.980
I see my files that are in that group.

00:07:18.980 --> 00:07:21.970
And obviously clicking on one,
I see the source code down here.

00:07:24.390 --> 00:07:26.860
If the code here actually mattered,
then this would have

00:07:26.870 --> 00:07:27.760
been too small of a font.

00:07:27.970 --> 00:07:30.460
But I just want to get the
general picture across.

00:07:30.510 --> 00:07:32.740
Underneath the groups here,
we have targets.

00:07:32.980 --> 00:07:35.560
And let me highlight that briefly.

00:07:35.700 --> 00:07:39.530
Targets are the individual
instructions for building a project,

00:07:39.540 --> 00:07:43.770
building some code from your source code.

00:07:43.960 --> 00:07:47.420
And then executables underneath
that show how to launch a particular

00:07:47.530 --> 00:07:49.070
program with a set of flags.

00:07:49.240 --> 00:07:51.460
Let's say you want to launch it
with a set of test documents,

00:07:51.470 --> 00:07:52.510
those kinds of things.

00:07:52.520 --> 00:07:56.730
. Underneath that down here,
we have other smart groups.

00:07:56.780 --> 00:07:58.600
And this looks a lot like iTunes, right?

00:07:58.600 --> 00:08:00.800
You can click on a smart group and see,
let's say,

00:08:00.800 --> 00:08:06.280
all the files that have errors in them,
all the files that have find results or

00:08:06.280 --> 00:08:09.640
that have been touched in terms of SCM,
those kinds of things,

00:08:09.640 --> 00:08:11.220
source code management.

00:08:11.390 --> 00:08:14.820
And you can define your own
custom smart groups as well.

00:08:15.280 --> 00:08:18.120
So at this point,
I want to go back and explain

00:08:18.120 --> 00:08:19.200
some more of the concepts.

00:08:19.200 --> 00:08:21.880
I'm going to build and run the program
just so you see which one I mentioned.

00:08:21.880 --> 00:08:24.920
It's the one that you saw probably
in the State of the Union.

00:08:24.920 --> 00:08:27.970
I'm going to leave this
running here for the next demo.

00:08:27.970 --> 00:08:30.170
And if we go back to slides, please.

00:08:34.380 --> 00:08:35.300
Thanks.

00:08:35.300 --> 00:08:36.420
So what do we just do?

00:08:36.580 --> 00:08:37.600
Well, we create a project.

00:08:37.690 --> 00:08:40.600
And again, a project is a container for
all the parts of your software.

00:08:40.600 --> 00:08:44.430
It's the source code and the
instructions for building it,

00:08:44.580 --> 00:08:45.840
those kinds of things.

00:08:45.910 --> 00:08:47.720
And when you decide
what to make a project,

00:08:47.730 --> 00:08:50.260
well, usually it corresponds
to a software concept.

00:08:50.380 --> 00:08:53.850
It could be your whole program,
it could be a project.

00:08:53.850 --> 00:08:57.260
Or you could have a project
for each library that you use,

00:08:57.370 --> 00:09:00.820
that you work with,
if you have a bunch of reusable code,

00:09:00.980 --> 00:09:03.220
and then an application
that ties that together.

00:09:03.620 --> 00:09:07.980
Again, it contains everything that's
needed to build your product.

00:09:07.980 --> 00:09:09.740
So that's the file references.

00:09:09.740 --> 00:09:12.670
And again, the references,
it's not the actual code itself.

00:09:12.810 --> 00:09:16.080
That's the same as in Studio and Eclipse,
I think, just references.

00:09:16.080 --> 00:09:20.300
Groups, you can group the files,
the references in arbitrary ways.

00:09:20.340 --> 00:09:23.380
You don't need to follow
the structure on disk.

00:09:23.380 --> 00:09:25.850
You can actually group them
by function in the IDE,

00:09:25.850 --> 00:09:28.210
different from what
it's in the file system.

00:09:29.410 --> 00:09:31.710
There are targets,
which are the instructions

00:09:31.710 --> 00:09:32.700
for how to build.

00:09:32.750 --> 00:09:36.480
And then launch context,
which is simply the flags and those kinds

00:09:36.580 --> 00:09:39.080
of things for how to test your program.

00:09:39.420 --> 00:09:40.840
Here are some new terms on this page.

00:09:40.840 --> 00:09:43.260
May or may not be familiar.

00:09:43.260 --> 00:09:49.340
Projects contain targets,
and a target then has build phases,

00:09:49.340 --> 00:09:52.940
which is compile my files,
copy my headers, those kinds of things,

00:09:52.940 --> 00:09:56.040
copy the resources,
maybe compress the files,

00:09:56.090 --> 00:09:57.720
those sorts of things.

00:09:58.280 --> 00:10:01.010
Each individual file,
the decision for what happens to that

00:10:01.010 --> 00:10:02.860
is determined by the build rules.

00:10:02.860 --> 00:10:06.740
So a build rule is what, for example,
says that a .c file is converted

00:10:06.770 --> 00:10:09.490
to a .o file using a compiler,
that kind of a thing.

00:10:09.500 --> 00:10:12.960
So you can configure the build
rules to change what compiler

00:10:13.230 --> 00:10:15.220
you invoke for a source file.

00:10:17.110 --> 00:10:20.400
Build settings,
they are the knobs and switches

00:10:20.400 --> 00:10:24.170
that determine all the little things
from what's the name of the thing

00:10:24.170 --> 00:10:26.190
that I'm going to produce on disk,
what's the name of my app,

00:10:26.270 --> 00:10:28.590
to what are some of
the optimization flags,

00:10:28.590 --> 00:10:30.930
to search paths, those kinds of things.

00:10:30.930 --> 00:10:35.620
This, again, is probably similar to what
you're familiar with from

00:10:35.620 --> 00:10:39.410
Visual Studio or Eclipse,
and even GNU Make uses dollar

00:10:39.410 --> 00:10:41.940
per n syntax for build settings.

00:10:42.340 --> 00:10:44.530
A target can depend on other targets.

00:10:44.540 --> 00:10:47.590
This just means that the one
target needs the other one to

00:10:47.590 --> 00:10:48.800
be built before it is built.

00:10:48.840 --> 00:10:52.310
Again, this is a fairly standard concept.

00:10:52.410 --> 00:10:54.320
It may look different in our UI.

00:10:54.320 --> 00:10:55.760
We have three targets.

00:10:55.760 --> 00:10:57.740
One depends on the two other targets.

00:10:57.740 --> 00:11:00.630
Not a big change,
even though the icons may be

00:11:00.630 --> 00:11:03.200
different and those kinds of things.

00:11:03.200 --> 00:11:05.470
Some more about the build settings.

00:11:05.470 --> 00:11:08.000
There are specific values
of the tool options.

00:11:08.000 --> 00:11:12.120
When you look at the
GCC manual page and terminal,

00:11:12.340 --> 00:11:14.340
for example,
you see all kinds of switches.

00:11:14.370 --> 00:11:16.470
Well, a lot of those,
the most important ones,

00:11:16.640 --> 00:11:18.840
in Xcode we expose
those as build settings.

00:11:18.840 --> 00:11:22.060
And you see these in the inspector
and you can set values for them,

00:11:22.070 --> 00:11:25.420
such as Boolean values or enumerations,
those kinds of things.

00:11:25.450 --> 00:11:28.140
They're organized into configurations,
which are essentially just

00:11:28.140 --> 00:11:29.720
style sheets of build settings.

00:11:29.720 --> 00:11:32.140
So you can have one that
you apply for a debug build,

00:11:32.140 --> 00:11:35.820
another one for a release build,
and you can create your own as well.

00:11:35.840 --> 00:11:39.240
There's default values for everything,
and they're arranged in a hierarchy.

00:11:39.240 --> 00:11:41.180
You can set settings
at the project level,

00:11:41.180 --> 00:11:42.330
at the target level.

00:11:42.470 --> 00:11:44.400
You can set the default
values for the build settings,

00:11:44.400 --> 00:11:46.320
et cetera,
and they'll override each other.

00:11:46.410 --> 00:11:50.260
There's a particular type of
a file type called XC config,

00:11:50.260 --> 00:11:54.340
which is a text-based
representation of build settings.

00:11:54.340 --> 00:11:56.120
And that's really nice
because you can check it into

00:11:56.120 --> 00:11:57.310
your source code repository.

00:11:57.350 --> 00:12:00.270
You can do differences
between those kinds of things.

00:12:00.350 --> 00:12:04.710
So you can see exactly what changes
you might have made to your settings.

00:12:04.900 --> 00:13:49.700
[Transcript missing]

00:13:49.830 --> 00:13:51.780
So we've talked a little bit
about some Xcode concepts.

00:13:51.780 --> 00:13:55.620
What are some sort of behind some
of the screenshots you've seen?

00:13:55.680 --> 00:13:58.040
Some of the system concepts
may be new to you also.

00:13:58.060 --> 00:14:00.440
MacÂ OSÂ X has this thing called a bundle.

00:14:00.440 --> 00:14:05.380
A bundle is just a directory hierarchy
full of files and directories that are

00:14:05.380 --> 00:14:08.730
shown to the user as a single icon,
as a single entity.

00:14:08.760 --> 00:14:11.220
So an application, for example,
is a bundle.

00:14:11.220 --> 00:14:12.390
And it's got resources.

00:14:12.400 --> 00:14:13.200
It's got code.

00:14:13.260 --> 00:14:15.140
It's got all kinds of stuff in it.

00:14:15.170 --> 00:14:17.810
And another type of
bundle is a framework.

00:14:17.820 --> 00:14:19.820
And that's a term that may be new to you.

00:14:19.850 --> 00:14:24.810
That's simply a library that's bundled
together with its resources and headers,

00:14:24.880 --> 00:14:25.870
stuff like that.

00:14:25.980 --> 00:14:28.360
So in Eclipse, for example,
in the Java world,

00:14:28.400 --> 00:14:30.160
this would be similar to a jar.

00:14:30.160 --> 00:14:32.700
A bundle is essentially a jar.

00:14:32.700 --> 00:14:34.960
In Visual Studio,
that would essentially be

00:14:34.960 --> 00:14:38.200
the same as an assembly,
as a bunch of files and

00:14:38.350 --> 00:14:42.270
folders that are related,
and then some metadata about that.

00:14:44.070 --> 00:14:47.210
Bundles allow us to do
localization because a bundle can

00:14:47.210 --> 00:14:50.230
contain multiple Lproj folders,
what's called Lproj,

00:14:50.270 --> 00:14:52.240
and that's because the suffix is .lproj.

00:14:52.240 --> 00:14:58.390
The Lproj folder can contain
not only string files with text,

00:14:58.390 --> 00:15:01.270
but also UI files,
interface builder documents,

00:15:01.280 --> 00:15:05.440
as you'll see in a demo shortly,
and also animations and splash screen

00:15:05.440 --> 00:15:08.080
art and those kinds of things as well.

00:15:08.080 --> 00:15:11.260
Very often what you'll do is
you'll develop in a single

00:15:11.260 --> 00:15:16.220
language and then localizers will
localize the content and maybe even

00:15:16.220 --> 00:15:19.360
adjust geometry of UI elements,
that kind of thing.

00:15:19.360 --> 00:15:22.560
And then you can incorporate that
into the bundle at a later time,

00:15:22.560 --> 00:15:25.760
shortly before you ship.

00:15:26.450 --> 00:15:29.580
Another thing you may have heard
about is the Maco file format.

00:15:29.580 --> 00:15:34.360
Maco is just the MacÂ OSÂ X equivalent
or analog to PE or ELF.

00:15:34.490 --> 00:15:41.280
It's a binary code format and very
similar to what you might be used

00:15:41.280 --> 00:15:43.960
to from any other compiled platform.

00:15:44.380 --> 00:15:49.510
Universal binaries are a way to package
multiple code files for multiple

00:15:49.550 --> 00:15:51.300
architectures into a single file.

00:15:51.300 --> 00:15:54.470
And the advantage of having it in
a single file is that your code can

00:15:54.470 --> 00:15:56.160
still treat it as a single file.

00:15:56.160 --> 00:15:58.100
So if you want to call
a command line tool,

00:15:58.100 --> 00:16:01.630
you don't need to worry about are you
going to call the 64-bit version or

00:16:01.630 --> 00:16:03.710
the 32-bit version or any of that.

00:16:03.740 --> 00:16:06.950
You just call the tool,
and then the container format contains

00:16:06.950 --> 00:16:10.310
a header at the top and then an
arbitrary number of architectures,

00:16:10.350 --> 00:16:12.080
each of which is a Mach-O file.

00:16:12.820 --> 00:16:16.490
So that's another concept
that may be new to you.

00:16:16.890 --> 00:16:18.700
To continue on,
I would like to invite one

00:16:18.710 --> 00:16:22.970
of my colleagues up on stage,
Chris Hanson, to talk to you about taking

00:16:22.980 --> 00:16:24.770
this project further.

00:16:24.790 --> 00:16:24.820
Thanks.

00:16:25.560 --> 00:16:26.820
Thank you, Anders.

00:16:26.820 --> 00:16:28.420
I'm Chris Hanson.

00:16:28.420 --> 00:16:33.820
I also work on developer tools at Apple,
specifically on Xcode.

00:16:34.130 --> 00:16:40.070
One thing that Cocoa provides
for you by default is

00:16:40.410 --> 00:16:46.930
and Andy . We have an about baffle panel
in our demo application right off the

00:16:46.930 --> 00:16:50.200
bat that Cocoa provides automatically.

00:16:50.200 --> 00:16:51.850
It provides useful information.

00:16:51.890 --> 00:16:56.900
It shows our icon, name, version number,
and if we put copyright

00:16:56.980 --> 00:16:59.840
strings and so on in there,
it would also show those.

00:16:59.840 --> 00:17:01.520
But it is a little bit plain.

00:17:01.520 --> 00:17:04.070
So we would like to
jazz it up a little bit.

00:17:05.360 --> 00:17:09.590
I'm going to use that as an opportunity
to show you some of the features

00:17:09.700 --> 00:17:14.250
of the Xcode editor and later some
of the features of the interface

00:17:14.250 --> 00:17:17.300
builder tool and Quartz Composer.

00:17:17.530 --> 00:17:20.300
First, let's quit baffle.

00:17:20.570 --> 00:17:24.880
Because I'm going to show you the editor,
I'm going to open up Xcode's preferences

00:17:25.390 --> 00:17:30.510
and change our fonts up a little bit
so that they're nice and visible.

00:17:31.440 --> 00:17:35.770
So I'm just going to kick
the font size up to about 18.

00:17:36.020 --> 00:17:37.460
Gotta make a copy, of course.

00:17:37.460 --> 00:17:42.790
Kick the font size up to 18.

00:17:46.060 --> 00:17:47.380
There we are.

00:17:47.840 --> 00:17:53.740
So the first thing I'd like to point
out is that while Xcode might look a lot

00:17:53.810 --> 00:17:59.070
like the editors and IDEs you're used to,
there are some different

00:17:59.070 --> 00:18:00.190
features in its editor.

00:18:00.210 --> 00:18:03.210
For example,
we don't have tabs across the top.

00:18:03.280 --> 00:18:07.330
Instead,
we have this handy navigation bar here.

00:18:07.880 --> 00:18:12.470
So every editor you see is going to
have a navigation bar that lets you get

00:18:12.600 --> 00:18:17.550
around both the code within the editor
and around your project as a whole.

00:18:18.480 --> 00:18:21.800
One of the controls in the navigation
bar that lets you navigate around your

00:18:21.800 --> 00:18:25.100
entire project is the history popup.

00:18:25.250 --> 00:18:30.820
This lets you see all of the files
that you have in your project that

00:18:30.850 --> 00:18:32.980
have been opened in that editor.

00:18:33.380 --> 00:18:40.120
So as we navigate around in our project,
say within the views in this application,

00:18:41.210 --> 00:18:43.840
These are accumulated into our history.

00:18:43.920 --> 00:18:47.510
And we also have a back and forwards
button right next to our history

00:18:47.990 --> 00:18:52.680
that let us go between all of the
files we have open in this editor.

00:18:53.400 --> 00:18:57.380
Of course,
no code editor would be complete without

00:18:57.450 --> 00:19:00.500
a way to see the definitions in a file.

00:19:00.520 --> 00:19:06.040
If I go down to this view here
that has a lot of pound defines,

00:19:06.250 --> 00:19:10.300
it has an implementation of a class,
it has some functions and methods in it,

00:19:10.310 --> 00:19:14.930
we can navigate within the
file just using this popup.

00:19:15.690 --> 00:19:19.900
We also have a handy popup over here
at the right that lets us see the class

00:19:20.050 --> 00:19:22.210
hierarchy that this class descends from.

00:19:22.220 --> 00:19:25.910
So we're in the scratchpad view,
and we can see that

00:19:25.910 --> 00:19:29.220
it's a kind of NSView,
which is a kind of NSResponder,

00:19:29.220 --> 00:19:30.690
which is a kind of NSObject.

00:19:30.780 --> 00:19:34.260
And we can even select one
of those to go immediately to

00:19:34.260 --> 00:19:36.510
the definition of that class.

00:19:36.520 --> 00:19:39.320
And if I just hit the back button,
I get back to where I was.

00:19:40.350 --> 00:19:45.020
We even have a popup that shows you
all of the files that you include,

00:19:45.020 --> 00:19:48.680
and if you look at a header file,
you can even see what

00:19:49.230 --> 00:19:50.520
includes that header.

00:19:53.800 --> 00:19:56.340
Now, rather than write a
bunch of code for you,

00:19:56.390 --> 00:20:00.670
I'm just going to drag in some
pre-baked code that we have here.

00:20:01.830 --> 00:20:05.040
is going to drop it on Baffle Cocoa.

00:20:05.040 --> 00:20:09.200
And I've added references
to this code to our project.

00:20:09.200 --> 00:20:14.850
And the first bit of code that
I've added is our About panel.

00:20:18.560 --> 00:20:24.620
So what I'm going to show you in our
about panel is how some of the features

00:20:24.650 --> 00:20:28.100
work when you're actually writing code.

00:20:28.100 --> 00:20:31.920
We have this all credits method
that just returns a collection

00:20:31.920 --> 00:20:34.460
of credits for application.

00:20:34.460 --> 00:20:38.460
The things that we're giving credit
to for making our application great.

00:20:38.700 --> 00:20:42.360
One of the features we've added
new in Xcode 3.1 is something

00:20:42.500 --> 00:20:43.990
called edit all in scope.

00:20:44.070 --> 00:20:50.240
That lets me select this credits
path local variable here.

00:20:50.240 --> 00:20:57.170
You can see in the other places
in this method where it's used,

00:20:57.170 --> 00:21:00.350
it's gotten a faint underline.

00:21:00.350 --> 00:21:00.350
That means I can either hover over it,

00:21:02.170 --> 00:21:07.130
or choose edit all in
scope from the edit menu.

00:21:07.130 --> 00:21:09.780
And now all of the instances
of it are highlighted.

00:21:09.900 --> 00:21:14.720
Once they're highlighted,
I can just type and I've changed

00:21:14.720 --> 00:21:17.070
to every place in this method.

00:21:17.910 --> 00:21:21.420
and of course once I move my
insertion point out of it,

00:21:21.470 --> 00:21:23.300
the highlight goes away.

00:21:27.260 --> 00:21:30.860
Next, I'm going to retype this section of
code just to show you how some of the

00:21:30.940 --> 00:21:36.070
code completion and research assistant
features work in the Xcode editor.

00:21:36.210 --> 00:21:40.380
So, let's just insert a new line here.

00:21:40.780 --> 00:21:42.820
and I start typing path.

00:21:42.850 --> 00:21:45.220
You can see that it's completed
faintly to the right of my

00:21:45.220 --> 00:21:48.320
insertion point in gray,
right there in my code,

00:21:48.500 --> 00:21:51.330
rather than popping up a
list of possible completions.

00:21:51.560 --> 00:21:54.850
To accept that,
I just have to hit tab and

00:21:54.940 --> 00:21:56.890
it completes it for me.

00:21:57.660 --> 00:21:59.820
I will type the next
little bit of code here,

00:21:59.980 --> 00:22:00.960
which is NSBundle.

00:22:00.960 --> 00:22:04.160
You can see Xcode is
proposing a completion,

00:22:04.420 --> 00:22:09.680
but I can also hit a keystroke, control,
comma, we have a couple of different

00:22:10.120 --> 00:22:13.670
equivalents for this,
to see a full list of possible

00:22:13.670 --> 00:22:16.480
completions that start with NSB.

00:22:16.480 --> 00:22:23.190
I can just navigate around this
using the arrow keys and I can

00:22:23.190 --> 00:22:23.190
hit return or tab to accept that.

00:22:24.280 --> 00:22:27.770
We also have a feature called
Research Assistant in our help

00:22:27.780 --> 00:22:31.010
menu that shows you reference
documentation about your code.

00:22:31.070 --> 00:22:34.810
So I can just resize this,
I can move it around,

00:22:34.920 --> 00:22:37.730
I can put it in one place,
and then I can go back to

00:22:37.730 --> 00:22:39.570
my editor and start typing.

00:22:39.580 --> 00:22:43.290
So if I start typing, I get main bundle,
and you can see that the

00:22:43.290 --> 00:22:47.000
Research Assistant has updated
to give me documentation on the

00:22:47.000 --> 00:22:49.470
NSBundle classes main bundle method.

00:22:49.500 --> 00:22:52.340
And it's only the most
relevant documentation.

00:22:52.340 --> 00:22:55.440
It's not a complete treatise
on what that method does,

00:22:55.440 --> 00:22:59.920
but you can see that it's also
been available since MacÂ OSÂ X 10.0,

00:22:59.940 --> 00:23:03.870
that there are several other related API.

00:23:04.130 --> 00:23:09.500
and you can even see sample code that
uses NSBundle's main bundle method.

00:23:10.640 --> 00:23:13.000
Now I'll go back here
and finish typing it.

00:23:13.060 --> 00:23:16.600
And then start typing the
next bit of this method.

00:23:16.640 --> 00:23:19.830
Now, as I type path for resource,
this is a method that

00:23:19.960 --> 00:23:21.320
takes two arguments.

00:23:21.370 --> 00:23:24.740
So because it takes arguments,
Xcode proposes the completion

00:23:24.740 --> 00:23:28.860
of that method with what
we call placeholder tokens.

00:23:28.940 --> 00:23:32.320
So if I complete this
method by pressing tab,

00:23:32.450 --> 00:23:37.630
I immediately get one of these tokens
highlighted and you can see that the next

00:23:37.630 --> 00:23:40.330
one to its right is faint and in blue.

00:23:40.800 --> 00:23:43.560
We actually have keystroke
navigation between these.

00:23:43.580 --> 00:23:45.320
So if I want to fill in
the second one first,

00:23:45.320 --> 00:23:48.580
I can just hit control slash
and go to it immediately.

00:23:48.580 --> 00:23:51.360
And I can just navigate between them.

00:23:51.390 --> 00:23:54.770
And of course, when we start typing,

00:23:56.950 --> 00:23:58.350
We replace the token.

00:23:58.460 --> 00:24:01.910
And because this is a token
and not just text in our file,

00:24:02.040 --> 00:24:05.060
we can even do things like
click the token and the

00:24:05.060 --> 00:24:07.160
entire thing is highlighted.

00:24:07.160 --> 00:24:11.040
That really cuts down on sort
of the incidental editing that

00:24:11.040 --> 00:24:13.310
you have to do to write code.

00:24:15.920 --> 00:24:22.000
and syntax highlighting.

00:24:22.000 --> 00:24:22.000
The highlighting there told me
I had forgotten a double quote.

00:24:22.220 --> 00:24:26.070
and as I typed that final bracket,
you can even see that we

00:24:26.070 --> 00:24:31.260
highlight our brackets and
parentheses and so on for you.

00:24:31.270 --> 00:24:36.740
I'm just going to get rid of this.

00:24:36.770 --> 00:24:39.690
And go back to the slides.

00:24:44.780 --> 00:24:49.350
So one thing that we didn't see in
text editing was that we also have a

00:24:49.440 --> 00:24:53.610
great feature called Code Focus that
lets you really sort of zoom in on

00:24:53.610 --> 00:24:58.370
only the code you're working on by
letting that be in bright colors

00:24:58.760 --> 00:25:00.920
and fading everything around it out.

00:25:00.940 --> 00:25:03.740
So as you go in and out
of different scopes,

00:25:03.740 --> 00:25:06.890
the scope that you're in
is always distinct from all

00:25:06.890 --> 00:25:08.400
of the scopes around it.

00:25:08.400 --> 00:25:13.080
And of course, as a programming editor,
we have code folding that lets you

00:25:13.120 --> 00:25:16.640
just get rid of parts of the code
that you don't need to see right now.

00:25:16.680 --> 00:25:20.150
And as you saw,
we have syntax and symbol-driven

00:25:20.310 --> 00:25:22.770
coloring in our editor.

00:25:23.990 --> 00:25:28.010
and one thing that you may have seen, ah,
the slide has been

00:25:28.080 --> 00:25:29.950
updated since I wrote it.

00:25:30.150 --> 00:25:33.870
If your fingers are used to Emacs,
and that's not Emacs the Mac,

00:25:33.980 --> 00:25:39.090
but Emacs the text editor,
they will really be pleasantly surprised

00:25:39.090 --> 00:25:43.900
as you're working in not just Xcode,
but any Cocoa TextView.

00:25:44.020 --> 00:25:47.640
We support many of the
common Emacs key bindings,

00:25:47.640 --> 00:25:49.520
like control A to go to
the beginning of a line,

00:25:49.570 --> 00:25:51.700
control E to go to the end of the line.

00:25:51.820 --> 00:25:55.780
And I found myself just naturally typing
those because I'd been programming

00:25:55.780 --> 00:26:00.660
on Unix before I came to the Mac,
and they just worked.

00:26:00.660 --> 00:26:02.420
It was great.

00:26:03.250 --> 00:26:05.750
Of course,
we saw the navigation bar and the

00:26:05.820 --> 00:26:07.760
function or definition pop up.

00:26:07.910 --> 00:26:12.370
We have features called jump to
definition that lets you highlight

00:26:12.370 --> 00:26:16.560
a symbol and immediately go to
where that symbol is defined.

00:26:16.740 --> 00:26:22.180
We have a class browser so you
can navigate a class hierarchy and

00:26:22.180 --> 00:26:25.480
get documentation on the classes.

00:26:25.480 --> 00:26:29.110
And finally,
we have a tool called open quickly

00:26:29.110 --> 00:26:29.110
that was shown in the last session.

00:26:29.300 --> 00:26:41.200
[Transcript missing]

00:26:42.420 --> 00:26:46.260
In terms of code completion,
our code completion is called CodeSense.

00:26:46.300 --> 00:26:52.440
It suggests completions
in line as you type.

00:26:52.470 --> 00:26:57.020
It puts placeholder tokens
in your code for arguments.

00:26:57.130 --> 00:27:00.730
And we have keyboard equivalents
that let you write code fast,

00:27:00.770 --> 00:27:05.460
like control period for completing
now or you can also hit tab.

00:27:05.460 --> 00:27:09.960
We have control comma for showing
the completion list and we have

00:27:09.960 --> 00:27:12.280
control slash and control shift slash
for showing the completion list.

00:27:12.440 --> 00:27:17.560
So you don't need to type the
whole of anything essentially

00:27:17.560 --> 00:27:20.820
as you're writing code in Xcode.

00:27:22.190 --> 00:27:27.100
We saw edit all in scope and how it lets
you make simple common changes fast.

00:27:27.100 --> 00:27:30.080
We even have a keystroke equivalent
for that so you don't need to take your

00:27:30.080 --> 00:27:31.850
hands off the keyboard to invoke it.

00:27:31.960 --> 00:27:35.300
As you're typing,
if you need to rename a local variable,

00:27:35.510 --> 00:27:39.070
you can just hit command control
T while it's highlighted and

00:27:39.110 --> 00:27:41.380
just start typing and it changes.

00:27:41.380 --> 00:27:43.530
Such a time saver.

00:27:44.210 --> 00:27:47.910
Of course, as a modern IDE,
we also have refactoring,

00:27:47.910 --> 00:27:50.500
and we support most common refactorings.

00:27:50.500 --> 00:27:53.640
And we don't just support
refactoring of your source code.

00:27:53.680 --> 00:27:58.700
MacÂ OSÂ X applications use resources
to represent a lot of things.

00:27:58.860 --> 00:28:01.960
And those resources aren't
actually code themselves.

00:28:01.960 --> 00:28:03.940
They're object archives
and things like that.

00:28:04.090 --> 00:28:08.820
But we'll actually look into
them and change occurrences of

00:28:08.820 --> 00:28:11.270
things like class names as you
rename them in your code as well.

00:28:12.100 --> 00:28:31.610
and the rest of the team.

00:28:32.770 --> 00:28:32.770
We have integration with
developer documentation such as

00:28:32.770 --> 00:28:32.770
conceptual guides and framework
references and our documentation,

00:28:32.770 --> 00:28:32.770
as I'm sure you found in the past day,
is automatically updated.

00:28:32.770 --> 00:28:32.770
You can also create your own
documentation sets that are

00:28:32.770 --> 00:28:32.770
available through the research
assistant and through the

00:28:32.770 --> 00:28:32.770
documentation viewer right from Xcode.

00:28:33.680 --> 00:28:37.680
We saw how Research Assistant gives
you only the most important

00:28:37.680 --> 00:28:41.700
information that's specific to your
current context while you're coding,

00:28:41.740 --> 00:28:45.940
and it stays wherever you put it,
so you can always find it on screen.

00:28:45.940 --> 00:28:49.300
You don't have to hunt around
for where is this documentation

00:28:49.300 --> 00:28:50.820
on what I'm typing right now.

00:28:51.120 --> 00:28:53.950
It's always where you expect it to be.

00:28:54.890 --> 00:28:57.720
Of course,
if your fingers have hardware keyboard

00:28:58.560 --> 00:29:03.640
equivalents for other editors,
you can set up Xcode to behave like them.

00:29:03.640 --> 00:29:09.920
You can add keyboard equivalents for
any editing command or any menu command.

00:29:10.110 --> 00:29:14.360
And if you have operations that
you perform frequently that

00:29:14.440 --> 00:29:16.750
are represented in the toolbar,

00:29:16.900 --> 00:29:22.800
[Transcript missing]

00:29:24.320 --> 00:29:26.700
and finally, we have text macros.

00:29:26.730 --> 00:29:31.600
These are really handy and they let you
insert snippets of code into your code.

00:29:31.710 --> 00:29:36.090
And we have a bunch of common text macros
set up right at the end of the edit menu.

00:29:36.220 --> 00:29:39.440
For example,
you can just type a few characters

00:29:39.840 --> 00:29:44.000
and hit the same code completion key
that you would for code sense and

00:29:44.000 --> 00:29:46.640
you'll get a definition of a class.

00:29:46.730 --> 00:29:52.230
Complete with placeholder tokens that
you can just rename and be done with.

00:29:53.510 --> 00:29:56.440
We even support scripting within the IDE.

00:29:56.590 --> 00:29:58.690
This isn't an embedded
scripting language.

00:29:58.860 --> 00:30:00.940
Instead,
we allow you to write scripts for

00:30:01.080 --> 00:30:04.400
any of the scripting languages
that are supported on MacÂ OSÂ X,

00:30:04.400 --> 00:30:07.890
Python, Ruby, Pearl,
Apple script and so on,

00:30:08.240 --> 00:30:11.250
right within Xcode,
and then run those from keyboard

00:30:11.350 --> 00:30:13.730
equivalents or from menu commands.

00:30:14.820 --> 00:30:19.060
And these can actually be passed
information from within Xcode,

00:30:19.060 --> 00:30:22.150
such as your current selection
or the selected file,

00:30:22.160 --> 00:30:26.230
and operate on that and pass
information back to Xcode.

00:30:27.670 --> 00:30:30.750
So now that we've written some code,
how do we design the

00:30:30.750 --> 00:30:32.220
rest of our application?

00:30:32.260 --> 00:30:36.280
We didn't really write a lot of
code to put up our user interface,

00:30:36.300 --> 00:30:38.940
so how do we do that?

00:30:38.960 --> 00:30:41.480
Well, if we go back to the demo,

00:30:44.050 --> 00:30:48.650
First, let's see how our
About panel actually works.

00:30:49.040 --> 00:30:53.860
Well, we use Interface Builder on
MacÂ OSÂ X and on iPhone OS to build

00:30:53.860 --> 00:30:56.200
our application user interfaces.

00:30:56.260 --> 00:30:59.160
So I'm just gonna collapse
a couple things here.

00:30:59.500 --> 00:31:20.500
[Transcript missing]

00:31:20.840 --> 00:31:24.820
So here we see that the baffle
main window is also defined

00:31:24.820 --> 00:31:26.800
in this main menu file.

00:31:26.830 --> 00:31:30.100
We'll just close that up because
we're not going to edit that.

00:31:30.140 --> 00:31:31.730
And instead,
we're going to open the main menu.

00:31:31.760 --> 00:31:34.610
And of course,
we directly edit our menus in

00:31:34.610 --> 00:31:39.070
MacÂ OSÂ X in sort of the same
representation that you see on screen.

00:31:40.820 --> 00:31:44.920
What's unique about this compared to
the designers you might be used to from

00:31:45.050 --> 00:31:50.980
Visual Studio or Eclipse is that we're
not generating any code as you do this.

00:31:51.260 --> 00:31:54.300
Instead,
we're generating object archives that

00:31:54.300 --> 00:31:56.500
are just deserialized at runtime.

00:31:56.500 --> 00:32:03.190
So the objects you're working with in
interface builder are in a sense the

00:32:03.190 --> 00:32:07.890
objects that you're actually going to
work with once you run your application.

00:32:09.210 --> 00:32:13.350
So this about baffle menu item,
we can just control click on

00:32:13.350 --> 00:32:17.580
it or right click on it and see
a list of connections for it.

00:32:17.600 --> 00:32:21.770
And one of its connections
is a sent action.

00:32:21.980 --> 00:32:26.000
which it's hard to see here,
but it says order front standard about

00:32:26.000 --> 00:32:28.590
panel and it's being sent to files owner.

00:32:28.600 --> 00:32:32.780
And you can see as I mouse over this,
that files owner highlights in

00:32:32.780 --> 00:32:36.170
our interface builder document
window in the lower left.

00:32:37.080 --> 00:32:40.470
and this is a message that's
actually going to be sent at runtime.

00:32:40.470 --> 00:32:44.680
And it's an Objective C message,
but just double clicking this

00:32:44.680 --> 00:32:46.880
only lets us edit the text.

00:32:46.880 --> 00:32:49.060
It doesn't take us to the
definition of that message,

00:32:49.080 --> 00:32:52.390
because that message is actually
part of the Cocoa framework itself.

00:32:52.520 --> 00:32:55.120
It's not anything we've had to implement.

00:32:55.140 --> 00:32:58.290
Well, what do we do if we want to
implement our own About Panel?

00:32:58.410 --> 00:33:02.810
We've already defined some code
for our About Panel in Xcode as

00:33:02.810 --> 00:33:04.840
About Panel Window Controller.

00:33:04.850 --> 00:33:07.120
I just dragged that in on the last demo.

00:33:07.330 --> 00:33:09.340
So let's go back to Interface Builder.

00:33:09.370 --> 00:33:12.580
And I just want to create an
About Panel Window Controller.

00:33:12.660 --> 00:33:16.940
So I'm going to look for an object
in my Interface Builder library.

00:33:16.950 --> 00:33:20.300
And this handy search field,
let me find that fast.

00:33:20.640 --> 00:33:23.530
I'm going to drag it and drop
it straight into my main menu

00:33:23.530 --> 00:33:25.000
Interface Builder document.

00:33:25.000 --> 00:33:30.180
Of course, a generic object won't
really do us much good.

00:33:30.900 --> 00:33:34.780
So I'm going to go to the identity
inspector and tell interface builder

00:33:35.050 --> 00:33:39.500
that that should actually represent
an about panel window controller.

00:33:40.710 --> 00:33:45.100
Now, how do I actually tell my menu item
that it should do something with

00:33:45.200 --> 00:33:47.700
my about panel window controller?

00:33:48.310 --> 00:33:52.140
Well, I can control click or right
click on it to see its actions.

00:33:52.170 --> 00:33:57.330
And then instead of sending order front
standard about panel to file's owner,

00:33:57.390 --> 00:34:01.980
I'm just going to drag that
connection to my about panel.

00:34:02.010 --> 00:34:05.120
And Interface Builder pops
up a list of possible actions

00:34:05.200 --> 00:34:08.280
that that panel can take,
that object can take.

00:34:08.280 --> 00:34:10.880
I'm going to select show window.

00:34:10.930 --> 00:34:12.800
And that's it,
I've changed this connection.

00:34:12.820 --> 00:34:15.050
No code is generated.

00:34:18.800 --> 00:34:22.860
and I haven't had to write any
additional code to wire this up.

00:34:22.860 --> 00:34:27.650
Now let's actually lay out this window.

00:34:28.030 --> 00:34:31.630
Well, we're going to create a new
interface builder document for that,

00:34:31.630 --> 00:34:34.610
which just contains a plain window.

00:34:35.660 --> 00:34:39.270
We already have our window here,
but let's change its name to

00:34:39.270 --> 00:34:42.380
something more appropriate,
like AboutBaffle.

00:34:43.160 --> 00:34:47.040
and just to be on the safe side,
I'm going to save it immediately.

00:34:47.370 --> 00:34:48.930
As always, save early and often.

00:34:48.940 --> 00:34:50.730
I'm not expecting
Interface Builder to crash.

00:34:50.830 --> 00:34:52.240
That's not why I'm saving.

00:34:52.330 --> 00:34:57.140
I just like to save for my own security.

00:34:58.280 --> 00:35:01.850
I'm going to navigate to where
we put our baffle project

00:35:01.940 --> 00:35:03.720
and add this to baffle Cocoa.

00:35:03.990 --> 00:35:06.510
I'm going to call it about panel.

00:35:07.570 --> 00:35:08.500
and save it.

00:35:08.500 --> 00:35:12.620
Interface builder will ask me if I want
to add it to an open project in Xcode.

00:35:12.830 --> 00:35:14.290
This is because our tools are integrated.

00:35:14.350 --> 00:35:16.650
Even though we have
special purpose tools,

00:35:16.900 --> 00:35:19.900
they do talk to each other
and learn about each other.

00:35:19.900 --> 00:35:24.550
So I'm not just going to tell interface
builder to add this to my project.

00:35:24.550 --> 00:35:28.610
I'm also going to tell it to add
it to the baffle Cocoa target.

00:35:30.210 --> 00:35:35.100
and you can see that it now knows
about the bafflecoco project.

00:35:35.100 --> 00:35:41.210
And that means I can tell it that its
owner isn't just a generic object,

00:35:41.210 --> 00:35:43.790
but is actually going to be

00:35:44.230 --> 00:35:46.000
and about panel window controller.

00:35:46.050 --> 00:35:48.260
So what is this file zoner thing?

00:35:48.280 --> 00:35:53.500
Well, it represents the object that owns
this interface builder document.

00:35:53.520 --> 00:35:57.860
Because an interface builder document
is really only part of an object graph.

00:35:57.880 --> 00:36:01.680
There has to be some way to hook it
in to the rest of your application.

00:36:01.710 --> 00:36:03.080
And that's file zoner.

00:36:03.280 --> 00:36:07.450
So this file zoner object here
is really a proxy to this about

00:36:07.450 --> 00:36:10.180
panel window controller right here.

00:36:10.890 --> 00:36:14.160
Of course, I need to tell that
about the window itself,

00:36:14.200 --> 00:36:19.880
so I'm just going to drag from its
window connection to the window.

00:36:23.100 --> 00:36:28.150
I'm going to put a view in the
window for our Fancy About panel.

00:36:28.180 --> 00:36:30.100
I'm going to use Quartz
Composer for that view.

00:36:30.100 --> 00:36:34.140
Let's type Quartz into the search field.

00:36:34.140 --> 00:36:38.100
We got our Quartz Composer
view as the first hit.

00:36:40.130 --> 00:36:43.940
I'm just going to resize this
so it fills the entire window.

00:36:44.000 --> 00:36:48.610
And I'm going to set its sizing through
our springs and struts mechanism.

00:36:49.230 --> 00:36:51.260
So it stays the same size as the window.

00:36:51.400 --> 00:36:55.350
And finally,
because our fancy about panel is

00:36:55.350 --> 00:36:59.880
going to push data to this view,
I'm just going to drag from

00:36:59.890 --> 00:37:01.700
this credits view to this view.

00:37:01.720 --> 00:37:06.420
Connection on FileZoner,
straight to the view itself.

00:37:06.440 --> 00:37:10.550
That means our
About Panel Window Controller doesn't

00:37:10.550 --> 00:37:14.100
just know about
the window that it's managing,

00:37:14.220 --> 00:37:17.420
but it also knows about a view inside it.

00:37:17.420 --> 00:37:22.880
So we didn't have to look up that view
by ID in code or anything like that.

00:37:22.880 --> 00:37:26.580
We can just use that as
an instance variable.

00:37:26.580 --> 00:37:29.680
Now I can save this and close and close.

00:37:29.680 --> 00:37:30.240
And if I build and go,

00:37:32.150 --> 00:37:37.020
and show my about panel,
we get our new fancy about panel.

00:37:37.100 --> 00:37:44.140
I'm just going to put this over
here and go back to slides and talk

00:37:44.140 --> 00:37:48.860
a little bit about what we've done.

00:37:51.910 --> 00:37:55.510
So Interface Builder, like I said,
is our human interface design

00:37:56.210 --> 00:37:58.370
tool for MacÂ OSÂ X and iPhone OS.

00:37:58.470 --> 00:38:03.300
And it edits a live object graph
that gets serialized to an archive.

00:38:03.400 --> 00:38:08.440
So your code and your interface are wired
together at runtime as you load these.

00:38:08.440 --> 00:38:13.040
And that wiring together takes
place automatically through Cocoa.

00:38:13.140 --> 00:38:14.620
It's not a code generator.

00:38:14.690 --> 00:38:19.230
It's not generating reams of
Objective C or C code to build

00:38:19.310 --> 00:38:24.100
that interface with comments
around it saying don't edit this.

00:38:25.150 --> 00:38:27.810
At the same time,
it's also not doing anything that you

00:38:27.870 --> 00:38:30.140
can't do in code with a bit more work.

00:38:30.140 --> 00:38:33.770
So if you want to instantiate
a button dynamically,

00:38:34.020 --> 00:38:34.580
you can.

00:38:34.580 --> 00:38:37.520
You don't have to create an
interface builder document

00:38:37.580 --> 00:38:39.260
just to contain that button.

00:38:40.120 --> 00:38:42.330
And it's really a tool for everyone.

00:38:42.330 --> 00:38:46.630
Because it isn't a code generator,
because it doesn't follow bad patterns,

00:38:46.650 --> 00:38:51.150
experienced professional Cocoa developers
have been using interface builder

00:38:51.150 --> 00:38:53.180
throughout Cocoa's existence.

00:38:53.220 --> 00:38:54.880
It's not a newbie tool.

00:38:54.880 --> 00:38:57.260
And you can also give
it to your designers.

00:38:57.260 --> 00:39:00.680
Because Cocoa follows a model
view controller architecture,

00:39:00.680 --> 00:39:03.510
you can put together sort
of a prototype interface,

00:39:03.510 --> 00:39:06.720
hand it over to designers who
understand interface builder

00:39:06.810 --> 00:39:08.150
and how to work with it.

00:39:08.770 --> 00:39:11.710
And as long as they preserve
all of your connections,

00:39:11.990 --> 00:39:15.080
they can make the interface as
slick as they want it to be using

00:39:15.520 --> 00:39:17.320
features like core animation.

00:39:17.320 --> 00:39:20.440
And it'll still just
hook up to your code.

00:39:20.440 --> 00:39:23.230
And this is also how you do localization.

00:39:23.230 --> 00:39:29.350
You hand over your interface builder
documents to your localizers.

00:39:29.350 --> 00:39:29.350
They can open them up,

00:39:29.550 --> 00:39:34.840
and change the text and change the
metrics so that you get a pixel perfect

00:39:34.840 --> 00:39:38.500
localization even in other languages.

00:39:38.920 --> 00:39:42.090
For example,
German text is typically about 30%

00:39:42.090 --> 00:39:46.350
larger than English text to say the
same thing and you won't just want

00:39:46.350 --> 00:39:49.810
to automatically expand every control
by 30%. Sometimes you might want

00:39:49.810 --> 00:39:51.210
to move things to a separate line.

00:39:51.270 --> 00:39:54.320
Sometimes you might want what
is one line in English to be

00:39:54.380 --> 00:39:56.210
two lines in German and so on.

00:39:57.640 --> 00:40:00.670
Interface Builder gives you
the flexibility to have tweaked

00:40:00.980 --> 00:40:06.870
localizations for every language and
locale that you're delivering in.

00:40:08.220 --> 00:40:11.140
Now, one thing I didn't show
is Quartz Composer.

00:40:11.140 --> 00:40:14.420
I showed you the result
of Quartz Composer,

00:40:14.420 --> 00:40:17.340
but it actually works a
lot like Interface Builder.

00:40:17.340 --> 00:40:23.050
You create objects and you wire them
together in a graph called a composition.

00:40:23.060 --> 00:40:26.280
And just like Interface Builder,
it doesn't generate code.

00:40:26.280 --> 00:40:29.770
It just generates a graph of
objects that you can load and

00:40:29.770 --> 00:40:32.000
connect your code to at runtime.

00:40:32.000 --> 00:40:35.450
But again,
it doesn't do anything that you

00:40:35.450 --> 00:40:39.890
can't do in code if you want to
invest a little bit more work in it.

00:40:39.890 --> 00:40:43.830
If you have a completely
dynamic system that you want

00:40:43.830 --> 00:40:47.580
to generate a composition for,
you can do that.

00:40:48.250 --> 00:40:51.230
Quartz Composer is a
designer-specific tool.

00:40:51.310 --> 00:40:54.510
Fortunately,
thanks to Model View Controller,

00:40:54.510 --> 00:40:58.620
you can create a basic
placeholder composition,

00:40:58.850 --> 00:41:02.950
decide what inputs it needs,
what inputs that you're going

00:41:02.990 --> 00:41:05.860
to hook to from your code,
and then toss it over the

00:41:05.930 --> 00:41:07.540
wall to your designers.

00:41:07.540 --> 00:41:11.690
They can spend the effort on making it
slick and they can apply their unique

00:41:11.770 --> 00:41:15.850
experience and they can hand you back
a version that you can just drop into

00:41:15.990 --> 00:41:18.030
your code and that will just work.

00:41:20.250 --> 00:41:23.370
Now, we talked about designing your
application and editing your code,

00:41:23.370 --> 00:41:25.360
but what about your data?

00:41:25.360 --> 00:41:31.030
Well, we do have data design tools, too,
and we have a framework for managing

00:41:31.030 --> 00:41:34.240
your data in MacÂ OSÂ X called Core Data.

00:41:34.240 --> 00:41:37.010
I'm not going to talk too much
about this because we have

00:41:37.120 --> 00:41:41.220
several sessions tomorrow on it,
but it lets you do entity relationship

00:41:41.230 --> 00:41:46.810
modeling of your data and manage
its persistence from within Xcode.

00:41:46.820 --> 00:41:49.900
And it really implements the
model-in-model-view controller.

00:41:50.320 --> 00:41:53.420
One of the features that this gets you
if you're doing MacÂ OSÂ X application

00:41:53.560 --> 00:41:58.500
development is seamless,
effortless undo and redo.

00:41:58.500 --> 00:42:03.690
And again, it's not a code generator,
but if you do want to create models at

00:42:04.080 --> 00:42:07.250
runtime and use those with Core Data,
you can do it.

00:42:07.410 --> 00:42:09.060
It just requires writing a little code.

00:42:11.640 --> 00:42:14.640
So there's one thing that
I showed in the demo,

00:42:14.640 --> 00:42:18.920
and that's this kind of undulating blue,
but there was nothing on it.

00:42:18.950 --> 00:42:21.590
Well, we were gonna give credit
to the technologies that

00:42:21.590 --> 00:42:23.520
we're using in our demo.

00:42:23.740 --> 00:42:29.930
Joar is going to help us debug
why we weren't seeing that.

00:42:36.500 --> 00:42:41.660
Hi, my name is Joar Wingfor,
I'm also a developer on the Xcode team.

00:42:41.660 --> 00:42:46.120
As Chris pointed out,
we expected to have a list of names

00:42:46.120 --> 00:42:49.720
showing up in the about panel,
every name showing up for a couple

00:42:49.720 --> 00:42:52.700
of seconds to then be replaced
by the next name in the list.

00:42:52.700 --> 00:42:56.740
And to do that, we had set up a recurring
timer in our code,

00:42:56.740 --> 00:43:02.310
and every time the timer fires,
it would invoke a callback

00:43:02.310 --> 00:43:05.090
method in our code.

00:43:05.620 --> 00:43:10.040
So to debug that,
I'm going to drop down into the

00:43:10.040 --> 00:43:15.090
debugger by setting a breakpoint
in that callback method.

00:43:23.000 --> 00:43:29.440
I'm going to expand the window a bit.

00:43:29.470 --> 00:43:33.420
Now, as you've seen in earlier sessions,
we can actually get most of our debugging

00:43:33.440 --> 00:43:34.930
work done right here in the editor.

00:43:34.940 --> 00:43:37.960
There are three basic
things to debugging.

00:43:37.960 --> 00:43:39.460
You want to be able to set breakpoints.

00:43:39.460 --> 00:43:41.630
You want to be able to
step through your code.

00:43:41.630 --> 00:43:43.680
And you want to be able
to view your memory.

00:43:43.680 --> 00:43:46.550
And you can get all of that
done right here in the editor.

00:43:46.550 --> 00:43:50.660
So to the left of the editor window,
we have the editor gutter where you

00:43:50.770 --> 00:43:52.970
can set and manage your breakpoint.

00:43:53.000 --> 00:43:56.340
On top of the editor,
right above the navigation bar that

00:43:56.430 --> 00:44:00.780
Chris introduced to you earlier,
we have the debugger strip

00:44:00.780 --> 00:44:03.080
that we have seen before.

00:44:03.080 --> 00:44:07.410
Going through the debugger
strip from left to right,

00:44:07.990 --> 00:44:11.740
We have a popup showing all the
threads running in this application.

00:44:11.880 --> 00:44:14.810
Next to that we have a bunch
of stepper controls that allows

00:44:15.330 --> 00:44:17.310
you to step through your code.

00:44:17.470 --> 00:44:21.200
And to the right of the
rightmost in the debugger strip,

00:44:21.200 --> 00:44:26.010
we have a popup that shows you the
call stack of the selected thread.

00:44:29.140 --> 00:44:31.690
To view memory,
we have data tips that you might

00:44:31.690 --> 00:44:33.610
have probably seen in other sessions.

00:44:33.640 --> 00:44:41.690
Data tips shows you data structures
and objects that you have in scope.

00:44:41.760 --> 00:44:45.240
And in the data tip you have,
from left to right,

00:44:45.400 --> 00:44:49.570
you have the type of the variable,
the name of the variable,

00:44:49.570 --> 00:44:52.140
and the value of the variable.

00:44:52.140 --> 00:44:56.680
So for an object, that would be the
address of the variable.

00:44:57.710 --> 00:45:00.580
You can also drill
down into the data tip.

00:45:00.780 --> 00:45:03.760
In case of an object,
drilling down would allow you to see the

00:45:03.760 --> 00:45:09.270
instance variables of that object and
the instance variables of the superclass.

00:45:10.710 --> 00:45:16.880
If you want to get to more advanced
functionality or get a better

00:45:16.880 --> 00:45:22.690
overview over your debugging,
we also have a dedicated debugger window.

00:45:22.800 --> 00:45:28.300
[Transcript missing]

00:45:29.440 --> 00:45:34.000
The debugger window probably
looks a lot more like what you're

00:45:34.000 --> 00:45:37.550
used to from other environments.

00:45:39.100 --> 00:45:42.500
In top left,
we have a threads list that allows

00:45:42.500 --> 00:45:47.870
you to select threads and show the
call stacks of the selected thread.

00:45:47.970 --> 00:45:50.540
And next to that,
we have the variables list

00:45:50.540 --> 00:45:53.660
showing arguments to functions,
local and global variables,

00:45:53.660 --> 00:45:55.940
and even registers.

00:45:56.020 --> 00:45:59.380
And below that, we have a source editor.

00:45:59.760 --> 00:46:02.190
You can also open the console window.

00:46:02.300 --> 00:46:05.060
The console window serves
two basic purposes.

00:46:05.200 --> 00:46:07.800
First, it shows textual output
from your application,

00:46:07.800 --> 00:46:12.160
typically debug log statements,
but it also allows you to

00:46:12.240 --> 00:46:16.030
interact directly with a
debugger using debugger commands.

00:46:16.690 --> 00:46:20.000
The underlying debugger
technology for Xcode is GDB,

00:46:20.000 --> 00:46:21.900
the open source debugger.

00:46:21.900 --> 00:46:26.660
So if you know GDB or if you want to
look up the commands in the man page,

00:46:26.660 --> 00:46:29.960
you can use all of them
in the Xcode console.

00:46:32.490 --> 00:46:34.810
We also have a number of
components to the Xcode debugger

00:46:34.820 --> 00:46:36.150
that I'm not showing here.

00:46:36.210 --> 00:46:41.200
We have a disassembly view that shows
you the raw instructions of your program.

00:46:41.340 --> 00:46:46.940
We have a memory browser where you can
view the raw memory of your application.

00:46:46.980 --> 00:46:51.700
And we have a dedicated breakpoints
window where you can add and modify

00:46:51.700 --> 00:46:56.270
and manage all of your breakpoints
in your project in one place.

00:46:58.340 --> 00:47:01.540
For this demo, I'm going to do the
debugging back in the editor.

00:47:01.540 --> 00:47:04.400
So I'm closing this debugger window now.

00:47:05.260 --> 00:47:10.680
This is the callback method
where I'm supposed to update

00:47:10.700 --> 00:47:13.870
the name in the about panel.

00:47:14.090 --> 00:47:16.410
We will do that on this
last line of code here.

00:47:16.670 --> 00:47:20.780
And the next name to be updated
is this next credited variable.

00:47:20.820 --> 00:47:24.780
And as you can see from the data tip,
the value is nil.

00:47:25.460 --> 00:47:27.160
You can also see that
the name is red here,

00:47:27.160 --> 00:47:33.840
meaning that this variable was
updated on the last step of execution.

00:47:33.880 --> 00:47:36.320
Whenever you see a red value
in the debugger in Xcode,

00:47:36.350 --> 00:47:39.860
that means that that
value was just updated.

00:47:41.140 --> 00:47:43.850
I'm scanning through this method.

00:47:43.920 --> 00:47:45.700
Nothing really sticks out as wrong.

00:47:45.700 --> 00:47:47.600
I will have to step through this.

00:47:47.600 --> 00:47:52.590
To do that,
I can grab the program counter over here.

00:47:52.610 --> 00:47:54.060
That's the red arrow.

00:47:54.060 --> 00:47:57.410
I can just drag that back up to
the top of the method to start

00:47:57.700 --> 00:47:59.780
over and step through the code.

00:48:01.380 --> 00:48:06.080
So the first line of code here is called
to a method called allCredits that you

00:48:06.230 --> 00:48:09.580
find right above the method that I'm in.

00:48:09.580 --> 00:48:14.500
So if I hit the step into button,
I'm stepping into that method,

00:48:14.530 --> 00:48:18.380
stepping over the first line of code,
and then inspecting that variable,

00:48:18.380 --> 00:48:19.920
we see that, well, that's nil, too.

00:48:19.920 --> 00:48:24.160
So we seem to have the problem already
here in the first line of this method.

00:48:24.160 --> 00:48:27.150
And just by inspection, I can see that

00:48:27.690 --> 00:48:32.030
I'm trying to look for the
path of a file called credit.

00:48:32.110 --> 00:48:34.650
But if you check over here,
you see that the file is

00:48:34.650 --> 00:48:35.780
actually called credits.

00:48:35.960 --> 00:48:39.850
So,
it's a -- we have typed the wrong name.

00:48:40.070 --> 00:48:43.900
So, just by correcting that,
I should be able to fix this problem.

00:48:43.900 --> 00:48:48.780
So, I'm going to hit build and go.

00:48:56.120 --> 00:49:00.540
Launching the application,
opening the About panel.

00:49:00.610 --> 00:49:04.480
Since I left the breakpoint around,
the breakpoint hit again.

00:49:04.500 --> 00:49:09.480
And using data tips,
I can now inspect and see that this time

00:49:09.480 --> 00:49:12.240
I do have the values that I expected.

00:49:12.250 --> 00:49:18.110
And if I disable the breakpoint
and continue execution,

00:49:20.970 --> 00:49:27.870
You can see that the bound panel now
works as we intended from the beginning.

00:49:27.870 --> 00:49:27.870
So if I could go back to slides, please.

00:49:33.000 --> 00:49:37.760
As you might expect, in Xcode,
you can use breakpoints to simply

00:49:37.850 --> 00:49:41.810
stop on a symbol or a line of code.

00:49:41.960 --> 00:49:43.890
For every breakpoint,
you can assign a condition,

00:49:43.970 --> 00:49:46.870
and this condition would need
to be satisfied for the debugger

00:49:46.880 --> 00:49:48.250
to stop on the breakpoint.

00:49:48.260 --> 00:49:52.610
You can also assign one or more actions,
and these actions would be executed as

00:49:52.610 --> 00:49:54.920
the debugger stops on the breakpoint.

00:49:55.980 --> 00:49:59.300
There are several different
types of actions to choose from,

00:49:59.300 --> 00:50:03.820
but the two most useful types of
actions would either be a log statement,

00:50:04.500 --> 00:50:10.690
where you provide a printf style
format string to the debugger that

00:50:10.900 --> 00:50:14.490
can reference this data in scope.

00:50:14.600 --> 00:50:18.840
So you can output data to the
debugger console much like you

00:50:18.880 --> 00:50:21.700
would do with a debug log statement.

00:50:22.680 --> 00:50:26.940
The other useful type of debugger action,
the other useful type of breakpoint

00:50:26.940 --> 00:50:30.220
action would be to execute
any type of debugger command.

00:50:30.220 --> 00:50:35.890
One of the more commonly used debugger
commands for breakpoint actions would

00:50:35.890 --> 00:50:41.400
probably be to print the backtrace
of where you have stopped execution.

00:50:43.120 --> 00:50:44.980
Thirdly,
you can also set your breakpoints to

00:50:44.980 --> 00:50:49.760
automatically continue after having
executed your breakpoint actions.

00:50:49.860 --> 00:50:54.760
And this would typically be used for,
for example, if you have a breakpoint set

00:50:54.980 --> 00:50:56.820
up with a logging action.

00:50:56.820 --> 00:50:59.460
So you would have your breakpoint
log something and then just

00:50:59.460 --> 00:51:00.800
automatically continue.

00:51:00.800 --> 00:51:05.790
You could also often see breakpoints
being set up to log the backtrace

00:51:05.970 --> 00:51:08.660
and then automatically continue.

00:51:08.660 --> 00:51:09.120
Very useful.

00:51:09.880 --> 00:51:12.720
Finally, as you create new
breakpoints in your project,

00:51:12.750 --> 00:51:17.200
the breakpoints are associated with that
project and persisted with that project.

00:51:17.260 --> 00:51:22.310
But you often have code shared between
several projects and you might want to

00:51:22.320 --> 00:51:25.710
have the same breakpoint set in all of
the projects where you use that code.

00:51:25.720 --> 00:51:29.350
And in these cases,
you can change your breakpoints

00:51:29.390 --> 00:51:34.130
from being project scope breakpoints
to be global breakpoints.

00:51:34.160 --> 00:51:36.600
Meaning that whenever you
open a project in Xcode,

00:51:36.600 --> 00:51:38.780
you will have access to that breakpoint.

00:51:38.970 --> 00:51:43.790
It's a very convenient way of
sharing breakpoints between projects.

00:51:44.740 --> 00:51:51.500
So, suppose you have a game like in this
case and you wanted to run full screen.

00:51:51.850 --> 00:51:53.760
If when you're running your
application full screen,

00:51:53.760 --> 00:51:57.240
you can't interact with the standard
debugger UI at the same time.

00:51:57.350 --> 00:52:00.460
So, one way of solving that problem
would be to use remote debugging

00:52:00.460 --> 00:52:01.800
from a separate machine.

00:52:01.950 --> 00:52:06.160
You can also in many cases
use the Xcode mini debugger.

00:52:06.560 --> 00:52:11.040
Even if you're not running full screen,
it is sometimes a bit too intrusive

00:52:11.040 --> 00:52:14.440
to have to switch back and forth
between your application and Xcode.

00:52:14.440 --> 00:52:17.380
In these cases,
you can also use the Xcode Mini Debugger.

00:52:17.500 --> 00:52:20.670
The Xcode Mini Debugger looks like this.

00:52:20.670 --> 00:52:25.830
It's a small window that floats
on top of your application.

00:52:26.120 --> 00:52:29.830
It starts out small like this,
but as you pause execution

00:52:29.830 --> 00:52:33.380
or as you hit the breakpoint,
it expands to show you the

00:52:33.530 --> 00:52:36.730
familiar in-editor debugger
UI with the data strips,

00:52:36.730 --> 00:52:42.300
with the breakpoints,
and with data tips to show you memory.

00:52:44.920 --> 00:52:47.050
Finally,
we have these four separate ways for

00:52:47.050 --> 00:52:49.280
you to interact with the Xcode debugger.

00:52:49.280 --> 00:52:51.660
There is the rich,
traditional debugger UI provided

00:52:51.760 --> 00:52:52.960
by the debugger window.

00:52:52.960 --> 00:52:56.260
There is the debugger strip that
allows you to stay focused on your

00:52:56.260 --> 00:52:59.860
code and get most of your debugging
done right there in the editor.

00:52:59.860 --> 00:53:03.980
For full screen applications
and less intrusive debugging,

00:53:03.980 --> 00:53:04.940
we have the mini debugger.

00:53:04.940 --> 00:53:11.240
And for textual output and for direct
access to the debugger command line,

00:53:11.400 --> 00:53:14.000
we have the debugger console.

00:53:16.540 --> 00:53:19.340
and moving on, this is my second part.

00:53:19.440 --> 00:53:24.910
I'm going to talk to you a little
bit about performance tools.

00:53:24.910 --> 00:53:24.910
Performance

00:53:25.760 --> 00:53:30.370
Performance analysis is very important,
and the ability to troubleshoot

00:53:30.370 --> 00:53:33.080
performance problems is very important.

00:53:33.140 --> 00:53:36.300
For that reason,
we have a great set of performance

00:53:36.400 --> 00:53:38.310
tools available on MacÂ OSÂ X.

00:53:40.310 --> 00:53:41.790
and the rest of the team.

00:53:41.790 --> 00:53:44.760
Too many to talk to here,
but I'm going to give you a

00:53:44.870 --> 00:53:48.210
bit of an overview over our
flagship performance tool,

00:53:48.210 --> 00:53:49.730
being instruments.

00:53:53.490 --> 00:53:58.830
In this case, I, well, so,
if I launch instruments,

00:53:59.320 --> 00:54:19.970
It will create a new document for me.

00:54:19.970 --> 00:54:19.970
This document will be used to collect
performance data from my application.

00:54:19.970 --> 00:54:19.970
Before I can do that, though,
I need to let instruments know

00:54:19.970 --> 00:54:19.970
what type of performance data that
I'm interested in at this moment.

00:54:19.970 --> 00:54:19.970
A very convenient way of doing that
is to pick one of the predefined

00:54:20.200 --> 00:54:27.200
[Transcript missing]

00:54:27.850 --> 00:54:30.730
Typically,
when you are using instruments,

00:54:30.780 --> 00:54:33.060
you have some sort of idea
of what type of performance

00:54:33.060 --> 00:54:34.900
problems that you are looking for.

00:54:34.930 --> 00:54:38.650
And then you would pick
the appropriate template.

00:54:38.690 --> 00:54:40.840
For this demo,
I'm going to pick the blank

00:54:40.840 --> 00:54:44.340
template and instead I'm going
to manually pick the types of

00:54:44.340 --> 00:54:47.020
instrumentation that I'm interested in.

00:54:47.400 --> 00:54:52.260
So, in order for you to get an overview
over the different types of

00:54:52.260 --> 00:54:58.100
instrumentation available in instruments,
you would open the library window.

00:54:58.110 --> 00:55:00.150
In the library window,
you will find all of the different

00:55:00.150 --> 00:55:04.660
types of instrumentation that you
can perform in your application.

00:55:04.680 --> 00:55:07.300
And you can pick and
choose from this list.

00:55:07.360 --> 00:55:10.500
For this demo,
I'm going to look at file IO using

00:55:10.620 --> 00:55:12.890
the file activity instrument.

00:55:13.160 --> 00:55:19.490
I'm going to look at memory leaks
using the leaks instrument and finally,

00:55:19.600 --> 00:55:25.000
[Transcript missing]

00:55:28.710 --> 00:55:32.200
Since I already have my application
up and running here in the background,

00:55:32.250 --> 00:55:38.880
I can simply attach to that application
from instruments by selecting it

00:55:38.880 --> 00:55:42.470
from the popup and hitting record.

00:55:54.800 --> 00:56:04.400
[Transcript missing]

00:56:05.150 --> 00:56:09.580
Instrument attaches to the application
and starts to collect performance data.

00:56:09.580 --> 00:56:12.780
The instrument window has a
couple of different parts.

00:56:12.970 --> 00:56:16.340
So the topmost part here
is the timeline view.

00:56:16.340 --> 00:56:20.880
The timeline view is designed to give
you a high-level representation of the

00:56:21.190 --> 00:56:23.830
data as it is collected by instruments.

00:56:23.870 --> 00:56:27.000
It's also designed to give you,
to make it easy for you to

00:56:27.140 --> 00:56:31.590
immediately pick out any performance
problems that you have in your code.

00:56:32.480 --> 00:56:34.980
Below the timeline,
you find a detail view.

00:56:35.250 --> 00:56:39.900
The detail view shows all of
the performance data collected.

00:56:39.900 --> 00:56:45.130
It allows you to filter that
data and to drill down into that

00:56:45.410 --> 00:56:47.970
data and look at it in detail.

00:56:48.440 --> 00:56:50.750
So I can stop here.

00:56:50.920 --> 00:56:56.820
And so for the CPU sampler here,
there are basically no peaks.

00:56:56.820 --> 00:56:58.690
CPU-wise, we seem to do fine.

00:56:58.690 --> 00:57:04.520
There is one peak here for memory leaks
that we might want to take a look at.

00:57:04.520 --> 00:57:07.280
But for this demo,
I'm going to focus on the fact that

00:57:07.280 --> 00:57:09.140
we have this recurring file I.O.

00:57:09.140 --> 00:57:10.080
operations here.

00:57:10.080 --> 00:57:11.470
Doesn't seem quite right.

00:57:11.800 --> 00:57:14.050
And this is probably too
small for you to see,

00:57:14.050 --> 00:57:16.790
but here in the detail view,
you can see that all of them

00:57:16.790 --> 00:57:19.300
are accessing the same file,
our credits file,

00:57:19.300 --> 00:57:22.980
where we have these names that
we display in the about panel.

00:57:23.590 --> 00:57:26.530
By selecting one of these entries
here in the detail view and

00:57:26.530 --> 00:57:29.190
opening the extended detail,

00:57:30.030 --> 00:57:35.020
I can also see the backtrace
to this file IO event.

00:57:35.020 --> 00:57:39.100
And if I find my code
here in this backtrace,

00:57:39.100 --> 00:57:42.780
I know that this is probably something
that I could do something about.

00:57:43.050 --> 00:57:45.000
The backtrace is color coded by library.

00:57:45.000 --> 00:57:50.030
So you can easily pick out
the system libraries and

00:57:50.040 --> 00:57:51.870
separate them from your code.

00:57:51.870 --> 00:57:53.660
So in this case,
I have my code down here.

00:57:53.660 --> 00:57:57.520
And I can double click on
the last frame in my code,

00:57:57.540 --> 00:58:03.780
go back to baffle, and see that, well,
we have this accessor method here

00:58:03.780 --> 00:58:07.930
where we request to have this list of
credits where we pick out the next name

00:58:07.930 --> 00:58:09.540
from the list to show in the panel.

00:58:09.790 --> 00:58:13.450
And we actually reread this

00:58:14.370 --> 00:58:22.340
This would be a problem
that we would want to fix.

00:58:22.350 --> 00:58:25.300
And I'd like to go back to slides,
please.

00:58:28.880 --> 00:58:33.500
Instruments is this umbrella type
application that provides many,

00:58:33.500 --> 00:58:35.520
many different types of instrumentation.

00:58:35.520 --> 00:58:38.600
You can select several of these
different types of instrumentation

00:58:38.600 --> 00:58:41.450
and run them side by side,
have them collect data at the same

00:58:41.450 --> 00:58:44.490
time and present them to you in
a way that makes a lot of sense.

00:58:44.680 --> 00:58:49.300
We have these many great data mining and
visualization tools that makes it very

00:58:49.410 --> 00:58:53.680
easy for you to correlate the data and
to pick out the performance problems.

00:58:53.680 --> 00:58:58.660
Instruments also provides
very nice Xcode integration.

00:58:58.660 --> 00:59:01.680
You can launch instruments
from Xcode and you can also get

00:59:01.680 --> 00:59:03.500
back to Xcode from instruments.

00:59:05.830 --> 00:59:09.380
There are a number of other
tools that have been mentioned

00:59:09.380 --> 00:59:12.660
earlier already at the conference.

00:59:12.670 --> 00:59:16.820
So instruments, if you're new to the Mac,
new to Apple,

00:59:16.820 --> 00:59:18.600
instruments should be your first choice.

00:59:18.600 --> 00:59:20.560
But if you're really
into performance tools,

00:59:20.560 --> 00:59:23.260
there are a lot of other very interesting
tools for you to take a look at,

00:59:23.300 --> 00:59:26.390
in particular,
perhaps Sharks and Sharkenquartz debug.

00:59:26.420 --> 00:59:29.250
Most of the tools come with
command line utilities.

00:59:29.420 --> 00:59:35.430
Being able to access the functionality
provided by these tools at the

00:59:35.430 --> 00:59:39.540
command line is very useful when
you need to do remote performance

00:59:39.580 --> 00:59:43.360
troubleshooting or if you want
to automate your performance analysis

00:59:43.370 --> 00:59:45.820
and call these tools from scripts.

00:59:45.860 --> 00:59:50.120
A very important underlying
technology for instruments,

00:59:50.120 --> 00:59:55.700
a technology unfortunately not available
on the phone or on the iPod touch,

00:59:55.750 --> 00:59:59.360
but available to you if you
run your phone application.

00:59:59.360 --> 01:00:02.280
In the simulator is Dtrace.

01:00:02.370 --> 01:00:07.960
Dtrace is an open source technology
created by Sun and made part of MacÂ OSÂ X.

01:00:07.960 --> 01:00:11.720
It's very interesting and I would
encourage you to take a look at that.

01:00:11.790 --> 01:00:15.770
And with that, I'd like to hand the
stage back to Anders.

01:00:20.410 --> 01:00:21.400
Thanks, Joar.

01:00:21.400 --> 01:00:22.800
All right.

01:00:22.860 --> 01:00:27.320
So you've designed and edited and built,
debugged and tuned your application.

01:00:27.320 --> 01:00:28.160
What do you want to do?

01:00:28.160 --> 01:00:28.830
You want to ship it.

01:00:28.960 --> 01:00:30.870
So let's talk briefly about deployment.

01:00:30.870 --> 01:00:34.810
You might burn a disk and, you know,
cut down trees to build

01:00:34.940 --> 01:00:36.630
a package and all that.

01:00:36.730 --> 01:00:42.160
But Internet delivery is becoming more
and more popular and fairly common.

01:00:42.160 --> 01:00:45.110
That said,
first impressions are still important.

01:00:45.130 --> 01:00:46.880
So you might want to have logos.

01:00:46.920 --> 01:00:50.350
You might want to have basically
virtual box art that shows up.

01:00:50.450 --> 01:00:51.240
How can you do that?

01:00:51.370 --> 01:00:53.300
Well, first of all,
how do you install the

01:00:53.400 --> 01:00:55.040
application on the user's system?

01:00:55.040 --> 01:00:56.280
There's two basic options.

01:00:56.500 --> 01:00:58.820
There's drag and drop,
which you've probably all seen

01:00:58.940 --> 01:01:00.660
for a Macintosh application.

01:01:00.660 --> 01:01:04.190
You just have a single icon that the
user can drag and drop onto their desktop

01:01:04.280 --> 01:01:06.970
or onto their applications folder,
more likely.

01:01:06.970 --> 01:01:09.580
Or you can have an installer package.

01:01:09.580 --> 01:01:11.680
MacÂ OSÂ X does have a built-in installer.

01:01:11.680 --> 01:01:13.080
Let's take a look at that.

01:01:13.100 --> 01:01:17.370
Keeping in mind simplicity,
drag and drop is the preferred

01:01:17.490 --> 01:01:19.180
way when you can do it.

01:01:19.640 --> 01:01:23.440
Because of the bundled technology,
you can put the code, the resources,

01:01:23.570 --> 01:01:27.140
any kind of plug-ins that you need,
help pages, documentation,

01:01:27.140 --> 01:01:28.200
all those sorts of things.

01:01:28.200 --> 01:01:30.020
You can actually put that
into a single bundle.

01:01:30.020 --> 01:01:33.290
iWork, for example,
puts even the templates,

01:01:33.450 --> 01:01:36.160
localized templates inside of the bundle.

01:01:36.240 --> 01:01:40.120
So you can have a single
drag and drop application.

01:01:40.120 --> 01:01:46.740
And that's fairly easy
for users to understand.

01:01:46.760 --> 01:01:50.360
They can also drag it to the
trash if they don't want it,

01:01:50.360 --> 01:01:50.360
those kinds of things.

01:01:50.360 --> 01:01:50.360
So for simplicity,
robustness reasons and flexibility,

01:01:50.360 --> 01:01:54.080
do drag and drop install
if you can at all do it.

01:01:54.080 --> 01:01:56.350
And one way to do drag and
drop and still have a nice

01:01:56.380 --> 01:01:58.880
experience is to use a disk image.

01:01:58.880 --> 01:02:03.220
You can create a disk image and put
your application in the disk image.

01:02:03.300 --> 01:02:07.190
You can add customized compositions and
custom artwork in the background that,

01:02:07.190 --> 01:02:09.980
for example, says, you know,
drag this icon to the application

01:02:09.980 --> 01:02:13.290
folder with your branding,
that kind of thing.

01:02:13.450 --> 01:02:16.230
The contents are compressed and
users can mount the disk image

01:02:16.250 --> 01:02:19.560
on the desktop and access the
contents without decompressing it.

01:02:20.340 --> 01:02:23.180
Disk images are also great for
Internet travel because they don't

01:02:23.180 --> 01:02:25.920
have resource forks or metadata
or any of that kind of stuff that

01:02:25.920 --> 01:02:27.700
tends to disappear out in the ether.

01:02:27.700 --> 01:02:30.660
So they're just a flat file and
all the goodies are contained

01:02:30.660 --> 01:02:32.210
inside of the contents of it.

01:02:32.260 --> 01:02:35.690
This may be a new concept.

01:02:35.940 --> 01:02:38.510
Well, it's a fairly familiar
concept on Windows World,

01:02:38.510 --> 01:02:38.850
too.

01:02:38.850 --> 01:02:41.180
I think there's ISO, some other formats.

01:02:41.180 --> 01:02:44.940
But on Mac, it's typically called a DMG,
disk image format.

01:02:44.940 --> 01:02:49.180
There's something interesting also
called Internet-enabled disk images.

01:02:50.320 --> 01:02:51.880
So you can have disk
images that can contain,

01:02:51.950 --> 01:02:53.250
for example, a license agreement.

01:02:53.350 --> 01:02:56.750
And when the user goes to access
the contents of the disk image,

01:02:56.750 --> 01:03:00.400
the license agreement is shown
and they can agree or disagree.

01:03:00.400 --> 01:03:03.440
And, of course, it only opens up if they
agree to the license.

01:03:03.440 --> 01:03:06.440
So that might be a good way if
you want to have some kind of open

01:03:06.440 --> 01:03:09.540
source license or a commercial
license on the disk image.

01:03:09.900 --> 01:03:15.080
There's also automatic -- optional
automatic extract and discard a disk

01:03:15.080 --> 01:03:19.940
image for maybe novice users who
don't even know what a disk image

01:03:19.940 --> 01:03:20.300
is but just want to know what it is.

01:03:20.300 --> 01:03:28.010
So you can have disk images that are just
a little bit more complex and you just

01:03:28.010 --> 01:03:32.140
want the icon to show up on the screen.

01:03:32.490 --> 01:03:33.570
So how do you create one?

01:03:33.690 --> 01:03:34.600
Well, there's disk utility.

01:03:34.600 --> 01:03:37.180
That's a graphical utility
that's on the MacÂ OS,

01:03:37.180 --> 01:03:39.060
not even the developer tools.

01:03:39.060 --> 01:03:41.390
That's actually installed
with MacÂ OS by default.

01:03:41.450 --> 01:03:44.940
But there's also command line utility,
and that's extra interesting from Xcode.

01:03:44.940 --> 01:03:46.600
I mentioned targets earlier.

01:03:46.600 --> 01:03:49.570
One thing I didn't mention is,
besides building an application

01:03:49.570 --> 01:03:52.130
or a plug-in or a framework,
a target could be set up to

01:03:52.130 --> 01:03:55.160
just invoke a shell script,
and that shell script,

01:03:55.160 --> 01:03:58.760
or indeed any script, Ruby script,
Python script, could do anything.

01:03:58.760 --> 01:04:03.340
So you could set up an Xcode
target to invoke this HDI utility.

01:04:03.520 --> 01:04:06.960
You'll find lots of documentation
about that in the developer pages.

01:04:06.960 --> 01:04:10.030
And then you could that way
create a disk image automatically

01:04:10.030 --> 01:04:10.970
as part of your build.

01:04:11.020 --> 01:04:12.570
So that's a great way to do that.

01:04:14.640 --> 01:04:17.760
If you don't want to create a disk image,
you don't want to sort of go

01:04:17.760 --> 01:04:20.830
branding maybe isn't that important,
you can just simply zip

01:04:20.830 --> 01:04:22.590
up your built application.

01:04:22.750 --> 01:04:27.580
Just create a zip file from it,
select and finder, say compress,

01:04:27.580 --> 01:04:28.590
and then distribute that.

01:04:28.680 --> 01:04:32.150
That's also compressed and it's
about as standard as it gets.

01:04:32.280 --> 01:04:34.560
Most people have heard of that.

01:04:34.730 --> 01:04:37.190
There are times when it's
appropriate to use the installer,

01:04:37.190 --> 01:04:41.350
and if you need to use it,
by all means do.

01:04:41.370 --> 01:04:43.240
If drag and drop doesn't work for you,
for example,

01:04:43.240 --> 01:04:47.440
you need to install a kernel extension,
spelled correctly with an S, actually,

01:04:47.440 --> 01:04:51.160
but extension, launch daemons,
other kinds of things.

01:04:51.160 --> 01:04:54.280
You may want to install specialized
things in the file system.

01:04:54.280 --> 01:04:56.400
In that case,
go ahead and use an installer package.

01:04:56.400 --> 01:04:59.420
There's a great tool that's
called Package Maker,

01:04:59.420 --> 01:05:02.800
and that's in the utilities
folder of the developer folder.

01:05:02.920 --> 01:05:07.340
And that lets you build up the
whole workflow for where you see the

01:05:07.510 --> 01:05:11.140
welcome screen to the license screen,
maybe options for installing

01:05:11.150 --> 01:05:13.780
optional features,
those kinds of things.

01:05:13.780 --> 01:05:14.800
It's a great tool.

01:05:14.800 --> 01:05:17.260
There's a command line
equivalent of that,

01:05:17.260 --> 01:05:21.020
and that's called PKG Util, and that,
again, can be invoked from a

01:05:21.020 --> 01:05:22.830
shell script within Xcode.

01:05:22.840 --> 01:05:27.710
I mentioned these things,
shell scripts being invoked from Xcode.

01:05:28.020 --> 01:05:31.040
There are some great sessions on
Xcode introducing you to how to create

01:05:31.040 --> 01:05:34.390
complex projects and how to really
take advantage of the build system,

01:05:34.400 --> 01:05:37.210
and I encourage you to go to that
to see more about how to evoke these

01:05:37.210 --> 01:05:40.100
kinds of things from the build system.

01:05:41.960 --> 01:05:46.100
So in summary, MacÂ OSÂ X and iPhone OS,
they provide a lot of functionality.

01:05:46.150 --> 01:05:48.620
And if you're coming from
Eclipse or Visual Studio,

01:05:48.730 --> 01:05:51.510
you're not only used to a different IDE,
but you're also used to a different

01:05:51.520 --> 01:05:54.390
set of libraries and frameworks,
maybe a whole different way

01:05:54.440 --> 01:05:55.990
of structuring your program.

01:05:56.000 --> 01:06:00.090
So hopefully we've introduced in
this session some of the differences

01:06:00.130 --> 01:06:02.380
and also some of the similarities.

01:06:02.380 --> 01:06:05.090
In some cases,
the difference is only terminology.

01:06:05.090 --> 01:06:07.840
For example,
we use the term bundle on MacÂ OSÂ X.

01:06:08.270 --> 01:06:10.580
Well, it's kind of like a jar file or
it's kind of like an assembly.

01:06:10.580 --> 01:06:13.510
It just packages up all the
stuff that is needed for,

01:06:13.510 --> 01:06:19.480
let's say, an application to access its
resources and those kinds of things.

01:06:19.480 --> 01:06:22.120
So some of the concepts are different.

01:06:22.120 --> 01:06:24.600
We have lots of good documentation.

01:06:24.600 --> 01:06:26.540
There's also good sessions.

01:06:26.650 --> 01:06:29.090
We'll provide some links to that.

01:06:29.140 --> 01:06:31.510
And sometimes the only
difference is the terminology.

01:06:31.520 --> 01:06:33.320
OS X overview.

01:06:33.320 --> 01:06:38.150
There's an Xcode overview and a
MacÂ OSÂ X as well as iPhone OS overview.

01:06:38.160 --> 01:06:40.760
So there's a lot of good
reviews that are really good.

01:06:40.800 --> 01:06:42.040
Xcode's welcome panel.

01:06:42.050 --> 01:06:42.850
I showed that.

01:06:42.850 --> 01:06:45.960
There's a lot of good information
accessible right off of that,

01:06:45.960 --> 01:06:48.200
as well as many sessions here at WWDC.

01:06:48.340 --> 01:06:52.200
I should say,
here are some of the related sessions.

01:06:52.200 --> 01:06:55.920
I'll leave the slide
up for a few moments.

01:06:55.920 --> 01:06:59.590
I'd like to bring up Michael Jurvets
on stage at this point.

01:06:59.630 --> 01:07:01.820
We're going to go to Q&A here.

01:07:01.840 --> 01:07:04.500
We're going to have just
a short time for Q&A,

01:07:04.500 --> 01:07:07.380
but come see us in the
lab for more questions.

01:07:07.380 --> 01:07:09.940
We wanted to make sure we
gave a complete overview here.