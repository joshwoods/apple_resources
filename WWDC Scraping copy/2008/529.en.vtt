WEBVTT

00:00:21.290 --> 00:00:25.310
Good morning,
and welcome to Address Book for iPhone.

00:00:25.440 --> 00:00:26.430
My name is Alex Aybes.

00:00:26.630 --> 00:00:29.180
I'm a software engineer
on the iPhone team.

00:00:29.250 --> 00:00:33.670
I'm going to talk to you about how
to put people in your application.

00:00:34.550 --> 00:00:37.320
So let's take a look at what
we're going to cover today.

00:00:37.410 --> 00:00:41.000
Obviously, we're going to cover
the Address Book APIs,

00:00:41.110 --> 00:00:45.090
both the low-level C APIs that are
exposed in the Address Book framework

00:00:46.020 --> 00:00:49.720
and the higher-level graphical
user interface bits that the

00:00:49.720 --> 00:00:51.220
Address Book UI framework exposes.

00:00:51.220 --> 00:00:57.060
The way we're going to go through those
APIs is actually through two scenarios.

00:00:57.060 --> 00:01:01.410
The first one is the social
networking website scenario.

00:01:02.520 --> 00:01:04.900
Maybe some of you in the
audience are working at Facebook,

00:01:05.010 --> 00:01:08.850
at LinkedIn,
or at the brand-new social website

00:01:09.510 --> 00:01:15.070
that -- and you want to create a great
native application for the iPhone.

00:01:15.600 --> 00:01:18.430
Some of the challenges with this
are you have people on the web,

00:01:18.520 --> 00:01:21.300
you have people on the phone, new user.

00:01:21.400 --> 00:01:23.100
New users have people on their phone.

00:01:23.100 --> 00:01:26.570
So you want to reconcile
those two sets of contacts.

00:01:26.680 --> 00:01:30.370
We're going to look at a number of
APIs that are available in the Address

00:01:30.370 --> 00:01:32.530
Book that will allow you to do this.

00:01:32.800 --> 00:01:36.020
The second example we're going
to look at today is the example

00:01:36.020 --> 00:01:38.390
of an existing application.

00:01:38.500 --> 00:01:42.710
You want to connect your
application more to users.

00:01:43.010 --> 00:01:48.470
And what better way is there than to
add their friends into your application?

00:01:48.590 --> 00:01:53.040
So we need to look at another
set of APIs and actually add

00:01:53.040 --> 00:01:55.380
people to the recipes application.

00:01:55.380 --> 00:01:57.930
You might have seen it in
a couple of other sessions.

00:01:58.760 --> 00:02:02.510
Before we dive into this,
a little heads up for the

00:02:02.510 --> 00:02:05.990
Mac OS X developers in the audience.

00:02:07.110 --> 00:02:13.970
The Address Book for the iPhone uses
the same data as the one on the desktop.

00:02:21.200 --> 00:02:21.490
We actually synchronize all of this data,
either through MobileMe or

00:02:21.490 --> 00:02:21.570
through iTunes.

00:02:21.570 --> 00:02:23.300
However, the APIs are new.

00:02:23.490 --> 00:02:26.760
Those are brand-new APIs that
were built for the iPhone.

00:02:26.900 --> 00:02:30.910
They share a lot of similarities
with the desktop APIs because

00:02:31.540 --> 00:02:34.550
they use the same data,
and the same engineers

00:02:34.560 --> 00:02:36.190
actually wrote them.

00:02:36.390 --> 00:02:39.440
But those are brand-new APIs,
especially when it comes to all

00:02:39.510 --> 00:02:41.860
the graphical user interface bits.

00:02:41.910 --> 00:02:45.730
Those are all view-control-based,
and they're, therefore,

00:02:45.730 --> 00:02:47.350
new to the iPhone.

00:02:47.950 --> 00:02:48.650
All right.

00:02:48.870 --> 00:02:51.390
Now that I've scared you a little bit,
let me reassure you,

00:02:51.390 --> 00:02:53.430
it's actually really easy.

00:02:53.540 --> 00:02:57.040
Ten lines of code, you can have Address
Book in your application.

00:02:57.170 --> 00:02:59.010
And for this,
I'm actually going to show you.

00:02:59.230 --> 00:03:01.620
So we're going to do the first demo now.

00:03:05.090 --> 00:03:09.130
There we have essentially the
navigation controller-based

00:03:09.420 --> 00:03:11.620
template project in Xcode.

00:03:11.780 --> 00:03:16.150
If I run this,
all I'm going to get is a window

00:03:16.390 --> 00:03:20.160
and a navigation controller,
a navigation bar at the top.

00:03:20.240 --> 00:03:20.530
All right.

00:03:20.710 --> 00:03:24.640
Let's actually add
Address Book into this.

00:03:25.790 --> 00:03:25.790
Let's go back to Xcode.

00:03:27.710 --> 00:03:30.220
Again, this is the application delegate.

00:03:30.370 --> 00:03:33.050
If you have not seen the
previous ViewController sessions,

00:03:33.160 --> 00:03:34.060
don't worry about it.

00:03:34.060 --> 00:03:36.840
We'll focus mostly on
the Address Book part,

00:03:36.940 --> 00:03:40.250
but I really encourage you to check out
the videos when they come out of the

00:03:40.250 --> 00:03:42.960
Understanding ViewController session.

00:03:43.060 --> 00:03:44.600
All right,
so the first thing we want to do

00:03:44.600 --> 00:03:49.730
in order to put a person in our
application is to create a person.

00:03:49.920 --> 00:03:52.960
I'm going to go through the address book
API fairly quickly in this first demo.

00:03:52.960 --> 00:03:56.490
We'll see them in more details later on.

00:03:58.970 --> 00:04:01.390
Why is the font size
not set on this machine?

00:04:01.520 --> 00:04:07.890
Ah, that's the next on the question.

00:04:07.960 --> 00:04:09.840
That's too bad.

00:04:13.830 --> 00:04:15.640
Thank you.

00:04:15.640 --> 00:04:18.690
And 18?

00:04:18.730 --> 00:04:20.920
Yes, make a copy.

00:04:20.920 --> 00:04:22.880
Great.

00:04:22.880 --> 00:04:22.880
Name.

00:04:24.030 --> 00:04:24.740
18.

00:04:25.180 --> 00:04:25.890
Okay.

00:04:25.910 --> 00:04:26.890
Is that better?

00:04:26.940 --> 00:04:27.900
All right.

00:04:27.900 --> 00:04:28.310
Thank you.

00:04:30.300 --> 00:04:33.860
That's one thing I didn't notice when
I was running through this earlier today.

00:04:33.880 --> 00:04:34.960
All right.

00:04:34.960 --> 00:04:37.960
So first thing we do
here is create a person.

00:04:38.100 --> 00:04:40.860
Again,
don't worry too much about the APIs.

00:04:40.890 --> 00:04:43.290
We'll cover them in more detail later.

00:04:43.400 --> 00:04:44.700
So we create a person.

00:04:44.720 --> 00:04:47.330
Then we're going to set
its name and its last name,

00:04:47.330 --> 00:04:50.070
our dear friend John Appleseed,
always there.

00:04:51.040 --> 00:04:53.900
Now that we have a person,
we need to create a view

00:04:53.900 --> 00:04:56.230
controller to present that person.

00:04:56.310 --> 00:05:00.690
The Address Book UI framework exposes
the A/B person view controller.

00:05:01.400 --> 00:05:03.260
So we're going to use that.

00:05:03.310 --> 00:05:06.240
We're going to set its
displayed person property to

00:05:06.240 --> 00:05:08.590
be the person we just created.

00:05:26.830 --> 00:05:26.830
And that's really all we
need for the View Controller.

00:05:26.830 --> 00:05:26.830
Next, we're going to need to push it
onto our Navigation Controller.

00:05:26.830 --> 00:05:26.830
I mentioned this is a Navigation
Controller-based application.

00:05:26.830 --> 00:05:26.830
And you can see the
Navigation Controller is

00:05:26.830 --> 00:05:26.830
actually created right there.

00:05:26.830 --> 00:05:26.830
So we're going to push the
Person View Controller onto

00:05:26.830 --> 00:05:26.830
our Navigation Controller.

00:05:27.540 --> 00:05:30.120
And for some reason,
I decided to animate this.

00:05:30.320 --> 00:05:31.400
This is probably not right.

00:05:31.420 --> 00:05:33.700
We don't want to animate it.

00:05:51.710 --> 00:05:51.710
So, navigation controller,
push view controller.

00:05:51.710 --> 00:05:51.710
Once that's done, release our memory.

00:05:51.710 --> 00:05:51.710
The person view controller is
owned by the navigation controller.

00:05:51.710 --> 00:05:51.710
We don't need it anymore.

00:05:51.710 --> 00:05:51.710
And the person has actually
been set on a view controller.

00:05:52.120 --> 00:05:54.590
So let's run this.

00:05:54.700 --> 00:05:55.200
And there we go.

00:05:55.230 --> 00:05:59.990
We have a card,
a person view in our application.

00:06:00.160 --> 00:06:01.600
You can drag it around.

00:06:01.600 --> 00:06:02.940
It's kind of cute.

00:06:03.430 --> 00:06:07.520
It's kind of cute, but at the same time,
I mean, if you've written table views,

00:06:07.540 --> 00:06:08.940
it's not that hard to do.

00:06:08.950 --> 00:06:13.400
Let's see one other thing we can actually
do with that person view controller.

00:06:13.440 --> 00:06:17.480
Another property of the person view
controller is the allows editing.

00:06:17.540 --> 00:06:21.030
It's a Boolean that tells the view
controller whether or not the user

00:06:21.030 --> 00:06:22.940
should be allowed to edit that person.

00:06:22.960 --> 00:06:24.540
We set this and we run.

00:06:24.540 --> 00:06:28.160
Notice there's a little
edit button there.

00:06:28.330 --> 00:06:31.190
When you press that button,
we actually bring in change the

00:06:31.190 --> 00:06:35.840
content of the person view controller,
and you can actually go ahead and

00:06:35.840 --> 00:06:38.240
enter a new phone number if you'd like.

00:06:38.290 --> 00:06:40.980
Select the label.

00:06:40.980 --> 00:06:43.050
You can cancel out of this.

00:06:43.060 --> 00:06:44.130
You can select a photo.

00:06:44.300 --> 00:06:51.850
I'm going to actually put a photo
on John's card if I can find one.

00:06:51.850 --> 00:06:51.850
There we go.

00:06:52.290 --> 00:06:57.490
And you get all this behavior for
free with the Person View Controller.

00:06:57.670 --> 00:07:01.990
So again, looking back at the code,
we have...

00:07:02.230 --> 00:07:04.160
356789.

00:07:04.260 --> 00:07:08.180
Nine lines of address book-related code,
and that's all we need.

00:07:08.300 --> 00:07:10.990
And we have a lot of the

00:07:19.690 --> 00:07:19.690
A lot of the flow of the
Address Book application

00:07:19.690 --> 00:07:19.690
directly into your application.

00:07:19.690 --> 00:07:19.690
All right.

00:07:19.690 --> 00:07:19.690
Let's go back to slides.

00:07:21.770 --> 00:07:24.030
So what did we just see here?

00:07:24.050 --> 00:07:29.860
Again, the very simple,
simple hello world of the Address Book.

00:07:29.860 --> 00:07:32.660
You create a person,
set a couple of properties,

00:07:32.720 --> 00:07:35.980
create an A/B person view controller,
set the person you're going to

00:07:35.980 --> 00:07:39.510
display in that view controller,
and then you push it onto

00:07:39.510 --> 00:07:41.040
the navigation stack.

00:07:41.100 --> 00:07:45.540
And if you want to allow editing, well,
you get that for free.

00:07:45.540 --> 00:07:49.950
The user has access to the same flow
we expose in the contacts application,

00:07:49.950 --> 00:07:51.700
in the phone application.

00:07:52.260 --> 00:07:53.560
All right, great.

00:07:53.560 --> 00:07:54.180
That was cute.

00:07:54.220 --> 00:07:56.640
A little 10 lines of code,
a little hello world.

00:07:56.680 --> 00:07:58.790
Let's go a little beyond that.

00:07:59.570 --> 00:08:02.060
Let's go back to our
social networking example.

00:08:02.360 --> 00:08:08.800
Again,
you work for a social networking website.

00:08:08.800 --> 00:08:08.800
You want to bring a

00:08:22.800 --> 00:08:22.800
So we're going to look at a lot of
address book APIs that are also relevant

00:08:22.800 --> 00:08:22.800
if you're not doing social networking.

00:08:22.800 --> 00:08:22.800
Don't worry.

00:08:22.800 --> 00:08:22.800
You don't need to leave
the room quite yet.

00:08:22.800 --> 00:08:22.800
So social networking website.

00:08:22.800 --> 00:08:22.800
You have people on the Web.

00:08:38.390 --> 00:08:38.390
So we're going to look at what
it takes to reconcile those two

00:08:38.390 --> 00:08:38.390
groups of people and actually
display them in your application.

00:08:38.780 --> 00:08:41.340
In this case, we're going to display
a list of the people,

00:08:41.370 --> 00:08:46.590
both the ones from the web and the
ones that were already on the phone.

00:08:46.790 --> 00:08:51.290
Let's look at the different steps
we need to go through to do this.

00:08:51.410 --> 00:08:55.590
The first one is going to be
downloading those people from the web.

00:08:55.760 --> 00:08:58.100
I'm not going to go into too much detail.

00:08:58.100 --> 00:09:00.290
Actually,
I'm going to skip that part entirely,

00:09:00.290 --> 00:09:04.900
because it's not really relevant
to the actual Address Book API.

00:09:04.900 --> 00:09:08.230
So I'm going to let you do that one.

00:09:08.350 --> 00:09:11.930
The next step is going to be to search.

00:09:12.070 --> 00:09:13.940
What I mean by that is we
have people from the web.

00:09:14.120 --> 00:09:15.760
We're going to search
the local address book,

00:09:15.760 --> 00:09:20.200
the user's address book on the iPhone,
for people who match those

00:09:20.210 --> 00:09:23.790
people we found from the web.

00:09:23.790 --> 00:09:23.790
Once we have that,

00:09:24.100 --> 00:09:28.260
We're going to update the people
we found locally on the phone.

00:09:28.480 --> 00:09:30.680
We're going to update them with
extra information that came

00:09:31.240 --> 00:09:35.740
from the social networking site,
from our little web service.

00:09:35.820 --> 00:09:38.690
Once we update those people,
we actually need to display

00:09:38.690 --> 00:09:41.020
them and show them to the user.

00:09:41.460 --> 00:09:42.410
Let's take a look at the first step.

00:09:42.570 --> 00:09:46.020
Again, the first step is actually
the second step on that slide,

00:09:46.020 --> 00:09:47.280
searching.

00:09:48.180 --> 00:09:52.020
In order to search the address book,
all you really need to do is to get the

00:09:52.020 --> 00:09:55.480
address book and then search through it.

00:09:55.510 --> 00:09:56.580
It's pretty simple.

00:09:57.040 --> 00:09:59.020
And then two lines of code to do it.

00:09:59.110 --> 00:09:59.490
Exactly that.

00:09:59.630 --> 00:10:03.090
You create an address book instance,
and then you use this long

00:10:03.480 --> 00:10:06.340
method to actually search for
people in that address book.

00:10:06.340 --> 00:10:09.300
A/B address book copy people with name.

00:10:09.540 --> 00:10:13.370
I'm going to talk a little more about
the address book create in a second,

00:10:13.410 --> 00:10:17.140
but I'm going to just mention
a couple things about this

00:10:17.140 --> 00:10:19.600
search function right there.

00:10:19.670 --> 00:10:22.800
It's actually really meant to --
this is what we use when you're

00:10:22.800 --> 00:10:24.580
typing in the search field.

00:10:25.060 --> 00:10:29.280
The name in this case is something
-- is a language string that

00:10:29.280 --> 00:10:31.480
the user might have typed.

00:10:31.550 --> 00:10:32.860
So it could be multiple words.

00:10:32.920 --> 00:10:36.730
And we'll try to match that and
do our best to figure out who in

00:10:36.730 --> 00:10:39.280
the address book actually matched
all those words that I've done.

00:10:39.280 --> 00:10:41.270
So it's really simple to use.

00:10:41.270 --> 00:10:44.100
You don't really need to
worry about what it does.

00:10:44.110 --> 00:10:46.460
You pass in the name,
and we'll give you a list of people

00:10:46.460 --> 00:10:50.050
who actually matched that name.

00:10:50.580 --> 00:10:53.840
The first line is pretty simple,
but there's quite a

00:10:53.840 --> 00:10:55.000
bit to cover in there.

00:10:55.000 --> 00:11:00.990
So let's go ahead and look at A/B Address
Book and this A/B Address Book Create.

00:11:01.400 --> 00:11:07.120
So the way we represent the address book
on the phone is through this object,

00:11:07.240 --> 00:11:08.800
AB Address Book.

00:11:08.870 --> 00:11:11.210
It's a core foundation type.

00:11:11.600 --> 00:11:14.800
CF type, for short, the address book ref.

00:11:15.110 --> 00:11:17.660
If you're not too familiar with
core foundation and you're more

00:11:17.760 --> 00:11:20.330
familiar with the foundation side,
the Objective-C side of it,

00:11:20.420 --> 00:11:25.030
just remember core foundation types are
actually bridged to foundation types.

00:11:25.040 --> 00:11:32.810
So you can actually use them as
if they were Objective-C types

00:11:32.810 --> 00:11:33.960
for things like retaining,
releasing, auto-releasing.

00:11:35.280 --> 00:11:38.470
All right, so what does this API Address
Book object give you?

00:11:38.670 --> 00:11:42.240
It's actually the central
point for accessing people.

00:11:42.310 --> 00:11:45.240
It's really whenever you
need to deal with people,

00:11:45.280 --> 00:11:48.310
this is the object you need to use.

00:11:48.500 --> 00:11:56.590
: You're going to get people from it,
search the address book for people,

00:11:56.590 --> 00:11:56.590
et cetera, et

00:11:57.610 --> 00:12:03.700
If you're familiar with the naming
conventions of Core Foundation,

00:12:03.700 --> 00:12:07.000
you probably noticed here that
we're actually creating a new

00:12:07.060 --> 00:12:09.680
instance of A/B Address Book.

00:12:09.780 --> 00:12:12.390
And every time you call this function,
A/B Address Book create,

00:12:12.390 --> 00:12:15.350
we're actually going to
create a new instance of it.

00:12:16.030 --> 00:12:20.540
The important thing to remember in
this case is that it always accesses

00:12:20.540 --> 00:12:25.160
the same address book database,
the user's address book database.

00:12:25.220 --> 00:12:29.050
There are reasons why you would want to
actually create multiple instances of it,

00:12:29.050 --> 00:12:31.740
and we'll go over those
reasons a little later,

00:12:31.740 --> 00:12:35.210
but just remember,
it's always the same user

00:12:35.210 --> 00:12:37.110
database of contacts.

00:12:38.400 --> 00:12:39.400
All right.

00:12:39.400 --> 00:12:39.640
I just mentioned contacts.

00:12:39.640 --> 00:12:41.380
So we have an address book.

00:12:41.670 --> 00:12:44.000
Now we actually need to get people.

00:12:44.000 --> 00:12:47.030
How do we represent people on the phone?

00:12:47.690 --> 00:12:53.100
To represent a person,
we have another CF type, the AB Record.

00:12:53.960 --> 00:12:59.100
The A/B record is a
container for properties,

00:12:59.150 --> 00:13:03.130
things like the first name,
the last name, also the image associated

00:13:03.430 --> 00:13:06.860
with that contact,
as well as other properties

00:13:06.910 --> 00:13:10.050
like phone numbers,
email addresses, all you expect for a

00:13:10.050 --> 00:13:14.620
contact to be able to,
you know, call them, email them,

00:13:14.620 --> 00:13:15.960
et cetera.

00:13:15.960 --> 00:13:19.490
So let's take a look at those
properties in a little more detail.

00:13:21.550 --> 00:13:24.960
All the properties that we
expose on the record can have

00:13:25.440 --> 00:13:27.840
a number of different types.

00:13:27.990 --> 00:13:31.310
For example,
the name properties are all strings,

00:13:31.460 --> 00:13:32.640
obviously.

00:13:32.760 --> 00:13:37.240
The date properties, like the birthday,
are date types.

00:13:37.240 --> 00:13:42.960
And things like images are data,
CFData objects.

00:13:42.980 --> 00:13:47.780
And dictionaries we use
to represent addresses.

00:13:47.820 --> 00:13:53.900
All those different properties
actually give you CF types again.

00:13:53.960 --> 00:13:55.760
CFString, CFDate, CFDictionary.

00:13:56.290 --> 00:14:00.540
And if you are more
comfortable in Objective-C,

00:14:00.580 --> 00:14:03.880
they're all toll-free bridge to
the equivalent Objective-C objects.

00:14:04.050 --> 00:14:08.500
So NSString, NSDate, NSDictionary,
etc., etc.

00:14:09.330 --> 00:14:11.630
So this is good for
the simple properties.

00:14:11.880 --> 00:14:14.890
Some properties actually
have multiple values.

00:14:14.980 --> 00:14:17.400
You obviously can have
multiple phone numbers.

00:14:17.400 --> 00:14:20.000
I think I have a stack of
like 12 iPhones on my desk,

00:14:20.000 --> 00:14:24.490
and I need to keep track of every
single phone number in there.

00:14:25.090 --> 00:14:28.050
So we're going to talk to
you about this a little more.

00:14:28.350 --> 00:14:31.550
If you want the exhaustive list of all
the properties available in the person,

00:14:31.650 --> 00:14:32.570
go check out the header.

00:14:32.660 --> 00:14:35.580
You actually have all the
properties listed in there,

00:14:35.580 --> 00:14:39.560
as well as the types,
whether they're strings, dates,

00:14:39.560 --> 00:14:40.670
et cetera.

00:14:41.130 --> 00:14:44.600
Let's take a closer look
at the simple properties,

00:14:44.600 --> 00:14:46.850
the single value properties.

00:14:47.540 --> 00:14:52.220
Some examples, again, first name,
last name, birthday, there's a lot more.

00:14:52.300 --> 00:14:53.720
Core Foundation types.

00:14:53.910 --> 00:14:56.480
So retain and release them.

00:14:56.480 --> 00:14:59.620
The way you access them in the code is by

00:14:59.860 --> 00:15:03.270
To get the value, pull this function,
ab_record_copy_value.

00:15:03.490 --> 00:15:05.600
And this is what it looks like in code.

00:15:05.630 --> 00:15:08.370
In this case,
we call ab_record_copy_value,

00:15:08.580 --> 00:15:12.900
passing in the person and the name of
the property we want to actually access.

00:15:13.150 --> 00:15:16.890
In this case,
the kab_person_first_name property

00:15:16.890 --> 00:15:18.660
that will give you the first name.

00:15:18.750 --> 00:15:20.040
And it's a string.

00:15:20.040 --> 00:15:24.690
So we'll get that string out of there.

00:15:24.690 --> 00:15:24.690
In order to set a value,

00:15:24.980 --> 00:15:28.400
A very similar function,
AB record set value.

00:15:28.400 --> 00:15:32.510
And what this looks like in code,
here we are sending the birthday.

00:15:33.020 --> 00:15:35.910
So the first thing we're going to do,
create a date.

00:15:35.970 --> 00:15:39.010
Apparently, this person is born today,
right now.

00:15:39.010 --> 00:15:40.600
So and then we set the value.

00:15:40.740 --> 00:15:41.860
AB record set value.

00:15:41.980 --> 00:15:43.290
We pass in the person.

00:15:43.290 --> 00:15:45.840
We pass in the actual
property we want to set,

00:15:45.840 --> 00:15:47.430
the birthday in this case.

00:15:47.450 --> 00:15:50.220
We pass in the date we want
to set as the birthday.

00:15:50.450 --> 00:15:52.120
And the last argument is an error.

00:15:52.300 --> 00:15:55.750
You can get an error back in case
something went wrong or in case

00:15:55.950 --> 00:15:59.650
the actual data storage we're using
for this particular contact does

00:15:59.720 --> 00:16:02.410
not support a particular property.

00:16:02.900 --> 00:16:05.800
This is relevant when
you're talking to Exchange.

00:16:05.800 --> 00:16:10.530
It supports only a certain
number of email addresses,

00:16:10.530 --> 00:16:10.530
for example.

00:16:12.130 --> 00:16:14.390
Single-Value Properties, fairly simple.

00:16:14.520 --> 00:16:17.340
Let's take a look at the Multi-Value
Properties I talked about earlier.

00:16:17.420 --> 00:16:21.790
Phone numbers, email addresses, URLs,
etc.

00:16:22.860 --> 00:16:28.400
Really, you access them the same way you
access single-value properties,

00:16:28.440 --> 00:16:32.840
using AB record copy value
and AB record set value.

00:16:32.920 --> 00:16:35.330
The difference,
the big difference here is that

00:16:35.330 --> 00:16:39.160
instead of sending a string directly,
you're actually going to be getting and

00:16:39.160 --> 00:16:42.180
setting this AB multivalue ref object.

00:16:42.410 --> 00:16:44.200
Again, core foundation type.

00:16:44.270 --> 00:16:46.670
I'm going to say that all the time.

00:16:47.070 --> 00:16:53.400
That AB Multivalue is actually a
container for labels and values.

00:16:53.620 --> 00:16:54.830
What do I mean by that?

00:16:54.930 --> 00:16:59.580
If you look at the little diagram here,
we have an AB Multivalue ref

00:16:59.750 --> 00:17:05.790
that's for phone numbers.

00:17:06.990 --> 00:17:06.990
This AB Multivalue ref has a number of

00:17:07.100 --> 00:17:19.700
[Transcript missing]

00:17:20.190 --> 00:17:22.760
So you have two home phone numbers.

00:17:22.760 --> 00:17:28.800
The label is not a key in the
multivalue in the database sense.

00:17:28.800 --> 00:17:28.800
You can have however many

00:17:29.190 --> 00:17:31.280
is the founder of the Google Home Office.

00:17:31.290 --> 00:17:33.470
He's been working on
a lot of new features,

00:17:33.470 --> 00:17:34.150
including

00:17:34.680 --> 00:17:38.090
All right, so how do we actually
access the multivalue?

00:17:38.200 --> 00:17:43.880
There are four different important
functions to use in the multivalue.

00:17:43.980 --> 00:17:47.300
The first one, I mentioned,
we have multiple items in the multivalue,

00:17:47.300 --> 00:17:51.260
so you probably want to get the
count of values in that multivalue.

00:17:51.440 --> 00:17:57.720
For that, simple function,
AB Multivalue Get Count will

00:17:57.720 --> 00:17:59.360
give you back a CF index,
which is just an integer.

00:17:59.890 --> 00:18:03.840
The next thing we probably want
to look at is the actual value.

00:18:04.020 --> 00:18:08.400
So to get the value, ABMultiValue,
copy value at index.

00:18:08.550 --> 00:18:09.200
Again, fairly simple.

00:18:09.200 --> 00:18:13.640
You pass in the multi-value,
pass in the index you're interested in,

00:18:13.660 --> 00:18:15.130
and you get a value.

00:18:15.210 --> 00:18:18.420
This value is a CF type,
meaning depending on the

00:18:18.630 --> 00:18:23.870
actual property you asked for,
you're going to get strings or dates,

00:18:23.870 --> 00:18:25.010
et cetera.

00:18:26.550 --> 00:18:30.780
The next item we saw
in there was the label.

00:18:30.850 --> 00:18:34.900
To get the label,
very similar to the way we got the value.

00:18:34.970 --> 00:18:38.140
AB Multi-Value Copy Label-Write Index.

00:18:39.050 --> 00:18:40.900
: Hi, guys.

00:18:40.900 --> 00:18:41.400
I'm Alex Aybes.

00:18:41.440 --> 00:18:41.900
I'm the founder of Google.

00:18:41.900 --> 00:18:45.030
And I'm going to talk about how
to use Google's mobile phone to

00:18:45.420 --> 00:18:47.770
create a new contact information.

00:18:47.930 --> 00:18:50.900
So, let's get started.

00:18:50.900 --> 00:18:54.900
So, let's start with the first item,
which is the identifier.

00:18:54.900 --> 00:18:56.900
And the label is always a string.

00:18:56.900 --> 00:19:00.900
There's a number of predefined labels,
like home, work, other.

00:19:00.900 --> 00:19:04.950
And depending on the actual property,
we have some extra ones,

00:19:04.960 --> 00:19:05.900
like mobile phone, et cetera.

00:19:05.900 --> 00:19:07.120
So, passing the label,

00:19:08.050 --> 00:19:12.500
This is important because the index
is not actually guaranteed to change.

00:19:12.600 --> 00:19:14.270
It could be changed by sync.

00:19:14.350 --> 00:19:17.340
It could be changed in a
number of different situations.

00:19:17.460 --> 00:19:20.950
The multivalues will be --
the entries in the multivalue

00:19:20.950 --> 00:19:23.140
might actually be reordered.

00:19:23.210 --> 00:19:27.840
So if you want to keep track of a
particular entry in that multivalue,

00:19:27.970 --> 00:19:29.960
use the identifier.

00:19:30.100 --> 00:19:34.820
And the way this works, very similar,
AB Multivalue get identifier at index.

00:19:35.090 --> 00:19:37.090
The identifier is
actually just an integer,

00:19:37.220 --> 00:19:41.260
but that one is actually guaranteed
to stay constant across saves,

00:19:41.570 --> 00:19:42.330
et cetera.

00:19:43.740 --> 00:19:44.600
All right.

00:19:44.600 --> 00:19:46.360
With that,
we have a lot of the tools we need

00:19:46.360 --> 00:19:49.650
to actually do the second step,
the updating.

00:19:49.810 --> 00:19:53.720
But there's a couple things
we actually need to do on

00:19:53.790 --> 00:19:56.200
top of what we've just seen.

00:19:56.600 --> 00:19:59.780
The first thing we need to do in
order to update that local record

00:19:59.780 --> 00:20:04.990
with the data we got from our web
service is to mutate the multivalue.

00:20:05.120 --> 00:20:07.060
Multivalues,
when you get them from the address book,

00:20:07.060 --> 00:20:08.590
are not actually mutable.

00:20:08.710 --> 00:20:13.710
You cannot add or
remove labels from them.

00:20:14.580 --> 00:20:19.130
So you actually need to, like I said,
mutate the value.

00:20:19.310 --> 00:20:22.800
Once you've mutated the value,
you-- I'm sorry.

00:20:22.800 --> 00:20:28.030
Once you've mutated the multivalue,
you can add a value to it, add an entry.

00:20:28.210 --> 00:20:29.600
The next step is actually important.

00:20:29.600 --> 00:20:34.580
You actually need to get this multivalue
and set it back on the person.

00:20:34.690 --> 00:20:39.440
Otherwise, you're just changing a copy
of the data in that person.

00:20:39.540 --> 00:20:41.540
You actually need to set
it back on the person.

00:20:41.640 --> 00:20:43.340
Once you've done that,
you probably want to save

00:20:43.340 --> 00:20:46.730
so that users can access the
data in other applications.

00:20:48.750 --> 00:20:50.190
The way this looks in code,
you can see at the bottom,

00:20:50.190 --> 00:20:53.700
the first thing we do is get the
value from the existing person,

00:20:53.700 --> 00:20:57.730
just in case they already had,
in this particular case, URLs.

00:20:57.740 --> 00:21:00.980
As I mentioned,
we create a mutable copy with

00:21:00.990 --> 00:21:06.730
abmultivalue create mutable copy,
passing the original multivalue,

00:21:07.080 --> 00:21:09.740
get a mutable multivalue.

00:21:10.090 --> 00:21:14.940
On that mutable multivalue,
we called abmultivalue

00:21:14.940 --> 00:21:14.940
add value and label.

00:21:15.570 --> 00:21:20.840
Pass in the mutable multivalue,
the actual URL we want to set,

00:21:21.250 --> 00:21:24.330
we want to add, the label,

00:21:25.020 --> 00:21:27.350
And the last argument in
this case we actually ignore.

00:21:27.430 --> 00:21:29.500
It's an identifier that
can be passed back to you.

00:21:29.500 --> 00:21:32.320
This is the identifier that you
can hold onto when you want to

00:21:32.790 --> 00:21:35.530
access that particular entry again.

00:21:35.660 --> 00:21:40.000
After that,
we set the value on the person and save.

00:21:40.350 --> 00:21:40.760
So that's it.

00:21:40.760 --> 00:21:43.000
That's all we need to do for step two.

00:21:43.120 --> 00:21:45.670
Step three, if you remember,

00:21:46.380 --> 00:21:47.960
It's displaying.

00:21:48.110 --> 00:21:49.800
Kind of useful.

00:21:49.940 --> 00:21:53.140
In order to display
this list of contacts,

00:21:53.390 --> 00:21:54.960
We need to first sort them.

00:21:55.090 --> 00:21:59.940
We probably do want to put them in a
reasonable order rather than whatever

00:21:59.940 --> 00:22:03.660
order they were added in on the server.

00:22:04.060 --> 00:22:05.510
So we need to sort them.

00:22:05.660 --> 00:22:09.400
Then we need to actually get
a name that we can display.

00:22:10.100 --> 00:22:24.300
[Transcript missing]

00:22:26.680 --> 00:22:28.170
It's really simple.

00:22:28.410 --> 00:22:30.190
We made it really simple.

00:22:30.290 --> 00:22:32.930
We'll actually do most
of the sorting for you.

00:22:33.100 --> 00:22:35.030
And we'll take care of
different languages,

00:22:35.100 --> 00:22:36.390
et cetera, et cetera.

00:22:36.510 --> 00:22:39.060
So to do this, two simple functions.

00:22:39.130 --> 00:22:41.480
The A/B person gets sort ordering.

00:22:41.600 --> 00:22:44.970
That will actually get you
the user's preference for

00:22:45.470 --> 00:22:46.880
what order to sort people in.

00:22:47.290 --> 00:22:52.890
This is what they will actually set in
the preferences for their address book.

00:22:53.400 --> 00:22:56.690
The second function is actually
a CF comparator function,

00:22:56.720 --> 00:22:59.400
which means that it can be
reused in the ways we're going

00:22:59.400 --> 00:23:01.400
to see in the code in a second.

00:23:01.490 --> 00:23:06.660
That will actually compare two
persons and tell you which one's

00:23:06.660 --> 00:23:10.350
name comes first in the ordering.

00:23:10.550 --> 00:23:17.140
The way this looks like in code,
you get immutable array of people.

00:23:17.240 --> 00:23:21.710
Then we're going to create a range
because that's what we need to use later.

00:23:22.190 --> 00:23:23.980
And then,
this is the first interesting bit,

00:23:24.130 --> 00:23:26.590
we need to actually
get the sort ordering.

00:23:26.900 --> 00:23:30.100
For that, A/B person sort ordering,
the sort ordering,

00:23:30.230 --> 00:23:31.840
A/B person get sort ordering.

00:23:32.010 --> 00:23:35.600
Again, that gives you the user's
preference for the sort ordering.

00:23:35.760 --> 00:23:38.440
Then, and this is where the
actual sorting happens,

00:23:38.550 --> 00:23:43.080
call this handy function in CF,
CFArraySwordValues.

00:23:44.240 --> 00:23:48.600
You pass in the people,
the mutable array we just got earlier,

00:23:48.630 --> 00:23:51.650
the range of people you actually
want to sort in that array.

00:23:51.750 --> 00:23:53.510
In this particular case,
we want to sort all the

00:23:53.580 --> 00:23:55.800
people in the array,
so we're going to pass the full range.

00:23:56.150 --> 00:23:58.430
And then you pass in the
CF comparative function.

00:23:58.620 --> 00:24:02.510
Again, this is the address book
-- this is the function the

00:24:02.860 --> 00:24:06.320
address book framework exposes.

00:24:06.320 --> 00:24:06.340
You can use it as is.

00:24:07.980 --> 00:24:10.900
And last but not least,
it's actually really important,

00:24:11.030 --> 00:24:11.680
the context.

00:24:11.940 --> 00:24:14.980
This is a context that will be
passed back into the A/B person

00:24:14.980 --> 00:24:16.650
to compare people by name.

00:24:16.850 --> 00:24:20.370
That context has to be the sort ordering.

00:24:21.230 --> 00:24:24.610
It can be the user's
preference for a sort ordering,

00:24:24.610 --> 00:24:25.700
or it can be whatever sort ordering.

00:24:25.700 --> 00:24:28.480
If for some reason you actually
want to have your app display

00:24:28.480 --> 00:24:31.600
different sort ordering,
you can pass the sort ordering you want.

00:24:31.600 --> 00:24:34.090
But it has to be the sort ordering.

00:24:34.680 --> 00:24:36.040
That's sorting.

00:24:36.200 --> 00:24:39.230
Now, actually, one more thing.

00:24:39.600 --> 00:24:42.590
If you are allergic to C and
prefer to use Objective-C,

00:24:42.800 --> 00:24:43.710
this is what it looks like.

00:24:43.840 --> 00:24:48.190
You can pass the same function
to the sort using function

00:24:48.310 --> 00:24:51.440
method on an SMutable array.

00:24:51.560 --> 00:24:55.010
Again, the context still needs
to be the sort ordering.

00:24:55.300 --> 00:24:56.190
All right.

00:24:56.240 --> 00:24:57.360
That's it for sorting.

00:24:57.500 --> 00:25:00.990
So now let's take a look at
displaying and getting the name.

00:25:00.990 --> 00:25:03.760
So to do that, again,
we have a simple function that will

00:25:03.900 --> 00:25:09.250
extract all the bits and pieces you need
to build what we call the composite name.

00:25:09.250 --> 00:25:13.140
It's, you know,
the Alex Abas Senior Junior whatever.

00:25:13.250 --> 00:25:16.150
So it will take all the
different bits and pieces,

00:25:16.150 --> 00:25:18.050
put them in the right order.

00:25:18.160 --> 00:25:21.670
We'll also use the user's
preference for name formatting,

00:25:21.800 --> 00:25:24.850
meaning if the user wants
to have the last name first,

00:25:24.850 --> 00:25:27.000
it will do the right thing.

00:25:27.220 --> 00:25:29.800
The way this looks in code, very simple.

00:25:29.830 --> 00:25:33.200
You have a person,
get the name with AB record,

00:25:33.290 --> 00:25:36.950
copy composite name,
then do something clever with it.

00:25:37.370 --> 00:25:40.670
The Objective-C version
is exactly the same,

00:25:40.840 --> 00:25:45.240
except as I mentioned earlier,
CF types can be cast into

00:25:45.240 --> 00:25:47.960
their foundation equivalent.

00:25:48.230 --> 00:25:58.990
In this case,
CFStringRef can be used as an NSString.

00:25:58.990 --> 00:25:58.990
You can cast it directly
to be an NSString.

00:25:58.990 --> 00:25:58.990
And then you should still do
something clever with that name.

00:25:59.220 --> 00:26:02.020
All right, the next step in actually
the display process is to

00:26:02.020 --> 00:26:05.290
actually display the contacts.

00:26:05.420 --> 00:26:06.720
So we're actually just going to do that.

00:26:06.840 --> 00:26:10.810
Rather than showing you code,
we're going to implement it.

00:26:13.540 --> 00:26:15.410
So we're back here.

00:26:15.480 --> 00:26:21.780
I'm going to close the quick application
project and my social book application.

00:26:22.030 --> 00:26:23.930
So here we have a little application.

00:26:24.170 --> 00:26:29.090
It's got an application delegate,
very simple, a navigation

00:26:29.090 --> 00:26:30.910
controller-based application.

00:26:31.120 --> 00:26:34.400
Again, if you have not seen the
view control session,

00:26:34.400 --> 00:26:38.060
I encourage you to download the videos
when they're available and take a look.

00:26:38.270 --> 00:26:42.050
But we're going to focus mostly
on the Address Book API for this.

00:26:42.470 --> 00:26:44.380
So we have our AppDelegate.

00:26:44.660 --> 00:26:49.270
All the AppDelegate does is use the
social people table view controller

00:26:49.850 --> 00:26:52.730
and push it onto the navigation stack.

00:27:01.220 --> 00:27:01.840
So let's actually take a look at the
social people table view controller.

00:27:01.840 --> 00:27:02.360
This particular subclass
of table view controller,

00:27:02.390 --> 00:27:04.900
I've already filled in
a little bit of code.

00:27:04.960 --> 00:27:10.620
The main thing you're going to see is
that the number of rows in the table view

00:27:11.120 --> 00:27:13.840
are essentially the number of people.

00:27:14.010 --> 00:27:17.490
We have this little people method
that we're going to put in a lot

00:27:17.490 --> 00:27:20.850
of code to actually download the
contacts from the web service and do

00:27:20.850 --> 00:27:23.150
all those things we were talking about.

00:27:23.340 --> 00:27:25.490
So if I run it right now--

00:27:26.180 --> 00:27:28.160
We get just a table view.

00:27:28.470 --> 00:27:29.820
It's got a title.

00:27:29.870 --> 00:27:30.210
And that's it.

00:27:32.210 --> 00:27:35.140
Let's actually start downloading
the people from the web.

00:27:35.280 --> 00:27:39.840
So we're going to put all that code,
as I mentioned, in the people method.

00:27:40.760 --> 00:27:46.520
Here, people is actually just a instance
variable off our TableViewController,

00:27:46.520 --> 00:27:48.440
as you can see here.

00:27:48.540 --> 00:27:49.600
And it's mutable, right?

00:27:49.760 --> 00:27:56.530
Also have a handy little web service
class that will do the downloading.

00:27:57.170 --> 00:27:58.760
All right.

00:27:58.880 --> 00:28:03.870
So first thing we need to do is ask
our web service for the web people.

00:28:04.180 --> 00:28:09.700
Web people are represented by
this little web person class.

00:28:09.700 --> 00:28:09.700
It's actually just --

00:28:09.970 --> 00:28:12.420
a very simple class
with three properties:

00:28:12.420 --> 00:28:15.530
first name, last name, URL string.

00:28:15.660 --> 00:28:16.560
Good enough for the demo.

00:28:16.780 --> 00:28:20.910
You probably have more information
than that in your application.

00:28:21.510 --> 00:28:22.400
All right.

00:28:22.400 --> 00:28:27.000
We're going to get the people from the
Web and iterate over all those people.

00:28:27.100 --> 00:28:29.050
Once we have a Web person,
as I mentioned,

00:28:29.050 --> 00:28:32.380
the first thing we're going to
do is actually search for that

00:28:32.380 --> 00:28:34.880
person in the local address book.

00:28:34.880 --> 00:28:36.880
So let's do that.

00:28:37.900 --> 00:28:42.010
Here, we're going to build a full name.

00:28:42.480 --> 00:28:47.300
Again, this is to be passed to the
copy people with name function,

00:28:47.320 --> 00:28:51.640
and it's just going to be the first name,
a space, and the last name.

00:28:51.690 --> 00:28:54.050
You don't need to worry too
much about that actual string.

00:28:54.240 --> 00:28:57.640
It just needs to be a number
of words separated by spaces.

00:28:57.660 --> 00:29:00.670
And we'll do the right thing
and find the people who actually

00:29:00.680 --> 00:29:02.170
match that name exactly.

00:29:03.250 --> 00:29:09.220
So the next thing is to actually
find the people in the address book.

00:29:09.230 --> 00:29:12.860
A/B address book copy people with name,
pass in our address book that's actually

00:29:12.860 --> 00:29:16.620
created in the initialized method here,
the init method.

00:29:16.650 --> 00:29:19.610
We're actually creating an
A/B address book reference.

00:29:28.600 --> 00:29:28.600
And we pass in the full
name we just created.

00:29:28.600 --> 00:29:28.600
Again, CFNS,
you can cast one to the other.

00:29:28.600 --> 00:29:28.620
All right.

00:29:29.270 --> 00:29:32.640
Once we're done with the people,
we're actually going to release them.

00:29:32.720 --> 00:29:36.320
But before that,
we need to do a couple of things.

00:29:36.590 --> 00:29:41.290
So we need to actually check if we
have -- if we found people in the

00:29:41.290 --> 00:29:47.300
Local Address Book that matched the name
of the people we downloaded from the Web.

00:29:47.470 --> 00:29:52.810
So check that we actually got an array,
and then get the count for that array.

00:29:53.290 --> 00:29:55.770
In this particular case,
we're only going to get the first

00:29:56.340 --> 00:29:59.590
person we matched in the address book.

00:29:59.780 --> 00:30:01.420
It's a bit of a shortcut
I'm taking for the demo,

00:30:01.470 --> 00:30:04.100
and you probably want to do
a little more work than that.

00:30:04.100 --> 00:30:07.260
If you have multiple matches,
that means you don't have a clear

00:30:07.260 --> 00:30:08.540
match on the local address book.

00:30:08.540 --> 00:30:12.800
You might want to ask the user or just
not assume they're the same thing,

00:30:12.800 --> 00:30:14.090
the same person.

00:30:15.020 --> 00:30:15.900
All right.

00:30:15.930 --> 00:30:20.210
Once we have a person, we need to--

00:30:20.400 --> 00:30:28.530
So for that, this is similar to the code
I showed in the slides.

00:30:29.570 --> 00:30:29.740
We're going to first get
the URLs for the person.

00:30:30.850 --> 00:30:35.800
Then we need to mutate the multivalue.

00:30:35.960 --> 00:30:38.420
So if we did actually get one,
because some people might not

00:30:38.420 --> 00:30:42.940
have URLs in their record yet.

00:30:43.170 --> 00:30:47.330
So we're going to create a
mutable copy of that URL.

00:30:48.830 --> 00:30:51.100
of the multivalue, rather.

00:30:51.160 --> 00:30:55.300
Next,
if there were no URLs on that person,

00:30:55.370 --> 00:31:00.600
we're actually going to
create a mutable multivalue.

00:31:00.690 --> 00:31:04.870
To do this, we're just going to call
ABMultiValueCreateMutable and

00:31:04.990 --> 00:31:10.190
pass in the string property type
because the URL is all the strings.

00:31:12.190 --> 00:31:13.100
Okay.

00:31:13.100 --> 00:31:14.440
We got a mutable multivalue.

00:31:14.670 --> 00:31:18.010
Next thing we need to do,
actually add the value.

00:31:18.140 --> 00:31:20.360
In this case, AB Multivalue,
add value and label,

00:31:20.850 --> 00:31:24.150
pass in the mutable multivalue,
pass in the string we

00:31:24.150 --> 00:31:28.460
actually want to set in there,
and the label.

00:31:28.830 --> 00:31:31.810
In this case, we're going to use social.

00:31:33.580 --> 00:31:36.340
The last argument,
in this case we're ignoring,

00:31:36.340 --> 00:31:41.300
that's the identifier for the multivalue
entry that's going to be created.

00:31:42.480 --> 00:31:45.290
Once we have that,
we actually need to set that

00:31:45.410 --> 00:31:47.890
multivalue back onto the person.

00:31:48.040 --> 00:31:50.800
So, AB record set value,
pass in the person,

00:31:51.030 --> 00:31:52.620
pass in the property we're setting.

00:31:52.770 --> 00:31:55.930
Again, it has to be the same one
we just copied it from,

00:31:56.010 --> 00:31:57.540
the URL property.

00:31:57.880 --> 00:32:01.530
Pass in the mutable multivalue.

00:32:01.750 --> 00:32:07.100
. When we are done with that,
release the mutable URLs.

00:32:08.700 --> 00:32:12.680
And then we probably want
to save the address book.

00:32:12.910 --> 00:32:16.940
I'm going to cheat here and not actually
do it for the purpose of the demo.

00:32:16.970 --> 00:32:17.680
All right.

00:32:17.720 --> 00:32:21.270
With this, we have our array of people.

00:32:38.140 --> 00:32:38.140
We need to still sort them,
because if we don't,

00:32:38.140 --> 00:32:38.140
they're going to come back in whatever
order they were in on the server,

00:32:38.140 --> 00:32:38.140
which might not be the best order
for once they're on the phone.

00:32:38.140 --> 00:32:38.140
So we're going to go
ahead and sort the people.

00:32:39.320 --> 00:32:41.000
Again, this is an S-mutable array.

00:32:41.200 --> 00:32:42.320
We're going to sort using function.

00:32:42.520 --> 00:32:46.800
There's a bit of a strange
typecasting here because there are

00:32:46.940 --> 00:32:49.640
CF types and Objective-C types.

00:32:49.740 --> 00:32:53.300
So this is actually -- the function
works just fine in Objective-C.

00:32:53.470 --> 00:32:56.600
You might just have to
typecast it a little bit.

00:32:56.660 --> 00:33:00.860
Then you pass in this function that's
defining the address book framework.

00:33:00.970 --> 00:33:07.040
Here we're going to pass as
context the sort ordering.

00:33:07.230 --> 00:33:10.440
Again, we're not really interested
in changing the sort ordering

00:33:10.440 --> 00:33:13.690
the user is going to see,
so whatever their preference is,

00:33:13.770 --> 00:33:15.600
that's what we're going to use.

00:33:16.600 --> 00:33:16.900
All right.

00:33:16.900 --> 00:33:18.770
It's a pretty long method,
but we have people that we

00:33:18.770 --> 00:33:20.040
downloaded from the web.

00:33:20.040 --> 00:33:20.600
All right.

00:33:20.600 --> 00:33:23.600
Now we're going to display them.

00:33:23.600 --> 00:33:26.600
In the TableView cell
for root index path,

00:33:27.140 --> 00:33:29.540
this is where the TableView actually
creates the cells to display.

00:33:29.600 --> 00:33:32.900
If you have not -- I've missed the
iPhone TableView session and are

00:33:32.900 --> 00:33:36.590
not too familiar with the TableView,
don't worry about it too much.

00:33:36.590 --> 00:33:37.590
It's pretty simple.

00:33:37.600 --> 00:33:41.460
But again, I'd recommend watching
the videos later on.

00:33:42.440 --> 00:33:47.450
So we're going to actually set the text
of the cell to the name of the person.

00:33:47.580 --> 00:33:52.210
For that, we're going to get the people,
get the actual person at that

00:33:52.370 --> 00:33:55.130
particular index in the table.

00:33:55.390 --> 00:33:58.870
Again,
don't worry about that one too much.

00:34:08.770 --> 00:34:08.770
And then we're actually
going to get the name.

00:34:08.770 --> 00:34:08.770
For this, we're going to use AB record
copy composite name,

00:34:08.770 --> 00:34:08.770
pass in the person,
and we're going to get a name.

00:34:09.550 --> 00:34:14.680
Then once we have that,
set it as the text of the cell.

00:34:14.780 --> 00:34:17.940
And release the name since
it's been set on the cell.

00:34:18.030 --> 00:34:19.700
And then we return the cell.

00:34:19.930 --> 00:34:22.320
With all that,
we can actually run the application.

00:34:22.490 --> 00:34:23.290
And there we go.

00:34:23.410 --> 00:34:25.860
We have Anna and John.

00:34:25.970 --> 00:34:31.080
Those are the two people that are
on the Web as well as on my phone.

00:34:31.260 --> 00:34:34.490
We probably want to see more than
just the people that actually

00:34:34.520 --> 00:34:36.460
intersect those two groups.

00:34:36.620 --> 00:34:39.780
So let's go back to the code.

00:34:41.140 --> 00:34:45.420
Here you see that I'm really
only creating a person.

00:34:45.510 --> 00:34:50.950
This is where I actually get a person,
if I have matches in there.

00:34:51.020 --> 00:34:53.660
If I don't have matches,
I probably also want to have a

00:34:53.660 --> 00:34:58.270
person representing that web person.

00:34:58.450 --> 00:35:02.160
So here we're actually just
going to create a person.

00:35:02.270 --> 00:35:04.350
This is a person that's going to
live outside of the address book.

00:35:04.400 --> 00:35:08.280
It's not a person that's
in the user's database yet.

00:35:08.380 --> 00:35:10.540
And that's perfectly acceptable.

00:35:10.610 --> 00:35:14.590
You can create EBRecord objects that
do not live in the address book.

00:35:15.900 --> 00:35:32.100
[Transcript missing]

00:35:32.950 --> 00:35:37.150
Next, we're going to add the
URL in there as well.

00:35:37.390 --> 00:35:41.730
For that, very similar to what
we did just above here.

00:35:42.210 --> 00:35:47.980
We create immutable
multivalue of string type.