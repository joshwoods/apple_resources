WEBVTT

00:00:20.150 --> 00:00:21.470
- Good afternoon, everyone.

00:00:21.560 --> 00:00:23.200
Got the imp- Thank you.

00:00:23.200 --> 00:00:25.990
Welcome to session 411.

00:00:26.000 --> 00:00:30.970
We got the information for you today,
utilizing offline data in Safari.

00:00:31.170 --> 00:00:32.260
My name is Brady Eiadson.

00:00:32.350 --> 00:00:36.030
I'm a software engineer on the
Safari and WebKit team at Apple.

00:00:36.530 --> 00:00:39.020
How many of you out
there are web developers,

00:00:39.120 --> 00:00:41.560
develop web applications and widgets?

00:00:41.590 --> 00:00:43.670
Most of you, I would expect.

00:00:44.250 --> 00:00:48.100
How many of you are native
application developers?

00:00:48.120 --> 00:00:48.820
A lot fewer.

00:00:49.060 --> 00:00:52.060
I noticed a little overlap there,
but there's a disparity.

00:00:52.060 --> 00:00:55.060
And I hope to convince you today
that you're not so different

00:00:55.060 --> 00:00:56.520
from your peers after all.

00:00:56.560 --> 00:00:59.210
We have these web applications online.

00:00:59.210 --> 00:01:00.770
What's been going on?

00:01:00.770 --> 00:01:06.240
The web used to be static and simple,
and it's gotten a lot richer lately.

00:01:06.240 --> 00:01:09.000
We've seen a lot more creative
and a lot more sophisticated

00:01:09.090 --> 00:01:10.410
applications out there.

00:01:11.640 --> 00:01:12.630
What's been going on?

00:01:12.630 --> 00:01:14.740
We've been seeing media
being used in new ways.

00:01:14.740 --> 00:01:17.720
We've been seeing
Office web applications,

00:01:18.020 --> 00:01:20.020
keeping in touch,
instant messaging and mail,

00:01:20.110 --> 00:01:21.370
all this great stuff.

00:01:21.380 --> 00:01:25.620
And they're doing things that only
native applications used to do before.

00:01:25.620 --> 00:01:27.420
And this is just awesome.

00:01:27.420 --> 00:01:30.120
And they're looking a lot more
like native applications too.

00:01:30.120 --> 00:01:32.790
Especially with the web
applications we've seen pop

00:01:32.810 --> 00:01:36.330
up on iPhone that just feel,
I forget I'm using Safari on the iPhone,

00:01:36.330 --> 00:01:38.760
they feel so much like
an iPhone application.

00:01:38.760 --> 00:01:40.170
It's pretty awesome.

00:01:41.630 --> 00:01:45.690
Now, what's been going on here is that we
have these things I like to call rich

00:01:45.690 --> 00:01:47.490
internet application technologies.

00:01:47.530 --> 00:01:50.320
There's a lot of technologies
that have been around for years

00:01:50.320 --> 00:01:51.870
on the web and a lot of new ones.

00:01:51.870 --> 00:01:55.180
Certain browsers are pushing
in new different directions.

00:01:55.180 --> 00:01:56.870
Many of these things
are becoming standards,

00:01:56.870 --> 00:01:59.460
and they're allowing you to make
these more native applications.

00:01:59.460 --> 00:02:02.920
I can think of just a couple
I had to try really hard to

00:02:02.920 --> 00:02:05.220
fill the entire slide here.

00:02:05.220 --> 00:02:06.990
We're dealing with text.

00:02:07.090 --> 00:02:09.280
We're dealing with media images.

00:02:09.460 --> 00:02:16.540
We have great JavaScript developer tools,
UI effects with the great CSS styling.

00:02:16.540 --> 00:02:18.640
And these are just a couple.

00:02:18.640 --> 00:02:21.230
There's really a lot more of these.

00:02:21.490 --> 00:02:25.900
But I look at this list,
and I ask myself, what about the data?

00:02:25.900 --> 00:02:29.260
Some of you might be asking yourselves,
what data?

00:02:29.460 --> 00:02:33.300
One thing web applications do great
is data can live online in the cloud,

00:02:33.400 --> 00:02:36.290
and many content providers
keep large amounts of very

00:02:36.290 --> 00:02:38.350
interesting data out there online.

00:02:38.350 --> 00:02:40.670
But there's a lot of other stuff, too.

00:02:40.680 --> 00:02:43.000
Preferences and settings, for example.

00:02:43.000 --> 00:02:46.500
Your users have a specific way
they like using your application.

00:02:46.500 --> 00:02:48.130
And also application state.

00:02:48.130 --> 00:02:52.000
If there's some long-running procedure,
where was the user in the middle

00:02:52.000 --> 00:02:53.740
of that so we can recover later?

00:02:53.740 --> 00:02:55.120
Or where was the window?

00:02:55.120 --> 00:02:56.000
How big was it?

00:02:56.000 --> 00:02:57.410
That type of thing.

00:02:57.420 --> 00:02:59.420
And then finally, user data.

00:02:59.460 --> 00:03:02.540
Hopefully your users are
generating some cool stuff with

00:03:02.640 --> 00:03:04.460
many of your web applications.

00:03:04.660 --> 00:03:07.200
And that data, well,
it has to go somewhere.

00:03:07.200 --> 00:03:11.280
It's probably on a drive somewhere.

00:03:11.280 --> 00:03:15.430
And I hope to convince you
today that that drive can be,

00:03:15.430 --> 00:03:19.610
and sometimes should be,
in your users' machines.

00:03:20.080 --> 00:03:21.440
So what are we going to talk about today?

00:03:21.480 --> 00:03:24.710
I'm going to briefly touch a little
more on the state of the web,

00:03:24.810 --> 00:03:29.600
some of the tricks you guys are using to
manipulate data in your web applications.

00:03:29.670 --> 00:03:32.280
Then I'm going to talk to you
about some of the new solutions,

00:03:32.280 --> 00:03:34.600
starting out with the
HTML5 storage interface,

00:03:34.750 --> 00:03:39.620
a great standard way to manipulate
data as easily as filing it away.

00:03:39.700 --> 00:03:43.350
It comes in two concrete flavors
you'll learn a little more about.

00:03:43.610 --> 00:03:47.300
Then we'll just jump right into the
power of the client-side databases.

00:03:47.300 --> 00:03:50.340
Another HTML5 standard, pretty awesome.

00:03:50.470 --> 00:03:53.650
And then finally, we'll touch on the
HTML5 application cache.

00:03:53.860 --> 00:03:56.850
If you're unfamiliar with what that is,
I don't want to spoil it for you now.

00:03:57.120 --> 00:03:59.370
We'll get into it at the end.

00:04:00.130 --> 00:04:02.840
So right now on the web,
we have all these great web applications

00:04:02.900 --> 00:04:07.950
that are doing amazing new things that
used to be only for native applications.

00:04:08.200 --> 00:04:10.290
And they're moving all this data around.

00:04:10.500 --> 00:04:12.600
This data has to go somewhere.

00:04:12.600 --> 00:04:14.330
First, let's talk about an ideal world.

00:04:14.450 --> 00:04:18.100
How would we like our data to
be when we're manipulating it?

00:04:19.030 --> 00:04:20.660
Usually we want our data
to be pretty persistent,

00:04:20.660 --> 00:04:21.060
right?

00:04:21.060 --> 00:04:24.840
We want to know we can store it somewhere
and it's rock solid and it'll always

00:04:24.840 --> 00:04:28.440
be there when we come back to it days,
weeks, months, years later.

00:04:28.440 --> 00:04:29.170
It's going to be there.

00:04:29.180 --> 00:04:33.300
Also, manipulating data should be fast.

00:04:33.300 --> 00:04:35.480
It's unacceptable to
lock up the application,

00:04:35.580 --> 00:04:36.250
for example.

00:04:36.250 --> 00:04:38.240
Users aren't standing for this anymore.

00:04:38.250 --> 00:04:41.170
Even in the web browser,
things seem to stay responsive.

00:04:43.150 --> 00:04:44.220
Should be easy, right?

00:04:44.260 --> 00:04:47.820
You shouldn't have to jump through
unnecessary hoops simply to handle

00:04:47.820 --> 00:04:52.310
the data that belongs to you,
your application, and your users.

00:04:52.550 --> 00:04:55.400
and simple data and complex data.

00:04:55.410 --> 00:04:58.890
We want to be able to
manipulate all sorts of data.

00:04:59.350 --> 00:05:01.740
And finally, we want it to be secure.

00:05:01.800 --> 00:05:05.750
Our data is a very sacred
thing to us and our users,

00:05:05.910 --> 00:05:09.600
and hopefully we want to make sure
that only your web application

00:05:09.620 --> 00:05:10.860
and your users can access it.

00:05:10.960 --> 00:05:15.210
So you've come up with a lot
of great tricks to do all these

00:05:15.210 --> 00:05:19.890
things in the standards gap,
as I call it, where there's no real

00:05:19.890 --> 00:05:22.690
good way to manipulate it,
but you've made do.

00:05:23.170 --> 00:05:25.710
One way you've made do
is by using cookies.

00:05:25.840 --> 00:05:28.560
Cookies,
which were originally designed for

00:05:28.560 --> 00:05:32.670
HTTP integration to automatically send
data off to a server with a request.

00:05:32.790 --> 00:05:35.830
So what they were designed for,
they're great for that, always will be.

00:05:35.830 --> 00:05:39.170
But for the other things
we're looking for,

00:05:39.410 --> 00:05:40.750
Cookies are pretty fast.

00:05:41.030 --> 00:05:43.180
Most browsers load all
the cookies into memory.

00:05:43.180 --> 00:05:47.180
It makes it really quick to both
access and to change the cookies.

00:05:47.250 --> 00:05:48.140
They're also very secure.

00:05:48.140 --> 00:05:50.620
They have the same
origin-based security policy,

00:05:50.690 --> 00:05:54.270
which is becoming the standard
security model on the web.

00:05:54.940 --> 00:05:56.570
But they're not persistent.

00:05:56.900 --> 00:05:58.340
Some of you might think, well,
of course they are.

00:05:58.340 --> 00:05:58.880
I use cookies.

00:05:58.880 --> 00:05:59.660
I think they're persistent.

00:05:59.660 --> 00:06:01.920
I set an expiration date
far off in the future,

00:06:01.920 --> 00:06:04.210
and that expiration date means squat.

00:06:04.220 --> 00:06:07.520
The browser is actually allowed
by the cookie spec to delete

00:06:07.520 --> 00:06:09.110
these cookies at any time.

00:06:09.160 --> 00:06:11.910
And in much more limited browsers,
they might not ever be

00:06:11.910 --> 00:06:13.060
persistent in any way.

00:06:13.860 --> 00:06:14.890
And cookies aren't easy.

00:06:14.900 --> 00:06:16.960
They're key-value pairs,
such simple data.

00:06:16.960 --> 00:06:20.490
But how many of you are familiar
with writing a parsing function

00:06:20.490 --> 00:06:23.690
just to manipulate your cookies
and then reconstructing that

00:06:23.690 --> 00:06:25.130
string just to store it away?

00:06:25.140 --> 00:06:27.210
It's such simple data,
it should be easier, right?

00:06:27.440 --> 00:06:29.240
And they're not that flexible.

00:06:29.290 --> 00:06:31.790
They are simply only key-value pairs.

00:06:33.260 --> 00:06:36.840
So another great development
for manipulating this data

00:06:36.870 --> 00:06:41.730
has been the XMLHttpRequest,
which was designed for syncing data

00:06:41.730 --> 00:06:45.540
to a remote server to be brought
back down to a browser later,

00:06:45.600 --> 00:06:48.140
perhaps,
or to be used in mashups with some

00:06:48.200 --> 00:06:50.860
of the cool things that we talked
about in the Ajax talk this morning.

00:06:50.860 --> 00:06:53.130
And that's great.

00:06:53.140 --> 00:06:54.120
It's designed for that.

00:06:54.120 --> 00:06:55.320
It'll always be good at that.

00:06:56.310 --> 00:06:58.360
For some of these other things,
there's some questions.

00:06:58.390 --> 00:07:00.060
It's obviously flexible, right?

00:07:00.060 --> 00:07:03.840
We can handle any type of data,
handle our own protocol of shipping

00:07:03.840 --> 00:07:05.480
it up and off to the server.

00:07:05.480 --> 00:07:08.550
Simple data, complex data, that's great.

00:07:08.560 --> 00:07:12.220
It's as persistent and
secure as you make it,

00:07:12.220 --> 00:07:13.080
right?

00:07:13.080 --> 00:07:14.750
How do you transport it to the server?

00:07:14.750 --> 00:07:15.640
Do you encrypt it?

00:07:15.750 --> 00:07:19.090
Do you have armed guards in the server
room handling the data to make sure

00:07:19.090 --> 00:07:20.800
no one gets to it that shouldn't?

00:07:20.840 --> 00:07:25.660
But I've never heard anyone
say XMLHttpRequest is easy.

00:07:26.300 --> 00:07:29.250
How many of you have manipulated
it directly instead of using

00:07:29.250 --> 00:07:30.740
some JavaScript library?

00:07:30.740 --> 00:07:34.300
I haven't since college,
and I choose not to because the

00:07:34.300 --> 00:07:37.330
JavaScript libraries make things easier,
but they don't have to worry

00:07:37.410 --> 00:07:38.400
about the JavaScript backend.

00:07:38.400 --> 00:07:41.720
I'm sorry,
the server backend to handle that data.

00:07:41.740 --> 00:07:45.610
And as far as being fast,
networks will always be orders

00:07:45.610 --> 00:07:50.500
of magnitude slower than keeping
data local to a client's machine.

00:07:52.630 --> 00:07:53.910
And then there's plugins.

00:07:54.080 --> 00:07:58.040
Plugins which were originally developed
to run custom native code in the

00:07:58.040 --> 00:08:01.100
web browser where the web standards
didn't have any other solution,

00:08:01.110 --> 00:08:01.600
right?

00:08:01.600 --> 00:08:03.420
And it's what they were designed for.

00:08:03.420 --> 00:08:04.860
They will always be great at it.

00:08:04.860 --> 00:08:09.250
I'm not going to give plugins a passing
grade in anything else because there's

00:08:09.250 --> 00:08:11.630
too many question marks up in the air.

00:08:11.640 --> 00:08:14.650
If you're using a third-party plugin,
maybe it works better on

00:08:14.810 --> 00:08:17.820
one of your user's platforms
than another user's platform.

00:08:17.820 --> 00:08:20.800
And if there is a bug with it,
how do you get the third party to fix it?

00:08:20.820 --> 00:08:23.340
And if you're writing your own plugin,
you have to make sure that it works

00:08:23.340 --> 00:08:26.080
on all the same platforms in all the
same ways with all the same features.

00:08:26.080 --> 00:08:27.610
And the performance has to be the same.

00:08:27.620 --> 00:08:30.040
And then some IT administrators
won't let your users install plugins.

00:08:30.040 --> 00:08:32.300
And some users are too
lazy to install plugins.

00:08:32.300 --> 00:08:34.080
And some devices don't support plugins.

00:08:34.080 --> 00:08:40.140
And the problem is it's just not
standard web technology what plugins do.

00:08:42.390 --> 00:08:45.940
So some of you are aware
of some of these caveats.

00:08:45.990 --> 00:08:48.740
But seeing it presented all
in one time in one place,

00:08:48.740 --> 00:08:50.140
it might throw you off a little.

00:08:50.140 --> 00:08:52.450
You might say, OK,
I never knew all of that.

00:08:52.460 --> 00:08:54.230
I thought I was handling this data fine.

00:08:54.420 --> 00:08:57.980
But if I can't do these things,
what else can I do?

00:08:58.040 --> 00:09:04.650
And the path forging HTML5 standard is
trying to fill in some of these gaps.

00:09:04.830 --> 00:09:08.530
So let's talk a little bit
about the storage interface.

00:09:09.460 --> 00:09:13.670
The storage interface is meant to be able
to handle simple data in a simple way,

00:09:13.700 --> 00:09:16.560
as simple as filing something away.

00:09:17.030 --> 00:09:18.850
And we're bringing this to
you for the first time in the

00:09:18.930 --> 00:09:20.900
Safari 4 developer preview.

00:09:20.930 --> 00:09:24.500
The type of data that you can
store is the exact same as cookies,

00:09:24.540 --> 00:09:25.650
key value pairs.

00:09:25.730 --> 00:09:28.680
As a matter of fact,
they're strings only like cookies,

00:09:28.740 --> 00:09:30.980
but without some of
the caveats of cookies.

00:09:31.030 --> 00:09:35.100
For example, cookies usually have about
a 4K limit per cookie.

00:09:35.350 --> 00:09:36.310
There's none of that here.

00:09:36.320 --> 00:09:40.670
There's no limit on the
number of items you can store.

00:09:41.500 --> 00:09:43.510
And various ways to
manipulate those items.

00:09:43.800 --> 00:09:45.080
Cookies are complex.

00:09:45.080 --> 00:09:49.580
We have to rip apart the string and then
mush it back together when we're done.

00:09:49.800 --> 00:09:54.090
And there's a few ways to manipulate
items in the storage interface.

00:09:54.210 --> 00:09:57.340
And in fact, if you know JavaScript,
JavaScript objects and their properties,

00:09:57.560 --> 00:09:59.010
you already know how to use this.

00:09:59.230 --> 00:10:01.490
You'll see that really quick here.

00:10:01.750 --> 00:10:05.380
has same origin-based security,
the same as most of the security models.

00:10:05.380 --> 00:10:11.420
So your domain and your documents are the
only ones who can see your users' data.

00:10:12.060 --> 00:10:15.790
comes in these two built-in varieties,
which fill two different niches.

00:10:15.820 --> 00:10:19.790
These are both new objects
on the global window object,

00:10:19.800 --> 00:10:23.640
the session storage and
the local storage object.

00:10:23.690 --> 00:10:28.060
And then finally, the storage events,
so you can be notified when the data

00:10:28.060 --> 00:10:31.190
stored in a storage object is changed.

00:10:32.240 --> 00:10:37.170
So these two concrete implementations,
what are these?

00:10:37.280 --> 00:10:40.770
First one is session storage.

00:10:41.210 --> 00:10:43.100
So what does session storage do?

00:10:43.420 --> 00:10:45.590
I ran into a problem a little while ago.

00:10:45.670 --> 00:10:47.160
I was taking vacation last year.

00:10:47.210 --> 00:10:48.350
I wanted to visit Seattle.

00:10:48.360 --> 00:10:49.780
I love going to Seattle.

00:10:49.840 --> 00:10:52.140
And I also wanted to go to
Paris for the very first time.

00:10:52.300 --> 00:10:56.620
So I opened up a flight booking website
in two different browser windows.

00:10:56.740 --> 00:10:58.440
I found the perfect flight to Seattle.

00:10:58.440 --> 00:11:00.240
I found the perfect flight to Paris.

00:11:00.340 --> 00:11:02.390
I purchased both,
and the confirmation email

00:11:02.400 --> 00:11:06.330
told me I was the proud owner
of two tickets to Seattle.

00:11:06.530 --> 00:11:08.340
So what the heck happened?

00:11:08.600 --> 00:11:12.320
They were using cookies in the
browser to track my session.

00:11:12.360 --> 00:11:15.640
Now, cookies are great for tracking
a browser server session,

00:11:15.760 --> 00:11:17.350
but only in the browser.

00:11:17.390 --> 00:11:18.320
They come up short.

00:11:18.390 --> 00:11:21.150
There's this information
leakage between windows.

00:11:21.430 --> 00:11:24.410
So session storage,
it's trying to solve that.

00:11:24.420 --> 00:11:26.440
It's trying to replace
cookies for session tracking.

00:11:26.650 --> 00:11:31.030
And it accomplishes this by giving
one session per browser window.

00:11:31.160 --> 00:11:34.290
So the session storage object in two
different windows of your web app

00:11:34.350 --> 00:11:36.590
will start out completely independent.

00:11:36.630 --> 00:11:39.260
If you call window.open
and create a new window,

00:11:39.300 --> 00:11:42.780
then it'll get a copy of the previous
and it'll diverge from there.

00:11:42.780 --> 00:11:44.770
It's pretty sweet.

00:11:45.320 --> 00:11:48.900
So in this other one, local storage,
this is as simple as filing things away,

00:11:48.900 --> 00:11:50.400
but it's a little more concrete.

00:11:50.470 --> 00:11:53.670
And by concrete, I mean it's persistent.

00:11:53.860 --> 00:11:57.150
Objects stored in the local storage
area will be on your user's disk

00:11:57.150 --> 00:12:01.300
inside of their web browser,
and you will predictably be able

00:12:01.390 --> 00:12:03.960
to get them back at any later date.

00:12:04.000 --> 00:12:06.890
Unlike session storage,
local storage is global,

00:12:06.890 --> 00:12:10.600
so all documents from your domain can
access the same local storage area,

00:12:10.600 --> 00:12:13.990
no matter how many browser
windows it's opened in.

00:12:14.780 --> 00:12:17.020
So that's session storage
and local storage,

00:12:17.020 --> 00:12:20.600
solving two different
problems that exist out there.

00:12:20.940 --> 00:12:22.140
But how do you use it?

00:12:22.210 --> 00:12:24.420
How do you file these things away?

00:12:25.320 --> 00:12:28.540
Let's call set item on a storage object,
and it's that simple.

00:12:28.580 --> 00:12:31.380
Key and value, like cookies,
we don't need to deal with the strings.

00:12:31.500 --> 00:12:32.740
Just do it.

00:12:32.780 --> 00:12:34.800
And like I said,
if you know JavaScript objects

00:12:34.830 --> 00:12:37.390
and their properties,
you can also use square bracket

00:12:37.400 --> 00:12:40.770
property notation and dot property
notation because the keys are

00:12:40.770 --> 00:12:42.800
properties on the storage object.

00:12:42.920 --> 00:12:44.100
It's that easy.

00:12:44.130 --> 00:12:46.080
How do you get things out?

00:12:46.110 --> 00:12:48.540
You might imagine the exact same way.

00:12:48.570 --> 00:12:51.640
Since they are properties,
you can iterate over all of the

00:12:51.640 --> 00:12:54.630
keys in the entire storage object.

00:12:54.990 --> 00:12:58.760
And you can remove an item as
simply as calling remove item,

00:12:58.760 --> 00:13:03.090
or just wipe the entire
object out in one fell swoop.

00:13:03.570 --> 00:13:09.040
So here to give you a quick demo of
a simple way to use local storage,

00:13:09.040 --> 00:13:11.290
I'd like to invite my colleague,
Vicki Murley,

00:13:11.300 --> 00:13:14.250
the Safari Technologies Evangelist,
on stage.

00:13:16.200 --> 00:13:21.130
Thanks, Brady.

00:13:21.230 --> 00:13:25.390
So Brady's given us a great overview
of the kinds of things you can do with

00:13:25.540 --> 00:13:28.500
session storage and local storage.

00:13:28.610 --> 00:13:31.430
Can we switch to the demo machine?

00:13:32.860 --> 00:13:33.640
Okay.

00:13:33.640 --> 00:13:38.750
Other, Demo Machine A.

00:13:49.560 --> 00:13:52.850
Well, I'll talk some more while
this is getting resolved.

00:13:52.990 --> 00:13:57.920
So I wanted to make a game
to demonstrate local storage.

00:13:58.130 --> 00:14:01.970
And to do so,
I was thinking about you guys and

00:14:01.970 --> 00:14:06.460
how in every Q&A session I heard,
I'd like the sample code

00:14:06.460 --> 00:14:08.450
to be available afterwards.

00:14:08.690 --> 00:14:10.630
So I made my tic-tac-toe game.

00:14:10.640 --> 00:14:12.570
Originally, it was just text, Xs and Os.

00:14:12.690 --> 00:14:16.100
But last night,
I made it extra gratuitous.

00:14:16.100 --> 00:14:19.340
So you'll see in a moment,
using a lot of the techniques that

00:14:19.340 --> 00:14:22.130
you've seen in the other sessions.

00:14:28.100 --> 00:14:35.110
In order to present this game,
I am going to need a

00:14:35.110 --> 00:14:37.060
volunteer from the audience.

00:14:37.230 --> 00:14:43.170
So anyone out there who
would like to get on stage?

00:14:43.250 --> 00:14:45.560
Anyone?

00:14:45.560 --> 00:14:47.680
No one over here?

00:14:47.680 --> 00:14:47.680
Anyone?

00:14:49.770 --> 00:14:51.000
Oh, great.

00:14:51.000 --> 00:14:55.820
Gentlemen over here, young man,
come on to the stage here.

00:14:55.820 --> 00:14:56.360
Okay.

00:14:56.360 --> 00:14:58.060
Brady Eidson.

00:14:58.060 --> 00:14:59.860
Give him a big hand.

00:14:59.860 --> 00:15:02.020
Okay, so here's my game.

00:15:02.160 --> 00:15:07.740
And Brady and I are going to go head
to head here and you're going to wait.

00:15:07.740 --> 00:15:08.980
She's going to go down is what she said.

00:15:08.980 --> 00:15:10.570
That's what he thinks.

00:15:10.570 --> 00:15:13.200
Okay,
so I'm going to make this move right

00:15:13.200 --> 00:15:15.680
here down in the lower left corner.

00:15:15.680 --> 00:15:19.040
I'm gonna go over here.

00:15:21.600 --> 00:15:26.260
Nice move, but I think I'm now
going to go upper left.

00:15:26.440 --> 00:15:27.460
I see what you're doing.

00:15:27.460 --> 00:15:28.240
I see what you're doing.

00:15:28.240 --> 00:15:29.440
I know how to react to that.

00:15:29.490 --> 00:15:30.600
Okay.

00:15:30.600 --> 00:15:31.200
Okay.

00:15:31.200 --> 00:15:31.800
Okay.

00:15:31.800 --> 00:15:35.980
Well, you reacted well on the block,
but now I'm going to

00:15:35.980 --> 00:15:41.400
take the middle square,
and not an easy one to defend against.

00:15:41.400 --> 00:15:41.780
Okay.

00:15:41.780 --> 00:15:42.650
I know what to do.

00:15:42.650 --> 00:15:43.600
I know what to do.

00:15:43.600 --> 00:15:46.670
Oh, I hit Command-Q instead
of clicking on my move.

00:15:46.780 --> 00:15:47.280
Oh.

00:15:49.700 --> 00:15:50.540
I'm sorry.

00:15:50.540 --> 00:15:52.880
Oh.

00:15:52.910 --> 00:15:56.460
Well,
now if I load my game again in Safari,

00:15:56.460 --> 00:15:58.460
we see it's totally gone.

00:15:58.460 --> 00:15:59.600
Are we going again?

00:15:59.670 --> 00:16:00.350
No.

00:16:00.430 --> 00:16:03.040
No, we're not going to play again.

00:16:03.440 --> 00:16:08.300
So as you can see, the browser was quit,
and my data that I wanted to store

00:16:08.300 --> 00:16:10.850
didn't persist across that quit.

00:16:11.000 --> 00:16:16.530
So I'm going to modify my code so that
any underhanded competitors that I might

00:16:16.530 --> 00:16:22.800
be up against next time can never defeat
me in this hardcore game of tic-tac-toe.

00:16:22.860 --> 00:16:26.160
So here is my JavaScript code.

00:16:26.160 --> 00:16:30.970
And really, to store my data,
I'm just going to do three things.

00:16:31.020 --> 00:16:35.040
In my HTML,
I just have a nine element array,

00:16:35.090 --> 00:16:36.840
which represents my board.

00:16:36.850 --> 00:16:43.190
And each table cell has an ID of
012 to map to that array that

00:16:43.190 --> 00:16:46.960
I'm maintaining here in the code,
which is this board right here.

00:16:46.960 --> 00:16:49.640
So the first thing,
usually when I update the board,

00:16:49.640 --> 00:16:54.880
I just set my board in the
code here to this marker.

00:16:55.050 --> 00:17:01.720
But now I want to also add a
little bit of local storage magic.

00:17:01.740 --> 00:17:04.830
So local storage is great
for storing strings.

00:17:04.840 --> 00:17:07.850
So I'm just going to parse my
array really quickly to a string

00:17:07.910 --> 00:17:12.760
by iterating through the array and
delimiting everything with a comma.

00:17:12.760 --> 00:17:16.730
And then the key line here is I'm
setting this item tic-tac-toe board.

00:17:16.790 --> 00:17:19.020
And I'm going to add a new string to
this board string that I've created.

00:17:19.030 --> 00:17:20.230
So that's step one.

00:17:20.270 --> 00:17:25.930
Now every time I update the board,
I'm also storing it in my

00:17:25.930 --> 00:17:28.830
local storage database.

00:17:29.260 --> 00:17:32.800
So step number two,
usually when I create the board,

00:17:32.800 --> 00:17:38.320
I'm just going through and setting
every element of the board to empty,

00:17:38.560 --> 00:17:41.750
because I'm essentially clearing the
board whenever I create a new board.

00:17:41.930 --> 00:17:46.360
But now I'd like to create a
board from the stored version,

00:17:46.360 --> 00:17:46.590
if I have one.

00:17:46.600 --> 00:17:51.270
So since this is really just
duplicated over here now,

00:17:51.280 --> 00:17:52.470
I'm going to delete this.

00:17:52.480 --> 00:17:54.880
That's now up in my else block.

00:17:54.880 --> 00:18:01.640
And so now I check local storage to see
if this item tic-tac-toe board exists.

00:18:01.640 --> 00:18:03.500
And if it does,
I'm just going to split on

00:18:03.500 --> 00:18:06.680
that comma that I used earlier,
iterate through the board,

00:18:06.680 --> 00:18:11.480
and fill that square with
the appropriate marker.

00:18:11.480 --> 00:18:14.270
Otherwise, if that doesn't exist,
I'm just going to clear the

00:18:14.270 --> 00:18:15.780
board like I usually would.

00:18:15.790 --> 00:18:20.980
The last thing I want to do is I'm
going to do is when I have a new game,

00:18:20.990 --> 00:18:24.100
I want to delete my stored
version of the board.

00:18:24.190 --> 00:18:27.940
So that is just a one line change.

00:18:27.940 --> 00:18:33.000
And that is local storage dot
remove item tic-tac-toe board.

00:18:33.040 --> 00:18:36.540
So now I'm going to save this.

00:18:37.900 --> 00:18:43.660
I'm going to reload my game and I'm
going to put a couple characters here.

00:18:43.660 --> 00:18:48.580
And as you can see,
I can quit the browser.

00:18:49.140 --> 00:18:53.590
And reload again,
and my characters are exactly

00:18:53.600 --> 00:18:55.830
where I expected them to be,
my Xs and Os.

00:18:55.980 --> 00:19:01.100
So I can also open a new window,
and the data is still there.

00:19:01.370 --> 00:19:04.170
It is working exactly
as I thought it would,

00:19:04.170 --> 00:19:05.000
so it's perfect.

00:19:05.000 --> 00:19:07.130
And that's it for local storage.

00:19:16.000 --> 00:19:17.810
Thank you very much, Vicky.

00:19:17.970 --> 00:19:21.640
And local storage has been a pain for me,
and it's a pain again now because now

00:19:21.640 --> 00:19:24.530
I can't cheat at tic-tac-toe anymore.

00:19:24.800 --> 00:19:27.500
and I are going to talk about the demo.

00:19:27.500 --> 00:19:29.700
So,
this is a demo of the Tic-Tac-Toe game.

00:19:29.700 --> 00:19:31.690
It's a little bit unfortunate.

00:19:31.700 --> 00:19:33.690
So, that demo was pretty simple.

00:19:33.740 --> 00:19:36.700
We saw how easy it was to
use the minimal interface,

00:19:36.700 --> 00:19:40.700
no complicated cookie manipulation
just for these key value pairs,

00:19:40.810 --> 00:19:42.700
and we saw that it was persistent.

00:19:43.600 --> 00:19:46.600
I also mentioned earlier
the storage events.

00:19:46.760 --> 00:19:49.200
The storage events are great.

00:19:49.280 --> 00:19:51.320
We can keep documents in sync.

00:19:51.320 --> 00:19:55.360
So one solution for the flight booking
problem would have been if they'd

00:19:55.360 --> 00:19:58.340
used session storage instead of
cookies for the in-browser session,

00:19:58.340 --> 00:20:00.640
I wouldn't have had this
information leakage.

00:20:00.640 --> 00:20:01.270
Right?

00:20:01.280 --> 00:20:02.940
And I would have gotten
the two flights I expected.

00:20:03.070 --> 00:20:05.770
Alternately,
if they were using local storage,

00:20:05.770 --> 00:20:09.940
for example, and it was global data,
they could have used storage events

00:20:09.940 --> 00:20:11.800
to keep the documents in sync.

00:20:12.650 --> 00:20:16.450
Now, whenever set item, remove item,
or clear is called on a storage area,

00:20:16.520 --> 00:20:19.420
an event is sent out to everyone
else who might be listening

00:20:19.650 --> 00:20:21.370
for it and might be interested.

00:20:21.370 --> 00:20:25.020
This is pretty cool to keep
things in sync pretty easily.

00:20:25.020 --> 00:20:27.760
You can listen for the
named storage event,

00:20:27.760 --> 00:20:31.260
or there is a standard on
storage attribute that you need

00:20:31.260 --> 00:20:33.160
to put on the body element.

00:20:33.160 --> 00:20:39.200
For session storage, since one page,
one browser window is the session,

00:20:39.430 --> 00:20:41.480
every frame in that
window can be notified.

00:20:41.480 --> 00:20:46.880
For local storage, every frame in every
window can be notified.

00:20:46.920 --> 00:20:50.990
So if your users have your web
application open in 80 different tabs

00:20:50.990 --> 00:20:55.020
and they're kind of insane like that,
all of them can stay in sync.

00:20:55.940 --> 00:20:58.830
It has all the goods you need to know,
the storage event.

00:20:58.920 --> 00:21:02.000
It has the key, old value, new value.

00:21:02.000 --> 00:21:07.890
And then it also has the URI and the
window object that generated the event.

00:21:08.450 --> 00:21:11.790
And that's it for storage,
simple filing away of key value

00:21:11.790 --> 00:21:14.410
pairs in a very simple manner.

00:21:14.750 --> 00:21:17.690
But some of you are
probably asking yourselves,

00:21:17.690 --> 00:21:21.510
that simple stuff, do you have anything
with a little more kick?

00:21:21.520 --> 00:21:25.840
HTML5, its contributors,
and the WebKit team definitely

00:21:25.840 --> 00:21:28.420
wanted to punch it up a little too.

00:21:28.420 --> 00:21:32.680
So we bring you now the HTML5
client-side database storage.

00:21:32.680 --> 00:21:37.310
Now, if you're familiar with databases,
you know that they are data warehouses.

00:21:37.320 --> 00:21:40.350
Complex data, tons of data,
lots of structure,

00:21:40.350 --> 00:21:43.060
relation between different data items.

00:21:43.080 --> 00:21:44.560
That's what databases are for.

00:21:46.180 --> 00:21:49.120
So this was actually brand
new in the Safari 3.1,

00:21:49.120 --> 00:21:52.040
but is now actually going to
be in the iPhone 2.0 as well.

00:21:52.040 --> 00:21:55.260
And it's a SQL-based database.

00:21:55.290 --> 00:21:59.120
So everything you know about SQL,
the language only almost 30

00:21:59.120 --> 00:22:02.550
years old now that we love,
we're talking structured data,

00:22:02.550 --> 00:22:06.060
data with relations, tons of data,
manipulating megabytes

00:22:06.060 --> 00:22:09.700
of data in JavaScript,
not a problem, is asynchronous.

00:22:10.270 --> 00:22:11.850
We need to be fast.

00:22:11.850 --> 00:22:13.300
We can never freeze up the UI.

00:22:13.300 --> 00:22:16.520
And we're moving this data around
and there's processing involved.

00:22:16.610 --> 00:22:20.340
So you have to provide some callbacks
to help move the process along.

00:22:20.340 --> 00:22:21.420
We'll see how that works.

00:22:22.870 --> 00:22:25.540
And like everything else,
same origin-based security.

00:22:25.560 --> 00:22:29.790
So documents from your domain
and your users are gonna be the

00:22:29.820 --> 00:22:31.950
only ones who can see your data.

00:22:32.380 --> 00:22:35.450
And when we say SQL-based, we mean SQL.

00:22:35.540 --> 00:22:39.300
We got tables that you can
create and modify and drop,

00:22:39.360 --> 00:22:42.900
and we got rows of data to
insert and select and update.

00:22:42.970 --> 00:22:45.520
And there's definitely indexes
when you can give the engine

00:22:45.520 --> 00:22:48.850
performance sense about your schema,
and also triggers, of course,

00:22:48.920 --> 00:22:50.430
to keep data in sync.

00:22:50.510 --> 00:22:53.350
And they're definitely our transactions.

00:22:53.640 --> 00:22:55.840
In fact, they're built into the API.

00:22:55.840 --> 00:22:58.280
We won't let you forget about them.

00:22:58.970 --> 00:23:03.220
So there's some advantages to keeping
complex data on the client side.

00:23:03.280 --> 00:23:05.250
Some developers come to me and they say,
you know,

00:23:05.300 --> 00:23:06.790
my data needs to live in the cloud.

00:23:06.820 --> 00:23:08.030
I've got these remote servers.

00:23:08.090 --> 00:23:11.850
This rich content needs to be there
to sync back down to some other

00:23:11.850 --> 00:23:13.870
browser later or to be shared.

00:23:14.200 --> 00:23:16.470
But that can be slow sometimes, right?

00:23:16.560 --> 00:23:19.200
So when we're keeping the data local,
we're avoiding the network.

00:23:19.340 --> 00:23:21.920
The order of magnitude is
slower than a client machine.

00:23:21.970 --> 00:23:25.500
And modern hardware can definitely
handle the data for just one user.

00:23:25.750 --> 00:23:29.670
These massive server database
backends are for thousands of users.

00:23:29.680 --> 00:23:34.100
So just one user,
not a problem in the browser.

00:23:34.120 --> 00:23:38.180
Plus,
manipulating the structured data is--

00:23:38.240 --> 00:23:41.040
it's a lot easier if you just need
to do some manipulation to keep it

00:23:41.040 --> 00:23:45.240
on the client side and avoid a round
trip just for that type of thing.

00:23:45.270 --> 00:23:46.780
There is some less complexity.

00:23:46.780 --> 00:23:48.100
We are avoiding that round trip.

00:23:48.100 --> 00:23:50.420
We don't have to design an XHR protocol.

00:23:50.490 --> 00:23:54.690
We don't have to design a server backend,
all that type of stuff.

00:23:54.740 --> 00:23:58.190
One example of where caching data,
even though it needs to live

00:23:58.190 --> 00:24:00.980
in the cloud eventually,
is like a web mail application.

00:24:00.980 --> 00:24:05.510
When you're writing an email draft
and you see the little spinny start

00:24:05.520 --> 00:24:08.590
going and it's sending your draft
off to the server every few seconds,

00:24:08.590 --> 00:24:10.020
that's kind of insane, right?

00:24:10.020 --> 00:24:12.920
What if we just cached it locally
and sent it off when it was done?

00:24:13.020 --> 00:24:17.010
So we can avoid a lot of the
complexity when it suits us.

00:24:17.350 --> 00:24:21.090
And finally, in the title of this talk,
this data is offline.

00:24:21.220 --> 00:24:22.760
There is no network involved here.

00:24:22.830 --> 00:24:26.030
And there's some great advantages
we can get out of that.

00:24:27.570 --> 00:24:29.100
So this is a mail application.

00:24:29.110 --> 00:24:30.760
I've loved .magmails for years now.

00:24:30.990 --> 00:24:31.430
I use it.

00:24:31.460 --> 00:24:33.250
It's my favorite web mail application.

00:24:33.260 --> 00:24:37.490
And it's because it looks
and feels and acts a lot like

00:24:37.490 --> 00:24:38.940
a native mail application.

00:24:38.940 --> 00:24:43.470
But there's something a native
mail application can do that no web

00:24:43.470 --> 00:24:46.130
mail application can do until now.

00:24:46.430 --> 00:24:50.660
And that is store data offline,
store messages offline.

00:24:50.660 --> 00:24:56.010
Let me write new messages,
reply to messages offline, no network.

00:24:56.540 --> 00:25:01.870
I commonly download my email to
mail.app on OS X Leopard and then

00:25:02.210 --> 00:25:05.240
on the bus on the way to work where
there is no network connection,

00:25:05.240 --> 00:25:07.340
I'll write new emails and
they'll get shipped off when

00:25:07.340 --> 00:25:08.340
the network connection shows up.

00:25:08.450 --> 00:25:12.110
So why shouldn't a web mail application
be able to do the same thing?

00:25:12.120 --> 00:25:14.350
Let's walk through an
exercise real quick.

00:25:14.450 --> 00:25:17.710
We'll see how we might augment a
web mail application to do that.

00:25:17.760 --> 00:25:20.230
So if we're going to be
storing data in a database,

00:25:20.230 --> 00:25:21.240
we need a database.

00:25:22.700 --> 00:25:24.140
This is an introduction to the API.

00:25:24.140 --> 00:25:28.120
There's a new global window
object call open database.

00:25:28.550 --> 00:25:30.270
This is the mail database.

00:25:30.280 --> 00:25:32.200
It's an internal
identifier for our script.

00:25:32.270 --> 00:25:35.000
So we come back to the mail
database later at any time.

00:25:35.190 --> 00:25:37.570
It'll be the same database as here.

00:25:38.240 --> 00:25:41.410
These two nuggets of data,
the display name, expected size,

00:25:41.420 --> 00:25:45.180
these are to give the users hints in case
the browser wants to prompt them about,

00:25:45.180 --> 00:25:46.740
you know,
this website's going to store data.

00:25:46.740 --> 00:25:48.280
Here's why and here's how much.

00:25:48.280 --> 00:25:50.140
And the user can make
an informed decision.

00:25:50.140 --> 00:25:52.560
And then you call open database.

00:25:52.560 --> 00:25:55.880
The bare minimum, though,
is just having a database name.

00:25:55.960 --> 00:25:58.060
That's the important identifier.

00:25:58.400 --> 00:26:00.240
So we have our database handle.

00:26:00.240 --> 00:26:01.240
What can we do with it?

00:26:01.330 --> 00:26:05.220
Transactions are built into the API,
and that's what we do with our database

00:26:05.220 --> 00:26:07.140
handle is we open a transaction.

00:26:07.140 --> 00:26:10.260
This is also your first
introduction to the callbacks.

00:26:10.320 --> 00:26:13.340
We keep things asynchronous
so the browser never locks

00:26:13.350 --> 00:26:15.000
up processing this data.

00:26:15.020 --> 00:26:17.270
Transaction callback,
it'll be called when the

00:26:17.270 --> 00:26:20.210
transaction to the database is
open and you're ready to go.

00:26:20.220 --> 00:26:24.860
Transaction error callback in
case something really bad happens.

00:26:24.860 --> 00:26:28.380
The database will be okay and safe,
but you can still be notified about it.

00:26:28.380 --> 00:26:31.610
And then the completion callback,
when those bits are on the disk and

00:26:31.610 --> 00:26:34.920
the transaction is complete and you
can let your users navigate away,

00:26:34.920 --> 00:26:37.020
the completion callback will be called.

00:26:38.770 --> 00:26:39.890
So we have our open database handle.

00:26:39.960 --> 00:26:42.480
Let's start running some SQL.

00:26:42.520 --> 00:26:45.350
Many of you know SQL,
and this is where you do it.

00:26:45.500 --> 00:26:48.150
I've got my query here to
create a messages table

00:26:48.210 --> 00:26:50.160
inside of my mail database.

00:26:50.280 --> 00:26:55.080
Simple ID, the subject text,
the recipients, and the body.

00:26:55.100 --> 00:26:58.040
And then I call execute
SQL on the transaction object.

00:26:58.080 --> 00:27:01.390
And now I have a full database
running inside of the web browser

00:27:01.730 --> 00:27:04.490
simply with a JavaScript interface.

00:27:05.870 --> 00:27:07.750
And here's something else.

00:27:07.750 --> 00:27:11.350
You're probably familiar with
a SQL query with arguments.

00:27:11.540 --> 00:27:13.660
You know, efficiency's sake,
you can reuse the same

00:27:13.660 --> 00:27:16.730
query over and over,
put different data in the query.

00:27:16.830 --> 00:27:19.800
So here I'm inserting my
email message to my father.

00:27:19.800 --> 00:27:23.230
By the way, Father's Day is this Sunday,
and your fathers have all called

00:27:23.240 --> 00:27:26.130
me and told me to remind you,
so don't you dare forget.

00:27:26.220 --> 00:27:29.900
So I've got the email message to
my father in a JavaScript array.

00:27:30.110 --> 00:27:33.050
These are the arguments to be filled in
with these question mark placeholders

00:27:33.420 --> 00:27:39.460
and the second form of execute
SQL to do arguments in your query.

00:27:39.950 --> 00:27:41.780
There's a third form
of execute SQL as well,

00:27:41.860 --> 00:27:42.960
a statement callback.

00:27:43.100 --> 00:27:45.730
What's good is putting data in
if we can't get the data out.

00:27:45.880 --> 00:27:48.120
So this is the form you
need to use to get that,

00:27:48.160 --> 00:27:52.080
and you get a SQL result set object to
get information out of the database.

00:27:53.320 --> 00:27:54.510
There's also a fourth form.

00:27:54.510 --> 00:27:56.660
An individual statement can fail.

00:27:56.860 --> 00:27:59.290
You might have mistyped the query.

00:27:59.370 --> 00:28:01.760
The schema might have
changed underneath your feet,

00:28:01.760 --> 00:28:04.840
or there might be no more
space left for an insert.

00:28:04.900 --> 00:28:06.920
So you can be notified about that error.

00:28:06.920 --> 00:28:07.620
Return false.

00:28:07.620 --> 00:28:09.820
Tell the browser, you know,
I handled the error.

00:28:09.820 --> 00:28:11.270
Keep running this transaction.

00:28:11.290 --> 00:28:13.420
Or if you decide you want to abort it,
return true,

00:28:13.420 --> 00:28:15.250
and you will jump out of the transaction.

00:28:15.270 --> 00:28:18.370
It will be safely rolled back,
like any transaction in any

00:28:18.370 --> 00:28:20.040
great relational database.

00:28:20.040 --> 00:28:21.600
And that's it.

00:28:23.690 --> 00:28:27.710
So the mail application is one example
of a great web app that can be enhanced

00:28:28.060 --> 00:28:30.180
by using offline database storage.

00:28:30.240 --> 00:28:33.170
Another example I could
think of is a web calendar.

00:28:33.350 --> 00:28:34.370
These are catching on too.

00:28:34.590 --> 00:28:38.190
So my esteemed colleague, Ada Chan,
a fellow Safari and WebKit engineer,

00:28:38.200 --> 00:28:40.450
has cooked up a really cool demo of that.

00:28:40.580 --> 00:28:43.310
And I'd like to invite
her to show it to us now.

00:28:51.130 --> 00:28:52.400
So good afternoon.

00:28:52.430 --> 00:28:55.120
My name is Ada Chan,
and today I'm going to show you a

00:28:55.120 --> 00:28:59.900
calendar web application that makes
use of the HTML5 client-side database

00:28:59.900 --> 00:29:02.640
feature that Brady just talked about.

00:29:06.350 --> 00:29:10.040
So here's my calendar application.

00:29:10.070 --> 00:29:14.000
Even though this looks pretty similar
to a native calendar application,

00:29:14.150 --> 00:29:18.840
I want to remind you that this is a
live web application running on Safari,

00:29:18.870 --> 00:29:24.980
and it's built only on web standards,
which includes HTML, CSS, JavaScript,

00:29:25.020 --> 00:29:28.080
and HTML5 client-side database.

00:29:28.330 --> 00:29:31.990
So let me show you some of the
things you can do in this calendar.

00:29:32.520 --> 00:29:35.900
You can browse the different
months in the calendar by pressing

00:29:36.000 --> 00:29:38.220
the back and forth buttons.

00:29:39.910 --> 00:29:43.890
You can view details of an existing
event by double clicking on it,

00:29:43.990 --> 00:29:45.820
and you can update
anything in your event.

00:29:45.940 --> 00:29:47.700
For example,
I'm going to change the title

00:29:47.700 --> 00:29:52.400
of today's talk to be something
a little bit more exciting.

00:29:59.500 --> 00:30:01.760
I can also create a new event.

00:30:01.800 --> 00:30:05.880
For example, I'm going to double click on
today and add a reminder to go

00:30:05.880 --> 00:30:08.580
to the WWDC party later tonight.

00:30:08.580 --> 00:30:10.920
It's going to be an awesome party.

00:30:10.920 --> 00:30:15.090
It will be at Yerba Buena
Gardens at 5th and Howard,

00:30:15.170 --> 00:30:17.300
San Francisco.

00:30:17.300 --> 00:30:23.760
I'm going to get there at around 6:30,
leave it around 9:30.

00:30:23.760 --> 00:30:25.960
And this is a work event.

00:30:25.960 --> 00:30:33.540
And I'm going to mingle with
other cool folks from WWDC.

00:30:35.360 --> 00:30:39.520
So one advantage of this being a web
application is it's pretty simple

00:30:39.630 --> 00:30:41.830
to embed other web content in it.

00:30:41.990 --> 00:30:47.100
For example, I added Google Maps to
my calendar application.

00:30:53.630 --> 00:30:54.840
I can also delete an event.

00:30:55.060 --> 00:30:56.980
For example,
my dinner tomorrow got canceled,

00:30:57.010 --> 00:31:00.380
so I'm gonna select it and press
the delete key to delete it.

00:31:01.320 --> 00:31:05.120
So all the data you see here
is stored on the client.

00:31:05.120 --> 00:31:09.520
And that's pretty nice because
access to the data is really fast.

00:31:09.520 --> 00:31:14.120
And even when the user is offline,
the data is still available.

00:31:14.130 --> 00:31:17.930
So what are some of the requirements
for storing this type of data?

00:31:17.980 --> 00:31:22.120
Well, as you can imagine,
data for a calendar is quite structured.

00:31:22.120 --> 00:31:25.930
Each calendar event contains
attributes such as the event name,

00:31:26.180 --> 00:31:29.000
the location, the start and end times.

00:31:29.000 --> 00:31:32.350
And it's pretty important to preserve
the structure of this data in order

00:31:32.350 --> 00:31:36.910
to do things like fetch all the events
to display for the current month.

00:31:37.360 --> 00:31:40.770
It would be difficult to do something
like that if I have to organize my

00:31:40.810 --> 00:31:45.450
data into key value pairs to be stored
into things like cookies or the storage

00:31:45.530 --> 00:31:47.820
interface that we talked about earlier.

00:31:47.900 --> 00:31:50.690
So the first requirement is to
preserve the data structure.

00:31:50.740 --> 00:31:56.170
Second requirement,
this data needs to be persistent.

00:31:56.250 --> 00:31:59.950
My users should be able to access
this calendar data years from

00:31:59.950 --> 00:32:02.080
now and it should still work.

00:32:02.290 --> 00:32:05.790
Third requirement,
we should not need to worry about any

00:32:05.790 --> 00:32:08.300
limitation on the size of this data.

00:32:08.320 --> 00:32:13.260
My users can potentially store years and
years of calendar data if they want to.

00:32:13.470 --> 00:32:17.880
Well, client-side database satisfies
all these requirements,

00:32:17.880 --> 00:32:21.230
and I'm going to show you how
we use it in this application.

00:32:23.340 --> 00:32:26.300
So let me fire up Xcode.

00:32:26.300 --> 00:32:31.940
And the first code example I'm going to
show you is how we open the database.

00:32:31.940 --> 00:32:36.260
Well, one good practice before using
client-side database is to check whether

00:32:36.260 --> 00:32:38.860
the browser supports it before using it.

00:32:38.860 --> 00:32:43.180
And one good way to do that is to check
for the existence of the open database

00:32:43.180 --> 00:32:45.920
method in the global window object.

00:32:45.920 --> 00:32:49.320
And after we have done that,
just call the open database method

00:32:49.320 --> 00:32:52.270
to open the calendar database.

00:32:52.390 --> 00:32:54.300
Pretty simple.

00:32:54.300 --> 00:32:58.190
Next example I want to show you
is how we insert a new event

00:32:58.280 --> 00:33:00.670
into the calendar database.

00:33:01.370 --> 00:33:05.620
What we need to do is to specify
a SQL transaction callback.

00:33:05.920 --> 00:33:10.540
This is a method that's going to describe
the transaction that you want to make,

00:33:10.590 --> 00:33:14.580
and it takes in one parameter,
which is the SQL transaction object,

00:33:14.620 --> 00:33:16.150
named Tx here.

00:33:16.640 --> 00:33:21.390
And we need to call the execute
SQL method on it with two arguments.

00:33:22.380 --> 00:33:26.700
First, the SQL statement that
we want to execute.

00:33:26.700 --> 00:33:31.700
And second is a list of arguments
to the SQL statement above.

00:33:31.730 --> 00:33:35.490
And the question mark placeholder is a
really good feature to use because it

00:33:35.490 --> 00:33:40.150
also prevents SQL injection attacks,
something that we're all very scared of.

00:33:40.330 --> 00:33:44.650
So, and finally,
we need to call the transaction method on

00:33:44.650 --> 00:33:49.600
a database object with a SQL transaction
callback method that we just specified.

00:33:51.010 --> 00:33:54.340
So the next piece I want to show
you is how we fetch all the events

00:33:54.440 --> 00:33:56.720
to display for the current month.

00:33:57.170 --> 00:34:02.880
This is another example of executing
a SQL statement on a database.

00:34:02.960 --> 00:34:07.170
But this time,
we need to process the result

00:34:07.210 --> 00:34:09.830
from the database query too.

00:34:10.010 --> 00:34:14.400
Our execute SQL method this
time takes in a third argument,

00:34:14.400 --> 00:34:18.160
which is the SQL statement callback.

00:34:18.170 --> 00:34:20.280
This is the method that's
going to process the result

00:34:20.520 --> 00:34:21.980
from the database query.

00:34:21.980 --> 00:34:26.100
And it takes in two parameters,
the SQL transaction object

00:34:26.100 --> 00:34:28.360
and the SQL result set.

00:34:28.560 --> 00:34:32.920
The tabular results from the database
query can be accessed via the rows

00:34:33.000 --> 00:34:35.660
property in the SQL result set.

00:34:37.070 --> 00:34:41.410
So hopefully the last two code snippets
give you a pretty good idea on how to

00:34:41.410 --> 00:34:44.680
execute SQL transactions on a database.

00:34:44.690 --> 00:34:46.700
Well,
there's one more thing I haven't shown

00:34:46.700 --> 00:34:51.650
you yet in this calendar application,
which is--

00:34:52.250 --> 00:34:54.900
We have search.

00:34:54.920 --> 00:34:59.200
I can easily search for all my events
that contain a particular keyword.

00:34:59.320 --> 00:35:03.820
For example, here are all my WWDC events.

00:35:03.820 --> 00:35:07.810
And next, I'm going to search for the

00:35:08.370 --> 00:35:11.700
For all my events that takes
place in San Francisco,

00:35:11.720 --> 00:35:18.060
so I'm going to type in San Francisco,
huh, but I don't get anything.

00:35:18.100 --> 00:35:20.520
Well, I'm pretty sure this list
should not be empty because,

00:35:20.520 --> 00:35:23.770
well, WWDC is in San Francisco.

00:35:23.900 --> 00:35:30.570
So let me go to my code again
and figure out what's wrong here.

00:35:31.390 --> 00:35:36.510
So this is the SQL query that
I'm using to search for all my

00:35:36.620 --> 00:35:39.460
events based on the user input.

00:35:39.460 --> 00:35:43.540
And it looks like I'm only matching
the event title and the event details,

00:35:43.560 --> 00:35:45.610
but not the event location.

00:35:45.680 --> 00:35:50.810
So let me fix that really quickly
by extending my condition to also

00:35:51.030 --> 00:35:53.690
check for the event location.

00:35:54.750 --> 00:35:57.990
And I have now a new argument,
so I need to update the

00:35:57.990 --> 00:35:59.680
list of arguments down here.

00:35:59.760 --> 00:36:04.300
I'm going to save the file
and go back to the page,

00:36:04.300 --> 00:36:08.650
reload it, and try my search again.

00:36:11.670 --> 00:36:14.940
And boom,
here are all my San Francisco events.

00:36:14.940 --> 00:36:23.240
So notice how a powerful new aspect
of my search can be added just

00:36:23.350 --> 00:36:25.840
with a small code change like this.

00:36:25.950 --> 00:36:29.640
This really demonstrates the power
of a relational database and the

00:36:29.750 --> 00:36:33.120
flexibility of the SQL language
to manipulate that database.

00:36:33.190 --> 00:36:35.790
And this is really cool stuff.

00:36:36.060 --> 00:36:39.870
So hopefully at this point,
you're all so excited about the

00:36:39.870 --> 00:36:42.990
client-side database feature that
you want to add it to your web

00:36:42.990 --> 00:36:45.800
application and try it out in Safari.

00:36:45.840 --> 00:36:48.990
But as web developers,
you love debugging tools,

00:36:48.990 --> 00:36:53.120
and you wish there could be a debugging
tool to help you inspect the database.

00:36:53.160 --> 00:36:56.970
Well, I hate to disappoint any of you,
so I'm going to show you a new

00:36:56.970 --> 00:37:02.560
database feature in our newest
and greatest Web Inspector.

00:37:02.680 --> 00:37:05.310
So let me pull up Web Inspector.

00:37:06.220 --> 00:37:11.530
So notice we have a new panel now called

00:37:12.690 --> 00:37:14.640
Databases.

00:37:14.690 --> 00:37:21.110
It lists all the databases that
are currently opened by the page.

00:37:21.620 --> 00:37:23.500
And when you expand it,
it shows you a list of

00:37:23.560 --> 00:37:25.740
tables under that database.

00:37:25.780 --> 00:37:29.880
And by selecting a table,
you see all the data in that table.

00:37:29.940 --> 00:37:33.480
But let me show you
something even cooler.

00:37:33.520 --> 00:37:36.790
When you select the database,

00:37:37.320 --> 00:37:39.600
A prompt shows up on the right-hand side.

00:37:39.620 --> 00:37:43.160
You can start typing in your
own SQL query to inspect the

00:37:43.370 --> 00:37:45.400
database in any way you want.

00:37:45.440 --> 00:37:48.690
And it even comes with tab completion.

00:37:52.300 --> 00:37:55.300
This is really, really awesome.

00:37:55.400 --> 00:37:58.190
So I hope that was a good
introduction on how to use client-side

00:37:58.260 --> 00:37:59.960
database in your web application.

00:38:00.190 --> 00:38:04.580
And now I'm going to give
the stage back to Brady for

00:38:04.580 --> 00:38:04.580
the rest of the presentation.

00:38:09.100 --> 00:38:10.800
Thanks, Ada.

00:38:10.890 --> 00:38:13.750
So that was pretty cool.

00:38:13.790 --> 00:38:18.400
What we saw was some pretty rich
data being manipulated on the

00:38:18.470 --> 00:38:20.200
client side in the web browser.

00:38:20.340 --> 00:38:23.440
These events have a lot of structure,
and we can have tons of these events.

00:38:23.620 --> 00:38:27.570
And the databases on the client
side are not going to skip a beat.

00:38:27.990 --> 00:38:31.330
And we also saw the power
of these complex queries.

00:38:31.440 --> 00:38:34.560
The stuff, the power you're using,
you're used to using on the

00:38:34.560 --> 00:38:37.200
server side when you have a
database at your disposal,

00:38:37.200 --> 00:38:41.430
just manipulating this data as a piece of
cake with the structured query language.

00:38:41.440 --> 00:38:42.650
That's what it was designed for.

00:38:42.780 --> 00:38:46.460
That search augmentation, for example,
that was just really cool and easy.

00:38:46.460 --> 00:38:47.170
I love that.

00:38:47.200 --> 00:38:50.950
There was no plugins here,
and this is all standard web technology.

00:38:50.950 --> 00:38:53.370
Probably my favorite
aspects of this demo.

00:38:53.420 --> 00:38:57.310
This thing is just pure web all the way,
and that's just pretty cool.

00:38:59.290 --> 00:39:02.040
There's a few more points about
the client-side databases I'd like

00:39:02.040 --> 00:39:03.980
to talk about before we move on.

00:39:04.000 --> 00:39:08.130
There is no standard HTML5 SQL dialect.

00:39:08.140 --> 00:39:11.930
If you're very familiar with databases,
you're familiar with the different

00:39:12.380 --> 00:39:16.310
database engines have incompatibilities
between their dialects.

00:39:16.450 --> 00:39:19.120
The standards group
is very aware of this,

00:39:19.120 --> 00:39:22.420
and we hope to come up with
a subset for the dialect,

00:39:22.420 --> 00:39:24.270
but there isn't one yet.

00:39:24.280 --> 00:39:27.670
Right now, in WebKit, we're using SQLite.

00:39:27.880 --> 00:39:30.530
It's a very fast, very modern,
very mature,

00:39:30.530 --> 00:39:34.360
and very stable database engine
that is a piece of cake to embed,

00:39:34.360 --> 00:39:38.460
and it supports a very simple
subset of most SQL dialects.

00:39:38.460 --> 00:39:41.440
So if it works in SQLite,
it's probably going to work everywhere.

00:39:41.440 --> 00:39:43.080
So it's a good thing to keep in mind.

00:39:43.080 --> 00:39:46.370
We had to disable a couple
things for sanity's sake.

00:39:46.440 --> 00:39:51.340
The standard says disable, begin, commit,
and rollback, and we couldn't agree more.

00:39:51.340 --> 00:39:53.500
The transactions are built into the API.

00:39:53.500 --> 00:39:56.620
We're not going to let you
manipulate them directly in SQL.

00:39:57.640 --> 00:39:59.900
If you're familiar
specifically with SQLite,

00:39:59.970 --> 00:40:03.130
there's these pragma statements
that go behind the scenes and let

00:40:03.140 --> 00:40:06.780
you tweak the performance of SQLite
and look at internal workings.

00:40:06.780 --> 00:40:08.200
We don't need to allow that.

00:40:08.250 --> 00:40:10.980
This is the web,
and we should be worried about the data.

00:40:12.410 --> 00:40:14.840
And in the same vein,
there's the attach and detach and

00:40:14.840 --> 00:40:18.560
virtual tables features of SQLite,
which are very powerful

00:40:18.560 --> 00:40:21.050
native C API things,
but we couldn't find a place

00:40:21.050 --> 00:40:24.580
for them on the web quite yet,
so those are also disabled.

00:40:24.870 --> 00:40:28.400
And in a nutshell,
that is the HTML5 standard

00:40:28.400 --> 00:40:30.340
client-side databases.

00:40:30.560 --> 00:40:35.080
So these things combined
with the local storage,

00:40:35.140 --> 00:40:37.750
we now have a couple great
ways for the persistent,

00:40:37.830 --> 00:40:42.580
reliable, predictable storage of
data on the client side.

00:40:42.700 --> 00:40:45.360
And some of you might be on the
edge of your chair saying to myself,

00:40:45.360 --> 00:40:46.680
OK, I can store all this data offline.

00:40:46.680 --> 00:40:47.460
I'm getting excited.

00:40:47.460 --> 00:40:49.520
What else can I store offline?

00:40:49.590 --> 00:40:51.440
And there is something else.

00:40:51.470 --> 00:40:54.440
I mentioned the name earlier,
and now we're going to go into

00:40:54.440 --> 00:40:58.080
a little more detail about
the HTML5 application cache.

00:40:58.190 --> 00:41:02.600
So before we talk about that,
let's talk about what an application is.

00:41:02.680 --> 00:41:05.670
Web application, for example,
has all these different resources,

00:41:05.750 --> 00:41:07.990
much like native applications these days.

00:41:08.080 --> 00:41:11.300
Media and content,
like our HTML for our content,

00:41:11.300 --> 00:41:14.100
our CSS for our style,
our JavaScript for our control,

00:41:14.200 --> 00:41:15.060
and all the images.

00:41:15.200 --> 00:41:18.230
And they all come together in
this bundle that make up what

00:41:18.310 --> 00:41:21.300
we now call a web application.

00:41:22.380 --> 00:41:25.000
So the application cache,
we're giving it to you for the first

00:41:25.100 --> 00:41:28.970
time in the Safari 4 developer preview,
is a standard way to store your

00:41:28.990 --> 00:41:31.790
entire web application offline.

00:41:32.030 --> 00:41:34.130
Pretty cool stuff.

00:41:38.770 --> 00:41:43.140
So all you need to do to get this to
work with your current web application,

00:41:43.170 --> 00:41:46.690
you need to specify a manifest
of resources to list every single

00:41:46.690 --> 00:41:49.840
one of these resources that your
web application needs to run.

00:41:49.840 --> 00:41:53.470
Application cache also
provides a mechanism for atomic

00:41:53.470 --> 00:41:55.620
updating of the application.

00:41:55.620 --> 00:41:58.820
So, you know, in college I was working
on a huge web app,

00:41:58.820 --> 00:42:01.080
had thousands of different files.

00:42:01.100 --> 00:42:04.150
Late at night, not enough caffeine,
I made a few tweaks here and there,

00:42:04.150 --> 00:42:06.520
a couple different files,
refresh it in the browser,

00:42:06.520 --> 00:42:08.160
and I was so confused.

00:42:08.160 --> 00:42:09.570
Because it broke.

00:42:09.580 --> 00:42:11.740
Because I kind of got this hybrid, right?

00:42:11.860 --> 00:42:13.980
Some old resources, some new resources.

00:42:14.060 --> 00:42:16.730
So the atomic updating is
going to solve that problem,

00:42:16.820 --> 00:42:18.770
keep the entire application in sync.

00:42:18.840 --> 00:42:21.870
And now that we're moving
more and more things offline,

00:42:21.870 --> 00:42:24.000
we want to know when we're offline.

00:42:24.000 --> 00:42:27.390
So the application cache
spec also introduces online

00:42:27.390 --> 00:42:29.420
and offline network events.

00:42:29.420 --> 00:42:32.050
You can change the behavior
of your application on the

00:42:32.170 --> 00:42:35.400
fly to act like it's offline,
to make different decisions.

00:42:35.400 --> 00:42:37.980
And then you'll get the online
event when a network is again.

00:42:38.160 --> 00:42:42.060
This is all I'm going to talk
about this because it's so simple.

00:42:42.060 --> 00:42:44.880
You just listen for the event
at event listener online or

00:42:44.880 --> 00:42:46.410
at event listener offline.

00:42:46.640 --> 00:42:48.020
That's all you need to get that to work.

00:42:48.060 --> 00:42:49.160
Okay.

00:42:49.780 --> 00:42:51.780
So what is this manifest of resources?

00:42:51.780 --> 00:42:54.960
We call it the resource manifest,
quizzically enough.

00:42:55.020 --> 00:42:58.480
It's just a text file
with a couple URLs in it.

00:42:58.780 --> 00:43:01.030
Well,
every URL of every resource you need,

00:43:01.030 --> 00:43:03.520
but it's just a list of
these URLs in a file.

00:43:03.520 --> 00:43:06.340
They can be absolute, relative,
on a different domain even.

00:43:06.340 --> 00:43:08.270
It's just a text list.

00:43:08.420 --> 00:43:12.250
We're making it very clear that
you're very specifically opting

00:43:12.290 --> 00:43:15.760
into the application cache,
so you need to make a server tweak, too,

00:43:15.760 --> 00:43:19.920
and serve this text file
with the cache-manifest,

00:43:19.920 --> 00:43:23.620
I'm sorry,
text slash cache-manifest mime type,

00:43:23.700 --> 00:43:25.770
and the browser will
recognize it as valid.

00:43:25.780 --> 00:43:30.910
So this list has two
types of entries in it.

00:43:31.290 --> 00:43:34.320
First is the explicit entry,
or the cache entry.

00:43:34.360 --> 00:43:37.680
These are the critical resources
to our web application that we must

00:43:37.750 --> 00:43:39.960
store offline for it to operate.

00:43:39.980 --> 00:43:42.650
When these are stored offline,
the browser will ignore the network

00:43:42.740 --> 00:43:46.780
when fetching these resources and
always get the locally cached copy.

00:43:46.780 --> 00:43:50.120
But then on the opposite end,
we have the online whitelist entries,

00:43:50.120 --> 00:43:51.400
or the network entries.

00:43:51.440 --> 00:43:55.230
These are dynamic resources that
are about up-to-date information,

00:43:55.310 --> 00:43:58.280
stock quotes, weather forecasts,
that type of thing,

00:43:58.310 --> 00:44:00.130
that it wouldn't make any
sense to store offline.

00:44:00.270 --> 00:44:02.790
So this will tell the browser,
treat this like a normal resource,

00:44:02.800 --> 00:44:05.280
we'll always get it from the network.

00:44:05.280 --> 00:44:07.900
When the network is available, of course.

00:44:07.940 --> 00:44:09.980
So this resource manifest,
here's a quick example.

00:44:10.030 --> 00:44:12.680
Start out with cache
manifest up at the top,

00:44:12.700 --> 00:44:15.410
and then list your URLs.

00:44:15.620 --> 00:44:19.730
Can see here I have my HTML,
my JavaScript, my CSS, some images,

00:44:19.860 --> 00:44:22.990
even a self-portrait
from a different website.

00:44:23.240 --> 00:44:26.920
And you can also specify those
two sections I was talking about.

00:44:27.100 --> 00:44:29.600
The explicit entries are also
the default entries back in

00:44:29.760 --> 00:44:30.930
the list I just showed you.

00:44:30.940 --> 00:44:33.820
These are explicit
offline cached entries.

00:44:33.820 --> 00:44:38.740
And then you list those network entries,
the dynamic things that you always

00:44:38.740 --> 00:44:40.950
want to fetch from the network.

00:44:42.980 --> 00:44:45.540
How do you specify your resource
manifest now that you've worked

00:44:45.640 --> 00:44:47.290
really hard in this text file?

00:44:47.390 --> 00:44:50.080
Some of you are probably
familiar with the HTML element.

00:44:50.160 --> 00:44:52.280
Hopefully most of you are.

00:44:52.510 --> 00:44:57.420
The loneliest and simplest and nakedest
of the elements in HTML without

00:44:57.420 --> 00:45:01.710
any official standard attributes,
until now.

00:45:01.930 --> 00:45:06.070
Specify the URL to your manifest file
with the manifest attribute on HTML,

00:45:06.080 --> 00:45:09.520
and you've just activated the
powerful method of storing your

00:45:09.530 --> 00:45:10.810
entire application offline.

00:45:12.660 --> 00:45:15.110
Now this update process I touched on.

00:45:15.220 --> 00:45:16.940
So you turn on the application cache.

00:45:16.940 --> 00:45:19.960
Your user visits the URL of
your web application.

00:45:20.110 --> 00:45:22.340
The browser says, hey,
there's a manifest here.

00:45:22.400 --> 00:45:23.320
These guys are cool.

00:45:23.320 --> 00:45:25.430
I'm going to start caching
this application offline.

00:45:25.510 --> 00:45:27.420
So it starts storing everything away.

00:45:27.470 --> 00:45:29.520
Now when your user
revisits your site later,

00:45:29.670 --> 00:45:32.070
the browser will recognize
this in the cache and load

00:45:32.070 --> 00:45:34.520
these locally stored resources.

00:45:34.600 --> 00:45:37.700
But it will also start the
update process automatically

00:45:37.910 --> 00:45:39.240
if the network is available.

00:45:39.290 --> 00:45:44.280
It'll go out to your website and
fetch a new manifest if it exists.

00:45:44.480 --> 00:45:48.000
And if it does, it'll start fetching the
new resources as well.

00:45:48.180 --> 00:45:52.420
Using the application cache object
on the global window object,

00:45:52.580 --> 00:45:56.180
you can monitor the status
of this update process.

00:45:56.240 --> 00:45:59.020
You can also listen in
to a couple of events.

00:45:59.130 --> 00:46:01.640
And then when it's done,
you need to add a tiny little

00:46:01.640 --> 00:46:06.800
JavaScript to actually perform the
atomic update of your application.

00:46:07.270 --> 00:46:08.060
So these are the events.

00:46:08.090 --> 00:46:10.720
There's also a status attribute
you can listen to if you want.

00:46:10.740 --> 00:46:12.640
You're probably most interested
in this last one here,

00:46:12.640 --> 00:46:13.770
onUpdateReady.

00:46:13.900 --> 00:46:16.890
If you just listen to it setting
the attribute on application

00:46:16.960 --> 00:46:20.430
cache to your event handler,
when the update is ready,

00:46:20.430 --> 00:46:22.300
you call swapCache.

00:46:22.330 --> 00:46:25.780
What this does is it throws out the
old version of your application,

00:46:25.830 --> 00:46:29.570
it slides in the new version,
and now you've just atomically

00:46:29.570 --> 00:46:32.470
upgraded your entire web application.

00:46:33.870 --> 00:46:36.140
So that's the application
cache in a nutshell.

00:46:36.170 --> 00:46:42.430
All of the resources that make up our
website in a tidy little package make up

00:46:42.740 --> 00:46:44.600
what we call a modern web application.

00:46:46.220 --> 00:46:48.270
And that's all I said I had
to talk to you about before.

00:46:48.420 --> 00:46:51.620
We're talking about offline data,
offline application cache resources,

00:46:51.620 --> 00:46:53.120
and this is great.

00:46:54.060 --> 00:46:56.460
I'm starting to get an idea,
talking about data and

00:46:56.460 --> 00:47:00.040
offline application,
and I feel something bubbling,

00:47:00.040 --> 00:47:02.680
and I have one more thing
to talk to you about.

00:47:02.820 --> 00:47:04.930
And all of a sudden,
some new possibilities

00:47:04.930 --> 00:47:06.140
are opening up here.

00:47:06.210 --> 00:47:08.080
If you've played around the
Safari for Developer Preview,

00:47:08.080 --> 00:47:11.720
you might have noticed the
Save As Web Application feature.

00:47:11.950 --> 00:47:14.420
What if that application that
lived on the desktop was a

00:47:14.490 --> 00:47:18.390
standalone offline web application?

00:47:18.700 --> 00:47:21.360
So many users out there launch
the browser in the morning,

00:47:21.360 --> 00:47:24.430
they go and check Gmail,
and that's all they do all day.

00:47:24.730 --> 00:47:27.380
95% of their browsing is one, two,
or three websites.

00:47:27.380 --> 00:47:30.150
And those users wish they could
just store that little icon for

00:47:30.150 --> 00:47:33.460
what's important to them in their
dock and just launch it from there.

00:47:33.460 --> 00:47:35.240
They don't care about
browsing the whole internet.

00:47:35.240 --> 00:47:38.570
They'll look for I can't hash
cheeseburger later at night after work.

00:47:38.660 --> 00:47:41.100
They just want to check
their mail from their dock.

00:47:41.200 --> 00:47:43.610
So that's what the Save as
Web Application feature

00:47:43.610 --> 00:47:44.830
in Safari 4 allows.

00:47:46.260 --> 00:47:51.690
And I hope that we can make that
web application entirely offline.

00:47:51.700 --> 00:47:53.350
It's now becoming possible.

00:47:54.790 --> 00:47:56.240
So let's bring this all together.

00:47:56.320 --> 00:48:00.560
We have our application
resources offline.

00:48:00.680 --> 00:48:04.560
We have all the data our users
and our application needs offline.

00:48:04.570 --> 00:48:07.790
We know when we're online and offline,
so we know how to change the

00:48:07.790 --> 00:48:09.480
behavior of our application.

00:48:10.330 --> 00:48:13.020
And what about the title and icon,
important things applications

00:48:13.020 --> 00:48:14.140
and the desktop have?

00:48:14.200 --> 00:48:18.770
HTML5 even has new standards to
specify a simple application title and

00:48:18.770 --> 00:48:21.900
a rich native desktop feeling icon.

00:48:22.050 --> 00:48:23.730
Let's have another demo really quick.

00:48:23.800 --> 00:48:25.750
I'd like to invite Ada back on stage.

00:48:25.850 --> 00:48:29.800
She's going to show you how to
make the offline calendar into

00:48:29.800 --> 00:48:32.590
a standalone offline calendar.

00:48:32.590 --> 00:48:32.590
Ada.

00:48:38.640 --> 00:48:40.360
Thank you again, Brady.

00:48:40.440 --> 00:48:43.300
So now I'm going to show you how
to turn the online calendar web

00:48:43.300 --> 00:48:48.260
application you saw earlier into a
standalone offline web application.

00:48:53.190 --> 00:48:59.150
So this is slightly different from
the previous version in that it has

00:48:59.150 --> 00:49:03.900
an online indicator to show whether
we're running online or offline.

00:49:03.910 --> 00:49:09.290
And this time, this is loaded from a
server on the network.

00:49:10.660 --> 00:49:14.170
So before we dive into the details,
let's think about how the

00:49:14.240 --> 00:49:18.030
combination of client-side storage
and application cache can be useful

00:49:18.030 --> 00:49:20.190
for this calendar application.

00:49:20.390 --> 00:49:24.400
By storing all the data on the client
and using the application cache so

00:49:24.420 --> 00:49:29.460
that we have all the resources we need
locally to run this application offline,

00:49:29.650 --> 00:49:33.380
now my users can access this
calendar application anywhere.

00:49:33.380 --> 00:49:36.090
When they're on the bus or
on the train or at the park

00:49:36.090 --> 00:49:39.800
with no network connectivity,
they can still pull up the calendar,

00:49:39.900 --> 00:49:42.580
view their events,
and change their events.

00:49:43.570 --> 00:49:47.390
And when they're back online,
as you can very easily imagine,

00:49:47.410 --> 00:49:51.490
this app could, in the background,
update the client data with the latest

00:49:51.590 --> 00:49:55.290
from the server and sync all the
user's changes back to the server.

00:49:55.320 --> 00:49:58.320
But to the users,
this web application runs

00:49:58.390 --> 00:50:02.010
just as well offline,
like a native application,

00:50:02.220 --> 00:50:03.810
and it's all seamless to them.

00:50:03.910 --> 00:50:06.310
So this is really cool.

00:50:06.620 --> 00:50:09.650
So now I'm going to show you
all the steps we need to take to

00:50:09.650 --> 00:50:14.070
turn this application into your
standalone offline web application.

00:50:14.290 --> 00:50:18.400
The first thing we need to do is
to specify a resource manifest.

00:50:18.780 --> 00:50:21.220
So here's how our manifest looks.

00:50:21.330 --> 00:50:23.020
It's very simple.

00:50:23.020 --> 00:50:26.920
This will be used by the user agent
to populate the application cache.

00:50:26.920 --> 00:50:29.680
And this one only
contains explicit entries,

00:50:29.680 --> 00:50:33.470
which are the resources that will be
added to the offline cache and will be

00:50:33.710 --> 00:50:36.360
retrieved locally when the page loads.

00:50:37.440 --> 00:50:42.610
So after we have our resource manifest,
we need to change our HTML.

00:50:42.840 --> 00:50:48.750
We need to set a manifest attribute
in our HTML element and set that to

00:50:48.750 --> 00:50:51.780
a URI of the resource manifest file.

00:50:52.330 --> 00:50:57.140
You may also want to specify a name
for your application with the meta tag

00:50:57.660 --> 00:51:01.600
with name equals application dash name.

00:51:02.200 --> 00:51:06.040
And a custom icon can also be
specified for your application

00:51:06.040 --> 00:51:10.800
with the link tag with rel="icon".

00:51:11.220 --> 00:51:15.250
And with all these changes-- oh,
and if you don't specify the icon,

00:51:15.250 --> 00:51:20.260
Safari will make a pretty one for you
based on the screenshot of your web page.

00:51:20.280 --> 00:51:23.080
And now with all these changes,
we are ready to turn this

00:51:23.080 --> 00:51:27.500
application into a standalone
offline web application.

00:51:27.500 --> 00:51:32.210
My users can just go to File,
Save as Web Application.

00:51:33.200 --> 00:51:35.120
Save.

00:51:35.130 --> 00:51:37.840
And now my application
automatically loads,

00:51:37.840 --> 00:51:42.080
and it's its own application,
this offline calendar application.

00:51:42.080 --> 00:51:46.460
And check out the dog.

00:51:46.460 --> 00:51:50.670
We have our own custom
icon for this application.

00:51:51.910 --> 00:51:57.540
And I can move this around just
like another native application.

00:51:57.600 --> 00:52:01.800
And it even shows up as one of
the opened applications on my app

00:52:01.960 --> 00:52:04.140
switcher when I press Command-Tab.

00:52:04.160 --> 00:52:07.190
And this is all really cool.

00:52:07.380 --> 00:52:10.470
And it's not dependent on
Safari running alongside with it,

00:52:10.630 --> 00:52:13.950
so I'm actually going to quit Safari now.

00:52:14.330 --> 00:52:17.070
And my application's still there,
still running.

00:52:17.370 --> 00:52:20.440
But to prove that this
can really work offline,

00:52:20.520 --> 00:52:26.820
I'm going to ask Brady to come up on
stage and actually cut the network cable

00:52:26.940 --> 00:52:30.900
so that we can really go offline here.

00:52:35.690 --> 00:52:38.650
So we should see the online
indicator change any time now.

00:52:38.870 --> 00:52:40.650
And it did.

00:52:45.200 --> 00:52:46.360
So now we're completely offline.

00:52:46.360 --> 00:52:50.760
I'm going to quit my
application and restart it.

00:52:51.120 --> 00:52:52.900
See, all my data is still there.

00:52:52.900 --> 00:52:56.140
I can still view all my events.

00:52:56.140 --> 00:52:59.340
I can still add a new event.

00:52:59.350 --> 00:53:03.350
And I'm not even online,
and things still works.

00:53:03.550 --> 00:53:07.930
So I hope that was a pretty good
introduction on how to use client-side

00:53:07.930 --> 00:53:13.100
storage and the application cache to make
your web application offline capable.

00:53:13.110 --> 00:53:16.360
And now I'm going to turn
the stage back to Brady.

00:53:22.780 --> 00:53:23.800
Thank you, Ada.

00:53:24.030 --> 00:53:26.220
Pretty cool.

00:53:26.290 --> 00:53:27.890
Pretty cool stuff.

00:53:28.090 --> 00:53:32.000
So what we saw was we saw this web
application-based offline calendar

00:53:32.000 --> 00:53:36.090
turn into just a standalone natively
integrated desktop application.

00:53:36.100 --> 00:53:37.440
It was really easy.

00:53:37.440 --> 00:53:40.840
Ada only had to add a couple
of lines of code to HTML.

00:53:40.840 --> 00:53:44.420
That new application name meta
attribute and the new format

00:53:44.420 --> 00:53:48.760
for that icon with the sizes,
those are now in the HTML5 standard.

00:53:49.540 --> 00:53:51.140
So those are very standard
ways of doing that.

00:53:51.140 --> 00:53:52.910
And yes, I cut the cable.

00:53:52.910 --> 00:53:55.020
There's no network required.

00:53:55.020 --> 00:53:59.130
This thing lives on your
client's machines and runs there.

00:53:59.130 --> 00:54:00.480
It's just beautiful.

00:54:03.460 --> 00:54:06.800
So we talked about some of the
solutions you as web developers

00:54:06.870 --> 00:54:08.950
have been using to handle data.

00:54:09.190 --> 00:54:10.930
They're all great technologies.

00:54:11.090 --> 00:54:13.910
They have their place and
they do some things really,

00:54:13.910 --> 00:54:14.750
really well.

00:54:14.750 --> 00:54:17.620
But there's been this gap in
the standards for the browser.

00:54:17.840 --> 00:54:19.640
So HTML5 is trying to fill that.

00:54:19.640 --> 00:54:22.530
We talked about the session
storage to replace cookies and

00:54:22.600 --> 00:54:25.720
the local storage for simple,
persistent key value storage,

00:54:25.790 --> 00:54:29.680
as simple as filing something away
and just using JavaScript objects.

00:54:29.680 --> 00:54:33.960
And then the power of a relational,
queryable database inside

00:54:33.980 --> 00:54:35.500
of the web browser.

00:54:35.520 --> 00:54:38.170
So many possibilities start to open up.

00:54:38.550 --> 00:54:39.680
It's awesome.

00:54:39.680 --> 00:54:42.340
And then the application cache.

00:54:42.340 --> 00:54:46.280
Every resource that we need to
make our web application run,

00:54:46.280 --> 00:54:47.800
stored in a package.

00:54:47.840 --> 00:54:51.650
offline on our users' machines.

00:54:52.150 --> 00:54:57.330
And then we can make a fully standalone
application that works without a network

00:54:57.610 --> 00:55:00.540
based entirely on web technologies.

00:55:00.590 --> 00:55:04.470
These are just some of the really
exciting directions that the web

00:55:04.680 --> 00:55:06.060
and web standards are headed.

00:55:06.120 --> 00:55:08.540
And I hope you're getting as
excited as I am and you want to

00:55:08.540 --> 00:55:10.850
try some of this cool stuff out.

00:55:11.960 --> 00:55:13.910
For more info,
we'd love to hear from you at

00:55:13.980 --> 00:55:16.760
the WebKit open source project,
including #WebKit,

00:55:16.760 --> 00:55:20.360
the coolest channel on Freenode.

00:55:20.500 --> 00:55:24.280
You can learn in detail about all
the standards that I've talked about

00:55:24.280 --> 00:55:27.990
today at the What Working group
with the HTML5 specification.

00:55:28.070 --> 00:55:31.360
Vicky Murley,
who plays a mean game of tic-tac-toe,

00:55:31.450 --> 00:55:34.710
would love to answer
any questions you have.

00:55:35.090 --> 00:55:37.880
And hope you stay in this room.

00:55:37.930 --> 00:55:39.760
After this session,
we're going to talk about the great

00:55:39.760 --> 00:55:43.860
new developer features in Safari 4,
including a lot more about

00:55:43.860 --> 00:55:45.100
the hot new Web Inspector.

00:55:45.100 --> 00:55:47.550
And then at 5 o'clock today,
we're going to have a quick

00:55:47.820 --> 00:55:49.260
lab about Offline Data.

00:55:49.260 --> 00:55:52.070
If you have any code or things
you want to talk to us about,

00:55:52.070 --> 00:55:53.040
we'll be there.

00:55:53.040 --> 00:55:55.910
Now I'd like to open it up to Q&A.