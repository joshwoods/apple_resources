WEBVTT

00:00:10.170 --> 00:00:12.500
Good morning.

00:00:12.630 --> 00:00:17.190
Welcome to Using Xcode:
Source Control Management, Debugging,

00:00:17.190 --> 00:00:19.500
Editing, and Refactoring.

00:00:20.480 --> 00:00:22.500
My name is Andrew Pontious.

00:00:22.550 --> 00:00:25.900
I am one of the managers
of the Xcode IDE.

00:00:26.470 --> 00:00:29.740
The goals for today's
session are as follows.

00:00:29.740 --> 00:00:33.730
We're going to show you how Xcode can
help you do your job better and be

00:00:33.770 --> 00:00:37.420
more productive at your everyday tasks.

00:00:37.550 --> 00:00:41.020
We're going to cover all the major
areas of Xcode functionality,

00:00:41.150 --> 00:00:43.660
everything except the build system.

00:00:43.880 --> 00:00:46.790
For that,
you'll want to go to Understanding the

00:00:46.790 --> 00:00:52.660
Xcode Project Management and
Build System at 3:30 today in this room,

00:00:52.660 --> 00:00:53.810
Marina.

00:00:54.210 --> 00:00:57.740
This session is going to cover a
lot of cool Xcode functionality,

00:00:57.740 --> 00:01:00.140
but it's not an introductory session.

00:01:00.260 --> 00:01:02.910
We're going to assume that you
understand the concepts behind

00:01:03.290 --> 00:01:06.680
debugging and SCM and programming.

00:01:06.810 --> 00:01:12.360
And while some of the features we
talk about today are new in Xcode 3.1,

00:01:12.470 --> 00:01:16.050
the rest are already
available to you in Xcode 3.0,

00:01:16.300 --> 00:01:21.490
which shipped with Mac OS 10.5
Leopard in the fall of last year.

00:01:22.440 --> 00:01:25.010
So how are we going to
achieve these goals?

00:01:25.010 --> 00:01:28.570
Well, we're going to start in the
same way that you would,

00:01:28.570 --> 00:01:29.440
with SCM.

00:01:29.470 --> 00:01:32.980
Now, with our sample project,
we're going to be showing you

00:01:32.980 --> 00:01:35.640
how Xcode works with Subversion.

00:01:35.660 --> 00:01:40.150
But Xcode also supports CVS and Perforce.

00:01:40.120 --> 00:01:47.300
Then we're going to run our application
and show you how Xcode's debugger

00:01:47.380 --> 00:01:52.570
can help you analyze the behavior
of your application at runtime and

00:01:52.570 --> 00:01:52.570
even change that behavior dynamically.

00:01:52.670 --> 00:01:57.010
Finally, we're going to add some new
functionality to our application using

00:01:57.010 --> 00:02:04.000
the features of the Xcode text editor
and Xcode's automated refactoring tools.

00:02:04.060 --> 00:02:07.380
So, let's get started.

00:02:09.950 --> 00:02:11.710
with SCM.

00:02:11.950 --> 00:02:17.380
Now, there are five Xcode SCM features
we'll be showing you today.

00:02:17.780 --> 00:02:22.480
One will be showing you how to set up
Xcode so that it can configure your

00:02:22.480 --> 00:02:25.600
projects to use SCM automatically.

00:02:25.660 --> 00:02:28.890
This feature is new in Xcode 3.1.

00:02:29.350 --> 00:02:34.450
Two, we're going to show you how
to import your project into

00:02:34.450 --> 00:02:40.300
an existing SCM repository.

00:02:40.300 --> 00:02:40.300
Then we're going to show you how
to check that project right back

00:02:40.300 --> 00:02:40.300
out in order to make changes to it.

00:02:40.690 --> 00:02:46.790
Four, we're going to show you how to use
Xcode's user interface to see the history

00:02:46.790 --> 00:02:49.940
of individual files in your project.

00:02:49.980 --> 00:02:55.010
And five, we're going to show you how
useful Xcode's SCM comparison

00:02:55.310 --> 00:02:57.870
window can be in your programming.

00:02:59.670 --> 00:03:01.300
Get started with the demo.

00:03:01.320 --> 00:03:05.350
Helping me out today is Justin Garau.

00:03:08.790 --> 00:03:11.800
Now, the project that we're going
to be using for our demos

00:03:11.800 --> 00:03:13.900
today is called Cocoa Slides.

00:03:14.020 --> 00:03:17.170
Cocoa Slides is a project that
shows you how to use the new

00:03:17.390 --> 00:03:22.540
core animation APIs that were
introduced with Mac OS 10.5 Webber.

00:03:22.640 --> 00:03:26.850
You can get Cocoa Slides for yourself
by going to developer.apple.com

00:03:27.100 --> 00:03:29.690
and searching on Cocoa Slides.

00:03:29.830 --> 00:03:34.020
Now what we've done is we've taken
the project and we've modified it,

00:03:34.140 --> 00:03:39.170
both removing some functionality
and adding some new capabilities.

00:03:39.410 --> 00:03:45.570
All of that history,
all of those changes, are recorded in our

00:03:45.570 --> 00:03:45.570
Subversion Repository.

00:03:46.060 --> 00:03:50.300
Now, let's say we didn't know about
Xcode's killer SCM support.

00:03:50.370 --> 00:03:53.350
So what we did was we checked
out this project using

00:03:53.570 --> 00:03:55.860
Subversion's command line tools.

00:03:56.340 --> 00:03:59.210
But now that we've heard
about Xcode support,

00:03:59.350 --> 00:04:02.790
we would like to enable
SCM support in our project as

00:04:02.830 --> 00:04:05.330
easily and painlessly as possible.

00:04:05.450 --> 00:04:08.590
So let's open Xcode
and do that right now.

00:04:13.790 --> 00:04:18.590
Now, we'd like to go to the SCM portion
of Xcode's preferences,

00:04:18.590 --> 00:04:22.050
and we can do that by going
to the SCM menu and choosing

00:04:22.610 --> 00:04:24.260
Configure SCM Repositories.

00:04:24.470 --> 00:04:28.000
This brings us to the Repositories
tab of the preferences.

00:04:28.040 --> 00:04:31.990
As you can see, right now it's empty,
but we'll change that.

00:04:32.140 --> 00:04:34.560
So we'll go to the Options tab.

00:04:34.840 --> 00:04:35.700
And we'll go down to the bottom.

00:04:35.870 --> 00:04:38.660
There's a new checkbox
there in Xcode 3.1,

00:04:38.690 --> 00:04:40.400
configure SCM automatically.

00:04:40.630 --> 00:04:41.430
So we're gonna check that.

00:04:41.650 --> 00:04:46.160
So it's an opt-in feature of Xcode 3.1,
but I encourage you all

00:04:46.160 --> 00:04:47.560
to opt in yourselves.

00:04:47.770 --> 00:04:49.140
So click the OK button.

00:04:49.140 --> 00:04:54.380
And now let's go find our project
in the Finder and open it.

00:04:57.420 --> 00:05:00.460
So Xcode does a number
of things for you now.

00:05:00.650 --> 00:05:05.100
It starts by offering to create a
repository configuration for us,

00:05:05.100 --> 00:05:07.120
so let's click the Create button.

00:05:07.120 --> 00:05:10.240
Then Xcode opens the project,
but it also opens our Preferences window,

00:05:10.430 --> 00:05:12.630
so let's go back to that.

00:05:12.940 --> 00:05:20.090
You can see that now there
is a repository configuration

00:05:20.090 --> 00:05:20.090
for the repository that we
checked out our project from.

00:05:20.620 --> 00:05:24.840
Because this is a Subversion Repository,
the most important field in the

00:05:24.840 --> 00:05:26.880
configuration is the URL field.

00:05:27.010 --> 00:05:30.250
This is the same URL you would
use to get at that project

00:05:30.250 --> 00:05:32.200
from the command line tools.

00:05:32.330 --> 00:05:35.100
Now,
if we were entering this URL manually,

00:05:35.100 --> 00:05:38.960
after you were done typing it in,
you would press the Tab key,

00:05:39.060 --> 00:05:42.660
and Xcode would automatically fill
out the rest of the fields for you.

00:05:42.740 --> 00:05:47.150
In this case, it's filled in the Scheme
field and the Path field.

00:05:47.280 --> 00:05:52.100
Now, the green circle at the bottom
tells you that Xcode can connect

00:05:52.100 --> 00:05:55.630
to this repository successfully.

00:05:55.880 --> 00:05:59.470
Now, you might be thinking to yourself,
well, this is great if I already have

00:05:59.470 --> 00:06:03.160
something checked into my repository,
but what if I'm just starting out?

00:06:03.360 --> 00:06:05.450
What if my repository is empty?

00:06:05.490 --> 00:06:07.110
We can help you with that, too.

00:06:07.370 --> 00:06:11.430
Now, the Preferences window that we're
seeing here allows us to add,

00:06:11.650 --> 00:06:14.560
remove,
and edit repository configurations.

00:06:14.730 --> 00:06:18.140
But if we'd like to actually
perform some SCM operations,

00:06:18.190 --> 00:06:19.360
we need to go to a different window.

00:06:19.360 --> 00:06:23.180
So let's close this one,
and we'll go to the Repositories window,

00:06:23.220 --> 00:06:26.580
which is also available
from the SCM menu.

00:06:27.590 --> 00:06:29.860
As you can see,
now our repository shows up

00:06:30.040 --> 00:06:33.300
in the Repositories window,
and our CocoaSlides directory

00:06:33.430 --> 00:06:35.110
is there and it's selected.

00:06:35.290 --> 00:06:39.210
So we'd actually like to operate on
the top level of this repository,

00:06:39.210 --> 00:06:42.030
which means we have to
deselect this folder.

00:06:42.130 --> 00:06:45.090
So we can do that by
command-clicking on it.

00:06:45.490 --> 00:06:48.050
And then,
importing something new into our

00:06:48.050 --> 00:06:52.740
repository is as easy as clicking
the import button in the toolbar.

00:06:52.850 --> 00:06:56.700
So, we'd like to import, let's say,
the Sketch project,

00:06:56.700 --> 00:06:59.690
which is available from the
examples directory of your

00:06:59.690 --> 00:07:01.900
developer tool's installation.

00:07:01.990 --> 00:07:05.660
And so you can see it's in examples,
appkit, sketch.

00:07:05.770 --> 00:07:09.440
So once we've selected the
directory we'd like to import,

00:07:09.740 --> 00:07:14.240
we can type in a comment that will
go along with the import operation,

00:07:14.340 --> 00:07:16.560
and click the Import button.

00:07:18.030 --> 00:07:21.140
See, Xcode tells us when we're done.

00:07:21.270 --> 00:07:26.600
Now, we could do all of this without
resorting to needing to know any

00:07:26.600 --> 00:07:29.760
command line commands or options.

00:07:29.880 --> 00:07:32.020
It's all just very
simple from within Xcode.

00:07:32.230 --> 00:07:37.020
And now let's do it again
by checking out the project.

00:07:37.020 --> 00:07:40.450
Again, there's a check-out button.

00:07:40.450 --> 00:07:42.190
And let's put this in the
same place where we checked

00:07:42.190 --> 00:07:42.190
out our Cocoa Slides project.

00:07:44.250 --> 00:07:46.300
Now here's the next thing
that Xcode does for us.

00:07:46.410 --> 00:07:49.660
Xcode will scan the top level
directory of our checkout and see if

00:07:49.660 --> 00:07:51.640
there are any Xcode projects in it.

00:07:51.660 --> 00:07:58.340
And if there are,
it goes ahead and allows

00:07:58.340 --> 00:07:58.340
us to open it directly.

00:07:58.340 --> 00:07:58.340
Let's go ahead and open the project.

00:07:59.130 --> 00:08:02.920
The second thing Xcode does is
it makes visible the SCM column

00:08:02.920 --> 00:08:05.000
in the Groups and Files tree.

00:08:05.100 --> 00:08:07.990
The SCM column is how you can
see the SCM status of all of

00:08:07.990 --> 00:08:09.810
your files in your project.

00:08:09.980 --> 00:08:12.910
For the third thing,
we want to double-click the top-level

00:08:12.930 --> 00:08:14.600
node of the Groups and Files tree.

00:08:14.650 --> 00:08:17.540
This brings up the Project Info window.

00:08:17.610 --> 00:08:20.630
We'll go to the General tab,
and you can see at the bottom,

00:08:20.700 --> 00:08:27.430
the SCM Repository project setting
has been set for us to our repository.

00:08:30.900 --> 00:08:35.640
So we can close Sketch and
we'll go back to Cocoa Slides.

00:08:35.640 --> 00:08:39.360
Now, you're seeing Cocoa Slides
for the first time,

00:08:39.500 --> 00:08:43.320
so you may be asking yourself what
sort of changes have been made to it.

00:08:43.360 --> 00:08:45.040
And Xcode can help with that.

00:08:45.070 --> 00:08:47.030
So let's select one of our files.

00:08:47.090 --> 00:08:49.860
Let's go to maincontroller.h.

00:08:49.860 --> 00:08:53.600
And we'll bring up the SCM history
for the file by going again to the

00:08:53.600 --> 00:08:56.540
SCM menu and choosing Get SCM Info.

00:08:56.540 --> 00:09:01.920
This brings up the File Info
window and switches to the SCM tab.

00:09:01.920 --> 00:09:05.440
Now, the type's a little small here,
but you can see that there

00:09:05.440 --> 00:09:10.040
are three check-ins that
have been made for this file.

00:09:10.050 --> 00:09:13.740
And the two later ones
involve removing APIs.

00:09:13.790 --> 00:09:14.840
So we'd like to see some of that.

00:09:14.940 --> 00:09:19.100
So let's select the first entry there,
which is the initial import,

00:09:19.120 --> 00:09:21.640
and the first removal of APIs.

00:09:21.730 --> 00:09:24.360
And then click the Compare button.

00:09:24.990 --> 00:09:28.610
This brings up Xcode's
SCM comparison window.

00:09:28.820 --> 00:09:33.280
So the revision one is
on the left-hand side,

00:09:33.450 --> 00:09:35.720
revision six is on the right-hand side.

00:09:35.790 --> 00:09:38.770
And you can see that as advertised,
there have been five

00:09:38.860 --> 00:09:40.690
APIs that have been removed.

00:09:40.790 --> 00:09:42.690
So in the middle column,
there are arrows.

00:09:42.780 --> 00:09:44.420
So let's click on one of those.

00:09:44.420 --> 00:09:48.260
And you can see that here
we're given some choices.

00:09:48.360 --> 00:09:50.450
The first choice is to
choose the left-hand side.

00:09:50.770 --> 00:09:52.480
So let's do that.

00:09:53.110 --> 00:09:57.040
And you can see this shows you another
property of the comparison window,

00:09:57.100 --> 00:10:00.030
which is that the right-hand side,
in addition to just showing

00:10:00.540 --> 00:10:04.680
what revision six is,
also shows the results of our choices.

00:10:04.820 --> 00:10:07.020
The right-hand side is a merge view.

00:10:07.180 --> 00:10:07.990
So let's try it again.

00:10:08.020 --> 00:10:11.850
Let's go to the third arrow,
flip that over.

00:10:12.830 --> 00:10:16.350
And now we'd like to save
the results of our choices.

00:10:16.530 --> 00:10:18.700
To do that, let's go to the File menu.

00:10:18.770 --> 00:10:23.410
And you can see that the option
available to us here is Save a Copy As.

00:10:23.510 --> 00:10:25.040
So why is it called that?

00:10:25.250 --> 00:10:27.330
It's called that because
we're not actually looking at

00:10:27.450 --> 00:10:28.490
the file that we checked out.

00:10:28.720 --> 00:10:32.700
We're looking at versions of the
file that came from the repository.

00:10:32.850 --> 00:10:37.670
So now we could go ahead and save this
particular version of the file over

00:10:37.690 --> 00:10:40.300
top of the version we checked out.

00:10:40.450 --> 00:10:42.560
But that might clobber any
changes that we've made there.

00:10:42.800 --> 00:10:44.100
So let's call it something new.

00:10:44.300 --> 00:10:48.600
Let's call it a main controller merge.h.

00:10:48.920 --> 00:10:52.240
said that all of our choices are
saved and we can use those choices

00:10:52.360 --> 00:10:54.440
later on in our programming.

00:10:54.440 --> 00:10:58.700
So this shows you some of the
features of Xcode's SCM support.

00:10:58.720 --> 00:11:01.400
We can go back to the slides.

00:11:01.400 --> 00:11:07.290
Switch to the slides.

00:11:13.640 --> 00:11:17.420
Now that we've shown you our SCM support,
we're going to go ahead and run our

00:11:17.520 --> 00:11:19.360
application and show you the debugger.

00:11:19.390 --> 00:11:22.330
And to do that,
I'm going to bring up Chris Friesen.

00:11:22.680 --> 00:11:24.120
Thank you.

00:11:29.400 --> 00:11:30.770
Hi, my name's Christopher Friesen.

00:11:30.820 --> 00:11:34.100
I'm manager of the debugger team.

00:11:34.130 --> 00:11:36.610
Now that we've checked out
our source code from SCM,

00:11:36.610 --> 00:11:38.500
we're going to see how we
can use the mini-debugger,

00:11:38.560 --> 00:11:41.120
data tips,
and breakpoint actions to not only

00:11:41.120 --> 00:11:45.020
explore how our application works,
but also investigate some changes

00:11:45.020 --> 00:11:48.020
that we might want to make
later to the actual source code.

00:11:48.210 --> 00:11:51.730
And then at the end, we'll look at some
debugger display options.

00:11:52.700 --> 00:11:55.710
The mini-debugger is a small window
that floats above other windows,

00:11:55.710 --> 00:11:58.540
including your application.

00:11:58.540 --> 00:12:01.660
And this allows you to interact
with Xcode's debugger without

00:12:01.660 --> 00:12:03.520
your application deactivating.

00:12:03.520 --> 00:12:07.020
You can then use data tips
to view variable values,

00:12:07.130 --> 00:12:12.340
as well as the debugger strip to switch
between threads and stack frames.

00:12:13.940 --> 00:12:16.460
In its running mode,
it's condensed down into a small

00:12:16.460 --> 00:12:20.490
window that's nearly actual size
if you're in the back of the room.

00:12:20.810 --> 00:12:25.580
On the left is a stop button that will
stop the execution of your program,

00:12:25.670 --> 00:12:28.130
pause button that will
drop you into the debugger,

00:12:28.180 --> 00:12:31.940
then a button that will take
you to Xcode's project window,

00:12:31.990 --> 00:12:36.890
and finally a button to activate and
deactivate your enabled breakpoints.

00:12:37.620 --> 00:12:40.770
Once you click pause,
this is now the pause mode.

00:12:40.910 --> 00:12:46.330
It expands to show you your source code,
and you can interact with it there.

00:12:48.400 --> 00:12:52.600
Now, data tips let you view variable
values directly in your source code.

00:12:52.740 --> 00:12:55.940
You simply hover over a
variable value with the cursor,

00:12:56.110 --> 00:12:58.870
and then a window pops up to
show you the actual value.

00:12:59.110 --> 00:13:01.060
So here we've hovered over self.

00:13:01.160 --> 00:13:03.640
It's got a little red box around it.

00:13:03.680 --> 00:13:07.170
And then the data tip comes up,
and then you can automatically navigate

00:13:07.170 --> 00:13:09.480
down into elements of that variable.

00:13:11.710 --> 00:13:14.600
You can also select some
text in your source code.

00:13:14.650 --> 00:13:18.990
Hovering over that will give
you a little evaluate icon.

00:13:19.000 --> 00:13:20.690
It's a little blue
circle with an eye in it.

00:13:20.810 --> 00:13:23.630
It's kind of hard to see
in this particular slide.

00:13:23.900 --> 00:13:28.360
Clicking on that will then evaluate
this expression in the debugger,

00:13:28.360 --> 00:13:31.410
and then we see the
result here in a data tip.

00:13:37.100 --> 00:13:39.850
The data tips also
have a contextual menu,

00:13:39.850 --> 00:13:41.400
highlighted here.

00:13:41.440 --> 00:13:45.500
This will allow you to print
descriptions of Objective-C objects,

00:13:45.630 --> 00:13:48.650
open that particular variable
in a separate window,

00:13:48.650 --> 00:13:51.370
or view that variable
in the memory viewer.

00:13:53.540 --> 00:13:56.420
We also give you step-in
controls as data tips.

00:13:56.500 --> 00:14:02.120
So if you hover over a
method at the current PC,

00:14:02.140 --> 00:14:03.860
you'll get a step-in
icon you can click on,

00:14:03.890 --> 00:14:05.560
and that'll step into that method.

00:14:05.560 --> 00:14:08.100
If you hover over the
beginning of the line,

00:14:08.120 --> 00:14:09.850
you get a step-over icon to step over.

00:14:10.060 --> 00:14:16.470
Hovering over a line away from the
PC will give you a continue to here,

00:14:17.660 --> 00:14:21.560
and Hovering Over the Declaration of
the Method will let you step

00:14:21.560 --> 00:14:23.420
out of that current method.

00:14:23.420 --> 00:14:26.700
So these are quick ways to
navigate through your code without

00:14:26.730 --> 00:14:31.690
having to go to the top of the
window to the step-in controls.

00:14:32.100 --> 00:14:35.320
Now every project has its
own breakpoints window.

00:14:37.220 --> 00:14:41.150
On the left-hand side are
groups of different breakpoints.

00:14:41.240 --> 00:14:43.540
For instance,
you have the project breakpoints,

00:14:43.540 --> 00:14:45.900
which are breakpoints
for the current project.

00:14:46.060 --> 00:14:47.620
and Global Breakpoints.

00:14:47.620 --> 00:14:50.100
Breakpoints that you put into this
group will then follow you to any

00:14:50.100 --> 00:14:52.780
other project that you open later.

00:14:54.430 --> 00:15:04.510
Xcode also includes breakpoints
from other projects that

00:15:04.510 --> 00:15:04.510
you currently have open.

00:15:04.510 --> 00:15:04.510
If you don't wish to include them,
then unselect the checkbox next to them.

00:15:05.990 --> 00:15:09.030
On the right-hand side is the
detail view that then reflects the

00:15:09.060 --> 00:15:11.780
breakpoint selected on the left.

00:15:11.880 --> 00:15:15.810
This first column discloses
the breakpoint actions.

00:15:16.120 --> 00:15:18.570
The next column gives you
little icons to differentiate

00:15:18.670 --> 00:15:22.910
between symbolic breakpoints
and file and line breakpoints.

00:15:24.480 --> 00:15:27.680
Then the breakpoints column gives you
the name of the symbolic breakpoint.

00:15:27.740 --> 00:15:30.820
You can double click that to
edit the value to change it to

00:15:30.820 --> 00:15:32.900
a different symbolic breakpoint.

00:15:33.040 --> 00:15:36.990
And then for file and line breakpoints,
it gives you the current method or

00:15:36.990 --> 00:15:39.400
function name as well as the line number.

00:15:39.440 --> 00:15:42.890
Then you have a column for enabling
and disabling the breakpoint.

00:15:43.750 --> 00:15:46.760
Then the location tells you
which shared library or module

00:15:47.070 --> 00:15:49.290
that that breakpoint is set in.

00:15:50.020 --> 00:15:52.700
You can also set a breakpoint condition.

00:15:52.790 --> 00:15:54.930
This will determine whether
or not the debugger will stop

00:15:55.040 --> 00:15:57.380
at that particular breakpoint.

00:15:58.360 --> 00:15:59.960
There's also an ignore count.

00:15:59.960 --> 00:16:03.080
So if you want to skip this
particular breakpoint five times,

00:16:03.090 --> 00:16:04.690
you'd enter five.

00:16:06.170 --> 00:16:08.260
Then we have the Auto-Continue column.

00:16:08.360 --> 00:16:11.900
Selecting this will cause all
the breakpoint actions for the

00:16:11.900 --> 00:16:15.290
current breakpoint to execute,
and then Xcode will automatically

00:16:15.290 --> 00:16:18.000
continue without coming forward.

00:16:19.460 --> 00:16:22.030
Then we have a hit count that
can show you how many times this

00:16:22.030 --> 00:16:24.580
particular breakpoint's been hit.

00:16:24.730 --> 00:16:27.080
And finally,
a comment so you can remind yourself

00:16:27.080 --> 00:16:31.300
which breakpoint actions you've
set on this particular breakpoint.

00:16:33.820 --> 00:16:37.360
As I mentioned earlier,
breakpoint conditions are an expression

00:16:37.360 --> 00:16:40.170
that if they evaluate to true,
the debugger will then

00:16:40.290 --> 00:16:41.800
stop at that breakpoint.

00:16:41.800 --> 00:16:43.800
Now, when you enter your
breakpoint conditions,

00:16:43.850 --> 00:16:46.490
you want to make sure that
you cast them so the debugger

00:16:46.690 --> 00:16:48.400
understands what the values are.

00:16:48.400 --> 00:16:51.070
So, you want something more like this.

00:16:52.880 --> 00:16:55.660
For some reason your breakpoint
conditions aren't working,

00:16:55.710 --> 00:17:01.120
you should stop the debugger in that
area of code and then test out your

00:17:01.120 --> 00:17:04.120
expression in Xcode's debugger console.

00:17:06.400 --> 00:17:10.400
Now, the various breakpoint actions you
can do include things like managing

00:17:10.400 --> 00:17:12.770
your GDB breakpoint commands.

00:17:12.810 --> 00:17:16.730
You can also log variable
values as well as expressions,

00:17:16.870 --> 00:17:20.280
play sounds,
run Apple scripts and shell scripts,

00:17:20.300 --> 00:17:23.430
chain multiple commands together,
and then auto-continue

00:17:23.430 --> 00:17:25.020
as I mentioned earlier.

00:17:27.940 --> 00:17:31.660
You can also create your own custom
groups over on the left-hand side.

00:17:31.720 --> 00:17:36.140
Simply use the contextual
menu to choose Add Groups,

00:17:36.190 --> 00:17:39.400
and then you can name it whatever you
like and drag your breakpoints in.

00:17:39.470 --> 00:17:42.380
You can also use the contextual
menu to enable and disable

00:17:42.380 --> 00:17:44.280
whole groups all at once.

00:17:44.840 --> 00:17:46.580
Now there's a special group.

00:17:46.650 --> 00:17:49.800
If you create a group called
template breakpoints and drag

00:17:49.800 --> 00:17:53.280
breakpoints into that group,
the actions on those breakpoints

00:17:53.280 --> 00:17:56.070
will be available for
built-in breakpoint actions,

00:17:56.190 --> 00:17:58.170
which we'll show you in a minute.

00:18:01.100 --> 00:18:03.870
Built-in breakpoint actions are
available in the contextual menu

00:18:04.090 --> 00:18:06.330
of the gutter in your source view.

00:18:06.460 --> 00:18:08.640
Control-clicking there
will bring up a menu,

00:18:08.660 --> 00:18:13.550
then select built-in breakpoints,
and then you get the built-in

00:18:13.670 --> 00:18:19.400
ones that we have there,
things like log the stack and continue,

00:18:19.410 --> 00:18:22.850
play a sound,
and then there's a divider followed by

00:18:22.850 --> 00:18:22.850
any breakpoints that you've put into
a group called template breakpoints.

00:18:25.180 --> 00:18:27.410
and finally the debugger display options.

00:18:27.640 --> 00:18:30.190
This is available under the run menu.

00:18:30.310 --> 00:18:32.980
Here you can control whether or
not the data tips are enabled or

00:18:32.980 --> 00:18:37.370
disabled and whether or not you
want to use the step controls.

00:18:37.490 --> 00:18:42.050
You can also choose to have source
and disassembly viewed in the debugger

00:18:42.160 --> 00:18:47.200
window side by side or disassembly only.

00:18:47.400 --> 00:18:51.850
Now let's bring up Antonio Proios
who will run our demo for us.

00:18:57.080 --> 00:18:59.790
Here we are in our source code,
and we're going to click Build and

00:19:00.020 --> 00:19:02.500
Go to launch the application.

00:19:08.630 --> 00:19:11.010
And you can see that we've
changed Cocoa Slides to now

00:19:11.010 --> 00:19:13.540
have a maximized window.

00:19:13.640 --> 00:19:15.900
We've also altered it so
that it automatically cycles

00:19:15.900 --> 00:19:18.350
between the different layouts.

00:19:19.000 --> 00:19:24.690
Now let's click on one of the slides
to see what the application does.

00:19:29.150 --> 00:19:33.500
Image is lines, blue dot jpeg.

00:19:33.560 --> 00:19:37.900
It's now added a graphic effect
and spoken the name of the

00:19:37.900 --> 00:19:39.780
actual image inside the slide.

00:19:39.840 --> 00:19:43.170
That was actually a breakpoint
action which occurred.

00:19:43.350 --> 00:19:46.100
So as you can see, breakpoint actions,
when they autocontinue,

00:19:46.100 --> 00:19:47.630
don't actually bring Xcode forward.

00:19:47.640 --> 00:19:52.890
So you can explore what your
application's doing by using them.

00:19:54.110 --> 00:19:57.750
Now let's explore actually changing
the color of that particular

00:19:57.750 --> 00:20:01.260
slide to really make it stand out,
because right now it's kind of difficult

00:20:01.260 --> 00:20:03.220
to see which one's been selected.

00:20:03.290 --> 00:20:06.150
So let's Command-Tab back to Xcode.

00:20:09.510 --> 00:20:15.570
and we'll set a breakpoint in
slide viewcarrier.m in drawrect.

00:20:18.800 --> 00:20:24.940
and we should also go and
turn on use the mini-debugger.

00:20:24.940 --> 00:20:24.940
Since this is an application
that has a very large window,

00:20:25.110 --> 00:20:27.770
and we'd like to be able to
interact with the debugger without

00:20:27.770 --> 00:20:29.690
hiding most of the application.

00:20:29.690 --> 00:20:32.080
So now I'll switch back to Cocoa Slides.

00:20:32.110 --> 00:20:34.210
We'll click on a slide.

00:20:35.770 --> 00:20:38.930
Images, lines, graphite.jpg.

00:20:39.710 --> 00:20:41.580
So now we've stopped.

00:20:41.750 --> 00:20:43.680
The mini-debugger's expanded.

00:20:43.680 --> 00:20:49.690
At the very top of the window,
we see that the debugger

00:20:49.690 --> 00:20:49.690
strip is available,
so we can switch to different threads.

00:20:50.480 --> 00:20:55.790
On the far right is a pop-up
for the stack where we can

00:20:55.840 --> 00:20:57.560
choose different stack frames.

00:20:58.060 --> 00:21:01.440
And then in the middle,
we have controls for activating

00:21:01.440 --> 00:21:05.870
and deactivating the breakpoints,
continuing, and our other step controls.

00:21:06.170 --> 00:21:09.440
Next to that,
we have a jump to Xcode's debugger

00:21:09.600 --> 00:21:11.750
window or debugger console.

00:21:13.080 --> 00:21:15.990
Back in the source code,
we can hover over self

00:21:15.990 --> 00:21:17.840
to bring up a data tip.

00:21:17.840 --> 00:21:21.240
And then hovering over the disclosure
area will automatically turn that open,

00:21:21.370 --> 00:21:25.790
and we can drill down and even
see some of our data formatters.

00:21:27.580 --> 00:21:32.420
Now if we go back to the code,
say we want to step into self-bounce,

00:21:32.420 --> 00:21:37.540
but we've broken back before it.

00:21:37.540 --> 00:21:37.540
We can actually drag the PC arrow back

00:21:38.260 --> 00:21:41.510
and that moves the program counter.

00:21:41.630 --> 00:21:45.170
Dragging the PCRO doesn't
actually execute any code.

00:21:45.520 --> 00:21:49.760
So now, if we hover over bounds,
we'll get the step-in data tip.

00:21:49.810 --> 00:21:53.830
Clicking that, we'll step into the code.

00:21:53.830 --> 00:21:58.710
And then we can use the data
tips again to step over.

00:21:59.420 --> 00:22:05.280
Hovering over bounds,
the beginning of the line,

00:22:05.280 --> 00:22:05.280
we get the step out.

00:22:07.720 --> 00:22:10.600
And now we can continue
stepping using the debugger

00:22:10.600 --> 00:22:12.930
strip at the top of the window.

00:22:12.960 --> 00:22:15.050
We can step along.

00:22:15.660 --> 00:22:18.590
We see that it's setting
a color for the slide,

00:22:18.650 --> 00:22:20.460
and we can hover over G.

00:22:20.560 --> 00:22:23.940
Let's try changing that value to one.

00:22:23.940 --> 00:22:29.030
So we'll single click on it,
change the value, hit Tab,

00:22:29.420 --> 00:22:36.100
chose red to show that
the values changed.

00:22:36.100 --> 00:22:41.300
Now if we continue,
the mini-debugger gets out of

00:22:41.300 --> 00:22:41.300
our way so we can see what's
happening in the application,

00:22:41.300 --> 00:22:41.300
and we see that we've
chosen a nice green.

00:22:41.720 --> 00:22:43.720
And this is all without
changing any of the source code.

00:22:43.750 --> 00:22:46.830
So we can explore different options
until we come down to the right

00:22:46.870 --> 00:22:50.750
color that we want and then make
those changes in the sources.

00:22:52.610 --> 00:22:56.080
The top of the window in the
menu debugger on the right-hand

00:22:56.080 --> 00:22:59.070
side is the Activate and
Deactivate Breakpoints button.

00:22:59.070 --> 00:23:02.280
Clicking that will deactivate
all of the enabled breakpoints.

00:23:02.290 --> 00:23:04.690
Now when we click on a slide,

00:23:05.510 --> 00:23:09.170
Our breakpoint action,
which speaks the name of the slide,

00:23:09.640 --> 00:23:12.970
doesn't execute because
it's been disabled.

00:23:13.140 --> 00:23:15.410
And you can enable it again.

00:23:18.990 --> 00:23:20.400
and click on a slide.

00:23:20.490 --> 00:23:24.780
Image is Jaguar Aqua blue dot JPEG.

00:23:25.940 --> 00:23:30.150
Now let's switch back to Xcode.

00:23:30.150 --> 00:23:31.270
And close the menu debugger.

00:23:32.760 --> 00:23:35.840
In here we have the main debugger window.

00:23:35.840 --> 00:23:39.670
And we can go up to the run
menu and the display options.

00:23:40.670 --> 00:23:43.760
and choose Vertical Layout.

00:23:43.800 --> 00:23:47.780
This will place the variables on the
left-hand side underneath the stack,

00:23:47.840 --> 00:23:50.710
so you can actually make
that taller if you wish.

00:23:55.000 --> 00:23:56.400
There you go.

00:23:56.400 --> 00:23:59.230
So if you have lots of variables and
you want to be able to see more of them

00:23:59.230 --> 00:24:03.690
without digging into your source code,
some people like this option,

00:24:03.690 --> 00:24:05.600
especially on bigger monitors.

00:24:05.600 --> 00:24:09.960
All right.

00:24:09.960 --> 00:24:12.400
So let's go to the breakpoints window.

00:24:25.980 --> 00:24:29.740
Now if we control click on
the top of the table column,

00:24:29.770 --> 00:24:34.240
we'll get a contextual menu,
and we can see we can choose which

00:24:34.240 --> 00:24:36.540
items we actually want to disclose.

00:24:36.850 --> 00:24:40.220
Now hit count and comments
are disabled by default,

00:24:40.320 --> 00:24:43.620
so you'll have to enable those
yourself if you want to see them.

00:24:45.420 --> 00:24:52.560
So now we can show how the hit
count increases by enabling

00:24:52.560 --> 00:24:52.560
one of our breakpoints,
the CycleLayout breakpoint.

00:24:54.300 --> 00:24:59.380
And now when we continue,
we'll see that that increments

00:24:59.380 --> 00:25:01.780
every time the layout changes.

00:25:04.080 --> 00:25:06.630
All right,
let's stop executing Cocoa Slides.

00:25:06.630 --> 00:25:13.210
Now let's go to our breakpoint,
which was playing the sound.

00:25:14.780 --> 00:25:18.640
will disclose it, the breakpoint actions.

00:25:18.670 --> 00:25:22.490
And here you can see we've
chosen the log breakpoint action.

00:25:22.490 --> 00:25:25.450
There's some static
text at the beginning.

00:25:25.700 --> 00:25:36.900
[Transcript missing]

00:25:39.680 --> 00:25:41.020
And over on the right-hand
side of that window,

00:25:41.020 --> 00:25:44.400
we can also choose to log that instead
of speaking it if we so choose.

00:25:44.400 --> 00:25:48.360
And those log comments will go
to Xcode's debugger console.

00:25:50.000 --> 00:25:56.030
On the left-hand side of the window,
for the project breakpoints,

00:25:56.030 --> 00:25:58.990
we can control-click to
bring up a contextual menu,

00:25:59.180 --> 00:26:01.550
and we can group enable or disable them.

00:26:01.560 --> 00:26:05.930
So if we disable them,
we see over on the right,

00:26:05.930 --> 00:26:05.930
all the breakpoints have disabled.

00:26:09.200 --> 00:26:11.140
And finally, our template breakpoints.

00:26:11.140 --> 00:26:14.840
You see that we've added a group
called template breakpoints.

00:26:14.860 --> 00:26:22.630
And if we select the breakpoint
over on the right-hand side and

00:26:22.630 --> 00:26:22.630
disclose its breakpoint actions,

00:26:24.720 --> 00:26:26.900
It doesn't currently
have a breakpoint action,

00:26:28.370 --> 00:26:30.900
so let's add one.

00:26:30.900 --> 00:26:30.900
And let's make it a log.

00:26:33.000 --> 00:26:37.560
and Alex Fischer,
and the rest of the team.

00:26:37.560 --> 00:26:38.880
Thank you.

00:26:40.900 --> 00:26:50.050
Change the comment to "Plays sound."
Now if we go back to our source code,

00:26:54.890 --> 00:26:58.150
Now when we control click in the gutter,
we got the contextual menu.

00:26:58.320 --> 00:27:00.480
We can select built-in breakpoints.

00:27:00.520 --> 00:27:02.130
And then down at the bottom,
we see our new template

00:27:02.400 --> 00:27:05.220
breakpoint is available to us,
play sound.

00:27:05.220 --> 00:27:07.920
Thank you very much.

00:27:08.190 --> 00:27:10.600
Let's switch back to the slides.

00:27:12.180 --> 00:27:14.680
So now that we've looked at
how to debug our application

00:27:14.680 --> 00:27:17.750
and investigate behaviors,
we're going to see how we can use the

00:27:17.770 --> 00:27:22.000
editing and refactoring tools in Xcode to
actually go make changes to the source.

00:27:22.110 --> 00:27:24.790
And to do that, we bring up Dave Ewing.

00:27:24.860 --> 00:27:28.410
Thanks, Chris.

00:27:33.050 --> 00:27:33.900
So I'm Dave Ewing.

00:27:33.900 --> 00:27:37.530
I'm an engineer on the Xcode team,
and I'm talking about

00:27:37.530 --> 00:27:39.780
editing and refactoring.

00:27:41.420 --> 00:27:46.300
We're going to talk about what's new in
the latest versions of Xcode and talk

00:27:46.300 --> 00:27:49.930
about getting the most out of the editor.

00:27:53.670 --> 00:27:58.330
The editor in Xcode 3.0 actually
went through a major overhaul,

00:27:58.330 --> 00:27:59.450
and there's quite a few new features.

00:27:59.510 --> 00:28:02.230
I'm just going to highlight
a few of them here.

00:28:03.160 --> 00:28:05.240
So first there's code folding.

00:28:05.310 --> 00:28:07.920
So with code folding,
you can hide blocks of your code by

00:28:07.920 --> 00:28:10.350
clicking over on the gutter on the left.

00:28:10.520 --> 00:28:12.900
We call that the code folding ribbon.

00:28:12.950 --> 00:28:18.740
It shows you the area that it will fold,
and then clicking on it folds it away.

00:28:20.130 --> 00:28:23.060
We also added a new feature
to Code Completion called

00:28:23.060 --> 00:28:24.600
inline code completion.

00:28:24.700 --> 00:28:27.800
So with inline code completion,
we actually show you as you

00:28:27.800 --> 00:28:31.740
type the best suggestion for
what you might want to complete.

00:28:32.110 --> 00:28:34.370
Now we've had code
completion for a long time,

00:28:34.400 --> 00:28:37.740
so this is just a new way to
get a quicker access to it.

00:28:37.920 --> 00:28:41.270
So here, if I type an I,
it shows me that init is

00:28:41.410 --> 00:28:43.070
the most likely thing.

00:28:43.360 --> 00:28:45.940
I hit tab, it completes that.

00:28:46.030 --> 00:28:50.500
Hit W, it says that init with array
is the most likely thing,

00:28:50.500 --> 00:28:53.630
and I go ahead and hit tab
to finish completing that.

00:28:56.970 --> 00:29:00.270
In Xcode,
we have a database of index symbols

00:29:00.270 --> 00:29:02.630
we call the CodeSense index.

00:29:02.710 --> 00:29:07.020
In 3.0,
we added the ability to show variables,

00:29:07.240 --> 00:29:11.810
symbols that the index knows right
in the editor with different colors.

00:29:11.970 --> 00:29:15.540
So here we have an instance
variable called root URL,

00:29:15.540 --> 00:29:19.570
and it's shown in a kind of bluish,
grayish, greenish there to show that

00:29:19.570 --> 00:29:21.660
it's an instance variable.

00:29:22.260 --> 00:29:25.810
Here we have NSMutableArray,
which is a system class,

00:29:25.810 --> 00:29:28.560
and it's shown in a shade of purple.

00:29:28.680 --> 00:29:30.880
So, of course,
you can customize what colors you want

00:29:31.000 --> 00:29:35.650
for all these different symbol types,
and we have a number of built-in sets

00:29:35.770 --> 00:29:39.120
that you can choose from for coloring.

00:29:41.090 --> 00:29:43.950
Also in 3.0,
we added the Research Assistant.

00:29:44.080 --> 00:29:47.760
So the Research Assistant is
a floating panel that comes

00:29:47.910 --> 00:29:51.190
up and follows the context,
your editing context.

00:29:51.340 --> 00:29:53.510
So as you move around,
as the insertion point

00:29:53.510 --> 00:29:56.880
moves through the code,
it will look at whatever symbol is there

00:29:57.450 --> 00:29:59.080
and look it up in the documentation.

00:29:59.080 --> 00:30:01.610
If there's documentation for it,
it'll show you right in

00:30:01.610 --> 00:30:02.840
the Research Assistant.

00:30:02.990 --> 00:30:07.260
So in there,
it shows you where the symbol is defined,

00:30:07.280 --> 00:30:09.230
what header file.

00:30:09.310 --> 00:30:13.970
It'll have links to the documentation,
links to documentation for related API,

00:30:14.110 --> 00:30:16.700
links to example source code.

00:30:16.710 --> 00:30:19.410
It'll even show you the
availability of that symbol,

00:30:19.540 --> 00:30:23.040
so what version of the operating
system it first appeared in,

00:30:23.040 --> 00:30:25.670
and maybe if it's been deprecated.

00:30:28.360 --> 00:30:31.740
Finally, I want to talk about
user scripts in Xcode.

00:30:31.760 --> 00:30:35.660
So we've had a scripts menu
in Xcode for many years now.

00:30:35.660 --> 00:30:39.060
It was always kind of difficult
to add new scripts to the menu.

00:30:39.110 --> 00:30:41.810
So at the bottom of the scripts menu,
there's now a new command

00:30:41.850 --> 00:30:45.220
called Edit User Scripts,
and it brings up this panel here.

00:30:45.230 --> 00:30:48.720
On the left-hand side,
there's a representation of

00:30:48.720 --> 00:30:50.420
what the menu looks like.

00:30:50.450 --> 00:30:53.080
And on the right-hand side,
there's a view in which

00:30:53.080 --> 00:30:54.620
you can edit that script.

00:30:54.680 --> 00:30:59.760
So here, it's a little hard to see,
but I'm looking at one of the built-in

00:30:59.820 --> 00:31:03.600
commands called Convert Spaces to Tabs,
and you can see that it's

00:31:03.670 --> 00:31:06.570
just implemented with a born
shell script on the right.

00:31:06.630 --> 00:31:10.220
One of the interesting things about this
is in order to convert spaces to tabs,

00:31:10.220 --> 00:31:15.130
it needs to know how many space
characters correspond to a tab stop.

00:31:15.220 --> 00:31:19.920
And it does that by asking
Xcode via AppleScript what

00:31:19.920 --> 00:31:23.080
that conversion should be.

00:31:23.290 --> 00:31:25.610
So you can look at all those examples.

00:31:25.750 --> 00:31:30.040
All of the built-in scripts
are there for you to look at.

00:31:30.240 --> 00:31:32.900
So what's new in Xcode 3.1?

00:31:33.310 --> 00:31:36.020
Well, we've got some more
good stuff for you here,

00:31:36.020 --> 00:31:36.490
too.

00:31:36.890 --> 00:31:38.460
So there's a new property list editor.

00:31:38.460 --> 00:31:41.040
The property list editor lets
you do structured editing

00:31:41.040 --> 00:31:42.580
of property list data files.

00:31:42.680 --> 00:31:49.300
New in 3.1 is the ability to show the
keys and values in a human-readable form.

00:31:49.320 --> 00:31:54.080
So for, let's say, Info.plist files,
you no longer need to remember the name.

00:31:54.140 --> 00:31:55.920
Is it CFBundle something?

00:31:55.920 --> 00:31:58.920
It actually shows you
those names in line,

00:31:58.920 --> 00:32:02.920
and it will complete the names as
you type so that it knows about

00:32:02.920 --> 00:32:05.640
the valid keys for an Info.plist.

00:32:05.680 --> 00:32:09.300
It also is,
there's also definitions in there for

00:32:09.330 --> 00:32:13.980
some of the settings files on the iPhone,
in the iPhone SDK.

00:32:16.420 --> 00:32:22.160
Also new in 3.1 are tokenized
placeholders that are used when doing

00:32:22.200 --> 00:32:24.320
code completion and text macros.

00:32:24.360 --> 00:32:27.660
So in this little window here,
I've inserted a text

00:32:27.820 --> 00:32:30.520
macro for a for loop.

00:32:30.530 --> 00:32:32.570
And in this for loop,
there's an array that

00:32:32.570 --> 00:32:33.480
needs to be filled in.

00:32:33.490 --> 00:32:36.310
So there's a placeholder there
that's represented as a token

00:32:36.830 --> 00:32:40.510
and some other statements for
filling out the rest of the loop.

00:32:40.530 --> 00:32:44.350
So you can click directly on that
placeholder and just start typing and

00:32:44.350 --> 00:32:47.370
it will fill in that area for you.

00:32:49.560 --> 00:32:51.040
Then there's edit all in scope.

00:32:51.040 --> 00:32:53.340
So this is a new menu
item under the edit menu.

00:32:53.340 --> 00:32:55.290
Surprise, surprise.

00:32:55.520 --> 00:33:00.280
So what it does is that when
you select a word in your file,

00:33:00.310 --> 00:33:03.290
it will look for other occurrences
of that word in the current

00:33:03.370 --> 00:33:06.620
context and allow you to edit
them all at the same time.

00:33:06.680 --> 00:33:09.200
So as you start typing,
it will change all of

00:33:09.250 --> 00:33:11.000
the occurrences at once.

00:33:13.220 --> 00:33:15.330
Finally, there's Open Quickly.

00:33:15.560 --> 00:33:20.370
So Open Quickly now brings up a
nice window that gives you a list of

00:33:20.430 --> 00:33:24.180
all the available options for what
you type in the filter field above.

00:33:24.370 --> 00:33:27.580
You can see here that
I've typed Browser W,

00:33:27.640 --> 00:33:31.490
and it shows that there's a
source file and a header file.

00:33:31.570 --> 00:33:34.800
There's also an interface
builder nib file.

00:33:34.930 --> 00:33:38.220
But there's also a method
and a class that match.

00:33:38.350 --> 00:33:41.740
So double-clicking on those rows
or navigating with the arrow keys

00:33:41.740 --> 00:33:46.500
and hitting return we'll let you
go directly to those locations.

00:33:49.040 --> 00:33:55.640
Okay, so let's talk a little bit about
getting around in Xcode quickly.

00:33:55.690 --> 00:34:01.100
First, at the top of every editor view,
there's this bar that we

00:34:01.100 --> 00:34:02.760
call the file navigator.

00:34:02.780 --> 00:34:05.640
So in the file navigator,
there's a number of pop-up menus.

00:34:05.640 --> 00:34:09.520
I'm sure you guys, if you've used Xcode,
you already are using this.

00:34:09.540 --> 00:34:12.170
There's a file pop-up
for all the open files.

00:34:12.240 --> 00:34:14.380
There's the function pop-up.

00:34:14.430 --> 00:34:18.840
There's also a pop-up for breakpoints
and bookmarks in the current file.

00:34:18.840 --> 00:34:22.900
The class pop-up, which shows you the
superclasses and subclasses.

00:34:23.000 --> 00:34:28.070
There's the included files pop-up,
which show you what files

00:34:28.080 --> 00:34:32.880
are included by this file,
and what files this includes.

00:34:32.880 --> 00:34:36.310
And so all of those actually can
be accessed with the keyboard.

00:34:36.320 --> 00:34:38.880
You don't have to use the
mouse to get to these things.

00:34:38.920 --> 00:34:43.080
By default, we attach key bindings for
the file and function pop-ups,

00:34:43.150 --> 00:34:45.120
control one and control two.

00:34:45.120 --> 00:34:48.680
You can assign key bindings
yourself for many of these.

00:34:48.680 --> 00:34:51.100
of the other ones,
for all of the other ones.

00:34:53.230 --> 00:34:55.430
Okay, so jumping to a definition.

00:34:55.440 --> 00:34:57.720
Well, there's a menu command
to jump to a definition.

00:34:57.720 --> 00:35:02.720
There's also a menu command to look up
the current text in the documentation.

00:35:02.840 --> 00:35:06.350
But you can get to this quickly
with the mouse by just command

00:35:06.350 --> 00:35:08.240
double-clicking on a word.

00:35:08.240 --> 00:35:10.550
So command double-click
does a jump to definition.

00:35:10.650 --> 00:35:13.690
Here I've command
double-clicked on init with URL,

00:35:13.690 --> 00:35:15.690
and it brings up a little
pop-up if there's more than

00:35:15.690 --> 00:35:18.710
one occurrence of that symbol,
and then you can choose

00:35:18.710 --> 00:35:20.320
which one you want to go to.

00:35:20.350 --> 00:35:24.360
Option double click does a similar thing,
but goes to the documentation window.

00:35:26.900 --> 00:35:31.780
The function pop-up is normally sorted
by the order of the symbols in the file.

00:35:31.780 --> 00:35:34.040
If you hold down the Option key
while you bring it up,

00:35:34.040 --> 00:35:35.680
it will sort it alphabetically.

00:35:35.680 --> 00:35:39.020
You can actually change the default
behavior if you prefer one or the

00:35:39.020 --> 00:35:41.840
other in the Xcode preferences.

00:35:41.840 --> 00:35:46.290
And then Option key will give you the
other search option when you use it.

00:35:49.270 --> 00:35:53.100
Let's talk a little bit
about customizing the editor.

00:35:53.160 --> 00:35:56.280
So CodeSense, I showed you the new
inline code completion.

00:35:56.320 --> 00:35:59.520
Well, you can turn that off if
you like in the preferences,

00:35:59.570 --> 00:36:02.610
but you can still have access to
the other code completion commands.

00:36:02.660 --> 00:36:07.590
There's the next completion command,
which cycles through a list of

00:36:07.700 --> 00:36:09.620
the most likely completions.

00:36:09.620 --> 00:36:13.460
So you--it's accessible
with a control period,

00:36:13.500 --> 00:36:16.450
and when you hit control period,
it will just go through

00:36:16.450 --> 00:36:18.730
the most likely options.

00:36:18.840 --> 00:36:21.340
And then, of course,
there's the pop-up list

00:36:21.630 --> 00:36:23.390
for code completion,
which you can get to by

00:36:23.390 --> 00:36:25.550
hitting the escape key.

00:36:28.740 --> 00:36:29.370
Key bindings.

00:36:29.460 --> 00:36:33.040
Key bindings is one of the
coolest things in Xcode,

00:36:33.040 --> 00:36:35.270
actually, I think.

00:36:35.400 --> 00:36:37.900
So you can assign key
bindings for anything,

00:36:37.930 --> 00:36:40.620
any key bindings for
anything in the menu,

00:36:40.690 --> 00:36:44.540
or anything in the text editor.

00:36:44.600 --> 00:36:47.530
Now, it turns out that there aren't
key bindings assigned to a lot of

00:36:47.620 --> 00:36:51.300
the commands that are available,
and if these are commands that you like,

00:36:51.350 --> 00:36:54.130
then this is the place to go.

00:36:54.360 --> 00:36:59.900
And if there's a command you wish we had,
you can look in the key

00:36:59.900 --> 00:37:02.290
bindings and see if it's there.

00:37:02.670 --> 00:37:05.140
There are quite a few gems in there.

00:37:05.680 --> 00:37:09.290
And speaking of gems,
we have text macros.

00:37:09.620 --> 00:37:12.240
So the text macros are actually,
there's quite a few of them that

00:37:12.240 --> 00:37:14.940
are available via code completion.

00:37:14.980 --> 00:37:18.170
So whenever that particular
macro is appropriate for

00:37:18.260 --> 00:37:22.520
the context in the editor,
it will show up in the completion list.

00:37:22.550 --> 00:37:24.520
But it's also available in the menu.

00:37:24.550 --> 00:37:28.010
Now it's kind of deep inside
this hierarchical menu,

00:37:28.060 --> 00:37:31.890
but the reason it's there is so that
you can assign key bindings to them.

00:37:32.070 --> 00:37:36.030
So probably even the people in the front
row can't see what I've selected here,

00:37:36.030 --> 00:37:39.560
but there's a parenthesized
selection menu item.

00:37:39.600 --> 00:37:42.120
And that's bound to an option paren here.

00:37:42.290 --> 00:37:45.520
So you can just,
any selection in the editor,

00:37:45.670 --> 00:37:50.010
make a selection, hit option paren,
and you've just added parens around it.

00:37:52.930 --> 00:37:55.940
So now let's talk a little
bit about refactoring.

00:37:55.970 --> 00:38:02.500
So refactoring is modifying your
code while preserving its behavior.

00:38:02.530 --> 00:38:05.350
So by itself,
that's not particularly interesting,

00:38:05.350 --> 00:38:08.180
but when you're going to
make a change to your code,

00:38:08.190 --> 00:38:09.980
often you need to restructure it some.

00:38:09.980 --> 00:38:13.250
So it's done in preparation
for making changes.

00:38:13.680 --> 00:38:16.240
Programmers aren't always good at it.

00:38:16.280 --> 00:38:19.210
We make mistakes, typing errors,
what have you.

00:38:19.320 --> 00:38:20.720
But computers are better at it.

00:38:20.830 --> 00:38:23.500
They're faster and more accurate.

00:38:23.610 --> 00:38:27.670
So this is what the refactoring
window looks like in Xcode.

00:38:28.100 --> 00:38:31.560
At the top, we see where we've
specified the refactoring.

00:38:31.560 --> 00:38:35.610
In this case, I'm doing a rename of
an instance variable.

00:38:35.700 --> 00:38:38.160
In the middle of the pane,
there's a list of files that will

00:38:38.160 --> 00:38:41.880
be changed by this refactoring,
and when you click on one of those files,

00:38:41.880 --> 00:38:45.590
it shows you the comparison view,
the same view that you saw earlier

00:38:45.660 --> 00:38:47.510
with source code management.

00:38:50.300 --> 00:38:53.930
We support quite a few
refactorings in Xcode.

00:38:53.940 --> 00:38:57.760
It's interesting, like,
the rename refactoring is cool because

00:38:57.760 --> 00:39:03.330
we don't just rename something if it
appears in source files or header files.

00:39:03.520 --> 00:39:07.190
Say it's a method, you know,
an IB action, for instance,

00:39:07.200 --> 00:39:11.100
or a class that also shows up
in an interface builder file.

00:39:11.190 --> 00:39:15.310
We go ahead and rename those in
the interface builder file as well.

00:39:15.480 --> 00:39:18.160
If it's a class that matches
the name of the source file,

00:39:18.160 --> 00:39:20.160
we can rename the source file.

00:39:20.170 --> 00:39:23.700
And of course, if that source file's
under source code control,

00:39:23.720 --> 00:39:28.980
we tell the source code management
system to rename it as well.

00:39:30.590 --> 00:39:33.290
With that, I'm going to show you some
of these features in action.

00:39:33.340 --> 00:39:36.190
So let's go over to the demo machine.

00:39:38.710 --> 00:39:42.700
Okay, so I'm going to make a
change to this project.

00:39:42.780 --> 00:39:47.440
Right now, it brings up 20 or so slides
that are sitting inside the

00:39:47.570 --> 00:39:50.270
/library/desktop/pictures folder.

00:39:50.600 --> 00:39:53.680
I happen to know that there
are more pictures in there.

00:39:53.870 --> 00:39:57.900
There are subdirectories underneath
that that also contain more pictures.

00:39:57.920 --> 00:40:00.450
So I want to change the code.

00:40:01.110 --> 00:40:04.240
So that it recurses down
into those subdirectories.

00:40:04.240 --> 00:40:07.300
And this code isn't actually
very familiar to me.

00:40:07.340 --> 00:40:08.300
So how do I do that?

00:40:08.300 --> 00:40:13.300
Well, first, I'm gonna start by looking
up desktop pictures.

00:40:13.300 --> 00:40:18.890
So I'm gonna do a find in project.

00:40:21.710 --> 00:40:24.280
We've done another find here,
so I'm going to search

00:40:24.280 --> 00:40:26.200
for desktop pictures.

00:40:26.200 --> 00:40:28.540
Ah, that's probably good enough.

00:40:29.300 --> 00:40:36.140
And we can see that there's an
occurrence here in maincontroller.m.

00:40:36.220 --> 00:40:38.990
So here we're creating a new
browser window controller

00:40:39.000 --> 00:40:40.800
and passing it that path.

00:40:40.860 --> 00:40:42.460
So that sounds interesting.

00:40:42.530 --> 00:40:45.250
So let's look at browser
window controller.

00:40:45.480 --> 00:40:49.350
To do that,
I'm going to bring up Open Quickly.

00:40:50.720 --> 00:40:53.500
So here's that list I showed
you a little bit earlier.

00:40:53.500 --> 00:40:54.940
Shows the header and source file.

00:40:54.940 --> 00:40:57.840
It also shows the class declaration.

00:40:57.840 --> 00:41:01.570
I think I want to go to the source file,
so let's go ahead and do that.

00:41:02.540 --> 00:41:04.400
Okay, well,
there's a big header here at the top.

00:41:04.480 --> 00:41:07.640
Actually, we have the code folding
ribbon hidden here.

00:41:07.640 --> 00:41:12.420
I'm going to go ahead
and fold where I am.

00:41:12.510 --> 00:41:13.920
So hide that comment out of the way.

00:41:13.920 --> 00:41:18.820
We can see there's a path method,
the initializer here,

00:41:18.820 --> 00:41:23.510
and it's setting an instance
variable to that path.

00:41:23.930 --> 00:41:25.560
Well, that sounds sort of interesting.

00:41:25.560 --> 00:41:27.300
I guess I want to follow
where that path is.

00:41:27.300 --> 00:41:32.110
I'm going to go ahead and
hide away some more of these,

00:41:32.110 --> 00:41:35.740
all the methods and functions here,
and see what we have in this file.

00:41:35.800 --> 00:41:38.170
So none of these look
particularly interesting.

00:41:38.200 --> 00:41:38.960
Let's look at setup.

00:41:39.040 --> 00:41:42.870
I'm going to go ahead and
double-click on that to open it up.

00:41:43.240 --> 00:41:47.710
And we can see the first
line of code in here.

00:41:48.080 --> 00:41:50.430
We're creating an asset
collection and passing it a

00:41:50.430 --> 00:41:52.420
URL that's built with that path.

00:41:52.750 --> 00:41:54.870
So that actually looks interesting.

00:41:54.990 --> 00:41:58.500
Let's go ahead and command
double-click on asset collection.

00:41:58.850 --> 00:42:01.820
And it takes me to that class definition.

00:42:04.600 --> 00:42:05.890
I think we have a trend here.

00:42:05.990 --> 00:42:08.940
It's now putting that
into an instance variable.

00:42:09.020 --> 00:42:10.700
So we need to follow that around.

00:42:10.700 --> 00:42:15.640
We can go to the function pop-up and see
if there's anything interesting here.

00:42:15.860 --> 00:42:18.020
Well, there's a refresh method.

00:42:18.020 --> 00:42:20.400
I'll go ahead and go down to that.

00:42:20.600 --> 00:42:21.860
I have been in this code before.

00:42:21.860 --> 00:42:23.940
I actually know where the things are.

00:42:23.970 --> 00:42:25.280
But this is a general idea.

00:42:25.310 --> 00:42:30.220
So here in this method here,
the first line is calling

00:42:30.370 --> 00:42:32.340
find asset files in root URL.

00:42:32.410 --> 00:42:36.520
Now that sounds actually really
interesting for what I'm about to do.

00:42:36.550 --> 00:42:40.080
So I'm going to go ahead and
command double click on that method.

00:42:40.090 --> 00:42:44.400
And we can see it actually just
takes me down further into that file.

00:42:46.100 --> 00:42:49.380
So, what does this method do?

00:42:49.410 --> 00:42:53.840
Well, it takes that URL and actually
pulls the path right back out of it.

00:42:53.840 --> 00:42:56.770
It creates a mutable array,
and it's gonna put stuff

00:42:56.780 --> 00:43:00.040
in that mutable array,
it returns that.

00:43:00.110 --> 00:43:03.140
So we have a file manager here.

00:43:03.140 --> 00:43:06.660
It's getting the directory
contents at that path,

00:43:06.710 --> 00:43:09.470
and then it's just looping
through all of those asset files

00:43:09.530 --> 00:43:11.880
and adding them to the array.

00:43:12.080 --> 00:43:16.630
So, as I said before,
I want to recurse through that

00:43:16.630 --> 00:43:18.700
whole directory hierarchy.

00:43:18.780 --> 00:43:20.700
So in order to do that,
I actually want to do that

00:43:20.820 --> 00:43:21.760
in a different method.

00:43:21.800 --> 00:43:22.800
I don't want to do that here.

00:43:22.800 --> 00:43:24.940
So I'm going to create a
new method out of this,

00:43:24.940 --> 00:43:26.840
and to do that, whoops,

00:43:28.700 --> 00:43:33.580
To do that, I'm going to control clip,
bring up the context menu here,

00:43:33.630 --> 00:43:35.760
and choose Refactor.

00:43:36.250 --> 00:43:38.910
So it knows that the most likely
thing I'm going to want to do with

00:43:39.050 --> 00:43:41.750
this kind of code is extract it.

00:43:42.070 --> 00:43:44.000
Go ahead and zoom this out.

00:43:44.000 --> 00:43:47.440
So it's analyzing the file right now to
figure out what parameters need to be

00:43:47.540 --> 00:43:49.830
passed in and what should get returned.

00:43:49.910 --> 00:43:51.840
Well,
nothing should get returned in this case.

00:43:51.860 --> 00:43:53.730
And it gives you a default
name for the method,

00:43:53.830 --> 00:43:57.700
which is not particularly interesting,
extracted method,

00:43:57.790 --> 00:43:59.500
and passes it asset files.

00:43:59.520 --> 00:44:04.310
Well, I want to name this method find
assets or find files in directory,

00:44:04.410 --> 00:44:07.040
so I'm going to go
ahead and cut that out.

00:44:07.060 --> 00:44:10.920
I'm going to go over here
and type find assets.

00:44:12.100 --> 00:44:19.440
And go ahead and paste that back
in and say in directory colon and

00:44:19.440 --> 00:44:21.890
get rid of this stuff on the end.

00:44:22.550 --> 00:44:25.980
Okay, so now I have the new
signature for my method.

00:44:26.000 --> 00:44:28.360
I'll go ahead and preview it.

00:44:28.380 --> 00:44:31.080
And there's some changes here
down below we can look at,

00:44:31.100 --> 00:44:33.220
but let's go ahead and apply it.

00:44:33.250 --> 00:44:36.840
Little easier to see this new
method in line in the editor.

00:44:36.870 --> 00:44:38.860
Okay, so I've created a new method.

00:44:38.880 --> 00:44:39.700
Cool.

00:44:39.700 --> 00:44:44.600
So now I want to go and recurse
into the subdirectories.

00:44:44.920 --> 00:44:48.340
So inside this loop,
I'm going to add an else statement.

00:44:48.410 --> 00:44:50.280
Now that's fine,
I could just keep typing,

00:44:50.340 --> 00:44:52.760
but it turns out there's
code completion for this.

00:44:52.840 --> 00:44:54.620
We have a text macro,
so I'm going to go ahead

00:44:54.660 --> 00:44:57.020
and say next completion.

00:44:57.870 --> 00:45:01.820
and it inserts a block for the else.

00:45:01.960 --> 00:45:06.690
And, okay, so I want to call this
method recursively.

00:45:07.080 --> 00:45:11.600
But the method actually hasn't yet been
discovered by our code sense index.

00:45:11.600 --> 00:45:16.600
So when we save a file,
that's when our index goes and indexes.

00:45:16.600 --> 00:45:20.560
So I'm gonna save that so that code
completion can know about this.

00:45:20.620 --> 00:45:25.560
And then I'm gonna go ahead
and say self find assets.

00:45:25.560 --> 00:45:28.620
And let's go ahead and bring
up the completion list.

00:45:28.630 --> 00:45:30.280
I'll hit the escape key.

00:45:30.360 --> 00:45:33.460
So it knows that I have
find assets in directory,

00:45:33.480 --> 00:45:35.540
the method that I'm in.

00:45:36.120 --> 00:45:37.940
So I'm going to go ahead and complete.

00:45:37.940 --> 00:45:41.220
I'll just go ahead and hit
Control period to fill that out.

00:45:41.860 --> 00:45:48.500
Now I can click on the
placeholder token here,

00:45:48.690 --> 00:45:54.340
or there's also under the Edit menu,
Select Next Placeholder.

00:45:54.340 --> 00:45:57.330
Well, I'll go ahead and do
Select Next Placeholder,

00:45:57.370 --> 00:46:01.000
Control slash, and it takes me right
over to that placeholder.

00:46:01.000 --> 00:46:03.600
And I want to pass it root path.

00:46:03.740 --> 00:46:05.080
Well, no,
I don't want to pass it root path.

00:46:05.140 --> 00:46:07.100
I want to pass it a new
path that's a subdirectory.

00:46:07.100 --> 00:46:11.290
So I'm going to create a new variable,
path,

00:46:12.080 --> 00:46:17.180
- We'll go up here and
create an NSString,

00:46:17.180 --> 00:46:22.250
and I'm gonna complete that out,
star path, and assign it to be,

00:46:22.250 --> 00:46:26.300
let's see, I want it to be the root path,
root path,

00:46:26.300 --> 00:46:28.940
we'll go ahead and complete that.

00:46:28.940 --> 00:46:32.400
And I want it to be string by append,
well,

00:46:32.400 --> 00:46:35.820
let's go ahead and bring up the list.

00:46:35.820 --> 00:46:36.570
Oh.

00:46:41.030 --> 00:46:42.910
Thank you.

00:46:43.080 --> 00:46:45.230
So it's string by
appending path component.

00:46:45.380 --> 00:46:46.740
Where'd my cursor go?

00:46:46.740 --> 00:46:47.560
There it is.

00:46:47.560 --> 00:46:52.390
And we'll pass it the file name.

00:46:55.410 --> 00:46:56.300
semicolon.

00:46:56.300 --> 00:47:00.050
Okay, that's good, but root path,
I don't really like the

00:47:00.120 --> 00:47:01.760
name of that variable.

00:47:01.760 --> 00:47:04.140
I'm not just starting from the root.

00:47:04.140 --> 00:47:07.190
I'm actually, you know,
recursing down in.

00:47:07.200 --> 00:47:11.060
So let's go ahead and change
the name of that variable.

00:47:11.060 --> 00:47:14.610
And I'm going to use edit all in scope,
command control T.

00:47:14.610 --> 00:47:19.410
And you can see that it's highlighted
up at the top in the signature for

00:47:19.410 --> 00:47:21.320
the method and in this call here.

00:47:21.320 --> 00:47:22.950
It's highlighted that all at once.

00:47:23.040 --> 00:47:24.720
And I just want to call it directory.

00:47:24.720 --> 00:47:26.880
So as I type,
it changes it in all places.

00:47:26.880 --> 00:47:28.700
If you move outside, it's done.

00:47:30.670 --> 00:47:32.600
Okay, so let's see.

00:47:32.640 --> 00:47:34.610
There's one other thing
I need to do here.

00:47:34.820 --> 00:47:37.980
So I'm now storing the file
names into this mutable array,

00:47:38.010 --> 00:47:40.200
but I actually want to
store the full path.

00:47:40.250 --> 00:47:43.010
So I'm going to change that to be path.

00:47:43.340 --> 00:47:43.810
That's good.

00:47:43.820 --> 00:47:49.170
Now where we used it,
I also need to change how it's used,

00:47:49.170 --> 00:47:52.320
and that was back up in the refresh
method that we looked at before.

00:47:52.320 --> 00:47:57.370
So if we look at here,
we can see that it's...

00:47:57.740 --> 00:48:00.340
Creating a URL out of that file name.

00:48:00.360 --> 00:48:03.490
And I just want to create, well,
a plain file URL.

00:48:03.490 --> 00:48:06.590
So let's see, I'll double click on that.

00:48:06.880 --> 00:48:09.350
Select to there, and let's say,
so file URL,

00:48:09.360 --> 00:48:13.560
and I don't remember if that's the,
you know, file URL with path,

00:48:13.560 --> 00:48:16.650
that's what I want,
and I want to pass it the file name.

00:48:17.130 --> 00:48:19.040
Go ahead and complete that out.

00:48:19.050 --> 00:48:22.600
Okay, I'm gonna hit save and
let's go and run it.

00:48:23.100 --> 00:48:25.340
and see if I've got any more files.

00:48:25.340 --> 00:48:27.340
Ooh, it built, excellent.

00:48:27.340 --> 00:48:30.900
Doesn't always work that way.

00:48:30.900 --> 00:48:33.490
All right, we got a lot more files.

00:48:33.510 --> 00:48:35.020
Woo-hoo!

00:48:35.020 --> 00:48:35.860
Okay, that's it.

00:48:35.860 --> 00:48:40.080
So with that,
I'm gonna take you back to Andrew.

00:48:40.080 --> 00:48:42.320
Let's give him the clicker.

00:48:42.320 --> 00:48:46.350
And he'll take us out.

00:48:51.310 --> 00:48:54.150
Thank you, Dave.

00:48:54.570 --> 00:48:58.680
Okay, so what are some of the things
that we've shown you today?

00:48:59.260 --> 00:49:03.610
Well, we've shown you how to use
Xcode's SCM support to perform

00:49:03.610 --> 00:49:08.090
SCM operations directly within the IDE.

00:49:08.190 --> 00:49:13.550
We've shown you how to use Xcode's
debugger and its data tips to

00:49:13.550 --> 00:49:17.900
debug your application from
directly within your text editor.

00:49:17.990 --> 00:49:20.770
And we've shown you how to use
the features of the text editor

00:49:21.120 --> 00:49:24.830
and Xcode's automated refactoring
tools to add functionality to your

00:49:24.890 --> 00:49:27.930
application quickly and easily.

00:49:30.060 --> 00:49:33.430
Here we want to talk about some
related sessions you can also go to.

00:49:33.650 --> 00:49:37.000
So now there was the Xcode for
Visual Studio and Eclipse developers.

00:49:37.000 --> 00:49:38.900
That was yesterday,
but you'll be able to see

00:49:38.900 --> 00:49:39.950
that on video later on.

00:49:40.000 --> 00:49:44.230
There's also understanding the Xcode
project management and build system,

00:49:44.250 --> 00:49:45.960
which we mentioned before.

00:49:45.960 --> 00:49:48.180
That is today in this room, Marina.

00:49:48.180 --> 00:49:52.170
There's also debugging and
profiling your iPhone application,

00:49:52.170 --> 00:49:56.160
and that's tomorrow in
the Presidio at 10.30 a.m.

00:49:56.280 --> 00:50:00.920
In addition, we would encourage you
to go to the labs today.

00:50:00.920 --> 00:50:03.730
There are three Xcode
developer tools labs.

00:50:03.730 --> 00:50:06.620
One is today at 2 p.m.

00:50:06.620 --> 00:50:09.300
in OS X Foundations Lab C.

00:50:09.300 --> 00:50:12.930
There's another one
tomorrow at 3.30 in Lab A.

00:50:12.960 --> 00:50:17.770
And then there's an iPhone
lab on Friday in iPhone Lab A.

00:50:17.800 --> 00:50:21.780
So we encourage you to go to those,
but you can also go to any

00:50:22.070 --> 00:50:26.220
of our open hours labs,
and there will be engineers there.

00:50:26.220 --> 00:50:27.160
to answer your questions.