WEBVTT

00:00:21.190 --> 00:00:24.780
All right, good afternoon, everyone,
and welcome to the Address

00:00:24.830 --> 00:00:26.500
Book Server session.

00:00:26.500 --> 00:00:30.340
So this is a new product
that we introduced yesterday.

00:00:30.340 --> 00:00:31.810
Oops, I don't have my slide yet.

00:00:31.870 --> 00:00:32.930
There I am.

00:00:32.940 --> 00:00:34.640
I'm Juussi Mantere.

00:00:34.640 --> 00:00:37.460
I'm the engineering manager
for Address Book Server,

00:00:37.460 --> 00:00:39.160
and this is our agenda today.

00:00:39.160 --> 00:00:42.670
So we are introducing a new
component in Mac OS X Server,

00:00:42.980 --> 00:00:47.050
which will ship as part of Snow Leopard,
and that is Address Book.

00:00:47.110 --> 00:00:50.610
So we have all these
collaboration applications.

00:00:50.640 --> 00:00:54.680
So we have mail, we have calendar,
we have chat, we have Address Book.

00:00:54.800 --> 00:00:57.040
So these are all the client applications.

00:00:57.120 --> 00:01:01.120
And, of course, on Mac OS X Server,
we have corresponding server pieces.

00:01:01.120 --> 00:01:04.310
So we have server for mail,
we have server for calendaring,

00:01:04.310 --> 00:01:08.480
we have a server for chat,
and there is something missing.

00:01:08.480 --> 00:01:09.660
Like, what's wrong with this picture?

00:01:09.660 --> 00:01:13.890
And to get us where we need to be,
we are introducing the

00:01:13.890 --> 00:01:15.820
Address Book Server.

00:01:15.820 --> 00:01:21.070
So the fourth leg in our server
component to support Address Book sharing

00:01:21.070 --> 00:01:23.810
and server-stored Address Books.

00:01:24.680 --> 00:01:27.490
When we were developing
the Address Book Server,

00:01:27.490 --> 00:01:31.070
we looked at the various options
on how to actually create a

00:01:31.070 --> 00:01:33.130
system to store your contacts in.

00:01:33.140 --> 00:01:37.350
And we looked at LDAP,
so Lightweight Directory Access.

00:01:37.360 --> 00:01:42.460
Yeah, that's probably good for accounts,
but accounts are not contacts.

00:01:42.560 --> 00:01:46.170
And directories are rarely writable,
so you don't necessarily have

00:01:46.170 --> 00:01:48.000
write access to the directory.

00:01:48.680 --> 00:01:52.200
And adding attributes or
elements into your directory,

00:01:52.200 --> 00:01:55.620
like if you want to store a field
that's not supported by the LDAP schema,

00:01:55.620 --> 00:02:00.170
that would be challenging to get your
directory administrators to add schema

00:02:00.170 --> 00:02:02.600
elements is usually an uphill battle.

00:02:02.600 --> 00:02:05.360
And lightweight, yeah.

00:02:05.360 --> 00:02:09.100
I think hippopotamus is lightweight
compared to an elephant.

00:02:09.100 --> 00:02:12.290
Like LDAP is lightweight
compared to X500.

00:02:12.300 --> 00:02:16.450
Still lightweight if you
want to do open directory,

00:02:16.450 --> 00:02:18.580
open active directory.

00:02:18.680 --> 00:02:21.360
If you want to do open directory,
e-directer compatibility,

00:02:21.400 --> 00:02:23.170
the lightweight kind of goes out
the window and it really becomes

00:02:23.180 --> 00:02:24.580
a heavy framework to deal with.

00:02:24.620 --> 00:02:28.880
And other choices, so let's see OpenID.

00:02:28.900 --> 00:02:32.310
So new emerging standards,
open authentication.

00:02:32.320 --> 00:02:34.070
Well, the name pretty much says it all.

00:02:34.100 --> 00:02:38.580
Authentication, that's identity and
logging in credentials.

00:02:38.700 --> 00:02:41.010
It's not really contacts.

00:02:41.060 --> 00:02:43.240
Other things, Google.

00:02:43.420 --> 00:02:48.000
So Google just announced some
months ago their contacts data API.

00:02:48.680 --> 00:02:50.630
The problem with that
is it is proprietary.

00:02:50.680 --> 00:02:53.080
So if you're willing to
trust the Google Cloud,

00:02:53.080 --> 00:02:54.280
great, good for you.

00:02:54.480 --> 00:02:58.720
But doesn't necessarily do much for
interoperability or ability to take

00:02:58.720 --> 00:03:02.420
your contacts out of that back end
and put them into another back end.

00:03:02.500 --> 00:03:04.680
Ditto for Yahoo.

00:03:04.740 --> 00:03:08.380
So Yahoo just introduced an
address book API as well.

00:03:08.450 --> 00:03:11.850
Suffers pretty much the same
issue as Google where it is

00:03:11.850 --> 00:03:14.070
proprietary to that one vendor.

00:03:15.180 --> 00:03:16.790
So.

00:03:16.900 --> 00:05:19.100
[Transcript missing]

00:05:20.470 --> 00:05:24.640
So we already have some experience
developing dev-based services.

00:05:24.650 --> 00:05:27.930
So if you look at how the calendar
client talks to the calendar

00:05:27.940 --> 00:05:31.130
server on Mac OS X Server,
it's using CalDAV,

00:05:31.130 --> 00:05:34.320
which is another recognized protocol.

00:05:34.320 --> 00:05:35.740
There's an RFC for that.

00:05:35.740 --> 00:05:40.260
And it's leveraging web dev and
using the iCalendar data format.

00:05:40.260 --> 00:05:43.200
And we have a client server service.

00:05:43.200 --> 00:05:46.900
And to do CardDAV,
this pretty much fits the same model.

00:05:46.900 --> 00:05:49.520
So we have, again, the dev foundation.

00:05:49.520 --> 00:05:52.820
And instead of doing a
payload for calendaring,

00:05:52.820 --> 00:05:54.820
we have a payload for contacts.

00:05:54.820 --> 00:05:56.800
And out of that comes CardDAV.

00:05:56.830 --> 00:06:00.910
So this pretty much follows the
methodologies we've already set in

00:06:00.910 --> 00:06:02.930
place for other services that we offer.

00:06:03.170 --> 00:06:07.090
So we're leveraging all the backend
work that we already have in place when

00:06:07.090 --> 00:06:10.480
we implemented the calendar server.

00:06:10.490 --> 00:06:15.690
So we can reuse pretty much our
expertise in developing this solution.

00:06:16.400 --> 00:06:19.380
So, Address Book Server,
new in Snow Leopard.

00:06:19.480 --> 00:06:21.440
So, what do we get with this?

00:06:21.690 --> 00:06:24.400
This is a server for your contacts.

00:06:24.490 --> 00:06:28.200
Any contact, be it public, private,
allows you to share contacts,

00:06:28.200 --> 00:06:32.350
allows you to search on the server,
and the solution is standards-based,

00:06:32.350 --> 00:06:36.840
which means that other clients that will
come out there or other servers that will

00:06:36.840 --> 00:06:40.250
implement CardDAV will all interoperate,
just like you have

00:06:40.250 --> 00:06:44.180
interoperability with CalDAV,
or let's say, web,

00:06:44.180 --> 00:06:46.280
which is kind of interoperable
from client server.

00:06:46.300 --> 00:06:48.610
Or mail clients talking to mail servers.

00:06:48.610 --> 00:06:51.860
So, this is probably the right
choice for the long term.

00:06:53.520 --> 00:06:55.050
How do you use the server?

00:06:55.230 --> 00:06:58.400
On the client side, we use Address Book.

00:06:58.560 --> 00:07:03.190
The Address Book Server on
Mac OS X Server can be directly used

00:07:03.190 --> 00:07:05.630
from Address Book on Mac OS X Client.

00:07:06.160 --> 00:07:09.410
Instead of having all your
contacts stored locally,

00:07:09.450 --> 00:07:13.250
we now have an option to point
the Address Book Client to an

00:07:13.320 --> 00:07:16.150
Address Book Server and gather
your contacts from there.

00:07:16.160 --> 00:07:19.460
And of course,
just like with Mail and iCal and iChat,

00:07:19.490 --> 00:07:24.340
you can have multiple accounts that
are offered through the Address Book.

00:07:24.410 --> 00:07:27.810
So you can have one server that is
your primary Address Book Server,

00:07:27.810 --> 00:07:31.110
and you can have other servers that
you can connect to to store other

00:07:31.250 --> 00:07:35.360
contacts that you don't necessarily
want to store on your primary server.

00:07:37.280 --> 00:07:40.750
And this behaves as you'd expect.

00:07:40.930 --> 00:07:45.770
So it's just like using Address
Book with local contacts except now

00:07:45.840 --> 00:07:47.080
everything's stored on the server.

00:07:47.080 --> 00:07:51.980
So editing works, creating groups,
creating shared groups,

00:07:51.980 --> 00:07:55.970
and you can access the contacts
you have from any client,

00:07:55.970 --> 00:07:59.820
be it from a system at home,
be it a system at the office,

00:07:59.820 --> 00:08:03.340
or a mobile device that
will support CardDAV.

00:08:03.340 --> 00:08:05.870
And like any account,
it's just another account

00:08:06.230 --> 00:08:09.620
and you can have multiple
accounts inside Address Book.

00:08:11.360 --> 00:08:12.560
and application support.

00:08:12.600 --> 00:08:16.490
So out of the box,
any application that uses the standard

00:08:16.550 --> 00:08:21.740
Address Book interfaces to match,
let's say, autocomplete for you,

00:08:21.760 --> 00:08:24.290
Mail does that because it's
already hooked up into Address

00:08:24.290 --> 00:08:26.790
Book calendar and chat as well.

00:08:26.930 --> 00:08:29.660
So you get application support for free.

00:08:29.720 --> 00:08:33.970
So any contacts that you store on the
Address Book Server will become all

00:08:34.040 --> 00:08:37.770
immediately available on the clients
when they just support the Address

00:08:37.780 --> 00:08:40.840
Book APIs to navigate your contacts.

00:08:41.300 --> 00:08:44.380
And when will we ship this?

00:08:44.380 --> 00:08:47.280
So this will be part of
Mac OS X Snow Leopard.

00:08:47.280 --> 00:08:53.120
So we don't have a version of the server
in the current seed build that you have.

00:08:53.120 --> 00:08:58.550
So if you're not an ADC member
who has access to the seed builds,

00:08:58.550 --> 00:09:02.580
please sign up and get your status
in such a state that you can

00:09:02.590 --> 00:09:06.440
receive future Snow Leopard builds
because we will be seeding builds

00:09:06.550 --> 00:09:10.120
of Snow Leopard with Address
Book Server built in in the future,

00:09:10.170 --> 00:09:14.240
but it's not in the current build that
you received at the developer conference.

00:09:14.240 --> 00:09:18.600
So up your membership
if you need to do so.

00:09:18.600 --> 00:09:20.220
Open source.

00:09:20.500 --> 00:09:24.040
Just like with the calendar server,
we will release Address

00:09:24.140 --> 00:09:26.410
Book Server under Mac OS Forge.

00:09:26.740 --> 00:09:29.020
So this will be under the Darwin license.

00:09:29.060 --> 00:09:33.490
And we will have this just
like you can have the current

00:09:34.120 --> 00:09:35.760
calendar server implementation.

00:09:35.810 --> 00:09:40.930
It will be available on the site
we have for Address Book Server,

00:09:40.940 --> 00:09:44.180
which will be addressbookserver.org.

00:09:44.230 --> 00:09:46.040
The site isn't up there yet,
but once we have

00:09:46.040 --> 00:09:49.450
something to show for you,
it will be there.

00:09:50.090 --> 00:09:52.470
And with that,
let's talk a little bit more about

00:09:52.640 --> 00:09:56.000
CardDAV and let me introduce Bruce Gaya,
who is the lead engineer

00:09:56.150 --> 00:09:57.940
for the Address Book Server.

00:09:58.000 --> 00:09:59.400
Bruce.

00:10:01.200 --> 00:10:02.040
That was so good.

00:10:02.040 --> 00:10:04.200
Good job.

00:10:04.200 --> 00:10:06.630
Okay, we're going to talk about CardDAV.

00:10:06.840 --> 00:10:10.340
So CardDAV,
it's actually a very thin layer

00:10:10.680 --> 00:10:12.560
on top of WebDAV and vCard.

00:10:12.840 --> 00:10:14.040
I have a picture here of WebDAV.

00:10:14.040 --> 00:10:16.340
When I mean WebDAV,
it's a modern WebDAV server

00:10:16.340 --> 00:10:17.140
which has ACLs.

00:10:17.140 --> 00:10:20.020
Of course, WebDAV uses XML.

00:10:20.020 --> 00:10:22.190
It's on top of HTTP.

00:10:22.280 --> 00:10:25.400
So we get this thin layer on top of that,
and that's CardDAV.

00:10:25.400 --> 00:10:29.540
And one of the things it does,
it defines Address Books as

00:10:29.590 --> 00:10:32.590
collections of vCards.

00:10:32.820 --> 00:10:34.540
WebDAV collections.

00:10:34.640 --> 00:10:37.750
And they can only contain vCards,
nothing else.

00:10:38.080 --> 00:10:39.920
There's a data model,
which we'll get into a little

00:10:39.920 --> 00:10:42.020
bit more in a later talk,
which we're going to describe

00:10:42.020 --> 00:10:45.610
where the address books will be
found and what the URLs will be.

00:10:46.320 --> 00:10:49.600
and the other thing
CardDAV does is support reports.

00:10:49.600 --> 00:10:52.050
And reports mean queries.

00:10:52.230 --> 00:10:55.290
So it means it defines how you
can query Address Book Server and

00:10:55.590 --> 00:10:58.230
get various vCards back.

00:10:59.450 --> 00:11:02.400
Okay, this is the full name of CardDAV.

00:11:02.410 --> 00:11:05.970
Vcard Extensions to WebDAV,
and this is the name of the

00:11:06.020 --> 00:11:07.800
current internet's draft.

00:11:08.020 --> 00:11:12.030
It's an IETF draft on
the standards track.

00:11:12.090 --> 00:11:17.890
You can look it up, read it yourself,
and it depends on these things.

00:11:18.130 --> 00:11:20.400
And what I mean depends here,
if you read RFCs,

00:11:20.450 --> 00:11:23.260
these are the things which
a valid CardDAV server

00:11:23.870 --> 00:11:26.800
must implement to be valid.

00:11:26.860 --> 00:11:31.590
First of all, Vcards, WebDAV Class 3,
that's a modern WebDAV server,

00:11:31.590 --> 00:11:35.120
and for those of you,
what really WebDAV is, it's an internet,

00:11:35.220 --> 00:11:39.780
I would call it an internet
or HTTP-friendly file service.

00:11:40.160 --> 00:11:42.580
WebDAV Access Control Lists.

00:11:42.620 --> 00:11:45.700
This is going to allow our Address
Book Server to have various access

00:11:45.700 --> 00:11:47.380
controls on various address books.

00:11:47.380 --> 00:11:50.380
So we can have public address books,
private address books,

00:11:50.380 --> 00:11:52.380
shared address books using the ACLs.

00:11:53.420 --> 00:11:57.510
SSL, TLS, this will give us stream
encryption so you can access your

00:11:57.550 --> 00:11:59.380
Address Book Server securely.

00:11:59.380 --> 00:12:02.340
And ETags and WebDAV versioning.

00:12:02.340 --> 00:12:06.750
ETags are like change IDs and
that with versioning will allow

00:12:07.060 --> 00:12:10.790
our Address Book clients or your
Address Book clients to cache vCards

00:12:10.790 --> 00:12:13.790
locally from the server and when
you get offline you can use them,

00:12:13.920 --> 00:12:14.410
make changes.

00:12:14.650 --> 00:12:17.690
When you get back to the network you'll
be able to upload those changes and

00:12:17.690 --> 00:12:19.660
see what has changed on the server.

00:12:20.540 --> 00:12:24.050
The Make Collection Extension,
this is one of those things in the

00:12:24.050 --> 00:12:27.400
RFC that you should implement and our
Address Book Server will implement this.

00:12:27.400 --> 00:12:34.920
It's simply a method so that you can
create an address book on the server and

00:12:34.920 --> 00:12:34.920
that's the name of the internet draft.

00:12:36.000 --> 00:12:37.970
Okay, let's talk about vCards.

00:12:38.140 --> 00:12:40.300
Ubiquitous,
it is a ubiquitous standard for

00:12:40.300 --> 00:12:42.340
storing contact information.

00:12:42.430 --> 00:12:44.040
So let's see how ubiquitous this is.

00:12:44.320 --> 00:12:48.250
So would you raise your
hand if you've used vCards?

00:12:48.480 --> 00:12:49.520
Okay, look at that.

00:12:49.740 --> 00:12:53.030
Is there anybody whose hand didn't go up?

00:12:53.100 --> 00:12:53.800
There's no one.

00:12:53.800 --> 00:12:55.630
Okay,
so that's why I say it's ubiquitous.

00:12:55.700 --> 00:12:56.630
We're all using this.

00:12:56.640 --> 00:12:58.510
It's been around since 1995.

00:12:58.700 --> 00:12:59.830
Versit cards.

00:12:59.910 --> 00:13:02.790
Juussi gave some of the history of that.

00:13:03.720 --> 00:13:08.000
Essentially, when you look at it,
it's a key value property list.

00:13:08.050 --> 00:13:12.430
If you look at this example I have here,
there's various properties such as FN,

00:13:12.430 --> 00:13:16.230
that stands for full name,
N stands for name, there's email,

00:13:16.320 --> 00:13:18.360
telephone, various other things.

00:13:18.410 --> 00:13:21.680
And the RFC defines how
those things are stored,

00:13:21.840 --> 00:13:24.010
what those property names are.

00:13:25.010 --> 00:13:32.100
In CardDAV, in address book collections,
each vCard must have a unique ID,

00:13:32.750 --> 00:13:35.640
In the vCard standard,
one unique ID is supposed to be

00:13:35.640 --> 00:13:39.050
associated with a real object,
like a real user should have the

00:13:39.200 --> 00:13:42.560
same UID in all of his vCards.

00:13:42.620 --> 00:13:45.840
And in our Address Book Server,
there'll be multiple address books.

00:13:45.960 --> 00:13:49.230
So essentially, you can have the same
vCard in many places.

00:13:50.770 --> 00:13:53.380
The vCard standard properties,
non-standard properties start with

00:13:53.470 --> 00:14:01.050
X and that will allow us to be forward
compatible with a new standard which

00:14:01.050 --> 00:14:04.900
is coming along which is vCard v4.0.

00:14:04.900 --> 00:14:04.900
I should have said

00:14:05.260 --> 00:14:08.100
CardDAV supports vCard 3.0.

00:14:08.110 --> 00:14:10.090
It has some limitations.

00:14:10.200 --> 00:14:13.060
There are some new things coming in 4.0,
and here is the name of the

00:14:13.070 --> 00:14:17.990
IETF draft if you want to look
at what's coming in vCard 4.0.

00:14:19.500 --> 00:14:22.960
Okay,
let's look at the CardDAV data model.

00:14:23.050 --> 00:14:24.370
Okay, this is the whole thing.

00:14:24.520 --> 00:14:28.250
Two main things I'm going to go in here,
principles and address books.

00:14:28.410 --> 00:14:31.040
So let's take a quick look at principles.

00:14:34.870 --> 00:14:36.080
So what are principles?

00:14:36.110 --> 00:14:40.180
Well, the users and groups-- and I have a
picture here which shows three users.

00:14:40.210 --> 00:14:43.160
The Address Book Server is going to get
these users from a directory service.

00:14:43.410 --> 00:14:45.140
And in our Address
Book Server implementation,

00:14:45.140 --> 00:14:48.920
we're going to be using the
OS X Directory Services API.

00:14:49.010 --> 00:14:52.560
And if you're familiar with that API,
it has a back-end plug-in architecture

00:14:52.650 --> 00:14:57.120
such that through that API,
we can access all sorts of address books.

00:14:57.130 --> 00:15:01.290
We can access open directory-- excuse me,
I should say we can access all

00:15:01.360 --> 00:15:02.660
sorts of directory services.

00:15:02.770 --> 00:15:04.420
We can access open directory.

00:15:04.450 --> 00:15:07.520
We can access access directory, LDAP,
Apache.

00:15:07.520 --> 00:15:11.800
Or you can have an XML file
which defines users and groups.

00:15:11.840 --> 00:15:15.020
Groups are the same thing-- excuse me,
another form of principles.

00:15:15.040 --> 00:15:17.300
A group essentially contains users.

00:15:17.340 --> 00:15:19.410
Now what does a principle mean?

00:15:19.440 --> 00:15:24.020
A principle is someone who can
live-- is an object which can be in

00:15:24.020 --> 00:15:25.980
the access control list of WebDAV.

00:15:26.000 --> 00:15:28.690
And also, when you authenticate,
you authenticate as a principle.

00:15:28.790 --> 00:15:31.600
So you can authenticate to an
Address Book Server as a principle,

00:15:31.660 --> 00:15:32.590
let's say, the user.

00:15:32.830 --> 00:15:40.710
So let's now look at a address book
with the address book arm of this graph.

00:15:48.490 --> 00:15:51.910
So, in our Address Book Server,
we're going to have a

00:15:51.910 --> 00:15:56.110
collection called Users,
and in that users collection

00:15:56.110 --> 00:15:57.100
will be various users.

00:15:57.100 --> 00:16:00.150
I have a home icon there,
and that's just a collection

00:16:00.150 --> 00:16:01.500
point for the users,
because a user can have

00:16:01.500 --> 00:16:02.390
multiple address books.

00:16:02.400 --> 00:16:06.400
If you look at the user Bruce here,
there's three address books.

00:16:06.490 --> 00:16:08.210
One's called Address Book,
because that happens to be the name we're

00:16:08.210 --> 00:16:09.400
using in our current implementation.

00:16:09.400 --> 00:16:12.400
Another one called Public,
and there can be more address books.

00:16:12.400 --> 00:16:17.010
And in each of those address
books will be various vCards,

00:16:17.030 --> 00:16:20.910
and each of the vCards
will have a unique URL.

00:16:21.570 --> 00:16:25.750
OK, now,
I said that the address book is-- OK,

00:16:25.750 --> 00:16:28.010
let's get this right.

00:16:28.100 --> 00:16:29.330
So we've got CardDAV.

00:16:29.330 --> 00:16:31.660
CardDAV is based on WebDAV, WebDAV ACL.

00:16:31.700 --> 00:16:36.350
That means that each of these address
books can have various access controls.

00:16:36.450 --> 00:16:39.840
So in our address book server,
how we plan to do this is a user's

00:16:39.840 --> 00:16:43.630
primary address book will be
readable and writable to that user.

00:16:43.630 --> 00:16:47.830
But other people will not be able
to see cards in that address book.

00:16:47.920 --> 00:16:51.230
But we have another address book here
belonging to the user called Public.

00:16:51.500 --> 00:16:53.030
And that address book,
the user will be able to read

00:16:53.030 --> 00:16:55.270
and write and make changes in,
add and delete vCards.

00:16:55.580 --> 00:16:58.170
But other people will have
read-only access to that.

00:16:58.320 --> 00:17:02.380
So this will allow the user to have his
own private address book on the server

00:17:02.390 --> 00:17:06.330
and then have a public address book
which others can see so he can publish

00:17:06.330 --> 00:17:08.790
contact information to everyone else.

00:17:10.320 --> 00:17:11.810
So now let's look at groups.

00:17:11.970 --> 00:17:15.240
So I have three groups here, engineering,
management, and staff.

00:17:15.260 --> 00:17:19.300
In our Address Book Server,
each of these groups are principals,

00:17:19.320 --> 00:17:23.020
and each of these can have associated
with a number of address books.

00:17:23.020 --> 00:17:25.620
I have here an address
book called Lunch Club,

00:17:25.630 --> 00:17:28.530
and I have one vCard in
that-- or three vCards.

00:17:28.580 --> 00:17:30.900
The first one's called Beatrice.

00:17:30.900 --> 00:17:33.140
And they each have a unique URL.

00:17:33.260 --> 00:17:37.330
So because we can assign access control
list to all of our address books,

00:17:37.580 --> 00:17:41.480
what we're going to do is have it so
that everyone in the group can read

00:17:41.480 --> 00:17:43.880
and write to these address books.

00:17:43.880 --> 00:17:48.150
There's no one person who owns it.

00:17:48.210 --> 00:17:50.000
Everyone in the group owns it equally.

00:17:50.020 --> 00:17:53.980
And then, as our implementation goes on,
we'll have to make decisions about this.

00:17:54.060 --> 00:17:56.680
But we have the opportunity to
have different access controls

00:17:56.680 --> 00:17:59.580
on each of these address
books or group address books.

00:17:59.580 --> 00:18:02.640
And so that will allow us to have shared
address books shared across the group.

00:18:02.660 --> 00:18:05.310
We can decide later-- we haven't
decided yet-- whether the whole world

00:18:05.310 --> 00:18:07.730
will have read-only access or whether
it will be private to the group.

00:18:07.970 --> 00:18:09.160
But we are going to do that.

00:18:09.160 --> 00:18:11.770
We're going to make those decisions
and hopefully do a good job in our

00:18:11.770 --> 00:18:15.020
address book server implementation.

00:18:15.020 --> 00:18:18.420
So let's look at the
data model in full once.

00:18:19.770 --> 00:18:21.970
and let's talk about CalDAV reports.

00:18:22.120 --> 00:18:23.670
The other thing
CalDAV defines as reports,

00:18:23.790 --> 00:18:24.880
reports are queries.

00:18:24.930 --> 00:18:26.930
They're two queries.

00:18:27.490 --> 00:18:30.870
Address Book Query,
that returns vCards that

00:18:30.870 --> 00:18:32.040
match a given filter.

00:18:32.150 --> 00:18:35.680
So you can have a query which says,
"Show me all the vCards in a particular

00:18:35.680 --> 00:18:39.640
address book that have the nickname,
let's say, 'me,'" and it will return

00:18:39.640 --> 00:18:41.040
you all the address books.

00:18:41.120 --> 00:18:44.740
Excuse me,
all the vCards that match that filter.

00:18:44.830 --> 00:18:50.630
You can also specify which vCard
properties you can return and use that

00:18:50.750 --> 00:18:53.270
to save data traffic to the server.

00:18:53.370 --> 00:18:56.480
There's another call, a companion called
Address Book Multi-Git.

00:18:56.660 --> 00:19:01.110
It returns a set of vCards by a DAV href.

00:19:01.260 --> 00:19:04.240
It also only returns the
specified properties.

00:19:04.310 --> 00:19:06.630
And unlike the Address Book Query,
you can target this at the

00:19:06.690 --> 00:19:08.160
entire address book collection.

00:19:08.160 --> 00:19:11.960
So if you're writing your own client,
you could kind of use it this way.

00:19:12.050 --> 00:19:15.150
So someone could type something
in an address book query,

00:19:15.160 --> 00:19:17.900
an address book search,
and the server would come

00:19:17.900 --> 00:19:23.300
around and return all of the
vCards which match that query.

00:19:23.300 --> 00:19:25.780
Now, when you're making that query,
if I was doing this,

00:19:25.780 --> 00:19:29.300
I would only get the properties out of
the vCards that really matter to the HI.

00:19:29.300 --> 00:19:30.430
I wouldn't get all the properties.

00:19:30.440 --> 00:19:32.950
But then later,
if the user selects a few of

00:19:32.960 --> 00:19:36.980
those address books and drags them
to his server-based directory,

00:19:37.130 --> 00:19:38.190
you now need to do a copy.

00:19:38.340 --> 00:19:41.880
So you could turn around and make
the address multi-git using the

00:19:42.280 --> 00:19:44.440
information returned in the first call.

00:19:44.540 --> 00:19:47.260
And in this call,
you can get all the properties back.

00:19:47.490 --> 00:19:51.360
So this is kind of a data-saving
technique using these two calls.

00:19:52.250 --> 00:19:53.800
I'm going to do a quick example.

00:19:53.860 --> 00:19:55.910
This is an address book query example.

00:19:56.170 --> 00:19:58.000
One thing I'd like you
to note is that's it.

00:19:58.080 --> 00:19:58.750
So it's very simple.

00:19:58.920 --> 00:20:00.770
That's the whole query.

00:20:01.290 --> 00:20:03.120
If we look at the filter,
there's the filter.

00:20:03.120 --> 00:20:06.570
This filter says,
"Find the nickname properties

00:20:06.920 --> 00:20:10.850
which match the string me,
M-E." And right above it,

00:20:10.890 --> 00:20:14.030
that's where you get to decide what
properties you're going to get back.

00:20:14.190 --> 00:20:17.000
In this case, just five properties.

00:20:17.410 --> 00:20:19.980
So I make that call on the request,
and I get a response.

00:20:19.980 --> 00:20:21.580
And if there's only
one vCard that matches,

00:20:21.700 --> 00:20:22.240
here's the response.

00:20:22.320 --> 00:20:22.860
That's all of it.

00:20:23.000 --> 00:20:24.130
See how simple that is?

00:20:24.300 --> 00:20:25.900
And just by looking at it,
you can find the vCard

00:20:25.900 --> 00:20:27.850
information right there.

00:20:31.300 --> 00:20:36.260
So I want to have a word about
the Address Book implementation.

00:20:36.380 --> 00:20:39.780
Since we're in the same company,
there's another server out there and it's

00:20:39.780 --> 00:20:45.430
called Calendar Server and it has a fully
compliant WebDAV implementation already.

00:20:45.640 --> 00:20:48.670
So we are going to use that
WebDAV implementation and then

00:20:48.670 --> 00:20:52.960
we're adding CardDAV elements on
top of that to make our own server.

00:20:53.050 --> 00:20:56.480
So the whole thing is coded in
Python using the Twisted Framework.

00:20:56.550 --> 00:20:59.420
We will make a fully compliant
CardDAV server with all the good

00:20:59.520 --> 00:21:02.820
stuff that happens when you have
a fully compliant WebDAV server.

00:21:03.040 --> 00:21:07.400
We will be using the directory service,
the open directory APIs to

00:21:07.400 --> 00:21:10.190
get our principles,
users and groups.

00:21:10.310 --> 00:21:13.680
And of course, when you use that API,
you get to be put back in plug-ins,

00:21:13.680 --> 00:21:15.730
which means we can go
to Active Directory,

00:21:15.730 --> 00:21:19.590
etc., all those different things, XML,
Apache, whatever you like.

00:21:19.680 --> 00:21:23.940
And we will get all the rich
authentication and authorization

00:21:24.190 --> 00:21:26.480
services that is associated with OWA.

00:21:26.480 --> 00:21:28.920
OS X Leopard server.

00:21:30.210 --> 00:21:32.250
So I have some reference material.

00:21:32.300 --> 00:21:35.010
If you want to find more information,
this is the first one is where we're

00:21:35.010 --> 00:21:37.380
going to be posting our sources.

00:21:37.400 --> 00:21:39.180
And if you want more information
of Twisted and Python,

00:21:39.230 --> 00:21:40.340
get those.

00:21:40.400 --> 00:21:41.980
Or you can Google them.

00:21:42.070 --> 00:21:45.870
And here is another slide which
gives the exact link of all the

00:21:45.970 --> 00:21:50.000
RFCs which I've talked about
during my portion of this talk.

00:21:51.060 --> 00:21:53.940
I'll leave it up there just a minute.

00:21:53.980 --> 00:21:58.160
And then we're going to have
Juussi come and give us a demo.

00:22:05.290 --> 00:22:06.460
All right, thank you, Bruce.

00:22:06.530 --> 00:22:08.720
So if you can go to the demo system.

00:22:08.720 --> 00:22:11.400
So this will be demo three, please.

00:22:11.980 --> 00:22:14.720
Before we do this,
could have a show of hands up.

00:22:14.830 --> 00:22:17.420
So you all came here to hear
about the Address Book Server.

00:22:17.480 --> 00:22:20.980
So could have a show of hands of how
many of you are interested in the

00:22:21.340 --> 00:22:23.140
client side of the Address Book Server?

00:22:23.140 --> 00:22:24.840
As in like,
I just want to be a user of that.

00:22:24.980 --> 00:22:27.000
Could I have a show of hands, please?

00:22:27.550 --> 00:22:29.500
Okay, that's about half the crowd.

00:22:29.500 --> 00:22:33.490
What about either, let's say,
server-side implementation?

00:22:33.500 --> 00:22:35.480
Like, you're interested in, wow.

00:22:35.480 --> 00:22:38.920
Okay, we have more server
people than client people,

00:22:38.920 --> 00:22:41.080
so we'll have lots of
CardDAV servers out there.

00:22:41.100 --> 00:22:45.680
So this is going to be just a short
demo of the client-side feature.

00:22:45.680 --> 00:22:49.850
So this is how Address Book Server is
integrated into the client.

00:22:50.280 --> 00:22:56.560
So the way we use Address
Book and CardDAV inside OS X,

00:22:56.560 --> 00:22:59.580
and this is a preview version
of Snow Leopard client,

00:22:59.580 --> 00:23:04.380
and this is not on your
Snow Leopard DVDs either.

00:23:04.380 --> 00:23:09.140
So again, I implore you to get the seeds
once they come out in the later.

00:23:09.140 --> 00:23:12.400
And the Address Book integration
will only be on the

00:23:12.400 --> 00:23:15.790
Snow Leopard shipping DVDs,
so this will not be open-sourced.

00:23:15.840 --> 00:23:19.380
This will be directly integrated
into Address Book itself.

00:23:20.240 --> 00:23:24.890
And no open-source components there,
so the client-side components are

00:23:25.080 --> 00:23:30.820
still only in the Apple products
and not on Darwin or OS X Forge.

00:23:32.700 --> 00:23:35.210
So let's see what we have here.

00:23:35.400 --> 00:23:38.750
So this pretty much looks like
the address book as you'd expect.

00:23:38.760 --> 00:23:40.560
So there's nothing really new.

00:23:40.760 --> 00:23:44.830
I have contacts, I have one company.

00:23:44.900 --> 00:23:47.520
I could have multiple companies,
but this time I just

00:23:47.520 --> 00:23:49.440
happen to have users here.

00:23:49.450 --> 00:23:54.500
And the only real difference between the
regular address book in Mac OS X Leopard

00:23:54.630 --> 00:23:59.020
and here is that I really don't have
many contacts on my local system.

00:23:59.020 --> 00:24:06.120
So I have a few contacts here,
but only two of them are really local.

00:24:06.380 --> 00:24:07.730
Well, three.

00:24:08.190 --> 00:24:10.060
That's all I have.

00:24:10.220 --> 00:24:12.520
Everything else is stored
on an address book server.

00:24:12.560 --> 00:24:16.440
So here I have one address book
server that I have configured for

00:24:16.790 --> 00:24:19.260
my primary address book contacts.

00:24:19.260 --> 00:24:23.740
And just for the WWDC show,
I have created another configuration,

00:24:23.770 --> 00:24:28.740
which is tied into the
WWDC address book server setup.

00:24:29.140 --> 00:24:32.050
So here we might have a
different set of users.

00:24:32.190 --> 00:24:36.070
So let's say my primary address
book is stored at my company's site

00:24:36.210 --> 00:24:38.520
or at my home site or office site.

00:24:38.520 --> 00:24:42.780
And this WWDC server could be
more like an ad hoc server.

00:24:42.830 --> 00:24:46.710
So something that's set up once
and after the show is done,

00:24:46.720 --> 00:24:47.680
then it's turned on.

00:24:47.710 --> 00:24:51.840
It's primarily to share contacts
with a work group that you're working

00:24:52.130 --> 00:24:54.620
on or working with at this time.

00:24:54.630 --> 00:24:56.910
Or it could be a long-term server.

00:24:57.170 --> 00:25:00.860
So you could have your ISP, for example,
offer a address book

00:25:00.880 --> 00:25:06.240
server in their setup,
just like you have services like Mail and

00:25:06.280 --> 00:25:09.500
iChat and web offered to you by your ISP.

00:25:09.530 --> 00:25:12.510
Your ISP could also offer
address book services to you.

00:25:12.740 --> 00:25:16.740
So that's where we have the two servers.

00:25:16.860 --> 00:25:18.900
So, let's see.

00:25:19.650 --> 00:25:23.110
If I look at what the
Address Book Server contains,

00:25:23.120 --> 00:25:25.850
so I have several address
books that are now shared.

00:25:25.940 --> 00:25:29.570
So for the WDC server,
I don't really have any private

00:25:29.670 --> 00:25:32.980
contacts that are just my
contacts that I only see.

00:25:33.220 --> 00:25:37.480
Most of the contacts that I have
on the WDC server are shared.

00:25:37.550 --> 00:25:39.760
So these are shared address books.

00:25:39.810 --> 00:25:42.190
Anyone who is a member
of this group can edit,

00:25:42.370 --> 00:25:47.950
modify, add, delete members of this group
or the contacts in this group.

00:25:48.150 --> 00:25:52.400
So I have one address book
group or shared address book for

00:25:52.400 --> 00:25:56.200
our speaker support staff and
one for our presentation team.

00:25:56.260 --> 00:26:00.700
So this could be our list of
reviewers of slides or webcasts.

00:26:00.750 --> 00:26:05.640
And let's say I wanted to add
-- I know that we're missing a

00:26:05.740 --> 00:26:10.180
person from the support staff,
and it's obviously not Steve Jobs.

00:26:10.410 --> 00:26:12.080
It might be Xavier.

00:26:12.120 --> 00:26:14.940
So I have his V-card information here.

00:26:15.130 --> 00:26:19.860
So all I need to do to get him to
add it into the shared address book

00:26:19.860 --> 00:26:23.280
on the server is I can just drag it,
drag the V-card into

00:26:23.670 --> 00:26:27.260
the shared address book,
and right now it's available for

00:26:27.260 --> 00:26:29.200
everyone who is a member of the group.

00:26:29.240 --> 00:26:33.530
So the next time the other members
of the team log on to the server or

00:26:33.530 --> 00:26:37.940
bring up their address book client,
they'll get the up-to-date information.

00:26:37.960 --> 00:26:38.720
And same for me.

00:26:38.720 --> 00:26:42.820
If anyone else updates the
contact information on the server,

00:26:42.840 --> 00:26:47.590
I will get those updates to
my client as soon as they're,

00:26:47.690 --> 00:26:49.580
again, available.

00:26:49.850 --> 00:26:54.680
And let's see how the address
book context that I have

00:26:54.780 --> 00:26:56.930
are used in an application.

00:26:57.050 --> 00:27:03.510
So if I go to the mail application, oops,
did I just kill mail?

00:27:03.570 --> 00:27:05.280
No, there is mail.

00:27:06.090 --> 00:27:10.270
So in mail,
obviously everybody is used to using

00:27:10.320 --> 00:27:13.920
autocomplete to address messages.

00:27:14.190 --> 00:27:18.000
So if I autocomplete just
typing a few letters,

00:27:18.000 --> 00:27:21.100
these actually translate into
Address Book Server queries.

00:27:21.120 --> 00:27:25.810
So these contacts are not stored
in my previous recipient's list.

00:27:25.850 --> 00:27:28.840
They're not stored on
my local address book.

00:27:29.260 --> 00:27:33.210
These contacts come from the
Address Book Server contacts.

00:27:33.310 --> 00:27:38.760
So anything that I see here
is actually server originated.

00:27:39.140 --> 00:27:44.380
So that's pretty much the way you'd
expect Mail to work with Address Book,

00:27:44.400 --> 00:27:48.090
and Address Book just gets
this functionality for free,

00:27:48.180 --> 00:27:51.920
or the clients get the
functionality for free.

00:27:52.410 --> 00:27:53.700
And that's mail.

00:27:53.960 --> 00:27:55.320
So what if I'm offline?

00:27:55.540 --> 00:27:59.420
So the queries go back to the server,
but when you're offline,

00:27:59.420 --> 00:28:03.480
actually the contacts that
you have on the server,

00:28:03.480 --> 00:28:05.730
they are cached for offline use.

00:28:05.760 --> 00:28:08.880
So anything that I had in
my private address books,

00:28:08.880 --> 00:28:11.740
anything that I had in
the shared address books,

00:28:11.740 --> 00:28:14.100
all those contacts are stored locally.

00:28:14.100 --> 00:28:19.160
And if I'm disconnected from the network,
you can still use mail auto-completion

00:28:19.160 --> 00:28:23.360
and addressing from the local
cached copy of those addresses.

00:28:23.360 --> 00:28:26.400
So you're not stranded
without a network connection.

00:28:26.400 --> 00:28:30.830
So if you don't have access to the cloud,
your server is down for whatever reason,

00:28:30.830 --> 00:28:33.470
you still have access to
the contacts that you had

00:28:33.470 --> 00:28:35.460
previously in your address book.

00:28:35.760 --> 00:28:42.200
So you can still use mail auto-completion
and addressing from the local

00:28:42.200 --> 00:28:45.480
cached copy of those addresses.

00:28:46.640 --> 00:28:50.660
So here, Address Book's actually
populating the server here.

00:28:50.660 --> 00:28:55.590
And I know that I should
have a contact for John here.

00:28:55.630 --> 00:28:57.740
So let's look for John.

00:28:57.750 --> 00:28:59.510
And the only John I have is John White.

00:28:59.610 --> 00:29:02.090
But I know there's supposed
to be another John.

00:29:02.100 --> 00:29:03.540
And the reason I'm trying
to find this person,

00:29:03.540 --> 00:29:07.550
I know I want to carry his
contact information on my local

00:29:07.550 --> 00:29:11.500
Address Book so that it will
then be available to me offline.

00:29:11.650 --> 00:29:14.550
So if I only have one
John in my Address Book,

00:29:14.660 --> 00:29:18.200
then I need to search the Address
Book Server for more contacts.

00:29:18.370 --> 00:29:21.670
So here, I can just query.

00:29:22.270 --> 00:29:26.340
and I are going to query the
server for other users called John.

00:29:26.340 --> 00:29:28.200
And it looks like we have quite a few.

00:29:28.250 --> 00:29:31.940
So these contacts are now queried
through the CardDAV protocol

00:29:32.310 --> 00:29:34.040
against the Address Book Server.

00:29:34.050 --> 00:29:39.600
And this is the view of the search
that you got back from the server.

00:29:39.600 --> 00:29:41.700
And these are just vCards.

00:29:41.730 --> 00:29:46.480
So anything that I see here,
I can treat it as if it was a vCard.

00:29:46.780 --> 00:29:48.900
So obviously I can use drag and drop.

00:29:48.930 --> 00:29:54.760
So let's say I'd want to add
John Dewberry into our presentation team.

00:29:54.800 --> 00:30:00.660
So all I have to do is take his vCard and
drag him into the shared address book.

00:30:00.660 --> 00:30:01.850
And here he is.

00:30:02.220 --> 00:30:06.940
So John's contact information was
directly added into the group there.

00:30:06.940 --> 00:30:09.620
And again,
any other client that is connected

00:30:09.760 --> 00:30:13.880
to the same address book into the
same shared group will get this

00:30:13.980 --> 00:30:18.770
updated information as soon as the
clients connect with the server again.

00:30:18.940 --> 00:30:22.680
So your contact's
available from anywhere,

00:30:22.890 --> 00:30:25.690
accessible offline,
and directly integrated

00:30:25.940 --> 00:30:29.930
with all the applications.

00:30:30.610 --> 00:30:33.120
and others have done a big
improvement over having your

00:30:33.130 --> 00:30:36.500
contacts stored locally without
really disrupting your work behavior.

00:30:36.500 --> 00:30:40.560
So anything that you'd expect to
work with addresses still works,

00:30:40.720 --> 00:30:44.200
except now you have the cloud
to store your contacts on.

00:30:44.520 --> 00:30:50.010
So with that,
let's move on to the slides, please.

00:30:51.830 --> 00:30:58.000
and let me introduce Sarris Dabou,
who is the author of Mulberry.

00:30:58.970 --> 00:31:04.640
and Sauris is the author of the RFC for
CardDAV and also an Apple engineer.

00:31:04.640 --> 00:31:05.700
So, Sauris.

00:31:05.860 --> 00:31:07.790
Thank you, Juussi.

00:31:11.740 --> 00:31:15.240
Obviously,
one of the biggest goals for adopting

00:31:15.330 --> 00:31:17.860
an open standard is interoperability.

00:31:17.960 --> 00:31:21.620
We want to be able to have different
clients and different servers

00:31:21.620 --> 00:31:25.550
work together to get addressed
contact information between

00:31:25.610 --> 00:31:27.070
clients and between servers.

00:31:27.180 --> 00:31:31.240
So what we want to show now is
two different clients talking

00:31:31.250 --> 00:31:33.200
to the Address Book Server.

00:31:36.910 --> 00:31:40.140
So here I am,
and this is the Mulberry client,

00:31:40.160 --> 00:31:46.570
and this is set up with an account for
the same WWDC Address Book Server that

00:31:46.700 --> 00:31:47.920
Juussi was just showing us.

00:31:47.940 --> 00:31:51.920
So if I actually log in here,
it will actually pull up the

00:31:51.920 --> 00:31:57.240
My Contact section of that address
book that we were looking at before.

00:31:58.240 --> 00:32:01.190
So looking at this address book,
I see that there's no contact

00:32:01.190 --> 00:32:05.550
information for me in here,
so I'm going to go ahead

00:32:05.620 --> 00:32:09.110
and add an entry for myself.

00:32:12.400 --> 00:32:18.100
[Transcript missing]

00:32:20.320 --> 00:32:23.260
is going to click OK,
and Mulberry has just written that

00:32:23.390 --> 00:32:26.700
contact up to the Address Book Server.

00:32:26.750 --> 00:32:30.750
So now I'm going to switch
back to our other machine here,

00:32:30.760 --> 00:32:33.540
and I'm going to fire
up Address Book again.

00:32:35.940 --> 00:32:38.280
and just give that a second to catch up.

00:32:38.300 --> 00:32:47.800
And if we now look at the WWDC account,
we can see that contact is now accessible

00:32:47.800 --> 00:32:51.610
by Address Book on the other machine.

00:32:51.700 --> 00:32:55.460
So one contact stored
on the CardDAV server,

00:32:55.460 --> 00:32:58.510
accessible from different machines,
different clients.

00:32:58.800 --> 00:33:01.540
And again, I can go in here and I can
make an edit on this one.

00:33:01.580 --> 00:33:04.980
So I'm gonna just change the domain here.

00:33:08.650 --> 00:33:11.140
make that change and Address
Book has just gone and written

00:33:11.140 --> 00:33:14.040
that back up to the CardDAV Server.

00:33:14.080 --> 00:33:20.320
If I switch back to my other machine and
I get Monbre to refresh the Address Book,

00:33:20.360 --> 00:33:25.300
you can actually see in here
that we have the new address.

00:33:28.290 --> 00:33:30.000
So again, two clients working together.

00:33:30.000 --> 00:33:31.900
You can edit on one, edit on the other.

00:33:31.970 --> 00:33:33.660
Changes get propagated
back to the server,

00:33:33.660 --> 00:33:35.380
stored in that central location.

00:33:35.410 --> 00:33:38.310
No need to worry about
synchronization and missing fields,

00:33:38.310 --> 00:33:39.280
et cetera.

00:33:39.420 --> 00:33:42.240
The protocol,
the client access of the protocol,

00:33:42.240 --> 00:33:43.980
allows you to synchronize changes.

00:33:44.020 --> 00:33:46.260
You can spot when another
client has made a change,

00:33:46.280 --> 00:33:50.080
and you can pull down those
changes and merge them locally.

00:33:50.520 --> 00:33:55.120
One of the other things we want to do,
just to emphasize the fact

00:33:55.210 --> 00:34:00.310
that this is a HTTP and
WebDAV server underneath CardDAV,

00:34:00.310 --> 00:34:05.170
we can go ahead and actually pull up
Safari and point it to the Address

00:34:05.170 --> 00:34:09.060
Book Collection that we were just
looking at in each of these two clients.

00:34:09.060 --> 00:34:14.650
So this is Safari.

00:34:14.650 --> 00:34:14.650
I have it pointed to --

00:34:14.820 --> 00:34:18.610
This particular URI here,
which is the actual address book

00:34:18.750 --> 00:34:21.120
collection on the WebDAV server.

00:34:21.190 --> 00:34:28.360
And there are several vCard files that
are actually stored on the server.

00:34:28.770 --> 00:34:34.480
Now I can go and just
download one of these.

00:34:34.520 --> 00:34:37.400
And if we have a look at that.

00:34:38.800 --> 00:34:42.800
And I can open that up
in TextEdit down here.

00:34:42.800 --> 00:34:45.760
And indeed,
that's the vCard that I created

00:34:45.810 --> 00:34:46.800
and stored on the server.

00:34:46.800 --> 00:34:50.750
And you can just pull that down
using regular HTTP protocol

00:34:50.800 --> 00:34:54.990
that get operations through the
web browser to pull that down.

00:34:56.360 --> 00:35:00.580
One other thing to note, this is,
you know, it's a WebDAV server,

00:35:00.680 --> 00:35:02.810
so at the top we see
the collection listing,

00:35:02.820 --> 00:35:06.030
which shows the actual contacts
that are stored in the Address Book.

00:35:06.100 --> 00:35:08.670
And below that,
the server is actually exposing

00:35:08.670 --> 00:35:12.640
some of the WebDAV properties that
are also stored on this collection.

00:35:12.640 --> 00:35:16.200
So you can see the
basics of WebDAV there.

00:35:16.200 --> 00:35:20.530
One more thing to, again,
emphasize the fact that it is WebDAV.

00:35:20.640 --> 00:35:23.730
Another thing you can do with
a WebDAV server is you can

00:35:23.770 --> 00:35:25.820
actually mount it in the finder.

00:35:26.300 --> 00:35:31.820
So if I go to connect to server here,
I conveniently have the address

00:35:31.820 --> 00:35:32.910
for this server already set up.

00:35:33.010 --> 00:35:35.750
So I can click connect
there and give it a second.

00:35:35.760 --> 00:35:38.250
And that's just what
we're seeing here is,

00:35:38.320 --> 00:35:40.800
you know,
the finder viewing the data that's

00:35:40.820 --> 00:35:42.360
actually on the WebDAV server.

00:35:42.360 --> 00:35:44.450
This is actually a different
Address Book collection,

00:35:44.510 --> 00:35:47.720
which is why you're seeing a
lot more contacts in there.

00:35:47.720 --> 00:35:51.580
And one neat thing you can also,
you can obviously do in the finder

00:35:51.590 --> 00:35:56.280
is just pull up Cover View and you
can view your contacts in that way.

00:35:56.300 --> 00:35:58.710
And that's it for me.

00:35:58.880 --> 00:36:00.240
So back to Yussi.

00:36:06.300 --> 00:36:07.370
All right.

00:36:07.440 --> 00:36:07.960
Thank you, Cyrus.

00:36:07.960 --> 00:36:12.960
So that's just proof that we have
these clients to interoperate.

00:36:13.010 --> 00:36:16.800
There are other clients out there such
as Malibri that already talk CardDAV.

00:36:16.820 --> 00:36:22.450
So it's all up and coming and hopefully
will be in your hands very soon.

00:36:22.450 --> 00:36:25.110
So to summarize.

00:36:26.030 --> 00:36:29.550
We are introducing the Address
Book Server and will ship

00:36:29.550 --> 00:36:31.730
as part of Mac OS X Leopard.

00:36:32.080 --> 00:36:33.380
Your address book anywhere.

00:36:33.440 --> 00:36:37.220
So this is basically your
address book on the cloud.

00:36:37.240 --> 00:36:41.260
Can be any kind of addresses,
either private, public, or shared.

00:36:41.280 --> 00:36:44.300
You can create shared address books,
as many as you want,

00:36:44.300 --> 00:36:48.050
and have everyone that you're
sharing your contacts with be up

00:36:48.180 --> 00:36:52.080
to date and also get updates from
them to the contacts that you

00:36:52.080 --> 00:36:53.840
have stored in your address book.

00:36:53.840 --> 00:36:59.410
And it is, the Address Book Server is
tightly integrated with the

00:36:59.410 --> 00:37:02.740
Mac OS X client for addresses,
Address Book.

00:37:02.880 --> 00:37:06.670
So all the applications that you'd expect
to work with contacts and addresses

00:37:07.040 --> 00:37:10.270
will work seamlessly with contacts that
you have on the Address Book Server.

00:37:10.350 --> 00:37:15.260
So Mail, iChat,
and iCal all work as you'd expect.

00:37:15.360 --> 00:37:17.820
And for offline use, we use caching.

00:37:18.060 --> 00:37:21.690
So any contacts that you have stored
on the Address Book Server will

00:37:21.690 --> 00:37:24.810
be accessible to you even when
you're disconnected from the network

00:37:24.910 --> 00:37:27.260
because they are cached locally.

00:37:27.280 --> 00:37:31.000
The Address Book Server,
as well as the client pieces of

00:37:31.000 --> 00:37:34.500
the Address Book application,
are based on the

00:37:34.560 --> 00:37:40.400
Card Dev emerging standard for
vCard sharing over the network.

00:37:40.400 --> 00:37:43.830
And as I said,
we'll be part of the Snow Leopard

00:37:43.880 --> 00:37:45.600
version of the Mac OS X Server.

00:37:45.610 --> 00:37:49.500
And also the server components
will be made available via

00:37:49.560 --> 00:37:56.440
Mac OS Forge and under... excuse me,
idrisbookserver.org.

00:37:58.600 --> 00:38:01.710
So that's the session.

00:38:01.850 --> 00:38:05.390
For more information,
please contact Mark Malone,

00:38:05.400 --> 00:38:08.240
who's the evangelist for
internet technologies.

00:38:08.320 --> 00:38:12.460
For more information on OS X Server,
please go to the server site.

00:38:12.470 --> 00:38:14.640
And there's a lab tomorrow.

00:38:14.730 --> 00:38:17.800
So if you'd like to meet
some of the engineering team,

00:38:17.800 --> 00:38:20.840
we are at the IT lab tomorrow at 3:30.

00:38:20.910 --> 00:38:23.240
And there's also an
Address Book Client Lab.

00:38:23.370 --> 00:38:24.700
I believe it's on Friday.

00:38:24.750 --> 00:38:27.810
So if you check the lab schedule,
if you want to know more about the

00:38:27.870 --> 00:38:33.640
client side functionality for how
to have applications access the

00:38:33.640 --> 00:38:37.400
contacts that are in Address Book,
there's a lab for that later this week.