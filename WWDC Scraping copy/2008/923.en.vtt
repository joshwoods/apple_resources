WEBVTT

00:00:20.330 --> 00:00:21.300
Good morning.

00:00:21.300 --> 00:00:25.670
We're all here bright and early.

00:00:26.110 --> 00:00:29.900
Welcome to session 923,
Mastering Interface Builder.

00:00:29.950 --> 00:00:33.120
I'm Matt Gamble, an engineer on the
Interface Builder team,

00:00:33.120 --> 00:00:38.130
and I'll be joined on stage later
by Jon Hess and Kevin Cathey.

00:00:39.240 --> 00:00:42.520
Today we're going to take you through
some of the new features and some of

00:00:42.610 --> 00:00:46.980
the tips and tricks that you can use
to be more productive working with your

00:00:46.980 --> 00:00:51.990
user interfaces using Interface Builder.

00:00:52.250 --> 00:00:54.490
I'm going to take you
through exploring interfaces,

00:00:54.610 --> 00:00:58.080
some of the new features,
and some features that you might not have

00:00:58.080 --> 00:01:03.590
known about for making navigating and
exploring your interfaces a lot easier.

00:01:06.730 --> 00:01:09.890
Now I'm going to touch on
four different topics today.

00:01:09.980 --> 00:01:14.580
The first for exploring objects,
we have the contextual navigation menu,

00:01:14.600 --> 00:01:17.460
which shows you all the various
objects that are currently

00:01:17.460 --> 00:01:21.120
under the mouse cursor.

00:01:21.700 --> 00:01:26.340
The second is exploring connections
using the connections panel.

00:01:29.600 --> 00:01:33.840
Baird will be exploring classes
using either the documentation or the

00:01:33.840 --> 00:01:36.830
interface for the selected object.

00:01:39.010 --> 00:01:41.530
And finally,
exploring the localizable strings of

00:01:41.530 --> 00:01:43.820
your document using the new Strings tool.

00:01:43.900 --> 00:01:49.720
So if we could switch
over to the demo machine,

00:01:49.720 --> 00:01:51.760
let's get right into it.

00:01:57.700 --> 00:02:00.490
Now you've probably all been in
a situation where you've been

00:02:00.500 --> 00:02:04.310
either the newest member of a
team or perhaps you've just had an

00:02:04.310 --> 00:02:06.600
existing project land in your lap.

00:02:06.820 --> 00:02:10.010
And either way you end up with a
user interface that you've never

00:02:10.010 --> 00:02:13.460
seen before that you have to
explore and find out what's in it,

00:02:13.610 --> 00:02:16.080
how things work,
how everything's connected.

00:02:16.260 --> 00:02:19.290
So that's exactly what
we're going to do today.

00:02:19.850 --> 00:02:24.980
We have a simple little image editing
application that has a couple of

00:02:25.230 --> 00:02:29.220
filters that you can use to adjust
various attributes of the image.

00:02:29.220 --> 00:02:35.460
So we're going to take a look at the
UI for this application and try to

00:02:35.460 --> 00:02:39.200
figure out how things are connected,
what's in the UI,

00:02:39.200 --> 00:02:42.850
and what steps we would need to
take in order to enhance this

00:02:42.850 --> 00:02:45.180
application or add a new feature.

00:02:45.180 --> 00:02:48.900
So I'm just going to
quit this application.

00:02:51.550 --> 00:02:54.910
And here we are in the Xcode
project for this application.

00:02:54.910 --> 00:02:57.340
And we can see that in
the resources section,

00:02:57.410 --> 00:02:59.640
we have our main menu ZIP.

00:02:59.780 --> 00:03:04.230
So I'm going to double click this
to open it in Interface Builder.

00:03:04.840 --> 00:03:08.220
So the first step that we want to take
is to explore some of the different

00:03:08.280 --> 00:03:12.160
pieces that made up that UI that
we saw in the running application.

00:03:12.170 --> 00:03:15.020
And probably a good place to
start was that main window.

00:03:15.020 --> 00:03:18.420
So let's take a look
in our document window.

00:03:18.420 --> 00:03:21.080
And we can see that
there's this Canvas window.

00:03:21.080 --> 00:03:24.800
So I'll double click this to
open it up in Interface Builder.

00:03:24.800 --> 00:03:30.600
And so here we have the main window
that we saw in that application.

00:03:30.600 --> 00:03:33.690
Now granted,
we know that there's a window here.

00:03:33.690 --> 00:03:37.990
And when the application was running,
we saw that there was an image that

00:03:38.000 --> 00:03:39.840
wasn't this icon that was in the center.

00:03:39.840 --> 00:03:44.280
So it seems like there might be
a bunch of different things going

00:03:44.430 --> 00:03:48.760
on just in this little piece
of UI that we have right here.

00:03:49.700 --> 00:03:53.110
Now something that we can use to get
a better understanding of what makes

00:03:53.160 --> 00:03:58.870
up this piece of user interface is to
use the contextual navigation menu.

00:03:59.230 --> 00:04:01.720
To activate the contextual
navigation menu,

00:04:01.720 --> 00:04:05.420
you simply hold the shift key
and then right-click on what

00:04:05.420 --> 00:04:06.600
you're planning to investigate.

00:04:06.600 --> 00:04:11.110
Now we can see that we have a
menu that shows us all the various

00:04:11.270 --> 00:04:14.470
pieces of UI that are underneath
the mouse at this current time.

00:04:14.520 --> 00:04:17.330
So we can see that we
have the Canvas window,

00:04:17.330 --> 00:04:20.020
the content view of the Canvas window.

00:04:20.020 --> 00:04:23.250
Oh, okay,
we can see there's a scroll view there,

00:04:23.320 --> 00:04:25.440
which we hadn't seen before.

00:04:25.440 --> 00:04:26.840
Might not have known that was there.

00:04:28.090 --> 00:04:32.020
There's also a Canvas view of some sort,
the image view,

00:04:32.020 --> 00:04:35.640
which was displaying the image,
and the cell of the image view.

00:04:35.810 --> 00:04:38.600
So let's take a look at
this bordered scroll view.

00:04:38.620 --> 00:04:42.640
In addition to showing us all the
various objects that are under the mouse,

00:04:42.720 --> 00:04:46.540
it will also allow us to
navigate over to those objects,

00:04:46.540 --> 00:04:49.370
some of which might have been
hard to select otherwise.

00:04:49.520 --> 00:04:53.420
So I can simply select
this item in the menu.

00:04:53.760 --> 00:04:59.070
And then we can see that the focus of the
inspector has changed to the scroll view.

00:04:59.270 --> 00:05:02.190
Okay,
I can see why we couldn't see it before.

00:05:02.200 --> 00:05:06.190
We had the horizontal and
vertical scrollers turned off.

00:05:06.190 --> 00:05:10.480
So if I turn those guys on, all right,
that makes it a little more

00:05:10.480 --> 00:05:11.500
obvious that that's there.

00:05:11.500 --> 00:05:15.190
So probably won't be
as confused next time.

00:05:16.290 --> 00:05:18.990
This is a great way to explore
the various objects that

00:05:19.010 --> 00:05:21.860
you have in your document,
and especially when you have a case

00:05:21.860 --> 00:05:26.100
similar to the one that we had here where
you have some elements that are obscuring

00:05:26.100 --> 00:05:27.940
other elements in your user interface.

00:05:27.940 --> 00:05:32.660
I know that I've used this a lot when
perhaps I have views that are hidden

00:05:32.660 --> 00:05:37.520
right now that will then be added
and unhidden programmatically through

00:05:37.630 --> 00:05:40.630
animations or various things like this.

00:05:40.640 --> 00:05:44.210
A lot of times these elements overlap,
they're tough to see,

00:05:44.210 --> 00:05:47.950
and so this contextual navigation
menu gives you a great way to

00:05:48.030 --> 00:05:49.920
take a look at all of those.

00:05:50.450 --> 00:05:52.460
Well,
the next thing we probably want to do

00:05:52.460 --> 00:05:57.500
is get a better understanding of how the
various pieces of this UI are connected.

00:05:57.540 --> 00:06:00.970
And to do that,
we could go to the Connections

00:06:00.970 --> 00:06:03.110
panel of the Inspector,
which you probably saw if you

00:06:03.110 --> 00:06:04.940
were on the session on Tuesday.

00:06:04.990 --> 00:06:10.200
But what we could also do is we could
right-click in the document window

00:06:10.200 --> 00:06:14.780
on this My Image Editor controller,
and this will bring up

00:06:14.920 --> 00:06:16.280
the Connections panel.

00:06:16.860 --> 00:06:19.890
The Connections Panel shows all
the various connections that

00:06:19.890 --> 00:06:24.390
are incoming and outgoing that
involve the selected object.

00:06:24.430 --> 00:06:29.180
At the top, there is a section of all
the different outlets of this

00:06:29.200 --> 00:06:31.510
object that are connected.

00:06:31.670 --> 00:06:35.920
We can see the received actions
that are connected as well.

00:06:35.920 --> 00:06:38.710
We also,
something that you might not have

00:06:38.710 --> 00:06:41.420
seen before is this binding section.

00:06:41.420 --> 00:06:46.330
In this case, the referencing bindings,
which are the Cocoa bindings between

00:06:46.480 --> 00:06:51.910
the image property of the focused
object and this value property of

00:06:51.910 --> 00:06:54.830
what looks like the image view.

00:06:55.310 --> 00:06:58.830
And this final section down
here is the referencing outlets.

00:06:59.130 --> 00:07:03.600
So not only can we see the outlets
that are defined for this object,

00:07:03.730 --> 00:07:07.110
but we can also see outlets that are
defined for the other objects that

00:07:07.170 --> 00:07:09.040
are then connected to this object.

00:07:09.130 --> 00:07:15.160
So we can see both directions very
easily in the connections panel.

00:07:16.150 --> 00:07:20.500
Now, if I select this connection here,
we can see that this is the

00:07:20.730 --> 00:07:24.800
binding between the image and the
value property of the image view.

00:07:24.800 --> 00:07:27.740
Selecting this,
you can then see that it's highlighted,

00:07:27.770 --> 00:07:30.870
and there's a path control
that's appeared at the bottom.

00:07:31.440 --> 00:07:36.410
Now, this path control will show you the
hierarchy from a top-level object

00:07:36.480 --> 00:07:40.380
all the way down to the object on
the opposite end of this connection.

00:07:40.390 --> 00:07:42.700
So we can see,
similarly to how we saw with

00:07:42.700 --> 00:07:46.380
the contextual navigation menu,
we again see the Canvas window,

00:07:46.380 --> 00:07:49.980
the Canvas window's content view,
the scroll view that we can now

00:07:49.980 --> 00:07:52.590
see a little bit more easily,
the Canvas view,

00:07:52.620 --> 00:07:56.920
and then again the image view,
which is the other end of the connection.

00:07:56.920 --> 00:08:01.390
So this can make it a lot easier
to see what you are connecting to.

00:08:01.450 --> 00:08:05.720
to get a better understanding of
how these objects are related.

00:08:06.310 --> 00:08:11.670
Now finally, if we take a look at this
Adjust Hue connection in

00:08:11.670 --> 00:08:14.670
the Connections panel,
you can see that when it was selected,

00:08:14.670 --> 00:08:17.890
there's a little arrow that might
be a little bit tough to see

00:08:17.890 --> 00:08:21.270
for those of you in the back,
but next to the connection well,

00:08:21.390 --> 00:08:24.890
there appeared a little arrow,
which is the refocusing arrow,

00:08:24.890 --> 00:08:27.590
which now allows us,
if I click this arrow,

00:08:27.590 --> 00:08:30.970
the Connections panel will
then change to refocus on the

00:08:31.050 --> 00:08:34.470
other end of that connection,
which in this case would be

00:08:34.510 --> 00:08:36.170
the Adjust Hue toolbar item.

00:08:36.200 --> 00:08:40.500
So if I click this, refocus,
we can see that now it's

00:08:41.080 --> 00:08:45.380
focused on the toolbar item,
and the sent actions is connected to

00:08:45.380 --> 00:08:47.760
the Adjust Hue action of our controller.

00:08:47.760 --> 00:08:50.730
So this can be a great way to
navigate around to get a better

00:08:50.730 --> 00:08:54.290
understanding of how the different
objects are connected by simply

00:08:54.290 --> 00:08:56.620
staying in the same Connections panel.

00:08:58.060 --> 00:09:01.150
I also find that this is very
useful when you want to make a

00:09:01.150 --> 00:09:05.340
bunch of different connections to
some objects in your user interface.

00:09:05.420 --> 00:09:07.600
So you can simply open
the connections panel,

00:09:07.670 --> 00:09:09.990
start making connections right
next to where they actually

00:09:09.990 --> 00:09:12.520
are rather than coming all the
way over from the inspector.

00:09:12.520 --> 00:09:15.070
And then once you've
made a few connections,

00:09:15.070 --> 00:09:19.150
you can start navigating through the
panel to the other objects and then

00:09:19.150 --> 00:09:21.670
make subsequent connections as well.

00:09:23.600 --> 00:10:23.500
[Transcript missing]

00:10:23.870 --> 00:10:28.530
We can see that Xcode has opened up the
interface for this object and we can take

00:10:28.600 --> 00:10:30.050
a look at all the various properties.

00:10:30.260 --> 00:10:32.400
We could add any
IB outlets that we wanted,

00:10:32.400 --> 00:10:35.290
any IB actions,
then quickly go right back to

00:10:35.290 --> 00:10:37.880
Interface Builder and they'd
all be there for us to connect.

00:10:37.960 --> 00:10:41.140
So this can be a much
easier way to navigate.

00:10:41.140 --> 00:10:44.670
I'm going to close this window and
return over to Interface Builder.

00:10:46.570 --> 00:10:48.820
And similarly,
I said that we also have the

00:10:48.820 --> 00:10:51.280
documentation for selection.

00:10:51.280 --> 00:10:56.000
So if I select this
scroll view right here,

00:10:56.120 --> 00:11:00.030
and the same way that we would in Xcode
if we wanted to do the same thing,

00:11:00.160 --> 00:11:03.800
we'd hold the option button
and then double click.

00:11:07.350 --> 00:11:09.300
It's not being agreeable today.

00:11:09.300 --> 00:11:13.300
You can always use the menu item,
click the documentation for selection,

00:11:13.300 --> 00:11:16.130
and we go over and we
can see it right here.

00:11:16.680 --> 00:11:21.090
This can be an easy way to gain a
better understanding of and make use

00:11:21.090 --> 00:11:26.700
of the great documentation that we
have for all these various classes.

00:11:27.990 --> 00:11:32.660
Now the one final thing that I'd mention,
switching back over to Interface Builder,

00:11:32.660 --> 00:11:36.460
I mentioned that we could take a
look at some of the strings using

00:11:36.460 --> 00:11:37.920
a new feature in Interface Builder.

00:11:37.940 --> 00:11:41.230
Now in this case,
we've been looking around and we could

00:11:41.230 --> 00:11:46.800
see that it's especially obvious in the
menu when the application was running.

00:11:46.800 --> 00:11:51.200
We saw that everything had that
My Application or that generic

00:11:51.200 --> 00:11:55.400
name that we get when we use
one of the templates in Xcode.

00:11:56.170 --> 00:11:58.820
So now that this project is ours,
we want to make it a

00:11:58.820 --> 00:11:59.720
little bit more personal.

00:11:59.720 --> 00:12:01.300
We probably want to change that.

00:12:01.350 --> 00:12:04.210
Well,
an easy way to do that is to go to the

00:12:04.210 --> 00:12:08.040
Tools menu and open the Strings tool.

00:12:09.600 --> 00:12:13.130
So here we can see all the
localizable strings in any of the

00:12:13.130 --> 00:12:15.300
open documents in Interface Builder.

00:12:15.380 --> 00:12:19.420
You can then refocus it to particular
documents or keep it on all of them.

00:12:19.460 --> 00:12:26.380
And in addition to filtering,
we can also go to the Edit menu and find.

00:12:26.410 --> 00:12:28.860
And we see that we can
now find any string,

00:12:28.900 --> 00:12:32.170
any localizable string,
in any of the open documents

00:12:32.170 --> 00:12:33.900
in Interface Builder.

00:12:33.970 --> 00:12:37.010
So in this case, that new application

00:12:37.540 --> 00:12:42.500
is not fantastic,
so let's get rid of that.

00:12:42.570 --> 00:12:45.880
So by finding, we can see that it
selects the first match,

00:12:45.880 --> 00:12:50.060
and I can toggle through the matches,
same as I would with any other find.

00:12:50.060 --> 00:12:54.700
But what I can also do in this case that
will help us out a lot is I can change

00:12:54.700 --> 00:13:01.840
the find pop-up to find and replace,
and change this to image editor,

00:13:01.840 --> 00:13:04.410
and then simply do a replace all.

00:13:04.660 --> 00:13:09.940
This will replace all the instances
of new application with image editor.

00:13:10.170 --> 00:13:11.800
and great, there we go.

00:13:11.840 --> 00:13:16.880
So when Kevin does his demo later,
we won't have that awful my application

00:13:17.130 --> 00:13:18.910
or new application name in there.

00:13:19.100 --> 00:13:22.540
So you can see this can be a great
way to not just take a look at the

00:13:22.540 --> 00:13:28.830
localizable strings in your document,
but also a way to make large changes

00:13:28.890 --> 00:13:32.340
across many different nibs that
you have open in Interface Builder.

00:13:32.400 --> 00:13:35.600
So it can be very handy.

00:13:35.660 --> 00:13:38.700
So if we could switch back to the slides.

00:13:41.440 --> 00:13:43.760
Let's just go over quickly
a few of the things that we

00:13:43.890 --> 00:13:46.540
touched on during that last demo.

00:13:48.000 --> 00:13:51.130
First of all, we talked about the
contextual navigation menu.

00:13:51.180 --> 00:13:54.410
We mentioned how it shows the
hierarchy of all the objects that

00:13:54.470 --> 00:13:56.920
are currently under the mouse,
which can be great for navigating

00:13:57.050 --> 00:14:02.420
and can be particularly useful for
discovering some objects that might have

00:14:02.420 --> 00:14:05.330
been obscured by other pieces of our UI.

00:14:05.530 --> 00:14:08.410
So it allows quick
navigation and selection.

00:14:12.600 --> 00:14:16.370
We also mentioned the connections
panel which displays all the different

00:14:16.630 --> 00:14:21.740
connections to the selected objects,
IB outlets and IB actions.

00:14:21.790 --> 00:14:23.820
We also saw that it
includes Cocoa bindings,

00:14:23.900 --> 00:14:26.290
both incoming and outgoing.

00:14:27.590 --> 00:14:31.300
It also includes all the different
connections that reference the selection,

00:14:31.320 --> 00:14:35.110
so we have both the incoming
and the outgoing connections.

00:14:36.240 --> 00:14:40.620
We also saw that we now have a
path control in the bottom that

00:14:40.630 --> 00:14:44.530
shows the hierarchy of the opposite
endpoint of the selected connection.

00:14:44.590 --> 00:14:47.510
So we can get a better
understanding of where this

00:14:47.510 --> 00:14:50.400
object is in our user interface.

00:14:51.970 --> 00:14:54.640
And then finally,
we saw that we could refocus

00:14:54.840 --> 00:14:58.190
the connections panel by simply
clicking the refocus arrow,

00:14:58.210 --> 00:15:01.030
not having to open yet another
panel by clicking another object

00:15:01.030 --> 00:15:02.540
at a different part of our UI.

00:15:02.540 --> 00:15:05.730
This makes it a lot quicker to
change the focus of the connections

00:15:05.780 --> 00:15:09.480
panel and get a better understanding
of how our objects are connected.

00:15:12.930 --> 00:15:15.910
We also saw the Jump to
Interface feature,

00:15:15.960 --> 00:15:19.620
which allows us to jump to the interface
declaration for the selected object,

00:15:19.780 --> 00:15:22.320
and just like in Xcode,
we can just hold the command

00:15:22.320 --> 00:15:24.380
key and double click.

00:15:25.060 --> 00:15:27.520
and we also saw that we could do
the documentation in the same manner

00:15:28.040 --> 00:15:31.270
and hopefully you'll have better
luck with the option key than I did.

00:15:33.290 --> 00:15:36.820
and finally the Strings tool,
which allows us to view all

00:15:36.820 --> 00:15:39.950
the localizable strings in
any of the open documents that

00:15:39.950 --> 00:15:42.090
we have in Interface Builder.

00:15:42.550 --> 00:15:45.370
also allows us to edit the
strings directly in the table

00:15:45.420 --> 00:15:49.730
so we don't have to click on the
object and go to the inspector.

00:15:50.610 --> 00:15:51.700
You can also check spelling.

00:15:51.750 --> 00:15:54.950
You probably saw the red squiggly lines
that were under some of the pieces,

00:15:55.060 --> 00:15:58.170
some of the strings
that were in the table.

00:15:59.240 --> 00:16:02.180
You can then filter down, you can find,
and as we saw,

00:16:02.180 --> 00:16:07.000
you can find and replace across any of
the open documents in Interface Builder.

00:16:09.500 --> 00:16:14.560
and also something I didn't show is if
you can double click one of the sections

00:16:14.560 --> 00:16:18.940
of the table that is not the value that
you would change and it'll actually open

00:16:18.940 --> 00:16:21.590
it in Interface Builder for editing.

00:16:24.230 --> 00:16:27.890
So we've taken a look at exploring
our interface through exploring the

00:16:27.950 --> 00:16:31.760
different objects that make up our UI,
as well as how they're connected

00:16:31.830 --> 00:16:35.780
and some of the strings and other
ways that we can get a better

00:16:35.780 --> 00:16:38.400
understanding of what makes up our UI.

00:16:38.440 --> 00:16:43.290
But we should now-- let's delve a little
bit deeper into what are these Interface

00:16:43.290 --> 00:16:47.120
Builder documents and how do they work?

00:16:47.300 --> 00:16:52.890
And to do that,
I'd like to invite Jon Hess on stage.

00:17:02.500 --> 00:17:15.200
and I are going to explain how the
interfaces you design in IB go from

00:17:15.320 --> 00:17:19.110
objects in the library to objects
in your document to interface

00:17:19.240 --> 00:17:21.310
elements in your running application.

00:17:23.360 --> 00:17:26.320
So what are some of the
objects in an interface?

00:17:26.340 --> 00:17:30.300
What composes a nib file or something
you design in Interface Builder?

00:17:30.400 --> 00:17:31.880
There's objects.

00:17:31.980 --> 00:17:34.100
There's proxy objects that
we're going to talk about.

00:17:34.100 --> 00:17:37.300
The files owner and the first responder
are two of them in particular.

00:17:37.350 --> 00:17:43.650
There's class information that you might
type into Interface Builder manually or

00:17:43.650 --> 00:17:46.890
that's going to come across from Xcode.

00:17:46.890 --> 00:17:46.970
And there's connections that you drag
between the objects in your interface.

00:17:49.150 --> 00:17:51.390
So how are the objects in
Interface Builder created?

00:17:51.630 --> 00:17:54.900
Just what happens when you go to the
library and you grab a hold of a push

00:17:54.950 --> 00:17:57.090
button and drag it into your interface?

00:17:57.690 --> 00:18:00.370
You might have assumed that Interface
Builder was working with something

00:18:01.040 --> 00:18:03.170
like a work-alike of a button,
something that looked like a button

00:18:03.220 --> 00:18:04.640
but was editable in Interface Builder.

00:18:04.650 --> 00:18:07.220
Actually, Interface Builder just
uses regular buttons,

00:18:07.230 --> 00:18:09.180
and it does all the same sort
of things that you would do.

00:18:09.200 --> 00:18:11.800
So when you drag a button from
Interface Builder's library

00:18:11.800 --> 00:18:14.470
into your running application,
we do just the same

00:18:14.470 --> 00:18:15.440
thing that you would do.

00:18:15.440 --> 00:18:18.500
We allocate and instantiate a button
with an alloc and an init message.

00:18:18.500 --> 00:18:22.590
If you double-click on a button's title
in Interface Builder and customize it,

00:18:22.720 --> 00:18:24.560
for example, in this case,
we'll change it to OK,

00:18:24.560 --> 00:18:27.660
Interface Builder is going to do
just the same thing that you would.

00:18:27.760 --> 00:18:30.620
We're just going to call the
setTitle method of the push

00:18:30.620 --> 00:18:32.280
button to change the title.

00:18:32.870 --> 00:18:36.450
If you use Interface Builder's
inspectors to further customize

00:18:36.450 --> 00:18:39.720
attributes of the objects you're
working with in Interface Builder,

00:18:39.870 --> 00:18:42.280
for example,
to change a button to the default button

00:18:42.460 --> 00:18:45.490
by changing its key equivalent to return,
we're going to do just the

00:18:45.490 --> 00:18:46.720
same things that you would do.

00:18:46.720 --> 00:18:50.710
We're going to call the
setKeyEquivalent method of the

00:18:50.710 --> 00:18:50.710
button to change the key equivalent.

00:18:53.480 --> 00:18:56.340
So in addition to the regular objects
that you work with in Interface Builder,

00:18:56.470 --> 00:18:57.880
there's two proxy objects.

00:18:58.180 --> 00:18:59.990
They're the top of all
of your Cocoa documents,

00:19:00.110 --> 00:19:01.900
the files owner and the first responder.

00:19:01.900 --> 00:19:06.060
And if you didn't understand them,
I'm going to explain to you

00:19:06.060 --> 00:19:08.580
exactly what they're for right now.

00:19:08.700 --> 00:19:11.060
Let's take a look at
them in closer detail.

00:19:12.030 --> 00:19:16.900
The first object is the files owner,
and this object is critical

00:19:16.900 --> 00:19:20.280
to understanding and using
Interface Builder effectively.

00:19:20.930 --> 00:19:22.790
Every Nib file is going
to be loaded somehow,

00:19:22.800 --> 00:19:25.600
well,
every Nib file that you're going to use.

00:19:25.600 --> 00:19:27.640
And when it's loaded,
there's going to be an object that's

00:19:27.640 --> 00:19:31.300
responsible for doing the loading,
and that object is the file's owner.

00:19:31.300 --> 00:19:34.570
It's typically an instance of one
of your custom controller classes,

00:19:34.630 --> 00:19:37.630
and by existing outside --
and by loading the Nib file,

00:19:37.630 --> 00:19:40.640
it must exist outside of it,
so the instance that you see in

00:19:40.660 --> 00:19:44.380
Interface Builder is actually a
placeholder or proxy for that object

00:19:44.400 --> 00:19:46.590
that exists that loads the Nib file.

00:19:48.150 --> 00:19:52.900
Nib files on Mac OS X are loaded with
the method NSBundle loadNibNameOptions.

00:19:53.010 --> 00:19:56.030
On iPhone OS they're loaded
with the-- I'm sorry.

00:19:56.380 --> 00:19:58.330
On Mac OS X,
nib files are loaded with the

00:19:58.430 --> 00:20:02.010
NSBundle method loadNibNamedOwner,
and on iPhone OS,

00:20:02.010 --> 00:20:05.300
they're loaded with the method
loadNibNamedOwnerOptions.

00:20:05.480 --> 00:20:07.200
Two very similar methods.

00:20:07.220 --> 00:20:08.800
They both take an owner property.

00:20:08.940 --> 00:20:11.880
And when you load a nib file,
you specify the owner.

00:20:12.010 --> 00:20:15.090
That object that you specify as the
owner is what the file's owner proxy

00:20:15.100 --> 00:20:16.800
in Interface Builder represents.

00:20:16.930 --> 00:20:20.190
And you'll use this to tie the objects
inside of your Interface Builder document

00:20:20.200 --> 00:20:24.060
to all the objects that exist outside
of your Interface Builder document.

00:20:25.040 --> 00:20:28.280
It's best to explain
this with an example.

00:20:28.310 --> 00:20:31.130
When your application starts
life right after the user double

00:20:31.130 --> 00:20:33.720
clicks on it in the finder,
there's just a single solitary

00:20:33.810 --> 00:20:36.440
instance of NS application,
and it's just starting up.

00:20:36.680 --> 00:20:39.010
And the first thing that it does

00:20:39.230 --> 00:20:52.370
and David Koehn.

00:20:53.490 --> 00:20:53.490
The first step is load the main nib file.

00:20:53.490 --> 00:20:53.490
It invokes the NSBundle method,
load nib named, owner,

00:20:53.490 --> 00:20:53.490
loads the main menu and
passes itself as the owner.

00:20:53.490 --> 00:20:53.490
The nib file is loaded from disk and all
the objects from it are reinstantiated

00:20:53.720 --> 00:20:56.100
And inside there,
there's a files owner proxy.

00:20:56.130 --> 00:21:00.140
By virtue of the application passing
itself as the owner parameter

00:21:00.140 --> 00:21:03.810
to the loadNibNamedOwner method,
the files owner proxy is

00:21:03.820 --> 00:21:06.260
resolved to the application.

00:21:06.260 --> 00:21:08.920
All the connections that you make
in Interface Builder that involve

00:21:08.920 --> 00:21:11.840
the files owner are now going to
be made to the shared application.

00:21:12.220 --> 00:21:15.800
So this is typically how you connect
things like your app delegate.

00:21:16.570 --> 00:21:20.240
Once the Nib file is loaded,
it's not needed anymore,

00:21:20.240 --> 00:21:25.000
and we're just left with the objects
that were instantiated from our Nib file.

00:21:25.150 --> 00:21:27.980
Now, in this case,
we've got a main window and a main menu,

00:21:28.070 --> 00:21:30.680
and we might do something in response
to some menu action or button click,

00:21:30.760 --> 00:21:34.190
and it might cause us to want
to load a second Nib file.

00:21:35.310 --> 00:21:38.070
If we were to do that, we might,
from our app delegate,

00:21:38.070 --> 00:21:41.040
invoke something like NSBundle,
load nib name, secondary,

00:21:41.040 --> 00:21:44.860
and pass the app delegate as the
owner of this secondary nib file.

00:21:44.860 --> 00:21:47.840
If we did that, the nib would load,
the objects inside it

00:21:47.840 --> 00:21:51.000
would be instantiated,
our file's owner proxy would be

00:21:51.090 --> 00:21:55.120
resolved to our application delegate,
and we'd be able to have our connection

00:21:55.120 --> 00:21:58.550
that we would have made in our nib file
from our file's owner to our second

00:21:58.550 --> 00:22:00.540
window resolved to our app delegate.

00:22:01.560 --> 00:22:04.300
So in this way,
the app delegate existing before the

00:22:04.300 --> 00:22:08.660
nib was loaded is able to load the nib
file and refer to objects inside of it,

00:22:08.660 --> 00:22:11.500
and connect those objects back
into the rest of our application.

00:22:11.500 --> 00:22:15.350
After we've done this,
messages would be able to flow to and

00:22:15.350 --> 00:22:19.860
from the objects from the secondary
nib to the rest of our application

00:22:19.860 --> 00:22:21.040
by means of the file's owner.

00:22:25.110 --> 00:22:28.380
So the file's owner is the
conceptual owner of the nib file,

00:22:28.380 --> 00:22:31.450
and it's a conduit for all the
objects inside the nib file to send

00:22:31.450 --> 00:22:35.810
messages in and out with the rest
of the objects in our application.

00:22:37.540 --> 00:22:44.600
A second critical object to use
to master to use Interface Builder

00:22:44.600 --> 00:22:44.600
effectively is the first responder.

00:22:44.980 --> 00:22:46.550
What is the first responder?

00:22:46.790 --> 00:22:50.670
The first responder represents
the object on a window that

00:22:50.670 --> 00:22:52.860
first receives keyboard events.

00:22:53.140 --> 00:22:59.420
It's also used as the target for
buttons and controls and menus

00:22:59.970 --> 00:23:03.020
that don't have specific actions,
things you'd want to target

00:23:03.020 --> 00:23:04.090
at all sorts of things.

00:23:05.970 --> 00:23:10.660
Let's also take an
example to define that.

00:23:10.660 --> 00:23:15.240
Here I have on the display a diagram
of maybe a simple chat application.

00:23:15.240 --> 00:23:16.420
It has a list of buddies.

00:23:16.590 --> 00:23:17.850
For example, maybe that's a table view.

00:23:18.640 --> 00:23:24.770
It has a message text view that
might show the chat history that

00:23:24.770 --> 00:23:26.690
I have with one of my particular
buddies and a composition text view

00:23:26.690 --> 00:23:26.690
that I might use to type a message.

00:23:26.930 --> 00:23:29.720
If the user were to click
into the message text view,

00:23:29.790 --> 00:23:31.430
the message text view
would become active,

00:23:31.450 --> 00:23:34.280
and it would be the first
responder in our window.

00:23:34.670 --> 00:23:37.190
Well,
all responders have next responders,

00:23:37.190 --> 00:23:40.450
and together the first responder
with its next responder and that next

00:23:40.510 --> 00:23:43.300
responder's next responder form a chain.

00:23:43.450 --> 00:23:46.790
In this case, our message text view would
be the first responder,

00:23:46.790 --> 00:23:48.500
and its next responder
would be a scroll view,

00:23:48.500 --> 00:23:53.400
followed by our Windows content view,
our window, our window controller,

00:23:53.420 --> 00:23:56.770
and the responder chain would continue
through the rest of our application.

00:23:57.620 --> 00:24:00.120
If at this point the user
were to use the Edit menu,

00:24:00.120 --> 00:24:02.480
well, let's just think about
this for a little bit.

00:24:02.540 --> 00:24:04.390
In the Edit menu, there's a Copy command.

00:24:04.390 --> 00:24:08.590
And that Copy command can
do all kinds of things.

00:24:08.630 --> 00:24:10.930
It can be targeted at every text
field in our application and

00:24:10.940 --> 00:24:12.400
many objects besides text fields.

00:24:12.430 --> 00:24:15.590
And if we were to try to connect
the Copy menu item ourself,

00:24:15.970 --> 00:24:20.150
maybe to our application or app delegate,
it might get kind of complicated.

00:24:20.160 --> 00:24:22.090
Like, where would we want to
send that copy message?

00:24:22.250 --> 00:24:23.320
How would we perform copy?

00:24:23.320 --> 00:24:25.960
We'd have to know about all sorts
of things in our application

00:24:25.970 --> 00:24:27.330
to perform copy effectively.

00:24:29.450 --> 00:24:33.640
So if you go inspect your main menu
and you look at the edit menu and

00:24:33.640 --> 00:24:36.640
you find the copy command and you
bring up the connections panel like

00:24:36.720 --> 00:24:39.480
Matt showed earlier in the demo,
you'll see that the copy menu item

00:24:39.480 --> 00:24:42.440
is actually connected to the copy
action of the first responder.

00:24:42.460 --> 00:24:45.330
This means that if the user
chooses copy from the edit menu,

00:24:45.350 --> 00:24:48.090
a copy message is going to be
sent to the first responder,

00:24:48.090 --> 00:24:50.150
in this case our message text view.

00:24:50.150 --> 00:24:53.540
So if the user chooses copy,
a copy message is sent

00:24:53.540 --> 00:24:55.420
to the first responder.

00:24:55.420 --> 00:24:58.030
And in this situation,
everything's great.

00:24:59.000 --> 00:25:00.560
Text views know all about copy.

00:25:00.740 --> 00:25:03.490
They take their selected text,
they bottle it up,

00:25:03.640 --> 00:25:05.930
and they put it on the paste
board and they make it available

00:25:05.940 --> 00:25:07.140
for the user to paste later.

00:25:07.350 --> 00:25:11.150
So the text view successfully handles
the copy message and we're done.

00:25:13.310 --> 00:25:16.410
If later in the application's
life the user were to click

00:25:16.510 --> 00:25:20.240
into our buddy's table view,
the first responder would change.

00:25:20.280 --> 00:25:22.620
It would now be our buddy's table view.

00:25:22.620 --> 00:25:24.950
And the responder change
-- the responder chain,

00:25:24.950 --> 00:25:28.680
by virtue of its head changing,
would update to reflect that it

00:25:28.680 --> 00:25:31.290
now starts with the buddy's table
view and continues on through the

00:25:31.290 --> 00:25:35.080
buddy's table view's scroll view and
up through the rest of our window.

00:25:36.150 --> 00:25:38.720
At this point,
the user might again go to the

00:25:38.720 --> 00:25:42.910
Edit menu and choose the Copy command
to mean something like copy the email

00:25:43.010 --> 00:25:47.290
address or instant messenger name
of the buddy they're working with.

00:25:47.620 --> 00:25:50.890
and a copy message would again
be sent to the first responder.

00:25:50.930 --> 00:25:52.420
In this case, though,
the first responder is a

00:25:52.480 --> 00:25:53.390
totally different object.

00:25:53.440 --> 00:25:54.760
It's our table view.

00:25:54.880 --> 00:25:57.560
And we might have our table
view work together with its data

00:25:57.560 --> 00:26:00.600
source in order to provide an
implementation of the copy message.

00:26:00.800 --> 00:26:05.890
And this would allow the user to
perform copy in our application on

00:26:05.920 --> 00:26:11.030
both the text view and the table
view without us having to have any

00:26:11.030 --> 00:26:12.170
complicated dispatch logic to decide
what to do when the user presses copy.

00:26:14.730 --> 00:26:16.600
Now we have this whole
responder chain now,

00:26:16.600 --> 00:26:19.140
and so far we've only looked
at messages that target the

00:26:19.140 --> 00:26:20.900
head of the responder chain.

00:26:22.500 --> 00:26:24.690
What happens if the user were
to go to the file menu and

00:26:24.720 --> 00:26:26.130
choose something like send file?

00:26:26.420 --> 00:26:28.840
This is a common kind of action
that you might want to do in

00:26:28.840 --> 00:26:30.540
instant messaging application.

00:26:30.570 --> 00:26:34.180
Well, if our buddy's table view
was the first responder,

00:26:34.230 --> 00:26:37.880
the send file message would be sent
to the head of the responder chain.

00:26:37.980 --> 00:26:40.930
But buddy's table views probably
don't know much about sending files.

00:26:41.010 --> 00:26:44.460
That's a pretty specific task and
you wouldn't want to handle that

00:26:44.570 --> 00:26:47.770
sort of action in a table view.

00:26:48.100 --> 00:26:50.690
So the buddies table view
would decline to handle the

00:26:50.690 --> 00:26:54.760
message and the message would be
delegated up the responder chain.

00:26:54.800 --> 00:26:57.240
The scroll view would get a
shot at the send file message,

00:26:57.290 --> 00:27:01.470
but scroll views also aren't particularly
suited to handle sending files.

00:27:01.750 --> 00:27:05.640
So this message would continue up the
responder chain to our content view,

00:27:05.650 --> 00:27:08.920
then to our window,
and to finally our window controller.

00:27:08.980 --> 00:27:12.250
Now, a window controller would be a
great place to handle this message.

00:27:12.340 --> 00:27:14.460
The window controller would
have custom application logic.

00:27:14.560 --> 00:27:17.170
It would know all about instant
messaging and it would understand that

00:27:17.170 --> 00:27:19.610
sending files was a common action.

00:27:19.700 --> 00:27:22.280
It would have an implementation
of the send file message and

00:27:22.280 --> 00:27:25.870
would intercept this message and
perform the send file action,

00:27:26.040 --> 00:27:30.090
perhaps by bringing down a sheet to ask
the user which file they'd like to send.

00:27:30.280 --> 00:27:34.540
Now, a great thing about targeting this
menu item at the first responder

00:27:34.560 --> 00:27:37.650
means that if our chat application
were to have multiple windows,

00:27:37.820 --> 00:27:41.660
the send file action would always be sent
to the frontmost window and to the head

00:27:41.660 --> 00:27:45.030
of the responder chain in that window,
and it would be able to travel

00:27:45.030 --> 00:27:46.260
up to the window controller.

00:27:46.260 --> 00:27:49.540
So exactly the right window controller
would always get to handle the message.

00:27:49.610 --> 00:27:53.160
Also, it wouldn't matter which field was
currently active in that window.

00:27:53.220 --> 00:27:56.170
It could be the message's text view,
or the composition text view,

00:27:56.170 --> 00:27:57.400
or the Buddy's Table view.

00:27:57.400 --> 00:27:59.410
In any case,
the send file command would propagate

00:27:59.420 --> 00:28:02.000
all the way up to our window controller.

00:28:04.010 --> 00:28:08.320
So the first responder is great for
avoiding complicated dispatch logic of

00:28:08.320 --> 00:28:13.430
commands that come from menu items and
maybe buttons in your applications.

00:28:16.880 --> 00:28:21.950
So far we've talked about, well,
the first responder doesn't

00:28:21.950 --> 00:28:25.000
point to the specific instance,
doesn't have a specific class,

00:28:25.140 --> 00:28:26.560
but often when you work
in Interface Builder,

00:28:26.560 --> 00:28:30.140
either with the proxy objects or custom
objects that you've added yourself,

00:28:30.190 --> 00:28:32.390
you're going to need to
work with specific classes.

00:28:32.390 --> 00:28:35.890
And in order to do this,
you probably use Interface

00:28:35.890 --> 00:28:40.490
Builder's identity inspector to
set the custom class of an object.

00:28:40.630 --> 00:28:43.100
Just what does it mean when
you set the custom class of an

00:28:43.100 --> 00:28:43.100
object in Interface Builder?

00:28:44.120 --> 00:28:46.850
When you set the custom class of
an object in Interface Builder,

00:28:46.850 --> 00:28:49.800
there's a promise going on
between you and Interface Builder.

00:28:49.820 --> 00:28:51.760
It happens one of two ways.

00:28:51.860 --> 00:28:54.330
With a regular object,
when you set the custom class,

00:28:54.330 --> 00:28:56.270
Interface Builder makes a promise to you.

00:28:56.440 --> 00:29:01.640
And it says,
when I instantiate this class at runtime,

00:29:01.640 --> 00:29:06.990
I promise to make an instance
of the class you specified,

00:29:06.990 --> 00:29:07.130
as opposed to the instance that
currently exists in Interface Builder.

00:29:07.520 --> 00:29:09.570
When you set the custom
class of a proxy object,

00:29:09.580 --> 00:29:11.500
like the file's owner
in Interface Builder,

00:29:11.570 --> 00:29:13.300
you're making a promise
to Interface Builder.

00:29:13.300 --> 00:29:16.170
You're saying, "Interface Builder,
when I load this NIM file and

00:29:16.180 --> 00:29:21.700
you resolve this proxy object,
I promise it's going to be an instance

00:29:21.700 --> 00:29:21.700
of the class name that I just typed in."

00:29:21.970 --> 00:29:23.580
By doing this,
Interface Builder is able to

00:29:23.580 --> 00:29:26.520
determine the class of the object
you're working with and present all

00:29:26.520 --> 00:29:30.980
of the outlets and actions for you
to connect to your other objects.

00:29:32.640 --> 00:29:35.030
So, that brings us to connections.

00:29:35.130 --> 00:29:38.650
What does it mean when you control drag
or use the connections HUD to make a

00:29:38.780 --> 00:29:40.730
connection in the interface builder?

00:29:40.820 --> 00:29:42.660
Well, it's another promise.

00:29:42.730 --> 00:29:45.670
Interface builder promises
to you that it will connect

00:29:45.840 --> 00:29:46.970
these two objects at run time.

00:29:47.120 --> 00:29:49.620
It doesn't make the connections just yet,
right?

00:29:49.790 --> 00:29:51.220
Your file's owner is a proxy.

00:29:51.310 --> 00:29:53.590
It doesn't have something
like a window outlet.

00:29:53.600 --> 00:29:55.750
It won't have a window
outlet until run time.

00:29:55.830 --> 00:29:58.360
So it records that these two
objects should be connected.

00:29:58.430 --> 00:30:00.900
And at run time,
it'll do something similar to calling,

00:30:01.040 --> 00:30:04.570
for example, if we connected a window
outlet of our file's owner or

00:30:04.570 --> 00:30:08.680
our controller to our window,
we'll call the setWindow

00:30:08.740 --> 00:30:10.380
method to connect them.

00:30:12.580 --> 00:30:14.500
so how exactly are the
connections you make in Interface

00:30:14.610 --> 00:30:15.830
Builder actually established?

00:30:15.920 --> 00:30:18.440
Well,
there's three kinds of connections you'll

00:30:18.440 --> 00:30:20.780
primarily work with in Interface Builder.

00:30:20.910 --> 00:30:23.460
There's outlets, actions, and bindings.

00:30:23.650 --> 00:30:25.900
Outlets are perhaps the most interesting.

00:30:26.160 --> 00:30:29.980
When Interface Builder goes to establish
an outlet between two of your objects,

00:30:29.980 --> 00:30:32.290
it will first look to see if
there's an appropriate setter

00:30:32.380 --> 00:30:33.640
method that matches the outlet name.

00:30:33.800 --> 00:30:35.830
For example,
if your outlet name was window,

00:30:35.940 --> 00:30:39.320
it would look for a setWindow method,
or an Objective C2 named window.

00:30:39.320 --> 00:30:41.710
And if such a method exists,
it would call it in order

00:30:41.720 --> 00:30:42.990
to establish the outlet.

00:30:43.020 --> 00:30:45.620
If no such method exists,
Interface Builder will look

00:30:45.620 --> 00:30:49.320
to see if your object has an
instance variable named window.

00:30:49.410 --> 00:30:51.970
And if it does, it will connect them.

00:30:51.990 --> 00:30:54.380
If it doesn't have either of these,
then you've probably broken your

00:30:54.380 --> 00:30:58.250
promise to Interface Builder that you
made when you set the custom class.

00:30:59.670 --> 00:31:03.430
Actions and outlets, or I'm sorry,
actions are connected by just calling,

00:31:03.510 --> 00:31:06.640
for example, in Cocoa, set target,
set action against the

00:31:06.730 --> 00:31:10.400
NSController and NSCell,
or on Cocoa Touch using the

00:31:10.400 --> 00:31:14.240
appropriate UI control method,
I believe it's add target

00:31:14.240 --> 00:31:16.150
selector for event mask.

00:31:17.940 --> 00:31:20.860
Bindings are established the same
way that you would with bind to

00:31:21.240 --> 00:31:23.840
object with key path options.

00:31:23.840 --> 00:31:26.360
So we make all the connections
just the same way that you would.

00:31:26.360 --> 00:31:29.580
We just allow you to draw them up
in Interface Builder and we wire

00:31:29.630 --> 00:31:31.460
them up when the Nib file is loaded.

00:31:32.530 --> 00:31:34.690
So the next important piece of
information to understand is how

00:31:34.760 --> 00:31:37.200
is a NIM file saved and loaded?

00:31:37.220 --> 00:31:39.460
I mean, you make these objects
in Interface Builder,

00:31:39.460 --> 00:31:42.540
but somehow they have to get to
disk and back into your application.

00:31:42.560 --> 00:31:46.890
Well, we do this in Cocoa with a
protocol called NSCoding.

00:31:47.370 --> 00:31:51.540
All the objects that you work with in
Interface Builder implement NSCoding.

00:31:51.540 --> 00:31:53.640
NSCoding is a simple protocol.

00:31:53.700 --> 00:31:57.740
An object called an NSCoder goes
and visits each of your objects

00:31:57.930 --> 00:32:02.080
and allows them to either save
or load themselves to data.

00:32:03.110 --> 00:32:05.370
So to implement saving,
all the objects implement

00:32:05.370 --> 00:32:06.790
this encodeWithCoder method.

00:32:07.070 --> 00:32:10.770
And they first call the super
implementation of encodeWithCoder to

00:32:10.900 --> 00:32:14.640
give their super class an opportunity to
encode any of their interesting state.

00:32:14.750 --> 00:32:21.440
And then they follow that call to super
by encoding their own interesting state,

00:32:21.440 --> 00:32:23.420
in this case, a title.

00:32:23.710 --> 00:32:27.440
So they would call against the coder,
encodeObject, title, for key.

00:32:27.440 --> 00:32:27.440
And they might use title for the key.

00:32:28.950 --> 00:32:32.000
Loading the objects
works much the same way.

00:32:32.000 --> 00:32:36.240
The data file is loaded from disk,
an NSCoder is given the data and

00:32:36.650 --> 00:32:39.200
reads through the data to find
the objects that it serialized.

00:32:39.200 --> 00:32:41.360
And as it finds each one,
it instantiates the object and

00:32:41.370 --> 00:32:43.580
sends it an init with coder message.

00:32:43.580 --> 00:32:46.260
And then it's the object's -- the
object then has an opportunity

00:32:46.260 --> 00:32:49.940
to decode all of its interesting
state back out of the archive.

00:32:49.960 --> 00:32:52.020
So in this example,
we'll give our super class

00:32:52.020 --> 00:32:53.450
a chance to init with coder.

00:32:53.460 --> 00:32:56.790
And then we'll follow that by decoding
our own attributes from the coder.

00:32:57.000 --> 00:32:58.610
Now,
this is really important if you go to

00:32:58.610 --> 00:33:00.390
make your own interface builder plug-in.

00:33:00.400 --> 00:33:02.760
If you go make your own
interface builder plug-in,

00:33:02.760 --> 00:33:06.360
you'll need to implement both of
these methods on all the objects that

00:33:06.500 --> 00:33:08.890
you integrate into interface builder.

00:33:10.920 --> 00:33:14.410
So let's put all that together.

00:33:14.540 --> 00:33:17.920
When you drag objects out of the library,
Interface Builder instantiates

00:33:17.980 --> 00:33:20.800
them just the same way that you
would with alloc and init messages.

00:33:20.850 --> 00:33:28.230
When you customize the objects,
either on IB's design surface by

00:33:28.230 --> 00:33:29.350
dragging them around or resizing
them or using the inspectors,

00:33:29.350 --> 00:33:29.350
we call all the same
setters that you would.

00:33:30.190 --> 00:33:33.750
When you connect the objects,
Interface Builder simply records that the

00:33:33.850 --> 00:33:37.520
two objects are connected and promises
to make the connections at runtime.

00:33:38.070 --> 00:33:41.410
When it's time to save, Interface Builder
instantiates an NSCoder,

00:33:41.540 --> 00:33:44.440
in this case a keyed archiver,
hands off all the objects

00:33:44.450 --> 00:33:45.580
from the Nib file.

00:33:45.580 --> 00:33:49.390
All the objects implement the encode with
coder to encode their interesting state,

00:33:49.390 --> 00:33:51.560
and the data file is written to disk.

00:33:51.770 --> 00:33:55.780
and when it comes time to load the file,
another coder is instantiated,

00:33:56.090 --> 00:34:00.130
handed the data file,
it creates objects from the objects that

00:34:00.160 --> 00:34:02.980
are described in the data file and all
those objects implement initWithCoder

00:34:03.120 --> 00:34:07.570
to decode all their interesting state,
the same state that you can

00:34:07.570 --> 00:34:07.570
figure in Interface Builder.

00:34:08.120 --> 00:34:11.640
Then Interface Builder establishes all
the connections between the objects

00:34:11.670 --> 00:34:15.010
by doing things like setting their
instance variables or calling their

00:34:15.080 --> 00:34:18.340
setter methods and sends the awake
from nib message to all the objects.

00:34:21.100 --> 00:34:25.000
So I just spent 15 minutes
telling you all about nib files.

00:34:25.010 --> 00:34:27.330
But if you're working with
the latest set of Xcode tools,

00:34:27.480 --> 00:34:29.400
you're probably working with ZIP files.

00:34:29.570 --> 00:34:30.180
What's the difference?

00:34:30.300 --> 00:34:32.130
Just what is a ZIP file?

00:34:32.180 --> 00:34:36.950
A ZIP file is everything
that's in a nib file plus more,

00:34:36.950 --> 00:34:42.820
and it's really optimized for
the development time experience.

00:34:42.820 --> 00:34:43.270
It has all the runtime content,
so all the stuff that you

00:34:43.270 --> 00:34:43.270
designed in Interface Builder.

00:34:44.500 --> 00:34:46.500
and Kevin has design time content too.

00:34:46.500 --> 00:34:49.390
For example, which windows were open,
which buttons were selected,

00:34:49.580 --> 00:34:53.500
what custom user guides you had added,
things like that.

00:34:53.500 --> 00:34:57.490
It's also diffable XML.

00:34:57.490 --> 00:34:57.490
Works great with SCM systems.

00:34:59.820 --> 00:35:02.560
In order to provide the
best design time experience,

00:35:02.640 --> 00:35:04.730
we save a lot of
information in the nib file,

00:35:04.730 --> 00:35:07.490
and we save it as this diffable XML,
which is very verbose.

00:35:07.650 --> 00:35:09.200
It's kind of large.

00:35:10.150 --> 00:35:13.600
When you ship your
applications to your users,

00:35:13.710 --> 00:35:15.650
you don't want to ship large
Interface Builder files.

00:35:15.900 --> 00:35:18.500
You want to ship small,
fast Interface Builder files.

00:35:18.500 --> 00:35:20.000
And that's what Nib files are.

00:35:20.250 --> 00:35:23.200
They're binary files that are
optimized by Interface Builder

00:35:23.200 --> 00:35:26.600
and Xcode during your Xcode
build so that you can ship tiny,

00:35:26.870 --> 00:35:30.050
small Interface Builder files
to your users to give them

00:35:30.050 --> 00:35:32.330
the best performance possible.

00:35:35.090 --> 00:35:38.280
So that covers how Nib files work.

00:35:38.310 --> 00:35:40.960
Let's go ahead and move on and
look at some important differences

00:35:41.270 --> 00:35:42.760
between Cocoa and Cocoa Touch.

00:35:42.810 --> 00:35:45.930
Now, largely, when you use Cocoa or
Cocoa Touch for Mac OS standard

00:35:45.930 --> 00:35:49.000
iPhone with Interface Builder,
everything is going to be the same.

00:35:49.160 --> 00:35:52.980
There are just some small
minor differences that I'm

00:35:52.980 --> 00:35:52.980
going to cover right now.

00:35:54.210 --> 00:35:57.940
The first thing that you'll probably
notice if you use both platforms

00:35:57.940 --> 00:36:01.200
is that there's different proxy
objects available on each of them.

00:36:02.470 --> 00:36:04.440
On Mac OS X,
you're going to immediately notice

00:36:04.570 --> 00:36:06.990
there's an extra proxy object
available at the top of every

00:36:06.990 --> 00:36:08.340
single one of your nib files.

00:36:08.390 --> 00:36:10.910
And that's the NSApplication instance.

00:36:11.090 --> 00:36:12.770
This is a very simple proxy.

00:36:12.900 --> 00:36:17.120
It just represents the shared application
that exists in every Cocoa object.

00:36:17.240 --> 00:36:19.870
And when you load a nib file,
when you use a nib file with Interface

00:36:19.950 --> 00:36:23.450
Builder and Cocoa on Mac OS X,
you can always refer to your shared

00:36:23.540 --> 00:36:27.190
application from any of your nib
files by means of this shared proxy.

00:36:30.140 --> 00:36:33.440
For Cocoa Touch,
we have a custom proxy object.

00:36:33.440 --> 00:36:37.970
You can use this to represent any object
in your Interface Builder you'd like to.

00:36:39.690 --> 00:36:44.190
You do this by going to the library
and finding the proxy object.

00:36:44.270 --> 00:36:46.290
It's in the Objects and
Controllers section.

00:36:46.390 --> 00:36:47.550
You can drag this to your interface.

00:36:47.710 --> 00:36:50.350
And once you do that,
the next most important thing to

00:36:50.350 --> 00:36:54.800
do is use the attributes inspector
to set an identifier for the proxy.

00:36:54.870 --> 00:36:57.530
In this case,
I might call it My Controller ID.

00:36:57.680 --> 00:36:59.780
That means I've got this proxy
object in Interface Builder.

00:36:59.870 --> 00:37:02.650
It's not really a My Controller ID,
and it's not going to be

00:37:02.650 --> 00:37:03.900
created when this nib is loaded.

00:37:04.010 --> 00:37:06.830
What's going to happen is it's going
to refer to some object that was

00:37:06.830 --> 00:37:08.990
created before this nib was loaded.

00:37:09.150 --> 00:37:11.950
And at runtime,
we're going to do that by loading

00:37:11.950 --> 00:37:16.100
the nib manually with NSBundle,
loadNibNamed, owner, options.

00:37:16.150 --> 00:37:20.240
And we're going to pass in an interesting
dictionary as the options parameter.

00:37:22.940 --> 00:37:25.380
The options dictionary is
a dictionary of options,

00:37:25.380 --> 00:37:26.960
and in there is going to
be another dictionary,

00:37:26.960 --> 00:37:28.410
this one that I'm specifying right here.

00:37:28.580 --> 00:37:30.290
And it's going to be a
list of keys and values.

00:37:30.320 --> 00:37:33.540
And the keys are going to be
the same IDs that you typed into

00:37:33.540 --> 00:37:36.070
Interface Builder's attributes
inspectors for each of your proxies.

00:37:36.080 --> 00:37:38.620
So here we have a key, my controller ID.

00:37:38.620 --> 00:37:41.400
And the value is going to be some
object that you would like that

00:37:41.520 --> 00:37:43.060
proxy instance to resolve to.

00:37:44.670 --> 00:37:47.200
We're going to wrap that in the
options dictionary that we're handing

00:37:47.200 --> 00:37:49.080
to the NSBundle nib loading method.

00:37:49.120 --> 00:37:53.000
And we're going to use the
key UIDnibProxiedObjectsKey.

00:37:53.000 --> 00:37:55.970
Once we do that,
we can load the bundle -- or I'm sorry,

00:37:55.970 --> 00:38:00.160
we can load the nib by way of the bundle
and pass our options dictionary that

00:38:00.500 --> 00:38:02.980
we've created as the last parameter.

00:38:02.980 --> 00:38:06.200
This will allow Interface Builder
to resolve that custom object

00:38:06.210 --> 00:38:09.130
that you designed to a proxy
object you were specifying that

00:38:09.130 --> 00:38:10.530
is just outside of your nib file.

00:38:10.610 --> 00:38:13.610
If you find yourself wanting to
connect to some parent controller,

00:38:13.610 --> 00:38:14.510
this is a good way to do it.

00:38:19.010 --> 00:38:21.750
An important difference between
Cocoa and Cocoa Touch is the

00:38:21.880 --> 00:38:23.860
retention of the top level objects.

00:38:23.920 --> 00:38:29.650
If you load a nib file manually on
Mac OS X with the NSBundle loadNibNamed

00:38:29.650 --> 00:38:35.560
owner method or one of the NSNib methods,
you're responsible for sending a release

00:38:35.560 --> 00:38:37.770
message to each of the top level objects.

00:38:38.870 --> 00:38:40.460
This isn't the case for Cocoa Touch.

00:38:40.590 --> 00:38:42.640
We made things a little simpler.

00:38:42.640 --> 00:38:45.400
On Cocoa Touch, all the top level objects
are auto released.

00:38:45.490 --> 00:38:48.000
So you don't have to send a release
message to something you didn't

00:38:48.040 --> 00:38:49.880
specifically send a retain message to.

00:38:49.950 --> 00:38:52.760
This also means that in order
to keep these objects around,

00:38:52.760 --> 00:38:54.960
you'll want to retain them explicitly.

00:38:55.010 --> 00:38:59.590
This is nicely balanced by
something I'm going to show

00:38:59.590 --> 00:38:59.590
you in a slide just coming up.

00:39:00.370 --> 00:39:01.800
Outlets.

00:39:01.870 --> 00:39:04.440
How are outlets established
on the two platforms?

00:39:04.490 --> 00:39:06.220
By and large,
they're established the same way.

00:39:06.330 --> 00:39:09.980
We look to see if there's an appropriate
setter method or Objective C2 property,

00:39:09.980 --> 00:39:13.490
and if there is, we invoke it in order
to establish the outlet.

00:39:13.680 --> 00:39:17.600
But if no such setter or property exists,
on both platforms we will end up

00:39:17.600 --> 00:39:22.440
looking for an instance variable with
a matching name and set that directly.

00:39:22.500 --> 00:39:25.460
Now, the difference is, well,
on Mac OS X,

00:39:25.460 --> 00:39:28.380
we have a technology and we have it
on iPhone OS that we really love,

00:39:28.380 --> 00:39:29.780
and it's key value coding.

00:39:29.780 --> 00:39:31.460
And we've been using it a lot lately.

00:39:31.460 --> 00:39:33.540
It's really handy,
and if it isn't something

00:39:33.540 --> 00:39:35.220
you're familiar with,
you should look into it,

00:39:35.310 --> 00:39:39.650
because it makes all sorts of dynacism
really easy in your application.

00:39:40.910 --> 00:39:43.300
So on Mac OS X,
when we establish those outlets,

00:39:43.300 --> 00:39:44.160
we do it manually.

00:39:44.350 --> 00:39:46.940
We look for a setter by using
Objective-C runtime methods,

00:39:46.940 --> 00:39:50.610
and we look for an instance variable
by using Objective-C runtime methods.

00:39:50.660 --> 00:39:51.740
You could use those methods, too.

00:39:51.740 --> 00:39:52.660
They're nothing private.

00:39:52.660 --> 00:39:55.650
But we prefer to use set value for key,
because that's what a lot

00:39:55.660 --> 00:39:58.900
of our developers expect,
and that's what we use on iPhone OS.

00:39:58.900 --> 00:40:01.600
And there's one important
difference between the two methods,

00:40:01.600 --> 00:40:03.220
either manual or set value for key.

00:40:03.220 --> 00:40:05.360
And that's when you don't have a setter.

00:40:05.580 --> 00:40:09.540
On Mac OS X, if you don't have a setter,
when instance variable, I'm sorry,

00:40:09.540 --> 00:40:12.920
when Interface Builder connects
one of your instance variables,

00:40:12.920 --> 00:40:14.690
it's an outlet, it won't be retained.

00:40:17.150 --> 00:40:20.820
On iPhone OS, it is retained.

00:40:20.920 --> 00:40:23.760
That's the default behavior
of set value for key.

00:40:23.760 --> 00:40:26.440
So on iPhone OS, that nicely balances the
fact that top level objects

00:40:26.440 --> 00:40:27.710
aren't owed a release message.

00:40:27.840 --> 00:40:33.290
You can simply just have an outlet to
each of your objects to retain them.

00:40:34.020 --> 00:40:38.020
The best practice here is on both
platforms to always provide a setter

00:40:38.020 --> 00:40:40.500
method or Objective-C2 property.

00:40:40.500 --> 00:40:43.830
That means the decision of
whether to retain or not is

00:40:43.880 --> 00:40:48.100
always in your control and will
be obvious from your source code.

00:40:50.200 --> 00:40:54.080
A second small difference between the two
platforms is the awake from Nib message.

00:40:54.110 --> 00:40:56.770
On Mac OS X,
every object represented in the Nib file

00:40:56.770 --> 00:41:01.140
with the exception of the application,
even including the file's owner,

00:41:01.140 --> 00:41:03.910
is going to get that
awake from Nib message.

00:41:03.910 --> 00:41:07.280
Now, you may have noticed this means that
sometimes the awake from Nib message

00:41:07.380 --> 00:41:09.260
can be sent to an object more than once.

00:41:09.290 --> 00:41:11.610
Not more than once per
Nib file that's loaded,

00:41:11.670 --> 00:41:14.440
but more than once during
the lifetime of the object.

00:41:14.440 --> 00:41:17.440
So if an object participates
in Nib loading multiple times,

00:41:17.440 --> 00:41:19.260
for example,
by being loaded from a Nib and then

00:41:19.260 --> 00:41:22.830
turning around and loading a second
Nib by being the file's owner,

00:41:22.930 --> 00:41:26.180
it would receive the awake
from Nib message twice.

00:41:26.310 --> 00:41:27.570
This might kind of catch you off guard.

00:41:27.610 --> 00:41:29.300
You have to be prepared
for that on Mac OS X.

00:41:29.400 --> 00:41:30.930
We've simplified this on iPhone OS.

00:41:31.140 --> 00:41:33.810
On iPhone OS,
every object is only going to get

00:41:33.810 --> 00:41:35.180
the awake from Nib message once.

00:41:35.180 --> 00:41:36.570
And we treat it as a real initializer.

00:41:36.570 --> 00:41:37.960
You can call through to super.

00:41:38.020 --> 00:41:40.010
The method is implemented on NSObject.

00:41:40.100 --> 00:41:41.910
You should call through to super.

00:41:42.320 --> 00:41:45.340
This allows you to easily,
if you have kind of deep class

00:41:45.340 --> 00:41:48.280
hierarchies in your application
and you're loading some of those

00:41:48.350 --> 00:41:51.310
objects from Nib files and you want
to perform a wake from Nib on both

00:41:51.310 --> 00:41:53.550
your class and your super class,
it makes it obvious when

00:41:53.790 --> 00:41:56.220
to call through to super,
always on an iPhone OS.

00:41:59.190 --> 00:42:03.410
Now the takeaway point here is that
the frameworks always provide specific

00:42:03.460 --> 00:42:07.990
over alternatives to Awake from Nib for
objects that behave as the file's owner.

00:42:08.380 --> 00:42:10.350
And you should use those.

00:42:10.540 --> 00:42:13.500
So for Cocoa,
an example would be NSWindowController,

00:42:13.500 --> 00:42:16.610
which provides a method windowDidLoad.

00:42:16.800 --> 00:42:19.220
If you're using a window controller
and that window controller is

00:42:19.220 --> 00:42:22.270
loading a nib on your behalf,
you can easily move your code from

00:42:22.390 --> 00:42:24.200
await from nib into windowDidLoad.

00:42:24.410 --> 00:42:29.280
And that'll prevent any sort
of accidental double call

00:42:29.470 --> 00:42:31.770
to await from nib for you.

00:42:31.870 --> 00:42:34.790
And if you're using Cocoa Touch,
you can use UIView controller's

00:42:35.050 --> 00:42:38.710
viewDidLoad method to react to your
view being loaded from a nib file.

00:42:38.780 --> 00:42:42.550
This is preferred in both cases to using
the await from nib with the file's owner.

00:42:42.620 --> 00:42:45.360
If you're loading a nib file
manually with one of the NSBundle or

00:42:45.360 --> 00:42:48.770
NSNib nib loading methods,
you can simply just do your code right

00:42:48.770 --> 00:42:50.500
after invoking the nib loading method.

00:42:50.620 --> 00:42:54.500
That's equivalent to doing it within
an await from nib on a file's owner.

00:42:56.100 --> 00:42:58.220
That covers all the differences
for Cocoa and Cocoa Touch when

00:42:58.220 --> 00:43:00.060
working with Interface Builder.

00:43:00.060 --> 00:43:03.000
So I hope you'll see that while using
Interface Builder for both platforms,

00:43:03.000 --> 00:43:04.770
by and large,
you'll have exactly the same experience.

00:43:04.780 --> 00:43:07.450
And everything you learn on
one platform will directly

00:43:07.450 --> 00:43:09.120
transition to the other platform.

00:43:09.120 --> 00:43:12.310
Right now, I'm going to turn it over to
Kevin Cathey so he can tell you

00:43:12.370 --> 00:43:15.130
about everything we've learned today.

00:43:19.700 --> 00:43:21.160
Thanks, Jon.

00:43:21.210 --> 00:43:23.780
So I'm Kevin,
another Interface Builder engineer.

00:43:23.850 --> 00:43:26.580
What I would like to focus on
for the rest of the session is

00:43:26.580 --> 00:43:29.900
how we can use some of the things
that Matt and Jon showed us to

00:43:29.900 --> 00:43:33.420
improve our existing applications.

00:43:33.670 --> 00:43:37.010
Now, in particular,
what I'm going to be doing is

00:43:37.070 --> 00:43:40.000
I'm going to be improving the
image editor application that

00:43:40.000 --> 00:43:42.200
Matt was showing to us earlier.

00:43:42.470 --> 00:43:46.060
And the item that I want to improve
in this application has to do

00:43:46.150 --> 00:43:48.290
with when we instantiate objects.

00:43:48.490 --> 00:43:50.870
So, let me explain.

00:43:51.110 --> 00:43:53.980
As Jon was mentioning,
when your application launches,

00:43:54.090 --> 00:43:58.360
your main menu nib file is
unarchived and all of the

00:43:58.380 --> 00:44:00.700
objects in it are instantiated.

00:44:00.810 --> 00:44:02.000
All of them.

00:44:02.010 --> 00:44:05.210
So the problem comes when you
have a bunch of top level objects

00:44:05.340 --> 00:44:08.500
in your main menu nib file
that you don't need right away.

00:44:08.610 --> 00:44:14.170
And so when your application launches,
you're taking time and memory to bring

00:44:14.270 --> 00:44:16.980
those guys into your application.

00:44:18.210 --> 00:44:20.340
In the case of our image
editor application,

00:44:20.340 --> 00:44:24.100
as you can see on screen,
we have a bunch of filters

00:44:24.100 --> 00:44:25.890
you can apply to our images.

00:44:26.010 --> 00:44:28.990
And for each filter,
we have a sheet and a controller

00:44:28.990 --> 00:44:30.600
object for that filter.

00:44:30.700 --> 00:44:33.410
Right now,
all of these objects are sitting

00:44:33.410 --> 00:44:36.490
in our main menu nib file,
so that when our application launches,

00:44:36.490 --> 00:44:41.440
every single one of those objects for our
filters have to be brought into memory.

00:44:41.570 --> 00:44:44.890
But what happens if someone never wants
to adjust the brightness of their image?

00:44:45.020 --> 00:44:50.610
Well, the objects for that particular
filter are just taking up space.

00:44:51.280 --> 00:44:54.190
So here's kind of the takeaway point
that I'm going to give early on,

00:44:54.310 --> 00:44:58.730
and that's the goal in all this is that
we want to wait to instantiate objects

00:44:59.160 --> 00:45:01.400
until the user really needs them.

00:45:01.590 --> 00:45:06.040
Now, you might also have heard this as
being called lazy initialization.

00:45:06.140 --> 00:45:08.440
This is one of the things that I love
about being a software engineer.

00:45:08.560 --> 00:45:10.600
We get applauded for being lazy.

00:45:10.990 --> 00:45:12.830
That's awesome.

00:45:13.580 --> 00:45:15.340
So in the case of our
image editor application,

00:45:15.340 --> 00:45:17.120
what we're going to be doing is
we're going to be pulling apart

00:45:17.120 --> 00:45:18.650
some of the pieces of our nib file.

00:45:18.650 --> 00:45:23.220
And you might ask the question, well,
how do we do this?

00:45:23.220 --> 00:45:25.440
The process is threefold.

00:45:25.480 --> 00:45:28.440
The first thing we need to do
is create separate nib files

00:45:28.440 --> 00:45:31.620
for each set of objects that
we want to lazily initialize.

00:45:32.460 --> 00:45:35.470
Now, once we have this nib file,
we want to pull it into memory.

00:45:35.470 --> 00:45:38.390
And to do this, we're going to be writing
a little bit of code.

00:45:38.430 --> 00:45:40.910
Now,
since we've initialized some objects,

00:45:40.910 --> 00:45:43.930
we need to make sure that
we clean up after ourselves.

00:45:43.980 --> 00:45:46.630
And I'm going to be showing you
using the policies that John was

00:45:46.710 --> 00:45:48.510
explaining to us just a little bit ago.

00:45:48.510 --> 00:45:51.190
So let's go ahead and go
over to the demo machine,

00:45:51.230 --> 00:45:53.610
and I'm going to show you how to do this.

00:45:53.620 --> 00:45:54.770
All right.

00:45:57.950 --> 00:46:00.630
Now for those of you who might have
come in just a little bit late or

00:46:00.630 --> 00:46:02.820
maybe you haven't had enough coffee,
I know that's often the

00:46:02.820 --> 00:46:05.240
case with me in the morning,
I'm going to review

00:46:05.360 --> 00:46:07.050
the application for us.

00:46:10.820 --> 00:46:12.700
We have our main Canvas window here.

00:46:12.700 --> 00:46:13.310
It's got an image.

00:46:13.540 --> 00:46:17.210
We can adjust the attributes of
this image by bringing down these

00:46:17.250 --> 00:46:19.200
different sheets for our filter.

00:46:19.360 --> 00:46:23.470
What I'm going to focus on for this demo
is how to lazily initialize the objects

00:46:23.560 --> 00:46:25.790
needed for the brightness controller.

00:46:26.210 --> 00:46:30.340
However, the process is just the same for
the hue controller and other filters

00:46:30.340 --> 00:46:32.460
you might add to this application.

00:46:32.460 --> 00:46:37.770
So to do this, let's go ahead and go to
Interface Builder and start off.

00:46:41.160 --> 00:46:43.830
Here are the two objects that I was
just mentioning that we're going to

00:46:43.840 --> 00:46:45.360
need to pull apart from our nib file.

00:46:45.520 --> 00:46:48.890
We have our brightness controller
and our brightness sheet.

00:46:49.030 --> 00:46:51.850
So, step one, create a new nib file.

00:46:52.090 --> 00:46:56.790
So, we go under File, New,
and I'm going to create

00:46:56.850 --> 00:46:58.890
an empty Cocoa nib file.

00:46:59.960 --> 00:47:02.920
Now getting these objects over
to this new nib file is as

00:47:03.010 --> 00:47:07.090
simple as dragging and dropping.

00:47:07.500 --> 00:47:55.900
[Transcript missing]

00:47:56.480 --> 00:47:59.360
and as you can see if I click on the
end points for these connections,

00:47:59.370 --> 00:48:01.460
they all go back to our brightness sheet.

00:48:01.520 --> 00:48:02.450
Awesome.

00:48:02.670 --> 00:48:06.700
Now before I get any farther,
I want to save my file.

00:48:07.470 --> 00:48:12.720
And I'm going to save this into
the same place as our other file,

00:48:12.720 --> 00:48:16.520
our main menu, and I'm going to call
it Brightness Sheet.

00:48:16.550 --> 00:48:18.720
Let's go ahead and save that.

00:48:18.740 --> 00:48:21.640
and now Interface Builder is
prompting us and asking us,

00:48:21.640 --> 00:48:24.700
hey, do you want to add this
file to your Xcode project?

00:48:24.760 --> 00:48:26.140
You bet we do.

00:48:26.340 --> 00:48:27.850
So let's add it.

00:48:29.170 --> 00:48:32.470
So here comes the first little
tricky part of this thing,

00:48:32.470 --> 00:48:35.080
and that has to do with the files owner.

00:48:35.160 --> 00:48:37.190
As Jon was mentioning,
there are those three different proxy

00:48:37.340 --> 00:48:40.780
or represented objects we need to know
about when working with Nib files.

00:48:40.890 --> 00:48:44.770
The files owner, the first responder,
and the application.

00:48:44.950 --> 00:48:49.890
Recall that the files owner is the object
that is put in charge of your nib file,

00:48:50.020 --> 00:48:52.900
kind of like a babysitter
over a group of kids.

00:48:52.960 --> 00:48:54.900
Just as when you're
choosing a babysitter,

00:48:54.920 --> 00:48:57.060
you want to make sure that you
choose the right babysitter,

00:48:57.130 --> 00:48:59.420
one that makes sense for the job.

00:48:59.650 --> 00:49:02.860
In our main menu nib file,
we have this image editor

00:49:02.860 --> 00:49:06.500
controller which controls
the logic of our application.

00:49:06.550 --> 00:49:10.190
We want this to be the
babysitter for our new nib file.

00:49:10.710 --> 00:49:17.410
How do we point the instance of
this image editor controller over

00:49:17.410 --> 00:49:17.410
to the file's owner of another file?

00:49:18.070 --> 00:49:21.580
Since the files owner is a proxy object,
all we need to do right now is

00:49:21.580 --> 00:49:25.390
tell Interface Builder the files
owner is going to be of this class.

00:49:25.390 --> 00:49:29.020
When we instantiate that file and code,
we'll actually provide the actual

00:49:29.080 --> 00:49:30.380
instance that we're going to need.

00:49:30.480 --> 00:49:33.690
So to set the custom
class for the files owner,

00:49:33.690 --> 00:49:36.680
go to tools and the identity inspector.

00:49:36.680 --> 00:49:40.110
And I'm just going to type
in my image editor controller

00:49:40.110 --> 00:49:42.010
and it will fill it in for me.

00:49:42.010 --> 00:49:45.670
And now files owner knows about
the outlets and actions that the

00:49:45.970 --> 00:49:47.890
image editor controller can have.

00:49:48.000 --> 00:49:49.200
Thank you.

00:49:50.110 --> 00:49:53.640
So the next step that we need to do is
we need to connect up our files owner

00:49:53.640 --> 00:49:55.440
back to our brightness controller.

00:49:55.440 --> 00:49:57.690
And some of you might be
scratching your heads going,

00:49:57.690 --> 00:50:00.690
but Kevin, I thought that you said that
connections persist as we drag

00:50:00.690 --> 00:50:02.520
objects over to new files.

00:50:02.580 --> 00:50:03.900
That's totally true.

00:50:03.920 --> 00:50:06.380
However, remember,
we didn't actually drag the

00:50:06.380 --> 00:50:09.680
instance of the image editor
controller over to this new file.

00:50:09.680 --> 00:50:14.400
We're just saying the proxy object or the
files owner is going to be of that type.

00:50:14.480 --> 00:50:16.190
So we need to reconnect them.

00:50:17.120 --> 00:50:19.440
Now, to make sure I don't miss
any of the connections,

00:50:19.440 --> 00:50:22.740
I'm going to go back to my main menu
nib file and bring up the connections

00:50:22.740 --> 00:50:26.510
display for the brightness controller
to make sure I get all the right ones.

00:50:26.680 --> 00:50:29.810
So right now I'm looking for any
connections between the image editor

00:50:29.810 --> 00:50:32.020
controller and the brightness controller.

00:50:32.020 --> 00:50:34.480
And to do that,
I'm going to be using the reverse

00:50:34.520 --> 00:50:38.000
outlets and the outlets sections
of the connections display.

00:50:38.000 --> 00:50:40.220
So right away, one jumps out at me.

00:50:40.460 --> 00:50:41.860
Okay, editor controller.

00:50:41.860 --> 00:50:43.770
And that certainly goes to
our image editor controller.

00:50:43.780 --> 00:50:45.740
If I scroll down to the
other ones of these,

00:50:45.740 --> 00:50:46.530
that's not it.

00:50:46.650 --> 00:50:47.020
That's not it.

00:50:47.020 --> 00:50:49.060
Ah, there's one more at the bottom here.

00:50:49.100 --> 00:50:51.590
So there's two outlets
that we need to reconnect.

00:50:51.600 --> 00:50:53.890
So let's go back to our
new nib file and do that.

00:50:55.730 --> 00:50:57.200
When doing this,
I'm going to take advantage of the

00:50:57.200 --> 00:51:00.000
control drag and connection feature.

00:51:00.190 --> 00:51:04.100
If you hold down the control key
and drag from one object to another,

00:51:04.110 --> 00:51:06.590
you can connect things really quickly.

00:51:06.720 --> 00:51:09.720
In this case, it's saying,
"Do you want to connect the outlet

00:51:10.270 --> 00:51:12.400
brightness controller?" Certainly I do.

00:51:12.530 --> 00:51:14.740
And I can do the same thing
in the reverse direction.

00:51:14.910 --> 00:51:17.500
Hold down the control key,
drag into FileZoner,

00:51:17.500 --> 00:51:19.300
and connect into Editor Controller.

00:51:19.390 --> 00:51:25.030
And now, our FileZoner and our brightness
controller are now back in sync.

00:51:25.240 --> 00:51:27.320
and step one is just about done.

00:51:27.320 --> 00:51:30.170
We've created a new file,
dragged the objects in,

00:51:30.250 --> 00:51:31.600
set the file's owner.

00:51:31.690 --> 00:51:33.600
And the next thing we get
to do is the fun part.

00:51:33.630 --> 00:51:36.300
We get to delete the original
brightness controller and

00:51:36.300 --> 00:51:38.800
brightness sheet from our old file.

00:51:38.810 --> 00:51:41.360
And now it's two less objects
that our application has to

00:51:41.360 --> 00:51:43.800
worry about when launching.

00:51:43.820 --> 00:51:45.570
So let's save both of these.

00:51:45.740 --> 00:51:48.700
So step one of the process
is now completely complete.

00:51:48.770 --> 00:51:50.880
And what we want to do now is
write a little bit of code to

00:51:51.010 --> 00:51:53.570
bring this file into memory.

00:51:53.760 --> 00:51:56.820
When the user selects the
Adjust Brightness toolbar item,

00:51:56.820 --> 00:51:59.880
as I see in my window up here,
I want this new file to launch and the

00:51:59.880 --> 00:52:02.780
sheet to come down just as it had before.

00:52:03.340 --> 00:52:07.060
If I bring up the connections display
again on my image editor controller,

00:52:07.060 --> 00:52:10.110
I see there's this
adjust brightness action.

00:52:10.110 --> 00:52:13.360
And this is where I want
to instantiate this object.

00:52:13.390 --> 00:52:16.530
I can use the command double
click that Matt was showing to us

00:52:16.530 --> 00:52:20.190
earlier to jump to the source code
for the image editor controller.

00:52:21.460 --> 00:52:24.100
Now, also as Matt mentioned,
what's great about this feature

00:52:24.110 --> 00:52:25.980
is that it also works in Xcode.

00:52:25.980 --> 00:52:28.750
So we can do the same command double
click to open up the implementation

00:52:29.160 --> 00:52:32.110
for the adjust brightness method.

00:52:32.280 --> 00:52:33.930
and now here we are.

00:52:34.030 --> 00:52:37.600
So now we actually have to write
our code to instantiate this file.

00:52:37.680 --> 00:52:40.730
There are a couple ways to do this and
I'm gonna highlight two of them and then

00:52:40.730 --> 00:52:42.440
we're gonna actually do one of them.

00:52:42.460 --> 00:52:45.260
As Jon mentioned,
one of the ways that it's

00:52:45.270 --> 00:52:47.940
typically done is using NSBundle.

00:52:47.980 --> 00:52:52.650
Now he also said that all top
level objects in a nib file on

00:52:52.800 --> 00:52:55.200
Mac OS X are owed a release message.

00:52:55.260 --> 00:52:58.240
So some way we need to get to
all those top level objects and

00:52:58.240 --> 00:52:59.920
send them a release message.

00:53:00.070 --> 00:53:04.330
There's another class called NSNib
which provides a convenience method

00:53:04.450 --> 00:53:08.170
for us to get those top level objects,
send them a release message so that

00:53:08.220 --> 00:53:11.280
we don't have to go scouring through
other parts of our nib to do so.

00:53:11.350 --> 00:53:15.140
So that's the particular class that
I'm gonna be using for this demo.

00:53:16.260 --> 00:53:20.310
Part of lazy instantiation
is that we don't instantiate

00:53:20.420 --> 00:53:22.740
our objects until we need to.

00:53:22.740 --> 00:53:25.960
And we don't want to instantiate
them if they're already there.

00:53:26.080 --> 00:53:28.840
So we want to instantiate
them when they're nil.

00:53:29.010 --> 00:53:31.030
So that's the first part.

00:53:31.080 --> 00:53:33.840
If our brightness controller
hasn't been created yet,

00:53:33.940 --> 00:53:35.910
let's go ahead and load that nib file.

00:53:37.390 --> 00:53:40.690
Now, creating the code for this
is about a four-step process.

00:53:40.940 --> 00:53:45.040
The first step is actually creating the
instance of the NSNib class that we need.

00:53:45.090 --> 00:53:48.370
You can think of NSNib as kind
of like a nib file loader.

00:53:48.510 --> 00:53:52.060
It just brings in data for that nib file,
but doesn't actually put the objects

00:53:52.060 --> 00:53:54.910
in the nib file into memory quite yet.

00:53:55.080 --> 00:53:58.590
So as you can see here,
I'm just initializing a nib instance

00:53:58.840 --> 00:54:03.390
and pointing it to the brightness
sheet nib file that we created earlier.

00:54:03.490 --> 00:54:06.350
And I'm doing it in the
main application bundle.

00:54:06.770 --> 00:54:10.270
The second step is to actually
bring the objects into memory.

00:54:10.400 --> 00:54:13.300
And this can be tricky,
so let's go through this.

00:54:13.350 --> 00:54:15.820
On the nib instance that I created,
I'm going to call

00:54:15.980 --> 00:54:18.970
instantiate nib with owner,
and here's where I specify

00:54:18.970 --> 00:54:22.360
the actual instance of the
file's owner that we wanted.

00:54:22.430 --> 00:54:27.920
Remember that we set the class
in Interface Builder to the

00:54:27.920 --> 00:54:30.630
My Image Editor Controller,
and now we're providing that

00:54:30.630 --> 00:54:30.630
actual instance right here.

00:54:30.780 --> 00:54:33.380
Now the second argument might
throw you off a little bit.

00:54:33.620 --> 00:54:35.500
So let's talk about this.

00:54:35.520 --> 00:54:39.340
This is where we get the top level
objects that are in our nib file.

00:54:39.470 --> 00:54:42.650
What's happening is when we
instantiate this NSNib instance,

00:54:42.740 --> 00:54:47.040
the NSNib class, our instance,
is creating an array for us and

00:54:47.150 --> 00:54:51.860
populating it with the top level
objects and sending it back to us.

00:54:51.860 --> 00:54:56.890
So that's why I'm passing in a
reference to an NSArray that,

00:54:56.890 --> 00:54:58.020
again, the instance will fill in for us.

00:54:59.540 --> 00:55:02.760
The next part, of course,
is to send all of these

00:55:02.880 --> 00:55:04.360
objects a release message.

00:55:04.400 --> 00:55:06.790
All the top level objects
a release message.

00:55:06.850 --> 00:55:10.900
Some of you who are familiar with memory
management on OS X might be wondering,

00:55:10.950 --> 00:55:12.920
wow, why are we sending them a
release message right away?

00:55:12.990 --> 00:55:15.900
Won't this make all
these objects go away?

00:55:15.960 --> 00:55:18.300
Right now our objects
are owned by two things.

00:55:18.330 --> 00:55:21.660
First of all,
it's the implicit loading for Mac OS X,

00:55:21.750 --> 00:55:23.900
so all top level objects
are owed a release message.

00:55:23.930 --> 00:55:25.900
And secondly, they're owned by the array.

00:55:25.900 --> 00:55:28.300
If you release it,
if we send them all a release message,

00:55:28.470 --> 00:55:30.420
right now they're only
owned by the array,

00:55:30.600 --> 00:55:31.820
so they're auto released.

00:55:31.880 --> 00:55:35.750
We get the same behavior as
you would have on iPhone OS.

00:55:36.030 --> 00:55:38.990
and David . Now if you add
outlets for these particular

00:55:38.990 --> 00:55:42.700
objects in our top level,
you will also get an additional

00:55:42.700 --> 00:55:45.420
retain count if you happen
to retain those objects.

00:55:45.450 --> 00:55:48.600
But that's all going to be
handled by our properties.

00:55:48.600 --> 00:55:51.860
For now,
it's very safe and encouraged to do it,

00:55:51.860 --> 00:55:56.180
to send all those objects a
release message right here.

00:55:57.010 --> 00:56:02.070
The final step of this is that
we no longer need our nib loader.

00:56:02.210 --> 00:56:03.640
That's brought our objects into memory.

00:56:03.830 --> 00:56:04.720
We can get rid of that.

00:56:04.870 --> 00:56:06.500
We send it a release message.

00:56:06.500 --> 00:56:07.520
So, a lot of code.

00:56:07.650 --> 00:56:11.440
Let's step through it one more time
just to make sure you understand it.

00:56:11.630 --> 00:56:14.550
First, we created our NS nib instance.

00:56:14.660 --> 00:56:18.080
This loads the data for
a nib file up for us.

00:56:18.190 --> 00:56:20.680
Secondly,
we instantiated the objects in that

00:56:20.680 --> 00:56:24.460
nib file by taking them out of the
nib file and putting them into memory.

00:56:24.680 --> 00:56:28.340
And then we got an array back
of all the top level objects.

00:56:28.490 --> 00:56:31.130
Now, since all these top level objects
deserve a release message,

00:56:31.130 --> 00:56:33.440
we're providing that for them.

00:56:33.600 --> 00:56:37.230
And finally, since we don't need our
nib loader any longer,

00:56:37.230 --> 00:56:39.010
we can safely release it.

00:56:39.520 --> 00:56:43.760
So now we've completed,
hopefully successfully completed,

00:56:44.010 --> 00:56:46.700
the final two steps of our process.

00:56:46.700 --> 00:56:52.000
We've initiated our nib file and code,
and then finally we've

00:56:52.000 --> 00:56:53.240
cleaned up any resources.

00:56:53.240 --> 00:56:55.700
So let's run this and see how this works.

00:56:55.790 --> 00:56:57.570
Let's go build and go.

00:56:57.990 --> 00:57:00.200
When I click on this,
it brings down the brightness

00:57:00.250 --> 00:57:01.370
sheet just as before.

00:57:01.430 --> 00:57:03.500
I can still edit all the attributes.

00:57:03.650 --> 00:57:07.620
But instead of our application having
to spend time to bring into memory all

00:57:07.620 --> 00:57:11.900
the objects for the brightness sheet,
we've done it when the user needs it.

00:57:11.960 --> 00:57:13.800
We have a faster launching application.

00:57:13.950 --> 00:57:15.900
We're using memory more efficiently.

00:57:15.900 --> 00:57:19.840
And our development environment
is now more logically organized.

00:57:19.890 --> 00:57:22.980
So let's go back to slides.

00:57:33.020 --> 00:57:35.000
Can we go back to slides possibly?

00:57:35.000 --> 00:57:35.410
Awesome.

00:57:35.490 --> 00:57:36.760
Thank you.

00:57:36.780 --> 00:57:36.980
All right.

00:57:37.080 --> 00:57:40.400
So let's review again one more
time what we've done in this demo.

00:57:40.530 --> 00:57:43.800
We've optimized the launch time of
our application by lazily initializing

00:57:43.820 --> 00:57:45.690
objects that we don't need right away.

00:57:45.700 --> 00:57:47.940
And again, to do that,
it's a three-step process.

00:57:47.990 --> 00:57:55.590
You create your nib file,
you instantiate it in code, and finally,

00:57:55.590 --> 00:57:55.590
you clean up any resources that you need.

00:57:57.910 --> 00:58:02.820
So I've completed my part of the session
and let's take one more grand tour of

00:58:02.870 --> 00:58:04.430
all the things that we've seen today.

00:58:04.620 --> 00:58:10.480
First, Matt gave us kind of some tips
and tricks for being a power

00:58:10.480 --> 00:58:12.360
user of Interface Builder.

00:58:12.410 --> 00:58:14.950
Now secondly,
Jon took us on kind of a behind

00:58:14.950 --> 00:58:18.110
the scenes tour of how nib files
work and some of the differences

00:58:18.180 --> 00:58:20.760
between Cocoa and Cocoa Touch.

00:58:20.830 --> 00:58:23.850
And finally, we took all those pieces,
put them together,

00:58:23.850 --> 00:58:27.630
used some of the new features of
Interface Builder to lazily initialize

00:58:27.690 --> 00:58:30.690
some of the objects in our application.

00:58:31.390 --> 00:58:33.700
If you have any questions
about Interface Builder,

00:58:33.700 --> 00:58:36.410
about this session,
about our developer tools in general,

00:58:36.520 --> 00:58:38.560
we encourage you to
contact Michael Jurwitz,

00:58:38.620 --> 00:58:40.530
our developer tools evangelist.

00:58:40.560 --> 00:58:44.190
If you need direct access and quick
access to Interface Builder help,

00:58:44.190 --> 00:58:47.480
we have some great documentation
which is available from right

00:58:47.480 --> 00:58:49.180
within Interface Builder.

00:58:49.310 --> 00:58:51.180
To access that,
just go to the Help menu and

00:58:51.180 --> 00:58:52.740
go to Interface Builder Help.

00:58:53.300 --> 00:58:55.850
We didn't have a session on it this year,
but for those who are

00:58:55.850 --> 00:58:58.730
interested in writing their own
plugins for Interface Builder,

00:58:58.730 --> 00:59:01.600
there's also great
documentation for that as well.

00:59:01.600 --> 00:59:04.990
So we encourage you to check that out
as well on either the ADC website or the

00:59:05.190 --> 00:59:07.420
documentation included with Xcode Tools.

00:59:09.910 --> 00:59:12.640
If this session piqued your
interest about Interface Builder,

00:59:12.720 --> 00:59:16.220
you can go to the Mastering iPhone
View Controller session to see how

00:59:16.220 --> 00:59:19.940
you might use Interface Builder to
create view controllers for the iPhone.

00:59:19.980 --> 00:59:22.730
That's in Presidio today at 2:00 p.m.

00:59:22.840 --> 00:59:25.470
If you want some more hands-on
help with Interface Builder,

00:59:25.510 --> 00:59:28.660
maybe directly with some of the
projects that you're working with,

00:59:28.710 --> 00:59:30.600
there are a number of labs you can go to.

00:59:30.660 --> 00:59:34.310
For those interested in some of the
advanced parts of Cocoa Bindings,

00:59:34.310 --> 00:59:36.610
come to the Advanced Cocoa Bindings Lab.

00:59:36.740 --> 00:59:39.200
And for those that need help with
the tools or their own applications,

00:59:39.380 --> 00:59:42.460
there are two developer labs, one today,
one tomorrow.