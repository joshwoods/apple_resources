WEBVTT

00:00:27.330 --> 00:00:28.560
Welcome.

00:00:28.570 --> 00:00:29.630
I'm Darin Adler.

00:00:29.720 --> 00:00:32.200
I'm the director of
Safari and WebKit Engineering.

00:00:32.230 --> 00:00:35.830
We're going to talk a little bit
today about Safari and WebKit.

00:00:36.380 --> 00:00:41.160
Now,
you use Safari for website development,

00:00:41.160 --> 00:00:46.790
but maybe you've never thought
about what underlies Safari,

00:00:46.790 --> 00:00:46.790
WebKit, the engine.

00:00:47.100 --> 00:00:49.990
Or maybe you're coming to the
back in Tosh and you're not

00:00:49.990 --> 00:00:51.080
really familiar with Safari.

00:00:51.080 --> 00:00:53.710
You've heard it's the
name of the web browser.

00:00:54.810 --> 00:00:57.840
or you may be someone who programs
with WebKit and uses WebKit and you'd

00:00:57.840 --> 00:01:01.140
like to hear the latest about what's
happening with the technologies.

00:01:01.140 --> 00:01:02.740
No matter which of these
three describes you,

00:01:02.810 --> 00:01:04.090
this is the right session for you.

00:01:04.220 --> 00:01:05.970
So let's talk about Safari and WebKit.

00:01:06.330 --> 00:01:08.300
We're going to cover three things.

00:01:08.430 --> 00:01:10.650
First of all,
I'll talk about what is Safari,

00:01:10.650 --> 00:01:13.360
what is WebKit, how do they relate,
all that stuff,

00:01:13.360 --> 00:01:16.870
and there's a few announcements
and new things to talk about there.

00:01:17.040 --> 00:01:20.310
Then we'll talk about the approach
we use for WebKit development.

00:01:20.310 --> 00:01:24.700
We call this open development and it's
open source and goes even beyond that.

00:01:25.270 --> 00:01:28.610
and then we'll also tell you what's
new and show you some of the new

00:01:28.710 --> 00:01:31.660
stuff we've been adding and give you
pointers to a whole bunch of sessions

00:01:31.990 --> 00:01:36.300
throughout the week that cover new
developments in Safari and WebKit.

00:01:38.680 --> 00:01:41.370
So let's start with the basics.

00:01:41.580 --> 00:01:43.190
As most of you know,
there's the icon of Safari.

00:01:43.290 --> 00:01:47.180
Safari is the web browser on Mac OS.

00:01:47.210 --> 00:01:50.140
But it's recently been
joined by Safari for Windows,

00:01:50.140 --> 00:01:54.000
which is the same Safari on Windows.

00:01:54.130 --> 00:01:57.080
It's absolutely the same browser on both.

00:01:57.100 --> 00:01:59.680
And in addition,
there's Safari on iPhone.

00:01:59.750 --> 00:02:04.770
So this is the family
of Safari web browser.

00:02:05.220 --> 00:02:12.390
Inside all of these is the same engine,
the browser engine, what we call WebKit.

00:02:12.570 --> 00:02:16.110
and the same WebKit that's inside
Safari is available to you when

00:02:16.110 --> 00:02:21.710
you're writing native applications
on both Mac OS X and on iPhone.

00:02:22.310 --> 00:02:26.500
Now, what's been happening recently
with Safari is lots more

00:02:26.660 --> 00:02:28.540
people have been using it.

00:02:28.570 --> 00:02:32.980
In fact, if you take a look at the market
share from three years ago,

00:02:33.110 --> 00:02:37.710
and that was when we first talked
about our new WebKit Open development

00:02:38.140 --> 00:02:41.980
here at the Developers Conference,
you see that it's tripled

00:02:41.980 --> 00:02:43.580
in those three years.

00:02:43.580 --> 00:02:46.780
And with Safari being
used by a lot more people,

00:02:46.780 --> 00:02:50.420
when you're developing a website,
how Safari behaves matters a lot to you.

00:02:51.890 --> 00:02:56.800
Today, we'd like to announce a developer
preview of a new version of Safari.

00:02:56.830 --> 00:03:00.680
The Safari 4 developer preview is
both on your Snow Leopard developer

00:03:00.790 --> 00:03:03.940
preview DVDs for those of you
attending the developers conference.

00:03:04.050 --> 00:03:06.100
But it's also something you can download.

00:03:06.150 --> 00:03:10.560
And you can download it for Mac OS X to
work with either Tiger or Leopard.

00:03:10.580 --> 00:03:12.680
And you can also download it for Windows.

00:03:12.700 --> 00:03:16.360
And to get that, you just go to the
Apple developer website.

00:03:16.450 --> 00:03:19.170
So if you go to connect.apple.com
and look at downloads,

00:03:19.200 --> 00:03:24.640
you'll see the Safari 4 developer
preview download along with the others.

00:03:24.670 --> 00:03:26.920
And so a lot of things we're
talking about today and things

00:03:26.920 --> 00:03:30.300
we'll talk about throughout this
week are in these new versions,

00:03:30.430 --> 00:03:34.940
the Safari 4 developer
preview and also iPhone 2.0.

00:03:34.960 --> 00:03:39.260
And we'll mention that as we
talk about individual things.

00:03:39.310 --> 00:03:40.750
So.

00:03:42.360 --> 00:03:45.690
One of the things that I want to
help you understand is how sharing

00:03:46.010 --> 00:03:50.020
the same underlying engine affects
these different versions of Safari.

00:03:50.120 --> 00:03:56.320
So let's just talk just for a
moment about how the same WebKit in

00:03:56.320 --> 00:03:59.680
all the different browsers,
there still might be some differences.

00:03:59.720 --> 00:04:03.020
Now,
if you went to a session this morning,

00:04:03.020 --> 00:04:04.760
the one just before this, it was great.

00:04:04.760 --> 00:04:07.190
And if you didn't go,
you can get the audio of it after

00:04:07.190 --> 00:04:12.300
the developers conference about
Safari development on iPhone.

00:04:12.300 --> 00:04:18.440
One of the things you heard is that
Safari 3.1 on both desktop and iPhone,

00:04:18.440 --> 00:04:20.300
it's the same basic version of Safari.

00:04:20.300 --> 00:04:22.300
But there still are some differences.

00:04:22.500 --> 00:04:26.300
One thing to understand is that
every release is always a snapshot.

00:04:26.300 --> 00:04:28.290
Development is moving fast all the time.

00:04:28.290 --> 00:04:30.100
We're doing all kinds of great stuff.

00:04:30.460 --> 00:04:32.190
And so every release is a point in time.

00:04:32.510 --> 00:04:36.300
And, you know, they're not going to be
identical points in time.

00:04:36.470 --> 00:04:38.220
Also, there are differences
between the platforms.

00:04:38.310 --> 00:04:41.300
And this morning's session was
really about that in depth.

00:04:41.420 --> 00:04:44.170
How it affects you,
whether you have browser windows

00:04:44.250 --> 00:04:48.280
that can be resized or using
the whole screen on iPhone,

00:04:48.450 --> 00:04:51.480
the mouse input versus touch screen.

00:04:51.810 --> 00:04:56.340
and in general though,
same engine means you

00:04:56.340 --> 00:04:58.110
get the same behavior.

00:04:58.110 --> 00:05:03.910
And so that means for 90%
of what you do on websites,

00:05:03.910 --> 00:05:10.190
the fact that WebKit underlies all
the versions of Safari means that

00:05:10.190 --> 00:05:10.190
the work you do to make it work well
with one version of Safari extends

00:05:10.190 --> 00:05:10.190
to making it work well with all.

00:05:12.170 --> 00:05:17.430
One thing mentioned up on the slide
here is the way a Safari update

00:05:17.450 --> 00:05:21.390
means something different to an end
user or a website developer or to an

00:05:21.390 --> 00:05:23.750
application developer using native apps.

00:05:23.920 --> 00:05:27.580
Safari updates not only include
a new version of the web browser,

00:05:27.580 --> 00:05:30.900
but they almost always include
a new version of the underlying

00:05:30.900 --> 00:05:32.200
WebKit framework as well.

00:05:32.200 --> 00:05:34.200
So if you're a native
application development,

00:05:34.200 --> 00:05:37.500
some of those improvements and new
features are available to you in WebKit.

00:05:38.140 --> 00:05:41.500
So we call them Safari updates
because to the end user or customer,

00:05:41.500 --> 00:05:43.510
that's what it is, a Safari update.

00:05:43.690 --> 00:05:45.820
But to you as a programmer,
you may think of it as a

00:05:45.860 --> 00:05:47.340
Safari and WebKit update.

00:05:49.500 --> 00:05:54.390
Now, to understand how to--what's
going on with Safari,

00:05:54.400 --> 00:05:59.130
and in particular, to understand things
like if there's a bug,

00:05:59.130 --> 00:06:05.780
should I report this to Apple or,
you know, should I--what system

00:06:05.780 --> 00:06:06.560
might be responsible?

00:06:06.560 --> 00:06:11.220
I want to show you a little picture
of how WebKit works with the platform.

00:06:11.510 --> 00:06:15.640
Now, this is different from a lot
of other browser engines.

00:06:15.930 --> 00:06:18.520
WebKit tries to use--well,
not just tries,

00:06:18.590 --> 00:06:22.570
actually uses platform resources
and open source projects for all

00:06:22.740 --> 00:06:26.220
sorts of things rather than having
them built right into the engine.

00:06:26.220 --> 00:06:27.400
So there's a bunch of areas up here.

00:06:27.400 --> 00:06:29.460
I'm even going to list them
because they're pretty interesting.

00:06:29.460 --> 00:06:32.400
The networking and cookies,
that's really pretty unusual to

00:06:32.400 --> 00:06:34.700
use a separate networking library.

00:06:34.700 --> 00:06:36.580
It's not part of the browser.

00:06:36.580 --> 00:06:39.710
There's a great
networking library to use.

00:06:39.950 --> 00:06:42.090
Graphics, obviously,
don't write--we don't write all

00:06:42.090 --> 00:06:43.480
of our own custom graphics code.

00:06:43.480 --> 00:06:45.520
We use the platform graphics.

00:06:45.520 --> 00:06:47.640
Unicode handling,
there's some great sophisticated

00:06:47.640 --> 00:06:50.020
libraries for handling Unicode.

00:06:50.020 --> 00:06:55.020
XML, the processing XML files,
parsing them correctly.

00:06:55.020 --> 00:06:58.420
The XSL language,
which is a custom language

00:06:58.420 --> 00:07:00.700
just for manipulating XML.

00:07:00.700 --> 00:07:04.770
And also, more importantly,
what's something that's become

00:07:05.250 --> 00:07:09.140
much more important recently as we
added more and more features that

00:07:09.140 --> 00:07:13.250
really rely on this capability,
database functionality that's used

00:07:13.250 --> 00:07:15.340
for everything from storing--.

00:07:15.340 --> 00:07:19.620
The web pages that make
up web applications,

00:07:19.620 --> 00:07:22.160
you'll hear about that later,
all the way down to the smallest

00:07:22.160 --> 00:07:25.360
bits of data like storing the
little icons that show up next

00:07:25.360 --> 00:07:29.220
to your URLs in the address bar.

00:07:29.220 --> 00:07:32.100
So for all of these pieces,
there's an underlying

00:07:32.130 --> 00:07:33.560
library that's used.

00:07:33.560 --> 00:07:36.060
So WebKit doesn't try to do all
this stuff itself and it uses

00:07:36.150 --> 00:07:37.600
these underlying libraries.

00:07:37.600 --> 00:07:41.330
So if there are database problems,
sometimes the issue is

00:07:41.330 --> 00:07:45.160
something that is fixed by a
new improved version of SQLite.

00:07:45.160 --> 00:07:48.420
If there's a new
encoding to be supported,

00:07:48.540 --> 00:07:54.260
it's the industry standard
ICU library that--where that shows up.

00:07:54.310 --> 00:07:56.390
And so that's helpful when
you're trying to understand the

00:07:56.390 --> 00:07:58.080
relationship of WebKit to other

00:07:59.910 --> 00:08:03.900
Now just a few words about how WebKit,
itself, is structured.

00:08:03.980 --> 00:08:09.760
Just briefly, there are two major pieces
of WebKit-- three major,

00:08:09.970 --> 00:08:12.410
excuse me, pieces of WebKit.

00:08:12.740 --> 00:08:16.330
The high-level one called
WebKit is the outside of WebKit.

00:08:16.450 --> 00:08:17.720
It's how you get to WebKit.

00:08:17.790 --> 00:08:20.400
It's where the WebKit API lives.

00:08:20.520 --> 00:08:23.800
Inside WebKit is a
library called WebCore.

00:08:24.180 --> 00:08:27.260
And WebCore is a platform
independent core,

00:08:27.390 --> 00:08:31.940
whereas WebKit gives you the
perfect programming interface

00:08:32.090 --> 00:08:34.590
for whatever platform you're
working on-- one that fits well,

00:08:34.590 --> 00:08:37.380
for example,
with Cocoa when you're on Mac OS X,

00:08:37.720 --> 00:08:40.640
fits well with Cocoa Touch when
you're on iPhone.

00:08:40.710 --> 00:08:44.020
WebCore is the platform independent core.

00:08:44.220 --> 00:08:45.850
In addition,
there's a separate library called

00:08:45.860 --> 00:08:48.170
JavaScript Core with its own API.

00:08:48.520 --> 00:08:51.560
And that lets you use
JavaScript even when you're not

00:08:51.560 --> 00:08:53.380
in the context of a web page.

00:08:53.530 --> 00:08:56.770
So you're free to use that high-speed
interpreter for any situation where

00:08:56.780 --> 00:08:57.900
you want a programming library.

00:08:57.900 --> 00:08:59.620
But you can use
JavaScript Core to do that.

00:08:59.780 --> 00:09:03.100
And you can use JavaScript Core to
do that in any language.

00:09:03.160 --> 00:09:07.440
Both of these are APIs-- this is where
the two APIs live-- the JavaScript Core

00:09:08.180 --> 00:09:12.100
And of course,
Safari is built on top of these APIs.

00:09:12.250 --> 00:09:16.280
So let's talk a little bit in
specific about one of the WebKit APIs.

00:09:16.400 --> 00:09:18.600
This is just the Cocoa one on Mac OS X.

00:09:18.690 --> 00:09:20.340
And there are similar
issues for the iPhone one,

00:09:20.340 --> 00:09:24.860
but I just want to go a little in
depth about the Cocoa API on Mac OS X.

00:09:26.570 --> 00:09:29.290
The basic concept here is
it's a classic Cocoa API.

00:09:29.350 --> 00:09:30.490
It uses the Cocoa idioms.

00:09:30.500 --> 00:09:36.500
It fits right in with the rest of the
Cocoa app kit and other frameworks.

00:09:36.500 --> 00:09:39.580
And one of the things that it does
that I think makes it particularly

00:09:39.580 --> 00:09:45.390
convenient to use is the WebView class
has this good default behavior.

00:09:45.500 --> 00:09:47.440
It acts like a web
browser does by default.

00:09:47.570 --> 00:09:50.500
You don't have to tell it to
do all the various things.

00:09:50.660 --> 00:09:53.920
And then you can customize its behavior,
and there's a design pattern for

00:09:53.920 --> 00:09:55.360
this in Cocoa called delegates.

00:09:55.500 --> 00:09:57.850
So you supply objects,
and then the WebView will consult

00:09:57.850 --> 00:10:02.500
these objects to ask various
questions about how it should behave.

00:10:02.500 --> 00:10:06.390
And this WebKit API is
how Safari uses WebKit,

00:10:06.510 --> 00:10:09.500
and it's also the basis for
many other applications.

00:10:09.500 --> 00:10:13.200
Lots of our system applications use
WebKit for all sorts of purposes,

00:10:13.290 --> 00:10:14.480
not just browsing.

00:10:14.500 --> 00:10:18.690
And also,
there's tons of third-party applications

00:10:18.690 --> 00:10:21.470
that have been built on this API.

00:10:23.270 --> 00:10:30.800
The way we do development on WebKit is
a model that I call open development.

00:10:30.800 --> 00:10:33.580
So first of all,
this is something that--you know,

00:10:33.590 --> 00:10:34.930
part of this is open source.

00:10:35.030 --> 00:10:37.320
You hear about open source all the time.

00:10:37.320 --> 00:10:40.970
And what open source really means
is that the license is such that

00:10:40.970 --> 00:10:42.700
the source code is available.

00:10:42.990 --> 00:10:46.900
And you can take a look at the licenses
used in--the license used in WebKit.

00:10:47.210 --> 00:10:50.440
It means that we'll always give
out the source code and the license

00:10:50.820 --> 00:10:53.060
spells out what you can do with it.

00:10:53.910 --> 00:10:59.340
But open development goes beyond just
having source code that's open and goes

00:10:59.340 --> 00:11:04.000
to a process for developing so that
you can see the work as it happens.

00:11:04.000 --> 00:11:07.440
You can get involved in the development,
but you can also see each change as it

00:11:07.440 --> 00:11:11.750
arrives and follow WebKit development
a lot more closely than you can follow

00:11:11.750 --> 00:11:14.640
development that's not done this way.

00:11:14.650 --> 00:11:19.540
And you can also, when you file a bug,
see the progress on the bug.

00:11:19.540 --> 00:11:24.400
That's why it's great to use the open
source bug database and watch people's

00:11:24.570 --> 00:11:29.860
comments and what happens as the bug
is diagnosed and eventually fixed.

00:11:31.460 --> 00:11:35.080
Now, I'd like to ask Mark Rowe,
an engineer from the

00:11:35.080 --> 00:11:37.570
Safari and WebKit team,
to come up here and talk a little

00:11:37.570 --> 00:11:42.320
bit more in depth about open
development and Safari and WebKit.

00:11:42.320 --> 00:11:43.870
Thanks, Darin.

00:11:48.580 --> 00:11:49.410
Hi, everyone.

00:11:49.460 --> 00:11:50.120
I'm Mark Rowe.

00:11:50.320 --> 00:11:51.960
I'm an engineer on the
Safari and WebKit team,

00:11:51.960 --> 00:11:54.500
as Darren just mentioned.

00:11:54.540 --> 00:11:58.760
The main point I want to get across
is that WebKit development is open.

00:11:58.770 --> 00:12:00.680
It's not just source code.

00:12:00.690 --> 00:12:03.380
The entire development process is open.

00:12:03.650 --> 00:12:06.370
I'm going to touch on
three main points here.

00:12:06.470 --> 00:12:11.050
The first is the number of resources
that are available to get involved

00:12:11.050 --> 00:12:14.450
with the development of WebKit.

00:12:14.620 --> 00:12:17.100
Then I'm going to talk about the
advantages that this development model

00:12:17.630 --> 00:12:21.880
brings to you as users of WebKit,
as users of Safari as well,

00:12:22.280 --> 00:12:24.140
and to Apple as well.

00:12:24.140 --> 00:12:27.110
And third, about how you can get involved
with the WebKit project and how you

00:12:27.110 --> 00:12:31.050
can contribute and the advantages
that can bring to you as well.

00:12:32.170 --> 00:12:36.010
So first, the available resources.

00:12:36.060 --> 00:12:39.780
The most obvious one is the source
code repository is publicly available.

00:12:39.820 --> 00:12:43.470
You can download the source yourself,
you can compile it yourself,

00:12:43.800 --> 00:12:46.620
and you can see changes as they happen.

00:12:47.120 --> 00:12:49.610
Two other important things
are the public bug database,

00:12:49.610 --> 00:12:53.100
which Darin touched on earlier,
and the downloadable nightly builds.

00:12:53.130 --> 00:12:54.330
These two things go hand in hand.

00:12:54.450 --> 00:12:56.990
You can download new
builds of WebKit every day.

00:12:56.990 --> 00:13:00.270
You don't have to bother checking out
the code if you don't feel like it.

00:13:00.540 --> 00:13:06.770
You can test out the latest changes,
and you can file bug reports.

00:13:06.770 --> 00:13:09.590
When the bug reports are resolved,
you can download a new build,

00:13:09.590 --> 00:13:09.590
verify the issue has actually been fixed.

00:13:10.380 --> 00:13:12.600
Other important factor is communication.

00:13:12.600 --> 00:13:15.740
We have developers spread
out all over the world.

00:13:15.830 --> 00:13:20.030
We've had developers working from Russia,
Israel, Australia, New Zealand, Canada,

00:13:20.290 --> 00:13:21.300
all over the place.

00:13:21.300 --> 00:13:23.920
So communication in this
case is very important,

00:13:23.920 --> 00:13:25.240
not in the same office.

00:13:25.260 --> 00:13:29.280
So we've got IRC channels,
we've got a website with a blog on it,

00:13:29.480 --> 00:13:33.030
you've probably seen the blog before,
and we've got mailing lists that

00:13:33.030 --> 00:13:34.810
we use to communicate as well.

00:13:35.770 --> 00:13:39.940
Okay, so on to some advantages the
Open Development Model brings.

00:13:40.020 --> 00:13:42.460
The first is bug and feature visibility.

00:13:42.490 --> 00:13:46.320
This means that you can file bug reports,
you can see bug reports

00:13:46.320 --> 00:13:48.750
other people have filed,
and you can see features

00:13:48.750 --> 00:13:50.400
as they're being developed.

00:13:50.470 --> 00:13:53.580
Then there's also the widespread
adoption that having the open

00:13:53.670 --> 00:13:55.600
source development encourages.

00:13:55.670 --> 00:13:57.780
And third,
there's the rapid change that the

00:13:57.780 --> 00:14:00.080
Open Development Model also encourages.

00:14:00.950 --> 00:14:05.630
So as I just mentioned,
there is good communication in bugs.

00:14:05.890 --> 00:14:07.900
The bug database is publicly available.

00:14:07.900 --> 00:14:09.010
You can log in.

00:14:09.020 --> 00:14:10.940
You can search for bugs before
you file them to see what

00:14:10.940 --> 00:14:12.960
other people have encountered.

00:14:12.960 --> 00:14:17.780
You can interact with the engineers that
are working on resolving your issues.

00:14:17.780 --> 00:14:23.120
And you can basically see exactly when
the fix for your bug has been landed.

00:14:23.220 --> 00:14:25.740
When we land fixes,
we say exactly which revision in the

00:14:25.840 --> 00:14:27.420
source code repository it was fixed in.

00:14:27.420 --> 00:14:29.500
You can make sure you've got
that revision nightly build or

00:14:29.610 --> 00:14:32.960
source code of that revision,
and you can test the fix out.

00:14:33.230 --> 00:14:35.230
This also applies to features.

00:14:35.480 --> 00:14:37.600
When features are landed,
we tend to mention them

00:14:37.600 --> 00:14:39.060
on the blog occasionally.

00:14:39.100 --> 00:14:42.070
Or if you track the might be builds,
you'll see them pop

00:14:42.070 --> 00:14:45.120
up and you'll be like,
well, this is really cool.

00:14:45.200 --> 00:14:47.480
When you see these new
features on the blog,

00:14:47.550 --> 00:14:50.380
one thing we like to get is
feedback on the features.

00:14:50.450 --> 00:14:54.920
There are a lot of features we adopt
from upcoming standards like HTML 5.

00:14:54.920 --> 00:14:57.510
These standards are still
in heavy development.

00:14:57.680 --> 00:15:01.750
So feedback that you get about
uses of the new features can help

00:15:01.750 --> 00:15:05.520
shape the way the web standards
are moving in the future.

00:15:05.610 --> 00:15:09.240
This means that it helps ensure that
the APIs that are being adopted in

00:15:09.350 --> 00:15:13.540
the future and the new syntax is
the most elegant and simple ones,

00:15:13.620 --> 00:15:15.590
yet still really powerful.

00:15:17.070 --> 00:15:22.520
So WebKit is a great easy
to understand code base.

00:15:22.520 --> 00:15:25.060
It's three quarters of
a million lines of code,

00:15:25.120 --> 00:15:29.130
more or less, which is relatively small
compared to other browser engines,

00:15:29.270 --> 00:15:32.850
but yet it's also really easy
to understand and get involved.

00:15:32.860 --> 00:15:34.010
It has a great feature set.

00:15:34.060 --> 00:15:37.240
It supports a lot of
new upcoming standards.

00:15:37.250 --> 00:15:39.600
It has great support
for existing standards,

00:15:39.670 --> 00:15:42.130
and it also has exceptional performance.

00:15:42.170 --> 00:15:44.740
It's one of the fastest
browser engines out there.

00:15:44.760 --> 00:15:46.700
And it does all this in
a very small footprint,

00:15:46.720 --> 00:15:51.680
both in terms of memory use when it's
running and the footprint on disk.

00:15:52.000 --> 00:15:53.910
This has led to being adopted
heavily throughout the

00:15:54.010 --> 00:15:55.360
system applications in Apple.

00:15:55.360 --> 00:15:58.360
Obviously, Safari uses it,
and iChat uses it for

00:15:58.360 --> 00:16:01.720
displaying message transcripts,
and Dashboard uses it heavily, obviously,

00:16:01.780 --> 00:16:02.140
as well.

00:16:02.160 --> 00:16:05.070
It's also used by a lot of
third-party applications.

00:16:05.110 --> 00:16:07.910
It's used by the OmniWeb
browser from the Omni Group.

00:16:07.970 --> 00:16:11.680
It's used by Sandbox
from Corealia Software.

00:16:11.680 --> 00:16:14.140
It's used by many other third-party
applications from instant

00:16:14.510 --> 00:16:17.550
messaging programs through to
newsreaders and things like that.

00:16:18.420 --> 00:16:22.110
It's also being adopted
heavily on different platforms.

00:16:22.180 --> 00:16:26.020
It's being adopted by Nokia on
the S60 platform and by Google for

00:16:26.110 --> 00:16:28.190
their upcoming Android platform.

00:16:28.200 --> 00:16:31.280
You might be wondering,
why do I care if it's adopted

00:16:31.360 --> 00:16:33.050
on these other platforms?

00:16:33.200 --> 00:16:35.020
There are a couple of
good reasons to care.

00:16:35.100 --> 00:16:38.540
The more people that use WebKit,
the more testing it gets,

00:16:38.720 --> 00:16:40.070
the more engineers
that are working on it.

00:16:40.370 --> 00:16:45.330
This leads to improved performance,
improved stability, and more bug reports,

00:16:45.430 --> 00:16:46.560
more bugs fixed.

00:16:47.570 --> 00:16:52.760
Um, As a wise man once said,
many eyes make all bugs shallow.

00:16:56.260 --> 00:16:59.040
The second reason is that
it promotes web standards.

00:16:59.080 --> 00:17:02.580
Traditionally, on mobile platforms,
web standards have not been something

00:17:02.580 --> 00:17:04.200
that vendors have cared about.

00:17:04.220 --> 00:17:11.590
By having WebKit,
which is a great standards-compliant

00:17:12.130 --> 00:17:14.370
browser on lots of more devices,
it means you can code to the web

00:17:14.370 --> 00:17:14.370
standards and things just work great.

00:17:14.960 --> 00:17:19.140
It also allows you to adopt
WebKit features more widely.

00:17:19.440 --> 00:17:22.950
Most WebKit features that are
WebKit-specific have gracefully

00:17:23.090 --> 00:17:27.830
degrade on other devices,
so it's great to enhance your

00:17:27.950 --> 00:17:36.620
applications or sites for WebKit and have
them work great on other devices as well.

00:17:36.620 --> 00:17:36.620
So the third main point is,
how do you get involved

00:17:36.620 --> 00:17:36.620
with this project?

00:17:37.670 --> 00:17:44.630
There are three big ways to get involved,
starting from testing,

00:17:44.630 --> 00:17:44.630
then filing bug reports,
and then moving on to

00:17:44.630 --> 00:17:44.630
contributing of code.

00:17:45.800 --> 00:17:48.930
So since the WebKit project,
we moved to open development

00:17:48.960 --> 00:17:50.900
model in June of 2005.

00:17:50.900 --> 00:17:54.280
We've had over 250 people contribute.

00:17:54.300 --> 00:17:57.020
This is a huge number of people,
and we're very excited about this.

00:17:57.040 --> 00:17:59.460
But I want it to be even more people.

00:17:59.460 --> 00:18:01.770
Working with these open source
contributors is probably

00:18:01.910 --> 00:18:03.190
the best part of my job.

00:18:03.240 --> 00:18:05.210
Dealing with people from
all around the world,

00:18:05.300 --> 00:18:07.640
learning lots of new things
about different countries,

00:18:07.760 --> 00:18:11.810
and also the new skills that these
people bring to the project is great.

00:18:12.480 --> 00:18:15.600
So there are a lot of different
reasons why these people come

00:18:15.710 --> 00:18:17.760
to the project and contribute.

00:18:17.760 --> 00:18:20.630
Some of them want to
contribute a pet feature.

00:18:20.860 --> 00:18:24.600
A great example of this is some
developers from the KDE project

00:18:25.070 --> 00:18:29.760
decided that they really liked SVG,
Scalable Vector Graphics.

00:18:29.760 --> 00:18:32.980
So they had a partial
implementation of SVG,

00:18:32.980 --> 00:18:36.360
which they reworked to
work with WebKit and then

00:18:36.360 --> 00:18:40.400
contributed this code to WebKit,
which was the basis for

00:18:40.400 --> 00:18:41.580
WebKit's SVG support.

00:18:42.250 --> 00:18:44.700
The second big reason
is to fix a pet bug.

00:18:44.740 --> 00:18:49.340
You may be a user that uses Safari,
come across a bug in a website that you

00:18:49.670 --> 00:18:52.080
use every day and this bug annoys you.

00:18:52.080 --> 00:18:55.020
Filing bug reports,
fixing the bugs is a great way

00:18:55.020 --> 00:18:56.940
to get those issues resolved.

00:18:57.540 --> 00:19:01.910
A third big reason is contributors
like to port WebKit to all

00:19:02.010 --> 00:19:03.820
sorts of crazy platforms.

00:19:03.820 --> 00:19:09.710
A couple of mainstream ports that we've
got in the WebKit Subversion Repository

00:19:09.720 --> 00:19:14.860
are to the QT toolkit from Troll
Tech and to their GTK toolkit as well.

00:19:15.020 --> 00:19:21.690
People have ported it to all
sorts of strange platforms like,

00:19:21.860 --> 00:19:24.310
what have we got,
Aros and some Beos clone as well.

00:19:24.930 --> 00:19:28.080
This is not saying that we want
open source developers to do all

00:19:28.080 --> 00:19:31.520
the work and Apple to sit back and
take lots of code from everyone.

00:19:31.800 --> 00:19:34.390
At the moment,
it's about 80% of the contributions

00:19:34.390 --> 00:19:35.590
are from Apple engineers.

00:19:35.800 --> 00:19:38.430
One reason for this is that
Apple has got a habit of hiring

00:19:38.430 --> 00:19:41.540
all the talented engineers from the
open source community because we

00:19:41.660 --> 00:19:44.510
like people working hard on WebKit.

00:19:45.720 --> 00:19:47.600
Okay, so how to get involved.

00:19:47.600 --> 00:19:50.560
Testing with WebKit is by far
the easiest way to get involved.

00:19:50.600 --> 00:19:51.240
It's really simple.

00:19:51.270 --> 00:19:54.320
You can download a nightly
build from nightly.webkit.org,

00:19:54.370 --> 00:19:56.600
or you can compile from source yourself.

00:19:56.600 --> 00:19:59.370
Just have to browse around
your favorite sites.

00:19:59.420 --> 00:20:02.560
If you run into any problems,
you can head over to the bug

00:20:02.610 --> 00:20:04.600
database and file a bug report.

00:20:04.700 --> 00:20:06.860
It's also really simple to
test these nightly builds of

00:20:06.910 --> 00:20:08.590
WebKit with your own applications.

00:20:08.600 --> 00:20:12.520
If you're developing an application
that embeds WebKit on the desktop,

00:20:12.520 --> 00:20:16.600
it's great to know that we haven't broken
any functionality in your application.

00:20:16.780 --> 00:20:22.600
Or you can also get a start on adopting
these new features ahead of time.

00:20:24.290 --> 00:20:27.040
So, as I mentioned,
occasionally you'll be browsing the web,

00:20:27.100 --> 00:20:29.660
go to a website,
you're expecting it to look like this,

00:20:29.660 --> 00:20:30.960
standard Flickr page.

00:20:30.990 --> 00:20:34.200
Occasionally,
the website will look slightly wonky.

00:20:34.240 --> 00:20:35.840
That's not good.

00:20:36.150 --> 00:20:38.740
First step there is filing a bug report.

00:20:38.770 --> 00:20:43.070
Filing good bug reports is really useful.

00:20:43.240 --> 00:20:47.340
Bug reports that describe a
single problem are the best ones.

00:20:47.400 --> 00:20:50.640
Downloading a build of WebKit,
noticing a dozen different problems,

00:20:50.700 --> 00:20:53.860
and writing them in a single bug report
makes life difficult for the engineers

00:20:53.890 --> 00:20:55.090
that will tackle those problems.

00:20:55.090 --> 00:20:58.370
They have to work out
which bugs are related,

00:20:58.570 --> 00:20:59.800
split them up.

00:20:59.830 --> 00:21:00.380
It gets complicated.

00:21:00.380 --> 00:21:04.760
Providing clear steps to reproduce
bugs is really useful as well.

00:21:04.760 --> 00:21:06.890
The easiest way for someone
to fix your bug is to be able

00:21:06.890 --> 00:21:08.790
to reproduce it themselves,
and then they can investigate

00:21:08.790 --> 00:21:09.800
the problem directly.

00:21:09.800 --> 00:21:12.270
Detailed steps to reproduce is great.

00:21:14.080 --> 00:21:18.160
Part of that is providing a URL that
reproduces the problem if it's a

00:21:18.170 --> 00:21:22.690
website that's giving you trouble,
or a test application if it's a use of

00:21:22.710 --> 00:21:27.140
the WebKit API or something like that,
which is showing a problem.

00:21:27.180 --> 00:21:30.180
Including the WebKit version
number is very useful.

00:21:30.220 --> 00:21:34.430
Having a bug report against a
six-week-old build of WebKit is

00:21:34.430 --> 00:21:37.960
not so great because the bug
may have already been fixed.

00:21:38.000 --> 00:21:40.650
Bug reports against three-year-old
versions of WebKit are even less useful,

00:21:40.670 --> 00:21:42.870
so it's great to know upfront whether
or not the issue is still going

00:21:42.880 --> 00:21:44.970
to be there when we look into it.

00:21:46.060 --> 00:21:50.880
Okay, so given this Flickr page,
there's like thousands of lines of HTML.

00:21:50.880 --> 00:21:52.140
Where do you go?

00:21:52.190 --> 00:21:55.470
How do you even start looking
at where the problem is?

00:21:56.140 --> 00:21:59.080
Most websites nowadays
are a big mass of HTML,

00:21:59.160 --> 00:22:03.400
JavaScript, and CSS, thousands of lines,
hundreds of kilobytes of code.

00:22:03.460 --> 00:22:07.040
How do you go about
tracking down the problem?

00:22:07.250 --> 00:22:08.620
It's quite simple process.

00:22:08.750 --> 00:22:10.400
You create a reduced test case.

00:22:10.460 --> 00:22:14.220
Basically, what you do is you start
with the original page,

00:22:14.290 --> 00:22:17.460
you remove stuff that you think is
probably unrelated to the problem,

00:22:17.530 --> 00:22:20.060
you test whether or not
the problem still exists.

00:22:20.090 --> 00:22:23.740
If it does still exist,
then the code you removed was unrelated,

00:22:23.740 --> 00:22:25.200
and you're fine.

00:22:25.210 --> 00:22:28.730
If the problem no longer appears,
clearly the stuff that you removed was

00:22:28.730 --> 00:22:30.950
actually relevant to the problem at hand.

00:22:31.280 --> 00:22:33.360
You go through this
process several times,

00:22:33.420 --> 00:22:36.820
and you eventually end up with
something nice and simple.

00:22:36.880 --> 00:22:39.500
This is a reduced test case
for that Flickr problem

00:22:39.500 --> 00:22:41.120
I showed a picture of earlier.

00:22:41.150 --> 00:22:44.040
It's like eight lines of code
down from several thousand

00:22:44.040 --> 00:22:45.840
of the original Flickr page.

00:22:45.880 --> 00:22:47.510
From this,
it's relatively straightforward

00:22:48.000 --> 00:22:50.070
to see where the problem is.

00:22:51.880 --> 00:22:54.970
So once you have a reduced test case,
where do you even start to look in the

00:22:55.080 --> 00:22:59.200
code to work out where the problem is,
how to fix it, things like that?

00:22:59.240 --> 00:23:01.700
Or even just how to debug the problem.

00:23:01.720 --> 00:23:08.110
If you have a reduced test case,
it might not be immediately

00:23:08.110 --> 00:23:10.910
obvious why it's failing.

00:23:10.910 --> 00:23:12.080
Understanding where the code is
makes it really a lot easier to

00:23:12.080 --> 00:23:12.080
debug the problem in a debugger.

00:23:12.790 --> 00:23:14.900
So as Darin mentioned earlier,
WebKit is broken up into

00:23:15.010 --> 00:23:16.080
three main components.

00:23:16.100 --> 00:23:17.940
There is JavaScript Core.

00:23:18.020 --> 00:23:22.690
JavaScript Core is
comprised of two main parts,

00:23:22.690 --> 00:23:27.310
the virtual machine,
which actually executes

00:23:27.320 --> 00:23:31.260
the JavaScript code,
and the runtime,

00:23:31.260 --> 00:23:31.700
which provides functionality
like regular expressions,

00:23:31.700 --> 00:23:31.700
string manipulation, maths,
and things like that.

00:23:32.490 --> 00:23:37.430
Web Core handles the meat of
the web browser side of things,

00:23:37.430 --> 00:23:42.860
which is primarily HTML parsing,
which is converting the HTML source

00:23:43.160 --> 00:23:46.380
code into the DOM tree used by WebKit.

00:23:46.840 --> 00:23:52.450
There is a CSS, which handles parsing,
stylesheets, and associating them with

00:23:52.450 --> 00:23:54.400
parts of the DOM tree.

00:23:54.400 --> 00:23:57.850
There is a loading,
which is talking to the network layer,

00:23:58.020 --> 00:24:01.400
CF Network, as Darin mentioned earlier,
on the Mac,

00:24:01.430 --> 00:24:05.740
loading resources from the network layer
and parsing them off the rest of WebCore.

00:24:05.870 --> 00:24:10.000
Then there's rendering and the
scalable vector graphics implementation

00:24:10.140 --> 00:24:12.000
that I touched on earlier.

00:24:13.060 --> 00:24:18.140
The third main part is WebKit,
which is the API layer of the framework.

00:24:18.140 --> 00:24:22.290
You may notice that I've got platform
glue in two places on this slide,

00:24:22.290 --> 00:24:23.990
both in WebCore and in WebKit.

00:24:23.990 --> 00:24:27.010
The reason for this is that
WebKit adapts to the platform

00:24:27.170 --> 00:24:28.720
in two main different ways.

00:24:29.080 --> 00:24:31.550
The first way,
in the WebKit side of things,

00:24:31.580 --> 00:24:33.910
in the blue box there,
is that it provides a

00:24:33.970 --> 00:24:35.580
platform-specific API.

00:24:35.580 --> 00:24:40.360
This makes it really easy for
platform developers to use the API.

00:24:40.360 --> 00:24:44.200
The WebCore side of things is more
integrating with the underlying system,

00:24:44.220 --> 00:24:47.660
so this is using the system libraries,
the system functionality,

00:24:47.690 --> 00:24:50.250
and also things like the
system look and feel for form

00:24:50.400 --> 00:24:52.160
controls and things like that.

00:24:54.110 --> 00:24:56.600
Okay, so you understand the code,
you know exactly where the bug is.

00:24:56.600 --> 00:24:58.550
I'm not going to cover
how to fix bugs right now.

00:24:58.670 --> 00:25:00.440
If you want to learn a
little bit more about that,

00:25:00.600 --> 00:25:03.760
we've got a WebKit development lab,
I think, immediately after this session.

00:25:03.760 --> 00:25:07.250
Once you have fixed the bug,
it's that easy.

00:25:07.250 --> 00:25:11.190
Contributing the code back is
quite straightforward as well.

00:25:12.480 --> 00:25:15.720
We have a great policy of
regression testing our code.

00:25:15.870 --> 00:25:20.240
We have around 10,000 regression tests,
which we ensure developers run

00:25:20.310 --> 00:25:22.140
before every commit that they do.

00:25:22.140 --> 00:25:24.800
This ensures that no regressions
are introduced to our code,

00:25:24.820 --> 00:25:27.980
which means we can develop at
a really fast pace and not risk

00:25:28.140 --> 00:25:30.080
introducing major problems.

00:25:30.100 --> 00:25:34.750
We also like to try and enforce a rule of
every change has to come with regression

00:25:35.140 --> 00:25:39.580
tests to ensure that the functionality,
the behavior that's changed,

00:25:39.580 --> 00:25:41.560
no longer causes problems.

00:25:43.180 --> 00:25:46.300
A second thing we like to
enforce is coding style.

00:25:46.300 --> 00:25:49.180
As I mentioned,
WebKit is about three-quarters

00:25:49.180 --> 00:25:50.090
of a million lines of code.

00:25:50.090 --> 00:25:51.980
That's an awful lot of code.

00:25:52.110 --> 00:26:00.820
Having a consistent coding style makes it
easy for new developers to approach the

00:26:00.820 --> 00:26:01.910
project and you get a handle on the code,
and also keeps some of the developers

00:26:01.910 --> 00:26:01.910
working on it every day sane.

00:26:02.560 --> 00:26:05.630
Code review is a third important
part of code contribution.

00:26:05.640 --> 00:26:08.170
It's probably the most important part.

00:26:08.440 --> 00:26:11.870
Before any commit is landed,
it goes through a process of code review,

00:26:12.140 --> 00:26:15.370
where a developer that's been
working with WebKit for a long time

00:26:15.370 --> 00:26:18.000
goes through the code line by line,
makes sure that there's

00:26:18.000 --> 00:26:20.070
nothing odd about it,
makes sure that there

00:26:20.180 --> 00:26:23.180
are regression tests,
that the coding style is consistent,

00:26:23.260 --> 00:26:25.690
and also looks for any bugs
that may be in the code that

00:26:25.750 --> 00:26:31.380
the developer has missed,
and points out any issues that may arise.

00:26:31.390 --> 00:26:34.520
This is, in my mind,
the most important part of the process,

00:26:34.520 --> 00:26:37.100
because some of the developers
that work on WebKit are

00:26:37.100 --> 00:26:38.160
very experienced developers.

00:26:38.230 --> 00:26:41.440
They know a lot of stuff, basically.

00:26:41.620 --> 00:26:45.300
Working with these senior engineers
when I was new to the project

00:26:45.430 --> 00:26:48.040
taught me an awful lot about WebKit,
and also just about

00:26:48.040 --> 00:26:49.800
programming in general.

00:26:49.830 --> 00:26:52.550
So it's a great way to
learn about programming or

00:26:52.590 --> 00:26:54.970
just polish up your skills.

00:26:55.670 --> 00:27:01.200
So once you've got your patch reviewed,
someone on the WebKit team

00:27:01.530 --> 00:27:02.760
will commit it.

00:27:02.780 --> 00:27:06.400
Once they're committed,
they will eventually make their way

00:27:06.400 --> 00:27:11.020
out with the WebKit nightly builds and
eventually into a release of Safari.

00:27:11.030 --> 00:27:14.600
Releases of Safari have
lots of new features.

00:27:14.600 --> 00:27:23.200
[Transcript missing]

00:27:25.920 --> 00:27:27.970
Thanks, Mark.

00:27:28.260 --> 00:27:34.580
So I'm going to tell you about some
cool new stuff in Safari and WebKit.

00:27:34.610 --> 00:27:37.040
We like coding and we
like adding new features,

00:27:37.070 --> 00:27:41.120
but as we add all this new functionality,
we try to keep in mind

00:27:41.120 --> 00:27:44.280
that we're working for you.

00:27:44.320 --> 00:27:47.570
We're really listening to
web developers and following

00:27:47.570 --> 00:27:51.430
the world of web technology,
and making sure that what we provide

00:27:51.430 --> 00:27:56.240
is something that really makes
sense and will help web developers.

00:27:56.460 --> 00:27:58.880
We're also listening
to widget developers.

00:27:58.880 --> 00:28:02.940
WebKit is the engine inside Dashboard,
so when you're developing

00:28:03.060 --> 00:28:05.630
all your Dashboard widgets,
you can take advantage of all

00:28:05.630 --> 00:28:07.640
these improvements we've done.

00:28:07.670 --> 00:28:10.220
And finally,
native application developers

00:28:10.220 --> 00:28:12.520
are really going to be
interested in these new things,

00:28:12.590 --> 00:28:12.960
too.

00:28:12.990 --> 00:28:16.030
As Mark mentioned,
more and more applications are embedding

00:28:16.110 --> 00:28:21.130
WebKit to use as part of their display
engine or their core user interface.

00:28:21.340 --> 00:28:25.780
And all of the new stuff-- that
we're talking about-- will not

00:28:25.780 --> 00:28:28.180
only be available in Safari,
but in WebKit when you embed

00:28:28.180 --> 00:28:30.300
it in your app as well.

00:28:30.980 --> 00:28:34.700
So we have three basic
categories of cool new stuff.

00:28:35.060 --> 00:28:38.360
We've got standards improvements.

00:28:38.760 --> 00:28:42.430
All the work we do on WebKit is
guided by web standards.

00:28:42.440 --> 00:28:45.060
These are very important when
you're developing for the web,

00:28:45.130 --> 00:28:47.150
because there's all these
different browsers out there.

00:28:47.390 --> 00:28:49.720
Tragically,
not all of them use WebKit yet.

00:28:49.810 --> 00:28:55.780
So we need standards to sort of file
the rough edges off the differences,

00:28:55.780 --> 00:28:58.450
and make sure everything
works consistently.

00:28:58.740 --> 00:29:01.180
We also have a lot of great
performance improvements.

00:29:01.180 --> 00:29:03.360
And I'm going to talk about
some of the areas where we

00:29:03.500 --> 00:29:06.070
vastly improve performance.

00:29:06.080 --> 00:29:08.560
And finally,
I'm going to give you highlights

00:29:08.560 --> 00:29:13.040
of some of the new features that
you'll find in this release in

00:29:13.170 --> 00:29:16.920
the Safari for Developer preview.

00:29:16.980 --> 00:29:19.800
So let's talk about standards first.

00:29:19.800 --> 00:29:20.560
Web standards.

00:29:20.680 --> 00:29:24.000
There's sort of two areas that
we really think about when

00:29:24.000 --> 00:29:25.980
we're looking at web standards.

00:29:25.990 --> 00:29:28.430
One is sort of the classics.

00:29:28.750 --> 00:29:32.330
That all of you will know about if
you're familiar with web development.

00:29:32.390 --> 00:29:36.800
HTML 4.0.1, CSS 2.1, DOM level 2.

00:29:36.850 --> 00:29:41.000
These are sort of the core of
your web development experience.

00:29:41.000 --> 00:29:42.980
And it's just sort of bread and butter.

00:29:43.040 --> 00:29:45.860
And even though these standards
have been out for a long time,

00:29:46.020 --> 00:29:49.420
there's still many fine details
where it's taken a long time

00:29:49.420 --> 00:29:51.150
for the browsers to agree.

00:29:51.310 --> 00:29:54.130
And we have improvements even
down to these basic standards.

00:29:54.220 --> 00:29:56.130
A lot of bug fixes going on all the time.

00:29:56.180 --> 00:29:58.440
Another thing that we're looking at
is the ability to do a lot of things.

00:29:58.440 --> 00:30:01.420
Another big area we look at is
sort of emerging technologies

00:30:01.420 --> 00:30:02.740
in the standards world.

00:30:02.820 --> 00:30:04.380
Things like SVG.

00:30:04.400 --> 00:30:08.380
Things like HTML5,
the next generation of the HTML standard

00:30:08.380 --> 00:30:12.640
that adds all sorts of functionality
for web documents and web applications.

00:30:12.640 --> 00:30:17.480
And CSS3, which provides really powerful
advanced visual styling.

00:30:17.770 --> 00:30:20.640
So we're sort of trying to push
the envelope on these newer

00:30:20.750 --> 00:30:23.750
technologies and move the web forward.

00:30:25.350 --> 00:30:27.520
and there's also web APIs.

00:30:27.700 --> 00:30:31.190
These are sort of new APIs that
add on to the core DOM interfaces

00:30:31.190 --> 00:30:35.450
to provide all sorts of additional
functionality if you're doing AJAX-style

00:30:35.620 --> 00:30:41.000
development using JavaScript or
what people call Web 2.0 sometimes.

00:30:41.010 --> 00:30:46.280
These very rich client
interactive applications.

00:30:46.440 --> 00:30:52.780
So, showing a checklist of different
standards is well and good,

00:30:52.810 --> 00:30:55.950
but how do you prove it?

00:30:56.060 --> 00:30:56.110
Well,

00:30:56.250 --> 00:30:58.750
In the web standards community,
there's this tradition of

00:30:58.750 --> 00:31:02.310
these things called acid tests.

00:31:02.370 --> 00:31:07.070
These are sort of collections of
really challenging web edge cases

00:31:07.070 --> 00:31:10.960
of all the different standards that
sort of make sure that you don't

00:31:11.060 --> 00:31:14.810
have just the most basic support,
but that you've really gone and

00:31:14.810 --> 00:31:18.680
covered every detail of the standard.

00:31:18.680 --> 00:31:24.320
So let's take a look at how Safari does
on the different acid tests.

00:31:24.320 --> 00:31:28.770
The original acid test, acid one,
was largely a test of

00:31:28.770 --> 00:31:31.310
CSS layout and the box model.

00:31:31.330 --> 00:31:34.180
This is something that web
developers haven't had to worry

00:31:34.230 --> 00:31:38.930
that much about in recent years,
because most browsers have been passing

00:31:38.930 --> 00:31:44.870
this test for over five years now,
and Safari's been passing it forever.

00:31:44.930 --> 00:31:47.920
But this sort of kicked off
the tradition of acid tests,

00:31:48.070 --> 00:31:51.070
and the idea of sort of making
their output look like a quirky,

00:31:51.170 --> 00:31:53.440
funny little picture,
so you can see instantly.

00:31:53.440 --> 00:31:54.280
So, yeah.

00:31:54.280 --> 00:31:59.840
Whether it looks right,
and it's sort of a little amusing.

00:31:59.850 --> 00:32:03.680
The next acid test to
come out was acid two.

00:32:03.780 --> 00:32:06.560
Safari was the first
browser to pass this,

00:32:06.560 --> 00:32:10.950
but since then, Opera,
and now in their latest beta versions,

00:32:11.060 --> 00:32:14.320
Firefox and IE as well,
also passed this test.

00:32:14.430 --> 00:32:18.170
This test is actually a lot more
challenging than the original acid test.

00:32:18.210 --> 00:32:21.560
It covers not only CSS,
but also many details of

00:32:21.710 --> 00:32:24.240
HTML parsing and functionality.

00:32:24.240 --> 00:32:27.220
It also covers CSS error handling.

00:32:27.220 --> 00:32:30.560
If you do a lot of web development,
you probably know that you often have

00:32:30.610 --> 00:32:35.120
to put in these hacks to work around
certain browsers that may have bugs.

00:32:35.120 --> 00:32:43.650
I'm not going to say which ones,
but its initials are IE.

00:32:43.700 --> 00:32:46.750
So it's very important for browsers
to have interoperable error handlings,

00:32:46.750 --> 00:32:50.230
that when you put in these hacks,
you're sort of trying to go through

00:32:50.230 --> 00:32:52.790
the error handling of the CSS parser.

00:32:52.850 --> 00:32:54.160
And it's very important
to be interoperable.

00:32:54.230 --> 00:32:57.670
on that level.

00:32:58.220 --> 00:33:01.320
And so, this brings us to ACID 3.

00:33:01.450 --> 00:33:03.660
And as you can see,
here's a pretty little picture

00:33:03.660 --> 00:33:05.900
with little rainbow-colored boxes.

00:33:05.900 --> 00:33:09.600
Oh, wait,
that doesn't exactly look right, does it?

00:33:09.720 --> 00:33:13.080
I don't think 41 out of
100 is a very good score.

00:33:13.080 --> 00:33:16.660
Well,
that's what it looked like in Safari 3.0.

00:33:16.660 --> 00:33:20.760
But since then, we've been working on
a lot of improvements.

00:33:20.760 --> 00:33:24.360
And in Safari 3.1,
released earlier this year,

00:33:24.360 --> 00:33:27.730
we improved the output a lot.

00:33:27.760 --> 00:33:29.720
It's looking a lot closer to
how it's supposed to look.

00:33:29.830 --> 00:33:30.760
We fixed many bugs.

00:33:30.810 --> 00:33:34.130
And now, I'm going to give you a quick
demo of what it looks like in

00:33:34.130 --> 00:33:36.180
the Safari 4 developer preview.

00:33:43.860 --> 00:33:51.560
Alrighty, let's just launch
Safari here and go to ACID3.

00:33:51.610 --> 00:33:55.440
And as you can see, pretty picture.

00:33:57.750 --> 00:34:00.160
So let me show you that again.

00:34:00.190 --> 00:34:01.910
There it is.

00:34:02.280 --> 00:34:05.310
So this test,
if you follow the web standards world,

00:34:05.320 --> 00:34:08.100
you probably know there was a lot
of discussion a while ago about

00:34:08.100 --> 00:34:11.490
both Safari and Opera getting
very close on that numeric

00:34:11.490 --> 00:34:13.580
score and also the rendering.

00:34:13.660 --> 00:34:17.020
So this test actually has three
different pass conditions.

00:34:17.020 --> 00:34:19.630
One is getting the 100
out of 100 score there,

00:34:19.630 --> 00:34:22.300
which is passing all the
individual sub-tests.

00:34:22.340 --> 00:34:26.000
But another criterion is
matching the reference rendering.

00:34:26.000 --> 00:34:28.630
And as you can see,
I'm flipping tabs back and forth here,

00:34:28.920 --> 00:34:33.690
and we've got pixel for pixel identical
match for the reference rendering.

00:34:34.100 --> 00:34:38.000
The third pass condition is
smoothness of the animation.

00:34:38.070 --> 00:34:42.430
And this you can sort of test by looking
at the timing of the individual tests.

00:34:42.530 --> 00:34:45.630
And as you can see,
this dialog box reports no timing issues.

00:34:45.890 --> 00:34:53.000
So I would like to announce today the
first browser to fully pass ACID 3,

00:34:53.000 --> 00:34:53.000
the Safari 4 Developer Preview.

00:35:06.400 --> 00:39:19.100
[Transcript missing]

00:39:20.810 --> 00:39:24.700
The final area I'd like to talk
about is new feature highlights.

00:39:24.700 --> 00:39:28.790
There's a bunch of new engine features
for your web content in the Safari 4

00:39:28.830 --> 00:39:31.340
Developer Preview and in iPhone 2.0.

00:39:31.600 --> 00:39:33.160
I'm not going to cover every last one.

00:39:33.250 --> 00:39:40.370
I'm just going to give you a couple of
highlights of some of the most exciting

00:39:40.490 --> 00:39:42.200
ones and tell you about the other
sessions where you can go to learn

00:39:42.200 --> 00:39:42.200
more about different feature areas.

00:39:42.480 --> 00:39:46.380
Some of the areas we've improved
include networking and messaging,

00:39:46.470 --> 00:39:49.400
where we have a lot of
interesting new capabilities.

00:39:49.510 --> 00:39:52.460
Web applications,
lots of things to support offline

00:39:52.920 --> 00:39:55.400
web apps and that kind of good stuff.

00:39:55.690 --> 00:39:58.200
Graphics and media,
an area that's always been

00:39:58.290 --> 00:40:02.080
a strong suit for Apple,
and now we're pushing all the expertise

00:40:02.110 --> 00:40:04.030
we have in this area onto the web.

00:40:04.400 --> 00:40:07.380
And finally, animation,
something that's kind of

00:40:07.380 --> 00:40:10.410
related to graphics and media,
but we think it sort of

00:40:10.410 --> 00:40:12.400
deserves a topic all its own.

00:40:13.620 --> 00:40:16.620
So for networking messaging,
the key thing we're looking to

00:40:16.620 --> 00:40:20.010
deliver is to enable secure mashups.

00:40:20.120 --> 00:40:24.770
Mashups are this new web development
technique that's been popular lately

00:40:24.770 --> 00:40:28.890
that allows you to sort of mix
content from two different sites

00:40:28.890 --> 00:40:32.640
and rearrange it in interesting
ways to sort of create something

00:40:32.640 --> 00:40:34.460
greater than the sum of its parts.

00:40:34.460 --> 00:40:38.420
You may have heard, for example,
a while ago of an application that

00:40:38.430 --> 00:40:42.110
someone made that mixes data from
Craigslist and Google Maps to give

00:40:42.110 --> 00:40:45.380
you sort of a map of apartment
listings in different cities.

00:40:45.500 --> 00:40:50.360
Well, we're introducing two things to
make mashups a whole lot better.

00:40:50.360 --> 00:40:55.220
We're introducing cross-site
XML HTTP requests.

00:40:56.710 --> 00:40:58.220
Thank you.

00:40:58.220 --> 00:41:02.120
This is a-- we've added
security limitations to it,

00:41:02.120 --> 00:41:03.090
so this is opt-in.

00:41:03.140 --> 00:41:06.660
But sites can now publish their
data APIs to be accessible directly

00:41:06.660 --> 00:41:09.180
from the client side on other sites.

00:41:09.180 --> 00:41:13.210
We're also adding
cross-document messaging,

00:41:13.300 --> 00:41:17.100
an API called PostMessage,
which is used for sort of the

00:41:17.100 --> 00:41:19.220
embedding or widget style of mashup.

00:41:19.220 --> 00:41:24.670
You may have seen a lot of sites like,
for example, iGoogle page that can embed

00:41:24.670 --> 00:41:28.500
these mini little applets that
may come from other sites.

00:41:28.530 --> 00:41:31.630
So now we've added an API so they
can securely communicate back and

00:41:31.790 --> 00:41:33.580
forth with their containing web page.

00:41:33.810 --> 00:41:39.130
So this allows you to do a lot richer
things with these kind of web widgets.

00:41:40.430 --> 00:41:45.020
and a session where you can go to
learn more about this is session 403,

00:41:45.020 --> 00:41:47.950
Using Advanced Ajax
Technologies in Safari.

00:41:47.950 --> 00:41:49.800
That's coming up Thursday.

00:41:49.910 --> 00:41:56.940
If you just write down the number,
you'll hopefully see it on the screens.

00:41:56.960 --> 00:42:00.810
And this will also cover a lot more
interesting Ajax-related stuff.

00:42:00.810 --> 00:42:00.810
So if you work a lot in that area,
you'll be interested in this session.

00:42:01.150 --> 00:42:06.650
Next topic I'd like to talk about
is next generation web apps.

00:42:06.660 --> 00:42:11.360
And we have actually two kinds
of features that we're bringing

00:42:11.620 --> 00:42:13.720
to enable better web apps.

00:42:14.080 --> 00:42:16.460
Some of these are features that
are in the WebKit engine itself,

00:42:16.560 --> 00:42:18.330
and others are in the Safari application.

00:42:18.330 --> 00:42:20.520
I'm going to talk about both of those.

00:42:20.770 --> 00:42:27.960
So for engine features, first feature we
introduced is offline data,

00:42:28.230 --> 00:42:32.750
a SQL database that you
can use for local storage,

00:42:32.750 --> 00:42:36.460
which enables all your data to be
stored directly on the client machine.

00:42:36.500 --> 00:42:40.660
This is available both on the desktop
versions of Safari and on iPhone,

00:42:40.660 --> 00:42:43.500
with iPhone 2.0 and Safari 3.1.

00:42:43.500 --> 00:42:45.880
So you can use it across the
whole range of platforms.

00:42:46.100 --> 00:42:48.980
And we think this is going to enable
a lot of really interesting things.

00:42:48.980 --> 00:42:50.180
It's giving you a huge
amount of functionality.

00:42:50.180 --> 00:42:50.180
So for engine features,
the first feature we

00:42:50.180 --> 00:42:50.180
introduced is offline data,
a SQL database that you

00:42:50.180 --> 00:42:50.180
can use for local storage,
which enables all your data to be

00:42:50.180 --> 00:42:50.180
stored directly on the client machine.

00:42:50.180 --> 00:42:50.180
This is available both on the desktop
versions of Safari and on iPhone,

00:42:50.180 --> 00:42:50.180
with iPhone 2.0 and Safari 3.1.

00:42:50.180 --> 00:42:50.180
So you can use it across the
whole range of platforms.

00:42:50.180 --> 00:42:50.180
And we think this is going to enable
a lot of really interesting things.

00:42:50.180 --> 00:42:50.220
It's giving you a huge
amount of functionality.

00:42:50.280 --> 00:42:52.710
It's giving you a huge amount of
rich structured storage that goes way

00:42:52.710 --> 00:42:54.200
beyond what you can do with cookies.

00:42:54.220 --> 00:42:54.220
It's giving you a huge amount of
rich structured storage that goes way

00:42:54.220 --> 00:42:54.300
beyond what you can do with cookies.

00:42:54.300 --> 00:43:00.120
A new feature that we're announcing today
is support for offline applications.

00:43:00.180 --> 00:43:03.140
This is new in the
Safari 4 developer preview.

00:43:03.140 --> 00:43:07.440
This is very similar to the
functionality provided by Google Gears.

00:43:07.440 --> 00:43:11.500
And we've worked with the Gears team to
make this a part of the HTML5 standard.

00:43:11.500 --> 00:43:16.260
The way this technology works is that
you just simply provide a manifest for

00:43:16.420 --> 00:43:20.950
your application and now automatically,
the first time the user

00:43:20.970 --> 00:43:24.500
visits your web app,
all of the resources that make it up,

00:43:24.520 --> 00:43:29.000
the HTML, the CSS, the JavaScript,
and so forth, will be cached locally

00:43:29.000 --> 00:43:31.180
and it will work offline,
transparently.

00:43:31.270 --> 00:43:35.990
Combined with the offline data storage,
you can use this to build full

00:43:36.230 --> 00:43:38.900
offline experiences that work
just like your real web app.

00:43:39.060 --> 00:43:42.510
Just the app works offline,
you can store the data offline,

00:43:42.510 --> 00:43:44.650
and you can sync it up the
next time the user connects.

00:43:44.720 --> 00:43:49.180
We also have Safari level features
that can make web apps better.

00:43:49.370 --> 00:43:55.270
So, a while ago,
we introduced Web Clip on the iPhone,

00:43:55.420 --> 00:43:58.660
which lets you put any website
directly on your home screen

00:43:58.660 --> 00:44:02.200
with its own custom icon,
allowing users to sort of treat different

00:44:02.200 --> 00:44:06.020
websites pretty much the same as they
would the native apps of the iPhone.

00:44:06.020 --> 00:44:09.150
That makes it fit a lot more smoothly
into the UI because you don't have

00:44:09.250 --> 00:44:12.580
to first launch Safari and then go to
bookmarks and then pick the right thing.

00:44:12.660 --> 00:44:16.280
So today,
with the Safari 4 developer preview,

00:44:16.460 --> 00:44:18.900
we're announcing desktop web apps.

00:44:18.990 --> 00:44:23.260
This is a feature very similar to
what you get with Mozilla Prism.

00:44:23.340 --> 00:44:27.550
You can have your own custom icons
for different applications on the

00:44:27.550 --> 00:44:31.340
dock and launch them directly without
having to go through the browser.

00:44:31.410 --> 00:44:34.840
And I would like to give you a
quick demo of that right now.

00:44:39.740 --> 00:44:41.440
Alrighty.

00:44:41.850 --> 00:44:46.790
Well,
this is kind of too boring to be an app,

00:44:46.790 --> 00:44:46.800
but...

00:44:48.320 --> 00:44:52.440
I read the Surf and Safari web blog,
which follows WebKit development a lot.

00:44:52.590 --> 00:44:55.440
I think I'd like to have
that right on my dock.

00:44:55.580 --> 00:44:59.690
So I'm just going to go to the File menu
and pick Save as Web Application.

00:45:00.120 --> 00:45:02.410
and boom, there it is.

00:45:02.780 --> 00:45:07.560
Custom icon, custom name,
and we've introduced a few markup

00:45:07.560 --> 00:45:11.030
level features that let you easily
set up your web applications

00:45:11.130 --> 00:45:11.860
to be launched from the dock.

00:45:11.970 --> 00:45:17.620
So I'm just going to quit Safari here.

00:45:17.620 --> 00:45:21.530
Safari's not even running.

00:45:21.530 --> 00:45:21.530
And there it is.

00:45:21.530 --> 00:45:21.530
I got my own app for surfing Safari.

00:45:22.760 --> 00:45:26.450
Tragically, one of the things that's not
in the distraction-free custom

00:45:26.450 --> 00:45:27.940
web app UI is view source.

00:45:27.940 --> 00:45:31.600
So I'm going to go back to Safari and
show you the very simple things

00:45:31.600 --> 00:45:36.770
I did to have a custom application
name and icon for this site.

00:45:39.280 --> 00:45:41.630
Alrighty,
here's the application name line.

00:45:41.720 --> 00:45:44.000
All you have to do is add one meta tag.

00:45:44.030 --> 00:45:47.800
Meta name equals application name,
content equals surf and Safari.

00:45:47.830 --> 00:45:50.600
A lot of sites have very
long titles that may indicate

00:45:50.670 --> 00:45:52.690
things like status information,
like unread count.

00:45:52.700 --> 00:45:54.800
So this is a way to have
a short name for the app,

00:45:54.870 --> 00:45:58.100
which is what appears in the
doc and on the file system.

00:45:58.130 --> 00:46:00.360
And multi-size icons.

00:46:00.530 --> 00:46:04.380
You can have a real ICNS file
just like you do for Mac apps,

00:46:04.420 --> 00:46:07.990
which lets it resize nicely in the doc.

00:46:08.200 --> 00:46:13.800
[Transcript missing]

00:46:14.540 --> 00:46:20.090
This is just the beginning of what
it takes to make web applications

00:46:21.240 --> 00:46:22.550
feel more like native apps.

00:46:22.550 --> 00:46:25.880
But we think this is a
really exciting direction.

00:46:25.910 --> 00:46:30.830
And now, on the desktop too,
users aren't going to have to go through

00:46:30.830 --> 00:46:33.880
the browser to get to your web apps.

00:46:34.040 --> 00:46:38.810
They'll be able to save as web
application and have an icon straight

00:46:38.940 --> 00:46:41.820
on their dock to launch your web app.

00:46:41.820 --> 00:46:42.900
All righty.

00:46:42.900 --> 00:46:43.510
Is it for demo?

00:46:50.500 --> 00:46:55.130
And let's move on.

00:46:55.260 --> 00:46:59.100
So sessions where you can-- oh,
there was my demo slide.

00:46:59.100 --> 00:47:00.320
OK.

00:47:01.040 --> 00:47:03.440
Sessions where you can
learn more about this.

00:47:03.560 --> 00:47:08.010
Session 411,
Utilizing Offline Data in Safari,

00:47:08.280 --> 00:47:12.320
will tell you a lot
about the application,

00:47:12.440 --> 00:47:15.540
offline data,
and standalone web app features.

00:47:15.600 --> 00:47:18.250
The standalone web app
feature I just demoed.

00:47:18.390 --> 00:47:21.040
You can learn how to enable
them for your web apps.

00:47:21.050 --> 00:47:23.680
And that's coming up on Thursday.

00:47:23.690 --> 00:47:26.280
The other session, unfortunately-- no,
wait.

00:47:26.380 --> 00:47:27.080
Still coming up.

00:47:27.150 --> 00:47:32.120
Session 352 on Wednesday will
tell you a lot about different

00:47:32.290 --> 00:47:33.660
iPhone development techniques.

00:47:33.660 --> 00:47:36.850
And that'll tell you how you
can use a lot of these web app

00:47:36.960 --> 00:47:39.290
related features on iPhone.

00:47:40.580 --> 00:47:43.480
Next topic I'd like to talk about:
graphics and media.

00:47:43.870 --> 00:47:47.560
So we like to let you do cool stuff.

00:47:47.560 --> 00:47:51.030
We like to let you make apps that
look really smooth and polished

00:47:51.550 --> 00:47:57.770
and that just make people say "wow"
just the moment they first see it.

00:47:57.770 --> 00:47:57.770
So,

00:47:58.230 --> 00:48:00.150
We're introducing a lot of features.

00:48:00.480 --> 00:48:03.080
Starting with Safari 3.1,
we support the audio and

00:48:03.160 --> 00:48:06.160
video elements from HTML5.

00:48:06.180 --> 00:48:09.040
These make media a first-class
citizen of the web.

00:48:09.080 --> 00:48:11.280
There are no plugins required.

00:48:11.360 --> 00:48:14.600
Directly part of HTML,
you can reference video and audio files

00:48:14.600 --> 00:48:19.010
and you have your choice of built-in
controls or a rich scripting API that

00:48:19.010 --> 00:48:23.500
you can use to put audio and video in
your web applications and documents

00:48:23.780 --> 00:48:26.500
and give a rich user experience.

00:48:26.540 --> 00:48:29.040
We also support SVG as an image.

00:48:29.040 --> 00:48:31.260
SVG is a technology.

00:48:31.630 --> 00:48:35.600
It stands for Scalable Vector Graphics,
and it's sort of a format

00:48:35.600 --> 00:48:39.500
similar to PDF or Illustrator
in that it has a vector-based

00:48:39.500 --> 00:48:41.680
scalable description of an image.

00:48:41.690 --> 00:48:45.530
And we're now allowing you to use
it in the image element or anywhere

00:48:45.620 --> 00:48:46.930
that CSS images are allowed.

00:48:47.100 --> 00:48:51.600
So that means if you want to have
a fancy scalable background--

00:48:53.630 --> 00:48:55.570
All right, thank you, thank you.

00:48:55.820 --> 00:48:59.020
If you want to have a
fancy scalable background,

00:48:59.070 --> 00:49:01.600
you don't have to waste a lot of
bandwidth to send a giant image,

00:49:01.610 --> 00:49:05.240
you can just have the simple XML file
that describes what it should look like.

00:49:05.380 --> 00:49:13.590
And a lot of the kinds of things you do
will totally fit into a very small SVG.

00:49:13.680 --> 00:49:17.850
And that's in Safari 3.1,
so you can use it today.

00:49:17.950 --> 00:49:20.720
Next thing we're offering
is Canvas Bitmap Access.

00:49:20.760 --> 00:49:23.580
This is going to allow
a lot of amazing things.

00:49:23.790 --> 00:49:27.340
Apple first introduced the
Canvas element to HTML.

00:49:27.530 --> 00:49:30.360
It's now part of the HTML5 standard.

00:49:30.400 --> 00:49:33.570
And we will now be allowing
you to directly get at the

00:49:33.840 --> 00:49:36.030
pixels inside the Canvas,
which actually,

00:49:36.320 --> 00:49:39.650
with our new faster JavaScript engine,
lets you do client-side

00:49:39.900 --> 00:49:41.970
image filter effects.

00:49:42.160 --> 00:49:44.160
And this is really amazing.

00:49:44.340 --> 00:49:48.950
And when you see the session on this,
you will not believe that you can do

00:49:49.010 --> 00:49:50.690
those kinds of things in JavaScript.

00:49:51.370 --> 00:49:57.420
The final thing is Advanced CSS.

00:49:57.420 --> 00:50:00.150
We supported all the
CSS basics for a long time.

00:50:00.160 --> 00:50:01.840
We like to push the envelope.

00:50:01.840 --> 00:50:04.250
In the Safari 4 developer preview,
we're going to have a lot

00:50:04.250 --> 00:50:06.220
of awesome new CSS stuff.

00:50:06.220 --> 00:50:09.300
We are supporting
gradients directly in CSS.

00:50:09.430 --> 00:50:14.300
So no more need to send custom images
just to have a gradient background.

00:50:14.300 --> 00:50:16.020
We know those are very popular.

00:50:16.020 --> 00:50:18.480
Now there's direct CSS syntax for it.

00:50:18.480 --> 00:50:20.980
We support masking,
which lets you put little shaped

00:50:20.980 --> 00:50:24.150
masks around your images or
put rounded corners on things,

00:50:24.320 --> 00:50:26.220
all sorts of cool stuff.

00:50:26.230 --> 00:50:28.330
And we support reflections.

00:50:28.480 --> 00:50:31.100
No Web 2.0 app is complete
without reflections.

00:50:31.120 --> 00:50:35.610
Now you don't have to draw
a custom image to do it.

00:50:36.920 --> 00:50:41.610
All right, and a final topic-- OK,
the sessions about this topic

00:50:41.880 --> 00:50:46.110
where you can learn more are 344,
Adding Rich Graphics and Media,

00:50:46.270 --> 00:50:49.620
which will have those mind-blowing
demos that I talked about.

00:50:49.640 --> 00:50:51.410
That's coming up this afternoon.

00:50:51.500 --> 00:50:52.640
Don't miss it.

00:50:52.660 --> 00:50:55.680
And another session,
preparing and delivering

00:50:55.770 --> 00:50:58.010
video for iPhones,
Safari, and Apple TV,

00:50:58.080 --> 00:51:01.080
where you can learn about how to
construct your media files to be usable

00:51:01.080 --> 00:51:06.100
with this new video element to work great
on iPhone and all our desktop platforms.

00:51:06.480 --> 00:51:12.250
So make sure to note these sessions,
and you will see lots of cool stuff.

00:51:12.650 --> 00:51:16.620
Final topic I'd like to
talk about is animation.

00:51:16.710 --> 00:51:22.180
So in native UI, on the desktop,
and on the iPhone,

00:51:22.180 --> 00:51:25.430
animation is becoming sort of
a fundamental paradigm of UI.

00:51:25.440 --> 00:51:28.040
You don't just automatically
switch things and have things

00:51:28.040 --> 00:51:29.040
jerk around on the user.

00:51:29.040 --> 00:51:33.500
Everybody wants nice, smooth,
flowing animations.

00:51:33.500 --> 00:51:36.620
And this is becoming very
popular on the web too.

00:51:36.620 --> 00:51:41.020
And a lot of JavaScript libraries
have been written with tons of code

00:51:41.130 --> 00:51:43.460
to animate your interface elements.

00:51:43.460 --> 00:51:48.320
And we think that you can do a lot
better by providing native animation

00:51:48.320 --> 00:51:51.310
capabilities in the browser so you
don't have to have these piles of

00:51:51.400 --> 00:51:54.240
script code just to do basic animations.

00:51:54.250 --> 00:51:57.860
So the first feature we're introducing
in this area is SVG animation in

00:51:58.170 --> 00:52:00.810
the Safari for Developer preview.

00:52:00.920 --> 00:52:04.160
This is a standards-based
technology that's part of SVG.

00:52:04.160 --> 00:52:08.540
It sort of lets you make your vector
graphics animate different parts of it.

00:52:08.560 --> 00:52:10.930
And it's sort of like the vector
equivalent of an animated GIF.

00:52:11.120 --> 00:52:14.870
You can use it for lots of cool stuff.

00:52:14.890 --> 00:52:18.740
But we think that doesn't go far enough,
because SVG is a great technology.

00:52:18.830 --> 00:52:21.540
But most of you are
building with HTML and CSS.

00:52:21.700 --> 00:52:23.740
And you'd sort of like to
animate the content that's

00:52:23.740 --> 00:52:25.600
already in your web application.

00:52:25.660 --> 00:52:30.800
So we're introducing CSS transitions
on both desktop and iPhone.

00:52:30.800 --> 00:52:34.800
This is a very powerful
technology that lets you,

00:52:34.800 --> 00:52:40.510
with very simple CSS syntax,
animate a transition.

00:52:41.120 --> 00:52:44.530
from one UI state to another.

00:52:44.960 --> 00:52:50.700
We're also introducing CSS transforms,
which provide you the full range of

00:52:50.810 --> 00:52:52.800
affine transforms with CSS syntax.

00:52:52.800 --> 00:52:56.830
You can rotate things,
you can scale them, you can skew them.

00:52:57.000 --> 00:53:00.120
And these go great with the
transitions because often a

00:53:00.120 --> 00:53:04.300
rotation or a scale is just the kind
of thing that you want to animate.

00:53:04.410 --> 00:53:07.690
So just to give you a taste of what
you can do with these technologies,

00:53:07.840 --> 00:53:12.800
I'm going to do a quick demo of
CSS transitions and transforms.

00:53:19.350 --> 00:53:25.880
All righty, so I've made this quickie
demo of features in Leopard.

00:53:25.880 --> 00:53:28.240
I know it's a little dated now
that Snow Leopard's been announced,

00:53:28.430 --> 00:53:29.780
but, you know, it was secret.

00:53:29.790 --> 00:53:31.780
So this is the best you can do.

00:53:31.780 --> 00:53:35.620
And as you can see, as I hover over these
different menu items,

00:53:35.690 --> 00:53:39.200
they animate smoothly and zoom out.

00:53:39.200 --> 00:53:40.780
When I click on them, the color changes.

00:53:40.880 --> 00:53:42.300
That's also animated smoothly.

00:53:42.300 --> 00:53:46.520
And as you can see,
the image there is rotated.

00:53:46.520 --> 00:53:50.000
So there's a couple of great things
about this besides just the basic thing.

00:53:50.000 --> 00:53:53.310
One is that I'm doing this
all in straight HTML and CSS.

00:53:53.360 --> 00:53:56.800
There's no fancy plug-ins required
just to get this kind of nice,

00:53:56.800 --> 00:53:58.260
smooth, animated UI.

00:53:58.260 --> 00:54:01.680
No piles of JavaScript.

00:54:01.680 --> 00:54:06.650
The other nice thing about
it is how easy it is to do.

00:54:06.870 --> 00:54:12.690
My HTML is extremely simple here,
and if you give me a moment

00:54:12.690 --> 00:54:16.380
to go to the CSS file,
I've had to add very little CSS to

00:54:16.510 --> 00:54:18.480
get these transitions to animate.

00:54:18.480 --> 00:54:20.200
Basically, this is it.

00:54:20.240 --> 00:54:24.500
Just give WebKit transition duration,
WebKit transition function,

00:54:24.520 --> 00:54:29.310
and now when you change the class
on an element and its style changes,

00:54:29.440 --> 00:54:33.510
we'll automatically interpolate
the states and give you a

00:54:33.510 --> 00:54:33.890
nice-looking transition.

00:54:33.890 --> 00:54:33.890
So...

00:54:38.990 --> 00:54:39.960
That's how easy it is.

00:54:40.130 --> 00:54:42.370
It works right with
your CSS-based design.

00:54:42.410 --> 00:54:48.380
Sure.

00:54:53.270 --> 00:54:53.930
TextZoom.

00:54:54.200 --> 00:55:01.770
That is basically all I had to add,
those two lines,

00:55:01.770 --> 00:55:06.700
to this CSS rule to get it to animate.

00:55:07.300 --> 00:55:12.400
And so you've got the starting
background color here.

00:55:12.450 --> 00:55:16.760
And as you can see,
all I've done to affect the transition

00:55:16.810 --> 00:55:18.860
is there's also this hover rule.

00:55:18.860 --> 00:55:20.820
This works natively with CSS Hover.

00:55:20.820 --> 00:55:24.290
And it just adds the styles that changed.

00:55:24.410 --> 00:55:28.060
And the transition rules make
these automatically interpolate

00:55:28.290 --> 00:55:31.260
and animate in a smooth way,
not a jerky way.

00:55:31.300 --> 00:55:37.690
So if you want to see what
the markup looks like,

00:55:38.830 --> 00:55:43.530
This is all clean semantic HTML markup.

00:55:43.530 --> 00:55:44.570
I didn't crup this up.

00:55:44.570 --> 00:55:47.980
As you can see,
I just got an H1 element for the header.

00:55:48.000 --> 00:55:49.700
Everything here is an unordered list.

00:55:49.700 --> 00:55:52.830
In fact, if you try viewing this
page without a style sheet,

00:55:52.830 --> 00:55:55.170
we'll be releasing the
code for this demo.

00:55:55.270 --> 00:55:58.030
If you view this page
without a style sheet,

00:55:58.080 --> 00:56:00.950
you can see that it's
perfectly clean HTML,

00:56:00.950 --> 00:56:05.480
works great with accessibility,
works great with search engines,

00:56:05.480 --> 00:56:05.890
and all that good stuff.

00:56:05.890 --> 00:56:05.890
So there you go.

00:56:12.990 --> 00:56:14.930
Alrighty.

00:56:15.150 --> 00:56:17.120
And I'm sure you'll be wanting
to learn more about these

00:56:17.200 --> 00:56:18.790
new animation technologies.

00:56:19.120 --> 00:56:25.110
So you can learn later this afternoon
in Creating Rich User Interfaces for

00:56:25.260 --> 00:56:29.500
Web Content in Safari about this new
animation stuff and a whole lot more.

00:56:29.680 --> 00:56:34.620
And on Wednesday,
you can learn about how you

00:56:34.730 --> 00:56:41.200
can apply these technologies
to your iPhone web apps.

00:56:41.200 --> 00:56:41.310
So to sum up,

00:56:41.500 --> 00:56:43.610
The message I'd like to
leave you with is this:

00:56:43.790 --> 00:56:46.400
WebKit is the future of web technology.

00:56:46.400 --> 00:56:51.200
We're pushing ahead on standards,
performance, features and functionality,

00:56:51.280 --> 00:56:54.660
and we're really pushing
the envelope on the web.

00:56:54.740 --> 00:57:01.300
And we hope that you enjoy using
this new stuff in your apps.

00:57:01.300 --> 00:57:01.300
And now I'd like to hand
it back to Darin Adler.

00:57:08.120 --> 00:57:12.410
So just before we go and do Q&A,
I just want to remind you a little bit

00:57:12.420 --> 00:57:17.240
more about what was in this session
and what's coming up this week.

00:57:17.490 --> 00:57:19.400
So we talked a little bit
about Safari and WebKit,

00:57:19.400 --> 00:57:21.800
WebKit, the engine inside Safari.

00:57:21.840 --> 00:57:25.800
We talked about our open development
model and this list of new features.

00:57:25.920 --> 00:57:29.440
And I want you to understand the
relationship between these things.

00:57:29.490 --> 00:57:33.150
The way our development works and the
reason we're able to do so much great new

00:57:33.340 --> 00:57:37.300
stuff is the rapid progress we can make
because of the open development model and

00:57:37.300 --> 00:57:39.520
the way that we approach it with testing.

00:57:39.570 --> 00:57:44.920
And that directly translates to
more good stuff for you to use.

00:57:45.100 --> 00:57:47.330
But even going beyond that,

00:57:48.030 --> 00:57:51.390
our work is intertwined
with the standards work.

00:57:51.560 --> 00:57:53.540
And so these things
that you see in WebKit,

00:57:53.540 --> 00:57:56.050
and you see them in WebKit first,
eventually the other

00:57:56.050 --> 00:57:57.260
browser engines catch up.

00:57:57.260 --> 00:58:00.380
A long time ago,
ACID 2 was only passing in WebKit.

00:58:00.380 --> 00:58:02.480
Now the other browser
engines are catching up.

00:58:02.520 --> 00:58:05.660
The same thing will happen with ACID 3,
and the same thing will happen with

00:58:05.660 --> 00:58:07.780
these other kinds of innovations.

00:58:07.850 --> 00:58:11.950
So on that note,
I'd like to remind you that

00:58:12.280 --> 00:58:16.890
you can get more information
by talking to our evangelists,

00:58:16.890 --> 00:58:20.150
Vicki Murley and Mark Malone.

00:58:20.400 --> 00:58:25.000
and I'd like to ask the other speakers
and Vicki Murli to come up for Q&A.