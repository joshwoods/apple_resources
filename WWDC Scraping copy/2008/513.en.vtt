WEBVTT

00:00:20.130 --> 00:00:22.320
Good morning.

00:00:22.480 --> 00:00:27.380
Welcome to Session 513,
System-Wide Previews with Quick Look.

00:00:27.440 --> 00:00:30.000
My name is Jean-Pierre Ciudaad,
and I'm a member of the

00:00:30.070 --> 00:00:32.410
Quick Look engineering team.

00:00:32.560 --> 00:00:35.430
So what we're going to talk
about today is a new technology

00:00:35.550 --> 00:00:37.080
in Leopard called Quick Look.

00:00:37.080 --> 00:00:39.570
We're going to see what
Quick Look really is,

00:00:39.570 --> 00:00:43.650
we're going to see how it works,
and how you can take advantage

00:00:43.650 --> 00:00:45.080
of it in your applications.

00:00:47.260 --> 00:00:49.700
So let's start with what is Quick Look.

00:00:49.940 --> 00:00:55.390
So Quick Look is a technology that helps
the users identify their documents.

00:00:55.750 --> 00:01:00.510
The way we do this is by providing
thumbnails and icons of all the

00:01:00.560 --> 00:01:04.780
different document types in the system,
and also by providing

00:01:04.780 --> 00:01:07.460
previews of the documents.

00:01:07.590 --> 00:01:10.220
So those previews appear in
the Quick Look preview panel,

00:01:10.370 --> 00:01:18.260
and they can be pictures,
they can be movies, they can be PDFs,

00:01:18.330 --> 00:01:21.870
or they can be text or HTML documents.

00:01:23.450 --> 00:01:26.740
So Quick Look is essentially
about navigation.

00:01:26.990 --> 00:01:29.240
It's not about editing documents.

00:01:29.250 --> 00:01:33.410
If the user wants to edit his document,
he has to open the application

00:01:33.460 --> 00:01:38.360
that is used to edit that
document and not use Quick Look.

00:01:38.370 --> 00:01:40.870
So strictly about navigation.

00:01:42.380 --> 00:01:45.180
So you're probably all familiar
with Quick Look already if

00:01:45.180 --> 00:01:47.520
you've been using Leopard.

00:01:47.880 --> 00:01:52.560
Finder, starting with Leopard,
has been using Quick Look extensively.

00:01:52.590 --> 00:01:55.090
In fact, prior to Leopard,

00:01:55.330 --> 00:01:59.590
Most Finder windows were
displaying generic icons.

00:01:59.710 --> 00:02:03.600
In Leopard, you started seeing
thumbnails of the documents,

00:02:03.600 --> 00:02:06.540
sorry, icons of the documents,
I should say.

00:02:06.690 --> 00:02:11.040
But the regular icon mode in Finder is
not the only place that uses Quick Look.

00:02:11.090 --> 00:02:13.860
Quick Look is also
used in CoverFlow View,

00:02:13.940 --> 00:02:17.370
which displays thumbnails,
or also when you press the

00:02:17.370 --> 00:02:20.110
space bar on a document,
you actually can see the

00:02:20.130 --> 00:02:23.990
Quick Look preview panel that
shows you the content of the file.

00:02:25.170 --> 00:02:28.140
Other applications in
Leopard also use Quick Look.

00:02:28.170 --> 00:02:31.840
Mail, iCal,
both use Quick Look to actually

00:02:31.850 --> 00:02:34.760
display previews of the attachments.

00:02:35.480 --> 00:02:39.310
In addition to that,
iChat also uses Quick Look.

00:02:39.580 --> 00:02:44.760
In Leopard, we introduced iChat Theater,
and iChat Theater actually uses

00:02:44.760 --> 00:02:50.720
Quick Look to obtain the content of the
document and send it across the wire.

00:02:50.800 --> 00:02:53.610
So essentially there,
if you provide a Quick Look plugin

00:02:54.240 --> 00:02:56.930
for your document types,
you will enable your

00:02:56.960 --> 00:02:58.460
document for iChat Theater.

00:02:58.570 --> 00:03:00.740
That's all you will have to do.

00:03:01.700 --> 00:03:04.820
And of course,
we hope that for Snow Leopard,

00:03:04.820 --> 00:03:08.820
Quick Look will be in
your application as well.

00:03:08.820 --> 00:03:11.060
And that's what we're
going to talk about.

00:03:11.150 --> 00:03:13.060
So how does it work?

00:03:13.100 --> 00:03:16.600
Well, Quick Look is really divided
into two functional parts.

00:03:16.700 --> 00:03:20.010
The first part is the
producer side of Quick Look,

00:03:20.010 --> 00:03:22.940
which tells Quick Look how
to read a file.

00:03:23.410 --> 00:03:28.700
The second part is the consumer side,
which displays the content of the file

00:03:28.700 --> 00:03:31.530
or the thumbnail in your application.

00:03:31.600 --> 00:03:35.710
So let's look a little bit
more at the producer side.

00:03:36.100 --> 00:03:38.930
The producer side of
Quick Look translates

00:03:39.000 --> 00:03:41.950
complex document types,
not into French,

00:03:42.040 --> 00:03:46.400
but into a set of known formats that
Quick Look knows how to display.

00:03:46.400 --> 00:03:53.590
So these formats can be HTML, PDF, text,
images, or movies.

00:03:54.490 --> 00:04:00.750
The way this works is by using plugins
that developers like you provide,

00:04:00.860 --> 00:04:03.110
and those plugins know
how to read the file.

00:04:03.410 --> 00:04:07.900
They are loaded on demand
and executed on demand.

00:04:08.030 --> 00:04:11.540
In order to write a plugin,
you can just use an Xcode template

00:04:11.540 --> 00:04:13.590
that is provided in Leopard.

00:04:15.660 --> 00:04:19.690
On the consumer side of Quick Look,
you can use the consumer side

00:04:19.790 --> 00:04:25.000
to display thumbnails and
icons within your application.

00:04:25.000 --> 00:04:29.340
You can also, starting in still Leopard,
you can open the Quick Look preview

00:04:29.340 --> 00:04:32.930
panel and show previews of documents.

00:04:33.080 --> 00:04:35.290
The way you do this is by
using the Quartz framework,

00:04:35.350 --> 00:04:38.310
and we're going to go into
more details for that.

00:04:39.590 --> 00:04:40.900
So what are your options?

00:04:40.940 --> 00:04:42.230
Your options are simple.

00:04:42.460 --> 00:04:46.170
You can either be a producer,
or you can just be a consumer,

00:04:46.310 --> 00:04:48.280
or you can be both.

00:04:48.320 --> 00:04:52.540
What we would prefer is that,
first and foremost,

00:04:52.540 --> 00:04:53.540
you become a producer.

00:04:53.540 --> 00:04:56.750
If you own the document types,
it is important that you write

00:04:56.780 --> 00:05:01.940
a Quick Look plugin so that your
icons and your thumbnails will be

00:05:01.950 --> 00:05:04.160
available everywhere in the system.

00:05:04.160 --> 00:05:08.490
It will be available system-wide
everywhere that uses Quick Look.

00:05:10.110 --> 00:05:13.430
If you want to become a consumer,
you will be able to display icons

00:05:13.510 --> 00:05:18.160
and thumbnails of all document
types within your application.

00:05:19.680 --> 00:05:25.360
So now to tell us more and more details
how to become a Quick Look producer,

00:05:25.360 --> 00:05:27.110
I'd like to introduce
Quick Look superstar,

00:05:27.110 --> 00:05:27.800
Julien Jalon.

00:05:27.800 --> 00:05:30.790
Julien Jaalon: Thank you, Jean-Pierre.

00:05:34.160 --> 00:05:35.200
Good morning.

00:05:35.310 --> 00:05:37.800
So we'll first talk about the
producer side of Quick Look,

00:05:38.030 --> 00:05:40.510
which is a very important
part of Quick Look,

00:05:40.650 --> 00:05:44.760
because Quick Look's goal is really
to display any kind of document.

00:05:44.920 --> 00:05:47.990
And this includes your own document.

00:05:48.150 --> 00:05:52.160
And to do that, you have to become a
producer for Quick Look.

00:05:52.290 --> 00:05:54.810
And you can do that by
providing a Quick Look plugin.

00:05:55.050 --> 00:05:59.920
And we'll see how to write
a Quick Look plugin today.

00:05:59.940 --> 00:06:00.230
And you will see that it's quite simple.

00:06:00.700 --> 00:06:04.840
Before going into more details,
you have to understand that your plugin

00:06:04.840 --> 00:06:09.440
will be hosted in a small process that
will act as a sandbox to the consumer.

00:06:09.660 --> 00:06:14.490
This means that your plugin will
have to play by the process rules,

00:06:14.550 --> 00:06:17.600
which means it has to be universal.

00:06:17.740 --> 00:06:21.400
Starting with no Leopard,
it has to be 64-bit,

00:06:21.540 --> 00:06:24.790
and also you won't have
access to garbage collection.

00:06:25.080 --> 00:06:31.000
So, let's see the different key points
of writing a Quick Look plugin.

00:06:31.030 --> 00:06:34.400
You have basically three
things to remember.

00:06:34.430 --> 00:06:38.660
The first thing is that Quick Look should
be able to identify your document type.

00:06:38.770 --> 00:06:41.840
The second thing is that you
have to make sure Quick Look is

00:06:41.850 --> 00:06:43.460
able to find your plugin.

00:06:43.500 --> 00:06:48.780
And the third point is, of course,
to do the actual job,

00:06:48.780 --> 00:06:50.910
translate your document to
something Quick Look understands.

00:06:52.140 --> 00:06:57.440
So, first point, make sure Quick Look can
identify your document.

00:06:57.460 --> 00:06:59.870
And in fact,
it's not specific to Quick Look.

00:07:00.070 --> 00:07:03.520
It's something that has to be
done for all kind of stuff,

00:07:03.520 --> 00:07:06.450
like Spotlight,
and even for opening your document

00:07:06.530 --> 00:07:08.540
with the proper application.

00:07:08.590 --> 00:07:11.060
So to do that,
you have to make sure your application

00:07:11.060 --> 00:07:14.780
registers your document type to
the system-wide typing database,

00:07:14.780 --> 00:07:17.440
which is Launch Services.

00:07:18.490 --> 00:07:21.330
You do that in the
application's Info.plist.

00:07:21.500 --> 00:07:24.640
What you have to declare is
what we call a type identifier,

00:07:24.680 --> 00:07:27.800
which will be the reference
to your document type.

00:07:27.840 --> 00:07:30.550
In your Info.plist file,
you will also declare

00:07:30.610 --> 00:07:33.720
how to identify the file,
what is the icon of the file,

00:07:33.820 --> 00:07:36.510
the generic icon, and stuff like that.

00:07:37.750 --> 00:07:43.570
As a side note, it's possible to ship a
Quick Look plugin standalone,

00:07:43.590 --> 00:07:45.150
without your application.

00:07:45.280 --> 00:07:48.700
So if you want to do that,
you might have to declare the

00:07:48.950 --> 00:07:52.090
document type directly in the plugin.

00:07:52.090 --> 00:07:52.090
And you can do that

00:07:52.220 --> 00:07:56.530
For more information,
I really recommend that you get

00:07:56.600 --> 00:08:01.460
a look at the Xcode documentation
about uniform type identifiers.

00:08:03.850 --> 00:08:08.850
OK, second point,
Quick Look has to find your plugin.

00:08:08.940 --> 00:08:10.460
And to do that,
you have to make sure your

00:08:10.580 --> 00:08:13.140
plugin is in a well-known place.

00:08:13.160 --> 00:08:15.970
Basically,
you want to include your plugin directly

00:08:16.180 --> 00:08:21.260
in your application's bundle in contents,
library, Quick Look.

00:08:21.280 --> 00:08:23.700
And this is a great way
to distribute your plugin,

00:08:23.700 --> 00:08:26.160
because you don't have to
care about installation.

00:08:26.370 --> 00:08:28.900
Your application is totally
standalone for the user.

00:08:29.100 --> 00:08:32.690
It does not have to see that
there are plugins inside it.

00:08:32.910 --> 00:08:36.860
But if you plan to ship your plugin
standalone without the application,

00:08:36.870 --> 00:08:41.780
you can install it in /library/quicklook,
and Quick Look will be able to

00:08:41.780 --> 00:08:44.090
use it as a system-wide plugin.

00:08:44.820 --> 00:08:47.700
The second thing, of course,
is to tell Quick Look that your

00:08:47.700 --> 00:08:49.940
plugin is handling your document type.

00:08:50.000 --> 00:08:56.410
And you do that by declaring the
binding in the plugin Info.plist.

00:08:56.940 --> 00:08:59.500
So you will use the document
identifier you declared in your

00:08:59.500 --> 00:09:03.740
application in your plugins Info.plist.

00:09:04.960 --> 00:09:08.500
The third point, of course,
is doing the real job,

00:09:08.550 --> 00:09:10.530
to write some code to
translate your document.

00:09:10.530 --> 00:09:13.900
And to do that, it's fairly simple.

00:09:13.980 --> 00:09:17.790
The idea is, in fact, Quick Look,
when the consumer asks for

00:09:17.910 --> 00:09:21.230
a preview or a thumbnail,
Quick Look creates a small object

00:09:21.230 --> 00:09:24.400
that represents the request,
calls some specific

00:09:24.600 --> 00:09:28.130
callback in your plugin,
providing the request itself,

00:09:28.130 --> 00:09:31.880
the file URL to the document
it has to thumbnail or preview,

00:09:31.880 --> 00:09:34.020
and some additional options.

00:09:35.090 --> 00:09:39.940
And we provide a small set
of API or CPI that are very,

00:09:40.000 --> 00:09:40.650
very simple.

00:09:40.740 --> 00:09:44.340
It's a quick look framework
that gives you the opportunity

00:09:44.390 --> 00:09:46.290
to answer the request.

00:09:46.340 --> 00:09:49.120
So, let's go into more detail.

00:09:49.200 --> 00:09:52.860
Basically,
your plugin has to do two things.

00:09:52.890 --> 00:09:54.860
Thumbnail previews.

00:09:54.860 --> 00:09:57.200
So, you have to implement two callbacks.

00:09:57.200 --> 00:10:00.900
The first one, this one,
is a generate thumbnail callback.

00:10:01.020 --> 00:10:01.700
Fairly simple.

00:10:01.700 --> 00:10:03.480
You have a handle to the request.

00:10:03.480 --> 00:10:05.840
It's a file URL to the document.

00:10:05.840 --> 00:10:07.450
And some additional options.

00:10:07.460 --> 00:10:11.750
Generally, you don't have to care
about these options because

00:10:12.230 --> 00:10:14.420
Quick Look will handle them itself.

00:10:14.420 --> 00:10:17.580
But it might be useful for you
to decide what to put in your

00:10:17.580 --> 00:10:19.180
thumbnail depending on the options.

00:10:19.180 --> 00:10:22.650
But generally, you don't have to care.

00:10:23.510 --> 00:10:26.900
To answer the request,
the API is fairly simple.

00:10:26.980 --> 00:10:31.730
The first idea is to provide an image,
a CG image, a core graphics image.

00:10:31.870 --> 00:10:33.680
This is the first API.

00:10:33.740 --> 00:10:37.390
Or you can provide JPEG or
PNG data if you have that,

00:10:37.430 --> 00:10:42.400
or any kind of
ImageIO-supported image format.

00:10:42.870 --> 00:10:45.600
And if you want to,
you can ask Quick Look to create

00:10:45.600 --> 00:10:49.290
a Core Graphics context so you can
use all the Core Graphics API to

00:10:49.290 --> 00:10:51.380
draw your thumbnail on the fly.

00:10:51.500 --> 00:10:54.720
You create a context,
use the Core Graphics API,

00:10:54.760 --> 00:10:58.990
and flash the context,
and Quick Look will do all the rest.

00:11:00.750 --> 00:11:04.480
The Generate Preview callback is pretty
similar to the thumbnail callback.

00:11:04.790 --> 00:11:08.140
You have the request, the file URL,
some options.

00:11:08.260 --> 00:11:11.760
Generally,
you don't have to care about the options,

00:11:11.760 --> 00:11:13.170
but we never know.

00:11:13.410 --> 00:11:17.500
So the goal of the preview callback
is to translate your document to

00:11:17.500 --> 00:11:24.190
some data Quick Look understands,
which means HTML, movie, text, images,

00:11:24.190 --> 00:11:24.890
PDF.

00:11:25.030 --> 00:11:26.680
To do that, we have a very simple API.

00:11:26.920 --> 00:11:30.060
You just have to give
Quick Look the data.

00:11:30.310 --> 00:11:35.760
But for the sake of simplicity,
we also include a very simple API so

00:11:35.780 --> 00:11:39.290
you can create a core graphics context,
again, similarly to the thumbnail,

00:11:39.490 --> 00:11:41.720
so you can draw your preview on the fly.

00:11:41.760 --> 00:11:44.930
And if you plan to produce
a multi-page preview,

00:11:45.090 --> 00:11:48.840
you can also create a
PDF context and use begin page,

00:11:48.930 --> 00:11:52.980
end page to create several
pages for your preview.

00:11:53.770 --> 00:11:57.450
So, this was a theory,
but we will do a small demo

00:11:57.760 --> 00:11:59.790
just to see how simple it is.

00:11:59.970 --> 00:12:02.430
Let's switch to the demo machine, please.

00:12:03.820 --> 00:12:07.740
Okay, we'll do a very,
very simple Quick Look plugin.

00:12:07.740 --> 00:12:09.600
And since we are in a
developer conference,

00:12:09.610 --> 00:12:13.240
we will do a plugin for
developer kind of file.

00:12:13.350 --> 00:12:15.840
So we'll do that for
Xcode projects files.

00:12:16.020 --> 00:12:18.710
So,

00:12:19.370 --> 00:12:23.130
The idea is to start with a new project,
and the good thing is that we

00:12:23.130 --> 00:12:27.220
provide with Xcode a template
to write a Quick Look plugin.

00:12:27.290 --> 00:12:32.250
So you don't have to care
about most of the things.

00:12:32.920 --> 00:12:36.040
So we create a new project.

00:12:36.210 --> 00:12:40.000
So the template, in fact,
does almost all the work for you.

00:12:40.000 --> 00:12:43.830
It creates all the necessary files
linked to the appropriate frameworks.

00:12:43.890 --> 00:12:47.770
And in fact,
you have three things to complete.

00:12:47.990 --> 00:12:50.940
The first one is the Info.plist part.

00:12:50.970 --> 00:12:52.600
I would say it's paperwork.

00:12:52.600 --> 00:12:56.680
The second thing is the
generate thumbnail callback.

00:12:56.760 --> 00:12:59.680
And the third thing is the
generate preview callback.

00:12:59.760 --> 00:13:03.800
So let's start with the paperwork.

00:13:03.910 --> 00:13:05.210
So this is the Info.plist.

00:13:05.310 --> 00:13:07.660
It describes a lot of
things about your plugin.

00:13:07.830 --> 00:13:11.740
The first thing to do is
to give your plugin an ID.

00:13:12.250 --> 00:13:15.070
So since I'm working for Apple,
I will call it

00:13:15.280 --> 00:13:19.200
com.apple.qlgenerator.xcode.

00:13:20.300 --> 00:13:26.900
And the second thing is to bind my
plugin with the appropriate file type.

00:13:26.950 --> 00:13:35.750
And the type identifier for Xcode
project file is com.apple.xcode.project.

00:13:36.070 --> 00:13:40.080
And you can see that there are
other kind of stuff you can fill.

00:13:40.120 --> 00:13:42.000
All this stuff is quite
unnecessary for you.

00:13:42.000 --> 00:13:44.360
You just keep it like this.

00:13:44.480 --> 00:13:47.810
But you have some specific
Quick Look properties here that

00:13:48.010 --> 00:13:50.760
gives Quick Look some hints
on how to use your plugin.

00:13:50.760 --> 00:13:54.270
Basically,
you can specify a hint about your

00:13:54.330 --> 00:13:56.520
preview size or thumbnail size.

00:13:56.580 --> 00:14:03.120
But you can also declare to
Quick Look what your thread awareness is,

00:14:03.120 --> 00:14:06.310
you know,
if you are more or less thread safe,

00:14:06.510 --> 00:14:08.780
if you have to run in a main
thread or stuff like that.

00:14:08.920 --> 00:14:11.060
It depends on the framework you use,
on your code.

00:14:11.180 --> 00:14:15.990
That's the kind of stuff you
can specify to Quick Look.

00:14:16.290 --> 00:14:19.660
So, in fact,
that's all for the paperwork.

00:14:19.680 --> 00:14:24.200
What we'll do now is we will try to
implement a Generate Preview callback,

00:14:24.230 --> 00:14:25.930
and you will see it's fairly simple.

00:14:26.160 --> 00:14:30.660
To do that, I will start, sorry, by...

00:14:31.480 --> 00:14:35.910
I have a small code that parses
Xcode project files and translates

00:14:35.910 --> 00:14:37.450
them to the appropriate data.

00:14:37.540 --> 00:14:41.030
In fact, it might be the most difficult
part because you know how

00:14:41.030 --> 00:14:44.920
to parse your documents,
you know how to convert them.

00:14:44.920 --> 00:14:49.310
That's what I have here.

00:14:49.310 --> 00:14:49.310
So I will add that to my project.

00:14:53.600 --> 00:14:54.440
Voila.

00:14:54.710 --> 00:14:59.260
And as you can see,
this is a small code that uses

00:14:59.470 --> 00:15:01.880
foundation code and Objective-C.

00:15:01.880 --> 00:15:03.420
And you can do that in
a Quick Look plugin.

00:15:03.420 --> 00:15:08.040
You can use foundation, AppKit,
or a lot of high-level frameworks.

00:15:08.290 --> 00:15:14.420
So since we are using foundation,
we will add foundation

00:15:14.420 --> 00:15:14.420
to the linked frameworks.

00:15:18.130 --> 00:15:18.660
Okay.

00:15:18.660 --> 00:15:22.570
So what is this code?

00:15:22.700 --> 00:15:23.680
This code is very simple.

00:15:23.680 --> 00:15:29.020
It just takes the file URL to a project
file and converts it to some very,

00:15:29.360 --> 00:15:32.330
very simple plain text with
a list of all the files that

00:15:32.430 --> 00:15:33.620
are related to the project.

00:15:33.890 --> 00:15:37.790
So this is a very,
very basic plugin I am doing here.

00:15:37.900 --> 00:15:40.120
Of course, afterwards,
we can refine it and make

00:15:40.120 --> 00:15:41.710
something look much better.

00:15:42.030 --> 00:15:45.560
But that's not the purpose
of my presentation here.

00:15:45.560 --> 00:15:50.310
So let's implement the
generate preview callback.

00:15:52.100 --> 00:15:56.990
So you have the request here,
the file URL,

00:15:57.040 --> 00:16:00.840
the type identifier of the file,
and some options.

00:16:01.090 --> 00:16:09.000
And our goal is to convert the file
to plain text data in this case.

00:16:09.070 --> 00:16:12.140
So we'll use-- oh,
I have to include my file first.

00:16:12.200 --> 00:16:17.720
We'll use our function.

00:16:19.990 --> 00:16:22.960
This function converts the
file to plain text data,

00:16:22.960 --> 00:16:26.550
UTF-8 encoded.

00:16:29.100 --> 00:16:34.620
And then we just have to give
the answer to the request.

00:16:34.690 --> 00:16:38.440
So first part,
this is the most basic API to

00:16:38.440 --> 00:16:40.320
answer a preview request.

00:16:40.340 --> 00:16:45.120
You specify the preview request itself,
the translated data,

00:16:45.160 --> 00:16:46.600
the type of the translated data.

00:16:46.600 --> 00:16:49.890
In this case, it's UTF-8.

00:16:50.640 --> 00:16:52.760
Plain Text.

00:16:52.810 --> 00:16:55.260
And some additional properties.

00:16:55.260 --> 00:17:03.390
In properties, you can specify a lot of
metadata for your preview,

00:17:03.390 --> 00:17:03.390
like your real preview size
and some other kind of stuff.

00:17:05.430 --> 00:17:07.140
And basically, that's all.

00:17:07.180 --> 00:17:09.300
Your preview callback is written.

00:17:09.460 --> 00:17:13.000
But the most important
part is now to test it.

00:17:13.000 --> 00:17:15.530
And of course,
if you remember the three key points,

00:17:15.530 --> 00:17:19.040
you will have to make sure the type
is correctly registered to launch

00:17:19.040 --> 00:17:22.480
services and make sure your plugin
is installed in the correct place.

00:17:23.040 --> 00:17:25.960
But during development,
it's quite annoying to do all of that.

00:17:25.980 --> 00:17:28.370
And to do all of that,
each time you change some code.

00:17:28.430 --> 00:17:31.260
So that's why we provide
a tool to do that,

00:17:31.270 --> 00:17:32.920
which is named QL Manage.

00:17:32.970 --> 00:17:38.050
QL Manage is really your helper
to develop your plugins because it

00:17:38.140 --> 00:17:40.880
can execute your plugin directly.

00:17:41.030 --> 00:17:43.000
And also you can bypass
all the paperwork,

00:17:43.070 --> 00:17:46.680
bypass the type checking,
bypass the plugin discovery.

00:17:46.800 --> 00:17:48.320
And that's what we will use now.

00:17:48.600 --> 00:17:50.470
Since it's a...

00:17:51.490 --> 00:17:53.150
It's a tool that can execute your plugin.

00:17:53.220 --> 00:17:57.580
It's a very, very good candidate for
custom executable in Xcode.

00:17:57.850 --> 00:18:00.720
That's what we'll add now.

00:18:00.760 --> 00:18:04.320
You add a custom executable QLManage.

00:18:07.700 --> 00:18:11.960
And with QL Manage, you can specify a lot
of different arguments.

00:18:11.960 --> 00:18:16.160
The first one is to ask QL Manage
to bypass all the type checking,

00:18:16.160 --> 00:18:20.200
so you don't have to care about
that during the development phase.

00:18:24.180 --> 00:18:27.860
The second parameter is to ask QNManage
to bypass the plugin discovery,

00:18:27.900 --> 00:18:31.070
so you don't have to care
about installing your plugin.

00:18:36.180 --> 00:18:39.800
The third parameter is to ask
QL Manage to do a preview.

00:18:39.960 --> 00:18:43.500
So the -p is asking
QL Manage to do a preview.

00:18:43.540 --> 00:18:45.900
And we'll do a preview
for Xcode project file,

00:18:45.900 --> 00:18:49.660
which is the reason we
are writing this plugin.

00:18:55.320 --> 00:19:02.110
And we just have to run it, build it,
and run it.

00:19:02.960 --> 00:19:08.360
Oh, okay, so I forgot one thing, is that,
as I mentioned, you know,

00:19:08.430 --> 00:19:11.040
your plugin has to be
64-bit now in Snow Leopard.

00:19:11.140 --> 00:19:14.870
Since it's a 64-bit machine,
I have to build my plugin 64-bit.

00:19:15.080 --> 00:19:16.540
That's what I will do right now.

00:19:16.540 --> 00:19:19.790
Let's do that again.

00:19:20.660 --> 00:19:21.940
And voila.

00:19:21.950 --> 00:19:25.380
This is the basic preview
of an Xcode project file.

00:19:25.450 --> 00:19:27.410
Very, very simple.

00:19:27.760 --> 00:19:32.920
Just the list of files in the project
that afterwards you can really provide

00:19:32.920 --> 00:19:36.460
something much better and much nicer.

00:19:37.950 --> 00:19:39.620
OK, this was the preview.

00:19:39.890 --> 00:19:41.750
Let's do the thumbnail.

00:19:41.970 --> 00:19:45.820
So when you have to implement
your thumbnail callback,

00:19:45.820 --> 00:19:47.720
you generally face a big problem.

00:19:47.790 --> 00:19:50.180
What do I put in my thumbnail?

00:19:50.250 --> 00:19:53.050
Generally, we really,
really recommend that you, in fact,

00:19:53.110 --> 00:19:55.190
just provide the content
of your document,

00:19:55.190 --> 00:19:57.910
focus on the content of your
document in your thumbnail.

00:19:58.030 --> 00:19:59.920
So we'll do something very, very simple.

00:20:00.120 --> 00:20:05.330
We will use the same input
for the thumbnail than what

00:20:05.430 --> 00:20:07.020
we use for the preview.

00:20:07.080 --> 00:20:11.590
Just use the same text and display
it in the small image or thumbnail,

00:20:11.590 --> 00:20:16.100
and that will be our
Xcode project thumbnail.

00:20:16.890 --> 00:20:19.300
So to do that, it's fairly simple.

00:20:19.340 --> 00:20:24.780
I will call the same exact function to
translate my project to plain text data.

00:20:24.820 --> 00:20:28.150
I have to create a core graphics
context and use the text

00:20:28.320 --> 00:20:31.960
drawing API to draw this text.

00:20:32.640 --> 00:20:35.310
It's quite tedious, you know.

00:20:35.430 --> 00:20:39.690
So that's why in Snow Leopard we are
adding a very convenient function that

00:20:39.850 --> 00:20:41.570
will do all this kind of stuff for you.

00:20:41.900 --> 00:20:45.470
If you can produce a preview,
it's very easy to produce a thumbnail

00:20:45.500 --> 00:20:47.140
in Snow Leopard using this function.

00:20:47.290 --> 00:20:51.270
It might not be exactly what you want,
but for a lot of people it can

00:20:51.420 --> 00:20:53.240
be really the only thing to do.

00:20:53.570 --> 00:20:58.000
If you can produce a preview,
you can ask Quick Look to produce

00:20:58.230 --> 00:21:00.170
the thumbnail the same way.

00:21:00.170 --> 00:21:01.070
So that's what we'll use here.

00:21:01.270 --> 00:21:04.130
You will see that it's really,
really similar to the

00:21:04.210 --> 00:21:06.380
Generate Preview Callback.

00:21:10.200 --> 00:21:16.100
[Transcript missing]

00:21:16.970 --> 00:21:22.770
And instead of using Preview Request API,
we use Thumbnail Request API,

00:21:22.770 --> 00:21:25.090
and we have this very convenient

00:21:26.530 --> 00:21:32.960
Function that gets the same
exact input as the preview API,

00:21:33.020 --> 00:21:35.000
but produce thumbnail instead.

00:21:35.000 --> 00:21:39.000
So you provide the data,
the type of the data,

00:21:41.030 --> 00:21:42.330
And some additional properties.

00:21:42.540 --> 00:21:43.340
Here, nothing.

00:21:43.340 --> 00:21:45.000
And that's all.

00:21:46.530 --> 00:21:49.760
Just as a reminder,
one thing is that this

00:21:49.850 --> 00:21:52.780
API is very convenient,
but it has a little drawback.

00:21:52.790 --> 00:21:55.770
You know, since it is using some

00:21:55.910 --> 00:21:59.340
Fairly high-level drawing API,
it has to be run in the main thread.

00:21:59.430 --> 00:22:02.560
It's not a pure thread-safe function.

00:22:02.560 --> 00:22:06.860
And you can tell Quick Look your
plugin is not totally thread-safe.

00:22:06.900 --> 00:22:09.480
This is what we saw just
before in the Info.plist.

00:22:09.510 --> 00:22:13.740
We'll have to tell Quick Look, okay,
my plugin is great,

00:22:13.790 --> 00:22:17.390
but I have to make sure it
runs in the main thread.

00:22:17.420 --> 00:22:21.240
And this is what you can
specify here with the needs to

00:22:21.240 --> 00:22:23.690
be run in main thread property.

00:22:23.690 --> 00:22:23.760
So we'll check that.

00:22:24.850 --> 00:22:27.040
And our plugin is ready.

00:22:27.090 --> 00:22:29.400
But what we'll do is test it now.

00:22:29.460 --> 00:22:33.820
Instead of -p,
we'll use -t to produce a thumbnail.

00:22:34.220 --> 00:22:36.620
Okay, build and go.

00:22:36.910 --> 00:22:38.330
And we have our thumbnail now.

00:22:38.500 --> 00:22:41.960
It's pretty small,
so we can change some of the property.

00:22:41.960 --> 00:22:45.560
Also, it's quite flat,
so we will add some icon decoration.

00:22:45.760 --> 00:22:50.500
Dash I tells Quick Look to
produce a nice icon,

00:22:50.530 --> 00:22:55.060
and we can also make
the thumbnail bigger.

00:22:57.820 --> 00:23:01.380
And voila,
we have our icon for Xcode project files.

00:23:01.450 --> 00:23:03.520
So it's fairly simple.

00:23:03.760 --> 00:23:06.440
But if you look at the icon,
you will tell me, well,

00:23:06.440 --> 00:23:08.660
it really looks like a
plain text document file.

00:23:08.660 --> 00:23:11.280
And you will be right.

00:23:11.350 --> 00:23:16.800
And what you can do in SnowLeoPard
now is to add some additional

00:23:16.800 --> 00:23:18.080
decoration to your icon.

00:23:18.080 --> 00:23:22.630
What we don't want you to do
is to introduce the decoration

00:23:22.710 --> 00:23:24.000
directly in the thumbnail.

00:23:24.010 --> 00:23:27.810
So that's why we're adding this
API for you to provide additional

00:23:28.080 --> 00:23:31.520
information about your icon,
but alongside the thumbnail so we

00:23:31.520 --> 00:23:36.000
can really decorate the thumbnail
content and the decoration itself.

00:23:36.060 --> 00:23:40.650
So in SnowLeoPard,
you can add some badging to the icon.

00:23:40.650 --> 00:23:41.930
That's what we'll do right now.

00:23:42.030 --> 00:23:43.060
It's very, very simple.

00:23:43.060 --> 00:23:47.380
If you do remember, in the API,
in the Quick Look API,

00:23:47.380 --> 00:23:52.740
there is always... last
parameters in the answer API,

00:23:52.740 --> 00:23:55.080
which is the properties parameter.

00:23:55.080 --> 00:23:59.080
And the properties can specify
additional information on the

00:23:59.080 --> 00:24:01.070
thumbnail or icon you are producing.

00:24:01.080 --> 00:24:03.880
And that's what we'll use now.

00:24:04.950 --> 00:24:08.200
And you can ask Quick Look.

00:24:08.330 --> 00:24:11.070
So I have some here.

00:24:11.190 --> 00:24:13.020
Very simple.

00:24:14.510 --> 00:24:18.300
What you have to do is just to create
a dictionary telling Quick Look to

00:24:18.300 --> 00:24:21.630
use a small extension badging.

00:24:22.170 --> 00:24:27.380
And use this dictionary
as a thumbnail properties.

00:24:27.380 --> 00:24:31.690
And so to make sure we are not leaking,
I'm

00:24:32.270 --> 00:24:35.150
Rolling the dictionary.

00:24:35.530 --> 00:24:38.150
And if we run it again,
you see that you have

00:24:38.940 --> 00:24:42.560
the extension here now.

00:24:42.680 --> 00:24:45.000
But you might want to go even further.

00:24:45.040 --> 00:24:49.320
You might want to include something
more specific to your brand,

00:24:49.340 --> 00:24:50.840
like an image.

00:24:50.840 --> 00:24:52.660
And you can do that in SnowLeopard.

00:24:52.780 --> 00:24:55.960
It's really, really,
really similar to the extension stuff.

00:24:56.020 --> 00:25:00.820
Instead of providing a text string,
you provide an image.

00:25:00.820 --> 00:25:02.140
So let's do that.

00:25:02.190 --> 00:25:08.710
I have a small image here
I want to add to my icon.

00:25:11.140 --> 00:25:18.650
And instead of providing text,
we'll provide an image here.

00:25:22.200 --> 00:25:24.370
So this is, in fact,
the most difficult part of this

00:25:24.520 --> 00:25:27.060
code is to load the image itself,
you know.

00:25:27.180 --> 00:25:28.380
But it's fairly simple.

00:25:28.490 --> 00:25:32.370
Afterward,
it's very similar to the extension.

00:25:32.620 --> 00:25:35.550
You provide a badge image
and the image itself,

00:25:35.670 --> 00:25:40.530
and you use the properties as
the thumbnail properties here.

00:25:42.260 --> 00:25:44.160
Run it, and there you are.

00:25:44.180 --> 00:25:45.360
Wow, yeah, it's not very nice.

00:25:45.420 --> 00:25:49.490
You know, I'm not a designer myself,
but I'm sure you can do

00:25:49.490 --> 00:25:51.780
much better than that.

00:25:51.810 --> 00:25:52.640
And that's it.

00:25:52.700 --> 00:25:54.410
You have your icon.

00:25:57.800 --> 00:25:59.800
Thank you.

00:25:59.800 --> 00:26:03.560
So you can see it's very simple.

00:26:03.580 --> 00:26:05.600
Let's go back to the slide.

00:26:07.720 --> 00:26:10.720
So you can see it's very simple
to write a Quick Look plugin.

00:26:10.780 --> 00:26:15.380
But if there is something to remember,
it's simple,

00:26:15.380 --> 00:26:20.360
and you have a very convenient tool
to debug and develop your plugin.

00:26:20.550 --> 00:26:22.180
And this tool is QLManage.

00:26:22.240 --> 00:26:25.530
QLManage is really the
Swiss army knife of Quick Look.

00:26:25.740 --> 00:26:29.080
It can execute your plugin
directly without all the

00:26:29.120 --> 00:26:33.500
complex Quick Look engines,
the process, the daemon process,

00:26:33.560 --> 00:26:38.000
the problem you have to use
to go in Finder to verify that

00:26:38.160 --> 00:26:40.080
your icons are looking great.

00:26:40.190 --> 00:26:41.670
It can do a lot of stuff.

00:26:41.970 --> 00:26:44.480
In particular,
it can bypass all the paperwork,

00:26:44.540 --> 00:26:46.460
the typing, the installation.

00:26:46.540 --> 00:26:51.180
That's something you don't want to
do while you are writing your code.

00:26:51.420 --> 00:26:53.280
You can do a lot of new
stuff in Snow Leopard.

00:26:53.360 --> 00:26:56.030
We try to enhance this tool a lot.

00:26:56.160 --> 00:27:01.080
It can help you test your performance
and do a lot of other kind of testing,

00:27:01.090 --> 00:27:04.800
like try your icons in different sizes.

00:27:06.060 --> 00:27:08.610
And the last important
thing that Quick Look,

00:27:08.660 --> 00:27:12.600
QL Manage is doing is, in fact,
it can help you reset the cache.

00:27:12.600 --> 00:27:15.420
Because in Snow Leopard,
for performance reasons,

00:27:15.420 --> 00:27:19.910
we're adding several levels of cache
in Quick Look on the consumer side

00:27:19.910 --> 00:27:21.790
and on disk and stuff like that.

00:27:21.870 --> 00:27:23.160
You don't have to care about it.

00:27:23.280 --> 00:27:27.210
In fact, it's very good for the user,
but it might be very annoying

00:27:27.250 --> 00:27:31.620
for you developers because,
of course, once we have cached something,

00:27:31.620 --> 00:27:35.400
you want to reset the cache,
and QL Manage helps you do that.

00:27:36.830 --> 00:27:41.260
For more information, there is a manual
included with QL Manage.

00:27:41.300 --> 00:27:43.580
Let's go take a look at that.

00:27:43.810 --> 00:27:46.040
It's very simple, you will see.

00:27:46.650 --> 00:27:49.330
One important thing,
and I know that a lot of people are

00:27:49.390 --> 00:27:54.460
doing that and it's not a good idea,
QN Manage is only a debugging tool.

00:27:54.850 --> 00:28:00.130
You should not use QN Manage
as a consumer to display

00:28:00.160 --> 00:28:01.070
generally the preview panel.

00:28:01.110 --> 00:28:03.620
It's really not what you want to do.

00:28:05.990 --> 00:28:09.000
So it's simple to write
a Quick Look plugin.

00:28:09.040 --> 00:28:12.420
But in fact,
you might face some problems.

00:28:12.460 --> 00:28:15.510
And in general,
you might face two problems.

00:28:15.610 --> 00:28:18.500
The first one is performances.

00:28:18.730 --> 00:28:23.230
You have to make sure your plugin
is as efficient as possible.

00:28:23.320 --> 00:28:27.880
In fact, some things should be extremely
fast because your thumbnails will be

00:28:27.980 --> 00:28:32.110
displayed with a lot of other thumbnails,
and your plugin should not

00:28:32.110 --> 00:28:33.900
harm the computer resources.

00:28:33.970 --> 00:28:40.790
We are trying to be very efficient,
but if your plugin is taking too much

00:28:40.790 --> 00:28:44.510
time or taking too much resources,
it might end up being

00:28:44.510 --> 00:28:44.510
very bad for the user.

00:28:45.000 --> 00:28:51.140
So you have to find the right balance
between quality and performance.

00:28:51.180 --> 00:28:55.230
And to do that, really,
you might have to remove some details.

00:28:55.320 --> 00:28:58.210
You know, this is just a thumbnail.

00:28:58.460 --> 00:29:01.900
And if you are designing
your file format right now,

00:29:01.940 --> 00:29:06.810
we really encourage that you include
in your file format a JPEG data or

00:29:06.910 --> 00:29:09.820
PNG data with a pre-generated thumbnail.

00:29:09.930 --> 00:29:12.380
And if you do that,
you won't have to pass the whole

00:29:12.380 --> 00:29:14.320
document to produce a thumbnail.

00:29:14.320 --> 00:29:17.120
You will just have to get the
data directly from your file

00:29:17.430 --> 00:29:19.800
and send it back to Quick Look.

00:29:21.500 --> 00:29:23.590
On the other hand,
previews need to be fast, too.

00:29:23.810 --> 00:29:25.690
Maybe not as fast, but still fast.

00:29:25.850 --> 00:29:27.890
This is very important for
the Quick Look experience.

00:29:27.970 --> 00:29:30.990
Quick Look experience
is about to be quick.

00:29:31.450 --> 00:29:34.120
And the user,
when the user opens the Quick Look panel,

00:29:34.260 --> 00:29:37.950
he does not want to see
the loading placeholder.

00:29:37.960 --> 00:29:40.870
He really wants the preview
to appear immediately.

00:29:40.990 --> 00:29:44.130
So you have to make sure your
preview callback is very,

00:29:44.130 --> 00:29:45.330
very fast, too.

00:29:45.390 --> 00:29:47.920
This means that you will also
have to find the right balance

00:29:48.030 --> 00:29:50.990
between details and speed.

00:29:51.700 --> 00:29:55.050
And what we recommend, for example,
if you are producing

00:29:55.050 --> 00:29:59.180
a multi-page document,
a multi-page preview from your

00:29:59.340 --> 00:30:04.680
document really caps your number
of pages to a small number.

00:30:04.710 --> 00:30:07.750
And in fact, with Snow Leopard,
we are introducing a new API so

00:30:07.830 --> 00:30:11.110
you can provide the pages later.

00:30:12.950 --> 00:30:14.790
The second problem you
might face is design.

00:30:14.790 --> 00:30:18.300
And you saw in my demonstration
that I am not a very good designer,

00:30:18.300 --> 00:30:20.790
and that generally is
a problem you will see.

00:30:21.740 --> 00:30:25.830
And the very important thing to
remember is just focus on the content.

00:30:25.900 --> 00:30:28.680
Thumbnail and previews is just
about displaying the content.

00:30:28.680 --> 00:30:32.090
In fact, it's really only
Quick Look responsibility to

00:30:32.220 --> 00:30:36.490
add the extra decoration to
your thumbnails and previews.

00:30:36.560 --> 00:30:40.470
In particular, for thumbnail,
this is Quick Look that does the

00:30:40.830 --> 00:30:43.230
curled-up corner and stuff like that.

00:30:43.340 --> 00:30:44.900
So only focus on the content.

00:30:44.900 --> 00:30:49.430
Don't add any more bells and
whistles inside your thumbnails.

00:30:49.960 --> 00:30:52.990
We are providing some additional
APIs for you to customize your

00:30:53.090 --> 00:30:57.530
icon if you really want to,
but don't do that inside your thumbnail.

00:30:58.530 --> 00:31:01.640
The same thing applies for previews.

00:31:01.710 --> 00:31:04.150
You should not assume that your
preview will only be displayed

00:31:04.210 --> 00:31:06.300
in the Quick Look preview panel.

00:31:06.350 --> 00:31:08.010
And in fact, it does not.

00:31:08.140 --> 00:31:11.060
It's operating in the cover flow.

00:31:11.120 --> 00:31:13.100
You know, you can scrub through pages.

00:31:13.170 --> 00:31:18.200
It's also used in the Finder info
panel and in the column view,

00:31:18.440 --> 00:31:18.590
too.

00:31:18.770 --> 00:31:22.420
And it might be used in very
different places afterwards.

00:31:22.530 --> 00:31:24.910
So don't assume anything on the context.

00:31:25.110 --> 00:31:27.710
Just focus on the content.

00:31:28.510 --> 00:31:30.970
So let's summarize how to
write a Quick Look plugin,

00:31:30.970 --> 00:31:34.400
because this is the most
important thing for this part.

00:31:34.570 --> 00:31:36.200
It's very, very simple.

00:31:36.410 --> 00:31:39.680
You start from a Nixcode template,
and you fill in the holes.

00:31:39.720 --> 00:31:43.020
Do the paperwork in Info.plist.

00:31:43.040 --> 00:31:44.580
Implement your callback.

00:31:44.660 --> 00:31:47.340
Then test and debug with QL Manage.

00:31:47.360 --> 00:31:49.070
And finally--

00:31:49.440 --> 00:31:51.390
You just have to install
it in the right place.

00:31:51.500 --> 00:31:54.770
Inside your application,
if you plan to include directly

00:31:54.770 --> 00:31:58.900
your plugin in your application,
or if you want to have it standalone,

00:31:58.910 --> 00:32:01.900
install it in /library/quicklook.

00:32:02.240 --> 00:32:04.860
So this was the producer
side of Quick Look.

00:32:04.940 --> 00:32:08.020
But there is another side of Quick Look,
the consumer side.

00:32:08.070 --> 00:32:10.290
And that might be very
interesting for you.

00:32:10.600 --> 00:32:13.930
And for that,
I am calling Julien Robert on stage.

00:32:19.850 --> 00:32:21.900
Thank you, Julien.

00:32:21.960 --> 00:32:24.560
So now that you've seen
how to write plugins,

00:32:24.590 --> 00:32:27.300
we will switch to the
other side of Quick Look,

00:32:27.330 --> 00:32:31.890
that is displaying thumbnails
and previews in your application.

00:32:32.320 --> 00:32:35.130
So let's first focus on thumbnails.

00:32:35.260 --> 00:32:40.710
Thumbnails are simply static
bitmap images that can come with

00:32:41.110 --> 00:32:44.100
or without icon decorations.

00:32:44.720 --> 00:32:47.360
So when they are without
icon decorations,

00:32:47.410 --> 00:32:52.440
we call them flat thumbnails,
and this gives the user a quick overview

00:32:52.440 --> 00:32:55.920
of the content of their documents.

00:32:57.130 --> 00:33:02.080
Icons give you the same information
about the content of the document,

00:33:02.110 --> 00:33:05.960
but also highlights the
file aspect of the document.

00:33:05.980 --> 00:33:08.930
So for instance,
you can see the curled corner or

00:33:08.930 --> 00:33:12.650
the glossy effect on these icons.

00:33:13.190 --> 00:33:19.050
So let's see a little bit more in
details how to use these thumbnails.

00:33:19.500 --> 00:33:27.330
Flat thumbnails do scale well,
so you can use them in high resolutions.

00:33:28.470 --> 00:33:33.450
So they are well-suited
to be used in inspector,

00:33:33.450 --> 00:33:33.450
preview pens,

00:33:33.970 --> 00:33:38.300
But also in other fancier
views like 3D views,

00:33:38.340 --> 00:33:43.750
which is an example of CoverFlow,
or other views that you can imagine.

00:33:46.000 --> 00:33:50.860
Icons are more likely to
be used in views that are

00:33:50.860 --> 00:33:56.750
displaying a collection of files,
like browser views and list views.

00:33:57.660 --> 00:34:02.470
Or to be used as file handles,
that is when the user will want to

00:34:02.500 --> 00:34:07.700
interact with your document as a file,
like clicking on it, dragging it,

00:34:07.700 --> 00:34:09.500
and stuff like that.

00:34:11.450 --> 00:34:18.100
So let's get a bit technical now and see
how you can get and display thumbnails.

00:34:18.110 --> 00:34:23.240
Well, first, you can use an API that
we've introduced in LeoPard.

00:34:23.240 --> 00:34:25.670
It is a Quick Look API.

00:34:25.790 --> 00:34:28.900
So this is a very simple
and synchronous API.

00:34:29.190 --> 00:34:36.060
You just give a file URL and the size,
and it returns synchronously

00:34:36.220 --> 00:34:37.280
a CG image ref.

00:34:38.750 --> 00:34:42.040
And if you want to have
icons instead of thumbnails,

00:34:42.060 --> 00:34:46.180
you can add this option
to the Options dictionary.

00:34:48.420 --> 00:34:50.160
So this is a synchronous call.

00:34:50.160 --> 00:34:53.570
So also we try to be as fast as we can.

00:34:53.730 --> 00:34:57.070
Some generators,
some plugins may still take a

00:34:57.210 --> 00:35:01.610
while to generate the thumbnail.

00:35:02.860 --> 00:35:09.500
So don't call this on your main thread
because it will be a bad user experience.

00:35:12.900 --> 00:35:18.960
You have also another solution that is
using the ImageBrowser from ImageKit.

00:35:19.050 --> 00:35:24.570
So the ImageBrowser is a
view that draws images,

00:35:24.580 --> 00:35:30.780
but can also be used to browse
files and display thumbnails.

00:35:32.790 --> 00:35:35.550
So to have thumbnails
in the Image browser,

00:35:35.550 --> 00:35:39.020
you should use the Quick Look path
representation type.

00:35:39.020 --> 00:35:41.830
And for more information,
I invite you to watch

00:35:41.840 --> 00:35:43.960
the ImageKit session.

00:35:46.320 --> 00:35:49.360
So this is actually a
good solution for you.

00:35:49.390 --> 00:35:52.080
This may be a good solution for you.

00:35:52.610 --> 00:35:54.100
For several reasons.

00:35:54.120 --> 00:35:58.440
Well, first, for performance reason,
because we worked hard with the

00:35:58.530 --> 00:36:03.890
ImageKit people to have a very
efficient way to get thumbnails.

00:36:05.610 --> 00:36:09.500
And also for you, it's very easy.

00:36:09.500 --> 00:36:12.180
It's a very easy solution.

00:36:12.180 --> 00:36:13.640
So we will see that later.

00:36:17.280 --> 00:36:23.220
So now that we've seen how
to get thumbnails and icons,

00:36:23.240 --> 00:36:27.110
we'll see how to get
and display previews.

00:36:30.350 --> 00:36:36.080
So previews are more accurate
representation of your documents.

00:36:36.140 --> 00:36:38.440
They are richer and more dynamic.

00:36:38.450 --> 00:36:42.680
So users can see several
pages of your documents.

00:36:42.960 --> 00:36:44.270
It can have sound.

00:36:44.680 --> 00:36:48.430
It can scrub in movies, stuff like that.

00:36:50.100 --> 00:36:54.150
And previews are available
through the Preview Panel.

00:36:54.400 --> 00:36:56.380
So I suppose you've seen the badge.

00:36:56.440 --> 00:37:00.300
The Preview Panel APIs are
new in Snow Leap Part.

00:37:03.230 --> 00:37:06.700
So how do you actually
use a preview panel?

00:37:06.830 --> 00:37:11.900
Well, first, you have to import quarts
and link against quarts.

00:37:12.170 --> 00:37:16.040
And the preview panel is
available as a singleton,

00:37:16.040 --> 00:37:18.130
a shared preview panel.

00:37:19.260 --> 00:37:23.100
Then the first thing you want
to do is to open and close it.

00:37:23.160 --> 00:37:26.580
So the preview panel is
just a regular NS panel.

00:37:26.620 --> 00:37:31.130
So you just use NS Window APIs to
open and close it.

00:37:31.380 --> 00:37:35.600
And you may additionally want to
open it directly in full screen,

00:37:35.670 --> 00:37:40.000
so we have other APIs to do that,
that are the same as

00:37:40.000 --> 00:37:42.170
you can find on NSView.

00:37:45.480 --> 00:37:49.200
So then,
when you have the preview panel open,

00:37:49.200 --> 00:37:51.990
you want to fill it with contents.

00:37:53.710 --> 00:37:57.140
So the preview panel is using a
data source model that is quite

00:37:57.140 --> 00:38:01.280
standard and similar to what you
would find in the image browser,

00:38:01.280 --> 00:38:06.520
for instance, but also in table views
and other collection views.

00:38:06.670 --> 00:38:11.310
So you just return the number of items
you want to display in the preview panel,

00:38:11.310 --> 00:38:14.850
and then you return the item
for the specified index.

00:38:14.960 --> 00:38:17.620
So we will see later what is an item.

00:38:20.960 --> 00:38:23.350
Additionally,
you can implement some delegate

00:38:23.350 --> 00:38:29.120
methods to add polish to
your Quick Look experience.

00:38:29.120 --> 00:38:34.340
For example, the zooming effect is quite
important because it gives

00:38:34.340 --> 00:38:36.380
a good feedback to the user.

00:38:37.690 --> 00:38:44.190
And also you can provide us with an image
to make a crossfade to the preview panel

00:38:44.790 --> 00:38:47.580
to have an even smoother transition.

00:38:52.480 --> 00:38:54.070
What are these items?

00:38:54.230 --> 00:38:59.280
Well, they can simply be NSURLs or,
and that's more interesting,

00:38:59.280 --> 00:39:03.660
they can be your own objects,
providing they implement the

00:39:03.660 --> 00:39:06.280
actual preview item protocol.

00:39:07.210 --> 00:39:12.470
So say you already have items on
your model that represent files,

00:39:12.470 --> 00:39:15.480
and you want to display
them in the Preview panel.

00:39:16.140 --> 00:39:20.180
So just by making sure they
implement this protocol,

00:39:20.180 --> 00:39:24.700
you can directly give your
items to the preview panel.

00:39:25.030 --> 00:39:29.180
So the advantage is
that in all callbacks,

00:39:29.200 --> 00:39:32.010
you would get your item,
so it may be easier for you to

00:39:32.360 --> 00:39:35.330
retrieve the requested information.

00:39:39.390 --> 00:39:43.310
An important aspect of the
preview panel is that its

00:39:43.390 --> 00:39:47.940
content depends on its context.

00:39:47.990 --> 00:39:52.670
So, for example,
if the main window is changing,

00:39:52.860 --> 00:40:00.090
The preview panel has to reflect the new
selected item in the new main window.

00:40:00.430 --> 00:40:04.090
So the rule is that the Preview
Panel always displays the

00:40:04.100 --> 00:40:08.080
selected item in the main window.

00:40:08.100 --> 00:40:12.130
So how does it work?

00:40:13.280 --> 00:40:17.280
When we see that the
responder chain is changing,

00:40:17.280 --> 00:40:23.560
we first try to find a controller that
is willing to control the preview panel.

00:40:24.000 --> 00:40:27.660
So we do that by walking
through the responder chain.

00:40:28.100 --> 00:40:34.040
And we select the first object
that responds yes to this method.

00:40:34.090 --> 00:40:37.270
Typically,
this would be your window controller.

00:40:39.730 --> 00:40:43.970
So then once we have this controller,
we tell it that it will begin

00:40:44.030 --> 00:40:46.630
to control the preview panel.

00:40:47.010 --> 00:40:51.560
So it receives this method,
and that's where it's supposed

00:40:51.720 --> 00:40:54.600
to set up the preview panel,
like setting the delegate,

00:40:54.600 --> 00:40:58.410
the data source,
and call reload data on it.

00:41:00.120 --> 00:41:02.220
And then,
when the ownership of the preview

00:41:02.290 --> 00:41:06.980
panel is given to another object,
we tell the previous controller

00:41:07.110 --> 00:41:10.090
that it no longer has
control on the preview panel.

00:41:10.390 --> 00:41:12.960
So we send this method.

00:41:14.320 --> 00:41:19.470
So you should be aware that you can do,
you can call some stuff on

00:41:19.480 --> 00:41:23.680
the preview panel only between
the begin and end calls,

00:41:23.730 --> 00:41:30.000
and you are not allowed to do
anything not between these two calls.

00:41:32.360 --> 00:41:34.540
So let's see a bit more.

00:41:34.550 --> 00:41:38.950
Let's see how Event Handling is
working on the Preview panel.

00:41:39.600 --> 00:41:44.740
Well, first we have standard shortcuts
to open the Quick Look panel.

00:41:44.860 --> 00:41:47.100
So it's Command-Y.

00:41:47.190 --> 00:41:50.740
And additionally,
if it fits well in your application,

00:41:50.800 --> 00:41:55.860
you can use the space bar
to toggle the preview panel.

00:41:55.930 --> 00:42:00.810
Also, you can add the Option key to
go directly to full screen.

00:42:02.120 --> 00:42:05.550
So once your preview panel is open,
it's a key window,

00:42:05.550 --> 00:42:10.190
so events are routed directly to it,
and obviously your view underneath

00:42:10.680 --> 00:42:13.260
is not getting any events.

00:42:14.290 --> 00:42:19.210
So if you want to still be able
to handle events by yourself,

00:42:19.210 --> 00:42:22.390
you can implement this delegate method.

00:42:24.240 --> 00:42:29.460
So typically we use that to be
able to navigate in your view

00:42:29.460 --> 00:42:32.090
while the preview panel is open.

00:42:33.190 --> 00:42:38.400
So what you do is just implement this
and return yes if you handled the event,

00:42:38.400 --> 00:42:43.140
and no if you want the preview
panel to handle it by itself.

00:42:46.420 --> 00:42:51.460
Use this mechanism and don't give
key to your main window because

00:42:51.460 --> 00:42:53.400
that's not the way to do it.

00:42:55.400 --> 00:43:00.860
So we'll see a little
bit more in details.

00:43:01.720 --> 00:43:06.570
So we'll first see how to use the
image browser to display thumbnails,

00:43:06.580 --> 00:43:10.460
and then we'll see how
to use the preview panel,

00:43:10.460 --> 00:43:14.780
so how to open and close it,
track the selection,

00:43:14.840 --> 00:43:16.080
and add the zoom effect.

00:43:16.200 --> 00:43:23.130
So can we switch to the demo machine,
please?

00:43:27.590 --> 00:43:33.060
So here I have a very simple application,
TotalWinLaunch.

00:43:33.060 --> 00:43:37.980
And it just displays a collection
of files in a window using the

00:43:37.980 --> 00:43:41.760
image browser from ImageKit,
so I can zoom.

00:43:42.930 --> 00:43:47.830
So it's very easy with ImageKit to
display a collection of files,

00:43:47.960 --> 00:43:52.260
but we just have icons,
so it's kind of boring.

00:43:52.540 --> 00:43:58.280
So the first thing we want to do is
to have thumbnails instead of icons.

00:43:59.270 --> 00:44:04.920
So in my items that I use in the
data source for the image browser,

00:44:04.920 --> 00:44:10.270
I'm just changing the image
representation type to use Quick Look.

00:44:12.200 --> 00:44:16.200
I run it again, and boom,
I have all my thumbnails.

00:44:16.200 --> 00:44:24.990
So as you can see, we can zoom and still
have beautiful thumbnails.

00:44:26.770 --> 00:44:31.380
So when you write your plugin,
keep in mind that the thumbnails may

00:44:31.380 --> 00:44:35.080
be displayed at quite high resolutions.

00:44:40.460 --> 00:44:46.370
So next thing we want to do is to
add support for the preview panel.

00:44:47.400 --> 00:44:49.750
So let's do that.

00:44:50.310 --> 00:44:54.760
So we have some manual attempts
that are hooked to these methods.

00:44:54.770 --> 00:44:58.720
So the first thing we want to do
is to toggle the preview panel.

00:45:00.070 --> 00:45:02.940
I just uncommended.

00:45:02.940 --> 00:45:06.390
And also we want to add
support for the spacebar.

00:45:07.310 --> 00:45:10.420
So I just uncomment that too.

00:45:10.670 --> 00:45:12.580
So what it does, it's very simple.

00:45:12.600 --> 00:45:16.660
Just open the Preview
Panel if it's not visible,

00:45:16.660 --> 00:45:19.140
or close it if it is.

00:45:19.480 --> 00:45:22.010
So let's run now.

00:45:22.180 --> 00:45:24.030
And if I use--

00:45:24.930 --> 00:45:27.940
Open the Quick Look panel.

00:45:27.970 --> 00:45:30.440
So it opens,
but obviously it's empty because

00:45:30.440 --> 00:45:33.500
we didn't set any data source.

00:45:35.560 --> 00:45:41.570
The next thing we want to do is implement
the controller method that we've seen.

00:45:43.750 --> 00:45:50.300
So here, so I am in my document.

00:45:50.390 --> 00:45:54.540
So it's in the responder chain,
and we obviously accept to be

00:45:54.630 --> 00:45:57.030
controlling the preview panel.

00:45:57.690 --> 00:46:00.750
In the Begin Preview
Panel Control method,

00:46:00.750 --> 00:46:05.780
we set ourselves as the delegate and
the data source of the preview panel,

00:46:05.800 --> 00:46:10.010
and then we tell the preview
panel to reload its data.

00:46:10.510 --> 00:46:15.450
And in the end call,
we just make sure to remove ourselves

00:46:16.710 --> 00:46:19.450
from the delegate and data source.

00:46:21.150 --> 00:46:25.840
So next, what we want to do is
implement the data source.

00:46:25.840 --> 00:46:29.290
This is a very simple data source.

00:46:30.010 --> 00:46:34.900
So first, we retrieve the selected
items as an array.

00:46:35.030 --> 00:46:40.380
So these are the same items that we use
in the data source for the image browser,

00:46:40.420 --> 00:46:46.850
but we made sure to implement the
True Health Preview Item Protocol.

00:46:47.770 --> 00:46:51.840
So we just return the number
of items in this array,

00:46:51.840 --> 00:46:57.340
and then return the item
in the specified index.

00:46:57.380 --> 00:46:59.600
So if I run now--

00:47:01.560 --> 00:47:03.760
And press the space bar.

00:47:03.900 --> 00:47:10.010
You can see that the preview panel is
correctly displaying the selected item.

00:47:10.490 --> 00:47:15.830
So one interesting thing to see
is that if I have two windows,

00:47:16.560 --> 00:47:22.450
And with two different items,
selected items in the windows,

00:47:22.650 --> 00:47:27.470
if I switch between the two windows,
you can see the preview panel

00:47:27.860 --> 00:47:30.890
correctly reflects the change.

00:47:32.810 --> 00:47:38.210
But we are still missing some things,
like if I'm in the same window

00:47:38.370 --> 00:47:41.960
and I change the selection,
the preview panel does

00:47:42.030 --> 00:47:43.890
not update its content.

00:47:45.510 --> 00:47:49.510
So that's the next thing we want to do.

00:47:49.650 --> 00:47:54.100
So you have to tell the preview
panel to reload its data when the

00:47:54.100 --> 00:47:56.380
selection is changing in your view.

00:47:56.690 --> 00:47:59.610
So in our example,
we use this delegate method

00:47:59.730 --> 00:48:01.910
from the ImageBrowser.

00:48:03.130 --> 00:48:07.910
So the first thing we want to do
is to check that we are the current

00:48:07.950 --> 00:48:10.880
controller for the preview panel.

00:48:10.990 --> 00:48:14.190
And then we just call reload data on it.

00:48:16.150 --> 00:48:22.810
So if I run the application again,
make that a little smaller.

00:48:23.600 --> 00:48:28.850
And if I change the selection,
so the preview panel correctly

00:48:28.860 --> 00:48:31.210
displays the selected item.

00:48:32.500 --> 00:48:37.080
But we are not totally done yet,
because as you see,

00:48:37.100 --> 00:48:39.310
we have no transition.

00:48:40.500 --> 00:48:46.280
And also, when the Preview panel is open,
if I try to use the arrow keys,

00:48:46.840 --> 00:48:49.540
Well, nothing happens.

00:48:49.630 --> 00:48:55.590
So we will fix these
using delegate methods.

00:48:56.530 --> 00:49:02.790
So this first delegate method
is to have a zooming effect.

00:49:03.260 --> 00:49:04.900
So it's pretty simple.

00:49:04.950 --> 00:49:11.000
First thing you want to do is to get
the frame using the image browser APIs.

00:49:11.280 --> 00:49:15.020
When you have the frame,
you have to convert it to screen

00:49:15.020 --> 00:49:18.300
coordinates and return that.

00:49:19.470 --> 00:49:26.840
And the other method simply forwards the
keyed-down events to the image browser.

00:49:26.840 --> 00:49:35.070
So if I run it again,
we can see we have a nice zoom effect.

00:49:37.870 --> 00:49:43.490
If I use the arrow keys,
this time it works correctly.

00:49:44.120 --> 00:49:49.630
And the new selected item
is correctly previewed.

00:49:51.240 --> 00:49:55.160
So we are done with our little demo.

00:49:55.180 --> 00:49:57.810
We can go back to the slides.

00:50:03.620 --> 00:50:08.560
So to recap what you need to do to
add support for the preview panel.

00:50:08.590 --> 00:50:11.940
Well, the first thing, obviously,
you want to import and link

00:50:11.940 --> 00:50:14.460
again the Quartz framework.

00:50:14.490 --> 00:50:19.560
Then you need to add calls to open
and close the preview panel using

00:50:19.560 --> 00:50:22.630
the standard shortcuts that we have.

00:50:23.490 --> 00:50:28.710
Then you need to implement the
controller methods and the data source.

00:50:29.640 --> 00:50:35.160
Also, don't forget to tell the preview
panel to reload its data when the

00:50:35.160 --> 00:50:38.130
selection is changing in your view.

00:50:38.570 --> 00:50:41.900
And additionally,
but it's highly recommended,

00:50:41.980 --> 00:50:45.710
you can implement some delegate
methods to add polish to

00:50:45.710 --> 00:50:47.550
your Quick Look experience.

00:50:47.680 --> 00:50:54.160
So to conclude this presentation,
I will call Jean-Pierre on stage.

00:50:54.160 --> 00:50:55.790
Thank you, Julien.

00:51:00.950 --> 00:51:04.110
So the first, Julien showed you how to
write a Quick Look plugin,

00:51:04.110 --> 00:51:06.120
and the second,
Julien showed you how to use

00:51:06.740 --> 00:51:10.370
Quick Look in your application.

00:51:10.540 --> 00:51:13.990
It's important that you write a
Quick Look plugin so that your

00:51:14.080 --> 00:51:17.680
documents can be beautiful everywhere.

00:51:17.950 --> 00:51:21.140
In the Finder, in Mail, in iCal,
and in all the applications

00:51:21.140 --> 00:51:24.180
that are going to be using
Quick Look in the future.

00:51:24.300 --> 00:51:26.000
Please polish your thumbnails.

00:51:26.000 --> 00:51:28.690
They need to look absolutely fantastic.

00:51:28.810 --> 00:51:30.260
Also focus on performance.

00:51:30.450 --> 00:51:33.470
You want to make sure that
they are generated really,

00:51:33.470 --> 00:51:34.980
really, really fast.

00:51:35.830 --> 00:51:38.400
Now, we also want you to use
Quick Look in your application,

00:51:38.400 --> 00:51:41.020
of course,
so that you can show all types of

00:51:41.140 --> 00:51:47.790
documents within your application with
nice thumbnails and nice previews.

00:51:49.420 --> 00:51:51.510
So where to get help?

00:51:51.520 --> 00:51:52.900
You can find documentation.

00:51:53.030 --> 00:51:57.500
Our current documentation
online is Leopard documentation.

00:51:57.500 --> 00:52:00.670
We are working on updating
it for Snow Leopard.

00:52:00.770 --> 00:52:05.160
Our header files also contain
quite a bit of information.

00:52:05.380 --> 00:52:06.600
We have a public mailing list.

00:52:06.650 --> 00:52:08.440
So remember,
this is a public mailing list,

00:52:08.440 --> 00:52:12.810
so you should only be asking
questions about the Leopard API.

00:52:13.020 --> 00:52:17.450
You're welcome to ask us questions,
and we'll answer as soon as we can.

00:52:17.660 --> 00:52:20.780
You can also attend the
Spotlight and Quick Look Lab.

00:52:20.850 --> 00:52:22.790
We will all be there
answering your questions.

00:52:22.850 --> 00:52:25.940
This is tomorrow at 5:00 p.m.

00:52:26.080 --> 00:52:29.630
You can watch the ImageKit session,
session 735,

00:52:29.630 --> 00:52:33.520
if you want to learn more about
the ImageKit image browser.

00:52:33.660 --> 00:52:35.520
And if you have any
other type of questions,

00:52:35.520 --> 00:52:38.720
you can contact our sharing
technologies evangelist,

00:52:38.750 --> 00:52:40.480
Matt Drench.

00:52:40.510 --> 00:52:44.230
And of course, you can find us during the
conference and come and talk to us.

00:52:44.370 --> 00:52:49.320
We'll be tomorrow night at the little
party at the Yerba Buena Garden,

00:52:49.350 --> 00:52:51.820
and we'll be around the
show during the week.

00:52:51.960 --> 00:52:55.350
Thank you for coming,
and have fun with Quick Look.