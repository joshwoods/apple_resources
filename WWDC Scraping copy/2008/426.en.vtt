WEBVTT

00:00:20.140 --> 00:00:23.550
Welcome everyone to creating
Ruby on Rails Applications for

00:00:23.570 --> 00:00:25.480
Safari on iPhone and the Desktop.

00:00:25.530 --> 00:00:27.480
My name's Luke Burton.

00:00:27.530 --> 00:00:30.420
Are you all excited to be in
the Ruby on Rails session?

00:00:30.420 --> 00:00:32.260
Yes!

00:00:32.410 --> 00:00:35.130
Developers, developers, developers!

00:00:36.770 --> 00:00:37.800
Yes, I know.

00:00:37.800 --> 00:00:40.160
So, you know,
you'll have to forgive me because,

00:00:40.160 --> 00:00:42.790
first of all, I'm Australian,
so you're probably not going to

00:00:42.790 --> 00:00:45.940
understand a lot of what I'm saying,
but if you don't understand something,

00:00:45.940 --> 00:00:46.920
just look around.

00:00:46.920 --> 00:00:49.520
There's probably an Australian sitting
next to you who can do the translation.

00:00:49.520 --> 00:00:51.500
There's a lot of us here.

00:00:52.840 --> 00:00:56.520
Another reason I'm not really feeling
myself is normally during WWDC,

00:00:56.520 --> 00:00:59.890
I would see a lot of the sessions
through the bottom of a pint glass,

00:00:59.950 --> 00:01:03.330
which is, I'm sure, how some of you guys
have seen the sessions,

00:01:03.490 --> 00:01:05.960
but I'm very tired at the
moment because on Monday,

00:01:05.960 --> 00:01:08.500
my wife gave birth to a little baby girl.

00:01:08.500 --> 00:01:09.810
Thank you.

00:01:15.350 --> 00:01:17.760
This is being recorded,
so in the year 2020,

00:01:17.760 --> 00:01:20.120
I'm going to bring up this
session and embarrass her

00:01:20.120 --> 00:01:21.560
mightily at one of her birthdays.

00:01:21.560 --> 00:01:26.230
And I haven't had much sleep,
so forgive me if I start

00:01:26.230 --> 00:01:28.020
going off the rails.

00:01:29.590 --> 00:01:31.600
Yes.

00:01:31.790 --> 00:01:33.500
All right, so let's go on to our agenda.

00:01:33.500 --> 00:01:36.380
What are we going to talk
about in this session?

00:01:36.380 --> 00:01:38.460
We're going to, first of all,
have a look at a little bit

00:01:38.460 --> 00:01:39.510
of a fairy tale on Rails.

00:01:39.510 --> 00:01:46.970
Then we're going to move on to a
discussion of inside Ruby on Rails,

00:01:46.970 --> 00:01:46.970
talk about the technology
in a little bit more detail.

00:01:47.560 --> 00:01:50.060
Then we're going to get our
feet wet with actually coding a

00:01:50.060 --> 00:01:52.680
real Ruby on Rails application.

00:01:53.380 --> 00:01:56.280
Then we're going to learn about how we
can ask some sophisticated questions

00:01:56.280 --> 00:01:59.310
about data using Ruby on Rails.

00:01:59.560 --> 00:02:01.740
After that,
we'll learn how to present the answers

00:02:01.990 --> 00:02:04.740
that we got from asking those questions.

00:02:05.210 --> 00:02:07.800
And then we'll talk about
how Rails faces the world.

00:02:07.820 --> 00:02:10.530
Deployment.

00:02:11.280 --> 00:02:12.310
So are you in the right session?

00:02:12.320 --> 00:02:15.680
Well, there's no such thing as
a wrong session at WWDC,

00:02:15.680 --> 00:02:19.820
but you might take more out of
this session than others if you've

00:02:19.820 --> 00:02:23.180
never heard of Ruby on Rails,
or if you've only dabbled with

00:02:23.310 --> 00:02:26.960
Rails but you haven't really dived in
and done a lot with the technology,

00:02:26.960 --> 00:02:30.320
or perhaps you're a Rails developer
that's new to Mac OS X.

00:02:30.320 --> 00:02:33.200
If you're a more advanced developer,
we hope you'll take something

00:02:33.200 --> 00:02:35.590
out of this session as well,
and we've got some great

00:02:35.590 --> 00:02:38.060
Q&A lined up at the end,
so you can ask some very hairy

00:02:38.060 --> 00:02:40.860
questions then and get all your
answers hopefully satisfied.

00:02:43.630 --> 00:02:46.940
So let's talk about our
fairy tale on Rails.

00:02:46.960 --> 00:02:50.700
Now, Apple has a lot of money.

00:02:50.720 --> 00:02:53.420
We've got $19 billion in the bank.

00:02:53.700 --> 00:02:57.700
It's probably like $22 billion now,
based on the number of MacBook Airs

00:02:57.700 --> 00:02:59.740
I've seen in the audience.

00:02:59.740 --> 00:03:01.580
So...

00:03:02.090 --> 00:03:04.340
We need to sort of keep
track of all this money,

00:03:04.340 --> 00:03:08.000
and Joel and I, my co-presenter,
who I'll introduce shortly,

00:03:08.130 --> 00:03:10.700
were approached to sort
of write a really simple,

00:03:10.700 --> 00:03:14.820
small website that was going to help
keep track of a very important area where

00:03:15.070 --> 00:03:16.550
some of this money is spent at Apple.

00:03:16.560 --> 00:03:18.840
And we had to develop it quickly.

00:03:18.840 --> 00:03:21.190
It had to be accessible
on Safari on the Desktop,

00:03:21.190 --> 00:03:23.420
and it had to be
accessible on the iPhone.

00:03:23.420 --> 00:03:27.050
And it was going to be a very, you know,
basically a business-critical,

00:03:27.140 --> 00:03:29.960
mission-critical financial
application for Apple.

00:03:31.580 --> 00:03:35.330
We were rewarded very handsomely
out of that pool of $19 billion.

00:03:35.410 --> 00:03:39.690
Both Joel and I received $10
gift vouchers to Cafe Max.

00:03:41.880 --> 00:03:45.540
And I sort of skimped and got
the $4 salad and pocketed the

00:03:45.540 --> 00:03:49.410
$6 to spend on other things.

00:03:49.750 --> 00:03:52.580
We had a choice of languages that we
could develop this application in,

00:03:52.580 --> 00:03:53.040
naturally.

00:03:53.040 --> 00:03:54.890
We don't have to develop
it in Ruby on Rails,

00:03:54.930 --> 00:03:57.950
but, you know, Perl?

00:04:05.650 --> 00:04:06.960
We're old-time Perl developers.

00:04:06.960 --> 00:04:09.350
We're not necessarily
ragging on Perl here,

00:04:09.890 --> 00:04:13.060
but we're smart guys as well,
if I don't mind saying so.

00:04:13.060 --> 00:04:15.790
And every time we end up writing Perl,
we end up writing code

00:04:15.790 --> 00:04:18.920
that looks like this,
and we end up getting sort of knocks on

00:04:18.920 --> 00:04:22.630
our door years later from disgruntled
people who have to maintain our code.

00:04:22.640 --> 00:04:25.860
And just as an aside,
does anyone know what this code does?

00:04:28.440 --> 00:04:30.000
That's right.

00:04:30.010 --> 00:04:31.060
Wait, what was that?

00:04:31.060 --> 00:04:33.640
Something with a regular expression.

00:04:33.640 --> 00:04:36.000
Well, yeah,
it's got little slashes in it.

00:04:36.000 --> 00:04:37.990
Nice one.

00:04:38.350 --> 00:04:40.960
It's got a while loop in there as well.

00:04:40.990 --> 00:04:43.480
It apparently prints out prime numbers.

00:04:44.050 --> 00:04:47.290
So, yes,
of course it prints our prime numbers.

00:04:47.290 --> 00:04:51.110
We could have used PHP as well, but,
you know, it is very much everything

00:04:51.110 --> 00:04:54.360
in the kitchen sink language,
grown very organically over time,

00:04:54.360 --> 00:04:58.250
and when a need comes up in PHP,
they sort of put another function in,

00:04:58.250 --> 00:05:02.550
and are you looking for a haystack and
a needle or a needle in a haystack?

00:05:02.710 --> 00:05:03.800
Can I remember this function?

00:05:03.800 --> 00:05:08.680
We've got something like 3,500 functions
that are in the public namespace,

00:05:08.900 --> 00:05:11.780
and it makes it easy to write
an application quickly but

00:05:11.780 --> 00:05:13.680
hard to maintain it later on.

00:05:14.040 --> 00:05:16.840
Much in the same way as Perl does.

00:05:16.920 --> 00:05:19.240
J2EE, that's a heavyweight language.

00:05:19.240 --> 00:05:22.210
There's a lot of, you know,
lifting there, or heavyweight framework,

00:05:22.210 --> 00:05:22.800
I should say.

00:05:22.990 --> 00:05:25.280
It's good for some things,
but in our case, you know,

00:05:25.280 --> 00:05:28.890
we had this mission-critical
financial thing we had to sort out,

00:05:29.000 --> 00:05:32.490
and we didn't have time to go
through J2EE and skill ourselves up

00:05:32.580 --> 00:05:34.050
and go on a long development cycle.

00:05:34.060 --> 00:05:37.850
It wasn't really
appropriate for our project.

00:05:40.050 --> 00:05:41.340
I didn't really hear that.

00:05:41.450 --> 00:05:43.280
Something to do with C#.

00:05:43.370 --> 00:05:46.300
It's like one of those-- it's got
something to do with developers,

00:05:46.300 --> 00:05:49.580
developers, developers, actually,
that particular language.

00:05:49.600 --> 00:05:52.030
Yeah, we're not talking about C# today.

00:05:52.330 --> 00:05:54.890
Anyway,
so we can talk about our secret project,

00:05:54.890 --> 00:05:56.110
though, that we're involved in.

00:05:56.170 --> 00:05:58.310
And for that,
I'd like to switch to the demo machine.

00:05:58.340 --> 00:06:03.420
The demo machine.

00:06:09.100 --> 00:06:13.910
Apple has $19 billion in the bank,
and a small but significant proportion of

00:06:13.910 --> 00:06:16.770
it is spent on playing World of Warcraft.

00:06:17.130 --> 00:06:21.320
And we can't have our guildmaster
in the dark about what's going

00:06:21.320 --> 00:06:22.510
on in the World of Warcraft bank.

00:06:22.560 --> 00:06:25.410
So we sat down,
we selected Ruby on Rails,

00:06:25.410 --> 00:06:30.870
and we developed this kind of like online
banking application for World of Warcraft

00:06:30.870 --> 00:06:33.200
as an example of what you can do.

00:06:33.200 --> 00:06:36.170
And first thing I'll point out is
we will have sample code available

00:06:36.170 --> 00:06:37.660
for this whole application.

00:06:37.660 --> 00:06:40.510
So we're not going to drill through
everything piece by piece here,

00:06:40.510 --> 00:06:42.960
but we can give you the sample
code for this and you'll see it

00:06:42.960 --> 00:06:44.310
and be able to have a look at it.

00:06:45.420 --> 00:06:50.100
Everything on this page is
CSS apart from the images.

00:06:50.240 --> 00:06:54.140
So all those gradients and drop shadows
and reflections and all this other stuff

00:06:54.140 --> 00:06:56.290
we've implemented in CSS using WebKit.

00:06:56.300 --> 00:07:00.010
We can go across to our gold history
page here and find out what's

00:07:00.110 --> 00:07:02.090
been going on in our guild bank.

00:07:02.130 --> 00:07:04.100
Have people been depositing,
withdrawing things?

00:07:04.100 --> 00:07:08.060
We see here somebody made a very sizable
contribution sometime along in March.

00:07:08.060 --> 00:07:13.520
So we can actually click and drag
there and get it all populated below.

00:07:13.840 --> 00:07:17.720
And we can actually scroll
down and see that 2000 gold was

00:07:17.720 --> 00:07:19.810
deposited by a player called Null.

00:07:19.810 --> 00:07:21.840
And that's his real name, Null,
because we've, you know,

00:07:21.840 --> 00:07:24.770
it's all about punning on
Apple related things in iGuild.

00:07:25.000 --> 00:07:27.390
Now if I go across to the
inventory history tab,

00:07:27.470 --> 00:07:31.370
I can see the items that have been
going in and out of our guild bank.

00:07:31.420 --> 00:07:34.630
And you'll notice that when we have
a very large selection of items

00:07:34.630 --> 00:07:37.520
here that we're looking through,
when you page down quickly,

00:07:37.560 --> 00:07:41.400
it's pulling in pages of data as
it needs to rather than having

00:07:41.400 --> 00:07:43.210
them all loaded in to start with.

00:07:43.220 --> 00:07:45.630
So this is a very efficient way
of getting the data in our nice

00:07:45.830 --> 00:07:47.550
JavaScript graphing library here.

00:07:47.560 --> 00:07:49.980
We've got individual player reports.

00:07:49.980 --> 00:07:54.260
So our guild master who's very concerned
about how each character is doing

00:07:54.260 --> 00:07:59.200
can go in and find out about Boris,
the level 31 Tauren Druid,

00:07:59.200 --> 00:08:02.980
find out what he has been or she has been
withdrawing and depositing into our bank.

00:08:02.980 --> 00:08:06.710
We've also got a little player
rankings page so we can see aggregate

00:08:06.720 --> 00:08:10.490
information about the whole bank,
which is pretty cool with lots of

00:08:10.540 --> 00:08:12.560
little graphs in there as well.

00:08:13.220 --> 00:08:16.510
One of the cool things is we wrote
an iPhone version for it as well.

00:08:16.520 --> 00:08:20.050
So this is what it looks
like on the iPhone and,

00:08:20.150 --> 00:08:23.600
you know, this was my first iPhone
application and it took me,

00:08:23.600 --> 00:08:25.720
you know, a couple of days to
get my head around it.

00:08:25.720 --> 00:08:28.980
But once my head got around it,
it was very easy to develop with.

00:08:28.980 --> 00:08:31.350
So I can go across into
the gold history here,

00:08:31.350 --> 00:08:33.460
see the same graph that I saw before.

00:08:33.460 --> 00:08:35.720
Something new you can do in the
iPhone 2.0 software that you

00:08:35.720 --> 00:08:37.140
couldn't do in previous versions.

00:08:37.140 --> 00:08:41.700
I can actually tap and drag along here
to select a region and have it populate.

00:08:41.800 --> 00:08:42.600
Very nice.

00:08:42.600 --> 00:08:44.130
class.

00:08:44.410 --> 00:08:45.400
Click back.

00:08:45.400 --> 00:08:46.200
Got a nice little transition.

00:08:46.200 --> 00:08:48.800
Those are all done in CSS as well.

00:08:48.810 --> 00:08:53.400
I can also see player reports,
same sort of thing.

00:08:53.400 --> 00:08:56.600
All this is Ajaxified,
so there's no whole page

00:08:56.600 --> 00:08:58.220
loads going on here.

00:08:58.300 --> 00:08:59.620
Back.

00:08:59.620 --> 00:09:03.300
We've got our other graph here as well.

00:09:03.300 --> 00:09:05.530
A whole bunch of things.

00:09:06.480 --> 00:09:09.520
So that is the little demo
application that we'll be taking

00:09:09.520 --> 00:09:12.290
you through parts of today.

00:09:12.360 --> 00:09:15.160
If we can switch back to the slides.

00:09:19.000 --> 00:09:21.140
In the next section,
I'm going to hand it over to

00:09:21.610 --> 00:09:25.200
my colleague Joel Young to talk
about inside Ruby on Rails.

00:09:28.720 --> 00:09:30.700
Thanks, Luke.

00:09:30.700 --> 00:09:31.490
Hi, my name is Joel Young.

00:09:31.490 --> 00:09:33.970
I work on Mac OS X in the
integration department.

00:09:33.970 --> 00:09:38.700
I'm going to be talking about
what is inside of Ruby on Rails.

00:09:38.800 --> 00:09:44.170
You know, we saw,
you saw we came up with a nice

00:09:44.170 --> 00:09:46.420
little demo application for you,
and we were able to build

00:09:46.420 --> 00:09:46.420
this in a few short weeks,
and

00:09:47.170 --> 00:09:51.520
So I'm going to talk about just
what makes Rails so productive.

00:09:51.850 --> 00:09:54.880
So to answer this,
I'm going to address two questions here.

00:09:54.880 --> 00:10:00.960
One is just what is Ruby on Rails,
and how is it structured to make your

00:10:00.960 --> 00:10:04.600
development fast yet maintainable?

00:10:04.600 --> 00:10:09.370
And why, in particular,
would you want to use it on Mac OS X?

00:10:10.860 --> 00:10:16.140
So Rails promises to be web
development that doesn't hurt.

00:10:16.140 --> 00:10:21.080
It achieves this by
using a few big ideas.

00:10:21.130 --> 00:10:23.860
So I'm going to talk about
just two of these right now.

00:10:23.870 --> 00:10:28.950
One is the Model-View-Controller pattern,
which helps you keep your display code

00:10:29.130 --> 00:10:31.720
separate from your business logic.

00:10:32.000 --> 00:10:35.460
and a little something called
domain-specific language,

00:10:35.480 --> 00:10:40.470
which is a way to keep your code
short and still understandable.

00:10:41.300 --> 00:10:43.000
So first, Model-View-Controller.

00:10:43.000 --> 00:10:44.740
You might be familiar with this.

00:10:44.770 --> 00:10:48.000
The idea here is that you don't
want to be making database

00:10:48.000 --> 00:10:50.310
connections inside of your templates.

00:10:50.550 --> 00:10:53.110
Similarly,
you don't want to be spitting out

00:10:53.120 --> 00:10:58.950
HTML code from the bits of functions
that handle your business logic.

00:10:59.110 --> 00:11:01.690
If you do this even for a
medium-sized application,

00:11:01.820 --> 00:11:05.710
it's a recipe for disaster down the line.

00:11:06.210 --> 00:11:10.140
So, Modiview Controller solves
this by having a view layer,

00:11:10.290 --> 00:11:12.820
which contains everything
that the user is going to see,

00:11:12.820 --> 00:11:16.490
separate from the model layer,
which contains the

00:11:16.500 --> 00:11:18.480
structure of your data.

00:11:18.500 --> 00:11:22.820
So, in between them,
you have the controller mediating things.

00:11:22.880 --> 00:11:27.250
It receives the user input,
translates them over to requests

00:11:27.250 --> 00:11:31.060
for data from the model,
and once it has that data,

00:11:31.060 --> 00:11:33.220
it then updates the view.

00:11:33.220 --> 00:11:36.220
So, how does Ruby on Rails handle this?

00:11:36.220 --> 00:11:38.840
How does Ruby on Rails structure this?

00:11:38.860 --> 00:11:40.010
So, let's look at Ruby on Rails.

00:11:40.620 --> 00:11:49.690
and David Aron.

00:11:50.700 --> 00:11:50.840
You have ActiveRecord.

00:11:50.840 --> 00:11:50.840
That's the name Rails uses
for the model layer.

00:11:50.840 --> 00:11:50.860
ActiveRecord is a thin
layer around the database.

00:11:51.270 --> 00:11:58.270
Generally, you're going to have one table
in your database translates

00:11:58.440 --> 00:12:00.840
to one ActiveRecord class.

00:12:00.840 --> 00:12:05.450
So now, the ActionController is the
name of the controller layer.

00:12:05.460 --> 00:12:07.260
So when you get a
request from the browser,

00:12:07.300 --> 00:12:08.800
it goes through the web server.

00:12:08.800 --> 00:12:11.360
The web server pushes
it through to Rails,

00:12:11.360 --> 00:12:16.170
and Rails dispatches it to the
proper ActionController class.

00:12:16.200 --> 00:12:20.620
So the controller will then
request the data from ActiveRecord.

00:12:22.450 --> 00:12:26.470
So then we have Action View,
name of the view layer.

00:12:26.670 --> 00:12:30.300
So once the controller has
the data from Active Record,

00:12:30.320 --> 00:12:35.220
it'll push it through to the
correct template and Action View,

00:12:35.220 --> 00:12:39.190
where it's composited,
sent back as a response to the browser.

00:12:40.420 --> 00:12:43.430
Next big idea here is
domain-specific language.

00:12:43.540 --> 00:12:46.540
So it's an optimized
vocabulary for talking about

00:12:46.540 --> 00:12:48.970
some particular problem set.

00:12:49.040 --> 00:12:51.790
You could think of this as jargon.

00:12:52.000 --> 00:12:53.820
Except in a good way, right?

00:12:54.030 --> 00:12:58.600
So the classic example of this is
making a complicated order at Starbucks.

00:12:58.600 --> 00:13:04.050
I'm not a big coffee person myself,
but I gather that Grande 2-Pump Vanilla

00:13:04.050 --> 00:13:08.850
Non-Fat Extra Hot Latte is about the
most efficient way that you could

00:13:08.930 --> 00:13:11.930
express that specific drink of coffee.

00:13:12.410 --> 00:13:14.050
So how does Ruby on Rails do this?

00:13:14.070 --> 00:13:16.370
Here's a few examples real quickly.

00:13:16.570 --> 00:13:18.590
So let's say you want to
find an author named George.

00:13:18.600 --> 00:13:22.920
You would call simply
author.findByFirstName George.

00:13:23.320 --> 00:13:26.340
In your model, let's say you want to
define a relationship to

00:13:26.470 --> 00:13:27.960
another publications model.

00:13:27.960 --> 00:13:32.350
So you might say that it
has many publications.

00:13:32.620 --> 00:13:35.600
Or, let's say,
before you show any page on the site,

00:13:35.600 --> 00:13:38.280
you want to authenticate users, unless,
of course,

00:13:38.280 --> 00:13:39.600
they're on the login page already.

00:13:39.600 --> 00:13:42.930
You would say, before filter,
authenticate, accept login.

00:13:43.020 --> 00:13:45.560
Very clear,
very easy to understand just what

00:13:45.560 --> 00:13:47.330
these lines of code are doing.

00:13:49.050 --> 00:13:52.010
So Ruby on Rails was
developed using Mac OS X.

00:13:52.010 --> 00:13:56.300
This is David Heinemeier Hansen,
the creator of Ruby on Rails,

00:13:56.300 --> 00:14:01.540
and when he talks about his motivation
for building a framework that is

00:14:01.580 --> 00:14:05.270
meant to increase programmer joy,
he says this.

00:14:05.500 --> 00:14:08.290
For all the time I've been
building Ruby on Rails,

00:14:08.340 --> 00:14:09.740
I've been using a Mac.

00:14:09.900 --> 00:14:13.680
I wouldn't have probably built
it if I didn't enjoy my computer.

00:14:14.460 --> 00:14:17.300
And you can see this reflected
in the Rails community.

00:14:17.300 --> 00:14:20.290
It's very Mac heavy.

00:14:20.550 --> 00:14:32.300
And Apple has recognized this by
bundling it into Mac OS X as of Leopard.

00:14:32.740 --> 00:14:36.090
So that means that for development,
you have everything you need to

00:14:36.100 --> 00:14:38.500
very quickly build your application.

00:14:38.570 --> 00:14:42.120
You have the Ruby language,
which comes bundled on Mac OS X with a

00:14:42.120 --> 00:14:45.680
large number of useful Ruby libraries.

00:14:45.730 --> 00:14:48.660
You have the Ruby on
Rails framework itself.

00:14:49.500 --> 00:14:52.420
Now, for development,
you don't need a heavyweight

00:14:52.560 --> 00:14:54.600
database application.

00:14:54.690 --> 00:14:59.550
And SQLite, which comes bundled as well,
is perfect for quickly

00:14:59.590 --> 00:15:02.240
bringing up your applications.

00:15:02.390 --> 00:15:06.800
And now we have, as Luke showed you,
the iPhone simulator.

00:15:07.160 --> 00:15:10.400
which will allow you to make
sure that the iPhone version

00:15:10.400 --> 00:15:12.600
of your website looks great.

00:15:13.180 --> 00:15:17.370
Similarly, for deployment,
Mac OS X Server is a great platform

00:15:17.490 --> 00:15:20.030
for deploying your Rails applications.

00:15:20.130 --> 00:15:23.650
It comes with Ruby and
the Rails framework.

00:15:24.070 --> 00:15:28.050
And since you're going to be receiving
many requests from different users

00:15:28.170 --> 00:15:31.060
potentially at the same time,
you'll want a more

00:15:31.060 --> 00:15:35.580
heavyweight database server,
and it comes with MySQL installed.

00:15:36.140 --> 00:15:39.910
Then for managing the many
Rails applications that

00:15:39.930 --> 00:15:43.720
you might have running,
the server admin tools give you a nice

00:15:43.720 --> 00:15:46.880
GUI way to handle all these things.

00:15:49.690 --> 00:15:54.980
So, for a little taste of what it's like
to actually build a Rails application,

00:15:54.980 --> 00:15:57.470
I'm going to hand it back to Luke.

00:16:04.300 --> 00:16:07.340
I'd just like to point out
that's the first time Joel's

00:16:07.340 --> 00:16:09.280
ever done a public presentation,
and you wouldn't really know it,

00:16:09.280 --> 00:16:09.600
would you?

00:16:09.640 --> 00:16:12.680
He's good.

00:16:16.900 --> 00:16:18.130
All right, can we please switch back?

00:16:18.210 --> 00:16:19.700
Oh, no, no,
don't switch the demo machine.

00:16:19.700 --> 00:16:20.520
Ignore what I just said.

00:16:20.520 --> 00:16:23.460
All right,
so talking about how we exactly

00:16:23.660 --> 00:16:27.340
designed this particular
Ruby on Rails application,

00:16:27.340 --> 00:16:29.810
we started off with a data source,
in this case,

00:16:29.810 --> 00:16:32.810
the World of Warcraft Armory site,
which you can go to to get

00:16:32.810 --> 00:16:36.100
all sorts of information for
your World of Warcraft guild.

00:16:36.990 --> 00:16:39.300
Unfortunately,
the data is structured in a

00:16:39.300 --> 00:16:42.210
very tabular sort of format,
so if you want to find out

00:16:42.210 --> 00:16:45.740
information about trends or
aggregate information or sort of do

00:16:45.740 --> 00:16:49.430
those kind of more complex queries,
you're sort of a little bit out of luck,

00:16:49.430 --> 00:16:52.830
which frustrated our guild
master no end with his iron rule

00:16:52.830 --> 00:16:54.760
that he exerts over our guild.

00:16:54.760 --> 00:16:58.450
Luckily, behind the scenes,
when you view the code,

00:16:58.560 --> 00:17:01.180
it's actually pretty much all XML.

00:17:01.180 --> 00:17:05.180
So the way they've structured the site
is they give you XML and a style sheet,

00:17:05.180 --> 00:17:06.860
and there's an in-browser.

00:17:06.860 --> 00:17:10.790
So what you can do to harvest the data
from this site is just pull it down,

00:17:10.990 --> 00:17:14.190
and you've got all this lovely
XML that you can use to aggregate

00:17:14.290 --> 00:17:17.640
things and repurpose this
website for other purposes.

00:17:19.260 --> 00:17:21.640
Naturally, this means you've got to
import the data somehow.

00:17:21.640 --> 00:17:25.340
So we had a simple
script-based process here.

00:17:25.340 --> 00:17:28.010
We had the Blizzard Armory
making HTTP requests to it

00:17:28.010 --> 00:17:31.290
using our import script,
then populating some simple

00:17:31.290 --> 00:17:32.960
active record tables.

00:17:32.960 --> 00:17:36.740
In this case, we partitioned things off
into an inventory log,

00:17:36.740 --> 00:17:39.680
an item, and a player,
an inventory log being one

00:17:39.680 --> 00:17:43.800
transaction in the guild bank,
so like a withdrawal or a deposit.

00:17:43.800 --> 00:17:46.760
And items and players are
fairly self-explanatory.

00:17:47.950 --> 00:17:51.060
And backing all that up,
we just chose a simple SQLite database.

00:17:51.060 --> 00:17:55.950
Now, to get the XML data in,
a really cool thing you can use is

00:17:55.950 --> 00:17:57.660
this great little gem called HBricot.

00:17:57.660 --> 00:17:59.560
It's pronounced HBricot.

00:17:59.570 --> 00:18:03.280
We actually had to ask around to
someone who had seen the creator,

00:18:03.280 --> 00:18:06.790
WhyTheLuckyStiff,
to find out how this was pronounced.

00:18:06.800 --> 00:18:08.180
And I don't know if that's wise.

00:18:08.280 --> 00:18:11.300
I don't know if Y's name on his birth
certificate is WhyTheLuckyStiff,

00:18:11.300 --> 00:18:13.140
but it would be pretty cool if it was.

00:18:16.360 --> 00:18:18.100
And then we have the parsing joy.

00:18:18.100 --> 00:18:21.860
So it allows you to parse XML using
XPath or CSS-style selectors,

00:18:21.860 --> 00:18:24.810
so similar to jQuery,
if you've ever done any

00:18:24.810 --> 00:18:27.100
JavaScript work with that.

00:18:27.560 --> 00:18:29.700
and it's pretty cool because
it's bundled with Mac OS X,

00:18:29.700 --> 00:18:31.100
so you don't need to go
hunting for this library.

00:18:31.100 --> 00:18:34.020
It's already available
on your system right now.

00:18:34.750 --> 00:18:35.580
TextMate.

00:18:35.590 --> 00:18:36.250
We love TextMate.

00:18:36.250 --> 00:18:39.220
Everyone in the
Rails community loves TextMate.

00:18:39.220 --> 00:18:40.830
The only people who don't
love TextMate are people on

00:18:40.830 --> 00:18:42.140
Windows because they can't use it.

00:18:42.180 --> 00:18:45.340
It's available from Macromates.com.

00:18:45.340 --> 00:18:48.800
And it's really an editor that's
grown up and around Rails,

00:18:48.800 --> 00:18:49.210
I think.

00:18:49.250 --> 00:18:51.230
It kind of comes from
the Emacs school of,

00:18:51.230 --> 00:18:54.810
you know, provide plug-ins and flexible
architectures so that

00:18:54.830 --> 00:18:58.600
third-party developers can add
absolutely whatever they want.

00:18:59.360 --> 00:19:03.840
And that's, you know,
the Rails community has really

00:19:03.840 --> 00:19:06.350
taken this editor to heart.

00:19:07.880 --> 00:19:09.940
Flexible Plugin Architecture.

00:19:09.960 --> 00:19:11.380
And it's exclusive to Mac OS X.

00:19:11.400 --> 00:19:14.390
So if you want this joy,
this wonderful work of TextMate,

00:19:14.440 --> 00:19:17.270
then you are going to have
to develop on our platform.

00:19:17.660 --> 00:19:18.500
Next up, Rails.

00:19:18.500 --> 00:19:20.400
Obviously, to develop a Rails app,
we need Rails.

00:19:20.400 --> 00:19:23.500
We need version 2.1 in this case.

00:19:23.500 --> 00:19:27.460
The demo code we can give you,
and I'm going to regret saying this,

00:19:27.460 --> 00:19:34.710
but if you want the sample code,
then please feel free to write

00:19:35.000 --> 00:19:36.630
down our email address at
the end of the presentation,

00:19:36.630 --> 00:19:36.630
and we'd be happy to share
the sample code with you.

00:19:36.730 --> 00:19:41.320
We didn't write that in Rails 2.1,
but the demo that I'm going to code

00:19:41.330 --> 00:19:43.090
up here will be written in Rails 2.1.

00:19:43.100 --> 00:19:46.960
So we'll talk a little bit about the
new features that are in Rails 2.1.

00:19:47.470 --> 00:19:49.160
If you haven't got
Rails 2.1 on your system,

00:19:49.160 --> 00:19:49.730
it's very easy.

00:19:49.740 --> 00:19:53.880
You just need to sudo gem install rails,
and that's it.

00:19:54.020 --> 00:19:56.580
You've now got Rails 2.1.

00:19:56.660 --> 00:19:59.550
Now I'd like to switch
to the demo machine.

00:20:02.700 --> 00:20:04.840
Hello, demo machine.

00:20:04.900 --> 00:20:07.620
All right,
so what we're going to do is take a

00:20:07.620 --> 00:20:12.120
very small part of this project and
sort of create it from scratch as we go.

00:20:12.410 --> 00:20:14.840
So I'm going to take
the player information,

00:20:14.840 --> 00:20:17.800
that is the list of people
who are in our guild,

00:20:17.990 --> 00:20:20.440
and I'm going to build some
simple tables and write through

00:20:20.440 --> 00:20:24.320
to a view and demonstrate how
we sort of display this data.

00:20:24.560 --> 00:20:27.620
So to get going,
I'm just going to start a

00:20:27.620 --> 00:20:29.920
simple Rails app called demo.

00:20:30.890 --> 00:20:32.900
And you can see here,
if you haven't generated

00:20:32.900 --> 00:20:34.990
Rails app before,
it does all this fantastic

00:20:35.010 --> 00:20:36.300
code generation for you.

00:20:36.300 --> 00:20:39.480
It gives you the skeletons
to work with without sort of,

00:20:39.520 --> 00:20:41.800
you know, making it hard to work with.

00:20:41.850 --> 00:20:44.800
So what we're going to do
is the very next thing,

00:20:44.810 --> 00:20:49.480
going to our Rails application,
and I'm going to generate a model.

00:20:50.350 --> 00:20:52.300
I'm going to call this
model Player Class.

00:20:52.300 --> 00:20:53.890
So this is the class of the player.

00:20:53.890 --> 00:20:57.180
You might be a mage or a warlock
or a warrior or something.

00:20:57.270 --> 00:21:00.300
That's the first model that
I'm actually going to generate.

00:21:00.320 --> 00:21:08.020
It's going to have one attribute,
which is a name,

00:21:08.020 --> 00:21:08.020
and it's going to be of type string.

00:21:08.020 --> 00:21:08.020
So if I just go, Shazam.

00:21:08.700 --> 00:21:10.840
It will generate all the
necessary things I need.

00:21:10.840 --> 00:21:12.770
In particular,
you'll notice the migration

00:21:12.770 --> 00:21:16.380
down the bottom here,
which generates the schema

00:21:16.380 --> 00:21:18.080
for our database table.

00:21:18.080 --> 00:21:22.510
In Rails 2.1, this is a timestamp,
which is a big benefit if you're working

00:21:22.510 --> 00:21:25.870
in an application with many developers,
because before it was an

00:21:25.870 --> 00:21:28.970
incrementing sort of integer,
and if two people generated

00:21:28.970 --> 00:21:31.860
a migration with the same
number and then tried to merge,

00:21:31.860 --> 00:21:33.790
it was a pain,
whereas now it's a timestamp,

00:21:33.800 --> 00:21:36.630
so you probably won't get
quite as bad conflicts,

00:21:36.630 --> 00:21:37.600
which is pretty cool.

00:21:38.700 --> 00:21:40.700
So now I'm going to
generate another model,

00:21:40.700 --> 00:21:44.180
this time called Player,
and this is obviously the player itself.

00:21:44.270 --> 00:21:47.200
So players have names,
which are of type string.

00:21:47.200 --> 00:21:48.420
They have a level.

00:21:48.420 --> 00:21:50.740
I still haven't got to level 70.

00:21:52.690 --> 00:21:54.600
which I'm embarrassed about.

00:21:54.600 --> 00:21:58.940
They have a race, which is also a string.

00:21:58.980 --> 00:22:01.280
They have a gender,
which is also a string.

00:22:01.310 --> 00:22:05.150
They also have a player class ID,
which is our key into

00:22:05.150 --> 00:22:08.110
the player class table,
and that is an integer.

00:22:08.420 --> 00:22:10.380
Did I spell all that correctly?

00:22:10.380 --> 00:22:12.690
I think I did.

00:22:14.120 --> 00:22:19.110
Now we've generated our second model,
which is the player.

00:22:19.190 --> 00:22:22.000
We just need to run these migrations
to actually create our database.

00:22:22.000 --> 00:22:26.190
So the way you do that
is just rake db migrate.

00:22:26.330 --> 00:22:27.380
That'll go away.

00:22:27.610 --> 00:22:28.990
This is a little MacBook Air, by the way.

00:22:29.200 --> 00:22:33.550
So if it takes a little bit,
it's chugging along, doing its best,

00:22:33.550 --> 00:22:34.770
I assure you.

00:22:35.120 --> 00:22:38.500
So it has gone away and
created these tables for us.

00:22:38.540 --> 00:22:40.940
One cool thing that you can
do in Rails 2.1 is there's

00:22:40.940 --> 00:22:42.980
actually a db console.

00:22:43.020 --> 00:22:46.680
So you can do script db console,
and it will drop you into

00:22:46.680 --> 00:22:50.030
the SQLite prompt of whatever
Rails environment you're currently in.

00:22:50.040 --> 00:22:55.160
And you can see the schema, for instance,
see what's actually being created there,

00:22:55.160 --> 00:22:56.540
which is pretty cool.

00:22:56.540 --> 00:23:00.500
Now, at this point,
I'm going to fire up TextMate.

00:23:01.700 --> 00:23:02.800
Let me grab everything here.

00:23:02.800 --> 00:23:04.200
Can you see that OK?

00:23:04.200 --> 00:23:04.900
OK, maybe not.

00:23:04.900 --> 00:23:07.240
On the left-hand side,
there's actually the demo app.

00:23:07.240 --> 00:23:12.360
So what I'm going to do now is
drill into my model classes.

00:23:12.360 --> 00:23:13.600
I'm going to start with the player class.

00:23:13.600 --> 00:23:16.620
Now, this is all the skeleton code
that's been generated for you.

00:23:16.620 --> 00:23:19.710
So if you come from other
generated code backgrounds,

00:23:19.720 --> 00:23:23.940
you might be pleasantly surprised to
not see 400 lines of crazy code in here.

00:23:23.940 --> 00:23:26.440
This is the generated code
that was actually put for you.

00:23:26.440 --> 00:23:28.360
All the magic is in the background.

00:23:28.370 --> 00:23:32.680
So for that particular player,
we're going to say this

00:23:32.680 --> 00:23:34.980
belongs to a player class.

00:23:34.980 --> 00:23:39.640
And when you're saying belongs to,
it's kind of establishing a

00:23:39.640 --> 00:23:41.760
one-to-one sort of relationship here.

00:23:41.760 --> 00:23:45.460
And you use belongs to when the class
that you're actually working with,

00:23:45.460 --> 00:23:47.660
or the table that you're working with,
is the table that

00:23:47.660 --> 00:23:48.980
contains the foreign key.

00:23:48.980 --> 00:23:51.840
So player contains the player class ID.

00:23:51.840 --> 00:23:56.500
Therefore, we're using belongs to here,
as opposed to has one, for instance.

00:23:56.500 --> 00:23:58.380
I'm going to save that.

00:23:58.400 --> 00:24:03.840
Player class, in this case,
I'm going to say it as many playas.

00:24:04.350 --> 00:24:05.960
And I'm going to add an
additional thing here.

00:24:05.960 --> 00:24:10.410
So whenever we query for multiple
players through the player class,

00:24:10.420 --> 00:24:12.770
I'm going to specify an order,
which is of name.

00:24:12.940 --> 00:24:15.240
I'm going to order everything by name.

00:24:15.240 --> 00:24:16.970
Nice and easy.

00:24:17.420 --> 00:24:20.230
So,
now that we've got our database set up,

00:24:20.300 --> 00:24:24.840
we've got a simple model system set up,
what we need to do now is actually

00:24:24.840 --> 00:24:26.300
write a script to import data.

00:24:26.520 --> 00:24:31.500
So, I'm going to just touch a
little import script here,

00:24:31.500 --> 00:24:31.500
import.rb.

00:24:31.810 --> 00:24:34.390
And I'm going to, first of all,
I'll show you the XML that

00:24:34.390 --> 00:24:35.700
we'll actually be importing.

00:24:35.710 --> 00:24:38.530
So this is kind of cut down a little
bit from what's on the Blizzard website,

00:24:38.540 --> 00:24:42.640
but it's this big glob of XML,
and it's essentially just a page

00:24:42.640 --> 00:24:46.010
root element and then multiple
character elements underneath that,

00:24:46.010 --> 00:24:49.220
and they contain the
attributes encoded as sort of,

00:24:49.220 --> 00:24:51.330
you know, key values in there.

00:24:51.540 --> 00:24:56.400
So we're going to work
with that particular class,

00:24:56.400 --> 00:24:56.400
and it's pretty easy.

00:24:56.700 --> 00:24:59.350
What I'm going to start
with is require hbricot.

00:24:59.390 --> 00:25:01.100
Make sure that's in there.

00:25:01.170 --> 00:25:02.340
Then we're going to start a document.

00:25:02.470 --> 00:25:06.490
It's going to be a new
hbricot XML document.

00:25:06.490 --> 00:25:11.060
And I'm going to open
that file of players,

00:25:11.060 --> 00:25:11.060
which is located...

00:25:11.240 --> 00:25:12.730
Just there.

00:25:12.950 --> 00:25:15.200
So now we've got a hbrecord
document we can query.

00:25:15.260 --> 00:25:19.330
The query we want to make,
we want to search across page,

00:25:19.890 --> 00:25:21.700
across character.

00:25:21.710 --> 00:25:25.350
For each of those characters,
we will do something.

00:25:25.350 --> 00:25:29.140
And each character inside this
block will be referenced by C.

00:25:29.140 --> 00:25:32.980
So we're just going to create
a player each time we encounter

00:25:32.980 --> 00:25:34.830
one of these characters.

00:25:34.840 --> 00:25:38.180
The naming is slightly
sort of different here.

00:25:38.180 --> 00:25:39.460
We're calling them players.

00:25:39.830 --> 00:25:41.180
Blizzard calls them characters.

00:25:41.200 --> 00:25:42.220
It doesn't really matter.

00:25:42.220 --> 00:25:47.420
So I'm going to start with a name.

00:25:47.420 --> 00:25:51.850
And I'm going to specify
a name such as that.

00:25:51.860 --> 00:25:56.680
So essentially, I'm starting a hash here,
creating each name, the name column that

00:25:56.690 --> 00:25:58.180
belongs to my player.

00:25:58.180 --> 00:26:01.450
And I'm just pulling out the
attribute name from the character

00:26:01.450 --> 00:26:03.410
element that I'm iterating over.

00:26:03.410 --> 00:26:05.120
And we're going to do four of those.

00:26:05.120 --> 00:26:10.360
So the next one is going to be the race,
followed by the level.

00:26:11.270 --> 00:26:13.590
followed by the gender.

00:26:13.720 --> 00:26:16.920
Race, level, gender.

00:26:17.120 --> 00:26:18.880
I don't need to worry about types.

00:26:18.890 --> 00:26:22.120
Rails will recognise that, for instance,
the level is an integer and will

00:26:22.180 --> 00:26:25.790
massage the type into an integer for me,
even though from an XML document,

00:26:25.790 --> 00:26:28.180
naturally it's going
to look like a string.

00:26:28.180 --> 00:26:31.590
And that last thing is I want to
associate it with the right player class.

00:26:31.890 --> 00:26:35.370
Now, the player class is just a string,
like mage or whatever,

00:26:35.370 --> 00:26:37.870
that's in the character element.

00:26:37.880 --> 00:26:41.080
What I can do is use a bit of
Rails trickery here and say

00:26:41.080 --> 00:26:46.120
associate to the player class,
find or create by name.

00:26:46.120 --> 00:26:48.670
I love it.

00:26:49.360 --> 00:26:51.500
Class.

00:26:51.520 --> 00:26:53.940
So the class is going to be mage,
and if mage exists,

00:26:53.940 --> 00:26:56.550
it will supply the ID for
mage and associate it.

00:26:56.580 --> 00:26:59.680
If mage doesn't exist,
mage will exist after this happens.

00:26:59.680 --> 00:27:01.770
Simple.

00:27:04.100 --> 00:27:08.800
Now, to actually run this script in the
context of our Rails application,

00:27:08.920 --> 00:27:11.190
what we use is the scriptrunner command.

00:27:11.280 --> 00:27:16.350
So I'm going to use scriptrunner,
and I'm going to say import.rb.

00:27:16.720 --> 00:27:19.710
and it's gonna horribly
blow up in my face.

00:27:19.770 --> 00:27:21.180
No, it doesn't.

00:27:21.190 --> 00:27:22.260
Fantastic.

00:27:22.260 --> 00:27:23.610
Yes, woo!

00:27:23.930 --> 00:27:27.130
This is basically,
I am poking the demo gods with a large

00:27:27.130 --> 00:27:31.530
stick here by trying to do so much code,
but you know, somebody needs to do it.

00:27:31.770 --> 00:27:34.540
Now I'm gonna drop into the console
and just verify that something

00:27:34.540 --> 00:27:36.060
is actually in my database.

00:27:36.090 --> 00:27:38.400
So let's find the first player.

00:27:38.410 --> 00:27:40.060
And I believe this is new for Rails 2.1.

00:27:40.140 --> 00:27:44.300
If I say player.first,
I should get the first player in there.

00:27:44.510 --> 00:27:46.100
This makes me happy.

00:27:46.130 --> 00:27:49.390
If I say player.class,
I can actually ask for

00:27:49.390 --> 00:27:51.480
the last player class.

00:27:51.480 --> 00:27:52.600
And that works out okay.

00:27:52.600 --> 00:27:54.680
Last player class that
was loaded in was rogue.

00:27:54.700 --> 00:27:58.010
Our association should work,
so based on the last player class,

00:27:58.020 --> 00:28:01.720
I should be able to ask for all the
players that are in that player class.

00:28:01.720 --> 00:28:03.900
So this should list all the rogues.

00:28:03.900 --> 00:28:05.640
There's a bunch of rogues.

00:28:05.660 --> 00:28:10.180
Now I can actually specify .count to
find out how many of them there are.

00:28:10.180 --> 00:28:13.460
And that's actually doing a
select count star from in the

00:28:13.460 --> 00:28:15.580
database behind the scenes.

00:28:15.600 --> 00:28:17.390
I can...

00:28:17.980 --> 00:28:19.500
What else can we do here?

00:28:19.510 --> 00:28:23.300
We can ask for player first,
the player class, for instance,

00:28:23.330 --> 00:28:25.700
to find out what player
class the first player is.

00:28:25.700 --> 00:28:26.800
In that case, it was a mage.

00:28:26.800 --> 00:28:29.900
So our associations are all set up,
and they seem to be working OK,

00:28:29.900 --> 00:28:31.780
which is pretty good.

00:28:32.020 --> 00:28:36.060
Oh, another thing I like about
TextMate is this feature.

00:28:36.080 --> 00:28:36.900
I love that.

00:28:36.900 --> 00:28:38.750
Makes my code nice and readable.

00:28:38.990 --> 00:28:41.880
Now it's going to execute
more quickly as well.

00:28:43.200 --> 00:28:44.100
I'm going to go on believing that.

00:28:44.210 --> 00:28:46.020
All right.

00:28:46.020 --> 00:28:50.480
So we've created our database,
and we've imported some

00:28:50.480 --> 00:28:53.400
data in a very quickly,
in a fairly straightforward manner.

00:28:53.400 --> 00:28:55.760
So the next thing we need to do
is actually create a controller.

00:28:55.760 --> 00:28:59.690
So I'm going to generate a controller,
and I'm going to just

00:28:59.690 --> 00:29:02.060
call this one player list,
just like so.

00:29:02.060 --> 00:29:04.900
That goes away,
and it dumps all the files we need.

00:29:04.900 --> 00:29:07.580
In particular,
it's created the player list controller,

00:29:07.580 --> 00:29:08.620
which is that guy there.

00:29:08.660 --> 00:29:12.980
So we're going to... Well,
let's just mock up the query that we're

00:29:13.010 --> 00:29:15.780
going to write here on the console first,
before we do anything.

00:29:15.860 --> 00:29:20.150
What I'd like to do is have kind of
like a table that says the player class,

00:29:20.160 --> 00:29:23.450
the number of players in that class,
and then optionally allow

00:29:23.450 --> 00:29:24.800
me to see those players.

00:29:24.800 --> 00:29:29.160
So I'll have like multiple headings,
Mage, Warlock, Warrior, with the counts,

00:29:29.200 --> 00:29:32.050
and then between those,
the actual players that are in them.

00:29:32.060 --> 00:29:36.430
So what I can do here
is ask for player.count,

00:29:36.470 --> 00:29:37.930
one of these aggregate functions.

00:29:37.940 --> 00:29:40.500
I can say count all,
count all the players,

00:29:41.120 --> 00:29:45.590
And then I can say group,
group them by player class.

00:29:45.830 --> 00:29:49.030
If I run that, it's going to dump a
bunch of stuff in there.

00:29:49.030 --> 00:29:51.190
Now, what exactly has this dumped?

00:29:51.200 --> 00:29:54.680
Well, let's just look at the first
thing that it dumped here,

00:29:54.680 --> 00:29:55.800
the first element.

00:29:55.920 --> 00:29:58.260
It's actually dumped us a simple array.

00:29:58.260 --> 00:30:01.900
The first object in the array is
a player class describing mage,

00:30:01.900 --> 00:30:06.530
and the second object is the count, 14,
14 mages down there.

00:30:07.180 --> 00:30:08.770
So, that's very convenient.

00:30:08.780 --> 00:30:11.980
We haven't had to touch any SQL yet
or worry about anything like that.

00:30:11.980 --> 00:30:14.020
It's all happening for
us behind the scenes.

00:30:14.290 --> 00:30:16.610
And in Rails 2.1,
you can trust that a lot of these

00:30:16.680 --> 00:30:20.020
queries have been very nicely optimized,
so we should be able to use this,

00:30:20.020 --> 00:30:23.060
you know,
without ending up in a total meltdown.

00:30:23.060 --> 00:30:27.040
So,
I'm going to go now into my controller.

00:30:28.570 --> 00:30:30.500
My player list controller.

00:30:30.500 --> 00:30:32.660
I'm going to start by
defining an index method.

00:30:32.750 --> 00:30:34.260
We'll just call an index.

00:30:34.390 --> 00:30:38.660
And I'm going to call this player
by class and then that same query.

00:30:38.660 --> 00:30:44.000
Player count all group
by the player class.

00:30:44.000 --> 00:30:47.680
This is what Joel was referring
to in domain-specific languages.

00:30:47.680 --> 00:30:50.400
This almost reads like a
sentence that describes exactly

00:30:50.460 --> 00:30:51.700
what you want to have happen.

00:30:51.700 --> 00:30:54.240
It's almost not even jargon.

00:30:54.240 --> 00:30:57.340
You could show that to a non-programmer
and they would probably be able

00:30:57.470 --> 00:31:02.550
to figure out what is going on,
more or less, which is exciting.

00:31:02.590 --> 00:31:04.400
If you're the kind of guy who
gets excited about those things,

00:31:04.400 --> 00:31:06.510
which is me.

00:31:07.220 --> 00:31:10.390
So I'm going to start a
new index view layer now.

00:31:10.400 --> 00:31:12.600
Like, we need a template to
actually-- you know,

00:31:12.600 --> 00:31:15.110
now that we've got the query result,
we need to present it.

00:31:15.170 --> 00:31:16.990
So we're going to need to write, like,
a little bit of HTML.

00:31:17.020 --> 00:31:23.410
So I'm going to write an index.html.erb,
just like that.

00:31:24.410 --> 00:31:27.800
Here's my index.html.

00:31:27.840 --> 00:31:31.590
Now I'm going to flagrantly
cheat and paste some code in.

00:31:33.050 --> 00:31:34.000
simple code.

00:31:34.000 --> 00:31:35.910
We'll go through briefly
what I'm doing here.

00:31:36.100 --> 00:31:38.320
Obviously,
I'm saying this is the iGuild roster.

00:31:38.320 --> 00:31:41.240
I'm iterating through
that players by class.

00:31:41.240 --> 00:31:42.170
I'm actually calling sort.

00:31:42.170 --> 00:31:46.290
And this is the most kind of
pearlish thing that I've done here,

00:31:46.310 --> 00:31:50.960
which is I'm sorting and I'm sorting
by the second element in the array,

00:31:50.960 --> 00:31:52.350
which is the count.

00:31:52.350 --> 00:31:54.790
And I'm sorting in descending order.

00:31:54.810 --> 00:31:57.330
So I could have probably
optimized that out,

00:31:57.330 --> 00:32:01.490
but I sort of fell back onto my
sort of early Paul Pearl education

00:32:01.490 --> 00:32:04.080
there and just wrote it all in line.

00:32:04.080 --> 00:32:07.570
And once we've sorted all this out,
we're going to look at

00:32:07.570 --> 00:32:09.240
player class and count.

00:32:09.240 --> 00:32:11.150
So inside this block,
we're going to be presented

00:32:11.150 --> 00:32:12.180
with those two objects.

00:32:12.220 --> 00:32:15.550
I'm just presenting them here,
player class.name and the count.

00:32:15.730 --> 00:32:17.920
And then down here,
I'm saying in a slightly

00:32:17.920 --> 00:32:21.840
different way of iterating,
for player, in player class.players.

00:32:21.970 --> 00:32:25.920
So for the given class, mage or whatever,
I'm pulling out all the players and

00:32:26.170 --> 00:32:28.600
then I'm just printing their name,
their level and their rank.

00:32:28.620 --> 00:32:37.390
And then I'm going to run the server,
the built-in web server,

00:32:37.390 --> 00:32:40.360
which will come up.

00:32:40.360 --> 00:32:40.770
In

00:32:40.980 --> 00:32:47.360
I will start a new window
here and visit localhost:3000.

00:32:47.520 --> 00:32:48.800
Play a list.

00:32:48.800 --> 00:32:50.840
See what happens.

00:32:50.840 --> 00:32:51.740
I've seen that before.

00:32:51.750 --> 00:32:52.500
Oops.

00:32:52.500 --> 00:32:55.560
What did we do wrong?

00:32:56.820 --> 00:32:59.700
You know that bit where I said I was
flagrantly poking the demo gods?

00:32:59.700 --> 00:33:03.700
They've been flagrantly poked.

00:33:03.700 --> 00:33:04.700
It's a typo.

00:33:04.700 --> 00:33:07.700
Come to WebKit.

00:33:08.960 --> 00:33:10.700
No, not you.

00:33:10.750 --> 00:33:11.900
Damn spaces.

00:33:11.900 --> 00:33:15.400
Yeah, you all know my pain.

00:33:15.400 --> 00:33:18.670
That's better.

00:33:18.800 --> 00:33:22.210
So, you can applaud if you want.

00:33:26.070 --> 00:33:27.960
That was a deliberate typo,
just to get a round of applause,

00:33:27.960 --> 00:33:29.090
because it makes me feel great.

00:33:29.100 --> 00:33:34.700
All right, so, you know, wow,
we've got this, you know,

00:33:34.700 --> 00:33:37.620
simple list here, iGuild roster,
and everything worked out as we planned.

00:33:37.620 --> 00:33:39.780
We've got the warlock,
we've got the number of warlocks,

00:33:39.780 --> 00:33:41.600
and then we've got a
list of all the warlocks.

00:33:41.600 --> 00:33:45.520
And so have we got hunters and
rogues and other things like that.

00:33:45.560 --> 00:33:49.540
But this is kind of boring,
and we can wrap it up really quickly,

00:33:49.540 --> 00:33:53.810
sort of demonstrating a little bit
of the power you get from working

00:33:53.810 --> 00:33:55.660
with WebKit on our platform.

00:33:56.050 --> 00:34:00.000
By doing some extra things here.

00:34:00.000 --> 00:34:01.940
What extra things could we do?

00:34:02.150 --> 00:34:04.000
Well, let's go into public style sheets.

00:34:04.000 --> 00:34:07.340
Let's create a style sheet.

00:34:07.870 --> 00:34:10.800
called demo.css.

00:34:10.800 --> 00:34:14.500
I'm gonna grab my CSS code.

00:34:14.500 --> 00:34:17.910
I've written about 60 lines of CSS here.

00:34:18.000 --> 00:34:21.120
I'm not lying, there it is, 59 lines.

00:34:21.140 --> 00:34:23.960
There's no extra magic
behind the scenes here.

00:34:24.230 --> 00:34:27.660
Paste in that CSS,
all pretty standard stuff.

00:34:28.150 --> 00:34:33.890
And then I am going to
grab some JavaScript.

00:34:34.360 --> 00:34:37.680
Now, normally you wouldn't do this.

00:34:37.680 --> 00:34:40.220
Normally you would put this in a
document load and sort of put it

00:34:40.310 --> 00:34:41.990
off in its own JavaScript file.

00:34:42.030 --> 00:34:44.560
But today I'm just going to
put it at the end of our file,

00:34:44.560 --> 00:34:47.940
just so we can see everything
on the screen at once.

00:34:47.970 --> 00:34:50.330
And basically what this
JavaScript is going to do is set

00:34:50.330 --> 00:34:53.860
up an event handler such that
when you click one of the titles,

00:34:53.860 --> 00:35:00.800
it toggles the unordered list element
underneath that and grows its height

00:35:00.910 --> 00:35:02.360
from zero to some other value.

00:35:02.440 --> 00:35:03.840
So it's toggling the value.

00:35:03.840 --> 00:35:06.130
It might be zero pixels
or it might be 300 pixels.

00:35:06.140 --> 00:35:08.840
And it would oscillate between those two,
depending on how many

00:35:08.840 --> 00:35:10.560
elements are in there.

00:35:10.560 --> 00:35:12.320
So I put in my JavaScript.

00:35:12.320 --> 00:35:13.920
And you'll notice it's
all using prototypes.

00:35:13.920 --> 00:35:18.780
So what I've got to do is say JIT to
get all of my JavaScript stuff.

00:35:18.820 --> 00:35:23.610
And then I'm going to get a style sheet
as well that's cool TextMate stuff,

00:35:23.610 --> 00:35:25.280
all these little macros.

00:35:25.310 --> 00:35:26.500
So I've included the JavaScript.

00:35:26.500 --> 00:35:27.340
I've included the style sheet.

00:35:27.340 --> 00:35:32.220
I've got my seven or eight
lines of JavaScript in there

00:35:32.220 --> 00:35:33.790
just to set up the handlers.

00:35:34.050 --> 00:35:36.190
Let's see how it looks now.

00:35:36.380 --> 00:35:38.260
Ooh, that looks better.

00:35:38.260 --> 00:35:39.910
Yes, wow.

00:35:40.390 --> 00:35:45.700
The cool thing is I've also used
animations and transformations here.

00:35:45.700 --> 00:35:48.640
So when you click on one of these things,
you get this nice transformation.

00:35:48.660 --> 00:35:52.760
Everything grows down there like that,
round the corners on the boxes,

00:35:52.810 --> 00:35:55.680
very nice and easy,
only using a few lines of code.

00:35:55.880 --> 00:35:58.470
And this isn't one of those hacky
kind of JavaScript animations.

00:35:58.510 --> 00:36:00.960
This is all CSS-based animation.

00:36:00.990 --> 00:36:03.450
The exact same stuff will
work on the iPhone as well.

00:36:03.520 --> 00:36:06.040
So when you go to extend
this into the iPhone,

00:36:06.060 --> 00:36:09.570
you're not going to be rewriting
a whole bunch of that code either.

00:36:10.270 --> 00:36:14.130
So that is that, pretty much.

00:36:14.160 --> 00:36:17.590
I think that's the end of our demo.

00:36:17.630 --> 00:36:20.180
Yes, that's the end of our demo.

00:36:23.600 --> 00:36:27.640
So we're going back to the slides,
and I'm handing back over to Joel,

00:36:27.640 --> 00:36:31.530
who's going to take you through
asking questions about data.

00:36:32.140 --> 00:36:33.160
Thank you very much.

00:36:33.160 --> 00:36:36.840
Luke is a wizard on the demo machine.

00:36:36.840 --> 00:36:42.660
And so you can see just how quickly
you can bring up a Rails application.

00:36:42.660 --> 00:36:47.190
But for our project here
from our guild master,

00:36:47.190 --> 00:36:51.760
we had a very particular
application in mind.

00:36:51.820 --> 00:36:54.830
We wanted to be able
to build this quickly,

00:36:54.890 --> 00:36:57.640
and we wanted it to be maintainable.

00:36:57.640 --> 00:37:01.060
And so for that, we need to ask some
questions about our data.

00:37:03.000 --> 00:37:06.380
So in this section,
I'm going to talk a little bit

00:37:06.380 --> 00:37:10.500
about how Rails makes test-driven
development extremely easy,

00:37:10.560 --> 00:37:13.800
and it helps guide your implementations.

00:37:13.930 --> 00:37:20.110
And then I'm going to show some tools and
techniques for tightening up your code.

00:37:21.530 --> 00:37:25.550
So the question that our
guild master wants to know is,

00:37:25.840 --> 00:37:27.790
where's our stuff?

00:37:28.440 --> 00:37:32.520
To answer this question as
quickly as possible while still

00:37:32.590 --> 00:37:38.340
keeping the code maintainable,
we need a tool.

00:37:38.340 --> 00:37:42.850
We need something to keep us on track,
keep us going in the right direction,

00:37:42.850 --> 00:37:44.420
not waste any time.

00:37:44.660 --> 00:37:47.450
One proven tool for this
is test-driven development.

00:37:47.450 --> 00:37:52.030
So you might be familiar
with writing unit tests.

00:37:52.140 --> 00:37:55.030
You have a suite of tests
that verify the behavior and

00:37:55.030 --> 00:37:56.870
the correctness of your code.

00:37:56.880 --> 00:38:00.670
But with test-driven development,
you write the test first,

00:38:00.670 --> 00:38:03.450
you specify the way you
want your code to work,

00:38:03.450 --> 00:38:06.830
and then in effect,
the test itself is the specification

00:38:06.880 --> 00:38:08.920
for how your code should work.

00:38:09.480 --> 00:38:15.990
This keeps the temptation away of writing
all those features that you think you

00:38:15.990 --> 00:38:18.400
might need somewhere in the future,
but you don't actually.

00:38:18.400 --> 00:38:21.660
You just write the code
to the specification.

00:38:21.660 --> 00:38:26.540
This also gives you the ability
to refactor without fear.

00:38:27.370 --> 00:38:32.490
If you have this raft of unit
tests and you change the underlying

00:38:32.490 --> 00:38:36.020
implementation of some method,
you don't have to worry that

00:38:36.020 --> 00:38:39.490
you're missing some edge cases and
you might be breaking something.

00:38:39.500 --> 00:38:44.190
Well, you just run your unit tests,
see what breaks, fix it.

00:38:44.890 --> 00:38:48.290
Ruby on Rails makes
this extremely simple.

00:38:48.300 --> 00:38:51.460
You have no excuse, really,
not to be doing test-driven

00:38:51.470 --> 00:38:52.800
development with Rails.

00:38:53.000 --> 00:38:58.800
When you, I don't know if you noticed,
when Luke was generating all that code,

00:38:58.810 --> 00:39:05.020
it was building the skeletons
for your unit tests right there.

00:39:05.210 --> 00:39:06.900
So let's look back at our question here.

00:39:06.900 --> 00:39:07.610
Where's our stuff?

00:39:07.730 --> 00:39:11.880
We can rephrase this as,
how do items trend over all time?

00:39:12.130 --> 00:39:14.340
So to do this with a
test-driven approach,

00:39:14.450 --> 00:39:16.440
we need a story, right?

00:39:16.440 --> 00:39:18.340
We need a simple story,
and we need to be able

00:39:18.340 --> 00:39:20.950
to verify it in code.

00:39:21.120 --> 00:39:25.180
So we know basically what we want
our end product to look like.

00:39:25.180 --> 00:39:28.480
We want this time series graph.

00:39:29.130 --> 00:39:33.610
But writing a test to verify
this data set would take possibly

00:39:33.610 --> 00:39:36.480
thousands of lines for all the
thousands of data points there.

00:39:36.480 --> 00:39:37.830
So this is not what we want.

00:39:37.940 --> 00:39:39.540
We need something simpler.

00:39:39.540 --> 00:39:41.960
So let's try this on for size.

00:39:42.000 --> 00:39:43.800
We make up this story.

00:39:43.800 --> 00:39:45.470
We start out with no elements.

00:39:45.520 --> 00:39:48.750
On Monday, someone deposits five items.

00:39:48.760 --> 00:39:52.580
And on Tuesday,
someone else withdraws two of them.

00:39:52.700 --> 00:39:54.770
That's a simple enough story.

00:39:54.800 --> 00:39:58.410
And we can now verify this
with just a few lines of code.

00:39:59.100 --> 00:40:01.300
So first,
you have to define the data here.

00:40:01.320 --> 00:40:06.300
When the model is created,
it gives you a file in test slash

00:40:06.300 --> 00:40:08.720
fixtures called inventory logs dot yaml.

00:40:08.720 --> 00:40:11.870
This is just,
yaml is just a simple format,

00:40:11.870 --> 00:40:17.510
simple and human readable format
for specifying structured data.

00:40:17.520 --> 00:40:22.720
So we name each of our transactions here,
deposit elixir and withdraw elixir.

00:40:22.720 --> 00:40:29.080
And then for each line,
we'll write an attribute of this.

00:40:29.100 --> 00:40:31.880
inventory log entry.

00:40:32.460 --> 00:40:38.720
So, player Jane was defined
in when players.yaml,

00:40:38.720 --> 00:40:41.140
and instead of having to
look up the player ID,

00:40:41.140 --> 00:40:44.520
we can simply reference
the player by her name.

00:40:44.830 --> 00:40:48.680
But really, for the purposes of this
test that we're writing now,

00:40:48.750 --> 00:40:53.120
all we want to know is
that there are two entries,

00:40:53.120 --> 00:40:57.020
two item entries in our inventory log.

00:40:57.040 --> 00:41:01.160
And to make sure that it's
in chronological order,

00:41:01.160 --> 00:41:04.970
we're going to test that the
balance on the first one is 100.

00:41:06.740 --> 00:41:10.360
Okay,
so let's go over to our unit test file,

00:41:10.360 --> 00:41:14.120
test units, inventory log test.rb.

00:41:14.120 --> 00:41:17.240
And we're going to start
by adding a line here,

00:41:17.250 --> 00:41:21.370
fixtures, inventory logs,
and that will load in the fixtures

00:41:21.370 --> 00:41:23.620
file that we just defined.

00:41:24.180 --> 00:41:28.050
and it will make it available
to all of our test cases.

00:41:28.240 --> 00:41:30.100
So how do you write a test case?

00:41:30.330 --> 00:41:34.460
You simply define a method
that starts with test_.

00:41:35.070 --> 00:41:39.340
Now, the purpose of this is to say
how we want this code to work.

00:41:39.480 --> 00:41:44.340
So we define a method
that we want to exist,

00:41:44.340 --> 00:41:46.510
inventory log.items.

00:41:47.180 --> 00:41:51.490
Going back to our example,
we know that the length of the item's

00:41:51.490 --> 00:41:57.940
collection should be two and that the
balance on the first item should be 100.

00:41:58.320 --> 00:42:05.110
So when we go ahead and run this
unit test from the command line,

00:42:05.440 --> 00:42:08.200
We're going to get about
what we would expect.

00:42:08.200 --> 00:42:12.330
We get a single E there,
which indicates that there was one test

00:42:12.450 --> 00:42:15.300
and that it bailed out with an exception.

00:42:15.300 --> 00:42:16.800
So what's the exception?

00:42:16.940 --> 00:42:19.270
Simple enough, undefined method items.

00:42:19.670 --> 00:42:23.800
Well, let's go and define that method.

00:42:23.990 --> 00:42:29.810
So we go over to our model file,
@models.inventorylog.rb.

00:42:30.170 --> 00:42:34.400
And we start by defining, okay,
what are going to be -- what are the

00:42:34.640 --> 00:42:39.910
log entry types that refer to items,
deposit item and withdraw item?

00:42:40.200 --> 00:42:42.220
Then this class less than less than self.

00:42:42.330 --> 00:42:44.690
If you're not familiar
with Ruby very much,

00:42:44.830 --> 00:42:48.790
this will just say that anything
inside of this block is a class method

00:42:49.040 --> 00:42:52.190
instead of the normal instance method.

00:42:52.320 --> 00:42:55.760
So in our items method here,
our items class method,

00:42:55.800 --> 00:42:59.440
we're going to use the
ActiveRecordSupplied find method,

00:42:59.450 --> 00:43:04.320
and we're going to find all entries
that match these conditions,

00:43:04.320 --> 00:43:08.840
that the activity type is
deposit item or withdraw item,

00:43:08.840 --> 00:43:12.100
and then we're going to order
them by activity timestamp.

00:43:12.400 --> 00:43:14.600
So let's go back and run our test.

00:43:14.660 --> 00:43:18.040
We get a little dot there,
which says that it passed

00:43:18.040 --> 00:43:19.340
with flying colors.

00:43:19.380 --> 00:43:22.090
And we have some functionality here.

00:43:22.750 --> 00:43:26.100
So if we look back at
our simple story here,

00:43:26.140 --> 00:43:30.510
if we were to present this
graph to our guild master,

00:43:30.710 --> 00:43:32.700
he'll know how items trend over all time.

00:43:32.700 --> 00:43:36.060
After that, he's going to want to know,
well, what happened on Tuesday?

00:43:36.060 --> 00:43:37.350
There's that dip there.

00:43:37.610 --> 00:43:38.650
Whose fault was that?

00:43:40.610 --> 00:43:43.390
Once we have that,
we're going to want to answer

00:43:43.430 --> 00:43:44.820
some questions about money.

00:43:44.840 --> 00:43:48.970
We'll have similar
related questions to that,

00:43:49.020 --> 00:43:51.320
such as how does money
trend over all time,

00:43:51.320 --> 00:43:56.700
and again, what happened on Tuesday once
we have that picture there.

00:43:59.480 --> 00:44:01.080
So let's break it down.

00:44:01.110 --> 00:44:04.420
We've written the items method.

00:44:04.460 --> 00:44:08.110
And we could answer the question
of what happened to the items

00:44:08.110 --> 00:44:12.580
on Tuesday by giving it an
optional date range parameter.

00:44:12.830 --> 00:44:18.070
Then we can write a money method that's
going to look very similar to our items.

00:44:18.310 --> 00:44:21.120
And then to answer the question of
what happened to the money on Tuesday,

00:44:21.120 --> 00:44:23.640
we could add another optional
date range parameter,

00:44:23.640 --> 00:44:26.070
but at that point,

00:44:26.740 --> 00:44:30.360
We are repeating this
date range parameter.

00:44:30.360 --> 00:44:32.380
We're handling it the same way.

00:44:32.550 --> 00:44:36.700
We're adding it to our find
options in the same way.

00:44:36.700 --> 00:44:39.070
We're repeating ourselves.

00:44:39.250 --> 00:44:41.360
This violates the DRY principle.

00:44:41.420 --> 00:44:42.720
What is DRY?

00:44:42.830 --> 00:44:44.770
Well, this is DRY.

00:44:45.610 --> 00:44:48.830
Joy also means don't repeat yourself.

00:44:49.030 --> 00:44:53.170
The reason you don't want to repeat
yourself is the more code you write,

00:44:53.280 --> 00:44:55.490
the more mistakes you're likely to make.

00:44:55.710 --> 00:44:58.790
And when you make those mistakes,
if you've repeated yourself,

00:44:58.880 --> 00:45:01.300
you're going to have to fix
them in multiple places.

00:45:01.570 --> 00:45:02.410
So we don't like this.

00:45:02.500 --> 00:45:04.950
This gets old real fast.

00:45:06.220 --> 00:45:09.510
So there's a few ways to solve this,
but in the middle of

00:45:09.510 --> 00:45:13.050
writing our little demo app,
Rails 2.1 came out,

00:45:13.190 --> 00:45:18.460
and it gives us this named scope
method that we can use in our models.

00:45:18.560 --> 00:45:21.250
And named scopes,
you just define a scope,

00:45:21.250 --> 00:45:25.330
and it acts a lot like a class method,
except that you can chain them

00:45:25.330 --> 00:45:27.510
together in interesting ways.

00:45:27.540 --> 00:45:30.930
So just to take a quick example here,
let's say you have some marbles.

00:45:31.040 --> 00:45:36.500
You define a blue scope in your marbles,
and that'll return-- and marble.blue

00:45:36.560 --> 00:45:38.390
will return all of your blue marbles.

00:45:38.520 --> 00:45:43.700
You define a small scope here
so that marble.small will

00:45:43.700 --> 00:45:45.540
return all your small marbles.

00:45:45.540 --> 00:45:49.490
But then you can combine them together,
call marble.blue.small,

00:45:49.540 --> 00:45:52.520
and with a single call
into your database,

00:45:52.520 --> 00:45:57.420
it will give you all
the small blue marbles.

00:45:57.950 --> 00:46:01.560
So let's apply this back
to our inventory log model.

00:46:01.560 --> 00:46:05.420
Here's the code that we had,
a class method called items.

00:46:05.420 --> 00:46:09.240
We rip that out and we replace it
with a named scope called items.

00:46:09.240 --> 00:46:12.570
And we simply repeat
those same conditions and

00:46:12.620 --> 00:46:14.880
ordering that we had before.

00:46:17.720 --> 00:46:25.180
So breaking it down once again,
we have redefined this items method.

00:46:25.190 --> 00:46:29.250
And we can define another
name scope called nRange that

00:46:29.260 --> 00:46:32.110
will take our date range,
string them together like that,

00:46:32.200 --> 00:46:35.650
and it'll answer the question of what
happened to the items on Tuesday.

00:46:35.790 --> 00:46:40.060
We still have to write another
money scope that looks similar

00:46:40.060 --> 00:46:41.570
to the items one we just wrote.

00:46:41.720 --> 00:46:46.900
But then we can reuse the nRange scope,
combine it with money,

00:46:46.900 --> 00:46:49.850
and that'll answer what happened
to the money on Tuesday.

00:46:50.020 --> 00:46:52.140
All right,
so I'm just going to take a quick

00:46:52.210 --> 00:46:56.020
look here at items.inrange and
write a test method for this case.

00:46:56.020 --> 00:46:59.540
So we're going to test
items with date range.

00:46:59.540 --> 00:47:04.350
We define our date range here as just
two strings separated by two dots,

00:47:04.500 --> 00:47:06.520
and that'll create a
range object in Ruby.

00:47:06.520 --> 00:47:11.710
And then we say we want to be able
to call inventory log.items.inrange

00:47:11.850 --> 00:47:13.800
with that range element.

00:47:13.840 --> 00:47:17.650
And we would expect from our
scenario that there would

00:47:18.170 --> 00:47:20.330
be one item in that range.

00:47:22.300 --> 00:47:26.700
So simple enough,
we define a name scope in range.

00:47:26.710 --> 00:47:31.040
And since it takes a parameter,
we need to use this funny lambda thing.

00:47:31.060 --> 00:47:35.900
A lambda function is
an anonymous function.

00:47:35.900 --> 00:47:39.470
It's known in other
languages as a closure.

00:47:39.860 --> 00:47:43.240
Really, it's just a block of code here,
and it accepts an argument range,

00:47:43.260 --> 00:47:47.180
and we can then use that range
when we specify the conditions.

00:47:47.630 --> 00:47:51.500
So we run our unit test
again from the command line.

00:47:51.500 --> 00:47:55.280
It gives us two little dots this time,
and that will let us know that

00:47:55.550 --> 00:48:01.320
we have our two test cases,
and they both passed with flying colors.

00:48:02.730 --> 00:48:06.900
So that's just a little taste of the kind
of power that Rails gives you when you

00:48:06.900 --> 00:48:10.810
need to do this structured development
and ask questions about your data.

00:48:10.820 --> 00:48:17.220
It makes it easy to do test-driven
development to keep your implementations

00:48:17.290 --> 00:48:22.050
going in the right direction,
and then there are tools such as

00:48:22.170 --> 00:48:26.390
named scope that help you tighten
up your code and keep it dry.

00:48:28.410 --> 00:48:32.540
So once we have those
questions formulated,

00:48:32.540 --> 00:48:38.180
once we understand how
our models should work,

00:48:38.180 --> 00:48:40.900
we need to present those answers.

00:48:45.180 --> 00:48:47.980
So for that, we built our demo website.

00:48:47.990 --> 00:48:49.580
Luke showed you this just to review.

00:48:49.660 --> 00:48:51.530
We have this web page here.

00:48:51.540 --> 00:48:52.810
There's a graph inside.

00:48:52.820 --> 00:48:53.800
You click and drag.

00:48:53.800 --> 00:48:57.570
It gives you a table of data below.

00:48:58.190 --> 00:49:04.570
Then we also have the iPhone version,
which is showing the same data,

00:49:04.620 --> 00:49:09.100
but it's just in a different format,
and it works slightly differently.

00:49:09.600 --> 00:49:11.960
So we have this problem
where we have the same data.

00:49:11.960 --> 00:49:15.500
We want to present it in different ways,
in different formats.

00:49:15.500 --> 00:49:21.880
To solve this, Rails gives you, sorry,
we have, so I'm going to take a look at

00:49:21.880 --> 00:49:25.050
three of these different formats.

00:49:25.200 --> 00:49:27.200
You have, most obviously, the HTML.

00:49:27.200 --> 00:49:32.200
This is the page container for
International Bank of iGuild.

00:49:32.200 --> 00:49:35.500
We have something called JSON.

00:49:35.660 --> 00:49:39.960
Now, that graph that you saw isn't an
image generated on the server side.

00:49:39.960 --> 00:49:44.520
There's a JavaScript library
that makes a request from the

00:49:44.520 --> 00:49:47.370
client side for structured data.

00:49:47.400 --> 00:49:52.430
And this is, and it asks for a
JavaScript object notation.

00:49:52.430 --> 00:49:54.590
And then it dynamically builds the graph.

00:49:54.700 --> 00:49:59.220
And then, of course, we're going to look
at the iPhone version.

00:50:00.020 --> 00:50:05.440
So the tool for managing
this is RespondTo.

00:50:05.440 --> 00:50:09.350
It's a method and action controller,
and it lets you alter your response

00:50:09.770 --> 00:50:12.420
based on the requested format.

00:50:12.420 --> 00:50:17.370
You can think of it as kind of
a telephone switch operator.

00:50:18.270 --> 00:50:24.990
And so to use respond to,
we set up a history controller to show

00:50:24.990 --> 00:50:27.200
the item history and the gold history.

00:50:27.220 --> 00:50:31.640
And if we define an item's action,
we'll just say what types of

00:50:31.640 --> 00:50:34.710
formats that it should respond to.

00:50:35.300 --> 00:50:39.000
So we're going to say that
we're responding to HTML,

00:50:39.000 --> 00:50:41.760
JavaScript, and iPhone formats.

00:50:41.760 --> 00:50:46.220
So first, the HTML.

00:50:46.220 --> 00:50:47.800
This is the overall page.

00:50:47.880 --> 00:50:52.300
We don't actually have any data on this
page because the data is requested after

00:50:52.320 --> 00:50:54.440
the page load by the JavaScript library.

00:50:54.440 --> 00:50:55.990
So we're going to say that
we're responding to HTML,

00:50:55.990 --> 00:50:55.990
JavaScript, and iPhone formats.

00:50:56.470 --> 00:50:59.050
So it's very simple here.

00:50:59.230 --> 00:51:04.500
Each of these format.whateverformat
declarations can be followed

00:51:04.510 --> 00:51:08.740
by an optional block of code,
but we don't need any of that.

00:51:08.780 --> 00:51:12.240
All we do is declare format.html,
and if it matches that format,

00:51:12.240 --> 00:51:20.230
it'll go out and fetch the
items.html.erb template and display that.

00:51:20.800 --> 00:51:27.600
[Transcript missing]

00:51:29.820 --> 00:51:33.480
Really all at once is a form
of serialization of your data.

00:51:33.700 --> 00:51:40.190
So we're going to send
that back as serialization.

00:51:41.730 --> 00:51:45.960
So it couldn't be easier to do
that in Rails because you don't

00:51:45.960 --> 00:51:47.600
need to build any templates.

00:51:47.660 --> 00:51:53.160
You don't need to have any kind
of library that spits out your

00:51:53.160 --> 00:51:56.520
objects in this object notation.

00:51:56.650 --> 00:52:02.860
You simply supply a block that says,
render JSON arrow,

00:52:02.870 --> 00:52:03.160
and then the collection
of data that you have.

00:52:03.350 --> 00:52:07.610
and it will implicitly
call .2 JSON on it.

00:52:07.610 --> 00:52:12.000
Rails knows how to spit
out the JSON format for a

00:52:12.000 --> 00:52:14.520
large number of data types.

00:52:16.920 --> 00:52:18.600
Now, the iPhone.

00:52:18.670 --> 00:52:21.200
We had to make this
iPhone version of this,

00:52:21.270 --> 00:52:25.270
because what web app is
complete without one?

00:52:25.600 --> 00:52:29.900
It turns out that we can use
the same content and the same

00:52:29.900 --> 00:52:33.320
structure that we had it before,
and all we have to do

00:52:33.320 --> 00:52:35.080
is define new behavior.

00:52:35.080 --> 00:52:38.780
So we keep our HTML templates
the same with a few one-line

00:52:38.780 --> 00:52:40.920
changes here and there.

00:52:41.200 --> 00:52:48.030
We defined a new JavaScript file for
the behavior for all those fancy slides

00:52:48.030 --> 00:52:50.570
and the back buttons and the like.

00:52:50.730 --> 00:52:54.300
And then, of course,
a new CSS file to define the

00:52:54.300 --> 00:52:57.160
new iPhone look stripped down.

00:52:57.770 --> 00:53:00.380
So I'm not going to go
through all the code for this.

00:53:00.380 --> 00:53:04.940
I'm just going to talk about,
in general terms,

00:53:05.030 --> 00:53:06.800
how the JavaScript works.

00:53:06.820 --> 00:53:10.040
We'll have the sample code available
afterward if you want to get

00:53:10.040 --> 00:53:11.980
down into the nitty gritty here.

00:53:12.020 --> 00:53:17.280
So from the front page,
when you click on one of these--

00:53:17.470 --> 00:53:19.800
When you click on one
of these categories,

00:53:19.930 --> 00:53:23.360
the JavaScript code is
going to intercept that.

00:53:23.360 --> 00:53:24.960
It's going to talk to our controller.

00:53:24.960 --> 00:53:29.320
It's going to receive some
bare-bones HTML back and then apply

00:53:29.320 --> 00:53:32.440
the transition to get our new page.

00:53:36.730 --> 00:53:40.000
So we have the same structure
here with new behavior,

00:53:40.010 --> 00:53:44.830
but as far as the Ruby code is concerned,
it's, again, pretty simple.

00:53:44.840 --> 00:53:48.310
For the iPhone format,
we give it a block,

00:53:48.410 --> 00:53:52.590
and we just tell it to render our layout,
or render without any layout,

00:53:52.600 --> 00:53:55.310
without any of the backgrounds,
the headers,

00:53:55.360 --> 00:53:56.880
any of the Chrome on the page.

00:53:56.920 --> 00:54:01.160
JavaScript handles everything for us,
displays it with a nice transition.

00:54:04.060 --> 00:54:08.260
So this is just a little flavor
of the kind of problems we ran

00:54:08.260 --> 00:54:12.970
into and how we were able to
present these answers in a nice,

00:54:13.430 --> 00:54:15.320
pretty-looking website.

00:54:15.570 --> 00:54:19.730
So we used the respondTo method,
which allows you to respond

00:54:19.740 --> 00:54:26.250
with different formats to
requests for the same data.

00:54:26.710 --> 00:54:32.100
We used object serialization
with extreme ease.

00:54:32.370 --> 00:54:36.850
And we built an iPhone website where
we were able to keep the same structure

00:54:37.400 --> 00:54:40.420
and define some new behavior for it.

00:54:42.320 --> 00:54:47.450
So once we have the application built,
we need to have it face the world.

00:54:47.460 --> 00:54:50.900
And for that,
I'm going to hand it back to Luke.

00:54:57.350 --> 00:54:59.430
All right.

00:54:59.540 --> 00:55:04.110
Did I mention before that my daughter was
born right in the middle of the keynote?

00:55:04.850 --> 00:55:08.610
And do you know how hard it is to
actually keep doing that stuff while

00:55:09.040 --> 00:55:12.270
tracking the keynote on your iPhone?

00:55:12.520 --> 00:55:16.410
It's hard, because if you get it wrong,
you are going to be removing a

00:55:16.430 --> 00:55:20.530
surgically implanted iPhone in
your head if you get found out.

00:55:20.530 --> 00:55:24.330
Apparently,
we released a new phone or something.

00:55:25.050 --> 00:55:27.790
So sooner or later your Rails application
is going to get popular.

00:55:28.370 --> 00:55:32.760
And I wanted a picture here of like
a crowded train station or something,

00:55:32.760 --> 00:55:37.170
but instead this is sort of the only
picture we had authorization to use.

00:55:37.180 --> 00:55:40.540
So what I want you to imagine is,
imagine all of these people in this

00:55:40.540 --> 00:55:44.400
photo crammed into a train carriage,
like really crammed in together,

00:55:44.530 --> 00:55:48.240
and there's condensation coming down
the windows and everything because

00:55:48.240 --> 00:55:50.790
everyone's sort of crammed in so tightly.

00:55:51.860 --> 00:55:56.100
Then I want you to imagine
these people smeared with honey.

00:55:56.990 --> 00:55:59.600
and Peanut Butter.

00:55:59.680 --> 00:56:06.340
And then I want you to imagine somebody
releases a swarm of bees into that train.

00:56:06.430 --> 00:56:11.580
And then another man opens up a briefcase
and it has a whole ant's nest in it.

00:56:11.640 --> 00:56:14.670
And he kicks that briefcase
as hard as he can.

00:56:14.750 --> 00:56:18.640
And then imagine that this train
with the bees and the honey and the

00:56:18.640 --> 00:56:23.810
peanut butter is driving through
Yosemite at like four miles an hour,

00:56:23.910 --> 00:56:26.780
say, at the start of spring.

00:56:27.340 --> 00:56:29.340
I have just described to you
exactly what is going on in

00:56:29.370 --> 00:56:32.610
Twitter's data center right now.

00:56:38.830 --> 00:56:40.670
For this reason,
it's very important to get your

00:56:40.670 --> 00:56:44.230
Rails deployment strategy right,
unless you want to be one

00:56:44.230 --> 00:56:47.780
of these unfortunate people
crammed into the train.

00:56:49.460 --> 00:56:52.400
I'd like you to deploy on
Mac OS X Server because we think it's

00:56:52.400 --> 00:56:56.000
a really nice platform to deploy on.

00:56:56.080 --> 00:56:59.030
We've got fantastic high-end hardware.

00:56:59.290 --> 00:57:01.040
It's all silver.

00:57:02.070 --> 00:57:04.880
And it looks great in your data center.

00:57:04.930 --> 00:57:06.360
But it performs really well as well.

00:57:06.360 --> 00:57:07.490
It's not just about the looks.

00:57:07.510 --> 00:57:10.440
It's really good stuff.

00:57:10.470 --> 00:57:12.100
I'm not going to go into
that too much detail.

00:57:12.100 --> 00:57:15.720
I don't want you to feel like you're in a
sales and marketing sort of presentation.

00:57:15.810 --> 00:57:19.080
But OS X Server is also structured
very similarly to client.

00:57:19.180 --> 00:57:22.740
So when it comes time to work on the
command line and work with the system,

00:57:22.910 --> 00:57:24.560
you're not in an alien environment.

00:57:24.600 --> 00:57:27.160
You'll feel if you've
developed everything on client,

00:57:27.160 --> 00:57:30.030
you're going to be at home on server.

00:57:30.390 --> 00:57:32.810
And of course, you've got the server
admin tools as well,

00:57:32.810 --> 00:57:35.840
which simplify a whole
range of operations,

00:57:35.840 --> 00:57:38.120
so you can just dive into
the GUI and work there.

00:57:38.120 --> 00:57:40.730
You don't need to do it
all in the command line.

00:57:41.230 --> 00:57:42.940
So deployment.

00:57:42.990 --> 00:57:44.840
What do we mean by deployment
for a Rails application?

00:57:44.840 --> 00:57:48.760
Well, here's our server,
a Mac OS X server, naturally.

00:57:48.920 --> 00:57:53.080
You've got Apache on there
answering all of the web requests.

00:57:53.120 --> 00:57:55.690
You've got your Ruby on Rails application
living on there as well,

00:57:55.690 --> 00:57:59.360
and a database,
and something in the middle.

00:57:59.710 --> 00:58:01.840
Something has to be in the middle,
because Ruby on Rails doesn't

00:58:01.840 --> 00:58:03.470
know about Apache,
and Apache doesn't know about

00:58:03.480 --> 00:58:07.640
Ruby on Rails with something in
there to route these requests around.

00:58:07.690 --> 00:58:10.210
What can you use to route
these requests around?

00:58:10.950 --> 00:58:13.100
One option is Mongrel.

00:58:13.140 --> 00:58:15.240
That's bundled on OS X.

00:58:15.390 --> 00:58:18.940
It's basically a web server
that knows about Rails.

00:58:19.270 --> 00:58:23.300
So it's not an application server per se,
but it's a web server that can be

00:58:23.300 --> 00:58:26.400
started up inside a Rails application
and serve that Rails content out.

00:58:26.400 --> 00:58:31.340
And as I said, it's built into Mac OS X,
built into Mac OS X Server.

00:58:31.860 --> 00:58:32.740
It looks something like this.

00:58:32.740 --> 00:58:35.900
You're going to have your
Apache layer or your web server,

00:58:35.900 --> 00:58:38.080
and then underneath that,
mod proxy balancer,

00:58:38.080 --> 00:58:42.050
which is essentially a way of taking
requests and evenly distributing

00:58:42.050 --> 00:58:45.840
them using some algorithm over
multiple instances behind the scenes.

00:58:45.840 --> 00:58:48.620
In this case,
you're going to have multiple mongrel

00:58:49.130 --> 00:58:53.090
instances that are running individual
Ruby on Rails instances themselves and

00:58:53.150 --> 00:58:55.520
a shared database underneath all that.

00:58:56.160 --> 00:58:58.880
So you can structure your application
to run all these different,

00:58:58.880 --> 00:59:03.350
as many mongrel instances
as you see necessary.

00:59:03.460 --> 00:59:04.700
To start it up, it's really simple.

00:59:04.700 --> 00:59:07.450
We've got this little command line,
useful little command line

00:59:07.450 --> 00:59:09.280
called mongol-rails-persist.

00:59:09.310 --> 00:59:12.470
What that does,
apart from allowing you to

00:59:12.470 --> 00:59:16.910
set things like ports and what
environment you're starting in,

00:59:16.910 --> 00:59:20.050
are you starting in
production or otherwise,

00:59:20.140 --> 00:59:25.020
it also creates a launch DP list in
library launch daemons so that if your

00:59:25.020 --> 00:59:29.940
server gets rebooted or a swarm of
bees attacks it or whatever happens,

00:59:29.940 --> 00:59:30.210
it's going to come back
up again on startup.

00:59:30.420 --> 00:59:33.690
And it's also Bonjour discoverable,
which is nice because when you get into

00:59:33.690 --> 00:59:38.730
the configuration side on the GUI and
you're establishing one of these,

00:59:38.730 --> 00:59:42.520
you know, sites from scratch,
you go into the proxy tab,

00:59:42.520 --> 00:59:46.370
you enable reverse proxy,
and then you simply specify what balancer

00:59:46.370 --> 00:59:50.940
URLs represent your mongrel instances
and requests can be routed to all these.

00:59:50.940 --> 00:59:57.180
And when you go to add one of
these proxy sort of instances,

00:59:57.180 --> 01:00:00.040
it already knows about the URL because
it discovers it over Bonjour.

01:00:00.040 --> 01:00:03.460
So you can start up a whole bunch of
mongrels and they'll be visible in here

01:00:03.460 --> 01:00:06.870
without you needing to remember anything,
which is kind of nice.

01:00:07.100 --> 01:00:12.760
A new way to deploy that works really
well on our platform is Passenger,

01:00:12.760 --> 01:00:16.590
and that is their logo there.

01:00:16.850 --> 01:00:20.070
It looks like something that was
once spray-painted on my van when

01:00:20.070 --> 01:00:22.860
I lived in a rough part of town,
but that's their logo.

01:00:22.860 --> 01:00:25.400
It's available at modrails.com.

01:00:25.400 --> 01:00:28.680
You can kind of think of it as
Mod Rails in the same way that

01:00:28.870 --> 01:00:30.970
there is a mod.php and a mod.perl.

01:00:31.020 --> 01:00:32.940
It's very new.

01:00:32.940 --> 01:00:35.240
It's extremely easy to use.

01:00:35.240 --> 01:00:38.060
It doesn't really encapsulate
how easy this is to use.

01:00:38.060 --> 01:00:40.140
And it works great on OS X.

01:00:40.140 --> 01:00:42.860
The developers are totally on
board with working with OS X,

01:00:42.860 --> 01:00:45.300
and they've done a great job of
optimizing it on our platform.

01:00:46.460 --> 01:00:48.080
So what does it look like?

01:00:48.160 --> 01:00:48.960
You've got your Apache.

01:00:48.960 --> 01:00:49.730
That's still there.

01:00:49.740 --> 01:00:54.210
Underneath that, you have mod.passenger,
which is the Apache module itself.

01:00:54.260 --> 01:00:57.950
Mod.passenger starts a
Rails framework instance,

01:00:57.970 --> 01:01:00.620
an instance of the Rails framework.

01:01:00.620 --> 01:01:05.250
So if it's Rails 2.1,
there'll be one 2.1 framework instance.

01:01:05.260 --> 01:01:09.250
So unlike the Mongrel case,
you're not going to be instantiating

01:01:09.250 --> 01:01:11.060
multiple instances of framework.

01:01:11.060 --> 01:01:11.780
You'll just have one.

01:01:11.800 --> 01:01:15.010
Underneath that,
you have an application spawner,

01:01:15.010 --> 01:01:19.620
which takes care of starting multiple
Rails application instances as needed.

01:01:19.620 --> 01:01:23.190
So you can start 10 Rails instances
if you think you're going to need 10

01:01:23.230 --> 01:01:26.360
different instances of it running.

01:01:26.360 --> 01:01:29.490
Installing passenger,
because it doesn't come

01:01:29.490 --> 01:01:33.360
default on our platform yet,
is simply a matter of saying

01:01:33.360 --> 01:01:36.470
sudo gem install passenger.

01:01:36.870 --> 01:01:45.370
and I are working on a new Apache module
called Pseudo Passenger Install Apache 2,

01:01:45.370 --> 01:01:45.370
which sets you up so it's
a valid Apache module.

01:01:45.990 --> 01:01:48.850
You create a virtual host,
the document root of which

01:01:49.010 --> 01:01:53.510
points to the public directory
of your Rails application.

01:01:54.050 --> 01:01:55.620
And then there's nothing else to do.

01:01:55.830 --> 01:01:57.980
That's all you need to do
to deploy the application.

01:01:58.040 --> 01:02:02.190
So once you've done those initial two
steps of getting Passenger installed,

01:02:02.500 --> 01:02:03.700
All you need to do from
that point forward,

01:02:03.700 --> 01:02:05.770
anytime you want to deploy
a new Rails application,

01:02:05.810 --> 01:02:08.440
is just create a virtual host and
point it to the right location.

01:02:08.440 --> 01:02:11.570
And it starts up the Rails instance
and it handles everything for you.

01:02:11.600 --> 01:02:13.590
It's really cool.

01:02:14.850 --> 01:02:16.440
Another thing you're going to
think about with deployment,

01:02:16.440 --> 01:02:19.330
especially if you are an iron-fisted
guildmaster and you want to keep

01:02:19.330 --> 01:02:21.740
track of everything that's going
on in your World of Warcraft guild,

01:02:21.740 --> 01:02:24.060
you're going to need to pull
data on a regular basis.

01:02:24.060 --> 01:02:27.190
So when you're doing something
like that on Mac OS X Server,

01:02:27.190 --> 01:02:30.330
we recommend that you use
LaunchD rather than anything like

01:02:30.330 --> 01:02:34.380
Cron or setting up your own process
that sort of persists and lives on.

01:02:34.380 --> 01:02:37.830
I like to use Lingon because
I can't remember the XML syntax

01:02:37.840 --> 01:02:41.440
for creating LaunchDP lists,
and if you can remember that,

01:02:41.460 --> 01:02:44.110
then you're doing much better than I am.

01:02:44.700 --> 01:02:48.120
Just grab Lingon,
set up a LaunchD process.

01:02:48.120 --> 01:02:51.920
Just remember that you have to
set the Rails env variable to

01:02:51.920 --> 01:02:56.000
specify what environment your
application is starting in,

01:02:56.070 --> 01:02:57.620
whether it's production or
whether it's development.

01:03:00.350 --> 01:03:05.260
So in conclusion, what have we learned?

01:03:05.280 --> 01:03:07.380
I think you can say that building
Rails apps are very easy.

01:03:07.380 --> 01:03:10.370
We built one live on stage
here with hardly any effort,

01:03:10.370 --> 01:03:15.220
and we built that more sophisticated
website with actually a lot more effort.

01:03:15.300 --> 01:03:17.780
But it wasn't really that bad.

01:03:17.800 --> 01:03:19.960
Test-driven development is very easy.

01:03:19.970 --> 01:03:23.480
As I flagrantly demonstrated,
I did not use test-driven development

01:03:23.480 --> 01:03:26.180
and was punished for it by the demo gods.

01:03:26.210 --> 01:03:29.420
But you really have no excuse not to use
test-driven development on Ruby on Rails,

01:03:29.420 --> 01:03:31.710
because all the infrastructure
is there for you.

01:03:31.720 --> 01:03:32.920
It's presented on a plate.

01:03:33.060 --> 01:03:35.490
You shouldn't ignore it.

01:03:35.880 --> 01:03:37.840
Rails loves the iPhone.

01:03:38.030 --> 01:03:40.300
The iPhone probably loves Rails.

01:03:40.370 --> 01:03:46.010
It's really easy to write an iPhone
version of your website or create a

01:03:46.010 --> 01:03:49.750
dedicated website just for the iPhone.

01:03:49.910 --> 01:03:52.700
We think Rails is best
enjoyed on Mac OS X.

01:03:52.770 --> 01:03:55.400
As Joel pointed out,
it was developed on Mac OS X.

01:03:55.460 --> 01:03:58.760
If you look at a screencast of Ruby on
Rails anywhere on the Internet,

01:03:58.760 --> 01:04:02.740
chances are you'll be looking
at TextMate on Mac OS X.

01:04:02.740 --> 01:04:07.910
It's very popular on our platform,
and you'll get a lot of support there.

01:04:08.310 --> 01:04:10.900
And I think Rails is best
deployed on Mac OS X Server,

01:04:10.910 --> 01:04:14.900
but I may be sort of
biased in that belief,

01:04:15.030 --> 01:04:16.780
working for Apple and all that.

01:04:16.940 --> 01:04:19.740
But we make it really easy,
and hopefully in the future,

01:04:19.740 --> 01:04:23.040
especially as Snow Leopard rolls along,
we hope to have even more easy ways

01:04:23.040 --> 01:04:24.630
to deploy your Rails applications.

01:04:24.670 --> 01:04:27.780
We want to make it as easy as possible.

01:04:28.680 --> 01:04:30.600
We have some documentation
for you to check out here.

01:04:30.600 --> 01:04:34.140
Recommend the Rails book
from Pragmatic Programmers.

01:04:34.140 --> 01:04:36.760
We've got a website,
maybe you've heard of it,

01:04:36.770 --> 01:04:37.940
called apple.com.

01:04:37.940 --> 01:04:41.460
You can go there and see a whole
bunch of Rails resources as well.

01:04:41.460 --> 01:04:45.810
There's this really great PDF,
which has a difficult-to-remember URL,

01:04:45.810 --> 01:04:50.870
but somebody has put together all of the
Rails 2.1 changes in a really nice PDF,

01:04:50.870 --> 01:04:54.800
and if you just search for Rails 2.1 PDF,
you'll probably be

01:04:54.800 --> 01:04:56.540
taken to the same site.

01:04:57.800 --> 01:05:00.880
HBricade, if you want to find out more
information about that and some

01:05:00.880 --> 01:05:03.860
of the other wacky projects that
Why the Lucky Stiff is involved in.

01:05:03.860 --> 01:05:04.680
I have no idea.

01:05:04.680 --> 01:05:07.450
He's some sort of superhuman being,
but he churns out a lot

01:05:07.450 --> 01:05:10.380
of interesting stuff,
so please do visit his website.

01:05:12.210 --> 01:05:15.220
And if you'd like any more
information about the questions today,

01:05:15.330 --> 01:05:17.970
or the demonstration today,
if you'd like sample code,

01:05:17.970 --> 01:05:21.260
please don't hesitate to give
myself or Joel a quick email,

01:05:21.260 --> 01:05:26.620
and we'd be happy to hook you up
with some sample code or answer

01:05:26.620 --> 01:05:26.620
any questions that you have.