WEBVTT

00:00:20.340 --> 00:00:25.300
This is year number five for
Scripting for System Administrators.

00:00:25.300 --> 00:00:29.770
And I must admit, I said last year we're
running out of ideas.

00:00:31.070 --> 00:00:34.640
It was hard, but we have some very,
very good stuff.

00:00:34.640 --> 00:00:37.940
I beat an engineer into submission
until he learned Ruby in seven days.

00:00:37.940 --> 00:00:41.900
Let that be a lesson to anyone
wanting to do this next year.

00:00:42.030 --> 00:00:44.820
But Andy did a great job,
so we have him coming up here.

00:00:45.070 --> 00:00:49.160
Chris comes up second,
talks about kicking the kicker.

00:00:49.160 --> 00:00:51.000
And we have a little contest at the end.

00:00:51.000 --> 00:00:52.870
We need a name for this script,
so he'll be talking

00:00:52.870 --> 00:00:54.000
about that a little bit.

00:00:54.170 --> 00:00:57.790
And then we follow up with Josh,
who wrote a little script

00:00:57.790 --> 00:00:59.980
just to use the word injector.

00:01:00.050 --> 00:01:04.000
So we have a home injector script that
you can use at login to do some stuff.

00:01:04.000 --> 00:01:07.930
So hopefully, get you guys energized,
excited about scripting.

00:01:08.020 --> 00:01:09.870
Show you some new stuff,
some of the cool stuff,

00:01:09.870 --> 00:01:12.000
using Leopard and some of
the other technologies.

00:01:12.000 --> 00:01:14.710
For the first time this year--and I'm
very excited about this because we've

00:01:14.710 --> 00:01:18.530
been trying it for a while but never got
anything to stick--Chris will be talking

00:01:18.540 --> 00:01:20.000
about some of the scripting bridges.

00:01:20.000 --> 00:01:23.000
So how to go from your scripts to
actual Objective-C and things like that.

00:01:23.000 --> 00:01:26.790
To add a little more power and to
kind of combine both of those worlds.

00:01:27.000 --> 00:01:29.920
So, without further ado,
I'd like to introduce Andy Leeper.

00:01:30.000 --> 00:01:32.980
He's going to come up here and
talk to you about some Ruby.

00:01:37.360 --> 00:01:38.840
Hello, everybody.

00:01:38.980 --> 00:01:40.960
I'm here to talk about Ruby.

00:01:41.010 --> 00:01:46.700
And I'm actually going to do that by
giving you my story of how I did this.

00:01:46.860 --> 00:01:51.270
So if you like a lot of caffeine,
this is great.

00:01:51.520 --> 00:01:54.900
If you just so happen to be one of
those people that likes to learn

00:01:55.000 --> 00:01:58.690
scripting languages in their free time,
this is a good way to go through and

00:01:58.740 --> 00:02:01.140
kind of jump start that whole thing.

00:02:01.150 --> 00:02:02.620
So let's go ahead and jump in.

00:02:02.660 --> 00:02:05.840
On the first day,
what happened was Joel gave

00:02:05.840 --> 00:02:08.600
me a buzz and he said,
"Hey, Andy, I'd really like you to come

00:02:08.670 --> 00:02:11.100
speak at WWDC this year."
And I was thinking to myself,

00:02:11.190 --> 00:02:12.540
"Oh, yes, you know, of course.

00:02:12.600 --> 00:02:14.070
Like, why wouldn't I want to?

00:02:14.160 --> 00:02:15.960
This is a great opportunity.

00:02:15.960 --> 00:02:19.380
I get to get in front of all you
guys and talk to everybody and,

00:02:19.640 --> 00:02:21.880
you know,
it would be awesome." And he said, "Well,

00:02:22.020 --> 00:02:24.790
it would be in our scripting
for sysadmin session." And,

00:02:24.790 --> 00:02:27.330
you know,
I had come for the past four years,

00:02:27.330 --> 00:02:29.720
you said it was, five years, and,
you know,

00:02:29.720 --> 00:02:31.620
I thought it was a really cool session.

00:02:31.670 --> 00:02:33.170
I was--I felt honored.

00:02:33.340 --> 00:02:34.600
So I jumped into it and I had just
the tool I wanted to show you.

00:02:34.600 --> 00:02:40.320
And I had a tool that my coworker
wrote called Ghost Host which takes

00:02:40.340 --> 00:02:46.600
information from Open Directory,
puts it into a MySQL database

00:02:46.600 --> 00:02:51.760
and kind of uses some augmented
data to kind of bring all this

00:02:51.760 --> 00:02:53.540
together into a nice user interface.

00:02:53.680 --> 00:02:56.430
So I said, "Hey, you know,
he developed this thing

00:02:56.430 --> 00:02:57.250
in three or four weeks.

00:02:57.330 --> 00:02:58.540
I can come up and talk about that.

00:02:58.540 --> 00:03:02.480
You know, it might be really interesting
to some folks." And,

00:03:02.480 --> 00:03:03.490
you know, Joel liked it.

00:03:03.500 --> 00:03:05.640
And I said, "Hey, you know,
Joel liked the idea." But he

00:03:05.640 --> 00:03:07.080
came back to me and said,
"Hey, you know,

00:03:07.080 --> 00:03:09.080
you wrote this all in PHP.

00:03:09.160 --> 00:03:13.900
Can you do it in Ruby?"
And I was thinking to myself,

00:03:13.900 --> 00:03:13.900
"Ugh."

00:03:19.220 --> 00:03:20.090
I don't know.

00:03:20.090 --> 00:03:24.670
One of my friends at work
is a big Ruby evangelist,

00:03:24.670 --> 00:03:29.280
and he sits there and he talks about,
man, you can write everything

00:03:29.930 --> 00:03:31.500
in two lines of code.

00:03:31.500 --> 00:03:33.510
You don't have to do anything.

00:03:33.510 --> 00:03:35.510
In fact,
I wrote this wonderful application

00:03:35.510 --> 00:03:37.960
that does the same thing in
like seven lines of code.

00:03:37.960 --> 00:03:41.440
So I was a little skeptical,
so I went and did my own research.

00:03:41.650 --> 00:03:43.950
And you know, I went to Google.

00:03:43.950 --> 00:03:45.250
I typed in Ruby.

00:03:45.530 --> 00:03:49.180
And the first thing that
I got was this website,

00:03:49.180 --> 00:03:52.560
which is the ruby-lang.org website.

00:03:52.560 --> 00:03:54.670
So some of the things you'll see
over on the right-hand side is

00:03:54.670 --> 00:03:56.520
the Try Ruby in your web browser.

00:03:56.580 --> 00:03:58.100
That brings you to this page.

00:03:58.180 --> 00:04:02.080
And this is a really useful tool for
just checking it out on your own time.

00:04:02.180 --> 00:04:04.300
It kind of hand-holds you through it.

00:04:04.360 --> 00:04:07.400
And it was a really
useful resource for me.

00:04:07.400 --> 00:04:08.900
So I went through the first chapter.

00:04:08.900 --> 00:04:10.610
And when I went through
the first chapter,

00:04:10.700 --> 00:04:14.050
I realized that, you know,
this is how I do something in Perl.

00:04:14.050 --> 00:04:16.310
This is how I do something in Ruby,
you know,

00:04:16.310 --> 00:04:17.890
as far as declaring my variables.

00:04:17.890 --> 00:04:19.160
Not all that different.

00:04:20.180 --> 00:04:23.330
So I said, "Hey Joel, you know what,
I'd be honored to go ahead and do this.

00:04:23.440 --> 00:04:26.650
I thought it would be a great
opportunity." So I jumped right in.

00:04:26.850 --> 00:04:28.730
So the next day...

00:04:31.710 --> 00:04:32.360
Yeah, I go to work.

00:04:32.420 --> 00:04:34.190
I work hard like everybody else.

00:04:34.250 --> 00:04:36.320
I put in my 10, 15 hours.

00:04:36.980 --> 00:04:41.160
And when I get home from work,
I want to play games.

00:04:41.160 --> 00:04:43.940
I don't really want to, like,
do more work, right?

00:04:43.940 --> 00:04:48.060
Well, I realized, no,
I should probably be a good engineer.

00:04:48.070 --> 00:04:51.960
I should spend some time and
get back onto the Ruby thing.

00:04:51.960 --> 00:04:53.120
So I pulled open Safari.

00:04:53.120 --> 00:04:56.220
I searched for Ruby again because
I forgot what website I went to.

00:04:56.910 --> 00:04:58.100
And I wound up at the same website.

00:04:58.280 --> 00:05:01.300
Fortunately, it's the first Google link,
so I didn't have to do much crawling.

00:05:01.300 --> 00:05:03.540
And I went back to the tutorial.

00:05:03.540 --> 00:05:05.540
And this time,
I went through chapters 1 through 5.

00:05:05.580 --> 00:05:10.480
So chapters 1 through 5 kind of
uncovered a little bit more stuff.

00:05:10.480 --> 00:05:13.880
It uncovered stuff like
control structures.

00:05:13.880 --> 00:05:18.260
So in Perl, this is how you do a for each
loop to go through an array.

00:05:18.260 --> 00:05:21.400
And in Ruby, it's not so similar.

00:05:21.400 --> 00:05:26.230
You end up doing stuff
like things.each do thing.

00:05:26.240 --> 00:05:26.780
And I wound up at the same website.

00:05:26.780 --> 00:05:26.780
Fortunately, it's the first Google link,
so I didn't have to do much crawling.

00:05:26.780 --> 00:05:26.780
And I went back to the tutorial.

00:05:26.780 --> 00:05:26.780
And this time,
I went through chapters 1 through 5.

00:05:26.800 --> 00:05:28.140
It looks nothing like Perl.

00:05:28.140 --> 00:05:31.460
So I figured, well,
the concept's still the same.

00:05:31.690 --> 00:05:35.960
I can still apply what I know about
scripting into learning this new thing.

00:05:36.050 --> 00:05:39.220
So I decided, well, hey,
I'm just going to make a list.

00:05:39.270 --> 00:05:41.560
So what are some things
that I typically use?

00:05:41.560 --> 00:05:45.560
I typically use variables,
I typically use loops,

00:05:45.560 --> 00:05:48.240
and I typically use functions
like everybody else.

00:05:48.250 --> 00:05:53.830
And so I decided to map it out
between Perl and between Ruby.

00:05:53.930 --> 00:05:55.820
So the next day.

00:05:56.960 --> 00:06:00.980
I go into work, do my normal routine,
drink some coffee, type some email,

00:06:01.060 --> 00:06:05.210
you know, do the normal thing there.

00:06:06.120 --> 00:06:11.280
I got an email that said, "Hey,
your code is due in

00:06:11.920 --> 00:06:14.190
five days for review."

00:06:14.680 --> 00:06:16.600
I was a little bit panicked.

00:06:16.600 --> 00:06:18.040
I was--no.

00:06:18.640 --> 00:06:20.330
I don't really have much together.

00:06:20.440 --> 00:06:23.590
I thought I was going to have a
couple weeks to present this thing.

00:06:23.640 --> 00:06:25.600
I have five days to put
this thing together.

00:06:25.770 --> 00:06:30.270
Oh, I probably shouldn't have played
World of Warcraft last night.

00:06:30.270 --> 00:06:30.270
Not a good idea.

00:06:31.480 --> 00:06:33.290
It's really intimidating to
learn a foreign language.

00:06:33.510 --> 00:06:36.870
By the way, I threw this in here because
it's a little side joke

00:06:36.990 --> 00:06:38.040
to those who do know Ruby.

00:06:38.280 --> 00:06:42.160
The creator of Ruby is Japanese.

00:06:42.160 --> 00:06:45.020
But it's really intimidating to
learn a new foreign language.

00:06:45.020 --> 00:06:48.660
But I realized that, hey,
as long as I remain methodical

00:06:48.760 --> 00:06:53.090
about it and I plan everything out,
it should still come out okay.

00:06:53.090 --> 00:06:56.120
So I started off with the basics.

00:06:56.120 --> 00:06:58.020
This is how you do Hello World in Ruby.

00:06:58.020 --> 00:06:59.380
Not all that different from Perl.

00:06:59.590 --> 00:07:01.230
You just use a different command.

00:07:01.350 --> 00:07:04.480
Actually,
you can still use print if you wanted to.

00:07:04.480 --> 00:07:06.330
This is how you do arrays.

00:07:06.330 --> 00:07:07.770
Still really basic.

00:07:08.060 --> 00:07:10.590
Actually,
to those of you who know Python,

00:07:10.680 --> 00:07:13.620
it's pretty close to the Python syntax.

00:07:13.620 --> 00:07:16.130
And I also found some other
stuff along the way such as,

00:07:16.130 --> 00:07:19.780
hey, there are methods to call on
these things because everything

00:07:19.780 --> 00:07:21.520
inside of Ruby is an object.

00:07:21.590 --> 00:07:23.440
So you get some free stuff.

00:07:23.440 --> 00:07:26.180
This is much easier than it is in Perl.

00:07:27.040 --> 00:07:30.090
So, I got so fascinated with the stuff
that I was learning when I was

00:07:30.090 --> 00:07:33.280
going through this that I stayed
up until like 3 in the morning

00:07:33.730 --> 00:07:36.650
playing on it and it was just fun.

00:07:36.650 --> 00:07:39.120
And I fell asleep on my keyboard.

00:07:41.600 --> 00:07:43.690
It's not fun to wake up to beep
beep beep beep beep beep beep,

00:07:43.690 --> 00:07:47.200
you know,
that's going on on your computer, so.

00:07:47.290 --> 00:07:49.430
The next day was Saturday.

00:07:49.890 --> 00:07:52.150
and I'm here with Andy.

00:07:52.150 --> 00:07:58.990
I'm going to talk about the first
step of the code development process.

00:07:58.990 --> 00:08:05.520
I'm going to talk about the first
step of the code development process.

00:08:05.830 --> 00:08:09.570
I'm going to talk about the first
step of the code development process.

00:08:09.570 --> 00:08:09.570
I'm going to talk about the first
step of the code development process.

00:08:10.050 --> 00:08:11.000
I'm a real person.

00:08:11.000 --> 00:08:12.900
I really do like to have my free time.

00:08:12.900 --> 00:08:14.720
I really do like to play games.

00:08:14.830 --> 00:08:18.170
So I did some gaming,
but then I decided at noon, oh, no,

00:08:18.280 --> 00:08:20.160
I really need to jump into it.

00:08:20.310 --> 00:08:24.010
And one of the things I wanted to
tackle was how do I get this thing to

00:08:24.060 --> 00:08:29.080
talk into open directory because this
is kind of what I need to develop.

00:08:29.130 --> 00:08:32.100
I'm sure that there's code
that's already done for me here.

00:08:32.210 --> 00:08:34.110
So I found this thing called Ruby Gems.

00:08:34.110 --> 00:08:39.060
This is a box of gems that does--it's
kind of a package manager for Ruby.

00:08:39.060 --> 00:08:43.160
So it's like CPAN for Perl
or like eggs for Python.

00:08:43.340 --> 00:08:44.640
Ruby has gems.

00:08:46.310 --> 00:08:48.680
and I found a module
called Ruby Net LDAP.

00:08:48.740 --> 00:08:51.800
And what that let me do is it let me,
first off,

00:08:51.860 --> 00:08:56.140
take a lot of their example code to get
my program to talk to Open Directory.

00:08:56.140 --> 00:09:00.950
But it was not--it was not all
that hard to get my script up and

00:09:01.040 --> 00:09:02.890
going based off the example code.

00:09:02.890 --> 00:09:05.030
I just tweaked the server
name and I tweaked,

00:09:05.090 --> 00:09:09.360
you know, a couple of the things here and
there to get what I wanted out of it.

00:09:09.360 --> 00:09:13.270
And by 10:00 that night,
I had something that was working.

00:09:13.310 --> 00:09:14.490
I was talking to Open Directory.

00:09:14.590 --> 00:09:15.950
I was getting information out.

00:09:15.970 --> 00:09:16.530
It was working fine.

00:09:16.600 --> 00:09:18.900
I was parsing it in the way
that I wanted it to be parsed.

00:09:18.900 --> 00:09:20.860
And everything is kosher.

00:09:20.860 --> 00:09:25.160
And I think the reason why I was able to
get to that point was because I stopped,

00:09:25.210 --> 00:09:28.100
I listed everything out,
I was methodical and I broke the

00:09:28.100 --> 00:09:30.560
problem down into smaller chunks.

00:09:30.560 --> 00:09:34.860
So when you're learning a new language,
do the same thing that

00:09:34.860 --> 00:09:36.240
you do in the other

00:09:37.090 --> 00:09:39.980
So the next day involves Rails.

00:09:40.000 --> 00:09:42.760
So I wanted to get a jump start on it.

00:09:42.760 --> 00:09:46.650
Unfortunately, I had slept because I was
exhausted from all this coding.

00:09:46.890 --> 00:09:49.580
And I woke up a little bit later.

00:09:49.580 --> 00:09:52.410
And I had my script
that was spitting out,

00:09:52.600 --> 00:09:54.530
you know, stuff like this.

00:09:54.530 --> 00:09:57.640
It was giving me the IP address
out of open directory.

00:09:57.730 --> 00:10:00.620
It was giving me the host
name out of open directory.

00:10:00.680 --> 00:10:04.170
I had a little ping function that
would see if it was up or down.

00:10:04.250 --> 00:10:06.430
And I wanted to convert this
into something that was a little

00:10:06.430 --> 00:10:08.860
bit more snazzy and put a nice
little web interface on it.

00:10:08.860 --> 00:10:11.420
I wanted it to be like this program.

00:10:11.420 --> 00:10:14.740
So somebody at work had been
evangelizing Ruby on Rails to me.

00:10:14.740 --> 00:10:17.580
And they said, "Oh, yeah,
Rails is the way to get all your code

00:10:17.580 --> 00:10:22.140
and put it up on the web and takes five
lines of code." Same Ruby evangelist guy.

00:10:22.140 --> 00:10:24.620
And so I started to do some searching.

00:10:24.620 --> 00:10:28.260
And I came upon the site,
which is the rubyonrails.org website.

00:10:28.530 --> 00:10:31.190
One of the things that was really
useful here was the screencast.

00:10:31.300 --> 00:10:34.850
And people talk much faster than
I do through these screencasts.

00:10:34.990 --> 00:10:38.550
But it shows how you can build a
completely full--a fully functional

00:10:38.550 --> 00:10:41.600
application that talks to Flickr
and does all sorts of crazy stuff.

00:10:41.600 --> 00:10:44.190
It's really inspirational.

00:10:46.120 --> 00:10:51.060
And one thing that's nice is OS X has
all the stuff built into the system.

00:10:51.060 --> 00:10:53.380
So I didn't have to go download
and install Rails or anything.

00:10:53.380 --> 00:10:55.440
It's all built into
Leopard out of the box.

00:10:55.600 --> 00:10:59.780
So for me to get a basic website up,
I just had to type in these three things.

00:10:59.890 --> 00:11:01.920
And you get your basic start page.

00:11:01.920 --> 00:11:04.620
It's not all that exciting.

00:11:04.710 --> 00:11:06.440
So I figured out, oh,
I'm just going to follow

00:11:06.440 --> 00:11:09.040
the next two steps,
or two lines of code,

00:11:09.040 --> 00:11:13.060
to get this thing to generate
a template for me to use.

00:11:13.120 --> 00:11:15.260
These are kind of what you would use.

00:11:15.360 --> 00:11:21.150
And what's nice is on OS X Leopard,
all this stuff automatically creates

00:11:21.150 --> 00:11:24.380
the SQLite database for you to use,
and it does all this other

00:11:24.500 --> 00:11:26.700
stuff for you magically.

00:11:27.040 --> 00:11:28.810
and you get a really basic website.

00:11:28.950 --> 00:11:33.400
So this doesn't look anything
like the other page that I wanted.

00:11:33.440 --> 00:11:37.080
I wanted to figure out how I can
get my code into this and to have

00:11:37.110 --> 00:11:40.690
it all formatted all nice and
pretty and to make it presentable.

00:11:40.940 --> 00:11:45.200
And I ended up bashing my head into
the wall trying to make this work.

00:11:45.430 --> 00:11:51.300
And I think the biggest reason
why is because I was trying

00:11:51.300 --> 00:11:57.200
to write stuff procedurally,
and it doesn't work that way with Rails.

00:11:57.590 --> 00:12:02.770
So I found that out by going
into Freenode on IRC and

00:12:02.770 --> 00:12:04.750
wanted to pound Ruby on Rails.

00:12:04.850 --> 00:12:06.550
The people there are really useful.

00:12:06.800 --> 00:12:10.580
There's a topic on the channel
that pointed me to this really

00:12:11.070 --> 00:12:15.960
useful Ruby on Rails documentation
website called noobkit.com.

00:12:15.960 --> 00:12:17.310
Very appropriate for me.

00:12:17.440 --> 00:12:20.090
And it was all interactive,
showed a lot of examples,

00:12:20.090 --> 00:12:23.300
but I still didn't really
get it and I went to sleep.

00:12:23.310 --> 00:12:25.280
I just kind of gave up.

00:12:25.280 --> 00:12:29.270
But on the next day, I went into

00:12:29.850 --> 00:12:33.130
I figured, hey, I'm going to talk to my
Ruby evangelist friend because he

00:12:33.220 --> 00:12:34.700
said it would be five lines of code.

00:12:34.880 --> 00:12:38.800
I did my five lines on the
terminal and it's not doing it.

00:12:38.900 --> 00:12:42.040
So I talked to him a little bit about
what problems I was running up against.

00:12:42.180 --> 00:12:45.280
And he went on a spiel
about the Rails way.

00:12:45.500 --> 00:12:48.680
So the Rails way, what is that?

00:12:48.750 --> 00:12:54.610
Well, in all the sessions at WWDC,
we've been talking about model, view,

00:12:54.680 --> 00:12:55.720
controller.

00:12:56.080 --> 00:12:58.860
The Rails way means using a model,
a view,

00:12:58.860 --> 00:13:01.720
and a controller for your program.

00:13:01.760 --> 00:13:03.380
I was trying to write
everything procedural.

00:13:03.490 --> 00:13:06.030
I was trying to generate all my stuff.

00:13:06.170 --> 00:13:10.110
I had my view mixed in with my
logic and all this other stuff.

00:13:10.210 --> 00:13:11.450
And it wasn't working.

00:13:11.700 --> 00:13:15.490
And after talking to him about that,
he kind of said, oh, yeah, no,

00:13:15.490 --> 00:13:16.860
it's very much like Objective-C.

00:13:16.860 --> 00:13:19.450
So I know that you played
around with it a little bit.

00:13:19.460 --> 00:13:22.010
Just kind of do it that way.

00:13:22.150 --> 00:13:22.660
So I did.

00:13:22.680 --> 00:13:27.290
And I was thinking, oh, wow, OK,
that makes a lot more sense.

00:13:27.350 --> 00:13:29.970
I don't know why it wasn't
obvious to me before,

00:13:30.160 --> 00:13:32.520
probably because of the amount
of caffeine I've been having.

00:13:32.730 --> 00:13:35.500
But I went home and decided, hey,
I'm going to jump right in,

00:13:35.500 --> 00:13:38.210
I'm going to jump into the terminal,
get hacking away.

00:13:38.340 --> 00:13:41.820
And I realized that the
solution to my problem was

00:13:41.820 --> 00:13:43.320
kind of staring me in the face.

00:13:43.320 --> 00:13:46.430
I already had the SQLite
database that is housing all

00:13:46.430 --> 00:13:52.820
of my supplemental information,
like I was doing with my PHP thing.

00:13:52.850 --> 00:13:55.770
And I realized that there's an
additional piece of functionality

00:13:55.770 --> 00:13:59.760
that's built into Ruby on Rails,
which is Rake.

00:13:59.760 --> 00:14:03.820
And I could just leverage those two
technologies to get what I wanted.

00:14:03.830 --> 00:14:06.680
And the last day came.

00:14:06.920 --> 00:14:10.580
And I want to show you what
I was able to put together.

00:14:13.780 --> 00:14:18.040
So if we can go to--hey, please.

00:14:18.140 --> 00:14:21.040
So let's pull up my website here.

00:14:21.040 --> 00:14:23.200
I was able to get it going.

00:14:23.520 --> 00:14:25.660
This is all in Ruby on Rails.

00:14:25.710 --> 00:14:30.980
So some nice things here is this
lets you see information from open

00:14:30.980 --> 00:14:32.400
directory that you might find.

00:14:32.450 --> 00:14:36.090
So like your host name, your IP address.

00:14:36.250 --> 00:14:40.960
I did the DNS resolution by
generating that information.

00:14:42.080 --> 00:14:44.020
Mac address I was able
to get out of there.

00:14:44.110 --> 00:14:45.870
The owner information
was stuff that I put in.

00:14:45.870 --> 00:14:47.680
The location was stuff I put in.

00:14:47.900 --> 00:14:50.880
Serial number I put in.

00:14:50.880 --> 00:14:54.000
When the record was created,
it was done in Open Directory.

00:14:54.000 --> 00:14:57.280
So I was able to merge these
sets of information together.

00:14:57.630 --> 00:15:01.310
My Rake script that I'm running runs
every minute and it tells me whether

00:15:01.370 --> 00:15:03.940
or not a server is up and down.

00:15:04.450 --> 00:15:08.560
This is all--this didn't take
less--more than a week to put together.

00:15:10.210 --> 00:15:12.250
You can click on this stuff,
you can go through and edit stuff.

00:15:12.250 --> 00:15:15.100
So I can say Pacific Heights, X-Motion,
X-Motion, update.

00:15:15.100 --> 00:15:17.390
And it goes through and it
updates it all on the back end

00:15:17.400 --> 00:15:18.900
and this is all nice and dandy.

00:15:18.980 --> 00:15:26.830
Obviously this is fake information
or else I'd do a little bit

00:15:26.840 --> 00:15:27.180
more of a detailed demo,
but... I want to jump into the code

00:15:27.180 --> 00:15:27.180
that I used to put this together.

00:15:27.300 --> 00:15:32.340
I hope this is big enough
for everybody way back there.

00:15:32.340 --> 00:15:36.320
This is showing the
view for the web page.

00:15:36.320 --> 00:15:40.480
So you'll notice it's just
a--it looks like normal HTML.

00:15:40.780 --> 00:15:44.900
and down here there's more normal HTML.

00:15:44.900 --> 00:15:47.920
You'll see that I have some
extra stuff embedded in here.

00:15:48.210 --> 00:15:53.740
This shows off the templating style that
Ruby gives you--or Ruby on Rails gives

00:15:53.750 --> 00:15:59.700
you rather--which lets you go through
and inject Ruby code into your HTML.

00:16:00.610 --> 00:16:02.250
So this is my view.

00:16:02.420 --> 00:16:06.130
This is what makes up
the lovely page here.

00:16:06.690 --> 00:16:13.250
The model part--I'm sorry,
the controller part is over here.

00:16:14.610 --> 00:16:17.790
This is saying whenever
you go to the index page,

00:16:17.790 --> 00:16:20.710
I'm going to find all the stuff
that's inside of your database and I'm

00:16:20.710 --> 00:16:23.150
going to go through and print it out.

00:16:23.150 --> 00:16:25.540
So the controller is pretty basic.

00:16:26.200 --> 00:16:29.980
and the model is all default,
so there's no point in showing that.

00:16:30.130 --> 00:16:33.370
But one thing I do want to show you
is where most of the stuff--where

00:16:33.400 --> 00:16:35.400
the magic is actually happening.

00:16:35.480 --> 00:16:38.860
It's inside of this lib task section.

00:16:38.940 --> 00:16:42.960
And this lib task section is where you
can put these things called rake files,

00:16:43.110 --> 00:16:47.180
which are very much like make files,
but this is the component that

00:16:47.180 --> 00:16:49.890
goes through--and I have this
run nightly out of a cron.

00:16:50.090 --> 00:16:56.560
I just say rake update db and
it goes through and updates the

00:16:56.660 --> 00:16:58.460
database with new hosts out of it.

00:16:58.460 --> 00:17:01.220
And inside of here,
you'll see that there's the server name,

00:17:01.220 --> 00:17:03.300
LDAP port, all this other kind of stuff.

00:17:03.510 --> 00:17:07.650
All it does is it does a search for
everything inside of a certain container,

00:17:07.650 --> 00:17:09.880
grabs it all and puts it
inside of the database.

00:17:09.890 --> 00:17:13.000
I'm not going to dive too much into
this because this is pretty much

00:17:13.000 --> 00:17:17.900
all sample code that you can get out
of the Ruby net LDAP documentation.

00:17:17.900 --> 00:17:21.900
And then for updating the status,
if stuff is online or offline,

00:17:21.900 --> 00:17:23.740
I have this check host
script that runs on a,

00:17:23.750 --> 00:17:23.800
you know, Mac OS X system.

00:17:23.800 --> 00:17:24.660
And then I have this check
host script that runs on a,

00:17:24.790 --> 00:17:26.400
you know, minute basis.

00:17:26.400 --> 00:17:30.020
And all it does is it goes through and
it gets all the records out of it where

00:17:30.030 --> 00:17:33.420
there's an IP address and it pings them.

00:17:33.890 --> 00:17:36.900
So I was able to put all this
stuff together pretty quickly.

00:17:36.900 --> 00:17:39.340
Let's go ahead and go
back to slides real quick.

00:17:39.590 --> 00:17:42.780
I was able to put all this stuff
together in less than a week

00:17:42.780 --> 00:17:46.320
with a lot of procrastination,
you know, playing video games and stuff.

00:17:46.510 --> 00:17:49.760
And I think it's a
really good story of how,

00:17:49.790 --> 00:17:53.820
you know, even if you're busy,
you're overloaded,

00:17:53.820 --> 00:17:56.990
you have all this other stuff to do,
you can still do it.

00:17:57.080 --> 00:18:00.580
It's just a matter of
being methodical about it.

00:18:00.580 --> 00:18:04.300
These are the resources that
I used to make myself successful.

00:18:04.350 --> 00:18:07.930
The rubylang.org website was
great for getting started.

00:18:08.000 --> 00:18:12.080
The interactive tutorial that
they had on there was great.

00:18:12.080 --> 00:18:14.690
That's what made me
say yes to begin with.

00:18:14.690 --> 00:18:19.780
The noobkit.com website was wonderful
for the Ruby on Rails documentation.

00:18:19.780 --> 00:18:23.810
And the rubyonrails.org website
was great for evangelizing,

00:18:23.810 --> 00:18:27.240
you know, all the different things
that you can do with Rails.

00:18:27.240 --> 00:18:32.080
And RubyForge was where I found
out about the net LDAP website.

00:18:32.080 --> 00:18:35.620
So these are really
good resources to use.

00:18:35.620 --> 00:18:37.930
The people on IRC were so friendly.

00:18:38.370 --> 00:18:41.530
It's kind of a grab bag sometimes.

00:18:41.700 --> 00:18:43.810
But the people on these
channels were great.

00:18:43.810 --> 00:18:47.000
They were really friendly,
super accommodating.

00:18:47.210 --> 00:18:51.290
And the last thing on here, rdoc and ri,
that's the online documentation

00:18:51.290 --> 00:18:52.400
that comes with Ruby.

00:18:52.500 --> 00:18:54.780
So it's all built into the systems.

00:18:55.170 --> 00:18:57.790
And with that,
I'd like to go ahead and hand it

00:18:57.900 --> 00:19:01.920
off to Chris who's going to talk
talk about kicking the kicker.

00:19:09.430 --> 00:19:12.480
So I wanted to talk about
the Bridge support that is a

00:19:12.480 --> 00:19:15.900
very handy feature in 10.5,
but since the goal here is to

00:19:15.900 --> 00:19:19.360
actually solve problems that we
face as System Administrators,

00:19:19.360 --> 00:19:22.860
we're going to do that in the context
of building a replacement for the Kicker

00:19:22.860 --> 00:19:26.100
feature which disappeared in 10.5.

00:19:26.250 --> 00:19:29.440
So the much lamented Kicker.

00:19:29.570 --> 00:19:33.200
So the real underlying goal here
though is actually explaining

00:19:33.200 --> 00:19:38.240
how this is a very nice way for
us to interact with the system.

00:19:38.370 --> 00:19:42.560
Now, our systems that we deal with these
days are very complicated and we

00:19:42.560 --> 00:19:44.790
need to actually do things with that.

00:19:44.940 --> 00:19:48.930
We have to restart things or edit
policy when the network changes.

00:19:49.030 --> 00:19:53.060
Perhaps we have something where
our users may be mounting volumes.

00:19:53.100 --> 00:19:55.980
They plug in a FireWire drive and
we need to help them pull the video

00:19:55.980 --> 00:19:59.060
that they've been working on off for
an archival project because they're

00:19:59.060 --> 00:20:04.460
making 20,000 videos and we don't want
this to take a week doing it by hand.

00:20:04.580 --> 00:20:08.020
There's also a fair amount of time
where we need to detect conditions.

00:20:08.020 --> 00:20:11.720
So we can do something like
restart a service which has

00:20:11.790 --> 00:20:16.420
problems with network transitions
or some other policy decision.

00:20:16.680 --> 00:20:20.960
And the problem that we run into is that
the traditional approach for this is to

00:20:21.380 --> 00:20:23.250
create something like a shell script.

00:20:23.590 --> 00:20:27.530
Maybe we come up with something where
we watch on a log file or run something

00:20:27.640 --> 00:20:31.290
out of cron every minute or in the worst
case give our user something and say,

00:20:31.420 --> 00:20:35.070
when it breaks, run this and it should
hopefully be unbroken.

00:20:35.190 --> 00:20:37.980
The problem there is that this
doesn't really work that well.

00:20:38.020 --> 00:20:43.830
You set up your tail and you watch
grep for things out of syslog.

00:20:44.030 --> 00:20:46.950
And then a point release comes
out and you find out that somebody

00:20:46.950 --> 00:20:50.770
at Apple helpfully added more
information into the log message,

00:20:50.800 --> 00:20:54.270
which is great because now your logs
convey useful information that you

00:20:54.320 --> 00:20:57.540
wanted to have except that you've got
to go update your regular expression

00:20:57.540 --> 00:20:59.890
and push that out to all the machines.

00:20:59.990 --> 00:21:02.890
And that gets old.

00:21:03.150 --> 00:21:06.250
What we're trying to do here
is get out of this business of

00:21:07.420 --> 00:21:10.520
being a maintenance programmer,
where we have to watch because

00:21:10.640 --> 00:21:14.880
we're consuming things that weren't
really intended for our usage there.

00:21:15.030 --> 00:21:18.000
We're dealing with things like syslog
that wasn't a reliable interface.

00:21:18.000 --> 00:21:21.100
We have things like
running jobs out of cron,

00:21:21.100 --> 00:21:23.400
where we have to deal with the
fact that our job has to run

00:21:23.400 --> 00:21:26.000
every minute and it has no state.

00:21:26.000 --> 00:21:30.000
And it means that our scripts
tend to be somewhat useless there.

00:21:30.000 --> 00:21:34.110
We have these 30 or 40
lines of code there,

00:21:34.110 --> 00:21:38.000
and exactly four of those actually
solve the problem that we wanted.

00:21:38.000 --> 00:21:42.070
In this case, restarting auto-mount
whenever it started hanging,

00:21:42.070 --> 00:21:45.980
which was a problem in our
environment prior to 10.5.

00:21:46.000 --> 00:21:48.940
And that's a lot of
code for us to maintain.

00:21:49.050 --> 00:21:51.900
In this case,
if you look all the way up at the top,

00:21:52.050 --> 00:21:55.920
you can see it uses the file tail module,
which is not stable.

00:21:56.000 --> 00:22:00.660
We had to install that on some
of the machines that needed it.

00:22:01.210 --> 00:22:04.720
This approach doesn't scale for the
kind of complicated systems that

00:22:04.730 --> 00:22:07.580
we tend to be building these days.

00:22:07.580 --> 00:22:10.700
And a lot of the needs that have
been coming up are the kind where

00:22:10.700 --> 00:22:15.270
the conventional approach is becoming
less and less suitable for that.

00:22:15.370 --> 00:22:17.590
Shell languages are not
particularly advanced.

00:22:17.620 --> 00:22:21.190
And now we need to do
complicated string processing.

00:22:21.230 --> 00:22:26.040
We need to deal with other things
like LDAP servers or databases.

00:22:26.040 --> 00:22:29.600
We might have to parse
an XML file or a P list.

00:22:29.730 --> 00:22:33.810
And then we run into the other major
problem for a system administrator

00:22:33.810 --> 00:22:38.520
is that a lot of the software we
use wasn't designed with us in mind.

00:22:38.620 --> 00:22:41.590
So we have to do something like
script GUI events or reverse

00:22:41.590 --> 00:22:43.970
engineer a configuration file.

00:22:44.760 --> 00:22:48.870
I think the answer is for us to go
ahead and rethink exactly how we're

00:22:48.910 --> 00:22:51.230
going about running our systems there.

00:22:51.350 --> 00:22:55.180
So if we started to ask that question,
what would we really want?

00:22:55.590 --> 00:22:56.480
Well, the answer is clear.

00:22:56.640 --> 00:23:00.690
We want to become first
class users of our systems.

00:23:00.810 --> 00:23:04.200
When we have problems
that we need to solve,

00:23:04.260 --> 00:23:07.230
we want to solve it the same way
that the engineers at Apple or

00:23:07.230 --> 00:23:10.850
the software development company
might solve it using defined APIs,

00:23:10.850 --> 00:23:14.490
things which were designed for
that task so that they don't break.

00:23:14.540 --> 00:23:19.040
So that we don't run into the little
list of caveats to go with things.

00:23:19.140 --> 00:23:23.070
In short, we want it to become more like
software engineering where we

00:23:23.070 --> 00:23:26.790
actually are having time to think
about things like performance,

00:23:26.800 --> 00:23:31.400
robustness, usability there,
which is really getting past the idea

00:23:31.400 --> 00:23:35.010
that every problem should be solved with
a couple of lines of shell scripting,

00:23:35.350 --> 00:23:37.500
which I think is a good thing.

00:23:37.500 --> 00:23:39.550
In this case here,
this is an example of the

00:23:39.550 --> 00:23:41.440
Scripting Bridge framework code.

00:23:41.500 --> 00:23:44.300
And it's actually quite interesting.

00:23:44.300 --> 00:23:51.610
It's a little bit more
complicated than the other code.

00:23:51.610 --> 00:23:59.050
But what we're trying to do here
is we're trying to get people

00:23:59.220 --> 00:24:07.560
to understand the process of how
we're going to run our systems.

00:24:07.580 --> 00:24:14.100
And that's really what
we're trying to do here.

00:24:14.100 --> 00:24:14.100
And we're trying to get people
to understand the process of how

00:24:14.100 --> 00:24:14.100
we're going to run our systems.

00:24:14.100 --> 00:24:15.380
using the native API.

00:24:15.380 --> 00:24:20.680
This is the big change that 10.5 gave us,
is now on every Mac we have a

00:24:20.680 --> 00:24:24.640
standard interface for accessing
the Cocoa APIs from a language

00:24:24.650 --> 00:24:26.930
such as Python or Ruby there.

00:24:26.930 --> 00:24:32.440
The frameworks will actually
handle translating native Python or

00:24:32.440 --> 00:24:37.050
Ruby variables into whatever
the Objective-C API is expecting.

00:24:37.230 --> 00:24:40.900
And I realize that this is a
somewhat controversial issue,

00:24:40.900 --> 00:24:44.390
but I find that the resulting
Python code is frequently cleaner

00:24:44.540 --> 00:24:48.140
than the Objective-C code just
because the dynamic languages

00:24:48.160 --> 00:24:51.870
tend to have a very rich syntax,
and we can take advantage of that

00:24:51.940 --> 00:24:55.380
without having to get into the
conventional software distribution

00:24:55.380 --> 00:24:59.990
process and worrying about shipping out
32 and 64-bit binaries and so forth.

00:25:00.040 --> 00:25:05.290
So the major advantage here is the
access that we get to things like

00:25:05.340 --> 00:25:08.280
the system configuration framework.

00:25:08.280 --> 00:25:10.240
We can load things like QuickTime.

00:25:10.450 --> 00:25:35.650
We can load things like the command
line argument parsing so your users

00:25:35.660 --> 00:25:40.400
get something a little less hostile.

00:25:40.400 --> 00:25:40.400
It's pretty easy.

00:25:40.400 --> 00:25:41.240
Rich logging there,
which is a system administrators,

00:25:41.240 --> 00:25:44.520
we demand all of our vendors produce
good logging so we have an idea

00:25:44.520 --> 00:25:45.840
what their processes are doing.

00:25:45.840 --> 00:25:48.810
Well, we can do the same thing as well.

00:25:48.950 --> 00:25:56.390
So this is an example of the fairly
minor differences between Objective-C and

00:25:56.390 --> 00:25:59.440
Python for most of what I'm showing here.

00:25:59.440 --> 00:26:02.580
You can see it's largely syntax.

00:26:02.580 --> 00:26:05.830
And in the examples that
I worked with there,

00:26:05.850 --> 00:26:09.780
most of the time I was able to
take an Objective-C example out of

00:26:09.840 --> 00:26:12.380
Apple's device and then I was able
to take an Objective-C example

00:26:12.380 --> 00:26:13.460
out of a developer site,
copy it into a text editor,

00:26:13.470 --> 00:26:16.650
change a few brackets, add an underscore,
and run it,

00:26:16.650 --> 00:26:19.060
and it worked out of the box there.

00:26:19.060 --> 00:26:21.990
It's a pretty easy process there.

00:26:22.420 --> 00:26:24.410
And there is some good
documentation available.

00:26:24.560 --> 00:26:27.370
The last part I think
here is the key one,

00:26:27.380 --> 00:26:29.960
namely that if you have a
Mac with the developer tools,

00:26:29.980 --> 00:26:32.260
you already have most
of this code on there,

00:26:32.260 --> 00:26:40.360
everything from simple command
line scripts up to things involving

00:26:40.360 --> 00:26:40.360
WebKit or complicated GUIs.

00:26:40.360 --> 00:26:43.410
So it's very much worth looking at.

00:26:44.090 --> 00:26:48.800
I did run into a couple of issues
which I wanted to point out.

00:26:48.800 --> 00:26:51.800
The main one just being the
understanding that you are,

00:26:51.800 --> 00:26:55.400
in fact, now becoming a Cocoa programmer
if you go down this route.

00:26:55.480 --> 00:26:59.760
So you have to understand that
you're not pure Python anymore.

00:26:59.880 --> 00:27:02.240
In this case,
it was an issue with RunWhoops.

00:27:02.240 --> 00:27:06.230
It was fairly easy to solve,
but I found that this was well

00:27:06.230 --> 00:27:08.570
worth the time investment.

00:27:08.740 --> 00:27:13.580
And then the other point here is
you can build GUI applications.

00:27:13.670 --> 00:27:16.080
There's actually a deprecated
example in the developer tools,

00:27:16.080 --> 00:27:19.330
but it's better just to start
with the Xcode template there.

00:27:19.490 --> 00:27:24.160
Now, actually, earlier in the week,
I was at the Cocoa Heads talk,

00:27:24.300 --> 00:27:27.800
and they mentioned that there's
actually an application there which

00:27:27.800 --> 00:27:31.880
you can go find on the shelf at
most Apple stores called Checkout,

00:27:31.880 --> 00:27:35.690
which is written entirely in
Python using the Objective-C bridge.

00:27:35.850 --> 00:27:39.720
The developer actually was saying
that there wasn't a single line of

00:27:39.730 --> 00:27:42.150
Objective-C code in that application.

00:27:42.320 --> 00:27:46.710
So this is something that
can be used in production.

00:27:47.670 --> 00:27:51.730
Also, take a second for a little
bit of Python advocacy here.

00:27:51.790 --> 00:27:54.640
The situation is similar with Ruby,
but basically if you're

00:27:54.730 --> 00:27:57.780
a system administrator,
you want to know about at least

00:27:57.790 --> 00:28:01.270
the modules listed here and then
look through the rich standard

00:28:01.270 --> 00:28:06.480
library out there because again,
many of the problems that we need

00:28:06.550 --> 00:28:10.700
to deal with and the sorts of things
that can take a great deal of time

00:28:10.700 --> 00:28:10.700
in a shell script are already done.

00:28:11.040 --> 00:28:17.100
So, at that point, let's go back to the
kicker discussion here.

00:28:17.870 --> 00:28:22.350
Kickr existed because the people at
Apple working on OS X had the same needs

00:28:22.350 --> 00:28:24.800
that we do for dealing with changes.

00:28:24.840 --> 00:28:28.440
So they needed to be able to run
code when the network changed,

00:28:28.440 --> 00:28:31.800
when the power state changed,
the active user changed.

00:28:31.800 --> 00:28:36.040
And the problem was that this was
done in the system configuration

00:28:36.040 --> 00:28:38.660
framework with an XML file.

00:28:38.850 --> 00:28:40.800
Now,
if you're already thinking about this,

00:28:40.800 --> 00:28:43.200
you're going, "Wait,
doesn't that live under

00:28:43.200 --> 00:28:45.660
/system?" And that's the problem.

00:28:45.660 --> 00:28:47.780
Kickr wasn't a supported feature.

00:28:47.830 --> 00:28:52.800
It was the easiest way to have
something run when an event fired off.

00:28:52.800 --> 00:28:56.870
But unfortunately,
it disappeared completely in 10.5 when

00:28:57.050 --> 00:28:58.800
they changed some of the structure.

00:28:58.800 --> 00:29:01.750
We were no longer able to
piggyback on that code.

00:29:01.800 --> 00:29:06.800
There are also a few other
things that we can look at.

00:29:06.800 --> 00:29:12.510
Kickr was handy for what it was,
but frequently we also run into

00:29:12.510 --> 00:29:16.800
cases where we might want to
handle other sorts of events.

00:29:16.800 --> 00:29:20.760
FSEvents allows us to just monitor
arbitrary file system activity

00:29:20.800 --> 00:29:22.760
in a very low overhead fashion.

00:29:22.890 --> 00:29:25.740
This is the same thing that
tools like Spotlight use.

00:29:25.820 --> 00:29:29.800
And it's really handy if you do have
some sort of complicated workflow

00:29:29.800 --> 00:29:33.800
where you need to be able to react
to users creating files there.

00:29:33.800 --> 00:29:37.200
You get an efficient notification,
and you can process it

00:29:37.300 --> 00:29:41.800
directly in your Python code,
the same as any other event.

00:29:41.800 --> 00:29:44.660
Workspace notifications are also handy.

00:29:45.040 --> 00:29:50.800
Those apply any time things like a disk
image or a network volume is mounted,

00:29:50.800 --> 00:29:54.740
the active user changes,
an application launches.

00:29:54.800 --> 00:29:58.800
And there's one other improvement
that we can make here,

00:29:58.800 --> 00:30:02.790
which is that we can make this something
that doesn't require running as root.

00:30:02.920 --> 00:30:06.770
This actually means that we can open
this up to being a user accessible

00:30:06.800 --> 00:30:11.110
tool where some of our users,
many of mine are scientists who have

00:30:11.110 --> 00:30:14.640
these complicated workflow requirements,
which they're never really

00:30:14.670 --> 00:30:18.800
going to get quite set in stone
because their experiments change.

00:30:18.830 --> 00:30:21.800
And so I don't want to give
them root on the system,

00:30:21.820 --> 00:30:23.970
but I also don't want to have
to be restarting things and

00:30:24.030 --> 00:30:25.800
vetting their code all the time.

00:30:25.800 --> 00:30:27.800
Now they can just run
it under their account,

00:30:27.860 --> 00:30:31.360
and I can just help them
out if they get stuck.

00:30:32.360 --> 00:30:36.710
I also took the opportunity to take
advantage of the logging features and

00:30:36.710 --> 00:30:40.560
add a few things like being able to
list the sort of events that you can

00:30:40.560 --> 00:30:45.450
monitor on a system so that you can do a
little bit of discovery if you're trying

00:30:45.450 --> 00:30:48.140
to see what sort of tool you can solve.

00:30:48.140 --> 00:30:51.420
This example is a very simple one here.

00:30:51.420 --> 00:30:56.820
It uses the network change event just
to tell Squid to reconfigure itself.

00:30:56.820 --> 00:30:59.920
There's--Squid's kind of handy
if you're doing web development,

00:30:59.930 --> 00:31:02.780
but unfortunately it doesn't
handle network migration

00:31:02.970 --> 00:31:04.350
particularly gracefully.

00:31:04.470 --> 00:31:09.700
And as you can see here,
there's basically one line saying which

00:31:09.880 --> 00:31:12.860
key we want and we run a single command.

00:31:12.860 --> 00:31:15.790
And in the example below,
you can see that when the

00:31:15.910 --> 00:31:19.350
network state changes,
that fires off and I didn't have

00:31:19.520 --> 00:31:24.130
to do anything more than that
from the perspective of solving

00:31:24.280 --> 00:31:28.890
Now, we're about to switch to the
second and more interesting demo.

00:31:28.980 --> 00:31:32.550
But this one,
to provide a little background there,

00:31:32.580 --> 00:31:35.160
OpenSSH has a dynamic proxy mode.

00:31:35.190 --> 00:31:38.620
When you run that,
it will pretend to be a SOC server

00:31:38.870 --> 00:31:43.800
and tunnel any request over to the
remote end of its connection there.

00:31:43.800 --> 00:31:48.280
So, since we have launchd available,
I can have that set up to

00:31:48.280 --> 00:31:50.720
maintain that SSH connection.

00:31:50.820 --> 00:31:53.940
It will restart it if
it happens to time out.

00:31:53.940 --> 00:31:59.880
And then, with the public key
agent support in 10.5,

00:31:59.960 --> 00:32:04.820
I can be sure that my SSH agent is going
to be up if I have a network connection.

00:32:04.820 --> 00:32:07.340
So,
the only thing left here is going into

00:32:07.340 --> 00:32:10.970
my system preferences and checking
the little box that says use SOCs.

00:32:10.970 --> 00:32:14.090
And then, poof,
I'm on a conference wireless network.

00:32:14.090 --> 00:32:14.950
It's secure.

00:32:14.950 --> 00:32:18.170
I'm off at a place that has
some sort of weird ad injection.

00:32:18.380 --> 00:32:18.950
No problem.

00:32:18.960 --> 00:32:22.740
Except that I don't want to use it at
work because there we have a gigabit

00:32:22.850 --> 00:32:25.060
network and I don't want the overhead.

00:32:25.090 --> 00:32:28.790
And so, the solution here was basically
to have a little bit of code which

00:32:29.010 --> 00:32:32.960
can go in and selectively enable
or disable the use of the proxy

00:32:33.020 --> 00:32:36.360
based on whether or not I'm remote.

00:32:36.360 --> 00:32:39.710
And can we switch to the demo computer?

00:32:46.200 --> 00:32:51.860
So, as you can see,
currently we have the SOX proxy disabled.

00:32:51.860 --> 00:32:53.740
There's absolutely nothing set.

00:32:53.740 --> 00:32:58.090
Now, unfortunately,
the network people here don't

00:32:58.110 --> 00:33:02.100
want us reconfiguring things,
so this is actually a rigged demo,

00:33:02.100 --> 00:33:05.970
but it's rigged in a way that
illustrates how powerful this idea is,

00:33:06.000 --> 00:33:11.080
because instead of having this triggered
by firing off a network change event,

00:33:11.100 --> 00:33:15.100
I'm going to trigger it
by mounting a disk image.

00:33:15.140 --> 00:33:18.090
And as soon as that runs,

00:33:18.770 --> 00:33:21.000
You can see that this is updated.

00:33:21.060 --> 00:33:23.690
Down here we can see the log messages.

00:33:23.690 --> 00:33:26.580
And if we run the SCUtil,
we can see that that's

00:33:26.680 --> 00:33:28.400
already updated there.

00:33:28.450 --> 00:33:32.320
Now the configuration for
this is pretty simple.

00:33:32.320 --> 00:33:36.430
You can see up here I'm looking
for an NSWorkspace event.

00:33:36.430 --> 00:33:40.510
And it's the did mount
notification and it just points

00:33:40.510 --> 00:33:42.720
to a Python class that I wrote.

00:33:42.900 --> 00:33:47.930
Down here you can see the part
which would fire the same event

00:33:47.930 --> 00:33:54.730
and call the same code if the
network configuration changed.

00:33:58.570 --> 00:34:05.130
There's the entire class,
the key part being right here,

00:34:05.140 --> 00:34:07.420
where it looks to see--

00:34:07.970 --> 00:34:11.120
Am I on the corporate network?

00:34:11.260 --> 00:34:15.130
And if so, go ahead and enable the proxy.

00:34:15.310 --> 00:34:17.520
So we can switch back to slides.

00:34:20.500 --> 00:35:25.300
[Transcript missing]

00:35:26.900 --> 00:35:32.360
is an Enterprise Consulting
Engineer at Apple.

00:35:38.670 --> 00:35:39.600
Thanks Chris.

00:35:39.770 --> 00:35:41.650
Hey everybody, how are you doing today?

00:35:41.730 --> 00:35:44.990
We're going to take a look here
at something called Home Injector.

00:35:45.060 --> 00:35:48.170
And unlike the last two speakers
who got up there and talked

00:35:48.240 --> 00:35:52.840
about the death of Shell,
I did this in Bash because it was quick,

00:35:52.840 --> 00:35:54.210
dirty and easy.

00:35:55.910 --> 00:36:00.770
So the goal we had in mind here
was we wanted to allow users to

00:36:00.770 --> 00:36:02.600
use portable home directories.

00:36:02.600 --> 00:36:04.750
For those of you that don't know,
just really fast here,

00:36:04.750 --> 00:36:07.520
portable home directories are very cool.

00:36:07.520 --> 00:36:11.680
We can use this to take a user that
has both a local home and a network

00:36:11.680 --> 00:36:13.140
home and we synchronize the two.

00:36:13.250 --> 00:36:15.850
They're synchronized so if they
make a change to the local home,

00:36:15.900 --> 00:36:17.100
it's synchronized up to the network.

00:36:17.170 --> 00:36:19.810
If they make a change to the network,
it goes the other way.

00:36:19.820 --> 00:36:25.360
The newest file wins and then you have
everything in one place all the time.

00:36:25.400 --> 00:36:28.060
That way when you leave the office,
you have the stuff on your laptop

00:36:28.060 --> 00:36:30.840
and when you come back to use
your big eight core machine,

00:36:30.850 --> 00:36:32.800
you have everything there as well.

00:36:32.800 --> 00:36:36.060
It solves issues with applications
that hate network homes.

00:36:36.060 --> 00:36:40.100
Everybody that has tried to run network
homes in an organization has found

00:36:40.100 --> 00:36:43.540
at least one or two things that just
cannot tolerate network homes and

00:36:43.750 --> 00:36:48.160
this gets rid of that issue as well
because you then just have a local home.

00:36:48.160 --> 00:36:51.200
It works with open directory
obviously as an Apple technology.

00:36:51.250 --> 00:36:53.890
But honestly more important for
most of my customers these days,

00:36:53.970 --> 00:36:57.330
it works with active directory
because active directory is very,

00:36:57.470 --> 00:36:59.980
very prevalent in the
enterprise workspace.

00:36:59.980 --> 00:37:03.500
So we need to be able to share we
work with active directory as well.

00:37:03.500 --> 00:37:06.010
The syncing is all client side
kind of function so the client

00:37:06.010 --> 00:37:08.780
just needs to know where to go
to get the data and put the data.

00:37:10.850 --> 00:37:13.700
The key to portable home directories
is they need a couple things.

00:37:13.880 --> 00:37:16.340
They have to have a mobile
or an external account.

00:37:16.680 --> 00:37:18.250
These are exactly the same in Leopard.

00:37:18.250 --> 00:37:21.380
You can take a laptop with a
mobile account on it and put it

00:37:21.380 --> 00:37:24.300
in target disk mode and instantly
it's an external account.

00:37:24.510 --> 00:37:30.090
The only difference between a mobile
account and an external account is that

00:37:30.090 --> 00:37:30.090
the external account isn't in /users.

00:37:30.400 --> 00:37:32.460
Need to have a network home location,
obviously,

00:37:32.460 --> 00:37:34.180
otherwise there's nothing to sync to.

00:37:34.290 --> 00:37:38.700
This is going to be embedded in the
user's account in the directory services.

00:37:38.760 --> 00:37:40.600
And you need to have
a local home location.

00:37:40.640 --> 00:37:42.550
Again, obviously,
if you don't have a local home,

00:37:42.560 --> 00:37:44.440
you have nothing to sync.

00:37:45.900 --> 00:39:56.000
[Transcript missing]

00:39:56.820 --> 00:39:59.540
So the solution to this, obviously,
is a script.

00:39:59.560 --> 00:40:01.140
Otherwise I'm in the wrong room.

00:40:01.290 --> 00:40:04.740
So we need to replicate the
logic of a logon script.

00:40:04.830 --> 00:40:08.260
So we're going to need to take this and
we need to figure out how to turn that

00:40:08.260 --> 00:40:12.170
VB script or .bat file or whatever the
heck it is that they're running into

00:40:12.170 --> 00:40:14.080
something that a Mac can understand.

00:40:14.190 --> 00:40:16.060
We need to check for group membership.

00:40:16.100 --> 00:40:19.660
Apple has some very nice tools
built specifically to do this.

00:40:19.710 --> 00:40:22.870
We also need to set the home accordingly.

00:40:23.580 --> 00:40:24.850
So there's a couple of issues with this.

00:40:24.930 --> 00:40:27.740
The first one is where
do you get the script?

00:40:27.770 --> 00:40:31.440
A lot of times the guy who maintains
these scripts is maintaining this

00:40:31.460 --> 00:40:34.500
giant script because he doesn't
want to have to do something else or

00:40:34.500 --> 00:40:39.360
realize that if they just filled in
the profile he is no longer needed.

00:40:39.380 --> 00:40:41.360
But a lot of times they're
also kind of shut-ins.

00:40:41.360 --> 00:40:43.840
They're often a cube somewhere
in a basement room and they like

00:40:43.840 --> 00:40:45.160
someone to come talk to them.

00:40:45.190 --> 00:40:46.560
So just go ask.

00:40:46.560 --> 00:40:48.910
If you just go ask a lot of times,
they'll just give you the script

00:40:49.060 --> 00:40:51.960
and then you can take a look at
it and start converting that over

00:40:51.960 --> 00:40:53.580
to whatever language you want.

00:40:53.600 --> 00:40:57.560
The other one is how do you set up
a portable home account to work?

00:40:57.690 --> 00:40:59.800
To set up the portable
home account to work,

00:40:59.800 --> 00:41:00.800
we need attributes.

00:41:00.910 --> 00:41:01.720
What attributes?

00:41:01.760 --> 00:41:03.840
How do we construct these?

00:41:03.940 --> 00:41:03.960
Where do we put them?

00:41:03.990 --> 00:41:04.880
Things like that.

00:41:05.020 --> 00:41:08.640
Another way to get that script,
which I actually forgot to mention,

00:41:08.640 --> 00:41:11.320
is that remember I said that
Windows machines typically just

00:41:11.320 --> 00:41:14.320
mount a share and go get the script.

00:41:14.350 --> 00:41:16.330
Look at a Windows machine
that's logging in,

00:41:16.330 --> 00:41:19.540
see what share it mounts,
just go to your Mac then and

00:41:19.630 --> 00:41:22.020
connect to server SMB colon,
whack, whack.

00:41:22.030 --> 00:41:24.440
Just go download the script
straight to your machine as well.

00:41:24.440 --> 00:41:27.370
I've done that a couple times as well.

00:41:27.590 --> 00:41:31.080
So the attributes that we need
we came up with are going to

00:41:31.080 --> 00:41:33.060
be built by HomeInjector.bash.

00:41:33.060 --> 00:41:35.080
And HomeInjector.bash
does a couple things.

00:41:35.180 --> 00:41:38.360
And this is going to look really
similar to the logon script.

00:41:38.590 --> 00:41:41.580
It runs it log in instead of it log on.

00:41:41.590 --> 00:41:43.780
It checks for group memberships.

00:41:43.800 --> 00:41:47.270
It's going to inject the needed
attributes and construct those attributes

00:41:47.270 --> 00:41:49.490
into the user's cached account.

00:41:49.650 --> 00:41:52.740
And it turns out you only need two
attributes to make all this work.

00:41:52.750 --> 00:41:56.340
You need SMB home and you
need original home location.

00:41:56.340 --> 00:41:59.820
If you have these two attributes,
you can add them to any mobile account,

00:41:59.820 --> 00:42:03.200
whether that account has a network
home defined for it in it or not,

00:42:03.380 --> 00:42:07.170
and all of a sudden portable
home syncing magically works.

00:42:07.890 --> 00:42:10.840
So the actual script--and we're going
to go through this step by step here,

00:42:10.860 --> 00:42:14.790
and then we'll do a quick
demo with it actually working.

00:42:14.810 --> 00:42:18.130
So first we need to establish
some variables we use.

00:42:18.260 --> 00:42:22.190
And this is the part where
if you consider yourself

00:42:22.470 --> 00:42:23.400
A Bash expert.

00:42:23.400 --> 00:42:25.400
You should look away from the screen.

00:42:25.400 --> 00:42:28.530
I showed this to a friend of mine
from Google earlier today and his

00:42:28.650 --> 00:42:32.280
head literally nearly separated
from his shoulders as he just

00:42:32.280 --> 00:42:35.400
stared gape mouth at this code.

00:42:35.400 --> 00:42:38.570
Mainly the group array there
where I win the award for the

00:42:38.570 --> 00:42:43.380
most creative use of the strings
command to generate a Bash array.

00:42:43.410 --> 00:42:46.400
We just have a couple
things we need to do.

00:42:46.400 --> 00:42:48.400
We need to go ahead and figure
out what we're going to have.

00:42:48.400 --> 00:42:53.390
For this example, I use kids and parents
because that's always easy.

00:42:53.620 --> 00:42:57.270
You put in what the UNC path will
be and what the SMB path will be.

00:42:57.510 --> 00:43:01.400
The UNC path is usually what
it will find in the AD profile.

00:43:01.400 --> 00:43:05.370
The URL is what the AD plugin
would generally generate

00:43:05.390 --> 00:43:06.400
then in order to use this.

00:43:06.400 --> 00:43:09.400
So there we've got Gannon for the kids.

00:43:09.400 --> 00:43:10.360
It's our SMB server.

00:43:10.590 --> 00:43:14.350
Our link server was a
Mac OS X server in this case.

00:43:14.590 --> 00:43:16.400
SMB on both platforms.

00:43:16.400 --> 00:43:17.370
We're just going to
go ahead and use that.

00:43:19.010 --> 00:43:21.500
The next thing we need to do
is check for group membership.

00:43:21.580 --> 00:43:24.710
So when you're doing a login hook,
login hook has a couple of

00:43:24.850 --> 00:43:27.390
special variables you can call.

00:43:27.400 --> 00:43:31.900
$1 in this case is the username of
the-- the name of the user logging in.

00:43:31.900 --> 00:43:35.400
So this way we can just say I'm
checking for groups for this person.

00:43:35.550 --> 00:43:39.120
And we go back to my cunningly
crafted array and we go back and

00:43:39.120 --> 00:43:42.400
we use DSEditGroup to go ahead and
check for the members in there.

00:43:42.400 --> 00:43:45.260
This is just a built-in
function of DSEditGroup.

00:43:45.370 --> 00:43:48.030
It's been around since Tiger and
it's very easy--allows you

00:43:48.080 --> 00:43:49.400
just to return a good answer.

00:43:49.400 --> 00:43:51.400
Is this person in this group?

00:43:51.400 --> 00:43:53.900
If we do find it,
then we go ahead and just say yes.

00:43:53.900 --> 00:43:55.400
So that's the group they're found in.

00:43:55.400 --> 00:43:58.120
Obviously if you're doing this on
a much larger scale where someone

00:43:58.200 --> 00:44:01.400
could be in multiple groups,
you'd have to write that logic into this.

00:44:01.400 --> 00:44:03.290
But like I said,
this is a proof of concept

00:44:03.350 --> 00:44:06.380
script so just so you can get the
idea of what we're doing here.

00:44:06.400 --> 00:44:08.580
We're then going to build
out these attributes,

00:44:08.580 --> 00:44:09.900
which is extremely easy.

00:44:09.900 --> 00:44:12.400
It's just substituting in
some-- the variables we set up.

00:44:12.430 --> 00:44:16.570
So if they're in kids,
then set the kids URL path and the kids

00:44:16.570 --> 00:44:19.280
SMB path into these attributes here.

00:44:19.570 --> 00:44:20.900
When I do scripting,
if I'm going to have an

00:44:20.910 --> 00:44:23.580
attribute or something like
that that I need to inject,

00:44:23.620 --> 00:44:26.850
I just name the variable
whatever the actual name of

00:44:26.850 --> 00:44:28.370
what I'm going to be using is.

00:44:28.490 --> 00:44:30.780
In this case,
the attribute SMBHome will be

00:44:30.840 --> 00:44:32.800
created from the variable SMBHome.

00:44:32.900 --> 00:44:35.870
It makes it very simple when
you're writing your script to

00:44:35.930 --> 00:44:37.740
keep up with what you're doing.

00:44:38.180 --> 00:44:41.600
And then I'm going to inject these into
the local directory services and exit.

00:44:41.760 --> 00:44:45.860
So I just use "discal," I just use
"discal local," and in that user,

00:44:45.860 --> 00:44:47.360
I create these two attributes.

00:44:47.360 --> 00:44:51.770
You can see again I'm using the $1 there,
so I don't have to think about anything.

00:44:51.870 --> 00:44:54.130
So login hooks will take care of that.

00:44:54.210 --> 00:44:57.900
And then we just exit
out of that cleanly.

00:44:58.030 --> 00:45:01.200
So I'm going to switch over
to the demo machine now.

00:45:03.720 --> 00:45:05.600
And we'll take a look at this.

00:45:05.860 --> 00:45:06.600
Okay.

00:45:06.610 --> 00:45:10.100
So I have here a Windows 2008
domain controller.

00:45:10.170 --> 00:45:14.920
And if I were to log in on it,
I'll show you I have a user.

00:45:15.860 --> 00:45:19.790
This machine is bound
to Active Directory,

00:45:19.790 --> 00:45:22.950
but I don't currently
have any users set up.

00:45:23.060 --> 00:45:24.700
Oh, I do have that one.

00:45:24.700 --> 00:45:27.090
I'm going to remove him real fast.

00:45:30.610 --> 00:45:32.590
and David Leith at home.

00:45:32.610 --> 00:45:34.600
Okay, now we're ready.

00:45:34.600 --> 00:45:36.990
So if I look in here and I open up ADUC,

00:45:39.020 --> 00:45:41.500
We can take a look at
Owen's account here.

00:45:41.630 --> 00:45:45.140
And you'll notice that Owen does
not have a network home set.

00:45:45.300 --> 00:45:47.470
So, profile, nothing set.

00:45:47.700 --> 00:45:49.350
In Active Directory,
you can have the local

00:45:49.410 --> 00:45:50.640
home or the network home.

00:45:50.640 --> 00:45:54.340
And in this case,
there's just nothing to find at all,

00:45:54.340 --> 00:45:57.040
so we won't have to have
it worry about anything.

00:45:57.160 --> 00:45:58.900
We can look at what he's a member of.

00:45:58.900 --> 00:46:03.410
He is a member of a group
called Windows Homes.

00:46:05.240 --> 00:46:06.150
And there he is in there.

00:46:06.340 --> 00:46:09.600
And that way we know that when we--
that's the group we're going to key off

00:46:09.750 --> 00:46:12.860
his home folders on a Windows server.

00:46:12.940 --> 00:46:18.360
So if I cancel out of that and
then I log out of this workstation,

00:46:18.450 --> 00:46:25.240
getting control of my mouse back,
we can log in as Owen.

00:46:25.340 --> 00:46:28.520
So I'm going to log out, leave my domain
controller up and running.

00:46:30.610 --> 00:46:33.900
I'll log in as Owen.

00:46:33.950 --> 00:46:36.600
And I've set the AD plugin--and I'll
show you these settings in a second--

00:46:36.600 --> 00:46:39.230
I've set the AD plugin to just go
ahead and make a mobile account

00:46:39.630 --> 00:46:41.500
and to not bother the user with it.

00:46:41.560 --> 00:46:44.700
Because inevitably someone checks
the wrong box there and then you

00:46:44.700 --> 00:46:46.450
have to go get the box back for them.

00:46:46.650 --> 00:46:48.800
So you can see his home
is just a local home here.

00:46:48.890 --> 00:46:52.140
And if he was to go into the
system preferences and look

00:46:52.240 --> 00:46:54.150
at the account preferences,

00:46:54.360 --> 00:46:57.820
You'll notice that he has
the mobile account here,

00:46:57.990 --> 00:46:59.030
but it's grayed out.

00:46:59.100 --> 00:47:01.470
I can't click on it,
so I can't set up mobile home

00:47:01.480 --> 00:47:03.990
syncing or anything like that.

00:47:04.200 --> 00:47:40.000
[Transcript missing]

00:47:44.250 --> 00:47:47.050
Now that I've authenticated,
I can click on Preferences.

00:47:47.050 --> 00:47:48.950
And I want to set this
preference at a machine level.

00:47:49.130 --> 00:47:50.620
So I'm going to pick my machine here.

00:47:50.910 --> 00:47:52.640
And here's my bug.

00:47:53.690 --> 00:47:56.480
That's a known issue
and it is being fixed.

00:47:56.640 --> 00:47:58.940
It's completely cosmetic issue.

00:47:58.940 --> 00:48:02.110
It does not affect anything
from actually functioning.

00:48:02.260 --> 00:48:04.040
So if I come in here to
scripts and I click on always,

00:48:04.040 --> 00:48:08.120
here you see I can have login scripts
and logout scripts done with policy.

00:48:08.420 --> 00:48:11.790
Rather than push out the login
script to every machine with

00:48:11.790 --> 00:48:15.400
ARD or something like that,
I can just put it in the directory,

00:48:15.400 --> 00:48:18.140
which is kind of the whole point
of using a directory service,

00:48:18.230 --> 00:48:20.340
and all the workstations then
get their script from here.

00:48:20.340 --> 00:48:23.170
That way if I find a typo,
if I need to make an edit to

00:48:23.290 --> 00:48:26.250
it or something like that,
I don't have to worry about it.

00:48:26.370 --> 00:48:28.990
I just change it in WorkRoute
Manager and all the workstations

00:48:28.990 --> 00:48:30.080
get it automatically.

00:48:30.870 --> 00:48:34.580
So I do want to manage the login script,
so I put this in a convenient

00:48:34.580 --> 00:48:36.140
location here to load it in.

00:48:37.850 --> 00:48:38.990
Click Open.

00:48:38.990 --> 00:48:43.120
That loads that into the directory
after I clear some dialogs.

00:48:43.320 --> 00:48:44.690
And now it's ready to go.

00:48:44.880 --> 00:48:48.060
If I were to look at this,
it actually stores that.

00:48:48.200 --> 00:48:50.440
It encodes it.

00:48:50.550 --> 00:48:54.110
So it's a little bit scary to look at.

00:48:54.300 --> 00:49:02.900
[Transcript missing]

00:49:03.120 --> 00:49:08.160
and David So already there was some
machine specific MCX attached to this.

00:49:08.220 --> 00:49:12.320
Now, to get that to work,
obviously a login hook--I have to login,

00:49:12.360 --> 00:49:13.180
right?

00:49:13.180 --> 00:49:15.470
So I'm going to log out.

00:49:16.380 --> 00:49:17.490
and log back in as Owen.

00:49:17.500 --> 00:49:20.000
And when I do that,
all of a sudden my home syncing

00:49:20.000 --> 00:49:21.690
should be functioning properly.

00:49:21.760 --> 00:49:23.100
So I'm going to log back in as Owen.

00:49:23.250 --> 00:49:25.500
To the user,
there's no actual change in the

00:49:25.500 --> 00:49:27.260
behavior that they're seeing.

00:49:27.330 --> 00:49:30.300
So we get all logged back in.

00:49:30.360 --> 00:49:33.160
And now I'm going to open
up System Preferences.

00:49:33.210 --> 00:49:36.060
And magically the button now works.

00:49:36.130 --> 00:49:40.060
So if I click on Settings here,
I can actually go in and set this up.

00:49:40.100 --> 00:49:42.860
I'm going to say Automatically
Sync My Home Folder.

00:49:42.890 --> 00:49:46.690
And I'll give you my status up
there so I can see what I'm doing.

00:49:48.290 --> 00:49:49.640
and I'm going to sync the home now.

00:49:49.700 --> 00:49:54.590
This is following the local sync
settings that are default on the client.

00:49:54.660 --> 00:49:57.240
You could push down more
sync settings though using

00:49:57.240 --> 00:49:59.010
Workgroup Manager and Policy.

00:49:59.100 --> 00:50:00.590
So it's going to take a
second here to do this.

00:50:00.720 --> 00:50:05.480
It is mounting a home to itself
in a Windows VM running on a mini.

00:50:05.560 --> 00:50:08.100
So this will take a second.

00:50:09.200 --> 00:50:14.600
So now the home has synchronized
and if I were to make a folder here,

00:50:19.050 --> 00:50:22.340
Demo is working.

00:50:22.380 --> 00:50:24.000
Then we log out of OWEN.

00:50:24.030 --> 00:50:26.550
It'll synchronize again here.

00:50:28.400 --> 00:50:30.560
And then we'll log back in and
we'll actually just look at the

00:50:30.570 --> 00:50:33.180
file system in Windows and we
should see that it's complete.

00:50:33.200 --> 00:50:35.300
It did work earlier
in the lab downstairs,

00:50:35.300 --> 00:50:37.200
so I'm assuming it's going to work again.

00:50:37.210 --> 00:50:42.200
And you can actually do this to inject
that in so that that sort of thing works.

00:50:42.200 --> 00:50:45.200
This is because I had
synchronized before.

00:50:45.490 --> 00:50:48.200
The network is newer in this case.

00:50:50.900 --> 00:50:53.060
There we go.

00:50:53.060 --> 00:50:55.500
Because the network is newer,
because I just created

00:50:55.500 --> 00:50:56.900
this mobile account.

00:50:56.960 --> 00:50:59.040
So as soon as this is done syncing,
we'll log back in and we'll take a

00:50:59.040 --> 00:51:02.520
look and you'll see that it actually
did work and I never had to change

00:51:02.620 --> 00:51:11.940
the AD profile for the user at all.

00:51:11.940 --> 00:51:11.940
All right.

00:51:11.940 --> 00:51:16.490
So synchronizing is now complete and
we can take a look at that file system.

00:51:23.810 --> 00:51:29.090
So if I go back to my VM now,
take a look in the console,

00:51:29.110 --> 00:51:30.640
take a look at the computer.

00:51:30.640 --> 00:51:34.640
Oh, not that drive.

00:51:36.180 --> 00:51:40.090
What could they sort
them alphabetically now?

00:51:40.110 --> 00:51:44.220
Holmes, Owen, Desktop.

00:51:44.460 --> 00:51:48.980
and David So you can see it actually did
synchronize the changes back up there.

00:51:48.980 --> 00:51:52.200
And if we go back and look
at Owen's account still,

00:51:52.240 --> 00:51:57.280
again just to verify that
there is no home path set.

00:51:57.280 --> 00:52:00.970
So we can go back to the slides now.

00:52:07.460 --> 00:52:09.540
So a couple things to
keep in mind about this.

00:52:09.560 --> 00:52:13.860
I can see some gears around the room
grinding in minds right now because I'm

00:52:13.860 --> 00:52:18.400
sure there's someone in this room that is
stuck with these antiquated Windows logon

00:52:18.400 --> 00:52:20.370
policies to determine network homes.

00:52:20.480 --> 00:52:22.400
So the real solution is
not to script this at all.

00:52:22.400 --> 00:52:24.580
The real solution is to
use the AD profile like

00:52:24.580 --> 00:52:26.400
Microsoft tells everyone to do.

00:52:26.400 --> 00:52:29.030
So static logon scripts can be hard
to maintain if you have a large

00:52:29.030 --> 00:52:31.790
amount of logic that are in them
because if you change the name of a

00:52:31.800 --> 00:52:33.400
group somewhere and things like that.

00:52:33.400 --> 00:52:38.050
This can be made easier if you deploy
your log in hooks with policy though.

00:52:38.560 --> 00:52:41.390
That way you don't have to
actually go touch every computer.

00:52:41.610 --> 00:52:44.400
You just update it in
your directory services.

00:52:45.380 --> 00:52:47.060
You can go download this script now.

00:52:47.060 --> 00:52:49.540
It's on afp548.com.

00:52:49.540 --> 00:52:51.200
And that way you can take
a look at it yourself.

00:52:51.200 --> 00:52:52.060
It's very simple.

00:52:52.060 --> 00:52:54.430
I wrote it in Bash and it's
just--it's very simple to

00:52:54.430 --> 00:52:55.740
understand and easy to look at.

00:52:55.740 --> 00:52:59.810
So go ahead and go grab it and
take a look and you can possibly

00:52:59.810 --> 00:53:02.030
use that or just even use it as
kind of a template for working

00:53:02.120 --> 00:53:03.900
with log in scripts on your own.

00:53:03.900 --> 00:53:05.450
So hand things back to Joel now.

00:53:05.580 --> 00:53:07.180
Thank you very much.