WEBVTT

00:00:20.800 --> 00:00:22.080
Good morning, everybody.

00:00:22.240 --> 00:00:22.600
Can you hear me?

00:00:22.690 --> 00:00:24.130
Great.

00:00:24.260 --> 00:00:29.210
My name is Tim Omernick,
and I'm an iPhone engineer at Apple.

00:00:29.860 --> 00:00:34.030
So over the past year, almost,
we've been working really hard to

00:00:34.030 --> 00:00:38.040
get the SDK ready for people to
start writing iPhone applications.

00:00:38.130 --> 00:00:40.800
Now, obviously,
we're very excited about this,

00:00:40.800 --> 00:00:44.460
but we've also taken this opportunity
to add some really exciting things

00:00:44.460 --> 00:00:48.730
to Safari on iPhone 2.0 that you,
web developers,

00:00:48.730 --> 00:00:52.000
take advantage of in your applications.

00:00:53.950 --> 00:00:56.570
So I'm going to focus mostly on that,
but before I get started,

00:00:56.570 --> 00:00:59.780
I wanted to talk about
web applications today.

00:00:59.970 --> 00:01:03.050
There are over 1,700
iPhone web applications,

00:01:03.140 --> 00:01:04.190
approaching 1,800.

00:01:04.200 --> 00:01:06.400
There are more popping
up every single day.

00:01:06.430 --> 00:01:09.750
These do a variety of
really awesome things.

00:01:09.940 --> 00:01:12.170
I could talk about all of them,
but we'd be here for a while,

00:01:12.170 --> 00:01:17.250
so I'm just going to highlight three
of them that I use very frequently.

00:01:18.560 --> 00:01:20.970
First up,
here's a little version of Wikipedia.

00:01:20.990 --> 00:01:24.890
Anybody who knows me knows that
I spend way too much time on Wikipedia,

00:01:24.980 --> 00:01:25.890
so I really like this.

00:01:25.910 --> 00:01:29.280
You notice it has a nice
big search field at the top.

00:01:29.350 --> 00:01:31.260
It's really easy to get to.

00:01:31.380 --> 00:01:34.750
Additionally,
the content area of this web app is

00:01:34.750 --> 00:01:38.860
all fit to the width of the device,
and so the text is nice and legible.

00:01:38.860 --> 00:01:42.810
It's very easy to navigate around
inside of Wikipedia using this.

00:01:44.580 --> 00:01:46.340
This is the iCal train.

00:01:46.340 --> 00:01:49.250
I live down closer to Apple,
so whenever I need to get to the city,

00:01:49.250 --> 00:01:52.300
I can use this to look
up train schedules.

00:01:52.430 --> 00:01:54.900
I just wanted to highlight
the shiny button,

00:01:55.050 --> 00:01:56.760
sort of iPhone-style art.

00:01:56.760 --> 00:01:58.740
Additionally,
it has the pinstripe background

00:01:58.740 --> 00:02:01.030
and sort of the standard list look.

00:02:01.060 --> 00:02:04.040
When you tap "View Schedule," it
slides over to a sectioned list,

00:02:04.070 --> 00:02:07.050
much like you'd see in the
iPod app on the iPhone.

00:02:08.640 --> 00:02:09.600
Everybody knows Google.

00:02:09.600 --> 00:02:10.940
I'm sure you've all seen this.

00:02:10.940 --> 00:02:13.530
I just wanted to highlight this because
I think they've done a great job of

00:02:13.530 --> 00:02:16.620
taking all of their different web
apps and sort of condensing them down

00:02:16.620 --> 00:02:19.660
into something that really fits well
and is really usable on the iPhone.

00:02:19.810 --> 00:02:22.160
I think they've done
a great job with this.

00:02:25.030 --> 00:02:26.800
So these are really cool apps.

00:02:26.800 --> 00:02:29.040
Again, there are a whole bunch more.

00:02:29.050 --> 00:02:32.240
A common thread with these applications
is that they look like iPhone apps.

00:02:32.240 --> 00:02:35.660
People have gone to this extra effort
to make it seem like these apps are

00:02:35.790 --> 00:02:37.760
real native iPhone applications.

00:02:37.760 --> 00:02:40.420
They really feel at home on the iPhone.

00:02:41.300 --> 00:02:43.490
So while these look
like real iPhone apps,

00:02:43.490 --> 00:02:46.120
we think that they could be
made a little bit better,

00:02:46.210 --> 00:02:47.790
of course.

00:02:48.250 --> 00:02:49.910
They look like iPhone apps,
but they don't always

00:02:50.170 --> 00:02:53.700
feel like iPhone apps,
and this is an important distinction.

00:02:55.270 --> 00:02:58.070
Many of these web applications
suffer from what I like to

00:02:58.070 --> 00:03:00.800
call delayed interaction.

00:03:00.930 --> 00:03:04.220
Just to show an example of what this is,
here's the AOL television

00:03:04.260 --> 00:03:06.320
listings web app,
which I think is actually one of the

00:03:06.330 --> 00:03:07.800
better-looking web apps out there.

00:03:07.870 --> 00:03:12.950
It looks like a real native application.

00:03:13.330 --> 00:03:15.570
But the illusion starts to sort
of break down as soon as you start

00:03:15.610 --> 00:03:17.020
interacting with the content here.

00:03:17.350 --> 00:03:19.400
When you touch one of
the television shows,

00:03:19.400 --> 00:03:21.720
instead of getting the nice
blue highlight like you're

00:03:21.720 --> 00:03:25.120
used to in iPhone lists,
you get this gray highlight thing

00:03:25.120 --> 00:03:26.540
and the bubble that pops up.

00:03:26.540 --> 00:03:28.680
I'm sure you've all seen this thing.

00:03:28.990 --> 00:03:32.800
So this is informative,
but not exactly what you would

00:03:32.800 --> 00:03:36.380
expect or want in a web application.

00:03:38.940 --> 00:03:41.300
Additionally,
a web application today cannot take

00:03:41.300 --> 00:03:44.040
advantage of multitouch or gestures.

00:03:44.040 --> 00:03:47.910
These are really important to
native iPhone applications.

00:03:48.020 --> 00:03:51.570
Just to show an example here,
this is the Maps application.

00:03:53.300 --> 00:03:54.700
It has the pinch gesture.

00:03:54.700 --> 00:03:57.700
You can zoom in and out
using a two-finger pinch.

00:03:57.930 --> 00:04:05.200
You can also zoom out quickly by
tapping with two fingers on the map.

00:04:05.200 --> 00:04:08.160
So this is something that's just not
possible today in a web application,

00:04:08.160 --> 00:04:10.280
and we're hoping to solve that.

00:04:14.790 --> 00:04:16.630
So what are we going to talk about today?

00:04:16.670 --> 00:04:19.700
We're going to go over
JavaScript touch and gesture events,

00:04:19.760 --> 00:04:22.220
CSS visual effects,
which you can use in addition

00:04:22.240 --> 00:04:24.900
to JavaScript touch and gesture
events to provide fluid,

00:04:24.970 --> 00:04:27.620
responsive user interface feedback.

00:04:28.180 --> 00:04:31.170
We're going to talk about how to store
user data within your web application,

00:04:31.280 --> 00:04:33.100
and additionally,
we're going to go over some tips and

00:04:33.140 --> 00:04:38.420
tricks that you can use to polish and
really add some shine to your iPhone app.

00:04:38.750 --> 00:04:42.600
So let's get started with
JavaScript touch and gesture events.

00:04:42.600 --> 00:04:49.850
You can think of this as
multi-touch for JavaScript.

00:04:53.860 --> 00:04:56.890
So the first thing you get right out of
the box is more interactive controls.

00:04:56.980 --> 00:04:59.450
Instead of this sort of delayed
interaction thing that you

00:04:59.450 --> 00:05:02.810
see in iPhone web apps today,
you can respond directly

00:05:02.860 --> 00:05:04.420
to the user's touches.

00:05:05.550 --> 00:05:08.210
You can implement custom gestures.

00:05:08.310 --> 00:05:11.480
We have identified a couple of common
ones that we think people are going

00:05:11.480 --> 00:05:14.500
to use in all sorts of different
applications in a variety of ways.

00:05:14.540 --> 00:05:18.920
So we've come up with gesture
events that sort of standardize two

00:05:18.920 --> 00:05:21.500
gestures that we're very fond of.

00:05:21.500 --> 00:05:24.990
But you can use the raw touch events to
implement whichever gestures you want.

00:05:25.000 --> 00:05:28.110
So you can have some sort of a
two-fingered pinch while you're doing

00:05:28.110 --> 00:05:29.720
a zigzag kind of thing or whatever.

00:05:30.040 --> 00:05:31.990
Just use your imagination.

00:05:32.570 --> 00:05:36.170
Drag and drop is something people
have been asking us for a lot,

00:05:36.170 --> 00:05:39.500
and until today, it just has not been
possible on the iPhone.

00:05:39.510 --> 00:05:41.900
So we're going to show
you how to do that.

00:05:43.060 --> 00:05:44.200
Pretty much this is open-ended.

00:05:44.200 --> 00:05:48.340
You can use this for whatever you want,
whether it's just simple touch

00:05:48.380 --> 00:05:51.990
interaction or really advanced
multi-touch gestural input.

00:05:52.050 --> 00:05:56.310
Now you can do the same sorts of things
that native iPhone applications can do.

00:05:59.470 --> 00:06:00.900
So what's the big problem
with mouse events?

00:06:01.000 --> 00:06:02.700
Why can't you do these sorts
of things with mouse events?

00:06:02.740 --> 00:06:06.190
Why didn't we start with this existing
model and maybe extend that to support

00:06:06.300 --> 00:06:09.190
a device that's based on a touchscreen?

00:06:09.400 --> 00:06:13.940
Well, there are a lot of web applications
and web pages out there that were

00:06:13.940 --> 00:06:17.260
written under the assumption that
the user is on a computer and has a

00:06:17.260 --> 00:06:18.860
mouse and that there are scroll bars.

00:06:18.860 --> 00:06:21.540
None of these assumptions
are valid on the iPhone.

00:06:21.540 --> 00:06:25.380
So we have this sort of simulated event
model where when you're touching the

00:06:25.380 --> 00:06:27.940
page and moving your finger around,
you're really just scrolling around.

00:06:27.940 --> 00:06:31.650
And no events are really sent down into
the page until you tap and release.

00:06:31.660 --> 00:06:35.340
And this works fine on the vast
majority of websites that are out there,

00:06:35.340 --> 00:06:37.740
but it doesn't afford the
kind of flexibility that you

00:06:37.740 --> 00:06:38.850
might want in an application.

00:06:38.860 --> 00:06:40.080
Amen.

00:06:40.260 --> 00:06:43.910
So for simplicity for web applications
that are designed from the get-go to work

00:06:43.910 --> 00:06:46.780
well on a multi-touch-based platform,
we're introducing

00:06:46.860 --> 00:06:49.670
JavaScript Touch and Gesture Events.

00:06:50.380 --> 00:06:52.460
If you've done any sort of
programming with mouse events,

00:06:52.530 --> 00:06:54.680
though,
you can sort of conceptually think

00:06:54.680 --> 00:06:59.030
of this as a lot like mouse events,
but instead of having one

00:06:59.150 --> 00:07:01.850
cursor with one point,
you've got a lot of cursors.

00:07:01.910 --> 00:07:06.230
In actuality, they're fingers,
but they work pretty much the same.

00:07:09.400 --> 00:07:12.290
So to show you a little demo of what's
possible with JavaScript touch events,

00:07:12.340 --> 00:07:14.750
I'd like to invite my friend
and colleague Brad Moore on

00:07:14.750 --> 00:07:16.350
stage for a little demo.

00:07:16.530 --> 00:07:20.690
Brad?

00:07:22.670 --> 00:07:23.600
Thanks, everyone.

00:07:23.600 --> 00:07:23.800
I'm Brad.

00:07:23.800 --> 00:07:26.760
I work with Tim on the iPhone
software engineering team.

00:07:26.850 --> 00:07:28.840
So we've got some great
demos for you today,

00:07:28.890 --> 00:07:31.560
but they've been distilled
down for simplicity's sake,

00:07:31.600 --> 00:07:34.200
and I want to start out with
a slightly more intricate,

00:07:34.250 --> 00:07:35.630
motivating example.

00:07:35.760 --> 00:07:40.200
So here we have Apple's retail page,
but it's been enhanced with a fun feature

00:07:40.200 --> 00:07:42.340
that works beautifully on the iPhone.

00:07:42.380 --> 00:07:43.340
Let me show you that now.

00:07:43.340 --> 00:07:44.860
This is, of course, a normal web page.

00:07:44.860 --> 00:07:47.800
I can scroll around, zoom into images.

00:07:47.850 --> 00:07:51.610
But if I zoom into this div,
I discover it's not just a static image.

00:07:51.660 --> 00:07:54.880
It's rather an embedded VR scene.

00:07:54.910 --> 00:07:59.080
And the cool thing about this
is it's not using QuickTime VR.

00:07:59.090 --> 00:08:01.780
It's, in fact,
not using any plug-in at all.

00:08:01.810 --> 00:08:07.540
It's using nothing but CSS transform,
JavaScript event handlers,

00:08:07.600 --> 00:08:11.280
and HTML elements,
so all core web technologies with

00:08:11.320 --> 00:08:13.480
which you're probably already familiar.

00:08:13.510 --> 00:08:14.860
And it's just fun to use.

00:08:14.890 --> 00:08:16.080
It's very responsive.

00:08:16.150 --> 00:08:18.580
It's even hardware accelerated.

00:08:18.620 --> 00:08:22.550
And it's this direct interaction that
makes iPhone apps so fun to use natively.

00:08:22.680 --> 00:08:25.130
And now web apps can be
first-class citizens in terms

00:08:25.140 --> 00:08:26.870
of the interactivity story.

00:08:26.920 --> 00:08:30.300
So hopefully this whets your appetite,
and now Tim's gonna take

00:08:30.340 --> 00:08:32.230
you through the details.

00:08:38.500 --> 00:08:40.900
Thank you, Brad.

00:08:41.090 --> 00:08:42.940
So that was just a little example,
pretty high level,

00:08:42.940 --> 00:08:45.830
of what you can do with touch events.

00:08:45.940 --> 00:08:48.990
So now I'd like to talk a
little bit about how they work.

00:08:49.590 --> 00:08:54.060
So like I said before,
this is pretty similar to mouse events.

00:08:54.200 --> 00:08:57.790
But each one of the user's
fingers you can sort of think

00:08:57.790 --> 00:08:59.820
of as its own distinct mouse.

00:09:00.000 --> 00:09:03.390
So each finger that comes in
contact with the screen will

00:09:03.390 --> 00:09:05.500
generate a sequence of events.

00:09:05.610 --> 00:09:08.520
And these events are:
when you touch the screen,

00:09:08.560 --> 00:09:10.490
that will send a touch start event.

00:09:11.670 --> 00:09:14.130
If you then move your
finger around on the page,

00:09:14.130 --> 00:09:16.790
that will send a sequence of
touch-move events for every

00:09:16.790 --> 00:09:18.700
time you move your finger.

00:09:19.550 --> 00:09:23.530
And then when you lift your finger,
that will send a touch end event.

00:09:23.660 --> 00:09:26.160
So just as an example,
a simple example of how

00:09:26.160 --> 00:09:28.830
you might want to use this,
if you wanted to detect something

00:09:28.920 --> 00:09:31.140
like a tap or just a double
tap with a single finger,

00:09:31.300 --> 00:09:33.390
you could look for a touch
start followed by a touch end

00:09:33.460 --> 00:09:35.880
with no touch moves in between.

00:09:36.370 --> 00:09:39.590
Additionally,
there is a touch cancel event.

00:09:39.600 --> 00:09:43.140
If you've been paying attention
to the UIKit sessions,

00:09:43.140 --> 00:09:45.520
you might see some similarities
between this event model and

00:09:45.520 --> 00:09:47.660
the touch event model in UIKit.

00:09:47.660 --> 00:09:51.550
So we've got this touch cancel event,
which is sent by the system

00:09:51.550 --> 00:09:54.260
in certain situations,
like when you're interacting with

00:09:54.260 --> 00:09:57.600
web content and you get a phone
call or the user suspends Safari.

00:09:57.600 --> 00:10:01.460
For the touch cancel event,
the difference between touch cancel and

00:10:01.460 --> 00:10:05.190
touch end is you wouldn't necessarily
want to perform whatever action

00:10:05.520 --> 00:10:10.530
your content was supposed to perform
on touch end on a touch cancel.

00:10:14.890 --> 00:10:18.600
So to register for these events,
this works just like any other DOM event.

00:10:18.680 --> 00:10:24.380
We have HTML event handlers,
onTouchStart, onTouchMove, onTouchEnd,

00:10:24.450 --> 00:10:27.730
and onTouchCancel,
just four new handlers.

00:10:27.750 --> 00:10:31.180
And these all take the
event as the first argument.

00:10:32.810 --> 00:10:34.830
Of course, you can also do this
from JavaScript using

00:10:34.830 --> 00:10:37.910
Element.AddEventListener.

00:10:44.320 --> 00:10:48.140
So you've got an element that is
registered to receive touch events.

00:10:48.140 --> 00:10:50.010
What do you do from there?

00:10:50.130 --> 00:10:52.060
Well, this event isn't any normal event.

00:10:52.060 --> 00:10:55.230
This is actually a touch event,
which has a few special properties

00:10:55.310 --> 00:10:57.090
that you should know about.

00:10:57.880 --> 00:11:00.540
If you want to process all of
the touches that are on the page,

00:11:00.570 --> 00:11:03.870
regardless of what they're touching,
you can look at event.touches.

00:11:04.030 --> 00:11:06.790
And this is really useful if you're
implementing your own custom gesture,

00:11:06.900 --> 00:11:13.940
where if you don't really care about
where the user is touching on the page,

00:11:13.940 --> 00:11:16.480
you just care about what the fingers
are doing in some relative fashion.

00:11:16.480 --> 00:11:16.480
So you can get all the touches on
the page through event.touches.

00:11:17.970 --> 00:11:20.890
If you just want to look at the
touches that are in the node or

00:11:20.890 --> 00:11:24.080
element that's receiving this event,
you can get target touches.

00:11:24.270 --> 00:11:27.180
This is really useful when you have
multiple things on the page that are

00:11:27.180 --> 00:11:30.960
all independently tracking touch events,
so that you can easily

00:11:31.160 --> 00:11:34.980
differentiate touches in one
element from touches in another.

00:11:37.950 --> 00:11:40.070
Additionally,
you can get the set of changed touches,

00:11:40.220 --> 00:11:43.970
which are just the touches
that have moved in this event.

00:11:44.440 --> 00:11:47.170
This is, again,
useful if you're implementing a custom

00:11:47.170 --> 00:11:50.200
gesture where you're just looking
at the fingers that are moving.

00:11:50.200 --> 00:11:52.400
Or, for example,
something like drag and drop, where,

00:11:52.400 --> 00:11:54.400
again,
you're just interested in moving fingers,

00:11:54.400 --> 00:11:58.350
not necessarily the full set of
fingers that are down on the screen.

00:11:59.600 --> 00:12:00.800
Okay, so that's pretty easy.

00:12:00.800 --> 00:12:02.600
We can get the set of touches.

00:12:02.600 --> 00:12:03.300
What is that?

00:12:03.400 --> 00:12:05.110
Well,
this is just a standard JavaScript list,

00:12:05.110 --> 00:12:08.190
so you can get the number of
touches that are down by getting

00:12:08.190 --> 00:12:10.410
the length of that touch set.

00:12:12.780 --> 00:12:16.220
You can just access this touches
array just like any other array,

00:12:16.220 --> 00:12:19.800
so you can get the event.touches at i.

00:12:22.220 --> 00:12:23.390
Important touch properties.

00:12:23.460 --> 00:12:26.640
Like I said before,
a touch event -- touch events

00:12:26.700 --> 00:12:27.830
work a lot like mouse events.

00:12:27.880 --> 00:12:30.410
And in fact,
you can think of a touch as encapsulating

00:12:30.410 --> 00:12:34.100
a lot of the same sorts of information
that a mouse event encapsulates.

00:12:34.100 --> 00:12:39.090
So a touch has a target,
which is the node that

00:12:39.090 --> 00:12:39.090
is receiving the event.

00:12:40.140 --> 00:12:42.180
Additionally,
there's an identifier which you can use

00:12:42.240 --> 00:12:47.340
to track the touch between successive
invocations of your touch handlers.

00:12:47.340 --> 00:12:50.040
This is useful for something
like drag and drop.

00:12:51.620 --> 00:12:53.500
There's Page X and Page Y.

00:12:53.500 --> 00:12:56.480
This is the touch location
in page coordinates.

00:12:56.590 --> 00:12:59.010
Just like mouse events, though,
you can get the coordinates

00:12:59.100 --> 00:13:02.500
in other coordinate spaces,
client and screen.

00:13:05.150 --> 00:13:07.610
So these are pretty much the important
touch properties that you're going

00:13:07.610 --> 00:13:10.470
to be dealing with in general.

00:13:11.050 --> 00:13:13.750
A couple of examples of how you
might want to use touch events.

00:13:13.750 --> 00:13:16.520
If you wanted to do some
sort of a two-finger tap like

00:13:16.520 --> 00:13:19.000
you see in Maps to zoom out,
that would be pretty easy to do.

00:13:19.000 --> 00:13:21.750
You could just add a touch
start handler to your element,

00:13:21.890 --> 00:13:25.070
look for two touches that
are down in that target,

00:13:27.150 --> 00:13:30.170
Cancel the operation on touch move
because that would be more of like

00:13:30.400 --> 00:13:33.560
a pinch gesture or some sort of a
rotate gesture or something like that.

00:13:33.710 --> 00:13:36.500
You're just looking for two fingers
coming down and then releasing.

00:13:36.530 --> 00:13:39.080
And then on touch end,
you would perform whatever action you

00:13:39.080 --> 00:13:42.160
would perform on the two-finger tap.

00:13:42.230 --> 00:13:43.990
It's pretty easy stuff.

00:13:45.160 --> 00:13:46.600
There's the swipe gesture.

00:13:46.600 --> 00:13:49.030
You see this a lot in
Apple native applications,

00:13:49.030 --> 00:13:52.440
like in Mail, to quickly delete messages.

00:13:52.510 --> 00:13:54.980
You could do something like this
pretty easily with touch events,

00:13:54.980 --> 00:13:57.640
where you could have a touch
move handler that just looked for

00:13:57.640 --> 00:14:01.430
motion mostly in the X direction.

00:14:01.440 --> 00:14:04.980
Of course, canceling the swipe if there's
any diagonal or vertical motion

00:14:05.020 --> 00:14:06.600
or if more fingers come down.

00:14:08.490 --> 00:14:12.730
So these are a couple of the common
gestures that you see all over the

00:14:12.730 --> 00:14:16.270
place on the iPhone that now you can
actually add to your web application,

00:14:16.270 --> 00:14:18.060
which I think is pretty cool.

00:14:18.710 --> 00:14:22.690
Now, there are a couple of gestures
that Apple is pretty fond of,

00:14:22.690 --> 00:14:25.790
and we think that people are going to use
these in a lot of different applications.

00:14:25.800 --> 00:14:28.600
We just keep coming back to
these over and over again.

00:14:28.600 --> 00:14:30.630
There's the pinch gesture
to zoom in and out.

00:14:30.960 --> 00:14:32.830
You see this all over
the place in the iPhone,

00:14:32.840 --> 00:14:35.680
in Safari and Mapped and Photos.

00:14:36.360 --> 00:14:39.860
There's also a rotate gesture,
which I don't think you

00:14:39.870 --> 00:14:42.630
see anywhere on the iPhone,
right?

00:14:42.700 --> 00:14:44.140
But it's pretty cool.

00:14:44.140 --> 00:14:47.290
We keep coming back to it for
our demos for touch events.

00:14:47.300 --> 00:14:50.510
So we'd like to standardize this
behavior and make sure that it feels

00:14:50.700 --> 00:14:52.800
consistent in all of your applications.

00:14:52.800 --> 00:14:58.800
So we're adding gesture events,
which are a simpler way to track touches,

00:14:58.900 --> 00:15:02.790
specifically two or more touches that
are happening on the screen at once.

00:15:03.910 --> 00:15:05.860
Now, with touch events,
you can get access to the set

00:15:05.860 --> 00:15:08.840
of raw touches and perform
much more advanced processing.

00:15:09.050 --> 00:15:12.100
For gesture events,
this is just for simplicity

00:15:12.580 --> 00:15:15.190
and ease of implementation.

00:15:16.140 --> 00:15:18.200
So when there are two more
touches on the screen and you're

00:15:18.200 --> 00:15:23.450
registered to receive these events,
you'll get a gesture start event.

00:15:25.780 --> 00:15:29.060
Followed by one or more gesture change
events for when your fingers move around,

00:15:29.060 --> 00:15:32.880
or if additional fingers come
down on the screen or are removed.

00:15:33.140 --> 00:15:34.510
And finally,
there's the gesture end event

00:15:34.620 --> 00:15:36.640
for when the gesture is over.

00:15:40.130 --> 00:15:42.950
So to register for these event handlers,
just like with touch events and

00:15:42.950 --> 00:15:46.600
mouse events and other DOM events,
there's an onGestureStart,

00:15:46.660 --> 00:15:51.600
onGestureChange,
and onGestureEnd HTML attributes

00:15:51.600 --> 00:15:55.070
that you can use,
or you can do @EventListener.

00:15:56.550 --> 00:15:59.430
By the way, touch and gesture events
both capture and bubble,

00:15:59.430 --> 00:16:03.090
as you might expect if
you're a JavaScript pro.

00:16:04.490 --> 00:16:07.900
Okay, so we've got an element that's
receiving gesture change events.

00:16:07.950 --> 00:16:09.900
Well, what's in this event?

00:16:09.900 --> 00:16:12.980
If you wanted to do something
with the rotation of the gesture,

00:16:13.090 --> 00:16:15.900
you could look at event.rotation.

00:16:15.930 --> 00:16:19.240
And this is the number of degrees
clockwise that the user has

00:16:19.240 --> 00:16:21.290
rotated since the gesture began.

00:16:23.230 --> 00:16:28.900
There's also the scale, event.scale,
and this is a value that is less than

00:16:28.900 --> 00:16:30.900
one when the user is pinching in.

00:16:30.950 --> 00:16:35.100
You might interpret that as
maybe a zoom out or something.

00:16:35.100 --> 00:16:37.690
And it's greater than one
when the user is pinching out,

00:16:37.730 --> 00:16:40.310
maybe sort of a zoom in operation.

00:16:40.920 --> 00:16:44.660
It's interesting to note the
rotation and scale can both be set

00:16:44.660 --> 00:16:48.780
or are both set in a gesture event,
so you can actually respond to both

00:16:48.830 --> 00:16:51.390
gestures simultaneously if you wish.

00:16:52.450 --> 00:16:55.220
Additionally, you can have a single
element that responds to both

00:16:55.220 --> 00:16:58.300
touch and gesture events,
allowing for all sorts of

00:16:58.300 --> 00:17:00.910
interesting multi-touch interactions.

00:17:03.950 --> 00:17:05.700
I should mention prevent default.

00:17:05.730 --> 00:17:09.930
This is the standard JavaScript mechanism
for controlling browser behaviors.

00:17:10.030 --> 00:17:14.260
This is pretty important for touch
events and gesture events because

00:17:14.260 --> 00:17:21.120
Safari implements default implementations
of touch events and gesture events.

00:17:21.190 --> 00:17:23.420
For touch events,
that's how Safari scrolls

00:17:23.420 --> 00:17:24.560
around on the page.

00:17:24.560 --> 00:17:27.770
For gesture events,
that's how Safari zooms in and out.

00:17:28.190 --> 00:17:31.310
So you can control this behavior,
override this behavior,

00:17:31.350 --> 00:17:35.640
by calling preventDefault inside of
your touch or gesture event handlers.

00:17:35.660 --> 00:17:38.990
So just a quick example for
a touch handler to prevent

00:17:39.010 --> 00:17:41.870
scrolling inside of some element,
you would call

00:17:41.870 --> 00:17:43.710
preventDefault on the event.

00:17:45.110 --> 00:17:47.640
And in a gesture change handler,
you would call prevent default to

00:17:47.640 --> 00:17:50.110
prevent zooming inside of Safari.

00:17:51.320 --> 00:17:57.270
You can also turn off zooming using other
techniques like the meta viewport tag,

00:17:57.270 --> 00:17:59.790
but this allows sort of selective
control over the zooming behavior

00:17:59.800 --> 00:18:02.270
for certain elements or not.

00:18:06.090 --> 00:18:08.420
So that was JavaScript touch
and gesture events,

00:18:08.420 --> 00:18:12.690
just a couple simple additions to
HTML and JavaScript that you can use

00:18:12.740 --> 00:18:16.890
to implement the same sorts of advanced
multi-touch interactions that are

00:18:16.960 --> 00:18:21.030
possible in native iPhone applications,
which I think is pretty exciting.

00:18:23.570 --> 00:18:26.340
So now I'd like to talk a
bit about CSS visual effects.

00:18:26.390 --> 00:18:29.500
This is a new technology
in Safari on iPhone 2.0.

00:18:29.680 --> 00:18:33.480
It's also on Safari 3.1 on the desktop.

00:18:33.890 --> 00:18:37.490
And this will allow you to
perform hardware-accelerated,

00:18:37.490 --> 00:18:40.720
really, really fast,
efficient transforms and

00:18:40.720 --> 00:18:42.150
transitions and animations.

00:18:42.270 --> 00:18:44.960
And this is really useful when
combined with touch and gesture events,

00:18:44.960 --> 00:18:47.900
because you can provide
the sort of fluid,

00:18:47.900 --> 00:18:50.230
responsive,
immersive feedback that you're

00:18:50.230 --> 00:18:52.670
used to in an iPhone application.

00:18:55.090 --> 00:18:58.270
So again, the big deal here is that
CSS visual effects on the

00:18:58.270 --> 00:19:00.550
iPhone are hardware accelerated.

00:19:00.640 --> 00:19:03.600
This means that when you affect
an element by transforming it

00:19:03.720 --> 00:19:06.390
somewhere else on the page,
you're not affecting the page layout,

00:19:06.390 --> 00:19:09.400
which is a really expensive operation
that can go through the whole DOM,

00:19:09.430 --> 00:19:11.840
maybe execute some JavaScript, et cetera,
et cetera.

00:19:11.980 --> 00:19:15.470
So this is a very efficient way to
affect changes on your web page.

00:19:17.460 --> 00:19:22.080
So for best performance,
you should avoid changing-- these

00:19:22.080 --> 00:19:24.120
are just the standard sort of
DHTML things that you're used to.

00:19:24.120 --> 00:19:26.820
Don't change the top, left, and width,
and height to sort of

00:19:26.820 --> 00:19:29.480
move and resize elements.

00:19:29.480 --> 00:19:31.660
Instead,
there's a WebKit transform property.

00:19:31.790 --> 00:19:33.900
I'll talk about this in a second.

00:19:37.520 --> 00:19:39.790
And you can use this to affect
the sort of hardware-accelerated

00:19:39.790 --> 00:19:43.100
transforms that I'm talking about.

00:19:43.150 --> 00:19:46.170
Additionally, you should try to avoid
adding or removing elements

00:19:46.210 --> 00:19:47.760
to or from the document.

00:19:47.760 --> 00:19:51.710
This can also be pretty
expensive computationally and

00:19:51.710 --> 00:19:52.850
cause relayout and repainting.

00:19:52.890 --> 00:19:56.640
So instead, try to change the opacity of
elements that are already in there.

00:19:56.700 --> 00:19:57.950
If you want to show
something on the page,

00:19:58.010 --> 00:20:01.880
just fade it from opacity 0 to opacity 1.

00:20:05.300 --> 00:20:08.000
A couple of examples of CSS transforms.

00:20:08.000 --> 00:20:10.490
So we've got this little green box.

00:20:10.500 --> 00:20:13.490
We're going to go ahead and
set different transforms on it.

00:20:13.960 --> 00:20:17.490
Here we're going to set it
to translate 300 and 300,

00:20:17.490 --> 00:20:19.970
so it'll move down and to the right.

00:20:22.800 --> 00:20:24.720
Here we're going to
rotate it 152 degrees.

00:20:24.720 --> 00:20:32.200
And let's go ahead and make it
twice as big as it is right now.

00:20:36.460 --> 00:20:38.600
So these are just a few of
the different effects you can

00:20:38.600 --> 00:20:40.120
achieve using CSS transforms.

00:20:40.170 --> 00:20:42.920
There are actually a whole ton of them,
like skew effects.

00:20:43.090 --> 00:20:47.270
You can do 3D perspective transforms,
or even apply arbitrary 4

00:20:47.270 --> 00:20:49.510
by 4 matrices to elements.

00:20:49.580 --> 00:20:52.730
But I wanted to highlight these
three because you might be able to

00:20:52.740 --> 00:20:56.400
see how these map almost directly
to touch and gesture events.

00:20:56.430 --> 00:20:59.630
You might imagine that the translate
for this element is controlled by

00:20:59.630 --> 00:21:02.710
just dragging around on the page,
and the rotation and scale are

00:21:02.710 --> 00:21:04.490
controlled by gesture events.

00:21:09.040 --> 00:21:13.760
So just a code example of how
you might do something like that.

00:21:13.760 --> 00:21:17.660
We've got an element that is
set to receive touch events.

00:21:17.660 --> 00:21:20.950
And what we're going to do is take the
first touch out of the touch list and

00:21:20.950 --> 00:21:22.800
just grab the X and Y out of there.

00:21:22.840 --> 00:21:25.760
So we're going to figure out
where on the page the touch is.

00:21:27.490 --> 00:21:29.950
And this is pretty simplistic,
but we're just going to move the

00:21:29.950 --> 00:21:34.110
element to wherever the finger is
by setting the WebKit transform.

00:21:36.860 --> 00:21:39.320
This is a much more efficient way
to do this kind of thing on the

00:21:39.320 --> 00:21:42.170
iPhone than setting top and left.

00:21:44.220 --> 00:21:46.100
I'm not going to get
too into detail here.

00:21:46.100 --> 00:21:49.430
This is actually a very,
very deep topic with a lot to cover.

00:21:49.440 --> 00:21:52.500
There's an entire session
that's devoted entirely to this.

00:21:52.600 --> 00:21:55.480
It's later today in Presidio at 3:30.

00:21:55.690 --> 00:21:58.780
It's called "Enhancing Your iPhone
Web Application with CSS Transforms and

00:21:58.780 --> 00:22:01.760
Animations," which is quite a mouthful,
but this session is really awesome.

00:22:01.760 --> 00:22:04.550
I highly encourage
everybody to check this out.

00:22:07.060 --> 00:22:09.950
Now I'd like to invite Brad Moore on
stage again for a quick demo to show

00:22:09.950 --> 00:22:12.750
us how to use touch and gesture events.

00:22:17.600 --> 00:22:19.290
Thanks, Tim.

00:22:19.340 --> 00:22:22.070
So we're actually going
to see code this time.

00:22:22.270 --> 00:22:24.580
We're going to dive into an
example of drag and drop.

00:22:24.720 --> 00:22:27.860
And for those of you who somehow
haven't seen drag and drop before,

00:22:27.860 --> 00:22:30.870
here's a page in Safari on my Mac.

00:22:31.100 --> 00:22:34.870
And as I click my mouse,
the image changes.

00:22:35.130 --> 00:22:37.500
As I drag my mouse,
the image tracks the cursor.

00:22:37.500 --> 00:22:40.360
And as I release my mouse,
the image changes again

00:22:40.360 --> 00:22:41.900
and it stops tracking.

00:22:41.980 --> 00:22:45.340
So this is a really common DHTML pattern.

00:22:45.410 --> 00:22:48.840
And it's easy to implement in
JavaScript with mouse events.

00:22:48.840 --> 00:22:51.640
So let's see the source for that now.

00:22:54.220 --> 00:22:57.500
So we've got three mouse
handlers that correspond exactly

00:22:57.500 --> 00:22:59.180
to the events I described.

00:22:59.230 --> 00:23:03.190
On the mouse down event,
I'm performing an image swap here,

00:23:03.310 --> 00:23:04.800
changing the source.

00:23:04.840 --> 00:23:08.740
On the mouse move event,
I'm updating the left and top

00:23:08.740 --> 00:23:13.540
properties of the style attribute
so that it tracks with the cursor.

00:23:13.590 --> 00:23:17.160
And in the mouse up,
I'm again swapping the image.

00:23:17.200 --> 00:23:18.680
Pretty simple, right?

00:23:18.710 --> 00:23:21.100
Let's see how it works on the iPhone.

00:23:24.230 --> 00:23:29.200
So here's the page, and when I tap on it,
I don't get any feedback.

00:23:29.200 --> 00:23:32.610
And instead, I get this dialogue asking
me to save the image,

00:23:32.660 --> 00:23:33.760
not what I was expecting.

00:23:33.760 --> 00:23:37.120
And when I try to drag it,
the entire page pans

00:23:37.120 --> 00:23:38.120
rather than the image.

00:23:38.120 --> 00:23:42.710
And if you've ever developed a web
page that takes advantage of mouse

00:23:42.710 --> 00:23:46.870
events and then viewed it on the iPhone,
you've found that you don't really

00:23:46.920 --> 00:23:51.190
get interaction over time because
of the feature Tim spoke of,

00:23:51.550 --> 00:23:56.120
that Safari uses all your events to
navigate about the page and scale it.

00:23:56.120 --> 00:24:00.120
So we've got touch events now,
so let's fix that.

00:24:00.120 --> 00:24:03.110
So I'm going to go back to the code.

00:24:03.420 --> 00:24:07.600
And first things first,
let's go to the body and install

00:24:07.600 --> 00:24:11.780
some handlers that are simply
going to prevent default.

00:24:12.040 --> 00:24:14.220
Now, as Tim mentioned,
it's especially important to

00:24:14.220 --> 00:24:19.040
prevent default when you're working
with events on the iPhone because

00:24:19.040 --> 00:24:23.100
so often the default behavior
causes some very user-visible

00:24:23.100 --> 00:24:27.040
and potentially jarring behavior if
it's not what you're looking for.

00:24:27.170 --> 00:24:31.060
So with just this change,
let's see what the website

00:24:31.060 --> 00:24:33.560
looks like on the phone.

00:24:33.650 --> 00:24:35.670
So I'll reload.

00:24:37.500 --> 00:24:40.160
And now,
as I press and hold on the image,

00:24:40.170 --> 00:24:41.640
I don't get any dialogue.

00:24:41.660 --> 00:24:44.930
And as I try to drag it,
the page doesn't move around.

00:24:45.040 --> 00:24:47.410
So of course I'm not getting
the interactivity I do want,

00:24:47.520 --> 00:24:50.580
but I'm no longer getting
the interactivity I don't.

00:24:50.630 --> 00:24:55.250
So going back to the code,
let's go install the handlers that will

00:24:55.450 --> 00:24:57.890
actually do the work we're interested in.

00:24:58.430 --> 00:25:01.590
So I want to point out
that I'm installing the

00:25:01.590 --> 00:25:04.890
handler on the image itself,
the handlers I care about.

00:25:04.940 --> 00:25:07.740
And this is an important
distinction for mouse events.

00:25:07.740 --> 00:25:11.880
With a mouse event,
it's going to deliver the event

00:25:11.880 --> 00:25:17.540
to whichever element happens to be
beneath the mouse at any point in time.

00:25:17.560 --> 00:25:20.500
With a touch event, that's not the case.

00:25:20.500 --> 00:25:25.680
The recipient of the touch start is going
to continue receiving any subsequent

00:25:25.680 --> 00:25:31.290
touch move and touch end events,
even as you move off the element.

00:25:31.320 --> 00:25:35.210
So it's possible to track it if
you move your finger very quickly,

00:25:35.210 --> 00:25:36.320
for instance.

00:25:36.320 --> 00:25:38.510
And we think this is an
easier programming model,

00:25:38.510 --> 00:25:41.820
especially when you have
multiple fingers on the screen.

00:25:41.820 --> 00:25:46.790
So with that aside,
let's go define the handlers.

00:25:47.860 --> 00:25:50.960
So right next to the
mouse down event handler,

00:25:50.960 --> 00:25:53.360
I'm going to define touch start.

00:25:53.360 --> 00:25:56.000
And you see the touch start
looks almost line for line

00:25:56.000 --> 00:25:59.430
exactly like the mouse down does,
except that instead of pulling

00:25:59.510 --> 00:26:02.120
the information directly
from the event itself,

00:26:02.180 --> 00:26:05.140
I'm getting it from a
touch within the event.

00:26:05.160 --> 00:26:07.580
Now, of course,
there could be multiple touches here,

00:26:07.580 --> 00:26:09.840
and if I want to truly take
advantage of multi-touch,

00:26:09.840 --> 00:26:16.160
I would reach in and grab
all those different touches.

00:26:16.160 --> 00:26:17.090
But if I want to do that,
I'm going to have to do

00:26:17.090 --> 00:26:17.660
it in a different way.

00:26:17.660 --> 00:26:24.310
So I'm going to go ahead
and add a touch move.

00:26:26.000 --> 00:26:29.170
And I want to point out something here.

00:26:29.470 --> 00:26:34.720
Right now,
I'm using left and top on the touch move.

00:26:34.720 --> 00:26:35.540
And that's going to work.

00:26:35.540 --> 00:26:39.900
I'm going to update the CSS style.

00:26:39.900 --> 00:26:44.100
And that's going to cause the
page to relay out and redraw.

00:26:44.100 --> 00:26:46.280
And it will be pretty responsive.

00:26:46.370 --> 00:26:48.530
But the frame rate won't be tremendous.

00:26:48.600 --> 00:26:53.260
And iPhone users in particular have come
to expect really fluid and responsive

00:26:53.260 --> 00:26:55.880
feedback to any interaction they have.

00:26:55.900 --> 00:26:59.810
So rather than go this route,
I'm going to instead use the

00:26:59.810 --> 00:27:03.150
WebKit transform property and
just do a simple translation,

00:27:03.150 --> 00:27:03.960
as Tim discussed.

00:27:03.990 --> 00:27:09.040
So with this change,
let me go back to the phone and

00:27:09.040 --> 00:27:12.100
show you what it looks like.

00:27:14.500 --> 00:27:16.340
And now I've got Fluid Drag and Drop.

00:27:16.340 --> 00:27:22.560
And that's pretty exciting because this
was not possible before iPhone 2.0.

00:27:25.900 --> 00:27:28.240
So thank you for that.

00:27:28.300 --> 00:27:29.890
But you know,
we're not just trying to achieve

00:27:29.890 --> 00:27:31.900
parity with mouse events.

00:27:31.910 --> 00:27:34.880
We actually have a very
powerful programming model.

00:27:35.150 --> 00:27:38.650
And if you'll bear with me,
I'm going to leave this as it is,

00:27:38.650 --> 00:27:40.890
but leave the handlers as they are.

00:27:41.210 --> 00:27:44.970
But I'm going to add a
second element to the page.

00:27:46.050 --> 00:27:48.300
Oh, which doesn't appear to be here.

00:27:48.400 --> 00:27:51.240
Well, demo gods are not with me.

00:27:51.240 --> 00:27:56.500
But I cannot show you this now,
but it's very easy to have multiple

00:27:56.500 --> 00:28:00.000
images dragging and dropping at once.

00:28:00.090 --> 00:28:03.470
So that said,
that's not the only way you want to

00:28:03.470 --> 00:28:07.000
interact with multiple touches on screen.

00:28:07.000 --> 00:28:10.690
You can do independent actions
and have each event apply to a

00:28:10.760 --> 00:28:12.800
separate element on the screen.

00:28:13.090 --> 00:28:17.450
But something else you might want to
do is combine those touches together

00:28:17.450 --> 00:28:21.000
to synthesize a single event,
a gesture as we call it.

00:28:21.000 --> 00:28:25.390
And we certainly encourage you to
go out and discover and play with

00:28:25.550 --> 00:28:28.000
your own and apply them to websites.

00:28:28.000 --> 00:28:32.480
But Apple has already popularized some
system-wide gestures that we want you to

00:28:32.480 --> 00:28:34.850
use for free to get consistent behavior.

00:28:35.000 --> 00:28:40.000
So I have a toy little authentication
page I want to show you.

00:28:40.000 --> 00:28:42.000
I'll just go to that now.

00:28:42.000 --> 00:28:43.270
Okay.

00:28:47.900 --> 00:28:52.490
So, this is a little dial.

00:28:52.490 --> 00:28:55.140
It's an image separate
from the background.

00:28:55.140 --> 00:28:59.400
And you can imagine that visually I want
to update this using CSS transform.

00:28:59.400 --> 00:29:02.290
And just as an aside, this is something,
like,

00:29:02.320 --> 00:29:04.140
you couldn't do without CSS transform.

00:29:04.140 --> 00:29:09.390
So, CSS transforms are very powerful in
addition to giving you great performance.

00:29:09.400 --> 00:29:13.320
But I'm most interested
right now on the interaction.

00:29:13.410 --> 00:29:16.700
So, let me show you in the source
code how I can actually change

00:29:16.790 --> 00:29:18.540
this page to make it respond.

00:29:18.540 --> 00:29:22.420
And, of course,
it doesn't respond at the moment.

00:29:28.400 --> 00:29:29.430
Here's the source.

00:29:29.670 --> 00:29:32.700
And first things first,
I'm going to prevent default so I don't

00:29:32.700 --> 00:29:34.530
get the interaction I don't want.

00:29:34.560 --> 00:29:39.340
And then I'm going to go in
and add some gesture listeners.

00:29:39.340 --> 00:29:43.490
And note here that I'm adding
event listener rather than doing

00:29:43.500 --> 00:29:46.070
inline JavaScript via attributes.

00:29:46.130 --> 00:29:50.480
Both methods are supported,
and these are fully compliant DOM events.

00:29:51.860 --> 00:29:56.140
So going up to the meat
of the implementation,

00:29:56.230 --> 00:30:00.480
I'm going to have gesture start,
gesture change, and gesture end.

00:30:00.700 --> 00:30:04.600
And I'm doing a little bit of
bookkeeping in start and end so you get

00:30:04.600 --> 00:30:06.550
a nice feeling of inertial scrolling.

00:30:06.620 --> 00:30:11.240
But really, everything that makes this
interactive is in gesture change.

00:30:11.240 --> 00:30:12.230
And I'm doing two things.

00:30:12.230 --> 00:30:16.510
I'm preventing default for good measure,
and I'm updating the rotation.

00:30:17.480 --> 00:30:20.460
And to update the rotation,
I simply query from the event,

00:30:20.460 --> 00:30:20.460
and then I'm going to add a new rotation.

00:30:20.460 --> 00:30:20.460
And then I'm going to add a new rotation.

00:30:20.460 --> 00:30:20.460
And then I'm going to add a new rotation.

00:30:20.700 --> 00:30:21.450
And then I'm going to add a new rotation.

00:30:21.450 --> 00:30:21.700
And then I'm going to add a new rotation.

00:30:21.700 --> 00:30:21.940
And then I'm going to add a new rotation.

00:30:21.960 --> 00:30:24.460
And it gives me the angular
displacement in degrees.

00:30:24.490 --> 00:30:25.180
And that's it.

00:30:25.300 --> 00:30:27.460
That's all I have to do when
I get consistent behavior

00:30:27.460 --> 00:30:32.400
with the rest of the system,
instead of tracking multiple touches

00:30:32.400 --> 00:30:36.220
coming and going on the screen and
making complex inferences about

00:30:36.300 --> 00:30:38.440
what angle I should be at now.

00:30:38.920 --> 00:30:40.440
I can just use what
the system provides me.

00:30:40.630 --> 00:30:44.690
It's not really more
expressive than touch events,

00:30:44.700 --> 00:30:50.440
but it's a whole lot easier,
and we think you're going to like this.

00:30:50.440 --> 00:30:50.440
So let me save this change
and go back to the demo.

00:30:52.910 --> 00:30:55.700
Oh, yes, and reload.

00:30:55.740 --> 00:31:01.210
And you may have seen in the
code that my combination is 10,

00:31:01.300 --> 00:31:16.800
[Transcript missing]

00:31:22.400 --> 00:31:23.200
Awesome.

00:31:23.200 --> 00:31:25.900
Thank you, Brad.

00:31:25.950 --> 00:31:29.600
So that was CSS Visual Effects.

00:31:29.600 --> 00:31:32.340
Now I'd like to talk to you
about storing local user data

00:31:32.400 --> 00:31:35.000
in your iPhone web application.

00:31:35.990 --> 00:31:39.770
There are certain kinds of data
that you might use in your program

00:31:40.560 --> 00:31:43.190
that rarely or never change.

00:31:43.680 --> 00:31:45.740
A couple examples here.

00:31:45.740 --> 00:31:48.780
There's static application resources,
things like images and

00:31:48.780 --> 00:31:50.200
scripts and style sheets.

00:31:50.330 --> 00:31:52.990
These may never change for the
whole lifetime of your web app,

00:31:52.990 --> 00:31:56.390
but your users are constantly
downloading them over and over again.

00:31:57.180 --> 00:32:01.520
User-created content and preferences,
even things as simple as, you know,

00:32:01.520 --> 00:32:04.130
display sort orderings
in a list or whatever,

00:32:04.130 --> 00:32:10.730
there are certain pieces of
information that maybe you want

00:32:10.730 --> 00:32:10.730
quicker access to than having
to go fetch them from a network.

00:32:11.400 --> 00:32:17.600
[Transcript missing]

00:32:18.070 --> 00:32:21.020
When you open it and start scrolling
around and zooming to different places,

00:32:21.140 --> 00:32:23.090
it's actually caching
all those tiles to disk,

00:32:23.090 --> 00:32:26.520
so the next time you open Maps and
start scrolling around in the same area,

00:32:26.520 --> 00:32:30.680
which is pretty convenient because you
probably don't move around that much,

00:32:30.680 --> 00:32:33.000
those tiles are already
going to be cached,

00:32:33.000 --> 00:32:36.210
and so the user experience is
improved because you don't have

00:32:36.210 --> 00:32:37.910
to go redownload everything.

00:32:37.910 --> 00:32:39.470
And a lot of our apps do this.

00:32:39.470 --> 00:32:43.320
The YouTube app does something
similar for video data and thumbnails.

00:32:43.330 --> 00:32:45.770
So you can imagine using
this sort of technique in

00:32:45.770 --> 00:32:45.770
your web application as well.

00:32:47.120 --> 00:32:50.000
In general,
we'd kind of like to get the ball rolling

00:32:50.000 --> 00:32:54.900
and get you guys to start thinking about
pre-caching data as much as you can for

00:32:55.200 --> 00:32:58.190
faster access or eventually offline use.

00:32:58.510 --> 00:33:01.480
You should always strive to eliminate
unnecessary network traffic.

00:33:01.710 --> 00:33:04.950
This is especially important
in a high-latency environment

00:33:04.950 --> 00:33:06.520
like Edge or even 3G.

00:33:09.530 --> 00:33:11.900
So to solve this problem,
we're introducing named

00:33:11.900 --> 00:33:15.380
databases for your site.

00:33:15.380 --> 00:33:18.550
You get five megabytes
maximum per database.

00:33:18.680 --> 00:33:22.930
And this is a database that you
open and control through JavaScript.

00:33:23.340 --> 00:33:25.790
But behind the scenes,
it's actually SQLite.

00:33:25.960 --> 00:33:30.600
This is the same database that we use in
a lot of Apple's own iPhone applications.

00:33:30.780 --> 00:33:34.800
For example, the Contacts database,
that's all just SQLite.

00:33:34.940 --> 00:33:38.600
Again, there's YouTube and Maps that
store everything in SQLite.

00:33:38.600 --> 00:33:41.820
A whole bunch of applications
in the iPhone are actually using

00:33:41.830 --> 00:33:43.600
this underlying technology.

00:33:43.600 --> 00:33:46.550
So you know it's screaming
fast and it works great.

00:33:47.280 --> 00:33:51.280
It's built on asynchronous transactions,
so while you're running a

00:33:51.280 --> 00:33:54.040
database query in your JavaScript,
it's not going to interfere

00:33:54.040 --> 00:33:57.110
with the rest of your web
application until it's complete.

00:33:58.340 --> 00:34:00.860
I just want to show you a quick example
of how you can use this feature.

00:34:00.950 --> 00:34:06.700
So to open a database, you'd start first,
if you wanted to be a good web citizen,

00:34:06.700 --> 00:34:09.400
by checking for the existence
of the database feature itself,

00:34:09.580 --> 00:34:12.590
which you can do by looking
for window.opendatabase.

00:34:12.920 --> 00:34:17.650
And this is the function that you call
to open a database for your website.

00:34:17.730 --> 00:34:21.620
You give it a name, a version,
a display name, and an estimated size.

00:34:21.620 --> 00:34:24.960
You don't need to worry too much
about making the name unique,

00:34:24.960 --> 00:34:26.900
because your database is
already unique to your domain.

00:34:29.970 --> 00:34:34.000
This will return null upon failure,
which you can do whatever you want.

00:34:34.060 --> 00:34:36.680
Probably shouldn't alert like that,
it's a bad idea.

00:34:38.500 --> 00:34:41.360
So once you've opened your database,
the first thing you're going to

00:34:41.360 --> 00:34:43.100
want to do is create a schema.

00:34:43.100 --> 00:34:47.470
This involves creating
tables and populating your

00:34:47.570 --> 00:34:49.530
database with default objects.

00:34:49.800 --> 00:34:52.280
So we're going to do that by starting
a transaction in our database.

00:34:52.430 --> 00:34:56.930
You just call database.transaction,
and you pass in a function that will

00:34:56.940 --> 00:34:59.680
get called to run your transaction.

00:35:01.160 --> 00:35:03.260
And here's that function now.

00:35:03.310 --> 00:35:07.430
You see that it just calls
execute SQL on the transaction.

00:35:07.680 --> 00:35:10.450
And the SQL that you're executing
here just creates a table called

00:35:10.450 --> 00:35:14.610
Things with a column name,
so specific.

00:35:14.740 --> 00:35:17.090
The second argument
here is an empty array.

00:35:17.100 --> 00:35:20.420
You can actually pass in arguments
to your SQL string if you want.

00:35:20.580 --> 00:35:23.740
You can have wild cards in there.

00:35:23.740 --> 00:35:26.030
And the third argument
is populate database,

00:35:26.030 --> 00:35:27.950
a function that I define.

00:35:29.210 --> 00:35:33.780
which,
upon successful creation of the table,

00:35:33.780 --> 00:35:35.340
will go and insert an
object into the table.

00:35:35.340 --> 00:35:39.400
In this case, we're putting an iPhone
3G into the Things table.

00:35:41.800 --> 00:35:43.560
Okay,
so you've got your table all set up,

00:35:43.650 --> 00:35:45.970
got your schema in place.

00:35:46.010 --> 00:35:48.100
To perform a query, again,
this is just a transaction,

00:35:48.140 --> 00:35:51.500
so inside of your transaction,
you're going to execute some SQL.

00:35:51.520 --> 00:35:54.730
And in this case,
we're going to select the name of

00:35:54.730 --> 00:35:57.060
everything in the things table.

00:35:57.150 --> 00:35:59.060
And when that's done,
it's going to call a

00:35:59.060 --> 00:36:00.610
function called show things.

00:36:02.450 --> 00:36:06.320
The show things function,
it's pretty convenient, actually,

00:36:06.320 --> 00:36:09.490
in the results of a database
query in JavaScript,

00:36:09.520 --> 00:36:12.000
because all you have to
do is get results.rows,

00:36:12.050 --> 00:36:14.160
and these are the rows
returned from the query,

00:36:14.200 --> 00:36:18.960
and then you can just look up properties
inside the objects that are bound

00:36:19.290 --> 00:36:22.650
directly to the database column.

00:36:22.650 --> 00:36:25.690
So in this case, I just alert the name of
everything in the database.

00:36:25.690 --> 00:36:25.690
It's pretty simple to use.

00:36:28.000 --> 00:36:30.340
I'm not going to get too into detail
on this because this is actually

00:36:30.430 --> 00:36:34.800
part of the HTML5 specification,
which Apple contributes to.

00:36:34.840 --> 00:36:39.500
The database feature is actually
available in both iPhone 2.0 as

00:36:39.500 --> 00:36:41.800
well as Safari 3.1 on the desktop.

00:36:41.930 --> 00:36:44.310
So this is an open standard.

00:36:45.370 --> 00:36:47.040
If you want to know more
about the database feature,

00:36:47.040 --> 00:36:49.600
there's full documentation
and examples and everything,

00:36:49.760 --> 00:36:53.530
you should check out the W3 site,
the HTML5 Working Group,

00:36:53.620 --> 00:36:58.030
where you can read about local databases
as well as the other things in HTML5.

00:36:59.900 --> 00:37:05.300
There's also an entire session
here at WWDC tomorrow at 2:00 PM.

00:37:05.380 --> 00:37:06.800
So if you're interested
in how this works,

00:37:06.800 --> 00:37:09.200
you should definitely
check out this session.

00:37:12.860 --> 00:37:15.700
So that was storing local user data.

00:37:15.700 --> 00:37:19.100
Now I'd like to talk a little bit
about some tips and tricks that you

00:37:19.120 --> 00:37:23.890
can use to really add some shine and
polish to your iPhone web application.

00:37:26.000 --> 00:37:27.500
So this is the link highlight.

00:37:27.580 --> 00:37:30.300
I'm sure you're all
familiar with this thing.

00:37:30.300 --> 00:37:31.980
You can actually customize
the color of this.

00:37:32.000 --> 00:37:32.800
It doesn't have to be gray.

00:37:32.800 --> 00:37:35.820
You can make it pink
or orange or whatever.

00:37:35.880 --> 00:37:38.080
You're more likely to
just want to turn it off,

00:37:38.080 --> 00:37:41.540
which you can do by setting the color
to something that's transparent,

00:37:41.540 --> 00:37:43.490
just have an alpha value of zero.

00:37:49.420 --> 00:37:52.550
There's the callout bubble that
appears when you hold down on some

00:37:52.590 --> 00:37:54.800
clickable element on the page.

00:37:54.820 --> 00:37:57.800
Again, this is useful for links and such,
but not so much for buttons

00:37:57.800 --> 00:37:59.800
and other UI elements.

00:37:59.800 --> 00:38:02.600
So you might want to turn this
off by setting the CSS property

00:38:02.600 --> 00:38:06.870
WebKitTouchCallout to None or
Default to turn it back on.

00:38:13.650 --> 00:38:16.120
Detecting orientation changes.

00:38:16.210 --> 00:38:19.460
If you have a sort of advanced
iPhone application that maybe

00:38:19.460 --> 00:38:21.800
has two different views,
depending on whether you're

00:38:21.800 --> 00:38:24.600
in portrait or landscape mode,
you can use the orientation change

00:38:24.680 --> 00:38:29.680
event to detect the changes in the
user interface orientation of Safari.

00:38:29.890 --> 00:38:34.540
So you register for onOrientationChange,
passing in your handler function,

00:38:34.560 --> 00:38:36.780
and then you can get the
current orientation by

00:38:36.780 --> 00:38:38.680
looking at window.orientation.

00:38:41.190 --> 00:38:45.090
The values there are zero
for standard portrait mode,

00:38:45.230 --> 00:38:48.070
90 and -90 for the landscape modes.

00:38:51.320 --> 00:38:53.280
Web Clip.

00:38:53.280 --> 00:38:56.170
This is something that I'm sure
everybody in this room knows about,

00:38:56.240 --> 00:38:57.160
but I just wanted to stress this.

00:38:57.200 --> 00:38:59.500
I think it's pretty important.

00:38:59.540 --> 00:39:09.020
Any page or web app from within Safari on
the iPhone can actually be added to the

00:39:09.020 --> 00:39:09.020
home screen as a web clip so that users
can access them just like applications.

00:39:09.290 --> 00:39:10.410
This is really cool.

00:39:10.720 --> 00:39:14.710
By default, the icon for your web clip
will just be a screenshot of

00:39:14.710 --> 00:39:17.040
your site scaled down to fit.

00:39:17.120 --> 00:39:20.060
And if you kind of squint,
you can sort of make out

00:39:20.200 --> 00:39:21.760
what those sites are.

00:39:21.770 --> 00:39:23.940
But, you know,
users really like when you take

00:39:23.940 --> 00:39:26.390
the extra effort to make shiny,
distinctive,

00:39:26.470 --> 00:39:31.590
simple icons so they can really
quickly recognize which site is which.

00:39:32.040 --> 00:39:38.030
So please, if you are making a web app
or a web page for the iPhone,

00:39:38.030 --> 00:39:42.620
specify a custom icon for it,
which is pretty easy to do.

00:39:42.790 --> 00:39:45.200
This works a lot like fav icons.

00:39:45.200 --> 00:39:48.200
You just put a link tag in your document.

00:39:48.910 --> 00:39:51.760
Here we're specifying the
Apple Touch icon and pointing it

00:39:51.840 --> 00:39:55.610
at a ping file on the web server.

00:39:55.860 --> 00:39:59.480
Now, this will specify the icon
just for that one document.

00:39:59.480 --> 00:40:03.930
If you want to have an icon that
is applied across your entire site,

00:40:04.010 --> 00:40:06.570
which Apple.com and
various other sites do,

00:40:07.030 --> 00:40:12.080
you can install appletouchicon.ping
just at the root of your web server,

00:40:12.080 --> 00:40:16.940
and Safari will automatically look
there whenever you're adding a web clip.

00:40:18.440 --> 00:40:22.690
Your icon should be 57
pixels by 57 pixels.

00:40:22.820 --> 00:40:27.440
If it's any other size,
then Safari will scale and crop it

00:40:27.570 --> 00:40:30.810
to fit inside the standard icon size.

00:40:31.940 --> 00:40:35.240
Your icon will automatically be rounded
and have the glass applied to it,

00:40:35.360 --> 00:40:36.840
so there's no need to do that.

00:40:36.900 --> 00:40:39.900
However,
if you have a really good icon designer,

00:40:39.900 --> 00:40:42.240
someone who's really picky
and wants to specify exactly,

00:40:42.240 --> 00:40:46.340
you know, how shiny it should be,
you can specify a pre-composed icon,

00:40:46.380 --> 00:40:49.110
which is the full real deal.

00:40:49.480 --> 00:40:52.490
No rounding or no shiny
stuff will be applied.

00:40:52.640 --> 00:40:55.960
We'll just take your icon as is
and display it on the home screen.

00:40:57.190 --> 00:41:02.130
So, clapping icon designer over there,
apparently.

00:41:02.280 --> 00:41:07.340
So, you can do that by doing exactly the
same thing but tacking -precomposed

00:41:07.340 --> 00:41:09.960
to the end of Apple Touch Icon.

00:41:14.990 --> 00:41:18.060
The auto-correction feature on
the iPhone is really awesome.

00:41:18.060 --> 00:41:18.900
It's really powerful.

00:41:18.900 --> 00:41:21.400
It works in multiple different languages,
et cetera, et cetera.

00:41:21.400 --> 00:41:25.900
But your web application may have
its own sort of completion UI,

00:41:25.930 --> 00:41:29.880
and you wouldn't really want the iPhone's
built-in auto-completion to sort of

00:41:29.880 --> 00:41:31.860
be happening at the same time as that.

00:41:31.950 --> 00:41:34.740
So if you want to turn that off,
you can use the auto-correct

00:41:34.830 --> 00:41:37.680
attribute on the input element.

00:41:45.000 --> 00:41:49.500
Google's little completion thing.

00:41:49.530 --> 00:41:50.420
UI WebView.

00:41:50.420 --> 00:41:59.520
So I've been sort of talking about all of
this in the context of web applications,

00:41:59.520 --> 00:41:59.520
but WebKit is actually useful
in a native application as well.

00:42:00.470 --> 00:42:03.520
So you can make it in code,
make a UI WebView in code,

00:42:03.520 --> 00:42:05.560
look at UIWebView.h.

00:42:05.560 --> 00:42:07.190
But we've also got
interface builder support,

00:42:07.190 --> 00:42:09.350
so you can just drag out a WebView.

00:42:10.970 --> 00:42:13.350
Just like on the desktop,
loading a document into a

00:42:13.350 --> 00:42:14.660
UI WebView is really easy.

00:42:14.830 --> 00:42:18.800
You just make an NSURL,
you wrap it in a URL request,

00:42:18.910 --> 00:42:22.630
and then you give that to the
WebView through load request.

00:42:26.850 --> 00:42:29.470
Now, you can imagine doing something
kind of boring and simple with this,

00:42:29.480 --> 00:42:32.500
some sort of legal, please, blah, blah,
blah,

00:42:32.500 --> 00:42:34.840
I agree to sell my soul sort of thing.

00:42:34.930 --> 00:42:36.700
But you could do something
more interesting with it.

00:42:36.700 --> 00:42:39.290
You could have some sort of like a
chat client and use it as a display

00:42:39.290 --> 00:42:43.000
engine for the speech bubbles if
you want to do something like that.

00:42:43.040 --> 00:42:46.250
There are a multitude of
different uses for WebKit inside

00:42:46.250 --> 00:42:47.910
of a native application.

00:42:48.220 --> 00:42:50.370
If you're going to do anything
sort of complicated like this,

00:42:50.370 --> 00:42:52.660
you might want some sort of
communication between your web

00:42:52.660 --> 00:42:55.170
content and the native side.

00:42:55.250 --> 00:42:59.030
So you can control the web content
inside of a UI web view through String

00:42:59.030 --> 00:43:02.080
by evaluating JavaScript from String.

00:43:02.410 --> 00:43:04.560
And so this will allow you to
call functions that you've defined

00:43:04.560 --> 00:43:08.170
inside your custom web content to
append things to the document or

00:43:08.170 --> 00:43:10.650
just change whatever's in the page.

00:43:12.490 --> 00:43:16.300
Communication the other way,
we don't have WebScript object yet,

00:43:16.300 --> 00:43:19.550
but you can achieve some
level of JavaScript to native

00:43:19.550 --> 00:43:22.610
communication through the
UI WebView delegate mechanism.

00:43:22.740 --> 00:43:25.710
An example of how you can
do something like this.

00:43:25.920 --> 00:43:31.380
Here we've got a WebView should start
load with request navigation type method,

00:43:31.430 --> 00:43:34.690
and this is defined on the
delegate of my WebView.

00:43:35.020 --> 00:43:37.560
This is such a hack,
but I think it's kind of cool.

00:43:37.610 --> 00:43:40.210
So here we're looking at the URL scheme,
and we're looking for a

00:43:40.210 --> 00:43:43.140
string that we've defined,
in this case, myapp.

00:43:43.140 --> 00:43:46.020
And if the rest of the URL is
some command that we recognize,

00:43:46.050 --> 00:43:48.780
like do something,
we'll go ahead and do something.

00:43:49.230 --> 00:43:51.680
And then from the JavaScript side,
to invoke this command,

00:43:51.680 --> 00:43:54.250
all you have to do is
just navigate there.

00:43:57.060 --> 00:44:01.040
You notice in the Objective-C side,
we return "no" to actually

00:44:01.040 --> 00:44:04.290
prevent navigation of that
non-existent bogus URL.

00:44:06.550 --> 00:44:09.840
So those are some tips and tricks
that you can use to really add

00:44:09.840 --> 00:44:11.660
some shine and polish to your app.

00:44:11.690 --> 00:44:15.090
I'd like to invite Brad Moore on stage
one final time to show you how you can

00:44:15.100 --> 00:44:19.680
bring it all together and really take
advantage of these tips and tricks.

00:44:20.110 --> 00:44:21.840
Thank you, Tim.

00:44:21.980 --> 00:44:25.950
So we just covered a
huge array of things,

00:44:25.950 --> 00:44:29.740
and rather than try to incorporate every
single item from that bag of tricks

00:44:29.780 --> 00:44:35.060
into a toy website within UI WebView,
I want to ground this with an example

00:44:35.060 --> 00:44:37.940
that's actually out on the web today.

00:44:37.970 --> 00:44:40.180
A lot of you are probably
familiar with IUI.

00:44:40.210 --> 00:44:45.380
It's a framework that came out within
about a month of the iPhone's launch.

00:44:45.470 --> 00:44:50.180
And it tries to, with a little bit of
clever CSS and JavaScript,

00:44:50.330 --> 00:44:53.940
make it very easy for web apps
to have the same look and,

00:44:53.940 --> 00:44:57.290
to a certain extent,
feel of native applications.

00:44:57.450 --> 00:45:01.530
So here we have an example
of IUI as applied to Digg.

00:45:01.610 --> 00:45:05.380
And indeed, it does look like a native
navigation-based app.

00:45:05.380 --> 00:45:08.060
I can scroll through, and it looks great.

00:45:08.230 --> 00:45:11.640
But as soon as I begin
interacting with this,

00:45:11.670 --> 00:45:15.080
I begin to notice some discrepancies.

00:45:15.410 --> 00:45:20.480
So notice that when I tap on something,
the blue highlight isn't responsive.

00:45:20.520 --> 00:45:23.880
It actually comes after my
finger is already lifted.

00:45:23.900 --> 00:45:27.980
And when I tap on buttons,
I get an odd highlight.

00:45:28.160 --> 00:45:31.920
In fact, if I tap and hold,
I get a highlight and a callout

00:45:31.980 --> 00:45:36.550
that are very jarring and
sort of make it impossible

00:45:36.620 --> 00:45:38.260
for me to suspend my disbelief.

00:45:38.380 --> 00:45:44.190
It no longer feels like
a native application.

00:45:44.410 --> 00:45:46.100
The IUI developer should be commended.

00:45:46.100 --> 00:45:48.500
I mean,
they used every trick at their disposal

00:45:48.500 --> 00:45:51.020
to make this look like a native app.

00:45:51.240 --> 00:45:54.750
But before today,
making this feel like a native app

00:45:54.750 --> 00:45:56.680
was just really an impossible task.

00:45:56.730 --> 00:46:00.540
But now that we have all these
tricks Tim just discussed,

00:46:00.660 --> 00:46:03.650
we can improve this greatly
with just a few simple changes.

00:46:03.660 --> 00:46:08.610
So let me go over to the
code and do that now.

00:46:15.800 --> 00:46:18.760
So here we have IUI's CSS page.

00:46:18.770 --> 00:46:24.240
And I should, as an aside,
we could prevent the default behavior

00:46:24.240 --> 00:46:27.680
like the callout and the tap highlight,
as mentioned before,

00:46:27.680 --> 00:46:29.840
just by preventing default
on the touch event.

00:46:29.840 --> 00:46:33.780
But with a framework like IUI,
there is some behavior you do want,

00:46:33.780 --> 00:46:35.200
like the scrolling.

00:46:35.200 --> 00:46:37.850
So preventing default
is a little heavyweight,

00:46:37.860 --> 00:46:41.350
and we can do something
more precise if we use CSS.

00:46:41.400 --> 00:46:44.360
So here I have my very
promiscuous selector.

00:46:44.360 --> 00:46:45.980
Please don't do this in actual code.

00:46:46.050 --> 00:46:50.770
But for the purposes of the demo,
it's a lot easier to apply to everything.

00:46:50.800 --> 00:46:55.210
So you see that I'm setting the web
touch callout to none and the webkit

00:46:55.210 --> 00:46:59.260
tap highlight color to a clear color,
which effectively disables it.

00:46:59.300 --> 00:47:02.000
And there's no performance
cost having a clear color.

00:47:02.210 --> 00:47:06.690
So if I set these two things,
I'm going to remove some of the

00:47:06.930 --> 00:47:08.700
artifacts I don't want to see.

00:47:08.820 --> 00:47:11.260
So, you know, two lines of code, really.

00:47:11.300 --> 00:47:14.800
Let me show you what
the demo looks like now.

00:47:17.970 --> 00:47:22.100
And of course, I can still scroll,
but now when I press and hold,

00:47:22.140 --> 00:47:24.600
I don't get any jarring
highlight or callout.

00:47:24.650 --> 00:47:29.900
And I think that's really wonderful,
and it took almost nothing to achieve.

00:47:29.900 --> 00:47:35.040
We also probably want the blue highlight
and other elements to be more responsive.

00:47:35.130 --> 00:47:36.900
And there are a lot of
ways to attack this.

00:47:36.930 --> 00:47:41.870
Probably the correct thing to do
is rewrite the JavaScript handlers

00:47:41.900 --> 00:47:45.900
to use touch events directly,
since it is designed for the iPhone.

00:47:45.900 --> 00:47:49.760
But another thing we could do is
simply install a no-op touch handler,

00:47:49.760 --> 00:47:53.780
and then all of a sudden the cool and
active pseudo class is going to be

00:47:53.800 --> 00:47:58.850
reinterpreted by Safari on the iPhone to
last for the duration of the touch down.

00:47:58.920 --> 00:48:00.820
And that's something else we can try.

00:48:01.010 --> 00:48:06.980
But what I'm going to do for this
demo is go into the code and...

00:48:07.580 --> 00:48:11.080
Go to the JavaScript,
and I'm going to add a touch

00:48:11.290 --> 00:48:15.740
start listener that does
a tiny bit of the code,

00:48:15.800 --> 00:48:19.260
a tiny bit of the work that
the existing click handlers do,

00:48:19.290 --> 00:48:21.720
but it's just going to do
it earlier in the process.

00:48:21.830 --> 00:48:29.060
So if I make this small change and
then go back to IUI and reload,

00:48:30.220 --> 00:48:34.480
You'll see that all of a sudden I'm
getting that responsive feedback that

00:48:34.480 --> 00:48:36.900
just makes this feel like a native app.

00:48:37.000 --> 00:48:40.020
Now, we've got touch events now,
and you can imagine all sorts of cool

00:48:40.020 --> 00:48:43.600
features you would add to make this
even more like a native app or better.

00:48:43.700 --> 00:48:45.200
We could add reordering.

00:48:45.200 --> 00:48:47.700
You name it, we could add it.

00:48:47.820 --> 00:48:52.320
But you see how little code it took to
make it suddenly feel so much better.

00:48:52.540 --> 00:48:54.900
And I think that's a message
you should really take home.

00:48:54.900 --> 00:48:59.460
You don't have to have a visually
complex or an interactively complex

00:48:59.580 --> 00:49:04.860
to benefit really greatly from
incorporating these techniques.

00:49:05.020 --> 00:49:09.380
So hopefully you'll take these
techniques home and make your web

00:49:09.420 --> 00:49:11.240
apps feel as good as they look.

00:49:11.350 --> 00:49:14.250
And I think Tim has more to cover.

00:49:18.600 --> 00:49:21.960
Thank you, Brad.

00:49:22.010 --> 00:49:25.900
So in summary,
we think that web apps already look good.

00:49:25.960 --> 00:49:30.710
You guys have done an awesome job of
making sure that your web apps look

00:49:30.720 --> 00:49:33.160
like they're at home on the iPhone.

00:49:33.160 --> 00:49:38.320
But now that your apps can feel good,
too, you can use multi-touch

00:49:38.320 --> 00:49:42.080
interaction in the same way
that a native application can.

00:49:44.930 --> 00:49:48.620
You can use touch events combined
with CSS visual effects for native

00:49:48.700 --> 00:49:53.850
performance and really fluid,
immersive, responsive user interfaces.

00:49:56.950 --> 00:49:59.220
You can cache data
locally for faster access.

00:49:59.410 --> 00:50:02.380
This is always going to improve the
user experience of your application.

00:50:02.410 --> 00:50:04.570
You should do this wherever possible.

00:50:06.160 --> 00:50:09.340
In general, I hope after this talk,
you're more generally

00:50:09.340 --> 00:50:13.290
equipped to fine-tune your web
application for the iPhone.

00:50:15.370 --> 00:50:18.590
If you want more information about
anything that we've talked about today,

00:50:18.600 --> 00:50:21.500
you can ask Mark Malone or Vicki Murley,
our

00:50:21.500 --> 00:50:24.380
Safari Internet Technologies evangelists.

00:50:24.650 --> 00:50:28.200
We've also got an entire section on
developer.apple.com that's devoted

00:50:28.200 --> 00:50:30.350
to web application development.

00:50:30.360 --> 00:50:34.390
You can look on
developer.apple.com/webapps.

00:50:40.200 --> 00:50:41.670
A few sessions I wanted to mention.

00:50:41.700 --> 00:50:45.650
I mentioned a few during the slides,
but here they are again.

00:50:45.900 --> 00:50:50.290
Enhancing your iPhone web application
with CSS transforms and animations.

00:50:50.300 --> 00:50:53.720
You'll learn how to do all
sorts of really amazing 2D and

00:50:53.720 --> 00:50:58.050
three-dimensional effects and
animations in Safari on the iPhone.

00:50:58.470 --> 00:51:05.750
using Dashcode to create
and debug iPhone web apps.

00:51:05.750 --> 00:51:09.210
I didn't mention Dashcode
in this talk at all,

00:51:09.210 --> 00:51:09.210
but they've made a bunch of great
enhancements for Safari on iPhone 2.0

00:51:09.210 --> 00:51:09.210
to help you create and debug web apps.

00:51:10.290 --> 00:51:14.490
There's also a hands-on session tomorrow
where you get to build an iPhone

00:51:14.490 --> 00:51:17.000
application like what you saw today.

00:51:17.400 --> 00:51:19.030
Hands-on.

00:51:21.600 --> 00:51:23.600
There's a lab coming up today at 2:00.

00:51:23.600 --> 00:51:27.600
I'll be there, Brad will be there,
a bunch of my team will be there.

00:51:27.600 --> 00:51:29.600
So if you have any questions about
iPhone web application development,

00:51:29.600 --> 00:51:33.470
please don't hesitate to
come down and ask questions.