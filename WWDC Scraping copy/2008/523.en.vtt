WEBVTT

00:00:21.090 --> 00:00:21.960
Good afternoon.

00:00:21.990 --> 00:00:24.980
Welcome to Keeping Users Connected
with the Instant Message Framework.

00:00:25.000 --> 00:00:27.000
My name is Justin Wood,
and I'm going to be talking

00:00:27.000 --> 00:00:31.490
about fostering user interaction
with iChat and your application.

00:00:31.780 --> 00:00:33.700
So to start off,
we'll start off with a brief overview

00:00:33.700 --> 00:00:35.150
of what we're going to cover today.

00:00:35.160 --> 00:00:38.240
I'm going to go over
what exactly iChat is,

00:00:38.240 --> 00:00:40.300
and then I'm going to delve
right into how you can use the

00:00:40.300 --> 00:00:43.780
Instant Message API to use all the wealth
of information that iChat has about

00:00:43.780 --> 00:00:45.740
users' presence in your application.

00:00:45.740 --> 00:00:48.900
We're then going to move on
to controlling iChat using

00:00:49.180 --> 00:00:52.150
the Apple Script API and the
scripting bridge that's available.

00:00:52.200 --> 00:00:55.370
Then we're going to finish up with
responding to events that occur

00:00:55.370 --> 00:00:57.220
in iChat using your application.

00:00:57.240 --> 00:00:59.710
And to finish,
we'll open up to Q&A and hopefully

00:00:59.720 --> 00:01:01.430
get to some of your questions.

00:01:01.700 --> 00:01:02.990
Thank you.

00:01:04.090 --> 00:01:06.100
So to start off,
for those of you new to the platform

00:01:06.100 --> 00:01:09.990
or not too familiar with iChat,
well, what exactly is iChat?

00:01:10.040 --> 00:01:12.500
A few years ago, this probably required a
little bit more explanation,

00:01:12.500 --> 00:01:16.010
but I think nowadays it's pretty
safe to say that iChat is an instant

00:01:16.010 --> 00:01:17.490
messaging application for OS X.

00:01:17.650 --> 00:01:20.510
It's actually the native one
that we ship with Leopard.

00:01:20.640 --> 00:01:24.080
It supports popular instant messaging
services such as AOL Instant Messenger,

00:01:24.150 --> 00:01:27.500
XMPP-compliant Jabber
servers such as Google Talk,

00:01:27.500 --> 00:01:31.800
and Bonjour to keep connected with
people on your local area network.

00:01:31.840 --> 00:01:33.500
I'm sure you've seen lots
of screenshots of iChat,

00:01:33.650 --> 00:01:35.990
but iChat as an application
has things like a buddy list,

00:01:35.990 --> 00:01:39.300
supports text chat, file transfers,
audio chat,

00:01:39.340 --> 00:01:42.160
and a very oft-demoed video chat feature.

00:01:42.210 --> 00:01:46.900
New in Snow Leopard came things like
screen sharing and iChat theater.

00:01:48.140 --> 00:01:50.180
Today we're at WWDC,
and you guys are probably asking, well,

00:01:50.180 --> 00:01:52.180
that's great,
but what can I do with iChat?

00:01:52.210 --> 00:01:55.940
Well, we're going to break this down into
four main categories of things.

00:01:55.990 --> 00:01:58.970
First of all,
there's presence information.

00:01:59.240 --> 00:02:03.600
iChat has a bunch of information about
people that users have either voluntarily

00:02:03.600 --> 00:02:05.420
or have been added to their buddy list.

00:02:05.620 --> 00:02:08.320
You can actually get at this
using our native Cocoa API,

00:02:08.320 --> 00:02:11.070
the Instant Message Framework,
and use this in your

00:02:11.070 --> 00:02:13.200
application to display presence.

00:02:13.270 --> 00:02:15.310
You can also get at this
information using Apple Script and

00:02:15.310 --> 00:02:17.130
the Scripting Bridge,
but today I'm going to focus on

00:02:17.130 --> 00:02:18.310
the Instant Message Framework.

00:02:18.470 --> 00:02:20.800
There's a wealth of documentation
about the latter two online.

00:02:20.800 --> 00:02:23.200
I invite you to check that out.

00:02:23.260 --> 00:02:25.420
We're then going to move on
to controlling iChat from your

00:02:25.420 --> 00:02:29.020
application using Apple Script and
the Scripting Bridge.

00:02:29.680 --> 00:02:33.070
Now what this actually means is that your
application can kick off events in iChat.

00:02:33.330 --> 00:02:35.780
You can send text messages,
file transfers,

00:02:35.780 --> 00:02:38.670
start video chat sessions,
even start screen sharing with other

00:02:38.670 --> 00:02:41.500
remote users from your application.

00:02:42.030 --> 00:02:44.430
We're going to talk about how
your application can respond

00:02:44.540 --> 00:02:46.550
to events that occur in iChat.

00:02:46.640 --> 00:02:50.400
And what this means is that suppose
you have an incoming file transfer.

00:02:50.460 --> 00:02:53.870
You can wire your application up
in such a way that your application

00:02:53.940 --> 00:02:57.320
will accept the file transfer and
then perhaps do something with

00:02:57.320 --> 00:02:59.270
it when it's actually complete.

00:03:00.130 --> 00:03:02.660
The last section of
things is iChat Theater.

00:03:02.660 --> 00:03:05.640
iChat Theater actually is
a new feature in Leopard,

00:03:05.650 --> 00:03:08.280
and it fundamentally
is taking a video chat,

00:03:08.280 --> 00:03:10.480
allowing your application
to provide content,

00:03:10.580 --> 00:03:13.040
video or still,
and present it side by side

00:03:13.040 --> 00:03:16.560
in sort of a neat presentation
format with an ongoing video chat.

00:03:16.560 --> 00:03:18.720
This will actually be the
subject of our next session,

00:03:18.820 --> 00:03:21.530
so I invite you all to stick
around and check it out.

00:03:23.890 --> 00:03:25.680
So without further ado,
let's talk about the

00:03:25.680 --> 00:03:27.620
Instant Message Framework and presence.

00:03:27.700 --> 00:03:29.720
Well, what does presence look like,
first of all?

00:03:29.790 --> 00:03:32.440
Well, the iChat buddy list is a
pretty good place to start.

00:03:32.490 --> 00:03:34.840
Along the left side of things,
you see the status gems,

00:03:34.860 --> 00:03:37.200
which are used to represent availability.

00:03:37.260 --> 00:03:39.660
You see a list of people,
people that the user has actually

00:03:39.660 --> 00:03:41.160
added to their buddy list.

00:03:41.220 --> 00:03:44.540
You see on the right side things
like buddy pictures and capabilities.

00:03:44.730 --> 00:03:45.970
Do users have video cameras?

00:03:46.050 --> 00:03:47.850
Do they have audio microphones?

00:03:48.070 --> 00:03:50.870
Are they available for
video chats at present?

00:03:51.980 --> 00:03:53.870
So what does a presence look
like in another application?

00:03:53.980 --> 00:03:57.120
Let's try something else we ship,
like Address Book.

00:03:57.150 --> 00:04:00.220
This is a card view from the
standard Address Book on your system,

00:04:00.260 --> 00:04:03.940
and it has pretty much what you'd
expect from a contact application.

00:04:03.950 --> 00:04:07.490
Things like their name,
company information, phone numbers,

00:04:07.490 --> 00:04:09.240
email, that kind of stuff.

00:04:09.280 --> 00:04:12.860
In addition, you'll notice here,
there's actually an AIM handle.

00:04:12.890 --> 00:04:15.460
What Address Book is doing is
using this AIM handle and the

00:04:15.460 --> 00:04:19.220
Instant Message Framework to tie
this back to a presence in iChat,

00:04:19.240 --> 00:04:21.500
and if you look carefully,
there's a little green status gem,

00:04:21.510 --> 00:04:24.610
the same one that you see in iChat,
right beside the user's buddy

00:04:24.620 --> 00:04:26.710
picture in Address Book.

00:04:28.640 --> 00:04:30.320
Mail is another good example of this.

00:04:30.450 --> 00:04:34.480
Mail will show the online status of
any sender or addressee of a message.

00:04:34.500 --> 00:04:37.440
You'll notice again it's the same
status gem that you see in iChat.

00:04:37.500 --> 00:04:39.340
Well, how does Mail do this?

00:04:39.580 --> 00:04:41.910
Well,
they've noticed that this email address

00:04:41.910 --> 00:04:44.620
is tied to an address book card,
which in turn is tied back

00:04:44.800 --> 00:04:48.970
to an IM handle that can be
tied to a presence in iChat.

00:04:50.220 --> 00:04:51.590
And lastly, a different kind of client.

00:04:51.600 --> 00:04:53.860
This is actually one of our own.

00:04:54.020 --> 00:04:56.250
The menu extra, actually,
if you look at the bottom,

00:04:56.430 --> 00:04:58.340
has a list of handles that are available.

00:04:58.500 --> 00:05:01.640
These are pulled from iChat using
the Instant Message Framework.

00:05:01.730 --> 00:05:03.900
We filter out all the ones
that we're not interested in.

00:05:03.900 --> 00:05:06.700
In this case,
we want only available people.

00:05:06.880 --> 00:05:10.890
We show this as a short list of --
a short way to initiate text chats,

00:05:10.930 --> 00:05:14.220
video chats, or audio chats with people.

00:05:15.380 --> 00:05:18.760
So stepping back just a little bit,
what exactly is presence?

00:05:18.820 --> 00:05:22.140
Well, presence is first and foremost,
as I said, the availability of

00:05:22.140 --> 00:05:23.700
someone in the buddy list.

00:05:23.750 --> 00:05:27.160
Represent on the left side of things,
you have your green gem

00:05:27.160 --> 00:05:30.200
for available status,
you have a yellow gem for idle,

00:05:30.200 --> 00:05:31.780
and you have a red gem for away.

00:05:31.820 --> 00:05:34.320
And the lack of a gem represents
that person's offline.

00:05:34.480 --> 00:05:37.480
There's a bunch of other things
that come along with this.

00:05:37.540 --> 00:05:39.800
We have things like
their status messages,

00:05:39.860 --> 00:05:42.920
their pictures, their capabilities,
things fundamental such as,

00:05:42.920 --> 00:05:44.630
does this user support file transfer?

00:05:44.820 --> 00:05:46.400
Do they support group chat?

00:05:46.470 --> 00:05:48.860
Larger things such as,
is this person running Leopard

00:05:48.940 --> 00:05:51.200
so I can screen share with them?

00:05:51.760 --> 00:05:54.920
Lastly, we're actually going to tie
address book cards to people,

00:05:54.990 --> 00:05:57.370
which will give your application
an easier way to call back

00:05:57.490 --> 00:06:01.130
presences of people you might
actually be working with.

00:06:02.030 --> 00:06:04.180
So, what does our framework provide?

00:06:04.180 --> 00:06:07.610
Well, to start off,
we provide presence information about

00:06:07.620 --> 00:06:09.210
the person sitting down at the machine.

00:06:09.220 --> 00:06:10.620
That is my presence information.

00:06:10.620 --> 00:06:14.700
This will be things like the
availability of the person.

00:06:14.700 --> 00:06:16.960
What has the user set
their own buddy icon?

00:06:16.960 --> 00:06:19.700
Are they actually even logged
into a service immediately?

00:06:19.700 --> 00:06:22.610
We're going to provide presence
information about all the buddies

00:06:22.610 --> 00:06:23.840
in that user's buddy list.

00:06:23.860 --> 00:06:27.020
We're going to provide
presence change notifications,

00:06:27.020 --> 00:06:29.790
so we can actually let your
application know when someone

00:06:29.790 --> 00:06:32.920
moves from available to away,
or changes their buddy picture,

00:06:32.920 --> 00:06:34.460
so you can keep your UI up to date.

00:06:34.500 --> 00:06:38.040
And speaking of UI,
we're actually going to provide to

00:06:38.040 --> 00:06:40.780
you the status gems that you see
on the left side of the buddy list

00:06:40.940 --> 00:06:43.780
for your use in your application,
as we saw here with Mail and

00:06:43.780 --> 00:06:45.350
previously with Address Book.

00:06:47.590 --> 00:06:49.740
So to start at the top of that list,
how do we get access to our

00:06:49.740 --> 00:06:50.750
own presence information?

00:06:50.760 --> 00:06:53.090
Well, as I said,
Instant Message is the framework

00:06:53.100 --> 00:06:56.040
that you'll be looking at,
and the IAMService.h header will have

00:06:56.040 --> 00:06:59.340
all the functionality that you need to
integrate presence into your application.

00:06:59.340 --> 00:07:02.510
Let's look at a simple call,
one called MyStatus.

00:07:02.520 --> 00:07:05.170
When you call this,
you're actually going to get back

00:07:05.220 --> 00:07:08.670
a variable type of IAMPersonStatus,
which is an enumerated type of

00:07:08.670 --> 00:07:11.890
any of the availability states,
such as available, idle, away,

00:07:11.890 --> 00:07:12.660
and offline.

00:07:12.660 --> 00:07:15.380
There's a couple more of these that
you'll actually see in the header,

00:07:15.790 --> 00:07:16.930
And they're well documented there.

00:07:16.940 --> 00:07:18.980
I invite you to check it out.

00:07:19.680 --> 00:07:21.930
So once you have one of these things,
how do you actually get the status

00:07:21.950 --> 00:07:24.240
image to represent a new UI?

00:07:24.370 --> 00:07:25.900
Well,
there's another similarly simple call.

00:07:26.030 --> 00:07:30.580
Once you have one of these statuses,
you can actually call ImageNameForStatus,

00:07:30.660 --> 00:07:33.440
which is going to return an
NSString that you can pass off to

00:07:33.440 --> 00:07:37.300
AppKit's NSImage API to return an
image that you can set on a button

00:07:37.300 --> 00:07:39.820
cell that you can draw yourself.

00:07:42.490 --> 00:07:44.400
So before moving forward,
I should probably explain a little

00:07:44.400 --> 00:07:46.680
bit more about the innards of
IAM service and sort of how it works.

00:07:46.680 --> 00:07:49.640
The class, as we've seen,
has a couple utility methods on

00:07:49.640 --> 00:07:52.300
it and ways to get information
about our own presence.

00:07:52.300 --> 00:07:55.220
However, instances of IAM service
are a little bit different.

00:07:57.660 --> 00:08:00.940
Each instance of IAM service
represents an account type

00:08:00.940 --> 00:08:04.320
that iChat the application,
and thus the Instant Message Framework

00:08:04.320 --> 00:08:05.780
is capable of talking to.

00:08:05.950 --> 00:08:10.700
These are things such as AIM, Jabber,
and Bonjour, all named services.

00:08:10.840 --> 00:08:14.090
Each service can have attributes such as,
for example, their status.

00:08:14.200 --> 00:08:15.740
Is this particular service logged in?

00:08:15.920 --> 00:08:17.060
Are they logged out?

00:08:17.060 --> 00:08:20.210
A bunch of states that you'd
imagine would be in between there.

00:08:21.250 --> 00:08:22.960
The service is the actual
one that's going through the

00:08:22.960 --> 00:08:24.390
address book person mapping.

00:08:24.510 --> 00:08:27.500
So when you have your A/B person
object in your application,

00:08:27.540 --> 00:08:30.850
you can ask a service, "Hey,
give me all the handles that

00:08:30.850 --> 00:08:33.800
I can use for presence lookup on
this given service," using these

00:08:33.800 --> 00:08:35.200
screen names for person call.

00:08:35.310 --> 00:08:36.900
And conversely,
there's a people with screen name

00:08:36.900 --> 00:08:40.870
if you have a handle that you want
to maybe map an A/B person back to.

00:08:41.000 --> 00:08:43.890
And lastly, and most importantly,
we'll get to that, are buddies.

00:08:44.110 --> 00:08:47.010
Buddies exists on IAM service objects.

00:08:48.360 --> 00:08:49.940
How do I get at these IAM services?

00:08:49.970 --> 00:08:51.830
Well,
there's two relatively simple calls.

00:08:51.910 --> 00:08:54.040
You can just say, hey,
give me all the services that

00:08:54.080 --> 00:08:55.440
iChat currently supports.

00:08:55.470 --> 00:08:58.220
Or if you know what you're looking for,
you can address one

00:08:58.290 --> 00:09:00.130
specifically with a name.

00:09:01.180 --> 00:09:03.700
Now it looks something like this.

00:09:03.820 --> 00:09:05.900
An important thing to mention
here is that as of Leopard,

00:09:05.900 --> 00:09:08.810
we supported multiple
logins to any given service.

00:09:09.000 --> 00:09:11.540
Now what this means is that you
can have two AIM accounts or

00:09:11.540 --> 00:09:15.980
more logged into the AOElements
Instant Messenger service simultaneously.

00:09:16.140 --> 00:09:18.900
Same for Jabber,
and Bonjour still only allows one,

00:09:18.990 --> 00:09:21.450
because it would make
much sense otherwise.

00:09:21.550 --> 00:09:25.470
In this example, you see here two Jabber,
two AIM, and a single Bonjour list.

00:09:25.590 --> 00:09:30.060
And it's important to note that this
does not represent five IAM services.

00:09:30.460 --> 00:09:32.560
This still represents three.

00:09:32.650 --> 00:09:35.600
The buddies, the status information,
is all going to be sort of a best-case

00:09:35.600 --> 00:09:39.560
scenario in a mix of all the buddies
and the best status of a given service.

00:09:39.560 --> 00:09:42.270
So if one of these accounts
were logged out and you asked

00:09:42.370 --> 00:09:45.100
for the services status,
you'd probably still get logged in,

00:09:45.220 --> 00:09:47.300
given that one is still there.

00:09:49.490 --> 00:09:51.500
So buddy information.

00:09:51.630 --> 00:09:53.800
Buddy information,
once you have one of these IAM services,

00:09:53.800 --> 00:09:55.420
is relatively easy to get at.

00:09:55.460 --> 00:09:56.640
There's two ways to do this.

00:09:56.670 --> 00:09:58.960
You ask for the info for a
particular screen name if you

00:09:58.960 --> 00:10:00.440
know who you're looking for.

00:10:00.480 --> 00:10:04.780
Or you can ask for the entire buddy
list with info for all screen names.

00:10:05.060 --> 00:10:07.620
The information is returned to
you in the form of a dictionary,

00:10:07.640 --> 00:10:10.300
a dictionary which contains
a variety of keys and values,

00:10:10.310 --> 00:10:12.850
all of which are listed in the
actual header and explained there.

00:10:13.140 --> 00:10:15.770
But they'll have things, for example,
like the person's screen name

00:10:15.810 --> 00:10:20.670
with I am person screen name key,
their status, status key, and so forth.

00:10:20.750 --> 00:10:24.070
So let's walk through a brief example
of how this would actually work.

00:10:24.270 --> 00:10:26.490
So let's say we're talking about AIM,
and we're looking for an

00:10:26.500 --> 00:10:27.710
AIM buddy in our application.

00:10:27.940 --> 00:10:31.260
So first order of business is let's
find a reference to the AIM service.

00:10:31.440 --> 00:10:35.270
So we ask IAM service for
the service with name AIM.

00:10:35.710 --> 00:10:37.900
Given that reference,
we can then ask for information

00:10:37.900 --> 00:10:41.760
about a particular screen name,
which will give us back a dictionary

00:10:41.790 --> 00:10:43.980
if that person is in the buddy list.

00:10:44.600 --> 00:10:46.360
From that dictionary,
we can start pulling out the

00:10:46.480 --> 00:10:48.180
statuses that are interesting to us.

00:10:48.350 --> 00:10:51.220
Things like, given that we know their
screen name already,

00:10:51.260 --> 00:10:54.010
might be nice to show their status
and their status message in the UI,

00:10:54.170 --> 00:10:55.960
and maybe a little picture on the side.

00:10:56.030 --> 00:10:59.520
And, you know,
we can also show their first name for a

00:10:59.520 --> 00:11:02.340
little bit of a cleaner user experience.

00:11:03.490 --> 00:11:05.580
That's all you pretty much
need to integrate presence as

00:11:05.580 --> 00:11:06.980
it exists in your application.

00:11:06.980 --> 00:11:10.920
Now, iChat has this ever-evolving
or ever-changing presence

00:11:10.920 --> 00:11:13.780
concept that people go from
available to away fairly often.

00:11:13.780 --> 00:11:16.340
So your application needs
to keep up with this.

00:11:16.340 --> 00:11:19.480
And to do that,
we have presence change notifications.

00:11:19.500 --> 00:11:23.110
These are given to you with a
custom NS Notification Center.

00:11:23.120 --> 00:11:26.040
For those of you unfamiliar
with NS Notification Center,

00:11:26.040 --> 00:11:28.180
this is a standard
foundation-level object that,

00:11:28.180 --> 00:11:31.490
for all intents and purposes,
you can register with to say, hey,

00:11:31.490 --> 00:11:34.400
I want to know about certain
events or notifications occurring.

00:11:34.400 --> 00:11:38.260
Example ones are
IAM Service Status Change Notification,

00:11:38.260 --> 00:11:42.150
where you can imagine this will
let you know when a service,

00:11:42.360 --> 00:11:46.280
say AIM or Jabber,
moves from logged in to logged out.

00:11:46.300 --> 00:11:50.720
If you want to know when someone changes
their status from available to away,

00:11:50.720 --> 00:11:53.200
you can register for the
IAM Person Status Change Notification,

00:11:53.250 --> 00:11:55.260
which will let you
know when that happens.

00:11:55.280 --> 00:11:58.510
Similarly,
if your application shows buddy UI,

00:11:58.520 --> 00:12:00.820
such as their picture,
you can register for the

00:12:00.930 --> 00:12:04.130
IAM Person Info Change Notification,
which will let you know when any

00:12:04.130 --> 00:12:07.080
of the vast number of presence
keys out there actually change.

00:12:10.480 --> 00:12:13.470
Each of these notifications comes
with a bit of context information,

00:12:13.550 --> 00:12:15.340
and this actually is delivered
by way of the user info.

00:12:15.340 --> 00:12:18.650
This dictionary contains the same
keys that you saw on the previous

00:12:18.710 --> 00:12:21.560
slide to look up buddy information,
so it should be pretty

00:12:21.560 --> 00:12:22.690
straightforward to see there.

00:12:25.200 --> 00:12:27.540
So let's look through a sequence
of events that an application

00:12:27.540 --> 00:12:29.840
might do to support these things.

00:12:30.030 --> 00:12:31.590
First of all,
we need to get our application to

00:12:31.590 --> 00:12:35.780
register for these notification changes,
which would look something like this.

00:12:35.850 --> 00:12:38.820
We ask the IAM service for
its notification center,

00:12:38.880 --> 00:12:41.080
add ourself in this case
as an observer to the

00:12:41.080 --> 00:12:43.940
IAM Person Status Change notification.

00:12:44.000 --> 00:12:48.200
And notice that we're having it call us
back on the Person Status Change method.

00:12:48.820 --> 00:12:50.900
Next step, we need to get notified.

00:12:51.020 --> 00:12:53.000
And to do that, well,
someone needs to change their status,

00:12:53.000 --> 00:12:55.300
and on top of that,
we need to actually create the method

00:12:55.300 --> 00:12:57.400
to handle the net status change.

00:12:57.400 --> 00:12:59.830
So that would look something like this.

00:13:00.350 --> 00:13:02.830
Here we have person status changed,
and the first order of

00:13:02.840 --> 00:13:05.320
business is to pull the user
info dictionary out of there.

00:13:05.320 --> 00:13:08.430
We need to know whose
status actually changed,

00:13:08.430 --> 00:13:11.250
so we're going to ask that dictionary,
hey, I need the value for the

00:13:11.350 --> 00:13:12.620
IAM person screen name key.

00:13:12.620 --> 00:13:14.650
So that's immediately going to tell
us who we're talking about here.

00:13:14.680 --> 00:13:17.340
And given this is a status change,
we're probably interested

00:13:17.340 --> 00:13:18.370
in their new status.

00:13:18.380 --> 00:13:21.520
So in turn, we can pull the new status
right out of that dictionary.

00:13:23.120 --> 00:13:25.520
For the purposes of this example,
we're actually just logging this out.

00:13:25.580 --> 00:13:27.840
But as you can imagine,
your application will put in

00:13:27.840 --> 00:13:29.630
the glue code that it needs
here to update its views,

00:13:29.630 --> 00:13:31.200
models, controllers,
do all the bookkeeping

00:13:31.270 --> 00:13:31.910
that you need to do.

00:13:34.520 --> 00:13:36.700
After that, well, that's pretty much it.

00:13:36.770 --> 00:13:38.240
You're fully tied into iChat.

00:13:38.240 --> 00:13:42.100
You'll receive notifications for any
time any presence changes in the UI.

00:13:42.340 --> 00:13:44.190
So side by side,
your application will keep up

00:13:44.250 --> 00:13:46.810
to the goings-on of things.

00:13:47.560 --> 00:13:49.540
There's one important
detail here to note,

00:13:49.540 --> 00:13:52.410
is that presence will be pushed
to you as soon as you register

00:13:52.410 --> 00:13:54.300
with this notification center.

00:13:54.370 --> 00:13:57.760
Now simply put,
this means if in my previous example,

00:13:57.760 --> 00:14:02.060
I was interested in the
IAM Person Status Change notifications.

00:14:02.140 --> 00:14:05.470
As soon as I register for these,
I am immediately going to be pushed

00:14:05.650 --> 00:14:09.660
a presence change notification
for everybody that iChat has,

00:14:09.660 --> 00:14:12.200
with their current status.

00:14:13.010 --> 00:14:16.060
So what this means is that your
application doesn't actually need to

00:14:16.060 --> 00:14:17.690
ask for the initial status of things.

00:14:17.720 --> 00:14:20.470
You don't need to do that startup
and build your initial map of,

00:14:20.560 --> 00:14:22.100
you know, the state of the world.

00:14:22.160 --> 00:14:25.060
You just simply need to
register for your notifications,

00:14:25.110 --> 00:14:27.540
and then the same code that does
your UI update and your model

00:14:27.540 --> 00:14:30.400
update will actually build your
sort of initial state of iChat.

00:14:30.450 --> 00:14:33.510
And this will work whether iChat
is currently running or not.

00:14:33.770 --> 00:14:35.980
If it's running, you'll expect a bunch of
these things to come in.

00:14:36.160 --> 00:14:38.490
If it's not, then, well,
when iChat pops up,

00:14:38.590 --> 00:14:40.930
your application will be ready to go.

00:14:41.690 --> 00:14:43.400
So let's walk through
a brief demo of this.

00:14:43.420 --> 00:14:46.560
I'm going to show you some sample
code that's actually available online,

00:14:46.580 --> 00:14:49.470
and I'm going to walk you through
the glue code that basically ties

00:14:49.490 --> 00:14:52.430
IAM service to our simple data model.

00:14:52.500 --> 00:14:55.900
This application is simply
looking through the address book,

00:14:55.950 --> 00:14:58.440
finding every A/B person,
and just trying to tie

00:14:58.440 --> 00:14:59.560
a presence to them.

00:14:59.590 --> 00:15:01.310
So let's take a look.

00:15:08.970 --> 00:15:13.010
So here online, I'm going to open up
the AB Presence project,

00:15:13.010 --> 00:15:14.900
and I'll give you a little
overview of how this thing works.

00:15:14.900 --> 00:15:18.170
If we look at the standard main menu nib,

00:15:22.300 --> 00:15:24.140
is the interface builder here.

00:15:24.140 --> 00:15:28.340
This is just a simple window that's
going to have a list with two columns.

00:15:28.340 --> 00:15:30.810
There's going to be some text
and an image along the side here.

00:15:31.150 --> 00:15:33.290
In the actual Nib,
we have two objects declared.

00:15:33.300 --> 00:15:35.860
We have a Service Watcher and
we have a People Data Source.

00:15:35.910 --> 00:15:38.180
The Service Watcher is going to
be the class that actually ties

00:15:38.230 --> 00:15:41.450
IAM service to the data source.

00:15:41.560 --> 00:15:45.300
So, let's start with Service Watcher.

00:15:45.760 --> 00:15:49.340
Pretty straightforward class, no I of Rs,
and it just has two simple accessors,

00:15:49.350 --> 00:15:52.290
Start and Stop Monitoring IAM Service.

00:15:54.270 --> 00:15:56.120
When it loads up from Nib,
it's just going to tell

00:15:56.120 --> 00:15:57.260
itself to start monitoring.

00:15:57.260 --> 00:16:01.660
And the monitoring, as we saw previously,
is very straightforward.

00:16:01.660 --> 00:16:05.060
We pull the
IAM Services NS Notification Center,

00:16:05.060 --> 00:16:08.180
and we start adding ourselves
for interesting notifications.

00:16:08.180 --> 00:16:10.320
In this case,
since we're going to be looking for both

00:16:10.550 --> 00:16:13.870
presence changes and status changes,
we register for the

00:16:13.870 --> 00:16:16.660
IAM Person Status Change Notification
here,

00:16:16.660 --> 00:16:19.460
and the IAM Person Info
Notification changed here.

00:16:20.750 --> 00:16:23.660
This notification at the top is actually
the one I was talking about for the

00:16:23.660 --> 00:16:26.490
IAM Service Status Change Notifications,
but this application doesn't

00:16:26.540 --> 00:16:28.110
need to do anything with them.

00:16:28.690 --> 00:16:30.240
So, let's take a brief look at these.

00:16:30.240 --> 00:16:33.570
As I said,
the service status change notification,

00:16:33.570 --> 00:16:36.140
we're not really doing anything with,
but the person status change

00:16:36.140 --> 00:16:38.440
notification is where everything happens.

00:16:38.440 --> 00:16:41.450
What we're going to do is
pull the service that this

00:16:41.450 --> 00:16:43.600
notification is talking about.

00:16:43.620 --> 00:16:46.260
So when someone on, say,
our aim buddy list has gone

00:16:46.260 --> 00:16:49.820
from available to away,
we're going to pull the service to figure

00:16:49.850 --> 00:16:52.080
out the service we're talking about.

00:16:52.080 --> 00:16:55.080
I'm going to pull the user info out,
I'm going to pull the screen name out,

00:16:55.080 --> 00:16:59.350
and then I'm going to use that service
that I grabbed to find all the address

00:16:59.350 --> 00:17:03.220
book people that could potentially
be associated with the screen name.

00:17:03.500 --> 00:17:07.280
My data source, as I mentioned,
is a list of people in the address book.

00:17:07.390 --> 00:17:10.040
So I'm then actually going to list
through all the address book people

00:17:10.040 --> 00:17:13.410
that could be affected and post a
little internal notification-- this is

00:17:13.410 --> 00:17:21.180
how one is talking to the other-- of,
hey, these people, all these address book

00:17:21.560 --> 00:17:22.400
people might have changed.

00:17:22.400 --> 00:17:22.400
You should probably reassess
your state of affairs.

00:17:23.720 --> 00:17:25.830
So moving on to the People Data Source.

00:17:25.920 --> 00:17:28.970
If we look at this guy,
it's pretty straightforward as well.

00:17:29.200 --> 00:17:31.200
He has two parallel arrays.

00:17:31.250 --> 00:17:32.860
Not exactly the most
efficient way to go about it,

00:17:32.890 --> 00:17:34.700
but it gets the job done.

00:17:34.770 --> 00:17:37.100
We have a list of A/B people
in our address book,

00:17:37.140 --> 00:17:40.000
and we're gonna have a parallel
array of IAM person statuses.

00:17:40.120 --> 00:17:43.470
These will just be NS values that
map back to the enumerated type

00:17:43.570 --> 00:17:45.460
that I talked about previously.

00:17:45.530 --> 00:17:47.840
We also have a reference to the table.

00:17:48.130 --> 00:17:53.150
So, if we look at the initial
startup of this thing,

00:17:53.150 --> 00:17:53.150
or...

00:17:53.470 --> 00:17:54.740
Here.

00:17:55.270 --> 00:17:59.940
The general sort of brute force way to
go about rebuilding status information

00:17:59.940 --> 00:18:02.190
for all your buddies here is,
first of all,

00:18:02.290 --> 00:18:07.600
clear out this parallel array,
go through all the people

00:18:07.600 --> 00:18:07.600
in our address book list,

00:18:07.810 --> 00:18:12.100
And this is a little bit confusing here,
so I'm going to walk through

00:18:12.100 --> 00:18:13.800
it a little bit slowly.

00:18:13.840 --> 00:18:16.080
We're going to start with a--

00:18:16.430 --> 00:18:19.480
What we're trying to do here is to find
the best status for all the available

00:18:19.540 --> 00:18:21.340
handles for this given A/B person.

00:18:21.560 --> 00:18:24.040
A person can just have one,
or they can have as many

00:18:24.040 --> 00:18:25.350
as you have assigned.

00:18:25.530 --> 00:18:28.540
So we're going to start with
offline as our best status.

00:18:28.560 --> 00:18:31.740
We're going to iterate through all the
services that are available to iChat.

00:18:31.770 --> 00:18:34.360
We're going to ask all those services,
hey, what are the screen

00:18:34.360 --> 00:18:36.040
names that you support?

00:18:36.080 --> 00:18:39.110
So if someone just has an AIM handle,
this is going to iterate

00:18:39.390 --> 00:18:40.480
through a few times.

00:18:40.610 --> 00:18:43.370
But it's only going to find one
AIM handle and do all this code for that.

00:18:43.460 --> 00:18:46.340
It'll ignore Jabber and Bonjour,
for example.

00:18:46.980 --> 00:18:49.020
So once we have these screen names,
we're going to iterate through

00:18:49.100 --> 00:18:51.860
the screen names and ask that
service for all the information

00:18:51.980 --> 00:18:54.380
it has about that screen name.

00:18:54.590 --> 00:18:56.910
That'll give us back a dictionary
that we're going to then

00:18:57.040 --> 00:18:58.290
pull the status right out of.

00:18:58.300 --> 00:19:01.660
If we have a status,
we're just going to cast

00:19:01.660 --> 00:19:04.270
it to an IAM person status,
and then compare them.

00:19:04.280 --> 00:19:07.020
This is another utility method
you'll see in IAMService.h.

00:19:07.020 --> 00:19:10.120
It's just a simple comparator to say,
is available better than away,

00:19:10.120 --> 00:19:12.830
because they're not necessarily ordered
as you might expect in the header.

00:19:14.400 --> 00:19:17.940
If it's a better status,
we'll remember this and move along.

00:19:17.990 --> 00:19:20.800
Once we're done with a given person,
we note the best status that we found

00:19:20.800 --> 00:19:22.700
and tell the table to reload its data.

00:19:22.780 --> 00:19:24.570
Fairly straightforward.

00:19:25.500 --> 00:19:29.060
So that notification that the
service watcher previously would post

00:19:29.440 --> 00:19:32.600
will just kick off a reload table,
or a reload AB people

00:19:32.600 --> 00:19:36.260
for this data source,
which will just go back through and note,

00:19:36.430 --> 00:19:39.430
basically note changes that's
happened to people and update the UI.

00:19:39.440 --> 00:19:41.210
So let's see this thing working.

00:19:41.220 --> 00:19:42.350
iChat.

00:19:43.350 --> 00:19:45.140
I run this,
and you can see the application

00:19:45.140 --> 00:19:46.000
just popped up immediately.

00:19:46.000 --> 00:19:47.540
I do have iChat running
in the background.

00:19:47.540 --> 00:19:51.290
And it showed here, hey, this guy's idle,
this guy's away.

00:19:51.290 --> 00:19:53.220
And this machine hasn't been
touched for a little while,

00:19:53.220 --> 00:19:54.260
so I'll just move the mouse.

00:19:54.260 --> 00:19:57.310
And look,
Jane McDouglas has now become available.

00:19:59.940 --> 00:20:01.690
And that's it for this presentation.

00:20:01.690 --> 00:20:05.740
So, if I can go back to slides.

00:20:07.710 --> 00:20:10.320
So in summary,
instant message is the way to

00:20:10.340 --> 00:20:12.100
get presence in your application.

00:20:12.160 --> 00:20:16.100
It's a very simple Cocoa API,
and it's a very simple usage pattern.

00:20:16.150 --> 00:20:19.790
All you have to do is register
for presence changes and handle

00:20:19.790 --> 00:20:21.380
the changes when they come in.

00:20:21.430 --> 00:20:23.360
There's no need to
pull for initial state.

00:20:23.420 --> 00:20:24.080
That's it.

00:20:24.180 --> 00:20:27.820
Very small amount of code
that you'll need to write.

00:20:28.760 --> 00:20:31.140
Going back to what Bertrand said in
the State of the Union on Monday,

00:20:31.140 --> 00:20:32.660
if you happen to be there,
this is Snow Leopard,

00:20:32.660 --> 00:20:34.460
and we really are looking
for your feedback.

00:20:34.460 --> 00:20:37.800
So I invite you all to
check out our sample code,

00:20:37.800 --> 00:20:39.440
look through the instant
message documentation,

00:20:39.440 --> 00:20:42.040
and think about,
can I use this in my application?

00:20:42.040 --> 00:20:45.490
Do you use AB People anywhere
in your app?

00:20:45.560 --> 00:20:48.080
Does your application revolve
around dealing with people?

00:20:48.080 --> 00:20:50.200
Is it a contact managing application?

00:20:50.200 --> 00:20:51.190
That sort of thing.

00:20:51.200 --> 00:20:53.980
If the answer is yes to any of those,
then chances are you're

00:20:54.100 --> 00:20:55.520
a pretty good candidate.

00:20:56.120 --> 00:20:58.160
So check out the source code,
register for the status

00:20:58.160 --> 00:21:01.040
change in your application,
and see if you can get to the point

00:21:01.100 --> 00:21:04.540
where you have a green gem showing up
somewhere useful in your UI to the user,

00:21:04.540 --> 00:21:07.420
maybe next to their name, their picture,
as you saw in Mail or Address Book.

00:21:08.680 --> 00:21:11.400
We have a lab tomorrow morning,
bright and early, 9:00 AM.

00:21:11.450 --> 00:21:14.020
So I invite you all to come there
and let us know how it went.

00:21:14.020 --> 00:21:16.750
I'll be there myself,
and fellow iChat guys will be

00:21:16.750 --> 00:21:19.580
there looking forward to it
and looking forward to helping

00:21:19.580 --> 00:21:21.710
you out get this thing working.

00:21:21.840 --> 00:21:23.840
And with that, I'm actually going to
introduce the next person.

00:21:23.840 --> 00:21:27.570
Matthew Jarjoura will be talking about
controlling iChat using Apple Scripts

00:21:27.570 --> 00:21:29.800
and the Scripting Bridge API.

00:21:29.830 --> 00:21:31.140
Thank you.

00:21:35.520 --> 00:21:36.440
Thank you, Justin.

00:21:36.460 --> 00:21:39.590
Hi, I'm Matt Jarjoura,
and I am an engineer on the iChat team.

00:21:39.600 --> 00:21:42.750
And today I'm going to be
talking to you about controlling

00:21:42.750 --> 00:21:46.120
iChat using Apple Script and
the Scripting Bridge Framework.

00:21:48.490 --> 00:21:51.450
So I'm going to be talking a little
bit about what is Apple Script,

00:21:51.520 --> 00:21:53.870
and then I'm going to give you
some examples of what you can

00:21:53.870 --> 00:21:56.300
do with Apple Script in iChat,
and then I'm going to talk to

00:21:56.310 --> 00:21:59.160
you a little bit about a new
framework we added in Leopard,

00:21:59.300 --> 00:22:01.510
the Scripting Bridge Framework.

00:22:02.400 --> 00:22:04.760
So for those of you new to the
platform or just unfamiliar

00:22:04.760 --> 00:22:07.680
with Apple Script in general,
you may be wondering what

00:22:07.680 --> 00:22:08.880
exactly Apple Script is.

00:22:08.990 --> 00:22:11.130
How does this thing work?

00:22:11.280 --> 00:22:15.200
AppleScript is actually defined
as an English-like language.

00:22:15.200 --> 00:22:17.370
For instance, here it says,
"Tell application iChat,

00:22:17.500 --> 00:22:21.290
"Display dialogue,
hello," which then gets

00:22:21.290 --> 00:22:25.030
converted into an Apple event,
which is this message that then

00:22:25.130 --> 00:22:28.190
gets passed on to an application,
such as iChat in this case,

00:22:28.190 --> 00:22:30.390
is its dialogue message.

00:22:31.570 --> 00:22:34.430
So with AppleScript,
you can write shell scripts

00:22:34.560 --> 00:22:37.060
just like you can with Perl,
Python, Ruby.

00:22:37.060 --> 00:22:41.900
There's a command line utility
OSA script that lets you run these tools.

00:22:41.900 --> 00:22:45.260
And you can control a specific
application with AppleScript.

00:22:45.280 --> 00:22:47.130
And you can also respond to events.

00:22:47.220 --> 00:22:50.560
Say, for instance,
you get a mail message from a group list,

00:22:50.560 --> 00:22:53.800
and you want to process
this with more than just,

00:22:53.800 --> 00:22:56.060
say,
maybe make a sound or move to a folder,

00:22:56.060 --> 00:22:58.890
you can attach an AppleScript to that.

00:22:59.640 --> 00:23:02.220
Okay,
but today we're here for iChat and what

00:23:02.220 --> 00:23:04.200
you can do with iChat and Apple Script.

00:23:04.260 --> 00:23:07.900
So the first thing is you need
to set up your Apple Script code.

00:23:07.900 --> 00:23:12.190
And of course, with any language,
you need to set up your block.

00:23:12.300 --> 00:23:14.700
And the first thing is
tell application iChat.

00:23:14.760 --> 00:23:19.560
And anything inside of here, then,
you can use to control iChat.

00:23:20.070 --> 00:23:23.580
So let's go ahead and
get to our first example,

00:23:23.580 --> 00:23:25.750
starting a new text chat.

00:23:27.980 --> 00:23:31.320
Okay, so to start a new text chat,
you need to create a

00:23:31.320 --> 00:23:32.600
new text chat object.

00:23:32.650 --> 00:23:34.300
And to do this,
I've highlighted a line of code here,

00:23:34.300 --> 00:23:37.850
"Make new text chat with properties."
And what this is going to do is this is

00:23:37.850 --> 00:23:41.490
going to create a new text chat object,
and then we're going to fill it

00:23:41.590 --> 00:23:44.330
with the properties participants,
which is basically I'm

00:23:44.510 --> 00:23:47.600
building a dictionary here,
so participants is the key.

00:23:47.690 --> 00:23:52.910
And then I'm filling it with a
signed-on buddy smarter child.

00:23:53.090 --> 00:23:55.640
So then I'm passing the participants
into the properties that's

00:23:55.640 --> 00:23:58.810
creating the new text chat,
and then I'm setting the result

00:23:58.810 --> 00:24:00.640
of that to the text chat object.

00:24:00.720 --> 00:24:03.010
So once you do that,
iChat will open up the

00:24:03.010 --> 00:24:04.800
window to that person,
and then you can begin

00:24:04.890 --> 00:24:05.710
sending actions to it.

00:24:05.830 --> 00:24:09.310
Say, for instance,
send hello to the text chat.

00:24:12.130 --> 00:24:16.960
Okay,
how about starting an audio conference?

00:24:17.020 --> 00:24:20.470
Same thing as before,
only this time make new audio chat.

00:24:20.530 --> 00:24:24.460
Again, you pass in the participants,
in this case, Jane McDouglas.

00:24:24.530 --> 00:24:26.750
She's a signed-on buddy.

00:24:26.920 --> 00:24:30.300
And then when you set the result
of this to my audio conference,

00:24:30.300 --> 00:24:32.700
now the difference is actually
as soon as you set this,

00:24:32.790 --> 00:24:36.160
you're actually going to initiate an
audio invitation to Jane McDouglas.

00:24:36.160 --> 00:24:39.650
So just be aware if you're
running through and testing it

00:24:39.650 --> 00:24:43.560
out and all of a sudden Jane's
talking to you out of the blue.

00:24:43.560 --> 00:24:45.050
Just be aware.

00:24:45.060 --> 00:24:49.880
Okay,
how about a multi-way video conference?

00:24:49.880 --> 00:24:51.110
iChat.

00:24:52.760 --> 00:24:55.460
Same thing here,
make new video chat with properties.

00:24:55.460 --> 00:24:58.800
Only this time I wanted to
highlight here the participants.

00:24:58.800 --> 00:25:03.050
And notice this time now we're
actually having multiple participants.

00:25:03.130 --> 00:25:06.560
Here we have Buddy, Jay McDouglas,
Mark Hammond, Kelly Adams here.

00:25:06.560 --> 00:25:08.950
So when we pass them in,
you're actually going to be passing

00:25:08.950 --> 00:25:13.460
in an array of participants that will
go into your new video chat object.

00:25:13.460 --> 00:25:15.720
And again,
just like the audio conference,

00:25:15.720 --> 00:25:19.640
as soon as you set your video conference,
or my video conference there,

00:25:19.640 --> 00:25:23.890
It will begin and all three
people will be invited.

00:25:26.760 --> 00:25:30.800
Okay, how about joining a chat room?

00:25:30.820 --> 00:25:33.120
Now this one's a little different
because here you actually need

00:25:33.150 --> 00:25:36.700
to be very specific about the
service you want to connect to,

00:25:36.760 --> 00:25:39.550
because each service that
you're on could have a different

00:25:39.620 --> 00:25:41.100
conference that you're joining.

00:25:41.100 --> 00:25:44.040
You know, say Google Chat is not going
to have the same conferences

00:25:44.040 --> 00:25:45.320
that AIM is going to have.

00:25:45.540 --> 00:25:47.920
And unlike the Instant Messaging
Framework where you're

00:25:47.990 --> 00:25:51.270
specific with just AIM Jabber,
you're actually going to go and

00:25:51.270 --> 00:25:52.900
get the specific service itself.

00:25:52.900 --> 00:25:55.240
So here in this example,
I'm saying the first service

00:25:55.240 --> 00:25:56.580
whose service type is AIM.

00:25:56.580 --> 00:25:59.410
All this is really saying is
of all the services that I'm

00:25:59.770 --> 00:26:02.100
connected to that are AIM,
get me the first at

00:26:02.100 --> 00:26:03.780
index zero of this array.

00:26:03.780 --> 00:26:05.980
And then set the result
of that to the service.

00:26:05.980 --> 00:26:08.590
And then we can use it here,
just like before,

00:26:08.860 --> 00:26:10.880
make new text chat with properties.

00:26:11.170 --> 00:26:16.390
I'm going to say join name iChat WWDC,
and then set the service there.

00:26:18.910 --> 00:26:20.710
Now, with iChat,
it's not actually going to

00:26:20.750 --> 00:26:22.780
bring up a window until you're
officially in the channel,

00:26:22.780 --> 00:26:25.280
so it may take one or two seconds
before the window pops up.

00:26:25.480 --> 00:26:27.600
But as soon as the window's up,
then you can begin sending

00:26:27.600 --> 00:26:28.820
actions to it again here.

00:26:28.820 --> 00:26:31.840
Send hello room to WWDC room.

00:26:36.330 --> 00:26:36.960
So where do you go from here?

00:26:36.960 --> 00:26:38.500
Of course,
these are just a couple examples

00:26:38.570 --> 00:26:40.170
that I wanted to show you.

00:26:40.260 --> 00:26:43.190
But the cool thing about
Apple Script is it's the

00:26:43.190 --> 00:26:44.780
Script Editor program that you see here.

00:26:44.780 --> 00:26:48.220
It's installed on
everyone's copy of Mac OS X.

00:26:48.280 --> 00:26:49.380
So you can just bring it up.

00:26:49.380 --> 00:26:52.740
It's in your
Applications/AppleScript folder.

00:26:52.740 --> 00:26:55.110
And when you go to Script Editor,
you can bring up an

00:26:55.110 --> 00:26:56.370
application's dictionary.

00:26:56.420 --> 00:26:58.060
Essentially, this is its API.

00:26:58.100 --> 00:27:00.480
So here,
if you pull up iChat's dictionary,

00:27:00.480 --> 00:27:03.940
you can see things like everything that
you can do with it using Apple Script.

00:27:03.950 --> 00:27:07.700
Log in, log out, take a snapshot,
and then the same objects

00:27:07.700 --> 00:27:09.110
that I was creating before.

00:27:09.190 --> 00:27:12.150
A text chat, audio chat, video chat, etc.

00:27:12.160 --> 00:27:14.450
So go ahead and check this out.

00:27:14.460 --> 00:27:16.600
There's also documentation you can view.

00:27:16.600 --> 00:27:19.440
It'll give you,
basically explain what you need to

00:27:19.440 --> 00:27:22.090
do to pass what properties you need,
and things like that.

00:27:22.120 --> 00:27:28.770
Okay, now let's move on to the
scripting bridge framework.

00:27:34.210 --> 00:27:38.260
So how does the scripting
bridge framework play into this?

00:27:38.310 --> 00:27:40.540
So previous to Leopard,
if you wanted to do

00:27:40.540 --> 00:27:42.840
anything with AppleScript,
you actually had to instantiate

00:27:42.870 --> 00:27:43.940
an NSAppleScript object.

00:27:44.020 --> 00:27:45.420
Some of you may be familiar with this.

00:27:45.470 --> 00:27:47.860
And pass in a small
snippet of code into this,

00:27:47.870 --> 00:27:51.420
which then went through
AppleScript to actually process this.

00:27:51.450 --> 00:27:54.980
When Leopard, they added this scripting
bridge framework,

00:27:55.030 --> 00:27:56.660
which basically bypasses this now.

00:27:56.760 --> 00:27:59.660
So it itself is directly
going to Apple Events,

00:27:59.680 --> 00:28:02.890
so you don't have the overhead
of AppleScript anymore.

00:28:05.880 --> 00:28:07.940
So the great thing about
ScriptingBridge is actually it's

00:28:08.340 --> 00:28:11.390
built on top of Objective-C,
so you can control your application,

00:28:11.400 --> 00:28:12.940
control iChat with Objective-C.

00:28:12.940 --> 00:28:15.530
And since Leopard now that
other scripting languages

00:28:15.530 --> 00:28:18.350
have first-party supports,
Ruby, Python, Perl,

00:28:18.350 --> 00:28:21.880
you can also use those to
control an application as well.

00:28:21.880 --> 00:28:24.650
And all the interfaces
are generated dynamically,

00:28:24.690 --> 00:28:27.920
so all commands, except handlers,
which we'll get to later,

00:28:28.130 --> 00:28:29.560
are made available to you.

00:28:29.560 --> 00:28:32.820
And this works with any
scriptable application,

00:28:32.820 --> 00:28:35.250
Mail, iCal, iTunes, even yours.

00:28:38.380 --> 00:28:40.400
So where to start with the
scripting bridge framework?

00:28:40.430 --> 00:28:43.200
Well, if you run this command
line utility here,

00:28:43.310 --> 00:28:45.720
you don't even have to worry
about copying that down.

00:28:45.720 --> 00:28:47.760
It's listed on developer.apple.com.

00:28:47.760 --> 00:28:49.480
And you can type in man sdp.

00:28:49.480 --> 00:28:50.570
It'll walk you through.

00:28:50.690 --> 00:28:54.800
But the idea is by running this
command line statement here,

00:28:54.850 --> 00:28:57.090
you'll actually be generating
yourself a header file,

00:28:57.090 --> 00:29:00.250
which will be the same content
that you saw in the dictionary

00:29:00.620 --> 00:29:02.520
in the scripting editor.

00:29:02.580 --> 00:29:06.100
So this will allow you to see it in,
basically, hopefully,

00:29:06.100 --> 00:29:08.570
your favorite format, Objective-C.

00:29:10.380 --> 00:29:14.100
But the thing is,
there's no accompanying .m file,

00:29:14.100 --> 00:29:17.660
so to actually use the scripting bridge,
you're going to be doing

00:29:17.690 --> 00:29:18.270
this all on runtime.

00:29:18.280 --> 00:29:23.280
And here we have the class method
application with bundle identifier,

00:29:23.280 --> 00:29:26.080
and you pass in the bundle identifier,
com.apple.ichat,

00:29:26.320 --> 00:29:30.210
and then it will generate the
class and instantiate it iChat app.

00:29:30.310 --> 00:29:34.400
And then iChat app, you can, say,
pass an Objective-C 2.0

00:29:34.400 --> 00:29:36.340
property status message.

00:29:36.340 --> 00:29:39.740
And as soon as you set this,
it should be reflected in iChat.

00:29:42.200 --> 00:29:44.900
Pretty straightforward, I think.

00:29:44.930 --> 00:29:47.400
OK,
so let's walk on to some examples now.

00:29:47.400 --> 00:29:50.290
The first one, sending a file.

00:29:51.600 --> 00:29:57.250
So to send a file, you want to create an
NSURL reference of your file,

00:29:57.250 --> 00:29:57.250
in this case,

00:29:57.660 --> 00:29:59.840
Here I'm doing Grand Canyon,
which is basically just

00:29:59.840 --> 00:30:02.000
a folder of pictures.

00:30:02.050 --> 00:30:04.420
And in this folder, basically,
I'm going to-- and then

00:30:04.420 --> 00:30:05.220
I need to get my buddy.

00:30:05.420 --> 00:30:08.630
So I'm going and getting a
buddy that's already signed in,

00:30:08.740 --> 00:30:11.100
in this case, Jane McDouglas.

00:30:11.180 --> 00:30:13.010
So I'm going to iChat app,
getting the list of buddies,

00:30:13.010 --> 00:30:14.600
and then saying, OK, well,
which one's signed in?

00:30:14.640 --> 00:30:15.180
Jay McDouglas.

00:30:15.180 --> 00:30:20.060
And then I'm going to go ahead and pass
the file URL to iChat with the buddy.

00:30:20.060 --> 00:30:24.560
And this way, iChat will take the file
URL and send her the file.

00:30:28.850 --> 00:30:30.200
Okay, how about starting a new chat?

00:30:30.200 --> 00:30:34.090
Now,
because this is generated dynamically,

00:30:34.190 --> 00:30:36.580
you're actually going to have to go
back to the scripting bridge and say,

00:30:36.590 --> 00:30:41.060
I actually want an Objective-C class
for this scripting class,

00:30:41.140 --> 00:30:42.050
TextChat.

00:30:42.060 --> 00:30:46.770
And once you have this class,
then you can actually create your object.

00:30:46.850 --> 00:30:50.540
So, you take your dictionary,
just as we did before,

00:30:50.540 --> 00:30:54.800
and you pass in Smarter Child as
assigned in Buddy to the participants,

00:30:54.800 --> 00:30:58.760
and then you pass that into
your new TextChat object.

00:30:58.760 --> 00:31:03.570
And unlike AppleScript here,
you actually have to tell

00:31:03.570 --> 00:31:06.500
iChat that you want to add this
to its list of text objects.

00:31:06.500 --> 00:31:09.920
So, as soon as you do that,
then the window will open up,

00:31:10.130 --> 00:31:12.890
and then you can begin sending
messages to Smarter Child.

00:31:16.010 --> 00:31:19.400
Hey, how about joining a chat room?

00:31:19.620 --> 00:31:21.690
Just like before,
you need to actually get the service

00:31:21.690 --> 00:31:23.210
of the chat room you want to sign into.

00:31:23.570 --> 00:31:26.770
Here in this example, I'm just getting,
of all the services that I'm on,

00:31:27.040 --> 00:31:29.330
I'm just getting the last one.

00:31:30.120 --> 00:31:31.920
And then here,
I'm passing this into the dictionary.

00:31:31.920 --> 00:31:34.760
So I'm saying, with this service and
this chat room name,

00:31:34.760 --> 00:31:37.100
iChat WWDC.

00:31:37.180 --> 00:31:40.470
And then basically I'm adding the
object to its list of text chats,

00:31:40.470 --> 00:31:44.090
and then again, wait one or two seconds,
hopefully no more than that,

00:31:44.090 --> 00:31:47.940
and then the chat window should open up.

00:31:47.970 --> 00:31:49.770
Okay.

00:31:49.910 --> 00:31:52.900
Let me go ahead and walk you
through a little demo here.

00:31:57.340 --> 00:31:59.500
Okay,
so I'm actually using Ruby Cocoa here.

00:31:59.500 --> 00:32:01.500
Some of you may be familiar with this.

00:32:01.520 --> 00:32:06.780
But, so what I have right now is just a
simple little wrapper around Xcode build.

00:32:06.780 --> 00:32:10.080
What I wanted to do is come up with
a little build script that I can use

00:32:10.090 --> 00:32:14.760
to just try to cut down on the amount
of repetition that I'm doing here.

00:32:14.760 --> 00:32:17.130
So I basically collapsed it up.

00:32:17.200 --> 00:32:18.980
It's not really,
it's just basically a simple

00:32:18.980 --> 00:32:20.080
wrapper on Xcode build.

00:32:20.080 --> 00:32:22.720
But the most important part
I wanted to show you here was that

00:32:22.720 --> 00:32:24.230
I've created my builder object.

00:32:25.600 --> 00:32:29.080
And that I basically executed
the build for a debug build

00:32:29.080 --> 00:32:33.820
phase and then a result,
I mean a release build here.

00:32:33.820 --> 00:32:36.870
And then basically each time I'm
printing to the command line,

00:32:37.100 --> 00:32:37.850
here's my status.

00:32:37.980 --> 00:32:39.210
And then I'm printing
to the command line.

00:32:40.470 --> 00:32:43.520
So if it's not successful, then fail.

00:32:43.520 --> 00:32:46.860
Otherwise,
print out that it was successful.

00:32:48.820 --> 00:32:54.140
So here we can say, Builder Step 1,
and run that, and then it'll go ahead

00:32:54.140 --> 00:32:55.590
and just compile the app.

00:32:55.600 --> 00:33:02.840
If you caught that,
it actually said build a successful

00:33:06.310 --> 00:33:07.720
Well, we want to make this a
little bit more interesting.

00:33:07.720 --> 00:33:08.760
Of course, you're here for iChat.

00:33:08.760 --> 00:33:13.920
So what I did is I went back and I said
it would be really cool if I could

00:33:13.990 --> 00:33:16.610
have a status posted in a chat room.

00:33:16.800 --> 00:33:19.780
So if everyone that's working on my
team could sit in the chat room and

00:33:19.780 --> 00:33:21.610
actually see the result of this build.

00:33:21.620 --> 00:33:26.060
So what I did here is I went back
and added Ruby Cocoa to this project.

00:33:26.170 --> 00:33:31.670
So in require OSX slash
Cocoa and then include OSX.

00:33:31.840 --> 00:33:34.250
This basically brings
Ruby Cocoa into the project.

00:33:35.020 --> 00:33:38.390
And now I'm going to require
the framework scripting bridge.

00:33:38.720 --> 00:33:42.150
So all I did here is I added another
simple class which just wraps around,

00:33:42.450 --> 00:33:45.280
again,
the scripting bridge APIs and iChat

00:33:45.280 --> 00:33:50.310
APIs to try to make it even easier
to basically set up a little bot.

00:33:51.320 --> 00:33:54.420
And again, here you see dictionary
with objects and keys.

00:33:54.420 --> 00:33:58.330
And I'm passing in just the first
service that I'm signed on to.

00:33:58.600 --> 00:34:03.370
And then passing it in a room
that when I create my bot,

00:34:03.370 --> 00:34:06.340
I'm basically assigning
the room at that point.

00:34:06.380 --> 00:34:09.820
And then I'm adding it
to iChat's text chats.

00:34:10.950 --> 00:34:16.780
And then I just created a simple method
to send message to this chat room.

00:34:16.780 --> 00:34:18.190
OK.

00:34:18.550 --> 00:34:23.740
So here we are again at the code
that you saw in the previous example.

00:34:24.090 --> 00:34:27.540
Only this time now,
I've added a global bot object,

00:34:27.570 --> 00:34:31.070
and then I've replaced each of
my print to the command line.

00:34:31.080 --> 00:34:32.720
But now this time,
I'm actually going to be sending

00:34:32.720 --> 00:34:34.970
the status to a chat room.

00:34:36.250 --> 00:34:37.480
Okay, so let's see here.

00:34:37.640 --> 00:34:40.000
I am in the chat room now.

00:34:40.020 --> 00:34:45.090
I'm going to go ahead
and run this example.

00:34:58.800 --> 00:35:00.800
Back to the slides.

00:35:00.840 --> 00:35:09.680
Okay, so there's actually online
documentation that can tell you

00:35:09.820 --> 00:35:14.800
how to integrate just dragging in
a .application file into Xcode.

00:35:14.800 --> 00:35:15.800
You can check that out.

00:35:15.800 --> 00:35:16.800
That's pretty cool.

00:35:16.800 --> 00:35:19.800
So you don't have to type in the command
line every time you want a header file.

00:35:19.800 --> 00:35:21.750
But it's easy enough.

00:35:21.810 --> 00:35:24.310
You can add the framework to any
of your applications and begin

00:35:24.310 --> 00:35:26.310
using the scripting bridge today.

00:35:27.220 --> 00:35:29.260
And if you're curious,
there's another session.

00:35:29.260 --> 00:35:34.120
Actually, it's today at 5, 5.25,
Cocoa Development Using Scripting,

00:35:34.120 --> 00:35:36.960
if you're interested in
more information about this.

00:35:39.190 --> 00:35:43.220
Okay, so we move on to the next part now,
which is actually responding to events.

00:35:43.320 --> 00:35:47.630
And unfortunately,
this only applies to AppleScript.

00:35:47.640 --> 00:35:51.220
But I wanted to walk you through
kind of what exactly that means,

00:35:51.250 --> 00:35:52.240
responding to events.

00:35:52.240 --> 00:35:54.860
Well, if you go to the Alerts
Pref pane in iChat,

00:35:54.860 --> 00:36:00.550
you can go and set up an event for any
number of the events that we have here.

00:36:00.560 --> 00:36:04.080
When I log in, when I log out,
say a buddy becomes available,

00:36:04.080 --> 00:36:07.090
message received in this case,
and you can attach an

00:36:07.250 --> 00:36:09.480
AppleScript handler to that event.

00:36:09.560 --> 00:36:12.390
So whenever that event occurs,
basically what iChat will do is

00:36:12.470 --> 00:36:15.380
go off and fire that handler.

00:36:15.380 --> 00:36:20.330
And of course, we provide a handler for
every one of these events.

00:36:20.340 --> 00:36:23.420
AVChat started,
invitation to share my screen,

00:36:23.420 --> 00:36:26.890
incoming file transfer,
and we're going to pass all

00:36:26.970 --> 00:36:30.240
the relevant objects to that
method so that you can use it.

00:36:30.340 --> 00:36:33.480
Say, for instance, you get a message,
you actually probably want to

00:36:33.480 --> 00:36:34.960
have the message there for you.

00:36:35.120 --> 00:36:37.910
So we'll hand that off to the handler.

00:36:38.410 --> 00:36:40.400
And here's just a simple example.

00:36:40.400 --> 00:36:43.110
Instead of saying tell application,
this time you're actually going to

00:36:43.160 --> 00:36:45.400
say using terms from application.

00:36:45.420 --> 00:36:48.400
And then you're going to have
inside of it onMessageReceived.

00:36:48.400 --> 00:36:53.400
And this is the same thing that you would
think of like a method onMessageReceived.

00:36:53.470 --> 00:36:57.400
And then the variables, the text,
the buddy, the chat.

00:36:57.400 --> 00:36:59.400
And the little bits,
the from here and the for,

00:36:59.400 --> 00:37:02.360
these are actually just required bits.

00:37:02.410 --> 00:37:05.480
It makes it a little easier to read,
of course, but to get these bits,

00:37:05.560 --> 00:37:07.400
to make sure you're putting
the right ones in there,

00:37:07.400 --> 00:37:09.390
you can go back and check
the iChat dictionary.

00:37:09.400 --> 00:37:12.390
It'll tell you what
you need to have there.

00:37:12.440 --> 00:37:14.380
And of course,
inside of this block of code,

00:37:14.480 --> 00:37:16.580
then it's set buddy name to
get the name of the buddy,

00:37:16.580 --> 00:37:18.400
then display dialog.

00:37:18.980 --> 00:37:22.400
Pretty straightforward there.

00:37:22.620 --> 00:37:25.750
Okay, so I'm going to walk
you through more demo.

00:37:27.540 --> 00:37:31.220
So I thought, wouldn't it be really cool
if I could do the same thing,

00:37:31.310 --> 00:37:33.450
starting to build,
but if I could do it from inside

00:37:33.450 --> 00:37:36.880
the chat room that I'm in right now?

00:37:37.370 --> 00:37:39.780
So I added a third step here.

00:37:42.680 --> 00:37:45.020
And again, now I thought,
what would be the best

00:37:45.070 --> 00:37:45.830
way to approach this?

00:37:45.910 --> 00:37:47.340
And I said, well,
I'm going to go ahead and

00:37:47.900 --> 00:37:49.760
use this mongrel HTTP server.

00:37:49.760 --> 00:37:52.640
And some of you who have used Ruby on
Rails might be familiar with this.

00:37:52.640 --> 00:37:55.160
It's just a simple little HTTP server.

00:37:55.330 --> 00:37:58.640
So I've added this into my project.

00:37:58.700 --> 00:38:06.380
And the only thing I've added here is
now every time I get a URL to start,

00:38:06.420 --> 00:38:09.280
I'm going to go ahead
and process this method.

00:38:09.800 --> 00:38:12.660
So all I've done is moved the same
code that was in the previous example

00:38:12.660 --> 00:38:17.220
into this block here that allows me
to run every time I get a URL start.

00:38:17.320 --> 00:38:21.380
So I can actually keep this running and
then start the build multiple times.

00:38:21.430 --> 00:38:23.610
But without having to worry about
adding a queue or anything like that,

00:38:23.650 --> 00:38:26.130
just for simplicity's sake today,
basically I just set up

00:38:26.130 --> 00:38:27.750
a little flag that says,
if I'm already building,

00:38:27.760 --> 00:38:29.000
go ahead and get out.

00:38:29.000 --> 00:38:30.750
But certainly, if you wanted this a
little bit more robust,

00:38:30.840 --> 00:38:32.260
you'd probably want to
have a queue that says,

00:38:32.260 --> 00:38:34.210
all right,
I'm going to build up a queue every

00:38:34.210 --> 00:38:36.380
time someone makes a start request.

00:38:37.150 --> 00:38:40.350
Okay, so then you're going to actually
hook up the other part of this,

00:38:40.540 --> 00:38:43.550
the message received part of it.

00:38:43.670 --> 00:38:47.910
This is the part that actually
your users are going to have to do.

00:38:48.800 --> 00:38:50.660
They will attach this little bit of code.

00:38:50.740 --> 00:38:54.240
So on Chat Room Received, again,
the message, the buddy, the chat,

00:38:54.310 --> 00:38:57.390
and then so I'm going to test to
say if the message is Start Build,

00:38:57.390 --> 00:39:00.900
I'm going to fire off curl,
run this shell script curl,

00:39:00.900 --> 00:39:02.190
basically starting the build.

00:39:02.320 --> 00:39:08.720
So then I'm going to go to iChat now.

00:39:11.760 --> 00:39:15.160
And I'm going to go to
Chatroom Message Received,

00:39:15.190 --> 00:39:19.050
and then I'm going to choose a script.

00:39:22.500 --> 00:39:24.430
Okay,
so now whenever I receive a message,

00:39:24.480 --> 00:39:27.360
it's actually going to go to this script.

00:39:27.870 --> 00:39:30.820
Let's see here.

00:39:30.830 --> 00:39:31.470
Start.

00:39:31.670 --> 00:39:34.270
Oh, I'm going to run this, actually.

00:39:42.470 --> 00:39:45.000
All right, so again,
it brings it back here.

00:39:45.020 --> 00:39:49.240
And then start build.

00:40:10.900 --> 00:40:14.600
Back to the slides.

00:40:14.630 --> 00:40:16.300
All right.

00:40:16.570 --> 00:40:20.480
So in summary, basically we have this
Instant Message Framework again,

00:40:20.540 --> 00:40:24.180
so if you want to incorporate
status in your application,

00:40:24.420 --> 00:40:27.880
and just like address book or mail,
if you think your application

00:40:27.880 --> 00:40:29.920
fits this kind of application,
then we have this

00:40:29.920 --> 00:40:32.940
Instant Message Framework
to show you status perfect.

00:40:33.010 --> 00:40:36.010
And if you want to add notifications
to your application in Apple Script,

00:40:36.150 --> 00:40:40.400
for instance-- or you can use
Apple Script in this case.

00:40:40.990 --> 00:40:44.900
And if you have any more feedback
from today or any questions,

00:40:44.990 --> 00:40:47.150
Matt Drance,
he's our sharing technologies evangelist.

00:40:47.280 --> 00:40:49.040
You can send him an email.

00:40:49.040 --> 00:40:51.420
Again,
you can check out the attendee site.

00:40:51.420 --> 00:40:54.360
I believe that there's sample code for
this session posted on there for today.

00:40:54.360 --> 00:40:57.900
And we certainly encourage all
of you to join our mailing list,

00:40:57.970 --> 00:40:58.710
iChat Dev.

00:40:58.720 --> 00:41:01.730
There's engineers from Apple on
there who can help you if you

00:41:01.730 --> 00:41:03.590
have any questions or concerns.

00:41:03.600 --> 00:41:06.580
And you might want to stick around.

00:41:06.580 --> 00:41:08.380
iChat Theater we're
going to talk about next.

00:41:09.080 --> 00:41:12.670
And there's an iChat lab
tomorrow morning at 9 a.m.

00:41:12.680 --> 00:41:15.020
All of us will be there to
answer any questions again that

00:41:15.030 --> 00:41:17.100
you might have or comments,
take any feedback.

00:41:17.100 --> 00:41:20.230
And then on Friday morning,
there's actually, if you're interested in

00:41:20.330 --> 00:41:22.430
more scripting bridge,
Apple Script Talks,

00:41:22.430 --> 00:41:25.210
there is an application
scripting automation lab.