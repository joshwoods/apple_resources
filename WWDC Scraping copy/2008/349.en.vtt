WEBVTT

00:00:21.100 --> 00:00:22.220
Hi, everybody.

00:00:22.220 --> 00:00:25.620
Welcome to session 349,
Creating Rich User Interfaces

00:00:25.950 --> 00:00:27.680
for Web Content in Safari.

00:00:27.910 --> 00:00:28.740
I'm Beth Dakin.

00:00:28.740 --> 00:00:31.100
I'm an engineer on the
Safari and WebKit team,

00:00:31.130 --> 00:00:33.860
and I would like to apologize
in advance for my amplified

00:00:34.030 --> 00:00:36.070
sniffles and potential sneezes.

00:00:36.580 --> 00:00:39.180
Before we begin,
I would like to get to know

00:00:39.180 --> 00:00:41.340
you all a little bit better.

00:00:41.340 --> 00:00:45.700
So I'd like a show of hands for
everyone in the room who considers

00:00:46.040 --> 00:00:50.730
themselves to be a professional
or really advanced web developer.

00:00:50.890 --> 00:00:52.640
Okay, we have a lot of you.

00:00:52.690 --> 00:00:54.730
You know more than I do.

00:00:54.930 --> 00:00:57.270
But I'm going to tell
you about new things.

00:00:57.470 --> 00:01:01.510
How about novice web
developers or just for fun,

00:01:01.580 --> 00:01:04.380
people who play around
with web development?

00:01:04.450 --> 00:01:05.820
Okay, a few of you too.

00:01:05.820 --> 00:01:12.490
How many of you attended the
WebKit overview session this morning?

00:01:13.140 --> 00:01:14.470
Fair number.

00:01:14.800 --> 00:01:18.540
How many of you have designed a web page,
a widget or another piece of

00:01:18.540 --> 00:01:22.950
web content specifically with
Safari or WebKit in mind?

00:01:23.400 --> 00:01:25.300
A lot of you, okay.

00:01:25.300 --> 00:01:29.340
And finally, how many of you have
downloaded a web kit nightly?

00:01:29.610 --> 00:01:31.300
Nice, excellent.

00:01:31.360 --> 00:01:34.900
I think this presentation will
really address all of those groups.

00:01:35.020 --> 00:01:37.880
For the more advanced web developers,
I'll be telling you about

00:01:37.880 --> 00:01:40.540
new features that you can
add to your arsenal of tools.

00:01:40.540 --> 00:01:43.400
And for the more novice developers,
none of this stuff is really

00:01:43.450 --> 00:01:45.020
that difficult to understand.

00:01:45.020 --> 00:01:48.340
In fact, that's the beauty of
some of these features,

00:01:48.340 --> 00:01:53.120
that they achieve great effects in your
web content with very simple syntax.

00:01:53.690 --> 00:01:55.840
So all of the features that
I'm going to tell you about

00:01:55.840 --> 00:01:59.540
today are really about adding
sophistication to your user interface.

00:01:59.600 --> 00:02:02.600
A lot of these things are whizzy
effects that were previously

00:02:02.600 --> 00:02:05.910
impossible in web content,
or only possible with a lot of

00:02:05.910 --> 00:02:09.140
really complicated JavaScript,
making these effects more

00:02:09.280 --> 00:02:12.120
prohibitive for more novice users.

00:02:12.310 --> 00:02:15.380
But now these things are
really elegant and simple in

00:02:15.490 --> 00:02:18.750
standards-friendly HTML and CSS.

00:02:19.030 --> 00:02:22.390
So specifically,
we'll start by talking about a really

00:02:22.540 --> 00:02:25.970
exciting new feature in WebKit,
CSS transforms.

00:02:26.040 --> 00:02:28.280
This is a feature that was
pioneered here at Apple,

00:02:28.300 --> 00:02:30.700
and it's undergoing the
standardization process now.

00:02:30.700 --> 00:02:35.110
It allows you to apply any affine
transform to any element in your page,

00:02:35.400 --> 00:02:36.680
and it's really cool.

00:02:37.600 --> 00:02:39.480
Then I'll be telling
you about transitions.

00:02:39.480 --> 00:02:42.890
Transitions are a really simple
form of animation that you

00:02:42.990 --> 00:02:44.410
can do strictly through CSS.

00:02:44.520 --> 00:02:48.490
The syntax is incredibly simple,
and it just allows you to animate

00:02:48.520 --> 00:02:52.950
from one state to another instead of
quickly jerking to that new state.

00:02:53.030 --> 00:02:56.160
And like transforms,
transitions were pioneered here

00:02:56.160 --> 00:02:59.810
at Apple and are now undergoing
the standardization process.

00:02:59.840 --> 00:03:02.620
Then we'll talk about fonts and text.

00:03:02.620 --> 00:03:04.950
Even something as simple as the
text on your page can really

00:03:04.950 --> 00:03:07.580
become a lot more sophisticated
with some of our new features.

00:03:07.580 --> 00:03:11.650
Specifically,
I'll be telling you about web fonts,

00:03:11.650 --> 00:03:16.560
which are a part of CSS3,
and a few new styling techniques.

00:03:17.400 --> 00:03:20.190
And finally,
we'll talk about web accessibility.

00:03:20.200 --> 00:03:22.140
I found that a lot of
developers in general,

00:03:22.140 --> 00:03:24.800
not just web developers,
aren't super familiar with

00:03:24.800 --> 00:03:26.220
the idea of accessibility.

00:03:26.290 --> 00:03:29.340
But basically,
the idea of web accessibility is that

00:03:29.340 --> 00:03:34.660
the content that you create should
be accessible and usable to everyone,

00:03:34.670 --> 00:03:36.660
regardless of any potential disabilities.

00:03:36.760 --> 00:03:40.050
So in some cases,
that means making your website and web

00:03:40.050 --> 00:03:44.700
content more keyboard accessible for
users that may have mobility impairments.

00:03:44.830 --> 00:03:47.860
And in some cases,
that means making your web content work

00:03:47.990 --> 00:03:51.200
better with a program like a screen
reader that attempts to read the web

00:03:51.370 --> 00:03:55.820
content to a user that has trouble
seeing it or can't see it at all.

00:03:56.260 --> 00:03:59.800
So everyone in this room,
I feel confident,

00:03:59.800 --> 00:04:01.500
is familiar with Safari.

00:04:01.600 --> 00:04:03.450
It's the built-in browser on Mac OS X.

00:04:03.750 --> 00:04:07.820
And I know that a lot of you seem
to have downloaded WebKit Nightly's,

00:04:07.820 --> 00:04:11.320
and a lot of you were even at the session
this morning about the WebKit overview.

00:04:11.320 --> 00:04:15.280
But I'm going to give you
a very brief overview now,

00:04:15.280 --> 00:04:19.840
just because I found that a lot
of people who have downloaded

00:04:19.930 --> 00:04:22.110
WebKit Nightly's still struggle with
the concept of exactly what WebKit is.

00:04:22.800 --> 00:04:25.360
WebKit is the engine that
sits underneath Safari.

00:04:25.400 --> 00:04:27.970
It's a framework that takes
care of dealing with all of the

00:04:27.970 --> 00:04:29.350
web content that you create.

00:04:29.540 --> 00:04:32.030
So this is what takes
care of downloading,

00:04:32.060 --> 00:04:35.080
loading, parsing,
interpreting and displaying

00:04:35.410 --> 00:04:38.160
all of your HTML,
CSS and JavaScript and making

00:04:38.160 --> 00:04:41.880
sure it's correctly interactable
and all of that good stuff.

00:04:42.260 --> 00:04:47.010
So WebKit is the part of Safari that
deals with what you create.

00:04:47.990 --> 00:04:50.790
One of the many awesome things
about Safari is that it is currently

00:04:50.790 --> 00:04:54.700
available on three platforms,
Windows, Mac OS X, and iPhone,

00:04:54.700 --> 00:04:57.380
and WebKit is the same everywhere.

00:04:57.380 --> 00:04:59.670
Of course,
there are minor platform differences

00:04:59.810 --> 00:05:02.670
to account for things like a touch
being different from a click,

00:05:02.730 --> 00:05:06.620
and all of these applications sometimes
have different release cycles,

00:05:06.620 --> 00:05:10.280
so the exact version of WebKit they
release is sometimes slightly different,

00:05:10.280 --> 00:05:12.900
but there are documentations
for the fine details.

00:05:12.900 --> 00:05:18.130
The main point is that you can remain
confident that if you spend time making

00:05:18.130 --> 00:05:21.560
your site work in one version of Safari,
it will most likely,

00:05:21.560 --> 00:05:25.720
almost certainly work in all of them
because WebKit is the same everywhere.

00:05:27.500 --> 00:05:30.590
And finally, WebKit is open source,
completely open source.

00:05:30.710 --> 00:05:33.230
The code is available,
but we have a large community around

00:05:33.310 --> 00:05:35.020
the open source project as well.

00:05:35.020 --> 00:05:39.170
WebKit.org is really the portal
for our open source project.

00:05:39.240 --> 00:05:41.500
You can get to anything
that's open source from there.

00:05:41.500 --> 00:05:42.960
We have a really active community.

00:05:42.960 --> 00:05:46.010
And also, if you are really interested
in the features that I'm

00:05:46.100 --> 00:05:48.790
telling you about today,
well, if you follow our blog,

00:05:48.790 --> 00:05:51.740
then you would have known about
all of these features for a few

00:05:51.740 --> 00:05:55.240
months or even a year now anyway,
because we always post on our blog when

00:05:55.240 --> 00:05:56.960
we have cool new features in the engine.

00:05:57.400 --> 00:06:01.700
So it's a really great place
to keep in touch with us.

00:06:01.920 --> 00:06:05.880
So first I'm going to talk
to you about CSS transforms.

00:06:05.960 --> 00:06:09.100
As I mentioned earlier,
this is a feature that allows you,

00:06:09.100 --> 00:06:13.340
via simple CSS syntax,
to specify any affine transform

00:06:13.610 --> 00:06:15.830
on any element in your page.

00:06:15.960 --> 00:06:20.730
So just to go back to high school math,
affine transforms are translate, scale,

00:06:20.730 --> 00:06:24.900
skew and rotate,
all in a two-dimensional space.

00:06:25.050 --> 00:06:28.760
These are actually this feature,
all of these things are already

00:06:28.760 --> 00:06:30.390
in a version of Shipping Safari.

00:06:30.400 --> 00:06:33.500
They're already in Safari 3.1,
which is what mostly

00:06:33.600 --> 00:06:39.970
everybody is using anyway,
which is really cool.

00:06:40.410 --> 00:06:44.140
My friend recently went to Hawaii and
she took all these pictures and asked

00:06:44.270 --> 00:06:49.400
me to help her put together a website
for her to show all of her friends and

00:06:49.460 --> 00:06:50.730
family all the pictures that she took.

00:06:50.800 --> 00:06:54.330
So I whipped this really
incredibly simple website up that

00:06:54.330 --> 00:06:56.240
doesn't have much jazz to it.

00:06:56.360 --> 00:06:59.530
I wanted it to look more
like real-life photos,

00:06:59.590 --> 00:07:02.660
so I gave the photos
some really simple CSS,

00:07:02.660 --> 00:07:06.180
just some padding and a black
border to get that sort of white

00:07:06.180 --> 00:07:08.260
border with a black edge thing.

00:07:09.200 --> 00:07:11.190
To make it look more like a
photo in real life if you had

00:07:11.270 --> 00:07:12.840
it printed out at the drugstore.

00:07:12.840 --> 00:07:15.030
But this layout doesn't look
anything like real life,

00:07:15.030 --> 00:07:15.480
right?

00:07:15.480 --> 00:07:16.850
It's just like a jumble of photos.

00:07:16.860 --> 00:07:19.780
And I achieved it just with
one line of CSS float left,

00:07:19.780 --> 00:07:22.770
which just had all of the
photos lined up like this.

00:07:22.780 --> 00:07:26.740
But again, this talk is about adding
sophistication to your user interface.

00:07:26.750 --> 00:07:30.160
So we're going to make this a lot more
sophisticated with CSS transforms.

00:07:30.160 --> 00:07:34.150
And my goal here with the particular
sophistication that I wanted to

00:07:34.150 --> 00:07:37.360
achieve was to create something
that looked like real life.

00:07:38.100 --> 00:07:40.550
I like the way I have the
white and black border here.

00:07:40.640 --> 00:07:42.470
So.

00:07:44.120 --> 00:07:45.410
First,
we're going to start with translate.

00:07:45.530 --> 00:07:47.340
Translate is a really
simple transformation.

00:07:47.600 --> 00:07:49.400
It simply shifts an object.

00:07:49.410 --> 00:07:53.280
You can shift in just the horizontal
space with translate X or just

00:07:53.280 --> 00:07:56.880
vertically with translate Y or in both
dimensions at once with translate.

00:07:56.880 --> 00:08:01.650
The CSS property accepts a length
or a percentage where the percentage

00:08:02.000 --> 00:08:06.390
represents that percentage of
the border box of the element.

00:08:07.000 --> 00:08:08.650
This is the CSS.

00:08:09.070 --> 00:08:12.790
Again, you can see the CSS I added to
the image already that I mentioned

00:08:12.790 --> 00:08:16.420
with the border to give it the
white border with the black edge.

00:08:16.420 --> 00:08:20.250
And then I just applied this dash
webkit transform translate X.

00:08:20.250 --> 00:08:22.860
Don't let the dash
webkit prefix scare you.

00:08:22.860 --> 00:08:24.560
Some of you may have seen this before.

00:08:24.560 --> 00:08:27.060
But this is just something
that we always do,

00:08:27.060 --> 00:08:29.900
all browsers do,
with experimental features.

00:08:29.900 --> 00:08:34.280
This is just to symbolize that this is
still a draft version of this feature.

00:08:34.280 --> 00:08:37.900
It hasn't been finalized in
any official specification.

00:08:37.900 --> 00:08:41.670
Or the official specification
has not been finalized.

00:08:41.980 --> 00:08:44.700
So Firefox does the same thing
with the dash mods prefix.

00:08:45.110 --> 00:08:46.900
Okay, back to the code.

00:08:46.900 --> 00:08:49.710
We just are going to translate
by 20 pixels just in the

00:08:49.820 --> 00:08:51.750
X horizontal dimension.

00:08:51.900 --> 00:08:57.520
So that's going to take this photo and
just move it slightly to the right.

00:08:58.330 --> 00:09:02.820
So if we look back at that CSS,
what I'm going to do is I'm going

00:09:02.840 --> 00:09:06.960
to use JavaScript to apply this
incrementally to my series of photos

00:09:07.180 --> 00:09:11.970
so that each photo is moved 20 pixels
farther to the right than the last.

00:09:12.210 --> 00:09:17.350
And without CSS, I can achieve this look,
which already is a big improvement,

00:09:17.360 --> 00:09:19.280
I think, over what I had before.

00:09:19.340 --> 00:09:24.110
And it looks more like a bunch of
photos sort of spread across on a table.

00:09:25.600 --> 00:09:27.560
So scale is what I'd
like to talk about next.

00:09:27.770 --> 00:09:31.050
Also very easy to understand,
just changes the size of an object

00:09:31.180 --> 00:09:33.380
by whatever scale factor you specify.

00:09:33.380 --> 00:09:36.050
You can stretch an object
horizontally with scale X,

00:09:36.240 --> 00:09:39.500
stretch vertically with scale Y,
or stretch evenly in both

00:09:39.640 --> 00:09:41.880
dimensions with just scale.

00:09:41.900 --> 00:09:46.740
A negative input will flip an object
and a fractional input will shrink it.

00:09:47.900 --> 00:09:51.800
So here I'm going to use my
WebKit transform to scale

00:09:51.800 --> 00:09:53.470
with a scale factor of 0.15.

00:09:53.470 --> 00:09:56.390
So that's going to create this tiny,
tiny, tiny photo.

00:09:56.400 --> 00:09:58.480
So it's going to look like this.

00:09:59.160 --> 00:10:02.610
I added in a translation here, though,
and I'm going to do my same trick

00:10:03.000 --> 00:10:06.830
where I apply this translation and
scale factor incrementally with

00:10:06.920 --> 00:10:10.880
JavaScript so that each photo will be
20 pixels farther to the right than

00:10:10.880 --> 00:10:12.760
the last one and slightly larger.

00:10:12.760 --> 00:10:16.140
So that's going to take the
user interface that I created

00:10:16.240 --> 00:10:20.730
before and create this sort of
three-dimensional effect using scale.

00:10:21.460 --> 00:10:24.860
So now instead of looking like I have a
bunch of photos spread out on the table,

00:10:24.860 --> 00:10:27.410
it's sort of like they're
standing up and sort of going

00:10:27.410 --> 00:10:29.240
backwards from where I'm sitting.

00:10:31.810 --> 00:10:33.150
Rotate.

00:10:33.160 --> 00:10:35.360
Also very simple,
it just rotates an object

00:10:35.730 --> 00:10:36.930
by a specified angle.

00:10:36.940 --> 00:10:41.680
The CSS property accepts the
CSS angle in degrees or radian units.

00:10:43.240 --> 00:10:46.460
So here I am applying a
negative 30 degree rotation,

00:10:46.510 --> 00:10:50.080
which is going to rotate my
image 30 degrees counterclockwise

00:10:50.180 --> 00:10:51.780
since it's a negative angle.

00:10:51.910 --> 00:10:54.420
And that's just going to
give me this jaunty photo.

00:10:54.510 --> 00:10:58.840
And I'm going to do the same thing
again where I apply this transform

00:10:59.260 --> 00:11:03.140
incrementally using JavaScript and
changing the angle slightly every time.

00:11:03.200 --> 00:11:07.670
And I can get this really cool
pile effect of all of my photos.

00:11:13.140 --> 00:11:16.550
Finally, SKU.

00:11:16.990 --> 00:11:19.060
SKU, I think,
is a little -- it's a little weirder.

00:11:19.060 --> 00:11:21.350
It's a little harder to
wrap your brain around,

00:11:21.350 --> 00:11:21.940
I think.

00:11:21.940 --> 00:11:24.340
It just shifts an object
at a specified angle.

00:11:24.450 --> 00:11:28.470
So this first pink box is SKU'd
in both the horizontal and

00:11:28.470 --> 00:11:30.890
vertical dimensions equally.

00:11:31.250 --> 00:11:35.880
And the second one is
SKU'd just with SKU X,

00:11:35.880 --> 00:11:39.080
just horizontally, and the last one is
SKU'd with just SKU Y.

00:11:39.420 --> 00:11:43.680
So if I just apply a simple
negative 15 degree skew to my image,

00:11:43.680 --> 00:11:47.100
I'm going to get this little
parallelogram sort of looking image.

00:11:47.100 --> 00:11:50.110
So when I first was
messing around with this,

00:11:50.250 --> 00:11:54.050
I saw this first test that I ran,
and I kind of struggled thinking like,

00:11:54.200 --> 00:11:59.460
oh, how can I turn this into some kind of
real-world looking photo user interface?

00:11:59.460 --> 00:12:01.190
Like,
I don't think skew's right for this.

00:12:01.240 --> 00:12:03.240
But I started chaining
together these transforms,

00:12:03.240 --> 00:12:05.490
just messing around with them,
and I really quickly came up

00:12:05.490 --> 00:12:07.900
with something that I actually
thought was pretty cool.

00:12:08.450 --> 00:12:10.250
So I'm going to show you what I did.

00:12:10.300 --> 00:12:14.500
First, I added a negative 15 degree
rotation along with the skew,

00:12:14.500 --> 00:12:16.760
so that sort of tilts it up a little.

00:12:16.760 --> 00:12:20.690
And I started to think that maybe I could
line up the photos in a row like this.

00:12:20.880 --> 00:12:23.260
So I added in a translation
and a second photo,

00:12:23.260 --> 00:12:26.240
and I think it sort of gets
a three-dimensional effect,

00:12:26.240 --> 00:12:28.180
kind of like you got with scale.

00:12:28.180 --> 00:12:31.620
And I think it's easier to see
when you add in even more photos.

00:12:31.620 --> 00:12:35.090
They sort of look like they're lined up
like Rockettes about to do a kick line.

00:12:37.350 --> 00:12:40.650
But I really think, you know,
the three-dimensional thing here

00:12:40.650 --> 00:12:44.180
is still a little bit of a stretch,
more so than the scale version.

00:12:44.180 --> 00:12:46.280
So I added a box shadow.

00:12:46.280 --> 00:12:50.160
This is another really cool feature
in Safari that adds a shadow

00:12:50.240 --> 00:12:52.160
to any element in your page.

00:12:52.510 --> 00:12:53.660
Really simple syntax.

00:12:53.720 --> 00:12:55.400
I just specified a color for the shadow.

00:12:55.400 --> 00:12:57.280
Here I'm using black with some opacity.

00:12:57.280 --> 00:12:59.940
And then a left and right
offset and a blur radius.

00:13:00.020 --> 00:13:03.990
So that's going to take these photos from
looking like this to looking like this.

00:13:04.080 --> 00:13:06.230
And here I really think
we've achieved another,

00:13:06.230 --> 00:13:07.260
you know, three-dimensional.

00:13:07.350 --> 00:13:11.500
Real-world looking user interface with,
like, one line of CSS.

00:13:20.810 --> 00:13:24.070
So one of the really awesome things
about transforms is that they are

00:13:24.070 --> 00:13:27.510
so easy to use that people are sort
of playing around with them already,

00:13:27.520 --> 00:13:30.540
even though our implementation is
just at the beginning and it's just

00:13:30.550 --> 00:13:31.940
undergoing the standardization process.

00:13:31.940 --> 00:13:33.800
This is a cool example, I think.

00:13:33.840 --> 00:13:38.480
The developer over at cupodev.co.uk
made this little analog clock using

00:13:38.480 --> 00:13:41.400
CSS transforms and JavaScript animations.

00:13:42.060 --> 00:13:45.850
I emailed him recently asking
if I could use a screenshot of

00:13:45.850 --> 00:13:47.760
his site in my presentation.

00:13:47.770 --> 00:13:51.400
And he explained to me that he
decided to make this clock after

00:13:51.400 --> 00:13:56.220
he learned about transforms because
there's an almost identical clock on

00:13:56.220 --> 00:13:58.200
the front page of the BBC website.

00:13:58.210 --> 00:14:00.390
And it's developed with Flash.

00:14:00.660 --> 00:14:03.120
And he just thought that it
seemed like such a simple thing.

00:14:03.120 --> 00:14:06.630
You should be able to
do it with simple HTML,

00:14:06.630 --> 00:14:08.460
CSS and JavaScript.

00:14:08.470 --> 00:14:10.700
It should be something
that's straightforward.

00:14:10.710 --> 00:14:12.060
And so he made his own version.

00:14:12.060 --> 00:14:16.430
the code is much simpler
and it's really cool.

00:14:17.600 --> 00:14:20.720
Okay, CSS transitions.

00:14:21.130 --> 00:14:28.060
CSS transitions let you
animate a change in state.

00:14:28.210 --> 00:14:32.920
So, let's say you wanted this ball
on the other side of the slide.

00:14:33.540 --> 00:14:36.470
Instead of just jumping there,
we can easily make it look like

00:14:36.470 --> 00:14:38.700
it rolled across the slide.

00:14:38.920 --> 00:14:42.420
So in the context of this photo
page we've been building up,

00:14:42.420 --> 00:14:46.470
one of the limitations of all of
these different user interfaces that

00:14:46.580 --> 00:14:50.040
we've created with CSS transforms,
compared with the original

00:14:50.040 --> 00:14:52.430
one that I showed you,
is that we need to add a way to

00:14:52.430 --> 00:14:54.560
navigate through these photos,
right?

00:14:54.560 --> 00:14:57.170
Right now we can only
see one photo at a time,

00:14:57.170 --> 00:15:01.370
and in my original sort of sloppy-looking
implementation where I just

00:15:01.370 --> 00:15:05.240
floated all the photos to the left,
we could see them all at once at least

00:15:05.240 --> 00:15:07.100
and just scroll through the document.

00:15:08.150 --> 00:15:10.320
So the most straightforward thing to do,
I think,

00:15:10.370 --> 00:15:13.580
would be to add an on-click handler and
have the user click through the photos.

00:15:13.580 --> 00:15:19.430
So a common thing to do in a situation
like this would be to have the on-click

00:15:19.430 --> 00:15:21.860
handler change certain CSS properties.

00:15:21.860 --> 00:15:25.160
So I might want it to set the
display property of the image

00:15:25.160 --> 00:15:27.000
that you clicked on to none.

00:15:27.000 --> 00:15:31.490
So you would get this really quick jerky
movement if you did something like that,

00:15:31.630 --> 00:15:33.760
like from here to here, and that's it.

00:15:33.940 --> 00:15:38.060
So something else I could
do is... I don't want the

00:15:38.100 --> 00:15:39.600
image to disappear entirely.

00:15:39.600 --> 00:15:41.600
Maybe I want it to stay
on screen somewhere.

00:15:41.740 --> 00:15:46.810
Maybe I want it to get a little bit
smaller using a fractional scale

00:15:46.920 --> 00:15:51.350
factor and maybe jump to the upper
right-hand corner of the screen.

00:15:51.460 --> 00:15:55.270
So that would give us another sort of
jerky movement like that really quick.

00:15:55.400 --> 00:15:59.550
So this is exactly what CSS transitions
let you do more elegantly

00:15:59.550 --> 00:16:01.460
in a more sophisticated way.

00:16:01.600 --> 00:16:04.700
You can animate from an old
state to a new state over time.

00:16:04.800 --> 00:16:06.700
If you're familiar with animations
from the graphics world,

00:16:06.760 --> 00:16:10.700
you can think of transitions as an
animation with exactly two keyframes,

00:16:10.740 --> 00:16:13.700
where the two keyframes are the
beginning state and the ending state,

00:16:13.700 --> 00:16:17.700
and WebKit takes care of everything in
between in terms of the actual animation.

00:16:17.700 --> 00:16:21.670
So let me show you just how
easy this is to specify.

00:16:21.760 --> 00:16:24.700
First, you want to specify a
transition property.

00:16:24.700 --> 00:16:28.590
This is a property in CSS that you
want to animate whenever it changes.

00:16:28.700 --> 00:16:31.120
So for instance,
there are all kinds of things

00:16:31.200 --> 00:16:31.700
that you could animate.

00:16:31.700 --> 00:16:35.970
To give you just a few examples,
you could animate border size, rotation,

00:16:36.020 --> 00:16:38.990
rotation, or opacity.

00:16:39.840 --> 00:16:42.640
So if I want to specify
an opacity transition,

00:16:42.640 --> 00:16:47.500
I would just on my image tag declare
WebKitTransitionPropertyOpacity.

00:16:47.580 --> 00:16:52.890
So this is saying any time the
value of the opacity property

00:16:52.990 --> 00:16:55.210
changes for any of my images,
since I've specified this

00:16:55.310 --> 00:16:58.750
with the image tag selector,
whenever that changes,

00:16:58.750 --> 00:17:03.310
I want it to animate instead of just
immediately changing to the new state.

00:17:03.980 --> 00:17:05.400
Then you want to specify a duration.

00:17:05.400 --> 00:17:08.400
This will default to zero,
so change it or it will be just the same

00:17:08.400 --> 00:17:10.120
as not defining a transition at all.

00:17:10.410 --> 00:17:12.390
So here I've changed it to three seconds.

00:17:12.510 --> 00:17:15.090
I want a nice long transition.

00:17:15.770 --> 00:17:18.140
And finally, if you want,
you can specify a

00:17:18.140 --> 00:17:19.800
transition timing function.

00:17:19.850 --> 00:17:21.550
This will default to ease,
so you don't need to

00:17:21.560 --> 00:17:22.700
specify anything here.

00:17:22.700 --> 00:17:25.800
And there are a lot of other
built-in functions like ease in,

00:17:25.910 --> 00:17:29.050
ease out, ease in-out, linear,
that will give you a slightly

00:17:29.160 --> 00:17:32.100
different look in terms of exactly
how the animation proceeds.

00:17:32.100 --> 00:17:35.220
And if you really want to,
you can even provide your

00:17:35.220 --> 00:17:38.840
own cubic bezier as a path
for your animation to follow.

00:17:38.840 --> 00:17:42.990
So here's an example where I'm
simply changing the default timing

00:17:42.990 --> 00:17:45.110
function from ease to ease in.

00:17:46.970 --> 00:17:49.900
So transitions are really
best understood seen,

00:17:49.900 --> 00:17:54.070
so I would like to invite Vicki Murley,
our evangelist extraordinaire,

00:17:54.110 --> 00:17:57.710
on stage to show you some transitions.

00:18:10.800 --> 00:18:11.800
Thanks, Beth.

00:18:11.800 --> 00:18:16.280
So Beth has given you a great
overview of what's possible with

00:18:16.560 --> 00:18:18.620
CSS transforms and transitions.

00:18:18.800 --> 00:18:22.120
So now let's look at a concrete example.

00:18:22.390 --> 00:18:28.790
So if we load up this first example here,
and we take a look at the code that

00:18:29.910 --> 00:18:29.910
we used to implement this example,

00:18:30.390 --> 00:18:32.640
It's really pretty straightforward.

00:18:32.900 --> 00:18:35.260
As you can see,
there's not a whole lot here.

00:18:35.300 --> 00:18:38.180
I've got a couple
CSS declarations for the body,

00:18:38.300 --> 00:18:41.100
the heading on the page,
and the images on this page.

00:18:41.100 --> 00:18:47.160
I've got some HTML markup at the bottom
that shows the body and my heading.

00:18:47.160 --> 00:18:50.120
And in the middle here,
I just have one JavaScript function

00:18:50.170 --> 00:18:51.620
to stack up these photos.

00:18:52.420 --> 00:18:56.000
And as Beth said,
all that we're doing here is

00:18:56.000 --> 00:18:59.660
we have an array of our photos,
and as we go through that array,

00:18:59.660 --> 00:19:02.640
we create an image element
for each item in the array.

00:19:02.640 --> 00:19:07.160
We have a string that we're
using for our transform.

00:19:07.160 --> 00:19:11.900
We're setting the attributes on our
photo as we go through the array.

00:19:14.000 --> 00:19:19.000
and eventually we append
that photo to the document.

00:19:19.110 --> 00:19:22.200
And then we're starting at a
rotation of negative 30 degrees,

00:19:22.200 --> 00:19:25.560
so maybe about 10 o'clock,
and we're incrementing by 5

00:19:25.560 --> 00:19:28.200
degrees as we lay out these photos.

00:19:28.200 --> 00:19:32.300
And when we arrive at 30 degrees,
we reset so that we don't end up

00:19:32.380 --> 00:19:35.200
with any photos that are upside down.

00:19:35.200 --> 00:19:39.660
So in practice,
if we inspect this element,

00:19:40.000 --> 00:19:42.380
Oh, it's not enabled.

00:19:42.530 --> 00:19:43.400
We're not going to do that.

00:19:43.460 --> 00:19:48.020
You would see that each of these,
we have a bunch of image tags in this

00:19:48.020 --> 00:19:52.520
document that have the appropriate
CSS settings that I just went over.

00:19:52.520 --> 00:20:00.000
So, right now, there are no effects
associated with this document.

00:20:00.000 --> 00:20:02.550
And if we wanted to,
since this looks like a

00:20:02.550 --> 00:20:05.740
real-world stack of photos,
one effect that we might want to add to

00:20:05.840 --> 00:20:09.400
iterate through these photos is sort of,
if I wanted to pick up these

00:20:09.480 --> 00:20:13.200
photos and kind of toss one over
to the upper right-hand corner.

00:20:13.320 --> 00:20:17.450
So, that's the functionality that I'm
going to add during this demo.

00:20:17.660 --> 00:20:20.700
So, again, taking a look at this code.

00:20:20.950 --> 00:20:27.220
There are three very simple steps
that I am going to do to add this

00:20:27.320 --> 00:20:31.610
effect of picking up the photo
and tossing it off to the corner.

00:20:31.650 --> 00:20:37.000
The first thing I'm going to do is add
a few CSS properties to this image tag.

00:20:37.030 --> 00:20:39.740
As you can see,
I've added the WebKit transition

00:20:39.740 --> 00:20:41.420
property property.

00:20:41.450 --> 00:20:45.140
And here I'm specifying which
properties I would like to animate.

00:20:45.140 --> 00:20:48.740
In this case,
WebKit transform top and right.

00:20:48.740 --> 00:20:52.500
I've also specified the duration,
which should be one second.

00:20:52.510 --> 00:20:55.300
I could have specified
different durations for all

00:20:55.300 --> 00:20:58.390
three of these properties,
like one second for the transform,

00:20:58.390 --> 00:21:01.190
three seconds for top,
and four seconds for right.

00:21:01.210 --> 00:21:03.390
But that doesn't really make
sense because I want to make

00:21:03.390 --> 00:21:06.680
just one cohesive animation up
to that upper right-hand corner.

00:21:06.680 --> 00:21:09.020
So I want them all to be one second.

00:21:09.880 --> 00:21:15.130
The next thing I'm going to do is
add a function here at the bottom.

00:21:15.190 --> 00:21:19.540
Many of you are probably familiar
with animating CSS properties,

00:21:19.610 --> 00:21:21.830
so this will probably look very familiar.

00:21:21.990 --> 00:21:27.080
Here, I'm just saying,
when I call this function twirlAway,

00:21:27.120 --> 00:21:31.060
I want to set my transform
to rotate 360 degrees,

00:21:31.120 --> 00:21:34.570
I want to scale down a little bit,
and I want to set the top

00:21:34.570 --> 00:21:38.370
and right attributes to 5,
so that that photo ends up 5

00:21:38.370 --> 00:21:42.680
pixels from the top and 5 pixels
from the right of the screen.

00:21:42.730 --> 00:21:47.680
The last thing I have to
do is add my event handler.

00:21:47.930 --> 00:21:51.630
Before I append this
element to the document,

00:21:51.630 --> 00:21:54.950
and all I'm doing is saying,
when I click on this photo,

00:21:55.430 --> 00:21:58.830
call my function down below twirl away.

00:21:59.030 --> 00:22:01.300
So I'm going to save.

00:22:03.200 --> 00:22:05.260
This is a photo of this in Safari.

00:22:05.530 --> 00:22:09.300
And now you'll see that when
I click on these images,

00:22:09.300 --> 00:22:12.600
they have a great rotation
up to the right-hand corner.

00:22:17.900 --> 00:22:21.660
I also wanted to show you,
I'm going to change this duration

00:22:21.660 --> 00:22:25.570
to be a little bit longer,
to show you that

00:22:25.860 --> 00:22:29.080
I can also do multiple
animations at once.

00:22:29.090 --> 00:22:34.500
I don't have to wait for one animation
to finish for the next one to begin.

00:22:41.300 --> 00:22:43.890
So that's our first example
with our stack of photos.

00:22:44.060 --> 00:22:50.410
Let's look at one more example with
this example that Beth went through

00:22:50.410 --> 00:22:55.340
with our photos that are sort of
stacked on their side and in a row here.

00:22:55.700 --> 00:22:58.770
So again,
if I wanted to look through these photos,

00:22:58.770 --> 00:23:02.170
maybe I want to lift one out of
the stack and have it scale up

00:23:02.240 --> 00:23:04.220
a little bit and face the user.

00:23:04.450 --> 00:23:07.880
So again, looking at this code--

00:23:09.360 --> 00:23:15.170
I'm going to make just three changes,
just like I did last time.

00:23:15.220 --> 00:23:19.720
The first thing I'm going to
do is add my CSS properties.

00:23:19.780 --> 00:23:23.100
This time I'm specifying for
a WebKit transition property.

00:23:23.100 --> 00:23:24.080
I'm just saying all.

00:23:24.370 --> 00:23:28.890
So any properties that can
be animated will be animated

00:23:28.890 --> 00:23:31.380
if you use this shortcut,
all.

00:23:31.590 --> 00:23:34.170
My transition duration
is half a second here,

00:23:34.290 --> 00:23:36.260
partial seconds work.

00:23:36.290 --> 00:23:40.900
And I set my WebKit transition
timing function to ease in/out,

00:23:40.900 --> 00:23:43.920
different from the default.

00:23:44.190 --> 00:23:48.720
Next, just like last time, step two,
I'm adding some functions

00:23:49.330 --> 00:23:54.340
here to say pull from stack,
sets my transform,

00:23:54.340 --> 00:23:58.080
basically turning it towards me,
the rotation is zero degrees,

00:23:58.080 --> 00:24:00.930
the skew is zero degrees,
and I'm scaling it up a little bit.

00:24:02.100 --> 00:24:07.370
Next, just like last time, step two,
I'm adding some functions

00:24:07.450 --> 00:24:11.450
here to say pull from stack,
sets my transform,

00:24:11.450 --> 00:24:16.830
basically turning it towards me,
the rotation is zero degrees,

00:24:16.830 --> 00:24:22.300
the skew is zero degrees,
and I'm scaling it up a little bit.

00:24:22.430 --> 00:24:25.910
Lastly,
step three is adding the event listeners.

00:24:26.180 --> 00:24:28.620
Took up this functionality.

00:24:28.670 --> 00:24:31.490
MouseOver is going to pull
the photo out of the stack,

00:24:31.490 --> 00:24:36.180
and MouseOut will return it to the stack.

00:24:36.180 --> 00:24:36.180
So saving, and--

00:24:39.010 --> 00:24:40.540
Do not reload.

00:24:40.550 --> 00:24:41.310
Reloading.

00:24:41.390 --> 00:24:46.540
So now when I mouse over these photos,
you can see that they're really quickly

00:24:46.600 --> 00:24:49.490
just moved right out of this stack here.

00:24:53.900 --> 00:24:56.520
And also, as you can see,
I can interrupt these animations

00:24:56.530 --> 00:24:57.580
like right in the middle.

00:24:57.580 --> 00:25:02.800
I don't have to wait for one to complete
before I sort of start the next one.

00:25:02.800 --> 00:25:06.360
So maybe I can't decide which one
of these photos I want to look at.

00:25:06.410 --> 00:25:07.880
Oh, I've chosen that one.

00:25:07.880 --> 00:25:12.380
So that gives you a great overview
of what's possible with just a few

00:25:12.380 --> 00:25:17.140
lines of code with CSS transitions,
and I'm looking forward to seeing

00:25:17.140 --> 00:25:21.820
some great web pages and web
applications that use this technology.

00:25:21.920 --> 00:25:23.010
Thank you.

00:25:32.060 --> 00:25:33.000
Thanks, Vicki.

00:25:33.000 --> 00:25:35.340
That was awesome.

00:25:35.340 --> 00:25:38.200
Can we go back to slides, please?

00:25:41.690 --> 00:25:47.590
So if you think that's cool,
there's even more animation available

00:25:47.780 --> 00:25:50.540
in the new iPhone version of WebKit.

00:25:50.550 --> 00:25:55.030
And if you want to learn more about that,
you should attend a session tomorrow

00:25:55.040 --> 00:25:56.780
all about transforms and animation.

00:25:56.780 --> 00:25:58.240
It's a great talk.

00:25:58.240 --> 00:26:01.360
It's tomorrow at 3:30 in Presidio,
I believe.

00:26:01.360 --> 00:26:03.420
And it's super cool.

00:26:04.600 --> 00:29:12.400
[Transcript missing]

00:29:12.690 --> 00:29:15.800
Images are time-consuming
from your perspective.

00:29:15.840 --> 00:29:19.540
If you're more of a novice and you
aren't really familiar with Photoshop,

00:29:19.600 --> 00:29:23.900
there's sort of a large amount of time
that you need to put into just learning

00:29:23.900 --> 00:29:25.660
how to use image editing software.

00:29:25.660 --> 00:29:27.110
It can be difficult to use.

00:29:27.150 --> 00:29:33.360
And even if you are an expert at it,
it's still more difficult to

00:29:33.360 --> 00:29:37.490
create an image in image editing
software than it is just to

00:29:37.490 --> 00:29:37.490
type in the text that you want.

00:29:38.100 --> 00:29:41.070
If you have a lot of photos
representing text on your page,

00:29:41.070 --> 00:29:45.410
unless somebody's printing out your site
using a really high-quality printer,

00:29:45.620 --> 00:29:46.940
it's going to become difficult to read.

00:29:46.940 --> 00:29:48.250
The text will be imprecise.

00:29:48.260 --> 00:29:51.100
Localization becomes an issue.

00:29:51.100 --> 00:29:54.600
If you want to make your web page
available in many different languages,

00:29:54.600 --> 00:29:57.740
then in addition to translating
all the actual text on your page,

00:29:57.780 --> 00:30:00.120
you need to generate new images
for all of these languages

00:30:00.310 --> 00:30:01.500
that you want to support.

00:30:02.470 --> 00:30:04.240
Finally, accessibility is an issue.

00:30:04.240 --> 00:30:08.800
Sure, if you use an image tag,
the actual image element,

00:30:08.840 --> 00:30:11.680
then you can use an alt attribute,
which is okay.

00:30:11.940 --> 00:30:15.350
If your alt attribute reflects the
text that's written in the photo,

00:30:15.640 --> 00:30:16.740
that will work okay.

00:30:16.740 --> 00:30:21.430
But what's really a problem is when
you're using images as background images.

00:30:21.500 --> 00:30:23.470
And actually,
the examples that I showed you at

00:30:23.470 --> 00:30:25.300
the Zen Garden are doing just that.

00:30:25.300 --> 00:30:30.440
They plugged into the content by using
those images as background images.

00:30:30.440 --> 00:30:32.320
And a screen reader has no way to know.

00:30:32.320 --> 00:30:34.670
That a background image has
text in it that's worth reading.

00:30:34.670 --> 00:30:36.980
So that's text that's going
to be completely skipped over.

00:30:36.980 --> 00:30:39.510
There are all of these hacks out
there to work around this problem,

00:30:39.510 --> 00:30:40.800
but really that's what they are.

00:30:40.800 --> 00:30:41.640
They're hacks.

00:30:41.740 --> 00:30:45.180
So it would be really better
if you didn't have to always

00:30:45.180 --> 00:30:47.140
resort to that as a technique.

00:30:48.940 --> 00:30:51.440
So here we come to CSS3 web fonts.

00:30:51.440 --> 00:30:54.210
This is actually a feature,
the idea of this feature has been

00:30:54.310 --> 00:30:57.430
around for a really long time,
and only recently was the logjam

00:30:57.430 --> 00:30:59.990
broken in terms of coming up
with an implementation of it

00:30:59.990 --> 00:31:01.640
that everyone could agree upon.

00:31:01.640 --> 00:31:03.200
This is a part of CSS3.

00:31:03.200 --> 00:31:06.180
It's already available in Safari 3.1.

00:31:06.180 --> 00:31:11.250
This lets you link to and retrieve
actual font files within a style sheet.

00:31:11.810 --> 00:31:15.420
So one thing that you need to be careful
of when you use this feature is that you

00:31:15.490 --> 00:31:19.360
need to make sure that you're using it
with fonts that you're allowed to use.

00:31:19.360 --> 00:31:21.800
All fonts come with
licenses attached to them,

00:31:21.880 --> 00:31:23.640
their intellectual property.

00:31:23.640 --> 00:31:26.950
You can't pick up any old font
and use it in your web content

00:31:27.030 --> 00:31:29.270
now that web fonts is implemented.

00:31:29.340 --> 00:31:32.110
But that being said,
there are a lot of fonts available

00:31:32.110 --> 00:31:35.180
out there that are free and
available for use in this way.

00:31:35.180 --> 00:31:39.110
I grabbed a number of them from
myfonts.com when I was messing

00:31:39.110 --> 00:31:41.000
around with this feature.

00:31:41.760 --> 00:31:43.500
So I'm going to show you how to use it.

00:31:43.740 --> 00:31:46.480
The font that I picked,
I wanted to add this to my photo

00:31:46.490 --> 00:31:50.030
page because that text is really
dragging us down now that we have

00:31:50.030 --> 00:31:53.280
this really cool layout and this
really cool way to interact with it.

00:31:53.280 --> 00:31:55.800
We just have this Times New Roman text
that says "Life in Maui."

00:31:55.940 --> 00:31:57.330
So I wanted to make that better.

00:31:57.500 --> 00:32:01.360
So I grabbed this font called
"Glasscrack" off of myfonts.com.

00:32:01.360 --> 00:32:04.620
It was designed by Ray Larrabee.

00:32:04.760 --> 00:32:07.260
He has a lot of other great
and free fonts available,

00:32:07.430 --> 00:32:09.060
some that aren't free too,
but they're all beautiful.

00:32:09.220 --> 00:32:12.530
So the font's actually called
"Glasscrack." So I specified this

00:32:12.530 --> 00:32:15.060
font family name "Glasscrack."
I could have called it anything,

00:32:15.060 --> 00:32:17.600
but I decided just to keep
the actual name of the font.

00:32:17.640 --> 00:32:19.520
It's in my @fontface declaration.

00:32:19.520 --> 00:32:23.470
And then I provide a source URL for
where I've hosted it on a local server,

00:32:23.740 --> 00:32:26.100
and I specify what format it's in here.

00:32:26.100 --> 00:32:27.420
It's in TrueType format.

00:32:27.650 --> 00:32:31.530
And then I can use it in my CSS anywhere,
the same way I would use any other

00:32:31.910 --> 00:32:35.790
font family name like Helvetica,
which is listed as the fallback

00:32:35.810 --> 00:32:37.590
for this particular font.

00:32:37.750 --> 00:32:42.190
So that's going to take my page from
this plain old Times New Roman Life in

00:32:42.190 --> 00:32:46.550
Maui text to this much cooler text
that really fits in a lot better

00:32:46.550 --> 00:32:48.470
with the theme that I have here.

00:32:48.890 --> 00:32:51.190
So I mentioned that I wanted
to talk about a few other

00:32:51.280 --> 00:32:54.360
text styling techniques,
and these are all new and cool things

00:32:54.760 --> 00:32:58.840
that make the idea of using text much
more appealing because you have so much

00:32:58.840 --> 00:33:00.620
flexibility with altering it in CSS.

00:33:00.620 --> 00:33:03.440
So text stroke is what I would
like to talk about first.

00:33:03.440 --> 00:33:07.800
This is a really simple CSS property
that lets you specify a color and

00:33:07.940 --> 00:33:11.480
width for the outline of a glyph,
which is the stroke.

00:33:12.340 --> 00:33:15.540
So here I've changed this
Times New Roman A glyph

00:33:15.870 --> 00:33:17.430
to have a pink stroke.

00:33:17.500 --> 00:33:19.530
You could also change
the width of that stroke.

00:33:19.610 --> 00:33:21.400
It would not affect the
metrics of the font,

00:33:21.780 --> 00:33:25.590
just the thickness of the outline.

00:33:25.910 --> 00:33:28.200
Finally, you can specify fill color.

00:33:28.260 --> 00:33:29.300
Here I've changed it to blue.

00:33:29.590 --> 00:33:33.200
If you don't specify fill color,
then the fill will default to

00:33:33.360 --> 00:33:37.790
whatever the color property is set to,
which will default to black if

00:33:37.820 --> 00:33:40.000
you don't set it to anything else.

00:33:40.620 --> 00:33:44.660
So here I'm going to add some text
stroke to my Life in Maui text.

00:33:44.660 --> 00:33:47.870
I'm going to make the stroke,
the outline,

00:33:47.870 --> 00:33:51.360
be one pixel and dark slate blue,
and I'm going to fill

00:33:51.360 --> 00:33:52.940
it with yellow-green.

00:33:53.040 --> 00:33:55.410
So that'll take us from here.

00:33:55.600 --> 00:34:02.540
and Sarah Kuhn,
and I'm going to show you how to

00:34:02.540 --> 00:34:08.150
add depth to your web application.

00:34:08.150 --> 00:34:10.280
Thank you.

00:34:10.880 --> 00:34:13.210
Next,
I'm going to add a little text shadow

00:34:13.500 --> 00:34:14.960
just to give it a little more oomph.

00:34:15.120 --> 00:34:17.770
This feature has been
around in Safari for ages.

00:34:17.860 --> 00:34:21.600
This originally shipped, I think,
with Safari 2.0, but it's still awesome.

00:34:21.600 --> 00:34:24.780
And it's a lot like box shadow,
which I showed you earlier.

00:34:24.780 --> 00:34:28.810
I just specify a color for the shadow,
left and right offset and a blur radius.

00:34:28.840 --> 00:34:32.820
So that's just going to add a little
extra dimension from here to here.

00:34:32.820 --> 00:34:34.540
So this effect is a little subtle.

00:34:34.660 --> 00:34:36.000
I'll show it to you again.

00:34:36.000 --> 00:34:37.430
It goes from here to here.

00:34:38.440 --> 00:34:41.130
So one of the really awesome
things about this feature is that

00:34:41.130 --> 00:34:44.180
once I started looking through
all of these fonts at myfonts.com,

00:34:44.180 --> 00:34:47.520
there are other resources out there, too,
of course, but that's just where

00:34:47.520 --> 00:34:48.980
I happen to be looking.

00:34:48.980 --> 00:34:52.360
I found all these awesome fonts,
and I had a really hard time even

00:34:52.670 --> 00:34:54.720
deciding on one to use for this layout.

00:34:54.720 --> 00:34:58.020
Another great example is this font,
which is called Starburst,

00:34:58.020 --> 00:34:59.700
designed by Dieter Steffman.

00:34:59.700 --> 00:35:03.550
And here's another cool one,
also designed by Ray Larrabee,

00:35:03.610 --> 00:35:05.280
that I really like also.

00:35:06.080 --> 00:35:09.550
So a lot of these fonts are really
inspiring and give you a lot of

00:35:09.550 --> 00:35:12.900
flexibility in terms of if you
want to stick with true text on

00:35:13.170 --> 00:35:16.840
your web page instead of using
images for the cool pieces of text.

00:35:19.010 --> 00:35:25.560
Okay, so we've talked a lot about visual
whizziness and all this kind of

00:35:25.560 --> 00:35:32.650
eye candy and the new hotness and,
you know, the awesome, cool new things.

00:35:32.720 --> 00:35:38.790
And the important thing to remember is
that not all of your users experience the

00:35:38.950 --> 00:35:42.680
user interface in a way that they benefit
at all from this visual whizziness.

00:35:42.680 --> 00:35:46.740
When you're dealing with accessibility,
it's other kinds of whizziness that

00:35:46.740 --> 00:35:48.620
your users really benefit from.

00:35:48.980 --> 00:35:51.220
And a user interface
does not discriminate.

00:35:51.220 --> 00:35:52.120
It's just as user.

00:35:52.230 --> 00:35:55.040
So it's really important to keep all
of your users in mind if you want a

00:35:55.190 --> 00:35:57.080
truly sophisticated user interface.

00:35:57.130 --> 00:35:59.990
So to tell you some more about
web accessibility and the new

00:35:59.990 --> 00:36:02.700
whizziness that we've added there,
I would like to invite

00:36:02.730 --> 00:36:07.760
my friend and colleague,
Alice Liu, on stage.

00:36:14.800 --> 00:36:17.040
I'm a Safari and WebKit engineer.

00:36:17.040 --> 00:36:20.590
I'm going to talk to you a little
bit about web accessibility.

00:36:20.630 --> 00:36:24.800
I know a lot of you are professional web
developers and some of you are novices,

00:36:24.800 --> 00:36:27.890
but even if you do this for a living,
you might not be very

00:36:27.890 --> 00:36:29.680
familiar with this concept.

00:36:29.750 --> 00:36:34.190
So let me give you -- let's just
start with a slight introduction.

00:36:34.730 --> 00:36:39.280
Accessibility features on OS X mainly
serve users who have some kind of

00:36:39.280 --> 00:36:49.120
impairment that makes it difficult for
them to use a computer the way that other

00:36:49.120 --> 00:36:49.120
people like me and you use a computer.

00:36:49.500 --> 00:36:55.700
This, there are several kinds of
impairments that can help,

00:36:55.700 --> 00:36:59.360
where accessibility can come in to help.

00:36:59.490 --> 00:37:03.260
For example,
if a user has a hearing impairment,

00:37:03.550 --> 00:37:08.090
they might need visual alerts instead
of the audible alerts like beeps that

00:37:08.100 --> 00:37:10.300
you and I are so used to hearing.

00:37:10.370 --> 00:37:15.100
Also,
any video that is captured on a Mac has

00:37:15.170 --> 00:37:16.720
the ability to be closed captioned.

00:37:17.020 --> 00:37:22.920
If a user has a physical impairment,
like a manual dexterity impairment,

00:37:22.920 --> 00:37:27.230
they might not be able to use
a mouse or other input device,

00:37:27.240 --> 00:37:31.780
and so full keyboard access can
really help someone out like this.

00:37:32.520 --> 00:37:35.920
Visual, many of you might have
visual impairments.

00:37:35.980 --> 00:37:36.810
I know I do.

00:37:36.840 --> 00:37:40.130
And they can range from minor to severe.

00:37:40.470 --> 00:37:45.740
And so if you're one of those people that
has trouble making out a lot of detail,

00:37:45.740 --> 00:37:48.660
the Zoom feature on
OS X can help you out.

00:37:48.740 --> 00:37:51.700
Some may have very severe
visual impairments,

00:37:51.890 --> 00:37:56.920
and so they might need to use a screen
reader to interface with the system.

00:37:58.870 --> 00:38:03.790
A lot of these, all of these features
are built into OS X,

00:38:03.920 --> 00:38:08.420
all these features and more,
including the screen reader.

00:38:09.160 --> 00:38:12.660
We're actually kind of unique in that,
well, maybe not too unique,

00:38:12.740 --> 00:38:16.770
but it's not always a given that a
screen reader is provided on a platform.

00:38:16.980 --> 00:38:21.460
So Apple feels really great
about providing this as

00:38:21.460 --> 00:38:25.830
built-in because sometimes these
programs can cost up to $1,000.

00:38:25.940 --> 00:38:29.210
This is great for you because you
can try it out on your website,

00:38:29.220 --> 00:38:33.040
on your applications,
without making any kind

00:38:33.220 --> 00:38:35.650
of investment at all.

00:38:36.780 --> 00:38:41.330
So, our built-in screen reader
called VoiceOver is actually

00:38:41.420 --> 00:38:43.680
more than just a screen reader.

00:38:43.750 --> 00:38:47.980
It's more like a spoken interface because
not only is the screen read to you,

00:38:48.040 --> 00:38:52.430
but also other stuff like the status
of activities and the boundaries

00:38:52.430 --> 00:38:54.020
of objects are also communicated.

00:38:54.020 --> 00:38:59.120
So, it's really a spoken
interface to the whole system.

00:39:00.380 --> 00:39:05.520
So, if you were to write any app
or any plain old web page,

00:39:05.520 --> 00:39:09.320
if you were to use VoiceOver on
that app or web page,

00:39:09.320 --> 00:39:12.720
VoiceOver would already know a
bunch of stuff to say about it

00:39:12.820 --> 00:39:16.910
and communicate that to the user
all without you doing anything.

00:39:16.920 --> 00:39:18.180
So, how does it know how to do this?

00:39:18.280 --> 00:39:21.950
Well, for apps,
the application framework provides

00:39:22.010 --> 00:39:26.500
the basic information for apps and
the stuff that they're made of,

00:39:26.920 --> 00:39:30.320
like windows and views and buttons,
stuff like that.

00:39:30.430 --> 00:39:35.720
Similarly, WebKit provides this basic
information for web content and

00:39:35.750 --> 00:39:38.140
its building blocks elements.

00:39:38.340 --> 00:39:44.190
So, we read the tags and we're able
to know what to say about it based

00:39:44.190 --> 00:39:46.900
on the tag and the info in it.

00:39:47.670 --> 00:39:51.040
So you might not have
tried VoiceOver before,

00:39:51.040 --> 00:39:54.830
or maybe you accidentally turned
it on and then turned it back off

00:39:54.850 --> 00:39:57.100
because you were scared of the voice.

00:39:57.150 --> 00:39:59.980
But we're going to play a little game.

00:39:59.980 --> 00:40:04.370
We're going to try-- I'm going
to present to you clips of

00:40:04.420 --> 00:40:08.740
VoiceOver working on websites and
see if you can guess the website.

00:40:08.780 --> 00:40:11.300
So shout out your answers
when these things come up.

00:40:11.450 --> 00:40:12.320
The first one.

00:40:12.320 --> 00:40:14.120
Interact with HTML content.

00:40:14.120 --> 00:40:16.320
Link, get home delivery.

00:40:16.320 --> 00:40:17.330
Link, login.

00:40:17.570 --> 00:40:19.120
Link, register now.

00:40:19.120 --> 00:40:20.260
Home page.

00:40:20.270 --> 00:40:21.740
Link, my times.

00:40:21.750 --> 00:40:24.070
Link, today's paper.

00:40:24.260 --> 00:40:26.270
New York Times, great.

00:40:26.380 --> 00:40:29.380
That was-- I guess that one was easy.

00:40:29.720 --> 00:40:32.700
Okay, well, they'll get a little harder.

00:40:32.720 --> 00:40:34.340
Oh, I'm sorry,
I was supposed to switch the slide.

00:40:34.540 --> 00:40:36.140
But yes, New York Times.

00:40:36.160 --> 00:40:36.690
Okay, one more.

00:40:36.700 --> 00:40:39.590
Visit a link, Gmail.

00:40:39.820 --> 00:40:40.700
Link, Calendar.

00:40:40.700 --> 00:40:42.490
Documents.

00:40:42.810 --> 00:40:45.370
Link, Photos.

00:40:46.630 --> 00:40:47.600
Google?

00:40:47.600 --> 00:40:48.440
Well, not exactly.

00:40:48.440 --> 00:40:50.010
It's actually Google Docs.

00:40:50.140 --> 00:40:53.650
You're kind of just seeing what's on top,
but the main content is not

00:40:53.650 --> 00:40:55.400
apparent to you immediately.

00:40:55.400 --> 00:40:57.300
And one more.

00:40:57.930 --> 00:41:00.060
HTML content has keyboard focus.

00:41:00.360 --> 00:41:02.850
Main HTML content.

00:41:09.170 --> 00:41:16.810
Well, actually, it's a site that was
made with a plug-in only.

00:41:17.330 --> 00:41:22.540
So if you chose to create
your site with only a plug-in,

00:41:22.540 --> 00:41:28.000
and you chose not to add any
accessibility information on top of it,

00:41:28.240 --> 00:41:31.940
then you're going to get this
kind of experience because you're

00:41:31.940 --> 00:41:34.430
not going to get any of the
behavior for free from WebKit.

00:41:35.160 --> 00:41:38.480
There is a way to build accessibility
information into plug-in sites,

00:41:38.800 --> 00:41:41.980
but it's actually not a very
popular practice on the web.

00:41:42.170 --> 00:41:45.050
So out in the wild,
you usually will be left

00:41:45.100 --> 00:41:47.300
with no usable information.

00:41:49.250 --> 00:41:55.470
Okay, so now that you got a little
taste of what it's like to

00:41:55.560 --> 00:42:00.610
use VoiceOver on a website,
you might have noticed

00:42:00.720 --> 00:42:04.480
that it's kind of hard to,
except for the New York Times,

00:42:04.590 --> 00:42:07.800
it's kind of hard to know, like,
what exactly am I looking at?

00:42:07.800 --> 00:42:10.650
I'm only told what's at the top.

00:42:15.910 --> 00:42:18.310
And that's really hard for some users.

00:42:18.720 --> 00:42:22.520
So, you might not really even care.

00:42:22.520 --> 00:42:27.590
If you're a professional web developer,
you might be,

00:42:27.760 --> 00:42:29.750
I'm sorry.

00:42:29.840 --> 00:42:33.100
If you're a professional web developer,
you might be more concerned

00:42:33.100 --> 00:42:36.240
about making things look great
instead of about accessibility.

00:42:36.240 --> 00:42:40.420
But let me share with you some reasons
why you should care about accessibility.

00:42:40.500 --> 00:42:45.220
The first reason is
probably the most obvious,

00:42:45.280 --> 00:42:49.590
that some users are impaired,
and this is the only way that you

00:42:49.690 --> 00:42:53.830
can give them a web experience,
a better web experience.

00:42:54.050 --> 00:42:57.400
And it might not really appeal to you.

00:42:57.530 --> 00:42:58.930
That one might not really appeal to you.

00:42:59.060 --> 00:43:01.040
So think about this one.

00:43:01.070 --> 00:43:04.740
There's an aging user base
of web users out there,

00:43:04.790 --> 00:43:09.180
and those users might rely on your
site for any particular reason.

00:43:09.220 --> 00:43:12.190
But as they grow older,
their manual dexterity

00:43:12.190 --> 00:43:16.120
might be decreasing,
so they might not be able to use a mouse.

00:43:16.130 --> 00:43:20.880
Or their visual acuity may be decreasing,
so they might have to soon use

00:43:20.880 --> 00:43:23.000
a screen reader or Zoom feature.

00:43:23.030 --> 00:43:27.980
Those users depend on your site,
and you want to adapt

00:43:27.980 --> 00:43:30.760
with them as they adapt.

00:43:30.810 --> 00:43:33.910
Another reason is non-human users.

00:43:34.300 --> 00:43:40.660
So search engines and bots and automation
systems all tap into accessibility

00:43:40.660 --> 00:43:46.920
information of your web content in
order to gain information about it.

00:43:46.920 --> 00:43:51.410
And if you care about accessibility,
you might end up with

00:43:51.780 --> 00:43:54.200
better search results,
better hits.

00:43:54.260 --> 00:43:57.990
So all of these things have to do
with increasing your market share.

00:43:58.140 --> 00:44:01.500
And market share and
viewership as web developers,

00:44:01.580 --> 00:44:04.330
that's pretty important to you, right?

00:44:04.660 --> 00:44:08.260
Well, even if you don't,
your competition might or

00:44:08.460 --> 00:44:11.840
they might already be doing
it without you even knowing,

00:44:11.960 --> 00:44:13.330
so you might want to look into that.

00:44:13.340 --> 00:44:18.910
Another last reason why you should care
about accessibility is because you might

00:44:19.020 --> 00:44:24.810
find that it's possible to get into
some legal trouble if you're big enough.

00:44:24.860 --> 00:44:30.620
So, Target, the discount retailer,
once offered a deal that was

00:44:30.620 --> 00:44:34.130
only available on their website,
but it wasn't available in

00:44:34.130 --> 00:44:35.670
their brick and mortar stores.

00:44:35.830 --> 00:44:39.730
So, this would have been fine if
their website were accessible,

00:44:39.910 --> 00:44:41.030
however, it wasn't.

00:44:41.110 --> 00:44:44.370
And so, you get,
a situation was created in

00:44:44.480 --> 00:44:47.030
which discrimination happens.

00:44:47.150 --> 00:44:51.600
So, they found themselves
with some legal trouble.

00:44:52.230 --> 00:44:58.530
So -- so -- so web content
has really changed,

00:44:58.530 --> 00:45:01.300
from yesterday.

00:45:01.300 --> 00:45:06.870
We used to find that web content
was pretty static and that most --

00:45:07.130 --> 00:45:10.120
most pages read in a document form.

00:45:10.120 --> 00:45:13.890
And it was like an essay mostly,
and there wasn't a lot

00:45:13.890 --> 00:45:15.320
of dynamic content.

00:45:15.320 --> 00:45:19.040
Well, the way a screen reader works,
works great with the way

00:45:19.100 --> 00:45:20.270
that the Web used to be.

00:45:20.270 --> 00:45:21.660
So it walks through the DOM.

00:45:21.780 --> 00:45:25.530
So it starts at the top and you
walk element by element and --

00:45:25.540 --> 00:45:27.720
in order to navigate through.

00:45:27.720 --> 00:45:32.040
So the way that the Web used to be and
the way that a screen reader works,

00:45:32.110 --> 00:45:36.680
that's -- that's really -- they're
really compatible in that way.

00:45:36.680 --> 00:45:40.700
However, you are at this talk about
rich user interfaces,

00:45:40.700 --> 00:45:44.540
and you actually came here to
-- to see a lot of whizzy stuff,

00:45:44.540 --> 00:45:48.510
and you weren't expecting
to talk about accessibility.

00:45:48.510 --> 00:45:53.320
But this is -- this is a very
pertinent issue about how rich --

00:45:53.860 --> 00:46:02.540
rich Internet applications interface
with -- interface with accessibility.

00:46:02.540 --> 00:46:07.000
So web content has really evolved,
and now we find ourselves -- you -- you

00:46:07.100 --> 00:46:15.040
find yourself making sites that move
and interact in a multitude of ways.

00:46:15.040 --> 00:46:21.320
And there are a certain set of users out
there that aren't able to enjoy this.

00:46:21.480 --> 00:46:26.550
Well, so -- so I know that -- I know
that you spend a lot of time

00:46:26.550 --> 00:46:32.460
making your site look great,
because that's really

00:46:32.460 --> 00:46:35.370
what you care about.

00:46:35.370 --> 00:46:39.750
And -- and I think that's -- I think

00:46:41.210 --> 00:46:42.900
I'm sorry.

00:46:43.000 --> 00:46:47.580
So we know that you spend a lot of
time making your site look great.

00:46:47.590 --> 00:46:51.700
And you might say meh to the idea
of caring about accessibility

00:46:51.700 --> 00:46:57.240
instead of making your website
very rich and cutting edge.

00:46:57.550 --> 00:47:01.380
But you don't have to leave
one and pursue the other.

00:47:01.450 --> 00:47:06.260
They're actually-- they're
goals that can coexist.

00:47:06.280 --> 00:47:11.170
And the way that we can do this is with
new web technologies that browsers,

00:47:11.170 --> 00:47:15.380
including browser engines,
including WebKit, are implementing.

00:47:15.380 --> 00:47:19.370
And I'm going to tell you about
those technologies in a minute.

00:47:19.410 --> 00:47:23.070
But the basic idea that I want you to
take home today is that cutting edge

00:47:23.070 --> 00:47:27.440
doesn't have to mean inaccessible,
because we want you to access

00:47:27.570 --> 00:47:32.830
enable what you already have and
build on top of your existing work.

00:47:33.160 --> 00:47:37.620
You can still have those whizzy
features and have great and

00:47:37.640 --> 00:47:39.900
accessible interface to them.

00:47:39.900 --> 00:47:43.220
And you won't have to
overhaul your structure.

00:47:43.220 --> 00:47:47.820
One thing I want to remind you about
is you may be familiar with the

00:47:47.970 --> 00:47:56.740
practice of creating a separate site
for accessibility and something

00:47:56.740 --> 00:47:58.860
that's separate from your main site.

00:47:58.860 --> 00:48:00.340
Well, separate is not equal.

00:48:00.340 --> 00:48:06.380
And people who are concerned with
web accessibility will recommend

00:48:06.380 --> 00:48:08.900
that you not practice in this way.

00:48:10.120 --> 00:48:17.160
Well, let's get into how we're going to
improve accessibility of rich sites.

00:48:17.250 --> 00:48:23.420
So getting around in web content
is increasingly harder if you have

00:48:23.420 --> 00:48:25.820
a bunch of content on your site.

00:48:25.820 --> 00:48:31.040
And so we can show you ways
to improve keyboard navigation

00:48:31.040 --> 00:48:32.160
with new technologies.

00:48:32.160 --> 00:48:36.660
HTML5 adds the focus
event on every element.

00:48:36.660 --> 00:48:41.870
And this will allow you to better--
to better configure how keyboard

00:48:41.870 --> 00:48:44.620
navigation moves around on your page.

00:48:44.620 --> 00:48:51.050
And before, you were only able to focus
form elements and links.

00:48:51.390 --> 00:48:54.320
But now you can focus anything,
including divs and images,

00:48:54.320 --> 00:48:56.780
which you probably tried
to work around before.

00:48:56.940 --> 00:48:59.620
But now they can be directly focusable.

00:48:59.840 --> 00:49:06.350
The way that you can configure
focusability is through

00:49:06.350 --> 00:49:08.810
the tab index attribute,
which is now also

00:49:08.820 --> 00:49:10.920
available on every element.

00:49:10.940 --> 00:49:16.230
When you specify tab index at all,
it makes it focusable by script

00:49:16.320 --> 00:49:18.840
and also by mouse clicks.

00:49:18.840 --> 00:49:23.460
If you specify a negative
input to tab index,

00:49:23.460 --> 00:49:26.400
then you remove it from the tab order.

00:49:26.670 --> 00:49:30.140
So there's lots of ways in which
you can use this to your advantage.

00:49:30.140 --> 00:49:32.870
And this practice
benefits a lot of users.

00:49:32.880 --> 00:49:34.980
I know some of you are power users.

00:49:34.980 --> 00:49:38.860
And power users especially love
to have great keyboard-- keyboard

00:49:38.860 --> 00:49:40.880
navigation and full keyboard access.

00:49:41.170 --> 00:49:44.510
So this is going to be something
that benefits many users

00:49:44.600 --> 00:49:47.880
and not just impaired users.

00:49:48.300 --> 00:49:50.940
The main thing I want to talk
to you about today is ARIA.

00:49:51.150 --> 00:49:55.540
And ARIA is an emerging standard.

00:49:55.540 --> 00:49:56.830
An emerging standard.

00:49:56.870 --> 00:49:59.580
And we've started on our
implementation of ARIA as well

00:49:59.730 --> 00:50:01.390
as other browsers have too.

00:50:01.490 --> 00:50:05.110
And ARIA stands for Accessible
Rich Internet Applications.

00:50:05.210 --> 00:50:12.770
And the main thing about ARIA is
that it's going to let your

00:50:12.770 --> 00:50:12.770
-- it's going to let your --

00:50:13.100 --> 00:50:17.270
It's going to give you the ability
to make your internet applications

00:50:17.380 --> 00:50:19.680
behave just like native applications.

00:50:19.730 --> 00:50:23.780
And the way that it does that
is it's letting you tap into the

00:50:23.900 --> 00:50:26.180
built-in accessibility framework.

00:50:26.260 --> 00:50:31.010
And it's giving you the freedom
to specify your elements,

00:50:31.280 --> 00:50:36.270
specify the elements in your web page
just like how an application has it.

00:50:36.460 --> 00:50:39.990
And on top of that,
it's going to let you communicate

00:50:40.060 --> 00:50:43.290
the relationships that
exist between your elements.

00:50:43.660 --> 00:50:48.530
So the elements in your page interact in
special ways and they have relationships

00:50:48.610 --> 00:50:53.190
and you're going to be able to
communicate that with use of ARIA.

00:50:55.800 --> 00:51:00.500
ARIA is really simple to use because
there's some really simple basics.

00:51:00.500 --> 00:51:04.770
One of the basic fundamentals
of ARIA is the concept of roles,

00:51:04.830 --> 00:51:08.960
and roles allow you to describe
the purpose of your elements.

00:51:09.370 --> 00:51:16.790
There are over 50 roles that you
can use to specify the purpose

00:51:16.790 --> 00:51:16.790
of the things in your web pages.

00:51:17.270 --> 00:51:20.510
They fall into kind of
two different categories.

00:51:20.860 --> 00:51:26.940
Some roles describe widgets,
which in examples are alert

00:51:26.990 --> 00:51:28.860
dialog and progress bar.

00:51:28.860 --> 00:51:33.410
And the reason why this is great
is because your users already

00:51:33.450 --> 00:51:36.980
have a built-in understanding
of how certain widgets work.

00:51:37.260 --> 00:51:41.030
And if you describe your custom
widgets as these widgets,

00:51:41.030 --> 00:51:46.060
then they can benefit from already
having an understanding of how they work.

00:51:46.750 --> 00:51:49.670
The other kind describes structure.

00:51:50.050 --> 00:51:55.040
And what I mean by this is how
the element -- you're describing

00:51:55.040 --> 00:51:58.900
how the element fits into the
overall hierarchy of the page.

00:51:58.920 --> 00:52:01.840
One example of this is the main role.

00:52:01.840 --> 00:52:05.470
And the main role is going
to allow you to say that,

00:52:05.530 --> 00:52:08.900
oh, this thing in my web
page is the main content,

00:52:08.900 --> 00:52:10.390
and this other stuff is secondary.

00:52:10.630 --> 00:52:15.020
So it gives the user a better
sense of what -- of the layout

00:52:15.020 --> 00:52:16.340
and the purpose of the page.

00:52:16.520 --> 00:52:19.170
of various parts of your webpage.

00:52:19.290 --> 00:52:22.200
Another good rule to use is Live Region.

00:52:22.220 --> 00:52:28.760
Using the Live Region role on an
element that updates its content

00:52:28.760 --> 00:52:32.320
from time to time is going to
communicate to the user that,

00:52:32.580 --> 00:52:36.450
yeah, this element is going to
change from time to time,

00:52:36.690 --> 00:52:42.990
and this is something that you already
communicate to other users visually,

00:52:42.990 --> 00:52:44.600
but this is going to allow you to
communicate this non-visually as well.

00:52:45.270 --> 00:52:47.780
So using roles is really easy.

00:52:47.780 --> 00:52:52.480
Up on the board, I have -- up here,
I have exactly what it takes

00:52:52.480 --> 00:52:55.040
to add a role to an element.

00:52:55.040 --> 00:53:00.280
So it's very common to have an image
and then have some text that describes

00:53:00.340 --> 00:53:03.420
the image and then use that as a button.

00:53:03.690 --> 00:53:06.160
Well, if you're using it as a button,
just say it's a button.

00:53:06.160 --> 00:53:10.910
And now, by using role equals button,
you communicate to the user

00:53:10.910 --> 00:53:14.190
that this is a button and not
just an image with some text.

00:53:15.270 --> 00:53:20.240
Another basic concept of ARIA is the
concept of states and properties.

00:53:20.240 --> 00:53:22.000
And states you're already
pretty familiar with.

00:53:22.000 --> 00:53:26.980
They describe the status of elements,
like a disabled text field

00:53:27.070 --> 00:53:30.140
or a selected radio button.

00:53:30.140 --> 00:53:34.080
ARIA is going to let you -- ARIA is
expanding the field and letting

00:53:34.080 --> 00:53:40.920
you use these states on lots of
elements and not just form controls.

00:53:41.530 --> 00:53:47.370
Properties let you describe
the relationships that

00:53:47.370 --> 00:53:49.400
exist between your elements.

00:53:49.400 --> 00:53:54.480
One example is the labeled by property.

00:53:54.480 --> 00:53:57.030
You might be familiar with
the label HTML tag where you

00:53:57.030 --> 00:53:58.790
label a certain form element.

00:53:58.790 --> 00:54:04.140
But ARIA is going to let you use any
element as a label for any other element.

00:54:04.140 --> 00:54:06.080
It's just expanding your horizons.

00:54:08.460 --> 00:54:10.820
Another example of this is required.

00:54:10.820 --> 00:54:17.190
So you might be in the practice of using
a little red asterisk near your form,

00:54:17.510 --> 00:54:20.420
near your text field to say
that you have to fill this in.

00:54:20.420 --> 00:54:24.530
Well, you communicated that visually,
but not non-visually,

00:54:24.530 --> 00:54:28.500
and required is going to allow
you to do that non-visually.

00:54:28.740 --> 00:54:31.140
Active Descendant is a
pretty interesting property,

00:54:31.140 --> 00:54:33.700
and I'm going to go into
it a little bit more.

00:54:33.980 --> 00:54:38.660
The Active Descendant property
is another thing you can use

00:54:38.770 --> 00:54:42.360
to improve keyboard navigation,
in addition to tab index.

00:54:42.360 --> 00:54:46.430
And it basically allows you
to focus an element on behalf

00:54:46.430 --> 00:54:48.200
of the assistive technology.

00:54:50.340 --> 00:54:52.700
The way it works, I'll give an example.

00:54:52.700 --> 00:54:56.700
Let's say you have a list box,
a custom list box,

00:54:56.700 --> 00:54:59.790
and it's not one that you
made with the select element.

00:55:00.020 --> 00:55:02.200
And you have some inner children.

00:55:02.200 --> 00:55:09.710
So you can specify an inner child
as the list box Active Descendant.

00:55:09.790 --> 00:55:11.810
If you change the active
descendant property,

00:55:11.810 --> 00:55:17.430
then it will trigger a change in the
focus of the assistive technology.

00:55:17.690 --> 00:55:23.870
So basically,
you can use a key event listener

00:55:24.330 --> 00:55:25.960
and change the active descendant.

00:55:25.960 --> 00:55:32.880
And so you can use up and down to
focus the child elements one by one.

00:55:32.880 --> 00:55:38.520
And this all happens while the outer
element maintains keyboard focus.

00:55:38.520 --> 00:55:44.080
And the reason why this is great is
because you can fully make your--

00:55:44.080 --> 00:55:49.050
you can make your list box fully
keyboard accessible without cluttering

00:55:49.050 --> 00:55:54.500
the tab navigation by just having
the parent be keyboard focusable.

00:55:54.580 --> 00:55:57.520
So this might be a little confusing.

00:55:57.520 --> 00:56:00.720
So let me give you some
examples of how to do this.

00:56:00.740 --> 00:56:05.760
And I'd like to invite
Beth up here to show us some.

00:56:14.860 --> 00:56:15.640
Thanks, Alice.

00:56:15.640 --> 00:56:16.770
That was great.

00:56:16.870 --> 00:56:18.480
So now we're all kind
of on the same page.

00:56:18.480 --> 00:56:22.180
We have a basic understanding of web
accessibility and we have a basic

00:56:22.260 --> 00:56:26.930
understanding about how screen readers in
general and voiceover specifically work.

00:56:27.000 --> 00:56:31.120
So now we're going to show you how
we can really use these new features,

00:56:31.130 --> 00:56:34.150
ARIA and Tab Index, et cetera,
to really improve existing

00:56:34.150 --> 00:56:35.520
web content very simply.

00:56:36.200 --> 00:56:40.840
So rich internet applications,
that's right in the title of ARIA,

00:56:40.840 --> 00:56:42.800
Accessible Rich Internet Applications.

00:56:42.820 --> 00:56:44.640
So we decided to look
at one of those first.

00:56:44.850 --> 00:56:48.200
So we decided to look
at .Mac specifically.

00:56:48.430 --> 00:56:51.660
So Alice is going to pull up .Mac here.

00:56:52.080 --> 00:56:57.830
One of the things that makes .Mac a
rich internet application is that it

00:56:57.830 --> 00:56:59.640
looks so much like a native application.

00:56:59.640 --> 00:57:03.610
A lot of really successful rich
internet applications do that.

00:57:03.680 --> 00:57:08.240
But how is this
experience with VoiceOver?

00:57:08.240 --> 00:57:09.610
Well, we're going to show you now.

00:57:09.610 --> 00:57:12.850
Specifically, we're going to look at this
toolbar at the top that's,

00:57:12.960 --> 00:57:16.510
again, almost identical to the toolbar
that you have in Mail.app,

00:57:16.750 --> 00:57:20.400
where we have the delete and reply,
reply all, new buttons, etc.

00:57:20.990 --> 00:57:24.160
So, Alice,
why don't you fire up VoiceOver and

00:57:24.160 --> 00:57:27.890
navigate to these buttons on the toolbar.

00:57:28.200 --> 00:57:30.420
Delete image.

00:57:30.420 --> 00:57:31.110
Delete.

00:57:31.220 --> 00:57:32.510
Reply image.

00:57:32.530 --> 00:57:33.540
Reply.

00:57:33.540 --> 00:57:35.220
Reply all image.

00:57:35.470 --> 00:57:37.140
Reply all.

00:57:37.140 --> 00:57:37.840
Voice over off.

00:57:37.860 --> 00:57:40.080
So that's kind of weird, right?

00:57:40.080 --> 00:57:42.250
As a sighted user,
I can see clearly that these

00:57:42.320 --> 00:57:45.430
are supposed to be buttons,
but that wasn't really conveyed

00:57:45.430 --> 00:57:47.130
by the screen reader at all.

00:57:47.140 --> 00:57:49.530
In fact,
it didn't really even give any indication

00:57:49.530 --> 00:57:51.580
that these elements are interactable.

00:57:52.140 --> 00:57:54.140
This really isn't .Mac's fault at all.

00:57:54.430 --> 00:57:57.050
Until now, with ARIA,
which is a part of the

00:57:57.160 --> 00:58:00.680
Safari 4 developer preview,
portions of ARIA, that is.

00:58:00.990 --> 00:58:05.720
Until now, with that in their hands,
there was really no way to

00:58:05.720 --> 00:58:09.230
directly affect how a screen reader
would interpret these elements.

00:58:09.240 --> 00:58:12.720
The screen reader is stuck in a
land of implementation details.

00:58:12.720 --> 00:58:16.060
So the fact that these buttons
were not created with a button

00:58:16.060 --> 00:58:19.600
element or an input type equals
button means that without ARIA,

00:58:19.600 --> 00:58:22.120
the screen reader has no way to know
that they're supposed to be buttons.

00:58:22.120 --> 00:58:25.020
But now we do have ARIA in the
Safari 4 developer preview.

00:58:25.020 --> 00:58:29.180
So what we did was we downloaded
the source code for .Mac and made a

00:58:29.180 --> 00:58:31.520
local copy and edited it a little.

00:58:31.520 --> 00:58:34.580
And all we did was add
fractions of lines of code.

00:58:34.580 --> 00:58:38.060
We just added that ARIA role
attribute to each of these divs

00:58:38.120 --> 00:58:42.430
that contains the images and the
text that represent these buttons.

00:58:42.440 --> 00:58:45.260
So we just added role equals
button to all of those divs,

00:58:45.260 --> 00:58:46.130
and that's it.

00:58:46.370 --> 00:58:50.110
And so Alice is going to show
you the new version of .Mac.

00:58:50.180 --> 00:58:51.700
Again, looks the same.

00:58:51.780 --> 00:58:53.030
We just added some role attributes.

00:58:53.060 --> 00:58:56.110
And she's going to fire up
voiceover now and show you.

00:58:56.120 --> 00:58:57.100
Sorry.

00:58:57.100 --> 00:58:57.620
That's okay.

00:58:57.620 --> 00:58:58.490
Keep going.

00:58:58.500 --> 00:58:59.880
Reply button.

00:58:59.880 --> 00:59:01.640
Reply all button.

00:59:01.640 --> 00:59:02.720
Forward button.

00:59:02.720 --> 00:59:04.440
Voiceover off.

00:59:04.500 --> 00:59:05.900
So that's much better.

00:59:05.900 --> 00:59:08.600
Again, that's going back to the
point of accessibility,

00:59:08.630 --> 00:59:11.620
which is providing the same
experience to all of your users.

00:59:11.620 --> 00:59:15.020
And here we were able to achieve that
with just fractions of lines of code.

00:59:15.020 --> 00:59:16.220
It was simple.

00:59:16.220 --> 00:59:19.140
It can even be an afterthought
in a case like this.

00:59:19.180 --> 00:59:20.650
It's incredibly easy.

00:59:21.420 --> 00:59:24.170
So, but, you know,
we've been talking a lot.

00:59:24.180 --> 00:59:26.420
Alice was talking a lot about
rich Internet applications.

00:59:26.450 --> 00:59:27.440
I mentioned it again.

00:59:27.440 --> 00:59:29.780
It's really not just
Internet applications that can

00:59:29.780 --> 00:59:31.480
benefit from these new features.

00:59:31.480 --> 00:59:33.660
It's really any modern web content.

00:59:33.660 --> 00:59:37.660
As Alice explained to you earlier,
it's really the static document style

00:59:37.830 --> 00:59:42.060
web content that works really well
automatically with a screen reader.

00:59:42.060 --> 00:59:46.180
But any sort of really modern content
is going to struggle a little bit more.

00:59:46.180 --> 00:59:49.340
So one example of some modern
web content that is not a web

00:59:49.340 --> 00:59:53.340
application is the simple,
photo demo that Vicky and I were

00:59:53.340 --> 00:59:55.670
showing you earlier that we
built up throughout this talk.

00:59:55.700 --> 01:00:00.050
So Alice is going to load up the
photo demo and she's going to show

01:00:00.050 --> 01:00:02.280
you now how this works with voiceover.

01:00:05.400 --> 01:01:40.300
[Transcript missing]

01:01:43.600 --> 01:01:49.930
VoiceOver on Safari, Window Photo Demo,
HTML Content has Keyboard Focus.

01:01:50.520 --> 01:01:53.110
Interact with HTML content
heading level 2,

01:01:53.160 --> 01:01:54.780
life in Maui.

01:01:54.840 --> 01:01:56.640
Palm trees on the beach image.

01:01:56.740 --> 01:01:58.330
So that's what we're seeing, right?

01:01:58.490 --> 01:02:02.180
So Alice, why don't you use the voiceover
command to simulate a click

01:02:02.180 --> 01:02:04.540
to click on that image?

01:02:05.500 --> 01:02:09.080
Chocolate-covered ice
cream in a clamshell image.

01:02:09.160 --> 01:02:09.570
Nice.

01:02:09.840 --> 01:02:10.440
You want to use it again?

01:02:10.440 --> 01:02:13.340
Rocky shoreline and blue sky image.

01:02:13.460 --> 01:02:14.330
Awesome.

01:02:14.370 --> 01:02:16.250
Red plants and green trees image.

01:02:16.360 --> 01:02:17.500
Voice over off.

01:02:17.730 --> 01:02:18.640
There you go.

01:02:18.690 --> 01:02:21.220
So there, again,
with just a few HTML attributes,

01:02:21.350 --> 01:02:25.270
we were able to change the user
experience to match what we created

01:02:25.270 --> 01:02:27.880
for sighted users using voice over.

01:02:28.130 --> 01:02:30.500
So it's not just rich internet
applications that benefit

01:02:30.900 --> 01:02:34.290
from this new specification,
accessible rich internet applications.

01:02:34.410 --> 01:02:35.880
It's really any modern web content.

01:02:35.940 --> 01:02:38.180
And it's so simple,
it's just adding attributes

01:02:38.220 --> 01:02:40.590
to your existing HTML.

01:02:48.500 --> 01:02:54.380
Can we go back to slides, please?

01:02:54.390 --> 01:02:57.000
Okay, so let's review what we did today.

01:02:57.000 --> 01:03:00.470
We started with a very simple
page of photos that did not

01:03:00.470 --> 01:03:03.000
look very sophisticated at all.

01:03:03.000 --> 01:03:06.190
We played with the user interface
a lot until we came up with one

01:03:06.270 --> 01:03:08.080
that I think is totally awesome.

01:03:08.080 --> 01:03:12.630
We made it really cool and fun to
interact with by adding CSS transitions

01:03:12.630 --> 01:03:17.380
in addition to the transforms that we
added to create this initial appearance.

01:03:17.380 --> 01:03:23.020
And then we used web fonts and text
stroke and text shadow to make our

01:03:23.020 --> 01:03:26.040
little heading look really awesome,
too.

01:03:26.040 --> 01:03:28.820
And finally,
we made it accessible because a

01:03:28.890 --> 01:03:34.130
truly sophisticated user interface is
sophisticated for all of your users.

01:03:34.510 --> 01:03:37.900
So if you have any questions,
Vicki Murley and Mark Malone

01:03:37.940 --> 01:03:40.500
know pretty much everything.

01:03:40.500 --> 01:03:42.780
There are all kinds of other
sessions this week going

01:03:42.780 --> 01:03:44.140
on about Safari and WebKit.

01:03:44.140 --> 01:03:46.480
There are a few that really
pertain to all of this user

01:03:46.480 --> 01:03:48.300
interface stuff in particular.

01:03:48.300 --> 01:03:50.350
One of them was earlier in the day,
and if you missed it,

01:03:50.350 --> 01:03:53.970
I highly recommend catching up with
it when ADC puts out the whole,

01:03:54.210 --> 01:03:58.860
like, talks and slide things on iTunes,
and that was 3:44.

01:03:58.890 --> 01:04:01.480
But there are more sessions
tomorrow and Thursday.

01:04:01.480 --> 01:04:04.190
There are sessions related to Safari and
WebKit that don't directly involve user

01:04:04.190 --> 01:04:07.660
interface that will still be really cool,
like a session on Ajax on Thursday,

01:04:07.690 --> 01:04:10.850
a session on offline
data and debugging tools.

01:04:11.040 --> 01:04:12.720
Also, oh, I had that up there.

01:04:12.720 --> 01:04:13.790
And now it's time for Q&A.