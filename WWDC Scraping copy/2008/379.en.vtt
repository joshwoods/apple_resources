WEBVTT

00:00:21.390 --> 00:00:23.130
Good afternoon, everyone.

00:00:23.230 --> 00:00:24.900
So I'm not Simon Fraser.

00:00:24.900 --> 00:00:26.400
My name is Gilles Drou.

00:00:26.490 --> 00:00:28.990
If you attended this Graphics
and Media State of the

00:00:28.990 --> 00:00:31.770
Union on Monday afternoon,
you know that we had a

00:00:31.770 --> 00:00:34.060
little technical glitch.

00:00:34.060 --> 00:00:35.980
And we really apologize
for the inconvenience,

00:00:36.050 --> 00:00:38.100
and we're not able to show
you a couple of demos.

00:00:38.300 --> 00:00:41.380
So I'm here with a little surprise.

00:00:41.380 --> 00:00:45.420
And I'd like to show you
these demos right now.

00:00:53.960 --> 00:00:58.320
So the first demo is called Fingertips.

00:00:58.450 --> 00:01:02.590
So it's a little application that enables
you to browse through the fingertips

00:01:03.000 --> 00:01:05.400
movies that can find Apple.com.

00:01:05.660 --> 00:01:09.290
So what you see here is a simple layout,
some video thumbnails on the left,

00:01:09.290 --> 00:01:12.860
a quick title and summary
on the right side.

00:01:12.910 --> 00:01:19.050
And you can select a video and
get a more precise summary.

00:01:20.270 --> 00:01:22.920
Of course, in a browser, as you know,
we have full control over and

00:01:23.150 --> 00:01:24.520
knowledge over the orientation.

00:01:24.520 --> 00:01:29.620
So here, in Safari on iPhone,
you can reorient and relay out

00:01:29.620 --> 00:01:31.760
your page based on the orientation.

00:01:32.050 --> 00:01:34.520
It's very simple because
it's done in CSS.

00:01:34.560 --> 00:01:36.060
You keep the same content.

00:01:36.070 --> 00:01:37.470
You change the layout.

00:01:37.730 --> 00:01:42.240
And when we go back, the wheel is also
relayed out accordingly.

00:01:42.240 --> 00:01:44.900
So here,
to describe a little bit what you see,

00:01:44.900 --> 00:01:48.540
these are web elements mapped
on top of a cylinder in 3D

00:01:48.540 --> 00:01:51.940
with CSS 3D transformations
and GPU acceleration.

00:01:52.070 --> 00:01:55.890
And you can, with the flick of a finger,
flick it like this.

00:01:55.990 --> 00:01:59.030
We are 60 frames per second.

00:01:59.120 --> 00:02:02.430
Again, can get very addicted.

00:02:04.490 --> 00:02:07.340
And I'm told we have a
new fingertips video,

00:02:07.340 --> 00:02:11.180
so I'll select it and play it.

00:02:26.600 --> 00:02:38.000
[Transcript missing]

00:02:38.880 --> 00:02:40.720
If you want to see the
rest of this video,

00:02:40.720 --> 00:02:43.040
feel free to go on PeterMizer.com.

00:02:43.050 --> 00:02:47.690
All right, so that's what I wanted
to show you for this demo.

00:02:48.870 --> 00:02:51.640
Again,
GPU-accelerated CSS transformations.

00:02:51.740 --> 00:02:54.820
The second demo-- so the team
worked really hard on this project.

00:02:54.820 --> 00:02:57.820
And before they go on vacation,
they decided to stretch the technology

00:02:57.820 --> 00:03:01.100
a little bit and do an application
that-- build an application they could

00:03:01.100 --> 00:03:04.870
use around the globe to share their
experiences with the rest of the team,

00:03:04.870 --> 00:03:06.020
the rest of us.

00:03:06.080 --> 00:03:10.200
And I'll go back.

00:03:10.200 --> 00:03:10.900
I'll tap.

00:03:11.010 --> 00:03:13.010
We'll call it Globetrotter.

00:03:16.030 --> 00:03:18.280
And in this demo,
I'll show you a couple of steps.

00:03:18.320 --> 00:03:21.100
I really want you to
understand how it's been built,

00:03:21.160 --> 00:03:22.060
how it functions.

00:03:22.180 --> 00:03:26.390
So what you see here is a map of Earth.

00:03:27.320 --> 00:03:30.730
This image is mapped on
top of a grid of elements,

00:03:30.880 --> 00:03:33.780
web page elements,
and you can fly them in 3D with

00:03:33.780 --> 00:03:38.540
CSS3 Transformed because we have
the power of GPU acceleration.

00:03:38.560 --> 00:03:44.060
And then you can map really nicely
all these layers on top of a spherical

00:03:44.200 --> 00:03:50.010
structure and snap them to really fit
and overlay on top of it a translucent

00:03:50.380 --> 00:03:54.600
image for lighting to give it a really
realistic feel and immersive feel.

00:03:54.640 --> 00:03:56.540
And now you're ready.

00:03:58.030 --> 00:04:00.160
Yes, you can.

00:04:00.160 --> 00:04:01.210
They worked really hard on that.

00:04:01.400 --> 00:04:01.930
Go for it.

00:04:03.420 --> 00:04:05.540
And again, this is totally interactive.

00:04:05.730 --> 00:04:08.340
So for instance,
you can tap on the sphere

00:04:08.400 --> 00:04:09.600
and move it around.

00:04:09.620 --> 00:04:12.760
Go check out what's happening
on the globe-- on the pole,

00:04:12.760 --> 00:04:13.420
sorry.

00:04:13.440 --> 00:04:17.640
Or with a flick of a finger,
you can rotate it like this.

00:04:17.660 --> 00:04:19.980
We are at 28 frames per second.

00:04:19.980 --> 00:04:21.790
This is fast.

00:04:24.450 --> 00:04:30.720
And again, once you're done,
give it a little time.

00:04:30.760 --> 00:04:31.540
And move it around.

00:04:31.640 --> 00:04:34.250
That also is very addictive, by the way.

00:04:40.000 --> 00:04:45.240
In resume,
we're going to decline that one.

00:04:53.400 --> 00:04:56.890
Let's check out-- oh, interesting.

00:04:56.950 --> 00:04:58.980
So Peter is in
New York checking out the cube.

00:04:59.010 --> 00:05:03.140
I mean, he probably means the
store on Fifth Avenue.

00:05:03.450 --> 00:05:09.900
So we can see he has photos and a video
by the buttons on the bottom left.

00:05:10.120 --> 00:05:12.300
So let's check out his video.

00:05:17.240 --> 00:05:18.200
Hey, Gilles.

00:05:18.200 --> 00:05:19.700
How are you doing?

00:05:19.700 --> 00:05:22.480
Sorry I can't be with
you at WWDC this year,

00:05:22.480 --> 00:05:26.180
but I'm in New York City visiting
family and friends.

00:05:26.180 --> 00:05:29.440
I have a big college reunion coming up,
but the one thing I couldn't

00:05:29.440 --> 00:05:33.580
resist doing is seeing the great
Apple Store here on Fifth Avenue.

00:05:33.580 --> 00:05:35.460
I hear there's a new iPhone.

00:05:35.460 --> 00:05:36.500
Check it out.

00:05:39.640 --> 00:05:43.960
And when you're done,
you can come back to the Earth view here.

00:05:44.000 --> 00:05:46.720
Let's check out the pictures that he has.

00:05:46.790 --> 00:05:52.870
So again,
you can totally combine video and 3D

00:05:53.040 --> 00:05:59.200
and animated web page elements with
GPU acceleration and CSS3 transforms.

00:05:59.270 --> 00:06:00.620
We're loading the pictures here.

00:06:00.670 --> 00:06:04.240
Oh, interesting picture, OK,
from probably the inside of the cube.

00:06:04.280 --> 00:06:09.160
Let's see, really,
if it got more than that.

00:06:09.200 --> 00:06:10.640
Oh, I see.

00:06:10.740 --> 00:06:16.780
So apparently, Peter took a series
of panoramic pictures.

00:06:17.160 --> 00:06:23.600
And so the way this has been built
is simply by mapping on the surface

00:06:23.600 --> 00:06:26.330
of a cube six panoramic images.

00:06:26.660 --> 00:06:29.420
And so this is really pure six images.

00:06:29.500 --> 00:06:30.880
And you can flick it like this.

00:06:30.970 --> 00:06:32.140
We are 60 frames per second.

00:06:32.140 --> 00:06:34.730
You can check out the sky.

00:06:35.420 --> 00:06:40.300
What's going on down in the store,
et cetera, et cetera.

00:06:40.320 --> 00:06:45.820
And again, when you're done,
you can come back to the nearest view.

00:06:45.930 --> 00:06:49.890
And that is what I wanted to
show you with these demos today.

00:06:55.090 --> 00:06:58.420
So in this session,
you'll hear all about the technology

00:06:58.420 --> 00:07:01.090
that's powering these demos,
for instance.

00:07:01.330 --> 00:07:05.400
And so on this,
I'd like to invite Simon Fraser on stage.

00:07:05.760 --> 00:07:06.400
Thanks, Gilles.

00:07:06.400 --> 00:07:07.410
Good job.

00:07:09.610 --> 00:07:13.260
So I'm the real Simon Fraser,
not this guy.

00:07:13.260 --> 00:07:16.250
In case it wasn't clear from the demos,
everything you just saw was

00:07:16.250 --> 00:07:17.830
done entirely in web content.

00:07:17.940 --> 00:07:18.840
There were no plugins.

00:07:18.840 --> 00:07:21.860
That was just HTML, CSS, and JavaScript.

00:07:21.950 --> 00:07:24.250
So in this session today,
I'm going to tell you how you

00:07:24.250 --> 00:07:27.730
can use effects like those
in your own web applications.

00:07:28.080 --> 00:07:30.990
As you've already heard a
couple of times at WWDC,

00:07:31.140 --> 00:07:35.990
we now have over 1,700 web applications
written specifically for the iPhone.

00:07:36.100 --> 00:07:40.280
And I wanted to focus in on four of
those and try and identify the types of

00:07:40.280 --> 00:07:43.540
things that you web developers in the
audience have been trying to do with

00:07:43.620 --> 00:07:46.000
your web applications for the iPhone.

00:07:46.020 --> 00:07:47.990
The first one is the AOL TV listings.

00:07:47.990 --> 00:07:51.130
And this is using a
JavaScript framework called IUI,

00:07:51.130 --> 00:07:54.960
which lets you build a hierarchical
menu structure and also lets you do

00:07:55.040 --> 00:07:57.870
full-screen slides with a bit of a hack,
scroll to,

00:07:57.870 --> 00:07:59.740
but it still is nice and smooth.

00:07:59.960 --> 00:08:04.490
The second example is called csswalk.com,
and it's a design directory of

00:08:04.490 --> 00:08:06.300
sites for mobiles and for iPhone.

00:08:06.300 --> 00:08:10.080
And it has this little animation that
runs when you click on the orange tab.

00:08:10.190 --> 00:08:12.550
It's using the
MuFX JavaScript library for that.

00:08:12.580 --> 00:08:14.440
That looked quite good
on the screen here,

00:08:14.440 --> 00:08:16.800
but actually, in actual fact,
it's pretty slow.

00:08:16.800 --> 00:08:18.900
It gets about four frames a second.

00:08:19.020 --> 00:08:24.000
This next example is called iFlickr,
and it gets photos from

00:08:24.000 --> 00:08:26.060
the Flickr sharing site.

00:08:26.480 --> 00:08:29.780
It uses IUI, again,
and it has the slideshow.

00:08:29.800 --> 00:08:33.070
And you might expect that you'd get nice,
smooth transitions between the

00:08:33.110 --> 00:08:34.790
pictures and the slideshow,
but actually, it doesn't.

00:08:34.880 --> 00:08:37.430
The pictures just change.

00:08:38.210 --> 00:08:39.060
Finally, we have a game.

00:08:39.060 --> 00:08:40.170
This is called Gravity.

00:08:40.360 --> 00:08:43.280
And like many games on the iPhone,
this is using JavaScript to

00:08:43.280 --> 00:08:45.240
animate elements in the page.

00:08:45.270 --> 00:08:47.350
And again,
it's not getting really good frame rates.

00:08:47.530 --> 00:08:51.280
So we can see from these examples
that you guys who've been trying

00:08:51.280 --> 00:08:54.860
to write web content for the
iPhone with animations in,

00:08:54.960 --> 00:08:56.200
you found it pretty hard.

00:08:56.220 --> 00:08:59.660
It's a pain to write
JavaScript for animations.

00:08:59.980 --> 00:09:02.740
You either have to do a lot
of timing-based code yourself,

00:09:02.840 --> 00:09:05.150
or you have to suck in some of
the JavaScript libraries like

00:09:05.230 --> 00:09:07.720
Scriptacular or some UFX or something.

00:09:07.760 --> 00:09:10.480
And that's just a pain
to manage all that code.

00:09:10.630 --> 00:09:13.280
Secondly, once you've actually started
trying to do animations,

00:09:13.280 --> 00:09:15.030
you probably find that they're too slow.

00:09:15.040 --> 00:09:16.940
They're not really giving
you the performance you want.

00:09:17.150 --> 00:09:19.780
And that means that because
your animations aren't fluid,

00:09:19.830 --> 00:09:21.460
they don't really fit
into the web content.

00:09:21.460 --> 00:09:22.770
They seem kind of out of place.

00:09:22.850 --> 00:09:26.800
You're not getting a native
feel to your web content.

00:09:27.030 --> 00:09:29.150
So today,
I'm going to talk about some new

00:09:29.200 --> 00:09:34.560
functions in Safari on iPhone 2.0 that
make all this a lot easier for you.

00:09:34.650 --> 00:09:38.110
You can get rid of all this old
JavaScript code that you had and

00:09:38.110 --> 00:09:41.110
replace it with just a few lines of CSS.

00:09:41.420 --> 00:09:43.530
It really is that easy.

00:09:43.980 --> 00:09:46.210
Also, on iPhones,
some of these transitions and

00:09:46.210 --> 00:09:50.490
animations are hardware-accelerated,
so you'll get really great performance.

00:09:51.220 --> 00:09:53.250
And once you start putting this
together with some of the new

00:09:53.340 --> 00:09:56.030
features on Safari on iPhone,
like touch events,

00:09:56.030 --> 00:09:59.730
you can generate some really
cool types of content.

00:10:00.390 --> 00:10:04.500
And let me show you a few examples that
we're going to be looking at in today's

00:10:04.520 --> 00:10:07.420
session and telling you how to build.

00:10:07.500 --> 00:10:10.000
This first one is a little
slide show that we built up,

00:10:10.130 --> 00:10:11.240
a little photo album.

00:10:11.380 --> 00:10:12.680
And we'll do a demo of that later.

00:10:12.680 --> 00:10:14.880
But it has a nice,
smooth transition between different

00:10:14.880 --> 00:10:16.680
sorting orders that you saw there.

00:10:17.380 --> 00:10:19.990
This second example is something
that tries to emulate the

00:10:19.990 --> 00:10:22.540
native menus on the iPhone.

00:10:22.620 --> 00:10:25.040
And it has nice smooth slides
and the blue highlights,

00:10:25.160 --> 00:10:27.090
so it feels really nice.

00:10:27.910 --> 00:10:31.460
This third one shows you that you can
do 3D transforms in web content now.

00:10:31.460 --> 00:10:33.880
We have something like a widget flip.

00:10:33.980 --> 00:10:37.980
And then finally, the one you just saw,
which is our fingertips browser.

00:10:37.980 --> 00:10:40.550
And I'll be talking in a bit
more detail about how we built

00:10:40.560 --> 00:10:42.900
this later in the session.

00:10:44.500 --> 00:10:46.580
So just really press home here.

00:10:46.650 --> 00:10:50.740
Everything is in web content
that we're doing here.

00:10:50.770 --> 00:10:55.270
We've added a bunch of new
CSS properties to Safari on iPhone 2.0.

00:10:55.520 --> 00:10:59.370
And those are properties-- and we
think that CSS is really the best

00:10:59.490 --> 00:11:02.720
place for these kinds of new functions.

00:11:02.870 --> 00:11:07.290
CSS cascading style sheets allows
you to separate the presentation

00:11:07.290 --> 00:11:10.620
of your content or presentation
of your document from the content.

00:11:10.650 --> 00:11:13.260
And transitions and transforms
and animations are very much

00:11:13.270 --> 00:11:14.600
presentational qualities.

00:11:14.660 --> 00:11:18.230
You should be able to load in a new style
sheet and get an entirely new set of

00:11:18.680 --> 00:11:21.390
transitions and animations in your page.

00:11:21.680 --> 00:11:25.120
Another nice property of CSS is
that older browsers will just

00:11:25.200 --> 00:11:30.240
ignore those new properties,
so you can write content that

00:11:30.240 --> 00:11:34.010
degrades gracefully in other browsers.

00:11:34.010 --> 00:11:34.010
And finally,

00:11:34.540 --> 00:11:36.310
Most of you are probably
familiar with web development,

00:11:36.320 --> 00:11:38.190
and this is just still web development.

00:11:38.210 --> 00:11:40.700
We're not adding any new
technologies that you have to learn.

00:11:40.780 --> 00:11:43.990
So it's a very small,
incremental amount of learning for you.

00:11:45.350 --> 00:11:46.490
I said most of it's in CSS.

00:11:46.610 --> 00:11:49.260
There are a few small amounts of new API.

00:11:49.380 --> 00:11:51.550
There are some DOM events for animations.

00:11:51.550 --> 00:11:52.960
We'll talk about those later.

00:11:53.080 --> 00:11:56.280
And we also have some new
JavaScript APIs related to

00:11:56.280 --> 00:11:58.920
some of the 3D transforms.

00:11:58.920 --> 00:12:00.540
But really, it's just web development.

00:12:00.540 --> 00:12:02.650
If you already know HTML, CSS,
and JavaScript,

00:12:02.650 --> 00:12:07.500
this is going to be really easy for you
to pick up and get running right away.

00:12:10.290 --> 00:12:15.700
So as I mentioned,
everything is in Safari on iPhone 2.0.

00:12:15.790 --> 00:12:19.360
Apple is committed to open standards,
and all the properties that I'm talking

00:12:19.460 --> 00:12:23.250
about today are included in some draft
proposals that we've submitted to

00:12:23.250 --> 00:12:25.800
the CSS working group of the W3C.

00:12:25.930 --> 00:12:29.200
And we hope that those
will be included in CSS3.

00:12:29.410 --> 00:12:33.540
You can read our proposals
online at webkit.org/specs.

00:12:33.640 --> 00:12:35.680
And because they are
still draft properties,

00:12:35.770 --> 00:12:37.520
they do have a -webkit prefix.

00:12:37.640 --> 00:12:41.840
So you'll see -webkit quite
a lot in our examples today.

00:12:42.740 --> 00:12:45.490
So let's summarize what we'll
cover in today's session.

00:12:45.590 --> 00:12:48.530
You may already have been to some of
the WebKit sessions where they've told

00:12:48.530 --> 00:12:50.250
you about 2D transforms and transitions.

00:12:50.380 --> 00:12:52.300
So we're going to go
over that fairly quickly.

00:12:52.300 --> 00:12:53.700
We'll just have a refresher.

00:12:53.700 --> 00:12:55.700
And then we'll get to the
meat of the presentation,

00:12:55.700 --> 00:13:00.200
which is keyframe animations
and then 3D transforms.

00:13:00.200 --> 00:13:02.400
And then finally,
we'll talk about how to bring some

00:13:02.400 --> 00:13:05.420
of this stuff together with some
of the other features on the phone,

00:13:05.420 --> 00:13:09.240
like touch events,
and then talk about how to get the

00:13:09.240 --> 00:13:12.970
best performance out out of the
phone when you're doing this stuff.

00:13:13.860 --> 00:13:16.460
So I'd like to start by
inviting Dean onto the stage,

00:13:16.460 --> 00:13:22.500
and he's going to show us a demo
using 2D transforms and transitions.

00:13:28.600 --> 00:13:29.360
Thanks, Simon.

00:13:29.360 --> 00:13:31.300
My name's Dean.

00:13:31.330 --> 00:13:35.380
Now, Simon, can we switch to the phone,
please?

00:13:41.510 --> 00:13:45.640
So Simon didn't tell you he's
actually an entomologist by training,

00:13:45.640 --> 00:13:50.240
and he likes taking photos of bugs,
these type of bugs at least.

00:13:50.550 --> 00:13:56.100
You'll also notice I'm pretty sure
he didn't use any Flash on this.

00:13:56.190 --> 00:14:03.190
So behind the scenes, at the moment,
he's arranged the photos in the

00:14:03.410 --> 00:14:06.500
order in which they were taken,
but let's suppose he's

00:14:06.500 --> 00:14:07.760
also picked favorites.

00:14:07.760 --> 00:14:11.060
So I can click a button
down the bottom here,

00:14:11.060 --> 00:14:14.130
and it resorted the photos
into favorite order,

00:14:14.310 --> 00:14:15.780
and I can switch back.

00:14:15.920 --> 00:14:17.540
Now,
this is something that's really common,

00:14:17.640 --> 00:14:19.500
is not showing anything new here.

00:14:19.500 --> 00:14:22.740
But suppose he wanted a more
organic feel to his website.

00:14:22.740 --> 00:14:25.730
So let's apply a random
rotation to some of the photos.

00:14:25.730 --> 00:14:30.130
And you can see here we've laid out the
images in a sort of more natural feel,

00:14:30.140 --> 00:14:32.920
as if they've been
thrown down on a table.

00:14:32.920 --> 00:14:36.450
Now, this is something you wouldn't have
been able to do previously without

00:14:36.450 --> 00:14:39.490
either going back to the server and
getting the server to generate a

00:14:39.570 --> 00:14:43.860
new image and sending it back down,
or using something like Canvas.

00:14:44.260 --> 00:14:46.820
But in this case,
we've applied transformations

00:14:47.390 --> 00:14:48.590
that are hardware-accelerated.

00:14:48.700 --> 00:14:52.300
So you can see I can tap this,
getting really quick response,

00:14:52.370 --> 00:14:56.420
because the compositing
is done in hardware.

00:14:56.920 --> 00:15:01.040
Now, the iPhone, as Simon mentioned,
we've got touch and gesture events here.

00:15:01.040 --> 00:15:03.830
So let's say I want to reorder
these photos or arrange

00:15:03.830 --> 00:15:05.400
them in a particular way.

00:15:05.400 --> 00:15:06.640
I just tap on the photo.

00:15:06.640 --> 00:15:07.780
I can move it around.

00:15:07.780 --> 00:15:09.920
Again, you can see you're getting
really great performance here.

00:15:09.920 --> 00:15:12.520
But let's suppose I want to zoom in.

00:15:12.520 --> 00:15:16.140
So I can attach a JavaScript event
listener to the pinch

00:15:16.570 --> 00:15:18.540
event or the rotate event.

00:15:18.540 --> 00:15:21.810
And here,
I can resize them or rotate them.

00:15:21.810 --> 00:15:24.220
Again, great performance.

00:15:25.560 --> 00:15:27.840
So once you have this great performance,
maybe you want to go

00:15:27.840 --> 00:15:28.800
a little bit further.

00:15:28.800 --> 00:15:31.800
Oops.

00:15:33.850 --> 00:15:35.910
Now here we've got the same demo again.

00:15:36.140 --> 00:15:38.030
The photos are sorted in date order.

00:15:38.080 --> 00:15:41.730
But suppose I -- rather than
just snap to the final value,

00:15:41.780 --> 00:15:45.360
I want to have an animation
as I move to the new sorting.

00:15:45.360 --> 00:15:48.400
So in this case with JavaScript,
when I click on the favorite button,

00:15:48.450 --> 00:15:51.090
I just tell the browser which
order I want the photos in,

00:15:51.090 --> 00:15:53.480
and it's the web browser
that does the animation.

00:15:53.480 --> 00:15:56.760
It's the one that calculates all the
little intermediate steps and moves

00:15:57.050 --> 00:15:59.200
the photos to the final position.

00:15:59.260 --> 00:15:59.970
Again, it's really easy.

00:15:59.970 --> 00:16:01.370
I'm just setting the final state.

00:16:01.440 --> 00:16:04.330
The browser knows what the current
state is and does everything else.

00:16:04.500 --> 00:16:06.370
And you can do this between any state.

00:16:06.370 --> 00:16:09.110
So as I go to the rotated view,
you can see I didn't have to do

00:16:09.200 --> 00:16:13.920
anything special just because the
photos have a transform on it.

00:16:15.050 --> 00:16:17.800
Now, with these transforms,
they're really powerful.

00:16:17.800 --> 00:16:20.240
You do some amazing effects,
and Keynote is a great

00:16:20.240 --> 00:16:21.550
example of some effects.

00:16:21.600 --> 00:16:22.670
So here we go.

00:16:22.950 --> 00:16:24.440
I just start an animation here.

00:16:24.440 --> 00:16:27.370
And all I'm doing here is
setting a slideshow that says,

00:16:27.370 --> 00:16:29.720
you know, every second over time,
it says,

00:16:29.730 --> 00:16:31.840
move this current photo into view.

00:16:31.840 --> 00:16:40.160
And when I'm done with the slideshow,
I can just tap, and it'll transition

00:16:40.160 --> 00:16:43.060
back to the final state.

00:16:43.060 --> 00:16:43.440
So, thanks.

00:16:44.410 --> 00:16:48.360
Now, the really important thing to
learn here is that these two demos,

00:16:48.360 --> 00:16:50.990
the first demo and the second demo,
were identical except

00:16:51.270 --> 00:16:52.800
for two lines of CSS.

00:16:52.920 --> 00:16:55.880
I actually got that animation
and those transitions by adding

00:16:56.070 --> 00:16:57.500
just two lines to the CSS.

00:16:57.610 --> 00:17:05.530
And I'm going to invite Simon back,
and he's going to show you

00:17:05.530 --> 00:17:09.030
exactly what those two lines are.

00:17:09.030 --> 00:17:09.030
Go back to slides, please.

00:17:12.610 --> 00:17:14.260
OK, so this is the demo you just saw.

00:17:14.330 --> 00:17:18.140
And we're going to look at 2D transforms
and transitions by pulling apart this

00:17:18.400 --> 00:17:22.800
demo to see the really important bits,
to see what made it really tick.

00:17:23.720 --> 00:17:25.250
So CSS 2D Transforms.

00:17:25.280 --> 00:17:27.660
You've probably heard about
these already in the context

00:17:27.660 --> 00:17:29.560
of some of the WebKit sessions.

00:17:29.670 --> 00:17:32.000
So there's a new property
called WebKit Transform.

00:17:32.030 --> 00:17:36.120
And that allows you to
change the rendering location

00:17:36.120 --> 00:17:37.540
of something on the page.

00:17:37.570 --> 00:17:40.440
And 2D Transforms, of course,
just let you do affine transforms.

00:17:40.490 --> 00:17:43.220
Things like translate, rotate, scale,
and skew.

00:17:43.220 --> 00:17:45.360
And you're probably familiar
with those from SVG,

00:17:45.360 --> 00:17:48.750
or even maybe Core Graphics if
you've done some native coding.

00:17:49.750 --> 00:17:52.870
And you can also control the
origin of the transform with

00:17:52.950 --> 00:17:54.150
WebKit Transform Origin.

00:17:54.200 --> 00:17:55.800
And that's actually quite useful.

00:17:55.810 --> 00:17:57.760
And we'll see that later in the session.

00:17:58.630 --> 00:18:01.830
So a very simple example here,
we've got a div on our web page which

00:18:01.870 --> 00:18:03.870
we've given a class name called box.

00:18:04.200 --> 00:18:07.000
That means we can style it
with a dot box selector.

00:18:07.210 --> 00:18:08.830
And now we're just going
to add a transform.

00:18:08.960 --> 00:18:10.790
In this case,
we're using a translate of 400

00:18:10.890 --> 00:18:12.460
pixels in x and 200 pixels in y.

00:18:12.460 --> 00:18:14.990
And that's going to cause the
box just to render in that

00:18:15.000 --> 00:18:17.120
new location with that offset.

00:18:17.480 --> 00:18:18.520
We used pixel values there.

00:18:18.520 --> 00:18:21.620
You can also use percentages
and other CSS lengths.

00:18:21.730 --> 00:18:24.530
So we can translate by 150%,
and that's going to move it

00:18:24.530 --> 00:18:26.080
by 1 and 1/2 times its width.

00:18:26.100 --> 00:18:29.480
And then we can also
translate by other m values,

00:18:29.490 --> 00:18:33.590
which is going to push it down
by four times the line height.

00:18:34.210 --> 00:18:36.600
Rotations are very similar.

00:18:36.620 --> 00:18:38.420
We can apply a rotate transform.

00:18:38.580 --> 00:18:42.430
In this case, we're using degrees,
but you can also use grads and radians.

00:18:42.520 --> 00:18:46.140
You can also concatenate these transforms
together to form compound transforms.

00:18:46.280 --> 00:18:48.620
So here,
we're doing a rotate followed by a scale,

00:18:48.690 --> 00:18:51.890
and those get applied in the
order in which you expect.

00:18:52.780 --> 00:18:54.000
So I mentioned transform origin.

00:18:54.000 --> 00:18:55.950
And by default,
the origin of the transform is

00:18:55.950 --> 00:18:57.420
in the center of the border box.

00:18:57.650 --> 00:19:01.560
So the default value is 50%, 50%.
You can see the red dot here,

00:19:01.700 --> 00:19:03.380
which represents the origin.

00:19:03.400 --> 00:19:05.300
And we can move that.

00:19:06.290 --> 00:19:08.710
to, say, the top left corner by
using those keywords,

00:19:08.850 --> 00:19:10.060
top left.

00:19:10.090 --> 00:19:14.190
And now if we rotate the box,
it's going to rotate about that corner.

00:19:14.670 --> 00:19:16.020
Here's another simple example.

00:19:16.090 --> 00:19:18.180
We'll put it on the middle
of the right-hand side.

00:19:18.180 --> 00:19:19.930
The box is 200 pixels wide.

00:19:20.070 --> 00:19:22.980
And again, that's going to be the
origin of our rotation.

00:19:24.480 --> 00:19:29.230
So let's go back to the demo we saw
and look at the HTML and JavaScript to

00:19:29.230 --> 00:19:31.690
see how we laid out these images.

00:19:32.680 --> 00:19:33.980
So because we have a
bunch of images here,

00:19:33.980 --> 00:19:35.600
we don't want to write
fixed CSS for these.

00:19:35.600 --> 00:19:38.110
We're going to position
things using JavaScript.

00:19:38.200 --> 00:19:39.080
And it's very simple.

00:19:39.080 --> 00:19:41.360
We simply loop through the photographs.

00:19:41.450 --> 00:19:46.120
We compute an x and a y position based on
the location of the picture in the grid.

00:19:46.120 --> 00:19:48.150
And then we're building
up a translate string,

00:19:48.190 --> 00:19:49.950
just using string
concatenation in JavaScript.

00:19:50.100 --> 00:19:51.060
It's very simple.

00:19:51.150 --> 00:19:53.230
And we're assigning that
to style.webkit-transform.

00:19:53.530 --> 00:19:56.110
And that's setting the
inline style on the element.

00:19:56.320 --> 00:19:59.800
You'll notice that in CSS,
we use dash webkit dash transform.

00:19:59.980 --> 00:20:01.560
And here, that became camel case.

00:20:01.630 --> 00:20:03.920
It became webkit capital T transform.

00:20:03.920 --> 00:20:06.790
And that's a standard conversion
that happens when you're accessing

00:20:06.800 --> 00:20:09.140
CSS properties from JavaScript.

00:20:09.830 --> 00:20:12.340
Now, the random view that we saw,
the light table view,

00:20:12.380 --> 00:20:14.640
is almost as simple.

00:20:14.690 --> 00:20:17.640
In this case, we can compute an x and
a y position at random,

00:20:17.670 --> 00:20:19.330
and we can also compute an angle.

00:20:19.410 --> 00:20:21.550
And then we're building
a compound transform,

00:20:21.660 --> 00:20:23.670
which is a translate
followed by a rotate,

00:20:23.670 --> 00:20:25.670
and assigning to WebKit transform.

00:20:27.600 --> 00:20:30.700
So let me just summarize
2D transforms very quickly.

00:20:30.850 --> 00:20:32.940
The property is WebKit Transform,
and there are various

00:20:32.940 --> 00:20:35.090
values like translate,
rotate, scale, and skew.

00:20:35.200 --> 00:20:38.120
And these are going to
give you affine transforms.

00:20:38.380 --> 00:20:40.870
And if you need to,
you can control the origin of the

00:20:40.870 --> 00:20:43.330
transform with WebKit Transform Origin.

00:20:43.500 --> 00:20:46.630
Now, a couple of things to note when
you start transforming elements.

00:20:46.710 --> 00:20:48.920
The first is they make
an element positioned.

00:20:49.000 --> 00:20:51.420
That means that if the element
doesn't already have position,

00:20:51.420 --> 00:20:53.380
like position absolute
or position relative,

00:20:53.460 --> 00:20:55.470
it will behave as if it
had position relative.

00:20:55.480 --> 00:20:58.210
And that can change the positioning
of some of its child elements if

00:20:58.210 --> 00:21:00.760
those child elements use positioning.

00:21:01.240 --> 00:21:04.160
And the second thing for the
CSS gurus in the audience is that

00:21:04.160 --> 00:21:06.260
transforms create stacking context.

00:21:06.400 --> 00:21:09.800
That means that the element is going to
behave as if it had an explicit z-index,

00:21:09.900 --> 00:21:13.160
and that may change the front-to-back
ordering of some other elements on

00:21:13.160 --> 00:21:14.980
the web page that also use z-index.

00:21:16.100 --> 00:21:21.660
And CSS 2D Transforms are available
on the desktop in Safari 3.1 and

00:21:21.660 --> 00:21:24.990
also now in Safari on iPhone 2.0.

00:21:27.190 --> 00:21:28.480
So transitions now.

00:21:28.480 --> 00:21:30.210
And we saw transitions
working in the demo.

00:21:30.220 --> 00:21:34.250
They allowed Dean to show the nice,
smooth animations between

00:21:34.250 --> 00:21:35.240
the different states.

00:21:35.330 --> 00:21:38.380
So transitions are these automatic
animations that you get when

00:21:38.390 --> 00:21:40.140
CSS property values change.

00:21:40.180 --> 00:21:43.800
You can think of them
as implicit animations.

00:21:44.220 --> 00:21:48.280
Essentially, what's happening is when the
value of a CSS property changes,

00:21:48.350 --> 00:21:51.250
the engine is doing this
interpolation kind of under the

00:21:51.260 --> 00:21:53.160
hood over some period of time.

00:21:53.270 --> 00:21:56.850
And transitions are going to run whenever
the values of the properties change.

00:21:56.960 --> 00:21:59.540
So if you change a value through
maybe setting inline style

00:21:59.630 --> 00:22:01.950
or setting a class attribute,
which then brings in

00:22:01.950 --> 00:22:04.930
some new style rules,
or maybe on active style, you know,

00:22:05.050 --> 00:22:08.800
for a clickable element,
then you will get transitions.

00:22:09.020 --> 00:22:12.190
And you set up the transitions and
control them with various properties,

00:22:12.190 --> 00:22:13.560
which we'll see.

00:22:13.560 --> 00:22:16.650
You can control which CSS properties
are going to undergo transitions

00:22:16.700 --> 00:22:20.350
and how long the transitions take,
how they move-- in other words,

00:22:20.390 --> 00:22:22.440
an acceleration curve or timing function.

00:22:22.470 --> 00:22:26.080
And you can also set a delay
before the start of the transition.

00:22:26.510 --> 00:22:28.840
So let's go back to our box example here.

00:22:28.970 --> 00:22:33.040
Same box, but we set up a couple of
style rules that specify that

00:22:33.040 --> 00:22:34.740
WebKit Transform is going to transition.

00:22:34.780 --> 00:22:37.320
And it's going to take
two seconds to do that.

00:22:37.430 --> 00:22:39.730
And now when the transform changes,
we'll get a nice,

00:22:39.730 --> 00:22:42.200
smooth animation from the
old state to the new state.

00:22:42.360 --> 00:22:46.300
And we didn't have to do any extra
work to make that animation take place.

00:22:47.460 --> 00:22:48.440
Let's go back to our example.

00:22:48.440 --> 00:22:51.250
And Dean said when he demoed it,
this was just two lines of

00:22:51.250 --> 00:22:54.560
CSS to have these really cool,
smooth transitions

00:22:54.620 --> 00:22:56.670
between the sort orders.

00:22:57.090 --> 00:22:58.870
And these are those lines of CSS.

00:22:58.870 --> 00:23:01.810
We're setting WebKit transition
property to WebKit transform.

00:23:01.920 --> 00:23:04.930
And we're specifying that the transition
is going to take half a second.

00:23:05.040 --> 00:23:06.220
And that's all it was.

00:23:06.370 --> 00:23:11.910
And those styles are being set on the
photo elements on each picture there.

00:23:14.050 --> 00:23:16.300
I mentioned you can control
the acceleration curve.

00:23:16.300 --> 00:23:19.720
Technically, that's known as the timing
function of the transition.

00:23:19.770 --> 00:23:22.590
And there are a number of
built-in timing functions.

00:23:22.690 --> 00:23:26.080
The property is
WebKitTransitionTimingFunction.

00:23:26.240 --> 00:23:30.530
And the built-in curves that
you can get are the following.

00:23:30.540 --> 00:23:32.620
There's ease, and this gives you a nice,
smooth,

00:23:32.620 --> 00:23:36.980
organic animation that kind of starts
slowly and speeds up and then slows down.

00:23:37.150 --> 00:23:39.820
There's linear,
which is constant velocity.

00:23:39.860 --> 00:23:43.140
Ease in, which has a smooth start
and then speeds up.

00:23:43.180 --> 00:23:46.150
Ease out,
which starts quickly and then slows down.

00:23:46.280 --> 00:23:47.990
And then ease in,
which is slow at both ends

00:23:48.020 --> 00:23:50.090
and fast in the middle.

00:23:50.410 --> 00:23:53.240
And if you want to get really fancy,
you can specify your own timing

00:23:53.240 --> 00:23:55.700
function with the cubic Bezier function.

00:23:55.720 --> 00:23:57.520
And here,
what you're doing is you're specifying

00:23:57.520 --> 00:24:02.040
the two control points of a Bezier curve,
the orange line in the picture.

00:24:02.300 --> 00:24:04.140
And you can imagine,
just like Bezier programs

00:24:04.140 --> 00:24:07.190
like Illustrator or something,
you're controlling how that curve

00:24:07.330 --> 00:24:10.770
is moving by the control points.

00:24:12.510 --> 00:24:14.900
So quickly,
let's summarize CSS transitions.

00:24:14.960 --> 00:24:17.320
They're these automatic
animations that you get really

00:24:17.320 --> 00:24:19.160
for free just by setting them up.

00:24:19.290 --> 00:24:22.650
And you can control which CSS properties
are going to undergo transitions

00:24:22.650 --> 00:24:24.780
with WebKit transition property.

00:24:24.830 --> 00:24:27.330
Now, the default value for
WebKit transition property is all,

00:24:27.330 --> 00:24:30.550
which means that the engine will
try to animate as many things as

00:24:30.690 --> 00:24:33.040
it knows about or it can animate.

00:24:33.110 --> 00:24:34.880
On the phone,
that's not always a good idea,

00:24:34.880 --> 00:24:37.990
because you really want to
restrict animations to the things

00:24:38.080 --> 00:24:39.540
that your users are going to see.

00:24:39.800 --> 00:24:44.570
And so it's a good idea to set a specific
WebKit transition property just for the

00:24:44.570 --> 00:24:47.530
things you want to undergo transitions.

00:24:47.910 --> 00:24:50.400
Then you can control how long
the transition takes with

00:24:50.400 --> 00:24:54.050
WebKit transition duration,
and how it moves with WebKit transition

00:24:54.050 --> 00:24:56.120
timing function that we just saw.

00:24:56.250 --> 00:24:58.170
And finally,
something we didn't use in the demos,

00:24:58.170 --> 00:25:00.420
but is often very useful,
is a delay before the

00:25:00.550 --> 00:25:01.760
start of the transition.

00:25:01.860 --> 00:25:05.200
And this allows you to do fairly complex
builds where maybe you set a class

00:25:05.200 --> 00:25:08.390
attribute on some container element,
and then you can have the children

00:25:08.420 --> 00:25:11.410
of that element flow in one by one
by using WebKit transition delay.

00:25:11.420 --> 00:25:15.900
So that's quite a nice kind of feature
that can give you some really nice

00:25:15.900 --> 00:25:19.030
cinematic qualities to your transitions.

00:25:19.500 --> 00:25:23.910
And transitions, just like 2D transforms,
are available in Safari on the desktop,

00:25:23.950 --> 00:25:28.770
in Safari 3.1,
and also Safari on iPhone 2.0 now.

00:25:32.690 --> 00:25:35.400
So we've just talked about transitions,
which are these automatic,

00:25:35.400 --> 00:25:38.000
kind of implicit animations.

00:25:38.040 --> 00:25:41.220
Often you want to do a richer,
more controllable animation.

00:25:41.280 --> 00:25:44.080
You want to have something maybe
that repeats a bunch of times,

00:25:44.080 --> 00:25:46.030
or that you can start
and stop explicitly.

00:25:46.240 --> 00:25:49.600
And you can think of this as something
like the dock bounce in Mac OS X.

00:25:49.720 --> 00:25:51.970
You want to tell something
to start bouncing and then

00:25:51.970 --> 00:25:53.410
tell it to stop bouncing.

00:25:53.530 --> 00:25:55.640
And you can't easily do
that with transitions,

00:25:55.730 --> 00:25:58.320
so we've added something else,
which is keyframe animations,

00:25:58.360 --> 00:26:00.420
again described in CSS.

00:26:00.480 --> 00:26:03.660
And I'd like to invite
Dean back on the stage.

00:26:03.860 --> 00:26:06.990
And Dean's going to show us an old
version of a website that he has

00:26:07.090 --> 00:26:09.140
for some side business that he runs.

00:26:09.220 --> 00:26:10.810
And then that used JavaScript.

00:26:11.070 --> 00:26:12.980
And then he's going to
show us the new version,

00:26:12.980 --> 00:26:17.300
which is taken to the next
level with keyframe animations.

00:26:17.370 --> 00:26:18.180
Thanks, Dean.

00:26:18.280 --> 00:26:19.830
DEAN JOHN MANNING: Thanks, Simon.

00:26:23.660 --> 00:26:27.860
So working at Apple is really awesome,
but like most programmers,

00:26:27.900 --> 00:26:31.530
what I really want to do
is be a landscape gardener.

00:26:31.670 --> 00:26:34.800
So, of course,
who wants to be a run-of-the-mill

00:26:34.800 --> 00:26:38.420
landscape gardener when I can
be a Web 2.0 landscape gardener?

00:26:38.520 --> 00:26:40.440
So I thought,
I'm going to have a website.

00:26:40.440 --> 00:26:42.120
And I'm not just going
to have any website.

00:26:42.120 --> 00:26:43.910
I want a little bit of oomph to it.

00:26:44.030 --> 00:26:46.260
And so I might add some animation.

00:26:46.280 --> 00:26:48.690
In this case,
I've got using JavaScript to

00:26:48.690 --> 00:26:50.060
animate some leaves.

00:26:50.120 --> 00:26:54.420
Now, what's actually on the screen
there is about 30 leaves,

00:26:54.420 --> 00:26:58.740
randomly chosen,
and a JavaScript timer that's running

00:26:58.740 --> 00:27:03.440
as fast as it possibly can to move the
leaves a little increment down the page.

00:27:03.440 --> 00:27:06.530
And when they get to the bottom,
as they fall off the bottom of the page,

00:27:06.650 --> 00:27:09.130
they snap back to the top
and start falling again.

00:27:09.140 --> 00:27:11.660
Now,
there's a few things you'll notice here.

00:27:11.660 --> 00:27:15.470
One is you're getting, you know,
basically you can see each step,

00:27:15.550 --> 00:27:19.140
and the animation isn't
really smooth at all.

00:27:19.140 --> 00:27:21.480
Also,
there's a fair bit of code behind this.

00:27:21.480 --> 00:27:25.520
And, well, you know,
it really just doesn't look so fantastic.

00:27:26.180 --> 00:27:29.070
My landscape business isn't
going to take off enough for me

00:27:29.080 --> 00:27:30.780
to give up my programming job.

00:27:30.780 --> 00:27:35.400
So let's reimplement it
using CSS animations.

00:27:36.320 --> 00:27:40.050
So right away,
you'll notice when they come on stage,

00:27:40.050 --> 00:27:42.260
you've got this incredible
improvement in performance.

00:27:42.410 --> 00:27:47.140
There's no longer any jerks,
and everyone hates jerks.

00:27:50.150 --> 00:27:54.360
We've gone from about between six
and eight frames per second to about

00:27:54.360 --> 00:27:57.950
between over 40 frames a second,
so really impressive

00:27:57.950 --> 00:27:59.960
performance improvement.

00:27:59.960 --> 00:28:03.050
And that's because, again,
we're using the hardware acceleration

00:28:03.050 --> 00:28:04.620
on the phone to speed things up.

00:28:04.680 --> 00:28:07.920
Another thing you might notice
is there's a few differences

00:28:08.010 --> 00:28:09.880
from the previous animation.

00:28:09.880 --> 00:28:12.730
First is, rather than the leaves
falling straight down,

00:28:12.730 --> 00:28:16.460
they've got a slight little rotation to
them to make them look a little bit more

00:28:16.460 --> 00:28:18.800
like the way a leaf would typically fall.

00:28:18.800 --> 00:28:23.290
Now, so again, at 40 frames a second,
we're rotating 30 images in this case.

00:28:23.370 --> 00:28:26.680
Again, something you couldn't possibly do
if you were just using JavaScript.

00:28:26.750 --> 00:28:28.940
Again, it's the hardware acceleration
that's doing that.

00:28:29.000 --> 00:28:33.080
Secondly, you might notice that rather
than just dropping directly

00:28:33.120 --> 00:28:36.690
off the bottom of the screen,
as they get towards the bottom,

00:28:36.820 --> 00:28:39.180
they fade out very, very slightly.

00:28:39.440 --> 00:28:43.870
Now, it's important to describe
what this does to you.

00:28:44.180 --> 00:28:46.600
The first thing is, you know,
you're getting this incredible

00:28:46.770 --> 00:28:48.450
performance improvement,
but secondly,

00:28:48.460 --> 00:28:52.660
you also don't have a busy loop in
JavaScript that's chewing up the CPU,

00:28:52.660 --> 00:28:54.280
moving all the images.

00:28:54.280 --> 00:28:57.020
You've just set the properties once
and the animations are happening.

00:28:57.140 --> 00:28:59.270
Secondly,
we've moved from about 100 lines of

00:28:59.320 --> 00:29:01.620
JavaScript into about 10 lines of CSS.

00:29:01.620 --> 00:29:03.460
So that's fantastic for two reasons.

00:29:03.460 --> 00:29:04.920
One is there's less code to maintain.

00:29:05.290 --> 00:29:07.020
Secondly,
it's a declarative format rather

00:29:07.020 --> 00:29:08.350
than a programming format.

00:29:08.350 --> 00:29:10.700
So again, it's, again,
more easy to maintain.

00:29:10.700 --> 00:29:13.310
And also,
someone that's not a JavaScript expert

00:29:13.370 --> 00:29:15.730
that's a web designer,
say, just knows CSS,

00:29:15.860 --> 00:29:19.120
can start putting these
animations into websites without

00:29:19.120 --> 00:29:21.120
having to learn JavaScript.

00:29:21.170 --> 00:29:23.840
So that's the demo.

00:29:24.010 --> 00:29:26.540
Again, like the last time,
Simon's going to come back and

00:29:26.540 --> 00:29:29.640
show you how we built it and how to
get it working on your own sites.

00:29:29.780 --> 00:29:31.780
Thank you.

00:29:37.810 --> 00:29:41.650
OK, so let's learn about CSS keyframe
animations by pulling this demo

00:29:41.870 --> 00:29:45.670
apart and looking at the various
animations we have in there.

00:29:47.470 --> 00:29:49.030
First of all,
let's talk a little bit about

00:29:49.120 --> 00:29:50.340
how to set up animations.

00:29:50.440 --> 00:29:53.270
So CSS keyframe animations are a
little more complex than transitions,

00:29:53.270 --> 00:29:56.960
simply because you have more control over
the way the animation is going to move.

00:29:57.040 --> 00:30:00.580
The first thing you need to do is to
describe the keyframes for the animation.

00:30:00.750 --> 00:30:04.670
And we've added a new @ rule to CSS,
and you'll see that in a moment.

00:30:05.000 --> 00:30:09.180
Secondly, you need to apply that set
of keyframes to an element.

00:30:09.180 --> 00:30:11.740
And then you have a bunch of
properties that allow you to control

00:30:11.750 --> 00:30:13.690
the behavior of the animation,
how long it takes,

00:30:13.750 --> 00:30:15.400
how many times it repeats, and so on.

00:30:15.400 --> 00:30:17.690
And we'll see those as we go on.

00:30:19.320 --> 00:30:22.020
CSS animations,
keyframe animations are only available

00:30:22.040 --> 00:30:25.020
right now in Safari on iPhone 2.0.

00:30:26.060 --> 00:30:27.750
So Dean just showed us this.

00:30:27.850 --> 00:30:29.500
Let's start pulling it apart.

00:30:29.500 --> 00:30:31.310
First of all,
I'm just going to show you some

00:30:31.320 --> 00:30:33.720
markup and some JavaScript to
show that this is real.

00:30:33.720 --> 00:30:35.410
This is not fake.

00:30:35.710 --> 00:30:37.530
We've got two divs in our web page.

00:30:37.590 --> 00:30:39.010
The first one is just a container.

00:30:39.020 --> 00:30:41.340
And we're going to add leaves
dynamically to that through JavaScript.

00:30:41.340 --> 00:30:42.840
Again,
just because it's repetitive stuff,

00:30:42.840 --> 00:30:47.300
and we don't want to have to manly
code all those boring lines of HTML.

00:30:47.750 --> 00:30:49.880
So here's the JavaScript that
sets up the leaves.

00:30:49.960 --> 00:30:51.480
It's just going to run on page load.

00:30:51.540 --> 00:30:55.080
And it's using standard
DOM APIs to find the leaf container

00:30:55.080 --> 00:30:57.940
element with getElementById,
and then run through a loop,

00:30:58.080 --> 00:31:02.350
create a leaf, and then append the
leaf to that container.

00:31:02.510 --> 00:31:06.980
And creating the leaf is, again,
just normal, standard JavaScript-making,

00:31:06.980 --> 00:31:08.500
calling DOM APIs.

00:31:08.600 --> 00:31:10.530
If you're actually generating
content on the fly,

00:31:10.620 --> 00:31:12.060
please do use the DOM APIs.

00:31:12.100 --> 00:31:14.290
Don't use document.write.

00:31:14.460 --> 00:31:16.180
That's evil, and you should never use it.

00:31:16.310 --> 00:31:18.500
It's very inefficient.

00:31:18.550 --> 00:31:19.320
So standard stuff here.

00:31:19.320 --> 00:31:21.240
We're going to create a div,
and we're going to give

00:31:21.310 --> 00:31:24.200
it a class name of leaf,
so we can style it in CSS.

00:31:24.470 --> 00:31:28.200
And then we create an image element,
and we assign an image URL at random from

00:31:28.200 --> 00:31:30.200
some four or five images that we have.

00:31:30.230 --> 00:31:33.550
And we append that image
element to its leaf container.

00:31:33.640 --> 00:31:36.810
And you'll see a bit later on
why we have this structure of a

00:31:36.820 --> 00:31:39.100
div with an image inside of it.

00:31:40.710 --> 00:31:43.190
So the first animation there
is the major animation,

00:31:43.190 --> 00:31:45.440
which is going to move the
leaf from the top of the screen

00:31:45.440 --> 00:31:46.780
to the bottom of the screen.

00:31:46.940 --> 00:31:49.000
So that's the fall animation.

00:31:49.110 --> 00:31:51.230
And as I mentioned,
the first thing we do when we're

00:31:51.250 --> 00:31:55.780
setting up an animation is to describe
that animation as a set of key frames.

00:31:55.910 --> 00:31:58.060
So this is the @ rule that I mentioned.

00:31:58.060 --> 00:32:00.700
And because it's in draft form,
it has a WebKit prefix.

00:32:00.860 --> 00:32:03.800
So it's @-webkit-keyframes.

00:32:03.900 --> 00:32:06.860
And then we give the set of key
frames a name so we can identify it.

00:32:06.950 --> 00:32:08.360
And that name can be anything you like.

00:32:08.360 --> 00:32:10.930
So we're using fall in this case.

00:32:11.400 --> 00:32:15.380
Inside of the keyframes are the
actual keyframes themselves.

00:32:15.640 --> 00:32:16.500
And we've got two here.

00:32:16.500 --> 00:32:19.100
We've got an initial state,
which is the from keyframe,

00:32:19.200 --> 00:32:22.300
and then the target state,
the to keyframe.

00:32:22.500 --> 00:32:26.160
And within those keyframes are the actual
style rules that we want to animate.

00:32:26.260 --> 00:32:28.930
In this case,
we're going to animate WebKit Transform.

00:32:29.060 --> 00:32:33.180
And so our initial state is going to
be a translate in Y of minus 50 pixels.

00:32:33.400 --> 00:32:37.330
So that starts the leaf off
above the top of the screen.

00:32:37.440 --> 00:32:40.040
And then a final state
is positive 600 pixels.

00:32:40.040 --> 00:32:44.030
So that's going to move the leaf
down below the bottom of the screen.

00:32:44.600 --> 00:32:46.160
So we've described our keyframes.

00:32:46.200 --> 00:32:49.310
Now we need to actually apply those
keyframes to the leaf elements.

00:32:49.500 --> 00:32:51.990
And we do that using the
following style rules.

00:32:52.260 --> 00:32:56.060
We've set WebKitAnimationName to 4,
which is the name of the keyframes.

00:32:56.120 --> 00:32:57.980
And we're going to use a
duration of 10 seconds.

00:32:58.110 --> 00:33:00.700
So our leaves will take 10 seconds
to progress from the top of the

00:33:00.780 --> 00:33:02.990
screen to the bottom of the screen.

00:33:03.460 --> 00:33:06.430
And then we want the leaves to keep
going for as long as the page is loaded.

00:33:06.440 --> 00:33:09.460
So we're using an animation
iteration count of infinite.

00:33:09.510 --> 00:33:12.000
You can, of course,
use numbers like three and four.

00:33:12.000 --> 00:33:15.380
But we want to use the keyword infinite,
so they just keep going.

00:33:15.450 --> 00:33:20.080
And then we want our leaves to
progress from the top to the

00:33:20.080 --> 00:33:22.880
bottom at a constant velocity.

00:33:22.880 --> 00:33:25.470
So we're using the linear
WebKit animation timing function.

00:33:25.470 --> 00:33:25.470
So let's actually see what
this animation looks like now.

00:33:26.540 --> 00:33:29.890
So it's just a constant velocity
move from the top to the bottom.

00:33:29.900 --> 00:33:32.360
When it gets to the bottom,
it's going to snap back to

00:33:32.360 --> 00:33:34.200
the top and start again.

00:33:35.800 --> 00:33:37.860
Very straightforward at this point.

00:33:37.910 --> 00:33:39.320
Now, you'll notice when the
leaf got to the end,

00:33:39.320 --> 00:33:42.440
it just snapped out and then
reappeared back at the top.

00:33:42.500 --> 00:33:45.520
We want that to be a little more organic,
so we've added another animation

00:33:45.520 --> 00:33:47.640
we're calling the fade animation.

00:33:47.680 --> 00:33:49.350
What that's going to do is
it's going to fade out the leaf

00:33:49.440 --> 00:33:51.760
towards the end of its travel.

00:33:52.380 --> 00:33:53.840
So we have another set of keyframes.

00:33:53.920 --> 00:33:55.780
This time we're naming them Fade.

00:33:56.030 --> 00:33:59.010
And these are going to
animate the opacity property.

00:33:59.400 --> 00:34:02.050
And we're using three keyframes here.

00:34:02.150 --> 00:34:04.940
We have an initial keyframe
at 0%. You can either use

00:34:04.940 --> 00:34:07.210
from or 0%. That's anonymous.

00:34:07.300 --> 00:34:10.450
And opacity is 1 in the initial state.

00:34:10.560 --> 00:34:14.430
And then at 75%, we have
another keyframe with opacity 1.

00:34:14.550 --> 00:34:19.660
And then at 100%, or the two state,
we're going to animate to opacity 0.

00:34:19.750 --> 00:34:22.780
So that means for 3/4 of its travel,
the leaf is going to

00:34:22.780 --> 00:34:23.900
still have opacity 1.

00:34:23.990 --> 00:34:26.580
And then between that 75%
point and the 100% point,

00:34:26.580 --> 00:34:29.410
the leaf is going to
animate to opacity 0.

00:34:29.840 --> 00:34:32.430
And just as before,
we apply that animation to the leaf

00:34:32.430 --> 00:34:36.180
divs-- .leaf is the container div,
by the way-- using the

00:34:36.180 --> 00:34:38.020
WebKitAnimationName property.

00:34:38.090 --> 00:34:40.270
So now we have two animations
running on our leaf divs.

00:34:40.280 --> 00:34:41.850
We have the fall one and the fade one.

00:34:42.120 --> 00:34:46.080
And we can use comma-separated
values in the CSS to concatenate

00:34:46.080 --> 00:34:47.970
the animations together.

00:34:48.360 --> 00:34:50.520
They both have a duration of 10 seconds.

00:34:50.570 --> 00:34:53.210
And that's actually why we
set up the keyframes this way.

00:34:53.510 --> 00:34:55.190
We want these animations
to be synchronized.

00:34:55.310 --> 00:34:59.580
We want the progression down the screen
to synchronize with the opacity phase,

00:34:59.580 --> 00:35:02.920
so the opacity phase always
starts at that 75% point.

00:35:02.970 --> 00:35:07.930
And so we've set them both to
iterate an infinite number of times

00:35:07.930 --> 00:35:09.420
and both have the same duration.

00:35:09.480 --> 00:35:12.660
And those animations will actually
stay frame synchronized for as long

00:35:12.660 --> 00:35:15.300
as they run while the page is loaded.

00:35:16.090 --> 00:35:19.300
Now, we used linear for the
timing function on the fall.

00:35:19.390 --> 00:35:22.140
We're going to use ease in for the
timing function on the opacity,

00:35:22.260 --> 00:35:24.940
because at that 75% point,
we don't want opacity to

00:35:24.940 --> 00:35:26.390
just kind of snap in sharply.

00:35:26.660 --> 00:35:30.660
We want it to have a nice,
smooth start to the animation.

00:35:30.660 --> 00:35:31.800
So we've used eased in there.

00:35:31.980 --> 00:35:34.870
So let's run this animation
and see what it looks like.

00:35:36.370 --> 00:35:38.540
So the full animation, of course,
is pushing the leaf down.

00:35:38.580 --> 00:35:42.520
Now at the 75% point, just about here,
you see the leaf starts to fade out.

00:35:42.550 --> 00:35:45.560
And then it's going to
snap back to opacity 1,

00:35:45.590 --> 00:35:48.770
reappear at the top, and then repeat.

00:35:49.610 --> 00:35:52.930
So here's the opacity fade right there.

00:35:53.040 --> 00:35:55.760
So that's pretty close to what
Dean showed you in the demo,

00:35:55.760 --> 00:35:59.060
but he mentioned his leaves had this
very organic kind of side-to-side motion,

00:35:59.100 --> 00:36:01.920
like they were being
blown around in the wind.

00:36:02.120 --> 00:36:06.130
And that was achieved with another
animation called the swing animation.

00:36:06.520 --> 00:36:09.920
And this is, again,
animating WebKit Transform.

00:36:09.940 --> 00:36:11.220
And it just has two keyframes.

00:36:11.220 --> 00:36:12.760
It's very simple.

00:36:12.790 --> 00:36:16.140
And the initial keyframe is
a rotate of minus 30 degrees,

00:36:16.150 --> 00:36:17.260
one way.

00:36:17.280 --> 00:36:20.260
And then a final keyframe is a
rotate of positive 30 degrees.

00:36:20.260 --> 00:36:24.290
So that's going to cause our leaf
to rotate back and forth like this.

00:36:24.860 --> 00:36:26.260
So let's apply that.

00:36:26.350 --> 00:36:29.080
And you'll notice that our
selector here has .leaf and

00:36:29.080 --> 00:36:32.220
then is targeting the images,
which are direct children

00:36:32.220 --> 00:36:33.880
of the leaf divs.

00:36:33.950 --> 00:36:36.820
So this animation is
applying not to the leaf div,

00:36:36.920 --> 00:36:39.030
but to the image inside of it.

00:36:39.510 --> 00:36:41.150
We're using a duration
of three seconds now,

00:36:41.390 --> 00:36:45.220
which means that this animation will
run faster than the previous two.

00:36:45.330 --> 00:36:49.540
We still want it to go an
infinite number of times.

00:36:49.900 --> 00:36:51.720
But now there's something
else we want it to do.

00:36:51.820 --> 00:36:55.420
Instead of running forward and then
snapping back and running forward again,

00:36:55.560 --> 00:36:59.320
we want it to run forward and then
go backwards and then forwards again.

00:36:59.330 --> 00:37:03.500
And the way we do that is with a new
property called WebKitAnimationDirection.

00:37:03.720 --> 00:37:06.090
And this has two values,
normal and alternate.

00:37:06.210 --> 00:37:09.000
And so alternate is the one we want here.

00:37:09.000 --> 00:37:11.150
And because we have this
back and forward motion,

00:37:11.240 --> 00:37:13.620
we're also using a timing
function of ease in/out,

00:37:13.620 --> 00:37:17.320
which if you remember is slow at the
start and end and fast in the middle.

00:37:17.370 --> 00:37:19.720
So that'll give us a nice
symmetrical animation when we

00:37:19.720 --> 00:37:21.670
run it backwards and forwards.

00:37:22.520 --> 00:37:27.550
Now, the final trick here is the
use of WebKit Transform Origin.

00:37:27.590 --> 00:37:29.310
If you remember,
we can use this to change

00:37:29.330 --> 00:37:30.880
the origin of the transform.

00:37:30.880 --> 00:37:33.380
And what we're doing here is
we're using that so that instead

00:37:33.380 --> 00:37:35.880
of the leaf rotating in place,
the leaf is actually going to

00:37:35.880 --> 00:37:38.780
rotate about a point which is
above the top of the leaf div.

00:37:38.810 --> 00:37:41.220
And so the leaf is
going to move like this.

00:37:41.240 --> 00:37:43.680
And let's run that, and you'll see that.

00:37:44.390 --> 00:37:45.800
We've got some debugging boxes here.

00:37:45.800 --> 00:37:47.860
The leaf div has an orange border on it.

00:37:47.930 --> 00:37:51.530
And then we've got a red dot
for the origin of the transform.

00:37:52.500 --> 00:37:54.530
So now,
by combining those three transforms,

00:37:54.530 --> 00:37:56.360
we have a rich,
kind of organic feel to the

00:37:56.360 --> 00:37:58.860
movement of our leaf on the page.

00:38:03.470 --> 00:38:05.270
One thing that we didn't
need in this particular demo,

00:38:05.270 --> 00:38:09.120
but often you will want to do when
you're writing animation-rich content,

00:38:09.120 --> 00:38:12.240
is you might want to know from
JavaScript when your animations start,

00:38:12.240 --> 00:38:14.560
when they loop,
or when they get to the end.

00:38:14.690 --> 00:38:16.670
So we've added some DOM events for you.

00:38:16.920 --> 00:38:20.500
These are called WebKitAnimationStart,
WebKitAnimationIteration,

00:38:20.600 --> 00:38:22.900
and WebKitAnimationEnd.

00:38:22.970 --> 00:38:24.990
And you can listen for these
in the standard way that

00:38:25.060 --> 00:38:26.100
you listen for DOM events.

00:38:26.100 --> 00:38:29.060
You can either use HTML attributes here.

00:38:29.300 --> 00:38:33.450
Or more commonly, you can use something
like addEventListener.

00:38:33.650 --> 00:38:35.580
Please use addEventListener
in JavaScript.

00:38:35.730 --> 00:38:37.840
Listening for WebKit animation end.

00:38:37.880 --> 00:38:40.400
And in this case,
we've got a handler function.

00:38:40.510 --> 00:38:43.410
One thing that you can do on the
animation events is they have a

00:38:43.490 --> 00:38:44.930
couple of properties that are useful.

00:38:45.040 --> 00:38:46.300
One of those is animationName.

00:38:46.300 --> 00:38:49.490
So this lets you tell which
particular set of keyframes

00:38:49.830 --> 00:38:51.980
caused this event to fire.

00:38:54.540 --> 00:38:56.900
Now, animations are a little
different from transitions

00:38:56.990 --> 00:38:58.630
because they're very explicit.

00:38:58.810 --> 00:39:01.300
You decide as the author
when they're going to run.

00:39:01.420 --> 00:39:04.700
And so I should explain how
they actually get applied.

00:39:05.040 --> 00:39:09.270
So an animation will run if
WebKit animation name specifies a known

00:39:09.270 --> 00:39:12.670
set of keyframes-- in other words,
the keyframes that are in the CSS files

00:39:12.770 --> 00:39:17.180
that are loaded-- and if there's a
duration that's greater than zero.

00:39:18.620 --> 00:39:21.880
And once an animation is running,
the properties or the values of

00:39:21.970 --> 00:39:25.400
the properties in the keyframes
will trump all other style rules.

00:39:25.580 --> 00:39:30.280
So they'll override inline
style or important rules,

00:39:30.390 --> 00:39:32.040
basically everything.

00:39:32.080 --> 00:39:34.200
And then once the
animation gets to the end,

00:39:34.220 --> 00:39:36.390
the effects of that
animation disappear entirely.

00:39:36.520 --> 00:39:40.160
So the element will revert to
its non-animated appearance.

00:39:40.980 --> 00:39:43.090
Now,
having animations trump all other style

00:39:43.090 --> 00:39:46.820
rules might be problematic in some cases,
depending on how your CSS is structured.

00:39:46.910 --> 00:39:48.960
So if you want to disable
animations for an element,

00:39:49.090 --> 00:39:52.020
you can do that by setting the
WebKitAnimationName property to none.

00:39:52.110 --> 00:39:58.170
And that will override previous
values for WebKitAnimationName.

00:39:59.800 --> 00:40:03.380
So let's summarize
CSS keyframe animations.

00:40:03.420 --> 00:40:07.050
These are explicit keyframe
animations that give you rich,

00:40:07.050 --> 00:40:09.020
controllable animations in CSS.

00:40:09.060 --> 00:40:11.680
There are two things you need
to do to set up animations.

00:40:11.720 --> 00:40:13.870
The first one is to define
the set of keyframes,

00:40:13.870 --> 00:40:15.320
which you give a name to.

00:40:15.470 --> 00:40:18.520
And then the second one is to
actually apply that set of keyframes

00:40:18.610 --> 00:40:20.560
using WebKit animation name.

00:40:21.450 --> 00:40:24.840
You control how long the animation
takes with WebKit animation

00:40:24.840 --> 00:40:27.060
duration and the iteration count.

00:40:27.060 --> 00:40:29.050
Now,
WebKit animation duration is the duration

00:40:29.080 --> 00:40:31.000
of a single cycle of the animation.

00:40:31.120 --> 00:40:34.420
So the total time that it's animating
is going to be the product of the

00:40:34.420 --> 00:40:36.330
duration and the iteration count.

00:40:37.320 --> 00:40:39.740
And then you can control how the
animation runs with the timing

00:40:39.740 --> 00:40:41.380
function and the direction.

00:40:41.460 --> 00:40:42.880
We saw the direction in the leaves demo.

00:40:42.880 --> 00:40:45.470
You can say normal or alternate,
and alternate gives you that

00:40:45.570 --> 00:40:47.240
back and forward direction.

00:40:47.380 --> 00:40:49.800
And then the timing function--

00:40:50.280 --> 00:40:52.930
I should just take a moment to explain.

00:40:53.010 --> 00:40:55.350
If you remember from transitions,
the timing function affected

00:40:55.450 --> 00:40:58.240
the acceleration curve
over the entire transition.

00:40:58.240 --> 00:41:00.280
With keyframe animations,
it's a little different.

00:41:00.420 --> 00:41:01.820
You're telling us what the keyframes are.

00:41:01.980 --> 00:41:05.450
So we expect that you've already
kind of built a basic timing

00:41:05.450 --> 00:41:07.420
function into your keyframes.

00:41:07.420 --> 00:41:09.900
But WebKit animation timing
function allows you to do

00:41:09.900 --> 00:41:12.040
interpolation within those keyframes.

00:41:12.040 --> 00:41:16.060
And this means that you can build nice,
smooth, fairly complex animations just by

00:41:16.060 --> 00:41:21.450
specifying a few keyframes and then
perhaps using some custom Bezier curve

00:41:21.520 --> 00:41:25.180
timing functions within those keyframes.

00:41:28.180 --> 00:41:30.400
Just like transitions,
you can set a delay before

00:41:30.400 --> 00:41:31.840
the start of the animations.

00:41:31.840 --> 00:41:35.010
And then, as I mentioned,
we have some DOM events.

00:41:35.380 --> 00:41:41.370
And CSS keyframe animations are only
available in Safari on iPhone 2.0.

00:41:44.400 --> 00:41:46.350
OK,
so we talked about 2D transforms earlier.

00:41:46.360 --> 00:41:46.970
And you saw those.

00:41:47.120 --> 00:41:48.360
You've seen those on desktop.

00:41:48.360 --> 00:41:50.200
You saw them in the demo here.

00:41:50.230 --> 00:41:54.580
We've now added the ability to
describe 3D transforms in CSS.

00:41:54.580 --> 00:41:55.880
This is pretty exciting stuff.

00:41:55.880 --> 00:41:59.780
We think this is very new and exciting.

00:41:59.810 --> 00:42:01.370
And we've kept it as simple as we can.

00:42:01.530 --> 00:42:06.150
So 3D transforms are really just an
extension of two-dimensional transforms.

00:42:06.250 --> 00:42:09.800
So they're using the same dash
web git dash transform property

00:42:09.800 --> 00:42:12.170
that are used for 2D transforms.

00:42:12.560 --> 00:42:14.740
However, when you start building
three-dimensional content,

00:42:14.740 --> 00:42:16.000
you need to make it look 3D.

00:42:16.240 --> 00:42:18.320
And that involves
applying some perspective.

00:42:18.440 --> 00:42:21.740
So we have some star rolls that
let you control perspective.

00:42:22.260 --> 00:42:26.040
And then, since we can do 3D, well,
we want to build sort of 3D

00:42:26.040 --> 00:42:31.400
hierarchies of objects and maybe have
articulations and things for animations.

00:42:31.510 --> 00:42:36.070
So we have to control some of
the flattening that HTML is

00:42:36.150 --> 00:42:36.860
going to do by default.

00:42:36.960 --> 00:42:39.020
So we have some rules for that.

00:42:39.080 --> 00:42:41.060
And then 3D transforms
are also kind of weird,

00:42:41.060 --> 00:42:43.310
because you can actually transform an
element all the way around and start

00:42:43.320 --> 00:42:44.960
looking at the back face of that element.

00:42:45.060 --> 00:42:48.760
Sometimes you don't want that,
so you can control that as well.

00:42:48.820 --> 00:42:53.230
And 3D transforms are only
available in Safari on iPhone 2.0.

00:42:54.640 --> 00:42:58.820
So I'm going to explain 3D
transforms by running through an

00:42:58.920 --> 00:43:00.660
example of how we build up this.

00:43:00.680 --> 00:43:04.760
And this is a three-dimensional
ring that we've built up.

00:43:04.760 --> 00:43:07.130
The orange boxes we're calling
posters in the example.

00:43:07.210 --> 00:43:09.190
You'll see that in a moment.

00:43:10.390 --> 00:43:12.650
So let's see how we put
this thing together.

00:43:12.870 --> 00:43:14.170
Again, we have some basic markup.

00:43:14.360 --> 00:43:15.950
In this case, it's just a couple of divs.

00:43:16.060 --> 00:43:18.430
We've got a container div
and then a div called ring.

00:43:18.770 --> 00:43:21.880
And ring is going to be the parent
of the actual elements that you saw

00:43:21.880 --> 00:43:24.180
rotating around the orange boxes.

00:43:24.660 --> 00:43:26.060
And just as before,
because we have a number

00:43:26.060 --> 00:43:27.400
of repetitive elements,
we don't want to code

00:43:27.400 --> 00:43:31.510
all those in our HTML,
so we run a JavaScript loop that

00:43:31.810 --> 00:43:34.040
that does a create element for each div.

00:43:34.040 --> 00:43:36.500
It's going to give it a class
name of poster so we can style it.

00:43:36.620 --> 00:43:38.800
And then it's going to append
it to the ring element.

00:43:38.950 --> 00:43:41.230
Standard DOM APIs.

00:43:42.390 --> 00:43:47.070
And we have some standard
CSS just to give our ring a size.

00:43:47.200 --> 00:43:49.540
The container has height
and width set on it.

00:43:49.540 --> 00:43:51.460
The ring,
we're going to give position relative,

00:43:51.460 --> 00:43:52.530
and you'll see why in a moment.

00:43:52.650 --> 00:43:55.180
And again, we give it some explicit
height and width.

00:43:55.290 --> 00:43:57.820
And then the poster elements,
we want to be able to position

00:43:57.840 --> 00:43:58.660
those inside the ring.

00:43:58.660 --> 00:44:00.390
So they're going to
have position absolute.

00:44:00.520 --> 00:44:02.160
And that's why we gave the
ring position relative,

00:44:02.160 --> 00:44:05.700
because then the ring is going
to act as basically the origin

00:44:05.700 --> 00:44:07.300
of that position absolute.

00:44:07.410 --> 00:44:09.810
And the posters have height and width.

00:44:11.100 --> 00:44:12.760
So here's what our ring looks like.

00:44:12.880 --> 00:44:16.280
We've given it a green border in CSS,
just so you can see where it is.

00:44:16.390 --> 00:44:19.460
And those of you who are familiar
with debugging complex CSS layouts

00:44:19.510 --> 00:44:23.150
will know that it's very useful to
set border style or outline style so

00:44:23.240 --> 00:44:24.930
you can see where all the boxes are.

00:44:25.050 --> 00:44:27.310
And that's also true in 3D.

00:44:29.090 --> 00:44:30.940
So we run one loop of
our JavaScript here.

00:44:31.050 --> 00:44:32.170
We've made a poster element.

00:44:32.240 --> 00:44:34.200
We've put it in the parent,
which is the ring.

00:44:34.220 --> 00:44:38.470
And it's appeared in its default
location in the top left corner.

00:44:39.320 --> 00:44:42.840
Often when you're doing 3D transforms
and you're moving elements around,

00:44:42.880 --> 00:44:46.660
the transform origin, as I said before,
defaults to the center of the element.

00:44:46.720 --> 00:44:49.760
And we're building this ring,
this three-dimensional ring,

00:44:49.820 --> 00:44:51.990
and we want the center of
the ring to coincide with the

00:44:52.000 --> 00:44:53.860
center of that parent element.

00:44:54.200 --> 00:44:56.780
And so the best way for us to
position the children is to start

00:44:56.780 --> 00:44:58.490
them off at that center position.

00:44:58.590 --> 00:45:00.240
So we're going to use
standard CSS positioning.

00:45:00.240 --> 00:45:03.140
We're going to set a left on the posters,
just so they start off in the

00:45:03.140 --> 00:45:04.640
middle of the ring element.

00:45:06.550 --> 00:45:07.470
And now we get to the good stuff.

00:45:07.560 --> 00:45:10.740
Now we're going to start
applying some 3D transforms.

00:45:10.760 --> 00:45:13.860
So the first one we do is we're
going to use an angle to spread

00:45:13.860 --> 00:45:16.100
the posters out around the ring.

00:45:16.110 --> 00:45:18.820
And we're just going to compute
those angles in JavaScript.

00:45:18.820 --> 00:45:21.120
You'll see that in a minute.

00:45:21.180 --> 00:45:24.000
We've just got a static one in CSS so
you can see what it looks like.

00:45:24.030 --> 00:45:26.930
So this is one of the new
values for WebKit Transform,

00:45:26.930 --> 00:45:28.160
and it's rotateY.

00:45:28.180 --> 00:45:31.570
So just rotating in
Y by minus 30 degrees.

00:45:32.510 --> 00:45:35.610
The second step is to move
those posters from the center,

00:45:35.610 --> 00:45:38.500
where they are,
out to the periphery of the ring.

00:45:38.610 --> 00:45:40.120
And we've done that with
a compound transform,

00:45:40.190 --> 00:45:42.640
which is exactly the same as--
or behaves in the same way

00:45:42.640 --> 00:45:44.950
that you saw for 2D transforms.

00:45:45.070 --> 00:45:47.490
We've got the rotateY,
followed by the translate.

00:45:47.530 --> 00:45:49.280
And the translate here is in Z.

00:45:49.380 --> 00:45:52.720
Now, translateZ is a new 3D transform,
and it lets you transform

00:45:52.720 --> 00:45:54.620
something in and out of the screen.

00:45:54.680 --> 00:45:57.330
A negative translate in
Z is away from the viewer,

00:45:57.420 --> 00:46:00.480
or kind of behind the screen,
and a positive translate

00:46:00.550 --> 00:46:02.030
is towards the viewer.

00:46:04.310 --> 00:46:08.750
So let's take a moment to look
in more detail at 3D transforms.

00:46:08.860 --> 00:46:10.780
The property, as I mentioned,
is the existing

00:46:10.830 --> 00:46:12.420
WebKit transform property.

00:46:12.530 --> 00:46:16.660
But there are some new values that
describe three-dimensional transforms.

00:46:16.710 --> 00:46:18.460
The simplest is translate3D.

00:46:18.600 --> 00:46:22.040
So that enables you to describe
a translation in x and y,

00:46:22.090 --> 00:46:23.350
and also in z now.

00:46:23.360 --> 00:46:25.440
And then there's a convenience function,
translatez,

00:46:25.440 --> 00:46:27.340
which just does a z translation.

00:46:27.390 --> 00:46:30.230
And the values here are
the same CSS lengths that

00:46:30.230 --> 00:46:32.800
you saw for 2D transforms.

00:46:33.620 --> 00:46:36.620
Now that we have 3D,
we can rotate around the different axes.

00:46:36.740 --> 00:46:37.740
So we have rotateX.

00:46:37.740 --> 00:46:39.180
X is the horizontal axis.

00:46:39.340 --> 00:46:43.000
So an X rotation will be
rotating an object this way.

00:46:43.120 --> 00:46:45.200
And then we have rotateY.

00:46:45.330 --> 00:46:47.500
The Y axis is the vertical axis.

00:46:47.610 --> 00:46:51.540
And so a Y rotation will be
rotating something this way.

00:46:51.660 --> 00:46:53.500
And then just for consistency
with 2D transforms,

00:46:53.500 --> 00:46:54.830
we have rotateZ.

00:46:54.950 --> 00:46:56.600
And the Z axis is in
and out of the screen.

00:46:56.600 --> 00:47:01.270
So rotateZ ends up just being the
same rotation as a 2D transform.

00:47:03.220 --> 00:47:06.770
If you want to do a really fancy rotate,
you can rotate about an arbitrary vector.

00:47:07.020 --> 00:47:09.680
So there's rotate3D,
and that takes four arguments.

00:47:09.840 --> 00:47:13.580
It takes an x, y,
and z position and an angle.

00:47:13.710 --> 00:47:17.030
And what this is doing is
this rotates about a vector

00:47:17.120 --> 00:47:20.190
between the origin and that x,
y, z point.

00:47:20.270 --> 00:47:22.860
And then the angle is the
amount of rotation there.

00:47:22.990 --> 00:47:29.720
And the angle units are degrees, radians,
and grads, just like for 2D transforms.

00:47:30.100 --> 00:47:31.540
And finally,
those of you who are familiar

00:47:31.540 --> 00:47:36.870
with 3D math in native code maybe,
or maybe using 3D packages,

00:47:36.870 --> 00:47:42.000
will know that 3D transforms are usually
described as mathematical matrices,

00:47:42.000 --> 00:47:43.510
as 4 by 4 matrices.

00:47:43.610 --> 00:47:47.570
And so if you want to specify a
full transform as a 4 by 4 matrix,

00:47:47.650 --> 00:47:50.610
you can do that using
the matrix 3D value here.

00:47:50.640 --> 00:47:53.320
So this takes 16 numbers,
and those numbers are the

00:47:53.320 --> 00:47:57.130
contents of the 4 by 4 matrix,
a homogeneous matrix,

00:47:57.130 --> 00:47:58.860
in column major order.

00:48:00.910 --> 00:48:04.200
So let's go back to our example.

00:48:04.310 --> 00:48:06.410
We positioned one poster
just by using CSS,

00:48:06.440 --> 00:48:09.960
but we're actually going to run our
JavaScript loop and position the

00:48:09.960 --> 00:48:13.370
posters incrementally as we build them.

00:48:13.520 --> 00:48:16.800
So here you see-- it's a bit
near the bottom of the screen.

00:48:16.800 --> 00:48:17.720
I apologize for that.

00:48:17.790 --> 00:48:20.370
But we're building a compound transform,
which is a combination of

00:48:20.370 --> 00:48:23.480
that rotate around the y-axis,
and then the translate z,

00:48:23.560 --> 00:48:27.100
which pushes us out from
the origin of the ring.

00:48:27.100 --> 00:48:29.090
So now we've built our
three-dimensional ring,

00:48:29.370 --> 00:48:31.860
It looks pretty good.

00:48:31.860 --> 00:48:34.010
The next thing we'd like to do--

00:48:37.060 --> 00:48:39.040
You'll stop clapping when
you see this next bit.

00:48:39.060 --> 00:48:42.130
So the next thing we'd like to do
is we want to rotate that ring,

00:48:42.130 --> 00:48:43.600
because that's the whole point, right?

00:48:43.600 --> 00:48:46.080
We want this nice ring that
maybe we can move around with

00:48:46.080 --> 00:48:47.800
touch events or something.

00:48:47.800 --> 00:48:50.520
So to rotate the ring, again,
we use 3D transforms.

00:48:50.520 --> 00:48:53.930
We're going to stick a
Y rotation on the ring element,

00:48:53.930 --> 00:48:55.620
which is the green box.

00:48:55.750 --> 00:48:57.150
Let's do that.

00:48:57.730 --> 00:48:59.910
And well, actually,
that doesn't look very three-dimensional.

00:48:59.980 --> 00:49:00.810
That looks kind of flat.

00:49:00.920 --> 00:49:05.350
Oh, well.

00:49:06.860 --> 00:49:10.040
Until today, HTML was a 2D medium.

00:49:10.290 --> 00:49:12.140
It had no concept of 3D.

00:49:12.210 --> 00:49:15.720
And so when you start
describing 3D transforms,

00:49:15.780 --> 00:49:19.980
you need to somehow get around
this problem of HTML being 2D.

00:49:20.580 --> 00:49:24.050
So the way we've done that is to add a
new property called WebKitTransformStyle.

00:49:24.130 --> 00:49:27.250
And this has two values, flat,
which is the default,

00:49:27.250 --> 00:49:30.590
and then preserve3D,
which is the one we want.

00:49:30.620 --> 00:49:35.980
And what preserve3D does
is it avoids flattening.

00:49:36.700 --> 00:49:38.580
What will happen by default,
even if you give an

00:49:38.580 --> 00:49:42.040
element a 3D transform,
is it'll be rendered with that transform,

00:49:42.040 --> 00:49:44.120
but it'll be rendered
into its parent element.

00:49:44.220 --> 00:49:45.460
So it'll get flattened.

00:49:45.550 --> 00:49:48.300
It'll look 3D from the front,
but if you turn that parent to the side,

00:49:48.300 --> 00:49:51.120
you'd see it was still just on the plane,
as we saw.

00:49:51.240 --> 00:49:54.110
What we'd really like to be able
to do is to have those child

00:49:54.110 --> 00:49:57.400
elements maintain their positions
in three-dimensional space.

00:49:57.500 --> 00:50:00.080
And that's what Preserve3D does.

00:50:02.120 --> 00:50:05.390
There's a little wrinkle here
in that it's hard to have

00:50:05.390 --> 00:50:08.580
a 3D hierarchy of elements,
but still implement

00:50:08.800 --> 00:50:10.060
overflow style in CSS.

00:50:10.060 --> 00:50:11.860
If you want overflow
hidden or overflow scroll,

00:50:11.860 --> 00:50:12.860
how does that interact with 3D?

00:50:12.860 --> 00:50:13.900
It gets kind of weird.

00:50:13.990 --> 00:50:15.760
So actually,
if you need to clip-- in other words,

00:50:15.840 --> 00:50:18.770
if you need to overflow style,
that's going to cause flattening.

00:50:18.780 --> 00:50:21.900
That's going to override
the transform style 3D.

00:50:23.520 --> 00:50:25.300
So let's go back to our ring now.

00:50:25.590 --> 00:50:27.520
Hopefully it'll look better this time.

00:50:27.570 --> 00:50:29.520
So we're setting Preserve 3D on the ring.

00:50:29.540 --> 00:50:31.440
Notice that's on the ring,
so it's going to affect

00:50:31.440 --> 00:50:32.280
the child elements.

00:50:32.330 --> 00:50:35.160
It's going to avoid the
posters being flattened.

00:50:35.440 --> 00:50:38.640
And now let's try our Y rotation again.

00:50:38.660 --> 00:50:39.720
That looks much better.

00:50:39.720 --> 00:50:41.190
OK.

00:50:45.450 --> 00:50:48.640
OK, we're happy now.

00:50:48.850 --> 00:50:51.930
Well, actually, I must admit,
we have been cheating.

00:50:52.020 --> 00:50:54.420
This is really what it looks like so far.

00:50:54.470 --> 00:50:56.640
OK, it is 3D.

00:50:56.640 --> 00:50:57.590
It's not being flattened.

00:50:57.600 --> 00:50:59.220
We don't see this plane swinging by.

00:50:59.220 --> 00:51:02.280
But we don't have any perspective,
so it looks very flat.

00:51:02.280 --> 00:51:05.340
So we need to add some perspective
to get a really 3D appearance.

00:51:05.410 --> 00:51:08.750
And the way we do that is to set a
style rule on the container element,

00:51:08.880 --> 00:51:10.900
which is WebKit perspective.

00:51:11.200 --> 00:51:13.100
And that's going to
make it look like this.

00:51:13.140 --> 00:51:17.770
And what perspective does is it gives
you the vanishing point perspective

00:51:17.770 --> 00:51:20.080
that you know from geometry.

00:51:20.080 --> 00:51:22.880
There's one more thing we need to do
to make it quite like the example,

00:51:22.880 --> 00:51:24.740
which is to set the
origin of the perspective.

00:51:24.790 --> 00:51:28.470
And that makes us look as if we're
looking down on the top of the object.

00:51:29.700 --> 00:51:32.890
So let's look at perspective
a little more rigorously here.

00:51:33.000 --> 00:51:34.790
So the property name
is WebKit Perspective,

00:51:34.920 --> 00:51:36.800
and it takes a numeric value,
which is a depth.

00:51:37.000 --> 00:51:39.190
And I'll explain that in a moment.

00:51:39.500 --> 00:51:43.630
So what perspective is doing
is it's setting up a 3D-- or

00:51:43.630 --> 00:51:46.080
it's setting up the perspective
for a three-dimensional scene.

00:51:46.180 --> 00:51:49.070
So what it does is
affect how unflattened,

00:51:49.070 --> 00:51:52.580
transformed child elements
are going to be rendered.

00:51:53.800 --> 00:51:56.420
And the value there,
this mysterious depth value,

00:51:56.480 --> 00:51:59.540
is the distance of the viewer
from the z equals zero plane.

00:51:59.580 --> 00:52:02.370
That's kind of confusing,
so let's look at a picture.

00:52:03.940 --> 00:52:07.470
So here we have three elements
with no perspective right now.

00:52:07.590 --> 00:52:08.980
And we're looking from the side here.

00:52:09.250 --> 00:52:12.440
So the element on the right-hand
side has had a negative Z translate.

00:52:12.520 --> 00:52:14.980
So it's behind the plane,
which is the gray box.

00:52:14.980 --> 00:52:17.480
And then the element on the
left has a positive Z translate.

00:52:17.480 --> 00:52:19.600
So that one's closer to the viewer.

00:52:19.700 --> 00:52:22.440
So with no perspective,
all these elements look the same size,

00:52:22.440 --> 00:52:25.870
which is why our ring looked very
flat when we saw it just now.

00:52:26.420 --> 00:52:30.160
With some moderate amount of perspective,
the element in the back looks smaller,

00:52:30.160 --> 00:52:32.740
and the element in the front
looks like it's a little closer

00:52:32.740 --> 00:52:34.400
to us and actually has got larger.

00:52:34.510 --> 00:52:37.240
So we've got some amount
of foreshortening.

00:52:37.600 --> 00:52:41.420
And now, if we add a stronger amount of
perspective with a lower number,

00:52:41.420 --> 00:52:43.000
we get even more foreshortening.

00:52:43.000 --> 00:52:46.900
So that makes everything look like it's
really kind of up front in our face.

00:52:48.200 --> 00:52:51.140
And as we saw in the example just now,
we can also control the

00:52:51.150 --> 00:52:53.660
origin of the perspective with
WebKit Perspective Origin.

00:52:53.690 --> 00:52:56.210
And this behaves very similarly
to Transform Origin that

00:52:56.210 --> 00:52:57.790
I mentioned earlier.

00:52:59.100 --> 00:53:00.900
There's one more thing which
we might want to do if this

00:53:00.950 --> 00:53:03.380
was some real web content,
especially on a small screen

00:53:03.400 --> 00:53:04.860
like the iPhone screen.

00:53:05.000 --> 00:53:08.060
You'll notice that the
elements in the back-- 7,

00:53:08.060 --> 00:53:10.320
8, and 9, the numbers there--

00:53:10.940 --> 00:53:12.820
are flipped around, obviously,
by the transform,

00:53:12.820 --> 00:53:13.850
but we can still see them.

00:53:13.920 --> 00:53:14.960
And the numbers are backwards.

00:53:15.060 --> 00:53:17.100
The text will be backwards
if there was text there.

00:53:17.300 --> 00:53:22.730
You can imagine these elements being
rendered onto a sheet of glass.

00:53:22.730 --> 00:53:22.730
So we can kind of see the
backside of the window,

00:53:22.730 --> 00:53:22.730
if you like.

00:53:23.090 --> 00:53:26.030
And that might not be what you want,
always.

00:53:26.130 --> 00:53:29.330
So we can hide those elements that
are facing away from the viewer with a

00:53:29.330 --> 00:53:32.340
property called WebKitBackfaceVisibility.

00:53:33.610 --> 00:53:35.800
So let's look at that
in a bit more detail.

00:53:35.880 --> 00:53:38.380
WebKit Backface Visibility
is the property.

00:53:38.450 --> 00:53:40.800
And it has two values-- visible,
which is the default,

00:53:40.930 --> 00:53:43.740
which means that you can see
both sides of the element,

00:53:43.820 --> 00:53:45.770
and then hidden.

00:53:45.910 --> 00:53:47.550
And hidden is the one
we want to use here.

00:53:47.690 --> 00:53:50.970
And what hidden does is if an
element is facing away from

00:53:50.970 --> 00:53:53.420
the viewer-- in other words,
if you could see the back face of

00:53:53.420 --> 00:53:57.160
that element-- it means that that
element both will disappear from view.

00:53:57.160 --> 00:53:58.200
It won't be rendered.

00:53:58.360 --> 00:54:00.160
And also,
it will not respond to hit testing.

00:54:00.160 --> 00:54:03.130
So that element kind of
disappears from the scene.

00:54:05.270 --> 00:54:07.900
So let's apply that to our ring.

00:54:07.990 --> 00:54:12.300
And let's run the animation again
so you can see what happens.

00:54:13.470 --> 00:54:17.400
Let's run the animation again
so you can see what happens.

00:54:17.600 --> 00:54:17.880
OK.

00:54:17.900 --> 00:54:20.140
So now you only see the elements
when they're facing towards you.

00:54:20.290 --> 00:54:22.340
And that cleans up the
appearance quite a bit,

00:54:22.380 --> 00:54:25.110
especially if there was
more information in there.

00:54:28.700 --> 00:54:34.120
So probably 90% of the things you'll
need to do with 3D transforms you can

00:54:34.120 --> 00:54:36.500
do with what I've told you already.

00:54:36.540 --> 00:54:40.900
If you have some really advanced use,
you want to get really fancy,

00:54:40.900 --> 00:54:43.510
then start taking notes.

00:54:43.850 --> 00:54:46.680
I mentioned before that 3D
transforms are usually described

00:54:46.680 --> 00:54:48.400
in terms of 4x4 matrices.

00:54:48.460 --> 00:54:51.850
And I already mentioned that
there's this matrix 3D value

00:54:51.850 --> 00:54:54.220
for WebKit Transform where you
can specify the 16 numbers,

00:54:54.220 --> 00:54:57.170
which are the 4x4 matrix.

00:54:58.010 --> 00:54:59.930
Maybe you want to actually
read that value back out in

00:54:59.930 --> 00:55:02.360
JavaScript and do some math with it.

00:55:02.480 --> 00:55:06.400
So we've added a JavaScript object
called WebKit CSS Matrix.

00:55:06.510 --> 00:55:09.540
And you can use this to do
matrix math in JavaScript.

00:55:09.680 --> 00:55:10.940
So you can create one.

00:55:11.040 --> 00:55:16.160
You can assign it a string,
which is this matrix3D string.

00:55:16.270 --> 00:55:18.350
And then you can call APIs on
the object to do math.

00:55:18.500 --> 00:55:21.900
You can do scales and rotates
and all the basic 3D transforms.

00:55:22.010 --> 00:55:25.110
And then you can read out a string back,
which is a matrix3D string,

00:55:25.190 --> 00:55:29.890
which you can just plug straight
into the WebKit transform style.

00:55:32.040 --> 00:55:35.560
Sometimes you need to know what the
current value of the transform is.

00:55:35.670 --> 00:55:37.960
And you can do this in the
standard way that you read back

00:55:37.960 --> 00:55:39.650
CSS properties in JavaScript.

00:55:39.760 --> 00:55:42.640
And that's to use
window.getComputedStyle.

00:55:42.750 --> 00:55:46.460
And of course, we're accessing the
WebKit transform property on this.

00:55:46.580 --> 00:55:50.330
And this will give you back the
current value of the transform,

00:55:50.380 --> 00:55:55.050
even if the element currently has a
transitional animation running on it.

00:55:55.050 --> 00:55:56.790
So you can imagine it's snapshotting
the current transform on the element

00:55:56.790 --> 00:55:56.790
and then handing it back to you.

00:55:58.500 --> 00:56:01.190
Now, when you start doing 3D transforms,
point mapping kind of starts

00:56:01.190 --> 00:56:02.460
to get complicated as well.

00:56:02.800 --> 00:56:05.910
But the basic story is that it
works exactly as you expect.

00:56:06.020 --> 00:56:08.950
Even if you transform an element,
you can still interact with it,

00:56:08.950 --> 00:56:11.830
and the points will hit the
right points in that element.

00:56:12.000 --> 00:56:15.750
And if you use document element
from point in your JavaScript,

00:56:15.750 --> 00:56:18.390
that's also going to return the element
which is actually under the point,

00:56:18.440 --> 00:56:20.790
taking transforms into account.

00:56:21.020 --> 00:56:23.400
Now, sometimes when you're
doing event handling,

00:56:23.400 --> 00:56:27.790
maybe you're looking at event.pageX,
pageY, you might need to convert

00:56:27.790 --> 00:56:30.830
points between elements and
take transforms into account.

00:56:30.940 --> 00:56:33.870
And we've added a couple of
new APIs that let you do that.

00:56:34.050 --> 00:56:38.140
Window.convertPoint from page to node,
and the one that goes the other way,

00:56:38.320 --> 00:56:40.290
convertPoint from node to page.

00:56:43.170 --> 00:56:45.240
So that was CSS Transforms.

00:56:45.360 --> 00:56:47.100
That was a lot of
information in a short time,

00:56:47.100 --> 00:56:50.250
so let me just go over it briefly again.

00:56:50.370 --> 00:56:53.290
What we've done is to extend the
existing WebKit Transform property

00:56:53.770 --> 00:56:58.600
with some new values that let you
describe three-dimensional transforms.

00:56:58.600 --> 00:57:01.430
And then we allow you to control
the perspective in the scene to

00:57:01.430 --> 00:57:04.830
really give it a 3D appearance
with WebKit Perspective and

00:57:04.920 --> 00:57:07.090
WebKit Perspective Origin.

00:57:08.750 --> 00:57:12.020
Now, I said that there was this
problem with HTML with flattening,

00:57:12.140 --> 00:57:14.460
and so we can control whether
flattening occurs or not using

00:57:14.460 --> 00:57:16.030
the WebKit transform style.

00:57:16.150 --> 00:57:19.770
And preserve3D is the value
you want to avoid flattening.

00:57:20.820 --> 00:57:23.480
And then we talked about hiding
backfaces when things are

00:57:23.580 --> 00:57:25.980
facing away from the viewer,
which you can do with

00:57:26.100 --> 00:57:28.600
WebKit Backface Visibility Hidden.

00:57:29.800 --> 00:57:33.530
And 3D transforms, as I mentioned before,
are only available in

00:57:33.530 --> 00:57:35.680
Safari on iPhone 2.0.

00:57:37.220 --> 00:57:39.480
So we've got these
three big new features.

00:57:39.590 --> 00:57:40.950
We've got-- well, actually four.

00:57:40.980 --> 00:57:42.060
We've got 2D transforms.

00:57:42.130 --> 00:57:43.490
We've got transitions.

00:57:43.570 --> 00:57:45.280
We've got 3D transforms.

00:57:45.310 --> 00:57:46.870
And we've got keyframe animations.

00:57:46.880 --> 00:57:49.490
And then you've probably been hearing
about some of the other really cool

00:57:49.570 --> 00:57:50.900
features in Safari on iPhone now.

00:57:50.900 --> 00:57:54.060
You've got touch events and gestures
and all these other good stuff.

00:57:54.190 --> 00:57:57.960
So let's see what we can do when
we put all these things together.

00:57:58.800 --> 00:58:02.480
And I'll have Dean come
back on the stage.

00:58:02.550 --> 00:58:04.900
And we'll go through the demo
that Gilles showed you earlier.

00:58:04.980 --> 00:58:07.420
But we'll link it back to
the content you've seen and

00:58:07.480 --> 00:58:09.670
explain how it was put together.

00:58:19.130 --> 00:58:26.420
So we're just going to start with a point
that Simon made during the last slide,

00:58:26.420 --> 00:58:26.420
which was that--

00:58:27.720 --> 00:58:29.870
that you can interact with form elements.

00:58:30.000 --> 00:58:33.120
So for some reason,
he's taken a picture of my mother-in-law,

00:58:33.230 --> 00:58:36.710
and he's labeled -- actually,
I should say, I'm sorry, Mrs.

00:58:36.800 --> 00:58:37.600
Maxwell.

00:58:37.600 --> 00:58:42.060
But let's say he's added
some metadata to that,

00:58:42.060 --> 00:58:45.340
and I want to change it,
so I just -- I tap on the element.

00:58:45.340 --> 00:58:49.500
And I've got this cool 3D
transition that's come out and

00:58:49.500 --> 00:58:50.800
brought in the form element.

00:58:50.800 --> 00:58:53.100
And you'll notice that the form
elements have been transformed in

00:58:53.100 --> 00:58:55.740
3D just as normal web content is.

00:58:55.820 --> 00:58:59.880
It's not quite that visible,
but you'll see that for the title

00:58:59.880 --> 00:59:03.800
as a text field and the right-most
side of the text field is a little

00:59:03.800 --> 00:59:07.020
bit higher than the left side
because of the perspective where,

00:59:07.020 --> 00:59:09.160
you know, it's closer to you, the viewer.

00:59:09.160 --> 00:59:13.150
So, you know,
now I can just tap on this field

00:59:13.280 --> 00:59:19.350
and up pops the typical keyboard,
and I can erase what's there,

00:59:19.350 --> 00:59:22.570
give it a more accurate title.

00:59:23.480 --> 00:59:27.640
And I can move on to the next element.

00:59:27.640 --> 00:59:29.190
You can see here I've
got the drop-down box.

00:59:29.310 --> 00:59:33.680
And of course,
this is definitely family and so on.

00:59:33.680 --> 00:59:37.090
And again, I can tap the R.

00:59:37.790 --> 00:59:42.030
fingers were there, tap the checkbox.

00:59:42.030 --> 00:59:49.650
So again, what this is saying is that you
don't necessarily have to change

00:59:49.730 --> 00:59:51.520
the way your web application is.

00:59:51.520 --> 00:59:51.520
You can just start
adding the 3D transforms.

00:59:51.520 --> 00:59:51.520
You don't have to redesign things.

00:59:51.520 --> 00:59:51.520
You can use existing form
elements in your page.

00:59:51.680 --> 00:59:56.280
So now I'll go back and I'll show you
the example that Jill showed earlier,

00:59:56.280 --> 00:59:58.310
which is the fingertips.

00:59:58.660 --> 01:00:03.110
Now, it's important to realize
this is just Safari.

01:00:03.120 --> 01:00:04.090
This is a web page.

01:00:04.090 --> 01:00:05.170
There's no plug-ins.

01:00:05.200 --> 01:00:06.180
There's nothing extra here.

01:00:06.180 --> 01:00:08.720
All we've done is use a bit
of JavaScript and a bit of

01:00:08.760 --> 01:00:10.440
CSS to give this effect.

01:00:10.480 --> 01:00:14.270
This is an ordered list in HTML,
and we've applied a style

01:00:14.270 --> 01:00:17.780
to the list elements,
which transforms them in 3D.

01:00:18.110 --> 01:00:21.570
You can see that we've got -- this
is basically what we call a carousel.

01:00:21.570 --> 01:00:24.540
It's a ring on its side
that's side onto the viewer.

01:00:24.580 --> 01:00:27.770
Now, in iPhone,
the typical way you browse lists is to

01:00:27.770 --> 01:00:31.570
-- you touch and you move things around,
but people know -- you already

01:00:31.570 --> 01:00:34.300
all know that if on a web page
you touch and drag a page,

01:00:34.390 --> 01:00:36.210
the page scrolls or pans.

01:00:36.210 --> 01:00:41.040
So what we've done here is we've --
we catch the touch events on the page,

01:00:41.090 --> 01:00:45.180
and instead of making the page move,
we actually change the 3D

01:00:45.180 --> 01:00:46.940
rotation on the carousel element.

01:00:47.090 --> 01:00:49.620
So here I am touching the page,
and I can move it.

01:00:49.760 --> 01:00:53.600
And even better, I can add a flick here,
and you'll see we've got this

01:00:53.600 --> 01:00:56.460
animation where the ring slows down.

01:00:56.510 --> 01:00:59.220
I want to pick this one that's
a browse and cover flow.

01:00:59.220 --> 01:01:00.290
I just touch it.

01:01:00.290 --> 01:01:01.850
It moves to the center.

01:01:01.860 --> 01:01:04.000
The ring -- the carousel rotated,
moved to the center,

01:01:04.230 --> 01:01:05.480
and then another page slid in.

01:01:05.480 --> 01:01:09.810
Now, again, you might have seen these
slides with something like IUI,

01:01:09.810 --> 01:01:12.640
but here we've got this really
quick transitions because,

01:01:12.640 --> 01:01:14.940
again,
we've used the WebKit CSS transitions.

01:01:15.150 --> 01:01:18.000
I've just got a page sitting
off to the right side.

01:01:18.050 --> 01:01:23.150
When I touch on it, I set the property,
the left property or the translation

01:01:23.150 --> 01:01:25.700
to be moved into the view,
and it just slides in.

01:01:25.700 --> 01:01:27.000
I haven't had to do the animation.

01:01:27.300 --> 01:01:29.700
The web browser's done that for me.

01:01:29.840 --> 01:01:31.940
You'll also notice we've got
touch events on the stars,

01:01:31.940 --> 01:01:37.020
so I can give -- on the stars,
I can give the video a rating.

01:01:37.020 --> 01:01:40.160
And in this case, we've got a custom
control that's -- sorry,

01:01:40.270 --> 01:01:43.680
we've got a movie here with a
custom control that's controlled

01:01:43.680 --> 01:01:45.510
by a -- by a JavaScript.

01:01:45.680 --> 01:01:49.440
So this play button is, in fact,
an image that's styled using CSS.

01:01:49.440 --> 01:01:52.010
And when I touch on that,
I've got a JavaScript handle

01:01:52.010 --> 01:01:53.590
that starts the movie playing.

01:01:53.640 --> 01:01:54.750
Okay.

01:01:55.040 --> 01:01:57.390
And then we have the fingertip demo.

01:01:57.410 --> 01:02:00.250
So before it goes on further,
I'll-- A brief way to look

01:02:00.250 --> 01:02:01.900
at your music library.

01:02:01.900 --> 01:02:04.490
I won't play "Hit Me" on my iPhone.

01:02:05.460 --> 01:02:09.140
Also, as you've shown,
when we rotate the phone,

01:02:09.140 --> 01:02:12.700
and we'll go back to the view,
we've actually,

01:02:12.800 --> 01:02:16.470
we notice that the phone is rotated
and we use a different style sheet.

01:02:16.610 --> 01:02:20.880
So instead of now the vertical ring,
we've got a horizontal ring, and again,

01:02:20.930 --> 01:02:25.100
we've got the same features on that
and a different layout on the page.

01:02:25.140 --> 01:02:28.140
So that's for the demo.

01:02:28.140 --> 01:02:30.840
The really thing we
want to drive home is,

01:02:30.840 --> 01:02:32.780
again, this is just using CSS.

01:02:32.870 --> 01:02:34.780
Technology is already familiar with it.

01:02:34.910 --> 01:02:35.620
It's really simple.

01:02:35.870 --> 01:02:38.320
And we've done, we've managed to create
these awesome demos.

01:02:38.320 --> 01:02:41.690
So we're really looking forward
to see what stuff you guys come

01:02:41.690 --> 01:02:44.130
up with with Safari on iPhone 2.0.

01:02:44.130 --> 01:02:46.920
And with that,
I'll give it back to Simon to conclude.

01:02:55.910 --> 01:02:58.400
OK.

01:02:58.460 --> 01:03:00.410
So you've seen a lot of
cool stuff in these demos.

01:03:00.500 --> 01:03:03.070
And there was some amount of blood,
sweat, and tears to get them running

01:03:03.070 --> 01:03:05.530
and to optimize the engine so
that everything runs smoothly.

01:03:05.670 --> 01:03:07.840
So let's talk about performance.

01:03:08.110 --> 01:03:09.980
You'll notice that in
a lot of the examples,

01:03:10.000 --> 01:03:13.020
we've been using WebKit Transform for
our transitions and animations.

01:03:13.020 --> 01:03:16.320
And there's a very good reason for that,
which is it's one of the few properties

01:03:16.400 --> 01:03:18.220
that are currently hardware-accelerated.

01:03:18.310 --> 01:03:21.040
So if you want really smooth
transitions on the phone,

01:03:21.080 --> 01:03:22.890
you want to use transitions
and animations of

01:03:22.980 --> 01:03:25.040
WebKit Transform or Opacity.

01:03:25.070 --> 01:03:27.270
Those two are hardware accelerated,
and those will give

01:03:27.270 --> 01:03:28.660
you great performance.

01:03:29.770 --> 01:03:32.360
In order to get the best
possible animations without any

01:03:32.430 --> 01:03:35.710
stuttering or without any delays,
you want to avoid trying to do work.

01:03:35.950 --> 01:03:40.070
You want to avoid the web engine doing
work while your animations are running.

01:03:40.190 --> 01:03:40.720
What does that mean?

01:03:40.720 --> 01:03:44.200
Well, you want to try and
avoid layout and redraw.

01:03:44.300 --> 01:03:49.580
Now, layout is essentially what the web
engine does when you add content

01:03:49.580 --> 01:03:53.220
to your web page or when you
change display style or set height

01:03:53.270 --> 01:03:54.410
and width and things like that.

01:03:54.490 --> 01:03:56.820
It has to recompute the positions
of all the elements on the page,

01:03:56.930 --> 01:03:57.740
and that's expensive.

01:03:58.040 --> 01:04:01.380
So we don't want that to interrupt
the performance of the animations.

01:04:01.560 --> 01:04:04.110
And then redraw is what happens
when you change something like

01:04:04.170 --> 01:04:05.500
a background image or a color.

01:04:05.640 --> 01:04:08.120
And that's also going to cause a
bit of a stutter in your animation,

01:04:08.120 --> 01:04:11.290
so you want to try and avoid
those to get best performance.

01:04:12.530 --> 01:04:16.560
One point-- you can use the
simulator that comes with the

01:04:16.560 --> 01:04:20.680
SDK to do all your web development,
because it has all these features in it.

01:04:21.010 --> 01:04:27.560
But when it comes down to testing
the performance of your content,

01:04:27.680 --> 01:04:30.890
you should really test on the phone,
because the iPhone will give you the

01:04:30.890 --> 01:04:30.890
same experience that your customers
get when they go to your website.

01:04:32.610 --> 01:04:35.780
So let me summarize what
we've learned today.

01:04:35.910 --> 01:04:38.280
We have these new presentation features.

01:04:38.320 --> 01:04:41.250
And these fall under the umbrella
that you've probably heard at the

01:04:41.330 --> 01:04:43.540
conference of CSS visual effects.

01:04:43.740 --> 01:04:46.520
And the specific ones
I talked about today are 2D

01:04:46.550 --> 01:04:54.000
transforms and 3D transforms,
transitions, and keyframe animations.

01:04:54.890 --> 01:04:57.380
And there's a lot of stuff here.

01:04:57.380 --> 01:04:59.850
We've talked about it a
lot in today's session.

01:05:00.990 --> 01:05:04.240
And in the demos,
you can also see that when you mix

01:05:04.240 --> 01:05:07.960
and match these with the other new
features like touch events and gestures,

01:05:08.050 --> 01:05:11.370
you can start creating some
really rich user interactions

01:05:12.060 --> 01:05:14.910
in your iPhone Web Applications.

01:05:15.080 --> 01:05:17.470
We've also got these media playback APIs,
which means you don't have to

01:05:17.480 --> 01:05:20.000
have a plug-in sitting there
on the page the whole time.

01:05:20.130 --> 01:05:21.370
You can call from JavaScript.

01:05:21.380 --> 01:05:23.460
You can tell it to play,
and it'll just go full

01:05:23.460 --> 01:05:26.900
screen and start playing.

01:05:27.300 --> 01:05:29.780
We want you to go out and
learn about these new features

01:05:29.780 --> 01:05:30.800
and create really cool stuff.

01:05:30.860 --> 01:05:34.870
And we're very excited to see
what you will produce with these.

01:05:37.200 --> 01:05:39.340
Let me tell you a bit about
how to get started with these.

01:05:39.540 --> 01:05:43.860
First of all, they're all documented on
developer.apple.com/webapps.

01:05:43.870 --> 01:05:45.820
I pointed you at the specs earlier.

01:05:45.910 --> 01:05:48.790
On apple.com here,
we have some annotated version of the

01:05:48.880 --> 01:05:50.440
specs that use all the WebKit prefixes.

01:05:50.440 --> 01:05:54.340
And so you should look at those first,
and it'll reduce the amount of confusion.

01:05:54.340 --> 01:05:56.590
And then if you have questions,
you should send email to

01:05:56.590 --> 01:06:00.900
Vicki Murley or Mark Malone,
who are our technology evangelists.

01:06:01.140 --> 01:06:04.900
And then we have a couple more sessions,
certainly one session tomorrow

01:06:04.900 --> 01:06:09.040
morning at 9:00 in this room,
where Antoine is going to show

01:06:09.040 --> 01:06:13.030
you step-by-step how to build
that spinning ring example.

01:06:13.130 --> 01:06:14.950
And so in that session,
you'll learn the hands-on of

01:06:15.340 --> 01:06:17.660
how to apply 3D transforms,
how to handle touch events,

01:06:17.710 --> 01:06:20.360
and how to call these new media APIs.

01:06:21.300 --> 01:06:22.620
And then there are a couple of labs.

01:06:22.620 --> 01:06:25.020
There's one,
the Rich Graphics in Safari Lab,

01:06:25.040 --> 01:06:27.220
which is at 5:00,
which is basically right now

01:06:27.220 --> 01:06:29.700
downstairs after the session.

01:06:29.750 --> 01:06:31.460
And then tomorrow,
there's a lab called iPhone

01:06:31.460 --> 01:06:34.860
Web Application Development,
and that's at 3:30 in Lab A.

01:06:37.740 --> 01:06:40.820
So I've given you a lot of information,
but let me give you

01:06:40.820 --> 01:06:42.050
the high-level picture.

01:06:42.150 --> 01:06:42.430
So what?

01:06:42.570 --> 01:06:43.420
What have we given you?

01:06:43.560 --> 01:06:48.830
Well, we've given you a declarative 3D
modeling and animation framework.

01:06:48.920 --> 01:06:50.150
You've got 3D transforms.

01:06:50.160 --> 01:06:51.960
You've got transitions,
keyframe animations.

01:06:51.960 --> 01:06:53.910
It's hardware-accelerated.

01:06:54.280 --> 01:06:56.340
But we've done this in a
technology you already know.

01:06:56.420 --> 01:06:59.580
This is in HTML, CSS, and JavaScript.

01:06:59.660 --> 01:07:02.270
So it should be really easy for
you to pick up and get running and

01:07:02.270 --> 01:07:03.860
create some incredibly cool content.

01:07:03.890 --> 01:07:06.610
And we just can't wait to see
what you're going to do with this.