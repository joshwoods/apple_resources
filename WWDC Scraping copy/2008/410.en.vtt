WEBVTT

00:00:20.540 --> 00:00:24.460
Good afternoon, and welcome to Mastering
iPhone View Controllers.

00:00:24.460 --> 00:00:27.550
My name is Evan Doll,
and I'm going to be joined

00:00:27.550 --> 00:00:30.640
shortly on stage by Alex Aybes,
and we're both members of the

00:00:30.640 --> 00:00:32.520
iPhone Software Engineering team.

00:00:32.520 --> 00:00:36.250
And you've been hearing a lot
about view controllers here at

00:00:36.250 --> 00:00:37.930
WWDC in the iPhone sessions.

00:00:37.940 --> 00:00:42.490
And the key point that I'd like to make
today is that view controllers aren't

00:00:42.510 --> 00:00:44.800
just for your first simple application.

00:00:44.800 --> 00:00:49.100
You can build on view controllers
and use them to make a really rich,

00:00:49.100 --> 00:00:51.890
full-featured,
polished app for the iPhone.

00:00:51.900 --> 00:00:54.880
We use them internally for
even our most advanced apps,

00:00:54.930 --> 00:00:58.040
and we would like you to look
at adopting them as well.

00:00:58.210 --> 00:01:01.410
So in the first view
controller session on Tuesday,

00:01:01.500 --> 00:01:05.120
we began building a recipes
application to show off some ways

00:01:05.120 --> 00:01:06.760
that you can use view controllers.

00:01:06.780 --> 00:01:12.430
And that demo has been built upon in
the subsequent sessions here at WWDC,

00:01:12.540 --> 00:01:14.200
and we're going to keep
working on it today.

00:01:14.800 --> 00:01:17.900
And specifically,
we're going to learn about being a good

00:01:17.900 --> 00:01:21.800
memory citizen and how that can have a
real positive impact on your iPhone app.

00:01:21.800 --> 00:01:24.290
And then we're going to
customize navigation.

00:01:24.300 --> 00:01:27.960
This is a very common place to
add buttons and other types of

00:01:27.960 --> 00:01:30.030
controls in your iPhone app.

00:01:30.180 --> 00:01:32.740
Next, we're going to learn about
presenting content modally,

00:01:32.810 --> 00:01:35.260
and what that means exactly,
and what some of the situations

00:01:35.260 --> 00:01:37.190
are where you might want to use it.

00:01:37.300 --> 00:01:38.920
And finally,
we're going to put it all together

00:01:39.150 --> 00:01:41.400
to make version 2.0 of Recipes.

00:01:41.590 --> 00:01:43.670
Specifically,
we're going to combine the navigation

00:01:44.050 --> 00:01:46.610
and tab bar application flows,
which is something that a lot of

00:01:46.620 --> 00:01:49.100
people want to do in their apps.

00:01:49.220 --> 00:01:51.100
As a quick refresher,
if you didn't make it to

00:01:51.100 --> 00:01:54.960
understanding iPhone View Controllers,
we like you to think of view controllers

00:01:55.070 --> 00:01:59.100
as the building blocks for your iPhone
application at the controller level.

00:01:59.100 --> 00:02:03.500
And they make it really easy to adopt the
most common application flows and design

00:02:03.500 --> 00:02:08.100
patterns in your app without needing to
roll your own and write a bunch of code.

00:02:08.200 --> 00:02:11.830
This allows you to spend time writing
the code that you care about because

00:02:12.090 --> 00:02:14.100
your time and resources are limited.

00:02:14.180 --> 00:02:17.030
So with that in mind,
let's jump into the first advanced

00:02:17.450 --> 00:02:22.100
topic on view controllers and learn
about being a good memory citizen.

00:02:22.100 --> 00:02:24.090
Some of you may already
be familiar with this,

00:02:24.200 --> 00:02:26.860
but on the iPhone,
there's a different set of constraints

00:02:27.350 --> 00:02:31.100
from on the desktop or maybe some other
platforms that you've worked with.

00:02:31.210 --> 00:02:34.090
And specifically,
there isn't virtual memory.

00:02:34.230 --> 00:02:36.900
So when we begin to run
low on available memory,

00:02:36.990 --> 00:02:40.260
some tough choices need to be
made in terms of deciding who

00:02:40.260 --> 00:02:42.100
gets to run and who doesn't.

00:02:42.240 --> 00:02:44.100
Additionally,
your application is not a virtual app.

00:02:44.110 --> 00:02:46.500
It needs to coexist with some
system applications which may

00:02:46.500 --> 00:02:48.080
also be running in the background.

00:02:48.100 --> 00:02:51.100
For example,
Mail and the iPod application.

00:02:51.100 --> 00:02:53.870
And if your application begins
to consume memory and not release

00:02:53.870 --> 00:02:58.040
it when it's done with it,
eventually, we're going to have to kill

00:02:58.230 --> 00:03:02.100
or maybe more nicely put,
terminate Mail and iPod.

00:03:02.190 --> 00:03:04.070
And, you know,
this isn't going to have an

00:03:04.070 --> 00:03:06.630
effect on your application,
but your user is going to notice

00:03:07.100 --> 00:03:09.640
it because their music just stopped
playing and Mail auto-fetch and push

00:03:09.640 --> 00:03:12.100
in the background has been halted.

00:03:12.100 --> 00:03:14.100
If your application
continues to use Mail,

00:03:14.100 --> 00:03:14.100
it's going to have a lot of problems.

00:03:14.100 --> 00:03:16.310
So if you're running out of memory,
unabated, eventually,

00:03:16.390 --> 00:03:18.090
your app is going to
get terminated as well.

00:03:18.100 --> 00:03:21.980
And this has a definite noticeable
negative impact because to a user,

00:03:22.030 --> 00:03:24.090
it feels like your application just quit.

00:03:24.100 --> 00:03:27.100
And obviously, this is a bad thing.

00:03:27.100 --> 00:03:32.220
So we allow you to deal with these
situations on the iPhone by allowing

00:03:32.430 --> 00:03:34.950
you to respond to memory warnings.

00:03:35.160 --> 00:03:37.250
And if you respond to
memory warnings effectively,

00:03:37.270 --> 00:03:40.100
you can avoid these sorts of
situations when your app is running.

00:03:40.100 --> 00:03:43.050
So let's talk about how exactly
you respond to memory warnings.

00:03:44.480 --> 00:03:47.680
There are a couple of ways in which
memory warnings get to your application.

00:03:47.740 --> 00:03:51.040
There's a notification that you can
listen for at the application level.

00:03:51.120 --> 00:03:55.520
But probably the more useful one is that
every view controller which is currently

00:03:55.580 --> 00:03:59.750
instantiated in your application
will get called with a method that's

00:03:59.860 --> 00:04:02.400
called did receive memory warning.

00:04:02.460 --> 00:04:07.210
And the default implementation of this
method will release the view that's being

00:04:07.350 --> 00:04:11.740
managed by your view controller if it's
not currently being shown on screen.

00:04:11.800 --> 00:04:14.840
And this is something that we've heard a
lot of people asking about here at WWDC.

00:04:14.840 --> 00:04:17.590
They wonder about, you know,
if their application has a

00:04:17.600 --> 00:04:19.830
very deep navigation stack,
what's going to happen?

00:04:19.860 --> 00:04:22.640
You know, is their application going
to run out of memory?

00:04:22.680 --> 00:04:27.100
And the nice thing here is that all
except for your top view controller

00:04:27.100 --> 00:04:30.710
in your navigation stack will
automatically release their views

00:04:30.810 --> 00:04:32.340
if they're not being displayed.

00:04:32.520 --> 00:04:35.200
And we're able to do
this because either A,

00:04:35.270 --> 00:04:38.240
you're loading your view
controller's view from a nib.

00:04:38.310 --> 00:04:41.740
And the view controller keeps track of
the name of the nib that you loaded.

00:04:41.740 --> 00:04:44.720
So when it's time to redisplay,
if the view is purged,

00:04:44.920 --> 00:04:47.340
it's able to bring it
back in from the nib.

00:04:47.340 --> 00:04:51.840
In the second case where you overrode
load view in your application,

00:04:51.840 --> 00:04:55.150
we're just able to call load
view again as needed to lazily

00:04:55.150 --> 00:04:58.740
regenerate your view when it's
time to redisplay on the screen.

00:04:58.740 --> 00:05:03.370
So this is some automatic behavior in
view controller that you get for free.

00:05:03.560 --> 00:05:05.510
Additionally,
it's your responsibility in your

00:05:05.510 --> 00:05:09.230
view controller subclass to release
any other expensive resources

00:05:09.610 --> 00:05:11.840
which you may be holding onto.

00:05:11.950 --> 00:05:14.410
So the way this may look in
your view controller subclass

00:05:14.560 --> 00:05:18.180
is that you'll override the did
receive memory warning method.

00:05:18.240 --> 00:05:20.740
And you'll always call through to
super to make sure you get that

00:05:20.740 --> 00:05:22.380
view releasing functionality.

00:05:22.470 --> 00:05:25.950
And then you'll release any
other expensive resources.

00:05:26.010 --> 00:05:28.090
Additionally,
if you're holding onto references

00:05:28.480 --> 00:05:30.560
to subviews of your main view,
you're going to want to

00:05:30.690 --> 00:05:32.570
clear those out as well,
because they're not going

00:05:32.570 --> 00:05:34.150
to be valid anymore.

00:05:34.400 --> 00:05:37.320
Let's talk a little bit more
about what kind of resources you

00:05:37.320 --> 00:05:40.330
want to release in this method.

00:05:40.750 --> 00:05:45.940
The big candidates are resources
which are expensive and re-creatable.

00:05:45.980 --> 00:05:49.100
So things like images, sounds,
maybe even movies that you've

00:05:49.100 --> 00:05:51.140
loaded up and queued up to play.

00:05:51.200 --> 00:05:53.780
If they aren't currently
being used on the screen,

00:05:53.780 --> 00:05:57.200
then it's a great time
to purge those resources.

00:05:57.240 --> 00:05:59.610
Additionally,
any type of cached data which you

00:05:59.610 --> 00:06:02.800
may have loaded in your application,
perhaps to improve performance,

00:06:03.020 --> 00:06:04.420
this is the time to get rid of it.

00:06:04.510 --> 00:06:08.320
So if you've loaded data from a plist
or from a SQLite database and you're

00:06:08.410 --> 00:06:12.000
holding a big array of stuff in memory,
you're going to want to release it.

00:06:12.110 --> 00:06:15.520
So yeah, here's our app,
our view controller, it's releasing,

00:06:15.560 --> 00:06:16.700
everybody's happy.

00:06:16.730 --> 00:06:17.960
Nobody got killed.

00:06:18.060 --> 00:06:22.180
So an important step here
is once you've implemented,

00:06:22.180 --> 00:06:24.870
did receive memory warning,
you're going to want to verify

00:06:25.040 --> 00:06:27.770
that your application behaves in
the way that you're expecting.

00:06:28.020 --> 00:06:29.620
So there are a couple of ways to do this.

00:06:29.650 --> 00:06:31.160
And there's really no substitute.

00:06:31.500 --> 00:06:49.700
So we're going to take a look
at that right now with a demo.

00:06:55.400 --> 00:06:59.470
So as you can see here,
we've got our recipes application,

00:06:59.490 --> 00:07:00.900
which we know and love.

00:07:00.970 --> 00:07:03.880
And I'm just going to run it real
quick here so that those of you who

00:07:03.880 --> 00:07:05.260
haven't seen it can see what's going on.

00:07:05.260 --> 00:07:07.580
We've got a list of
recipes at the top level,

00:07:07.580 --> 00:07:10.580
then some detail about that recipe,
and we can even view a

00:07:10.590 --> 00:07:12.060
photo for the recipe.

00:07:12.060 --> 00:07:13.840
There are some other
aspects to the application,

00:07:13.840 --> 00:07:15.030
but that's the main gist of it.

00:07:15.980 --> 00:07:23.000
Now, if I go to the Run menu in Xcode,
and I go to Start with Performance Tool,

00:07:23.070 --> 00:07:27.040
and I use the Object Allocations
template for instruments,

00:07:27.390 --> 00:07:30.460
We're going to launch the
application and also profile the

00:07:30.460 --> 00:07:31.590
memory usage in the background.

00:07:31.780 --> 00:07:33.470
So as you can see here,
there's something in our

00:07:33.470 --> 00:07:36.580
application which is ramping
up the memory usage on launch.

00:07:36.660 --> 00:07:40.060
And if I go to the hardware
menu in the simulator,

00:07:40.100 --> 00:07:43.370
I can simulate a memory warning to
see what's going to happen in the

00:07:43.370 --> 00:07:45.740
case of a low memory situation.

00:07:45.830 --> 00:07:48.310
So here I'm going to trigger that,
and it doesn't really look

00:07:48.310 --> 00:07:49.430
like anything happened.

00:07:49.780 --> 00:07:52.210
So we want to fix that.

00:07:52.310 --> 00:07:54.020
Let's go back in here,
and just for kicks,

00:07:54.070 --> 00:07:55.540
we can even drag on the
instrument's timeline.

00:07:55.540 --> 00:07:59.100
And it looks like we started at
about 8 megabytes of memory usage.

00:07:59.290 --> 00:08:01.560
And then due to some resource
that we were loading,

00:08:01.610 --> 00:08:03.410
we actually went up
close to 12 megabytes.

00:08:03.530 --> 00:08:07.810
So if we can release that resource,
that'll help our application

00:08:07.810 --> 00:08:09.150
avoid termination.

00:08:09.830 --> 00:08:13.160
Let's go into our recipe
list table view controller.

00:08:13.200 --> 00:08:16.320
And it looks like in here we've got
this new thing being created in the

00:08:16.320 --> 00:08:19.160
init method called expensive resource.

00:08:19.170 --> 00:08:22.750
Wow, that sure looks suspicious.

00:08:22.760 --> 00:08:24.410
This is a little bit
of a contrived example,

00:08:24.500 --> 00:08:27.820
but we really want to just
show you how to use the tools.

00:08:27.860 --> 00:08:29.960
And then the specifics of
your application's memory

00:08:29.960 --> 00:08:32.440
usage are up to you to manage.

00:08:32.440 --> 00:08:34.020
So you've got this expensive resource.

00:08:34.040 --> 00:08:36.940
And just like any good
Objective-C developer,

00:08:36.970 --> 00:08:39.060
we're releasing it in the dialyc method.

00:08:39.110 --> 00:08:42.250
And in your desktop Mac OS X application,
this would probably be enough.

00:08:42.410 --> 00:08:44.800
You might do some more
aggressive purging,

00:08:44.850 --> 00:08:47.870
but really this is the bare minimum.

00:08:48.010 --> 00:08:53.740
So what we want to do is release this
object in response to a memory warning.

00:08:53.830 --> 00:08:56.460
So as you can see here,
we've already overridden the did

00:08:56.460 --> 00:08:58.220
receive memory warning method.

00:08:58.440 --> 00:09:02.150
And what I'm going to do here
is add a little bit of code to

00:09:02.150 --> 00:09:05.530
release our expensive resource--
if only it were this easy,

00:09:05.530 --> 00:09:07.470
right-- and nil it out.

00:09:07.570 --> 00:09:10.000
And an important thing to remember
here is that in your application,

00:09:10.000 --> 00:09:13.370
you're going to need to make sure that
you have some lazy loading built in

00:09:13.530 --> 00:09:17.370
so that you can release this expensive
resource and then bring it back as needed

00:09:17.500 --> 00:09:20.100
if you're going to need it down the road.

00:09:20.210 --> 00:09:22.140
So I've added these couple lines of code.

00:09:22.190 --> 00:09:24.300
I'm going to build my application.

00:09:24.350 --> 00:09:28.240
And then I'm going to go again and run,
start with Performance Tool,

00:09:28.320 --> 00:09:29.990
Object Allocations.

00:09:31.090 --> 00:09:34.760
And as you can see here,
our memory is ramping up again.

00:09:34.810 --> 00:09:38.400
And if I go to the hardware menu
and simulate memory warning,

00:09:38.450 --> 00:09:40.880
and even if this view controller,
where the expensive

00:09:40.880 --> 00:09:43.750
resource was being held,
isn't currently being

00:09:43.750 --> 00:09:46.380
displayed-- in fact,
especially if it's not the one being

00:09:46.510 --> 00:09:49.620
displayed-- then we want to make sure
that that resource gets released.

00:09:49.720 --> 00:09:50.410
So let's try it out.

00:09:50.650 --> 00:09:52.000
Cross your fingers.

00:09:52.000 --> 00:09:54.570
And it looks like we dropped
off a nice little cliff there

00:09:54.570 --> 00:09:57.220
in terms of memory utilization.

00:09:57.310 --> 00:09:59.720
And we can even check
here using the timeline.

00:10:00.070 --> 00:10:02.610
It looks like we dropped
down by four megabytes or so.

00:10:02.720 --> 00:10:05.120
So that was a pretty expensive resource.

00:10:05.480 --> 00:10:10.780
So the key here is that you're going
to want to verify in your application,

00:10:10.830 --> 00:10:14.880
using the simulator, that your expensive
resources get released.

00:10:14.880 --> 00:10:16.820
Can we go back to the slides?

00:10:20.500 --> 00:10:27.010
: So yeah, release anything which
can be recreated later,

00:10:27.010 --> 00:10:28.940
and especially if it's expensive.

00:10:29.340 --> 00:10:32.370
On top of that, you can use tools like
instruments in the simulator,

00:10:32.500 --> 00:10:35.110
which is a really quick place
to do a first pass and see

00:10:35.170 --> 00:10:36.900
how your application behaves.

00:10:37.020 --> 00:10:41.810
And there really is no substitute for
on-device testing of this sort of thing.

00:10:41.990 --> 00:10:44.320
So you'll want to make sure you
test your application in a wide

00:10:44.360 --> 00:10:49.350
variety of situations to make sure
that it has a great user experience.

00:10:49.350 --> 00:10:51.970
Next,
I'm going to ask Alex to come on stage,

00:10:51.990 --> 00:10:54.300
and we're going to talk about
customizing the navigation in your

00:10:54.370 --> 00:10:56.380
UI Navigation Controller-based app.

00:10:56.380 --> 00:10:57.080
Alex?

00:10:58.550 --> 00:11:01.610
: Thank you, Evan.

00:11:01.610 --> 00:11:01.610
Thank you.

00:11:03.350 --> 00:11:05.420
All right,
so now we're going to talk about

00:11:05.900 --> 00:11:07.680
customizing the navigation.

00:11:07.810 --> 00:11:11.010
Before we get into this,
let's go back to what

00:11:11.010 --> 00:11:12.600
we talked about earlier.

00:11:12.790 --> 00:11:16.670
Let's go back to the basics
of navigation controllers.

00:11:17.060 --> 00:11:20.520
This is stuff we've covered in the
understanding view controllers,

00:11:20.520 --> 00:11:22.500
but I'm just going to
review a little bit.

00:11:22.630 --> 00:11:25.120
So again,
the navigation controller manages

00:11:25.180 --> 00:11:26.900
a stack of view controllers.

00:11:27.110 --> 00:11:31.720
Make sure that the view controls
animate properly when you're

00:11:31.720 --> 00:11:33.680
pushing or popping view controllers.

00:11:33.740 --> 00:11:40.320
It also manages the navigation bar and
always guarantees that the navigation

00:11:40.320 --> 00:11:44.950
bar will reflect the view controller that
is displayed at the top of the stack.

00:11:45.170 --> 00:11:48.880
It will also, as you can see here,
display a little back button with the

00:11:48.880 --> 00:11:51.300
title of the previous view controller.

00:11:51.940 --> 00:11:53.110
All right.

00:11:53.200 --> 00:11:56.220
Now that we're clear on the basics,
customizing the navigation.

00:11:56.220 --> 00:11:58.290
Why would you want to do this?

00:11:58.460 --> 00:12:02.640
Well, the navigation bar is actually
a great place to put buttons.

00:12:02.830 --> 00:12:04.620
This is at the very top of the screen.

00:12:04.620 --> 00:12:07.400
This is the first thing your
user is going to see when they're

00:12:07.540 --> 00:12:09.440
actually opening your application.

00:12:09.440 --> 00:12:13.260
As they scan down, scan your application,
oh, buttons at the top.

00:12:13.320 --> 00:12:16.810
So this is a really good
place to put your controls and

00:12:16.810 --> 00:12:19.320
provide user with functionality.

00:12:19.880 --> 00:12:21.950
So here we have a couple
of examples of this.

00:12:21.950 --> 00:12:24.570
As you can see,
the clock application and the phone,

00:12:24.620 --> 00:12:26.790
the recents, and the phone application.

00:12:28.600 --> 00:12:31.760
In those two applications,
we have a number of buttons.

00:12:31.860 --> 00:12:35.010
You see in the clock,
we have an edit button at the

00:12:35.340 --> 00:12:37.900
top left and an add button.

00:12:38.010 --> 00:12:40.980
And in the phone application,
the recents, we have a toggle item,

00:12:40.980 --> 00:12:45.270
a toggle button in the middle,
as well as a clear button.

00:12:45.380 --> 00:12:48.380
One thing to note about those
buttons is that every single

00:12:48.380 --> 00:12:51.900
one of them actually acts on the
entire screen full of content.

00:12:52.000 --> 00:12:56.190
It is very common in the navigation
bar to put buttons that actually

00:12:56.190 --> 00:12:58.500
modify the whole screen full.

00:12:58.610 --> 00:13:01.050
In the case of clock,
the edit button will actually

00:13:01.630 --> 00:13:05.940
change the appearance of every
single cell in that screen full.

00:13:06.060 --> 00:13:08.790
In the case of phone,
the toggle switch will actually

00:13:09.620 --> 00:13:12.210
change the contents of the view.

00:13:12.460 --> 00:13:16.900
Switching from displaying all the
calls to just the missed calls.

00:13:16.900 --> 00:13:19.020
This is an important
thing to keep in mind.

00:13:19.080 --> 00:13:22.350
It's usually affecting
the entire screenful.

00:13:22.420 --> 00:13:24.640
So how do we go about customizing?

00:13:24.640 --> 00:13:27.310
What is the first thing
we need to know about?

00:13:28.160 --> 00:13:30.000
Navigation items.

00:13:30.110 --> 00:13:31.240
It's an important bit.

00:13:31.390 --> 00:13:35.040
Each view controller
has a navigation item.

00:13:35.240 --> 00:13:39.410
The navigation item is a special
object that describes the appearance

00:13:39.640 --> 00:13:44.120
of the navigation bar when a view
controller is actually displayed.

00:13:45.130 --> 00:13:49.230
The navigation item has
three important properties:

00:13:49.360 --> 00:13:54.110
the left bar button item, the title view,
and the right bar button item.

00:13:54.280 --> 00:13:57.790
Those are displayed
in the navigation bar.

00:13:58.570 --> 00:14:01.100
Left bar button items,
right bar button items.

00:14:01.170 --> 00:14:02.180
Bar button items.

00:14:02.210 --> 00:14:04.280
All right, let's take a look at those.

00:14:04.360 --> 00:14:08.200
A bar button item is pretty
much like a button that can be

00:14:08.310 --> 00:14:10.520
placed in the navigation bar.

00:14:10.570 --> 00:14:13.320
It can have a title or an image.

00:14:13.360 --> 00:14:18.280
We also provide convenient
methods to create system items.

00:14:18.320 --> 00:14:21.730
We'll take a look at that in a second.

00:14:22.000 --> 00:14:25.180
Since it's like a button,
it needs a target and an action.

00:14:25.410 --> 00:14:28.730
The target is the object that's
going to receive the message when

00:14:28.840 --> 00:14:30.660
the button is actually pressed.

00:14:30.680 --> 00:14:33.610
And the action is a selector,
a method that's going to be

00:14:33.790 --> 00:14:35.780
called when the button is pressed.

00:14:36.080 --> 00:14:38.840
In most cases,
the target is actually going

00:14:38.840 --> 00:14:40.790
to be your view controller.

00:14:40.920 --> 00:14:43.880
Again, we're customizing the appearance
and navigation bar for a

00:14:43.880 --> 00:14:45.720
particular view controller.

00:14:46.090 --> 00:14:49.240
And since the view controller is
where you put your application logic,

00:14:49.320 --> 00:14:52.030
it makes sense to have the
target be that view controller.

00:14:52.040 --> 00:14:57.100
So how do we actually create a
button to put in the navigation bar?

00:14:57.120 --> 00:14:58.800
This is what the code looks like.

00:14:58.920 --> 00:15:04.410
You have a bar button item, allocate,
and with a title, in this case,

00:15:04.520 --> 00:15:08.820
we want to put a foo button
in the navigation bar.

00:15:08.820 --> 00:15:11.100
So we initialize it with a title.

00:15:11.320 --> 00:15:14.630
We also set its side to be
bordered so we actually display

00:15:14.630 --> 00:15:16.470
borders around the button.

00:15:16.480 --> 00:15:20.060
And then, importantly, here,
we set the target.

00:15:20.060 --> 00:15:22.850
This is code that will live
in the view controller,

00:15:22.850 --> 00:15:25.460
so the target itself,
the view controller.

00:15:25.460 --> 00:15:29.330
And when that button is pressed,
we want the foo method to be called.

00:15:29.390 --> 00:15:31.650
So we pass in the selector foo.

00:15:33.510 --> 00:15:38.300
Another common thing to see,
that you see in the navigation bar are,

00:15:38.300 --> 00:15:40.550
for example, an Add button.

00:15:40.550 --> 00:15:44.120
We provide a very convenient
way of creating those.

00:15:44.390 --> 00:15:46.270
Those we call system items.

00:15:46.270 --> 00:15:50.950
So, to create one of those,
you're going to call UI BarButtonItem,

00:15:50.950 --> 00:15:56.770
Alec, in it with BarButtonSystemItem,
and you pass the system item add to it.

00:15:57.190 --> 00:16:01.950
This will create a button that already
has a little graphic for adding a

00:16:02.550 --> 00:16:03.790
whatever you're actually adding.

00:16:03.910 --> 00:16:05.880
In this case, a recipe later.

00:16:06.220 --> 00:16:08.760
Again, the target itself,
the view controller,

00:16:08.760 --> 00:16:12.370
and the method that's going to be
called in this particular case,

00:16:12.410 --> 00:16:13.590
the add method.

00:16:13.760 --> 00:16:15.550
All right, simple enough.

00:16:15.830 --> 00:16:19.190
Another very common button you might
have seen in different applications,

00:16:19.320 --> 00:16:20.800
the Edit Done button.

00:16:21.080 --> 00:16:23.170
So let's take a look at this one.

00:16:23.980 --> 00:16:25.630
Again, this is a very common pattern.

00:16:25.710 --> 00:16:28.810
A lot of applications actually
edit the contents of the

00:16:28.820 --> 00:16:31.670
screen with an edit button.

00:16:31.900 --> 00:16:35.900
As you can see in the movie here,
the edit button is special.

00:16:35.910 --> 00:16:40.900
It changes color when it's switched,
changes title when it's toggled.

00:16:40.900 --> 00:16:43.900
And in this case,
in the recipes application,

00:16:43.900 --> 00:16:47.890
we're also going to change the
appearance of the table view.

00:16:49.050 --> 00:16:51.200
This is actually really simple to do.

00:16:51.240 --> 00:16:56.290
Each view controller can actually
create an edit button item.

00:16:56.880 --> 00:16:59.940
That button item has all
the right characteristics.

00:17:00.160 --> 00:17:03.410
It has the title, it changes color,
there's all those things.

00:17:03.620 --> 00:17:07.540
In addition to that,
it is already wired to the view

00:17:07.540 --> 00:17:09.910
controller that created it.

00:17:10.300 --> 00:17:13.400
and to a special method we're
going to see in a second.

00:17:13.540 --> 00:17:16.900
So how do we actually
create that EditButtonItem?

00:17:17.050 --> 00:17:18.240
It's very simple.

00:17:18.350 --> 00:17:21.740
You're going to ask yourself,
in this case,

00:17:21.890 --> 00:17:26.250
the RecipeListViewController,
which is the view controller we are

00:17:26.340 --> 00:17:30.460
customizing the navigation bar for,
and you're going to set the

00:17:30.460 --> 00:17:34.620
leftbar button item of the
navigation item of that view

00:17:34.620 --> 00:17:37.440
controller to be the EditButtonItem.

00:17:37.550 --> 00:17:40.680
To get the EditButtonItem,
self.EditButtonItem.

00:17:40.730 --> 00:17:42.480
That creates this EditButtonItem.

00:17:42.520 --> 00:17:46.470
Again,
the button is actually already wired

00:17:46.470 --> 00:17:50.680
up to the setEditingAnimated method.

00:17:50.730 --> 00:17:54.200
This is a special method that gets
called whenever that button is pressed.

00:17:54.280 --> 00:17:59.090
So the view control actually keeps track
of the current editing state and such.

00:17:59.500 --> 00:18:01.710
If you want to have
custom animation in there,

00:18:01.830 --> 00:18:06.760
if you want to actually change the
contents of your view to reflect

00:18:06.870 --> 00:18:10.980
the fact that it's now in edit mode,
you can put your code right there.

00:18:11.100 --> 00:18:13.650
One nice little thing here,
one advantage of using the

00:18:13.650 --> 00:18:17.450
UI Table View Controller is that
it already does that for you.

00:18:17.540 --> 00:18:20.630
It implements this method and
actually switches the state

00:18:20.640 --> 00:18:22.560
of the table view accordingly.

00:18:22.720 --> 00:18:26.980
So you'll actually get the same UI as
we just saw in the recipes application

00:18:26.980 --> 00:18:28.710
in the little movie at the top.

00:18:29.730 --> 00:18:30.740
All right.

00:18:30.760 --> 00:18:32.640
Add button, edit button.

00:18:32.680 --> 00:18:36.540
Next one we're going to
look at is the title view.

00:18:37.650 --> 00:18:40.600
The title view we've seen
in the phone application,

00:18:40.600 --> 00:18:42.040
a little example.

00:18:42.170 --> 00:18:46.170
You can actually put any arbitrary
view you want into this title view.

00:18:46.540 --> 00:18:49.900
It doesn't have to just be the title.

00:18:50.010 --> 00:18:52.910
In this case, in the recipes application,
we're going to add a

00:18:53.190 --> 00:18:56.010
little toggle button,
very much like the phone application has,

00:18:56.130 --> 00:18:58.190
the recents in the phone application.

00:18:58.310 --> 00:19:00.560
In this case,
it's going to toggle the sort

00:19:00.980 --> 00:19:02.800
ordering for the list of recipes.

00:19:02.990 --> 00:19:05.200
How does this work?

00:19:05.290 --> 00:19:07.190
A couple lines of code.

00:19:07.860 --> 00:19:11.840
You create a segmented control,
and once you have that segmented control,

00:19:12.110 --> 00:19:16.040
you set it as the title view
for the navigation item.

00:19:16.190 --> 00:19:17.700
Again, self navigation item.

00:19:17.700 --> 00:19:19.940
This is code that lives
in the view controller.

00:19:20.120 --> 00:19:23.580
Self navigation item,
title view equals segmented control.

00:19:23.910 --> 00:19:25.420
And that's all you really need to do.

00:19:25.560 --> 00:19:29.010
We'll take care of putting it
in the navigation bar for you.

00:19:29.890 --> 00:19:32.050
So I've covered the three
different properties we had,

00:19:32.110 --> 00:19:34.840
the left bar-bar 9M,
the right bar-bar 9M, the title view.

00:19:34.840 --> 00:19:37.090
There's one more that
I haven't talked about yet.

00:19:37.150 --> 00:19:38.850
It's the back button.

00:19:41.480 --> 00:19:43.470
Wouldn't it be nice,
if you look at this example,

00:19:43.670 --> 00:19:46.600
we have a very long back button.

00:19:46.630 --> 00:19:48.700
The go for the is actually quite long.

00:19:48.700 --> 00:19:51.640
And it's even forcing the category,
the title of the current view controller,

00:19:51.640 --> 00:19:54.790
which is really the important view
controller because it's the front most.

00:19:54.860 --> 00:19:57.230
It's forcing the title
to be slightly offset,

00:19:57.230 --> 00:19:59.220
off-center, not looking so great.

00:20:00.440 --> 00:20:03.440
Wouldn't it be nice if we could actually
have a shorter title for the back button?

00:20:03.620 --> 00:20:05.240
Well, you can.

00:20:05.240 --> 00:20:06.680
So how does this work?

00:20:07.070 --> 00:20:07.800
Very simple.

00:20:07.850 --> 00:20:11.410
We have a property on the navigation
item that I haven't talked about yet.

00:20:11.410 --> 00:20:14.800
It's the back bar button item.

00:20:15.240 --> 00:20:18.860
This is actually a property that
lives in the view controller,

00:20:18.860 --> 00:20:21.220
not in the-- in this case,
not in the category view controller,

00:20:21.220 --> 00:20:23.640
but the previous view controller,
the detailed view controller,

00:20:23.640 --> 00:20:27.320
the one that had the recipe,
the actual recipe.

00:20:27.330 --> 00:20:34.360
That view controller can say,
when I'm the item just below the top,

00:20:34.460 --> 00:20:36.660
I want my back button to
look a little differently.

00:20:36.660 --> 00:20:39.480
My title is too long,
so don't display that in the back button.

00:20:39.480 --> 00:20:41.300
Actually customize it.

00:20:41.430 --> 00:20:44.160
And for this,
we're going to create just a UI bar

00:20:44.160 --> 00:20:48.840
button item using a title that's
actually shorter than the regular title.

00:20:48.840 --> 00:20:50.000
And there we go.

00:20:50.180 --> 00:20:53.790
We set that at the back bar button
item of our navigation item.

00:20:53.820 --> 00:20:58.910
Again, this is the view controller
that's before this one.

00:20:59.320 --> 00:21:02.940
All right, well, with this,
I'm going to ask Evan to come

00:21:02.940 --> 00:21:04.600
back on stage to do a little demo.

00:21:04.600 --> 00:21:07.130
Evan?

00:21:16.410 --> 00:21:21.440
So let's do that last thing first,
because it confuses a lot of people where

00:21:21.440 --> 00:21:23.720
to do the back button customization.

00:21:23.830 --> 00:21:26.450
So what we're going to do-- actually,
let's look at this in

00:21:26.450 --> 00:21:27.680
the application first.

00:21:27.890 --> 00:21:29.800
I'm going to build and run.

00:21:30.430 --> 00:21:33.480
And as you can see here,
when I pick the-- I'm not even going to

00:21:33.560 --> 00:21:37.720
try to pronounce it-- the back button
kind of has an unwieldy size to it.

00:21:37.940 --> 00:21:40.820
We'd really like to show
a shorter title here.

00:21:40.930 --> 00:21:43.790
So I'm not going to customize
the category view controller.

00:21:43.870 --> 00:21:46.690
I'm going to customize the
recipe detail view controller,

00:21:46.720 --> 00:21:49.900
which is being represented
by the back button.

00:21:50.010 --> 00:21:53.370
So here in the recipe
detail view controller code,

00:21:53.580 --> 00:21:58.330
it looks like we're setting our
title in the viewWillAppear method.

00:21:58.580 --> 00:22:03.540
So to go with that,
I'm going to create a UI bar button item,

00:22:03.610 --> 00:22:06.280
which will be represented
as a back button.

00:22:06.360 --> 00:22:08.880
And I'm going to set the
title to be something shorter.

00:22:08.930 --> 00:22:10.960
And actually,
the style and the target and the

00:22:10.960 --> 00:22:12.400
action here don't really matter.

00:22:12.520 --> 00:22:14.910
We're going to override
those automatically in

00:22:14.910 --> 00:22:17.480
the navigation controller,
because we want all back buttons

00:22:17.550 --> 00:22:19.870
to behave in the same way.

00:22:20.180 --> 00:22:25.140
Next, I'm going to set our navigation
item's back bar button item to be

00:22:25.140 --> 00:22:27.800
this object which we just created.

00:22:27.890 --> 00:22:31.280
And then I'm going to release it,
because now our navigation

00:22:31.280 --> 00:22:32.900
item is the owner.

00:22:33.010 --> 00:22:36.350
With this code written,
let's try running one more time.

00:22:37.670 --> 00:22:40.720
And you'll see here
that when I navigate in,

00:22:40.720 --> 00:22:42.310
we've got a much shorter
back button title.

00:22:42.470 --> 00:22:44.720
This might seem like a kind
of minor cosmetic thing,

00:22:44.750 --> 00:22:48.240
but it's actually a nice way to add
some polish to your application.

00:22:48.570 --> 00:22:51.390
Now,
let's jump in and add an Edit Done button

00:22:51.470 --> 00:22:53.920
here on the left-hand side of the screen.

00:22:53.920 --> 00:22:55.260
This is such a common thing.

00:22:55.260 --> 00:23:00.000
So many applications toggle between an
edit mode and a non-editing mode that you

00:23:00.410 --> 00:23:03.360
can do this with a single line of code.

00:23:03.450 --> 00:23:06.260
So here in my recipe list
table view controller,

00:23:06.310 --> 00:23:10.020
which is this guy right here,
it looks like we're setting up the

00:23:10.020 --> 00:23:12.180
title and then we're setting the image.

00:23:12.230 --> 00:23:17.870
Let's set our navigation item's
left bar button item to our own

00:23:18.230 --> 00:23:21.160
lazily created edit button item.

00:23:21.200 --> 00:23:24.600
Once I've written this line of code,
let's build and run.

00:23:25.200 --> 00:23:28.050
And you'll see that we get an
edit done button here in the

00:23:28.100 --> 00:23:29.600
top of the navigation bar.

00:23:29.740 --> 00:23:32.600
And it automatically gets transitioned
out when we navigate away.

00:23:32.600 --> 00:23:34.770
It does the right fade or movement,
whatever.

00:23:34.780 --> 00:23:36.950
I don't even remember what it's
supposed to do as it disappears.

00:23:37.090 --> 00:23:38.920
But that gets managed
for you automatically.

00:23:39.000 --> 00:23:41.500
And if I toggle it,
it's going to toggle the

00:23:41.590 --> 00:23:43.160
state of the table view.

00:23:43.230 --> 00:23:46.590
And this is because we're using
UI Table View Controller as

00:23:46.600 --> 00:23:49.600
our base class here for
this screen full of content.

00:23:49.600 --> 00:23:51.520
So we get that little bit
of functionality pretty

00:23:51.520 --> 00:23:53.270
much for free right there.

00:23:53.360 --> 00:23:55.200
The button updates its appearance.

00:23:55.250 --> 00:23:58.060
And if you actually want to
implement the deletion here,

00:23:58.120 --> 00:24:00.300
there are a couple more methods
which you need to write.

00:24:00.330 --> 00:24:02.780
And that's actually going to
be covered in the advanced or

00:24:02.930 --> 00:24:07.080
mastering iPhone Table View session.

00:24:07.520 --> 00:24:11.840
So let's add an Add button on the
right side of the navigation bar.

00:24:11.840 --> 00:24:13.590
So we're going to do
that with a system item,

00:24:13.600 --> 00:24:16.290
like Alex mentioned before.

00:24:16.830 --> 00:24:21.700
So we're going to create a bar button
item using the system add item.

00:24:21.700 --> 00:24:23.700
And we're going to set
up the target action.

00:24:23.700 --> 00:24:26.670
So the target will be self,
and the action will be the add method,

00:24:26.670 --> 00:24:29.430
which we're going to define in a second.

00:24:29.950 --> 00:24:33.880
We're going to set it as
our right bar button item,

00:24:33.880 --> 00:24:35.240
and we're going to release it.

00:24:35.280 --> 00:24:37.250
And if you look below here,
we've actually got a

00:24:37.250 --> 00:24:40.120
stubbed out add method.

00:24:40.400 --> 00:24:42.200
We're not going to fill this in just yet,
because that's going to be

00:24:42.280 --> 00:24:46.460
part of the next segment.

00:24:46.580 --> 00:24:48.390
So let's build and run.

00:24:50.180 --> 00:24:52.190
And here you can see that
we now have the standard

00:24:52.240 --> 00:24:54.240
Add button in our navigation bar.

00:24:54.310 --> 00:24:58.330
And we wanted all iPhone applications
to have the opportunity to present

00:24:58.440 --> 00:25:00.590
this type of a standard Add button.

00:25:00.740 --> 00:25:04.020
So you can do it like this.

00:25:04.070 --> 00:25:07.330
Lastly, let's add that toggle button in
the middle here so you can switch

00:25:07.410 --> 00:25:11.340
between ascending and descending
sort order with your recipes.

00:25:11.480 --> 00:25:13.630
You can really add any
sort of custom view,

00:25:13.630 --> 00:25:16.770
but in this case,
we're going to use a segmented control.

00:25:16.910 --> 00:25:19.290
So first,
I'm going to create the segment control,

00:25:19.290 --> 00:25:22.330
just like I would any
other UI kit view class.

00:25:22.570 --> 00:25:25.980
And I'm going to give it
an array of two items,

00:25:25.980 --> 00:25:27.830
A to Z and Z to A.

00:25:27.930 --> 00:25:30.770
And then I'm going to set up a
couple of initial properties for it.

00:25:30.910 --> 00:25:33.600
The style is going to
match the navigation bar.

00:25:33.680 --> 00:25:38.810
And the initially selected segment
is going to be the first one.

00:25:38.990 --> 00:25:41.600
Next, I set the target in action.

00:25:41.680 --> 00:25:44.940
And this is a standard
UI control way of doing things.

00:25:45.090 --> 00:25:49.580
The selector is going to be toggle
sorting on our view controller.

00:25:50.920 --> 00:25:54.360
Then I'm going to set it as our
navigation item's title view.

00:25:54.530 --> 00:25:57.000
Again,
the navigation item is the way you get

00:25:57.140 --> 00:26:01.760
at all of the sort of view attributes
that show up in the navigation bar.

00:26:01.890 --> 00:26:04.200
And finally, I'm going to release it.

00:26:04.270 --> 00:26:06.740
And you can see below,
we've actually implemented the

00:26:06.740 --> 00:26:08.040
toggle sorting method already.

00:26:08.110 --> 00:26:11.490
It's going to send a message
over to another class,

00:26:11.500 --> 00:26:13.920
which manages the underlying data.

00:26:14.000 --> 00:26:17.120
And it's going to tell
our table view to reload.

00:26:17.230 --> 00:26:19.360
So with this little bit
of code written here,

00:26:19.390 --> 00:26:21.770
I'm going to build and run.

00:26:24.740 --> 00:26:27.310
And you can see we get this
segmented control up here.

00:26:27.410 --> 00:26:29.440
We can toggle the sort
order of our recipes,

00:26:29.530 --> 00:26:31.720
or in your application,
you could add any sort of

00:26:32.130 --> 00:26:33.730
control to do whatever you like.

00:26:33.850 --> 00:26:36.240
And again,
all of these buttons here at the top,

00:26:36.330 --> 00:26:39.460
we manage the positioning and the
appearance and the transitions

00:26:39.750 --> 00:26:40.740
so that you don't have to.

00:26:40.820 --> 00:26:43.070
And this is a great way to
have a consistent look and feel

00:26:43.360 --> 00:26:45.300
in your iPhone application.

00:26:45.300 --> 00:26:47.100
That wraps up the demo.

00:26:47.190 --> 00:26:48.100
Alex, back to you.

00:26:48.200 --> 00:26:49.870
Thank you, Evan.

00:26:57.870 --> 00:26:59.320
What did we just see?

00:26:59.580 --> 00:27:02.400
Again,
the navigation bar is a really good place

00:27:02.770 --> 00:27:06.910
to put your custom buttons and allow the
user to have access to functionality.

00:27:06.910 --> 00:27:10.710
It's the first thing they're going to
see when they launch your application.

00:27:10.710 --> 00:27:12.410
It's at the very top of the screen.

00:27:12.410 --> 00:27:13.910
So, add navigation button.

00:27:13.910 --> 00:27:16.540
If you have a use for it,
customize the title of your.

00:27:16.540 --> 00:27:18.040
It's very simple.

00:27:18.580 --> 00:27:20.240
Again, the back button title.

00:27:20.240 --> 00:27:22.540
It seems like a minor thing.

00:27:22.590 --> 00:27:25.600
It's actually a really nice polish item.

00:27:25.600 --> 00:27:31.590
It really makes your navigation bar
look cleaner and less cluttered.

00:27:33.460 --> 00:27:38.540
You've noticed in the demo we didn't
actually implement the add button.

00:27:38.590 --> 00:27:40.870
And there's a reason for that,
because as you might have

00:27:40.870 --> 00:27:43.560
noticed in a number of the app,
whenever you have an add button,

00:27:43.560 --> 00:27:47.900
we actually present a new view
controller that comes on top

00:27:47.900 --> 00:27:49.920
and covers the entire screen.

00:27:50.030 --> 00:27:51.070
So how does this work?

00:27:51.160 --> 00:27:53.020
And how do we-- how does this work?

00:27:53.150 --> 00:27:56.500
This is actually what we call
presenting content modally.

00:27:56.570 --> 00:28:01.280
It's good whenever you want to pick
from a set of data or create new items.

00:28:01.450 --> 00:28:04.180
It's a big context switch for the user.

00:28:04.320 --> 00:28:07.060
So how do we actually do this?

00:28:08.260 --> 00:28:09.740
Where do we do this?

00:28:09.870 --> 00:28:13.250
Here, let's take a look at
a couple of examples.

00:28:14.520 --> 00:28:20.740
Here in the Clock application again,
we have a plus button at the top right.

00:28:21.070 --> 00:28:27.320
When you press that plus button,
we're actually going to show a new alarm.

00:28:27.400 --> 00:28:36.200
[Transcript missing]

00:28:36.830 --> 00:28:41.500
Another example of this
is the SMS application.

00:28:41.600 --> 00:28:43.740
When the user is going
to compose a new SMS,

00:28:43.830 --> 00:28:46.480
we actually,
when the user presses the new SMS button,

00:28:46.480 --> 00:28:51.120
we're going to present a composed
view on top of everything else,

00:28:51.120 --> 00:28:52.460
covering everything else.

00:28:52.520 --> 00:28:55.980
In addition to that, in SMS,
we're also going to let the user

00:28:55.980 --> 00:28:59.900
pick people from the address book
by clicking this blue button.

00:28:59.900 --> 00:29:05.400
And then the user can cancel out of
both view controllers one at a time.

00:29:06.430 --> 00:29:08.970
So again,
we can actually present multiple view

00:29:09.230 --> 00:29:11.580
controllers on top of one another.

00:29:11.720 --> 00:29:13.810
So how does that work?

00:29:14.420 --> 00:29:16.650
In order to present a
mobile view controller,

00:29:16.650 --> 00:29:17.840
we have a simple method.

00:29:18.040 --> 00:29:23.000
Here in the recipe list view controller,
again, this is the list of recipe,

00:29:23.180 --> 00:29:26.540
We're going to create
an add view controller.

00:29:26.540 --> 00:29:30.120
It's a special type of view
controller we've implemented that

00:29:30.170 --> 00:29:34.800
lets you edit the initial things
we want to edit in a new recipe.

00:29:34.930 --> 00:29:39.880
So we create that view controller,
and then call presentModelViewController,

00:29:39.970 --> 00:29:42.940
passing in the add controller,
this view controller

00:29:42.940 --> 00:29:44.590
that's used for adding.

00:29:44.700 --> 00:29:48.760
And we can also pass in an animated flag,
depending whether we want

00:29:48.760 --> 00:29:50.310
to animate this or not.

00:29:50.440 --> 00:29:54.110
One thing to note here,
we're in the recipe list view controller.

00:29:54.220 --> 00:29:58.860
So this is the one that's actually going
to present the new view controller.

00:29:58.960 --> 00:30:00.670
This is what it's going to look like.

00:30:00.820 --> 00:30:02.280
Press the button.

00:30:02.400 --> 00:30:05.270
The view controller comes
up and covers the screen.

00:30:06.200 --> 00:30:09.250
Once we've done that,
let's say the user wants to cancel,

00:30:09.250 --> 00:30:12.670
the user is done entering data,
we're actually going

00:30:12.700 --> 00:30:13.990
to need to dismiss it.

00:30:14.230 --> 00:30:16.210
How do we dismiss?

00:30:16.780 --> 00:30:19.020
It's important to note here,
we have a simple method,

00:30:19.020 --> 00:30:23.360
actually dismiss model view controller,
that will dismiss the view controller.

00:30:23.360 --> 00:30:26.200
But it's important to note here
that this is actually done in

00:30:26.220 --> 00:30:28.080
the recipe list view controller.

00:30:28.080 --> 00:30:31.120
This is the view controller
that's underneath the add recipe.

00:30:31.120 --> 00:30:33.920
We have our recipe list,
then we bring up the add

00:30:34.150 --> 00:30:37.580
controller on top of it,
and it's actually the recipe list view

00:30:37.620 --> 00:30:39.700
controller that's going to call dismiss.

00:30:39.800 --> 00:30:43.220
Or rather, we're going to call dismiss on
the recipe list view controller

00:30:43.220 --> 00:30:44.620
that's down at the bottom.

00:30:44.640 --> 00:30:46.080
That will dismiss.

00:30:46.870 --> 00:30:48.820
the model view controller.

00:30:49.340 --> 00:30:54.270
So again, whichever view controller you
present the model view controller on

00:30:54.370 --> 00:30:58.960
should be the same one you dismiss
the model view controller from.

00:30:59.010 --> 00:31:00.020
All right.

00:31:00.090 --> 00:31:03.600
One thing you might have noticed in
this example is that we're covering the

00:31:03.650 --> 00:31:07.140
screen with the add view controller that
also has a navigation bar at the top.

00:31:07.260 --> 00:31:10.210
This is actually a
separate navigation bar,

00:31:10.210 --> 00:31:13.080
and therefore,
a separate navigation stack.

00:31:13.140 --> 00:31:16.260
You can have two full navigation
stacks on top of one another that

00:31:16.260 --> 00:31:18.890
are independent from one another.

00:31:19.230 --> 00:31:21.740
So here we have the Recipe
List View Controller.

00:31:22.050 --> 00:31:24.940
Again, we present the Add Recipe
View Controller.

00:31:25.090 --> 00:31:28.410
It has its own navigation bar at the top,
and therefore its own navigation stack,

00:31:28.620 --> 00:31:31.190
because it's a navigation controller.

00:31:32.760 --> 00:31:36.960
What this means is that you can
actually change the navigation stack

00:31:37.360 --> 00:31:39.540
underneath your model view controller.

00:31:39.670 --> 00:31:44.440
You can push and pop view controllers
underneath the model view controller

00:31:44.440 --> 00:31:46.930
that's currently being displayed.

00:31:47.430 --> 00:31:49.470
This might sound a little odd,
but this is actually very useful

00:31:49.540 --> 00:31:50.800
when you're creating new items.

00:31:50.950 --> 00:31:52.950
You might have noticed
that in Address Book,

00:31:53.050 --> 00:31:54.290
for example, in the Contacts application.

00:31:54.320 --> 00:31:57.660
When you create a new item,
we actually bring you to the

00:31:57.660 --> 00:32:00.180
new contact when you dismiss.

00:32:00.300 --> 00:32:01.520
So this will look like this.

00:32:01.770 --> 00:32:06.680
Again, we start the recipe list,
we create a new recipe, we save it,

00:32:06.810 --> 00:32:09.460
and we actually get to
view that full recipe.

00:32:09.590 --> 00:32:11.610
How do we do this in code?

00:32:11.650 --> 00:32:12.800
Well, it's pretty simple.

00:32:12.850 --> 00:32:15.920
This is the same method in the recipe
list view controller that's going to

00:32:15.920 --> 00:32:18.240
dismiss the model view controller.

00:32:18.300 --> 00:32:20.740
In this one, we're going to create

00:32:23.270 --> 00:32:24.160
Sorry, yeah.

00:32:24.160 --> 00:32:26.960
In this one,
we're going to create the next view

00:32:26.960 --> 00:32:28.180
controller we want to see underneath.

00:32:28.490 --> 00:32:32.220
So the actual recipe detail controller.

00:32:32.320 --> 00:32:34.740
And that's where we're going
to show the new recipe.

00:32:34.870 --> 00:32:37.600
Then, again,
this is the recipe list view controller.

00:32:37.600 --> 00:32:40.340
Remember, this is the one that's at
the bottom of the stack.

00:32:40.900 --> 00:32:42.580
That's underneath the
model view controller,

00:32:42.670 --> 00:32:43.140
rather.

00:32:43.250 --> 00:32:46.060
We're going to get its navigation
controller and push a new

00:32:46.440 --> 00:32:48.280
view controller on top of it.

00:32:48.380 --> 00:32:50.690
We don't want to animate this
because this is actually covered

00:32:50.720 --> 00:32:53.560
by the model view controller,
by the add recipe.

00:32:53.680 --> 00:32:55.750
Once it's done,
we're going to animate out

00:32:56.480 --> 00:32:59.300
the model view controller,
the add recipe.

00:32:59.450 --> 00:33:02.040
All right, this is a lot of hand
waving and gesturing,

00:33:02.040 --> 00:33:03.770
lots of view controllers.

00:33:03.870 --> 00:33:05.520
Let's actually see that.

00:33:05.630 --> 00:33:08.120
We're going to write some code.

00:33:13.700 --> 00:33:15.860
So here,
we're back in our recipes application.

00:33:16.130 --> 00:33:19.340
If I run this, we have an Add button.

00:33:19.600 --> 00:33:23.720
Again, we haven't implemented it yet,
so it doesn't do anything.

00:33:23.890 --> 00:33:25.950
Let's go back to the code.

00:33:26.810 --> 00:33:33.000
We're going to do this in the
add method we've defined earlier.

00:33:33.170 --> 00:33:35.080
Here's the add method.

00:33:35.320 --> 00:33:39.750
The first thing we're going to
do is actually create that view

00:33:39.750 --> 00:33:44.380
controller that we're going
to display on top of the list.

00:33:44.710 --> 00:33:47.720
So we create a recipe
add view controller.

00:33:47.830 --> 00:33:49.920
This is the type of view
controller we've defined.

00:33:49.920 --> 00:33:51.650
I'm going to show you briefly.

00:33:51.920 --> 00:33:55.310
The recipe add view controller, again,
it's a very simple subclass,

00:33:55.310 --> 00:33:56.960
the UI view controller.

00:33:57.150 --> 00:34:01.740
One interesting thing, it has a delegate,
and it defines delegate protocol

00:34:02.030 --> 00:34:03.830
that has a single method.

00:34:03.830 --> 00:34:07.280
The recipe add view
controller did add recipe.

00:34:07.330 --> 00:34:10.280
One interesting thing to note here,
it can actually pass nil for the

00:34:10.350 --> 00:34:12.400
recipe when the user has canceled.

00:34:12.400 --> 00:34:13.350
All right.

00:34:13.520 --> 00:34:18.240
We'll talk about that a little bit more,
so don't worry about it.

00:34:18.370 --> 00:34:19.090
All right.

00:34:19.090 --> 00:34:22.210
Back in the recipe list
table view controller,

00:34:22.290 --> 00:34:24.040
in the add method,
we've created the recipe

00:34:24.770 --> 00:34:26.370
add view controller.

00:34:26.580 --> 00:34:29.970
We're setting ourselves as the delegate.

00:34:30.370 --> 00:34:33.140
Next thing we need to do is
actually put that view controller

00:34:33.680 --> 00:34:35.440
in a navigation controller.

00:34:35.550 --> 00:34:38.790
That particular view controller
is not a navigation controller,

00:34:38.790 --> 00:34:42.680
but it prefers to live inside
a navigation controller.

00:34:42.840 --> 00:34:46.200
So we're going to put it as
the root view controller of

00:34:46.200 --> 00:34:48.410
a new navigation controller.

00:34:48.650 --> 00:34:52.180
Next, we're actually going to present
that new view controller.

00:34:52.180 --> 00:34:54.900
In this case, we're presenting the
navigation controller.

00:34:54.900 --> 00:34:57.580
Remember, the add view controller is
actually inside of that one.

00:34:57.610 --> 00:35:01.320
And we do want to animate,
show the user what's going on.

00:35:01.360 --> 00:35:04.630
All right, once we've done this,
we can actually release the navigation

00:35:04.630 --> 00:35:07.590
controller and the add controller,
because the add controller is

00:35:07.680 --> 00:35:09.460
part of the navigation controller.

00:35:09.460 --> 00:35:12.500
And the navigation controller
has now been presented as

00:35:12.500 --> 00:35:15.370
a modal view controller,
and it's being tracked.

00:35:15.440 --> 00:35:20.690
All right, when we run this.

00:35:21.270 --> 00:35:23.120
Actually, I forgot something.

00:35:23.270 --> 00:35:24.920
Let's go back to Xcode.

00:35:24.970 --> 00:35:27.280
I should listen to the warnings.

00:35:27.350 --> 00:35:28.280
All right.

00:35:28.320 --> 00:35:30.060
I said we implemented this delegate.

00:35:30.180 --> 00:35:32.400
We actually set ourselves a delegate.

00:35:32.450 --> 00:35:37.180
Xcode is not happy because we didn't
actually implement the delegate protocol.

00:35:37.250 --> 00:35:41.740
So let's go back to our header,
implement that protocol.

00:35:42.680 --> 00:35:46.980
and implement that one method
I showed you a little earlier.

00:35:47.100 --> 00:35:50.340
So the recipe add view
controller did add recipe.

00:35:50.800 --> 00:35:54.190
This is where we're actually going
to add this recipe to our model.

00:35:54.320 --> 00:35:56.660
So that's the first
thing we're going to do.

00:35:56.780 --> 00:35:59.470
The recipes controller
again is our model object.

00:35:59.670 --> 00:36:02.410
So we're going to add the recipe to it.

00:36:02.680 --> 00:36:07.910
Next, we're actually going to tell our
table view to reload its data.

00:36:08.530 --> 00:36:11.150
This is, again, the list of recipes.

00:36:11.160 --> 00:36:14.330
So it needs to reload because
there is a new recipe in there.

00:36:14.450 --> 00:36:18.040
The next step is to actually show-- this
is where I mentioned to you earlier--

00:36:18.130 --> 00:36:19.770
we can change the stack underneath.

00:36:20.090 --> 00:36:22.420
So we're going to show the recipe.

00:36:22.520 --> 00:36:25.640
And this method is just a simple
method I'm going to show you.

00:36:25.730 --> 00:36:28.780
It just pushes a recipe
detail view controller onto

00:36:28.810 --> 00:36:30.940
the navigation controller.

00:36:31.040 --> 00:36:31.760
So actually go back.

00:36:32.060 --> 00:36:33.310
Here we show the recipe.

00:36:33.420 --> 00:36:34.760
Great.

00:36:35.110 --> 00:36:38.440
Next thing we need to do is actually
dismiss the model view controller.

00:36:38.610 --> 00:36:43.340
And this one we're going to animate,
because this is direct user action.

00:36:43.470 --> 00:36:45.360
All right, with this, we're going to run.

00:36:45.730 --> 00:36:46.430
No more warnings.

00:36:46.670 --> 00:36:47.880
Excellent.

00:36:48.010 --> 00:36:51.180
All right, so when we add the new recipe,

00:36:51.390 --> 00:36:51.750
There we go.

00:36:51.810 --> 00:36:56.800
We have a navigation controller that
comes on top of the current stat.

00:36:56.860 --> 00:36:57.570
I can cancel.

00:36:57.680 --> 00:36:58.940
It dismisses it.

00:36:59.010 --> 00:37:05.120
If I add a new recipe,
chocolate number five,

00:37:05.850 --> 00:37:09.150
And save,
I'm actually brought directly to

00:37:09.150 --> 00:37:10.900
this new recipe that I just added.

00:37:11.060 --> 00:37:13.090
So I can go directly
and edit the category,

00:37:13.190 --> 00:37:14.500
for example.

00:37:14.610 --> 00:37:19.000
So this is a very nice way to let
the user know what just happened.

00:37:19.030 --> 00:37:19.800
All right.

00:37:20.100 --> 00:37:22.950
With that, back to the slides.

00:37:25.700 --> 00:37:27.000
So what did we just see?

00:37:27.040 --> 00:37:31.440
Again,
whenever you need to present content,

00:37:31.440 --> 00:37:35.840
whenever you need to add or pick
from an existing set of data,

00:37:35.880 --> 00:37:38.520
present your view controllers modally.

00:37:38.700 --> 00:37:43.640
We actually provide a number of pickers
for images or people that you can present

00:37:43.650 --> 00:37:46.080
modally and you should present modally.

00:37:46.200 --> 00:37:50.570
In addition to that,
you can push or pop view controllers

00:37:50.850 --> 00:37:53.700
underneath the modal view controllers.

00:37:53.800 --> 00:37:55.840
This is very helpful for the user.

00:37:55.960 --> 00:37:59.390
It really lets the user know what
just happened and everything.

00:37:59.560 --> 00:38:01.140
But you shouldn't abuse it.

00:38:01.220 --> 00:38:04.870
Don't just switch the entire stack
underneath the MoMA view controller

00:38:04.870 --> 00:38:06.530
and users are going to be all lost.

00:38:06.660 --> 00:38:11.290
Just do simple things like
presenting what you just added.

00:38:12.930 --> 00:38:14.800
All those things being done,
the navigation bar

00:38:14.800 --> 00:38:17.810
customized and everything,
we're actually going to

00:38:18.710 --> 00:38:20.920
let Evan back on stage,
and he's going to put all

00:38:21.140 --> 00:38:22.360
those things back together.

00:38:35.100 --> 00:42:21.200
[Transcript missing]

00:42:21.710 --> 00:42:24.420
Let's take a look at it,
just for the fun of it.

00:42:24.460 --> 00:42:26.170
All right,
we have a great chocolate cake,

00:42:26.260 --> 00:42:27.640
et cetera, et cetera.

00:42:27.700 --> 00:42:28.820
Great.

00:42:28.860 --> 00:42:32.720
All right, let's actually merge those
new view controls into it.

00:42:32.770 --> 00:42:35.890
We actually have written those
different view controllers.

00:42:36.070 --> 00:42:39.430
Here we have the timer,
very simple subclass

00:42:39.530 --> 00:42:42.260
of UI View Controller.

00:42:42.330 --> 00:42:44.630
We also have the converter.

00:42:44.710 --> 00:42:47.620
The converter is actually a hierarchy
of different view controllers.

00:42:47.800 --> 00:42:50.840
So we have a unit converter
table view controller.

00:42:50.840 --> 00:42:53.300
That's the base,
and that will let you drill down

00:42:53.300 --> 00:42:56.060
into different unit conversions.

00:42:56.120 --> 00:42:59.320
All right, to convert our app from
being just a simple,

00:42:59.320 --> 00:43:05.180
single navigation controller into
this arrangement and combination

00:43:05.180 --> 00:43:09.750
of tab bar and navigation flow,
we're going to go to the

00:43:09.750 --> 00:43:11.360
application delegate.

00:43:12.000 --> 00:43:15.000
Here we have the existing
Net Application Delegate.

00:43:15.290 --> 00:43:18.510
And we're going to just delete all of it.

00:43:18.710 --> 00:43:22.270
All right, this is just eight lines
of code that we deleted.

00:43:22.390 --> 00:43:24.080
No need to worry.

00:43:24.150 --> 00:43:27.280
We're going to recreate
this entire flow in there,

00:43:27.380 --> 00:43:27.920
step by step.

00:43:28.010 --> 00:43:30.130
The first thing we're going
to do is actually create all

00:43:30.250 --> 00:43:33.720
the different view controllers
we need to add to the tab bar.

00:43:33.960 --> 00:43:38.340
So let's start with our recipe
list table view controller.

00:43:38.440 --> 00:43:41.450
This is the one we were
just looking at earlier.

00:43:42.210 --> 00:43:44.110
It's a subclass of
UI Table View Controller,

00:43:44.230 --> 00:43:46.900
so we initialize it with
the right parameters.

00:43:46.960 --> 00:43:49.760
Next thing, this needs to live in a
navigation controller,

00:43:49.930 --> 00:43:53.480
so we're going to create a
navigation controller for it.

00:43:53.610 --> 00:43:56.820
So UI Navigation Controller,
in it with View Controller,

00:43:56.890 --> 00:43:58.500
Recipes View Controller.

00:43:59.870 --> 00:44:01.670
Once we've done that,
we don't need to hold on to the

00:44:01.670 --> 00:44:05.080
Recipe's View Controller because
the one we really want is the

00:44:05.160 --> 00:44:07.920
Recipe's Navigation Controller.

00:44:09.120 --> 00:44:10.830
That's our first item.

00:44:10.960 --> 00:44:15.040
The next one is the unit converter.

00:44:15.190 --> 00:44:17.570
So let's create our unit converter.

00:44:17.780 --> 00:44:21.110
This one,
just call AlecInit to create it.

00:44:21.170 --> 00:44:24.180
That's how it likes to be instantiated.

00:44:24.240 --> 00:44:25.980
And then again,
we're going to put that in

00:44:25.980 --> 00:44:27.680
a navigation controller.

00:44:27.820 --> 00:44:31.520
Same thing as before,
Init or a navigation controller

00:44:31.520 --> 00:44:34.860
with a root view controller,
which is the converter.

00:44:35.160 --> 00:44:36.050
Great.

00:44:36.130 --> 00:44:39.790
The third item we want to put
in there is the egg timer.

00:44:40.130 --> 00:44:43.540
For this, we're going to create a
UI View Controller using the

00:44:43.590 --> 00:44:45.460
timer view controller class.

00:44:45.520 --> 00:44:48.030
This one is instantiated from a nib.

00:44:48.090 --> 00:44:50.070
We've got one of each in here.

00:44:50.460 --> 00:44:52.100
So again, very simple.

00:44:52.100 --> 00:44:55.700
This one does not need to live
in a navigation controller.

00:44:55.860 --> 00:44:57.800
So we're done for the timer.

00:44:57.830 --> 00:44:59.300
Excellent.

00:44:59.350 --> 00:45:03.980
Next step is to create
the TabBarController.

00:45:04.080 --> 00:45:08.210
So for that, UI TabBarController,
Alec in it.

00:45:09.220 --> 00:45:12.400
Now we need to actually set the
view controllers that are going

00:45:12.400 --> 00:45:14.240
to be living in the tab bar.

00:45:14.360 --> 00:45:16.840
Those are the three that we just created.

00:45:16.940 --> 00:45:19.400
All right, the way we do this--

00:45:19.550 --> 00:45:24.110
TabBarController.ViewControllers
equals an array of the three

00:45:24.110 --> 00:45:25.680
view controllers we created.

00:45:25.700 --> 00:45:28.440
Again,
the Recipe's Navigation Controller,

00:45:28.470 --> 00:45:32.980
the Converter Navigation Controller,
and the Timer View Controller.

00:45:32.990 --> 00:45:34.980
Once we have this,

00:45:35.540 --> 00:45:41.780
We just set the tab bar controller's
view to be the subview of the window.

00:45:41.860 --> 00:45:44.080
This is essentially the same
code that was there before,

00:45:44.080 --> 00:45:48.960
except it was setting the
navigation controller's view to

00:45:48.960 --> 00:45:50.810
be the subview of the window.

00:45:50.990 --> 00:45:54.050
But now,
a tab bar controller is the top one.

00:45:54.410 --> 00:45:57.210
And then we make the
window key invisible.

00:45:57.590 --> 00:45:58.500
Great.

00:45:58.630 --> 00:46:00.580
So now let's run this.

00:46:02.730 --> 00:46:08.730
Actually, before we run this,
let's actually manage our memory properly

00:46:09.220 --> 00:46:13.700
and release all those view controllers
we just put into the tab bar controller.

00:46:13.970 --> 00:46:16.220
Okay, so now we can run.

00:46:16.370 --> 00:46:17.870
And there we go.

00:46:18.140 --> 00:46:22.270
Not so much code,
and we have a recipe list here,

00:46:22.270 --> 00:46:23.940
and our first item.

00:46:23.940 --> 00:46:26.350
You can actually drill down in there.

00:46:26.350 --> 00:46:28.260
And then we have a unit converter.

00:46:28.260 --> 00:46:30.880
Beautiful unit converter
to convert weight,

00:46:30.920 --> 00:46:32.060
imperial metric.

00:46:32.060 --> 00:46:34.380
And then we have an egg timer.

00:46:34.380 --> 00:46:35.820
Excellent.

00:46:35.820 --> 00:46:39.320
And I can go back to the recipes,
and you see I'm still in the same item.

00:46:39.320 --> 00:46:42.440
I can click again,
goes back to the top level, et cetera,

00:46:42.530 --> 00:46:43.360
et cetera.

00:46:44.020 --> 00:46:47.700
So very simple to combine
those two different flows.

00:46:47.930 --> 00:46:48.440
All right.

00:46:48.620 --> 00:46:51.140
That's it for the demo.

00:46:51.140 --> 00:46:51.140
Evan?

00:46:57.000 --> 00:47:00.230
Thanks, Alex.

00:47:00.340 --> 00:47:04.170
So as we saw right there,
we were able to assemble a complex

00:47:04.220 --> 00:47:07.510
application from simple parts
that we were able to develop

00:47:07.600 --> 00:47:11.320
individually without a whole lot
of dependencies on one another.

00:47:11.380 --> 00:47:14.860
And to do this,
we nested navigation controllers

00:47:15.270 --> 00:47:17.920
inside our TabR controller.

00:47:19.060 --> 00:47:23.010
That just about wraps up the main
points that we wanted to cover today.

00:47:23.280 --> 00:47:26.410
So to make a great iPhone application,
it's essential to respond

00:47:26.410 --> 00:47:27.360
to memory warnings.

00:47:27.360 --> 00:47:32.050
This really helps you to have a
smooth user experience that doesn't

00:47:32.050 --> 00:47:34.960
unexpectedly quit on your user.

00:47:34.980 --> 00:47:36.660
Also,
the navigation bar is a great place to

00:47:36.800 --> 00:47:38.630
put buttons and other types of controls.

00:47:38.650 --> 00:47:41.990
It's one of the first places your users
will look for these types of things when

00:47:42.310 --> 00:47:44.600
they navigate to your view controller.

00:47:44.670 --> 00:47:48.220
One of the things you may
commonly do here is add new

00:47:48.220 --> 00:47:52.300
data and pick from existing data
by presenting content modally.

00:47:52.350 --> 00:47:56.020
Whenever you present content modally,
you want to give your

00:47:56.140 --> 00:47:57.570
user a way to back out.

00:47:57.570 --> 00:48:01.260
So a cancel button to go with
your save button is very common.

00:48:02.500 --> 00:49:16.500
[Transcript missing]

00:49:17.080 --> 00:49:20.300
If you have questions about
view controllers after WWDC,

00:49:20.330 --> 00:49:22.830
I'd encourage you to get
in touch with Derek Horn.

00:49:23.060 --> 00:49:25.570
He's our application
technologies evangelist,

00:49:25.570 --> 00:49:28.900
and he can help you out with questions,
or he's a great person to submit

00:49:28.900 --> 00:49:33.280
feedback to if you have requests
for the view controller classes.

00:49:33.390 --> 00:49:35.660
And the view controller
docs are really great.

00:49:35.710 --> 00:49:38.390
They're very thorough,
and they cover a lot of the same

00:49:38.390 --> 00:49:41.460
ground that we've been going
over in these sessions here.