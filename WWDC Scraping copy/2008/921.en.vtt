WEBVTT

00:00:26.420 --> 00:00:27.300
Good afternoon, everybody.

00:00:27.300 --> 00:00:30.640
I'm Mike Ferris,
and I'm really pleased to be here today.

00:00:30.640 --> 00:00:35.240
I hope that a lot of you saw the
demo of Dashcode that was in the

00:00:35.240 --> 00:00:38.560
Developer Technologies State of
the Union on Monday.

00:00:38.560 --> 00:00:43.040
And for those of you who did,
I just wanted to say that, Dave,

00:00:43.060 --> 00:00:47.420
you know, if you're out there,
I have faith that this is where you

00:00:47.420 --> 00:00:49.760
would have chosen to go this afternoon.

00:00:52.000 --> 00:00:56.180
Now, we introduced Dashcode in
the Leopard release of the

00:00:56.180 --> 00:01:00.770
developer tools a while back,
and it was a brand-new

00:01:00.850 --> 00:01:05.210
IDE for developing widgets,
dashboard widgets.

00:01:07.660 --> 00:01:10.500
Now, we actually, we love widgets.

00:01:10.590 --> 00:01:17.350
And in fact,
there's a session on Friday where

00:01:17.350 --> 00:01:19.750
we're going to talk about all of
the stuff that we've been doing for

00:01:19.750 --> 00:01:19.750
widget developers and about how to
use Dashcode to develop widgets.

00:01:20.370 --> 00:01:23.600
But today, I'd like to focus on the
new version of Dashcode,

00:01:23.600 --> 00:01:29.000
Dashcode 2.0,
which is shipping with the iPhone SDK.

00:01:29.550 --> 00:01:32.470
In this version,
we've actually taken advantage of

00:01:32.470 --> 00:01:36.880
the web technology foundation that
Dashcode is built upon to add support

00:01:36.950 --> 00:01:38.720
for developing iPhone web applications.

00:01:38.720 --> 00:01:41.610
That's what I want to talk
to you about here today.

00:01:43.870 --> 00:01:46.800
We actually have a full session today.

00:01:46.830 --> 00:01:50.780
We're going to talk-- I'll give
you a brief tour of Dashcode first.

00:01:50.890 --> 00:01:53.420
And then we're going to spend
the rest of the session building

00:01:53.420 --> 00:01:56.000
a complete web application.

00:01:56.120 --> 00:02:00.630
We'll show you how to design the
interface and structure your application.

00:02:01.000 --> 00:02:03.510
We'll show you how to interact
with a web server to fetch

00:02:03.510 --> 00:02:05.660
your application's content.

00:02:05.720 --> 00:02:08.560
And then finally,
we'll apply some finishing touches

00:02:08.560 --> 00:02:13.440
and polish before deploying the
application for everyone to use.

00:02:14.860 --> 00:02:19.570
The application that we're going
to build today is Sugarwater.

00:02:19.950 --> 00:02:23.960
Imagine that you're at a party with
a whole bunch of thirsty people,

00:02:23.960 --> 00:02:26.760
and somebody asks you to play bartender.

00:02:27.170 --> 00:02:29.550
Well, Sugarwater can help you.

00:02:29.850 --> 00:02:31.860
Tell it what ingredients
you have available.

00:02:31.910 --> 00:02:36.000
It will suggest drinks that you
can make and give you the recipes.

00:02:36.080 --> 00:02:37.780
We're going to build this
application here today.

00:02:37.780 --> 00:02:40.990
But before we do that,
let me go to the demo machine

00:02:41.150 --> 00:02:44.250
and actually give you a
brief tour of Dashcode.

00:02:44.260 --> 00:02:47.370
Can I have the demo, please?

00:02:47.410 --> 00:02:48.020
Thank you.

00:02:50.930 --> 00:02:56.130
So when you first launch Dashcode,
you'll see the Template Chooser panel.

00:02:56.140 --> 00:02:58.980
This is where you can choose from
a number of different starting

00:02:58.980 --> 00:03:00.920
points to make your application.

00:03:00.920 --> 00:03:03.380
And as you can see,
all the widget templates are still here.

00:03:03.380 --> 00:03:06.990
But now there's a new category of
templates for web applications.

00:03:07.000 --> 00:03:13.980
The Custom Template gives you
a blank slate to start from

00:03:13.980 --> 00:03:15.430
to build your application.

00:03:16.460 --> 00:03:20.430
The last two give you nearly complete web
applications where all you really have

00:03:20.530 --> 00:03:23.140
to do is supply an RSS or a podcast URL.

00:03:23.160 --> 00:03:27.220
The browser we'll actually
use for our application later.

00:03:27.220 --> 00:03:29.800
So for now,
let's start with the Utility Template.

00:03:32.750 --> 00:03:35.170
The focus in Dashcode is on the canvas.

00:03:35.420 --> 00:03:37.330
This is this large area
in the center where your

00:03:37.330 --> 00:03:39.890
application's interface is shown.

00:03:40.690 --> 00:03:43.640
To the left is the Navigator.

00:03:43.670 --> 00:03:48.590
This is where you can see the
DOM structure of your HTML.

00:03:49.700 --> 00:03:53.060
Below the Navigator,
each template comes with a set of

00:03:53.080 --> 00:03:56.420
steps to help guide you through the
things that you'll need to do in

00:03:56.420 --> 00:03:57.800
order to complete the application.

00:03:57.800 --> 00:04:01.060
And in that same area,
you can display all the files

00:04:01.060 --> 00:04:03.130
that are part of your project.

00:04:04.790 --> 00:04:07.840
When you're ready to start
editing your JavaScript,

00:04:07.910 --> 00:04:13.100
Dashcode's integrated code editor
appears beneath the canvas.

00:04:13.120 --> 00:04:16.280
Dashcode also has an inspector panel.

00:04:18.700 --> 00:04:22.670
Where you can view and edit
properties associated with the current

00:04:22.690 --> 00:04:25.380
selected elements in the canvas.

00:04:25.810 --> 00:04:29.000
and a library where you can
find parts and code snippets

00:04:29.010 --> 00:04:31.490
to add to your application.

00:04:32.640 --> 00:04:35.400
Let's see what happens when
we run our application.

00:04:35.480 --> 00:04:39.450
When you run, Dashcode launches your web
app in the iPhone simulator so

00:04:39.450 --> 00:04:42.960
that you can see exactly what
it'll look like on the phone.

00:04:43.390 --> 00:04:47.240
Back in Dashcode,
the canvas has been replaced by a

00:04:47.240 --> 00:04:50.780
run log where you can see any console
output that your application generates

00:04:50.780 --> 00:04:56.220
for debugging purposes and where
any errors are reported as well.

00:04:57.130 --> 00:05:02.100
Now, if we stop,
if we pause the application,

00:05:02.120 --> 00:05:04.530
then we start to get debugger controls.

00:05:04.540 --> 00:05:08.630
As you can see, the stack backtrace,
along with all the local

00:05:08.630 --> 00:05:12.080
variables for where we've stopped,
is displayed in the upper area.

00:05:12.080 --> 00:05:15.740
And down below in the code view,
Dashcode highlights the line of code

00:05:15.740 --> 00:05:17.910
where you're currently executing.

00:05:19.890 --> 00:05:23.360
So we're going to see a lot more
of all of these things later on.

00:05:23.360 --> 00:05:26.090
But for now, let's go back to the slides.

00:05:33.240 --> 00:05:37.680
So we've just seen basically all the
components of Dashcode's workflow.

00:05:37.730 --> 00:05:41.340
The main point to take away from
this is that Dashcode is centered

00:05:41.340 --> 00:05:43.150
around visual interface design.

00:05:43.250 --> 00:05:45.840
The canvas is the
centerpiece of the window,

00:05:45.890 --> 00:05:49.610
and you do all of your
interface design in that area.

00:05:52.280 --> 00:05:55.520
You add user interface elements
to your application by dragging

00:05:55.520 --> 00:05:57.350
parts out of the library.

00:05:57.430 --> 00:06:00.960
Parts are basically
prepackaged interface elements.

00:06:02.010 --> 00:06:04.760
Once they're in there,
you modify them through direct

00:06:04.760 --> 00:06:08.780
manipulation on the canvas
or through the inspectors.

00:06:09.600 --> 00:06:11.120
And then finally,
when you're ready to start adding

00:06:11.120 --> 00:06:15.700
behavior to your application,
you use the integrated code editor.

00:06:17.300 --> 00:06:20.650
Now, there's a lot of different ways
to write a web application.

00:06:20.650 --> 00:06:25.290
Dashcode uses a pattern that's
been gaining popularity in

00:06:25.290 --> 00:06:27.630
recent years called Ajax.

00:06:28.560 --> 00:06:33.130
Ajax applications have a couple
of distinguishing characteristics.

00:06:33.410 --> 00:06:36.700
They tend to fetch their
content asynchronously,

00:06:36.760 --> 00:06:41.870
and they manage their interfaces
by modifying the DOM directly.

00:06:42.880 --> 00:06:47.880
As a result,
Ajax applications feel more responsive.

00:06:47.920 --> 00:06:51.440
And they can be more immediate
because they don't rely on page

00:06:51.440 --> 00:06:54.310
loading to refresh their interfaces.

00:06:54.770 --> 00:06:58.840
They can also take advantage of advanced
CSS and JavaScript functionality,

00:06:58.840 --> 00:07:01.330
like the CSS visual effects
that have been described in

00:07:01.330 --> 00:07:02.980
other sessions during the week.

00:07:05.700 --> 00:07:07.980
All right, now that we have an
understanding of the basics,

00:07:07.980 --> 00:07:10.200
let's actually get started
building our application.

00:07:10.200 --> 00:07:12.840
And to do that,
to show us how to design the interface

00:07:12.840 --> 00:07:16.260
and how to structure the application,
I'd like to ask Daniel Gobera

00:07:16.260 --> 00:07:17.810
to come up and give us a hand.

00:07:23.620 --> 00:07:24.690
Thank you, Mike.

00:07:24.690 --> 00:07:25.810
Good afternoon.

00:07:25.840 --> 00:07:28.960
My name is Daniel Gobera,
and I'm a software engineer

00:07:28.960 --> 00:07:30.400
in the Dashcode team.

00:07:30.400 --> 00:07:34.850
And what I want to show you today is
how Dashcode can help you get amazing

00:07:34.860 --> 00:07:39.710
results in a very short time when
designing your iPhone web application.

00:07:39.800 --> 00:07:43.980
We'll take a look at the visual
tools for designing the application

00:07:43.980 --> 00:07:45.810
and at the library of parts.

00:07:45.890 --> 00:07:48.710
So let's start by looking at
the recommended architecture

00:07:48.790 --> 00:07:49.850
for applications.

00:07:51.230 --> 00:07:54.640
Mike mentioned that iPhone web
applications tend to use AJAX to get

00:07:54.660 --> 00:08:00.760
the data from the server asynchronously,
typically in XML or JSON format.

00:08:00.820 --> 00:08:04.920
Well, on the client side,
the application is going to be structured

00:08:04.920 --> 00:08:08.120
using the model view controller pattern.

00:08:08.190 --> 00:08:12.190
Now, the model layer is the one that
is responsible for managing all

00:08:12.190 --> 00:08:15.440
the data on the application,
including the one that

00:08:15.440 --> 00:08:16.810
came from the server.

00:08:17.600 --> 00:08:24.920
The View layer is going to present the
interface to the user using HTML and CSS.

00:08:25.060 --> 00:08:28.140
The Controller layer is the
JavaScript code that ties

00:08:28.140 --> 00:08:30.170
the other two together.

00:08:30.410 --> 00:08:35.130
One of the biggest benefits of
this structure is that the code

00:08:35.160 --> 00:08:37.700
is going to be highly reusable.

00:08:37.810 --> 00:08:39.790
So, for example,
you can use the same model

00:08:39.790 --> 00:08:43.690
objects in another application or
simply replace the view layer to

00:08:43.720 --> 00:08:46.170
get a different user interface.

00:08:46.350 --> 00:08:50.000
Well, regardless of the architecture
you choose for your application,

00:08:50.000 --> 00:08:53.460
I would really like to
encourage you to do one thing.

00:08:54.100 --> 00:08:56.880
and that is design before you build.

00:08:56.910 --> 00:09:02.270
Really, you will get dramatically better
results if you just take some time

00:09:02.360 --> 00:09:09.980
before you start actually building
the application to get a clear

00:09:10.120 --> 00:09:10.120
idea of what you want it to be.

00:09:10.530 --> 00:09:12.100
For example,
for the Sugarwater application

00:09:12.100 --> 00:09:16.000
we're going to be building today,
it will be an application

00:09:16.000 --> 00:09:19.200
for thirsty people to find
recipes of mixed-use drinks.

00:09:19.200 --> 00:09:23.820
This is just one sentence that describes
what the application is going to be.

00:09:23.840 --> 00:09:27.120
And notice we're identifying
our target audience.

00:09:27.200 --> 00:09:33.020
So if you ever met a thirsty person,
you know that they can be dangerous.

00:09:33.020 --> 00:09:35.940
And probably not as bad as hungry people.

00:09:36.660 --> 00:09:41.300
But we better provide a very simple
search and provide results really quickly

00:09:41.300 --> 00:09:43.120
because they want their drink right now.

00:09:43.140 --> 00:09:46.200
So all our design is
going to be based on that.

00:09:46.300 --> 00:09:50.000
And the image you see here is not
just a decoration for the slide.

00:09:50.020 --> 00:09:51.920
Well, probably the coffee stains.

00:09:51.970 --> 00:09:56.760
But this is actually the sketches we
made for when we were designing the

00:09:56.960 --> 00:09:59.630
demo we're going to be building today.

00:09:59.780 --> 00:10:03.050
So you can get a clear idea of how
the user is going to navigate between

00:10:03.180 --> 00:10:05.860
the multiple views and how the
application is going to be structured.

00:10:07.960 --> 00:10:11.660
Once you have the clear
idea of what you want,

00:10:11.710 --> 00:10:16.550
it's time to launch Dashcode and start
using the library of parts as the

00:10:16.550 --> 00:10:18.970
building blocks for the application.

00:10:19.730 --> 00:10:26.060
Mike mentioned some slides ago that
parts are prepackaged interface elements.

00:10:26.230 --> 00:10:28.170
There's something I want
to highlight here,

00:10:28.220 --> 00:10:28.960
prepackaged.

00:10:28.960 --> 00:10:33.370
This means that we have done all
the work to write all the HTML,

00:10:33.370 --> 00:10:38.480
CSS, and JavaScript code to make
these parts work correctly.

00:10:38.480 --> 00:10:40.450
So you don't have to do any of that.

00:10:40.590 --> 00:10:43.070
You can simply drag them from the
library into your application,

00:10:43.070 --> 00:10:43.930
and they'll work.

00:10:43.940 --> 00:10:47.160
If you ever used Dashcode before,
you may be familiar with

00:10:47.160 --> 00:10:48.440
some of these parts.

00:10:48.840 --> 00:10:52.320
We have the buttons, shapes, controls,
and fields.

00:10:52.400 --> 00:10:56.500
In Dashcode 2.0,
we added some new shiny parts to

00:10:56.530 --> 00:10:59.290
support web application development.

00:10:59.300 --> 00:11:02.490
We have, for example, the list,
which is a very common way to

00:11:02.490 --> 00:11:04.590
display information on the iPhone.

00:11:04.600 --> 00:11:08.980
We have the browser,
which helps the user navigate to deeper

00:11:09.060 --> 00:11:13.220
and deeper levels of detail and then
navigate back using the back button.

00:11:13.220 --> 00:11:15.620
Finally, we have the stack layout.

00:11:15.650 --> 00:11:16.780
This one's interesting.

00:11:16.780 --> 00:11:22.950
It manages a set of swappable views where
only one of them is visible at a time,

00:11:23.480 --> 00:11:25.870
and you can specify an animated
transition between them.

00:11:25.880 --> 00:11:28.570
For example,
the browser is going to use the stack

00:11:28.570 --> 00:11:32.320
layout to manage the multiple views,
and it uses a push transition

00:11:32.320 --> 00:11:33.910
to go from one to the next.

00:11:33.920 --> 00:11:38.960
Let's look at the list and the
browser in some more detail.

00:11:40.080 --> 00:11:42.150
When you use a list,
you're going to interact with

00:11:42.340 --> 00:11:44.660
the first row in the canvas.

00:11:44.790 --> 00:11:48.480
This is going to act as a template
that will be cloned for every

00:11:48.480 --> 00:11:50.580
row of data you want to display.

00:11:50.750 --> 00:11:53.730
This means that whatever you
put on that row is going to

00:11:53.730 --> 00:11:55.450
be replicated in the rest.

00:11:55.580 --> 00:12:00.620
The way you put data into the list
is by using the JavaScript API.

00:12:00.790 --> 00:12:03.570
If you've ever done anything in Cocoa,
you may be familiar with

00:12:03.600 --> 00:12:05.020
the data source pattern.

00:12:05.180 --> 00:12:06.130
This is actually very simple.

00:12:06.160 --> 00:12:11.010
It's just a JavaScript object that you
implement that responds to two methods.

00:12:11.010 --> 00:12:13.020
Number of rows and prepare row.

00:12:13.030 --> 00:12:16.470
Number of rows is going to
return the number of rows

00:12:16.470 --> 00:12:18.480
you want your list to have.

00:12:18.520 --> 00:12:20.700
So, for example, here we'll return four.

00:12:21.740 --> 00:12:24.970
Prepare row is going to be
called four times so it has a

00:12:24.970 --> 00:12:28.680
chance to customize each of these
rows and fill it in with data.

00:12:28.700 --> 00:12:32.290
It receives three parameters that
I'll explain later in the demo.

00:12:32.290 --> 00:12:35.490
Let's look at the browser.

00:12:36.330 --> 00:12:39.990
This one's going to help
you show information in a

00:12:39.990 --> 00:12:45.280
hierarchical fashion so the user
can navigate to different levels.

00:12:45.660 --> 00:12:50.710
And believe me, you don't want to write
one of these from scratch.

00:12:51.010 --> 00:12:51.900
Let me repeat that.

00:12:51.900 --> 00:12:55.460
You don't want to write
one of these from scratch.

00:12:55.520 --> 00:12:58.370
Really, just to get it to work in
Keynote took me like an hour.

00:12:58.480 --> 00:13:01.460
So to write it in JavaScript and
CSS can be painful.

00:13:01.460 --> 00:13:05.140
So we provide it as a packaged part,
so you can just drag it

00:13:05.140 --> 00:13:06.700
from the library and use it.

00:13:06.770 --> 00:13:11.780
It has a very simple JavaScript API used
called the go-forward method.

00:13:11.870 --> 00:13:15.310
To make it navigate to the next view,
you tell it to which view,

00:13:15.320 --> 00:13:19.370
and you tell it what is going to
be the title in the other view.

00:13:20.480 --> 00:13:23.820
So why don't we put all of these
parts together and start building

00:13:23.970 --> 00:13:25.960
the Sugarwire application?

00:13:33.630 --> 00:13:37.410
This application has two views,
one with a list of drinks and one with

00:13:37.430 --> 00:13:40.080
the detail of the drink the user selects.

00:13:40.240 --> 00:13:45.370
So probably the browser is going to
be the best starting point for this.

00:13:49.490 --> 00:13:53.200
This template already has a browser part,
and as we saw before,

00:13:53.200 --> 00:13:55.380
the browser uses Stack Layout.

00:13:55.490 --> 00:13:57.690
The Stack Layout has
two views in this case.

00:13:57.730 --> 00:13:59.640
It can have as many as you want.

00:13:59.730 --> 00:14:04.010
It has one for the list level and
one for the detail level to display

00:14:04.110 --> 00:14:06.610
the detail of the item selected.

00:14:07.200 --> 00:14:10.490
This is good because I do want a list,
but I don't want this kind of list.

00:14:10.540 --> 00:14:14.640
So I'm going to remove it,
and from the library of parts,

00:14:14.690 --> 00:14:18.700
I'm going to drag the other kind of list,
which is the rounded rectangle.

00:14:18.740 --> 00:14:22.760
Now, it doesn't look very good on white,
so I'm going to remove the

00:14:22.760 --> 00:14:25.530
background in the graphics vector.

00:14:25.790 --> 00:14:29.190
And those stripes,
we have seen them over and over,

00:14:29.190 --> 00:14:31.950
so they're a bit boring for sugar water.

00:14:32.220 --> 00:14:35.290
Let's just change that background.

00:14:35.820 --> 00:14:39.700
and Mike Krahl.

00:14:39.700 --> 00:14:43.000
The header doesn't match.

00:14:43.000 --> 00:14:44.120
Let me change the colors for that.

00:14:44.200 --> 00:14:48.700
While I'm doing this,
Dashcode is generating all the images to

00:14:48.700 --> 00:14:53.900
get the glass and gradient effects and
just putting them in the right place.

00:14:54.020 --> 00:14:59.200
So you never have to go to an image
editor and bring the images back.

00:14:59.250 --> 00:15:01.810
Let's just change the title.

00:15:04.780 --> 00:15:05.700
Okay.

00:15:05.810 --> 00:15:07.640
Now it's time to customize the list.

00:15:07.820 --> 00:15:11.980
In every row,
I want to display the name of the drink,

00:15:11.980 --> 00:15:16.300
a description, an image,
and the rating to show how good it is.

00:15:16.420 --> 00:15:20.950
So I'm going to make it a bit larger
so I have some space for that.

00:15:21.360 --> 00:15:23.760
Notice that when I modify
the template row,

00:15:24.030 --> 00:15:26.630
everything else is affected.

00:15:27.520 --> 00:15:31.120
This is going to affect how every
row is going to be displayed.

00:15:31.140 --> 00:15:35.230
I'm going to have an image here
that will be just a placeholder

00:15:35.230 --> 00:15:37.420
to help me with layout.

00:15:37.420 --> 00:15:45.540
And to show the summary,
I'm going to have another text part,

00:15:45.540 --> 00:15:45.540
which I'm going to drag from the library,
put it right here.

00:15:45.820 --> 00:15:49.040
Make it probably as
wide as the other one.

00:15:49.040 --> 00:15:54.420
And let's make the font smaller here,
maybe gray.

00:15:54.420 --> 00:15:57.290
Now, to display the rating,
I could use some images,

00:15:57.310 --> 00:16:00.640
but Dashcode provides another part,
horizontal level,

00:16:00.640 --> 00:16:03.800
which is going to be very
useful for this purpose.

00:16:03.800 --> 00:16:09.380
If you don't like the gray bars,
it's showing by default.

00:16:09.400 --> 00:16:12.190
That's not a problem because this
part is totally customizable.

00:16:12.210 --> 00:16:14.900
So you can change the images.

00:16:15.050 --> 00:16:18.880
Let's just change it for an empty star.

00:16:19.590 --> 00:16:22.700
and a yellow star for the on state.

00:16:22.770 --> 00:16:28.770
Now, I want five stars here,
so I'm going to make this a bit wider.

00:16:29.800 --> 00:16:34.360
And I'm going to tell it
to use a range from 0 to 5.

00:16:34.400 --> 00:16:39.550
And the initial value is going to be 3,
so I can see how it's going to look like.

00:16:39.800 --> 00:16:43.150
Now, the important thing to know here
is that while I'm doing all this,

00:16:43.350 --> 00:16:49.190
Dashcode is generating all the
HTML and CSS code to get this effect.

00:16:49.300 --> 00:16:51.620
So, just to show you here.

00:16:53.640 --> 00:16:57.730
I'm going to open the CSS file
and navigate to the rule

00:16:58.230 --> 00:17:00.380
that applies to the arrow.

00:17:01.010 --> 00:17:04.710
And you can see that
while I drag it around,

00:17:04.710 --> 00:17:07.970
it is regenerating this CSS file.

00:17:08.220 --> 00:17:09.600
And just look at that.

00:17:09.600 --> 00:17:11.150
I mean, it's gorgeous CSS.

00:17:11.180 --> 00:17:14.340
It's completely readable,
and it's very well-structured.

00:17:14.340 --> 00:17:17.860
So if you want, if you need to,
you can go here and change it by hand.

00:17:17.880 --> 00:17:20.010
Most of the time, you won't need to.

00:17:20.010 --> 00:17:21.380
So let's just hide it.

00:17:21.440 --> 00:17:25.500
Now, to be able to filter this list,
I'm going to have a set of buttons.

00:17:25.560 --> 00:17:29.800
Each button is going to represent one
ingredient the user can turn on and off.

00:17:31.430 --> 00:17:34.310
For that,
I'm going to have a rounded box,

00:17:34.350 --> 00:17:36.130
which is going to be the
container for the buttons.

00:17:36.130 --> 00:17:43.770
Let's make it a bit taller and
maybe give it some transparency.

00:17:44.100 --> 00:17:45.490
Oh, sorry, something I forgot.

00:17:45.500 --> 00:17:48.720
We need to be able to find
these elements during runtime.

00:17:48.760 --> 00:17:51.400
So I'm going to give them better names.

00:17:51.400 --> 00:17:58.200
This is going to be the drink name,
the drink image.

00:17:59.530 --> 00:18:04.680
The drink summary and the drink rating.

00:18:07.070 --> 00:18:09.640
Now, since I want a button
for each ingredient,

00:18:09.640 --> 00:18:13.480
I'm going to drag the bottom
part from the library,

00:18:13.670 --> 00:18:15.700
put it right here.

00:18:16.150 --> 00:18:23.610
And I'm going to resize
that to be maybe 45 by 50.

00:18:24.050 --> 00:18:26.540
I don't want a label in this button,
so I'm going to remove it.

00:18:26.610 --> 00:18:29.040
I instead want an image for each.

00:18:29.100 --> 00:18:32.680
So I can go to the Attributes
Inspector and drag.

00:18:32.690 --> 00:18:36.380
This is going to be my pineapple button.

00:18:36.400 --> 00:18:40.240
Now, Dashcode already generates a
pressed version of the image,

00:18:40.240 --> 00:18:42.380
which is slightly darker.

00:18:42.410 --> 00:18:45.590
I want to use my own,
so I'm going to use the one

00:18:45.950 --> 00:18:47.740
with the nice purple glow.

00:18:48.190 --> 00:18:50.860
Okay, so once I have that, well,
it doesn't look very good

00:18:50.860 --> 00:18:51.500
with that background.

00:18:51.500 --> 00:18:54.960
So let's remove the fill and the stroke.

00:18:58.850 --> 00:19:01.690
I want to have six of these buttons,
one for each ingredient.

00:19:01.850 --> 00:19:06.520
So I can just press
Command-D to duplicate.

00:19:06.540 --> 00:19:10.620
And Dashcode's going to show some
guidelines to help me align them.

00:19:10.630 --> 00:19:13.880
And if I press Command-D again,
it's going to remember what I did

00:19:13.980 --> 00:19:19.640
to the previous one and keep
doing it until I have six I want.

00:19:19.650 --> 00:19:25.480
And just let's give them a name so I can
know which ingredient they represent.

00:19:26.570 --> 00:19:28.600
It's going to be the pineapple,
and you probably don't want

00:19:28.600 --> 00:19:30.980
to see me change all of them.

00:19:31.040 --> 00:19:38.210
So as in any other good cooking show,
we have something ready out of the oven.

00:19:39.150 --> 00:19:45.190
We simply changed the images for
all the buttons and assigned IDs for

00:19:45.190 --> 00:19:47.480
the names of the ingredients.

00:19:47.510 --> 00:19:49.270
OK, so we are done with the layout.

00:19:49.450 --> 00:19:52.410
It's time to make this actually work.

00:19:53.130 --> 00:19:55.910
This list is a static list.

00:19:56.160 --> 00:19:59.860
That means that here in the inspector,
we say what data is

00:20:00.160 --> 00:20:02.400
going to be in each row.

00:20:02.440 --> 00:20:05.980
Let's make it dynamic so we
can change it during runtime.

00:20:06.010 --> 00:20:09.120
As we saw, the list uses a data source.

00:20:09.150 --> 00:20:10.850
In this case,
I'm going to use ListController.

00:20:10.950 --> 00:20:15.360
This is a JavaScript object
that came with a template,

00:20:15.400 --> 00:20:20.290
and it implements the two methods we saw,
number of rows and prepareRow.

00:20:20.350 --> 00:20:25.040
I want my list controller to also keep
track of the drinks being shown and

00:20:25.040 --> 00:20:28.560
the ingredients used for filtering.

00:20:28.590 --> 00:20:32.450
So what I'll do,
I just add a bit of code here.

00:20:33.550 --> 00:20:35.300
and the rest of the team.

00:20:35.440 --> 00:20:37.400
To add a drinks and
ingredients properties,

00:20:37.400 --> 00:20:37.400
they're just simple arrays.

00:20:37.400 --> 00:20:39.380
They're initially empty.

00:20:39.520 --> 00:20:43.330
The set drinks method is going
to reload the data on the list.

00:20:43.400 --> 00:20:48.510
Now, in Dashcode, when you want to call a
JavaScript API of a part,

00:20:48.510 --> 00:20:52.400
you get a reference to the main
element using getElementById,

00:20:52.460 --> 00:20:56.400
in this case, the list,
which is this element right here.

00:20:56.400 --> 00:21:00.400
And you use the dot object property
to get access to all the methods.

00:21:00.550 --> 00:21:03.400
So in this case,
we're calling reload data.

00:21:03.400 --> 00:21:06.110
To fetch drinks later on,
we're going to retrieve the

00:21:06.110 --> 00:21:07.400
real data from the server.

00:21:07.580 --> 00:21:13.330
For now, just to get us up and running,
we're going to use some sample data.

00:21:13.650 --> 00:21:15.810
which I'm going to drag right here.

00:21:15.880 --> 00:21:22.550
It's just a JavaScript array where each
object represents the data of one drink.

00:21:24.700 --> 00:21:28.300
Now it's time to implement
number of rows and prepare row.

00:21:28.450 --> 00:21:30.930
Here I want to return...

00:21:31.570 --> 00:21:37.190
The number of elements
in the drinks array.

00:21:39.150 --> 00:21:40.180
So I can do that.

00:21:40.180 --> 00:21:45.720
And if there's nothing in that array,
I still want one row so I can display

00:21:45.720 --> 00:21:48.950
a message that says no results,
right?

00:21:49.200 --> 00:21:53.880
Now in prepare row,
we're going to customize

00:21:53.880 --> 00:21:55.160
each of these rows.

00:21:56.180 --> 00:21:59.800
So I'm going to remove the implementation
that came with the template and

00:22:00.420 --> 00:22:04.090
add the one I wrote a bit earlier.

00:22:05.840 --> 00:22:07.120
It's actually very simple.

00:22:07.160 --> 00:22:09.260
Remember it receives three parameters?

00:22:09.300 --> 00:22:14.340
Row element is the actual DOM element
for the row we are preparing.

00:22:14.380 --> 00:22:19.170
Row index is the number of the
row we are currently processing.

00:22:19.590 --> 00:22:21.940
and Template Elements,
this one's interesting.

00:22:21.970 --> 00:22:24.240
Remember,
all of these elements have an ID,

00:22:24.300 --> 00:22:26.070
but they're going to be cloned.

00:22:26.080 --> 00:22:30.180
Well, in the DOM,
duplicate IDs are not allowed.

00:22:30.220 --> 00:22:32.790
So when they're duplicated,
we need to remove the IDs.

00:22:32.860 --> 00:22:35.250
How are we going to find these elements?

00:22:35.260 --> 00:22:39.660
Well,
Template Elements contains a reference

00:22:39.660 --> 00:22:41.730
to all the elements in the current row.

00:22:41.740 --> 00:22:43.810
So let's see an example.

00:22:43.860 --> 00:22:48.280
Here, I'm getting the current drink to
display from the drinks array.

00:22:49.880 --> 00:22:52.960
And through template elements,
I am getting the drink name.

00:22:53.170 --> 00:22:57.540
This is the same ID that
the original element had.

00:22:57.560 --> 00:23:02.470
And I'm sending the inner
text to the name of the drink.

00:23:02.960 --> 00:23:07.940
Then I'm doing the same with the
source of the image to the summary,

00:23:07.970 --> 00:23:12.200
to the text of the summary,
and setting the value on the rating.

00:23:12.240 --> 00:23:15.470
Notice that, again,
we're using the dot object property

00:23:15.610 --> 00:23:17.930
to access the JavaScript API.

00:23:18.360 --> 00:23:22.700
Finally, I want to add a click handler to
the row so when the user selects it,

00:23:22.740 --> 00:23:24.570
we can do something.

00:23:25.200 --> 00:23:30.120
Here we are notifying the detail
controller to fetch this drink.

00:23:30.400 --> 00:23:32.770
I'll explain this later.

00:23:33.070 --> 00:23:35.860
We're getting a reference to the browser.

00:23:35.910 --> 00:23:38.100
And again,
through the dot object property,

00:23:38.120 --> 00:23:40.020
I'm calling the go forward method.

00:23:40.070 --> 00:23:43.720
I wanted to navigate to the other view,
which is detail level.

00:23:44.220 --> 00:23:46.560
It is this one.

00:23:47.780 --> 00:23:52.840
And I want to set the title to
recipe when we navigate to that view.

00:23:52.910 --> 00:23:57.400
If there are no results,
I am setting the drink name to be no

00:23:57.400 --> 00:24:03.120
drinks and hiding all other elements.

00:24:04.550 --> 00:24:05.500
One more thing we have to do.

00:24:05.500 --> 00:24:11.170
The detail controller is the
controller element for this view.

00:24:11.500 --> 00:24:14.670
It's going to control
everything that happens here.

00:24:14.810 --> 00:24:19.400
So let's remove the implementation
that came with the template.

00:24:19.440 --> 00:24:21.430
And I'm going to have
a really simple one.

00:24:21.580 --> 00:24:24.640
For now,
I just have a fetch drink method.

00:24:24.700 --> 00:24:28.100
It gets a reference to
detail title element,

00:24:28.150 --> 00:24:29.720
which is this one.

00:24:29.770 --> 00:24:34.250
And it just sets the inner
text to the name of the drink.

00:24:35.580 --> 00:24:39.800
And to get things up and running,
when the application loads,

00:24:39.870 --> 00:24:41.500
it's going to call the load method.

00:24:41.550 --> 00:24:49.830
In here, I'm going to call this
controller .fetchDrinks.

00:24:50.790 --> 00:24:53.940
So you can see something with
the application launches.

00:24:54.080 --> 00:24:58.370
So I think we're ready to run it
and see if things are working.

00:25:02.410 --> 00:25:06.160
So it launches in the simulator,
and we can see that the list is

00:25:06.160 --> 00:25:11.510
being filled with the data from
the sample data array we had.

00:25:12.120 --> 00:25:16.990
and when I click on one of them,
the browser navigates to the next view

00:25:17.160 --> 00:25:19.840
and shows the detail for this drink.

00:25:20.190 --> 00:25:23.200
Well, for now, it's just the title,
but we'll change that later.

00:25:23.250 --> 00:25:26.880
It also keeps track of the current title,
the Back button,

00:25:27.190 --> 00:25:29.600
and it knows how to navigate back.

00:25:29.670 --> 00:25:35.740
Notice I never had to call another method
to go back or to tell it how to go back.

00:25:36.270 --> 00:25:41.440
Now, these buttons are still not working,
so let's do something about that.

00:25:44.160 --> 00:25:49.500
I go back to the list level and
I can just select all of them.

00:25:49.540 --> 00:25:54.670
And over here in the behavior inspector,
I can assign a JavaScript function

00:25:54.670 --> 00:25:56.770
handler for any of these events.

00:25:56.940 --> 00:26:02.910
So when the user clicks,
I want to call ingredient clicked.

00:26:03.540 --> 00:26:09.160
If the function does not exist,
Dashcode is going to generate it for us,

00:26:09.760 --> 00:26:11.690
and we can simply fill in the contents.

00:26:12.210 --> 00:26:15.460
So I'm going to have a simple
implementation for that.

00:26:15.560 --> 00:26:18.970
This just gets an element-- sorry,
gets a reference to the

00:26:19.180 --> 00:26:20.790
button that was clicked.

00:26:20.890 --> 00:26:26.180
And from the ID,
I will know the name of the ingredient.

00:26:26.200 --> 00:26:29.340
I'm going to notify the list
controller and tell it to toggle

00:26:29.810 --> 00:26:32.480
that ingredient for filtering.

00:26:32.500 --> 00:26:36.730
And based on the result of that,
I'm going to set--

00:26:37.270 --> 00:26:42.760
Set the state of the button to be
on or off so it remains highlighted.

00:26:43.160 --> 00:26:47.540
So I only need to implement this
method in the list controller.

00:26:47.650 --> 00:26:52.020
So I'll just scroll back up and...

00:26:52.880 --> 00:26:58.290
This is just a very simple method that
keeps track of the ingredients array,

00:26:58.290 --> 00:27:02.330
adds and removes ingredients,
and logs in the console.

00:27:02.430 --> 00:27:04.670
Which ingredients we're
using for filtering.

00:27:04.850 --> 00:27:07.800
For now, it's not going to
actually do the filtering.

00:27:07.870 --> 00:27:09.570
It's just going to log in
the console what's happening.

00:27:09.580 --> 00:27:11.190
I think we can run it again.

00:27:11.190 --> 00:27:14.460
It's really important to run
the application very often,

00:27:14.460 --> 00:27:19.900
as often as you make changes to
check that everything is working.

00:27:20.320 --> 00:27:24.260
So if I test these buttons,
I can see that they

00:27:24.260 --> 00:27:29.810
remain in the on state,
and the console is logging the current

00:27:29.940 --> 00:27:31.670
ingredients I'm using for filtering.

00:27:31.810 --> 00:27:32.770
So that's good.

00:27:33.020 --> 00:27:34.790
This is working.

00:27:35.330 --> 00:27:37.680
And this is as far as
we'll take it for now.

00:27:37.680 --> 00:27:38.860
We'll finish it later.

00:27:38.860 --> 00:27:41.210
So if we can go back to slides, please.

00:27:53.560 --> 00:27:58.440
So what we saw in this section is
how to use the model view controller

00:27:58.910 --> 00:28:00.840
pattern for iPhone web applications.

00:28:00.840 --> 00:28:06.410
And we saw how to use the visual
design tools to design the interface

00:28:06.410 --> 00:28:08.600
visually without writing any code.

00:28:08.600 --> 00:28:12.690
And how to use the parts as the
building blocks for the application.

00:28:12.740 --> 00:28:15.800
Well, once we have the
interface up and running,

00:28:15.800 --> 00:28:19.420
it's time to make it
really work with real data.

00:28:20.340 --> 00:28:22.640
And for that,
I want to introduce Michael,

00:28:22.640 --> 00:28:26.130
who's going to help us retrieve
some data from the server.

00:28:26.140 --> 00:28:27.380
So, Michael.

00:28:27.380 --> 00:28:28.590
Thank you.

00:28:40.120 --> 00:28:42.530
Thanks, Daniel.

00:28:42.650 --> 00:28:43.290
I'm Mike Kahl.

00:28:43.430 --> 00:28:44.570
I work on Dashcode.

00:28:44.730 --> 00:28:49.270
And today I'm going to show you how we
can hook up this web app to live data.

00:28:49.280 --> 00:28:54.640
We have set up a web server that
maintains a database of drink recipes,

00:28:54.640 --> 00:28:58.240
and it responds to various queries.

00:28:58.240 --> 00:29:00.150
Let's take a look.

00:29:01.470 --> 00:29:07.190
Here's a sample query that is a URL and
it asks the server for a list of

00:29:07.200 --> 00:29:09.980
drinks made with certain ingredients.

00:29:10.170 --> 00:29:15.450
And the server might respond with
a list of drinks and some summary

00:29:15.460 --> 00:29:17.610
information about each one.

00:29:18.350 --> 00:29:19.340
Here's another query.

00:29:19.590 --> 00:29:23.480
This one asks for the
recipe for a given drink,

00:29:23.530 --> 00:29:27.890
and the server might respond with
expanded information about that drink,

00:29:27.920 --> 00:29:29.880
including the recipe.

00:29:30.370 --> 00:29:34.300
I'd like to talk a little bit about
the format of these responses.

00:29:34.350 --> 00:29:38.740
We've chosen not to use some complicated
XML that we would then have to parse.

00:29:38.740 --> 00:29:42.500
Instead,
the server is supplying results that look

00:29:42.760 --> 00:29:47.390
just like the JavaScript data that our
web app already knows how to deal with.

00:29:47.800 --> 00:29:51.490
This is known as
JavaScript Object Notation,

00:29:51.510 --> 00:29:52.280
or JSON.

00:29:52.280 --> 00:29:58.320
JSON is a data interchange format
that is being used more and more

00:29:58.690 --> 00:30:02.420
these days as an alternative to XML.

00:30:02.560 --> 00:30:05.050
Its advantage is that
it's very easy to read,

00:30:05.160 --> 00:30:07.630
both by humans and by computers.

00:30:07.710 --> 00:30:12.100
There are JSON implementations for
dozens of programming languages.

00:30:12.230 --> 00:30:22.190
But its simplicity is particularly
apparent with JavaScript because JSON is,

00:30:22.190 --> 00:30:23.550
in fact,
a subset of the literal syntax that

00:30:23.550 --> 00:30:23.550
JavaScript already understands.

00:30:25.170 --> 00:30:29.340
So parsing JSON can be as
simple as just calling eval,

00:30:29.340 --> 00:30:33.380
which is a built-in JavaScript function
that takes a string and

00:30:33.380 --> 00:30:35.420
executes it as JavaScript.

00:30:35.440 --> 00:30:39.700
And the parentheses are there to
tell eval that its argument is an

00:30:39.700 --> 00:30:42.050
expression and not a statement.

00:30:43.400 --> 00:30:45.360
So is that really all there is to it?

00:30:45.410 --> 00:30:47.800
Well, yes and no.

00:30:47.850 --> 00:30:51.040
If you totally trust the data
coming down from your server,

00:30:51.040 --> 00:30:53.600
then yeah, it's fine.

00:30:53.670 --> 00:30:59.420
But eval will execute any JavaScript,
not just the JSON subset.

00:31:00.090 --> 00:31:05.140
So a problem on the server could
adversely affect your client as well.

00:31:05.170 --> 00:31:11.480
It might not be such a good idea to
just blindly eval arbitrary JavaScript.

00:31:11.860 --> 00:31:14.710
We can get a little
bit more sophisticated.

00:31:15.930 --> 00:31:17.800
There are two things we can do.

00:31:17.980 --> 00:31:23.560
First, we can catch any exceptions,
such as a syntax error,

00:31:23.610 --> 00:31:28.590
that might occur when we
try to eval the string.

00:31:28.590 --> 00:31:28.590
And secondly,

00:31:28.870 --> 00:31:33.520
We can preflight the string to see
whether it looks like it's safe to eval.

00:31:33.580 --> 00:31:36.390
If it's not safe to eval,
or if there's a syntax

00:31:36.390 --> 00:31:40.820
error or other exception,
then this parseJSON function

00:31:40.820 --> 00:31:43.000
will return undefined.

00:31:45.560 --> 00:31:47.500
Let's take a look at
our preflighting code.

00:31:47.570 --> 00:31:49.490
Now, this uses regular expressions.

00:31:49.500 --> 00:31:52.190
It's a little bit messy,
but bear with me.

00:31:52.190 --> 00:31:55.670
It's actually not as bad as it looks.

00:31:56.060 --> 00:32:01.220
This comes from the JSON specification
and it's based on a simple observation.

00:32:01.280 --> 00:32:05.280
Outside of constant strings,
JSON actually has a very

00:32:05.280 --> 00:32:07.420
limited character set.

00:32:07.560 --> 00:32:11.540
So we remove the strings and then
we check to see whether what's

00:32:11.620 --> 00:32:16.160
left consists only of characters
that can appear in valid JSON.

00:32:16.160 --> 00:32:22.040
And the important thing to note is that
valid JSON cannot include parentheses.

00:32:22.240 --> 00:32:24.960
And without parentheses,
you can't make a function call.

00:32:24.960 --> 00:32:28.800
And it can't contain an equal sign,
so you can't do assignment.

00:32:28.800 --> 00:32:33.560
So although a string that passes
this check isn't necessarily

00:32:33.560 --> 00:32:38.690
guaranteed to be valid JSON,
at least it's pretty much impossible

00:32:38.690 --> 00:32:41.370
for evaling it to do any damage.

00:32:43.670 --> 00:32:49.200
So let's return to how we get
the data down from the server.

00:32:49.200 --> 00:32:51.470
These are our steps.

00:32:51.990 --> 00:32:56.860
We're going to use two technologies,
JSON, which we've just talked about,

00:32:56.930 --> 00:33:01.480
and XML HTTP request,
which is a JavaScript object

00:33:01.480 --> 00:33:05.640
originally designed to retrieve
XML data from a web server,

00:33:05.640 --> 00:33:08.820
but it works just as well
with any kind of data,

00:33:08.820 --> 00:33:10.200
including JSON.

00:33:11.300 --> 00:33:14.340
So we're going to replace the
implementation of this fetch drinks

00:33:14.740 --> 00:33:18.610
method of the list controller,
which is called whenever we need

00:33:18.610 --> 00:33:22.650
to repopulate the list of drinks,
and in particular it's called

00:33:22.650 --> 00:33:24.740
when the web app first is loaded.

00:33:24.920 --> 00:33:30.590
We'll start by creating a new
XML HTTP request instance.

00:33:31.330 --> 00:33:37.150
And we'll point it at our web server
by supplying an appropriate query URL.

00:33:37.740 --> 00:33:41.980
Also,
we disable caching so that we always

00:33:41.980 --> 00:33:50.330
get the most recent drink recipes
from our constantly changing database.

00:33:52.360 --> 00:33:55.880
And an important thing to
know about XML HTTP request

00:33:56.270 --> 00:33:58.310
is that it's asynchronous.

00:33:59.740 --> 00:34:03.370
When we send this request,
the reply is going to

00:34:03.410 --> 00:34:07.900
come back sometime later,
hopefully only a few milliseconds later.

00:34:08.080 --> 00:34:11.320
But still,
we need to treat the arrival of the

00:34:11.320 --> 00:34:16.490
data as an asynchronous event by
specifying a callback function which

00:34:16.850 --> 00:34:19.880
will be invoked when the event occurs.

00:34:20.300 --> 00:34:25.040
Finally,
we send our request out into the world.

00:34:25.160 --> 00:34:29.920
And we also record a reference to the
request that we sent most recently.

00:34:30.190 --> 00:34:35.230
And we'll see in just a bit why that
turns out to be a useful thing to do.

00:34:35.340 --> 00:34:40.290
But first, let's look at how we
construct the query URL.

00:34:43.190 --> 00:34:47.250
If no ingredients are selected,
then we ask the server for a list

00:34:47.360 --> 00:34:50.010
of the most highly rated drinks.

00:34:51.280 --> 00:34:55.620
If one or more ingredients are selected,
then we ask for the drinks that

00:34:55.620 --> 00:34:58.240
are made with those ingredients.

00:34:58.320 --> 00:35:02.430
And it's generally a good
idea to call encodeUri,

00:35:02.680 --> 00:35:10.010
which is a built-in JavaScript function,
in order to percent encode any

00:35:10.010 --> 00:35:10.010
special characters that might
appear in the ingredient names.

00:35:11.670 --> 00:35:13.520
So that's our query.

00:35:13.540 --> 00:35:17.000
Now let's move on to the function
that is called to process

00:35:17.100 --> 00:35:18.960
the data once it arrives.

00:35:19.060 --> 00:35:22.740
Now, remember,
the data arrives asynchronously.

00:35:22.740 --> 00:35:26.230
So we need to think about what
would happen if while we're

00:35:26.430 --> 00:35:31.210
waiting for the data to arrive,
the user selects another ingredient.

00:35:31.920 --> 00:35:36.720
Well, fetch drinks will be called again,
and a second request will be issued,

00:35:36.720 --> 00:35:39.160
and now there'll be two
requests outstanding.

00:35:39.160 --> 00:35:43.640
And both responses will come back,
and they might even come

00:35:43.640 --> 00:35:47.110
back out of sequence,
because the Internet is

00:35:47.110 --> 00:35:49.230
unpredictable that way.

00:35:49.600 --> 00:35:51.060
We need to defend against that.

00:35:51.220 --> 00:35:56.220
So in the receive data method,
we make sure that we act only

00:35:56.220 --> 00:36:00.020
in response to the request
that we sent most recently.

00:36:00.020 --> 00:36:04.570
If a response arrives,
if a response to an earlier request

00:36:04.620 --> 00:36:09.400
arrives later out of sequence,
then we want to ignore it.

00:36:10.260 --> 00:36:11.890
Okay.

00:36:11.970 --> 00:36:15.440
If everything went well,
we now have a list of

00:36:15.440 --> 00:36:17.430
drinks in JSON format.

00:36:17.540 --> 00:36:27.600
But if there was a server error or if
the JSON was ill-formed in any way,

00:36:27.600 --> 00:36:27.600
then this drinks variable
is now undefined.

00:36:28.500 --> 00:36:31.440
Finally, we can update our UI.

00:36:31.500 --> 00:36:34.550
Now, in your own web apps,
you might consider having more

00:36:34.550 --> 00:36:36.600
robust error reporting than this.

00:36:36.680 --> 00:36:39.800
But this is a demo,
so if anything went wrong,

00:36:39.890 --> 00:36:43.720
we will fall back on an empty
list for the list of drinks.

00:36:43.720 --> 00:36:49.190
Okay, let's try it out.

00:37:08.680 --> 00:37:11.890
So this project is pretty
much as Daniel left it,

00:37:11.890 --> 00:37:14.960
except that I've removed
the dummy sample data.

00:37:15.140 --> 00:37:16.840
We won't be using it anymore.

00:37:16.850 --> 00:37:21.350
And I've added in all the code
that we just saw from the slides.

00:37:21.770 --> 00:37:24.160
So let's give it a try.

00:37:24.210 --> 00:37:27.110
How many people think that this is
going to just work the first time?

00:37:27.160 --> 00:37:32.670
If it works the first time,
then I won't get to show

00:37:32.670 --> 00:37:34.900
you Dashcode's debugger.

00:37:40.360 --> 00:37:41.300
through an exception.

00:37:41.300 --> 00:37:46.940
Let's take a look.

00:37:46.950 --> 00:37:49.190
Dashcode is telling us

00:37:49.710 --> 00:37:50.700
See that?

00:37:50.820 --> 00:37:57.690
Dashcode is telling us that
this.receiveData was undefined.

00:37:57.690 --> 00:37:57.690
So let's look at the code.

00:37:58.540 --> 00:38:04.190
We're trying to call the receiveData
method of the list controller.

00:38:05.400 --> 00:38:08.910
Well, let's go to the variables view and
take a look at the this object.

00:38:08.980 --> 00:38:13.060
And that doesn't look like
our list controller at all.

00:38:13.060 --> 00:38:17.780
In fact, that's an XML HTTP request.

00:38:17.860 --> 00:38:19.690
How did that happen?

00:38:22.180 --> 00:38:28.110
It turns out that in JavaScript,
whenever a function is called,

00:38:28.700 --> 00:38:31.690
The this object always
receives a fresh value.

00:38:31.810 --> 00:38:36.020
You can think of it as a hidden
argument to the function.

00:38:37.490 --> 00:38:40.370
In this case,
when the callback function was called,

00:38:40.370 --> 00:38:47.700
the system, for whatever reason,
passed in the XMLHTML request object.

00:38:48.090 --> 00:38:53.540
Well, we wrote this code expecting
that we could refer to the list

00:38:53.550 --> 00:38:56.250
controller from the outer scope.

00:38:56.660 --> 00:38:59.540
Well, that's a common programming
error in JavaScript,

00:38:59.760 --> 00:39:01.810
but it's easy to work around.

00:39:02.140 --> 00:39:05.660
We just introduced a new local variable,
and we'll call it self because

00:39:05.660 --> 00:39:09.020
we're Objective-C programmers,
and self is not a reserved

00:39:09.070 --> 00:39:10.440
word in JavaScript.

00:39:10.640 --> 00:39:14.140
And we'll make it refer
to the list controller.

00:39:14.330 --> 00:39:20.020
And then we change our method
call to use that instead.

00:39:20.190 --> 00:39:21.360
So let's run it.

00:39:21.550 --> 00:39:25.460
How many people think it's
going to work this time?

00:39:25.740 --> 00:39:28.430
Still no bites.

00:39:29.950 --> 00:39:35.460
Well, this time, no exception,
but also no drinks.

00:39:35.540 --> 00:39:38.830
So to debug this,
we're going to use a new

00:39:38.830 --> 00:39:43.010
feature of Dashcode 2.0,
the resource log.

00:39:44.220 --> 00:39:47.240
The resource log is a list
of the resources that have

00:39:47.310 --> 00:39:50.920
been loaded at runtime,
whether from the local file

00:39:50.920 --> 00:39:53.130
system or over the network.

00:39:53.230 --> 00:39:56.290
We're interested in seeing
what came in over the network.

00:39:56.760 --> 00:39:58.700
and nothing came in over the network.

00:39:58.700 --> 00:40:00.540
That can't be good.

00:40:00.600 --> 00:40:03.090
What happened to our query?

00:40:04.930 --> 00:40:07.440
Here it is.

00:40:07.600 --> 00:40:11.270
But look at that URL.

00:40:11.360 --> 00:40:13.870
We thought that query was
going to go to our web server,

00:40:13.870 --> 00:40:17.070
but it tried to find it
on a local file system,

00:40:17.190 --> 00:40:19.830
and of course there was no response.

00:40:20.830 --> 00:40:25.500
So let's go look at the code
that constructed that query URL.

00:40:25.510 --> 00:40:27.300
And it's true.

00:40:27.350 --> 00:40:31.700
We never explicitly named the web server.

00:40:31.750 --> 00:40:34.900
We just assumed that

00:40:35.450 --> 00:40:41.090
The query would go to the same
server that the web page came from.

00:40:41.400 --> 00:40:45.490
And that's actually a valid assumption
once we've deployed this web app

00:40:45.500 --> 00:40:48.330
and we're viewing it on our iPhones.

00:40:48.450 --> 00:40:53.600
But during development, the web page,
the HTML,

00:40:53.830 --> 00:40:56.130
comes from the local file system.

00:40:56.470 --> 00:40:59.080
But the query still needs
to go to the server.

00:41:01.470 --> 00:41:06.080
So to work around that,
we're going to introduce a base URL,

00:41:06.080 --> 00:41:10.560
which is going to be a global
variable that will initialize to point

00:41:10.560 --> 00:41:15.790
explicitly to our web server only
when we're running under Dashcode.

00:41:16.570 --> 00:41:19.690
When we're deployed,
we want it to be the empty string.

00:41:19.810 --> 00:41:22.170
So in order to figure out
how to make that distinction,

00:41:22.320 --> 00:41:28.210
let's turn to JavaScript's evaluator,
which is a JavaScript console

00:41:28.610 --> 00:41:31.980
and our web app is still running,
so we have live access

00:41:32.000 --> 00:41:34.130
to the JavaScript world.

00:41:36.210 --> 00:41:40.770
There's a property, location.href,
that tells us where the

00:41:40.820 --> 00:41:41.950
HTML file came from.

00:41:42.290 --> 00:41:45.370
And as you can see,
it's a file-based URL.

00:41:46.020 --> 00:41:50.240
Now, I think there's another property
that might be more useful.

00:41:50.240 --> 00:41:53.320
We can find it using code completion.

00:41:54.020 --> 00:41:57.820
That's the one I was thinking of,
and that's just the file

00:41:57.820 --> 00:42:00.550
colon portion of the URL.

00:42:00.560 --> 00:42:01.630
So let's use that.

00:42:06.900 --> 00:42:13.630
Go down to our onload handler
and initialize base URL depending

00:42:13.630 --> 00:42:16.460
on location.protocol.

00:42:17.020 --> 00:42:23.910
If it's file colon,
then we'll name our web server.

00:42:24.820 --> 00:42:29.440
and otherwise,
we want it to be the empty string.

00:42:29.480 --> 00:42:30.100
Okay.

00:42:30.500 --> 00:42:39.340
Now,
there's actually one more place where we

00:42:39.340 --> 00:42:40.470
need to also refer to base URL because
we're loading images from the server.

00:42:43.460 --> 00:42:45.680
Okay, now we're ready to run.

00:42:46.060 --> 00:42:47.000
Third time's a charm, right?

00:42:47.000 --> 00:42:52.090
And this time everything works.

00:42:52.270 --> 00:42:55.870
We've got our list of popular drinks.

00:43:02.340 --> 00:43:08.880
We've got our list of popular drinks,
and let's look at the resource log.

00:43:09.080 --> 00:43:10.480
Here's our query.

00:43:10.690 --> 00:43:12.630
This time it went...

00:43:13.080 --> 00:43:15.320
To the web server, there was a response.

00:43:15.320 --> 00:43:20.420
And we can even look at
the JSON that came back.

00:43:21.700 --> 00:43:26.710
We can also see the images that
were downloaded from the server.

00:43:28.800 --> 00:43:32.200
Let's try out our filtering.

00:43:32.300 --> 00:43:35.090
Here are the drinks that
are made with orange juice.

00:43:35.530 --> 00:43:37.660
Here are the drinks that are
made with orange juice and honey.

00:43:37.820 --> 00:43:41.060
Oh, there's only one.

00:43:41.270 --> 00:43:44.820
I want to point out,
it looks like in our drink summary

00:43:45.290 --> 00:43:46.940
that there might be some words missing.

00:43:46.940 --> 00:43:49.450
Can you see that?

00:43:51.600 --> 00:43:55.440
So let's go look at
the resource log again.

00:43:55.480 --> 00:43:56.640
And yeah, it's true.

00:43:56.640 --> 00:44:00.790
It looks like the words
"plenty of fruit" got clipped.

00:44:00.970 --> 00:44:05.330
What we'd like to have happen is for
the list row to get taller automatically

00:44:05.610 --> 00:44:08.220
in order to accommodate any extra text.

00:44:08.430 --> 00:44:10.020
Well,
we're going to show you how to do that

00:44:10.020 --> 00:44:11.590
a little bit later in the session.

00:44:11.870 --> 00:44:14.610
But first,
there's one more thing I want to do.

00:44:14.800 --> 00:44:18.640
I want to implement the last query,
the recipe query.

00:44:18.680 --> 00:44:23.140
This is the query that's going
to be made whenever we select a

00:44:23.140 --> 00:44:25.680
drink and go to the detail page.

00:44:31.290 --> 00:44:33.700
So let's go to the detail controller.

00:44:33.700 --> 00:44:39.030
And I'm actually going to replace
the detail controller with some

00:44:39.030 --> 00:44:42.390
code that I have up my sleeve here.

00:44:46.800 --> 00:44:49.930
This code should be very familiar.

00:44:49.990 --> 00:44:54.180
We fire off an XML HTTP request.

00:44:54.620 --> 00:44:55.330
Here's our query.

00:44:55.390 --> 00:44:56.100
It's a little bit different.

00:44:56.100 --> 00:44:58.690
This time we're asking for the recipe.

00:44:58.710 --> 00:44:59.900
The data comes in.

00:44:59.930 --> 00:45:01.890
It's JSON.

00:45:02.080 --> 00:45:03.040
We display the UI.

00:45:03.040 --> 00:45:05.900
It's very much the same
code as we saw before,

00:45:05.900 --> 00:45:09.670
just this time in the detail controller
instead of the list controller.

00:45:09.680 --> 00:45:11.800
So let's run it.

00:45:15.480 --> 00:45:19.410
And now when we click on a drink, well,
we don't actually see any visible

00:45:19.410 --> 00:45:23.470
difference because we haven't hooked
up the UI for the detail page yet.

00:45:23.610 --> 00:45:25.890
But the data's there.

00:45:27.310 --> 00:45:30.740
Well, we're going to be hooking up that
UI a little bit later in the session,

00:45:30.870 --> 00:45:35.300
but it would be a good idea to verify
that the data did arrive correctly.

00:45:35.300 --> 00:45:39.290
Now, we could use the resource log again,
but

00:45:39.600 --> 00:45:41.310
Let me show you a different way to do it.

00:45:41.310 --> 00:45:44.100
I've already shown you
that a couple times.

00:45:44.240 --> 00:45:48.800
We can go and we can set a breakpoint
here in the code at the spot where

00:45:48.850 --> 00:45:51.670
we're about to display the drink data.

00:45:51.970 --> 00:45:57.990
And now, when we click on a drink,
the breakpoint is reached.

00:45:58.550 --> 00:46:01.690
And we can go up to the variables
view and twist down the drink

00:46:03.080 --> 00:46:08.080
variable and see that all of the
fields have been properly populated.

00:46:08.080 --> 00:46:10.150
So it works.

00:46:10.150 --> 00:46:14.390
Back to slides, please.

00:46:30.700 --> 00:46:34.470
Okay,
so we've seen how to hook up a web app

00:46:34.600 --> 00:46:37.780
to a web server and get the data down.

00:46:38.040 --> 00:46:42.840
And we've gotten a quick tour of
Dashcode's debugging facilities.

00:46:42.910 --> 00:46:47.720
And we've gotten a few hopefully
useful JavaScript programming tips.

00:46:48.310 --> 00:46:52.200
So now, to put the finishing touches
on our fledgling web app,

00:46:52.200 --> 00:46:56.100
I'd like to introduce Sarah Laiwal.

00:46:56.390 --> 00:46:57.790
Sarah?

00:47:06.480 --> 00:47:10.280
and I am proud to be a Dashcode engineer.

00:47:10.300 --> 00:47:12.680
I'm going to show you how
to add finishing touches to

00:47:12.680 --> 00:47:15.160
your iPhone web application.

00:47:15.900 --> 00:47:17.840
First,
I'll cover a few advanced positioning

00:47:17.840 --> 00:47:22.240
and layout techniques so that we can
ensure your web application is polished

00:47:22.240 --> 00:47:25.110
and can adapt to a changing environment.

00:47:25.490 --> 00:47:29.080
Then I'll show you how to add a home
screen icon to your web application

00:47:29.170 --> 00:47:33.740
using Dashcode and then share your
web application with the world.

00:47:35.700 --> 00:47:45.290
provides you with two ways to lay
out the elements in your interface.

00:47:45.290 --> 00:47:45.290
The first one is absolute positioning,
and the second one is

00:47:45.290 --> 00:47:45.290
document flow positioning.

00:47:45.900 --> 00:47:49.500
Appset positioning is useful when you
don't expect elements on your page

00:47:49.640 --> 00:47:52.300
to grow or interact with one another.

00:47:52.320 --> 00:47:56.270
You expect them to remain independent
of each other and in the same

00:47:56.270 --> 00:47:58.890
location relative to their container.

00:47:59.630 --> 00:48:04.290
AFSA positioning is also advantageous
when you want to achieve complex designs,

00:48:04.290 --> 00:48:06.700
like overlapping elements.

00:48:07.100 --> 00:48:10.090
But although absolute
positioning has its benefits,

00:48:10.180 --> 00:48:13.680
it's not always advantageous
when you have a layout like this.

00:48:13.740 --> 00:48:16.680
You have two boxes that you're
designing at design time,

00:48:16.770 --> 00:48:20.040
but you don't know how much text
you're receiving at runtime.

00:48:20.160 --> 00:48:22.720
So if you receive one
sentence from the database,

00:48:22.800 --> 00:48:25.280
that's great because this layout works.

00:48:25.360 --> 00:48:30.900
But if you receive multiple sentences,
then the green and the blue box start to

00:48:30.900 --> 00:48:34.190
overlap and the text becomes unreadable.

00:48:34.400 --> 00:48:38.120
So what you'll want to do here is
change the positioning from absolute

00:48:38.350 --> 00:48:41.460
for both the boxes to document flow.

00:48:41.530 --> 00:48:46.360
So as the green box expands,
the blue box gets pushed down.

00:48:46.380 --> 00:48:49.080
Now let's look at another
situation where the elements

00:48:49.210 --> 00:48:51.190
on your page can be affected.

00:48:52.280 --> 00:48:56.900
The iPhone can be held in portrait
mode or in landscape mode.

00:48:57.020 --> 00:49:01.210
And you want the elements on your
page to be able to interact with this.

00:49:01.730 --> 00:49:04.570
So Dashcode provides you with
the layout tools to do just that.

00:49:04.570 --> 00:49:08.630
If you've used Interface Builder before,
the concept of springs will

00:49:08.630 --> 00:49:10.200
be very familiar to you.

00:49:10.200 --> 00:49:15.650
And if you haven't, well, that's OK.

00:49:15.650 --> 00:49:15.650
Just playing with Dashcode for a couple
of minutes will make things clear.

00:49:16.340 --> 00:49:19.220
So suppose you have an element
that you want centered when

00:49:19.220 --> 00:49:21.200
the iPhone orientation changes.

00:49:21.220 --> 00:49:25.990
What you'll do here is set springs on
the outer horizontal margins to make

00:49:25.990 --> 00:49:29.240
sure that the box's width is constant.

00:49:29.330 --> 00:49:33.770
So as the iPhone rotates,
your box remains centered.

00:49:34.810 --> 00:49:37.290
Let's suppose you want the
elements on your page to grow as

00:49:37.350 --> 00:49:39.800
the iPhone orientation changes.

00:49:39.800 --> 00:49:44.090
What you'll do here is set inner
horizontal springs to make sure that

00:49:44.090 --> 00:49:46.800
the box's width is now variable.

00:49:47.000 --> 00:49:50.790
As your iPhone rotates,
your element grows.

00:49:51.790 --> 00:49:57.820
You might want a pinned behavior
where you want certain elements to

00:49:57.920 --> 00:50:00.760
stay pinned in certain locations,
like to the left or to the right.

00:50:00.820 --> 00:50:04.860
By setting the appropriate springs,
you can accomplish that.

00:50:07.850 --> 00:50:12.490
So now that I've shown you how to layout,
how to add finishing

00:50:12.560 --> 00:50:15.320
touches to your layout,
I'm going to show you how to add a home

00:50:15.350 --> 00:50:17.160
screen icon to your web application.

00:50:17.260 --> 00:50:19.710
Now you might be wondering
why you should do that.

00:50:19.800 --> 00:50:23.230
Well, you should do that because
the iPhone has several icons.

00:50:23.400 --> 00:50:26.980
It has a mail icon, the stocks icon,
lots of icons.

00:50:27.000 --> 00:50:32.510
And Safari allows you as a user
to add a home screen icon for your

00:50:32.510 --> 00:50:34.160
web application to the home screen.

00:50:34.980 --> 00:50:39.900
So you want an icon that represents your
web application when the user adds your

00:50:40.050 --> 00:50:42.000
web application to their home screen.

00:50:45.000 --> 00:50:51.140
The Dashcode has a design
editor that lets you do that.

00:50:51.140 --> 00:50:51.140
We give you the proper iPhone dimensions.

00:50:51.410 --> 00:50:53.840
And via the inspector,
you can add a gradient or

00:50:53.920 --> 00:50:55.410
color to the background.

00:50:55.490 --> 00:51:00.160
And if you have an orange or an image,
you can pop it right on.

00:51:01.470 --> 00:51:04.030
So now that I've shown you how to
lay out the elements on your page

00:51:04.040 --> 00:51:07.260
or add finishing touches to them,
and I've shown you how to add a home

00:51:07.260 --> 00:51:11.430
screen icon to your web application,
I think you're ready to share your

00:51:11.430 --> 00:51:13.400
web application with the world.

00:51:13.460 --> 00:51:16.780
So Dash Code lets you deploy
to three types of web servers.

00:51:16.820 --> 00:51:23.560
You have .mac, webdev-to-mac-os10 server,
and local web server.

00:51:23.580 --> 00:51:26.040
If you choose not to deploy
to one of these servers,

00:51:26.060 --> 00:51:27.980
that's all right,
because Dash Code lets you save

00:51:27.980 --> 00:51:31.080
your website folder locally,
and then you can deploy it to

00:51:31.080 --> 00:51:34.880
wherever you want to deploy it to.

00:51:34.930 --> 00:51:39.090
So let's go ahead and add these
finishing touches to Sugarwater.

00:51:54.800 --> 00:52:00.620
Earlier, the iPhone has two different
types of orientation:

00:52:00.620 --> 00:52:00.620
portrait

00:52:01.000 --> 00:52:02.870
and Landscape.

00:52:02.930 --> 00:52:05.200
Sugarwater is currently in portrait mode.

00:52:05.200 --> 00:52:07.910
If you'd like to see
it in landscape mode,

00:52:08.210 --> 00:52:11.260
You can click on this button right
here that says "Rotate to landscape

00:52:11.320 --> 00:52:15.420
orientation." And by default,
Dashcode scales a page up

00:52:15.420 --> 00:52:17.370
to fit the wider screen.

00:52:19.300 --> 00:52:22.290
If you don't want the page to
scale up to fit the wider screen,

00:52:22.290 --> 00:52:25.120
you can go into Application Attributes.

00:52:26.700 --> 00:52:33.320
and select Adjust Page Width to Fit so
that when you rotate Sugarwater again,

00:52:33.320 --> 00:52:37.290
now the page has grown wider
to fit the wider screen.

00:52:37.310 --> 00:52:40.940
For Sugarwater,
we're going to keep this setting.

00:52:40.940 --> 00:52:42.940
And if we keep the setting,
notice we have too much

00:52:43.070 --> 00:52:47.130
white space over here,
and the button box is no longer centered.

00:52:47.170 --> 00:52:50.420
So this doesn't look good.

00:52:50.420 --> 00:52:53.570
So we'll go ahead and
select the button box.

00:52:55.130 --> 00:52:57.240
Open up the inspector.

00:52:57.240 --> 00:53:00.940
We'll go into the metrics
inspector and put outer

00:53:00.940 --> 00:53:03.730
horizontal springs on the margins.

00:53:03.760 --> 00:53:08.750
So as the iPhone rotates,
the button box remains centered.

00:53:10.800 --> 00:53:13.980
Now, if you recall from Mike's demo,
the text of the drink

00:53:14.180 --> 00:53:16.070
was being clipped off.

00:53:16.070 --> 00:53:19.570
And that was because the
elements inside a list row are

00:53:19.570 --> 00:53:23.030
using absolute positioning,
even though the list

00:53:23.030 --> 00:53:25.000
itself uses document flow.

00:53:25.040 --> 00:53:28.460
So our first instinct
might be to make the text

00:53:28.900 --> 00:53:35.300
[Transcript missing]

00:53:35.870 --> 00:53:40.540
So, you'll want to do here is select
Text and Ratings and change the

00:53:40.540 --> 00:53:43.090
layout to use Document Flow.

00:53:44.460 --> 00:53:48.900
So now, as the text expands,
the ratings gets pushed down.

00:53:48.910 --> 00:53:53.110
But now we have another problem,
and that's that the ratings,

00:53:53.410 --> 00:53:55.720
the list itself is not expanding.

00:53:55.780 --> 00:53:58.150
So we can select the list.

00:53:58.480 --> 00:54:04.540
and give it inner vertical springs so
that the list's height is now variable.

00:54:05.800 --> 00:54:09.090
As the text expands,
the list begins to grow.

00:54:09.280 --> 00:54:11.380
This is exactly what we want.

00:54:11.410 --> 00:54:15.560
But now we have two more issues here,
aesthetic issues.

00:54:15.570 --> 00:54:20.190
The first one is that the ratings is
touching the bottom of the list row.

00:54:20.300 --> 00:54:24.800
And the drink and the chevron
images are no longer centered.

00:54:24.860 --> 00:54:27.100
So let's solve both these problems.

00:54:27.110 --> 00:54:32.280
For the ratings, we'll just give it a
bottom margin of 8 pixels.

00:54:32.280 --> 00:54:36.520
And we'll select the drink
and the chevron and give

00:54:36.520 --> 00:54:41.160
them outer vertical springs.

00:54:43.610 --> 00:54:49.960
So now, as the list expands,
the drink image stays centered and the

00:54:49.960 --> 00:54:54.150
ratings have a bottom margin of 8 pixels.

00:54:54.640 --> 00:54:57.980
So now we're done adding finishing
touches to the detail view.

00:54:58.000 --> 00:54:59.640
So let's-- to the list view.

00:54:59.640 --> 00:55:01.700
Let's proceed to the detail view.

00:55:02.330 --> 00:55:05.400
For the detail view,
I've already added a box and image

00:55:05.400 --> 00:55:08.850
and done all the layout for that
because you've already seen it being

00:55:08.850 --> 00:55:12.470
done in the two demos beforehand.

00:55:12.710 --> 00:55:16.570
So the crux of this page is that
I want to be able to see the steps

00:55:16.650 --> 00:55:19.890
and the ingredients for this page,
for the drink.

00:55:20.620 --> 00:55:24.030
What I can do is drag a text
box and make sure that the

00:55:24.030 --> 00:55:27.440
ingredients are always on top and
the steps are always on the bottom.

00:55:27.450 --> 00:55:30.370
But if I do that,
then my user is going to scroll a lot

00:55:30.500 --> 00:55:35.360
to find out that they might have to bake
something at 350 degrees at the end.

00:55:35.440 --> 00:55:39.350
So instead of doing that,
I want to use a stack layout,

00:55:39.390 --> 00:55:42.560
because the stack layout
provides me with two views.

00:55:42.590 --> 00:55:48.180
So I can easily use that and go from
the ingredients view to the steps view.

00:55:48.410 --> 00:55:51.390
So I'll go ahead and drag a Stack Layout.

00:55:51.390 --> 00:55:55.000
And again, Stack Layout has two views,
view one and view two.

00:55:55.020 --> 00:55:57.270
And in view one,
I want to show the ingredients.

00:55:57.550 --> 00:56:02.690
So I'll drag in a rounded
box and a text part.

00:56:04.200 --> 00:56:08.040
The text is touching the left wall,
and that doesn't look good.

00:56:08.040 --> 00:56:15.710
So we'll go ahead and give
the box a text padding of...

00:56:19.800 --> 00:56:22.600
That looks better.

00:56:22.610 --> 00:56:26.340
And because we want to go from the
ingredients view to the steps view,

00:56:26.350 --> 00:56:32.980
I need a push button,
which I'll put directly under the text.

00:56:34.500 --> 00:56:37.880
And now let's make the button look
like the back button by giving

00:56:37.980 --> 00:56:41.340
it a color using the sampler.

00:56:44.700 --> 00:56:47.670
And now let's go ahead and take
a look at how this page responds

00:56:47.850 --> 00:56:50.980
to the iPhone orientation change.

00:56:50.980 --> 00:56:54.490
Notice that the button is no
longer to the right of the box.

00:56:54.760 --> 00:56:58.290
To fix that, we need to give it springs.

00:56:58.290 --> 00:57:00.580
And we will give it left springs.

00:57:00.670 --> 00:57:07.720
So now as the iPhone orientation changes,
the button itself remains to the right.

00:57:07.890 --> 00:57:09.540
So this is good.

00:57:09.550 --> 00:57:12.290
And we'll expand the
text just a little bit.

00:57:16.510 --> 00:57:17.740
This is the Ingredients view.

00:57:17.740 --> 00:57:20.230
The Steps view looks exactly
like the Ingredients view,

00:57:20.230 --> 00:57:22.000
except it's going to show the steps.

00:57:22.050 --> 00:57:27.890
So I'm just going to copy this
box and paste it into View 2.

00:57:30.200 --> 00:57:32.460
Now, before I write any code,
it's always best practice

00:57:32.660 --> 00:57:35.300
to rename these IDs.

00:57:35.320 --> 00:57:43.700
But because you've already
seen IDs being renamed,

00:57:43.700 --> 00:57:43.700
and it's kind of a
boring thing to look at,

00:57:43.700 --> 00:57:43.700
I'm going to--

00:57:45.510 --> 00:57:50.010
Open up this project right here,
which is everything that

00:57:50.010 --> 00:57:52.510
you've already seen,
but the IDs are renamed.

00:57:52.600 --> 00:58:01.560
And now, let's go ahead and take a look
at how our interface looks.

00:58:08.220 --> 00:58:12.360
You can go ahead and select
the orange and the honey.

00:58:12.360 --> 00:58:15.940
And now we'll see that sweet and creamy
with plenty of fruit is now showing.

00:58:15.940 --> 00:58:18.690
The entire text is
showing for this drink.

00:58:20.300 --> 00:58:23.300
And here's our steps view.

00:58:23.300 --> 00:58:24.300
And nothing happens.

00:58:24.300 --> 00:58:27.980
And that's because I haven't set the
onClick handlers for this button.

00:58:28.010 --> 00:58:30.600
So we can quit out of the simulator.

00:58:31.500 --> 00:58:37.920
And we'll go here and select ingredients,
go into on click,

00:58:37.920 --> 00:58:42.180
and say show ingredients right here.

00:58:45.500 --> 00:58:48.260
For those of you who don't want to
show you how to type all this code out,

00:58:48.260 --> 00:58:51.340
I already have snippets ready for you.

00:58:51.390 --> 00:58:55.260
And I'm going to drag show
ingredients and steps.

00:58:55.280 --> 00:58:57.330
I'm going to remove this.

00:58:58.740 --> 00:59:04.770
discuss this code.

00:59:04.770 --> 00:59:04.770
So show the ingredients.

00:59:04.770 --> 00:59:04.770
All it's doing is getting

00:59:05.100 --> 00:59:08.870
The Detail Stack is getting the
Stack Layout by its ID called

00:59:08.870 --> 00:59:12.940
Detail Stack and then setting the
current view from the Stack Layout

00:59:13.240 --> 00:59:15.620
API to show the ingredients view.

00:59:16.700 --> 00:59:23.090
StepsView is doing the same thing.

00:59:23.090 --> 00:59:23.090
Show Steps is doing the same thing,
except it's taking us to the StepsView.

00:59:23.620 --> 00:59:27.050
So for the Ingredients button,
we'll add the on-click handle,

00:59:27.050 --> 00:59:28.940
which is Show Ingredients.

00:59:28.940 --> 00:59:31.130
I already did that, so it's there.

00:59:31.310 --> 00:59:35.310
And for the Steps button,
we'll go ahead and say Show Steps.

00:59:36.600 --> 00:59:45.810
will test the transition from Steps
view to the Ingredients view and the

00:59:45.810 --> 00:59:45.810
Ingredients feedback to the Steps view.

00:59:45.810 --> 00:59:45.810
Again, I'll select orange and honey.

00:59:49.050 --> 00:59:53.960
Look at steps and it goes to ingredients
and ingredients goes back to steps.

00:59:53.960 --> 00:59:59.400
But because we've already used
this push transition to go from

00:59:59.410 --> 01:00:03.610
the list view to the detailed view,
we should probably use another

01:00:03.610 --> 01:00:07.660
transition to go from the steps to the
ingredients view back to the steps view.

01:00:07.660 --> 01:00:13.700
And of course, the back end is not
connected to the front end,

01:00:13.700 --> 01:00:13.700
so we should take care of that.

01:00:15.480 --> 01:00:21.940
To change the transitions,
we'll select the stack layout,

01:00:21.990 --> 01:00:25.520
go into the inspector,
and change the transition

01:00:25.520 --> 01:00:27.920
from push to flip.

01:00:27.950 --> 01:00:30.370
And now we'll connect the back end.

01:00:34.500 --> 01:00:39.870
What the back end is doing is
getting the reference to an object,

01:00:40.150 --> 01:00:44.900
and setting the text
to be its inner HTML.

01:00:44.970 --> 01:00:46.810
So we'll hit Run.

01:00:52.030 --> 01:00:59.890
will stick to the honey
and the orange drink.

01:00:59.890 --> 01:00:59.890
And now we can build our
drink with these ingredients.

01:01:01.260 --> 01:01:10.310
uses the flips to the ingredients
and ingredients back to steps.

01:01:10.310 --> 01:01:10.310
So this is working.

01:01:10.310 --> 01:01:10.310
And we've finally finished
polishing sugar water.

01:01:11.070 --> 01:01:14.290
So our next step is to
add a home screen icon.

01:01:14.660 --> 01:01:19.790
To do that, I'm just going to go into the
Fill and Stroke Inspector.

01:01:22.000 --> 01:01:27.050
You can select this light
green for the top gradient.

01:01:27.450 --> 01:01:32.510
and Dark Green for the bottom gradient.

01:01:33.900 --> 01:01:47.400
[Transcript missing]

01:01:47.820 --> 01:01:51.240
So, like Steve has his one more thing,
I have my own one more thing,

01:01:51.350 --> 01:01:55.340
and that's Dashcode will send an email
to you with a deployed web application,

01:01:55.350 --> 01:01:58.930
a link to the deployed web application,
so that you can easily test your

01:01:59.100 --> 01:02:01.050
web application on the iPhone.

01:02:01.050 --> 01:02:06.190
So, I'll just select that and hit Deploy.

01:02:11.800 --> 01:02:13.800
We'll go to the iPhone.

01:02:13.800 --> 01:02:17.140
Unlock the phone.

01:02:17.140 --> 01:02:21.300
And now we have a
message waiting in mail.

01:02:21.300 --> 01:02:26.240
It's from dashcode team dot mac.

01:02:26.240 --> 01:02:27.840
And there's a link to Sugar Water.

01:02:27.900 --> 01:02:32.060
So we'll go ahead and hit that.

01:02:32.060 --> 01:02:34.770
And wait for Safari to load the page.

01:02:38.800 --> 01:02:41.040
and we have our drinks on the iPhone.

01:02:41.040 --> 01:02:45.710
So let's go ahead and make sure...

01:02:51.550 --> 01:02:55.050
So let's go ahead and make sure
that our button box is centered as

01:02:55.090 --> 01:02:59.940
the iPhone orientation changes from
portrait mode to landscape mode.

01:02:59.940 --> 01:03:01.670
Of course, this has sticky on the back.

01:03:01.740 --> 01:03:06.280
And I turned it off.

01:03:10.500 --> 01:03:14.100
Your button box is centered.

01:03:14.100 --> 01:03:16.000
I'll lift it again.

01:03:19.280 --> 01:03:19.710
Time.

01:03:19.860 --> 01:03:21.780
I no longer want that orange honey drink.

01:03:21.780 --> 01:03:25.020
I want a coffee ice cream drink.

01:03:29.530 --> 01:03:32.080
and I have a cappuccino cooler.

01:03:32.080 --> 01:03:37.880
And we can see here what the
ingredients are to make the drink.

01:03:41.440 --> 01:03:46.900
and I'll start to make the drink.

01:03:46.900 --> 01:03:46.900
And our flip transition
is working nicely as well.

01:03:48.900 --> 01:03:53.300
So now let's go ahead and take
a look at our home screen icon.

01:03:53.380 --> 01:03:58.560
So using Safari, we'll add this web app
to our home screen.

01:03:58.570 --> 01:04:01.880
There's Sugarwater,
and there's my pretty icon.

01:04:01.920 --> 01:04:04.630
Hit Add.

01:04:04.740 --> 01:04:07.350
And I'll never be thirsty again.

01:04:20.700 --> 01:04:27.670
We've got a lot of information today,
a lot.

01:04:27.670 --> 01:04:27.670
And what I hope you take
away from all of this are

01:04:28.190 --> 01:04:29.940
The following things.

01:04:29.960 --> 01:04:34.170
Dashcode is now for widgets
and web applications.

01:04:34.320 --> 01:04:38.510
We let you create Ajax-based
applications visually with our

01:04:38.600 --> 01:04:42.420
prepackaged parts that already have
behaviors associated with them.

01:04:42.440 --> 01:04:45.840
We have layout tools available
to you so that you can make sure

01:04:45.840 --> 01:04:49.720
your web application is polished,
can adapt to a changing environment,

01:04:49.720 --> 01:04:51.790
and can adapt to dynamic content.

01:04:53.980 --> 01:04:57.240
We also have a built-in debugger
and runtime tools for you

01:04:57.580 --> 01:05:00.740
to solve your coding issues.

01:05:01.160 --> 01:05:04.090
And when you're ready and comfortable
with your web application,

01:05:04.090 --> 01:05:07.910
add a home screen icon to it in
literally seconds using Dashcode,

01:05:07.910 --> 01:05:11.010
and then share your web
application with the world.

01:05:11.690 --> 01:05:15.820
We hope that what you've seen here today
makes you excited to go out and use

01:05:15.820 --> 01:05:19.340
Dashcode as your web application IDE.

01:05:19.630 --> 01:05:23.330
If you're more interested in
Dashcode and related sessions,

01:05:23.330 --> 01:05:25.180
we have a few available for you.

01:05:25.210 --> 01:05:29.410
Unfortunately,
Session 313 and 379 have already passed,

01:05:29.410 --> 01:05:34.510
but we'll have that available to
you via iTunes after the conference.

01:05:34.650 --> 01:05:38.170
If you'd like to build your
iPhone web application hands-on,

01:05:38.170 --> 01:05:42.790
come to the session on Thursday,
tomorrow at 9:00 a.m.

01:05:43.060 --> 01:05:44.570
If you want to learn
more about Dashcodes,

01:05:44.790 --> 01:05:51.190
primarily creating widgets,
we have a session for

01:05:51.190 --> 01:05:51.190
you Friday at 10:30 AM.

01:05:51.610 --> 01:05:56.200
If you have questions that we
can't answer in today's Q&A,

01:05:56.200 --> 01:06:03.430
or you'd like to bring your code
by so we can take a look at it,

01:06:03.430 --> 01:06:03.430
we have labs available for you
on both Thursday and Friday.

01:06:03.660 --> 01:06:08.030
If you have more questions about labs,
Dashcode, sessions,

01:06:08.030 --> 01:06:11.670
please contact Vicki Murley or
Mike Jurwitz or our Dashcode User Guide.