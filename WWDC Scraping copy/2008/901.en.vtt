WEBVTT

00:00:21.340 --> 00:00:22.700
Good morning.

00:00:22.820 --> 00:00:26.200
Welcome to the introduction
to the iPhone Developer Tools.

00:00:26.370 --> 00:00:28.200
This is session 901.

00:00:28.200 --> 00:00:30.200
My name is Michael Jurewitz.

00:00:30.200 --> 00:00:32.200
I'm Apple's Developer Tools evangelist.

00:00:32.200 --> 00:00:36.030
So my job is to work with developers
like yourselves to make sure that you're

00:00:36.030 --> 00:00:37.200
getting the most out of the tools.

00:00:37.210 --> 00:00:41.200
And we've really got a great session here
for you this morning to do just that,

00:00:41.200 --> 00:00:43.200
to make sure we speed you
along in your development,

00:00:43.200 --> 00:00:48.970
that you understand exactly what you
need to do to write iPhone applications.

00:00:49.420 --> 00:00:55.440
So, welcome to a new day and a new
mobile development platform.

00:00:55.550 --> 00:00:59.880
We really think that it's the best mobile
development experience in the world,

00:00:59.890 --> 00:01:01.040
bar none.

00:01:01.150 --> 00:01:04.610
Just for a show of hands, I'm curious,
how many of you are

00:01:04.650 --> 00:01:07.150
experienced Mac developers?

00:01:07.150 --> 00:01:07.150
Just raise your hand.

00:01:07.630 --> 00:01:09.200
Okay, smattering.

00:01:09.280 --> 00:01:11.360
How many of you are new to
Mac development or new to

00:01:11.360 --> 00:01:12.600
iPhone development as a whole?

00:01:12.600 --> 00:01:13.600
Raise your hands.

00:01:14.000 --> 00:01:15.590
Excellent, good.

00:01:15.600 --> 00:01:16.540
All right,
so we've got the right audience.

00:01:16.610 --> 00:01:18.600
We wrote the description correctly.

00:01:18.600 --> 00:01:23.600
So today we're going to be trying to
take you on a tour through the tools,

00:01:23.600 --> 00:01:25.600
a journey,
to make sure that you understand

00:01:25.600 --> 00:01:28.480
exactly how they need to be used in
the development process as a whole.

00:01:28.600 --> 00:01:31.590
And if there's three things that
you take out of this session,

00:01:31.590 --> 00:01:35.600
I want you to understand a few things
about our tools at a high level.

00:01:35.600 --> 00:01:38.510
The first is that our
tools are streamlined.

00:01:38.510 --> 00:01:40.580
They're there to help
keep you productive,

00:01:40.710 --> 00:01:43.600
to keep you moving forward
in your development.

00:01:43.640 --> 00:01:47.430
We always want to make sure that we're
staying out of your way and allowing

00:01:47.430 --> 00:01:49.390
you to do your job as a developer.

00:01:49.720 --> 00:01:52.260
Our tools are well integrated.

00:01:52.260 --> 00:01:54.640
We've got a wide variety
of tools on the platform,

00:01:54.670 --> 00:01:58.480
but they all work seamlessly together
so that you can transition from writing

00:01:58.480 --> 00:02:01.990
code to working on your interface
to performance analysis without

00:02:01.990 --> 00:02:05.300
having to switch your mental model or
without having to worry about syncing

00:02:05.300 --> 00:02:06.800
between these different applications.

00:02:06.800 --> 00:02:10.660
And finally, our tools are complete.

00:02:10.730 --> 00:02:13.800
On a lot of other platforms,
you end up having to purchase

00:02:13.800 --> 00:02:16.390
things like performance
analysis tools or design tools,

00:02:16.390 --> 00:02:19.500
and we actually provide
everything for you out of the box.

00:02:19.700 --> 00:02:20.730
Thank you.

00:02:21.340 --> 00:02:23.940
The real goal here is that when
we're done with this session,

00:02:24.000 --> 00:02:28.400
I want you guys to be able to walk out
of this door and get right down to code.

00:02:28.400 --> 00:02:30.840
Have enough of a working knowledge
with the tools that you're

00:02:30.910 --> 00:02:34.930
proficient to begin writing that
next great iPhone application.

00:02:35.290 --> 00:02:40.280
So let's start this journey and
go through and take you through

00:02:41.020 --> 00:02:44.190
all the different knowledge that
you're going to need to get started.

00:02:44.200 --> 00:02:48.060
So we'll be focusing on five tools today.

00:02:48.260 --> 00:02:51.000
And the real great thing about these
tools is that these are the exact same

00:02:51.000 --> 00:02:53.140
tools that we use for Mac development.

00:02:53.200 --> 00:02:55.870
So if you've done Mac development,
a lot of this is going to

00:02:55.880 --> 00:02:57.190
be very familiar to you.

00:02:57.200 --> 00:03:01.200
And if you haven't done Mac development,
as much of you have not,

00:03:01.390 --> 00:03:04.740
this is great because what
you learn for iPhone easily

00:03:04.740 --> 00:03:07.190
transitions back over to the Mac.

00:03:07.280 --> 00:03:11.200
So first, we'll talk about Xcode,
our integrated IDE.

00:03:11.390 --> 00:03:15.550
Next, we'll talk about Interface Builder,
our design tool for your

00:03:15.550 --> 00:03:18.010
iPhone and Mac applications.

00:03:18.420 --> 00:03:22.460
will talk about the iPhone Simulator,
which allows you to run your iPhone

00:03:22.460 --> 00:03:25.270
applications on your desktop.

00:03:25.870 --> 00:03:29.490
And we'll talk about Instruments,
a powerful analysis tool that helps

00:03:29.490 --> 00:03:33.030
bring context to your analysis
to help you better understand how

00:03:33.030 --> 00:03:35.330
your application is performing.

00:03:35.950 --> 00:03:38.010
And finally,
we'll finish up with another of

00:03:38.010 --> 00:03:41.720
our performance tools called Shark,
which gives you instruction

00:03:41.720 --> 00:03:46.200
level accuracy in your profiling
with incredibly low overhead.

00:03:47.300 --> 00:03:51.000
So the journey we're going to take today
is going to be through writing code,

00:03:51.120 --> 00:03:54.700
through testing in the simulator,
designing your interface,

00:03:54.950 --> 00:03:59.960
analyzing that code with instruments,
moving that code over to your iPhone,

00:04:00.100 --> 00:04:04.540
and then finally testing and
analyzing on the iPhone itself.

00:04:05.320 --> 00:04:07.360
So let's start with Xcode.

00:04:07.460 --> 00:04:09.490
Now since many of you are new,
I just want to give you a grab bag of

00:04:09.490 --> 00:04:12.550
some of the powerful features that we
have at your disposal so you understand

00:04:12.930 --> 00:04:16.390
all that the IDE is here to do for you.

00:04:16.710 --> 00:04:20.840
So when you first open up Xcode,
you're greeted with a welcome window.

00:04:20.870 --> 00:04:24.520
It's got a great jumping off point
to tons of resources to help speed

00:04:24.520 --> 00:04:26.370
you along in your development.

00:04:26.500 --> 00:04:30.940
So things such as links to
documentation for the iPhone,

00:04:31.000 --> 00:04:34.790
or even links to mailing lists that you
can rely on your peers and ask questions,

00:04:34.790 --> 00:04:37.910
and also talk with Apple engineers.

00:04:38.350 --> 00:04:43.300
The real focus on Xcode as the IDE has
evolved over the years has been to keep

00:04:43.360 --> 00:04:47.800
you focused on your source code and
not force you to get out of that mode.

00:04:47.810 --> 00:04:50.990
So we've got a very
powerful source editor.

00:04:51.290 --> 00:04:54.900
Like many IDEs out there,
we support code completion.

00:04:55.030 --> 00:04:59.190
So that as you're writing your methods,
we auto-complete for you along

00:04:59.190 --> 00:05:03.230
with parameters to help speed you
along and keep you productive.

00:05:04.860 --> 00:05:10.550
We also that you've used several
times all in the same scope.

00:05:10.790 --> 00:05:13.390
So we have this feature
we call Edit All in Scope,

00:05:13.590 --> 00:05:19.010
which simply allows you to engage and
begin renaming a set of variables right

00:05:19.090 --> 00:05:23.380
in line in your source and know that
it's going to be accurately making this

00:05:23.380 --> 00:05:27.000
change for you and only in the scope,
in your local scope.

00:05:28.580 --> 00:05:33.680
We also come with tons of built-in
documentation so that right out of

00:05:34.180 --> 00:05:37.700
the bat you can read up on all the
resources you need for iPhone development

00:05:37.700 --> 00:05:41.390
and keep these in sync with what's
on the developer website to make sure

00:05:41.390 --> 00:05:45.580
that you are always moving forward and
always have the most recent knowledge.

00:05:47.860 --> 00:05:50.550
Now, along with this,
we also make it easy for you to get

00:05:50.550 --> 00:05:55.200
the information about your projects and
about the classes that you're using.

00:05:55.200 --> 00:05:58.030
So, for example,
you can command-double-click on a

00:05:58.030 --> 00:06:02.520
symbol and jump directly to where it's
declared in a header right from within

00:06:02.520 --> 00:06:06.700
the interface and get to the media
information that you're looking for.

00:06:06.860 --> 00:06:11.780
Similarly, you can option double click on
the same symbol and will jump

00:06:11.780 --> 00:06:14.960
right to the documentation for
it in our documentation viewer.

00:06:15.070 --> 00:06:19.240
These are some pretty nice power user
features that you should use in your

00:06:19.240 --> 00:06:21.900
development to speed yourself along.

00:06:22.400 --> 00:06:26.260
We've got a powerful refactoring engine,
which lets you make large-scale

00:06:26.260 --> 00:06:29.710
structural changes to your application
with the confidence that you're

00:06:29.790 --> 00:06:34.710
not going to be changing the logical
flow of how your application works.

00:06:34.860 --> 00:06:40.400
We integrate directly with Subversion,
CVS, and Perforce for source control

00:06:40.400 --> 00:06:43.420
so that you can browse your
repositories and integrate them

00:06:43.430 --> 00:06:45.140
directly into your projects.

00:06:45.180 --> 00:06:47.310
You'll notice on the left-hand
side of the screen that we even

00:06:47.310 --> 00:06:50.030
show you when you've modified files
relative to your source route,

00:06:50.140 --> 00:06:51.140
for example.

00:06:51.180 --> 00:06:53.870
And when you've done that,
we even provide you with a

00:06:54.130 --> 00:06:57.390
convenient way of seeing just
what it is that you've changed.

00:06:58.260 --> 00:07:00.520
Now, even when you go to build,
we try to keep you

00:07:00.520 --> 00:07:01.930
engaged in your editor.

00:07:02.000 --> 00:07:04.660
So we give you message bubbles on
your build errors so that you know

00:07:04.750 --> 00:07:07.710
exactly where they're happening and
can diagnose and fix them quickly.

00:07:09.300 --> 00:07:13.040
We also integrate the debugger
directly into your editor.

00:07:13.180 --> 00:07:15.760
You'll notice at the very top of
the editor you've got a few debugger

00:07:15.860 --> 00:07:19.680
controls that you can step in,
step out, bring up your console,

00:07:19.930 --> 00:07:25.070
see your different stack frames,
all from right within your editor.

00:07:25.750 --> 00:07:27.920
What's more,
you can do this whether you're using

00:07:27.920 --> 00:07:30.940
the simulator or iPhone itself.

00:07:31.550 --> 00:07:34.240
You can also mouse over symbols
as you're debugging them,

00:07:34.240 --> 00:07:36.740
and we give you live
information about them,

00:07:36.740 --> 00:07:41.410
both on the iPhone
simulator and on iPhone.

00:07:43.060 --> 00:07:45.580
You can even set breakpoints and
modify their attributes right in

00:07:45.580 --> 00:07:46.990
your source with message bubbles.

00:07:47.100 --> 00:07:50.280
So if you need to do something like
set conditions or enable or disable,

00:07:50.330 --> 00:07:52.980
you can do that quickly and easily.

00:07:56.550 --> 00:07:59.230
And if you prefer a more
traditional debugger experience,

00:07:59.250 --> 00:08:01.160
we've even got that for you too.

00:08:01.160 --> 00:08:03.190
So that's a bit about some of
the features that we have in the

00:08:03.190 --> 00:08:04.620
editor to keep you productive.

00:08:04.700 --> 00:08:08.040
And now I'd like to bring up Rick Ballard
from the Xcode engineering team to

00:08:08.150 --> 00:08:11.740
walk you a little bit through the
project structure of an Xcode project.

00:08:11.780 --> 00:08:12.040
Rick?

00:08:12.040 --> 00:08:13.740
Thanks, Mike.

00:08:19.170 --> 00:08:24.040
In Xcode, new projects are born in
the new project assistant.

00:08:24.180 --> 00:08:29.110
The new project assistant gives you a
set of out-of-the-box templates that you

00:08:29.110 --> 00:08:34.080
can just create and build and go and have
something useful to start working on,

00:08:34.080 --> 00:08:35.330
nothing needed.

00:08:35.340 --> 00:08:38.760
You're going to want to start
out by choosing the template

00:08:38.800 --> 00:08:42.150
most similar to the sort of
application that you want to design.

00:08:42.180 --> 00:08:45.740
And once you've created it,
you'll be taken to Xcode's

00:08:45.740 --> 00:08:48.680
new project window,
or Xcode's project window.

00:08:49.060 --> 00:08:51.890
This is your hub in Xcode.

00:08:52.110 --> 00:08:55.650
You can see this project comes
with all the sources needed to

00:08:55.650 --> 00:09:00.700
build the type of application that
you chose right out of the box.

00:09:01.170 --> 00:09:04.600
A new project comes with one target,
seen on the left-hand

00:09:04.690 --> 00:09:06.140
side in the Targets group.

00:09:06.330 --> 00:09:10.700
And your target knows how to take that
source code that your project has and

00:09:10.700 --> 00:09:13.890
turn it into your iPhone application.

00:09:15.130 --> 00:09:17.760
If you want to add more
targets to your project,

00:09:17.900 --> 00:09:19.760
you can use the new Target Assistant.

00:09:19.900 --> 00:09:22.770
And in particular,
you may want to add a static

00:09:22.850 --> 00:09:27.140
library target to your project
to enable you to share code at

00:09:27.140 --> 00:09:32.020
development time between multiple
applications that you're developing.

00:09:33.040 --> 00:09:35.550
When you add a new
target to your project,

00:09:35.550 --> 00:09:40.130
it'll show up in the targets
group on the left-hand side.

00:09:41.670 --> 00:09:47.990
Xcode projects are the container for all
your source code and related information.

00:09:48.100 --> 00:09:51.860
And your projects contain their targets.

00:09:51.960 --> 00:09:57.450
An Xcode target is a blueprint for
taking that source code and turning

00:09:57.650 --> 00:10:02.590
it into one of your products,
like a library or an application.

00:10:04.780 --> 00:10:07.810
You'll see in Xcode,
in the upper left-hand corner,

00:10:07.850 --> 00:10:11.170
there's an icon that
represents your project.

00:10:11.270 --> 00:10:14.740
Your project provides you
access to all the source code

00:10:15.210 --> 00:10:19.600
that that project manages,
and you can browse it, rearrange it,

00:10:19.600 --> 00:10:22.100
and organize it as you see fit.

00:10:22.870 --> 00:10:27.460
The targets in that project operate
on the project's source code in

00:10:27.460 --> 00:10:29.800
build phases that process it.

00:10:29.800 --> 00:10:32.520
For example,
a compile sources build phase,

00:10:32.520 --> 00:10:38.280
which runs a compiler on all the source
code files to produce the output.

00:10:39.640 --> 00:10:43.650
You can see these build phases
contain the same file references

00:10:43.650 --> 00:10:45.890
that your project vends.

00:10:46.860 --> 00:10:50.820
Beyond just files and targets,
the project window is also your hub

00:10:51.160 --> 00:10:53.660
for more detailed configuration.

00:10:53.730 --> 00:10:58.670
If you choose the project icon in the
upper left and double click or use

00:10:58.670 --> 00:11:02.500
the Get Info button on the toolbar,
you'll be taken to Xcode's

00:11:02.500 --> 00:11:04.590
project settings window.

00:11:04.930 --> 00:11:08.640
Project Settings gives you access
to the high-level core settings

00:11:09.040 --> 00:11:11.740
that affect your entire project.

00:11:12.690 --> 00:11:16.750
Likewise, if you double-click or
get info on a target icon,

00:11:17.050 --> 00:11:20.800
you'll be taken to the core settings
that affect just that target.

00:11:20.950 --> 00:11:24.410
Things like what other targets
it depends on at build time,

00:11:24.430 --> 00:11:27.260
so when you build one,
the other will build automatically.

00:11:27.360 --> 00:11:30.900
Or what libraries that target links.

00:11:31.360 --> 00:11:35.940
The Build tab at either the project
or target level gives you access to

00:11:35.940 --> 00:11:41.180
Xcode's advanced build property interface
for more detailed customization.

00:11:41.230 --> 00:11:46.360
You can set these properties on the
project level to affect all your targets,

00:11:46.370 --> 00:11:51.390
or you can set it on an individual
target to just affect that target.

00:11:52.090 --> 00:11:54.900
To give you a taste of this,
I'd like to introduce Clark Cox.

00:11:54.980 --> 00:11:59.550
He's going to build us and run an
Xcode project from the template.

00:12:11.340 --> 00:12:14.310
I'm going to show you what it takes
to get started building your first

00:12:14.310 --> 00:12:16.300
iPhone application with Xcode.

00:12:16.300 --> 00:12:18.300
I'm going to launch Xcode.

00:12:18.400 --> 00:12:21.170
Then I'm going to create a new
project by going to the File menu

00:12:21.170 --> 00:12:23.230
and choosing New Project.

00:12:23.300 --> 00:12:26.160
This is the familiar New Project Wizard.

00:12:26.300 --> 00:12:29.300
I'm going to create a
utility application.

00:12:29.330 --> 00:12:34.290
A utility application is a program sort
of like weather or stocks on the iPhone

00:12:34.300 --> 00:12:38.500
where data is displayed on one view,
and the user is allowed to

00:12:38.500 --> 00:12:43.300
switch the view to a settings
view on the other side.

00:12:43.400 --> 00:12:48.090
So I'm going to choose that,
name my project,

00:12:51.290 --> 00:12:51.820
And there it is.

00:12:51.820 --> 00:12:53.180
It's been created.

00:12:53.220 --> 00:12:57.560
To show that this is a complete
application directly out of the box,

00:12:57.560 --> 00:13:01.800
I'm going to build and run
it by going to the Build menu

00:13:01.800 --> 00:13:03.740
and choosing Build and Run.

00:13:04.070 --> 00:13:08.330
Xcode compiles all of my sources,
packages them up, links them,

00:13:08.480 --> 00:13:09.500
launches the simulator.

00:13:09.500 --> 00:13:14.000
Because I do not have a device attached,
it knows to do this automatically.

00:13:14.120 --> 00:13:17.430
So here we have the application
running in the simulator.

00:13:17.760 --> 00:13:22.750
All of the functionality you would
expect from such an application is there.

00:13:24.050 --> 00:13:29.820
Now I'm going to go back to Xcode,
filter to find my root view controller.

00:13:32.070 --> 00:13:35.470
And then use the symbol pop-up
to find the toggle view method.

00:13:35.720 --> 00:13:39.190
This is the method responsible
for actually flipping the view.

00:13:39.760 --> 00:13:42.560
I'm going to place a breakpoint
by clicking in the gutter.

00:13:42.750 --> 00:13:45.660
Xcode knows by virtue of the fact
that I've placed a breakpoint

00:13:45.750 --> 00:13:46.800
that I'd like to start debugging.

00:13:46.800 --> 00:13:50.460
I don't have to relaunch the application,
I don't have to rebuild it,

00:13:50.580 --> 00:13:52.990
the debugger attaches
if it isn't already,

00:13:53.060 --> 00:13:53.880
and we're good to go.

00:13:55.020 --> 00:13:59.480
This time, when I flip the view,
I get dropped back into Xcode,

00:13:59.570 --> 00:14:01.520
and you see my breakpoint was hit.

00:14:01.670 --> 00:14:05.520
All of the features that Mike mentioned
earlier are available to me.

00:14:05.520 --> 00:14:12.590
I can mouse over and inspect variables,
I can step and continue all the things

00:14:12.590 --> 00:14:15.600
you would expect from the Xcode debugger.

00:14:17.160 --> 00:14:18.250
Thank you very much.

00:14:18.400 --> 00:14:21.100
And now, back to slides.

00:14:21.110 --> 00:14:24.450
Thanks, Clark.

00:14:29.810 --> 00:14:32.100
Later this week,
we have some more sessions that will

00:14:32.100 --> 00:14:33.830
go much more in-depth with Xcode.

00:14:33.930 --> 00:14:36.330
Later today,
if you've used other IDEs like

00:14:36.330 --> 00:14:39.330
Visual Studio or Eclipse,
I highly recommend the Xcode

00:14:39.400 --> 00:14:44.140
for Visual Studio and Eclipse
Developer session at 3:30 in Marina.

00:14:44.140 --> 00:14:46.360
And tomorrow,
we have two more sessions that will go

00:14:46.360 --> 00:14:51.940
into more of the power user features
to help you get the most out of Xcode.

00:14:51.940 --> 00:14:54.160
Xcode is your hub for
the developer tools.

00:14:54.160 --> 00:14:56.050
It's where you'll start,
where you'll probably

00:14:56.050 --> 00:14:58.460
spend most of your time,
and you'll find that it integrates

00:14:58.570 --> 00:15:01.900
well with all of our other tools,
leading you to them as you need them.

00:15:03.960 --> 00:15:07.380
So we started out by
putting together some code,

00:15:07.400 --> 00:15:10.090
and Clark has showed us how
to take that code and launch

00:15:10.090 --> 00:15:11.740
it up in iPhone Simulator.

00:15:11.850 --> 00:15:15.070
Let's go a little more in
depth on what exactly iPhone

00:15:15.620 --> 00:15:17.780
Simulator is and how it works.

00:15:18.100 --> 00:15:21.340
iPhone Simulator is Apple's newest
addition to the Developer Tools,

00:15:21.450 --> 00:15:24.040
and it's designed to get you
up and running with your iPhone

00:15:24.040 --> 00:15:27.210
application as quickly as possible.

00:15:27.320 --> 00:15:30.490
You should know that iPhone
Simulator is an API simulator.

00:15:30.740 --> 00:15:34.080
It is not a hardware simulator.

00:15:34.420 --> 00:15:38.140
When you build your iPhone
application for iPhone Simulator,

00:15:38.260 --> 00:15:41.660
your iPhone application
is an Intel binary,

00:15:41.680 --> 00:15:47.060
and it gets access to all the powerful
hardware in your development Macintosh.

00:15:47.210 --> 00:15:52.570
It runs, your iPhone app runs as
another process on your Mac,

00:15:52.570 --> 00:15:54.580
just like a Mac app.

00:15:56.010 --> 00:15:58.960
You may be used to,
if you've done any Mac development,

00:15:59.010 --> 00:16:02.860
AppKit, Apple's user interface
framework for Mac OS X.

00:16:03.010 --> 00:16:07.010
AppKit sits on top of other frameworks,
lower level like Foundation,

00:16:07.300 --> 00:16:09.480
Core Foundation,
and they work together to

00:16:09.490 --> 00:16:13.240
provide the Cocoa Stack for Mac.

00:16:13.590 --> 00:16:15.710
iPhone OS is very similar.

00:16:15.840 --> 00:16:20.410
We have a different higher-level
framework called UI Kit.

00:16:21.320 --> 00:16:26.470
UIKit sits on top of iPhone OS's
versions of the same lower-level

00:16:26.470 --> 00:16:29.260
frameworks like Foundation.

00:16:29.450 --> 00:16:32.360
These frameworks are for
the most part similar,

00:16:32.520 --> 00:16:35.090
but built for iPhone OS.

00:16:35.470 --> 00:16:38.310
When you build for iPhone Simulator,
you're actually using

00:16:38.470 --> 00:16:40.100
a hybrid of the two.

00:16:40.210 --> 00:16:45.370
iPhone Simulator takes UIKit and
layers it on top of Mac OS X's

00:16:45.480 --> 00:16:48.240
foundation and lower-level frameworks.

00:16:48.400 --> 00:16:51.640
So when your iPhone app
runs in iPhone Simulator,

00:16:51.740 --> 00:16:54.360
it's using a specially
simulator-built version of UIKit,

00:16:54.500 --> 00:16:59.460
but using the same low-level frameworks
that all your Mac OS X apps use.

00:16:59.800 --> 00:17:02.410
For the most part,
this is transparent because most of

00:17:02.440 --> 00:17:05.460
iPhone OS's low-level frameworks,
like Foundation,

00:17:05.500 --> 00:17:09.060
offer just about the same
APIs as Mac OS X's Foundation.

00:17:09.060 --> 00:17:14.160
So your iPhone app can go from Simulator
to iPhone OS and not notice a difference.

00:17:14.320 --> 00:17:19.890
In a few cases, like Security Framework,
Mac OS X offers a different

00:17:19.970 --> 00:17:22.380
set of APIs than iPhone OS.

00:17:23.100 --> 00:17:26.700
When your iPhone app needs to
use a framework like Security,

00:17:26.700 --> 00:17:33.090
you'll want to write code to both use
iPhone OS's API and Mac OS X's API.

00:17:33.100 --> 00:17:36.690
You can conditionally compile
this API using a macro like

00:17:36.780 --> 00:17:38.600
Target iPhone Simulator.

00:17:38.600 --> 00:17:43.800
So when your code runs for iPhone
Simulator using Mac OS X's Security,

00:17:43.800 --> 00:17:46.800
you'll use one set of API.

00:17:47.030 --> 00:17:50.700
and when it runs on iPhone OS,
you'll use a different set of API,

00:17:50.840 --> 00:17:54.060
and you can go back and
forth with no problem.

00:17:55.110 --> 00:17:57.920
iPhone Simulator's biggest
advantage is that it gives you

00:17:58.000 --> 00:17:59.820
incredibly quick turnaround.

00:17:59.840 --> 00:18:04.080
You can go from debugging your iPhone
Simulator app to making new code changes,

00:18:04.100 --> 00:18:08.660
building, and right back in the debugger
with extremely low overhead.

00:18:09.360 --> 00:18:13.050
iPhone Simulator also lets you use
all the great built-in debugging

00:18:13.050 --> 00:18:17.200
goodness that you may be used to for
Mac OS X or you may be about to discover.

00:18:17.370 --> 00:18:20.800
Goodness like DTrace,
the lightweight system tracing utility

00:18:20.800 --> 00:18:25.720
which lets you build probes that
give detailed information about your

00:18:25.800 --> 00:18:28.200
process without affecting performance.

00:18:28.200 --> 00:18:31.530
And it's Zombies,
which let you keep some information

00:18:31.580 --> 00:18:36.190
behind when your objects are deallocated
to help you track over-release problems

00:18:36.190 --> 00:18:39.200
or problems of touching dead objects.

00:18:39.350 --> 00:18:42.070
Or GuardMalloc,
which lets you easily track

00:18:42.200 --> 00:18:46.180
down buffer overruns and other
memory corruption issues.

00:18:46.200 --> 00:18:50.840
All these and more are
described in TechNote 2124:

00:18:50.840 --> 00:18:53.520
Debugging Magic,
which contains a host of useful

00:18:53.520 --> 00:18:57.760
tips and tricks for debugging
Mac OS X applications that you can apply

00:18:57.760 --> 00:19:03.080
directly to your iPhone applications
by running them in iPhone Simulator.

00:19:04.090 --> 00:19:06.500
Once you're up and running
with iPhone Simulator,

00:19:06.590 --> 00:19:09.500
you're going to want to start
building your interface.

00:19:09.690 --> 00:19:12.740
Apple offers a first-class
interface design tool,

00:19:12.840 --> 00:19:15.610
and we call it Interface Builder.

00:19:15.730 --> 00:19:20.110
Interface Builder supports Koko's
model-view-controller paradigm,

00:19:20.170 --> 00:19:24.700
and in particular,
is designed to let you lay out your views

00:19:24.850 --> 00:19:28.070
and connect them to your controllers.

00:19:28.530 --> 00:19:33.110
Interface Builder gives you both
reusability and flexibility.

00:19:33.280 --> 00:19:37.490
Reusability because it makes it easy to
share your custom view and controller

00:19:37.490 --> 00:19:39.920
subclasses and use them as appropriate.

00:19:40.090 --> 00:19:44.790
And flexibility because it's a great tool
for getting up with rapid prototyping

00:19:45.050 --> 00:19:47.790
and iterating quickly as needed.

00:19:48.320 --> 00:19:49.600
This is Interface Builder.

00:19:49.720 --> 00:19:53.960
Out of the box,
it's very easy to use and very addictive.

00:19:54.000 --> 00:19:57.730
Interface Builder offers a
"what you see is what you get"

00:19:57.890 --> 00:20:01.780
style of interface design,
where views automatically grow

00:20:01.780 --> 00:20:06.500
to fit the space as needed and
snap into place with smart guides.

00:20:07.710 --> 00:20:09.740
In Interface Builder,
you're both going to want

00:20:09.740 --> 00:20:14.600
to choose your views,
lay them out where you want them to be,

00:20:14.770 --> 00:20:17.600
and then connect your objects together.

00:20:17.720 --> 00:20:21.440
To establish the relationships between
your objects and your interface,

00:20:21.580 --> 00:20:26.370
you use Interface Builder's connections,
like here, where we just connected our

00:20:26.370 --> 00:20:29.290
view object to its controller.

00:20:30.530 --> 00:20:33.860
Interface Builder's main
document window is your ZIB file.

00:20:33.960 --> 00:20:35.510
X-I-B, or ZIB.

00:20:35.960 --> 00:20:40.510
It contains the top-level objects
that make up your interface.

00:20:41.610 --> 00:20:45.410
Your ZIP file contains a set of
instructions for instantiating the

00:20:45.440 --> 00:20:49.680
objects that make up your interface
and setting the properties on them

00:20:49.680 --> 00:20:51.500
to make them behave as you want.

00:20:51.500 --> 00:20:55.500
They don't contain the code
to make that interface run.

00:20:55.520 --> 00:21:00.500
Instead, that code comes from UIKit or
your own custom subclasses.

00:21:00.840 --> 00:21:04.580
When you build, your ZIP file is
compiled into a Nib file,

00:21:05.010 --> 00:21:08.800
which is a compiled representation
of the instructions to instantiate

00:21:08.800 --> 00:21:12.210
those objects and set the properties.

00:21:12.410 --> 00:21:17.800
What this means is that Interface
Builder is not a code gen tool.

00:21:18.090 --> 00:21:21.180
It lets you specify what you want,
and the frameworks do

00:21:21.230 --> 00:21:23.180
all the heavy lifting.

00:21:24.300 --> 00:21:26.760
When you start out in Interface
Builder's document window,

00:21:26.760 --> 00:21:28.240
it'll come up in icon view.

00:21:28.400 --> 00:21:30.960
But when you're developing for iPhone OS,
you may find it useful

00:21:31.050 --> 00:21:33.730
to switch to list view,
because instead of just displaying

00:21:33.730 --> 00:21:38.900
the top-level objects in your nib,
it will display the complete hierarchy

00:21:39.140 --> 00:21:44.610
that makes up all your instances and lets
you drill down and set what you want.

00:21:46.380 --> 00:21:50.780
Interface Builder's library offers you
all the views that you might want to

00:21:50.780 --> 00:21:53.150
use to drag right into your interface.

00:21:53.320 --> 00:21:57.770
You can easily filter if you know
exactly what you're looking for,

00:21:57.770 --> 00:22:02.280
or you can use the library's built-in
categorizations to help you quickly

00:22:02.280 --> 00:22:07.350
browse through the different objects
that we offer for your interface.

00:22:10.270 --> 00:22:13.480
Once you've got an object in your nib,
if you inspect it,

00:22:13.540 --> 00:22:19.450
you'll get properties at the beginning
that allow you to specify how your object

00:22:19.450 --> 00:22:22.100
should behave and how it should look.

00:22:22.910 --> 00:22:27.060
An overview of all its connections
we call outlets and actions,

00:22:27.450 --> 00:22:31.180
which are the relationships
between the objects in your Nib.

00:22:31.800 --> 00:22:35.590
A smart sizing inspector,
which allows you to fine-tune placement

00:22:35.900 --> 00:22:41.140
and specify how auto-sizing rules will
work for when your interface rotates

00:22:41.540 --> 00:22:44.530
or sub-superviews expand and contract.

00:22:45.460 --> 00:22:47.320
and class management.

00:22:47.380 --> 00:22:51.510
You probably don't just want to use
all of the generic superclass objects

00:22:51.510 --> 00:22:52.680
that come in Interface Builder.

00:22:52.680 --> 00:22:55.780
You want to write your own
custom subclasses in many cases,

00:22:55.850 --> 00:22:57.960
your own view subclass, for example.

00:22:58.030 --> 00:23:01.040
And when you do,
you specify what subclass of

00:23:01.040 --> 00:23:05.180
the interface object you dragged
in that you want to use in the

00:23:05.180 --> 00:23:07.600
class field of this inspector.

00:23:08.080 --> 00:23:10.940
Interface Builder will take your
class name and talk to Xcode for

00:23:10.940 --> 00:23:15.160
you automatically to pull out of
the header file what actions and

00:23:15.160 --> 00:23:18.360
what outlets your subclass supports.

00:23:19.660 --> 00:23:22.560
Interface Builder stays in
sync with Xcode all the time.

00:23:22.560 --> 00:23:26.210
So as you make edits to your subclasses,
Interface Builder will know and

00:23:26.260 --> 00:23:30.540
present the new outlets and actions
and behave as you would like.

00:23:31.110 --> 00:23:33.540
Interface Builder is a great
way to design your interface.

00:23:33.640 --> 00:23:35.130
It's really easy to start using.

00:23:35.420 --> 00:23:37.950
And frankly,
Interface Builder is a lot of fun.

00:23:37.960 --> 00:23:39.400
It's really a cool tool.

00:23:39.490 --> 00:23:42.800
To show you exactly how much fun,
I'd like to invite Clark back up

00:23:42.880 --> 00:23:44.350
to demo building us an interface.

00:23:47.190 --> 00:23:51.990
Thanks, Rick.

00:24:02.400 --> 00:24:05.080
Okay, I've got a simple project here.

00:24:05.080 --> 00:24:06.970
I want to design an interface for it.

00:24:07.060 --> 00:24:09.590
To get started,
I'll use the Groups and Files

00:24:10.060 --> 00:24:12.120
tree to navigate to my ZIP file.

00:24:12.210 --> 00:24:16.790
If I double-click on that,
it will launch Interface Builder.

00:24:18.940 --> 00:24:21.460
Here we have my main ZIP file.

00:24:21.560 --> 00:24:24.790
It's a pretty sparse file at this point,
where I'd run this application,

00:24:24.810 --> 00:24:28.100
it would do nothing but
display a blank white window.

00:24:28.220 --> 00:24:30.300
So we'll have to add some content.

00:24:30.450 --> 00:24:33.800
The first thing I need is a view
controller to manage my views.

00:24:33.880 --> 00:24:37.730
I'll go to the library,
select an appropriate instance,

00:24:37.730 --> 00:24:40.490
drag it out, and drop it in my document.

00:24:40.680 --> 00:24:43.200
That instantiates the object,
and as you can see,

00:24:43.200 --> 00:24:47.310
it opens a window ready
to receive my view.

00:24:47.800 --> 00:24:49.730
First thing I need to do
with this view controller.

00:24:49.920 --> 00:24:52.850
As Rick mentioned,
we don't necessarily want

00:24:52.940 --> 00:24:56.800
to use the generic class
offered by Interface Builder.

00:24:56.920 --> 00:24:59.560
So I'm going to,
with the view controller selected,

00:24:59.660 --> 00:25:02.610
go to the Identity tab of the Inspector.

00:25:02.830 --> 00:25:05.620
My project has a class
called My View Controller.

00:25:05.690 --> 00:25:06.520
I'll start typing.

00:25:06.670 --> 00:25:09.140
And as you can see,
Interface Builder knows about

00:25:09.140 --> 00:25:12.630
that class by virtue of it
being in my Xcode project.

00:25:12.810 --> 00:25:16.200
That's all it takes to change
the class of this instance.

00:25:16.450 --> 00:25:20.200
Now, to add actual content,
I need to find a view to

00:25:20.320 --> 00:25:22.670
place in the view controller,
so I'll go over to the

00:25:22.670 --> 00:25:24.520
library and start searching.

00:25:27.360 --> 00:25:31.930
Again, I grab the appropriate instance,
drag it out, and drop it in place.

00:25:32.130 --> 00:25:34.990
As you can see,
Interface Builder sizes it

00:25:35.040 --> 00:25:40.290
automatically from the space available
and snaps it in place as I drop it.

00:25:41.110 --> 00:25:43.320
Now to add some more
visually interesting content.

00:25:43.550 --> 00:25:46.260
In this application,
I'd like to have an Edit field in

00:25:46.260 --> 00:25:53.090
a bar across the top of the view
and a table view in the bottom.

00:25:53.380 --> 00:26:00.400
So I'll go find the navigation
bar that I want to put at the top.

00:26:00.400 --> 00:26:03.150
Again, grab an instance.

00:26:05.100 --> 00:26:09.600
Grab an instance and drop it into place.

00:26:09.600 --> 00:26:13.030
Now for the Edit field,
it's the same process.

00:26:13.320 --> 00:26:19.440
I search for a text field,
grab the instance, drop it into place.

00:26:21.410 --> 00:26:25.220
Now, Interface Builder knows where
views can go in this bar,

00:26:25.220 --> 00:26:27.900
so it does that automatically for me.

00:26:28.010 --> 00:26:30.320
But I'd rather not have it.

00:26:31.000 --> 00:26:37.040
I'd rather not have it here on the side,
so I'll do it again.

00:26:39.260 --> 00:26:42.490
Do it again and drop it into place.

00:26:42.570 --> 00:26:47.540
Now that view's in place and there's
one issue that you may not be aware

00:26:47.540 --> 00:26:49.600
of looking directly at this view.

00:26:49.760 --> 00:26:52.860
What happens when the device is rotated?

00:26:53.020 --> 00:26:57.010
Well, Interface Builder allows me to
simulate that by clicking here.

00:26:58.050 --> 00:26:59.660
Now, as you can see,
that field looks awfully

00:26:59.660 --> 00:27:02.680
small for the space available.

00:27:02.770 --> 00:27:06.570
To remedy that, with the field selected,

00:27:07.070 --> 00:27:10.530
I'll go to the size tab of the inspector.

00:27:10.690 --> 00:27:14.210
I want to make sure that the
field maintains a constant

00:27:14.240 --> 00:27:18.510
distance from the left,
top, and right sides of the field.

00:27:18.580 --> 00:27:21.930
I also want to make sure
that the text field expands

00:27:21.930 --> 00:27:24.400
when its parent view expands.

00:27:25.600 --> 00:27:29.740
Now, when I simulate the rotation again,
you can see it automatically

00:27:29.740 --> 00:27:33.130
expanded to fill the space.

00:27:33.240 --> 00:27:35.600
Now, I need to add the actual table view.

00:27:35.720 --> 00:27:37.400
So again,

00:27:38.870 --> 00:27:43.360
I'll search in the library,
find the instance I want, drag it out,

00:27:43.410 --> 00:27:45.340
and drop it into place.

00:27:45.340 --> 00:27:48.260
Interface Builder sizes it
appropriately and gives me guidelines

00:27:48.260 --> 00:27:49.360
as to where I could drop it.

00:27:52.670 --> 00:27:55.440
Now the interface is visually
complete at this point,

00:27:55.440 --> 00:27:58.200
and if I wanted to see what it
would look like on an actual iPhone,

00:27:58.350 --> 00:28:03.410
Interface Builder allows me to use the
simulator to simulate the interface.

00:28:03.690 --> 00:28:07.900
This launches a test harness in
the simulator with my interface.

00:28:07.950 --> 00:28:11.850
I can interact with it just as
I would any iPhone application.

00:28:13.010 --> 00:28:17.440
The keyboard comes up when
I click the text field.

00:28:17.520 --> 00:28:19.040
And so on.

00:28:19.120 --> 00:28:23.390
Okay, so I'm going to quit the simulator
now and return to Interface Builder.

00:28:23.820 --> 00:28:28.040
Now the objects in my nib, or in my zib,
need to know about each other.

00:28:28.040 --> 00:28:32.100
I need to make sure to tell the app
delegate which view controller to load,

00:28:32.210 --> 00:28:32.650
and so on.

00:28:32.770 --> 00:28:36.350
To do that,
I'll control drag from the app

00:28:36.480 --> 00:28:40.320
delegate to the view controller and
choose the view controller outlet.

00:28:41.450 --> 00:28:58.060
Likewise, my view controller needs
to know about its views.

00:28:58.060 --> 00:28:58.060
So I'll control drag from the
view controller to the table view

00:28:58.060 --> 00:28:58.060
and choose the table view outlet.

00:28:58.060 --> 00:28:58.060
And again,
from the view controller to the edit

00:28:58.060 --> 00:28:58.060
field and choose the text field outlet.

00:28:59.990 --> 00:29:03.760
Now the table view itself needs
to know where to get its data and

00:29:03.760 --> 00:29:06.500
whom to ask about certain behavior.

00:29:06.610 --> 00:29:11.280
This time, I'll Control-drag from the
table to the view controller,

00:29:11.400 --> 00:29:17.940
connect the data source outlet,
and again, for the delegate outlet.

00:29:18.370 --> 00:29:20.300
Now, one final connection
that needs to be made,

00:29:20.490 --> 00:29:25.180
I need to tell my edit field what to
do when the user has entered some text.

00:29:25.350 --> 00:29:30.770
So I'll Control-click on the Edit field
and connect the Did End On Exit event

00:29:31.970 --> 00:29:35.600
to my view controller's Add Row method.

00:29:35.750 --> 00:29:39.040
At this point,
with all the connections in place,

00:29:39.110 --> 00:29:47.290
I'll Save, return to Xcode, Build and Go,

00:29:48.910 --> 00:29:50.990
And there's my application
running the simulator.

00:29:51.050 --> 00:29:53.200
I can, again,
interact with it just as I would

00:29:53.200 --> 00:29:56.410
any other iPhone application.

00:29:59.720 --> 00:30:02.250
and that's how to use Interface
Builder to design your iPhone

00:30:02.450 --> 00:30:03.590
application's interface.

00:30:03.680 --> 00:30:06.480
Thank you and back to slides.

00:30:11.700 --> 00:30:14.700
All right, thank you, Clark.

00:30:14.710 --> 00:30:17.380
So as you can see,
Interface Builder does a great job

00:30:17.380 --> 00:30:21.400
at helping you create your interface,
lay it out on your canvas,

00:30:21.400 --> 00:30:24.580
and then connect all the logic together
to make sure that it actually works.

00:30:24.580 --> 00:30:28.080
We've got a couple sessions this
week planned on Interface Builder

00:30:28.080 --> 00:30:29.940
to really help speed you along.

00:30:29.940 --> 00:30:32.350
So later on today,
we have Designing Applications

00:30:32.430 --> 00:30:36.350
with Interface Builder,
which will focus on iPhone development

00:30:36.350 --> 00:30:40.300
and help you understand a lot of the
core principles behind Interface Builder.

00:30:40.300 --> 00:30:44.290
It can seem like it's a bit of magic
if you're not used to tools like this,

00:30:44.410 --> 00:30:47.640
but it's actually really
powerful and very deterministic,

00:30:47.640 --> 00:30:48.380
I promise.

00:30:48.380 --> 00:30:53.240
We also have later in the week,
on Thursday, Mastering Interface Builder.

00:30:53.350 --> 00:30:56.350
So after you've had a chance in the
early part of these first few days to

00:30:56.350 --> 00:30:59.800
get a good feel for Interface Builder,
we'll help you kick that up a notch

00:30:59.800 --> 00:31:02.290
and really take your knowledge
to the next level so that you

00:31:02.290 --> 00:31:05.320
can be the most productive as
possible with Interface Builder.

00:31:07.000 --> 00:31:10.550
Okay, so we've talked about
designing your interface,

00:31:10.750 --> 00:31:13.440
but now let's talk about
analyzing your application.

00:31:13.440 --> 00:31:17.300
Now, for the large majority of you
who are used to doing development

00:31:17.300 --> 00:31:20.000
in a mobile environment,
this is a very important topic,

00:31:20.000 --> 00:31:21.840
so I'm sure that you're used to.

00:31:21.840 --> 00:31:25.890
You really need to focus on squeezing
as much speed as possible out of the

00:31:25.890 --> 00:31:28.300
applications that you're running on.

00:31:28.300 --> 00:31:31.000
And it's the same story on iPhone.

00:31:31.000 --> 00:31:36.410
Performance is really,
really important on the iPhone.

00:31:36.900 --> 00:31:39.060
I can't stress that enough.

00:31:39.140 --> 00:31:42.460
We make it easy to integrate
performance into your workflow,

00:31:42.570 --> 00:31:46.820
and it's essential that you do so to
make sure that you're shipping the best

00:31:47.000 --> 00:31:49.420
possible application for your customers.

00:31:49.420 --> 00:31:51.560
When you look at it,
if you've got two applications

00:31:51.590 --> 00:31:54.420
that do the same thing,
which one is the customer going to pick?

00:31:54.640 --> 00:31:57.140
The one that's slow or
the one that's fast?

00:31:57.140 --> 00:31:59.800
So really make sure that
you're integrating this in your

00:32:00.100 --> 00:32:01.810
development cycle from the start.

00:32:02.060 --> 00:32:05.510
Now, it's tempting if you're used
to desktop development to just

00:32:05.510 --> 00:32:09.410
kind of fall into this lull of,
well, the desktop will take care of it.

00:32:09.490 --> 00:32:13.120
There's lots of powerful hardware
out there that obviate a lot of the

00:32:13.120 --> 00:32:14.600
problems that I might see otherwise.

00:32:14.600 --> 00:32:20.150
So, for instance, your users might have
more memory on a desktop,

00:32:20.370 --> 00:32:24.850
and you're not going to notice issues
such as thrashing or just poor usage

00:32:24.850 --> 00:32:27.180
of memory quite as much on the desktop.

00:32:28.480 --> 00:32:33.890
You might have algorithms that
are way too complex and don't

00:32:33.890 --> 00:32:35.990
scale well with additional data.

00:32:36.010 --> 00:32:40.350
Again, you'll see these on the desktop,
but the hardware will

00:32:40.350 --> 00:32:42.530
often just chew through it.

00:32:42.890 --> 00:32:45.300
And there's also wasteful I/O.

00:32:45.330 --> 00:32:47.470
It's not a big deal on the
desktop a lot of the times,

00:32:47.470 --> 00:32:48.800
although it does hurt.

00:32:48.900 --> 00:32:51.960
It's a big deal when you start talking
about flash memory in particular.

00:32:52.250 --> 00:32:56.600
So you need to be very aware of
these particular issues as you

00:32:56.600 --> 00:32:59.500
dive in to do performance analysis.

00:32:59.640 --> 00:33:03.710
And it's important to remember
that the iPhone is not your Mac.

00:33:03.930 --> 00:33:04.950
It's not your Mac desktop.

00:33:04.960 --> 00:33:06.630
It's not your Mac laptop.

00:33:06.710 --> 00:33:10.700
It's incredibly powerful for its size.

00:33:10.750 --> 00:33:14.700
But remember,
it's not a 64-bit Core 2 Duo.

00:33:15.700 --> 00:33:19.310
So with performance being so important,
it's important that you have a

00:33:19.320 --> 00:33:23.950
tool to help you along the way to
make sure that your analysis is

00:33:23.950 --> 00:33:26.820
both easy to do and comprehensive.

00:33:27.040 --> 00:33:30.600
So to help you with that,
we have a tool that we call Instruments.

00:33:30.640 --> 00:33:32.640
As I mentioned before,
Instruments helps bring

00:33:32.920 --> 00:33:34.900
context to your analysis.

00:33:34.940 --> 00:33:39.150
It helps you understand what your
application as a whole is doing.

00:33:39.400 --> 00:33:42.350
Now, in traditional performance analysis,
you tend to find yourself

00:33:42.350 --> 00:33:44.190
usually looking at one thing.

00:33:44.290 --> 00:33:45.780
So, for example,
you might be looking at the

00:33:45.940 --> 00:33:48.090
timing of your application,
seeing where you're spending

00:33:48.140 --> 00:33:49.000
time in your call stack.

00:33:49.080 --> 00:33:53.820
And often, what you end up with is just a
series of data along the way.

00:33:53.820 --> 00:33:57.040
Things pop up, you notice them,
you deal with them.

00:33:57.520 --> 00:34:00.280
But oftentimes, it's not the whole story.

00:34:00.510 --> 00:34:06.460
And what Instruments helps you to do
is to take data from multiple sources,

00:34:06.510 --> 00:34:10.050
record them at the same
time in your application,

00:34:10.250 --> 00:34:13.900
and correlate that data together
so that you can be sure that you're

00:34:14.000 --> 00:34:17.400
honing in on exactly what the
problem is in your application.

00:34:19.130 --> 00:34:23.920
Now the interface for Instruments
is really rather welcoming.

00:34:23.920 --> 00:34:26.990
First,
we start you off with a set of templates.

00:34:27.220 --> 00:34:31.000
We have Mac OS X templates for
doing analysis on Mac OS X,

00:34:31.000 --> 00:34:33.300
and also an iPhone set of templates.

00:34:33.450 --> 00:34:36.490
And you'll notice we've got some
commonality between the two,

00:34:36.690 --> 00:34:42.060
things such as Sampler, Activity Monitor,
Leaks, Object Alloc.

00:34:42.170 --> 00:34:45.330
These are all tools that you can
use to analyze things like memory,

00:34:45.600 --> 00:34:47.940
like where you're spending
time in your application.

00:34:48.050 --> 00:34:51.600
But the iPhone also adds a few
instruments for you to do your analysis.

00:34:51.720 --> 00:34:55.490
You'll notice we have a
Core Animation Instrument template,

00:34:55.490 --> 00:34:58.100
as well as an OpenGL ES template.

00:34:58.220 --> 00:35:00.980
So you can make sure that you're
getting the most out of the

00:35:00.980 --> 00:35:02.680
graphics hardware on iPhone.

00:35:02.990 --> 00:35:05.940
So you simply select an
instrument from this template,

00:35:05.940 --> 00:35:10.540
and we populate what we call your trace
document directly with that instrument.

00:35:10.590 --> 00:35:12.870
Now from there,
you have a lot of options in

00:35:12.960 --> 00:35:16.140
configuring the kind of data that
you want to get from that instrument.

00:35:16.190 --> 00:35:22.300
It varies from instrument to instrument,
depending on what data

00:35:22.300 --> 00:35:24.060
is available to it.

00:35:24.130 --> 00:35:26.500
You can also, though,
control how you want to

00:35:26.500 --> 00:35:27.920
view that data as well.

00:35:28.460 --> 00:35:32.290
Now, beyond just these templates,
we also have a wide library

00:35:32.290 --> 00:35:36.610
so that you can pick exactly
the right tool for the job.

00:35:37.400 --> 00:35:38.800
When you start recording
your application,

00:35:38.800 --> 00:35:42.830
you get a live timeline to show you
exactly what's happening in your

00:35:42.830 --> 00:35:45.060
application from these different sources.

00:35:45.170 --> 00:35:46.940
And again,
they're correlated in time so that

00:35:47.020 --> 00:35:50.860
you can go back and figure out
which events happened together.

00:35:51.720 --> 00:35:56.830
From here, you can select an instrument
and data mine deeply into it to

00:35:56.830 --> 00:35:59.120
figure out exactly what happened.

00:35:59.410 --> 00:36:02.680
In the case of ObjectAlloc,
we can even see exactly where

00:36:02.680 --> 00:36:05.930
an instance came from in our
call site and when it happened.

00:36:05.940 --> 00:36:10.280
So we can trace down any
memory issues very precisely.

00:36:12.960 --> 00:36:16.110
So now the best thing about Instruments
is that you can still use it when

00:36:16.120 --> 00:36:18.190
you're using the iPhone simulator.

00:36:18.300 --> 00:36:21.500
So as you're rapidly prototyping
your application and bringing it up,

00:36:21.570 --> 00:36:25.240
you can still be doing analysis along
the way to make sure that you're

00:36:25.240 --> 00:36:28.000
delivering the best application possible.

00:36:28.110 --> 00:36:30.550
So there are a few things that
make sense to analyze in the

00:36:30.550 --> 00:36:32.140
simulator and a few that don't.

00:36:32.270 --> 00:36:34.210
So let's talk about those.

00:36:34.540 --> 00:36:37.160
So the first are memory issues.

00:36:37.240 --> 00:36:42.590
Your memory performance between
iPhone simulator and the iPhone

00:36:42.590 --> 00:36:44.670
itself shouldn't vary too greatly.

00:36:44.670 --> 00:36:48.380
You're not going to see some object
get over-released on the simulator,

00:36:48.380 --> 00:36:49.620
but not on the phone.

00:36:49.650 --> 00:36:52.040
So if you find yourself
having memory problems,

00:36:52.050 --> 00:36:55.300
it's completely valid to use
the simulator and instruments

00:36:55.300 --> 00:36:56.600
to track these down.

00:36:57.350 --> 00:37:02.020
You can also use the simulator to get
rough ideas of the general algorithmic

00:37:02.120 --> 00:37:04.300
complexity of your application.

00:37:04.300 --> 00:37:07.020
So if you want to start feeding
in large data sets and understand

00:37:07.020 --> 00:37:10.750
how well you scale with that,
you can use the sampler instrument to

00:37:10.750 --> 00:37:12.970
gain a really good understanding of it.

00:37:13.610 --> 00:37:16.660
You can also use Dtrace with Instruments.

00:37:16.770 --> 00:37:18.230
Now,
some of the functionality in Instruments

00:37:18.260 --> 00:37:22.240
is actually powered by Dtrace,
but you can also write custom scripts

00:37:22.820 --> 00:37:27.320
to get to precisely the information
that you want in your application.

00:37:28.120 --> 00:37:31.450
Some things that don't make sense
to profile in the simulator are

00:37:31.450 --> 00:37:33.500
things such as wall clock time.

00:37:33.760 --> 00:37:36.400
Again, you're running on the
Core 2 Duo on your desktop.

00:37:36.400 --> 00:37:39.240
You're not running on
the processor on iPhone.

00:37:39.410 --> 00:37:43.230
So your timings are going
to be inherently different.

00:37:44.220 --> 00:37:47.000
Other things you don't want to analyze
are things that rely on just the

00:37:47.000 --> 00:37:49.450
general hardware on iPhone itself.

00:37:49.830 --> 00:37:51.920
Things like the graphics subsystem,
for example.

00:37:52.120 --> 00:37:55.490
You're going to want to
analyze those on iPhone.

00:37:55.740 --> 00:37:58.550
Now we make it easy in your
project to get up and running

00:37:58.810 --> 00:38:00.080
with your performance analysis.

00:38:00.340 --> 00:38:04.500
You can simply go to the Run menu,
select Start with Performance Tool,

00:38:04.660 --> 00:38:08.600
and select one of the templates
to jump right into Instruments.

00:38:08.750 --> 00:38:11.700
And now, I'd like to bring Clark back
on stage to give you a brief

00:38:11.820 --> 00:38:13.900
demo of Instruments in action.

00:38:14.100 --> 00:38:15.500
Clark?

00:38:15.630 --> 00:38:17.290
Thanks, Mike.

00:38:29.950 --> 00:38:33.210
Okay, here I have another sample project,
and I'd like to analyze

00:38:33.210 --> 00:38:34.240
it in Instruments.

00:38:34.290 --> 00:38:37.190
I'm going to be searching
for memory leaks.

00:38:37.640 --> 00:38:42.410
So I'll go to the Run menu,
choose Start with Performance Tool.

00:38:42.500 --> 00:38:44.740
And as you can see,
here are a list of instrument

00:38:44.740 --> 00:38:45.950
templates that I can use.

00:38:46.160 --> 00:38:48.450
I want to use the Leaks template.

00:38:48.540 --> 00:38:52.670
Selecting that will launch Instruments,
which will in turn launch my

00:38:52.740 --> 00:38:54.770
application in the simulator.

00:38:54.940 --> 00:38:57.700
Instruments starts recording
data about my application,

00:38:57.800 --> 00:39:00.630
including the total
amount of memory used.

00:39:00.750 --> 00:39:03.990
Sometimes it needs administrator access.

00:39:05.740 --> 00:39:09.400
The total amount of memory used,
as well as any leaks it's found so far.

00:39:09.400 --> 00:39:13.610
It'll scan periodically to find any
blocks of memory that are unreferenced

00:39:13.610 --> 00:39:15.900
and therefore are likely leaks.

00:39:16.260 --> 00:39:19.700
So while Instruments is recording data,
I just interact with my

00:39:19.700 --> 00:39:22.270
application as I normally would.

00:39:24.570 --> 00:39:27.400
Add things, remove things,
move things around.

00:39:27.570 --> 00:39:31.400
And there,
you see a spike in the leaks instrument.

00:39:31.400 --> 00:39:34.960
Okay,
I'm going to stop my application and

00:39:34.960 --> 00:39:38.300
go to inspect what was going on there.

00:39:38.340 --> 00:39:42.420
I select the leaks instrument,
and as you can see, a single object,

00:39:42.420 --> 00:39:46.080
an NS object of 16 bytes in size,
was leaked.

00:39:46.080 --> 00:39:50.000
If I select that object and
then click this button to

00:39:50.370 --> 00:39:53.680
open the extended detail view,
I'll see a stack trace of exactly

00:39:53.680 --> 00:39:55.520
where that object was allocated.

00:39:55.710 --> 00:39:58.760
This can be incredibly helpful in
tracking down these memory leaks.

00:40:00.260 --> 00:40:05.970
If I scroll towards the bottom of the
stack trace and find the last stack

00:40:06.040 --> 00:40:11.380
frame that is in my code that I'm
responsible for and double-click on that,

00:40:11.430 --> 00:40:14.500
it'll take me back to
Xcode directly to the leak.

00:40:14.690 --> 00:40:15.650
There it is.

00:40:15.700 --> 00:40:18.640
Wonder how that got in there.

00:40:18.670 --> 00:40:20.870
I'll fix my bug.

00:40:22.520 --> 00:40:25.580
Start with the Performance Tool again.

00:40:25.620 --> 00:40:27.830
It's time it launches again.

00:40:28.020 --> 00:40:30.220
Interact with it as before.

00:40:30.330 --> 00:40:33.330
Delete, move, add.

00:40:36.090 --> 00:40:38.950
And as you can see,
no leak was registered.

00:40:39.040 --> 00:40:41.120
I fixed that bug.

00:40:41.290 --> 00:40:43.870
Thank you, and back to slides.

00:40:49.800 --> 00:40:51.300
Thank you, Clark.

00:40:51.320 --> 00:40:53.070
So you can see,
Instruments makes it easy for

00:40:53.070 --> 00:40:55.040
you to analyze your application.

00:40:55.110 --> 00:40:57.610
So we've got a ton of sessions
on Instruments and its related

00:40:57.650 --> 00:40:59.840
technologies coming up this week.

00:40:59.880 --> 00:41:02.470
So on Wednesday,
we have a session that's getting

00:41:02.560 --> 00:41:05.270
started with Instruments to take
you through a general acclimation

00:41:05.340 --> 00:41:09.600
to the application so you understand
exactly how to get the most out of it.

00:41:09.610 --> 00:41:13.500
On Thursday, we'll have Debugging and
Profiling Your iPhone Application.

00:41:13.510 --> 00:41:16.480
In that session,
we're going to focus specifically

00:41:16.500 --> 00:41:19.840
on the tips and techniques that you
can employ to make sure that you're

00:41:19.840 --> 00:41:23.070
writing well-performing iPhone apps.

00:41:23.610 --> 00:41:26.260
Now, if you want to start taking a look
at the Mac OS X side of things,

00:41:26.260 --> 00:41:29.490
especially in regards to the simulator,
we've got a couple sessions this week

00:41:29.500 --> 00:41:33.420
that are going to focus specifically
on DTrace and on Instruments and

00:41:33.420 --> 00:41:36.630
how it interacts with DTrace and
how you can take advantage of

00:41:36.630 --> 00:41:38.610
DTrace from within Instruments.

00:41:38.660 --> 00:41:42.640
So we have Using DTrace on
Mac OS X on Thursday and

00:41:43.280 --> 00:41:47.460
Advanced Performance Analysis with
Instruments and DTrace Friday morning.

00:41:47.500 --> 00:41:48.630
It will be great sessions.

00:41:48.630 --> 00:41:50.040
I highly recommend that you attend them.

00:41:51.680 --> 00:41:54.670
Okay, so we've talked a little bit
about performance analysis,

00:41:54.670 --> 00:41:58.490
but now we need to talk about what you
all have been waiting for all this time,

00:41:58.590 --> 00:42:02.990
which is getting your
application on the device itself.

00:42:03.940 --> 00:42:07.660
So, chances are you've probably
got a team that you work with.

00:42:07.720 --> 00:42:11.800
It's probably not this team,
and they probably don't wear suits,

00:42:11.900 --> 00:42:14.160
but you probably have a
team that you work with.

00:42:14.210 --> 00:42:17.050
Or at the very least,
you've got multiple devices that

00:42:17.050 --> 00:42:19.150
you like to use in your development.

00:42:19.950 --> 00:42:26.100
So, the problem is you need to get your
application onto these devices.

00:42:26.260 --> 00:42:30.800
But iPhone development is a little bit
different from Macintosh development.

00:42:30.800 --> 00:42:34.550
You can't just write a development
version of your application and

00:42:34.650 --> 00:42:38.800
send it out to as many phones as you
want and have it run immediately.

00:42:38.800 --> 00:42:40.300
So why is this the case, though?

00:42:40.300 --> 00:42:42.580
Why is there this limitation?

00:42:42.740 --> 00:42:45.910
Well,
it's all about protecting our users.

00:42:46.200 --> 00:42:52.080
It's important that debug versions of
both development versions of applications

00:42:52.870 --> 00:42:56.480
aren't put out there in the wild to
put users' data at risk or to put the

00:42:56.480 --> 00:42:58.710
cellular network at risk in general.

00:42:58.820 --> 00:43:01.700
It's important that we allow
them to make sure that they're

00:43:01.700 --> 00:43:03.300
using their phone as a phone.

00:43:03.800 --> 00:43:05.810
Now, along with this, though,
you still have the need of

00:43:05.810 --> 00:43:08.100
getting your development done.

00:43:08.220 --> 00:43:11.420
So in order to move
applications to the device,

00:43:11.570 --> 00:43:13.650
there's two things that we need from you.

00:43:13.770 --> 00:43:15.940
Only two things.

00:43:16.030 --> 00:43:20.270
We need to know the devices
that you want to develop with,

00:43:20.590 --> 00:43:24.660
And we need you to sign your
applications so that we know

00:43:24.860 --> 00:43:27.500
that they've come from you.

00:43:27.650 --> 00:43:31.820
So first, we're going to focus on the
devices side of the story.

00:43:33.670 --> 00:43:36.720
So every iPhone that rolls
off the factory line,

00:43:36.770 --> 00:43:41.700
an iPod touch,
has built into it a unique identifier.

00:43:41.720 --> 00:43:45.880
We call this a UDID or a UDID.

00:43:46.810 --> 00:43:51.880
Now, this unique identifier you'll
be able to find within Xcode.

00:43:52.230 --> 00:43:57.850
And all you need to do is gather up the
unique identifiers for your development

00:43:57.970 --> 00:44:02.440
iPhones and send them off to Apple so
that we know that these devices are going

00:44:02.440 --> 00:44:05.100
to be used for development purposes.

00:44:05.150 --> 00:44:09.430
You can do this quickly and easily
through the iPhone Developer Portal.

00:44:09.550 --> 00:44:11.590
Simply log in.

00:44:11.830 --> 00:44:16.560
Add your iPhones by adding in
your UDIDs and giving them a name,

00:44:16.590 --> 00:44:17.390
and you're good to go.

00:44:17.930 --> 00:44:20.760
That's all we need to
know about the devices.

00:44:20.930 --> 00:44:24.490
But now we need to focus on signing.

00:44:24.810 --> 00:44:28.550
So, to talk about signing,
we should take a step back for

00:44:28.550 --> 00:44:34.600
a second and really briefly talk
about asymmetric key cryptography.

00:44:34.740 --> 00:44:36.170
Now, please don't get scared.

00:44:36.310 --> 00:44:38.540
We don't need to go in any depth on this.

00:44:38.630 --> 00:44:42.400
But it's important that you understand
at least the basic principles here.

00:44:42.520 --> 00:44:46.450
So in asymmetric key cryptography,
you've got a private

00:44:46.800 --> 00:44:48.300
key and a public key.

00:44:48.370 --> 00:44:53.240
And you hand this public key out
freely to as many people as you want.

00:44:53.380 --> 00:44:56.710
And you use this private
key to do various things,

00:44:56.710 --> 00:45:00.140
such as sign data or encrypt data.

00:45:00.290 --> 00:45:02.820
Now, once you've done that,
users can later use your public key to

00:45:02.820 --> 00:45:09.490
ensure that the data is as you sent it,
that it wasn't changed while in transit,

00:45:09.490 --> 00:45:11.910
or use it to decrypt that data.

00:45:12.430 --> 00:45:15.050
So when you're signing
your iPhone application,

00:45:15.050 --> 00:45:18.070
you're essentially taking
a snapshot of it in time.

00:45:18.070 --> 00:45:21.290
And you're saying that, saying that I,
Michael Jurewitz,

00:45:21.340 --> 00:45:26.300
swear that the application looked like
this at the time that I signed it.

00:45:26.420 --> 00:45:30.300
And when you go to put
the application on iPhone,

00:45:30.440 --> 00:45:33.440
the iPhone is going to actually check
to make sure that that's the case,

00:45:33.440 --> 00:45:36.340
and that the application
has not been modified,

00:45:36.340 --> 00:45:40.330
at which point it'll
launch your application.

00:45:41.210 --> 00:45:46.480
So to create these keys that you need,
we start with Keychain Access.

00:45:46.560 --> 00:45:50.630
You'll find this in your
Utilities folder on Mac OS X.

00:45:51.040 --> 00:45:58.000
We simply need to create a certificate
request and fill in the appropriate data.

00:45:58.350 --> 00:46:01.570
After we've done that,
we'll actually generate a file that we

00:46:01.590 --> 00:46:04.590
send off to the iPhone Developer Program.

00:46:05.180 --> 00:46:07.260
And what Apple does--
so the question is here,

00:46:07.260 --> 00:46:08.100
what just happened here?

00:46:08.100 --> 00:46:11.840
We just pasted this random
data into this website.

00:46:12.030 --> 00:46:16.340
Well, you made a public and a private
key when you created this request.

00:46:16.500 --> 00:46:20.580
And you sent this
public key off to Apple.

00:46:20.960 --> 00:46:23.950
And what we do is make sure that
you are who you say you are,

00:46:24.030 --> 00:46:27.900
that no one is trying to
pretend that they are you.

00:46:27.940 --> 00:46:31.240
And if so,
we hand you back a certificate.

00:46:31.300 --> 00:46:38.000
And this basically lets us tell the world
that if you receive this public key,

00:46:38.000 --> 00:46:43.810
we at Apple verify that it is
truly associated with this person.

00:46:44.300 --> 00:46:47.880
So with this certificate,
you'll be able to download

00:46:47.880 --> 00:46:51.710
this from the iPhone program
portal once it's been approved.

00:46:51.870 --> 00:46:53.210
If you have a team that
you're working with,

00:46:53.320 --> 00:46:57.570
they'll also submit certificate requests,
and you as a team lead can very quickly

00:46:57.570 --> 00:47:01.470
and easily approve them so that they
can get on with their development.

00:47:01.750 --> 00:47:05.080
Now, it's especially important that
you safeguard these certificates

00:47:05.190 --> 00:47:07.500
once you get them back from Apple.

00:47:07.500 --> 00:47:10.000
In Keychain Access,
they're all grouped together,

00:47:10.070 --> 00:47:12.120
but you need to make sure that
you are backing up both your

00:47:12.240 --> 00:47:15.350
private and your public key,
and that you do not give

00:47:15.350 --> 00:47:17.090
these out to anyone.

00:47:17.170 --> 00:47:19.600
Someone who has your private
key can pretend to be you,

00:47:19.600 --> 00:47:20.730
and you don't want that.

00:47:20.940 --> 00:47:22.490
Trust me.

00:47:23.400 --> 00:47:26.300
Okay, but we still need to get the
application onto the device.

00:47:26.410 --> 00:47:29.460
So the last step in here is
to actually create what we

00:47:29.460 --> 00:47:31.300
call a provisioning profile.

00:47:31.530 --> 00:47:35.200
And you do that again through
the iPhone program portal.

00:47:35.790 --> 00:47:42.120
And a provisioning profile is essentially
a single file that encapsulates which

00:47:42.150 --> 00:47:47.610
certificates and which iPhones can
be used together for development.

00:47:47.700 --> 00:47:50.820
So, for example,
if Rick and I were on a team,

00:47:50.870 --> 00:47:54.560
both of our certificates would
be in the profile and both of the

00:47:54.620 --> 00:47:56.960
devices that we use would be there,
too.

00:47:57.200 --> 00:47:59.520
That way,
Rick could build and sign an application

00:47:59.610 --> 00:48:00.790
and I could run it on my phone.

00:48:00.910 --> 00:48:05.260
I could build and sign an application
and he could run it on his.

00:48:06.420 --> 00:48:11.960
Again, now one additional step is you'll
create also a bundle identifier for

00:48:11.960 --> 00:48:16.000
either your suite of applications
or your specific application itself.

00:48:16.160 --> 00:48:19.700
And this just uniquely identifies
your app so that we can isolate it

00:48:19.700 --> 00:48:23.700
from the rest of the world for things
like preferences in the keychain.

00:48:24.660 --> 00:48:27.600
Now you download this
provisioning profile to your Mac,

00:48:27.610 --> 00:48:30.670
you drag it to Xcode,
and you're good to go.

00:48:31.330 --> 00:48:34.150
But we have all these devices
now that we have to interact with

00:48:34.200 --> 00:48:38.060
and we have to use in some way,
but we need a tool to help us to do that.

00:48:38.180 --> 00:48:41.040
So what are we going to use?

00:48:41.140 --> 00:48:45.130
Well, I'd like to bring Rick back on
stage to tell you just what that is.

00:48:45.200 --> 00:48:47.950
Thanks, Mike.

00:48:49.900 --> 00:48:53.240
In Xcode 3.0, we introduced a tool we
called the Organizer.

00:48:53.330 --> 00:48:58.800
And the Organizer is used to manage some
frequently accessed source files and

00:48:58.800 --> 00:49:02.460
do some inline editing for convenience.

00:49:02.580 --> 00:49:06.060
But in Xcode 3.1,
we've taken it a bit further and made

00:49:06.060 --> 00:49:08.560
it the hub of your device management.

00:49:08.660 --> 00:49:10.400
This is the Organizer.

00:49:10.500 --> 00:49:14.500
It has your devices on the left and
detailed information on the right.

00:49:14.720 --> 00:49:19.040
You can get to the Organizer
from any time by going to Xcode,

00:49:19.110 --> 00:49:22.910
going to its window menu,
and choosing Organizer.

00:49:24.560 --> 00:49:27.600
When you first plug in your device,
Xcode will bring up a window asking

00:49:27.600 --> 00:49:29.550
if you want to use it for development.

00:49:29.710 --> 00:49:34.190
If you confirm, your device will be added
to the Devices list on the

00:49:34.190 --> 00:49:36.380
left-hand side of the organizer.

00:49:36.490 --> 00:49:40.530
So here, we just click the button,
Xcode has read in what my iPhone is,

00:49:40.530 --> 00:49:43.180
and boom, there it is on the left.

00:49:45.680 --> 00:49:47.220
If we highlight in on
the devices section,

00:49:47.220 --> 00:49:49.720
you can see I have three
phones plugged in here,

00:49:49.810 --> 00:49:50.840
one of which is grayed out.

00:49:50.840 --> 00:49:52.350
One has a red dot, one has a green.

00:49:52.360 --> 00:49:55.650
Well, grayed out devices are those
that you've chosen to ignore

00:49:55.650 --> 00:49:57.240
when you first plug it in.

00:49:57.310 --> 00:49:58.980
You say you don't want to
use it for development.

00:49:59.060 --> 00:50:01.540
So if you've got a personal phone
that you're plugging in that you're

00:50:01.540 --> 00:50:03.660
not doing any development with,
say ignore.

00:50:03.800 --> 00:50:06.170
And when it's plugged in,
Xcode will acknowledge that it's

00:50:06.220 --> 00:50:08.020
not to be paid attention to.

00:50:08.370 --> 00:50:11.440
Red phones are those that you
have used for development,

00:50:11.440 --> 00:50:13.050
but don't currently have plugged in.

00:50:13.310 --> 00:50:15.680
And when you plug in a device
that is used for development,

00:50:15.750 --> 00:50:18.610
it'll show up with a green dot on
the left and allow you to edit all

00:50:18.610 --> 00:50:20.790
the information you want about it.

00:50:24.110 --> 00:50:25.840
If you delete-- oh, sorry about that.

00:50:26.120 --> 00:50:28.830
If you delete a phone
from the left-hand side,

00:50:29.120 --> 00:50:31.920
you can plug it back in and
choose Use for Development again

00:50:31.920 --> 00:50:35.380
or Ignore if you've changed your
mind about how it should work.

00:50:35.540 --> 00:50:38.140
So here, I've just deleted one.

00:50:40.300 --> 00:50:43.780
And when I plug it back in,
the dialog pops back up and

00:50:43.780 --> 00:50:47.040
lets me decide that I want to
use this phone for development.

00:50:47.810 --> 00:50:52.760
In the upper section of the organizer,
you see some vital stats on your phone,

00:50:52.770 --> 00:50:58.380
like the name, its capacity,
its serial number, most importantly,

00:50:58.560 --> 00:51:02.670
that identifier or UDID that
Mike Jurewitz mentioned.

00:51:03.000 --> 00:51:04.950
When you need to know
the UDIDs of your phone,

00:51:05.170 --> 00:51:08.300
you'll want to come to the
organizer to read them.

00:51:08.390 --> 00:51:12.640
You can also find the software version
that you have loaded onto your iPhone.

00:51:12.730 --> 00:51:15.760
And if you want to upgrade
your iPhone to a newer version,

00:51:15.870 --> 00:51:20.390
you can do it right within Organizer
by clicking on the OS version

00:51:20.390 --> 00:51:25.700
pop-up and choosing Other,
finding an iPhone software restore file,

00:51:25.700 --> 00:51:29.460
an IPSW file,
and loading it into the organizer.

00:51:29.530 --> 00:51:32.580
When you do this, the organizer grabs it,
copies it in,

00:51:32.820 --> 00:51:34.640
and will know about it in the future.

00:51:34.740 --> 00:51:37.640
So you can choose it from the
dropdown and click Restore when you

00:51:37.640 --> 00:51:40.200
want to upgrade to that OS version.

00:51:41.930 --> 00:51:45.330
In the middle,
we have provisioning information.

00:51:45.440 --> 00:51:49.240
So that provisioning profile that you
got from Apple that you need to use to

00:51:49.240 --> 00:51:53.420
let you run your apps on your device,
you'll want to configure here.

00:51:53.540 --> 00:51:55.920
When you get a mobile
provision file from Apple,

00:51:55.970 --> 00:51:59.640
if you just drag it onto Xcode's dock,
it'll become available for

00:51:59.640 --> 00:52:01.280
all your devices to use.

00:52:01.330 --> 00:52:03.660
And when you decide you want
to use a given provisioning

00:52:03.660 --> 00:52:08.700
profile with a given device,
all you need to do is check the box,

00:52:08.750 --> 00:52:13.450
and the organizer will upload your
profile into your device for your use.

00:52:15.000 --> 00:52:18.430
At the bottom of the organizer,
we have a section that lets you inspect

00:52:18.530 --> 00:52:23.140
the applications that you currently have
that you've uploaded onto your device.

00:52:23.260 --> 00:52:26.310
You can easily add or
remove applications here,

00:52:26.310 --> 00:52:30.340
or you can inspect the
application data that each has.

00:52:30.450 --> 00:52:34.020
If you click the download icon
next to the application data,

00:52:34.230 --> 00:52:37.060
the organizer will let you
actually download the applications

00:52:37.060 --> 00:52:42.030
data folder from your phone
and put it right on your Mac.

00:52:42.970 --> 00:52:45.100
So here we click it,
we choose where we want

00:52:45.100 --> 00:52:47.690
to save the data file,
and once we've done so,

00:52:47.690 --> 00:52:50.730
the organizer will even add it
to the upper left-hand corner

00:52:51.070 --> 00:52:55.060
where it manages some frequently
accessed files for your convenience.

00:52:55.110 --> 00:52:58.760
That data folder is your application's
home folder on the phone.

00:52:58.930 --> 00:53:04.160
If you look, it contains both a document
subdirectory and a library subdirectory,

00:53:04.160 --> 00:53:07.280
which contains, among other things,
your preferences.

00:53:09.000 --> 00:53:11.280
So you've got your apps on your phone.

00:53:11.340 --> 00:53:13.920
You've maybe been using
it around beta testing it,

00:53:13.950 --> 00:53:17.780
out living on it for a while,
and maybe your app has a few crashes.

00:53:17.830 --> 00:53:19.980
You're going to want to get
that information back to your

00:53:19.980 --> 00:53:23.360
developer's tools somehow so
you can find and fix your bugs.

00:53:23.410 --> 00:53:27.160
The organizer-- we'll
get to that in a second,

00:53:27.160 --> 00:53:27.620
actually.

00:53:27.620 --> 00:53:30.170
The organizer is also your
equivalent of console.

00:53:30.380 --> 00:53:33.800
So for Mac apps,
console gives all the console

00:53:33.800 --> 00:53:37.780
logging for all the applications
running on your computer.

00:53:37.920 --> 00:53:40.140
For all the logging
running on your device,

00:53:40.200 --> 00:53:42.060
you want to use the organizer,
which will show you

00:53:42.060 --> 00:53:46.300
everything as it goes by,
allow you to filter as needed,

00:53:46.370 --> 00:53:51.390
and save out log files that
you may find interesting later.

00:53:52.230 --> 00:53:56.220
So when your applications crash,
then you want to use the crash logs.

00:53:56.370 --> 00:53:59.250
When you go to this section,
the organizer will automatically download

00:53:59.510 --> 00:54:03.920
any crash logs that your phone has
accumulated since you last plugged it in.

00:54:04.060 --> 00:54:06.750
And it will automatically try
to symbolicate them for you.

00:54:06.750 --> 00:54:10.500
So instead of having a stack trace
with just unreadable addresses,

00:54:10.900 --> 00:54:13.820
you'll have your nice method
and function names so you can

00:54:13.940 --> 00:54:15.900
easily tell what went wrong.

00:54:16.290 --> 00:54:19.470
In order to let the organizers
symbolicate your stack traces,

00:54:19.470 --> 00:54:22.520
you'll want to keep around the
binaries and their associated

00:54:22.520 --> 00:54:25.920
symbolic information files,
or .dsim files,

00:54:26.060 --> 00:54:29.320
for any application that you'll
want to symbolicate later.

00:54:29.480 --> 00:54:35.350
So long as the built binary and
.dsim file that is exactly what was

00:54:35.350 --> 00:54:39.940
running on your phone is somewhere
on your Mac that Spotlight can index,

00:54:40.050 --> 00:54:45.190
the organizer will find it automatically
and symbolicate your crash traces.

00:54:45.400 --> 00:54:47.830
If an application crashes that
you don't have that information

00:54:47.850 --> 00:54:51.400
available to spotlight in,
you'll find that your application

00:54:51.520 --> 00:54:55.600
stack frames are not symbolicated,
and you'll know why.

00:54:56.450 --> 00:54:59.760
The organizer provides a useful
utility for taking screenshots as well.

00:55:00.030 --> 00:55:01.280
It's very easy.

00:55:01.620 --> 00:55:05.720
You just click the Capture button,
and it records exactly

00:55:05.720 --> 00:55:07.470
what's on your phone.

00:55:12.440 --> 00:55:16.710
If you want to set a default image,
click Capture,

00:55:16.710 --> 00:55:20.290
it records exactly what's on your phone.

00:55:21.310 --> 00:55:23.600
If you want to set a default
image so that when your

00:55:23.600 --> 00:55:26.510
phone application launches,
it appears responsive

00:55:26.510 --> 00:55:29.470
and comes up immediately,
you can also take a screenshot

00:55:29.830 --> 00:55:34.370
of the image that you want to
come up and click the Save as

00:55:34.370 --> 00:55:36.810
Default Image button in Xcode.

00:55:38.740 --> 00:55:42.190
And Xcode will automatically
add it to your project for you,

00:55:42.190 --> 00:55:44.920
so that when you launch your application,
your next build and go,

00:55:44.950 --> 00:55:47.020
that will be the initial image.

00:55:47.070 --> 00:55:49.720
This isn't meant to give you
the ability to add splash

00:55:49.720 --> 00:55:50.980
screens to your application.

00:55:51.220 --> 00:55:54.470
It's just so that your application
comes up immediately showing the

00:55:54.470 --> 00:55:58.470
interface that it will use as soon
as it actually starts running.

00:55:59.370 --> 00:56:02.720
So once we've finished configuring
your application in the organizer,

00:56:02.720 --> 00:56:05.950
we're going to want to go and actually
start building and running on the

00:56:05.950 --> 00:56:08.380
device instead of in the simulator.

00:56:08.440 --> 00:56:10.270
To do this,
you're going to want to investigate

00:56:10.370 --> 00:56:14.120
Xcode's new overview pop-up
in the upper left-hand corner.

00:56:14.140 --> 00:56:17.880
The overview pop-up gives you at
your fingertips access to controls

00:56:18.000 --> 00:56:21.480
for exactly what will happen
when you press Build and Go.

00:56:21.500 --> 00:56:24.120
You can change which target you're
going to start to build with,

00:56:24.150 --> 00:56:28.520
what configuration you're going to build,
or for this purpose,

00:56:28.540 --> 00:56:34.620
you can change the active SDK from
your simulator SDK to the device SDK.

00:56:34.650 --> 00:56:37.920
Once you've done so,
the next time you build and go,

00:56:37.950 --> 00:56:42.430
your iPhone application will rebuild
for iPhone OS and automatically

00:56:42.430 --> 00:56:44.480
upload and run on the device.

00:56:44.910 --> 00:56:47.040
What if you have multiple
devices plugged in?

00:56:47.130 --> 00:56:49.430
Well, the overview pop-up
lets you choose as well.

00:56:49.570 --> 00:56:52.660
For each device you have plugged in,
provision for development,

00:56:52.740 --> 00:56:55.720
you'll see an executable
in the overview pop-up.

00:56:55.810 --> 00:56:58.440
And to change which device
is running your application,

00:56:58.520 --> 00:57:01.500
you just change which
executable is selected.

00:57:03.920 --> 00:57:07.340
That's all it takes to get up
and running with your devices.

00:57:07.420 --> 00:57:11.110
Let's see how it looks when
you want to dive into analyzing

00:57:11.390 --> 00:57:13.550
on the phone with Instruments.

00:57:13.630 --> 00:57:17.040
I'd like to invite Clark back
up to show us how to do it.

00:57:26.140 --> 00:57:31.470
All right, I've got a project here that,
as you can see,

00:57:31.470 --> 00:57:31.470
is configured to build for the device.

00:57:32.380 --> 00:57:35.520
I'm going to,
like before with the simulator,

00:57:35.600 --> 00:57:38.180
choose Start with Performance Tool.

00:57:39.010 --> 00:57:42.210
And since my application is
an OpenGL ES application,

00:57:42.210 --> 00:57:45.490
I want to gather some
OpenGL statistics about it.

00:57:45.770 --> 00:57:49.090
I'll launch that.

00:57:49.230 --> 00:57:53.750
Instruments will launch and in turn,
upload the application to my

00:57:53.750 --> 00:57:56.000
device and start it running.

00:58:01.170 --> 00:58:04.820
Even though you can't see this,
it is a pretty fun little game.

00:58:05.190 --> 00:58:11.140
I'll play around, shoot some things,
see how it affects the frame rate.

00:58:11.180 --> 00:58:15.900
Well,
obviously something is going wrong here.

00:58:15.900 --> 00:58:22.850
So, to track that down,
I'll come back into Instruments.

00:58:24.140 --> 00:58:26.740
Going to stop my application.

00:58:26.770 --> 00:58:32.610
And to focus on the actual problem,
I'll option drag and select the region

00:58:32.870 --> 00:58:35.490
where I had that abysmal frame rate.

00:58:36.140 --> 00:58:40.550
Now, as the OpenGL ES instrument was
collecting OpenGL statistics,

00:58:40.550 --> 00:58:44.270
Sampler was also collecting
information about what my

00:58:44.270 --> 00:58:46.240
code was doing at that time.

00:58:46.390 --> 00:58:51.240
So if I select the Sampler instrument,
bring up the extended

00:58:51.330 --> 00:58:53.080
detail view as before,

00:58:53.280 --> 00:58:59.510
I can look through these samples and
look for a stack trace that looks

00:58:59.600 --> 00:59:03.050
like I'm responsible for the problem.

00:59:04.240 --> 00:59:09.380
Here we see this missile render
function is calling NSLOG.

00:59:09.380 --> 00:59:13.200
It doesn't seem likely that I should
be logging from a render function.

00:59:13.310 --> 00:59:17.200
So, again, I'll double-click on this,
it'll take me directly to the source,

00:59:17.400 --> 00:59:20.200
and indeed, there's my problem.

00:59:20.460 --> 00:59:24.200
Now, this is obviously a
pretty contrived problem,

00:59:24.200 --> 00:59:27.410
but you can use the exact same
techniques to track down real

00:59:27.660 --> 00:59:31.240
problems in your application,
and hopefully getting it running

00:59:31.360 --> 00:59:33.200
and performant on the device.

00:59:33.390 --> 00:59:36.190
Thank you, and back to slides.

00:59:41.000 --> 00:59:42.610
All right, thank you, Clark.

00:59:42.680 --> 00:59:47.000
I promise you, we never have bugs like
that in our own software.

00:59:47.000 --> 00:59:50.340
All right, so we've talked a bit about
using instruments on the device.

00:59:50.620 --> 00:59:53.280
There's one tool we
haven't talked about yet,

00:59:53.340 --> 00:59:54.000
Shark.

00:59:54.000 --> 00:59:57.480
So now,
Shark is another one of our performance

00:59:57.480 --> 01:00:02.050
tools for getting instruction-level
accuracy in your profiling,

01:00:02.050 --> 01:00:05.160
so that as you're doing time profiling
of your application on iPhone to

01:00:05.160 --> 01:00:08.760
understand where it's spending time,
you're doing so with incredibly

01:00:08.760 --> 01:00:11.970
low overhead and high accuracy.

01:00:13.800 --> 01:00:17.710
When we look at the Shark interface,
it's pretty simple.

01:00:17.730 --> 01:00:22.540
If you've seen general backtraces
or the sample application,

01:00:22.540 --> 01:00:24.700
it's pretty familiar.

01:00:24.700 --> 01:00:27.440
In this trace document,
we can see on the left-hand side

01:00:27.860 --> 01:00:31.700
where we're spending time as
a percentage of our execution.

01:00:31.700 --> 01:00:34.700
On the right-hand side,
we see the call stacks.

01:00:34.700 --> 01:00:38.650
We know exactly where we were when
that happened and what had called what.

01:00:39.350 --> 01:00:41.810
So now using Shark for iPhone
development is pretty simple,

01:00:41.810 --> 01:00:44.620
but there's a little bit of
setup we have to do first.

01:00:44.750 --> 01:00:49.850
So we'll go to Shark's
Preferences and bring that up.

01:00:51.220 --> 01:00:54.380
And then we need to go to our
search paths and make sure that

01:00:54.380 --> 01:00:57.690
Shark knows where to find our
source files and our DSIM files,

01:00:57.740 --> 01:00:59.800
our symbol information.

01:01:00.300 --> 01:01:03.480
So we'll select our source
files and hit the plus button.

01:01:03.510 --> 01:01:05.860
It'll bring up a little dialogue for us.

01:01:05.900 --> 01:01:09.390
We'll tell it where our sample
application happens to reside.

01:01:09.570 --> 01:01:11.600
In this case,
it's our metronome application.

01:01:11.650 --> 01:01:13.890
And add that to the search paths.

01:01:14.090 --> 01:01:17.160
Now we'll also go to our symbol-rich
files and make sure that Shark knows

01:01:17.160 --> 01:01:19.240
where to look for our DSIMs.

01:01:19.340 --> 01:01:25.530
Again, we'll click the plus button,
navigate to where our symbol files are,

01:01:25.640 --> 01:01:27.500
and click open.

01:01:28.490 --> 01:01:31.170
Now, you can install the Xcode
Developer Tools wherever

01:01:31.170 --> 01:01:32.640
you want on your system.

01:01:32.780 --> 01:01:35.720
So, if you haven't installed
them at /developer,

01:01:35.820 --> 01:01:38.840
we need to make sure that
Shark is aware of this.

01:01:38.970 --> 01:01:43.630
So you can go ahead and double-click on
the path for the iPhone OS frameworks

01:01:43.630 --> 01:01:47.310
and change the leading /developer to
whatever the name of the developer

01:01:47.310 --> 01:01:48.530
folder it is that you chose.

01:01:48.610 --> 01:01:51.250
In this case, Xcode 3.1.

01:01:51.380 --> 01:01:54.370
In this way,
Shark will be able to look at

01:01:54.490 --> 01:01:58.250
the iPhone OS call stacks and
understand which symbols in iPhone

01:01:58.250 --> 01:02:00.590
were being called at that time.

01:02:01.430 --> 01:02:03.450
From there, Shark's pretty easy to use.

01:02:03.710 --> 01:02:06.870
We simply engage
Network iPhone Profiling,

01:02:06.920 --> 01:02:09.140
and we get an extended interface.

01:02:09.300 --> 01:02:14.290
When we've got the device plugged in,
we'll see it listed here in the window.

01:02:14.910 --> 01:02:19.000
Now, we can use this then to
select what we want to sample.

01:02:19.110 --> 01:02:23.000
In this case, we'll select our metronome
application from the pop-up.

01:02:23.150 --> 01:02:26.610
We can then select what kind
of profiling we want to do.

01:02:26.640 --> 01:02:28.630
In this case,
we're just going to do a time profile,

01:02:28.630 --> 01:02:31.950
which is just figuring out where we're
spending our time in our application.

01:02:32.280 --> 01:02:35.030
We click Start,
we do what we want to do in our app,

01:02:35.030 --> 01:02:35.550
and we're done.

01:02:35.670 --> 01:02:37.550
We simply click Stop.

01:02:37.740 --> 01:02:40.900
Shark comes up and will tell us
exactly where we were spending time,

01:02:41.000 --> 01:02:45.440
and will do so without affecting
the performance of your application.

01:02:45.990 --> 01:02:49.800
Now, you can double-click on any port
in these call stacks and jump

01:02:49.800 --> 01:02:54.800
exactly to the line and source
that's responsible for that call.

01:02:54.920 --> 01:02:58.620
You can also dig down and see
the assembly view if you want to

01:02:58.620 --> 01:03:02.790
see exactly which instructions
were happening at a given time.

01:03:03.100 --> 01:03:07.070
There's also some chart facilities in
Shark so that you can see your call

01:03:07.070 --> 01:03:13.170
stacks in time and understand general
behavioral issues at a higher level.

01:03:14.600 --> 01:03:15.780
So that's Shark.

01:03:16.020 --> 01:03:17.960
Really a very powerful tool.

01:03:18.110 --> 01:03:19.900
There's an incredible amount
of surface area that we don't

01:03:19.900 --> 01:03:21.840
have time to get into right now.

01:03:21.880 --> 01:03:24.310
But we do have a couple
sessions later on this week and

01:03:24.310 --> 01:03:26.400
even today to get into that.

01:03:26.450 --> 01:03:28.450
So for those of you who are
experienced with Mac development,

01:03:28.450 --> 01:03:31.930
we have advanced profiling techniques,
performance profiling

01:03:32.000 --> 01:03:33.340
techniques with Shark.

01:03:33.380 --> 01:03:34.930
This will be at 5:00 p.m.

01:03:35.050 --> 01:03:35.910
today in Marina.

01:03:36.080 --> 01:03:39.080
It's a great presentation if
you're familiar with Shark but

01:03:39.080 --> 01:03:41.050
want to dig in a bit deeper.

01:03:41.320 --> 01:03:43.700
and later on this week,
we'll have a more introductory

01:03:43.700 --> 01:03:45.660
session on Thursday,
Performance Tuning

01:03:45.660 --> 01:03:47.200
Your Application with Shark.

01:03:47.330 --> 01:03:50.540
And this will be a great introduction if
you're curious about more of the tool,

01:03:50.840 --> 01:03:54.380
how it works, and how you can use it
for your application.

01:03:54.600 --> 01:03:58.160
So we've been through a tour of the
developer tools and shown you what you

01:03:58.250 --> 01:04:01.900
need to do and all the tools that you
can use for your iPhone development.

01:04:02.020 --> 01:04:04.700
You've seen that they're very
similar to Mac development,

01:04:04.810 --> 01:04:08.450
and that they're there to help speed
you along and keep you moving forward.

01:04:09.360 --> 01:04:11.680
For more information,
please feel free to email

01:04:11.980 --> 01:04:14.540
me at jurewitz@apple.com.

01:04:14.540 --> 01:04:16.690
We've also got a rich
set of documentation,

01:04:16.690 --> 01:04:21.290
whether on the iPhone OS, Xcode,
Interface Builder, Instruments, or Shark.

01:04:21.400 --> 01:04:23.120
So please see our
developer website as well.