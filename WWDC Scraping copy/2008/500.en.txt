---
Title:  Mac OS X Server State of the Union
Year:   2008
Web:    https://nonstrict.eu/wwdcindex/wwdc2008/500/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

Good afternoon, everyone, and welcome to the Mac OS X Server State of the Union. We've got some great product updates for Mac OS X Server that we want to share with you today. But first, before we do that, I want to do a quick recap of some recent updates we've had in the server and storage product line. Over the past few months, we've made many updates to the product line. Starting in January, we introduced the new 8-core XServe.

With dual 3 GHz quad-core Xeon processors, faster memory bandwidth, more disk I/O throughput, the server is over two times faster than the previous XServe. In benchmarks of I/O intensive activity, like this file server benchmark, you see it's 30% faster than the previous XServe. And in application benchmarks like Java, shown here by SPECJBB, it's over two times faster.

In February, we added support for the Promise V-Track RAID storage system in Apple products. This added several key new features. In particular, we added support for Promise's dual active-active RAID controllers, 4-gigabit fiber, and support for SAS drives. And in fact, these are three of the most requested features last year at WWDC, and they're now supported on the Mac OS X platform.

In February, we also introduced a major new upgrade to XAN, XAN 2. Since we introduced it back in 2005, XAN has become the most widely deployed SAN file system on any platform. It's used in newsrooms and studios throughout the world, such as NBC, CNN, BBC, DreamWorks. And now with XAN 2, we've added several new features. We've improved performance by optimizing the layout of the file system on disk. And you can see that together here with the V-Track RAID, XAN 2 can now deliver over six simultaneous uncompressed 1080p HD streams or up to 26 simultaneous uncompressed standard definition video streams.

In XSAN 2, we also have an all-new admin. It makes it very easy to manage your SAN, all the assets in your SAN. You can manage directly the LUNs, the computers, the volumes, the mounts. It's much easier to set up and administer. And we've also added support for pre-tuned file system configurations. So whether you're doing high-definition video or smaller files like in a file server or a mail server scenario, it's very easy to get maximum performance out of your SAN. Thank you.

And finally, XAMPP 2 supports Spotlight. So now, even with a massive SAN, you can use the features within Leopard, such as Spotlight, CoverFlow, QuickLooks, to search for data by content and access it in your SAN. So that's XAMPP 2. So that's a quick recap of some of the updates we've made in the past few months in the server and storage products.

And while we've been doing this, some of our developers have also been busy, and I want to do a quick developer update, some key activity that's been going on there. You may remember back in January at Macworld, we had two developers that demonstrated virtualization of Mac OS X Server in a virtual machine, Parallels and VMware. And since then, Parallels has announced Parallels Server for Mac.

It supports virtualization of Mac OS X Server, along with other guest OSes, such as Windows Server or Linux Server, running on the Apple hardware. It fully supports symmetric multiprocessing, so you can assign up to four virtual cores to a virtual machine, and it has full 64-bit support for the guest OSes as well. And this is currently in beta right now.

And many of you, I'm sure, are familiar with VMware as well. They're used throughout the Fortune 100 for virtualizing server infrastructure, and they have also demonstrated support for virtualizing Mac OS X Server. They have full support for SMP and full support for 64-bit guest OSes. And VMware plans to release support for virtualizing Mac OS X Server in their upcoming Fusion 2 release.

We've also been working closely with another developer, IBM, as they bring their products to the Mac OS X platform. And so I'd like to invite David Barnes to the stage. And David Barnes is from the Software Development Group at IBM, and he's going to tell you more about some of the work they've been doing. Thank you, sir. Right. Thank you very much.

So I have to say that every time I meet with a group of Apple developers, I feel closer and closer every time and never so much as today because in IBM today, let me tell you that I'm a Mac user in IBM. My vice president is a Mac user in IBM. I'm helping a general manager switch in IBM. And if you don't know, GMs in IBM are way out there.

And most importantly, my entire development team develops on the Mac platform. And not just for Mac products, cool, but across our middleware portfolio as well, which is really sweet because that's where we make a lot of our money. So there's a definite change that's taking place. And it is really evident in the fact that we have our enterprise customers, our very biggest customers coming to us and saying, will you please start developing on this platform and helping us move what's typically the enterprise towards this platform. So that's good news for all of us.

And that's because of the opportunity that's there. The thing I want to mention today, one of many things actually, is that we have recently shipped Informix dynamic server for this platform, for the Mac platform. Now, if you're not familiar with it, the first thing about it, it is modular and highly scalable. And I mean, you can start out with a little database.

You can scale up to literally hundreds of thousands of users. The reliability of that is built into the DNA. And it's been that way with Informix for a long time. And it's been that way with Informix for a long time. And it's been that way with Informix for a long time. It's got a very loyal following. And so things like replication, redundancy, et cetera, don't worry about it.

It's not bolted down the side. It's in there. Something that's important to this group also is that it's terrific for being able to feed different rich content sources, rich multimedia, video, audio, et cetera, along with the normal database functions, if you will. And the last thing, and this is really very Apple and Apple developer related, is we have a lot of people who are really interested in this. And that's what we've just announced that is available now.

But I'll tell you that that's not all you're going to see from IBM. When people in the organization found out that. I was going to come and talk to you. They're like, ooh, show my stuff. Ooh, show my stuff. And I'm like, ooh, no. So and that is both on this platform, on the Mac platform, on OS X and the server platform, and on the iPhone platform.

So across IBM's software group, you'll see us developing products. Remember, we don't make applications. We make products to enable you to be able to develop, to reach out to a new enterprise that's asking us all to help them catch the wave. So thank you. Thank you very much for Apple for having me here. And I hope you all have a great conference. Thanks.

So that was a quick update of our server product and also of the developer activity that's been going on recently. And so now let's turn our attention to Mac OS X Server and the upcoming release. And today we're announcing Snow Leopard Server. In addition to inheriting the enhancements that you just heard about in the previous session in Snow Leopard, we also have a few features that are coming up.

And specifically, we're doing a few things. We're enhancing the OS foundations. We've got some new features that we're adding in the user-level services. And we've got some exciting updates with Podcast Producer to tell you about as well. So first of all, to start off with, to talk about our enhancements to the OS foundations, I'm going to bring up Kazu Yanagihara. Kazu?

Thank you, Greg. Good afternoon. So I'm going to talk about three foundation technology areas today. And let's start with 64-bit. We started our transition to 64-bit in Leopard Server and ported some of our services to 64-bit already. and in Snow Leopard Server, we're moving the rest of the services to 64-bit.

So everything from mail server, file services, podcast producer, X Grid and on and on. And combined with the new 64-bit kernel and the rest of the base OS, the Snow Leopard Server is going to be the whole thing is going to be the 64-bit OS. So why we care about this stuff? Well, let's take a look.

The most obvious one is the much larger address space. So for those services that manipulate a lot of data, such as Informix Dynamics Server that Dave just mentioned, they can store more data in the memory and avoid disk IO, which costs about 200 times more than accessing memory. So those services can fetch and serve those information to the client much more quickly.

Number two, making system calls on a 64-bit system is much more efficient. So services that make a lot of system calls, like some of our web components, can benefit by moving to 64-bit. Number three is computation. 32-bit systems have access to four general purpose registers, while 64-bit software gets 16, four times as many. Any software that makes heavy computation, like data encryption algorithms or HPC applications, can get a pretty big boost by moving to 64-bit and running on 64-bit OS.

And the last one is a 64-bit kernel is going to allow us to increase some of our OS limitations. For example, the maximum number of processes that we have today is around 2,500 on Leopard. And we really couldn't up that much higher with kernel running in 32-bit. But in Snow Leopard Server, we're going to be able to double, triple, maybe quadruple that. So that's going to help the performance and scalability of certain types of server applications. So those are the four great reasons why performance and scalability-wise that we care and we are so excited about this 64-bit transition.

And speaking of performance, that's our second topic. But before we talk about Snow Leopard Server, I want to talk a bit about how we did in Leopard Server. So what we did in the Leopard Server project is we looked at each of the subcomponents of OS and really optimized them for that new Intel hardware architecture. We implemented tons of features throughout the system, some examples here.

Here's the result. So comparing to Tiger Server, we tripled performance. So that was a lot of hard work, but it really paid off. Now, let's see what we're doing in Snow Leopard Server. Our number one goal is multi-core scalability. We are already up to eight cores and the numbers continue to increase, so it's critical that both our OS as well as server software can scale and scale to tens or even hundreds of cores. And in addition to all this optimization we're doing, we're also introducing new technologies like ground central dispatch so we can facilitate the massive polarization of all the tasks.

Another thing we are doing is we have this performance list to-do list that we didn't get to finish in Leopard Server. So here are some examples from that list. So we are basically going down the list and implementing them. Many of them are already in Snow Leopard while the rest are still coming. So at this point, with these changes in, what I want to do is take a look at how our server software is doing on top of this new OS, which you have on your DVD as well.

So bringing back our web server example, since Leopard Server, our performance already improved by 53%. So not bad. Here's the NFS number.

[Transcript missing]

The next topic is file system update. So as most of you know, our primary file system is HFS. And we've been improving this file system for years. We've added support for journaling, I believe in Jaguar. And then we added support for case sensitivity. And most recently, we added ACL support. So at this point, it's a very solid and mature file system that meets needs of most of our customers.

And most, but not all. So let's take a quick look at something else here. This is the storage capacity trend in terms of terabytes. So as you can see here, the graph is growing exponentially and our high-end customers have all these huge file system volumes that they have to deal with.

If you look at our hardware that we ship on high end, both the Pro lines and Server line, they can both accommodate three or four internal drives as well as we can attach external rate system. So our customers really need some kind of tool that they can use to manage all these spindles.

And while HFS is an excellent file system that's suitable for consumers and most of desktop needs, it really wasn't designed for the high-end configurations with lots of spindles and large volumes. But there is a file system that was designed specifically for those configurations, and that's GFS. So today, I'm happy to announce that we're including the full read-write version of GFS in Snow Leopard, both on the desktop and server side.

So both in the desktop and the server side, and along with HFS, we can cover the full spectrum of the customer needs. So we're pretty excited about this. And for those of you who are new to ZFS, let's take a quick look at what it can do. It's a 128-bit file system, not 64, but 128. And it's very scalable.

This is the maximum number of files that you can have on a ZFS file system. And it's kind of hard to comprehend this scientific notation, so let me help you with this. If you create 1,000 files every second, it's going to take you over half a million years to reach that limit.

So it's going to take our QA team a while to test this. I don't know if you can ship this next year. Here's another number. This is the maximum volume size. 16 exabytes. Sounds really impressive. So if you have a volume of this size and if you want to fill it, you need over 1.9 billion disk image files of dual-layer DVD. So it's a great movie collection here.

So it's a very scalable file system, and we don't have to worry about hitting the ceiling anytime soon. It also has support for redundancy, so if one of those drives goes, something goes wrong with those drives, you still have access to your data. does automatic error detection and correction, so normal running FSCK manually. Of course, has support for snapshots and clones.

And also has really nice volume management capabilities built right into it. So, for example, if your volume is getting full, you can simply attach another hard disk to dynamically grow that volume. So it's a real handy feature for the servers. So also there's dynamic striping. The bits are written out in stripes to all the spindles that's out there so we can get the most performance out of your system without actually doing any manual configuration.

And there are many other features that's built into this file system. Things like compression support and variable block sizes and so on. So we're really excited about this and we're looking forward to running our server software on top of this. And that's my update on the foundation layer.

So the Snow Leopard Server, it's gonna be fully 64-bit. And the performance is looking pretty good so far and we're gonna continue to work on this. And welcome to GFS. And now what I wanna do is invite Chris LeCroy to the stage so he can tell us about the enhanced services in Snow Leopard Server. Chris.

So thank you, Kazu. So Kazu told you about some great foundational things we're doing in the operating system for Snow Leopard Server. And I want to talk about some of our collaborative services, specifically communications and collaboration. So in Leopard Server, we released a new Wiki server, which was also involved, included a blog server, group mailing lists and group web calendar.

And we put a lot of work into making it really easy for people to use. End users can easily create their own Wikis without any administrator help. Editing is just a matter of clicking buttons and dealing with the very easy-to-use WYSIWYG environment. We made it really easy to attach documents and images into Wiki pages and so on. And so in Snow Leopard Server, we want to simplify that even more.

And actually, before I move on, one thing that did happen is as we deployed this at Apple, we had what effectively was an explosion of Wikis at Apple. And it's really become the primary way we get work done at Apple in terms of working on projects, dealing with departmental issues. There are even clubs at Apple that have set up Wikis. So we use it really heavily. And it's been actually really nice to be able to have a customer that basically sits right next to us and we can actually listen to those future requests.

So with that said, we are going to do some things in Snow Leopard Server to make the Wiki server more accessible. So we're going to make the Wiki server even better. So first is we're going to make it even simpler to create Wikis. This is probably an exaggeration. I don't think my mom actually knows what a Wiki is, but if she did know what a Wiki was, it will be something she'll be able to set up.

So we're moving all the Wiki creation directly into the web, which means that you'll no longer have to launch the separate directory app to create a Wiki. And you'll be able to walk through a very simple setup assistant, answer a couple of questions, customize your Wiki, and in literally a minute or two, you'll have a Wiki up and running. up and running and customized for your needs.

Second thing we found out at Apple is that with all of the wikis across Apple, it can be difficult to find things sometimes. So if I remember a phrase but I'm not quite sure which wiki it was in, I have to go from wiki to wiki performing searches to find the document I'm looking for.

Well, we're fixing that. We're going to give you a single location for doing a query, and that query will cause the wiki server to send back results from all of the wiki servers that you have access to in one location. So we think that'll be a very big time saver for people. So that's cross-wiki searching.

Next is support for QuickLooks on the Wiki server. So as I mentioned, the Wiki server makes it very easy to upload any kind of document into a Wiki page, but the problem there is that web browsers only know how to view and render certain types of documents like JPEGs and HTML and maybe PDFs if it's Safari.

So what happens is people end up having to download those Keynote files or those Numbers files so that they can open them up in an application and look at them. So what we're going to do is put QuickLook support in the Wiki server, which means that when I upload a Keynote file, upload a Numbers file or a Pages file or any other type of file, the Wiki server will automatically render a web-compatible version of that document that can be viewed directly in the Wiki, directly in the web browser on any platform. So I think that'll be a great boon to people.

And another problem that we've found with so many wikis at Apple is that wikis, one of the features of wikis is that you want to be able to monitor what's happening on them. So you want to be able to look for recent changes, see which new pages have shown up. Maybe see which pages have been commented because it may require some action on your part.

So we're introducing in Snow Leopard Server a new feature called My Page, which is essentially an aggregation of all of the changes happening across all of the wikis that you care about. So you'll be able to go to one place, one page, see all of the new pages that have been added to wikis you care about, any pages that have changed that you care about, any comments on wikis that you've changed about. And then from there, take actions such as maybe adding them into your favorite pages or actually going over and editing the pages some more. So again, this will be a big time saver for organizations. organizations where wikis were really taking off.

And then lastly, we're going to do a great deal of work in optimizing for the iPhone. So the existing Wiki server does pretty well with the iPhone, but what we want to do is take advantage of all of the new features coming to the iPhone in Safari, make the pages load blazingly fast. We're changing the interaction so it interacts much like the iPhone.

And we think that the combination of optimized for iPhone, quick looks on the Wiki and My Page are going to give you the ability to walk, to be anywhere in the world and get to all of the data in your organization in a way that's very, very simple.

So that's it for Wiki Server. I want to talk about the communications tool that you guys probably all use the most. In fact, I'm sure you use it the most. And that's Mail Server. So Leopard Server contains a very full-featured Mail Server, standards-based SMTP, IMAP, POP, includes some very nice virus filtering and junk mail filtering features. And it's really just a really nice workhorse of a server.

So for Snow Leopard Server, we're doing a few things. Number one is we're improving the performance. We're doing a complete overhaul of the engine, runs the Mail Server, and we're going to really ramp up the number of concurrent connections it can handle and make the thing really scale. And we think it'll really scream. So we're excited about that. Next, the long-standing feature request, which is vacation auto replies.

So end users will be able to specify a start date and an end date for out of the office. The server will automatically take care of sending emails off to people, letting people, responding to emails, letting people know that those people are out of the office. That'll all be automatic.

Next is server-side mailing rules. If you're anything like me, you probably subscribe to far too many mailing lists. Because of that, you've set up a lot of rules on your client to shuttle those mailing list mails off into separate directories. That works fine when you're on your Macintosh, but when you move to things like webmail or the iPhone, those messages begin to come into your main inbox, which can make it really difficult to get through your mail.

Side-mail rules will allow users to set up rules on the server that will do that shuttling for them. And before the mail even hits the client, the server will have put it into the appropriate directories for them. So that's mail. And next I'd like to move on to iCal Server.

So iCal Server is a new service we added in Leopard Server. It's a full calendaring and scheduling service, allows you to create meetings and invite people. It's an open source project. We open sourced it as part of Mac OS Forge as well as having it in our commercial product. And it's completely standards-based. It's based on a standard called CalDAV. And before I get into the features, I want to talk a little bit about that standard. So the developers of -- or the authors of the CalDAV spec did something very smart.

They took two existing standards, WebDAV and iCalendar, and basically mashed them together to create a new spec. And the value in that is this, that they could focus on calendaring and the details of calendaring. They didn't have to worry about things like access controls, which WebDAV supports, or authentication, which WebDAV supports, or a data format, which iCalendar supports. They could really focus on calendaring.

So the benefit there was that they were able to get the spec written very quickly, get developers on board very quickly. And get it pushed through the standards bodies very quickly. And speaking of the standards body, I want to talk just really briefly about an organization that really helped to drive that standard through. The IETF, and that is the Calendaring and Scheduling Consortium, or CalConnect.

It's a consortium of companies and universities and other organizations. Apple's a member.

[Transcript missing]

First is performance. So like Mail Server and many of the other services, we're putting a great deal of effort into improving the performance of the calendar server. And back in Cupertino, we've already seen some really great improvements.

And by the time Snow Leopard ships, we expect to see even more. And so we're going to really make this into something that can really scale to large organizations. Next is about push notifications, which is a little bit related to performance. You can clap. All you push notification freaks.

So, as I mentioned, CalDAV is based on WebDAV. WebDAV is based on HTTP. Well, HTTP is a polling protocol, which means that client asks for something, the server returns it. Client asks for something, server returns it. The server never really has a way to go and push things to the server.

We are adding push notifications, which will eliminate all this pulling. The problem with this is that it puts a lot of loads on servers. When you get thousands of clients continually asking, is there anything new? And in calendaring, it's never, and it's rarely new. 99.9% of the time, it's not. We all get maybe a handful of meeting invitations a day if we're really busy.

But it puts an enormous amount of strain on servers. So push notifications will take care of that. And while taking the strain off the servers, we'll give you near instantaneous invitations or you'll get near instantaneous invitations. Invitations and changes in your client. You won't have to wait for them like you do when you do with polling.

And then next, when we released iCal Server, there was one big feature request, and that was a web-based calendar client. Because CalDAV is a very new protocol, there's only one shipping server, which is iCal Server, and one shipping client, which is iCal. That makes it very difficult in a cross-platform environment. So we're going to be shipping a web-based calendar client in Snow Leopard Server. It's going to be a full CalDAV client. You'll be able to do everything you can do in a normal CalDAV client.

It's going to be very AJAX-y and very, very rich application. And we think this is actually going to really help drive the standard forward. because we plan to open source that as well. So it'll be available to people to put on their platforms and help drive the standard forward.

A little push happy. The last thing for calendaring server I want to talk about is the ability to invite anyone. So the way the CalDAV spec works, in order for me to invite you, you need to be a member of that CalDAV server. So we're adding support for inviting people outside the CalDAV server. What that means is that you'll be able to drag somebody from your address book, for example, and the server will determine automatically if it's somebody who's got an account on the CalDAV server or not or if they've got an email.

If it's email, they'll email it off to them automatically. If clients are using mail clients such as Outlook or Apple Mail, those clients will automatically send it off to their calendaring clients, and the whole process will be very transparent and I think work very well. So that'll be coming from Snow Leopard server for iCal server. So, I'd like to talk, those are new features we're adding to existing servers, services, and I want to talk about two new services that we're adding. So the first one is Address Book Server.

So what does Address Book Server allow you to do? It basically allows you to take all of those contacts that you keep locally right now and move them up to a server, which means that they're now on the network and you can get to them from anywhere. In addition to that, because they're on a server, you can also very easily share your contacts with your colleagues by just dragging them into folders and making that folder shared. Again, we like to deal in standards. And again, the developers of this standard we're using took advantage of two existing standards, WebDAV again, and on the other side, vCard, and came up with a protocol called CardDAV.

CardDAV is basically a mashup of WebDAV and vCard. Some of you may be asking, well, why not use things like LDAP or other directory services? There are some pretty good reasons for that. CardDAV is designed specifically to be a global address book. One reason is that it doesn't contain IT-sensitive data.

LDAP servers contain user accounts, possibly authentication information, all sorts of things that directory administrators do not want intermingled with data that users have created. The second thing is the access controls in LDAP are not all that rich, especially if you want to be able to do very fine-grained sharing of your contacts with colleagues. And because CardDAV uses WebDAV... There's a very, very rich access control model already there.

Another problem with things like LDAP is if you ever need to add a new attribute onto a contact, for example, a Jabber ID or an OpenID URL, which the LDAP schemas probably don't know about, the only way to really do that is to update your LDAP schema on the server. You'll probably have to also update it on your LDAP client, and that's not something people are ever going to do. So vCards don't have a fixed schema.

They're specifically designed to allow extension by anybody. So an end user can add a new attribute, and everything will work just fine. No schema change is needed. And the last thing is that because it's built on top of WebDAV, which, as I mentioned, is HTTP, makes this protocol very web-compatible.

So that means that people who are writing rich web applications can get into this data and use their standard JavaScript and standard HTTP methods to get to all this data. They don't need a gateway to LDAP or anything like that. So it's going to be... We're expecting to see a lot of people use this protocol to build some very, very rich collaborative social applications on the web. So enough protocol. I'd like to ask Juussi-Pekka Mantere to come up and give you a very brief demo of Address Book Server. Thank you, Chris. All right. Thank you, Chris. So if we can go to demos, please.

[Transcript missing]

And let's see, I also have multiple accounts here. So I don't have just a single server. I have configured a second server, just like you would have multiple accounts with Mail or iCal. You can have multiple accounts with the address book for several different address book servers.

So here I have one address book server that is specifically for the developer conference. So I have different groups here. One is for the speaker support team, our graphics people who are helping us complete our slides, and a second group for the presentation team. So here I have a pool of contacts that I stay in touch with for the duration of the conference. And I noticed that there's a person missing from this list of contacts. And I seem to have a vCard for Zoe.

So for me to edit this list of contacts, I can just drag Zoe's contact into the shared address book, and it's immediately available to anyone else using the same address book server. And any updates that I do are also pushed back to the server, and anyone connecting to that server again will get the most up-to-date information. So I can actually edit Zoe's contact, and let's say we want to add her a picture. So we can just drag her picture in here. And we can also change her name.

So we can change her, let's say give her a chatber ID on our iChat server here. So let's call it Zoe@chat, WWDC, Apple.com. And that's it. So any edits that I just made will now be pushed to the server, and other clients will get that immediately downloaded when they connect to the server the next time.

So this is address book server. And another thing with address book server with the accounts is that these contacts are stored for a certain time. So they're stored for offline use. So even if I'm disconnected from the network, any contacts that I see here are actually cached for offline.

So even when I'm not on the network, I'm on the plane or on a remote island, I still have these contacts accessible to me. So I can still at least compose email or let's say send SMS messages to the contacts that I have when they're cached for offline use.

So that's a brief overview of the address book server, and we have a session tomorrow. So if you want to know more about that, please do. If you want to know more details about the address book server, please come to our session at 2:00. And that's it. And back to Chris. Thank you.

The address book server allows you to put your contacts on a server. You can share them with people. It works when you're offline and it works with other applications within the system. And in the vein of driving standards again, again we're going to open source this project because we really want to drive card data as the standard for global address books.

And the last new feature I'd like to talk about is remote access. So we're adding a new proxy service into Mac OS X Server for Snow Leopard that will allow you to configure your system so that people can connect to their email, their calendaring system, their address book server, select websites without VPN in a very secure fashion. This is a service you would generally put into your DMZ or your border zone. That'll be coming in Snow Leopard as well. So.

We've talked about some new features coming to our existing servers, the Wiki server, Mail server and the Calendar server, getting some great new features. And we have two new services to Snow Leopard server, the Address Book server, which will be open sourced and completely standards-based, and our new remote access functionality in Snow Leopard server.

That's all I've got today, and thank you for letting me talk with you. And I'd like to bring Kazu back up to talk about... I need to wait for Kazu to get his microphone on. There he is. To talk about some very exciting things happening with Podcast Producer. Thank you, guys.

Hello again. So, podcast producer. It's a new feature we introduced in Leopard Server last year, but before we talk about it, I want to talk a little bit about podcasting in general. It's background information. How many of you listen to or watch podcasts? Pretty good, right? So you're one of those 30.3 million people in the US.

So as you can see here, the popularity of podcasting is continuing to grow at a really good pace. And more and more people are producing podcasts. Certainly in all the major media companies are doing that, more and more of that. And there are some new ones that's becoming really popular.

Enterprises uses podcasting for both external communication to the public as well as for internal consumption for things like employee training videos. And many companies are starting to do that. And of course, it's really exploding in higher education with all the students carrying iPods everywhere. And here at Apple, we are fully embracing this technology as well. We, of course, have podcasting built right into the iTunes app. And we've created a dedicated forum for podcasting for the higher education communities.

So it's really at the core of Apple's business. On the hardware front, every single system that we ship is podcasting-ready, the Macintosh, iPods, iPhone, Apple TV. But in this big picture, there was one thing that was missing, and that's a tool that businesses and institutions could use to produce podcasts in volume while meeting all these requirements around scalability, security, flexibility to fit into existing infrastructure, and so on.

And podcasts produced a field that whole. It's a complete end-to-end solution that lets you capture audio and video and automatically push it out to the server, which in turn pushes it down to the grid for processing. It does things like adding watermarks, appending intro movie, and encoding into different file formats and screen sizes.

And when that's done, it automatically gets pushed out to the destinations of your choice, which may be iTunes or Web Server, Wikiserver, or any other publishing system. And while that's under the hood, it's really powerful and sophisticated. It's really easy for the end-user. All they need to do is just a few clicks to start and stop the recording. You select the workflow, click OK, and that's it.

When the processing is done, the podcast is available to the end-user for their own consumption automatically. So this feature was received very well by our customers, especially those in higher education, and many of them are deploying it today. And what I'm going to do now is to invite a guest speaker, Mr. James Partridge from Oxford, so he can tell us about the features that we're using. about what they are doing as podcast producer at Oxford. James?

[Transcript missing]

So after evaluating a number of different options, we've settled on Podcast Producer because we feel that it provides us with the flexibility that we really need within this environment. The extensible architecture of Podcast Producer integrates quite well, very quite easily into our environment. So what we're doing is we're concentrating on Podcast Producer and Telestream's episode podcast as our kind of core media production engine.

And this leaves us to focus on the entry and exit points for Podcast Producer. And in order to do this, we're using our existing Open AFS service, which we've now extended with a kind of special podcasting space. And as this uses the MIT KDC for authentication, this gives us the closest we can get to a kind of university-wide access point.

So, very broadly speaking, and this is of course simplified, this is how we expect the process to work. So, content can be captured from any one of a number of different sources. There's going to be plenty of lecturers who are often giving tutorials. They're in their own offices and rooms, and they'll be doing their own system. And we also have classroom capture points, of course. And then we'd have material from our media production services, which is usually very high-profile speakers. the Dalai Lama a week or two back, that kind of thing.

Now, all of this content is essentially going to be dumped into the Open AFS system. We expect this content to come in several forms. It'll be up to people where possible. They'll pick a workflow that will output things the way they want. Or an alternative would be that they would submit a finished podcast. Or we also expect people to just give us the raw materials, and we'll have a post-production team in the computing service who will work on that.

Now, in terms of the destinations for this content, essentially we see three possible paths at the moment. The first one is that we anticipate that, well, we know, in fact, that a reasonable number of colleges and departments will just want the material recycled back to their own web servers for their own internal departmental use.

A second alternative is what we call Oxitems, which is essentially our own internal RSS feed aggregator. We built this before we really knew that iTunes U was coming to Europe, but it's still very useful for our purposes. If content is submitted to Oxitems, there'll also be another option that it can be sent to iTunes U as well. As things currently stand, we've got a large part of this infrastructure already in place and we'll be extending it through the summer, we hope, resources permitting.

There's training programs already underway, particularly aimed at the faculty. Some of our faculty are fairly elderly and infirm, and they require quite a lot of support. And some of the students, too. And so we've got training programs in place, and where possible, we'll be putting in podcasting stations in lecture rooms and trying to push that out across the university.

We also already have a large number of RSS feeds already in our Oxitem system. They're already available for students. And essentially, we are planning to join iTunes U in September of this year. We just missed the initial launch. But once we join iTunes U, then all of the existing feeds should be redirected up there as well. And all being well, we'll hope to extend this service through 2009. Thank you very much.

Thank you, James. So we are really thrilled with all these activities happening around Podcast Producer and we want to keep this momentum going. So what we are doing in Snow Leopard Server is we are introducing Podcast Producer 2, a brand new version of Podcaster with a bunch of new features.

So, and I don't have time to talk about everything, but I want to talk about a few of them. And by the way, every single one of them that I'm going to talk about today is in response to all this great feedback that we've been receiving from our customers.

The first feature is called Podcast Library. Podcast Producer 2 automatically archives all the submitted and generated media files for long-term storage and organization. And you can issue remote search commands to it, and the library automatically generates Atom Feed and also serves the podcast to you. So this means you no longer have to have a separate publishing server. You can do everything within Podcast Producer. And with this feature and integration of Podcast Producer 2 and iTunes U, now you can host iTunes U content locally on your own server instead of pushing it to the Apple server if you want to.

The second feature is high availability. This is because many of our customers deploy Podcast Producer as a mission-critical service. With Podcast Producer 2, you can now configure active/passive failover configuration for both Podcast Producer Server and X Grid Controller. So if you accidentally spill coffee on your server, the backup automatically comes up. And then during the transition, all the active jobs as well as all the pending jobs are automatically moved over, so it's going to be completely transparent to the end users.

[Transcript missing]

The most frequently used or usage pattern for the podcast producer out there today is capturing lectures, obviously. So with Podcast Producer 2, you can capture both the video of the speaker and the presentation on the screen and have it automatically create picture-in-picture videos. And of course, you have the option to select different types of transitions and so on. And this is one of the most frequently requested features, so here you go. The last but not the least, Podcast Producer 2 includes a new workflow editor.

[Transcript missing]

So I'm really excited to be here, to be able to show you the new Podcast Producer Workflow Editor. But before that, I'd like to make sure that everybody's on the same page about what a workflow actually is. So think of a podcast producer workflow as a recipe. It's the podcasting recipe. So as in any recipe, you have your list of ingredients. So these are the different resources the podcast reader system uses to produce your final content. Examples are like an intro video or a watermark image that you want to brand your content with.

But in the recipe, you don't just have ingredients. You also have instructions. Instructions are a list of tasks that have to be accomplished in a certain order to produce your content. Same thing for podcast producer workflows. The idea here is that you also have order in them, right? So you have to do certain tasks in a certain order. You can't bake your bread before you've made your dough.

There are tons of different tasks that a podcast producer can do, but we've kind of brought them down and broken it down into three main categories of tasks, and I'm going to walk you through those right now. The first is mixing your content. This is where you have your intro video, your watermark image, and you're just going to throw it all together and produce your content and make what you want your final result to look like.

Once you have this, you have your dough. So then you want to bake it, right? So this is where you set the different encoding settings and you encode your content to flatten out that content to the different types you want to. For example, you might want to encode to an audio-only format, an iPod video format, and maybe a higher definition Apple TV format.

Once you've baked your content or you have your food, right, for any kind of food, well, you have to serve it. So this is where the publishing comes in. You have to publish your content. So this might be putting it into some RSS feed or an Atom feed or just uploading to a certain blog server. So to recap real quick, you have to mix your content, bake it, and serve it. So this is what a podcast research workflow actually looks like.

So that's great, but let's see how we can actually build one. So this is the fun part. Now I get to show you one of the most exciting things I've ever worked on, which is the Podcast Producer Workflow Editor. So we're going to move over here to the demo machine, and I'm going to launch the Workflow Editor.

And you can see that we've now created a workflow creation path. And we're going to walk you through seven different stages in order to create your new podcast producer workflow. So I'm just going to walk you through those now and show you how easy we've made it for you.

I'm going to start off with the information panel. And the first information I have to give the workflow is its name. This is the name that is going to end up in Podcast Capture and that your submitting users are going to see when they choose the workflow they want to submit to. So we're going to call this "My First Workflow." Can set some copyright information. Can give it a little description to help the end users choose which workflow they want to submit to.

Once we've done that, we can now move to our first active stage. This, as I was just talking about, we were talking about the mixing of your content. So we've broken this down into two separate stages, the import stage and the edit stage. So in the first, in the import stage, this is your funnel.

This is where you define what kind of content your podcast producer workflow is going to accept. It can either accept, as you see here, a single QuickTime movie in SpotSource or two videos. The dual video input source is the feature Kazir just talked about, that we now support picture-in-picture. Since it's a new feature, I'm just going to leave that one selected.

and move to the editing stage. This is where I get to brand my content. You can see that there are four different elements here on the screen. We have the first, the intro video here. We then have the bumper title. We then have the main content that I can overlay a watermark on or maybe some titling information. I'll show you that. And the outro video.

So I really just want to change real quickly the intro video. So I'm going to grab my introduction video here, drop it onto the intro video element. And you can see here that I can skim through, like in iPhoto, I can skim through to get a preview of what the content in there is. My art department has also supplied me with a watermark, and I'm just going to drag and drop this onto my content, and now my content is watermarked.

I showed you the skimming so I can skim over these different elements to give me a preview of how they're playing. I also have the preview button here. So if I click this, this will stitch all the different elements together and preview what the main content will actually look like.

The import stage is providing some sample video of what this workflow will actually look like. So if I skim through here, there's some sample content here too that shows me what it'll look like. And then if we skim all the way here to the end, I get my outro video.

So that's the editing stage. If we now move to the export stage, this is where the baking that we were talking about just occurs. By default, the workflow editor has chosen a iPod video format and an iPod audio format. So these are, by default, the two export configurations that you'll have.

But maybe I want to add maybe a higher definition export setting. So all I have to do here is click the plus button, choose QuickTime, choose, let's say, Apple TV for here in the pop-up, and there you go. I've now added a encoding to Apple TV in my workflow. So any--so all my output will be outputted to iPod video, an audio only, and an Apple TV version.

Once I'm done baking my content, I can now move to the distribution of my content. So we've also broken this down into two stages. You have your publish stage and your notification stage. So publish, we're by default publishing to the podcast library, which is a new feature in Podcast Producer 2.

But I also have a selection of other destinations I can publish to. And in this case, I want to publish to iTunes U, for example. So I'm just going to add iTunes U. Get to choose which produced video I want to publish. We're going to choose the Apple TV version here.

Then asks me for some iTunes U specific information. So my site address is podcastproducer.apple.com. My tab ID is 2020. And then I just have to enter my credentials. Once I've added this information, I just click Done here, and now this workflow will upload the Apple TV version to iTunes U for me automatically.

Now that I'm done with my publish stage, I can move on to notification. And by default here, the Podcast Producer Workflow Editor will send an email to the administrator and to the submitting user informing them that the Podcast Producer Workflow has completed successfully. There are also other options, like I can send an iChat message if I would want to.

The last step here gives me a quick overlook and an overview of my workflow and just a quick idea of the complexity of this workflow. Now that I'm done here, I can just go up to File, Save. The workflow editor now is prompting me for a master password.

What you saw in the iTunes U step, we gave it some credential information. This is sensitive data that we don't just want to have in clear text in the workflow. So we're going to encrypt this information with a master password for you. So we'll just leave this password here. And I will save this to the desktop, my first workflow.

And we'll click save. And now the workflow is on my desktop. And that's great, but now if I want to deploy my workflow, how do I get it up to the server? Well, you may have seen when I was in file here, there is an upload workflow. By selecting this option, I can now specify where my podcast producer server actually is, a admin username and credentials, and my workflow will automatically be deployed to the podcast producer system.

So that's how easy it is to make a workflow now with a workflow editor. What I'd like to show you now is a sample output from the-- what is the sample output of this workflow. So we ran a video through this workflow, and it's already on iTunes U waiting for us, so why don't we just go there now.

And I think it's in History of Mathematics. So let's just access that page here. And I believe it was History of Pi. So let's just get that video here. And now in my History of Mathematics playlist, I can play it back. So here you see the intro video that we added. The bumper title.

I want to talk to you today about two of my favorite things, AppleScript and math. And when I was learning AppleScript, I came across this list of predefined variables in the language. And one of them kind of left off the page at me a little bit. I mean, really, pi? What is pi doing on a list of variables? It's not a variable, it's a constant. It's the ratio of the circumference of a circle to the diameter of every circle in the universe. It's got the same value of pi, 3.14159. You know what it is.

But in AppleScript, AppleScript knows that, but you can also change it. And it finally occurred to me that this might actually be useful in a couple of situations. For instance, depending on when and where you're writing your AppleScripts, back in the day, somebody created a molten sea that was 30 cubits around and 10 cubits across. So if you were doing biblical AppleScript programming, you might start off your AppleScript like this. Set pi to 30 divided by 10. You want to move forward a little bit.

In Indiana in 1897, they unanimously passed a bill declaring that in Indiana, the value of pi was going to be 3.2. So every AppleScript programmer back then in Indiana started their script this way. Set pi to 3.2. So we're running out of time here, so I'm just going to pause it here, and I encourage you to come to our session on Wednesday, and we will play the whole video for you.

So there you got a little preview of what the picture-in-picture looks like and also how easy it is to create a podcast producer workflow now with a workflow editor. So that's it. Thank you very much and back to you, Kazu. Thank you, Kjell. Back to the presentation, please.

Okay, so we've got very exciting feature sets for Podcast Producer 2. We've got the Podcast Library, failover support, and picture-in-picture, and the last one is the visual workflow editor. But we do have a number of other features that we just didn't have time to talk about today. For example, we do have complete Corvus authentication support just for James.

So if you're interested in this technology, there are a few sessions that are dedicated, as Kjell mentioned. On Wednesday at 9 o'clock, we're going to talk about all the features of Podcast Producer 2 in detail, including the one we didn't talk about today here. And on Thursday at 10.30, Kjell and another engineer is going to talk about custom workflows, and they have some really, really cool demos.

So in fact, they're so cool that they didn't want to do it here because they wanted to keep it for their own session. So please go check them out. And that's all I had for Podcast Producer, so now I'd like to give the stage back to Greg. Thank you.

Thanks, Kazu. So that's Snow Leopard Server. So just to recap, we've enhanced the foundations, fully 64-bit, even more performance in introducing ZFS. We have some great new features in the Wiki, Mail Server and iCal Server, and we've introduced the Address Book Server and Podcast Producer 2 with the Podcast Library, dual-source video and easy workflow editing. There's a lot more that we're going to be talking about these services throughout the week, so please come to the sessions and labs. We hope to see you there, and thank you all for attending. I hope you have a very good WWDC.
