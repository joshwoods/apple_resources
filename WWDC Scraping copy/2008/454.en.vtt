WEBVTT

00:00:20.300 --> 00:00:22.800
Good afternoon, everyone,
and welcome to session 454

00:00:23.030 --> 00:00:27.340
on Optimizing Websites.

00:00:27.900 --> 00:00:29.700
We've been talking to
a lot of you this week,

00:00:29.890 --> 00:00:33.400
and we've heard lots of
stories about websites not

00:00:33.400 --> 00:00:37.160
loading as fast as you'd like,
using more bandwidth

00:00:37.210 --> 00:00:40.340
than you probably want,
and also that you're feeling

00:00:40.350 --> 00:00:43.940
a lot of pressure to add more
interactive features to your

00:00:43.940 --> 00:00:46.560
websites and your web applications.

00:00:46.560 --> 00:00:51.270
And you really want to know how
you can get the most performance

00:00:51.270 --> 00:00:53.070
out of the Safari browser,
and coincidentally,

00:00:53.070 --> 00:00:53.070
every other browser out there.

00:00:53.270 --> 00:00:55.580
Well, my name is Jeff Watkins,
and I'm going to be talking to

00:00:55.620 --> 00:00:56.830
you a little bit today about that.

00:00:57.100 --> 00:01:00.320
And with luck,
maybe we'll answer all of your questions.

00:01:00.320 --> 00:01:02.750
If not, maybe we'll give you
some food for thought.

00:01:05.840 --> 00:01:09.030
Today we're going to cover in
depth the problems that are

00:01:09.030 --> 00:01:10.840
facing all of our websites.

00:01:10.840 --> 00:01:15.110
You know, we've talked to a lot of you,
and you're facing the

00:01:15.210 --> 00:01:17.440
same problems that we are.

00:01:17.440 --> 00:01:17.440
And

00:01:18.600 --> 00:01:22.500
We're also going to give you some
really good strategies that you can use,

00:01:22.500 --> 00:01:26.580
that you can take back to your
offices and use in optimizing

00:01:26.580 --> 00:01:28.480
your websites as well.

00:01:28.850 --> 00:01:31.920
And then we're going to run through
a case study of what we're doing

00:01:31.920 --> 00:01:36.590
on the online store to put these
strategies in place to really

00:01:36.590 --> 00:01:39.450
drive the performance of our site.

00:01:39.910 --> 00:01:44.860
Lower our load times and decrease
our bandwidth utilization.

00:01:44.980 --> 00:01:47.040
And then finally,
we're going to run through

00:01:47.040 --> 00:01:50.960
some interactivity issues,
how you can improve the performance

00:01:50.960 --> 00:01:55.320
of your JavaScript so that you can
add more and more rich interactive

00:01:55.380 --> 00:01:57.240
features to your website.

00:01:57.380 --> 00:02:02.700
So let's step into the Wayback
Machine and zoom all the way back to

00:02:02.700 --> 00:02:06.960
1999 and take a look at a web page
that really would have required no

00:02:06.960 --> 00:02:09.260
optimization if we were loading it today.

00:02:09.260 --> 00:02:14.140
I'm speaking, of course,
of the home page of the online store,

00:02:14.140 --> 00:02:18.600
circa 1999 or so,
judging by the clamshell iBook.

00:02:19.780 --> 00:02:24.490
And it's no wonder this page would take
almost no time for a browser to load.

00:02:25.030 --> 00:02:27.280
There's half-dozen to a dozen images.

00:02:27.480 --> 00:02:28.430
There's no CSS.

00:02:28.450 --> 00:02:30.180
There's no JavaScript.

00:02:30.180 --> 00:02:33.500
It's really a pretty static, simple page.

00:02:33.500 --> 00:02:38.020
Load this in Safari today,
and it loads in a heartbeat.

00:02:38.020 --> 00:02:42.940
Now, if we fast-forward to today,
this is the online store

00:02:43.350 --> 00:02:47.990
as of just prior to Monday,
and it's a lot richer.

00:02:48.000 --> 00:02:49.080
We're taking advantage of the fact that
we're using the same old web page that

00:02:49.080 --> 00:02:49.660
we used to use in the old web page.

00:02:49.660 --> 00:02:51.660
We're taking advantage of the
separation of presentation and content

00:02:51.660 --> 00:02:57.580
and a lot more interactive features,
some of which we'll actually see today.

00:02:57.580 --> 00:03:03.880
And the problem is that
we have 13 CSS files.

00:03:05.810 --> 00:03:10.920
24 JavaScript files and a
grand total of 80 images.

00:03:10.920 --> 00:03:15.120
Now, that's a total asset of
117 assets on the page.

00:03:15.120 --> 00:03:18.760
Now, you may be saying to yourself,
so what, who cares?

00:03:18.870 --> 00:03:22.950
What really -- what penalty are we
paying for having 117 assets on the page?

00:03:22.950 --> 00:03:25.720
And it turns out we're
paying a pretty high penalty.

00:03:25.720 --> 00:03:31.200
If you were here yesterday and you got
to see the debugging session for Safari,

00:03:31.230 --> 00:03:33.630
you're probably familiar
with this already.

00:03:33.630 --> 00:03:36.630
This is the resource panel
in the new Web Inspector.

00:03:36.630 --> 00:03:39.760
And what this is telling us,
when we load the home

00:03:39.760 --> 00:03:44.500
page of the online store,
is that it takes 12 seconds and

00:03:44.500 --> 00:03:48.300
841K just to get the home page.

00:03:48.330 --> 00:03:51.170
I don't know about you,
but I consider that unacceptable.

00:03:52.000 --> 00:03:56.310
So let's dive into this a little
bit and try to understand where

00:03:56.310 --> 00:03:59.040
those numbers are coming from.

00:03:59.040 --> 00:04:01.900
Why is it taking 12
seconds and good Lord,

00:04:01.900 --> 00:04:04.280
where's the 841K come from?

00:04:04.280 --> 00:04:07.100
So in order to do that,
I'm going to ask you to

00:04:07.100 --> 00:04:10.280
bear with me a second,
and we're going to run through

00:04:10.290 --> 00:04:11.600
the anatomy of browser request.

00:04:11.600 --> 00:04:13.990
I know for a lot of you this
is the sort of stuff you're

00:04:13.990 --> 00:04:16.980
already very familiar with,
but there are two really important

00:04:17.040 --> 00:04:18.880
factors I want to talk about here.

00:04:19.900 --> 00:04:22.070
The first thing that the
browser has to do is it has to

00:04:22.070 --> 00:04:23.900
open the socket to the server,
obviously,

00:04:24.310 --> 00:04:26.970
otherwise it's not going to be able
to get any data back and forth.

00:04:27.020 --> 00:04:30.050
Then it sends its request over,
and ultimately it gets

00:04:30.050 --> 00:04:31.720
some data from the server.

00:04:31.720 --> 00:04:35.330
Really, like I said,
this is introductory stuff.

00:04:35.590 --> 00:04:38.880
But there are two things that
often get overlooked here.

00:04:39.030 --> 00:04:42.120
The first is latency,
and the second is overhead.

00:04:42.120 --> 00:04:47.190
Now, latency is the time from when the
browser makes its request and until

00:04:47.190 --> 00:04:49.860
it receives its first byte of data.

00:04:49.900 --> 00:04:50.130
So the first thing that the browser
has to do is it has to be able to

00:04:50.130 --> 00:04:50.320
get the data back to the server.

00:04:50.320 --> 00:04:50.320
The second thing that the browser
has to do is it has to be able to

00:04:50.320 --> 00:04:50.320
get the data back to the server.

00:04:50.320 --> 00:04:50.440
So the first thing that the browser
has to do is it has to be able to

00:04:50.440 --> 00:04:50.660
get the data back to the server.

00:04:50.910 --> 00:04:52.900
That's really, really hard to reduce.

00:04:52.900 --> 00:04:56.300
You know, if you've got a data center
here in Cupertino and your

00:04:56.330 --> 00:05:00.120
visitors are over in Oslo,
the packet's got to get here somehow,

00:05:00.120 --> 00:05:01.480
and that takes time.

00:05:01.500 --> 00:05:05.940
So on the store, we use an edge caching
solution from Akamai,

00:05:05.940 --> 00:05:11.300
and that means that the cache is as
close to you as we possibly can get it.

00:05:11.300 --> 00:05:15.710
So we see average latency of
about 68 to 70 milliseconds.

00:05:15.770 --> 00:05:19.880
That's really great,
but it's still 68 to 70 milliseconds.

00:05:19.900 --> 00:05:23.030
And for the home page,
we see a total latency of

00:05:23.030 --> 00:05:24.720
two and a half seconds.

00:05:24.800 --> 00:05:29.030
Now, that's time that the browser,
great browser that it is,

00:05:29.030 --> 00:05:31.300
is just sitting there idling.

00:05:31.300 --> 00:05:32.890
It's not doing anything.

00:05:32.890 --> 00:05:36.360
It's not loading fancy pings.

00:05:36.360 --> 00:05:39.550
It's not caching its JavaScript.

00:05:39.550 --> 00:05:41.370
It's doing nothing.

00:05:41.380 --> 00:05:44.320
So we really want to drive
that down a little bit more.

00:05:44.320 --> 00:05:47.840
And then the second
big issue is overhead.

00:05:48.560 --> 00:05:51.350
And that's the number of bytes
that the browser sends to the

00:05:51.350 --> 00:05:54.600
server and the server sends back
to the browser that's used simply

00:05:54.600 --> 00:05:58.100
to negotiate the transmission,
saying, hey, give me this file.

00:05:58.100 --> 00:05:59.500
Okay, here's your file.

00:05:59.500 --> 00:06:00.840
Here's how big it is.

00:06:00.840 --> 00:06:02.740
Here's when it was last modified,
so on and so forth.

00:06:02.800 --> 00:06:05.690
Now, that varies by browser to
browser and server to server,

00:06:05.690 --> 00:06:09.600
and we see that average somewhere
between 500 and 1,000 bytes.

00:06:09.680 --> 00:06:12.360
Obviously,
if you have big cookies or other

00:06:12.360 --> 00:06:16.760
attributes that they're sending along,
that could be even higher.

00:06:17.220 --> 00:06:22.300
On the home page of the store,
we see a total of about 63K.

00:06:22.320 --> 00:06:26.400
Now,
that doesn't improve our page at all.

00:06:26.480 --> 00:06:31.020
It doesn't make for a better experience
for you when you come to the store,

00:06:31.020 --> 00:06:33.140
and I'd get rid of it if I could.

00:06:33.140 --> 00:06:36.090
So let's take a look at,
we're going to take a look

00:06:36.230 --> 00:06:37.950
at ways that we can do that.

00:06:41.410 --> 00:06:42.370
This is all good.

00:06:42.660 --> 00:06:44.890
I mean, we've got 12 seconds.

00:06:45.080 --> 00:06:49.160
Fortunately, the resource inspector
already includes latency,

00:06:49.240 --> 00:06:53.580
but it has no real way of,
or it doesn't today, include overhead.

00:06:53.580 --> 00:06:57.490
So that boosts our total
bandwidth usage up to 905K,

00:06:57.490 --> 00:06:59.390
which is just way too much.

00:06:59.390 --> 00:07:02.620
I mean,
we're pushing a full megabyte here.

00:07:03.300 --> 00:07:06.480
But we've already seen that we're losing
two and a half seconds to latency.

00:07:06.480 --> 00:07:10.860
And if you're on a residential cable
connection or T1 or anything like that,

00:07:10.860 --> 00:07:15.250
you should be able to download a full
megabyte in four to five seconds or so.

00:07:15.420 --> 00:07:19.500
So I'm kind of curious where the
other five seconds are going.

00:07:19.500 --> 00:07:23.220
And it turns out there are a number
of roadblocks that stand between the

00:07:23.220 --> 00:07:27.340
browser and actually rendering your page,
even if it's got all the data.

00:07:27.340 --> 00:07:32.680
Now, the first roadblock is that the
browser won't render any elements

00:07:32.680 --> 00:07:35.180
until... All the CSS is loaded.

00:07:35.390 --> 00:07:39.410
Now, that means that if you told it
you need these CSS files to know

00:07:39.770 --> 00:07:43.740
what color and what shape and what
background to use for the nodes,

00:07:43.740 --> 00:07:46.700
obviously,
it wants to wait until that information

00:07:46.710 --> 00:07:50.900
is available so that it can render
your page correctly the first time.

00:07:51.100 --> 00:07:54.910
Secondly, elements may not render
until they're fully closed.

00:07:54.950 --> 00:07:59.430
Now, depending on your browser,
this can be either good or bad.

00:07:59.430 --> 00:08:03.660
And if you have like a highly
position-dependent layout,

00:08:03.660 --> 00:08:08.120
so you've got floats with absolute
positioning and all sorts of fun stuff,

00:08:08.120 --> 00:08:12.150
the browser may honestly not know
where to put the node until it's

00:08:12.360 --> 00:08:14.310
all done laying out the node.

00:08:14.760 --> 00:08:18.060
Now, as we'll see, this gets exacerbated
by the next problem,

00:08:18.060 --> 00:08:22.600
which is that the browser stops rendering
while it's processing a script element.

00:08:22.600 --> 00:08:25.000
And the reason for this is really simple.

00:08:25.000 --> 00:08:29.930
And that's because in the old days,
and to some degree still today,

00:08:29.930 --> 00:08:35.860
coders could call document.write and
modify the file as it's being parsed.

00:08:35.860 --> 00:08:39.790
Now, naturally, if you're going to modify
the file as it's parsing,

00:08:39.790 --> 00:08:42.520
the browser makes an optimization to say,
hey,

00:08:42.580 --> 00:08:47.160
I'm not going to keep parsing because...
...if you change the document,

00:08:47.160 --> 00:08:48.560
I'm going to have to rewind and reparse.

00:08:48.560 --> 00:08:53.120
Safari 4 is doing a...actually,
it's in the...some of the recent web kits

00:08:53.120 --> 00:08:57.050
are doing a great job of spinning off a
secondary parser to keep parsing and keep

00:08:57.140 --> 00:08:59.360
loading your files as an optimization.

00:08:59.360 --> 00:09:02.660
But we really can't count
on that from all browsers.

00:09:02.670 --> 00:09:06.080
And then finally,
synchronous AJAX requests

00:09:06.080 --> 00:09:07.630
stop everything.

00:09:07.630 --> 00:09:11.350
I don't know if you've
noticed on the online store,

00:09:11.350 --> 00:09:14.740
but as we're loading the page,
you can't swap all the files.

00:09:15.360 --> 00:09:16.630
...and then you can't swap all the files.

00:09:16.630 --> 00:09:18.150
So, we're going to have to switch
off to another tab because

00:09:18.210 --> 00:09:19.830
we've brought your browser to a
standstill while we're making all

00:09:19.840 --> 00:09:21.080
of our synchronous AJAX requests.

00:09:21.250 --> 00:09:24.160
Now, from our perspective,
we could see that as an advantageous

00:09:24.160 --> 00:09:27.690
thing because maybe you've got
Amazon open in your comparison shopping.

00:09:27.690 --> 00:09:31.280
Well, you can't buy it from Amazon while
you're waiting for us to load.

00:09:32.570 --> 00:09:35.360
...but similarly, you can't go to Gmail.

00:09:35.360 --> 00:09:39.570
You can't do pretty much anything while
you're waiting for our page to load.

00:09:39.570 --> 00:09:42.720
And ultimately,
we come to be seen as the culprit.

00:09:42.720 --> 00:09:44.960
So, we don't want to be the culprit.

00:09:44.960 --> 00:09:46.160
Right?

00:09:46.300 --> 00:09:50.770
So, let's take a look at how these
things play on the store's homepage

00:09:50.810 --> 00:09:56.100
because it turns out they're directly
responsible for our total load time.

00:09:56.120 --> 00:09:59.390
We've got 13 CSS files, as I said.

00:09:59.390 --> 00:10:04.310
Well, every single one of them has to be
fetched and parsed and the entire

00:10:04.410 --> 00:10:08.930
CSS structure has to be rendered
or put into memory before a single

00:10:08.930 --> 00:10:11.200
node in the body will be rendered.

00:10:11.200 --> 00:10:12.680
That's 13 CSS files.

00:10:12.780 --> 00:10:18.160
Next, we've got two script elements
with external sources.

00:10:18.160 --> 00:10:22.050
So, we have to fetch those files,
wait for them to load, parse them,

00:10:22.130 --> 00:10:26.710
execute them, and it turns out that those
two script files fire off 10

00:10:26.890 --> 00:10:28.240
synchronous AJAX requests.

00:10:28.240 --> 00:10:31.810
So, before we've even gotten to
the body of the document,

00:10:31.890 --> 00:10:37.240
we've caused the browser to come to a
complete and screeching halt 12 times.

00:10:37.300 --> 00:10:39.110
I don't know about you,
but I'm beginning to see where

00:10:39.110 --> 00:10:40.500
this 12 seconds is coming from.

00:10:40.500 --> 00:10:44.100
It doesn't get any better, sadly,
once we get into the body,

00:10:44.100 --> 00:10:48.760
because we have an additional four
script elements with external sources.

00:10:48.760 --> 00:10:50.200
Okay.

00:10:50.200 --> 00:10:52.600
Again,
four more files that have to be loaded,

00:10:52.600 --> 00:10:53.980
parsed, and executed.

00:10:53.980 --> 00:10:56.050
Seven inline scripts.

00:10:56.120 --> 00:10:56.780
So this is great.

00:10:56.850 --> 00:10:59.020
We don't have to fetch anything,
but we still have to parse it

00:10:59.100 --> 00:11:00.380
and we still have to execute it.

00:11:00.460 --> 00:11:05.010
And somewhere in those 11 scripts,
we fire off seven more

00:11:05.010 --> 00:11:07.380
synchronous AJAX requests.

00:11:07.380 --> 00:11:10.430
So before we've gotten to
the end of the document,

00:11:10.430 --> 00:11:17.490
we've caused the browser to
come to a halt another 18 times.

00:11:17.700 --> 00:11:21.000
I'm actually surprised it
only takes 12 seconds to load.

00:11:21.000 --> 00:11:23.300
And in fact, the truth is,
I frequently see it at

00:11:23.300 --> 00:11:24.860
home take 30 to 40 seconds.

00:11:24.860 --> 00:11:28.450
So I'm a little unhappy about that.

00:11:29.120 --> 00:11:33.110
Well, what can we do about it?

00:11:33.180 --> 00:11:39.970
Turns out there's three things that
we're going to do about these problems.

00:11:39.970 --> 00:11:39.970
The first one,

00:11:40.280 --> 00:11:42.610
is going to minimize
the number of assets.

00:11:42.770 --> 00:11:45.840
We're going to take the
JavaScript and the CSS and

00:11:46.270 --> 00:11:49.280
compact it down into single files.

00:11:51.970 --> 00:11:55.220
Next, we're going to shrink
the total asset size.

00:11:55.220 --> 00:11:58.470
So it's great that we have
fewer assets going out,

00:11:58.470 --> 00:12:02.500
so we're paying less of a
latency and overhead tax,

00:12:02.630 --> 00:12:05.780
but we're going to shrink that
down so they download even faster.

00:12:06.300 --> 00:12:08.700
Then we're going to look at
a couple of ways that we can

00:12:08.700 --> 00:12:10.240
reduce the script impact.

00:12:10.310 --> 00:12:14.150
So ways that we can either fool
you into not noticing that it takes

00:12:14.310 --> 00:12:18.020
time for the scripts to execute,
or do the work in the scripts at a later

00:12:18.020 --> 00:12:20.260
point so that the page renders faster.

00:12:21.080 --> 00:12:26.520
It turns out that minimizing the number
of text assets is actually pretty easy.

00:12:26.520 --> 00:12:28.230
You know, we've all been there.

00:12:28.230 --> 00:12:31.300
We start off and we've
got a couple of CSS files,

00:12:31.300 --> 00:12:33.880
maybe a couple of JavaScript files.

00:12:33.880 --> 00:12:36.930
You hire a couple of guys to
help out and work on the team.

00:12:36.940 --> 00:12:40.830
Suddenly you've got 10 CSS files
because they're spread out over

00:12:40.980 --> 00:12:44.190
different parts of the site,
maybe compartmentalized for

00:12:44.190 --> 00:12:46.360
different portions of the pages.

00:12:46.360 --> 00:12:49.320
Your JavaScript gets more interactive.

00:12:50.080 --> 00:12:54.620
So suddenly 10 years goes by and you've
got 13 CSS files and 24 JavaScript files.

00:12:54.680 --> 00:12:58.010
And you're thinking to yourself, oh,
my God, this is just killing me.

00:12:58.170 --> 00:13:01.090
We're not saying to you that you
should take all of those files,

00:13:01.090 --> 00:13:05.250
put them back together in one file,
and now you're going to work on like

00:13:05.310 --> 00:13:09.680
a 384K JavaScript file and everybody's
going to have to tiptoe around in there.

00:13:09.680 --> 00:13:13.270
No, really what you can do is
you put together a script,

00:13:13.270 --> 00:13:16.560
and we'll see the details
of that a little bit later,

00:13:16.700 --> 00:13:21.580
that at either build time or at,
you know, at page request time,

00:13:21.860 --> 00:13:24.080
dynamically concatenates
those files together.

00:13:24.080 --> 00:13:27.250
You vend out a single file,
and as a result,

00:13:27.530 --> 00:13:32.570
you pay less of a latency tax and
you pay less of a total overhead tax.

00:13:32.780 --> 00:13:36.570
So the result is you're paying
those taxes only once for

00:13:36.670 --> 00:13:38.930
JavaScript and once for CSS.

00:13:39.300 --> 00:14:40.300
[Transcript missing]

00:14:40.530 --> 00:14:44.300
So let's take a look at how
that would work if we were to

00:14:44.300 --> 00:14:50.800
build just the breadcrumb bra
on the online store's homepage.

00:14:51.130 --> 00:14:53.080
Well,
we're going to start off with our canvas,

00:14:53.080 --> 00:14:53.560
right?

00:14:53.560 --> 00:14:56.310
And we're going to pull
in the left-hand edge,

00:14:56.430 --> 00:15:02.190
followed by the little home icon thingy,
and then that weird triangle thing.

00:15:02.510 --> 00:15:05.480
Slide all the way down to the end,
and we're going to pick

00:15:05.480 --> 00:15:08.730
up the divider bar,
the shopping cart,

00:15:08.860 --> 00:15:10.240
and then the final right-hand edge.

00:15:10.240 --> 00:15:11.590
So we're good.

00:15:11.600 --> 00:15:15.150
We've got all the image assets that we're
going to need for the breadcrumb bar,

00:15:15.150 --> 00:15:17.430
except one,
which is the actual background.

00:15:17.990 --> 00:15:21.860
Well, it turns out,
because we use a horizontally repeating

00:15:21.860 --> 00:15:25.870
background for the background of the bar,
it needs to take up an

00:15:25.940 --> 00:15:28.230
entire row within our canvas.

00:15:28.230 --> 00:15:30.470
There can't be anything to
the left or the right of it,

00:15:30.570 --> 00:15:33.400
because that would just get
repeated as it fills out the bar.

00:15:34.860 --> 00:15:38.940
Now, image sprites are not a cure-all.

00:15:39.110 --> 00:15:42.380
They're really excellent if you're
designing a brand new site or you're

00:15:42.390 --> 00:15:46.820
going through a full remodel where you're
taking everything down to the bare metal,

00:15:46.820 --> 00:15:49.090
redesigning it, and starting again.

00:15:49.100 --> 00:15:54.400
They can be a little bit troublesome
to work into an existing site.

00:15:54.450 --> 00:16:00.100
The problem is that, first of all,
they have to be an exact fit.

00:16:01.080 --> 00:16:04.870
So if you have a background image,
really all you're using here

00:16:04.870 --> 00:16:10.310
is a viewport onto that canvas,
and you're moving the canvas such

00:16:10.750 --> 00:16:14.410
that the image that you're interested
in appears within your node.

00:16:14.440 --> 00:16:17.320
Well,
if your node is very big and the image

00:16:17.320 --> 00:16:21.560
that you're interested in is very small,
well, the browser,

00:16:21.560 --> 00:16:25.320
except for Safari coming up,
doesn't have any notion of

00:16:25.320 --> 00:16:30.160
clipping of the background,
which I believe is a CSS3 property.

00:16:31.190 --> 00:16:34.550
And as a result,
all of the images next to your

00:16:34.550 --> 00:16:37.760
sprite will also appear in your node.

00:16:37.760 --> 00:16:41.970
So the solution for that is you have
to leave white space in your canvas,

00:16:41.970 --> 00:16:44.570
which,
depending on the size of your node,

00:16:44.570 --> 00:16:48.770
may kind of defeat the purpose of
putting this image in the sprite.

00:16:48.780 --> 00:16:53.620
So that's why this may not be the sort of
solution that you can do automatically,

00:16:53.790 --> 00:16:55.710
say, with like a build script.

00:16:55.800 --> 00:16:58.370
This is the sort of thing that
almost has to be hand-tuned.

00:16:58.380 --> 00:17:01.610
And finally,
we already saw... We already saw that

00:17:01.610 --> 00:17:03.190
repeating images pose a special problem.

00:17:03.200 --> 00:17:06.140
Fortunately,
this is actually an easy one to solve.

00:17:06.750 --> 00:17:08.540
Basically,
what you do is you have a separate

00:17:08.680 --> 00:17:12.030
canvas for horizontally repeating
images and another canvas for

00:17:12.030 --> 00:17:13.880
vertically repeating images.

00:17:13.880 --> 00:17:17.140
And those wind up being,
in the case of horizontal, tall,

00:17:17.140 --> 00:17:21.120
thin images, obviously,
because they just repeat horizontally.

00:17:21.120 --> 00:17:26.410
And for vertically repeating,
it's a nice, wide but short canvas.

00:17:26.430 --> 00:17:30.200
So now we've got fewer
images on the page.

00:17:31.210 --> 00:17:35.690
And what we really need to do
next is make those images -- fewer

00:17:35.690 --> 00:17:37.610
images -- fewer assets on the page.

00:17:37.710 --> 00:17:41.050
What we need to do is now take those
assets and just shrink them down.

00:17:41.460 --> 00:17:43.710
Make them take less
time to actually load.

00:17:43.840 --> 00:17:45.830
Well, there's a good thing here.

00:17:45.840 --> 00:17:48.430
The assets don't need
to be humanly readable.

00:17:48.560 --> 00:17:52.720
You and I all work -- and I know
you're better than this than

00:17:52.720 --> 00:17:55.660
I am -- we comment our code.

00:17:56.060 --> 00:17:57.900
We format it nicely.

00:17:58.150 --> 00:18:01.380
Well,
it turns out that this CSS is exactly

00:18:01.390 --> 00:18:04.300
the same to the browser as that.

00:18:04.440 --> 00:18:08.330
Now, we don't want to work with this,
but I'm perfectly happy serving

00:18:08.330 --> 00:18:09.860
this out to the browser.

00:18:10.090 --> 00:18:13.860
Similarly,
this JavaScript is exactly the same

00:18:13.880 --> 00:18:17.010
to the browser as this JavaScript.

00:18:17.940 --> 00:18:20.480
Could be a problem if
you need to debug it,

00:18:20.500 --> 00:18:23.220
but that's an easy trick.

00:18:23.220 --> 00:18:25.380
You just swap out the file.

00:18:25.750 --> 00:18:29.500
So this will take our
actual textual assets,

00:18:29.500 --> 00:18:34.250
strip out all the extraneous stuff,
like comments and white space,

00:18:34.250 --> 00:18:37.510
and in the case of JavaScript, you know,
some meaningful identifiers,

00:18:37.510 --> 00:18:41.810
and really reduce the size of the
assets so they download a lot faster.

00:18:41.810 --> 00:18:44.320
Because they download faster,
obviously the browser is

00:18:44.320 --> 00:18:47.300
going to be waiting less time,
and your page will render faster.

00:18:49.900 --> 00:18:54.370
Now, I promise you we're going to take a
look at two ways that we're going to

00:18:54.370 --> 00:18:56.540
reduce the impact of script execution.

00:18:56.540 --> 00:18:59.640
Now, in order to do that,
we have to understand what the

00:18:59.740 --> 00:19:01.820
browser is doing with each script.

00:19:01.890 --> 00:19:05.210
The first step it has to do, obviously,
if it's an external script,

00:19:05.210 --> 00:19:06.280
it has to fetch it.

00:19:06.280 --> 00:19:08.330
Well, we're good here, right?

00:19:08.450 --> 00:19:11.850
Because we've reduced the number
of scripts that we're including

00:19:11.850 --> 00:19:16.210
on our pages to possibly one,
possibly two, if you have to send out

00:19:16.210 --> 00:19:18.020
a separate script for IE.

00:19:18.970 --> 00:19:23.390
So this should be not
so much of a problem.

00:19:23.710 --> 00:19:26.250
Well, then the browser has to parse it.

00:19:26.320 --> 00:19:29.100
Now,
short of sending a brand-new Mac Pro to

00:19:29.100 --> 00:19:31.450
everyone who visits your site,
and I promise I'll come visit

00:19:31.450 --> 00:19:34.850
your site if you send me one,
there's really not much you can do

00:19:34.850 --> 00:19:37.420
to accelerate parsing of JavaScript.

00:19:37.460 --> 00:19:39.450
You pretty much just
have to deal with it.

00:19:40.300 --> 00:19:43.270
So, fortunately,
Safari is really fast at this,

00:19:43.350 --> 00:19:45.560
so we can kind of ignore this as well.

00:19:45.560 --> 00:19:48.720
The last thing that we can
affect is execution time.

00:19:48.720 --> 00:19:51.150
And there's two things
we want to look at.

00:19:51.240 --> 00:19:53.410
The first is really kind of a trick.

00:19:53.410 --> 00:19:56.570
It's going to take advantage
of the fact that it takes a

00:19:56.570 --> 00:20:00.580
moment for you to recognize
that the content's even arrived.

00:20:00.620 --> 00:20:05.660
So we're recommending that you put your
script content at the end of your pages.

00:20:05.660 --> 00:20:08.100
Seems like a really obvious thing.

00:20:08.100 --> 00:20:15.180
But by doing that, the browser gets to go
entirely through your document

00:20:17.600 --> 00:20:21.300
So,
I think the most important thing is to be

00:20:21.300 --> 00:20:27.080
able to use the DOM content loaded event,
and if you are familiar with

00:20:27.380 --> 00:20:32.690
the DOM content loaded event,
you're probably also familiar with

00:20:32.690 --> 00:20:38.190
the fact that it has some challenges,
especially regarding IE,

00:20:38.190 --> 00:20:43.970
which doesn't support it at all,
and older versions of Safari.

00:20:44.390 --> 00:20:48.540
Even though there are ways to get
around this in your libraries,

00:20:48.540 --> 00:20:53.720
they don't always work 100%. This,
on the other hand,

00:20:53.760 --> 00:20:57.050
does work 100%. By the time you get here,
your page is ready.

00:20:57.160 --> 00:20:59.970
All of your nodes are available.

00:21:00.470 --> 00:21:02.860
So that's the trick.

00:21:02.880 --> 00:21:05.740
The other one is a
different sort of thing.

00:21:05.740 --> 00:21:09.600
You know, imagine you're out last
night boozing it up,

00:21:09.600 --> 00:21:12.810
oops, sorry, having a good time,
and you're

00:21:12.900 --> 00:21:33.800
[Transcript missing]

00:21:33.900 --> 00:21:36.130
Okay, I guarantee you,
you probably don't need Fibonacci

00:21:36.130 --> 00:21:38.810
numbers on your website,
but it really is a good

00:21:38.810 --> 00:21:41.050
introductory sample sort of thing.

00:21:41.050 --> 00:21:47.710
And it allows us to highlight
this notion of IOU data.

00:21:48.360 --> 00:21:52.720
So what we're going to set up here
is a cache of our Fibonacci numbers.

00:21:52.720 --> 00:21:57.030
And when we first call
get Fibonacci at index,

00:21:57.030 --> 00:22:00.450
we're going to notice, hey,
the cache of underscore first

00:22:00.550 --> 00:22:02.610
100 Fibonacci's is null.

00:22:02.620 --> 00:22:07.480
So the JavaScript will then call
calculate first 100 Fibonacci's,

00:22:07.480 --> 00:22:11.020
which does some math,
and then returns the cache.

00:22:11.020 --> 00:22:14.800
We then vend out the Fibonacci that
you're interested in from that cache.

00:22:14.800 --> 00:22:20.060
Now, the great thing about this is... is
if you never need a Fibonacci number,

00:22:20.060 --> 00:22:22.990
you never pay this penalty
of actually calculating them.

00:22:23.900 --> 00:22:27.150
So obviously,
this is a fictitious example,

00:22:27.200 --> 00:22:31.010
but if you need to calculate, say,
a CRC or some other

00:22:31.210 --> 00:22:36.060
computationally intensive table,
this would be an excellent

00:22:36.060 --> 00:22:38.190
thing to apply to it,
because if it turns out

00:22:38.190 --> 00:22:41.570
that you don't need it,
you never pay the cost.

00:22:42.770 --> 00:22:46.420
So at this point,
I'd like to bring up Ryan Orr,

00:22:46.510 --> 00:22:51.290
who's a UI engineer on the store,
and I'd like to ask him to run us through

00:22:51.290 --> 00:22:55.440
in detail some of the things we're doing
on the store to take these strategies,

00:22:55.540 --> 00:22:59.620
put them in place, and more importantly,
give you some sense that A,

00:22:59.620 --> 00:23:03.910
you can do it too, and B,
what sort of performance improvements

00:23:03.910 --> 00:23:05.760
that you'll see from this.

00:23:05.760 --> 00:23:06.520
Right?

00:23:13.300 --> 00:23:15.640
Hi, my name's Ryan Orr,
and I'm a UI engineer

00:23:15.640 --> 00:23:18.260
on the online store.

00:23:18.260 --> 00:23:20.130
And, you know,
Jeff spent the first part of this

00:23:20.130 --> 00:23:23.070
talk kind of going over some of
the problems you all might be

00:23:23.070 --> 00:23:24.820
seeing on your various sites.

00:23:24.860 --> 00:23:27.620
And, you know,
this talk was really bred out

00:23:27.640 --> 00:23:30.860
of the problems that we were
seeing on the online store.

00:23:30.970 --> 00:23:34.010
You know, a few months ago
Jeff came to me and said,

00:23:34.010 --> 00:23:37.890
"Look, we need to get the page
weight under control.

00:23:38.050 --> 00:23:41.130
We need to reduce the asset size,
we need to reduce the time

00:23:41.200 --> 00:23:42.470
it takes to load the site.

00:23:42.470 --> 00:23:45.710
So I want you to go back with the team
and kind of figure out some solutions to

00:23:45.730 --> 00:23:47.390
how we can kind of manage this problem."

00:23:48.820 --> 00:23:51.670
And so, you know, the team and I,
we sat around and we said, well,

00:23:51.670 --> 00:23:53.050
you know, where do we start?

00:23:53.050 --> 00:23:55.360
There's so many areas
that we could look at.

00:23:55.360 --> 00:23:56.120
Where do we begin?

00:23:56.120 --> 00:24:00.090
And so we decided that we would probably
start looking at the source code.

00:24:00.150 --> 00:24:02.740
And immediately we saw a
page that looked like this.

00:24:02.740 --> 00:24:05.800
Link element after link
element after link element.

00:24:05.800 --> 00:24:08.440
You know, and I'm sure you all have
pages that are like this.

00:24:08.810 --> 00:24:12.400
And as Jeff mentioned earlier, you know,
we pay a cost for each one of

00:24:12.400 --> 00:24:14.640
these assets that we request,
right?

00:24:14.640 --> 00:24:18.210
And so if we can just get
these under control and kind

00:24:18.210 --> 00:24:21.510
of vend out a single asset,
we might be well on our

00:24:21.760 --> 00:24:23.580
way to furthering this.

00:24:25.050 --> 00:24:27.890
And so here we decided well,
we should probably

00:24:28.070 --> 00:24:30.120
concatenate this stuff.

00:24:30.120 --> 00:24:30.710
How should we do this?

00:24:30.780 --> 00:24:32.450
Do we want to event this on the fly?

00:24:32.450 --> 00:24:33.520
What do we want to do?

00:24:33.520 --> 00:24:37.200
And so ultimately we decided that
we should probably do a prepackager.

00:24:37.300 --> 00:24:39.540
You know,
some sort of beginning phase where

00:24:39.540 --> 00:24:43.140
we could grab all this stuff up,
push it together, and then do some other

00:24:43.210 --> 00:24:44.570
processing on the files.

00:24:44.710 --> 00:24:46.100
And so that's something that we did.

00:24:46.100 --> 00:24:48.380
You know, this can be written in
any sort of language.

00:24:48.380 --> 00:24:50.490
You know,
it could be written as a Bash script.

00:24:50.490 --> 00:24:54.040
It could--if you're a Ruby Python dev,
you can use those languages.

00:24:54.070 --> 00:24:56.660
I chose Ruby because it's something
that I'm very comfortable with,

00:24:56.870 --> 00:24:58.910
but anything really works.

00:24:59.130 --> 00:25:02.180
So basically we have a simple
YAML configuration file,

00:25:02.180 --> 00:25:03.380
very standard Ruby.

00:25:03.380 --> 00:25:07.440
There are YAML parsers
for all various languages.

00:25:07.440 --> 00:25:09.990
But we have three headers
in this YAML file.

00:25:10.000 --> 00:25:13.330
We have global, IE6, and IE7.

00:25:13.330 --> 00:25:16.870
And underneath each one of those headers,
we have a list of CSS files in the

00:25:16.870 --> 00:25:20.530
same order that you would have the link
elements on the page that we just saw,

00:25:20.530 --> 00:25:23.780
so that you get rule overriding
and inheritance and whatnot.

00:25:24.340 --> 00:25:28.860
And so we loop over each of the headers,
and we grab all the CSS files.

00:25:28.860 --> 00:25:32.100
We grab the contents from the
CSS file and stick it out in

00:25:32.320 --> 00:25:35.750
the root as one single file,
global CSS, IE6, IE7.

00:25:35.760 --> 00:25:39.990
And we went and rendered the page,
and immediately we noticed

00:25:39.990 --> 00:25:41.850
a big problem on the site.

00:25:41.980 --> 00:25:44.110
None of the images showed up.

00:25:44.320 --> 00:25:46.740
And so we said, oh, what happened here?

00:25:46.740 --> 00:25:49.420
What went wrong?

00:25:49.490 --> 00:25:52.710
And to explain this,
let me explain a little

00:25:52.720 --> 00:25:53.620
bit of back history.

00:25:53.650 --> 00:25:56.320
The online store is 10 years old, right?

00:25:56.320 --> 00:25:59.350
And that's 10 years of people
coming in through the store and

00:25:59.350 --> 00:26:02.130
having their kind of touch with it,
deciding the directory

00:26:02.150 --> 00:26:03.480
structure and whatnot.

00:26:03.480 --> 00:26:08.200
And because of that,
there are files all over the place.

00:26:08.200 --> 00:26:11.750
And people wrote the background
image URL paths relative to

00:26:11.810 --> 00:26:13.680
the location of the CSS file.

00:26:14.300 --> 00:26:16.560
So when we looped over all the files,
pulled all the CSS out,

00:26:16.560 --> 00:26:19.840
and stuck it in the root,
we never changed any of the paths.

00:26:20.000 --> 00:26:23.380
And so it referred to
images that weren't there.

00:26:23.380 --> 00:26:26.800
And so we decided that we had to
go through and rewrite these URLs.

00:26:26.800 --> 00:26:29.170
And so there was a fair
bit of work to do that,

00:26:29.170 --> 00:26:32.390
but we were able to do that,
and that solved our problem.

00:26:32.400 --> 00:26:35.620
And so the team and I,
we took a step back, and we said,

00:26:35.710 --> 00:26:39.240
how do we prevent ourselves
from being bit by this again?

00:26:39.280 --> 00:26:40.390
What do we do?

00:26:40.390 --> 00:26:43.800
And well, it turns out we'd already done
the work to grab the image URL.

00:26:43.800 --> 00:26:46.060
So we thought,
why don't we just verify that

00:26:46.060 --> 00:26:47.550
these images actually exist?

00:26:47.640 --> 00:26:48.770
So we do that.

00:26:48.880 --> 00:26:53.340
We go out and we rewrite the URL and
we verify that that image is there.

00:26:53.340 --> 00:26:55.200
You know,
maybe somebody forgot to check it in.

00:26:55.200 --> 00:26:57.720
And if that happens,
it throws us in the air and

00:26:57.720 --> 00:26:59.150
we know to go look at it.

00:26:59.190 --> 00:27:00.330
Maybe the path was written wrong.

00:27:00.340 --> 00:27:03.920
And so we're able to verify
that the asset actually exists.

00:27:03.920 --> 00:27:05.930
And so that worked out great for us.

00:27:05.940 --> 00:27:07.440
We said, well, what else can we do here?

00:27:07.440 --> 00:27:10.760
This is a great phase to kind of
push any of this processing into.

00:27:12.020 --> 00:27:14.060
And we said, well,
it makes sense that we want

00:27:14.060 --> 00:27:15.410
to validate our CSS here.

00:27:15.420 --> 00:27:18.580
You know, look for syntax errors
and things like that.

00:27:18.620 --> 00:27:23.530
And there's a widely accepted
validator by the W3C called Jigsaw.

00:27:23.550 --> 00:27:25.390
It's at jigsaw.w3c.org.

00:27:25.460 --> 00:27:27.230
But it's got two big problems for us.

00:27:27.240 --> 00:27:29.000
The first is that it's a web app.

00:27:29.100 --> 00:27:33.000
And so it doesn't work with
our command line workflow that

00:27:33.000 --> 00:27:34.150
we were kind of going with.

00:27:34.220 --> 00:27:39.040
And the second is because it's a web app,
we have to send our code out to it.

00:27:39.040 --> 00:27:41.300
And I don't know about you guys,
but there's no way that we're

00:27:41.350 --> 00:27:42.000
going to be able to do that.

00:27:42.000 --> 00:27:44.890
There's no way that we could possibly
send our code out to a web app,

00:27:44.890 --> 00:27:47.030
you know, that's proprietary Apple code.

00:27:47.090 --> 00:27:49.980
It would be a matter of, you know,
an hour before the blogs are

00:27:49.980 --> 00:27:53.570
trying to interpret what the
various class in the CSS is.

00:27:53.580 --> 00:27:55.930
So that really wasn't an option for us.

00:27:55.960 --> 00:27:58.060
And so we opted to
write our own validator.

00:27:58.060 --> 00:28:00.780
You know, it was a pretty simple process.

00:28:00.780 --> 00:28:03.650
It took a couple hours over a
week to kind of get it done.

00:28:03.660 --> 00:28:06.720
And that's not really the important
thing that I want to talk about.

00:28:06.720 --> 00:28:10.250
What writing a validator allowed
us to do was to chain load

00:28:10.250 --> 00:28:11.740
in other development rules.

00:28:11.980 --> 00:28:15.740
And, you know,
to kind of explain this and kind of give

00:28:15.740 --> 00:28:19.480
you an idea of something that you might
be able to do with a step like this,

00:28:19.500 --> 00:28:22.150
we have a lot of people
at the online store that,

00:28:22.150 --> 00:28:24.690
you know,
are fixing bugs or fixing issues,

00:28:24.700 --> 00:28:28.000
and they may not have a
global view of all the CSS.

00:28:28.000 --> 00:28:31.110
And, you know, to their credit,
they're trying to get their work done.

00:28:31.160 --> 00:28:34.700
And to do that,
they might write an ultra-generic rule.

00:28:34.700 --> 00:28:38.080
They might write something
like ULLI background colon red.

00:28:38.100 --> 00:28:40.940
And then that fixes their issue, right?

00:28:41.960 --> 00:28:46.120
But when you concatenate all
the CSS and you pull it out

00:28:46.140 --> 00:28:49.460
and then that out site-wide,
it may turn all the ULLIs red on

00:28:49.460 --> 00:28:51.660
the site and cause more problems.

00:28:51.720 --> 00:28:56.450
And so what we did is in the validator,
we wrote, like, dev rules.

00:28:56.510 --> 00:29:00.920
And essentially,
it's a starting comment that says,

00:29:00.920 --> 00:29:06.320
you know, all rules from here to a
termination comment should begin

00:29:06.320 --> 00:29:08.730
with a class rule namespace.

00:29:08.840 --> 00:29:11.500
And so we go through,
and when it hits that block,

00:29:11.940 --> 00:29:14.940
it verifies that all the rules
below are actually namespaced.

00:29:15.170 --> 00:29:18.440
And if it, you know, it fails that test,
we throw an error,

00:29:18.440 --> 00:29:20.440
and it lets us know that we
should probably go look at this

00:29:20.440 --> 00:29:21.840
before we push out to production.

00:29:21.910 --> 00:29:23.940
And hopefully we won't push
out something that will,

00:29:24.200 --> 00:29:27.670
you know, cause havoc on the site or,
you know, cause havoc on a small piece of

00:29:27.710 --> 00:29:30.210
the site that you rarely go to.

00:29:31.080 --> 00:29:35.140
So on the JavaScript side,
we did something very similar.

00:29:35.210 --> 00:29:37.830
We checked the dependencies,
and this allowed us to dynamically

00:29:37.830 --> 00:29:42.830
generate the list of JavaScript files
that we can catenate out into the root.

00:29:43.000 --> 00:31:25.200
[Transcript missing]

00:31:25.370 --> 00:31:28.320
And so, you know,
Jeff mentioned earlier that the

00:31:28.740 --> 00:31:32.410
code doesn't necessarily need
the white space and comments

00:31:32.410 --> 00:31:33.870
to be readable by the browser.

00:31:33.950 --> 00:31:36.190
It doesn't need to be human readable
to be readable by the browser.

00:31:36.190 --> 00:31:37.430
You know, we put that in for us.

00:31:37.430 --> 00:31:41.220
I certainly wouldn't want to work on
source files that aren't commented

00:31:41.270 --> 00:31:44.000
or don't have proper formatting,
and I know none of my

00:31:44.000 --> 00:31:45.580
coworkers would either.

00:31:46.240 --> 00:31:51.660
But we can, during this packaging phase,
we can strip all that stuff out.

00:31:51.720 --> 00:31:55.500
And so we elected to use the
YUI Compressor by the Yahoo!

00:31:55.500 --> 00:31:56.240
UI team.

00:31:56.240 --> 00:31:57.720
It's a great utility.

00:31:57.720 --> 00:31:59.210
The guys have put a lot of work into it.

00:31:59.220 --> 00:31:59.980
It's very robust.

00:31:59.980 --> 00:32:03.820
It works with both CSS and JavaScript,
and it works on the command line,

00:32:03.820 --> 00:32:05.600
so it works with our workflow.

00:32:05.600 --> 00:32:06.920
And so it's a great tool.

00:32:06.920 --> 00:32:09.880
It just strips all the comments
and white space out and puts

00:32:09.880 --> 00:32:11.420
everything on a single line.

00:32:11.440 --> 00:32:15.380
It's the minimal amount of code that
the browser needs to render a page.

00:32:16.560 --> 00:32:19.330
Another thing that you can
do is to rewrite your rules,

00:32:19.330 --> 00:32:19.950
right?

00:32:20.290 --> 00:32:24.710
There's this notion of,
or some CSS properties have a top, right,

00:32:25.170 --> 00:32:27.660
bottom, left variant to it, right?

00:32:27.660 --> 00:32:31.390
Things like margin and padding
and border have these top,

00:32:31.390 --> 00:32:33.880
right, bottom, left components.

00:32:33.930 --> 00:32:36.780
But you can also write a
shorthand version of that rule.

00:32:36.780 --> 00:32:39.770
It looks something like this,
where you have margin and then

00:32:39.960 --> 00:32:42.960
you pass in the value starting
at the top and going clockwise,

00:32:42.960 --> 00:32:43.620
right?

00:32:43.620 --> 00:32:45.710
And the difference between the
two rules is some number of bytes.

00:32:46.200 --> 00:32:48.540
And obviously the shorthand
version is smaller.

00:32:48.640 --> 00:32:52.400
Ultimately,
we decided not to go this route because

00:32:52.400 --> 00:32:56.890
we weren't able to accurately QA our code
before it was pushed out to production.

00:32:56.940 --> 00:33:01.200
And so we didn't feel comfortable pushing
out code that we weren't able to QA.

00:33:01.240 --> 00:33:04.640
But if you can fit this into your
workflow and you're able to QA it

00:33:04.640 --> 00:33:08.190
and you feel comfortable and you
need to eek a few more bytes out,

00:33:08.320 --> 00:33:11.210
this is definitely something to look at.

00:33:11.680 --> 00:33:13.450
On the JavaScript side,
we did something very similar.

00:33:13.580 --> 00:33:16.180
Again, like I said,
we used the YUI Compressor to remove

00:33:16.180 --> 00:33:17.940
the whitespace in the comments.

00:33:18.070 --> 00:33:20.900
And so we kind of compressed
the JavaScript up real nice.

00:33:21.010 --> 00:33:23.910
But we do something a little bit
different with the JavaScript.

00:33:23.990 --> 00:33:26.430
We also shorten the local variables.

00:33:26.530 --> 00:33:28.480
Now, you may have heard of this
being called obfuscation,

00:33:28.650 --> 00:33:28.840
right?

00:33:29.020 --> 00:33:33.710
So there's a notion that, you know,
variables can be somewhat long at times,

00:33:33.750 --> 00:33:34.260
right?

00:33:34.260 --> 00:33:36.580
You could have, "This is the name of
a div." That would be,

00:33:36.580 --> 00:33:37.440
you know, the variable.

00:33:37.530 --> 00:33:40.200
That could very easily be the letter A.

00:33:40.570 --> 00:33:43.000
And, you know,
A is obviously a lot shorter

00:33:43.000 --> 00:33:46.230
than this is the name of a div.

00:33:46.350 --> 00:33:49.340
And, you know,
so we found that by using obfuscation,

00:33:49.340 --> 00:33:52.430
which is traditionally used to make
your code a lot harder to read,

00:33:52.430 --> 00:33:55.520
right,
we found that by repurposing the tool,

00:33:55.520 --> 00:33:57.570
we were able to get
compression techniques out or

00:33:57.570 --> 00:33:59.000
compression results out of it.

00:33:59.170 --> 00:34:02.960
And so we employed it in this case.

00:34:03.160 --> 00:34:04.870
So that kind of made up our phase two.

00:34:05.130 --> 00:34:08.960
And we went back to the baseline,
and we tested our phase two

00:34:08.960 --> 00:34:10.910
against what we'd already done.

00:34:10.920 --> 00:34:14.070
And we saw that the JavaScript was
basically cut in half.

00:34:14.070 --> 00:34:19.340
We went from 314K of
JavaScript down to 157K.

00:34:19.380 --> 00:34:22.800
And CSS went from 153K down to 128K.

00:34:22.830 --> 00:34:24.220
And this is great.

00:34:24.390 --> 00:34:28.250
It's a step in the right direction,
but it's still not quite enough.

00:34:28.340 --> 00:34:34.090
We thought the sweet spot is really 100K
for the CSS and JavaScript combined.

00:34:34.110 --> 00:34:35.370
That's what we were targeting.

00:34:35.370 --> 00:34:38.860
We thought that it would really,
it wouldn't cost the user a lot of

00:34:39.010 --> 00:34:41.760
time if they only had to download 100K.

00:34:41.760 --> 00:34:43.120
So that's what we shot for.

00:34:43.120 --> 00:34:45.250
And we had to look at other avenues.

00:34:45.310 --> 00:34:46.800
What did we look at next?

00:34:46.850 --> 00:34:51.000
We've already spent a bunch of time
on getting rid of all the requests,

00:34:51.000 --> 00:34:55.000
and we'd already compressed the
code down as much as we could.

00:34:55.000 --> 00:34:56.720
Where else can we eke
a bit of performance?

00:34:57.780 --> 00:35:01.220
And so we said we should probably
start looking at the vending mechanism.

00:35:01.250 --> 00:35:03.860
We should probably
start looking at Apache.

00:35:04.090 --> 00:35:08.030
And modern browsers,
they support gzip compression, right?

00:35:08.190 --> 00:35:11.010
Very efficient algorithm
to kind of compress,

00:35:11.030 --> 00:35:14.470
take compressed data,
decompress it on the client side so

00:35:14.470 --> 00:35:16.850
you can transfer this compressed data.

00:35:17.110 --> 00:35:20.440
And so we started taking a
look at Apache and how we

00:35:20.440 --> 00:35:22.770
could use Apache to do this.

00:35:22.990 --> 00:35:25.390
And it turns out Apache ships
with two modules,

00:35:25.400 --> 00:35:28.340
ModDeflate and ModGZip.

00:35:28.380 --> 00:35:30.140
And the way I like to
distinguish the two,

00:35:30.140 --> 00:35:33.120
ModDeflate is really for assets
that you want to compress

00:35:33.150 --> 00:35:36.230
on the fly and then bend,
and ModGZip are for assets you want to

00:35:36.230 --> 00:35:38.220
pre-compress and stick up on the server.

00:35:38.220 --> 00:35:42.370
Now, at the online store,
we have an edge caching solution,

00:35:42.370 --> 00:35:43.880
as Jeff mentioned.

00:35:43.880 --> 00:35:44.910
We use Akamai.

00:35:44.910 --> 00:35:48.340
An open source,
a very similar open source caching

00:35:48.430 --> 00:35:50.730
solution would be like Squid.

00:35:51.450 --> 00:35:53.840
So it's, you know,
something to take a look at.

00:35:53.900 --> 00:35:57.460
But because we have that
caching solution in front of us,

00:35:57.520 --> 00:36:02.060
it periodically hits our web servers,
and then we use ModDeflate

00:36:02.170 --> 00:36:04.800
to compress the assets,
bend it up to Akamai,

00:36:04.800 --> 00:36:07.710
and then Akamai handles the job
of bending that to the millions of

00:36:07.710 --> 00:36:09.080
users that hit the online store.

00:36:09.080 --> 00:36:12.720
So we don't really need to
worry about server utilization,

00:36:12.720 --> 00:36:15.000
and that's why we use ModDeflate.

00:36:15.140 --> 00:36:18.530
If you didn't have a caching solution
in front of your web servers,

00:36:18.530 --> 00:36:21.360
you might want to take a look
at something like ModGZip.

00:36:21.360 --> 00:36:23.980
And this would allow you to
pre-compress all these assets,

00:36:23.980 --> 00:36:26.240
you know,
probably during your packaging phase,

00:36:26.240 --> 00:36:29.260
and then stick them up on the
server as part of your deployment.

00:36:29.260 --> 00:36:32.270
And then you can use ModRewrite
to kind of redirect all the

00:36:32.270 --> 00:36:35.910
requests for static assets over
to these GZip compressed versions,

00:36:36.060 --> 00:36:37.440
and then bend those out.

00:36:39.190 --> 00:36:41.580
So this was our phase three.

00:36:41.680 --> 00:36:47.640
So we put this into place,
and we pushed this out to the QA server,

00:36:47.640 --> 00:36:49.040
and we tested it.

00:36:49.150 --> 00:36:52.760
And we saw that the sizes
went through the floor.

00:36:52.760 --> 00:36:55.340
This had a huge impact for us.

00:36:55.360 --> 00:37:00.150
And so we went from 314k of
JavaScript all the way down to 38k,

00:37:00.150 --> 00:37:06.100
and on the CSS, we went from 153k at the
beginning down to 22k.

00:37:06.410 --> 00:37:10.040
If you remember in Phase 1,
our request time was 2500 milliseconds.

00:37:10.180 --> 00:37:13.300
We had gotten that down
to 136 milliseconds.

00:37:13.630 --> 00:37:14.740
This is fantastic.

00:37:14.790 --> 00:37:15.600
We couldn't have been happier.

00:37:15.600 --> 00:37:16.960
We overshot our goal.

00:37:16.960 --> 00:37:18.000
Our goal was 100K.

00:37:18.000 --> 00:37:20.620
We were able to get the
static assets down to 60K.

00:37:22.280 --> 00:37:25.370
So what this allowed us to do now
is we have room to kind of grow

00:37:25.370 --> 00:37:29.050
and to add interactivity and to add
features and not have to worry about

00:37:29.050 --> 00:37:31.100
going over our target file size.

00:37:32.540 --> 00:37:35.650
To kind of underline the
amount of reduction that we

00:37:35.650 --> 00:37:38.890
saw from beginning to end,
I kind of want to take a look

00:37:38.920 --> 00:37:41.130
and give you some numbers here.

00:37:41.140 --> 00:37:43.920
So from the start,
from our start file size

00:37:44.000 --> 00:37:47.940
of the CSS to the end,
we saw an 86% reduction with these

00:37:47.940 --> 00:37:50.390
techniques that I just outlined.

00:37:51.230 --> 00:37:53.900
With the JavaScript,
we saw an 88% reduction.

00:37:53.900 --> 00:37:58.280
And the request time latency,
we saw a 97% reduction.

00:37:58.280 --> 00:38:00.400
We couldn't have been happier about this.

00:38:00.400 --> 00:38:03.200
And really what I want you guys to
take away from this is that these

00:38:03.560 --> 00:38:05.580
are all really easy techniques,
right?

00:38:05.690 --> 00:38:06.850
None of this is rocket science.

00:38:06.990 --> 00:38:09.760
None of this is too hard to comprehend.

00:38:09.760 --> 00:38:12.600
And it's things that can
be piecemealed together.

00:38:12.600 --> 00:38:14.990
You don't have to follow
the way we did it.

00:38:15.110 --> 00:38:19.030
You can take small pieces and put it
into your workflow as you see fit.

00:38:19.460 --> 00:38:20.950
And hopefully, you'll see that.

00:38:21.200 --> 00:38:24.020
And you'll notice these large
gains like we were seeing.

00:38:24.080 --> 00:38:26.780
And with that,
I'd like to hand it back to Jeff Watkins.

00:38:30.710 --> 00:38:34.690
Of course, the real challenge now is
going to be how we top this,

00:38:34.690 --> 00:38:38.220
because you know you
never get to stand still,

00:38:38.220 --> 00:38:39.080
right?

00:38:39.080 --> 00:38:44.900
Now, I see a lot of you
have your laptops open,

00:38:44.900 --> 00:38:44.900
and if you're looking at
the source of the store,

00:38:45.120 --> 00:38:47.700
I have to confess you won't see this yet.

00:38:47.790 --> 00:38:48.920
But just keep looking.

00:38:49.020 --> 00:38:53.860
It takes us a little while to roll these
things out of QA and into production.

00:38:53.860 --> 00:38:57.930
So how many of you are
responsible for adding animation

00:38:58.530 --> 00:39:01.190
and interactivity to your sites?

00:39:01.220 --> 00:39:01.220
Anyone?

00:39:04.270 --> 00:39:06.810
So we're going to talk
about that a little bit.

00:39:06.910 --> 00:39:11.730
Once upon a time, you know,
animation was sort of the province

00:39:11.810 --> 00:39:14.200
of marquee tags and blink tags.

00:39:14.200 --> 00:39:20.580
Don't you miss those?

00:39:21.280 --> 00:39:25.530
Oddly enough, we just had someone use a
marquee tag just recently,

00:39:25.530 --> 00:39:27.600
purely as an attention-getting thing.

00:39:27.600 --> 00:39:33.480
Hey, there's content missing here,
but boy, did it get my attention.

00:39:33.710 --> 00:39:38.450
So we all want to be adding more
and more animation to our sites.

00:39:38.650 --> 00:39:42.710
And the trick is now it's really
not just a gimmicky thing.

00:39:42.720 --> 00:39:50.940
Now we're doing it as much to add
context and feedback to our visitors.

00:39:51.470 --> 00:39:54.940
It's really important for us to
provide a sense of how do I get

00:39:55.150 --> 00:39:56.990
back to that previous state?

00:39:57.040 --> 00:39:59.810
Well, we recently rolled out a brand
new feature on the store,

00:39:59.860 --> 00:40:02.280
which maybe some of you
have encountered already,

00:40:02.280 --> 00:40:06.720
which was an enhancement to our photo
galleries on the product details pages.

00:40:06.720 --> 00:40:10.700
What we wanted to give our
visitors was this rich,

00:40:10.700 --> 00:40:14.520
immersive experience of
being able to zoom in,

00:40:14.520 --> 00:40:19.220
pan around,
explore their products so that, you know,

00:40:19.220 --> 00:40:20.980
maybe they would be able to
make the buying decision.

00:40:21.340 --> 00:40:21.570
And we wanted to give our visitors
a sense of how to get back to

00:40:21.580 --> 00:40:21.810
their original state of mind.

00:40:21.840 --> 00:40:21.840
And we wanted to give our visitors
a sense of how to get back to

00:40:21.840 --> 00:40:21.840
their original state of mind.

00:40:21.840 --> 00:40:25.990
Because the more we sell,
the better off we all are, right?

00:40:26.060 --> 00:40:29.540
So we built this new feature.

00:40:29.540 --> 00:40:33.190
And as you can see here,
kind of the standard

00:40:33.280 --> 00:40:36.240
product details page,
the visitors hovering his cursor

00:40:36.240 --> 00:40:40.700
over one of the thumbnails for the
Nike iPod Sport integration kit.

00:40:40.740 --> 00:40:44.280
But when he goes ahead and
clicks on that thumbnail,

00:40:44.280 --> 00:40:47.930
the page smoothly transforms
into a photo gallery.

00:40:48.020 --> 00:40:51.220
We didn't want to have
light boxes popping up.

00:40:51.230 --> 00:40:53.470
We didn't want to have pop-up windows.

00:40:53.580 --> 00:40:57.030
Because we didn't want to get
in the way of the experience.

00:40:57.030 --> 00:41:01.150
And we always wanted to have the
option of you just exploring the page,

00:41:01.150 --> 00:41:05.720
scrolling down, reading the details,
seeing how this product -- basically,

00:41:05.820 --> 00:41:10.010
we wanted to be all about the product
rather than our fancy animation.

00:41:10.140 --> 00:41:12.530
So let's take a look at that again.

00:41:12.530 --> 00:41:16.850
And I want to point out some things
that you should be looking at.

00:41:17.230 --> 00:41:21.050
Specifically,
the product text just goes away, right?

00:41:21.100 --> 00:41:21.100
Because we're going to be
looking at the product text.

00:41:21.140 --> 00:41:22.300
So let's take a look at that again.

00:41:22.300 --> 00:41:24.500
And I want to point out some things
that you should be looking at.

00:41:24.500 --> 00:41:26.500
Specifically,
the product text just goes away, right?

00:41:26.500 --> 00:41:27.860
Because we're going to be looking at.

00:41:27.860 --> 00:41:27.860
And I want to point out some things
that you should be looking at.

00:41:27.860 --> 00:41:27.860
Specifically,
the product text just goes away, right?

00:41:27.860 --> 00:41:27.860
Because we're going to be looking at.

00:41:27.860 --> 00:41:27.860
And I want to point out some things
that you should be looking at.

00:41:28.000 --> 00:41:32.120
Next, it's always important
for the visitors to know,

00:41:32.210 --> 00:41:36.860
is this a good product or is
this maybe not so good a product?

00:41:36.860 --> 00:41:39.320
So we take the customer
rating information,

00:41:39.320 --> 00:41:42.230
we move that over to the
side so it's always visible.

00:41:42.230 --> 00:41:46.280
So you never get lost and figure, hey,
this is not really a great product,

00:41:46.280 --> 00:41:47.760
but I'll buy it anyway.

00:41:47.760 --> 00:41:52.760
And finally, to provide that context,
to provide feedback to,

00:41:52.760 --> 00:41:57.380
here's how you get back to the
descriptive portion of the site,

00:41:57.650 --> 00:42:00.340
we bring in a close box.

00:42:00.370 --> 00:42:04.990
So the actual button for you to click to
close the gallery just sort of fades in.

00:42:05.060 --> 00:42:08.080
So if you watch carefully,
you'll see all of those

00:42:08.080 --> 00:42:10.260
things happen really smoothly.

00:42:12.720 --> 00:42:17.170
And that's not just because this
is a quick time animation of it.

00:42:17.380 --> 00:42:20.840
But what we're striving for
here is 50 frames a second.

00:42:20.840 --> 00:42:25.100
Now, to put that in perspective,
traditional film runs at about

00:42:25.100 --> 00:42:27.660
24 to 25 frames a second.

00:42:27.660 --> 00:42:31.210
Television runs at about
30 frames per second.

00:42:31.210 --> 00:42:35.670
And new high-definition content is
targeting about 60 frames a second.

00:42:37.370 --> 00:42:39.880
And the reason for that is it
turns out as you add more pixels,

00:42:39.880 --> 00:42:44.140
your eye gets better and better
at detecting motion artifacts.

00:42:44.140 --> 00:42:46.730
So the more frames that
you have per second,

00:42:46.730 --> 00:42:49.350
the less noticeable those artifacts are.

00:42:49.350 --> 00:42:54.000
Well, we want to take advantage of that.

00:42:54.300 --> 00:43:00.730
So we needed to build a really
robust way of doing this animation.

00:43:00.870 --> 00:43:03.940
But at the same time,
we had to have it be really performant

00:43:04.190 --> 00:43:07.050
so that we didn't lag down any
other animations that might be

00:43:07.050 --> 00:43:09.270
occurring on the site at the same time.

00:43:09.780 --> 00:43:13.370
And we came up with two optimization
techniques that we're going

00:43:13.370 --> 00:43:14.160
to talk to you about today.

00:43:14.160 --> 00:43:17.050
There are tons of optimization
techniques for JavaScript.

00:43:17.050 --> 00:43:21.690
You can probably fill an entire session
just with JavaScript optimization tricks.

00:43:21.760 --> 00:43:23.720
But we're going to talk about two.

00:43:23.720 --> 00:43:27.580
The first being, sometimes it's necessary
to leave the library.

00:43:27.580 --> 00:43:31.160
Now,
JavaScript libraries are essential tools.

00:43:31.160 --> 00:43:35.050
I don't know really anybody who
develops a sophisticated website

00:43:35.080 --> 00:43:37.020
without a library of any sort.

00:43:37.060 --> 00:43:40.570
And I'm not,
I'm certainly not up here telling

00:43:40.570 --> 00:43:43.300
you that libraries are terrible.

00:43:43.390 --> 00:43:44.940
No, they're actually really critical.

00:43:44.940 --> 00:43:48.130
They allow us to build much
better sites in far less time.

00:43:48.140 --> 00:43:51.760
But they're developed for everyone,
right?

00:43:52.010 --> 00:43:55.450
They're not specifically
developed for you.

00:43:55.830 --> 00:43:57.920
And as a result,
there may be more in that

00:43:57.930 --> 00:44:00.850
library than you actually need,
and that might actually

00:44:00.850 --> 00:44:02.100
be slowing down your code.

00:44:02.100 --> 00:44:05.610
We'll take a look at a really
good example of that in a moment.

00:44:05.750 --> 00:44:12.510
And sometimes it helps to be really,
really laser focused and specific.

00:44:12.650 --> 00:44:17.530
And we'll see that that provides
us with dramatic speed improvement.

00:44:17.530 --> 00:44:17.530
But

00:44:17.760 --> 00:44:19.390
Let's get to the code.

00:44:19.500 --> 00:44:22.200
So this is actually the
core of that animation.

00:44:22.200 --> 00:44:25.420
This is the setup function.

00:44:25.560 --> 00:44:28.450
What we do,
and this is a really common technique,

00:44:28.500 --> 00:44:36.600
is we set up our CSS as an inline, open,
and zoomed mode.

00:44:36.600 --> 00:44:39.400
So we have separate class
names for each one of those.

00:44:39.400 --> 00:44:42.990
And that way,
as the CSS developer is working,

00:44:42.990 --> 00:44:45.780
it just sets the class,
everything pops into place,

00:44:45.780 --> 00:44:47.330
everything's good,
we can make sure everything's

00:44:47.390 --> 00:44:48.180
located correctly.

00:44:48.180 --> 00:44:52.240
But what we do is before we
apply the class in the animation,

00:44:52.340 --> 00:44:55.420
we find out all the
properties of those nodes,

00:44:55.420 --> 00:44:59.340
then we apply the class,
find out their new properties,

00:44:59.540 --> 00:45:02.470
and then smoothly animate between them.

00:45:02.580 --> 00:45:03.840
Okay?

00:45:03.840 --> 00:45:08.680
Well, when we did this the first
time... we encountered 50 nodes.

00:45:08.680 --> 00:45:11.330
Okay, not too bad.

00:45:11.440 --> 00:45:12.640
A little bit more nodes than we'd like.

00:45:12.760 --> 00:45:15.640
You know,
we can't always use multiple background

00:45:15.640 --> 00:45:17.990
images like we do with Safari.

00:45:18.410 --> 00:45:20.500
But we execute this twice,
and that made our

00:45:20.750 --> 00:45:22.320
runtime 42 milliseconds.

00:45:22.460 --> 00:45:26.680
So to put this in perspective,
if we're shooting for 50 frames a second,

00:45:26.680 --> 00:45:30.540
that means each frame
is only 20 milliseconds.

00:45:30.610 --> 00:45:33.180
So we've dropped two frames on the floor.

00:45:33.740 --> 00:45:38.140
Now, realistically speaking,
if we are getting 50 frames a second,

00:45:38.140 --> 00:45:39.700
you won't notice.

00:45:39.700 --> 00:45:44.140
But not everybody out there is
running Safari on the latest Mac Pro.

00:45:44.140 --> 00:45:46.690
There are people out there
running it on MacBooks.

00:45:46.690 --> 00:45:49.860
There are people running Safari on Cubes.

00:45:49.860 --> 00:45:52.380
And there's even that poor guy
out there running it on IE.

00:45:52.380 --> 00:45:55.300
So it's really,
really critical that we do

00:45:55.330 --> 00:45:59.270
everything we can to speed this up,
because that IE guy,

00:45:59.270 --> 00:46:03.470
he's going to be seeing
200 milliseconds or more.

00:46:03.740 --> 00:46:07.060
So he's going to drop
way more than two frames.

00:46:07.060 --> 00:46:10.580
He'll probably just
notice it pop into place.

00:46:10.580 --> 00:46:13.600
So we want to do whatever
we can to make that better.

00:46:13.600 --> 00:46:16.630
But it turns out,
there's not a lot of code here.

00:46:16.640 --> 00:46:20.640
Essentially, it's a tight loop with a
call to element get style.

00:46:20.640 --> 00:46:24.420
So let's take a look at element
get style and see what we can see.

00:46:24.420 --> 00:46:27.380
Now, I don't mean to be picking
on the prototype library,

00:46:27.410 --> 00:46:30.780
because this is the source code
for their get style function.

00:46:31.570 --> 00:46:35.070
I chose prototype because it is one of
the most popular libraries out there,

00:46:35.070 --> 00:46:38.590
and I figured a lot of you
would be very familiar with it.

00:46:40.100 --> 00:46:42.360
It turns out, though,
that as I mentioned earlier,

00:46:42.360 --> 00:46:46.840
this is written for everyone,
including people who pass in IDs.

00:46:46.840 --> 00:46:49.120
We're not going to ever pass in an ID.

00:46:49.120 --> 00:46:51.320
We're always going to
pass in an actual node.

00:46:51.320 --> 00:46:55.650
People who pass in CSS properties rather
than the JavaScript equivalent of them,

00:46:55.650 --> 00:46:59.040
we're only ever going to pass
in the JavaScript equivalent.

00:46:59.520 --> 00:47:02.070
So we can throw away a lot of this code.

00:47:02.070 --> 00:47:05.950
It's good code, but for our uses,
we don't need it.

00:47:05.950 --> 00:47:10.050
So we're only going to consider just
the code that we're interested in.

00:47:11.680 --> 00:47:14.910
So we see that we have one
access to an inline style,

00:47:15.000 --> 00:47:17.860
and we do that for performance reasons.

00:47:17.860 --> 00:47:20.430
If the inline style is there, excellent.

00:47:20.600 --> 00:47:22.180
We return it right quick.

00:47:22.260 --> 00:47:26.370
If the value is null,
then we call getComputedStyle to find

00:47:26.530 --> 00:47:31.550
out what the node's actual styles are,
and then we access that computed

00:47:31.590 --> 00:47:36.020
style and return it for a grand
total of three operations.

00:47:36.070 --> 00:47:37.370
Really good.

00:47:37.420 --> 00:47:39.900
I mean, if the prototype guys could
optimize this even more,

00:47:39.900 --> 00:47:41.580
I guarantee you they already would have.

00:47:41.600 --> 00:47:43.980
But keep in mind, this is generic code.

00:47:44.100 --> 00:47:46.140
It's meant for everyone to use.

00:47:46.140 --> 00:47:51.330
So if we put this in place
in our getStyles function,

00:47:51.330 --> 00:47:55.100
what we see is not so good performance.

00:47:55.100 --> 00:47:58.000
In addition to the call
to element getStyle,

00:47:58.000 --> 00:48:01.830
which carries along with it
three additional operations,

00:48:01.830 --> 00:48:04.960
we're doing that for
every single property.

00:48:04.960 --> 00:48:08.840
Well, we animate 30 to 40 properties.

00:48:08.880 --> 00:48:15.640
So you can easily see that we're doing a
tremendous number of operations per node,

00:48:15.640 --> 00:48:17.360
per loop through those nodes.

00:48:17.360 --> 00:48:21.040
So it's no wonder to me that it's taking
a little bit longer than it should.

00:48:21.040 --> 00:48:23.350
So this brings us to our first point.

00:48:24.080 --> 00:48:26.560
Sometimes it's necessary
to leave the library.

00:48:26.560 --> 00:48:30.040
So what we're going to do is we're
going to rewrite this entirely from

00:48:30.040 --> 00:48:33.180
scratch to do the exact same thing,
but do it a lot faster.

00:48:33.200 --> 00:48:34.280
So we're going to rewrite this entirely
from scratch to do the exact same thing,

00:48:34.280 --> 00:48:34.280
but do it a lot faster.

00:48:34.600 --> 00:51:04.100
[Transcript missing]

00:51:05.040 --> 00:51:07.000
We arrived at the same
result nonetheless.

00:51:07.210 --> 00:51:10.590
And this really, like I'm telling you,
this is not hard stuff.

00:51:10.740 --> 00:51:14.240
But the end result is a seven
times speed improvement.

00:51:14.300 --> 00:51:18.720
Now, I'll do a fair amount of work to
improve anything by seven times.

00:51:18.720 --> 00:51:21.600
And when it's a critical
feature of the site,

00:51:21.600 --> 00:51:25.280
like the product gallery is,
that's pretty awesome.

00:51:26.240 --> 00:51:28.290
So to recap,

00:51:28.790 --> 00:51:31.590
We talked about some of the
problems that we're all seeing.

00:51:31.760 --> 00:51:36.250
I'm sure nobody's site loads
as quickly as you want it to.

00:51:36.440 --> 00:51:37.400
I'm a web developer.

00:51:37.400 --> 00:51:40.380
Mine could never possibly
load as fast as I wanted to.

00:51:40.380 --> 00:51:43.080
And we use more bandwidth than we'd like.

00:51:43.170 --> 00:51:45.120
You know,
bandwidth is only going to get cheaper.

00:51:45.320 --> 00:51:45.820
That's true.

00:51:45.820 --> 00:51:48.510
But you still got to pay the bill.

00:51:48.520 --> 00:51:51.400
So the less you use, obviously,
the lower that bill's going to be.

00:51:51.400 --> 00:51:54.490
We looked at the strategies
that you can all use.

00:51:54.490 --> 00:51:56.100
They're really simple.

00:51:56.100 --> 00:51:59.770
They're the sorts of things that
all you got to do is find time

00:51:59.770 --> 00:52:02.100
in your schedules to apply them.

00:52:02.100 --> 00:52:05.480
And then we looked at how we're
applying them on the online store.

00:52:06.430 --> 00:52:10.580
And finally, hey,
we looked at ways to add even

00:52:10.580 --> 00:52:16.100
more interactivity to our websites
and hopefully provide a richer,

00:52:16.250 --> 00:52:19.270
more immersive experience
to our visitors.

00:52:19.460 --> 00:52:23.530
So if you'd like some more information,
please feel free to contact

00:52:23.530 --> 00:52:25.640
Vicki Murley or Mark Merlone.

00:52:25.650 --> 00:52:28.190
They're the evangelists for
Safari and Internet technologies,

00:52:28.190 --> 00:52:28.940
respectively.

00:52:28.940 --> 00:52:32.300
And do take a chance to look
at the JavaScript Lint tool.

00:52:32.380 --> 00:52:34.080
It's really tremendous.

00:52:34.080 --> 00:52:37.540
I can't tell you the number
of times it's caused,

00:52:37.640 --> 00:52:41.030
caught dumb bugs of mine,
which would have caused

00:52:41.380 --> 00:52:43.200
tremendous problems.

00:52:44.240 --> 00:52:47.190
But probably the best thing it
ever will do for you is tell you

00:52:47.350 --> 00:52:50.290
that you never declared a variable,
and you're promoting it

00:52:50.340 --> 00:52:51.580
then to global scope.

00:52:51.750 --> 00:52:55.850
So also the YUI Compressor,
say that 10 times fast.

00:52:55.850 --> 00:52:57.760
And this is a great tool.

00:52:57.760 --> 00:53:01.140
They've done an enormous
amount of work on it,

00:53:01.140 --> 00:53:02.890
as Ryan mentioned.

00:53:02.900 --> 00:53:06.450
And it'll really take your code,
smoosh it down,

00:53:06.450 --> 00:53:08.480
and reduce it quite a bit.

00:53:10.350 --> 00:53:14.550
If you didn't catch it yesterday,
I'd really encourage you to go

00:53:14.550 --> 00:53:18.540
onto iTunes in a week or so,
or maybe more,

00:53:18.890 --> 00:53:21.180
and download the debugging session.

00:53:21.180 --> 00:53:25.370
Tim and Adam did an awesome job
of walking you through the new

00:53:25.370 --> 00:53:27.800
debugging features in Safari.