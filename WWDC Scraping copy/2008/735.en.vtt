WEBVTT

00:00:23.110 --> 00:00:26.630
Hello and welcome to this
year's Image Kit session.

00:00:26.850 --> 00:00:29.110
This session is called
actually Image Capture,

00:00:29.110 --> 00:00:31.500
Manipulation, and Display with Image Kit.

00:00:31.500 --> 00:00:33.590
And in a bit you'll see why.

00:00:33.640 --> 00:00:38.800
I'm Werner Neubrand and I'm part
of the Graphics and Imaging group.

00:00:39.870 --> 00:00:40.940
Image Kit.

00:00:40.940 --> 00:00:45.810
Image Kit was a new framework that
we introduced with Mac OS X Leopard.

00:00:46.110 --> 00:00:48.590
It's actually dealing with images.

00:00:48.600 --> 00:00:51.940
So it's a framework,
part of Quartz frameworks

00:00:52.230 --> 00:00:53.030
of the umbrella.

00:00:53.080 --> 00:00:57.520
Frameworks lives at the same place where
PDFKit lives and deals with images.

00:00:57.560 --> 00:01:01.430
It has several components
and the most adopted,

00:01:01.620 --> 00:01:05.320
most used is really
the image browser view.

00:01:05.320 --> 00:01:09.970
The image browser view is a
highly optimized view that deals

00:01:10.010 --> 00:01:15.060
with a large number of images and
displays those in a grid view.

00:01:16.720 --> 00:01:20.610
It's optimized because it's very fast.

00:01:20.770 --> 00:01:24.400
It's optimized because it
takes very little memory.

00:01:24.960 --> 00:01:30.970
So, internal caching, nice rendering,
fast display.

00:01:31.370 --> 00:01:35.770
brings up your thumbnails,
your images on the screen,

00:01:35.830 --> 00:01:38.910
and you can have subtitles and more.

00:01:40.100 --> 00:01:44.620
The next component of
Image Kit is the picture taker.

00:01:44.790 --> 00:01:48.480
You all see the picture
taker if you have a laptop,

00:01:48.480 --> 00:01:52.990
a MacBook, MacBook Pro,
and you install it in your system.

00:01:52.990 --> 00:01:58.490
Because then the setup assistant at the
end will allow you to take a picture,

00:01:59.060 --> 00:02:01.880
If you use Address Book, you will see it.

00:02:01.930 --> 00:02:04.440
iChat is adopting that.

00:02:04.550 --> 00:02:08.990
So it's a common UI that works with
the built-in iSight or attached iSight,

00:02:08.990 --> 00:02:10.580
as you will see in a bit.

00:02:10.730 --> 00:02:14.910
And yeah,
nice way to get images from your

00:02:15.030 --> 00:02:17.990
iSight into your application.

00:02:19.460 --> 00:02:23.070
The next component is the image view.

00:02:23.120 --> 00:02:27.350
Again,
you could use like an NS image view,

00:02:27.410 --> 00:02:31.980
but we try to do a few things in
the IK image view that NS image

00:02:31.980 --> 00:02:35.800
view does not handle directly
or not handle the same way.

00:02:35.950 --> 00:02:39.150
For example,
we do take care automatically of

00:02:39.210 --> 00:02:44.990
embedded EXIF information to correctly
rotate an image when you load that.

00:02:45.210 --> 00:02:49.070
We do take care of
like non-square pixels,

00:02:49.070 --> 00:02:52.940
so if you have a resolution,
different DPIs for width and height.

00:02:53.030 --> 00:02:59.230
And we also try to work with very
large images by using a sub-sampling

00:02:59.260 --> 00:03:06.690
algorithm to initially bring up
the images very quickly and then

00:03:06.690 --> 00:03:10.370
load the image in higher resolution
after the initial display is up.

00:03:11.890 --> 00:03:16.360
Next component is the Image Edit Panel.

00:03:16.480 --> 00:03:19.640
The Image Edit Panel allows you,
for example,

00:03:19.640 --> 00:03:25.870
to work directly with an IK image view,
to display a set of CI filters

00:03:26.940 --> 00:03:32.150
and manipulate those and you will
see the result in the image view.

00:03:32.550 --> 00:03:41.560
It also has a tab where you basically
bring up separate previews of thumbnails

00:03:41.800 --> 00:03:46.010
where a filter is already applied
and you can just choose the one that

00:03:46.010 --> 00:03:48.710
you want to apply to your main image.

00:03:49.150 --> 00:03:54.020
And lastly, it has an information pane,
an information tab where

00:03:54.020 --> 00:03:59.030
you get some metadata,
including very nice representation of

00:03:59.030 --> 00:04:05.220
GPS metadata directly from the image
that you may have in the main display.

00:04:06.110 --> 00:04:08.830
The next component is the slideshow.

00:04:08.950 --> 00:04:12.850
Again,
a kind of easy way to display images

00:04:12.850 --> 00:04:17.730
full screen with nice transitions,
index mode.

00:04:17.760 --> 00:04:21.210
And, for example,
if you have iPhoto installed,

00:04:21.210 --> 00:04:26.880
it allows you to export individual images
directly to your iPhoto application.

00:04:28.970 --> 00:04:33.710
So last year, for the Image Kit session,
we were facing an

00:04:33.930 --> 00:04:36.640
iPhoto coding challenge.

00:04:36.730 --> 00:04:40.920
Which means, in that session,
we tried to create an application

00:04:41.500 --> 00:04:48.560
in several steps that would
kind of cover the functionality

00:04:49.090 --> 00:04:50.610
of an iPhoto application.

00:04:50.780 --> 00:04:55.280
Which means,
you would be able to browse images.

00:04:55.350 --> 00:04:58.550
Obviously,
this is the IK image browser view.

00:04:58.870 --> 00:05:02.600
We would be able to import,
through the image picker,

00:05:02.630 --> 00:05:05.900
import images from an eyesight.

00:05:06.330 --> 00:05:11.950
We want to view a selected
image in a large image view.

00:05:12.460 --> 00:05:14.560
We want to edit it.

00:05:14.750 --> 00:05:16.480
We want to save it.

00:05:16.530 --> 00:05:21.120
By the way, that's another component
of the Image Kit framework,

00:05:21.120 --> 00:05:26.030
an attach or like an add-on to
the save panel to have a kind

00:05:26.030 --> 00:05:33.390
of common UI to select various
options for different file formats.

00:05:33.740 --> 00:05:38.900
And at the end we want to present
the result in the slideshow.

00:05:39.520 --> 00:05:44.400
So the idea was to have an iPhoto
application in six easy steps.

00:05:44.400 --> 00:05:47.170
And actually I want to show you
that application because we will

00:05:47.260 --> 00:05:51.870
continue with that application and
enhance that during this session.

00:05:52.980 --> 00:05:55.340
So this is the application
up and running.

00:05:55.340 --> 00:05:58.970
You see we have the image browser view.

00:05:59.380 --> 00:06:04.290
And very nicely I can resize
and you see it's really fast.

00:06:04.580 --> 00:06:10.860
"Resize and when I let loose on
the mouse button then it fetches

00:06:11.060 --> 00:06:13.440
the full resolution of the image.

00:06:13.510 --> 00:06:20.490
So I can select an image here,
zoom in and it's very fast."

00:06:21.300 --> 00:06:27.140
So the image browser view
allows you also to reorder,

00:06:27.140 --> 00:06:29.200
and it does that with
very nice animations.

00:06:29.200 --> 00:06:34.000
So I can select three, move them here,
see very nicely, reorder.

00:06:34.140 --> 00:06:42.540
Or for example, I could select multiple
ones and get rid of those.

00:06:42.720 --> 00:06:45.450
So now we have only images up.

00:06:46.770 --> 00:06:53.910
Then, in this application,
we want to make use of the eyesight.

00:06:53.910 --> 00:06:58.920
So we bring up the image picker view.

00:07:00.890 --> 00:07:02.260
We will see that.

00:07:02.470 --> 00:07:07.980
Go in and add an effect to it.

00:07:08.080 --> 00:07:11.030
And set it and we'll see it's important.

00:07:11.970 --> 00:07:17.070
Now, when a selection changes
in the image browser view,

00:07:17.070 --> 00:07:20.320
we want to display it
in the main image view.

00:07:20.390 --> 00:07:22.140
Well, let's do that.

00:07:22.310 --> 00:07:23.780
Let's see.

00:07:23.820 --> 00:07:26.100
We can do that very easily.

00:07:27.500 --> 00:07:33.000
And if we select one image,
double click on it,

00:07:33.020 --> 00:07:36.540
then we get the image edit panel.

00:07:36.560 --> 00:07:47.080
Where we can adjust, for example,
convert it to a sepia or a white image.

00:07:47.090 --> 00:07:50.090
We can select different effects.

00:07:51.590 --> 00:07:57.240
And we can get some details,
so for example, the X and Y dimension,

00:07:57.240 --> 00:07:59.880
we get the orientation,
whether it's rotated,

00:07:59.880 --> 00:08:03.090
what software created and so on.

00:08:06.200 --> 00:08:13.640
and you see the title of that
image is Golden Palace JPEG.

00:08:13.740 --> 00:08:18.090
So it's a JPEG image,
but we want to save it as, for example,

00:08:18.090 --> 00:08:19.690
as a TIFF file.

00:08:19.810 --> 00:08:23.280
It's very easy to do because we
bring up our kind of common UI,

00:08:23.280 --> 00:08:27.700
select TIFF, and then we could specify,
for example, for the compression.

00:08:27.700 --> 00:08:32.690
We could save it as GIF,
while no options there.

00:08:32.940 --> 00:08:35.630
JPEG, we can specify the quality.

00:08:35.630 --> 00:08:39.740
So let's go ahead and actually
save it as a TIFF file.

00:08:41.610 --> 00:08:45.910
And it already exists,
so let's replace it.

00:08:45.910 --> 00:08:50.770
And what should happen is, well,
we just got a new TIP file.

00:08:51.810 --> 00:08:56.040
So the next step, very quickly going
through that application,

00:08:56.040 --> 00:08:58.350
is presenting it.

00:08:58.460 --> 00:09:03.730
So we have the slideshow
mode where we would just go

00:09:04.480 --> 00:09:06.000
I'm on play mode.

00:09:06.000 --> 00:09:10.670
Oh, I'm on the last image,
so let's pick--

00:09:10.930 --> 00:09:18.440
"I can go to the next one or in play
I can transition to the next image

00:09:18.500 --> 00:09:21.520
and go through all the images."

00:09:22.940 --> 00:09:25.210
So that's the application.

00:09:25.220 --> 00:09:29.130
And let's quickly look
at the code for this.

00:09:29.590 --> 00:09:32.170
So we don't want to
go through everything,

00:09:32.360 --> 00:09:35.320
but just look at the main classes.

00:09:37.750 --> 00:09:41.230
We do have a controller,
and the controller has a reference to

00:09:41.340 --> 00:09:44.700
an image browser view and an image view.

00:09:46.700 --> 00:09:50.900
And all our images are
kept in a mutable array.

00:09:50.900 --> 00:09:52.610
The images.

00:09:53.670 --> 00:09:59.600
Now the controller acts as
an image browser data source.

00:09:59.730 --> 00:10:01.200
So the concept is very simple.

00:10:01.430 --> 00:10:05.590
It's very similar
actually to NS table view.

00:10:05.720 --> 00:10:09.680
So you have a data source and as data
source you have to tell the object,

00:10:09.720 --> 00:10:13.540
the image browser view,
how many items do I have

00:10:13.850 --> 00:10:16.310
and give me item at index.

00:10:16.820 --> 00:10:18.620
So in our case, it's very simple.

00:10:18.670 --> 00:10:23.480
Our image array is
just an array of items.

00:10:23.570 --> 00:10:26.970
And the number of items that we want
to display on that image browser view

00:10:26.980 --> 00:10:29.490
was just the count of that array.

00:10:29.880 --> 00:10:33.880
And if we want to get it to
an item at a given index,

00:10:33.960 --> 00:10:37.360
it's very simple because
it's in a mutable array.

00:10:37.360 --> 00:10:40.290
It's just objected index.

00:10:40.870 --> 00:10:45.540
What's different from like a
regular table view data source

00:10:45.830 --> 00:10:51.280
is we are not returning the item,
the object to display directly.

00:10:51.280 --> 00:10:58.720
We return an item that has to
implement a couple of methods.

00:10:58.720 --> 00:11:05.310
And the couple of methods are those that
are in the item data source protocol.

00:11:05.430 --> 00:11:13.200
So we need a representation
and that could be one of many.

00:11:13.200 --> 00:11:18.620
It could be a path, it could be URL,
it could be an NS image, it could be a

00:11:19.720 --> 00:11:21.530
Yeah, a lot of things.

00:11:21.980 --> 00:11:26.310
And we need a unique ID.

00:11:26.550 --> 00:11:29.030
Because internally,
the image browser view tries

00:11:29.110 --> 00:11:32.390
to optimize the reloading,
refetching.

00:11:32.400 --> 00:11:35.420
If you return an ID and
you modify the image,

00:11:35.510 --> 00:11:37.700
then you have to somehow update that ID.

00:11:37.760 --> 00:11:43.550
Otherwise, the browser view would not
try to refetch the data.

00:11:43.900 --> 00:11:50.150
And then, optionally,
we would have a title, because we want to

00:11:50.250 --> 00:11:52.310
display the title there.

00:11:53.530 --> 00:11:58.760
So to set up the browser,
all we do is we create

00:11:58.770 --> 00:12:01.840
initially our image array.

00:12:02.060 --> 00:12:05.300
And we add images from a given directory.

00:12:05.360 --> 00:12:09.680
Whenever you install Mac OS X system,
then you will get a couple of

00:12:09.680 --> 00:12:13.030
images as desktop pictures,
and that's basically

00:12:13.030 --> 00:12:14.920
what we are pointing to.

00:12:15.130 --> 00:12:17.550
So it's very simple.

00:12:18.180 --> 00:12:23.350
In the add images from directory,
so we get in,

00:12:23.440 --> 00:12:26.230
get passed in a path to a directory.

00:12:26.260 --> 00:12:32.240
And we get the content at this path.

00:12:32.910 --> 00:12:38.010
That gives us an array with file
names that are within that directory.

00:12:38.010 --> 00:12:41.430
And all we have to do
is take the given path,

00:12:41.540 --> 00:12:49.370
append that individual file name to it,
and add the image to our array.

00:12:50.850 --> 00:12:52.640
Look at that, very quickly.

00:12:52.640 --> 00:12:53.400
It's very simple.

00:12:53.400 --> 00:12:58.070
All we do is basically we filter out
everything that starts with a dot.

00:12:58.120 --> 00:13:02.060
So .ds store or something like
that is treated as a hidden file,

00:13:02.070 --> 00:13:04.440
and we don't want to add that.

00:13:04.440 --> 00:13:08.780
Other than that,
all we do is we create an image object.

00:13:09.300 --> 00:13:16.100
Set the path,
add that image object to the images and

00:13:16.250 --> 00:13:20.220
We have that wrapped in "will
change" and "did change" value

00:13:20.330 --> 00:13:22.760
for key to be binding friendly.

00:13:23.020 --> 00:13:26.760
Actually,
you can download the code for these

00:13:26.760 --> 00:13:32.070
six steps and you will be surprised how
little code it actually is because a

00:13:32.070 --> 00:13:34.940
lot of things are done through bindings.

00:13:35.060 --> 00:13:38.590
So it's actually very easy to use.

00:13:42.400 --> 00:13:45.190
So that was this step.

00:13:45.320 --> 00:13:48.500
And now if you can get
back to the presentation.

00:13:51.610 --> 00:13:56.700
So we had the iPhoto in six easy steps.

00:13:56.700 --> 00:14:01.060
We got a couple of requests
after last year's WWDC.

00:14:01.070 --> 00:14:04.990
And a lot of people were asking, well,
it's great to have this

00:14:04.990 --> 00:14:08.430
image browser view,
but I want to have on the images,

00:14:08.560 --> 00:14:10.600
I want to have something custom.

00:14:10.600 --> 00:14:11.580
I would have a label.

00:14:11.580 --> 00:14:14.390
Or I don't like the background,
because the background in my

00:14:14.540 --> 00:14:16.420
application is completely different.

00:14:16.420 --> 00:14:18.450
So how can I customize that?

00:14:18.480 --> 00:14:21.180
So that was really number one request.

00:14:21.500 --> 00:14:24.540
And the other request was like,
I have another device.

00:14:24.540 --> 00:14:25.580
I don't have an eyesight.

00:14:25.580 --> 00:14:29.890
I want to get images from a camera,
from a scanner.

00:14:30.330 --> 00:14:34.750
So what we're doing this year,
we're beefing up our application,

00:14:34.870 --> 00:14:36.840
add two more steps.

00:14:36.880 --> 00:14:41.520
And the first one would be the
customization of the image browser.

00:14:41.740 --> 00:14:45.560
And for that,
I'm asking Thomas to come up on stage.

00:14:45.700 --> 00:14:48.690
He will tell you everything
about the image problem.

00:14:54.100 --> 00:14:57.040
So the image browser was
introduced on Leopard.

00:14:57.050 --> 00:15:00.120
So for this presentation,
I will just start with a quick

00:15:00.120 --> 00:15:03.260
overview to just describe
what the image browser is.

00:15:03.280 --> 00:15:08.110
And then I will spend more time on
the new APIs related to Snow Leopard,

00:15:08.110 --> 00:15:11.460
and especially on the
new customization APIs.

00:15:11.640 --> 00:15:13.940
So let's start with a quick overview.

00:15:14.150 --> 00:15:16.140
So here is the image browser.

00:15:16.190 --> 00:15:17.530
So this is a view.

00:15:17.610 --> 00:15:21.150
And its class name is
IK Image Browser View.

00:15:21.210 --> 00:15:27.020
And you can use this view to display
and to browse large amount of images.

00:15:27.180 --> 00:15:33.270
So typically this view lays out images in
a grid and users can scroll or zoom in,

00:15:33.360 --> 00:15:35.880
zoom out to browse the content.

00:15:35.990 --> 00:15:38.560
Also this view comes with a set
of features that you will have for

00:15:38.690 --> 00:15:43.390
free like the graphical selection,
type select, reordering, drag and drop,

00:15:43.740 --> 00:15:46.420
animations, all those kind of things.

00:15:46.750 --> 00:15:50.240
You can find some examples of
use of this view on several

00:15:50.240 --> 00:15:54.870
applications on the system,
like in the Finder, Image Capture,

00:15:54.870 --> 00:15:58.200
Preview, the iLife Media Browser, etc.

00:15:58.310 --> 00:16:01.350
and in some third-party
applications as well.

00:16:02.570 --> 00:16:05.140
And you can use this
view to browse images,

00:16:05.140 --> 00:16:10.370
so typically any kind of image
format supported by Image I/O.

00:16:10.760 --> 00:16:14.100
You can also browse movies,
and for movies you can even

00:16:14.100 --> 00:16:17.340
play the movies directly
in the image browser view,

00:16:17.360 --> 00:16:19.270
which is very practical.

00:16:19.610 --> 00:16:24.280
You can browse PDFs and in
fact you can browse any kind of

00:16:24.340 --> 00:16:26.780
document thanks to Quick Look.

00:16:26.930 --> 00:16:31.420
So you can browse any kind of document
natively supported by Quick Look,

00:16:31.540 --> 00:16:36.220
like HTML pages, contacts,
notes or whatever.

00:16:36.370 --> 00:16:39.770
But also,
if you write your own Quick Look plugin

00:16:40.190 --> 00:16:44.030
for your own document,
then you can use the IK Image Browser

00:16:44.030 --> 00:16:48.290
View to browse your own
document in your application.

00:16:49.930 --> 00:16:51.600
And then how it works.

00:16:51.640 --> 00:16:54.950
So here, just to give you the basis,
as Werner said,

00:16:54.950 --> 00:16:58.650
the image browser uses the same
data source mechanism as the

00:16:58.650 --> 00:17:01.360
NS TableView or NS OutlineView.

00:17:01.390 --> 00:17:05.530
So concretely,
you implement a data source,

00:17:05.530 --> 00:17:09.020
and its role is to provide the
images to the image browser when

00:17:09.020 --> 00:17:11.400
the image browser requests them.

00:17:11.700 --> 00:17:14.500
Your data source can provide
the images using file paths,

00:17:14.690 --> 00:17:20.360
URL, NS images, CG image ref, bitmaps,
NSData as icon refs.

00:17:20.430 --> 00:17:23.630
So there's a lot of different
ways to provide the images.

00:17:24.020 --> 00:17:27.590
And then the image browser takes
care of calculating the thumbnails

00:17:27.770 --> 00:17:32.600
from your images and draws them at
the correct location in the view.

00:17:34.350 --> 00:17:38.410
The image browser was designed
to support very large datasets.

00:17:38.430 --> 00:17:41.800
It supports hundreds
of thousands of images.

00:17:41.930 --> 00:17:46.120
It is entirely rendered using
the GPU to offer a very smooth

00:17:46.160 --> 00:17:48.790
scrolling and zooming experience.

00:17:48.980 --> 00:17:53.560
And another important aspect of
Image Kit is that the image browser

00:17:53.560 --> 00:17:59.140
manages its own cache by keeping the
last presently used images on the

00:17:59.140 --> 00:18:04.810
GPU and automatically discard the others
to never exceed a given memory limit.

00:18:04.900 --> 00:18:09.510
So you don't have to write any code to
keep the memory allocation constant.

00:18:09.520 --> 00:18:15.090
The only thing you have to do is to
not cache any image on your side.

00:18:16.140 --> 00:18:20.200
Just compute if needed and return
the images you want to display when

00:18:20.230 --> 00:18:21.960
the image browser requests them.

00:18:24.000 --> 00:18:26.060
So that's for the quick overview.

00:18:26.080 --> 00:18:29.800
Now we'll have to talk about
what's new on Snow Leopard.

00:18:29.820 --> 00:18:35.080
And the first request of developers was
to be able to customize the appearance

00:18:35.080 --> 00:18:39.770
of the view so that it looks more
consistent with the application.

00:18:39.930 --> 00:18:44.800
So we added new APIs in Snow Leopard
that allows you to control the rendering,

00:18:44.800 --> 00:18:47.160
the layout and the rendering.

00:18:47.310 --> 00:18:50.290
And I will talk about
this in a little bit.

00:18:51.090 --> 00:18:56.000
Also, some other miscellaneous
stuffs like drop-on items.

00:18:56.130 --> 00:18:58.500
On Leopard,
it was possible to drop something

00:18:58.640 --> 00:19:02.240
between two cells or on the whole view.

00:19:02.420 --> 00:19:06.240
Now it's also possible to drop
something on a given cell.

00:19:06.310 --> 00:19:09.660
Like in the Finder, for instance,
when you drop a file in a

00:19:09.660 --> 00:19:14.110
folder or on an application,
now you can do the same thing

00:19:14.110 --> 00:19:16.150
with the IK Image Brother view.

00:19:16.760 --> 00:19:20.830
Also, Image Kit now provides an
additional image representation,

00:19:20.880 --> 00:19:23.200
that is, a PDF page representation.

00:19:23.310 --> 00:19:28.640
And this lets you feed the image
browser with PDF pages you get from

00:19:28.640 --> 00:19:32.800
PDF Kit or CG/PDF Document Ref.

00:19:32.900 --> 00:19:35.960
So now let's focus on the customization.

00:19:36.990 --> 00:19:41.380
And usually you customize
the appearance in two steps.

00:19:41.550 --> 00:19:45.500
First, you customize the appearance
of the view itself.

00:19:45.500 --> 00:19:48.660
And then you customize the
appearance of the cells.

00:19:48.810 --> 00:19:50.970
So let's see the first step.

00:19:52.220 --> 00:19:56.560
So on Snow Leopard you can now use the
methods of IK Image Browser View to

00:19:56.560 --> 00:20:01.610
change the appearance of the background,
add some overlays,

00:20:01.730 --> 00:20:04.510
change the margins between cells,

00:20:04.720 --> 00:20:07.860
And you can still, of course,
change the size of the cells,

00:20:07.890 --> 00:20:10.510
the decoration of the cells,
like if you want to

00:20:10.510 --> 00:20:15.160
toggle on/off the shadows,
the outline, the title or subtitles.

00:20:15.240 --> 00:20:19.560
And you can change the common font
that is shared by all the cells

00:20:19.560 --> 00:20:22.000
to draw the title or subtitles.

00:20:22.560 --> 00:20:26.400
So let's go more into details
for the three first ones.

00:20:26.490 --> 00:20:30.400
So here are three new
accessories on Snow Leopard.

00:20:30.450 --> 00:20:34.900
The first one allows you to
change the margin between cells.

00:20:35.000 --> 00:20:37.870
The second one and third one allows
you to change the appearance of the

00:20:37.870 --> 00:20:41.150
background and to add some overlays.

00:20:41.310 --> 00:20:45.540
And here in set foreground layer,
the first segment of set foreground layer

00:20:45.560 --> 00:20:48.070
and set background layer is a layer.

00:20:48.080 --> 00:20:53.200
So that means you can set any kind of
layer here to change the appearance

00:20:53.200 --> 00:20:54.640
of the background or the overlays.

00:20:54.640 --> 00:20:59.120
So it can be a movie layer
or a cross composition layer.

00:20:59.120 --> 00:21:05.110
It can be even a custom layer that you
render using the AppKit or Core Graphics.

00:21:05.120 --> 00:21:07.360
It can be an image embedded
into a layer or whatever.

00:21:08.410 --> 00:21:10.750
And also it's not only
limited to one layer,

00:21:10.870 --> 00:21:13.840
but it can be a complete layer tree.

00:21:13.840 --> 00:21:15.520
So layers with sub layers.

00:21:15.520 --> 00:21:19.440
And to finish,
you can also add animations

00:21:19.440 --> 00:21:21.890
to your layers if you want
your background to animate,

00:21:21.890 --> 00:21:23.120
for instance.

00:21:24.120 --> 00:21:30.750
So the next slide shows an example of
over-customized image browser view.

00:21:31.560 --> 00:21:34.770
So in this example,
there is a quad composition

00:21:34.930 --> 00:21:36.460
in the background.

00:21:36.480 --> 00:21:40.130
And so it's a quad composition
embedded into an layer.

00:21:40.140 --> 00:21:42.090
And in the foreground,
there is another layer that

00:21:42.090 --> 00:21:45.730
embeds another course composition
that draws the curtains.

00:21:46.020 --> 00:21:50.350
So this example is probably unusable,
but it illustrates quite well the fact

00:21:50.360 --> 00:21:53.980
you can do really what you want for
the background and the foreground,

00:21:53.980 --> 00:22:00.450
including animations, transparency,
and media like course compositions.

00:22:01.350 --> 00:22:06.200
So now we can really customize the
background and the overlays of the view.

00:22:06.290 --> 00:22:09.800
And then we may want to change
the appearance of the cells.

00:22:09.900 --> 00:22:13.000
So that's the second step
of the customization.

00:22:13.050 --> 00:22:16.810
And here we introduce in
Image Kit the concept of cell.

00:22:17.690 --> 00:22:21.290
A cell for the image browser
is represented by the

00:22:21.300 --> 00:22:23.600
IK ImageBrowserCell class.

00:22:23.600 --> 00:22:28.910
An IK ImageBrowserCell is quite similar
to an NSCell in the way it handles

00:22:29.120 --> 00:22:31.520
all drawing operations for your cell.

00:22:31.600 --> 00:22:36.590
However, the way it renders things is
very different than NSCell.

00:22:36.600 --> 00:22:40.690
The ImageBrowser renders
everything using the GPU,

00:22:40.690 --> 00:22:45.780
so it's not possible for you to add some
drawing code based on Core Graphics or

00:22:45.780 --> 00:22:48.600
the AppKit to draw the things you want.

00:22:48.600 --> 00:22:52.790
So instead of overriding your
draw method where you will draw

00:22:52.790 --> 00:22:55.880
everything using the AppKit,
instead of that,

00:22:55.880 --> 00:22:58.600
your custom cell provides layers.

00:22:59.850 --> 00:23:03.340
Layers have several
advantages in comparison to

00:23:03.450 --> 00:23:05.960
the traditional NSL approach.

00:23:06.100 --> 00:23:08.960
First, layers are rendered using the GPU,
which is much better on a

00:23:08.960 --> 00:23:11.160
performance point of view.

00:23:11.240 --> 00:23:13.960
Then you can associate
animations to layers,

00:23:14.040 --> 00:23:17.270
which is more practical if
you want to animate something.

00:23:17.700 --> 00:23:21.000
It is really easy to embed
medias like movies or cross

00:23:21.000 --> 00:23:23.600
compositions in your layers.

00:23:23.700 --> 00:23:26.930
And to finish,
you can still use the App Kit or

00:23:26.930 --> 00:23:31.420
Core Graphics to do everything
you want in your custom layer.

00:23:31.640 --> 00:23:37.420
So you still have the convenience
and flexibility of high-level

00:23:37.420 --> 00:23:42.470
APIs like the App Kit,
but you also take benefit of the GPU.

00:23:43.750 --> 00:23:47.300
Now let's see how to
implement a custom cell.

00:23:47.400 --> 00:23:52.360
So here, our API is quite close to
the NS Collection View API.

00:23:52.420 --> 00:23:56.740
So the first thing you have to do
is to override-- is to a subclass,

00:23:56.740 --> 00:23:59.760
sorry,
the IK ImageBrowserView and implement

00:23:59.760 --> 00:24:02.640
the method newCellForRepresentedEtem.

00:24:02.700 --> 00:24:06.960
And this is where you return a
new instance of your custom cell.

00:24:06.990 --> 00:24:10.900
And your custom cell must be a
subclass of IK ImageBrowserCell,

00:24:10.900 --> 00:24:13.420
of the IK ImageBrowserCell class.

00:24:13.910 --> 00:24:16.130
And so by doing this,
the image browser will use

00:24:16.470 --> 00:24:20.670
the instance of your custom
class to represent graphically

00:24:20.760 --> 00:24:23.070
the data source item and item.

00:24:24.400 --> 00:24:27.620
So now we have our custom cell in place,
let's see how we can

00:24:27.620 --> 00:24:29.410
impact the appearance.

00:24:29.690 --> 00:24:35.040
So here is the default appearance
of a cell in the IK Metros overview.

00:24:35.110 --> 00:24:38.360
And the cell is in fact
made of several components.

00:24:38.890 --> 00:24:42.040
There is the thumbnail,
a cell of course has a thumbnail.

00:24:42.080 --> 00:24:47.000
A cell can have a selection, a title,
and a subtitle.

00:24:47.010 --> 00:24:51.880
And the first thing we can do to
modify the appearance of a cell is to

00:24:51.880 --> 00:24:54.690
modify the layout of those components.

00:24:54.800 --> 00:24:57.870
So here is a schematic view
of the same cell that shows

00:24:58.110 --> 00:25:00.490
each frame of each component.

00:25:00.580 --> 00:25:03.040
So the image frame is the frame
where the image will be drawn,

00:25:03.090 --> 00:25:05.000
the selection frame is the
frame of the selection,

00:25:05.030 --> 00:25:06.850
the title frame is the
frame of the title,

00:25:06.910 --> 00:25:08.490
and so on.

00:25:08.940 --> 00:25:12.850
And if we look at the header
of IK ImageBrowserCell,

00:25:12.850 --> 00:25:16.600
all those frames are
defined by the method here.

00:25:16.990 --> 00:25:20.940
And Accept Frame,
which defines the whole frame of the

00:25:21.060 --> 00:25:23.900
cell that includes all the other frames.

00:25:23.900 --> 00:25:27.380
You can override any
of these methods here.

00:25:27.380 --> 00:25:30.740
So Image Container Frame is the frame
that will contain the thumbnail.

00:25:30.740 --> 00:25:35.540
Image Alignment is how the thumbnail
is aligned in the container.

00:25:35.540 --> 00:25:39.220
Image Frame is the frame calculated
from the Image Container Frame that

00:25:39.220 --> 00:25:43.510
takes into account the aspect ratio of
the thumbnail plus the image alignment.

00:25:43.520 --> 00:25:45.340
the selection from the
from the selection,

00:25:45.340 --> 00:25:46.910
et cetera.

00:25:47.540 --> 00:25:50.670
And so by just overriding
some of these methods,

00:25:50.670 --> 00:25:54.620
we can easily turn
this to look into this.

00:25:54.650 --> 00:25:59.780
And so having our cell to finally looks
like this in the image browser view.

00:25:59.810 --> 00:26:02.480
So that's how to modify the layout.

00:26:02.500 --> 00:26:07.080
Now you may want to change
how the cells render itself.

00:26:07.400 --> 00:26:12.580
So again,
here is the appearance of a cell.

00:26:13.210 --> 00:26:19.100
And you can imagine the fact that
a cell is made of several layers

00:26:19.160 --> 00:26:22.370
that can be decomposed like this.

00:26:23.330 --> 00:26:27.730
So a cell has a background
layer that is empty by default,

00:26:27.730 --> 00:26:29.910
so it just draws nothing.

00:26:30.090 --> 00:26:34.000
It has a selection layer that is
drawn only when the cell is selected.

00:26:34.100 --> 00:26:37.480
It has a placeholder layer
which is drawn only when the

00:26:37.480 --> 00:26:40.000
thumbnail is not calculated yet.

00:26:40.110 --> 00:26:42.940
There is a thumbnail, of course,
a title and a subtitle,

00:26:42.950 --> 00:26:46.510
and the foreground layer
that is empty by default.

00:26:46.730 --> 00:26:51.500
And so now on Snow Leopard,
you can replace any of these layers.

00:26:51.500 --> 00:26:53.230
You can change the
appearance of the background,

00:26:53.230 --> 00:26:56.300
the selection, the placeholder,
and the foreground layer.

00:26:56.390 --> 00:26:58.280
And to do this,

00:26:58.400 --> 00:27:03.500
You have to implement in your
custom cell the method LayerForType.

00:27:03.580 --> 00:27:07.930
And this is where you return the layer
or layer tree you want for a given type.

00:27:08.020 --> 00:27:10.260
So for instance,
if you want to change the

00:27:10.260 --> 00:27:13.710
appearance of the placeholder,
implement LayerForType

00:27:13.710 --> 00:27:14.940
in your custom cell.

00:27:15.020 --> 00:27:18.740
And when the type is
IK ImageBrowserCellPlaceholderLayer,

00:27:18.820 --> 00:27:21.140
return the layer you want.

00:27:21.530 --> 00:27:26.140
So for instance, if I do this,
if I return a white wounded square

00:27:26.460 --> 00:27:30.890
when the type is a background layer,
this will change the appearance of my

00:27:30.970 --> 00:27:34.100
background layer to look like this.

00:27:34.240 --> 00:27:37.330
Same thing if I return a
slightly transparent pink and

00:27:37.330 --> 00:27:41.260
wounded layer for the selection,
it will change the appearance

00:27:41.260 --> 00:27:42.800
of my selection like this.

00:27:43.580 --> 00:27:46.450
Then I can also embed
an image in a layer.

00:27:46.530 --> 00:27:49.390
If I want to add a kind of
glossy overlay to my cell,

00:27:49.390 --> 00:27:52.380
I can return a layer that
embeds a kind of glossy image.

00:27:52.530 --> 00:27:56.580
This will modify the foreground
layer to look like this.

00:27:56.660 --> 00:27:59.870
And to finish,
we can still use the methods of

00:27:59.870 --> 00:28:05.620
the IK Image Browser view to change
the font size and the font color

00:28:05.770 --> 00:28:08.450
of the title and the subtitle.

00:28:08.850 --> 00:28:15.540
And so by doing all of these changes,
our cell finally looks like this.

00:28:16.340 --> 00:28:20.060
and when it's not selected
to look like this.

00:28:20.070 --> 00:28:22.800
So in Snow Leopard,
now you have methods to change

00:28:22.800 --> 00:28:26.300
the appearance of the background
and the foreground of the view,

00:28:26.340 --> 00:28:30.640
to re-change the layout and
the rendering of the cells.

00:28:30.700 --> 00:28:34.660
And so you can, as an example,
change the appearance of the

00:28:34.660 --> 00:28:39.200
default appearance here to
look into something like this.

00:28:39.200 --> 00:28:44.750
And this is what I'm going to illustrate
now with the demo application.

00:28:44.790 --> 00:28:46.540
Can we switch to the demo machine,
please?

00:28:46.540 --> 00:28:53.280
OK.

00:28:58.390 --> 00:29:03.790
So first, I start with the end of the
step six we made last year.

00:29:03.870 --> 00:29:09.660
So last year, the last step of our
applications was that.

00:29:09.670 --> 00:29:14.500
And now we want to change the appearance
of the image browser a little bit.

00:29:14.530 --> 00:29:17.000
And the first step,
the first thing I will do,

00:29:17.000 --> 00:29:19.000
is change the appearance
of the background.

00:29:19.030 --> 00:29:21.650
And let's say I want to draw
an image in the background

00:29:21.810 --> 00:29:24.730
instead of a flat white color.

00:29:25.680 --> 00:29:32.570
And so what I have to do is
to first fix the typo here.

00:29:34.170 --> 00:29:38.350
And then I have to use the
method setBackgroundLayer of

00:29:38.350 --> 00:29:39.640
the IK image browser view.

00:29:39.640 --> 00:29:41.790
And this is where I set a layer.

00:29:41.890 --> 00:29:45.390
And my layer is allocated here.

00:29:45.770 --> 00:29:47.260
- So it's a custom layer.

00:29:47.260 --> 00:29:50.700
It's class is
ImageBrowserBackgroundLayer.

00:29:50.750 --> 00:29:54.100
So I locate an instance here and
I set the background layer here.

00:29:54.100 --> 00:29:58.370
And if we look at the interface
of ImageBrowserBackgroundLayer,

00:30:00.450 --> 00:30:04.140
An image browser background layer
here is just a subclass of a

00:30:04.220 --> 00:30:07.160
CA layer because it's a custom layer.

00:30:07.280 --> 00:30:10.520
And its implementation is very easy.

00:30:10.600 --> 00:30:13.440
So I just override drawing context.

00:30:13.480 --> 00:30:16.400
This is the usual way to
implement a custom layer.

00:30:16.490 --> 00:30:21.430
And this is where I will draw an image,
typically an image that looks like this.

00:30:21.460 --> 00:30:23.680
So there is an image in my project.

00:30:23.810 --> 00:30:28.510
I load that image and I draw
it several times using the,

00:30:28.580 --> 00:30:31.480
here I use Core Graphics,
but you could use the AppKit.

00:30:31.590 --> 00:30:35.280
So I get the width of my image,
the height of my image,

00:30:35.320 --> 00:30:40.460
and I draw it several times in my
layer so that it fills my layer.

00:30:41.020 --> 00:30:44.790
So now if I run the
same application again,

00:30:44.790 --> 00:30:47.400
now the background of
my view looks like this.

00:30:47.460 --> 00:30:49.680
The view of course is still functional.

00:30:49.710 --> 00:30:52.160
Can still zoom in, zoom out.

00:30:53.220 --> 00:30:55.990
But as you can see,
now the titles are not

00:30:55.990 --> 00:30:59.300
really readable anymore,
so I want to change the

00:30:59.300 --> 00:31:01.730
appearance of the cells.

00:31:02.910 --> 00:31:07.560
So this is what I call the
second step of the customization.

00:31:07.660 --> 00:31:10.480
And as I said,
the first thing you have to do is to

00:31:10.990 --> 00:31:13.640
subclass the IK image browser view.

00:31:13.730 --> 00:31:17.560
Here my subclass is image browser view.

00:31:17.640 --> 00:31:22.510
And you have to implement the method
new cell for represented item.

00:31:25.820 --> 00:31:29.740
And this is where you return a
new instance of your custom cell.

00:31:29.770 --> 00:31:33.560
In here,
my custom cell is an image browser cell.

00:31:33.580 --> 00:31:38.590
So if we look at the interface
of image browser cell,

00:31:39.450 --> 00:31:44.640
An image browser cell is simply a
subclass of IK image browser cell.

00:31:44.980 --> 00:31:50.130
And if we look at the implementation,
I implement layer for type.

00:31:50.230 --> 00:31:54.120
And in this example,
I return custom layers for

00:31:54.120 --> 00:31:57.740
any type because I customize
a placeholder layer here,

00:31:57.810 --> 00:32:01.980
the foreground layer here,
the selection layer.

00:32:02.210 --> 00:32:03.600
and the background layer.

00:32:03.700 --> 00:32:08.440
So let's see just one,
which is the foreground layer,

00:32:08.440 --> 00:32:09.880
for instance.

00:32:09.890 --> 00:32:13.340
In my project,
I also have two other images,

00:32:13.340 --> 00:32:17.500
which is a kind of-- it's not visible,
but it's a kind of glossy overlay.

00:32:17.580 --> 00:32:19.920
So there is also a pin image here.

00:32:19.950 --> 00:32:23.810
And then what I want to do is to
add a glossy overlay plus a pin

00:32:23.810 --> 00:32:27.310
image as another overlay to my cell.

00:32:28.150 --> 00:32:33.320
So what I have to do here is to
allocate a first layer and then

00:32:33.730 --> 00:32:39.240
allocate two other layers that I,
and I add those two other layers as

00:32:39.240 --> 00:32:41.020
the sub layers of my first layer.

00:32:41.020 --> 00:32:42.540
So here is my first layer.

00:32:42.540 --> 00:32:48.960
I create a glossy layer here where I set
an image as a content of my glossy layer.

00:32:48.960 --> 00:32:53.340
And I add my glossy layer as
a sub layer of the main layer.

00:32:53.340 --> 00:32:55.480
And same thing for the pin image.

00:32:55.480 --> 00:33:00.640
I allocate a new layer, set the content,
set a pin image as the

00:33:00.640 --> 00:33:03.040
content of the pin layer.

00:33:03.040 --> 00:33:07.700
And finally, add the pin layer as a sub
layer of my main layer.

00:33:07.700 --> 00:33:12.560
So my main layer here has two sub layers,
which are a glossy image and a pin image.

00:33:12.560 --> 00:33:16.290
And if I run it again now,

00:33:16.790 --> 00:33:19.660
My custom cell looks like this,
so it's really completely different.

00:33:19.750 --> 00:33:23.020
The selection is different as well
because it's another custom layer.

00:33:23.020 --> 00:33:26.310
And the view is of
course still functional.

00:33:26.380 --> 00:33:30.450
You can still reorder
things or search for images,

00:33:30.450 --> 00:33:30.700
etc.

00:33:30.700 --> 00:33:34.610
Everything is still functional.

00:33:42.850 --> 00:33:44.830
Okay, so that's for demo.

00:33:44.830 --> 00:33:46.230
Can we switch back to the slides?

00:33:46.230 --> 00:33:50.480
And I directly pass back to Werner
to the rest of the presentation.

00:33:50.660 --> 00:33:52.070
Thank you.

00:33:56.400 --> 00:34:00.900
Now that we saw it's very simple to
customize the image browser view,

00:34:00.960 --> 00:34:05.870
let's go back to our request number two,
and that was really importing the images.

00:34:05.920 --> 00:34:08.720
As we saw,
we can do that with the eyesight,

00:34:08.800 --> 00:34:10.820
but actually there are
more devices out there,

00:34:10.920 --> 00:34:14.280
like cameras or iPhones and scanners.

00:34:14.350 --> 00:34:15.560
What about these devices?

00:34:15.720 --> 00:34:22.050
How do we get images from there into our
image browser view into our application?

00:34:22.240 --> 00:34:25.400
Well,
we have and had that for a long time,

00:34:25.450 --> 00:34:27.140
the Image Capture Framework.

00:34:27.210 --> 00:34:31.130
Image Capture Framework is
part of the Carbon Framework.

00:34:31.260 --> 00:34:33.900
It has a C API.

00:34:34.040 --> 00:34:39.550
And it was redesigned to do
synchronous and asynchronous calls.

00:34:39.630 --> 00:34:41.560
It's kind of bad that you
have to know about this

00:34:42.020 --> 00:34:45.830
synchronous/asynchronous behavior,
because ideally you would just use

00:34:45.840 --> 00:34:53.390
it and have a simple way to go to
the images from a scanner or camera.

00:34:53.610 --> 00:34:57.160
So a lot of people were
struggling with the API.

00:34:57.210 --> 00:35:00.900
And so we said for Snow Leopard,
we actually want to do something new.

00:35:01.010 --> 00:35:04.300
We want to have a new framework,
Image Capture Core.

00:35:04.360 --> 00:35:09.770
And we pass over to Baskaran to
introduce this new framework.

00:35:15.900 --> 00:35:23.150
Image Capture Core is a new
framework for Snow Leopard and

00:35:23.580 --> 00:35:30.040
It's the foundation for applications
that use cameras and scanners.

00:35:30.100 --> 00:35:32.370
And it is buzzword compliant.

00:35:32.400 --> 00:35:37.340
It's 100% pure Cocoa, 64-bit,
garbage collected.

00:35:37.420 --> 00:35:40.710
And it is Cocoa bindings friendly.

00:35:40.780 --> 00:35:46.820
makes it easy to create UI using
Interface Builder and bind directly

00:35:46.820 --> 00:35:49.810
to the objects from this framework.

00:35:49.810 --> 00:35:54.740
And it uses delegation to manage
asynchronous communication with devices.

00:35:54.760 --> 00:36:00.540
I want to emphasize this aspect
of communicating with devices.

00:36:00.540 --> 00:36:07.700
Cameras and scanners can be
slow to respond and maybe busy,

00:36:08.490 --> 00:36:10.910
maybe in a state that you
need to recover from before it

00:36:10.910 --> 00:36:12.510
can respond to your request.

00:36:12.660 --> 00:36:18.210
So trying to communicate with them in
a synchronous way is not a good way

00:36:18.370 --> 00:36:23.820
of doing it because it can block your
application until the device responds.

00:36:23.840 --> 00:36:25.810
And, um,

00:36:26.010 --> 00:36:28.920
For example,
let's say that you want to download

00:36:29.240 --> 00:36:31.620
a large file from the camera.

00:36:31.620 --> 00:36:35.790
And if you call it synchronously,
the download call will return only

00:36:35.920 --> 00:36:40.140
after the entire download completes,
which you may not want to do.

00:36:40.210 --> 00:36:48.690
You may want to issue a request
to download and then be notified

00:36:49.300 --> 00:36:49.320
later when the download is complete.

00:36:50.230 --> 00:36:54.440
The other situation is that devices
may have some state information

00:36:54.440 --> 00:36:58.400
that it may want to report to
that application that you have.

00:36:58.560 --> 00:37:01.900
For example,
when you try to scan from a scanner,

00:37:01.900 --> 00:37:08.520
it may want to report to you that there
is no document to scan in the feeder.

00:37:08.830 --> 00:37:13.600
And to handle that, you need some kind of
a delegation mechanism,

00:37:13.620 --> 00:37:16.350
and that's what we
have in this framework.

00:37:16.490 --> 00:37:21.460
All requests to the devices
are handled asynchronously,

00:37:21.650 --> 00:37:28.460
and you handle the responses
back using delegate methods.

00:37:28.590 --> 00:37:33.270
The main components in the
Image Capture Core framework

00:37:33.510 --> 00:37:35.540
There are two main components.

00:37:35.540 --> 00:37:42.070
One is the device browser that allows
you to browse for image capture devices.

00:37:42.070 --> 00:37:46.400
And you can browse for
cameras and scanners.

00:37:46.580 --> 00:37:49.220
And in this case,
when you browse for cameras,

00:37:49.220 --> 00:37:51.360
it will deliver you a
camera if it finds one.

00:37:51.360 --> 00:37:58.350
Or you can just browse for scanners
and then you'll find only the scanners.

00:37:58.350 --> 00:37:58.350
Or you can browse for both.

00:37:59.950 --> 00:38:08.100
And the browser is represented
by the IC device browser class.

00:38:08.280 --> 00:38:12.610
Since you need delegation,
you need to have a delegate

00:38:12.620 --> 00:38:17.330
assigned to each of the classes
in the image capture core.

00:38:17.600 --> 00:38:23.620
And we use properties,
Objective-C2 properties,

00:38:23.620 --> 00:38:28.040
throughout our framework so
it is easy to write your code.

00:38:28.040 --> 00:38:31.700
You assign a delegate, and then--

00:38:32.110 --> 00:38:35.920
You actually first create it
and then assign it to Legit.

00:38:35.970 --> 00:38:40.590
And then you can use one of these
three methods to start browsing.

00:38:40.670 --> 00:38:45.760
You can browse for all of them or
just for cameras or for scanners.

00:38:45.780 --> 00:38:49.590
Then when you have found what you want,
you can stop browsing.

00:38:51.350 --> 00:38:57.250
And the delegate methods that you need
to implement in your delegate in order

00:38:57.250 --> 00:39:03.560
to receive the devices reported by the
browser or if the devices are removed,

00:39:03.650 --> 00:39:05.130
they are here.

00:39:05.140 --> 00:39:09.100
So did add device will tell you
when there is a device and did

00:39:09.100 --> 00:39:13.210
remove device will report to you
if the device has been turned off.

00:39:14.560 --> 00:39:16.740
Okay, let's look at the device.

00:39:17.000 --> 00:39:21.660
The IC device is an abstract base
class representation of a device,

00:39:21.660 --> 00:39:23.060
a camera or a scanner.

00:39:23.060 --> 00:39:28.330
And the camera device and scanner
device both share several properties

00:39:28.420 --> 00:39:30.200
that are represented in the base class.

00:39:30.200 --> 00:39:33.790
For example, the type tells you whether
it's a camera or a scanner,

00:39:33.790 --> 00:39:37.190
the name of the device,
an icon representation for the device,

00:39:37.190 --> 00:39:40.440
and whether there is a session
open on the device or not.

00:39:40.830 --> 00:39:44.480
And also you can request
to open a session on the

00:39:44.490 --> 00:39:46.730
device or to close a session.

00:39:47.010 --> 00:39:50.670
The camera device has some
additional properties.

00:39:50.790 --> 00:39:53.320
For example, the contents of the camera.

00:39:53.510 --> 00:40:00.210
That contents property will give
you a hierarchical representation

00:40:00.310 --> 00:40:02.940
of the folders and files.

00:40:07.500 --> 00:41:33.500
[Transcript missing]

00:41:34.500 --> 00:41:38.830
The device and the camera device
both have some delegate methods

00:41:38.880 --> 00:41:41.460
that you need to implement
if you are going to use them.

00:41:41.460 --> 00:41:45.400
For example, you may want to know when
the device is removed.

00:41:45.400 --> 00:41:48.540
So you definitely want to
implement that did remove device.

00:41:48.540 --> 00:41:52.990
And also when you open a session,
when the session open is complete,

00:41:52.990 --> 00:41:56.220
you will be called back
with a did open session.

00:41:56.220 --> 00:41:59.120
And when the device is ready,
you will be called with

00:41:59.120 --> 00:42:00.930
that device to become ready.

00:42:02.040 --> 00:42:09.240
And that call will come to you for camera
device when the framework has completely

00:42:09.330 --> 00:42:11.420
cataloged the contents of the camera.

00:42:11.520 --> 00:42:14.600
For the scanner,
when it has identified all the

00:42:14.600 --> 00:42:17.400
functional units on the scanner.

00:42:18.330 --> 00:42:21.680
And in addition for a camera device,
if you are taking a

00:42:21.720 --> 00:42:25.060
picture in a tethered mode,
you'll be called with the add

00:42:25.150 --> 00:42:27.420
item any time a picture arrives.

00:42:27.670 --> 00:42:33.700
And if you delete,
you'll be notified about that as well.

00:42:33.700 --> 00:42:36.310
Let's look at the demo.

00:42:43.410 --> 00:42:49.540
This demo is available
download for you to look at.

00:42:49.620 --> 00:42:51.590
There is very little
code written in this.

00:42:51.590 --> 00:42:55.300
Most of what you see is
done using Cocoa bindings.

00:42:55.450 --> 00:43:00.700
And I'm going to show you the little
piece of code that I have here.

00:43:00.990 --> 00:43:05.640
When the application launches,
I'm creating an instance

00:43:05.640 --> 00:43:07.680
of the device browser.

00:43:07.870 --> 00:43:10.410
I started out as a developer,
signing myself as a delegate,

00:43:10.410 --> 00:43:17.270
and started browsing for cameras.

00:43:18.400 --> 00:43:21.140
The browser finds a device.

00:43:21.250 --> 00:43:23.480
It's going to call--

00:43:24.740 --> 00:43:29.690
With this did add device delegate method,
and at that point what I'm

00:43:29.760 --> 00:43:34.820
doing is checking to see if
it's a camera device and then

00:43:34.820 --> 00:43:40.530
assigning to my instance variable,
which is an array.

00:43:40.560 --> 00:43:42.810
I'm adding the device.

00:43:43.120 --> 00:43:46.470
And if the device is removed,
I'm doing the reverse of that.

00:43:46.700 --> 00:43:49.400
That's about all the code I have here.

00:43:49.490 --> 00:43:52.270
And let me just show...

00:43:55.280 --> 00:43:57.630
I just turned on the other camera.

00:43:57.750 --> 00:43:59.540
So I have two devices.

00:43:59.630 --> 00:44:03.380
One is a card reader,
another is a camera.

00:44:03.510 --> 00:44:06.710
And let me select that.

00:44:07.700 --> 00:44:14.810
So I open the session and then
when it finds the contents and

00:44:14.900 --> 00:44:19.230
the camera contents are available,
the bindings automatically populate

00:44:19.330 --> 00:44:21.460
the content in that table view.

00:44:21.530 --> 00:44:26.460
So all the columns in the table view
are bound to properties of the camera

00:44:26.460 --> 00:44:28.470
device and it's automatically populated.

00:44:28.520 --> 00:44:32.810
There is no line of code written in
the application itself to do that.

00:44:33.060 --> 00:44:44.690
And for example, if I now take a picture,
get added.

00:44:55.600 --> 00:45:06.680
and I believe you can
delete them as well.

00:45:06.680 --> 00:45:09.930
So let me just quickly look at-- Let's
quickly look at the binding here.

00:45:19.270 --> 00:45:22.220
So I have a camera array,
which is an instance

00:45:22.270 --> 00:45:26.900
variable of my project here,
the class in the controller class.

00:45:26.910 --> 00:45:31.700
And I am getting the camera's
controller for that array and

00:45:31.700 --> 00:45:35.830
getting the icon property,
which is the property of the device,

00:45:35.840 --> 00:45:36.640
IC device.

00:45:36.740 --> 00:45:41.600
And of course, it is a CG image ref,
so I have a little transformer that

00:45:41.600 --> 00:45:46.450
transforms CG image ref into NS image so
that it can be directly rendered here.

00:45:47.630 --> 00:45:52.770
And then I'm getting the name
directly from the device.

00:45:52.780 --> 00:45:58.400
And then this is another array,
which is a media files array controller.

00:45:58.400 --> 00:46:05.270
And I'm getting the name of the,
the thumbnail of the object, name, name.

00:46:05.500 --> 00:46:08.920
And width, height, and so on.

00:46:09.130 --> 00:46:10.910
So these are all directly bound.

00:46:11.020 --> 00:46:14.040
There's no line of code in the sources.

00:46:14.060 --> 00:46:16.660
And in fact, even--

00:46:17.980 --> 00:46:21.600
These are directly bound.

00:46:21.710 --> 00:46:25.940
So I'm sending, not that one,
this one is directly bound.

00:46:25.940 --> 00:46:29.510
I'm sending a request take picture,
which is part of the method

00:46:29.510 --> 00:46:30.960
in the camera device.

00:46:30.960 --> 00:46:32.640
Okay.

00:46:32.640 --> 00:46:36.580
Let's go back to the slides.

00:46:41.830 --> 00:46:44.600
I'll just quickly go over
the scanner side of it.

00:46:44.600 --> 00:46:50.240
We have a scanner device,
which is a subclass of an IC device.

00:46:51.340 --> 00:47:00.600
The scanners have different functional
units like a flatbed or a document

00:47:00.600 --> 00:47:00.600
feeder or a transparency unit.

00:47:02.490 --> 00:47:07.510
So the scanner device class has
properties that tells you about

00:47:07.510 --> 00:47:10.010
available functional units.

00:47:10.700 --> 00:47:12.700
And the selected functional unit.

00:47:12.820 --> 00:47:18.010
By default, one of the units is selected
by the device module,

00:47:18.020 --> 00:47:19.690
which is actually
communicating the device,

00:47:19.700 --> 00:47:23.690
and that's the one that is going
to be shown here as a selected one.

00:47:23.850 --> 00:47:28.800
And then you can transfer your scans
using either files or in memory that

00:47:28.800 --> 00:47:30.640
you can set in the transfer mode.

00:47:30.640 --> 00:47:33.180
And if you're transferring
to your file system,

00:47:33.180 --> 00:47:36.840
then you would set your downloads
directory using that property.

00:47:36.840 --> 00:47:39.780
Then you can switch between
different functional units using

00:47:39.930 --> 00:47:41.910
the request select functional unit.

00:47:41.940 --> 00:47:46.050
And to do the overview scan,
you can do request overview scan,

00:47:46.270 --> 00:47:49.580
and you can do the scan
using the request scan.

00:47:49.580 --> 00:47:52.800
If you notice,
all the methods have a request prefix.

00:47:52.910 --> 00:47:55.570
It is just to make clear
that none of them are going

00:47:55.570 --> 00:47:57.460
to be acting synchronously.

00:47:57.460 --> 00:48:01.640
Everything requires a delegate
method when it is done.

00:48:01.650 --> 00:48:05.110
You need to have a delegate method
in your class to be notified

00:48:05.660 --> 00:48:07.600
when the request is completed.

00:48:10.080 --> 00:48:11.600
Let's look at the functional units here.

00:48:11.600 --> 00:48:13.160
That's the main part of the scanner.

00:48:13.160 --> 00:48:18.100
The functional unit has several
properties that are common,

00:48:18.100 --> 00:48:22.840
whether it is a flatbed
transparency or a document feeder.

00:48:22.840 --> 00:48:27.410
The first one is a type and supported
bit depths and the current bit depth,

00:48:27.450 --> 00:48:30.710
supported resolutions,
the current resolution,

00:48:30.710 --> 00:48:34.990
the area which will be scanned,
and then an overview image that

00:48:34.990 --> 00:48:38.300
when you do an overview scan,
that image will be updated.

00:48:40.070 --> 00:48:43.100
As the scanner sends the overview data.

00:48:43.170 --> 00:48:46.530
And the flatbed unit has, in addition,
a physical size that

00:48:46.530 --> 00:48:48.300
tells you the platen size.

00:48:48.380 --> 00:48:51.560
And the same is true for
the transparency unit.

00:48:51.620 --> 00:48:54.540
In addition,
transparency unit also tells you what

00:48:54.700 --> 00:48:59.650
film types it supports and also the
current film type that it is set to use.

00:48:59.750 --> 00:49:04.130
And for the document feeder, it can,
document feeder may be able to

00:49:04.130 --> 00:49:06.740
scan different sizes of documents.

00:49:06.810 --> 00:49:10.000
That is reported to you
on the supported site.

00:49:10.000 --> 00:49:13.290
and size tells us the current size.

00:49:14.030 --> 00:49:18.440
And the scanner device delegate protocol,
this is the device delegate, if you,

00:49:18.540 --> 00:49:22.200
your device delegate for the scanner need
to implement these methods in order to

00:49:22.200 --> 00:49:24.300
successfully interact with the scanner.

00:49:24.300 --> 00:49:31.260
And when you select a functional unit,
you would get called back and select

00:49:31.260 --> 00:49:33.090
functional unit when it is done.

00:49:33.660 --> 00:49:37.170
And when you scan to a file,
then you will be reported

00:49:37.430 --> 00:49:41.220
about the location of the file
using the DIT scan to URL,

00:49:41.220 --> 00:49:44.130
or if you scan to memory,
then it will be returned

00:49:44.140 --> 00:49:45.420
in the data as an NSData.

00:49:45.420 --> 00:49:51.910
Let's quickly look at the demo of this.

00:50:01.950 --> 00:50:06.980
When the application launches,
I do exactly what I did in the camera.

00:50:07.000 --> 00:50:10.150
I create a browser,
set a delegate for it,

00:50:10.150 --> 00:50:13.680
and then here I start
browsing for scanners.

00:50:13.720 --> 00:50:17.510
And I'm going to show you
the rest of the thing.

00:50:17.520 --> 00:50:21.280
The code here is almost
the same as in the camera,

00:50:21.320 --> 00:50:27.880
but I'm going to show you
something in the nib file where

00:50:29.940 --> 00:50:36.840
The overview scan is directly bound
to the overview image property.

00:50:36.840 --> 00:50:43.190
I mean, the NSImage view is directly
bound to the overview image

00:50:43.190 --> 00:50:45.870
property of the functional unit.

00:50:45.880 --> 00:50:53.960
And this progress indicator is bound
to the scan progress percent done

00:50:53.960 --> 00:50:55.760
property of the functional unit.

00:50:57.020 --> 00:51:01.270
And you'll see that without
writing a single line of code,

00:51:01.270 --> 00:51:07.870
you can do an overview scan and get the
progress indicator at the same time.

00:51:11.890 --> 00:51:14.560
So here's a scanner.

00:51:14.560 --> 00:51:16.180
I'm going to open a session.

00:51:16.180 --> 00:51:18.480
This scanner only has a flatbed.

00:51:18.520 --> 00:51:24.860
This area is blank,
left as an exercise for you to fill in.

00:51:24.860 --> 00:51:28.630
And now I'm going to do an overview.

00:51:37.350 --> 00:51:38.790
I think the scanner needs to warm up.

00:51:38.900 --> 00:51:42.990
Okay.

00:51:43.190 --> 00:51:49.900
This you get for free
by using Cocoa Binding.

00:51:54.040 --> 00:51:58.510
And when I do a scan,
let me just show you where

00:51:59.370 --> 00:52:03.590
the code that's called when
I click on the scan button.

00:52:05.230 --> 00:52:11.600
When I do a start scan,
I get the scanner from my controller.

00:52:11.690 --> 00:52:15.400
I'm getting the functional
unit of the scanner.

00:52:15.830 --> 00:52:20.970
And then I am checking to see for
what type of scanner it is because

00:52:20.990 --> 00:52:23.790
I want to do something different
depending upon the type of,

00:52:23.920 --> 00:52:26.890
I mean,
what type of functional unit it is.

00:52:27.490 --> 00:52:32.240
If it is not a document feeder,
I want to scan a specific area.

00:52:32.240 --> 00:52:35.680
So I'm setting its
measurement unit to inches.

00:52:35.720 --> 00:52:40.960
And if it is a flatbed,
I want to scan the whole

00:52:41.410 --> 00:52:43.600
Physical size.

00:52:43.690 --> 00:52:50.000
I'm taking the size and then setting the
scan area to be the full platen size.

00:52:50.240 --> 00:52:53.460
And then I'm setting the
resolution to be picking up

00:52:53.610 --> 00:52:56.800
from the supported resolutions,
a resolution that is greater

00:52:56.800 --> 00:52:59.700
than or equal to 100,
100 dpi,

00:52:59.720 --> 00:53:02.300
and setting that as a current resolution.

00:53:02.320 --> 00:53:07.560
And setting the bit depth,
pixel data type as RGB.

00:53:07.560 --> 00:53:08.370
It's file based.

00:53:08.480 --> 00:53:10.660
I want to transfer to my pictures folder.

00:53:10.670 --> 00:53:15.150
And the document name, scan,
as the name of the document.

00:53:15.230 --> 00:53:19.340
I want it as a JPEG data.

00:53:19.890 --> 00:53:23.220
So when I do the scan,
it will scan and save it in my

00:53:23.220 --> 00:53:26.830
pictures folder as scan.jpg.

00:53:49.390 --> 00:53:54.850
It actually automatically renamed it as
Scan 1 because there was a name conflict.

00:53:54.930 --> 00:53:56.190
So that's the scan.

00:53:56.280 --> 00:53:58.320
It just completed.

00:54:04.470 --> 00:54:09.940
I guess that completes the
introduction to the Image Capture Core.

00:54:09.940 --> 00:54:13.290
Werner will take over from
me and show some work.

00:54:17.000 --> 00:54:18.070
Well, thanks a lot for that.

00:54:18.070 --> 00:54:22.240
And I guess everyone who had to use the
old image capture framework will really

00:54:22.240 --> 00:54:24.890
appreciate the new Objective-C based one.

00:54:24.890 --> 00:54:26.330
It's very, very easy to use.

00:54:26.460 --> 00:54:30.970
So now the question is,
what can we do in Image Kit to use

00:54:31.100 --> 00:54:34.240
the image capture core framework?

00:54:35.390 --> 00:54:40.760
Well, what you want to do is
introduce a couple of classes,

00:54:40.760 --> 00:54:45.520
new classes,
that make it even easier for you to

00:54:45.520 --> 00:54:50.590
use scanner support and camera support.

00:54:52.050 --> 00:54:56.230
If we look at the main classes of
the image capture core framework,

00:54:56.230 --> 00:54:58.830
we have the device browser
and the main devices,

00:54:58.830 --> 00:55:00.660
the scanner and camera.

00:55:00.660 --> 00:55:04.130
And what we want to do inside
Image Kit is we want to

00:55:04.210 --> 00:55:05.900
have view classes for those.

00:55:06.040 --> 00:55:09.750
If we look at the first one
for the device browsing,

00:55:09.910 --> 00:55:15.430
We have an IK device browser view that
goes nicely with an IC device browser.

00:55:15.530 --> 00:55:17.660
and it's used for browsing devices.

00:55:17.770 --> 00:55:19.560
Well, it allows for customization.

00:55:19.730 --> 00:55:21.740
For example,
you could specify very easily,

00:55:21.790 --> 00:55:25.000
I want to display, look only for cameras,
only for scanners,

00:55:25.000 --> 00:55:29.190
do it only for local devices
or network shared devices.

00:55:29.290 --> 00:55:31.490
And it comes in a couple of UI flavors.

00:55:31.620 --> 00:55:34.320
For example, you could say I want
to have a table view,

00:55:34.320 --> 00:55:37.310
an icon view, which is of course an
IK image browser view.

00:55:37.320 --> 00:55:42.940
And the nice thing overall is we do
have an interface builder plug-in.

00:55:42.940 --> 00:55:46.890
So all you do is an interface builder,
drag it over and you can directly use it.

00:55:49.090 --> 00:55:52.910
The class itself has a delegate
and the delegate gets called

00:55:52.910 --> 00:55:58.790
whenever a selection changes or
when a device reports an error.

00:55:59.260 --> 00:56:02.490
You can have a couple of
booleans as properties that you

00:56:02.570 --> 00:56:04.380
can specify what to look for.

00:56:04.410 --> 00:56:08.300
If you want to do it in code,
you could do that, or as I said before,

00:56:08.300 --> 00:56:09.950
you could directly do it
in interface building.

00:56:11.580 --> 00:56:15.440
Then the display mode you can
specify and you can always query

00:56:15.540 --> 00:56:18.500
for the current selected device.

00:56:19.350 --> 00:56:24.060
For the camera,
we have the iK Camera Device View that

00:56:24.060 --> 00:56:27.340
works together with an iC Camera Device.

00:56:27.480 --> 00:56:30.520
And again,
we have a couple of UI flavors.

00:56:30.610 --> 00:56:33.710
Now,
we have a list view and we do a couple

00:56:33.860 --> 00:56:39.820
of things that you do not get immediately
free by just using the bindings.

00:56:39.870 --> 00:56:44.220
For example, we do auto rotate the icon.

00:56:44.300 --> 00:56:47.400
So depending on the EXIF information
that you will have on the image,

00:56:47.440 --> 00:56:49.680
you will rotate it correctly.

00:56:49.680 --> 00:56:53.330
And we also try to interpret
a couple of the metadata.

00:56:53.660 --> 00:56:58.280
For example, internally,
a flash property in EXIF would

00:56:58.360 --> 00:57:03.330
be one of the values 1 up to 15,
indicating the flash fired,

00:57:03.360 --> 00:57:06.210
it did not fire,
it did fire in automatic mode,

00:57:06.210 --> 00:57:07.800
it did fire so and so.

00:57:08.010 --> 00:57:13.790
So we put that into like a human
readable string and display that.

00:57:14.190 --> 00:57:18.040
And in the icon view,
we again use an IK Image browser

00:57:18.040 --> 00:57:24.010
view where you can select the images
to download and all these things.

00:57:24.540 --> 00:57:30.710
You can customize it by
specifying a couple of properties.

00:57:30.810 --> 00:57:35.180
For example,
you could have a download folder pop up.

00:57:35.350 --> 00:57:39.060
and the Post Processing App, Popup.

00:57:39.110 --> 00:57:42.630
Another thing that could
be useful to customize is,

00:57:42.670 --> 00:57:46.700
for example, if you're writing an
application like Preview.

00:57:46.760 --> 00:57:50.890
Preview has currently an
import image menu item and it

00:57:50.890 --> 00:57:53.760
brings up the old common UI.

00:57:53.790 --> 00:57:58.000
And there, if you do not want to have the
download on the button label,

00:57:58.030 --> 00:58:01.090
but maybe import or import all.

00:58:02.080 --> 00:58:06.860
And again, the nice thing,
all this can be done by just using

00:58:06.860 --> 00:58:09.160
an interface builder palette.

00:58:10.260 --> 00:58:12.480
If you want to do it in code, yes,
you can do it.

00:58:12.630 --> 00:58:13.950
It's very simple.

00:58:14.040 --> 00:58:17.950
You need, again,
a delegate and the camera device.

00:58:18.030 --> 00:58:25.680
The camera device could also be set
directly from the device browser view.

00:58:26.510 --> 00:58:30.490
We have the different display modes,
the label for downloading,

00:58:30.590 --> 00:58:34.570
and a couple of downloads related,
like whether to display

00:58:34.570 --> 00:58:37.590
or hide different pop-ups.

00:58:38.850 --> 00:58:41.690
And a couple of can-dos
that would allow you to,

00:58:41.790 --> 00:58:46.060
for example,
have a toolbar that would rotate left,

00:58:46.060 --> 00:58:47.400
rotate right.

00:58:47.780 --> 00:58:54.800
And because these are some of the actions
that we do have for the device view.

00:58:55.000 --> 00:58:58.670
We can delete the selected items,
you can download all or

00:58:58.670 --> 00:59:00.780
just the selected ones.

00:59:01.750 --> 00:59:09.370
Then you get notified by just querying
or binding to the selected indexes.

00:59:09.920 --> 00:59:12.920
And you have a couple
of delegate methods.

00:59:13.000 --> 00:59:16.580
For example,
when you did download an image,

00:59:16.980 --> 00:59:22.940
From the camera, then you get notified,
oh, this one is downloaded to this URL.

00:59:22.940 --> 00:59:26.130
Or if you specify as transfer mode,
do it in memory,

00:59:26.130 --> 00:59:28.610
then you will get past the NSData.

00:59:29.010 --> 00:59:34.140
Usually, getting the images in memory is
not always a good idea because the

00:59:34.140 --> 00:59:37.380
images are getting larger and larger,
SD cards larger.

00:59:37.380 --> 00:59:43.660
So if the user on an 18 gigabyte or
64 gigabyte flash card or an iPod,

00:59:43.820 --> 00:59:46.690
you would download all the images.

00:59:46.690 --> 00:59:49.950
You don't want to do that in memory.

00:59:50.700 --> 00:59:52.680
Let me do a quick demo.

00:59:52.720 --> 00:59:56.560
And actually, this demo is a demo
without writing any code.

00:59:56.620 --> 00:59:58.660
Because all we want to do--

01:00:00.220 --> 01:00:05.760
is just fire up Interface Builder,
create an empty window,

01:00:06.390 --> 01:00:10.400
And if we display the library,
then you will notice we

01:00:10.400 --> 01:00:12.940
have a device browser view.

01:00:13.060 --> 01:00:15.320
I can just drag over.

01:00:18.020 --> 01:00:24.650
I use a camera view,
just right next to it.

01:00:26.700 --> 01:00:30.280
Then all I have to do is make the
delegate of the device browser view,

01:00:30.290 --> 01:00:32.640
make that the camera view.

01:00:32.640 --> 01:00:34.600
Then hit run.

01:00:34.700 --> 01:00:37.220
Then I should be able to just--

01:00:38.410 --> 01:00:45.920
Select this and without writing any code,
you get full functionality.

01:00:46.000 --> 01:00:48.440
So you can switch between the two.

01:00:49.210 --> 01:00:54.210
You see, for example,
we have the shutter speed in

01:00:54.210 --> 01:01:00.100
a kind of human readable form,
not in whatever, 0.025 or whatever.

01:01:00.100 --> 01:01:03.630
We get the maker model ISO,
as I mentioned before,

01:01:03.640 --> 01:01:06.330
the flash information and all that.

01:01:09.780 --> 01:01:13.000
To that,
it does a lot of things through bindings,

01:01:13.000 --> 01:01:16.370
like the number of selected items,
all that is done internally

01:01:16.880 --> 01:01:18.700
through bindings and automatically.

01:01:18.710 --> 01:01:21.260
And I could download all or
download the selected ones.

01:01:23.170 --> 01:01:26.320
So this is without
writing any line of code.

01:01:26.320 --> 01:01:29.110
We can go back to the slides.

01:01:31.110 --> 01:01:32.200
Now, what do we have for scanners?

01:01:32.200 --> 01:01:42.190
Well, obviously an IK scanner device view
that works with an IC scanner device.

01:01:42.850 --> 01:01:46.300
Here again,
we do have a couple of UI flavors.

01:01:46.510 --> 01:01:48.090
Well, we do have a simple mode.

01:01:48.270 --> 01:01:51.790
This is pretty new because in the past,
image capture as application did

01:01:51.800 --> 01:01:55.690
not have a simple way to do a scan.

01:01:56.360 --> 01:01:59.040
Because there you always have
an advanced mode where you

01:01:59.220 --> 01:02:02.570
have to have a lot of pop-ups,
a lot of edit fields,

01:02:02.750 --> 01:02:05.230
you have to specify a lot
and the download for the

01:02:05.240 --> 01:02:08.900
post-processing application,
the resolution and all that.

01:02:10.190 --> 01:02:14.060
And here again we want
to do some customization,

01:02:14.130 --> 01:02:18.910
so give you the option, for example,
to show or hide the download destination

01:02:19.020 --> 01:02:20.780
or the post-processing application.

01:02:20.830 --> 01:02:23.770
So they may go away or show up.

01:02:23.860 --> 01:02:26.730
Overall,
that view is really highly dynamic,

01:02:26.900 --> 01:02:29.670
so depending on the
scanner that you connect,

01:02:29.670 --> 01:02:32.240
you may get a slightly different UI.

01:02:32.620 --> 01:02:35.220
For example,
if a scanner supports multiple

01:02:35.220 --> 01:02:42.750
resolution in a range,
let's say from 50 dpi through 4800 dpi,

01:02:42.750 --> 01:02:46.360
then we would very likely
display that in a combo box.

01:02:46.360 --> 01:02:50.520
There are scanners out there that
have only a fixed resolution or

01:02:50.650 --> 01:02:52.830
only a fixed set of resolutions.

01:02:52.840 --> 01:02:59.210
That could be a very small number,
like 50, 70, 100, 150, and 300,

01:02:59.210 --> 01:03:01.110
so a couple of values only.

01:03:01.120 --> 01:03:02.400
In that case, you would have a pop-up.

01:03:04.140 --> 01:03:11.030
There are scanners that
do not support scaling,

01:03:11.030 --> 01:03:11.030
so then the scaling
and the new size thing,

01:03:11.030 --> 01:03:11.030
they would just not show up.

01:03:12.820 --> 01:03:16.130
And for customization,
the next thing would be

01:03:16.190 --> 01:03:20.440
really we could have,
again, relabeling the scan,

01:03:20.440 --> 01:03:23.320
the overview and scan things.

01:03:24.190 --> 01:03:29.670
And here again we have an interface
builder plugin to do that.

01:03:29.770 --> 01:03:34.640
If you want to do it in code,
what you need for the device view is

01:03:34.910 --> 01:03:38.550
again a delegate and scanner device.

01:03:38.730 --> 01:03:43.040
You specify the display mode, the label.

01:03:43.670 --> 01:03:47.350
You have to implement
a couple of callbacks,

01:03:47.440 --> 01:03:49.290
delegate methods.

01:03:50.650 --> 01:03:54.270
And you have a couple of properties
where you can query or set

01:03:54.770 --> 01:03:56.720
basically some default behavior.

01:03:56.780 --> 01:03:59.330
For example,
you could specify always download

01:03:59.400 --> 01:04:05.700
to the My Picture directory
in my user home folder.

01:04:07.180 --> 01:04:08.780
And that's about it.

01:04:08.780 --> 01:04:13.820
So let's go back to the demo machine.

01:04:13.820 --> 01:04:15.350
And--

01:04:16.810 --> 01:04:25.450
I'm actually going to quit Interface
Builder and go to our application,

01:04:25.570 --> 01:04:27.000
our iPhoto application.

01:04:27.000 --> 01:04:30.570
And I want to show you,
let's quickly run it and

01:04:30.570 --> 01:04:31.990
then I'll show you what...

01:04:32.650 --> 01:04:34.040
I have to do in code.

01:04:34.080 --> 01:04:39.670
Well, first of all,
all we did was adding an extra

01:04:39.930 --> 01:04:44.880
item in the toolbar that would
bring up an image capture UI.

01:04:45.220 --> 01:04:51.110
This image capture UI has on
its side a device browser view.

01:04:51.490 --> 01:04:56.770
On the right side,
it does not have a single view because

01:04:57.680 --> 01:05:01.420
if we would have just the camera view,
then it wouldn't do any

01:05:01.590 --> 01:05:03.640
good if I select a scanner.

01:05:03.730 --> 01:05:09.590
And if I had a scanner view,
it wouldn't do any good for a camera.

01:05:10.090 --> 01:05:14.360
So we do have a view that switches
between-- so it's a tap view,

01:05:14.360 --> 01:05:18.470
basically, switching between camera
and scanner views.

01:05:19.100 --> 01:05:24.640
And here you see like the old behavior,
very similar to image

01:05:24.710 --> 01:05:26.160
capture application.

01:05:26.160 --> 01:05:28.960
So you could very easily
do an overview scan,

01:05:28.960 --> 01:05:31.500
then select an area and do a scan.

01:05:31.500 --> 01:05:33.300
I think that's not that interesting.

01:05:33.380 --> 01:05:36.280
More interesting is
this one because it's,

01:05:36.530 --> 01:05:38.010
again, the simple case.

01:05:38.300 --> 01:05:42.410
And if I do a scan,
then what happens is we

01:05:42.560 --> 01:05:44.910
should do an overview scan.

01:05:45.520 --> 01:05:47.400
So very nicely you get that.

01:05:47.540 --> 01:05:53.710
And it detects the
areas and moves it over.

01:05:57.040 --> 01:05:58.710
And scans the image.

01:05:58.910 --> 01:06:04.060
So it scans the image and
actually does the right rotation.

01:06:04.260 --> 01:06:09.990
So the result of this should
be in our picture folder.

01:06:13.160 --> 01:06:15.380
So it's adding up.

01:06:15.380 --> 01:06:19.100
And you see I'm scanning
as TIFF in this case.

01:06:19.130 --> 01:06:27.280
So it's now doing the last scan.

01:06:33.800 --> 01:06:41.560
and so this one is straightened and
they're all straightened so that's

01:06:41.640 --> 01:06:44.240
the area detection and all that.

01:06:44.240 --> 01:06:47.680
So just to show you.

01:06:48.050 --> 01:06:52.290
Very quickly,
how it behaves if the objects that

01:06:52.330 --> 01:06:56.410
you throw up are not rectangular and

01:06:56.700 --> 01:06:57.700
May look a little bit different.

01:06:57.700 --> 01:07:02.100
Let me quickly show you
how we would handle that.

01:07:09.940 --> 01:07:13.000
So in that case, again,
we try to do the best,

01:07:13.010 --> 01:07:18.660
detect the overlapping areas and move the
images over and then do individual scans.

01:07:18.660 --> 01:07:25.300
And then you are free to handle
and post-process these images.

01:07:25.300 --> 01:07:28.200
OK, can we go back to the slides, please?

01:07:32.430 --> 01:07:34.010
And we are done with the session.

01:07:34.130 --> 01:07:38.270
So all I can say is we have a
lab tomorrow morning at 10:30.

01:07:38.400 --> 01:07:40.460
If you have any questions
related to Image Kit,

01:07:40.590 --> 01:07:45.400
Image Capture,
please come and bug us and ask us.

01:07:45.580 --> 01:07:50.400
And if you have no chance to
attend the lab and have questions,

01:07:50.400 --> 01:07:53.400
please send an email to Alan.