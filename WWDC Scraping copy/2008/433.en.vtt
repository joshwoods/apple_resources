WEBVTT

00:00:20.330 --> 00:00:20.690
Good morning.

00:00:20.700 --> 00:00:22.260
What's everybody doing?

00:00:22.260 --> 00:00:25.330
You all have coffee
recovering from last night?

00:00:25.400 --> 00:00:26.730
I'm still recovering from last night.

00:00:26.920 --> 00:00:29.700
So this is Section 433.

00:00:29.700 --> 00:00:33.170
We're going to talk about building
native look and feel web applications.

00:00:33.360 --> 00:00:37.070
And really, we're not going to talk very
much today about building native

00:00:37.070 --> 00:00:39.720
looking applications because,
right, that's pretty easy.

00:00:39.720 --> 00:00:44.900
If you've ever used any kind of CSS,
you know much about CSS,

00:00:44.900 --> 00:00:47.970
you can make your apps
on the web look native.

00:00:48.120 --> 00:00:51.310
The hard thing is to create
applications that feel like

00:00:51.420 --> 00:00:53.160
they're native applications,
even though they're

00:00:53.160 --> 00:00:54.610
running in the web browser.

00:00:54.710 --> 00:00:56.540
So that's what we're going
to really talk about today.

00:00:56.540 --> 00:00:57.960
My name is Charles Jolly.

00:00:58.170 --> 00:01:01.160
I'm a software architect
with the new MobileMe.

00:01:01.160 --> 00:01:04.050
For the last couple years,
I've been working on,

00:01:04.210 --> 00:01:07.040
along with a big group
of people at MobileMe,

00:01:07.040 --> 00:01:10.770
creating the web applications that
you saw demoed in the keynote.

00:01:10.850 --> 00:01:14.480
So we're going to talk a little
bit about how we actually did that.

00:01:14.580 --> 00:01:17.720
And when we talk about creating
native look and feel applications

00:01:17.720 --> 00:01:19.300
on the web-- what do we really mean?

00:01:19.300 --> 00:01:23.160
Well, what we're talking about doing is
taking an application like this

00:01:23.160 --> 00:01:27.700
that looks fundamentally like a
web page and seeing how we can make

00:01:27.790 --> 00:01:32.140
this look and feel more like this,
right, iPhoto.

00:01:32.210 --> 00:01:35.580
What would it take if we wanted to
create something like iPhoto on the web?

00:01:35.580 --> 00:01:37.030
Is it even possible?

00:01:37.130 --> 00:01:37.810
Well, it is.

00:01:37.920 --> 00:01:40.800
And we're going to discuss how we
do that in four sections today.

00:01:40.800 --> 00:01:43.160
We're going to talk about the
architecture a little bit.

00:01:43.260 --> 00:01:46.070
And if you don't get anything
else out of this talk today,

00:01:46.120 --> 00:01:50.380
the architecture section is really what--
I hope you'll walk away with the most.

00:01:50.380 --> 00:01:54.820
Because understanding how to structure
these applications is really fundamental

00:01:54.880 --> 00:01:59.940
to making it possible to create
something this great in the web browser.

00:02:00.060 --> 00:02:03.330
Once you get your head around that,
we'll talk about a framework we've

00:02:03.330 --> 00:02:07.180
been using for the last couple years to
create these applications on the web.

00:02:07.380 --> 00:02:09.720
And then we'll actually build
one of these applications.

00:02:09.860 --> 00:02:13.220
And then we'll talk a little bit about
how you can go about deploying these.

00:02:13.250 --> 00:02:16.180
Because the actual deployment
methods that you use to put

00:02:16.180 --> 00:02:17.940
this onto the server varies.

00:02:17.940 --> 00:02:22.630
significantly once you start
dealing with this architecture.

00:02:23.080 --> 00:02:24.260
So let's get started.

00:02:24.290 --> 00:02:26.240
So, architecture.

00:02:26.360 --> 00:02:29.330
What do we really mean when
we're talking about building a

00:02:29.330 --> 00:02:31.760
native look-and-feel application?

00:02:31.760 --> 00:02:34.870
How does that differ from a
desktop or from a typical web

00:02:35.000 --> 00:02:37.400
application that you might see today?

00:02:37.560 --> 00:02:39.760
Well,
I think it really comes in three pieces,

00:02:39.760 --> 00:02:40.230
right?

00:02:40.600 --> 00:02:43.390
First is we expect an immediate response.

00:02:43.480 --> 00:02:45.810
When you click on something,
it should highlight.

00:02:45.820 --> 00:02:48.240
When you edit some text,
it should be changed.

00:02:48.240 --> 00:02:50.750
When you drag something to a folder,
it should be moved.

00:02:50.800 --> 00:02:54.040
You shouldn't have to wait on
server round trips very often.

00:02:54.040 --> 00:02:57.240
As much as possible,
you want the user to immediately see

00:02:57.240 --> 00:02:59.190
the change that they've just made.

00:02:59.200 --> 00:03:04.600
The second thing is we want,
and really connected with that first bit,

00:03:04.600 --> 00:03:07.410
is a rich interaction experience.

00:03:07.410 --> 00:03:07.410
You know, when the Mac first came out,

00:03:07.600 --> 00:12:41.600
[Transcript missing]

00:12:42.260 --> 00:12:43.580
So, how does this compare?

00:12:43.850 --> 00:12:46.150
Well, obviously everything's
happening in the browser.

00:12:46.280 --> 00:12:48.390
You can almost always give
an immediate response.

00:12:48.450 --> 00:12:50.970
You rarely have to wait
on a server round trip.

00:12:51.170 --> 00:12:54.940
You can implement really rich, dynamic,
interactive experiences.

00:12:54.940 --> 00:12:58.880
You can give the user back the direct
manipulation that we lost with the web.

00:12:58.880 --> 00:13:01.250
And, of course,
you can implement client-side

00:13:01.390 --> 00:13:03.860
storage extremely easily,
and you can have this

00:13:03.860 --> 00:13:06.600
complete offline mode capable,
depending on how you

00:13:06.600 --> 00:13:08.230
built your applications.

00:13:09.240 --> 00:13:12.910
So that's the web client
server architecture.

00:13:13.500 --> 00:18:25.200
[Transcript missing]

00:18:30.310 --> 00:18:35.270
So, before we get to SproutCore,
let's just compare this with

00:18:35.270 --> 00:18:37.270
the current state of the art.

00:18:37.360 --> 00:18:40.450
Now, Flickr is an extremely
advanced AJAX application,

00:18:40.800 --> 00:18:41.900
3270 style.

00:18:41.900 --> 00:18:45.640
So, I'm on my page here
with a couple of sets.

00:18:45.640 --> 00:18:48.260
Let's say I want to come in
here and change this name.

00:18:48.260 --> 00:18:49.580
Well, how do I do that?

00:18:49.700 --> 00:18:53.330
Well, I can click on Edit,
and I have to go into another page,

00:18:53.330 --> 00:18:57.400
and then this happened in 2006,
so I want to add that.

00:18:58.100 --> 00:19:00.050
Well, that didn't actually change it.

00:19:00.150 --> 00:19:02.830
If I come back here, oh, well,
I guess I actually have to

00:19:02.830 --> 00:19:04.250
tell the server to do it.

00:19:04.430 --> 00:19:05.420
So, I wait.

00:19:05.420 --> 00:19:07.040
Okay, I changed.

00:19:07.040 --> 00:19:09.200
So, not bad, but still,
everything interesting is

00:19:09.200 --> 00:19:10.970
happening in the web browser,
right?

00:19:10.980 --> 00:19:14.460
So, what happens if I want to, say,
create a new set and maybe move

00:19:14.460 --> 00:19:17.780
a few of these photos from a
party we went to to another page?

00:19:17.780 --> 00:19:23.180
Well, first thing I have to
do is come back here,

00:19:23.180 --> 00:19:27.000
and actually, let's see here.

00:19:38.570 --> 00:19:38.570
Come here to Sets.

00:19:38.570 --> 00:19:38.570
I click Create a New Set.

00:19:38.940 --> 00:19:41.560
Go to My New Set.

00:19:41.680 --> 00:19:43.690
Now they do have some drag and drop,
which is great.

00:19:43.820 --> 00:19:48.110
That's something that
Flickr is known for,

00:19:48.110 --> 00:19:50.160
their advanced API.

00:19:50.170 --> 00:19:53.250
Of course, I can't directly manipulate
the data in my other set,

00:19:53.370 --> 00:19:56.180
because these are basically
happening in the web server,

00:19:56.180 --> 00:19:59.570
so what I have to do is,
down here they show me all of my photos,

00:19:59.570 --> 00:20:01.870
and I have about 200 of them on here.

00:20:01.980 --> 00:20:04.080
So I'm going to have to slide
through here until I can

00:20:04.110 --> 00:20:05.800
find the photos that I want.

00:20:05.840 --> 00:20:07.960
They do have multiple select,
which is nice.

00:20:08.110 --> 00:20:10.440
And that goes ahead
and adds some of them.

00:20:10.470 --> 00:20:13.010
Just drag that last one up there.

00:20:13.070 --> 00:20:14.610
OK.

00:20:15.500 --> 00:20:17.340
call this the big party.

00:20:17.340 --> 00:20:19.450
Of course this hasn't
actually changed anything.

00:20:19.450 --> 00:20:23.460
If I come back here to sets,
again it will make me cancel that.

00:20:23.480 --> 00:20:26.180
So I'm going to go ahead and save that.

00:20:26.390 --> 00:20:27.800
Now wait on the server.

00:20:27.800 --> 00:20:29.080
And there we go again.

00:20:29.250 --> 00:20:31.810
So not bad,
it's a fairly fluid experience.

00:20:31.910 --> 00:20:34.610
But we're still looking at this,
you know, fundamentally everything is

00:20:34.610 --> 00:20:37.940
happening in the Web server and
most of the time I'm just looking

00:20:37.940 --> 00:20:39.980
at a representation of my data.

00:20:39.980 --> 00:20:42.030
So what could we do if we
built this with SproutCore?

00:20:42.030 --> 00:20:45.280
Well, I'm going to show you this is
just a little demo we built.

00:20:45.280 --> 00:20:48.730
This is available on
the SproutCore website.

00:20:48.740 --> 00:20:51.520
And this is Photos.

00:20:51.520 --> 00:20:54.500
So Photos has, you know,
a bunch of albums here.

00:20:54.500 --> 00:20:56.280
These are just loading from the server.

00:20:56.340 --> 00:20:57.350
Here's a few big ones.

00:20:57.440 --> 00:21:00.520
You can see this one
has actually 150 photos.

00:21:00.520 --> 00:21:02.960
And SproutCore has incremental
rendering built in,

00:21:02.960 --> 00:21:06.940
which is the same thing Cocoa uses so
you can draw a large amount of sets.

00:21:06.940 --> 00:21:08.710
We actually have done tests with this.

00:21:08.710 --> 00:21:12.700
I've had 5,000 photos loading here
and it loads in about five seconds.

00:21:12.700 --> 00:21:20.540
So that's actually faster than
iPhoto was a couple years ago.

00:21:20.540 --> 00:21:24.260
So let's say we wanted to -- well,
we were going to do a couple things.

00:21:24.260 --> 00:21:28.350
Let's say I wanted to rename
this to -- looks like I've

00:21:28.350 --> 00:21:29.730
got a selection bug there.

00:21:29.900 --> 00:21:31.420
Ignore the man behind the curtain.

00:21:31.650 --> 00:21:37.800
So we'll just see what does it take
to actually change this to Canes 2006.

00:21:37.800 --> 00:21:40.460
Well, I just click on it,
type 2006 and hit return.

00:21:40.460 --> 00:21:40.700
Done.

00:21:40.700 --> 00:21:41.700
So we're going to go ahead
and do a little bit of a test.

00:21:41.700 --> 00:21:42.010
So we're going to go ahead
and do a little bit of a test.

00:21:42.010 --> 00:21:42.700
So we're going to go ahead
and do a little bit of a test.

00:21:42.700 --> 00:21:45.320
Maybe I want to select a couple,
well actually let's go

00:21:45.340 --> 00:21:47.270
ahead and add a new set.

00:21:47.350 --> 00:21:50.250
Just come down here,
I'll create a new set,

00:21:50.250 --> 00:21:52.260
call it the big party.

00:21:52.910 --> 00:21:55.580
We need to add a couple things to this.

00:21:55.610 --> 00:22:00.000
So I can select these,
I can command select them,

00:22:00.010 --> 00:22:03.120
I can shift select, I can, whoop,
hold the wrong key,

00:22:03.120 --> 00:22:05.590
I can shift select them if I want to.

00:22:05.710 --> 00:22:09.280
Of course,
I can also use keyboard control.

00:22:10.070 --> 00:22:13.740
So it's all very natural,
and if I want to add it, I just go,

00:22:13.840 --> 00:22:15.240
that's it.

00:22:15.280 --> 00:22:16.300
I just added them.

00:22:16.300 --> 00:22:17.540
Didn't have to wait on anything.

00:22:22.560 --> 00:22:25.230
So, of course,
that makes using this app is way faster.

00:22:25.230 --> 00:22:27.340
I mean,
you're never waiting on the server.

00:22:27.340 --> 00:22:29.490
You wouldn't even know that this
was happening in the server.

00:22:29.500 --> 00:22:31.950
In fact, a lot of what's going on
in the background here,

00:22:31.950 --> 00:22:34.980
this can be communicating with
the server to update your photos.

00:22:34.980 --> 00:22:38.400
It's also actually writing these
changes to local storage if you're

00:22:38.400 --> 00:22:40.970
in the right version of Safari,
just as you go.

00:22:41.080 --> 00:22:42.570
So you never have to wait on any of it.

00:22:42.770 --> 00:22:44.860
And, of course,
we can do a lot more with this, right?

00:22:44.990 --> 00:22:45.930
We can have a slider.

00:22:46.070 --> 00:22:47.120
Isn't that nice?

00:22:47.120 --> 00:22:48.700
It's really interactive.

00:22:48.700 --> 00:22:52.620
Works pretty well if you have
a large number of photos even,

00:22:52.620 --> 00:22:57.180
even though... And, by the way,
I've spent like a day on this guy.

00:22:57.180 --> 00:23:01.840
So if you really want to be impressed,
buy MobileMe in a few weeks.

00:23:01.840 --> 00:23:05.120
So, and, you know,
the other thing I mentioned

00:23:05.120 --> 00:23:09.330
was Safari has some really cool
effects that they're doing.

00:23:09.340 --> 00:23:14.910
And so why don't we come over here and
let's just see if we go ahead and add it.

00:23:14.940 --> 00:23:17.470
And, um,

00:23:17.930 --> 00:23:24.620
If we go ahead and I'm just going
to show all these photos and

00:23:24.620 --> 00:23:27.050
we're going to do select all.

00:23:29.160 --> 00:23:31.100
Okay, so what can we do with this?

00:23:31.100 --> 00:23:34.220
Well, here's a little editor I've done.

00:23:34.220 --> 00:23:35.260
Just a few things.

00:23:35.370 --> 00:23:38.620
One thing you'll notice is the titles
are automatically selected and joined

00:23:38.620 --> 00:23:40.100
here because we're using bindings.

00:23:40.100 --> 00:23:42.250
It just noticed that
we have multiple ones.

00:23:42.380 --> 00:23:47.960
So if I just instead select one here,
I can actually edit it and

00:23:48.060 --> 00:23:50.710
say this guy was in Prague.

00:23:50.710 --> 00:23:53.090
That's all I have to do.

00:23:53.140 --> 00:23:55.440
It's done now.

00:23:55.550 --> 00:23:57.480
But let's do some more
interesting things.

00:23:57.940 --> 00:24:01.500
So the new Safari--

00:24:01.600 --> 00:24:14.600
[Transcript missing]

00:24:14.850 --> 00:24:17.600
So, just pretend that didn't happen.

00:24:17.620 --> 00:24:21.900
So what happens if, let's say we want to,

00:24:22.770 --> 00:24:25.520
Let's say we wanted to
reorder these guys over here.

00:24:25.520 --> 00:24:28.630
Now, there was actually no really
obvious way to do that in Flickr.

00:24:28.630 --> 00:24:30.700
Here, it's really easy.

00:24:30.700 --> 00:24:32.140
You just grab it and drag it around.

00:24:32.140 --> 00:24:33.400
That's all you have to do.

00:24:33.400 --> 00:24:36.600
I can actually do the same
thing with my photo library.

00:24:36.600 --> 00:24:41.350
I can just select a couple of these guys,
and let's say I want to move them down.

00:24:41.350 --> 00:24:43.160
You can see the little highlighter.

00:24:43.160 --> 00:24:47.330
And we've actually implemented
scrolling as you hit these edges,

00:24:47.330 --> 00:24:51.630
which, believe it or not,
is extremely complicated in the web.

00:24:52.440 --> 00:24:55.150
And we just let go, and it drops them.

00:24:55.220 --> 00:24:58.560
I'll show you, move these up so it's a
little easier to tell.

00:25:04.320 --> 00:25:10.100
Okay, so it's even awesomer in WebKit,
so let me show you WebKit really quick.

00:25:13.150 --> 00:25:15.040
Notice how fast this is loading.

00:25:15.280 --> 00:25:16.910
Just keep that in mind.

00:25:16.960 --> 00:25:19.400
Stuff that in your back
pocket for a little later.

00:25:19.420 --> 00:25:20.540
Okay, so let's go ahead.

00:25:20.770 --> 00:25:24.680
I'm gonna create the big party.

00:25:49.930 --> 00:25:49.930
Since we're running in
a different browser now.

00:25:49.930 --> 00:25:49.930
And I'm just going to grab a couple of
these photos so you can kind of see this.

00:25:49.930 --> 00:25:49.930
Okay, so as I was saying before,
I'm going to get these a little

00:25:49.930 --> 00:25:49.930
bigger so you can see this.

00:25:49.930 --> 00:25:49.930
So one of the cool things we have in
WebKit is this thing called CSS rotation,

00:25:49.930 --> 00:25:49.930
which lets you rotate photos.

00:25:49.930 --> 00:25:49.930
So what happens if we can
actually rotate photos in the web,

00:25:49.930 --> 00:25:49.930
right?

00:25:49.930 --> 00:25:49.930
It's pretty amazing.

00:26:18.790 --> 00:26:18.790
But that's not the cool part.

00:26:18.790 --> 00:26:18.790
The cool part is that this
is data living in the client,

00:26:18.790 --> 00:26:18.790
okay?

00:26:18.790 --> 00:26:18.790
So what I did here was I have a slider
that is bound to the rotation property on

00:26:18.790 --> 00:26:18.790
a controller that's managing all three,
all of these photos.

00:26:18.790 --> 00:26:18.790
And these photos actually
live in some other albums.

00:26:18.790 --> 00:26:18.790
Remember, I just pulled them over
from the other albums.

00:26:18.790 --> 00:26:18.790
So you see they're
already rotated there too.

00:26:18.940 --> 00:26:21.900
So,
everything's pretty much handled for you.

00:26:22.030 --> 00:26:23.270
So, that's the demo.

00:26:23.390 --> 00:26:25.470
Now,
something I want to point out about this,

00:26:25.470 --> 00:26:27.790
you saw how fast this was
loading and everything.

00:26:28.200 --> 00:26:32.270
So, you know,
we got a little bit of press

00:26:32.280 --> 00:26:34.100
with SproutCore on Monday.

00:26:34.100 --> 00:26:41.700
It was mentioned on some websites
after the MobileMe thing.

00:26:41.700 --> 00:26:42.220
And so, this is running on the
public SproutCore site.

00:26:43.920 --> 00:26:51.160
And this site currently is hitting about,
it's getting 5,000 to 6,000 hits a day,

00:26:51.160 --> 00:26:53.740
which is pretty high compared to
what it's normally been getting,

00:26:53.740 --> 00:26:58.140
considering that it's running on
a 995 shared plan from DreamHost.

00:26:58.140 --> 00:27:04.740
And so that performance is happening
on a shared plan on DreamHost,

00:27:04.740 --> 00:27:07.250
which is huge, right?

00:27:07.340 --> 00:27:08.340
Imagine what you can get.

00:27:08.380 --> 00:27:09.380
I'll give you an example.

00:27:09.380 --> 00:27:11.540
I launched a web company
a couple years ago.

00:27:11.540 --> 00:27:13.200
We got on TechCrunch.

00:27:13.320 --> 00:27:14.400
That's how we got mentioned here.

00:27:14.400 --> 00:27:16.560
We got on TechCrunch
with my previous company,

00:27:16.560 --> 00:27:21.070
and we had a server, you know,
very best server we could get.

00:27:21.200 --> 00:27:22.320
It was hot off the presses.

00:27:22.320 --> 00:27:24.890
It was running custom
software up and down,

00:27:24.890 --> 00:27:28.110
and that mention on TechCrunch
nearly brought us to our knees,

00:27:28.110 --> 00:27:28.670
right?

00:27:28.680 --> 00:27:31.720
This guy is running on a shared plan,
and it's running smoothly

00:27:31.720 --> 00:27:34.460
because everything's
happening in the web browser,

00:27:34.460 --> 00:27:38.080
and it's so efficient at being
able to spread out the load

00:27:38.080 --> 00:27:40.140
across all of your clients.

00:27:40.140 --> 00:27:42.660
So you get not only some
really great features,

00:27:42.830 --> 00:27:46.300
but even a little more difficult
to appreciate incredible amounts of

00:27:46.360 --> 00:27:49.580
distribution of your application load,
which just, you know,

00:27:49.580 --> 00:27:53.210
it does wonders for easing those
sleepless nights when you just put

00:27:53.250 --> 00:27:54.620
your product out on the market.

00:27:54.620 --> 00:27:56.720
So there you go.

00:27:56.720 --> 00:27:58.330
So that's our demo for now.

00:28:05.100 --> 00:31:58.400
[Transcript missing]

00:31:58.790 --> 00:32:00.600
So let's look inside
the actual application.

00:32:00.600 --> 00:32:02.880
Now,
there's a couple things you want to see.

00:32:02.880 --> 00:32:05.220
If you're, you know,
model view controller world,

00:32:05.260 --> 00:32:07.280
you'll see three very familiar folders.

00:32:07.280 --> 00:32:09.940
You put your controllers and
models and views in those folders.

00:32:09.940 --> 00:32:11.690
You can actually put
them anywhere you want,

00:32:11.690 --> 00:32:13.100
and the system will take care of it.

00:32:13.100 --> 00:32:14.300
This just makes it easier.

00:32:14.300 --> 00:32:17.870
You have a file called core.js
where you define your namespace.

00:32:17.870 --> 00:32:21.450
SproutCore helps you namespace
everything so you can have multiple

00:32:21.450 --> 00:32:24.250
modules loaded at one time,
and it will all work.

00:32:24.340 --> 00:32:27.800
You also have a main function
where your main function goes.

00:32:28.700 --> 00:32:31.010
And there are a few other things.

00:32:31.020 --> 00:32:32.940
This is the English lproj.

00:32:32.940 --> 00:32:37.360
If you've done Cocoa development,
you recognize that lproj.

00:32:37.360 --> 00:32:40.660
SproutCore has built-in
support for localization.

00:32:40.660 --> 00:32:44.890
So you can put your HTML,
any images you want, any CSS.

00:32:44.910 --> 00:32:48.880
If you have localized JavaScript,
in this example, we have a strings.js.

00:32:48.880 --> 00:32:51.720
You drop them into this English lproj.

00:32:52.340 --> 00:32:55.370
If you want to do a French localization,
you create a directory

00:32:55.370 --> 00:32:57.980
called French lproj,
and you just add whatever

00:32:57.980 --> 00:32:58.670
resources you want.

00:32:58.700 --> 00:33:02.620
You can also create a
string.js for example.

00:33:02.620 --> 00:33:05.290
You can localize your strings.

00:33:05.290 --> 00:33:08.150
You can localize in any language.

00:33:08.150 --> 00:33:12.110
SproutCore has built-in
support for these four,

00:33:12.240 --> 00:33:17.400
but if you wanted to do anything else,
you just use the two-letter

00:33:17.460 --> 00:33:19.870
language code lproj.

00:33:19.870 --> 00:33:22.740
SproutCore will automatically
build and deploy it for you.

00:33:22.850 --> 00:33:26.430
So MobileMe is localized because
we're Apple and we have to do that.

00:33:28.700 --> 00:33:30.700
So we're using this system automatically.

00:33:30.700 --> 00:33:33.310
So it's a really,
really nice way to handle localization,

00:33:33.310 --> 00:33:35.240
which is generally pretty difficult.

00:33:35.240 --> 00:33:37.580
We also have a couple
extra little features.

00:33:37.580 --> 00:33:39.060
One of them is fixture data.

00:33:39.120 --> 00:33:41.400
SproutCore actually supports fixtures.

00:33:41.400 --> 00:33:45.880
You can load fake model data in here,
like photos, for example.

00:33:45.880 --> 00:33:51.160
When I first wrote this app and I didn't
want to pull it from the server just yet,

00:33:51.180 --> 00:33:55.820
I just write up my fake photo
JSON feed and I drop it into fixtures.

00:33:55.820 --> 00:33:58.620
And when I'm in development mode,
it's automatically loaded and installed.

00:33:58.770 --> 00:34:02.840
So you can work in fixtures
without having any server mode.

00:34:02.910 --> 00:34:05.300
You also have unit
testing built right in,

00:34:05.330 --> 00:34:09.300
which is huge because JavaScript is
extremely difficult to unit

00:34:09.440 --> 00:34:11.750
test unless you're writing in
SproutCore and then it's easy.

00:34:11.760 --> 00:34:12.870
. .

00:34:14.220 --> 00:34:17.310
And now my colleague
Peter is going to come up,

00:34:17.480 --> 00:34:19.420
Peter Bergstrom,
and show you how to build one of these.

00:34:25.860 --> 00:34:29.270
All right, so we're going to build the
temperature converter application that

00:34:29.310 --> 00:34:32.040
Charles just went over a little bit.

00:34:32.040 --> 00:34:36.730
So the first thing we're going
to do is bring up Terminal and

00:34:36.730 --> 00:34:42.620
use the SproutCore build tools to
create our converter application.

00:34:42.650 --> 00:34:46.150
So this just builds the skeleton
of the application actually.

00:34:48.300 --> 00:34:52.340
And this looks familiar from the slides.

00:34:52.340 --> 00:34:54.960
And this is what we're going to modify.

00:34:55.000 --> 00:35:00.520
So let's go into the converter
application and start SEServer.

00:35:02.310 --> 00:35:05.600
So here we can take a
look at what it builds.

00:35:05.600 --> 00:35:10.610
This is just the generic
page that we start with,

00:35:10.610 --> 00:35:13.840
but let's actually
make this do something.

00:35:14.510 --> 00:35:20.220
So we go into the body.rhtml here,
and we're going to

00:35:20.220 --> 00:35:25.270
change this to font size.

00:35:25.270 --> 00:35:27.400
Let's see how we do that.

00:35:27.400 --> 00:35:32.490
Command plus.

00:35:49.000 --> 00:35:50.500
Is that better?

00:35:50.780 --> 00:35:52.400
All right.

00:35:52.450 --> 00:35:53.150
OK.

00:35:53.570 --> 00:35:56.190
So let's do this.

00:35:58.300 --> 00:36:01.000
I'm just going to drop this in here.

00:36:01.000 --> 00:36:03.290
So now we have some HTML.

00:36:03.430 --> 00:36:09.280
And we use the Ruby helpers
here to create a text field.

00:36:09.280 --> 00:36:12.590
It's going to be a text field view.

00:36:12.700 --> 00:36:15.960
And we're going to name this one Celsius.

00:36:16.910 --> 00:36:18.490
We can give it a hint.

00:36:18.580 --> 00:36:24.890
So that'll just be ghost text that
will show up in the text field.

00:36:33.800 --> 00:36:36.810
So, I'm going to go ahead and add
a new name here for Fahrenheit.

00:36:36.810 --> 00:36:38.700
I'm going to drop in some CSS as well.

00:36:38.700 --> 00:36:41.050
There it is.

00:36:41.050 --> 00:36:45.180
Adding 20 pixels.

00:36:45.180 --> 00:36:47.780
Add a border.

00:36:54.800 --> 00:36:56.390
So we'll refresh this.

00:36:56.430 --> 00:36:59.980
And now you can see here
that we have ghost text.

00:37:01.700 --> 00:37:05.860
When we actually focus into the field,
it'll change.

00:37:05.860 --> 00:37:09.300
And I noticed that I didn't change this.

00:37:09.310 --> 00:37:10.850
There we go.

00:37:12.390 --> 00:37:16.500
The next thing we want to do is
actually create a controller so we can

00:37:16.500 --> 00:37:18.300
put our application logic in there.

00:37:18.300 --> 00:37:20.810
So I'm going to go back in here.

00:37:23.100 --> 00:37:31.990
We do SCGen to build the controller.

00:37:31.990 --> 00:37:31.990
It's going to be a controller.

00:37:31.990 --> 00:37:31.990
We're going to call

00:37:35.500 --> 00:37:39.420
So this actually will create
a controllers directory

00:37:39.450 --> 00:37:40.700
and a test directory.

00:37:40.820 --> 00:37:42.890
We'll get back to a unit test later.

00:37:43.010 --> 00:37:48.560
But the first thing we want to do is
add some values here in the controller,

00:37:48.640 --> 00:37:53.120
one for F value, which is going to be
the Fahrenheit value,

00:37:53.120 --> 00:37:53.810
and one for

00:37:56.770 --> 00:38:03.200
So, we can go back to our text
field here and create a binding.

00:38:03.290 --> 00:38:08.450
So, the binding will allow us to
bind the value of the text field

00:38:08.450 --> 00:38:10.670
to the one in the controller.

00:38:10.940 --> 00:38:15.160
So, if we do a change to the controller,
it will update automatically and

00:38:15.160 --> 00:38:16.970
the other way around as well.

00:38:29.430 --> 00:38:33.810
Fahrenheit value.

00:38:33.810 --> 00:38:34.840
There.

00:38:34.860 --> 00:38:37.270
So now you see that it says 2 and 32.

00:38:37.300 --> 00:38:39.760
Those are the values we
put in the controller.

00:38:41.200 --> 00:38:48.680
I'm going to bring up the error console,
and you can see here that we can actually

00:38:49.720 --> 00:38:56.310
To set the value of, for example,
the C value to 300,

00:38:58.200 --> 00:39:04.600
[Transcript missing]

00:39:07.100 --> 00:39:10.180
We want to actually get a notification
so it actually won't change.

00:39:10.200 --> 00:39:14.630
So we need to use set to actually
let everyone who is listening

00:39:14.630 --> 00:39:17.600
to the value that it's changed.

00:39:17.600 --> 00:39:21.110
So let's go back to the--

00:39:22.600 --> 00:39:24.670
So,
we're going to create two functions here,

00:39:24.700 --> 00:39:28.290
one to convert from Celsius to
Fahrenheit and one to

00:39:28.290 --> 00:39:30.000
convert the other way.

00:39:30.000 --> 00:39:34.200
So, the first one is going
to be convert C to F.

00:39:37.610 --> 00:39:40.970
And this is actually going to be a
function that observes the value.

00:39:41.070 --> 00:39:44.320
So when we change the
value in the text field,

00:39:44.320 --> 00:39:47.180
this function will be
automatically executed.

00:39:47.200 --> 00:39:52.480
So we're going to do observes cvalue.

00:39:52.480 --> 00:39:55.130
So we're going to get the value.

00:40:01.400 --> 00:40:03.400
Let's do our conversion.

00:40:03.400 --> 00:40:08.370
Here, so it's going to be 9/5 plus 32.

00:40:08.370 --> 00:40:14.190
And we're going to get the
original Fahrenheit value.

00:40:17.000 --> 00:40:19.390
And since it's a floating point number,
we want to make-- we can't

00:40:19.390 --> 00:40:22.320
just do a direct comparison and
see if it's actually changed.

00:40:22.390 --> 00:40:31.590
So we're going to do math
absolute rig minus converted.

00:40:34.310 --> 00:40:36.080
So just see if it's changed.

00:40:36.100 --> 00:40:41.000
And if it has changed enough,
we're going to set the F value

00:40:41.000 --> 00:40:43.650
here to the converted value.

00:40:43.650 --> 00:40:50.610
And I'm just going to drop
in the other function here.

00:40:55.520 --> 00:40:58.720
So we should be able to
now change the value here.

00:40:58.740 --> 00:41:02.340
So as I'm typing, the Fahrenheit value

00:41:07.530 --> 00:41:09.270
So now we actually have
a working converter,

00:41:09.270 --> 00:41:10.890
but we don't really
know if it works right.

00:41:10.900 --> 00:41:13.340
So let's build some unit tests.

00:41:13.450 --> 00:41:18.050
So when I created the controller,
we actually also had a kind of a

00:41:18.050 --> 00:41:21.120
basic unit test created for us.

00:41:21.160 --> 00:41:23.450
So let's do some modifications here.

00:41:23.540 --> 00:41:30.060
So it should convert
Celsius to Fahrenheit.

00:41:34.200 --> 00:41:40.530
So I'm going to set the
value of the Celsius value.

00:41:42.100 --> 00:41:45.700
To something we know, 100.

00:41:45.700 --> 00:41:50.160
And then we can do converter, convert,
controller.

00:41:51.610 --> 00:41:57.650
Get the Fahrenheit value,
because it's already supposedly changed,

00:41:57.930 --> 00:41:59.490
and we can do should equal

00:42:10.930 --> 00:42:10.930
And now we can bring this
up in the unit test suite.

00:42:10.930 --> 00:42:10.930
And you see that our test passed.

00:42:10.930 --> 00:42:10.930
So we can actually --

00:42:13.510 --> 00:42:17.170
Another thing that's really great is that
we can turn on continuous integration.

00:42:17.280 --> 00:42:21.850
So, this will run now in the background,
and I can just leave this minimized

00:42:21.880 --> 00:42:24.470
and create another test here.

00:42:24.550 --> 00:42:27.630
So, I'm going to grab this one.

00:42:28.300 --> 00:42:30.160
Save it.

00:42:30.180 --> 00:42:32.300
And whoops,
I actually did something wrong here.

00:42:32.370 --> 00:42:37.460
So I actually caused a unit test
to fail because I tried to set

00:42:37.460 --> 00:42:40.800
it to 100 degrees Fahrenheit.

00:42:40.960 --> 00:42:43.150
That's not 212 degrees Celsius.

00:42:43.470 --> 00:42:45.720
So it actually is 37.7.

00:42:45.850 --> 00:42:47.620
So that failed.

00:42:47.670 --> 00:42:49.800
So let's fix this.

00:42:55.350 --> 00:43:00.000
And now it shows that
both of them have passed.

00:43:11.900 --> 00:43:27.200
[Transcript missing]

00:43:31.730 --> 00:43:34.400
So that's how you build
a SproutCore application.

00:43:34.400 --> 00:43:37.660
There's another little feature
that you can find actually

00:43:37.660 --> 00:43:38.940
documentation on the website.

00:43:39.050 --> 00:43:41.100
We have built-in
documentation generation.

00:43:41.100 --> 00:43:45.140
So if you saw in some of the code there,
there were some comments that said,

00:43:45.140 --> 00:43:47.100
you know, place your documentation here.

00:43:47.100 --> 00:43:49.850
You can put that in there
and then just visit,

00:43:49.920 --> 00:43:52.570
just like there is a
built-in test runner,

00:43:52.610 --> 00:43:57.880
there's also a built-in documentation
viewer that comes with every application.

00:43:57.880 --> 00:43:58.640
You don't have to do anything.

00:43:58.640 --> 00:43:58.640
You just add documents.

00:43:58.700 --> 00:48:43.400
[Transcript missing]

00:48:47.660 --> 00:48:55.570
So building this before
was really difficult,

00:48:55.570 --> 00:48:58.660
but since Charles has done a
lot of work on the build tools,

00:48:58.660 --> 00:49:00.790
it's been a lot simpler, more simple.

00:49:00.970 --> 00:49:02.570
It's a lot more simple now.

00:49:02.770 --> 00:49:05.900
So now we just do scbuild.

00:49:07.520 --> 00:49:10.590
converter,
and we want to put some options here.

00:49:10.600 --> 00:49:14.920
So R will make it only build the
required things like SproutCore and

00:49:14.930 --> 00:49:16.960
Prototype as well as the Converter app.

00:49:17.040 --> 00:49:19.090
And we'll make this verbose
so we can see what's going on.

00:49:19.100 --> 00:49:23.370
So it'll build Prototype, SproutCore,
collect all the images,

00:49:23.370 --> 00:49:28.970
and also our little very small app,
compared to everything else.

00:49:29.180 --> 00:49:32.830
So it creates it in the temp directory.

00:49:32.940 --> 00:49:35.720
So let's go inside there.

00:49:35.720 --> 00:49:38.530
And just open that up.

00:49:40.460 --> 00:49:42.270
So these are the things that are created.

00:49:42.360 --> 00:49:46.470
The converter application and
the prototype and SproutCore.

00:49:46.590 --> 00:49:51.350
So inside of here, you can actually see
that our index.html here,

00:49:51.560 --> 00:49:56.860
the text fields or text field
views that we did in Ruby have

00:49:57.020 --> 00:49:59.020
now turned into input fields.

00:49:59.130 --> 00:50:05.690
And here are the bindings and the
hints that we specified for it.

00:50:05.730 --> 00:50:08.970
So basically,
all the things that we do inside

00:50:08.970 --> 00:50:13.220
of the RHTML with the Ruby help
will actually be automatically

00:50:13.280 --> 00:50:14.940
converted into JavaScript for us.

00:50:14.940 --> 00:50:16.950
So we don't actually have
to do anything with it.

00:50:17.170 --> 00:50:19.340
And here's our minified code.

00:50:19.370 --> 00:50:20.360
It's not very large.

00:50:20.380 --> 00:50:22.800
And you can actually just go in here.

00:50:22.800 --> 00:50:27.270
And this is what SproutCore looks like,
minified as well.

00:50:27.370 --> 00:50:38.630
Now what we want to do is take this
and drop this into our web server.

00:50:45.410 --> 00:50:45.410
So, we have a little bit of a break here,
and we can just go to this.

00:50:47.300 --> 00:50:54.460
To local host, converter,
or static convert, oh, autocompleted.

00:50:58.960 --> 00:51:03.320
So this is our wonderful deployed app.

00:51:03.370 --> 00:51:10.320
And it just works the same way as the
one that we ran in the build environment,

00:51:10.490 --> 00:51:15.180
but this is a lot faster to load because
we don't have to generate any of the

00:51:15.410 --> 00:51:22.690
JavaScript or the files in real time
like we do in the build environment

00:51:22.870 --> 00:51:23.790
or in the development environment.

00:51:23.790 --> 00:51:23.790
So thank you.

00:51:31.500 --> 00:58:01.000
[Transcript missing]