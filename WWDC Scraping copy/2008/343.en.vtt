WEBVTT

00:00:16.740 --> 00:00:18.090
Good afternoon.

00:00:18.170 --> 00:00:21.640
My name is Josh Shaffer and I'm
an engineer on the iPhone team

00:00:21.640 --> 00:00:24.730
at Apple and I work on UI kit.

00:00:24.860 --> 00:00:27.970
And today we're going to be
talking about iPhone table views.

00:00:27.970 --> 00:00:31.640
Hopefully you all at least had a chance
to hear a little bit about iPhone view

00:00:31.640 --> 00:00:33.800
controllers or have seen a little bit.

00:00:33.800 --> 00:00:36.310
There was just a session on it right
before this and hopefully you had a

00:00:36.380 --> 00:00:37.970
chance to learn about that a little bit.

00:00:38.090 --> 00:00:40.320
And if you did,
you know that a view controller

00:00:40.380 --> 00:00:43.310
is a great way to manage a
screen full of information.

00:00:43.310 --> 00:00:46.580
But what do you do now if you have
more than a screen full of information?

00:00:46.600 --> 00:00:49.860
Well, that's why we're going to
talk about table views now,

00:00:50.160 --> 00:00:54.800
which let you handle and display more
than one screen full of information.

00:00:55.300 --> 00:00:57.100
So we're going to cover
a few things today.

00:00:57.160 --> 00:00:59.790
We'll start out with the
anatomy of a table view and

00:00:59.790 --> 00:01:01.820
what exactly a table view is.

00:01:01.860 --> 00:01:05.000
Now these things may seem a
little bit basic at first,

00:01:05.000 --> 00:01:08.650
but it's important that we start out
with a good basic understanding of

00:01:08.650 --> 00:01:12.210
what exactly a table view is and the
different parts of it so that we can

00:01:12.390 --> 00:01:15.850
then talk a little bit more about how
you'll actually use this in the best

00:01:16.060 --> 00:01:18.290
way that you can in your applications.

00:01:19.720 --> 00:01:21.430
And once we have a good
foundation to build on,

00:01:21.440 --> 00:01:23.200
we'll talk about three main topics.

00:01:23.200 --> 00:01:25.330
We'll talk about how to
create your table view,

00:01:25.390 --> 00:01:28.290
how you'll display content in it,
and then how you can interact

00:01:28.290 --> 00:01:31.180
with it and allow your users
to interact with the table.

00:01:32.960 --> 00:01:35.020
So first off, what is a table view?

00:01:35.250 --> 00:01:36.660
Well,
the first thing that may come to your

00:01:36.660 --> 00:01:40.980
mind when you think about table views is
maybe just a basic list of information,

00:01:41.070 --> 00:01:43.500
just some black text
on a white background,

00:01:43.620 --> 00:01:45.740
just a very simple scrolling
list of information.

00:01:45.740 --> 00:01:49.300
And while UI table view on the iPhone
can certainly be used for that,

00:01:49.300 --> 00:01:52.320
it's actually significantly
more powerful than that.

00:01:52.450 --> 00:01:56.060
And you can create some very compelling
user interfaces just using UI table view

00:01:56.160 --> 00:01:59.740
if you're willing to do just a little bit
of work in order to customize the look

00:01:59.740 --> 00:02:01.890
just a little bit for your application.

00:02:03.480 --> 00:02:06.890
So let's start off by looking at a few
places on the phone in the existing

00:02:06.890 --> 00:02:11.680
applications that ship from Apple and
see how UI table view is used there.

00:02:11.940 --> 00:02:15.370
So in the iTunes application,
the UI table view is used here to

00:02:15.370 --> 00:02:21.010
display all of the tracks that your
users can choose from in their albums.

00:02:21.860 --> 00:02:24.640
The clocks application,
each clock in this list is a

00:02:24.750 --> 00:02:27.620
separate row in a UI table view.

00:02:28.520 --> 00:02:31.860
In the iTunes Music Store application,
a UI table view is used to

00:02:31.860 --> 00:02:35.100
display all the content in the
center area of the screen there.

00:02:35.290 --> 00:02:38.670
All of the individual tracks
available for purchase are rows.

00:02:38.710 --> 00:02:41.720
And even that area at the top
with the image and the extra

00:02:41.720 --> 00:02:45.850
information about the album,
all of that is displayed

00:02:45.850 --> 00:02:48.680
within a single UI table view.

00:02:49.490 --> 00:02:51.740
And finally,
the settings application uses

00:02:51.740 --> 00:02:55.450
UI Table View extensively to display all
of the settings that are available for

00:02:55.450 --> 00:03:01.750
users of the iPhone to change and set
different options for the phone itself.

00:03:02.500 --> 00:03:05.180
So as you can see,
there's some very different types

00:03:05.200 --> 00:03:08.450
of user interfaces that can be
created using UI Table View.

00:03:08.590 --> 00:03:11.370
But we do provide two basic
building blocks that you can

00:03:11.370 --> 00:03:17.440
start from in order to build your
custom UI Table View appearances.

00:03:17.630 --> 00:03:21.190
So on the left-hand side here,
we have the plain style table view.

00:03:21.530 --> 00:03:24.520
And on the right-hand side,
we have the group style table view.

00:03:24.600 --> 00:03:27.840
Now, as I mentioned,
these are two just basic styles that are

00:03:27.890 --> 00:03:29.940
provided out of the box by UI Table View.

00:03:30.260 --> 00:03:32.750
When you create your table,
you can choose one or the other,

00:03:32.890 --> 00:03:35.060
and you'll just get this
appearance by default.

00:03:35.360 --> 00:03:39.000
Now, everything we just saw is built
on one of these two styles,

00:03:39.000 --> 00:03:41.520
just with a bit of extra
customization to get the extra

00:03:41.590 --> 00:03:44.510
custom look that each one has.

00:03:46.480 --> 00:03:48.880
So now that we've seen some
places where this can be used,

00:03:48.880 --> 00:03:51.370
let's talk about the different
pieces that were used to compose the

00:03:51.370 --> 00:03:54.160
different tables that we just saw.

00:03:54.230 --> 00:03:59.240
So at the top, we have the table header,
and at the bottom, the table footer.

00:03:59.300 --> 00:04:01.360
These are just custom UI views.

00:04:01.400 --> 00:04:04.780
You can set them as a property
on the UI table view itself.

00:04:05.120 --> 00:04:08.960
You just create your own custom UI view
and assign it to the table to be

00:04:08.960 --> 00:04:10.740
used as the table header and footer.

00:04:10.970 --> 00:04:15.240
Now, these appear at the top and bottom
of your content within the table.

00:04:15.580 --> 00:04:17.800
As the user scrolls
the table up and down,

00:04:17.840 --> 00:04:20.600
the table header and footer
will scroll with that content.

00:04:20.650 --> 00:04:24.770
So they make sure that the user has
the maximum available space to view the

00:04:24.770 --> 00:04:29.720
areas between the table header and footer
since they can scroll it off screen.

00:04:30.340 --> 00:04:33.080
Then between the table header
and footer are the sections.

00:04:33.220 --> 00:04:36.450
Now, this may be a new concept,
for those of you that are familiar

00:04:36.630 --> 00:04:38.650
with tables on other platforms.

00:04:38.780 --> 00:04:41.870
But by default,
we divide the content in our table

00:04:41.870 --> 00:04:44.420
views up into individual sections.

00:04:44.550 --> 00:04:47.950
Now, a lot of people think, well,
I don't really want to use sections.

00:04:47.960 --> 00:04:49.480
I don't have any need for that.

00:04:49.600 --> 00:04:53.140
So they decide to tell the table
that they want zero sections.

00:04:53.140 --> 00:04:55.480
You don't really want to do this,
because if you do that,

00:04:55.570 --> 00:04:58.190
then you'll have no content
in your table at all.

00:04:58.310 --> 00:05:00.620
So by default,
if you don't want sections,

00:05:00.700 --> 00:05:02.940
just don't do anything,
and you'll get the

00:05:02.940 --> 00:05:04.630
default of one section.

00:05:05.370 --> 00:05:07.450
Now, the sections are composed of,
at the top,

00:05:07.600 --> 00:05:10.700
a section header and at the bottom,
a section footer.

00:05:10.730 --> 00:05:13.660
This is pretty similar to the
table header and footer in that you

00:05:13.660 --> 00:05:17.930
can define a custom UI view that
appears however you like and assign

00:05:18.040 --> 00:05:21.180
it to the table to be displayed
as the section header and footer.

00:05:21.300 --> 00:05:24.890
Or alternatively,
you can just return an NSString and it

00:05:24.890 --> 00:05:29.760
will be displayed as a title within the
section header and footer and it will

00:05:29.760 --> 00:05:33.480
have a standard appearance defined by
the table style that you have selected.

00:05:34.200 --> 00:05:37.070
And between the section headers and
footers are where the actual data is

00:05:37.070 --> 00:05:40.490
displayed in the rows or table cells.

00:05:40.930 --> 00:05:44.940
So altogether, these pieces make up
a full UI table view.

00:05:45.340 --> 00:05:48.370
But you may be thinking that I mentioned
that there's actually a second style,

00:05:48.370 --> 00:05:49.620
the grouped style.

00:05:49.650 --> 00:05:52.620
And this is actually no different.

00:05:52.660 --> 00:05:54.910
There's a slightly different appearance,
but all of the different

00:05:55.210 --> 00:05:56.610
parts are exactly the same.

00:05:56.780 --> 00:06:01.050
So if we take a look at this same
image but convert to the grouped style,

00:06:01.050 --> 00:06:03.220
it doesn't really change at all.

00:06:03.250 --> 00:06:05.760
There's some different appearances,
default appearances for

00:06:05.760 --> 00:06:08.640
the different parts,
but they're all in the exact same spot.

00:06:08.850 --> 00:06:11.130
So once you've figured out
how to create one table,

00:06:11.160 --> 00:06:14.010
you already know how
to create both styles.

00:06:16.090 --> 00:06:19.270
So now that we've seen what the
UI table view pieces look like,

00:06:19.330 --> 00:06:23.230
let's take a closer look at the cells
that you'll display your content in.

00:06:24.040 --> 00:06:27.800
So on the left-hand side,
we have room for an image.

00:06:27.850 --> 00:06:31.140
Next to the image is
room for a textual label.

00:06:31.180 --> 00:06:35.100
If you haven't provided an image,
that textual label will stretch

00:06:35.170 --> 00:06:38.350
to fill the full content
width of the cell itself.

00:06:38.580 --> 00:06:42.590
And on the far right-hand side
is room for an accessory view.

00:06:42.780 --> 00:06:45.980
Now, the accessory view,
you can provide your own view,

00:06:46.020 --> 00:06:50.730
but we've also provided three standard
accessory types that you can choose

00:06:51.080 --> 00:06:53.460
from with very little work on your part.

00:06:53.590 --> 00:06:55.760
So first of all, we have the check mark.

00:06:56.060 --> 00:06:59.380
The check mark can be used to indicate
that a particular row in your table

00:06:59.380 --> 00:07:04.220
is the one that is selected or that
that row is checked by the user.

00:07:04.850 --> 00:07:06.970
Next, we have the disclosure chevron.

00:07:07.140 --> 00:07:10.630
You should use this to indicate that
your users can tap on this particular

00:07:10.710 --> 00:07:12.920
cell in order to get more information.

00:07:13.180 --> 00:07:15.250
Generally,
this indicates to the user that they

00:07:15.320 --> 00:07:18.360
can tap on this cell and another
pane of information will slide in,

00:07:18.610 --> 00:07:22.210
probably in a UI navigation
controller navigation hierarchy,

00:07:22.280 --> 00:07:25.490
in order to display the
content related to that cell.

00:07:25.790 --> 00:07:28.960
And finally,
we have the Detail Disclosure Chevron.

00:07:29.150 --> 00:07:33.570
Now, this gives the user the idea that
they can tap on the cell in order

00:07:33.710 --> 00:07:36.020
to perform an action related to it,
for instance,

00:07:36.020 --> 00:07:39.010
to play a movie that's related to
this particular content in this cell,

00:07:39.010 --> 00:07:42.170
or that they can tap on the
Disclosure Chevron itself in

00:07:42.170 --> 00:07:44.290
order to get more detail about it.

00:07:44.470 --> 00:07:47.240
So it's slightly different from
the regular Detail Disclosure

00:07:47.240 --> 00:07:50.720
Chevron in that there's actually two
different behaviors that you can get,

00:07:50.880 --> 00:07:53.040
one when you tap on the cell
and one when you tap on the

00:07:53.040 --> 00:07:54.850
Disclosure button here itself.

00:07:57.670 --> 00:08:01.000
So these are all the different
pieces that make up a UI table view.

00:08:01.160 --> 00:08:04.680
So now let's talk about how
you'll create your UI table view.

00:08:04.710 --> 00:08:08.130
We found very often that it was
common for people to create UI table

00:08:08.130 --> 00:08:12.240
views that took up the full content
area available on the device.

00:08:12.270 --> 00:08:15.510
And as we just learned in the
session about UI view controllers,

00:08:15.580 --> 00:08:19.530
a UI view controller is a great way to
manage this screen full of information.

00:08:19.530 --> 00:08:23.600
So we found that people were often
creating UI view controllers just

00:08:23.740 --> 00:08:27.180
to manage this single UI table
view that took up the full screen.

00:08:28.600 --> 00:08:31.100
So in order to reduce the amount of
code that you have to write every time

00:08:31.100 --> 00:08:34.980
that you want to use one of these,
we created UI table view controller.

00:08:34.980 --> 00:08:38.130
It takes care of creating
your UI table view for you,

00:08:38.330 --> 00:08:41.310
and it also helps you to
conform to the human interface

00:08:41.330 --> 00:08:43.800
guidelines defined for the iPhone.

00:08:44.600 --> 00:08:46.850
But first let's talk about how
it creates your table view.

00:08:47.090 --> 00:08:49.730
So when you create a
UI table view controller,

00:08:49.790 --> 00:08:52.770
you can specify that you want
either the grouped or plain style.

00:08:53.120 --> 00:08:55.730
And UI table view controller
will create a table view of

00:08:55.800 --> 00:08:57.560
the appropriate type for you.

00:08:57.690 --> 00:09:04.190
If you'd prefer, you can instead use the
UI view controller method for

00:09:04.190 --> 00:09:07.580
loading your view from a nib.

00:09:07.660 --> 00:09:09.990
So if you want to lay it
out in Interface Builder,

00:09:09.990 --> 00:09:11.420
you can do that instead.

00:09:26.620 --> 00:09:26.670
So if you'd like to do that,
then in Interface Builder,

00:09:26.670 --> 00:09:26.670
you would create a new document.

00:09:26.670 --> 00:09:26.670
You would define the file's owner
to be of the type UI table view

00:09:26.670 --> 00:09:26.670
controller or actually more likely
your UI table view controller subclass.

00:09:27.090 --> 00:09:30.540
You'll then add a UI table view
to your nib by dragging it out

00:09:30.540 --> 00:09:34.990
of Interface Builder's pane.

00:09:35.390 --> 00:09:40.510
And you'll then attach the files
owner's view outlet to point to this

00:09:40.510 --> 00:09:42.880
new table view that you just created.

00:09:43.180 --> 00:09:45.620
With these three things set
up in Interface Builder,

00:09:45.680 --> 00:09:47.850
you can then have
UI Table View Controller load

00:09:47.850 --> 00:09:49.520
your table view right from there.

00:09:49.520 --> 00:09:54.350
And so you can then move on to defining
the appearance and behavior of the

00:09:54.350 --> 00:09:57.150
table view within Interface Builder.

00:09:58.030 --> 00:10:00.700
So then you can choose here
whether you'd like the grouped

00:10:00.780 --> 00:10:02.330
style or plain style table view.

00:10:02.330 --> 00:10:05.350
You could set other options such
as whether or not separators are

00:10:05.350 --> 00:10:08.420
drawn between cells in the table
view or other behavioral options

00:10:08.420 --> 00:10:11.690
that you can look at in Interface
Builder and see for yourself.

00:10:18.200 --> 00:10:20.640
So the other thing that
UI Table View Controller does for

00:10:20.640 --> 00:10:26.950
you is to help you conform to the
iPhone human interface guidelines.

00:10:27.110 --> 00:10:31.070
So one example of things that
it does for you is when a

00:10:31.170 --> 00:10:35.460
UI Table View first appears on screen,
it should flash its scroll indicator

00:10:35.460 --> 00:10:38.740
on the right-hand side to give the
user some context as to what they're

00:10:38.740 --> 00:10:42.200
seeing right now as compared to the
full amount of content that's available

00:10:42.200 --> 00:10:44.240
to be scrolled into the Table View.

00:10:44.370 --> 00:10:46.800
So over here on the right-hand
side of the Table View,

00:10:46.800 --> 00:10:50.090
when it first becomes visible,
the scroll indicator will flash like

00:10:50.090 --> 00:10:52.150
this to show the user this information.

00:10:52.290 --> 00:10:54.550
UI Table View Controller takes
care of this for you,

00:10:54.640 --> 00:10:56.950
so if you use it,
it will automatically happen.

00:10:56.960 --> 00:10:59.500
You don't have to do anything else.

00:10:59.850 --> 00:11:02.790
The second way that it helps you to
conform to the human interface guidelines

00:11:02.860 --> 00:11:05.260
is through the use of the Edit button.

00:11:05.460 --> 00:11:07.910
So often,
you'll have a UITableViewController

00:11:07.910 --> 00:11:11.580
that you'll want to edit content within,
adding and removing rows.

00:11:11.620 --> 00:11:14.500
And in order to support this,
you'll have an Edit button

00:11:14.610 --> 00:11:16.740
up in a navigation bar.

00:11:16.760 --> 00:11:20.680
UITableViewController creates this
Edit button for you and helps to make

00:11:20.680 --> 00:11:24.520
sure that its state is always in sync
with the table view's editing state.

00:11:24.690 --> 00:11:28.440
So up here on the left,
when the user taps on this button,

00:11:28.480 --> 00:11:32.230
it will switch to a Done button,
and the Edit state of the table

00:11:32.230 --> 00:11:34.060
view will change to Match.

00:11:34.120 --> 00:11:37.300
And the same will happen
when the user taps Done.

00:11:39.060 --> 00:11:42.860
The final thing that it does
is to help you manage selection

00:11:43.000 --> 00:11:45.710
within a navigation hierarchy.

00:11:46.110 --> 00:11:49.880
So when your user taps on
the John Appleseed contact,

00:11:50.170 --> 00:11:53.470
that contact's name is going to
highlight briefly to show the

00:11:53.470 --> 00:11:54.770
user that they've tapped on it.

00:11:55.040 --> 00:11:58.720
And then another pane of information
will slide in showing the full

00:11:58.720 --> 00:12:00.080
information about John Appleseed.

00:12:01.610 --> 00:12:07.880
So when your user taps on
the John Appleseed contact,

00:12:07.880 --> 00:12:15.530
that contact's name is going to
highlight briefly to show the full

00:12:15.590 --> 00:12:20.110
information about John Appleseed.

00:12:22.890 --> 00:12:25.620
So this is how you'll create
your table view controller.

00:12:25.810 --> 00:12:30.380
I emphasize UI table view controller
because it really does provide a

00:12:30.380 --> 00:12:34.930
lot of behavioral standard behaviors
that you really want to conform to.

00:12:35.050 --> 00:12:38.050
And it also does reduce the amount of
code that you have to write in order

00:12:38.050 --> 00:12:39.780
to get everything to work correctly.

00:12:40.000 --> 00:12:43.200
And also you get the benefit of
being able to use it directly

00:12:43.200 --> 00:12:46.990
within your other navigation
hierarchies or tab hierarchies.

00:12:47.740 --> 00:12:50.130
UI Table View Controller is
just a UI view,

00:12:50.130 --> 00:12:53.130
so if you prefer,
you actually could just allocate

00:12:53.210 --> 00:12:57.320
a new UI table view and insert it
into your view hierarchy directly.

00:12:58.290 --> 00:13:00.640
So now that you know how you'll
create your UI table view,

00:13:00.760 --> 00:13:04.000
let's talk about how you're going
to display your content within it.

00:13:04.000 --> 00:13:07.420
Now, there's two design patterns
here that you'll want to follow,

00:13:07.420 --> 00:13:10.830
and they're probably already
familiar from other sessions today.

00:13:11.000 --> 00:13:15.860
The first is Model View Controller,
and the second is Delegation.

00:13:18.160 --> 00:13:22.320
So let's take a look visually at
how this is all going to play out.

00:13:22.460 --> 00:13:25.090
So for the model view
controller design pattern,

00:13:25.090 --> 00:13:27.480
obviously here on the
left we have our view,

00:13:27.480 --> 00:13:28.680
the UI table view.

00:13:29.130 --> 00:13:30.120
Then we'll add our model.

00:13:30.280 --> 00:13:32.050
In this case,
it's going to be pretty simple just

00:13:32.120 --> 00:13:34.000
to keep it pretty straightforward.

00:13:34.000 --> 00:13:37.420
We'll have just an array of data,
and each element in the array will be

00:13:37.420 --> 00:13:39.190
the content for a particular section.

00:13:39.190 --> 00:13:42.330
And that content will be the name
of the section and all of the

00:13:42.330 --> 00:13:44.110
rows to be displayed within it.

00:13:44.110 --> 00:13:46.580
So this is our model,
but your model could be

00:13:46.580 --> 00:13:47.990
anything that you like.

00:13:48.140 --> 00:13:50.880
However you store your data,
that's your model.

00:13:53.100 --> 00:13:53.260
And then the final
piece is the controller,

00:13:53.310 --> 00:13:57.000
our UI Table View controller,
which ties these two together.

00:13:57.200 --> 00:13:59.620
So there are a few questions that
the table is going to have to

00:13:59.670 --> 00:14:03.400
ask of the controller in order to
display the content from your model.

00:14:03.640 --> 00:14:08.150
And the way it's going to
do this is using delegation.

00:14:08.700 --> 00:14:12.540
And it will be using the
UI Table View data source protocol.

00:14:12.710 --> 00:14:17.030
And a UI Table View data source is
just a special type of delegate.

00:14:17.150 --> 00:14:19.210
So if you're using
UI Table View controller,

00:14:19.360 --> 00:14:22.620
your UI Table View controller
is automatically set to be the

00:14:22.620 --> 00:14:25.330
data source for your table view.

00:14:25.620 --> 00:14:30.420
So the first thing the table view needs
to know is how many sections are there.

00:14:30.550 --> 00:14:33.500
So it's going to ask your table
view how many sections are there.

00:14:33.590 --> 00:14:35.510
Sorry, it's going to ask your
table view controller.

00:14:35.650 --> 00:14:40.920
And it will do this by calling the
number of sections in table view method.

00:14:41.810 --> 00:14:44.800
Your table view controller will
then look into the section array,

00:14:44.970 --> 00:14:48.800
determine how many sections are
needed to display all of your content,

00:14:48.800 --> 00:14:51.400
and return that to the table view.

00:14:51.430 --> 00:14:53.920
Once your table view knows
how many sections there are,

00:14:53.930 --> 00:14:57.590
it next needs to know how many
rows there are in each section.

00:14:57.820 --> 00:15:00.950
So your table view will ask the
table view controller how many

00:15:00.950 --> 00:15:03.680
rows are there in section zero.

00:15:03.720 --> 00:15:07.580
It will do this by calling the table
view number of rows in section method.

00:15:07.840 --> 00:15:10.480
At that point, your controller will look
into the data source,

00:15:10.560 --> 00:15:14.060
into the model,
determine how many rows are necessary

00:15:14.080 --> 00:15:18.460
to display section zero's content,
and it will return that

00:15:18.460 --> 00:15:19.730
to your table view.

00:15:19.840 --> 00:15:22.550
Now, as you can imagine,
the same thing is going to happen

00:15:22.610 --> 00:15:24.670
for every other section in the table.

00:15:25.320 --> 00:15:28.700
Once the table knows how many
rows there are in each section,

00:15:28.770 --> 00:15:32.580
it now needs to know what
content to display in each row.

00:15:32.590 --> 00:15:37.130
So it will ask the table view controller,
what should I display in section zero,

00:15:37.130 --> 00:15:38.600
row zero?

00:15:38.600 --> 00:15:41.530
And it's going to do this by
calling the table view cell

00:15:41.530 --> 00:15:43.300
for row at index path method.

00:15:43.340 --> 00:15:45.910
So at this point,
your table view controller will look

00:15:45.910 --> 00:15:50.940
into your model and determine what
content should be displayed in that row.

00:15:50.940 --> 00:15:54.030
Your table view controller
will create a new cell,

00:15:54.030 --> 00:15:57.440
lay out the content within it,
and return that to the

00:15:57.440 --> 00:15:59.780
table view to be displayed.

00:15:59.780 --> 00:16:02.220
Now you may notice here that
I mentioned that your table view

00:16:02.300 --> 00:16:06.000
controller actually creates the cell
and returns it that is displayed.

00:16:06.250 --> 00:16:08.200
I mean this quite literally.

00:16:08.230 --> 00:16:13.740
The thing it's returning is actually
an instance of UITableViewCell.

00:16:13.740 --> 00:16:17.160
Now this is a direct subclass of UIView.

00:16:17.530 --> 00:16:22.900
This is important because the thing
that you're returning from your

00:16:22.900 --> 00:16:26.900
TableView cell for row at index path
method is going to be inserted directly

00:16:26.900 --> 00:16:29.550
into the view hierarchy by UI TableView.

00:16:29.700 --> 00:16:32.840
So when your method returns it,
UI TableView simply sizes it

00:16:32.840 --> 00:16:37.440
to fit the area for the row and
inserts it into the view hierarchy.

00:16:37.550 --> 00:16:39.150
This allows you,
in your TableView cell for

00:16:39.230 --> 00:16:42.470
row at index path method,
to determine the exact appearance

00:16:42.470 --> 00:16:46.780
of the cell and its content
just by configuring this UI view

00:16:46.780 --> 00:16:48.670
to appear the way you'd like.

00:16:48.770 --> 00:16:51.730
Now, we're not going to talk about cell
customization here specifically,

00:16:51.730 --> 00:16:54.570
but if you come to the Mastering
iPhone Table Views session

00:16:54.580 --> 00:16:58.020
later in this week on Friday,
we'll talk all about the different ways

00:16:58.020 --> 00:17:01.650
that you can customize UI TableView cells
to get all sorts of different

00:17:01.650 --> 00:17:04.500
custom appearances in these cells.

00:17:06.440 --> 00:17:09.420
you may be thinking that now
there's going to be a lot of views

00:17:09.420 --> 00:17:11.490
created if you have a large table.

00:17:11.600 --> 00:17:14.630
So, if you can imagine that you have
a hundred elements in your table,

00:17:14.710 --> 00:17:18.670
and the user scrolls from the top of
that table all the way to the bottom,

00:17:18.950 --> 00:17:21.750
every row in that table is going
to move through the visible area,

00:17:21.750 --> 00:17:24.200
although most of them are
only going to be visible for

00:17:24.200 --> 00:17:25.700
a very brief period of time.

00:17:25.700 --> 00:17:30.200
If you had to create a new UI table
view cell for every row that appeared,

00:17:30.290 --> 00:17:33.220
the performance wouldn't be very good,
and you'd be using an

00:17:33.220 --> 00:17:34.220
awful lot of memory.

00:17:34.220 --> 00:17:38.330
So, in order to solve this problem,
we've introduced the

00:17:38.330 --> 00:17:39.980
concept of cell reuse.

00:17:41.320 --> 00:17:45.020
So let's take a look visually here
at how this is going to behave.

00:17:45.100 --> 00:17:47.700
So as the user begins
to scroll their table,

00:17:47.700 --> 00:17:50.750
a new cell is going to
become visible at the bottom.

00:17:50.880 --> 00:17:54.220
And the table view is going
to request the cell to be

00:17:54.240 --> 00:17:56.680
displayed from its controller.

00:17:57.220 --> 00:18:01.170
So in your table view
self-arrowed index path method,

00:18:01.330 --> 00:18:04.020
you'll notice that there are
no cells available for reuse

00:18:04.050 --> 00:18:05.570
in the reuse queue just yet.

00:18:05.820 --> 00:18:08.100
So you'll allocate a new one.

00:18:08.350 --> 00:18:11.870
With table view cells in it with
frame reuse identifier method,

00:18:11.900 --> 00:18:15.300
you'll lay out the content within
it and you'll return it to the table

00:18:15.310 --> 00:18:17.240
and the table can then display it.

00:18:17.330 --> 00:18:20.640
But now as the user continues
to scroll that content up,

00:18:20.720 --> 00:18:25.510
the John Appleseed cell at the top is
going to move off the visible area.

00:18:25.700 --> 00:18:29.160
So as we'll see now, once that happens,
the table view is going to put

00:18:29.160 --> 00:18:31.930
that cell into the reuse queue.

00:18:32.300 --> 00:18:35.430
It's actually removing it from
the view hierarchy at this point.

00:18:35.550 --> 00:18:38.880
So the only cells that are ever
actually in your view hierarchy are

00:18:38.930 --> 00:18:41.070
the ones that are visible on screen.

00:18:41.180 --> 00:18:44.670
All the other rows in your
table are there conceptually,

00:18:44.800 --> 00:18:48.450
but there's no UI views behind
them if they're not visible.

00:18:49.610 --> 00:18:53.180
So now as the user continues to scroll,
another table cell is going to

00:18:53.180 --> 00:18:54.480
become visible at the bottom.

00:18:54.540 --> 00:18:57.810
And the table will ask your
table view controller for the

00:18:57.840 --> 00:19:00.540
content to be displayed there.

00:19:00.570 --> 00:19:03.010
This time in your table view
cell for ROID index path method,

00:19:03.080 --> 00:19:05.500
there is a reusable cell available.

00:19:05.670 --> 00:19:09.660
So you'll call a different method,
dq reusable cell with identifier,

00:19:09.700 --> 00:19:12.500
which will return that
UI table view cell to you.

00:19:12.540 --> 00:19:15.830
You can then configure it with your
new content using the same cell

00:19:15.830 --> 00:19:20.080
object that you had created before and
return it to the table view display.

00:19:20.080 --> 00:19:23.260
It's going to insert it again
into the view hierarchy now at

00:19:23.270 --> 00:19:25.000
the bottom for this new row.

00:19:25.050 --> 00:19:29.320
And as the user continues to scroll,
more cells will be moved into the

00:19:29.320 --> 00:19:31.320
reuse queue and they'll be recycled.

00:19:31.420 --> 00:19:34.220
So as the user scrolls up,
cells will cycle from the

00:19:34.220 --> 00:19:37.160
top back to the bottom,
making sure that a minimum number

00:19:37.160 --> 00:19:40.530
of cells ever have to be created in
order to display just the content

00:19:40.590 --> 00:19:43.320
that's ever actually visible.

00:19:44.580 --> 00:19:50.680
So it often strikes people as if cell
reuse is a somewhat complicated concept.

00:19:50.780 --> 00:19:51.840
And it's really not.

00:19:51.930 --> 00:19:54.120
There's just a couple of methods
that you have to know about.

00:19:54.220 --> 00:19:58.870
The DQ reusable cell identifier and
the table view cell initializer.

00:19:58.970 --> 00:20:03.870
And with just these two basic things,
you can take advantage of cell reuse.

00:20:03.870 --> 00:20:07.200
And I really encourage you,
if you're using UI table view,

00:20:07.200 --> 00:20:08.690
please use cell reuse.

00:20:08.690 --> 00:20:12.440
The performance of a UI table view
scrolling will not be nearly as good

00:20:12.550 --> 00:20:14.480
if you're not reusing cells as it
will be if you're not reusing cells.

00:20:14.500 --> 00:20:16.430
be if you do.

00:20:17.090 --> 00:20:19.820
So now that we've seen conceptually
what these things look like,

00:20:19.820 --> 00:20:22.240
let's take a look at some of the
methods that you'll actually be working

00:20:22.240 --> 00:20:24.950
with in order to implement all this.

00:20:25.110 --> 00:20:28.120
So I mentioned the UI Table View data
source methods already,

00:20:28.220 --> 00:20:32.430
Table View Number of Rows in Section,
and Table View Self-Aeroic Index Path.

00:20:32.830 --> 00:20:36.540
These are the only two required
methods on UI Table View data source.

00:20:36.650 --> 00:20:39.560
And with just these two,
you can define a single section

00:20:39.560 --> 00:20:43.560
table and its content and get it
to appear on screen with really

00:20:43.620 --> 00:20:45.920
a very small amount of effort.

00:20:47.270 --> 00:20:51.110
And then for cell reuse,
we have DQ reusable cell with identifier,

00:20:51.200 --> 00:20:53.560
which is a method on UI table view.

00:20:53.650 --> 00:20:56.890
So in your self-erode index path method,
you can call this in order to get a

00:20:56.930 --> 00:20:58.560
reusable cell if one is available.

00:20:58.560 --> 00:21:01.500
And when one's not,
then there's the UI table view

00:21:01.500 --> 00:21:05.580
cell designated initializer init
with frame reuse identifier.

00:21:07.280 --> 00:21:14.550
And then for cell reuse,
we have DQ reusable cell with identifier,

00:21:14.580 --> 00:21:21.200
which is a method on UI table
view cell designated initializer

00:21:21.200 --> 00:21:24.870
init with frame reuse identifier.

00:21:25.360 --> 00:21:25.360
So in your self-erode index path method,
you can call this in order to get a

00:21:25.360 --> 00:21:25.360
reusable cell if one is available.

00:21:25.360 --> 00:21:25.360
And when one's not,
then there's the UI table view

00:21:25.360 --> 00:21:25.360
cell designated initializer init
with frame reuse identifier.

00:21:26.410 --> 00:21:27.000
And then for cell reuse,
we have DQ reusable cell

00:21:27.070 --> 00:21:27.550
with frame reuse identifier.

00:21:27.550 --> 00:21:28.580
So in your self-erode index path method,
you can call this in order to get a

00:21:28.660 --> 00:21:29.140
reusable cell if one is available.

00:21:29.140 --> 00:21:29.850
And when one's not,
then there's the UI table view

00:21:29.850 --> 00:21:31.180
cell designated initializer init
with frame reuse identifier.

00:21:31.400 --> 00:21:35.290
So, if we look at an example here,
we've got two different basic

00:21:35.290 --> 00:21:37.820
types of cells in this table view.

00:21:37.820 --> 00:21:42.590
We've got one that has, at the top,
a basic label on the left and

00:21:42.590 --> 00:21:45.140
then a sub-label on the right.

00:21:45.180 --> 00:21:48.010
So,
we can name this cell with an identifier,

00:21:48.310 --> 00:21:50.460
and we can call it identifier one.

00:21:50.460 --> 00:21:53.360
Then the second type of cell that
we have has the switch button on

00:21:53.360 --> 00:21:57.170
the bottom on the right-hand side,
and we can name that type of cell

00:21:57.170 --> 00:21:59.000
with the name identifier two.

00:21:59.220 --> 00:22:01.320
Now, obviously,
you can be more creative with your names.

00:22:01.320 --> 00:22:03.500
I'm clearly not creative,
but there you are.

00:22:05.210 --> 00:22:09.160
And once you've done this in your table
view cell for row at index path method,

00:22:09.160 --> 00:22:11.670
then you can,
once you've determined what type

00:22:11.670 --> 00:22:14.780
of cell you need for the row
you're going to be returning,

00:22:15.020 --> 00:22:17.900
you can try and dequeue a reusable
cell of the appropriate type.

00:22:18.050 --> 00:22:21.610
So you already know that the content
or that the structure of the cell

00:22:21.610 --> 00:22:23.510
is already the type that you expect.

00:22:23.810 --> 00:22:27.760
And you can just worry about setting
the content in that cell in your

00:22:27.760 --> 00:22:29.990
cell for row at index path method.

00:22:30.350 --> 00:22:35.690
This really makes using cell reuse
with tables that have multiple

00:22:36.790 --> 00:22:36.790
types of cells really quite easy.

00:22:39.370 --> 00:22:41.850
So now that we've seen all of this,
if we put it all together,

00:22:42.080 --> 00:22:45.630
this is an implementation of
table view self-heroic index path.

00:22:45.840 --> 00:22:49.460
So the first thing that you'll do is
you'll have your reuse identifier here,

00:22:49.460 --> 00:22:54.300
and you'll try to dequeue a reusable
cell with that reuse identifier.

00:22:54.600 --> 00:22:57.300
That will return nil if
one is not available.

00:22:57.300 --> 00:23:02.130
So if that happens,
then you can just allocate

00:23:02.130 --> 00:23:03.290
and initialize a new one,
again using the same reuse identifier.

00:23:03.960 --> 00:23:06.840
Now that you've got your cell,
you'll configure its content.

00:23:07.100 --> 00:23:09.110
So we've got the cell.

00:23:09.320 --> 00:23:13.090
In this case, we're just going to set the
cell's text to a static string,

00:23:13.120 --> 00:23:13.940
row text.

00:23:13.940 --> 00:23:17.000
But you could do much more
complicated configuration here

00:23:17.150 --> 00:23:19.000
to make it look however you like.

00:23:19.290 --> 00:23:21.700
But you may notice in this
particular implementation,

00:23:21.700 --> 00:23:24.410
we haven't actually looked at
the section or the row that

00:23:24.490 --> 00:23:26.340
the table is asking us about.

00:23:26.540 --> 00:23:30.430
That's represented by the index
path up in the self-reward

00:23:30.460 --> 00:23:32.380
index path method name.

00:23:32.690 --> 00:23:35.360
So there's really only two things
that you need in order to uniquely

00:23:35.360 --> 00:23:37.320
identify a cell within the table.

00:23:37.480 --> 00:23:41.190
The first is the section that it's in,
and the second is the

00:23:41.190 --> 00:23:43.410
row in that section.

00:23:44.100 --> 00:23:48.530
We already had a foundation object that
could represent an array of integers,

00:23:48.650 --> 00:23:50.530
and that's NSIndexPath.

00:23:50.690 --> 00:23:54.110
So we use that in order to
represent the particular cell

00:23:54.110 --> 00:23:56.150
that a table is requesting.

00:23:57.370 --> 00:23:59.160
And in our case,
it's always a special case

00:23:59.250 --> 00:24:01.970
because there are only ever
two integers in our index path,

00:24:02.170 --> 00:24:03.770
the section and the row.

00:24:03.920 --> 00:24:06.890
So in order to simplify this,
we've added a category on

00:24:06.890 --> 00:24:10.840
NSIndexPath that exposes this
a little bit more clearly.

00:24:10.950 --> 00:24:14.600
So we've added two properties,
the section and row properties,

00:24:14.660 --> 00:24:18.060
so that you can just get the section
and row from an index path directly.

00:24:18.100 --> 00:24:21.740
And as you can see here,
there's also a new convenience method

00:24:21.740 --> 00:24:24.110
for creating a new one if you need to.

00:24:24.490 --> 00:24:26.660
So in your code,
when you want to reference the

00:24:26.660 --> 00:24:30.200
section in a row that a particular
index path corresponds to,

00:24:30.210 --> 00:24:34.700
you can just type index path dot
row or index path dot section.

00:24:36.510 --> 00:24:39.270
So now that we've seen all this,
let's take a look at a demo of

00:24:39.270 --> 00:24:41.160
how it's all going to go together.

00:24:41.200 --> 00:24:43.840
What we want to end up with is
something that looks like this.

00:24:44.040 --> 00:24:48.680
We'll have basically a table
that has multiple sections,

00:24:48.890 --> 00:24:51.290
and each section will have 20 rows in it.

00:24:51.410 --> 00:24:53.300
We'll have different
titles for each section.

00:24:53.510 --> 00:24:56.000
And we're going to add one piece that
we haven't talked about just yet,

00:24:56.010 --> 00:24:58.390
but it's actually really easy to add,
so we just want to

00:24:58.390 --> 00:24:59.570
mention it real quickly.

00:24:59.680 --> 00:25:03.370
On the right-hand side,
we have this index bar,

00:25:03.370 --> 00:25:07.100
which allows the user to quickly
choose a particular section in

00:25:07.100 --> 00:25:09.530
your table to jump to it directly.

00:25:09.780 --> 00:25:13.000
So let's take a look at how
we're going to build this demo.

00:25:17.500 --> 00:25:21.900
So I've already created the Xcode project
that we're going to use for this demo.

00:25:21.900 --> 00:25:23.900
There's really very little
in my view controller.

00:25:23.900 --> 00:25:29.250
I've got a custom subclass of UI table
view controller that we're going

00:25:29.310 --> 00:25:31.190
to call the list view controller.

00:25:31.300 --> 00:25:38.390
And we can just start implementing
our table view data source methods.

00:25:40.550 --> 00:25:43.650
Well, actually, before we do that,
we're going to define our model,

00:25:43.650 --> 00:25:46.410
and this will be a very similar
thing to what we just saw.

00:25:46.470 --> 00:25:47.540
It'll be very simple.

00:25:47.600 --> 00:25:49.460
We're just going to create an array.

00:25:49.500 --> 00:25:52.090
It'll just be an NSMutable array,
and each element in the

00:25:52.090 --> 00:25:54.800
array will correspond to a
particular row in the table.

00:25:54.840 --> 00:25:58.590
Now, we're going to start out very simple
by only having a single section,

00:25:58.590 --> 00:26:02.280
so we don't have to have-- so
we can ignore all the section

00:26:02.440 --> 00:26:04.690
options right from the start here.

00:26:07.280 --> 00:26:09.860
So we're not going to implement number
of sections in table because we're

00:26:09.860 --> 00:26:12.620
only going to have a single one,
so we'll get the default behavior.

00:26:12.730 --> 00:26:16.450
So the first method that we have to
implement is number of rows in section.

00:26:16.640 --> 00:26:18.880
This will tell the table how
many rows to display in the

00:26:18.880 --> 00:26:21.080
one section that we'll have.

00:26:23.300 --> 00:26:26.710
Since our array is just an array of
elements and each string in the array

00:26:26.710 --> 00:26:29.850
is a particular row in the table,
we can just return the count of

00:26:29.860 --> 00:26:33.460
elements in that array from table
view number of rows in section.

00:26:33.500 --> 00:26:36.660
And this will tell the table
how many rows need to be

00:26:36.660 --> 00:26:39.770
displayed in our single section.

00:26:40.270 --> 00:26:43.810
Second, we need the table view
self-heroic index path method.

00:26:43.950 --> 00:26:45.160
Now,
this is where we're going to actually

00:26:45.270 --> 00:26:48.420
customize the content that's going
to be displayed in the table.

00:26:48.510 --> 00:26:50.590
So first,
we've created our reuse identifier

00:26:50.680 --> 00:26:53.700
that we're just calling my identifier.

00:26:53.990 --> 00:26:56.690
Next, we'll have to get the actual
UI table view cell that we're

00:26:56.690 --> 00:26:58.610
going to use to display this row.

00:26:58.740 --> 00:27:01.360
So first,
we'll try to dequeue one from the table.

00:27:01.530 --> 00:27:05.140
So we'll call table view dequeue
reusable cell with identifier with

00:27:05.190 --> 00:27:08.100
the identifier that we just set up.

00:27:08.460 --> 00:27:10.760
If one isn't available here,
then we're going to have

00:27:10.840 --> 00:27:12.640
to allocate one ourselves.

00:27:12.710 --> 00:27:17.210
So we'll call table view cells init
with frame reuse identifier designated

00:27:17.210 --> 00:27:22.280
initializer and again provide the same
reuse identifier that we just defined.

00:27:22.700 --> 00:27:25.600
Now that we've got our cell and we
know what we're going to display,

00:27:25.760 --> 00:27:29.000
we can get the content that
we want to display within it.

00:27:29.100 --> 00:27:34.100
So we can just look in our contents array
and pull out the element that corresponds

00:27:34.100 --> 00:27:38.200
to the row that the table is requesting.

00:27:38.290 --> 00:27:42.310
And we'll assign that to
the cell's text property.

00:27:43.190 --> 00:27:45.780
Once we've configured the cell this way,
then we can just return it

00:27:45.840 --> 00:27:47.570
for the table for display.

00:27:47.700 --> 00:27:49.860
So we've only implemented
two methods here,

00:27:49.940 --> 00:27:52.140
but we can now build it and we can run.

00:27:52.210 --> 00:27:55.190
And already,
we'll have a table that can display

00:27:55.360 --> 00:27:58.760
a simple collection of 20 rows.

00:27:58.820 --> 00:28:02.600
And the user can scroll up and down,
and we get this scroll indicator

00:28:02.600 --> 00:28:04.050
on the right-hand side.

00:28:04.230 --> 00:28:08.120
So with a very small amount of work,
we've already got a table view working.

00:28:08.650 --> 00:28:17.690
: So the first thing we'll have to do
is redefine our model a little bit.

00:28:17.760 --> 00:28:21.340
So first we're going to need
an array of section titles.

00:28:21.360 --> 00:28:24.680
This is just going to be
one title per section,

00:28:24.680 --> 00:28:27.440
and they'll just be the
letters of the alphabet.

00:28:27.870 --> 00:28:30.300
And then we're also going
to modify our array so that

00:28:30.300 --> 00:28:32.050
it's now an array of arrays.

00:28:32.220 --> 00:28:38.190
So each element in the outer array
is the data for a particular section,

00:28:38.190 --> 00:28:42.510
and each element in an inner
array is a row in that section.

00:28:44.400 --> 00:28:46.460
So we do have to add now one more method.

00:28:46.520 --> 00:28:49.990
We'll have to add the number
of rows in table view method.

00:28:50.360 --> 00:28:53.070
Oh, sorry, the number of sections
in table view method.

00:28:53.070 --> 00:28:57.300
And this is going to be now just
returning the count of the elements

00:28:57.300 --> 00:29:00.540
in our contents array since each
element there corresponds to a

00:29:00.540 --> 00:29:03.030
particular section in the table.

00:29:03.280 --> 00:29:05.390
But that means now we
have to modify our-- oh,

00:29:05.540 --> 00:29:06.100
I'm sorry.

00:29:06.210 --> 00:29:08.400
One more thing before we do that.

00:29:08.490 --> 00:29:13.200
We also want to add a
title in each header.

00:29:13.320 --> 00:29:15.970
So in order to do that,
we can add the table view title

00:29:15.970 --> 00:29:17.690
for header and section method.

00:29:17.960 --> 00:29:22.360
And we already have an
array of section titles,

00:29:22.380 --> 00:29:26.870
so we can just return the element that
corresponds to the particular section

00:29:26.870 --> 00:29:26.870
that the table is asking us about.

00:29:28.230 --> 00:29:31.500
Now, we also have to modify
tableViewNumberOfRowsInSection since

00:29:31.500 --> 00:29:33.650
our model is now an array of arrays.

00:29:33.880 --> 00:29:36.010
So in order to get this right,
we now have to pull out

00:29:36.010 --> 00:29:39.270
the outer array-- sorry,
pull out the inner array from

00:29:39.270 --> 00:29:41.810
the outer array that corresponds
to the section and then count

00:29:41.810 --> 00:29:44.380
the number of elements in that,
which is the number of rows

00:29:44.460 --> 00:29:46.480
in that particular section.

00:29:46.520 --> 00:29:48.920
And we'll have to make a pretty
similar modification here to get

00:29:48.920 --> 00:29:50.870
the correct text for the cell.

00:29:51.150 --> 00:29:53.180
Again,
we're going to pull out the inner array

00:29:53.220 --> 00:29:56.440
corresponding to the particular section
that the table's asking us about.

00:29:56.470 --> 00:29:58.820
And then we'll get the object
corresponding to the row that the

00:29:58.820 --> 00:30:03.390
table is asking about and assign
that to the text field for the cell.

00:30:04.320 --> 00:30:07.860
So now when we build and run,
we've got a new UI table view that

00:30:07.860 --> 00:30:12.390
now displays multiple sections,
each of which contains 20 rows.

00:30:12.990 --> 00:30:15.510
But now this table is
getting kind of long.

00:30:15.760 --> 00:30:17.960
And for a user to scroll all
the way through this could

00:30:18.110 --> 00:30:19.420
be kind of time consuming.

00:30:19.420 --> 00:30:22.660
And it would be hard for them to find
the exact place that they want to be.

00:30:22.770 --> 00:30:25.900
So we're going to add that
index bar that I mentioned.

00:30:26.010 --> 00:30:28.790
In order to do that,
we only have to actually

00:30:28.790 --> 00:30:30.370
add one more method.

00:30:31.680 --> 00:30:35.580
So we can add the section index
titles for table view method.

00:30:35.650 --> 00:30:38.740
And that just returns an array
of the titles of each section.

00:30:38.770 --> 00:30:42.390
But we already have an array that
contains all the titles of the sections.

00:30:42.610 --> 00:30:45.480
So we can just return
that array directly.

00:30:45.990 --> 00:30:49.300
And with that simple change,
when we build and run, now we've got this

00:30:49.580 --> 00:30:52.220
section bar on the right,
and the user can scrub through that

00:30:52.350 --> 00:30:55.710
to jump quickly to a particular
section in their table view.

00:30:57.880 --> 00:30:59.310
Now,
I should mention that this particular

00:30:59.360 --> 00:31:01.860
section index is only available
on the plain style table view,

00:31:01.860 --> 00:31:03.330
not on the group style table view.

00:31:03.380 --> 00:31:13.490
So now if we switch back to slides.

00:31:23.300 --> 00:31:25.600
So now we've seen how you'll
create your table view and we've

00:31:25.630 --> 00:31:28.060
seen how you're going to get
your data to display within it.

00:31:28.190 --> 00:31:32.430
The last piece that we have to get to get
our full functionality here is to allow

00:31:32.430 --> 00:31:34.530
the user to interact with your table.

00:31:34.630 --> 00:31:37.490
So what's going to happen when the
user taps on a particular cell?

00:31:37.700 --> 00:31:40.980
How are you informed about this and
how are you going to respond to it?

00:31:41.170 --> 00:31:45.530
Well, that's what UITableViewDelegate
does for you.

00:31:46.780 --> 00:31:48.670
So when the user taps
on a particular cell,

00:31:48.750 --> 00:31:52.340
we can look at a couple examples
of what happens in this case.

00:31:52.350 --> 00:31:55.270
In the settings application,
we've got a list of ringtones

00:31:55.270 --> 00:31:58.960
that the user can choose from in
order to pick the one they want.

00:31:58.990 --> 00:32:03.080
When the user taps on a row here,
that row will highlight briefly,

00:32:03.200 --> 00:32:08.070
the check mark will move to that row,
and then the selection will fade out.

00:32:12.760 --> 00:32:15.520
In the address book,
we saw this example earlier.

00:32:15.580 --> 00:32:17.880
When the user taps on the
John Appleseed contact,

00:32:18.080 --> 00:32:21.930
it's going to highlight briefly and
a pane of information will slide in.

00:32:22.180 --> 00:32:24.320
The idea here, again,
is that when the user

00:32:24.320 --> 00:32:27.440
taps the back button,
we should slide back to the table view,

00:32:27.460 --> 00:32:31.060
that row should still be highlighted,
and then it should fade out.

00:32:34.300 --> 00:32:36.730
The most important concept to
take away from both of these

00:32:36.820 --> 00:32:40.840
things is that selections in
UI Table View are temporary.

00:32:40.850 --> 00:32:43.300
When the user selects a
particular row in your table,

00:32:43.320 --> 00:32:47.380
you should perform some action and
then immediately deselect the cell

00:32:47.450 --> 00:32:49.500
after that action has been performed.

00:32:49.600 --> 00:32:53.540
Selections in UI Table View are not
used to indicate a persistent selection.

00:32:53.560 --> 00:32:55.800
It's just a temporary thing.

00:32:56.380 --> 00:32:59.330
So the methods that are going to
help you to implement all this,

00:32:59.330 --> 00:33:02.440
on the UI Table View delegate protocol,
we have the table view

00:33:02.440 --> 00:33:04.820
didSelectRowAtIndexPath method.

00:33:05.010 --> 00:33:07.530
This is called when the
user taps on a cell,

00:33:07.530 --> 00:33:09.320
and the table view has
already highlighted the

00:33:09.360 --> 00:33:11.660
cell for you at that point,
and you're just being informed

00:33:11.660 --> 00:33:13.280
that the user has tapped there.

00:33:13.360 --> 00:33:15.180
So at that point,
you can perform whatever

00:33:15.180 --> 00:33:17.770
action is appropriate for the
cell that's been tapped on,

00:33:17.920 --> 00:33:20.640
and then you'll call the next method,
the UI Table View method,

00:33:20.680 --> 00:33:27.590
that does the same thing.

00:33:27.590 --> 00:33:27.590
So we have the table view
that we just created,

00:33:27.590 --> 00:33:27.590
and we have the table
view that we just created.

00:33:28.140 --> 00:33:31.490
Now, as I already mentioned before,
in the case of UI Table View Controller,

00:33:31.560 --> 00:33:34.680
if you're using this in the
navigation hierarchy and you want

00:33:34.680 --> 00:33:38.280
the behavior where sliding back to
a table keeps the cell selected and

00:33:38.370 --> 00:33:41.240
then fades out as you've slid back,
you don't have to call

00:33:41.240 --> 00:33:42.600
deselect row at index path.

00:33:42.770 --> 00:33:45.520
UI Table View Controller handles
that part there for you.

00:33:45.640 --> 00:33:47.020
But that's a special case.

00:33:47.020 --> 00:33:50.710
In all the other cases,
you'll want to deselect the row yourself.

00:33:54.110 --> 00:33:57.740
So let's take a look at how
all of this fits together in a

00:33:57.740 --> 00:34:00.820
modification of the recipe sample
that we just saw in the UI view

00:34:00.880 --> 00:34:03.660
controller session right before this.

00:34:07.270 --> 00:34:10.800
So I hope you all had a chance to see it,
but if you didn't, I'm going to quickly

00:34:10.800 --> 00:34:12.700
show you what they did.

00:34:12.700 --> 00:34:15.560
The basic view controller-based
application that they created

00:34:15.970 --> 00:34:18.180
is a very simple recipes viewer.

00:34:18.420 --> 00:34:20.620
So at the top,
we have a view controller that

00:34:20.620 --> 00:34:23.300
has a single button to allow
us to see chocolate cake,

00:34:23.550 --> 00:34:26.820
which brings us into a recipe
detail view that gives us more

00:34:26.820 --> 00:34:30.410
information about chocolate cake,
and then another button that allows

00:34:30.430 --> 00:34:33.310
you to see a picture of chocolate cake.

00:34:33.980 --> 00:34:36.260
Now, this is pretty basic,
and there's no way to

00:34:36.260 --> 00:34:38.880
scroll any of this content,
so the amount that you can see

00:34:38.930 --> 00:34:42.000
or that you can present to your
user is limited to the amount of

00:34:42.000 --> 00:34:44.180
available space that's on the screen.

00:34:44.450 --> 00:34:48.680
So we want to modify this by adding
some table views to really let you see

00:34:48.710 --> 00:34:51.380
a lot of extra content in these screens.

00:34:51.490 --> 00:34:53.990
So what we want to end up with
once we're done is something

00:34:53.990 --> 00:34:55.230
that looks more like this.

00:34:55.520 --> 00:34:58.200
At the top,
we'll have a table view that displays

00:34:58.200 --> 00:35:00.430
all of the recipes that we know about.

00:35:00.620 --> 00:35:03.830
When the user taps on one,
they'll get another table view that is

00:35:03.830 --> 00:35:09.980
now a group-style table view with more
information that provides a full list

00:35:10.080 --> 00:35:14.780
of ingredients and the category that you
want to categorize this recipe within,

00:35:14.790 --> 00:35:18.310
and another thing that you can
tap on to get more instructions.

00:35:18.770 --> 00:35:23.080
And the final thing that we'll want
to add is this category pop-up.

00:35:23.310 --> 00:35:25.370
When your user taps on
this particular cell,

00:35:25.420 --> 00:35:29.220
the idea is we want to slide in another
table view that allows the user to

00:35:29.220 --> 00:35:31.540
choose what type of recipe this is.

00:35:31.720 --> 00:35:33.850
So we can say that it's a soup,
which is obviously wrong,

00:35:33.850 --> 00:35:35.790
but it's clearly an entree,
so we'll set that.

00:35:35.870 --> 00:35:43.780
And so that's what we want to
end up with once we're done here.

00:35:46.070 --> 00:35:48.230
So we'll start out with the
basic recipe sample app that

00:35:48.280 --> 00:35:52.300
they created in the last session.

00:35:52.320 --> 00:35:56.590
The only thing that we want to modify in
our application delegate is right here,

00:35:56.630 --> 00:35:59.180
but we'll start out with a quick
overview of what's happened here.

00:35:59.210 --> 00:36:01.190
They've created a
UI navigation controller,

00:36:01.190 --> 00:36:03.990
and this is the thing that will
create the navigation bar at

00:36:04.000 --> 00:36:05.960
the top of the window for us.

00:36:05.980 --> 00:36:08.950
And we'll then be pushing all of
our table view controllers onto

00:36:08.950 --> 00:36:11.400
that in order to slide them in.

00:36:13.060 --> 00:36:15.370
Then they've created their
top level view controller,

00:36:15.370 --> 00:36:17.780
which is the thing that we saw that
displayed the single button that

00:36:17.780 --> 00:36:19.450
allowed them to choose chocolate cake.

00:36:19.580 --> 00:36:22.310
So we want to replace this with
a new UI table view controller

00:36:22.320 --> 00:36:27.460
subclass that we'll create that will
display all of the recipes in a list.

00:36:27.490 --> 00:36:28.520
Oops.

00:36:28.860 --> 00:36:30.790
That's not it.

00:36:33.570 --> 00:36:37.840
So we're going to create our
recipe list table view controller.

00:36:37.870 --> 00:36:41.920
And we're going to initialize it with the
plane style as a plane style table view.

00:36:41.950 --> 00:36:44.620
And we've added one extra parameter
to our initializer that allows

00:36:44.700 --> 00:36:48.360
us to pass in our model object,
which is just a recipe controller

00:36:48.400 --> 00:36:51.800
that we've instantiated right here.

00:36:52.570 --> 00:36:55.840
Then that view controller will get
pushed under the navigation stack

00:36:56.100 --> 00:36:59.330
without animation since it's coming up
right as the application is launching.

00:36:59.340 --> 00:37:02.280
We don't want it to be animating in.

00:37:02.330 --> 00:37:05.170
And that's all we really have to do.

00:37:07.090 --> 00:37:10.340
So now we'll implement the recipe list
table view controller so that we can

00:37:10.340 --> 00:37:13.010
actually get content into that list.

00:37:13.120 --> 00:37:14.810
We've got a small amount
of code here already.

00:37:14.820 --> 00:37:17.820
But mostly, we're going to build this
from scratch right now.

00:37:18.110 --> 00:37:20.520
We're just going to retain that
model object that we just passed

00:37:20.520 --> 00:37:22.490
in from our application controller.

00:37:22.520 --> 00:37:26.340
And we're going to set our title and
the row height to custom values here.

00:37:26.630 --> 00:37:29.040
And then we've also implemented
dalloc just to release that

00:37:29.040 --> 00:37:32.360
recipe controller when this
table view controller goes away.

00:37:32.490 --> 00:37:34.130
But really,
there's nothing specific to what

00:37:34.210 --> 00:37:35.750
we're worried about right now.

00:37:35.990 --> 00:37:38.710
So the first thing that we'll
have to do is we want to tell the

00:37:38.710 --> 00:37:40.720
table how many rows to display.

00:37:40.730 --> 00:37:42.510
Again,
we're ignoring the number of sections in

00:37:42.510 --> 00:37:47.020
this particular instance because this is
a single table that has only one section.

00:37:47.090 --> 00:37:48.710
So we don't have to do
anything special there.

00:37:48.920 --> 00:37:51.590
So we'll start out by implementing
table view number of rows in

00:37:51.590 --> 00:37:55.590
section to tell the table how
many rows it needs to display.

00:37:55.930 --> 00:37:59.790
Now, our recipes controller knows how to
tell us how many recipes it knows about,

00:38:00.030 --> 00:38:03.860
so we can simply return that
value here for the number of rows.

00:38:04.920 --> 00:38:07.380
So now that the table knows
how many rows there are,

00:38:07.410 --> 00:38:11.110
it's going to be asking us for
the individual cells for each row.

00:38:11.240 --> 00:38:13.580
So we'll implement table
view cell for row at index

00:38:13.580 --> 00:38:15.140
path in order to return that.

00:38:15.260 --> 00:38:18.630
And this is going to look very similar
to the ones that we've already seen.

00:38:18.760 --> 00:38:21.330
So first off,
we'll declare our reuse identifier,

00:38:21.490 --> 00:38:25.210
and we've got a couple of local variables
that we'll be using in a second.

00:38:25.600 --> 00:38:28.170
Next, we're going to try and
dequeue our reusable cell.

00:38:28.170 --> 00:38:30.680
And if one isn't available,
we'll allocate a new one.

00:38:30.770 --> 00:38:33.360
Again, we've already seen all this,
but I just want to keep

00:38:33.470 --> 00:38:36.220
emphasizing that you really do
want to be using this cell reuse.

00:38:36.220 --> 00:38:38.870
So we're going to show it every time.

00:38:40.650 --> 00:38:43.510
Once you've now got the cell that
you're going to be displaying,

00:38:43.510 --> 00:38:45.400
next you want to fill out the content.

00:38:45.440 --> 00:38:48.600
Now, we saw something a little bit more
complex in this particular example

00:38:48.600 --> 00:38:49.920
than what we've seen before.

00:38:50.140 --> 00:38:52.190
Now we want to add an
image as well as text.

00:38:52.190 --> 00:38:54.480
So this isn't really any more difficult.

00:38:54.570 --> 00:38:57.890
We'll ask our recipe controller
for the recipe corresponding to the

00:38:57.910 --> 00:38:59.760
row that we're being asked about.

00:38:59.760 --> 00:39:04.310
We'll get that recipe's name and
assign it as the cell's text.

00:39:04.310 --> 00:39:08.390
And we'll get a thumbnail image
from our recipe and assign

00:39:08.390 --> 00:39:09.070
that as the cell's image.

00:39:09.740 --> 00:39:12.000
That's all the configuration
we really want to do here.

00:39:12.000 --> 00:39:17.590
So then we'll just return
the cell for display.

00:39:17.660 --> 00:39:20.190
So now if we build and run this,

00:39:23.950 --> 00:39:24.580
Oh, yeah, no.

00:39:24.580 --> 00:39:25.240
Sorry.

00:39:25.240 --> 00:39:26.810
We're not going to build
and run that just yet.

00:39:32.790 --> 00:39:36.390
The other thing that appears in these
lists is on the right-hand side you saw,

00:39:36.500 --> 00:39:39.300
we want to be able to give the user
some idea that they can tap on a

00:39:39.300 --> 00:39:43.440
particular row in this table and slide in
information about that particular recipe.

00:39:43.670 --> 00:39:50.250
So we're going to want to use the
detailed disclosure chevron-- sorry,

00:39:50.250 --> 00:39:54.260
not the detailed disclosure chevron,
the disclosure chevron-- in

00:39:54.260 --> 00:39:54.260
order to get the user this idea
that they can tap on this cell.

00:39:54.970 --> 00:39:58.950
Since we want the same accessory to
appear in every row in our table,

00:39:59.040 --> 00:40:02.350
we can implement just one method,
the table view accessory type

00:40:02.350 --> 00:40:04.340
for row at index path method.

00:40:04.340 --> 00:40:08.210
And we'll always return
UITableViewCellAccessoryDisclosureIndic

00:40:08.250 --> 00:40:12.330
ator to allow the user to have some
idea that they can tap on this cell.

00:40:14.130 --> 00:40:15.980
But now that we've shown the
user that they can do this,

00:40:16.070 --> 00:40:18.810
we should really implement
some logic to allow something

00:40:18.810 --> 00:40:20.190
to happen once they do it.

00:40:20.310 --> 00:40:22.540
So in order to do that,
we want to add the table view

00:40:22.540 --> 00:40:25.490
didSelectRowAtIndexPath delegate method.

00:40:25.610 --> 00:40:29.000
So we'll add an implementation of
that that asks our recipes controller

00:40:29.000 --> 00:40:33.130
for the recipe corresponding to the
row that the user has tapped on.

00:40:33.230 --> 00:40:36.260
And then we're just going to call
the showRecipeAnimated method,

00:40:36.420 --> 00:40:39.790
which we'll implement now,
and it's actually very small.

00:40:40.230 --> 00:40:42.840
First of all,
we're going to want to create a new

00:40:42.840 --> 00:40:45.180
UI table view controller subclass.

00:40:45.360 --> 00:40:47.600
So that will be the recipe
detail view controller,

00:40:47.660 --> 00:40:51.210
which we'll use in order to display
all the detail about this recipe.

00:40:51.380 --> 00:40:54.610
And this one we want to be of
UI table view style grouped.

00:40:54.780 --> 00:40:56.280
So we'll just allocate one of these here.

00:40:56.280 --> 00:41:00.190
I've already created the basic file,
but there's no content in it yet.

00:41:00.710 --> 00:41:04.880
We'll assign the recipe that we
just got to our recipe detail view

00:41:04.950 --> 00:41:07.510
controller so it knows what to display.

00:41:07.630 --> 00:41:10.290
And we'll push that view
controller onto the navigation

00:41:10.290 --> 00:41:12.300
controller's navigation stack.

00:41:12.350 --> 00:41:14.660
Now, since we're never going to have
to deal with this particular

00:41:14.660 --> 00:41:17.600
table view controller again
from this view controller,

00:41:17.640 --> 00:41:18.630
we can release it here.

00:41:18.880 --> 00:41:21.140
The navigation controller
has retained it,

00:41:21.140 --> 00:41:23.660
and it's maintaining
now the only reference.

00:41:23.830 --> 00:41:26.200
So once the user returns
to the main screen,

00:41:26.230 --> 00:41:30.030
this view controller is just going
to be released automatically.

00:41:31.340 --> 00:41:35.440
So now if we build and run,
we've now got a basic table view

00:41:35.760 --> 00:41:39.320
that's displaying our image on
the left with the textual label

00:41:39.420 --> 00:41:41.300
for each recipe on the right.

00:41:41.340 --> 00:41:46.080
And we've got the disclosure chevrons
coming down the right-hand side.

00:41:46.290 --> 00:41:48.460
And now the user can tap
on one of these rows,

00:41:48.460 --> 00:41:50.410
and more information will slide in.

00:41:50.570 --> 00:41:55.000
So now let's implement this extra
table view here to actually display the

00:41:55.000 --> 00:41:57.540
extra information about each recipe.

00:41:57.540 --> 00:42:00.250
So we'll move on to the
Recipe Detail View Controller.

00:42:00.670 --> 00:42:04.160
This one has a small amount of
extra information already in here,

00:42:04.160 --> 00:42:05.170
but not too much again.

00:42:05.400 --> 00:42:08.100
In our initializer,
we're just setting up, again,

00:42:08.100 --> 00:42:10.680
the navigation item's title,
which will display recipe

00:42:10.750 --> 00:42:11.910
up in the navigation bar.

00:42:12.080 --> 00:42:14.740
And in our dialog,
we're releasing a few objects that

00:42:14.740 --> 00:42:16.400
we'll be creating in a minute.

00:42:17.400 --> 00:42:20.800
We've also got an implementation
now of the viewWillAppear method.

00:42:20.840 --> 00:42:23.960
This is called when the table
view is about to become visible.

00:42:24.010 --> 00:42:27.630
Well,
the first thing that you want to do is

00:42:27.630 --> 00:42:34.510
make sure to call super viewWillAppear
to make sure that UITableViewController

00:42:34.600 --> 00:42:36.300
has a chance to perform whatever
actions it's going to be performing.

00:42:36.300 --> 00:42:36.300
And in this case,
it's going to be flashing

00:42:36.300 --> 00:42:36.300
the scroll indicator for us.

00:42:36.790 --> 00:42:40.570
Now, the next thing we're going to do is
something that I actually want to

00:42:40.580 --> 00:42:42.880
suggest that you don't do very often,
but we're going to do it

00:42:42.930 --> 00:42:45.820
here for simplicity's sake,
is reload the data in our table.

00:42:46.140 --> 00:42:48.450
This is the only place you're
going to see me call reload data

00:42:48.450 --> 00:42:51.460
anywhere in any of these samples,
and that's actually a

00:42:51.460 --> 00:42:52.820
very important point.

00:42:52.900 --> 00:42:56.190
In almost every case,
you shouldn't really be calling reload

00:42:56.190 --> 00:42:58.180
data on your table very frequently.

00:42:58.330 --> 00:43:00.610
For the most part,
any updating that you have to do can

00:43:00.610 --> 00:43:02.680
be done just on a row by row basis.

00:43:02.920 --> 00:43:05.550
You don't have to reload the
data for the entire table.

00:43:05.850 --> 00:43:09.000
If you start calling reload data a lot,
the performance is going to

00:43:09.000 --> 00:43:11.670
start to degrade pretty quickly,
because a lot of work has to be done

00:43:11.670 --> 00:43:14.960
to recalculate the full height of
the table and to ask your controller

00:43:15.200 --> 00:43:18.570
for information about every section
and all the rows in the section.

00:43:18.740 --> 00:43:21.460
A lot of work happens every
time you call reload data.

00:43:21.590 --> 00:43:24.690
So if you can avoid it,
you really should just not use reload

00:43:24.720 --> 00:43:26.560
data unless you absolutely have to.

00:43:26.690 --> 00:43:28.310
But as I said,
for simplicity's sake here,

00:43:28.310 --> 00:43:31.870
I'm going to just take the easy
route and call reload data.

00:43:32.070 --> 00:43:35.820
And the idea here is that when the
user has changed the recipe type,

00:43:35.820 --> 00:43:40.260
we want to update the content here when
they return to this view to reflect the

00:43:40.260 --> 00:43:42.540
new recipe type that they've chosen.

00:43:42.580 --> 00:43:44.940
So we'll call reload data so
that our table gets reloaded.

00:43:50.120 --> 00:43:52.080
And we're going to set the title
of our view controller to the

00:43:52.080 --> 00:43:56.000
recipe's name so that that will
appear in the navigation bar.

00:43:56.040 --> 00:43:58.480
I've also got an implementation of a
method that we're going to wire up in

00:43:58.550 --> 00:44:02.650
Interface Builder a little bit later,
which shows a photo of the recipe.

00:44:02.750 --> 00:44:06.320
And this is using a view controller
that was created in the last

00:44:06.320 --> 00:44:10.080
session on UIViewControllers,
which just displays the full

00:44:10.090 --> 00:44:11.990
screen image of our recipe.

00:44:12.560 --> 00:44:15.560
So with all that in place,
we can start to implement our UI table

00:44:15.560 --> 00:44:18.570
view data source and delegate methods.

00:44:18.790 --> 00:44:20.480
So the first thing that
we'll want to do is,

00:44:20.810 --> 00:44:23.270
as you saw now,
and let's take a quick look at that

00:44:23.270 --> 00:44:27.440
again just to refresh your memory,
this particular table view is

00:44:27.470 --> 00:44:29.560
going to have multiple sections.

00:44:29.850 --> 00:44:32.720
We're going to have one
section here for the category,

00:44:32.750 --> 00:44:35.680
one section for the ingredients,
and one section at the bottom

00:44:35.800 --> 00:44:38.240
for the lone instructions button.

00:44:38.430 --> 00:44:40.660
So we've actually got a
constant number of sections.

00:44:40.840 --> 00:44:43.920
So we can implement our number
of sections in table view

00:44:43.920 --> 00:44:49.800
method to just return-- Whoops,
three.

00:44:50.730 --> 00:44:53.330
And now that we've got our sections,
you saw those sections

00:44:53.520 --> 00:44:54.970
each had their own title.

00:44:55.180 --> 00:44:59.120
So next we'll implement the table
view title for header in section

00:44:59.120 --> 00:45:03.190
method to return the titles to be
displayed for each of those sections.

00:45:03.370 --> 00:45:08.300
So for the type section,
we'll return the name category.

00:45:08.390 --> 00:45:10.300
That's a little odd, but yeah.

00:45:10.410 --> 00:45:13.090
For the ingredient section,
we'll return the name ingredients.

00:45:13.210 --> 00:45:14.800
And our other section
didn't have a title,

00:45:14.800 --> 00:45:17.790
so we'll just return
nil for everything else.

00:45:19.180 --> 00:45:22.370
Now that we know what the different
titles in the sections are,

00:45:22.540 --> 00:45:26.860
we need to tell the table view how many
rows there are in each of these sections.

00:45:26.940 --> 00:45:30.810
So we'll implement the table view
number of rows in section method.

00:45:31.390 --> 00:45:34.030
Now, this is very similar to
things we've seen already,

00:45:34.030 --> 00:45:36.430
but now we're going to be
switching on the section.

00:45:36.560 --> 00:45:39.060
So for the type section and
the instruction section,

00:45:39.130 --> 00:45:40.680
there's only ever one row in these.

00:45:40.850 --> 00:45:44.250
They're just a single row that the
user can tap on to perform some action.

00:45:44.390 --> 00:45:47.900
So we'll only be returning a
constant number 1 for this one.

00:45:48.060 --> 00:45:51.460
For the ingredients section,
we want to ask our recipe for all of

00:45:51.460 --> 00:45:53.230
the list of ingredients and count them.

00:45:53.470 --> 00:45:57.140
And we'll return that as the number
of rows for the ingredients section.

00:45:57.200 --> 00:45:59.520
And so then we can return that.

00:45:59.840 --> 00:46:02.690
Now that the table knows how many rows
there are in each of these sections,

00:46:02.810 --> 00:46:05.490
again, it's going to be asking us
for the rows to display there.

00:46:05.610 --> 00:46:08.570
So we have to implement table
view cell for row at index path in

00:46:08.570 --> 00:46:10.510
order to return that information.

00:46:10.660 --> 00:46:13.540
Again, starting out very similar
to what we've already seen,

00:46:13.720 --> 00:46:17.140
we're defining our own reuse identifier,
dequeuing a reusable cell

00:46:17.140 --> 00:46:20.220
with that identifier,
and then calling a knit with frame reuse

00:46:20.220 --> 00:46:22.860
identifier if one wasn't available.

00:46:23.970 --> 00:46:26.630
But now cell configuration is
slightly different because we'll

00:46:26.640 --> 00:46:29.720
be doing something different
depending on the section.

00:46:29.790 --> 00:46:33.730
So we're going to add a switch statement
and switch on the indexpath.section

00:46:33.730 --> 00:46:35.560
that the table is asking us about.

00:46:35.560 --> 00:46:37.990
For the type section,
we'll ask the recipe for its

00:46:38.290 --> 00:46:39.660
type and set the text to that.

00:46:39.660 --> 00:46:42.830
For the ingredient section,
we're going to ask the recipe for

00:46:42.830 --> 00:46:46.430
its list of ingredients and get the
ingredient that corresponds to the

00:46:46.430 --> 00:46:48.310
row that the table is asking us for.

00:46:48.310 --> 00:46:51.830
We'll then get the name of that
ingredient from this object and assign

00:46:51.830 --> 00:46:54.520
that to the textual label for the cell.

00:46:54.900 --> 00:46:58.450
And we are doing one other bit of
customization for this particular row.

00:46:58.560 --> 00:47:00.620
We're going to set the
cell selection style to

00:47:00.620 --> 00:47:02.810
UITableViewCellSelectionStylenone.

00:47:02.810 --> 00:47:07.800
The idea here is that when
the user taps on an element in

00:47:07.800 --> 00:47:12.900
the ingredients section here,
we don't actually want

00:47:12.940 --> 00:47:15.340
to allow them to tap it.

00:47:15.420 --> 00:47:18.600
We don't want to show any visible
feedback when the user taps there.

00:47:18.600 --> 00:47:21.140
Nothing is going to happen,
so we want to make sure that

00:47:21.140 --> 00:47:24.150
a cell selection never appears
when they're tapping there.

00:47:24.570 --> 00:47:28.900
If we set the cell selection
style to CellSelectionStylenone,

00:47:28.910 --> 00:47:33.570
then they'll never get
this visual feedback.

00:47:33.810 --> 00:47:36.100
For the instruction section,
we're going to set the text to

00:47:36.100 --> 00:47:38.380
the constant string instructions.

00:47:38.450 --> 00:47:44.250
Now, I apparently have a bug in here,
so we're going to add one extra thing.

00:47:44.680 --> 00:47:48.010
Because we're reusing cells,
we want to make sure that the

00:47:48.090 --> 00:47:52.530
cell selection style is updated in
case we're reusing a cell from a

00:47:52.530 --> 00:47:56.600
section that already had it set to
selection style none to display now

00:47:56.650 --> 00:47:59.260
a row that should be selectable.

00:47:59.400 --> 00:48:02.260
So we're going to change the
selection style back to blue

00:48:02.610 --> 00:48:04.860
before we modify it by default.

00:48:05.080 --> 00:48:07.930
So that just makes sure that if
we've reused a cell and we had

00:48:08.040 --> 00:48:11.980
previously set its style to none,
we reset it back to blue so

00:48:11.980 --> 00:48:14.160
that the user can now tap on it.

00:48:19.660 --> 00:48:23.450
So now we've got our table
content being displayed,

00:48:23.510 --> 00:48:26.260
but a few of these allow the
user to tap in order to slide

00:48:26.260 --> 00:48:28.000
in another pane of information.

00:48:28.070 --> 00:48:30.960
So in order to support that, again,
we have to implement table view

00:48:30.960 --> 00:48:32.780
accessory type for row at index path.

00:48:34.090 --> 00:48:36.560
So for the type section and
the instruction section,

00:48:36.560 --> 00:48:39.860
which are the two that
the user can tap on,

00:48:39.860 --> 00:48:44.580
we'll return
UITableViewCellAccessoryDisclosureIndic

00:48:44.580 --> 00:48:47.490
ator to display the disclosure
indicator on the right-hand side.

00:48:48.050 --> 00:48:50.450
And for all the rest,
which is just the ingredients ones,

00:48:50.510 --> 00:48:52.800
we'll be returning
UITableViewCellAccessoryNone so

00:48:52.800 --> 00:48:54.360
that we don't have an accessory.

00:48:56.920 --> 00:48:59.110
And now, similar to what we did before,
we're actually going to want

00:48:59.410 --> 00:49:02.460
to perform some action when the
user has tapped on these cells.

00:49:02.590 --> 00:49:06.830
So in order to accomplish that,
we have to implement table

00:49:07.220 --> 00:49:10.300
view didSelectRowAtIndexPath.

00:49:11.300 --> 00:49:15.060
So we're going to find out
what section was selected.

00:49:15.150 --> 00:49:19.000
And we're going to set up a local
variable here for a view controller.

00:49:20.100 --> 00:49:23.100
So if the section that the user
tapped on was the type selection,

00:49:23.130 --> 00:49:26.310
we're going to allocate a new
type selection view controller,

00:49:26.460 --> 00:49:29.940
which is another custom subclass
of UI table view controller that

00:49:29.940 --> 00:49:31.860
we'll be creating in just a minute.

00:49:31.900 --> 00:49:34.290
And that's the thing that's going
to allow the user to tap on the

00:49:34.290 --> 00:49:37.830
particular type of recipe and
choose the one that they want.

00:49:38.020 --> 00:49:40.260
And this is, again,
going to be a group style table view.

00:49:40.380 --> 00:49:43.800
So we'll initialize it with
UI table view style grouped.

00:49:43.910 --> 00:49:48.220
And we'll set the recipe for that to be
the current recipe that we're looking at.

00:49:50.230 --> 00:49:54.890
Next, if it's the instruction section,
which we saw all the way at the bottom,

00:49:55.040 --> 00:49:57.960
then the user, when they tap on this,
will be sliding in a pane of

00:49:57.960 --> 00:50:01.560
information that shows them the
instructions for creating this recipe.

00:50:01.560 --> 00:50:04.390
So this is just an
instructions view controller,

00:50:04.390 --> 00:50:08.950
which was created in the last session,
and we'll initialize that from a nib.

00:50:10.530 --> 00:50:12.990
I'm not going to look too much into
this because there's no table view here.

00:50:13.130 --> 00:50:16.090
So we're just creating
this new view controller.

00:50:16.200 --> 00:50:19.840
And then in both of these cases,
if we've allocated a view controller,

00:50:19.880 --> 00:50:22.770
we're going to push that onto our
navigation controller's view hierarchy

00:50:23.110 --> 00:50:26.320
and again release it since we don't
really need to retain a reference here.

00:50:26.610 --> 00:50:34.370
This way it will just go
away when the user returns.

00:50:39.540 --> 00:50:43.890
So now when we build and run,
we've got this top level table view

00:50:44.040 --> 00:50:46.730
that shows all of our different recipes.

00:50:46.860 --> 00:50:50.400
And when the user taps on one,
now we've got a full table view showing

00:50:50.400 --> 00:50:52.560
all the content that's available.

00:50:52.620 --> 00:50:54.390
Now the other piece
that's still missing here,

00:50:54.480 --> 00:50:56.400
which we saw earlier when
you saw the final version,

00:50:56.590 --> 00:51:01.370
was at the top we had an image along with
the name shown at the top of the table.

00:51:01.610 --> 00:51:05.400
Now we can implement that using
a custom table view header.

00:51:05.540 --> 00:51:08.500
So let's go back to our code
and go back to the top here

00:51:08.570 --> 00:51:10.880
where we had view will appear.

00:51:12.870 --> 00:51:16.800
So there's another method that we
can implement called ViewDidLoad.

00:51:16.800 --> 00:51:18.170
Oops.

00:51:19.590 --> 00:51:21.670
And this is called only once.

00:51:21.890 --> 00:51:22.740
So view will appear.

00:51:22.740 --> 00:51:25.240
We want this to happen every
time the view becomes visible.

00:51:25.310 --> 00:51:29.710
So as the user navigates back and forth,
this will get called every time our

00:51:29.710 --> 00:51:32.490
table view becomes the visible view.

00:51:32.940 --> 00:51:37.050
The viewDidLoad method is only called
once when this view is first allocated.

00:51:37.350 --> 00:51:40.810
And so we only want to do this once,
so we'll implement the creation of

00:51:40.810 --> 00:51:43.420
our table header in viewDidLoad.

00:51:45.820 --> 00:51:49.540
This is actually an important
distinction between -- sorry,

00:51:49.540 --> 00:51:54.250
there's actually an important distinction
between this and Awake from Nib.

00:51:54.260 --> 00:51:56.200
We actually,
if you're using UI view controllers,

00:51:56.200 --> 00:52:00.240
encourage you to use viewDidLoad here
in order to do this configuration

00:52:00.240 --> 00:52:02.010
instead of Awake from Nib.

00:52:03.610 --> 00:52:07.030
So now in order to create that table
header view that we want to create,

00:52:07.140 --> 00:52:09.500
we're going to load it out of a
nib that I've already created.

00:52:09.630 --> 00:52:14.490
So we'll get the main bundle and load
the nib named DetailHeaderView and

00:52:14.490 --> 00:52:16.930
set its owner to ourself.

00:52:17.340 --> 00:52:22.800
Now, if we take a quick look at
that nib in our resources,

00:52:24.840 --> 00:52:28.200
- Oops.

00:52:28.200 --> 00:52:28.740
Oh, hey, great.

00:52:28.750 --> 00:52:30.090
There it is.

00:52:33.780 --> 00:52:36.460
So what you're going to see here
is that we've got just a basic

00:52:36.460 --> 00:52:39.010
view that's being laid out.

00:52:40.600 --> 00:52:45.740
with a single image view and
a textual label next to it.

00:52:46.500 --> 00:52:48.900
So our view has the single
image view here on the left

00:52:49.090 --> 00:52:50.620
and the label on the right.

00:52:50.860 --> 00:52:54.480
Now we've got some
outlets already set up.

00:52:54.720 --> 00:52:59.020
So this name label is assigned
to the file's owner name label

00:52:59.020 --> 00:53:02.280
outlet so that once it's loaded,
we'll have a reference to

00:53:02.290 --> 00:53:03.540
it in our view controller.

00:53:03.780 --> 00:53:06.210
So in the view controller here,
we've got these ID outlets set up

00:53:06.210 --> 00:53:09.680
already that point to the UI view,
which is our table header view.

00:53:09.870 --> 00:53:11.140
That's this.

00:53:11.180 --> 00:53:14.940
The UI button, the photo button,
that's this.

00:53:15.100 --> 00:53:27.900
[Transcript missing]

00:53:31.510 --> 00:53:34.530
So once we've done that,
we can call self.tableview in order

00:53:34.590 --> 00:53:38.860
to get a reference to our UI table
view controllers table view and assign

00:53:38.860 --> 00:53:44.040
our new table header view to the table
view's table header view property.

00:53:44.060 --> 00:53:45.650
This will allow it to
appear directly at the top.

00:53:46.900 --> 00:53:49.170
And we'll also want to set the
table header view's background color

00:53:49.180 --> 00:53:52.000
so that it matches the background
color of the rest of the table view.

00:53:52.000 --> 00:53:55.030
You know, there was that vertical striped
appearance on the background

00:53:55.070 --> 00:53:56.460
of the group style table view.

00:53:56.460 --> 00:53:59.540
So we can ask UIColor for the
group table view background color,

00:53:59.540 --> 00:54:02.700
which is going to give us that
background pattern and assign it to the

00:54:02.950 --> 00:54:05.040
table header view's background color.

00:54:10.470 --> 00:54:12.930
So the last piece that we want to
do is we actually want to configure

00:54:12.930 --> 00:54:15.840
the content that's going to be
displayed in that table header.

00:54:16.090 --> 00:54:18.270
So-- oops.

00:54:19.400 --> 00:54:22.120
We'll add that up here to our view
will appear so that it will happen

00:54:22.120 --> 00:54:24.300
once every time the view appears.

00:54:24.440 --> 00:54:29.060
So we'll add the photo buttons on the
photo button that we just saw here,

00:54:29.110 --> 00:54:30.140
this UI button.

00:54:30.460 --> 00:54:34.210
We'll set its image.

00:54:34.840 --> 00:54:35.800
: Hi, I'm Josh Shaffer.

00:54:35.800 --> 00:54:37.790
I'm the editor of Table Views.

00:54:37.800 --> 00:54:48.750
I'm going to show you how to use
the table view interface to create a

00:54:48.950 --> 00:54:55.720
simple list of information on iPhone.

00:54:56.720 --> 00:54:59.470
So with those changes,
we can now build and run.

00:54:59.470 --> 00:55:03.840
And now, once we tap on the
recipe in our main list,

00:55:03.890 --> 00:55:08.560
we've now got at the top this new
header that scrolls with the content.

00:55:08.800 --> 00:55:29.700
[Transcript missing]

00:55:31.640 --> 00:55:34.540
So the last piece that we want
to add here is the category.

00:55:34.550 --> 00:55:37.800
We want to allow the user to tap
on this and select the category.

00:55:37.820 --> 00:55:40.600
Now, laying this out is similar to
everything we've already seen,

00:55:40.600 --> 00:55:42.090
so I'm not going to set that up again.

00:55:42.240 --> 00:55:43.200
This is already done.

00:55:43.260 --> 00:55:45.920
But as you can see,
as we're tapping on it,

00:55:45.920 --> 00:55:47.600
nothing's happening.

00:55:47.600 --> 00:55:50.510
The cells are remaining selected, which,
as I mentioned before,

00:55:50.510 --> 00:55:52.390
is something we definitely don't want.

00:55:52.960 --> 00:55:55.990
So let's go back and look at our
type selection view controller

00:55:56.010 --> 00:55:59.400
and make this actually add a check
mark on the right hand side when

00:55:59.400 --> 00:56:01.150
the user taps on one of these.

00:56:02.410 --> 00:56:05.570
So we're going to modify our table
view self-heroic index path method

00:56:05.900 --> 00:56:08.670
so that there's already a checkmark
accessory view on the right-hand side

00:56:08.810 --> 00:56:12.920
for the cell that is the selected one.

00:56:15.510 --> 00:56:16.500
Actually, I should mention one thing
before we get to that.

00:56:16.500 --> 00:56:19.340
In the viewWillAppear method,
we've got this cache

00:56:19.370 --> 00:56:21.500
selection index path object.

00:56:21.520 --> 00:56:25.400
So that's just an instance variable
on our type selection view controller.

00:56:25.640 --> 00:56:28.500
And it's just an instance
of NS index path.

00:56:29.460 --> 00:56:33.160
The idea with this is our
particular model is storing the

00:56:33.250 --> 00:56:35.480
type of the recipe as a string.

00:56:35.690 --> 00:56:37.840
But for convenience
and for speed reasons,

00:56:37.940 --> 00:56:41.480
we don't want to have to search
that list of strings every time that

00:56:41.480 --> 00:56:44.500
we're looking up the selected cell.

00:56:45.460 --> 00:56:49.150
So we'll precache the index in
our list of recipe types for the

00:56:49.240 --> 00:56:51.490
type of this particular recipe.

00:56:51.680 --> 00:56:55.950
So we're going to just go over the
list of recipe types and see if

00:56:55.950 --> 00:56:57.500
each one is the type of the recipe
that we're currently looking at.

00:56:57.500 --> 00:56:57.500
So we're going to just go over the
list of recipe types and see if

00:56:57.500 --> 00:56:57.500
each one is the type of the recipe
that we're currently looking at.

00:56:57.500 --> 00:56:57.500
So we're going to just go over the
list of recipe types and see if

00:56:57.500 --> 00:56:57.500
each one is the type of the recipe
that we're currently looking at.

00:56:58.500 --> 00:57:01.660
And if it is,
we'll set the cell selection index path

00:57:01.660 --> 00:57:06.500
to an index path for that row in section
zero since there's only one section.

00:57:07.170 --> 00:57:09.580
And we're just going to maintain
this selection index path as the

00:57:09.580 --> 00:57:13.110
user changes the selection so that
we've always got a quick way to look

00:57:13.110 --> 00:57:15.670
up which one is the selected cell.

00:57:17.890 --> 00:57:19.740
So the modification we have
to make now in order to

00:57:19.740 --> 00:57:23.930
actually make this happen-- oh,
sorry.

00:57:23.940 --> 00:57:26.000
I started on this before,
and then I kind of jumped back.

00:57:26.000 --> 00:57:29.310
So let's get back in sync here.

00:57:29.430 --> 00:57:32.770
When this thing first slides into view,
and there's this new UI table view

00:57:32.790 --> 00:57:36.310
showing the list of available types,
if one has already been selected--

00:57:36.340 --> 00:57:38.950
so if we already have a type for
this recipe-- we want to show

00:57:39.050 --> 00:57:41.070
the checkmark by default there.

00:57:41.190 --> 00:57:43.320
So in our table view
self-arrow-at-index-path method,

00:57:43.400 --> 00:57:46.990
we want to make sure that the
checkmark accessory type is already

00:57:46.990 --> 00:57:52.420
set for the cell that corresponds
to the type of recipe that we have.

00:57:53.300 --> 00:57:55.710
So if we already have this
selection index path that

00:57:55.720 --> 00:57:59.290
we just set up a minute ago,
and if it's equal to the index path

00:57:59.350 --> 00:58:02.100
that the table is asking us for,
then we're going to set that

00:58:02.120 --> 00:58:05.860
cell's accessory type to
UITableViewCellAccessoryCheckmark.

00:58:05.900 --> 00:58:09.300
If not, we'll set the accessory type to
UITableViewCellAccessoryNone in

00:58:09.300 --> 00:58:10.710
case we're reusing cells again.

00:58:10.910 --> 00:58:14.890
We want to make sure to remove the check
mark if we're reusing one that had it.

00:58:15.540 --> 00:58:18.750
This is slightly different from how
we dealt with accessory types before.

00:58:19.020 --> 00:58:22.700
We had before implemented the table view
accessory type for row at index path.

00:58:22.870 --> 00:58:23.870
You can do that here too.

00:58:24.010 --> 00:58:26.420
I'm just doing this to show you that
there's actually another way to do it.

00:58:26.510 --> 00:58:30.210
And it allows you to configure
it here and make sure that you're

00:58:30.420 --> 00:58:34.370
setting it when you're configuring
your cell to be what you want.

00:58:35.900 --> 00:58:38.160
So now that we've got this
set up for the initial case,

00:58:38.160 --> 00:58:41.060
we want to do something when the
user actually taps on the cell.

00:58:41.220 --> 00:58:43.590
So in order to do that,
we have to implement table view

00:58:43.670 --> 00:58:45.270
did select row at index path.

00:58:45.340 --> 00:58:48.910
So we'll check to see if we
already have a selected index path.

00:58:48.910 --> 00:58:52.370
And if we do, we want to remove the
check mark from that.

00:58:52.450 --> 00:58:55.180
Now, this is an example of what I was
saying before where you really don't

00:58:55.180 --> 00:58:57.790
want to just reload data simply
because something has changed.

00:58:57.940 --> 00:59:00.550
It's much quicker here to
just remove the accessory from

00:59:00.890 --> 00:59:02.530
the previously checked cell.

00:59:02.530 --> 00:59:05.340
So if we had this selection
index path before,

00:59:05.480 --> 00:59:08.690
we're going to ask the table
for the cell for row at index

00:59:08.690 --> 00:59:10.580
path selection index path.

00:59:10.640 --> 00:59:13.740
And this will return us the actual
UI table view cell that's being

00:59:13.740 --> 00:59:15.770
displayed or nil if there isn't one.

00:59:18.200 --> 00:59:20.670
So we can then set the check
cells accessory type to

00:59:20.670 --> 00:59:23.460
UITableViewCellAccessoryNone.

00:59:23.520 --> 00:59:27.370
So this avoids having to reload
data just to remove that check mark.

00:59:27.510 --> 00:59:30.790
And then we'll update our cached
selection index path to be the index

00:59:30.900 --> 00:59:33.450
path that the user has just tapped on.

00:59:33.940 --> 00:59:37.580
But now we want to add the check mark
to the row that the user did just tap.

00:59:37.940 --> 00:59:40.990
So in order to do that,
we're going to call self-arrowed

00:59:40.990 --> 00:59:43.630
index path with the index path
that the user tapped on to

00:59:43.630 --> 00:59:45.020
get the cell that they tapped.

00:59:45.210 --> 00:59:51.080
And we'll set that cell's accessory type
to UITableViewCellAccessoryCheckmark.

00:59:51.100 --> 00:59:55.080
Again, avoiding reloading data
just to add this check mark.

00:59:56.130 --> 00:59:59.140
Next, we have to update our model to
reflect that we've made this change.

00:59:59.310 --> 01:00:02.950
So we're going to get the list of
recipe types and get the object

01:00:02.950 --> 01:00:05.870
at the index corresponding to
the row the user has tapped on.

01:00:06.010 --> 01:00:09.740
And this is just going to be the
string representing the recipe type.

01:00:09.880 --> 01:00:12.570
And we'll assign that
to our recipe's type.

01:00:13.230 --> 01:00:15.980
And finally, most important part,
we want to deselect the row

01:00:16.340 --> 01:00:18.410
because row selection is temporary.

01:00:18.540 --> 01:00:23.160
So we'll call table view deselect row
at index path and say animated yes

01:00:23.160 --> 01:00:25.830
in order to fade out that selection.

01:00:26.290 --> 01:00:28.900
So now that we've got all that in place,
when we build and run this,

01:00:28.920 --> 01:00:31.460
we've got our top level view
controller that shows the

01:00:31.460 --> 01:00:32.880
list of all of the recipes.

01:00:32.940 --> 01:00:34.850
We can drill down in,
and now we've got the content

01:00:34.850 --> 01:00:36.360
of this chocolate cake recipe.

01:00:36.360 --> 01:00:40.190
And now we can tap on this category,
which was previously unknown,

01:00:40.390 --> 01:00:41.580
and set it to entree.

01:00:41.580 --> 01:00:45.320
So when we go back, now you can see we've
got it set to entree.

01:00:45.320 --> 01:00:48.290
And as we navigate back and forth,
that check mark is there.

01:00:48.290 --> 01:00:51.670
And as we switch these different,
you can check on different things,

01:00:51.670 --> 01:00:53.290
and the check mark will move.

01:00:56.200 --> 01:00:58.930
So, that's all for that.

01:01:07.480 --> 01:01:09.500
So we've put a lot of
stuff together here today,

01:01:09.530 --> 01:01:11.950
but there's three main points
that you should really try

01:01:11.970 --> 01:01:13.240
and take away from all this.

01:01:13.300 --> 01:01:17.130
First off, if you can, please try to use
UI Table View Controller.

01:01:17.300 --> 01:01:19.580
If you're thinking about rolling
your own or creating your

01:01:19.580 --> 01:01:22.590
own full screen table view,
take a minute, step back,

01:01:22.640 --> 01:01:25.200
and think about whether you can
use UI Table View Controller to

01:01:25.200 --> 01:01:25.940
do it for you.

01:01:25.970 --> 01:01:28.150
It'll reduce the amount
of code you have to write,

01:01:28.150 --> 01:01:31.430
and it'll make sure that the behavior
of your table view is consistent with

01:01:31.430 --> 01:01:33.340
the behavior of other table views.

01:01:33.350 --> 01:01:36.070
Second, always, always reuse cells.

01:01:37.080 --> 01:01:42.060
There may be a few, I hesitate to say,
reasons why you might not want to,

01:01:42.120 --> 01:01:43.580
but think again.

01:01:43.580 --> 01:01:46.240
You probably want to reuse cells.

01:01:46.540 --> 01:01:48.740
And finally, selections are temporary.

01:01:48.800 --> 01:01:51.560
When the user taps on a cell,
that cell should be selected

01:01:51.840 --> 01:01:54.240
and remove that selection.

01:01:56.700 --> 01:01:59.040
So there are a few related
sessions later in the week that

01:01:59.040 --> 01:02:00.400
you should think about coming to.

01:02:00.440 --> 01:02:03.260
The Mastering iPhone View Controllers
will have a lot more information

01:02:03.260 --> 01:02:06.960
about view controllers and how
you can use table view controllers

01:02:06.960 --> 01:02:09.390
within more complex view hierarchies.

01:02:09.740 --> 01:02:12.000
That's on Thursday,
so you should come see that.

01:02:12.110 --> 01:02:14.950
And we have a Mastering iPhone
Table Views session on Friday,

01:02:15.300 --> 01:02:18.070
which will give you even more
information about the more powerful

01:02:18.170 --> 01:02:23.600
features available in UI Table View,
including complex cell editing,

01:02:23.600 --> 01:02:27.570
cell addition, cell deletion,
cell reordering,

01:02:27.710 --> 01:02:33.160
and a variety of other things,
especially cell customization,

01:02:33.160 --> 01:02:36.350
to get some very complicated and
intricate UIs just using UI Table View.

01:02:36.470 --> 01:02:40.980
And we've also got two labs that
are dedicated to UI table views.

01:02:41.060 --> 01:02:44.320
If you have questions about UI table view
or have specific questions about your

01:02:44.380 --> 01:02:47.100
code and how you're trying to use it,
please drop by these labs.

01:02:47.150 --> 01:02:49.840
I'll be there and some of the other
UIKit engineers will be there.

01:02:49.890 --> 01:02:52.380
And we can answer your questions
about UI table view directly.