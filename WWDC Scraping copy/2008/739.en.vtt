WEBVTT

00:00:20.780 --> 00:00:25.630
So this session is obviously all
about Aperture's new image editing

00:00:25.760 --> 00:00:29.600
API and how you can get your image
tools in a user's Aperture workflow

00:00:29.600 --> 00:00:32.500
and right in front of Aperture users.

00:00:33.850 --> 00:00:35.580
So here are the few things
we're going to cover today.

00:00:35.620 --> 00:00:39.680
Obviously, we're going to talk about the
new Aperture 2.1 SDK that has

00:00:39.680 --> 00:00:43.420
everything you need to get started,
walk through how to build a

00:00:43.420 --> 00:00:46.560
new image editing plug-in,
show you some of the features,

00:00:46.560 --> 00:00:49.100
what you can do,
how to get image data and

00:00:49.160 --> 00:00:52.680
metadata out of Aperture,
how to get image data and

00:00:52.680 --> 00:00:56.280
metadata back into Aperture,
and we'll show you some

00:00:56.280 --> 00:00:57.850
sample code as well.

00:00:58.480 --> 00:01:01.840
So first let's talk a little bit about
what Aperture is for those of you

00:01:01.840 --> 00:01:03.370
who aren't familiar with Aperture.

00:01:03.400 --> 00:01:07.390
Aperture is Apple's
end-to-end digital imaging,

00:01:07.390 --> 00:01:08.400
digital workflow tool.

00:01:08.430 --> 00:01:14.480
So it's designed to get images from your
camera all the way through out to output,

00:01:14.590 --> 00:01:19.370
whether that be books, web, prints,
anything.

00:01:19.410 --> 00:01:21.560
And in between we have
a really extensive,

00:01:21.560 --> 00:01:25.400
rich set of organizational tools,
library management,

00:01:25.400 --> 00:01:28.550
all kinds of ways for you to
slice and dice and search,

00:01:28.550 --> 00:01:30.200
sort, filter your images.

00:01:30.400 --> 00:01:33.500
And it's really designed to
simplify the RAW workflow,

00:01:33.660 --> 00:01:37.400
which before Aperture was a
much more complicated process.

00:01:37.400 --> 00:01:39.580
Obviously we work with
all kinds of image types,

00:01:39.580 --> 00:01:41.400
whether it's JPEG or TIFF or Photoshop.

00:01:41.400 --> 00:01:45.890
But, you know,
the goal is to really simplify the

00:01:45.890 --> 00:01:49.020
SLR RAW workflow for our users.

00:01:49.160 --> 00:01:52.290
One of the key things about Aperture
is it's a non-destructive editor.

00:01:52.300 --> 00:01:55.980
This is very important not
just for how Aperture works,

00:01:56.000 --> 00:02:00.050
but it also has ramifications for how
the editing API is going to work as well.

00:02:00.060 --> 00:02:02.540
So what does non-destructive mean?

00:02:02.540 --> 00:02:05.900
It means a user's making all
their changes in real time

00:02:05.900 --> 00:02:08.560
and Aperture's actually making
them on the fly for the user.

00:02:08.560 --> 00:02:11.530
It's not like Photoshop where
we're going to make some changes

00:02:11.530 --> 00:02:13.000
and save them out to a file.

00:02:13.000 --> 00:02:16.770
When the user clicks on an image,
Aperture's actually going to

00:02:16.770 --> 00:02:19.500
read that RAW data and show
it to them on the screen.

00:02:19.500 --> 00:02:24.330
And if they make an exposure adjustment,
Aperture just remembers the instructions,

00:02:24.330 --> 00:02:28.090
"Okay, I'm making an exposure adjustment
next time they bring up the image."

00:02:28.100 --> 00:02:31.900
And that also means you have
multiple different versions of

00:02:31.900 --> 00:02:34.090
one image that's a file on disk.

00:02:34.100 --> 00:02:35.820
So, you know,
if I have this picture up here,

00:02:35.900 --> 00:02:39.100
I can make a black and white version,
a cropped version, a saturated version.

00:02:39.100 --> 00:02:42.650
There's still just one file on disk,
but each of the images in Aperture

00:02:42.700 --> 00:02:47.200
is actually just Aperture replying
some changes in real time.

00:02:47.360 --> 00:02:49.700
And then new for 2.1
with the editing API,

00:02:49.700 --> 00:02:52.500
we actually ship a dodge and burn
plug-in with the application.

00:02:52.500 --> 00:02:57.700
So users can--are already using
plug-ins and get a feel for the

00:02:57.700 --> 00:03:00.580
workflow and things like that.

00:03:01.470 --> 00:03:04.140
So what are some things you
can do with the Edit API?

00:03:04.220 --> 00:03:06.710
So obviously,
I mentioned Aperture has really

00:03:06.720 --> 00:03:09.250
rich metadata features and
library management features.

00:03:09.270 --> 00:03:11.640
Those are available via the API.

00:03:11.640 --> 00:03:15.580
You can get all of the metadata
that Aperture stores for an image.

00:03:15.580 --> 00:03:19.180
You can even send some of that
metadata back into Aperture.

00:03:19.180 --> 00:03:22.570
We give you control over some features,
such as stacking and importing

00:03:22.700 --> 00:03:25.380
images into the database as well.

00:03:25.380 --> 00:03:28.710
And like we got listed up here,
there's really three different plug-in

00:03:28.790 --> 00:03:31.130
types that we had in mind for Aperture.

00:03:31.160 --> 00:03:33.350
Maybe you'll come up with
something new and different.

00:03:33.440 --> 00:03:37.320
But the features that we designed around
were for these three things listed here.

00:03:37.430 --> 00:03:39.190
The first is a RAW decoder.

00:03:39.230 --> 00:03:43.580
Maybe you want to support a camera that
Aperture doesn't currently support.

00:03:43.610 --> 00:03:47.840
Well, the API gives you access to,
here's the RAW file on disk.

00:03:47.880 --> 00:03:48.730
Go ahead and read it.

00:03:48.740 --> 00:03:49.680
Do what you want with it.

00:03:49.830 --> 00:03:52.060
Import your results back into Aperture.

00:03:52.070 --> 00:03:55.600
Or maybe you're a type of imaging
plug-in that can really take advantage

00:03:55.610 --> 00:03:57.540
of the high dynamic range of RAW.

00:03:57.570 --> 00:03:59.630
Go ahead and read that file.

00:03:59.700 --> 00:04:00.880
Import your results back into Aperture.

00:04:00.880 --> 00:04:02.580
aperture.

00:04:02.990 --> 00:04:05.090
The second type we looked at
is what we call the single

00:04:05.090 --> 00:04:07.080
image or one-at-a-time case.

00:04:07.080 --> 00:04:09.780
And this is how the
Dodge and Burn plug-in works.

00:04:09.780 --> 00:04:11.140
The user's going to bring it.

00:04:11.140 --> 00:04:14.260
Maybe they selected several images,
but one at a time they're

00:04:14.260 --> 00:04:17.630
going to bring up the plug-in,
make their changes, save,

00:04:17.630 --> 00:04:18.840
and go to the next image.

00:04:18.840 --> 00:04:24.680
And then the last type we really looked
at is the multi-image or compositing.

00:04:24.680 --> 00:04:26.920
This would be something
like HDR or panoramic,

00:04:26.920 --> 00:04:29.180
or maybe the user's going
to select several images.

00:04:29.860 --> 00:04:32.480
And what they want your plug-in
to do is combine them all into

00:04:32.480 --> 00:04:35.100
one image and get that result
back into the Aperture database.

00:04:35.100 --> 00:04:39.260
And so I mentioned
non-destructive inversions before.

00:04:39.260 --> 00:04:42.300
All of these things are going to work
on what we call editable versions.

00:04:42.300 --> 00:04:44.670
So let's take a look at what those are.

00:04:44.680 --> 00:04:48.240
So we had a couple goals
with the editing API,

00:04:48.240 --> 00:04:51.960
and one of them is really to provide
a simple API that gave you guys

00:04:51.960 --> 00:04:57.540
as much freedom as possible to do
anything you wanted with these images.

00:04:57.540 --> 00:04:59.240
Not a lot of constraints on UI.

00:04:59.850 --> 00:05:01.380
Not a lot of constraints on performance.

00:05:01.380 --> 00:05:05.920
And so what we decided to do is extend a
workflow that already exists in Aperture,

00:05:05.920 --> 00:05:07.960
and that was for our external editors.

00:05:07.960 --> 00:05:12.520
For if users want to
open a file in Photoshop,

00:05:12.520 --> 00:05:16.460
for example,
we extended that to the editing API.

00:05:16.460 --> 00:05:19.590
So we have editable versions,
and when your plug-in

00:05:19.640 --> 00:05:23.240
wants an editable version,
Aperture actually takes the way

00:05:23.290 --> 00:05:27.100
that image looks on screen and
writes it out to a file as is,

00:05:27.100 --> 00:05:29.730
and then we give that
file to your plug-in.

00:05:29.780 --> 00:05:31.280
So we're going to do a
little bit of editing here.

00:05:31.280 --> 00:05:33.060
So let's take a look at the file
that we're going to be editing.

00:05:33.060 --> 00:05:35.310
So we're going to do a
little bit of editing here.

00:05:37.320 --> 00:05:39.380
So,
to talk a little bit about what we just

00:05:39.380 --> 00:05:43.960
showed and some of the things that we
just discussed and how Aperture works,

00:05:43.960 --> 00:05:46.790
I'm going to bring up Joe Howard and
he's going to give us a quick demo.

00:05:46.840 --> 00:05:49.000
So let's switch to the demo.

00:05:49.550 --> 00:05:51.270
So at first here,
we're just going to show a little

00:05:51.270 --> 00:05:54.500
bit of overview of what Aperture
is in case you haven't seen it.

00:05:54.500 --> 00:05:57.300
And you see on the left here,
we have a column that basically has

00:05:57.300 --> 00:05:59.070
all of the project organizations.

00:05:59.140 --> 00:06:01.690
So you have your projects,
your different album types,

00:06:01.720 --> 00:06:05.600
if you have web galleries or you
want to show different light tables,

00:06:05.600 --> 00:06:06.670
all your different images.

00:06:06.960 --> 00:06:08.800
However the user wants to
organize them are there.

00:06:08.970 --> 00:06:14.550
Then you can have all of the images
in that album or project are going

00:06:14.550 --> 00:06:17.190
to be available in the GridView area.

00:06:17.330 --> 00:06:20.980
The selected version will
show up in the viewer.

00:06:21.180 --> 00:06:22.590
Not very complex there.

00:06:22.750 --> 00:06:25.580
But you can also see that there will
be some fancier features inside the

00:06:25.580 --> 00:06:29.400
GridView that we'll talk about later,
like stacks, right?

00:06:29.620 --> 00:06:33.440
Where you can have the user can actually
associate all the different images

00:06:33.450 --> 00:06:38.370
that say they were closely related
in time like these or very similar.

00:06:38.400 --> 00:06:39.900
And they can stack them together.

00:06:39.900 --> 00:06:41.700
And maybe you had all
sorts of different shots.

00:06:41.700 --> 00:06:43.760
You want to figure out which
-- the user wants to figure out

00:06:43.760 --> 00:06:44.790
which one they like the best.

00:06:44.800 --> 00:06:46.840
And they can just say, "Oh,
I really like, you know,

00:06:46.840 --> 00:06:49.240
this one because the guy is
making a funny face." Move that

00:06:49.240 --> 00:06:50.240
to the top of the stack.

00:06:50.480 --> 00:06:51.200
Close it.

00:06:51.200 --> 00:06:54.130
And then all the rest of those images,
they never have to see or deal

00:06:54.130 --> 00:06:55.700
with again but are still there.

00:06:55.700 --> 00:06:59.500
So that is kind of a
quick overview with that.

00:06:59.500 --> 00:07:04.430
Other ways you can find information in
the UI is the tab here for metadata.

00:07:04.520 --> 00:07:06.600
For the selected version,
it will show you -- here is all

00:07:06.730 --> 00:07:10.350
of the metadata that the user
has access to on the tabs at the

00:07:10.350 --> 00:07:12.000
bottom is where everything is at.

00:07:12.000 --> 00:07:14.500
And then another tab for the adjustment.

00:07:14.500 --> 00:07:20.160
So if they want to make large
changes across the whole image,

00:07:20.160 --> 00:07:24.970
so say change the exposure or contrast,
make a black and white version,

00:07:25.230 --> 00:07:27.380
anything like that,
they can do that without

00:07:27.650 --> 00:07:30.310
affecting the original raw file.

00:07:30.640 --> 00:07:35.600
Any time, the user can also go and say,
"Oh, I want to duplicate this," and say,

00:07:35.600 --> 00:07:36.960
"I want to try and --
maybe dork around with,

00:07:36.960 --> 00:07:41.180
you know, little highlights and shadows."
Or really make any sort of changes that

00:07:41.180 --> 00:07:45.100
they want and not have to worry about,
"Oh, well, did I ruin the original

00:07:45.100 --> 00:07:48.600
image?" It's all right there.

00:07:48.660 --> 00:07:51.610
So another thing we can show
is rather than just doing large

00:07:51.610 --> 00:07:54.450
adjustments across the whole image,
we now have a plug-in with

00:07:54.450 --> 00:07:57.600
Aperture 2.1 called Dodge and Burn.

00:07:57.600 --> 00:08:00.100
And this allows us to do
selective adjustments.

00:08:00.240 --> 00:08:04.330
So you can go to the Images menu,
Edit With, Dodge and Burn.

00:08:06.360 --> 00:08:08.810
So in this window,
you can very easily select

00:08:08.910 --> 00:08:11.640
one of the tools here,
dodge, burn, saturate, blur,

00:08:11.640 --> 00:08:12.140
anything there.

00:08:12.140 --> 00:08:14.480
Set the size,
how much strength you want to apply.

00:08:14.490 --> 00:08:16.280
I'm just going to make some big
changes here so you can see that it's

00:08:16.280 --> 00:08:18.410
actually making a difference there.

00:08:18.460 --> 00:08:20.480
And then you can go,
maybe I want to erase,

00:08:20.480 --> 00:08:22.030
did a little bit too much there.

00:08:22.290 --> 00:08:24.900
I want to feather and make--
ease in the edges a little bit.

00:08:24.940 --> 00:08:27.480
Whatever you want to do to really--

00:08:27.660 --> 00:08:30.100
Make selective adjustments
to just part of the image,

00:08:30.100 --> 00:08:32.640
and then the user can very
easily go in and save.

00:08:32.900 --> 00:08:35.040
And those changes go
right back into Aperture,

00:08:35.040 --> 00:08:37.630
and the user has now made those changes.

00:08:37.640 --> 00:08:40.820
So that's our first demo.

00:08:40.880 --> 00:08:43.270
Let's switch back to slides.

00:08:44.920 --> 00:08:46.260
All right,
so that was just a quick look at

00:08:46.260 --> 00:08:49.690
what Aperture does and a little bit
about versions and editable versions.

00:08:49.700 --> 00:08:52.550
So now let's talk about
the SDK specifically.

00:08:52.700 --> 00:08:56.200
It's available on developer.apple.com,
who I assume, if you're here,

00:08:56.200 --> 00:08:57.690
you're already members.

00:08:57.700 --> 00:09:00.700
You can just grab it there by
clicking on "Apple Applications"

00:09:00.700 --> 00:09:04.840
and clicking on "Apple Applications
Downloads." That should be one of the

00:09:04.840 --> 00:09:06.590
first few things in the list there.

00:09:06.700 --> 00:09:08.700
You have to use the SDK to get started.

00:09:08.710 --> 00:09:11.700
It includes everything you need,
all the headers, docs.

00:09:11.700 --> 00:09:17.050
We have project templates for Xcode,
so when you go "New Project," one of the

00:09:17.060 --> 00:09:20.700
options under "Standard Apple Plug-ins"
is a new "Aperture Edit" plug-in,

00:09:20.820 --> 00:09:23.700
which has all the basic code
you need to get started,

00:09:23.700 --> 00:09:27.120
includes all the headers,
and is set up to actually build and put

00:09:27.120 --> 00:09:29.600
your plug-in in the right location even.

00:09:29.720 --> 00:09:34.690
So we also--you know,
the API itself is in Objective-C,

00:09:34.700 --> 00:09:38.500
so you have to make your calls, you know,
using Objective-C, but we included both

00:09:38.500 --> 00:09:39.580
Cocoa and Carbon samples.

00:09:39.700 --> 00:09:41.700
You know,
some of you are Carbon developers,

00:09:41.700 --> 00:09:42.600
and you want to just
duplicate that sample data,

00:09:42.600 --> 00:09:44.550
or if Carbon's just what
you're familiar with,

00:09:44.600 --> 00:09:47.520
we included a sample there so you
can take a look and get started.

00:09:47.600 --> 00:09:50.970
Just one thing to keep in mind is,
you know, Aperture's already--Apple has

00:09:50.970 --> 00:09:53.600
already stated that they're moving
towards 64-bit and things like that.

00:09:53.600 --> 00:09:55.600
Just keep that in mind when
you're building your plug-ins,

00:09:55.600 --> 00:09:57.600
that that's the direction
the company's taking.

00:09:57.650 --> 00:09:59.600
We're not making any
specific forward-looking

00:09:59.600 --> 00:10:01.590
announcements about Aperture.

00:10:01.670 --> 00:10:03.560
Just that's Apple's stance right now.

00:10:03.630 --> 00:10:08.640
So again, built-in plug-in that we just
took a look at and attached to

00:10:08.670 --> 00:10:11.600
this session on the attachment
is the "Apple Appliance" plug-in.

00:10:11.600 --> 00:10:13.600
And attached to this session
on the attendee website,

00:10:13.600 --> 00:10:16.790
there's also some sample code
above and beyond the SDK that

00:10:17.200 --> 00:10:19.380
we'll take a look at later.

00:10:21.360 --> 00:10:25.780
So there's one thing to mention about
the actual plug-in architecture we use.

00:10:25.900 --> 00:10:31.160
How does Aperture discover plug-ins,
manage its plug-ins?

00:10:31.160 --> 00:10:33.610
We use an architecture called ProPlug.

00:10:33.640 --> 00:10:36.220
Now, I only mention this-- you really
don't need to worry about it.

00:10:36.220 --> 00:10:40.500
I only mention it because it does
show up in the API a couple times.

00:10:40.500 --> 00:10:43.380
The first place is when your
plug-in actually gets initialized,

00:10:43.430 --> 00:10:48.160
there's a little brokering about how
you actually get to talk to Aperture.

00:10:48.160 --> 00:10:50.720
The code to do that is actually
part of the template and

00:10:50.720 --> 00:10:53.140
part of all the sample code,
so you really don't ever

00:10:53.140 --> 00:10:54.190
have to worry about it.

00:10:54.230 --> 00:10:57.060
But if you see it,
now you know what you're looking at.

00:10:57.320 --> 00:11:02.170
And then also, in your Info.plist file,
there's also some keys that say

00:11:02.170 --> 00:11:05.370
ProPlugin and that help Aperture define,
you know, find your plug-in,

00:11:05.470 --> 00:11:08.790
figure out what kind of plug-in you are,
what protocols you support.

00:11:08.900 --> 00:11:10.250
So you'll see ProPlug there.

00:11:10.400 --> 00:11:14.090
Again,
the Info.plist file is fully documented,

00:11:14.100 --> 00:11:16.750
and it's almost all
filled in for you already.

00:11:16.850 --> 00:11:19.200
So again, you don't really have
to worry about it much.

00:11:19.290 --> 00:11:22.030
Just wanted to make sure I mentioned it.

00:11:23.080 --> 00:11:26.000
So the two critical protocols,
the two things you really do

00:11:26.000 --> 00:11:27.500
care about are listed here.

00:11:27.500 --> 00:11:29.780
The first is called
Aperture Edit Manager.

00:11:29.780 --> 00:11:32.880
And this is, when you get an object
that obeys this protocol,

00:11:32.910 --> 00:11:33.920
this is Aperture.

00:11:33.920 --> 00:11:36.970
When you make these calls,
you're actually asking Aperture

00:11:36.980 --> 00:11:40.000
for information or asking
Aperture to do things for you.

00:11:40.200 --> 00:11:43.280
This is how you're going to
find out which images the user

00:11:43.280 --> 00:11:45.060
had selected in their browser.

00:11:45.060 --> 00:11:47.190
This is how you're
going to get thumbnails.

00:11:47.200 --> 00:11:48.800
This is how you're going
to get the metadata.

00:11:48.800 --> 00:11:50.710
This is how you're
going to tell Aperture,

00:11:50.780 --> 00:11:52.880
I want an editable version of this image.

00:11:52.880 --> 00:11:56.620
And this is how you're going to pass
metadata back into Aperture's database.

00:11:56.620 --> 00:12:00.050
The second protocol listed here
is called Aperture Edit Plug-In.

00:12:00.050 --> 00:12:02.340
And this is what you're
going to implement.

00:12:02.340 --> 00:12:03.900
It's a very simple protocol.

00:12:03.910 --> 00:12:06.260
There's only two required methods on it.

00:12:06.420 --> 00:12:10.180
If you're going to do imports
into Aperture's database,

00:12:10.180 --> 00:12:10.180
you're going to need to
have a very simple protocol.

00:12:10.180 --> 00:12:11.680
If you're going to do imports
into Aperture's database,

00:12:11.680 --> 00:12:13.470
those are asynchronous,
so there's actually two callbacks you'll

00:12:13.590 --> 00:12:14.550
need to implement in that case as well.

00:12:14.720 --> 00:12:17.460
But like I said,
it's a very simple protocol,

00:12:17.500 --> 00:12:20.790
and we'll actually go over
both those methods here.

00:12:21.480 --> 00:12:26.800
So what does the actual flow of
API calls in an edit session look like?

00:12:26.900 --> 00:12:27.540
This is it.

00:12:27.540 --> 00:12:30.000
Aperture's going to tell you
to start the edit session,

00:12:30.000 --> 00:12:32.400
do some stuff, and then you're done.

00:12:32.620 --> 00:12:36.540
So obviously the devil's in the
details in what that do stuff step is,

00:12:36.540 --> 00:12:41.390
so let's walk through what some of
the specific API calls are here.

00:12:42.000 --> 00:12:44.530
So after your plug-in gets initialized,
the very first call you're

00:12:44.530 --> 00:12:47.540
going to get from Aperture
is called Begin Edit Session.

00:12:47.610 --> 00:12:49.940
And this is basically the message
to you to open the floodgates.

00:12:50.050 --> 00:12:53.800
You can start making any calls
you want in the API here.

00:12:53.800 --> 00:12:56.540
You shouldn't be making
any API calls before this,

00:12:56.600 --> 00:12:59.860
but maybe right here you
can start building your UI,

00:12:59.860 --> 00:13:02.420
start getting metadata,
start getting thumbnails,

00:13:02.420 --> 00:13:04.720
start doing anything you want.

00:13:04.840 --> 00:13:07.870
The second call you're going
to get is called Edit Window.

00:13:07.950 --> 00:13:11.180
And this is the key to your UI.

00:13:11.260 --> 00:13:14.400
All you have to do is return
an NSWindow from this method,

00:13:14.650 --> 00:13:16.100
and that's it.

00:13:16.100 --> 00:13:17.100
It can't be nil.

00:13:17.100 --> 00:13:20.650
You do have to return a valid window,
and that window should

00:13:20.690 --> 00:13:22.000
have your whole UI in it.

00:13:22.000 --> 00:13:25.960
We don't care what it looks like,
how it's constructed, you know,

00:13:26.030 --> 00:13:27.400
what the UI actually is.

00:13:27.620 --> 00:13:30.600
You just return a valid NSWindow.

00:13:30.600 --> 00:13:34.970
Aperture will put it up on screen
and run it modally for you,

00:13:35.160 --> 00:13:39.390
which is another thing to keep
in mind is that your plug-in,

00:13:39.470 --> 00:13:43.700
your UI events and everything you're
doing will be running in a modal state.

00:13:43.700 --> 00:13:47.620
So if you do a lot of run loop
work or if you do timer work,

00:13:47.620 --> 00:13:50.660
just keep in mind that those
things need to work when the

00:13:50.660 --> 00:13:53.130
application is running modally.

00:13:53.860 --> 00:13:54.970
and then we have Do Stuff.

00:13:55.160 --> 00:13:57.870
So this is going to be a
little less structured.

00:13:58.130 --> 00:14:01.200
There's a bunch of different
API calls you may want to make here.

00:14:01.240 --> 00:14:04.720
But the key to this step is this is where
you're doing your magic to the images.

00:14:04.840 --> 00:14:10.260
Whatever your special imaging sauce is,
that's what you're going to do here,

00:14:10.320 --> 00:14:13.300
mixed in with some API calls.

00:14:13.490 --> 00:14:15.400
You know,
I've listed some of the features here.

00:14:15.400 --> 00:14:17.530
We're actually about to walk
through some of the specific

00:14:17.590 --> 00:14:21.380
API calls that are most critical.

00:14:22.230 --> 00:14:26.500
So, these first three methods
I listed here are methods

00:14:26.500 --> 00:14:29.730
that you can call on Aperture,
and they're your way to

00:14:29.730 --> 00:14:31.740
find out what does the edit
session look like right now?

00:14:31.740 --> 00:14:32.620
What's going on?

00:14:32.640 --> 00:14:36.020
The first one listed here is
probably the most important,

00:14:36.040 --> 00:14:39.420
and it's probably the very first
call you're going to make once

00:14:39.440 --> 00:14:41.620
Aperture calls begin edit session.

00:14:41.620 --> 00:14:44.650
It's called SelectedVersionIDs,
and what it is,

00:14:44.650 --> 00:14:48.090
it returns an array of unique
ID strings that represent the

00:14:48.160 --> 00:14:50.210
images the user has selected.

00:14:50.620 --> 00:14:53.640
If they have,
if they selected one image and said,

00:14:53.640 --> 00:14:55.770
run your plug-in,
there's going to be an array

00:14:55.770 --> 00:14:56.720
with one item in it here.

00:14:56.720 --> 00:14:58.870
If they selected 10,
you're going to obviously

00:14:58.870 --> 00:15:00.180
get an array of 10 items.

00:15:00.220 --> 00:15:02.970
It doesn't matter,
it's not important what's

00:15:02.970 --> 00:15:04.820
in these unique ID strings.

00:15:04.820 --> 00:15:06.990
What's important is that
each one represents an image

00:15:06.990 --> 00:15:08.150
in the user's database.

00:15:08.160 --> 00:15:11.920
And these are what you're going to
be passing around to all the other

00:15:11.930 --> 00:15:14.490
API calls when you want something done.

00:15:14.500 --> 00:15:17.270
So, again,
SelectedVersionIDs is probably the

00:15:17.280 --> 00:15:19.260
first thing you're going to do.

00:15:20.340 --> 00:15:23.220
EditableVersionIDs is every time
that you get an editable version,

00:15:23.220 --> 00:15:26.180
the unique ID for that will
show up in this method,

00:15:26.180 --> 00:15:27.640
or in the return from this method.

00:15:27.640 --> 00:15:30.580
And every time you import a
new version into the database,

00:15:30.580 --> 00:15:33.660
it'll show up in this third method,
ImportedVersionIDs.

00:15:36.800 --> 00:15:39.270
So after you figure out
what the user has selected,

00:15:39.370 --> 00:15:41.870
you're probably going to
want to start getting some

00:15:41.870 --> 00:15:45.520
information about those images,
either thumbnails to display in your

00:15:45.790 --> 00:15:50.090
UI or maybe metadata about those images
so you can make some decisions based on

00:15:50.090 --> 00:15:52.830
metadata or put it in your UI as well.

00:15:52.840 --> 00:15:55.750
So the first one with kind
of a long name is Properties

00:15:55.760 --> 00:15:57.300
Without Thumbnail for Version.

00:15:57.410 --> 00:16:01.420
And you pass in one of these version
strings that you got in the previous

00:16:01.420 --> 00:16:04.480
slide or from the previous calls.

00:16:04.480 --> 00:16:07.240
And then the second one
is Thumbnail for Version.

00:16:07.240 --> 00:16:09.600
We give the option to get three
different sizes of thumbnails

00:16:09.660 --> 00:16:11.200
depending on what you want to do.

00:16:11.330 --> 00:16:14.460
What you'll see from a lot of plug-ins,
which is a great performance tip,

00:16:14.460 --> 00:16:19.800
is instead of operating on these
gigantic images right away,

00:16:20.170 --> 00:16:23.000
maybe you want to get one of the
larger thumbnails and actually perform

00:16:23.000 --> 00:16:25.100
your image operations on that first.

00:16:25.100 --> 00:16:28.460
If the user doesn't need or if your
plug-in doesn't need one-to-one

00:16:28.460 --> 00:16:32.320
pixel-for-pixel views of an image,
this is a great way just to get up

00:16:32.320 --> 00:16:37.210
and running quickly and have your
image operations go really quickly.

00:16:37.230 --> 00:16:41.700
One thing to be careful of is
these thumbnails are auto-released.

00:16:41.740 --> 00:16:44.470
So if you're doing a really tight loop,
maybe you're building your UI,

00:16:44.470 --> 00:16:47.960
maybe you're examining images,
be careful about getting a lot of

00:16:47.960 --> 00:16:51.070
these thumbnails in a really tight
loop and not releasing them or not

00:16:51.070 --> 00:16:55.930
auto-releasing them because they will
start to suck up memory pretty quick.

00:16:57.850 --> 00:17:01.390
And then we get to probably the two
most important calls in the entire API,

00:17:01.390 --> 00:17:06.120
because this is how you're going
to get editable versions of images.

00:17:06.170 --> 00:17:09.270
So like Joe had the picture
of the soccer player.

00:17:09.520 --> 00:17:10.620
He went to Dodge and Burn.

00:17:10.870 --> 00:17:14.010
What Dodge and Burn did is
get the selected version IDs,

00:17:14.360 --> 00:17:16.960
pick one, and say,
I want an editable version of this.

00:17:17.110 --> 00:17:20.310
What Aperture then does is take whatever
the current appearance of that is,

00:17:20.550 --> 00:17:27.180
writes it to disk as a TIFF,
and then the plug-in reads it to--

00:17:27.200 --> 00:17:31.450
so you can do dodging and burning
and painting and stuff on it.

00:17:31.520 --> 00:17:34.210
Once you make this editable version,
you're actually going to get all

00:17:34.210 --> 00:17:37.960
the properties for that new version
in the return from this method.

00:17:37.980 --> 00:17:44.260
And then you would take the unique
ID and use the second method,

00:17:44.260 --> 00:17:48.060
path of editable file for version.

00:17:48.070 --> 00:17:51.140
And that's the only path that your
plug-in should ever be writing to,

00:17:51.140 --> 00:17:54.300
is what you get back from
the second method here.

00:17:54.330 --> 00:17:58.230
There's a fail-safe built into Aperture
that if you pass in a string or a

00:17:58.340 --> 00:18:03.740
unique ID that's not actually editable,
that Aperture thinks you can't write to,

00:18:03.760 --> 00:18:04.620
you'll get nil back.

00:18:04.620 --> 00:18:06.820
It won't pass you back anything here.

00:18:06.880 --> 00:18:12.180
So make sure you're calling this method,
you're getting a valid path back,

00:18:12.180 --> 00:18:17.670
and that's the only file you should ever
be writing your image changes back to.

00:18:18.810 --> 00:18:21.600
So that's the basics of, you know,
the most simple flow.

00:18:21.600 --> 00:18:25.200
The last thing you'll do is you'll
tell Aperture when your plug-in's done.

00:18:25.200 --> 00:18:28.200
This is basically telling Aperture,
"I'm ready to be released.

00:18:28.200 --> 00:18:29.160
I'm ready to be cleaned up.

00:18:29.230 --> 00:18:33.200
My plug-in's ready to go
away." One caveat here,

00:18:33.200 --> 00:18:35.420
make sure you don't have anything
scheduled on a run loop that will

00:18:35.420 --> 00:18:37.160
call your plug-in back later.

00:18:37.380 --> 00:18:40.820
Make sure you don't have anything
running in separate threads at

00:18:40.820 --> 00:18:43.070
this point that'll call back later.

00:18:43.110 --> 00:18:45.600
As soon as you call this,
Aperture will release or

00:18:45.630 --> 00:18:50.050
auto-release your plugin,
and you'll get deallocated.

00:18:50.950 --> 00:18:52.010
So that's the basics.

00:18:52.030 --> 00:18:53.500
I'm going to have Joe come back up.

00:18:53.540 --> 00:18:57.770
He's actually going to show us a
little bit about getting started

00:18:57.920 --> 00:19:00.550
and show us some sample code.

00:19:00.760 --> 00:19:03.710
All right, so we're in Xcode here,
and I want to start just

00:19:04.050 --> 00:19:06.270
a brand new edit plug-in.

00:19:06.420 --> 00:19:10.040
So we have a project template
in the standard Apple plug-ins

00:19:10.040 --> 00:19:11.540
for Aperture Edit plug-in.

00:19:11.620 --> 00:19:15.800
And with this,
you can very easily just create

00:19:15.800 --> 00:19:18.120
Oops.

00:19:18.200 --> 00:19:21.360
A new project that has a lot
of the basics and the structure

00:19:21.390 --> 00:19:23.400
already filled in for you.

00:19:23.400 --> 00:19:25.390
So I just wanted to show you a
couple things in this project

00:19:25.450 --> 00:19:27.420
that is already provided.

00:19:27.540 --> 00:19:28.920
First thing is the InfoP-List.

00:19:29.030 --> 00:19:32.530
There's a little bit of setup that
you actually want to do here for any

00:19:32.540 --> 00:19:33.880
plug-in that you're going to create.

00:19:34.010 --> 00:19:36.590
There's-- generally for
any plug-in or any bundle,

00:19:36.600 --> 00:19:38.030
there's some information
you need to provide,

00:19:38.040 --> 00:19:39.850
principal class, that kind of thing.

00:19:39.940 --> 00:19:41.960
But ProPlug,
this is one of the places where

00:19:41.960 --> 00:19:46.680
you'll see that in order to determine,
you know, what is the actual main plug-in

00:19:46.680 --> 00:19:49.940
class here that the ProPlug
interface needs to talk to.

00:19:50.080 --> 00:19:52.400
So this is just automatically filled
in with the name of the project.

00:19:52.480 --> 00:19:54.040
You can rename that,
change it to something

00:19:54.040 --> 00:19:55.200
else if you want there,
too.

00:19:55.280 --> 00:19:56.890
A lot of the other things,
maybe you don't really

00:19:56.890 --> 00:19:58.040
want to change the group.

00:19:58.060 --> 00:19:59.300
In fact, you're not supposed to.

00:19:59.460 --> 00:20:02.040
But you do need to provide
your own unique identifier

00:20:02.350 --> 00:20:03.970
for your particular plug-in.

00:20:04.050 --> 00:20:08.270
So all you really have to do
here is switch the terminal.

00:20:08.650 --> 00:20:10.890
and type uuidgen.

00:20:10.970 --> 00:20:13.420
They return, and this gives you a brand
new unique identifier.

00:20:13.580 --> 00:20:16.240
You can just copy and paste
this into your Info.plist,

00:20:16.290 --> 00:20:20.080
and then Aperture can then refer
to your plug-in across relaunches

00:20:20.080 --> 00:20:24.080
and various things that it needs to
do to keep track of your plug-in.

00:20:25.320 --> 00:20:28.300
The other thing that we'll
show you with this code is,

00:20:28.300 --> 00:20:30.650
in the test plugin,
I just want to show you

00:20:30.650 --> 00:20:32.080
one little thing here.

00:20:32.220 --> 00:20:34.500
And that is the init with API manager.

00:20:34.630 --> 00:20:38.440
This is the designated initializer
for a pro plug plugin class.

00:20:38.640 --> 00:20:42.460
And really, there's not a whole lot you
really need to worry about here.

00:20:42.460 --> 00:20:46.200
All we're really doing is getting the
API for the Apture EditManager protocol,

00:20:46.370 --> 00:20:50.830
and then we get the EditManager object
and we store that in instance variable.

00:20:50.970 --> 00:20:54.240
This is our communication with Apture,
the application.

00:20:54.240 --> 00:20:56.260
So anything we need to do,
we can get a hold of

00:20:56.260 --> 00:20:57.740
that through this call.

00:20:57.740 --> 00:21:00.740
And then we really don't need to
worry about pro plug ever again.

00:21:00.800 --> 00:21:03.340
So that's already provided for you.

00:21:05.900 --> 00:21:09.140
Let's see, just a second.

00:21:09.150 --> 00:21:13.000
Now, I just want to show you the
sample plugin that we've created.

00:21:13.170 --> 00:21:14.650
It's called Borders and Titles.

00:21:14.660 --> 00:21:17.590
And there's just some images
here that just really want

00:21:17.680 --> 00:21:19.790
to be-- have a new title on.

00:21:19.870 --> 00:21:21.480
So what we can see here
is we have this cat.

00:21:21.500 --> 00:21:23.220
And it's just a great image here.

00:21:23.220 --> 00:21:26.720
And we can very easily go in and
say edit with Borders and Titles.

00:21:26.720 --> 00:21:30.000
This is where your plugin
will show up inside the UI.

00:21:30.110 --> 00:21:32.020
And from here,
we can do various things like

00:21:32.120 --> 00:21:34.800
change the border size and color,
add any sort of text

00:21:34.800 --> 00:21:36.780
attributes that we want.

00:21:36.780 --> 00:21:41.450
So we can very easily just say, OK,
I want to have a border, make it-- oh,

00:21:41.460 --> 00:21:44.540
let's make it a little more obvious here.

00:21:44.540 --> 00:21:46.840
And we can pick any color from the image.

00:21:46.840 --> 00:21:48.320
We can do anything we want there.

00:21:48.320 --> 00:21:51.580
At this point, I can also add any text.

00:21:51.580 --> 00:21:52.820
Thank you.

00:21:52.820 --> 00:21:56.060
Ah, pink's fine.

00:21:56.060 --> 00:21:56.860
That keeps resetting.

00:21:56.860 --> 00:21:58.220
Anyways.

00:21:58.220 --> 00:22:00.290
And we can just do--

00:22:05.510 --> 00:22:08.160
All right,
and we can very easily reposition,

00:22:08.160 --> 00:22:08.850
change the font.

00:22:08.900 --> 00:22:11.530
These are attributed strings,
so we can do anything to

00:22:11.530 --> 00:22:15.690
these texts that we want to,
add shadows, change the size,

00:22:15.700 --> 00:22:16.700
use any custom fonts.

00:22:16.790 --> 00:22:19.440
Anything we want to do,
we can very easily do to this image.

00:22:19.440 --> 00:22:23.140
At this point now,
the user's made their changes,

00:22:23.140 --> 00:22:24.760
and they're ready to commit them.

00:22:24.800 --> 00:22:26.900
So all they have to do then
is click the Done button.

00:22:26.900 --> 00:22:28.400
The sheet comes down.

00:22:28.400 --> 00:22:30.770
We're making an editable
version of the original file.

00:22:30.900 --> 00:22:36.040
And then you can see the original is
stacked with the original version,

00:22:36.040 --> 00:22:37.890
and the changes are made.

00:22:37.900 --> 00:22:40.120
There's one other really
cool thing that we have,

00:22:40.120 --> 00:22:42.250
too,
to integrate with your plug-ins is that

00:22:42.320 --> 00:22:45.380
you can actually go into the commands,
customize here.

00:22:45.570 --> 00:22:48.740
This is just a feature of Aperture,
but we also include

00:22:48.740 --> 00:22:50.400
your plug-ins in here.

00:22:50.400 --> 00:22:54.840
So you can very easily assign your
own keystroke to-- The user can

00:22:54.840 --> 00:22:59.190
choose whatever keystroke that they
want to-- want to for your plugin.

00:23:00.500 --> 00:23:02.360
Save that.

00:23:02.430 --> 00:23:06.060
And now I want to show you
the code for this plug-in.

00:23:10.440 --> 00:23:14.220
So we're inside here,
and back at the API Manager call,

00:23:14.330 --> 00:23:16.880
earn it with API Manager,
it's pretty much exactly the same.

00:23:16.900 --> 00:23:19.100
So again,
you don't have to worry about that.

00:23:19.100 --> 00:23:22.780
The next call that's going
to come is when Aperture asks

00:23:22.830 --> 00:23:24.880
for your begin edit session.

00:23:24.970 --> 00:23:28.120
And really, this is your first chance to
communicate with Aperture and

00:23:28.130 --> 00:23:29.290
get any sort of information.

00:23:29.340 --> 00:23:30.300
So this is the first chance.

00:23:30.300 --> 00:23:33.970
First thing we need to do is
get a hold of the selected ID,

00:23:34.150 --> 00:23:35.150
selected version ID.

00:23:35.330 --> 00:23:39.300
So we grab the selected version IDs,
and that's an array.

00:23:39.320 --> 00:23:42.800
I'm only interested in this plug-in
with the primary selected version.

00:23:42.820 --> 00:23:45.320
So I grab the first one and
hold onto that one for later

00:23:45.320 --> 00:23:46.800
whenever I want to use it.

00:23:46.800 --> 00:23:49.790
The next thing I want to do is
actually get a thumbnail so that I can

00:23:49.860 --> 00:23:51.760
display that inside my user interface.

00:23:51.860 --> 00:23:54.350
So I basically ask for
the thumbnail for version,

00:23:54.350 --> 00:23:56.240
and I just want the thumbnail size.

00:23:56.330 --> 00:23:59.800
I don't need a little tiny one that
I can use in a grid view or anything.

00:23:59.800 --> 00:24:02.800
I just want the little one,
or the thumbnail.

00:24:02.800 --> 00:24:05.300
At this point, I also need to get one
more bit of information.

00:24:05.300 --> 00:24:08.290
And that is,
what is the full size of the image?

00:24:08.460 --> 00:24:13.370
Because since I'm operating on a smaller
version of that as the thumbnail,

00:24:13.380 --> 00:24:15.350
I need to scale whatever
changes I'm going to do on

00:24:15.630 --> 00:24:19.690
my thumbnail for my preview,
such that when the changes

00:24:19.690 --> 00:24:22.260
are actually applied,
it will look correct.

00:24:22.300 --> 00:24:25.300
So I ask for the properties
without thumbnail for version,

00:24:25.300 --> 00:24:28.300
and I get a dictionary of all the
different properties I can get.

00:24:28.300 --> 00:24:30.160
There's the export key image size.

00:24:30.450 --> 00:24:33.300
This is the full size of
the original master image.

00:24:33.300 --> 00:24:34.800
And there's all sorts
of different properties.

00:24:34.800 --> 00:24:38.800
Anything you want, EXIF, IPTC data,
anything, it's all in there.

00:24:38.800 --> 00:24:43.140
All the keys are provided,
so you can get a hold of whatever

00:24:43.140 --> 00:24:45.670
metadata information you need.

00:24:45.800 --> 00:24:46.790
Let's see.

00:24:46.800 --> 00:24:50.060
So the next thing we're going
to do is when Aputure then

00:24:50.230 --> 00:24:52.790
asks for our edit window,
I need to load my UI.

00:24:52.800 --> 00:24:57.780
So I basically just load a
nib and return the window.

00:24:57.800 --> 00:24:59.800
Nothing too complicated there.

00:24:59.800 --> 00:25:02.630
And then, in a week from nib,
I actually want to set up

00:25:02.740 --> 00:25:04.300
the rest of the interface.

00:25:04.300 --> 00:25:09.300
So I have an outlet for my image view
and some of the other UI elements,

00:25:09.300 --> 00:25:13.430
and I just initialize them to either
default values or just add the

00:25:13.450 --> 00:25:16.300
thumbnail that I got from Aputure,
put that in the image view,

00:25:16.300 --> 00:25:19.690
and I can do whatever
I need to from there.

00:25:23.200 --> 00:26:52.000
[Transcript missing]

00:26:52.470 --> 00:26:56.820
Composite my changes over that and
then save that file back to disk.

00:26:56.820 --> 00:26:58.570
Once that's done,
all I need to do is tell

00:26:58.580 --> 00:27:02.270
the Edit Manager to end the
edit session and I'm done.

00:27:02.300 --> 00:27:03.400
So, thank you.

00:27:03.400 --> 00:27:05.400
All right.

00:27:05.400 --> 00:27:07.490
Let's switch back to the slide.

00:27:08.290 --> 00:27:10.220
So a couple quick notes
on what we just saw.

00:27:10.290 --> 00:27:15.080
So the first thing I should mention
is once a version is editable,

00:27:15.080 --> 00:27:16.830
Aperture won't keep making copies of it.

00:27:16.830 --> 00:27:19.040
You can keep editing that
file over and over again.

00:27:19.040 --> 00:27:24.010
So it's possible that you get a version
ID when the plug-in first starts,

00:27:24.090 --> 00:27:27.530
and that version ID shows up in selected
versions and in editable versions.

00:27:27.540 --> 00:27:28.350
It's already there.

00:27:28.360 --> 00:27:30.700
And if you call editable versions
of versions and you pass in

00:27:30.710 --> 00:27:34.880
something that's already editable,
Aperture won't reduplicate that file.

00:27:34.880 --> 00:27:37.280
It'll just pass you back the
information for that file,

00:27:37.280 --> 00:27:41.990
so we're not constantly creating
new files in the user's library.

00:27:42.560 --> 00:27:44.570
So let's talk about one
other cool feature of the

00:27:44.680 --> 00:27:48.440
API which can be really useful,
which we call metadata round-tripping.

00:27:48.440 --> 00:27:53.140
This is basically the way for you to send
plug-in specific data back to Aperture.

00:27:53.140 --> 00:27:56.020
And this is a great way-- we have
this feature in the Export API,

00:27:56.020 --> 00:27:59.220
and it's a really great way for you
to get something specific to your

00:27:59.220 --> 00:28:00.730
plug-in back into the database.

00:28:00.780 --> 00:28:04.080
Maybe it's something for the user
that tells them what settings

00:28:04.080 --> 00:28:06.940
they used or what they did so
they can search on that later.

00:28:06.940 --> 00:28:10.870
Or maybe it's something plug-in specific
that you want next time the user

00:28:10.980 --> 00:28:13.060
brings up your plug-in on that image.

00:28:13.100 --> 00:28:17.290
So we actually support two different
kinds of metadata in the API.

00:28:17.300 --> 00:28:19.600
The two method calls are listed here.

00:28:19.600 --> 00:28:22.960
The first is custom metadata,
and that's just any

00:28:22.960 --> 00:28:24.540
string key value pairs.

00:28:24.540 --> 00:28:27.090
You know, it's any dictionary where the
keys and the values are strings.

00:28:27.100 --> 00:28:29.380
Aperture doesn't care what they are.

00:28:29.380 --> 00:28:31.370
There's really no restrictions on this.

00:28:31.380 --> 00:28:34.570
You can just pass any two pairs,
and Aperture will attach

00:28:34.570 --> 00:28:36.050
that to the image for you.

00:28:36.140 --> 00:28:36.840
So that's the first thing.

00:28:36.910 --> 00:28:39.250
So that really allows you a lot
of freedom to put any kind of

00:28:39.310 --> 00:28:41.780
data you want back onto an image.

00:28:41.780 --> 00:28:44.600
And the second thing is
add hierarchical keywords.

00:28:44.620 --> 00:28:46.670
So what are hierarchical keywords?

00:28:46.680 --> 00:28:48.900
So in Aperture,
a keyword isn't just a string.

00:28:48.900 --> 00:28:52.140
It actually has some hierarchy to it,
which means, you know,

00:28:52.140 --> 00:28:54.940
you might not just put
San Francisco as a keyword on an image.

00:28:54.940 --> 00:28:58.020
It might actually be San Francisco that's
sitting inside California,

00:28:58.050 --> 00:28:59.900
sitting inside the United States.

00:28:59.920 --> 00:29:02.310
So if you just put
San Francisco on an image,

00:29:02.410 --> 00:29:05.650
but the user searches for California,
that image will come up

00:29:05.690 --> 00:29:09.130
because San Francisco is in
the hierarchy for California.

00:29:09.390 --> 00:29:11.790
The hierarchy is really free form.

00:29:12.090 --> 00:29:14.490
The keywords don't need to already
exist in the user's database

00:29:14.490 --> 00:29:15.570
when you call this method.

00:29:15.810 --> 00:29:19.050
Aperture will go ahead and add
them into that user's hierarchy

00:29:19.460 --> 00:29:21.590
when you make this call.

00:29:21.710 --> 00:29:24.990
There's a couple caveats about this call,
or these two calls.

00:29:25.340 --> 00:29:27.230
The first is they're not undoable.

00:29:27.250 --> 00:29:31.290
If you make these calls and then the
user decides to cancel your plug-in,

00:29:31.410 --> 00:29:34.890
that metadata that you attach will
still be sitting on those images.

00:29:34.990 --> 00:29:36.640
So that's important to keep in mind.

00:29:36.640 --> 00:29:38.730
Usually things you want to do at the end.

00:29:38.770 --> 00:29:40.980
You know, the user runs your plug-in.

00:29:41.310 --> 00:29:42.740
You've written all your image changes.

00:29:42.740 --> 00:29:44.140
You've done your thing.

00:29:44.190 --> 00:29:47.100
And now you're going to tag in
some metadata so the user can

00:29:47.100 --> 00:29:50.630
know what they did or you can
know what you did last time.

00:29:50.840 --> 00:29:52.470
The other thing is they
take effect immediately.

00:29:52.660 --> 00:29:56.330
So when you make these calls,
that data goes into the

00:29:56.330 --> 00:29:57.990
database right away.

00:29:58.190 --> 00:29:59.570
There's no delay.

00:29:59.640 --> 00:30:01.980
Again,
if the user cancels anything like that,

00:30:01.980 --> 00:30:04.090
that data is going to be in the database.

00:30:04.230 --> 00:30:06.540
So once again, I'm going to bring
Joe back up real quick.

00:30:06.550 --> 00:30:10.010
And he's going to show us how we
might use this in borders and titles.

00:30:14.570 --> 00:30:17.850
So we thought with borders and titles,
it would be really cool if the user

00:30:17.850 --> 00:30:21.260
could actually search for those
titles that they added to the image.

00:30:21.260 --> 00:30:24.740
Since it's actual just image
data that's composited,

00:30:24.740 --> 00:30:27.260
there's really not a great
way to do that other than

00:30:27.260 --> 00:30:29.250
basically searching the metadata.

00:30:29.260 --> 00:30:32.140
So we're back into the
borders and titles code here,

00:30:32.200 --> 00:30:35.480
and what I'm going to do is
just put some code back in here

00:30:35.480 --> 00:30:37.650
that can add that metadata back.

00:30:37.760 --> 00:30:44.520
So what I need to do here is get a list
of the titles that the user has added.

00:30:44.520 --> 00:30:48.550
This is just some of the code
that I had for interfacing with my

00:30:48.590 --> 00:30:50.090
controller object to get those titles.

00:30:50.100 --> 00:30:53.360
And then I join those titles
together into one string,

00:30:53.360 --> 00:30:56.730
and I call one method here
called addCustomMetadata,

00:30:57.060 --> 00:31:02.080
pass in the metadata dictionary that
had the keys with all of the titles.

00:31:02.110 --> 00:31:04.480
That was the value.

00:31:04.590 --> 00:31:06.360
The key is title from borders and titles.

00:31:06.430 --> 00:31:07.750
This is anything you
want to add for the key.

00:31:07.800 --> 00:31:09.760
That's just what we chose here.

00:31:09.810 --> 00:31:11.760
And then to the editable
versions that were created.

00:31:11.760 --> 00:31:13.760
So I can show that to you real quickly.

00:31:13.760 --> 00:31:15.760
We're back here in Aperture.

00:31:15.940 --> 00:31:19.760
And I don't know where that one
image was that I added the text to,

00:31:19.760 --> 00:31:23.530
but I can just very easily
search here for NinjaCat.

00:31:23.770 --> 00:31:25.760
And there's my editable version.

00:31:25.760 --> 00:31:27.760
That did change, so thank you very much.

00:31:34.300 --> 00:31:35.640
All right, thanks, Joe.

00:31:35.740 --> 00:31:40.220
So that's the brief
run-through of the Edit API.

00:31:40.380 --> 00:31:43.950
If you have any questions, any requests,
you know, this is the first

00:31:43.950 --> 00:31:46.340
version of the Edit API,
so if there's features you want,

00:31:46.340 --> 00:31:49.360
anything like that,
here's some--here's an e-mail contact.

00:31:49.510 --> 00:31:50.820
Go ahead and e-mail Alan Schaffer.

00:31:50.840 --> 00:31:54.000
He'll make sure the--your
request gets to the right people,

00:31:54.000 --> 00:31:55.400
the right engineers.

00:31:55.440 --> 00:31:57.740
We also have a mailing list,
public mailing list,

00:31:57.740 --> 00:32:01.840
that covers both of Aperture's APIs,
both export and edit.

00:32:01.950 --> 00:32:04.550
If you go to list.apple.com,
you can search the archives there,

00:32:04.560 --> 00:32:05.260
sign up.

00:32:05.470 --> 00:32:07.360
There's several
Apple engineers on the list,

00:32:07.360 --> 00:32:10.590
so we'll be sure to get
your questions answered.

00:32:10.640 --> 00:32:13.440
And then, of course,
documentation comes both with

00:32:13.540 --> 00:32:18.960
the SDK and is also on the
developer site at apple.com.

00:32:19.690 --> 00:32:22.940
Immediately following the session,
we will all be down in the lab.

00:32:22.940 --> 00:32:25.360
So if you're working on a plug-in,
you want to show us something,

00:32:25.490 --> 00:32:27.560
if you have questions
about how something works,

00:32:27.690 --> 00:32:28.540
drop down.

00:32:28.720 --> 00:32:31.940
We will try and make sure
your question gets answered.

00:32:33.540 --> 00:32:35.950
And so, that's the brief overview.

00:32:36.280 --> 00:32:39.240
The Edit API, new in Aperture 2.1.

00:32:39.370 --> 00:32:42.710
It's an Objective-C API,
but beyond making the

00:32:42.810 --> 00:32:46.310
API calls in Objective-C,
you can write your plug-ins

00:32:46.310 --> 00:32:47.540
whatever technology you want.

00:32:47.540 --> 00:32:50.000
You got to download
the SDK to get started.

00:32:50.000 --> 00:32:55.340
It includes everything you need, headers,
docs, project templates, everything.

00:32:56.390 --> 00:32:59.990
Your plug-ins get access to
all of Aperture's metadata,

00:33:00.070 --> 00:33:03.170
library features directly from the API.

00:33:03.410 --> 00:33:06.000
You can read image data,
whether it's RAW or anything

00:33:06.100 --> 00:33:10.810
from any image selected,
and you can actually write your special

00:33:10.820 --> 00:33:13.510
sauce back to these editable versions.