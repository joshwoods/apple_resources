WEBVTT

00:00:21.460 --> 00:00:22.300
Is it on now?

00:00:22.470 --> 00:00:23.100
Yes, it is.

00:00:23.100 --> 00:00:25.930
Well,
you missed the first joke of the morning,

00:00:25.930 --> 00:00:28.040
but I will continue in
English instead of Dutch.

00:00:28.040 --> 00:00:30.590
I was just going to say that I hope
one day I'll be able to just have,

00:00:30.590 --> 00:00:32.570
like, a room to myself where
I can do it in Dutch.

00:00:32.570 --> 00:00:33.980
It would be so fantastic.

00:00:34.030 --> 00:00:35.710
Anyway, let's get through this.

00:00:35.710 --> 00:00:39.360
Actually, I have a fairly short session,
which will leave more time for Q&A,

00:00:39.380 --> 00:00:42.780
which is actually good because I'm
sure you have a lot of questions,

00:00:42.780 --> 00:00:45.230
and I actually also want to hear
some feedback from you guys.

00:00:45.580 --> 00:00:48.160
So, the session,
Managing Secure Data on the iPhone.

00:00:48.160 --> 00:00:51.380
The phone, you know,
is an even more personal item and

00:00:51.380 --> 00:00:55.660
even more networked item than,
you know, any laptop maybe already is,

00:00:55.660 --> 00:00:57.520
but at least in my opinion.

00:00:57.520 --> 00:00:59.620
So, you know,
what are you going to do about

00:00:59.620 --> 00:01:03.090
all that secure data that people
carry around and care a lot about?

00:01:03.100 --> 00:01:06.810
So, secure data, in general,
you have various kinds.

00:01:06.910 --> 00:01:11.660
Basic ones, like passwords, then,
of course, you know, keys as well,

00:01:11.770 --> 00:01:14.760
your private, public keys, et cetera.

00:01:15.460 --> 00:01:17.780
Or just, you know,
plain data that you actually

00:01:17.860 --> 00:01:19.470
bulk encrypted or had signed.

00:01:19.480 --> 00:01:22.040
So,
what do you do with that on the phone?

00:01:22.040 --> 00:01:25.780
Well, good news is we also have
the keychain on the phone.

00:01:25.780 --> 00:01:29.250
So, you know, your passwords,
your certificates, your identities,

00:01:29.250 --> 00:01:30.930
all of that can go right in there.

00:01:30.980 --> 00:01:34.650
But the remainder of your data,
you have to choose what to do.

00:01:34.660 --> 00:01:38.440
Now, either you can store it locally
on the device and use bulk

00:01:38.440 --> 00:01:42.050
encryption to keep it secure,
but you may also say, like, well,

00:01:42.050 --> 00:01:45.340
you know, I'm so well networked now,
maybe I'm just going to leave the data.

00:01:45.340 --> 00:01:48.770
And in that case, of course,
you want to have a good strategy to have

00:01:48.770 --> 00:01:53.050
secure communication with your back-end
server that your phone is talking with.

00:01:53.160 --> 00:01:56.580
So, this morning,
what are we going to go through?

00:01:56.580 --> 00:01:59.570
Most of the functionality I'm
going to talk about is in security

00:01:59.650 --> 00:02:02.880
framework and some of it in the
libraries that are related to it.

00:02:03.000 --> 00:02:07.560
I'm going to have to make a distinction
a little bit between Mac OS X and

00:02:07.560 --> 00:02:11.240
the iPhone OS or the OS X iPhone,
as it's called now.

00:02:11.520 --> 00:02:12.760
These names change so fast.

00:02:12.760 --> 00:02:15.320
I'm going to refer to
them as desktop and phone.

00:02:15.340 --> 00:02:21.020
I think we'll all be happier with a
short term that says what it says.

00:02:21.020 --> 00:02:24.820
So, first, those two,
then we can get into the details

00:02:24.920 --> 00:02:28.160
of what exactly is there,
how do you deal with the

00:02:28.280 --> 00:02:31.310
keychain on the phone,
how do you deal with

00:02:31.310 --> 00:02:35.070
certificates on the phone,
TLS, SSL, how does that work,

00:02:35.110 --> 00:02:37.770
low-level crypto, to finish it all off.

00:02:37.880 --> 00:02:41.030
And root certificates,
I'm actually not going to

00:02:41.030 --> 00:02:44.810
get into APIs as much because
there are non-public ones.

00:02:45.230 --> 00:02:47.250
But I'm going to bring
it up because it is,

00:02:47.350 --> 00:02:49.700
of course,
of interest and I'm going to show

00:02:49.700 --> 00:02:52.980
you at least what an end user
can do or a company that wants

00:02:53.120 --> 00:02:55.090
to provision a bunch of phones.

00:02:55.120 --> 00:02:57.980
So, first off...

00:03:00.550 --> 00:03:02.950
A lot of things are similar.

00:03:03.240 --> 00:03:06.200
Obviously, we're not going to just start
completely from scratch.

00:03:06.200 --> 00:03:08.800
One of the key pieces in that is,
of course, having common crypto,

00:03:08.800 --> 00:03:10.290
which contains all of our algorithms.

00:03:10.290 --> 00:03:14.300
A subtle difference already
apparent there is that on the phone,

00:03:14.300 --> 00:03:16.210
we actually have some crypto hardware.

00:03:16.270 --> 00:03:18.960
And for that,
we have acceleration for your

00:03:19.070 --> 00:03:20.950
SHA-1 and your AES needs.

00:03:21.020 --> 00:03:25.320
Now, subtlety about that, too,
is that one of the reasons to have

00:03:25.320 --> 00:03:30.700
acceleration there is not just so that
you can do it faster on a slow platform.

00:03:30.700 --> 00:03:35.250
It's also, you know, power-wise,
if you have optimized hardware for it,

00:03:35.360 --> 00:03:39.310
that will actually take less power.

00:03:39.310 --> 00:03:39.320
And that is, of course, very useful.

00:03:40.720 --> 00:03:44.110
Secondary, all the APIs that you
know from the desktop,

00:03:44.210 --> 00:03:48.000
if you have familiarity with the desktop,
exist.

00:03:48.000 --> 00:03:50.210
So, you know,
if you look for the header files,

00:03:50.310 --> 00:03:51.330
you will find them.

00:03:51.360 --> 00:03:53.980
But there are some differences.

00:03:54.020 --> 00:03:58.060
And one of those differences is
that CDSA is not there on the phone.

00:03:58.060 --> 00:04:02.140
So whenever the APIs actually
use explicit CDSA-isms,

00:04:02.140 --> 00:04:06.180
we have to come up with a
different API to get around that.

00:04:06.290 --> 00:04:08.440
So that brings us to the differences.

00:04:08.740 --> 00:04:11.120
And I've kind of already given
away the first differences.

00:04:11.120 --> 00:04:15.850
CDSA existed on the desktop so that you
could kind of hook into a really broad

00:04:15.850 --> 00:04:19.210
crypto API at the lower level and extend
the system in whatever way you wanted.

00:04:19.300 --> 00:04:21.680
We don't have that on the phone.

00:04:21.680 --> 00:04:24.210
Of course,
it has also grown over the various

00:04:24.210 --> 00:04:28.700
years into lots of directions trying to
serve every need found on a desktop OS,

00:04:28.700 --> 00:04:32.840
which is presumably bigger
than it is on a phone system.

00:04:32.840 --> 00:04:36.330
And we've actually come up with an
API that we pinpointed and tried to gear

00:04:36.330 --> 00:04:38.630
towards the applications that we expect.

00:04:38.740 --> 00:04:41.740
And, you know,
not only just for time limit,

00:04:41.780 --> 00:04:45.220
because obviously we couldn't
have reconstructed all

00:04:45.310 --> 00:04:47.060
of it in the time given.

00:04:49.500 --> 00:04:53.920
One other big difference is on OS X,
you can store stuff in the keychain

00:04:53.970 --> 00:04:56.600
with one application and another
application can come by and say,

00:04:56.600 --> 00:04:59.060
like,
that's the item that I'm looking for.

00:04:59.100 --> 00:05:00.350
I would like to use that.

00:05:00.550 --> 00:05:03.870
And then there's the user who can
help make the decision whether or

00:05:03.950 --> 00:05:07.640
not application B can use application
A's stored password there and,

00:05:07.770 --> 00:05:11.500
you know, make the user happy that he
doesn't have to key it in again.

00:05:14.060 --> 00:05:21.840
Now, on the phone,
we don't do that much interaction.

00:05:21.840 --> 00:05:21.840
You may have noticed that you don't
enter a password to unlock your keychain.

00:05:21.840 --> 00:05:21.840
We sign in an actual --

00:05:21.910 --> 00:05:26.900
is the keychain access
identifier for which the current

00:05:26.900 --> 00:05:27.890
application that connects to it.

00:05:27.970 --> 00:05:30.900
I'll get into more details
later to make that really clear.

00:05:30.900 --> 00:05:34.170
And last of all,
the Sec Keychain API doesn't

00:05:34.170 --> 00:05:34.900
exist on the phone.

00:05:34.900 --> 00:05:38.900
We have the Sec Item API, and with that,
I'd like to get to the next session

00:05:38.900 --> 00:05:40.890
and talk to you about the keychain.

00:05:40.900 --> 00:05:46.700
So the keychain APIs on Mac OS X are
pretty flexible and allow you

00:05:46.800 --> 00:05:51.450
to specify all kinds of things
to also make it possible to plug

00:05:51.450 --> 00:05:53.880
into various other CDSA plug-ins,
et cetera.

00:05:54.130 --> 00:05:56.900
But we looked at what
developers ended up doing,

00:05:56.900 --> 00:06:01.230
and, you know, most of you come up with,
like, a simple wrapper over it and say,

00:06:01.270 --> 00:06:03.300
like, "Okay,
this is really what I want." You know,

00:06:03.300 --> 00:06:04.900
"It's nice that you have this whole API.

00:06:04.900 --> 00:06:04.900
I don't care.

00:06:04.900 --> 00:06:06.760
I want something simple.

00:06:06.990 --> 00:06:10.900
This is how I want to do my
work." So we looked at that,

00:06:10.900 --> 00:06:15.900
and we tried to come up with an API that
was more in line with those usages.

00:06:16.030 --> 00:06:19.940
And therefore, on iPhone OS,
we're going to introduce a streamlined

00:06:19.940 --> 00:06:24.970
API called the Sec Item API,
and that's going to replace-- or

00:06:24.970 --> 00:06:27.810
that will be your replacement for
the Sec Keychain API on the phone.

00:06:27.900 --> 00:06:31.900
Now, the Sec Item API is different
in that it uses CF types.

00:06:31.900 --> 00:06:35.900
It uses them both for
values and for collections.

00:06:36.170 --> 00:06:41.700
And as a result, we no longer have, like,
a Sec Keychain Item ref that you'd first

00:06:41.700 --> 00:06:45.030
have to get back to query it because,
well, we're just going to pass you back

00:06:45.030 --> 00:06:47.160
the attributes as a dictionary,
and you can dig in there

00:06:47.490 --> 00:06:48.900
as much as you want.

00:06:48.900 --> 00:06:52.900
Of course, we have to keep it similar,
too.

00:06:52.900 --> 00:06:55.900
We're not going to, you know,
make changes that make no sense at all.

00:06:55.900 --> 00:06:58.640
So if you have passwords,
there's generic-- support for

00:06:58.640 --> 00:07:00.900
generic and Internet passwords.

00:07:00.900 --> 00:07:02.900
Generic passwords are
really simple passwords.

00:07:02.900 --> 00:07:04.900
You know, this is the account,
this is the server,

00:07:04.900 --> 00:07:05.830
and this is the password,
and that's all I really

00:07:05.830 --> 00:07:06.900
have to say about that.

00:07:06.900 --> 00:07:10.010
Internet passwords are slightly
more intricate in that they let

00:07:10.010 --> 00:07:13.890
you specify the various attributes
of an Internet connection,

00:07:13.900 --> 00:07:15.790
say, you know,
what port am I connecting to

00:07:15.930 --> 00:07:17.860
or what protocol am I using,
allow you to specify

00:07:17.920 --> 00:07:20.450
a little more details,
and then you can just go

00:07:20.520 --> 00:07:20.900
back and look at your data.

00:07:20.900 --> 00:07:22.900
The schemas of both desktop
and phone are the same,

00:07:23.010 --> 00:07:25.900
so there should be no
surprises in that sense.

00:07:25.920 --> 00:07:30.900
It also stores the certificate
keys and the identities.

00:07:31.090 --> 00:07:33.900
Not much more to say about that.

00:07:33.900 --> 00:07:37.900
We'll get into the details later.

00:07:37.900 --> 00:07:41.740
And it exposes four
API functions to do all its work.

00:07:41.940 --> 00:07:45.800
That's, of course, a little bit,
you know, cheeky because, like,

00:07:45.800 --> 00:07:49.370
four API functions, yes, and, what,
30 constants you pass

00:07:49.370 --> 00:07:52.780
all those parameters in,
so you cannot really measure it by that.

00:07:52.900 --> 00:07:55.900
But first function, of course,
is secitemcopymatching.

00:07:55.900 --> 00:07:58.900
You specify what you're
looking for in a keychain,

00:07:58.900 --> 00:08:02.790
and it goes in, digs it out for you,
and tells you whether it found something.

00:08:02.920 --> 00:08:07.680
Then for adding stuff,
there's secitemadd and secitemupdate.

00:08:08.190 --> 00:08:09.900
Those are fairly similar, but they,
of course,

00:08:09.930 --> 00:08:11.890
have slightly different semantics.

00:08:12.030 --> 00:08:14.140
secitemadd will, of course,
not let you add an item that

00:08:14.140 --> 00:08:17.390
already existed on the keychain,
and secitemupdate won't let you

00:08:17.550 --> 00:08:19.760
update an item that doesn't exist yet.

00:08:20.000 --> 00:08:21.810
Those semantics may not
be useful to all of you,

00:08:21.910 --> 00:08:27.900
but I'm sure that there are some of you
that will be happy that we have those.

00:08:27.910 --> 00:08:29.900
And, of course,
if you want to get rid of the item again,

00:08:29.900 --> 00:08:32.900
there's the secitemdelete.

00:08:32.920 --> 00:08:37.370
One feature that you will not have
seen that we thought was really

00:08:37.680 --> 00:08:39.900
useful is persistent item references.

00:08:39.900 --> 00:08:43.370
And persistent item references let
you basically find an item and then

00:08:43.370 --> 00:08:46.550
get back a reference for it that
will just be an opaque piece of

00:08:46.720 --> 00:08:50.580
data that you can just hang onto,
and by which you can find that item

00:08:50.580 --> 00:08:53.900
again and query it for whatever
attributes you want from it.

00:08:53.900 --> 00:08:56.410
That's especially useful
if you have items that are,

00:08:56.410 --> 00:09:00.400
you know, harder to query for or that you
really specifically meant this

00:09:00.400 --> 00:09:02.900
item and not anything else.

00:09:02.900 --> 00:09:05.310
And then finally,
we have to talk a little bit about the

00:09:05.310 --> 00:09:08.900
differences between ACLs and access
groups that I already brought up.

00:09:09.200 --> 00:09:13.320
So let's jump in and
look at a simple example.

00:09:13.980 --> 00:09:17.550
For a sec item add,
we're going to start putting all

00:09:17.550 --> 00:09:20.680
these keychain items on there and

00:09:24.500 --> 00:10:41.200
[Transcript missing]

00:10:41.700 --> 00:10:47.760
So that was SecItemAdd and the creation
of that initial attribute dictionary.

00:10:47.760 --> 00:10:49.640
What does SecItemUpdate look like?

00:10:49.700 --> 00:10:53.930
I've highlighted the lines that actually
are different between SecItemAdd and

00:10:53.930 --> 00:10:58.620
update so that hopefully you won't
have to read it all again and get

00:10:58.690 --> 00:11:01.120
a feel for what's different here.

00:11:01.120 --> 00:11:04.780
So update actually takes the same
three arguments except this time,

00:11:04.780 --> 00:11:07.030
you know,
the password passed in is the one

00:11:07.030 --> 00:11:09.340
field that we actually want to update.

00:11:09.340 --> 00:11:13.210
We don't want to just say like, you know,

00:11:14.400 --> 00:11:17.000
So,
the current item has the wrong password.

00:11:17.000 --> 00:11:17.880
We already figured that out.

00:11:18.150 --> 00:11:20.090
We're going to update it.

00:11:20.100 --> 00:11:25.400
So, we prepare the dictionary again
with the common attributes for item.

00:11:25.400 --> 00:11:28.400
Then we add the account and
the server to find the item.

00:11:28.400 --> 00:11:30.900
Now we create another
dictionary because update,

00:11:30.900 --> 00:11:33.870
of course, has to not only be able
to update the password,

00:11:33.920 --> 00:11:35.780
it also needs to be able
to update other attributes,

00:11:35.780 --> 00:11:36.330
if you like.

00:11:36.380 --> 00:11:40.860
So, in that secondary dictionary,
we stuff in the password

00:11:40.860 --> 00:11:44.400
that we've now updated and we
pass that to SecItemUpdate.

00:11:44.430 --> 00:11:46.260
It has two values, of course.

00:11:46.330 --> 00:11:47.440
One is the query.

00:11:47.440 --> 00:11:50.870
Go find me this item and update
here are the new attributes

00:11:50.870 --> 00:11:52.820
I'd like to set on this item.

00:11:53.510 --> 00:11:54.400
So that's update.

00:11:54.530 --> 00:11:56.600
Now that we have the
item on the keychain,

00:11:56.770 --> 00:11:58.240
how do we find it back?

00:11:58.300 --> 00:11:59.780
Here's copy matching.

00:11:59.890 --> 00:12:02.200
Copy matching just gets
account and server.

00:12:02.200 --> 00:12:05.890
We start again with that same
standard attribute dictionary

00:12:05.890 --> 00:12:07.900
we add to two values passed in.

00:12:07.900 --> 00:12:11.910
And now one thing that changes is
like we'll have to tell it what

00:12:11.910 --> 00:12:14.190
do we want back from this item.

00:12:14.300 --> 00:12:59.200
[Transcript missing]

00:12:59.410 --> 00:13:02.500
So after that,
Sec Item Delete is very simple.

00:13:02.500 --> 00:13:05.850
Sec Item Delete, again, creates the same
dictionary and just says,

00:13:05.850 --> 00:13:07.350
okay, delete it, that's it.

00:13:09.410 --> 00:13:12.040
In the beginning,
I mentioned the persistent item refs,

00:13:12.040 --> 00:13:14.930
and I wanted to show a quick
example to see how that would work.

00:13:15.110 --> 00:13:17.040
Of course,
that's not a different function call,

00:13:17.040 --> 00:13:21.620
but I'm going to show you, like,
what attributes actually

00:13:22.000 --> 00:13:24.010
come in play to use that.

00:13:25.090 --> 00:13:28.200
So for persistent refs,
let's say you have an identity and you're

00:13:28.200 --> 00:13:30.700
about to store it into the key chain.

00:13:30.780 --> 00:13:34.960
Identity is kind of hard to find if
you -- hard to find which identity

00:13:34.960 --> 00:13:36.200
you're actually looking for.

00:13:36.200 --> 00:13:39.000
You don't necessarily want to parse
apart a whole certificate just to

00:13:39.040 --> 00:13:42.130
find some good attributes in which you
can find it in the key chain again.

00:13:42.300 --> 00:13:46.200
So let's add it and let's ask
for a persistent ref back.

00:13:46.200 --> 00:13:49.170
So here we have a function,
persistent ref for identity.

00:13:49.210 --> 00:13:51.200
We pass in the identity.

00:13:51.360 --> 00:13:55.170
And now we're going to specify
the dictionary for the add call.

00:13:55.240 --> 00:13:59.200
We're going to say, like,
I would like a persistent reference back.

00:13:59.200 --> 00:14:03.190
So we set the KSEC return
persistent ref to true.

00:14:03.190 --> 00:14:07.160
And what I'm passing in here is
actually not a password item.

00:14:07.210 --> 00:14:09.170
It's actually a reference to an item.

00:14:09.280 --> 00:14:11.200
Identities, certificates, keys,
those are all in here.

00:14:11.200 --> 00:14:11.200
So we're going to add it.

00:14:11.200 --> 00:14:11.200
So let's add it.

00:14:11.200 --> 00:14:11.200
Conrad Sauerwald Conrad Sauerwald:
So let's add it.

00:14:11.200 --> 00:14:11.200
And let's ask for a persistent ref back.

00:14:11.200 --> 00:14:12.200
So here we have a function,
persistent ref for identity.

00:14:12.200 --> 00:14:12.200
We pass in the identity.

00:14:12.200 --> 00:14:15.420
they're not actually just
dictionaries of values,

00:14:15.540 --> 00:14:19.960
they're actually slightly larger objects,
so hence you end up using those

00:14:19.960 --> 00:14:26.980
as a reference to those items,
and we specify that as KsecValueRef,

00:14:27.000 --> 00:14:30.820
and KsecValueRef will be set to Identity.

00:14:31.400 --> 00:15:08.700
[Transcript missing]

00:15:16.400 --> 00:15:16.400
Okay.

00:15:16.400 --> 00:15:16.410
So we have the persistent ref.

00:15:16.410 --> 00:15:16.410
Then we come back.

00:15:16.410 --> 00:15:16.410
How do we find that item again?

00:15:16.410 --> 00:15:16.520
All right.

00:15:16.520 --> 00:15:18.560
There's the CFDataRef.

00:15:18.560 --> 00:15:20.920
That's the persistent ref that we have.

00:15:20.920 --> 00:15:23.520
And as you see, it's fairly similar.

00:15:23.520 --> 00:15:26.580
This time we ask, hey,
give us a ref back instead of

00:15:26.580 --> 00:15:28.460
specifying it as the value.

00:15:28.460 --> 00:15:32.880
And we ask for the value
as a persistent ref.

00:15:32.880 --> 00:15:36.120
So we're passing in the persistent
ref here is what it means.

00:15:37.340 --> 00:15:40.400
Again, same call, sec item copy matching.

00:15:40.400 --> 00:15:43.150
And what comes back now is actually
suddenly not a persistent ref,

00:15:43.150 --> 00:15:45.280
but what comes back is
actually sec identity ref.

00:15:45.280 --> 00:15:48.140
So that's why you see the casting around.

00:15:48.270 --> 00:15:50.260
The second argument is a CF type ref.

00:15:50.260 --> 00:15:53.300
So you'll have to work around that.

00:15:54.290 --> 00:15:56.420
All right,
so that's how persistent refs work.

00:15:56.610 --> 00:16:01.990
Another case that you may run into,
say you have multiple passwords

00:16:02.040 --> 00:16:05.150
in there and they actually share a
couple of attributes that are the

00:16:05.150 --> 00:16:08.400
same and a couple are different and
you happen to actually want to find

00:16:08.400 --> 00:16:12.180
all items first to let the user,
for example, pick which one they wanted.

00:16:13.180 --> 00:16:16.250
All right,
so normally it returns you one item

00:16:17.010 --> 00:16:20.340
and you can be guaranteed that if
you don't specify any property.

00:16:20.340 --> 00:16:24.390
However, if you want multiple items,
all the APIs that I talked about

00:16:24.390 --> 00:16:26.680
can also return arrays of items.

00:16:26.680 --> 00:16:32.200
That means that if you used
to get back a data ref,

00:16:32.200 --> 00:16:36.750
you'll get back an array of data refs.

00:16:36.750 --> 00:16:36.750
If you used to get back a dictionary ref,
you get it back an array of dictionaries.

00:16:37.340 --> 00:16:40.330
For the example here, we're going to say,
like, okay, show me, like,

00:16:40.510 --> 00:16:42.100
all the generic passwords that I have.

00:16:42.200 --> 00:16:45.680
Ksec class set to generic passwords.

00:16:45.680 --> 00:16:47.360
Give me the attributes.

00:16:47.360 --> 00:16:48.600
I don't yet want the value.

00:16:48.600 --> 00:16:52.220
I'm just going to ask the user to
pick which particular item I want.

00:16:52.280 --> 00:16:55.720
And now I'm going to tell it, okay,
not just one.

00:16:55.720 --> 00:16:56.740
I'm going to be explicit.

00:16:56.770 --> 00:16:59.390
I'm going to say, like, hey,
give me all items.

00:16:59.440 --> 00:17:01.700
And I do that with the
Ksec match limit property.

00:17:03.410 --> 00:17:06.550
And that's how you get multiple
items out of the keychain.

00:17:06.930 --> 00:17:10.270
So that was the quick look at SecItem.

00:17:11.020 --> 00:17:14.660
Now let's talk a little bit
higher level about what it means,

00:17:14.660 --> 00:17:17.060
this difference between
ACLs and access groups.

00:17:17.060 --> 00:17:21.810
So OS X has a user that can actually
make decisions and gets various

00:17:21.810 --> 00:17:24.670
dialogues in which they can make
decisions about whether they want

00:17:24.810 --> 00:17:27.980
app A to use app B's passwords.

00:17:27.980 --> 00:17:30.770
And they can also be queried
for their passwords to indicate

00:17:30.870 --> 00:17:34.200
that they have ownership of that
keychain before that can happen.

00:17:34.200 --> 00:17:36.820
So in that way,
there's a very nice way in which you

00:17:36.820 --> 00:17:41.240
can kind of elevate privileges and
redistribute them amongst applications.

00:17:41.240 --> 00:17:44.960
On the phone,
the user doesn't have that password.

00:17:44.960 --> 00:17:47.760
The user is not the one that can type
it in and can do something with that.

00:17:47.850 --> 00:17:51.400
So we have the key for them
is embedded in the hardware.

00:17:51.400 --> 00:17:53.320
Someone asked yesterday,
is it related to my SIM?

00:17:53.320 --> 00:17:54.420
No, it's in the hardware.

00:17:54.420 --> 00:17:55.200
It's in the physical device.

00:17:55.200 --> 00:18:00.340
It's meant to keep the keychain secure
when it travels outside of device,

00:18:00.340 --> 00:18:02.860
which it will eventually do when
you make a backup with iTunes,

00:18:02.860 --> 00:18:03.580
for example.

00:18:05.100 --> 00:19:07.400
[Transcript missing]

00:19:08.500 --> 00:20:35.800
[Transcript missing]

00:20:36.300 --> 00:20:46.200
Secure Data on iPhone OS and how to
carry out basic cryptographic operations,

00:20:46.200 --> 00:20:54.450
coordinate the secure storage of
sensitive passwords and manage

00:20:54.450 --> 00:21:03.880
X.509 digital certificates
with respective trust policies.

00:21:03.880 --> 00:21:03.880
Conrad Sauerwald

00:21:05.580 --> 00:21:07.460
So keys can also be
stored in a key chain.

00:21:07.460 --> 00:21:11.390
They get stored with a different key,
the Ksec class key,

00:21:11.390 --> 00:21:15.790
a little bit of a weird name for that,
but it would be more annoying

00:21:15.790 --> 00:21:18.580
to call it Ksec class key,
class key.

00:21:18.850 --> 00:21:23.600
Also, you get it returned as a ref,
and when you have a sec key,

00:21:23.600 --> 00:21:27.600
then you can actually do the raw
asymmetric key operations on it,

00:21:27.600 --> 00:21:31.600
sign, verify, or encrypt, decrypt,
depending on what type of key it is.

00:21:31.600 --> 00:21:35.600
And you can specify
optional padding on it.

00:21:35.920 --> 00:21:38.600
Currently, there is only PQCS1 padding.

00:21:38.600 --> 00:21:41.730
Again,
if you want OAP or anything like that,

00:21:41.860 --> 00:21:46.280
file bugs,
tell our higher-ups that you need it.

00:21:46.600 --> 00:21:51.600
Sec key generate pair would actually
be a really nice one to have more

00:21:51.600 --> 00:21:55.600
fleshed out because we do allow you
to generate a key pair on the phone,

00:21:55.600 --> 00:21:57.600
which is, of course,
the most secure way to go.

00:21:57.600 --> 00:21:58.110
That way, you know,
it has never sat on someone's

00:21:58.110 --> 00:21:58.560
computer or something like that.

00:21:58.680 --> 00:21:59.580
So you can actually do that.

00:21:59.620 --> 00:22:00.210
And then, of course,
you can also do that with

00:22:00.210 --> 00:22:00.600
a lot of other things.

00:22:00.600 --> 00:22:01.140
So, again, if you have a lot of other
things that you need to do,

00:22:01.140 --> 00:22:01.600
you can do that with
a lot of other things.

00:22:01.600 --> 00:22:02.600
So you can actually do that
with a lot of other things.

00:22:02.600 --> 00:22:03.200
If it's a mobile phone or a laptop,
and you want to make your

00:22:03.200 --> 00:22:06.110
laptop get stolen in any way,
it actually will only be on the phone,

00:22:06.160 --> 00:22:10.480
but it is not entirely useful to you
yet because if you wanted to use it for,

00:22:10.480 --> 00:22:13.970
say, client-side authentication,
then you would have to get

00:22:14.090 --> 00:22:17.290
that public key off the device
and possibly as a CSR to prove

00:22:17.320 --> 00:22:21.600
that you have ownership of it,
and that is currently not a public API.

00:22:21.720 --> 00:22:27.600
Of course, you could figure out your
own schemes around it.

00:22:27.600 --> 00:22:30.600
It will generate you a key pair.

00:22:30.600 --> 00:22:34.070
You can obviously do raw signing,
verifying, encrypting,

00:22:34.070 --> 00:22:35.600
decrypting operations.

00:22:35.600 --> 00:22:37.590
So that's SecKey.

00:22:37.780 --> 00:22:40.500
Sec Identity is, of course,
the logical follow-up to that.

00:22:40.500 --> 00:22:43.990
Sec Identity really just represents
both a combination of a certificate

00:22:44.070 --> 00:22:45.860
and its associated private key.

00:22:45.860 --> 00:22:49.250
The certificate itself obviously
contains the public key that goes with

00:22:49.380 --> 00:22:53.560
the private key and has some additional
data signed in by certificate authority.

00:22:54.700 --> 00:22:57.760
Sec Identity also gets
stored in the keychain.

00:22:57.760 --> 00:23:01.660
Interesting to note is that they get
stored in the keychain as two various,

00:23:01.710 --> 00:23:04.200
two items,
as a Sec Certificate and a key.

00:23:04.200 --> 00:23:07.040
But you can just use the
Ksec class identity to say,

00:23:07.040 --> 00:23:10.250
like, I want an identity,
and it will basically line them

00:23:10.250 --> 00:23:13.080
up such that the certificates
that go with the keys,

00:23:13.150 --> 00:23:16.560
if it finds pairs of them,
that will represent an identity and

00:23:16.560 --> 00:23:21.000
those will then be returned to you
when you ask for that particular class.

00:23:21.000 --> 00:23:23.380
They also get returned to you as a ref.

00:23:24.660 --> 00:23:26.900
And, you know,
the most obvious thing you do with

00:23:26.900 --> 00:23:30.680
the Sec Identity is actually ask it,
give me the private key or give me the,

00:23:30.680 --> 00:23:33.640
or give me access to the certificate.

00:23:35.510 --> 00:23:39.130
So as I mentioned,
there's no way for you to get

00:23:39.160 --> 00:23:43.510
a generated key on a device
off the device with a CSR yet.

00:23:43.540 --> 00:23:49.460
And although the possibility exists
to import a P12 key pair using,

00:23:49.760 --> 00:23:55.130
you know, the high-up user-level APIs,
that won't be accessible to you.

00:23:55.150 --> 00:23:58.950
So that's why we made the
P12 import API public.

00:23:59.600 --> 00:24:03.400
With that, you can transport a key
and the certificate,

00:24:03.400 --> 00:24:07.700
encrypt it with a password,
and send that blob to the phone and

00:24:07.900 --> 00:24:09.440
have your application import it.

00:24:09.500 --> 00:24:11.860
Now, if your application
adds it to the keychain,

00:24:12.190 --> 00:24:15.440
obviously it will own it and it will
be able to use it for future purposes.

00:24:15.440 --> 00:24:18.700
If someone imports an
identity to the phone using,

00:24:18.910 --> 00:24:23.110
you know, email, Safari,
then it will actually only be accessible

00:24:23.110 --> 00:24:25.620
by the applications that Apple ships.

00:24:28.000 --> 00:26:14.500
[Transcript missing]

00:26:15.000 --> 00:28:57.200
[Transcript missing]

00:28:57.420 --> 00:29:00.150
Now that you have a trusted search chain,
you either can just go ahead and

00:29:00.230 --> 00:29:01.600
continue with your SSL connection.

00:29:01.600 --> 00:29:05.080
You know that you trust the server,
and you can start communicating secure

00:29:05.080 --> 00:29:09.500
data over that channel without worrying
that some other party is involved there.

00:29:09.500 --> 00:29:13.540
But maybe you have a trust
chain and you actually want

00:29:13.540 --> 00:29:14.820
to validate some information.

00:29:14.850 --> 00:29:19.990
Now, if you want to do a raw verify of
a signature somewhere on there,

00:29:20.000 --> 00:29:23.920
you're going to have to get a
SEC key to do that operation.

00:29:25.080 --> 00:29:29.250
So a SEC trust ref, after it's evaluated,
has the chain, and by that,

00:29:29.290 --> 00:29:32.910
it can actually get the public key
from the leaf as well as possible

00:29:32.910 --> 00:29:36.300
parameters that may exist in the
remainder of the chain to build you an

00:29:36.300 --> 00:29:40.770
appropriate key with which you can do,
you know, encryption or signing.

00:29:43.120 --> 00:29:45.970
If after all of this you have
a different way in which you'd

00:29:46.100 --> 00:29:50.140
like to establish whether you
trust this particular other host,

00:29:50.260 --> 00:29:53.490
you can, of course,
access the certificate chain

00:29:53.540 --> 00:29:55.070
as it was built up for you.

00:29:55.070 --> 00:29:59.220
It gives you access using
account and accessing all

00:29:59.220 --> 00:30:01.870
the items at various indexes.

00:30:02.250 --> 00:30:06.430
So that is SecTrust, and by that,
I've actually also, on the side,

00:30:06.770 --> 00:30:09.220
discussed the secure transport issue.

00:30:09.220 --> 00:30:12.680
On the desktop, there's secure transport,
which you could use if you wanted to be,

00:30:12.870 --> 00:30:16.300
you know, down to the metal or CF network
if you like that better.

00:30:16.300 --> 00:30:18.210
On the phone, we only have CF network.

00:30:18.220 --> 00:30:23.600
It's the same secure transport,
so there's full TLS SSL v3 support.

00:30:23.960 --> 00:30:28.120
And I've shown you with the examples
how we expect you to be able to do

00:30:28.300 --> 00:30:33.420
custom server certificate trust as
well as client-side authentication.

00:30:36.330 --> 00:30:41.000
So now we're all the way down
to the low-level crypto APIs.

00:30:41.000 --> 00:30:45.400
Those were similar in terms
of common crypto is the same.

00:30:45.400 --> 00:30:49.720
Common crypto allows you-- for people
that are new to this-- allows you to

00:30:49.720 --> 00:30:54.300
do various kinds of symmetric crypto,
and it also has algorithms to

00:30:54.300 --> 00:30:57.480
do secure hashing and HMACing.

00:30:57.820 --> 00:31:01.280
We've also added an API called
Sec Random to produce you random

00:31:01.290 --> 00:31:06.510
numbers that may be useful to you if you
end up wanting to generate a symmetric

00:31:06.510 --> 00:31:12.290
key of sorts that you can then store
on the keychain to keep it safe for you.

00:31:12.500 --> 00:31:47.300
[Transcript missing]

00:31:47.570 --> 00:31:51.690
For digesting, we have like a whole
suite of SHA digesting.

00:31:51.700 --> 00:31:55.410
If you were using OpenSSL before
and you actually want to

00:31:55.410 --> 00:31:58.280
make it easier on yourself,
you can define the common

00:31:58.280 --> 00:32:01.420
digest for OpenSSL,
do a pound to find of that,

00:32:01.420 --> 00:32:03.920
before you include the
common crypto header,

00:32:03.920 --> 00:32:11.460
and it will actually include a couple
of quick macros that will just convert

00:32:11.510 --> 00:32:16.760
your OpenSSL calls into the appropriate
digesting calls in common crypto.

00:32:17.500 --> 00:32:19.960
And last of all, there is HMAC.

00:32:20.040 --> 00:32:24.720
Of course,
pretty much similar to digest algorithms,

00:32:24.720 --> 00:32:27.610
we support the HMAC variant of that.

00:32:29.680 --> 00:32:32.200
As I mentioned,
some of these are accelerated.

00:32:32.200 --> 00:32:34.660
So the same goes for this here.

00:32:34.660 --> 00:32:38.850
AES shall one and HMAC shall one will,
as a result, be accelerated if you go

00:32:38.860 --> 00:32:40.610
across a certain threshold.

00:32:40.620 --> 00:32:41.210
It's hardware.

00:32:41.300 --> 00:32:42.640
You have to trap into the kernel.

00:32:42.640 --> 00:32:44.500
You know, there is a cost to that.

00:32:44.500 --> 00:32:48.540
So it has some built-in thresholds,
but you don't have to think about that.

00:32:48.540 --> 00:32:51.220
We'll pick an optimal
number and do it for you.

00:32:53.630 --> 00:32:56.320
So, SecRandom, it's a very simple API.

00:32:56.320 --> 00:32:59.550
It's really not something that
you may need a lot of help with.

00:32:59.720 --> 00:33:01.900
Normally speaking,
you just open DefRandom

00:33:01.900 --> 00:33:02.840
and get some bytes out.

00:33:02.840 --> 00:33:05.390
Well, this one actually doesn't
do it any different.

00:33:05.400 --> 00:33:08.620
It opens DefRandom for right now,
but in the future,

00:33:08.620 --> 00:33:11.550
if we have better random number sources,
we may, you know,

00:33:11.550 --> 00:33:14.670
find different ways to do it,
and you will be able to access

00:33:14.670 --> 00:33:16.460
those through SecRandom.

00:33:16.460 --> 00:33:22.190
The advantage here of using SecRandom
is that it gives us the ability

00:33:22.200 --> 00:33:23.840
of just opening DefRandom once.

00:33:23.840 --> 00:33:26.120
You don't have to write the
extra lines of code to open it,

00:33:26.170 --> 00:33:28.430
write a couple of bytes,
make sure that it was properly open so

00:33:28.430 --> 00:33:29.950
you don't just get a bunch of zeros.

00:33:29.960 --> 00:33:33.360
But if, you know, all the frameworks end
up using SecRandom,

00:33:33.360 --> 00:33:35.880
then there only really needs
to be one file descriptor open

00:33:35.880 --> 00:33:36.970
to get these random numbers.

00:33:36.980 --> 00:33:39.140
So that's why there is a function for it.

00:33:40.960 --> 00:33:43.020
Example usage shows how simple it is.

00:33:43.080 --> 00:33:45.620
Sec random copy bytes
does what you expect.

00:33:45.760 --> 00:33:48.690
It allows you to specify a
type of random numbers and,

00:33:48.690 --> 00:33:51.750
of course, a length and a buffer to put
them in to return them to you.

00:33:55.310 --> 00:33:58.470
So that was really all I had for
the API that exists on the phone

00:33:58.470 --> 00:34:02.100
and I'm sure we'll have a lot
of feedback from you about it.

00:34:02.410 --> 00:34:05.340
I did want to talk about root
certificates for a moment.

00:34:05.340 --> 00:34:07.640
Root certificates, of course,
play a role on the phone.

00:34:07.640 --> 00:34:11.440
They are not currently
modifiable by user APIs,

00:34:11.440 --> 00:34:16.310
but I'll show you how a user
can currently manipulate them.

00:34:16.700 --> 00:35:54.500
[Transcript missing]

00:35:55.100 --> 00:37:15.800
[Transcript missing]

00:37:16.100 --> 00:38:19.100
[Transcript missing]

00:38:19.390 --> 00:38:20.740
And that kind of concludes it.

00:38:20.800 --> 00:38:23.440
As I said, like,
let us know what you need to get

00:38:23.770 --> 00:38:25.040
your applications out and running.

00:38:25.040 --> 00:38:26.880
And, well,
we'll look forward to seeing some

00:38:26.880 --> 00:38:28.640
brilliant applications from you guys.

00:38:30.220 --> 00:38:34.810
So for more information,
the documentation was updated so

00:38:34.840 --> 00:38:41.550
that it also makes references to the
various pieces that apply on the phone.

00:38:43.100 --> 00:38:46.070
And there is a piece of sample
code out there that will specify

00:38:46.280 --> 00:38:49.080
to you how to deal with SecItem.

00:38:49.250 --> 00:38:51.540
If you have any questions that
you don't want to ask here,

00:38:51.540 --> 00:38:53.750
you can always contact Craig Keithley.

00:38:53.890 --> 00:38:58.060
And the related sessions, unfortunately,
are already over.

00:38:58.360 --> 00:38:59.370
They were earlier this week.

00:38:59.420 --> 00:39:04.660
I'm mentioning them now in case someone
watches this on a DVD in a future time,

00:39:04.860 --> 00:39:08.590
if such a thing comes to pass.

00:39:08.630 --> 00:39:11.760
And then they may be able to go
back and look at those sessions

00:39:11.830 --> 00:39:16.070
again and see if there is additional
information they can learn from those.

00:39:16.190 --> 00:39:20.060
However, this afternoon there will be
an iPhone OS security lab,

00:39:20.060 --> 00:39:22.100
which I will also be staffing.

00:39:22.100 --> 00:39:27.160
So me and a couple of colleagues will
be around to help you a little more

00:39:27.210 --> 00:39:32.060
hands-on than we may need to be able
to do here because we will obviously

00:39:32.400 --> 00:39:36.550
be asked to leave this room quickly
for the next session to happen.