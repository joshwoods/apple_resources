WEBVTT

00:00:21.540 --> 00:00:22.810
Good afternoon.

00:00:22.930 --> 00:00:25.220
My name is Kerry Hazelgren,
and welcome to the last

00:00:25.220 --> 00:00:27.790
session before the beer bash.

00:00:29.670 --> 00:00:33.900
We'll try to get you out of here on time,
so don't leave early.

00:00:33.900 --> 00:00:36.460
I'm the Automator Engineering Manager,
and today we're going to

00:00:36.540 --> 00:00:40.400
talk about building and
leveraging Automator Actions.

00:00:40.400 --> 00:00:42.990
We thought it would be a good idea,
since we've got so many new

00:00:42.990 --> 00:00:46.260
people here at WWDC this year,
which is a good thing,

00:00:46.410 --> 00:00:50.390
to give you a high-level
overview of what Automator is.

00:00:50.730 --> 00:00:53.390
Then we will talk about
building Automator Actions,

00:00:53.390 --> 00:00:58.090
and later on, how you can run Automator
workflows in your application.

00:00:58.190 --> 00:01:01.000
So, what is Automator?

00:01:01.030 --> 00:01:05.160
Well, the most important thing is the
name of the robot is "Auto."

00:01:05.360 --> 00:01:07.160
So just remember that.

00:01:07.160 --> 00:01:10.390
Well, Automator,
that can sometimes be either

00:01:10.400 --> 00:01:16.200
repetitive or time-consuming,
or perhaps it's something that's critical

00:01:16.710 --> 00:01:21.140
for your job or for your business,
something that needs to be done in

00:01:21.140 --> 00:01:25.780
exactly the same way every time,
and maybe there's many

00:01:25.860 --> 00:01:28.360
steps that are required,
and they all have to be done

00:01:28.360 --> 00:01:29.960
in exactly the same order.

00:01:29.960 --> 00:01:33.070
Well, Automator is perfect
for this sort of thing.

00:01:33.630 --> 00:01:37.810
Automator makes it really easy
to automate your daily tasks

00:01:37.890 --> 00:01:41.030
because we've got a simple
drag-and-drop user interface,

00:01:41.030 --> 00:01:42.850
and it's designed for everybody.

00:01:43.090 --> 00:01:48.600
So you don't need to know how to script
or code in order to create a workflow.

00:01:48.950 --> 00:01:51.140
If you open up Automator,
you'll see a document window

00:01:51.160 --> 00:01:53.780
that looks something like this.

00:01:53.780 --> 00:01:58.280
On the right-hand side,
we have Automator, or the workflow view.

00:01:58.420 --> 00:02:00.980
Workflows are composed of Actions.

00:02:01.200 --> 00:02:07.400
Actions are just simple bits
of self-defined code that

00:02:07.680 --> 00:02:11.100
have an input and an output.

00:02:11.820 --> 00:02:14.900
To the left of that is
the Actions Library.

00:02:15.050 --> 00:02:18.400
Automator ships with over 200
Actions right out of the box,

00:02:18.400 --> 00:02:21.600
with many more provided by
developers such as yourselves.

00:02:21.660 --> 00:02:26.080
And we compose or arrange
the Actions by category.

00:02:26.080 --> 00:02:30.520
And we have a wide variety of
categories that we tailor to,

00:02:30.520 --> 00:02:33.060
such as music, images, PDF.

00:02:33.880 --> 00:02:38.280
We even have a Documents category,
or I'm sorry, a Developer category,

00:02:38.280 --> 00:02:41.420
with Actions so that you can
create a workflow that will

00:02:41.420 --> 00:02:44.560
check out your source code,
build your Xcode project,

00:02:44.780 --> 00:02:46.860
and even package it up for distribution.

00:02:49.620 --> 00:02:51.460
Now, in Letbird,
we added some nice new features

00:02:51.600 --> 00:02:53.180
that I thought I'd quickly go over.

00:02:53.440 --> 00:02:54.390
The first one is recording.

00:02:54.390 --> 00:02:59.080
The reason recording is really
nice is because there are some

00:02:59.080 --> 00:03:04.260
applications and services that
aren't automatable in any other way,

00:03:04.260 --> 00:03:05.340
because they're not scriptable.

00:03:05.680 --> 00:03:11.660
So, with recording,
you can let Automator keep track of

00:03:11.710 --> 00:03:17.010
your mouse events and keyboard events,
and then when you're done,

00:03:17.010 --> 00:03:20.860
Automator will add this
Watch Me Do action to your workflow that,

00:03:20.860 --> 00:03:24.380
every time it's executed,
will replay those events

00:03:24.380 --> 00:03:25.900
as you perform them.

00:03:25.900 --> 00:03:28.160
So,
it's a great new feature for Automator.

00:03:30.030 --> 00:03:33.120
The next one is starting points.

00:03:33.590 --> 00:03:36.840
Pretty much every workflow
begins with an Action that

00:03:36.840 --> 00:03:39.690
provides your workflow with data.

00:03:40.110 --> 00:03:44.150
So what we wanted to do was give
you a way to easily identify

00:03:44.160 --> 00:03:47.300
the type of data that you want
to work with in your workflow.

00:03:47.320 --> 00:03:50.460
And then we take your selection
and identify the appropriate

00:03:50.960 --> 00:03:52.810
action and add it to the workflow.

00:03:52.990 --> 00:03:58.300
So it's kind of a way to just easily
get you started building your workflow.

00:04:00.500 --> 00:04:02.760
The third one is workflow variables.

00:04:02.830 --> 00:04:07.520
Variables in Automator workflows act just
like variables in any computer program.

00:04:07.640 --> 00:04:14.600
You can use them to store data and
retrieve that data at a later time.

00:04:15.750 --> 00:04:19.600
Variables in Automator workflows can
either store and retrieve the data

00:04:19.600 --> 00:04:24.600
that's flowing through the workflow,
or they're often used in conjunction

00:04:24.600 --> 00:04:28.660
with settings of Automator Actions,
so that simply by changing

00:04:28.660 --> 00:04:31.910
the value of a variable,
you can alter the behavior of

00:04:31.910 --> 00:04:33.880
that workflow when it runs.

00:04:33.880 --> 00:04:36.260
So it makes workflows more flexible.

00:04:39.300 --> 00:04:41.820
Now, in Snow Leopard,
we've added a few things that

00:04:41.920 --> 00:04:43.340
are important for you to hear.

00:04:43.490 --> 00:04:45.900
The first one is 64-bit.

00:04:46.040 --> 00:04:49.120
Now, in conjunction with the whole
effort of Snow Leopard to increase

00:04:49.230 --> 00:04:53.520
performance and streamline things,
Automator is 64-bit in Snow Leopard.

00:04:53.520 --> 00:04:57.660
So,
if your Actions are not built for 64-bit,

00:04:57.900 --> 00:05:01.270
Automator will not be able to load them.

00:05:02.140 --> 00:05:07.830
Bear in mind that this only
applies to Cocoa Automator Actions.

00:05:08.000 --> 00:05:12.060
Since AppleScript and ShellScript Actions
are not compiled binaries,

00:05:12.150 --> 00:05:14.090
it doesn't apply to them.

00:05:14.720 --> 00:05:17.500
The other thing is garbage collection.

00:05:17.540 --> 00:05:19.360
Now,
we've taken the step to make Automator

00:05:19.610 --> 00:05:24.400
garbage collected as well in 64-bit,
so your Actions also need to

00:05:24.400 --> 00:05:27.640
support garbage collection,
or else Automator will

00:05:27.650 --> 00:05:28.750
not be able to load them.

00:05:28.760 --> 00:05:30.890
We thought it would be a
good time to take both of

00:05:30.890 --> 00:05:32.380
those steps at the same time.

00:05:32.380 --> 00:05:35.690
And while you're adding 64-bit support,
go ahead and add garbage

00:05:35.690 --> 00:05:36.880
collection support.

00:05:39.340 --> 00:05:41.300
And then lastly,
we've got some new APIs that

00:05:41.450 --> 00:05:42.330
we'll be talking about.

00:05:42.360 --> 00:05:45.580
So how does this concern you?

00:05:45.580 --> 00:05:52.280
Well, we've created a very open system
whereby you can create Automator

00:05:52.280 --> 00:05:54.190
Actions for your application.

00:05:54.200 --> 00:05:59.650
When you do so, you make your application
available to new users.

00:05:59.720 --> 00:06:02.760
They're available in a new
and interesting way to them.

00:06:02.760 --> 00:06:08.090
And when users of Automator are
creating their workflows for,

00:06:08.090 --> 00:06:10.550
say, their critical task.

00:06:10.930 --> 00:06:15.560
They may find that your Action fills a
need that they have in that workflow.

00:06:15.620 --> 00:06:19.100
And so once you're part of
their automated workflow,

00:06:19.130 --> 00:06:20.390
they'll stick with you.

00:06:20.550 --> 00:06:22.620
Because once you automate something,
you don't ever want to go

00:06:22.620 --> 00:06:24.640
back to doing it manually.

00:06:24.830 --> 00:06:30.900
So it's a good way to get new customers
and to keep them-- hold them hostage,

00:06:30.950 --> 00:06:36.780
no-- keep them as part
of their daily workflow.

00:06:37.800 --> 00:06:41.510
So to talk more about,
there's another bill there.

00:06:41.800 --> 00:06:45.220
To talk more about
creating Automator Actions,

00:06:45.240 --> 00:06:49.980
I would like to invite up Emilie Kim,
our Automator Ninja.

00:06:58.200 --> 00:07:00.280
Hi, I'm Emilie, and today we're going to
talk about building and

00:07:00.280 --> 00:07:02.440
leveraging Automator Actions.

00:07:02.550 --> 00:07:04.750
Before we get started,
let's first take a look at

00:07:04.820 --> 00:07:08.110
the big picture and see how
all of these fit together.

00:07:08.950 --> 00:07:12.400
Actions are the foundational building
blocks of Automator's technology.

00:07:12.660 --> 00:07:16.240
Without Actions,
you wouldn't be able to create workflows.

00:07:16.350 --> 00:07:18.950
And if you couldn't create workflows,
then you wouldn't be able to add

00:07:19.060 --> 00:07:24.070
functionality to many applications,
most importantly, your own application.

00:07:24.180 --> 00:07:27.580
So that's why today we're going to
focus on how to build Automator Actions,

00:07:27.840 --> 00:07:30.760
and then what you can do with the
workflows that result from those Actions.

00:07:30.890 --> 00:07:34.110
So first, building Automator Actions.

00:07:35.040 --> 00:07:37.020
What you're going to learn in
this part of the session is

00:07:37.070 --> 00:07:40.340
how Automator Actions work,
how they work conceptually,

00:07:40.420 --> 00:07:41.900
and what they're made out of.

00:07:42.020 --> 00:07:45.050
Then we'll talk about what's new in
Snow Leopard with respect to Actions,

00:07:45.050 --> 00:07:49.490
and then we'll see a demo of how you
can actually create your own Actions.

00:07:51.400 --> 00:07:54.000
What are Automator Actions conceptually?

00:07:54.000 --> 00:07:57.600
Let's say you had a bunch of pictures,
and you wanted to make them smaller.

00:07:57.600 --> 00:08:01.160
An Automator Action might be
something like Scale Images.

00:08:01.160 --> 00:08:05.900
It does one task, and it takes input,
which are your first set of images,

00:08:05.900 --> 00:08:09.920
and then it provides output,
which are your smaller images.

00:08:10.270 --> 00:08:12.400
So you might say to yourself,
"That's not very impressive.

00:08:12.400 --> 00:08:13.710
That's just one thing.

00:08:13.710 --> 00:08:16.600
Scaling images,
any photo program could do that."

00:08:16.600 --> 00:08:21.630
But now let's say you're here at WWDC,
and you have these great photos that

00:08:21.720 --> 00:08:23.900
you took while you were on vacation,
and you want to send them to all of

00:08:23.900 --> 00:08:28.320
your friends who weren't able to come
to WWDC just to rub it in their faces.

00:08:28.540 --> 00:08:34.860
So you might do something like get a set
of Actions such as scale your images,

00:08:35.010 --> 00:08:38.940
rotate them, apply a color filter,
and then email them to your friends.

00:08:39.000 --> 00:08:41.770
Then that way they can see what
a great time you're having here.

00:08:41.860 --> 00:08:44.920
You can kind of think of this
workflow as a set of Unix pipes.

00:08:45.300 --> 00:08:47.740
You have a bunch of commands,
and then data flows through

00:08:47.740 --> 00:08:50.160
them as they would in pipes.

00:08:50.270 --> 00:08:53.950
So you take your big images,
and you send them through these Actions,

00:08:54.050 --> 00:08:57.020
and then out on the other end,
you get an email message that has

00:08:57.020 --> 00:08:59.040
these pictures as attachments to them.

00:08:59.070 --> 00:09:01.330
And you can run this
workflow over and over again.

00:09:01.340 --> 00:09:03.140
That's the power behind Automator.

00:09:03.180 --> 00:09:06.140
And it'll do the exact same thing
every time to all of your photos,

00:09:06.190 --> 00:09:11.080
at least until you don't have any friends
left because they think you're a jerk.

00:09:11.620 --> 00:09:14.110
Now that we know about that,
let's talk about how we can

00:09:14.140 --> 00:09:15.840
make these Automator Actions.

00:09:15.840 --> 00:09:18.380
There is a common misconception
that Automator is simply a

00:09:18.380 --> 00:09:19.800
front-end for AppleScript.

00:09:19.940 --> 00:09:23.050
If there is one thing you
take away from this session,

00:09:23.190 --> 00:09:24.700
it is that this is false.

00:09:24.920 --> 00:09:26.700
Automator is not a
front-end to AppleScript.

00:09:26.800 --> 00:09:30.990
So the next time you say to someone, "Oh,
yeah, I was at this Automator

00:09:31.110 --> 00:09:34.050
session at WWDC," and they say,
"Oh, really?

00:09:34.130 --> 00:09:38.630
I thought Automator was just a
front-end for AppleScript," you can say,

00:09:38.730 --> 00:09:39.780
"No, that is not true.

00:09:39.780 --> 00:09:39.780
Swear to it."

00:09:40.030 --> 00:09:42.460
The first kind of Automator
Action you can create is Cocoa.

00:09:42.460 --> 00:09:46.440
Notice how the word "AppleScript"
is nowhere on this slide at all.

00:09:46.480 --> 00:09:49.190
Cocoa Actions are written in Objective-C,
and you can take advantage of all the

00:09:49.190 --> 00:09:51.000
Cocoa frameworks available to you.

00:09:51.010 --> 00:09:55.700
Now, that being said,
you can also create AppleScript Actions.

00:09:55.710 --> 00:09:58.680
And then, last but not least,
you can also create Actions in any

00:09:58.690 --> 00:10:00.200
scripting language of your choice.

00:10:00.210 --> 00:10:04.000
For example, Ruby, Python, or Bash.

00:10:04.090 --> 00:10:07.460
So, now that you know how you
can make Automator Actions,

00:10:07.480 --> 00:10:11.320
let's talk about what kinds of
applications you can interface with.

00:10:11.340 --> 00:10:14.060
Actions can be made for
anything that provides APIs,

00:10:14.060 --> 00:10:15.480
such as a framework.

00:10:15.610 --> 00:10:18.620
You can also interact with anything
that has a scripting interface,

00:10:18.700 --> 00:10:21.020
such as iTunes or iPhoto.

00:10:21.080 --> 00:10:23.950
Hopefully, you all went to the "Making
Your Application Scriptable"

00:10:23.950 --> 00:10:25.330
session earlier today.

00:10:25.620 --> 00:10:28.140
You can also interact with
command-line tools such as

00:10:28.210 --> 00:10:31.190
HDI Util to make Automator Actions.

00:10:31.550 --> 00:10:35.040
Now that we know conceptually how
Automator Actions work and how we can

00:10:35.040 --> 00:10:38.160
build that make up each Automator Action.

00:10:38.320 --> 00:10:39.740
First, we have source files.

00:10:39.990 --> 00:10:41.360
Pretty straightforward.

00:10:41.430 --> 00:10:44.080
Then we have a user
interface on top of that.

00:10:44.140 --> 00:10:47.060
This is how your user sees your
technology when you're making

00:10:47.060 --> 00:10:49.450
Automator Actions in Automator.

00:10:49.590 --> 00:10:51.650
And we also have Action properties.

00:10:51.750 --> 00:10:54.710
So we're going to talk about each one
of these in a little bit more detail.

00:10:54.930 --> 00:10:57.670
First, let's talk about source files.

00:10:57.820 --> 00:10:59.540
As I already mentioned,
there are three different

00:10:59.540 --> 00:11:03.720
kinds of Actions you can make:
Cocoa Actions, AppleScript Actions,

00:11:03.830 --> 00:11:05.840
and ShellScript Actions.

00:11:05.870 --> 00:11:08.410
These Actions can be created
in Xcode using templates

00:11:08.590 --> 00:11:10.040
that we've provided for you.

00:11:10.210 --> 00:11:13.320
If you create a Cocoa Action,
Xcode will create a subclass

00:11:13.320 --> 00:11:16.080
of "am_bundle" Action,
which is part of the Automator framework,

00:11:16.110 --> 00:11:18.580
and then your code goes into
the "runWithInput" method.

00:11:18.700 --> 00:11:23.660
This is the method that gets called
when Automator asks your Action to run.

00:11:23.690 --> 00:11:25.860
Likewise,
if you create an AppleScript Action,

00:11:25.870 --> 00:11:29.100
you'll be presented with this onRun
handler that you can put your code in,

00:11:29.120 --> 00:11:31.340
and this is also what
Automator will call.

00:11:31.360 --> 00:11:32.760
And then if you have
a ShellScript Action,

00:11:32.760 --> 00:11:34.790
you'll be presented with
this template file that you

00:11:34.790 --> 00:11:36.800
can change however you want.

00:11:36.880 --> 00:11:38.530
So, that's source code.

00:11:38.580 --> 00:11:40.400
We're all developers here,
so we don't really need to

00:11:40.400 --> 00:11:41.250
spend too much time on this.

00:11:41.360 --> 00:11:43.450
Presumably,
you all know how to code already.

00:11:43.560 --> 00:11:45.220
So let's take a look
at the user interface,

00:11:45.240 --> 00:11:46.920
which we might need a
little bit more help with,

00:11:46.920 --> 00:11:49.360
being engineers and developers here.

00:11:49.440 --> 00:11:51.520
So, the user interface.

00:11:51.540 --> 00:11:54.370
Like Mac OS X applications,
and like iPhone applications,

00:11:54.480 --> 00:11:58.700
you also make Automator Action user
interfaces using Interface Builder.

00:11:58.870 --> 00:12:00.900
As you can see,
you're presented with the standard

00:12:00.900 --> 00:12:04.810
library that you use with any other UI,
and you can put any of

00:12:04.810 --> 00:12:06.980
those in your Actions view.

00:12:07.560 --> 00:12:11.700
Specifically in the Automator palette,
we have two Automator-specific controls.

00:12:11.700 --> 00:12:13.900
We have first, AM Token field.

00:12:13.900 --> 00:12:16.500
As Kerry mentioned in the introduction,
in Leopard,

00:12:16.500 --> 00:12:18.660
we added variable support to Automator.

00:12:18.700 --> 00:12:22.500
This is how users can add variables to
your Action to provide a more custom

00:12:22.540 --> 00:12:24.500
workflow every time they run it.

00:12:24.690 --> 00:12:28.210
And so you should use this instead
of a standard NS Text field when

00:12:28.540 --> 00:12:30.980
adding these controls to your Action.

00:12:31.620 --> 00:12:33.560
Next, we have AMPath Popup Button.

00:12:33.830 --> 00:12:36.770
This is a popup button that's been
pre-populated with certain common

00:12:36.770 --> 00:12:39.400
locations on the user's system,
such as the desktop,

00:12:39.590 --> 00:12:42.180
the documents folder,
or the pictures folder.

00:12:42.350 --> 00:12:45.790
You should use this popup button when
you want to provide location-specific

00:12:45.870 --> 00:12:49.020
controls in your Action,
such as copy finder items.

00:12:49.020 --> 00:12:51.140
Where should you copy them to?

00:12:53.780 --> 00:12:56.720
Now that we've talked about a little
bit how you can design your Actions,

00:12:56.810 --> 00:12:58.990
and Kerry will show you in
more detail in the demo,

00:12:58.990 --> 00:13:01.640
let's talk about a few
guidelines you should follow.

00:13:01.780 --> 00:13:04.790
First,
you should keep it small and simple.

00:13:04.900 --> 00:13:07.810
This means using small
controls and small labels,

00:13:07.810 --> 00:13:11.550
and maintaining a 10-pixel
border around all of these.

00:13:11.890 --> 00:13:14.740
You also want to follow
standard Aqua guidelines,

00:13:14.780 --> 00:13:17.660
and Interface Builder will help you
out with that by showing you these

00:13:17.830 --> 00:13:20.200
guides in the view in Interface Builder.

00:13:20.240 --> 00:13:23.200
You also want to provide
feedback to your user.

00:13:23.200 --> 00:13:25.930
Let's say you have an Action that
populates its pop-up buttons

00:13:25.930 --> 00:13:29.150
with the names of all the iTunes
playlists that the user has.

00:13:29.280 --> 00:13:32.130
This might take a while, so to do this,
you should show a progress indicator

00:13:32.130 --> 00:13:34.490
in your Action to make sure that
the user knows your Action is still

00:13:34.550 --> 00:13:36.130
doing something and loading the UI.

00:13:36.440 --> 00:13:39.480
Another example might be if you
had an Action that prepended text

00:13:39.480 --> 00:13:41.160
to the beginning of file names.

00:13:41.240 --> 00:13:43.500
You should make sure that the
user knows what this will look

00:13:43.500 --> 00:13:45.910
like when they run your action.

00:13:46.430 --> 00:13:49.100
To provide more inspiration,
you can also look at Actions

00:13:49.160 --> 00:13:51.700
that ship with Automator,
and you can also read the Automator

00:13:51.700 --> 00:13:55.000
Programming Guide for more details on
how to actually design your Actions.

00:13:55.130 --> 00:13:58.840
So, we've talked about source files,
we've talked about the user interface,

00:13:58.960 --> 00:14:02.040
now let's take a quick
look at Action properties.

00:14:02.900 --> 00:14:59.000
[Transcript missing]

00:14:59.360 --> 00:15:00.310
First, 64-bit.

00:15:00.520 --> 00:15:02.150
Kerry mentioned that
Automator is now 64-bit,

00:15:02.270 --> 00:15:03.900
so your Actions should be also.

00:15:03.970 --> 00:15:07.010
All you have to do is go to the build
settings of your project and change the

00:15:07.010 --> 00:15:10.300
architectures to be 32-64-bit universal.

00:15:10.330 --> 00:15:12.660
Likewise with garbage collection,
change Objective-C garbage

00:15:12.840 --> 00:15:14.050
collection to be supported.

00:15:14.260 --> 00:15:18.600
And again, this only has to do with
previously developed Cocoa Actions,

00:15:18.600 --> 00:15:20.520
not AppleScript Actions,
not ShellScript Actions,

00:15:20.520 --> 00:15:23.420
and not Actions that you've
created on Snow Leopard.

00:15:23.560 --> 00:15:26.280
We've also allowed you to define
custom UTIs in your FOP list if

00:15:26.390 --> 00:15:29.690
you're defining UTIs that are
specific to your application,

00:15:29.690 --> 00:15:32.940
as well as provided you a way
to dynamically change the input

00:15:32.940 --> 00:15:35.580
and output types of your Action,
and we've provided API to

00:15:35.580 --> 00:15:38.300
show determinate progress
as your Action is running.

00:15:38.300 --> 00:15:41.290
And I'm going to talk about both
of those in a little more detail.

00:15:42.860 --> 00:15:46.780
First, dynamically changing the input
and output types of your Action.

00:15:46.780 --> 00:15:50.470
Automator ships with an
Action called Find Photos in iPhoto.

00:15:50.740 --> 00:15:54.800
This Action has a pop-up in it,
so you can find either Photos or Albums.

00:15:54.800 --> 00:15:56.580
And then depending on what you choose,
the output of the

00:15:56.580 --> 00:15:57.440
Action will be different.

00:15:57.440 --> 00:15:59.840
Previously,
there was no way for you guys to

00:15:59.840 --> 00:16:03.670
take advantage of this and create
more dynamic and flexible Actions,

00:16:03.670 --> 00:16:06.840
but now we've added API to
AM Action to let you do this.

00:16:07.320 --> 00:16:11.120
You can now get the selected input type
as well as set the selected input type,

00:16:11.140 --> 00:16:14.300
as well as get the selected output
type and set the selected output type.

00:16:14.390 --> 00:16:16.780
Try saying that very quickly.

00:16:17.360 --> 00:16:19.930
Also,
we've added the API to show determinate

00:16:20.070 --> 00:16:22.700
progress as your Action is running.

00:16:22.700 --> 00:16:25.150
This provides a great user
experience for your users,

00:16:25.250 --> 00:16:27.360
because now they can see,
as your Action is running,

00:16:27.560 --> 00:16:28.590
the progress that it's making.

00:16:28.600 --> 00:16:31.240
So instead of it just being an
indeterminate progress indicator,

00:16:31.240 --> 00:16:33.890
they can actually see that your
Action is making progress and an

00:16:33.890 --> 00:16:35.570
expected idea of when it might be done.

00:16:35.600 --> 00:16:38.500
If you now look in the lower
left corner of the Action,

00:16:38.500 --> 00:16:41.730
you'll see that when an
Action takes advantage of this API,

00:16:41.730 --> 00:16:44.760
you'll see a determinate
progress indicator now.

00:16:44.760 --> 00:16:47.120
And you should all definitely
take advantage of this.

00:16:47.120 --> 00:16:49.620
We've added new API to AM Action,
which is progress value

00:16:49.760 --> 00:16:50.920
and set progress value.

00:16:50.920 --> 00:16:53.640
And then we've also made it
an Apple-scriptable property,

00:16:53.640 --> 00:16:56.720
so all AppleScript Actions can
also take advantage of this.

00:16:58.060 --> 00:17:01.900
So, we've gone over how
Automator Actions work,

00:17:01.940 --> 00:17:04.250
what Actions are made out of,
and then what's new at

00:17:04.370 --> 00:17:05.800
Snow Leopard for Actions.

00:17:05.870 --> 00:17:09.000
So now, I'm going to bring Kerry up
on stage for a quick demo.

00:17:09.000 --> 00:17:12.300
In this demo, you'll learn how to
create an Action project.

00:17:12.320 --> 00:17:14.760
Then Kerry will show you how
you can implement the source,

00:17:14.940 --> 00:17:17.600
design the user interface,
as well as set the Action properties

00:17:17.660 --> 00:17:20.160
that we talked about,
and then how you can also update

00:17:20.160 --> 00:17:21.800
your Actions for Snow Leopard.

00:17:21.850 --> 00:17:24.900
So, Kerry?

00:17:24.900 --> 00:17:26.470
Thank you.

00:17:28.200 --> 00:17:29.200
Thank you.

00:17:29.200 --> 00:17:31.600
Don't want to get the wrong water.

00:17:31.600 --> 00:17:33.240
I think she's coming down with a cold,
right?

00:17:36.450 --> 00:17:41.090
Okay, first thing I want to do is create
a simple shell script action that

00:17:41.240 --> 00:17:44.270
will find some images on the system.

00:17:44.640 --> 00:17:49.360
So when I open--I'll go to Xcode and
select New Project from the File menu.

00:17:49.560 --> 00:17:53.000
And you can see on the left-hand
side here in Xcode 3.1,

00:17:53.000 --> 00:17:54.700
there are some different categories.

00:17:54.700 --> 00:17:57.430
And we have a category
for Automator Actions.

00:17:57.600 --> 00:18:00.300
And inside that,
we have three different templates,

00:18:00.310 --> 00:18:04.700
one for each of the different kinds of
Automator Actions that you can create.

00:18:04.910 --> 00:18:08.000
So I'm gonna create a
Shell script Action.

00:18:08.030 --> 00:18:12.140
And label it, find images.

00:18:13.840 --> 00:18:17.300
Okay, so now we get the project,
and let's look at it.

00:18:17.330 --> 00:18:20.460
We have a scripts folder here
instead of a classes folder,

00:18:20.640 --> 00:18:22.680
and inside the scripts folder,
there is a shell script,

00:18:22.680 --> 00:18:23.560
an empty shell script.

00:18:23.640 --> 00:18:25.380
Well, it's mostly empty.

00:18:25.380 --> 00:18:28.980
We just have a cat command here,
and we're going to remove

00:18:28.980 --> 00:18:31.260
that in favor of some text.

00:18:31.300 --> 00:18:32.460
Where's my text?

00:18:32.480 --> 00:18:33.790
I don't know.

00:18:34.060 --> 00:18:37.410
Hang on.

00:18:44.760 --> 00:18:45.250
Here's my text.

00:18:45.250 --> 00:18:48.010
We're going to remove that
in favor of some text here.

00:18:48.010 --> 00:18:51.430
And this is just going to run a
simple spotlight search for some

00:18:51.450 --> 00:18:53.490
images in my pictures directory.

00:18:53.500 --> 00:18:56.920
Now,
since I'm just doing this for myself,

00:18:56.920 --> 00:18:57.680
I'm going to stop there.

00:18:57.680 --> 00:18:58.630
I'm not going to go any further.

00:18:58.640 --> 00:19:00.580
I'm just going to build and go.

00:19:00.580 --> 00:19:03.100
And what this will do is
compile the AppleScript action,

00:19:03.100 --> 00:19:05.160
or the ShellScript action, I should say.

00:19:05.160 --> 00:19:07.900
I keep perpetuating that
AppleScript stereotype.

00:19:07.900 --> 00:19:11.930
It's going to compile the
ShellScript action and launch Automator.

00:19:12.660 --> 00:19:16.560
Now, since we didn't configure it
anymore than we needed to,

00:19:16.560 --> 00:19:18.840
it's going to appear
in the other category.

00:19:18.840 --> 00:19:19.660
And there it is.

00:19:19.660 --> 00:19:20.980
It's called Find Images.

00:19:20.980 --> 00:19:24.040
And we have just the default
user interface on it.

00:19:24.240 --> 00:19:26.230
And as you can see down here,
we also just have the

00:19:26.230 --> 00:19:27.440
default description.

00:19:27.440 --> 00:19:28.720
But that's okay.

00:19:28.720 --> 00:19:31.290
If we run it, we'll see that it runs.

00:19:31.320 --> 00:19:32.980
Oh, that's pretty loud.

00:19:32.980 --> 00:19:35.350
And if we look at the results,
we can see that we've

00:19:35.350 --> 00:19:36.600
got some images here.

00:19:36.600 --> 00:19:40.930
I thought I had one of a petunia,
but that's all right.

00:19:41.360 --> 00:19:42.060
So.

00:19:42.660 --> 00:19:44.090
This is good enough for me.

00:19:44.100 --> 00:19:47.630
If we, however,
we're going to distribute this

00:19:47.630 --> 00:19:51.790
action with our application
or give it to someone else,

00:19:51.790 --> 00:19:54.960
we'd want to set it up a little bit
more so it looked a little prettier.

00:19:54.960 --> 00:19:56.860
So I'm going to do that next.

00:19:56.880 --> 00:19:58.070
Let me close this.

00:20:00.950 --> 00:20:03.460
And close this project.

00:20:03.510 --> 00:20:05.330
Now,
I have an AppleScript Action here called

00:20:05.480 --> 00:20:09.850
Convert Images to Letterboxd Format,
which is what it does.

00:20:10.490 --> 00:20:15.180
And as you can see in the project here,
instead of a shell script file,

00:20:15.180 --> 00:20:16.880
we have an AppleScript file.

00:20:16.880 --> 00:20:18.810
I will come back to that.

00:20:19.000 --> 00:20:23.510
First thing I want to do
is open up the main.nib and

00:20:23.510 --> 00:20:26.020
connect up my user interface.

00:20:26.380 --> 00:20:31.370
Now,
every Action has a parameters dictionary.

00:20:31.370 --> 00:20:35.230
And so in every nib for
every Automator Action,

00:20:35.450 --> 00:20:39.550
we have this object controller,
which is bound to the parameters

00:20:39.570 --> 00:20:41.330
dictionary of our Action.

00:20:41.340 --> 00:20:46.120
So what I want to do now is
connect my user interface element

00:20:46.130 --> 00:20:51.490
to that object controller so it
establishes the Cocoa binding all

00:20:51.490 --> 00:20:54.840
the way into my Actions parameters.

00:20:56.930 --> 00:21:01.540
So I'm going to select this pop-up here,
and I want to bind its selected

00:21:02.670 --> 00:21:04.920
index to the parameters.

00:21:05.300 --> 00:21:13.300
[Transcript missing]

00:21:13.880 --> 00:21:15.460
And that's all we need
to do with the Nib.

00:21:15.620 --> 00:21:16.660
So it's fairly simple.

00:21:16.660 --> 00:21:21.380
Just create your user interface,
bind it up to your parameters object.

00:21:21.400 --> 00:21:23.420
And with that,
we can save it and close it.

00:21:23.640 --> 00:21:30.000
Now what I need to do is add the
parameter conversion method to the

00:21:30.000 --> 00:21:32.740
parameters dictionary of my object.

00:21:32.760 --> 00:21:35.550
And to do that,
I'm gonna open up the target

00:21:35.640 --> 00:21:37.840
inspector for my project.

00:21:37.850 --> 00:21:41.720
This is just a typical target
inspector for any Xcode project,

00:21:41.730 --> 00:21:46.240
except that when you're
inspecting an Automator Action,

00:21:46.260 --> 00:21:48.720
in the properties pane here,
this lower section,

00:21:48.720 --> 00:21:52.680
as you saw in Emilie's slides,
is specific to Automator Actions.

00:21:52.840 --> 00:21:55.020
And we have a lot of properties
here that can be edited,

00:21:55.020 --> 00:21:58.340
such as the action name,
the application and category,

00:21:58.380 --> 00:22:01.320
which determines where it
shows up in the library,

00:22:01.350 --> 00:22:02.940
and the icon.

00:22:02.980 --> 00:22:05.620
There's also some other,
if you pop up this popup here,

00:22:05.660 --> 00:22:07.280
there's some other
parameters that you can,

00:22:07.280 --> 00:22:11.400
or settings that you can change,
such as the input and output type.

00:22:11.400 --> 00:22:16.540
And here we've got the action set to
an AppleScript alias object dot image.

00:22:16.540 --> 00:22:20.340
That's a very specific AppleScript type,
saying it's an AppleScript object

00:22:20.340 --> 00:22:22.500
that represents an image.

00:22:22.500 --> 00:22:26.290
It's always good to have a very
specific UTI type for your actions

00:22:26.430 --> 00:22:28.590
so that Automator can deal with it.

00:22:28.740 --> 00:22:34.110
So what I wanna do is go to
the parameters and add one

00:22:34.180 --> 00:22:37.250
called conversion method.

00:22:41.490 --> 00:22:44.900
And since we bound our
pop-up to the selected index,

00:22:44.950 --> 00:22:46.880
this needs to be an integer.

00:22:46.890 --> 00:22:49.380
And I'm going to set a value of zero,
representing the first

00:22:49.380 --> 00:22:51.510
item in the pop-up.

00:22:53.610 --> 00:22:57.890
Okay, so now if we go back to our script,
we can open up our Apple script and

00:22:57.910 --> 00:23:00.420
see that there is an on-run method.

00:23:00.420 --> 00:23:03.010
Every Apple script action
has an on-run method.

00:23:03.020 --> 00:23:07.000
And in this line right here,
we can see how we can get the

00:23:07.120 --> 00:23:10.990
value of our conversion method
in the parameters dictionary to,

00:23:11.160 --> 00:23:13.530
you know, to read that in our script.

00:23:16.330 --> 00:23:20.020
So with that, I can build the A action,
and it built.

00:23:20.030 --> 00:23:22.170
And I'm not going to run it just yet,
because I've got one

00:23:22.170 --> 00:23:24.910
more Action to work on,
and then we'll create a workflow

00:23:24.910 --> 00:23:26.760
that contains all three of them.

00:23:28.320 --> 00:23:30.560
So I'm going to close that for now.

00:23:30.620 --> 00:23:34.690
And I'm going to go to my next Action,
which is Adjust Gamma.

00:23:34.830 --> 00:23:37.600
Now,
this Action was written a few years ago,

00:23:37.640 --> 00:23:42.580
and it actually ships as an example
Action in Developer Examples.

00:23:42.730 --> 00:23:45.950
The thing we need to do here
is update it for Snow Leopard.

00:23:46.030 --> 00:23:48.190
It's a Cocoa Action,
so we need to make sure that

00:23:48.190 --> 00:23:51.750
it builds for 64-bit and has
garbage collection support.

00:23:52.470 --> 00:23:54.840
So let's just open up
our target inspector,

00:23:54.840 --> 00:23:56.280
or actually our project inspector.

00:23:56.280 --> 00:23:58.870
And we'll go to the Build pane.

00:23:58.880 --> 00:24:03.160
And right here with
this architectures row,

00:24:03.160 --> 00:24:07.710
what we want to do is select 32-bit,
32-64-bit universal.

00:24:07.740 --> 00:24:09.600
And that's all we need to do.

00:24:09.600 --> 00:24:12.960
Now it'll build two-way, 32-64.

00:24:12.960 --> 00:24:15.680
And then to add garbage
collection support,

00:24:15.680 --> 00:24:19.420
I find the easiest way is
to just search for garbage.

00:24:19.420 --> 00:24:21.550
Ah, if I could spell it right.

00:24:21.900 --> 00:24:22.480
Garbage.

00:24:22.480 --> 00:24:23.160
There you go.

00:24:23.200 --> 00:24:26.760
And what we want to do
is choose supported.

00:24:26.760 --> 00:24:27.920
Okay?

00:24:27.920 --> 00:24:29.260
And that's all we need to do there.

00:24:31.240 --> 00:24:33.750
Now, looking at our source code,
you can see now instead of a script,

00:24:33.890 --> 00:24:35.500
we have class files.

00:24:35.650 --> 00:24:39.340
If I open up adjustgamma.m,
now I want to add support

00:24:39.340 --> 00:24:40.890
for determinant progress.

00:24:40.900 --> 00:24:43.320
In order to do this, it's really easy.

00:24:43.320 --> 00:24:44.770
I'm just going to add
three lines of code.

00:24:44.780 --> 00:24:47.940
Okay, at the beginning here,
I'm going to add one line that just

00:24:48.020 --> 00:24:51.800
sets our progress value to zero,
to just initialize our progress value.

00:24:53.730 --> 00:24:56.450
Then down here a little bit further,
we have a for loop.

00:24:56.480 --> 00:25:01.740
And this is the one that processes
each image that's passed to the action.

00:25:01.820 --> 00:25:03.940
So sort of at the bottom
of this loop here,

00:25:03.940 --> 00:25:06.100
I'm gonna add two more lines.

00:25:06.110 --> 00:25:10.440
One of them is just a counter that
updates each time through the loop.

00:25:10.440 --> 00:25:14.870
And the next one just sort of
calculates based on that counter,

00:25:14.880 --> 00:25:17.470
it updates our progress value.

00:25:20.430 --> 00:25:21.390
That's all I need to do there.

00:25:21.400 --> 00:25:23.800
Now,
one last thing before I build and go.

00:25:23.800 --> 00:25:29.160
I need to change from the
10.5 SDK to the 10.6 SDK,

00:25:29.180 --> 00:25:31.140
cuz we're using some
new Snow Leopard APIs.

00:25:31.160 --> 00:25:36.070
Okay, with that, we can build and go.

00:25:36.790 --> 00:25:43.610
It's going to compile 32-bit, 64-bit,
and launch Automator when it's done.

00:25:45.500 --> 00:25:50.120
Okay, as you recall,
our first Action was in the

00:25:50.120 --> 00:25:51.580
Other category called Find Images.

00:25:51.580 --> 00:25:55.900
Our second Action was in the
Photos category called Convert

00:25:55.900 --> 00:25:57.570
Images to Letterboxd Format.

00:25:57.580 --> 00:26:03.760
Now, what Automator is doing here is it's
reading a property of that Action,

00:26:03.760 --> 00:26:07.900
the Convert Images to Letterboxd Format,
which says this Action performs an

00:26:08.020 --> 00:26:12.690
irreversible operation on these files,
and it suggests that we add a

00:26:12.910 --> 00:26:16.490
Copy Finder Items Action before
it to make a copy of the files.

00:26:16.520 --> 00:26:18.030
So we want to do that.

00:26:18.140 --> 00:26:20.650
So I click Add,
and it'll add Copy Finder Items,

00:26:20.650 --> 00:26:24.110
and then it'll add our image,
Convert Images to Letterboxd Format.

00:26:24.150 --> 00:26:27.140
Now,
our third image was Adjust Image Gamma,

00:26:27.140 --> 00:26:28.380
so we're going to add that.

00:26:28.470 --> 00:26:31.320
And then lastly,
I want to open them in Preview.

00:26:32.710 --> 00:26:35.330
And I'm just going to turn
up the gamma a little bit,

00:26:35.330 --> 00:26:39.250
because it's kind of a subtle effect,
and it sort of adjusts

00:26:39.260 --> 00:26:41.190
the contrast of the image.

00:26:41.350 --> 00:26:43.970
So now when I run this,
pay attention to the progress.

00:26:44.070 --> 00:26:47.470
You'll see Adjust Image Gamma should
have a progress indicator here,

00:26:47.480 --> 00:26:49.310
a determinant progress indicator.

00:26:49.320 --> 00:26:52.120
We've also implemented
that in copy finder items,

00:26:52.170 --> 00:26:54.420
but the other ones will
show indeterminate progress.

00:26:54.570 --> 00:26:56.790
So let me run it.

00:26:58.000 --> 00:27:04.650
And you can see as it processes,
here it's processing these files.

00:27:05.610 --> 00:27:06.760
and it's going to open them.

00:27:06.800 --> 00:27:09.610
And you can see it's really,
the gamma's way off,

00:27:09.610 --> 00:27:13.490
and they're letterbox format because
we've got these mats here on the side.

00:27:14.020 --> 00:27:16.680
So it worked,
and it worked despite the fact that these

00:27:16.680 --> 00:27:18.780
are three different types of images.

00:27:18.780 --> 00:27:22.080
They work seamlessly together because
Automator knows how to convert image

00:27:22.330 --> 00:27:23.970
types from one format to another.

00:27:23.980 --> 00:27:27.570
And with that,
I'd like to invite Emilie back on stage.

00:27:35.950 --> 00:27:36.900
Thanks, Kerry.

00:27:36.900 --> 00:27:42.410
So what did you learn in the demo?

00:27:42.930 --> 00:27:45.070
Kerry showed you how you
can create Automator Actions

00:27:45.140 --> 00:27:46.930
using the templates in Xcode.

00:27:47.030 --> 00:27:49.420
He also showed you how you can
implement the Action Source,

00:27:49.460 --> 00:27:52.870
as well as design the user interface
and set the Action properties.

00:27:52.930 --> 00:27:55.120
And then he also showed you how
you can update your Actions for

00:27:55.120 --> 00:27:59.320
Snow Leopard and take advantage of the
new APIs that we've provided for you.

00:28:00.200 --> 00:28:01.970
So,
now that we know how to build Actions,

00:28:01.970 --> 00:28:05.340
let's go over a few simple
guidelines for creating Actions.

00:28:05.420 --> 00:28:07.480
First and foremost, keep it simple.

00:28:07.620 --> 00:28:10.820
If you find your Action has
five tabs and a tab view,

00:28:10.850 --> 00:28:13.980
and each tab has its own functionality
and its own set of controls,

00:28:14.000 --> 00:28:17.940
maybe that means your Action should
actually be five separate Actions.

00:28:18.010 --> 00:28:21.540
Keep in mind, users put Actions together
to form whatever workflows

00:28:21.540 --> 00:28:23.530
that they want to create.

00:28:23.620 --> 00:28:27.390
And so if you provide them more
flexibility by providing smaller

00:28:27.390 --> 00:28:29.670
chunks of your technology,
then they would very

00:28:29.720 --> 00:28:31.470
much appreciate that,
and it would make things a lot

00:28:31.470 --> 00:28:34.200
easier and simple for people to use.

00:28:34.350 --> 00:28:36.350
You should also follow the
published guidelines in the

00:28:36.350 --> 00:28:39.100
Automator Programming Guide,
and you can also use shipping Actions

00:28:39.140 --> 00:28:43.490
in Automator as good examples of what
to do when designing your own Actions.

00:28:44.580 --> 00:28:48.240
So, back to the big picture.

00:28:48.240 --> 00:28:50.640
We talked about how you can
build Automator Actions.

00:28:50.680 --> 00:28:53.540
And keep in mind that Automator
Actions are the foundational

00:28:53.540 --> 00:28:55.740
technology that is behind Automator.

00:28:55.930 --> 00:28:59.370
With these Actions,
we've now enabled workflows and

00:28:59.370 --> 00:29:01.640
workflow support in applications.

00:29:01.810 --> 00:29:04.330
And so, with that,
we're going to talk about adding workflow

00:29:04.460 --> 00:29:06.260
support specifically to your application.

00:29:06.260 --> 00:29:09.540
So, leveraging Automator Actions,
adding workflow support

00:29:09.540 --> 00:29:10.860
to your application.

00:29:11.160 --> 00:29:13.580
What you're going to learn in this
part of the session is how you

00:29:13.580 --> 00:29:16.570
can build workflows and run those
workflows in your application.

00:29:16.660 --> 00:29:19.510
Then we're also going to take a look at
the workflow classes that we offer in

00:29:19.520 --> 00:29:22.430
the Automator framework for you to use,
so that you can have more control when

00:29:22.430 --> 00:29:23.770
running workflows in your application.

00:29:23.780 --> 00:29:25.560
So, workflows are everywhere.

00:29:25.560 --> 00:29:28.910
Not only are they an automator,
but you can also save workflows as

00:29:29.140 --> 00:29:33.010
standalone applications and distribute
them to your family and friends.

00:29:34.570 --> 00:29:37.240
You can also find workflows
in Xcode's Organizer,

00:29:37.240 --> 00:29:39.960
as well as plugins in a
variety of other applications.

00:29:40.140 --> 00:29:43.660
And now you can find workflows
in your own application.

00:29:43.740 --> 00:29:46.440
Now you might be asking yourself,
why should I be interested in this?

00:29:46.530 --> 00:29:48.230
Why is she telling me about this?

00:29:48.390 --> 00:29:51.220
Well,
Automator is an extremely powerful tool.

00:29:51.550 --> 00:29:54.320
There's so much technology behind it,
and now you can harness all of that

00:29:54.470 --> 00:29:57.460
power and put it in your application.

00:29:57.550 --> 00:30:00.860
Automator allows you to do rapid feature
development for your application.

00:30:00.860 --> 00:30:02.570
And to give you a
concrete example of this,

00:30:02.670 --> 00:30:05.260
I'm going to give you a little example.

00:30:05.330 --> 00:30:07.160
Let's say it's late Friday afternoon.

00:30:07.240 --> 00:30:10.520
You're about to head home,
and your boss comes to you, and he says,

00:30:10.700 --> 00:30:12.850
"Man, I've really been playing
around with my MacBook,

00:30:12.850 --> 00:30:14.960
and this EyeSight thing is so cool.

00:30:15.040 --> 00:30:18.310
Let's add this picture-taking
functionality to our application,

00:30:18.450 --> 00:30:22.000
and I want it before you leave today."
And so you're thinking to yourself,

00:30:22.000 --> 00:30:25.260
"Man, tonight I was going to go home,
put some bubbles in the bathtub,

00:30:25.290 --> 00:30:29.360
watch some Battlestar Galactica,
and now I have to stay here and do this."

00:30:29.390 --> 00:30:30.640
You might not even know where to begin.

00:30:30.660 --> 00:30:32.060
What frameworks should you be looking at?

00:30:32.070 --> 00:30:33.760
How should you be doing this?

00:30:33.780 --> 00:30:36.200
Well, that's where Automator
comes to the rescue.

00:30:36.360 --> 00:30:39.250
All you'd have to do
is open up Automator,

00:30:39.320 --> 00:30:41.560
drag over the "Take
Video Snapshot" action,

00:30:41.560 --> 00:30:43.750
which does precisely
what you want it to do,

00:30:43.830 --> 00:30:46.160
which is use the EyeSight
to take pictures,

00:30:46.190 --> 00:30:47.560
and then save that workflow.

00:30:47.560 --> 00:30:50.110
And with just a couple lines of code,
you add it to your application,

00:30:50.110 --> 00:30:50.960
and the feature's done.

00:30:51.160 --> 00:30:52.460
That's it.

00:30:52.530 --> 00:30:55.450
So you might be thinking to yourself,
"That's a little bit too hard to believe,

00:30:55.450 --> 00:30:58.110
but I'll bring Carrie up in a second
just to show you." So with that example,

00:30:58.110 --> 00:31:02.660
you can see how Automator now becomes
your plug-in development environment.

00:31:02.660 --> 00:31:05.960
You can pretty much just drag whatever
actions you want to form the workflows

00:31:05.960 --> 00:31:08.740
you want to add the functionality
that you need in your application.

00:31:08.760 --> 00:31:11.450
And now Automator pretty
much becomes the new Xcode.

00:31:11.460 --> 00:31:12.760
You don't even have to type any code.

00:31:12.760 --> 00:31:14.710
So talk is cheap.

00:31:14.800 --> 00:31:16.360
I'm going to bring
Carrie up for another demo,

00:31:16.360 --> 00:31:18.760
and he's going to show you how you
can create an Automator workflow

00:31:18.760 --> 00:31:21.320
to do what you want it to do,
and how you can add features

00:31:21.320 --> 00:31:23.560
to your application with
just a few lines of code,

00:31:23.560 --> 00:31:26.450
and how, in fact, it's so easy that even
a manager can do it.

00:31:26.560 --> 00:31:27.060
So.

00:31:33.350 --> 00:31:34.000
Every year.

00:31:34.000 --> 00:31:36.040
She's actually being really
nice to me this year.

00:31:36.040 --> 00:31:38.140
You should have seen her last year.

00:31:38.140 --> 00:31:38.960
Okay.

00:31:38.960 --> 00:31:45.010
So what I want to do is,
if you've been to more than one WWDC,

00:31:45.100 --> 00:31:47.620
you've probably seen the
Sketch application demoed.

00:31:47.690 --> 00:31:49.680
So we're reusing that.

00:31:49.680 --> 00:31:54.060
And what I've done is add
a workflow to this project.

00:31:54.100 --> 00:31:56.960
It looks a little weird
because Xcode treats,

00:31:57.270 --> 00:32:01.590
workflows are stored as document bundles,
and Xcode treats every bundle

00:32:01.590 --> 00:32:03.080
as just nested folders.

00:32:03.500 --> 00:32:06.400
But if we open it in the Finder,
with the Finder,

00:32:06.400 --> 00:32:09.810
you can see that this is just a workflow,
and it contains the take

00:32:09.810 --> 00:32:11.440
video snapshot action.

00:32:11.440 --> 00:32:13.700
Very, very simple workflow.

00:32:13.700 --> 00:32:16.820
And then what we've done,
what I've done is,

00:32:16.820 --> 00:32:20.710
in the Window Controller class
for this application,

00:32:20.720 --> 00:32:23.770
I've added this take
photo responder method.

00:32:23.780 --> 00:32:27.240
And as you can see, it's only about seven
or eight lines of code.

00:32:27.240 --> 00:32:30.560
And what it does is it gets a path
to the workflow out of the bundle,

00:32:30.560 --> 00:32:33.280
and then it calls this
important line right here.

00:32:33.300 --> 00:32:39.680
And it gets a URL from
the path with input.

00:32:39.680 --> 00:32:42.720
We're not doing anything with
input this particular time.

00:32:42.720 --> 00:32:44.820
And then there's an error parameter.

00:32:44.820 --> 00:32:48.540
And so it'll run that workflow,
and when it's done,

00:32:48.540 --> 00:32:52.250
it will return the results
to our application here,

00:32:52.340 --> 00:32:56.360
after which I will create
a graphic for the document.

00:32:56.360 --> 00:32:58.970
So let's build and go
and see how this works.

00:33:01.220 --> 00:33:05.900
Okay, so here's our
Sketch whatever application.

00:33:05.900 --> 00:33:09.980
And in the Tools menu,
there is now a Take Photo command.

00:33:09.980 --> 00:33:12.610
So I want to take a photo.

00:33:12.870 --> 00:33:16.460
And there we go,
we see that the workflow is running.

00:33:16.460 --> 00:33:18.870
And I can take a picture.

00:33:23.600 --> 00:33:24.840
Nice.

00:33:24.840 --> 00:33:27.790
I could add effects to it and everything,
but I won't.

00:33:28.030 --> 00:33:30.580
So when I click Set,
the workflow will complete running,

00:33:30.580 --> 00:33:34.960
and it will return the path
to that document to Sketch.

00:33:35.020 --> 00:33:38.370
So we can even Sketch on top of it.

00:33:38.710 --> 00:33:41.540
All right,
so you can see it worked just fine.

00:33:41.540 --> 00:33:44.540
And really, I mean, it was really simple.

00:33:44.540 --> 00:33:48.120
Seven or eight lines of code
is all you needed to add such a

00:33:48.120 --> 00:33:49.530
nice feature to your application.

00:33:49.530 --> 00:33:52.290
So with that, Emilie?

00:33:58.350 --> 00:34:00.300
Congratulations, Kerry.

00:34:00.300 --> 00:34:04.360
So,
what Kerry showed you how you can do is

00:34:04.510 --> 00:34:08.250
easily create an Automator workflow to
add functionality to your application

00:34:08.370 --> 00:34:11.280
with just a few lines of code.

00:34:11.990 --> 00:34:13.820
As you can see,
Kerry didn't need to know anything

00:34:13.820 --> 00:34:16.070
about the ImageKit framework,
which is what you'd need to

00:34:16.180 --> 00:34:18.540
know if you wanted to take
advantage of the PictureTaker.

00:34:18.680 --> 00:34:23.020
And so all he had to do was drag out that
Action and use it in his application,

00:34:23.020 --> 00:34:25.330
and he was able to do this.

00:34:25.740 --> 00:34:28.340
However, this is sort of the managerial
way of doing things.

00:34:28.410 --> 00:34:32.270
You saw him using the AM Workflow
class method to run the workflow,

00:34:32.350 --> 00:34:34.570
and we're developers here,
so we actually want to take a

00:34:34.570 --> 00:34:37.110
look at the Automator framework.

00:34:38.080 --> 00:34:41.730
So, the Automator framework is
made of three workflow classes.

00:34:41.960 --> 00:34:46.140
We first have AM Workflow,
then we have AM Workflow Controller,

00:34:46.190 --> 00:34:48.720
and then finally we
have AM Workflow View.

00:34:48.750 --> 00:34:51.520
These three classes follow the standard
Model View Controller paradigm,

00:34:51.520 --> 00:34:54.660
and we're going to be talking about
each one of these in more detail.

00:34:54.710 --> 00:34:57.580
First, let's talk about AM Workflow.

00:34:58.250 --> 00:35:02.130
This is the workflow model object,
and you load a workflow file,

00:35:02.130 --> 00:35:05.300
and you can create an AM workflow object.

00:35:05.900 --> 00:35:08.520
Kerry already showed you the
one-line way of doing it,

00:35:08.610 --> 00:35:10.760
which is using the
AM Workflow class method,

00:35:10.860 --> 00:35:12.850
run workflow at URL with input error.

00:35:12.860 --> 00:35:16.580
However, what if you want more
control over your workflow?

00:35:16.580 --> 00:35:18.500
What if you want more
control over the Actions,

00:35:18.500 --> 00:35:21.210
and which Actions are going on?

00:35:21.220 --> 00:35:25.780
So here, we need an AM Workflow object
to take advantage of these.

00:35:25.780 --> 00:35:30.260
So we'd create an NSURL pointing
to the workflow on disk,

00:35:30.260 --> 00:35:35.060
and then we'd give it to AM Workflow
to allocate a workflow object from it.

00:35:35.450 --> 00:35:37.860
Once we have this object,
we can do things like set the input

00:35:37.970 --> 00:35:39.900
for the workflow by calling setInput.

00:35:39.900 --> 00:35:42.870
Likewise, we can also get the output
once the workflow is finished

00:35:42.870 --> 00:35:44.300
running by calling output.

00:35:44.300 --> 00:35:47.460
Now, you might be asking yourself, well,
output happens after the

00:35:47.550 --> 00:35:50.190
workflow is finished running,
so how do I actually run the workflow?

00:35:50.360 --> 00:35:52.780
That's where AM Workflow
Controller comes in.

00:35:52.780 --> 00:35:54.910
This is the controller
object for workflows,

00:35:54.910 --> 00:35:57.520
and you can use it to run an
AM Workflow as well as implement

00:35:57.520 --> 00:36:00.550
some delegate methods so that you
can provide more control in your

00:36:00.550 --> 00:36:02.500
application as the workflow is running.

00:36:02.520 --> 00:36:07.590
To use AM Workflow Controller,
we set up the workflow as usual,

00:36:07.770 --> 00:36:11.240
and then we create the controller,
and then you call setWorkflow

00:36:11.240 --> 00:36:13.380
on the controller,
and then you tell the controller to run,

00:36:13.400 --> 00:36:14.120
and that's it.

00:36:14.220 --> 00:36:15.280
It'll run the workflow for you.

00:36:15.340 --> 00:36:18.670
But if you want more control,
like I mentioned earlier

00:36:18.670 --> 00:36:20.230
with the delegate methods,
you need to set the

00:36:20.290 --> 00:36:22.420
delegate on the controller,
and then you'll be able to

00:36:22.420 --> 00:36:24.170
implement these delegate methods.

00:36:24.200 --> 00:36:28.220
For example, if you implement
workflowControllerDidRun,

00:36:28.220 --> 00:36:30.580
you'll be able to get the output of
the workflow after it's run and do

00:36:30.680 --> 00:36:32.340
something with that in your application.

00:36:32.340 --> 00:36:34.600
You could also, for example,
notify the user.

00:36:34.600 --> 00:36:35.640
When the workflow is done running.

00:36:35.640 --> 00:36:38.700
If you implement
workflowControllerDidRunAction,

00:36:38.700 --> 00:36:41.340
then as the workflow is
running in your application,

00:36:41.340 --> 00:36:45.660
you could provide a determinant
progress indicator to show the user the

00:36:45.780 --> 00:36:47.070
progress that the workflow is making.

00:36:47.080 --> 00:36:49.920
Likewise, if you implement
workflowControllerDidError,

00:36:49.920 --> 00:36:51.880
if something happens to the
workflow while it's running,

00:36:51.880 --> 00:36:54.740
you could notify the user or try
to rectify the problem yourself.

00:36:56.610 --> 00:36:59.260
So, we have AM Workflow,
and we have AM Workflow Controller,

00:36:59.260 --> 00:37:01.360
and now we can add all these
features to our application.

00:37:01.380 --> 00:37:03.660
But what if your boss
then also said to you,

00:37:03.660 --> 00:37:07.010
wow, you did that so quickly,
now I want you to provide a UI so

00:37:07.130 --> 00:37:10.190
that users can take advantage
of these new features and

00:37:10.260 --> 00:37:11.480
customize it however they want.

00:37:11.520 --> 00:37:14.450
Again, Automator comes to save the day,
and now let's talk

00:37:14.450 --> 00:37:15.840
about AM Workflow View.

00:37:15.840 --> 00:37:18.800
This is the Workflow View that's
actually in Automator.

00:37:18.800 --> 00:37:21.560
You can now put this in your application.

00:37:21.560 --> 00:37:23.780
You can get this view
in Interface Builder,

00:37:23.780 --> 00:37:26.800
so it makes it very easy to use,
and you can let the users edit the

00:37:26.880 --> 00:37:29.680
workflow so that they can customize
this feature however they want.

00:37:29.710 --> 00:37:33.460
This is what the Workflow View looks
like in Interface Builder.

00:37:33.460 --> 00:37:35.600
As you can see,
it's also part of the Automator palette.

00:37:35.600 --> 00:37:39.300
You can also set it up programmatically
by creating a Workflow View and

00:37:39.300 --> 00:37:40.600
then setting it on the controller.

00:37:43.470 --> 00:37:45.740
That's AM Workflow,
AM Workflow Controller,

00:37:45.890 --> 00:37:47.600
and AM Workflow View.

00:37:47.640 --> 00:37:51.550
AM Workflow provides you one-line
method so that you can run workflows

00:37:51.650 --> 00:37:53.400
from your application and add features.

00:37:53.530 --> 00:37:57.410
AM Workflow Controller gives you a
little bit more control when you're

00:37:57.410 --> 00:38:00.370
running workflows in your application,
and AM Workflow View allows

00:38:00.450 --> 00:38:03.390
you to empower your users with
customization of your features.

00:38:04.280 --> 00:38:05.560
So, this is great.

00:38:05.560 --> 00:38:06.560
This is the Automator framework.

00:38:06.560 --> 00:38:09.090
And now we can see how
this all fits together.

00:38:09.100 --> 00:38:12.280
We have the Actions that we
built earlier in this session,

00:38:12.280 --> 00:38:14.920
and then we can use those
Actions to create workflows,

00:38:14.920 --> 00:38:17.870
and then use those workflows
to put in our applications.

00:38:17.880 --> 00:38:21.100
Now, we could do a demo then just
using the Actions that we

00:38:21.100 --> 00:38:24.560
created earlier and putting them,
showing you how they work

00:38:24.560 --> 00:38:26.360
in an application again.

00:38:26.360 --> 00:38:30.240
But instead, we decided to bring up a
third-party developer who's done

00:38:30.310 --> 00:38:33.850
something so phenomenal with
both of these technologies that

00:38:33.850 --> 00:38:34.260
we just have to do it again.

00:38:34.280 --> 00:38:35.990
And I had to show it to you guys.

00:38:36.030 --> 00:38:39.530
This developer has built their
own Actions for their application

00:38:39.530 --> 00:38:42.960
and integrated workflows in
their application to do something

00:38:42.960 --> 00:38:44.820
that was just so incredible.

00:38:44.820 --> 00:38:46.720
I couldn't believe it
when I first saw it,

00:38:46.750 --> 00:38:48.980
and I'm sure you guys
will be just as impressed.

00:38:48.980 --> 00:38:52.770
So, I'd like to invite Sal Soghoian up
on stage to introduce this developer.

00:39:01.890 --> 00:39:03.300
Thank you, Emilie.

00:39:03.300 --> 00:39:08.200
We first met Savant Systems a couple
of conferences ago when they approached

00:39:08.200 --> 00:39:14.290
us about wanting to integrate
Automator into the technologies

00:39:14.290 --> 00:39:15.960
that they were developing for the home.

00:39:15.960 --> 00:39:19.090
And since then,
what they've done is so impressive,

00:39:19.180 --> 00:39:23.160
so we wanted to share it with you today,
and they've been very kind in

00:39:23.160 --> 00:39:25.120
agreeing to come down here.

00:39:26.250 --> 00:39:29.460
And let me tell you a little
bit about what they do so that

00:39:29.460 --> 00:39:31.390
you can better understand it.

00:39:31.440 --> 00:39:34.120
It has a catchphrase to
it called home automation,

00:39:34.120 --> 00:39:35.980
but it's not quite what you think.

00:39:36.080 --> 00:39:43.470
And in the way that adding Mac OS X to
a phone really changed the way that

00:39:43.470 --> 00:39:49.590
the communication industry works,
adding Mac OS X to the home

00:39:49.700 --> 00:39:54.520
has really changed the way that
you interact with your house.

00:39:55.000 --> 00:40:01.740
Through very innovative Mac-based devices
and interfaces like touch panel displays,

00:40:01.740 --> 00:40:07.150
and through multi-function
controllers that control different

00:40:07.250 --> 00:40:10.750
aspects of communication,
and even furniture that becomes

00:40:11.230 --> 00:40:13.240
more than just furniture.

00:40:13.240 --> 00:40:17.320
It also becomes a way to interact
with the environment in your

00:40:17.320 --> 00:40:20.740
house and to access media and
information about your family.

00:40:20.740 --> 00:40:23.740
And it can also integrate
with the phone as well.

00:40:23.740 --> 00:40:24.240
The new phone.

00:40:24.740 --> 00:40:28.230
The new iPhone also provides this
kind of integration to do this.

00:40:28.240 --> 00:40:32.660
And these systems are placed
throughout the house in key locations.

00:40:32.740 --> 00:40:37.430
There's dozens and dozens of zones
created in the various rooms of the

00:40:37.430 --> 00:40:43.720
house involving hundreds of components
and hundreds of software utilities.

00:40:44.030 --> 00:40:47.190
Now all of this is
called home automation,

00:40:47.190 --> 00:40:49.240
but it's actually so much more.

00:40:49.240 --> 00:40:52.730
There's media storage
and media presentation.

00:40:53.420 --> 00:40:56.740
There is environmental
and lighting controls.

00:40:56.740 --> 00:41:02.240
There are communications with news,
weather, and sports updates.

00:41:02.240 --> 00:41:05.230
There's monitoring and security systems.

00:41:05.240 --> 00:41:09.740
All of this coming under this
umbrella called home automation.

00:41:09.740 --> 00:41:14.480
Now,
Savant has addressed each area of this

00:41:14.490 --> 00:41:21.240
particular technologies using their
software called RacePoint Blueprint.

00:41:21.740 --> 00:41:25.480
And it uses the technologies of
Mac OS X like Core Animation and

00:41:25.490 --> 00:41:31.110
QuickTime and Quartz Composer and
Bonjour to accomplish the integration

00:41:31.320 --> 00:41:36.240
of all of these components with
an interface that the customer finds

00:41:36.240 --> 00:41:41.740
pleasing and inviting and provides them
with the functionality that they need.

00:41:41.920 --> 00:41:45.100
And underneath the entire
thing is Automator.

00:41:45.780 --> 00:41:51.240
So,
what you're about to see is from Savant.

00:41:51.750 --> 00:41:54.970
And Michael Silva from Savant Systems is
going to give us a demonstration about

00:41:54.970 --> 00:41:56.730
how their software integrates all this.

00:41:56.740 --> 00:41:57.740
Michael?

00:42:03.000 --> 00:42:04.000
Thank you.

00:42:04.000 --> 00:42:07.240
Good afternoon, everyone!

00:42:07.240 --> 00:42:10.190
This is a real privilege to be
invited here by Apple and the

00:42:10.190 --> 00:42:14.800
Automator team to come and talk about
how Savant System uses Automator.

00:42:14.800 --> 00:42:17.860
We're really excited about the
technology in Automator and it's done

00:42:17.860 --> 00:42:20.040
some really wonderful things for us.

00:42:20.110 --> 00:42:23.160
So let's kind of dig right into it.

00:42:23.160 --> 00:42:26.430
As Sal mentioned,
we have an application called Blueprint.

00:42:26.660 --> 00:42:30.440
The intent of this application
is to allow home systems

00:42:30.550 --> 00:42:35.310
integrators and systems installers
to very easily configure,

00:42:35.490 --> 00:42:39.070
customize,
and in effect program our system

00:42:39.070 --> 00:42:42.950
to accomplish home automation
and home control without the need

00:42:42.950 --> 00:42:46.510
for writing any code on the part
of that integrator or installer.

00:42:46.510 --> 00:42:49.360
So this is the main window
for Blueprint and we have

00:42:49.460 --> 00:42:51.800
here an example configuration.

00:42:51.880 --> 00:42:57.480
The first thing that an integrator
installer does with Blueprint is organize

00:42:57.480 --> 00:43:02.260
the components that they will control
in the house into rooms or zones.

00:43:02.280 --> 00:43:05.590
So in this small example configuration,
we have a living room with

00:43:05.590 --> 00:43:08.780
a high definition display,
speakers, and one of our touch

00:43:08.780 --> 00:43:10.280
panel user interfaces.

00:43:10.280 --> 00:43:14.730
We also have a bedroom with a television
of its own and another user interface.

00:43:14.830 --> 00:43:17.080
This one happened to be an iPod touch.

00:43:17.080 --> 00:43:19.800
We also have in this
configuration shared resources.

00:43:19.800 --> 00:43:21.660
These are usually source devices.

00:43:21.660 --> 00:43:24.600
In this case,
we have a Blu-ray disc player,

00:43:24.600 --> 00:43:27.530
an Apple TV,
and a lighting controller to do

00:43:27.560 --> 00:43:30.420
lighting control within the house.

00:43:30.740 --> 00:43:32.740
I just wanted to give
you a quick example of,

00:43:32.740 --> 00:43:36.020
let's say we wanted to add
cable television control.

00:43:36.020 --> 00:43:37.760
We start off by opening our library.

00:43:37.760 --> 00:43:42.210
This is a library of all the
components that we can control.

00:43:42.350 --> 00:43:44.140
There's roughly a thousand
in the library today,

00:43:44.140 --> 00:43:45.150
and we're always working on it.

00:43:45.220 --> 00:43:48.840
What I'm going to do is actually
look for a cable TV receiver.

00:43:48.840 --> 00:43:52.900
For this example, we're going to use one
from Scientific Atlanta.

00:43:52.900 --> 00:43:55.680
It's a high-definition cable TV receiver.

00:43:55.680 --> 00:43:59.760
I simply drag it out
into the shared zone,

00:43:59.760 --> 00:44:01.800
give it a name.

00:44:01.960 --> 00:44:05.500
From here, I then bring it out
into this layout view.

00:44:05.550 --> 00:44:09.890
Now, Blueprint is based on a
very simple schematic model.

00:44:10.610 --> 00:44:15.080
The installer simply needs
to describe to Blueprint the

00:44:15.080 --> 00:44:17.840
components that are used and how
they're physically wired together,

00:44:17.900 --> 00:44:20.500
and then Blueprint sort
of takes care of the rest.

00:44:20.500 --> 00:44:23.300
So what I'm going to do is first
wire up the control interface.

00:44:23.300 --> 00:44:25.100
In this case,
it's an infrared transmitter,

00:44:25.100 --> 00:44:26.700
so I'll wire that right in.

00:44:26.880 --> 00:44:29.490
And I'm also going to use a single wire,
an HDMI cable,

00:44:29.490 --> 00:44:33.310
to wire in the audio and video that
will be coming out of that cable

00:44:33.380 --> 00:44:36.090
TV receiver into our ROSI controller.

00:44:36.810 --> 00:44:40.230
Once I'm happy with that,
it's very simple to,

00:44:40.250 --> 00:44:44.460
I use this compile button here,
and this kicks off an analysis.

00:44:44.500 --> 00:44:48.340
A Blueprint will analyze the drawing
that the installer has come up with

00:44:48.530 --> 00:44:51.050
and figure out what can be done.

00:44:51.350 --> 00:44:55.410
For the, in this example,
in the living room, in the bedroom,

00:44:55.490 --> 00:44:56.490
what can be watched there?

00:44:56.500 --> 00:44:59.080
Can I watch the cable TV as
the wiring and the control

00:44:59.110 --> 00:45:00.700
setup that lets me do that?

00:45:00.730 --> 00:45:03.590
No errors came out of that,
so everything's going well.

00:45:03.760 --> 00:45:07.840
From then, I can also now create
initial user interfaces.

00:45:07.840 --> 00:45:10.620
So the system will automatically
generate the touch panel or the

00:45:10.620 --> 00:45:14.490
on-screen display user interfaces.

00:45:14.570 --> 00:45:19.840
By selecting one of the touch panels,
I can now edit the user interface,

00:45:19.840 --> 00:45:22.220
so kind of take a look at what it's done.

00:45:22.270 --> 00:45:27.420
And here's that cable television,
the cable receiver that we added.

00:45:27.640 --> 00:45:31.700
By double-clicking on it,
I now get a view of what the end user

00:45:31.700 --> 00:45:33.600
will see when they use the interface.

00:45:33.600 --> 00:45:37.600
So the question arises, well,
how does Automator fit into all of this?

00:45:37.680 --> 00:45:41.100
And this is kind of where I think
things get really interesting.

00:45:41.280 --> 00:45:44.380
Each one of these buttons and
controls that you see on this screen

00:45:44.600 --> 00:45:49.280
are bound to an Automator workflow
that our control system will run.

00:45:49.420 --> 00:45:52.000
And so what that means is I can look at,
for example,

00:45:52.000 --> 00:45:54.700
this button here represents the
power on for cable television.

00:45:54.770 --> 00:45:56.890
You want to watch cable
TV in the living room,

00:45:56.890 --> 00:45:57.960
you hit this button.

00:45:58.120 --> 00:46:01.280
By double-clicking on it,
we can actually look at the Automator

00:46:01.280 --> 00:46:02.940
workflow that was generated.

00:46:02.940 --> 00:46:05.240
If you remember before when
I hit this compile button,

00:46:05.260 --> 00:46:09.290
what the system was also doing was
creating all of the default workflows.

00:46:09.540 --> 00:46:13.780
This workflow,
all of the actions that you see in

00:46:13.780 --> 00:46:16.940
here are actions created by Savant.

00:46:16.990 --> 00:46:21.580
And each action typically talks to one
of the devices that we're controlling,

00:46:21.580 --> 00:46:23.340
one of the components
that we're controlling.

00:46:23.390 --> 00:46:26.600
So here you see we're powering on
the cable TV receiver and powering

00:46:26.600 --> 00:46:30.300
on the rest of the devices needed
in order to deliver the cable

00:46:30.300 --> 00:46:32.270
television content into the room.

00:46:33.880 --> 00:46:35.170
Well, why did we use Automator here?

00:46:35.360 --> 00:46:37.600
Well,
the main reason was because one of the

00:46:37.600 --> 00:46:41.390
keys of this industry is being flexible,
customizing the system

00:46:41.430 --> 00:46:45.000
to each individual user,
customizing each individual installation.

00:46:45.000 --> 00:46:47.910
So I'd like to show you a
couple of examples of that.

00:46:47.930 --> 00:46:51.700
A very typical request that our
installers or our customers deal with is

00:46:51.850 --> 00:46:55.830
integrating other features or controls,
such as lighting control,

00:46:55.830 --> 00:46:57.780
in with an existing function.

00:46:58.270 --> 00:47:00.220
So when someone turns
on cable television,

00:47:00.220 --> 00:47:01.760
maybe they want the lights to dim.

00:47:01.760 --> 00:47:03.200
Well, it's very easy to do.

00:47:03.200 --> 00:47:04.800
And actually, I kind of skipped ahead.

00:47:04.800 --> 00:47:05.400
I'll do that again.

00:47:05.400 --> 00:47:08.570
All I need to do is drag out
the action that corresponds to

00:47:08.570 --> 00:47:10.810
controlling the lighting system.

00:47:12.640 --> 00:47:14.740
And then simply use that Action to say,
well,

00:47:14.740 --> 00:47:16.150
I want to set the dimmer in the room.

00:47:16.150 --> 00:47:20.120
And let's say I want to set the
lights to 30% and have them fade

00:47:20.120 --> 00:47:22.300
over a three-second time frame.

00:47:22.300 --> 00:47:24.400
And just like that,
I've changed the way our

00:47:24.400 --> 00:47:25.690
control system behaves.

00:47:25.750 --> 00:47:29.760
No need to write software, even,
you know, no need to be technical.

00:47:29.760 --> 00:47:33.010
Simple drag-and-drop
interfaces providing powerful

00:47:33.010 --> 00:47:35.480
programmability in our application.

00:47:37.100 --> 00:47:41.980
We're not limited to using just,
you know, savant-built Automator Actions.

00:47:42.000 --> 00:47:43.360
We can use any Automator Action.

00:47:43.360 --> 00:47:49.790
Another very typical example that we
have is when powering on these large,

00:47:49.790 --> 00:47:53.180
complex AV systems,
a lot of times there are artifacts

00:47:53.180 --> 00:47:54.620
during the power-on process.

00:47:54.620 --> 00:47:57.760
Speakers may snap or hiss because
amplifiers are turning on,

00:47:57.760 --> 00:48:00.650
or there's just different
delays and timing issues.

00:48:00.660 --> 00:48:05.160
So it's very typical to want to introduce
a delay between a couple of steps.

00:48:05.400 --> 00:48:09.240
In order to give components
time to warm up or to turn on

00:48:09.240 --> 00:48:11.300
it again to a stable state.

00:48:11.400 --> 00:48:14.690
So once again, using the standard
Automator Pause Action,

00:48:14.690 --> 00:48:19.060
I'm able to program the system to
change the way the system behaves.

00:48:19.160 --> 00:48:21.880
This is a very,
very powerful feature for our

00:48:22.100 --> 00:48:24.040
customers to take advantage of.

00:48:24.040 --> 00:48:27.220
Now, by simply saving that
workflow and exiting,

00:48:27.220 --> 00:48:32.110
that power button's behavior
has now been changed.

00:48:40.000 --> 00:48:44.350
So overall,
Savant is very pleased with the decision

00:48:44.410 --> 00:48:46.700
that we made to integrate Automator.

00:48:46.700 --> 00:48:50.510
The flexibility, the ease of programming,
the runtime performance

00:48:50.540 --> 00:48:52.560
are excellent traits,
and they work very,

00:48:52.570 --> 00:48:55.960
very well in our products,
and have really made a difference

00:48:55.990 --> 00:48:59.980
in changing the way the industry
deals with customized home

00:49:00.000 --> 00:49:02.220
automation and integration.

00:49:02.220 --> 00:49:05.210
So, that's it.

00:49:05.210 --> 00:49:05.210
Thank you.

00:49:14.530 --> 00:49:17.310
So I think you'd all have to agree,
that was pretty incredible.

00:49:17.430 --> 00:49:19.880
Savant has clearly taken
Automator to the next level,

00:49:19.880 --> 00:49:23.070
and so we're very proud
to have them here.

00:49:23.400 --> 00:49:26.390
So, we promised we'd get you guys out
of here in time for the beer bash,

00:49:26.390 --> 00:49:29.820
so let's once again take
a look at the big picture.

00:49:29.990 --> 00:49:33.220
First, we talked about how to
build Automator Actions.

00:49:33.260 --> 00:49:35.560
Like we said,
these Automator Actions are the

00:49:35.560 --> 00:49:38.240
foundational technology behind Automator,
and without them,

00:49:38.240 --> 00:49:43.400
you couldn't create workflows to
then add support to your application.

00:49:43.420 --> 00:49:47.310
So, what did you learn in this session?

00:49:47.310 --> 00:49:51.110
You learned what Automator Actions are,
what they are conceptually,

00:49:51.110 --> 00:49:53.690
how they work,
and what the components are.

00:49:54.000 --> 00:49:56.520
You also learned how you
can create Automator Actions

00:49:56.520 --> 00:49:59.420
by implementing the source,
designing the user interface,

00:49:59.560 --> 00:50:02.910
and setting the Action properties,
as well as how to integrate workflows

00:50:02.910 --> 00:50:06.710
into your application by adding
one-line features and utilizing

00:50:06.710 --> 00:50:10.460
the three classes in the Automator
framework to have more control over the

00:50:10.460 --> 00:50:12.430
workflow as it runs in your application.

00:50:12.440 --> 00:50:14.720
So now,
all of you are also Automator ninjas,

00:50:14.830 --> 00:50:18.030
so you can go out and build
and leverage Automator Actions.

00:50:18.040 --> 00:50:20.630
For more information,
you can talk to Matt Dranz,

00:50:20.630 --> 00:50:24.040
our Sharing Technologies Evangelist,
or you can add yourself to the

00:50:24.040 --> 00:50:27.680
Automator Developers mailing list,
and there's also documentation and other

00:50:27.700 --> 00:50:29.240
resources at the Developers website.