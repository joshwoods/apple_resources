WEBVTT

00:00:21.000 --> 00:00:32.200
[Transcript missing]

00:00:32.700 --> 00:00:38.100
If you weren't intending to attend this,
you're probably in the wrong room.

00:00:40.730 --> 00:00:44.730
So what I'm going to do is go
through a number of aspects of sync.

00:00:44.840 --> 00:00:47.820
First I'm going to talk
about what's new overall.

00:00:48.580 --> 00:00:51.750
Then I'm going to go through
sync services for those of

00:00:51.750 --> 00:00:53.790
you who are new to sync,
because I imagine there are

00:00:53.880 --> 00:00:56.840
quite a few people who have come
for the iPhone and haven't used

00:00:56.840 --> 00:00:58.600
sync services on the Mac before.

00:00:58.600 --> 00:01:01.740
Then we'll talk a little bit about what
we had in mind for Snow Leopard and

00:01:01.740 --> 00:01:03.600
what kind of things we've done there.

00:01:03.660 --> 00:01:06.120
What new and improved
features have been added,

00:01:06.120 --> 00:01:06.600
new APIs.

00:01:06.600 --> 00:01:09.820
And then Bruce is going to come
on stage and talk about some

00:01:09.830 --> 00:01:11.600
of the advanced sync stuff.

00:01:11.600 --> 00:01:14.600
So for those of you who are experts,
who've done this before,

00:01:14.600 --> 00:01:17.600
who have already written sync
client or are developing one,

00:01:17.810 --> 00:01:22.580
that should be useful for you.

00:01:24.740 --> 00:01:28.600
What's new outside of Snow Leopard?

00:01:28.600 --> 00:01:30.040
A little bit of history.

00:01:30.370 --> 00:01:34.430
So back in 10.3,
we had this thing called iSync that

00:01:34.430 --> 00:01:39.100
would let you sync to your phone to .Mac,
and it would sync things like

00:01:39.130 --> 00:01:40.440
address books and contacts.

00:01:40.440 --> 00:01:44.430
So it was kind of restricted to that,
and it was all Apple provided.

00:01:44.810 --> 00:01:49.140
In 10.4, the big thing that we did is
add the ability for you to

00:01:49.140 --> 00:01:51.350
write your own sync client.

00:01:51.370 --> 00:01:55.900
So that gave you access to our
generic extensible sync engine,

00:01:55.960 --> 00:01:56.740
public API.

00:01:56.740 --> 00:02:00.380
We had data classes built into
OS X that would sync to the phone,

00:02:00.390 --> 00:02:04.460
that would sync to .Mac,
that could sync to other applications.

00:02:04.490 --> 00:02:07.650
And you got a bunch of
benefits just by leveraging

00:02:07.650 --> 00:02:09.790
the framework that we supplied.

00:02:11.000 --> 00:02:17.060
Now in 10.5, we added some additional
data classes like Dashboard,

00:02:17.100 --> 00:02:23.320
Preferences, Doc Syncing, Mail Notes,
and additionally some other

00:02:23.320 --> 00:02:26.200
applications that sync.

00:02:26.330 --> 00:02:28.690
And then along came the iPhone.

00:02:30.880 --> 00:02:35.760
So, since this time last year,
a number of things have gone on.

00:02:35.760 --> 00:02:40.460
One of the things that we talked
about at WWDC 2007 was a thing

00:02:40.520 --> 00:02:42.100
called the .Mac transition.

00:02:42.160 --> 00:02:46.020
That was where .Mac had been
syncing some data types with an

00:02:46.020 --> 00:02:49.990
old mechanism that was sort of
backwards compatible with Panther,

00:02:49.990 --> 00:02:52.540
and we were switching
everybody over to the new one,

00:02:52.600 --> 00:02:57.160
which was more performant
and more reliable.

00:02:58.480 --> 00:03:01.060
We went ahead and did that,
and that was pretty transparent

00:03:01.210 --> 00:03:02.800
for everybody concerned.

00:03:02.870 --> 00:03:04.500
Certainly none of the
developers had to do anything,

00:03:04.500 --> 00:03:07.800
so that was the main goal of that.

00:03:08.680 --> 00:03:12.690
In addition, related to iPhone sync,
we added Yahoo!

00:03:12.690 --> 00:03:17.680
Contact Sync,
so that was available in 10.4 for

00:03:17.680 --> 00:03:22.470
iPhone and iPod Touch customers
and available on Windows.

00:03:22.590 --> 00:03:26.190
And in 10.5,
we made it available for everybody.

00:03:26.530 --> 00:03:30.520
And in 10.5.3,
we introduced Google Contact Sync.

00:03:30.650 --> 00:03:33.440
We've been working with Google on that.

00:03:33.480 --> 00:03:36.500
And that will be coming out
shortly on Windows as well.

00:03:36.610 --> 00:03:40.890
And in Snow Leopard,
it's going to be available for everybody.

00:03:43.530 --> 00:03:46.240
So what you can see
is the sync ecosystem,

00:03:46.240 --> 00:03:51.150
as we call it, has moved along over time,
and we continue to evolve this.

00:03:51.290 --> 00:03:55.640
So now, of course,
.Mac has become MobileMe.

00:03:55.690 --> 00:03:57.890
We've got Microsoft Exchange in
the picture,

00:03:57.890 --> 00:03:59.910
syncing to the iPhone.

00:04:04.490 --> 00:04:07.540
And now we've got Windows in the picture
because we've got Windows syncing to

00:04:07.600 --> 00:04:11.140
the iPhone and we've got Windows now
syncing to MobileMe as well.

00:04:11.140 --> 00:04:15.400
So the whole sync environment
is getting kind of complicated.

00:04:15.980 --> 00:04:20.760
So again, just to summarize, MobileMe,
same sync capabilities for

00:04:20.760 --> 00:04:23.660
the Mac as you had before,
so all the same data classes

00:04:23.660 --> 00:04:24.700
are going to be syncing.

00:04:24.760 --> 00:04:28.600
They've added new online applications,
which give you all this great

00:04:28.600 --> 00:04:30.680
friendly access to your data online.

00:04:31.200 --> 00:04:34.990
With Windows,
the addition of MobileMe for

00:04:35.070 --> 00:04:40.250
Windows gives you sync between Mac and
Windows and between Windows and Windows.

00:04:43.210 --> 00:04:46.260
And there's also over
the air for the iPhone.

00:04:46.260 --> 00:04:48.900
And the way that works
is that your desktop,

00:04:49.150 --> 00:04:51.960
be it a Mac or Windows,
is syncing up to MobileMe,

00:04:51.960 --> 00:04:54.520
which is syncing down to the iPhone.

00:04:54.790 --> 00:04:58.560
So there's some other things that we
haven't really got time to cover or we

00:04:58.560 --> 00:05:01.700
haven't got around to thinking about.

00:05:01.780 --> 00:05:05.820
With iPhone Sync,
you get Bookmarks syncing, Contacts,

00:05:06.010 --> 00:05:08.240
Calendars, it's all built in.

00:05:08.300 --> 00:05:14.090
When the next release of the iPhone
software comes out on July 11th,

00:05:14.360 --> 00:05:16.590
Tethered is built in,
Over the Air will be

00:05:16.590 --> 00:05:18.120
built in with MobileMe.

00:05:18.120 --> 00:05:22.700
One thing to be aware of is that
you'll have to choose one or the other.

00:05:22.700 --> 00:05:27.640
And that's to avoid what we call
sync loops or triangle problems.

00:05:27.710 --> 00:05:32.020
Some of the existing sync developers
will be familiar with that.

00:05:32.780 --> 00:05:36.070
As regards third party
iPhone application sync,

00:05:36.260 --> 00:05:39.640
if you're writing a third party
application for the iPhone,

00:05:39.640 --> 00:05:43.010
you might have been wondering whether
you can sync it with your desktop.

00:05:43.090 --> 00:05:46.340
And at present, we don't have any API on
the phone for sync.

00:05:46.440 --> 00:05:50.690
So the current suggested solution is that
you have some sort of server running,

00:05:50.760 --> 00:05:52.980
and you sync directly to that server.

00:05:55.660 --> 00:06:02.330
So, what I wanted to do now was to just
very quickly go through a summary of

00:06:02.330 --> 00:06:06.660
what sync services is for those of you
who are completely unfamiliar with it.

00:06:06.660 --> 00:06:07.990
We weren't given a lot of time for this.

00:06:08.050 --> 00:06:09.640
We've only got one session.

00:06:09.790 --> 00:06:13.610
So, I'm going to have to be very,
very quick.

00:06:27.600 --> 00:06:28.600
Any questions?

00:06:28.600 --> 00:06:30.900
Okay, no, right.

00:06:30.920 --> 00:06:34.840
So that was actually the presentation
from 2005 in its entirety,

00:06:34.840 --> 00:06:38.100
which was a great
coverage of sync services,

00:06:38.100 --> 00:06:40.800
but it was a little bit condensed.

00:06:40.800 --> 00:06:43.360
So I will actually
really go through this.

00:06:46.180 --> 00:06:51.050
So the big picture of sync is all
of these cooperating applications

00:06:51.050 --> 00:06:53.900
and devices exchanging data.

00:06:59.310 --> 00:07:02.390
So a few concepts and terminology
so that at least when we get on

00:07:02.390 --> 00:07:05.330
to the later part of the talk,
some of it will be more familiar

00:07:05.440 --> 00:07:07.320
to people than it is right now.

00:07:07.830 --> 00:07:10.170
So we're syncing all this data around.

00:07:10.170 --> 00:07:11.480
What's going on?

00:07:11.560 --> 00:07:13.520
What's happening to it?

00:07:14.270 --> 00:07:16.420
Well, first of all,
when you give us this data

00:07:16.420 --> 00:07:18.930
as part of the sync process,
we store it in something

00:07:18.930 --> 00:07:19.770
that we call the truth.

00:07:19.910 --> 00:07:23.640
So we're keeping a copy of any
data that's provided to us.

00:07:23.820 --> 00:07:30.220
That enables us to do differencing
when people send us new changes

00:07:30.590 --> 00:07:36.270
and to see what's changed since
the last time they synced with us.

00:07:40.430 --> 00:07:46.160
Do you as the developer, or we as Apple,
describe that data?

00:07:46.190 --> 00:07:49.030
Well,
we use an entity relationship model.

00:07:49.400 --> 00:07:52.640
And so you can think of the schema as
sort of sitting between the application

00:07:53.220 --> 00:07:57.230
and the sync engine and its truth data.

00:07:57.520 --> 00:08:01.140
And the schema sort of represents
what we put in the truth.

00:08:01.290 --> 00:08:06.100
So this is a sort of overall picture
of what a schema would look like.

00:08:08.020 --> 00:08:12.210
The schema consists of
one or more data classes,

00:08:12.210 --> 00:08:14.940
which is sort of a
collection of entities,

00:08:15.090 --> 00:08:19.860
and entities which represent the
kind of thing that you want to sync,

00:08:19.870 --> 00:08:23.140
and they have attributes and
properties and relationships.

00:08:23.270 --> 00:08:29.010
So, the sync schema is describing
what you have to the sync engine.

00:08:30.090 --> 00:08:37.500
An entity is an element of the
data model that you're describing.

00:08:37.580 --> 00:08:41.130
The data class is a
collection of those entities.

00:08:44.830 --> 00:08:46.150
We have relationships.

00:08:46.450 --> 00:08:49.850
So, for example,
if you have contacts and phone numbers,

00:08:49.850 --> 00:08:53.010
you can have a relationship
between those two things.

00:08:55.520 --> 00:09:01.990
And then we have properties,
which are things like name, phone number,

00:09:02.220 --> 00:09:05.440
type of phone number,
start date of an event,

00:09:05.500 --> 00:09:07.080
something like that.

00:09:14.400 --> 00:09:15.600
So this is a simple example.

00:09:15.600 --> 00:09:19.480
Say you have a piece of data
that you want to describe,

00:09:19.480 --> 00:09:23.840
and it has two things:
the name of the event and

00:09:23.840 --> 00:09:25.750
the start of the event.

00:09:27.500 --> 00:09:30.500
What your schema contains
is the name of the property,

00:09:30.500 --> 00:09:33.450
which is name, and the type.

00:09:33.780 --> 00:09:39.650
And again, start as a date,
because it's a date of a vacation.

00:09:44.230 --> 00:09:47.380
Now this is what a more
complicated schema would look like.

00:09:47.430 --> 00:09:51.580
These are the sort of the entities
which might exist in the context schema.

00:09:55.160 --> 00:09:58.100
As you can see, we have email addresses,
street addresses,

00:09:58.100 --> 00:10:00.740
because any particular contact
can have more than one.

00:10:00.740 --> 00:10:04.410
So those represent relationships
to other entities which

00:10:04.410 --> 00:10:06.460
contain those email addresses.

00:10:06.540 --> 00:10:09.820
Contacts can also be in groups,
another relationship,

00:10:09.820 --> 00:10:12.120
so you can group these things together.

00:10:19.620 --> 00:10:23.060
Now,
that part covered describing the entirety

00:10:23.060 --> 00:10:27.600
of the sync data that was available
for any particular kind of data class.

00:10:27.730 --> 00:10:30.740
But how do you describe
what your client does?

00:10:30.900 --> 00:10:33.260
Well, we use a thing called
a client description.

00:10:33.360 --> 00:10:38.210
It's a property list that you store in
the file system and you register with

00:10:38.270 --> 00:10:41.130
us when you first start up your client.

00:10:41.740 --> 00:10:44.840
So it kind of syncs between,
it kind of sits between the

00:10:44.840 --> 00:10:48.550
sync client and the sync engine,
but it's more associated

00:10:48.550 --> 00:10:49.910
with the sync client.

00:10:51.950 --> 00:10:57.710
So again, the sync schema is describing
what data is for the sync engine,

00:10:57.710 --> 00:11:00.410
whereas the client description
is kind of a bridge between the

00:11:00.410 --> 00:11:02.730
application and the sync engine.

00:11:02.840 --> 00:11:07.600
The sync schema is describing the
entirety of what you can possibly sync.

00:11:07.890 --> 00:11:09.600
Whereas the Sync Client
Description is again,

00:11:09.600 --> 00:11:11.780
it's specific to your client,
what you want to sync.

00:11:11.870 --> 00:11:14.390
So that may well be a subset.

00:11:15.630 --> 00:11:18.170
You may not want to sync the
middle name of a contact,

00:11:18.210 --> 00:11:21.190
so your device doesn't
support middle names.

00:11:22.880 --> 00:11:28.300
Now, in your application,
you have some data

00:11:28.810 --> 00:11:31.090
Which is in, I don't know what format.

00:11:31.100 --> 00:11:33.040
It could be in SQLite,
it could be in some

00:11:33.040 --> 00:11:36.340
proprietary database format,
it could be just written

00:11:36.340 --> 00:11:39.700
out in property list format,
something like that.

00:11:39.870 --> 00:11:45.690
Sync Services uses a very generic
format in order to represent data.

00:11:45.700 --> 00:11:48.710
We just use dictionaries
essentially as a record format,

00:11:48.710 --> 00:11:50.700
and we use key value kind of coding.

00:11:50.700 --> 00:11:54.080
So, one of the main things that your
sync client will have to do as it

00:11:54.080 --> 00:11:57.830
interacts with the Sync Services API is
convert the data to and from your

00:11:58.470 --> 00:12:03.830
proprietary format back into sync
services format and the converse.

00:12:06.880 --> 00:12:09.800
Okay, so we figured out we've got
to translate our data around,

00:12:09.800 --> 00:12:13.340
we've got to describe,
we've got our client description,

00:12:13.340 --> 00:12:14.380
we've got our schema.

00:12:14.510 --> 00:12:15.290
Now we're ready to go.

00:12:15.300 --> 00:12:15.790
What do we do?

00:12:15.790 --> 00:12:17.800
Does it actually start to sync?

00:12:17.800 --> 00:12:23.800
Well, a sync session represents a
transaction with the sync engine.

00:12:23.800 --> 00:12:27.790
It consists of five phases.

00:12:30.380 --> 00:12:31.830
So at the beginning we start the session.

00:12:31.840 --> 00:12:37.640
Now the session can be started either
by the client itself requesting a sync,

00:12:37.720 --> 00:12:41.520
or it can be actually started by
the sync engine telling your client

00:12:41.730 --> 00:12:44.940
that a sync is about to start
and would it like to participate.

00:12:45.080 --> 00:12:52.520
So for clients like .Mac,
when .Mac syncs, and I probably should

00:12:52.520 --> 00:12:57.170
use the term mobile me,
when mobile me syncs,

00:12:58.000 --> 00:13:00.400
It's usually syncing a whole
bunch of different things,

00:13:00.450 --> 00:13:03.060
and quite often it's going to
invite all sorts of applications.

00:13:03.220 --> 00:13:07.610
So on a basic Mac OS X system,
we're going to start

00:13:07.610 --> 00:13:13.340
up Address Book Sync,
Calendar Sync, Safari Sync, Mail Sync,

00:13:13.340 --> 00:13:14.090
etc.

00:13:16.590 --> 00:13:19.300
So once your session started,
from the client's perspective,

00:13:19.300 --> 00:13:23.480
what you do next is that you
have to decide what kind of

00:13:23.480 --> 00:13:27.250
sync session it's going to be,
what you're going to do.

00:13:27.300 --> 00:13:35.290
There are different kinds of sessions
that you can perform depending upon the

00:13:35.690 --> 00:13:40.170
state of both the client and the server.

00:13:41.170 --> 00:13:45.040
So these are the basic four listed.

00:13:45.400 --> 00:13:47.650
I don't want to go into these in
too much detail because Bruce is

00:13:47.650 --> 00:13:49.400
going to cover those later.

00:13:49.440 --> 00:13:53.650
But essentially,
you need to know what you want to do,

00:13:53.660 --> 00:13:56.390
and the sync server,
the sync engine might override what

00:13:56.390 --> 00:13:59.780
you think you're going to do and
tell you to do something different.

00:14:00.860 --> 00:14:05.480
And this basically boils down to whether
you send things that have changed

00:14:05.550 --> 00:14:09.330
as far as your client is concerned,
or whether you send the whole data.

00:14:13.410 --> 00:14:16.800
So the next phase is the push phase.

00:14:16.890 --> 00:14:22.290
That part of the process,
and this represents these five states,

00:14:22.580 --> 00:14:26.890
basically represent a finite state
machine that the sync engine is managing.

00:14:26.990 --> 00:14:30.920
So then the push phase,
it's your client's responsibility to

00:14:30.920 --> 00:14:33.520
provide the data to the sync engine.

00:14:33.780 --> 00:14:37.420
So graphically speaking,
it looks something like this.

00:14:37.420 --> 00:14:42.400
You've got your data in a database,
and over it goes to the sync engine.

00:14:45.050 --> 00:14:47.600
Now that's when we get involved.

00:14:47.670 --> 00:14:50.300
We then look at the
changes that you've made.

00:14:50.340 --> 00:14:53.140
These might be updates or adds, deletes.

00:14:53.280 --> 00:14:55.190
You may have added
something to a relationship,

00:14:55.190 --> 00:14:58.880
you may have removed something,
you may have reordered things, etc.

00:14:59.460 --> 00:15:01.880
So the sync engine looks at those,
makes sure that you're

00:15:01.880 --> 00:15:06.050
not breaking any rules,
and then propagates those into the truth.

00:15:12.330 --> 00:15:16.620
Any of the resulting changes
come back into the sync engine,

00:15:16.620 --> 00:15:18.800
ready for the next
phase of the operation,

00:15:18.820 --> 00:15:24.200
where the client then pulls the
changes from the sync engine.

00:15:36.500 --> 00:15:40.200
At the end of all that,
we'll either finish the

00:15:40.200 --> 00:15:44.000
session and we're good to go,
or you might cancel the session,

00:15:44.080 --> 00:15:47.190
or the sync engine might cancel
the session if something was amiss.

00:15:47.300 --> 00:15:51.070
And we can actually cancel the
session in most of those different

00:15:51.070 --> 00:15:53.310
phases for some reason or another.

00:15:53.460 --> 00:15:56.390
If there's a runtime exception
or something serious like that,

00:15:56.500 --> 00:15:59.290
that will usually cause
the session to be canceled.

00:15:59.380 --> 00:16:02.710
In which case, the transaction didn't
happen and everybody goes

00:16:02.900 --> 00:16:04.550
back to where they started.

00:16:12.010 --> 00:16:16.040
At the end of the sync session,
the idea is that your application

00:16:16.040 --> 00:16:20.470
data is now looking the same as what
was in the truth and vice versa.

00:16:20.550 --> 00:16:21.640
So everybody's in sync.

00:16:21.640 --> 00:16:27.420
So that's the five phases.

00:16:34.250 --> 00:16:38.680
I'm assuming some of you
are beginners with sync.

00:16:38.680 --> 00:16:43.790
What's the best way to get
started in this endeavor?

00:16:45.270 --> 00:16:49.810
Well, if you're really new to sync,
you might well be new

00:16:49.900 --> 00:16:53.090
to Cocoa programming and
Mac OS X development,

00:16:53.090 --> 00:16:54.700
and you might be writing
a new application,

00:16:54.790 --> 00:16:57.200
and you might be thinking about
using Core Data for that application,

00:16:57.200 --> 00:17:01.190
because it's a kind of logical
consequence of wanting to store stuff.

00:17:02.090 --> 00:17:05.360
If you're in that category or
you already have an existing

00:17:05.360 --> 00:17:09.120
application with Core Data and
you want to sync that data around,

00:17:09.120 --> 00:17:12.590
well, we have this technology
called Core Data Sync,

00:17:12.590 --> 00:17:14.870
and that is very straightforward.

00:17:15.110 --> 00:17:20.100
You simply mod--you annotate your--

00:17:21.730 --> 00:17:23.830
Your Core Data model in Xcode.

00:17:24.930 --> 00:17:28.330
Tell it which properties you want to sync
and which relationships you want to sync.

00:17:28.440 --> 00:17:32.480
And basically we'll go off and
deal with most of the hard work,

00:17:32.530 --> 00:17:34.520
track the changes, etc.

00:17:34.520 --> 00:17:37.910
So this is great because it minimizes
the amount of code you need to

00:17:37.910 --> 00:17:41.520
write and minimizes the amount
of testing you need to go through.

00:17:43.630 --> 00:17:45.460
Underneath we have some
other additional things.

00:17:45.530 --> 00:17:50.260
We're making sure that you don't,
the changes that your application makes

00:17:50.390 --> 00:17:52.080
doesn't result in you syncing every time.

00:17:52.080 --> 00:17:55.830
There's a bit of throttling heuristic.

00:17:56.890 --> 00:18:00.860
And I wanted to note that the
one caveat with this is that

00:18:01.230 --> 00:18:03.540
some of the existing schemas,
because of the way they're set up,

00:18:03.680 --> 00:18:04.620
can't be synced like this.

00:18:04.710 --> 00:18:11.320
So this is primarily for your application
data that's custom to your application.

00:18:12.830 --> 00:18:17.300
So as I said, all you need to do,
annotate the Core Data schema,

00:18:17.390 --> 00:18:19.610
add a few lines of code,

00:18:21.710 --> 00:18:25.540
It looks something like this.

00:18:25.550 --> 00:18:28.120
So the registration part,
referring back to what I was

00:18:28.240 --> 00:18:30.970
talking about in the intro,
registration is when you basically

00:18:30.970 --> 00:18:35.260
say this is the schema I'm interested
in and this is my client description.

00:18:38.120 --> 00:18:40.200
This is a bit of Core Data magic.

00:18:40.200 --> 00:18:44.750
It says, I want to track sync changes.

00:18:44.850 --> 00:18:47.500
And this is how you start a sync.

00:18:47.600 --> 00:18:48.900
And that's pretty much it.

00:18:48.900 --> 00:18:51.180
So, very little code involved.

00:18:53.600 --> 00:18:55.840
Some people say, "Well,
Core Data is way too complicated.

00:18:55.840 --> 00:18:59.450
I don't want to do Core Data."

00:19:00.120 --> 00:19:01.300
Well, we now have Preferences Sync.

00:19:01.300 --> 00:19:04.580
In Leopard,
we introduced a mechanism which if

00:19:04.580 --> 00:19:08.940
the user just turns on Preferences
Sync in System Preferences,

00:19:08.990 --> 00:19:14.030
all their preferences for all of their
applications pretty much automatically

00:19:14.080 --> 00:19:18.270
get synced over MobileMe back
and forth between Mac and Mac.

00:19:19.330 --> 00:19:22.660
So that's kind of interesting because
you basically don't need to do

00:19:22.660 --> 00:19:27.980
anything to your application as long
as you're using NS user defaults or

00:19:28.600 --> 00:19:34.870
CFPreferences to store your preferences,
we're going to sync them on your behalf.

00:19:35.020 --> 00:19:39.320
So for some applications,
if you don't have a large amount

00:19:39.320 --> 00:19:42.460
of data for yourself or you,
you know,

00:19:42.520 --> 00:19:46.260
literally your application is fairly
simple and most of what you want

00:19:46.260 --> 00:19:50.390
to sync is stored in preferences,
then this will do it for you.

00:19:50.450 --> 00:19:53.120
And there are a couple of
exclusions that we do automatically.

00:19:53.170 --> 00:19:56.050
We don't sync by host preferences
because they are meant to be

00:19:56.050 --> 00:19:57.640
specific to a host machine.

00:19:57.660 --> 00:20:01.400
We filter out some things
that change too rapidly.

00:20:01.440 --> 00:20:04.320
And we have a built-in heuristic, again,
to throttle syncing

00:20:04.320 --> 00:20:04.880
for those applications.

00:20:04.880 --> 00:20:08.600
applications that change your
given preference too frequently.

00:20:08.890 --> 00:20:09.950
But that's great.

00:20:10.230 --> 00:20:12.690
So that, for some people,
that just may give you

00:20:12.970 --> 00:20:14.870
your sync for free.

00:20:17.310 --> 00:20:20.590
Then there are some more
complicated clients.

00:20:20.590 --> 00:20:25.440
And specifically,
these are the ones where

00:20:25.440 --> 00:20:28.960
Core Data Sync isn't going to cut it
because you want to sync Contacts,

00:20:29.050 --> 00:20:31.910
Calendar and Bookmarks,
something like that.

00:20:32.160 --> 00:20:34.460
So this can get complicated.

00:20:34.860 --> 00:20:37.230
Sync is a highly cooperative endeavor.

00:20:37.350 --> 00:20:40.560
You know, your application,
when it starts syncing with

00:20:40.560 --> 00:20:42.600
some other application,
you're basically saying,

00:20:42.670 --> 00:20:45.390
"If that guy decides
to delete this record,

00:20:45.450 --> 00:20:49.540
then I have to trust him and I have
to delete mine." And vice versa.

00:20:49.810 --> 00:20:54.140
So you have to bear that in mind
when you're writing a sync client,

00:20:54.140 --> 00:20:58.500
that you're inherently going to
start trusting other applications

00:20:58.760 --> 00:21:00.550
to do the right thing.

00:21:00.650 --> 00:21:02.600
Not the least of trusting
us to do the right thing.

00:21:08.600 --> 00:21:13.120
So the first thing to think
about is start simple.

00:21:13.210 --> 00:21:16.010
We don't want Sync Cone to
be the entirety of your app.

00:21:16.140 --> 00:21:18.480
We're trying to make this
as simple as possible.

00:21:18.620 --> 00:21:22.500
So we provide this class
called iSyncSessionDriver,

00:21:22.550 --> 00:21:28.500
which does most of what a sync client
needs to do in a sort of packaged manner.

00:21:28.500 --> 00:21:32.500
It handles the control flow for you,
that whole phase diagram thing.

00:21:32.500 --> 00:21:36.190
You don't really have to worry about
the pull and the push and the mingle,

00:21:36.190 --> 00:21:36.650
etc.

00:21:38.030 --> 00:21:40.700
And for 90% of applications,
that's probably fine.

00:21:40.700 --> 00:21:42.460
And basically,
the only thing you need to worry about

00:21:42.500 --> 00:21:44.400
is that whole data transformation thing.

00:21:44.400 --> 00:21:47.800
You know, I've got my data here,
I need to put it in sync records

00:21:47.930 --> 00:21:50.290
and convert it back and forth.

00:21:50.320 --> 00:21:54.570
You also need to figure out

00:21:55.230 --> 00:21:58.360
How you're going to describe your schema.

00:21:58.490 --> 00:22:02.890
That again can get kind of complicated,
so Bruce will talk a little bit

00:22:02.890 --> 00:22:06.420
about the details of what's involved
in thinking about a schema and

00:22:06.420 --> 00:22:08.440
what we call identity properties.

00:22:09.970 --> 00:22:14.900
So, okay, so we tried to persuade you
to use iSync Session Driver,

00:22:14.900 --> 00:22:16.940
but no, that's, no,
you've got other things to do.

00:22:16.940 --> 00:22:19.030
You want something a
bit more complicated,

00:22:19.080 --> 00:22:19.730
a bit more meaty.

00:22:19.770 --> 00:22:23.960
So, why would you not want to
use iSync Session Driver?

00:22:23.960 --> 00:22:28.930
Well, you may want a little bit more
control over how things work.

00:22:29.000 --> 00:22:33.330
That whole push-pull phase thing,
you know,

00:22:33.390 --> 00:22:39.830
you may be talking to a remote server,
you may be doing some other things,

00:22:39.960 --> 00:22:41.540
but you need a little bit
more fine-grained control

00:22:41.540 --> 00:22:42.550
over what goes on there.

00:22:42.700 --> 00:22:46.100
So, in that case, you may want to use
our more complete API,

00:22:46.100 --> 00:22:48.790
which is available,
where you get involved and

00:22:48.790 --> 00:22:52.330
you have to handle the control
flow and the phases as well.

00:22:52.420 --> 00:22:56.340
The other reason for doing
that is that you may want 10.4

00:22:56.340 --> 00:23:01.300
compatibility because iSync Session
Driver was only introduced in 10.5.

00:23:01.300 --> 00:23:08.100
So that's it.

00:23:12.830 --> 00:23:20.410
Okay, so what's new in Snow Leopard 10.6?

00:23:20.510 --> 00:23:22.780
We have a few things going on.

00:23:24.790 --> 00:23:31.800
The focus for Snow Leopard for us is
making life better for the end user.

00:23:32.920 --> 00:23:39.700
Improving performance,
which of course is also, in principle,

00:23:39.700 --> 00:23:39.700
making things better for the end user.

00:23:39.760 --> 00:23:43.710
So we've got a couple of subcategories:
Usability and Resilience.

00:23:46.700 --> 00:23:50.120
So what are the complaints
that we get with syncing,

00:23:50.120 --> 00:23:53.820
which again,
if you're completely fresh to syncing,

00:23:53.820 --> 00:23:58.670
you probably won't be aware of it,
but some of those veterans in

00:23:58.670 --> 00:24:01.420
the crowd will know about this.

00:24:01.510 --> 00:24:07.720
We have built-in checks so that
if a large number of changes come

00:24:07.720 --> 00:24:11.000
through or we detect a conflict,
we'll put up a panel

00:24:11.000 --> 00:24:13.880
and we'll ask the user,
you know, which,

00:24:13.880 --> 00:24:16.600
whether they want to accept
a large number of changes.

00:24:16.600 --> 00:24:20.620
Or if it's a conflict,
which version of the records that

00:24:20.620 --> 00:24:23.130
are conflicting do they want to use?

00:24:23.470 --> 00:24:26.350
But there have been a few problems
with that in the past because

00:24:26.990 --> 00:24:30.410
sometimes we've put up conflicts
where the user can't really tell the

00:24:30.410 --> 00:24:32.480
difference between the two sides.

00:24:32.680 --> 00:24:37.100
And for the data change alert,
when we say, "Hey,

00:24:37.100 --> 00:24:40.650
you've got 100 contacts
that are being deleted."

00:24:41.370 --> 00:24:43.430
We're showing things
which aren't relevant.

00:24:43.520 --> 00:24:46.640
So those have been trimmed away,
and we're trying to make sure

00:24:46.640 --> 00:24:50.830
that this is streamlined and only
appearing when absolutely necessary

00:24:50.830 --> 00:24:54.610
and providing the user with
completely relevant information.

00:24:57.300 --> 00:25:00.450
I see there are some people
who have experience with this.

00:25:00.540 --> 00:25:02.190
Interesting.

00:25:02.680 --> 00:25:06.060
And I might want to point out on that.

00:25:07.400 --> 00:25:10.950
There are things that we
can do for our schemas,

00:25:11.030 --> 00:25:13.040
so for things that
Apple is responsible for,

00:25:13.040 --> 00:25:16.640
like contacts and calendars, et cetera.

00:25:16.750 --> 00:25:18.300
We can make those improvements.

00:25:18.440 --> 00:25:22.770
But if you're a developer and
you've added schema extensions,

00:25:22.820 --> 00:25:26.100
for example,
or you have your own schema and

00:25:26.100 --> 00:25:30.600
your own data that you're syncing,
it's important for you to think about

00:25:30.600 --> 00:25:35.070
these things and about what you want
to present to the user and try and make

00:25:35.070 --> 00:25:41.790
sure that that is... any dialogue that
does appear is going to make sense.

00:25:44.820 --> 00:25:48.630
So the other thing that we've done is
focused a little bit on resilience.

00:25:48.740 --> 00:25:52.750
We've refactored the sync service so
the parts of the process of syncing

00:25:52.750 --> 00:25:55.200
run in a completely separate process.

00:25:55.330 --> 00:25:58.900
So that sort of bulletproofed
the whole system and generally

00:25:58.900 --> 00:26:00.820
makes performance better.

00:26:01.140 --> 00:26:05.830
We've made a number of fixes
to filtering both in 10.5

00:26:05.830 --> 00:26:12.870
updates and in Snow Leathern.

00:26:13.500 --> 00:26:16.530
We fixed some thread safety
issues that we discovered after

00:26:16.530 --> 00:26:20.370
a bit of testing on 8-way Xeons,
which was nice.

00:26:21.550 --> 00:26:27.860
And we've been doing some work to make
the Apple sync clients more bulletproof.

00:26:27.860 --> 00:26:31.310
As I said, the whole endeavor of
sync is very cooperative.

00:26:31.440 --> 00:26:34.050
So you basically have to,
when you're writing a client,

00:26:34.100 --> 00:26:37.730
you have to accept what you're
given and be fairly polite about

00:26:37.730 --> 00:26:39.490
what you give other people.

00:26:39.490 --> 00:26:43.130
It's kind of like the Internet,
but different.

00:26:47.570 --> 00:26:50.790
So the other things that we're focusing
on for Snow Leopard is performance.

00:26:50.790 --> 00:26:53.390
And this is performance
in sort of two ways.

00:26:53.480 --> 00:26:59.270
One aspect of performance is we want your

00:27:00.780 --> 00:27:04.530
We want the sync to be
performant for the user,

00:27:04.530 --> 00:27:10.680
both from the perspective of not
using much CPU and memory and disk

00:27:10.680 --> 00:27:14.290
I/O on the system that they're using,
but also from the perspective

00:27:14.300 --> 00:27:18.010
of they change something
and something else happens.

00:27:18.140 --> 00:27:26.020
So, partly prompted by the
integration with MobileMe,

00:27:26.110 --> 00:27:29.680
we're looking to make trickle syncing,
which basically means

00:27:29.730 --> 00:27:33.040
I make a change in an app,
it immediately syncs it to the

00:27:33.110 --> 00:27:36.340
sync engine on the desktop,
and that will immediately

00:27:36.420 --> 00:27:37.890
get synced with MobileMe.

00:27:37.950 --> 00:27:40.000
So the idea is going to be that,
you know,

00:27:40.000 --> 00:27:44.800
literally if somebody makes a change,
ping, it goes up to ., up to MobileMe,

00:27:44.800 --> 00:27:47.610
and ping, it's on your iPhone.

00:27:50.070 --> 00:27:56.870
The other things we focused
on are many folks have noticed

00:27:57.000 --> 00:27:59.600
that with .max syncing,
mobile me syncing,

00:27:59.760 --> 00:28:03.760
we've now got a large number of
data classes for the user to sync

00:28:03.960 --> 00:28:06.550
and so if you -- I don't know how
many people have actually done

00:28:06.790 --> 00:28:10.080
this but if you're like me and you
turn them all on and you do a sync,

00:28:10.080 --> 00:28:14.200
it can take quite a while to
work through each one of them.

00:28:14.200 --> 00:28:16.380
So we've -- we're working
towards pipelining all of

00:28:16.380 --> 00:28:17.760
those network operations.

00:28:17.760 --> 00:28:22.660
So the whole thing is going to be much,
much faster.

00:28:22.660 --> 00:28:24.790
And of course,
short cutting anything where

00:28:24.790 --> 00:28:26.600
there's nothing actually to sync.

00:28:32.130 --> 00:28:38.140
Now, going back to the focus on
performance again as regards

00:28:38.140 --> 00:28:44.230
user perception on the desktop,
we've split the truth store out.

00:28:44.240 --> 00:28:47.560
So up until, you know,
in 10.5 and in 10.4,

00:28:47.690 --> 00:28:52.320
we had the truth database,
and it literally contained all

00:28:52.420 --> 00:28:55.240
the data that you had in it
for every single data class.

00:28:55.320 --> 00:28:58.370
And there were some occasions where
we would end up having to sort of

00:28:58.450 --> 00:29:01.950
touch a bunch of records that were
irrelevant to any particular operation.

00:29:01.980 --> 00:29:04.650
So what we've done is we've
split these things out,

00:29:04.710 --> 00:29:08.430
so we've now got sort of contacts
over here and calendars over

00:29:08.430 --> 00:29:10.210
here and bookmarks over here,
etc.

00:29:10.260 --> 00:29:15.130
And that's streamlined the
whole process so we can...

00:29:16.010 --> 00:29:19.430
We could do certain operations
and we will only ever touch

00:29:19.590 --> 00:29:21.600
records that are relevant.

00:29:21.600 --> 00:29:24.400
So that just reduces
memory footprint primarily.

00:29:27.660 --> 00:29:30.120
We're also introducing
a custom NSString class.

00:29:30.210 --> 00:29:33.990
This should be entirely
transparent to you guys.

00:29:34.170 --> 00:29:40.200
But that basically lets us do
quicker comparisons of identity.

00:29:43.000 --> 00:29:51.000
[Transcript missing]

00:29:51.370 --> 00:29:54.420
We've also added some logic that's
going to short circuit some syncs,

00:29:54.420 --> 00:29:56.740
so where the client doesn't
actually have anything to do,

00:29:56.740 --> 00:29:59.000
if the sync engine decides that
it doesn't have anything to do,

00:29:59.000 --> 00:30:02.880
we can make the whole
process go a little quicker.

00:30:03.110 --> 00:30:06.390
And I mentioned this before,
we've refactored the sync server.

00:30:06.390 --> 00:30:08.690
So one of the...

00:30:10.480 --> 00:30:13.720
One of the downstream effects of this is
that because we've refactored the sync

00:30:13.820 --> 00:30:20.040
server and we've split up the truth store
into different truth types data classes,

00:30:20.120 --> 00:30:23.860
we have the potential to actually
start running syncs in parallel.

00:30:23.960 --> 00:30:28.160
So if you have a client that syncs
more than one particular data class,

00:30:28.360 --> 00:30:32.190
and of course on our side an
example would be MobileMe,

00:30:32.270 --> 00:30:34.380
we could actually start
running those in parallel.

00:30:34.380 --> 00:30:39.070
And that for the user would result
in a much shorter time spent syncing.

00:30:44.760 --> 00:30:49.980
So other Snow Leopard news, I wanted to,
you know, the whole conference has been

00:30:49.990 --> 00:30:53.820
emphasizing the iPhone greatly,
but I did want to mention that, you know,

00:30:53.820 --> 00:30:55.520
we have iSync Plugin Maker.

00:30:55.520 --> 00:31:01.580
That's a developer tool which is used by
companies like Sony Ericsson and Nokia,

00:31:01.580 --> 00:31:06.770
and they can develop plug-ins for
iSync which allow pretty much any sync

00:31:06.770 --> 00:31:09.580
ML-based phone to sync with the Mac.

00:31:09.640 --> 00:31:12.360
And it's been updated for Snow Leopard.

00:31:13.020 --> 00:31:15.770
There'll be more info available in
the lab session this afternoon if

00:31:15.770 --> 00:31:17.720
anybody's interested in hearing about it.

00:31:28.300 --> 00:31:35.550
So, harm sync is going to be
no more in Snow Leopard.

00:31:37.800 --> 00:31:41.000
It's PowerPC, it's CFM,
it hasn't been updated

00:31:41.000 --> 00:31:43.630
in rather a long time.

00:31:43.650 --> 00:31:47.840
We'd love Palm to jump in and
write a Sync Services client.

00:31:48.110 --> 00:31:50.850
But for the moment, so we're going to be
removing it in Snow Leopard,

00:31:50.860 --> 00:31:56.760
and we recommend existing Sync
Services solutions for Palm right now.

00:32:03.230 --> 00:32:05.000
So that's it for Snow Leopard.

00:32:05.090 --> 00:32:06.920
So what I'm going to do
now is invite Bruce Niloo,

00:32:06.920 --> 00:32:09.640
who's our tech lead for
sync services up on stage.

00:32:09.690 --> 00:32:13.200
And he's going to go through
some advanced sync topics for

00:32:13.200 --> 00:32:14.700
all you guys who are experts.

00:32:14.750 --> 00:32:17.900
And everybody's an expert now
because I've covered it all.

00:32:17.930 --> 00:32:19.290
Thanks.

00:32:25.500 --> 00:32:27.460
I'm Bruce Niloo.

00:32:27.590 --> 00:32:29.580
I'm the current tech
lead for Sync Services,

00:32:29.750 --> 00:32:31.160
probably not the last.

00:32:31.210 --> 00:32:40.470
I'm glad that Andy left me a lot
of time to go over this topic.

00:32:41.150 --> 00:32:43.600
A little bit of a difference
between my talk and Andy's.

00:32:43.680 --> 00:32:48.990
There's not going to be much graphics,
no short movies to make up for that.

00:32:49.380 --> 00:32:55.240
I'm going to kind of share some
bad puns with you about sync.

00:32:55.340 --> 00:33:03.540
And it's kind of hard to work in sync
services and not come up with bad puns.

00:33:03.710 --> 00:33:04.940
It's kind of a sport.

00:33:05.040 --> 00:33:07.020
I also want to talk about
something very important.

00:33:07.220 --> 00:33:10.120
There's a little bit of
contention about how you spell

00:33:10.120 --> 00:33:12.050
the word sync for sync services.

00:33:12.210 --> 00:33:16.910
Well, a former tech lead of sync
services put it quite aptly.

00:33:17.080 --> 00:33:20.690
There's no I in team and
there's no H in sync.

00:33:21.130 --> 00:33:22.050
Okay.

00:33:22.470 --> 00:33:28.070
So now without further ado,
let's get to the

00:33:28.640 --> 00:33:29.890
The topics.

00:33:29.960 --> 00:33:33.130
As Andy said,
the primary focus for Snow Leopard

00:33:33.440 --> 00:33:38.500
is going to be resilience,
performance, and usability improvements.

00:33:38.640 --> 00:33:41.180
But we have made some
API changes as well,

00:33:41.350 --> 00:33:42.700
and I'm going to quickly go over them.

00:33:42.700 --> 00:33:43.840
They're fairly minor.

00:33:43.840 --> 00:33:47.500
And then we're going to sync
about some things together.

00:33:47.500 --> 00:33:50.880
And in particular,
I basically want to share with you

00:33:50.880 --> 00:33:55.160
some of the aspects of sync that
are worth understanding a bit before

00:33:55.160 --> 00:33:57.300
you go and write a sync client.

00:33:58.680 --> 00:33:59.980
Mm-hmm

00:34:01.090 --> 00:34:06.550
So, some of our changes in the
API are really declarative changes

00:34:06.550 --> 00:34:10.540
regarding new keys that we're
going to support in the schema.

00:34:10.750 --> 00:34:17.800
As Andy has already talked about,
a schema is how you define to sync

00:34:17.800 --> 00:34:21.450
services what your application
is interested in syncing.

00:34:21.550 --> 00:34:25.280
It defines the structure, the properties,
the types, and so forth.

00:34:25.420 --> 00:34:31.480
We've added a new key for specifying
a different kind of identity property,

00:34:31.500 --> 00:34:34.300
which we're calling a
compound identity property,

00:34:34.300 --> 00:34:37.500
and I'll get into that
in more detail in a bit.

00:34:37.500 --> 00:34:42.060
To kind of support usability issues
where conflicts perhaps appear

00:34:42.060 --> 00:34:46.560
when you don't want them to appear,
we've added another key where you can

00:34:46.560 --> 00:34:51.500
declare that certain properties should be
ignored for the purposes of a conflict.

00:34:51.500 --> 00:34:54.890
We've added a new container
type called a set,

00:34:54.900 --> 00:34:58.490
which has the semantics
one might expect of a set,

00:34:58.600 --> 00:35:01.500
such as no duplicates and the like.

00:35:01.680 --> 00:35:05.710
And this is something we
actually did in Leopard,

00:35:05.820 --> 00:35:11.500
but we're going to kind of emphasize
this and slowly get rid of it.

00:35:11.570 --> 00:35:15.680
Strongly ordered relationships,
for those of you who know what that is,

00:35:15.680 --> 00:35:18.160
was a great idea,
but there were all kinds of

00:35:18.160 --> 00:35:20.500
difficulties associated with it.

00:35:20.500 --> 00:35:21.500
Not only that, but there were also some
problems associated with it.

00:35:21.500 --> 00:35:25.430
Not the least of which,
there was no really good UI that we

00:35:25.430 --> 00:35:30.810
could come up with reasonably for showing
what a conflict was in a relationship

00:35:30.910 --> 00:35:33.390
that had lots and lots of members.

00:35:33.620 --> 00:35:36.790
So that's now a no-op,
which basically means it's going

00:35:36.790 --> 00:35:40.770
to devolve into being the same
as a weakly ordered relationship.

00:35:41.180 --> 00:35:45.300
Ping is now API for
some of our developers.

00:35:45.300 --> 00:35:48.660
They already know what this is all about.

00:35:48.660 --> 00:35:51.430
Some sync clients actually
take a long time to sync.

00:35:51.610 --> 00:35:53.560
Maybe they're talking
to a really slow device.

00:35:53.590 --> 00:35:55.960
Maybe they're talking to
a server up in the cloud.

00:35:56.060 --> 00:36:00.100
And they, for control reasons,
they actually need to

00:36:00.100 --> 00:36:02.710
start the sync session,
then do their business with

00:36:02.710 --> 00:36:04.030
their own backing store.

00:36:04.150 --> 00:36:08.280
Sometimes, if this takes too long a time,
Sync Services says, you know what,

00:36:08.280 --> 00:36:12.100
I'm going to throw this client out
of this particular sync session.

00:36:12.390 --> 00:36:15.350
And sometimes that's not what you want.

00:36:15.570 --> 00:36:19.060
This is a way to tell the
sync server that you're still

00:36:19.060 --> 00:36:20.670
actually interested in syncing.

00:36:20.700 --> 00:36:24.810
It's just taking you longer than
we might hope it would take you.

00:36:25.510 --> 00:36:28.400
Finally,
we're going to improve filtering.

00:36:28.590 --> 00:36:30.570
This isn't API so much.

00:36:30.900 --> 00:36:35.240
It is a bit because up until now,
you've had to really go through

00:36:35.240 --> 00:36:37.190
contortions to do filtering right.

00:36:37.660 --> 00:36:40.950
This is kind of personal to me,
and in Snow Leopard,

00:36:41.060 --> 00:36:46.890
filtering is going to be a lot
simpler and actually do what you

00:36:46.890 --> 00:36:49.400
expect it to do most of the time.

00:36:49.400 --> 00:36:51.900
So let's go into the API changes a bit.

00:36:51.900 --> 00:36:57.180
The compound identity properties
is just a new entry that

00:36:57.200 --> 00:36:59.400
you put in the schema plist.

00:36:59.400 --> 00:37:01.270
It's an array of arrays.

00:37:01.480 --> 00:37:05.230
Currently, identity properties is just
an array of property names.

00:37:05.400 --> 00:37:10.390
Now you can specify a kind of
a preferred ordering of those.

00:37:10.390 --> 00:37:14.610
And again, I'm going to go into that
in more detail in a bit.

00:37:15.440 --> 00:37:18.790
Ignore conflicts, same deal.

00:37:18.940 --> 00:37:22.660
You can type a particular
kind of attribute,

00:37:22.660 --> 00:37:26.790
say a UUID, that really makes no sense
to present to the user.

00:37:26.790 --> 00:37:30.230
You can have two GUIDs popping
up in the conflict resolver,

00:37:30.390 --> 00:37:33.300
and the end user is going to have
no idea what to do about that.

00:37:33.530 --> 00:37:39.470
You can now say,
"Don't show that for the purposes of

00:37:39.550 --> 00:37:45.300
conflict." And what that means is,
we're going to choose one of them,

00:37:45.300 --> 00:37:50.890
and your application should be resilient
to the fact that the UUID might

00:37:50.890 --> 00:37:52.250
actually change out from under you.

00:37:52.300 --> 00:37:55.230
This is something your
client needed to be anyway.

00:37:55.230 --> 00:37:58.500
It's just that now we're taking
the user out of the business

00:37:58.500 --> 00:38:00.300
of knowing what's going on.

00:38:00.300 --> 00:38:02.300
Okay, improved filtering.

00:38:02.300 --> 00:38:05.300
So we had some issues with
filtering in the past.

00:38:05.300 --> 00:38:08.300
In particular,
you could have relationships

00:38:08.300 --> 00:38:13.300
which would refer to objects that
you thought you had filtered out.

00:38:13.300 --> 00:38:16.300
Well,
that's probably not a good thing to do.

00:38:16.300 --> 00:38:21.470
Relational integrity rules like cascade,
delete, required relationships kind of

00:38:21.480 --> 00:38:25.300
didn't work the way you might
expect them to with filtering.

00:38:25.300 --> 00:38:29.500
And so to work around that,
clients had to actually

00:38:29.550 --> 00:38:33.040
filter effectively all of the
-- all of the entities that

00:38:33.040 --> 00:38:36.660
were related to one another,
even though really all

00:38:36.660 --> 00:38:39.290
they wanted to do was say,
"If a contact isn't in a specific group

00:38:39.380 --> 00:38:42.300
or an event isn't in a specific calendar,
I'm not interested."

00:38:42.300 --> 00:38:46.490
Now you'll be able to do that.

00:38:47.540 --> 00:38:51.780
Andy wanted me to emphasize
that sync is cooperative.

00:38:51.980 --> 00:38:53.660
This is kind of a tautology.

00:38:53.660 --> 00:38:56.730
Andy spoke a lot about
sync being an ecosystem.

00:38:56.910 --> 00:38:57.500
And it is.

00:38:57.500 --> 00:39:02.900
There's a bunch of different clients,
some of which can really make your day

00:39:02.900 --> 00:39:08.300
pretty miserable when they decide to
delete all the records that you rely on.

00:39:08.500 --> 00:39:13.380
So we actually try to make an effort
to prevent this from happening.

00:39:13.670 --> 00:39:20.190
We will raise exceptions of sundry sorts
to your clients if they push in things

00:39:20.300 --> 00:39:23.360
that don't coincide with the schema.

00:39:23.520 --> 00:39:27.250
This is kind of why it's very important
that when you're defining your schema,

00:39:27.360 --> 00:39:29.460
you type it appropriately and so forth.

00:39:29.500 --> 00:39:36.500
So we will raise an exception if you try
to push in a property of the wrong type.

00:39:36.540 --> 00:39:42.390
If your relationships are incorrect
in the sense that you're pushing in a

00:39:42.390 --> 00:39:45.500
reference to an object of a wrong type.

00:39:45.500 --> 00:39:49.380
However, what we don't do,
and this is a lack,

00:39:49.490 --> 00:39:51.440
is we don't do any semantic checking.

00:39:51.500 --> 00:39:54.700
So, for example,
you might push in a start date

00:39:54.700 --> 00:39:58.760
and an end date for an event,
and the end date might be

00:39:58.760 --> 00:40:01.490
earlier than the start date.

00:40:01.500 --> 00:40:04.500
And maybe you're going to actually,
your client or your application

00:40:04.500 --> 00:40:04.500
is going to be a little bit
slower than the start date.

00:40:04.500 --> 00:40:07.340
So you're going to want
to take the difference to

00:40:07.440 --> 00:40:09.450
figure out the interval here.

00:40:09.530 --> 00:40:13.290
It's going to come up to be a negative
number and maybe you're going to crash.

00:40:13.560 --> 00:40:17.850
Well, since it is a cooperative endeavor,
this is why you need to be defensive

00:40:17.850 --> 00:40:20.500
about those types of things.

00:40:20.500 --> 00:40:24.740
Because some clients just are not going
to interpret these fields necessarily

00:40:24.740 --> 00:40:26.420
the way you expect them to be.

00:40:26.890 --> 00:40:31.570
Kind of in this line,
I wanted to share a little bit

00:40:31.570 --> 00:40:32.500
with you why we don't promote
as API pushing the truth.

00:40:32.540 --> 00:40:42.500
Basically, you know from .Mac if you've
ever synced with or MobileMe,

00:40:42.500 --> 00:40:46.590
if you've ever synced with MobileBe,
you can tell MobileMe to

00:40:46.590 --> 00:40:51.030
reset your contacts,
your calendars, or any data class from

00:40:51.310 --> 00:40:55.690
MobileMe onto your computer.

00:40:55.780 --> 00:40:59.730
We provide the capability in
Sync Services to extend your

00:40:59.730 --> 00:41:05.800
entities with new property types,
even new entities.

00:41:06.820 --> 00:41:10.300
If you're going to be pushing the
truth and you don't know about those

00:41:10.300 --> 00:41:14.240
new entities or new properties,
other clients are potentially

00:41:14.240 --> 00:41:15.700
going to lose data.

00:41:15.710 --> 00:41:19.740
In fact, we don't even have to be in a
situation where a scheme has

00:41:19.770 --> 00:41:21.700
been extended in this way.

00:41:21.700 --> 00:41:25.700
Some clients don't sync all the
properties of the public schemas.

00:41:25.810 --> 00:41:28.550
So you may only sync
a subset of something,

00:41:28.550 --> 00:41:31.560
and if your client was
able to push the truth,

00:41:31.560 --> 00:41:35.700
again, another client like Address
Book might lose data.

00:41:35.700 --> 00:41:39.810
So really pushing the
truth is a safe operation,

00:41:39.810 --> 00:41:42.610
only a certain subset of cases.

00:41:42.790 --> 00:41:44.700
It also is probably something
that we always would want to do.

00:41:44.700 --> 00:41:48.700
We always would want to be
a user-initiated action.

00:41:48.700 --> 00:41:52.630
So for these reasons,
this is why to date we

00:41:52.710 --> 00:42:00.110
still have not kind of,
how should I say, accepted or decided to

00:42:00.830 --> 00:42:05.200
implement this as a public API.

00:42:08.400 --> 00:42:14.430
Okay, now to the part of the talk that
gives you some insight into some

00:42:14.430 --> 00:42:19.200
of the problems and some of the
more key concepts that you are

00:42:19.430 --> 00:42:22.300
probably going to be interested in.

00:42:22.300 --> 00:42:27.290
So, sync seems simple, and in fact it is.

00:42:27.360 --> 00:42:32.440
Even if you use the most
procedural API that we have,

00:42:32.440 --> 00:42:38.300
you can probably do 80% of what you need
to do with a very small amount of code,

00:42:38.300 --> 00:42:41.300
and it's going to work for the most part.

00:42:41.780 --> 00:42:44.580
There are some exceptions, however.

00:42:45.010 --> 00:42:53.470
And one of them is your records sometimes
duplicate for inexplicable reasons.

00:42:53.890 --> 00:42:57.070
Sometimes the sync fails.

00:42:57.600 --> 00:43:01.000
And interestingly,
if you were to Google on

00:43:01.000 --> 00:43:04.380
one of these errors,
we get there's quite a

00:43:04.380 --> 00:43:06.750
number of hits on them.

00:43:06.860 --> 00:43:12.450
Sometimes your records disappear
and you have no reason why.

00:43:12.630 --> 00:43:16.710
Sometimes your records appear
in meaningless conflicts.

00:43:18.990 --> 00:43:22.360
Sometimes your client actually
doesn't want to be in sync.

00:43:22.570 --> 00:43:26.400
Now, I'm going to talk about
that a little bit right now,

00:43:26.400 --> 00:43:29.460
but I'm actually going to
not talk about it in general.

00:43:29.490 --> 00:43:33.700
But suffice it to say,
if you have a client that really

00:43:33.700 --> 00:43:38.080
doesn't want to be in sync with
the truth or in sync with what Sync

00:43:38.080 --> 00:43:42.830
Services thinks you should be in,
you need to take extra special

00:43:42.830 --> 00:43:47.120
care that you exercise all
of the corner cases in sync.

00:43:47.580 --> 00:43:52.530
And in particular,
you can end up in situations where

00:43:52.630 --> 00:43:56.250
you have two clients that are
presumably in sync and the end

00:43:56.250 --> 00:43:59.980
user looks at them and they're not.

00:44:02.010 --> 00:44:04.990
Okay, let's think about some things.

00:44:05.110 --> 00:44:08.700
To me, these are some of the
key concepts that are,

00:44:08.800 --> 00:44:12.200
that as developers of sync clients,

00:44:12.390 --> 00:44:16.300
Everyone should master,
or at least understand,

00:44:16.300 --> 00:44:20.640
before they actually get about
to the task of writing code.

00:44:20.830 --> 00:44:22.280
So the negotiated sync modes.

00:44:22.330 --> 00:44:24.820
We're going to go through fast,
slow versus refresh

00:44:24.820 --> 00:44:26.340
and pulling the truth.

00:44:26.490 --> 00:44:30.660
We're going to talk about
identity in sync services.

00:44:32.840 --> 00:44:36.200
We've talked a little bit about schemas,
and we're going to talk a little

00:44:36.300 --> 00:44:38.710
bit more about them as well.

00:44:44.600 --> 00:44:50.700
[Transcript missing]

00:44:50.960 --> 00:44:53.470
is a member of the
Google team at Microsoft.

00:44:53.470 --> 00:44:56.400
He's the founder of the
Google Cloud Platform.

00:44:56.690 --> 00:45:00.230
is doing in a sync session
should really be what the sync

00:45:00.230 --> 00:45:02.400
server expects your client to do.

00:45:02.540 --> 00:45:07.600
In particular,
you both have to agree on fast, slow,

00:45:07.650 --> 00:45:09.720
refresh, or pulling the truth.

00:45:09.850 --> 00:45:13.370
Another point to keep in mind is
that at any point in a sync session,

00:45:13.620 --> 00:45:17.030
a session can be cancelled,
and that might actually affect

00:45:17.030 --> 00:45:18.830
the next mode of the sync.

00:45:18.960 --> 00:45:22.020
Some fallout of bad negotiations.

00:45:22.020 --> 00:45:28.840
These are problems that I've helped
clients debug over and over again.

00:45:29.050 --> 00:45:30.690
The server thinks you're fast syncing.

00:45:30.980 --> 00:45:35.100
You push everything with
different local identifiers.

00:45:35.180 --> 00:45:37.550
Your records are going to duplicate.

00:45:38.050 --> 00:45:41.300
The server thinks you're slow syncing,
but you fast sync.

00:45:41.350 --> 00:45:44.070
All your records will be deleted.

00:45:47.170 --> 00:45:49.880
You might say, "Well,
how can my client ever get into this

00:45:49.880 --> 00:45:55.100
situation?" There's actually a couple of
common patterns where this can happen.

00:45:55.100 --> 00:46:00.100
The most common being that somehow your
backing store has been restored somehow.

00:46:00.100 --> 00:46:05.100
Maybe you've restored it from a backup,
maybe you have an unarchived facility,

00:46:05.230 --> 00:46:09.790
in which case it's very likely
that your client is now going to

00:46:09.790 --> 00:46:15.100
be in a different state than what
Sync Services thinks you're in.

00:46:15.100 --> 00:46:18.310
To handle some of these,
we actually provide API in

00:46:18.310 --> 00:46:20.090
the form of Sync Anchors.

00:46:20.090 --> 00:46:22.920
I'm not going to go into
the specifics of that,

00:46:23.230 --> 00:46:26.100
but I suggest that if you do
have that kind of feature,

00:46:26.100 --> 00:46:29.780
you might consider using Sync Anchors.

00:46:31.270 --> 00:46:39.960
This is actually a pretty accurate
finite state diagram of sync services.

00:46:39.960 --> 00:46:43.800
Basically, the main line is you start,
you negotiate, you push, you mingle,

00:46:43.800 --> 00:46:44.540
and you pull.

00:46:44.540 --> 00:46:46.540
There's some pauses in between this.

00:46:46.680 --> 00:46:51.340
And from any one of those states,
you can either finish it cleanly

00:46:51.340 --> 00:46:53.720
or the sync can get canceled.

00:46:57.100 --> 00:47:00.500
So, what this diagram shows
is what can happen to you,

00:47:00.500 --> 00:47:05.480
what is your next sync mode going to be
as far as the server is concerned if the

00:47:05.650 --> 00:47:08.100
sync fails to complete for some reason.

00:47:08.360 --> 00:47:13.900
And what's interesting is that if you're
refresh syncing or slow syncing and you

00:47:13.900 --> 00:47:18.210
get to the point that you're about to be,
that you're going to be mingled or

00:47:18.210 --> 00:47:21.670
you're being mingled by the sync server,
your next sync is actually

00:47:21.670 --> 00:47:23.020
going to be a fast sync.

00:47:23.100 --> 00:47:27.740
That means that Sync Services is
going to remember the changes that

00:47:27.970 --> 00:47:33.000
you've pushed previously even though
the sync was cancelled on you.

00:47:37.180 --> 00:47:40.900
So I want to talk a little bit about
slow syncing versus refresh syncing.

00:47:41.010 --> 00:47:51.490
This is a common, a source of confusion
for many developers.

00:47:53.490 --> 00:47:56.120
First of all,
from the client's perspective,

00:47:56.120 --> 00:47:59.390
slow syncing and refresh
syncing looks the same.

00:47:59.450 --> 00:48:04.470
It's basically the sync server will
tell your client that you need to push

00:48:04.480 --> 00:48:07.730
every single record that you know about.

00:48:07.800 --> 00:48:14.470
The nuance between the refresh and the
slow sync is really on the server side.

00:48:15.010 --> 00:48:18.980
The sync client, at any point, can say,
"You know what?

00:48:19.400 --> 00:48:23.140
I actually want a refresh or slow sync.

00:48:23.140 --> 00:48:26.660
I want to push all my records."
And that's what those two

00:48:26.660 --> 00:48:28.600
methods on iSync Session do.

00:48:29.020 --> 00:48:33.420
So, on the client side,
the client can tell the server that

00:48:33.420 --> 00:48:35.820
it really wants to do a refresh.

00:48:36.270 --> 00:48:41.970
One of the fathers of sync services
likened this to negotiation of rock,

00:48:41.970 --> 00:48:43.640
paper, scissors.

00:48:43.850 --> 00:48:48.960
Slow beats fast, refresh beats slow,
and pull the truth beats refresh.

00:48:49.100 --> 00:48:54.690
Until we pointed out to him that that
was only true if paper didn't beat rock.

00:48:56.850 --> 00:49:01.110
Okay, I still haven't gotten to what the
difference is between a slow and refresh,

00:49:01.160 --> 00:49:03.330
and I'll do that right now.

00:49:03.480 --> 00:49:09.220
So a slow sync is a facility or is an
aid that we give to the users of sync

00:49:09.220 --> 00:49:14.120
services where based on past syncs,
we generate,

00:49:14.240 --> 00:49:19.380
we figure out the differences to send
from your client to the sync server.

00:49:19.480 --> 00:49:22.650
So it's very possible, for example,
if you slow sync and you have no

00:49:22.650 --> 00:49:27.040
changes at all in your backing store,
that we will send absolutely

00:49:27.040 --> 00:49:29.230
no changes to the sync server.

00:49:29.390 --> 00:49:34.360
But to do that, we actually have to know
what you synced before.

00:49:37.350 --> 00:49:40.830
On the other hand,
a refresh sync is as if this is

00:49:40.830 --> 00:49:43.450
the first time you've synced.

00:49:44.540 --> 00:49:47.800
And all of the past information,
assuming you have synced before,

00:49:47.800 --> 00:49:49.990
is going to get discarded.

00:49:50.170 --> 00:49:54.360
Now, what is that past
information that we discard?

00:49:54.430 --> 00:49:57.070
Your local identifiers.

00:49:58.160 --> 00:50:04.400
It's probably once a month or
maybe a little bit less frequently,

00:50:04.740 --> 00:50:08.710
I'm asked the question,
"Why can't you remember my

00:50:08.710 --> 00:50:13.260
local identifiers if I'm
refresh syncing?" And the

00:50:13.440 --> 00:50:16.040
The main reason for that is that,
and I'm going to get

00:50:16.040 --> 00:50:19.230
into identity in a bit,
is that the local identifier

00:50:19.230 --> 00:50:23.400
is how your client specifies
a record to sync services.

00:50:23.480 --> 00:50:27.200
A refresh is a brand new sync,
so we don't know anything

00:50:27.200 --> 00:50:28.880
about your records.

00:50:29.280 --> 00:50:33.590
We also will discard on a refresh sync
all of the previous record values and

00:50:33.590 --> 00:50:36.130
record specific client information.

00:50:36.130 --> 00:50:40.670
There's a fairly handy method on iSync
Session which allows you to associate

00:50:41.180 --> 00:50:47.370
an arbitrary bit of information
with a specific record that your

00:50:47.530 --> 00:50:51.980
client can use as it deems necessary.

00:50:53.650 --> 00:50:57.690
So what are some of the
consequences of refresh syncing?

00:50:57.810 --> 00:51:00.660
Well, the biggest

00:51:02.530 --> 00:51:07.280
The consequence is that if you've
been syncing and you now refresh sync,

00:51:07.550 --> 00:51:12.500
and since and between the time of your
last sync and your next refresh sync,

00:51:12.540 --> 00:51:17.980
some other clients deleted some records,
those deletes are going to get lost.

00:51:19.920 --> 00:51:23.840
In certain situations,
records may duplicate.

00:51:23.840 --> 00:51:27.190
The duplication can happen
for a couple of reasons.

00:51:27.310 --> 00:51:31.480
One reason is that once
you've actually synced,

00:51:31.480 --> 00:51:35.990
you're free to change the
identity keys of a record.

00:51:36.200 --> 00:51:41.240
But once you change identity keys and
you start again and you refresh sync,

00:51:41.290 --> 00:51:46.190
those records are no longer
going to identity match.

00:51:46.380 --> 00:51:50.300
Finally, it's a little bit more
CPU and I/O intensive.

00:51:52.910 --> 00:51:58.780
Negotiating the sync session
correctly as far as pulling the truth.

00:51:59.140 --> 00:52:02.490
Basically,
the only thing I want to say here

00:52:02.490 --> 00:52:07.400
is that you really don't want to
delete your backing store until,

00:52:07.470 --> 00:52:10.610
at a minimum,
prepare to pull changes returns yes,

00:52:10.840 --> 00:52:14.180
but you probably don't want to
delete it until you've actually

00:52:14.230 --> 00:52:19.280
pulled all the changes and
written out your backing store.

00:52:19.350 --> 00:52:21.300
Okay, identity.

00:52:24.500 --> 00:52:29.670
Identity Keys are only used
when a record is first pushed

00:52:29.790 --> 00:52:31.720
by a client to sync services.

00:52:31.830 --> 00:52:36.300
After that,
we don't care what the Identity Keys are.

00:52:36.810 --> 00:52:44.190
It's used by the Mingler to match
records that are pushed anew.

00:52:44.310 --> 00:52:50.100
And it matches those records against
records pushed by other clients.

00:52:50.110 --> 00:52:54.260
And other is emphasized here
because it's perfectly legal.

00:52:54.260 --> 00:52:58.010
In fact, it's a feature that a client
can duplicate records.

00:52:58.140 --> 00:53:04.310
Sometimes developers are kind of
surprised by the fact that we,

00:53:04.420 --> 00:53:09.210
in fact, allow them to duplicate records.

00:53:11.710 --> 00:53:14.790
So, how does identity matching work?

00:53:14.870 --> 00:53:18.380
We require all of the identity
properties to be equal,

00:53:18.530 --> 00:53:21.040
including the null values.

00:53:21.150 --> 00:53:26.310
So, for example,
Sara Bellum from Synaptic Insights

00:53:26.480 --> 00:53:34.630
and Sara Bellum with no company name
on Leopard would not identity match.

00:53:37.880 --> 00:53:42.240
Now with compound identity
properties on Snow Leopard,

00:53:42.240 --> 00:53:48.470
these two records will identity
match and there'll be a

00:53:48.470 --> 00:53:50.340
conflict on the company name.

00:53:56.740 --> 00:54:01.140
As I said,
once a record is identity matched,

00:54:01.170 --> 00:54:05.040
or it's pushed or it's pulled
and a client accepts that record,

00:54:05.130 --> 00:54:09.390
it is from that point on,
that record is identified to sync

00:54:09.390 --> 00:54:13.460
services by the local identifier
that the client specifies.

00:54:17.290 --> 00:54:20.100
It's used both in fast
syncing or slow syncing.

00:54:20.450 --> 00:54:26.060
And I realize in this presentation
I didn't talk at all about fast syncing.

00:54:26.470 --> 00:54:29.780
In many ways, fast syncing is,
from the point of view of sync services,

00:54:29.860 --> 00:54:31.200
is just like slow syncing.

00:54:31.200 --> 00:54:38.200
Slow syncing requires the
client to push all records,

00:54:38.200 --> 00:54:42.060
but internally we're generating
all of the deltas that we then

00:54:42.060 --> 00:54:45.100
feed off to the actual sync server.

00:54:45.190 --> 00:54:50.860
Fast syncing gives the client an
ability to optimize this process,

00:54:50.870 --> 00:54:53.140
and we actually do that in two ways.

00:54:53.200 --> 00:54:58.120
One is, is there's API where a client
can push in the full record,

00:54:58.300 --> 00:55:04.110
and then sync services will generate the
deltas of that record that are passed.

00:55:04.480 --> 00:55:09.820
We also give another
capability to the client,

00:55:09.890 --> 00:55:13.360
and that is they can actually
generate the deltas themselves and

00:55:13.360 --> 00:55:16.050
pass those on to the sync server.

00:55:16.170 --> 00:55:20.070
And that's the most optimized
form of fast syncing.

00:55:22.470 --> 00:55:26.300
The Local Identifier is any
string your client wants it to be.

00:55:26.300 --> 00:55:34.300
There's a couple of unspoken
invariants about Local Identifiers.

00:55:34.300 --> 00:55:39.300
They have to always be
associated with the same record.

00:55:39.820 --> 00:55:43.300
And you can't reuse them.

00:55:43.300 --> 00:55:47.370
Once you've associated with a record,
it has to be consistently

00:55:47.370 --> 00:55:50.300
associated with that record.

00:55:50.300 --> 00:55:56.840
Unless you're refresh syncing
or that record has been deleted.

00:55:57.300 --> 00:56:03.300
If you don't do this and somehow get
confused about what the Local ID is,

00:56:03.300 --> 00:56:08.300
there's a bunch of different runtime
errors that you can run into.

00:56:08.300 --> 00:56:10.340
You might ask, "Well,
how can you ever get into

00:56:10.340 --> 00:56:15.060
this situation?" Well,
there are clients, for example,

00:56:15.060 --> 00:56:22.300
that have used the row ID out of a
database to be their Local Identifier.

00:56:22.400 --> 00:56:25.390
And if that database
ever got repopulated,

00:56:25.390 --> 00:56:28.380
the row ID would change,
but they were still continuing to

00:56:28.380 --> 00:56:33.290
use that row ID as a Local ID in,
say, a slow sync.

00:56:33.410 --> 00:56:37.040
This causes problems.

00:56:40.910 --> 00:56:44.870
Internally,
we generate a global ID that is

00:56:44.870 --> 00:56:50.710
associated with the local ID of
every client that syncs that record.

00:56:53.410 --> 00:56:57.900
Sometimes clients really want to
get a handle on that global ID,

00:56:57.900 --> 00:57:02.870
and in particular clients
that filter do this.

00:57:05.390 --> 00:57:09.710
We recommend that if you're in such
a situation and you need the global

00:57:09.710 --> 00:57:14.420
ID of a record that you can get,
for example, via the snapshot,

00:57:14.420 --> 00:57:18.560
that you look into using
the record reference,

00:57:18.630 --> 00:57:22.570
iSync record reference
object that we provide.

00:57:26.330 --> 00:57:33.080
Okay, this is one of the more common
errors that are encountered.

00:57:33.080 --> 00:57:38.190
And I want to talk a little bit
about how that error happens.

00:57:38.420 --> 00:57:40.200
Sometimes it's our fault.

00:57:40.200 --> 00:57:44.930
And we've had this because
of filtering issues,

00:57:44.930 --> 00:57:47.200
as I've said before.

00:57:47.200 --> 00:57:53.170
We've had this because of the way
that we sometimes refresh sync.

00:57:53.200 --> 00:57:58.170
The entire API of Sync
Services is entity-based.

00:57:58.240 --> 00:58:02.400
One of the things that's unique about
Sync Services is that we actually sync

00:58:02.400 --> 00:58:05.130
relationships between other entities.

00:58:05.200 --> 00:58:10.120
It's that relationship and the -- it's
those relationships that are important.

00:58:10.200 --> 00:58:13.540
And it's those relationships in the
context of refresh sync that sometimes

00:58:13.690 --> 00:58:15.200
cause those kinds of problems.

00:58:15.590 --> 00:58:19.120
However, that's not the most
common reason for this.

00:58:20.060 --> 00:58:22.490
I want to walk through
a very typical example,

00:58:22.490 --> 00:58:26.240
and it has to do with the
ordering that a record is pulled.

00:58:26.360 --> 00:58:28.300
So imagine you have a client.

00:58:28.480 --> 00:58:30.800
There's a record X,
it has a relationship R,

00:58:30.800 --> 00:58:37.760
and it pulls a value for that
relationship R with those funny-looking

00:58:37.760 --> 00:58:42.860
wids that are the generated local
IDs that we hand back to a client.

00:58:42.990 --> 00:58:50.000
It pulls X, it saves that record out,
and then it pulls the

00:58:50.000 --> 00:58:52.930
reference to that relationship.

00:58:52.970 --> 00:58:58.780
And it decides to remap that local
ID to some other arbitrary string.

00:58:58.960 --> 00:59:02.620
In a future sync,
if that client pushes X with the

00:59:02.620 --> 00:59:08.400
relationship with those local IDs,
the original local IDs that were pulled,

00:59:08.470 --> 00:59:11.580
you'll run into the exact same problem.

00:59:11.700 --> 00:59:14.700
So how do you work around that?

00:59:15.080 --> 00:59:17.460
You can order how your
client pulls the changes.

00:59:17.680 --> 00:59:21.920
That's one possibility,
although sometimes that doesn't work.

00:59:22.300 --> 00:59:25.750
You can also keep an
unaccepted record map.

00:59:25.910 --> 00:59:28.430
But in particular,
you need to patch that back

00:59:28.430 --> 00:59:30.510
relationship one way or the other.

00:59:30.730 --> 00:59:37.210
One of the helpful methods that many
clients use here is the set client

00:59:37.210 --> 00:59:42.940
info for record with identifier method.

00:59:43.020 --> 00:59:45.890
Okay, miscellaneous tips.

00:59:48.770 --> 00:59:52.780
Type your properties and relationships.

00:59:52.780 --> 00:59:56.570
Use exclude from DCA and
ignore conflicts.

00:59:57.920 --> 01:00:04.800
And if you're syncing
to a back end which is,

01:00:04.910 --> 01:00:08.070
or records which are
back ended on a server,

01:00:08.270 --> 01:00:11.710
consider not syncing the record itself,
but information about

01:00:11.710 --> 01:00:13.120
how to access the server.

01:00:13.250 --> 01:00:16.850
For example,
CalDAV accounts or CalDAV calendars

01:00:16.850 --> 01:00:21.770
are synced with a CalDAV account
object so that other computers know

01:00:21.790 --> 01:00:24.230
how to access the back end server.

01:00:24.680 --> 01:00:31.360
An example where we don't do
that is subscribed calendars.

01:00:34.010 --> 01:00:38.860
MobileMe sync performance issues.

01:00:39.040 --> 01:00:43.180
We've had certain clients or
experienced certain cases where

01:00:43.870 --> 01:00:48.610
sometimes a sync client wants to
basically sync a big object graph.

01:00:48.710 --> 01:00:52.060
They can do that by archiving
it out to a data object.

01:00:52.180 --> 01:00:56.800
And this data object or this object
graph maybe is pretty volatile.

01:00:56.920 --> 01:00:57.930
And maybe it's large.

01:00:58.070 --> 01:00:59.650
Maybe it's a megabyte or more.

01:00:59.660 --> 01:01:06.340
If this object graph is volatile,
and let's say only a byte or two changes

01:01:06.340 --> 01:01:11.300
every time that object is updated
and it gets synced every time with a

01:01:11.300 --> 01:01:18.750
megabyte object graph into sync services,
that means that .Mac is going to

01:01:18.750 --> 01:01:22.720
get loaded with a lot of changes
that are each a megabyte long.

01:01:22.720 --> 01:01:27.720
You may want to consider restructuring
your schema to optimize that.

01:01:27.750 --> 01:01:33.430
You should also write a sync client and,
if at all possible,

01:01:33.570 --> 01:01:36.740
fast sync as opposed to slow sync.

01:01:36.740 --> 01:01:39.270
And even better is to trickle sync.

01:01:39.340 --> 01:01:43.510
The difference between fast syncing
and trickle syncing really has to

01:01:43.690 --> 01:01:48.670
do with fast syncing specifies how
you're syncing with sync services.

01:01:48.980 --> 01:01:53.830
Trickle syncing has to do with that
you actually sync your changes as

01:01:53.830 --> 01:01:56.490
they occur in your application.

01:01:59.250 --> 01:02:03.340
I think it was mentioned by Andy,
in Snow Leopard we're going to be,

01:02:03.340 --> 01:02:07.060
MobileMe client is going
to start trickle syncing.

01:02:07.170 --> 01:02:12.760
So this will actually help propagate
your data if your client trickle syncs

01:02:12.880 --> 01:02:16.230
to other machines when the data changes.

01:02:16.420 --> 01:02:20.090
In Leopard we added a performance
boost that you could add to

01:02:20.090 --> 01:02:24.640
your client description P-list,
which had to do with whether or not

01:02:24.640 --> 01:02:27.360
your client formats relationships.

01:02:27.460 --> 01:02:31.920
If you don't know what I mean when I say
if your client formats relationships,

01:02:32.060 --> 01:02:35.670
well in Snow Leopard it doesn't
matter because we're going to assume

01:02:35.670 --> 01:02:37.630
your client doesn't format them.

01:02:37.840 --> 01:02:41.290
In Leopard we added a keyword
which could indicate that you

01:02:41.290 --> 01:02:43.720
didn't format your relationships.

01:02:43.720 --> 01:02:50.030
And just to be clear,
to support many kind of older phones,

01:02:50.180 --> 01:02:55.950
it's often the case that the values that
are pulled by a client are not the values

01:02:55.950 --> 01:02:58.120
that they actually are able to keep.

01:02:58.300 --> 01:03:02.910
So you might have a client that has
a relationship to phone numbers.

01:03:03.080 --> 01:03:06.410
It pulls 10 phone numbers,
but the device can only store three.

01:03:06.530 --> 01:03:10.750
So we give you the ability to
indicate which three of those

01:03:10.830 --> 01:03:15.800
10 you've actually saved away.

01:03:17.180 --> 01:03:20.000
And again,
this is just added to your P-list

01:03:20.080 --> 01:03:21.910
of your client description.

01:03:22.180 --> 01:03:23.590
We're trying to improve logging.

01:03:23.670 --> 01:03:29.030
For those of you who've been
sync services developers,

01:03:29.110 --> 01:03:32.510
we log a lot of information
when you turn it on.

01:03:32.660 --> 01:03:38.160
We also used to log personal information,
which we now don't as of 10.5.3,

01:03:38.160 --> 01:03:42.200
but sometimes you actually want to see
that the actual data that's being synced,

01:03:42.240 --> 01:03:47.300
and there's now a default that
you can use to turn that back on.

01:03:52.200 --> 01:03:56.270
The Sync Respecter is a developer
tool that all developers

01:03:56.270 --> 01:03:58.780
of sync clients should use.

01:03:58.780 --> 01:04:04.700
At a minimum, you should use it to put
your client through the ropes

01:04:04.700 --> 01:04:07.200
and make it refresh sync,
make it pull the truth,

01:04:07.300 --> 01:04:10.360
make it push the truth,
and make sure that your client

01:04:10.370 --> 01:04:12.660
actually handles all those cases.

01:04:12.880 --> 01:04:15.250
It's a fully supported developer tool.

01:04:15.250 --> 01:04:17.100
Andy wanted me to put that in.

01:04:17.130 --> 01:04:20.320
I think that means that
if there are any bugs,

01:04:20.380 --> 01:04:21.700
I have to fix it.

01:04:21.720 --> 01:04:24.610
Syncing is also scriptable.

01:04:24.750 --> 01:04:28.700
You can script it in Perl,
you can script it in Ruby,

01:04:28.980 --> 01:04:32.660
you can script it in
other languages as well.

01:04:32.750 --> 01:04:36.700
I think I already mentioned SyncRespector
allows you to test it in different modes,

01:04:36.700 --> 01:04:37.700
you can test with other clients.

01:04:37.700 --> 01:04:42.530
It also provides a user interface
for you to set debugging defaults,

01:04:42.790 --> 01:04:45.640
go into the truth,
see what your records are there.

01:04:45.760 --> 01:04:50.750
It's really a pretty indispensable tool
when you're developing a sync client.

01:04:54.280 --> 01:04:57.330
So we have a pretty active dev list.

01:04:57.630 --> 01:05:03.530
We actually are fairly responsive
to questions that come onto it.

01:05:03.600 --> 01:05:06.400
So we encourage you,
if you're writing a sync client,

01:05:06.500 --> 01:05:08.000
to post questions.

01:05:08.000 --> 01:05:12.750
There's a number of developers
that actually answer the questions,

01:05:12.750 --> 01:05:16.720
so we don't have to,
which is always a good thing.

01:05:18.240 --> 01:05:26.390
I'm not going to read this poem,
but a sync intern of ours describes

01:05:26.390 --> 01:05:34.800
sync pretty nicely in this poem.

01:05:35.880 --> 01:05:35.890
There's one bit of it that I

01:05:36.150 --> 01:05:42.790
is rather funny, which is the last line,
which says, "To sync, perchance to dream,

01:05:42.930 --> 01:05:44.640
aye, there's the rub.

01:05:44.830 --> 01:05:48.240
For in that sync of mobile me,
what records may come."