WEBVTT

00:00:20.240 --> 00:00:22.950
Welcome to Understanding the
Xcode Project Management and

00:00:22.950 --> 00:00:24.680
Build System Session 919.

00:00:24.680 --> 00:00:27.090
If this is not the flight
you planned to take,

00:00:27.190 --> 00:00:28.620
we recommend you deplane now.

00:00:28.620 --> 00:00:29.780
I'm Chris Espinosa.

00:00:29.780 --> 00:00:32.740
I'm the manager of the Xcode
Core Technologies Group.

00:00:34.120 --> 00:00:35.990
We have a fairly short
agenda for you today,

00:00:36.000 --> 00:00:38.150
long on content, short on bullet items.

00:00:38.160 --> 00:00:42.450
I'm going to start with a brief
review of the Xcode build process

00:00:42.450 --> 00:00:45.220
and the Xcode project architecture.

00:00:45.220 --> 00:00:48.420
Those of you who are old hands
at Xcode or have been using Xcode

00:00:48.420 --> 00:00:52.580
3.1 for a while may wish to just,
you know, twitter your disrespect for

00:00:52.580 --> 00:00:56.250
a little while and sit it out
until the interesting part comes.

00:00:56.260 --> 00:01:00.550
Those of you who are new to Xcode,
this is a really important part of the

00:01:00.550 --> 00:01:03.280
presentation because it'll get us all.

00:01:04.510 --> 00:01:05.750
We'll get you all on some
common terminological grounds.

00:01:05.770 --> 00:01:09.200
People coming from different traditions
and different environments may mean

00:01:09.200 --> 00:01:13.370
completely different things when
I say target or project or build

00:01:13.730 --> 00:01:15.480
setting or environment variable.

00:01:15.480 --> 00:01:17.720
I'm going to try to get us
on some common ground so when

00:01:17.810 --> 00:01:20.970
we get into the deep water,
you'll understand what I'm talking about.

00:01:21.000 --> 00:01:24.500
Second is we'll do some
what's new in Xcode 3.1.

00:01:24.520 --> 00:01:28.300
Those of you who have the Xcode 3.1 seed,
there are a lot of these that

00:01:28.300 --> 00:01:31.840
are covered in the release notes,
but there's nothing like seeing it

00:01:31.920 --> 00:01:33.480
done live on stage in front of you.

00:01:33.480 --> 00:01:36.670
To show you what the power of
the new features really is.

00:01:36.790 --> 00:01:39.450
And then we'll go into
some advanced techniques.

00:01:39.530 --> 00:01:43.030
The main technique I'm going to
be demonstrating and describing

00:01:43.090 --> 00:01:46.050
in some detail is how to use
cross project references,

00:01:46.210 --> 00:01:49.090
how to cause one project to
invoke a build in another project

00:01:49.300 --> 00:01:53.000
and to use its build products
in order to create a larger one.

00:01:53.000 --> 00:01:55.180
How to chain multiple projects together.

00:01:55.280 --> 00:01:58.850
We'll give a couple of demos and then
we'll start to take questions and

00:01:58.850 --> 00:02:00.780
have a lot of time for questions.

00:02:00.940 --> 00:02:02.400
Okay.

00:02:02.950 --> 00:02:05.560
Let's start with the brief review.

00:02:05.560 --> 00:02:09.100
When I say project,
I mean the Xcode project,

00:02:09.250 --> 00:02:14.540
the .Xcode file that you double-click
to open an Xcode project.

00:02:14.550 --> 00:02:21.560
Inside the project are two things,
targets and content.

00:02:21.560 --> 00:02:26.480
And the targets are an organizing
principle for the rest of the content.

00:02:26.480 --> 00:02:28.930
When you build,
you don't build a project.

00:02:29.020 --> 00:02:30.170
You build a target.

00:02:30.170 --> 00:02:32.300
That's an important distinction.

00:02:32.300 --> 00:02:34.950
People say, I want this project to
build this other project.

00:02:35.070 --> 00:02:35.680
And I say, wait.

00:02:35.840 --> 00:02:39.080
If you're saying that,
you don't have it straight in your head.

00:02:39.110 --> 00:02:41.230
A target is what is built.

00:02:41.300 --> 00:02:44.120
A project is simply a
container that holds targets.

00:02:44.920 --> 00:02:50.970
The target is a collection of inputs,
source files, resource files,

00:02:50.970 --> 00:02:57.250
and instructions on how to build those
inputs to produce a build product.

00:02:57.430 --> 00:02:59.600
I'm going to use that term a lot,
build product.

00:02:59.760 --> 00:03:00.660
That's what it's all about.

00:03:00.710 --> 00:03:04.280
Every target builds a build product.

00:03:04.280 --> 00:03:06.980
And it builds it from source files.

00:03:06.980 --> 00:03:08.960
It builds it using rules.

00:03:08.960 --> 00:03:11.790
It builds it using build settings.

00:03:12.110 --> 00:03:19.110
The content is organized in a
target in a set of build phases,

00:03:19.110 --> 00:03:22.950
and each build phase handles
a particular type of input.

00:03:22.950 --> 00:03:26.600
There's a compile sources build phase
that builds all your source files.

00:03:26.600 --> 00:03:31.120
There's a copy bundle resources
build phase that copies all of

00:03:31.180 --> 00:03:36.320
the resources in your target into
the bundle in the build product.

00:03:36.340 --> 00:03:42.090
You can create your own build phases
to run an arbitrary script in the

00:03:42.110 --> 00:03:48.920
shell or to perform an explicit copy of
other things to other places actions.

00:03:48.920 --> 00:03:53.790
The build phases are done in a
stepwise order depending on both

00:03:53.880 --> 00:03:59.220
the order you place them in and
their dependency requirements.

00:03:59.860 --> 00:04:02.620
Things may be done in different
order depending upon what

00:04:02.720 --> 00:04:04.440
depends on what other things.

00:04:05.220 --> 00:04:08.760
Each target has its own
set of build phases,

00:04:09.030 --> 00:04:13.760
and the contents of one,
the build product of one

00:04:13.760 --> 00:04:18.490
target can be included in a
build phase of another target.

00:04:18.740 --> 00:04:23.410
That's the key to using
multiple projects in Xcode.

00:04:24.800 --> 00:04:29.890
Like I said, targets have sources,
inputs, they have rules,

00:04:29.910 --> 00:04:35.030
and then they have settings,
build settings that tell the compiler,

00:04:35.030 --> 00:04:41.020
the linker, the resource compiler,
how to do what it's going to do.

00:04:41.040 --> 00:04:44.580
And those build settings are really
what you spend most of the time

00:04:44.580 --> 00:04:48.990
adjusting when you're configuring your
Xcode project and your Xcode targets.

00:04:49.080 --> 00:04:51.840
Each target has its own
set of build settings,

00:04:51.840 --> 00:04:54.550
and that applies to building that target.

00:04:54.700 --> 00:04:58.530
At the top level,
the project also has a set of

00:04:58.530 --> 00:05:04.360
build settings that applies
generally across all of the targets.

00:05:04.460 --> 00:05:08.360
And it's a hierarchy,
just like object-oriented programming.

00:05:08.360 --> 00:05:13.580
The project build settings are superior,
but the target build settings can

00:05:13.840 --> 00:05:16.430
override the project build settings.

00:05:16.500 --> 00:05:19.460
So if you've got something
that you want to apply across

00:05:19.760 --> 00:05:22.690
everything you're going to build,
like I want this to

00:05:22.690 --> 00:05:28.370
build 32-bit or 64-bit,
I want this to build debug or not debug,

00:05:28.540 --> 00:05:32.170
I want this to build my English language
version versus some other version,

00:05:32.220 --> 00:05:36.550
you put that at your project
level and all targets inherit it.

00:05:36.700 --> 00:05:41.090
If you have something that you want
to differ from target to target,

00:05:41.100 --> 00:05:44.680
this target is building a static
library so it has this set of settings,

00:05:44.780 --> 00:05:47.500
this target is building an application,
it has different settings,

00:05:47.600 --> 00:05:50.540
this target is building a shared library,
it has different settings.

00:05:50.540 --> 00:05:53.600
The specialization goes
at the target level.

00:05:53.740 --> 00:05:54.680
Project build settings are superior,
but the target build

00:05:54.680 --> 00:05:54.680
settings are inferior,
and the target build

00:05:54.680 --> 00:05:54.680
settings are inferior.

00:05:54.760 --> 00:05:57.840
Project level general,
target level specialization.

00:05:57.990 --> 00:06:03.580
The number one user error with Xcode is,
"I set this build setting

00:06:03.580 --> 00:06:05.430
and it didn't take effect."

00:06:05.590 --> 00:06:08.720
And that's because, well,
you set it at the project level

00:06:08.720 --> 00:06:12.000
and you already had an override
set at the target level.

00:06:12.100 --> 00:06:15.190
So if you set a build setting
and it's not taking effect,

00:06:15.340 --> 00:06:19.510
go to your target level and make sure
that it's set at the target level.

00:06:19.510 --> 00:06:21.920
If not,
either set it explicitly at the target

00:06:22.010 --> 00:06:25.650
level or take that build setting and
delete it from the target to let the

00:06:25.650 --> 00:06:27.920
project level setting shine through.

00:06:27.920 --> 00:06:29.180
Number one rule.

00:06:33.180 --> 00:06:38.060
Now, this is a common mistake as well.

00:06:38.060 --> 00:06:45.770
People use these terms loosely, project,
target, executable, and build product.

00:06:45.770 --> 00:06:50.700
There's often a one-to-one-to-one-to-one
correspondence between these.

00:06:50.710 --> 00:06:54.300
In fact, when you create a project
from the templates,

00:06:54.300 --> 00:06:57.790
the stationery we provide,
you get a project,

00:06:58.070 --> 00:07:00.700
and in that project is one target.

00:07:00.810 --> 00:07:03.700
And that one target
creates one build product,

00:07:03.700 --> 00:07:08.490
and that one build product corresponds
to an executable that can launch and

00:07:08.490 --> 00:07:09.990
run and debug that build product.

00:07:10.000 --> 00:07:13.310
And they all have the same name,
so people think they're

00:07:13.310 --> 00:07:14.690
all the same thing.

00:07:14.920 --> 00:07:15.630
But they're not.

00:07:15.670 --> 00:07:17.460
They're four separate things.

00:07:17.580 --> 00:07:23.490
The project, the target,
the build product that the target builds,

00:07:23.490 --> 00:07:28.360
and the executable that launches and
debugs that are four separate things,

00:07:28.400 --> 00:07:32.820
and you adjust them differently
according to what you want to do.

00:07:34.200 --> 00:07:37.270
And I think to start with,
we'll bring up Michael Rodden,

00:07:37.270 --> 00:07:42.240
and we'll show you the basics of
going through building a simple

00:07:42.280 --> 00:07:47.320
Xcode project to show you what the
build is like and what the parts are.

00:07:47.530 --> 00:07:52.970
So Michael's going to go
to the Open Recents menu.

00:07:55.000 --> 00:08:04.170
This is the code that builds the text
edit application that's standard on

00:08:04.270 --> 00:08:07.190
every Macintosh Mac OS X machine.

00:08:07.450 --> 00:08:12.030
So first we're going to disclose the
project folder and take a look at

00:08:12.100 --> 00:08:14.500
what's inside the project folder.

00:08:14.500 --> 00:08:16.990
Michael,
if you could move it a little bit,

00:08:17.090 --> 00:08:21.840
the window a little bit to the right
because it's being clipped on the screen.

00:08:21.930 --> 00:08:22.900
There we go.

00:08:22.920 --> 00:08:27.970
So you see inside the project,
the top level project object are

00:08:27.970 --> 00:08:32.660
all of the files within the project.

00:08:32.980 --> 00:08:39.000
And if you collapse that -- actually,
if you scroll down, down at the bottom,

00:08:39.030 --> 00:08:41.300
there is a folder called products.

00:08:41.310 --> 00:08:42.790
You open that up.

00:08:43.110 --> 00:08:46.500
And that is a proxy,
a representative of what our final

00:08:46.500 --> 00:08:48.390
build product is going to be.

00:08:48.550 --> 00:08:49.490
Textedit.app.

00:08:49.620 --> 00:08:51.830
That's what we intend to build.

00:08:51.960 --> 00:08:54.190
Now I want to show you how
we're going to build that.

00:08:54.310 --> 00:08:57.800
The way we build it is that in
this project there is a target.

00:08:57.850 --> 00:09:00.840
One target called Textedit.

00:09:00.970 --> 00:09:05.660
Textedit is represented with, you know,
a kind of A with a green check mark.

00:09:05.790 --> 00:09:08.280
The green check mark means
it's the active target.

00:09:08.300 --> 00:09:12.770
It's what's going to be built
when I click the build button.

00:09:12.930 --> 00:09:15.190
If you disclose that
target and open it up,

00:09:15.290 --> 00:09:16.990
you see it's build phases.

00:09:17.040 --> 00:09:18.500
It compiles sources.

00:09:18.500 --> 00:09:20.100
It copies bundle resources.

00:09:20.100 --> 00:09:21.880
It links the binaries with the libraries.

00:09:21.900 --> 00:09:24.030
And it even runs a
little script at the end.

00:09:24.110 --> 00:09:27.400
Each one of those is a
step with certain inputs.

00:09:27.400 --> 00:09:32.600
You can see the inputs by disclosing,
for example, the compile sources.

00:09:32.600 --> 00:09:34.600
It says it compiles 12 sources.

00:09:34.600 --> 00:09:37.130
Those are the 12 source
files it compiles.

00:09:37.220 --> 00:09:37.900
Okay?

00:09:37.900 --> 00:09:42.200
So this is the structure of a
project in the build system.

00:09:42.200 --> 00:09:46.370
Now to adjust the build
settings in an Xcode project,

00:09:46.500 --> 00:09:48.700
you double click the target.

00:09:48.700 --> 00:09:51.500
And this is the table of
build settings for that.

00:09:51.530 --> 00:09:52.500
It's a rather long table.

00:09:52.500 --> 00:09:54.990
If you scroll it down,
you'll see that there are several

00:09:54.990 --> 00:09:59.970
hundred options that you can set for all
kinds of things going on in that target.

00:10:00.110 --> 00:10:03.850
And that's why it's useful to have a
little filter bubble at the top where you

00:10:03.920 --> 00:10:09.870
type something and it'll narrow it down
to just the ones that you care about.

00:10:11.480 --> 00:10:14.330
One of the things that we're
going to talk about later is,

00:10:14.340 --> 00:10:16.270
for example, the deployment target.

00:10:16.370 --> 00:10:18.200
It's which version of
the operating system.

00:10:18.200 --> 00:10:22.630
So rather than search through it,
why don't you just type DEPL.

00:10:22.630 --> 00:10:25.450
Oh, that narrows it down a little bit.

00:10:27.680 --> 00:10:28.410
Deployment target.

00:10:28.470 --> 00:10:29.000
There we go.

00:10:29.030 --> 00:10:29.880
Compiler default.

00:10:29.880 --> 00:10:34.560
It's in bold because it's
defined at this level.

00:10:34.560 --> 00:10:37.140
And by compiler default,
that means it's going to be whatever

00:10:37.480 --> 00:10:39.150
it is for this operating system.

00:10:39.160 --> 00:10:42.030
We're running on 10.5 here,
so it means we're going

00:10:42.030 --> 00:10:43.510
to build for 10.5.

00:10:46.500 --> 00:10:56.600
[Transcript missing]

00:10:56.980 --> 00:11:00.140
When we build the target,
it creates the build product,

00:11:00.140 --> 00:11:02.870
and then it'll create,
and then if we want

00:11:02.960 --> 00:11:06.200
to launch or debug it,
we control that with this executable.

00:11:06.200 --> 00:11:09.850
You double-click that,
and you get a panel with some

00:11:09.850 --> 00:11:12.560
tabs for arguments and debugging.

00:11:12.560 --> 00:11:15.590
And you can see in arguments,
for example,

00:11:15.590 --> 00:11:19.990
if you want to add arguments to
be passed at the command line,

00:11:20.000 --> 00:11:24.840
if you have argc and argv in your main,
that's where you pass those.

00:11:25.280 --> 00:11:28.100
If you're looking at environment
variables and you want to set them,

00:11:28.110 --> 00:11:29.030
you set them there.

00:11:29.040 --> 00:11:35.950
So these are how you control how the
application is launched after it's built.

00:11:35.960 --> 00:11:40.100
But you can see that the project,
the target, the build product,

00:11:40.190 --> 00:11:43.960
and the executable that runs
it are four separate things.

00:11:43.960 --> 00:11:46.140
Okay,
now we're going to start building it.

00:11:46.210 --> 00:11:47.860
So you open up the build results window.

00:11:47.860 --> 00:11:49.050
Okay.

00:11:50.350 --> 00:11:53.460
from that menu which is way
up there in the ceiling.

00:11:53.470 --> 00:11:55.840
And this is the build results window,
and it's empty because, well,

00:11:55.840 --> 00:11:56.860
we haven't built anything.

00:11:56.860 --> 00:12:01.690
So first thing we're going
to do is just click build.

00:12:04.020 --> 00:12:09.000
And you can see that each
of our build steps... Oh,

00:12:09.000 --> 00:12:10.440
you didn't have that checked, okay.

00:12:10.470 --> 00:12:11.060
Want to clean it?

00:12:11.120 --> 00:12:12.200
Oh, there we go.

00:12:12.340 --> 00:12:15.710
You can see each of the build steps...

00:12:16.000 --> 00:12:18.340
Each build phase has
a collection of steps,

00:12:18.340 --> 00:12:19.950
and each step is listed there.

00:12:20.210 --> 00:12:23.590
And some of them have warnings.

00:12:23.770 --> 00:12:24.720
That's fine.

00:12:24.720 --> 00:12:27.670
It's not our code.

00:12:28.680 --> 00:12:34.500
Each one of those lines has behind
it a whole lot of what went on to

00:12:34.500 --> 00:12:39.240
apply for that input to that target,
the settings in that target's build

00:12:39.330 --> 00:12:41.790
settings inspector to that operation.

00:12:41.790 --> 00:12:43.380
And we're going to show you how to do it.

00:12:43.380 --> 00:12:45.420
Open up a text edit window.

00:12:45.610 --> 00:12:46.190
There we go.

00:12:46.210 --> 00:12:47.460
We happen to have one handy.

00:12:47.460 --> 00:12:50.920
And just drag and drop one of
those compiling lines into it.

00:12:56.100 --> 00:12:59.490
So that's the text where if you
were in a make file or if you were

00:12:59.560 --> 00:13:03.120
executing this from the command line,
this is the command that you'd issue to

00:13:03.120 --> 00:13:05.380
the GCC compiler to compile that line.

00:13:05.400 --> 00:13:09.500
It's a whole lot of stuff going on,
and it's mainly providing the

00:13:09.500 --> 00:13:13.440
header and library search paths,
the framework link paths,

00:13:13.590 --> 00:13:17.300
the build settings, the warnings,
the optimizations,

00:13:17.300 --> 00:13:20.280
all of the architectures,
all the controls you want.

00:13:20.960 --> 00:13:24.000
If you've got something
wrong with your build,

00:13:24.000 --> 00:13:28.230
if you don't know what's going on,
go look at this because all of the

00:13:28.230 --> 00:13:31.040
information literally is in this line.

00:13:31.060 --> 00:13:33.790
You may not be able to understand it,
but if you've got a build that's

00:13:33.880 --> 00:13:36.520
working and a build that's not working,
compare those two.

00:13:36.520 --> 00:13:38.940
The difference will be there,
I guarantee you.

00:13:38.940 --> 00:13:43.810
And if you're filing something
on Xcode users at list.apple.com

00:13:43.810 --> 00:13:47.690
or filing a bug reporter report,
this is what we need to

00:13:47.690 --> 00:13:49.690
tell you what's going on.

00:13:50.170 --> 00:13:51.490
Now, this is line by line.

00:13:51.500 --> 00:13:53.550
It could be very tedious
to copy everything out.

00:13:53.580 --> 00:13:58.400
So we have a build transcript
hidden under a little button,

00:13:58.470 --> 00:14:02.380
the third one in,
and it shows you the complete build

00:14:02.700 --> 00:14:05.620
transcript of the entire build.

00:14:05.640 --> 00:14:10.340
This can be several hundred
K to a megabyte of text.

00:14:12.370 --> 00:14:17.870
For every step, for every build phase,
in every target that you build,

00:14:18.010 --> 00:14:22.200
the complete and detailed
instructions of how it built are here.

00:14:22.340 --> 00:14:26.090
And if you do the
command line Xcode build,

00:14:26.100 --> 00:14:28.260
this is what you see
spewing out at the console.

00:14:28.260 --> 00:14:31.080
Except in Xcode 3.1,
we give you a nice summary of

00:14:31.080 --> 00:14:32.790
what the errors were at the end.

00:14:32.790 --> 00:14:33.960
That's a nice touch.

00:14:41.290 --> 00:14:49.160
If you look at one of the compile lines,
you can see, for example,

00:14:49.160 --> 00:14:52.010
the find it in there.

00:14:54.190 --> 00:14:56.150
Oh, we're using compiler
default so it wasn't set,

00:14:56.150 --> 00:14:56.560
right?

00:14:56.590 --> 00:14:57.500
Yeah.

00:14:57.500 --> 00:15:05.220
So when we showed you the build
setting for the deployment target,

00:15:05.230 --> 00:15:09.880
the value there is passed in,
if we had set it to something,

00:15:09.880 --> 00:15:13.160
it would be passed in a dash M Mac value.

00:15:14.800 --> 00:15:37.600
[Transcript missing]

00:15:46.240 --> 00:15:50.410
Okay, so we'll come back to the build
process after we talk a little bit

00:15:50.410 --> 00:15:54.470
about what's new in Xcode 3.1 because
I want to demonstrate those to you.

00:15:57.270 --> 00:15:59.950
There are six new things in
Xcode 3.1 I want to talk about.

00:16:00.040 --> 00:16:04.570
They are all about,
they're mainly around the addition of

00:16:04.570 --> 00:16:07.580
SDKs to support iPhone development.

00:16:07.590 --> 00:16:08.140
Okay?

00:16:08.140 --> 00:16:11.990
And everything that we're going
to talk about and show applies

00:16:12.050 --> 00:16:15.730
both to Mac OS X development
and to iPhone development.

00:16:16.410 --> 00:16:21.530
The important difference between
Xcode 3.1 and previous versions

00:16:21.600 --> 00:16:25.440
of Xcode is that the tool chain,
the compilers, the linkers,

00:16:25.520 --> 00:16:28.420
all of the things that are
actually used to build code,

00:16:28.420 --> 00:16:31.960
are moving into the SDKs
from the native system.

00:16:32.120 --> 00:16:36.360
The iPhone uses a different chip,
and so all of the tools to

00:16:36.440 --> 00:16:40.790
target the iPhone's chip are
actually in the iPhone's SDK,

00:16:41.050 --> 00:16:42.550
not in Xcode itself.

00:16:42.550 --> 00:16:46.280
We're making Xcode a
much more generalized,

00:16:46.460 --> 00:16:49.290
portable,
pluggable IDE so that if we come

00:16:49.370 --> 00:16:52.770
out with a new architecture,
with a new platform, with a new chip,

00:16:52.780 --> 00:16:55.960
and we have a whole new set of compilers,
that's just another

00:16:55.960 --> 00:16:57.500
SDK you drop into Xcode.

00:16:57.520 --> 00:16:59.780
And we'll show you how we do that.

00:17:01.200 --> 00:18:43.200
[Transcript missing]

00:18:43.380 --> 00:18:46.590
Those of you who've been with us
for a while know that the biggest

00:18:46.650 --> 00:18:50.970
change with Xcode 2.5 and Xcode 3.0

00:18:51.470 --> 00:18:56.170
was to make the developer
directory self-contained.

00:18:56.170 --> 00:19:02.260
Before Xcode 2.5, when you installed the
Xcode tools in your system,

00:19:02.260 --> 00:19:04.040
they went into the root
level of the system,

00:19:04.040 --> 00:19:05.810
and they were there,
and they were immutable,

00:19:05.820 --> 00:19:07.980
and they replaced everything
that went there before,

00:19:07.980 --> 00:19:10.970
and you couldn't use a previous
or a later version of Xcode.

00:19:11.950 --> 00:19:16.650
Starting with Xcode 2.5 on
Tiger and Xcode 3.0 on Leopard,

00:19:16.650 --> 00:19:21.020
we made the developer folders
completely self-contained and

00:19:21.730 --> 00:19:23.360
independent of each other.

00:19:23.360 --> 00:19:26.810
So you could have Xcode 2.5 and 3.0,
for example,

00:19:26.810 --> 00:19:31.490
side-by-side on the Leopard machine,
and we've even extended that to 3.1.

00:19:31.500 --> 00:19:36.570
So you can have on one machine 2.5, 3.0,
and 3.1 all together next to each other,

00:19:36.660 --> 00:19:39.320
and their tool chains and
their SDKs and their IDEs and

00:19:39.390 --> 00:19:41.500
everything else is self-contained.

00:19:41.520 --> 00:19:43.910
Everything is distinct
and self-contained,

00:19:43.940 --> 00:19:46.180
so you launch one Xcode,
you get its tools,

00:19:46.180 --> 00:19:48.990
you launch a different Xcode,
you use its tools.

00:19:52.350 --> 00:19:56.680
But we've gone a step
further with Xcode 3.1.

00:19:56.720 --> 00:20:01.260
With 3.0, the tools, the compilers,
and everything are right there in the

00:20:01.280 --> 00:20:04.530
top level of the Xcode developer folder.

00:20:04.580 --> 00:20:08.400
But in Xcode 3.1 and
moving on in the future,

00:20:08.440 --> 00:20:12.580
like I said,
we're moving the tools into the SDKs.

00:20:13.790 --> 00:20:16.790
So there are several SDKs
in each developer folder

00:20:17.250 --> 00:20:21.790
for 10.4 and 10.5 and 10.6,
and those nominally contain the headers

00:20:21.800 --> 00:20:28.480
and the libraries that you use to build
for that version of the operating system.

00:20:28.480 --> 00:20:28.480
But now,

00:20:29.640 --> 00:20:35.090
They also contain specific tools for
the platform that you're targeting.

00:20:35.180 --> 00:20:37.520
So, for example,
the iPhone SDK doesn't just have a

00:20:37.520 --> 00:20:39.720
library folder with its frameworks in it.

00:20:39.800 --> 00:20:45.130
It also has user bin and GCC in
its own GCC compiler that targets

00:20:45.130 --> 00:20:48.030
the chip that's in the iPhone.

00:20:48.740 --> 00:20:51.720
So, this is really important because
this means as we go further,

00:20:51.720 --> 00:20:56.120
you're going to be able to add more
tools and customize tool chains just by

00:20:56.120 --> 00:21:00.830
building them into an SDK and dropping
it into Xcode rather than waiting for us

00:21:00.830 --> 00:21:03.600
to do a turn of the Xcode architecture.

00:21:03.610 --> 00:21:06.960
That's going to be very important
for scalability in the future.

00:21:08.950 --> 00:21:13.150
SDKs and deployment targets are
a really favorite topic and one

00:21:13.250 --> 00:21:16.700
that's easily confused in Xcode.

00:21:17.410 --> 00:21:21.020
There are a lot of SDKs now
and a lot of different target

00:21:21.020 --> 00:21:24.100
platforms that you can develop for.

00:21:24.100 --> 00:21:30.380
And what you want to do when you set
up a target in your Xcode project

00:21:31.040 --> 00:21:32.910
is you want to decide two things.

00:21:32.910 --> 00:21:39.440
First, what's the earliest version
of the OS I want to run on?

00:21:39.720 --> 00:21:44.640
We recommend that you
periodically leave 10.1,

00:21:44.640 --> 00:21:49.120
10.2, and 10.3 users behind.

00:21:49.120 --> 00:21:55.770
If you're building for Snow Leopard,
consider supporting Leopard

00:21:55.770 --> 00:21:57.600
and perhaps even Tiger users.

00:21:57.600 --> 00:22:01.040
That is called your deployment target.

00:22:01.140 --> 00:22:03.600
You set that in a pop-up in
your build setting inspector.

00:22:03.600 --> 00:22:07.300
You say,
"If my deployment target is 10.4,

00:22:07.330 --> 00:22:12.400
my code will work on all 10.4
machines and later." But you have a

00:22:12.400 --> 00:22:16.650
second decision to make because you
don't want to bind yourself to only

00:22:16.790 --> 00:22:19.600
the features available in 10.4.

00:22:19.600 --> 00:22:22.600
Especially if you're
running on 10.5 and 10.6,

00:22:22.600 --> 00:22:26.250
you may want to say, "Well, yeah,
I will support

00:22:26.470 --> 00:22:33.200
"I want to take advantage of these new
APIs that are available in Leopard."

00:22:33.200 --> 00:22:37.210
Then you build against the Leopard SDK.

00:22:37.730 --> 00:22:43.120
If you pick an SDK,
the deployment target by

00:22:43.120 --> 00:22:47.640
default is that SDK's version.

00:22:47.640 --> 00:22:50.300
If you build against
the 10.4 SDK by default,

00:22:50.300 --> 00:22:52.140
you're deploying for 10.4.

00:22:52.140 --> 00:22:55.020
If you build against
the 10.5 SDK by default,

00:22:55.090 --> 00:22:57.140
you're deploying to 10.5.

00:22:57.140 --> 00:22:59.910
And of course,
an application built for a specific

00:22:59.920 --> 00:23:03.540
version of the operating system is
going to continue to run on later

00:23:03.540 --> 00:23:07.670
versions of the operating system,
so far as the operating system supports

00:23:07.670 --> 00:23:11.540
the chipset and the language and
everything that that was written for.

00:23:11.540 --> 00:23:17.170
But it won't take advantage
of the new features.

00:23:17.200 --> 00:23:21.170
In order to take advantage of
the new features of an SDK,

00:23:21.170 --> 00:23:25.050
you have to build against
the SDK for that platform.

00:23:25.060 --> 00:23:26.670
And then what happens?

00:23:26.880 --> 00:23:33.280
Well, if I build against the 10.5 SDK to
take advantage of 10.5 features,

00:23:33.310 --> 00:23:35.860
what do I do about the 10.4 users?

00:23:35.860 --> 00:23:44.570
Well, what happens is that all of the
APIs that are not available in 10.4

00:23:45.060 --> 00:23:47.970
When your program loads,
they're replaced with

00:23:48.410 --> 00:23:49.940
null function pointers.

00:23:49.940 --> 00:23:54.550
And your job at runtime is to determine
whether or not the function you want

00:23:54.550 --> 00:23:58.470
to call is available and skip around
it if it's a null function pointer

00:23:58.490 --> 00:24:00.700
or not available and use it if it is.

00:24:00.700 --> 00:24:04.530
That's the way to write an
application that launches on 10.4

00:24:04.530 --> 00:24:09.300
and shows 10.4 functionality,
but also launches on 10.5 and takes

00:24:09.300 --> 00:24:11.860
advantage of new 10.5 features.

00:24:11.860 --> 00:24:12.360
Okay?

00:24:14.660 --> 00:24:17.800
This is going to be true of
the iPhone platforms as well.

00:24:17.800 --> 00:24:21.410
The deployment target setting,
which used to be called

00:24:21.470 --> 00:24:24.210
Mac OS X Deployment Target,
but has been cleverly

00:24:24.210 --> 00:24:27.710
renamed Deployment Target,
now controls either

00:24:28.090 --> 00:24:31.520
Mac OS X or iPhone deployment.

00:24:31.520 --> 00:24:34.100
We just swizzle it to the right
value to pass to whichever

00:24:34.180 --> 00:24:36.070
compiler we happen to be invoking.

00:24:36.070 --> 00:24:42.340
So if you build with a deployment
target for iPhone 2.0 against either

00:24:42.370 --> 00:24:48.820
the iPhone 2.0 or Simulator 2.0 SDK,
you will run on 2.0 and

00:24:48.820 --> 00:24:50.950
whatever later versions.

00:24:50.960 --> 00:24:54.550
Since we don't really have backwards
compatibility to the 1.0 because we

00:24:54.600 --> 00:24:59.620
don't have a development model for 1.0,
we don't have iPhone deployment

00:24:59.700 --> 00:25:01.490
versions earlier than that.

00:25:01.500 --> 00:25:05.870
So we don't have a deployment model
for 1.0 or Simulator 2.0 right now.

00:25:05.870 --> 00:25:08.040
But the same mechanism will take effect.

00:25:08.040 --> 00:25:10.380
As we add more iPhone SDKs,
you'll use that in the

00:25:10.590 --> 00:25:14.050
same way you're using the
Mac OS X Deployment Target and SDKs.

00:25:14.430 --> 00:25:17.810
Now, if you've got multiple SDKs,
or if you've got an application

00:25:17.890 --> 00:25:21.820
that you're building against
the 10.4u or 10.5 SDK,

00:25:21.850 --> 00:25:26.320
and you want to see what it's
like on 10.6 Snow Leopard,

00:25:26.320 --> 00:25:29.920
or if you've got a core piece of
functionality that you're building

00:25:29.930 --> 00:25:33.860
for Mac OS and you want to say,
see, you know, it's just links against,

00:25:33.900 --> 00:25:36.340
you know,
foundation and core foundation and

00:25:36.340 --> 00:25:38.470
maybe a couple of other frameworks.

00:25:38.530 --> 00:25:40.400
Can this build for the iPhone?

00:25:42.000 --> 00:25:45.570
Used to be that you'd have to
go into your target settings

00:25:45.700 --> 00:25:49.980
and change the base SDK and save
that and run it and rebuild it.

00:25:49.980 --> 00:25:52.700
And if you have multiple targets,
you'd have to do that for every target.

00:25:52.700 --> 00:25:56.180
And then you don't want to commit that
to your repository because you don't

00:25:56.180 --> 00:25:58.200
want all of your coworkers to get that.

00:25:58.750 --> 00:26:04.580
Right now we have an active
SDK pop-up in the toolbar.

00:26:04.580 --> 00:26:08.520
You can add it to your toolbar or
it's part of the overview toolbar that

00:26:08.760 --> 00:26:10.820
you can add to your default toolbar.

00:26:10.820 --> 00:26:15.860
And what this does is this
sets a temporal override.

00:26:15.860 --> 00:26:17.840
This is important.

00:26:17.890 --> 00:26:21.480
It's a temporal override to the SDK.

00:26:21.510 --> 00:26:24.740
It does not change your project.

00:26:24.860 --> 00:26:27.440
Your project settings
will still be unchanged.

00:26:27.440 --> 00:26:31.000
If you close your project,
if you commit it to the repository,

00:26:31.000 --> 00:26:32.530
that won't be changed.

00:26:32.590 --> 00:26:37.520
It's only a user interface feature
that lies to the build system and says,

00:26:37.520 --> 00:26:42.100
you think you're building with 10.4u,
but the user said build

00:26:42.120 --> 00:26:44.280
with 10.5 just to see.

00:26:44.280 --> 00:26:47.650
But the effect is that
everything will build with 10.5.

00:26:47.660 --> 00:26:50.600
There's also a value in that
pop-up for project settings,

00:26:50.600 --> 00:26:52.760
which is I'm going to build this project.

00:26:52.760 --> 00:26:56.000
I want to build it with what it
says it wants to be built with.

00:26:56.380 --> 00:26:58.730
that's a useful thing to do.

00:26:59.210 --> 00:27:03.530
The Active SDK is really useful in a
try before you buy if you want to see

00:27:03.530 --> 00:27:08.240
what your project is going to behave
like in Snow Leopard or see what your

00:27:08.240 --> 00:27:12.390
Mac project is like in the iPhone world.

00:27:12.400 --> 00:27:16.480
It's also the crucial control
you use to switch back and forth

00:27:16.480 --> 00:27:20.400
between building for the iPhone SDK,
the iPhone device,

00:27:20.400 --> 00:27:22.360
and the iPhone simulator.

00:27:22.360 --> 00:27:24.140
Those are different SDKs.

00:27:24.240 --> 00:27:25.420
They have different tool chains.

00:27:25.420 --> 00:27:26.560
They have different platforms.

00:27:26.560 --> 00:27:27.820
They have different code bases.

00:27:27.990 --> 00:27:30.160
They actually build for
different architectures.

00:27:30.160 --> 00:27:34.960
So it's important to switch back and
forth with that pop-up in the SDK rather

00:27:34.960 --> 00:27:38.770
than have to drill down all the way in
the inspector to see what's going on.

00:27:41.040 --> 00:27:43.400
Last topic is weak frameworks.

00:27:43.400 --> 00:27:47.740
I told you a little bit about what
happens if your deployment target

00:27:47.810 --> 00:27:50.280
is set earlier than your SDK.

00:27:50.280 --> 00:27:56.040
For any given framework
that's on both platforms,

00:27:56.120 --> 00:28:00.390
any new APIs in the new framework will
be replaced with null pointers when

00:28:00.390 --> 00:28:02.010
you're launching on the older system.

00:28:02.300 --> 00:28:05.510
That's how you can write one piece
of code that launches on both and it

00:28:05.510 --> 00:28:10.550
takes advantage of new functionality
of present and skips around null

00:28:10.550 --> 00:28:13.870
pointers or crashes on the old system.

00:28:13.880 --> 00:28:17.220
What about whole new frameworks?

00:28:17.220 --> 00:28:22.450
What if you want to write something that
takes advantage of OpenCL on Snow Leopard

00:28:22.530 --> 00:28:25.230
but OpenCL is not available on Leopard?

00:28:25.230 --> 00:28:29.320
What you do is you bring
that framework into your

00:28:29.320 --> 00:28:31.630
application but you mark it weak.

00:28:31.720 --> 00:28:35.240
That means when Xcode goes to link it,
it says,

00:28:35.270 --> 00:28:40.090
"I'm going to link against this and
I'm going to desire it at runtime but

00:28:40.100 --> 00:28:46.090
not expect it at runtime." Normally,
you build against frameworks,

00:28:46.120 --> 00:28:49.110
you compile against your headers,
you link against them and when

00:28:49.110 --> 00:28:52.890
your application goes to load,
it has to find those frameworks in

00:28:52.890 --> 00:28:55.470
order to fix up all of the references.

00:28:55.540 --> 00:28:59.190
If a framework is missing,
your application will

00:28:59.280 --> 00:29:01.840
just not launch at all.

00:29:02.170 --> 00:29:07.460
But if you mark that framework
weak when you build it,

00:29:07.980 --> 00:29:10.540
And you compile against a weak framework.

00:29:10.560 --> 00:29:14.540
When you launch, if it's missing,
your application will launch,

00:29:14.540 --> 00:29:18.500
but all of the function
pointers to it will be null.

00:29:18.500 --> 00:29:21.920
It's even better than that,
because the compiler doesn't expect

00:29:22.240 --> 00:29:25.660
a framework not to be present,
so it's going to assume that those

00:29:25.840 --> 00:29:29.370
function pointers could never be null,
even though there are,

00:29:29.410 --> 00:29:32.690
so your checks against null
function pointers are going to

00:29:32.690 --> 00:29:34.740
be optimized out of your code.

00:29:35.120 --> 00:29:38.690
So what you have to do when
you're using weak frameworks is

00:29:38.690 --> 00:29:40.760
you have to do a secondary check.

00:29:40.870 --> 00:29:43.890
You have to use a DYLD call,
or you have to look at a

00:29:43.890 --> 00:29:47.600
version number to figure out
what system you're running on,

00:29:47.700 --> 00:29:52.400
whether that framework is present,
and jump around large bodies of code,

00:29:52.400 --> 00:29:56.080
or even conditionally, you know,
to even go to a different

00:29:56.200 --> 00:30:00.070
module or plugin according
to what OS you're running on.

00:30:00.100 --> 00:30:03.580
It gives you the flexibility,
but there is a little more work you have

00:30:03.580 --> 00:30:05.100
to do in your code in order to do it.

00:30:05.120 --> 00:30:08.250
to build against a weak framework.

00:30:09.990 --> 00:30:12.300
The way you control weak
frameworks is pretty easy.

00:30:12.300 --> 00:30:16.400
When you add the framework,
there's a way to check to

00:30:16.400 --> 00:30:18.300
say whether it's weak or not.

00:30:18.300 --> 00:30:22.530
You can go into the link binaries
with libraries build phase,

00:30:22.530 --> 00:30:26.220
select that, you see the detail view,
and there's a column in the

00:30:26.380 --> 00:30:27.800
detail view called role.

00:30:27.800 --> 00:30:30.540
And in that role,
you can change any framework

00:30:30.640 --> 00:30:33.860
linkages to be required or weak,
according to whether you

00:30:34.190 --> 00:30:35.660
want it required or weak.

00:30:35.660 --> 00:30:36.770
Chris Espinosa

00:30:38.550 --> 00:30:43.610
Finally, we've made some changes in the
way we deal with architectures.

00:30:46.200 --> 00:30:51.380
The main issue with architectures is
that when you ship products to users,

00:30:51.440 --> 00:30:54.340
you want them to run on as broad a
number of architectures as possible.

00:30:54.340 --> 00:30:58.440
At least PowerPC and Intel,
and if you've got a 64-bit application,

00:30:58.440 --> 00:31:02.600
you want PowerPC, Intel,
and 64-bit PowerPC and 64-bit Intel as

00:31:02.600 --> 00:31:04.680
well for the Leopard platform.

00:31:06.100 --> 00:35:07.000
[Transcript missing]

00:35:09.100 --> 00:36:44.300
[Transcript missing]

00:36:44.510 --> 00:36:49.100
Once again, let's bring up Michael Rodden
and show you how that all works.

00:36:56.000 --> 00:36:59.900
For this demo,
we're going to use a project

00:36:59.910 --> 00:37:02.200
that we call Ytap Support.

00:37:02.380 --> 00:37:05.690
We took the Ytap

00:37:05.990 --> 00:37:07.420
Hello, everyone.

00:37:07.500 --> 00:37:10.480
I'm Chris Espinosa,
and I'm the founder of

00:37:10.480 --> 00:37:12.340
the Mac OS X Frameworks.

00:37:12.340 --> 00:37:15.660
We're going to build it
into a static library,

00:37:15.660 --> 00:37:21.090
and we've configured this project so
it can build either for the iPhone SDK,

00:37:21.090 --> 00:37:24.890
either the device or the simulator,
or for Mac OS X.

00:37:24.890 --> 00:37:30.070
So this is going to be a cross-platform
static library that can be built and

00:37:30.260 --> 00:37:33.460
included in multiple applications.

00:37:33.460 --> 00:37:41.990
So first,
let's go look at the Ytap support target.

00:37:41.990 --> 00:37:41.990
It's a target just like we saw before.

00:37:42.300 --> 00:37:43.600
We go to its build settings.

00:37:43.600 --> 00:37:45.270
Now look at its architectures.

00:37:45.410 --> 00:37:46.600
Pop the architectures value.

00:37:46.600 --> 00:37:49.010
It says standard 32-bit universal.

00:37:49.010 --> 00:37:49.660
Okay.

00:37:49.660 --> 00:37:51.760
It doesn't say exactly what it is.

00:37:51.760 --> 00:37:53.750
I can go in and find out if I want.

00:37:53.760 --> 00:37:57.490
But that's going to be a value
that's going to persist over time.

00:37:57.490 --> 00:38:00.680
If we change what the definition
of standard architectures are,

00:38:00.680 --> 00:38:03.440
if we, for example,
start building on Spark machines,

00:38:03.440 --> 00:38:06.430
we'll just add Spark to the list
of standard architectures and

00:38:06.430 --> 00:38:08.330
you'll inherit that for free.

00:38:08.340 --> 00:38:09.900
Very valuable thing.

00:38:11.030 --> 00:38:12.340
Now go look at the base SDK.

00:38:12.340 --> 00:38:17.580
Right now, this project is configured
for Mac OS X 10.5 SDK.

00:38:17.590 --> 00:38:21.620
If you change that to
the iPhone simulator,

00:38:21.980 --> 00:38:25.380
Well, notice that standard architectures
has now changed to iPhone

00:38:25.380 --> 00:38:28.940
simulator standard architecture,
which is i386.

00:38:28.940 --> 00:38:33.320
A Mac OS X application, by default,
is two-way FAT, universal.

00:38:33.320 --> 00:38:39.380
But a simulator application, by default,
is only x86, i386,

00:38:39.380 --> 00:38:41.670
because that's the only
platform the simulator runs on.

00:38:41.680 --> 00:38:42.260
Okay?

00:38:42.260 --> 00:38:45.770
Now,
if we look at the debug configuration,

00:38:45.880 --> 00:38:48.680
that's what we're looking at now.

00:38:48.780 --> 00:38:52.030
Notice the build active architecture
only checkbox is checked.

00:38:52.060 --> 00:38:54.840
If you switch to the
release configuration...

00:38:56.880 --> 00:38:58.520
You'll see that it's unchecked.

00:38:58.660 --> 00:39:02.020
That means that if our
architecture is multiple values,

00:39:02.030 --> 00:39:05.800
if we're building universal,
in our release configuration,

00:39:05.800 --> 00:39:08.360
it will always build
multiple architectures,

00:39:08.360 --> 00:39:11.230
but in our debug configuration,
it's only going to build

00:39:11.230 --> 00:39:13.060
one for quick turnaround.

00:39:14.740 --> 00:39:15.180
Okay?

00:39:15.180 --> 00:39:18.110
Now we want to see some of
the linker specifications,

00:39:18.110 --> 00:39:19.900
so just let's type in linker.

00:39:20.190 --> 00:39:21.880
And notice other linker flags.

00:39:21.910 --> 00:39:23.360
See the lines below it?

00:39:23.370 --> 00:39:24.580
It's got a disclosure arrow.

00:39:24.580 --> 00:39:32.610
We've got different frameworks
being configured for different

00:39:32.610 --> 00:39:36.780
sides of this static library.

00:39:38.060 --> 00:39:41.600
If we're building for any Mac OS X, well,
we want to link against Cocoa.

00:39:41.600 --> 00:39:45.050
But if we're building for any
iPhone device or simulator,

00:39:45.050 --> 00:39:46.940
we want to link against UIKit.

00:39:46.950 --> 00:39:52.130
And so we just have per SDK variants
on the linker flags in order to

00:39:52.130 --> 00:39:58.100
bring in the different frameworks
for the different configurations.

00:39:59.320 --> 00:40:04.750
Correspondingly, in the source code,
there's a pound if iPhone

00:40:04.750 --> 00:40:06.090
that imports UIKit.

00:40:08.070 --> 00:40:10.090
Or pound imports Cocoa,
depending upon which

00:40:10.150 --> 00:40:11.050
it's being built for.

00:40:13.060 --> 00:40:13.380
Okay?

00:40:13.490 --> 00:40:15.470
So if we build this,
if we open up the build

00:40:15.790 --> 00:40:23.770
results window and build it,
and we're building for the 10.5 SDK,

00:40:23.770 --> 00:40:23.770
yeah.

00:40:32.390 --> 00:40:35.320
So we'll build this and if
you can open up the transcript

00:40:35.320 --> 00:40:38.440
or just actually just hover,
this is a new feature,

00:40:38.640 --> 00:40:40.460
just hover and wait.

00:40:40.460 --> 00:40:43.280
And it shows us a tool tip saying
what that step was built for and

00:40:43.280 --> 00:40:47.420
it says active architecture i386,
active SDK 10.5 SDK.

00:40:47.420 --> 00:40:50.680
So we know that we just built
all those files for the SDK.

00:40:50.680 --> 00:40:55.330
But if you go to the pop-up up there,
the overview pop-up,

00:40:56.250 --> 00:41:01.840
Change that to simulator
iPhone OS 2.0 and then rebuild.

00:41:01.840 --> 00:41:03.800
Everything gets rebuilt.

00:41:03.800 --> 00:41:05.670
You hover over it.

00:41:07.200 --> 00:41:11.540
and you see that it's building for the
Active SDK iPhone OS Simulator SDK.

00:41:11.540 --> 00:41:13.300
Now, here's the important part.

00:41:13.300 --> 00:41:16.600
If you open up the transcript,

00:41:18.370 --> 00:41:23.440
Here you can probably use
your fancy control zoom in.

00:41:23.440 --> 00:41:25.400
Oh, there we go.

00:41:26.980 --> 00:41:31.280
So show the, yeah, this is the fun part.

00:41:31.280 --> 00:41:35.230
Notice the path to GCC here.

00:41:35.230 --> 00:41:40.680
It's getting GCC 4.0, not from user bin,
which is where a make file would get it,

00:41:40.930 --> 00:41:42.890
and not from slash
developer slash user bin,

00:41:42.890 --> 00:41:46.120
which is where Xcode 3.0 would get it,
but it's getting it from

00:41:46.120 --> 00:41:47.610
the iPhone simulator SDK.

00:41:47.880 --> 00:41:51.670
The simulator SDK carries its own
copy of GCC with it that goes all

00:41:51.680 --> 00:41:55.700
the way back to the early slides
that I showed where the simulators,

00:41:55.960 --> 00:41:59.720
where the SDKs are self-contained
development environments,

00:41:59.730 --> 00:42:03.080
and when you switch in the UI,
you're actually switching

00:42:03.080 --> 00:42:06.530
your entire tool chain out
from under you just like that.

00:42:06.540 --> 00:42:09.640
Okay?

00:42:09.640 --> 00:42:10.870
Thank you, Michael.

00:42:10.880 --> 00:42:12.010
Thank you.

00:42:18.090 --> 00:42:20.290
So that's what's new in Xcode 3.1.

00:42:20.310 --> 00:42:25.630
It's mainly a lot of features to
ease development against multiple

00:42:25.630 --> 00:42:30.060
SDKs and to build projects that
can build against multiple SDKs.

00:42:30.060 --> 00:42:33.300
And when you build a project
against multiple SDKs,

00:42:33.390 --> 00:42:37.980
or even when you build a moderately
complex project just for the Mac OS,

00:42:37.980 --> 00:42:42.760
you're probably not going to have
that mental model of one project,

00:42:42.760 --> 00:42:47.340
one target, one build product,
one executable to launch it.

00:42:47.420 --> 00:42:50.170
You're going to have multiple projects.

00:42:50.170 --> 00:42:52.300
The projects may have multiple targets.

00:42:52.420 --> 00:42:55.510
The targets will have many
build phases and steps.

00:42:55.510 --> 00:42:58.620
Each of them may create
multiple build products,

00:42:58.690 --> 00:43:01.970
and then they'll want to use
each other's build products.

00:43:02.030 --> 00:43:04.620
They'll want to bring them in,
copy them into their folders,

00:43:04.620 --> 00:43:07.000
link against them,
do all sorts of complex things.

00:43:07.000 --> 00:43:11.720
Most of this historically has been
left as an exercise to the reader.

00:43:13.480 --> 00:43:16.870
We're going to walk you through it now
and show you the general techniques you

00:43:16.870 --> 00:43:20.200
need to use to make this work in Xcode.

00:43:22.010 --> 00:43:24.840
First of all,
we're going to talk about subprojects.

00:43:24.880 --> 00:43:27.400
There are no subprojects.

00:43:27.670 --> 00:43:31.330
If you are thinking of sub-projects,
you are thinking in a way that will

00:43:31.330 --> 00:43:33.010
get you into trouble down the road.

00:43:33.070 --> 00:43:38.640
Because Xcode projects have a
complex and networked relationships.

00:43:38.640 --> 00:43:40.680
They are not strict subordinates.

00:43:55.600 --> 00:43:55.970
Any tree is a subset of a graph,
of course.

00:43:55.980 --> 00:43:56.380
So you can set up any
tree of projects you want.

00:43:56.380 --> 00:43:56.980
And if you want projects to act
like sub-projects of other projects,

00:43:56.980 --> 00:43:57.250
you can do that.

00:43:58.470 --> 00:44:03.160
But Xcode allows you to create
multiple branching dependencies

00:44:03.160 --> 00:44:08.240
among projects so that you can
share code in really powerful ways.

00:44:09.100 --> 00:44:11.580
So if you are thinking that you are
going to make this project a sub-project,

00:44:11.580 --> 00:44:11.580
you are going to have to
make it a sub-project.

00:44:12.620 --> 00:44:13.160
If you are thinking that you
are going to make this project a

00:44:13.160 --> 00:44:14.820
sub-project of another project,
try to erase that thought

00:44:14.940 --> 00:44:17.970
from your mind and say,
"I am going to refer to this project

00:44:17.970 --> 00:44:22.860
from another project." And that will
open up a lot more possibilities

00:44:22.860 --> 00:44:24.620
for what you can do in the future.

00:44:25.300 --> 00:45:56.100
[Transcript missing]

00:45:56.780 --> 00:45:59.860
First, the way to establish a
cross-project reference.

00:45:59.990 --> 00:46:01.100
It's pretty simple.

00:46:01.220 --> 00:46:07.730
You have project A, you have project B,
you drag project B into project A.

00:46:07.950 --> 00:46:09.320
That's pretty simple.

00:46:09.640 --> 00:46:11.080
That does nothing.

00:46:11.140 --> 00:46:14.760
It just lets Project A know
that Project B exists.

00:46:14.760 --> 00:46:19.440
One of the things it does do is
it shows you the build products

00:46:19.440 --> 00:46:23.550
of Project B inside the Groups and
Files tree of Project A so that

00:46:23.550 --> 00:46:28.140
you can use them in other places,
but it's up to you to say where.

00:46:29.560 --> 00:46:32.300
So the second step is how
to use the build projects.

00:46:32.460 --> 00:46:34.740
The most common thing

00:46:35.570 --> 00:46:40.370
If project A builds a small part,
or if project B builds a small part and

00:46:40.370 --> 00:46:45.400
project A brings that in as a static
library or a shared library or something,

00:46:45.400 --> 00:46:48.140
you need to move that into a build phase.

00:46:48.140 --> 00:46:51.870
So normally what you do is you just
take that build product icon in the

00:46:51.910 --> 00:46:56.070
groups and files tree that just appeared
when you dragged in the project,

00:46:56.070 --> 00:46:59.510
and you drag it down into your
product's build phase and add it.

00:47:00.960 --> 00:47:04.590
That's the basic technique for
making an application link with

00:47:04.670 --> 00:47:06.950
a framework that you've built.

00:47:07.450 --> 00:47:08.290
But you're not done yet.

00:47:08.340 --> 00:47:12.120
If the framework is in a
well-known common place,

00:47:12.220 --> 00:47:13.310
your application will work.

00:47:13.390 --> 00:47:17.240
But if you want to embed that
framework within your application,

00:47:17.240 --> 00:47:21.750
you need to make sure that
whenever you build the application,

00:47:21.750 --> 00:47:23.910
the framework is up to date.

00:47:23.980 --> 00:47:27.420
Whenever you build the framework,
it reminds the application that

00:47:27.420 --> 00:47:28.870
it needs to relink with it.

00:47:28.930 --> 00:47:31.220
That means you need to
create a dependency.

00:47:32.190 --> 00:47:33.190
You go to the target.

00:47:33.190 --> 00:47:35.910
The target has a list of dependencies.

00:47:35.910 --> 00:47:38.990
It has a list of other targets
that need to be up to date

00:47:38.990 --> 00:47:40.660
when that target is built.

00:47:40.690 --> 00:47:43.540
You go to the target pane.

00:47:43.540 --> 00:47:46.400
You go to the direct dependencies panel.

00:47:46.400 --> 00:47:48.070
You click the plus button.

00:47:48.900 --> 00:47:52.260
And the other targets in that project,
including the ones from

00:47:52.260 --> 00:47:54.270
project references,
will show up.

00:47:54.430 --> 00:47:58.010
You select the one that you care about,
and you add it to the list.

00:47:59.030 --> 00:48:03.390
When that framework target, for example,
is added to the direct dependency

00:48:03.500 --> 00:48:06.180
list of the application,
that means when you

00:48:06.180 --> 00:48:09.300
build the application,
it will automatically make sure

00:48:09.300 --> 00:48:12.480
that that framework is up to
date and build it if necessary.

00:48:13.060 --> 00:48:16.860
If you update and rebuild the framework
and it's newer than your application,

00:48:16.860 --> 00:48:20.680
when you rebuild your application,
it will relink with that framework.

00:48:20.680 --> 00:48:22.910
You have to create this
dependency manually.

00:48:23.560 --> 00:48:26.350
Otherwise, it will just take the latest
version of that framework,

00:48:26.350 --> 00:48:28.140
no matter whether it's up to date or not.

00:48:28.640 --> 00:48:32.050
That is a great way to get build errors,
which is to forget to

00:48:32.050 --> 00:48:35.760
create the dependency,
to make a change in your framework,

00:48:35.760 --> 00:48:39.240
to make a corresponding
change in your application,

00:48:39.240 --> 00:48:41.090
and then to rebuild your application.

00:48:41.460 --> 00:48:44.450
Because without that,
without having had the framework rebuilt,

00:48:44.450 --> 00:48:47.860
the application won't be picking up
the latest version of the framework.

00:48:47.860 --> 00:48:49.890
Create the dependency, and it will.

00:48:51.400 --> 00:50:42.800
[Transcript missing]

00:50:43.290 --> 00:50:44.320
You can do better than that, though.

00:50:44.320 --> 00:50:47.810
You can build one framework that is
shared among multiple applications.

00:50:47.820 --> 00:50:50.800
As long as all of the applications
have the same relative path

00:50:50.910 --> 00:50:53.780
to refer to that framework,
you can deliver, say,

00:50:53.780 --> 00:50:56.750
a folder called applications,
which is parallel to a

00:50:56.750 --> 00:51:00.410
folder called libraries,
and all those applications can use all

00:51:00.410 --> 00:51:02.720
the libraries in the library folder.

00:51:04.120 --> 00:51:05.270
If you look at the
Xcode Developer folder,

00:51:05.280 --> 00:51:07.190
that is exactly how we structure it.

00:51:07.190 --> 00:51:11.010
Developer Library has a lot of
shared frameworks that are shared

00:51:11.020 --> 00:51:15.440
among all of the various pieces of
the Xcode development environment.

00:51:15.460 --> 00:51:20.230
The way we do that is with the
dynamic library install name on the

00:51:20.230 --> 00:51:23.660
frameworks using the RPath methodology.

00:51:23.660 --> 00:51:28.190
RPath means whoever is invoking me,
give me a relative path to them.

00:51:29.300 --> 00:51:32.220
So on each shared framework target,
you define its dynamic library.

00:51:32.720 --> 00:51:36.700
The dynamic library install
name as relative to the RPath.

00:51:36.700 --> 00:51:42.220
And then on every application that
wants to invoke those frameworks,

00:51:42.250 --> 00:51:44.720
you set its run path search path.

00:51:44.720 --> 00:51:49.330
This is where it defines its
RPath to its framework directory,

00:51:49.460 --> 00:51:53.680
either within itself or
relative to a common location.

00:51:54.010 --> 00:51:57.710
You can come up after and
ask us details on this.

00:51:57.720 --> 00:52:00.720
There are a couple of good resources
on the web to tell you how to do this.

00:52:01.720 --> 00:52:01.720
We went through this in an exclusive way.

00:52:01.980 --> 00:52:02.720
We went through this in an exclusive way.

00:52:02.720 --> 00:52:06.000
excruciating detail last year at WWDC.

00:52:06.000 --> 00:52:09.370
So you can go look at my presentation
with Rick Ballard's demo from

00:52:09.530 --> 00:52:14.000
last year on ADC on iTunes and
see this in excruciating detail.

00:52:14.000 --> 00:52:17.710
This is the primary thing you have to do
if you have multiple applications sharing

00:52:17.710 --> 00:52:19.930
multiple frameworks in a common location.

00:52:21.660 --> 00:52:26.350
Now, the techniques I've showed you,
making a cross-project reference,

00:52:26.410 --> 00:52:30.880
creating a target dependency
in a cross-project reference,

00:52:30.880 --> 00:52:34.950
putting the build product into a
link phase or something like that,

00:52:35.060 --> 00:52:38.000
putting the build product into
a copy bundle resources phase,

00:52:38.000 --> 00:52:41.550
these can be used for all
sorts of architectures,

00:52:41.550 --> 00:52:44.420
all sorts of layouts of your project.

00:52:45.050 --> 00:52:48.180
If you have a static library that
you're using in multiple projects,

00:52:48.180 --> 00:52:50.940
you can build it once and then
just include it as if it were

00:52:51.040 --> 00:52:54.460
a pre-built binary in multiple
projects using this technique.

00:52:55.280 --> 00:52:58.780
If you have an aggregate target,
you can create an aggregate target which

00:52:58.800 --> 00:53:02.920
is just a target that consists of other
targets being built in a specific order.

00:53:03.730 --> 00:53:07.240
You can use this technique to make
the aggregate target dependent upon

00:53:07.240 --> 00:53:10.470
all of the other targets built in
a particular order if you really

00:53:10.480 --> 00:53:12.420
need to build something like that.

00:53:12.980 --> 00:53:17.420
You can create a project that has an
application and a bunch of plug-ins,

00:53:17.420 --> 00:53:20.710
and part of the app needs to be built,
and then the plug-ins need

00:53:20.710 --> 00:53:23.000
to be linked against it,
and then the plug-ins need to

00:53:23.000 --> 00:53:24.730
be copied into the application.

00:53:25.300 --> 00:53:27.680
You use this technique to do that.

00:53:30.980 --> 00:53:33.600
But once again,
the best way to get the hang of how

00:53:33.600 --> 00:53:36.460
this works is to actually see it.

00:53:37.080 --> 00:53:40.160
So we're going to take that
static library we built,

00:53:40.170 --> 00:53:44.740
and we're going to build it
into an iPhone application,

00:53:44.740 --> 00:53:50.820
and then we're going to build it
into a Mac OS X application as well.

00:53:51.050 --> 00:53:54.590
So we're going to get
the Ytap application.

00:53:54.600 --> 00:53:58.400
This is the iPhone
sample code that you get,

00:53:58.420 --> 00:54:02.080
except we've extracted all
of the common code out of it.

00:54:02.080 --> 00:54:04.500
And what we're going to do,
the first thing is we're going to take

00:54:04.500 --> 00:54:10.690
that Ytap support project that we built,
we're going to drag the project

00:54:11.620 --> 00:54:13.910
icon from it and go drop it.

00:54:14.580 --> 00:54:15.790
And just say yes to the sheet.

00:54:15.800 --> 00:54:17.160
All the defaults are correct.

00:54:17.230 --> 00:54:22.600
And now you see that the Ytap support
project is a cross-project reference

00:54:22.600 --> 00:54:25.350
in the Ytap application project.

00:54:25.350 --> 00:54:28.750
You turn it down, and you see it's build
product right there.

00:54:29.910 --> 00:54:31.270
Yeah, can you drag?

00:54:31.270 --> 00:54:32.310
There we go.

00:54:32.310 --> 00:54:32.990
Okay.

00:54:32.990 --> 00:54:36.450
So you see Ytap is the
application project,

00:54:36.450 --> 00:54:39.470
Ytap support is the
cross-project reference,

00:54:39.520 --> 00:54:44.310
and the libytapsupport.a is the
build product that we're building.

00:54:45.170 --> 00:54:48.480
Now, um,

00:54:48.850 --> 00:54:53.100
If you go down to the target,
open that up, this is our one target,

00:54:53.100 --> 00:54:58.130
you see the link binary
with libraries build phase.

00:54:58.130 --> 00:55:05.330
Let's, yeah, you just drag that down,
drop it in.

00:55:05.550 --> 00:55:10.120
And that has made it so that we're going
to link the application with the static

00:55:10.120 --> 00:55:12.040
library pre-built by the other project.

00:55:12.130 --> 00:55:15.450
Now that's great,
but that implies that that app,

00:55:15.630 --> 00:55:18.770
that static library
has already been built.

00:55:18.790 --> 00:55:21.950
If we want to force it to be built,
we've got to create

00:55:21.950 --> 00:55:23.680
the target dependency.

00:55:23.680 --> 00:55:27.490
So we double click our target,
go to the general pane.

00:55:27.490 --> 00:55:29.530
Now first,
I want to take a little digression here.

00:55:29.530 --> 00:55:30.990
I want to show you a new cool thing.

00:55:31.300 --> 00:55:36.920
How many people hate how you have to add
frameworks to an application in Xcode?

00:55:37.730 --> 00:55:41.470
Not as many as I'd expected,
but there's an all-new way.

00:55:41.470 --> 00:55:46.800
There's a linked libraries pane
here that shows you what all the

00:55:46.800 --> 00:55:50.960
libraries you're linked with now,
and you see the required.

00:55:50.960 --> 00:55:54.690
That's the pop-up for required and weak.

00:55:57.400 --> 00:56:02.400
with the magical third column
that NS TableView gives us.

00:56:02.850 --> 00:56:06.670
If you press the plus button,

00:56:08.210 --> 00:56:12.020
This is a list of all of the
frameworks in your current SDK,

00:56:12.020 --> 00:56:13.470
or all of your SDKs.

00:56:14.700 --> 00:57:17.900
[Transcript missing]

00:57:26.150 --> 00:57:30.350
Now we're using the... Did you
build the library for the... Okay,

00:57:30.580 --> 00:57:31.440
that's simulator.

00:57:31.440 --> 00:57:43.840
Looks like it's not finding the
headers in the common build directory.

00:57:55.600 --> 00:58:10.130
Luckily, we have our build system
expert here to debug this.

00:58:10.180 --> 00:58:13.000
Make sure that the common
build directory is set up,

00:58:13.000 --> 00:58:14.790
because that's my next slide.

00:58:19.270 --> 00:58:22.340
I'd prefer that we save
questions for the end.

00:58:22.340 --> 00:58:23.660
We're going to have a lot
of time for questions.

00:58:23.680 --> 00:58:26.640
Actually,
if we can go back to the slides,

00:58:26.640 --> 00:58:29.400
I'll just finish up with the slides.

00:58:29.400 --> 00:58:30.690
Oh, he did it.

00:58:30.820 --> 00:58:31.800
Never mind.

00:58:31.890 --> 00:58:32.420
Yay.

00:58:32.420 --> 00:58:33.080
Okay.

00:58:33.110 --> 00:58:35.310
Back to the demo machine.

00:58:42.140 --> 00:58:46.140
So this is the Ytap application.

00:58:46.140 --> 00:58:48.970
Run that one in client.

00:58:49.850 --> 00:58:52.440
Okay, run that one in server,
that's fine.

00:58:52.440 --> 00:58:55.380
Okay, this is an application that
does nothing by itself.

00:58:55.550 --> 00:59:02.080
So now what we're going to do
is open up another project.

00:59:03.320 --> 00:59:13.700
This is a Mac OS X application
that's written to be like the

00:59:13.700 --> 00:59:17.080
Ytap application on the iPhone,
but it's a Mac OS X app that

00:59:17.080 --> 00:59:18.800
uses the same static library.

00:59:18.800 --> 00:59:21.100
And so we're going to go
through the same steps.

00:59:21.100 --> 00:59:25.250
We're going to add the
cross-project reference.

00:59:28.680 --> 00:59:34.440
We're going to disclose it,
find that static library,

00:59:34.500 --> 00:59:37.110
add that static library,

00:59:38.980 --> 00:59:44.330
Now we double click the target,
create the cross project reference.

00:59:44.430 --> 00:59:47.400
You do this enough,
it really gets to be second nature.

00:59:47.470 --> 00:59:50.640
And then build and go.

00:59:50.660 --> 01:00:04.690
Now this is the one where
it had the stale reference.

01:00:28.340 --> 01:00:34.890
I think that it's getting the
file from the wrong location.

01:00:38.560 --> 01:00:44.560
Notice how he's doing his forensics.

01:00:44.560 --> 01:00:47.750
We should have made this a
debugging the build system session.

01:01:19.260 --> 01:01:20.200
Now this worked last time.

01:01:20.200 --> 01:01:23.730
I'll say, let's go back to the slides,
and he'll say, I've got it working.

01:01:28.830 --> 01:01:31.380
So, two project reference tips.

01:01:31.400 --> 01:01:36.550
One is that if you have multiple
projects that are building build products

01:01:36.550 --> 01:01:40.210
that each other need to refer to,
the best and perhaps the only

01:01:40.280 --> 01:01:44.150
successful way to do it is if you
have a shared build directory.

01:01:44.160 --> 01:01:46.700
If you saw when he went
back to Xcode Preferences,

01:01:46.810 --> 01:01:49.000
to the Build tab,
and made sure that we were

01:01:49.000 --> 01:01:52.170
using a shared build directory,
that is the way the projects

01:01:52.170 --> 01:01:54.160
communicate within each other.

01:01:54.160 --> 01:01:56.860
All of the build products are
in a flat build directory.

01:01:56.880 --> 01:01:58.810
That's fairly important to maintain.

01:01:58.820 --> 01:02:01.920
The second thing is that if
you have projects that are

01:02:01.990 --> 01:02:05.350
referring to each other,
they need to have a consistent

01:02:05.360 --> 01:02:07.370
set of configuration names.

01:02:07.380 --> 01:02:12.790
Because when you build the debug
configuration of one project and it has

01:02:12.790 --> 01:02:17.070
a dependency on a... another target,
it's going to go build the debug

01:02:17.090 --> 01:02:18.820
configuration of that target.

01:02:18.950 --> 01:02:21.540
If you have one project
where your configurations are

01:02:21.540 --> 01:02:24.330
development and deployment,
and another project where your

01:02:24.410 --> 01:02:27.220
configurations are debug and release,
they're not going to know how

01:02:27.270 --> 01:02:28.520
to line up with each other.

01:02:28.520 --> 01:02:34.100
So, it's really important to keep your
configuration names in a coherent space.

01:02:34.400 --> 01:02:36.820
So,
while he's wrapping up on the great demo

01:02:37.020 --> 01:02:41.710
that I put together and subjected him
to running through when it was broken,

01:02:41.800 --> 01:02:43.670
I want to recap what we've done.

01:02:43.680 --> 01:02:48.500
We did a brief review, projects, targets,
build phases.

01:02:49.170 --> 01:02:53.500
And executables and build products are
separate from products and targets.

01:02:53.880 --> 01:02:54.780
Common terminology.

01:02:54.780 --> 01:02:57.360
Lot new in Xcode 3.1.

01:02:57.360 --> 01:03:01.660
Support for weak frameworks,
support for active architecture,

01:03:01.660 --> 01:03:05.820
support for choosing
your SDK in the pop-up,

01:03:05.820 --> 01:03:08.800
choosing your active
architecture in the pop-up,

01:03:08.940 --> 01:03:12.740
the new overview SDK,
some nice little things like being able

01:03:12.740 --> 01:03:17.660
to see the SDK and the architecture
in a tooltip on every build step.

01:03:17.660 --> 01:03:21.620
And of course,
the whole structure of SDKs which

01:03:21.620 --> 01:03:26.240
now have the build tools embedded
within them for long-term flexibility.

01:03:26.330 --> 01:03:30.470
Important things like how to set
the deployment target and the

01:03:30.470 --> 01:03:35.180
SDK in relation to each other so
that you can deploy on one version,

01:03:35.180 --> 01:03:37.540
but take advantage of
features in new versions.

01:03:37.540 --> 01:03:41.240
And then advanced techniques of
creating cross-project references of

01:03:41.370 --> 01:03:46.190
using the build products in different
build phases of the model of the

01:03:46.190 --> 01:03:47.400
model of the model of the model

01:03:47.620 --> 01:03:53.150
of creating project dependencies and
then how to set up the dynamic library

01:03:53.150 --> 01:03:58.600
references so if you embed shared
libraries or frameworks in applications,

01:03:58.680 --> 01:04:02.200
the applications can reach
in and use those frameworks.

01:04:02.210 --> 01:04:02.900
Okay?

01:04:02.940 --> 01:04:05.040
Oh, he's got it now.

01:04:05.040 --> 01:04:06.320
Now we can go back.

01:04:06.360 --> 01:04:08.390
This is the big finish.

01:04:11.600 --> 01:04:12.200
Build succeeded.

01:04:12.200 --> 01:04:15.020
And that one is client.

01:04:15.020 --> 01:04:18.600
So now we've got two applications,
and they're both connected.

01:04:18.600 --> 01:04:21.160
One running on the Mac,
one running in the simulator.

01:04:21.200 --> 01:04:25.630
And if you click on one,
it sends a signal over

01:04:25.630 --> 01:04:29.290
Wi-Fi inside the Mac to the other.

01:04:29.300 --> 01:04:35.760
So this is the same code built
once for the static library that is

01:04:35.790 --> 01:04:42.520
being deployed both to the Mac side
with a Cocoa application and to

01:04:42.520 --> 01:04:49.800
the iPhone simulator side with
an iPhone Cocoa Touch application.

01:04:49.800 --> 01:04:54.280
Common code using common frameworks with
only slight differences between the two

01:04:54.280 --> 01:04:58.550
being built twice with cross-project
references and target references.

01:04:59.320 --> 01:04:59.580
Okay.

01:04:59.580 --> 01:05:01.890
And with that,
Tavares Ford is going to come up,

01:05:01.890 --> 01:05:05.080
or Michael Jurowicz is going to
come up and lead some Q&A for us.