WEBVTT

00:00:20.620 --> 00:00:22.190
Good morning.

00:00:22.400 --> 00:00:24.480
Welcome to
Building Great Java Applications

00:00:24.540 --> 00:00:25.300
on Mac OS X.

00:00:25.300 --> 00:00:29.440
I'm Mike Swingler,
and I am the lead runtime engineer

00:00:29.440 --> 00:00:31.720
for the Java team here at Apple.

00:00:31.720 --> 00:00:35.010
And today we're going to talk about
some things that you can do to

00:00:35.010 --> 00:00:39.080
customize and tweak your applications
to make them look great on Mac OS X.

00:00:39.080 --> 00:00:42.950
But we're also going to talk a little
bit about the tools that Apple provides

00:00:42.960 --> 00:00:45.200
for building your Java applications.

00:00:45.980 --> 00:00:49.250
We're also going to talk a lot
about 64-bit and what that means for

00:00:49.250 --> 00:00:54.360
building and deploying your apps and
some steps you might have to work on.

00:00:54.360 --> 00:00:57.410
And we're also going to have some
guest speakers to come up and

00:00:57.470 --> 00:01:01.020
talk about the future of SWT and
what that means with 64-bit.

00:01:01.020 --> 00:01:03.590
In addition,
we also have another guest speaker

00:01:03.590 --> 00:01:06.980
coming up to talk about the new
out-of-process applet plugin and

00:01:06.980 --> 00:01:09.330
how that works with 64-bit as well.

00:01:09.340 --> 00:01:14.830
Then finally, I'll finish up with Mac app
essentials and sort of what you

00:01:14.910 --> 00:01:15.960
need to get your application going.

00:01:15.960 --> 00:01:18.730
So, let's get started.

00:01:18.730 --> 00:01:24.400
I'm Mike Swingler,
and I'm the lead runtime engineer

00:01:24.420 --> 00:01:30.000
for Building Great Java Applications
on Mac OS X.

00:01:30.490 --> 00:01:35.460
So starting off with tools,
there's three major things that you need

00:01:35.510 --> 00:01:38.580
to know about tools that Apple provides.

00:01:38.620 --> 00:01:41.540
The support that we give you
to build your application,

00:01:41.570 --> 00:01:44.630
all the various debugging tools
we have available on our platform,

00:01:44.670 --> 00:01:49.700
and some really awesome performance
tools we hope you'll use in early

00:01:49.730 --> 00:01:52.220
bring-up of your application.

00:01:52.630 --> 00:01:58.540
So to start off with building,
what we use internally in Apple and we're

00:01:58.540 --> 00:02:01.020
transitioning and migrating onto is Ant.

00:02:01.020 --> 00:02:06.470
Ant build targets are universally
understood by all Java IDEs,

00:02:06.470 --> 00:02:09.600
Eclipse, NetBeans, IntelliJ.

00:02:09.600 --> 00:02:16.500
It's really the common denominator that
all IDEs on every platform understand,

00:02:16.500 --> 00:02:19.440
and it's something that
we're moving to in Eclipse.

00:02:20.020 --> 00:02:21.980
I'm sorry, in Xcode.

00:02:21.980 --> 00:02:26.480
We use Eclipse a lot internally, too.

00:02:26.480 --> 00:02:33.240
We're using internally in Xcode in
order to build the JDK itself as well,

00:02:33.240 --> 00:02:41.680
because the jam targets that
are in Xcode are legacy,

00:02:41.680 --> 00:02:45.260
and they will be being removed at some
point in a future version of Xcode,

00:02:45.260 --> 00:02:49.720
simply because it just doesn't make
sense to support a totally proprietary,

00:02:50.020 --> 00:02:52.020
single-world system that
only works inside of one IDE.

00:02:52.020 --> 00:02:56.020
So if you have any targets,
you should migrate those soon.

00:02:56.020 --> 00:03:00.590
So in order to do that,
one of the new features we

00:03:00.590 --> 00:03:04.020
added in Mac OS X Leopard's
Xcode is the organizer window.

00:03:04.020 --> 00:03:07.010
And if you go up to the
window menu inside of Xcode,

00:03:07.020 --> 00:03:09.050
open up the organizer,
you click on the little plus

00:03:09.050 --> 00:03:12.790
down there at the bottom,
and that's your starting point for

00:03:12.800 --> 00:03:16.020
all new Java applications on Mac OS X.

00:03:16.020 --> 00:03:18.470
You can build the standard
templates for applets,

00:03:18.500 --> 00:03:20.020
web start, command line.

00:03:20.180 --> 00:03:22.020
But this is also your
starting point for JNI.

00:03:22.020 --> 00:03:25.420
And this is very important if
you have any JNI to use the new

00:03:25.420 --> 00:03:29.110
ant-based Xcode template and
use it inside of the organizer,

00:03:29.110 --> 00:03:34.410
because the organizer will put down
all of the sub-Xcode prods that you

00:03:34.410 --> 00:03:36.020
need in order to build that JNI.

00:03:37.540 --> 00:03:41.260
Moving on to debugging,
we have some really awesome tools

00:03:41.260 --> 00:03:45.610
available inside of Mac OS X built
into the kernel to support

00:03:45.610 --> 00:03:47.540
debugging your Java applications.

00:03:47.540 --> 00:03:50.690
So DTrace is a technology
we use from Sun,

00:03:50.690 --> 00:03:56.000
that we've adopted from Sun,
to actually probe down all the

00:03:56.000 --> 00:04:00.270
way from the system kernel calls
through the native parts of Java and

00:04:00.270 --> 00:04:05.060
native applications all the way up
to over 508 unique probe points in

00:04:05.060 --> 00:04:07.720
Java that we have available in Java 6.

00:04:07.720 --> 00:04:10.450
This is available on
Mac OS X Leopard and also in the

00:04:10.480 --> 00:04:12.420
Snow Leopard preview you have.

00:04:12.420 --> 00:04:17.160
And just to also mention that
any new tools that Sun adds.

00:04:17.540 --> 00:04:22.540
You know, JMap, JStack, Jhat, JConsole,
anything else that they incorporate

00:04:22.540 --> 00:04:27.290
into future versions of JDK,
we'll pick those up along as well.

00:04:29.020 --> 00:04:33.120
So for performance tools,
we've had a really great performance tool

00:04:33.120 --> 00:04:37.380
built into Mac OS X Leopard since 10.2,
and that's Shark.

00:04:37.420 --> 00:04:40.930
And currently right now in
the Snow Leopard preview,

00:04:40.930 --> 00:04:44.120
Shark works for 32-bit Java processes.

00:04:44.120 --> 00:04:48.820
We're working on 64-bit,
but Shark continues to be a really

00:04:48.870 --> 00:04:54.060
great tool at diving into getting to
the very detailed hot points of not only

00:04:54.180 --> 00:04:58.290
the native part of your applications,
but also the Java stack

00:04:58.290 --> 00:05:00.860
call traces as well,
and really gives you some really

00:05:00.860 --> 00:05:04.960
great analysis that's just really
not possible in any other tool.

00:05:04.960 --> 00:05:09.340
But we've also added another
tool in Snow Leopard,

00:05:09.470 --> 00:05:13.980
in Leopard actually,
and that's Instruments.

00:05:13.980 --> 00:05:18.130
Instruments takes a kind of higher
level view and allows you to not only

00:05:18.130 --> 00:05:22.510
look at the thread states and stacks
inside of your Java application and

00:05:22.520 --> 00:05:26.350
actually see what sort of locks that
you're finding in your application,

00:05:26.350 --> 00:05:27.130
but also see what sort of locks that
you're finding in your application.

00:05:27.160 --> 00:05:27.630
So that's a really great tool.

00:05:27.670 --> 00:05:43.680
And then we've also added a little
bit of a So if your application is

00:05:43.680 --> 00:05:46.780
triggering something that causes
a lot of disk paging or you see

00:05:46.780 --> 00:05:46.780
a lot of disk IO or network IO,
Instruments is a great tool to

00:05:46.780 --> 00:05:46.780
help sort of visualize what happens
at a high level on the machine

00:05:46.780 --> 00:05:46.780
as you're running your application.

00:05:47.040 --> 00:05:52.310
That basically are some of
the tools that we provide from

00:05:52.660 --> 00:05:54.200
Apple on the Developer Tools DVD.

00:05:54.200 --> 00:05:56.550
And now I'd like to
invite Pratik Solanki,

00:05:56.550 --> 00:05:59.450
our virtual machine engineer,
to come up and talk about what

00:05:59.590 --> 00:06:00.990
64-bit means for your app.

00:06:01.060 --> 00:06:03.060
Thank you.

00:06:07.300 --> 00:06:08.570
Good morning, everyone.

00:06:08.580 --> 00:06:11.250
My name is PratiK Solanki,
and I work on the Java VM team

00:06:11.260 --> 00:06:11.980
over here at Apple.

00:06:11.980 --> 00:06:14.750
So I'm here to talk to
you about the 64-bit JVM.

00:06:14.820 --> 00:06:19.230
So we're going to talk about what
64-bit means to you as Java developers.

00:06:19.270 --> 00:06:22.000
We're going to discuss some of
the performance characteristics

00:06:22.050 --> 00:06:25.430
of 64-bit and then tell you how
you develop and deploy for 64-bit.

00:06:25.440 --> 00:06:26.860
So let's get started.

00:06:26.860 --> 00:06:28.090
Let's get started.

00:06:28.350 --> 00:06:29.290
What is 64-bit?

00:06:29.330 --> 00:06:34.000
Well, at the low machine level,
64-bit means that the number

00:06:34.000 --> 00:06:37.990
of bits that your processor has
to address memory has doubled.

00:06:37.990 --> 00:06:40.250
It's gone from 32-bit to 64-bit.

00:06:40.280 --> 00:06:42.190
But you guys write Java code.

00:06:42.230 --> 00:06:44.140
So what does it mean for you?

00:06:44.140 --> 00:06:47.020
Java doesn't expose
your native C pointers,

00:06:47.230 --> 00:06:49.730
and the Java code is pointer agnostic.

00:06:49.740 --> 00:06:53.590
So your transition to 64-bit
should pretty much be done.

00:06:53.590 --> 00:06:56.420
Your pure Java code
should need no changes.

00:06:56.860 --> 00:06:59.020
I mean, the Java class file is,
in a sense,

00:06:59.100 --> 00:07:02.200
the ultimate universal binary,
and that should just continue to

00:07:02.200 --> 00:07:03.800
run great when you move to 64-bit.

00:07:03.860 --> 00:07:07.060
But what can the Java code do now?

00:07:07.100 --> 00:07:10.760
Well, for one,
since your process now has a

00:07:10.760 --> 00:07:14.150
huge virtual address space,
your Java heap size can

00:07:14.150 --> 00:07:15.100
just grow like crazy.

00:07:15.200 --> 00:07:23.110
I mean, you could go up to 127 terabytes
of heap in the 64-bit world.

00:07:23.110 --> 00:07:23.110
And some of the...

00:07:23.530 --> 00:07:26.600
Some of the things that you could do
once you have such a huge heap is you

00:07:26.600 --> 00:07:28.500
could cache whole databases in memory.

00:07:28.500 --> 00:07:32.640
You could allocate huge
memory-mapped NIO buffers,

00:07:32.640 --> 00:07:34.820
which will allow you
to do gene sequencing,

00:07:34.850 --> 00:07:35.980
image file processing.

00:07:35.980 --> 00:07:39.530
A variety of things are now
available to you in 64-bit.

00:07:41.030 --> 00:07:45.270
So I said before that
Java doesn't expose pointers,

00:07:45.270 --> 00:07:52.530
but really the Hotspot virtual
machine uses a 64-bit value to

00:07:52.530 --> 00:07:54.910
store your Java object reference.

00:07:54.920 --> 00:07:58.280
So what that means is the size
of your Java objects will now

00:07:58.280 --> 00:08:00.720
increase when you move to 64-bit.

00:08:00.740 --> 00:08:05.060
We don't expect that they'll just
double because you have your basic data

00:08:05.140 --> 00:08:07.550
types like ints and longs and bools.

00:08:08.100 --> 00:08:10.530
But on average,
we think about a 30% increase in

00:08:10.580 --> 00:08:14.350
size of your Java objects when
you move from 32-bit to 64-bit.

00:08:14.360 --> 00:08:18.810
And what that means for you is if
you have ever in the past added

00:08:19.400 --> 00:08:23.580
flags to set the minimum and
maximum size of your Java heap,

00:08:23.650 --> 00:08:28.230
then you would need to go back
and remeasure the amount of heap

00:08:28.230 --> 00:08:33.260
that your application is using and
update these XMS and XMX flags.

00:08:33.280 --> 00:08:39.400
And, you know, once again, you know,
maintain good memory behavior.

00:08:39.440 --> 00:08:42.950
Just don't increase it to 127
terabytes just because you can.

00:08:42.980 --> 00:08:45.020
You know,
your machine will start trashing and your

00:08:45.130 --> 00:08:47.150
performance will just go down the hill.

00:08:47.160 --> 00:08:51.320
So continue to use the smallest
Java heap that you need.

00:08:53.480 --> 00:08:57.820
The direct impact of having such
a huge heap and allocating so many

00:08:57.820 --> 00:09:02.480
more objects is that your garbage
collection times will now increase.

00:09:02.480 --> 00:09:05.870
So expect that if you're
allocating a lot more heap space,

00:09:05.970 --> 00:09:08.400
your GC will take a longer time to run.

00:09:08.420 --> 00:09:10.330
But there's a workaround for that.

00:09:10.370 --> 00:09:14.280
We have in Java alternative
garbage collectors available.

00:09:14.280 --> 00:09:17.780
We have the concurrent mark and sweep and
the parallel garbage collector available.

00:09:17.780 --> 00:09:22.360
Take those out for a spin and you
should see a reduced GC pos times.

00:09:23.400 --> 00:09:26.480
So we talk about speed.

00:09:26.820 --> 00:09:27.940
We talk about the memory.

00:09:27.940 --> 00:09:29.040
Now, let's go over to speed.

00:09:29.040 --> 00:09:32.060
What happens to the speed of your
application when you move to 64-bit?

00:09:32.080 --> 00:09:36.150
Well, another key thing that doubles
when you move from 32 to 64

00:09:36.240 --> 00:09:37.900
is the number of registers.

00:09:37.900 --> 00:09:42.410
The number of registers in 64-bit is
twice as much as the ones in 32-bit.

00:09:42.420 --> 00:09:46.630
And what that means is the Hotspot
virtual machine that's running

00:09:46.750 --> 00:09:50.800
your code can now cache more of
your variables into registers,

00:09:50.800 --> 00:09:54.320
and that improves the speed
of your Java application.

00:09:55.120 --> 00:09:59.050
The other key thing that
changes when you move to,

00:09:59.520 --> 00:10:03.360
The other key thing that changes when
you move to 64-bit is the hotspot

00:10:03.460 --> 00:10:06.180
compiler changes from underneath you.

00:10:06.180 --> 00:10:09.500
In 32-bit, the default compiler
is the client compiler.

00:10:09.500 --> 00:10:12.760
When you move to 64-bit,
the server compiler becomes the default.

00:10:12.760 --> 00:10:16.840
The hotspot server compiler is
a highly optimizing compiler.

00:10:16.840 --> 00:10:19.550
It has vastly improved code generation.

00:10:19.560 --> 00:10:22.900
So as a result,
your code should just get faster.

00:10:22.900 --> 00:10:24.190
So let's check it out.

00:10:24.200 --> 00:10:28.740
We looked at a popular JVM benchmark.

00:10:29.180 --> 00:10:32.760
And when we compared the default
32-bit to the default 64-bit,

00:10:32.780 --> 00:10:35.200
we saw around a 35% increase in speed.

00:10:35.200 --> 00:10:36.720
You know, code just got faster.

00:10:36.720 --> 00:10:40.120
When we dug deeper into, say, SciMark,
another popular benchmark,

00:10:40.120 --> 00:10:45.300
we saw that the 64-bit VM performed
about 61% faster than the 32-bit one.

00:10:45.300 --> 00:10:48.570
You know, your app may vary,
so please measure and see

00:10:48.580 --> 00:10:50.780
how your app does in 64-bit.

00:10:50.780 --> 00:10:52.900
But we expect that things
should just get faster.

00:10:55.480 --> 00:10:59.280
So this was what 64-bit
means and what it is.

00:10:59.320 --> 00:11:03.540
Let's take a look at 64-bit in the
two OSs that you have in your hands.

00:11:03.650 --> 00:11:06.380
So let's take a look at Mac OS X Leopard.

00:11:06.380 --> 00:11:09.360
As you know, last October,
we shipped Mac OS X Leopard

00:11:09.560 --> 00:11:11.660
with complete 64-bit support.

00:11:11.700 --> 00:11:15.680
What that meant is all of our tools
and frameworks were 64-bit ready.

00:11:15.730 --> 00:11:20.320
And Java being just another framework,
and Java being a core

00:11:20.320 --> 00:11:24.950
framework of Mac OS X,
we shipped it with Intel 64-bit support.

00:11:25.050 --> 00:11:28.690
We had Java SE5 available
for Intel 64-bit,

00:11:28.820 --> 00:11:34.180
and earlier this spring,
we also shipped Java 6 with Intel 64-bit.

00:11:34.220 --> 00:11:36.730
But the key thing to remember
on Leopard is that all your

00:11:36.730 --> 00:11:38.870
apps run in 32-bit by default.

00:11:39.000 --> 00:11:44.220
And what that means is that
32-bit Java SE5 is the default

00:11:44.220 --> 00:11:46.400
VM on Mac OS X Leopard.

00:11:46.980 --> 00:11:51.000
When we move to the Snow Leopard
developer preview DVD that you got

00:11:51.000 --> 00:11:54.470
in your hands yesterday or today,
all of our tools and frameworks

00:11:54.480 --> 00:11:56.240
are still 64-bit ready.

00:11:56.240 --> 00:11:57.420
You know, they're just better now.

00:11:57.440 --> 00:12:00.740
You know, more bug fixes have gone in,
and they work even better.

00:12:00.740 --> 00:12:05.670
The Java that's on that DVD is Java 6,
and we have Intel 64-bit and

00:12:05.670 --> 00:12:08.600
Intel 32-bit support in Java 6.

00:12:08.960 --> 00:12:12.680
But the key thing to remember,
the key difference for Snow Leopard is

00:12:12.720 --> 00:12:17.680
that apps will run in 64-bit by default,
which means that...

00:12:18.210 --> 00:12:23.100
64-bit Java SA6 is the default Java for
Snow Leopard on capable hardware,

00:12:23.130 --> 00:12:24.020
of course.

00:12:24.020 --> 00:12:30.970
So I said before that your pure Java app
should just run great in 64-bit.

00:12:31.300 --> 00:12:35.180
Well, what if your Java app diagram
looks something like this?

00:12:35.180 --> 00:12:38.960
What if your Java app had a
JNI library that it communicated to,

00:12:38.960 --> 00:12:40.510
which communicates directly to the OS?

00:12:40.580 --> 00:12:43.080
When we switch the
VM from underneath you,

00:12:43.080 --> 00:12:45.500
you'll start getting an
unsatisfied link error,

00:12:45.500 --> 00:12:48.790
and that is because your library
doesn't have a 64-bit component to it.

00:12:48.800 --> 00:12:53.840
So you need to recompile your library
to be a universal JNI library.

00:12:53.840 --> 00:12:57.540
You need to add the Intel 64-bit
support to your JNI code.

00:12:57.580 --> 00:13:02.100
And the way you do that
is you open up Xcode,

00:13:02.100 --> 00:13:04.140
you take a look at your
JNI library target,

00:13:04.140 --> 00:13:06.980
you do a get info on
that JNI library target,

00:13:06.980 --> 00:13:09.640
and you checkmark the 64-bit box.

00:13:09.640 --> 00:13:13.100
And Xcode will compile your
library for 64-bit support.

00:13:13.100 --> 00:13:16.160
What Xcode is doing,
under the covers for you,

00:13:16.160 --> 00:13:21.640
is it is adding a dash arch x86-64
flag to the GCC command line.

00:13:21.850 --> 00:13:25.400
And this is what you have to do if
you're not using Xcode and you're

00:13:25.400 --> 00:13:28.780
compiling it on the command line
using a make file or any other means.

00:13:28.780 --> 00:13:35.230
You need to add the dash arch x86-64
flag to your GCC command line.

00:13:35.300 --> 00:13:36.490
All right.

00:13:37.160 --> 00:13:40.760
So, you know, you develop your app,
you've got it all running, you test it,

00:13:40.760 --> 00:13:41.900
you make sure it all runs great.

00:13:41.950 --> 00:13:43.240
Now you want to deploy it.

00:13:43.350 --> 00:13:44.390
So let's take a look at that.

00:13:48.120 --> 00:13:50.840
One important thing is,
on Leopard and Snow Leopard,

00:13:50.840 --> 00:13:54.740
the Java Preferences app that
we ship impacts the version of

00:13:54.860 --> 00:13:56.600
Java that gets used to run your app.

00:13:56.660 --> 00:14:00.890
What that means is,
any user may select or may choose the

00:14:00.890 --> 00:14:04.250
64-bit JVM to be their preferred JVM.

00:14:04.280 --> 00:14:09.040
And that means that your app might start
running in 64-bit without you knowing it.

00:14:09.060 --> 00:14:12.730
So if you need to override it,
normally this should just work great,

00:14:12.850 --> 00:14:15.470
but in case you need to override
this and you need to tie yourself

00:14:15.600 --> 00:14:19.050
to a specific architecture,
you need to ensure that you pass

00:14:19.060 --> 00:14:23.730
the dash D32 or the dash D64 flags
to your Java application so that

00:14:23.730 --> 00:14:25.240
it runs in the mode that you want.

00:14:29.480 --> 00:14:34.190
If you're a bundled application
on the Mac and you want to

00:14:34.190 --> 00:14:40.150
prefer a particular architecture,
you need to add the JVM Arches key

00:14:40.180 --> 00:14:43.920
to your Info.plist that's sitting
in your bundled application,

00:14:43.920 --> 00:14:46.660
and you need to specify the
architectures that you prefer.

00:14:46.660 --> 00:14:51.790
So here's an example of a great app
that prefers the Intel 64-bit version of

00:14:51.790 --> 00:14:55.060
the VM in preference to the 32-bit one.

00:14:55.060 --> 00:14:59.410
And if you don't need or if
you want to run in 32-bit only,

00:14:59.440 --> 00:15:05.360
then you can get rid of the
x86-64 from the JVM Arches field.

00:15:05.620 --> 00:15:09.340
Another popular way to deploy
applications is JNLPs or Java Web Start.

00:15:09.380 --> 00:15:12.700
And if you want to run in
64-bit using Java Web Start,

00:15:12.700 --> 00:15:16.740
then you need to pass the dashed
D64 argument in your JNLP file,

00:15:16.740 --> 00:15:19.760
in the Java VM arcs
field in your JNLP file.

00:15:21.120 --> 00:15:26.280
A fourth way of deploying
applications is applets.

00:15:26.740 --> 00:15:29.250
Currently, you know,
Ken will have more to say about this,

00:15:29.250 --> 00:15:32.360
but currently, as things stand right now
in Leopard and Snow Leopard,

00:15:32.360 --> 00:15:35.040
applets run in the address
space of the browser.

00:15:35.040 --> 00:15:38.030
And what that means is,
if you want to run a 64-bit Java applet,

00:15:38.030 --> 00:15:40.220
you could run it in any 64-bit browser.

00:15:40.220 --> 00:15:42.810
The problem, of course,
is there are no 64-bit

00:15:42.810 --> 00:15:44.080
browsers right now.

00:15:44.120 --> 00:15:50.750
So, if you want to test this on Leopard,
you need to build your own example code.

00:15:50.860 --> 00:15:55.110
You need to build your own mini-browser,
and the example code for that is in

00:15:55.260 --> 00:15:57.390
slash developer examples web kit.

00:15:57.440 --> 00:16:01.260
You need to build it for 64-bit,
and then you should be able to test

00:16:01.410 --> 00:16:03.340
your applets on Mac OS X Leopard.

00:16:03.340 --> 00:16:07.300
When we move to Snow Leopard, though,
the story is better.

00:16:07.300 --> 00:16:10.640
We've got Safari that's
Intel 64-bit capable.

00:16:10.640 --> 00:16:13.650
Not by default,
but it still can run in 64-bit.

00:16:13.680 --> 00:16:17.960
And if you want to run it in 64-bit,
you need to do a get info on the

00:16:18.080 --> 00:16:20.710
Safari app icon and uncheck that.

00:16:20.820 --> 00:16:22.320
Open in 32-bit mode flag.

00:16:22.340 --> 00:16:25.450
Once you do that,
Safari will start launching in 64-bit,

00:16:25.470 --> 00:16:27.900
and you should be able to
test your applets with it.

00:16:30.360 --> 00:16:34.610
So going over deployment again,
if you're a pure Java app,

00:16:34.720 --> 00:16:35.350
your work is done.

00:16:35.370 --> 00:16:36.360
You don't have to do anything.

00:16:36.360 --> 00:16:39.140
If you've got native code,
please recompile.

00:16:39.140 --> 00:16:43.160
Add the Intel 64-bit slice
to your JNI libraries.

00:16:46.600 --> 00:16:50.330
64-bit is here,
and we believe that your Java app

00:16:50.330 --> 00:16:52.320
should work great in 64-bit.

00:16:52.550 --> 00:16:54.060
You shouldn't have to do anything.

00:16:54.110 --> 00:16:57.000
You should just continue
running in 32-bit or 64-bit,

00:16:57.000 --> 00:16:59.580
irrespective of what the user chooses.

00:16:59.580 --> 00:17:03.940
Leopard defaults to 32-bit,
and Snow Leopard defaults,

00:17:03.960 --> 00:17:08.550
the Snow Leopard preview DVD that you
have right now defaults to 64-bit.

00:17:10.400 --> 00:17:14.410
and only if your app really requires it,
only if you really need to use a specific

00:17:14.460 --> 00:17:18.960
architecture should you use the -t32
or the -t64 flags or set a preferred

00:17:18.960 --> 00:17:21.400
architecture in your Info.plist file.

00:17:21.400 --> 00:17:23.400
And if I haven't said
this enough already,

00:17:23.400 --> 00:17:27.400
please recompile your
JNI libraries to be universal.

00:17:27.400 --> 00:17:30.400
Please add the Intel 64-bit slice to it.

00:17:30.520 --> 00:17:34.610
So speaking of making your
native code universal,

00:17:34.610 --> 00:17:36.980
I'd like to invite on
stage Scott Kovatch,

00:17:36.980 --> 00:17:42.400
who's going to talk about Eclipse
and the SWT and their move to 64-bit.

00:17:42.450 --> 00:17:43.610
Thanks.

00:17:46.400 --> 00:17:48.160
Thank you.

00:17:48.160 --> 00:17:50.650
So for those of you who were
here last year and are thinking,

00:17:50.720 --> 00:17:52.720
something's different about him,
you're right.

00:17:52.730 --> 00:17:53.600
I'm not on crutches.

00:17:53.600 --> 00:17:54.560
Right?

00:17:54.560 --> 00:17:55.660
Thanks.

00:17:57.640 --> 00:18:02.440
So I'm here today, actually not really as
an employee of Adobe,

00:18:02.440 --> 00:18:04.500
but I'm speaking more
on behalf of Eclipse.

00:18:04.500 --> 00:18:10.180
I'm currently a committer
in the SWT project,

00:18:10.180 --> 00:18:15.460
and today what I want to talk
to you about is what Adobe cares

00:18:15.820 --> 00:18:19.690
about Eclipse and what Eclipse
cares about for the Mac platform.

00:18:19.700 --> 00:18:22.260
So we'll get started.

00:18:22.260 --> 00:18:25.000
I think everybody in this
room knows about Eclipse.app.

00:18:25.570 --> 00:18:27.460
I think we all know that
it's a great Java IDE.

00:18:27.460 --> 00:18:30.940
I think you probably also know
that it's a great platform for

00:18:31.140 --> 00:18:33.440
building a rich client application.

00:18:33.440 --> 00:18:38.010
Eclipse has plenty of infrastructure
to let you manage resources

00:18:38.060 --> 00:18:40.140
within your application.

00:18:40.140 --> 00:18:43.540
It has the SWT and JFase
for user interface.

00:18:43.540 --> 00:18:48.170
It's also got a number of other
facilities for dynamically

00:18:48.170 --> 00:18:53.250
loading in plugins as needed
for your particular situation.

00:18:55.630 --> 00:18:58.590
Eclipse is also a great framework
for building an IDE for any

00:18:58.590 --> 00:19:00.400
language you can think of.

00:19:00.400 --> 00:19:03.840
I mean, there's projects out
there for Python and Ruby.

00:19:03.840 --> 00:19:07.040
There's a very active C community.

00:19:07.060 --> 00:19:10.340
But the one I want to talk to you
about briefly is ActionScript,

00:19:10.360 --> 00:19:13.580
which is the foundation of Flax.

00:19:13.780 --> 00:19:18.700
which is Adobe's user interface
solution for enterprise development.

00:19:18.700 --> 00:19:25.330
What you can do in Eclipse is you
can build in all the support for the

00:19:25.400 --> 00:19:30.290
syntax highlighting for your language,
support for external compilers.

00:19:30.410 --> 00:19:34.460
For Flex, that means we call out to
the Flex SDK compilers.

00:19:34.460 --> 00:19:42.170
And also provides you with some
framework for doing GUI layout.

00:19:42.520 --> 00:19:43.780
And just very quickly,
I want to show you some

00:19:43.860 --> 00:19:48.240
screenshots of... I'm sorry,
jumped ahead of myself here.

00:19:48.290 --> 00:19:51.950
But first of all,
Adobe took advantage of all of this and

00:19:51.950 --> 00:19:54.470
produced a product called FlexBuilder.

00:19:54.550 --> 00:19:57.980
And this is an IDE that
we came up with for Flex,

00:19:57.980 --> 00:20:00.950
and it's all based on
the Eclipse toolset.

00:20:01.150 --> 00:20:06.010
The first version that really gained
a lot of traction and was really

00:20:06.320 --> 00:20:10.020
made heavily use of the current
release of Eclipse was FlexBuilder 2,

00:20:10.020 --> 00:20:11.500
which came out two years ago.

00:20:11.500 --> 00:20:17.800
And that was the first IDE that targeted
version 2 of Flex and ActionScript 3.

00:20:17.800 --> 00:20:20.750
And if you have some time,
you might want to look into

00:20:20.750 --> 00:20:24.430
ActionScript 3 and see why it
fits in so well with Eclipse.

00:20:25.360 --> 00:20:28.380
But earlier this year,
FlexBuilder 3 came out,

00:20:28.380 --> 00:20:32.030
and that now targets
Flex version 3 as well,

00:20:32.030 --> 00:20:36.280
which is what I'm going to show
you here in these next slides.

00:20:38.650 --> 00:20:43.040
So here you see we've got
some ActionScript code up

00:20:43.040 --> 00:20:44.040
in the top right window.

00:20:44.040 --> 00:20:47.400
And as you can see,
this is Eclipse running on a Mac.

00:20:47.430 --> 00:20:50.940
And I should say that this is Eclipse
3.4 with a not-quite-yet-released

00:20:50.940 --> 00:20:52.920
version of FlexBuilder.

00:20:52.940 --> 00:20:58.080
But as you can see,
there's not a whole lot of difference.

00:20:58.250 --> 00:21:02.340
It doesn't really change
how it fits into Eclipse.

00:21:02.370 --> 00:21:05.510
But as you can see up on the top left,
we've got a collection of code,

00:21:05.540 --> 00:21:08.240
the standard Eclipse project layout.

00:21:08.240 --> 00:21:12.200
Down here we have an outline
view on the bottom left,

00:21:12.200 --> 00:21:16.420
and up in the code you can see how
we've highlighted the syntax of the

00:21:16.540 --> 00:21:18.680
keywords of the ActionScript language.

00:21:20.280 --> 00:21:24.250
And this takes some work,
but if you're working on implementing

00:21:24.250 --> 00:21:29.360
your own language support,
everything's there for you to do it.

00:21:30.560 --> 00:21:35.660
Next,
we have the Flex layout design view.

00:21:35.690 --> 00:21:38.880
And I've taken this shot from one
of the Flex sample applications,

00:21:38.920 --> 00:21:44.580
but on the right, you see a collection of
property editors specific to

00:21:44.580 --> 00:21:47.570
the component that's selected.

00:21:47.700 --> 00:21:51.420
You know, all of this is done in
Eclipse and with the SWT.

00:21:51.440 --> 00:21:55.160
And you see some of the collection
of widgets you can use in

00:21:55.280 --> 00:21:57.690
Flex to build your application.

00:21:58.160 --> 00:22:01.720
And last of all, script debugging.

00:22:01.930 --> 00:22:05.740
The debugger infrastructure in
Eclipse is fully extensible,

00:22:05.800 --> 00:22:09.400
and we've written our own debugger
that works with the debugging version

00:22:09.400 --> 00:22:16.970
of the Flash Player to debug your
ActionScript-based applications.

00:22:17.710 --> 00:22:19.440
All right,
so all this is great and wonderful.

00:22:19.480 --> 00:22:24.440
And you're thinking, okay,
he just gave me a commercial

00:22:24.440 --> 00:22:27.340
for Flex and FlexBuilder.

00:22:27.370 --> 00:22:31.100
But I'm actually telling you
these things for a reason.

00:22:31.670 --> 00:22:34.120
What's this got to do
with the 64-bit world?

00:22:34.360 --> 00:22:37.500
Well, everything you saw on the
screen is written in the SWT,

00:22:37.500 --> 00:22:41.240
and the SWT is currently
written to the Carbon API set.

00:22:41.280 --> 00:22:46.380
As you've heard this week,
and as you're going to continue to hear,

00:22:46.380 --> 00:22:54.680
there is no Carbon support for the
visual portions of the SWT in OS X.

00:22:56.350 --> 00:23:01.500
and That's currently true on Leopard
and it's true on Snow Leopard as well.

00:23:01.500 --> 00:23:06.580
Now it's great that there's a 32-bit
VM now for Intel on Snow Leopard.

00:23:06.580 --> 00:23:10.230
So that means that you can run
Eclipse today right out of the box

00:23:10.240 --> 00:23:12.780
on the Snow Leopard that you got.

00:23:12.780 --> 00:23:14.920
Doesn't help you on Leopard yet.

00:23:16.800 --> 00:23:23.130
and there's just no
other way to describe it.

00:23:23.130 --> 00:23:23.130
And he's carrying a
32-bit briefcase of fail.

00:23:24.920 --> 00:23:27.150
So where does Adobe fit in all this?

00:23:27.230 --> 00:23:32.730
Well, as you can see,

00:23:33.020 --> 00:23:37.050
I think you can see that we consider
the Mac platform really important

00:23:37.150 --> 00:23:42.470
to the future of FlexBuilder and to
the future of our development tools.

00:23:43.230 --> 00:23:47.400
and we have made Eclipse a key
part of our product strategy.

00:23:47.430 --> 00:23:50.060
There's FlexBuilder,
there are some other additional

00:23:50.160 --> 00:23:54.320
products coming down the pike
that will also be Eclipse-based.

00:23:54.380 --> 00:23:58.910
So this is really, you know,
a very clear part of what's important to

00:23:58.910 --> 00:24:01.850
Adobe for its customers down the road.

00:24:01.970 --> 00:24:06.790
And, okay, great, you know,
Adobe uses Eclipse, so what?

00:24:06.820 --> 00:24:08.810
Well, how are we going to prove that?

00:24:09.360 --> 00:24:12.300
Well, as you've heard earlier,
there's an SWT port to

00:24:12.310 --> 00:24:13.660
Cocoa going on right now.

00:24:13.660 --> 00:24:20.400
The IBM engineers working on the
SWT came out to Apple last fall

00:24:20.400 --> 00:24:21.780
and really got things going.

00:24:21.780 --> 00:24:24.560
They made a decent amount of progress.

00:24:24.580 --> 00:24:29.150
There's a lot of nice demos you
can take a look at and see what

00:24:29.150 --> 00:24:30.600
progress has been going on.

00:24:30.660 --> 00:24:33.820
But, you know,
it needs a little momentum.

00:24:33.820 --> 00:24:37.990
You know, the more people start
working with it and using it,

00:24:37.990 --> 00:24:40.070
the better it is for the project.

00:24:40.080 --> 00:24:43.350
So I'm here to say that Adobe is going
to give this product some momentum.

00:24:43.360 --> 00:24:47.380
We're going to actively contribute
to the port of the SWT on Cocoa.

00:24:47.400 --> 00:24:49.920
We're going to dedicate
at least two engineers,

00:24:49.920 --> 00:24:50.910
possibly more.

00:24:53.960 --> 00:24:56.730
And because this is open source,
you know, the best I can say right now is

00:24:56.790 --> 00:24:59.330
we will contribute to the port,
but our ultimate goal is to

00:24:59.330 --> 00:25:01.160
actually lead the effort,
right?

00:25:01.160 --> 00:25:04.870
My main job for the next six months
will be actually actively working

00:25:04.870 --> 00:25:06.740
on this and keeping it moving.

00:25:06.740 --> 00:25:12.380
We're also going to have, as I said,
other Adobe engineers who will be

00:25:12.380 --> 00:25:18.200
working out on and actually using what
we build for the SWT in Adobe products.

00:25:20.210 --> 00:25:24.070
So, that's sort of our big
announcement for this week,

00:25:24.070 --> 00:25:27.900
and unlike just about
everything else you've heard,

00:25:28.110 --> 00:25:31.920
As far as the future of Java,
which is NDA, this is not NDA,

00:25:31.970 --> 00:25:33.140
this is public.

00:25:33.180 --> 00:25:37.300
We're gonna announce it on
the Eclipse mailing list,

00:25:37.370 --> 00:25:41.060
things like that,
and feel free to let other people

00:25:41.130 --> 00:25:43.330
know that that's what's going on.

00:25:43.530 --> 00:25:46.770
So, if you want to get involved,
what's going on so far?

00:25:46.780 --> 00:25:49.570
Now, this is just an announcement.

00:25:49.610 --> 00:25:51.760
It's not an actual please-go-download-it.

00:25:51.810 --> 00:25:54.210
Well, actually, you can download the code
and get things going.

00:25:54.220 --> 00:25:57.430
But, just to sort of tell you
where we are right now,

00:25:57.430 --> 00:25:58.980
we're really ramping up right now.

00:25:59.090 --> 00:26:04.030
I'm currently attached to some
other tasks at work right now,

00:26:04.110 --> 00:26:07.060
but we're going to really get things
going by the end of August of this year.

00:26:07.060 --> 00:26:11.520
The goal is to get this
in the Eclipse 3.5 stream.

00:26:12.080 --> 00:26:14.080
All this work will forward
to the Eclipse 4 stream,

00:26:14.080 --> 00:26:15.820
if you've been reading about Eclipse 4.

00:26:15.820 --> 00:26:21.130
And we've been pushing some new
features in Eclipse 4 SWT as well

00:26:21.130 --> 00:26:25.760
that you can read about them online,
but I think we're going to be able

00:26:25.760 --> 00:26:28.750
to make good use of them on the
Mac for Adobe products as well.

00:26:31.120 --> 00:26:32.600
We want people to help.

00:26:32.600 --> 00:26:35.140
We don't want this to be
an Adobe-IBM collaboration

00:26:35.140 --> 00:26:37.120
or an Adobe project.

00:26:37.390 --> 00:26:39.700
There's been some interest so far.

00:26:39.910 --> 00:26:43.610
Hopefully, if we get more momentum,
more people will sort of get on the

00:26:43.610 --> 00:26:47.510
train and come along and help out.

00:26:48.050 --> 00:26:51.950
So the way to do that is to start
by going to the URL that we showed

00:26:51.950 --> 00:26:54.570
you earlier about the CocoaPort.

00:26:54.720 --> 00:26:58.520
That's got all the information
of where we are so far,

00:26:58.580 --> 00:27:03.930
how to find bugs, how to fix bugs,
how to get involved that way.

00:27:04.850 --> 00:27:07.060
Important that you,
if this is important to you

00:27:07.060 --> 00:27:10.600
and you want to get involved,
join the platform SWT dev mailing list.

00:27:10.600 --> 00:27:13.340
That's where all the communication
is going to go on between

00:27:13.340 --> 00:27:19.620
Adobe engineers working on
this and people across companies.

00:27:19.640 --> 00:27:20.800
We're going to keep it
all out in the open.

00:27:22.300 --> 00:27:25.040
And of course, file and fix bugs.

00:27:25.080 --> 00:27:27.500
You'll be able to get the code yourself,
you'll be able to use the nightly

00:27:27.560 --> 00:27:31.790
builds and put it in your stuff,
and that's the best way things will

00:27:31.790 --> 00:27:34.780
get fixed and get taken care of.

00:27:34.810 --> 00:27:36.470
And with that,

00:27:37.140 --> 00:27:39.390
I'm going to talk to you a little
bit about how applets are going

00:27:39.390 --> 00:27:40.930
to move forward on Snow Leopard.

00:27:40.970 --> 00:27:43.290
I'm going to bring up
Ken Russell from Sun,

00:27:43.290 --> 00:27:45.700
and he's got some very cool
demos to show you here,

00:27:45.700 --> 00:27:49.700
as well as some other things as well.

00:27:56.010 --> 00:27:57.400
Hi, my name is Ken Russell.

00:27:57.400 --> 00:28:01.130
I work at Sun Microsystems,
and I'm here today to talk to

00:28:01.130 --> 00:28:04.710
you about the next-generation
Java plugin and what does this mean

00:28:04.710 --> 00:28:07.010
for Java deployment in the web browser.

00:28:07.020 --> 00:28:10.760
Over the last year at Sun,
we've been doing a ground-up

00:28:10.760 --> 00:28:12.900
rewrite of the Java plugin.

00:28:12.900 --> 00:28:16.380
This is the piece of software that
makes applets run in the web browser.

00:28:17.010 --> 00:28:20.180
There's one major architectural
change with this rewrite,

00:28:20.210 --> 00:28:24.320
and that is that the applets are actually
no longer executed in the same operating

00:28:24.320 --> 00:28:26.230
system process as the web browser.

00:28:26.280 --> 00:28:31.290
So on every platform,
the new Java plugin spawns

00:28:31.290 --> 00:28:36.370
one or more JVM instances,
and it's in those separate processes

00:28:36.490 --> 00:28:38.610
that the applets are actually run.

00:28:38.620 --> 00:28:42.460
They're not executed in an embedded
JVM inside the web browser anymore.

00:28:43.850 --> 00:28:47.590
From an architectural standpoint,
this is very similar to how

00:28:47.590 --> 00:28:50.160
Java Web Start technology works,
except, of course,

00:28:50.160 --> 00:28:52.880
that applets have a much
stronger tie to the web browser.

00:28:52.880 --> 00:28:56.560
And one point to make is that
multiple applets are still

00:28:56.560 --> 00:28:59.100
executed in the same JVM instance.

00:28:59.100 --> 00:29:01.780
So you have the same
sharing characteristics,

00:29:01.780 --> 00:29:05.130
the same footprint characteristics,
as you would with the

00:29:05.130 --> 00:29:06.630
previous Java plugin.

00:29:06.640 --> 00:29:07.940
There's just this separation.

00:29:07.940 --> 00:29:11.880
Now, why would we embark
on this major rewrite?

00:29:12.840 --> 00:29:15.590
One big point to make is
that the Java platform is a

00:29:15.590 --> 00:29:18.220
complex piece of software,
and the web browser is a

00:29:18.220 --> 00:29:19.450
complex piece of software.

00:29:19.460 --> 00:29:22.610
And when you wed them
together very tightly,

00:29:22.610 --> 00:29:26.920
you sometimes get second-order
effects that you don't expect

00:29:26.920 --> 00:29:28.940
in terms of reliability.

00:29:28.940 --> 00:29:32.180
So by very clearly defining
the interactions that

00:29:32.180 --> 00:29:36.310
Java and the web browser have,
we have achieved drastically improved

00:29:36.310 --> 00:29:40.070
reliability on all platforms for
Java deployments in the browser.

00:29:40.080 --> 00:29:41.880
Another point to make is that the
user experience is very important.

00:29:41.880 --> 00:29:44.300
to make is that the user
experience is improved.

00:29:44.310 --> 00:29:46.680
Applets are now launched
in the background.

00:29:46.680 --> 00:29:50.290
So your web page comes up,
your HTML content is rendering,

00:29:50.290 --> 00:29:53.130
and if your app takes a while
to load it just pops into

00:29:53.270 --> 00:29:54.550
place as soon as it's ready.

00:29:54.550 --> 00:29:59.820
The web page and scrolling and everything
is working just fine right off the bat.

00:29:59.820 --> 00:30:02.560
The Java JavaScript communication
has been improved,

00:30:02.560 --> 00:30:05.440
there are more features,
it is more portable,

00:30:05.570 --> 00:30:09.630
and the document object model support
in Java has also been improved.

00:30:09.750 --> 00:30:13.420
So you can very easily and powerfully
manipulate the web page that you're

00:30:13.440 --> 00:30:17.900
contained in from within your applet and
that now works reliably and portably.

00:30:17.900 --> 00:30:21.870
We've also improved the support
for web services by bringing in the

00:30:21.870 --> 00:30:26.760
cross-domain dot XML connection model
and this makes it very easy to access

00:30:26.760 --> 00:30:32.160
services like Flickr and Picasa and
others from within your Java applets.

00:30:32.160 --> 00:30:35.760
But the main reason that we did this
rewrite is the thesis that applets

00:30:35.760 --> 00:30:37.000
should be as powerful as applets.

00:30:37.000 --> 00:30:40.820
So we've also improved the support
for web applications and this

00:30:40.820 --> 00:30:43.120
sounds a lot like Java Web Start.

00:30:43.210 --> 00:30:47.620
So in the new Java plug-in you can
define an applet using a JNLP file which

00:30:47.620 --> 00:30:51.460
is the same descriptor that you use
when you write a Web Start application.

00:30:51.460 --> 00:30:52.720
This gives you a lot of advantages.

00:30:52.820 --> 00:30:56.310
Number one is that you have a
finer grained security model.

00:30:56.970 --> 00:31:02.000
You can on demand request things like
I want to print or maybe I want to

00:31:02.000 --> 00:31:05.430
store a little persistent data on the
disk and you don't have to go through

00:31:05.440 --> 00:31:06.980
the process of signing your applet.

00:31:06.980 --> 00:31:10.810
You also get support for the
Java Web Start APIs like the

00:31:10.810 --> 00:31:13.340
persistent service and others.

00:31:13.340 --> 00:31:16.310
Another major advantage is that
you can trivially use advanced

00:31:16.310 --> 00:31:20.660
extensions like for example
Java OpenGL bindings within your applets.

00:31:20.660 --> 00:31:23.440
So it's really easy to pull these
into Web Start applications.

00:31:23.440 --> 00:31:27.640
Now it's just as easy to pull them into
your applet content in the browser.

00:31:27.640 --> 00:31:31.080
You get really cool stuff
like per applet JVM arguments.

00:31:31.080 --> 00:31:33.810
So if you have a really sophisticated
applet you can say I need a

00:31:33.820 --> 00:31:35.300
bigger heap for just this applet.

00:31:35.490 --> 00:31:36.530
That will be honored.

00:31:36.570 --> 00:31:39.820
You can even request a
per applet JVM version.

00:31:39.820 --> 00:31:43.570
So if you're an enterprise customer
and you built your app using five

00:31:43.570 --> 00:31:48.920
updates something and you say well
just for understanding that I'm on the

00:31:48.920 --> 00:31:52.780
right platform I want that applet to
run with that version you can request

00:31:52.860 --> 00:31:54.940
this and the plugin will honor it.

00:31:54.940 --> 00:31:58.820
So this is how the integration occurs.

00:31:58.820 --> 00:32:03.230
You actually just use an applet parameter
to point off to the JNLP file and the

00:32:03.450 --> 00:32:06.900
new Java plugin recognizes that and
then it launches based on the JNLP file.

00:32:06.940 --> 00:32:06.940
So this is how the integration occurs.

00:32:06.940 --> 00:32:09.680
And this is roughly what it looks like.

00:32:09.690 --> 00:32:13.160
If you've written Web Start apps
this is no big surprise.

00:32:13.160 --> 00:32:15.230
So first you have the
information section.

00:32:15.380 --> 00:32:19.740
It gives your company and
title and stuff of your applet.

00:32:19.740 --> 00:32:22.020
Then there's the resources
section which describes the jar

00:32:22.020 --> 00:32:25.090
files that you use in your app,
the Java version that you want,

00:32:25.250 --> 00:32:28.440
any extensions like Joggle or something
that you might want to pull in.

00:32:28.520 --> 00:32:31.940
And finally this is how
you describe your applet.

00:32:31.940 --> 00:32:34.150
And if you were writing a
Web Start application you would

00:32:34.150 --> 00:32:36.920
use the application desk tag here.

00:32:36.920 --> 00:32:41.560
This is the JNLP spec because
we're writing an applet.

00:32:41.560 --> 00:32:46.430
Now I'd like to point out that we
actually have some very interesting

00:32:46.430 --> 00:32:49.060
stuff to show you today thanks
to a great collaboration with

00:32:49.060 --> 00:32:53.560
the Java and Safari teams at
Apple between them and Sun Microsystems.

00:32:53.560 --> 00:32:56.220
We have a prototype to show you.

00:32:56.220 --> 00:32:59.420
This is only a prototype.

00:32:59.420 --> 00:33:01.570
Let's go to the demo machine.

00:33:01.640 --> 00:33:05.140
But there's still some pretty interesting
characteristics to talk about.

00:33:05.300 --> 00:33:05.810
All right.

00:33:05.810 --> 00:33:06.900
So this is Leprechaun.

00:33:06.900 --> 00:33:08.740
This is actually not even Snow Leopard.

00:33:08.740 --> 00:33:13.440
This is Leopard and this
is a 32-bit Safari browser.

00:33:13.440 --> 00:33:17.970
So we can do something like
load up a little clock.

00:33:17.970 --> 00:33:17.970
Okay.

00:33:17.970 --> 00:33:17.970
Here's our clock.

00:33:18.210 --> 00:33:19.840
Not very exciting, okay?

00:33:19.840 --> 00:33:22.960
But what we can show is
that scrolling works.

00:33:22.960 --> 00:33:24.800
Clipping works.

00:33:24.800 --> 00:33:28.670
Okay, so if we occlude the applet, okay,
everything is working

00:33:28.880 --> 00:33:30.010
correctly as expected.

00:33:30.020 --> 00:33:30.920
Okay.

00:33:30.920 --> 00:33:35.330
One interesting point is
that this is actually running

00:33:35.330 --> 00:33:39.790
in a 64-bit JVM right now,
even though the browser is in 64-bit.

00:33:39.820 --> 00:33:43.100
And you get this advantage
because the applets are no longer

00:33:43.100 --> 00:33:46.810
executed in the same operating
system process as a web browser.

00:33:47.230 --> 00:33:50.660
So the browser side just
launches a 64-bit VM by default.

00:33:50.700 --> 00:33:54.070
So pow, instant 64-bit capability.

00:33:54.080 --> 00:33:57.690
Now, let's say that something
goes drastically wrong.

00:33:57.710 --> 00:33:59.300
And I don't like to advertise this.

00:33:59.300 --> 00:34:03.290
You know, we certainly don't like to say,
hey, this is really likely to happen.

00:34:03.300 --> 00:34:05.920
But on the off chance that
something goes really drastically

00:34:06.000 --> 00:34:08.480
wrong with your applet,
or maybe it pulled in a native

00:34:08.480 --> 00:34:11.230
code library that did something
bad and the JVM crashes,

00:34:11.230 --> 00:34:12.920
okay, let's see what happens.

00:34:13.060 --> 00:34:15.730
Okay, so we can actually mimic
this by simply doing.

00:34:17.070 --> 00:34:17.790
Kill all Java.

00:34:17.800 --> 00:34:19.390
Okay, so we do that.

00:34:19.420 --> 00:34:20.630
Now, what happens?

00:34:20.680 --> 00:34:24.790
The applet disappears,
and the web browser is unaffected.

00:34:24.860 --> 00:34:29.180
This is the major advantage of moving the
applet execution out of the web browser.

00:34:29.180 --> 00:34:33.230
Okay, and all we have to do
is reload the web page,

00:34:33.230 --> 00:34:35.620
and the applet comes back.

00:34:35.620 --> 00:34:38.230
Okay,
so now we have rock-solid guaranteed

00:34:38.230 --> 00:34:41.970
reliability of Java content
executing in the web browser.

00:34:48.900 --> 00:34:52.760
Okay, now let's see what kind of advanced
and really sophisticated content you

00:34:52.770 --> 00:34:54.210
can get with the new Java plugin.

00:34:54.220 --> 00:35:01.190
Okay, so this is the really fantastic
WorldWinds Java software developed

00:35:01.280 --> 00:35:03.040
by NASA Ames down in Mountain View.

00:35:03.040 --> 00:35:07.890
And you've probably seen this
before in some form or another.

00:35:07.900 --> 00:35:09.600
They've had this on their webpage.

00:35:09.600 --> 00:35:11.220
This is an open-source project.

00:35:11.220 --> 00:35:12.730
It's written in Java.

00:35:12.740 --> 00:35:15.790
It's pure Java,
and it provides you with just

00:35:15.790 --> 00:35:19.750
amazing Earth globe that you can
embed in your Java applications.

00:35:19.780 --> 00:35:20.400
Okay?

00:35:20.400 --> 00:35:25.080
What we're showing here is the
same software embedded as an applet

00:35:25.170 --> 00:35:28.130
on a webpage and showing you the
integration that you can get.

00:35:28.140 --> 00:35:30.510
You know,
this is really Web 3.0 kind of stuff.

00:35:30.560 --> 00:35:30.940
Okay?

00:35:30.940 --> 00:35:34.870
Now, what we have is some text
from Wikipedia describing the

00:35:35.100 --> 00:35:37.380
Pacific Cascades mountain range.

00:35:37.380 --> 00:35:43.580
And the HTML links that are on this page
are actually little JavaScript callbacks.

00:35:43.580 --> 00:35:44.640
So let's see what happens.

00:35:44.740 --> 00:35:47.360
We can go here and click Mount Rainier,
for example.

00:35:53.120 --> 00:35:56.940
The software navigates over
and shows you where that is.

00:35:56.940 --> 00:35:59.560
You can go to Mount St.

00:35:59.560 --> 00:35:59.560
Helens.

00:36:03.800 --> 00:36:09.600
[Transcript missing]

00:36:10.610 --> 00:36:14.120
All right, this is fully portable.

00:36:14.130 --> 00:36:17.640
Okay, no longer are you constrained
to one particular platform if

00:36:17.640 --> 00:36:21.650
you wanna get virtual earth
capabilities in your webpage.

00:36:21.790 --> 00:36:24.280
This already works on
every other major platform,

00:36:24.280 --> 00:36:27.330
and now we're proud, really proud,
to be able to show you this

00:36:27.340 --> 00:36:31.520
running seamlessly and with
full performance on Mac OS X.

00:36:37.400 --> 00:36:39.700
Okay, let's take a look at another demo.

00:36:39.700 --> 00:36:43.640
A few years ago,
a bunch of really crazy guys in

00:36:43.640 --> 00:36:49.480
Germany took the GPL Quake 2 source
code that was on id Software's

00:36:49.620 --> 00:36:53.940
website and they ported it to Java.

00:36:53.940 --> 00:36:55.580
All right, actually, hang on.

00:36:55.580 --> 00:36:59.860
I think I need to change
the video size here.

00:37:06.200 --> 00:37:09.750
So these guys took this, like,
I don't know, 60,000,

00:37:09.750 --> 00:37:11.790
70,000 lines of C code,
and they transliterated

00:37:11.800 --> 00:37:12.780
it from C to Java.

00:37:12.800 --> 00:37:16.750
And so why did they do this?

00:37:16.750 --> 00:37:17.940
Because they love Java.

00:37:17.940 --> 00:37:19.440
They wanted to see what they could do.

00:37:19.440 --> 00:37:22.880
This is using the Java OpenGL binding,
just, by the way,

00:37:22.880 --> 00:37:25.260
as the NASA WorldWinds software is.

00:37:25.260 --> 00:37:29.610
So the Quake 2 thing is pure Java, okay,
sitting on top of the

00:37:29.610 --> 00:37:31.360
OpenGL Java binding.

00:37:32.990 --> 00:37:36.330
And for a long time, for several years,
they've actually been able to run

00:37:36.520 --> 00:37:40.200
this by going to their web page,
clicking a Java Web Start launch link,

00:37:40.250 --> 00:37:41.150
and then the game is running.

00:37:41.160 --> 00:37:42.150
It's running on your machine.

00:37:42.160 --> 00:37:44.120
There's no software
installation of any kind.

00:37:44.140 --> 00:37:46.010
All you have to do is
have Java on your machine,

00:37:46.010 --> 00:37:48.190
and then you click the link,
and the program runs.

00:37:48.280 --> 00:37:51.170
Now, note the user experience
that we just had.

00:37:51.220 --> 00:37:53.500
We just navigated to this web page,
right?

00:37:53.500 --> 00:37:55.560
I'll reload it, okay?

00:37:55.560 --> 00:37:57.540
So we just navigated to the web page.

00:37:57.540 --> 00:37:59.280
You see, like,
a little spinner for a second.

00:37:59.280 --> 00:38:02.840
Now, this could be cleaner,
but that's sort of in the... Oh,

00:38:02.840 --> 00:38:04.880
got to change the video mode again.

00:38:04.900 --> 00:38:05.110
Sorry.

00:38:05.120 --> 00:38:08.890
I didn't save it before I...

00:38:13.500 --> 00:38:19.900
[Transcript missing]

00:38:22.570 --> 00:38:27.040
The model loader is a
little flaky in this thing.

00:38:28.600 --> 00:38:30.400
All right, there we go.

00:38:30.400 --> 00:38:32.790
Okay, so note again the user experience.

00:38:32.850 --> 00:38:35.360
You go to the web page
and the game is running.

00:38:35.360 --> 00:38:37.630
There's no software
installation of any kind.

00:38:37.660 --> 00:38:41.090
You just have to have Java and the
new Java plugin on your machine,

00:38:41.090 --> 00:38:45.080
and then you go to the web page and you
can get a fully hardware accelerated

00:38:45.080 --> 00:38:48.630
OpenGL game running in the web browser,
all right?

00:38:48.690 --> 00:38:53.400
This is, in my opinion,
the future of internet game distribution.

00:38:53.440 --> 00:38:57.560
Web browser-based, full speed,
and just go there and it runs.

00:38:57.560 --> 00:39:01.060
Now, there's one interesting
thing to point out,

00:39:01.070 --> 00:39:06.230
which is that some slight adjustment
of the source code was needed in order

00:39:06.230 --> 00:39:09.960
to make this thing run effectively,
and I didn't do a very good job with it.

00:39:09.960 --> 00:39:14.780
I actually did that work, and basically,
this game is still rendering

00:39:14.780 --> 00:39:17.710
typically when it exits,
and so it's doing like

00:39:17.710 --> 00:39:20.940
OpenGL to the screen as the
web browser is tearing it down.

00:39:20.940 --> 00:39:24.080
So it pretty much crashes
the JVM every time it exits.

00:39:24.080 --> 00:39:28.310
And you would never notice,
because the new Java plugin

00:39:28.360 --> 00:39:31.070
allows you to say specifically,
I want my applet to be

00:39:31.120 --> 00:39:33.500
completely walled off,
be in a completely separate

00:39:33.540 --> 00:39:36.820
JVM instance from every other one,
and that's honored,

00:39:36.830 --> 00:39:40.760
and then you just don't see
any adverse side effects.

00:39:40.760 --> 00:39:45.180
So you really can embed full power
desktop applications into the web

00:39:45.180 --> 00:39:47.700
browser using Java technology.

00:39:48.050 --> 00:39:53.060
Okay, I'm late already,
so let me do this last demo very quickly.

00:39:53.060 --> 00:39:56.160
This is some of the latest
leading-edge content.

00:39:56.160 --> 00:39:59.790
These are some applets built
using the new JavaFX technology.

00:39:59.830 --> 00:40:02.170
And you may have heard about
this initiative from Sun,

00:40:02.170 --> 00:40:06.880
but we're trying to make it really
much easier to develop rich graphical

00:40:06.880 --> 00:40:08.700
content using the Java platform.

00:40:09.660 --> 00:40:12.880
So these applets are
written not using Java,

00:40:13.020 --> 00:40:17.120
but JavaFX, JavaFX script,
which is a declarative language that

00:40:17.120 --> 00:40:20.880
makes it much more terse to write
really advanced visual effects.

00:40:20.930 --> 00:40:23.040
So here's a stopwatch, okay?

00:40:23.040 --> 00:40:25.880
It's got really nifty, whizzy effects.

00:40:25.910 --> 00:40:28.640
It's got, like,
drop shadow on the main hand there.

00:40:28.640 --> 00:40:32.000
It's got, you know,
drop shadows inside the numbers here.

00:40:32.000 --> 00:40:35.340
Nice gradient-based glints
and stuff like this.

00:40:35.340 --> 00:40:35.650
All right.

00:40:35.700 --> 00:40:37.140
So this is very cool.

00:40:37.140 --> 00:40:39.090
And it's actually full vector graphics.

00:40:39.240 --> 00:40:41.030
So if you scaled this
thing up to full screen,

00:40:41.030 --> 00:40:43.940
you would see the same visual fidelity
as you do inside the web page.

00:40:43.940 --> 00:40:44.620
Okay?

00:40:44.620 --> 00:40:45.580
Here's a...

00:40:47.420 --> 00:40:50.780
Here's another example of,
this is a buddy list applet.

00:40:50.800 --> 00:40:53.690
Okay, it shows you your friends' names
and their pictures and what

00:40:53.690 --> 00:40:56.680
time it is where they live and
even what the weather is like,

00:40:56.680 --> 00:40:57.090
okay.

00:40:57.100 --> 00:41:00.940
A cool thing is that we can go over
here and click our friend's name.

00:41:00.960 --> 00:41:04.620
We can even see where
they are on the globe,

00:41:04.640 --> 00:41:05.180
all right.

00:41:05.290 --> 00:41:10.140
So this applet,
this Java FX Script applet is embedding

00:41:10.160 --> 00:41:14.880
the NASA WorldWinds Java component
as a portion of the FX Script applet.

00:41:14.880 --> 00:41:18.430
This really shows a very
seamless transition from your

00:41:18.460 --> 00:41:22.510
existing Java content to the
new world of Java FX Script and

00:41:22.510 --> 00:41:24.660
the power that this brings you.

00:41:24.660 --> 00:41:26.280
All right, so this is pretty neat.

00:41:26.310 --> 00:41:28.780
Now,
let's say hypothetically speaking that

00:41:28.780 --> 00:41:31.650
we think that the pals thing is really,
really useful.

00:41:31.660 --> 00:41:34.520
Maybe it's even got an IM chat
client built in or something.

00:41:34.550 --> 00:41:37.600
You say, well,
maybe we'd like this to stick around,

00:41:37.620 --> 00:41:39.540
you know, after we've exited the webpage.

00:41:39.540 --> 00:41:42.200
You know, maybe we don't want to have the
webpage around all the time that

00:41:42.200 --> 00:41:43.700
we want to be interacting with it.

00:41:43.700 --> 00:41:46.000
All right,
so this is actually pretty simple.

00:41:46.020 --> 00:41:48.960
We can just come in here and
take the applet and drag it out

00:41:49.000 --> 00:41:50.510
of the page onto our desktop.

00:41:50.520 --> 00:41:52.890
Pow, okay.

00:41:53.350 --> 00:41:56.360
Now we can go in here and we
can quit the web browser and

00:41:56.360 --> 00:41:58.860
the applet is still running.

00:42:06.620 --> 00:42:10.420
Okay,
there's a lot of ramifications to this.

00:42:10.420 --> 00:42:12.730
Every applet,
if you design it in the way,

00:42:12.730 --> 00:42:15.760
you have to opt into this
capability as a developer.

00:42:15.760 --> 00:42:17.520
Okay, so don't be worried about, oh,
well, you know,

00:42:17.520 --> 00:42:19.560
is anybody going to take my
applet and rip it off the page?

00:42:19.560 --> 00:42:20.630
You have to opt in.

00:42:20.640 --> 00:42:23.280
This is documented on
the JDK 6 release notes.

00:42:23.280 --> 00:42:26.060
But basically, this is the new paradigm,
in my opinion,

00:42:26.130 --> 00:42:28.640
for application deployments
on the internet.

00:42:28.640 --> 00:42:30.440
Try before you buy.

00:42:30.440 --> 00:42:32.810
Go to the web page, try out the app.

00:42:32.810 --> 00:42:36.280
If you like it, you drag the running app
with all of its state.

00:42:36.640 --> 00:42:39.780
Out onto your desktop,
that's the app installation experience.

00:42:39.780 --> 00:42:43.050
And when you close down the web browser
or switch away from the web page,

00:42:43.180 --> 00:42:46.150
you get an option to, for example,
create a desktop shortcut,

00:42:46.150 --> 00:42:49.970
and that allows you to relaunch without
going back to the web browser later.

00:42:49.980 --> 00:42:52.320
Okay,
and we are very much looking forward

00:42:52.390 --> 00:42:56.060
to collaborating with the Java team
and Apple to make this a really

00:42:56.060 --> 00:42:59.930
seamless and effective user experience
on the Macs that you get like a

00:42:59.930 --> 00:43:04.240
.app created for your JNLP-based
applet as you drag it to the desktop.

00:43:04.260 --> 00:43:05.980
And we think that it'll
be indistinguishable.

00:43:06.600 --> 00:43:08.930
It's going to be a little bit
more flexible from a native

00:43:08.930 --> 00:43:11.630
application ultimately and still
give you this awesome power of

00:43:11.790 --> 00:43:14.780
being able to go from the web to
the desktop completely seamlessly.

00:43:14.780 --> 00:43:19.540
So I'd like to go back to the slides,
please.

00:43:23.460 --> 00:43:26.770
Okay, so please, please get involved.

00:43:26.780 --> 00:43:28.920
Again, this is prototype software.

00:43:28.920 --> 00:43:31.610
We cannot commit to a
release date at this point,

00:43:31.620 --> 00:43:34.140
although we're collectively working
together as quickly as possible

00:43:34.140 --> 00:43:36.630
to get this out there on the Mac.

00:43:36.700 --> 00:43:38.660
It's already available
on other platforms.

00:43:38.660 --> 00:43:41.040
So if you want,
please check out the release notes.

00:43:41.040 --> 00:43:44.410
This is the website, jdk6.dev.java.net.

00:43:44.420 --> 00:43:45.620
We'll take you everywhere you need to.

00:43:45.620 --> 00:43:49.280
But if you go to the Plugin 2 sub-link,
that's where you can find

00:43:49.280 --> 00:43:51.020
the information about it.

00:43:51.020 --> 00:43:52.900
And please let us know what you think.

00:43:52.940 --> 00:43:56.470
We're on the forums all the time,
so just go to forums.java.net,

00:43:56.480 --> 00:43:58.760
go to the desktop forums,
then Java Plugin,

00:43:58.760 --> 00:44:00.310
and give us your feedback.

00:44:00.320 --> 00:44:03.110
So with that,
I'd like to turn it back over to Mike to

00:44:03.110 --> 00:44:06.980
show you how to build really whizzy
Mac OS X user interfaces in Java.

00:44:06.980 --> 00:44:07.330
Great.

00:44:07.330 --> 00:44:08.040
Thank you, Ken.

00:44:13.410 --> 00:44:18.040
So that was an amazing demo,
and I'm looking forward to

00:44:18.040 --> 00:44:22.290
working with Ken and bringing
some great JavaFX apps to the Mac.

00:44:22.360 --> 00:44:25.840
But what I'd like to talk about next
is what happens when you actually pull

00:44:25.840 --> 00:44:27.540
those applications onto your desktop.

00:44:27.560 --> 00:44:31.530
What are some things that you need to
do to actually make the app look like

00:44:31.580 --> 00:44:34.550
it really belongs at home in Mac OS X?

00:44:34.800 --> 00:44:40.790
And so there's three major
things that your app should do.

00:44:40.950 --> 00:44:44.180
Your app should be bundled
like a Mac OS X app.

00:44:44.460 --> 00:44:47.600
You should use a screen menu bar,
and we'll talk a little bit about

00:44:47.600 --> 00:44:49.260
capturing application events.

00:44:49.260 --> 00:44:53.490
So on Mac OS X,
when you build your Java application,

00:44:53.570 --> 00:44:59.560
what winds up in your destination
directory after you're done compiling it

00:44:59.700 --> 00:45:02.160
probably looks something a lot like this.

00:45:02.160 --> 00:45:04.740
You have a bunch of jars,
you've got a bunch of resources,

00:45:04.740 --> 00:45:07.160
you've got some class files,
you've got a run.bat,

00:45:07.170 --> 00:45:09.910
because you're probably
deploying on other platforms.

00:45:10.700 --> 00:45:12.670
But on Mac OS X, we don't do that.

00:45:12.830 --> 00:45:19.050
We have a single unified .app that
we bundle everything that your

00:45:19.120 --> 00:45:22.550
application requires inside of.

00:45:22.640 --> 00:45:26.290
And so this allows for a
great end-user experience.

00:45:26.300 --> 00:45:29.500
The end-user can just take this right
out of their downloads directory

00:45:29.500 --> 00:45:32.720
or from a disk image and just drop
it in their applications folder.

00:45:32.720 --> 00:45:35.780
And if they don't want it anymore,
they can just throw it away in the trash.

00:45:35.780 --> 00:45:40.090
Easy, breezy, beautiful, just one drag.

00:45:40.500 --> 00:45:42.700
So how do you do that for
your Java application?

00:45:42.700 --> 00:45:46.370
Well, it all starts off with your icon.

00:45:46.380 --> 00:45:50.160
You get some graphics from your
graphic designer or whoever

00:45:50.170 --> 00:45:52.080
whips together your icon.

00:45:52.080 --> 00:45:53.760
You drop that into icon composer.

00:45:53.760 --> 00:45:58.310
And this may seem a little bit whimsical,
but you start off with your

00:45:58.310 --> 00:46:00.820
ICNS when you get ready to deploy.

00:46:00.820 --> 00:46:03.350
And then you take that and
you move it into jar bundler.

00:46:03.360 --> 00:46:05.260
And you just drop that
into a little well there.

00:46:05.260 --> 00:46:07.380
And then you take every other
component that's in that

00:46:07.430 --> 00:46:10.400
destination directory of yours and
you can put that into jar bundler.

00:46:10.400 --> 00:46:13.400
And take all of your jars and all
of your resources and everything.

00:46:13.400 --> 00:46:16.300
And just, you know,
check the little check box

00:46:16.300 --> 00:46:18.290
and click create application.

00:46:18.430 --> 00:46:21.370
And that will generate a
single double-clickable

00:46:21.420 --> 00:46:23.720
Java application on your desktop.

00:46:23.720 --> 00:46:26.600
And in jar bundler,
we make it really easy

00:46:26.600 --> 00:46:30.690
for you to use step two,
which is using the Mac menu bar.

00:46:34.680 --> 00:46:39.040
Just by setting the Apple Laff
useScreenMenubar property,

00:46:39.040 --> 00:46:42.590
what we'll do is we'll actually hoist
that menu bar out of your frame and

00:46:42.760 --> 00:46:47.340
put it up at the top of the screen,
just like every other Mac application.

00:46:47.340 --> 00:46:49.630
This is not something we
do by default because,

00:46:49.630 --> 00:46:53.170
for compatibility reasons,
some Java applications were never thought

00:46:53.170 --> 00:46:56.370
they would ever be run on the Mac,
so they might need that menu bar there.

00:46:56.380 --> 00:46:59.800
But for anyone who's ever even looked
at their Java application on the Mac,

00:46:59.810 --> 00:47:03.460
this is a property that should be
very easy for you to set and doesn't

00:47:03.480 --> 00:47:06.340
have any real compatibility problems.

00:47:06.340 --> 00:47:08.720
Set it early, set it often.

00:47:08.720 --> 00:47:10.180
You can do it in your Info.plist.

00:47:10.190 --> 00:47:11.880
Jarbundler helps you do that for you.

00:47:11.880 --> 00:47:14.880
You can set it on the command
line if that's how you deploy.

00:47:14.880 --> 00:47:16.350
You can set it in code.

00:47:16.740 --> 00:47:18.490
However you like it, please set it.

00:47:19.760 --> 00:47:22.780
And so the third thing I'd
like to talk about is handling

00:47:22.890 --> 00:47:24.380
your application quit events.

00:47:24.480 --> 00:47:30.350
And so what we do on Mac OS X when you
instantiate the AWT is that we create an

00:47:30.350 --> 00:47:32.580
application menu for you automatically.

00:47:32.630 --> 00:47:35.310
And that application
menu has a quit handler,

00:47:35.480 --> 00:47:38.700
and when you hit Command-Q,
it triggers and fires off.

00:47:38.740 --> 00:47:43.250
And we will do a system exit
zero and unceremoniously just

00:47:43.250 --> 00:47:46.420
terminate your application because,
well,

00:47:46.420 --> 00:47:50.170
we don't really know what the proper
shutdown routine is for your app.

00:47:50.220 --> 00:47:53.580
So in order to get that knowledge,
you have to tell us.

00:47:53.600 --> 00:47:57.310
If you have any sort of unsafe changes
or you need to push some state out

00:47:57.390 --> 00:48:01.690
to the network or you need to do some
preference saving or something like that,

00:48:01.830 --> 00:48:08.720
basically, you have to extend an
com.apple.eawt application adapter.

00:48:08.720 --> 00:48:12.440
And it's in the handle quit
method that you override.

00:48:12.480 --> 00:48:16.300
That's where you can tell us, well,
now is a good time to quit.

00:48:16.300 --> 00:48:19.300
You know, this is where you can start
doing your shutdown routine.

00:48:19.300 --> 00:48:21.420
Or you can say now is
not a good time to quit.

00:48:21.450 --> 00:48:22.500
We have unsafe changes.

00:48:22.540 --> 00:48:24.910
We need to prompt the user for that.

00:48:24.920 --> 00:48:29.090
And you set the event set handle
to false as opposed to true.

00:48:29.100 --> 00:48:32.810
So it's very easy to set up.

00:48:32.820 --> 00:48:34.630
You just implement this.

00:48:34.680 --> 00:48:38.580
You extend this adapter or
you implement the application.

00:48:38.760 --> 00:48:40.740
You add the application interface.

00:48:40.740 --> 00:48:45.770
And just add that to com.apple.eawt
application add application listener.

00:48:46.180 --> 00:48:50.340
For the rest of the time,
I'd like to talk about what you can

00:48:50.350 --> 00:48:53.240
do to add an extra little polish
and shine to your application.

00:48:53.240 --> 00:48:57.900
Some things that you can do in a
mostly platform-independent way,

00:48:57.920 --> 00:49:01.600
in many cases,
really make your app pop and really

00:49:01.600 --> 00:49:04.340
amaze and delight your end users.

00:49:04.340 --> 00:49:07.330
So we've got a bunch of
features to talk about,

00:49:07.440 --> 00:49:10.050
so let's start on client properties.

00:49:10.050 --> 00:49:14.420
Client properties are the
most platform-independent,

00:49:14.650 --> 00:49:19.350
very neutral way that you can
actually add just a little bit of

00:49:19.770 --> 00:49:24.540
custom behavior or appearance to
your application that actually has

00:49:24.540 --> 00:49:26.260
no effect on any other platform.

00:49:26.260 --> 00:49:31.180
The root jComponent object has a
putClientProperty method on it that

00:49:31.180 --> 00:49:33.540
takes a string and an object key.

00:49:34.240 --> 00:49:37.660
And you just mark your
components as having,

00:49:37.670 --> 00:49:42.210
you know, like a jComponent size,
and it's just ignored on all other

00:49:42.210 --> 00:49:44.380
platforms or any other look and feel.

00:49:44.380 --> 00:49:47.150
And on the Mac, when you launch your app,
it just has a little

00:49:47.150 --> 00:49:48.550
extra something special.

00:49:48.560 --> 00:49:52.280
And so you can go from an app just
like this that we saw in Tom's talk,

00:49:52.290 --> 00:49:56.210
which has no modifications and no
custom client properties at all,

00:49:56.250 --> 00:50:00.120
to something more like this,
which looks more like Safari and

00:50:00.230 --> 00:50:03.380
has nice segmented controls
and a beautiful search box.

00:50:03.480 --> 00:50:04.140
So let's dive in.

00:50:04.140 --> 00:50:04.940
So let's dive a little bit into that.

00:50:04.940 --> 00:50:09.730
So jComponent size variant
allows you to specify whether

00:50:09.960 --> 00:50:12.450
you want smaller controls.

00:50:12.490 --> 00:50:17.710
We set this on buttons and sliders
and a bunch of other components.

00:50:17.760 --> 00:50:21.850
We have a tech note where you can check
out all of the ones that they apply to.

00:50:21.900 --> 00:50:25.550
Small components are good when you
want to kind of cluster and bring

00:50:25.600 --> 00:50:27.900
controls together in sort of a subgroup.

00:50:28.040 --> 00:50:31.820
Many controls should probably only
be used very sparingly because

00:50:31.820 --> 00:50:33.670
they actually are very small.

00:50:33.740 --> 00:50:34.040
But in this case,
we're going to use a little bit

00:50:34.040 --> 00:50:34.040
of a different type of control.

00:50:34.040 --> 00:50:36.630
In some cases,
if you have like a palette and

00:50:36.630 --> 00:50:40.380
you need some sort of really
small clustering and grouping,

00:50:40.380 --> 00:50:43.360
occasionally a mini checkbox or a
mini slider might be appropriate.

00:50:44.770 --> 00:50:48.890
Another client property
which applies to buttons,

00:50:48.890 --> 00:50:53.660
we've actually had since
Mac OS 10.2 in Java 1.4,

00:50:53.660 --> 00:50:55.960
and these are the three
styles that we supported.

00:50:55.960 --> 00:50:58.410
But in Leopard,
we added a whole bunch more.

00:50:58.420 --> 00:51:02.540
The textured button looks really
good on textured-style windows,

00:51:02.540 --> 00:51:06.760
round-wrecked for kind of
HTML-style layouts and views where

00:51:06.760 --> 00:51:08.660
you have your own buttons there.

00:51:08.660 --> 00:51:12.060
We even have a little purple help
button as well that you often see in

00:51:12.090 --> 00:51:15.170
the little corner of system preferences.

00:51:17.270 --> 00:51:22.130
So another modifier that you can add to
the button type is the segment position.

00:51:22.140 --> 00:51:25.490
And this actually allows you to
create whole bars and kind of long

00:51:25.950 --> 00:51:29.530
controls that you can toggle between,
just like you can toggle between the

00:51:29.530 --> 00:51:31.390
views in the Finder or in iTunes.

00:51:31.400 --> 00:51:35.210
And so if you put your buttons
into a layout manager that directly

00:51:35.210 --> 00:51:38.990
abut these components together,
you actually get them to

00:51:38.990 --> 00:51:42.840
fit together in a nice,
single, cohesive control.

00:51:43.080 --> 00:51:47.120
And we'll take care of automatically
scaling everything for you in high DPI.

00:51:47.120 --> 00:51:51.480
And your app should look just great.

00:51:54.270 --> 00:52:00.890
So another client property that we added
to text fields was the search variant.

00:52:00.950 --> 00:52:05.230
And this was something that we know
you guys have asked for quite a lot.

00:52:05.330 --> 00:52:08.740
And we've added a lot of default
behavior to this automatically.

00:52:09.580 --> 00:52:13.310
When you click the little cancel icon,
we clear out the text for you.

00:52:13.320 --> 00:52:15.740
When you start typing,
a little cancel icon appears.

00:52:15.740 --> 00:52:20.540
We also will add a pop-down next
to the magnifying glass for you

00:52:20.800 --> 00:52:26.200
if you attach a pop-up to this in
another client property as well.

00:52:26.200 --> 00:52:30.980
And in order to really capture all of
the events that are going on inside this,

00:52:30.980 --> 00:52:35.920
if you want to implement sort of a live
search feature like you see in iTunes,

00:52:35.920 --> 00:52:39.560
you really want to attach a
little cancel icon to this.

00:52:39.560 --> 00:52:39.560
And when you click the
little cancel icon,

00:52:39.560 --> 00:52:39.560
we clear out the text for you.

00:52:39.560 --> 00:52:39.560
And when you start typing,
a little cancel icon appears.

00:52:39.610 --> 00:52:58.530
And when you start typing,
a little cancel icon appears.

00:53:00.030 --> 00:53:03.040
The next series of client
properties I'd like to talk about

00:53:03.140 --> 00:53:04.710
are actually applied to Windows.

00:53:04.760 --> 00:53:12.830
And so you can take your window and put a
little document proxy icon up at the top,

00:53:12.880 --> 00:53:14.760
just like you see in a
lot of Cocoa applications,

00:53:14.760 --> 00:53:18.690
simply by setting the window document
file client property to a Java.io

00:53:18.690 --> 00:53:23.200
file that actually represents the
document that that window represents.

00:53:25.440 --> 00:53:27.940
What this will do is it'll give
you this little pop-up if you

00:53:27.940 --> 00:53:32.030
right-click or command-click on that,
and it'll also make the

00:53:32.030 --> 00:53:36.140
icon draggable as well,
just like in any other Cocoa application,

00:53:36.140 --> 00:53:40.010
because, unsurprisingly,
the Java AWT is based on Cocoa.

00:53:40.040 --> 00:53:43.130
We also allow you to set
the document modified bit.

00:53:43.230 --> 00:53:45.200
If you have any sort of
unsafe changes in that window,

00:53:45.200 --> 00:53:47.360
it's a little hint to the
user that if you click close,

00:53:47.360 --> 00:53:49.660
you're going to get
something to pop out and say,

00:53:49.660 --> 00:53:52.640
hey, you have unsafe changes, you know,
please save.

00:53:52.640 --> 00:53:55.230
We also allow you to customize
your window to be able to use

00:53:55.270 --> 00:53:55.420
it in a lot of different ways.

00:53:55.420 --> 00:53:56.850
We also allow you to customize
the window style itself.

00:53:56.900 --> 00:53:59.440
So if you have something
kind of like a palette,

00:53:59.440 --> 00:54:03.000
we'll actually let you set the
palette style on that window.

00:54:03.000 --> 00:54:06.600
And you do that with window style
and give it the key of small.

00:54:06.600 --> 00:54:10.530
We also allow you to take your window,
and you can implement a lot

00:54:10.530 --> 00:54:12.530
of custom effects with them.

00:54:12.560 --> 00:54:15.080
And so you can change the opacity,
and you can determine whether

00:54:15.080 --> 00:54:16.380
or not the window has shadow.

00:54:16.380 --> 00:54:19.570
So if you want to do something
really snazzy that would require

00:54:19.570 --> 00:54:22.640
a transparent overlay window,
we allow you to do that as well

00:54:22.690 --> 00:54:24.320
now using client properties.

00:54:26.100 --> 00:54:35.060
and finally,
a feature that we added in Java 6

00:54:35.060 --> 00:54:35.150
was window document modal sheets.

00:54:35.290 --> 00:54:38.940
And so if you use the
Java Document Modality API to

00:54:38.940 --> 00:54:43.550
specify that your JDialog is document
modal to a particular J frame,

00:54:43.590 --> 00:54:46.420
and you set the window
document modal sheet property,

00:54:46.420 --> 00:54:49.430
we will automatically turn
that into a sheet for you and

00:54:49.440 --> 00:54:52.920
animate it in and animate it out
based on your set visible true,

00:54:52.920 --> 00:54:54.260
set visible false.

00:54:55.220 --> 00:54:57.370
We don't set this
automatically for you though,

00:54:57.410 --> 00:55:00.720
because in some cases, some applications,
we're never expecting to be

00:55:00.720 --> 00:55:04.140
run on a Mac or have some sort
of document modal behavior,

00:55:04.160 --> 00:55:07.560
automatically get rid of the window
accoutrements on their JDialog.

00:55:07.560 --> 00:55:11.520
So if they never put a cancel or
don't save button in their dialog,

00:55:11.520 --> 00:55:15.340
and they were depending on
you to click the little check,

00:55:15.470 --> 00:55:18.580
click the close box on the window, well,
sheets don't have close boxes.

00:55:18.580 --> 00:55:20.620
So unfortunately we
can't set it by default,

00:55:20.640 --> 00:55:22.750
but we really wish we could.

00:55:23.820 --> 00:55:27.210
So finally,
that's sort of a conclusion of all the

00:55:27.210 --> 00:55:30.300
client properties I'd like to talk about.

00:55:30.510 --> 00:55:33.150
Next,
I'd like to show you various things that

00:55:33.150 --> 00:55:35.990
we've installed inside of the UI manager.

00:55:36.000 --> 00:55:42.200
So the UI manager in Swing is sort of a
common bucket of colors and properties

00:55:42.340 --> 00:55:48.860
and borders and strings and objects
that are installed by the look and feel.

00:55:49.040 --> 00:55:51.860
And so the Aqua look and feel
installs the focus color,

00:55:51.960 --> 00:55:55.220
which allows you to actually get
at whether the user is specified

00:55:55.320 --> 00:55:59.810
there in blue or there in graphite
in the appearance preference pane.

00:55:59.820 --> 00:56:04.650
Also in the appearance preference pane,
the user can also choose a very

00:56:04.740 --> 00:56:07.410
different selection color as well.

00:56:07.420 --> 00:56:09.670
And so on Mac OS X,
we actually make a distinction

00:56:09.700 --> 00:56:12.840
between the text selection color,
which is a very light variant,

00:56:12.840 --> 00:56:14.740
in this case, a very light orange.

00:56:15.400 --> 00:56:22.390
And it's designed to select text on a
field of black text on a field of white.

00:56:22.450 --> 00:56:25.420
So it's, you know, it's,
you won't have to invert the text color.

00:56:25.430 --> 00:56:29.570
Unlike the list selection background,
which we use for lists,

00:56:29.670 --> 00:56:32.240
J tables and J trees,
which is actually a much darker

00:56:32.240 --> 00:56:35.070
color that's supposed to highlight
the fact that something is selected.

00:56:35.080 --> 00:56:38.200
And so the selection background
color is a lot darker.

00:56:38.200 --> 00:56:40.300
And then some cases will
actually invert the color of

00:56:40.300 --> 00:56:41.750
the text for you automatically.

00:56:41.780 --> 00:56:44.180
If you're implementing any
sort of custom controls,

00:56:44.180 --> 00:56:45.380
you can rely on the
selection background color.

00:56:45.380 --> 00:56:47.340
And then you can also use
these three client properties,

00:56:47.430 --> 00:56:50.370
or you can rely on these three
UI manager values to be set for

00:56:50.370 --> 00:56:52.290
you that you can take and pull out.

00:56:52.370 --> 00:56:54.390
And always, you know,
check for null in case you're

00:56:54.390 --> 00:56:57.180
running under a different look and
feel or on another platform where,

00:56:57.180 --> 00:56:58.820
say, focus color is not available.

00:56:58.840 --> 00:57:02.990
And so you can use these to
implement your custom controls.

00:57:03.280 --> 00:57:07.810
Another great feature that we've
installed in the UI Manager is

00:57:07.810 --> 00:57:09.020
an aqua-style border.

00:57:09.020 --> 00:57:14.130
This will take the default titled border,
which by default just has

00:57:14.140 --> 00:57:18.110
an etched border variant,
and will actually give

00:57:18.110 --> 00:57:24.180
you the full layering,
descending aqua-style grouping.

00:57:24.180 --> 00:57:27.220
So this is how you access it.

00:57:27.340 --> 00:57:28.840
It's in titled border.

00:57:28.840 --> 00:57:32.440
Aqua variant is the value that you
need to pull out of the UI Manager.

00:57:32.620 --> 00:57:35.400
And if you actually want to set
it for every single title board

00:57:35.400 --> 00:57:37.720
in your entire application,
you can actually tell the UI Manager,

00:57:37.720 --> 00:57:41.820
I'd like to install this titled
border as the titled border border.

00:57:41.820 --> 00:57:45.810
And so that will unilaterally change
it for every titled border that

00:57:45.810 --> 00:57:46.900
you have inside your application.

00:57:46.900 --> 00:57:48.660
And obviously it takes up more space.

00:57:48.660 --> 00:57:49.500
It'll affect your layout.

00:57:49.500 --> 00:57:52.380
If you're using good layout managers,
that shouldn't be too much of a problem.

00:57:52.380 --> 00:57:56.780
But another caveat of this is that
you have to take the components

00:57:56.780 --> 00:57:59.810
that you put inside of those panels
that you apply this border to,

00:57:59.810 --> 00:58:05.040
you have to take them and set them
set visible or set opaque false.

00:58:05.040 --> 00:58:08.240
And so what that'll do is
allow you to actually see this

00:58:08.240 --> 00:58:09.630
nice layering descending in.

00:58:09.680 --> 00:58:12.320
Otherwise,
J panels by default are set opaque true.

00:58:14.200 --> 00:59:41.500
[Transcript missing]

00:59:42.820 --> 00:59:48.090
Another improvised painter that
we've installed as a border is the

00:59:48.150 --> 00:59:54.730
even and odd row background color,
which will change automatically for you,

00:59:54.910 --> 00:59:58.200
whether you're using blue
or you're using graphite.

00:59:58.200 --> 01:00:01.910
So that's sort of a brief
overview of things that we've

01:00:01.940 --> 01:00:04.220
installed in the UI manager.

01:00:05.020 --> 01:00:09.080
Next,
I'd like to talk about some stuff that

01:00:09.140 --> 01:00:15.140
is more custom to Mac OS X that is not
necessarily as platform independent,

01:00:15.140 --> 01:00:18.960
but I think you'll agree
that it's pretty cool.

01:00:19.000 --> 01:00:24.620
So we in Java 6 allow for a lot
more native dock integration.

01:00:28.130 --> 01:00:33.800
By setting a pop-up menu on
your comApple E-AWT application,

01:00:33.800 --> 01:00:42.480
we allow you to specify what comes
up above the items that are provided

01:00:42.480 --> 01:00:43.690
for you automatically by the system.

01:00:43.690 --> 01:00:47.290
And so this allows you to

01:00:47.600 --> 01:01:16.600
[Transcript missing]

01:01:17.020 --> 01:01:21.860
But the most exciting thing
that I think we've added in

01:01:21.880 --> 01:01:23.990
Java 6 is AppleScript support.

01:01:24.020 --> 01:01:29.270
And so JavaScript is a new API that
was added to Java 6 that allows

01:01:29.770 --> 01:01:34.520
anyone to provide a script engine
implementation to run any sort

01:01:34.520 --> 01:01:36.640
of arbitrary scripting language.

01:01:36.640 --> 01:01:39.160
And at Apple, we thought, well,
this is fantastic.

01:01:39.160 --> 01:01:42.470
We could expose AppleScript to
Java applications,

01:01:42.470 --> 01:01:46.640
and you can tell applications
like iTunes to do things.

01:01:47.000 --> 01:01:51.680
So we fully implemented object
marshalling for parameters to

01:01:51.680 --> 01:01:54.340
scripts as well as return types.

01:01:54.340 --> 01:01:56.990
And so this is how you do it.

01:01:57.160 --> 01:01:59.090
You ask for the
AppleScript engine by name,

01:01:59.180 --> 01:02:01.980
and then you can do things like
tell iTunes to get the current

01:02:02.010 --> 01:02:05.160
track and get the data of the
first artwork of that track.

01:02:05.160 --> 01:02:09.010
And what it will return
to you is an object,

01:02:09.010 --> 01:02:10.560
a Java object.

01:02:10.640 --> 01:02:16.930
In this case,
a Java AWT image that you can put inside.

01:02:17.000 --> 01:02:18.720
So you can take a copy of an
image icon and put it in a

01:02:18.720 --> 01:02:22.340
label and throw it up in JFrame,
and you have the full image

01:02:22.470 --> 01:02:27.840
automatically marshaled for you
with zero work on your part.

01:02:33.450 --> 01:02:38.400
So we automatically coerce images,
strings, numbers, lists, and maps.

01:02:38.400 --> 01:02:49.200
In AppleScript's case,
they called them description, or,

01:02:49.460 --> 01:02:50.390
and others.

01:02:50.400 --> 01:02:50.400
Thank you.

01:02:51.120 --> 01:02:55.160
So we automatically coerce them back and
forth between their Java object types,

01:02:55.160 --> 01:02:59.380
and so this is an example of taking --
of getting the Apple Script Engine and

01:02:59.380 --> 01:03:03.500
actually using that to pass
some parameters to the finder.

01:03:03.500 --> 01:03:09.040
In this case, you set the JavaX script
function that we want to call,

01:03:09.040 --> 01:03:13.670
in this case doTrash,
and we'll specify that we want an

01:03:13.670 --> 01:03:15.800
argument to go down into that script.

01:03:15.800 --> 01:03:18.440
And so in this case,
you set the script engine

01:03:18.440 --> 01:03:21.100
argv in the bindings,
and then you do the call to

01:03:21.100 --> 01:03:23.410
doTrash and tells finder to,
you know,

01:03:23.510 --> 01:03:29.320
take that file string and treat it like
a POSIX file and toss it to the trash.

01:03:29.320 --> 01:03:32.350
So we think this is really powerful,
and we think that a lot of

01:03:32.380 --> 01:03:34.910
applications will want to do this,
you know,

01:03:34.910 --> 01:03:38.570
to get sort of native integration
with other apps like iPhoto

01:03:38.570 --> 01:03:40.820
and iTunes and Mail and,
well,

01:03:40.820 --> 01:03:43.990
just about anything that's in your dock.

01:03:44.810 --> 01:03:49.120
So where can we find
all of these properties?

01:03:49.120 --> 01:03:53.270
Well, we wrote up a tech note, 2196,
that describes a lot of the

01:03:53.270 --> 01:03:55.080
swing client properties.

01:03:55.080 --> 01:04:00.360
We also have a lot of really hidden gems
inside of the release notes for Java on

01:04:00.360 --> 01:04:04.040
Mac OS X v10.5 update 1 release notes.

01:04:04.040 --> 01:04:07.060
And so those were the
release notes for Java 6.

01:04:07.780 --> 01:04:10.710
And we're hoping to get more
documentation about this stuff

01:04:10.710 --> 01:04:14.600
out to you very soon and get some
sort of example code as opposed to

01:04:14.600 --> 01:04:16.660
just cryptic little release notes.

01:04:16.660 --> 01:04:22.190
So sort of in summary,
what did we talk about today?

01:04:22.200 --> 01:04:23.380
We talked about a lot.

01:04:23.440 --> 01:04:26.280
So we've got Java tools.

01:04:26.280 --> 01:04:29.740
Use Ant to build your projects.

01:04:29.740 --> 01:04:33.590
This has great integration
with Xcode and Eclipse and

01:04:33.590 --> 01:04:36.060
NetBeans and all the Java IDEs.

01:04:36.560 --> 01:04:40.420
We have some great performance
tools with Shark and Instruments.

01:04:40.420 --> 01:04:42.720
And check out Dtrace if you haven't.

01:04:42.720 --> 01:04:46.790
There's some really powerful
things you can do all the way

01:04:46.790 --> 01:04:51.700
from your Java functions all the
way down to the kernel syscalls.

01:04:51.700 --> 01:04:55.570
We talked a lot about 64-bit
since that's very important

01:04:55.570 --> 01:04:57.710
for the conference this week.

01:04:57.720 --> 01:05:00.260
It's on by default for Snow Leopard.

01:05:00.260 --> 01:05:03.900
You should be able to get great
performance effectively for free.

01:05:03.900 --> 01:05:09.600
We had Scott talk about...
How SWT is moving to Cocoa and the

01:05:09.710 --> 01:05:14.770
fantastic contributions that they're
making to the SWT Cocoa port.

01:05:14.860 --> 01:05:19.820
Ken showed us a really fantastic
demo of out-of-process applets and

01:05:19.820 --> 01:05:22.130
moving applets out of the browser.

01:05:22.180 --> 01:05:25.520
And then finally,
I told you about some three basic

01:05:25.520 --> 01:05:28.440
things that your app needs to do
once you get it onto the desktop

01:05:28.510 --> 01:05:30.730
to actually be a good Mac citizen.

01:05:30.800 --> 01:05:33.960
And then finally,
we just finished up with

01:05:34.080 --> 01:05:36.000
using client properties.

01:05:36.000 --> 01:05:40.240
And UI manager values for
platform-independent customization

01:05:40.240 --> 01:05:41.400
that really looks great on the Mac.

01:05:41.400 --> 01:05:45.460
As well as some custom EWT dock
integration to allow you to

01:05:45.670 --> 01:05:47.640
customize your dock icon.

01:05:47.640 --> 01:05:51.240
And finished up with AppleScript.

01:05:51.240 --> 01:05:56.880
So, in conclusion,
these are some places you can go.

01:05:56.880 --> 01:05:59.900
The Java Dev mailing list is
absolutely fantastic for anybody

01:05:59.900 --> 01:06:01.380
who's new to the platform.

01:06:01.380 --> 01:06:05.280
There's a lot of friendly faces
there to help you get going.

01:06:06.000 --> 01:06:07.460
With any problems you might have.

01:06:07.500 --> 01:06:14.700
And there's a lot of senior people there
who come talk to us as Apple engineers.

01:06:14.700 --> 01:06:16.360
Because we hang out there, too.

01:06:16.360 --> 01:06:19.480
And we'll occasionally pipe
up about something that's

01:06:19.480 --> 01:06:23.680
particularly sniggly or some sort
of preferred way to do something.

01:06:23.680 --> 01:06:27.190
So, we've got a bunch of
documentation and sample code.

01:06:27.200 --> 01:06:30.700
Please do come to the labs that
are on Wednesday and Thursday.

01:06:30.700 --> 01:06:32.250
Bright and early, 9 a.m.

01:06:32.260 --> 01:06:35.920
One's in the Infotech lab
and the other's in Mac Lab A.

01:06:35.920 --> 01:06:35.960
They're going to be available to you.

01:06:36.000 --> 01:06:38.080
They're two different spaces,
but they're both on the same floor.

01:06:38.080 --> 01:06:42.370
And with that,
I'd like to invite everyone up for Q&A.