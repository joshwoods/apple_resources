WEBVTT

00:00:20.620 --> 00:00:24.500
What we're going to show today,
or by the way, I'm Matthew McManuus.

00:00:24.500 --> 00:00:26.940
I'm from the
Final Cut Server engineering team.

00:00:26.940 --> 00:00:31.050
And to help me,
I've got Eryk Vershen as well.

00:00:31.900 --> 00:00:37.920
So, today,
yesterday we saw what was in some of

00:00:37.920 --> 00:00:41.380
the aspects of Final Cut Server with
regard to the pieces you

00:00:41.400 --> 00:00:45.500
need to actually deploy it,
as well as some things involved

00:00:45.500 --> 00:00:47.600
in the actual deployment.

00:00:48.370 --> 00:00:54.700
So today, I'm going to show how to--
the mechanisms to actually

00:00:54.700 --> 00:00:57.460
integrate with Final Cut Server.

00:00:57.530 --> 00:01:02.820
And then I'll show you some ways
to actually do the integration.

00:01:03.070 --> 00:01:06.660
So, I'm going to give you a
brief product overview,

00:01:06.690 --> 00:01:09.900
just for those who
didn't see it yesterday.

00:01:10.040 --> 00:01:12.900
Then I'll show you the
mechanisms of integration.

00:01:12.900 --> 00:01:18.000
And finally,
I'll show you some integration examples.

00:01:20.120 --> 00:01:24.290
So Final Cut Server was
released a few months ago,

00:01:24.290 --> 00:01:28.990
and it was to address two main areas.

00:01:29.100 --> 00:01:33.740
So media asset management,
and to do that, we connect two devices,

00:01:33.740 --> 00:01:38.050
so an AFP share, an XAN,
so forth and so on.

00:01:38.290 --> 00:01:42.340
And then we catalog the
files on those devices,

00:01:42.540 --> 00:01:47.450
and we can move files to and
from those devices as well.

00:01:48.170 --> 00:01:51.440
There's also a very
customizable metadata model,

00:01:51.440 --> 00:01:55.640
and we'll see that during the talk
today and how we can use that to

00:01:56.010 --> 00:02:00.060
drive events and other such responses.

00:02:00.730 --> 00:02:06.740
It's a client-server model,
so the server runs on Leopard,

00:02:06.860 --> 00:02:16.190
either client or server, and the client,
the client itself, runs on either Tiger,

00:02:16.190 --> 00:02:19.470
Leopard, or XP or Vista.

00:02:21.390 --> 00:02:26.490
And the key component which we're going
to use with the integration is the

00:02:26.580 --> 00:02:30.000
subscription and response workflow.

00:02:30.650 --> 00:02:35.130
So this is comprised-- there's
14 different responses in

00:02:35.130 --> 00:02:39.840
Final Cut Server to do everything
from do a copy and transcode,

00:02:39.960 --> 00:02:47.100
send an email, do a scan,
all these other different responses.

00:02:47.100 --> 00:02:51.650
And they can be triggered by
three different mechanisms.

00:02:52.030 --> 00:02:55.630
There's a schedule,
so you can do a response

00:02:55.630 --> 00:02:57.010
on a timed basis.

00:02:57.240 --> 00:02:59.300
Or a watch folder.

00:02:59.710 --> 00:03:05.660
So Final Cut Server can be monitoring
a folder on a connected device and do

00:03:05.660 --> 00:03:12.650
some of these actions or responses when
it sees a new file go into that folder.

00:03:13.550 --> 00:03:15.900
And finally, there's subscriptions.

00:03:15.950 --> 00:03:17.120
My personal favorite.

00:03:17.340 --> 00:03:23.610
You're able to subscribe to
events in Final Cut Server.

00:03:24.000 --> 00:03:29.400
And events are things like
when an asset is created,

00:03:29.440 --> 00:03:35.540
or when an asset is modified or deleted,
or when a user logs in.

00:03:35.900 --> 00:03:38.360
Each of these are different events.

00:03:38.380 --> 00:03:44.240
And then when you're building
these workflows and subscriptions,

00:03:44.410 --> 00:03:48.760
You can subscribe to the events,
so when an asset is modified,

00:03:48.770 --> 00:03:52.620
and then you can further
filter what you're trying to

00:03:52.620 --> 00:03:55.470
catch to trigger the response.

00:03:55.780 --> 00:04:00.170
So you can say,
I am going to look for all assets

00:04:00.170 --> 00:04:03.300
that are modified on my exan.

00:04:03.670 --> 00:04:08.900
"Where the status
equals ready for review.

00:04:08.920 --> 00:04:12.620
And when all of that matches,
I'm going to do the actions

00:04:12.620 --> 00:04:15.690
I assign to that subscription."

00:04:16.160 --> 00:04:21.110
And we'll see that in a lot of detail
as we go through the examples today.

00:04:23.340 --> 00:04:28.040
So the mechanisms of integration
that we have in Final Cut Server,

00:04:28.080 --> 00:04:31.170
there's three of them that
I'm going to show today.

00:04:31.570 --> 00:04:36.550
We've got the ability to read
and write metadata in files.

00:04:37.440 --> 00:04:41.300
There's also the ability to
read and write XML content,

00:04:41.300 --> 00:04:46.640
so to export XML and to
import XML to change assets.

00:04:47.600 --> 00:04:52.370
And there's also the very powerful
ability to run an external script

00:04:52.420 --> 00:04:56.200
or command on the local machine.

00:04:57.740 --> 00:05:03.030
So let's talk about the reading and
writing of metadata and files first.

00:05:04.000 --> 00:05:06.720
So there's two types of
files that we support,

00:05:06.860 --> 00:05:16.890
QuickTime as well as XMP metadata,
which is contained in files.

00:05:18.890 --> 00:05:23.260
So I'll talk about
QuickTime metadata first.

00:05:23.290 --> 00:05:31.730
So when Final Cut Server catalogs a file,
for example, a QuickTime file,

00:05:31.730 --> 00:05:36.760
it reads the metadata
from that QuickTime file.

00:05:36.820 --> 00:05:39.850
So that's then available
in Final Cut Server.

00:05:41.600 --> 00:05:46.990
And you can map the QuickTime metadata
to whatever fields you

00:05:46.990 --> 00:05:49.240
like in Final Cut Server.

00:05:49.620 --> 00:05:55.440
And then when you're writing out
QuickTime files from Final Cut Server,

00:05:55.500 --> 00:06:02.740
you can also map metadata from
Final Cut Server to the QuickTime files.

00:06:04.140 --> 00:06:06.050
Now let's talk about
what you can actually do.

00:06:06.170 --> 00:06:11.480
So QuickTime 7 and above has some
very extensible metadata support.

00:06:13.640 --> 00:06:15.790
It can contain any sort of metadata.

00:06:15.800 --> 00:06:19.660
There is some metadata
which you can set using,

00:06:19.660 --> 00:06:21.030
say, the QuickTime Pro application.

00:06:21.150 --> 00:06:24.820
So in QuickTime,
they're called annotations.

00:06:25.820 --> 00:06:33.310
But the actual metadata that you
can put in is completely definable.

00:06:34.410 --> 00:06:40.520
So there's actually a wide range
of support of metadata in cameras,

00:06:40.520 --> 00:06:46.240
like cameras from, say,
Sony or Panasonic, the P2 or XD Cam,

00:06:46.310 --> 00:06:48.120
or the RED Camera.

00:06:48.240 --> 00:06:55.360
As well as other devices which
put metadata into QuickTime files.

00:06:56.090 --> 00:07:02.990
Now, if you're ingesting with the
Final Cut Pro Login Transfer Tool,

00:07:02.990 --> 00:07:04.510
the metadata from those files

00:07:04.880 --> 00:07:08.100
gets written to the
QuickTime files that are written

00:07:08.100 --> 00:07:10.680
as part of the ingest process.

00:07:11.580 --> 00:07:18.280
So for example, in a P2 file,
there's some 14 or 17 different fields.

00:07:18.300 --> 00:07:21.350
All of those get written
to the QuickTime file.

00:07:24.560 --> 00:07:31.110
So Final Cut Server reads that
metadata from the QuickTime file.

00:07:34.920 --> 00:07:37.110
But there are certain, you know,
if there are new fields

00:07:37.110 --> 00:07:39.650
in the QuickTime file,
what Final Cut Server is

00:07:39.650 --> 00:07:45.380
able to do is dynamically add
those new QuickTime fields

00:07:45.380 --> 00:07:48.870
to files that it understands.

00:07:51.450 --> 00:07:59.520
And you can create mappings from
the metadata in the QuickTime files.

00:08:00.610 --> 00:08:04.900
to fields inside of Final Cut Server.

00:08:04.950 --> 00:08:07.000
So you need to create these mappings.

00:08:07.010 --> 00:08:10.930
There are some mappings
which exist already.

00:08:11.210 --> 00:08:17.130
So the mappings, for example,
from the QuickTime Pro annotations

00:08:17.130 --> 00:08:23.960
will map directly into an asset of,
say, media metadata type.

00:08:24.360 --> 00:08:28.110
But you can build whatever
mappings you like to go from

00:08:29.140 --> 00:08:34.280
the QuickTime fields to the
Final Cut Server fields and back again.

00:08:36.110 --> 00:08:39.040
So let's actually have a look
about how to actually do this.

00:08:39.100 --> 00:08:45.280
So here I've got a file which
I had ingested from a P2 card.

00:08:45.280 --> 00:08:46.710
It's a motorcycle head-on.

00:08:46.800 --> 00:08:53.400
So if I want to have a look
at the metadata in a file,

00:08:53.720 --> 00:08:59.420
I can use the Final Cut Server search
devices option.

00:09:00.270 --> 00:09:08.000
So Search Devices allows you to just view
the files that are on a given device.

00:09:08.680 --> 00:09:09.780
So this is what I've done here.

00:09:09.800 --> 00:09:19.160
I have ingested, using Final Cut Pro,
a P2 file to my local machine.

00:09:19.250 --> 00:09:23.110
I copied it to my media device,
and now I'm doing a device

00:09:23.110 --> 00:09:24.810
search on my media device.

00:09:24.810 --> 00:09:34.510
So when I double-click on my MOV,
I get my dynamic metadata.

00:09:35.920 --> 00:09:42.530
So you can see here we have
some default QuickTime metadata,

00:09:42.820 --> 00:09:49.520
some metadata which came from the
Final Cut Pro log and transfer window,

00:09:49.610 --> 00:09:54.740
so things like the reel
and the shot and the take,

00:09:54.740 --> 00:09:56.150
as well as

00:09:56.520 --> 00:10:02.030
The 17 different fields
which came from the P2.

00:10:03.090 --> 00:10:08.380
Now, if we look at that a bit closer,
we've got the dynamic metadata,

00:10:08.420 --> 00:10:14.390
as well as all of the possible fields
in the QuickTime file that we can view.

00:10:16.670 --> 00:10:24.490
So here I've got some things like the
creation date on the camera itself,

00:10:24.620 --> 00:10:29.160
the model name, the serial number,
and many other fields.

00:10:29.270 --> 00:10:33.240
So what I can do is I can choose
some of these fields to map into my

00:10:34.290 --> 00:10:37.420
internal Final Cut Server fields.

00:10:38.230 --> 00:10:42.160
So here I want to choose
my original format field,

00:10:42.190 --> 00:10:46.350
which is our dynamic
metadata QuickTime field.

00:10:46.880 --> 00:10:50.640
And then I need to map it to an
internal Final Cut Server field.

00:10:50.760 --> 00:10:56.910
So I have a original format
custom metadata field.

00:10:57.950 --> 00:11:00.360
And I give it a priority.

00:11:00.440 --> 00:11:03.660
The priority dictates
if there's a collision,

00:11:03.660 --> 00:11:08.940
so if there's metadata from
two sources trying to go into

00:11:08.940 --> 00:11:12.980
the one custom metadata field,
so the one internal field,

00:11:13.020 --> 00:11:15.300
which one takes priority.

00:11:16.420 --> 00:11:20.780
And I can select the
two-way map checkbox.

00:11:20.870 --> 00:11:25.260
So this means that when I write
back to a QuickTime file,

00:11:25.270 --> 00:11:33.480
my internal custom metadata field will
write back to my QuickTime metadata.

00:11:34.890 --> 00:11:40.240
So when I actually do this,
I've created five

00:11:40.240 --> 00:11:42.880
different internal fields.

00:11:42.890 --> 00:11:48.000
I've done my mapping from my P2
fields to my internal fields.

00:11:48.020 --> 00:11:52.970
And I've put all of that into
a separate metadata group.

00:11:54.510 --> 00:11:58.490
So if I zoom in on that,
I can see now for all of my media

00:11:58.490 --> 00:12:03.320
which I've ingested from P2,
I've now got original format,

00:12:03.320 --> 00:12:07.850
camera model, the serial number,
the data source,

00:12:07.970 --> 00:12:10.490
as well as the unique P2 ID.

00:12:12.030 --> 00:12:15.150
So this is extensible to any
kind of metadata field that

00:12:15.220 --> 00:12:16.240
you can find in QuickTime.

00:12:16.240 --> 00:12:26.100
So for cameras, as I said, XDCAM, RED,
and many other different QuickTime files.

00:12:26.470 --> 00:12:30.350
If you're a vendor wanting to
integrate with Final Cut Server,

00:12:30.470 --> 00:12:31.740
if you put metadata

00:12:32.960 --> 00:12:41.110
into the QuickTime files,
then that's easily read and mapped

00:12:42.110 --> 00:12:42.240
into fields in Final Cut Server.

00:12:45.280 --> 00:12:48.560
So now I'm going to talk
a bit about XMP metadata.

00:12:48.770 --> 00:12:56.260
So XMP metadata can be put
in many different file types.

00:12:57.800 --> 00:13:06.400
[Transcript missing]

00:13:08.280 --> 00:13:14.920
You'll find an XMP metadata in, say,
JPEG or raw camera files, Photoshop,

00:13:14.920 --> 00:13:19.100
TIFF, HTML,
or a few other different file types.

00:13:19.200 --> 00:13:22.370
And what Final Cut Server can do,
it's going to read,

00:13:22.480 --> 00:13:27.610
just like we did with QuickTime,
read those XMP fields and map

00:13:27.690 --> 00:13:30.080
them into Final Cut Server.

00:13:30.980 --> 00:13:34.080
And just like with QuickTime,
you can write back from

00:13:34.150 --> 00:13:37.290
Final Cut Server to the XMP fields.

00:13:38.290 --> 00:13:40.280
Now, there's a few differences.

00:13:40.410 --> 00:13:43.930
So the XMP, as I said,
the support for many

00:13:43.940 --> 00:13:49.500
different image formats,
as well as a few other file formats,

00:13:49.510 --> 00:13:56.960
and the support for, as I said,
Illustrator, HTML, PDF,

00:13:56.980 --> 00:13:59.950
so anything which contains an XMP.

00:14:00.640 --> 00:14:02.930
And the raw camera files.

00:14:02.980 --> 00:14:09.230
So there's a wide range of schemas,
but the key thing here is that the

00:14:09.230 --> 00:14:12.470
schemas that we support are fixed.

00:14:12.690 --> 00:14:19.520
So unlike the schemas for QuickTime or
the dynamic mapping for QuickTime,

00:14:19.520 --> 00:14:27.980
there's some 200 or 300 XMP possible
fields that we can map from.

00:14:29.000 --> 00:14:33.870
So it should be enough
to... It basically...

00:14:34.290 --> 00:14:40.210
understands all of the
possible XMP schemas to date.

00:14:41.750 --> 00:14:43.370
And there's some default mappings.

00:14:43.610 --> 00:14:47.870
So from, say, the XMP description field,
that will map into the

00:14:47.970 --> 00:14:51.720
Final Cut Server description field,
keywords to keywords,

00:14:51.720 --> 00:14:53.880
and a few other mappings.

00:14:55.320 --> 00:14:57.390
And there's the ability
to create new mappings,

00:14:57.490 --> 00:15:00.290
just like we saw with QuickTime,
from the external fields to

00:15:00.290 --> 00:15:03.300
fields in Final Cut Server,
and to go back from

00:15:03.300 --> 00:15:08.100
Final Cut Server to the XMP fields.

00:15:08.150 --> 00:15:10.700
So I'll show you an example.

00:15:10.900 --> 00:15:14.920
So here I've got a number of files.

00:15:14.920 --> 00:15:19.930
I've got some raw images,
which I took from my camera of my cat.

00:15:20.490 --> 00:15:25.020
And again,
I am looking at these files using the

00:15:25.380 --> 00:15:29.550
search devices in Final Cut Server.

00:15:31.190 --> 00:15:34.380
If I have a look here,
we'll actually see all of the

00:15:34.570 --> 00:15:38.990
possible XMP schemas that we support.

00:15:39.210 --> 00:15:43.100
So there's some 12 different
groupings of schemas,

00:15:43.140 --> 00:15:46.390
and each schema has a number of
different fields inside of it.

00:15:48.100 --> 00:15:53.240
So we can see here there
are the possible groups.

00:15:53.240 --> 00:15:57.320
And here are the fields
inside one of the groups.

00:15:57.370 --> 00:16:01.030
So if I zoom in on that,
there's some fields that--

00:16:01.090 --> 00:16:06.620
so here we've got the exif,
the tif, the gif, so forth and so on.

00:16:07.080 --> 00:16:10.110
And here is some useful information
that I want to actually map

00:16:10.110 --> 00:16:14.030
into Final Cut Server from
my raw camera files.

00:16:14.040 --> 00:16:20.500
So I'd like to get the, say, the ISO,
the F number, the exposure time.

00:16:20.760 --> 00:16:24.270
So to do that, it's the same mechanism
as with the QuickTime.

00:16:24.450 --> 00:16:29.770
So I choose my From field,
which in this case is going

00:16:30.210 --> 00:16:32.820
to be type XMP metadata.

00:16:33.370 --> 00:16:37.570
Then I can choose a two-field,
which I've just called Aperture,

00:16:37.870 --> 00:16:39.200
quite conveniently.

00:16:39.200 --> 00:16:41.800
And this is going to be, again,
a custom metadata field.

00:16:41.800 --> 00:16:45.460
So a custom metadata field
is a field that is used by

00:16:45.460 --> 00:16:47.940
Final Cut Server internally.

00:16:47.940 --> 00:16:52.590
I choose my priority,
and I choose my two-way mapping.

00:16:55.400 --> 00:16:59.780
So once that's done, I've now again got a
different metadata group,

00:16:59.780 --> 00:17:02.400
which I've called Camera Info.

00:17:02.410 --> 00:17:05.470
And I've mapped in--

00:17:06.290 --> 00:17:14.590
So I've got my F number,
my exposure time, my ISO,

00:17:14.850 --> 00:17:16.880
so forth and so on.

00:17:19.100 --> 00:17:25.100
So you can see how that if
metadata is in the file itself,

00:17:25.100 --> 00:17:31.830
it's very easy to map into
Final Cut Server and to get some

00:17:31.830 --> 00:17:35.000
really useful metadata for the files.

00:17:35.050 --> 00:17:38.280
Because as you get more and
more files into the system,

00:17:38.450 --> 00:17:44.590
the more metadata that you have for them,
the easier it is to actually find it.

00:17:46.350 --> 00:17:48.680
And as we'll see during
the rest of the talk,

00:17:48.680 --> 00:17:52.620
you can actually start to use
the metadata to actually derive

00:17:53.140 --> 00:17:55.220
actions in Final Cut Server.

00:17:55.440 --> 00:17:57.810
So it can be very powerful.

00:17:58.630 --> 00:18:03.680
So next up, I'd like to talk about
reading and writing XML.

00:18:05.730 --> 00:18:11.520
So there's the ability to export XML,
and to do this,

00:18:11.550 --> 00:18:15.100
there's a write XML response.

00:18:15.110 --> 00:18:19.280
There's also the ability to import XML.

00:18:19.290 --> 00:18:23.580
And for that,
there's a read XML response.

00:18:24.260 --> 00:18:29.270
So with the right XML response,
that exports all of the

00:18:29.270 --> 00:18:32.610
metadata for a given entity.

00:18:33.070 --> 00:18:38.080
And by entity, I mean either an asset,
a production, or a job.

00:18:38.250 --> 00:18:42.260
Three different kinds of
entities in Final Cut Server.

00:18:43.690 --> 00:18:48.520
There's just one parameter
for the response,

00:18:48.520 --> 00:18:55.560
and that's the destination where you
actually want to write the XML file to.

00:18:56.480 --> 00:19:00.800
And it's triggered by a subscription.

00:19:00.920 --> 00:19:02.970
So I discussed subscriptions earlier.

00:19:03.220 --> 00:19:07.470
So whatever triggers the subscription,

00:19:08.460 --> 00:19:12.330
will actually write the
metadata for that entity.

00:19:12.480 --> 00:19:16.430
So if I have an asset
triggering a subscription,

00:19:16.450 --> 00:19:22.990
then all of the metadata for that asset
will be written out to the XML file.

00:19:24.280 --> 00:19:29.650
So to import-- so the importing
imports any metadata for an entity.

00:19:29.720 --> 00:19:35.200
So you can change the metadata
of an asset or a production.

00:19:36.170 --> 00:19:44.220
And so it must match the schema of
the entity that you're trying to set.

00:19:45.510 --> 00:19:51.000
So if the XML that's being used by
the read XML response has additional

00:19:51.180 --> 00:19:55.200
fields that aren't in the asset
that you're trying to change,

00:19:55.210 --> 00:19:56.910
they'll be ignored.

00:19:58.840 --> 00:20:04.300
And this is triggered
from a watch folder.

00:20:04.860 --> 00:20:06.820
So a watch folder is set up.

00:20:06.850 --> 00:20:09.700
The read XML response is attached to it.

00:20:09.700 --> 00:20:14.830
And XML files,
which get put into that watch folder,

00:20:15.140 --> 00:20:20.690
then are able to change the
metadata for the given entity.

00:20:21.180 --> 00:20:22.330
So let's have a look a bit closer.

00:20:22.340 --> 00:20:27.900
If we look at the write XML response,
this is an example of an exported

00:20:28.000 --> 00:20:31.590
XML file from Final Cut Server.

00:20:32.190 --> 00:20:37.240
So at the top,
we've got the opening of the XML.

00:20:37.440 --> 00:20:41.070
And the critical piece of
information is the entity ID.

00:20:41.400 --> 00:20:45.290
So here we've got asset 2858.

00:20:45.880 --> 00:20:49.200
So every entity, every asset,
or every production in

00:20:49.290 --> 00:20:53.000
Final Cut Server has
this unique identifier.

00:20:53.050 --> 00:20:56.100
So there's this ID.

00:20:56.100 --> 00:20:56.100
So here--

00:20:56.590 --> 00:21:04.470
I am getting-- I've had a
subscription which has triggered

00:21:05.710 --> 00:21:05.710
the exporting of XML for this asset.

00:21:06.320 --> 00:21:09.820
In the next section,
I've actually got the actual metadata.

00:21:09.990 --> 00:21:15.840
So between the two metadata tags,
I've got all of the possible fields.

00:21:15.960 --> 00:21:18.200
And in a typical asset,
this would be much larger.

00:21:18.200 --> 00:21:22.200
I've just made it a bit
smaller for presentation.

00:21:22.380 --> 00:21:26.100
And down the bottom,
I'm just closing out the XML file.

00:21:28.730 --> 00:21:33.080
Now, when you're setting metadata
in Final Cut Server,

00:21:33.080 --> 00:21:35.680
there's the read XML response.

00:21:35.810 --> 00:21:42.290
So here, again,
we're opening the XML file.

00:21:42.600 --> 00:21:44.990
Again,
the very important thing here is I've

00:21:44.990 --> 00:21:48.420
got my set MD as well as the entity ID.

00:21:48.420 --> 00:21:55.680
So I'm changing asset of ID 11447.

00:21:56.280 --> 00:22:00.830
And then between the params,
I have the fields that

00:22:00.830 --> 00:22:02.190
I'm going to change.

00:22:02.320 --> 00:22:09.200
So here I'm changing my title, keywords,
description, and status.

00:22:09.370 --> 00:22:11.810
Then I'm just closing out the--

00:22:12.940 --> 00:22:15.640
Closing out the XML.

00:22:15.720 --> 00:22:18.300
So quite straightforward,
and we're going to see a lot more

00:22:18.300 --> 00:22:21.950
of that as we look at our examples.

00:22:23.100 --> 00:22:25.840
So the final method of integration that
I want to talk about is the ability

00:22:25.840 --> 00:22:30.970
to run external scripts or commands.

00:22:36.970 --> 00:22:44.020
So this allows for the running of a
local executable on the machine running

00:22:44.020 --> 00:22:47.930
the Final Cut Server server component.

00:22:49.810 --> 00:22:52.160
So the response has two settings.

00:22:52.160 --> 00:22:58.380
The first one is the command path,
so the path to the executable to be run.

00:22:58.880 --> 00:23:01.800
And the second one is the parameters.

00:23:01.990 --> 00:23:07.310
So what parameters do you
want to give the command?

00:23:09.090 --> 00:23:12.770
And the interesting thing about this
one is it actually accepts metadata

00:23:12.770 --> 00:23:16.560
field substitutions in the same way
that we saw with email yesterday.

00:23:16.720 --> 00:23:20.450
So you can actually put in--

00:23:20.600 --> 00:23:39.600
[Transcript missing]

00:23:41.500 --> 00:23:48.270
So the effective UID of the executable
is going to be the UID that's

00:23:48.270 --> 00:23:51.510
associated with Final Cut Server.

00:23:52.600 --> 00:23:56.210
So that's important to keep in mind
if there's any sort of permission

00:23:56.260 --> 00:24:01.610
issues or that sort of thing.

00:24:04.170 --> 00:24:07.360
Yes,
it's triggered from either a watcher,

00:24:07.390 --> 00:24:10.940
a schedule, or a subscription.

00:24:12.290 --> 00:24:14.140
So let me give you an example.

00:24:14.220 --> 00:24:19.680
There's the Graal application,
which allows for notifications.

00:24:21.410 --> 00:24:24.000
So have any of you used Graal?

00:24:24.060 --> 00:24:24.420
Great.

00:24:24.530 --> 00:24:26.500
So you know what Graal can do.

00:24:26.650 --> 00:24:29.540
So there's a command,
which is Graal Notify,

00:24:29.540 --> 00:24:33.220
which allows you to
actually set notifications.

00:24:33.220 --> 00:24:38.890
So what I can do is I can set a...

00:24:39.700 --> 00:24:43.900
"Response,
which is going to call Growl Notify.

00:24:43.900 --> 00:24:47.710
And then in my parameters,
I can set what the message is.

00:24:47.730 --> 00:24:50.600
So here I've got, you know, '-m'.

00:24:51.030 --> 00:24:53.750
Then Final Cut Server,
and you can see I have

00:24:54.000 --> 00:24:56.780
title in square brackets.

00:24:57.810 --> 00:25:02.990
So what's going to happen there is
the contents of the title metadata

00:25:02.990 --> 00:25:10.370
field will be substituted in to the
parameters when the command is run.

00:25:13.690 --> 00:25:20.830
So to actually trigger this response,
I need to make a subscription.

00:25:22.150 --> 00:25:27.370
So the details here are I am
subscribing to an asset.

00:25:28.630 --> 00:25:30.780
And then we've got the event types.

00:25:31.010 --> 00:25:37.850
So I'm looking for when assets are
either created-- or slightly under the

00:25:37.850 --> 00:25:42.380
scroll bar-- is created or modified.

00:25:43.700 --> 00:25:49.990
And then I have the responses that I want
to run as part of the subscription.

00:25:50.050 --> 00:25:54.180
So right now, for the filtering,
any time that any asset was

00:25:54.250 --> 00:25:57.770
either created or modified,
my response would run.

00:25:57.910 --> 00:25:59.610
So I get lots and lots of notifications.

00:25:59.760 --> 00:26:04.790
So I then want to filter down what my
subscription is going to trigger on.

00:26:05.040 --> 00:26:08.490
So to do that, I use asset filtering.

00:26:09.590 --> 00:26:13.080
So here I'm going to filter.

00:26:13.100 --> 00:26:20.570
I want to actually only get events when
the status equals ready for review.

00:26:20.720 --> 00:26:24.600
So let's actually have a look at that.

00:26:29.480 --> 00:26:34.510
So here I've got Final Cut Server,
and I have a single asset.

00:26:35.310 --> 00:26:40.420
So then if I... So I've got
everything set up the way we just saw.

00:26:40.420 --> 00:26:44.960
So if I then change this
asset and make it status,

00:26:44.960 --> 00:26:49.260
ready for review,
I'll actually see up here I now

00:26:49.390 --> 00:26:52.390
have my Grail notification.

00:26:55.730 --> 00:27:00.600
So it's a really simple way to
just build out notifications.

00:27:00.640 --> 00:27:04.100
And we've seen some great talks this
week on how to integrate with things

00:27:04.100 --> 00:27:06.470
like iChat and other technologies.

00:27:06.580 --> 00:27:11.970
So this kind of notification support
can be leveraged in many different

00:27:13.060 --> 00:27:17.560
ways to suit how you're going
to deploy in a given situation.

00:27:17.630 --> 00:27:19.980
So if we go back to the slides.

00:27:24.350 --> 00:27:30.250
So now I'm going to, we're actually,
so I've gone through the three.

00:27:30.670 --> 00:27:32.030
different methods of integration.

00:27:32.110 --> 00:27:36.800
So we've got reading and
writing of metadata in files.

00:27:37.340 --> 00:27:43.560
We've got the reading and writing of XML,
and we've got the ability to run

00:27:44.070 --> 00:27:49.070
executables as part of a workflow that
you've set up in Final Cut Server.

00:27:51.530 --> 00:27:56.130
So now we're going to look
at three examples of how

00:27:57.130 --> 00:28:01.060
these mechanisms can be used.

00:28:01.110 --> 00:28:05.410
We'll look at how to exchange
metadata with external systems.

00:28:06.500 --> 00:28:11.230
How to integrate with
Podcast Producer and how to

00:28:11.230 --> 00:28:14.490
integrate with a web application.

00:28:14.500 --> 00:28:17.400
And for this, we'll use Ruby on Rails.

00:28:19.750 --> 00:28:23.680
So, exchanging metadata
with external systems.

00:28:23.760 --> 00:28:27.340
There's many cases that you might want to
actually do this with Final Cut Server.

00:28:27.500 --> 00:28:30.770
In a lot of cases,
there might be existing

00:28:30.770 --> 00:28:32.910
repositories of metadata.

00:28:33.550 --> 00:28:37.880
that you will have before
you deploy Final Cut Server.

00:28:37.880 --> 00:28:43.070
Or there's some other systems that
do part of the asset management

00:28:43.430 --> 00:28:45.910
that you want to hand off to.

00:28:47.700 --> 00:28:51.880
Or in the example that we'll see,
there's additional sources of metadata

00:28:52.020 --> 00:28:57.400
that can actually get more information
than what Final Cut Server can do.

00:28:57.590 --> 00:29:03.290
So one example of an external
system that has lots of

00:29:03.290 --> 00:29:06.410
extensible metadata is Spotlight.

00:29:07.520 --> 00:29:12.810
So Spotlight, as we know,
comes with the Macs, and it's got very

00:29:12.890 --> 00:29:14.360
extensible metadata support.

00:29:14.360 --> 00:29:19.520
So there are-- in Spotlight,
you can query some 140--

00:29:19.800 --> 00:29:28.200
[Transcript missing]

00:29:28.490 --> 00:29:34.280
The metadata support for a given file,
plugins can be made for that purpose.

00:29:38.330 --> 00:29:43.890
So there's the mdls command,
which is a command line tool to query

00:29:43.890 --> 00:29:48.690
Spotlight metadata on a given file.

00:29:50.880 --> 00:29:54.500
So,
the way this works with Final Cut Server,

00:29:54.680 --> 00:30:00.810
so I've got Final Cut Server and
I've got Spotlight.

00:30:01.780 --> 00:30:05.060
So what I do in Final Cut Server is
to get metadata,

00:30:05.110 --> 00:30:08.030
I run a script.

00:30:08.280 --> 00:30:10.720
In this case, it's a Ruby script.

00:30:10.720 --> 00:30:13.280
I also export some XML.

00:30:14.490 --> 00:30:22.990
And then that runs against a file which
has been given to the Ruby script,

00:30:22.990 --> 00:30:27.560
which gets the metadata from
Spotlight using the NBLS command,

00:30:27.560 --> 00:30:33.900
and writes back an XML file using
the method we just saw earlier

00:30:34.550 --> 00:30:38.840
to then set the metadata for
that asset in Final Cut Server.

00:30:38.840 --> 00:30:44.240
So I'll now bring Eryk Vershen
up on stage to show that out.

00:30:50.400 --> 00:30:51.550
Can we switch to the demo?

00:30:51.560 --> 00:30:52.860
There we go.

00:30:52.860 --> 00:30:55.060
Okay, here's my Final Cut Server.

00:30:55.210 --> 00:30:59.260
There's nothing in here at the moment,
so let's switch over to the

00:30:59.260 --> 00:31:02.070
Finder and bring a song in.

00:31:02.180 --> 00:31:06.000
Now, I'm going to show you how
Spotlight metadata is brought in,

00:31:06.000 --> 00:31:07.740
so let's go ahead and upload this file.

00:31:07.740 --> 00:31:09.520
It uploads very quickly.

00:31:09.520 --> 00:31:14.660
Now, Final Cut Server doesn't understand
Spotlight metadata out of the box.

00:31:14.730 --> 00:31:19.710
We've gone ahead and added a
metadata group for Spotlight and

00:31:20.020 --> 00:31:22.640
also all the metadata fields.

00:31:23.030 --> 00:31:27.280
You notice I've got a variety of fields,
TIDEM and ALBUM and whatnot.

00:31:27.280 --> 00:31:29.990
The names here are all the names
that they'd have in Spotlight,

00:31:30.080 --> 00:31:34.460
and the reason I did that was just to
eliminate one level of translation.

00:31:34.790 --> 00:31:39.380
Now, that file doesn't have
the right metadata,

00:31:39.380 --> 00:31:43.000
so let's go ahead and just get rid of him

00:31:43.270 --> 00:31:45.760
I'm going to our administration window.

00:31:45.780 --> 00:31:49.700
Let's go ahead and trigger the
schedule that I have that's

00:31:49.700 --> 00:31:52.670
going to scan my iTunes library.

00:31:53.110 --> 00:31:56.070
This is scheduled ordinarily to
happen in the middle of the night.

00:31:56.080 --> 00:32:03.590
Let's go ahead and set
this up for 11:03 instead.

00:32:03.810 --> 00:32:06.280
So that's going to
trigger in a few seconds.

00:32:06.320 --> 00:32:09.790
And what it's going to
do is execute a response,

00:32:09.840 --> 00:32:12.730
which is this response down here.

00:32:12.770 --> 00:32:15.920
I actually built this response initially

00:32:16.100 --> 00:32:46.800
[Transcript missing]

00:32:47.200 --> 00:32:53.610
Go back and look at any of the
songs and look at their metadata.

00:32:53.720 --> 00:32:58.640
So let's go ahead and look at how
that works in a little more detail.

00:32:58.760 --> 00:33:04.420
So the scans are simply going
to scan the iTunes device.

00:33:04.750 --> 00:33:08.810
So I created a device
in Final Cut Server that

00:33:08.810 --> 00:33:10.840
points at my iTunes.

00:33:10.850 --> 00:33:16.590
And if we go over and look at the device,
we can see it's pointing at users,

00:33:16.590 --> 00:33:20.270
demo music, iTunes, iTunes music.

00:33:22.070 --> 00:33:28.420
The, um, the, so that,
that scan is just going

00:33:28.420 --> 00:33:30.990
to bring in the assets,
but it's not going to pick

00:33:30.990 --> 00:33:32.280
up the spotlight metadata.

00:33:32.300 --> 00:33:35.860
In order to do that,
what we're doing is we're

00:33:35.860 --> 00:33:37.800
running a subscription.

00:33:39.320 --> 00:33:43.000
And that subscription
is going to trigger,

00:33:43.000 --> 00:33:47.900
as Matt said, on created assets.

00:33:48.340 --> 00:33:50.230
And it's going to have
an asset filter and say,

00:33:50.360 --> 00:33:54.050
I only want to pick up
things that are stored on my

00:33:54.270 --> 00:33:58.350
I-Tunes volume and things that
are actually document resources.

00:34:00.460 --> 00:34:03.400
Once that triggers,
it's going to do two responses.

00:34:03.400 --> 00:34:05.380
It's going to do a write XML response.

00:34:05.390 --> 00:34:08.990
Now, the write XML response is going to
dump all the metadata for that asset.

00:34:09.020 --> 00:34:12.180
And the reason we're doing that is
simply we want to pick up more than just

00:34:12.180 --> 00:34:15.740
a couple of fields from the metadata.

00:34:15.760 --> 00:34:19.960
And it's much easier to just dump
the entire XML than to pass all those

00:34:19.960 --> 00:34:22.510
on the command line to the script.

00:34:22.920 --> 00:34:25.770
So then it's going to execute our script,
this getMetadata script.

00:34:25.920 --> 00:34:29.190
Let's go ahead and look
at what that looks like.

00:34:29.200 --> 00:34:31.110
And here's the script.

00:34:31.200 --> 00:34:33.800
Not much of anything in here.

00:34:33.800 --> 00:34:39.310
It's just calling my mdimport
command and passing it the title.

00:34:40.790 --> 00:34:47.700
Let's go ahead and go over to TextMate
and take a look at that script.

00:34:47.740 --> 00:34:48.700
So it's a Ruby script.

00:34:48.770 --> 00:34:51.540
The front's the, you know,
standard set of things.

00:34:51.540 --> 00:34:57.540
I'm picking up my argument here,
and I'm going to open up the file,

00:34:57.540 --> 00:35:02.350
which is actually the XML file that
Final Cut Server has written out.

00:35:02.570 --> 00:35:05.850
And then I'm going to use
a library that I have here.

00:35:06.270 --> 00:35:11.200
to just simply pull in all of the
metadata from that file as a Ruby object.

00:35:11.200 --> 00:35:14.010
Now,
the next thing I have to do is I actually

00:35:14.130 --> 00:35:16.880
have to pull in my Spotlight metadata.

00:35:17.780 --> 00:35:21.300
Well, the Spotlight metadata,
as Matt said,

00:35:21.300 --> 00:35:23.770
comes in from the mdls command.

00:35:23.990 --> 00:35:31.450
So we can do mdls on
this file that's here,

00:35:31.450 --> 00:35:31.450
and as you can see,

00:35:32.390 --> 00:35:36.410
What we're getting is
all the various metadata.

00:35:36.450 --> 00:35:41.190
There's the album, audio bit rate,
et cetera.

00:35:41.720 --> 00:35:44.780
Now, the first problem I had was, well,
OK, how am I going to parse

00:35:44.780 --> 00:35:46.180
this spotlight metadata?

00:35:46.200 --> 00:35:50.960
Well, it turns out that the format
that MDLS is putting out is very

00:35:51.030 --> 00:35:52.820
close to something called YAML.

00:35:52.820 --> 00:35:54.740
Now, I know about YAML because
I worked with Rails,

00:35:54.740 --> 00:35:56.900
and I use it quite a bit.

00:35:56.900 --> 00:35:59.420
YAML stands for YAML Ain't
Markup Language.

00:35:59.420 --> 00:36:02.350
And what it is is a data
serialization language that's

00:36:02.360 --> 00:36:04.040
intended to be human readable.

00:36:04.080 --> 00:36:07.870
So what I did is I wrote a little script.

00:36:08.610 --> 00:36:13.460
That converts the
MDLS output into YAML output.

00:36:13.480 --> 00:36:16.440
And you notice that looks almost
identical to what I had before.

00:36:16.440 --> 00:36:18.280
There's not much going on there.

00:36:18.280 --> 00:36:21.780
If we go ahead and look
at my script there,

00:36:21.780 --> 00:36:23.520
we can see that it's very simple.

00:36:23.520 --> 00:36:27.150
It's just running the MDLS,
and then it's just running it

00:36:27.270 --> 00:36:31.640
through a set to change a few
characters in order to make it valid.

00:36:31.640 --> 00:36:33.810
So let's go back to our script,
take a look.

00:36:33.880 --> 00:36:37.040
So that means that I can pull
in all of my spotlight metadata

00:36:37.040 --> 00:36:38.590
with just those two lines.

00:36:38.730 --> 00:36:45.030
The first line's pointing at the
actual file in my iTunes library.

00:36:45.040 --> 00:36:47.650
I know where the iTunes library is.

00:36:47.740 --> 00:36:48.640
That's in this variable.

00:36:48.640 --> 00:36:53.230
And I'm pulling the location
within the iTunes library from

00:36:53.230 --> 00:36:58.400
this Final Cut Server metadata,
and I'm pulling the file name.

00:36:58.420 --> 00:37:00.480
And then I can just do one command,
and I've pulled in all

00:37:00.480 --> 00:37:01.610
of my spotlight metadata.

00:37:01.730 --> 00:37:05.080
So I can just go ahead and pull in all
of my spotlight metadata as Ruby objects.

00:37:05.120 --> 00:37:08.120
But I don't want all of my spotlight
metadata to go back to Final Cut Server.

00:37:08.120 --> 00:37:12.450
So I've got an array of data types here,
letting me know just the

00:37:12.450 --> 00:37:13.930
fields that I'm interested in.

00:37:14.010 --> 00:37:16.270
If I hadn't named those
fields identically,

00:37:16.340 --> 00:37:20.270
I'd have to have another layer mapping in
here to go from the spotlight name into

00:37:20.270 --> 00:37:22.650
the name that Final Cut Server was using.

00:37:24.770 --> 00:37:28.610
Then at the bottom here,
all I'm doing is just copying

00:37:29.010 --> 00:37:32.940
the-- using that set of
fields that I'm interested in,

00:37:33.000 --> 00:37:37.200
copying those fields from the object
that has the spotlight metadata into an

00:37:37.200 --> 00:37:42.680
object that I'm going to use to write
out metadata for Final Cut Server.

00:37:43.050 --> 00:37:47.910
Then I just simply open up a file in
a location where Final Cut Server is

00:37:47.960 --> 00:37:51.430
going to be running a watcher.

00:37:51.520 --> 00:37:53.760
I pass it some values.

00:37:53.760 --> 00:37:55.420
I pass it the data types.

00:37:55.440 --> 00:37:59.320
I pass it the entity ID that I picked
up and just tell it to write it out,

00:37:59.320 --> 00:38:01.240
and now it's all the way out there.

00:38:01.360 --> 00:38:05.000
So back in Final Cut Server,
what happened was I had a watcher.

00:38:05.050 --> 00:38:11.990
Here's the spotlight watcher,
and all it's doing, it's looking at the

00:38:12.990 --> 00:38:17.670
It's looking at the volume
where I'm writing out the XML.

00:38:17.990 --> 00:38:22.500
It does a read XML and then deletes
the file so it's not sitting around.

00:38:22.650 --> 00:38:27.660
And read XML just simply pulls in
that XML file and does whatever

00:38:27.830 --> 00:38:30.170
the XML file tells it to you.

00:38:30.540 --> 00:38:34.710
I'll go into a little more detail
on what the XML looks like and

00:38:34.720 --> 00:38:38.140
how I'm picking those up from
the library in the next demo.

00:38:46.300 --> 00:38:51.600
So we can see from that there's now the
ability to integrate with all manner

00:38:51.600 --> 00:38:57.150
of different other systems that might
have metadata or other information that

00:38:57.150 --> 00:39:00.210
you want to integrate with your assets.

00:39:01.610 --> 00:39:07.480
And this mechanism could be
extended to integrate with maybe a

00:39:07.480 --> 00:39:13.170
FileMaker Pro system or some other
such systems that you want to use

00:39:13.170 --> 00:39:15.890
as part of your entire workflow.

00:39:17.290 --> 00:39:20.700
Or if there's metadata in
some other file format,

00:39:20.740 --> 00:39:25.060
then some other command line tool can
be used to query that metadata and

00:39:25.060 --> 00:39:27.950
put it back into Final Cut Server.

00:39:29.010 --> 00:39:32.800
Maybe you want to get metadata from
Word documents or something else.

00:39:32.860 --> 00:39:36.640
These sort of mechanisms
can allow you to do that.

00:39:37.150 --> 00:39:41.530
So let's have a look at our next example,
which is to integrate

00:39:42.150 --> 00:39:44.260
with Podcast Producer.

00:39:44.890 --> 00:39:47.540
So who's using Podcast Producer?

00:39:47.620 --> 00:39:48.100
A few of you?

00:39:48.100 --> 00:39:48.740
OK.

00:39:48.860 --> 00:39:54.630
So there's a number of different
ways that you can actually

00:39:54.640 --> 00:39:59.070
leverage Final Cut Server and
Podcast Producer together.

00:39:59.350 --> 00:40:02.770
So, as you know,
Podcast Producer is included

00:40:02.830 --> 00:40:04.660
with Leopard Server.

00:40:07.090 --> 00:40:12.480
And one easy way to integrate is
to actually use Final Cut Server to

00:40:12.480 --> 00:40:16.910
actually catalog your podcast content.

00:40:17.510 --> 00:40:23.030
So you can set your podcast
repository as a device.

00:40:23.710 --> 00:40:28.500
And you can scan that device and
any new podcasts automatically get

00:40:28.540 --> 00:40:32.880
added as assets in Final Cut Server,
which can then be used in your

00:40:32.880 --> 00:40:35.640
Final Cut Server workflows.

00:40:35.640 --> 00:40:41.070
You can use the various,
the Java clients, so forth and so on,

00:40:41.070 --> 00:40:44.420
to look at the assets, to do things,
to download them,

00:40:44.580 --> 00:40:46.300
to have metadata about them.

00:40:46.320 --> 00:40:48.590
Now, one important thing is
when you're actually,

00:40:48.690 --> 00:40:51.870
in your podcast repository,
you might actually have a number of

00:40:51.870 --> 00:40:54.860
different file types for a given podcast.

00:40:54.920 --> 00:40:59.570
So, you know, large, small, iPhone,
so forth and so on.

00:40:59.710 --> 00:41:04.440
What you can do is when you set up
a scan in Final Cut Server is you

00:41:04.440 --> 00:41:10.630
can use regular expression matching
to actually match only a given size.

00:41:10.680 --> 00:41:14.920
So, say you only want to
catalog the large files.

00:41:18.880 --> 00:41:26.090
Now, if you went to the
podcast integration talks,

00:41:26.500 --> 00:41:29.680
Or if you've used Podcast before,
you might be aware of the

00:41:29.680 --> 00:41:33.320
command line tools that are
available in Podcast Producer.

00:41:33.400 --> 00:41:38.110
These are very powerful and allow you
to do a lot of very interesting things.

00:41:38.720 --> 00:41:43.590
So there's the podcast,
and you can do lots of things with that,

00:41:43.590 --> 00:41:45.830
including submit podcasts.

00:41:46.670 --> 00:41:54.720
And then there's PCAST Action that
allows you to process audio and video.

00:41:57.160 --> 00:42:00.920
So what we can do from
Final Cut Server is we can leverage

00:42:00.920 --> 00:42:06.370
these commands to do some very
interesting things with our assets.

00:42:08.240 --> 00:42:18.410
So, what I've done here is I've made
a Podcast Producer metadata group,

00:42:18.450 --> 00:42:22.690
and I've made a number
of fields for that group.

00:42:23.910 --> 00:42:31.490
And I've got subscriptions which
trigger either using a user-bind

00:42:31.490 --> 00:42:34.030
podcast or a PCAST action.

00:42:34.900 --> 00:42:38.410
"Depending on whether I check
one of these check boxes.

00:42:38.700 --> 00:42:43.380
So for example,
I'm able to use PCAST action to

00:42:43.500 --> 00:42:46.990
add a watermark to a given asset.

00:42:48.830 --> 00:42:55.220
Or I could submit that
asset to a podcast workflow.

00:42:55.780 --> 00:42:59.950
or add a slate,
or merge two clips together if

00:42:59.950 --> 00:43:05.100
I know the asset ID of another clip,
or even use pick-ass

00:43:05.230 --> 00:43:07.280
action to actually title.

00:43:09.220 --> 00:43:12.280
So these are just some
of the possibilities.

00:43:12.280 --> 00:43:14.740
There's much more you can do.

00:43:14.770 --> 00:43:18.040
And the great thing is that
you can then integrate these

00:43:18.110 --> 00:43:20.220
actions into a given workflow.

00:43:20.340 --> 00:43:23.520
So say, for example,
that you wanted to add a slate to

00:43:23.540 --> 00:43:26.370
everything going to a Playout server.

00:43:27.690 --> 00:43:33.440
Then you can have your response,
which goes to the Playout server,

00:43:33.440 --> 00:43:40.440
run the Add Slate command to call
PCAST action to add a given slate,

00:43:40.440 --> 00:43:43.680
and your slate could be
populated with metadata,

00:43:43.680 --> 00:43:46.920
which has come in from
the actual asset itself.

00:43:51.070 --> 00:43:52.650
So let's actually have a look at that.

00:43:52.760 --> 00:44:01.170
So again, I've got Final Cut Server here.

00:44:02.930 --> 00:44:11.790
And what I can do is I can
search for some content here.

00:44:13.240 --> 00:44:17.100
I've got my Podcast Producer.

00:44:17.100 --> 00:44:19.100
Let me just use this one here.

00:44:19.360 --> 00:44:24.100
And so I can see I've got
my various things I can do.

00:44:24.100 --> 00:44:27.740
I can submit this to a podcast,
and then it can choose

00:44:27.870 --> 00:44:30.040
my different podcasts.

00:44:30.130 --> 00:44:36.330
So I can configure a lookup to match
the various podcast options I have.

00:44:37.570 --> 00:44:39.460
Or maybe you want to
add two clips together,

00:44:39.630 --> 00:44:43.510
so I've got my, I can choose merge clips.

00:44:43.870 --> 00:44:47.420
And I can choose, say,
look at this one and

00:44:47.430 --> 00:44:50.190
see the asset ID is 118.

00:44:52.140 --> 00:45:00.480
So if I do 118 and save changes,
then what happens is

00:45:00.480 --> 00:45:02.710
I've got a subscription.

00:45:03.270 --> 00:45:09.210
Looking for when I have
the merge clips selected.

00:45:10.770 --> 00:45:16.520
And then it calls a script which calls
PCAST action to then merge this asset

00:45:16.640 --> 00:45:21.600
as well as my asset with the ID of 118.

00:45:21.600 --> 00:45:22.740
It should be done by about now.

00:45:22.740 --> 00:45:25.910
So if I then have a
look at my merged clips,

00:45:25.930 --> 00:45:27.210
so here we are.

00:45:27.340 --> 00:45:32.580
So I've now got a new asset with
the two of them merged together.

00:45:38.680 --> 00:45:42.280
So I really, I've got a simple,
very simple merge.

00:45:42.330 --> 00:45:47.420
So that's just one of the many, many,
many things you can do with integrating.

00:45:47.480 --> 00:45:50.480
But you can see how you can then
leverage the command line tools

00:45:50.480 --> 00:45:54.520
of Podcast Producer and the
ability to then run the scripts or

00:45:54.520 --> 00:45:59.470
commands from Final Cut Server and
build them into a workflow.

00:45:59.540 --> 00:46:06.180
So if we go back to the slides, please.

00:46:10.320 --> 00:46:14.480
So the next example we're
going to talk about is how to

00:46:14.480 --> 00:46:18.260
integrate with a web application.

00:46:20.910 --> 00:46:24.130
Now, we're going to use
Ruby on Rails for this.

00:46:24.230 --> 00:46:27.710
Ruby on Rails is great because
it's included with Leopard.

00:46:28.840 --> 00:46:31.900
It's really easy to work with and deploy.

00:46:31.930 --> 00:46:36.070
And there was a fantastic talk yesterday
afternoon on how to actually use

00:46:36.380 --> 00:46:41.210
Ruby on Rails and build Ruby on Rails to
do some very interesting websites.

00:46:42.470 --> 00:46:47.280
So, you can use Ruby on Rails to,
or other applications,

00:46:47.390 --> 00:46:52.530
to make some media-rich web applications.

00:46:55.870 --> 00:47:00.770
Then you can leverage Final Cut Server to
actually generate the web formats

00:47:01.340 --> 00:47:09.300
and exchange metadata from
Final Cut Server to the web application.

00:47:13.130 --> 00:47:18.790
And the key thing is that the asset
on Final Cut Server is linked to the

00:47:19.900 --> 00:47:23.400
clip in Ruby on Rails by the asset ID.

00:47:23.700 --> 00:47:25.200
So we keep on seeing that asset ID.

00:47:25.200 --> 00:47:27.030
We saw it in the XML.

00:47:27.450 --> 00:47:31.400
So the asset ID is very,
very important to us.

00:47:31.830 --> 00:47:39.440
And is the way to link external
applications and Final Cut Server.

00:47:40.780 --> 00:47:44.630
So, in addition,
so changes in metadata on the

00:47:45.590 --> 00:47:50.200
website can then be used to trigger
automations in Final Cut Server.

00:47:50.290 --> 00:47:55.790
So, for example, let's say you change the
status on the website to,

00:47:55.790 --> 00:47:57.460
say, rejected.

00:47:57.730 --> 00:47:59.160
or approved.

00:47:59.210 --> 00:48:03.420
Then it can then send
back to Final Cut Server

00:48:03.590 --> 00:48:06.040
To then, you know,
send out emails or do whatever

00:48:06.040 --> 00:48:10.460
has been set up when your
asset is set to rejected.

00:48:14.650 --> 00:48:15.940
So let's have a look at how this works.

00:48:16.180 --> 00:48:22.270
So we've got Final Cut Server and
our Rails website.

00:48:23.900 --> 00:48:29.670
Now, Final Cut Server,
based upon a subscription,

00:48:29.670 --> 00:48:34.370
which we've seen earlier,
will export both XML,

00:48:34.710 --> 00:48:40.280
the required QuickTime formats
for the website,

00:48:40.280 --> 00:48:43.310
as well as run a script.

00:48:43.830 --> 00:48:50.610
And all this then generates a
clip in the Rails application.

00:48:52.890 --> 00:48:55.960
So the key thing is these are
two separate repositories.

00:48:55.960 --> 00:49:02.010
You can have your web app on
a completely different system.

00:49:02.880 --> 00:49:07.130
And in addition,
you can leverage the compressor

00:49:07.150 --> 00:49:12.910
options in Final Cut Server to go
out to different formats as well.

00:49:13.650 --> 00:49:16.750
So one thing I discussed
yesterday is Compressor has

00:49:16.770 --> 00:49:18.820
additional plug-in support.

00:49:18.990 --> 00:49:24.940
So if your web application requires
something like Flash or Windows Media,

00:49:24.970 --> 00:49:29.340
you can use the plug-in support
in Compressor to use something

00:49:29.340 --> 00:49:35.770
like Episode Pro from Telestream
to go to those additional formats.

00:49:38.320 --> 00:49:43.900
So then, from the Rails application to
get back to Final Cut Server,

00:49:43.940 --> 00:49:47.090
we're just using the mechanisms
that we've seen earlier.

00:49:47.250 --> 00:49:54.760
So the Rails application writes an XML,
which can then change the metadata

00:49:54.760 --> 00:49:57.070
for the asset in Final Cut Server.

00:49:59.140 --> 00:50:01.340
So let's actually have a look at that.

00:50:01.340 --> 00:50:04.560
And we've got Eryk back
to give you a demo.

00:50:07.800 --> 00:50:12.040
Okay, so here we are in our
Final Cut Server again.

00:50:12.040 --> 00:50:15.080
You see I've got a few clips in here.

00:50:15.100 --> 00:50:17.730
Now, if I go and look at this clip,
once again,

00:50:17.730 --> 00:50:21.230
in order to make things happen,
we need to have a metadata group.

00:50:21.360 --> 00:50:23.210
So we have this website metadata group.

00:50:23.280 --> 00:50:25.670
And as you can see,
we have the center web.

00:50:25.670 --> 00:50:28.690
I already clicked on the center web,
which has already

00:50:28.690 --> 00:50:30.300
caused things to happen.

00:50:30.300 --> 00:50:34.290
Let's go ahead and take a look at our...

00:50:34.780 --> 00:50:36.130
Well, actually, I want to leave that up.

00:50:36.260 --> 00:50:39.960
Just for grins, you can see, by the way,
our status is none.

00:50:39.960 --> 00:50:42.540
Let's go over and look at our web app.

00:50:42.620 --> 00:50:47.570
Here's our simple web app that we made
where I can get clips in and review them.

00:50:47.580 --> 00:50:49.970
So let's click over and
take a look at our clip.

00:50:50.180 --> 00:50:52.320
Now,
if I was actually reviewing this clip,

00:50:52.400 --> 00:50:53.580
I might want to play it.

00:50:53.580 --> 00:50:59.830
And then down here at the bottom,
I can make some comments.

00:50:59.950 --> 00:51:03.170
So I'm just going to say that's a...

00:51:03.680 --> 00:51:06.390
I'll have to learn how to type first.

00:51:06.390 --> 00:51:08.910
And let's see, we'll pretend I'm Bob.

00:51:09.130 --> 00:51:10.500
Let's go ahead and add a comment.

00:51:10.680 --> 00:51:12.140
That comment gets added.

00:51:12.260 --> 00:51:13.440
And now I want to update.

00:51:13.440 --> 00:51:15.760
I'm going to say, oh, yes,
I'm approving this.

00:51:15.760 --> 00:51:19.720
If we go back and look in
Final Cut Server and see,

00:51:19.720 --> 00:51:22.550
well, it hasn't updated yet.

00:51:22.560 --> 00:51:25.100
Let's click on the reload.

00:51:26.110 --> 00:51:27.380
And there we go.

00:51:27.400 --> 00:51:30.250
Now it says approved,
and I look at the website information,

00:51:30.330 --> 00:51:32.820
and I see the comments coming back.

00:51:32.830 --> 00:51:35.250
So let's see, how did that actually work?

00:51:35.250 --> 00:51:38.900
Let's go to our administration pane.

00:51:38.900 --> 00:51:41.810
I want to mention that the administration
pane is something that you can

00:51:41.930 --> 00:51:44.520
turn off for a particular user,
so that's not something that

00:51:44.520 --> 00:51:47.020
everybody necessarily gets,
and you certainly wouldn't

00:51:47.020 --> 00:51:48.400
want everybody to get it.

00:51:50.180 --> 00:51:52.960
So if we go ahead and look at this,
the first thing that we're going

00:51:52.970 --> 00:51:55.310
to look at is the subscription,
which is the main thing

00:51:55.310 --> 00:51:56.430
that triggers this.

00:51:56.430 --> 00:52:00.700
So the subscription is looking
at both created and modified

00:52:00.700 --> 00:52:05.380
modification events on assets,
and the only thing we're looking

00:52:05.380 --> 00:52:07.460
at here is the send to web.

00:52:07.460 --> 00:52:12.360
If send to web equals true,
we're going to trigger the subscription,

00:52:12.410 --> 00:52:16.280
and it's going to do the
responses we have in this list.

00:52:16.430 --> 00:52:17.640
It's going to do a number of things.

00:52:17.710 --> 00:52:19.910
So number one,
we're going to do some transcodes.

00:52:20.180 --> 00:52:22.820
So that the web app
doesn't have to do that.

00:52:22.840 --> 00:52:24.380
So we're going to make a JPEG thumbnail.

00:52:24.530 --> 00:52:27.480
We're going to make a couple of
QuickTimes in different sizes.

00:52:27.660 --> 00:52:29.470
Then I'm going to write
out the XML again,

00:52:29.480 --> 00:52:32.530
just because I want to
pick up a number of fields,

00:52:32.570 --> 00:52:34.410
and it's much easier to do it that way.

00:52:34.420 --> 00:52:38.780
And then we're going to go ahead
and call our last response,

00:52:38.780 --> 00:52:39.590
which is a script response.

00:52:39.990 --> 00:52:43.580
If we go over and look at the responses,
I can show you one of those,

00:52:43.580 --> 00:52:44.720
like the JPEG thumbnail.

00:52:44.840 --> 00:52:45.740
That's pretty straightforward.

00:52:45.740 --> 00:52:51.420
It's got a destination,
a device that we're actually going to

00:52:51.420 --> 00:52:56.560
be copying stuff to and a particular
relative path within that device,

00:52:56.560 --> 00:52:58.420
and then transcode settings.

00:52:59.010 --> 00:53:01.420
When I create a device,
I can set up a number of

00:53:01.430 --> 00:53:04.610
different transcode settings,
and I can change that

00:53:04.640 --> 00:53:06.270
after the fact if I want.

00:53:06.300 --> 00:53:08.920
In this case, for this device,
since I know these are the

00:53:08.920 --> 00:53:11.430
only transcodes I want to do,
I make those the only ones

00:53:11.430 --> 00:53:13.020
that are available in the list.

00:53:16.480 --> 00:53:17.140
Don't save that.

00:53:17.300 --> 00:53:20.200
And let's go ahead and
look at our script again.

00:53:20.200 --> 00:53:21.080
Here's the script.

00:53:21.180 --> 00:53:24.490
The script looks pretty simple,
just like the last one did.

00:53:24.500 --> 00:53:28.900
It's calling a particular script,
our little add asset script

00:53:28.960 --> 00:53:32.250
that we've distributed as
part of the Rails application.

00:53:32.250 --> 00:53:35.320
Let's go over and look and
see what that looks like.

00:53:35.390 --> 00:53:39.580
It's another Ruby script doing
typical Ruby things at the front end.

00:53:39.580 --> 00:53:41.700
In this case,
because we're talking to Rails,

00:53:41.790 --> 00:53:44.080
we're actually connecting
to the database.

00:53:46.410 --> 00:53:49.190
Those of you who are familiar with
Rails will realize that I'm only

00:53:49.190 --> 00:53:53.640
connecting to the development database,
and that really needs to be configurable.

00:53:53.660 --> 00:53:56.590
So we pick up the title
from the arguments.

00:53:57.010 --> 00:54:00.160
We're using that again
to pick up the file.

00:54:00.300 --> 00:54:03.800
And you notice in this case,
the path looks a little bit different.

00:54:03.800 --> 00:54:07.520
This time we're pointing at where, again,
we're pointing at where

00:54:07.910 --> 00:54:09.900
Final Cut Server wrote out that XML.

00:54:09.900 --> 00:54:13.960
And we're using the title that we were
passed because we know that's going to

00:54:13.970 --> 00:54:17.400
be the name that Final Cut Server is
going to give that file.

00:54:17.740 --> 00:54:21.160
We just open up the file,
and then we use our little library

00:54:21.220 --> 00:54:23.680
to pull in all the values as hash.

00:54:23.720 --> 00:54:25.480
And I promised I'd talk
about that a little bit more,

00:54:25.500 --> 00:54:26.720
so let's go look at that library.

00:54:26.720 --> 00:54:28.790
Just a little bit of Ruby code.

00:54:28.790 --> 00:54:30.180
It's not that big.

00:54:30.180 --> 00:54:35.240
And when I'm pulling the values back,
what it's really doing is getting

00:54:35.250 --> 00:54:39.810
the document if it doesn't have
it and extracting the hashes.

00:54:39.820 --> 00:54:44.100
And what that's doing,
if we look down here,

00:54:44.100 --> 00:54:46.820
we're using the RexML library.

00:54:47.740 --> 00:54:51.680
That's built in that comes
with the Ruby distribution.

00:54:52.070 --> 00:54:55.300
And we're simply creating
a RexML document.

00:54:55.760 --> 00:54:59.170
Then when we want to extract the values,

00:55:00.390 --> 00:55:07.020
We're simply using RuxML allows us to
type an XPath expression to pick up

00:55:07.020 --> 00:55:13.760
the values that we're interested in,
and then we store the text into one hash,

00:55:13.760 --> 00:55:18.660
and we store the data
type into another hash.

00:55:21.740 --> 00:55:22.860
Back in here, we've picked that up.

00:55:22.920 --> 00:55:26.330
Now, ordinarily,
I would be deleting the file after

00:55:26.630 --> 00:55:29.080
I was done with it because there's
no reason to have it around,

00:55:29.080 --> 00:55:31.170
but I'm leaving it around so
we can take a look at the file

00:55:31.230 --> 00:55:32.610
that actually got generated.

00:55:32.730 --> 00:55:34.900
I'm picking up the asset ID.

00:55:35.110 --> 00:55:41.600
I'm doing a little fix-up here,
and then I'm copying the

00:55:41.600 --> 00:55:41.600
files over from where...

00:55:41.780 --> 00:55:47.130
Final Cut Server wrote them out to where
my Rails application wants them to be.

00:55:47.360 --> 00:55:51.340
Then as the last thing I'm doing,
I'm just going to use Rails,

00:55:51.340 --> 00:55:55.280
use Active Record to create a new record
in the database that has the title,

00:55:55.280 --> 00:55:58.350
has the asset ID,
because I'm going to need that when

00:55:58.390 --> 00:56:03.290
I go back to Final Cut Server and a few
other fields that I'm interested in.

00:56:04.150 --> 00:56:08.160
Now, you'll remember that when we were
over here in the web application,

00:56:08.340 --> 00:56:09.140
we clicked on Update.

00:56:09.250 --> 00:56:11.970
So what happened when we hit Update?

00:56:13.010 --> 00:56:16.500
Well, in the Rails application,
that update's going to

00:56:16.570 --> 00:56:19.270
happen in Clips Controller.

00:56:20.150 --> 00:56:21.940
Here's the update.

00:56:21.960 --> 00:56:24.530
And the write-out is just
happening right here.

00:56:24.710 --> 00:56:28.040
I've got one line that's calling
a little library routine.

00:56:28.040 --> 00:56:30.040
So we'll look at that library routine.

00:56:30.040 --> 00:56:34.230
And all it's doing is first
reformatting the web comments

00:56:34.230 --> 00:56:39.000
from the list that's available in
the JavaScript world over into a

00:56:39.080 --> 00:56:42.080
single string for Final Cut Server.

00:56:42.080 --> 00:56:48.840
I make a hash with the values that
I want to send back to Final Cut Server.

00:56:50.270 --> 00:56:53.370
I undo some of that
normalization I was doing before,

00:56:53.370 --> 00:56:56.310
and I set up data types as well.

00:56:56.400 --> 00:56:59.150
Then to write it out, I'm simply

00:56:59.390 --> 00:57:02.720
Opening up a file using
my little library.

00:57:02.820 --> 00:57:07.380
You can see I'm setting the entity ID,
using the asset ID to recreate the

00:57:07.400 --> 00:57:11.770
entity ID that Final Cut Server wants in
order to make sure that we're going back

00:57:11.820 --> 00:57:14.400
to the asset that we originated from.

00:57:14.770 --> 00:57:17.530
Setting the values,
setting the data types,

00:57:17.530 --> 00:57:19.280
and then writing that out.

00:57:19.280 --> 00:57:23.630
Let's look at the library again and
see what happens when we write out.

00:57:23.630 --> 00:57:24.860
Here's the write.

00:57:24.860 --> 00:57:27.970
Again, it's using RexML,
creating a document.

00:57:28.080 --> 00:57:30.790
It's putting in the
Final Cut Server element,

00:57:30.930 --> 00:57:32.880
putting in the request elements.

00:57:33.000 --> 00:57:36.330
It says we're setting the
metadata and the entity ID.

00:57:36.330 --> 00:57:40.180
And then we're going ahead and
adding the individual elements,

00:57:40.180 --> 00:57:43.310
the MD value, file name, and data type.

00:57:43.370 --> 00:57:45.690
Let's go ahead and look at those files.

00:57:45.690 --> 00:57:52.650
So here's the file that we
got from Final Cut Server.

00:57:52.840 --> 00:57:59.500
As you can see, it has a few more fields
than we saw in the slides,

00:57:59.500 --> 00:58:02.660
but the structure here is very regular,
right?

00:58:02.660 --> 00:58:06.430
All I'm doing is every time there's a
field name that tells me what it is,

00:58:06.470 --> 00:58:08.590
a data type to tell me
what kind of thing it is,

00:58:08.590 --> 00:58:09.730
and then the value.

00:58:09.730 --> 00:58:13.160
So when I generate the XML, oh,
I want to do one thing,

00:58:13.160 --> 00:58:16.000
and notice our asset here is asset 23.

00:58:18.020 --> 00:58:20.740
So here's the file that I'm sending back.

00:58:20.740 --> 00:58:23.790
That's formatted a little funny,
so let's fix that up real quick.

00:58:23.840 --> 00:58:31.130
As you can see, the request is saying,
OK, I want to alter entity ID asset 23,

00:58:31.180 --> 00:58:33.180
and I want to do a set metadata.

00:58:33.230 --> 00:58:36.030
And as you notice,
what I'm sending back here,

00:58:36.030 --> 00:58:39.210
I'm only sending back the
values I want to change.

00:58:39.510 --> 00:58:43.340
And the structure here is exactly the
same as the structure was when I was

00:58:43.430 --> 00:58:45.690
getting things from Final Cut Server.

00:58:45.730 --> 00:58:47.740
MD value is the element.

00:58:47.740 --> 00:58:53.000
It has a data type, it has a field name,
and it has the actual value of the data.

00:58:54.900 --> 00:58:59.190
So that's brought everything back
and gone around in the whole loop,

00:58:59.260 --> 00:59:02.660
and that's the way you typically
do things in this loop.

00:59:02.760 --> 00:59:06.190
You have some subscription,
it's got a response,

00:59:06.240 --> 00:59:09.750
it's sending stuff out to whatever
your external application is,

00:59:09.750 --> 00:59:12.180
and when that application
wants to send things back,

00:59:12.310 --> 00:59:15.590
it's putting that stuff into a
watch folder that's coming back in.

00:59:16.960 --> 00:59:21.460
The watcher, again,
like the other watcher, is really simple.

00:59:21.460 --> 00:59:25.550
The watcher is just simply
pointing at a particular

00:59:25.550 --> 00:59:29.860
location within the file system,
in this case, the review file system.

00:59:29.860 --> 00:59:32.160
And ordinarily, I would do a delete,
but in this case,

00:59:32.210 --> 00:59:34.500
I wasn't doing delete because
I wanted to be able to show

00:59:34.510 --> 00:59:35.940
you what the file looked like.

00:59:37.520 --> 00:59:39.500
And that's pretty much it.

00:59:39.560 --> 00:59:41.330
Erk Vershen

00:59:45.430 --> 00:59:50.100
So you can see this is very,
very powerful.

00:59:50.160 --> 00:59:54.290
What Eryk didn't mention is
all of this Rails application,

00:59:54.290 --> 00:59:59.000
all the sample code,
is now up on the WWDC site,

00:59:59.000 --> 01:00:01.680
and it's associated with this talk.

01:00:01.950 --> 01:00:08.900
So all of the Rails code as well
as how to actually do it all.

01:00:09.690 --> 01:00:14.470
You can now grab and download and
start to do some interesting things.

01:00:14.480 --> 01:00:18.300
So we've showed here--

01:00:18.660 --> 01:00:23.320
Just a simple example of how
you might use a Rails app for

01:00:23.320 --> 01:00:26.210
some clip review and approve.

01:00:27.360 --> 01:00:30.340
But there's plenty of other
very interesting possibilities.

01:00:30.340 --> 01:00:35.200
So the talk yesterday talked
about how you could make an iPhone

01:00:35.930 --> 01:00:38.170
interface using Ruby on Rails.

01:00:39.120 --> 01:00:45.110
And if you didn't see that,
then grab it on iTunes after the show.

01:00:46.660 --> 01:00:51.900
So you can actually start to
very easily make iPhone assets,

01:00:51.960 --> 01:00:57.350
clips for the iPhone available
through some very simple mechanisms.

01:00:58.760 --> 01:01:02.910
Perhaps you want to integrate
into a content management system.

01:01:03.120 --> 01:01:08.740
So you want some way to get
your assets into that world.

01:01:09.540 --> 01:01:12.370
Or maybe job tracking
with asset management.

01:01:12.630 --> 01:01:19.220
So you might have a web app or some
other application that does job

01:01:19.220 --> 01:01:25.600
tracking and you want to leverage
the power of Final Cut Server to do

01:01:25.600 --> 01:01:28.270
the asset management and workflow.

01:01:30.970 --> 01:01:34.660
Or another very simple example,
you could take the Rails code,

01:01:34.660 --> 01:01:39.700
extend it a bit more,
and say you're at an art college

01:01:39.700 --> 01:01:42.040
and had an end-of-year show.

01:01:42.110 --> 01:01:47.440
And you wanted a simple way to have
students submit work for that show.

01:01:47.610 --> 01:01:50.740
You could have a watch folder.

01:01:50.800 --> 01:01:55.410
They could drop their completed
work into that watch folder.

01:01:56.290 --> 01:02:03.490
The lecturers could review and approve
using the Final Cut Server client.

01:02:03.670 --> 01:02:07.850
And when it was approved,
it could automatically be generated

01:02:07.930 --> 01:02:13.960
into the correct web formats
and sent to the web application.

01:02:14.390 --> 01:02:18.730
So some very exciting things here,
and some really interesting ways

01:02:18.830 --> 01:02:21.400
that you can start to leverage.

01:02:22.220 --> 01:02:25.800
Final Cut Server with other applications.

01:02:25.800 --> 01:02:29.610
And we have talked about Rails,
but obviously this can work with

01:02:29.610 --> 01:02:32.650
any other type of web technologies.

01:02:32.960 --> 01:02:35.430
And it doesn't even need
to be a web technology.

01:02:35.440 --> 01:02:40.640
This shows how you can then send clips,
send metadata,

01:02:40.690 --> 01:02:45.040
exchange information with other systems.

01:02:45.120 --> 01:02:49.100
Just by using this sort of mechanism
where you can have responses in

01:02:49.100 --> 01:02:55.430
Final Cut Server to trigger actions,
be they make QuickTime files,

01:02:55.640 --> 01:02:59.220
be they run scripts,
and then get back into

01:02:59.320 --> 01:03:02.850
Final Cut Server with XML.

01:03:06.430 --> 01:03:11.530
So there's a few related sessions
that if you haven't seen them,

01:03:11.530 --> 01:03:14.180
you can get-- are going to
be available after the show.

01:03:14.180 --> 01:03:21.310
So there's the Deploying
Final Cut Server,

01:03:21.310 --> 01:03:23.450
which a lot of you were at,
as well as the 426,

01:03:23.450 --> 01:03:23.450
so the Creating Rails Applications.

01:03:23.560 --> 01:03:26.630
and the integrating
with Podcast Producer.

01:03:26.760 --> 01:03:30.600
So if you're unable to see those,
I recommend trying to

01:03:30.940 --> 01:03:32.770
get them after the show.

01:03:33.100 --> 01:03:35.340
And we've got a lab this
afternoon at 2 o'clock,

01:03:35.510 --> 01:03:42.620
so if you want to go into depth in any
of these particular integration issues,

01:03:42.640 --> 01:03:45.490
then we can discuss those at 2 o'clock.

01:03:45.580 --> 01:03:50.850
And we'll have some more of the
engineering team with me down there.

01:03:52.440 --> 01:03:58.320
So in summary, what we saw is the
mechanisms of integration.

01:03:58.630 --> 01:04:02.790
So we saw embedding metadata in files,

01:04:03.390 --> 01:04:10.110
Reading and writing of XML content
and executing scripts or commands.

01:04:11.130 --> 01:04:16.320
And then we saw the ability to exchange
metadata with external systems,

01:04:16.350 --> 01:04:19.160
to integrate with Podcast Producer,

01:04:19.290 --> 01:04:24.700
and to integrate it with web
applications like Ruby on Rails.

01:04:26.030 --> 01:04:28.620
So these are only some of
the many possibilities.

01:04:28.750 --> 01:04:32.450
You can do much,
much more with the type of

01:04:32.450 --> 01:04:35.170
interactions that I've shown you today.

01:04:35.800 --> 01:04:42.090
So if you want some more information,
we've got Mark Malone,

01:04:42.490 --> 01:04:45.290
who is the evangelist for this area.

01:04:45.520 --> 01:04:51.580
There's also documentation available
on the apple.com/finalcutserver,

01:04:51.690 --> 01:04:56.080
so you can find links to
various resources and other...

01:04:56.300 --> 01:05:07.100
[Transcript missing]

01:05:07.390 --> 01:05:09.930
If you want to learn a
bit more about deployment,

01:05:09.940 --> 01:05:12.150
I can highly recommend
the Getting Started with

01:05:12.320 --> 01:05:16.400
Final Cut Server book,
which came out about two weeks ago.

01:05:16.420 --> 01:05:22.120
This goes into some great depth in
how to do some workflows and other

01:05:22.310 --> 01:05:26.450
deployments and how to leverage some
of the subscriptions and responses

01:05:26.450 --> 01:05:28.200
to do some interesting things.