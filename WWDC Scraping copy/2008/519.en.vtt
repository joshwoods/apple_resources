WEBVTT

00:00:20.560 --> 00:00:21.990
Well, thanks for coming.

00:00:22.070 --> 00:00:25.900
We've got some things to talk about.

00:00:26.010 --> 00:00:26.980
My name's Matt Drance.

00:00:27.130 --> 00:00:29.540
I'm Apple's
Sharing Technologies Evangelist.

00:00:29.660 --> 00:00:32.730
And for the next hour,
I'm going to go into the details of

00:00:32.810 --> 00:00:36.600
the new Push Notification Service,
which you all heard about on Monday.

00:00:36.600 --> 00:00:40.640
It's one of the bigger pieces of
news at this year's conference.

00:00:40.790 --> 00:00:43.170
And I'd like to start by
just setting the stage and

00:00:43.170 --> 00:00:45.140
explaining why you guys are here.

00:00:45.140 --> 00:00:48.190
Presumably you know why you're here,
but why you're here and

00:00:48.190 --> 00:00:50.220
why this is such big news.

00:00:51.280 --> 00:00:54.230
You guys are all working on iPhone apps,
and some of them probably

00:00:54.230 --> 00:00:57.290
have connections to a server
somewhere in the cloud.

00:00:57.380 --> 00:00:59.710
Now, when this app is running,

00:01:00.400 --> 00:01:03.880
You can go ahead and fetch
new data as you see fit.

00:01:03.960 --> 00:01:05.440
Goes right over to the app.

00:01:05.490 --> 00:01:07.010
You update your user interface.

00:01:07.210 --> 00:01:09.610
Users of the app stay informed.

00:01:09.820 --> 00:01:12.260
But when your app quits,
the connection to that

00:01:12.410 --> 00:01:14.250
server has been severed.

00:01:14.590 --> 00:01:18.340
But life goes on,
and more information becomes available.

00:01:18.480 --> 00:01:21.750
So how are you going to get
that new information to the user

00:01:21.750 --> 00:01:25.460
in iPhone OS's model of only
one running process at a time?

00:01:25.540 --> 00:01:28.790
This is exactly where the
Push Notification Service comes in.

00:01:28.870 --> 00:01:33.560
This is a networked service provided
and maintained by Apple that's going

00:01:33.560 --> 00:01:39.730
to allow you to notify users of new
information right on their iPhone,

00:01:39.730 --> 00:01:42.650
regardless of whether or
not your app is running.

00:01:43.550 --> 00:01:45.500
Once this notification
has reached the system,

00:01:45.670 --> 00:01:49.200
the user can choose to bring your
application back to the front,

00:01:49.240 --> 00:01:52.610
where you can then go ahead and
pull the new data in and get

00:01:52.610 --> 00:01:54.950
that updated information to them.

00:01:56.000 --> 00:01:58.940
So there are a number of reasons why
we think this is a great solution.

00:01:58.940 --> 00:02:03.000
You heard about some of it on Monday,
but I'm going to go over it again.

00:02:03.310 --> 00:02:05.300
First,
just like everything that we do at Apple,

00:02:05.300 --> 00:02:07.140
it starts with user experience.

00:02:07.260 --> 00:02:12.750
And user experience is more
than just icons and design and,

00:02:12.960 --> 00:02:14.600
you know, artistic stuff.

00:02:14.620 --> 00:02:19.130
User experience is about performance
and responsiveness and stability.

00:02:19.880 --> 00:02:22.010
So I know a lot of you have asked
over the last couple months,

00:02:22.010 --> 00:02:24.210
why can't I just write
a background process?

00:02:24.280 --> 00:02:25.070
I know what I'm doing.

00:02:25.170 --> 00:02:28.310
I can go ahead and create
a connection to my server.

00:02:28.930 --> 00:02:33.400
And I can get that information
to my users whenever I want.

00:02:33.500 --> 00:02:37.730
Well, in your own perspective,
that might be fine.

00:02:37.740 --> 00:02:39.710
But the fact is,
you're not going to be the

00:02:39.710 --> 00:02:42.040
only application on the phone.

00:02:42.270 --> 00:02:45.000
So once we open those doors,
now we're going to be talking about an

00:02:45.010 --> 00:02:50.140
unlimited number of background processes,
doing an unknown number of connections

00:02:50.410 --> 00:02:54.820
to an unknown number of servers,
sending unknown amounts of data

00:02:54.820 --> 00:02:57.080
for unknown periods of time.

00:02:57.080 --> 00:02:58.900
Look at this.

00:03:01.580 --> 00:03:03.280
This does not scale.

00:03:03.500 --> 00:03:05.540
But I'll tell you what does scale.

00:03:05.580 --> 00:03:10.100
A single cloud in the middle that
everybody communicates through,

00:03:10.170 --> 00:03:13.930
talking to a single point
of entry on the phone,

00:03:13.930 --> 00:03:17.910
where we know how to
balance for CPU consumption,

00:03:17.910 --> 00:03:20.840
memory usage, and battery life.

00:03:20.890 --> 00:03:23.190
This scales plenty.

00:03:24.740 --> 00:03:27.380
We're also providing a
consistent UI to you guys,

00:03:27.610 --> 00:03:32.830
a UI that you've seen elsewhere,
like in SMS and in the phone app.

00:03:33.030 --> 00:03:36.240
We're going to allow
you to specify a badge.

00:03:37.810 --> 00:03:40.790
We're going to allow you to give
textual alerts with a button

00:03:40.800 --> 00:03:43.760
for the user to either dismiss
the alert or launch your app,

00:03:43.760 --> 00:03:48.770
so you can go ahead and pull that
additional data to your application.

00:03:48.820 --> 00:03:52.860
We're also going to let you specify
custom sounds that you provide.

00:03:55.160 --> 00:03:57.500
And we're going to have
centralized settings.

00:03:57.550 --> 00:04:01.200
All of the applications set up for this
service are going to show up in the Fetch

00:04:01.200 --> 00:04:03.200
New Data settings in the Settings app.

00:04:03.270 --> 00:04:05.380
So you can see here we've got
a list of a couple of apps,

00:04:05.500 --> 00:04:11.700
and from here the user can specify
how they want the push to occur,

00:04:11.760 --> 00:04:15.850
as well as turning notifications
on or off for specific apps,

00:04:15.890 --> 00:04:18.400
as well as for all apps on the system.

00:04:18.510 --> 00:04:20.570
So you get that for free.

00:04:21.270 --> 00:04:22.700
And finally, it's easy.

00:04:22.750 --> 00:04:26.060
It's easy both from a logistical
standpoint as well as from

00:04:26.060 --> 00:04:28.000
a technical standpoint.

00:04:28.110 --> 00:04:30.200
First of all,
it works over any connection,

00:04:30.280 --> 00:04:34.040
both Wi-Fi and cellular connections.

00:04:34.080 --> 00:04:37.290
And most importantly,
it's available to every member

00:04:37.290 --> 00:04:39.500
of the iPhone Developer Program.

00:04:40.160 --> 00:04:45.430
The keywords here are "push" and
"everybody." We are enabling you

00:04:45.530 --> 00:04:49.730
guys to send push notifications
over the cellular networks just

00:04:49.730 --> 00:04:51.800
as being a member of our program.

00:04:51.870 --> 00:04:54.100
So I don't know how many people have
worked in the wireless space before.

00:04:54.100 --> 00:04:55.990
If you haven't,
you should talk to somebody who has,

00:04:56.040 --> 00:04:57.360
because this is huge.

00:04:57.480 --> 00:04:59.100
You don't have to talk to the carriers.

00:04:59.280 --> 00:05:01.790
You don't have to go through
any additional certification.

00:05:01.900 --> 00:05:04.190
Those of you who are in the program
already have what you need to

00:05:04.200 --> 00:05:05.850
participate in this once it's available.

00:05:06.050 --> 00:05:08.410
Just send your notifications.

00:05:09.380 --> 00:05:11.300
It's just as easy on the technical side.

00:05:11.300 --> 00:05:13.520
In order to make this work,
you need to learn three

00:05:13.520 --> 00:05:18.300
new Cocoa methods,
and on the server side, two HTTP methods.

00:05:18.430 --> 00:05:19.300
That's it.

00:05:19.510 --> 00:05:20.300
Done.

00:05:21.380 --> 00:05:25.200
So with that,
let's go into the nuts and bolts of it.

00:05:25.200 --> 00:05:27.860
I'm going to start by talking
about the registration process,

00:05:27.990 --> 00:05:32.910
what you need to do to start sending
these notifications to a specific device,

00:05:33.080 --> 00:05:35.000
We'll talk about the process
of actually publishing,

00:05:35.000 --> 00:05:39.930
sending these notifications,
then receiving them on the client side,

00:05:40.040 --> 00:05:42.460
and then we'll go into some
additional tricks you can do to

00:05:42.460 --> 00:05:44.200
manage the service to your liking.

00:05:44.260 --> 00:05:47.240
And then this will be a
large part of the talk,

00:05:47.320 --> 00:05:51.140
best practices,
things that you're going to want to

00:05:51.140 --> 00:05:56.740
remember to make this an effective and
consistent experience for your users,

00:05:56.740 --> 00:06:01.090
because everybody, I suspect,
is going to want to use this.

00:06:01.090 --> 00:06:01.090
Let's get started.

00:06:05.200 --> 00:06:08.840
Registering for notifications is a
straightforward three-step process.

00:06:08.920 --> 00:06:11.560
In the first step,
your iPhone application contacts

00:06:11.660 --> 00:06:14.190
your server and lets it know
that there's a phone here that's

00:06:14.330 --> 00:06:16.810
ready to receive notifications.

00:06:17.170 --> 00:06:23.490
In the second step,
your server forwards that

00:06:23.490 --> 00:06:23.490
information about the phone to
the Push Notification Service.

00:06:24.110 --> 00:06:27.600
The Notification Service will return
the success value that you should

00:06:27.600 --> 00:06:30.540
then forward back to your app,
and when your app has

00:06:30.540 --> 00:06:33.600
received the success,
it goes ahead and registers

00:06:33.680 --> 00:06:37.000
for notifications with
iPhone OS on the client side.

00:06:37.050 --> 00:06:39.990
So let's go over the details
of these three steps.

00:06:42.000 --> 00:06:46.550
First step, again,
is where the app contacts

00:06:46.580 --> 00:06:50.060
your server and says,
"I have a phone here,

00:06:50.060 --> 00:06:55.400
and I want to start sending notifications
to this iPhone or iPod Touch."

00:06:55.610 --> 00:06:57.900
Now, all we care about is the device.

00:06:58.010 --> 00:06:59.870
We just need to know where
these notifications are

00:06:59.880 --> 00:07:00.990
going to get forwarded to.

00:07:01.120 --> 00:07:04.190
But a lot of you with networked services,
of course, have usernames, passwords,

00:07:04.290 --> 00:07:06.880
accounts,
so you need to know how to associate

00:07:06.880 --> 00:07:11.240
notifications on the server side with
the person who's going to get them.

00:07:11.360 --> 00:07:15.440
So if you're concerned about accounts,
usernames, passwords, credentials,

00:07:15.520 --> 00:07:17.250
all of that is going to be up to you.

00:07:17.380 --> 00:07:20.080
You just send that through
to your server and make sure

00:07:20.090 --> 00:07:23.760
you've got the right person,
and from there, just send us the phone.

00:07:23.760 --> 00:07:24.550
That's all we care about.

00:07:25.900 --> 00:07:27.020
So what does this look like?

00:07:27.150 --> 00:07:29.970
This is it, seriously.

00:07:30.270 --> 00:07:32.220
We have a new method on
UI application called

00:07:32.270 --> 00:07:34.950
Remote Notification System Identifier.

00:07:35.230 --> 00:07:37.690
And this is a unique ID.

00:07:38.000 --> 00:08:01.000
[Transcript missing]

00:08:01.700 --> 00:08:03.760
So you have that unique ID,
and you basically just send

00:08:03.760 --> 00:08:04.580
it over to your server.

00:08:04.810 --> 00:08:08.100
And this register with my server
method is something implemented by you.

00:08:08.100 --> 00:08:08.970
It's not their API.

00:08:09.050 --> 00:08:13.600
I don't remember the last time
we had something with my in it.

00:08:13.670 --> 00:08:16.900
Basically, you wait for a response.

00:08:16.950 --> 00:08:19.710
And we'll go into that again later.

00:08:21.410 --> 00:08:23.020
So that was step one.

00:08:23.120 --> 00:08:28.090
You've told your server about a phone
that needs to register for notifications.

00:08:28.230 --> 00:08:32.280
Step two is where you forward on
information about that device to

00:08:32.320 --> 00:08:35.100
the Push Notification Service,
and you set up what we call a

00:08:35.100 --> 00:08:39.340
publishing node to start sending
these notifications through.

00:08:39.940 --> 00:08:44.480
And in this step,
we do have some authentication

00:08:44.480 --> 00:08:47.850
required on the server side,
so that we know the person sending

00:08:47.860 --> 00:08:50.230
these notifications is actually you.

00:08:53.400 --> 00:08:56.340
And again, when the node has been
successfully created,

00:08:56.450 --> 00:08:59.520
we will return a response to your server,
which you should then relay

00:08:59.700 --> 00:09:01.550
back to your iPhone app,
so your app knows that

00:09:01.550 --> 00:09:03.980
notifications have been enabled.

00:09:05.860 --> 00:09:07.190
So what happens here on the server side?

00:09:07.210 --> 00:09:09.840
How do you create this publishing node?

00:09:09.880 --> 00:09:13.700
You do it with an HTTP post to
the Push Notification Service.

00:09:13.700 --> 00:09:15.400
And here's the URL that you see here.

00:09:15.400 --> 00:09:17.240
We're going to break
that down in a second.

00:09:17.290 --> 00:09:21.280
It uses transport layer security
with basic authentication.

00:09:22.540 --> 00:09:24.150
And at the end,
you're going to throw a query

00:09:24.150 --> 00:09:27.240
string on there with an action
parameter set to create.

00:09:27.240 --> 00:09:29.080
In other words,
I'm creating a notification,

00:09:29.140 --> 00:09:31.530
a publishing node,
for this particular device,

00:09:31.600 --> 00:09:32.660
for this application.

00:09:32.950 --> 00:09:35.500
So that long URI you see there
has a couple things in it.

00:09:35.510 --> 00:09:38.810
It has a publisher ID,
and this is basically your identifier,

00:09:38.820 --> 00:09:40.270
your username, if you will.

00:09:40.270 --> 00:09:42.720
And basically,
that's just going to be the same as

00:09:42.730 --> 00:09:46.050
the bundle identifier of your app,
since you're ultimately sending

00:09:46.400 --> 00:09:47.960
this to your app on your phone.

00:09:48.160 --> 00:09:51.170
And this is important because if
somebody has 10 apps registered

00:09:51.550 --> 00:09:54.800
with the Push Notification Service,
we need to know which app

00:09:55.010 --> 00:09:57.370
the notification belongs to.

00:09:58.500 --> 00:10:00.400
And then we're also going
to add that device ID,

00:10:00.400 --> 00:10:02.430
which came from step one.

00:10:02.490 --> 00:10:06.090
Again, it's the Remote Notification
System Identifier method,

00:10:06.150 --> 00:10:08.160
and that's what it looks like.

00:10:08.200 --> 00:10:10.430
It's basically just a hex string.

00:10:12.580 --> 00:10:14.510
And finally,
you're going to provide a node name.

00:10:14.680 --> 00:10:17.400
We haven't decided on the name yet,
but we're just going

00:10:17.400 --> 00:10:19.000
to call it Inbox today.

00:10:19.130 --> 00:10:24.080
So this is your URL for creating
and sending notifications.

00:10:25.320 --> 00:10:28.140
And here's some Ruby code that would
show what this might look like.

00:10:28.140 --> 00:10:29.520
I construct the URL.

00:10:30.030 --> 00:10:34.110
I have the path there where I've got
my publisher ID and my device ID,

00:10:34.200 --> 00:10:37.290
and an action of create at the end.

00:10:53.710 --> 00:10:53.710
Got my basic authentication in there.

00:10:53.710 --> 00:10:53.710
And now this is important,
I return that result to the client.

00:10:53.710 --> 00:10:53.710
This is HTTP, so we want a 200 back.

00:10:53.710 --> 00:10:53.710
And once that's been successful,
we go ahead and we tell the

00:10:53.710 --> 00:10:53.710
client app that the registration
is done and we're ready to go.

00:10:55.940 --> 00:11:01.700
So, you've told your server that you're
ready to listen for notifications,

00:11:01.700 --> 00:11:07.690
and your server has told us that there's
a new iPhone out there ready to get them.

00:11:10.530 --> 00:11:14.540
Once you start sending these,
they're not yet going to make it,

00:11:15.030 --> 00:11:19.110
because you haven't yet told iPhone
OS that your application is specifically

00:11:19.110 --> 00:11:21.040
ready to start receiving them.

00:11:21.180 --> 00:11:22.590
So with apologies to Mr.

00:11:22.590 --> 00:11:24.840
Goldbloom, there is a step three.

00:11:24.960 --> 00:11:27.100
And no, it's not profit.

00:11:28.100 --> 00:11:30.670
Well, hopefully it is,
but... Step 3 is your app

00:11:30.670 --> 00:11:32.380
registers for notifications.

00:11:32.470 --> 00:11:41.980
And you registered on the server side,
but you also need to tell the OS,

00:11:41.980 --> 00:11:41.980
"I am this application,
and I am ready to start receiving

00:11:41.980 --> 00:11:41.980
these notifications from the service."

00:11:43.360 --> 00:11:46.360
So once that's happened,
your app goes away,

00:11:46.390 --> 00:11:49.420
notifications get through,
you get your badge, your alert,

00:11:49.420 --> 00:11:50.590
your sound.

00:11:50.900 --> 00:12:14.800
[Transcript missing]

00:12:15.870 --> 00:12:17.920
And here's the client side code.

00:12:18.000 --> 00:12:19.700
And you've already seen most of this.

00:12:19.770 --> 00:12:22.830
The first couple lines here
are right out of step one.

00:12:24.820 --> 00:12:28.610
So we go ahead, we tell the server
about the publisher ID,

00:12:28.720 --> 00:12:33.010
excuse me, the system identifier,
the subscription ID.

00:12:33.730 --> 00:12:36.800
We wait for the response,
and once the response is positive

00:12:36.800 --> 00:12:40.500
and we know the node is there,
we go ahead and we get the publisher ID,

00:12:40.500 --> 00:12:42.840
which again is just
the bundle identifier,

00:12:42.840 --> 00:12:46.150
and we tell a new method
on UI application,

00:12:46.160 --> 00:12:48.340
register for remote
notifications from publisher,

00:12:48.340 --> 00:12:50.800
and that is the third and final step.

00:12:50.900 --> 00:12:55.880
And from there, notifications start going
through to the system.

00:12:56.100 --> 00:12:57.340
Now this method does a lot of things.

00:12:57.340 --> 00:13:00.240
It doesn't just allow you to receive
notifications when you're running,

00:13:00.240 --> 00:13:03.970
but it also adds the app to that
list in the Fetch New Data Settings,

00:13:03.970 --> 00:13:05.430
as well as a bunch of other things.

00:13:05.480 --> 00:13:07.740
We'll talk about that a little bit later.

00:13:07.840 --> 00:13:09.000
So that's registration.

00:13:09.140 --> 00:13:10.840
Let's go over it again.

00:13:11.540 --> 00:13:14.570
First, you contact your server about
a phone or an iPod Touch that's

00:13:14.570 --> 00:13:17.250
ready to receive notifications.

00:13:17.310 --> 00:13:21.480
Your server forwards that information
to the Push Notification Service.

00:13:22.030 --> 00:13:24.190
Push Notification
Service sends you a response.

00:13:24.340 --> 00:13:27.010
Hopefully that response is success.

00:13:27.630 --> 00:13:31.050
And you send that back over to your
application so that it now knows to

00:13:31.050 --> 00:13:33.890
ask iPhone OS to start listening.

00:13:36.890 --> 00:13:41.790
Once registration is complete,
it's time to start sending notifications.

00:13:41.990 --> 00:13:44.220
Let's talk about that now.

00:13:47.240 --> 00:13:49.140
Sending notifications
is very straightforward.

00:13:49.230 --> 00:13:53.040
It's done with an HTTP PUT to
the Push Notification Service.

00:13:53.190 --> 00:13:56.800
You're using the same URI path from the
registration process we just went over,

00:13:56.800 --> 00:13:58.860
so this should look familiar to you.

00:13:58.910 --> 00:14:01.930
And the property list,
the body of the transaction

00:14:01.930 --> 00:14:03.690
is just an XML property list.

00:14:03.940 --> 00:14:08.400
And this is where you have the contents,
the context of that notification.

00:14:08.460 --> 00:14:10.960
And this code is nearly
identical to what we had before.

00:14:10.990 --> 00:14:12.730
It's just the PUT instead of a POST.

00:14:12.930 --> 00:14:15.410
And you notice there's
no query string either.

00:14:15.410 --> 00:14:17.200
But the URI is exactly the same.

00:14:18.480 --> 00:14:21.320
So let's go over some more
server-side details here.

00:14:21.440 --> 00:14:26.160
So all of the transactions you're
going to hear about in this hour use

00:14:26.270 --> 00:14:29.470
HTTP over TLS with basic authentication.

00:14:29.860 --> 00:14:35.670
The data that makes up the
notification itself is UTF-8 XML.

00:14:35.740 --> 00:14:36.990
It's limited to one kilobyte.

00:14:37.000 --> 00:14:39.420
So you need to remember that.

00:14:39.610 --> 00:14:42.590
No huge dialogues, no 20-line messages,
please.

00:14:42.790 --> 00:14:43.960
We're going to keep it simple.

00:14:43.960 --> 00:14:46.840
We'll talk more about that in
the Best Practices section.

00:14:46.870 --> 00:14:50.040
And for those of you new to the platform,
unfamiliar with property lists,

00:14:50.050 --> 00:14:53.200
you'll hear plenty about it in our
introductory and tool sessions,

00:14:53.290 --> 00:14:55.240
but the DTD is available at apple.com.

00:14:55.350 --> 00:14:56.740
It's very straightforward.

00:14:56.770 --> 00:14:59.470
And another point,
the service saves the last notification

00:14:59.860 --> 00:15:02.890
that's sent out per client,
per node.

00:15:02.970 --> 00:15:05.770
And we'll talk about how that might
be useful to you a little later.

00:15:08.490 --> 00:15:10.540
So here's what the
notification body looks like.

00:15:10.540 --> 00:15:15.110
This is that P list that you're going
to put in the body of your HTTP put.

00:15:15.450 --> 00:15:17.380
The first key you see
there is UI Alert Body,

00:15:17.470 --> 00:15:20.840
and this is what you specify
for the message inside an alert

00:15:20.840 --> 00:15:22.880
if you want to send an alert.

00:15:24.520 --> 00:15:27.060
So I already said this,
but you want these messages

00:15:27.210 --> 00:15:28.530
to be short and clear.

00:15:28.580 --> 00:15:32.180
There's not a lot of room here,
neither on the screen nor in the payload.

00:15:32.330 --> 00:15:33.490
You're limited to one kilobyte.

00:15:33.510 --> 00:15:36.460
You can already see there's a lot of
administrivia in here with the tags,

00:15:36.620 --> 00:15:38.070
and not to mention the headers.

00:15:38.200 --> 00:15:41.480
So keep these messages short and sweet.

00:15:42.580 --> 00:15:47.260
You also have the ability to
enable or disable the button

00:15:47.260 --> 00:15:49.050
that activates your application.

00:15:49.180 --> 00:15:51.540
So by default, this button exists.

00:15:51.590 --> 00:15:53.440
There's a -- you saw
the screenshot before.

00:15:53.650 --> 00:15:55.880
We have that view button
that the user taps,

00:15:55.880 --> 00:15:57.450
brings your application
right to the front.

00:15:57.610 --> 00:16:02.100
If for whatever reason you don't need
the application to be brought forward,

00:16:02.300 --> 00:16:07.440
you can optionally set this
UI alert show open button to false,

00:16:07.470 --> 00:16:09.360
which will just have a
single dismiss button,

00:16:09.360 --> 00:16:11.610
kind of like the alarm clock.

00:16:13.410 --> 00:16:15.340
Specifying badges is
very straightforward.

00:16:15.350 --> 00:16:18.190
We have a UI application badge key.

00:16:18.240 --> 00:16:21.830
The value of this key should
be a positive integer.

00:16:21.850 --> 00:16:25.220
I'll say that again: positive integer.

00:16:25.220 --> 00:16:30.710
No negative integers, no decimals,
no fractions, no zapping bats,

00:16:30.840 --> 00:16:31.890
just integers.

00:16:32.230 --> 00:16:34.440
You've seen this on the phone before,
and we want this to be a

00:16:34.450 --> 00:16:38.510
consistent experience with what's
already there in mail and SMS.

00:17:01.750 --> 00:17:01.750
And this is very important.

00:17:01.750 --> 00:17:01.750
Maintaining a correct value,
a correct count, is going to be up to

00:17:01.750 --> 00:17:01.750
you on the server side.

00:17:01.750 --> 00:17:01.750
And we'll talk a little bit
more about what that means

00:17:01.750 --> 00:17:01.750
and what you'll have to do.

00:17:01.750 --> 00:17:01.750
But we just take what you give us.

00:17:01.750 --> 00:17:01.750
So if you send us a one
and then another one,

00:17:01.750 --> 00:17:01.750
the badge value is still going to be one.

00:17:02.690 --> 00:17:07.360
And finally, to specify sounds,
UI Alert Sound Key.

00:17:07.360 --> 00:17:10.740
And this is a string value,
which is basically the name

00:17:10.740 --> 00:17:14.500
of a sound file that's already
inside your application.

00:17:14.760 --> 00:17:17.520
So it's just the file name
without the extension,

00:17:17.530 --> 00:17:21.540
and we know to pull that out and play
it when these notifications arrive.

00:17:22.750 --> 00:17:25.340
You can have any number of names,
obviously,

00:17:25.340 --> 00:17:29.520
and we also have a constant that allows
you to just use the system default sound,

00:17:29.570 --> 00:17:32.260
whatever the user has selected.

00:17:32.330 --> 00:17:36.340
But you probably don't want to get
rid of this opportunity to have some

00:17:36.340 --> 00:17:40.830
personalization on your part and make
your presence known on the phone.

00:17:40.890 --> 00:17:45.800
You don't want to confuse the user,
and sounds are a great way to

00:17:45.800 --> 00:17:45.800
have something distinct going on.

00:17:48.210 --> 00:17:51.420
So things to remember when
you're sending notifications.

00:17:51.440 --> 00:17:54.370
Again, keep the alert messages small
if you're going to use alerts.

00:17:54.440 --> 00:17:57.040
You've got a one kilobyte limit,
including all the metadata

00:17:57.040 --> 00:17:57.940
you saw on the screen.

00:17:58.000 --> 00:17:59.880
And again,
you don't want to aggravate the user

00:17:59.880 --> 00:18:02.280
and waste their time with long messages.

00:18:02.320 --> 00:18:03.460
Localization is up to you.

00:18:03.460 --> 00:18:06.370
I'm sorry to say we won't be
magically translating these things

00:18:06.370 --> 00:18:07.940
for you as they go out the door.

00:18:08.250 --> 00:18:12.560
So if that's important to you,
you need to transmit your locale

00:18:12.560 --> 00:18:15.550
information maybe during step one,
during registration.

00:18:15.580 --> 00:18:18.320
Just keep your server
apprised of where the user is.

00:18:18.330 --> 00:18:20.660
It's important for you to
deliver localized content.

00:18:20.670 --> 00:18:22.880
That's going to be your responsibility.

00:18:22.900 --> 00:18:25.220
And most importantly,
track your badge count.

00:18:25.230 --> 00:18:26.800
I already said this before.

00:18:26.810 --> 00:18:31.060
The service does not track the count,
and the OS does not track it either.

00:18:31.080 --> 00:18:34.320
So it's going to be your responsibility
to provide an accurate number for the

00:18:34.320 --> 00:18:37.180
badge every time you send a notification.

00:18:39.770 --> 00:18:43.690
So you've sent a notification,
and the OS will handle it,

00:18:43.790 --> 00:18:47.700
put up the badge, the alert, the sound,
whatever you've specified.

00:18:47.780 --> 00:18:50.000
But what about when your app is running?

00:18:53.900 --> 00:18:57.220
To handle these notifications
while your app is active,

00:18:57.340 --> 00:19:00.610
we have an optional method that
we're adding to the UI application

00:19:00.930 --> 00:19:03.610
delegate that allows you to receive
the notification and all the

00:19:03.610 --> 00:19:05.380
information associated with it.

00:19:05.860 --> 00:19:09.240
And it looks very similar to any
notification handler that you have

00:19:09.350 --> 00:19:11.940
dealt with in the past in Cocoa.

00:19:12.470 --> 00:19:15.100
But the important thing is
this is required to respond

00:19:15.170 --> 00:19:17.450
to notifications at runtime.

00:19:17.670 --> 00:19:20.340
Because we're turning off the system
handlers while your app is active,

00:19:20.360 --> 00:19:21.190
and this makes sense.

00:19:21.200 --> 00:19:24.590
Presumably, you know what to do with your
information if your app is running.

00:19:24.620 --> 00:19:28.630
We're not going to put up a dialogue
while your own app is running saying

00:19:28.630 --> 00:19:30.200
that your app needs attention.

00:19:30.240 --> 00:19:32.190
Your app has attention.

00:19:33.030 --> 00:19:34.740
So, you need to remember that.

00:19:34.890 --> 00:19:37.140
And you also need to
maintain the general state.

00:19:37.230 --> 00:19:40.130
We're not going to update the badge
count when these notifications come in,

00:19:40.330 --> 00:19:46.400
so it's going to be up to you to use the
badge count property on UI application

00:19:46.400 --> 00:19:46.400
and set it however it's appropriate.

00:19:46.960 --> 00:19:49.010
And you also want to make
sure the data is correct,

00:19:49.110 --> 00:19:51.600
because if you've got direct
communication with your server going on,

00:19:51.600 --> 00:19:55.430
you want to make sure this notification
that comes in is not redundant.

00:19:57.050 --> 00:20:01.090
So why would I listen while I was active,
or why wouldn't I?

00:20:01.320 --> 00:20:03.960
This is really going to
be a choice that you make.

00:20:03.960 --> 00:20:06.120
That's up to you,
because everybody in this room is

00:20:06.220 --> 00:20:08.750
going to have different use cases,
different scenarios,

00:20:08.750 --> 00:20:10.500
different needs for this service.

00:20:11.620 --> 00:20:14.290
So basically,
you just need to decide when

00:20:14.290 --> 00:20:16.100
this is going to be appropriate.

00:20:16.160 --> 00:20:18.320
If you, for example,
don't have a persistent

00:20:18.340 --> 00:20:20.310
server connection,
and you don't do a lot of

00:20:20.310 --> 00:20:24.610
communication with the server,
and things just trickle in very,

00:20:24.610 --> 00:20:28.640
very slowly and infrequently,
then maybe it makes sense

00:20:28.640 --> 00:20:33.280
to keep listening to these
notifications while you're active.

00:20:33.280 --> 00:20:34.980
And it saves you the trouble of having
to maintain a connection and pull all

00:20:34.980 --> 00:20:34.980
the time when there's nothing there.

00:20:37.280 --> 00:20:39.470
Conversely,
if you have a persistent server

00:20:39.820 --> 00:20:42.980
connection or you do check
frequently for various reasons,

00:20:43.050 --> 00:20:46.040
it might not make sense to listen to
these notifications while you're active.

00:20:46.090 --> 00:20:48.070
And in that case,
you can either conditionally ignore

00:20:48.070 --> 00:20:50.590
it in the delegate method or just
don't implement the delegate method.

00:20:50.660 --> 00:20:52.720
Remember, it's an optional method.

00:20:52.760 --> 00:20:55.800
But these are things you need to
think about and decide on when

00:20:55.800 --> 00:20:57.480
you start to write this code.

00:20:58.900 --> 00:21:03.390
But mostly, most importantly,
server side control is not recommended.

00:21:03.640 --> 00:21:06.200
You don't want to start playing
clever games where your app

00:21:06.270 --> 00:21:09.740
launches and says to the server,
"Hey, don't send any more notifications

00:21:09.740 --> 00:21:13.260
because I'm live now." And then on
your way out when you quit you say,

00:21:13.260 --> 00:21:16.820
"OK, please start sending them again
because I'm about to quit."

00:21:16.930 --> 00:21:19.460
That's a little risky because you
could run into race conditions,

00:21:19.550 --> 00:21:22.130
the phone could ring,
your app could crash,

00:21:22.150 --> 00:21:24.440
there are a lot of things that
could go wrong here where the

00:21:24.440 --> 00:21:26.970
user suddenly misses out on
notifications as they come through.

00:21:27.000 --> 00:21:31.240
So really, if you care about dropping
notifications while you're active,

00:21:31.340 --> 00:21:32.030
just do so.

00:21:32.130 --> 00:21:33.140
Just stop listening.

00:21:36.390 --> 00:21:40.840
You can also unregister your app
altogether for these notifications.

00:21:40.910 --> 00:21:42.700
And this is a pretty
heavyweight operation.

00:21:42.770 --> 00:21:47.300
The unregistration actually removes your
app from the Fetch New Data settings.

00:21:47.390 --> 00:21:48.890
So it doesn't just turn off listening.

00:21:48.950 --> 00:21:54.980
It actually removes the app from the
service registration on the client side.

00:21:55.900 --> 00:21:57.700
So really you want to use this sparingly.

00:21:57.740 --> 00:22:03.000
This is not going to be your mechanism
for conditionally not listening.

00:22:03.060 --> 00:22:05.370
It's basically if you're
end of life-ing the product,

00:22:05.470 --> 00:22:10.210
if you're removing the feature,
if you have problems and you decide

00:22:10.210 --> 00:22:14.890
you want to disable it altogether,
this is basically the--I would

00:22:14.950 --> 00:22:17.220
call this the bazooka option.

00:22:17.220 --> 00:22:19.280
This is probably something that none
of you are actually going to use.

00:22:19.280 --> 00:22:19.280
But it's there for
consistency and parity.

00:22:21.090 --> 00:22:24.140
And remember, users can turn off
notifications manually.

00:22:24.160 --> 00:22:27.000
So it's not like it's something you
have to manage in your own settings.

00:22:27.000 --> 00:22:29.250
Do you want to receive notifications,
yes or no?

00:22:29.510 --> 00:22:34.500
That's being done in the Fetch
New Data settings globally on the system.

00:22:36.550 --> 00:22:38.830
And when you uninstall your app,
we will go ahead and do the

00:22:38.890 --> 00:22:42.290
paperwork required to take you
off of the notification system.

00:22:42.420 --> 00:22:47.370
So unregistering is probably not
something that you'll do often.

00:22:47.880 --> 00:22:49.250
So that's it for listening, receiving.

00:22:49.250 --> 00:22:51.670
There are a couple other things
that we could talk about,

00:22:51.680 --> 00:22:57.330
both on the client and server side,
that you probably want to keep in mind.

00:22:58.250 --> 00:23:02.300
I mentioned earlier that we keep the
last notification that each client sends,

00:23:02.300 --> 00:23:03.900
but it's only one.

00:23:03.930 --> 00:23:08.880
So if you send four in a row,
we only hold on to that fourth one.

00:23:09.710 --> 00:23:12.290
And you query this,
you can actually take a peek

00:23:12.290 --> 00:23:13.710
at it using an HTTP GET.

00:23:13.780 --> 00:23:16.260
And this code is starting to
look really redundant now.

00:23:16.260 --> 00:23:21.600
It's the same URI, it's the same address,
and a GET instead of a PUT or a POST.

00:23:21.620 --> 00:23:24.960
And what that'll do is give you that
P list back that you sent last time,

00:23:24.960 --> 00:23:28.030
and maybe you can be clever about
providing additional context

00:23:28.040 --> 00:23:31.070
in your second notification
or your nth notification.

00:23:33.400 --> 00:23:37.380
We just talked about unregistering
from the client side.

00:23:37.520 --> 00:23:41.400
But you also have that publishing
node up in the cloud with our service.

00:23:41.490 --> 00:23:44.330
And how do you get rid of that
when the time comes maybe the

00:23:44.470 --> 00:23:47.810
user has canceled their account,
they've uninstalled the app,

00:23:47.810 --> 00:23:49.040
all of the above?

00:23:49.510 --> 00:23:53.800
You do this with another HTTP post,
and that action query string is

00:23:53.810 --> 00:23:55.450
now delete instead of create.

00:23:55.650 --> 00:23:58.680
So this is the exact same code
you saw earlier during creation.

00:23:58.850 --> 00:24:00.900
Now we're deleting instead of creating.

00:24:01.020 --> 00:24:03.150
And again, this is not something you're
going to do very often.

00:24:03.200 --> 00:24:05.890
This is just going to be in
a case of uninstallation,

00:24:06.010 --> 00:24:11.090
of sign-offs,
people not paying their bills.

00:24:12.980 --> 00:24:15.340
Let's go over everything
that happens on the server.

00:24:15.340 --> 00:24:16.420
This is really straightforward.

00:24:16.620 --> 00:24:18.680
If you're doing anything for
managing the publishing nodes,

00:24:18.790 --> 00:24:20.400
you're doing a post.

00:24:20.450 --> 00:24:25.500
You specify a create parameter for
create and a delete parameter for delete.

00:24:25.560 --> 00:24:29.740
You use an HTTP put to publish
the notifications and a get to

00:24:29.740 --> 00:24:31.900
read the last one that was sent.

00:24:31.980 --> 00:24:36.200
And it's the same URI regardless
of what you're doing.

00:24:36.260 --> 00:24:37.920
There it is.

00:24:42.600 --> 00:24:45.970
So those are some additional tidbits
that you probably want to keep in

00:24:45.980 --> 00:24:48.890
mind when you start implementing this.

00:24:49.120 --> 00:24:51.690
Now let's move on to best practices.

00:24:51.790 --> 00:24:54.100
This is probably the most
important part of the talk,

00:24:54.100 --> 00:24:56.490
because it's really important
that when this goes live

00:24:56.500 --> 00:24:59.000
and you guys start using it,
that it's a consistent

00:24:59.000 --> 00:25:02.520
experience for everybody,
for all users of all applications,

00:25:02.520 --> 00:25:04.990
whether they're on iPhone or iPod Touch.

00:25:05.990 --> 00:25:09.790
So just some high-level thoughts on
using the service in the first place.

00:25:09.870 --> 00:25:12.530
If you haven't gotten it already,
these are notifications.

00:25:12.680 --> 00:25:15.290
This is not data you're sending.

00:25:15.710 --> 00:25:19.240
Data is to be pulled by your
application when the user has elected

00:25:19.240 --> 00:25:21.150
to bring it back to the front.

00:25:21.190 --> 00:25:24.240
The whole point of this service
is to put the power in the hands

00:25:24.250 --> 00:25:27.600
of the user to decide whether or
not the information is important

00:25:27.630 --> 00:25:29.670
enough to be pulled at the moment.

00:25:31.140 --> 00:25:33.300
And again, keep it simple.

00:25:33.440 --> 00:25:35.550
You want to keep the
alert messages short,

00:25:35.570 --> 00:25:37.940
and you want to have good,
solid logic that gets

00:25:37.940 --> 00:25:39.690
an accurate badge count.

00:25:39.850 --> 00:25:43.450
Remember you have that 1K maximum,
and that includes all the

00:25:43.450 --> 00:25:46.710
tags and everything else,
so keep the messages short and sweet.

00:25:47.440 --> 00:25:50.370
Additionally,
just think about sending emails.

00:25:50.610 --> 00:25:54.380
If you have information that's
not really time sensitive that you

00:25:54.380 --> 00:25:59.640
want to add some more verbosity to,
an email might be perfectly fine.

00:25:59.640 --> 00:26:01.500
First of all, it's available today.

00:26:01.610 --> 00:26:03.770
Second of all, like I said,
you can add additional context.

00:26:03.780 --> 00:26:05.240
An email can be any length.

00:26:05.300 --> 00:26:09.240
And you can still trigger -- you can
still prompt the user to go back to your

00:26:09.320 --> 00:26:11.680
application by adding a URL to your app.

00:26:11.850 --> 00:26:15.180
Your app can go ahead and
define a custom URL scheme.

00:26:15.400 --> 00:26:17.880
And you can send an email
with that URL in it.

00:26:17.900 --> 00:26:20.810
And maybe in the query string,
you've got some additional state,

00:26:20.810 --> 00:26:21.880
context, whatever.

00:26:22.030 --> 00:26:25.990
So email if you don't want to wait
for this service and you don't have

00:26:25.990 --> 00:26:28.810
things that you -- you don't think
you'll be sending things frequently and

00:26:28.810 --> 00:26:30.020
they don't need immediate attention.

00:26:30.260 --> 00:26:31.660
Email is a perfectly good alternative.

00:26:34.550 --> 00:26:36.890
And finally,
you don't want to depend on this service.

00:26:37.060 --> 00:26:39.240
You don't want to design
a product around it.

00:26:39.560 --> 00:26:43.640
The goal of this service is to make
good apps better and to put information

00:26:43.640 --> 00:26:46.960
in the hands of users in a more timely,
more accurate fashion.

00:26:47.020 --> 00:26:49.540
But they could go out of coverage.

00:26:49.590 --> 00:26:51.770
They could drive under a tunnel.

00:26:51.830 --> 00:26:54.670
They could turn
notifications off altogether,

00:26:54.670 --> 00:26:57.990
either for your application
or for all applications in

00:26:58.110 --> 00:26:59.990
the Fetch New Data settings.

00:27:00.180 --> 00:27:04.340
And also remember that the
iPod Touch is Wi-Fi only.

00:27:04.490 --> 00:27:08.060
So there's no cellular
activity for iPod Touch.

00:27:08.160 --> 00:27:10.400
People are only going to be
able to get these notifications

00:27:10.520 --> 00:27:12.200
when they're on a hotspot.

00:27:12.330 --> 00:27:16.730
So things to remember:
don't build an app around this concept.

00:27:17.680 --> 00:27:20.780
Now, client side,
things that you want to keep in mind,

00:27:20.870 --> 00:27:21.700
keep track of.

00:27:21.790 --> 00:27:25.070
It's up to you to decide whether you
want to listen to these notifications

00:27:25.070 --> 00:27:26.840
or ignore them when you're running.

00:27:26.970 --> 00:27:30.270
That's why we have that
optional delegate method.

00:27:31.640 --> 00:27:35.100
So if you've got active,
persistent server communication,

00:27:35.110 --> 00:27:36.280
you may not want to listen.

00:27:36.290 --> 00:27:38.200
If you've got infrequent
server communication,

00:27:38.200 --> 00:27:40.640
you don't want to waste
resources polling all the time,

00:27:40.810 --> 00:27:44.070
listening for the notifications
might be a good idea.

00:27:44.630 --> 00:27:47.860
And again,
the importance and the frequency of

00:27:47.860 --> 00:27:51.720
the info is going to go into a lot
of this decision-making process.

00:27:51.830 --> 00:27:55.120
We're going to talk more
about that a little later.

00:27:57.780 --> 00:28:01.450
You want to avoid unregistering,
either on the client or the server side.

00:28:01.460 --> 00:28:02.700
You want to keep the service intact.

00:28:02.700 --> 00:28:05.830
You don't want to perform these
heavyweight register/unregister

00:28:05.830 --> 00:28:07.200
operations repeatedly.

00:28:07.320 --> 00:28:10.670
If you decide the notifications
are not important at the moment,

00:28:10.690 --> 00:28:13.690
just stop listening while you're active.

00:28:16.290 --> 00:28:18.130
So things you've got to
remember on the server side.

00:28:18.320 --> 00:28:20.730
We've gone through all of this before,
but I want to lay it out

00:28:20.730 --> 00:28:22.080
on one slide for you.

00:28:22.110 --> 00:28:25.680
Your responsibilities will be
your own user authentication.

00:28:25.810 --> 00:28:27.690
Again, all we care about is the device.

00:28:27.890 --> 00:28:30.540
We don't care whose device it is,
what their password is,

00:28:30.550 --> 00:28:31.690
what their username is.

00:28:31.950 --> 00:28:32.950
That's up to you.

00:28:32.950 --> 00:28:35.590
If that matters to you,
you need to track it.

00:28:36.590 --> 00:28:38.190
Localization is up to you.

00:28:38.210 --> 00:28:40.440
If you want to translate
things for different locales

00:28:40.440 --> 00:28:43.090
based on where the user is,
based on where they bought

00:28:43.210 --> 00:28:46.690
the application from,
whatever you decide is important,

00:28:46.770 --> 00:28:48.910
it's up to you to track it.

00:28:49.970 --> 00:28:51.400
And again, the badge count.

00:28:51.400 --> 00:28:54.940
It's going to be up to you on the
server side to send an appropriate

00:28:54.940 --> 00:28:58.610
badge count every time so that that
number doesn't jump all over the

00:28:58.610 --> 00:29:01.050
place with successive notifications.

00:29:01.160 --> 00:29:04.110
Let's visualize a little
bit what that means.

00:29:05.240 --> 00:29:07.180
I've got a piece of data,
the app's not running,

00:29:07.190 --> 00:29:11.160
I go ahead and I send a 1 to the
Push Notification Service because

00:29:11.160 --> 00:29:14.090
I know that this is the first
notification I'm sending.

00:29:14.490 --> 00:29:15.900
Get a second notification.

00:29:15.950 --> 00:29:18.380
It's up to me on the server
side to know that that first

00:29:18.480 --> 00:29:20.900
notification has not been handled,
obviously,

00:29:20.900 --> 00:29:24.250
because the app hasn't been launched
and it hasn't made a connection

00:29:24.260 --> 00:29:26.150
to the server to get the new data.

00:29:26.260 --> 00:29:28.710
So, second time, I send a two.

00:29:28.870 --> 00:29:33.210
And we just take that verbatim and
put it right onto the badge icon.

00:29:33.890 --> 00:29:37.800
When the app comes back to the front,
you make your connection again,

00:29:37.920 --> 00:29:40.440
pull the data down,
everything's been addressed and updated.

00:29:40.440 --> 00:29:44.800
So at this point, if the information has
been read and addressed,

00:29:44.980 --> 00:29:47.870
you go ahead and set the
UI application badge count property

00:29:47.870 --> 00:29:49.400
to zero and set us back down.

00:29:49.540 --> 00:29:53.510
And also tell the server,
we've cleared everything out.

00:29:54.240 --> 00:29:56.350
New information comes
while the app's running,

00:29:56.410 --> 00:29:57.840
you go ahead and pull it up,
either with your own

00:29:57.840 --> 00:30:00.330
persistent server connection,
or maybe you were listening for

00:30:00.330 --> 00:30:01.880
notifications while you were active.

00:30:01.910 --> 00:30:03.790
Again, that's up to you.

00:30:05.240 --> 00:30:06.000
The app quits.

00:30:06.120 --> 00:30:07.140
Our badge count is zero.

00:30:07.140 --> 00:30:09.410
We have no unread things.

00:30:09.530 --> 00:30:13.220
Something else comes up,
and we start over at one.

00:30:13.600 --> 00:30:16.770
So this is pretty straightforward,
but I just want to make it clear

00:30:16.930 --> 00:30:19.360
to you guys that it's going to be
your responsibility to do this.

00:30:19.460 --> 00:30:22.090
And anybody who's managed a
server should be familiar with it.

00:30:22.110 --> 00:30:25.200
I mean, IMAP servers know how
many messages are unread,

00:30:25.320 --> 00:30:27.890
so this is not really a
radical concept at all.

00:30:31.020 --> 00:30:33.340
So now we need to talk
about user experience.

00:30:33.380 --> 00:30:35.470
We've done a lot of work
for you by giving you the

00:30:35.520 --> 00:30:39.220
badge icons and the alerts,
but there are things that

00:30:39.220 --> 00:30:41.830
you want to remember,
regardless of which ones of these

00:30:41.890 --> 00:30:44.830
mechanisms or combination of
these mechanisms you're using.

00:30:44.920 --> 00:30:47.810
Things to make sure that the
experience is going to be

00:30:47.810 --> 00:30:49.840
good across all applications.

00:30:51.620 --> 00:30:57.500
So the key principles here are that the
notifications need to be actionable.

00:30:57.560 --> 00:31:02.370
If you're going to put a badge with
a number on your application's icon,

00:31:02.750 --> 00:31:06.410
do you know what the user

00:31:07.310 --> 00:31:11.950
Do you know what the user is going
to do to make that number go away?

00:31:12.030 --> 00:31:14.140
If you don't know the
answer to that question,

00:31:14.140 --> 00:31:16.800
then you might not be
talking about a notification.

00:31:16.940 --> 00:31:18.190
There may be something
else you should do,

00:31:18.200 --> 00:31:23.640
like send them an email or a
dialogue with just a dismiss button.

00:31:24.950 --> 00:31:28.400
It should be important,
and it should be important to the user.

00:31:28.440 --> 00:31:30.080
We all think our data is important.

00:31:30.200 --> 00:31:32.890
That's why spam exists.

00:31:33.870 --> 00:31:36.260
It needs to be important to the user.

00:31:36.320 --> 00:31:40.310
When they read that dialogue or they see
that badge icon or they hear that sound,

00:31:40.530 --> 00:31:44.800
are they going to pick their phone
up and go launch your application?

00:31:44.860 --> 00:31:46.750
Because they wanted to.

00:31:46.870 --> 00:31:49.590
And the answer to that
question should be yes.

00:32:08.830 --> 00:32:08.830
And it should be consistent.

00:32:08.830 --> 00:32:08.830
You really want to minimize
the types of notifications.

00:32:08.830 --> 00:32:08.830
You don't want to have ten different
kinds of notifications that you

00:32:08.830 --> 00:32:08.830
send and ten different sounds,
because then you start

00:32:08.830 --> 00:32:08.830
overloading the user's brain with,
"Well, what did that one mean?

00:32:08.830 --> 00:32:08.830
I have no idea.

00:32:08.830 --> 00:32:08.830
I can't remember." And you
also start talking about really

00:32:08.830 --> 00:32:08.830
overwhelming numbers of dialogues.

00:32:10.530 --> 00:32:12.460
Inform your users.

00:32:12.580 --> 00:32:13.900
Don't annoy them.

00:32:13.970 --> 00:32:16.950
That's really the main message here,
and the thing you want to keep

00:32:16.950 --> 00:32:20.190
in mind when you start throwing
things in front of them.

00:32:21.440 --> 00:32:25.100
So let's start by talking about badges.

00:32:25.200 --> 00:32:27.900
Badges are going to be your
primary notification type.

00:32:28.010 --> 00:32:32.490
They're non-intrusive,
they're informative, and they're clear.

00:32:33.240 --> 00:32:35.620
And again, this should be for
actionable information.

00:32:35.720 --> 00:32:40.000
When the user taps on your icon,
what are they going to do to

00:32:40.010 --> 00:32:41.340
turn that one into a zero?

00:32:41.440 --> 00:32:43.550
If you don't know the
answer to that question,

00:32:43.550 --> 00:32:45.060
you need to think some more.

00:32:46.500 --> 00:32:48.000
You need to keep a server-side count.

00:32:48.000 --> 00:32:51.640
I've said this plenty of times already,
but I'm going to keep saying it.

00:32:52.510 --> 00:32:53.730
And test your logic,
because there are a lot of

00:32:53.810 --> 00:32:54.950
things going on around here.

00:32:55.020 --> 00:32:57.280
A lot of things going on here.

00:32:57.320 --> 00:33:00.780
And you want to make sure that that
number you send is accurate at all times.

00:33:00.830 --> 00:33:03.740
The count can change while
you're in the background.

00:33:04.260 --> 00:33:07.670
The notifications can
arrive while you're running,

00:33:07.670 --> 00:33:12.260
and it's going to be up to you to marshal
where you want to start listening from.

00:33:13.080 --> 00:33:15.600
Again,
ensure that the information is accurate.

00:33:15.890 --> 00:33:20.610
We don't want to go from a 2
to a 7 to a 3 in 5 seconds.

00:33:22.070 --> 00:33:23.150
So sounds.

00:33:23.250 --> 00:33:27.400
Sounds are the big deal because
it gives you the ability to

00:33:27.400 --> 00:33:30.900
identify your notifications to the
user without them even looking.

00:33:30.900 --> 00:33:34.030
I can have my iPhone in my pocket,
and I hear a specific sound,

00:33:34.060 --> 00:33:35.160
and I know who it came from.

00:33:35.160 --> 00:33:38.810
And I say, oh, I've been waiting for a
new message from so-and-so.

00:33:38.820 --> 00:33:40.900
I need to go look at the phone.

00:33:40.910 --> 00:33:43.170
And this is basically an
opportunity for you guys to make

00:33:43.230 --> 00:33:48.320
your mark and be distinguishable
from all the other apps that will

00:33:48.320 --> 00:33:50.350
likely sign up for this service.

00:33:51.530 --> 00:33:55.500
Largely, these sounds will behave
similarly to the SMS behavior.

00:33:55.620 --> 00:34:00.400
So it will respect the vibrate settings,
and it will also interrupt the music.

00:34:00.510 --> 00:34:04.000
So if the user's listening
to music on their iPod,

00:34:04.610 --> 00:34:07.340
The sound will dim,
and they'll hear the chime,

00:34:07.440 --> 00:34:10.250
and then the music will come back.

00:34:11.730 --> 00:34:16.910
So what that means is you want to
keep these sounds short and distinct.

00:34:17.350 --> 00:34:19.300
I said,
"It's an opportunity to have your brand

00:34:19.300 --> 00:34:23.750
in place here and really have users know
where the notification is coming from

00:34:23.850 --> 00:34:26.120
without even looking and that's great.

00:34:26.150 --> 00:34:28.990
So go ahead and have a branded
sound." But ringtones and songs

00:34:28.990 --> 00:34:31.710
are not going to get it done,
not only because they're way too long

00:34:31.710 --> 00:34:34.460
for something like a notification,
but because when you

00:34:34.470 --> 00:34:38.640
consider the iPod use case,
you don't want music to fade out

00:34:38.780 --> 00:34:41.980
and then some more music plays.

00:34:41.980 --> 00:34:43.360
That's just going to confuse the user.

00:34:43.360 --> 00:34:47.360
Did a new song start or
did a notification come?

00:34:47.360 --> 00:34:48.360
Is my phone ringing?

00:34:48.360 --> 00:34:50.060
I have no idea.

00:34:50.930 --> 00:34:53.580
And you want to ensure high quality here,
because you're going

00:34:53.580 --> 00:34:54.640
to have a short sound.

00:34:54.640 --> 00:34:56.190
You want it to be as clear as possible.

00:34:56.350 --> 00:34:59.040
So 16-bit, 44 kilohertz stereo.

00:34:59.130 --> 00:35:01.790
If I can hear your kids
screaming in the background,

00:35:01.810 --> 00:35:03.910
it's not a good notification sound.

00:35:06.420 --> 00:35:09.690
And most importantly,
you can do this today.

00:35:09.790 --> 00:35:11.390
We said that the
Notification Service would

00:35:11.390 --> 00:35:14.360
be available later this year,
but there's nothing stopping you

00:35:14.360 --> 00:35:17.400
from going home this week and
deciding which sounds are going

00:35:17.400 --> 00:35:18.600
to be used for notifications.

00:35:18.720 --> 00:35:20.260
Presumably,
they're sounds that you already

00:35:20.260 --> 00:35:24.160
have in your app for when new
data arrives while it's running.

00:35:24.260 --> 00:35:27.190
So go ahead and decide which sounds
you're going to be using for your

00:35:27.190 --> 00:35:31.330
notifications and bundle them with
the first version of your app.

00:35:31.440 --> 00:35:34.010
This is one of the things
you can do right now.

00:35:35.970 --> 00:35:38.500
Let's move on to alerts.

00:35:38.570 --> 00:35:40.320
Things to keep in mind with alerts.

00:35:40.620 --> 00:35:43.300
First of all, alerts are intrusive.

00:35:43.340 --> 00:35:47.800
They're a pretty major-scale
type of notification.

00:35:48.420 --> 00:35:51.100
So you really want to
use these sparingly.

00:35:51.140 --> 00:35:53.750
You want to make sure you're not
going to overload the user with them.

00:35:53.760 --> 00:35:57.460
Is the data important,
and is it infrequent?

00:35:57.520 --> 00:36:01.290
Both of those criteria should be
met for something like an alert.

00:36:01.700 --> 00:36:04.200
And this dialogue appears no matter what.

00:36:04.380 --> 00:36:07.400
Somebody else's app is running,
your alert is going to show up.

00:36:07.490 --> 00:36:10.190
So ask yourself, do you really want to
interrupt other apps?

00:36:10.300 --> 00:36:11.930
And remember,
what goes around comes around.

00:36:12.080 --> 00:36:16.580
So do you want somebody else interrupting
you and stepping in front of that user

00:36:16.620 --> 00:36:20.200
experience that you're trying to provide?

00:36:20.310 --> 00:36:22.490
So there's a good citizen
thing going on here,

00:36:22.570 --> 00:36:24.500
where you really don't want
to overuse these alerts,

00:36:24.620 --> 00:36:28.220
otherwise everybody loses,
including the user.

00:36:29.590 --> 00:36:32.950
You also want to keep them general,
because the user might not have

00:36:32.950 --> 00:36:35.720
gotten to the first dialogue,
or they might have forgotten it

00:36:35.720 --> 00:36:37.300
and dismissed it immediately.

00:36:37.430 --> 00:36:40.300
So if you're going to send
some alerts in succession,

00:36:40.370 --> 00:36:42.990
will the third one make as
much sense as the first?

00:36:43.090 --> 00:36:43.960
That's very important.

00:36:44.150 --> 00:36:47.130
You don't want to have a
dialogue that talks back to

00:36:47.520 --> 00:36:49.970
two notifications previously,
because the user might have long

00:36:49.970 --> 00:36:52.410
forgotten what you were talking about.

00:36:54.920 --> 00:36:58.630
And I said this earlier,
but you don't want to depend on delivery.

00:36:58.890 --> 00:37:01.040
This is something that's supposed
to make your application better.

00:37:01.040 --> 00:37:04.390
It's supposed to augment the
core functionality of your app.

00:37:04.520 --> 00:37:07.670
You want to get this information to
them in a more timely fashion than you

00:37:07.670 --> 00:37:09.630
would have before the service existed.

00:37:09.780 --> 00:37:11.800
But you don't want to
build an app around it.

00:37:11.800 --> 00:37:15.060
And you don't want to depend on this
mechanism as the way to get really

00:37:15.060 --> 00:37:17.450
important things to the user right away.

00:37:21.960 --> 00:37:23.600
So when would you use an alert?

00:37:23.650 --> 00:37:27.010
What's a good use case
for creating an alert?

00:37:28.870 --> 00:37:30.210
Well, there's a couple of levels here.

00:37:30.220 --> 00:37:33.550
There's nice-to-know information,
something where I'm walking down the

00:37:33.610 --> 00:37:37.440
street and I hear the ding and I look
up and I see the dialogue and I say,

00:37:37.440 --> 00:37:39.200
"Oh, yeah, I've been waiting for that.

00:37:39.200 --> 00:37:40.420
I'll go ahead and deal with it right now.

00:37:40.580 --> 00:37:43.770
Or maybe I won't." That's
why we have two buttons here.

00:38:03.110 --> 00:38:03.110
When we take a step up to
something worth knowing.

00:38:03.110 --> 00:38:03.110
In other words,
I was heading somewhere and there's

00:38:03.110 --> 00:38:03.110
been a change of plans and I probably
need to adapt to that on the fly.

00:38:03.110 --> 00:38:03.110
It's a good candidate for an alert.

00:38:03.110 --> 00:38:03.110
And then, of course,
you have need to know.

00:38:03.110 --> 00:38:03.110
The kind of information that the
user absolutely can't wait to

00:38:03.110 --> 00:38:03.110
hear and needs to do something
about as soon as possible.

00:38:04.810 --> 00:38:07.820
And this is really,
this is where you really want to be is

00:38:08.190 --> 00:38:11.030
between worth knowing and need to know.

00:38:11.100 --> 00:38:14.600
I've got nice to know up there,
but nice to know is pretty subjective.

00:38:14.660 --> 00:38:17.600
Like I said before,
we all think our data is important.

00:38:17.690 --> 00:38:19.650
And we don't want to just send FYI stuff.

00:38:19.780 --> 00:38:25.890
We want it to be actionable things that
are going to be important to the user,

00:38:25.890 --> 00:38:28.570
and we don't want them
to happen too frequently.

00:38:28.570 --> 00:38:28.570
Otherwise,
there's always going to be a dialogue up.

00:38:30.230 --> 00:38:33.070
So that brings us to when
you wouldn't use them.

00:38:33.070 --> 00:38:36.110
Obviously,
if the user doesn't need to know.

00:38:36.410 --> 00:38:38.640
Can they wait until the next
time they launch the app?

00:38:38.770 --> 00:38:41.000
Can they wait until they get an email?

00:38:41.050 --> 00:38:46.790
An alert is for timely and
important notifications.

00:38:47.400 --> 00:39:07.900
[Transcript missing]

00:39:10.710 --> 00:39:12.840
Don't waste the user's time.

00:39:12.890 --> 00:39:15.080
This service is supposed
to make your app better,

00:39:15.120 --> 00:39:16.450
not worse.

00:39:16.520 --> 00:39:18.500
And we're trusting you
to decide appropriately,

00:39:18.540 --> 00:39:22.400
because none of us wants the user
to just uninstall your app because

00:39:22.400 --> 00:39:24.870
they've gotten too many dialogs.

00:39:27.720 --> 00:39:29.730
So, combinations here, the scenarios.

00:39:29.960 --> 00:39:33.420
If you're going to be using an alert,
you're probably also going to

00:39:33.420 --> 00:39:35.190
have a badge associated with that.

00:39:35.270 --> 00:39:37.600
And you're probably also
going to have a sound.

00:39:37.600 --> 00:39:41.990
So, you're kind of all in if you've
decided you have an alert scenario.

00:39:42.050 --> 00:39:44.880
There are a few cases where you
have an FYI sort of thing where it

00:39:45.070 --> 00:39:46.560
might just be an alert and a sound.

00:39:46.620 --> 00:39:49.130
But like I said, you don't really want
to concentrate on that.

00:39:49.370 --> 00:39:54.010
Because if it's not that important,
it's probably not an alert.

00:39:54.100 --> 00:39:56.870
And for badges,
you probably want to associate

00:39:56.880 --> 00:39:59.010
a sound with that as well.

00:40:02.070 --> 00:40:04.620
And you may want to provide
some settings to tweak that,

00:40:04.650 --> 00:40:08.160
which brings us to
Settings and Preferences.

00:40:08.240 --> 00:40:11.570
We talked about this in the beginning,
but the system fetch new data

00:40:11.570 --> 00:40:15.950
settings control the service
and how the service is used.

00:40:16.610 --> 00:40:19.800
So things like push versus
fetch versus manual,

00:40:19.850 --> 00:40:22.560
as well as just turning
it on and off altogether.

00:40:22.600 --> 00:40:26.330
And again, the user can enable or disable
the service for just your app or

00:40:26.420 --> 00:40:28.240
for all apps across the system.

00:40:28.240 --> 00:40:30.260
And that's something
you need to remember.

00:40:30.340 --> 00:40:32.200
But that's controlled by us.

00:40:32.200 --> 00:40:35.460
As soon as you register with iPhone OS,
you get put in that list and you

00:40:35.480 --> 00:40:39.340
don't need to worry about the
settings to turn things on or off.

00:40:40.360 --> 00:40:42.920
And your inline settings
should control the rest.

00:40:43.050 --> 00:40:46.660
So things like choosing a certain sound
for a certain type of notification,

00:40:46.710 --> 00:40:49.900
and maybe things like how often
you want notifications to be sent.

00:40:49.950 --> 00:40:53.480
And that would be something you,
of course, relayed back to your user.

00:41:01.470 --> 00:41:01.470
Excuse me, to your server.

00:41:01.470 --> 00:41:01.470
And there are tons of things
you can put in these settings,

00:41:01.470 --> 00:41:01.470
but you want to generally keep it simple.

00:41:01.470 --> 00:41:01.470
You don't want to go crazy.

00:41:02.620 --> 00:41:04.900
You don't want to have numerous
types of notifications,

00:41:04.950 --> 00:41:05.880
and I said this earlier.

00:41:05.900 --> 00:41:08.360
You want to just decide what are the
things that are really important.

00:41:08.380 --> 00:41:11.340
And this is a good mental exercise
anyway if you attended John's user

00:41:11.340 --> 00:41:12.780
experience session this morning.

00:41:12.780 --> 00:41:15.280
What are the things that
the user really cares about?

00:41:15.280 --> 00:41:16.620
Why did they download my app?

00:41:16.680 --> 00:41:21.040
And do they want to know about this
stuff as it changes at all times?

00:41:21.060 --> 00:41:22.600
That's what a notification is.

00:41:22.600 --> 00:41:24.470
You also want to avoid filtering.

00:41:24.480 --> 00:41:27.040
Stuff like,
only send me a notification if

00:41:27.060 --> 00:41:34.110
these five of my 750 friends
update their profile picture.

00:41:34.350 --> 00:41:38.100
Managing a UI for that is not
going to work out so very well.

00:41:38.100 --> 00:41:40.000
We really want to keep this simple.

00:41:40.000 --> 00:41:44.820
So think hard about what's important and
what's going to be important to the user.

00:41:46.360 --> 00:41:50.060
So the key user experience points.

00:41:50.130 --> 00:41:51.900
Don't annoy the user.

00:41:51.990 --> 00:41:54.980
I would think that's common sense,
but I have to say it out loud.

00:41:55.120 --> 00:41:57.060
If you annoy the user,
they're going to disable

00:41:57.060 --> 00:42:00.300
notifications to your app,
or they're just going to uninstall it,

00:42:00.300 --> 00:42:01.710
and nobody wants that.

00:42:03.330 --> 00:42:05.490
Use badges as your
primary notification type.

00:42:05.710 --> 00:42:07.500
It's usually more than enough
to get their attention,

00:42:07.540 --> 00:42:10.180
especially with a sound associated to it.

00:42:10.280 --> 00:42:13.190
I pick up my phone, I say, "Wow,
I have five unread messages.

00:42:13.210 --> 00:42:16.440
I'm going to go ahead and launch
this app and go take a look at them."

00:42:17.200 --> 00:42:35.260
Provide clear and short sounds.

00:42:35.610 --> 00:42:35.650
Clear as in high quality,
as in distinguished and brand, you know,

00:42:35.650 --> 00:42:35.650
containing your brand so that you
can distinguish yourself between

00:42:35.650 --> 00:42:35.650
other applications on the system.

00:42:35.650 --> 00:42:35.650
And short,
because you don't want to annoy the

00:42:35.650 --> 00:42:35.650
user as the notifications come in.

00:42:37.460 --> 00:42:38.980
Maintain proper context.

00:42:39.080 --> 00:42:42.800
Make sure you have that accurate
badge count and have clear

00:42:43.040 --> 00:42:44.660
and consistent alert messages.

00:42:44.860 --> 00:42:47.320
Make sure the third
dialogue will make sense,

00:42:47.320 --> 00:42:49.550
even if the user hasn't read the first.

00:42:52.580 --> 00:42:54.910
And finally,
make sure you're aware of the

00:42:54.910 --> 00:42:56.830
changing conditions that could happen.

00:42:56.900 --> 00:42:59.180
You might have an iPod Touch user
who's only going to be getting

00:42:59.180 --> 00:43:01.110
notifications when they're on Wi-Fi.

00:43:01.330 --> 00:43:04.620
And you have the variability
of cell phone coverage.

00:43:04.840 --> 00:43:07.900
The user might be in Antarctica,
they might be driving under a tunnel,

00:43:07.980 --> 00:43:10.990
they might have dropped
their phone on the ground.

00:43:11.140 --> 00:43:13.170
Keep those things in mind.

00:43:14.220 --> 00:43:15.240
So that's really it.

00:43:15.280 --> 00:43:18.700
This is a short session because
it's a simple technology.

00:43:18.900 --> 00:43:21.200
But things you can do today

00:43:21.910 --> 00:43:23.660
Prepare your servers.

00:43:23.750 --> 00:43:25.520
Go home,
think about your server architecture,

00:43:25.610 --> 00:43:30.690
think about what you saw today
with these posts and puts and gets.

00:43:30.790 --> 00:43:33.550
And think about what you're going
to need to do to make this work and

00:43:33.550 --> 00:43:37.460
integrate it easily into whatever
you've got set up right now.

00:43:37.560 --> 00:43:38.640
Think about user experience.

00:43:38.780 --> 00:43:41.980
Think about what kind of
notifications you want to send:

00:43:42.100 --> 00:43:43.390
dialogues, badges, sounds.

00:43:43.530 --> 00:43:46.890
Think about how important
they really are to the user.

00:43:47.580 --> 00:43:49.050
Decide on your sounds.

00:43:49.120 --> 00:43:52.040
You've probably got some picked already
for your app while it's running.

00:43:52.100 --> 00:43:53.330
Make sure you've got those bundled.

00:43:53.340 --> 00:43:55.470
That's one thing you can not
have to worry about when we

00:43:55.470 --> 00:43:56.820
finally launch this service.

00:43:57.000 --> 00:43:59.660
You'll have that taken care of.

00:43:59.720 --> 00:44:01.370
And finally, plan for a quick upgrade.

00:44:01.510 --> 00:44:03.950
I know everybody's dying
for the App Store to launch,

00:44:04.120 --> 00:44:06.780
but at some point we're going
to push this thing live,

00:44:06.790 --> 00:44:10.540
so pencil in a quick update
so you guys can move quickly

00:44:10.540 --> 00:44:15.040
when this service goes live,
and you'll be ready to put something out

00:44:15.110 --> 00:44:16.530
that immediately takes advantage of it.

00:44:16.620 --> 00:44:18.930
You want to be there quickly
after the server's live.

00:44:19.000 --> 00:44:21.360
You don't want to be there
six months or a year later.

00:44:21.460 --> 00:44:24.360
You want to make sure you've got
the edge here before somebody else

00:44:24.520 --> 00:44:28.900
who's doing something similar has
already provided notifications.

00:44:30.670 --> 00:44:33.580
We're early here,
so we're still working on things.

00:44:33.720 --> 00:44:36.640
If you want more information,
if you want a recap of

00:44:36.640 --> 00:44:38.600
what we talked about here,
a little more detail,

00:44:38.600 --> 00:44:40.960
you can always get in touch with me.

00:44:41.300 --> 00:44:45.140
And I'm sure all of you are going
to the iPhone Dev Center regularly.

00:44:45.190 --> 00:44:48.020
Just check back there for any updated
information that we have on this

00:44:48.020 --> 00:44:51.500
service once it becomes available,
once it gets closer.

00:44:52.040 --> 00:44:55.500
Sessions you want to keep in mind when
you go home and start watching videos:

00:44:55.500 --> 00:44:57.740
the application development
fundamentals for the newcomers.

00:44:57.740 --> 00:44:59.300
I presume everybody was there.

00:44:59.360 --> 00:45:01.400
But that will get you a
little more acquainted with

00:45:01.400 --> 00:45:04.500
things that I was mentioning,
like UI application and notifications.

00:45:04.600 --> 00:45:06.700
Hopefully by now it's Wednesday.

00:45:06.760 --> 00:45:09.470
You guys at least know
what UI application is.

00:45:09.680 --> 00:45:14.480
And the User Interface Design Session,
which talks a lot about thinking

00:45:14.480 --> 00:45:16.510
from the user's mental state.

00:45:16.750 --> 00:45:20.110
What does the user think is important?

00:45:20.410 --> 00:45:21.840
What does the user find important?

00:45:21.920 --> 00:45:23.860
And that should affect the
decisions you make when it comes

00:45:23.880 --> 00:45:26.470
to sending these notifications,
as well as designing your

00:45:26.470 --> 00:45:28.260
application in the first place.

00:45:28.330 --> 00:45:33.300
And assuming we run out of time in Q&A,
we're going to go ahead and

00:45:33.420 --> 00:45:37.710
run out to Twin Peaks right
behind this for soft seating.

00:45:37.800 --> 00:45:40.640
And we can go ahead and hear some
more of your thoughts and questions

00:45:40.680 --> 00:45:44.390
and what else you'd like to see out
of this service as it moves forward.